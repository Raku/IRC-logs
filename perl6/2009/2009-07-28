[00:07] *** frew_ joined
[00:09] *** misssingthepoint joined
[00:10] *** broquaint left
[00:10] *** broquaint joined
[00:11] *** ihrd left
[00:14] *** mulephone joined
[00:17] *** hoelzro left
[00:19] *** frew_ left
[00:19] *** frew_ joined
[00:20] *** meppl left
[00:24] *** hyfen_ joined
[00:24] *** hyfen left
[00:33] *** justatheory left
[00:35] *** hoelzro joined
[00:38] *** hoelzro left
[00:43] *** mulephone left
[00:49] *** REPLeffect left
[00:49] *** REPLeffect joined
[00:49] *** explorer left
[00:59] <TimToady> well, I finally figured out that the problem with / \# foo / is that it thinks it's an unspace; likewise for backslashed space character

[00:59] <TimToady> not sure what to do about that...

[01:11] *** orafu left
[01:11] *** orafu joined
[01:15] *** frooh joined
[01:16] *** frooh left
[01:16] *** Limbic_Region left
[01:16] *** japhb left
[01:25] *** frioux joined
[01:30] *** cai joined
[01:30] *** frioux left
[01:37] <misssingthepoint> pmichaud et al: ->> http://use.perl.org/~missingthepoint/journal/39359 <<-

[01:43] *** lumi_ joined
[01:45] *** lumi__ left
[01:47] *** frioux joined
[01:58] *** kidd_` left
[02:06] *** kane_ left
[02:09] *** kane_ joined
[02:11] <TimToady> misssingthepoint: have you got a pugs commit bit yet?

[02:13] <TimToady> if not, /msg me your email and preferred svn nick, and I can send you a commit bit

[02:13] <TimToady> then you can fiddle with anything in the pugs repo, including tests, webpages, specs, etc.

[02:14] *** hyfen_ left
[02:15] *** frioux left
[02:17] *** frioux joined
[02:21] *** colomon left
[02:25] *** alc joined
[02:28] *** hyfen joined
[02:29] <misssingthepoint> yes, i have one :)

[02:29] *** KyleHa joined
[02:29] <KyleHa> mtp:  Did you read my meditation on how I got involved?

[02:29] <misssingthepoint> no, where?

[02:30] <KyleHa> http://perlmonks.org/?node_id=780001

[02:30] <KyleHa> That's just how I did it, not how you have to do it.  8-)

[02:34] <misssingthepoint> KyleHa: that's very helpful.

[02:34] <KyleHa> I'm glad you found it so.

[02:37] <TimToady> one thing you can do right off the bat is monitor this channel when nobody else seems to be active, and be ready to make visitors from perl6-projects feel welcome (since that page points here)

[02:38] <misssingthepoint> ok

[02:38] <TimToady> have you done any webpage hacking?

[02:38] <misssingthepoint> yeah

[02:39] <misssingthepoint> the filtering thingy for moritz_'s irc logs (new version svn'd soon)

[02:39] <s1n> pmichaud: i had an idea for the august dallas.p6m meeting

[02:39] <TimToady> someone needs to make the boxes on perl6-projects behave when the window is either too narrow or too wide; don't know if that appeals

[02:39] <misssingthepoint> actually that's been my on-and-off job for a few years

[02:39] <misssingthepoint> TimToady: i'll do it.

[02:40] <TimToady> cool.  not sure how much refactoring is involved with that though...

[02:40] <misssingthepoint> TimToady: a little... maybe need JS

[02:41] <KyleHa> std: sub foo { return 1,2 }; foo()

[02:41] <p6eval> std 27764: OUTPUT¬´ok 00:02 37m‚ê§¬ª

[02:41] <KyleHa> std: sub foo($x, $y) { return $x,$y }; foo();

[02:41] <p6eval> std 27764: OUTPUT¬´ok 00:03 40m‚ê§¬ª

[02:42] *** nihiliad joined
[02:45] <KyleHa> rakudo: sub foo { return 1,2 }; foo();

[02:45] <p6eval> rakudo ea667e: OUTPUT¬´too many arguments passed (2) - at most 1 param expected‚ê§in sub foo (/tmp/iL0LejZj4w:2)‚ê§called from Main (/tmp/iL0LejZj4w:2)‚ê§¬ª

[02:46] <KyleHa> That ought to work, right?

[02:47] *** dukeleto joined
[02:47] <TimToady> rakudo: sub foo() { return 1,2 }; foo()

[02:47] <p6eval> rakudo ea667e: OUTPUT¬´too many arguments passed (2) - at most 1 param expected‚ê§in sub foo (/tmp/ByU2XymtDT:2)‚ê§called from Main (/tmp/ByU2XymtDT:2)‚ê§¬ª

[02:48] <TimToady> rakudo: sub foo() { return 1 }; foo()

[02:48] <p6eval> rakudo ea667e:  ( no output )

[02:48] <KyleHa> rakudo: sub foo { return (1,2) }; foo();

[02:48] <TimToady> rakudo: sub foo() { return 1 }; say foo()

[02:48] <p6eval> rakudo ea667e:  ( no output )

[02:48] <p6eval> rakudo ea667e: OUTPUT¬´1‚ê§¬ª

[02:48] <TimToady> rakudo: sub foo() { return 1,2 }; say foo()

[02:48] <p6eval> rakudo ea667e: OUTPUT¬´too many arguments passed (2) - at most 1 param expected‚ê§in sub foo (/tmp/mlxUPanqjl:2)‚ê§called from Main (/tmp/mlxUPanqjl:2)‚ê§¬ª

[02:48] <TimToady> looks pretty buggy to me

[02:49] <KyleHa> Thanks.

[02:49] <TimToady> rakudo: sub foo() { return 1,2 }; say foo().perl

[02:49] <p6eval> rakudo ea667e: OUTPUT¬´too many arguments passed (2) - at most 1 param expected‚ê§in sub foo (/tmp/5qYLHEjtTx:2)‚ê§called from Main (/tmp/5qYLHEjtTx:2)‚ê§¬ª

[02:49] <TimToady> rakudo: sub foo() { return (1,2) }; say foo().perl

[02:49] <p6eval> rakudo ea667e: OUTPUT¬´[1, 2]‚ê§¬ª

[02:50] <TimToady> rakudo: sub foo() { return(1,2) }; say foo().perl

[02:50] <p6eval> rakudo ea667e: OUTPUT¬´too many arguments passed (2) - at most 1 param expected‚ê§in sub foo (/tmp/Y03E4eR82n:2)‚ê§called from Main (/tmp/Y03E4eR82n:2)‚ê§¬ª

[02:50] <TimToady> looks like return wants exactly one argument

[02:50] <KyleHa> Yes.  That's why I'm sticking the test in S06-blah blah/return.t

[02:55] <pugs_svn> r27765 | kyle++ | [t/spec] Test for RT #63912

[02:58] *** hoelzro joined
[02:58] *** lucs left
[03:02] <pugs_svn> r27766 | bpetering++ | [perl6-projects.org] add a TODO list

[03:03] *** jauaor joined
[03:03] *** hyfen left
[03:05] <pugs_svn> r27767 | bpetering++ | [perl6-projects.org] Add note about liberal commit bits

[03:06] *** kst left
[03:06] <KyleHa> rakudo: my $c = { say $_; say @_.perl }; $c(2, 3, 4, 5)

[03:06] *** kst joined
[03:06] <p6eval> rakudo ea667e: OUTPUT¬´2‚ê§[3, 4, 5]‚ê§¬ª

[03:07] *** hoelzro left
[03:07] <KyleHa> It seems a little odd that '2' would be in both $_ and @_, but that's what the ticket says.

[03:08] <KyleHa> I guess I ought to gawk at S06.

[03:10] *** mtp2 joined
[03:10] <mtp2> rakudo: say 'hi'

[03:10] <p6eval> rakudo ea667e: OUTPUT¬´hi‚ê§¬ª

[03:10] *** mtp2 left
[03:12] *** hyfen joined
[03:14] <pugs_svn> r27768 | kyle++ | [t/spec] Test for RT #63974

[03:20] *** donaldh left
[03:20] *** donaldh joined
[03:35] *** KyleHa left
[03:41] *** alester joined
[03:51] *** dukeleto left
[03:57] *** mtp2 joined
[03:57] *** mtp2 left
[04:00] *** frew_ left
[04:02] <pugs_svn> r27769 | bpetering++ | [perl6-projects.org] Add actual links to IRC channels for friendliness' sake

[04:10] *** nihiliad left
[04:12] *** frioux left
[04:17] *** kst left
[04:18] *** kst joined
[04:26] <cj> TimToady: did you get my note about reading the intro to the camel book while playing in the pit for The Music Man?  You coincidentally cleared up a bit of confusion I was having there ;)

[04:29] *** dukeleto joined
[04:31] <pugs_svn> r27770 | lwall++ | [STD] disallow unspace in regex

[04:31] <pugs_svn> r27770 | lwall++ | [STD] don't backtrack out of failed rx// and such

[04:31] <pugs_svn> r27770 | lwall++ | [STD] rename rxinfix to regex_infix

[04:31] <pugs_svn> r27770 | lwall++ | [STD] handle ; recognition in regex more robustly

[04:31] <pugs_svn> r27770 | lwall++ | [STD] fix up messages related to ${...}

[04:35] <TimToady> cj: was that an IRC note?  my server blew up in the middle of the night...

[04:41] *** cai left
[04:45] *** japhb joined
[04:45] *** frew_ joined
[04:45] *** kane_ left
[04:49] *** b2gills left
[04:55] <Tene> rakudo: say (gather for 1..3 { take 'a',1,'b',5 }).perl

[04:55] <p6eval> rakudo ea667e: OUTPUT¬´too many arguments passed (4) - 1 param expected‚ê§in Main (/tmp/ihT29ca5FP:2)‚ê§¬ª

[04:55] <Tene> rakudo: say (gather for 1..3 { take ('a',1,'b',5) }).perl

[04:56] <p6eval> rakudo ea667e: OUTPUT¬´["a", 1, "b", 5, "a", 1, "b", 5, "a", 1, "b", 5]‚ê§¬ª

[04:56] <Tene> Is that right?  Should it really flatten like that?

[04:56] <Tene> That seems wrong to me.

[05:06] *** kane_ joined
[05:09] <pugs_svn> r27771 | bpetering++ | [perl6-projects.org] Update TODO - stuff fixed in following commit

[05:09] *** alc left
[05:22] *** frioux joined
[05:28] *** frioux left
[05:35] <TimToady> Tene: that's okay, lists flatten.  slice context will preserve structure

[05:35] <Tene> Okay.

[05:36] <TimToady> std: rx/ x \# y /

[05:36] <p6eval> std 27771: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§No unspace allowed in regex (for literal please quote with single quotes) at /tmp/8MrK8FTway line 1:‚ê§------> [32mrx/ x \[33m‚èè[31m# y /[0m‚ê§FAILED 00:02 36m‚ê§¬ª

[05:36] *** sparc joined
[05:37] <TimToady> someone will need to fix t/spec/S05-mass/rx.t

[05:42] *** synth joined
[05:44] *** hyfen left
[05:58] *** schwern joined
[05:58] <schwern> Any November developers on?

[05:59] *** schwern left
[06:00] *** alc joined
[06:15] *** rfordinal left
[06:32] *** frew_ left
[06:39] <pugs_svn> r27772 | bpetering++ | [perl6-projects.org] fix box layout + clean up HTML

[06:45] *** desertm4x joined
[06:48] <moritz_> misssingthepoint: why do you think the width shouldn't be given in units of font size?

[06:49] *** rfordinal joined
[06:51] *** colomon joined
[06:52] <pugs_svn> r27773 | moritz++ | [perl6-projects.org] link to the more canonical vim highlighting repo

[06:54] <misssingthepoint> moritz_: mainly because it's cognitively dissonant.

[06:54] <moritz_> ok

[06:57] *** Su-Shee joined
[06:57] <Su-Shee> good morning. :)

[06:57] <misssingthepoint> good morning Su-Shee, you usually show up smiling :)

[06:58] <Su-Shee> well usally I'm in a good mood in the morning :)

[06:59] <Su-Shee> I drink my coffee while staring outside the window and that usally leads to nice ideas. today, I though about a GtkPerl Weather Widget Set, Cairo Easy Shapes, a candy button factory based on Image Magick.. :)

[07:00] <misssingthepoint> Su-Shee: i can so relate to that. Morning + coffee + ideas is a good combination for me too. :)

[07:01] *** ihrd joined
[07:01] <misssingthepoint> moritz_: kinda like having an iterator, but reading all its data into an array, then using it?

[07:02] <moritz_> that's cognitively dissonant, yes

[07:06] *** ihrd left
[07:07] <misssingthepoint> :-(=

[07:08] <misssingthepoint> IE exists to make life difficult for people.

[07:09] <moritz_> otoh in Perl 6 the arrays are lazy, so 'for $file.lines { ... }' is just fine ;-)

[07:09] <moritz_> indeed

[07:09] <moritz_> IE--

[07:09] *** dukeleto left
[07:09] *** jlaire left
[07:09] <misssingthepoint> rakudo: say("IE-- " xx 10)

[07:09] <p6eval> rakudo ea667e: OUTPUT¬´IE-- IE-- IE-- IE-- IE-- IE-- IE-- IE-- IE-- IE-- ‚ê§¬ª

[07:10] <misssingthepoint> moritz_: best analogy i had :)

[07:10] <moritz_> ;-)

[07:14] *** RonOreck left
[07:15] *** RonOreck joined
[07:20] *** donaldh left
[07:22] *** donaldh joined
[07:25] *** synth left
[07:31] *** iblechbot joined
[07:36] *** alester left
[07:36] *** dakkar joined
[07:37] <Matt-W> Good morning

[07:38] <moritz_> oh hai

[07:38] *** colomon left
[07:43] <Matt-W> What magic have you been up to

[07:44] *** colomon joined
[07:44] <moritz_> no magic;

[07:45] <misssingthepoint> use magic;

[07:45] <misssingthepoint> fix_everything();

[07:45] <misssingthepoint> ;o)

[07:46] <misssingthepoint> Matt-W: hi

[07:46] <Matt-W> hi misssingthepoint 

[07:46] *** snearch joined
[07:49] *** FurnaceBoy left
[07:53] *** snearch left
[07:53] *** snearch joined
[07:56] <cosimo> szabgab: hi, i just recovered source for LWP::Simple

[07:58] *** fridim_ joined
[08:02] *** dalek left
[08:02] *** cbk left
[08:02] *** awwaiid left
[08:02] *** leedo left
[08:02] *** jdv79 left
[08:02] *** clkao left
[08:02] *** jeekobu left
[08:02] *** gabiruh left
[08:02] *** Ingmar left
[08:02] *** fridim_ left
[08:02] *** Jedai joined
[08:02] *** fridim_ joined
[08:02] *** dalek joined
[08:02] *** cbk joined
[08:02] *** awwaiid joined
[08:02] *** leedo joined
[08:02] *** jdv79 joined
[08:02] *** clkao joined
[08:02] *** jeekobu joined
[08:02] *** gabiruh joined
[08:02] *** Ingmar joined
[08:04] <moritz_> github it!

[08:04] <moritz_> improper use of noun where verb was expected, I know :-)

[08:04] *** zamolxes joined
[08:04] <Su-Shee> well, googling was made a verb either.. 

[08:04] <Su-Shee> I prefer "git it!"

[08:05] <cosimo> any quick & dirty instructions? ...

[08:06] <moritz_> git init .

[08:06] <moritz_> git add *

[08:06] <moritz_> git commit -m 'initial commit'

[08:06] <Su-Shee> cosimo: github leads you through it nicely if you click a new repository.

[08:06] <moritz_> then follow... what Su-Shee said :-)

[08:06] <Su-Shee> cosimo: you'll need an ssh key. 

[08:07] <cosimo> ok, np

[08:09] *** Juerd joined
[08:10] <cosimo> it's really simple :)

[08:12] *** snearch left
[08:13] <Su-Shee> having a blog again is nice. a rant a day keeps the doctor away. ;)

[08:14] <szabgab> Su-Shee, in german only ?

[08:14] <Su-Shee> szabgab: no, I switched to english entirely.

[08:15] <szabgab> I see only this http://sushee.schreibsturm.org/

[08:16] <Su-Shee> szabgab: and that's not a new movable type in light green with english in it?

[08:16] <szabgab> cache

[08:17] <szabgab> now it is in English

[08:18] <szabgab> do you also write about Perl or coding ?

[08:18] <Su-Shee> yes. but not exclusively.

[08:18] *** colomon left
[08:18] <szabgab> for now I see 2 out of 2 political rants :-)

[08:18] <Su-Shee> I also post pictures sometimes. ;)

[08:18] <Su-Shee> szabgab: I installed MT yesterday. ;)

[08:19] <szabgab> so that 1 post per day rate, nice

[08:20] <Su-Shee> let's see how annoying readers get this time. blogging is nice as long as you stay under a certain radar.

[08:21] <Matt-W> get known too much you start getting trolls

[08:21] <Matt-W> not something I've ever had to worry about

[08:21] *** kst left
[08:22] *** kst joined
[08:22] <szabgab> reddit has a few of them, you just need to find a way to ignore them

[08:23] <Su-Shee> Matt-W: yeah. and "interesting" emails of you're female. ;)

[08:23] <szabgab> I for example talk about them on a friendly IRC channel and usuall I get a few good words from my fellow hackers , then it is a lot easier to get over the trolls

[08:24] <moritz_> Su-Shee: you could publish some of the "interesting" mails and publicly ridicule them (but I don't know if that might actually encourage them...)

[08:25] <Su-Shee> moritz_: it does usally. 

[08:25] <Su-Shee> moritz_: and you really don't want to fight publicly in a blog. ;)

[08:25] <szabgab> Su-Shee, you should certainly talk about those on channels where you know you have friends

[08:26] <Matt-W> Here is definitely a channel of friends

[08:26] <moritz_> Su-Shee: unless you're called fefe and disable comments

[08:26] <Su-Shee> he never had any. ;)

[08:27] <Su-Shee> well let's see. blogging good is a certain amount of work.. 

[08:27] <moritz_> yeah, but you know what I mean

[08:27] <szabgab> this one is really a friendly channel but in case you cannot connect to freenode you can always drop by on #padre on irc.perl.org ;-)

[08:28] <Su-Shee> moritz_: I do. ;) 

[08:28] <Su-Shee> szabgab: I'm not worried after two postings. :)

[08:29] <Su-Shee> and urxvt manages to somehow break my font display.. :/

[08:29] <cosimo> here it is, http://github.com/cosimo/perl6-lwp-simple/tree/master

[08:29] <szabgab> cosimo, great, let me try to add it to proto

[08:31] *** RonOreck left
[08:31] <moritz_> cosimo++

[08:32] <cosimo> it's just a quick hack, nothing more

[08:32] *** RonOreck joined
[08:32] <cosimo> my p6 skills are 0.00

[08:33] <szabgab> added to proto project list

[08:33] <szabgab> cosimo, do you plan to hand out commits on it or shall I fork it if I have changes ?

[08:35] <cosimo> szabgab: of course i can hand out commits :)

[08:35] <cosimo> do as you please

[08:35] <szabgab> then please add szabgab on github to it

[08:36] <moritz_> and moritz :-)

[08:36] <moritz_> I don't have anything to commit yet, but it certainly looks interesting enough to change that soon

[08:36] <szabgab> afaik it should use URI module instead of hand processing the given URL

[08:37] <cosimo> here you go,

[08:37] <szabgab> ty

[08:38] <misssingthepoint> moritz_: i have something to show you

[08:38] <moritz_> misssingthepoint: go right ahead

[08:40] <szabgab> misssingthepoint,  20 hours per week is plenty of time :-)

[08:40] <misssingthepoint> szabgab: that's the idea :)

[08:41] <Su-Shee> (now I'm blogging something perl. ;)

[08:41] <misssingthepoint> http://fts.petering.net/irclog/irclog.html

[08:41] <misssingthepoint> moritz_: that's what i was aiming for initially, but you've got to start somewhere :)

[08:41] <misssingthepoint> (and 'special' is broken)

[08:42] <misssingthepoint> (and there are rough edges, 1 bug i know about)

[08:42] <moritz_> misssingthepoint: that's way cool

[08:43] <moritz_> (I don't know if that's the bug you know, but actions have a bogus √Ç in there)

[08:43] <misssingthepoint> (that's just a side effect of taking a snapshot; the encoding gets borked)

[08:44] <misssingthepoint> the bugs are: 1. special (quits/joins) NYI

[08:44] <misssingthepoint> 2. turn filtering on, add some, turn off, see what happens :)

[08:44] <misssingthepoint> but you get the idea :)

[08:44] <szabgab> Su-Shee, and the next step down the road would be to get you added to http://ironman.enlightenedperl.org/

[08:44] <moritz_> misssingthepoint: works here

[08:45] <misssingthepoint> oh.

[08:45] <misssingthepoint> that's no bug... it's a feature!

[08:45] <dakkar> misssingthepoint: the page is encoded in utf-8, but does not declare it

[08:46] <misssingthepoint> dakkar: yep, if moritz_ approves i'll commit it and his lovely Perl will send the correct encoding for you at http://irclog.perlgeek.de

[08:46] <Su-Shee> szabgab: I'm not blogging perl only, I'm really usally a mixed shop of everything from graphics to movies to open source and so on.

[08:46] <szabgab> they filter on the perl keyword

[08:46] <misssingthepoint> dakkar: (i.e. do the right-encoding-thing)

[08:46] <moritz_> Su-Shee: you can filter by tag or so

[08:46] <dakkar> good!

[08:50] <moritz_> Su-Shee: if MT supports an rss feed by tag, just submit that to the ironman

[08:51] <moritz_> misssingthepoint: anyway, you have my approval to commit that, even if not perfect yet

[08:52] <misssingthepoint> moritz_: ta

[09:09] *** ihrd joined
[09:09] *** ihrd left
[09:17] <pugs_svn> r27774 | bpetering++ | [misc/irclog] Cooler nick filtering

[09:18] *** Guest44770 is now known as bionoid

[09:19] <misssingthepoint> moritz_: little bit to fix, but hope you like

[09:19] <misssingthepoint> moritz_: and thanks for the compliment before :)

[09:19] <misssingthepoint> afk food

[09:21] <moritz_> misssingthepoint: I updated the page, and when I click on "Turn on filtering by nick" I get an empty list of nicks - any idea why?

[09:45] *** KyleHa joined
[09:47] <pugs_svn> r27775 | kyle++ | [t/spec] fix S05-mass/rx.t in light of r27770

[09:48] <KyleHa> Is there anyone awake who can sanity that?

[09:50] <sjohnson> "sanity it" ?

[09:50] <KyleHa> Check for sanity.

[09:51] <KyleHa> A code review, one might say.

[09:51] * moritz_ will take a look, perhaps after lunch

[09:52] <KyleHa> Thanks moritz.

[09:52] <sjohnson> oh, i see

[09:52] <KyleHa> Now I can rest easier when I go back to bed.

[09:53] <moritz_> std: rx/ a \# b /

[09:53] <p6eval> std 27774: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§No unspace allowed in regex (for literal please quote with single quotes) at /tmp/S9ux4Vshrt line 1:‚ê§------> [32mrx/ a \[33m‚èè[31m# b /[0m‚ê§FAILED 00:02 36m‚ê§¬ª

[09:55] <misssingthepoint> moritz_: no, gimme5

[09:56] <moritz_> misssingthepoint: no hurry

[09:56] <moritz_> KyleHa: looks good, thanks

[09:57] <KyleHa> Thank YOU.

[10:00] *** KyleHa left
[10:01] <Su-Shee> szabgab: now I blogged massive perl.

[10:04] <szabgab> Su-Shee, I just read the first paragraph - I am a slow reader - but we certainly need you in #padre :-)

[10:05] <Su-Shee> I haven't even got to a threaded perl yet. :)

[10:06] <szabgab> one step at a time, we can help you with that but I think the people here would prefer if we discussed this on #padre

[10:06] <Su-Shee> first, I need some - any - breakfast.

[10:06] <szabgab> if you are interested I can try to help you through the installation

[10:07] <szabgab> I already had 3

[10:08] <Su-Shee> I would just have to build a new perl with threads, i plainly didn't build perl with threads, because "wth do I need threaded perl for?!" ;)

[10:08] <szabgab> Su-Shee, oh and I think it is better to link to http://search.cpan.org/dist/Wx   as that link is stable 

[10:09] <misssingthepoint> moritz_: i suspect it's because i'm emptying a section of the DOM hackily

[10:18] <jnthn> hi all

[10:18] <moritz_> moin jnthn 

[10:20] *** masak joined
[10:20] <masak> greetings, futurologists!

[10:23] *** pmurias joined
[10:24] <masak> I have found a glaring bug in Rakudo that I should have found months ago.

[10:25] <masak> I'm a bit surprised no-onw has caught it in the meantime.

[10:25] <misssingthepoint> do tell.

[10:25] <masak> yep -- gist coming up.

[10:27] <masak> http://gist.github.com/157074

[10:27] <masak> it's affecting Druid since June 8, and I haven't picked up on it since now. :/

[10:27] <masak> s:2nd/since/until/

[10:29] <masak> an interesting question is whether it affects STD.pm too, since I know Rakudo's mechanism for allowing statement-form declarations was copied more or less verbatim from STD.pm.

[10:29] * masak tests locally

[10:30] *** |Jedai| joined
[10:34] <masak> STD.pm seemingly doesn't have the same problem.

[10:34] * masak reports rakudobug

[10:36] *** kane_ left
[10:41] *** wayland76 left
[10:41] *** wayland76 joined
[10:43] <masak> seems you had fun last night. I'll need to backlog. :)

[10:44] <wayland76> ping bots

[10:44] * masak is a bot

[10:48] <araujo> lwiz,org

[10:48] <araujo> lwiz.org

[10:48] <araujo> :D

[10:48] * araujo just got it up

[10:49] <araujo> morning all

[10:49] <masak> y0

[10:50] <masak> araujo: one can tell from your blog content that you're one of the old lambdacamel crew. :)

[10:50] <araujo> masak, :)

[10:50] *** Jedai left
[10:53] <wayland76> Lets see if masakbot has a pester command.. :)

[10:53] <wayland76> masak: pester pmichaud about wayland76's patches to ins2 branch

[10:53] <wayland76> :)

[10:53] <wayland76> Hmm, no response.  I guess not :)

[10:54] <masak> wayland76: you can pester pmichaud yourself!

[10:54] <masak> ;)

[10:54] <wayland76> Yeah, I will, if I'm ever on at the same time

[10:54] <masak> you just need to rise early enough.

[10:54] <wayland76> it's only 9pm here, but I think I'd like to do some reading before I go to bed

[10:54] <wayland76> Well, the problem is, my computer crashes when it gets cold....

[10:55] * masak failed utterly at going to sleep last night

[10:55] <wayland76> ...and the earlier I get up, the longer I have to sit around waiting for the room to warm up before my computer will boot

[10:55] <wayland76> masak: Are you a student or something? :)

[10:55] <wayland76> Oh, wait, sleep, or failed to go to bed?

[10:56] <masak> wayland76: sleep.

[10:56] <masak> wayland76: and yes, I am a student.

[10:56] * jnthn hates failsleep

[10:57] <wayland76> I found one thing that helps failsleep

[10:57] <masak> failsleep leads to failwake. failwake leads to general unhappiness.

[10:57] <wayland76> Go for a walk during the day

[10:57] <jnthn> Me too, but it gives me a hangover the next day.

[10:57] <jnthn> ;-)

[10:57] <wayland76> Oh, mine helps me get up early the next day :)

[10:57] <wayland76> Only problem is, you usually have to go for a walk a while before you go to bed

[10:58] <masak> wayland76: I'll try that. yesterday I swam 2.5 km, so it wasn't that I hadn't got enough physical exercise...

[10:58] <wayland76> I sometimes to 8pm, and occasionally first thing in the morning

[10:58] <wayland76> masak: I should think not.  It has to be cardio, but swimming is that

[10:58] *** colomon joined
[10:59] <wayland76> I know quite a bit about sleep, but I'm not very good at it :)

[10:59] <wayland76> "Did you sleep well?"  ... "No, I made a few mistakes"  -- Steve Wright :)

[10:59] <masak> jnthn: for the first time in a while, I have a blocker bug. http://rt.perl.org/rt3/Ticket/Display.html?id=67976

[10:59] <masak> wayland76: I _so_ know the feeling.

[11:04] *** alc left
[11:15] <masak> szabgab: ping.

[11:16] <szabgab> masak, pong

[11:16] <szabgab> did I break proto ?

[11:16] <masak> szabgab: reviewing your 'proto help' patch. :) no, I don't think you broke it.

[11:16] <masak> testing it now.

[11:17] <szabgab> WORKSFORME :-)

[11:17] <masak> I had a comment or two about the code, that's all.

[11:17] <szabgab> wow, 1-2 comments for my 3 lines of code :-)

[11:17] <szabgab> listening

[11:17] <masak> yes, I have exacting standards. :)

[11:17] <masak> but I try to do it as constructive criticism...

[11:18] <masak> ok, first: the `when 'help' { self.help() }` block is redundant.

[11:18] <masak> you'll note that the method itself is a dispatcher. its purpose is to dispatch to the right method.

[11:19] <masak> none of the other methods are explicitly mentioned, so neither should 'help'.

[11:19] <wayland76> Construction criticism: You did a bad job of CEMENTing your code together.  Were you PLASTERed when you wrote it?  You WOOD do better if you tried to NAIL one problem at a time! :)

[11:19] <wayland76> (excuse the joke :) )

[11:19] <masak> wayland76: :P

[11:20] *** donaldh left
[11:20] <masak> szabgab: the second tiny comment is about whitespace. try to avoid \s at the end of lines.

[11:20] <masak> making a commit to fix both those issues now. on balance, though, thanks for the patch; it clearly made proto better.

[11:21] <wayland76> 'night all :)

[11:21] <masak> wayland76: 'night

[11:21] <szabgab> masak, I wonder if the firts comment really works well

[11:21] <szabgab> what if the user types ./proto help me

[11:21] <szabgab> she will get a message

[11:21] <szabgab> me

[11:22] * masak tries

[11:22] <szabgab> and if the users types ./proto help install   it will blow up

[11:22] <masak> hm, you're right.

[11:22] *** donaldh joined
[11:23] <szabgab> at least the way I wrote help with a single ($msg) argument

[11:23] <masak> 'help' really is a new kind of subcommand.

[11:23] <masak> I'll have to think a bit more about this, it seems.

[11:23] <szabgab> and regarding the trailing whitespaces, well I think i have to teach my editor to strip them :-)

[11:23] <masak> aye.

[11:24] <masak> they are easy to spot in 'git diff', where they show up as big red blotches.

[11:24] <masak> rakudo: 0 but True

[11:24] <p6eval> rakudo ea667e: OUTPUT¬´The but operator can only be used with a role or enum value on the right hand side‚ê§in Main (/tmp/1yCN0sNUvg:2)‚ê§¬ª

[11:24] <masak> o_O

[11:25] *** meppl joined
[11:26] <masak> szabgab: right now, I'm leaning towards removing the $msg parameter, and having the 'help' method simply take a slurpy array and ignore it.

[11:26] <masak> I think I prefer all subcommands to use the same calling style.

[11:26] <szabgab> if I wan to catch any character except closing square bracket, is this the nicest way ?    <-[\]]>  ?

[11:27] <szabgab> masak, you are the boss :-)

[11:27] <masak> gotta go offline for lunch now.

[11:27] <masak> see y'all later.

[11:27] *** masak left
[11:45] <pugs_svn> r27776 | pmurias++ | [re-smop] change {...}.() to {...}

[11:54] *** ruoso joined
[11:55] <ruoso> Hello!

[11:58] <pmurias> ruoso: hi

[11:58] <ruoso> pmurias, hi

[12:00] <pmurias> ruoso: i'm trying to remove all the deviations from perl6 like using {...}.()

[12:01] <pugs_svn> r27777 | bpetering++ | [misc/irclog] Bugfixes in nickfilter.js + 'spoken to' feature

[12:03] <pmurias> ruoso: if i want to experiment with a tracing gc branch how should i check it in?

[12:04] <moritz_> phenny: tell masak a blocker? in the auld days you have just worked around it :-)

[12:04] <phenny> moritz_: I'll pass that on when masak is around.

[12:06] <jnthn> Indeed. Glancing at it, looks like using the block form of classes would work around it...

[12:06] <pugs_svn> r27778 | moritz++ | [irclog] remove left-over debugging alert()

[12:07] <ruoso> pmurias, hmm... maybe it would be a good idea to merge re-smop and re-mildew back to smop and mildew before starting other branch

[12:13] *** skids_ joined
[12:13] <ruoso> pmurias, and probably re-sync with current STD

[12:19] <pmurias> merging with re-smop and re-mildew is likely a good idea

[12:21] <pugs_svn> r27779 | pmurias++ | [re-smop] change $code.(...) to $code(...)

[12:24] <pmurias> ruoso: re-syncing with STD, that depends if the current STD emits AST with full info

[12:25] <pmurias> ruoso: what would be a intresting thing to try out would be to use viv as our rule engine

[12:42] <ruoso> pmurias, aren't we using it already?

[12:48] *** abra joined
[12:50] <pmurias> ruoso: what i mean using it for rules in the user supplied programs

[12:53] <pugs_svn> r27780 | pmurias++ | [re-smop] change $array.[...] $array[...]

[12:54] *** iblechbot left
[12:59] <pmurias> ruoso: that is compiling rules to perl 5 using viv and then using perl5 interop to call them from perl6

[13:00] <moritz_> mildew: say 'a' ~~ /a/

[13:00] <p6eval> mildew: OUTPUT¬´Could not find variable &infix:~~ in the lexical scope.‚ê§¬ª

[13:02] <pmurias> moritz_: mildew doesn't have rules yet

[13:02] *** Whiteknight joined
[13:09] *** desertm4x_ joined
[13:10] *** desertm4x left
[13:14] <pmurias> ruoso: what other work arounds do we use? (fixing $hash.{...} atm)

[13:15] *** hoelzro joined
[13:17] <pugs_svn> r27781 | pmurias++ | [re-smop] change $hash.{...} to $hash{...}

[13:17] *** SmokeMachine joined
[13:21] *** Front_slash joined
[13:22] *** masak joined
[13:26] *** abra left
[13:35] *** arthur-_ left
[13:44] *** pjcj joined
[13:45] <pmichaud> good morning, #perl6

[13:46] <masak> oh hai pmichaud

[13:46] <phenny> masak: 12:04Z <moritz_> tell masak a blocker? in the auld days you have just worked around it :-)

[13:46] <masak> moritz_: oh, hush. :P

[13:47] <masak> pmichaud: yes, a blocker.

[13:47] *** hoelzro_ joined
[13:47] <masak> pmichaud: one due to things that you patched two months ago. I'm amazed that no-one else has picked up on this in the meantime.

[13:48] <pmichaud> details?

[13:48] <masak> http://rt.perl.org/rt3/Ticket/Display.html?id=67976

[13:48] <jnthn> masak: The workaround is to use the block form, no? :-P

[13:48] <masak> jnthn: yes, I guess it is.

[13:48] *** huf_ joined
[13:48] <masak> now, if the fix is complicated, I'll do just that.

[13:49] *** hoelzro left
[13:49] * jnthn has no idea

[13:49] <masak> and I'll rescue my Pod comments to the end of their respective files.

[13:49] *** hoelzro_ is now known as hoelzro

[13:49] <pmichaud> that doesn't seem too hard to fix.

[13:49] <masak> \o/

[13:50] <ruoso> pmurias, hmm... maybe that will be better at the moment we have proper implementation of the interopr

[13:53] *** M_o_C joined
[13:59] *** huf left
[14:12] *** teco000_ joined
[14:16] <misssingthepoint> here's a quickie: how would i go about generating graphs of all sort using Perl 6, today?

[14:16] <misssingthepoint> I can think of a few things:

[14:16] <misssingthepoint> 1. generate GraphViz DOT manually

[14:17] <masak> another question similar to 'what would need to be present in a 1.0-like release?' is 'what would it take for Perl 6 to make the Slashdot frontpage?'

[14:17] <misssingthepoint> 2. generate SVG a la masak++ thingo on use.perl

[14:17] <misssingthepoint> 3. interface to something in Parrot that can do it?

[14:17] <masak> misssingthepoint: I've been thinking of creating some sort of graph module on top of SVG. maybe one could use existing cool modules out there as inspiration.

[14:17] <masak> I think I bookmarked one a while ago, let me have a look.

[14:18] *** teco000_ left
[14:18] <masak> yep, http://scruffy.rubyforge.org/

[14:18] <masak> misssingthepoint: if you'd like to get started porting that, I'm willing to give you a helping hand.

[14:19] <misssingthepoint> masak: sure :)

[14:19] <masak> misssingthepoint: in fact, I might have an incentive to get parts of it done in one week, so that I can use it in my YAPC::EU presentation :P

[14:20] <masak> misssingthepoint: excellent. let me know where I can send patches.

[14:20] <jnthn> YAPC::EU presentation? What's that? ;-)

[14:20] <masak> jnthn: I have no idea. :)

[14:20] <jnthn> Meh. I'll worry about it next week then. 

[14:20] <jnthn> ;-)

[14:20] <masak> it's somerhing that's been in the back of my mind in the last few days, that's all.

[14:20] <masak> probably nothing to worry about.

[14:22] <misssingthepoint> masak: thanks ;)

[14:22] * jnthn breathes easily

[14:23] <masak> misssingthepoint: thank _you_ for letting me delegate tuit sinks. :P

[14:23] <masak> I'll be following the work on that port with true interest.

[14:25] <szabgab> ppl, how can I debug a grammar ?

[14:26] <szabgab> it does not match something that I thought it should, how can I find out why ?

[14:26] <masak> szabgab: Match.perl is a life-saver.

[14:26] <masak> szabgab: other than that, the trick is to not write the whole grammar at once.

[14:26] <szabgab> what do you mean by Match.perl ?

[14:26] <masak> there's not good introspection tool for "now how come grammar G doesn't match string S?" situations.

[14:26] <szabgab> I don't have a match

[14:26] <szabgab>  $/ is empty

[14:27] <masak> szabgab: yes, I realize that. so it doesn't help in the exact situation you're in.

[14:27] <PerlJam> szabgab: you could post the input and the grammar and let #perl6 take a look at it. :)

[14:27] <masak> but genreally, it's really useful.

[14:27] <szabgab> that's nice but I cannot teach that in a class :-)

[14:27] <szabgab> or I can but, well, you know

[14:27] <jnthn> ;-)

[14:28] <jnthn> szabgab: If it's a grammar made up of various rules, testing the various rules in a bottom-up kinda way can help.

[14:28] <pmichaud> misssingthepoint: I'm also interested in having a CSV parser, if you're looking for things to do :-)

[14:28] <masak> szabgab: fwiw, I want to build an Ajax-based tool with two textareas, one for the grammar and one for the string, showing exactly how far things match.

[14:28] <masak> szabgab: mberends++ and I talked about it once.

[14:28] <jnthn> Loading the grammar module in at the REPL (use MyGrammar;) and then playing from there could be a quick-ish way to do that.

[14:29] <misssingthepoint> pmichaud: sure :)

[14:29] <masak> szabgab: write tests for the grammar, using jnthn's tip.

[14:29] <masak> szabgab: you do have tests, right? :)

[14:29] <szabgab> yes yes

[14:29] <pmichaud> misssingthepoint: in my "Hacking Rakudo Perl" talk (where I tell people how they can help develop Rakudo Perl), suggestion #1 is to write applications and modules in Perl 6 :-)

[14:29] <jnthn> There is that. Tests for a grammar probably would check the various rules.

[14:29] <szabgab> and I have my own repl

[14:29] <szabgab> sort of

[14:29] <masak> szabgab: nice! is it better than the Rakudo REPL? :)

[14:29] <misssingthepoint> pmichaud: i was just going through that before. it's good :)

[14:30] <szabgab> masak, it is is a full IDE :-)

[14:30] <masak> misssingthepoint: so, do you have a repo yet?

[14:30] * jnthn should also get on to writing Grammar::Generative, which would maybe help in terms of letting you see what a grammar could match...

[14:30] <masak> szabgab: amazing!

[14:30] <jnthn> Or producing examples thereof.

[14:31] <misssingthepoint> masak: no, i'm in the class of developers who don't know version control... guess i have to git learning.

[14:31] <PerlJam> having something like YAPE::Regex::Explain for grammars would be nice.

[14:31] <masak> jnthn: sounds a bit like that Haskell test module, whatchamagoogle.

[14:31] *** KyleHa joined
[14:32] <masak> QuickCheck!

[14:33] <masak> http://www.cs.chalmers.se/~rjmh/QuickCheck/

[14:33] <hoelzro> masak++ for QuickCheck reference =)

[14:33] <misssingthepoint> masak: http://pugs.blogs.com/pugs/2007/10/a-graphical-tra.html might be interesting :)

[14:34] <szabgab> can I embed print statements in the grammar to see what does it do ?

[14:34] <masak> misssingthepoint: yes, that's a good part of the way to what I want.

[14:34] <masak> szabgab: maybe you should check misssingthepoint's link out too.

[14:34] <masak> szabgab: yes, but they have to be PIR for the time being.

[14:35] <masak> szabgab: but it's definitely doable.

[14:35] <szabgab> can you give an example ?

[14:35] <misssingthepoint> jnthn: i'd love something like Grammar::Generative. :)

[14:35] <jnthn> misssingthepoint: I keep planning to write it.

[14:36] <jnthn> misssingthepoint: But keep getting distracted working on Rakudo. ;-)

[14:36] <misssingthepoint> jnthn: feel free to indulge in that distraction :)

[14:37] <misssingthepoint> jnthn: is there any way i could help something like G::G happen?

[14:38] *** abra joined
[14:38] <jnthn> misssingthepoint: Well, actually, pmichaud++ is about to work on PGE refactors shortly...

[14:39] <jnthn> misssingthepoint: So I was pondering holding off until then.

[14:39] <jnthn> misssingthepoint: But really it's not *so* hard to write.

[14:39] <jnthn> Just multi-dispatching over the PGE AST nodes.

[14:39] <masak> szabgab: http://gist.github.com/157392

[14:39] <jnthn> Recursively.

[14:39] <jnthn> And building up output.

[14:40] <misssingthepoint> jnthn: *winces* think a newbie could do it, given some pointers, and help from #perl6?

[14:40] <jnthn> I was figuring the process could be given some "direction" as desribed by supplying a tree of nested captures.

[14:40] *** hudnix left
[14:40] <szabgab> masak, ty

[14:41] <masak> szabgab: code immediately becomes Parrot-specific (and probably self-deprecating), of course.

[14:41] <pmichaud> I've been thinking about adding a trace mode to PGE

[14:41] <jnthn> misssingthepoint: Oh, another blocker...Regex.perl needs to work also.

[14:41] <pmichaud> (based on seeing Damian's debugging output from Parse::Grammar)

[14:42] <jnthn> http://gist.github.com/157394 # this is the tiny bit of code I'd scribbled so far...but more playing than anything serious.

[14:42] <PerlJam> masak: parrot has say these days BTW

[14:42] <masak> pmichaud: that would be nice, I think.

[14:42] <masak> PerlJam: thanks for the tip.

[14:42] <masak> and Parrot++

[14:42] *** rfordinal left
[14:42] <szabgab> masak, any help is a good help

[14:43] <moritz_> rakudo: Q:PIR{ say "foo" }

[14:43] <szabgab> you'll see this trick display :-)

[14:43] <p6eval> rakudo ea667e: OUTPUT¬´foo‚ê§¬ª

[14:43] *** rfordinal joined
[14:46] <moritz_> bah, regexes don't seem to set their outer scope properly

[14:46] <moritz_> ie a find_lex embedded in a regex will never succeed in finding Perl 6 variables

[14:47] <jnthn> moritz_: Think that's known issue.

[14:47] <jnthn> moritz_: PGE pre-dates lexicals refactor in Parrot...

[14:47] <jnthn> :-(

[14:49] <misssingthepoint> RFC: Parsing CSV is a (completely?) solved problem. Port Text::CSV?

[14:50] <masak> sounds like a good idea.

[14:50] <moritz_> sure, why not?

[14:50] <misssingthepoint> ok.

[14:52] <pmichaud> (regexes don't see lexicals)    This is the primary reason that     regex { $a }    doesn't work

[14:53] <moritz_> and let me guess, parrot doesn't easily allow something along the lines of $outer_lexpad = $caller.lexpad?

[14:54] <jnthn> Heh, actually you can do a set_outer now

[14:54] <jnthn> But it's not really the ideal fix I guess.

[14:54] <pmichaud> setting the caller as the outer lexical is actually wrong

[14:54] <pmichaud> (in many cases)

[14:54] <jnthn> Aye. Thus not ideal. :-)

[14:54] <moritz_> erm, yes

[14:54] <jnthn> pmichaud: This may get fixed in upcoming PGE refactors?

[14:55] <pmichaud> on the plus side, I'm working on PGE this week, and making it lexically aware is high on the list

[14:55] <moritz_> the outer pad where it was compiled, actually

[14:55] <moritz_> pmichaud++

[14:55] <pmichaud> jnthn: sure, it has to be fixed in order for us to get contextuals

[14:56] <jnthn> Ah, yes.

[14:56] *** alester joined
[15:03] *** rfordinal left
[15:05] *** jimmy_ joined
[15:07] <jimmy_> what is ¬ª√∂¬´ ?

[15:07] <jimmy_> it's in the topic.

[15:08] <masak> jimmy_: it's a character version of a butterfly.

[15:08] <pmichaud> that's the ASCII representation for Camelia

[15:08] <pmichaud> (except it's not ASCII :-)

[15:09] <jimmy_> I thought it was Unrecognizable Code :(

[15:09] <masak> er, a Ëù¥Ëù∂. :)

[15:09] <jimmy_> masak++, for improving chinese.

[15:09] <masak> Wikipedia++

[15:10] <jimmy_> masak: where is the rakudo logo from?

[15:11] <TimToady> in japanese usually just Ëù∂Ëù∂, which might be fossilized babytalk

[15:11] <masak> jimmy_: I'm not sure who made the Rakudo logo, actually. TimToady++ made the Camelia Perl 6 logo.

[15:12] <pmichaud> I had a friend of mine who studies Japanese calligraphy make the logo 

[15:12] *** justatheory joined
[15:12] <jimmy_> It likes chinese character

[15:13] <jimmy_> pmichaud++

[15:13] <masak> jimmy_: japanese kanji tend to look like hanzi. :)

[15:14] <TimToady> though the tendency is toward traditional over simplified

[15:14] <jimmy_> masak: yes, that was why i am curious

[15:14] <hoelzro> that's because simplified is horrible =P

[15:14] <masak> hoelzro: I wish it were that simple.

[15:15] <hoelzro> I know that simplified increases literacy, but to me, it's so ugly compared to traditional

[15:15] <jimmy_> It is traditional Chinese

[15:15] <jimmy_> Simplified it is ‰πêÂúü

[15:16] <TimToady> yes, I was just about to type that :)

[15:16] <jimmy_> the tone sounds rakudo

[15:17] <masak> hoelzro: we all have our own tastes, of course. I also feel some simplified characters are strange choices or ugly simplifications, but mostly I think they did a decent job. I'm definitely impressed that the whole project of simplifying worked as well as it did.

[15:17] <jimmy_> I think it is transliteration„ÄÇ

[15:17] <TimToady> le4 tu3 by my dictionary

[15:18] <pmichaud> http://gist.github.com/157434    <-- masak

[15:18] <jimmy_> hoelzro: yes, you're right.

[15:18] <masak> 'happy soil'?

[15:18] <masak> pmichaud++

[15:18] <pmichaud> just need to run a spectest

[15:18] <jimmy_> masak: no, it is transliteration.

[15:18] <pmichaud> that took far longer than it should have.

[15:18] <TimToady> masak: "paradise"

[15:18] <hoelzro> masak: I agree with the "working as well as it did" part =P

[15:18] <masak> TimToady: ah, of course!

[15:19] <masak> TimToady: I've heard it before, but doing the understanding with my own brain was much nicer. :)

[15:19] <jimmy_> reading ‰πêÂúüÔºå it sounds like rakudo

[15:20] *** donaldh left
[15:20] <TimToady> they're historically related

[15:20] <TimToady> but chinese and japanese have diverged since the borrowings

[15:21] *** donaldh joined
[15:21] <masak> divergence happens.

[15:22] <TimToady> trouble is that nobody bothers to declare it in natural languages :)

[15:22] <masak> here in Europe, we have both that, and simultaneously heave inter-lingual borrowing.

[15:22] <jimmy_> anyway, good logo, i love it.

[15:22] <masak> s/heave/heavy/

[15:22] <TimToady> Camelia is intended to brainwash all the little children into loving Perl

[15:23] <pmurias> ruoso: what do you mean by "a proper implementation"

[15:23] <pmurias> ?

[15:25] <pmurias> masak: re slashdot front page, if 1.0 was really bad is propable it would make it to the slashdot frontpage

[15:26] <masak> pmurias: I think a 1.0 release would make the frontpage regardless, actually.

[15:26] <masak> just by virtue of its version number.

[15:26] <jimmy_> masak: does Camelia mean Ëù¥Ëù∂ÔºåI can't find it in my dictionary

[15:27] <masak> jimmy_: no 'butteryfly' means Ëù¥Ëù∂.

[15:27] <pmichaud> jimmy_: Camelia is the Perl 6 logo.  See the upper-right of perl6-projects.org for a picture

[15:27] <masak> ugh, 'butterfly'.

[15:27] <jimmy_> but what does Camelia mean? Camellia?

[15:28] <Su-Shee> camellia is the tea plant.

[15:28] <moritz_> jimmy_: I think it's a name.

[15:28] <masak> jimmy_: 'Camelia' sounds like a girl's name.

[15:28] <PerlJam> Why are butterflies so called?

[15:28] <masak> jimmy_: it's a word play on 'camel'.

[15:28] <moritz_> and names don't have to have meanings :-)

[15:28] <PerlJam> flying butter doesn't sound descriptive

[15:29] <jimmy_> masakÔºö Wikipedia++ again.

[15:29] <Su-Shee> PerlJam: I've got a visual though :)

[15:29] *** nihiliad joined
[15:29] <Su-Shee> well actually "camelia" is a world famous sanitary pad brand. ;) 

[15:30] <mberends> Re: "Rakudo 1.0" release name, how about "Preview.0", "Preview.1" etc?

[15:30] <PerlJam> Su-Shee: never heard of it.

[15:30] <masak> mberends: gut reaction: I like.

[15:30] <jimmy_> Camelia (born June 20, 1974 as Dayang Noor Camelia Abang Khalid) is a Malaysian singer and model. She was the first Malaysian to be signed to Universal Music :)

[15:32] *** SmokeMachine left
[15:32] *** lumi_ left
[15:33] *** r0bby left
[15:33] <PerlJam> masak: tell me how you like it when we're at Preview.157   :)

[15:34] <jnthn> Preview might be a name that puts people of playing with it who wouldn't have done so already.

[15:34] <masak> PerlJam: yes, that's an argument for postponing any 'special' release indefinitely.

[15:34] <jnthn> "It's not ready yet. Just a preview. Only for the really interested."

[15:34] <jnthn> That's not really the goal, as I understand it.

[15:35] <masak> so, we're looking for something more positive.

[15:35] <masak> AlmostDone.0

[15:35] <masak> Interesting.0

[15:35] <PerlJam> something that doesn't only pique the interest of early adopters.

[15:35] <masak> README.0

[15:36] <moritz_> perl-5.12 

[15:36] * moritz_ ducks

[15:36] <PerlJam> moritz++

[15:36] <masak> :D

[15:36] <pmichaud> I'm looking for a term that means "you can really use this for real stuff" while also indicating "it's not everything in Perl 6 yet"

[15:36] <Su-Shee> rakudo beta. 

[15:36] <moritz_> prakudo, where 'p' stands for 'partial'

[15:36] <PerlJam> pmichaud: perl 5i   (already been done though :)

[15:36] <Su-Shee> moritz_: pre-kudo?

[15:37] <mberends> PartridgeInAPearTree.1 # 12 step scale

[15:37] <masak> fracudo, f for 'fractures easily'

[15:37] <moritz_> Su-Shee: "beta" suggests near feture completenes

[15:37] <moritz_> Su-Shee: I like pre-kudo :-)

[15:37] <masak> mberends: :)

[15:37] <pmichaud> hopefully by the time of the release we're not fracturing as much

[15:37] <jnthn> Perl6-- ;-)

[15:37] <Su-Shee> moritz_: won't it be "near feature complete"?

[15:37] <masak> jnthn: do you realize what that would do for the karma of Perl6 on this channel? :O

[15:38] <pmichaud> Su-Shee: given that the Perl 6 spec would likely not be complete by the time of the release, it's hard to imagine that the implementation would be :-)

[15:38] <jnthn> OMFG I RETRACT MY SUGGESTION!

[15:38] <jnthn> ;-)

[15:38] <moritz_> Su-Shee: depends on what "near" is for you

[15:38] <PerlJam> Isn't the name more about branding than advertising?  Pick a brand (name) and advertise it well and it doesn't matter so much what the name is (as long as it isn't unfortunate)

[15:38] <pmichaud> PerlJam: names matter

[15:39] <TimToady> well, the Perl 5 spec isn't complete yet either

[15:39] <moritz_> I suspect it won't have substantial concurrency, macros, speed and other stuff that we don't have yet (although I'd love to be proven wrong)

[15:39] <pmichaud> PerlJam: calling it "Perl 6.0.0" would undoubtedly be a mistake :-)

[15:39] <PerlJam> pmichaud: sure they matter, but they don't have to bring any kind of message along with them.  They just have to be "nice"

[15:39] <Su-Shee> how about one of those cute naming schemas like rakudo riveting ranger? ;)

[15:39] <jimmy_> perl 5++?

[15:39] <moritz_> oh noez

[15:39] <TimToady> Perl 6.-1.0

[15:40] <pmichaud> PerlJam: the point is that some names bring a message along with them, whether we like it or not

[15:40] <jnthn> It'd probably be good if the name actually included "Rakudo".

[15:40] <Su-Shee> well if it is something which one can actually use, I really would call it plainly rakudo beta. 

[15:40] <PerlJam> what message does "rakduo 1.0" bring?

[15:40] <PerlJam> er, spelt correctly

[15:40] <jnthn> "use me"

[15:40] <TimToady> rakudo 1.-1.0

[15:40] <pmichaud> PerlJam: for some people, it would bring the message "Perl 6 is finished"

[15:41] <masak> PerlJam: 'sharp release'

[15:41] <jimmy_> rakudo 1.0 preview

[15:41] <pmurias> if the current release of rakudo is 19 wouln't 1.0 be a very old one?

[15:41] *** lumi_ joined
[15:41] <masak> Rakudo 35.0

[15:41] <moritz_> pmurias: Num !~~ Int

[15:41] <TimToady> make it a website and you can keep it beta for five years

[15:41] <jimmy_> rakudo 1.0 alpha1 ?

[15:41] <Su-Shee> rakudo "early adopter" ;)

[15:41] <PerlJam> pmichaud: how many are "those people"?

[15:41] <pmichaud> PerlJam: I suspect a great many (more)

[15:41] <Su-Shee> TimToady: exactly my thinking. ;) it works for google. ;)

[15:42] <jimmy_> perl6 preview

[15:42] <pmichaud> PerlJam: in some sense, I don't want to provide too much ammunition for the crowd that wants to say "see, you've been working on Perl 6 for ten years and all you're able to produce is a very incomplete implementation"

[15:42] <jnthn> masak: Well in that case, clearly Rakudo 42 is the answer. ;-)

[15:42] <pmichaud> I recognize we can't silence that crowd entirely

[15:42] <masak> jnthn: that does have some appeal.

[15:42] <jimmy_> Perl 6 preview

[15:42] <moritz_> that'll be in 5 months...

[15:42] <moritz_> around .... *drummrolls*.... christmas!

[15:42] <PerlJam> "preview" doesn't say "use me" at all.

[15:43] *** molaf joined
[15:43] <masak> right, 'Preview' says 'wait a while'.

[15:43] <pmichaud> but at the same time, we don't want people thinking "Perl 6 is done!" and being disappointed by the un-done parts

[15:43] <masak> "we'll be stable soon"

[15:43] <jimmy_> Perl 6 please use me

[15:43] <PerlJam> "rakudo 1.0" says "use me"  Whether that's a complete perl 6 or not it doesn't say (IMHO)

[15:43] <pmichaud> PerlJam: I agree -- I'm not totally against "Rakudo 1.0" as a name, as long as we can come up with a good way to say what it is/isn't

[15:44] <Su-Shee> how about rakudo advent :) that's really, really short before christmas and leads directly to it. :) 

[15:44] <PerlJam> Su-Shee++  :)

[15:44] <hoelzro> Rakudo 0.99(repeating) titled "Christmas is Here"

[15:44] <hoelzro> Su-Shee: damn, that's even better

[15:45] <PerlJam> Su-Shee: and advent is much better than "Rakudo 1.0 - Christmas Eve" too  :)

[15:45] <jimmy_> Rakudo 1.0 the Christms Gift

[15:45] <jnthn> It does have the benefit that releases don't get caleld "Advent" normally so people will have to read what it means rather than make assumptions like they might on seeing 1.0 or preview.

[15:45] <jimmy_> s/Christms/Christmas/

[15:45] <Su-Shee> well it's a little off if rakudo is actually released around easter the first time. ;)

[15:45] <PerlJam> pmichaud: what do you expect to be unimplemented (or mostly so) in Rakudo 1.0 ?

[15:46] *** kst left
[15:46] <pmichaud> PerlJam: well, that's also what needs to be decided.  But I'd be doubtful of concurrency features

[15:46] <pmichaud> I also don't know how much of S09 would be present

[15:46] *** kst joined
[15:46] <Su-Shee> pmichaud: well there has to be some room for future releases and completing features. look what other programming languages release as their version 1.0

[15:47] <PerlJam> Su-Shee: ruby 1.0 was crap, only no one knew hardly anything about ruby at the time so it didn't matter so much.

[15:48] <PerlJam> Everybody knows about Perl though

[15:48] <TimToady> heh, "ADVENT" was what you typed on a PDP-11 running RSTS to run adventure, since filenames were limited to 6 letters

[15:48] <masak> yes, the problem is the high expectations.

[15:48] <[particle]1> pmichaud: is there a nazareth.pm group?

[15:48] <Su-Shee> ah. and all advents have names, btw. so there could be a rakudo gaudete and a rakudo at te levavi and so on :))

[15:48] <pmichaud> There is a part of me that says for us to do what's natural for us and not worry too much about expectations.

[15:48] *** [particle]1 is now known as [particle]

[15:48] <PerlJam> Then maybe it's time for a rebranding  (as much as I hate to say it, stop calling the language "perl")

[15:49] <pmichaud> PerlJam: "Rakudo" is a useful rebranding for this purpose, I think.

[15:49] <masak> PerlJam: but it is Perl.

[15:49] <PerlJam> masak: that's beside the point :)

[15:49] <TimToady> we're not going to waste a perfectly good four-letter word

[15:49] <KyleHa> You could say it's Rakudo 1.0 without saying it's "Perl 6" 1.0

[15:49] <masak> PerlJam: that's an interesting opinion. :)

[15:49] <pmichaud> I like the "adventure" side of "advent".  I'd be a little concerned that calling it "Advent" (with the biblical connotations) might offend non-christians.

[15:50] <masak> Rakudo-1.0-but-not-Perl-6.0

[15:50] <Su-Shee> I've always thought of it as a "rakudo perl implementation"

[15:50] <dakkar> ¬´Rakudo Advent ‚Äî it's Perl 6-Œµ¬ª

[15:50] <PerlJam> masak: read something about how GTE figured it would  take over 25 years of perfect customer service and marketing for them to overcome the negative impressions that  their current customer base had.  So what did they do?  The changed names.

[15:50] <moritz_> KyleHa: people already confuse Perl 6 and Parrot. I don't think we should give them more room for confusion

[15:50] *** Whiteknight left
[15:50] <Su-Shee> pmichaud: well the "before christmas" pun already was christian anyway.

[15:50] <masak> pmichaud: why would 'Advent' offent non-Christians?

[15:50] <PerlJam> masak: in some sense Perl has a boat load of negative press to voercome

[15:50] <PerlJam> er, overcome

[15:50] <mberends> while TimToady++ is right that specs continue to evolve, it would be a big plus if changes to the Synopses could be restrained somehow after Advent.

[15:50] <hoelzro> Rakudo "Winter Solstice"?

[15:51] <[particle]> pmichaud: consider naming 'stable' releases differently from 'developer' releases

[15:51] <masak> PerlJam: true. it also has a couple of good connotations.

[15:51] <pmichaud> Su-Shee: sure, I recognize that "christmas" is christian already (and I have no problem with that), continuing the same theme might tend to enshrine it

[15:51] <Su-Shee> pmichaud: you could wear red and a white beard and do a ho ho ho while releasing rakudo :)

[15:51] <masak> mberends: why would it be a big plus to stop improving the specs?

[15:52] <PerlJam> Su-Shee++  I like the way you think!

[15:52] <PerlJam> :-)

[15:52] <masak> me too!

[15:52] <Su-Shee> PerlJam: you just wanna see pmichaud as santa ;)

[15:52] <pmichaud> [particle]: I really want to excise the term "stable release" from anything we do.

[15:52] <masak> well, who doesn't?

[15:52] <TimToady> how am I supposed to backlog when y'all type so fast?

[15:52] <[particle]> yeah, i don't really mean stable, anyway

[15:52] <[particle]> i mean milestone or something

[15:52] <PerlJam> Su-Shee: I still see him as a Willy Wonka mostly, so that would be a change  :)

[15:52] <pmurias> the point of a 1.0 is to mark a stable release

[15:53] <Su-Shee> pmichaud: considering the name rakudo one could develop an international name scheme of hildays of all religions

[15:53] <pmichaud> pmurias: except "stable" means different things to different people.  See p5.

[15:53] <PerlJam> Su-Shee: The Gene Wilder version of course

[15:53] <TimToady> you mean stable like parrot 1.0 is stable :P

[15:53] <awwaiid> Rakudo Solstice -- From the depth of winter comes the light

[15:53] <[particle]>  /kick TimToady

[15:54] <pmichaud> although going with the Willy Wonka theme, perhaps Rakudo 1.0 is the "Candy Store" release.  :-)

[15:54] *** TimToady sets mode: +o [particle]

[15:54] <[particle]> :)

[15:54] <pmichaud> and everyone who uses it will be like children in a candy store.

[15:54] <hoelzro> Rakudo "Golden Ticket"?

[15:54] <Su-Shee> rakudo eid (end of ramadan) for example.

[15:54] <[particle]> android is using candy names, well, bakery item names

[15:54] <pmichaud> (Golden Ticket)++

[15:54] <TimToady> I want the world, I want the whole world, I want it now!!!

[15:54] <pmichaud> this is your ticket to paradise.  :-)

[15:55] <Su-Shee> rakudo golden ticket sounds like a drug lord release. ;)

[15:55] <hoelzro> pmichaud: that sounds like something a cult leader would say

[15:55] <pmichaud> well, we do hope that Perl 6 is addictive.

[15:55] <TimToady> call it Gateway.  oh wait...

[15:55] <masak> hoelzro: I like "Golden Ticket"!

[15:55] <Su-Shee> pmichaud: and being filtered by every parental control on the planet? ;)

[15:55] <pmichaud> me, it appears I'm addicted to oxygen.

[15:56] <hoelzro> masak: me too, especially Charlie hasn't arrived at the factory just yet =)

[15:56] *** snearch joined
[15:56] <TimToady> every now and then I hold my breath to prove I'm not really addicted to oxygen.

[15:56] <pmichaud> TimToady: and you manage to avoid the withdrawal symptoms?

[15:56] <masak> you guys should be careful. oxygen is poisonous.

[15:56] <masak> and very reactive.

[15:57] <[particle]> i'm addicted to nitrogen

[15:57] * pmichaud wonders where he could get a Willy Wonka outfit.

[15:57] <TimToady> [particle]: you have Rapture of the Deep?

[15:57] <pmichaud> (and yes, the Gene Wilder version)

[15:57] *** donaldh left
[15:57] <Su-Shee> the release cycle of rakudo stays with this monthly releases?

[15:58] <pmichaud> Rakudo will likely continue to have monthly releases for a while

[15:58] <pmichaud> at some point in the future we might move to quarterly releases

[15:58] <Su-Shee> pmichaud: let's ask johnny depp if he's doing the release! :)

[15:58] <TimToady> speaking of Camelia products...

[15:59] <Su-Shee> pmichaud: I was thinking calling it plainly rakudo january, february and so on and later something like easter, vacation, halloween and christmas.

[15:59] <TimToady> I like that

[15:59] <Su-Shee> isn't there something in summer.. 

[16:00] * [particle] turns deep purple

[16:00] <TimToady> apparently nobody has revolutions in August

[16:00] <Su-Shee> easter, revolution, halloween, christmas. ;)

[16:00] <Su-Shee> TimToady: well napoleon and lawrence of arabia are born in august. ;)

[16:01] <pmurias> TimToady: http://en.wikipedia.org/wiki/August_Revolution

[16:01] *** dukeleto joined
[16:01] <TimToady> maybe we should start with romulus and remus, and then we'll have more names to use up

[16:01] <masak> :)

[16:01] <pmichaud> Su-Shee: Rakudo already does month names for its releases

[16:01] <masak> it can only go downhill after romulus and remus.

[16:02] <TimToady> but it can only do it seven times

[16:02] <Su-Shee> pmichaud: I thought it perl mongers chapters?

[16:02] <pmichaud> Su-Shee: that also.

[16:02] <TimToady> is there a rome.pm?

[16:02] <[particle]> until you get to the sisyphus release...

[16:03] <misssingthepoint> rofl @ TimToady 

[16:03] <TimToady> "rome wasn't built in a day" and all that...

[16:03] <[particle]> too bad the plumbing was lead

[16:03] <pmichaud> Rakudo 1.0 -- "Not built in a day"

[16:03] <hoelzro> pmichaud: I like that a lot

[16:04] <Su-Shee> pmichaud: *hihi* this is pretty funny :)

[16:04] <[particle]> can't wait for the NVTS release

[16:04] <dakkar> yes, there is a Rome.pm

[16:05] *** kane_ joined
[16:06] <PerlJam> Rakudo 1.0 - vini vidi vici   :-)

[16:06] * TimToady backlogs desperately while everyone is panting

[16:06] <Su-Shee> and then we're going to have a cesarian release, a decadence release, a stoic release.. ;)

[16:06] <hoelzro> PerlJam: s/vini/veni/?

[16:06] <KyleHa> Rakudo one point oh hai!

[16:06] <hoelzro> Su-Shee++

[16:07] <PerlJam> hoelzro: yeah, htat

[16:07] <misssingthepoint> s/vini/vino/

[16:07] <hoelzro> misssingthepoint: nice

[16:07] *** masak left
[16:07] <TimToady> s/vino/veritas/

[16:07] <Su-Shee> .oO(make it a toga instead of a red dress and a white beard ;)

[16:07] *** SmokeMachine joined
[16:07] <hoelzro> TimToady: veritas ~~ truth, right?

[16:08] <hoelzro> my Latin's terrible

[16:08] <Su-Shee> misssingthepoint: rakudo burgundy, rakudo champagne, rakudo...? ;)

[16:08] *** dakkar left
[16:08] <Su-Shee> ("monthly release party!)

[16:08] <misssingthepoint> how about the world's wine regions? I live near Jacob's Creek.

[16:08] <misssingthepoint> Rakudo Napa Valley?

[16:09] <Su-Shee> misssingthepoint: this will lead to many, many french releases. ;)

[16:09] <misssingthepoint> um, yess....

[16:10] <jimmy_> Perl 6 times coming

[16:11] *** molaf left
[16:11] <misssingthepoint> Rakudo Irresistible?

[16:12] <Su-Shee> rakudo seduction ;)

[16:13] <TimToady> now if I said that, it'd be sexist. :)

[16:13] <moritz_> as long as we don't name it "rakudo porn star" ;-) ...

[16:13] <mberends> the Rakudo eXPerience :/

[16:13] <misssingthepoint> mberends: sacrilege!

[16:13] <mberends> sry ;-)

[16:13] <jnthn> moritz_: No, no, we need Rakudo to perform like a porn star first. ;-)

[16:13] *** zamolxes left
[16:13] <TimToady> or at least sixist

[16:14] <Su-Shee> moritz_: *haehae* :)

[16:14] <misssingthepoint> Su-Shee: like you were saying, many many French releases.

[16:14] <jnthn> <ducks>

[16:14] <Su-Shee> jnthn: would you show us..? ;)

[16:14] <TimToady> Perl 6 times coming?!?

[16:14] <[particle]> we could go the musical route, using words like harmony, staccato, and my favorite for a 1.0 release, cadence

[16:15] <mdxi> i'd rather have cheeses than wines. Rakudo Double Gloucester

[16:15] <Su-Shee> TimToady: *ouch* :))

[16:15] <jnthn> eww!!

[16:15] * araujo votes for jnthn recommendation 

[16:15] <[particle]> there's a cheese local to me named camelia

[16:15] <TimToady> ducking?

[16:16] <[particle]> actually, camellia.

[16:16] <araujo> TimToady, haha, before his duck :D

[16:17] <jimmy_> Rakudo 1.0 Camellia

[16:18] <[particle]> http://www.redwoodhill.com/cheese.htm :)

[16:18] * [particle] could provide many, many, many cheese names for releases

[16:19] <Su-Shee> cheese will probably make half of asia feel nauseous ;)

[16:19] <Su-Shee> (I vote against a rakudo natto release ;)

[16:19] <[particle]> those names might be more fitting for mold/mildew/slime/smop releases

[16:19] <araujo> Rakudo 1.0 Anchovies 

[16:20] <moritz_> rakudo 1.0 "extra cheezburger"

[16:20] <TimToady> there are a lot of STDes

[16:20] <pmichaud> okay, here are a few thoughts

[16:20] <pmichaud> oh wait, brb

[16:20] <Su-Shee> [particle]: rakudo rotten release ;)

[16:20] <araujo> Rakudo 1.0 Milkshake 

[16:20] <[particle]> pmichaud needs to be alone with his though

[16:20] <[particle]> *thought

[16:21] <misssingthepoint> Rakudo 1.0: <STD>: Parse it along...

[16:21] * misssingthepoint shudders at badness of that.

[16:22] <[particle]> it's catchy.

[16:22] <TimToady> you aren't allowed to shudder at your own bad puns

[16:22] <pmichaud> b

[16:22] <araujo> hahaha

[16:22] <pmichaud> the names here are all excellent ideas, and we might even use some (more)

[16:23] <pmichaud> the point of this is not to come up with a naming scheme (rakudo already has one -- we use .pm groups), but rather to figure out how we can indicate to the wider world that we're beyond development and into "useful product"

[16:24] <[particle]> well, then with cheese names you start with ricotta

[16:24] <TimToady> then name it "Useful" :)

[16:24] <pmichaud> TimToady: yes, I just now thought of that.

[16:24] <pmichaud> But more to the point, the idea I had (possibly bad idea) is that instead of figuring out the name, perhaps we should be drafting the release announcement we'd like to use when we get to that point

[16:24] <[particle]> sounds like you could use a lot of smurf/dwarf names like that

[16:24] <pmichaud> perhaps the release announcement would then tell us the appropriate terms to use

[16:26] <pmichaud> (I knew I could clear a room quickly, but ...)

[16:27] <PerlJam> pmichaud: sounds good to me  :)

[16:27] <jimmy_> When will come to 1.0?

[16:27] * PerlJam wanders off again to help a student with ldap auth issues

[16:27] <pmichaud> jimmy_: is it necessary that we have a 1.0?  (honest question)

[16:28] <jimmy_> maybe

[16:28] <misssingthepoint> pmichaud: you just have us all thinking :)

[16:29] <pmichaud> I suspect we're all thinking "is that a good idea, or not?"  ;-)

[16:29] <pmichaud> and we're afraid to say either "yes" or "no"  :-P

[16:29] <cj> TimToady: yeah, I asked someone to @tell yo

[16:29] <Su-Shee> pmichaud: if you're concerned with all this "after 10 years" stuff I think it should be an 1.0

[16:30] <pmichaud> Su-Shee: that strikes a chord with me, yes.

[16:30] <jnthn> I think part of working this out is working out the priorities for this Bigger Release, whatever we're going to call it.

[16:30] <TimToady> call it "Ten" then :)

[16:30] <jnthn> And what'll be in it.

[16:30] <[particle]> "Perfect Ten"

[16:31] <TimToady> Â§©

[16:31] <jnthn> Or, what must be in it for us to declare "we've reached that point"

[16:31] <pmichaud> jnthn: yes, that's one of our primary tasks at yapc::eu

[16:31] <jnthn> TimToady: Isn't that sky/heaven/imperial?

[16:31] *** Psyche^ joined
[16:31] <moritz_> if we do release something called "1.0", then please first stress-test rakudo.org if it can stand a slashdot "attack"

[16:32] <jnthn> pmichaud: Right, but I suspect that needs to come before working out names/announcements. Much fun as naming is. ;-)

[16:32] <pmichaud> jnthn: s/come before/as part of/

[16:32] <pmichaud> in many ways, the announcement is "what we want to be announcing"

[16:32] <pmichaud> that tells us what we have to implement

[16:33] <pmichaud> phrased differently, the announcement is our goal

[16:33] *** rfordinal joined
[16:33] *** dukeleto left
[16:33] <jnthn> Yes, to some degree I can see that.

[16:33] <jnthn> Though I suspect the path towards the goal - something else we'll want to work out a bit - will be more detailed than that.

[16:33] <pmichaud> certainly

[16:34] <pmichaud> there will be many features that must be present that won't be mentioned in the announcement

[16:34] <jnthn> Right.

[16:34] *** snearch left
[16:34] <jnthn> Thus why I think an announcement would come out of this process, but only be one thing that would come out of it.

[16:35] <pmichaud> right, agreed.

[16:35] <pmichaud> My feeling is that if we're going to be setting expectations, we have to understand that now and can't wait until next Spring to start addressing it.

[16:35] <jnthn> But I do like the notioin that we figure out in advance what we'd like to be announcing.

[16:35] <jnthn> Right.

[16:36] *** Whiteknight joined
[16:36] <pmichaud> going off on another set of thoughts for a bit

[16:37] <[particle]> The Rakudo development team is proud to announce a future release of Rakudo 1.0: a useful, working, subset of Perl 6.  Contents and Release Date TBD.

[16:37] <PerlJam> [particle]: ship it!

[16:37] <pmichaud> [particle]: I like that.

[16:37] <[particle]> :)

[16:37] <[particle]> wikify it and start adding content.

[16:37] <pmichaud> (I'll leave my other thoughts alone for now, actually.  They have to do with "stable" versus "predictable")

[16:37] <Su-Shee> the "subset" is a little turn-off. 

[16:38] *** jimmy_ left
[16:38] <pmichaud> Su-Shee: I'm open for other terms, but "subset" is honest.

[16:38] <[particle]> subset is the goal, we should be clear about that

[16:38] <PerlJam> Su-Shee: for me, after reading that, I'd just want to know what works and what doesn't

[16:39] <misssingthepoint> s/useful/highly useful/ and keep 'subset'?

[16:39] <Su-Shee> pmichaud: subset sounds to me like "it can't do sockets" or something essential like this. main set? I don't know the right english term.

[16:39] <[particle]> to the wiki, please!

[16:39] <PerlJam> Su-Shee: sockets are essential?!?

[16:39] <Su-Shee> misssingthepoint: "highly" usally implies otherwise

[16:39] <misssingthepoint> Su-Shee: true :(

[16:39] <Su-Shee> PerlJam: uhm, networking..? :)

[16:40] <pmichaud> "Rakudo 1.0:  a substantial implementation of Perl 6"

[16:40] <PerlJam> Su-Shee: I use perl all the time without needing networking  :)

[16:40] *** jan_ left
[16:41] <Su-Shee> PerlJam: was just an example. make it "can't do file IO" :)

[16:41] <[particle]> how on earth do i create a new documentation page on rakudo.org?

[16:41] <PerlJam> that one would be a showstopper for me  :)

[16:41] <pmichaud> [particle]: if you want it to be wiki, use github

[16:42] <[particle]> ok then

[16:42] *** cdarroch joined
[16:42] <pmichaud> http://wiki.github.com/rakudo/rakudo

[16:42] <Su-Shee> pmichaud: if I understand you correctly, rakudo release can do the rakudo version of what "today every programming language can do" in terms of features - the fancy stuff like concurrency excluded?

[16:42] *** Patterner left
[16:42] *** Psyche^ is now known as Patterner

[16:42] <pmichaud> Su-Shee: that seems like a very good approximation, yes.

[16:43] <pmichaud> (and I like this approach)

[16:43] <Su-Shee> pmichaud: then how about "a base implementation of Perl 6"? 

[16:43] <pmichaud> or "an implementation of basic Perl 6"

[16:44] <PerlJam> Su-Shee:  for some people concurrency is essential.

[16:44] <Su-Shee> basic was what I wanted to avoid. :)

[16:44] <pmichaud> PerlJam: we can always come up with some feature X that some group will deem "essential"

[16:44] <jnthn> Some of the stuff Rakudo can do is not basic. ;-)

[16:44] <Su-Shee> PerlJam: yes, but it's in comparison not something which I would call "standard feature"

[16:44] *** jan_ joined
[16:44] <TimToady> concurrency means many different things, but if we do laziness, we'll have most of concurrency already

[16:45] <[particle]> http://wiki.github.com/rakudo/rakudo/rakudo-10-release-announcement-draft

[16:45] <pmichaud> My purpose is not to say "we fit your requirements" for any value of "your".  Rather it's to say "we fit the requirements for a lot of people, and you might be in that group"

[16:45] <PerlJam> pm: indeed, I think we should just be wary of calling features "fancy"  :)

[16:45] <pmichaud> ...why is that?

[16:45] <TimToady> but then there's also "underpromise and overperform"

[16:46] <[particle]> http://rakudo.org/documentation

[16:46] <Su-Shee> pmichaud: hence my comparison. you probably want to say honestly "you can do with perl 6 what you can do with any other programming language on the market now"

[16:46] <[particle]> ok, folks, edit away.

[16:46] <PerlJam> it kind of trivializes them to those that think them essential.

[16:47] <[particle]> Su-Shee: including segfault occasionally ;)

[16:47] * PerlJam is wary of generalizations.

[16:47] <pmichaud> PerlJam: I think that many features of Perl 5 are both "fancy" and "essential to my purposes".

[16:47] <pmichaud> PDL comes to mind.

[16:47] <PerlJam> Su-Shee: lua?  erlang?  ;)

[16:48] <pmichaud> "scripting language" 

[16:48] <Su-Shee> on the other hand: how many people really "get" perl 6's feature at a glance and in comparison without taking a detailed, very knowledgable look at it? and if so: wouldn't the very first remark everybody is doing "well, nice language - but there's no environment right now" and not really care so much wether or not it has feature x or y?

[16:48] <PerlJam> pmichaud: haskell?

[16:48] <pmichaud> Su-Shee: ...no environment?

[16:48] <Su-Shee> pmichaud: I mean stuff like DBI, SSL, Gtk, foo, bar.. 

[16:48] <PerlJam> padre!

[16:49] <PerlJam> :)

[16:49] <PerlJam> Su-Shee: that sounds like "no CPAN"

[16:49] <pmichaud> Su-Shee: I'm hoping that by the time of the release we'll actually have some of those things in place as well.

[16:49] <Su-Shee> pmichaud: I still got the interesting discussion of reddit's switch from lisp to python in my mind. 

[16:49] *** ruoso left
[16:49] <pmichaud> We certainly should be able to handle standard modules of various forms.  To me that's essential to the release as well -- if we can't do modules, then we're not at "useful" status.

[16:50] <Su-Shee> pmichaud: but it won't be today's CPAN then and I'm sure each and every nitpicker will rub exactly that in. :)

[16:50] <pmichaud> Su-Shee: I'm not aiming at the nitpickers.  We have to be aware of them, but we don't have to convince them.

[16:51] *** misssingthepoint left
[16:51] *** misssingthepoint joined
[16:51] <pmichaud> I'm aiming at the folks who are thinking that maybe they'd like to use Perl 6 but they're not sure it's ready for them yet.

[16:52] <pmichaud> This release is to say "we think we're about ready for you"

[16:52] <misssingthepoint> ... by which i mean it's late. i would love to stay here all night. bye! D/ :)

[16:52] *** misssingthepoint left
[16:52] <Su-Shee> but if more or less everything need is already there - then it really isn't a subset anymore, isn't it?

[16:52] <Su-Shee> needed.

[16:52] * PerlJam wonders where those people are ...

[16:52] <pmichaud> PerlJam: they exist.  I meet them all the time at conferences.

[16:53] <PerlJam> mostly I tend to hear "Perl 6 rocks!" or "Perl 6 sucks!" and never do I hear/see "Perl 6 sounds interesting ... when will it be read"

[16:53] *** sri_kraih_ left
[16:53] <PerlJam> er, ready?"

[16:53] *** justatheory left
[16:53] *** sri_kraih joined
[16:53] <pmichaud> "I'd really like to use Perl 6, but I have a difficult time convincing myself (or my managers) to start using it."

[16:53] <moritz_> PerlJam: I do hear that from fellow perl mongers.

[16:53] <[particle]> database bindings will make perl 6 useful for many

[16:54] <pmichaud> PerlJam: this is classic "early adopter chasm" stuff (see "Crossing the chasm")

[16:54] <pmichaud> People are afraid to jump in until they see others like them jumping in

[16:54] <Su-Shee> pmichaud: actually, I didn't. :) I just got a job exactly with selling "Perl 6 is the future of Perl and we want smoothly change into it, because we commit to perl for another decade"

[16:54] <pmichaud> Su-Shee: excellent!

[16:55] <PerlJam> Su-Shee: and they didn't ask "why?"  or "why not <some other language> instead?"

[16:55] <Su-Shee> well let's see if they really mean it, but they certainly were more then just "interested".

[16:55] <hoelzro> I'd like to write the backend for Try Rakudo! in Perl6, but I want things like chroot and fork =(

[16:55] <pmichaud> hoelzro: I think we might be able to get those for you.

[16:55] <hoelzro> also, given my certain security ideas, I'd need two versions of Rakudo and Parrot on my machine

[16:56] <hoelzro> pmichaud: yay

[16:56] <pmichaud> Maybe not chroot, but fork we should be able to do.

[16:56] <Su-Shee> PerlJam: they've tried a couple of years ago in the era what I call the "perl crisis" ;) but everything else wasn't convincing so they stuck with Perl. Now they like it anyway and don't want to change anymore.

[16:56] <hoelzro> pmichaud: binding Rakudo to native functions is still a moving target, yes?

[16:56] <PerlJam> Su-Shee: them++

[16:56] <pmichaud> hoelzro: yes, but it should be no longer moving by next January

[16:57] <pmichaud> Otherwise Parrot will have missed some major milestones.

[16:57] <hoelzro> pmichaud: is it Parrot we're waiting on?

[16:57] <PerlJam> pmichaud: and parrot has never done that  </sarcasm>

[16:57] <pmichaud> for fork and chroot, I suspect so.

[16:57] * PerlJam is in a weird mood today

[16:57] <hoelzro> I was reading up on Parrot opcodes, and it seems like they have dlopen and friends

[16:58] *** kane_ left
[16:58] <pmichaud> If parrot already supports fork/chroot at the PIR level, then it should be straightforward to add them to Rakudo.

[16:58] <pmichaud> hoelzro: yes, dlopen exists.

[16:58] <pmichaud> But the interface to calling the native functions is the moving target.

[16:58] <hoelzro> ah I see

[16:58] <PerlJam> hoelzro: yes, the NCI is good, but still a tad clunky (at least last time I looked at it)

[16:59] <Su-Shee> (what I need desperately with a reakudo for real release is a real book..)

[16:59] <hoelzro> I understand if Parrot needs to do special things for fork, but I'd think chroot would be relatively simple

[16:59] <pmichaud> Su-Shee: (stuck with perl)  That sounds like a good article in there somewhere.

[16:59] <hoelzro> unless you need to find/hang on to certain files

[16:59] *** lucs joined
[17:00] <Su-Shee> pmichaud: they also plainly had no reason to change after perl got back on the track again. 

[17:00] <PerlJam> Who have perl 6 books in the works and will they be  ready by Spring 2010?

[17:00] <pmichaud> I don't know that big-publisher perl 6 books will be ready by Spring 2010

[17:00] <Su-Shee> I thought, there was a grant for a book?

[17:01] <Su-Shee> apress got one announced. 

[17:01] <PerlJam> Stonehenge -> Learning Perl 6 and TimToady + Damian -> Programming Perl 6 ?  right?

[17:01] <Su-Shee> since 2008 ;)

[17:01] <pmichaud> I'm wondering if we can put something together that's print-on-demand-ish, though.

[17:01] * moritz_ would love to do such a thing

[17:01] * araujo remember watching a Perl6 book in amazon

[17:01] <moritz_> who else would contribute?

[17:01] <PerlJam> I'd volunteer for book writing/editing/etc

[17:02] <Su-Shee> me gladly. or at least do some editorial work.

[17:02] <pmichaud> A prominent Perl person (I don't know if he wants to be known yet) already started on one this past weekend.  :-)

[17:02] <araujo> moritz_, I can help testing code and stuff

[17:02] <araujo> :P

[17:02] <[particle]> Whiteknight has experience doing this

[17:02] <pmichaud> but we were discussing it as an online book, with lots of authors

[17:02] <Su-Shee> pmichaud: well we got an ebook reader anyway. ;)

[17:03] <moritz_> pmichaud: if he wants a contributor, feel free to point him/her in my direction

[17:03] <Su-Shee> book == a real documentation with examples. 

[17:03] <araujo> http://www.amazon.com/s/ref=nb_ss_gw?url=search-alias%3Daps&field-keywords=perl+6&x=0&y=0

[17:03] <pmichaud> moritz_: I will do that today.

[17:03] <hoelzro> if you ask me, any such book should have a "migration/differences from Perl5 chapter"

[17:03] <hoelzro> or there should a separate book entirely

[17:03] <Su-Shee> moritz_: at least we know that the german it press is sympathizing. ;)

[17:04] <moritz_> Su-Shee: we do know ;-)

[17:04] <pmichaud> hoelzro: I think that's a separate book, personally.

[17:04] <Su-Shee> I think so too.

[17:04] <hoelzro> pmichaud: there's definitely enough content for it

[17:04] <hoelzro> also, your target audience would be different

[17:04] <pmichaud> The book I'm really interested in is  "Perl 6 for new programmers"   and "Perl 6 for Python/Ruby/Java/JavaScript programmers"

[17:05] <araujo> and Haskell programmers? :P

[17:05] <hoelzro> pmichaud: the latter sounds interesting

[17:05] * araujo can help with that part

[17:05] <moritz_> araujo: I have to admit that I find that book a bit suspicious - to the best of my knowledge, neither of the authors came here or to the mailing lists and asked for clarifications or so

[17:05] <moritz_> araujo: IMHO that's a bad sign

[17:05] <araujo> moritz_, that's what seems weird to me , really

[17:05] <araujo> moritz_, I find it weird that even nobody here seems to know the authors or even the books

[17:05] <araujo> I don't get it

[17:06] <Su-Shee> araujo: that's the apress perl 6 book I'm talking about.

[17:06] <moritz_> It's hard for me to imagine that there are people who really grok Perl 6 and don't have questions

[17:06] <PerlJam> araujo: rdice is known

[17:06] <moritz_> araujo: I know richard dice from his TPF work a bit

[17:06] *** justatheory joined
[17:06] <PerlJam> I have no clue who James Lee is  though

[17:06] <araujo> ok, but it seems like more people have worked on these books

[17:07] <Su-Shee> we could start with a perl 6 pocket reference. that would be a great help.

[17:07] <araujo> weird that none of them even gets connected to this channel

[17:07] <PerlJam> Su-Shee: I was contemplating writing a Perl 6 Regex quick ref

[17:07] <araujo> considering plenty of development goes on here

[17:07] <hoelzro> PerlJam: that'd be welcome to many, myself included

[17:07] <Su-Shee> PerlJam: I personally need more. I really love those pocket references. 

[17:08] <PerlJam> Su-Shee:  sure, but that's a niche  that should be filled at some point though

[17:08] <Su-Shee> PerlJam: but of course: I'll order one! :)

[17:08] <pmichaud> the idea of a "Perl 6 Pocket Reference" also came up at OSCON.  That could possibly be done by Spring 2010

[17:08] <pmichaud> (not just regexes

[17:08] <araujo> Perl 6 in Nutshell ? 

[17:08] <Su-Shee> araujo: even better.

[17:08] * araujo would like to see that one too

[17:08] *** fridim_ left
[17:08] <moritz_> araujo: that would bring us dangerously close to an O'Reilly brand, I think

[17:09] <PerlJam> I've come to dislike nutshell books as they have started to seem like "second tier" books  to me.

[17:09] <araujo> moritz_, well, O'Reilly is a cool guy right?

[17:09] <araujo> :P

[17:09] <moritz_> araujo: I doubt his laywers are as cool ;-)

[17:09] <Su-Shee> PerlJam: I think you underestimate how difficult it is to actually get a grasp of what Perl 6 already does and contains.

[17:09] <pmichaud> I think the context of "Perl 6 in a Nutshell" was that O'Reilly would publish it, I think.

[17:10] <araujo> moritz_, hah, right, cool except when it is about money 

[17:10] <araujo> :P

[17:10] <PerlJam> Su-Shee: I don't think so.  :) 

[17:10] <araujo> pmichaud, what I meant ....

[17:10] <Su-Shee> PerlJam: but you already know all this stuff! :)

[17:10] <hoelzro> pmichaud: that reminds me, did you read my thoughts on security for Try Rakudo?

[17:11] <pmichaud> hoelzro: where are they?

[17:11] * araujo thinks other successful name would be "Perl 6 From Moritz"

[17:11] <PerlJam> Su-Shee: no, I only know the parts well that intersect useful and interesting *for me*.

[17:11] <pmichaud> hoelzro: (no, I don't think I read them)

[17:11] <hoelzro> in Sunday's log =(

[17:11] <hoelzro> pmichaud: I can send you an e-mail if you'd like

[17:11] <araujo> moritz_, considering you have plenty of doc about it :P

[17:11] <pmichaud> hoelzro: I'll go back and read them.  I've not had a good chance to backlog yet.

[17:11] * hoelzro still needs to get on the mailing list

[17:11] <moritz_> araujo: thanks :)

[17:11] <hoelzro> mkay

[17:11] <PerlJam> Su-Shee: there's tons of stuff in perl 6 that I don't know

[17:11] <araujo> moritz_, pretty much where I have been learning from :)

[17:12] <hoelzro> PerlJam: that's part of the point: it's an adventure!

[17:12] <hoelzro> Rakudo "Adventure Island"

[17:12] <PerlJam> Ah ... James Lee is the guy who took over "Beginning Perl" 

[17:12] <PerlJam> hoelzro: I'm all for Rakudo 1.0: Advent  (punning is what we do :)

[17:13] <hoelzro> PerlJam: I'm a big fan of Advent

[17:13] <pmichaud> Once again, I'm not looking for a name.

[17:13] <pmichaud> (Unless we decide that we not use .pm groups for names)

[17:15] <pmichaud> i.e., I'm not looking for   "Rakudo 1.0: Foo", where "Foo" is the name of the Rakudo 1.0 release.  I'm looking for  "Rakudo Foo", where "Foo" describes the classification of the release (beta, developer, production, etc.)

[17:15] <moritz_> pmichaud: (unrelated) btw I'm available to do the next rakudo release, but I'd prefer it somebody who never did it volunteered

[17:15] <pmichaud> moritz_: Agreed, I want to build up a team of release managers

[17:15] <pmichaud> moritz_: but you'll be the fallback if we FAIL at getting someone else to do it.

[17:15] <pmichaud> I think jnthn++ should do one, though :-)

[17:16] <moritz_> .oO( I'll be your CATCH block if you fail() )

[17:16] <Su-Shee> ooooh perl 6 romance! ;)

[17:16] <PerlJam> Is there music to go with that song?

[17:16] <pmichaud> I think PerlJam should do one, too.

[17:16] <moritz_> aye

[17:16] <PerlJam> pmichaud: I will.  As soon as I get over this "I'm not worthy" thing

[17:17] <PerlJam> or "I'll screw something up" or "I suck" or whatever

[17:17] <pmichaud> PerlJam: I hereby dub thee "worthy".

[17:17] <moritz_> PerlJam: I think you need mst screaming "you're not good enough" at you ;-)

[17:17] <pmichaud> You're now the August release unless you convince me otherwise. :-) :-)

[17:17] <pmichaud> (Or find me another vict...volunteer.)

[17:18] <PerlJam> pmichaud: give me October.  (It's my birthday month so I'm partial to it)

[17:18] <pmichaud> Okay, you get October.

[17:18] <PerlJam> Give masak August

[17:18] <pmichaud> (on phone)

[17:19] <hoelzro> is '...' not yet impl'd, or has that been removed?

[17:19] <moritz_> PerlJam: did you submit a CLA already?

[17:19] <PerlJam> moritz_: long ago.

[17:19] <moritz_> hoelzro: which '...' do you mean? the operator? or the term?

[17:20] <PerlJam> moritz_: *that's* the kind of thing that grok should do  :)

[17:20] <PerlJam> grok '...'  #  Which ... do you mean?

[17:20] <hoelzro> moritz_: the yadda yadda yadda operator

[17:20] <moritz_> rakudo: ...

[17:20] <hoelzro> eg. fail alias

[17:20] *** xomas_ left
[17:20] <p6eval> rakudo ea667e: OUTPUT¬´Can't return outside a routine‚ê§in Main (/tmp/YzpnxMhUz3:2)‚ê§¬ª

[17:20] <hoelzro> it parses ok when I try, but it doesn't puke

[17:20] *** sparc left
[17:20] <hoelzro> when run

[17:20] <moritz_> hoelzro: fail() is not the same as die()

[17:21] *** kane_ joined
[17:21] <moritz_> hoelzro: ie it will give you an undef which contains an unthrown exception (if all works well)

[17:21] <lisppaste3> mkelly32 pasted "spectest failures on freebsd" at http://paste.lisp.org/display/84323

[17:21] <moritz_> rakudo: my $x = { ... }; $x = $x.(); say $x.WHAT

[17:21] <p6eval> rakudo ea667e: OUTPUT¬´Can't return outside a routine‚ê§in Main (/tmp/KvwaOHhG8y:2)‚ê§¬ª

[17:21] * hoelzro needs to re-read that spec

[17:21] <mkelly32> lemme know what other info you need from that ^^

[17:21] <moritz_> rakudo: my $x = sub { ... }; $x = $x.(); say $x.WHAT

[17:22] <p6eval> rakudo ea667e: OUTPUT¬´Failure()‚ê§¬ª

[17:22] <moritz_> mkelly32: is that latest rakudo?

[17:22] <mkelly32> that's w/ 2009-07-28-gea667e8

[17:22] <hoelzro> moritz_: how's that supposed to propagate?

[17:22] <hoelzro> if someone calls a method on that return value?

[17:22] <moritz_> for example, yes

[17:23] <moritz_> but I must admit that I haven't grokked all the details yet

[17:24] <mkelly32> moritz_: full build log, if that's helpful: http://test.pioto.org/rakudo-smoke-2009-07-28T10:22:59.log

[17:25] <PerlJam> hoelzro: !!! is die,  ... is fail, and ??? is warn.

[17:25] <PerlJam> (I don't think rakudo does all of those yet)

[17:25] *** hercynium left
[17:26] <hoelzro> PerlJam: that's what I thought

[17:26] <hoelzro> I implemented them for Pugs a few years ago, but I don't know if they've changed

[17:33] *** kst left
[17:34] *** kst joined
[17:37] *** r0bby joined
[17:40] *** payload joined
[17:49] *** abra left
[17:53] <colomon> 22222+

[17:53] <colomon> whoops.  never mind.

[18:09] *** arthur-_ joined
[18:10] *** payload left
[18:14] <hoelzro> does Perl 6 have a facility to intercept unknown method calls (like AUTOLOAD in Perl 5)?

[18:14] <moritz_> it does (but NYI in Rakudo)

[18:15] <moritz_> grep for CANDO

[18:15] <hoelzro> grep the specs?

[18:15] *** s1n left
[18:15] *** molaf joined
[18:17] <moritz_> yes

[18:17] <hoelzro> mkay

[18:23] <PerlJam> o/~ I got the horse right here

[18:23] <PerlJam> The name is Paul Revere

[18:23] <PerlJam> And here's a guy that says that the weather's clear

[18:23] <PerlJam> Can do, can do, this guy says the horse can do

[18:23] <PerlJam> If he says the horse can do, can do, can do.

[18:23] <PerlJam> Oops, that all should have been one line.

[18:23] <moritz_> it's visually much nicer on multiiple lines ;-)

[18:23] *** Chillance joined
[18:24] *** eternaleye left
[18:30] *** payload joined
[18:31] *** eternaleye joined
[18:35] <pmichaud> I like it on multiple lines.

[18:36] <pmichaud> although I thought it was "if the weather's clear"

[18:36] <pmurias> hoelzro: or better ack the specs ;)

[18:36] <PerlJam> yeah.

[18:36] <pmichaud> buubot:  spack CANDO

[18:36] <buubot> pmichaud: Couldn't match input.

[18:36] <hoelzro> pmurias: I actually did use ack to find it =)

[18:37] <PerlJam> Not enough Guys & Dolls material in Perl 6  :)

[18:37] <pmichaud> PerlJam++   # bringing Broadway to #perl6

[18:37] *** fridim_ joined
[18:41] *** arthur-_ left
[18:42] *** arthur-_ joined
[18:42] *** arthur-_ left
[18:45] <pmurias> what would be even better then ack would be an ack using Perl 6 rules

[18:45] <alester> Rewrites welcome. :-)

[18:46] *** frodwith left
[18:49] <PerlJam> I even started an ack-a-like for perl6 a while back.  Didn't get very far beyond playing with recursing into dirs though

[18:49] <alester> My first Perl 6 project is going to be writing File::Next in it.

[18:50] <pugs_svn> r27782 | pmurias++ | [re-smop]

[18:50] <pugs_svn> r27782 | pmurias++ | implemented until, infix:< <= >, infix:< >= >

[18:50] <pugs_svn> r27782 | pmurias++ | added ../../t/spec/S04-statements/until.t to TESTS

[18:55] <moritz_> btw KyleHa has made it into the top 10 test suite committers

[19:00] *** Front_slash left
[19:02] <KyleHa> Woohoo!!

[19:03] <KyleHa> I been gone for two hours, and I come back to find that.  It's like dessert.

[19:04] <moritz_> acutually you're top 7 ;-)

[19:04] <KyleHa> Is there a list somewhere?

[19:05] <moritz_> I can paste one, hold on a sec...

[19:05] <lisppaste3> moritz_ pasted "top contributors to the test suite" at http://paste.lisp.org/display/84340

[19:06] <KyleHa> Wow, neat.  Thanks!

[19:07] <moritz_> it's basically the same script as in rakudo's tool/commit-stats.pl

[19:07] <moritz_> used on the git-svn clone of t/

[19:07] <KyleHa> I'll have a look at that when I get a chance.

[19:07] <KyleHa> I'm in a big-ish meeting right now, almost participating.

[19:08] <moritz_> lol

[19:08] * jnthn didn't know we have a commit-stats script

[19:08] *** fridim_ left
[19:08] <moritz_> 3

[19:09] <jnthn> aww

[19:09] <jnthn> List form of pipe open not implemented at tools\commit-stats.pl line 8.

[19:10] <moritz_> windows :/

[19:11] <moritz_> jnthn: you can try open my $c, 'git log --pretty=format:%ae|%ci |'

[19:11] <moritz_> instead

[19:11] <moritz_> it's less secure, but probably implemented on windows

[19:12] <jnthn> moritz_: heh, that just gives me a different error ;-)

[19:12] <jnthn> windows :/

[19:12] <moritz_> jnthn: which one now?

[19:13] <jnthn> '%ci' is not recognized as an internal or external command,

[19:13] <jnthn> operable program or batch file.

[19:13] <jnthn> Died at tools\commit-stats.pl line 20.

[19:13] <moritz_> ah, that's the close() line

[19:13] <moritz_> you can comment that out and ignore it, I guess :)

[19:13] <[particle]> it's the pipe in the format

[19:14] <jnthn> ah

[19:14] <[particle]> need double quotes after pretty=

[19:14] <moritz_> or you use a ':' and change the split in line 13

[19:14] <jnthn> payload: bwa, that complains Can't run git log: Invalid argument. ;-)

[19:15] *** sri_kraih left
[19:15] <moritz_> should I just nopaste the output for you? ;-)

[19:15] <jnthn> same with colons

[19:15] <jnthn> bleh

[19:15] <jnthn> heh, if you want

[19:15] <jnthn> I'm not that bothered to know if I'm beating pmichaud yet. ;-)

[19:15] <[particle]> you need git installed and in path

[19:16] <jnthn> Just hadn't even realized we had such a script.

[19:16] <[particle]> hrmm,

[19:16] <[particle]> git log --pretty=format:%ae:%ci

[19:16] <[particle]> works for me

[19:16] <lisppaste3> moritz_ pasted "Rakudo top committers" at http://paste.lisp.org/display/84341

[19:16] <jnthn> [particle]: Works for me too at the momment line. Hmm.

[19:17] <[particle]> nice slip.

[19:17] <jnthn> Awww...I'm still WAY behind.

[19:17] <PerlJam> hey!  I made the top 15.  /me is shocked

[19:17] <jnthn> Gah! s/moment/command/

[19:17] <[particle]> jnthn: you're 70% there

[19:19] <jnthn> [particle]: Yeah, but it's a moving target. ;-)

[19:20] <jnthn> (Which is a *good* thing!)

[19:23] <mberends> jnthn: if your % score is rising, you can extrapolate to the 100% time and beyond ;)

[19:24] *** justatheory left
[19:33] *** kst left
[19:33] *** kst joined
[19:35] *** hercynium joined
[19:38] <pugs_svn> r27783 | pmichaud++ | [t/spec]:  Refudge test in S32-list/grep.t .

[19:39] <jnthn> pmichaud: I'm going to fix the WALK tests that I somehow missed yesterday later on today.

[19:39] <pmichaud> okay, good.  I was just looking at those.

[19:39] <jnthn> Yeah, it was late, I was tired... :-)

[19:39] <pmichaud> I know that I fixed the grep.t tests yesterday as well,  but apparently the commit got lost somewhere.

[19:39] <jnthn> And a little eager to get the various assorted fixes landed.

[19:40] <moritz_> pmichaud: "Refudge" - when had it was it unfudged?

[19:40] <pmichaud> moritz_: the test itself needed some refactoring.  Perhaps "refudge" is the wrong word tehre.

[19:40] <pmichaud> For one, it's using $_ as a rw param, and I'm not sure that's correct yet.

[19:41] <jnthn> That is dubious, yes.

[19:41] *** justatheory joined
[19:41] <moritz_> $_ defaults to is context<rw> I thought?

[19:41] <pmichaud> that says it's rw to inner contexts

[19:41] <pmichaud> it doesn't say anything about rw-ness of the outer value it's initially bound to

[19:41] <moritz_> oh.

[19:42] <pmichaud> S04 says it's rw 

[19:42] <pmichaud> If you rely on C<$_> as the implicit parameter to a block,

[19:42] <pmichaud> then C<$_> is considered read/write by default.  That is,

[19:42] <pmichaud> the construct:

[19:42] <pmichaud> for @foo {...}

[19:42] <pmichaud> is actually short for:

[19:42] <pmichaud> for @foo <-> $_ {...}

[19:42] <pmichaud> so Rakudo seems to get that wrong.

[19:43] <pmichaud> although earlier in the synopsis we have

[19:43] <pmichaud>     $func = { .print if $_ };   # Same as: $func = -> $_ { .print if $_ };

[19:43] <pmichaud> I'm guessing that should be rewritten to be <-> instead of ->

[19:44] <pmichaud> (that last line is what was throwing me off)

[19:44] <TimToady> yes, s/b <->

[19:45] <pmichaud> (fixing)

[19:45] <jnthn> Aha.

[19:45] <jnthn> OK, good to know.

[19:45] <pmichaud> fixed.

[19:46] <pugs_svn> r27784 | pmichaud++ | Fix incorrect specification of implicit $_ in blocks.

[19:46] <pmichaud> when we fix it in rakudo, the grep.t test should pass (and should be unfudge-able)

[19:46] <pmichaud> defudged

[19:46] <jnthn> unfudged

[19:46] <jnthn> ;-)

[19:46] <pmichaud> does anyone else besides me dislike the output format of Test::Harness 3?

[19:47] <pmichaud> I find it much harder to read the summary.

[19:47] <pmichaud> (compared to earlier versions)

[19:47] <moritz_> it took me a while to get used to it

[19:47] <pmichaud> what's worse, passing TODOs are visually indistinct from FAILS

[19:48] <jnthn> That irks me.

[19:48] <jnthn> I've been confused by that before now.

[19:48] <moritz_> same here

[19:48] <moritz_> (speaking of which, I should clean up the new passing TODOs)

[19:48] <pmichaud> I'm doing some now.

[19:48] <pmichaud> So I can get them out of my test output :-)

[19:49] <moritz_> ok, I'll let you do it then

[19:49] <pugs_svn> r27785 | pmichaud++ | [t/spec]:  Unfudge passing todo in S02-*/type.t .

[19:50] <pugs_svn> r27786 | pmichaud++ | [t/spec]:  Unfudge passing todo test in S12-enums/thorough.t .

[19:51] <jnthn> pmichaud: lol, I fudged fails in S12-enums/thorough.t yesterday

[19:52] * jnthn wonders if we came out equal on balance.

[19:58] *** donaldh joined
[19:59] <jnthn> OK, this is The Cool

[19:59] <jnthn> If you look at S12, and exclude the multiple constraints section which is marked as not 6.0.0 anyway

[20:00] <jnthn> There's only "=head1 Class methods" that we don't really have any coverage of at all in Rakudo.

[20:00] <jnthn> And hey, it's in my Hague Grant to do that. :-)

[20:00] * jnthn reads and ponders how to do it

[20:01] *** snearch joined
[20:02] <TimToady> moritz_: have answered your p6l

[20:02] <TimToady> but hasn't left my machine yet, sigh

[20:02] <pmichaud> oh

[20:02] * pmichaud ran to the mailing list and saw.... nothing.

[20:05] <jnthn> TimToady: "Alternately, you can associate a class method with the current metaclass instance,

[20:05] <jnthn> "

[20:05] <jnthn> TimToady: Would a reasonable implementation of this be to collect such methods into some anonymous role and mix it in to the metaclass instnace?

[20:06] <jnthn> (This is from section I just mentioned in S12)

[20:06] <jnthn> Or does that cry out "OH NOES" to you?

[20:08] <TimToady> nothing OH NOES me, but then few things do offhand.  :)

[20:08] *** desertm4x_ left
[20:08] <jnthn> :-)

[20:08] <jnthn> OK, I'll try it that way.

[20:10] <jnthn> std: class Foo { method ^bar() { } }

[20:10] <p6eval> std 27786: OUTPUT¬´ok 00:02 37m‚ê§¬ª

[20:11] <TimToady> moritz_: okay, went thru

[20:15] <pmichaud> TimToady: your explication matches my understanding of things :-)

[20:15] * pmichaud re-reads to make sure.

[20:15] <moritz_> TimToady: thanks, I'll read it carefully when I'm not on phone anymore ;-)

[20:16] <pmichaud> but yes, the basic idea is that   @a[0] = ...    is a list assignment and not item assignment

[20:18] *** campuscodi joined
[20:19] <campuscodi> hello. is anybody available to answer me a question ?

[20:19] <pmichaud> "Yes."

[20:20] <hoelzro> campuscodi: you only get one, and that was it.

[20:20] <campuscodi> i'm a news writer for softpedia.com (webmasters section) I would like to write an article about current Perl 6 development. Can you point me at some articles or pages were I could get some knowledge ?

[20:21] <campuscodi> I'm interested in new features, important changes and so on

[20:21] <pmichaud> sdtimes.com recently ran an article about Rakudo Perl 6

[20:21] <pmichaud> but that was more about availability than Perl 6 features

[20:22] <pmichaud> start with perl6-projects.org

[20:22] * jnthn didn't see that article

[20:22] <pmichaud> also check  planetsix.perl.org

[20:24] <pmichaud> jnthn: http://www.sdtimes.com/link/33566

[20:25] <campuscodi> ok. thank you very much. if I find enough good information around and I'll get to write about this topic I'll be sure to credit you :P @pmichaud

[20:25] *** kst left
[20:25] <pmichaud> campuscodi: that would be great.

[20:25] <moritz_> campuscodi: if you have more specific questions, also feel free to ask here

[20:25] <pmichaud> campuscodi: if you need more information, here's a good place to ask

[20:25] <[particle]> you two beat me to it

[20:25] *** kst joined
[20:26] <[particle]> pmichaud: are your oscon slides online?

[20:26] <[particle]> they should have details on new features etc

[20:26] <jnthn> pmichaud: nice article

[20:27] <pmichaud> [particle]: my oscon talk wasn't about perl 6 features -- that's normally TheDamian and TimToady's talk

[20:27] <[particle]> ah, right, silly me.

[20:27] <pmichaud> (as was the case again this year)

[20:27] <pmichaud> that said, my slides are online in their usual place:    pmichaud.com/2009/pres

[20:28] <campuscodi> actually this lecture http://en.oreilly.com/oscon2009/public/schedule/detail/8061 made me wanna write something about the topic

[20:28] <[particle]> wasn't sure if you'd uploaded the latest yet, i'll take a look at your revamped pres

[20:28] <pmichaud> it was substantially reworked for oscon, yes.

[20:28] <pmichaud> I like the new talk much better than the one I gave at yapc::na.

[20:28] <pmichaud> (it's much more focused)

[20:29] <cbk> In perl 6 is there some trailing white space remover like chomp or I think I've seen something like trim...?

[20:29] <pmichaud> cbk:  trim exists.

[20:29] <pmichaud> rakudo:   say "Hello world     ".trim.chars

[20:29] <p6eval> rakudo ea667e: OUTPUT¬´11‚ê§¬ª

[20:29] <moritz_> rakudo: say ' Hello World   '.trim.perl

[20:29] <p6eval> rakudo ea667e: OUTPUT¬´"Hello World"‚ê§¬ª

[20:30] <cbk> so I can do $myVarHasASpaceAtEnd.trim

[20:30] <cbk> what is that .perl

[20:30] <moritz_> cbk: also .chomp exists, which just removes a trailing newline, and return s the modified string

[20:30] <moritz_> cbk: .perl is like Data::Dumper

[20:31] <moritz_> ie it returns perl code that builds the data structure

[20:31] <cbk> is there a consolidated list of all of these .coolFunc (.trim and .perl) out there?

[20:32] <cbk> they are like built in functions

[20:32] <moritz_> cbk: http://perlcabal.org/syn/ scroll down to S32

[20:32] <[particle]> oh, pmichaud, yesterday i built and tested ins2 with msvc.  all's well.

[20:33] <cbk> thanks :-)

[20:33] <pmichaud> [particle]: \o/

[20:33] <pmichaud> [particle]: that's really good to hear.

[20:34] <pmichaud> I know there's an issue with Solaris builds... have to work on that one a bit.

[20:34] *** Whiteknight left
[20:34] <[particle]> pmichaud: where else do you need coverage?

[20:34] <pmichaud> what is Parrot's list of platforms?

[20:35] <pmichaud> if we cover the Parrot list I'm happy for now.

[20:38] <campuscodi> thank you very much guys. have a good night .... or day :))

[20:39] *** szabgab left
[20:40] <pmichaud> rakudo:  enum Color <white gray black>; say ?(Color.pick == any(Color::white, Color::gray, Color::black));

[20:40] <p6eval> rakudo ea667e: OUTPUT¬´Method 'Num' not found for invocant of class ''‚ê§¬ª

[20:40] <pmichaud> jnthn: ^^^    # I think this is a related fail to changes made yesterday

[20:41] <pmichaud> (t/spec/S12-enums/basic.t)

[20:41] <jnthn> Oh?

[20:41] <jnthn> hmm, it fails here too :-S

[20:41] <jnthn> I was sure that passed :-(

[20:42] <pmichaud> I'm not sure if I introduced the fail or you did.

[20:42] *** szabgab joined
[20:42] <jnthn> I remember fuding a different test in that file yesterday.

[20:42] <jnthn> I thought I had a clean run on it after that.

[20:42] <jnthn> Though I could easily be mistaken.

[20:43] <jnthn> It involves junctions, which would make what I did feel more likely to be to blame..

[20:43] <jnthn> OTOH, all of the junctions tests passed fine (I didn't fudge any of the S03-junctions/*.t)

[20:44] <pmichaud> I adjusted Code.ACCEPTS and Regex.ACCEPTS, so that seems less likely to be the culprit.  

[20:44] <jnthn> Right.

[20:46] *** campuscodi left
[20:46] <dalek> rakudo: 7700f40 | pmichaud++ | docs/spectest-progress.csv:

[20:46] <dalek> rakudo: spectest-progress.csv update: 423 files, 12033 passing, 14 failing

[20:46] <dalek> rakudo: Failure summary:

[20:46] <dalek> rakudo:     S12-enums/basic.rakudo aborted 2 test(s)

[20:46] <dalek> rakudo:     S12-introspection/walk.t aborted 6 test(s)

[20:46] <dalek> rakudo:     S32-list/grep.rakudo aborted 6 test(s)

[20:46] *** limpmsngr joined
[20:46] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/7700f40917edc73ca4ef866c0a6b4140da6be1bb

[20:48] <cbk> rakudo: my $textLine2 = "mrGreen 01 02 123 "; say "Patern: $textLine2"; if $textLine2 ~~ /(<[a..zA..Z]>+\s)(\d+\s)(\d+\s)(\d+)/ {	say "last match vars are: $0,$1,$2,$3 "; $name = $0.trim; } say "Name is:$name."; 

[20:48] <p6eval> rakudo ea667e: OUTPUT¬´Statement not terminated properly at line 2, near "say \"Name "‚ê§in Main (src/gen_setting.pm:3343)‚ê§¬ª

[20:49] *** snearch left
[20:49] <moritz_> cbk: there's a non-printable character in your input, before the 'say'

[20:49] <moritz_> probably from copy & pasting

[20:49] <cbk> oh ok let me try again...

[20:50] <cbk> my $textLine2 = "mrGreen 01 02 123 "; if $textLine2 ~~ /(<[a..zA..Z]>+\s)(\d+\s)(\d+\s)(\d+)/ {	say "last match vars are: $0,$1,$2,$3 "; $name = $0.trim; } say "Name is:$name."; 

[20:51] <cbk> rakudo: my $textLine2 = "mrGreen 01 02 123 "; if $textLine2 ~~ /(<[a..zA..Z]>+\s)(\d+\s)(\d+\s)(\d+)/ {	say "last match vars are: $0,$1,$2,$3 "; $name = $0.trim; } say "Name is:$name."; 

[20:51] <p6eval> rakudo ea667e: OUTPUT¬´Statement not terminated properly at line 2, near "say \"Name "‚ê§in Main (src/gen_setting.pm:3343)‚ê§¬ª

[20:51] <cbk> well it works on my perl 6 box

[20:51] <PerlJam> missing semicolon

[20:52] <PerlJam> rakudo:  if 1 { say "hi" } say "bye";

[20:52] <p6eval> rakudo ea667e: OUTPUT¬´Statement not terminated properly at line 2, near "say \"bye\";"‚ê§in Main (src/gen_setting.pm:3343)‚ê§¬ª

[20:52] <PerlJam> rakudo:  if 1 { say "hi" }; say "bye";

[20:52] <p6eval> rakudo ea667e: OUTPUT¬´hi‚ê§bye‚ê§¬ª

[20:52] <cbk> the .trim works just fine. if I do the .trim.perl it put the var in " "'s

[20:53] <dalek> rakudo: 426942a | pmichaud++ | src/builtins/eval.pir:

[20:53] <dalek> rakudo: Correct problem with statement-style package declarators (RT #67976).

[20:53] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/426942ad2255572fc3d89aec984ec439f09404de

[20:53] *** limpmsngr left
[20:54] *** hercynium left
[20:57] *** SmokeMachine left
[20:58] *** kst left
[20:59] *** kst joined
[21:02] *** Su-Shee left
[21:05] <dalek> rakudo: 5b477c0 | pmichaud++ | docs/release_guide.pod:

[21:05] <dalek> rakudo: Note the release manager for each of the previous releases,

[21:05] <dalek> rakudo: and put PerlJam++ (duff) on the hook for the October 2009 release.

[21:05] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/5b477c0887fb08fbc3aab6d4debdbd88a791ba88

[21:06] <PerlJam> uhoh ... it's "for real" now  :)

[21:07] *** pmurias left
[21:07] <pmichaud> OKAY!  WHO ELSE IS GOING TO DO A RELEASE?!?

[21:07] <pmichaud> VOLUNTEERS NEEDED NOW, OR I'LL START PICKING NICKS AT RANDOM!

[21:07] <pmichaud> I've got a commit bit, and I"M NOT AFRAID TO USE IT!!!

[21:08] <jnthn> OMFG

[21:08] * jnthn runs away from the mad Texan

[21:09] <pmichaud> You there!  Yes, you with the beers!  When's your release?!?  ;-)

[21:09] <jnthn> Erm.

[21:09] <jnthn> Not September because I'm on vacation.

[21:10] *** jauaor left
[21:10] <jnthn> Feel free to put me down for Oct/Nov/Dec.

[21:10] <pmichaud> Oct is taken.

[21:10] <jnthn> Erm

[21:10] <pmichaud> November it is.

[21:10] <pmichaud> although maybe we should give masak++ November :-P

[21:10] <jnthn> that is <oct nov dec>.pick, not .all ;-)

[21:10] <jnthn> Oh yes!

[21:10] <PerlJam> yeah, masak should get November

[21:10] * moritz_ wanted to suggest the same thing too

[21:10] <pmichaud> Then he can really be in charge of "the November release"  :-)

[21:11] <jnthn> I think he'll be approving. :-)

[21:11] <moritz_> and "November.pm" gets a new meaning ;-)

[21:11] <pmichaud> I'll reserve November for masak++, if he'll accept.

[21:11] <pmichaud> jnthn:  you're on the hook for Dec, unless I can get other volunteers

[21:11] *** iblechbot joined
[21:11] <jnthn> pmichaud: That's fine. I'm happy to step aside to let others get involved though.

[21:12] <PerlJam> no one wants August or September.  :)

[21:12] <pmichaud> (I'm wanting to increase the number of committers/participants; since you already have plenty of commits, we'll save it for another time)

[21:12] <jnthn> pmichaud: Given I'm already plenty involved. ;-)

[21:12] <pmichaud> jnthn: indeed.

[21:12] <jnthn> But if nobody steps up, I'm happy to do it.

[21:12] <pmichaud> well, I think I'll be recruiting folks to do it at yapc::eu :-)

[21:12] <jnthn> Yeah!

[21:13] <pmichaud> "Immortalize your name in Perl 6.  Become a release manager.  Half a days work for immortality."

[21:13] * jnthn just wrote some code in actions.pm, looked at it, thought "pm will kick my ass for this" and ended up re-writing it better :-)

[21:13] <pmichaud> jnthn++  # smart move

[21:13] <moritz_> code review++

[21:14] <moritz_> .oO( immoralize your name )

[21:14] <jnthn> It gets kinda fun when your code review comes down to, "what would this person say if they looked at my code" :-)

[21:14] <pmichaud> it's nice that the mere threat of code review is enough to get someone to rewrite code :)

[21:15] <[particle]> pm: list me

[21:16] <moritz_> [particle]: when? August? September?

[21:16] <pmichaud> [particle]: pick your month.  October is taken.

[21:16] <moritz_> so is November (probably)

[21:16] <jnthn> pmichaud: Was there a way in PAST to say "I want to look up this PAST::Block"?

[21:16] <pmichaud> jnthn: you can give the block a .subid, and then use that .subid in a reference

[21:17] <pmichaud> look for ".subid" in actions.pm for an example

[21:17] <jnthn> Ah, that'll do it.

[21:17] <[particle]> i'm doing parrot in september, might as well do rakudo too

[21:17] <jnthn> Go for the double!

[21:17] <[particle]> and i'd like to name it for seattle.pm

[21:17] <pmichaud> particle: done

[21:17] <pmichaud> jnthn: you can also request a .subid from a PAST::Block, which will bind it at that point

[21:17] <pmichaud> (and generate a unique subid for you)

[21:18] <jnthn> pmichaud: even beter

[21:18] <jnthn> Thanks.

[21:19] * jnthn doesn't find .subid anywhere in actions.pm :-S

[21:19] *** payload left
[21:20] <pmichaud> oh

[21:20] <pmichaud> hmmm

[21:20] <pmichaud> I know there's a way to get a reference to a blockk, yes.

[21:20] <pmichaud> don't remember what it is, then

[21:24] *** SmokeMachine joined
[21:24] <dalek> rakudo: 2665eef | pmichaud++ | docs/release_guide.pod:

[21:24] <dalek> rakudo: Add particle++ for the September release.

[21:24] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/2665eefb68b3b234a4ec2484fb08c987cbf73d6d

[21:27] *** cj left
[21:32] *** snearch joined
[21:33] *** zamolxes joined
[21:35] <jnthn> gah! Parrot's MMD strikes again... :-/

[21:36] *** molaf left
[21:36] <pmichaud> afk, errands

[21:37] *** dukeleto joined
[21:41] *** cdarroch left
[21:42] *** maja__ joined
[21:45] *** skids_ left
[21:46] <jnthn> TimToady: Hmm. One curiosity of a method ^count { return $count }

[21:46] <jnthn> Is that when invoked as $instance.^count

[21:46] <jnthn> Then it'll be given $instance as a first parameter

[21:47] <jnthn> I guess that's fine, you just gotta declare it with a signature that's sufficiently permissive.

[21:47] <jnthn> (e.g. that accepts that parameter)

[21:47] *** xomas_ joined
[21:48] *** snearch left
[21:49] <jnthn> pmichaud: block does have a .subid, we just weren't using it.

[21:53] *** KyleHa left
[21:53] <jnthn> And it worked just how I wanted. Great. Now it works _and_ the generated code doesn't suck.

[21:54] *** maja_ left
[21:56] <jnthn> TimToady: As a minor side-note, I couldn't follow STD.pm in method_def because it doesn't capture the <[ ! ^ ]> in any way, and it needs capturing for the action method.

[22:05] <jnthn> rakudo: enum Color <white gray black>; say Color.pick

[22:05] <p6eval> rakudo 2665ee: OUTPUT¬´Color()‚ê§¬ª

[22:07] <moritz_> .oO( masak! )

[22:07] <moritz_> it seems to treat Color as a 1-item list

[22:08] <moritz_> rakudo: enum Color <white gray black>; say white;

[22:08] <PerlJam> But it is a 1 item list.

[22:08] <p6eval> rakudo 2665ee: OUTPUT¬´0‚ê§¬ª

[22:08] <moritz_> PerlJam: but .pick is defined for enums too

[22:08] <moritz_> and that candidate should win

[22:08] <jnthn> Yeah

[22:08] <jnthn> It should.

[22:09] <jnthn> We already have a test fail at the moemnt from this.

[22:10] <moritz_> then I'm happy

[22:10] <moritz_> I thought it was another testing FAIL

[22:10] <jnthn> No

[22:10] <jnthn> I think I know what the issue is.

[22:10] <jnthn> But I'm not quite sure how to fix it.

[22:11] <moritz_> with magic.

[22:11] <jnthn> Basically, we want a role type to be narrower than Any

[22:11] <jnthn> So sigil based dispatch works.

[22:11] <jnthn> But now the dispatch, when punning, will see the pick method from Any and choose that one.

[22:12] <jnthn> Rather than punning the role and calling the .pick

[22:12] <jnthn> rakudo: enum Color <white gray black>; say Color.new.pick

[22:12] <p6eval> rakudo 2665ee: OUTPUT¬´1‚ê§¬ª

[22:12] <jnthn> Aye

[22:12] <jnthn> I think it's an issue with the way we pun.

[22:13] <moritz_> bad puns? ;-)

[22:13] <moritz_> would be nothing new in here ;-)

[22:14] <jnthn> Aye, bad puns.

[22:14] <jnthn> Well, lack of puns actually.

[22:14] <jnthn> Which is not a #perl6 problem. ;-0

[22:14] <[particle]> seven days without puns makes one week

[22:16] <jnthn> I haven't got a quick fix that isn't an epic hack.

[22:16] <jnthn> I think the answer is "fix role punning" though.

[22:21] *** masak joined
[22:21] * jnthn decides to sleep on it and look again tomorrow

[22:21] <jnthn> lolizmasak

[22:21] <masak> jnthn: sleep tight.

[22:21] <masak> yes, who cannot sleep.

[22:21] <jnthn> masak: Oh, I'm not going to bed right now.

[22:21] <masak> ok, good.

[22:21] <jnthn> masak: I'd not be able to sleep this early.

[22:21] <masak> because I found a bug for you. :)

[22:22] <jnthn> masak: I just don't have a good answer for something tonight and am hoping sleep will magically make things clear to me. ;-)

[22:22] <masak> it sometimes does.

[22:22] <jnthn> And your bug, sir?

[22:23] <masak> jnthn: well, I'll try and minimize it, but if you're impatient, just do 'perl6 druid'.

[22:23] <masak> it's right there.

[22:24] <masak> I can paste the result of that one right now and then try to minimize.

[22:24] <masak> the error looks like something you did. :)

[22:24] <moritz_> masak: we discussed prospective Rakudo release mmanagers earlier... would you do the November release?

[22:24] <jnthn> Heh, well, I did stop Rakudo lying to itself in various ways last night.

[22:24] *** donaldh left
[22:25] <jnthn> It's entirely possible there were some places the tests didn't catch.

[22:25] <masak> moritz_: that would be very fitting. yes, please.

[22:25] <masak> jnthn: http://gist.github.com/157719

[22:25] <masak> jnthn: don't know when the bug appeared, because apparently another bug has hidden it for two months. pmichaud++ fixed that one today.

[22:25] <jnthn> Hmm

[22:26] <masak> "November has been released?" -- "Nono, it's the November release of Rakudo!" -- "Ah, Rakudo November?" -- "No, it's called Rakudo Baghdad."

[22:26] <masak> jnthn: I'll try to make the bug Druid-independent.

[22:28] <moritz_> in method Druid::Game::Subject[]::attach (/Users/masak/gwork/druid/lib/Druid/Game/Subject.pm:21)

[22:28] <moritz_> what does the [] mean?

[22:29] <moritz_> that it's a role?

[22:29] <masak> yes.

[22:29] <moritz_> or a parameterized role?

[22:29] <masak> it's not.

[22:29] <masak> at least not by me.

[22:29] <dalek> rakudo: e2d6f13 | jnthn++ | src/ (3 files):

[22:29] <dalek> rakudo: Implement declaration of methods on the metaclass (e.g. method ^foo($obj, ... ) { ... }). Also we toss the use of Parrot's MMD in calling !meta_compose; it's less code to not use it anyway.

[22:29] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/e2d6f13fe553b079279a21140634384c950c88dd

[22:29] <dalek> rakudo: 6999e58 | moritz++ | docs/release_guide.pod:

[22:29] <dalek> rakudo: [docs] masak++ is release manager for November

[22:29] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/6999e58987ccb4a94d40787ac66064e1b026d230

[22:29] <moritz_> ok, I clearly haven't written enough in Perl 6 yet ;-)

[22:29] <masak> moritz_: waitwait, I still get to prove myself, right?

[22:29] <masak> I was looking forward to that.

[22:30] <masak> it seemed fun.

[22:30] *** lumi_ left
[22:30] <moritz_> masak: yes. But you have more than 3 months, I'm sure you can do it in that time ;-)

[22:30] * masak hopes so

[22:30] *** nihiliad left
[22:32] *** _Jedai_ joined
[22:33] <jnthn> sorry, net connection had a fail

[22:33] <masak> argh, this bug is slippery. :/

[22:33] <jnthn> what does the [] mean? # that it's a version of the role that takes no parameters

[22:33] <jnthn> All roles are parametric in a sense.

[22:34] <jnthn> role Foo { } is just like role Foo[] { }

[22:34] <jnthn> Since you'd also want having declared either of those to write role Foo[$bar] { } too

[22:34] <moritz_> I expected something along these lines, thanks

[22:34] <moritz_> multi role Foo[$bar, $baz] ... :/

[22:35] * jnthn is impressed that scp that is backing up a bunch of files from his server was able to resumre without any input after the connection came back to life.

[22:35] <jnthn> moritz_: Well, yeah, but the multi is implicit.

[22:36] *** jferrero joined
[22:36] <jnthn> But under the hood, it does use the multi-dispatcher.

[22:36] <moritz_> so it does ordinary multi dispatch under th... wow

[22:36] <jnthn> Yeah, so you have the full power of multiple dispatch available to you when deciding which role you're going to compose.

[22:40] <moritz_> rakudo: role A[*@b] { method x { say @b.perl } }; class B does A[2, 3, 4] { }; B.new.x

[22:40] <p6eval> rakudo 2665ee: OUTPUT¬´[2, 3, 4]‚ê§¬ª

[22:40] <moritz_> that *is* scary.

[22:40] * masak is scared

[22:40] * moritz_ must remember to write some tests for that

[22:40] <masak> :)

[22:41] <moritz_> but first: sleep.

[22:41] <masak> rakudo: class A is B {}; class B {}

[22:41] <p6eval> rakudo 2665ee: OUTPUT¬´No applicable candidates found to dispatch to for 'trait_mod:is'‚ê§in Main (/tmp/iFdZb7lajB:2)‚ê§¬ª

[22:41] <masak> that error message, can it be made slightly more awesome?

[22:42] <moritz_> rakudo: class A is B {};‚ê§class B {}

[22:42] <p6eval> rakudo 2665ee: OUTPUT¬´No applicable candidates found to dispatch to for 'trait_mod:is'‚ê§in Main (/tmp/W987Ujtr2b:2)‚ê§¬ª

[22:43] <jnthn> Well, it's telling you the truth. ;-)

[22:43] *** al23 joined
[22:44] <masak> jnthn: that's why I didn't say "o_O" or "wtf?" :)

[22:44] <jnthn> masak: Yeah. I guess

[22:44] <masak> just talking about aesthetics.

[22:44] * jnthn ponders

[22:45] <jnthn> rakudo: multi trait_mod:<is>(Class A, *%foo) { die "Maybe you did stuff in the wrong order" }; class A is B { }; class B { };

[22:45] <p6eval> rakudo 2665ee: OUTPUT¬´Unable to parse multisig; couldn't find final ')' at line 2, near "A, *%foo) "‚ê§in Main (src/gen_setting.pm:3343)‚ê§¬ª

[22:46] <jnthn> oh

[22:46] <jnthn> rakudo: multi trait_mod:<is>(Class A, *%foo) { }

[22:46] <p6eval> rakudo 2665ee: OUTPUT¬´Unable to parse multisig; couldn't find final ')' at line 2, near "A, *%foo) "‚ê§in Main (src/gen_setting.pm:3343)‚ê§¬ª

[22:46] <jnthn> oh duh

[22:46] <jnthn> i fail

[22:46] <jnthn> rakudo: multi trait_mod:<is>(Class, *%foo) { }

[22:46] <p6eval> rakudo 2665ee:  ( no output )

[22:47] <jnthn> rakudo: multi trait_mod:<is>(Class, *%foo) { die "Maybe you did stuff in the wrong order" }; class A is B { }; class B { };

[22:47] <p6eval> rakudo 2665ee: OUTPUT¬´Maybe you did stuff in the wrong order‚ê§in sub trait_mod:is (/tmp/Nax3qB8JnT:2)‚ê§called from Main (/tmp/Nax3qB8JnT:2)‚ê§¬ª

[22:47] <jnthn> rakudo: multi trait_mod:<is>(Class, *%) { die "No matching trait; did you forget to forward-delcare a class?" }; class A is B { }; class B { };

[22:47] *** |Jedai| left
[22:48] <p6eval> rakudo 2665ee: OUTPUT¬´No matching trait; did you forget to forward-delcare a class?‚ê§in sub trait_mod:is (/tmp/9otMf9SIEy:2)‚ê§called from Main (/tmp/9otMf9SIEy:2)‚ê§¬ª

[22:48] <jnthn> Guess we could always stick something like that in traits.pm

[22:49] *** hoelzro left
[22:49] <masak> jnthn: I think that would be an improvement.

[22:49] <al23> Hi! Can't build pugs. What's wrong here: http://paste.lisp.org/display/84353

[22:49] <jnthn> rakudo: multi trait_mod:<is>(Class $a, *%f) { die "No matching trait { %f.keys[0] } to compose into $a; did you forget to forward-delcare a class?" }; class A is B { }; class B { };

[22:49] <p6eval> rakudo 6999e5: OUTPUT¬´No matching trait B to compose into ClassHOW()<0xb66c0aa0>; did you forget to forward-delcare a class?‚ê§in sub trait_mod:is (/tmp/2vHgf0zryA:2)‚ê§called from Main (/tmp/2vHgf0zryA:2)‚ê§¬ª

[22:49] <jnthn> oh lol

[22:50] <masak> al23: cannot configure time-1.1.4

[22:50] <jnthn> rakudo: multi trait_mod:<is>(Class $a, *%f) { die "No matching trait { %f.keys[0] } to compose into { $a.name }; did you forget to forward-delcare a class?" }; class A is B { }; class B { };

[22:50] <masak> al23: that's what's wrong.

[22:50] <p6eval> rakudo 6999e5: OUTPUT¬´Method 'name' not found for invocant of class 'ClassHOW'‚ê§¬ª

[22:50] <jnthn> heh

[22:50] <jnthn> well

[22:50] <jnthn> Close anyway.

[22:50] <jnthn> masak: We can give it a try.

[22:51] * jnthn afk for a little bit

[22:51] <al23> masak: so?

[22:51] <masak> al23: good question. I haven't tried building pugs in months.

[22:52] <masak> al23: it's kind of a dormant project.

[22:52] <al23> Me too.

[22:52] *** hercynium joined
[22:52] <masak> al23: you do know of Rakudo and all? just checking.

[22:52] <al23> I thought Pugs still the most comprehensive...

[22:53] <al23> Isn't it?

[22:53] <masak> al23: certainly not the most up-to-date.

[22:53] <masak> al23: I find it hard to compare comprehensiveness.

[22:53] <masak> if it's features you want, Rakudo won't disappoint you, though.

[22:53] <al23> By the amout of implemented stuff?

[22:54] *** cj joined
[22:54] <masak> al23: funny guy. :)

[22:54] <al23> Anyway, I'm just want to play with Perl 6.

[22:54] <jnthn> al23: They both implement different subsets of Perl 6, though increasingly Rakudo covers all that Pugs does. Plus Rakudo does a bunch of stuff that Pugs doesn't. Plus it is much more in line with the current spec.

[22:54] <masak> al23: then I suggest you try Rakudo.

[22:55] <jnthn> Rakudo misses, for example, laziness.

[22:55] <masak> we're putting off implementing it. :P

[22:59] *** lumi_ joined
[23:04] <al23> Hm. I think I've used only pugs... I thought it is really cool since it was written (a) in Haskell and (b) by Audrey Tang :-)

[23:05] *** M_o_C left
[23:05] <masak> al23: nod.

[23:05] <masak> I thought that was really cool too.

[23:07] <al23> Is it completely stuck? I think Audrey wrote that she plans to resume work.

[23:10] *** synth joined
[23:12] *** synth left
[23:12] <masak> al23: it's been basically motionless for two years.

[23:16] *** synth joined
[23:16] <masak> I'm getting close to catching the bug now.

[23:16] *** Whiteknight joined
[23:18] *** justatheory left
[23:22] *** justatheory joined
[23:23] <japhb> TimToady: could you explain your email statement "I wish we had a way of trapping and testing warnings too so we could see that 3 elements were discarded by the inner list assignment."  To whom is this directed?

[23:24] <masak> ok, here it is:

[23:24] <masak> rakudo: role A { has @!foo; method bar() { @!foo ~~ (1,2); } }; class B does A { has $.baz; }; B.new().bar()

[23:24] <p6eval> rakudo 6999e5: OUTPUT¬´Null PMC access in isa()‚ê§in method A[]::bar (/tmp/XG0DKmk8uZ:2)‚ê§called from Main (/tmp/XG0DKmk8uZ:2)‚ê§¬ª

[23:24] * masak submits rakudobug

[23:27] <masak> rakudo: role A { has @!foo; method bar() { say @!foo } }; class B does A { has $.baz; }; B.new().bar()

[23:27] <p6eval> rakudo 6999e5: OUTPUT¬´Null PMC access in isa()‚ê§in method A[]::bar (/tmp/CfCtQ08n7K:2)‚ê§called from Main (/tmp/CfCtQ08n7K:2)‚ê§¬ª

[23:27] <TimToady> japhb: it's directed at whoever wants to think about how you'd test for proper emission of warnings

[23:28] *** iblechbot left
[23:29] <TimToady> which is, presumably, related to the question of how you test for proper production of any exception

[23:29] <japhb> TimToady: Ah.  I was wondering if it was a note to yourself, or a gentle reminder to read already-specced behavior, or ....

[23:30] <TimToady> it's just a To Whom It May Concern

[23:30] <japhb> gotcha.

[23:31] <al23> \o/ GHC 6.10.x builds Pugs.

[23:32] <jnthn> masak: Hmm.

[23:32] <jnthn> Interesting bug...

[23:32] <masak> jnthn: packaged and filed, just for you sir.

[23:32] <masak> fix it, and Druid will run again. :)

[23:32] <jnthn> masak: Is that minimal?

[23:33] <masak> jnthn: very.

[23:33] <masak> see the bug ticket.

[23:33] <masak> RT 67992.

[23:33] <jnthn> rakudo: role A { has @!foo; method bar() { say @!foo } }; class  B does A { }; B.new().bar()

[23:33] <p6eval> rakudo 6999e5: OUTPUT¬´‚ê§¬ª

[23:33] <jnthn> huh? Having another attr in the class is what breaks it?

[23:33] <jnthn> :-/

[23:33] <masak> yes.

[23:33] <masak> that actually seems to be the problem.

[23:34] <masak> rakudo: class A { has @!foo; method bar() { say @!foo } }; class B is A { has $.baz; }; B.new().bar()

[23:34] <p6eval> rakudo 6999e5: OUTPUT¬´‚ê§¬ª

[23:34] <masak> seems to be specific to role composition.

[23:34] <jnthn> Do you know how recently it broke?

[23:34] <masak> jnthn: unfortunately not.

[23:34] <jnthn> I'm pondering it may be to do with that attribute ordering bug.

[23:35] <jnthn> That is, role attr composition doesn't contribute to that list.

[23:35] <jnthn> And then initialization leaves the attr null.

[23:35] <jnthn> That'd nicely explain it.

[23:35] <masak> aye.

[23:36] <jnthn> Yes, looks very much like that.

[23:36] <jnthn> Will patch it tomorrow.

[23:37] <masak> \o/

[23:37] <masak> my work here is done.

[23:37] <masak> see you tomorrow for another glorious day.

[23:37] *** synth left
[23:37] *** masak left
[23:39] <jnthn> Optimism. He's doing it right.

[23:40] <al23> Should <<op<< or >>op>> work, besides >>op<<?

[23:40] <TimToady> that one works better in rakudo than in pugs

[23:40] *** nihiliad joined
[23:40] <al23> :-)

[23:41] <TimToady> spec rot

[23:41] <al23> I see.

[23:41] <TimToady> though I think pugs's >>op<< is really the currently specced <<op>>

[23:41] <TimToady> as in it dwims

[23:42] <TimToady> pugs: say (1,2,3)>>+<<1

[23:42] <p6eval> pugs: OUTPUT¬´234‚ê§¬ª

[23:42] <TimToady> yes

[23:42] <al23> So, what's "hyper op xs ys = map (\ (x,y) -> x `op` y) $ zip xs ys" in Perl 6?

[23:42] <TimToady> rakudo: say (1,2,3)>>+<<1

[23:42] <p6eval> rakudo 6999e5: OUTPUT¬´Non-dwimmy hyperoperator cannot be used on arrays of different sizes or dimensions.‚ê§in Main (/tmp/wOVfrynyA3:2)‚ê§¬ª

[23:42] <TimToady> should fail

[23:42] <TimToady> rakudo: say (1,2,3)<<+>>1

[23:42] <p6eval> rakudo 6999e5: OUTPUT¬´Statement not terminated properly at line 2, near "1"‚ê§in Main (src/gen_setting.pm:3359)‚ê§¬ª

[23:42] <TimToady> rakudo: say (1,2,3) <<+>> 1

[23:43] <p6eval> rakudo 6999e5: OUTPUT¬´234‚ê§¬ª

[23:43] <jnthn> std: say (1,2,3)<<+>>1

[23:43] <p6eval> std 27786: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Confused (two terms in a row?) at /tmp/fcG3J9PzNo line 1:‚ê§------> [32msay (1,2,3)<<+>>[33m‚èè[31m1[0m‚ê§    expecting any of:‚ê§  POST‚ê§   bracketed infix‚ê§    infix stopper‚ê§    postfix‚ê§        postfix_prefix_meta_operator‚ê§       standard stopper‚ê§      

[23:43] <p6eval> ..statement modifier loop‚ê§    term‚Ä¶

[23:43] <TimToady> that's a subscript

[23:43] <TimToady> needs ws

[23:43] <jnthn> Aha

[23:43] <jnthn> Phew, Rakudo was right. :-)

[23:43] <TimToady> earlier you were using Class as if it were a real one

[23:44] <al23> Where is the actual spec?

[23:44] <TimToady> despite S02 saying there's a Class class, I don't believe it

[23:44] *** Khisanth_ joined
[23:44] <jnthn> TimToady: There is no Class class.

[23:44] <TimToady> S02 is actually talking about varieties of packages

[23:44] *** Khisanth_ left
[23:44] <jnthn> TimToady: Class is, in liu of you spec'ing what we should have, the "some HOW here" marker.

[23:45] <TimToady> so I think those are really roles for mixing into Package

[23:45] <jnthn> TimToady: Right now it looks like this:

[23:45] *** jferrero left
[23:45] <jnthn> subset Class of Object where ClassHOW | RoleHOW;

[23:45] <TimToady> subset Class of Object where { not .defined }

[23:45] <jnthn> No, that's not right.

[23:46] <jnthn> The trait_mod:<is> wants to take a metaclass.

[23:46] <jnthn> Which could well be defined.

[23:46] <jnthn> It's not the proto-object.

[23:46] <TimToady> no, it wants the object being declared

[23:46] <TimToady> it must have the object being declared, or it can't modify it

[23:46] <jnthn> Hang on, which are we talking about?

[23:46] <jnthn> class Foo is Bar { }

[23:47] <jnthn> dispatches with two parameters: the metaclass of Foo, and then also Bar, which would be the proto-object.

[23:47] <TimToady> somewhere there is a type object named "Foo" that is separate from the metaclass

[23:47] <jnthn> It doesn't exist at that point.

[23:47] <jnthn> We're still in the process of declaring the class.

[23:47] <TimToady> it's being created

[23:48] *** jferrero joined
[23:48] <jnthn> Yes, in the process of creating it.

[23:48] <TimToady> in STD it already exists, and is called the "declarand"

[23:48] <jnthn> Last time we discussed this, you said you'd expect the trait_mod there to receive the metaclass.

[23:48] <TimToady> I don't recall that

[23:48] <jnthn> Well it's not likely I invented it, given it's made me do a refactor.

[23:49] <jnthn> It kinda makes sense you'd want to meta-class in there though.

[23:49] <jnthn> That's the thing you want to ask to add a parent, for example.

[23:49] <TimToady> you can always the the metaclass from the object's .HOW

[23:50] <TimToady> you know the .HOW based on the keyword "class", "role", etc.

[23:50] <TimToady> the name has to be introduced as a valid type name as soon as you see it

[23:51] <TimToady> even before processing the traits

[23:51] <jnthn> The parser knows it's a valid type name.

[23:51] <jnthn> But that's an unrelated issue to having to actually create the proto-object at that point.

[23:51] <TimToady> the parser knows that because the type object is added to the symbol table right then, in STD

[23:52] <TimToady> the symbol table entry *is* the protoobject in sTD

[23:52] <jnthn> Sure, it is in Rakudo *after* the class has been defined.

[23:53] <jnthn> (We create the proto-object after the class has been composed.)

[23:54] <TimToady> what does the symbol table contain, if not the protoobject?

[23:55] <jnthn> The actual namespace entry doesn't get created at that point, it's the parser's symbol table that knows about it, and all it needs to know is "there's something under this name".

[23:56] <TimToady> the parser's namespace *is* the symbol table, for STD

[23:57] <jnthn> OK, but that doesn't really fly for Rakudo.

[23:57] <jnthn> Well

[23:57] <jnthn> I guess it could somehow be made to...

[23:59] <jnthn> TimToady: I knew I wasn't making crap up.

[23:59] <jnthn> http://irclog.perlgeek.de/perl6/2009-05-14#i_1143515

