[00:09] *** jrtayloriv left
[00:09] *** jrtayloriv joined
[00:13] *** eMaX left
[00:14] *** jrtayloriv left
[00:14] *** jrtayloriv joined
[00:15] *** Whiteknight left
[00:18] *** [1]Limbic_Region joined
[00:18] *** molaf left
[00:19] *** jrtayloriv left
[00:19] *** jrtayloriv joined
[00:19] *** azawawi joined
[00:19] <azawawi> hi

[00:19] <lambdabot> azawawi: You have 2 new messages. '/msg lambdabot @messages' to read them.

[00:19] <azawawi> @messages

[00:19] <lambdabot> literal said 3h 47m 31s ago: pong

[00:19] <lambdabot> literal said 3h 33m 21s ago: I'm working on a couple of things, but they're not ready just yet

[00:22] *** Limbic_Region left
[00:22] *** [1]Limbic_Region is now known as Limbic_Region

[00:24] *** jrtayloriv left
[00:26] *** jrtayloriv joined
[00:26] *** jrtayloriv left
[00:26] *** jrtaylor joined
[00:27] *** jrtaylor left
[00:27] *** jrtayloriv joined
[00:28] *** jrtayloriv left
[00:28] *** jrtayloriv joined
[00:29] *** jamtech left
[00:33] *** DemoFreak left
[00:43] *** jrtayloriv left
[00:47] *** jrtayloriv joined
[00:54] *** spx2 left
[00:56] *** Sunbeam left
[01:08] <azawawi> @tell lichtkind what license are the perl 6 tablets using?

[01:08] <lambdabot> Consider it noted.

[01:15] *** ihrd joined
[01:21] *** ispy_ joined
[01:43] *** ihrd1 joined
[01:43] *** ihrd left
[01:45] *** skids joined
[01:57] *** last left
[01:59] *** last joined
[02:01] *** Chillance left
[02:01] *** tann left
[02:02] *** Util joined
[02:02] *** SmokeMachine left
[02:11] *** frew joined
[02:19] *** jauaor joined
[02:20] *** last left
[02:23] *** xinming_ joined
[02:33] *** xinming__ joined
[02:37] *** xinming left
[02:40] <Util> In the S02 table on "generalized adverbial form of Pair notation", the last line reads:

[02:40] <Util>     a => %foo<a>        %foo<a>:p

[02:40] <Util> Why `p`? Is it a typo?

[02:42] <PerlJam> I think it means "interpret %foo<a> as a Pair"

[02:43] *** xinming_ left
[02:44] <azawawi> @tell literal I took the liberty of extending grok (at runtime) in my Padre Perl 6 plugin to support more help from Perl foundation wikis, http://padre.perlide.org/trac/changeset/5994

[02:44] <lambdabot> Consider it noted.

[02:53] *** athomason left
[02:55] <Util> PerlJam: thanks; I will sleep on that.

[02:56] *** alester joined
[03:01] *** dukeleto left
[03:05] *** Util left
[03:06] *** Limbic_Region left
[03:07] <s1n> pmichaud: you didn't miss much at dfcuug

[03:07] <s1n> dfwuug

[03:15] *** frew|work joined
[03:15] *** frew|work left
[03:22] *** ihrd1 left
[03:23] *** ihrd joined
[03:23] *** ihrd left
[03:29] *** azawawi left
[03:34] *** dukeleto joined
[03:42] *** ispy_ left
[03:52] *** ispy_1 joined
[04:05] *** azawawi joined
[04:05] <azawawi> ping

[04:07] <azawawi> moritz_: I added more help from Perl 6 wiki tablets; now you can find help about Perl 6 operators... Not much but better than nothing :) http://feather.perl6.nl/~azawawi/perl6_help_with_tablets.png

[04:07] <azawawi> @tell masak any update on u4x?

[04:07] <lambdabot> Consider it noted.

[04:08] *** azawawi left
[04:09] *** FurnaceBoy left
[04:10] *** HemanShaw left
[04:12] *** ispy_1 left
[04:17] *** sri_kraih left
[04:20] *** skids left
[04:47] *** jrtayloriv left
[04:55] *** tann joined
[05:00] *** alester left
[05:02] *** frew left
[05:16] *** frew joined
[05:18] *** justatheory left
[05:28] *** sparc joined
[05:31] *** sri_kraih joined
[05:38] *** eMaX joined
[05:55] *** justatheory joined
[06:02] *** justatheory left
[06:03] *** tann left
[06:07] *** finanalyst joined
[06:10] *** last joined
[06:17] *** rfordinal joined
[06:22] *** torek joined
[06:24] *** iblechbot joined
[06:25] *** rfordinal left
[06:26] *** frew left
[06:27] *** xinming__ left
[06:29] *** xinming joined
[06:33] *** DC joined
[06:38] *** DemoFreak joined
[06:55] *** dukeleto left
[07:00] *** eMaX left
[07:03] *** jauaor left
[07:05] *** rfordinal joined
[07:08] *** baest left
[07:09] *** baest joined
[07:10] *** molaf joined
[07:14] <dalek> rakudo: 02d0ed2 | pmichaud++ |  (2 files):

[07:14] <dalek> rakudo: Replace string-based typecheck with class-object based typecheck.

[07:14] <dalek> rakudo: This appears to avoid the -G bugs for Rakudo, which appear to occur

[07:14] <dalek> rakudo: due to something going wrong when do_dispatch (written in C) calls

[07:14] <dalek> rakudo: !bindability_checker (PIR) which calls typeof_s_p opcode which

[07:14] <dalek> rakudo: calls the 'name' vtable function which itself happens to be

[07:14] <dalek> rakudo: overridden in PIR via a :vtable flagged sub.  Or something like that.

[07:15] <dalek> rakudo: Anyway, we once again see that using string names as class identifiers

[07:15] <dalek> rakudo: leads to trouble.  (Bad coder!  No biscuit!)

[07:15] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/02d0ed20644bfe92a104f32efc7e6a48a8fabfa5

[07:16] *** nacho__ joined
[07:19] <moritz_> pmichaud: that makes t/spec/S02-builtin_data_types/hash_ref.rakudo fail 7/32

[07:19] <moritz_> num.t 4/48

[07:21] <moritz_> lots of fallout, actually

[07:21] <moritz_> (with parrot r39973)

[07:21] <moritz_> on amd64 debian

[07:24] *** DemoPhreak joined
[07:25] *** dakkar joined
[07:30] *** iblechbot left
[07:31] *** payload joined
[07:34] *** SmokeMachine joined
[07:34] *** nacho__ left
[07:36] *** rfordinal left
[07:38] *** DemoFreak left
[07:43] *** DemoPhreak is now known as DemoFreak

[07:49] *** last left
[07:50] *** Caelum left
[07:51] *** Caelum joined
[07:57] *** ssm left
[07:59] *** ssm joined
[08:04] *** eMaX joined
[08:15] *** dukeleto joined
[08:29] *** donaldh joined
[08:44] <pmichaud> moritz_: interesting, hash_ref.t works for me

[08:44] <pmichaud> num.t also

[08:44] <moritz_> pmichaud: I aborted the spectest after seeing lots of fallout... should I restart and give you a complete output?

[08:45] <pmichaud> make sure everything's clean :-)

[08:45] <pmichaud> but yes, complete output is probably worthwhile

[08:45] <pmichaud> no rush -- I'm heading to bed soon

[08:45] <moritz_> is realclean clean enough=

[08:45] <moritz_> s/=/?/

[08:45] <pmichaud> usually it's clean enough, but sometimes it isn't.

[08:45] <pmichaud> (in parrot)

[08:45] <pmichaud> maybe remove the parrot/ dir and rebuild with --gen-parrot

[08:46] <moritz_> I'll do a git-clean -dfx

[08:47] <moritz_> ok, will take some time, I'll just paste the result later on

[08:48] <pmichaud> I'll be up again in just a few hours

[08:59] *** kate21de1 joined
[09:00] *** agentzh left
[09:09] *** DemoFreak left
[09:13] *** explorer joined
[09:15] *** kate21de left
[09:17] *** M_o_C joined
[09:21] <moritz_> pmichaud: http://nopaste.snit.ch/17199

[09:23] *** meppl joined
[09:29] *** payload left
[09:38] *** jauaor joined
[09:43] *** Snublefot left
[09:44] *** Snublefot joined
[10:04] *** donaldh left
[10:11] *** iblechbot joined
[10:13] *** DC left
[10:16] *** agentzh joined
[10:17] *** kborer left
[10:19] *** cls_bsd left
[10:24] *** buubot left
[10:24] *** buubot joined
[10:27] *** dakkar left
[10:36] *** rfordinal joined
[10:42] *** DemoFreak joined
[10:48] *** IllvilJa joined
[10:48] *** last joined
[11:02] *** last left
[11:20] *** rfordinal left
[11:21] *** donaldh joined
[11:21] *** pmurias joined
[11:23] *** payload joined
[11:26] *** meppl left
[11:44] *** stepnem left
[11:55] *** zamolxes joined
[11:57] *** stepnem joined
[12:00] *** murbarf joined
[12:01] <murbarf> hi

[12:01] *** last joined
[12:01] <moritz_> hello

[12:02] *** pmurias left
[12:05] *** nihiliad joined
[12:07] <moritz_> it's quiet in here today, ENOMASAK ;-)

[12:22] *** finanalyst left
[12:29] *** DemoFreak left
[12:30] *** ejs joined
[12:32] *** icwiener joined
[12:34] *** stepnem left
[12:37] *** masak joined
[12:44] *** skids joined
[12:49] *** wayland76 joined
[12:50] <wayland76> http://www.perl6-projects.org/ looks funny at 800x600 on Seamonkey (this is what I'm using).  If someone could pass the message to the appropriate person, that would be great :).  ["Funny looking" means that the boxes aren't side by side, but sort of scattered around the place :) )

[12:50] <lambdabot> wayland76: You have 1 new message. '/msg lambdabot @messages' to read it.

[12:51] *** wayland76 left
[12:51] *** rfordinal joined
[12:52] *** rfordinal left
[12:52] *** payload left
[12:52] *** pmurias joined
[12:53] <pmurias> moritz_: my newest GSoC blog post: http://pmurias.livejournal.com

[12:55] *** stepnem joined
[12:55] *** payload joined
[12:58] <masak> (and here's the unchanging URL, for the logs: http://pmurias.livejournal.com/1375.html )

[12:58] <lambdabot> masak: You have 1 new message. '/msg lambdabot @messages' to read it.

[12:59] <masak> @messages

[12:59] <lambdabot> azawawi said 8h 51m 12s ago: any update on u4x?

[12:59] <masak> azawawi: yes, see logs of latest perl6-gsoc meeting.

[13:08] <skids> pmurias: oprof is pretty good actually, once you get an arm around it.

[13:09] <pmurias> i seemed pretty good but without a tutorial it's hard to understand all the myriad options

[13:09] <pmurias> and sysprof is just modprobe a module and press two buttons

[13:10] <skids> Well, first tell it you have no kernel image, assuming you don't.

[13:10] <skids> The gui helps a bit, but can be a little confusing.

[13:11] *** yahooooo left
[13:11] <skids> (Depends on what you want to profile, and what your CPU supports)

[13:11] <skids> Then it's really a matter of telling it to print the call tree when examining the results.

[13:11] *** clintongormley joined
[13:11] <pmurias> i just wanted to profile CPU usage

[13:12] <skids> But what part of the cpu?

[13:12] <skids> :-)

[13:14] <pmurias> my understaning of lowlevel concepts is very limited

[13:14] <pmurias> isn't the amount of time the cpu evaluated a given piece of code a resonable quality

[13:14] <pmurias> * quantity

[13:14] <pmurias> ?

[13:15] <skids> Not really, because a lot of programs are bound up on L2 cache, not cycles.

[13:16] *** Lorn joined
[13:17] *** ejs left
[13:18] <skids> ouch.  my oprofile-gui got kicked because it depends on a versioned libanyevent-perl which conflicts with a custom libcoro-perl :-P

[13:18] <skids> Which of course is SMOP-essential

[13:18] <skids> bollocks!

[13:21] <skids> ah update fixed.

[13:24] <skids> pmurias: so what's a good mildew benchmark to test with?

[13:25] *** ejs joined
[13:29] *** pmurias left
[13:30] *** pmurias joined
[13:31] *** meppl joined
[13:37] *** explorer left
[13:41] *** frew joined
[13:43] <masak> wow, seems people are approximating a consensus in the filetest thread. amazing!

[13:43] *** payload left
[13:44] <skids> pmurias: the SMOP_DISPATCH as a function stuff seems to break a make clean/build.  It's choosing the function in base.h but not compiling a functional version.

[13:47] *** payload joined
[13:50] *** rfordinal3643 joined
[13:51] *** alester joined
[13:52] *** skids left
[13:53] *** skids joined
[13:54] *** last left
[13:57] <pugs_svn> r27501 | pmurias++ | [re-smop] add missing file

[13:58] *** cls_bsd joined
[14:01] *** skids__ joined
[14:01] *** skids left
[14:01] *** ejs left
[14:02] <skids__> well, it appears SMOP has a knack for crashing kernel while oprofile is running.  Probably due to the locking.

[14:04] <pmurias> skids__: the locking is turned off

[14:05] *** frew left
[14:05] <skids__> hrm.  well, something then.  Maybe I'll play with it later, gotta stay up and running at the moment.

[14:06] <pmurias> skids__: what do you think would be a good way to gather profiling for SMOP?

[14:07] <skids__> I'm not much of a fan of building it in, but with the methods all going through the same "message" function I guess you have to.

[14:09] <PerlJam> std: for 1..* _> @a { }

[14:09] <p6eval> std 27501: OUTPUT«##### PARSE FAILED #####␤Missing block at /tmp/56pOJ4obBV line 1:␤------> [32mfor 1..* [31m_> @a { }[0m␤    expecting any of:␤    infix or meta-infix␤      infix stopper␤    parameterized block␤      standard stopper␤ terminator␤FAILED 00:02 36m␤»

[14:09] <PerlJam> std: for 1..* -> @a { }

[14:09] <p6eval> std 27501: OUTPUT«ok 00:02 38m␤»

[14:09] <PerlJam> std: for 1..* -> [@a] { }

[14:09] <p6eval> std 27501: OUTPUT«ok 00:02 38m␤»

[14:09] <PerlJam> std: for 1..* -> [@a[50]] { }

[14:09] *** rfordinal3643 left
[14:09] <p6eval> std 27501: OUTPUT«ok 00:02 38m␤»

[14:10] *** rfordinal3643 joined
[14:10] <PerlJam> std: for 1..* -> @a[50] { }

[14:10] <p6eval> std 27501: OUTPUT«ok 00:02 38m␤»

[14:10] *** last joined
[14:10] <skids__> (unless there was a way to make a separate "message" sub for every SMOP_DISPATCH message.)

[14:13] <pmurias> skids__: the message sub would have to be unique for every RI and method identifier combination?

[14:15] <skids__> pmurias: unless you didn't care about aliasing between RIs.

[14:16] <masak> PerlJam: that's syntactically correct, but would fail at runtime.

[14:16] <skids__> At some point the information is good enough that you can say, "I know which one is the culprit here"

[14:17] <PerlJam> masak: You mean in a particular implementation or in any perl 6 implementation? 

[14:18] <masak> PerlJam: you're asking each element to be an array of 50 elements.

[14:18] <masak> but the elements aren't arrays, they're integers.

[14:18] <masak> bam. type fail.

[14:19] *** unitxt joined
[14:19] <PerlJam> oh, you're only talking about that last one.

[14:19] <masak> aye.

[14:19] *** lichtkind joined
[14:21] <masak> moritz_: yes, I've been having sleep challenges lately due to finding way too interesting books close to my bed at night. I'm working to rectify this problem.

[14:21] <lucs> masak: By finishing the books? :)

[14:22] <masak> lucs: partly that, yes.

[14:27] *** mofino joined
[14:43] *** eMaX left
[14:43] *** explorer joined
[14:53] <masak> I once amused myself by golfing down the 8-queens problem as much as I could in Perl 5. http://masak.org/carl/w/index.php/Perl:Golf -- it would be interesting to see someone do the same for Perl 6.

[14:58] <last>  Aiiii!  The last version (no whitespace) makes my brain hurt.

[14:59] <sbp> masak: there's some strange &apos; double encoding at the top there

[15:00] *** amoc left
[15:00] *** justatheory joined
[15:03] *** murbarf left
[15:08] *** Exodist joined
[15:08] *** Exodist left
[15:09] *** nihiliad left
[15:10] *** nihiliad joined
[15:10] <M_o_C> you don't have something like smolder for make spectest, do you?

[15:16] *** torek left
[15:20] *** donaldh left
[15:20] *** donaldh joined
[15:21] *** jauaor left
[15:25] *** hercynium joined
[15:29] *** ruoso joined
[15:35] *** icwiener left
[15:40] *** Su-Shee joined
[15:40] <Su-Shee> hi.

[15:42] *** icwiener joined
[15:43] *** IllvilJa left
[15:45] *** yahooooo joined
[15:50] <sjohnson> Su-Shee: hi

[15:51] * Su-Shee flees from perl6 bashing. i didn't know how many people don't like it.

[15:52] <cbk_> Lexical 'self' not found?  What the heck does that mean and how can I fix it (of course I get this in MY perl 6 code)

[15:53] <masak> Su-Shee: people fear the unknown.

[15:53] <TimToady> it means you used syntax that implies a current object when there isn't a current object

[15:54] <cbk_> like this: if $listObj.checkList( %.petList, $pet) { ...}

[15:54] <cbk_> ?

[15:54] <TimToady> that won't work outside a method

[15:54] <Su-Shee> masak: it's annoying, but it's no use to get into an argument.. 

[15:55] <TimToady> because %.petList means %(self.petList)

[15:55] <cbk_> I'm trying to pass %petList as a pramater

[15:55] <cbk_> ok

[15:55] <TimToady> why did you put the .?

[15:55] <masak> Su-Shee: agreed. let's concentrate on being unignorably awesome instead.

[15:55] <cbk_> just saying that I had a question

[15:56] <Su-Shee> masak: gladly.

[15:56] *** payload left
[15:56] <cbk_> perl is kinda funny that way, I know I see $_ and think it's a typeO

[15:56] <cbk_> sorry.

[15:58] <TimToady> masak: -> *@x[50] could conceivably take only the next 50 arguments

[15:58] <TimToady> though it would likely misbehave if there were less than 50

[15:58] <masak> aye.

[15:59] <cbk_> So what would be the best method (way) to pass a petList to a method?

[15:59] <TimToady> is it in variable %petList already?

[15:59] <masak> cbk_: $obj.method(%petList)

[15:59] <cbk_> yes thats what I ment %petList

[15:59] <TimToady> p6 doesn't autoflatten like p5 does

[16:00] <TimToady> assuming the signature of .method is ready for a hash object as the first parameter

[16:00] <TimToady> method foo (%pl) {...} would get %petList as %pl

[16:01] <cbk_> masak: that is what I had did: if $listObj.checkList( %.petList, $pet) { ...}

[16:01] <cbk_> and the method :  method checkList ( %list, $pet ) {

[16:01] <TimToady> leave out the .

[16:01] <cbk_> ok

[16:02] *** KyleHa joined
[16:04] *** molaf left
[16:04] <TimToady> masak: I think it's more than just fear of the unknown, but false Laziness that doesn't want to distinguish What Is from What Ought To Be, and I already learned how Perl 5 does it, which is obviously right, so Perl 6 must be wrong somehow...

[16:05] <masak> hm.

[16:05] <TimToady> sorry for the viewpoint shift in the middle, bad writing style...

[16:05] <masak> I have this pattern.

[16:05] <masak> people don't rationally derive at opinions through arguments.

[16:05] <masak> they try to find arguments that defend their opinions.

[16:06] <TimToady> yes, Man is not a rational animal, but a rationalizing animal  --I forget who

[16:06] <masak> nod.

[16:06] <cbk_> TimToady, masak: I wouldn't worry too much about what perl6 haters say.  Not too many people welcome change(even if it is for the better)

[16:07] <masak> cbk_: word.

[16:07] <cbk_> Per 6 is going to ROCK!

[16:07] <masak> cbk_: it already does. :)

[16:07] * masak doesn't need the future tense for Perl 6

[16:07] <cbk_> well for me, as soon as a book comes out cuz it's hard learning without one

[16:08] <TimToady> Heinlein, it appears, at least for the 2nd half of it

[16:08] <masak> cbk_: Perl 6 books tend to have short half-lives. :)

[16:08] <masak> Heinlein -- doesn't surprise me.

[16:08] <cbk_> yah I understand

[16:08] <TimToady> perhaps channeling Russell for the first part

[16:08] *** iblechbot left
[16:08] *** pmurias left
[16:09] *** pmurias joined
[16:09] <TimToady> another component of it is simply that Perl 6 promises to obsolete Perl 5 eventually, and some people confuse that with immediately

[16:10] *** rfordinal3643_ joined
[16:10] *** rfordinal3643_ left
[16:10] <TimToady> and then when it doesn't happen immediately, they assume the promise is false

[16:11] *** meteorjay joined
[16:12] *** pmurias_ joined
[16:12] *** Psyche^ joined
[16:13] *** donaldh left
[16:15] <cbk_> TimToady, my second computer programming lang (that I tried to learn) was c++.  I loved the OO of it. Then I started (trying) to learn Perl. (OO in old perl was not that fun, too much work) Now comes Perl 6, it's like c++ and old perl had a babby and that babby will be that best OO programming lang to date, with all of the fun and rapid prototyping/development of Perl! 

[16:15] * sbp remembers seeing an inordinately rude essay recently about auto-flattening in perl5 vs. perl6 — the point apparently being that auto-flattening was only lately and grudgingly removed from perl6

[16:16] <sbp> I don't know about that, but I did check some other things in the essay...

[16:17] <PerlJam> cbk_: please please please don't equate perl's oop to c++

[16:17] <PerlJam> C++ was a good first approximation of an oopy language with C-like syntax, but we've progressed a little since then.

[16:18] *** pmurias_ left
[16:18] <cbk_> yah, I know but it was my FIRST exp. in oop, thats why i said that.

[16:18] * sbp considers how to do non-chaining prototypicality in perl6 OO

[16:19] <masak> TimToady: the thing about obsoleting, and the eventually/immediately timescale, is eerily reminiscent of the myths surrounding Esperanto. 

[16:20] *** rfordinal3643 left
[16:20] <sbp> hmm. I wonder if there's a design pattern for this

[16:20] <sbp> the problem being that you have a prototype, you derive various things from it, then you modify some junk on the original prototype and then that propagates back down in ways that cause problems

[16:22] <sbp> “Classes are open and non-final by default, but may easily be closed or finalized not by themselves but by the entire application, provided nobody issued an explicit compile-time request that the class stay open or non-final.” — S12

[16:22] <sbp> when a class is finalised, it can still be cloned from though I presume?

[16:23] <sbp> is there any way you can say, “nope, you can't clone from this”?

[16:23] <sbp> I think... hmm, some language had this

[16:23] <sbp> oh yeah, MOO

[16:23] *** Patterner left
[16:23] *** Psyche^ is now known as Patterner

[16:24] <sbp> ‘An alternative quasi-solution to the problem of clones interfering with the behavior of the parent is to provide a means whereby the potential parent is flagged as being clonable or not. In MOO, this is achieved with the "f" flag.’ — http://en.wikipedia.org/wiki/Prototype-based_programming

[16:24] <sbp> (clones interfering with the behavior of the parent? eh? shouldn't that be the other way around?)

[16:28] *** jauaor joined
[16:30] *** masak left
[16:33] *** DemoFreak joined
[16:33] <sbp> “All classes inherit a default new constructor from Object. It expects all arguments to be named parameters initializing attributes of the same name.” — oh this is clever

[16:35] <sbp> “Whether you write your own BUILD or not, at the end of the BUILD, any default attribute values are implicitly copied into any attributes that haven't otherwise been initialized.” — hmm. what if you don't want that?

[16:36] <PerlJam> sbp: don't supply defaults?

[16:36] *** rfordinal joined
[16:38] *** nihiliad left
[16:40] <sbp> PerlJam: well, you say that, but I can imagine writing some spaghetti code somewhere where you get arguments that you want to discard for some reason. "don't do that when it hurts" implies you have control over doing it... :-)

[16:41] <sbp> but yeah, I'm not really thinking it through

[16:42] *** cdarroch joined
[16:43] *** explorer left
[16:48] *** zamolxes left
[16:49] <PerlJam> sbp: assign Nil to the items you want to discard.

[16:50] <sbp> oh, undef you mean? hmm

[16:50] <sbp> yeah, thanks. hard to keep all this in mind

[16:51] <lisppaste3> cbk pasted "passing parameters" at http://paste.lisp.org/display/83377

[16:52] <cbk_> this is the problem that I get now with the %petList passed as a parameter...http://paste.lisp.org/display/83377

[16:54] <cbk_> of course I have already done this: my $listObj = PetList.new();

[16:55] *** payload joined
[16:55] <PerlJam> cbk_: but it's complaining about %petlList

[16:55] <PerlJam> er, %petList even

[16:58] <cbk_> well I'm trying to have one method check ether one of the 2 %hashes I have. Thats why I pass %petList as a parameter I could also have used %perReq the other %

[16:59] <PerlJam> cbk_: but apparently you didn't declare a hash called %petList

[17:00] <cbk_> I have it in the class: my %petList = (dog => 1, cat => 1, fish =>1, rabbit =>1); and my %petReq; ##pet retuest list (just empty)

[17:01] <PerlJam> cbk_: check your scoping.

[17:01] <PerlJam> cbk_: or paste your code somewhere and let us tear it apart :)

[17:02] <cbk_> well ok, but be gentle, I don't write much code and I'm just starting to learn perl 6....

[17:04] <cbk_> here it is: http://paste.lisp.org/display/83380

[17:05] <PerlJam> cbk_: yes,  your %petList is scoped to the class, but you're trying to use it outside of the class in the loop

[17:09] <cbk_> ok... so could I just pass like a var that says 1 or 2 and have the method put in %petList if it gets a 1 or %petReq if it gets a 2?

[17:10] <PerlJam> cbk_: or just move the declaration for %petList and %petReq to be outside of the class definition.

[17:11] <cbk_> There has to be more eloquent way to do that, right?

[17:11] <cbk_> or I could do that i guess.   I was trying to keep everything for the PetClass selfcontained inside the class only :(

[17:12] <PerlJam> cbk_: well, if these are meant to be private data for the class, then you have it scoped correctly, and yes you should use some other mechanism for selecting the one you want to check.

[17:13] <PerlJam> cbk_: or you could just write two methods, one to check %petList and  the other to check %petReq

[17:13] <cbk_> Ok I'll try it that way....  Thank you for your help. I'll probably be back in an hr or so :)

[17:14] <PerlJam> cbk_: though, I'm curious why you would try to write an abstraction for this rather than just use perl's built-in mechanisms to do this.

[17:15] <PerlJam> I mean, checkList() is just a wrapper around %hash.exists($key), so why not juse use %hash.exists($key)?

[17:15] <PerlJam> (a very thin wrapper)

[17:16] <cbk_> Well that could only be because... I did know you could do that...

[17:16] <PerlJam> but I guess you'd still end up with two methods to your PetList object for asking about each individual list

[17:17] <cbk_> Yah thats why I did it! :)

[17:18] <cbk_> I'll just try the two methods and/or a more complated checkList method....

[17:18] <cbk_> PerlJam, Thanks

[17:27] *** ruoso left
[17:33] *** KyleHa left
[17:50] *** sparc left
[17:55] *** last left
[17:56] *** iblechbot joined
[17:59] *** kane___ joined
[18:05] <cbk_> can I do this with an "if" statement because I'm getting an: "Could not find non-existent sub if" error

[18:05] <cbk_> if $listObj.checkList1($pet) { ... }

[18:05] <cbk_> or do have to do it like this.. if ($listObj.checkList1($pet)) {...} 

[18:07] <Tene> cbk_: are you sure you have a space between 'if' and the ()s?

[18:08] <cbk_> Tene: i don't have the ()

[18:08] <cbk_> 's yet

[18:08] <cbk_> I'll try that.

[18:08] <Tene> cbk_: you shouldn't be getting that error... can you post the code?

[18:08] <cbk_> ok

[18:10] <cbk_> Tene, ok it is here: http://paste.lisp.org/display/83387

[18:11] <Tene> and which line gives the error?

[18:12] <Su-Shee> can I do use GrammarA in grammar GrammarB and extend GrammarB with GrammarA that way?

[18:12] <Tene> Su-Shee: the standard way to do it is with inheritance: grammar GrammarA is GrammarB { ... }

[18:12] <cbk_> does not say.  I think it is inside the main loop on the first if that I use

[18:12] <Su-Shee> Tene: ah, that plain and simple.. 

[18:13] <cbk_> I put in a say 'check point' before it and it didn't come up?

[18:13] <PerlJam> cbk_: I'd guess it's your "else if{ ... }" that's really the problem.

[18:14] <Tene> ckoh, I see it...

[18:14] <Tene> cbk_: you have ;s after your if ()s

[18:14] <Tene> so there's no block, so it parses as a sub instead of a control

[18:14] <M_o_C> [17:09:57] <M_o_C> you don't have something like smolder for make spectest, do you?

[18:14] <Tene> if (%petList...);

[18:14] <PerlJam> Tene++ good eye

[18:15] <Tene> cbk_: also, Perl 6 doesn't have a form like that... if you want a one-line without {}s, you have to put the if after the statement:

[18:15] <Tene> return if %petList.exists($pet);

[18:15] <Tene> or

[18:15] <Tene> ir ... { return }

[18:15] <Tene> s/ir/ior/

[18:15] <Tene> ARGH typing fail. :(

[18:15] <cbk_> :)

[18:15] <cbk_> ok

[18:15] <cbk_> brb

[18:16] <cbk_> thanks...

[18:21] <cbk_> ok i got it. It now looks like this: 	if %petList.exists($pet){return;}

[18:21] <cbk_> thanks!

[18:33] *** hercynium left
[18:35] *** jauaor left
[18:38] <TimToady> um, that's also wrong

[18:39] <TimToady> std: if %petList.exists($pet){return;}

[18:39] <p6eval> std 27501: OUTPUT«##### PARSE FAILED #####␤Missing block (apparently gobbled by undeclared routine?) at /tmp/YxGVr4XsYf line 2:␤------> [32m[31m;[0m␤    expecting any of:␤ parameterized block␤      standard stopper␤ terminator␤       whitespace␤Other potential difficulties:␤  Variable $pet is

[18:39] <p6eval> ..not predeclare…

[18:41] *** rindolf joined
[18:41] <rindolf> Hi all.

[18:41] <rindolf> I'm going to add another Perl 6-related answer to the #perl FAq.

[18:42] <rindolf> About whether it is worthwhile to learn Perl 5 despite the fact that Perl 6 is so different.

[18:42] <mofino> i wouldn't even raise the issue

[18:43] <mofino> the mere fact people think there is another version, they will ignore the current one

[18:43] *** payload left
[18:44] <rindolf> mofino: someone asked it on #perl today.

[18:44] <rindolf> It was the third time already.

[18:44] <rindolf> This needs to be answered.

[18:44] <mofino> :/

[18:45] <sbp> rindolf: note that I'm trying to learn perl6 with hardly any knowledge of perl5, and trying quite deliberately to maintain that. so far I'm finding it not too difficult, though there are occasional problems

[18:45] <sbp> so from the "is it even possible?" standpoint, I'd say "yes, with a but"

[18:45] <sbp> presumably that but will disappear as perl6 gets better documented and more developed

[18:46] <Su-Shee> and I don't find perl 6 not being perl anymore. but I'm certainly not argueing about that.

[18:46] <PerlJam> sbp: and as implementations mature

[18:46] *** meppl left
[18:46] <sbp> (nothing against perl5, by the way! just don't plan to use it)

[18:47] <sbp> so many languages to learn

[18:47] <PerlJam> sbp: at some point it's just syntax.

[18:47] <mofino> my mistake, i'm being silly, there are incredible reasons to use perl5 despite perl6 being present

[18:47] <sbp> you learn Hindi, Spanish, Portuguese, Norwegian, Italian, German, and someone is still bound to ask you why you didn't learn French...

[18:47] <mofino> maturity being a core reason

[18:48] <lucs> Pourquoi, hein, pourquoi!?

[18:48] <sbp> what are you even saying! :-)

[18:48] <PerlJam> mofino: are you saying perl6 programmers are more mature  than perl5 programmers?  ;)

[18:48] <Su-Shee> rindolf: you all don't like perl 6 anyway - so why adressing it? ;)

[18:48] <mofino> :)

[18:48] <Su-Shee> PerlJam: well definetely less alpha male. 

[18:48] <rindolf> Su-Shee: some of us like Perl 6.

[18:49] <mofino> really, perl5 and 6 will coexist for a very long time will they not?

[18:49] <Su-Shee> rindolf: the ones remaining silent or the ones drowing in the chorus of the ones not liking it? :)

[18:50] <mofino> perl* is all that matters

[18:50] <mofino> start with the rock that is perl5, and hop to the next rock that will be perl6 in some time

[18:50] <PerlJam> Su-Shee: The ones not liking perl 6 are oddly cozy with Moose, Devel::Declare, perl 5.10 and other technologies that are making Perl 5 more and more like Perl 6

[18:50] <Su-Shee> mofino: well obviously perl 6 is not perl, I learned today. :)

[18:51] <huf> it's worse than that i think

[18:51] <PerlJam> Su-Shee: depends on who you talk to.

[18:51] <mofino> that just sounds wrong

[18:51] <huf> i suspect that perl6 has been taken over by the "evil jews" :D

[18:51] <PerlJam> Su-Shee: in here, "Perl" means "Perl 6"

[18:51] <mofino> the spirit of perl remains

[18:51] <mofino> syntax is just taste

[18:51] <sbp> yeah. perl6 is certainly perl, according to the Synopses

[18:51] <Su-Shee> PerlJam: I personally totally dig perl 5 and perl 6 and I think Perl 6 is extremely smooth to code and will be a very sexy language. 

[18:51] <Su-Shee> PerlJam: that's why I flew here.

[18:52] <huf> mofino: arent you the unreliable traitors that abandoned perl5? :D

[18:52] <mofino> oh god no

[18:52] <huf> at least that's the vibe i'm getting from some people on #perl ;)

[18:53] <mofino> most certainly not me

[18:53] <mofino> perl5 shaped my very technical existence, maybe that'

[18:53] <mofino> that's good or bad, heh

[18:53] <huf> i just hope the entire perl universe doesnt fragment itself to death. i'm scared even thinking about it

[18:53] <Su-Shee> huf: and why shouldn't they.. 

[18:54] <PerlJam> huf: there will always be naysayers and doomsdayers.

[18:56] <rindolf> http://perl.net.au/wiki/Freenode_Sharp_Perl_FAQ#When_is_Perl_6_going_to_be_ready.3F

[18:56] *** beggars joined
[18:57] <mofino> sweet

[18:57] <Su-Shee> biased. 

[18:57] <mofino> hehe

[18:58] <rindolf> Su-Shee: biased?

[18:58] <rindolf> Su-Shee: it's the #perl FAQ, BTW.

[18:58] <rindolf> Not the #perl6 FAQ.

[18:58] <mofino> "Furthermore, if you don't know Perl, you are probably lacking essential programming education" ..

[18:58] <mofino> that could be a bit much

[18:59] <mofino> from here: http://perl.net.au/wiki/Why_Learn_Perl

[19:00] <Su-Shee> rindolf: and what are you going to do when the time comes, when people simply use Perl 6, think of it as "that's Perl" and join #perl?

[19:00] <mofino> adapt?

[19:02] <PerlJam> Su-Shee: it's a wiki.

[19:04] <Su-Shee> PerlJam: If I wish a social death, I'll edit #perl's wiki in favor of Perl 6. :)

[19:04] <rindolf> Su-Shee: when the time comes, we will update the page.

[19:04] <rindolf> Su-Shee: but one bird in the hand is better than two in the tree.

[19:05] <Su-Shee> rindolf: I didn't get that?

[19:05] <rindolf> Su-Shee: we need to answer the question now.

[19:06] <rindolf> Su-Shee: naturally, it will grow out-of-date.

[19:06] *** meppl joined
[19:06] <rindolf> Su-Shee: when it does, we'll update it.

[19:06] <Su-Shee> rindolf: I have nothing against answering it. 

[19:08] <rindolf> Su-Shee: then what is your issue with it?

[19:09] <rindolf> I now wrote this too - http://perl.net.au/wiki/Freenode_Sharp_Perl_FAQ#Perl_6_is_going_to_be_so_different_from_Perl_5._Should_I_still_learn_Perl_5.3F

[19:10] <sbp> rindolf: I don't understand this

[19:10] <sbp> why should one learn perl5?

[19:11] <sbp> I've gotten by fine without it

[19:11] <huf> because it's fucking awesome.

[19:11] <rindolf> sbp: don't you know a different dynamic scripting language?

[19:11] <huf> but go ahead and deprive yourself from a ton of joy

[19:12] <Su-Shee> (and this is _exactly_ why I stopped saying anything..)

[19:12] <huf> ... or is that "deprive of"?

[19:12] <sbp> hmm, whether I know any other language isn't really relevant

[19:12] <rindolf> huf: deprive of

[19:13] <rindolf> sbp: well, people keep asking us "Perl 6 is going to be so different. Is it still worthwhile to learn Perl 5?"

[19:13] <sbp> do they really ask that?

[19:13] <rindolf> So I'm answering them.

[19:13] <rindolf> sbp: yes.

[19:13] <rindolf> On #perl

[19:13] <rindolf> It happened at least three time.

[19:13] <rindolf> Probably more.

[19:13] <huf> but that's kinda like "i already know javascript. why should i care about java?" 

[19:13] <sbp> yeah, that doesn't make sense to me, as a question to ask

[19:14] <sbp> I can imagine asking: is perl6 ready, and does it have features I might be able to use to my benefit?

[19:14] <sbp> and I can imagine the answer might be "probably not ready enough for you, but some of these things you seek might be in its predecessor"

[19:14] <huf> i can imagine not asking anything much because all of these are already answered in some faq or blogpost

[19:14] <huf> and it's just a google away ;)

[19:15] <rindolf> sbp: well, people ask this question, and I don't have a problem understanding why they do.

[19:15] <rindolf> I think calling Perl 6 "*Perl* 6" was a mistake.

[19:15] <rindolf> Although they probably could not have told in advance, when the Perl 6 process started.

[19:16] <Su-Shee> rindolf: yes. I think you made this pretty clear today. ;)

[19:16] <rindolf> Because Perl 6 is so radically different than Perl 5.

[19:16] <sbp> I think what I'm trying to say is that there are loads of reasons why learning a language might be worthwhile: you might have to learn it for work purposes, or it might increase your hireability, or be an interesting mental exercise, or help you pull chicks

[19:16] <Su-Shee> rindolf: it isn't. it's visibly and in the spirit still perl.

[19:16] <rindolf> Su-Shee: Perl 6 is very different than Perl 5.

[19:17] <sbp> so "is it worthwhile to learn perl5?" can only be answered by another question: "what are your circumstances?" — maybe it is worth it, maybe it's not. and if the context is "should I learn perl6 or perl5?", then that is something which might inform the circumstances

[19:17] <Su-Shee> rindolf: I don't agree. 

[19:17] <rindolf> Su-Shee: almost everything is different.

[19:17] <rindolf> You say @myarray[3] instead of $myarray[3]

[19:17] <rindolf> And @myarray[*-1] instead of $myarray[-1]

[19:17] <Su-Shee> rindolf: thank you, rindolf, I do write code in both Perls.

[19:18] <rindolf> Su-Shee: yes.

[19:18] <rindolf> <applied-quote>Perl 6 is going to be a wonderful language. Too bad it won't be Perl.</applied-quote>

[19:19] <rindolf> And you use ~ instead of .

[19:19] <rindolf> And . instead of ->

[19:19] <Su-Shee> rindolf: Ah yes. I have to agree with any existing quote.

[19:19] <rindolf> Su-Shee: it was originally said on Fortan '90.

[19:19] <lucs> I suspect that someone who had never seen Perl 6, but knew Perl 5 and any number of other languages, would, when shown Perl 6 code, think that it looks like Perl more than like anything else.

[19:19] *** athomason joined
[19:19] <rindolf> "Nice language. Too bad it's not Fortran."

[19:19] <rindolf> lucs: maybe.

[19:34] *** tann joined
[19:37] <pugs_svn> r27502 | kyle++ | [t/spec] Test for RT #61108

[19:38] *** kane_ joined
[19:38] *** [particle] left
[19:39] *** [particle] joined
[19:57] *** unitxt left
[19:58] *** unitxt joined
[19:59] *** kane___ left
[20:00] *** last joined
[20:07] *** nbrown_ joined
[20:09] *** pmurias__ joined
[20:09] *** nbrown left
[20:15] *** icwiener_ joined
[20:22] *** Su-Shee left
[20:25] *** pmurias left
[20:31] *** icwiener left
[20:36] <tann> rakudo: #[ blah ] say "hah!"

[20:36] <p6eval> rakudo 02d0ed: OUTPUT«Can't use embedded columns in column 1 at line 2, near "[ blah ] s"␤in Main (src/gen_setting.pm:3340)␤»

[20:38] *** donaldh joined
[20:39] *** pmurias__ left
[20:39] *** lichtkind left
[20:54] *** sjohnson left
[20:55] *** sjohnson joined
[20:55] *** last left
[20:57] *** buubot left
[20:57] *** buubot joined
[21:00] <[particle]> s/columns/comments/ i think

[21:11] *** antiphase left
[21:11] *** antiphase joined
[21:22] *** M_o_C left
[21:27] *** rfordinal left
[21:29] *** donaldh left
[21:30] *** donaldh joined
[21:31] *** donaldh left
[21:36] *** Util joined
[21:39] *** clintongormley left
[21:46] *** skids__ left
[21:47] *** rindolf left
[21:49] *** TimToady sets mode: +oooo [particle] araujo clkao cognominal

[21:49] *** TimToady sets mode: +oooo eternaleye frew_ japhb justatheory

[21:49] *** TimToady sets mode: +oooo Matt-W renormalist szabgab Tene

[21:49] *** TimToady sets mode: +oo Trey xinming

[21:53] *** iblechbot left
[22:01] *** starc joined
[22:03] *** icwiener_ left
[22:05] *** payload joined
[22:05] *** FurnaceBoy joined
[22:09] *** mofino left
[22:14] *** FurnaceBoy left
[22:18] *** Util left
[22:28] *** alester left
[22:35] <unitxt> Hi, I am trying to build Rakudo but it's failing. My guess is that it has something to do with my version of gcc. Here is some of the output:  http://paste.lisp.org/display/83399

[22:37] *** Sunbeam joined
[22:47] *** dukeleto left
[22:51] *** unitxt left
[22:51] *** nsh_ is now known as nsh

[22:54] *** Limbic_Region joined
[23:01] *** Whiteknight joined
[23:05] *** zamolxes joined
[23:10] *** skids__ joined
[23:12] <pugs_svn> r27503 | lwall++ | [S03] Reduce power of Pair.ACCEPTS to work only on booleans, moritz++

[23:12] <pugs_svn> r27503 | lwall++ | (but we keep the pair forms for ease-of-use via switches and junctions

[23:12] <pugs_svn> r27503 | lwall++ | as well as for "doesn't look like anything else" readability).

[23:12] <pugs_svn> r27503 | lwall++ | Specify that numeric comparisons must use the method forms (except for == 0).

[23:12] <pugs_svn> r27503 | lwall++ | Filetest methods and pair matching no longer work on Str.

[23:12] <pugs_svn> r27503 | lwall++ | (They do, however work on IO, Statbuf, and will presumably work extensibly

[23:12] <pugs_svn> r27503 | lwall++ | on any other resource handles we care to define in the future.)

[23:15] *** beggars left
[23:30] *** mikehh__ joined
[23:41] <tann> rakudo: my @a; say @a ?? "y" !! "n"

[23:41] <p6eval> rakudo 02d0ed: OUTPUT«n␤»

[23:42] <tann> rakudo: my @a; say @a ~~ []

[23:42] <p6eval> rakudo 02d0ed: OUTPUT«1␤»

[23:42] <tann> rakudo: my @a; say @a ~~ [] ?? 'y' !! 'n'

[23:42] <p6eval> rakudo 02d0ed: OUTPUT«y␤»

[23:43] <tann> rakudo: my @a; say @a ~~ [0] ?? 'y' !! 'n'

[23:43] <p6eval> rakudo 02d0ed: OUTPUT«n␤»

[23:45] *** mikehh_ left
[23:46] <tann> rakudo: my @a; say @a.shape

[23:46] <p6eval> rakudo 02d0ed: OUTPUT«Method 'shape' not found for invocant of class 'Perl6Array'␤»

[23:47] <tann> rakudo: my @; say @a.elems

[23:47] <p6eval> rakudo 02d0ed: OUTPUT«Malformed declaration at line 2, near "@; say @a."␤in Main (src/gen_setting.pm:3340)␤»

[23:47] <tann> rakudo: my @a; say @a.elems;

[23:47] <p6eval> rakudo 02d0ed: OUTPUT«0␤»

[23:49] <cbk_> tann, so i can say perl 6 code to p6eval and it will tell me if it is correct?

[23:50] <tann> you prepend 'rakudo:' to the code

[23:50] <tann> so rakudo  will run the code

[23:50] <literal> to just do a syntax check, you can use "std: "

[23:50] <lambdabot> literal: You have 2 new messages. '/msg lambdabot @messages' to read them.

[23:50] <literal> lambdabot: @messages

[23:50] <lambdabot> azawawi said 1d 11h 44m 14s ago: any pending grok update soon?

[23:50] <lambdabot> azawawi said 21h 5m 38s ago: I took the liberty of extending grok (at runtime) in my Padre Perl 6 plugin to support more help from Perl foundation wikis, http://padre.perlide.org/trac/changeset/

[23:50] <lambdabot> 5994

[23:50] <cbk_> cool!

[23:50] <tann> not sure if pugs works

[23:50] <tann> pugs: say "yup"

[23:50] <p6eval> pugs: OUTPUT«yup␤»

[23:51] <tann> oh it does

[23:51] <cbk_> well I'm using rakudo anyways.

[23:51] <tann> pugs: say [*} 1..10

[23:51] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "[*}"␤    expecting bare or pointy block construct, ":", identifier or operator␤    at /tmp/FuIZw8qDFu line 1, column 5␤»

[23:51] <tann> rakudo: say [*] 1..10

[23:51] <p6eval> rakudo 02d0ed: OUTPUT«3628800␤»

[23:52] <tann> std: 1,1..Inf &[+]

[23:52] <p6eval> std 27503: OUTPUT«ok 00:02 37m␤»

[23:53] <tann> std: 1,1...Inf &[+]

[23:53] <TimToady> note, that's probably parsing much differently than you think...

[23:53] <p6eval> std 27503: OUTPUT«ok 00:02 37m␤»

[23:53] <TimToady> since you've got & in infix position

[23:54] <TimToady> so you've got Inf & [+]

[23:54] <TimToady> which evaluates to Inf & 0, since [+] has no arguments

[23:54] <TimToady> which autothreads the ... over Inf and 0

[23:54] <tann> urhhh

[23:55] <tann> trick..trick

[23:55] <TimToady> the right side of ... never takes Inf

[23:55] <cbk_> p6eval and std are SO cool!  I can open a private dialog and test my code without begin embarrassed on how bad my perl knowledge is.

[23:56] <tann> cbk_: especially, you're under timtoady's watchful eye, you're in good hands

[23:56] <TimToady> but I'm so mean

[23:57] <tann> all hail gandalf 

[23:57] *** mikehh__ is now known as mikehh

[23:58] <cbk_> tann, never mind, p6eval just made me feel like crap anyways.  

[23:59] *** timbunce joined
[23:59] <tann> cbk_: how so?

[23:59] <tann> #perl6 is the land of joy

