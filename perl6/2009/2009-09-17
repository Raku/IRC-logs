[00:05] *** jrtayloriv left
[00:05] *** tak11 joined
[00:09] <lisppaste3> diakopter annotated #87203 "yamlized 2" at http://paste.lisp.org/display/87203#1

[00:10] <diakopter> that's what it looks like without the ::Dumps

[00:10] <diakopter> down in the ...

[00:11] <s1n> pmichaud: i replied about the scheduling (second sat. after dallas.p6m is this weekend), let me know what you want to do

[00:12] <diakopter> I guess if it's a Double_Double, it should always descend into .nibble

[00:12] <diakopter> (afk )

[00:13] *** sri_kraih left
[00:16] <pugs_svn> r28265 | lwall++ | [viv] properly hoist EXPR fields, diakopter++ 

[00:16] *** rhr_ joined
[00:18] <dalek> rakudo: fed7b0e | pmichaud++ | build/Makefile.in:

[00:18] <dalek> rakudo: Add Mapping.pm to setting (missing from b29506b commit).

[00:18] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/fed7b0ebbe10e1bd6e58b89acbaed5096214fb0f

[00:19] *** ihrd joined
[00:20] <TimToady> diakopter: say(1+2) was just a stupid bug--hoist didn't return it's %r

[00:20] <TimToady> so you should have more annotations in the outer node now

[00:20] *** ihrd left
[00:22] <TimToady> *its

[00:23] *** justatheory joined
[00:23] *** sri_kraih joined
[00:28] *** rhr left
[00:43] <TimToady> diakopter: working on a decent sub nibbler to bypass the AUTOLOAD botch

[00:44] *** dukeleto joined
[00:49] <diakopter> oo cool

[00:54] <dalek> rakudo: c52c780 | pmichaud++ | perl6.pir:

[00:54] <dalek> rakudo: Work around inferior loop problem causing segfault on exit.

[00:54] <dalek> rakudo: (Based on information from Whiteknight++)

[00:54] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/c52c780cf945aa6a55ab51530cfe694be61a6d10

[00:54] *** SmokeMachine left
[00:56] *** nihiliad joined
[01:01] *** maja joined
[01:01] *** jrtayloriv joined
[01:02] *** felipe left
[01:03] *** sm^^^ left
[01:03] *** sm` joined
[01:06] <TimToady> dinner &

[01:12] *** maja_ left
[01:22] *** wolverian left
[01:27] *** wolverian joined
[01:34] <diakopter> STD/viv seems ... faster ... with those last commits

[01:36] *** snarkyboojum_ joined
[01:36] *** rhr_ left
[01:38] *** snarkyboojum__ joined
[01:40] *** rhr joined
[01:41] <diakopter> vijs: say(say(3))

[01:41] <p6eval> vijs 28265: OUTPUT«3␤1␤␤   time in interpreter: 0.012802 s␤»

[01:52] <s1n> diakopter: what's vijs?

[01:54] *** snarkyboojum left
[01:54] *** snarkyboojum__ is now known as snarkyboojum

[01:54] <s1n> diakopter: emits JS from p6?

[01:54] <diakopter> uses Larry's STD parser in Perl 5; emits its AST to JS; interpreter walks the AST

[01:54] <diakopter> could be a "definitional" interpreter eventually... slow of course without optimization phases.

[01:55] <s1n> interesting

[02:01] *** snarkyboojum_ left
[02:03] *** tann left
[02:09] *** hercynium left
[02:14] *** jauaor left
[02:17] *** jiing left
[02:20] *** jaldhar joined
[02:22] <colomon> pmichaud, moritz_: The post office bounced my CLA.  Is the Hillsboro, OR 97123 address still correct for the Perl Foundation?

[02:29] *** am0c joined
[02:30] *** dukeleto left
[02:39] <jrtayloriv> I'm trying to understand this rule --> http://pastebin.com/d61f15c2  ... The first line of the rule says to look for zero or more <command_or_definition>s, but I don't understand what [ $ || <panic: 'Syntax error'> ]  saying. It seems from the context that it is somehow saying "if you didn't find any <commmand_or_definition>s, then something is wrong -- exception", but I don't see how it works.

[02:41] <pugs_svn> r28266 | diakopter++ | [vijs] better not-implemented error msg 

[02:41] <arnsholt> jrtayloriv: $ means end-of-string

[02:42] <arnsholt> So if it doesn't find the end-of-string marker after the program, it invokes the panic routine (|| is the same as | in p5 regex)

[02:45] <jrtayloriv> arnsholt, What is "end-of-string" marker? How would it not be present?

[02:47] *** felipe joined
[02:47] <diakopter> it means if <command_or_definition>* failed to consume all of the input (and then it looked for the eof but didn't find it), there must be a syntax error

[02:48] <jrtayloriv> diakopter, Oh, I see. So all that [ $ || <panic: 'Syntax error'> ] is getting is leftovers from the <command_or_definition>* match ... and since there shouldn't be leftovers, we die horribly.

[02:48] <jrtayloriv> Thanks :)

[02:49] <diakopter> yw

[02:53] *** dukeleto joined
[02:56] <jrtayloriv> diakopter, So the point where [ $ || <panic: 'Syntax error'> ] would be matched (and panic() called) is when it reaches the end of the first line of whatever is left of the input after <command_or_definition>* , correct?

[02:56] <diakopter> probably not linewise..?

[02:57] *** stephenlb left
[02:57] <diakopter> it would panic at the beginning of whatever input wasn't consumed

[03:00] <jrtayloriv> Oops -- I see. That was just me, being stupid ... nevermind.

[03:10] <colomon> rakudo: say atanh(1);

[03:10] <p6eval> rakudo c52c78: OUTPUT«Divide by zero␤»

[03:17] *** snarkyboojum left
[03:17] <pmichaud> colomon: as far as I know that address is the correct one.

[03:20] <dalek> rakudo: 2eca8b3 | pmichaud++ | docs/announce/2009-09:

[03:20] <dalek> rakudo: More announcement updates for the release.

[03:20] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/2eca8b3e16567a6478bbab68046c95698e8fd19d

[03:20] <dalek> rakudo: ea6448f | pmichaud++ | docs/ChangeLog:

[03:20] <dalek> rakudo: More ChangeLog updates.

[03:21] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/ea6448f6be457b81b318589557153deb13fe5f9c

[03:25] *** meppl joined
[03:29] *** gabiruh_ is now known as gabiruh

[03:33] *** jjore left
[03:37] *** jjore joined
[04:10] *** frew_ left
[04:11] <dukeleto> seen jnthn

[04:20] *** nihiliad left
[04:25] *** tak11 left
[04:33] <dukeleto> jnthn: ping!

[04:35] *** ms111 joined
[04:39] <pugs_svn> r28267 | lwall++ | [my.t] missing ; 

[04:41] <pugs_svn> r28268 | lwall++ | [viv] fix up nibbler's AST node a bit 

[04:48] *** ms11 left
[04:51] *** justatheory left
[04:51] *** rfordinal joined
[04:59] *** cdarroch left
[05:00] * diakopter reprecompiles STD

[05:02] *** jrtayloriv left
[05:03] <diakopter> that'll be perfect for topping the day's irclog.

[05:03] *** zloyrusskiy joined
[05:03] <pugs_svn> r28269 | diakopter++ | [viv] extrude extraneous Dumps 

[05:04] <diakopter> er, or not.  silly timezones.

[05:12] *** dalek left
[05:12] *** dalek joined
[05:13] <dukeleto> diakopter: good localtime() :)

[05:14] *** awwaiid left
[05:16] *** awwaiid joined
[05:16] *** jrtayloriv joined
[05:17] *** jrtayloriv left
[05:17] *** jrtayloriv joined
[05:21] *** finanalyst joined
[05:22] <dukeleto> cognominal: ping!

[05:27] *** zamolxes left
[05:41] *** justatheory joined
[05:45] *** zpmorgan joined
[05:53] *** justatheory left
[05:59] *** synth left
[06:08] *** sm^^^ joined
[06:09] *** Aisling left
[06:18] *** sm` left
[06:30] *** blaze-x left
[06:32] *** yves left
[06:33] *** rfordinal left
[06:40] *** orafu left
[06:40] *** orafu joined
[06:47] *** am0c left
[06:55] <moritz_> good morning

[06:56] <dalek> rakudo: 73a3952 | pmichaud++ | docs/spectest-progress.csv:

[06:56] <dalek> rakudo: spectest-progress.csv update: 436 files, 15497 (71.5% of 21671) pass, 0 fail

[06:56] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/73a3952d0a858cc9e27a2afc402005b5a04bbc95

[06:56] <dalek> rakudo: 8effbb7 | pmichaud++ | docs/announce/2009-09:

[06:56] <dalek> rakudo: Update announcement with spectest results.

[06:56] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/8effbb76af85f1dff0173f7290a16a0a2fb79387

[06:59] *** iblechbot joined
[07:09] *** rfordinal joined
[07:13] *** blaze-x joined
[07:15] *** yves joined
[07:16] *** viklund joined
[07:18] <dukeleto> moritz_: howdy

[07:18] <dukeleto> a good morning (for a release) it is. at least in some timezone

[07:18] <moritz_> dukeleto: oh hai

[07:19] <moritz_> at least for some people ;-)

[07:19] <moritz_> (not a very good morning health-wise for me)

[07:19] <dukeleto> moritz_: blizkost now passes lots of tests (including most of t/base from the perl 5 test suite) : http://leto.net/dukeleto.pl/2009/09/blizkost-is-passing-102-tests.html

[07:20] <dukeleto> moritz_: sorry to hear that.

[07:20] <moritz_> cool

[07:20] <moritz_> never mind, will be fine tomorrow again

[07:20] <jnthn> dukeleto: omg wow

[07:20] <dukeleto> jnthn: there you are :)

[07:21] <jnthn> dukeleto: Just invoking the blizkost exe?

[07:21] <dukeleto> jnthn: i can't seem to do "make blizkost", but parrot ./perl5.pir t/foo.t works

[07:21] <dukeleto> jnthn: see http://github.com/jnthn/blizkost/issues#issue/10

[07:22] <dukeleto> jnthn: as well as "make test"

[07:22] <jnthn> I think the makefile is probably wonky.

[07:22] <moritz_> it is

[07:22] <moritz_> yesterday when a PMC changed, a 'make' didn't update anything

[07:23] <jnthn> aye, I noticed such oddness.

[07:23] <jnthn> Patches welcome...

[07:23] <jnthn> I'll try and fix it in a bit if nobody else does though.

[07:23] <dukeleto> moritz_: oh noes. if I can't trust "make", who *will* I trust ?

[07:23] <jnthn> It's an annoying bug.

[07:24] <dukeleto> moritz_: gmake is also required on FreeBSD  but the Configure.pl doesn't know about that

[07:25] *** donaldh joined
[07:26] <moritz_> the blizkost@exe@ does not depend on any PMCs

[07:27] <dukeleto> that seems not-so-good

[07:28] <moritz_> only "build" (the default target) depends on $(BLIZKOST_GROUP)

[07:28] <jnthn> ah

[07:28] <jnthn> That'd perhaps be why.

[07:28] <moritz_> maybe it would be saner to delegate build to blizkost@exe@

[07:28] <moritz_> and make the latter depend on $(BLIZKOST_GROUP)

[07:29] <dukeleto> jnthn: do you have any comments re: http://github.com/jnthn/blizkost/commit/31c95e946ad3a299c6e1d161d7e4271b041bb938 ?

[07:29] <dukeleto> jnthn: should we use Test::More in the test suite? Test.pm works

[07:30] <jnthn> dukeleto: Hmm, not sure off hand.

[07:30] <jnthn> Basically though, things to keep in mind are:

[07:30] <jnthn> 1) Some tests in whatever are better than no tests at all.

[07:31] <jnthn> 2) While tests for integration with other specific HLLs are OK, we probably want to be doing a bunch of tests from PIR, since this is aimed at being a compat layer for Perl 5 / Parrot, not just Perl 5 / Rakudo.

[07:32] <dukeleto> jnthn: understood. Next up, PIR tests.

[07:33] <jnthn> The real hard debugging task ATM is fixing the segfault I mentioned in http://github.com/jnthn/blizkost/commit/3891cf4896674eb76312392dea5ebf6bff439e83

[07:34] <moritz_> another problem with the Makefile

[07:34] <moritz_> clean:

[07:34] <jnthn> If that can be fixed, then we'll be starting to be useful.

[07:34] <moritz_> 	$(MAKE) $(PMC_DIR) clean

[07:34] <moritz_> shouldn't that be $(MAKE) -C ($PMC_DIR) clean?

[07:34] <moritz_> is the -C option mostly understood by the different make utilities?

[07:35] <jnthn> Not sure - that bit for sure came from the make language shell tool.

[07:36] <moritz_> what it does currently is nonesense

[07:37] <pmichaud> ugh, make_language shell is evil.  :-)

[07:37] <pmichaud> I much prefer rakudo's approach :)

[07:37] <pmichaud> (which avoids the recursive makefiles)

[07:42] <moritz_> oh, now I understand

[07:42] <moritz_> MAKE := make -C

[07:42] <pmichaud> that seems evil also :)

[07:42] <moritz_> that explains a lot

[07:42] <pmichaud> (which is why I didn't use it for rakudo)

[07:43] <pmichaud> also, the make language shell tool depends on Parrot's configure scripts

[07:43] * jnthn popping to Osaka for a bit - back later

[07:45] * pmichaud popping to bed for a bit... back later

[07:46] *** mberends joined
[07:48] <pugs_svn> r28270 | lwall++ | [numeric.t] syntax error 

[07:52] *** hanekomu joined
[07:53] <mberends> Good morning! Aww - I just missed a useful discussion about make. My 􏿽x800.02 worth is that building a Windows Rakudo with the Strawberry toolchain works if mingw32-make is renamed to make. I tried patching build/gen_parrot.pl to accept alternative names for make, as per [particle]++'s suggestion, but so far those builds still fail. The name 'make' is probably hardcoded somewhere down the line. :-(

[07:55] <moritz_> mberends: it seems to me that build/gen_parrot.pl uses whatever parrot uses for $make

[07:56] <moritz_> mberends: at which point does the build fail?

[07:57] *** zamolxes joined
[07:58] *** rbaumer joined
[08:00] <moritz_> mberends: what's the entry for make in parrot/config_lib.pasm

[08:00] <moritz_> s/\\/?/

[08:00] <mberends> moritz_: I'm away from that machine atm, will look again soon. I was trying to work around the parrot/config_lib.pasm:242, which is hardcoded "make"

[08:00] <moritz_> oh.

[08:01] <moritz_> that's a parrot configure bug then

[08:01] <mberends> it seems we need to consider gmake, nmake and mingw32-make as well

[08:01] *** cmv joined
[08:02] <moritz_> afaict config_lib.pasm is generated by parrot's Configure

[08:02] *** cmv left
[08:02] <moritz_> the correct solution is to have it set a proper entry for P0["make"]

[08:03] <moritz_> mberends: shall we take that to #parrot?

[08:03] <mberends> moritz_: sure, and I'll move to the Windows machine with the problem

[08:05] *** cmv joined
[08:11] *** jauaor joined
[08:29] *** klaus_ joined
[08:30] <klaus_> good morning

[08:31] <moritz_> hello

[08:31] <klaus_> the perl6 wiki has problems?

[08:31] <klaus_> some broken links

[08:32] <moritz_> which wiki? there are several :/

[08:32] <klaus_> like: http://www.perlfoundation.org/static/2.14.7.2/html/index.cgi?smop

[08:32] <klaus_> moritz_: perlfoundation

[08:32] *** TopoMorto joined
[08:32] <moritz_> klaus_: ok. Where did you find that link?

[08:32] <klaus_> several wikis, thats bad ;-)

[08:33] <moritz_> aye

[08:33] <moritz_> oh, I see

[08:33] <klaus_> http://www.perlfoundation.org/perl6/index.cgi?#implementations

[08:33] <moritz_> that's *very* bad

[08:33] <moritz_> so all internal links are broken

[08:34] <moritz_> I'll see if I can find somebody to report to

[08:34] <klaus_> moritz_: thanks

[08:35] <sjohnson> hi all

[08:36] <moritz_> hi

[08:36] <sjohnson> hi moritz_ 

[08:37] <sjohnson> been away in India for the last week

[08:37] <sjohnson> missed programming in Perl :]

[08:37] <Matt-W> Morning

[08:39] <sjohnson> hi matt!

[08:47] *** TopoMorto left
[08:59] *** zamolxes left
[09:01] <klaus_> moritz_: you may ask Martin Berends

[09:01] <klaus_> http://www.perlfoundation.org/perl6/index.cgi?action=revision_compare&page_name=perl_6&mode=source&Button=Compare+Revisions&new_revision_id=20090916122503&old_revision_id=20090720163017

[09:03] <moritz_> mberends: feel hilighted

[09:03] <moritz_> mberends: did you replace those links manually, or was that some wiki software hiccup?

[09:22] *** zamolxes joined
[09:22] *** masak joined
[09:22] <viklund> o/ masak

[09:23] <masak> viklund: \o

[09:24] <masak> viklund: thanks to Tene++, I have pretty good db support in Web.pm now. you could check out Squerl if you want.

[09:25] <viklund> nice ;)

[09:25] *** ejs joined
[09:25] <viklund> Squerl?

[09:25] <viklund> as in squirrel?

[09:25] <masak> viklund: it's already sufficiently implemented to start thinking about trying to move November over to it.

[09:25] <masak> viklund: yes, I learned "Squirrel" is one of the pronunciations of "SQL" :)

[09:25] <viklund> masak: sounds good, november really needs some love (features)

[09:26] <masak> and bugfixes...

[09:26] <masak> to be honest, I've sort of been holding out for November (the month).

[09:26] <viklund> yep, but it's still up, I think this is the longest time w/o crash ever!

[09:26] <masak> \o/

[09:26] <masak> stability, here we come!

[09:26] <viklund> otoh I don't know if it has been that much used...

[09:27] <masak> maybe not.

[09:27] <viklund> last change was 88 days ago by lichtkind...

[09:32] <masak> lichtkind++

[09:34] <viklund> btw masak, have you seen lichtkind++ around lately?

[09:34] <viklund> (or anyone else for that matter)

[09:34] <viklund> hmm,

[09:34] <masak> not really.

[09:34] <moritz_> 5 days ago in #perlde

[09:34] <viklund> thx moritz++

[09:34] <masak> FBI finally got to him, huh?

[09:35] <viklund> masak, that was mean

[09:35] <masak> sorry :/

[09:35] <viklund> (but funny)

[09:35] <masak> :)

[09:38] *** dakkar joined
[09:41] <flip913> quit

[09:41] <flip913> sorry

[09:41] <flip913> ESC is not / in IRC

[09:41] <masak> flip913: you can log out anytime, but you can never leave :)

[09:41] <flip913> :wq doesn't work either

[09:42] <moritz_> masak: lol, I just thought exactly the same

[09:42] <flip913> masak: yes, thanks ;-)

[09:42] *** flip913 left
[09:42] <moritz_> then try :x ;-)

[09:43] * mberends asks forgiveness for breaking http://www.perlfoundation.org/perl6/index.cgi

[09:44] <moritz_> mberends: just fix it ;-) did you really change all these links manually?

[09:44] *** rbaumer left
[09:44] <mberends> moritz_: that was a page edit via FireFox. I'd better just undo it.

[09:45] <moritz_> mberends: ok, I thought it was wiki software fail (not quite impossible with socialtext--)

[09:47] <moritz_> reqamst: I see you pushed things to your fork of tufte - just wanted to tell you that you have commit privs to my copy, so you can push directly (IMHO it makes things easier, because I don't have to watch the fork queue)

[09:48] <mberends> moritz_: http://www.perlfoundation.org/perl6/index.cgi reverted

[09:48] <moritz_> mberends++

[09:49] *** azawawi joined
[09:49] <azawawi> hi

[09:49] <masak> o/

[09:50] <azawawi> masak: I finally got my November membership card :)

[09:50] <masak> azawawi: great! viklund++

[09:50] <azawawi> indeed viklund++

[09:50] <viklund> viklund--, it took me 8 days...

[09:51] <moritz_> reqamst: ah, I see you just tested, so never mind

[09:51] <azawawi> viklund: better late than never, viklund++ :)

[09:51] <masak> indeed viklund-- :P

[09:51] <masak> lunch &

[09:51] <moritz_> viklund: if you're happy to hand out your github API key I can make hugme add committers to november

[09:52] <moritz_> hugme: list projects

[09:52] <hugme> moritz_: I know about these projects: json, perl6-examples, proto, svg-matchdumper, svg-plot, temporal-flux-perl6syn, tufte

[09:52] <viklund> moritz_: sounds like a good idea

[09:52] <viklund> once I had lunch

[09:53] *** jauaor left
[09:53] <azawawi> moritz_: could you please add #sdl to your wonderful irc logger? :)

[09:53] <moritz_> azawawi: which network? perl or freenode?

[09:53] <azawawi> moritz_: on perl

[09:53] <azawawi> moritz_ i think let me double check

[09:54] <azawawi> moritz_: yup irc.perl.org

[09:54] *** araujo left
[09:54] <moritz_> viklund: ok, when you're back from lunch you need to /msg me the API token from https://github.com/account and tell me who should have the powers to add new committers

[09:55] *** gfldex left
[09:55] <azawawi> moritz_: many thanks :)

[09:55] <moritz_> azawawi: http://irclog.perlgeek.de/sdl/today at your service - please announce the logs in the channel

[09:56] *** donaldh left
[09:56] <moritz_> (it'll take a day or so to update the index pages, they are heavily cached)

[09:56] <azawawi>  moritz_: cool

[09:56] <azawawi> moritz_++

[10:00] <azawawi> moritz_: done.

[10:00] <azawawi> moritz_: Let the Perl sdl games begin :)

[10:00] <moritz_> ++

[10:02] *** azawawi left
[10:11] *** zamolxes left
[10:14] *** KatrinaTheLamia left
[10:15] *** hanekomu left
[10:16] *** M_o_C joined
[10:18] <moritz_> bah, github seems down

[10:22] *** rbaumer joined
[10:41] *** riffraff joined
[10:41] *** zamolxes joined
[10:43] *** payload left
[10:46] <masak> github had DDoS issues yesterday.

[10:49] *** rfordinal left
[10:52] *** payload joined
[10:53] *** hugme left
[10:53] *** hugme joined
[10:53] <moritz_> hugme: show november

[10:53] <hugme> moritz_: the following people have power over 'november': TimToady, [particle], masak, moritz_, pmichaud, viklund. URL: http://github.com/viklund/november/

[10:54] <masak> moritz_++ hugme++

[10:54] <moritz_> and viklund++

[10:56] <mikehh> rakudo (8effbb7) builds on parrot r41317 - make test PASS / make spectest (up to 28270) FAIL - Ubuntu 9.04 amd64

[10:56] <mikehh> rakudo - t/spec/S05-capture/caps.t - Non-zero wait status: 11 - Parse errors: Bad plan.  You planned 21 tests but ran 19

[10:56] <mikehh> rakudo - it passes ./perl6 t/spec/S05-capture/caps.t however - also

[10:56] <mikehh> rakudo - make t/spec/S05-capture/caps.t fails with the same error (ran both at least 3 times) and note

[10:56] <mikehh> rakudo (8effbb7) builds on parrot r41312 - make test / make spectest (up to 28270) PASS - Ubuntu 9.04 amd64

[10:57] <moritz_> ah, that's a post-1.6 parrot

[10:57] <mikehh> moritz_: yes

[11:01] <masak> another candidate for porting to Perl 6: http://www.yuml.me/diagram/class/samples

[11:01] <masak> I'd like both an offline version and an URL-based web service.

[11:02] <moritz_> once you have an offline version, the URL version is not too hard

[11:05] <moritz_> I've never been much of an UML fan myself

[11:06] <moritz_> but I'd like to have a nice tool for plotting graphs

[11:06] <moritz_> 'dia' (the gnome project) is quite nice, but somehow the graphs it produces are always ugly

[11:11] *** iblechbot left
[11:12] <masak> we talked about over lunch today how there are no sweet-spot FOSS UML makers out there.

[11:12] <masak> there one we've tried are either ugly or unstable.

[11:13] * moritz_ not surprised

[11:17] *** donaldh joined
[11:19] <cognominal>  say eval(  'sub A::t { $_[1]->{a}  };   bless {}, A', :lang<perl5> ).t( { :a<ok> } )

[11:19] <cognominal> rakudo: say eval(  'sub A::t { $_[1]->{a}  };   bless {}, A', :lang<perl5> ).t( { :a<ok> } )

[11:19] <p6eval> rakudo 8effbb: OUTPUT«Method 't' not found for invocant of class 'Nil'␤»

[11:21] *** cdarroch joined
[11:29] *** Mimir joined
[11:31] <Mimir> Hello, I don't know much Perl 6 but I'd like to contribute to the development process. How can I help?

[11:32] <moritz_> Mimir: hello and welcome to Perl 6

[11:32] <moritz_> Mimir: what are your skills? what would you like to do?

[11:32] <moritz_> we need people who write applications and libraries, people who write tests, websites, compilers, documentation, ....

[11:33] <moritz_> art work, good ideas - there's nothing we can't need ;-)

[11:33] <Mimir> Well, I know Perl 5, Haskell, and some C. How about tests? What's the right way to go about that? 

[11:34] <moritz_> http://perlmonks.org/?node_id=780001 here KyleHa describes his experience with adding tests

[11:34] *** mikehh left
[11:35] <Mimir> Okay, thanks.

[11:35] <moritz_> if you want to write tests, you need a commit bit for the repository where the tests live

[11:35] <moritz_> if you tell (or /msg) me your email address, I can give you access

[11:36] <Mimir> [email@hidden.address]
[11:36] <moritz_> Mimir: you should get mail within the next few minutes

[11:37] <Mimir> Got it! Very good, very good.

[11:37] <moritz_> you can obtain the test suite with 'svn checkout http://svn.pugscode.org/pugs'

[11:37] *** synth joined
[11:37] <moritz_> it's a custom to add your name to the AUTHORS file to test your commit bit

[11:39] <Mimir> Guess I'll have to learn how to use SVN first, heh.

[11:39] <moritz_> aye, but it's not much that you need most of the time

[11:39] <Mimir> Works for me.

[11:46] *** Mimir left
[11:50] *** riffraff left
[11:53] *** hugme left
[11:54] *** hugme joined
[11:58] *** charsbar joined
[11:58] <dalek> rakudo: 4de8215 | (Martin Berends)++ | src/builtins/globals.pir:

[11:58] <dalek> rakudo: [builtins/globals.pir] for ~/.perl6/lib use $HOMEDRIVE$HOMEPATH if $HOME does

[11:58] <dalek> rakudo: not exist (on Windows)

[11:58] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/4de8215e2ac7c8699c791f983aa55eb28f7cda4a

[11:58] *** charsbar left
[11:58] *** charsbar joined
[12:00] *** charsbar_ left
[12:01] *** charsbar left
[12:01] *** charsbar joined
[12:05] *** abra joined
[12:15] *** zamolxes_ joined
[12:20] <viklund> oops, p6ism in p5: for (<>)

[12:20] <viklund> (technically a hybrid)

[12:21] <moritz_> <> is forbidden in Perl 6

[12:21] <moritz_> std: <>

[12:21] <p6eval> std 28270: OUTPUT«===SORRY!===␤Obsolete use of <>; in Perl 6 please use lines() or () instead at /tmp/63lP0ucfnu line 1:␤------> <⏏>␤FAILED 00:02 36m␤»

[12:22] *** zamolxes_ left
[12:30] <viklund> aye

[12:30] <viklund> eject?

[12:30] <moritz_> eject? what do you mean by that?

[12:31] <viklund> or what is that yellow symbol?

[12:31] <viklund> in the std output

[12:31] <moritz_> yes

[12:31] <moritz_> $ echo ⏏ | utf8-dump 

[12:31] <moritz_> \N{EJECT SYMBOL}

[12:31] <viklund> ha

[12:31] <moritz_> very handy ;-)

[12:32] <viklund> utf8-dump, where can I get that?

[12:32] <moritz_> http://perlgeek.de/blog-en/perl-tips/utf8-dump.html

[12:33] <moritz_> no rocket science really

[12:33] <viklund> thx

[12:34] <viklund> well, you need to know it's there

[12:34] <viklund> usually that is the hard part

[12:34] <moritz_> aye

[12:35] * moritz_ doesn't feel sufficiently productive for coding, but maybe it's enough for blogging

[12:36] <moritz_> or maybe I should work on perl6.org instead

[12:38] *** payload left
[12:39] * masak is blogging

[12:39] * Matt-W is trying to focus his mind on his afternoon's task

[12:40] <moritz_> I found blogging much easier when you actually did something you can blog about ;-)

[12:41] *** hanekomu joined
[12:44] *** zamolxes left
[12:45] <Matt-W> moritz_: yes, it is :)

[12:56] <moritz_> ok, I'm working on perl6.org now

[12:56] <moritz_> the idea is to make the design of the sub pages so horrible that others can't stand it and chime in with a better design

[12:58] <arnsholt> Sounds like an excellent plan =)

[12:58] <Matt-W> lol

[12:59] <Matt-W> I'm trying to make a web page piled high with JavaScript work in IE6...

[12:59] <moritz_> make a single XMLHttpRequest which returns a rendered version of that page as .jpg ;-)

[13:02] *** iblechbot joined
[13:04] <Matt-W> lol

[13:04] <Matt-W> thing is all the JavaScript is jQuery stuff

[13:04] <Matt-W> so it's kind of supposed to work

[13:04] *** __ash__ joined
[13:04] <Matt-W> but I think the google earth plugin is causing mischief with its interfaces

[13:04] <masak> man, the use.perl.org main page is ugly. :(

[13:05] <moritz_> oh yes

[13:05] <Matt-W> all of use.perl.org is ugly

[13:05] <moritz_> we should have a use.perl6.org with camelia design and cheerful colors

[13:07] *** saran joined
[13:07] <Matt-W> Hmm

[13:07] <Matt-W> To be honest, I don't like Camelia

[13:07] <saran> Saran is back after studying some perl basics

[13:08] <saran> *perl6

[13:08] <Matt-W> So I'm just going to wince quietly in a corner

[13:08] <Matt-W> saran: welcome back!

[13:09] *** zloyrusskiy left
[13:09] <saran> yesterday was discussing with mask and mberends abt working on ".perl" function which simulates Data::Dumper in Perl 5

[13:09] <diakopter> Camelia might like darker chroma

[13:09] <Matt-W> Yes I saw that

[13:10] <Matt-W> And it currently doesn't handle circular references very well

[13:11] <saran> matt-w . yes . i need to work to find why it hangs while doing circular references

[13:11] <Matt-W> If it's not handling them at all at the moment, I expect it hangs because it keeps following them

[13:12] <diakopter> saran: if you want to see an algorithm that handles reference cycles (and sibling/cousin multiple references) while serializing, see the ToJS.pm I committed to pugs/src/perl6 yesterday

[13:12] <masak> loliblogged: http://use.perl.org/~masak/journal/39639

[13:12] *** hercynium joined
[13:13] <diakopter> it could be optimized a bit by eliminating the stashing of references for items that *aren't* referenced more than once (internally or otherwise)

[13:13] <diakopter> optimized for reading, I mean.

[13:13] <masak> Matt-W: I started out mildly disliking Camelia.

[13:14] *** saran left
[13:14] <Matt-W> masak: I don't mind the concept, I'd just like something that looks a bit more... professional

[13:14] <Matt-W> Awful though that word is

[13:14] <masak> Matt-W: what sold me was watching the hilarious reactions ("childish", "gay", "girly" etc) on Twitter. people clearly need to loosen up.

[13:14] <masak> Matt-W: yes, that was my first reaction, too. not professional enough.

[13:14] <Matt-W> Maybe they do, but we're talking about first impressions

[13:14] <diakopter> it's professionally intended to be counter-culture, I assume.

[13:15] <masak> aye.

[13:15] <Matt-W> And if you're looking at corporate adoption and you say at your workplace let's do this in Perl 65

[13:15] <Matt-W> s/65/6/

[13:15] <diakopter> or 65

[13:15] <Matt-W> And they look at perl6.org and see something that's decorated like a kindergarten, what are they going to say?

[13:15] <Matt-W> Go away and weep because their grey suits aren't colourful enough?

[13:16] <Matt-W> Maybe we can do colourful, I'm not a designer, I just think it needs *something*

[13:17] <diakopter> "our company can't afford to be associated with such counter-culture; our available hiring field would diminish significantly"

[13:17] * Tene points out the django pony.

[13:17] <Tene> masak: i love the blog post.

[13:19] <Tene> masak: have you seen keep? http://conway.rutgers.edu/~ccshan/wiki/blog/posts/Higher-order_shell/keep

[13:19] *** saran joined
[13:20] <saran> Saran : am sorry..my network hangs out often

[13:20] <Matt-W> diakopter: this is unfortunately how companies think :(

[13:20] <moritz_> well, maybe perl6.com should show larry in a suit rather than camelia ;-)

[13:20] * Matt-W likes Strawberry Perl, maybe we just need a really nice big Camelia

[13:20] <diakopter> django pony: ok, the distinction there in manager-think is between a "technology/product" and a "language/platform".  Generally, commitments to the latter are seen as much more binding than commitments to instances of the former, regardless of whether the perceived classificiation is "correct" or whether the distinction is even valid to any granularity.

[13:21] <Matt-W> I'd say a designer, but preferably not the ones who did my employer's new look

[13:21] <diakopter> syntaxes and compilers are still seen as much darker magic than apis and runtimes.

[13:22] <masak> Tene: thank you. no, haven't seen keep.

[13:22] * masak checks it out

[13:22] <moritz_> diakopter: well, in a sense they are ;-)

[13:22] <Tene> masak: the description is on this page: http://conway.rutgers.edu/~ccshan/wiki/blog/posts/Higher-order_shell/

[13:22] *** snearch joined
[13:23] <masak> looks like a good starting point for tote. :)

[13:23] <diakopter> moritz_: yeah, usually, I know. :) but sometimes I let myself deludedly forget :P

[13:23] * hercynium is trying to figure out if his memory of Python formerly having a cartoonish logo is correct

[13:23] <diakopter> green viper?

[13:23] <Tene> masak: the gf has a couple of sketches that you asked for, and is going to scan them and finish them sometime soon, just is busy with school.

[13:24] *** SmokeMachine joined
[13:24] <hercynium> I think it was this: http://www.vanille-media.de/images/python.png

[13:25] <diakopter> --outline-drawings++

[13:25] <saran> masak : i am back today after my office work

[13:25] <hercynium> I'm sure O'Reilly will come up with something suitably "professional" when the time is right

[13:25] <masak> saran: cool.

[13:26] <diakopter> (--outline_drawings++ : appear to decrement, but actually stay neutral :)

[13:26] * hercynium should have put "suitably" in quotes as well :)

[13:26] <moritz_> hercynium: and hold the copyright on it, just like the camel - not what we want

[13:26] <masak> hercynium: ISTR Guido resisted any snake-like mascots for a long time.

[13:26] <hercynium> moritz_: indeed

[13:26] <Matt-W> It's a shame, because the camel is good

[13:26] * Matt-W also likes the onion

[13:27] <pugs_svn> r28271 | moritz++ | [perl6.org] intial layout for menus 

[13:27] <hercynium> however, they probably *will* have their own icon, and people in corporate life will associate it

[13:27] <moritz_> there's nothing wrong with that

[13:27] <moritz_> just like rakudo has its own logo

[13:28] <hercynium> agreed :)

[13:29] <saran> mosak : trying to understand this RT ticket http://rt.perl.org/rt3//Public/Bug/Display.html?id=58922

[13:30] <moritz_> http://moritz.faui2k3.org/tmp/perl6.org.png

[13:32] *** snearch left
[13:32] <masak> saran: are you experimenting with names of misspelling my nick? :)

[13:32] <masak> I'll see you faster if you write 'masak'. :P

[13:33] <moritz_> ma<tab key>

[13:33] <saran> masak : am sorry abt the typo :)

[13:33] <masak> no prob. :)

[13:33] <Matt-W> moritz_: Does Blizkost really come under Perl 6 Compilers?

[13:33] <masak> saran: can I help you in some way?

[13:34] <Matt-W> (game of table tennis) &

[13:34] <moritz_> Matt-W: have fun

[13:34] <moritz_> don't know about blizkost

[13:35] <diakopter> saran: shouldn't that remain stalled until the condition in pmichaud's comment is satisified?  (or help that condition be satisfied?)

[13:35] <saran> masak : give me a minute..lemme understand the RT ticket

[13:35] <masak> diakopter: probably, yes.

[13:36] <masak> diakopter: we're just seeing if we can un-stall it at this point.

[13:37] <diakopter> there are only a couple of options: create a new syntax (like yaml's numbered object IDs) that lets object literals reference other parts of the same object literal expression, or make it statement/phase-oriented

[13:38] <saran> masak : in this oneliner <code> perl6 -e 'my @a = (1); @a[0] := @a; @a.perl' </code> . am more curious abt @a[0] :=@a; # is this equal to @a[0] = @a[0]:@a ? what it does ?

[13:38] <masak> saran: the ':=' is a binding.

[13:38] <masak> saran: it makes @a[0] point to the same memory location as @a.

[13:39] <Matt-W> moritz_: No fun, somebody's having a meeting next to the table tennis table

[13:39] <masak> or, I should say, the same container.

[13:39] <moritz_> diakopter: well, .perl is specced to return perl code. 'do { my $tmp = [1, 2]; $tmp[2] := $tmp } ' would be avalid return value

[13:39] <diakopter> right, I wasn't (at that point) arguing for one or the other option... but the more I think about it, the more I suspect a new self-referencing object literal syntax would be extremely handy

[13:39] <moritz_> Matt-W: :( my next match is on Monday, and I haven't played for months

[13:40] *** cmv left
[13:40] <saran> masak : Ok.. got it. in my words..one of the element in the array holding the parent array memory value ..correct me if i am wrong ?

[13:41] <masak> saran: sounds correct to me.

[13:41] <masak> saran: and thence the circularity.

[13:41] <diakopter> it might be something like relative directory references (. or .., except not dots, or something), or alternatively absolute references with in-expression IDs

[13:42] <diakopter> moritz_: oooohhh!

[13:42] <diakopter> what about this

[13:44] <diakopter> a syntax that allows just a shorthand way of typing what you just wrote... a twigil on a variable that makes it "expression-scoped"... so the do{} isn't necessary

[13:45] <saran> masak : thanks.as u said yesterday am going to check out the function call on src/setting/List.pm, line 42

[13:46] <diakopter> moritz_: my @b = do { my $tmp = [1, 2]; $tmp[2] := $tmp }   becomes   my @b = [1, 2, @=b]   ... or something

[13:46] <masak> saran: yes. it might be useful to know that this is the code that runs when you do .perl on a list.

[13:46] *** punter joined
[13:48] <diakopter> moritz_: or using the relative "level" idea, (so "b" isn't necessary):     [1, 2, @..]

[13:48] <diakopter> (yes, I know I got the sigils incorrect in those examples, but you see my point I hope)

[13:49] <moritz_> well, one could think about it

[13:49] <masak> diakopter: sounds like a cool idea for a syntax-modifying module.

[13:50] <diakopter> masak: but not a cool idea for the STD language?

[13:50] <masak> in my humble opinion, no.

[13:50] <masak> too specialised.

[13:51] *** saran left
[13:52] *** saran joined
[13:52] *** guest1235123 joined
[13:53] *** ruoso joined
[13:53] <diakopter> masak: I'm trying not to sound overly defensive, but when you denigrate the idea so summarily without giving any explanation, how else am I going to sound when I ask, "how is it too specialised?"

[13:55] <masak> diakopter: sorry if I sounded too dismissive. I'll try to motivate my feeling, though in the end it's only a feeling.

[13:56] <masak> in my day-to-day programming, I don't encounter situations where I need to introduce loops in my data structures.

[13:56] <masak> when one does, the feature is perfect, which is why I think it would make a nice module.

[13:56] <diakopter> My motivation is this: self-referencing data structures are extremely common; being able to serialize them declaratively (in-line, non-statement-oriented) without acrobatics would be extremely helpfull.

[13:56] <diakopter> helpful.

[13:56] <diakopter> well there's the difference.

[13:56] <moritz_> Perl 6 programmers try to solve every problem with syntax ;-)

[13:56] <diakopter> you don't deal with those structures

[13:56] <masak> but putting it in core would complicate the language for everyone, with fairly little average gain.

[13:57] *** payload joined
[13:58] <diakopter> honestly, I think it *lessens* the complexity of the language, by making it much more declarative.  There are many occasions where statement-oriented code can be "inlined" more by introducing in-expression relative references.

[13:58] *** punter left
[13:58] <saran> masak : As i am a newbie lemme understand --> how do i iterate over the loops --> http://www.programmersheaven.com/2/Perl6-FAQ-Basics#for 

[13:59] <masak> rakudo: for 1,2,3 -> $value { say $value }

[13:59] <p6eval> rakudo 4de821: OUTPUT«1␤2␤3␤»

[13:59] <masak> saran: like that, basically.

[14:00] <diakopter> masak: (I'm not merely referring to serialization/.perl; I'm talking about source code in general).  Many a programmer has to "refactor" an expression out into several statements just because they have to "predeclare" some reference.

[14:00] <masak> saran: you can also use @array.map, like the code in List.pm does.

[14:01] <masak> diakopter: I hear ya. do you have a very convincing use case?

[14:02] <diakopter> ok.  the serialization of STD.pm's AST.

[14:02] *** zamolxes joined
[14:02] <masak> diakopter: but that can be solved with the do blocks we've been talking about. no need to introduce wholly new syntax.

[14:03] <masak> diakopter: in fact, that's how Data::Dumper does it.

[14:03] <masak> I'd go so far as to say that $root is a great bit more readable than %........

[14:03] <diakopter> that can't solve mutually recursive cycles (indirect cycles).  Also, it doesn't solve multiple references across the tree (that aren't a parent of each other)

[14:04] <masak> why wouldn't it solve mutually recursive cycles?

[14:05] <saran> masak : i cant understand what do u say " @array.map " in List.pm

[14:06] <colomon> rakudo: say atanh(1);

[14:06] <p6eval> rakudo 4de821: OUTPUT«Divide by zero␤»

[14:06] <colomon> rakudo: say atanh(.9);

[14:06] <p6eval> rakudo 4de821: OUTPUT«1.47221948958322␤»

[14:06] <saran> masak : you mean this line " return '[' ~ self.map({ .perl }).join(", ") ~ ']'; "

[14:06] <colomon> rakudo: say atanh(1.1);

[14:06] <masak> saran: yes.

[14:06] <p6eval> rakudo 4de821: OUTPUT«NaN␤»

[14:06] <masak> saran: it says 'self.map' but 'self' here is a List.

[14:07] <colomon> rakudo say atanh(2);

[14:07] <saran> masak : just a little confusion..it is better to clear all small small doubts before getting into the problem

[14:07] <masak> saran: my point is that it's another way to loop over lists, and sometimes it's preferable to 'for'.

[14:07] <masak> saran: oh, definitely.

[14:07] <colomon> rakudo: say atanh(2);

[14:07] <diakopter> Let me revise that negative case to be: a combination of a mutually recursive cycle and cross-tree references.  In the most pathological case, it's just assigning a temporary "named" (or "keyed") variable to each reference in the tree, and then binding all the links afterwards.

[14:07] <p6eval> rakudo 4de821: OUTPUT«NaN␤»

[14:07] *** ssm left
[14:07] <colomon> rakudo: say atanh(3);

[14:08] <p6eval> rakudo 4de821: OUTPUT«NaN␤»

[14:08] <masak> saran: I'd recommend that you approach this by actually writing a test, and then try to make Rakudo pass it. that will probably help in giving the effort a short-term goal.

[14:10] <diakopter> masak: My (perhaps) larger point is that the ability to serialize a data structure as a single expression makes it [have the potential to be] perfectly round-trippable.

[14:10] *** Zloyrusskiy joined
[14:10] <saran> masak : wat do u mean by "writing a test" . you mean simulating the circular reference error

[14:11] *** Zloyrusskiy left
[14:11] <diakopter> saran: type out what you think the output of that test case should be

[14:11] <masak> saran: yes. having a short program that causes the error will help you greatly.

[14:11] <masak> saran: the program in the RT ticket will do.

[14:12] <masak> saran: as I see it, your first task is to make Rakudo not hang. your second task is to make .perl output something sensible that creates such a structure.

[14:12] <saran> masak : yes i am trying to understand the " :=" operator..

[14:12] <masak> saran: have you found S03?

[14:13] <Tene> masak: if we get a good version of fairy-camelia, and get a version of django running on parrot, then we'd have an excuse to make a logo for "Perl 6 on django", the form of which should be obvious. ;)

[14:13] <saran> masak : wat is S03 ?

[14:14] <masak> diakopter: yes, I understand. it's just that I find a some advantages in not intriducing any new syntax at all. Data::Dumper seems not to suffer too much from its way of doing things.

[14:14] <masak> saran: http://perlcabal.org/syn/S03.html

[14:14] <saran> masak : am studying this which may help to understand the ":=" --> http://www.programmersheaven.com/2/Perl6-FAQ-Variables#binding

[14:15] <masak> saran: that might be good. the synopses are the source of all knowledge, though.

[14:16] <masak> Tene: :)

[14:17] <guest1235123> does anyone think a guide to the channel's notation would be helpful? and if so, link in chan topic?

[14:18] <Tene> guest1235123: if it seems like we have significant notation, sure.  It doesn't seem that way to me, but I'm not in a position to effectively judge. :)

[14:18] *** smash joined
[14:18] <smash> hello everyone

[14:18] <Tene> guest1235123: you do want to remember, though, that nearly nobody ever reads the topic.

[14:18] <Tene> HI SMASH

[14:19] *** Zloyrusskiy joined
[14:19] <colomon> Tene: sad to say, it took me about two months to figure out what "afk" meant.  ;)

[14:20] <Tene> colomon: that's very much not specific to this channel... but I don't have any idea what proportion of #perl6 members are new to IRC.

[14:20] *** KyleHa joined
[14:21] <colomon> There probably is a useful generic guide to IRC out there somewhere...

[14:21] <masak> I think the conventions of #perl6 would be a bit difficult to pin down.

[14:21] <masak> people here tend to like to bend notation, adapting it on the fly.

[14:22] <masak> which, come to think about it, is pretty appropriate.

[14:22] <colomon> :)

[14:23] <saran> masak : got understood from the ":=" aka it is alias what we use symbolic references in perl5 by this link http://www.programmersheaven.com/2/Perl6-FAQ-Variables#binding

[14:23] <masak> saran: that's close enough, I think.

[14:24] <masak> saran: in Perl 6, it's called 'binding'.

[14:24] <masak> saran: you can do $a := $b, and then when you change $a, $b will also change.

[14:25] *** justatheory joined
[14:25] <saran> masak : yes..got it clearly. Thanks for the link

[14:26] *** Zloyrusskiy left
[14:31] *** Zloyrusskiy joined
[14:34] <pmichaud> good morning, #perl6

[14:34] <Tene> hi pm

[14:34] <masak> goooooooood morning, pmichaud!

[14:36] <ruoso> bom dia

[14:36] *** nihiliad joined
[14:36] <hercynium> #perl6 is pmichaud's vietnam?

[14:36] <hercynium> ;-)

[14:37] <Matt-W> oh hai pmichaud

[14:37] * hercynium imagines robin williams

[14:37] *** saran left
[14:43] <pmichaud> yes, #perl6 is my personal quagmire :)

[14:43] <diakopter> moritz_: ok, here's a non-syntactic alternative

[14:43] <diakopter> fix { [1,2,$_] }

[14:44] *** Intensity left
[14:44] <diakopter> suggestion courtesy of someone off-channel who can remain anonymous (or not) if they wish :P

[14:44] * masak likes fix

[14:45] <diakopter> now, deriving those fix expressions for complex structures might be tricky.  probably there's some algorithm somewhere for it.

[14:45] <diakopter> for .perl, I mean

[14:46] <masak> I'm having an easier time picturing that fix might blow up for some cases of loopy references, though.

[14:47] *** Psyche^ joined
[14:47] <diakopter> otoh, the syntax I suggested can be considered shorthand for "recursive lets"

[14:49] <colomon> Is there a clean way to combine "when" with a flag?

[14:49] <colomon> Something like    when $in_setup && /blue/ { do something }

[14:50] <colomon> where $in_setup is a Bool?

[14:50] <pmichaud> colomon: what you just wrote should work.

[14:51] <colomon> It won't try to $_ ~~ $in_setup or something like that?

[14:51] <pmichaud> it will actually   $_ ~~ ($in_setup && /blue/)

[14:53] *** Intensity joined
[14:53] <jnthn> o/

[14:54] <colomon> and ~~ Bool is just Bool, and then it does $_ ~~ /blue/ ?

[14:54] <colomon> That's awesome.

[14:54] <moritz_> at surely works for & instead of &&

[14:55] <moritz_> rakudo: given 'foo' { when True && /oo/ { say "bar" } }

[14:55] <p6eval> rakudo 4de821: OUTPUT«bar␤»

[14:55] <moritz_> rakudo: given 'foo' { when True && /oof/ { say "bar" } }

[14:55] <p6eval> rakudo 4de821:  ( no output )

[14:55] <moritz_> rakudo: given 'foo' { when False && /oo/ { say "bar" } }

[14:55] <p6eval> rakudo 4de821:  ( no output )

[14:55] <colomon> woo-hoo!

[14:55] <moritz_> seems to work.

[14:56] <pmichaud> it doesn't thread over &&, if that's what you're asking

[14:56] <pmichaud> it does a normal ($in_setup && /blue/)

[14:56] <moritz_> aye

[14:56] <pmichaud> if $in_setup is false, then the ~~ expression becomes    ~~ False   

[14:57] <moritz_> but /blue/ binds to the correct $_

[14:57] <pmichaud> if $in_setup is true, then we match /blue/ to $_

[14:57] *** klaus_ is now known as muixirt

[14:57] <pmichaud> (which is the default behavior for any regex in boolean context)

[14:57] <moritz_> and ~~ False is always false

[14:57] <moritz_> so everything is fine ;-)

[14:57] <masak> Perl6++

[14:58] *** Patterner left
[14:58] *** Psyche^ is now known as Patterner

[14:59] <colomon> thanks!

[15:01] <jnthn> ooh...a new masakpost! :-D

[15:01] <masak> :)

[15:02] *** alester joined
[15:02] <masak> this iron man thing actually works. nowadays, I have a little mental variable that tells me when I need to blog. mst++

[15:03] <moritz_> aye

[15:04] <TimToady> I blog on twitter once a week or so now :)

[15:04] <jnthn> masak++ # got f**king blogging ;-)

[15:04] <moritz_> actually I think I still have one spare post that's going to be published on time

[15:05] * jnthn didn't quite get dragged into Twitter yet.

[15:05] <pmichaud> I find twirssi to be very helpful for twitter stuff :)

[15:06] <pmichaud> tweets I'm interested in are just another window in my irssi client :)

[15:07] <jnthn> that's a nie way to manage it

[15:07] <jnthn> *nice

[15:07] <jnthn> I guess the real issue is that I didn't convince myself of he value of it yet.

[15:07] <pmichaud> well, since I generally have irssi open anyway, it's easy to just notice activity in the twitter window

[15:08] <pmichaud> in some ways, twitter is like an aggregator for blog comments

[15:09] <masak> no, that's RSS.

[15:09] <pmichaud> I've seen RSS aggregate blog postings, but not the comments :)

[15:10] <viklund> most blogposts have a special rss-feed just for the comments

[15:10] *** agentzh joined
[15:10] <viklund> (or maybe I should say, most bloggingsoftware)

[15:10] <pmichaud> does use.perl have one?

[15:11] <jnthn> I guess maybe I should give twitter a go at some point.

[15:11] <finanalyst> rakudo: my %h= <a b c> Z (1,[2,3,4],5); my @a=2,3,4; say ?(all(%h<b>) == any(@a));my %hs= <a b c> Z (1,[<a b c>],5); my @as=<a b c>; say ?(all(%hs<b>) eq any(@as))

[15:11] <pmichaud> it bugs me that I don't get notices when someone comments on an article I wrote

[15:11] <p6eval> rakudo 4de821: OUTPUT«1␤0␤»

[15:11] <jnthn> I'm afraid of getting too hooked by it.

[15:11] <viklund> dunno

[15:11] <jnthn> Then, I didn't get hooked on Facebook, it's just a useful tool for keeping in touch with various people who prefer to communicate that way...

[15:11] <finanalyst> pmichaud: junctions with eq seems to have stopped working

[15:12] <__ash__> my twitter account is um... dead, it gets update from an iphone app that records how long my jogs are and thats all thats on my twitter account right now

[15:12] <viklund> doesn't look like it

[15:12] <pmichaud> rakudo:    say (any(<3 4 5>) eq 4).perl

[15:12] <p6eval> rakudo 4de821: OUTPUT«any(Bool::False, Bool::True)␤»

[15:12] <finanalyst> rakudo: my %h= <a b c> Z (1,[2,3,4],5); my @a=2,3,4; say ?(all(%h<b>) == any(@a));my %hs= <a b c> Z (1,[<a b c>],5); my @as=<a b c>; say ?(all(%hs<b>) eq any(@as))

[15:13] <p6eval> rakudo 4de821: OUTPUT«1␤0␤»

[15:13] <finanalyst> should both be 1 

[15:13] <finanalyst> it used to work

[15:14] <pmichaud> rakudo:  my @as = <a b c>;  say [<a b c>] eq @as;

[15:14] <p6eval> rakudo 4de821: OUTPUT«1␤»

[15:14] <pmichaud> rakudo:  my %hs = ('b', [<a b c>]);  say %hs.perl;

[15:14] <p6eval> rakudo 4de821: OUTPUT«{"b" => ["a", "b", "c"]}␤»

[15:14] <masak> no parens needed. :)

[15:14] <pmichaud> rakudo:  my %hs = ('b', [<a b c>]);  my @as = <a b c>;  say %hs<b> eq @as;

[15:14] <p6eval> rakudo 4de821: OUTPUT«1␤»

[15:15] <pmichaud> oh, yes, of course

[15:15] <pmichaud> Rakudo is giving the correct output.

[15:15] <pmichaud> oh, wait, maybe not.

[15:15] <pmichaud> rechecking.

[15:16] <colomon> ooo, just got burned by using $1 instead of $0.  

[15:16] <finanalyst> rakudo: my @x=<a b c>; say ?(all(@x) eq any(<a b c>))

[15:16] <p6eval> rakudo 4de821: OUTPUT«1␤»

[15:16] <pmichaud> rakudo:  my %hs = ('b', [<a b c>]);  my @as = <a b c>;  say all(%hs<b>) eq any(@as);

[15:16] <p6eval> rakudo 4de821: OUTPUT«all(any(Bool::False))␤»

[15:16] <pmichaud> rakudo:  my %hs = ('b', [<a b c>]);  my @as = <a b c>;  say all(%hs<b>.list) eq any(@as);

[15:16] <p6eval> rakudo 4de821: OUTPUT«all(any(Bool::True, Bool::False), any(Bool::False, Bool::True), any(Bool::False, Bool::True))␤»

[15:17] <pmichaud> all(%hs<b>)  consists of a single element

[15:17] <cognominal> jnthn,  probably, I don't know HLLCompiler well enough, but I don't know yet how to use load_library in blizkost?

[15:17] <finanalyst> but when the elements are integers not strings, the junction flattens

[15:17] <pmichaud> no, it becomes 3

[15:18] <pmichaud> here.

[15:18] <pmichaud> rakudo:  my %hs = ('b', [<a b c>]);  say all(%hs<b>).perl

[15:18] <p6eval> rakudo 4de821: OUTPUT«all(["a", "b", "c"])␤»

[15:18] <finanalyst> rakudo: my %h= <a b c> Z (1,[2,3,4],5); my @a=2,3,4; say ?(all(%h<b>) == any(@a))

[15:18] <p6eval> rakudo 4de821: OUTPUT«1␤»

[15:18] <pmichaud> note that it's   all(["a", "b", "c"]) and not  all("a", "b", "c")

[15:19] <pmichaud> so the request of using eq  becomes a test for   "a b c" eq "a" || "a b c" eq "b" || "a b c" eq "c"

[15:19] <pmichaud> here, watch this way

[15:19] <jnthn> cognominal: See what use impl does in Rakudo

[15:20] <pmichaud> rakudo: my %h= <a b c> Z (1,[7,8,9],5); my @a=7,8,9; say ?(all(%h<b>) == any(@a))

[15:20] <p6eval> rakudo 4de821: OUTPUT«0␤»

[15:20] <pmichaud> correct.

[15:20] <jnthn> cognominal: But basically, it takes some params and hands back a hash.

[15:20] <cognominal> impl?

[15:20] <jnthn> implementation

[15:20] <KyleHa> rakudo: class A { has @.a; method empty { @.a = () }; A.new.empty;

[15:20] <p6eval> rakudo 4de821: OUTPUT«Unable to parse block; couldn't find final '}' at line 2, near ""␤in Main (src/gen_setting.pm:3469)␤»

[15:20] <pmichaud> finanalyst: figured it out yet?

[15:21] <KyleHa> rakudo: class A { has @.a; method empty { @.a = () }; }; A.new.empty;

[15:21] <p6eval> rakudo 4de821: OUTPUT«Cannot assign to readonly variable.␤in method A::empty (/tmp/ymny7wpRiy:2)␤called from Main (/tmp/ymny7wpRiy:2)␤»

[15:21] *** rfordinal joined
[15:22] <finanalyst> pmichaud: nope. i had a similar line in code that was working. I have returned to it and it stopped working

[15:22] *** mspaulding joined
[15:23] <muixirt> where is the separation of statements with semicolons specced?

[15:23] <pmichaud> finanalyst: well, perhaps Rakudo was broken before.  But all of the examples above look correct to me.

[15:23] <finanalyst> \action thinking

[15:23] <pmichaud> muixirt: S04, I think.

[15:24] <pmichaud> I'm not sure it's "specced" beyond the information about statement-ending blocks in S04.

[15:24] <masak> it doesn't seem to be.

[15:24] <masak> it's just taken to be the same as in Perl 5, I guess.

[15:25] <finanalyst> rakudo: my %h= <a b c> Z (1,[7,8,9],5); my @a=7,8,9; say ?(all(%h<b>) == any(@a))

[15:25] <p6eval> rakudo 4de821: OUTPUT«0␤»

[15:25] <finanalyst> rakudo: my %h= <a b c> Z (1,[2,3,4],5); my @a=2,3,4; say ?(all(%h<b>) == any(@a))

[15:25] <p6eval> rakudo 4de821: OUTPUT«1␤»

[15:25] *** cmv joined
[15:25] <pmichaud> rakudo: my %h= <a b c> Z (1,[7,8,9],5); my @a=2,3,4; say ?(all(%h<b>) == any(@a))

[15:26] <p6eval> rakudo 4de821: OUTPUT«1␤»

[15:26] <TimToady> muixirt: and S03, and STD

[15:26] <pmichaud> because   all([7,8,9]) == any(2,3,4)

[15:27] <pmichaud> (because +[7,8,9] == 3)

[15:27] <muixirt> TimToady: a semicolon is an operator?

[15:27] <TimToady> kinda

[15:27] <finanalyst> pmichaud: I am really getting lost here

[15:28] <TimToady> "sequencer" precedence

[15:28] <pmichaud> finanalyst: in numeric context, all([7,8,9])  is the same as all(3)

[15:28] <TimToady> same as feed operators

[15:28] *** ms111 left
[15:28] <finanalyst> ah now I see. Not intuitive!

[15:29] <pmichaud> so the correct way to get what you want is   all(@%h<b>)

[15:29] <finanalyst> how then to flatten [7,8,9] to 7,8,9?

[15:29] <pmichaud> however, Rakudo doesn't have the prefix @ yet, so the workaround is   all(%h<b>.list)

[15:29] <finanalyst> crossed msgs

[15:29] <TimToady> std: all(@%h<b>)

[15:29] <p6eval> std 28271: OUTPUT«===SORRY!===␤Anonymous variable requires declarator at /tmp/PzW11pYAfA line 1:␤------> all(@⏏%h<b>)␤    expecting twigil␤FAILED 00:02 37m␤»

[15:30] <TimToady> std: all(@(%h<b>))

[15:30] <pmichaud> although I think that @(%h<b>) works

[15:30] <p6eval> std 28271: OUTPUT«Potential difficulties:␤  Variable %h is not predeclared at /tmp/J9ysZUvmTW line 1:␤------> all(@(%h⏏<b>))␤ok 00:03 37m␤»

[15:30] <pmichaud> rakudo:   my %h = 'b', <7 8 9>;   say all(@(%h<b>)).perl

[15:30] <p6eval> rakudo 4de821: OUTPUT«all("7")␤»

[15:30] *** Zloyrusskiy left
[15:30] <pmichaud> oops

[15:30] <pmichaud> rakudo:   my %h = 'b', [<7 8 9>];   say all(@(%h<b>)).perl

[15:30] <p6eval> rakudo 4de821: OUTPUT«all("7", "8", "9")␤»

[15:30] <pmichaud> there.

[15:30] <finanalyst> thank you!!!

[15:31] <TimToady> rakudo:   my %h = 'b', [<7 8 9>];   say all(%h<b>.values).perl

[15:31] <p6eval> rakudo 4de821: OUTPUT«all("7", "8", "9")␤»

[15:32] *** drbean_ joined
[15:32] *** drbean_ left
[15:33] <finanalyst> .values makes it more understandable

[15:33] <phenny> AttributeError: 'NoneType' object has no attribute 'startswith' (file "/var/www/inamidst.com/htdocs/phenny/modules/validate.py", line 15, in val)

[15:33] <jnthn> oh noes phenny is has a fail

[15:34] <finanalyst> .oh noes

[15:34] <pmichaud> ".py" ??

[15:34] <pugs_svn> r28272 | kyle++ | [t/spec] Test for RT 69192 

[15:34] <finanalyst> blasphemy!

[15:34] <TimToady> nah, just crudity

[15:35] <pmichaud> mail [email@hidden.address] -s "[BUG]  phenny appears to be written in Python"

[15:35] <pmichaud> mail [email@hidden.address] -s "[TODO]  Implement 'use Python'"

[15:36] <TimToady> .oO(pmichaud is a stand-up camelian)

[15:36] <pmichaud> I'm often accused of changing my colors.

[15:36] *** drbean_ joined
[15:37] *** mspaulding left
[15:37] <Tene> pmichaud: I can bump HLL interop support for pynie higher on my task list if you'd like.

[15:38] <pmichaud> Tene: that's okay, I won't be needing it anytime soon.  

[15:38] *** iblechbot left
[15:38] <pmichaud> I have to get some grammar engine work done first

[15:39] *** mspaulding joined
[15:39] <jnthn> yay!

[15:39] <jnthn> pmichaud: Does PGE have contextual var decls yet?

[15:39] <masak> \o/

[15:39] <pmichaud> jnthn: not yet

[15:40] <masak> is there a Rakudo release today?

[15:40] <pmichaud> particle++ is release manager for today

[15:40] <masak> [particle]++

[15:40] *** rfordinal left
[15:41] <pmichaud> jnthn: I'm likely to do protoregexes this next week, then contextuals and lexicals after that

[15:41] <pmichaud> today/tomorrow I have to do $otherjob stuff :-(

[15:41] <jnthn> oh, re-ordering?

[15:41] <jnthn> It worked out better that way?

[15:42] <pmichaud> well, I'd like NQP to be parsing regexes, using something similar to the way STD.pm parses regexes

[15:42] <pmichaud> so in order for that to happen I really need protoregexes

[15:42] <jnthn> aha, OK.

[15:42] <jnthn> Sounds sane.

[15:42] * jnthn looks forward to it

[15:43] * masak also

[15:43] <TimToady> jnthn: http://www.programmersheaven.com/2/Perl6-FAQ-Variables#binding is now wrong on the subject of ::=

[15:43] <colomon> pmichaud: Still looking at the Perl Foundation address after my bounce from their Oregon address -- their contact page has a "Grand Ledge, MI" address.

[15:43] <Tene> pmichaud: you expect to need python support for something?  for what?

[15:43] <pmichaud> then when NQP is parsing regexes, I can add the contextual declarations to NQP's parser much more straightforwardly than trying to add it to PGE's current regex parser

[15:43] <jnthn> pmichaud: OK, makes sense from an efficiency POV.

[15:43] <pmichaud> Tene: I was making a funny earlier

[15:43] <Tene> pmichaud: Ah, right. ><

[15:44] <pmichaud> jnthn: also, protoregexes are the outstanding item on my Hague grant

[15:44] * Tene still waking up... slowly.

[15:44] <jnthn> TimToady: I need to give that FAQ a good look over generally for spec movements...it's not really kept up.

[15:44] <pmichaud> I think I might fix := and ::= for Rakudo day this next week

[15:44] *** drbean left
[15:45] *** hercynium left
[15:45] *** jferrero joined
[15:45] <masak> great times ahead, it seems.

[15:46] <jnthn> Yeah!

[15:46] <jnthn> I'm liking this month.

[15:46] <jnthn> :-)

[15:48] <Tene> It looks like my life might be starting to settle down soon, hopefully...

[15:48] *** ejs left
[15:49] <Tene> masak: I heard you got squirrel working well... just with sqlite, or does it have mysql support too

[15:49] *** am0c joined
[15:49] <Tene> ?

[15:49] <masak> Tene: it had a name change for starters. it's now known as Squerl. :)

[15:49] <masak> Tene: it uses your SQLite3 module.

[15:50] <masak> no MySQL support yet. would be nice to have that too.

[15:50] <masak> will blog about it tomorrow.

[15:51] <masak> right now I'm mostly porting and passing tests from Sequel. I would blog today, but I want a few more tests before I do.

[15:51] <jnthn> Awww...squirrel was a cute name.

[15:51] *** mspaulding left
[15:52] <masak> it still sounds the same. :)

[15:52] <TimToady> rhymes with Perl

[15:54] <Tene> masak: i can download from your github repo, yes?

[15:54] <masak> aye.

[15:55] <masak> I'm currently filling up t/squerl/02-dataset.t... slowly.

[15:55] <Tene> oh, it's in web

[15:55] <masak> yes.

[15:56] <masak> it would be nice if tote were already written at this point, then I would have used it for writing and passing tests. :)

[15:56] <Tene> Yay, github crashing again!

[15:56] <masak> they're being DDoSed. :/

[15:56] <Tene> orly?

[15:56] * dukeleto says "screw you" to the lamers DDoS'ing github

[15:57] <masak> Tene: http://twitter.com/github/status/4056522781

[15:58] <masak> yes, it seems really meaningless. why would anyone want to DDoS github?

[15:58] <guest1235123> Squerl, pronounced like an Amerkin would? I like.

[15:58] *** guest1235123 left
[15:59] <dukeleto> masak: perhaps they hate freedom and/or free software

[15:59] <masak> dukeleto: :)

[16:01] <sjohnson> hi TimToady !

[16:01] <sjohnson> back from India

[16:01] <masak> o/ sjohnson

[16:01] <sjohnson> hi masak too

[16:01] <sjohnson> :)

[16:01] <masak> how was India?

[16:02] <sjohnson> surprisngly a lot of fun

[16:02] <sjohnson> didnt thin i'd have so much fun in a 3rd world country

[16:03] <sjohnson> think

[16:03] <masak> nice to hear.

[16:03] <masak> India does seem an interesting country.

[16:05] <Tene> masak: "Apparently the attackers are targeting a specific project on GitHub" -- http://twitter.com/github/status/4034616135

[16:05] *** araujo joined
[16:05] <dukeleto> Tene: yeah, that is really lame

[16:06] *** mspaulding joined
[16:06] <masak> still -- I wonder which project, and why.

[16:06] <Tene> Me too.

[16:06] <araujo> hello

[16:07] <dukeleto> araujo: good localtime()

[16:07] <masak> araujo: \o

[16:07] <araujo> hi dukeleto masak 

[16:07] <araujo> :)

[16:08] *** Zloyrusskiy joined
[16:08] *** Zloyrusskiy left
[16:10] <colomon> rakudo: acosh(-1)

[16:10] <p6eval> rakudo 4de821:  ( no output )

[16:10] <colomon> rakudo: say acosh(-1)

[16:10] <p6eval> rakudo 4de821: OUTPUT«NaN␤»

[16:13] <dukeleto> rakudo: say acosh(NaN)

[16:13] <p6eval> rakudo 4de821: OUTPUT«NaN␤»

[16:13] <masak> food &

[16:13] *** masak left
[16:14] *** rfordinal joined
[16:16] <colomon> cosh on reals has to be positive, so acosh of a negative is NaN.  Makes perfect sense.  :) 

[16:17] *** jferrero left
[16:19] <dukeleto> colomon: indeed

[16:19] <colomon> I'm still feeling through these things while I work on the trig tests. 

[16:19] <dukeleto> colomon: i wrote most of the tests dealing with NaN in t/spec, if you have questions, let me know

[16:20] <colomon> Ooo, hey, I do have one.

[16:20] <dukeleto> rakudo: say acosh(Inf)

[16:20] <p6eval> rakudo 4de821: OUTPUT«Inf␤»

[16:20] *** abra left
[16:20] <colomon> Okay, two, actually.  I don't think you wrote any tests for Inf and inverse functions?

[16:21] *** ejs joined
[16:21] <dukeleto> that may be wrong. since lim( cosh(x) ) = Inf as x -> +- Inf, it is not a one-to-one function there and acosh(Inf) should probably be NaN

[16:21] <dukeleto> i need more coffee to make be sure

[16:22] <dukeleto> colomon: I just did :)

[16:22] <dukeleto> colomon: yes, it looks like the inverse functions don't know that Inf is special

[16:22] <dukeleto> rakudo: say acosh(-Inf)

[16:22] <p6eval> rakudo 4de821: OUTPUT«NaN␤»

[16:22] <dukeleto> ok, that is good

[16:24] <jnthn> sleeep

[16:25] <dukeleto> colomon: perl 5's Math::Complex says that acosh(Inf) = inf (not sure I buy that) and I just found a bug when you try to do acosh(-Inf): Math::Complex::make: Cannot take real part of '-Inf'

[16:26] <colomon> Are you saying you turned up a Perl 5 bug?  :)

[16:26] <dukeleto> colomon: in general, any function where multiple input values map to the same output value, the inverse function at that point should return NaN

[16:26] <dukeleto> colomon: looks like it. fun fun

[16:27] *** cognomore joined
[16:27] <colomon> dukeleto: that can't be right, that would blow the heck out of the normal inverse trig functions

[16:27] <dukeleto> colomon: i am not talking about periodic functions

[16:27] <dukeleto> that i should have clarified

[16:27] <colomon> so any non-periodic functions where multiple input values map to the same output should be NaN.

[16:28] <colomon> that makes sense, I suppose.

[16:28] <colomon> My first question, which got sidetracked:

[16:28] <dukeleto> the inverse function at that point should be NaN, that is.

[16:29] <dukeleto> colomon: so basically, this means the hyperbolics, or to say in another way, the exponentials and logs

[16:29] <colomon> only an issue with cosh, isn't it? (he said, looking at the graphs of the hyperbolic functions)

[16:30] <dukeleto> colomon: sech(x) is an even function as well

[16:30] <dukeleto> colomon: this happens with even functions on the real line

[16:30] <colomon> ah, yes, nearly invisible on the graph I was looking at.  

[16:31] <colomon> dang it, I can't find the number I was looking at in the log.

[16:31] <colomon> rakudo: say atanh(1)

[16:31] <p6eval> rakudo 4de821: OUTPUT«Divide by zero␤»

[16:31] <colomon> That's it.

[16:31] <colomon> rakudo: say atanh(1.1)

[16:31] <p6eval> rakudo 4de821: OUTPUT«NaN␤»

[16:31] <colomon> atanh is NaN if x > 1, divide by zero if x == 1

[16:32] <colomon> I'm think it should be NaN if x >= 1

[16:33] *** lionWrk joined
[16:33] <dukeleto> colomon: they both are forms of "NaN", just that one is loud and one is quiet. Dividing directly by zero usually seems to trigger an exception, where doing other non-sensical things gives you a NaN value

[16:33] <dukeleto> colomon: you may want to ask TimToady what he wants

[16:33] *** lionWrk is now known as LionMadeOfLions

[16:33] <pmichaud> yes, I'm wondering if returning a failure is actually more correct here

[16:34] <pmichaud> just like divide by zero should return a failure

[16:34] <dukeleto> pmichaud: you mean a Failure exception object thingy ?

[16:34] <pmichaud> yes

[16:34] <__ash__> ruby makes a distinction between Nan and runtime errors like division by zero, btw

[16:34] <dukeleto> pmichaud: see, you *are* interested in ieee754-2008 ;)

[16:35] *** rfordinal left
[16:35] <pmichaud> in particular,   my $a = 3 / 0;   should not throw an exception

[16:35] <colomon> I'd be okay with that (though there'd be tests to be rewritten :) ) as long as the failure is consistent for atanh(1) and atanh(1.1).

[16:35] <dukeleto> __ash__: the perl 6 spec says that you should be able to lexically define how NaN's are propagated (quiet or signalling)

[16:35] <colomon> pmichaud: Actually, 3 / 0 returns a valid Rat.

[16:36] <pmichaud> okay,   3.0 / 0 then

[16:36] <colomon> rakudo: my $a = 3 / 0; say $a.perl;

[16:36] <dukeleto> rakudo: say 3.0 / 0

[16:36] <p6eval> rakudo 4de821: OUTPUT«1/0␤»

[16:36] <p6eval> rakudo 4de821: OUTPUT«Divide by zero␤»

[16:36] <dukeleto> rakudo: say 3/0

[16:36] <p6eval> rakudo 4de821:  ( no output )

[16:36] <__ash__> dukeleto: ah, got ya, makes sense

[16:36] <pmichaud> rakudo:   my $a = 3.0 / 0;

[16:36] <p6eval> rakudo 4de821: OUTPUT«Divide by zero␤»

[16:36] <pmichaud> rakudo is wrong there.

[16:37] <pmichaud> (I tried fixing it once but ran into a few issues so saved it for another day)

[16:37] <pmichaud> note that    "say 3.0 / 0"  *does* throw an exception

[16:37] <pmichaud> because we're then trying to take the value of a Failure, which throws its associated exception

[16:38] <dukeleto> pmichaud: so you mean, if you attempt to stringify a Failure, it croaks ?

[16:38] <pmichaud> if the Failure has been unhandled, yes.

[16:38] <pmichaud> er, has not been handled

[16:39] * dukeleto thinks about being unhandled

[16:39] *** zamolxes left
[16:40] <pmichaud> S04:  "If you test a C<Failure> for C<.defined> or C<.true>, it causes C<$!>

[16:40] <pmichaud> to mark the main exception as I<handled>; the exception acts as a

[16:40] <pmichaud> relatively harmless undefined value thereafter.  Any other use of the

[16:40] <pmichaud> C<Failure> object to extract a normal value will throw its associated

[16:40] <pmichaud> exception immediately.

[16:41] *** jauaor joined
[16:41] <jauaor> :)

[16:41] *** iblechbot joined
[16:41] <pmichaud> afk, errands

[16:44] <colomon> rakudo: say acosh(0)

[16:44] <p6eval> rakudo 4de821: OUTPUT«NaN␤»

[16:44] <colomon> rakudo: say acosh(1)

[16:44] <p6eval> rakudo 4de821: OUTPUT«0␤»

[16:49] *** finanalyst left
[16:54] <colomon> masak: "tote" == "Totally Obsessive TDD Environment" ?

[16:55] *** agentzh left
[16:55] *** zaphar_p2 joined
[16:57] *** kidd_ joined
[16:58] *** jrtayloriv left
[17:00] *** saran joined
[17:01] *** zostay left
[17:02] *** zostay joined
[17:03] *** desertm4x joined
[17:04] <moritz_> [particle]: how's the release going?

[17:04] <moritz_> (or when?) ;-)

[17:07] *** zaphar_ps left
[17:09] *** sevvie left
[17:20] <colomon> dukeleto: re multiple input values mapping to one output value -- cosh graphs a parabola-style shape, with cosh(x) == cosh(-x).  by your argument, acosh should only be defined for 1.  Presumably it is actually defined to take the positive branch of the function, and therefore acosh(Inf) = Inf is perfectly reasonable.  

[17:21] *** __ash__ left
[17:24] *** jrtayloriv joined
[17:28] *** saran left
[17:39] *** abra joined
[17:48] *** pmurias joined
[17:49] <pmurias> diakopter: what i think would be a very cool thing would be to have a debugger/tracer for vivjs which would highlight the exact bit of code that is executed

[17:50] <pmurias> as the AST you are executing has a direct mapping to places in source code

[17:51] <diakopter> pmurias: that would be cool...

[17:51] <diakopter> like a dynamic edition of that std-highlight webpage form thing

[17:51] <pmurias> yes, something like that

[17:54] <diakopter> moritz_: is /msg p6eval anything_not_matching_prefixes supposed to try [and fail] to call STD_syntax_highlight

[17:57] <pmurias> diakopter: it's not supposed to fail

[17:58] <pmurias> the path in the evalbot is incorrect

[17:58] <diakopter> o

[17:59] <pmurias> it moved to STD_highlighy

[17:59] <pmurias> s/y/t/

[17:59] <pmurias> std_highlite actually

[18:00] *** reqamst left
[18:00] *** smash left
[18:00] <TimToady> std: say "howdy $world"

[18:00] <p6eval> std 28272:  ( no output )

[18:00] <diakopter> std: "$world"

[18:01] <p6eval> std 28272:  ( no output )

[18:01] *** sm` joined
[18:02] <TimToady> std: say "howdy $world"

[18:02] <p6eval> std 28272:  ( no output )

[18:02] <TimToady> grrr

[18:02] <sjohnson> uh oh

[18:02] <TimToady> std: 42

[18:03] <p6eval> std 28272: OUTPUT«ok 00:02 37m␤»

[18:03] <TimToady> std: say "howdy $world"

[18:03] <p6eval> std 28272:  ( no output )

[18:03] <TimToady> probably not giving it enough time to recalculate the "" grammar, but that ought to be cached already, y'd think

[18:04] <sjohnson> it's because it knows that $world will be "world" anyway

[18:04] <sjohnson> DOES NOT COMPUTE

[18:04] *** abra left
[18:04] <TimToady> std: say "howdy $IO-monad"

[18:05] <p6eval> std 28272: OUTPUT«Potential difficulties:␤  Variable $IO-monad is not predeclared at /tmp/SlySsoyROO line 1:␤------> say "howdy $IO-monad⏏"␤ok 00:04 38m␤»

[18:05] <TimToady> that was the problem :)(

[18:05] * TimToady tries to figure out what his typo smiley means...

[18:05] *** rbaumer left
[18:05] <TimToady> a grimace, perhaps

[18:06] *** sm^^^ left
[18:06] <TimToady> diakopter: see ^^

[18:07] *** sjohnson sets mode: +v p6eval

[18:07] *** ejs left
[18:13] *** cmv left
[18:19] <diakopter> std: "HOWDY $WORD STOP"

[18:19] <p6eval> std 28272:  ( no output )

[18:20] *** he_ left
[18:20] <diakopter> cornfusion

[18:20] *** he_ joined
[18:21] *** stephenlb joined
[18:21] <diakopter> std: "howdy $IO-monad"

[18:21] <p6eval> std 28272:  ( no output )

[18:22] <diakopter> std: say "howdy $IO-monad"

[18:22] <p6eval> std 28272:  ( no output )

[18:24] <diakopter> std: say "","howdy $IO-monad"

[18:24] <p6eval> std 28272: OUTPUT«Potential difficulties:␤  Variable $IO-monad is not predeclared at /tmp/IiQXrPPXE4 line 1:␤------> say "","howdy $IO-monad⏏"␤ok 00:04 39m␤»

[18:26] *** bloonix_ left
[18:26] *** bloonix joined
[18:26] *** he_ left
[18:27] *** he_ joined
[18:30] *** _jaldhar joined
[18:31] *** jaldhar left
[18:34] *** bloonix left
[18:38] *** sjohnson left
[18:38] <pugs_svn> r28273 | fglock++ | [mp6] Javascript emitter and runtime updates - grammar works  

[18:40] *** sjohnson joined
[18:41] <diakopter> rakudo: say("Meesa »ö«")

[18:41] <p6eval> rakudo 4de821: OUTPUT«Meesa »ö«␤»

[18:41] <diakopter> pugs: say("Meesa »ö«")

[18:41] <p6eval> pugs: OUTPUT«Meesa »ö«␤»

[18:46] <pugs_svn> r28274 | lwall++ | [STD] don't record null nibbles unless whole string is '' 

[18:46] <pugs_svn> r28274 | [viv] handle bracketing quotes correctlier

[18:46] <diakopter> two for the price of 1

[18:46] * diakopter reluctantly types `make`

[18:47] <diakopter> I mean, excitedly.

[18:53] <jrtayloriv> Is it OK if I move the <ws> rule of a grammar to the bottom, following all of the places where it is used? Or is using a rule/token similar to C functions, in that I must declare it somehow before I use it?

[18:53] *** azawawi joined
[18:54] <TimToady> it's like methods, so it doesn't matter what order you declare them

[18:54] <jrtayloriv> And it's location in the source make any semantic difference at all?

[18:54] <jrtayloriv> TimToady, thanks

[18:54] <TimToady> in fact, in STD it's not just *like* methods, it *is* mehtods

[18:54] <TimToady> *methods

[18:55] <TimToady> rakudo too, these days

[18:55] <colomon> rakudo: say cotanh(0)

[18:55] <p6eval> rakudo 4de821: OUTPUT«Divide by zero␤»

[18:55] <TimToady> though perhaps not Perl 6 methods...

[18:55] <colomon> rakudo: say cotanh(.5)

[18:55] <p6eval> rakudo 4de821: OUTPUT«2.16395341373865␤»

[18:56] <colomon> rakudo: say cotanh(100)

[18:56] <p6eval> rakudo 4de821: OUTPUT«1␤»

[18:57] <colomon> rakudo: say acotanh(1)

[18:57] <p6eval> rakudo 4de821: OUTPUT«Divide by zero␤»

[18:58] <colomon> TimToady: That reminds me -- we meant to ask you if trig functions should be allowed to return divide by zero.

[18:58] <colomon> rakudo: say acosh(1.1)

[18:58] <p6eval> rakudo 4de821: OUTPUT«0.443568254385115␤»

[18:59] <colomon> wrong one

[18:59] <colomon> rakudo: say acosh(1)

[18:59] <p6eval> rakudo 4de821: OUTPUT«0␤»

[18:59] <colomon> rakudo: say atanh(1)

[18:59] <p6eval> rakudo 4de821: OUTPUT«Divide by zero␤»

[18:59] <colomon> rakudo: say atanh(1.00001)

[18:59] <p6eval> rakudo 4de821: OUTPUT«NaN␤»

[18:59] <TimToady> if you get divide by zero when the limit is going to Inf, why not return Inf?

[18:59] <colomon> rakudo: say atanh(.99999)

[18:59] <p6eval> rakudo 4de821: OUTPUT«6.10303382276111␤»

[19:00] <colomon> rakudo: say atanh(.9999999999)

[19:00] <p6eval> rakudo 4de821: OUTPUT«11.859499013855␤»

[19:00] <colomon> TimToady: Good question.

[19:01] <TimToady> seems like we should use Inf/NaN where it makes sense, and reserve exceptions for, er, exceptions that are more exceptional...

[19:01] <colomon> I was thinking atanh(1) ought to be NaN to match all the atanh values greater than 1, but Inf does seem to make sense there. 

[19:01] <colomon> TimToady++

[19:01] <TimToady> after all, we may be passing these values off to some other language that hasn't a clue about unthrown exceptions

[19:02] *** pmurias left
[19:02] *** pmurias joined
[19:02] <colomon> I will try to work that into my tests (though I don't know if I can figure out the PIR to actually implement it).

[19:03] *** donaldh left
[19:03] *** azawawi left
[19:04] *** donaldh joined
[19:04] *** am0c left
[19:10] <Tene> I really need to update some of the web stuff to use context vars where appropriate.

[19:11] <pugs_svn> r28275 | colomon++ | [t/spec] Split the trig function by trig function info off into a separate file, trig_functions.  Add tests for inverse functions on rational numbers. 

[19:16] *** sri_kraih left
[19:17] *** sri_kraih joined
[19:17] *** sri_kraih left
[19:21] *** sjohnson left
[19:21] *** sjohnson joined
[19:21] *** sjohnson left
[19:23] *** sjohnson joined
[19:23] *** meppl left
[19:25] <sjohnson> sorry about all the reconnects

[19:25] *** sri_kraih joined
[19:35] *** kent\n joined
[19:36] *** ruoso left
[19:37] *** sevvie joined
[19:40] *** Aisling joined
[19:50] <pugs_svn> r28276 | colomon++ | [t/spec] Add inverse Int tests as well. 

[19:51] <colomon> The trig test generator generates 6238 tests at the moment.  (Not included in the official spectests yet...) 

[19:52] <colomon> All pass on my copy of rakudo, planning on checking them in after the release today.

[20:02] <pmichaud> (after release) +1

[20:03] *** _jaldhar left
[20:07] *** chturne joined
[20:07] <chturne> #join #pugs

[20:17] *** zerhash joined
[20:25] *** desertm4x left
[20:33] *** Khisanth left
[20:40] <pugs_svn> r28277 | mimir++ | Added self to AUTHORS. 

[20:45] *** Khisanth joined
[21:04] *** iblechbot left
[21:12] *** zamolxes joined
[21:14] *** cmv joined
[21:23] *** M_o_C left
[21:25] <dalek> rakudo: 05e7604 | (parrot user)++ | :

[21:25] <dalek> rakudo: fixed bad math

[21:25] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/05e760425dff9c4f630d9cb5f600891407735290

[21:25] <dalek> rakudo: 41f7ba7 | (parrot user)++ | :

[21:25] <dalek> rakudo: Merge branch 'master' of http://github.com/rakudo/rakudo

[21:25] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/41f7ba7b8f860286a3f3a5091dfaedfedbbc45c9

[21:25] <dalek> rakudo: 2953ac7 | (parrot user)++ | docs/release_guide.pod:

[21:25] <dalek> rakudo: fix typo

[21:25] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/2953ac774e41cc428fff24b2c190c970cf226553

[21:29] *** athomason left
[21:31] *** SmokeMachine left
[21:31] *** zerhash left
[21:35] *** mberends left
[21:36] *** kidd_ left
[21:44] *** ihrd joined
[21:47] *** kent\n left
[21:47] *** ihrd left
[21:48] *** KyleHa left
[21:49] *** dakkar left
[21:51] *** jauaor left
[21:59] <pmichaud> particle++ # Rakudo #21

[22:00] <[particle]> (thundering hoarde)++ for making the release easy this month

[22:01] <[particle]> somehow i think of rakudo devs more as pirates than pack animals

[22:03] *** kolibrie left
[22:03] *** kolibrie joined
[22:05] *** masak joined
[22:05] <masak> o/

[22:05] <sjohnson> hi

[22:06] <masak> I didn't plan to come back tonight. but I discovered a number of bugs, so I thought I'd report them before going to bed.

[22:06] <masak> nothing beats writing app code for finding bugs.

[22:07] * sjohnson pats masak on the back

[22:07] <masak> rakudo: sub foo(Bool :$x) {}; foo(:x)

[22:07] <p6eval> rakudo 2953ac: OUTPUT«Parameter type check failed; expected Bool, but got Int for $x in call to foo␤in sub foo (/tmp/M4rN5Eiet4:2)␤called from Main (/tmp/M4rN5Eiet4:2)␤»

[22:07] * masak submits rakudobug

[22:07] <masak> rakudo: class A { has $.a; method x(Str $:x) {}; method all() { $!a } }

[22:08] <p6eval> rakudo 2953ac: OUTPUT«Invalid twigil used in signature parameter. at line 2, near ") {}; meth"␤in Main (src/gen_setting.pm:1262)␤»

[22:08] * masak submits rakudobug

[22:08] <masak> oops, no that's not it.

[22:08] <masak> rakudo: class A { has $.a; method x(Str :$x) {}; method all() { $!a } }

[22:08] <p6eval> rakudo 2953ac: OUTPUT«No such attribute '$!a'␤in Main (/tmp/gwwL4ES70M:2)␤»

[22:08] <masak> there you go.

[22:08] <masak> rakudo: say "oh hai" .= uc

[22:08] <p6eval> rakudo 2953ac: OUTPUT«OH HAI␤»

[22:08] <masak> rakudo: say "oh hai" .= "uc"

[22:08] <p6eval> rakudo 2953ac: OUTPUT«.= must have a call on the right hand side at line 2, near " .= \"uc\""␤in Main (src/gen_setting.pm:2722)␤»

[22:08] * masak submits rakudobug

[22:10] *** tak11 joined
[22:12] *** lucs_ joined
[22:13] <diakopter> re: Cobra & Ioke thread... ships passing in the night.

[22:15] *** Kodi joined
[22:15] <Kodi> Could someone change the Pugs SVN username "mimir" to "Kodi", or just give "Kodi" a commit bit (email [email@hidden.address] I'd like to be to referred to by my first name in SVN logs.

[22:15] <masak> rakudo: class A { has $.a; method x(Str $x) {}; method all() { $!a } }

[22:16] <p6eval> rakudo 2953ac: OUTPUT«No such attribute '$!a'␤in Main (/tmp/sHzJVfEqwb:2)␤»

[22:18] <masak> rakudo: say "oh hai"."uc"

[22:18] <p6eval> rakudo 2953ac: OUTPUT«OH HAI␤»

[22:19] <masak> rakudo: my $a = "oh hai"; say $a.="uc"

[22:19] <p6eval> rakudo 2953ac: OUTPUT«OH HAI␤»

[22:19] <masak> rakudo: my $a = "oh hai"; say $a .= "uc"

[22:19] <sjohnson> heh

[22:19] <p6eval> rakudo 2953ac: OUTPUT«.= must have a call on the right hand side at line 2, near " .= \"uc\""␤in Main (src/gen_setting.pm:2722)␤»

[22:19] <pmichaud> std:  my $a;  $a .= "uc";

[22:20] <p6eval> std 28277:  ( no output )

[22:20] <pmichaud> hmmmmm

[22:20] <sjohnson> std's been busted for a while now

[22:20] <pmichaud> std:  my $a;  $a .= uc;

[22:20] <sjohnson> std: 3;

[22:20] <p6eval> std 28277: OUTPUT«ok 00:03 38m␤»

[22:20] <p6eval> std 28277: OUTPUT«ok 00:03 36m␤»

[22:20] <sjohnson> nevermind

[22:20] <pmichaud> std:  my $a;  $a .= 'uc';

[22:21] <p6eval> std 28277: OUTPUT«Potential difficulties:␤  Possible obsolete use of .= as append operator; in Perl 6 please use ~= instead at /tmp/kNhxZT6Qhy line 1:␤------> my $a;  $a .= ⏏'uc';␤  Useless use of quotes at /tmp/kNhxZT6Qhy line 1:␤------> my $a;  $a .=

[22:21] <p6eval> ..'uc'⏏;␤ok…

[22:21] <pmichaud> yes, that's what I expected.

[22:23] <masak> Matt-W: thanks for the kind words on p6l.

[22:23] *** Kodi left
[22:25] <masak> colomon: (re TOTE eq 'Totally Obsessive TDD Environment') sure, why not? :)

[22:26] <diakopter> for posterity (I mean backscroll), I sent a pugs commitbit invite to Kodi as requested

[22:26] *** alester left
[22:27] <Tene> Me too!

[22:28] *** patspam joined
[22:29] *** nothingmuch left
[22:29] *** nothingmuch joined
[22:30] *** KatrinaTheLamia joined
[22:30] <Tene> hi katrina

[22:34] *** pmurias left
[22:35] <pugs_svn> r28278 | Kodi++ | Insignificantly changed lead of AUTHORS to test new commit bit (I'm Kodi Arfer). 

[22:37] <masak> KatrinaTheLamia: \o

[22:37] <masak> yay, I'm on reddit! http://www.reddit.com/r/programming/comments/9lkmt/helpfully_addictive_tdd_on_crack/

[22:38] <masak> in summary, the commenters say it's been done already, it's trivial, they misread TDD twice, and they wish there was a Perl 5/.Net version. :)

[22:39] <diakopter> 77

[22:39] <diakopter> hm

[22:39] <diakopter> (oops)

[22:41] <KatrinaTheLamia> hai masak 

[22:41] <KatrinaTheLamia> hi Tene 

[22:48] *** nihiliad left
[22:48] *** patspam left
[22:54] <masak> use.perl.org does not degrade gracefully when js is turned off... editing a post turns up a blank page.

[22:55] <pugs_svn> r28279 | diakopter++ | [vijs] non-interpolated Str can be said; TimToady++ for fixing/optimizing lots in STD/viv 

[22:58] <diakopter> vijs: say("Meesa »ö«")

[22:58] <p6eval> vijs 28279: OUTPUT«Meesa »ö«␤␤     time in interpreter: 0.015203 s␤»

[22:58] <diakopter> purty

[22:58] *** lucs_ left
[23:02] <masak> hm... even with js, use.perl doesn't permit me to edit my post. :/

[23:03] <avuserow> masak: I think you can blame slashcode for that

[23:04] <masak> oh?

[23:05] <avuserow> yeah, I don't think they have editing. slashdot doesn't at least, and they both run slashcode

[23:06] <masak> up until today, I've been able to edit my posts just fine.

[23:06] <masak> and I think I've seen updates to Slashdot posts as well.

[23:06] <masak> not comments, mind. posts.

[23:06] <diakopter> vijs: say("Meesa »ö«");say(say(' hi hi ', say 445))

[23:06] <p6eval> vijs 28279: OUTPUT«Meesa »ö«␤445␤ hi hi 1␤1␤␤   time in interpreter: 0.045923 s␤»

[23:06] <avuserow> masak: my mistake, thought you meant comments

[23:09] <masak> rakudo: class A { method foo { say "A" } }; class B is A { method foo { say "B"; nextsame } }; B.new.+foo

[23:09] <p6eval> rakudo 2953ac: OUTPUT«B␤A␤A␤»

[23:14] <pmichaud> that looks correct to me

[23:14] <masak> same here.

[23:14] <masak> I had an old sticky note where it Null PMC'd. it doesn't any more.

[23:15] <masak> rakudo: class A { method foo(::T $ :) { say T.perl } }; A.new.foo

[23:15] <p6eval> rakudo 2953ac: OUTPUT«A␤»

[23:16] <masak> std: class A { method foo(::T $:) {} }

[23:16] <p6eval> std 28279: OUTPUT«ok 00:03 40m␤»

[23:16] <masak> rakudo: class A { method foo(::T $:) {} }

[23:16] <p6eval> rakudo 2953ac: OUTPUT«Invalid twigil used in signature parameter. at line 2, near ") {} }"␤in Main (src/gen_setting.pm:1262)␤»

[23:16] * masak cackles

[23:17] <masak> pmichaud: is it reasonable to expect Rakudo to parse the above '$:' as '$ :'?

[23:18] <pmichaud> is std parsing it that way?

[23:18] <masak> good question.

[23:18] <masak> it's not throwing an error, at least.

[23:19] <pmichaud> I suspect std might be parsing it as '$:'

[23:19] * pmichaud looks

[23:19] <masak> why then doesn't it complain?

[23:20] <pmichaud> why should it?  $: is valid

[23:20] <pmichaud> it's the same as    method foo(::T $)

[23:20] * masak blinks

[23:20] <masak> yes, that's my point.

[23:21] <masak> er, unless it isn't.

[23:21] <TimToady> it has a param sep of ':'

[23:21] <TimToady> so I think it's making it the invocant

[23:21] <pmichaud> okay

[23:21] <pmichaud> that's fine -- that's what masak++ is asking for

[23:21] <pmichaud> let's see what Rakudo is doing

[23:22] <masak> pmichaud: why would 'method foo(::T $:)' be the same as 'method foo(::T $)'? the first one has an invocant, the other one has that plus a param.

[23:22] <pmichaud> masak:  just as $ is an anonymous placeholder variable, $: could be considered that as well depending on the parsing

[23:22] <TimToady> $: requires a name at STD:1783

[23:22] <pmichaud> (it's not that way, but it's possible for a grammar to treat it as such)

[23:22] <pmichaud> yes, I see that

[23:24] <TimToady> I don't know why param_var isn't slurping it as a twigil though

[23:24] <pmichaud> right, that's my point :)

[23:25] <masak> pmichaud: do you think http://rt.perl.org/rt3/Ticket/Display.html?id=67846 would be hard to fix? I'm considering trying it myself. it's getting to be enough of an itch after tonight's hacking session.

[23:25] <pmichaud> looks like param_var wants a \w after the <twigil>

[23:25] <pmichaud> [<?before <.twigil>\w> <twigil>]?

[23:25] <TimToady> line 3062, yes

[23:26] <TimToady> that would be it

[23:26] <pmichaud> Rakudo doesn't have that check.

[23:26] <pmichaud> We can add it.

[23:26] <masak> \o/

[23:26] <masak> pmichaud: should I submit this to RT?

[23:26] <pmichaud> sure.

[23:26] * masak makes it so

[23:26] <TimToady> why do I get the feeling that colon is overloaded to within an inch of its life already?

[23:26] <pmichaud> ...inch?

[23:26] <pmichaud> that much?

[23:27] <TimToady> nanomicro?

[23:27] <pmichaud> better.

[23:27] <masak> attoparsec.

[23:27] <TimToady> probably with a large negative imaginary component

[23:27] <diakopter> non-breaking space

[23:27] <pmichaud> zero-width space :-)

[23:27] <diakopter> I mean.  that.

[23:27] <TimToady> a BOM maybe

[23:27] <TimToady> that has a large negative imaginary component, I suspect

[23:27] <pmichaud> yes, it's aBOMinable

[23:28] <masak> no argument there.

[23:28] <diakopter> pmichaud++ # often translating my thoughts to typing better than I do.

[23:28] <TimToady> sec...

[23:30] <pmichaud> rakudo: class A { method foo(::T $ :) { } }   # just checking

[23:30] <p6eval> rakudo 2953ac:  ( no output )

[23:30] <pmichaud> okay

[23:30] <pmichaud> let me fire up my other box and see if I can make the trivial change and spectest it while still working on $otherjob tasks :)

[23:31] <TimToady> back

[23:32] <TimToady> vijs: say 'hello ' ~ 'world'

[23:32] <pmichaud> TimToady: would   [ <twigil> <.before \w> ]?   be a better construction?

[23:32] <p6eval> vijs 28279: OUTPUT«execute(): execute error: undefined at viv line

[23:32] <p6eval> ..142.␤[{"T":"noun__S_value","BEG":4,"WS":1,"_specific":1,"SYM":"value","value":{"T":"value__S_quote","BEG":4,"WS":1,"_specific":1,"SYM":"quote","quote":{"T":"quote__S_Single_Single","BEG":4,"WS":1,"_specific":1,"SYM":["'","'"],"nibble"…

[23:34] <masak> 'night, #perl6.

[23:34] <TimToady> o\

[23:35] <masak> that looks like someone scratching his head. :)

[23:35] <TimToady> pmichaud: possibly, though it may be that I had that and was working around some difficulty

[23:35] <TimToady> masak: that's because we don't know what to think when you're gone

[23:35] <pmichaud> I know what to think:  "Gee, I wonder when masak++ will be back."

[23:36] <TimToady> well, if I said /o\ you'd feel guilty about leaving

[23:36] <masak> :)

[23:36] <diakopter> TimToady: lol.

[23:36] <masak> I'll try to sleep quickly.

[23:36] <diakopter> _o_

[23:36] <masak> flight attendant.

[23:36] *** masak left
[23:37] <diakopter> |_o_|

[23:37] *** jrtayloriv left
[23:37] <pmichaud> |-o-|   # tie fighter

[23:37] <TimToady> sending semaphores?

[23:37] <TimToady> »ö« <-- Darth Camelia

[23:38] *** frew_ joined
[23:38] <sjohnson> tie fighter heh

[23:38] <sjohnson> i remember my brother one that old DOS game in a raffle

[23:38] <sjohnson> we never played it

[23:39] <sjohnson> one => won

[23:40] <diakopter> what a great game.  I still play the theme jingles on a piano whenever I see one.  kindof annoying of me, I know.

[23:42] *** jrtayloriv joined
[23:43] *** sevvie left
[23:54] <colomon> I never played TIE Fighter, but I played a good bit of X-Wing vs TIE Fighter, and it was great fun.

