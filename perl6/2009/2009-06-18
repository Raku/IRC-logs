[00:00] *** justatheory left
[00:07] *** justatheory joined
[00:11] <meppl> good night

[00:13] *** meppl left
[00:19] *** Whiteknight joined
[00:26] *** DemoPhreak left
[00:27] *** eternaleye left
[00:38] *** payload1 joined
[00:38] *** payload left
[00:41] *** simcop2387 joined
[00:47] *** justatheory left
[00:47] *** hercynium joined
[00:53] *** dukeleto joined
[00:54] *** dukeleto left
[01:03] *** molaf_xx joined
[01:07] *** eternaleye joined
[01:13] *** _jaldhar joined
[01:16] *** xomas left
[01:19] *** molaf_x left
[01:21] *** mib_huvlbq joined
[01:26] *** azawawi joined
[01:28] *** dukeleto joined
[01:28] <azawawi> hi

[01:31] <azawawi> std: my $line = prompt "should i be loaded in another.pad?";

[01:31] <p6eval> std 27113: OUTPUT«ok 00:04 36m␤»

[01:35] <azawawi> TimToady: thanks for the prompt() fix. szabgab will be happier now :)

[01:37] *** dukeleto left
[01:38] *** azawawi left
[01:39] *** azawawi joined
[01:43] *** netfish left
[01:44] *** Whiteknight left
[01:45] *** jferrero left
[01:47] *** xinming_ joined
[01:47] *** ihrd joined
[01:47] *** xinming left
[01:49] *** ihrd left
[01:49] <pugs_svn> r27114 | azawawi++ | [S:H:P6] version 0.60 has the latest STD which fixes undeclared prompt() among other fixes. TimToady++

[01:50] *** justatheory joined
[01:55] *** cdarroch left
[01:58] *** buubot joined
[02:04] *** payload1 left
[02:04] *** hercynium left
[02:05] *** Sunbeam left
[02:13] *** twigil joined
[02:19] <twigil> rakudo: say "hi twigil".perl;

[02:20] <p6eval> rakudo 9dc941: OUTPUT«"hi twigil"␤»

[02:20] <twigil> rakudo: say "hi".WHAT;

[02:20] <p6eval> rakudo 9dc941: OUTPUT«Str()␤»

[02:25] <twigil> lambdabot: compare 2 3

[02:26] <twigil> mildew: say "hi"

[02:26] <p6eval> mildew: OUTPUT«Bareword found where operator expected at perl6-snapshot/STD.pm line 4, near "$LANG is"␤  (Missing operator before is?)␤Bareword found where operator expected at perl6-snapshot/STD.pm line 5, near "$PKGDECL is"␤   (Missing operator before is?)␤Bareword found where operator expected

[02:26] <p6eval> ..at…

[02:27] *** dukeleto joined
[02:27] *** DanielC joined
[02:30] <twigil> @compare 2 3

[02:30] <lambdabot> Plugin `compose' failed with: Unknown command: "2"

[02:30] <twigil> @type 2

[02:31] <lambdabot> forall t. (Num t) => t

[02:38] *** Minimiscience joined
[02:39] <Minimiscience> How do I create an IO object in Rakudo that supports the .lines method?

[02:43] *** Molaf left
[02:43] *** Molaf joined
[02:46] *** DanielC left
[02:47] *** DanielC joined
[02:54] *** Molaf left
[02:54] *** Molaf joined
[02:56] *** payload joined
[02:57] *** agentzh left
[02:57] *** agentzh joined
[02:57] <twigil> Minimiscience: http://github.com/rakudo/rakudo/blob/5f73ca8ce128a71c8264dff7327beb82116c8ea1/src/classes/IO.pir

[02:57] <twigil> maybe this can help you

[03:02] <Minimiscience> How do I create one of those?

[03:04] *** dukeleto left
[03:07] <Minimiscience> Let me rephrase: How do I instantiate an object of the IO class described in the given link?  It doesn't say.

[03:07] *** araujo joined
[03:11] *** dukeleto joined
[03:14] <Minimiscience> It really does not bode well that this channel gets less traffic than #lojban.

[03:18] <twigil> Minimiscience: as far as I understood, we have $*IN, $*OUT and $*ERR in rakudo

[03:18] <Minimiscience> How do I create an IO object for a file?

[03:19] *** molaf_xx left
[03:19] <twigil> my $fh = open(@*ARGS[0], :r); # :r = read mode

[03:19] <twigil> my $line = 1;

[03:19] <twigil> for =$fh {

[03:19] <twigil>     say $line++ ~ " $_";

[03:19] <twigil> }

[03:19] <twigil> $fh.close();

[03:20] *** donaldh left
[03:20] *** Minimiscience left
[03:20] *** donaldh joined
[03:30] *** DanielC left
[03:36] *** Sunbeam joined
[04:01] *** tarbo2 joined
[04:07] *** dukeleto left
[04:17] *** alester joined
[04:25] *** azawawi left
[04:30] *** FurnaceBoy left
[04:31] <TimToady> twigil: BTW, =$fh has changed to $fh.lines

[04:32] <twigil> TimToady: thanks. is it written in some doc?

[04:33] *** japhb joined
[04:33] *** mib_huvlbq left
[04:35] <TimToady> http://perlcabal.org/syn/S32/IO.html

[04:37] <TimToady> bbl &

[04:40] <pugs_svn> r27115 | azawawi++ | [S:H:P6] Removed obsolete method

[04:41] *** skids left
[04:44] *** azawawi joined
[04:48] *** nihiliad left
[05:06] <azawawi> TimToady: redspans is not working as expected since revision 26975, please see http://pastebin.com/m30b2d582

[05:08] *** azawawi left
[05:18] *** buu joined
[05:25] *** awwaiid left
[05:26] *** jaldhar_ joined
[05:26] *** _jaldhar left
[05:35] *** zamolxes left
[05:36] *** alester left
[05:44] *** digitalise joined
[05:45] *** digitalise left
[05:55] *** justatheory left
[06:09] *** moritz_ sets mode: +o TimToady

[06:09] *** xinming joined
[06:20] *** zamolxes joined
[06:21] *** rfordinal joined
[06:27] *** xinming_ left
[06:30] *** ZuLuuuuuu joined
[06:33] <moritz_> rakudo: say [+] 1..5

[06:33] <p6eval> rakudo 9dc941: OUTPUT«15␤»

[06:34] *** ZuLuuuuuu left
[06:37] *** azawawi joined
[06:40] <moritz_> nqp: say(chars("abc"))

[06:40] <p6eval> nqp: OUTPUT«Could not find non-existent sub chars␤current instr.: '_block11' pc 3 (EVAL_4:5)␤»

[06:40] <moritz_> nqp: say("abc".chars)

[06:40] <p6eval> nqp: OUTPUT«Method 'chars' not found for invocant of class 'String'␤current instr.: '_block11' pc 12 (EVAL_4:7)␤»

[06:41] <moritz_> nqp: say("abc".bytes)

[06:41] <p6eval> nqp: OUTPUT«Method 'bytes' not found for invocant of class 'String'␤current instr.: '_block11' pc 12 (EVAL_4:7)␤»

[06:43] *** rfordinal left
[06:44] *** clintongormley joined
[06:45] *** xomas joined
[06:45] *** xomas left
[06:49] <azawawi> moritz_: hi

[06:50] <pugs_svn> r27116 | azawawi++ | [redspans] it is working again with STD

[06:51] <moritz_> hi azawawi 

[06:51] *** ejs joined
[06:53] *** xomas joined
[06:53] *** DemoFreak joined
[06:53] *** iblechbot joined
[06:59] *** twigil left
[06:59] *** rfordinal joined
[07:04] *** rfordinal left
[07:15] *** dakkar joined
[07:19] <azawawi> std:

[07:19] <azawawi> std: 

[07:20] *** donaldh left
[07:21] *** donaldh joined
[07:21] *** SamuraiJack joined
[07:26] *** meppl joined
[07:28] <azawawi> moritz_: ping

[07:28] <moritz_> azawawi: pong

[07:28] <azawawi> moritz_: STD->parse does not return a parser when the source text has only spaces, see http://pastebin.com/m655d072d

[07:29] <moritz_> azawawi: and why do you tell me? ;-)

[07:29] *** ejs left
[07:29] <azawawi> moritz_: thought you had an idea why is that happening :)

[07:30] <azawawi> TimToady: STD->parse does not return a parser when the string is empty, see http://pastebin.com/m655d072d

[07:30] <azawawi> moritz: :)

[07:31] *** sparc_ joined
[07:37] <pugs_svn> r27117 | azawawi++ | [S:H:P6] version 0.61 fixes a redspans bug that caused output to be invalid

[07:40] *** DanielC joined
[07:44] *** DemoFreak left
[07:49] *** twigil joined
[07:59] *** masak joined
[08:00] <DanielC> @seen mberends

[08:00] <lambdabot> Last time I saw mberends was when I left ##english, ##freebsd, ##hrg, ##logic, #arch-haskell, #concatenative, #darcs, #dreamlinux-es, #friendly-coders, #functionaljava, #gentoo-haskell, #gentoo-uy, #

[08:00] <lambdabot> ghc, #haskell, #haskell-blah, #haskell-books, #haskell-freebsd, #haskell-in-depth, #haskell-overflow, #haskell-soc, #haskell.cz, #haskell.de, #haskell.dut, #haskell.es, #haskell.fi, #haskell.fr, #

[08:00] <lambdabot> haskell.hr, #haskell.it, #haskell.jp, #haskell.no, #haskell.ru, #haskell.se, #haskell_ru, #jhc, #jtiger, #macosx, #macosxdev, #novalang, #perl6, #rosettacode, #scala, #scannedinavian, #unicycling, #

[08:00] <lambdabot> xmonad and #yi 14d 3h 9m 27s ago.

[08:00] <DanielC> wow

[08:00] <masak> lambdabot: showoff!

[08:00] <masak> howdy, buffercamels.

[08:00] <DanielC> I wanted to speak with mberends about the module-lib project.

[08:01] <DanielC> I won't be around next week, starting Saturday, and I didn't want him to think that I've disappeared.

[08:01] <masak> I'm given to understand that he is, or has been, moving house lately.

[08:01] <meppl> if mberends speaks all these languages .cz .de .dut .es .fu .fr .hr .it .jp .no .ru .se .ru

[08:01] <DanielC> yeah

[08:01] <masak> DanielC: you can leave a message with phenny.

[08:02] <DanielC> I think I might do that. How do you do that? Just "phenny: tell meberends ..." ?

[08:02] <masak> aye.

[08:02] <masak> phenny++

[08:02] *** xinming_ joined
[08:02] <moritz_> or write an email

[08:02] <moritz_> such a retarded technique ;-)

[08:03] <DanielC> moritz_: I'd prefer email. Can you give me his address?

[08:03] <masak> in South Korea, only old people use email.

[08:03] <meppl> do they like jabber?

[08:04] <masak> I would think so, yes.

[08:04] <moritz_> DanielC: [email@hidden.address]
[08:04] *** eMaX joined
[08:04] <DanielC> moriz_: thanks

[08:10] <masak> moritz_++ # uploading JSON::Tiny to CPAN

[08:11] <moritz_> masak: we're having hot discussions about it on #toolchain

[08:12] * masak goes there

[08:12] *** twigil left
[08:12] <masak> care to give a summary?

[08:12] <DanielC> Where is #toolchain ?

[08:12] <masak> DanielC: on irc.perl.org

[08:12] <DanielC> Is JSON::Tiny based on Parrot?

[08:12] <DanielC> thanks

[08:12] *** twigil joined
[08:13] <moritz_> masak: 1) "you suck, how dare you poison the Perl 5 namespace JSON::Tiny"

[08:13] <masak> moritz_: that's ridiculous.

[08:13] <moritz_> masak: not quite

[08:13] <masak> Perl 6 is Perl. CPAN is for Perl.

[08:14] <moritz_> masak: people now can't upload a Perl 5 module named JSON::Tiny to CPAN

[08:14] <masak> so what?

[08:14] *** xinming left
[08:14] <moritz_> Alias++ suggested to upload it as a dev release

[08:14] <masak> neither can they upload a Perl 4 module where a Perl 5 one already exists.

[08:14] <moritz_> so it won't clobber any Perl 5 namespace

[08:14] <masak> why is that even an issue?

[08:15] <masak> why should Perl 6 modules take care not to "clobber" namespaces?

[08:15] <masak> sounds like subservience to me.

[08:15] <moritz_> because the CPAN indexer can't deal with Perl 6 yet

[08:15] <masak> oh, tosh.

[08:16] *** dukeleto joined
[08:17] *** DanielC left
[08:17] <moritz_> making that obvious was kind of the point of my action

[08:18] <masak> yes, I understand that. kudos.

[08:18] <masak> (soft revolution)++

[08:18] <masak> this came out a bit strange: http://search.cpan.org/~moritz/JSON-Tiny-0.1.1/lib/JSON/Tiny.pm

[08:19] <moritz_> that's the problem with cpan6, it tries to be a hard/full revolution all at once

[08:19] <moritz_> masak: I know

[08:19] <masak> looking at it, I feel a bit like the guy on the right, with a question mark in his head. :)

[08:19] <masak> moritz_: exactly.

[08:27] *** dukeleto left
[08:29] *** ejs joined
[08:29] *** DanielC joined
[08:30] *** ejs1 joined
[08:30] <DanielC> Fudge...  I think my disk is dying.

[08:30] <DanielC> This is the second time I have to run fsck on it in the last 7 days.

[08:38] *** agentzh left
[08:39] *** agentzh joined
[08:45] *** rfordinal joined
[08:47] *** ejs left
[08:56] *** viklund joined
[08:57] <viklund> Good Morning!

[08:57] <moritz_> oh hai viklund 

[08:58] <viklund> is rakudo broken?

[08:58] <viklund> sry

[08:58] <viklund> misspelled PERL6LIB

[08:58] <azawawi> moritz_: std says 'panic: unexpected package name &JSON::Tiny' (neither an error nor warning) and continues...

[08:59] <azawawi> std: module JSON::Tiny { }

[08:59] <p6eval> std 27117: OUTPUT«panic: unexpected package name &JSON::Tiny␤ok 00:02 35m␤»

[09:02] <azawawi> std: module JSON { };

[09:02] <p6eval> std 27117: OUTPUT«ok 00:02 35m␤»

[09:02] <azawawi> std: module JSON::T { };

[09:02] <p6eval> std 27117: OUTPUT«panic: unexpected package name &JSON::T␤ok 00:02 35m␤»

[09:03] <azawawi> # an STD bug :)

[09:03] <azawawi> std: module JSON-T { }

[09:03] <p6eval> std 27117: OUTPUT«ok 00:02 35m␤»

[09:03] <azawawi> std: module Foo::Bar;

[09:03] <p6eval> std 27117: OUTPUT«panic: unexpected package name &Foo::Bar␤ok 00:02 35m␤»

[09:07] <azawawi> TimToady: 'module Foo::Bar;' causes a "panic: unexpected package name &Foo::Bar". 'module Foo' and 'module Foo-Bar' works. maybe it should be a stderr warning?

[09:11] <azawawi> so what's the difference between a perl 6 module and a perl 6 package?

[09:15] <viklund> I'm thinking about profiling perl6

[09:16] <viklund> since the pir-files get annotated

[09:16] <viklund> do you think that a ballpark estimate would be possible by post-processing the pir-files

[09:16] <viklund> and adding some kind of print statement with linenumber and timestamp for each .annotate

[09:17] <viklund> would give an output that is usable for profiling?

[09:19] <viklund> I'm thinking it's the simplest thing that can possibly work (would of course be nice to see the call-stack as well)

[09:20] <viklund> the advantage of this approach is that I can do it ;)

[09:20] <viklund> one program to post-process the pir-files and one to analyze the output

[09:28] <viklund> phenny: tell pmichaud could you just tell me if there is any point in doing this: http://irclog.perlgeek.de/perl6/2009-06-18#i_1248789

[09:28] <phenny> viklund: I'll pass that on when pmichaud is around.

[09:28] <viklund> thx phenny

[09:30] <viklund> phenny: tell viklund something

[09:30] <phenny> You can tell yourself that.

[09:30] <viklund> ok

[09:30] *** jferrero joined
[09:35] <masak> phenny++

[09:35] <viklund> indeed

[09:36] <viklund> masak: do you think it could work for profiling

[09:37] <masak> viklund: possibly.

[09:37] <masak> the print statements will affect the timings, though.

[09:37] <viklund> of course they will

[09:37] <masak> would be nice to do something less invasive.

[09:37] <viklund> hopefully it's a constant factor for each line

[09:37] <masak> yes.

[09:37] <viklund> running perl5 under dprofpp makes the program slower as well

[09:38] <viklund> you can't get away from that I believe

[09:38] <azawawi> viklund: do u mean you're going to inject timing code between annotated lines?

[09:39] <viklund> I would guess that I would add a print statement right after the .annotate line

[09:39] <viklund> smth like

[09:39] <viklund> say "$timestamp $linenumber"

[09:40] <viklund> (but in PIR of course)

[09:40] <viklund> then I'll write a script to analyze the output

[09:40] <azawawi> viklun: ofcourse, how about between subs invocations; that would be more useful

[09:41] <viklund> azawawi: yes, but that would be more difficult ;)

[09:41] <masak> viklund: my general comment is simply 'kudos, and good luck'.

[09:41] <azawawi> viklund: let me see

[09:41] <viklund> i'm not sure wheter it's any point though

[09:42] <masak> only one way to find out. :)

[09:43] <azawawi> viklund: i was thinking of doing PIR/Perl6 annotation in Padre; maybe i could help

[09:43] <azawawi> viklund: i already started by adding a "Generate PIR" from Perl 6

[09:43] <viklund> I don't really know what these .annotate lines do

[09:43] <viklund> nice

[09:45] <viklund> azawawi: to put a timing between sub invocations you need to analyze both the perl-file and the pir-file (if it's a postprocessing step)

[09:46] <viklund> line-numbers only needs the pir-file

[09:46] <viklund> hence very simple

[09:47] <azawawi> viklund: i was thinking of 'invoke_method foo()' in PIR or something like that...

[09:48] <viklund> azawawi: ?

[09:48] * azawawi examines some PIR output

[09:49] <azawawi> viklund: when you call foo() on a annotated line; it can surround it with timing code.

[09:50] <viklund> yes, but how do you detect foo()?

[09:50] <twigil> rakudo: say $*IN.lines

[09:50] <azawawi> viklund: .annotate "line", 7\n$P35 = "foo"() 

[09:50] <p6eval> rakudo 9dc941: OUTPUT«Land der Berge, Land am Strome,Land der Äcker, Land der Dome,Land der Hämmer, zukunftsreich!Heimat bist du großer Söhne,Volk, begnadet für das Schöne,vielgerühmtes Österreich,vielgerühmtes Österreich!Heiß umfehdet, wild umstrittenliegst dem Erdteil du inmitten,einem starken

[09:50] <p6eval> ..Herzen …

[09:50] <twigil> oh

[09:51] <viklund> azawawi: yes, but you need to check the perl-file to find all the methods/subs

[09:51] <masak> twigil: it's the Austrian national anthem.

[09:51] <viklund> right?

[09:52] <viklund> I mean, the method/sub-names

[09:52] <azawawi> viklund: actually that would be easy with STD->parse() and finding the method-call

[09:52] <viklund> ye

[09:53] <azawawi> viklund: a sub foo { } is a routine_def.+?ident

[09:53] <viklund> yes

[09:53] <viklund> I've never checked out STD though

[09:53] <viklund> maybe I should

[09:53] <azawawi> viklund: you can access it through my module Syntax::Highlight::Perl6

[09:53] <azawawi> viklund: in plain p5

[09:54] <viklund> my point was merely that just adding the info that looking for .annotate lines in the PIR is trivial 

[09:54] <azawawi> viklund: and then call ->tokens to get the array of parsed tree strings...

[09:54] <azawawi> viklund: yeah, what about starting with that and then we can extend it to this..

[09:54] <viklund> oh noes, programming in perl5 when not at work ;p

[09:55] <viklund> azawawi: sounds like a good plan, I'll wait for pmichaud comment first though

[09:56] <azawawi> viklund: see this http://pastebin.com/m443db834

[09:58] <viklund> azawawi: yes, some PIR, what should I look at

[09:59] *** lichtkind joined
[09:59] <azawawi> viklund: take a look at line 63

[09:59] <viklund> yes, the call to foo

[10:00] <azawawi> viklund: it is annotated to line 7 where foo is called and line 2 where foo is declared

[10:00] <viklund> which in this case happens to have an .annotate just before and just after

[10:01] *** mycelium left
[10:01] <viklund> I think it always is an .annotate just after

[10:01] <viklund> but I have examples without .annotate on the line before

[10:01] <viklund> if you have a sub with arguments for example

[10:02] * azawawi goes back to hacking Perl6 & Padre then :)

[10:03] <viklund> ;)

[10:03] <viklund> a cal to say is also always followed by .annotate

[10:04] <viklund> call*

[10:05] *** SamuraiJack_ joined
[10:07] *** SamuraiJack_ left
[10:09] *** rindolf joined
[10:09] <lichtkind> szabgab: ping

[10:10] <szabgab> pong

[10:13] <lichtkind> szabgab: i just read http://szabgab.com/blog/2009/06/1245228625.html and think you have an mistake in there

[10:14] <lichtkind> szabgab: say [email@hidden.address] doeas interpolate because ":qq         :double         Interpolate with :s, :a, :h, :f, :c, :b"

[10:14] *** sri_kraih_ joined
[10:14] <szabgab> it should say does NOT ...

[10:15] *** hatseflats joined
[10:15] <szabgab> sorry what ?

[10:16] <viklund> rakudo: my @names = <as df>; say "@names"

[10:16] <szabgab> rakudo: say [email@hidden.address]
[10:16] <p6eval> rakudo 9dc941: OUTPUT«@names␤»

[10:16] <p6eval> rakudo 9dc941: OUTPUT«joe@names.org␤»

[10:16] <viklund> rakudo: my @names = <as df>; say "{@names}"

[10:16] <p6eval> rakudo 9dc941: OUTPUT«as df␤»

[10:16] <lichtkind> szabgab: double quote does interpolate arrays

[10:16] <szabgab> in perl 5 yes

[10:16] <szabgab> not in perl 6

[10:16] <szabgab> at least not in rakudo

[10:18] <lichtkind> szabgab: right how you demonstrated, but synopses demand otherwise if i read themm correctly

[10:18] <szabgab> I donno, anyone ?

[10:19] *** SamuraiJack left
[10:19] <viklund> lichtkind: From S02: "Bare array, hash, and subroutine variables may I<never> be interpolated."

[10:20] <viklund> line 2860

[10:20] <viklund> that's in double-quotish strings

[10:21] <lichtkind> viklund: so ":qq         :double         Interpolate with :s, :a, :h, :f, :c, :b" means only if there surrounded by {} ?

[10:22] <viklund> I don't know, where is that quote from?

[10:22] <lichtkind> viklund: from S02 search for : Generalized quotes may now take adverbs

[10:22] <viklund> I saw it, line 2772

[10:23] <lichtkind> i dont have line numbers here

[10:23] *** xomas is now known as xomas_

[10:23] *** xomas_ is now known as xomas

[10:24] <viklund> the way I read that is that qq:"@array" should interpolate the array

[10:24] <twigil> what does the undescore after a nick mean?

[10:24] <viklund> perhaps qq"@array"

[10:24] <viklund> I'm not sure about the adverb usage

[10:24] <moritz_> viklund: qq"@array[]"

[10:25] <viklund> rakudo: say qq"test"

[10:25] <p6eval> rakudo 9dc941: OUTPUT«test␤»

[10:25] <viklund> rakudo: my @t = <a b>; say qq"@t"

[10:25] <p6eval> rakudo 9dc941: OUTPUT«@t␤»

[10:25] <viklund> rakudo: my @t = <a b>; say qq"@t[]"

[10:25] <p6eval> rakudo 9dc941: OUTPUT«@t[]␤»

[10:25] <moritz_> but rakudo doesn't do array interpolation yet anyway

[10:25] <viklund> NYI?

[10:25] <viklund> ah

[10:26] <viklund> but that call should interpolate, right?

[10:26] <moritz_> right.

[10:26] <lichtkind> moritz_: i remember arrays where interpolated only with final []

[10:27] <lichtkind> moritz_: right? :)

[10:27] <viklund> rakudo: my @array=< lichtkind viklund >; say "hello @array[0]"

[10:27] <p6eval> rakudo 9dc941: OUTPUT«hello @array[0]␤»

[10:27] <viklund> I think that should work though

[10:27] <lichtkind> viklund: yes should :)

[10:27] <lichtkind> szabgab: so truth was in the middle of our initial statements :)

[10:27] <moritz_> lichtkind: right

[10:28] <moritz_> anything except scalars is only interpolated if it ends in a postcircumfix

[10:28] * lichtkind have that correct in p6tut part 3

[10:28] <moritz_> ie my $x = a; "$x.uc" will give "a.uc", while "$x.uc()" will give "A"

[10:28] <lichtkind> i mean 

[10:28] * lichtkind has to correct in p6tut part 3

[10:30] *** sri_kraih left
[10:33] *** ejs2 joined
[10:40] *** azawawi left
[10:41] *** ejs1 left
[10:47] *** clkao_ joined
[10:49] *** Muixirt joined
[10:57] <masak> rakudo: class Failure is also { method foo {say "OH HAI"} }; .foo

[10:57] <p6eval> rakudo 9dc941: OUTPUT«OH HAI␤»

[10:59] <moritz_> new in Perl 6: extensinble undef!

[11:05] <masak> rakudo: class Failure is also { method defined { True } }; say .defined

[11:05] <p6eval> rakudo 9dc941:  ( no output )

[11:05] * masak snickers

[11:06] <masak> that one gives a bus error on my box.

[11:06] <rindolf> masak: bus error?

[11:06] <masak> rindolf: bus error.

[11:06] <rindolf> masak: isn't it a kind of hardware failure?

[11:07] <masak> rindolf: no, it's another term for 'segmentation fault'.

[11:07] <rindolf> masak: ah, OK.

[11:14] <moritz_> it's what happens when a program tries to use memory outside of its address range

[11:14] <masak> and what's 'segmentation fault'?

[11:15] *** pmurias joined
[11:15] <DanielC> masak: The program tried to write to a chunk of memory where it wasn't supposed to.

[11:15] <DanielC> masak: It wrote to a memory segment where it shouldn't have.

[11:16] <DanielC> masak: Do you know C ?

[11:16] <masak> DanielC: to a point.

[11:16] <DanielC> In C, if you use malloc wrong, you'll probably get a segmentation fault.

[11:16] <masak> ok, so it seems to me that a bus error and a segmentation fault are at least in the same ballpark.

[11:17] <moritz_> aye

[11:17] <pmurias> both being roughly eqivalent to "something went wrong"

[11:17] <moritz_> both are errors on memory access

[11:19] <masak> rakudo: class Failure is also { method perl { "HOLA!" } }; say .perl

[11:19] <p6eval> rakudo 9dc941:  ( no output )

[11:19] <masak> seems the problem is in overriding methods that were defined already.

[11:20] <moritz_> "no output" is wrong though

[11:20] *** donaldh left
[11:20] <masak> moritz_: yes. that's what I mean.

[11:20] <moritz_> ah yes, it's a segfault

[11:20] <masak> "no output" here means that a bus error occurred.

[11:20] <masak> rakudo: class A { method foo { 1 } }; class A is also { method foo { 2 } }; A.new.foo

[11:20] <p6eval> rakudo 9dc941:  ( no output )

[11:20] <masak> ah.

[11:20] <masak> and it's not just PIR methods.

[11:20] <moritz_> which, for whatever reasons, is printed to the console, not to IRC

[11:20] * masak submits rakudobug

[11:21] *** donaldh joined
[11:21] <moritz_> the latter doesn't cause any errors

[11:23] <moritz_> viklund: if you haven't noticed yet: JSON::Tiny is on CPAN, http://search.cpan.org/~moritz/JSON-Tiny-0.1.2_1/ ;-)

[11:25] <moritz_> when is rakudo release day? today? tomorrow?

[11:26] <masak> on a pmichaud Thursday, I'd guess.

[11:41] <masak> I'm still suffering from #66450. I regret that I haven't taken the time to investigate/complaing about that one more before the release.

[11:42] <masak> s/complaing/complain/

[11:43] *** M_o_C joined
[11:46] *** rfordinal left
[11:47] <masak> hm, I can no longer reproduce #66450... that's good news.

[11:47] <masak> but I still have a variant of the problem on feather.

[11:47] <masak> oh well, closing this one and possibly opening a new one for the feather problem.

[11:51] *** iblechbot left
[11:56] <viklund> moritz_: yes, i saw

[11:58] *** DemoFreak joined
[11:59] <Matt-W> Hello, wonderful Perl6ers

[11:59] <rindolf> Hello wonderful Matt-W 

[12:00] <jnthn> oh hai

[12:00] <viklund> rakudo: "olleh".reverse.say

[12:00] <p6eval> rakudo 9dc941: OUTPUT«olleh␤»

[12:00] * jnthn is at a net cafe in Rome but not for long.

[12:00] <viklund> greeting jnthn

[12:00] <moritz_> rakudo: "hello".flip.say

[12:00] <p6eval> rakudo 9dc941: OUTPUT«olleh␤»

[12:00] <viklund> moritz_: thx

[12:00] <viklund> ??

[12:01] <jnthn> So, whas news?

[12:01] <viklund> rakudo: <o l l e h >.reverse.say

[12:01] <p6eval> rakudo 9dc941: OUTPUT«hello␤»

[12:01] <viklund> rakudo: <o l l e h >.flip.say

[12:01] <p6eval> rakudo 9dc941: OUTPUT«h e l l o␤»

[12:02] <moritz_> wtf?

[12:02] <moritz_> rakudo: say "ab".flip

[12:02] <Matt-W> viklund: reverse is now for lists, flip is for strings

[12:02] <p6eval> rakudo 9dc941: OUTPUT«ba␤»

[12:02] <moritz_> ah

[12:02] <moritz_> I know, but I mis-read my own first example

[12:03] <viklund> yes

[12:03] <Matt-W> jnthn: During a boring meeting, I thought how much more fun I could be having writing something in Perl 6. Does that count as news?

[12:04] <viklund> why doesn't "ba".flip.say print "ab"?

[12:04] <jnthn> Not news, just nice to hear. :-)

[12:04] <viklund> rakudo: "ba".flip.say

[12:04] <p6eval> rakudo 9dc941: OUTPUT«ab␤»

[12:04] <viklund> it does

[12:04] <viklund> I'm also a bit slow

[12:04] <viklund> ;p

[12:04] <viklund> oh, well

[12:04] <viklund> lunch &

[12:05] <moritz_> jnthn: not much news in terms of rakudo

[12:05] <Matt-W> jnthn: Unfortunately I would've been having more fun if I was writing something in COBOL, I think

[12:05] <jnthn> epic boredom

[12:05] <moritz_> jnthn: I uploaded a Perl 6 package to CPAN and watched the people shout

[12:05] <jnthn> fun!

[12:06] <jnthn> Did they shout loudly?

[12:06] <moritz_> yes, on #toolchain

[12:07] <moritz_> I'll write a mail to [email@hidden.address] soon, and see how they react

[12:07] <Matt-W> Did you shout back?

[12:07] <moritz_> no, I stayed friendly ;-)

[12:07] <moritz_> actually they were also polite

[12:09] <jnthn> Hopefully a good solution can be worked out.

[12:10] <moritz_> I hope so too

[12:11] <Matt-W> yes

[12:17] <ascent_> moritz_: got any answer from Mark Overmeer (cpan6.org) ?

[12:17] <jnthn> OK. Seems like things are bubbling along nicely. I will be back to work a week on Monday.

[12:18] <moritz_> ascent_: yes

[12:19] <moritz_> there are basically three problems with cpan6

[12:19] <moritz_> 1) it doesn't work yet

[12:19] <moritz_> 2) it's not evolutionary. If you implement 30% of it, you still can't use it

[12:19] <Matt-W> jnthn: Have fun!

[12:20] <moritz_> 3) it doesn't solve some of the problems that cpan solves (indexing, extracting Pod etc)

[12:21] <jnthn> Matt-W: thanks!

[12:23] <jnthn> o/

[12:23] *** Chillance joined
[12:23] <ascent_> moritz_: maybe we should discuss it on some mailing list, grouping ideas and trying to write project basics? or maybe there was that discussion and I missed it.

[12:23] <moritz_> ascent_: there was a discussion on p6l

[12:23] *** ruoso joined
[12:24] *** payload left
[12:24] <ascent_> moritz_: ok, I'll search for it and read.

[12:25] <moritz_> actually I didn't read all of it, because much was also focused on different problems

[12:25] <moritz_> like, how to create binary distributions

[12:26] <ruoso> Hello

[12:39] <masak> hi, jnthn!

[12:39] <masak> how's the vacation going?

[12:39] *** rfordinal joined
[12:47] <Matt-W> masak o/

[12:48] <masak> Matt-W: OH HAI

[12:52] *** viklund left
[12:53] *** skids joined
[12:54] <masak> Matt-W: what's new with Form?

[12:55] <Matt-W> masak: Nothing, unfortunately

[12:55] <Matt-W> I am a bad man

[12:55] <masak> non sequitur, but fair enough. :_

[12:55] <masak> :P

[12:55] <Matt-W> Maybe I will do some tonight

[12:55] *** synth joined
[12:55] <masak> yes, please do!

[12:55] <Matt-W> Wish I could get work to fund some Perl 6 work for me to do

[12:55] <Matt-W> I'm always in the mood for it when I'm at work

[12:56] <masak> maybe I'll do some Druid SVG tonight.

[12:56] <masak> I saw a projection of a cube today, and started fantasizing about Druid in real SVG.

[12:56] <Matt-W> I should stop being afraid of the complexity of number formatting and just make some of it work

[12:57] <masak> aye.

[12:57] <masak> don't get crippled by Design Dread.

[12:59] <Matt-W> If I can just get some simple decimals up and running that'd be a nice step forward

[12:59] <Matt-W> lining themselves up into neat columns

[12:59] <PerlJam> greets #perl6

[12:59] <Matt-W> hi PerlJam

[13:00] <masak> ahoj PerlJam 

[13:01] <PerlJam> Matt-W: where's the code for Form?

[13:01] <Matt-W> github.com/mattw/form

[13:03] <PerlJam> Matt-W: have you blogged about it?  

[13:03] <Matt-W> no

[13:03] <Matt-W> I blogged about some grammar things which I learned while writing it

[13:03] <Matt-W> but not about it in particular

[13:03] <Matt-W> not yet, anyway. I will do.

[13:03] <PerlJam> Seems like a good way to get other people  to help you hack on it if you write a blog that shows where it's at and how to start using it (or where it needs hacking)

[13:04] <masak> indeed.

[13:04] <Matt-W> Yes

[13:04] <Matt-W> And get it on Planet Perl 6, too

[13:05] <PerlJam> btw, anyone know of an updated perl6 syntax file for vim that understands $foo-bar-baz  ?

[13:05] <Matt-W> Mine seems to

[13:05] <PerlJam> All my identifiers stop at the first -

[13:05] <Matt-W> hmm

[13:05] <PerlJam> (well, the coloration does  :)

[13:06] <Matt-W> don't think mine do

[13:06] <Matt-W> But I don't use many variable identifiers that long

[13:06] <Matt-W> and method names don't highlight, so...

[13:06] <PerlJam> and it's starting to get annoying as I look at more and more code that uses -

[13:06] <moritz_> PerlJam: the one from literal++ works fine here

[13:06] <masak> dang, I should start using that one.

[13:07] <masak> I do most of my Perl 6 coding in vim.

[13:07] <PerlJam> moritz_: where's it at?

[13:07] <moritz_> PerlJam: http://github.com/hinrik/vim-perl

[13:07] <PerlJam> gracias

[13:08] <PerlJam> github is like the new CPAN :)

[13:09] <Matt-W> no not really

[13:09] <Matt-W> it's just a good git service

[13:09] <Matt-W> the new CPAN will be rather different :)

[13:10] <moritz_> I hope that the new CPAN will be just the old CPAN, but improved

[13:10] <masak> I'm very skeptical to the concept of a 'new CPAN'.

[13:11] <Matt-W> I'd like a new CPAN.pm

[13:11] <Matt-W> CPAN itself is in fairly reasonable shape

[13:11] <PerlJam> masak: why is that?

[13:11] <moritz_> masak: speaking of which, having proto installing Perl 6 modules from cpan.org would be great ;-)

[13:11] <PerlJam> Matt-W: CPAN needs more meta-data for perl6, but I agree :)

[13:12] <Matt-W> PerlJam: Obviously some extensions needed for Perl 6 support

[13:12] <masak> PerlJam: it seems to me that many people think that tearing down everything and starting over is a good idea, and that calling it 'the new CPAN' would somehow make it just as successful as the old one.

[13:12] <Matt-W> Pod, for starters

[13:12] <masak> moritz_: that could be arranged. :)

[13:12] <Matt-W> moritz_: sure, you could write that :P

[13:12] * Matt-W hides

[13:13] <masak> moritz_: I'll make some attempts soonish.

[13:13] <PerlJam> masak: perhaps. Or you could look at it as the existing CPAN was the "one to throw away" and that the new CPAN will build on lessons learned  (I'm optimistic regarding my fellow humans :)

[13:14] <moritz_> PerlJam: problem is that *we* didn't build CPAN, so *we* didn't learn the lessons. Maybe Jarkko could build a new, better CPAN, but I bet he's either too busy or not convinced that we need a new one

[13:17] <Matt-W> I don't see a problem with extending CPAN to have the idea of modules being in Perl 6 or Perl 5, and learning to handle Pod. I don't see why that wouldn't be sufficient.

[13:17] <DanielC> Matt-W: You mean it won't?  ;-)

[13:17] <Matt-W> No

[13:17] <Matt-W> I mean as far as I can see, it would be

[13:18] <PerlJam> Matt-W: you mean, Perl 5, Perl 6, or Parrot right?

[13:18] *** FurnaceBoy joined
[13:19] <DanielC> As long as you can add additional metadata, I don't see why CPAN could not hold Perl 5, Perl 6 and Parrot modules. Then again, what do I know?

[13:19] <PerlJam> DanielC: or PHP or Ruby or Haskell or C or ...

[13:20] * PerlJam tests everyones hot button  :)

[13:20] <DanielC> PerlJam: There are those who might object (personally *I* don't care).

[13:22] <masak> me neither. but there's a "What CPAN is not" document out there that does.

[13:22] <DanielC> yes

[13:22] *** sbilik left
[13:23] *** alester joined
[13:23] <DanielC> So it's better to assume that "CPAN 6" or whatever, will not carry PHP and Ruby modules.

[13:23] <masak> depends on who builds the CPAN 6 or whatever.

[13:23] <PerlJam> indeed

[13:23] <lichtkind> moritz_: things like infix and quote are they called macro adverbs or how?

[13:26] <skids> Not sure there's a name for the "infix" in "infix:<...>".  It's just an identifier, albiet one that has reserved meaning.

[13:26] *** alester left
[13:26] <masak> skids: S02 calls them 'category'.

[13:26] <PerlJam> I get the feeling (and I could be completely wrong) that if TimToady were revamping CPAN for perl 6 that he would pun it to be the "comprehensive programmer's archive network" so that it could work for any language.

[13:27] <masak> PerlJam: thing is, again, that neither we nor TimToady are running CPAN.

[13:27] <PerlJam> yep.

[13:28] <PerlJam> (I just wish more people had the TimToady nature :)

[13:28] <DanielC> And the best way to kill a volunteer effort is to start telling them what to do.

[13:28] <skids> masask: cool.  The whole "infix:<...>" construct does have a name.... "extended identifier"

[13:28] <lichtkind> skids , masak or operator scope?

[13:28] <masak> skids: oh, I didn't know that.

[13:28] <masak> lichtkind: sorry?

[13:29] <lichtkind> masak: you said category, but s02 calles them also operator scope

[13:29] <masak> lichtkind: I took 'category' from S02:3752.

[13:30] <lichtkind> masak: how you find linenumbers?

[13:30] <masak> lichtkind: if you read the .pod files, it's easy.

[13:30] <masak> lichtkind: if you read the HTML, View Source and look for anchors.

[13:30] <skids> The anchors have been removed.

[13:30] <masak> really? why?

[13:31] <skids> I think because they were really hosing up browsers?

[13:31] <PerlJam> crazy

[13:31] <skids> POD needs an explicit invisible anchor directive, really.

[13:32] <masak> why in the would would anchors hose up browsers?

[13:33] <skids> I don't know if that was why.  I do know they made text searching the HTML even worse than it is now.

[13:34] <masak> too bad. it was convenient to be able to link to the line number anchors.

[13:34] <Matt-W> PerlJam: once you extend to two languages, I would expect it to be easier to add the third if one would wish to. I'm not sure it's the place for Parrot things though.

[13:35] <skids> Line numbers really aren't the best way to do it anyway, so I'm not really broken up about it.  If someone were to provide a way to name paragraphs in pod, I'd personally go through and put anchors in by hand.

[13:35] <skids> (We do need a replacement,)

[13:36] *** sbilik joined
[13:36] *** DemoFreak left
[13:47] *** payload joined
[13:53] *** rfordinal left
[13:53] *** rfordinal joined
[14:00] *** iblechbot joined
[14:01] *** ascent__ joined
[14:01] *** ascent__ left
[14:02] *** macae joined
[14:04] <masak> rakudo: sub postcircumfix:<[ ]>(Str $s, @i) { my $res = ""; for @i { $res ~= substr($s, $_, 1) }; $res }; say "OH HAI WORLD"[7,0,7,2,9,4,-1]

[14:04] <p6eval> rakudo 9dc941: OUTPUT«WOW RAD␤»

[14:05] <moritz_> ???

[14:05] <masak> :)

[14:06] <moritz_> rakudo: sub postcirumfix:<[ ]>() { }; my @a = 1, 2, 3; say @a[0]

[14:06] <p6eval> rakudo 9dc941: OUTPUT«1␤»

[14:06] <moritz_> so it's a sub that's used as fallback if the method dispatch fails?

[14:06] <masak> I have no idea.

[14:06] <moritz_> rakudo: sub postcirumfix:<[ ]>() { }; "foo"[3]

[14:06] <p6eval> rakudo 9dc941: OUTPUT«Method 'postcircumfix:[ ]' not found for invocant of class 'Str'␤»

[14:06] <masak> I didn't even reflect on the fact that I didn't write 'multi'.

[14:07] <[particle]> isn't it multi by default?

[14:08] <masak> I don't know.

[14:08] <moritz_> [particle]: only if there's a proto declared

[14:08] <[particle]> right.

[14:08] <[particle]> so, the question is: are all builtin ops proto by default?

[14:08] <moritz_> yes

[14:09] <[particle]> then there you go, multi not needed.

[14:09] <moritz_> but still postcircumfix should be a method, no?

[14:10] <[particle]> rakudo: sub postcircumfix:<[ ]>(Str $s: @i) { my $res = ""; for @i { $res ~= substr($s, $_, 1) }; $res }; say "OH HAI WORLD"[7,0,7,2,9,4,-1]

[14:10] <p6eval> rakudo 9dc941: OUTPUT«error:imcc:syntax error, unexpected IDENTIFIER ('self')␤   in file 'EVAL_24' line 102␤too many arguments passed (2) - 1 params expected␤in sub postcircumfix:[ ] (/tmp/4NJRkuTmfe:1)␤called from Main (/tmp/4NJRkuTmfe:2)␤»

[14:10] <[particle]> rakudo: method postcircumfix:<[ ]>(Str $s: @i) { my $res = ""; for @i { $res ~= substr($s, $_, 1) }; $res }; say "OH HAI WORLD"[7,0,7,2,9,4,-1]

[14:10] <p6eval> rakudo 9dc941: OUTPUT«WOW RAD␤»

[14:10] <[particle]> oops...

[14:11] <Matt-W> I think perhaps rakudo could have a better error message there

[14:11] <[particle]> it must be a method when defined with an invocant

[14:11] <[particle]> yes, indeed.

[14:11] <moritz_> rakudo: class Str is also { method postcircumfix:<[ ]>() { say self } }; "foo"[]

[14:11] <p6eval> rakudo 9dc941: OUTPUT«foo␤»

[14:11] <[particle]> better error messages wanted, and we'll have them when we move to STD.pm

[14:11] *** ejs2 left
[14:11] * Matt-W waits for masak to say he's filing a bug

[14:12] <[particle]> 'is also' still works?

[14:12] <moritz_> aye

[14:12] <moritz_> rakudo doesn't do 'augment' yet

[14:12] <masak> Matt-W: sorry, a bit distracted by $work.

[14:12] *** rfordinal left
[14:12] * masak files rakudobug

[14:12] <[particle]> std: sub postcircumfix:<[ ]>(Str $s: @i) { my $res = ""; for @i { $res ~= substr($s, $_, 1) }; $res }; say "OH HAI WORLD"[7,0,7,2,9,4,-1]

[14:13] <p6eval> std 27117:  ( no output )

[14:13] <PerlJam> Matt-W: we should follow masak's example and submit more rakudo bugs ourselves.

[14:13] <[particle]> std: sub postcircumfix:<[ ]>(Str $s: @i) { my $res = ""; for @i { $res ~= substr($s, $_, 1) }; $res }; say "OH HAI WORLD"[7,0,7,2,9,4,-1]

[14:13] <p6eval> std 27117:  ( no output )

[14:13] <[particle]> std: sub postcircumfix:<[ ]>(Str $s: @i) { my $res = ""; for @i { $res ~= substr($s, $_, 1) }; $res }; say "OH HAI WORLD"[7,0,7,2,9,4,-1]

[14:13] <Matt-W> PerlJam: I submit my own, I just don't find very many first

[14:13] <p6eval> std 27117:  ( no output )

[14:13] <[particle]> std: 1

[14:13] <p6eval> std 27117: OUTPUT«ok 00:02 35m␤»

[14:13] <pmichaud> rakudo: sub postcircumfix:<[ ]>(Str $s, Int $i) { substr($s, $i, 1) };  say "OH HAI WORLD"[7];

[14:13] <phenny> pmichaud: 09:28Z <viklund> tell pmichaud could you just tell me if there is any point in doing this: http://irclog.perlgeek.de/perl6/2009-06-18#i_1248789

[14:13] <p6eval> rakudo 9dc941: OUTPUT«W␤»

[14:13] <pmichaud> rakudo: sub postcircumfix:<[ ]>(Str $s, Int $i) { substr($s, $i, 1) };  say "OH HAI WORLD"[7,0,7];

[14:13] <p6eval> rakudo 9dc941: OUTPUT«Parameter type check failed; expected something matching Int() but got something of type List() for $i in call to postcircumfix:[ ]␤in sub postcircumfix:[ ] (/tmp/TiTRhq4Zyz:2)␤called from Main (/tmp/TiTRhq4Zyz:2)␤»

[14:14] *** sbilik left
[14:14] <pmichaud> rakudo: class Str is also { method postcircumfix:<[ ]>(Str $s: Int $i) { substr($s, $i, 1) }; };  say "OH HAI WORLD"[7,0,7];

[14:14] <p6eval> rakudo 9dc941: OUTPUT«Parameter type check failed; expected something matching Int() but got something of type List() for $i in call to postcircumfix:[ ]␤in method Str::postcircumfix:[ ] (/tmp/OX2A0MvYU5:2)␤called from Main (/tmp/OX2A0MvYU5:2)␤»

[14:15] <pmichaud> rakudo: class Str is also { method postcircumfix:<[ ]>(Int $i) { substr(self, $i, 1) }; };  say "OH HAI WORLD"[7,0,7];

[14:15] <p6eval> rakudo 9dc941: OUTPUT«Parameter type check failed; expected something matching Int() but got something of type List() for $i in call to postcircumfix:[ ]␤in method Str::postcircumfix:[ ] (/tmp/odBNU2a4TB:2)␤called from Main (/tmp/odBNU2a4TB:2)␤»

[14:15] <pmichaud> hmmpf.

[14:15] <Matt-W> shouldn't it be Int @i?

[14:15] <[particle]> (Int $i) ... [7,0,7]

[14:15] <pmichaud> Yes, I know.

[14:16] <pmichaud> I'm wanting it to fall back to the default postcircumfix case that accepts a list.

[14:16] <[particle]> does Str have that?

[14:16] <moritz_> no

[14:16] <[particle]> so it can't fall back.

[14:17] <pmichaud> no, but in Rakudo atm postcircumfix:<[ ]> is a multisub, not strictly a method.

[14:17] <Matt-W> But would the multi match against a string?

[14:17] * PerlJam impatiently waits for a diff of two very large files

[14:17] <pmichaud> so   "OH HAI"[1,0,1]  is really   postcircumfix:<[ ]>("OH HAI", 1, 0, 1)

[14:18] <[particle]> PerlJam: try diff -j9 ;)

[14:18] <pmichaud> and *that* version of postcircumfix should be breaking down the list into individual Int method calls.

[14:18] <PerlJam> :)

[14:18] *** raig left
[14:19] <pmichaud> it might be that I really need Str to "does Positional" in order for that to work, though.

[14:19] <[particle]> yeah, right.

[14:19] <[particle]> how do you mix in that role to an existing type?

[14:19] *** DanielC left
[14:19] <[particle]> class string is also does Positional?

[14:20] <masak> [particle]: augment Str { does Positional }

[14:20] <[particle]> augment class Str { does Positional }

[14:20] <[particle]> ok.

[14:20] <ruoso> hmm... that would be intesting...

[14:20] <pmichaud> I don't know.  At any rate, I'll look at it some other time.

[14:20] <[particle]> why do my fingers keep typing 'class' there? sigh.

[14:23] *** jferrero left
[14:23] *** rjh joined
[14:23] <masak> [particle]: in 'augment class Str'. I think that might be right.

[14:24] <moritz_> std: augment class Str { ... }

[14:24] <pmurias> pmichaud: Str can't do Positional as the unit for the indexes isn't defined by default

[14:24] <p6eval> std 27117: OUTPUT«ok 00:02 35m␤»

[14:24] <moritz_> aye, you can also augment slangs

[14:26] *** AzureStone joined
[14:26] <pmurias> the chars/bytes/graphs/codes return the number of the given thing how do i split a string into an array of that things?

[14:27] *** goksie joined
[14:28] <masak> std: augment slang Regex {}

[14:28] <p6eval> std 27117: OUTPUT«ok 00:02 35m␤»

[14:28] *** bejuryu joined
[14:28] <masak> pmurias: do you want the things as numbers, or as something else?

[14:28] <moritz_> pmurias: with substr

[14:29] <moritz_> something like $str.substr(Codes(3))

[14:30] <PerlJam> I was thinking he could use comb

[14:30] <pmurias> moritz_: substr returns a string

[14:30] <PerlJam> But I don't know if you can actually twiddle the meaning of . in a regex in rakudo.

[14:30] <moritz_> PerlJam: not in rakudo, but it's specced that way

[14:31] <moritz_> $str.comb(rx:codes/./)

[14:31] <pmurias> masak: that's a hard question, maybe strings

[14:32] <masak> pmurias: I'm here to ask the hard questions. :)

[14:32] <masak> pmurias: it seems to me not everything on those levels can be returned as strings.

[14:33] <pmurias> i was just wondering if those methods could do spliting in list context

[14:33] <moritz_> right, a collection of bytes would be a Buf

[14:33] <PerlJam> pmurias: that would seem reasonable to me.  :)

[14:34] <moritz_> not to me, because the method doesn't know its context

[14:34] <pmurias> why not?

[14:35] <moritz_> pmurias: for the same reasons we want to abolish want()

[14:35] <PerlJam> Hmm.

[14:35] <moritz_> multi a(Int $x) { ... }; multi a (*@x) { ... }; a($str.bytes) # which multi does it call? which context is it in?

[14:35] <PerlJam> what about an adverb on Str?   $s:chars

[14:36] <moritz_> adverbs are defined on operators, not on nouns

[14:36] <moritz_> $str.to('codes')

[14:36] <PerlJam> $str.as('codes')  maybe?

[14:37] <PerlJam> doesn't "as" already do something?

[14:37] <moritz_> right, that's better

[14:37] <moritz_> PerlJam: not as a method

[14:37] <moritz_> sub($x as Str) { ... } # coerces $x to Str

[14:38] *** jaldhar_ left
[14:39] <PerlJam> I never know where to draw the line on context sensitivity.  It still seems that using "as" for two different things (even though in different contexts) could cause confusion.

[14:40] <moritz_> maybe the solution is really to introduce a new Str type for every unicode level

[14:40] <moritz_> we have Buf for the byte level already

[14:40] <PerlJam> my only reaction to that is "yuck"  :)

[14:40] <moritz_> we could have Codes and Graphs, and they can do Str

[14:41] <PerlJam> and Words and Sentences too!

[14:41] <moritz_> Perl 5 showed how bad it was two have two different levels (bytes vs. codes) in one type (SV)

[14:42] *** jan_ joined
[14:43] <PerlJam> I still look at it as you have one thing that has many potential representations.  I don't care what the underlying implementation does as long as I can get the representation I want.

[14:44] *** pyrimidine joined
[14:44] *** jaldhar_ joined
[14:45] *** goksie left
[14:46] *** alester joined
[14:47] <PerlJam> anyway, what makes the most sense to me is that $string.chars returns a list of characters and $string.bytes returns a list of bytes and that to actually get a count, you evaluate in a numeric context.

[14:48] <moritz_> think about performance for a moment... :/

[14:48] <PerlJam> I'll leave that to an optimizer  :)

[14:51] <masak> moritz_: is it a much heavier operation to collect the bytes/codes/chars than to count them?

[14:52] <masak> for what it's worth, there have been times when I've been thinking PerlJam's thought too.

[14:52] <PerlJam> unless someone comes up with something wonderful, the other way makes less sense.   why have all of these ways to count the number of bytes,chars,graphemes,etc. in a string with a less-than-obvious way to get the actual bytes, chars, graphemes, etc.

[14:52] <moritz_> masak: at least it needs much more memory

[14:52] <masak> moritz_: true.

[14:52] <moritz_> O(n) vs. O(1)

[14:55] <masak> 对对对

[14:59] *** bejuryu left
[14:59] *** pyrimidine_ joined
[15:01] *** nihiliad joined
[15:08] <payload> i try to get the example/adventure running in rakudo

[15:08] <payload> the error messages are no help ^^

[15:09] <masak> no, they often aren't.

[15:10] <xinming_> masak: LOL at 对对对

[15:10] <masak> xinming_: sometimes I think in Mandarin. :)

[15:10] *** zamolxes left
[15:11] <xinming_> masak: I really suggest people who use perl learn Chinese. :-)

[15:11] <payload> even no line numbers... :-/

[15:11] <masak> I think the closest translation to English would be 'nodnodnod' or 'rightrightright'...

[15:11] *** Chillance left
[15:11] <xinming_> masak: yeayeayea~~~~

[15:11] <xinming_> Or, Oh-Yea~~~

[15:12] *** Chillance joined
[15:12] <xinming_> BTW, the reason I laugh at 对对对 is because, Who are you talking to. :-)

[15:12] <TimToady> us

[15:12] <masak> :)

[15:13] <masak> we're polyglots in here. Mandarin, Slovak, Lolspeak... it's all the same.

[15:13] <TimToady> or should I say

[15:13] <TimToady> 我們

[15:13] <pugs_svn> r27118 | moritz++ | [examples] fix small error in adventure.pl

[15:14] <masak> TimToady: not if you're speaking to a mainlander.

[15:14] <masak> then it's 我们

[15:14] <TimToady> 我们 then

[15:15] * PerlJam is just an american who has picked up bits and pieces of other languages.

[15:15] <xinming_> masak: I can read that, traditional Chinese and Simpleified chinese is easy for Chinese people to read.

[15:15] <pugs_svn> r27119 | moritz++ | [examples] use input method that Rakudo understands

[15:15] <PerlJam> (I have no clue about Chinese though)

[15:15] <masak> TimToady: 对了 :)

[15:15] <moritz_> wtf? 

[15:15] <moritz_> positional inside named args at position 2

[15:15] <moritz_> in regex Adventure::command (adventure.pl:9)

[15:16] <TimToady> masak: :)

[15:16] <masak> xinming_: yes, you're right. I kinda envy you that -- I have to work a lot to get the traditional ones right.

[15:16] *** pyrimidine left
[15:17] <pugs_svn> r27120 | moritz++ | [examples] fix grammar usage

[15:18] <moritz_> uuh, I found another rakudobug

[15:18] <moritz_> run 'perl6 adventure.pl' and enter "west" at the prompt

[15:18] <moritz_> it says "Lexical '%map' not found"

[15:18] * masak tries

[15:19] <moritz_> %map is only used in two places

[15:19] <moritz_> and in both of them it should be lexically visible

[15:19] *** canol joined
[15:19] <payload> moritz_: cause of the     module main;

[15:19] <moritz_> payload: ah, yes

[15:20] *** donaldh left
[15:20] <moritz_> then it's a known bug

[15:20] *** eMaX left
[15:20] <payload> :-\

[15:20] <pugs_svn> r27121 | moritz++ | [examples] work around rakudo bug

[15:20] *** canol left
[15:20] <moritz_> ok, it does very simple operations now

[15:20] *** donaldh joined
[15:21] *** ZuLuuuuuu joined
[15:21] <xinming_> masak: I envy you that you read technical documentation much easier than me. :-P

[15:21] *** xinming_ is now known as xinming

[15:21] <masak> xinming: I guess all the envy evens out. :P

[15:23] <xinming> masak: for the tradition -> simplified or vice versa, You just just need to read more and be careful when you meet a radical on one side of a character

[15:24] <masak> xinming: that's certainly true for a large percentage of the characters out there.

[15:25] *** jaldhar_ left
[15:25] <xinming> There is no need to write both version of them, You only need to get one portion right. People can read easily, but remember to not to mix them, some people will go crazy.

[15:25] <masak> xinming: I won't mix, I promise.

[15:25] <masak> xinming: but I think I'll need to be able to read both.

[15:26] *** xinming_ joined
[15:26] *** justatheory joined
[15:30] *** justatheory left
[15:30] <TimToady> sometimes in Japanese you get yet a third variant

[15:30] *** sri_kraih_ left
[15:31] <masak> oh?

[15:31] <TimToady> 齊 vs 齐 vs 斉

[15:33] <payload> moritz_: well this workaround doesnt make the adventure compile but not fun ^^ http://pastebin.com/d341b7bb1

[15:33] <TimToady> or 龜 vs 龟 vs 亀

[15:33] <masak> traditional, simplified, and... quirky? :)

[15:33] <moritz_> payload: I know, I just wanted to give you a head start

[15:33] <payload> allready on it ^^

[15:34] <moritz_> uhm, why doesn't this error message contain a line number?

[15:34] <moritz_> rakudo: .[1]

[15:34] <p6eval> rakudo 9dc941: OUTPUT«Method 'postcircumfix:[ ]' not found for invocant of class 'Failure'␤»

[15:34] <moritz_> masak: care to bugreport it?

[15:34] <TimToady> 單 vs 单 vs 単

[15:35] <masak> moritz_: okie.

[15:35] * masak bug-reports

[15:36] <masak> sometimes I think that Failure should really allow itself to be indexed with [] and {}, and just return another Failure.

[15:36] <TimToady> and 壓 vs 压 vs 圧

[15:36] <masak> that would be more in line with Perl 5.

[15:36] <masak> TimToady: did Japan have two waves of simplification?

[15:38] <TimToady> I don't think there are enough examples to call it a wave, quite

[15:38] <masak> then whence the three variants?

[15:38] <TimToady> I only have one other example, which is

[15:38] <TimToady> 爾 vs 尔 vs 尓

[15:39] <masak> the difference between the last two is very slight in my font.

[15:39] <TimToady> I'd guess there were probably already some "abbreviations" in use when they were borrowed

[15:41] <masak> ah. makes sense.

[15:41] <TimToady> the last one could just be a miscopying

[15:42] <TimToady> but by and large Japanese uses the traditional forms

[15:43] <TimToady> as for actual waves of borrowing, I think there were about three

[15:43] <TimToady> with the result that some characters have several different "chinese" pronunciations

[15:43] <masak> that goes for the Hanzi, too.

[15:43] <TimToady> depending on the state of the evolution of chinese when they were borrowed

[15:43] *** xinming left
[15:44] <TimToady> in the case of Hanzi it might be the rediffusion of dialectal differences brought about by rate skew

[15:45] <TimToady> centers of population have much faster language change than the outlying areas

[15:45] *** sri_kraih joined
[15:45] <masak> might be. and the mutation clock ticks differently for different characters too, it seems.

[15:45] <TimToady> and the closest we have to elizabethan english is actually in appalachia

[15:45] *** eMaX joined
[15:46] <[particle]> word.

[15:46] <TimToady> well, if I keep gabbing I'll never finish backlogging...

[15:47] <masak> The gabbing is to 阳 as the backlogging is to 阴... :)

[15:48] <TimToady> heh, didn't recognize those since Japanese uses the traditional

[15:48] <TimToady> but they make sense

[15:49] <masak> they do indeed.

[15:49] * masak looks up the traditional ones

[15:50] <TimToady> traditional uses radicals I call "sunny" and "murky"

[15:50] <masak> ...which also makes sense.

[15:50] <masak> given the etymology of Yang and Yin.

[15:50] *** CarlJ joined
[15:50] <masak> "the sunny/shady side of a brook or hill"

[15:51] *** CarlJ left
[15:51] <TimToady> yes, I call 阝 "mound"

[15:52] <TimToady> (when it's on the left, and "city" on the right)

[15:52] <masak> 对.

[15:54] *** dukeleto joined
[15:54] <TimToady> murky 侌 has "now" on top and "roil" on the bottom, cf 雲 cloud

[15:54] *** dakkar left
[15:55] *** dukeleto left
[15:55] <masak> clouds are notoriously murky.

[15:56] * alester renewed rakudo.org today

[15:56] <alester> I like playing chicken with the registrar.

[15:57] <TimToady> bock bock  # I also speak chicken

[15:58] *** finanalyst joined
[16:00] <[particle]> yes, but do you use the chicken unicode characters?

[16:01] <TimToady> sure, but they all look like scratches to me

[16:03] *** dukeleto joined
[16:06] *** bejuryu joined
[16:06] *** masak left
[16:07] <dalek> rakudo: 6765def | pmichaud++ | docs/spectest-progress.csv:

[16:07] <dalek> rakudo: spectest-progress.csv update: 404 files, 11536 passing, 0 failing

[16:07] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/6765def9568a106f029a8f39d44b739242d20fa0

[16:12] *** DemoFreak joined
[16:12] *** azawawi joined
[16:12] * moritz_ does a spectest now with parrot's release version

[16:17] <moritz_> rakudo: my $b = 2; $b R/= 24; say 2

[16:17] <p6eval> rakudo 9dc941: OUTPUT«No applicable methods.␤in Main (/tmp/rtwrpAXhvJ:2)␤»

[16:17] <moritz_> rakudo: my $b = 2; $b R/= 24; say $b

[16:17] <p6eval> rakudo 9dc941: OUTPUT«No applicable methods.␤in Main (/tmp/g21j0NicpH:2)␤»

[16:17] <moritz_> should that work (and print out 12)?

[16:17] <moritz_> std: rakudo: my $b = 2; $b R/= 24; say $b

[16:17] *** Psyche^ joined
[16:17] <p6eval> std 27121: OUTPUT«##### PARSE FAILED #####␤Can't reverse a multiplicative because it's too fiddly at /tmp/2a9QuoXPOD line 1:␤------> rakudo: my $b = 2; $b R/= 24; say $b␤FAILED 00:02 36m␤»

[16:18] <TimToady> actually, I think it's complaining about reversing an assignop

[16:18] <TimToady> despte the mention of "multiplicative"

[16:18] <azawawi> hi

[16:19] <TimToady> azawawi: your .parse('') bug is not obvious, but I'll explore further

[16:19] <TimToady> seems to blow up somewhere down in LTM for $

[16:20] <azawawi> std: module JSON::String { }

[16:20] <p6eval> std 27121: OUTPUT«panic: unexpected package name &JSON::String␤ok 00:02 35m␤»

[16:21] <TimToady> look like it's confused about Foo vs &Foo somehow

[16:21] <TimToady> but it does say "ok"

[16:22] <azawawi> TimToady: also that's not neither an error nor a warning

[16:23] <TimToady> yeah, it's just a 'say'

[16:23] <TimToady> basically means that when we generate &Foo from Foo, nobody's bothering to handle :: correctly

[16:24] <TimToady> so the name '&JSON::String' is getting poked into the symbol table directly

[16:24] <TimToady> rather than poking &String into our version of the JSON symbol table

[16:25] <TimToady> which is what ought to happen, I think

[16:26] <TimToady> that is, MY<JSON::><&String>

[16:26] <azawawi> TimToady: i caught it while getting strange Storable thawing version errors in Padre Perl 6 plugin. I call a separate process in a background thread to perform the redspans....

[16:27] <TimToady> :: doesn't automatically mean start in GLOBAL:: as it does in p5

[16:28] <azawawi> i see

[16:28] <TimToady> especially if you're declaring something, it should be rooted in the current lexical space

[16:29] *** pjcj left
[16:30] *** bejuryu left
[16:33] *** Patterner left
[16:34] *** Psyche^ is now known as Patterner

[16:35] *** dukeleto left
[16:42] *** twigil left
[16:51] *** pyrimidine_ left
[16:52] *** eternaleye left
[16:56] *** ZuLuuuuuu left
[17:00] *** cdarroch joined
[17:23] *** mikehh_ joined
[17:30] *** rfordinal joined
[17:31] *** pyrimidine joined
[17:31] *** dukeleto joined
[17:36] *** molaf_x joined
[17:38] *** macae left
[17:38] *** mikehh left
[17:40] *** macae joined
[17:47] *** sparc_ left
[17:48] <pugs_svn> r27122 | pmichaud++ | [t/spec]:  Change an isa_ok to use a type instead of a Str.

[17:51] *** dukeleto left
[17:52] *** amoc left
[17:56] <pugs_svn> r27123 | lwall++ | [Cursor] fix azawawi++'s .parse('') bug

[17:58] <lichtkind> qw translates to Q :w // ?

[17:58] *** azawawi left
[17:58] *** Molaf left
[17:59] *** Molaf joined
[17:59] *** eternaleye joined
[17:59] <TimToady> Q:q:w actually

[18:00] <lichtkind> ah thanks

[18:00] <lichtkind> translates nicely

[18:00] <lichtkind> that elegance i like on perl 6

[18:01] <PerlJam> TimToady: does that make << >> equivalent of Q:qq:w  ?

[18:01] <pmichaud> :ww, I think

[18:01] <TimToady> Q:q:ww I think

[18:01] *** pmurias left
[18:01] <pmichaud> Q:qq:ww  I thought

[18:01] <TimToady> yes :qq:ww

[18:02] <TimToady> token quote:sym<« »>   { '«' <nibble($¢.cursor_fresh( %*LANG<Q> ).tweak(:qq).tweak(:ww).balanced('«','»'))> '»' }

[18:03] * [particle] checks STD for Q:snowman:comet

[18:03] <PerlJam> heh

[18:04] <TimToady> that's just <quibble($¢.cursor_fresh( %*LANG<Q> ).tweak(:q))>

[18:05] <PerlJam> perl6 is almost onomatopoeic .... nibble tweak tweak

[18:05] <TimToady> well, that's what would parse q☃...☄

[18:06] <lichtkind> [particle]: is there really a snowman in STD ?

[18:06] <Tene> Now... why is snowman paired with comet?

[18:06] <TimToady> rakudo: say q☃...☄

[18:06] <p6eval> rakudo 6765de: OUTPUT«Statement not terminated properly at line 2, near "\u2603...\u2604"␤in Main (src/gen_setting.pm:0)␤»

[18:06] <PerlJam> Tene: because certain #perl6 denizens are insane :)

[18:07] <TimToady> actually, the problem was in ranges

[18:07] <pmichaud> actually, in regexes

[18:07] <pmichaud> RT #66498

[18:07] <TimToady> regexes, they both begin with r

[18:07] <Tene> oh, that's a range.

[18:08] <pmichaud> rakudo:  say "abc" ~~ regex ☃...☄

[18:08] <p6eval> rakudo 6765de: OUTPUT«Malformed regex definition at line 2, near "\u2603...\u2604"␤in Main (src/gen_setting.pm:0)␤»

[18:08] <pmichaud> rakudo:  say "abc" ~~ rx ☃...☄

[18:08] <p6eval> rakudo 6765de: OUTPUT«abc␤»

[18:08] <TimToady> there you go

[18:08] <pmichaud> rakudo:  say "abc" ~~ m ☃...☄

[18:08] <p6eval> rakudo 6765de: OUTPUT«abc␤»

[18:09] <TimToady> rakudo:  say "abc" ~~ m ☃...☎

[18:09] <p6eval> rakudo 6765de: OUTPUT«abc␤»

[18:09] <TimToady> rakudo:  say "abc" ~~ m /...☎

[18:09] <p6eval> rakudo 6765de: OUTPUT«abc␤»

[18:09] <TimToady> just not very picky, is it...

[18:09] <PerlJam> Is there a white telephone to go with the black one?

[18:10] <TimToady> rakudo:  say "abc" ~~ m /...☏

[18:10] <p6eval> rakudo 6765de: OUTPUT«abc␤»

[18:10] <PerlJam> rakudo say "abc" ~~ m .....

[18:10] <PerlJam> rakudo: say "abc" ~~ m .....

[18:10] <mj41> http://www.perlmonks.org/?node_id=772603 Perl 6 and Web Development by jdrago_999

[18:10] <p6eval> rakudo 6765de: OUTPUT«Statement not terminated properly at line 2, near ".."␤in Main (src/gen_setting.pm:0)␤»

[18:11] <PerlJam> It's a little picky

[18:11] <TimToady> std: say "abc" ~~ m .....

[18:11] <p6eval> std 27123: OUTPUT«##### PARSE FAILED #####␤Can't understand next input--giving up at /tmp/FIiTRKmfYd line 1:␤------> ␤    expecting any of:␤     infix or meta-infix (with precedence tighter than list infix)␤    prefix or noun␤Undeclared routine:␤ m used at 1 1 ␤FAILED 00:04 38m␤»

[18:11] *** dukeleto joined
[18:11] <sbp> rakudo:  say "abc" ~~ m /…☏

[18:11] <p6eval> rakudo 6765de: OUTPUT«Statement not terminated properly at line 2, near "/\u2026\u260f"␤in Main (src/gen_setting.pm:0)␤»

[18:11] <pmichaud> hmmm.  I just got an inquiry from sdtimes -- they want to interview me about Perl 6 and Parrot.

[18:12] <TimToady> San Diego?

[18:12] <pmichaud> yes.

[18:12] * Tene google sdtimes

[18:12] <pmichaud> the same group that published http://www.sdtimes.com/link/33186

[18:12] <moritz_> uhm, their homepage is... borked

[18:13] <pmichaud> (but not the same writer/author, it seems)

[18:13] *** dukeleto left
[18:13] <moritz_> that links only gives me "Server Error in '/' Application."

[18:13] <pmichaud> moritz_: odd.  It works for me.

[18:15] <moritz_> both in opera and iceweasel

[18:15] <Tene> WFM

[18:16] <Tene> pmichaud: going to take the interview?

[18:16] <pmichaud> Yes, likely.

[18:16] <pmichaud> I can't think of any good reasons not to.

[18:16] <pmichaud> this inquiry appears to be coming from a "Senior Editor" so

[18:17] <pmichaud> it sounds like a good idea to me.

[18:17] <PerlJam> pmichaud: It's an ambush.  They're going to ask you all sorts of positive sounding questions then write the article in such a way to make  the answers sound horrendous.

[18:17] <PerlJam> How about that ?

[18:17] <PerlJam> :-)

[18:18] <sbp> answer their questions only in PIR

[18:18] <pmichaud> PerlJam: I thought about that possibility, yes.  But that doesn't strike me as a "good reason" yet :-)

[18:18] *** ejs0 joined
[18:18] *** justatheory joined
[18:20] <PerlJam> pmichaud: well, at least you'll get a chance to spread the word about perl6 and the community and how people can participate 

[18:20] <pmichaud> Exactly.

[18:21] *** dukeleto joined
[18:33] <payload> how can i take all but the last item of an array?

[18:33] <payload> rakudo: say (1,2,3,4)[0..*-2]

[18:33] <p6eval> rakudo 6765de: OUTPUT«123␤»

[18:33] <moritz_> it's... magic

[18:34] <moritz_> rakudo: say (0..*-2).perl

[18:34] <payload> hope so ^^

[18:34] <p6eval> rakudo 6765de: OUTPUT«{ ... }␤»

[18:34] <payload> :-\

[18:34] <moritz_> rakudo: say (0..*-2).(10).perl

[18:34] <p6eval> rakudo 6765de: OUTPUT«0..8␤»

[18:34] <moritz_> it's a closure returning a range

[18:34] <payload> 0..*-2    for all but last?!

[18:35] <payload> the -2 strikes me

[18:35] <moritz_> -1 is the last item

[18:35] <moritz_> which is what you want when you do @a[*-1]

[18:36] <pugs_svn> r27124 | lwall++ | [STD] Makefile now has 'snap' target for transactional snapshot in snap/

[18:36] <payload> yeah, but i thought there was something shorter to make (1,2,3) out of (1,2,3,4)

[18:36] <TimToady> moritz_: are you on feather?

[18:36] <payload> in python ^^ [:-1]

[18:37] <moritz_> TimToady: no, on timtowtdi.org ;-)

[18:37] <moritz_> TimToady: I can give you an account, or do it myself

[18:37] <TimToady> we need to update the cron to do 'make snap'

[18:37] <TimToady> I have an account, just not sure where it runs

[18:37] <moritz_> ... and run STD.pm in snap/

[18:37] <TimToady> run tryfile in snap

[18:37] <moritz_> on timtowtdi.org?

[18:38] <TimToady> wherever evalbot runs

[18:38] <TimToady> should prevent the (no output)s

[18:38] <moritz_> it's in /chroot/home/evalenv/

[18:38] *** mikehh_ left
[18:39] *** pyrimidine left
[18:39] <TimToady> I don't think I have an account on timtowtdi

[18:40] <moritz_> TimToady: if 'make snap' wouldn't run tryfile STD.pm, the build would be much faster ;-)

[18:40] <pugs_svn> r27125 | moritz++ | [evalbot] run STD.pm in snap/

[18:40] *** p6eval left
[18:40] *** p6eval joined
[18:40] <TimToady> tryfile STD is what builds up most of lex

[18:41] <moritz_> ah, so it's necessary

[18:41] <TimToady> well, if you want the cache preloaded, which might prevent a few races

[18:42] <moritz_> test -d snap && mv snap snap.old

[18:42] <moritz_> make: *** [snap] Error 1

[18:42] <TimToady> but since building it is part of the snapshot, it no longer is on the critical path for evalbot

[18:42] <TimToady> heh

[18:42] <TimToady> I guess it wants a -f then

[18:43] *** eternaleye left
[18:43] * moritz_ tries with -f

[18:44] <TimToady> course, it already moved lex/...

[18:44] <TimToady> so will probably rebuild it again

[18:44] <TimToady> or blow up on the mkdir

[18:44] <TimToady> feel free to Make It Work :)

[18:45] <TimToady> I have verified that once it's happy, you can make new snapshots without clobbering an existing t/ test

[18:46] <TimToady> though the test targets don't make use of the snapshot yet

[18:47] <TimToady> should probably throw an rm -rf snap.new before the mkdir, I suppose

[18:47] <TimToady> but basically, it's doing a poor man's install

[18:48] <moritz_> I'll play a bit with it

[18:49] <TimToady> thanks

[18:51] *** hercynium joined
[18:53] *** p6eval left
[18:54] *** p6eval joined
[18:54] <pugs_svn> r27126 | moritz++ | [STD.pm] make "make snap" work for me.

[18:55] <moritz_> std: 1

[18:55] <p6eval> std 27126:  ( no output )

[18:55] <TimToady> orz

[18:55] <TimToady> pulling output from wrong dir?

[18:57] *** p6eval left
[18:57] *** p6eval joined
[18:57] <moritz_> std: 1

[18:57] <p6eval> std 27126:  ( no output )

[18:57] <moritz_> sh: line 1: 21631 CPU time limit exceeded /usr/bin/perl tryfile /tmp/RnliDbJR3C >> /tmp/0uanAUGeM7 2>&1

[18:58] <TimToady> another reason to prebuild the cache...

[18:59] <TimToady> std: 1

[18:59] <pugs_svn> r27127 | moritz++ | [evalbot] tweak CPU limit a bit

[18:59] <p6eval> std 27126: OUTPUT«ok 00:02 35m␤»

[18:59] *** p6eval left
[18:59] <TimToady> maybe rebuilding CORE.pad.store

[19:00] *** p6eval joined
[19:00] <TimToady> we could copy that down to snap as well to avoid rebuild

[19:00] <payload> i fixed adventure.pl for rakudo http://pastebin.com/m1aaadf3a

[19:01] *** athomason joined
[19:01] <moritz_> payload: if you tell me your email address I can give you commit access to the pugs repo

[19:01] <moritz_> payload: then you can push your fixes

[19:01] *** alester left
[19:01] *** alester joined
[19:03] <pugs_svn> r27128 | moritz++ | [STD.pm] also copy CORE.pad.store

[19:04] <pmichaud> rakudo:  say (0,1,2,3)[^*-1]

[19:04] <p6eval> rakudo 6765de: OUTPUT«Use of uninitialized value␤␤»

[19:04] <pmichaud> oh, we don't have prefix:^ handling whatevercode yet.

[19:04] <moritz_> wouldn't you need ^(*-1) anyway?

[19:04] <pmichaud> probably.

[19:05] <payload> moritz_: [email@hidden.address]
[19:05] <pmichaud> however

[19:05] <pmichaud> rakudo:  say (0,1,2,3)[0..^*-1]

[19:05] <p6eval> rakudo 6765de: OUTPUT«012␤»

[19:05] <pmichaud> there.

[19:05] <pmichaud> "up to but not including the last element"

[19:05] <TimToady> more readable anyway

[19:05] <moritz_> payload: you've got mail

[19:05] <payload> rakudo: say (1,2,3,4)[0..^*]

[19:05] <p6eval> rakudo 6765de: OUTPUT«1234␤»

[19:06] *** azawawi joined
[19:06] <moritz_> payload: it's a custom to add yourself to AUTHORS in the first commit, to test the commit bit

[19:06] <TimToady> it's also a custom to tell people that on IRC rather than having the email say it :)

[19:07] <TimToady> I think it's a good custom, actually.

[19:07] <lichtkind> whats that quote protection in :ww ?

[19:07] <TimToady> it means "make it work like shell quotes"  :)

[19:08] <pmichaud> lichtkind: my $b = 'foo bar';   say <<$b>>.elems; #(2)  say <<"$b">>.elems;  #(1)

[19:08] <pmichaud> rakudo:  my $b = 'foo bar';   say <<$b>>.elems;

[19:08] <p6eval> rakudo 6765de: OUTPUT«1␤»

[19:08] <pmichaud> argggggh

[19:08] <pmichaud> rakudo--

[19:08] <TimToady> with an emphasis on the "make it work" part :P

[19:09] <pmichaud> getting that to work like shell quotes is fairly tricky, fwiw.

[19:09] <lichtkind> so i can use "" within qw ?

[19:09] <TimToady> or ''

[19:09] <lichtkind> shure

[19:09] <lichtkind> thanks a lot

[19:09] <TimToady> presumably just like sh or maybe bash

[19:09] <TimToady> presumably *not* like csh

[19:10] <lichtkind> my $*OS eq 'XP'

[19:10] <TimToady> and probably not including `cmd`

[19:10] <pmichaud> I need to look at what STD produces for a parse in that case, but in rakudo's quasi-quote-parser it's a bit of a challenge to process the interpolated parts as things stand now.  :-|

[19:10] *** dukeleto left
[19:10] <TimToady> I suspect STD mostly punts on that one

[19:11] <pmichaud> Then Rakudo is following STD here.  :-P

[19:12] <sjohnson> try not to catch an STD

[19:12] <pmichaud> afk for a while

[19:14] <pugs_svn> r27129 | lwall++ | [STD] s/comb/words/ on 2 fossils

[19:16] *** stephan481 joined
[19:16] <lichtkind> TimToady++

[19:16] <lichtkind> moritz++

[19:17] *** justatheory left
[19:17] <lichtkind> if pmichaud would be here he would also get :)

[19:18] <TimToady> std: rx 𪚥...𪚥

[19:18] <p6eval> std 27129: OUTPUT«ok 00:03 36m␤»

[19:19] <TimToady> that's funny, the log seems to be missing the ...

[19:20] *** donaldh left
[19:20] <TimToady> std: rx 𪚥abcde𪚥

[19:20] <p6eval> std 27129: OUTPUT«ok 00:02 35m␤»

[19:21] *** donaldh joined
[19:21] <TimToady> oh, looks like my browser has that character as 0-width

[19:21] <TimToady> you'd think it'd know that a chinese character with 64 strokes would have some width...

[19:22] <TimToady> copy/pastes okay though

[19:22] <TimToady> so just a rendering glitch

[19:22] *** simcop2387 left
[19:23] <TimToady> ilbot++

[19:23] *** simcop2387 joined
[19:23] *** DanielC joined
[19:24] *** stephan481 left
[19:24] <lichtkind> at least quaoting ops are now cirrect in A

[19:24] *** pyrimidine joined
[19:25] *** eMaX left
[19:29] *** payload left
[19:29] *** payload joined
[19:30] <pugs_svn> r27130 | azawawi++ | [S:H:P6] Added an STD->parse('') test. TimToady++

[19:34] *** azawawi left
[19:40] *** solarion joined
[19:40] <pugs_svn> r27131 | azawawi++ | [S:H:P6] version 0.62 contains the STD->parse(\s*) not undefined fix

[19:42] *** eMaX joined
[19:46] *** macae left
[19:51] *** buubot left
[19:51] *** buubot joined
[19:55] *** Casan joined
[20:06] *** eternaleye joined
[20:18] *** molaf_x left
[20:22] *** ejs0 left
[20:33] <rindolf> Hi all.

[20:33] *** justatheory joined
[20:33] <rindolf> TimToady: here?

[20:35] *** rjh left
[20:36] *** rjh joined
[20:43] *** eMaX left
[20:48] *** pmurias joined
[20:49] *** meppl left
[20:56] *** payload left
[20:57] *** payload joined
[21:02] <pugs_svn> r27132 | payload++ | made adventure runnable for rakudo

[21:02] <payload> karma

[21:02] <moritz_> @karma payload 

[21:02] <lambdabot> payload has a karma of 1

[21:02] <payload> @karma moritz_

[21:02] <lambdabot> moritz_ has a karma of 72

[21:03] <moritz_> @karma moritz

[21:03] <lambdabot> moritz has a karma of 680

[21:03] <payload> :D

[21:03] *** justatheory left
[21:04] <moritz_> my svn user name is moritz, so that's where I get the karma for commits

[21:06] <pyrimidine> I have a grammar question

[21:07] *** lichtkind left
[21:07] <pyrimidine> I am testing out a few grammars for some bioinformatics stuff (perl6 versions of bioperl)

[21:08] <pyrimidine> Are grammars capable of ratcheting through a file sequentially, a chunk (in this case, a sequence record) at a time?

[21:08] <pyrimidine> something akin to:

[21:08] *** lichtkind joined
[21:08] <pyrimidine> while Bio::Grammar::Fasta.parsefile('data.fas', :action($action)) {  say $/; }

[21:09] <pyrimidine> but maybe with file handles vs files in this case

[21:09] *** justatheory joined
[21:10] <moritz_> not yet

[21:10] <pyrimidine> (the above in Rakudo is an infinite loop printing the first record in the file)

[21:10] <pyrimidine> ok

[21:10] <moritz_> it's specced to work with "cat" objects

[21:10] <moritz_> see S05

[21:10] *** hercynium left
[21:10] <moritz_> there's a section about matching non-strings

[21:10] <pyrimidine> got it

[21:13] * ruoso later ^

[21:13] *** ejs0 joined
[21:13] *** ruoso left
[21:14] <lichtkind> is there a rx in perl 6?

[21:14] <pyrimidine> moritz_: That seems specific for regexes using ~~.  How would that work with a grammar?  I'm guessing via Bio::Grammar::Fasta.parse($stream, :actions($foo))?

[21:14] *** dukeleto joined
[21:14] *** sri_kraih left
[21:14] <moritz_> lichtkind: yes

[21:15] <moritz_> pyrimidine: not sure, but it might work that way

[21:15] <pyrimidine> moritz_: that would make the most sense, at least to me

[21:15] *** sri_kraih joined
[21:16] <lichtkind> moritz_: sorry tried to do to much at once i mean qx?

[21:16] * pyrimidine just realized how much that simplifies 90% of bioperl...

[21:16] <moritz_> lichtkind: yes

[21:16] <lichtkind> moritz_: works the same?

[21:16] <moritz_> lichtkind: it's not interpolating by default

[21:16] <lichtkind> moritz_: like Q :x of course

[21:17] <moritz_> lichtkind: right

[21:18] <pyrimidine> wow, that gave me the angry scary emoticon on my irc client

[21:19] <pyrimidine> moritz_: I'm guessing that Cat is awaiting some of the lazy implementation issues?

[21:21] <moritz_> pyrimidine: that, and improvements to the regex engine

[21:21] <pyrimidine> moritz_: LTM (again a guess)

[21:22] <moritz_> pyrimidine: no, not this time ;-)

[21:27] <lichtkind> moritz_: Q :q :x wouldnt make sanse :)

[21:27] <lichtkind> sense

[21:28] <moritz_> lichtkind: why not?

[21:29] <lichtkind> moritz_: quote slashes inside the code?

[21:29] <lichtkind> common get real :)

[21:29] <pmurias> lichtkind: what were your smop questions?

[21:29] <pyrimidine> ok, well I can at least get a head start on the simple grammars.  We have a few souls on the bioinformatics side who would like it to be Christmas

[21:29] <pyrimidine> thx

[21:30] <lichtkind> pmurias: right

[21:31] <lichtkind> pmurias: got that msg?

[21:33] *** Chillance left
[21:43] *** pyrimidine left
[21:49] *** pmurias left
[21:54] *** jferrero joined
[21:57] *** ejs0 left
[21:59] <lichtkind> is there a block modificator called subst

[21:59] *** kst left
[22:00] *** kst joined
[22:02] <moritz_> there's a builtin called subst

[22:02] <moritz_> rakudo: say 'abc'.subst(/b/, 2)

[22:02] <p6eval> rakudo 6765de: OUTPUT«a2c␤»

[22:03] *** alester left
[22:07] <lichtkind> moritz_: yes i saw it now on the other page

[22:08] <lichtkind> moritz_: i guess i have spend more hours every day on that to get it all right

[22:09] *** justatheory left
[22:09] <lichtkind> complaining suckz

[22:10] *** netfish joined
[22:13] <dalek> rakudo: 5948c11 | pmichaud++ |  (3 files):

[22:13] <dalek> rakudo: Allow Parrot VERSION to be used in cases when the svn revision

[22:13] <dalek> rakudo: information isn't available (e.g., Parrot built from tarball

[22:13] <dalek> rakudo: or non-svn checkout).

[22:13] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/5948c11826b66b8b31e2d0b8027b1c33c74f8100

[22:13] <dalek> rakudo: 99cad48 | pmichaud++ | docs/ (2 files):

[22:13] <dalek> rakudo: Documentation updates for release.

[22:13] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/99cad48b9f2c530e84a743e7c5fe665206c0b80e

[22:13] <dalek> rakudo: 7c981fc | pmichaud++ | docs/announce/2009-06:

[22:13] <dalek> rakudo: More announcement updates.

[22:13] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/7c981fcfd414c9ec2575f44304a8b6b52b8e142d

[22:13] <dalek> rakudo: c9d76a9 | pmichaud++ | README:

[22:13] *** eternaleye left
[22:13] <dalek> rakudo: Formatting fix.

[22:13] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/c9d76a9458a6ba29828f2421dc8e578e268f6768

[22:15] *** dukeleto left
[22:18] <dalek> rakudo: 1b06df8 | pmichaud++ | docs/ (2 files):

[22:18] <dalek> rakudo: More news.

[22:18] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/1b06df80900096dab8a9f74467f504f73a6115dd

[22:29] *** Limbic_Region joined
[22:30] *** dukeleto joined
[22:31] *** iblechbot left
[22:36] *** pjcj joined
[22:39] *** nihiliad left
[22:46] *** TestUser joined
[22:46] *** TestUser left
[22:49] <DanielC> Who is Martin D Kealey? He just asked me to explain how to use IRC.

[22:50] <moritz_> http://markmail.org/message/moke4dfb54r2szq7 apparently a casual p6l reader/writer

[22:50] <DanielC> *click*

[22:50] <moritz_> http://www.kurahaupo.gen.nz/~martin/cv.cgi

[22:51] <DanielC> From his CV, he seems knowledgeable. I'm surprised he didn't know how to use IRC.

[22:52] <DanielC> No matter. I was happy to help.

[22:52] *** justatheory joined
[22:58] *** Whiteknight joined
[23:02] <pugs_svn> r27133 | payload++ | added myself

[23:04] *** netfish left
[23:11] <lichtkind> thanks folks 

[23:11] <lichtkind> im out for now

[23:20] *** donaldh left
[23:20] *** donaldh joined
[23:26] *** sri_kraih left
[23:26] *** jeremiah_ left
[23:26] *** sri_kraih joined
[23:29] *** lichtkind left
[23:30] *** rindolf left
[23:31] *** Muixirt left
[23:36] *** justatheory left
[23:41] *** M_o_C left
[23:43] *** M_o_C joined
[23:46] *** cognominal left
[23:46] *** cognominal joined
[23:50] *** M_o_C left
[23:57] *** DanielC_ joined
[23:57] *** payload left
[23:57] *** DanielC left
[23:57] *** DanielC_ left
