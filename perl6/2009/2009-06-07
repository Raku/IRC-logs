[00:00] <ruoso> that's the idea

[00:00] <DanielC> Cool.

[00:00] <ruoso> you can also use the less verbose syntax

[00:00] <ruoso> @@a = :name<Daniel>, 2, 3, 4;

[00:00] <pmichaud> ruoso: note that this week it was ruled that semilists will have to produce something different from comma-lists (which is a reversal of the previous week's decision)

[00:01] <DanielC> Interesting. I didn't know any of this.

[00:01] <ruoso> so plain infix:<,> won't produce named args

[00:02] <ruoso> pmichaud, does that mean

[00:02] <ruoso> @@a = (:name<Daniel>; 2; 3; 4);

[00:02] <ruoso> will produce named member?

[00:02] <pmichaud> I don't know in that case.  The case that was discussed is    @a[2;3;4]   versus  @a[2,3,4]

[00:03] <pmichaud> the 2;3;4 and 2,3,4 have to be distinguished somehow -- i.e., they can't both be the same kind of Capture

[00:03] <pmichaud> and according to S09 (to the extent that I understand it), the @@ syntax is for semilists

[00:04] <ruoso> ah... ok...

[00:04] <pmichaud> or "slices"

[00:04] <ruoso> anyway... it'll take some time untill I get to implement that...

[00:04] <ruoso> so this is not high-priority now...

[00:05] <pmichaud> same here; but it does indicate that the kind-of-capture we get is dependent on the syntax used to create it.

[00:05] <pmichaud> I'm suspecting that may become true for named arguments and possibly invocants and array/hash flattening as well

[00:06] <pmichaud> (then again, it may not.  TimToady will decide :-)

[00:09] *** pancake left
[00:17] *** meppl joined
[00:24] <ruoso> DanielC, I just replied to your last mail...

[00:27] <DanielC> hi

[00:28] <ruoso> DanielC, I hope the explanation helps... my brain is not working properly right now

[00:28] * DanielC reads ruoso's email

[00:28] <DanielC> What is a multi sub?

[00:29] <ruoso> is a sub that have several variant implementations, each one with a signature...

[00:29] <DanielC> Ok, I see in the email...

[00:29] <DanielC> Interesting.

[00:29] <ruoso> when you invoke a multi, it will invoke the code with the matching signature

[00:30] <DanielC> That could make an interesting blog post.

[00:30] <ruoso> please do it...

[00:30] <DanielC> Sure.

[00:30] <ruoso> my brain is not really working to write a proper text for posting

[00:30] <DanielC> Are you sure you don't want to write it later when your brain is working again?

[00:31] <ruoso> nah... then I'll have other stuff to take care of

[00:31] <DanielC> ok

[00:32] <DanielC> I'll write something, but probably not tomorrow.

[00:32] <ruoso> DanielC, but did you understand how the code work?

[00:33] <ruoso> after the explanation?

[00:33] <DanielC> I'm still reading.

[00:33] <DanielC> ((5 rpn 4) rpn '+') rpn 3  ?

[00:33] <ruoso> yes... 

[00:33] <DanielC> ah, I see how that works.

[00:33] <DanielC> The second calls a different sub.

[00:34] <ruoso> rakudo: multi infix:<BLA!> { say $^a ~ $^b }; 'A' BLA! 'B'

[00:34] <p6eval> rakudo 97f141:  ( no output )

[00:34] <ruoso> rakudo: multi infix:<BLA> { say $^a ~ $^b }; 'A' BLA 'B'

[00:34] <p6eval> rakudo 97f141: OUTPUT«AB␤»

[00:35] <ruoso> DanielC, yes, because '+' won't match the first signature

[00:36] *** amoc joined
[00:36] <DanielC> I think I understand the code now.

[00:37] <DanielC> thanks for the explanation.

[00:37] <DanielC> ruoso: Does .words do the right thing?

[00:37] <ruoso> DanielC, I'll wait for your blog post now ;)

[00:38] <DanielC> I mean, does it deal with "2+" correctly?

[00:38] <ruoso> DanielC, it requires white spaces between the tokens

[00:38] <ruoso> no, it doesn't

[00:38] <DanielC> ok

[00:40] <DanielC> Ok, I think I understand everything.

[00:41] *** snarkyboojum joined
[00:41] <ruoso> cool...

[00:41] * ruoso sleep &

[00:45] <pasteling> "ruoso" at 189.97.60.4 pasted "multi-reduce based RPN calculator, simplified code by grouping similar multi candidates" (32 lines, 741B) at http://sial.org/pbot/37098

[00:45] <ruoso> DanielC, look the above paste... I think the code is better now

[00:45] <DanielC> *click*

[00:46] <DanielC> ok

[00:46] *** M_o_C left
[00:48] <pasteling> "ruoso" at 189.97.60.4 pasted "multi-reduce based RPN calculator, simplified the code even further, by adding an array to the arguments to [rpn]" (27 lines, 548B) at http://sial.org/pbot/37099

[00:48] <ruoso> DanielC, better yet now 

[00:48] <DanielC> *click*

[00:49] <DanielC> better

[00:49] <DanielC> I think I like this one best.

[00:50] <pasteling> "ruoso" at 189.97.60.4 pasted "multi-reduce based RPN calculator, the token being external to the signature was pretty useless now..." (26 lines, 528B) at http://sial.org/pbot/37100

[00:51] *** Whiteknight joined
[00:51] * ruoso really sleep &

[00:52] <ruoso> DanielC, I think that was the last one now...

[00:52] <DanielC> ok

[00:54] *** snarkyboojum_ joined
[00:59] *** snarkyboojum left
[01:10] *** beggars joined
[01:13] *** mib_ngttfa joined
[01:18] *** awarefish joined
[01:18] *** snarkyboojum_ left
[01:28] *** sri_kraih joined
[01:28] *** DemoFreak left
[01:56] *** DanielC left
[02:09] *** jferrero left
[02:12] *** sri_kraih left
[02:15] *** snarkyboojum joined
[02:27] *** Whiteknight left
[02:37] *** snarkyboojum left
[02:48] *** mib_ngttfa left
[02:55] *** jonathanturner joined
[03:02] *** meppuru joined
[03:03] *** snarkyboojum joined
[03:04] *** jonathanturner left
[03:16] *** snarkyboojum left
[03:17] *** sri_kraih joined
[03:18] *** meppl left
[03:19] *** beggars left
[03:20] *** FurnaceBoy left
[03:28] *** cognominal left
[03:41] *** awarefish left
[03:45] *** szabgab joined
[03:45] *** cottoo joined
[03:47] *** [particle] joined
[03:49] *** frew|work joined
[04:01] *** cotto left
[04:03] *** cottoo is now known as cotto

[04:25] *** synth left
[04:39] *** snarkyboojum joined
[04:50] *** kst left
[04:58] *** finanalyst joined
[05:08] *** sri_kraih left
[05:36] <pasteling> "japhb" at 76.191.190.8 pasted "ruoso: golfed your previous multi RPN calculator using 'do given'" (23 lines, 500B) at http://sial.org/pbot/37101

[05:39] <japhb> ruoso: "There ain't no such thing as the [best] code."

[05:39] <japhb> :-)

[05:48] <pugs_svn> r27014 | pmichaud++ | [t/spec]:  want clarifications on .exists in exists.t

[05:59] <japhb> rakudo: multi infix:<foo> ($a, $b) { say eval "$a + $b" }; my ($a, $b) = 1, 2; $a foo $b

[05:59] <p6eval> rakudo 97f141: OUTPUT«Lexical '$!' not found␤in sub infix:foo (/tmp/mbOdZk8Bqx:2)␤called from Main (/tmp/mbOdZk8Bqx:2)␤»

[05:59] <japhb> Bug?

[06:00] <literal> it's interesting that Scala has $_ (except they call it _ since they don't have sigils)

[06:00] *** mberends joined
[06:00] <literal> are there any other mainstream languages which have "it" ?

[06:01] <japhb> literal: several have the concept of setting a topic, but they often allow "it" to be completely invisible.

[06:03] <japhb> (I'm thinking of syntax like 'with' or 'using' that allows a long expression returning an object to set the current topic, and have all method calls within the scope of the 'with' or 'using' that do not specify an invocant to implicitly use the topic as invocant.)

[06:04] <japhb> Not unlike, say ... given.  :-)

[06:14] *** skids_ left
[06:22] <Infinoid> I don't know how "mainstream" you'd consider sed to be, but I think that's probably where perl got it

[06:22] <pasteling> "japhb" at 76.191.190.8 pasted "ruoso: Further tweak; now @*ARGS need not be quoted (except for '*' on unix-like systems, of course)" (23 lines, 500B) at http://sial.org/pbot/37102

[06:23] <japhb> Infinoid: given that sed still infects vast numbers of shell scripts, it's at least mainstream-ish.  :-)

[06:24] <dalek> rakudo: d90577b | pmichaud++ |  (7 files):

[06:24] <dalek> rakudo: Refactor postcircumfix:<[ ]> and Whatever handling.

[06:24] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/d90577b1f657040bbb5b40e9b0cfc67927522ae6

[06:26] <Infinoid> Hooray for perl -pe

[06:27] <japhb> How do I get the invokable for a particular multi?  In other words, how do I get the Num/Num variant of infix:<+>?

[06:28] *** nihiliad left
[06:30] <japhb> I wonder where the perl -p0le is?

[06:30] <japhb> Wherever $Larry currently lives?

[06:39] *** david__ left
[06:40] <finanalyst> i am getting "no ICU lib loaded

[06:40] <finanalyst> in method Perl6Pair::perl (src/gen_setting.pm:1244)"

[06:41] <finanalyst> the code was working a few days ago

[06:41] <finanalyst> anyone come across this?

[06:42] <finanalyst> what is the ICU lib?

[06:42] <mberends> unicode

[06:42] <finanalyst> ahhhh.  then .perl has stopped liking unicode

[06:43] <japhb> finanalyst: I would read that as wanting ICU before fighting with Unicode.

[06:43] <mberends> "International Components for Unicode" from Debian description

[06:44] <finanalyst> rakudo: my $x='привет'; say $x.perl

[06:44] <p6eval> rakudo 97f141: OUTPUT«"привет"␤»

[06:44] <japhb> ICU used to be optional, though strongly suggested.  May still be the case, I dunno.  But I've always been in the "Sheesh, just require it already!" camp.  Maybe that camp finally won.  :-)

[06:45] <finanalyst> why does the above snippet work here, but not locally for me?

[06:46] <finanalyst> previously, all versions of rakudo worked nicely with unicode without any options

[06:47] <japhb> I would guess that the evalbot is running on a box with ICU installed.

[06:47] <mberends> finanalyst: look for icu in the output of 'perl Configure.pl'

[06:49] <japhb> rakudo: say %*VM<config><has_icu>

[06:49] <p6eval> rakudo 97f141: OUTPUT«sh: ./perl6: No such file or directory␤»

[06:50] <japhb> OK, that I didn't expect.

[06:50] <finanalyst> i have already run that. I get Config.pl to give output again?

[06:50] <finanalyst> s/that/perl Configure.pl/

[06:50] <japhb> finanalyst: Just run this: perl6 -e 'say %*VM<config><has_icu>'

[06:51] * japhb wonders why evalbot does the wrong thing

[06:51] <mberends> oh, perl Configure.pl produces very little output now, even after a realclean

[06:52] <finanalyst> japhb: your oneliner does work

[06:53] <finanalyst> sorry my local perl6 has gone walk-about.

[06:56] <finanalyst> just run into a problem. Pulled latest version rakudo. run perl Configure.pl --gen-parrot. then make. Got:

[06:56] <finanalyst> make: *** No rule to make target `src/classes/WhateverCode.pir', needed by `perl6_s1.pbc'.  Stop.

[06:57] <finanalyst> help!

[06:57] <mberends> ditto here :(

[06:58] *** viklund joined
[06:58] <finanalyst> yesterday pm and timtoady talking about WhateverCode

[06:59] <mberends> yes, git log shows Whatever changed

[07:01] <finanalyst> how do i go back to a previous version using git?

[07:01] * mberends reads git help reset

[07:02] *** david__ joined
[07:04] *** beggars joined
[07:04] * mberends tests git reset --soft HEAD^

[07:05] * mberends sees that the problem remains

[07:07] <japhb> pmichaud: still awake?

[07:08] <finanalyst> pm probably not woken up

[07:08] <japhb> finanalyst: he pushed a commit about 45 minutes ago, I figured he might still be around ....

[07:08] *** frew|work left
[07:09] <finanalyst> i am now without working rakudo :( 

[07:11] <mberends> finanalyst: after 'git reset --soft HEAD^' did not help, 'git reset --hard HEAD^' did. Not sure if the second step must be preceded by the first. It works here.

[07:12] * finanalyst trying to reset

[07:16] <finanalyst> mberends: thanx

[07:16] <finanalyst> any idea how to get ICU lib loaded?

[07:17] <finanalyst> is it a parrot lib, or is it part of the environment?

[07:17] <japhb> finanalyst: what OS are you using?

[07:17] <finanalyst> ubuntu

[07:18] *** amoc__ joined
[07:18] <finanalyst> rakudo: say 'фывфыэ'.perl

[07:18] <p6eval> rakudo 97f141: OUTPUT«sh: ./perl6: No such file or directory␤»

[07:18] <mberends> not offhand. in either Configure.pl or Makefile, probably

[07:18] <japhb> finanalyst: aptitude install libicu-dev

[07:18] <japhb> Then reconfigure/regen Rakudo and Parrot.

[07:18] <finanalyst> rakudo: my $x='фывфывфыэ'; say $x.perl

[07:18] <p6eval> rakudo 97f141: OUTPUT«sh: ./perl6: No such file or directory␤»

[07:19] <japhb> rakudo: %*VM<config><has_icu>.say

[07:19] <p6eval> rakudo 97f141: OUTPUT«sh: ./perl6: No such file or directory␤»

[07:19] <finanalyst> rakudo: my $x='привет'; say $x.perl

[07:19] <p6eval> rakudo 97f141: OUTPUT«sh: ./perl6: No such file or directory␤»

[07:19] <japhb> Ah!  I know what's going on!

[07:19] <finanalyst> evalbot has changed

[07:19] <japhb> evalbot is running into the same thing you guys are.

[07:20] <finanalyst> that snippet worked at 10.44 (my time. its not 11.19)

[07:20] <finanalyst> s/now/now

[07:20] <japhb> Hmmm.  Years ago we had an evalbot that would notice a failed build and keep the old one around.  Would be a nice feature for the current one to support.

[07:20] <japhb> Especially if it piped up to report a buildfail.

[07:24] <mberends> seeya later!

[07:24] *** mberends left
[07:27] *** xomas left
[07:29] *** amoc left
[07:33] *** ejs joined
[07:40] *** beggars left
[07:42] *** amoc__ left
[07:45] *** DemoFreak joined
[07:48] *** amoc joined
[07:56] *** hanekomu joined
[08:01] *** iblechbot joined
[08:06] *** ejs left
[08:20] *** clintongormley joined
[08:37] *** xinming_ is now known as xinming

[08:48] *** cls_bsd joined
[08:51] *** phenny joined
[09:06] *** bsb joined
[09:09] *** PZt left
[09:11] *** xomas joined
[09:17] *** pmurias joined
[09:30] *** amoc left
[09:48] <pmurias> is :(|$foo,|$bar) legal?

[09:49] <araujo> in some states 

[09:49] <pmurias> :)

[09:55] *** snarkyboojum left
[10:13] *** Chillance joined
[10:13] *** Chillance left
[10:14] *** Chillance joined
[10:19] *** DanielC joined
[10:21] *** M_o_C joined
[10:26] <pugs_svn> r27015 | pmurias++ | [re-smop] mildew emits named readonly parameters correctly (lack runtime

[10:26] <pugs_svn> r27015 | pmurias++ | support)

[10:26] <pugs_svn> r27016 | pmurias++ | [re-smop] added --target-stage option to mildew

[10:26] <pugs_svn> r27017 | pmurias++ | [re-smop]

[10:26] <pugs_svn> r27017 | pmurias++ | added :(|$capture)

[10:26] <pugs_svn> r27017 | pmurias++ | --target-stage 2 is the default

[10:27] *** amoc joined
[10:29] *** bsb left
[10:29] <DanielC> Are the characters //  (two slashes) already used for something? I want to make a new function infix:<//>

[10:30] <DanielC> my Rational $rat = 3 // 4;   # <-- new Rational type.

[10:30] <pochi> I think it might be the same as in perl5

[10:31] <pochi> ie. return the first defined value

[10:31] <DanielC> Remind me, what was it in perl5 ?

[10:31] <DanielC> ?

[10:32] <DanielC> I'm talking about // not ||

[10:32] <pochi> yes, //

[10:32] <pochi> || only returns the first true value

[10:32] <DanielC> ah

[10:32] <DanielC> rakudo: my $a = $b // 3;

[10:32] <p6eval> rakudo 97f141: OUTPUT«sh: ./perl6: No such file or directory␤»

[10:32] *** bsb joined
[10:32] <DanielC> WTF

[10:33] <pochi> current HEAD doesnt compile :/

[10:33] <DanielC> :(

[10:34] <pochi> here, "my $b // 3" returns "3"

[10:35] <DanielC> thanks

[10:35] <DanielC> So it's taken.

[10:35] <pochi> I think most operators are defined in src/parser/grammar-oper.pg

[10:35] <DanielC> thanks

[10:36] *** barney joined
[10:36] <DanielC> "div" seems to be available, but "over" seems to be taken (but I don't know what it means.

[10:36] <DanielC> )

[10:37] <pochi> where did you find "over"?

[10:37] <DanielC> perl6 -e '3 over 4'

[10:37] *** fridim_ joined
[10:37] <pochi> not worky here

[10:37] <DanielC> It gave an error that suggested that "over" made sense.

[10:37] <pochi> ah

[10:38] <DanielC> It gives a different error than perl6 -e '3 div 4'

[10:38] <pochi> "over" is not listed in grammar-oper

[10:38] <pochi> "div" is defined there however

[10:38] <DanielC> That other error suggests "I don't know what div is"

[10:38] <pochi> perl6 -e '3 abcdef 4' gives the same error as "over"

[10:39] <pochi> and Im pretty sure there is no abcdef operator :)

[10:39] <DanielC> Interesting. So maybe "iv" is the one that is defined.

[10:39] <pochi> i think so

[10:40] <DanielC> perl6 -e '3 zygomrf_fuck_you 4'  <-- gives the same error as "over" and I sure hope *that* method does not exist.

[10:40] <pochi> aye

[10:40] <DanielC> Thanks for the help.

[10:40] <DanielC> I'm planning to play a little with types.

[10:41] <DanielC> I want to do:  my Rational ($a,$b) = (2 over 3, 3 over 4); say $a + $b;  And have that do the right thing.

[10:42] <pochi> should be possible I think

[10:42] <DanielC> I think it should be.

[10:44] <DanielC> afk &

[10:44] *** DanielC left
[10:51] *** mberends joined
[10:52] *** bsb left
[10:52] *** DanielC joined
[11:01] <finanalyst> rakudo: my $x=5; say map { .say }, ^$x

[11:01] <p6eval> rakudo 97f141: OUTPUT«sh: ./perl6: No such file or directory␤»

[11:02] <finanalyst> evalbot still down?

[11:10] *** masak joined
[11:13] <pugs_svn> r27018 | pmurias++ | [re-mildew] fix tests

[11:20] <masak> I must be blind -- I see "Running grants (2009 - VIII)" on news.perlfoundation.org , and then nothing for a long time, and then "Running grants (2009 - XI)". where did IX and X go?

[11:22] *** lichtkind joined
[11:24] <mberends> masak: dey musta been naughty children

[11:24] *** PacoLinux left
[11:24] <masak> mberends: I'm not at the point where I feel I can draw conclusions yet, but I've repeatedly felt a bit... cheated on the meta-summaries.

[11:25] <masak> last time, the grant manager was ill, and we reluctantly compromised by retroactively changing the summary of activity, not to the actual activity, but to 'grant manager was ill'.

[11:26] <masak> rakudo: 1.Str.say

[11:26] <p6eval> rakudo 97f141: OUTPUT«sh: ./perl6: No such file or directory␤»

[11:27] <masak> gnarl.

[11:27] *** snarkyboojum joined
[11:28] <pochi> seems the WhateverCode.pir file is missing

[11:28] *** snarkyboojum left
[11:29] *** snarkyboojum joined
[11:29] *** _Chillance_ joined
[11:30] <mberends> masak: do you have the git-fu (and courage) to do a 'git reset --hard HEAD^' on evalbot?

[11:30] <masak> git-fu yes, courage dunno. :)

[11:30] *** alanhaggai joined
[11:30] <masak> what happened?

[11:31] <mberends> the last commit from pmichaud++ broke rakudo

[11:32] *** payload left
[11:32] <masak> oh.

[11:32] * masak checks

[11:33] <viklund> getting karma for breaking HEAD, interesting...

[11:34] <masak> mberends: not sure the solution is git reset --hard HEAD^, then.

[11:34] <masak> since it affects not just evalbot, but everyone.

[11:34] <masak> maybe I should just revert the commit.

[11:34] *** iblechbot left
[11:34] <masak> I have now confirmed that Rakudo is broken in HEAD.

[11:34] <masak> reverting commit and rebuilding.

[11:35] <masak> hm, seems to be an uncommitted file by pmichaud++.

[11:39] <mberends> masak: yes, the reset is a local solution, but you can summon the courage to do it for everyone (Dutch courage is no good for this)

[11:40] <mberends> viklund: see, even more karma ;)

[11:40] <masak> mberends: no, I've just established that it fails to build with the latest commit, and builds without it.

[11:41] <masak> no courage required to revert that. :)

[11:41] <masak> there, pushed.

[11:43] <lichtkind> mberends: most parts of appendix B are now english

[11:43] <DanielC> class Foo { has $!a; has $.b } <-- $!a is private, $.b is public but read-only. How do you make a class property that is read-write?

[11:43] <masak> DanielC: has $.b is rw;

[11:43] <viklund> ;)

[11:44] <DanielC> masak: thanks

[11:44] <dalek> rakudo: 290012a | masak++ |  (7 files):

[11:44] <dalek> rakudo: Revert "Refactor postcircumfix:<[ ]> and Whatever handling."

[11:44] <dalek> rakudo: This reverts commit d90577b1f657040bbb5b40e9b0cfc67927522ae6. There seems

[11:44] <dalek> rakudo: to have been an uncommitted file src/classes/WhateverCode.pir that

[11:44] <dalek> rakudo: prevented build.

[11:44] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/290012a464f07667f0b156415e2a2dc4f1f9c2f4

[11:44] <masak> DanielC: and they're not called 'class property', but 'attribute'.

[11:44] <DanielC> masak: ok

[11:44] <masak> DanielC: mixing in the 'class' modifier here is confusing, because that can be interpreted as 'belonging to the whole class, not to particular object instances'

[11:45] <DanielC> ok

[11:45] <DanielC> Yes, just saying "attribute" is less ambiguous.

[11:46] <masak> DanielC: also, using 'is rw' is discouraged -- not from a Perl 6 perspective, but from an OOD perspective. :)

[11:46] <masak> actually, in Perl 5, it has been more or less OK, but in the Java community it's a no-no.

[11:46] <masak> unless you're writing GUI widgets and worry about speed. :P

[11:47] <DanielC> masak: What is OOD? I only know OOP... typo?  Anyways, I'm sure that it's a bad idea, I just wanted to know how to do it.

[11:47] <masak> DanielC: ...Design.

[11:47] <DanielC> ah

[11:48] <masak> DanielC: you can also make private attributes readonly with 'is readonly'.

[11:48] <DanielC> class Foo { has Int $.a } # <-- Is this correct?

[11:48] <DanielC> (the type)

[11:48] <masak> aye.

[11:48] <DanielC> thanks

[11:49] <masak> rakudo: class Foo { has Int $.a }; say Foo.new( :a(42) ).a

[11:49] <p6eval> rakudo 290012: OUTPUT«42␤»

[11:49] <masak> rakudo: 1.Str.say

[11:49] <p6eval> rakudo 290012: OUTPUT«Int()<0xb61f5450>␤»

[11:49] * masak submits rakudobug

[11:51] <masak> phenny: tell pmichaud I reverted your d90577 commit, because there seems to have been an uncommitted file src/classes/WhateverCode.pir preventing build.

[11:51] <phenny> masak: I'll pass that on when pmichaud is around.

[11:53] *** Whiteknight joined
[11:54] <clintongormley> masak: You said "using 'is rw' is discouraged" - but surely some attributes need to be rw

[11:54] <masak> clintongormley: why?

[11:54] <clintongormley> i create a new $payment

[11:54] <clintongormley> send for processing

[11:55] <clintongormley> received $dollars

[11:55] <clintongormley> update $payment.received

[11:55] <clintongormley> and $payment.status

[11:55] <clintongormley> am i missing something?

[11:55] *** Chillance left
[11:55] <masak> clintongormley: oh, I was too vague. I meant "using 'is rw' on public attributes is discouraged"

[11:55] <clintongormley> oh ok

[11:55] <masak> because it exposes too much of the guts of the class.

[11:56] <masak> making it harder to change the API later.

[11:56] <clintongormley> so is a public attribute not marked rw modifiable by the class itself? or a subclass?

[11:57] * clintongormley doesn't use Moose btw, just plain ol' vanilla perl5 OO

[11:58] <masak> clintongormley: right. public attributes are readonly by default.

[11:59] <clintongormley> masak: but it is modifiable by the class or subclass?

[11:59] <masak> clintongormley: ah. every public attribute has an underlying private attribute, which is modifieable from inside the class.

[11:59] <masak> and from inside subclasses.

[11:59] <clintongormley> ahhh right - thanks

[12:00] <clintongormley> i need to take a couple of weeks and learn about the Moose paradigm

[12:00] <masak> actually, the 'public attribute' is just a way to automatically generate a read accessor -- a getter.

[12:00] <clintongormley> right

[12:00] <masak> clintongormley: aye, I should do that too. :)

[12:01] <clintongormley> i see so many people praising its virtues, but the bugger is that I have a laaarge code base that I don't even want to consider converting

[12:01] <masak> then don't.

[12:01] <clintongormley> so i'm scared i might like it too much :)

[12:02] <clintongormley> I've got an application framework (called Burro, cos 'it does the hard work for you')

[12:02] <clintongormley> which is my version of DBIx::Class, Catalyst, plus a number of other things

[12:02] <clintongormley> some bits are really good

[12:02] <clintongormley> and others are crufty

[12:02] <clintongormley> but i wrote it before those others were of much use

[12:03] *** viklund left
[12:03] <clintongormley> one of these days i'm going to have to replace the crufty bits with the good bits from those others

[12:04] <clintongormley> of course, i've made sure that the framework is almost entirely devoid of tests, so I'll get no nasty test failures when I do finally convert

[12:05] <lichtkind> mberends: operator table in social wiki is nealry impossible

[12:05] <mberends> lichtkind: :(

[12:05] <lichtkind> mberends: but please have a kook at appendix when im finished in a minute

[12:07] <masak> lichtkind: I'll have a kook too if you post the URL.

[12:09] <lichtkind> masak: in a minute

[12:09] <viklund_> rakudo: say "I'm online*

[12:10] <viklund_> rakudo: say "I'm online"

[12:10] <p6eval> rakudo 290012: OUTPUT«say requires an argument at line 2, near " \"I'm onli"␤in Main (src/gen_setting.pm:2417)␤»

[12:10] <p6eval> rakudo 290012: OUTPUT«I'm online␤»

[12:10] <viklund_> masak++

[12:10] <DanielC> Is + a multi-function? In other words, can I define 'multi sub infix:<+> (Rational $a, Rational $b)' to make a custom + function for my personal "Rational" type?

[12:10] <viklund_> DanielC: yes, I thinks so

[12:10] <masak> DanielC: aye.

[12:10] <DanielC> cool

[12:10] <viklund_> otherwise you can't use it for your own types

[12:10] <DanielC> Perl 6 rocks.

[12:10] <masak> DanielC: all core subs and methods are multi.

[12:11] <DanielC> thanks

[12:11] <viklund_> $matrix1 + $matrix2

[12:12] <masak> DanielC: _and_ it mostly just works in Rakudo today, so fire away.

[12:12] <DanielC> :-)

[12:12] <DanielC> I'm writing a blog post about Perl 6's cool type system.

[12:13] <DanielC> Multi functions are part of that.

[12:13] <masak> DanielC: they are indeed.

[12:13] <lichtkind> masak: http://www.perlfoundation.org/perl6/index.cgi?perl_lookup_table

[12:15] <masak> lichtkind: nice work.

[12:15] <lichtkind> masak: thanks i should had started that years before in english too

[12:16] <masak> lichtkind: it's possible that I might want something very much like this for u4x too...

[12:17] *** PacoLinux joined
[12:19] <lichtkind> masak: whats the direct purpose of u4x?

[12:19] <masak> lichtkind: I explain it quite clearly in http://use.perl.org/~masak/journal/38279

[12:19] <masak> (the latter part)

[12:20] <masak> "Our official goal shall be to provide easy-to-access comprehensive user documentation, through a ridiculously easy-to-access command line tool, providing snippets of Perl 6 clarification so perfectly worded and so brilliantly illustrative that the unsuspecting reader will be brought close to tears."

[12:23] <lichtkind> masak: aimed to p5 enviroment?

[12:23] <masak> no, p6.

[12:23] <masak> (hence 'for Christmas')

[12:24] <lichtkind> masak: good because there is already Perl6::Doc, which i maintain btw

[12:24] <masak> glad to hear that.

[12:24] <lichtkind> masak: thatswhy we couuld sync a bit

[12:24] <masak> absolutely.

[12:27] <masak> ok, time for lunch.

[12:27] *** masak left
[12:27] <lichtkind> cu

[12:27] *** payload joined
[12:29] *** payload left
[12:30] *** payload joined
[12:32] *** iblechbot joined
[12:33] *** cognominal joined
[12:41] *** cognominal left
[12:50] *** cognominal joined
[13:00] *** icwiener joined
[13:07] *** icwiener left
[13:08] *** barney left
[13:22] <jnthn> o/

[13:22] <DanielC> moin

[13:22] <finanalyst> hi

[13:22] <DanielC> good afternoon.. actually

[13:23] * DanielC has the habit of saying "moin" any time of day.

[13:23] <finanalyst> how do i do a do a file test. spec says $file.:X but that doesnt seem to work

[13:24] <finanalyst> rakudo: 'README'.:f

[13:24] <jnthn> rakudo: say "perl6" ~~ :e; 

[13:24] <p6eval> rakudo 290012: OUTPUT«Multiple Dispatch: No suitable candidate found for 'concatenate_str', with signature 'PSP->P'␤in Main (src/gen_setting.pm:1303)␤»

[13:24] <p6eval> rakudo 290012: OUTPUT«1␤»

[13:25] <jnthn> rakudo: say "perl6" ~~ :f; say "perl6" ~~ :d;

[13:25] <p6eval> rakudo 290012: OUTPUT«1␤0␤»

[13:25] <jnthn> ako to

[13:26] <finanalyst> rakudo: say 'README' ~~ :f

[13:26] <p6eval> rakudo 290012: OUTPUT«1␤»

[13:26] <finanalyst> thanx

[13:26] <jnthn> rakudo: say "the-completed-perl-6-spec" ~~ :e

[13:26] <p6eval> rakudo 290012: OUTPUT«0␤»

[13:26] <jnthn> aww

[13:28] <finanalyst> rakudo: say 'README' ~~ :r

[13:28] <p6eval> rakudo 290012: OUTPUT«Method ':r' not found for invocant of class 'Str'␤»

[13:28] <finanalyst> not all the tests seem to have been implemented

[13:33] <jnthn> maybe not, no

[13:51] *** alanhaggai left
[13:56] *** DemoFreak left
[13:58] *** ruoso left
[13:58] *** Whiteknight left
[14:13] *** mberends left
[14:13] *** [particle] left
[14:13] *** xinming left
[14:13] *** Jedai left
[14:13] *** s1n left
[14:13] *** Grrrr left
[14:13] *** renormalist left
[14:13] *** edenc left
[14:13] <pmurias> what's a good place to start a GSoC blog at?

[14:17] <payload> own server with a omgblog ^^

[14:26] <pugs_svn> r27019 | lwall++ | [STD] adverbs now produce a real node like a postfix

[14:26] <pugs_svn> r27019 | lwall++ | [STD] precedence of adverbs changes to inside item_assignment

[14:26] <pugs_svn> r27019 | lwall++ | [viv] properly translate :delete and :exists to p5

[14:30] *** kate21de joined
[14:32] <pugs_svn> r27020 | pmurias++ | [re-smop]

[14:32] <pugs_svn> r27020 | pmurias++ | removed some backtracking from m0ld so that it has better error messages

[14:32] <pugs_svn> r27020 | pmurias++ | the $reg = $invocant.(|$capture) form is not yet ported over

[14:33] <pugs_svn> r27021 | pmurias++ | [re-smop] readonly named params are supported in new Signatures

[14:39] *** mberends joined
[14:39] *** [particle] joined
[14:39] *** xinming joined
[14:39] *** Jedai joined
[14:39] *** cj joined
[14:39] *** Sark joined
[14:39] *** krakan joined
[14:39] *** renormalist joined
[14:39] *** edenc joined
[14:39] *** Grrrr joined
[14:39] *** s1n joined
[14:39] *** arnsholt joined
[14:39] *** StephenPollei joined
[14:41] *** skids_ joined
[14:43] *** om454545445 joined
[14:44] *** om454545445 left
[14:49] <pmichaud> ....okay, how do I get my commits back?

[14:49] <phenny> pmichaud: 11:51Z <masak> tell pmichaud I reverted your d90577 commit, because there seems to have been an uncommitted file src/classes/WhateverCode.pir preventing build.

[14:51] <mberends> er, shift-ctrl-Z ?

[14:53] *** snarkyboojum left
[14:55] <pmichaud> foudn it.

[14:55] <pmichaud> fixing.

[14:55] <mberends> \o/

[14:55] <mberends> there are quite a lot of TODO passes on spectest as well

[14:56] *** DemoFreak joined
[14:56] <pmichaud> yes.  Some of the recent changes we've made have caused TODO tests to pass, but we haven't gotten around to unfudging them yet.

[14:56] <dalek> rakudo: b776b07 | pmichaud++ |  (8 files):

[14:56] <dalek> rakudo: Refactor postcircumfix:<[ ]> and Whatever handling -- attempt #2.

[14:56] <dalek> rakudo: This reverts commit 290012a464f07667f0b156415e2a2dc4f1f9c2f4.

[14:56] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/b776b070793ccb4ada246bd3f1f89ce992fa5a44

[14:57] <jnthn> Reverting the reverted. :-)

[14:59] *** Chillance joined
[15:04] <DanielC> Hi. Can someone explain to a dummy what exactly a lexical variable? (ie. "my") How is it different from the local variables you see in other languages?

[15:05] <pmichaud> rakudo:  my $x = * - 2;   say $x(5);

[15:05] <p6eval> rakudo 290012: OUTPUT«Use of uninitialized value␤invoke() not implemented in class 'Float'␤in Main (/tmp/8eBK7QdKmq:2)␤»

[15:07] <jnthn> pmichaud: Old Rakudo?

[15:07] <skids_> DanielC: lexical refers to the text file that is your program.  A lexical is only valid over a certain section of that text file.  Like between two curlies, usually.

[15:07] <pmichaud> I'm thinking it hasn't updated yet.

[15:07] <pmichaud> rakudo:  my $x = * - 2;   say $x(5);

[15:07] <p6eval> rakudo 290012: OUTPUT«Use of uninitialized value␤invoke() not implemented in class 'Float'␤in Main (/tmp/5iwN8877O0:2)␤»

[15:08] <lichtkind> mberends: i added bit navigation

[15:08] <pmichaud> pmichaud@orange:~/rakudo$ ./perl6

[15:08] <pmichaud> > my $x = * - 2;  say $x(5);

[15:08] <pmichaud> 3

[15:08] <DanielC> skids_: That sounds a lot like a "local" variable. Is there a difference you can think of?

[15:08] <lambdabot>   <no location info>: parse error on input `='

[15:08] <lichtkind> mberends: im off now

[15:08] *** kst joined
[15:12] <skids_> DanialC: "local" in what vernacular?

[15:12] <pugs_svn> r27022 | pmichaud++ | [t/spec]: Fudge unicode method names.  Unfudge unicode named parameters.

[15:12] <DanielC> skids_: I think that in most programming languages a local variable is one that is only available inside a function.

[15:12] <pmichaud> DanielC: yes, lexical variables generally correspond to the idea of local variables.

[15:13] <DanielC> pmichaud: It seems odd that Perl would choose the word "lexical" for them. I was curious as to what else "lexical" implies.

[15:14] <DanielC> The word "lexical" on its own means little to me. A lexicon is a vocabulary. Clearly that has nothing to do with scoping.

[15:14] <skids_> I think it's because perl5 had a "local" variable, different from "my".

[15:15] <DanielC> In Perl 5 I always stayed away from "local" variables because I never felt I quite understood them. Whereas I feel I always know what "my" variables do.

[15:16] <pmichaud> the term "lexical" refers more to scope than the variable itself.

[15:16] <pmichaud> Basically, it's the scope that can be determined from statically looking at the nesting of blocks in the source.

[15:16] *** _Chillance_ left
[15:17] <DanielC> ok...

[15:17] <skids_> perl5's "local" was, in contrast, dynamically scoped

[15:18] <DanielC> Does the word "lexical" actually come from somewhere. It doesn't seem to come from "lexicon" (unless I'm confused and I don't know what "lexicon" means).

[15:18] *** fridim_ left
[15:19] * antiphase wonders where the word "word" comes from

[15:19] <skids_> lexical I think comes from rules|law and is usually used to refer to rules of grammar.

[15:20] <DanielC> ok

[15:20] *** takadonet joined
[15:20] <takadonet> hey everyone

[15:20] <skids_> So it's referring to the fact that the scope is confined entirely when the program is parsed -- the program does not need to be run in order to determine where the variable is valid.

[15:21] <jnthn> hi takadonet

[15:21] <pmichaud> “Lexical scope” in general is the idea that

[15:21] <pmichaud> * an identifier at a particular place in a program always refers to the same variable location — where “always” means “every time that the containing expression is executed”, and that

[15:21] <pmichaud>  * the variable location to which it refers can be detemined by static examination of the source code context in which that identifier appears, without having to consider the flow of execution through the program as ga whole. 

[15:21] <DanielC> skids_: AH! That actually makes sense... Scoping is dictated by the rules/grammar of the language => defined at compile time.

[15:21] <pmichaud> http://www.gnu.org/software/guile/manual/html_node/Lexical-Scope.html

[15:21] *** feyner_ joined
[15:22] <DanielC> *click*

[15:22] <pmichaud> the rest of the page may be more confusing than helpful.

[15:22] *** feyner_ left
[15:23] <pmichaud> http://foldoc.org/lexical    # might be a bit more helpful

[15:23] <skids_> Whereas "dynamic" scope is determined at runtime.  So it requires electricity :-)

[15:23] <DanielC> *click*

[15:25] <DanielC> pmichaud/skids_: Thanks a lot.

[15:25] <DanielC> I realize I was asking a somewhat difficult question.

[15:25] <pmichaud> rakudo:  my $x = * - 2;  say $x(3);

[15:25] <p6eval> rakudo 290012: OUTPUT«Use of uninitialized value␤invoke() not implemented in class 'Float'␤in Main (/tmp/LhbvVLCOWV:2)␤»

[15:25] <pmichaud> hmmpf.

[15:27] * pmichaud shakes the p6eval bot.... "Wake up!"

[15:28] <pugs_svn> r27023 | pmichaud++ | [t/spec]:  Unfudge a passing todo.

[15:28] *** PZt joined
[15:30] <takadonet> join #perl

[15:30] <takadonet> ...

[15:31] <takadonet> sorry

[15:31] <skids_> pmichaud: http://www.youtube.com/watch?v=_nJtd0Ua8sQ # for use in evalbot shaking

[15:33] <pugs_svn> r27024 | pmichaud++ | [t/spec]:  Unfudge some tests with my $x = * - 1;

[15:37] <pmichaud> rakudo:  my $x = * - 2;  say $x(3);

[15:37] <p6eval> rakudo 290012: OUTPUT«Use of uninitialized value␤invoke() not implemented in class 'Float'␤in Main (/tmp/G3TmnkVWG6:2)␤»

[15:37] <pmichaud> oh, perhaps I didn't push?

[15:38] <pmichaud> no, I pushed.

[15:38] <pmichaud> hrm.

[15:38] *** frew|work joined
[15:39] *** Jedai left
[15:42] *** FurnaceBoy joined
[15:44] <pugs_svn> r27025 | pmichaud++ | [t/spec]:  Unfudge passing todo test (jnthn++)

[15:45] *** hanekomu_ joined
[15:47] *** amoc left
[15:50] *** synth joined
[15:54] *** hanekomu left
[15:56] *** Jedai joined
[16:01] *** alester joined
[16:02] <pugs_svn> r27026 | pmichaud++ | [t/spec]:  Some unfudging and re-fudging for rakudo.

[16:03] <mberends> lichtkind: (wiki navigation)++

[16:07] <pugs_svn> r27027 | pmichaud++ | [t/spec]:  More unfudging for rakudo.

[16:10] *** rindolf joined
[16:22] *** Jedai left
[16:23] *** Jedai joined
[16:30] *** Psyche^ joined
[16:46] *** Patterner left
[16:46] *** Psyche^ is now known as Patterner

[16:51] *** Whiteknight joined
[16:53] *** pmurias left
[17:00] *** hanekomu joined
[17:04] *** masak joined
[17:05] *** hanekomu_ left
[17:09] *** FurnaceBoy_ joined
[17:27] <pugs_svn> r27028 | pmichaud++ | [t/spec]  More rakudo fudge cleanups.

[17:28] *** FurnaceBoy left
[17:32] *** hanekomu left
[17:34] *** takadonet left
[17:38] *** frew|work left
[17:38] *** takadonet joined
[17:39] <masak> DanielC: (from backlog) actually, 'moin' has nothing to do with the time of day. it's from a Frisian word meaning 'beautiful'. http://de.wiktionary.org/wiki/moin

[17:39] <DanielC> masak: Really? I thought it was short for morning.

[17:39] <masak> yes, so did I for a while.

[17:42] <clintongormley> .oO ("Oh what a beautiful moooornniiiing, oh what a beautiful day!" )

[17:44] <mberends> http://moinmo.in/Documentation :)

[17:44] <jnthn> masak: Interesting blog post, I had kinda pondered the same thing...

[17:44] <masak> jnthn: thank you. :) yes, it's on my mind a lot.

[17:44] <masak> jnthn: an early version of that post held a reference to your 's and m' joke... :P

[17:44] <jnthn> Oh noes!

[17:45] <masak> jnthn: (which was not at all sexist, of course, but tactful and subtle)

[17:45] <jnthn> What happens in Oslo, stays in Olso. ;-)

[17:45] <masak> 哈哈

[17:45] <jnthn> Actually (honestly) I wrote the slide title *and* the slide and it wasn't until the first time I said it out loud when giving the talk (I forget where) that I was like "oh..."

[17:46] <jnthn> Actually nobody noticed either. :-)

[17:46] <masak> :)

[17:46] <masak> I think on that level, it's perfectly acceptable.

[17:46] <masak> only those who have sufficiently dirty minds (like me) notice.

[17:47] <jnthn> What are you saying about NPW attendees? ;-)

[17:47] *** EvanCarroll left
[17:47] <masak> jnthn: well, far as I recall, only pmichaud and I laughed loudly... :)

[17:47] <jnthn> :-)

[17:48] <masak> the rest are obviously very pure of mind and spirit. :P

[17:48] <jnthn> Ah well, it lives on in the slides...

[17:48] <jnthn> And hey, I can always claim it's a reference to the Metallica album. ;-)

[17:48] <masak> :)

[17:49] <jnthn> I just can't imagine giving a talk with pr0n in though. I'd kinda just not dare.

[17:49] <masak> personally, I think it wasn't very tastefully done.

[17:50] <masak> but Peter Szinek is right, that's not the main issue.

[17:51] <masak> the presenter didn't apologise, but defended his presentation, saying he didn't think it was offensive. but that's not the main issue either.

[17:51] <masak> the main issue is that large parts of the community then defend and encourage him.

[17:53] <jnthn> I guess everyone in a community is part of the effort to shape it.

[17:53] <masak> here in the Perl 6 community, we don't have the same proportion of women to offend, but I still don't think there's much of a danger that such a thing could happen. it wouldn't get to step 1 (the presentation), much less to step 3 (community stubbornly defending presenter)

[17:54] <masak> jnthn: aye.

[17:54] <masak> that's my thesis too.

[17:54] <jnthn> And if that's the shape of community some people want, well, I'm not sure it's a shape I like, but it's kinda going to be the outcome...

[17:54] <jnthn> Or at least, if it's what a large part want.

[17:55] <jnthn> Which I guess is your point. Well all need to be thoughtful about the community norms we're introducing, and the boundaries we're contributing to setting.

[17:55] <jnthn> s/Well/We/

[17:55] <masak> aye.

[17:56] <jnthn> I'm encouraged by the shape the Perl 6 community is taking so far.

[17:56] <jnthn> I suspect part of it is that we all know it's small and know more people involved = good thing.

[17:56] <masak> I've tried to introduce code reviews. I'm still eagerly waiting for the first code review not written by me. :) expect to have to do a few more code reviews before that happens.

[17:57] <mberends> masak: I'll review Druid when you feel it's ready

[17:57] <jnthn> I think code review happens on a more informal basis sometimes too.

[17:58] <masak> mberends: nice! it'll be ready after it gets SVG.

[17:58] <jnthn> e.g. when somebody feeds something to p6eval or nopastes some code and folks point out "oh btw, you can do it better by doing X"

[17:58] <jnthn> I'm not sure if you count that as code review, but I kinda do.

[17:58] <masak> jnthn: I'm talking about the formal kind. reviewing the code like one reviews a piece of literature.

[17:59] <jnthn> OK.

[17:59] <masak> the informal kind is important too, of course.

[17:59] <jnthn> Yes, I think both have value.

[17:59] <masak> but I mean this: http://use.perl.org/~masak/journal/38643

[17:59] <jnthn> I actually in $not-perl6-job get asked to do code reviews now and then too.

[18:00] <masak> yes, same here.

[18:00] *** takadonet is now known as cj1

[18:00] <jnthn> It's interesting, though in a lot of what I've seen also sometimes depressing.

[18:00] *** cj1 is now known as Takadonet

[18:00] <masak> I don't doubt it.

[18:01] <jnthn> Particularly when you code review something in version 1, then code review the re-write that was meant to make things better and notice it's an epic security fail.

[18:01] <masak> mberends: you've spurred me to implement SVG in Druid. that'll probably be my project for the evening. :)

[18:01] <jnthn> (Whereas the original had some issues but was generally not so bad in that angle.)

[18:01] <masak> jnthn: ouch. :/

[18:01] <jnthn> Yeah. It's hard to write a...kind...review in that situation.

[18:02] <jnthn> I rather suspect the quality of Perl 6 code floating around is rather higher though. :-)

[18:02] <jnthn> At least, the bits I've seen are often encouraging.

[18:03] <jnthn> But I think that's again a community thing: aesthetics are valued.

[18:04] <viklund_> Hurray! I can send bugreports!!

[18:04] <masak> viklund_: you mean 'bug reportz' :)

[18:04] <viklund_> sry

[18:04] <masak> np. :)

[18:04] <viklund_> Huzzah! I can haz bugz zent!!

[18:05] <masak> much better.

[18:05] <masak> I've only done one review so far, but that code was OK, and mostly well-written.

[18:05] <masak> I have three reviews queued up: PGE, the spectest suite, and STD.pm.

[18:07] <masak> anyway, I should get going.

[18:07] <masak> need to eat supper.

[18:07] <jnthn> Aye, I need dinner...think I'll pop over to the curry place.

[18:07] <jnthn> And order something hot. Try and kill this pesky cold off. :-/

[18:07] <masak> I have home-baked bread. mmm.

[18:07] <jnthn> That requires skill. :-)

[18:08] <masak> actually, no, not much.

[18:08] <jnthn> You have a bread machine or do it all by hand?

[18:08] <masak> by hand.

[18:08] <jnthn> Wow. :-)

[18:08] <masak> stop being impressed! it's like, really easy! :)

[18:09] <jnthn> Yeah yeah ;-)

[18:09] <masak> but actually taking the time to do it is very rewarding.

[18:09] <jnthn> Yes, I can appreciate that. I do like spending time cooking something.

[18:09] <jnthn> It's something different than sitting hacking.

[18:10] <masak> indeed.

[18:10] <jnthn> Anyways, food time...cu

[18:10] <masak> o/

[18:10] *** masak left
[18:13] *** xuser joined
[18:16] *** hanekomu joined
[18:23] <alester> ping masak

[18:23] <alester> RATS

[18:29] *** FurnaceBoy_ is now known as FurnaceBoy

[18:35] *** ruoso joined
[18:35] <pugs_svn> r27029 | pmichaud++ | Cleanup fudging of .lines and .get.

[18:37] *** viklund joined
[18:37] *** unitxt joined
[18:39] <dalek> rakudo: f7b42bc | pmichaud++ | src/setting/IO.pm:

[18:39] <dalek> rakudo: Fix up .get and .lines to handle eof more properly.

[18:39] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/f7b42bcb074a98916af81aea6bba65e676d2be5b

[18:47] *** rindolf left
[18:50] <pmichaud> 17:47 <masak> jnthn: well, far as I recall, only pmichaud and I laughed loudly... :)

[18:50] <pmichaud> what did I laugh about...?  

[18:51] <s1n> damn, i always seem to miss masak

[18:51] <phenny> s1n: 05 Jun 10:22Z <masak> tell s1n maybe it might be a better idea to do the Dallas.p6m announcements on perl6-users? p6l is more for language discussion, p6u more for community discussion...

[18:51] <viklund> some joke jnthn by misstake made on npw about m' and s'...

[18:51] <s1n> how do i use phenny to leave a message?

[18:51] <viklund> I wasn't there so I don

[18:51] <viklund> don't know

[18:52] <pmichaud> oh.  My laugh tends to be fairly distinctive (and loud), though.

[18:52] <s1n> it takes work to make pmichaud laugh though :)

[18:53] <viklund> s1n: my guess is that you just say 'tell $name $message'

[18:53] <viklund> tell s1n this is a test ;)

[18:53] <s1n> test

[18:53] <mberends> phenny: tell s1n this is how to leave a message

[18:53] <phenny> mberends: I'll pass that on when s1n is around.

[18:53] <ascent_> phenny: msg for s1n test

[18:54] <viklund> oh well...

[18:54] <mberends> s1n: hi

[18:54] <s1n> mberends: hi

[18:54] <phenny> s1n: 18:53Z <mberends> tell s1n this is how to leave a message

[18:54] <s1n> ahhh mberends wins the prize :)

[18:56] <s1n> phenny: tell masak the june invite was the last one on p6l (hence the "don't want to pester p6l" note). i set up a ml for just this monger group and will take your advice and use p6u for july.

[18:56] <phenny> s1n: I'll pass that on when masak is around.

[18:56] <s1n> yay

[18:56] <s1n> pmichaud: remember, it starts at 7 :)

[18:56] <pmichaud> oh, I've got it on my calendar

[18:57] <pmichaud> I was late last time because I had to wait for my wife to get home before I could leave.

[18:57] <s1n> just giving you crap :)

[18:57] <pmichaud> just taking it.  :)

[18:57] <s1n> pmichaud: so i was thinking of an idea, wanted your take on this

[18:57] *** kane_ joined
[18:58] <s1n> every meeting, i want to pick 1 feature of perl6 and have someone explain it and then we can all hack on it and play with it

[18:58] <pmichaud> sounsd great to me

[18:58] <s1n> i liked the whole sub thing from last month

[18:58] <s1n> do you have any ideas for this month?

[18:58] <pmichaud> btw, the method calls are now fixed :-)

[18:59] <pmichaud> $.foo(args)   now works properly

[18:59] <s1n> pmichaud: which method calls? $.method?

[18:59] <pmichaud> yes.

[18:59] <s1n> ahh yeah,  saw that

[18:59] <pmichaud> well, I can always come up with ideas of things to highlight, but in many ways I prefer to have someone else come up with a topic that's interesting to them

[19:00] <pmichaud> especially if there are confusing items, like last month

[19:00] <s1n> well, all of them are interesting to me, just not sure which i know well enough to explain

[19:00] <pmichaud> oh, I'll be glad to explain them :-)

[19:00] <pmichaud> unless the point is to get others to do the explanin

[19:00] <s1n> well, it'd be nice if we could take turns

[19:01] <pmichaud> sure, I'm always glad to give others the spotlight

[19:01] <pmichaud> but if someone has a topic they'd like explained, I'm happy to be the explainer

[19:01] <s1n> pmichaud: if you give me a topic, i'll do my homework :)

[19:01] <pmichaud> I'd ask the list for a topic

[19:01] <s1n> good idea

[19:01] <pmichaud> any topics I'd want to have explained would be likely tough :-)

[19:02] <s1n> nature of the beast

[19:02] <s1n> everything easy has already been done

[19:03] * s1n has to go work on cleaning garage

[19:03] <s1n> chores&

[19:07] *** jantore joined
[19:17] *** M_o_C left
[19:19] *** xinming_ joined
[19:21] *** ejs joined
[19:26] *** xinming left
[19:26] *** meppuru left
[19:26] *** Whiteknight left
[19:29] *** nbrown left
[19:30] *** ejs left
[19:38] *** clintongormley left
[19:45] *** finanalyst left
[19:45] <pmichaud> rakudo:  my $x = * - 5;  say $x(8);

[19:46] <p6eval> rakudo f7b42b: OUTPUT«3␤»

[19:46] *** pjcj joined
[19:46] <pmichaud> rakudo:  my $x = * / 3 + 4;  say $x(15);

[19:46] <p6eval> rakudo f7b42b: OUTPUT«9␤»

[19:46] <pmichaud> \o/

[19:47] <pmichaud> rakudo:  my @a = <a b c d e f g>;   say @a[*-5..*-2].perl;

[19:47] <p6eval> rakudo f7b42b: OUTPUT«["c", "d", "e", "f"]␤»

[19:47] <jnthn> pmichaud++ 

[19:48] <jnthn> pmichaud: Is it doing it off syntax now?

[19:48] <pmichaud> no.

[19:48] <jnthn> Or multi-dispatch?

[19:48] <jnthn> OK

[19:48] <pmichaud> multi-dispatch, mainly.

[19:48] <jnthn> I think that one stays as multi though...

[19:48] <jnthn> And it's *.foo that changes.

[19:49] *** xuser left
[19:49] <pmichaud> rakudo:  say +$*IN.lines;

[19:49] <p6eval> rakudo f7b42b: OUTPUT«23␤»

[19:50] <pmichaud> rakudo: my $i = 0;   while defined($*IN.get) { $i++; };   say $i;

[19:50] <p6eval> rakudo f7b42b: OUTPUT«23␤»

[19:52] <pmichaud> rakudo:  for lines() { say .substr(1,1); }

[19:52] <p6eval> rakudo f7b42b: OUTPUT«No applicable candidates found to dispatch to for 'lines'␤in Main (/tmp/e5FVf6AxeI:2)␤»

[19:52] <pmichaud> rakudo:  for $*IN.lines { say .substr(1,1); }

[19:52] <p6eval> rakudo f7b42b: OUTPUT«a␤a␤a␤e␤o␤i␤i␤Cannot take substr outside string␤␤e␤i␤i␤a␤o␤i␤i␤Cannot take substr outside string␤␤u»

[19:52] <pmichaud> rakudo:  for $*IN.lines { say .substr(0,1); }

[19:52] <p6eval> rakudo f7b42b: OUTPUT«L␤L␤L␤H␤V␤v␤v␤␤H␤l␤e␤H␤h␤v␤v␤␤M␤f␤»

[19:52] <pmichaud> rakudo:  for $*IN.lines { say .substr(0,1); }

[19:52] <p6eval> rakudo f7b42b: OUTPUT«L␤L␤L␤H␤V␤v␤v␤␤H␤l␤e␤H␤h␤v␤v␤␤M␤f␤»

[19:53] <pmichaud> hmmm.

[19:53] <pmichaud> rakudo:  for $*IN.lines { say .substr(0,1); }

[19:53] <p6eval> rakudo f7b42b: OUTPUT«L␤L␤L␤H␤V␤v␤v␤␤H␤l␤e␤H␤h␤v␤v␤␤M␤f␤a␤E␤V␤v␤v␤»

[19:53] <pmichaud> ah, okay.

[19:53] <jnthn> Hmm, weren't all those 3 the same?

[19:53] <pmichaud> alarm is still impacting us.

[19:53] <jnthn> Ah

[19:53] <pmichaud> p6eval has a short alarm timeout

[19:54] <jnthn> .oO( false alarm )

[19:54] *** nihiliad joined
[19:54] <pmichaud> I haven't figured out exactly why rakudo runs into the alarm, though.  On my system those all run regularly inside of 2 sec.

[19:54] <pmichaud> and the alarm is supposedly set at 5 (which really means between 4 and 5)

[19:55] <jnthn> Aye, odd. There was a suggestion it was due to cron jobs that suck up a lot of resources, but I wasn't 100% convinced on that.

[19:59] *** eternaleye left
[20:03] <kidd_> can anyone explain what does the "my $x = * - 5; say $x(8)" does?  pointing me to a synopsis is ok too :)

[20:07] <DanielC> How do you make a regex that matches either a word character or a dot? I tried using [ \w \. ] but that doesn't match either :-(

[20:10] <DanielC> [ \w || \. ] seems to work, but I don't know why || is necessary. What else could [ \w \. ] possibly mean?

[20:11] <skids_> Word then a dot

[20:12] <skids_> || is like perl5 |

[20:12] <DanielC> But you would get the same with just plain  \w \.  So the [  ] don't seem to add anything.

[20:12] <skids_> oh sorry.  I was dropping the [

[20:12] <DanielC> Actually... It looks like the backslash is not necessary inside [  ]

[20:12] <pmichaud> it is.

[20:13] *** alester left
[20:13] <DanielC> :(

[20:13] <DanielC> ah, of course... cause . along matches anything.

[20:13] <pmichaud> the [ ... ] are for grouping.  You're correct that as written, there's not much difference between   [ \w \. ]   and just   \w \.

[20:13] <DanielC> Ok.

[20:13] <pmichaud> but there's a big difference between     [ \w \. ]+  and   \w \. +

[20:13] * skids_ wishes for /< foo bar phnord >/

[20:13] <pmichaud> skids:  I have a patch for that already -- just need to test and apply it.  

[20:14] <DanielC> Ok, thanks for the help.

[20:14] <skids_> pmichaud++ :-)

[20:14] <pmichaud> actually, the patch was made during npw -- I just haven't made the time to review it.  pmichaud--

[20:15] <skids_> Is there one for abbr<*viations> too ?

[20:15] <pmichaud> no

[20:15] *** nbrown joined
[20:15] <pmichaud> I didn't even realize that's a valid syntax

[20:15] <skids_> I might have it slightly wrong.  But came across it when trying to write a cisco ios config parser.

[20:16] <pmichaud> file a test + ticket for it :-)

[20:16] <pmichaud> anyway, I have to run for a while -- bbl

[20:16] <skids_> I may.

[20:16] <skids_> cya

[20:18] *** eternaleye joined
[20:18] <jnthn> kidd_: * - 5 creates a closure, like { $_ - 5 }

[20:19] <jnthn> kidd_: It can be useful in a map.

[20:19] <pmichaud> what's new is that this also works:

[20:19] <jnthn> rakudo: my @in = 1,2,3; say @in.map(* - 5)

[20:19] <p6eval> rakudo f7b42b: OUTPUT«-4-3-2␤»

[20:20] <pmichaud> rakudo:  my $x = * / 2 + 1;   say $x(10)

[20:20] <p6eval> rakudo f7b42b: OUTPUT«6␤»

[20:20] <jnthn> Neato.

[20:20] <pmichaud> as well as

[20:20] <pmichaud> rakudo:  my $x = * / 2 + 4 / *;   say $x(10)

[20:20] <jnthn> It looks like unreverse polish notation though. ;-)

[20:20] <p6eval> rakudo f7b42b: OUTPUT«5.4␤»

[20:21] <pmichaud> okay, definitely gone now

[20:21] <pmichaud> bbl

[20:24] <kidd_> ah great. thanks

[20:37] <kidd_> so it's a bit like ref to a sub. like my $fun = sub { (shift) * 3 }; $fun->(4) in perl5. * being the first arg.

[20:37] <kidd_> I see it can only get one arg

[20:38] <kidd_> rakudo: my $fun = ***3 +  *; say $fun(10 , 9);

[20:38] <p6eval> rakudo f7b42b: OUTPUT«too many arguments passed (2) - 1 params expected␤in Main (src/gen_setting.pm:3225)␤»

[20:38] <kidd_> rakudo: my $fun = ***3 +  *; say $fun(10);

[20:38] <p6eval> rakudo f7b42b: OUTPUT«1010␤»

[20:38] <kidd_> :)

[20:41] <pochi> rakudo: my $x = * + *; say $x(5)

[20:41] <p6eval> rakudo f7b42b: OUTPUT«10␤»

[20:41] <pochi> rakudo: my $x = * * *; say $x(5)

[20:41] <p6eval> rakudo f7b42b: OUTPUT«25␤»

[20:42] <pochi> rakudo: my $x = * * * * * * *; say $x(2)

[20:42] <p6eval> rakudo f7b42b: OUTPUT«16␤»

[20:44] <jnthn> !!

[20:45] <pochi> good for golfing :)

[20:46] <dalek> rakudo: 5f70a68 | (Martin Berends)++ | src/setting/Temporal.pm:

[20:46] <dalek> rakudo: [Temporal.pm] add Temporal::TimeZone::Observance to manage timezone

[20:46] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/5f70a6862f5066f62169da2d04a5088a16494ce3

[20:47] <jnthn> Not bad for obfuscating either.

[20:48] <pugs_svn> r27030 | mberends++ | [Temporal.t] test DateTime stringify and Temporal::TimeZone::Observance

[20:51] *** cspencer joined
[20:53] <pochi> uhu ...

[20:53] <pochi> rakudo: my $x = *******; say $x(2);

[20:53] <p6eval> rakudo 5f70a6: OUTPUT«16␤»

[20:53] <pochi> rakudo: my $x = *******; say $x(3);

[20:53] <p6eval> rakudo 5f70a6: OUTPUT«7625597484987␤»

[21:01] <pochi> nm

[21:29] *** cspencer left
[21:41] *** jan_ left
[21:42] <ruoso> http://developers.slashdot.org/story/09/06/07/184205/New-Languages-vs-Old-For-Parallel-Programming?from=rss 

[21:43] <ruoso> ^ that is a good reason for having no imperative barriers ;)

[21:46] *** jan joined
[21:46] *** jan is now known as Guest61114

[21:47] <mberends> Microsoft appears to be bolting parallel routines on to .NET 4.0 http://code.msdn.microsoft.com/ParExtSamples

[21:48] <jnthn> mberends: Yeah, expect I'll be looking at that in the not too distant future, for my .NET clients.

[21:48] * jnthn tries to keep up on the .NET world a bit too

[21:51] * ruoso holds his "no imperative barriers" banner a bit higher

[21:51] <jnthn> ruoso: I'll read that when my branes are in a better state. :-)

[21:53] <lichtkind> mberends: ping

[21:53] *** eternaleye_ joined
[21:53] <ruoso> btw... the last time TimToady spoke about it, it seems that the only imperative barrier is the "void context"...

[21:54] <ruoso> it means that if you call a sub that would return a lazy object in void context, it will be consumed immediatly

[21:54] <mberends> lichtkind: pong

[21:54] <ruoso> the same applies for any lazy construct, like for or map

[21:55] <lichtkind> mberends: what you are doing now?

[21:55] * ruoso later &

[21:55] <jnthn> mberends: Looks like thye've at least partly gone down the lock free data structures route. That's cool.

[21:56] <mberends> lichtkind: planning more tests for Temporal routines

[21:56] <lichtkind> mberends: so you are also helping moritz_ 

[21:57] <mberends> lichtkind: yes, tests are vital for this project

[21:57] <lichtkind> mberends: i seen that current syn and tests are more interwoven know good for devs buts also its now time that beginner get something more readable :)

[22:01] <mberends> lichtkind: true. the Synopses are too technical for beginners. Most references are too advanced for beginners as well. Several people are creating new beginner tutorials, I'm sure there will be more to come. It would help to unify them, avoid splintering at this early stage.

[22:01] <lichtkind> mberends: i know 3 attempts all died already

[22:01] <lichtkind> mberends: so we better get ours translated in time :)

[22:02] <mberends> lichtkind: that's a great pity :(

[22:03] <lichtkind> mberends: don't worry im german will fight to the bitter end

[22:04] *** Takadonet left
[22:05] <mberends> lichtkind: part of it may be the scattered sites and repositories with obscure addresses. Finding the right sites to carry the links is important. Perseverance++

[22:05] <lichtkind> mberends: yes the wiki is big enough

[22:06] *** eternaleye left
[22:11] *** hercynium joined
[22:17] <lichtkind> mberends: did you read the intro why i choose this name?

[22:17] <viklund> rakudo: my $x = ***; say $x(2);

[22:17] <p6eval> rakudo 5f70a6: OUTPUT«Statement not terminated properly at line 2, near "**; say $x"␤in Main (src/gen_setting.pm:0)␤»

[22:17] <viklund> rakudo: my $x = *******; say $x(2);

[22:17] <p6eval> rakudo 5f70a6: OUTPUT«16␤»

[22:17] <viklund> rakudo: my $x = *****; say $x(2);

[22:17] <p6eval> rakudo 5f70a6: OUTPUT«Statement not terminated properly at line 2, near "*; say $x("␤in Main (src/gen_setting.pm:0)␤»

[22:17] <viklund> hmm

[22:22] <mberends> lichtkind: the Emerald Tablets are new to me, but the name makes sense. Within the pages, they are called Tables instead of Tablets, it did seem strange.

[22:22] <lichtkind> mberends: yes i rename that already everyway i see it

[22:23] <lichtkind> mberends: most imporantly: "They are also written in a way, that they can be read and understood in a helpful manner again and again, on various levels of consciousness. So I try to do with these docs."

[22:26] *** payload left
[22:27] <mberends> lichtkind: your philosophy aligns perfectly with u4x as well. The magic is knowing what the reader wants to know all the way along. I've learned some of that by teaching Perl 5 so far, looking forward to teaching Perl 6.

[22:29] *** cspencer joined
[22:29] *** iblechbot left
[22:33] *** hanekomu left
[22:33] *** payload joined
[22:33] *** sri_kraih joined
[22:34] <lichtkind> mberends: please take a look at http://www.perlfoundation.org/perl6/index.cgi?perl_table_intro

[22:34] <lichtkind> mberends: so we can at least freeze that as stable :)

[22:35] * mberends presses F5

[22:35] *** meppl joined
[22:36] <mberends> :) requirements: 1. a brain

[22:38] <mberends> lichtkind: I'll gently massage some english hacking

[22:39] <lichtkind> mberends: i dunno

[22:39] <lichtkind> mberends: mean dont understand

[22:39] <mberends> I'll do just a few minor english fixes

[22:40] <lichtkind> great

[22:40] <mberends> hacking referred to the audreyt quote

[22:41] *** Limbic_Region joined
[22:41] <lichtkind> that i understood :)

[22:41] <lichtkind> i love the phrase

[22:42] <mberends> english is a very hacked language anyway. it's as elegant as the x86 instruction set.

[22:43] <lichtkind> mberends: including SSE I & II ? :)

[22:43] <mberends> that might be rap and lolspeak :)

[22:45] <lichtkind> yes linguist said that every indian language was much more expressive than english :)

[22:45] <lichtkind> meaning native americans

[22:47] <mberends> sure. and many members of #perl6 have strong linguist interests

[22:48] *** DemoFreak left
[22:48] <jnthn> English does quite well at making things up out of building blocks rather than relying so heavily on doing conjugation and declension through inflectional morphology.

[22:48] <lichtkind> mberends: the mismatch maybe comes also from the fact that table and tablet translate to the same german word

[22:49] *** hercynium left
[22:49] <jnthn> I think that probably aids it in being a language that's easy to communicate in at a basic level.

[22:52] <mberends> english is very good for n00bs. there's a workable Simple English vocab of less than 1000 words iirc.

[22:52] <jnthn> That doesn't surprise me at all.

[22:53] <jnthn> English bites once you get deeper into it though.

[22:53] <jnthn> I've been trying to explain various things to people about it of late and realized more and more how much I take for granted that actually has some quite complex gramatical underpinnings.

[22:55] *** viklund left
[22:56] <mberends> "complex underpinnings" eqv "jumping through hoops" ;)

[22:57] <lichtkind> mberends: can i insert the new nav into intro now ?

[22:57] *** Grrrr left
[22:57] <mberends> lichtkind: not just yet, completing an edit...

[22:58] <mberends> saved :)

[23:01] <mberends> lichtkind: to attract contributions from more contributors, all mention of yourself will have to go. No "I", "me" or even "we". Just Perl, and maybe "you" the reader.

[23:02] <jnthn> mberends: Indeed. I'd have more sympathy for people learning English, apart from I'm currently learning Slovak, which I suspect is just as complex.

[23:02] <mberends> It was obviously pitched differently when this was a series in $foo magazine.

[23:02] *** jferrero joined
[23:02] <jnthn> mberends: And probably at least as complex to begin with.

[23:03] <jnthn> It's a bit like Perl 5. Beautiful, a lot of language features, and lots of special cases.

[23:03] <jnthn> ;-)

[23:03] <lichtkind> mberends: yes it written some .. ago

[23:04] <mberends> jnthn: I grok Croatian at grassroots level, can imagine your state of mind ;-)

[23:04] *** justatheory joined
[23:05] <pmichaud> back

[23:05] <lichtkind> mberends: nono tablets werent for foo magazine

[23:05] <lichtkind> mberends: there are even older than that :)

[23:06] <lichtkind> feel free to change it mildly :)

[23:06] *** Whiteknight joined
[23:07] <mberends> lichtkind: that's what massage was intended to convey

[23:08] *** Grrrr joined
[23:09] <mberends> lichtkind: let me do Perl Delta Table next, but I'm sneaking off for a quick snooze before you-know-who notices :)

[23:10] *** PacoLinux left
[23:10] <lichtkind> mberends: did you see i already pasted delta :)

[23:11] <mberends> yes, it needs translation

[23:12] <lichtkind> yes i just translated heads

[23:12] <lichtkind> mberends: 1 sec

[23:13] <lichtkind> mberends: slightly improved index, so you know now whats in the chapters, now GO GO gO :)

[23:13] <lichtkind> mberends: i will do links in that time

[23:14] <lichtkind> mberends: intro is now done?

[23:14] <mberends> finished intro. starting to edit Delta

[23:15] <lichtkind> mberends: how you like the graham quote?

[23:16] <mberends> good, bad, funny, you can take it multiple ways

[23:18] <lichtkind> mberends: he has a very human and fair standpoint to perl, which is surprise given hes a lisp zealot

[23:19] <lichtkind> mberends: did you see that appendix B is now enhanced and almost entirely english

[23:21] <mberends> yes :) those tables are all very useful. often better than an alphabetically sorted list such as appendix A, because similar things are grouped.

[23:24] <lichtkind> mberends: still meditating if special var have there right place in there

[23:25] <mberends> lichtkind: it should be the right place. it is where a beginner might search for it.

[23:26] <lichtkind> mberends: good, have you the delta already open?

[23:26] <mberends> yes, but can save soon...

[23:27] <mberends> saved

[23:27] <lichtkind> i just made one minor adjustment on nav bar, you can do it too, just ** around the D:Delta so it get always highlighted whats current

[23:29] <lichtkind> mberends: make it around the whole like  *"E:Links"[Perl Links Table]*

[23:30] <mberends> good idea. shall I start editing again now?

[23:32] *** kate21de1 joined
[23:34] <lichtkind> mberends: opps i hurry

[23:35] <lichtkind> mberends: ready

[23:35] <lichtkind> mberends: links page now also operable first 2 blocks translated

[23:36] <mberends> drat. Temporal.t test 7 fails sometimes, as the script warns. But it's better to test...

[23:36] *** kate21de left
[23:38] <mberends> a tolerance of 1 second will probably always work for "now"

[23:38] <mberends> lichtkind: editing Delta again

[23:39] <lichtkind> mberends: good

[23:48] <lichtkind> mberends: you could then also finish links i will tomorrow look then into the foo tutorial that we at least get part 1,  i have enough for tonight :)

[23:49] *** Chillance left
[23:49] <mberends> lichtkind: ok, it's late for me too :)

[23:50] <lichtkind> mberends: but its great to see progress :)

[23:54] <lichtkind> mberends: found op thats was missing in index a :)

[23:54] <lichtkind> good night

[23:54] <mberends> night

[23:57] *** cspencer left
