[00:03] <Zoffix> lembark: don't see a way to exclude that path with compile time options, so I filed an Issue: https://github.com/rakudo/rakudo/issues/1936 R#1936

[00:03] <synopsebot_> R#1936 [open]: https://github.com/rakudo/rakudo/issues/1936 Wanted configuration option to exclude home dir from repos

[00:05] <Zoffix> jnthn++ # responding to R#1289 \o/

[00:05] <synopsebot_> R#1289 [open]: https://github.com/rakudo/rakudo/issues/1289 [6.d][severe] [6.d BLOCKER] Implement a Way to Know Caller's Language

[00:07] *** wamba left
[00:07] <Zoffix> Makes me think we should trim the list of 6.d changes and push anything affected by the blocker to 6.e

[00:09] *** aindilis left
[00:10] *** aindilis joined
[00:12] *** aindilis left
[00:13] *** girst joined
[00:13] *** aindilis joined
[00:15] <Zoffix> .tell moritz reminder that you're listed as Stake Holder for making @/%/& sigils reject :U stuff by default: https://github.com/perl6/6.d-prep/blob/master/TODO/FEATURES.md#--and-possibly--sigils-only-accept-definite-objects

[00:15] <yoleaux> Zoffix: I'll pass your message to moritz.

[00:16] <Zoffix> .tell samcv reminder that you're listed as stake holder for brackets stuff https://github.com/perl6/6.d-prep/blob/master/TODO/FEATURES.md#formal-rules-for-defining-matched-delimitersbrackets

[00:16] <yoleaux> Zoffix: I'll pass your message to samcv.

[00:16] *** subroot left
[00:16] <samcv> yeah that's been fixed 

[00:16] <yoleaux> 00:16Z <Zoffix> samcv: reminder that you're listed as stake holder for brackets stuff https://github.com/perl6/6.d-prep/blob/master/TODO/FEATURES.md#formal-rules-for-defining-matched-delimitersbrackets

[00:17] <samcv> should i move it from the file? i had aleady noted it was completed at the end

[00:17] *** damnlie left
[00:17] <Zoffix> oh, OK. I'll move it to the COMPLETED.md file

[00:17] <samcv> ok thanks :)

[00:17] <samcv> Zoffix: is there a way to see whether we're on 6.d or not yet?

[00:18] <samcv> from rakudo code that is

[00:18] *** damnlie joined
[00:18] <samcv> that's this issue? https://github.com/rakudo/rakudo/issues/1289

[00:18] <samcv> i'll check it out some

[00:20] <Zoffix> samcv: yeah, that's the issue. When compiling, you can use the newly available $*W.lang-ver-before('d'), for lexicals, you can just stick them in a file in src/core.d/*, but the rest (such as finding caller's lang version), that's what the Issue is about.

[00:20] *** raschipi left
[00:20] <samcv> Zoffix: so that would wok in rakudo code or no?

[00:21] <samcv> *work

[00:21] <Zoffix> samcv: yeah

[00:21] <samcv> i need to control whether .decode is strict or lenient in the decoding same with encoding

[00:21] <samcv> ah ok cool

[00:21] * Mark04 forgot quite how long compiling rakudo takes on a raspberry pi :)

[00:21] <Zoffix> samcv: that probably is part of the Issue, because you need to know the caller's lang to figure out how to make that method behave

[00:22] <Zoffix> Mark04: took like 25 minutes on mine

[00:22] <samcv> ah yeah

[00:22] *** stee3 joined
[00:22] <Zoffix> Mark04: using these instructions: https://github.com/MoarVM/MoarVM/issues/346#issuecomment-395962001  with swap increased to 2GB

[00:25] *** stee left
[00:25] <Mark04> Zoffix: hum good tips, I'm already at 2GB swap, but I'm using the arch user repository package for rakudo, and other than changing the architecture to support arm I haven't changed anything so I'll let you know how long it takes :)

[00:25] <Zoffix> ok :)

[00:26] <Zoffix> My build was on B+ Pi

[00:27] <Mark04> (although I'm loosing already cos it's like 40 minutes already… :P )

[00:27] <Zoffix> :o

[00:27] <Mark04> Pi 3 B on my end

[00:45] <Mark04> (fiou, and that's one hour, I'm off to bed!) Thanks again for the help, will be back if I can't figure out what was up.

[00:46] <Zoffix> \o

[00:48] *** markoong left
[00:48] *** markoong joined
[00:49] <Zoffix> New blog post: "Perl 6 CaR TPF Grant: Monthly Report (June, 2018)": http://blogs.perl.org/users/zoffix_znet/2018/06/perl-6-car-tpf-grant-monthly-report-june-2018.html

[00:52] *** Mark04 left
[00:53] *** markoong left
[00:53] *** reportable6 left
[00:54] *** reportable6 joined
[00:57] *** kurahaupo_ joined
[00:59] *** kurahaupo left
[01:07] *** kurahaupo_ left
[01:13] <Geth> ¦ doc: 74902c6eb7 | (Timo Paulssen)++ | doc/Type/Real.pod6

[01:13] <Geth> ¦ doc: add method Complex to Real

[01:13] <Geth> ¦ doc: 

[01:13] <Geth> ¦ doc: to explain how an Int, for example, becomes a

[01:13] <Geth> ¦ doc: Comeplex number via this coercer.

[01:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/74902c6eb7

[01:13] <synopsebot_> Link: https://doc.perl6.org/type/Real

[01:25] *** fascinum joined
[01:27] <Kaiepi> i'm experimenting with dynamic variables and eval in grammars and i'm a bit confused

[01:27] <Kaiepi> i wrote this https://hastebin.com/ayutuyagut.pl, but i'm not sure what <?{}> or <!{}> are doing or why they work

[01:27] *** kjk left
[01:28] <Zoffix> <?{}> is a successful match if the code inside the curlies returns a true value. <!{}> is the same, except false value

[01:29] <Zoffix> And in `token type` you probably meant to use just a bare block? So it's executed when that branch matches?

[01:30] *** TreyHarris joined
[01:30] <Xliff> If a subrule in a rule has multiple matches, how do I access each individual match?

[01:30] <timotimo> yes, that's why you have to put an ! when you have = 0 and a ? when you have a = 1

[01:30] <Kaiepi> ohhh

[01:30] <Xliff> I am trying $/<rule>[], but that doesn't seem to be working.

[01:31] <Kaiepi> when would i be able to use <{}>?

[01:32] <Zoffix> Kaiepi: when you're returning something to match

[01:32] <Zoffix> m: say "foo" ~~ /<{'f+'}>/

[01:32] <camelia> rakudo-moar 61878c3e0: OUTPUT: «｢f｣␤»

[01:32] <timotimo> <{ }> uses the return value of the block and treats it as regex syntax

[01:32] <Zoffix> uh

[01:32] <Zoffix> ah

[01:32] <Zoffix> m: say "foo" ~~ /<{'f.+'}>/

[01:32] <camelia> rakudo-moar 61878c3e0: OUTPUT: «｢foo｣␤»

[01:32] <Kaiepi> oh that's perfect for the grammar i'm trying to write for net::telnet

[01:32] <Zoffix> Kaiepi: like https://gist.github.com/zoffixznet/0431129fd9a5af319cff81a9fdbf4f06

[01:33] <Zoffix> Xliff: FWIW, $/<rule> can be written as just $<rule>

[01:33] <Zoffix> Xliff: what's the .gist of $/ ?

[01:33] <timotimo> Xliff: does .gist of the match object help figure out the ... yes

[01:33] <timotimo> i can also recommend Data::Dump::Tree for dumping match objects

[01:34] <Zoffix> I think that module still fails on newer rakudos

[01:34] <Xliff> I am using Data::Dump::Tree

[01:34] <Xliff> And I am using subrules that are matched via [ <s1> <s2> ]+ % [ ',' \s* ]

[01:35] <Zoffix> Xliff: what's the .gist of $/ ?

[01:35] <Xliff> So if I gist, I get alternating lines of s1=..., s2=...

[01:35] <Kaiepi> this would be equivalent right? https://gist.github.com/Kaiepi/420265032e13e6cb7089574326a6d38a

[01:35] <Xliff> Zoffix: One second.

[01:36] <Zoffix> m: say "foo" ~~ /<{Empty}>/

[01:36] <camelia> rakudo-moar 61878c3e0: OUTPUT: «Nil␤»

[01:36] <timotimo> Kaiepi: depends on how the regex engine interprets the return value of a non-taken if or unless

[01:36] <Zoffix> Kaiepi: looks like it

[01:36] <Kaiepi> what do you mean timotimo?

[01:36] <timotimo> m: say "Empty" ~~ /<{Empty}>/

[01:36] <camelia> rakudo-moar 61878c3e0: OUTPUT: «Nil␤»

[01:36] <timotimo> m: say "()" ~~ /<{Empty}>/

[01:36] <camelia> rakudo-moar 61878c3e0: OUTPUT: «Nil␤»

[01:37] <timotimo> m: say Empty.Str

[01:37] <camelia> rakudo-moar 61878c3e0: OUTPUT: «␤»

[01:37] <Zoffix> m: say "foo meow ber" ~~ m:g/<{<foo bar ber>}>/

[01:37] <camelia> rakudo-moar 61878c3e0: OUTPUT: «(｢foo｣ ｢ber｣)␤»

[01:37] <Xliff> Zoffix - https://pastebin.com/yc10i6uv

[01:37] <timotimo> well, it'll interpolate an empty string in that case, it looks like

[01:37] <Zoffix> timotimo: I think it's treated as a list of alternatives to match, not just a plain Str

[01:37] <timotimo> ah, an empty list, that's better

[01:38] <timotimo> i forgot we have that feature. it's a good feature.

[01:38] <timotimo> i'm going to bed, good luck!

[01:39] <Xliff> Zoffix: Any ideas?

[01:40] <Zoffix> Xliff: in $/<rule>[0] 'rule' is what? 'type' in your gist?

[01:40] <Xliff> Yes.

[01:40] <Xliff> OK. Is there a way to iterate? Does $/<rule>[0] do Iterator?

[01:40] <Xliff> Because when I do $/<rule>.elems, I get 1

[01:41] <Zoffix> I get 2

[01:41] <timotimo> just checking, @<rule> makes no difference?

[01:41] <Zoffix> m: say "foo 42, bar 100" ~~ /[$<type>=<[a..z]>+ \s+ $<rule>=\d+]+ % [","\s*]/; say $<type>.elems

[01:41] <camelia> rakudo-moar 61878c3e0: OUTPUT: «｢foo 42, bar 100｣␤ type => ｢foo｣␤ rule => ｢42｣␤ type => ｢bar｣␤ rule => ｢100｣␤2␤»

[01:41] <Zoffix> m: "foo 42, bar 100" ~~ /[$<type>=<[a..z]>+ \s+ $<rule>=\d+]+ % [","\s*]/; say $<type>.elems

[01:41] <camelia> rakudo-moar 61878c3e0: OUTPUT: «2␤»

[01:41] <Zoffix> Xliff: so it *would* be $/<rule>[0], etc.

[01:42] <timotimo> Xliff: do you know of GPTrixie? you might be reinventing it

[01:42] <Xliff> timotimo: No, that gives me an error.

[01:42] <Zoffix> m: "foo 42, bar 100" ~~ /[$<type>=<[a..z]>+ \s+ $<rule>=\d+]+ % [","\s*]/; for $<type> { say $++ ~ "th type is $_" }

[01:42] <camelia> rakudo-moar 61878c3e0: OUTPUT: «0th type is foo␤1th type is bar␤»

[01:42] <Zoffix> eco: GPTrixie

[01:42] <buggable> Zoffix, App::GPTrixie 'Generate NativeCall code from C headers file': http://modules.perl6.org/dist/App::GPTrixie:github:Sylvain%20'Skarsnik'%20Colinet%20%3Cscolinet@gmail.com%3E

[01:42] <Xliff> Ooh! I did NOT know about $++

[01:42] <timotimo> is it supposed to put the whole email address in there, too?

[01:42] <Xliff> Thanks!

[01:43] <Zoffix> timotimo: it's using `author`, but it should be using `auth`, which AFAIK currently is poorly specced.

[01:43] <Zoffix> But then, nothing stops people from putting email addresses into auth either, I guess

[01:43] <timotimo> OK

[01:44] <timotimo> seeya later

[01:44] <Zoffix> \o

[01:44] <Zoffix> Xliff: it's `$` actually. An anonymous state variables. The `++` is an op. 

[01:45] <Zoffix> And since you ain't got a name for the variable you can only access it up there once, so ++$, --$, $++, $-- are the most common operations to do on it

[01:47] *** Zoffix left
[01:50] <MasterDuke> Xliff: fyi, i'm not sure exactly what state it's in, but nativecallable is meant to be sort of a frontend for GPTrixie

[01:52] *** [particle] left
[01:57] *** lindylex joined
[01:59] <lindylex> I am trying to write a script to check for palindromes.  When i compare a string I flip it gives me a False even when the string is the same. https://pastebin.com/vKt3xwit USAGE ::  ./palindrome.pl "Baby Bab"  

[02:00] *** molaf left
[02:04] <lindylex> I tried this $reverseSendHalf.fc eq $firstHalf.fc;  that did not work.

[02:06] <MasterDuke> lindylex: $reverseSendHalf has a space at the end

[02:08] <Xliff> MasterDuke: nativecallable? Sounds interesting! :)

[02:09] *** [particle] joined
[02:09] <MasterDuke> nativecallable6: help

[02:09] <nativecallable6> MasterDuke, Like this nativecallable6: <some C definition> # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Nativecallable

[02:13] *** molaf joined
[02:16] <AlexDaniel> nativecallable6: struct s {char b[];};

[02:17] <nativecallable6> AlexDaniel, /tmp/gptnc.h:4:16: error: flexible array member 'b' not allowed in otherwise empty struct␤struct s {char b[];};␤ ^␤1 error generated.␤class s is repr('CStruct') is export {␤ has NYIRP6(Array with size) $.b; # char[1] b␤}

[02:17] <AlexDaniel> nativecallable6: struct s {char b[42];};

[02:17] <nativecallable6> AlexDaniel, class s is repr('CStruct') is export {␤ has NYIRP6(Array with size) $.b; # char[42] b␤}

[02:17] <AlexDaniel> I guess it does work a bit :)

[02:18] <AlexDaniel> nativecallable6: struct s {char b; float c; int d};

[02:18] <nativecallable6> AlexDaniel, https://gist.github.com/dc53310c0a50104d3ea028599341b6c2

[02:24] *** [particle]1 joined
[02:25] *** Kaiepi left
[02:27] *** [particle] left
[02:28] <Util> lindylex: When I add this code: `say [:$firstHalf, :$reverseSendHalf].perl;` ,

[02:28] <Util> I see: [:firstHalf("bab"), :reverseSendHalf("bab ")].

[02:28] <Util> That space is your problem.

[02:28] <Util> So either the answer *is* false because 'y' is not ' ',

[02:28] <Util> or you need to remove embedded blanks, like `my $without_whitespace = $sring.trans(' ', '')`

[02:29] <lindylex> Util: thanks I was trying to figure out what is wrong and how yo see that blank space.

[02:30] <Util> Oops, that should be `.trans(' ' => '')`

[02:31] <Util> When debugging, use `dd` or `say $something.perl;` , so whitespace is easy to see.

[02:31] <lindylex> Util thanks for that tip.

[02:32] <Util> m: my $a = " a b c d e f "; my $b = $a.trans(" " => ""); dd $a, $b;

[02:32] <camelia> rakudo-moar 61878c3e0: OUTPUT: «Str $a = " a b c d e f "␤Str $b = "abcdef"␤»

[02:32] <Util> lindylex: yw

[02:36] *** zgana left
[02:38] <lindylex> Util: I love this say $secondHalf.perl;  Thanks so much,

[02:41] *** lembark left
[02:42] *** lizmat left
[02:43] *** [particle] joined
[02:45] *** [particle]1 left
[02:46] *** [particle]1 joined
[02:47] *** [particle] left
[02:50] *** [particle]1 left
[02:54] *** [particle] joined
[02:57] *** Kaiepi joined
[02:59] *** araraloren_ joined
[03:02] *** Xliff left
[03:08] *** [particle] left
[03:11] *** eliasr left
[03:24] *** fascinum left
[03:24] *** ChoHag left
[03:47] <Kaiepi> evalable6, say 1

[03:47] <evalable6> Kaiepi, rakudo-moar 61878c3e0: OUTPUT: «1␤»

[03:47] <Kaiepi> evalable6, my $c = IO::Socket::INET.new(:host<telehack.com>, :port(23), :encoding<latin1>); my $fd = $c.native-descriptor; $c.close; say $fd

[03:47] <evalable6> Kaiepi, rakudo-moar 61878c3e0: OUTPUT: «-1␤»

[03:56] *** lainon joined
[04:01] <Kaiepi> evalable6, my $s = IO::Socket::INET.new(:localhost<127.0.0.1>, :localport(8000), :listen); my $fd = $s.native-descriptor; $s.close; say $fd

[04:01] <evalable6> Kaiepi, rakudo-moar 61878c3e0: OUTPUT: «-1␤»

[04:01] <Kaiepi> i'll need to check if that's supposed to be -1 or not

[04:09] <araraloren_> It's -1 on my notebook too

[04:20] *** kjk joined
[04:27] *** araraloren_ left
[04:28] *** araraloren_ joined
[04:31] *** [particle] joined
[04:34] *** AlexDaniel left
[04:36] *** espadrine joined
[04:36] *** [particle] left
[04:37] *** [particle] joined
[04:40] *** n1ge joined
[04:41] *** [particle]1 joined
[04:42] *** n1ge left
[04:42] *** n1ge joined
[04:43] *** [particle] left
[04:43] *** wamba joined
[04:50] *** curan joined
[04:55] *** sno left
[05:06] *** Xliff joined
[05:07] *** Xliff left
[05:07] *** Xliff joined
[05:09] *** skids left
[05:13] *** molaf left
[05:14] *** lindylex left
[05:14] *** entonian joined
[05:15] *** entonian left
[05:39] *** domidumont joined
[05:45] *** domidumont left
[05:46] *** domidumont joined
[05:48] *** xtreak joined
[05:55] *** xtreak_ joined
[05:58] <Geth> ¦ doc: Kaiepi++ created pull request #2106: Document using dynamic variables for state in grammars

[05:58] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2106

[05:58] *** xtreak left
[06:01] *** ufobat_ joined
[06:01] *** wamba left
[06:06] *** Xliff left
[06:07] *** espadrine left
[06:13] <Kaiepi> is there a way to configure the default flags used with Configure.pl?

[06:13] <Kaiepi> typing out "./Configure.pl --gen-moar --moar-option=--has-libuv --moar-option=--has-dyncall --moar-option=--has-libtommath --moar-option=--has-libatomic_ops --moar-option=--cc=egcc --prefix=$HOME/.perl6" is ridiculous

[06:15] *** psychoslave_ joined
[06:15] *** lainon left
[06:20] *** sno joined
[06:21] *** kjk left
[06:27] *** dogbert17 left
[06:27] *** domidumont left
[06:31] *** jrra joined
[06:33] *** robertle joined
[06:34] <El_Che> Kaiepi: I habe never used that many flags

[06:37] <Kaiepi> the only ones necessary for moar to build properly are --moar-option=--has-libuv, --moar-option=--has-dyncall --moar-option=--cc=egcc --prefix=$HOME/.perl6 

[06:38] <Kaiepi> but it's still a lot of typing

[06:41] *** MasterDuke left
[06:45] *** domidumont joined
[06:49] <El_Che> I build moar properly without any of those switches (except prefix, because I am creating packages)

[06:51] *** domidumont left
[06:54] *** domidumont joined
[06:55] *** darutoko joined
[06:55] *** xtreak_ left
[06:59] *** sjn_ joined
[07:04] *** jmerelo joined
[07:04] *** TeamBlast left
[07:06] *** sivoais left
[07:09] *** TeamBlast joined
[07:19] *** sivoais joined
[07:19] *** ChoHag joined
[07:22] *** zakharyas joined
[07:36] *** psychoslave_ left
[07:45] *** scimon joined
[07:50] *** jmerelo left
[07:54] *** Marcool joined
[07:59] *** n1ge left
[07:59] *** psychoslave_ joined
[08:00] *** lizmat joined
[08:00] *** dakkar joined
[08:10] *** lizmat left
[08:16] *** domidumont left
[08:17] <Geth> ¦ doc: 6a79faf129 | (JJ Merelo)++ | doc/Type/IO/Socket/Async.pod6

[08:17] <Geth> ¦ doc: Fixes subtitle

[08:17] <Geth> ¦ doc: 

[08:17] <Geth> ¦ doc: Also reflows and rephrases a bit. Closes #2104

[08:17] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6a79faf129

[08:17] <synopsebot_> Link: https://doc.perl6.org/type/IO::Socket::Async

[08:18] *** domidumont joined
[08:31] *** xtreak joined
[08:35] *** xtreak left
[08:37] <Geth> ¦ doc: a7dd25667d | (JJ Merelo)++ | doc/Type/IO/Socket/Async.pod6

[08:37] <Geth> ¦ doc: Fixes pod error

[08:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a7dd25667d

[08:37] <synopsebot_> Link: https://doc.perl6.org/type/IO::Socket::Async

[08:40] <Marcool> Hi all, I've been struggling with a simple script which is causing perl6 to throw "MoarVM panic: Internal error: Unwound entire stack and missed handler"

[08:40] <Marcool> I've reinstalled rakudo, reinstalled both modules that it uses (LibCurl::HTTP and JSON::Fast) and no improvement…

[08:40] <Marcool> Should I file a bug?

[08:40] <Marcool> (when I say reinstalled rakudo I mean re-compiled and installed)

[08:40] *** jmerelo joined
[08:41] <Marcool> perl6 --version -> This is Rakudo version 2018.05 built on MoarVM version 2018.05 implementing Perl 6.c.

[08:41] <Marcool> uname -a -> Linux hostname 4.14.49-1-ARCH #1 SMP Fri Jun 15 02:09:36 UTC 2018 armv7l GNU/Linux

[08:42] <Marcool> Zoffix was very helpfull last night with a bunch of suggestions to try and get better output but I can't get it to fail with anything better than that message

[08:43] <El_Che> Marcool: when in doubt, file a bug, I would say

[08:43] <Marcool> FWIW the same script works fine on a macOS 10.13 machine :/ as it did on Ziffix's setup

[08:44] <Marcool> El_Che: right, I just wanted to see if there was anything else could be suggested, above --ll-exception and MVM_SPESH_DISABLE=1

[08:45] *** wamba joined
[08:54] *** xtreak joined
[09:00] *** xtreak left
[09:01] *** xtreak joined
[09:08] *** HaraldJoerg joined
[09:12] *** japanoise joined
[09:13] *** rindolf joined
[09:13] <Marcool> Filled… https://github.com/rakudo/rakudo/issues/1937

[09:13] <Marcool> filed*, even

[09:17] *** Marcool left
[09:22] *** zakharyas left
[09:26] *** frankjh joined
[09:28] *** zakharyas joined
[09:39] *** xtreak left
[09:45] *** sena_kun joined
[10:06] *** n1ge joined
[10:07] *** n1ge left
[10:07] *** n1ge joined
[10:20] *** kurahaupo joined
[10:21] *** rindolf left
[10:24] <Geth> ¦ doc: 1b14b3b7cf | (Ben Davies)++ | doc/Language/grammars.pod6

[10:24] <Geth> ¦ doc: Document using dynamic variables for state in grammars

[10:24] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1b14b3b7cf

[10:24] <Geth> ¦ doc: a83202bf54 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Language/grammars.pod6

[10:24] <Geth> ¦ doc: Merge pull request #2106 from Kaiepi/grammars

[10:24] <synopsebot_> Link: https://doc.perl6.org/language/grammars

[10:24] <Geth> ¦ doc: 

[10:24] <Geth> ¦ doc: Document using dynamic variables for state in grammars

[10:24] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a83202bf54

[10:29] *** rindolf joined
[10:57] *** AlexDaniel joined
[11:00] *** zakharyas left
[11:11] *** markoong joined
[11:12] *** aindilis left
[11:16] *** rindolf left
[11:19] *** aindilis joined
[11:23] *** hankache joined
[11:23] <hankache> hello #perl6

[11:23] <jmerelo> Hi naoum!

[11:23] <hankache> hi jj

[11:25] <hankache> Anyone interested in translating perl6intro to Russian?

[11:25] <jmerelo> hankache: I know a few Russian users; I don't know how often they hang around here. 

[11:25] <jmerelo> .seen shitov

[11:25] <yoleaux> I haven't seen shitov around.

[11:26] <jmerelo> hankache: maybe create an issue in perl6/marketing?

[11:26] <hankache> jmerelo: I just had someone on GitHub request a Russian translation.

[11:26] <hankache> https://github.com/hankache/perl6intro/issues/184

[11:28] <hankache> jmerelo: no need to put it in perl6/marketing since there's already an issue open for it in perl6intro

[11:28] <jmerelo> Besides Andrei Shitov, there's Andrei Melezhik... To reach them, the best might be either issue or contacting them via Twitter (or the Perl 6 facebook group)

[11:29] <jmerelo> hankache: The only thing with perl6/marketing is that quite a bunch of people get notifications. But of course, do whatever you think it's best.

[11:30] <hankache> jmerelo: Gracias!

[11:31] <jmerelo> jmerelo: un placer. Buena suerte :-)

[11:40] <frankjh> Hi I am trying to get a native module of mine installing again.  I am

[11:40] <frankjh> using 'panda' and I think I have to support 'zef' now.

[11:40] <frankjh> Currently I can compile the native code, but the perl6 code does not

[11:40] <frankjh> pick up the shared library object.

[11:41] <jmerelo> frankjh: right. Panda is deprecated.

[11:41] <jmerelo> frankjh: did you setup all paths as indicated?

[11:42] <frankjh> jmerelo: Probably not, but I do not find the issue. https://pastebin.com/raw/zPrx51K9

[11:43] *** wamba left
[11:44] <jmerelo> frankjh: you can use the whole path to the library: https://docs.perl6.org/language/nativecall#Library_Paths_and_Names

[11:44] *** Ven`` joined
[11:46] <frankjh>  jmerelo: Yes, but how would that then work for people not on my machine? I thought zef should pull from github

[11:47] *** gregf_ joined
[11:47] <jmerelo> frankjh: when you say native, you mean as in NativeCall or simply native as in written totally in Perl 6?

[11:48] <jmerelo> frankjh: right, I see. It's not finding the .so.

[11:48] <frankjh> jmerelo: Sorry I meant NativeCall. It is this module https://github.com/soundart/perl6-tweetnacl

[11:49] <hankache> frankjh: maybe this can help: https://github.com/retupmoca/P6-LibraryMake

[11:49] <jmerelo> frankjh: not sure zef is ready for installing .so files... Or to keep track of them.

[11:49] * jmerelo goes AFK for now and thanks hankache for following up on this...

[11:49] *** jmerelo left
[11:51] <hankache> frankjh: LibraryMake is being used in such cases 

[11:51] *** Kaiepi left
[11:51] <frankjh> hankache: Thank you, I followed this example basically. However in Makefile.in the target for the shared object did not work 100%

[11:51] *** wamba joined
[11:53] *** Kaiepi joined
[11:53] <frankjh>  hankache: The line "%DESTDIR%/resources/libraries/%chelper%:" from the example produced a file called %chelper% so. I changed it to "%DESTDIR%/resources/libraries/libtweetnacl%SO%"

[11:55] <frankjh> hackache: in the pm6 file the line "constant CHELPER = %?RESOURCES<libraries/chelper>.absolute;" Does not seem to include the full %DESTDIR% part.

[11:55] <frankjh> It was compiled to /home/user/projects/perl6-tweetnacl/resources/libraries/libtweetnacl.so and loaded from: /home/user/projects/resources/libraries/libtweetnacl.so

[11:56] <frankjh> Somewhere there is the disconnect....

[12:01] <hankache> frankjh: I am not really sure what's going on.

[12:04] *** skrshn joined
[12:05] *** Ven`` left
[12:10] <frankjh> hankache: thanks you. Me neither. Currently I am searching for another nativecall based library which compiles its own lib and which works with zef.

[12:11] <hankache> frankjh: There's this https://github.com/hoelzro/p6-linenoise

[12:14] *** Ven`` joined
[12:18] <frankjh> hankache: ah very good. Thank you!

[12:29] *** skrshn left
[12:46] *** wamba left
[12:50] *** jmerelo joined
[12:51] *** lizmat joined
[12:51] *** rindolf joined
[12:54] *** Ven`` left
[13:05] *** tyil joined
[13:07] *** zakharyas joined
[13:08] *** tyil left
[13:09] *** tyil joined
[13:09] *** wamba joined
[13:18] *** MasterDuke joined
[13:19] <Util> https://docs.perl6.org/type/Promise#sub_await says:

[13:19] <Util>     multi sub await(Promise:D --> Promise)

[13:19] <Util> But this code:

[13:19] <Util> m: my $p = start { 1 + 2 }; my $a = await $p; say .WHAT.perl for $a, $p;

[13:19] <camelia> rakudo-moar 61878c3e0: OUTPUT: «Int␤Promise␤»

[13:19] <Util> indicates that `await` is operating as `await(Promise:D --> whatever_the_result_type_of_the_threaded_op_was)`

[13:19] <Util> , as I would expect (and have relied on in some of my code)

[13:20] <Util> Is this a doc problem, or something I am mis-understanding?

[13:20] *** ExtraCrispy left
[13:20] <jmerelo> my $p = start { 1 + 2 }; my $a := await $p; say .WHAT.perl for $a, $p;

[13:20] <evalable6> jmerelo, rakudo-moar 61878c3e0: OUTPUT: «Int␤Promise␤»

[13:21] <jmerelo> Util: might be a doc problem. Also automatic coercion. At any rate, it does not work as expected, so maybe it's the best to create an issue

[13:21] <jnthn> Util: Doc problem

[13:21] <MasterDuke> .tell Mark04 if you edit the AUR package for MoarVM to add the `--debug=3` flag to Configure.pl, then perl6-gdb-m and perl6-valgrind-m will give you some useful info when trying to run your script

[13:21] <yoleaux> MasterDuke: I'll pass your message to Mark04.

[13:21] <jnthn> There's no return type constraint on await

[13:22] <Util> jmerelo, jnthn : Thanks!

[13:23] <jmerelo> Util: you're welcome. Good luck.

[13:23] <MasterDuke> .tell Marcool if you edit the AUR package for MoarVM to add the `--debug=3` flag to Configure.pl, then perl6-gdb-m and perl6-valgrind-m will give you some useful info when trying to run your script

[13:23] <yoleaux> MasterDuke: I'll pass your message to Marcool.

[13:30] *** bhm left
[13:30] *** rindolf left
[13:31] *** rindolf joined
[13:32] *** ExtraCrispy joined
[13:38] *** mahafyi joined
[13:45] *** skids joined
[13:52] <Kaiepi> m: grammar ASCII { token TOP { <ascii> }; proto token ascii { * }; multi token ascii { <-[\x[80]..\x[FF]]>+ }; token ascii:sym<foo> { <sym> } }; dd ASCII.parse('foo')

[13:52] <camelia> rakudo-moar 61878c3e0: OUTPUT: «Match.new(list => (), pos => 3, made => Any, hash => Map.new((:ascii(Match.new(list => (), pos => 3, made => Any, hash => Map.new((:sym(Match.new(list => (), pos => 3, made => Any, hash => Map.new(()), orig => "foo", from => 0)))), orig => "foo", from…»

[13:53] <Kaiepi> m: grammar ASCII { token TOP { <ascii> }; proto token ascii { * }; multi token ascii { <-[\x[80]..\x[FF]]>+ }; token ascii:sym<foo> { <sym> } }; say ASCII.parse('foo')

[13:53] <camelia> rakudo-moar 61878c3e0: OUTPUT: «｢foo｣␤ ascii => ｢foo｣␤  sym => ｢foo｣␤»

[13:53] <Kaiepi> neat

[13:53] <Kaiepi> m: grammar ASCII { token TOP { <ascii> }; proto token ascii { * }; multi token ascii { <-[\x[80]..\x[FF]]>+ }; token ascii:sym<foo> { <sym> } }; say ASCII.parse("\xFF")

[13:53] <camelia> rakudo-moar 61878c3e0: OUTPUT: «Nil␤»

[13:57] <MasterDuke> Kaiepi: btw, i don't think any flags are actually required for MoarVM's build

[13:58] *** curan left
[14:02] <Kaiepi> some are on my system

[14:03] <Kaiepi> libuv's broken with ipv6, dyncall's broken with nativecall callbacks, gcc's too old iirc

[14:04] <MasterDuke> some sort of BSD, correct?

[14:04] <Kaiepi> yeah, openbsd

[14:05] <MasterDuke> doesn't Configure.pl have autodetection of OS and then do some things differently?

[14:06] <Kaiepi> it does, but the issues are in the libraries, not the build script

[14:07] <MasterDuke> Kaiepi: btw, changing topics, it's probably good to get in the habit of using '{*}' (i.e., no spaces) for your protos

[14:07] <MasterDuke> ah

[14:07] <Kaiepi> https://github.com/MoarVM/dyncall/commit/a4e512b321c7da37953895ef1d57ad716d0b4c5a fixes the issues i was having with dyncall

[14:07] <Kaiepi> why {*}?

[14:08] <MasterDuke> if you ever want to change the proto to put some actual code in it, you'll need to add a '{*}'

[14:09] <MasterDuke> so it's easier to just use that from the beginning, then you can just put some other braces around it if/when you're adding other code

[14:09] <Kaiepi> you can put code in protos?

[14:09] <MasterDuke> yeah

[14:11] <MasterDuke> m: m: proto sub doIt(|) { say "doing it"; {*} }; multi sub doIt(Str) { say "string" }; multi sub doIt(Int) { say "int" }; doIt("hi"); doIt(99) # example from timotimo yesterday

[14:11] <camelia> rakudo-moar 61878c3e0: OUTPUT: «doing it␤string␤doing it␤int␤»

[14:12] <MasterDuke> m: m: proto sub doIt(|) { say "doing it"; { * } }; multi sub doIt(Str) { say "string" }; multi sub doIt(Int) { say "int" }; doIt("hi"); doIt(99) # see the difference?

[14:12] <camelia> rakudo-moar 61878c3e0: OUTPUT: «doing it␤doing it␤»

[14:13] <Kaiepi> ah

[14:16] *** hankache left
[14:23] *** Kaiepi left
[14:24] *** Kaiepi joined
[14:28] *** xtreak joined
[14:28] *** lizmat left
[14:29] <b2gills> Kaiepi: I have an example where I used `proto sub MAIN (|) { try { say +{*} } or say $!.message }` https://gist.github.com/b2gills/93d1e2aa6583b95315b2

[14:30] <b2gills> Basically all of the `multi MAIN` subroutines return something that will numify into the number of bytes.

[14:33] *** molaf joined
[14:36] <Kaiepi> looks like it could be useful for some nativecall stuff

[14:36] * [Coke] tries to figure if the guy in the cowboy hat is timtoady or a lookalike. :)

[14:38] <Kaiepi> wait that's just in proto, never mind

[14:38] <jmerelo> [Coke]: Maybe he's cosplaying

[14:42] *** lizmat joined
[14:55] <robertle> does anyone know what DBIish does in terms of concurrency and connection pooling? or do I need to build my connection pool on top of DBIish?

[14:57] <moritz> last time I looked, it did some things to make it a bit thread safer

[14:57] <yoleaux> 00:15Z <Zoffix> moritz: reminder that you're listed as Stake Holder for making @/%/& sigils reject :U stuff by default: https://github.com/perl6/6.d-prep/blob/master/TODO/FEATURES.md#--and-possibly--sigils-only-accept-definite-objects

[14:59] *** lizmat left
[15:00] *** wamba left
[15:03] *** lizmat joined
[15:05] *** wamba joined
[15:11] *** zakharyas left
[15:12] *** mr_ron joined
[15:13] *** simcop2387 joined
[15:13] <mr_ron> Kaiepi: FWIW install US-ASCII module and - use US-ASCII; grammar ASCII does US-ASCII-UC { proto token TOP {*}; token TOP:sym<foo> { <sym> }; token TOP:sym<any> { (<.CHAR>+) } }; say ASCII.parse("foo"); say ASCII.parse("bar"); say ASCII.parse("\xFF")

[15:13] <yoleaux> 14 Jun 2018 01:15Z <Zoffix> mr_ron: I fixed all the modules.perl6.org issues with your dist that I saw. Repo URL is already fixed and CPAN tarball URL will get fixed on next update (~2hr)

[15:13] <mr_ron> also

[15:13] <mr_ron> m: say so "foo" ~~ /<:ascii>+/; say so "\xFF" ~~ /<:ascii>+/

[15:13] <camelia> rakudo-moar 61878c3e0: OUTPUT: «True␤False␤»

[15:17] *** araraloren_ left
[15:26] *** robertle left
[15:27] <[Coke]> btw: it was not larry. Much easier to tell side by side. :)

[15:28] *** domidumont left
[15:31] <rindolf> mr_ron: https://docs.perl6.org/routine/so - i see

[15:34] <timotimo> so it has come to this

[15:37] *** frankjh left
[15:39] *** xtreak left
[15:42] *** lichtkind joined
[15:44] *** molaf left
[15:45] <[Coke]> m: .so.WHAT

[15:45] <camelia> rakudo-moar 61878c3e0: ( no output )

[15:46] *** molaf joined
[15:50] *** jmerelo left
[15:51] *** dataangel left
[15:52] *** xtreak joined
[15:59] *** zakharyas joined
[16:03] *** zakharyas left
[16:04] *** robertle joined
[16:05] *** zakharyas joined
[16:25] *** mr_ron left
[16:27] *** domidumont joined
[16:29] *** zakharyas left
[16:32] *** dakkar left
[16:34] <rindolf> [Coke]: heh

[16:34] <rindolf> [Coke]: so what? ;)

[16:36] *** psychoslave_ left
[16:37] *** telex left
[16:38] *** scimon left
[16:39] *** sno left
[16:41] *** lizmat left
[16:46] *** ChoHag left
[16:47] *** telex joined
[16:53] <masak> so WHAT!?

[16:54] <masak> m: so .flat

[16:54] <camelia> rakudo-moar ff2bc1143: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "so " in expression "so .flat" in sink context (line 1)␤»

[16:54] <masak> m: .so.flat

[16:54] <camelia> rakudo-moar ff2bc1143: ( no output )

[16:55] <lucs> Dunno about you guys, but I've got the Miles Davis tune stuck in my head now.

[17:00] *** xtreak left
[17:01] *** xtreak joined
[17:01] <Geth> ¦ doc: zoffixznet++ created pull request #2108: [CaR Grant] Rewrite section on constants

[17:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2108

[17:01] <Geth> ¦ doc: 086d7c11bd | (Zoffix Znet)++ | doc/Language/terms.pod6

[17:01] <Geth> ¦ doc: [CaR Grant] Rewrite section on constants

[17:01] <Geth> ¦ doc: 

[17:01] <Geth> ¦ doc: - Document newly-available auto-coercion

[17:01] <Geth> ¦ doc: - Document newly-enforceable type constraints

[17:01] <synopsebot_> Link: https://doc.perl6.org/language/terms

[17:01] <Geth> ¦ doc: - Document ability to use := op and backslashed sigilless names

[17:01] <Geth> ¦ doc: - Document anonymous constants

[17:01] <Geth> ¦ doc: - Get rid of overly elaborate scoping prose. That belongs to

[17:01] <Geth> ¦ doc:     the section on scoping.

[17:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/086d7c11bd

[17:01] <Geth> ¦ doc: 7f82b6669a | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/terms.pod6

[17:01] <Geth> ¦ doc: Merge pull request #2108 from perl6/post-release-2018.06

[17:01] <Geth> ¦ doc: 

[17:01] <Geth> ¦ doc: [CaR Grant] Rewrite section on constants

[17:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7f82b6669a

[17:08] *** molaf_ joined
[17:09] *** molaf left
[17:10] *** wamba left
[17:12] *** lembark joined
[17:12] <lembark> Q: is there any way to configure NativeCall to prefer /lib64 instead of /usr/lib64?

[17:13] <lembark> Problem installing readline: it finds /usr/lib64/libreadline.so, which is an ld script on my system. Leaves me without a working readline.

[17:15] *** jmerelo joined
[17:15] <hoelzro> whoa, that's interesting

[17:19] *** xtreak left
[17:28] <MasterDuke> isn't there some sort of LD_LIBRARY_PATH env variable that might be useful?

[17:29] *** perlpilot joined
[17:32] <El_Che> lembark: zef install https://github.com/nxadm/perl6-readline.git

[17:32] <El_Che> lembark: in the meanwhile

[17:32] <El_Che> lembark: ticket is here: https://github.com/drforr/perl6-readline/issues/22

[17:37] *** sno joined
[17:38] <Geth> ¦ doc: bec29a87c0 | (JJ Merelo)++ | doc/Language/terms.pod6

[17:38] <Geth> ¦ doc: Some corrections

[17:38] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/bec29a87c0

[17:38] <Geth> ¦ doc: 53c33f585e | (JJ Merelo)++ | doc/Language/terms.pod6

[17:38] <Geth> ¦ doc: Adds skip test

[17:38] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/53c33f585e

[17:38] <synopsebot_> Link: https://doc.perl6.org/language/terms

[17:38] <Geth> ¦ doc: cda9a8296d | (JJ Merelo)++ | doc/Language/terms.pod6

[17:38] <Geth> ¦ doc: Fixed compilation errors

[17:38] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/cda9a8296d

[17:38] <Geth> ¦ doc: 51fe16cca9 | (JJ Merelo)++ | doc/Language/terms.pod6

[17:38] <Geth> ¦ doc: Some typos in comments

[17:38] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/51fe16cca9

[17:44] *** wamba joined
[17:59] *** rindolf left
[18:04] *** jmerelo left
[18:04] *** rindolf joined
[18:14] *** pecastro left
[18:18] <Geth> ¦ doc: 43a6a2b1f7 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/traps.pod6

[18:18] <Geth> ¦ doc: Fix example error

[18:18] <Geth> ¦ doc: 

[18:18] <Geth> ¦ doc: `my $list = ('b' => 2);` is not a List but a Pair, which makes the

[18:18] <Geth> ¦ doc: shown example behave differently

[18:18] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/43a6a2b1f7

[18:18] <synopsebot_> Link: https://doc.perl6.org/language/traps

[18:20] <Geth> ¦ doc: 036ab4c56a | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/traps.pod6

[18:20] <Geth> ¦ doc: Be more precise in description of `|` in arglists

[18:20] <Geth> ¦ doc: 

[18:20] <Geth> ¦ doc: Not all the time would it mean to slip in *named* argms

[18:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/036ab4c56a

[18:20] <perlpilot> Is TPC streaming any talks?

[18:21] * [Coke] yawns.

[18:21] <[Coke]> Streaming? I don't think so

[18:21] <[Coke]> They are still trying to get video volunteers for straight recording, I think.

[18:21] <Geth> ¦ doc: d1c110bfe6 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/traps.pod6

[18:21] <Geth> ¦ doc: Add example of converting a list to a Capture right in arg list

[18:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d1c110bfe6

[18:22] <perlpilot> gotcha

[18:23] *** jmerelo joined
[18:23] *** lembark left
[18:26] *** pecastro joined
[18:26] *** sauvin left
[18:30] *** espadrine joined
[18:31] *** MasterDuke left
[18:35] *** MasterDuke joined
[18:35] *** mahafyi left
[18:36] *** lizmat joined
[18:36] *** domidumont left
[18:48] *** raschipi joined
[18:56] *** zachk joined
[18:56] *** zachk left
[18:56] *** zachk joined
[18:57] *** Kaiepi left
[19:01] *** titsuki left
[19:15] *** sena_kun left
[19:15] *** darutoko left
[19:19] *** perlpilot left
[19:24] *** Zoffix joined
[19:24] <Zoffix> m: sub meow (:list( @ ( $, $second, |) )) { say $second }; meow :list<a b c>;

[19:24] <camelia> rakudo-moar ff2bc1143: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse named parameter; couldn't find right parenthesis␤at <tmp>:1␤------> 3sub meow (:list( @7⏏5 ( $, $second, |) )) { say $second }; me␤»

[19:24] <Zoffix> How to make it happy?

[19:25] <Zoffix> m: sub meow ( :@list ($z, $second, |) ) { say $second }; meow :list<a b c>;

[19:25] <camelia> rakudo-moar ff2bc1143: OUTPUT: «b␤»

[19:26] <Zoffix> This does the trick, but is there any way to do the same without having to declare @list?

[19:26] <Zoffix> s/declare.+/have @list available/;

[19:26] <moritz> a sigiled, named anonymous parameter?

[19:26] <moritz> i don't think so :)

[19:27] <Zoffix> No, it would have the sigil

[19:27] <Zoffix> Like, how to make my first example work, where it's just `:list` and `@list` is not available in the bodyt

[19:27] <Zoffix> s/would/would NOT/;

[19:31] <Zoffix> I guess that's impossible.

[19:31] <Zoffix> Perl 6 clearly isn't advanced enough for the high demands on the modern day programmers!

[19:32] <Zoffix> :)

[19:32] <Zoffix> m: sub meow (:list(:@ ($, $second, |)) { say $second }; meow :list<a b c>;

[19:32] <camelia> rakudo-moar ff2bc1143: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse named parameter; couldn't find right parenthesis␤at <tmp>:1␤------> 3sub meow (:list(:@7⏏5 ($, $second, |)) { say $second }; meow ␤»

[19:33] <Zoffix> kinda would've thought this syntax would've worked... :list is an alias :@ is the name, which is then unpacked

[19:33] <Zoffix> m: sub meow (Positional :list( ($, $second, |))) { say $second }; meow :list<a b c>;

[19:33] <camelia> rakudo-moar ff2bc1143: OUTPUT: «b␤»

[19:33] <Zoffix> win :)

[19:35] *** ufobat_ left
[19:38] *** rindolf left
[19:42] <moritz> Zoffix++

[19:43] *** gurmble joined
[19:43] *** rindolf joined
[19:50] *** grumble left
[19:50] *** gurmble is now known as grumble

[19:52] *** noganex left
[19:56] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/06/18/2018-25-a-quick-one-from-salt-lake-city/

[19:57] <Zoffix> wooo

[19:58] *** lizmat left
[19:58] *** noganex joined
[19:59] <moritz> lizmat++

[20:01] <Zoffix> lizmat++ # good weekly and very big for a "quick one" :)

[20:03] *** lindylex joined
[20:04] <lindylex> I would like to understand why I can not output the value of the class variable https://pastebin.com/xwiP2Fea

[20:06] <[Coke]> the class isn't constructed at that point.

[20:06] <[Coke]> at compile time, you're in the middle of constructing the object; are you trying to find that value out when the object is instantiated?

[20:07] <lindylex> [Coke] I see.  

[20:07] <lindylex> I would need to do it in initme

[20:07] <jmerelo> [Coke]: When would that code be actually run? Theoretically any code in class scope will be run in compile time? 

[20:07] <Zoffix> lindylex: you can just stick that linto into `submethod BUILD` to do so: submethod BUILD { say $!halfLength.perl }

[20:08] <Zoffix> That's also a pretty huge way to write a pallindrome checker

[20:08] <[Coke]> jmerelo: I believe it's getting run when the class is being constructed. not sure which phase, but "early".

[20:09] <Zoffix> m: subset Pallindrome of Str where .flip eq $_; say $_ ~~ Pallindrome for <foo []][ moom>

[20:09] <camelia> rakudo-moar ff2bc1143: OUTPUT: «False␤True␤True␤»

[20:09] <jmerelo> [Coke]: but it would be a place to do stuff with class variables or class-scoped variables.

[20:11] <Zoffix> m: say "starting"; class Foo { say "meows"; INIT say "init"; BEGIN say "begin" }; say "ending"; Foo.new; Foo.new

[20:11] <camelia> rakudo-moar ff2bc1143: OUTPUT: «begin␤init␤starting␤meows␤ending␤»

[20:14] *** lizmat joined
[20:14] *** HaraldJoerg1 joined
[20:14] *** HaraldJoerg left
[20:16] *** wamba left
[20:20] *** molaf_ left
[20:21] *** comborico1611 joined
[20:23] <jmerelo> say "starting"; class Foo { say "meows"; INIT say "init"; BEGIN say "begin" }; say 

[20:23] <jmerelo> say "starting"; class Foo { say "meows"; INIT say "init"; BEGIN say "begin"; BUILD { say "Build"} }; Foo.new; Foo.new

[20:23] <jmerelo> m: say "starting"; class Foo { say "meows"; INIT say "init"; BEGIN say "begin"; BUILD { say "Build"} }; Foo.new; Foo.new

[20:23] <camelia> rakudo-moar ff2bc1143: OUTPUT: «begin␤5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    BUILD used at line 1␤␤»

[20:24] <jmerelo> m: say "starting"; class Foo { say "meows"; INIT say "init"; BEGIN say "begin"; submethod BUILD { say "Build"} }; Foo.new; Foo.new

[20:24] <camelia> rakudo-moar ff2bc1143: OUTPUT: «begin␤init␤starting␤meows␤Build␤Build␤»

[20:24] <jmerelo> Of course.

[20:30] *** AlexDaniel left
[20:30] *** AlexDaniel joined
[20:34] *** lindylex left
[20:36] *** molaf_ joined
[20:39] <Zoffix> New blog post: "Perl 6 Colonpairoscopy": https://rakudo.party/post/Perl-6-Colonpairoscopy

[20:44] *** ChoHag joined
[20:44] *** Zoffix left
[20:47] *** subroot joined
[20:49] <raschipi> Anyone else getting TLS errors when connecting to perlmonks.org ?

[20:50] <MasterDuke> yep

[20:52] *** comborico1611 left
[20:56] *** lizmat left
[21:01] *** raschipi_ joined
[21:01] *** lizmat joined
[21:02] *** rindolf left
[21:03] *** raschipi left
[21:04] *** robertle left
[21:04] *** raschipi_ is now known as raschipi

[21:09] *** raynold joined
[21:15] *** Kaiepi joined
[21:20] <raschipi> u: 🙼

[21:20] <unicodable6> raschipi, U+1F67C VERY HEAVY SOLIDUS [So] (🙼)

[21:22] <geekosaur> "hack and slash"?

[21:23] <ilmari> bah, no "very very" characters

[21:23] <raschipi> According to Zoffiz, FatRat constructor

[21:24] <ilmari> m: (3🙼7).WHAT.say

[21:24] <camelia> rakudo-moar ff2bc1143: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3(37⏏5🙼7).WHAT.say␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        statement …»

[21:25] <raschipi> https://docs.perl6.org/language/numerics#FatRat

[21:28] <[Coke]> m: say ([1..100].race.map({ $_ +1 }).list);

[21:28] <camelia> rakudo-moar ff2bc1143: OUTPUT: «(2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 …»

[21:28] <[Coke]> ^^ that example from the docs seems to always output in the same order.

[21:28] <[Coke]> m: say ([1..Inf].race.map({ $_ +1 }).list);

[21:28] <camelia> rakudo-moar ff2bc1143: OUTPUT: «(2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 …»

[21:29] *** jmerelo left
[21:30] <lizmat> [Coke] thats probably the result of a rather large batch size, with not a lot to do, so that a job is already done before another thread gets started

[21:32] <[Coke]> should I be able to influence it with batch or degree? doesn't look like it. :|

[21:34] <raschipi> m: say ([^100].race.map({sleep .5; $_ +1 }).list[^100]);

[21:34] <camelia> rakudo-moar ff2bc1143: OUTPUT: «(timeout)»

[21:35] <raschipi> m: say ([^100].race.map({sleep .1; $_ +1 }).list);

[21:35] <camelia> rakudo-moar ff2bc1143: OUTPUT: «(65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 …»

[21:36] <raschipi> m: say ([^100].race.map({sleep .1; $_ +1 }).list);

[21:36] <camelia> rakudo-moar ff2bc1143: OUTPUT: «(65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 …»

[21:37] *** dct joined
[21:39] <[Coke]> I can't seem to force anything with degree or batch. wondering if race is just being smarter than I am.

[21:41] <[Coke]> so, with :1batch, with one of these, I can see some variance at element 99. I feel better, now

[21:44] *** Kaiepi left
[21:49] *** lizmat left
[21:50] *** Kaiepi joined
[21:52] *** skids left
[21:54] *** HaraldJoerg1 left
[21:56] <Geth> ¦ doc: 6a417e7c24 | (Rafael Schipiura)++ (committed using GitHub Web editor) | doc/Language/numerics.pod6

[21:56] <Geth> ¦ doc: Correct output

[21:56] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6a417e7c24

[21:56] <synopsebot_> Link: https://doc.perl6.org/language/numerics

[22:03] *** Zoffix joined
[22:03] <Zoffix> AlexDaniel: I got a user who emailed me an email with something that worked on earlier release but not anymore. Is there an address I can forward it to so it gets to you?

[22:03] <Zoffix> The user said they couldn't find a way to post on RT

[22:04] <AlexDaniel> Zoffix: sure, [email@hidden.address] will do

[22:04] <Zoffix> AlexDaniel: done

[22:04] <AlexDaniel> got it

[22:05] <AlexDaniel> thanks

[22:08] <AlexDaniel> gah, Crypt::TweetNacl module has Build.pm so bisectable is probably not an option

[22:08] <AlexDaniel> although, hmm…

[22:09] <AlexDaniel> why not

[22:09] * AlexDaniel does some magic

[22:10] *** lizmat joined
[22:12] *** subroot left
[22:15] <AlexDaniel> oh wow that works

[22:17] <AlexDaniel> Zoffix: alright, so

[22:17] <AlexDaniel> https://gist.github.com/Whateverable/0b1c2a2d3b6aaf968a6cac231ac677ad

[22:17] <AlexDaniel> it definitely “worked” on 2017.07

[22:17] <AlexDaniel> before that maybe there's another issue with the setup

[22:17] <AlexDaniel> c: 2017.07 https://gist.github.com/AlexDaniel/1a3628cc4ebc8cfb0fd68260c371047f

[22:17] <committable6> AlexDaniel, ¦2017.07: «»

[22:18] <AlexDaniel> c: 2017.07 https://gist.github.com/AlexDaniel/1a3628cc4ebc8cfb0fd68260c371047f

[22:18] <committable6> AlexDaniel, ¦2017.07: «04===SORRY!04=== Error while compiling /home/bisectable/git/whateverable/sandbox/x.pm6␤Undeclared routine:␤    is-deeply used at line 131␤␤ «exit code = 1»»

[22:18] <AlexDaniel> c: 2017.07 https://gist.github.com/AlexDaniel/1a3628cc4ebc8cfb0fd68260c371047f

[22:18] <committable6> AlexDaniel, ¦2017.07: «ok 1 - CryptoSecretBox.encrypt ␤»

[22:18] <AlexDaniel> yeah, that looks correct

[22:18] <AlexDaniel> bisect: old=2017.07 https://gist.github.com/AlexDaniel/1a3628cc4ebc8cfb0fd68260c371047f

[22:18] <bisectable6> AlexDaniel, Bisecting by exit code (old=2017.07 new=ff2bc11). Old exit code: 0

[22:18] <AlexDaniel> that will take some time because of module precomp

[22:19] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/47ec7d3860f27b3c7ff0a2464480376e

[22:19] <bisectable6> AlexDaniel, (2017-08-07) https://github.com/rakudo/rakudo/commit/46ef1b5b48dd51a47a7de70d4740bcea9779a104

[22:20] <AlexDaniel> Zoffix: should I create a ticket on github with this info? FWIW even if it's a regression, I don't consider it to be a blocker for that release

[22:20] <AlexDaniel> just because it was there for so long

[22:22] <Zoffix> yeah, github's better than RT

[22:32] <AlexDaniel> Zoffix: alright, R#1939

[22:32] <synopsebot_> R#1939 [open]: https://github.com/rakudo/rakudo/issues/1939 [nativecall][regression] Possible regression after NativeCall speedups

[22:33] <Zoffix> cool. AlexDaniel++

[22:33] <AlexDaniel> Zoffix: will you let them know that there's a ticket?

[22:34] <Zoffix> Yeah

[22:34] <Zoffix> Done.

[22:34] <AlexDaniel> Zoffix: thanks

[22:48] *** Zoffix left
[23:06] *** ilogger2 joined
[23:06] *** ChanServ sets mode: +v ilogger2

[23:09] *** xi- joined
[23:22] *** skids joined
[23:24] *** lizmat joined
[23:38] *** Xliff joined
[23:39] <Xliff> m: ('1, 2, 3, 4' ~~ / (\d)+ % ','/).gist.say

[23:39] <camelia> rakudo-moar ff2bc1143: OUTPUT: «｢1｣␤ 0 => ｢1｣␤»

[23:39] <Xliff> m: ("1, 2, 3, 4" ~~ / (\d)+ % ','/).gist.say

[23:39] <camelia> rakudo-moar ff2bc1143: OUTPUT: «｢1｣␤ 0 => ｢1｣␤»

[23:40] <Xliff> m: ("a, b, c, d" ~~ / (\w*) % ', '/).gist.say

[23:40] <camelia> rakudo-moar ff2bc1143: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing quantifier on the left argument of %␤at <tmp>:1␤------> 3("a, b, c, d" ~~ / (\w*) %7⏏5 ', '/).gist.say␤»

[23:40] <Xliff> m: ("a, b, c, d" ~~ / (\w)* % ', '/).gist.say

[23:40] <camelia> rakudo-moar ff2bc1143: OUTPUT: «｢a, b, c, d｣␤ 0 => ｢a｣␤ 0 => ｢b｣␤ 0 => ｢c｣␤ 0 => ｢d｣␤»

[23:41] <Xliff> m: ("a,b,c,d" ~~ / (\w)* % ', '/).gist.say

[23:41] <camelia> rakudo-moar ff2bc1143: OUTPUT: «｢a｣␤ 0 => ｢a｣␤»

[23:41] <Xliff> m: ("a,b,c,d" ~~ / (\w)* % [ ',' \s* ]/).gist.say

[23:41] <camelia> rakudo-moar ff2bc1143: OUTPUT: «｢a,b,c,d｣␤ 0 => ｢a｣␤ 0 => ｢b｣␤ 0 => ｢c｣␤ 0 => ｢d｣␤»

[23:44] *** Xliff left
