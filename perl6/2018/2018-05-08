[00:00] *** mcmillhj left
[00:05] <comborico1611> My brain's not working.  Can't figure out why this isn't returning true: https://hastebin.com/oredelocig.pl

[00:11] *** ryn1x joined
[00:14] *** mcmillhj joined
[00:17] <MasterDuke> comborico1611: it does for me, but you aren't say()ing it

[00:17] <MasterDuke> m: sub is-lower (Str $input) { return so $input ~~ rx { ^ <[a..z]> $ } }; say is-lower("b")

[00:17] <camelia> rakudo-moar df4de34ab: OUTPUT: «True␤»

[00:20] *** mcmillhj left
[00:21] *** Herby left
[00:22] *** zachk left
[00:33] *** windyhouse left
[00:44] <lookatme> morning

[00:45] <comborico1611> MasterDuke: Thanks!  That is very unintuitive behavior to me, that it needs a "say".

[00:47] *** ryn1x left
[00:47] <comborico1611> I'm trying to understand why the function doesn't just return the value of so()

[00:47] <comborico1611> Isn't it default for all routines to return last value?  

[00:49] *** ryn1x joined
[00:54] <lookatme> m: sub is-lower (Str $input) { so $input ~~ rx { ^ <[a..z]> $ } }; say is-lower("b")

[00:54] <camelia> rakudo-moar df4de34ab: OUTPUT: «True␤»

[00:54] *** mcmillhj joined
[00:55] <comborico1611> Good morning, lookatme.

[00:56] *** markong left
[00:56] <lookatme> comborico1611, good morning

[00:56] <comborico1611> Do you drink coffee?

[00:57] <lookatme> no

[00:57] <lookatme> I am not like it

[00:57] <comborico1611> I would drink coffee, but it makes my blood feel weird.

[00:58] <lookatme> I like plain water :)

[00:58] <lookatme> yeah, it not good for our health

[00:59] *** mcmillhj left
[00:59] <comborico1611> I drink plain water.  Sometimes I mix it with cranberry juice if my kidneys are acting up.

[01:01] <comborico1611> Anyways,I'm going to enjoy the evening.  Goodbye!  

[01:02] *** comborico1611 left
[01:04] *** ryn1x left
[01:07] <lookatme> :) bye

[01:18] *** entonian joined
[01:24] *** entonian left
[01:27] *** mcmillhj joined
[01:31] *** mcmillhj left
[01:39] *** shinobi-cl joined
[01:50] *** zakharyas joined
[01:50] *** ilbot3 left
[01:54] *** mcmillhj joined
[01:56] *** ilbot3 joined
[01:56] *** ChanServ sets mode: +v ilbot3

[01:59] *** mcmillhj left
[02:07] *** pilne left
[02:17] *** eliasr left
[02:33] *** mcmillhj joined
[02:38] *** mcmillhj left
[02:39] *** Herby joined
[02:39] *** ufobat_ joined
[02:43] *** ufobat left
[02:50] *** ryn1x joined
[02:56] *** Actualeyes left
[03:10] *** mcmillhj joined
[03:15] *** mcmillhj left
[03:17] *** espadrine left
[03:30] *** mcmillhj joined
[03:34] *** mcmillhj left
[03:48] *** ryn1x left
[03:59] *** Herby left
[04:03] *** mcmillhj joined
[04:08] *** mcmillhj left
[04:20] *** molaf joined
[04:21] *** mcmillhj joined
[04:25] *** mcmillhj left
[04:35] *** khw left
[04:35] *** molaf left
[04:38] *** BenGoldberg left
[04:47] *** skids left
[04:51] *** curan joined
[04:52] *** mcmillhj joined
[04:57] *** mcmillhj left
[04:58] *** sno left
[05:01] <moritz> \o

[05:01] <yoleaux> 7 May 2018 22:45Z <Tison> moritz: I found a regex like `regex key { <![#\[]> <-[;=]>+ }` and wonder what's the different between <![...]> and  <-[...]>. BTW, the former isn't documented.

[05:02] <moritz> .tell Tison <![...]> is a look-ahead, i.e. it doesn't consume a character

[05:02] <yoleaux> moritz: I'll pass your message to Tison.

[05:07] *** mcmillhj joined
[05:10] *** jmerelo joined
[05:10] <jmerelo> m: say: <a b c>

[05:10] <camelia> rakudo-moar df4de34ab: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant value a b c in sink context (lines 1, 1, 1, 1, 1, 1)␤»

[05:12] *** mcmillhj left
[05:15] *** Kaypie left
[05:17] *** Kaiepi joined
[05:27] <jmerelo> m: my $fh = '/tmp/log.txt'.IO.open; say $fh: "foo"; say '/tmp/log.txt'.IO.slurp

[05:27] <camelia> rakudo-moar df4de34ab: OUTPUT: «Earlier failures:␤ Failed to open file /tmp/log.txt: No such file or directory␤  in block <unit> at <tmp> line 1␤␤Final error:␤ Cannot resolve caller say(Failure: Str); none of these signatures match:␤    (Mu: *%_)␤  in block <unit> at <…»

[05:27] <jmerelo> m: my $fh = 'log.txt'.IO.open; say $fh: "foo"; say 'log.txt'.IO.slurp

[05:28] <camelia> rakudo-moar df4de34ab: OUTPUT: «Earlier failures:␤ Failed to open file /home/camelia/log.txt: No such file or directory␤  in block <unit> at <tmp> line 1␤␤Final error:␤ Cannot resolve caller say(Failure: Str); none of these signatures match:␤    (Mu: *%_)␤  in block <u…»

[05:29] *** Praise left
[05:30] <jmerelo> m: my $fh = '/tmp/log.txt'.IO.open: :w; say $fh: "foo"; say '/tmp/log.txt'.IO.slurp

[05:30] <camelia> rakudo-moar df4de34ab: OUTPUT: «foo␤␤»

[05:31] <jmerelo> m: my $fh = '/tmp/log.txt'.IO.open: :w; $fh: say "foo"; say '/tmp/log.txt'.IO.slurp

[05:31] <camelia> rakudo-moar df4de34ab: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3y $fh = '/tmp/log.txt'.IO.open: :w; $fh:7⏏5 say "foo"; say '/tmp/log.txt'.IO.slurp␤    expecting any of:␤        colon pair␤»

[05:42] *** mcmillhj joined
[05:43] *** shinobi-cl left
[05:47] *** mcmillhj left
[05:55] <jmerelo> p: say rindex "Camelia is a butterfly", "a";  

[05:55] <jmerelo> m: say rindex "Camelia is a butterfly", "a";  

[05:55] <camelia> rakudo-moar df4de34ab: OUTPUT: «11␤»

[05:55] <jmerelo> m: say rindex: "Camelia is a butterfly", "a";  

[05:55] <camelia> rakudo-moar df4de34ab: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling rindex() will never work with signature of the proto ($, $, $?, *%)␤at <tmp>:1␤------> 3say 7⏏5rindex: "Camelia is a butterfly", "a";␤»

[05:55] <jmerelo> m: say rindex "Camelia is a butterfly": "a";  

[05:55] <camelia> rakudo-moar df4de34ab: OUTPUT: «11␤»

[05:56] <jmerelo> m: say "Camelia is a butterfly".rindex "a";  

[05:56] <camelia> rakudo-moar df4de34ab: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say "Camelia is a butterfly".rindex7⏏5 "a";␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤ …»

[05:56] <jmerelo> m: say "Camelia is a butterfly".rindex: "a";  

[05:56] <camelia> rakudo-moar df4de34ab: OUTPUT: «11␤»

[05:56] <jmerelo> m: say "Camelia is a butterfly".rindex( "a" );  

[05:56] <camelia> rakudo-moar df4de34ab: OUTPUT: «11␤»

[05:57] <jmerelo> m: say "Camelia is a butterfly".rindex( "a" );  

[05:57] <camelia> rakudo-moar df4de34ab: OUTPUT: «11␤»

[05:57] <jmerelo> m: say "Camelia is a butterfly".index( "a" );  

[05:57] <camelia> rakudo-moar df4de34ab: OUTPUT: «1␤»

[05:57] <jmerelo> m: say "Camelia is a butterfly".index: "a" ;  

[05:57] <camelia> rakudo-moar df4de34ab: OUTPUT: «1␤»

[06:04] <jmerelo> m: my ($a, $b, $c); (($a, $b), $c) = ((1, 2), 3); say $a; ($a, $b), $c = ((1, 2), 3); say $a; ($a, $b), $c = (1, 2), 3; say $a

[06:04] <camelia> rakudo-moar df4de34ab: OUTPUT: «WARNINGS for <tmp>:␤(1 2)␤(1 2)␤(1 2)␤Useless use of $a in sink context (lines 1, 1, 1, 1, 1, 1)␤Useless use of $b in sink context (lines 1, 1, 1, 1, 1, 1)␤Useless use of constant integer 3 in sink context (lines 1, 1)␤»

[06:05] <jmerelo> m: my ($a, $b, $c); (($a, $b), $c) = ((1, 2), 3); say $a; 

[06:05] <camelia> rakudo-moar df4de34ab: OUTPUT: «(1 2)␤»

[06:05] <jmerelo> m:  ($a, $b), $c = ((1, 2), 3); say $a;

[06:05] <camelia> rakudo-moar df4de34ab: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared␤at <tmp>:1␤------> 3(7⏏5$a, $b), $c = ((1, 2), 3); say $a;␤»

[06:05] <jmerelo> m:  my ($a, $b, $c); ($a, $b), $c = ((1, 2), 3); say $a;

[06:05] <camelia> rakudo-moar df4de34ab: OUTPUT: «WARNINGS for <tmp>:␤(Any)␤Useless use of $b in sink context (lines 1, 1, 1)␤Useless use of $a in sink context (lines 1, 1, 1)␤»

[06:05] *** stmuk_ joined
[06:06] <jmerelo> m: my ($a, $b, $c); ($a, $b), $c = (1, 2), 3; say $a

[06:06] <camelia> rakudo-moar df4de34ab: OUTPUT: «WARNINGS for <tmp>:␤(Any)␤Useless use of $a in sink context (lines 1, 1, 1)␤Useless use of constant integer 3 in sink context (lines 1, 1)␤Useless use of $b in sink context (lines 1, 1, 1)␤»

[06:06] *** stmuk left
[06:09] <TimToady> m: my ($a, $b, $c); ($a, $b), $c Z= (1, 2), 3; say $a

[06:09] <camelia> rakudo-moar df4de34ab: OUTPUT: «1␤»

[06:09] <jmerelo> m: my ($a, $b, $c); ($a, ($b, $c)) = ((1, 2), 3); say $a;

[06:09] <camelia> rakudo-moar df4de34ab: OUTPUT: «(1 2)␤»

[06:09] <jmerelo> m: my ($a, $b, $c); ($a, ($b, $c)) = ((1, 2), 3, 'þ'); say $a, $c;

[06:09] <camelia> rakudo-moar df4de34ab: OUTPUT: «(1 2)þ␤»

[06:11] <TimToady> m: my ($a, $b, $c); ($a, $b), $c »=« (1, 2), 3; say $a, $c

[06:11] <camelia> rakudo-moar df4de34ab: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 3 in sink context (lines 1, 1)␤Useless use of $b in sink context (lines 1, 1, 1)␤Useless use of $a in sink context (lines 1, 1, 1)␤No such method 'name' for invocant of type 'Mu'. Did you mea…»

[06:11] <jmerelo> o/ TimToady 

[06:11] <TimToady> m: my ($a, $b, $c); (($a, $b), $c) »=« ((1, 2), 3); say $a, $c

[06:11] <camelia> rakudo-moar df4de34ab: OUTPUT: «13␤»

[06:11] <TimToady> \o

[06:11] <jmerelo> TimToady: That's neat...

[06:13] <jmerelo> TimToady: and not documented... 

[06:14] <jmerelo> OK, not true: https://docs.perl6.org/language/operators#index-entry-item_%3D-infix_%3D

[06:14] <jmerelo> But it's not well listed. Hum.

[06:14] *** mcmillhj joined
[06:16] <jmerelo> No, it's not documented...

[06:16] *** sno joined
[06:19] *** mcmillhj left
[06:24] <jmerelo> This question in SO about the foo metasyntax is still unanswered https://stackoverflow.com/questions/50210456/how-can-i-use-the-perl6-regex-metasyntax-foo-regex Someone might want to have a look at it

[06:27] <TimToady> I wonder what "use" means...

[06:28] <jmerelo> TimToady: implement? 

[06:28] <TimToady> but <foo ...> is just a funny way to write a method call

[06:29] <TimToady> if by "use" they mean implement the foo method to call, the only things you need to know is that it has to be a method on a Match object somehow, and you have to return a new match object with the new match position

[06:30] <jmerelo> TimToady: right. And that question is creating a new cursor, and doing all kind of things... and returning self, and not a new Match object.

[06:30] <TimToady> or just write a regex/token/rule, and that gets handled automatically

[06:31] <TimToady> well, returning self is just a true assertion that doesn't go anywhere

[06:33] <jmerelo> TimToady: I'll try to see if I understand that, and will try to come up with an answer... And documentation for this issue https://github.com/perl6/doc/issues/1858

[06:33] *** darutoko joined
[06:34] <TimToady> if you look in src/Perl6/Grammar.nqp you'll find a number of examples of methods pretending to be rules

[06:34] <jmerelo> TimToady: will do

[06:34] *** rindolf joined
[06:37] *** mcmillhj joined
[06:40] *** domidumont joined
[06:43] *** mcmillhj left
[06:46] *** domidumont left
[06:47] *** domidumont joined
[06:49] *** mcmillhj joined
[06:54] *** mcmillhj left
[06:58] <Geth> ¦ doc: zaucker++ created pull request #2011: README.de.md

[06:58] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2011

[07:05] *** espadrine joined
[07:18] *** daxim_ joined
[07:19] *** dakkar joined
[07:22] *** mcmillhj joined
[07:22] *** jargan is now known as jast

[07:26] *** mcmillhj left
[07:26] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/05/07/2018-19-the-six-percent-solution/

[07:27] <lizmat> grrr...

[07:27] * lizmat clickbaits https://p6weekly.wordpress.com/2018/05/07/2018-19-the-six-percent-solution/

[07:27] <lizmat> .oO( slippy fingers )

[07:35] *** wamba joined
[07:38] *** scimon joined
[07:38] *** mcmillhj joined
[07:42] *** mcmillhj left
[07:46] <moritz> lizmat++ # weekly

[07:48] *** mikejw joined
[07:56] <timotimo> cool. reddit seems to have deleted all mod mail from the perl6 subreddit? so i can't find the discussion about the weekly "what is everyone working on" post suggestion any more

[07:57] <timotimo> oh! there's a difference between "mod mail" and "moderator mail". this was in "moderator mail", not "mod mail"

[07:58] <moritz> of course there is! /s

[08:02] <mikejw> morning 

[08:04] *** mcmillhj joined
[08:09] *** mcmillhj left
[08:09] <timotimo> oh, huh, so moderator mail is the old one and modmail is the re-implementation and they call it "beta" maybe because it can't do mail yet?

[08:11] <timotimo> actually, i read something somewhere that suggests that a community has to convert from one to the other?

[08:14] <timotimo> new modmail enrollment

[08:14] <timotimo> Once chosen this can not be undone, please make sure your entire team is ready.

[08:14] <timotimo> well, how am i supposed to know if it's better if i can only see empty inboxes in the new one ...

[08:15] *** windyhouse joined
[08:19] *** mcmillhj joined
[08:23] <Geth> ¦ doc/master: 7 commits pushed by (Fritz Zaucker)++, (Juan Julián Merelo Guervós)++

[08:23] <Geth> ¦ doc/master: efedd0972b | Update modules.pod

[08:23] <Geth> ¦ doc/master: 158e8a8858 | Merge branch 'master' of github.com:perl6/doc

[08:23] <Geth> ¦ doc/master: 378748a22e | Translation of README.md to German

[08:23] <Geth> ¦ doc/master: ed501d0b8b | Add reference to English README

[08:23] <Geth> ¦ doc/master: d6c2c0e7ca | Removed link to German from German version

[08:23] <Geth> ¦ doc/master: d9d3ea1917 | Add links to different README translations

[08:23] <Geth> ¦ doc/master: e00f4f5398 | Merge pull request #2011 from zaucker/README_de

[08:23] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/b2802a2e36bb...e00f4f53981b

[08:24] *** mcmillhj left
[08:30] *** greppable6 joined
[08:38] *** [Sno] joined
[08:39] *** noganex_ left
[08:40] *** kst` left
[08:40] *** sno left
[08:40] *** kst` joined
[08:45] *** noganex joined
[08:52] <Geth> ¦ doc: 99a81de279 | (JJ Merelo)++ | doc/Language/regexes.pod6

[08:52] <synopsebot> Link: https://doc.perl6.org/language/regexes

[08:52] <Geth> ¦ doc: Adds FAILGOAL and SETGOAL to index, closes #2008

[08:52] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/99a81de279

[08:58] *** mcmillhj joined
[09:01] *** Tison joined
[09:01] <Tison> \o

[09:01] <yoleaux> 05:02Z <moritz> Tison: <![...]> is a look-ahead, i.e. it doesn't consume a character

[09:02] <Tison> yes, I see it later. Thank you moritz :-)

[09:03] *** mcmillhj left
[09:04] <moritz> my pleasure

[09:05] *** w_richard_w left
[09:06] *** tt joined
[09:16] *** zakharyas left
[09:25] *** mcmillhj joined
[09:30] *** mcmillhj left
[09:45] *** mcmillhj joined
[09:50] *** mcmillhj left
[09:53] *** Util joined
[09:54] *** ExtraCrispy joined
[10:11] *** wamba left
[10:15] *** mcmillhj joined
[10:22] *** mcmillhj left
[10:26] <ufobat_> ive a perl6 script, whenever i execute it i am getting a c stacktrace

[10:26] <ufobat_> *** Error in `/home/martin/.rakudobrew/moar-2018.01/install/bin/moar': free(): invalid size: 0x0000000001f36930 ***

[10:26] <ufobat_> is anyone intersted in it?

[10:27] <timotimo> can you reproduce it on 2018.04.1, too?

[10:27] <ufobat_> haven't installed it :(

[10:28] <ufobat_> let me upgrade my perl6 installation real quick

[10:32] *** HaraldJoerg joined
[10:40] <ufobat_> timotimo, yes

[10:42] <ufobat_> https://nopaste.xyz/?c63738a8fba4aa69#k9Cr/LG+/wUmgJRSUyzINLgT3BB2GwXYYa/pyxIl+x8=

[10:46] <ufobat_> is it a bug in the jit?

[10:47] *** ChoHag left
[10:47] *** domidumont left
[10:47] *** domidumont joined
[10:57] <ufobat_> is there anything i can do?

[11:04] *** markong joined
[11:11] <moritz> aren't there environment variables for disabling the JIT compiler?

[11:12] <moritz> MVM_JIT_DISABLE=1

[11:12] <moritz> if you run it with that, it doesn't crash, we know it's the JIT

[11:26] *** pmurias joined
[11:26] *** molaf joined
[11:26] <pmurias> do we support embedding nqp-j?

[11:27] *** lichtkind left
[11:40] *** wamba joined
[11:40] *** lichtkind joined
[11:57] *** mikejw left
[12:05] <timotimo> it's unlikely that it'd be the jit. something somewhere is corrupting the heap and whatever malloc or free happens next will possibly stumble upon it and violently explode

[12:11] *** ZofBot joined
[12:11] *** ChanServ sets mode: +v ZofBot

[12:11] *** buggable joined
[12:11] *** ChanServ sets mode: +v buggable

[12:12] *** huggable joined
[12:12] *** ChanServ sets mode: +v huggable

[12:29] *** domidumont left
[12:46] <ufobat_> with MVM_JIT_DISABLE=1 it doesnt happen

[12:47] <timotimo> can you run it under valgrind with perl6-valgrind-m?

[12:48] <AlexDaniel> jmerelo: any ideas on what should we do with doc translations?

[12:48] <AlexDaniel> jmerelo: so we started getting these README pull requests, which is fine

[12:48] <AlexDaniel> but at the same time… why? :)

[12:49] <AlexDaniel> jmerelo: I mean, like, long term

[12:53] *** mcmillhj joined
[12:58] <jmerelo> AlexDaniel: we should probably use some professional thing as it's done in the translation of the perl doc

[12:58] <jmerelo> I was in some hackathon translating stuff to Spanish, and Joaquín Ferrero is doing a great work with that.

[12:59] <jkramer> m: sub MAIN() { say $*USAGE }

[12:59] <camelia> rakudo-moar 4264c9e5b: OUTPUT: «Usage:␤  <tmp> ␤»

[12:59] <jkramer> Is it supposed to be run automatically in REPL mode?

[12:59] *** athenot joined
[13:00] <jkramer> Well I guess m: isn't really REPL

[13:00] <Geth> ¦ perl6.org: ryn1x++ created pull request #112: Update the Rakudo Star download link / description

[13:00] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/pull/112

[13:01] <jkramer> In REPL it's run whenever I declare it, no matter how often: http://dpaste.com/353HXRR

[13:04] <timotimo> the repl is a hack, it makes every new line of code as if you had written it inside curly braces at the end of the previous line

[13:04] <timotimo> i.e. you have { sub MAIN(){}; { sub MAIN(){}; { sub MAIN(){}; { sub MAIN(){}; {... } } } }

[13:05] <timotimo> at the same time, the compiler thinks it's compiling a regular program, so every time it finishes and runs the program the main helper is run along with it

[13:05] *** athenot_ joined
[13:05] *** MilkmanDan left
[13:06] *** MilkmanDan joined
[13:06] *** athenot left
[13:07] <jkramer> Oh, interesting :)

[13:08] <timotimo> at least that's my educated guess for the main helper thing

[13:13] <Geth> ¦ doc: 59852f28cd | (Will "Coke" Coleda)++ | README.de.md

[13:13] <Geth> ¦ doc: whitespace

[13:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/59852f28cd

[13:25] *** eliasr joined
[13:26] <Geth> ¦ doc/car-grant-midrat: dcd83b92f7 | (Zoffix Znet)++ | doc/Language/numerics.pod6

[13:26] <Geth> ¦ doc/car-grant-midrat: [CaR Grant] Document all allomorphic types

[13:26] <Geth> ¦ doc/car-grant-midrat: review: https://github.com/perl6/doc/commit/dcd83b92f7

[13:27] <Geth> ¦ perl6.org: d2679a6cad | ryn1x++ (committed using GitHub Web editor) | source/downloads/index.html

[13:27] <Geth> ¦ perl6.org: Update the Rakudo Star download link / description

[13:27] <Geth> ¦ perl6.org: 

[13:27] <Geth> ¦ perl6.org: I believe this linked download page for Rakudo Star is more user friendly and nicer looking than the previously linked downloads directory. The description has also been tweaked a little to better describe the link.

[13:27] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/d2679a6cad

[13:27] <Geth> ¦ perl6.org: 7488b900fb | (Zoffix Znet)++ (committed using GitHub Web editor) | source/downloads/index.html

[13:27] <Geth> ¦ perl6.org: Merge pull request #112 from ryn1x/patch-1

[13:27] <Geth> ¦ perl6.org: 

[13:27] <Geth> ¦ perl6.org: Update the Rakudo Star download link / description

[13:28] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/7488b900fb

[13:28] *** jmerelo left
[13:31] *** skids joined
[13:33] <Geth> ¦ doc/car-grant-midrat: fb060ee5b3 | (Zoffix Znet)++ | doc/Language/numerics.pod6

[13:33] <Geth> ¦ doc/car-grant-midrat: Include info on using allomorphcs with ∈ correctly

[13:33] <Geth> ¦ doc/car-grant-midrat: review: https://github.com/perl6/doc/commit/fb060ee5b3

[13:34] *** vike left
[13:34] *** ChristopherBotto joined
[13:35] <ChristopherBotto> Hello everyone o/

[13:37] <moritz> \o ChristopherBotto 

[13:37] <ChristopherBotto> I was wondering if anyone had experience installing Rakudo-Star on a Lustre filesystem. When I run make rakudo-test, it bombs out on the test "t/01-sanity/55-use-trace.t"

[13:37] <ChristopherBotto> o/ moritz

[13:39] <ChristopherBotto> Rerunning the install and will give the actual error messages. Sorry, I should have done this earlier...

[13:40] *** vike joined
[13:43] <ChristopherBotto> I can install Rakudo-Star on a different file system on the same cluster and it doesn't have any issues. This is for both 2018.01 and 2018.04. I haven't tested installation of earlier versions on the Lustre filesystem, but I can.

[13:47] <ChristopherBotto> I get this error message "Could not obtain blocking, exclusive lock: Failed to lock filehandle: 38"

[13:49] <ChristopherBotto> I get the same error message for t/01-sanity/53-transpose.t

[13:50] <El_Che> Once installed, there is no write access needed for the rakudo install directory :)

[13:51] <pmurias> any hints how I can use a maven package from the nqp-j build system?

[13:52] *** curan left
[14:04] <moritz> isn't the nqp-j build system just make?

[14:04] <pmurias> moritz: yep

[14:04] *** mcmillhj_ joined
[14:04] <pmurias> moritz: I'm not sure how to use the truffle "sdk" from nqp-j

[14:05] *** lizmat_ joined
[14:05] *** mcmillhj left
[14:06] *** lizmat left
[14:06] *** tt left
[14:07] *** greppable6 left
[14:07] *** unicodable6 left
[14:07] *** nativecallable6 left
[14:07] *** statisfiable6 left
[14:07] *** undersightable6 left
[14:07] *** quotable6 left
[14:07] *** yoleaux left
[14:08] *** quotable6 joined
[14:08] *** undersightable6 joined
[14:08] *** statisfiable6 joined
[14:08] *** nativecallable6 joined
[14:08] *** unicodable6 joined
[14:08] *** greppable6 joined
[14:12] *** Tison left
[14:13] *** nine_ is now known as nine

[14:17] <pmurias> moritz: I just mimicked the way other .jars are stored in the 3rdparty dir

[14:26] *** FROGGS joined
[14:35] *** kurahaupo left
[14:38] *** Zoffix joined
[14:38] <Zoffix> m: multi foo (int) { say "here" }; foo 42

[14:38] <camelia> rakudo-moar f038e12df: OUTPUT: «Cannot resolve caller foo(Int); none of these signatures match:␤    (int)␤  in block <unit> at <tmp> line 1␤␤»

[14:38] <Zoffix> I thought this was meant to work, 'cause it's a literal there?

[14:40] <Zoffix> m: multi foo (Int, Int) { say "full" }; multi foo(int, int) { say "native" }; foo 42, 42

[14:40] <camelia> rakudo-moar f038e12df: OUTPUT: «full␤»

[14:41] *** kurahaupo joined
[14:41] <Zoffix> m: multi infix:<foo> (Int, Int) is pure { "full" }; multi infix:<foo>(int, int) is pure { "native" }; say 42 foo 42

[14:41] <camelia> rakudo-moar f038e12df: OUTPUT: «full␤»

[14:41] <Zoffix> m: multi infix:<foo> (Int, Int) is pure { "full" }; multi infix:<foo>(int, int) is pure { "native" }; say 42 foo my int $ = 42

[14:41] <camelia> rakudo-moar f038e12df: OUTPUT: «native␤»

[14:41] <Zoffix> :S if it can do one, surely it can do both

[14:43] <ufobat_> timotimo, will try

[14:44] *** khw joined
[14:45] <Zoffix> m: multi infix:<foo>(int, int)  { "native" }; say 42 foo my int $ = 42

[14:45] <camelia> rakudo-moar f038e12df: OUTPUT: «native␤»

[14:45] <Zoffix> m: multi infix:<foo>(int, int) { say "native" }; say 42 foo my int $ = 42

[14:45] <camelia> rakudo-moar f038e12df: OUTPUT: «Cannot resolve caller infix:<foo>(Int, Int); none of these signatures match:␤    (int, int)␤  in block <unit> at <tmp> line 1␤␤»

[14:46] <Zoffix> .ask jnthn what's a succinct description of when a literal in a call would be nativized. Seems we do it only when one of the args is native AND it's a foldable routine. What's the best way to explain this to end user? https://irclog.perlgeek.de/perl6/2018-05-08#i_16142804

[14:49] *** lizmat_ is now known as lizmat

[14:50] <ufobat_> timotimo, does valgrind terminate after it has seen the errors?

[14:50] <ufobat_> yes

[14:52] <Geth> ¦ doc/coke/build: 18 commits pushed by (Will "Coke" Coleda)++

[14:52] <Geth> ¦ doc/coke/build: review: https://github.com/perl6/doc/compare/6b4c26a50415...b7fc7187be26

[14:55] <Geth> ¦ doc/car-grant-midrat: 06ebcee10d | (Zoffix Znet)++ | doc/Language/numerics.pod6

[14:55] <Geth> ¦ doc/car-grant-midrat: [CaR Grant] Document native types

[14:55] <Geth> ¦ doc/car-grant-midrat: review: https://github.com/perl6/doc/commit/06ebcee10d

[14:58] <ufobat_> timotimo, thats the valgrind result

[14:58] <ufobat_> https://nopaste.xyz/?4afdfd8c0a84ee0a#6Q9DCvXGNkA70LWPiRixt0fEZhGoCx8fkmdIgOBA6Oc=

[15:00] <Geth> ¦ doc: Kaiepi++ created pull request #2012: Document CArray.allocate

[15:00] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2012

[15:04] <Geth> ¦ doc: d56e6b3287 | (Ben Davies)++ | doc/Language/nativecall.pod6

[15:04] <synopsebot> Link: https://doc.perl6.org/language/nativecall

[15:04] <Geth> ¦ doc: Document CArray.allocate

[15:04] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d56e6b3287

[15:04] <Geth> ¦ doc: 98de8d944e | (Ben Davies)++ (committed using GitHub Web editor) | doc/Language/nativecall.pod6

[15:04] <Geth> ¦ doc: Merge pull request #2012 from Kaiepi/nativecall

[15:04] <Geth> ¦ doc: 

[15:04] <Geth> ¦ doc: Document CArray.allocate

[15:04] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/98de8d944e

[15:05] *** lucasb joined
[15:05] <Geth> ¦ doc: 7c3acf5212 | (Moritz Lenz)++ | README.de.md

[15:05] <Geth> ¦ doc: Fix typos in README.de.md

[15:05] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7c3acf5212

[15:16] *** comborico1611 joined
[15:16] <Geth> ¦ doc/car-grant-midrat: 37e8563f8a | (Zoffix Znet)++ | doc/Language/numerics.pod6

[15:16] <Geth> ¦ doc/car-grant-midrat: [CaR Grant] Document numeric infectiousness

[15:16] <Geth> ¦ doc/car-grant-midrat: review: https://github.com/perl6/doc/commit/37e8563f8a

[15:19] <donpdonp> what do I do with this META6.json

[15:20] <donpdonp> oh riiight, zef.

[15:23] *** jmerelo joined
[15:24] *** Sgeo__ joined
[15:24] <jmerelo> Hi

[15:25] *** AlexDaniel left
[15:26] <[Coke]> zoffix: "is as follow" -> needs trailing s

[15:26] *** Sgeo_ left
[15:30] <donpdonp> ok how do i use zef with META6

[15:31] <donpdonp> sooo.. anyone?

[15:31] <donpdonp> whoops wrong channel for that last comment :)

[15:31] *** itaipu joined
[15:32] <jmerelo> donpdonp: zef install .

[15:32] <donpdonp> hmm.

[15:33] <donpdonp> $ zef install .

[15:33] <donpdonp> Use of uninitialized value of type Any in string context.

[15:33] <donpdonp>   in method Str at /home/donp/.rakudobrew/moar-2018.04.1/install/share/perl6/site/sources/E05C399E53A6C4118B11051FFFDDE29C36DE9BF4 (Zef::Distribution) line 109

[15:33] <jmerelo> donpdonp: where are you using it? What's META6.json?

[15:34] <donpdonp>  META6.json => { "depends" : ["Digest::SHA256::Native", "Numeric::Pack" ] }

[15:44] <Kaiepi> looks like you're missing a [

[15:45] <jmerelo> donpdonp: right, it's kind of bare.

[15:47] <jmerelo> donpdonp: I'm adding stuff one by one to see what's essential there

[15:48] <donpdonp> jmerelo: ah ok

[15:48] <donpdonp> looks like ading "name":"x" is enough :)

[15:49] <jmerelo> donpdonp: 

[15:49] <jmerelo> right

[15:49] <jmerelo> donpdonp: can you please ask it again in StackOverflow? Kinda want all valuable questions (and answers) to be reflected there.

[15:52] <gfldex> m: my @a = [100,86,67,66,23]; say @a[1..*-2];

[15:52] <camelia> rakudo-moar 4e88fa151: OUTPUT: «(86 67 66)␤»

[15:53] <gfldex> lizmat: is there any advantage to convert to Seq first over using an array slice in https://stackoverflow.com/questions/50158450/whats-the-equivalent-in-perl-6-to-star-expressions-in-python

[15:54] <timotimo> ufobat_: it'd be cool if you could rebuild moarvm passing --debug=3 to its Configure.pl parameters, then we'd get line numbers in the backtraces

[15:55] <Geth> ¦ doc/car-grant-midrat: 51e79cb458 | (Zoffix Znet)++ | doc/Language/numerics.pod6

[15:55] <Geth> ¦ doc/car-grant-midrat: Fix typo

[15:55] <Geth> ¦ doc/car-grant-midrat: review: https://github.com/perl6/doc/commit/51e79cb458

[15:55] <lizmat> gfldex: array slice handling is still very expensive, so I would say yes atm

[15:57] <comborico1611> What is the effect for or() in this statement: $var = $another-var or $another-var2

[15:58] <Geth> ¦ doc: JJ self-unassigned Translate README.md to languages https://github.com/perl6/doc/issues/1984

[15:59] *** Kaiepi left
[15:59] *** Kaiepi joined
[15:59] <Zoffix> comborico1611: that's likely an error

[16:00] <Zoffix> comborico1611: $var = ($another-var or $another-var2)  on the other hand would assign $another-var to $var unless it's false, in which case $another-var2 would be assigned. The original version is likely an error because due to precedence $var is assigned $another-var always and if after assignment it's false then $another-var2 is evaluated, presumably in sink context

[16:02] <gfldex> m: my $a = True and say "True"; my $b = False and say "False";

[16:02] <camelia> rakudo-moar 4e88fa151: OUTPUT: «True␤»

[16:02] <Zoffix> donpdonp: there are a bunch of required parameters (some of which zef currently ignores). Like version, and minimum supported perl version. It's still being specced at the moment, but you can see a work in progress of what's available and what's required here: http://design.perl6.org/S22.html#META6.json

[16:04] <comborico1611> Zoffix: Thanks!

[16:04] <Zoffix> comborico1611: or put another way, the `and` or `or` chains and some other ops "short curcuit". They can stop evaluating the rest of the args after a certain point. So, for example `42 and say "foo"` is equivalent to `say "foo" if 42`. And sometimes it's handy to use the `and` version since it puts the predicate at the beginning rather than the end

[16:05] <comborico1611> Hmm.

[16:05] <comborico1611> Okay.  Thanks!

[16:05] <comborico1611> Does anyone know where to find brian d foy's draft?  

[16:06] <comborico1611> ... Of "Learning Perl 6".

[16:06] <El_Che> comborico1611: you need to pay up to a certain level to get that, I think

[16:06] <comborico1611> I see.  Thanks!

[16:07] *** yoleaux joined
[16:07] *** ChanServ sets mode: +v yoleaux

[16:07] <Zoffix> comborico1611: yeah, you need to be a backer. Did you have some particular question about it tho?

[16:07] <Zoffix> .ask jnthn what's a succinct description of when a literal in a call would be nativized. Seems we do it only when one of the args is native AND it's a foldable routine. What's the best way to explain this to end user? https://irclog.perlgeek.de/perl6/2018-05-08#i_16142804

[16:07] <yoleaux> Zoffix: I'll pass your message to jnthn.

[16:09] <comborico1611> Zoffix: Nope.  Just thought I could find something to complain about I'm sure.  (sarcasm)

[16:09] <Zoffix> Ah

[16:10] <Geth> ¦ doc/car-grant-midrat: 9adf51aaa4 | (Zoffix Znet)++ | doc/Language/numerics.pod6

[16:10] <Geth> ¦ doc/car-grant-midrat: [CaR Grant] Show examples of autoboxing issues

[16:10] <Geth> ¦ doc/car-grant-midrat: 

[16:10] <Geth> ¦ doc/car-grant-midrat: and how to deal with them

[16:10] <Geth> ¦ doc/car-grant-midrat: review: https://github.com/perl6/doc/commit/9adf51aaa4

[16:11] <comborico1611> I'm on the fence whether to purchase it or not.  Low on money.  I'm trying to move to the next level of reading programs rather than beginner books.  At the moment, I have the page open in Think Perl 6, going over it again.  This time doing the problems.

[16:12] <jmerelo> Another technical report on contributions to perl6/doc repo by analyzing commits https://www.researchgate.net/publication/325020270_Perl_6_documentation_repository_through_time_contributions_through_commits?_iepl%5BviewId%5D=1M0Uvp1X6c48riNDCZ521ib8&_iepl%5Bcontexts%5D%5B0%5D=publicationCreationEOT&_iepl%5BtargetEntityId%5D=PB%3A325020270&_iepl%5BinteractionType%5D=publicationCTA

[16:12] <gfldex> lizmat: in the weekly the following does link anywhere [] reduce with anonymous function by Eugene Barsky.

[16:12] <El_Che> comborico1611: you'll probably get more out of moritz books and writing small programs for confined problems

[16:13] <jmerelo> gist of it is: lots of commits in April, monthly number of authors ~ 30, the first hackathon brought lots of new authors, the rest did not. 

[16:14] <Zoffix> comborico1611: save the money. Books suck. Also, bdfoy writes Perl 6 with a very heavy Perl 5 accent.

[16:14] <lizmat> gfldex++  # fixed

[16:14] <yoleaux> 13:41Z <brrt> lizmat: can you try jit-moar-ops once more? I've added new stuff

[16:15] <comborico1611> El_Che: I have Mortiz's book.  Not as good as Rosenfeld's.  At least for the level I am currently at.

[16:15] <moritz> Zoffix: I don't think books suck (obviously :D); it's just that some people need a more curated experience than others

[16:15] <moritz> though looking back on it, I think I'm more proud of the regex book than P6F

[16:16] <El_Che> comborico1611: yes, rosenfield's learn you to program, moritz's teaches you some features of the language

[16:17] <Zoffix> moritz: if you're low on money, they suck :) 

[16:17] <Zoffix> comborico1611: I'd suggest you seek out some free general programming book and go through it with Perl 6 as your language of choice.,

[16:19] <comborico1611> Zoffix: I've gone though several now -- around... four books.  Books by Deitel are my favorite.  Tons of repetition.

[16:19] <moritz> Zoffix: yes, agreed :)

[16:20] <El_Che> comborico1611: I am the type of person that *hates* repetition and never does exercises :)

[16:20] <moritz> though if one is low on money, and knows the author, asking nicely can't hurt

[16:20] <El_Che> hehe

[16:21] <Zoffix> comborico1611: then start writing code :) https://github.com/perl6/perl6-most-wanted/blob/master/most-wanted/modules.md#most-wanted-modules

[16:21] <El_Che> no, start solving your small usecases first :)

[16:22] <Zoffix> Contribute to rakudo core :)

[16:22] <jmerelo> Help with the documentation :-)

[16:22] <El_Che> somethng smallish that you would use bash or some basic perl/ruby/python

[16:22] <Zoffix> Lots of LHF tickets: https://github.com/rakudo/rakudo/issues?q=is%3Aopen+is%3Aissue+label%3ALHF

[16:23] *** [Sno] left
[16:24] *** Zoffix left
[16:25] <comborico1611> Zoffix: maybe so (to start writing code).

[16:25] <comborico1611> I can't figure out why this is returning false: https://hastebin.com/hukapexigo.pl 

[16:26] <comborico1611> Is it the ( ) issue? 

[16:27] <timotimo> yes, the or is at fault

[16:27] <timotimo> your program keeps doing $flag = $flag over and over

[16:27] <jkramer> I find little coding challenges useful when learning a new language, like the stuff that's posted here: https://www.reddit.com/r/dailyprogrammer/

[16:27] <timotimo> which doesn't change it at all

[16:27] <comborico1611> jkramer: Thanks!  I'll visit it now.

[16:28] <timotimo> you want || there instead

[16:28] <jkramer> There's also Project Euler and other sites with challenges, but they're usually heavily focused on math problems and not so much "real world" programming tasks

[16:29] <comborico1611> timotimo: I want || because it doesn't require (), or for another reason besides that?

[16:30] *** domidumont joined
[16:30] <lucasb> $flag = $flag or is-it-lowercase $char;

[16:31] <lucasb> $flag or= is-it-lowercase $char;

[16:32] <comborico1611> lucasb: Don't quite get it. Is that like $flag = $flag (or is-it-lowercase $char) ?

[16:32] <lucasb> more like: $flag = ($flag or is-it-lowercase $char) :)

[16:32] <comborico1611> Yeah, that's the correct one.  

[16:33] <comborico1611> Anyways, it is good to know there is some subtle differences between or() and ||.

[16:34] *** scimon left
[16:35] *** dakkar left
[16:35] *** itaipu left
[16:37] <timotimo> i wouldn't spell it or()

[16:37] <lucasb> yeah, looks like a builtin function, which doesn't exist. 'or' is binary operator

[16:39] <comborico1611> I didn't realize operators were different from functions.

[16:39] <timotimo> in one way they are, in another way they aren't

[16:39] <comborico1611> I thought built-in functions were called operators.

[16:40] <jkramer> m: or()

[16:40] <camelia> rakudo-moar 4e88fa151: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    or used at line 1␤␤»

[16:41] <comborico1611> But i'll go back to 'or'. I like doing it Lisp style with all caps. 

[16:41] <comborico1611> jkramer: I see your point.

[16:41] <comborico1611> m: or

[16:41] <camelia> rakudo-moar 4e88fa151: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    or used at line 1␤␤»

[16:41] <comborico1611> m: say

[16:41] <camelia> rakudo-moar 4e88fa151: OUTPUT: «5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 3say7⏏5<EOL>␤Other potential difficulties:␤    Unsupported use of bare "say"; in Perl 6 please use .say if you meant to call it as a method on $_, or use an …»

[16:44] <comborico1611> jkramer: Dailyprogrammer is really neat. Thanks!

[16:44] <comborico1611> Off to lunch.

[16:47] *** lindylex joined
[16:49] <lucasb> I wish to make some comments about https://github.com/perl6/doc/blob/car-grant-midrat/doc/Language/numerics.pod6#L535-L575 ; I'm not sure if I'm on the same page

[16:50] <lucasb> "no auto-boxing will occur with a multi candidate--you must provide a native candidate for it to be callable"

[16:51] <lucasb> m: multi f(Int) { 'Int' }; say f my int $x = 10 

[16:51] <camelia> rakudo-moar 4e88fa151: OUTPUT: «Int␤»

[16:52] <jnthn> Probably should say not auto-*un*boxing

[16:52] <jnthn> m: multi f(int) { 'int' }; say f 10

[16:52] <camelia> rakudo-moar 4e88fa151: OUTPUT: «int␤»

[16:52] <jnthn> m: multi f(int) { 'int' }; say f my $x = 10

[16:52] <camelia> rakudo-moar 4e88fa151: OUTPUT: «Cannot resolve caller f(Int); none of these signatures match:␤    (int)␤  in block <unit> at <tmp> line 1␤␤»

[16:53] <lucasb> m: multi f(Int) { 'Int' }; say f 10

[16:53] <camelia> rakudo-moar 4e88fa151: OUTPUT: «Int␤»

[16:53] <lucasb> m: multi f(Int) { 1+2 }; say f 10

[16:53] <camelia> rakudo-moar 4e88fa151: OUTPUT: «3␤»

[16:53] <lucasb> oops, sorry wrong snippet :)

[16:54] <lucasb> here:

[16:54] <lucasb> m: multi f(int) { 1 }; say f 42  # ok

[16:54] <camelia> rakudo-moar 4e88fa151: OUTPUT: «1␤»

[16:54] <lucasb> m: multi f(int) { 1+2 }; say f 42

[16:54] <camelia> rakudo-moar 4e88fa151: OUTPUT: «Cannot resolve caller f(Int); none of these signatures match:␤    (int)␤  in block <unit> at <tmp> line 1␤␤»

[16:54] *** Zoffix joined
[16:54] <lucasb> idk if this is related to constant-foldablity of the function body

[16:55] <lindylex> I am having an error when try to pass values to a subroutine.  This is the code https://pastebin.com/yx8g9Bg4

[16:55] <lucasb> "is pure" doesn't help either. Should it?

[16:55] <Zoffix> TBH I don't get at all what the rules are here. What's the idea behind what is and what isn't dispatchable when types don't match exactly?

[16:55] <yoleaux> 16:47Z <jnthn> Zoffix: "one of the args is declared native" is the intended semantics; I'm a tad surprised that it's only doing this when it turns out ot be foldable however

[16:55] <Zoffix> lindylex: don't put space between `printBoxes` and `(`

[16:56] <timotimo> comborico1611: you're passing a list of two entries to the printBoxes sub

[16:56] <timotimo> oh, that was lindylex, not comborico1611 

[16:56] <timotimo> sorry about that

[16:56] <Zoffix> lindylex: right now you're passing a single list; without space, you'll be passing two args. You can also just remove the parentheses entirely

[16:56] <jnthn> Zoffix: The goal is not not make people have to write "$x + my int $ = 1"

[16:56] <jnthn> Zoffix: While at the same time not using native candidates when a result could overflow

[16:56] <lindylex> Zoffix : Thanks that worked.

[16:57] <jnthn> Zoffix: Thus the principle being "you must have done something to opt in to the native candidate"

[16:57] <timotimo> so, i'm having an idea i think

[16:57] <Zoffix> m: constant $x = 10; multi f(int) { 'int' }; say f $x

[16:57] <camelia> rakudo-moar 4e88fa151: OUTPUT: «Cannot resolve caller f(Int); none of these signatures match:␤    (int)␤  in block <unit> at <tmp> line 1␤␤»

[16:57] <jnthn> Zoffix: Using a variable explicitly declared as a native type should suffice, and in that case we'll treat the other argument as a literal

[16:57] <jnthn> That's already boxed by the time it gets there, so it's not a literal.

[16:57] <timotimo> shouldn't we be able to figure out that the call to some sub looks like nameOfSub (1, 2, 3) and say "you only passed 1 argument, but it's a list. perhaps the space wasn't supposed to be there?"

[16:58] <Zoffix> OK, so only literals get special treatment.

[16:58] <jnthn> Yes. Actually whenever we encounter a literal when parsing, then - unless it's too large - we code-gen a QAST::Want node that holds both the boxed and unboxed forms

[16:59] <jnthn> Specifically to put off making a commitment until later

[17:01] <Zoffix> If a QAST::Want is the last node of a QAST::Block do you have to gen all of the alternatives for each invocation or does it know the "context" it's being called in?

[17:01] <Zoffix> s/gen all/evaluate all/;

[17:02] <Zoffix> What I mean is some sub calls are in void context and IIRC we evaluate the last statement in full just to throw it away on return.

[17:02] <Zoffix> (this isn't related to the native stuff; I just got reminded about QAST::Want stuff :P)

[17:04] <Zoffix> timotimo: we do it in X::Multi::NoMatch for writability stuff, so I'd guess the answer is yes

[17:04] <Zoffix> m: 5++

[17:04] <camelia> rakudo-moar 4e88fa151: OUTPUT: «Cannot resolve caller postfix:<++>(Int); the following candidates␤match the type but require mutable arguments:␤    (Mu:D $a is rw)␤    (Int:D $a is rw)␤␤The following do not match for other reasons:␤    (Bool:D $a is rw)␤    (Bool:U $a …»

[17:04] <Zoffix> "the following candidates␤match the type but require mutable arguments" <-- that is printed if it sees the types match but not writability

[17:06] <timotimo> well, ideally it wouldn't trigger if you do something like sub-that-takes-two $list-of-things

[17:06] <timotimo> so it'd want a piece in the grammar that figure out if there was a space and literal parentheszised list

[17:06] <jnthn> Zoffix: It only has intra-QAST::Block applicability at code-gen time, so it'll default to just returning the object stuff

[17:07] <Zoffix> ok

[17:07] <jnthn> Zoffix: Spesh may post-inline throw away useless void context stuff, though :)

[17:07] <jnthn> (There's a whole bunch of ops marked :pure)

[17:07] <Zoffix> Ah

[17:07] <jnthn> So there is some hope :)

[17:23] <b2gills> weekly https://www.researchgate.net/publication/325020270_Perl_6_documentation_repository_through_time_contributions_through_commits

[17:23] <b2gills> weekly: https://www.researchgate.net/publication/325020270_Perl_6_documentation_repository_through_time_contributions_through_commits

[17:23] <notable6> b2gills, Noted!

[17:24] <Zoffix> heh, that URL gives me "We've picked up some unusual traffic from your network and have temporarily blocked access from your IP address."

[17:26] <jmerelo> Zoffix: ResearchGate can be picky sometimes...

[17:26] <jmerelo> As usual, any suggestion or comment is welcome. You can in fact comment right there if you're registered (unlikely if you're not in academia, but still...)

[17:27] *** lucasb left
[17:29] *** itaipu joined
[17:31] *** Praise joined
[17:31] *** Praise left
[17:31] *** Praise joined
[17:31] *** pilne joined
[17:37] <Geth> ¦ doc/car-grant-midrat: 95fd2d7b75 | (Zoffix Znet)++ | doc/Language/numerics.pod6

[17:37] <Geth> ¦ doc/car-grant-midrat: Rewrite native dispatch section

[17:37] <Geth> ¦ doc/car-grant-midrat: 

[17:37] <Geth> ¦ doc/car-grant-midrat: Per info in https://irclog.perlgeek.de/perl6/2018-05-08#i_16143496

[17:37] <Geth> ¦ doc/car-grant-midrat: and         https://irclog.perlgeek.de/perl6-dev/2018-05-08#i_16143431

[17:37] <Geth> ¦ doc/car-grant-midrat: review: https://github.com/perl6/doc/commit/95fd2d7b75

[17:38] <Geth> ¦ doc: f73286ce60 | 陈梓立++ (committed using GitHub Web editor) | README.zh.md

[17:38] <Geth> ¦ doc: Update README.zh.md

[17:38] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f73286ce60

[17:40] *** stmuk joined
[17:41] <Geth> ¦ doc: 7397c2a34a | 陈梓立++ (committed using GitHub Web editor) | README.zh.md

[17:41] <Geth> ¦ doc: Update README.zh.md

[17:41] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7397c2a34a

[17:41] <Geth> ¦ doc/car-grant-midrat: 1f61fd40d6 | (Zoffix Znet)++ | doc/Language/numerics.pod6

[17:41] <Geth> ¦ doc/car-grant-midrat: Document default values for native numerics

[17:41] <Geth> ¦ doc/car-grant-midrat: review: https://github.com/perl6/doc/commit/1f61fd40d6

[17:42] *** stmuk_ left
[17:43] *** st_elmo joined
[17:44] *** Zoffix left
[17:45] <Geth> ¦ doc: 8b085b57e4 | (Will "Coke" Coleda)++ | xt/words.pws

[17:45] <Geth> ¦ doc: learn new words

[17:45] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8b085b57e4

[17:49] *** ChoHag joined
[17:51] *** ttkp6 joined
[18:20] *** AlexDaniel joined
[18:21] *** Sauvin left
[18:25] *** dogbert11 joined
[18:26] *** windyhouses joined
[18:28] *** windyhouse left
[18:28] *** dogbert17 left
[18:35] <jmerelo> March and April have been the months with the highest number of visitos to docs.perl6.org http://www.p6c.org/stats/doc.perl6.org#Unique%20visitors%20in%20each%20month

[18:39] <ingy> O HAI. I CAN HAZ WRITEZ P3RL6. BEE SCRRRD!

[18:39] <lindylex> If I have a sub with parameter and I want set a minimum for a value.  Can I do this without doing a test and reassign the minimum within the sub?

[18:40] <ingy> require %*ENV<P6MOD>; # does not dwim

[18:40] *** darutoko left
[18:41] <timotimo> ingy: what is P6MOD supposed to be?

[18:41] <ingy> a module name

[18:41] <ingy> require(%*ENV<P6MOD>); # works

[18:41] <timotimo> lindylex: i can't think of a better way than having the parameter be "is copy" and then doing "$the-param max= $minimum-value;"

[18:42] *** Zoffix joined
[18:42] <ingy> require: ... ?

[18:42] <timotimo> no, not with :

[18:42] <colomon> ingy!

[18:42] <ingy> colomon!!

[18:42] <ingy> I(ngy) am back.

[18:43] <colomon> \o/

[18:43] <jmerelo> That was a sneak preview to the April TPF grant report, which is right here https://jj.github.io/TPF-Grant/April.html

[18:43] <lindylex> timotimo : thanks.

[18:43] <ingy> turns out I'm giving a talk next month on P6 stuff

[18:43] <jmerelo> I'll be linking other reports, charts, and diverse stuff I've been doing on https://jj.github.io/TPF-Grant, which is the "official" grant site.

[18:44] <ingy> so I'll prolly be bugging you for a month

[18:44] <Zoffix> ingy: require ::(%*ENV<P6MOD>)

[18:44] *** st_elmo left
[18:44] <timotimo> i was about to say

[18:44] <timotimo> env P6MOD=Cro perl6 -e 'require ::(%*ENV<P6MOD>); say ::("Test")::'  → No such symbol 'Test'

[18:45] <ingy> Zoffix: what's wrong with require(%*ENV<P6MOD>)

[18:45] <timotimo> env P6MOD=Test perl6 -e 'require ::(%*ENV<P6MOD>); say ::("Test")::' → (Test)

[18:45] *** pull_phinger joined
[18:45] <Zoffix> ingy: does that load by path or something?

[18:45] <Zoffix> s: &require

[18:45] <SourceBaby> Zoffix, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤Undeclared routine:␤    require used at line 6␤␤

[18:45] <FROGGS> ingy: require( would be about a function call

[18:45] <FROGGS> but require is a statement

[18:46] <Zoffix> FROGGS: what's require("Foo")? Seems to be parsed as something that's trying to load something

[18:46] <timotimo> m: say &require

[18:46] <camelia> rakudo-moar 4e88fa151: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    require used at line 1␤␤»

[18:46] <timotimo> ah, it's syntax indeed, not a sub

[18:46] <Zoffix> s: &REQUIRE_IMPORT

[18:46] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/4e88fa151/src/core/operators.pm6#L606

[18:46] <FROGGS> O.o

[18:47] <FROGGS> I dunno

[18:47] <Zoffix> Yeah, briefly glancing at ASTs looks to be `require("Foo")` is the same as `require "Foo"`

[18:47] *** lindylex left
[18:47] <FROGGS> but it seems it is not tested at all

[18:48] <FROGGS> m: require(::("Test"))

[18:48] <camelia> rakudo-moar 4e88fa151: OUTPUT: «No such symbol 'Test'␤  in block <unit> at <tmp> line 1␤␤»

[18:48] <FROGGS> m: require ::("Test")

[18:48] <camelia> rakudo-moar 4e88fa151: ( no output )

[18:48] <FROGGS> m: require("Test")

[18:48] <camelia> rakudo-moar 4e88fa151: OUTPUT: «Could not find Test in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-1/share/perl6␤    CompUnit::Repository::AbsolutePath<840…»

[18:50] <Zoffix> m: multi foo(Int:D $x where * ≥ 42) { say $x }; multi foo(Any) { foo 42 }; foo 100; foo 10

[18:50] <camelia> rakudo-moar 4e88fa151: OUTPUT: «100␤42␤»

[18:51] <Zoffix> lindylex: ^ another viable way

[18:51] <Zoffix> BTW, `require %*ENV<P6MOD>;` tries to load `~%*ENV`

[18:52] <ingy> yeah

[18:52] <ingy> I thought that was a bit silly

[18:52] <ingy> which was my original point

[18:54] <Zoffix> Filed as R#1805

[18:54] <synopsebot> R#1805 [open]: https://github.com/rakudo/rakudo/issues/1805 [LTA] `require %*ENV<P6MOD>;` tries to load `~%*ENV`

[18:54] *** Juerd left
[18:56] <ingy> thanks Zoffix :)

[18:57] <ingy> I did right pseudo-p6 for a living for a year

[18:57] <ingy> time to learn the real thing!

[18:57] <timotimo> is that the fanlang thing?

[18:57] <ingy> yeah

[18:58] <Zoffix> m: multi foo($x where * ≥ 42) { rand }; multi foo(Any) { rand }; { for ^100_000 { foo 100; foo 10 }; say now - ENTER now }

[18:58] *** jmerelo left
[18:58] <camelia> rakudo-moar 4e88fa151: OUTPUT: «3.02742609␤»

[18:58] <Zoffix> m: multi foo($x is copy) { $x max= 42; rand }; { for ^100_000 { foo 100; foo 10 }; say now - ENTER now 

[18:58] <camelia> rakudo-moar 4e88fa151: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3{ foo 100; foo 10 }; say now - ENTER now7⏏5<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        stat…»

[18:58] <Zoffix> m: multi foo($x is copy) { $x max= 42; rand }; { for ^100_000 { foo 100; foo 10 }; say now - ENTER now }

[18:58] <camelia> rakudo-moar 4e88fa151: OUTPUT: «0.12492138␤»

[18:58] <Zoffix> m: say 3/.12

[18:58] <camelia> rakudo-moar 4e88fa151: OUTPUT: «25␤»

[18:58] <Zoffix> 25x slower... wth is it doing to be that slow :S

[18:58] <Zoffix> Ah. Dispatch caching. nm

[19:01] *** avuserow joined
[19:03] <avuserow> Hi all, anyone know of an Expect-like module or similar functionality in core?

[19:03] *** domidumont left
[19:03] <avuserow> specifically I'm trying to test an application that has interactive readline-based prompts

[19:05] <Zoffix> Well, we have Proc and Proc::Async in core. 

[19:05] <Zoffix> You can write to STDIN and read from STDOUT of a process

[19:06] <Zoffix> There's a somewhat massive example here: https://docs.perl6.org/type/Proc::Async

[19:06] <Zoffix> For Proc, see &run or &shell routines

[19:06] <timotimo> i do think expect has a bunch quality-of-life features over what we have?

[19:07] *** raynold joined
[19:07] <Zoffix> Yeah, should be OK to test something out, depending on what exactly being tested.

[19:07] * Zoffix &

[19:07] *** Zoffix left
[19:08] <ufobat_> timotimo, can i do this --debug=3 thingy with rekudobrew?

[19:08] <avuserow> yeah, Proc is working so far. just wanted to make sure that I wasn't missing something higher-level before writing some helper functions

[19:09] <timotimo> ufobat_: i do believe it has an option to pass a Configure.pl option to rakudo, which has an option to pass options to moarvm's configure

[19:09] <timotimo> so it'd look kind of sort of like --configure-option=--moar-configure-option=--debug=3

[19:09] <ufobat_> ah!

[19:10] <ufobat_> it think it was --moar-option

[19:10] <timotimo> that's for Configure.pl, not sure what rakudobrew wants

[19:10] <timotimo> but i'm -1 on rakudobrew anyway ;)

[19:11] *** MilkmanDan left
[19:11] <ufobat_> should i rerun the valgrind thingy?

[19:11] <timotimo> yes, please

[19:11] <ufobat_> will do - but taking a shower, give me 30 minutes

[19:11] *** MilkmanDan joined
[19:17] <comborico1611> timotimo: No worries.  (Confused me with someone else.)

[19:19] *** skids left
[19:22] *** stmuk_ joined
[19:23] *** stmuk left
[19:27] <ufobat_> timotimo, https://nopaste.xyz/?2af9423615fcfbec#YMdDhNiBgsnx/7CAK7TWyfakENPUi3v7nni4W1Yp2Mk=

[19:28] <ufobat_> does this help?

[19:28] <timotimo> a little

[19:28] <timotimo> where did this random address come from, i wonder

[19:28] <timotimo> wait, there's still no line numbers?

[19:33] *** brrt joined
[19:34] <ufobat_> should i rebuild with a different level?

[19:41] <ingy> how do I splat in a call, like: foo(*@bar)

[19:42] <lizmat> foo(|@bar)

[19:42] <ingy> I am asking google first :)

[19:42] <ingy> lizmat: ta

[19:44] *** athenot_ left
[19:44] *** athenot joined
[19:45] <ingy> did it used to be: foo(* @bar)  ??

[19:46] <ufobat_> good night everyone :)

[19:47] <lizmat> ingy: maybe long, long ago...

[19:47] *** robertle_ joined
[19:50] <ingy> 2005: https://books.google.com/books?id=ft4qUvIqyZ0C&pg=PA146&lpg=PA146&dq=perl6+splat&source=bl&ots=yHxbnF09Je&sig=2W3Jf7xjQYOnkwQf4_pSdThNdXg&hl=en&sa=X&ved=0ahUKEwj20ouQ8fbaAhXMvLwKHeUkAN4Q6AEITTAG#v=onepage&q=perl6%20splat&f=false

[19:50] *** stmuk joined
[19:50] *** dogbert11 left
[19:51] <lizmat> ingy: you're masochistic if you use that as a source for Perl 6 knowledge

[19:51] <lizmat> :-)

[19:51] <ingy> google is my masochistic friend

[19:51] <ingy> gismf

[19:52] <ingy> gimmf

[19:52] *** stmuk_ left
[19:52] <ingy> bring out the GIMMF!

[19:52] <sjn> strictly, isn't google the sadist in this relationship? :)

[19:54] <lizmat> sjn: that would be my point  :-)

[19:56] <ingy> gimsf?

[20:06] *** sno joined
[20:08] *** vcv_ joined
[20:09] *** lichtkind left
[20:12] *** squashable6 left
[20:12] *** squashable6 joined
[20:15] *** athenot_ joined
[20:17] *** athenot left
[20:18] *** ChristopherBotto left
[20:21] *** brrt left
[20:26] *** Juerd joined
[20:26] *** skids joined
[20:28] *** pull_phinger left
[20:53] <ingy> is there an easier way to construct a Foo: https://pastebin.com/K9zKjsQr

[20:54] <stmuk> by hiding the actual download links via redirects we've made it hard for people to download tarballs via either curl or wget on servers

[20:55] <Juerd> ingy: Foo.new(|$h)

[20:55] <ingy> :)

[20:55] * ingy lays some |

[20:55] <stmuk> neither does it seem possible to download using http anymore

[20:57] <ingy> stmuk: url?

[20:57] <ingy> ie: where's this download page?

[20:58] <stmuk> we are linking to https://rakudo.org/files/ 

[20:59] <El_Che> this is pretty straigtforward: https://rakudo.perl6.org/downloads/

[20:59] <stmuk> the download will work but not with the correct filname

[20:59] <El_Che> (that's where my Dockerfiles point to)

[20:59] <stmuk> El_Che: I don't think it's linked from anywhere now .. we know it but how would a downloader?

[21:00] <El_Che> stmuk: I got it from somewhere on an official page, but everything has changed now

[21:00] *** Zoffix joined
[21:00] <Zoffix> stmuk: what's the problem with the links?

[21:00] <stmuk> see above

[21:01] <Zoffix> stmuk: I still don't follow.

[21:01] <stmuk> 1. there is no http download possible

[21:02] <Zoffix> That's on purpise.

[21:02] <El_Che> that's a good thing

[21:02] <ingy> curl -LOv https://rakudo.org/latest/star/source

[21:02] <stmuk> I've already had to help someone on the list with that

[21:02] <Zoffix> Downloads with curl should work. The build instructions use curl

[21:02] *** lucasb joined
[21:02] <Zoffix> on that page

[21:02] <stmuk> I think ingy's form is now needed for the correct filename

[21:03] <ingy> it actually saves the tarball as 'source' :\

[21:03] <Zoffix> hm

[21:03] <stmuk> ingy: that's the problem I had

[21:03] <El_Che> ok, Linenoise and Readline are both failing to install. damn

[21:03] <Zoffix> it should b set via content disposition

[21:04] <lucasb> yeah, wget has that option

[21:05] <Zoffix> It works fine for me: https://i.imgur.com/fWcp7P4.png

[21:05] <El_Che> I get source as well

[21:06] <Zoffix> El_Che: with -LJO flags?

[21:06] <El_Che> no

[21:06] <El_Che> that works

[21:06] <El_Che> with my standard -sLO flags

[21:06] <lucasb>  -J, --remote-header-name  Use the header-provided filename (H)

[21:06] <stmuk> ah

[21:06] <El_Che> just did a -h to look it up

[21:07] <El_Che> wget is so much easier

[21:07] <El_Che> (except for REST)

[21:09] <Zoffix> I don't think it's due to redirect 'cause we used to use those before, but that we slurp and serve the file via the app (I was kinda thinking this can let us track what is being downloaded)

[21:09] <Zoffix> the actual tracker ain't implemented tho

[21:10] <Zoffix> and we could go back to redirecting to static files so -J ain't needed

[21:11] <stmuk> El_Che: wget has the same problem it will download "source" too

[21:11] <stmuk> I can't see a wget flag like curl's -J

[21:11] <El_Che> mm

[21:11] <lucasb>        --content-disposition       honor the Content-Disposition header when

[21:11] <lucasb>                                      choosing local file names (EXPERIMENTAL)

[21:11] <lucasb> :)

[21:11] <El_Che> lucasb is on fire

[21:12] <Zoffix> yikes

[21:12] <stmuk> ah yes that works I should have spotted it

[21:13] *** athenot_ left
[21:15] <stmuk> someone on the perl6-users list seemed to report http didn't redirect to https using curl as well but I tend to think they were doing something wrong

[21:15] *** lichtkind joined
[21:16] <lichtkind> please what is the class of type objects becasue there is no "type" class

[21:17] <stmuk> actually it was off-list

[21:18] * stmuk wonders if Content-Disposition can be abused to overwrite arbitary files

[21:20] *** mcmillhj_ left
[21:20] *** Guest43927 left
[21:21] <stmuk> I wonder if clients ensure .bashrc for example can't be overwitten by apparent foo.tar

[21:22] <stmuk> https://www.w3.org/Protocols/rfc2616/rfc2616-sec15.html#sec15.5

[21:26] <FROGGS> lichtkind: type objects are any class itself

[21:27] <lichtkind> you mean they are ojects of class any?

[21:27] <lichtkind> or type object of int is of int

[21:27] <FROGGS> lichtkind: https://docs.perl6.org/language/objects#Type_Objects

[21:27] <FROGGS> the type object of 42 is Int

[21:28] <FROGGS> Int is the undef version of an integer

[21:28] <lichtkind> thank you

[21:28] <FROGGS> Int is the class, which itself is an object whith properties and methods

[21:32] <stmuk> Zoffix: maybe it would be better to return to static files for the time being? 

[21:32] *** rindolf left
[21:32] *** FROGGS left
[21:33] <lichtkind> FROGGS and can i add sprintf flags like my ouw %c ?

[21:40] *** pmurias left
[21:43] *** mcmillhj joined
[21:44] <ingy> I think TEst::Builder is hella broken: https://pastebin.com/Gi769w3D

[21:45] <timotimo> ingy: what does that code do?

[21:46] <timotimo> i mean what does it result in?

[21:46] <ingy> all tests pass

[21:46] <El_Che> stmuk: autch

[21:46] <ingy> which does make for some pretty awesome testing

[21:47] <timotimo> seems like it behaves just like Test's is

[21:47] <timotimo> by comparing stringifications

[21:47] <timotimo> which is why we try to discourage it everywhere we go

[21:47] <timotimo> and instead ask people to use is-deeply

[21:48] <ingy> what is the stringification for $tap.is("123", "42", 'Test 2'); ?

[21:48] <timotimo> oh wait

[21:48] <timotimo> sorry, my head is sleepy

[21:48] <ingy> np

[21:48] *** mcmillhj left
[21:48] <timotimo> wow

[21:48] <ingy> I'll try Test

[21:48] <timotimo>         my Bool $test = ?$got eq ?$expected;

[21:49] <timotimo> that's from 7 years ago it seems like

[21:49] <ingy> well all the tests pass, so...

[21:49] <ingy> :)

[21:50] <ingy> should I file an issue?

[21:51] <ingy> Test seems to work

[21:51] <timotimo> i suppose; i wonder why Test::Builder seems like the right thing to use for you

[21:51] <timotimo> are you actually writing a library that is for testing?

[21:52] <ingy> yes

[21:52] <timotimo> well, that explains that, then

[21:52] <ingy> I just successfully ported it from p5 to p6 with little effort in the past hours

[21:53] <timotimo> cool

[21:53] <ingy> perl6++

[21:53] <timotimo> is this TestML?

[21:53] <ingy> the new TestML yes

[21:53] <timotimo> mhm

[21:53] <ingy> it's pretty amazing :)

[21:53] <ingy> or will be

[21:53] <timotimo> i remember trying to work on the yaml module that uses testml, but testml wasn't able to parse the test format for its own tests or for yaml i think

[21:54] <timotimo> so i tried to fix that, but foud out it implemented something that isn't actually testml compatible and i just tableflipped and went away

[21:54] <ingy> yeah, the old stuff got left in a bad state

[21:54] <ingy> well all you had to do is wait for 7 years

[21:54] <timotimo> i did that! it worked!!

[21:54] <ingy> you++!!!

[21:54] <ingy> perl6 has always been about waiting :)

[22:00] <b2gills> ingy: Is this more what you were looking for? `use ::(BEGIN %*ENV<P6MOD>)`

[22:00] <ingy> confirmed, TestML p5 -> p6 totally works

[22:01] <ingy> b2gills: not really, but that's cool!

[22:01] <ingy> I'll push the code now, if anyone wants to see

[22:02] *** mcmillhj joined
[22:06] *** mcmillhj left
[22:09] *** dataangel left
[22:11] *** dataangel joined
[22:15] *** itaipu left
[22:19] *** mcmillhj joined
[22:24] *** mcmillhj left
[22:32] *** Herby_ joined
[22:32] *** robertle_ left
[22:33] <Herby_> o/

[22:35] <timotimo> o/

[22:35] <Herby_> timotimo: how goes it?

[22:35] *** Guest629 joined
[22:35] <timotimo> Herby_: i just got reminded of the weekly "what's everyone working on" thread idea

[22:35] <timotimo> yesterday

[22:35] <timotimo> the other r/perl6 mods had not answered my mod mail about it

[22:36] <Herby_> ahh. I was wondering where that was sitting

[22:36] <Herby_> were they onboard?

[22:36] *** mcmillhj joined
[22:38] *** Guest629 left
[22:41] *** mcmillhj left
[22:41] <timotimo> i don't think they even red it

[22:41] <Herby_> ah

[22:42] <lucasb> modules.perl6.org aggregates modules from both CPAN and github, right?

[22:42] <timotimo> lucasb: that is correct

[22:42] <lucasb> I noticed some modules show up duplicates on search results. maybe thats the reason?

[22:42] <timotimo> Herby_: i see now that raiph answered 5 hours ago

[22:42] <Herby_> I might make a thread for it. if its useful then maybe it can be a weekly thing

[22:42] <timotimo> they're on board, and they had seen it already

[22:42] <timotimo> we might want to consider running a bot

[22:42] <timotimo> because i personally tend to forget such things

[22:43] <timotimo> maybe we'll want to coordinate it against the weekly, i.e. mondays

[22:43] <timotimo> either start the thread on the same day so the weekly can show off last week's stuff

[22:43] <Herby_> great!

[22:43] <timotimo> or start it 3-4 days off so people can be reminded to join in right in the middle

[22:44] <timotimo> m: say pi.base(7)

[22:44] <camelia> rakudo-moar c69179cc0: OUTPUT: «3.066365143␤»

[22:44] <timotimo> m: say pi.base(7).comb().map(<mon tue wed thu fri sat sun>[$_])

[22:44] <camelia> rakudo-moar c69179cc0: OUTPUT: «Use of Nil in string context␤  in block <unit> at <tmp> line 1␤Unable to call postcircumfix [ (Any) ] with a type object␤Indexing requires a defined object␤  in block <unit> at <tmp> line 1␤␤»

[22:44] <timotimo> m: say pi.base(7).comb().map(<mon tue wed thu fri sat sun>[$_ // 0])

[22:44] <camelia> rakudo-moar c69179cc0: OUTPUT: «Cannot resolve caller map(Seq: Str); none of these signatures match:␤    ($: Hash \h, *%_)␤    (\SELF: &block;; :$label, :$item, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[22:44] <timotimo> m: say pi.base(7).comb().map({<mon tue wed thu fri sat sun>[$_ // 0])

[22:44] <camelia> rakudo-moar c69179cc0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3({<mon tue wed thu fri sat sun>[$_ // 0]7⏏5)␤    expecting any of:␤        statement end␤        statement modifier␤        statement modifier loop␤»

[22:44] <timotimo> m: say pi.base(7).comb().map({<mon tue wed thu fri sat sun>[$_ // 0]})

[22:44] <camelia> rakudo-moar c69179cc0: OUTPUT: «Cannot convert string to number: radix point must be followed by one or more valid digits in '3.⏏' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[22:44] *** espadrine left
[22:45] <timotimo> m: say pi.base(7).comb().map({<mon tue wed thu fri sat sun>[try $_ // 0]})

[22:45] <camelia> rakudo-moar c69179cc0: OUTPUT: «Cannot convert string to number: radix point must be followed by one or more valid digits in '3.⏏' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[22:45] <timotimo> m: say pi.base(7).comb().skip(2).map({<mon tue wed thu fri sat sun>[$_]})

[22:45] <camelia> rakudo-moar c69179cc0: OUTPUT: «(mon sun sun thu sun sat tue fri thu)␤»

[22:45] <timotimo> people will appreciate bringing pi into our schedule

[22:51] <Juerd> tau! ;)

[22:52] <lucasb> example of duplicated entries: https://modules.perl6.org/search/?q=ddt

[22:57] <ingy> timotimo, et al: https://github.com/testml-lang/testml/tree/master#testml

[22:58] <ingy> I made the readme be kinda p6-leaning :)

[22:58] *** giraffe joined
[22:59] *** giraffe is now known as Guest34373

[22:59] <ingy> https://github.com/testml-lang/testml/blob/master/lib/perl/TestML/Run.pm and https://github.com/testml-lang/testml/blob/master/lib/perl6/TestML/Run.pm are about 150 lines of equivalent p5 and p6 code

[23:00] <ingy> the complete version I wrote for OpenResty was about 800 lines (for p5)

[23:01] <ingy> anyway I'm totally happy that p6 is a no-brainer

[23:01] <ingy> I guess the big-easy is that they are both TAP

[23:02] <ingy> I started porting to JS yesterday, and the hard part will be interfacing with mocha.js

[23:02] <ingy> which doesn't have a Test::Builder mentality

[23:03] <ingy> https://github.com/mochajs/mocha/wiki/Using-mocha-programmatically makes it seem like it does

[23:04] <ingy> but it doesn't let me hook into where I need to

[23:04] <ingy> sigh

[23:04] * ingy is a fairly accomplished monkey-patcher :D

[23:07] *** mcmillhj joined
[23:11] <comborico1611> I'm wondering why these two routines produce different boolean: https://hastebin.com/ulalobikiq.pl

[23:12] *** mcmillhj left
[23:13] <lucasb> "any-lowercase8" is actually "all-lowercase"

[23:13] <comborico1611> Yes, but how?

[23:14] <lucasb> "for each char, if it isn't lowercase, then return False"  <-- this checks if all chars are lowercase, right?

[23:14] *** wamba left
[23:14] <comborico1611> Right. 

[23:14] <comborico1611> Hmm.  Something is going over my head.

[23:14] <comborico1611> Sorry about not including other routine...

[23:15] <lucasb> I assumed "is-it-lowercase" does what its name says :)

[23:16] <comborico1611> For all the other any-lowercase series, all that mattered was the last letter being lowercase.  If lowercase came first, then it would still fail.

[23:16] <comborico1611> Let me just paste it all on there, I guess. 

[23:17] *** HaraldJoerg left
[23:18] <comborico1611> But this last routine (8) is different somehow. It verifies each letter, but I don't see a difference between it (8) and 7.

[23:18] <tobs> A more imperative way to explain it is: any-lowercase7 returns at $char eq 'c' and any-lowercase8 at $char eq 'A'

[23:18] <comborico1611> Hmm.

[23:19] <comborico1611> Yes, somewhere there is my puzzlement.

[23:19] <tobs> run the program on comboricoVM

[23:19] <tobs> with pen and paper

[23:19] <comborico1611> Heh.

[23:20] <comborico1611> Okay.  I'm not sure I know a... forgot the term... for the squares diamonds, dots lines..

[23:21] <ingy> timotimo: https://github.com/perl6-community-modules/p6-test-builder/issues/7

[23:22] <ingy> timotimo: maybe you can weigh in on that, since you seem to have figured it out...

[23:25] <comborico1611> I see where I was confused.  If returning true fails, another cycle is performed.  Whereas, returning false stops teh cycle.  If you catch my drift.

[23:29] <lucasb> Zoffix: Would you be willing to add the "--delete" option to https://github.com/perl6/modules.perl6.org/blob/master/lib/ModulesPerl6/DbBuilder.pm#L138 , so that rsync deletes extraneous files that are not in CPAN anymore ?

[23:29] <lucasb> build log warns about "Could not figure out name and version for dist: id/U/UG/UGEXE/Perl6/v0.1.30.meta

[23:30] <lucasb> the file is there in backpan, but was removed in currentpan

[23:34] *** vcv_ left
[23:37] *** mcmillhj joined
[23:41] *** mcmillhj left
[23:50] *** Kaiepi left
[23:50] *** Kaiepi joined
[23:52] *** lucasb left
[23:55] *** mcmillhj joined
[23:59] *** mcmillhj left
