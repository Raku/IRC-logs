[00:00] <vrurg> .^compose works, sorry! The error was coming from another location. Thank timotimo!

[00:00] <timotimo> oh, cool!

[00:01] <vrurg> Though there is another thing which is confusing me alot. When a trait is applied in a role then Attribute.package returns an object with GenericHOW metaclass. That doesn't seem correct to me.

[00:04] *** fake_space_whale joined
[00:07] *** mcmillhj joined
[00:12] *** mcmillhj left
[00:23] *** mcmillhj joined
[00:27] *** mcmillhj left
[00:28] *** [particle]1 joined
[00:30] *** [particle] left
[00:45] *** [particle]1 left
[00:52] *** kalkin-- joined
[00:56] *** kalkin- left
[00:58] *** mcmillhj joined
[01:00] *** Ven`` left
[01:00] *** Phraeyll joined
[01:03] *** mcmillhj left
[01:03] *** TreyHarris left
[01:04] *** [particle] joined
[01:11] *** [particle] left
[01:13] *** Xliff joined
[01:13] <Xliff> m: ((1, 2, 3) ~~ (2, 3).any).say

[01:13] <camelia> rakudo-moar 84d45f07f: OUTPUT: «True␤»

[01:13] <Xliff> m: ((1, 2, 3) ~~ (2, 3).none).say

[01:13] <camelia> rakudo-moar 84d45f07f: OUTPUT: «False␤»

[01:13] *** Ven`` joined
[01:13] <Xliff> m: ((1, 4, 5) ~~ (2, 3).none).say

[01:13] <camelia> rakudo-moar 84d45f07f: OUTPUT: «False␤»

[01:13] <Xliff> m: ((1, 4, 5).any ~~ (2, 3).none).say

[01:13] <camelia> rakudo-moar 84d45f07f: OUTPUT: «True␤»

[01:14] <tyil> tbrowder_: I dont mind waiting for both to land at the same time, unless you can get part of it in the next rakudo star release

[01:15] <tbrowder_> tyil: i will probably do just the first type first, but we’ll see

[01:16] *** TreyHarris joined
[01:17] <tyil> I'm already glad you're looking into it :>

[01:18] <tyil> it doesn't seem to be an issue affecting many people, so there's no hurry with it I guess

[01:26] *** Xliff left
[01:27] *** mcmillhj joined
[01:32] *** mcmillhj left
[01:36] <tobs> m: say 2 ~~ 2&3; say 3 ~~ 2&3; say 2|3 ~~ 2&3; say 2&3 ~~ 2|3;

[01:36] <camelia> rakudo-moar 84d45f07f: OUTPUT: «False␤False␤True␤False␤»

[01:37] <tobs> the last two are surprising to me. I'd think nothing would smartmatch 2&3

[01:45] <tobs> it seems to be coming from

[01:45] <tobs> m: say 2|3 ~~ 2

[01:45] <camelia> rakudo-moar 84d45f07f: OUTPUT: «True␤»

[01:45] <tobs> which does make sense

[01:47] <tobs> m: say 2|3 ~~ 2 and 2|3 ~~ 3

[01:47] <camelia> rakudo-moar 84d45f07f: OUTPUT: «True␤»

[01:50] <benjikun> 2&3 creates all(2, 3)

[01:50] <benjikun> m: say 2&3

[01:50] <camelia> rakudo-moar 84d45f07f: OUTPUT: «all(2, 3)␤»

[01:52] <benjikun> You've just got to avoid thinking about it in the same way as using &&

[01:53] *** Ven`` left
[01:54] *** Ven`` joined
[01:56] <lookatme> m: say 2 ~~ 2+&3

[01:56] <camelia> rakudo-moar 84d45f07f: OUTPUT: «True␤»

[01:56] <lookatme> m: say 3 ~~ 2+&3

[01:56] <camelia> rakudo-moar 84d45f07f: OUTPUT: «False␤»

[01:56] <lookatme> m: say 4 ~~ 2+&4

[01:56] <tobs> :)

[01:56] <camelia> rakudo-moar 84d45f07f: OUTPUT: «False␤»

[01:57] <lookatme> for fun

[01:59] *** mcmillhj joined
[02:02] *** Ven`` left
[02:03] <tobs> benjikun: but an all junction should be equivalent to a chain of logical ands. My problem was that I read "2|3 ~~ 2&3" not as "2|3 ~~ 2 and 2|3 ~~ 3" but as "2 ~~ 2&3 or 3 ~~ 2&3". But of course, smartmatch ACCEPTS on the RHS.

[02:03] *** mcmillhj left
[02:05] <lookatme> m: say (2|3 ~~ 2)

[02:05] <camelia> rakudo-moar 84d45f07f: OUTPUT: «True␤»

[02:06] <lookatme> m: say (2|3) ~~ (2&3)

[02:06] <camelia> rakudo-moar 84d45f07f: OUTPUT: «True␤»

[02:06] <lookatme> m: say (2&3) ~~ (2|3)

[02:06] <camelia> rakudo-moar 84d45f07f: OUTPUT: «False␤»

[02:23] *** mcmillhj joined
[02:28] *** mcmillhj left
[02:36] *** [particle] joined
[02:40] *** mcmillhj joined
[02:43] *** [particle] left
[02:45] *** mcmillhj left
[03:08] *** robertle left
[03:10] *** robertle joined
[03:11] *** vrurg left
[03:12] *** mcmillhj joined
[03:16] *** mcmillhj left
[03:19] *** rouking joined
[03:20] *** rouking left
[03:25] *** Khisanth left
[03:26] *** mcmillhj joined
[03:31] *** mcmillhj left
[03:36] *** wamba joined
[03:38] *** Khisanth joined
[03:42] *** Phraeyll left
[03:45] *** molaf joined
[03:55] *** molaf left
[04:01] *** mcmillhj joined
[04:06] *** mcmillhj left
[04:08] *** w_richard_w joined
[04:10] *** rindolf joined
[04:12] *** mcmillhj joined
[04:15] <buggable> New CPAN upload: KHPH-0.0.2.tar.gz by MLDEVINE http://modules.perl6.org/dist/KHPH:cpan:MLDEVINE

[04:15] <buggable> New CPAN upload: KHPH-0.0.1.tar.gz by MLDEVINE http://modules.perl6.org/dist/KHPH:cpan:MLDEVINE

[04:17] *** mcmillhj left
[04:24] *** spycrab0 left
[04:25] <buggable> New CPAN upload: KHPH-0.0.3.tar.gz by MLDEVINE http://modules.perl6.org/dist/KHPH:cpan:MLDEVINE

[04:43] *** mcmillhj joined
[04:48] *** mcmillhj left
[05:15] *** troys left
[05:15] *** fake_space_whale left
[05:22] *** mcmillhj joined
[05:26] *** lizmat left
[05:26] *** robertle_ left
[05:27] *** mcmillhj left
[05:29] *** kerframil left
[05:34] *** mcmillhj joined
[05:36] *** fake_space_whale joined
[05:39] *** mcmillhj left
[05:44] *** jmerelo joined
[05:46] *** Actualeyes joined
[05:50] *** [particle] joined
[05:52] *** fake_space_whale left
[05:52] <jmerelo> squashable6: status

[05:52] <squashable6> jmerelo, ⚠🍕 Next SQUASHathon in 4 days and ≈4 hours (2018-08-04 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[05:54] *** rindolf left
[05:55] <lookatme> m: constant C = BEGIN do { 42 };

[05:55] <camelia> rakudo-moar 84d45f07f: OUTPUT: «===SORRY!===␤QAST::Block with cuid 4 has not appeared␤»

[05:55] <lookatme> what happened with above code ?

[05:56] <jmerelo> lookatme: as in, it worked before?

[05:57] <lookatme> IDK

[05:57] <benjikun> m: constant C = BEGIN { 42 };

[05:57] <camelia> rakudo-moar 84d45f07f: ( no output )

[05:57] <lookatme> m: constant C = BEGIN { 42 }; say C;

[05:57] <camelia> rakudo-moar 84d45f07f: OUTPUT: «42␤»

[05:59] <lookatme> great

[05:59] <benjikun> :)

[06:07] *** mcmillhj joined
[06:10] *** rindolf joined
[06:11] *** mcmillhj left
[06:23] *** giraffe left
[06:29] *** spycrab0 joined
[06:31] *** vrurg joined
[06:32] <masak> m: BEGIN { foo() }; sub foo() { say "OH HAI" }

[06:32] <camelia> rakudo-moar 84d45f07f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    foo used at line 1␤␤»

[06:37] *** giraffe joined
[06:38] *** Woodi left
[06:45] *** vrurg left
[06:47] *** domidumont joined
[06:50] *** mcmillhj joined
[06:52] *** abraxxa joined
[06:53] *** domidumont left
[06:54] *** domidumont joined
[06:54] *** w_richard_w left
[06:55] *** mcmillhj left
[07:13] <Geth> ¦ doc: aede24b1e5 | (JJ Merelo)++ | doc/Language/functions.pod6

[07:13] <Geth> ¦ doc: Changes anchors and de-capitalizes headers #2223 #1303

[07:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/aede24b1e5

[07:13] <Geth> ¦ doc: 7390cfe886 | (JJ Merelo)++ | doc/Language/operators.pod6

[07:13] <Geth> ¦ doc: Clarifies mixins examples

[07:13] <synopsebot> Link: https://doc.perl6.org/language/functions

[07:13] <synopsebot> Link: https://doc.perl6.org/language/operators

[07:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7390cfe886

[07:13] <Geth> ¦ doc: cff167a121 | (JJ Merelo)++ | doc/Type/Sub.pod6

[07:13] <synopsebot> Link: https://doc.perl6.org/type/Sub

[07:13] <Geth> ¦ doc: Adding an example that clarifies how subs are accessed

[07:13] <Geth> ¦ doc: 

[07:13] <Geth> ¦ doc: ... from outer scopes. This closes #2220

[07:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/cff167a121

[07:18] *** andrzejku joined
[07:20] *** mcmillhj joined
[07:24] *** zakharyas joined
[07:25] *** mcmillhj left
[07:26] <Geth> ¦ doc: JJ self-unassigned Proc::Async Example needs to be modified to run on Windows 10 https://github.com/perl6/doc/issues/1453

[07:33] *** mcmillhj joined
[07:34] *** psychoslave joined
[07:37] *** mcmillhj left
[07:43] <xinming> should multi submethod work as expected?

[07:44] <xinming> Also, when   submethod BUILD { ... }         and we use augment class blabla { submethod BUILD { }  };     <--- This doesn't seems to work, It says there is already a submethod named build. do we mean multi-method

[07:45] <masak> m: class C { multi submethod BUILD(:$x!) { say "x" }; multi submethod BUILD(:$y!) { say "y" } }; C.new(:x); C.new(:y)

[07:45] <camelia> rakudo-moar 84d45f07f: OUTPUT: «x␤y␤»

[07:45] <masak> xinming: worksforme

[07:46] <masak> can't speak to `augment`, basically I stay away from it ;)

[07:47] <xinming> m: class C { submethod BUILD (Str :$str) { ... }  }; augment class C { submethod BUILD (Str :$str, Bool $bool) { } }

[07:47] <camelia> rakudo-moar 84d45f07f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤augment not allowed without 'use MONKEY-TYPING'␤at <tmp>:1␤------> 3 (Str :$str) { ... }  }; augment class C7⏏5 { submethod BUILD (Str :$str, Bool $boo␤    expecting any of:␤        generi…»

[07:47] <xinming> m: use MONKEY-TYPING; class C { submethod BUILD (Str :$str) { ... }  }; augment class C { submethod BUILD (Str :$str, Bool $bool) { } }

[07:47] <camelia> rakudo-moar 84d45f07f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot put required parameter $bool after variadic parameters␤at <tmp>:1␤------> 3{ submethod BUILD (Str :$str, Bool $bool7⏏5) { } }␤    expecting any of:␤        constraint␤»

[07:47] <xinming> m: use MONKEY-TYPING; class C { submethod BUILD (Str :$str) { ... }  }; augment class C { submethod BUILD (Str :$str, Bool :$bool) { } }

[07:47] <camelia> rakudo-moar 84d45f07f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Package 'C' already has a submethod 'BUILD' (did you mean to declare a multi-method?)␤at <tmp>:1␤»

[07:47] <xinming> Here, this is the error I mean.

[07:47] <masak> yes, because without any `multi`, you're basically causing a collision

[07:47] <xinming> since in base class, It already has submethod defined

[07:47] <masak> it's `augment`, not `supersede`

[07:48] <xinming> In this way, How do we fix it? something like override the original method

[07:48] <xinming> I'I'll try bbl

[07:48] <masak> not sure there's a simple answer. depends what you want.

[07:48] <xinming> m: use MONKEY-TYPING; class C { submethod BUILD (Str :$str) { ... }  }; augment class C { supercede submethod BUILD (Str :$str, Bool :$bool) { } }

[07:48] <camelia> rakudo-moar 84d45f07f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Package 'C' already has a submethod 'BUILD' (did you mean to declare a multi-method?)␤at <tmp>:1␤»

[07:48] <masak> given you're using `augment`, your goals are already suspect :P

[07:48] <xinming> m: use MONKEY-TYPING; class C { submethod BUILD (Str :$str) { ... }  }; augment class C { supersede submethod BUILD (Str :$str, Bool :$bool) { } }

[07:48] <camelia> rakudo-moar 84d45f07f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤"supersede" not yet implemented. Sorry.␤at <tmp>:1␤------> 3thod BUILD (Str :$str, Bool :$bool) { } 7⏏5}␤»

[07:49] <xinming> :-)

[07:49] <xinming> some upstream package doesn't work well in my case.

[07:50] <xinming> I'll have to write another one myself then.\

[07:55] <masak> yeah, maybe wrap/facade

[08:01] <xinming> How do we get the slot of the private variable by a string?

[08:01] <xinming> something like,  my $private-attr = 'user';    How can we access the  $!user ?

[08:02] *** mcmillhj joined
[08:03] *** scimon joined
[08:06] *** molaf joined
[08:06] *** mcmillhj left
[08:06] <jmerelo> xinming: you mean, without using EVAL?

[08:09] <masak> m: class C { has $!user = "OH HAI"; method foo { my $var = q[user]; say C.^attributes.grep(*.name eq q[$!] ~ $var)[0].get_value(self) } }; C.new.foo

[08:09] <camelia> rakudo-moar 84d45f07f: OUTPUT: «OH HAI␤»

[08:09] <masak> xinming: ^

[08:10] <masak> could be .first helps get rid of that [0]

[08:10] <masak> also probably needs more error handling

[08:10] <jmerelo> m: class Classy{ has $.class; method ically() { my $var = "class"; return $.::{$var}}; my $c = Classy.new( class => 'of its own' ); say $c.ically

[08:10] <camelia> rakudo-moar 84d45f07f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of $. variable; in Perl 6 please use the .kv method on e.g. .lines␤at <tmp>:1␤------> 3 ically() { my $var = "class"; return $.7⏏5::{$var}}; my $c = Classy.new( class => ␤»

[08:11] <jmerelo> m: class Classy{ has $.class; method ically() { my $var = "class"; return .^lookup($var) }; my $c = Classy.new( class => 'of its own' ); say $c.ically

[08:11] <camelia> rakudo-moar 84d45f07f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3( class => 'of its own' ); say $c.ically7⏏5<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        stat…»

[08:12] <jmerelo> m: class Classy{ has $.klass; method ically() { my $var = "klass"; return .^lookup($var) }; my $c = Classy.new( klass => 'of its own' ); say $c.ically

[08:12] <camelia> rakudo-moar 84d45f07f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3( klass => 'of its own' ); say $c.ically7⏏5<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        stat…»

[08:12] <jmerelo> m: class Classy{ has $.klass; method ically() { my $var = "klass"; return .^lookup($var) } }; my $c = Classy.new( klass => 'of its own' ); say $c.ically

[08:12] <camelia> rakudo-moar 84d45f07f: OUTPUT: «(Mu)␤»

[08:13] <jmerelo> m: class Classy{ has $.klass; method ically() { my $var = "klass"; say .^lookup($var).perl } }; my $c = Classy.new( klass => 'of its own' ); say $c.ically

[08:13] <camelia> rakudo-moar 84d45f07f: OUTPUT: «Mu␤True␤»

[08:13] <jmerelo> m: class Classy{ has $.klass; method ically() { my $var = "klass"; say self.^lookup($var).perl } }; my $c = Classy.new( klass => 'of its own' ); say $c.ically

[08:13] <camelia> rakudo-moar 84d45f07f: OUTPUT: «method klass (Classy:D: *%_) { #`(Method|68448256) ... }␤True␤»

[08:13] *** raynold left
[08:13] <jmerelo> m: class Classy{ has $.klass; method ically() { my $var = "klass"; say CLASS.^lookup($var).perl } }; my $c = Classy.new( klass => 'of its own' ); say $c.ically

[08:13] <camelia> rakudo-moar 84d45f07f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    CLASS used at line 1. Did you mean 'Classy'?␤␤»

[08:13] <jmerelo> m: class Classy{ has $.klass; method ically() { my $var = "klass"; say ::.^lookup($var).perl } }; my $c = Classy.new( klass => 'of its own' ); say $c.ically

[08:13] <camelia> rakudo-moar 84d45f07f: OUTPUT: «Mu␤True␤»

[08:14] <jmerelo> m: class Classy{ has $.klass; method ically() { my $var = "klass"; say $?CLASS.^lookup($var).perl } }; my $c = Classy.new( klass => 'of its own' ); say $c.ically

[08:14] <camelia> rakudo-moar 84d45f07f: OUTPUT: «method klass (Classy:D: *%_) { #`(Method|77331296) ... }␤True␤»

[08:14] <jmerelo> m: class Classy{ has $.klass; method ically() { my $var = "klass"; return $?CLASS.^lookup($var) } }; my $c = Classy.new( klass => 'of its own' ); say $c.ically

[08:14] <camelia> rakudo-moar 84d45f07f: OUTPUT: «klass␤»

[08:15] <jmerelo> m: class Classy{ has $.klass; method ically() { my $var = "klass"; return $?CLASS.^lookup($var) } }; my $c = Classy.new( klass => 'of its own' ); say $c.ically()

[08:15] <camelia> rakudo-moar 84d45f07f: OUTPUT: «klass␤»

[08:15] <buggable> New CPAN upload: Proc-InvokeEditor-0.0.4.tar.gz by SCIMON http://modules.perl6.org/dist/Proc::InvokeEditor:cpan:SCIMON

[08:15] <jmerelo> benjikun: ^lookup returns the name of attributes or methods. I can't seem to get it right, though...

[08:16] <jmerelo> m: class Classy{ has $.klass; method ically() { my $var = "klass"; return self.^lookup($var) } }; my $c = Classy.new( klass => 'of its own' ); say $c.ically()

[08:16] <camelia> rakudo-moar 84d45f07f: OUTPUT: «klass␤»

[08:17] <jmerelo> m: class Classy{ has $.klass; my $c = Classy.new( klass => 'of its own' ); say $c.^lookup('klass')

[08:17] <camelia> rakudo-moar 84d45f07f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3 'of its own' ); say $c.^lookup('klass')7⏏5<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        stat…»

[08:17] <jmerelo> m: class Classy{ has $.klass }; my $c = Classy.new( klass => 'of its own' ); say $c.^lookup('klass')

[08:17] <camelia> rakudo-moar 84d45f07f: OUTPUT: «klass␤»

[08:17] <jmerelo> m: class Classy{ has $.klass }; my $c = Classy.new( klass => 'of its own' ); say $c.^lookup('klass').^name

[08:17] <camelia> rakudo-moar 84d45f07f: OUTPUT: «Method␤»

[08:18] <jmerelo> m: class Classy{ has $.klass }; my $c = Classy.new( klass => 'of its own' ); say $c.{$c.^lookup('klass')}

[08:18] <camelia> rakudo-moar 84d45f07f: OUTPUT: «Type Classy does not support associative indexing.␤  in block <unit> at <tmp> line 1␤␤»

[08:18] <jmerelo> m: class Classy{ has $.klass }; my $c = Classy.new( klass => 'of its own' ); say $c."$c.^lookup('klass')"

[08:18] <camelia> rakudo-moar 84d45f07f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Quoted method name requires parenthesized arguments. If you meant to concatenate two strings, use '~'.␤at <tmp>:1␤------> 3its own' ); say $c."$c.^lookup('klass')"7⏏5<EOL>␤»

[08:18] <jmerelo> m: class Classy{ has $.klass }; my $c = Classy.new( klass => 'of its own' ); say $c."{$c.^lookup('klass')}"

[08:18] <camelia> rakudo-moar 84d45f07f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Quoted method name requires parenthesized arguments. If you meant to concatenate two strings, use '~'.␤at <tmp>:1␤------> 3s own' ); say $c."{$c.^lookup('klass')}"7⏏5<EOL>␤»

[08:18] <scimon> So I got Perl6 running on Windows. It's.... a bit horrible. 

[08:19] <jmerelo> m: class Classy{ has $.klass }; my $c = Classy.new( klass => 'of its own' ); say $c."klass"

[08:19] <camelia> rakudo-moar 84d45f07f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Quoted method name requires parenthesized arguments. If you meant to concatenate two strings, use '~'.␤at <tmp>:1␤------> 3 klass => 'of its own' ); say $c."klass"7⏏5<EOL>␤»

[08:19] <jmerelo> m: class Classy{ has $.klass }; my $c = Classy.new( klass => 'of its own' ); say $c."klass"()

[08:19] <camelia> rakudo-moar 84d45f07f: OUTPUT: «of its own␤»

[08:19] *** sena_kun joined
[08:20] <jmerelo> scimon: is it Windows 10? Can you help with this? https://github.com/perl6/doc/issues/1453

[08:20] <jmerelo> scimon: why is it horrible?

[08:22] <scimon> I am just not used to working in Windows really.

[08:22] <scimon> Too many years developing in Linux.

[08:24] <scimon> So for the tests of Proc::InvokeEditor I used .bat files. I need to check it works properly with .exe's plan is to add some example scripts. 

[08:24] <scimon> (And Cygwin needs done). 

[08:24] <jmerelo> scimon: you can have AppVeyor to do it for you.

[08:24] <jmerelo> scimon: also: https://github.com/perl6/doc/issues/1453 Pleeeeeease

[08:25] <scimon> Assign is to me. I'll take a look when I'm at home (and have a windows box :) )

[08:26] <jmerelo> scimon: done through a comment. Thanks!

[08:26] <scimon> S'cool :)

[08:36] *** dakkar joined
[08:44] *** spycrab0 left
[08:44] * jmerelo reminds we have a Perl 6 documentation BoF at TPC in Glasgow http://act.perlconference.org/tpc-2018-glasgow/wiki?node=Perl6%20documentation%20BoF

[08:45] <xinming> Is it possible to access the private attribute in parent slot?

[08:45] <jmerelo> xinming: no. That's why it's called private.

[08:47] <jmerelo> xinming: although you can use "trusts" https://docs.perl6.org/language/classtut#index-entry-%21_%28private_methods%29

[08:51] <Geth> ¦ doc: 990083c782 | (JJ Merelo)++ | doc/Language/classtut.pod6

[08:51] <Geth> ¦ doc: Changes anchors, decapitalizes headers, and reflows

[08:51] <Geth> ¦ doc: 

[08:51] <Geth> ¦ doc: Refs #2223 #1303

[08:51] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/990083c782

[08:51] <synopsebot> Link: https://doc.perl6.org/language/classtut

[08:55] *** lizmat joined
[09:05] <buggable> New CPAN upload: Propius-0.1.1.tar.gz by ATROXAPER http://modules.perl6.org/dist/Propius:cpan:ATROXAPER

[09:08] *** hami joined
[09:11] *** xinming_ joined
[09:11] *** vrurg joined
[09:13] *** xinming left
[09:21] *** vrurg left
[09:22] *** jeromelanteri joined
[09:36] *** spycrab0 joined
[09:38] *** stmuk_ joined
[09:40] <sena_kun> m: say Int.HOW

[09:40] <camelia> rakudo-moar 1f27a19b4: OUTPUT: «Perl6::Metamodel::ClassHOW.new␤»

[09:40] <sena_kun> m: say Array.HOW

[09:40] <camelia> rakudo-moar 1f27a19b4: OUTPUT: «No such method 'gist' for invocant of type 'Perl6::Metamodel::ClassHOW+{<anon>}'. Did you mean 'isa'?␤  in block <unit> at <tmp> line 1␤␤»

[09:40] <sena_kun> both are declared in BOOTSTRAP, is it a bug?

[09:40] *** stmuk left
[09:44] <lizmat> well, you could argue that "say Int.HOW" works is a feature

[09:44] <lizmat> there was a time when that didn't either

[09:44] <lizmat> it definitely is LTA, so maybe make an issue for it

[09:46] *** wamba left
[09:46] <sena_kun> lizmat, if Int working is arguable, is there something else I can use to distinguish between class/role/package/module for CORE symbols?

[09:47] <lizmat> m: say Array.^name

[09:47] <camelia> rakudo-moar 1f27a19b4: OUTPUT: «Array␤»

[09:47] <lizmat> m: say Array.HOW.^name

[09:47] <camelia> rakudo-moar 1f27a19b4: OUTPUT: «Perl6::Metamodel::ClassHOW+{<anon>}␤»

[09:48] <lizmat> m: say Int.HOW.^name

[09:48] <camelia> rakudo-moar 1f27a19b4: OUTPUT: «Perl6::Metamodel::ClassHOW␤»

[09:48] * lizmat wonders what got mixed in for Array, though

[09:48] <lizmat> m: say Hash.HOW.^name

[09:48] <camelia> rakudo-moar 1f27a19b4: OUTPUT: «Perl6::Metamodel::ClassHOW+{<anon>}␤»

[09:48] * lizmat has no time to look into it now, working on the P6W

[09:49] <sena_kun> lizmat, thanks a lot.

[09:49] <El_Che> lizmat: the news of the stars!

[09:51] *** kerframil joined
[09:52] <sena_kun> it works now. \o/

[09:53] *** jeromelanteri left
[09:55] <Geth> ¦ modules.perl6.org: 91cf1bec95 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/PostProcessor/p30METAChecker.pm

[09:55] <Geth> ¦ modules.perl6.org: Revert "Harden meta checker against failed content fetches"

[09:55] <Geth> ¦ modules.perl6.org: 

[09:55] <Geth> ¦ modules.perl6.org: This reverts commit fd967f934e102962f76f29ae04bdfd9952cee4fe.

[09:55] <Geth> ¦ modules.perl6.org: 

[09:55] <Geth> ¦ modules.perl6.org: We have to return problems from the methods, which the commit doesn't

[09:55] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/91cf1bec95

[09:55] <Geth> ¦ modules.perl6.org: 035edc556d | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/PostProcessor/p30METAChecker.pm

[09:55] <Geth> ¦ modules.perl6.org: Hardness meta checker against undefs

[09:55] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/035edc556d

[10:01] *** hami left
[10:12] *** limarfrek joined
[10:12] *** limarfrek left
[10:13] *** vrurg joined
[10:15] *** vrurg left
[10:22] <Geth> ¦ doc: 62e9b9cd44 | (JJ Merelo)++ | doc/Language/contexts.pod6

[10:22] <Geth> ¦ doc: Adds mixin behavior to context page

[10:22] <Geth> ¦ doc: 

[10:22] <Geth> ¦ doc: Thanks to @lizmat and @zoffixznet for the explanations

[10:22] <Geth> ¦ doc: [here](https://github.com/rakudo/rakudo/issues/2149)

[10:22] <synopsebot> Link: https://doc.perl6.org/language/contexts

[10:22] <Geth> ¦ doc: 

[10:22] <Geth> ¦ doc: Context is everything. Always pay attention to context.

[10:22] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/62e9b9cd44

[10:26] <cognominal> Hi, twhat is the Perl 6 equivalent of the unix(2). Is there a ressource to help people who think in term of unix system calls, that includes Perl5-ers,  to map that to the knowledge of the Perl 6 setting? I know way more of the rakudo internals than the setting :(

[10:26] <jmerelo> cognominal: not sure what unix(2) is

[10:27] <jmerelo> cognominal: but there's an extensive set of pages devoted to migrate from perl 5 to perl 6

[10:28] <jmerelo> cognominal: they go first here https://docs.perl6.org/language.html They also include a set of POSIX calls and how they are translated into Perl 6, if that's what you mean.

[10:28] <cognominal> oops I mean dup(2)

[10:28] <jmerelo> cognominal: that's dup-ing file handles?

[10:28] <cognominal> yes

[10:29] <jmerelo> cognominal: if there's something, you might find it under https://docs.perl6.org/type/IO::Handle

[10:29] <jmerelo> cognominal: I seem to remember there was something also in Proc

[10:29] <jmerelo> let me check

[10:29] <jmerelo> Hum. No.

[10:32] <jmerelo> cognominal: I can't find anything, sorry. Maybe ask in StackOverflow? 

[10:33] <jmerelo> cognominal: you can probably use NativeCall to call the native function, but still...

[10:33] <cognominal> In Perl 5, that would be :     open $dupout, '>&', \*STDOUT;

[10:34] <cognominal> I am rusty, is a system call really exposed as a function ?

[10:34] <jmerelo> cognominal: well, IO::Handle has a ":mode" associative, but I'm not really sure that particular mode would work.

[10:35] <jmerelo> cognominal: Yep. That's what NativeCall is all about.

[10:35] <lizmat> cognominal: I've ported many Perl 5 builtin functions to Perl 6

[10:36] <cognominal> hi, lizmat :)

[10:36] <lizmat> cognominal: http://modules.perl6.org/t/PERL5   # perhaps that can be of help ?

[10:36] <lizmat> cognominal o/  :-)

[10:38] *** rindolf left
[10:42] *** rindolf joined
[10:55] *** HaraldJoerg joined
[11:07] *** wamba joined
[11:09] *** araraloren joined
[11:11] *** zakharyas left
[11:39] *** wamba left
[11:47] *** void1 joined
[11:47] *** void1 left
[11:47] *** void1 joined
[11:48] *** void1 left
[11:53] *** |Sno| joined
[11:55] *** [Sno] left
[11:55] <tbrowder_> \o #perl6

[11:56] <tbrowder_> can anyone give me some help on nqp/QAST?

[11:57] <masak> ask away

[11:59] <tbrowder_> i’m trying to find the type of an object in an nqp program and i can’t get any of the nqp types like str, lis to return true

[12:00] <tbrowder_> the object doesn’t have a .ast suffix, but i wonder if it could be one

[12:02] *** yqt joined
[12:02] <lizmat> https://www.reddit.com/r/programming/comments/918b8o/is_python_the_future_of_programming_some/  # too bad that doesn't have any reference to Perl 6

[12:03] <El_Che> python? Sound pretty oldschool to me

[12:04] <stmuk_> http://pl6anet.org/drop/ has source and windows binary for rakudo-star-2018.06-RC0 (Mac binary to follow when ++virtualsue does it)

[12:10] *** someuser joined
[12:13] *** Pheix joined
[12:16] *** Pheix left
[12:17] *** vrurg joined
[12:19] *** vrurg left
[12:22] *** [particle] left
[12:23] *** Woodi joined
[12:25] *** Ven`` joined
[12:25] *** kerframil left
[12:26] *** Ven` joined
[12:30] *** Ven`` left
[12:32] <xinming_> How do sub signatures work with alias?

[12:32] <xinming_> hmm, something like,  multi sub-name (:$user(:$rpcuser)) { ... }

[12:32] <xinming_> I can't remember the syntax for this.

[12:32] <moritz> :user(:$rpcuser)

[12:33] <moritz> user isn't a variable, thus no $

[12:33] <moritz> m: sub f(:a(:$b)) { say $b }; f a => 1; f b => 2; f c => 3;

[12:33] <camelia> rakudo-moar ef61ce32e: OUTPUT: «1␤Unexpected named argument 'c' passed␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤2␤»

[12:33] <xinming_> Ok, got it, thanks

[12:33] *** diakopter joined
[12:34] *** araraloren left
[12:34] <xinming_> so,  user => :$rpcuser  =>  (user => (rpcuser => $rpcuser))

[12:34] <xinming_> and this kind of nested hash can work in signatures.

[12:34] <xinming_> understand now

[12:34] *** araraloren joined
[12:37] *** vrurg joined
[12:38] *** wamba joined
[12:42] *** vrurg left
[12:45] *** jmerelo left
[12:45] <xinming_> jmerelo: so, subclass can't access anything that parents declared as private attributes.

[12:45] <xinming_> Is it ok to override the private methods from parent?

[12:46] <xinming_> class A { method !abc () { "Hello".say; } }; class B is A { method !abc () { "xyz".say; } }; B.new.abc

[12:46] <xinming_> class A { method !abc () { "Hello".say; }; method test () { self!abc } }; class B is A { method !abc () { "xyz".say; } }; B.new.test;

[12:46] <evalable6> xinming_, rakudo-moar ef61ce32e: OUTPUT: «Hello␤»

[12:46] <xinming_> m: class A { method !abc () { "Hello".say; }; method test () { self!abc } }; class B is A { method !abc () { "xyz".say; } }; B.new.test;

[12:46] <camelia> rakudo-moar ef61ce32e: OUTPUT: «Hello␤»

[12:46] <xinming_> Is this designed behavior?

[12:47] *** [particle] joined
[12:49] <moritz> yes

[12:49] <moritz> private methods are not polymorphic

[12:49] <xinming_> Ok, Thanks.

[12:49] <moritz> otherwise they wouldn't be really private

[12:53] <xinming_> WHen I try to make attrs in base class be accessed in subclass, Do I have to declare it as $.attr?

[12:53] <xinming_> Just feel confusing

[12:55] *** [particle] left
[12:56] *** [particle] joined
[12:57] * [Coke] sees several pages of camelia spam trying to catch up

[12:59] *** zakharyas joined
[13:00] *** Ven` left
[13:00] <xinming_> is it possible to call BUILD method from parent in subclass?

[13:00] <moritz> xinming_: what are you tryint to achieve?

[13:00] <moritz> BUILD is automatically called

[13:01] <xinming_> moritz: for example, a rpc client class has $!host $!port $!user $!pass in baseclass.

[13:01] <moritz> m: class P { submethod BUILD() { say "P Build" } }; class C is P { submethod BUILD() { say "C Build" }}; C.new

[13:01] <camelia> rakudo-moar ef61ce32e: OUTPUT: «P Build␤C Build␤»

[13:02] <xinming_> tweak is also called?

[13:02] <moritz> yes

[13:02] <xinming_> Ok, Thanks.

[13:04] *** vrurg joined
[13:06] *** [particle] left
[13:07] *** psychoslave left
[13:07] *** kaare_ joined
[13:07] *** yqt left
[13:08] *** psychoslave joined
[13:10] *** [particle] joined
[13:12] *** psychoslave left
[13:14] <masak> moritz: "private methods are not polymorphic"; I'd use s/polymorphic/virtual/ there -- now thinking whether they're synonyms, or from different OO traditions, or whether one is right and one is wrong ;)

[13:14] <moritz> masak: you are right, "virtual" is less confusing to C++ programmers

[13:15] <masak> "polymorphism: the ability in programming to present the same programming interface for differing underlying forms"

[13:15] <masak> moritz: I'm definitely not a C++ programmer, yet I was confused :)

[13:15] *** kaare_ left
[13:15] <masak> moritz: fwiw, I think `virtual` is also a keyword in C# (but not in Java, where it is the default, and has to be switched off with `final`)

[13:15] <moritz> ... maybe even less confusing to non-C++ programmers

[13:16] <masak> my feeling is that "polymorphic" is a very general thing, maybe even wider than OO. it means "this one thing can have different types"

[13:16] <masak> whereas "virtual" means "if you subclass, you get to supply your own"

[13:17] <masak> as usual though, nothing has just _one_ meaning in OO

[13:17] <masak> (you might even say it's... polymorphic) *rimshot*

[13:21] *** kaare_ joined
[13:21] <masak> m: role C[::T] { has T $!x; method foo { try $!x = 0; try $!x = "OH HAI"; say $!x } }; C[Int].new.foo; C[Str].new.foo

[13:21] <camelia> rakudo-moar ef61ce32e: OUTPUT: «0␤OH HAI␤»

[13:21] <masak> moritz: like, that $!x there could be said to be polymorphic, but not virtual :)

[13:22] * masak .oO( this has been "Today's Bad Perl 6 Code: Don't Try This At Home" )

[13:22] * masak .oO( Don't `try` This At Home )

[13:22] <moritz> .oO( if you do, I'll CATCH you later )

[13:23] <masak> :D

[13:23] <masak> I really like `CATCH` in Perl 6, but `try` is just reckless

[13:23] <[Coke]> wreck-less.

[13:24] <masak> it's like a construct for saying "I'd like to order up an immunity to pain, because I'm about to put my hand on the stove"

[13:24] <masak> how about not putting your hand on the stove instead

[13:27] *** HaraldJoerg1 joined
[13:29] *** HaraldJoerg left
[13:30] <moritz> try has its uses cases; for example I never want my program to crash while trying to create a better error message

[13:31] *** psychoslave joined
[13:33] *** andrzejku left
[13:33] *** raschipi joined
[13:39] <alexghacker> does anyone know if there's a way to ask a perl6 build which version of the UCD (Unicode Character Database, aka Unicode version) it was built with?

[13:39] <masak> moritz: "while trying to create a better error message" -- I'll have to think about that one. interesting.

[13:39] <masak> moritz: on the other hand, I see `try` being used far more often than that.

[13:39] *** skids joined
[13:40] * masak suspects he'll need to blog about this, as he promised himself long ago

[13:40] <moritz> masak: another use case: optional cleanups

[13:40] *** wamba left
[13:41] <masak> moritz: that one I agree less with, offhand.

[13:41] *** wamba joined
[13:41] <masak> my point is that many `try` statements are an implicit "I know the exceptions I will get will be uninteresting/ignorable ones". but of course you can almost never know that.

[13:42] *** HaraldJoerg1 is now known as HaraldJoerg

[13:42] *** [particle] left
[13:42] <sena_kun> masak, isn't it just fallout of other languages experience when people must declare a try block to use catch thing?

[13:44] <alexghacker> at the moment it's not a big deal - I know which version of the UCD was included in my build, but once we get to a point when there are perl6 builds that have been around for a while it may become useful information to have, especially since it's the data that's in the UCD that drives some of the things about how NFG behaves and/or counts things.

[13:44] <moritz> masak: when I write an application for end-users, I *never* want to tell them that closing a socket didn't work during program shutdown. The OS will clean up after me, and the error message would just confuse the user, implying that something went wrong, and they don't have experience to assess *what* went wrong, and if it's harmful or not

[13:44] <sena_kun> in plenty of popular languages e.g. $foo, $bar and the like you cannot write `CATCH { default {.note} }; die 'foo';` the way Perl 6 use.

[13:44] <masak> sena_kun: I think partly, yes. `try` is like the half of Perl 5's `eval` that means "do this, and if an error happens, stuff it in $! instead of throwing"

[13:45] <masak> moritz: I guess I see what you're saying. there's a certain "attempt to do this, but no big deal if it doesn't work" cleanup happening in finally/LEAVE blocks, I guess.

[13:46] *** xinming_ left
[13:46] <moritz> masak: exactly

[13:46] <masak> I think part of the reason I'm vocal about this is that I have misunderstood/over-used `try` in the past.

[13:46] <masak> I'd like to put my self-immolation on display as a warning to others

[13:46] *** xinming joined
[13:46] <moritz> yes, overuse happens

[13:47] <masak> but you have a really valid point about the few valid use cases where it really doesn't matter

[13:47] <masak> I guess that's what we should train users to see: "is the outcome here *irrelevant*? then go ahead and use `try`"

[13:48] <masak> basically, `try` is for those few cases where you don't want to know how it went

[13:49] * masak .oO( "There is no `try`; well, almost never" -- Yoda )

[13:50] * sena_kun .o0 ( do or don't )

[13:51] *** cpage_ joined
[13:52] *** mcmillhj joined
[13:52] <Juerd> Also, consider try'ing the outermost thing that you can sacrifice. For example, when dealing with incoming http requests, try the thing that handles the entire request instead of all the individual things within.

[13:53] <Juerd> If you have lots of "try" sprinkled all around your code, you're probably doing something wrong :)

[13:54] *** cpage left
[13:54] *** cpage_ is now known as cpage

[13:54] <vrurg> Juerd: it's just a question of when 'few' become 'lots'...

[13:54] <Juerd> vrurg: Give yourself try quota of one per day, maybe one per 100 lines of code ;)

[13:55] <Juerd> Depending on what you're building and whether failures are likely to require ignoring

[13:55] <raschipi> Juerd: kinda like turning it into a transaction?

[13:55] <Juerd> raschipi: Yes.

[13:55] <vrurg> Juerd: ok, your quota sounds like "lots" to me... ;)

[13:56] <Juerd> vrurg: I write dense code :D

[13:56] <Juerd> vrurg: 100 lines is a lot!

[13:56] * vrurg doesn't count braces and blank lines as "code" either.

[13:57] <vrurg> ;)

[13:57] <Juerd> https://github.com/Juerd/shalog/blob/master/tracking.p6 if you want to see an example

[13:57] <Juerd> I would have liked the class Stack in a separate file, but that gave weird errors. I should try that again some time, maybe the underlying bugs have been fixed.

[13:59] <vrurg> Juerd: I'm mostly kidding. Though it looks pretty much like what I usually do. 

[14:01] *** [particle] joined
[14:01] <vrurg> I meant that use of try is dependant of use cases very much. In a web application sometimes it's the only one wrapping the whole application to produce a meaningful error page to the user. And a couple more inside to deal with non-fatal exceptions. 

[14:02] <Juerd> Of course

[14:05] *** [particle] left
[14:06] *** fake_space_whale joined
[14:13] *** [particle] joined
[14:15] *** mcmillhj left
[14:15] <alexghacker> m: my $s = qq<"Thin Condensed"(s) "Regular"(s)>; $s ~~ s/ \" $<value>=( <-[\"]>+ ) \" //; say ~$<value>.^name;

[14:15] <camelia> rakudo-moar ef61ce32e: OUTPUT: «Match␤»

[14:16] <alexghacker> m: my $s = qq<"Thin Condensed"(s) "Regular"(s)>; $s ~~ s:g/ \" $<value>=( <-[\"]>+ ) \" //; say ~$<value>.^name;

[14:16] <camelia> rakudo-moar ef61ce32e: OUTPUT: «Failure␤»

[14:16] <alexghacker> m: my $s = qq<"Thin Condensed"(s) "Regular"(s)>; $s ~~ s:g/ \" $<value>=( <-[\"]>+ ) \" //; say ~$<value>;

[14:16] <camelia> rakudo-moar ef61ce32e: OUTPUT: «Type List does not support associative indexing.␤  in block <unit> at <tmp> line 1␤␤»

[14:17] <alexghacker> m: my $s = qq<"Thin Condensed"(s) "Regular"(s)>; $s ~~ s:g/ \" $<value>=( <-[\"]>+ ) \" //; say $s;

[14:17] <camelia> rakudo-moar ef61ce32e: OUTPUT: «(s) (s)␤»

[14:18] <alexghacker> So the global substitution works with the named capture, but I can't get to the captured values

[14:21] <timotimo> m: my $s = qq<"Thin Condensed"(s) "Regular"(s)>; $s ~~ s:g/ \" $<value>=( <-[\"]>+ ) \" //; say $/;

[14:21] <camelia> rakudo-moar ef61ce32e: OUTPUT: «(｢"Thin Condensed"｣␤ value => ｢Thin Condensed｣ ｢"Regular"｣␤ value => ｢Regular｣)␤»

[14:21] <timotimo> you can, they're just in $/ rather than $s

[14:21] <timotimo> oh, i might have misunderstood

[14:22] <alexghacker> it seems to be the ~$<value> syntax that doesn't work

[14:22] <timotimo> the reason why you got Failure that one time is that $/ is a list rather than a single match object

[14:22] <timotimo> since $<foo> is just short for $/<foo>, that's what's going wrong

[14:23] <timotimo> trying to do key-value lookup on an array-ish thing

[14:27] <alexghacker> I see

[14:27] <alexghacker> thanks timotimo++

[14:27] <timotimo> YW

[14:32] *** mcmillhj joined
[14:42] *** diakopter left
[14:44] <MitarashiDango[m> For identifiers, where it mentions numbers in the docs, is that only Decimal Digit?

[14:44] <timotimo> u: digit

[14:44] <unicodable6> timotimo, U+0030 DIGIT ZERO [Nd] (0)

[14:44] <unicodable6> timotimo, U+0031 DIGIT ONE [Nd] (1)

[14:44] <unicodable6> timotimo, 796 characters in total: https://gist.github.com/7eee60a6a695d3ca12c0d95024e08d6e

[14:45] <timotimo> m: my $foo෭ = 1; say $foo෭

[14:45] <camelia> rakudo-moar ef61ce32e: OUTPUT: «1␤»

[14:45] <timotimo> m: my $foo༪ = 5; say $foo༪

[14:45] <camelia> rakudo-moar ef61ce32e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3my $foo7⏏5༪ = 5; say $foo༪␤    expecting any of:␤        constraint␤        infix␤        infix stopper␤        postfix␤        statement end…»

[14:45] <timotimo> that's an No, i.e. "numeric, other"

[14:45] <timotimo> and that doesn't work

[14:46] <timotimo> m: my $foo↊ = 2; say $foo↊

[14:46] <camelia> rakudo-moar ef61ce32e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3my $foo7⏏5↊ = 2; say $foo↊␤    expecting any of:␤        constraint␤        infix␤        infix stopper␤        postfix␤        statement end…»

[14:46] <timotimo> well, that's also just No

[14:46] <timotimo> is there anything N* other than No and Nd?

[14:47] <MitarashiDango[m> Number, letter?

[14:48] <MitarashiDango[m> I don't think that works in an identifier either

[14:48] *** araraloren left
[14:48] <AlexDaniel> these work for identifiers: Ll (Letter, lowercase), Lu (Letter, uppercase), Lt (Letter, titlecase), Lm (Letter, modifier), Lo (Letter, other)

[14:48] <AlexDaniel> not sure about numbers though

[14:48] *** araraloren joined
[14:49] *** jmerelo joined
[14:49] <jmerelo> squashable6: status

[14:49] <squashable6> jmerelo, ⚠🍕 Next SQUASHathon in 3 days and ≈19 hours (2018-08-04 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[14:49] <MitarashiDango[m> m: my $fooⅩ;

[14:49] <camelia> rakudo-moar ef61ce32e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3my $foo7⏏5Ⅹ;␤    expecting any of:␤        constraint␤        infix␤        infix stopper␤        postfix␤        statement end␤        statem…»

[14:50] <jmerelo> m:say "Ⅹ".uniprop

[14:50] <evalable6> jmerelo, rakudo-moar ef61ce32e: OUTPUT: «Nl␤»

[14:51] <jmerelo> m:say "x".uniprop

[14:51] <evalable6> jmerelo, rakudo-moar ef61ce32e: OUTPUT: «Ll␤»

[14:52] *** pmurias joined
[14:52] <jmerelo> MitarashiDango[m: you need them to have the "L" property, I think. But that would have been cool.

[14:52] *** vrurg left
[14:53] *** vrurg joined
[14:53] <pmurias> masak: the don't-give-a-darn-about-any-exceptions form of bare try was super annoying when porting rakudo to the js backend 

[14:54] <pmurias> masak: it is used in two ways: to ignore a specific exception without being bothered to specificed and more rarely to ignore all exceptions

[14:55] <pmurias> s/specified/specify

[14:55] *** vrurg left
[14:55] *** vrurg joined
[14:56] *** ilux joined
[14:56] *** vrurg left
[15:00] *** diakopter joined
[15:06] <Geth> ¦ marketing: 091d788a53 | (Zoffix Znet)++ | 14 files

[15:06] <Geth> ¦ marketing: Add $*ARGFILES 6.d Teaser

[15:06] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/091d788a53

[15:08] *** nwellnhof joined
[15:09] <nwellnhof> p6: say 1 +< -64

[15:09] <camelia> rakudo-moar bb6a6f80b: OUTPUT: «1␤»

[15:09] <nwellnhof> p6: say "$_: ", 1 +< -$_, ' ', 1 +> $_ for 62..66

[15:09] <camelia> rakudo-moar bb6a6f80b: OUTPUT: «62: 0 0␤63: 0 0␤64: 1 0␤65: 0 0␤66: 0 0␤»

[15:10] <nwellnhof> ^^ Looks like a bug

[15:12] <Juerd> Did you know you can interpolate expressions? :)

[15:12] <Juerd> p6: say "$_: { 1 +< -$_ } { 1 +> $_ }" for 62..66

[15:12] <camelia> rakudo-moar bb6a6f80b: OUTPUT: «62: 0 0␤63: 0 0␤64: 1 0␤65: 0 0␤66: 0 0␤»

[15:13] <nwellnhof> Yes, I know.

[15:13] <Juerd> (I don't know anything about how negative bitshifts should work)

[15:13] <[Coke]> which part in particular is the bug?

[15:14] <nwellnhof> Left-shifting by -64 behaves differently than other negative values like -63, -65, etc.

[15:14] <[Coke]> m: say 1 +< -64

[15:14] <camelia> rakudo-moar bb6a6f80b: OUTPUT: «1␤»

[15:16] <diakopter> mod 64?

[15:16] *** ExtraCrispy joined
[15:17] <diakopter> is camelia 32 bit?

[15:17] <timotimo> i'd expect camelia to be 64bit

[15:17] <diakopter> p6: say "$_: { 1 +< -$_ } { 1 +> $_ }" for 30..35

[15:17] <camelia> rakudo-moar bb6a6f80b: OUTPUT: «30: 0 0␤31: 0 0␤32: 0 0␤33: 0 0␤34: 0 0␤35: 0 0␤»

[15:18] *** kerframil joined
[15:19] <diakopter> p6: say "$_: { 1 +< -$_ } { 1 +> $_ }" for 126..130

[15:19] <camelia> rakudo-moar bb6a6f80b: OUTPUT: «126: 0 0␤127: 0 0␤128: 1 0␤129: 0 0␤130: 0 0␤»

[15:19] <nwellnhof> Yes, also happens with multiples of 64. So there might be a mod 64 somewhere.

[15:20] <[Coke]> m: use nqp; say nqp::bitshiftl_I(nqp::decont(1), nqp::unbox_i(64), Int)

[15:20] <camelia> rakudo-moar bb6a6f80b: OUTPUT: «18446744073709551616␤»

[15:20] <[Coke]> m: use nqp; say nqp::bitshiftl_I(nqp::decont(1), nqp::unbox_i(-64), Int)

[15:20] <camelia> rakudo-moar bb6a6f80b: OUTPUT: «1␤»

[15:21] <[Coke]> https://github.com/perl6/nqp/blob/2434978a639ca3faaf47011a4932faeeb30b2bb3/src/vm/js/nqp-runtime/bignum.js#L191

[15:21] <timotimo> isn't shifting by the bit width of the architecture or more undefined behaviour?

[15:22] <timotimo> oh, but that's for Int, not int, right?

[15:25] *** araraloren left
[15:32] *** jmerelo left
[15:33] *** TreyHarris left
[15:36] *** benjikun left
[15:38] *** benjikun joined
[15:40] *** domidumont left
[15:42] *** ilux left
[15:44] *** vrurg joined
[15:45] *** TreyHarris joined
[15:48] <SmokeMachine> I have a slang that some times works and some times doesn't work...

[15:48] <SmokeMachine> with the same data...

[15:48] <diakopter> nondeterministic! lovely

[15:48] <raschipi> SmokeMachine: On purpose?

[15:48] <timotimo> perhaps precomp vs no precomp?

[15:49] <diakopter> (or indeterminately deterministic, that is)

[15:50] <SmokeMachine> timotimo: even after compiled sometimes it works and some times it doesn't...

[15:50] <diakopter> try it in camelia?

[15:50] <[Coke]> code? tests?

[15:51] *** vrurg left
[15:53] *** zakharyas left
[15:53] <SmokeMachine> this is my problem... https://www.irccloud.com/pastebin/N34VvNT3/

[15:53] <SmokeMachine> the slang module is from here: https://github.com/FCO/p6-react

[15:55] <SmokeMachine> here: https://github.com/FCO/p6-react/blob/master/lib/Slang.pm6

[15:55] <[Coke]> SmokeMachine: just tried your first example in a checkout of p6-react, got output

[15:55] <[Coke]> what version of perl6 are you using?

[15:55] <SmokeMachine> try it again... it some times works...

[15:56] <SmokeMachine> https://www.irccloud.com/pastebin/2pep0Mv7/

[15:56] <SmokeMachine> This is Rakudo version 2018.06-276-gbb6a6f80b built on MoarVM version 2018.06-329-g21ea40f68

[15:57] <[Coke]> yup, verified. was fine until I started running it in a bash loop.

[15:57] <SmokeMachine> it looks a bug, right?

[15:57] <SmokeMachine> *like

[16:01] <SmokeMachine> a little smaller example https://www.irccloud.com/pastebin/7KXUupfh/

[16:04] *** psychoslave left
[16:09] <nwellnhof> FWIW, the bitshift bug seems to be here: https://github.com/MoarVM/MoarVM/blob/428ed0e2aa6e1486b0c89f46556c95ec3f428678/src/math/bigintops.c#L729

[16:09] <nwellnhof> I also filed https://github.com/MoarVM/MoarVM/issues/923

[16:11] *** domidumont joined
[16:12] <lizmat> releasable6: status

[16:12] <releasable6> lizmat, Next release in ≈19 days and ≈2 hours. 3 blockers. 81 out of 276 commits logged (⚠ 9 warnings)

[16:12] <releasable6> lizmat, Details: https://gist.github.com/eea99d57c1f11bf5d6046f221a018e00

[16:13] *** natrys joined
[16:13] <SmokeMachine> this is an old project... I don't remember to have this problem when I wrote this code... :(

[16:15] *** troys joined
[16:15] <[Coke]> smokemachine: if nothing else, I wouldn't expect the nondeterministic results

[16:16] *** Ven`` joined
[16:16] *** wamba left
[16:22] <sena_kun> m: 1 does Bool;

[16:22] <camelia> rakudo-moar bb6a6f80b: ( no output )

[16:22] *** robertle left
[16:22] <sena_kun> m: say 1 does Bool;

[16:22] <camelia> rakudo-moar bb6a6f80b: OUTPUT: «1␤»

[16:22] <sena_kun> o.0

[16:23] <[Coke]> m: say (1 does Bool).WHAT;

[16:23] <camelia> rakudo-moar bb6a6f80b: OUTPUT: «(Int+{Bool})␤»

[16:23] <sena_kun> I'm getting "Unhandled exception: Cannot unbox a type object (Bool) to int.", but camelia works.

[16:24] <[Coke]> what is your perl6 version?

[16:24] <sena_kun> the exception using `perl6 -e` and endless loop with "Cannot unbox a type object (Bool) to int." message.

[16:24] <sena_kun> This is Rakudo version 2018.06 built on MoarVM version 2018.06

[16:24] <SmokeMachine> #2151

[16:25] *** fake_space_whale left
[16:26] <[Coke]> to be clear, not in the REPL?

[16:27] <sena_kun> when in REPL, I see exception message repeating endlessly. When with `-e`, just the exception once.

[16:28] <[Coke]> ah. same!

[16:28] <[Coke]> m: say $*VERSION

[16:28] <camelia> rakudo-moar bb6a6f80b: OUTPUT: «Dynamic variable $*VERSION not found␤  in block <unit> at <tmp> line 1␤␤»

[16:28] <sena_kun> it is not like I need this feature now, just semi-accidentally typed that(wow) and decided to try out if it's a known issue.

[16:28] <sena_kun> m: say $*VM;

[16:28] <camelia> rakudo-moar bb6a6f80b: OUTPUT: «moar (2018.06.329.g.21.ea.40.f.68)␤»

[16:29] <[Coke]> thanks

[16:29] <[Coke]> 2018.06-216-g7a7e5e96f here.

[16:30] *** scimon left
[16:31] *** nwellnhof left
[16:33] <sena_kun> and we have 425 github issues for word "does". not sure if wants a ticket.

[16:36] *** vrurg joined
[16:37] <xinming> What is the right way to define a string enum list?

[16:38] *** Ven`` left
[16:38] *** psychoslave joined
[16:38] <xinming> something like    subset AssetName where { * ~~ set <cny usd jpy> }

[16:39] <xinming> THis version is what I can think of, But I'm thinking wether there is a better way to define the subset like this.

[16:40] *** Ven`` joined
[16:42] <raschipi> xinming: How is that different from just an enum?

[16:45] *** dakkar left
[16:47] *** Zoffix joined
[16:48] <Zoffix> xinming: that version is broken and will always be true. You're wrapping a WhateverCode closure inside another Block

[16:48] <Zoffix> xinming: you can just use an `any` Junction with a list

[16:49] <Zoffix> m: subset AssetName where any <foo bar ber>; say $_ ~~ AssetName for <foo meow meh bar ber>

[16:49] <camelia> rakudo-moar 45080856b: OUTPUT: «True␤False␤False␤True␤True␤»

[16:49] <xinming> Zoffix: I didn't test that yet. Just think on how something can be achieved in perl6

[16:49] <xinming> Zoffix: Thanks for the idea

[16:51] *** molaf left
[16:51] <xinming> raschipi: enum can be used as keywords directly, where we are passing strings around.

[16:51] <xinming> I get used to use _ for both sub and var name, After I get used to -, I feel - is better look. :-)

[16:56] *** st_elmo joined
[16:56] <Juerd> m: enum AssetName <cny usd jpy>; my $an = any AssetName.enums.keys; say $_ ~~ $an for <usd eur nlg frf dem cny>

[16:56] <camelia> rakudo-moar 45080856b: OUTPUT: «True␤False␤False␤False␤False␤True␤»

[16:57] <Juerd> If you want an enum, then use one :)

[16:57] * Juerd is triggerend by ".enums", it feels recursive...

[16:58] *** raynold joined
[16:58] <Zoffix> sena_kun: I'd call that a case of DITWIDT. You're mixing into an object that's being used all over the shop, no wonder stuff explodes. You want to use `but` instead

[17:00] <Zoffix> (for record, it explodes because you changed "True" to be a type object and the true translate-nl param being used in a native int in core now doesn't fit anymore)

[17:01] <AlexDaniel> .tell jmerelo so what's the plan?

[17:01] <yoleaux> AlexDaniel: I'll pass your message to jmerelo.

[17:02] <sena_kun> Zoffix, well, I don't want anything(especially such code D: ), just asked if worth ticketing. Thanks for explanation!

[17:05] <Zoffix> sena_kun: no, I would not consider this a bug. There's a lengthy discussion on R#1959 on this topic, and basically implementations are allowed to cache any two objects if they share a .WHICH (so basically return the same object for it) because they're considered immutable and eventually trying to `but` into such an object will error out.

[17:05] <synopsebot> R#1959 [closed]: https://github.com/rakudo/rakudo/issues/1959 Empty set()/bag()/mix() do not return a unique object

[17:05] <sena_kun> oh, saw that ticket. yes, makes sense then.

[17:06] <Zoffix> Allowed to cache, but with the exception that .clone must return a fresh object

[17:06] <Zoffix> e: say 1 but Bool

[17:06] <evalable6> Zoffix, rakudo-moar 45080856b: OUTPUT: «1␤»

[17:06] <Zoffix> e: say 1 but Bool;

[17:06] <evalable6> Zoffix, rakudo-moar 45080856b: OUTPUT: «1␤»

[17:06] <Zoffix> e: say 1 does Bool;

[17:06] <evalable6> Zoffix, rakudo-moar 45080856b: OUTPUT: «(exit code 1) 1␤Unhandled exception: Cannot unbox a type object (Bool) to int.␤   at SETTI…»

[17:06] <evalable6> Zoffix, Full output: https://gist.github.com/b0f4c763a5d5a991153d059a1c119008

[17:06] <Zoffix> e: say 1.clone does Bool;

[17:06] <evalable6> Zoffix, rakudo-moar 45080856b: OUTPUT: «1␤»

[17:06] <Zoffix> Works :)

[17:08] <Zoffix> * trying to `does` into such an object will error out; `but` is fine, 'cause it does a clone

[17:08] *** Zoffix left
[17:14] <masak> Juerd: it's because the nomenclature in Perl 6 is a bit tortured. an _enumeration_ (declared using the `enum` keyword) consists of one or more _enums_.

[17:14] <xinming> what type is best for money?

[17:14] <xinming> Num?

[17:14] <timotimo> Rat

[17:14] <timotimo> Num is floating point

[17:14] <[Coke]> depends on your precision needs. I'd use Rat, myself.

[17:14] <masak> xinming: definitely Rat.

[17:15] <xinming> Ok, Thanks

[17:16] <masak> xinming: important that many languages only have a type corresponding to Num, and so programmers in that language tend to use Num for money, which often leads to tears and hair loss.

[17:17] <xinming> I'll convert Rat to Num before save to db

[17:17] <xinming> :-)

[17:17] <masak> augh :/

[17:17] <masak> then you'll lose precision.

[17:18] <xinming> I just use it to do calculation in perl.

[17:21] <masak> xinming: if you care enough about the precision guaranteed by Rat (as opposed to the precision-loss of Num), storing a Rat as a Str is preferable to storing the Rat as a Num

[17:22] *** telex left
[17:22] <mst> or depending on the sort of precision you want, a decimal in the db

[17:24] *** telex joined
[17:24] *** natrys left
[17:26] <raschipi> Perhaps two integers would be better?

[17:27] <timotimo> yeah, it would

[17:27] <timotimo> though of course if you treat the Rat bad enough it'll also turn into a Num again

[17:27] *** troys left
[17:28] *** kaare_ left
[17:29] * masak .oO( How to Train Your Rat )

[17:33] *** psychoslave left
[17:33] *** psychoslave joined
[17:34] *** kaare_ joined
[17:39] *** lizmat left
[17:42] *** Ven`` left
[17:44] *** lizmat joined
[17:48] *** Ven`` joined
[17:56] *** wamba joined
[17:57] <lizmat> notable6: weekly reset

[17:57] <notable6> lizmat, Moved existing notes to “weekly_2018-07-30T17:57:13Z”

[17:57] *** lucasb joined
[18:02] *** mcmillhj left
[18:04] *** Zoffix joined
[18:04] *** Zoffix left
[18:04] *** Ven`` left
[18:05] <buggable> New CPAN upload: CamelPub-0.1.0.tar.gz by DONPDONP https://cpan.metacpan.org/authors/id/D/DO/DONPDONP/Perl6/CamelPub-0.1.0.tar.gz

[18:05] *** sena_kun left
[18:05] *** sena_kun joined
[18:07] *** sena_kun left
[18:07] *** sena_kun joined
[18:08] *** mcmillhj joined
[18:11] *** x[LGWs4x4i]uG2N0 left
[18:11] *** raschipi left
[18:13] *** mcmillhj left
[18:14] *** x[LGWs4x4i]uG2N0 joined
[18:15] *** wamba left
[18:16] *** dct joined
[18:16] *** wamba joined
[18:17] *** sena_kun left
[18:18] *** sena_kun joined
[18:19] *** pecastro joined
[18:21] <Geth> ¦ doc: 33603b1f18 | (Zoffix Znet)++ | doc/Language/numerics.pod6

[18:21] <Geth> ¦ doc: [6.d] We now have a POV of `num` defaulting to 0e0

[18:21] <Geth> ¦ doc: 

[18:21] <Geth> ¦ doc: POV Impl: https://github.com/rakudo/rakudo/commit/f045042d4f

[18:21] <synopsebot> Link: https://doc.perl6.org/language/numerics

[18:21] <Geth> ¦ doc: Propspec: https://github.com/perl6/roast/commit/2abee09f88

[18:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/33603b1f18

[18:23] *** mcmillhj joined
[18:26] *** raynold left
[18:26] *** sauvin left
[18:29] *** mcmillhj left
[18:30] *** Summertime joined
[18:30] *** xi- left
[18:32] <Geth> ¦ doc: 4a04fb1e90 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/glossary.pod6

[18:32] <Geth> ¦ doc: Glossarify some of the new spec-related terms

[18:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4a04fb1e90

[18:32] <synopsebot> Link: https://doc.perl6.org/language/glossary

[18:37] *** buggable left
[18:37] *** buggable joined
[18:37] *** ChanServ sets mode: +v buggable

[18:38] *** buggable left
[18:38] *** Goneri joined
[18:38] *** buggable joined
[18:38] *** ChanServ sets mode: +v buggable

[18:38] <Goneri> hi, can anyone explain me what I'm doing wrong here: https://paste.fedoraproject.org/paste/B1k0-amZedJvZrcwriZSvw

[18:39] *** Zoffix joined
[18:39] <Zoffix> Goneri: variables with Str in them are interpreted as literal strings. Use <$pattern> instead

[18:39] *** dct left
[18:40] <Zoffix> Goneri: there's was this recent "Intro Into Perl 6 Regexes and Grammars" talk, if you're interested: https://rakudo.party/post/Intro-Into-Perl6-Regexes-and-Grammars-Perl-6-Talk--Slides-Recording

[18:40] <Goneri> Zoffix, thanks!

[18:40] *** mcmillhj joined
[18:40] <xinming> is self.var  %.var the same?

[18:41] <Goneri> I was using https://docs.perl6.org/syntax/%20Regex%20Interpolation and it's a bit confusing

[18:41] <xinming> I thought they are the same, But I found they don't.

[18:41] <xinming> when I use self.var = blabla in BUILD, It worked, when I try to use %.var = blabla,  It reports may not be used on partially constructed objects.

[18:41] <Zoffix> xinming: %.var is like %(self.var), I believe

[18:42] <xinming> let me try

[18:42] <xinming> then, this is probabaly a bug

[18:42] <Zoffix> might be

[18:43] <xinming> m: class A { has %.h = (a => 1) }; class B is A { submethod BUILD () { %.h = (b => 1) } }; B.new

[18:43] <camelia> rakudo-moar f045042d4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Virtual method call %.h may not be used on partially constructed object (maybe you mean %!h for direct attribute access here?)␤at <tmp>:1␤------> 3 class B is A { submethod BUILD () { %.h7⏏5 = …»

[18:43] <xinming> m: class A { has %.h = (a => 1) }; class B is A { submethod BUILD () { self.h = (b => 1) } }; B.new

[18:43] <camelia> rakudo-moar f045042d4: ( no output )

[18:43] <xinming> m: class A { has %.h = (a => 1) }; class B is A { submethod BUILD () { self.h = (b => 1) } }; B.new.h.perl.say;

[18:43] <camelia> rakudo-moar f045042d4: OUTPUT: «{:b(1)}␤»

[18:44] <xinming> m: class A { has %.h = (a => 1) }; class B is A { submethod BUILD () { %(self.h) = (b => 1) } }; B.new.h.perl.say;

[18:44] <camelia> rakudo-moar f045042d4: OUTPUT: «{:b(1)}␤»

[18:44] <xinming> You see, the %.h is not the same as %(self.h)

[18:44] <xinming> Will report later.

[18:46] *** mcmillhj left
[18:48] <Zoffix> Goneri: agreed. Filed an Issue in our docs repo for that: D#2230

[18:48] <synopsebot> D#2230 [open]: https://github.com/perl6/doc/issues/2230 [docs][easy to resolve] "Regex and interpolation is a bit confusing"

[18:52] <Zoffix> %.h is probably the same as %(self.h), except the compiler complains in the %.h case when it's in the build method

[18:53] <Zoffix> m: class A { has %.h = (a => 1); has %.b = %.h }.new.b.say;

[18:53] <camelia> rakudo-moar f045042d4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Virtual method call %.h may not be used on partially constructed object (maybe you mean %!h for direct attribute access here?)␤at <tmp>:1␤------> 3ss A { has %.h = (a => 1); has %.b = %.h7⏏5 }.…»

[18:53] <Zoffix> m: class A { has %.h = (a => 1); has %.b = self.h }.new.b.say;

[18:53] <camelia> rakudo-moar f045042d4: OUTPUT: «{a => 1}␤»

[18:53] <Zoffix> Ano ther case

[18:56] <Zoffix> xinming: filed it as R#2152

[18:56] <synopsebot> R#2152 [open]: https://github.com/rakudo/rakudo/issues/2152 Using `%.foo` in places throws, but changing it to `self.foo` works

[18:58] <Zoffix> m: class { has @.h = <a b c d>; method z { dd %.h } }.new.z

[18:58] <camelia> rakudo-moar f045042d4: OUTPUT: «Hash % = {:a("b"), :c("d")}␤»

[18:58] *** mcmillhj joined
[18:58] <Zoffix> Looking at QAST, %.h is like `self.h.hash`

[18:59] <Zoffix> and %(self.h) is the same thing; a method call

[19:01] *** domidumont left
[19:06] *** Zoffix left
[19:08] *** mcmillhj left
[19:08] *** raschipi joined
[19:08] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/07/30/2018-31-check-out-garbage/

[19:09] <raschipi> lizmat++

[19:10] *** molaf joined
[19:16] *** mcmillhj joined
[19:17] <sena_kun> lizmat++

[19:18] <[Coke]> lizmat++ indeed.

[19:19] <moritz> lizmat++ tweeted

[19:19] <El_Che> jnthn's grant request needs more comments (linked in the weekly)

[19:20] <raschipi> lizmat: You listed "Tons of clarifications by Zoffix Znet." twice.

[19:21] <lizmat> raschipi: good catch, fixed

[19:22] <raschipi> I thought a had a deja vu, but in fact I had deja vu.

[19:24] *** sno joined
[19:24] *** |Sno| left
[19:34] <masak> lizmat++ # weekly

[19:35] <El_Che> raschipi: there were a lot of clarifications :)

[19:38] <Geth> ¦ doc: hankache++ created pull request #2231: add missing 'class' keyword for consistency with other types

[19:38] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2231

[19:52] <AlexDaniel> jdv79: sorry, did you file a bug report? I can't find it

[19:52] <AlexDaniel> jdv79: for the performance issue

[19:53] <SmokeMachine> lizmat: Injector wasn't mentioned... :(

[19:54] <lizmat> I missed that ?

[19:54] <lizmat> it's in the list of updated modules ??

[19:54] <lizmat> SmokeMachine: ^^^

[19:55] <SmokeMachine> no, its a new module...

[19:55] <AlexDaniel> lizmat: fwiw it's better to say “4 August (all timezones included)” instead of ±23 hours

[19:56] <lizmat> SmokeMachine: I guess when I saw commits on 26 May, I assumed it was an update...

[19:56] <lizmat> will move

[19:56] <SmokeMachine> http://modules.perl6.org/search/?q=Injector

[19:56] <AlexDaniel> because it's like (-14 … (24 hours) … +12)

[19:57] <Geth> ¦ doc: cdce18f8d2 | (Naoum Hankache)++ | 4 files

[19:57] <Geth> ¦ doc: add missing 'class' keyword for consistency with other types

[19:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/cdce18f8d2

[19:57] <Geth> ¦ doc: 6a0817cea7 | (Naoum Hankache)++ (committed using GitHub Web editor) | 4 files

[19:57] <Geth> ¦ doc: Merge pull request #2231 from hankache/master

[19:57] <Geth> ¦ doc: 

[19:57] <Geth> ¦ doc: add missing 'class' keyword for consistency with other types

[19:57] <AlexDaniel> Complicated maybe, but the idea is that whenever it's Saturday in *any* timezone, it's Squashathon :)

[19:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6a0817cea7

[19:57] <SmokeMachine> lizmat: now I got it!

[19:57] <lizmat> SmokeMachine: updated

[19:57] <SmokeMachine> its mentioned on update!!!

[19:57] <SmokeMachine> sorry!

[19:57] <SmokeMachine> I thought it was new... 

[19:57] <SmokeMachine> am I a little crazy?

[19:58] <raschipi> SmokeMachine: Sim, por ser brasileiro, mas não vem ao caso.

[19:58] <lizmat> it was added to the ecosystem repo last week, yes

[19:59] <lizmat> AlexDaniel: fixed

[19:59] <SmokeMachine> raschipi: :) mas nesse caso não sou o único... :P

[19:59] <El_Che> crazy brazilians alarm

[20:00] <raschipi> Cada louco é louco da sua própria maneira, ser normal é que é chato.

[20:01] <raschipi> 🚨🚨🚨🚨

[20:01] <El_Che> chato ou gato?

[20:02] <lizmat> si

[20:03] <raschipi> crazy Spanish alarm

[20:03] <jdv79> AlexDaniel: not yet.  i fell asleep.

[20:04] <jdv79> jnthn is on vaca anyway.  whats the rush;)

[20:05] <jdv79> you could do it if you feel compelled

[20:06] <alexghacker> I think I've discovered a problem with the values being returned by uniprop for some glyphs

[20:06] <alexghacker> m: my $s = "\c[0x377, 0x378, 0x379, 0x37a]"; say $s.uninames; say $s.uniprops('Block')

[20:06] <camelia> rakudo-moar f92367021: OUTPUT: «(GREEK SMALL LETTER PAMPHYLIAN DIGAMMA <reserved-0378> <reserved-0379> GREEK YPOGEGRAMMENI)␤(Greek and Coptic No_Block No_Block Greek and Coptic)␤»

[20:07] <alexghacker> But, according to https://www.unicode.org/Public/UCD/latest/ucd/Blocks.txt, "0370..03FF; Greek and Coptic"

[20:07] <AlexDaniel> jdv79: well I just don't want us to forget about it :)

[20:08] <alexghacker> so even though those glyphs are reserved they still ought to be part of that block (they're included in the range)

[20:08] <AlexDaniel> jdv79: it's reproducible and noticeable, maybe golfable too. Good catch, you need to write it down now :)

[20:08] <jdv79> im at lunch.  ill do it in a bit.

[20:08] <alexghacker> should that be filed as a rakudo-specific bug or should tests be added to roast for it?

[20:09] <raschipi> alexghacker: even though no one answered you, I bet half a dozen people are working on it already.

[20:10] <AlexDaniel> jdv79: thanks ♥

[20:12] <alexghacker> raschipi: ty.  pleased to meet you.  I'm not quite new here, but it's been a long while  :)

[20:12] <alexghacker> I'm good filing my own bug reports and/or merge requests; I just want to put them in the most appropriate place.

[20:16] <SmokeMachine> lizmat: thanks!

[20:34] *** Zoffix joined
[20:35] <Zoffix> alexghacker: here's a good place: https://github.com/rakudo/rakudo/issues/new

[20:35] <Zoffix> alexghacker: and our resident Unicode expert is samcv if you wanted to talk to her about this stuff :)

[20:45] *** Zoffix left
[20:46] *** st_elmo left
[20:57] *** raschipi left
[20:59] *** Ven`` joined
[20:59] <ttkp6> are the TPC-2018 talks going to be recorded and made available via youtube or similar?

[21:00] <ttkp6> never mind .. just found https://www.youtube.com/user/yapcna

[21:03] *** Some-body_ joined
[21:03] *** DarthGandalf left
[21:04] *** Some-body_ is now known as DarthGandalf

[21:05] *** spycrab0 left
[21:06] *** vrurg left
[21:06] *** spycrab0 joined
[21:13] *** rindolf left
[21:15] *** skids left
[21:23] <samcv> alexghacker: file a bug at https://github.com/MoarVM/MoarVM

[21:24] <samcv> i am pretty sure i know why it gives the wrong result, and how i will fix it as well. but please open a ticket so i make sure it gets done

[21:26] *** Zoffix joined
[21:26] <Zoffix> FYI: www.p6c.org was down. Couldn't ssh to it, so I rebooted it.

[21:27] <Zoffix> I think all the sites are back....

[21:27] *** Zoffix left
[21:27] *** mcmillhj left
[21:30] *** HaraldJoerg left
[21:32] *** mcmillhj joined
[21:36] *** Goneri left
[21:37] *** mcmillhj left
[21:52] *** mcmillhj joined
[21:54] *** pmurias left
[21:54] *** pmurias joined
[21:55] *** vrurg joined
[21:56] *** psychoslave left
[21:57] *** vrurg left
[21:57] *** mcmillhj left
[21:58] *** molaf left
[21:58] *** vrurg joined
[21:59] *** vrurg left
[22:03] *** sena_kun left
[22:05] *** mcmillhj joined
[22:06] *** DarthGandalf left
[22:07] *** Voldenet left
[22:09] *** DarthGandalf joined
[22:09] *** lucasb left
[22:10] *** mcmillhj left
[22:10] *** psychoslave joined
[22:16] *** psychoslave left
[22:17] *** pmurias left
[22:18] *** mcmillhj joined
[22:19] <jdv79> AlexDaniel: https://github.com/rakudo/rakudo/issues/2155

[22:19] <jdv79> happy?

[22:20] *** wamba left
[22:23] *** mcmillhj left
[22:27] <timotimo> doesn't look bad

[22:29] *** epony left
[22:30] <AlexDaniel> jdv79: yes, thank you! :)

[22:30] *** Ven`` left
[22:30] *** wamba joined
[22:30] *** go|dfish joined
[22:30] <Kaiepi> m: say await start { return start { 1 } }

[22:30] <camelia> rakudo-moar 7043559bb: OUTPUT: «An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    Attempt to return outside of any Routine␤      in block  at <tmp> line 1␤␤»

[22:31] <Kaiepi> m: say await Promise.start({ Promise.start({ 1 }) })

[22:31] <camelia> rakudo-moar 7043559bb: OUTPUT: «Promise.new(scheduler => ThreadPoolScheduler.new(initial_threads => 0, max_threads => 64, uncaught_handler => Callable), status => PromiseStatus::Kept)␤»

[22:31] <Kaiepi> damn i was hoping it'd be 1 like in js

[22:33] <geekosaur> m: say so await Promise.start({ Promise.start({ 1 }) })

[22:33] <camelia> rakudo-moar 7043559bb: OUTPUT: «True␤»

[22:34] *** mcmillhj joined
[22:34] <geekosaur> oh, the value.

[22:36] *** Ven`` joined
[22:38] *** mcmillhj left
[22:50] *** vrurg joined
[22:51] *** mcmillhj joined
[22:54] *** xi- joined
[22:55] *** Ven`` left
[22:55] *** Ven` joined
[22:56] *** mcmillhj left
[23:02] *** Ven` left
[23:10] *** mcmillhj joined
[23:15] *** mcmillhj left
[23:18] *** pecastro left
[23:27] <MasterDuke> alexghacker: btw, i know samcv has talked about making the unicode version discoverable (and maybe even selectable)

[23:36] *** mcmillhj joined
[23:40] <AlexDaniel> MasterDuke, alexghacker: GH#2031

[23:40] <synopsebot> GH#2031 [open]: https://github.com/rakudo/rakudo/issues/2031 [RFC][path to stability] Ability to ensure support for a unicode version

[23:41] *** mcmillhj left
[23:46] *** wamba left
[23:50] *** molaf joined
