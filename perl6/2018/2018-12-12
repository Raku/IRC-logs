[00:00] *** ufobat left
[00:06] <Xliff> m: $_ = 1; when 1 | 2 { say 'A'; }

[00:06] <camelia> rakudo-moar 011c6f11d: OUTPUT: ¬´A‚ê§¬ª

[00:07] <Xliff> m: my enum blah <aa bb cc>; $_ = blah(1); when aa | bb { say 'A'; }

[00:07] <camelia> rakudo-moar 011c6f11d: OUTPUT: ¬´A‚ê§¬ª

[00:07] <Xliff> m: my enum blah <aa bb cc>; $_ = blah(3); when aa | bb { say 'A'; }

[00:07] <camelia> rakudo-moar 011c6f11d: ( no output )

[00:10] <sena_kun> Xliff, ping?

[00:10] <Xliff> Yes?

[00:11] <sena_kun> can you please check advent site? is 12th day shows up?

[00:11] <Xliff> Yes.

[00:11] <Xliff> It's up.

[00:12] <sena_kun> \o/

[00:12] <Xliff> "Day 12 ‚Äì Building a flexible grammar"

[00:12] <sena_kun> now I need to get some sleep...

[00:13] <sena_kun> yes, I guess that's what it should be. the article was posted in drafts, so I was kinda forced to fix markup & publish. I hope I did everything okay. :S

[00:15] <Xliff> One issue.

[00:15] *** kolibrie joined
[00:15] *** w_richard_w joined
[00:15] *** zacts joined
[00:15] *** p6bannerbot sets mode: +v zacts

[00:15] <Xliff> I don't know if it can be solved. 

[00:15] <Xliff> It's fine as is, but it looks like the intention of the original author was to have some words in BOLD in the code markup.

[00:16] *** p6bannerbot sets mode: +v kolibrie

[00:16] *** p6bannerbot sets mode: +v w_richard_w

[00:16] <sena_kun> well, you either have syntax highlighting or bold, I think.

[00:17] <Xliff> Yes.

[00:17] <Xliff> El Gato Negro 1 Gato Street, South Texas *Bueno*

[00:17] <Xliff> Victor Mancho 3 Mancho Street, New York City *Malo*

[00:17] <Xliff> *Bueno* and *Malo* should be bold, IIRC

[00:17] <sena_kun> let me check it...

[00:18] *** zacts left
[00:18] <Xliff> If it can't be bold, I think it still works, though. 

[00:19] <sena_kun> updated to have bold text.

[00:20] <sena_kun> I wish people would discuss such things beforehand. :S anyway, I'm going to bed already. I hope I won't be fired for this. :)

[00:22] *** sena_kun left
[00:31] *** lucasb left
[00:39] *** w_richard_w left
[00:39] *** captain-adequate left
[00:49] *** DarthGandalf left
[01:11] *** lichtkind left
[01:15] *** MasterDuke joined
[01:15] *** p6bannerbot sets mode: +v MasterDuke

[01:16] *** MasterDuke left
[01:16] *** MasterDuke joined
[01:16] *** herbert.freenode.net sets mode: +v MasterDuke

[01:16] *** p6bannerbot sets mode: +v MasterDuke

[01:20] *** MasterDuke left
[01:35] *** daotoad joined
[01:35] *** p6bannerbot sets mode: +v daotoad

[01:54] <Xliff> Why was the rotor method named that way?

[01:54] <Xliff> My zen question for the day.

[02:12] *** kst joined
[02:13] *** p6bannerbot sets mode: +v kst

[02:23] *** molaf left
[02:35] *** molaf joined
[02:36] *** p6bannerbot sets mode: +v molaf

[03:12] *** nelsonhb joined
[03:13] *** p6bannerbot sets mode: +v nelsonhb

[03:15] *** uzl joined
[03:15] *** p6bannerbot sets mode: +v uzl

[03:15] <uzl> .seen jmerelo

[03:15] <yoleaux> I saw jmerelo 11 Dec 2018 19:58Z in #perl6: <jmerelo> lizmat, lucasb please do that.

[03:15] *** jkramer joined
[03:16] *** p6bannerbot sets mode: +v jkramer

[03:23] <Xliff> What's the best way to see the signatures for a given method?

[03:23] <uzl> .tell jmerelo Hi, JJ! I just saw your note for scheduling. I think my article is ready. However, if someone could look at it before posting it would be great.

[03:23] <yoleaux> uzl: I'll pass your message to jmerelo.

[03:24] <uzl> .tell jmerelo I already have the wordpress username but I'd appreciate if someone with more experience 

[03:24] <yoleaux> uzl: I'll pass your message to jmerelo.

[03:24] <uzl> could do the posting. Or at least walk me through it. 

[03:24] <uzl> .tell jmerelo BTW I was debating on changing the article's title since it might give the wrong impression. I'm fine with it but if you've a better title I'd go with it.

[03:24] <yoleaux> uzl: I'll pass your message to jmerelo.

[03:24] <uzl> .tell jmerelo Article: https://gist.github.com/uzluisf/268a95ffec901056c9377c254a3971d1

[03:24] <yoleaux> uzl: I'll pass your message to jmerelo.

[03:28] <uzl> Hello, I'm looking for someone to proofread my article( https://gist.github.com/uzluisf/268a95ffec901056c9377c254a3971d1 ). Any correction/suggestion is welcome. I'll probably be back tomorrow!

[03:28] *** uzl left
[03:40] *** Sgeo left
[03:56] *** graphene left
[03:57] *** graphene joined
[03:58] *** p6bannerbot sets mode: +v graphene

[03:59] *** esh joined
[04:00] *** p6bannerbot sets mode: +v esh

[04:03] *** llfourn joined
[04:03] *** p6bannerbot sets mode: +v llfourn

[04:04] *** Sgeo joined
[04:05] *** p6bannerbot sets mode: +v Sgeo

[04:06] *** epony left
[04:07] <Xliff> .tell uzl In your first example, the second comparison has a comment that should read "True, 220 and 284 are though." -- you had "28" rather than "284". 

[04:07] <yoleaux> Xliff: I'll pass your message to uzl.

[04:07] *** nine joined
[04:08] *** p6bannerbot sets mode: +v nine

[04:08] *** camelia joined
[04:09] *** p6bannerbot sets mode: +v camelia

[04:12] *** epony joined
[04:12] *** p6bannerbot sets mode: +v epony

[04:13] *** epony left
[04:14] *** epony joined
[04:14] *** p6bannerbot sets mode: +v epony

[04:15] *** Cabanoss- joined
[04:16] *** p6bannerbot sets mode: +v Cabanoss-

[04:17] *** Cabanossi left
[04:30] <nelsonhb> Hiranyagarbha (the cosmic egg).He is more prominently mentioned in the post-Vedic Hindu epics and the mythologies in the Puranas. In the epics, he is conflated with Purusha.

[04:46] *** sauvin joined
[04:46] *** p6bannerbot sets mode: +v sauvin

[04:46] *** molaf left
[04:52] <Xliff> source: NativeCall::Types

[05:02] <holyghost> bron == source :-)

[05:04] <nelsonhb> The succession of these flame emperors, from Shennong, the first Yan Emperor, until the time of the last Yan Emperor's defeat by the Yellow 

[05:04] <nelsonhb> Emperor, may have been some 500 years.

[05:08] *** kst` joined
[05:08] *** p6bannerbot sets mode: +v kst`

[05:08] *** kktt joined
[05:08] *** p6bannerbot sets mode: +v kktt

[05:10] *** kst left
[05:17] *** Xliff left
[05:17] *** Xliff joined
[05:18] *** mattp_ left
[05:18] *** llfourn left
[05:18] *** p6bannerbot sets mode: +v Xliff

[05:18] *** llfourn joined
[05:18] *** mattp_ joined
[05:19] *** nelsonhb left
[05:19] *** Actualey` joined
[05:19] *** nightfrog left
[05:19] *** p6bannerbot sets mode: +v llfourn

[05:19] *** p6bannerbot sets mode: +v mattp_

[05:19] *** nightfrog joined
[05:20] *** p6bannerbot sets mode: +v Actualey`

[05:20] *** p6bannerbot sets mode: +v nightfrog

[05:21] *** MilkmanDan left
[05:21] *** nelsonhb joined
[05:21] *** nelsonhb left
[05:21] *** MilkmanDan joined
[05:21] *** p6bannerbot sets mode: +v MilkmanDan

[05:23] *** kktt left
[05:23] *** Actualeyes left
[05:28] *** nelsonhb joined
[05:28] *** nelsonhb left
[05:28] *** nelsonhb joined
[05:28] *** nelsonhb left
[05:33] *** nelsonhb joined
[05:33] *** nelsonhb left
[05:35] *** w_richard_w joined
[05:36] *** p6bannerbot sets mode: +v w_richard_w

[05:37] *** nelsonhb joined
[05:37] *** nelsonhb left
[05:37] *** nelsonhb joined
[05:37] *** nelsonhb left
[05:39] *** nelsonhb joined
[05:39] *** nelsonhb left
[05:47] *** Sgeo left
[05:47] *** Sgeo joined
[05:48] *** p6bannerbot sets mode: +v Sgeo

[05:51] *** curan joined
[05:51] *** p6bannerbot sets mode: +v curan

[05:52] *** Sgeo_ joined
[05:53] *** p6bannerbot sets mode: +v Sgeo_

[05:55] *** Sgeo left
[05:58] *** w_richard_w left
[06:00] *** jmerelo joined
[06:01] *** p6bannerbot sets mode: +v jmerelo

[06:16] *** nelsonhb joined
[06:16] *** nelsonhb left
[06:17] *** nelsonhb joined
[06:17] *** nelsonhb left
[06:26] <jmerelo> Today, MorayJ tells us how to build a flexible grammar https://perl6advent.wordpress.com/2018/12/12/day-12-building-a-flexible-grammar/

[06:26] <yoleaux> 03:23Z <uzl> jmerelo: Hi, JJ! I just saw your note for scheduling. I think my article is ready. However, if someone could look at it before posting it would be great.

[06:26] <yoleaux> 03:24Z <uzl> jmerelo: I already have the wordpress username but I'd appreciate if someone with more experience

[06:26] <yoleaux> 03:24Z <uzl> jmerelo: BTW I was debating on changing the article's title since it might give the wrong impression. I'm fine with it but if you've a better title I'd go with it.

[06:26] <yoleaux> 03:24Z <uzl> jmerelo: Article: https://gist.github.com/uzluisf/268a95ffec901056c9377c254a3971d1

[06:28] <jmerelo> .tell uzluisf It's mostly OK, but did you read the comments by Xliff? The title is OK. I might have used something like "Calling numbers names" "Or numbers by any other name" or something like that, but it's OK.

[06:28] <yoleaux> jmerelo: I'll pass your message to uzluisf.

[06:28] <jmerelo> .tell uzl (just in case) It's mostly OK, but did you read the comments by Xliff? The title is OK. I might have used something like "Calling numbers names" "Or numbers by any other name" or something like that, but it's OK.

[06:28] <yoleaux> jmerelo: I'll pass your message to uzl.

[06:29] *** kurahaupo joined
[06:30] *** p6bannerbot sets mode: +v kurahaupo

[06:32] *** abraxxa joined
[06:32] <Geth> ¬¶ doc: d49329e9c3 | (JJ Merelo)++ | doc/Type/Signature.pod6

[06:32] <Geth> ¬¶ doc: Adjust line length

[06:32] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/d49329e9c3

[06:32] *** abraxxa left
[06:33] *** abraxxa joined
[06:34] *** p6bannerbot sets mode: +v abraxxa

[06:35] *** aindilis left
[06:35] *** aindilis joined
[06:35] *** aindilis left
[06:35] <Geth> ¬¶ doc: b9dce77293 | (JJ Merelo)++ | doc/Type/Signature.pod6

[06:35] <Geth> ¬¶ doc: Changes =item to =head4 sections

[06:35] <Geth> ¬¶ doc: 

[06:35] <Geth> ¬¶ doc: This refs #2483

[06:35] <Geth> ¬¶ doc: 

[06:35] <Geth> ¬¶ doc: I leave the issue open just in case some other similar pages are found

[06:35] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/b9dce77293

[06:36] *** DarthGandalf joined
[06:36] *** p6bannerbot sets mode: +v DarthGandalf

[06:37] *** abraxxa left
[06:38] <jmerelo> From StackOverflow: https://stackoverflow.com/questions/53736139/updating-a-program-in-a-compunitprecompilationstore Can anyone help?

[06:52] *** abraxxa joined
[06:53] *** p6bannerbot sets mode: +v abraxxa

[06:54] *** aindilis joined
[06:55] *** p6bannerbot sets mode: +v aindilis

[07:00] <tyil> I'm sure perl 6 has an operator to compare 2 arrays for being equal

[07:00] <tyil> (ie, both contain the same values)

[07:02] *** domidumont joined
[07:02] *** kensanata joined
[07:02] *** p6bannerbot sets mode: +v kensanata

[07:02] <holyghost> if there's not maybe @l.eq(@l2) should be made

[07:03] *** p6bannerbot sets mode: +v domidumont

[07:04] <holyghost> without regarding pointers to lists

[07:04] <jmerelo> tyil: ===, I think. That's object equality. Or >=<

[07:05] <Geth> ¬¶ doc: 5063159650 | (JJ Merelo)++ | 2 files

[07:05] <Geth> ¬¶ doc: Quirks of do when added.

[07:05] <Geth> ¬¶ doc: 

[07:05] <Geth> ¬¶ doc: Closes #2506

[07:05] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/5063159650

[07:07] <Geth> ¬¶ doc: c8066ff988 | (JJ Merelo)++ | doc/Language/pod.pod6

[07:07] <Geth> ¬¶ doc: Checking changes, closes #2507

[07:07] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/c8066ff988

[07:09] *** abraxxa left
[07:10] *** jmerelo left
[07:12] *** graphene left
[07:14] *** graphene joined
[07:14] *** p6bannerbot sets mode: +v graphene

[07:32] *** andrzejku_ joined
[07:32] *** andrzejku left
[07:32] *** andrzejku_ is now known as andrzejku

[07:33] *** p6bannerbot sets mode: +v andrzejku

[07:34] *** kurahaupo left
[07:35] *** kurahaupo joined
[07:36] *** p6bannerbot sets mode: +v kurahaupo

[07:36] *** andrzejku left
[07:36] *** andrzejku joined
[07:37] *** p6bannerbot sets mode: +v andrzejku

[07:41] <moritz> if you want to compare arrays by their contents, use eqv

[07:43] *** Manifest0 left
[07:43] *** Manifest0 joined
[07:44] *** p6bannerbot sets mode: +v Manifest0

[07:44] *** ufobat joined
[07:45] *** p6bannerbot sets mode: +v ufobat

[07:46] *** kurahaupo_ joined
[07:47] *** p6bannerbot sets mode: +v kurahaupo_

[07:50] *** kurahaupo left
[07:53] *** nebuchadnezzar joined
[07:54] *** p6bannerbot sets mode: +v nebuchadnezzar

[07:56] *** kensanata left
[08:01] *** xlat joined
[08:02] *** p6bannerbot sets mode: +v xlat

[08:09] *** kurahaupo_ is now known as kurahaupo

[08:12] *** robertle joined
[08:12] *** ufobat left
[08:13] *** p6bannerbot sets mode: +v robertle

[08:17] *** kurahaupo is now known as Dave_________

[08:18] *** Dave_________ is now known as kurahaupo

[08:19] *** lookatme_q left
[08:20] *** lookatme_q joined
[08:21] *** p6bannerbot sets mode: +v lookatme_q

[08:23] *** rindolf joined
[08:23] <Xliff> \o

[08:24] <Xliff> Anyone awake? I am having some weird issues with CArrays

[08:24] *** p6bannerbot sets mode: +v rindolf

[08:24] <Xliff> (Yes. AGAIN)

[08:25] <Xliff> Long story short, what would cause this error message: Unknown element type in CArray

[08:26] <lizmat> m: my @a = 1,2,3; my @b = 3,2,1; dd @a eqv @b # tyil 

[08:26] <camelia> rakudo-moar 212193cb4: OUTPUT: ¬´Bool::False‚ê§¬ª

[08:26] <lizmat> m: my @a = 1,2,3; my @b = 1,2,3; dd @a eqv @b # tyil 

[08:26] <camelia> rakudo-moar 212193cb4: OUTPUT: ¬´Bool::True‚ê§¬ª

[08:26] <Xliff> \o lizmat

[08:26] <Xliff> Is this early or late for you? :)

[08:27] <lizmat> early actually, 9:30 am

[08:27] <lizmat> Xliff: and I'm afraid I don't have an answer for your questionn

[08:28] <Xliff> lizmat: That's OK. I'm afraid this might be another jnthn or timotimo question.

[08:29] <Xliff> (am I missing someone?)

[08:29] <Xliff> At any rate: Good morning!

[08:29] <Xliff> It's 3:30am here.

[08:29] <Xliff> m: my @a = <a b c d e f>; say $a.iterator.pull-one;

[08:29] <camelia> rakudo-moar 212193cb4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$a' is not declared. Did you mean '@a'?‚ê§at <tmp>:1‚ê§------> 3my @a = <a b c d e f>; say 7‚èè5$a.iterator.pull-one;‚ê§¬ª

[08:29] <Xliff> m: my @a = <a b c d e f>; say @a.iterator.pull-one;

[08:29] <camelia> rakudo-moar 212193cb4: OUTPUT: ¬´a‚ê§¬ª

[08:30] <Xliff> m: use v6.c; class A { has @!a = <1 2 3>; method iterator { say 'Iterator'; my @a := @!a; class :: does Iterator { has $.index is rw = 0; method pull-one { @a.elems > $.index ?? @a[$.index++] !! IterationEnd; } }.new; }; }; .say for A.new;

[08:30] <camelia> rakudo-moar 212193cb4: OUTPUT: ¬´Iterator‚ê§1‚ê§2‚ê§3‚ê§¬ª

[08:31] <Xliff> m: use v6.c; class A { has @!a = <1 2 3>; method iterator { say 'Iterator'; my @a := @!a; class :: does Iterator { has $.index is rw = 0; method pull-one { @a.elems > $.index ?? @a[$.index++] !! IterationEnd; } }.new; }; }; A.new.iterator.pull-one.say

[08:31] <camelia> rakudo-moar 212193cb4: OUTPUT: ¬´Iterator‚ê§1‚ê§¬ª

[08:31] * Xliff goes for a cig

[08:32] *** abraxxa joined
[08:33] *** p6bannerbot sets mode: +v abraxxa

[08:46] <Xliff> OK. Write up here: https://gist.github.com/Xliff/cba8312525042f3acc6b5e205437bd0b -- I will ping back later to see if an issue should be created.

[08:46] <Xliff> G'night!

[08:51] *** kensanata joined
[08:51] *** p6bannerbot sets mode: +v kensanata

[09:05] *** nelsonhb joined
[09:05] *** p6bannerbot sets mode: +v nelsonhb

[09:06] *** zakharyas joined
[09:07] *** p6bannerbot sets mode: +v zakharyas

[09:09] *** dakkar joined
[09:10] *** p6bannerbot sets mode: +v dakkar

[09:11] *** scimon joined
[09:12] *** p6bannerbot sets mode: +v scimon

[09:17] *** titsuki left
[09:17] *** rindolf left
[09:22] <tyil> lizmat: interesting

[09:23] <lizmat> tyil: it's what is-deeply uses under the hood

[09:23] <tyil> if I sort the lists, and then use eqv, it should work for my usecase

[09:23] *** ufobat joined
[09:23] <tyil> I dont care about the order, just whether they have the same entries 

[09:24] <lizmat> and the same number of entries ?

[09:24] <lizmat> I mean <a a> eqv <a> or not ?

[09:24] <tyil> yes, but that's a check I can do before even considering eqv

[09:24] *** p6bannerbot sets mode: +v ufobat

[09:24] <tyil> if the number of elements differ, they're clearly not the same

[09:25] <lizmat> right

[09:25] <tyil> if the number of elements is equal, I want to know whether they have the same entries, in no particular order

[09:25] <lizmat> hmmm... wonder if there is some set op that you could use...

[09:26] <tyil> that's what I was wondering too :)

[09:26] <tyil> but I can do with @a.sort eqv @b.sort

[09:28] <lizmat> are the lists big ?

[09:31] *** rindolf joined
[09:32] *** p6bannerbot sets mode: +v rindolf

[09:32] <moritz> or possibly set(@a) eqv set(@b)

[09:34] <lizmat> m: my @a = 1,2,3; my @b = 3,2,1; dd @a == @b && @a (<=) @b

[09:34] <camelia> rakudo-moar 212193cb4: OUTPUT: ¬´Bool::True‚ê§¬ª

[09:34] <lizmat> that probably uses set semantics, which is ok if you're sure each value only occurs once in every list

[09:35] <lizmat> m: my @a = 1,2,3; my @b = 3,2,1; dd @a == @b && @a (<=) @b.Bag   # force Bag semantics otherwise

[09:35] <camelia> rakudo-moar 212193cb4: OUTPUT: ¬´Bool::True‚ê§¬ª

[09:35] <lizmat> I wonder if a (==) op would make sense

[09:53] *** gregf_ joined
[09:53] *** p6bannerbot sets mode: +v gregf_

[10:03] *** scimon left
[10:03] *** scimon joined
[10:04] <tyil> lizmat: they may become big I guess

[10:04] *** p6bannerbot sets mode: +v scimon

[10:04] <tyil> for now I'm not expecting lists larger than 50 entries

[10:08] <lizmat> then sorting should be quick an dirty

[10:24] *** rindolf left
[10:29] <tobs> There's also symmetric difference (^) which is empty precisely when the sets/bags are the same

[10:30] <lizmat> tobs++

[10:30] <lizmat> m: my @a = 1,2,3; my @b = 3,2,1; dd @a == @b && @a (^) @b

[10:30] <camelia> rakudo-moar 212193cb4: OUTPUT: ¬´Set.new()‚ê§¬ª

[10:31] <lizmat> m: my @a = 1,2,3; my @b = 3,2,1; dd @a == @b && @a (^) @b.Bag

[10:31] <camelia> rakudo-moar 212193cb4: OUTPUT: ¬´().Bag‚ê§¬ª

[10:31] *** rindolf joined
[10:31] <lizmat> slight problem with that is that it doesn't shortcut as soon as it sees a difference

[10:32] <lizmat> which (==) could

[10:32] *** p6bannerbot sets mode: +v rindolf

[10:35] *** lucasb joined
[10:35] *** p6bannerbot sets mode: +v lucasb

[10:39] <tyil> tobs: unrelated to my earlier question, but can I use symmetric difference to show me all the entries that appear in the RHS that *dont* appear in the LHS?

[10:39] <tyil> and vice-versa, give me all entries that appear in the LHS but not in the RHS

[10:44] <lizmat> m: my @a = 1,2,3,5; my @b = 1,2,3,4; dd @a (-) @b   # ones on the left not on the right

[10:44] <camelia> rakudo-moar 212193cb4: OUTPUT: ¬´Set.new(5)‚ê§¬ª

[10:44] <lizmat> m: my @a = 1,2,3,5; my @b = 1,2,3,4; dd @a R(-) @b   # ones on the right not on the left

[10:44] <camelia> rakudo-moar 212193cb4: OUTPUT: ¬´Set.new(4)‚ê§¬ª

[10:44] <lucasb> tyil: are you doing AoC? :)

[10:45] <tyil> AoC?

[10:45] <tyil> (that's probably a no)

[10:46] <tyil> I'm making a program in Perl 6 to configure nginx and request new certs through certbot anytime I add a new host

[10:46] <lucasb> ah, sorry. I thought perhaps was practicing Advent of Code :)

[10:46] <tyil> it is to be the frontend service for my kubernetes cluster

[10:46] <tyil> once this is done I have two other (fun) projects to do in Perl 6 :>

[10:46] <tyil> apart from rewriting all sorts of stuff at work into perl 6, that is

[10:48] <tyil> if I can get https://stackoverflow.com/questions/53692507/how-to-use-certfp-with-ircclient answered with a "yes", I'll have three other projects :D

[10:48] <lizmat> tyil: that's above my paygrade  :-(

[10:48] <tyil> w-what is? :o

[10:49] <lizmat> using certfp

[10:49] <tyil> ah

[10:49] <lizmat> well, I would have to spend a relative large amount of time on that, that hopefully someone else has already done

[10:49] <tyil> I'm willing to offer you one of my cherished cans of cider at the next amsterdam.pm :>

[10:50] <lizmat> ok :-) it's not 8 Jan yet  :-)

[10:50] <tyil> I'm not in a hurry

[10:50] <tyil> the other projects will take me quite some time

[10:51] <tyil> and at the end of the month I wont have much time

[10:51] <tyil> and then next month I wont have much time either, as I may or may not be moving to amsterdam :p

[10:54] <lizmat> ah.. the joys of living together  :-)

[10:54] <mornfall> is there a (simple-ish) way to inject a method into an existing class instance?

[10:54] <mornfall> i'm using .&foo but it's a bit hacking for the downstream

[10:54] <mornfall> hackish*

[10:55] <lizmat> m: 'my $a = 42 but role { method foo { "foo" } }; say $a.foo

[10:55] <camelia> rakudo-moar 212193cb4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> 3ole { method foo { "foo" } }; say $a.foo7‚èè5<EOL>‚ê§    expecting ‚Ä¶¬ª

[10:55] *** scimon left
[10:55] <lizmat> m: my $a = 42 but role { method foo { "foo" } }; say $a.foo

[10:55] <camelia> rakudo-moar 212193cb4: OUTPUT: ¬´foo‚ê§¬ª

[10:55] *** scimon joined
[10:55] <lizmat> mornfall ^^

[10:56] *** p6bannerbot sets mode: +v scimon

[10:58] <mornfall> lizmat: thanks, cool

[11:01] *** domidumont left
[11:08] <mornfall> is there a case-insensitive version of eq?

[11:08] <lucasb> maybe $foo.fc eq $bar.fc

[11:09] <mornfall> oh okay, .fc works (i tried .to-lower without much success :p)

[11:12] <tyil> .lc is for lowercasing

[11:12] <yoleaux> CalculatorParseError: Unknown syntax at position 0

[11:12] <tyil> https://docs.perl6.org/routine/lc

[11:13] <tyil> but I'd suggest using fc as lucasb recommended

[11:18] <lizmat> m: sub infix:<fceq>($a,$b) { $a.fc eq $b.fc }; dd "foo" fceq "fOo"

[11:18] <camelia> rakudo-moar 212193cb4: OUTPUT: ¬´Bool::True‚ê§¬ª

[11:31] *** kurahaupo left
[11:34] *** kurahaupo joined
[11:35] *** p6bannerbot sets mode: +v kurahaupo

[11:40] *** tobs` joined
[11:40] *** p6bannerbot sets mode: +v tobs`

[11:47] *** zakharyas left
[11:50] <Ulti> jnthn: whatever happened to https://github.com/jnthn/grammar-generative ? >:3 feels like a super nice idea in general, is it essentially impossible in reality?

[11:50] <mornfall> WARNING: unhandled Failure detected in DESTROY. If you meant to ignore it, you can mark it as handled by calling .Bool, .so, .not, or .defined methods. The Failure was: [snip]

[11:50] <mornfall> how would this happen? it's like a regular throw in a with block in a sub?

[11:51] <mornfall> (the backtrace it gives, that is)

[11:58] *** nige_ joined
[11:59] *** p6bannerbot sets mode: +v nige_

[12:00] *** nige left
[12:00] <lucasb> do you see the place the failure was created?

[12:04] * mornfall reviews exception docs

[12:07] <mornfall> turns out i should not be using 'fail' at all, i want a die/.throw

[12:07] <lizmat> m: for ^280 { my $a := Failure.new }

[12:07] <camelia> rakudo-moar 212193cb4: ( no output )

[12:07] <lizmat> m: for ^280 { my $a := Failure.new }

[12:07] <camelia> rakudo-moar 212193cb4: OUTPUT: ¬´WARNING: unhandled Failure detected in DESTROY. If you meant to ignore it, you can mark it as handled by calling .Bool, .so, .not, or .defined methods. The Failure was:‚ê§Failed‚ê§‚ê§WARNING: unhandled Failure detected in DESTROY. If you meant to igno‚Ä¶¬ª

[12:08] <lizmat> this code created a lot of unhandled Failure objects, as soon as the GC kicks in, the warnings appear

[12:09] <jnthn> Ulti: Never really found time to continue working on it. I don't think it's impossible, but I only got it working for one sort-of-interesting example case.

[12:09] <yoleaux> 11 Dec 2018 11:04Z <lizmat> jnthn: are dynamic variable lookups cached and if so, OOC how?

[12:09] *** Actualey` left
[12:09] <jnthn> Ulti: And that's before we even begin to consider performance :)

[12:10] <jnthn> But as an idea, yeah, it's quite neat :)

[12:10] <jnthn> I guess you already found the slides of the talk I gave about it too?

[12:10] <jnthn> lizmat: MoarVM caches successful dynvar lookups that are resolved on the call stack. We currently don't cache failure to find one, nor any that are resolved in, say, PROCESS

[12:12] <lizmat> I was thinking that looking for uninitialized dynvars may be a source of slowdown

[12:12] <jnthn> Yeah, that will try all the places

[12:12] <jnthn> Well, non-existing anyway

[12:12] <lizmat> so I was thinking, what if a *mentioning* a dynvar in a scope would automatically create a slot in its MY::

[12:12] <jnthn> lunch &

[12:13] <jnthn> lizmat: Rebinding

[12:14] <lizmat> ?

[12:15] *** pmurias joined
[12:15] *** p6bannerbot sets mode: +v pmurias

[12:16] <pmurias> what should $*DISTRO.name return when running in a browser (say Chrome)

[12:16] <pmurias> ?

[12:16] <lizmat> depends on the OS it's running on ?

[12:18] <lizmat> m: $*DISTRO.name

[12:18] <camelia> rakudo-moar 212193cb4: ( no output )

[12:18] <lizmat> m: say $*DISTRO.name

[12:18] <camelia> rakudo-moar 212193cb4: OUTPUT: ¬´opensuse‚ê§¬ª

[12:19] *** fvox`away is now known as fvox

[12:28] <pmurias> lizmat: hmm, I don't have access to the precise distro information

[12:29] <pmurias> lizmat: also I'm not sure if returning say linux when running in Chrome on linux wouldn't be misleading

[12:29] <pmurias> lizmat: as it's not quite a different thing then running in linux natively

[12:30] <lizmat> can you access the browser ID string?  maybe that's a good replacement, and may contain the OS it runs on anyway

[12:30] *** pmurias left
[12:31] *** pmurias joined
[12:31] *** p6bannerbot sets mode: +v pmurias

[12:33] <pmurias> lizmat: yes I can

[12:41] <lizmat> hmmm.... thinking about that more

[12:41] <lizmat> maybe we should introduce a $*BROWSER ?

[12:42] <lizmat> so that a. you could check *if* you're running in a browser

[12:42] <lizmat> and b. provide all sorts of introspectoin

[12:43] <lizmat> on the jvm / moarvm / js bare backend, that would be Nil 

[12:43] <lizmat> and have $*DISTRO remain the same

[12:46] <pmurias> we do have a bunch of data available from window.navigator (https://developer.mozilla.org/en-US/docs/Web/API/Navigator) so adding a $*BROWSER to access it would make sense

[12:47] *** domidumont joined
[12:48] *** p6bannerbot sets mode: +v domidumont

[12:48] *** domidumont left
[12:49] <lizmat> sounds like a plan to me

[12:51] *** pmurias left
[12:59] *** graphene left
[13:00] *** pmurias joined
[13:00] *** p6bannerbot sets mode: +v pmurias

[13:00] *** graphene joined
[13:01] *** p6bannerbot sets mode: +v graphene

[13:02] *** |oLa| joined
[13:02] *** pmurias left
[13:03] *** p6bannerbot sets mode: +v |oLa|

[13:05] *** yqt joined
[13:05] *** pmurias joined
[13:05] *** p6bannerbot sets mode: +v pmurias

[13:06] *** p6bannerbot sets mode: +v yqt

[13:17] <pmurias> lizmat: I used grep.cpanauthors.org (btw. which I found in the weekly) and it seems $*DISTRO.name is mostly used for detecting os to special case their differences

[13:17] <pmurias> especially we don't want to use the .is-win special handling

[13:18] <lizmat> so $*BROWSER seems like a good idea ?

[13:19] <pmurias> lizmat: $*BROWSER definitely seems like a good idea

[13:19] <lucasb> well, it opens precedent for $*FUTURISTIC-DEVICE :)

[13:20] <lucasb> $*ANDROID ?

[13:20] <lizmat> I think *$BROWSER atm for this is better

[13:21] <lizmat> but perhaps a more genenic $*EMBEDDED

[13:21] <lizmat> ?

[13:21] <lizmat> in any case, the term "browser" becomes more and more general, so I think we're going to be safe in that respect for a while

[13:22] <pmurias> lizmat: just that setting $*DISTRO.name to 'browser' might be better than returning the host os and confusing 

[13:22] <pmurias> os checks

[13:22] <tbrowder> o/ 

[13:22] <lucasb> yeah, $*BROWSER is much more convenient to type :)

[13:23] <lucasb> tbrowder: o/

[13:23] <lizmat> pmurias: not sure... feels to me $*DISTRO should stay doing what it does even in a browser

[13:24] <lizmat> even if it may be confusing in a browser setting

[13:24] <tbrowder> question: can a cro service be deployed on apache2 or nginx in the same manner as Bailador (using a reverse proxy)?

[13:25] <lizmat> tbrowder: at that level, it's just HTTP going back and forth, so there should be no difference

[13:25] <lizmat> If I understand the question correctly

[13:25] <ufobat> tbrowder, i think yeah

[13:26] <tbrowder> i want to deploy a new site using cro, but i want to make sure it's secure as my current apache2 sites are. 

[13:27] *** aindilis left
[13:27] <ufobat> i think it might be not working if you want to do http/2 to your reverse proxy

[13:27] *** aindilis joined
[13:28] <tbrowder> no, not using http2 yet

[13:28] <ufobat> but internet -> https -> ngnix/apache -> http -> cro/bailador works, i think 

[13:28] <tbrowder> but https

[13:28] *** p6bannerbot sets mode: +v aindilis

[13:28] <jnthn> tbrowder: Yes, I've got most of my my production Cro apps deployed with an Apache reverse proxy; works fine.

[13:29] <ufobat> tbrowder, maybe that helps you a bit https://gitlab.com/ufobat/voteimproved

[13:29] <tbrowder> jnthn: do you use sytemd for starts and shutdowns?

[13:29] <jnthn> tbrowder: No

[13:29] <tbrowder> if so, mind sharing the config files?

[13:30] <jnthn> tbrowder: Deployed in containers in a kubernetes cluster

[13:30] <tbrowder> ah! 

[13:30] <jnthn> (Apache in its own container)

[13:30] <nelsonhb> The succession of these flame emperors, from Shennong, the first Yan Emperor, until the time of the last Yan Emperor's defeat by the Yellow 

[13:30] <nelsonhb> Emperor, may have been some 500 years.

[13:31] <tbrowder> jnthn: thanks

[13:32] <tbrowder> ufobat: thanks

[13:32] *** Peter_R joined
[13:32] *** p6bannerbot sets mode: +v Peter_R

[13:34] <tbrowder> funny, just saw new email announcement from digitalocean about their new kubernetes DOK8s  

[13:35] *** zakharyas joined
[13:35] *** p6bannerbot sets mode: +v zakharyas

[13:36] <Ulti> jnthn: no not seen the slides, is it on your homepage under talks/papers I can go find it

[13:37] <jnthn> Ulti: yeah, I think it had some title like "What if Perl 6 grammers could generate?" or something

[13:37] <jnthn> I think it went down as the most headache-inducing talk I ever gave

[13:37] <Ulti> Im just thinking for my bioinformatics stuff where I have some grammars it would be really quite nice to easily de/serialize using the same thing

[13:37] <Ulti> jnthn: sounds good :) I will make sure to do some blood letting before I read it

[13:38] <Ulti> oh you've updated your site! swanky

[13:38] <Ulti> incase anyone else is interested http://jnthn.net/papers/2013-yapcna-grammar-generate.pdf

[13:40] <Ulti> especially as formats like Newick for representing phylogenetic trees are litterally just a parse tree and back again really

[13:41] *** ufobat left
[13:43] *** c1nil joined
[13:43] *** p6bannerbot sets mode: +v c1nil

[13:45] <c1nil> can i use mutable sub parameters?

[13:45] <pmurias> jnthn: you might want to have a look at the boomerang language if you are interested in bidirectional parsing (and well everything)

[13:46] <lucasb> c1nil: sub foo($x is copy)  # if that's what you mean

[13:52] <pmurias> lizmat: it seems like a tradeoff between being more truthfull (in a way) and pragmatism, I'll think that over

[13:52] <nelsonhb> Netaji Subhas Chandra Bose International Airport

[13:52] <nelsonhb> Bir Tikendrajit International Airport 

[13:52] <nelsonhb> Guwahati International Airport 

[13:52] <nelsonhb> Mandalay International Airport 

[13:52] <nelsonhb> Chiang Mai International Airport

[13:52] <nelsonhb> Noi Bai International Airport

[13:52] <nelsonhb> Siem Reap-Angkor International Airport

[13:52] <nelsonhb> Mactan‚ÄìCebu International Airport 

[13:53] *** ChanServ sets mode: +o jnthn

[13:53] *** pmurias left
[13:53] *** nelsonhb was kicked by jnthn (nelsonhb))
[13:54] *** jnthn sets mode: -o jnthn

[13:54] *** pmurias joined
[13:54] *** p6bannerbot sets mode: +v pmurias

[13:56] <rindolf> jnthn: thanks

[13:59] <pmurias> lizmat: linux-browser is also something I'm considering (so that it both doesn't hide info and doesn't accidently get matched by some platform check)

[14:02] *** molaf joined
[14:03] *** p6bannerbot sets mode: +v molaf

[14:11] <pmurias> in roast we have a test like this: ok +%*ENV.keys, '%*ENV has keys';

[14:11] <pmurias> do we want to *require* that the env variables aren't empty no matter where we are running?

[14:12] <timotimo> ha

[14:15] *** sena_kun joined
[14:16] <pmurias> not a big problem to add some fake variables there for rakudo.js but getting rid of the test seems cleanr

[14:16] <pmurias> * cleaner

[14:16] *** p6bannerbot sets mode: +v sena_kun

[14:17] *** manjaro-user- joined
[14:18] *** p6bannerbot sets mode: +v manjaro-user-

[14:18] *** nige_ left
[14:19] <vrurg> pmurias: maybe skipping on certain platforms would be more appropriate?

[14:19] *** kurahaupo left
[14:20] <lucasb> Interesting, even with a empty environment "env -i /path/to/perl6 -e 'say %*ENV'", env still has PWD and SHLVL set

[14:21] <lucasb> ah, perl6 is a shell script :)

[14:22] <lucasb> invoking moar directly starts with a completely empty env

[14:24] *** kktt joined
[14:24] *** kktt left
[14:24] <pmurias> well according to our specification it's not a Perl 6 if you start with a empty env ;)

[14:24] <timotimo> no, our specification just says it has to make up a key, any key

[14:26] <lucasb> well, someone should try if "env -i /path/to/moar [ --libpath=LIBPATH ] /path/to/perl6.moarvm -e 'say %*ENV'" fails that roast test :)

[14:33] <timotimo> tbrowder: would you be interested in a perl 6 game of life that uses SDL2 instead of running inside of 6pad?

[14:35] <tbrowder> yep (but don't know what SDL is for sure, SimpleDirectMedia?)

[14:36] *** manjaro-user- left
[14:36] <pmurias> tbrowder: yes

[14:37] <tbrowder> timitimo: that would be great (i think, still reading about SDL)

[14:41] *** kurahaupo joined
[14:41] <pmurias> timotimo: looking through the irc logs it seems like 6pad has hang taking your code hostage :/

[14:42] *** p6bannerbot sets mode: +v kurahaupo

[14:43] <pmurias> timotimo: how do you think making it preserve code on page reload would be good?

[14:47] *** kktt joined
[14:48] *** p6bannerbot sets mode: +v kktt

[14:51] <timotimo> perhaps put everything in LocalStorage and offer a "history" kind of like an undo history?

[14:51] *** curan left
[14:53] *** pmurias left
[14:55] *** pmurias joined
[14:55] *** p6bannerbot sets mode: +v pmurias

[15:00] *** pmurias left
[15:03] *** SourceBaby joined
[15:03] *** ChanServ sets mode: +v SourceBaby

[15:04] *** p6bannerbot sets mode: +v SourceBaby

[15:04] *** pmurias joined
[15:04] *** p6bannerbot sets mode: +v pmurias

[15:06] <timotimo> also, is there a way to not have the page unresponsive while 1) loading the perl6 javascript file and 2) compiling some perl6 code to js?

[15:07] *** titsuki joined
[15:08] *** p6bannerbot sets mode: +v titsuki

[15:10] *** pmurias left
[15:10] *** pmurias joined
[15:10] *** p6bannerbot sets mode: +v pmurias

[15:11] <pmurias> timotimo: I think there might be a way (by putting the actuall js compiler in an iframe)

[15:11] *** rfold joined
[15:11] <pmurias> timotimo: I have to think about (and experiment with that a bit)

[15:12] <pmurias> timotimo: got to run&

[15:12] *** p6bannerbot sets mode: +v rfold

[15:12] <Xliff> Anyone seen this before? -- https://gist.github.com/Xliff/cba8312525042f3acc6b5e205437bd0b

[15:12] *** rfold left
[15:12] *** pmurias left
[15:14] <timotimo> i wonder if it'd work better to put the compiler part into a web worker; functions are passed around "as strings" anyway in js, right? :P

[15:19] *** graphene left
[15:20] *** graphene joined
[15:21] *** p6bannerbot sets mode: +v graphene

[15:23] *** uzl joined
[15:24] *** p6bannerbot sets mode: +v uzl

[15:26] <uzl> Hello, #perl6!

[15:26] <yoleaux> 04:07Z <Xliff> uzl: In your first example, the second comparison has a comment that should read "True, 220 and 284 are though." -- you had "28" rather than "284".

[15:26] <yoleaux> 06:28Z <jmerelo> uzl: (just in case) It's mostly OK, but did you read the comments by Xliff? The title is OK. I might have used something like "Calling numbers names" "Or numbers by any other name" or something like that, but it's OK.

[15:27] <uzl> Xliff: Thanks. I've fixed it!

[15:28] <uzl> .tell jmerelo I've gone with one of your titles. It's more subtle and sounds less pretentious ;-)! Feel free to put the article in reserve!

[15:28] <yoleaux> uzl: I'll pass your message to jmerelo.

[15:28] *** Sgeo_ left
[15:32] *** uzl left
[15:36] *** yqt left
[15:37] <Xliff> Can someone tell me what it means when you get the following error: "Unknown element type in CArray" -- Is that a mismatched memory issue?

[15:38] <timotimo> can you run the script under gdb?

[15:38] <Xliff> Sure.

[15:38] <timotimo> and "break CArray.c:331"

[15:38] <timotimo> and then print repr_data[0]

[15:42] <Xliff> Crap. I have to re-brew. Didn't remember debug

[15:42] <timotimo> ah dang

[15:43] <timotimo> i think it'd literally be no problem at all to have the default be --debug=3 or at the very least --debug=1

[15:43] <Xliff> I know.

[15:43] <Xliff> I keep forgetting I have an alias for that. So used to typing it out.

[15:43] <Xliff> Doesn't take long, though.

[15:46] <Xliff> Compile times are creeping up, again.

[15:47] <lizmat> yeah, probably the new read-intX / write-intX methods

[15:49] <Xliff> timotimo: Were you talking perl6-gdb-m?

[15:53] <timotimo> yes

[15:54] <Xliff> Every time I use 'perl6-gdb-m script args' I don't get the gdb prompt. Is there a way to pass commands to GDB?

[15:55] <Xliff> Nevermind. Got it.

[15:55] *** kurahaupo left
[15:55] <Xliff> $1 = {elem_size = 8, elem_type = 0x555556d77588, elem_kind = 6}

[16:00] <timotimo> that's a CUnion

[16:00] <Xliff> Yep!

[16:01] <Xliff> And I've had trouble with CUnions and CArray's before. You'd think I'd learn.

[16:01] <timotimo> maybe it's enough to put a case for that where there's already cases for pointer, string, array etc such

[16:02] <Xliff> CUnions are supported by NativeCall, so I would think they'd be good for CArray, yes?

[16:04] <timotimo> well, yeah. just turns out somebody forgot to take care of them in CArray

[16:05] <Xliff> D'oh

[16:05] <timotimo> make_wrapper will also need a bit of code

[16:06] <Xliff> Oh...wow.

[16:06] <timotimo> but there's also a MVM_nativecall_make_cunion

[16:07] <Xliff> OK, want me to make an issue?

[16:08] <timotimo> i thought maybe you could make a patch :D

[16:08] <Xliff> LOL!

[16:08] <Xliff> While I am looking at the relevant parts of the code, I'd have no idea what to do.

[16:10] <Xliff> This for make_wrapper: 

[16:10] <Xliff> case MVM_CARRAY_ELEM_KIND_CUNION:

[16:10] <Xliff>             return MVM_nativecall_make_cunion(tc, repr_data->elem_type, data);

[16:10] <Xliff> ?

[16:11] *** llfourn left
[16:12] *** zacts joined
[16:12] *** p6bannerbot sets mode: +v zacts

[16:12] <timotimo> i think so

[16:16] <Xliff> https://paste.ee/p/XgQOK

[16:16] *** llfourn joined
[16:17] *** p6bannerbot sets mode: +v llfourn

[16:19] <timotimo> looks good; does it seem to work?

[16:19] <AlexDaniel> nnnnnnooooooooooooooooo github

[16:19] <AlexDaniel> my vertical space :(

[16:20] <AlexDaniel> :O and now it's gone

[16:20] <Kaiepi> what happened to github?

[16:20] <scimon> So 6.d lets me throw promises at it like crazy. 

[16:21] <AlexDaniel> they added an extra bar to the top of the screen with the issue title

[16:21] <AlexDaniel> but after refreshing the page it seems to be gone‚Ä¶ weird

[16:21] *** robertle left
[16:21] <scimon> Making 4000 promises to read data files, throwing them into an array and then awaiting the lot. Just. Works :)

[16:21] <Kaiepi> in a chat bot i'm writing there's a timeout on sending messages

[16:21] <AlexDaniel> scimon: I know! That's how Blin works actually

[16:22] <Kaiepi> so i have a send-bulk method that uses a lazy for to do Promise.in(atomic-inc-fetch $i).then({ self.send: $data }) and awaits it

[16:23] <Kaiepi> lazy for is crazy useful

[16:23] <AlexDaniel> scimon: basically I create a Promise for each module, and then there's a react block with as many `whenever`s as there are modules :)

[16:23] *** jmerelo joined
[16:23] <AlexDaniel> scimon: https://github.com/perl6/Blin/blob/master/bin/blin.p6#L285 :)

[16:24] *** p6bannerbot sets mode: +v jmerelo

[16:26] <Xliff> timotimo: Let me see.

[16:37] <Xliff> How can I force rebuild all of rakudo?

[16:38] <lizmat> touch any of the files in src/core

[16:38] <scimon> Neat.

[16:42] <Geth> ¬¶ doc: 44ba9e8347 | (Elizabeth Mattijsen)++ | doc/Type/Endian.pod6

[16:42] <Geth> ¬¶ doc: Introducing the Endian enum

[16:42] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/44ba9e8347

[16:42] <Geth> ¬¶ doc: acbc324427 | (Elizabeth Mattijsen)++ | doc/Type/Blob.pod6

[16:42] <Geth> ¬¶ doc: First stab at documenting new blob8.read- methods

[16:42] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/acbc324427

[16:47] <Geth> ¬¶ doc: cd33e48117 | (JJ Merelo)++ | doc/Language/variables.pod6

[16:47] <Geth> ¬¶ doc: Improves and debugs description, refs #2510

[16:47] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/cd33e48117

[16:47] <jmerelo> lizmat++ ^^^

[16:47] <yoleaux> 15:28Z <uzl> jmerelo: I've gone with one of your titles. It's more subtle and sounds less pretentious ;-)! Feel free to put the article in reserve!

[16:48] <jmerelo> .tell uzl thanks!

[16:48] <yoleaux> jmerelo: I'll pass your message to uzl.

[16:56] *** domidumont joined
[16:56] <tobs`> I'm doing something like this: ¬ª S:g['1'] = @patch[$i++] with $data ¬´ where I replace all 1's in $data with the elements of @patch in order. That works with a "my $i = 0" in the function but obviously won't when I use the anonymous state variable instead of $i.

[16:57] <tobs`> I wonder if I can somehow have $ reset each time the function is entered but not reset while that particular line is executed.

[16:57] *** p6bannerbot sets mode: +v domidumont

[16:57] *** abraxxa left
[16:58] <AlexDaniel> tobs`: so what's wrong with `my $i = 0`? :)

[16:58] <tobs`> n-nothing

[17:00] <tobs`> I thought "now is the perfect chance to use $++" but once again it wasn't

[17:00] <Xliff> timotimo: OK. Segfaulting when I try to access the CUnion. 

[17:00] <Xliff> So there may still be something missing.

[17:02] <tobs`> m: sub f { say $++ }; f; f; f; sub g { say do { $++ } }; g; g; g

[17:02] <camelia> rakudo-moar b781f8ccd: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§0‚ê§0‚ê§0‚ê§¬ª

[17:02] <tobs`> hehe

[17:02] <AlexDaniel> that looks correct

[17:04] <tobs`> oh, but it resets on every evaluation of the do block, so I can't use that as an index. $i it is then.

[17:05] <jmerelo> tobs`: blocks don't have state. Routines do, I guess.

[17:05] <jmerelo> m: sub f { say $++ }; f; f; f; sub g { say do -> { $++ } }; g; g; g

[17:05] <camelia> rakudo-moar b781f8ccd: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§->  { #`(Block|58873200) ... }‚ê§->  { #`(Block|58873416) ... }‚ê§->  { #`(Block|58873488) ... }‚ê§¬ª

[17:06] <jmerelo> m: sub f { say $++ }; f; f; f; sub g { say -> { $++ } }; g; g; g

[17:06] <camelia> rakudo-moar b781f8ccd: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§->  { #`(Block|61371048) ... }‚ê§->  { #`(Block|61371264) ... }‚ê§->  { #`(Block|61371336) ... }‚ê§¬ª

[17:06] <jmerelo> m: sub f { say $++ }; f; f; f; sub g { say { -> { $++ } }}; g; g; g

[17:06] <camelia> rakudo-moar b781f8ccd: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§-> ;; $_? is raw { #`(Block|74260232) ... }‚ê§-> ;; $_? is raw { #`(Block|74522624) ... }‚ê§-> ;; $_? is raw { #`(Block|74522696) ... }‚ê§¬ª

[17:06] <jmerelo> aw, never mind.

[17:06] <jmerelo> Did you know you can try StackOverflow? Please do. :-)

[17:07] <jmerelo> m: sub f { say $++ }; f; f; f; sub g {  -> { $++ } }; say g; say g; say g

[17:07] <camelia> rakudo-moar b781f8ccd: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§->  { #`(Block|73077112) ... }‚ê§->  { #`(Block|73077328) ... }‚ê§->  { #`(Block|73077400) ... }‚ê§¬ª

[17:07] <tobs`> m: sub f { say $++ }; f; f; f; sub g { say { -> { $++ }() }}; g; g; g

[17:07] <camelia> rakudo-moar b781f8ccd: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§-> ;; $_? is raw { #`(Block|79938208) ... }‚ê§-> ;; $_? is raw { #`(Block|79938424) ... }‚ê§-> ;; $_? is raw { #`(Block|79938496) ... }‚ê§¬ª

[17:08] <tobs`> m: sub f { say $++ }; f; f; f; sub g { say -> { $++ }() }; g; g; g

[17:08] <camelia> rakudo-moar b781f8ccd: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§0‚ê§0‚ê§0‚ê§¬ª

[17:08] <jmerelo> tobs`: so Callables don't keep state either. It needs to be a routine.

[17:09] <jmerelo> tobs`: hum, but in that case the block is created in every call...

[17:09] <lizmat> m: my $a = { say $++ }; $a() for ^10   # jmerelo: I don't think so ?

[17:09] <camelia> rakudo-moar b781f8ccd: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§¬ª

[17:10] <jmerelo> lizmat: right.

[17:10] <jmerelo> lizmat++

[17:11] <jmerelo> tobs`: the problem is that you're creating the do block every time you call g, and $ is always lexically scoped. 

[17:11] <tobs`> What I was trying to do is get a new block in each invocation of the function, which then keeps the same state during my S:g

[17:12] <jmerelo> tobs`: no can do. New block initializes state, unless you use caller state, which is probably not what you're looking for.

[17:12] <xlat> m: (my $b=buf8.allocate(10)).contents = "foo!".encode.list; say $b;

[17:12] <camelia> rakudo-moar b781f8ccd: OUTPUT: ¬´Cannot unbox a type object (Nil) to int.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:13] <xlat> m: try (my $b=buf8.allocate(10)).contents = "foo!".encode.list; say $b;

[17:13] <camelia> rakudo-moar b781f8ccd: OUTPUT: ¬´Buf[uint8]:0x<66 6F 6F 21 00 00 00 00 00 00>‚ê§¬ª

[17:14] <xlat> m: (my $b=buf8.allocate(4)).contents = "foo!".encode.list; say $b;

[17:14] <camelia> rakudo-moar b781f8ccd: OUTPUT: ¬´Buf[uint8]:0x<66 6F 6F 21>‚ê§¬ª

[17:14] <jmerelo> tobs`: anyway. Try StackOverflow, really. We're reaching 900 questions... https://stackoverflow.com/questions/tagged/perl6 And someone who's not right here right now might see it and solve it.

[17:15] <jmerelo> There are a bunch of unanswered questions there, also. For instance, this one on using certfp for authenticating IRC bots by tyil https://stackoverflow.com/questions/53692507/how-to-use-certfp-with-ircclient

[17:16] *** graphene left
[17:17] *** zacts left
[17:18] *** graphene joined
[17:19] *** p6bannerbot sets mode: +v graphene

[17:21] *** dakkar left
[17:26] *** kensanata left
[17:27] *** scimon left
[17:35] *** |oLa| left
[17:37] *** vrurg left
[17:38] *** graphene left
[17:40] *** graphene joined
[17:40] *** zacts joined
[17:40] *** p6bannerbot sets mode: +v zacts

[17:41] *** p6bannerbot sets mode: +v graphene

[17:45] *** lucasb left
[17:54] *** c1nil left
[18:03] *** jmerelo left
[18:06] *** lucasb joined
[18:06] *** p6bannerbot sets mode: +v lucasb

[18:09] *** Sigfrid joined
[18:10] *** p6bannerbot sets mode: +v Sigfrid

[18:11] *** graphene left
[18:13] *** graphene joined
[18:13] *** p6bannerbot sets mode: +v graphene

[18:25] *** sauvin left
[18:37] *** tobs` left
[18:46] *** pecastro joined
[18:47] *** p6bannerbot sets mode: +v pecastro

[18:55] *** pmurias joined
[18:55] *** p6bannerbot sets mode: +v pmurias

[18:57] *** zakharyas left
[19:20] <pmurias> timotimo: functions are not passed around as strings in js

[19:21] <pmurias> timotimo: the CORE setting is super heavy to load so the compiler and "executor" need to loaded once and together

[19:23] <El_Che> It looks like Go is getting a CPAN like infra: https://www.prnewswire.com/news-releases/jfrog-empowers-millions-of-open-source-go-developers-announces-communitys-first-public-go-repository-300764117.html

[19:27] <xinming> When I use something like  perl6 -Ilib test.p6    the test.p6 only contains the simple   use Module::Name:from<Perl5>   Why rakudo can't find the perl5 module?

[19:28] <pmurias> xinming: I don't understand the question

[19:29] <pmurias> xinming: do you have a problem with rakudo not finding your perl 5 module?

[19:30] <xinming> yes

[19:30] <xinming> hmm, seems the @INC is not changed

[19:30] <xinming> use lib doesn't change the @INC

[19:30] <pmurias> xinming: maybe the Perl 6 and Perl 5 INC paths are not shared (I didn't check)?

[19:33] <xinming> pmurias: I think I know the reason, the Inline::Perl5 doesn't use the value in perl6. so   use lib 'lib';  in test.p6 doesn't work as expected.

[19:33] <xinming> but something like  PERL5LIB="lib"  perl6 test.p6   worked.

[19:34] <xinming> I think    use lib 'lib';     won't affect Inline::Perl5 module.

[19:37] <lizmat> Inline::Perl5 is usually installed: "use lib" is intended to be used for not installed modules only

[19:41] *** Sigfrid left
[19:41] *** Sigfrid joined
[19:42] *** p6bannerbot sets mode: +v Sigfrid

[19:44] *** sergot joined
[19:45] *** p6bannerbot sets mode: +v sergot

[19:47] *** zacts left
[19:48] <b2gills> xinming: Perhaps `use lib:from<Perl5> 'lib'; useModule::Name:from<Perl5>` ?

[19:51] <lizmat> use Inline::Perl5; %*ENV<PERL5LIB> = "."; use Foo:from<Perl5>  # to load a ./Foo.pm works for me

[19:51] <lizmat> hmmm... without it as well... :-(

[19:53] <lizmat> please disregard ^^^

[19:56] *** domidumont left
[19:56] <sena_kun> m: class Wrap { has $.a; }; class A is Set {}; say A.new(Wrap.new(a => 1)) eqv A.new(Wrap.new(a => 1));

[19:56] <camelia> rakudo-moar dd2af90cc: OUTPUT: ¬´False‚ê§¬ª

[19:57] <sena_kun> how do I fix this? I see docs mention WHICH overloading, but it isn't even called when defined in `Wrap`.

[19:58] <sena_kun> hmmm, in my tiny example WHICH is called...

[19:58] * sena_kun tries again

[19:58] <masak> question: can someone define "closure" in a simple way?

[19:59] <masak> (I know what it is, I'm just looking for simple ways to describe it)

[19:59] <sena_kun> masak, piece of code + data necessary to execute it?

[19:59] <sena_kun> that's probably the simplest I can get, but it is a description of a lot of different things.

[20:00] <El_Che> a function that may references variables in the surrounding scope?

[20:01] <sena_kun> "a code block" will be a bit more precise(while being more general, yes), won't it?

[20:02] *** Sigfrid left
[20:02] <El_Che> throw anonymous somewhere

[20:02] <El_Che> in

[20:02] <masak> "a closure is a function that uses variables/names defined outside of it"

[20:03] <masak> ...maybe

[20:03] <lizmat> s/function/Callable/ ?

[20:03] <sena_kun> if you don't want to introduce "lexical" word, I think.

[20:03] <El_Che> anonymous = can be defined as a variable on a scope

[20:03] <Geth> ¬¶ doc: 98f3faa6dd | (Elizabeth Mattijsen)++ | doc/Type/Kernel.pod6

[20:03] <Geth> ¬¶ doc: Document Kernel.Endian

[20:03] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/98f3faa6dd

[20:04] <masak> lizmat: I think "function" is more precise than "Callable", actually. a Callable doesn't need to be a block of code, even. just something that can be called.

[20:05] <lizmat> m: dd WhateverCode ~~ Callable   # I guess that's true, as WhateverCode is guaranteed to not be a closure

[20:05] <camelia> rakudo-moar dd2af90cc: OUTPUT: ¬´Bool::True‚ê§¬ª

[20:05] <masak> right, good example

[20:05] <lizmat> hmmm... or is it ?  hmmm

[20:05] <masak> not in my book, no :)

[20:05] <El_Che> are loop constructions a kind of closures in p6? or not related at all?

[20:06] <masak> could you be more specific about what you're asking?

[20:07] <lizmat> m: my $a = 666; sub a() { * - $a }; dd a.(42)   # WhateverCode with closure ?

[20:07] <camelia> rakudo-moar dd2af90cc: OUTPUT: ¬´-624‚ê§¬ª

[20:07] <masak> it's a WhateverCode _in_ a closure :)

[20:07] <El_Che> for @foo -> $foo { say "block $foo" }

[20:07] <lizmat> the $a is used inside the code

[20:07] <El_Che> block accesses outside variable

[20:08] <masak> El_Che: it's only an "outside variable" visually. it's actually just a parameter to the block.

[20:08] <El_Che> masak: ah, yes, I remember now.

[20:08] <El_Che> thx

[20:08] <masak> or, perhaps better said, the block begins already at the `->` :)

[20:09] <masak> (well, there's the _block_, and then there's the _block_ block) :P

[20:09] <El_Che> func() { ... }("parameter") in other langs :)

[20:09] <El_Che> block block - who is it? - not a closure

[20:10] <masak> :P

[20:10] <masak> actually, your string "parameter" is an argument :)

[20:10] <El_Che> that's a good argument, there

[20:11] <masak> well, not to argue, but...

[20:12] * masak .oO( ...I arguee )

[20:12] <TreyHarris> Oops, I idiotically did a git pull before saving changes to a file--and that file's been edited by someone else since my last pull. Nowhere conflicting, though. I can copy the entire section I modified, revert, and paste it back in... but I feel like my mind's blanking on a better way to handle this

[20:13] <TreyHarris> (Er, sections; one above and one below the part the other commit changed. Otherwise this would be easy-peasy.)

[20:13] <masak> TreyHarris: "Save As", check out your pre-pull commit, commit, go back to tip, cherry-pick?

[20:14] <TreyHarris> masak: yep, exactly. thanks. (I'm using Magit, so that's very easy.)

[20:14] <masak> \o/

[20:14] <TreyHarris> Just had a brain-block

[20:14] <masak> I was wondering what IDE that'd be that didn't refresh the files from disk automatically when they changed :)

[20:15] <masak> still waiting for the editor that makes Git the inherent saving metaphor and abstracts away the disk itself

[20:18] *** kensanata joined
[20:18] *** p6bannerbot sets mode: +v kensanata

[20:21] <TreyHarris> masak: no, it was my own idiocy--it was my first pull since I'd created this feature branch and I'd forgotten to set the upstream--something that I know I can do with Magit but is faster on the command line, so I did it in othe command line. So Magit didn't say "whoah, there, buddy"

[20:28] *** andrzejku_ joined
[20:29] *** p6bannerbot sets mode: +v andrzejku_

[20:30] *** coet joined
[20:30] *** p6bannerbot sets mode: +v coet

[20:31] *** andrzejku_ left
[20:33] *** lichtkind joined
[20:36] *** lichtkind left
[20:36] *** lichtkind joined
[20:38] *** lichtkind left
[20:38] *** lichtkind joined
[20:39] *** p6bannerbot sets mode: +v lichtkind

[20:41] <lichtkind> p6: say <a b c> ~~ "a"

[20:42] <camelia> rakudo-moar 543219c92: OUTPUT: ¬´False‚ê§¬ª

[20:42] <lichtkind> why?

[20:42] <lichtkind> p6: say [<a b c>] ~~ "a"

[20:42] <camelia> rakudo-moar 543219c92: OUTPUT: ¬´False‚ê§¬ª

[20:42] <lichtkind> p6: say <a b c>.Set ~~ "a"

[20:42] <camelia> rakudo-moar 543219c92: OUTPUT: ¬´False‚ê§¬ª

[20:42] <gfldex> a list of Str is not a Str

[20:42] <lichtkind> p6: say (1 2 3) ~~ 3

[20:42] <camelia> rakudo-moar 543219c92: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3say (17‚èè5 2 3) ~~ 3‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§        statement modifier‚ê§        statem‚Ä¶¬ª

[20:43] <lichtkind> p6: say  (1..3) ~~ 3

[20:43] <camelia> rakudo-moar 543219c92: OUTPUT: ¬´True‚ê§¬ª

[20:43] <lichtkind> list on int is not an int

[20:43] <lichtkind> p6: say  (1,2,3) ~~ 3

[20:43] <camelia> rakudo-moar 543219c92: OUTPUT: ¬´True‚ê§¬ª

[20:44] <lucasb> you want (elem)

[20:44] <lucasb> ‚àà

[20:44] <lichtkind> lucasb, yes and i got it , but this seems to be inconsitant

[20:44] <pmurias> masak: re git editor wouldn't that create horrible commit histories?

[20:45] <gfldex> ~~ is not the most consistant operator we got indeed

[20:45] <lucasb> lichtkind: ah, sorry. I didn't realize you're showing an problem in P6

[20:46] <lichtkind> lucasb, you just rying to be helpful - all good

[20:47] <TreyHarris> I thought there was a way to stick ":skip" or suchlike into "subtest" to get the entire subtest skipped, rather than having to count the plan of the subtest and skip that number? But I can't find it.

[20:52] <tobs> lichtkind: the reason is (1..3).Int is 3 (the length of the list) whereas <a b c>.Str is not "a"

[20:52] <lichtkind> p6: say  (1,2,3) ~~ 2

[20:53] <camelia> rakudo-moar 543219c92: OUTPUT: ¬´False‚ê§¬ª

[20:53] <tobs> m: say <a b c> ~~ "a b c"

[20:53] <camelia> rakudo-moar 543219c92: OUTPUT: ¬´True‚ê§¬ª

[20:53] <lichtkind> indeed

[20:53] <lichtkind> thank you tobs

[20:53] <lichtkind> this not an smart match i imagined anymore

[20:54] <lichtkind> but at least consistant :)

[20:54] *** pmurias left
[20:54] *** pmurias joined
[20:54] *** p6bannerbot sets mode: +v pmurias

[20:58] <TreyHarris> m: say so <a b c>.contains('a b')

[20:58] <camelia> rakudo-moar 543219c92: OUTPUT: ¬´True‚ê§¬ª

[20:59] <TreyHarris> m: say so <a b c> (cont) 'a'; say so <a b c> (cont) 'a b'

[20:59] <camelia> rakudo-moar 543219c92: OUTPUT: ¬´True‚ê§False‚ê§¬ª

[20:59] <TreyHarris> I forgot until this moment that `contains` is a Str operation, not a container one

[21:04] *** yqt joined
[21:04] *** p6bannerbot sets mode: +v yqt

[21:07] <Kaiepi> wait it's a Str and not a List/Array one?

[21:07] <Kaiepi> fuck

[21:12] <gfldex> m: say <a b c> eq "a"; # <-- thats what happens inside Str.ACCEPTS

[21:12] <camelia> rakudo-moar 543219c92: OUTPUT: ¬´False‚ê§¬ª

[21:16] <Kaiepi> what's the List/Array method for checking if something exists inside an array?

[21:16] <Kaiepi> (cont)?

[21:17] <gfldex> m: say so <a b>¬ª.contains('a b'); # that's a nice riddle :)

[21:17] <camelia> rakudo-moar 543219c92: OUTPUT: ¬´True‚ê§¬ª

[21:18] <gfldex> Kaiepi: You use a set operator. They coerce to Set and do what you expect. see: https://docs.perl6.org/language/setbagmix

[21:18] <tobs> Kaiepi: (cont) will turn the array into a set. You can also use .first

[21:18] <Kaiepi> ah perfect

[21:18] <Kaiepi> thanks

[21:19] *** zakharyas joined
[21:20] *** p6bannerbot sets mode: +v zakharyas

[21:22] *** claris3 joined
[21:22] *** claris3 left
[21:22] *** jast left
[21:22] *** kst`` joined
[21:22] *** kst` left
[21:23] *** p6bannerbot sets mode: +v kst``

[21:25] *** jast joined
[21:26] *** p6bannerbot sets mode: +v jast

[21:40] *** zakharyas left
[21:52] *** Sigfrid joined
[21:52] *** p6bannerbot sets mode: +v Sigfrid

[21:53] *** xlat left
[21:55] *** kensanata left
[21:58] *** lucasb_ joined
[21:59] *** p6bannerbot sets mode: +v lucasb_

[22:04] *** kurahaupo joined
[22:04] *** lizmat left
[22:05] *** p6bannerbot sets mode: +v kurahaupo

[22:11] <sena_kun> new advent post is here. \o/

[22:14] *** Sigfrid left
[22:15] *** lucasb_ left
[22:22] *** pnu___ joined
[22:22] *** p6bannerbot sets mode: +v pnu___

[22:25] *** lizmat joined
[22:25] *** p6bannerbot sets mode: +v lizmat

[22:25] *** eiro1 joined
[22:25] *** hoelzro joined
[22:26] *** chsanch_ joined
[22:26] *** hahainte1net joined
[22:26] *** Ulti_ joined
[22:26] *** ponbiki_ joined
[22:26] *** p6bannerbot sets mode: +v eiro1

[22:26] *** p6bannerbot sets mode: +v hoelzro

[22:26] *** p6bannerbot sets mode: +v chsanch_

[22:26] *** p6bannerbot sets mode: +v hahainte1net

[22:27] <Geth> ¬¶ doc: 47847ccd0c | (Elizabeth Mattijsen)++ | doc/Type/Kernel.pod6

[22:27] <Geth> ¬¶ doc: Kernel.Endian to be called .endian

[22:27] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/47847ccd0c

[22:27] *** p6bannerbot sets mode: +v Ulti_

[22:27] *** p6bannerbot sets mode: +v ponbiki_

[22:28] *** charsbar_ joined
[22:28] *** Garland_g[m]1 joined
[22:28] *** p6bannerbot sets mode: +v Garland_g[m]1

[22:29] *** S007 joined
[22:29] *** p6bannerbot sets mode: +v S007

[22:29] *** holyghost left
[22:29] *** spacebat1 left
[22:29] *** eiro left
[22:29] *** Garland_g[m] left
[22:29] *** Demos[m] left
[22:29] *** charsbar_ is now known as charsbar

[22:29] *** pnu___ is now known as pnu__

[22:29] *** p6bannerbot sets mode: +v charsbar

[22:30] *** Sigfrid joined
[22:30] *** alpha6 joined
[22:30] *** p6bannerbot sets mode: +v Sigfrid

[22:31] *** Demos[m] joined
[22:31] *** p6bannerbot sets mode: +v Demos[m]

[22:31] *** p6bannerbot sets mode: +v alpha6

[22:31] *** spacebat1 joined
[22:31] *** john_parr left
[22:31] *** andrewalker left
[22:32] *** p6bannerbot sets mode: +v spacebat1

[22:32] *** john_parr joined
[22:33] *** p6bannerbot sets mode: +v john_parr

[22:33] *** irdr left
[22:34] *** irdr joined
[22:35] *** p6bannerbot sets mode: +v irdr

[22:36] *** andrewalker joined
[22:37] *** ponbiki_ left
[22:37] *** ponbiki joined
[22:37] *** p6bannerbot sets mode: +v andrewalker

[22:38] *** p6bannerbot sets mode: +v ponbiki

[23:06] *** Sgeo_ joined
[23:07] *** p6bannerbot sets mode: +v Sgeo_

[23:08] *** graphene left
[23:10] *** graphene joined
[23:10] *** p6bannerbot sets mode: +v graphene

[23:11] *** epony left
[23:13] <buggable> New CPAN upload: Chart-Gnuplot-0.0.9.tar.gz by TITSUKI http://modules.perl6.org/dist/Chart::Gnuplot:cpan:TITSUKI

[23:15] *** yqt left
[23:27] *** coet left
[23:29] *** vrurg joined
[23:29] *** p6bannerbot sets mode: +v vrurg

[23:33] <buggable> New CPAN upload: Chart-Gnuplot-0.0.10.tar.gz by TITSUKI http://modules.perl6.org/dist/Chart::Gnuplot:cpan:TITSUKI

[23:36] *** pmurias left
[23:43] *** cpage_ joined
[23:43] *** pecastro left
[23:43] *** p6bannerbot sets mode: +v cpage_

[23:45] *** cpage left
[23:45] *** cpage_ is now known as cpage

[23:46] *** lucasb left
[23:47] *** zacts joined
[23:47] *** p6bannerbot sets mode: +v zacts

[23:51] *** zacts left
[23:56] *** sena_kun left
[23:57] <Xliff> Is there a way to tell a CArray that it has a certain number of elements (since it was returned with a C-Struct?) 

[23:57] <Xliff> I am trying to resolve this error: "Don't know how many elements a C array returned from a library"

