[00:03] *** meltingwax joined
[00:03] *** p6bannerbot sets mode: +v meltingwax

[00:24] *** rindolf left
[00:40] *** w_richard_w joined
[00:40] *** w_richard_w left
[00:45] *** Kaiepi joined
[00:46] *** p6bannerbot sets mode: +v Kaiepi

[00:48] *** zacts joined
[00:48] *** p6bannerbot sets mode: +v zacts

[01:01] *** dduncan joined
[01:02] *** p6bannerbot sets mode: +v dduncan

[01:05] <dduncan> What are the best working examples available now for Perl 6 grammars to parse another programming language or serialization format?  I have a quasi-EBNF-rules-hybrid I made for documenting one and now I want to render it as actual Perl 6 rules that I can execute.  So I‚Äôm looking for some good examples.  As my format is like a more strongly typed JSON, an existing grammar to parse JSON is probably a good example.  Thank you.

[01:05] *** zacts left
[01:07] <dduncan> To be specific, I want to turn this https://github.com/muldis/Muldis_Object_Notation/blob/master/spec/Muldis_Object_Notation.md into a working Perl 6 grammar.

[01:08] <timotimo> JSON::Tiny has a simple grammar for parsing JSON, that's a good start

[01:09] <dduncan> Thank you.

[01:09] <timotimo> there's a module that parses ANTLR grammars and turns them into perl6 grammars

[01:09] <timotimo> buggable: eco ANTLR

[01:09] <buggable> timotimo, Found 2 results: ANTLR4::Grammar, ANTLR4::Grammar. See https://modules.perl6.org/s/ANTLR

[01:09] <timotimo> buggable: eco Grammar

[01:09] <buggable> timotimo, Found 24 results: Grammar::Debugger, ANTLR4::Grammar, ANTLR4::Grammar, Grammar::BNF, GGE. See https://modules.perl6.org/s/Grammar

[01:09] <dduncan> My grammar as seen above is a proprietary format, influenced by EBNF but actually mostly meant to look like Perl 6 rules, so it‚Äôll have to be manual conversion.

[01:10] <dduncan> Oh sorry, I understand what you meant, thank you.

[01:10] <timotimo> you could derive from ANTLR4's grammar to parse your own self-invented grammar :) :)

[01:12] <Kaiepi> unrelated but i need to learn more... creative ways to use grammars for my telnet library, is antlr4 a good way to learn that?

[01:12] <timotimo> not sure

[01:12] <Kaiepi> i need either some way to error out or some way to stop parsing if an error is found

[01:12] <timotimo> i haven't actually looked at the antlr4 implementation, nor antlr4 itself

[01:12] <timotimo> or any of the antlrs for that matter

[01:13] <Kaiepi> ah

[01:13] <timotimo> YAMLish has some error handling stuff in it

[01:13] <timotimo> or maybe only in my fork

[01:14] <Kaiepi> i'll take a look at it, thanks

[01:19] <Kaiepi> yeah there is some error handling stuff in it

[01:42] *** nadim left
[01:42] *** zacts joined
[01:42] *** p6bannerbot sets mode: +v zacts

[01:49] <Xliff> If I have a sub(&callback(int32)) is native...; how can I pass NULL as &callback without rakudo blowing up?

[01:50] <Xliff> would this work: sub(-> int32 { })

[01:51] <Xliff> Not as efficient as NULL but...

[01:52] <Xliff> I'm currently using sub(Callable), which blows up.

[01:53] <timotimo> could try with a $ sigil

[01:54] <Xliff> Would that work as a default for a wrapper?

[01:55] <Xliff> so... method wrapper (&func = $) { sub(&func) }

[01:55] <Xliff> And... no.

[01:56] *** Cabanossi left
[01:57] *** Cabanossi joined
[01:58] *** p6bannerbot sets mode: +v Cabanossi

[01:59] *** Ven`` left
[02:18] *** molaf left
[02:21] <timotimo> that's not how i meant it :)

[02:21] <timotimo> i meant to have the $ sigil in the signature itself

[02:22] <Xliff> Oh

[02:22] <Xliff> Thanks! Will try. %)

[02:22] <Xliff> timotimo: Ever heard of Rudimental?

[02:23] <Xliff> Music group

[02:23] *** vrurg left
[02:27] <timotimo> i have not, though i know like two rudiments that i can "play" on the drums

[02:28] <Xliff> :)

[02:28] <Xliff> OK. Error now is.

[02:28] <Xliff> Native call expected return type with CPointer representation, but got a P6opaque (Scalar)

[02:28] <Xliff> Which I think is coming from &func.

[02:28] <Xliff> Since &func == P6opaque

[02:29] <timotimo> interesting that it'd see the scalar rather than its inside value

[02:29] <Xliff> Callable == Uninstantiable

[02:30] <Xliff> Weird thing is that it goes through that call chain once, with no problem. Second time it reports the error.

[02:30] *** molaf joined
[02:31] *** p6bannerbot sets mode: +v molaf

[02:38] *** zacts left
[03:06] <Xliff> OK.  So if I specify NC def as sub(&func (Signature)) it will throw CPointer rep error second time through.

[03:06] <Xliff> It doesn't matter WHAT Signature is. &func can even match.

[03:07] <Xliff> But this is SECOND time around. First time around, it works.

[03:08] *** kurahaupo left
[03:08] *** kurahaupo joined
[03:08] *** kurahaupo left
[03:09] *** kurahaupo joined
[03:09] *** p6bannerbot sets mode: +v kurahaupo

[03:22] *** loops left
[03:44] *** i1nfusion left
[03:46] *** i1nfusion joined
[03:46] *** Sgeo_ joined
[03:46] *** p6bannerbot sets mode: +v i1nfusion

[03:47] *** p6bannerbot sets mode: +v Sgeo_

[03:49] *** Sgeo left
[03:49] *** loops joined
[03:50] *** p6bannerbot sets mode: +v loops

[04:12] <Xliff> Yup. Error occurs second time I run the set-function-sub

[04:12] <Xliff> Don't understand why that's a thing. It does the same thing both times.

[04:12] *** kurahaupo left
[04:41] *** atweiden-air joined
[04:42] *** p6bannerbot sets mode: +v atweiden-air

[04:48] *** zacts joined
[04:48] *** p6bannerbot sets mode: +v zacts

[04:54] *** Cabanoss- joined
[04:55] *** p6bannerbot sets mode: +v Cabanoss-

[04:55] *** Cabanossi left
[05:13] *** molaf left
[05:33] *** mowcat left
[05:33] *** ChoHag left
[05:38] *** Kaiepi left
[05:38] *** Kaiepi joined
[05:39] *** p6bannerbot sets mode: +v Kaiepi

[06:00] *** rurban joined
[06:00] *** atweiden-air left
[06:01] *** p6bannerbot sets mode: +v rurban

[06:04] *** rurban left
[06:07] *** zacts left
[06:07] *** Kaiepi left
[06:17] *** Manifest0 left
[06:17] *** Manifest0 joined
[06:18] *** p6bannerbot sets mode: +v Manifest0

[06:23] *** ryn1x joined
[06:23] *** p6bannerbot sets mode: +v ryn1x

[06:43] *** ryn1x left
[06:43] *** ryn1x joined
[06:44] *** p6bannerbot sets mode: +v ryn1x

[07:23] *** andrzejku_ joined
[07:23] *** p6bannerbot sets mode: +v andrzejku_

[07:33] *** Sgeo_ left
[07:36] *** ryn1x left
[07:39] *** Sgeo joined
[07:39] *** p6bannerbot sets mode: +v Sgeo

[07:44] *** Manifest0 left
[07:44] *** Manifest0 joined
[07:45] *** p6bannerbot sets mode: +v Manifest0

[07:49] *** dduncan left
[07:55] *** domidumont joined
[07:56] *** p6bannerbot sets mode: +v domidumont

[07:56] *** w_richard_w joined
[07:57] *** p6bannerbot sets mode: +v w_richard_w

[08:02] *** rurban joined
[08:03] *** p6bannerbot sets mode: +v rurban

[08:07] *** rurban left
[08:07] *** w_richard_w left
[08:40] *** benchable6 joined
[08:40] *** p6bannerbot sets mode: +v benchable6

[08:40] *** reportable6 joined
[08:41] *** committable6 joined
[08:41] *** squashable6 joined
[08:41] *** ChanServ sets mode: +v squashable6

[08:41] *** shareable6 joined
[08:41] *** p6bannerbot sets mode: +v reportable6

[08:41] *** p6bannerbot sets mode: +v committable6

[08:41] *** releasable6 joined
[08:41] *** ChanServ sets mode: +v releasable6

[08:42] *** p6bannerbot sets mode: +v squashable6

[08:42] *** p6bannerbot sets mode: +v shareable6

[08:42] *** jmerelo joined
[08:42] *** p6bannerbot sets mode: +v releasable6

[08:43] *** p6bannerbot sets mode: +v jmerelo

[08:43] *** molaf joined
[08:44] *** p6bannerbot sets mode: +v molaf

[08:45] *** lizmat left
[08:51] *** rindolf joined
[08:52] *** p6bannerbot sets mode: +v rindolf

[08:54] *** andrzejku_ left
[08:57] *** Manifest0 left
[08:58] *** Manifest0 joined
[08:59] *** p6bannerbot sets mode: +v Manifest0

[09:03] *** rurban joined
[09:04] *** p6bannerbot sets mode: +v rurban

[09:09] *** rurban left
[09:13] *** andrzejku_ joined
[09:13] *** p6bannerbot sets mode: +v andrzejku_

[09:31] *** Sgeo_ joined
[09:31] *** p6bannerbot sets mode: +v Sgeo_

[09:34] *** Sgeo left
[09:35] <jmerelo> m: say Mu.^methods.elems

[09:35] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´53‚ê§¬ª

[09:35] <jmerelo> m: say Mu.^methods[0].elems

[09:35] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´1‚ê§¬ª

[09:35] <jmerelo> m: say Mu.methods

[09:35] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´No such method 'methods' for invocant of type 'Mu'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:35] <jmerelo> m: say Mu.^methods

[09:35] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´(self sink ACCEPTS WHERE WHICH iterator split emit take return-rw return WHY set_why Bool so not defined new is-lazy CREATE bless BUILDALL BUILD_LEAST_DERIVED Numeric Real Str Stringy item say print put note gistseen gist perlseen perl DUMP DUMP-PIECE‚Ä¶¬ª

[09:36] <jmerelo> m: say sub.^mop

[09:36] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3say sub7‚èè5.^mop‚ê§    expecting any of:‚ê§        new name to be defined‚ê§¬ª

[09:36] <jmerelo> m: say sub.^mst

[09:36] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3say sub7‚èè5.^mst‚ê§    expecting any of:‚ê§        new name to be defined‚ê§¬ª

[09:37] <jmerelo> m: say sub.^mro

[09:37] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3say sub7‚èè5.^mro‚ê§    expecting any of:‚ê§        new name to be defined‚ê§¬ª

[09:37] <jmerelo> m: say Sub.^mro

[09:37] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´((Sub) (Routine) (Block) (Code) (Any) (Mu))‚ê§¬ª

[09:39] *** molaf left
[09:42] *** rurban joined
[09:42] *** rurban left
[09:45] <buggable> New CPAN upload: Archive-Libarchive-0.0.11.tar.gz by FRITH http://modules.perl6.org/dist/Archive::Libarchive:cpan:FRITH

[09:56] <jmerelo> m: "üëã ‚ÄÉmundo".say

[09:56] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´üëã ‚ÄÉmundo‚ê§¬ª

[09:57] <jmerelo> m: "‚òª mundo".say

[09:57] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´‚òª mundo‚ê§¬ª

[10:22] *** holyghost joined
[10:23] *** p6bannerbot sets mode: +v holyghost

[10:24] *** Sgeo__ joined
[10:25] *** p6bannerbot sets mode: +v Sgeo__

[10:27] *** Sgeo_ left
[10:34] *** Sgeo_ joined
[10:35] *** p6bannerbot sets mode: +v Sgeo_

[10:38] *** Sgeo__ left
[10:52] *** nadim joined
[10:52] *** p6bannerbot sets mode: +v nadim

[10:57] *** lizmat joined
[10:57] *** p6bannerbot sets mode: +v lizmat

[11:33] *** rurban joined
[11:34] *** p6bannerbot sets mode: +v rurban

[11:34] <jmerelo> m: say (√æor => 127).perl

[11:34] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´:√æor(127)‚ê§¬ª

[11:35] <jmerelo> m: say (foo => 127).perl

[11:35] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´:foo(127)‚ê§¬ª

[11:35] <jmerelo> m: say (foo_bar => 127).perl

[11:35] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´:foo_bar(127)‚ê§¬ª

[11:35] <jmerelo> m: say (_foobar => 127).perl

[11:35] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´:_foobar(127)‚ê§¬ª

[11:36] <jmerelo> m: say (foo-bar => 127).perl

[11:36] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´:foo-bar(127)‚ê§¬ª

[11:36] <jmerelo> m: say (foo-bar'baz => 127).perl

[11:36] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´:foo-bar'baz(127)‚ê§¬ª

[11:36] *** nadim left
[11:37] <jmerelo> m: say (foo::bar'baz => 127).perl

[11:37] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Preceding context expects a term, but found infix => instead.‚ê§at <tmp>:1‚ê§------> 3say (foo::bar'baz =>7‚èè5 127).perl‚ê§¬ª

[11:37] <jmerelo> m: say (foo:bar'baz => 127).perl

[11:37] <camelia> rakudo-moar 87698317a: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Preceding context expects a term, but found infix => instead.‚ê§at <tmp>:1‚ê§------> 3say (foo:bar'baz =>7‚èè5 127).perl‚ê§¬ª

[11:41] *** ChoHag joined
[11:42] *** p6bannerbot sets mode: +v ChoHag

[11:47] *** andrzejku_ left
[12:00] *** rurban left
[12:14] *** Sgeo_ left
[12:15] *** Sgeo_ joined
[12:15] *** p6bannerbot sets mode: +v Sgeo_

[12:25] *** Sgeo_ left
[12:25] *** Sgeo_ joined
[12:26] *** p6bannerbot sets mode: +v Sgeo_

[12:39] <Geth> ¬¶ doc: f13eb68f27 | (JJ Merelo)++ | 2 files

[12:39] <Geth> ¬¶ doc: Avoiding unwanted like wraps that make tables confusing.

[12:39] <Geth> ¬¶ doc: 

[12:39] <Geth> ¬¶ doc: Also adds example of bareword-as-key, refs #2520. Waiting for answer

[12:39] <Geth> ¬¶ doc: to [this question in SO](https://stackoverflow.com/q/53977575/891440)

[12:39] <Geth> ¬¶ doc: for precise definition of what constitutes a codeword.

[12:39] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/f13eb68f27

[12:43] *** kktt007 joined
[12:43] *** p6bannerbot sets mode: +v kktt007

[12:50] *** rurban joined
[12:50] *** rurban left
[12:56] *** kktt007 left
[13:30] *** nadim joined
[13:31] *** p6bannerbot sets mode: +v nadim

[13:35] *** jmerelo left
[14:19] *** Ven`` joined
[14:20] *** nadim left
[14:20] *** p6bannerbot sets mode: +v Ven``

[14:31] *** Sgeo_ left
[14:31] *** Sgeo_ joined
[14:32] *** p6bannerbot sets mode: +v Sgeo_

[14:44] *** sauvin left
[14:47] *** rurban joined
[14:48] *** rurban left
[15:10] *** marmor joined
[15:10] *** p6bannerbot sets mode: +v marmor

[15:17] *** sauvin joined
[15:17] *** p6bannerbot sets mode: +v sauvin

[15:24] *** rindolf left
[15:38] *** rindolf joined
[15:38] *** p6bannerbot sets mode: +v rindolf

[15:44] *** i1nfusion left
[15:45] *** natrys joined
[15:46] *** p6bannerbot sets mode: +v natrys

[15:46] *** i1nfusion joined
[15:46] *** p6bannerbot sets mode: +v i1nfusion

[15:49] *** zacts joined
[15:49] *** p6bannerbot sets mode: +v zacts

[15:55] <tbrowder> hi, #perl6!    \o/    I hope you had a Merry Christmas // Happy Holiday

[15:57] <tbrowder> granddaughters got Chromebooks from Santa (‚Äòtwasn‚Äôt my idea!)‚Äîany way to use them for p6 coding?

[15:59] <timotimo> at the very least you can use rakudo.js via 6pad, though it's still a little limited

[16:04] *** mowcat joined
[16:05] *** p6bannerbot sets mode: +v mowcat

[16:07] *** natrys left
[16:19] *** jmerelo joined
[16:20] *** p6bannerbot sets mode: +v jmerelo

[16:22] *** xinming_ joined
[16:23] *** p6bannerbot sets mode: +v xinming_

[16:25] *** xinming left
[16:30] *** ChoHag left
[16:33] <tbrowder> timotimo: thnx

[16:34] <jmerelo> tbrowder: don't they actually have some kind of linux underneath? Is there any way of getting to the command line?

[16:35] *** zakharyas joined
[16:36] <tbrowder> hi, JJ! i don‚Äôt know, but i‚Äôm going to see them this pm and will investigate

[16:36] *** p6bannerbot sets mode: +v zakharyas

[16:36] <jmerelo> tbrowder: hi!

[16:37] <El_Che> jmerelo: not without rooting, I thought

[16:38] <jmerelo> tbrowder, El_che: there seems to be something called "crouton": https://www.reddit.com/r/perl/comments/4ebhau/perl_on_a_chromebook_chromeos/

[16:55] <Geth> ¬¶ doc: 6aa90da588 | (JJ Merelo)++ | 2 files

[16:55] <Geth> ¬¶ doc: Clarify appearances of 'fat comma' refs #2520

[16:55] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/6aa90da588

[16:55] <Geth> ¬¶ doc: aa2eb63f9a | (JJ Merelo)++ | doc/Type/Pair.pod6

[16:55] <Geth> ¬¶ doc: Adds information on 'bareword' Pair declaration, closes #2520

[16:55] <synopsebot> Link: https://doc.perl6.org/type/Pair

[16:55] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/aa2eb63f9a

[17:17] *** Ven`` left
[17:17] *** Ven`` joined
[17:18] *** p6bannerbot sets mode: +v Ven``

[17:28] <jmerelo> Is there a way to see the programs in code-golf.io?

[17:28] <jmerelo> I keep circling from leaderboard to leaderboard, but finding the actual code seems impossible...

[17:29] <lizmat> jmerelo: this is discussed in https://github.com/JRaspass/code-golf/issues/6#issuecomment-450356444

[17:29] <lizmat> in short: no

[17:31] <jmerelo> lizmat: does not make a lot of sense...

[17:32] <lizmat> well... depends on how you look at it... :-)  but clearly code-golf.io is more about those who can rather than for those who can learn

[17:33] <jmerelo> the thing is, there are not that many sites that published well explained Perl 6 examples

[17:33] <jmerelo> examples.perl6.org seems a bit abandoned...

[17:35] *** khisanth_ is now known as Khisanth

[17:46] *** andrzejku_ joined
[17:47] *** p6bannerbot sets mode: +v andrzejku_

[17:52] <timotimo> there are some not so stellar examples in there, too. and categories that were obviously meant to become big courses of multiple entries and only have a few, ...

[17:52] <moritz> maybe refurbishing examples.perl6.org would be a better idea than starting new?

[17:52] <moritz> I know starting something new is alwasy more fun...

[17:56] <jmerelo> moritz: yep... 

[17:56] <jmerelo> I just created an issue today, we could start there...

[17:57] *** jmerelo left
[18:12] *** zacts left
[18:24] *** zakharyas left
[18:27] *** rindolf left
[18:40] *** rindolf joined
[18:40] *** p6bannerbot sets mode: +v rindolf

[18:48] *** zacts joined
[18:48] *** p6bannerbot sets mode: +v zacts

[19:02] *** Khisanth left
[19:16] *** Khisanth joined
[19:16] *** p6bannerbot sets mode: +v Khisanth

[19:17] *** zacts left
[19:19] *** sauvin left
[19:20] *** sauvin joined
[19:20] *** p6bannerbot sets mode: +v sauvin

[19:21] *** ryn1x joined
[19:22] *** p6bannerbot sets mode: +v ryn1x

[19:24] *** nadim joined
[19:24] *** p6bannerbot sets mode: +v nadim

[19:34] *** marmor left
[19:36] *** domidumont left
[19:40] <AlexDaniel> squashable6: next

[19:40] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in 4 days and ‚âà14 hours (2019-01-05 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[19:40] *** zacts joined
[19:40] *** p6bannerbot sets mode: +v zacts

[19:40] <AlexDaniel> weekly: better squashathon link here: https://github.com/rakudo/rakudo/wiki/TestNeeded-SQUASHathon-page

[19:40] <notable6> AlexDaniel, Noted!

[20:02] *** MilkmanDan left
[20:02] *** eseyman joined
[20:02] *** MilkmanDan joined
[20:02] *** p6bannerbot sets mode: +v MilkmanDan

[20:03] *** p6bannerbot sets mode: +v eseyman

[20:05] *** kurahaupo joined
[20:06] *** p6bannerbot sets mode: +v kurahaupo

[20:20] *** |oLa| joined
[20:21] *** p6bannerbot sets mode: +v |oLa|

[20:26] <rindolf> nadim: hey, what's new?

[20:29] *** abraxxa joined
[20:30] *** p6bannerbot sets mode: +v abraxxa

[20:41] *** ryn1x left
[20:41] *** i1nfusion left
[20:43] *** i1nfusion joined
[20:44] *** p6bannerbot sets mode: +v i1nfusion

[20:48] *** lichtkind joined
[20:49] *** p6bannerbot sets mode: +v lichtkind

[20:49] *** sena_kun joined
[20:50] *** Ven`` left
[20:50] *** p6bannerbot sets mode: +v sena_kun

[20:51] *** zacts left
[20:55] *** abraxxa left
[20:55] *** abraxxa joined
[20:56] *** p6bannerbot sets mode: +v abraxxa

[21:16] <masak> fun fact: "static" is an even stronger guarantee than "at compile time".

[21:25] *** |oLa| left
[21:27] <sena_kun> masak, may I ask for an example?

[21:28] <sena_kun> the phrase is a bit too broad to me. :S

[21:29] *** Ven`` joined
[21:29] *** p6bannerbot sets mode: +v Ven``

[21:32] *** ryn1x joined
[21:32] *** lucasb joined
[21:32] *** p6bannerbot sets mode: +v lucasb

[21:33] *** p6bannerbot sets mode: +v ryn1x

[21:33] <masak> sena_kun: to be clearer, "statically" means "what we can glean from just reading the program" (or some such)

[21:33] <masak> some things are known at compile time, but not statically

[21:35] <masak> my concrete example right now is, 007 has a (very necessary) `import * from some.module;` form -- the `*` means we just accept everything from the module's export list

[21:35] <masak> we know what we're importing from that module at compile time/BEGIN time, at the point we're compiling the import (and actually importing the things)...

[21:35] <masak> ...but we don't know it statically

[21:36] <sena_kun> masak, hmm, it seems our inferential distance is a bit too long. If "statically" as in typing, isn't it available at compile-time anyway? _Plus_ some possible stuff.

[21:37] <sena_kun> I mean, in strict+static typed language... which 007 clearly is not, of course.

[21:38] <masak> it doesn't have a clean separation between types and values, no

[21:38] <sena_kun> well, types as first-class citizens is another topic

[21:39] <masak> there's an issue https://github.com/masak/007/issues/33 which wants to layer a static type system on top of 007, a la TypeScript

[21:40] <masak> (but it's kind of low-priority, as it doesn't lie on the critical path of exploring macros)

[21:43] <sena_kun> I mean, for example, you have a strictly typed language where everything is checked at compile-time. And we can bring there in some compile-type code that will be executed too. Of course, it will be appropriately typed and checked too). Of course, static type allow you some reasoning based on that(this is what you possibly can mean with "guarantee"), but given compile-type code works the same way, just compiled more early, I don't grasp 

[21:43] <sena_kun> it. :S

[21:43] <sena_kun> I wonder if there are some prerequisites for it. :)

[21:44] <sena_kun> s/type allow/types allow/

[21:57] *** Cabanoss- left
[21:58] *** Cabanossi joined
[21:58] *** p6bannerbot sets mode: +v Cabanossi

[22:01] <loops> m: sub x() { KEEP print 2 ; print 1 } ; x

[22:01] <camelia> rakudo-moar 01d2e11c8: OUTPUT: ¬´12¬ª

[22:02] <loops> m: sub x() { KEEP print 2  } ; x

[22:02] <camelia> rakudo-moar 01d2e11c8: ( no output )

[22:02] <loops> ^^ seems odd

[22:02] <timotimo> well, how can KEEP know what it'll return before it gets executed?

[22:03] <loops> timotimo: isn't the invocation of the sub enough?

[22:03] <timotimo> no, keep only runs when the containing scope has been left with "success"

[22:03] <timotimo> m: sub x() { KEEP print 2; 0 }; x

[22:03] <camelia> rakudo-moar 01d2e11c8: OUTPUT: ¬´2¬ª

[22:03] <loops> so returning from an empty sub is not success

[22:03] <timotimo> m: sub x() { KEEP print 2; Nil }; x

[22:03] <camelia> rakudo-moar 01d2e11c8: ( no output )

[22:04] <loops> got it..

[22:04] <timotimo> m: sub x() { KEEP print 2 }; say x

[22:04] <camelia> rakudo-moar 01d2e11c8: OUTPUT: ¬´Nil‚ê§¬ª

[22:04] <loops> thanks.

[22:04] <timotimo> m: sub x() { return 1; KEEP print 2 }; say x

[22:04] <camelia> rakudo-moar 01d2e11c8: OUTPUT: ¬´21‚ê§¬ª

[22:04] <timotimo> m: sub x() { return Nil; KEEP print 2 }; say x

[22:04] <camelia> rakudo-moar 01d2e11c8: OUTPUT: ¬´Nil‚ê§¬ª

[22:04] *** abraxxa left
[22:04] *** abraxxa joined
[22:04] <loops> timotimo: makes sense, it's not odd at all :-)

[22:05] <timotimo> we don't quite have time travel down yet

[22:05] <loops> timotimo: i'm not sure what you mean by that... but I got it.. the empty sub returns Nil, which isn't successful

[22:05] *** p6bannerbot sets mode: +v abraxxa

[22:05] <loops> timotimo: and KEEP only runs on success

[22:06] <timotimo> it's not an empty sub when it has a KEEP in it

[22:07] <timotimo> but the KEEP only runs until after the return value has been determined, so it can't contribute to it

[22:07] <loops> timotimo: empty except for the KEEP *

[22:07] <timotimo> and KEEP itself evaluates to Nil, and since it's the last thing in the sub, that gets returned

[22:07] <loops> timotimo: ah, that's an interesting detail.

[22:17] *** abraxxa left
[22:17] *** abraxxa joined
[22:17] *** rurban joined
[22:18] *** p6bannerbot sets mode: +v abraxxa

[22:18] *** p6bannerbot sets mode: +v rurban

[22:19] *** kurahaupo left
[22:27] *** andrzejku_ left
[22:29] <lizmat> and yet another Perl 6 weekly hits the Net: https://p6weekly.wordpress.com/2018/12/30/2018-53-goodbye-perljam/

[22:30] <tadzik> :((

[22:31] <timotimo> :(

[22:31] <lizmat> yeah  :-(

[22:33] <masak> :(

[22:33] *** abraxxa left
[22:34] *** ryn1x left
[22:35] *** Manifest0 left
[22:35] *** abraxxa joined
[22:36] *** Manifest0 joined
[22:36] *** rurban left
[22:36] *** p6bannerbot sets mode: +v abraxxa

[22:36] *** p6bannerbot sets mode: +v Manifest0

[22:42] *** abraxxa left
[22:42] *** abraxxa joined
[22:43] *** p6bannerbot sets mode: +v abraxxa

[22:51] *** Herby_ joined
[22:51] *** abraxxa left
[22:52] *** p6bannerbot sets mode: +v Herby_

[22:52] *** Herby_ left
[22:53] *** abraxxa joined
[22:54] *** p6bannerbot sets mode: +v abraxxa

[22:54] *** zacts joined
[22:54] *** p6bannerbot sets mode: +v zacts

[22:55] *** zacts left
[22:56] *** zacts joined
[22:56] *** p6bannerbot sets mode: +v zacts

[22:56] *** abraxxa left
[22:57] *** abraxxa joined
[22:58] *** p6bannerbot sets mode: +v abraxxa

[23:00] *** abraxxa left
[23:04] *** abraxxa joined
[23:04] *** Manifest0 left
[23:04] *** Manifest0 joined
[23:04] *** p6bannerbot sets mode: +v abraxxa

[23:05] *** p6bannerbot sets mode: +v Manifest0

[23:15] <buggable> New CPAN upload: Hash-Agnostic-0.0.4.tar.gz by ELIZABETH http://modules.perl6.org/dist/Hash::Agnostic:cpan:ELIZABETH

[23:16] *** |oLa| joined
[23:17] *** p6bannerbot sets mode: +v |oLa|

[23:24] *** rindolf left
[23:27] <jnthn> masak: Where did you find such a narrow definition of "statically", ooc? I've never consider it that narrow.

[23:29] <masak> dunno. it's also entirely possible that I'm wrong about the definition.

[23:30] <jnthn> We'd probably agree Java is statically typed, and it has the * thing going on in imports too :)

[23:30] * sena_kun .oO ( and those imports don't exist )

[23:31] <masak> hmm.

[23:31] <sena_kun> m: grammar A { token TOP { <value> } proto token value {*}; token value:sym<a> { 'a' }; token a-value { #'( PSEUDOCODE HERE -> ) <value:a> } }

[23:31] <camelia> rakudo-moar 420abcb97: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Strange text after block (missing semicolon or comma?)‚ê§at <tmp>:1‚ê§------> 3grammar A { token TOP { <value> }7‚èè5 proto token value {*}; token value:sym<‚ê§    expecting any of:‚ê§        infix‚Ä¶¬ª

[23:31] <masak> I wasn't talking about "statically typed" at all, just the notion of some knowledge being static.

[23:32] <sena_kun> is there a way to reference a particular rule under proto, not proto rule itself?

[23:32] <masak> but I also realize that my example was a bit wobbly, since... likely one *does* have access, statically, to the imported module, and then everything's analyzable again.

[23:32] <timotimo> sena_kun: i'd assume you could use its full name?

[23:32] <masak> you can, IIRC

[23:32] <sena_kun> timotimo, as in? `<value:a>`?

[23:32] <sena_kun> let me try it...

[23:33] <timotimo> probably <value:sym<a>>

[23:33] <sena_kun> hmm, I tried this iirc... let me check again

[23:33] <masak> m: grammar G { regex TOP { <x:y> }; proto regex x { * }; regex x:y { "y" } }; say ?G.parse("y")

[23:33] <camelia> rakudo-moar 420abcb97: OUTPUT: ¬´True‚ê§¬ª

[23:33] <masak> ^

[23:34] <sena_kun> ok, at least it compiles ok. \o/

[23:34] <sena_kun> timotimo, masak: thanks.

[23:35] <sena_kun> though Comma seems to get `sym` part in `<value:sym<number>>` as a sub call. :)

[23:35] <masak> 'night, #perl6

[23:35] <timotimo> oh, with a colon? that's a little funky :)

[23:35] <sena_kun> masak, night. o/

[23:35] <jnthn> sena_kun: That's 'cus I didn't fix that ticket you filed about it a while ago :P

[23:35] <jnthn> masak: o/

[23:35] <sena_kun> lol

[23:36] <jnthn> Maybe next week...should be a nice gentle back-to-work task for me :)

[23:39] <sena_kun> It might be. I also filled a ticket regarding regexes rename, will be nice for me to fix too. Spent almost all evening on a certain grammar implementation and it's night already.

[23:40] <jnthn> :)

[23:42] *** lucasb left
[23:56] *** sena_kun left
[23:57] *** zacts left
