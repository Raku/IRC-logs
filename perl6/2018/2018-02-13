[00:06] *** bdmatatu left
[00:13] *** mtj_ joined
[00:36] *** markong left
[00:36] *** cdg joined
[00:39] *** pierre__ joined
[00:40] *** cdg_ left
[00:41] *** cdg left
[00:42] *** pierre__ left
[00:42] *** pierre__ joined
[00:54] *** cdg joined
[00:58] *** cdg left
[01:19] *** rgrau left
[01:20] *** Bucciarati left
[01:20] *** jkramer left
[01:20] *** jkramer joined
[01:20] *** Bucciarati joined
[01:20] *** Gothmog_ left
[01:20] *** Gothmog_ joined
[01:21] *** rgrau joined
[01:30] *** aborazmeh joined
[01:30] *** aborazmeh left
[01:30] *** aborazmeh joined
[01:32] *** pierre__ left
[01:38] *** pierre__ joined
[01:39] <sacomo> is there anyway to re-export an imported module symboles similar to S11's :EXPORT http://design.perl6.org/S11.html.

[01:43] *** pierre__ left
[01:46] *** pierre__ joined
[01:51] *** nativecallable6 left
[01:51] *** nativecallable6 joined
[01:59] *** jeromelanteri joined
[02:05] <sacomo> nm, https://www.nntp.perl.org/group/perl.perl6.users/2017/01/msg3118.html

[02:13] *** konsolebox left
[02:15] *** zeddyk left
[02:16] *** konsolebox joined
[02:21] *** beatdown left
[02:47] *** ilbot3 left
[02:49] *** konsolebox left
[02:50] *** konsolebox joined
[02:55] *** dogbert11 joined
[02:56] *** ilbot3 joined
[02:56] *** ChanServ sets mode: +v ilbot3

[02:57] *** dogbert17 left
[03:00] *** cdg joined
[03:05] *** cdg left
[03:07] *** cdg joined
[03:07] *** xenotrope left
[03:08] *** xenotrope joined
[03:16] *** aborazmeh left
[03:19] *** pierre__ left
[03:30] *** pierre__ joined
[03:48] <ZzZombo> m: sub x{say CALLER.WHO};x

[03:48] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´PseudoStash.new((!UNIT_MARKER => (!UNIT_MARKER), $! => Nil, $/ => Nil, $=finish => (Mu), $=pod => [], $?PACKAGE => (GLOBAL), $_ => (Any), $¬¢ => Nil, &x => sub x () { #`(Sub|58496384) ... }, ::?PACKAGE => (GLOBAL), EXPORT => (EXPORT), GLOBALish => (GL‚Ä¶¬ª

[03:49] <ZzZombo> m: sub x{say CALLER.WHO};class A{our $a=1;my $b=2;has $!a='a';method m{x}};A.x;A.new.x

[03:49] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´No such method 'x' for invocant of type 'A'. Did you mean 'm'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[03:49] <ZzZombo> m: sub x{say CALLER.WHO};class A{our $a=1;my $b=2;has $!a='a';method m{x}};A.m;A.new.m

[03:49] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´PseudoStash.new(($! => Nil, $*DISPATCHER => (MethodDispatcher), $/ => Nil, $_ => (Any), $¬¢ => Nil, %_ => (Mu), self => (Mu)))‚ê§PseudoStash.new(($! => Nil, $*DISPATCHER => (MethodDispatcher), $/ => Nil, $_ => (Any), $¬¢ => Nil, %_ => (Mu), self => (M‚Ä¶¬ª

[03:49] <ZzZombo> m: sub x{say CALLER.WHO};class A{our $a=1;my $b=2;has $!a='a';method m{x}};A.new.m

[03:49] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´PseudoStash.new(($! => Nil, $*DISPATCHER => (MethodDispatcher), $/ => Nil, $_ => (Any), $¬¢ => Nil, %_ => (Mu), self => (Mu)))‚ê§¬ª

[03:50] *** konsolebox left
[03:50] *** konsolebox joined
[04:09] *** cdg left
[04:09] *** cdg joined
[04:09] *** Cabanossi left
[04:10] *** Cabanossi joined
[04:11] *** aindilis left
[04:14] *** cdg left
[04:15] *** konsolebox left
[04:16] *** konsolebox joined
[04:25] *** skids left
[04:27] *** pierre__ left
[04:29] *** pierre__ joined
[04:46] *** pierre__ left
[04:49] *** aindilis joined
[04:55] *** pierre__ joined
[04:55] *** eliasr left
[04:59] *** konsolebox left
[04:59] *** pierre__ left
[05:01] *** konsolebox joined
[05:13] *** pierre__ joined
[05:21] *** pierre__ left
[05:31] *** pierre__ joined
[05:34] *** konsolebox left
[05:35] *** khw left
[05:35] *** konsolebox joined
[05:35] *** khw joined
[05:36] *** pierre__ left
[05:39] *** troys left
[05:39] *** khw left
[05:44] <Xliff> Off the cuff, does anyone know if Markdown can handle MathML?

[05:44] *** AlexDaniel left
[05:45] *** curan joined
[05:50] *** pierre__ joined
[05:53] *** pierre__ left
[05:54] *** pierre__ joined
[06:03] *** konsolebox left
[06:07] *** dj_goku left
[06:09] *** dj_goku joined
[06:09] *** dj_goku left
[06:09] *** dj_goku joined
[06:10] *** konsolebox joined
[06:12] *** releasable6 left
[06:13] *** releasable6 joined
[06:13] *** jeromelanteri left
[06:23] <Geth> ¬¶ doc: 07a53bd4af | (JJ Merelo)++ | doc/Language/syntax.pod6

[06:23] <Geth> ¬¶ doc: Fixes grammar

[06:23] <Geth> ¬¶ doc: 

[06:23] <Geth> ¬¶ doc: Closes 1769

[06:23] <synopsebot> Link: https://doc.perl6.org/language/syntax

[06:23] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/07a53bd4af

[06:23] <Geth> ¬¶ doc: d905dfbc0e | (JJ Merelo)++ | doc/Type/Seq.pod6

[06:23] <Geth> ¬¶ doc: Fixes error closes #1768

[06:23] <synopsebot> Link: https://doc.perl6.org/type/Seq

[06:23] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/d905dfbc0e

[06:24] *** wamba joined
[06:29] *** darutoko joined
[06:32] *** lowbro joined
[06:32] *** lowbro left
[06:32] *** lowbro joined
[06:45] *** pierre__ left
[06:46] *** pierre__ joined
[06:51] <Geth> ¬¶ doc: 48677e0524 | (JJ Merelo)++ | doc/Language/syntax.pod6

[06:51] <Geth> ¬¶ doc: Fixes some grammar around error

[06:51] <Geth> ¬¶ doc: 

[06:51] <Geth> ¬¶ doc: Mainly to close #1769; also closes #1776 which was a duplicate.

[06:51] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/48677e0524

[06:51] <synopsebot> Link: https://doc.perl6.org/language/syntax

[06:53] <Geth> ¬¶ doc: 3af55c6c9a | (JJ Merelo)++ | doc/Type/Seq.pod6

[06:53] <synopsebot> Link: https://doc.perl6.org/type/Seq

[06:53] <Geth> ¬¶ doc: Fixes grammar

[06:53] <Geth> ¬¶ doc: 

[06:53] <Geth> ¬¶ doc: Fixes #1775

[06:53] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/3af55c6c9a

[06:58] *** konsolebox left
[07:00] *** konsolebox joined
[07:17] *** pierre__ left
[07:20] *** espadrine left
[07:36] *** lalitmee joined
[07:41] *** pierre__ joined
[07:49] *** lalitmee left
[07:53] *** pierre__ left
[07:56] *** wolfshield joined
[07:58] *** xinming joined
[08:01] <wolfshield> I have a function which gets an object from a factory method. The factory loads the class at runtime. When the object is eventually garbage collected, DESTROY can no longer find the symbol. How do I suppress the WARNING from this Failure?

[08:01] <wolfshield> WARNING: unhandled Failure detected in DESTROY. If you meant to ignore it, you can mark it as handled by calling .Bool, .so, .not, or .defined methods. The Failure was: No such symbol 'Source3::Exporter::VetSuccessExporter'

[08:10] *** wamba left
[08:11] <moritz> wolfshield: after you do a lookup of the symbol, type-check it against Failure, and only do your thing if it's not Failure

[08:20] *** pierre__ joined
[08:21] *** dct_ joined
[08:34] *** dakkar joined
[08:34] *** char_var[buffer] left
[08:34] *** daviddavis_ joined
[08:39] <wolfshield> thanks, moritz. added a check for ~~ Failure, but still get the WARNING from the gc. It's not when the object is created that there is a problem, but when it eventually gets collected. Somehow the module required in the factory is not available to the gc.

[08:39] <Xliff> wolfshield: Can you pastebin some code?

[08:40] *** readers_digest joined
[08:40] *** readers_digest left
[08:41] *** ReadersDigest joined
[08:42] *** wamba joined
[08:42] *** Kaffe left
[08:42] *** sena_kun joined
[08:45] <daviddavis_> Hey there! I've been messing around with IO::Socket::Async and was taking a look at how to test it. I was trying to test it using a single tes script with something like the example within the perl6 docs but using a promise to start the listener and then have an IO::Socket::Async connect to it afterwards. Although it seems when I try and do this in one script I get connection refused. Can someone tell my what I am missing here?

[08:45] <daviddavis_> This is what I have written looks like https://pastebin.com/ZqxBPFCM

[08:46] <moritz> daviddavis_: the mock server starts one second after you try to connect to it

[08:46] <moritz> daviddavis_: because you delay it with Promise.in(1)

[08:47] <moritz> the proper way would be to have a Promise that is fulfilled when the Mock server has started

[08:47] <moritz> await that

[08:47] <moritz> and only then run the test code

[08:47] <moritz> disclaimer: Async is not my strength :-)

[08:48] <moritz> I'm more into regexes and grammars and that stuff

[08:51] *** zakharyas joined
[09:14] *** psychoslave joined
[09:35] *** tchala joined
[09:35] <tchala> hello

[09:35] *** vichib joined
[09:36] *** vichib left
[09:36] *** reportable6 left
[09:36] *** reportable6 joined
[09:36] *** ChanServ sets mode: +v reportable6

[09:37] *** vichib joined
[09:37] *** tchala left
[09:37] *** lalitmee joined
[09:37] *** vichib left
[09:37] *** vichib joined
[09:38] *** vichib left
[09:39] *** vichib joined
[09:39] *** vichib left
[09:40] *** vichib joined
[09:41] *** vichib left
[09:41] *** vichib joined
[09:42] *** vichib left
[09:42] *** vichib joined
[09:43] *** vichib left
[09:44] *** vichib joined
[09:44] *** vichib left
[09:45] *** vichib joined
[09:45] *** vichib left
[09:46] *** vichib joined
[09:47] *** vichib left
[09:47] *** vichib joined
[09:47] *** konsolebox left
[09:48] *** vichib left
[09:48] *** vichib joined
[09:49] *** konsolebox joined
[09:49] *** vichib left
[09:49] *** vichib joined
[09:50] *** vichib left
[09:54] *** konsolebox left
[09:56] *** konsolebox joined
[09:56] *** aindilis left
[09:57] *** aindilis joined
[10:04] <jnthn> daviddavis_: https://github.com/jnthn/p6-test-io-socket-async may be of interest

[10:22] *** chansen_ left
[10:22] *** chansen_ joined
[10:34] *** zakharyas left
[10:35] *** ggherdov left
[10:36] *** lalitmee left
[10:37] *** ggherdov joined
[10:39] *** pnu__ left
[10:39] *** pnu__ joined
[10:39] *** zakharyas joined
[10:39] *** lalitmee joined
[10:40] <stmuk> https://www.reddit.com/r/perl6/comments/7x8kfw/rakudo_star_201801_mac_and_windows_64_bit/

[10:40] <yoleaux> 12 Feb 2018 02:54Z <AlexDaniel> stmuk: fwiw https://irclog.perlgeek.de/perl6/2018-02-12#i_15806100

[10:42] <stmuk> hmmm https://github.com/zostay/perl6-IO-Glob/issues/7 

[10:43] *** Kaffe joined
[10:45] *** TEttinger left
[10:52] *** lalit joined
[10:53] *** pierre__ left
[10:55] *** lalitmee left
[10:59] *** psychoslave left
[11:01] *** rindolf joined
[11:02] *** psychoslave joined
[11:04] *** psychoslave left
[11:10] *** cdg joined
[11:14] *** cdg left
[11:14] *** zeddy_k joined
[11:15] *** wolfshield left
[11:21] *** konsolebox left
[11:22] *** zakharyas left
[11:23] *** zakharyas joined
[11:26] *** amalia___ left
[11:26] *** amalia___ joined
[11:35] <Geth> ¬¶ doc: cc6dd340d9 | (JJ Merelo)++ | doc/Type/Exception.pod6

[11:35] <Geth> ¬¶ doc: Use print (converts to String) not say (uses gist)

[11:35] <Geth> ¬¶ doc: 

[11:35] <synopsebot> Link: https://doc.perl6.org/type/Exception

[11:35] <Geth> ¬¶ doc: Here's [the explanation](https://docs.perl6.org/language/faq#How_and_why_do_say,_put_and_print_differ?) Refs #1770

[11:35] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/cc6dd340d9

[11:35] <Geth> ¬¶ doc: 3c5b5c0799 | (JJ Merelo)++ | doc/Type/X/AdHoc.pod6

[11:35] <Geth> ¬¶ doc: Changes say to print

[11:35] <synopsebot> Link: https://doc.perl6.org/type/X::AdHoc

[11:35] <Geth> ¬¶ doc: 

[11:35] <Geth> ¬¶ doc: Closes #1770

[11:35] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/3c5b5c0799

[11:37] *** lalit left
[11:40] *** konsolebox joined
[11:47] *** zeddy_k left
[11:47] *** zeddy_k joined
[11:47] *** zakharyas left
[11:49] *** zakharyas joined
[11:53] *** markong joined
[11:54] *** konsolebox left
[11:56] *** konsolebox joined
[12:04] *** zakharyas left
[12:05] *** zakharyas joined
[12:08] *** rodarmor left
[12:09] *** rodarmor joined
[12:14] *** konsolebox left
[12:15] *** konsolebox joined
[12:20] *** zakharyas left
[12:20] *** konsolebox left
[12:22] *** konsolebox joined
[12:24] <Xliff> Any suggestions? Please feel free to comment -- https://gist.github.com/Xliff/5b8f8a7bd2ca9f9087c04895ee9630b6

[12:24] *** notable6 left
[12:24] *** notable6 joined
[12:24] *** ChanServ sets mode: +v notable6

[12:25] <moritz> Xliff: are you aware of "rule" instead of "token" automatically inserting <.ws> for you?

[12:27] *** wamba left
[12:38] <Xliff> moritz++: YES! I knew I was missing something!

[12:40] <Xliff> Ah! But I don't necessarily want :sigspace

[12:41] <Xliff> Mainly because my coding style is more vertical.

[12:41] <Xliff> I hate having to hori-scroll.

[12:42] *** pierre__ joined
[12:42] <Xliff> So if this was in a rule: "[ 'UNIQUE' ]? 'INDEX'" would it match any of the following - "UNIQUE INDEX", "UNIQUE  INDEX", "INDEX"

[12:42] <Xliff> I guess I could try.... :P

[12:43] <moritz> it would be equivalent to [ 'UNIQUE' <.ws>]? 'INDEX'

[12:43] <moritz> afaict

[12:44] <Xliff> m: my rule ui { [ 'UNIQUE' ]? 'INDEX' }; my @a = ("UNIQUE INDEX", "UNIQUE  INDEX", "INDEX"); say @a.any ~~ &ui;

[12:44] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´ÔΩ¢UNIQUE INDEXÔΩ£‚ê§ÔΩ¢UNIQUE  INDEXÔΩ£‚ê§ÔΩ¢INDEXÔΩ£‚ê§¬ª

[12:44] <Xliff> m: my rule ui { [ 'UNIQUE' ]? 'INDEX' }; my @a = ("UNIQUE INDEX", "UNIQUE  INDEX", "INDEX"); say @a.all ~~ &ui;

[12:44] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´ÔΩ¢UNIQUE INDEXÔΩ£‚ê§ÔΩ¢UNIQUE  INDEXÔΩ£‚ê§ÔΩ¢INDEXÔΩ£‚ê§¬ª

[12:44] <Xliff> \o/

[12:48] <ZzZombo> m: class C { COMPOSE { say '???' } }

[12:48] <camelia> rakudo-moar ad8823eed: ( no output )

[12:48] <ZzZombo> m: class C { BLA { say '???' } }

[12:48] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    BLA used at line 1‚ê§‚ê§¬ª

[12:48] <Xliff> moritz: What is your github name?

[12:49] <Xliff> m: class C { COMPOSE { say '???' } }; C.new

[12:49] <camelia> rakudo-moar ad8823eed: ( no output )

[12:49] <Xliff> *shrug*

[12:50] <moritz> Xliff: moritz

[12:52] <Xliff> Cool. Credit where credit is due. I am kinda doing this as a step by step tutorial, at least for the CREATE part.

[13:03] *** tyil is now known as tjil

[13:03] *** tjil is now known as tyil

[13:12] *** Zoffix joined
[13:12] <Zoffix> There used to be a listing of available Rakudo env vars in the docs here: https://docs.perl6.org/programs.html Anyone know what happend to them

[13:14] <El_Che> https://docs.perl6.org/language/variables#Dynamic_variables ?

[13:18] <Zoffix> So now they've been moved to TWO pages on the Wiki https://github.com/rakudo/rakudo/wiki/dev-env-vars and https://github.com/rakudo/rakudo/wiki/Running-rakudo-from-the-command-line  and the latter lists the PERL6_ env vars too, not just rakudo once.

[13:18] <Zoffix> I don't see how exactly this helps our users.

[13:21] *** psychoslave joined
[13:22] <moritz> ask jjmerelo on github, on commit 7cd9320474dfa266a6ac26a10020e078cae83314 ?

[13:23] <Zoffix> I'm writing a comment on the Issue that commit references./

[13:27] * Xliff wishes there was a way to use given/when in a rule {}...

[13:28] *** lizmat joined
[13:30] <Zoffix> moritz: is there a version of method-call form for doing `token foo { <bar> }` ?  The other day I was trying to make a match inside a block and while `token foo { { 42 ?? self.bar !! self.ber } }` worked, it doesn't set the capture in `$/`. Is there a way to set it? (IIRC I tried doing `$/<foo> = self.foo` but that didn't work out)

[13:34] <jnthn> [ <?{ 42 }> <bar> || <ber> ]

[13:36] <Zoffix> jnthn: hmm.. I want to call stuff from inside the block. Basically, was trying to modify the value of a dynvar, but only if another var had a specific value. Ended up doing it like this: https://github.com/rakudo/rakudo/commit/1c894e418d69f6dfb65d13d87ea1e3e7ac689d4f#diff-d3980092fdbde9a1dd4a30438f8dba19

[13:37] <Zoffix> I imagined something like  ... { if $*SCOPE eq 'has' { my $*HAS_SELF; self.match-stuff } else { self.match-stuff } } ...

[13:39] *** khw joined
[13:39] <Zoffix> ahhh

[13:40] <Zoffix> m: grammar { token TOP($v) { <m={ $v ?? self.foo !! self.bar }> }; token foo { {say "matching foo" } \d+ }; token bar { {say "matching bar"} a+ } }.parse("42", :args[42]).say

[13:40] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´matching foo‚ê§ÔΩ¢42ÔΩ£‚ê§ m => ÔΩ¢42ÔΩ£‚ê§¬ª

[13:40] <Zoffix> This does the trick, I guess

[13:40] <Zoffix> m: grammar { token TOP($v) { <m={ $v ?? self.foo !! self.bar }> }; token foo { {say "matching foo" } \d+ }; token bar { {say "matching bar"} a+ } }.parse("42", :args[0]).say

[13:40] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´matching bar‚ê§5===SORRY!5=== Error while compiling /home/camelia/EVAL_0‚ê§Null regex not allowed‚ê§at /home/camelia/EVAL_0:1‚ê§------> 3anon regex { 7‚èè5}‚ê§¬ª

[13:40] <Zoffix> m: grammar { token TOP($v) { <m={ $v ?? self.foo !! self.bar }> }; token foo { {say "matching foo" } \d+ }; token bar { {say "matching bar"} a+ } }.parse("aaa", :args[0]).say

[13:40] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´matching bar‚ê§ÔΩ¢aaaÔΩ£‚ê§ m => ÔΩ¢aaaÔΩ£‚ê§¬ª

[13:40] <Zoffix> .oO( except for the "null regex" bit :/

[13:47] <Xliff> m: grammar { token TOP($v) { <m={ $v ?? self.foo !! self.bar }> }; token foo { {say "matching foo" } \d+ }; token bar { {say "matching bar"} a+ } }.parse("", :args[0]).say

[13:48] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´matching bar‚ê§5===SORRY!5=== Error while compiling /home/camelia/EVAL_0‚ê§Null regex not allowed‚ê§at /home/camelia/EVAL_0:1‚ê§------> 3anon regex { 7‚èè5}‚ê§¬ª

[13:48] <Xliff> m: grammar { token TOP($v) { <m={ $v ?? self.foo !! self.bar }> }; token foo { {say "matching foo" } \d+ }; token bar { {say "matching bar"} a+ } }.parse("a", :args[0]).say

[13:48] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´matching bar‚ê§ÔΩ¢aÔΩ£‚ê§ m => ÔΩ¢aÔΩ£‚ê§¬ª

[13:49] <Xliff> O_o? Why bar and not foo?

[13:50] <Zoffix> $v is false

[13:50] <Xliff> Oh. W8.

[13:50] <Xliff> m: grammar { token TOP($v) { <m={ $v ?? self.foo !! self.bar }> }; token foo { {say "matching foo" } \d+ }; token bar { {say "matching bar"} a+ } }.parse("a", :args[1]).say

[13:50] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´matching foo‚ê§5===SORRY!5=== Error while compiling /home/camelia/EVAL_0‚ê§Null regex not allowed‚ê§at /home/camelia/EVAL_0:1‚ê§------> 3anon regex { 7‚èè5}‚ê§¬ª

[13:50] <Xliff> m: grammar { token TOP($v) { <m={ $v ?? self.foo !! self.bar }> }; token foo { {say "matching foo" } \d+ }; token bar { {say "matching bar"} a+ } }.parse("a", :args[0]).say

[13:50] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´matching bar‚ê§ÔΩ¢aÔΩ£‚ê§ m => ÔΩ¢aÔΩ£‚ê§¬ª

[13:50] *** cdg joined
[13:50] <Xliff> m: grammar { token TOP($v) { <m={ $v ?? self.foo !! self.bar }> }; token foo { {say "matching foo" } \d+ }; token bar { {say "matching bar"} a+ } }.parse("1", :args[0]).say

[13:50] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´matching bar‚ê§5===SORRY!5=== Error while compiling /home/camelia/EVAL_0‚ê§Null regex not allowed‚ê§at /home/camelia/EVAL_0:1‚ê§------> 3anon regex { 7‚èè5}‚ê§¬ª

[13:51] <Xliff> m: grammar { token TOP($v) { <m={ $v ?? self.foo !! self.bar }> }; token foo { {say "matching foo" } \d+ }; token bar { {say "matching bar"} a+ } }.parse("11", :args[0]).say

[13:51] *** AlexDaniel joined
[13:51] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´matching bar‚ê§5===SORRY!5=== Error while compiling /home/camelia/EVAL_0‚ê§Null regex not allowed‚ê§at /home/camelia/EVAL_0:1‚ê§------> 3anon regex { 7‚èè5}‚ê§¬ª

[13:51] <Xliff> 'kaaaa

[13:51] <Xliff> m: grammar { token TOP($v) { <m={ $v ?? self.foo !! self.bar }> }; token foo { {say "matching foo" } \d+ }; token bar { {say "matching bar"} a+ } }.parse("11", :args[1]).say

[13:51] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´matching foo‚ê§ÔΩ¢11ÔΩ£‚ê§ m => ÔΩ¢11ÔΩ£‚ê§¬ª

[13:52] <Zoffix> I think it's wrong and it's trying to use the Match object returned by the method as a regex or something

[13:52] <Xliff> So yes, this is a contrived example. I have a hard time seeing how this construct would be usable in code. Too likely to crash based on the parse string and :$args

[13:54] <Xliff> m: grammar { token TOP($v) { <m={ $v ?? /\d+/ !! /\a+/ }> }; }.parse("11", :args[1]).say

[13:54] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unrecognized backslash sequence: '\a'‚ê§at <tmp>:1‚ê§------> 3{ token TOP($v) { <m={ $v ?? /\d+/ !! /\7‚èè5a+/ }> }; }.parse("11", :args[1]).say‚ê§    expecting any of:‚ê§        term‚ê§¬ª

[13:54] <Xliff> m: grammar { token TOP($v) { <m={ $v ?? /\d+/ !! /a+/ }> }; }.parse("11", :args[1]).say

[13:54] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´ÔΩ¢11ÔΩ£‚ê§ m => ÔΩ¢11ÔΩ£‚ê§¬ª

[13:54] <Xliff> m: grammar { token TOP($v) { <m={ $v ?? /\d+/ !! /a+/ }> }; }.parse("11", :args[0]).say

[13:54] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´Nil‚ê§¬ª

[13:54] <Xliff> m: grammar { token TOP($v) { <m={ $v ?? /\d+/ !! /a+/ }> }; }.parse("aa", :args[0]).say

[13:54] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´ÔΩ¢aaÔΩ£‚ê§ m => ÔΩ¢aaÔΩ£‚ê§¬ª

[13:54] <Xliff> I think you are correct, sir.

[13:54] <Xliff> ^^ Zoffix

[13:55] *** ribasushi left
[13:55] *** cdg left
[13:56] <Zoffix> m: grammar { token TOP($v) { <m=( $v ?? self.foo !! self.bar )> }; token foo { {say "matching foo" } \d+ }; token bar { {say "matching bar"} a+ } }.parse("42", :args[0]).say

[13:56] <camelia> rakudo-moar ad8823eed: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in metachar:sym<assert>; couldn't find final '>' (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> 3grammar { token TOP($v) { <m=7‚èè5( $v ?? self.foo !! self.ba‚Ä¶¬ª

[13:58] *** cdg joined
[14:00] *** zakharyas joined
[14:02] <Geth> ¬¶ doc: 177013b1d6 | (Curt Tilmes)++ | doc/Language/nativecall.pod6

[14:02] <Geth> ¬¶ doc: Rename 'null' to NULL to make clear that they are C NULL pointers, Issue #1774.

[14:02] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/177013b1d6

[14:02] <synopsebot> Link: https://doc.perl6.org/language/nativecall

[14:16] *** ribasushi joined
[14:18] <Geth> ¬¶ doc: 2ba42245ab | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Backtrace.pod6

[14:18] <Geth> ¬¶ doc: Document Backtrace.gist

[14:18] <Geth> ¬¶ doc: 

[14:18] <Geth> ¬¶ doc: Rakudo impl: https://github.com/rakudo/rakudo/commit/555db42a37

[14:18] <Geth> ¬¶ doc: Spec: https://github.com/perl6/roast/commit/ca8c23ae77

[14:18] <synopsebot> Link: https://doc.perl6.org/type/Backtrace

[14:18] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/2ba42245ab

[14:19] <Geth> ¬¶ doc: fc2a944003 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Backtrace.pod6

[14:19] <Geth> ¬¶ doc: Document Backtrace.list

[14:19] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/fc2a944003

[14:19] *** bloatable6 left
[14:20] *** bloatable6 joined
[14:20] <Geth> ¬¶ doc: 72be743d07 | (Curt Tilmes)++ | doc/Language/nativecall.pod6

[14:20] <Geth> ¬¶ doc: Use strdup() instead of strcpy() to allocate memory, address issue #1773

[14:20] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/72be743d07

[14:20] <synopsebot> Link: https://doc.perl6.org/language/nativecall

[14:21] *** statisfiable6 left
[14:21] *** reportable6 left
[14:21] *** quotable6 left
[14:21] *** notable6 left
[14:21] *** committable6 left
[14:21] *** coverable6 left
[14:21] *** releasable6 left
[14:21] *** shareable6 left
[14:21] *** nativecallable6 left
[14:21] *** greppable6 left
[14:21] *** bloatable6 left
[14:21] *** unicodable6 left
[14:21] *** evalable6 left
[14:21] *** benchable6 left
[14:21] *** squashable6 left
[14:21] *** bisectable6 left
[14:21] *** eliasr joined
[14:22] *** Zoffix left
[14:22] <buggable> New CPAN upload: IRC-Client-Plugin-Ignore-0.1.0.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/IRC-Client-Plugin-Ignore-0.1.0.tar.gz

[14:23] *** travis-ci joined
[14:23] <travis-ci> Doc build errored. Zoffix Znet 'Document Backtrace.gist

[14:23] <travis-ci> https://travis-ci.org/perl6/doc/builds/340965834 https://github.com/perl6/doc/compare/177013b1d6e9...2ba42245ab01

[14:23] *** travis-ci left
[14:23] <buggable> [travis build above] ‚ò† Did not recognize some failures. Check results manually.

[14:23] *** travis-ci joined
[14:23] <travis-ci> Doc build errored. Curt Tilmes 'Use strdup() instead of strcpy() to allocate memory, address issue #1773'

[14:23] <travis-ci> https://travis-ci.org/perl6/doc/builds/340966955 https://github.com/perl6/doc/compare/fc2a944003c0...72be743d0742

[14:23] *** travis-ci left
[14:23] <buggable> [travis build above] ‚ò† Did not recognize some failures. Check results manually.

[14:24] *** travis-ci joined
[14:24] <travis-ci> Doc build errored. Zoffix Znet 'Document Backtrace.list'

[14:24] <travis-ci> https://travis-ci.org/perl6/doc/builds/340966503 https://github.com/perl6/doc/compare/2ba42245ab01...fc2a944003c0

[14:24] *** travis-ci left
[14:24] <buggable> [travis build above] ‚ò† Did not recognize some failures. Check results manually.

[14:26] *** evalable6 joined
[14:26] *** quotable6 joined
[14:26] *** ChanServ sets mode: +v evalable6

[14:26] *** ChanServ sets mode: +v quotable6

[14:26] *** coverable6 joined
[14:26] *** notable6 joined
[14:26] *** bloatable6 joined
[14:26] *** nativecallable6 joined
[14:26] *** releasable6 joined
[14:26] *** ChanServ sets mode: +v releasable6

[14:26] *** reportable6 joined
[14:26] *** committable6 joined
[14:26] *** bisectable6 joined
[14:26] *** ChanServ sets mode: +v bisectable6

[14:26] *** shareable6 joined
[14:26] *** ChanServ sets mode: +v shareable6

[14:27] *** benchable6 joined
[14:27] *** statisfiable6 joined
[14:35] *** curan left
[14:40] <Geth> ¬¶ doc: c7d95fad40 | (Curt Tilmes)++ | doc/Language/nativecall.pod6

[14:40] <Geth> ¬¶ doc: Call init() with named parameters

[14:40] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/c7d95fad40

[14:40] <synopsebot> Link: https://doc.perl6.org/language/nativecall

[14:52] <Geth> ¬¶ doc: 98b1f499f8 | (Curt Tilmes)++ | doc/Language/nativecall.pod6

[14:52] <Geth> ¬¶ doc: Clarify int32_t, not just int, issue  #1772

[14:52] <synopsebot> Link: https://doc.perl6.org/language/nativecall

[14:52] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/98b1f499f8

[14:54] *** skids joined
[14:57] *** notable6 left
[14:57] *** benchable6 left
[14:57] *** evalable6 left
[14:57] *** coverable6 left
[14:57] *** bisectable6 left
[14:57] *** quotable6 left
[14:57] *** committable6 left
[14:57] *** reportable6 left
[14:57] *** nativecallable6 left
[14:57] *** releasable6 left
[14:57] *** statisfiable6 left
[14:57] *** shareable6 left
[14:57] *** bloatable6 left
[14:59] *** coverable6 joined
[14:59] *** notable6 joined
[14:59] *** ChanServ sets mode: +v notable6

[14:59] *** reportable6 joined
[14:59] *** nativecallable6 joined
[14:59] *** committable6 joined
[14:59] *** quotable6 joined
[14:59] *** ChanServ sets mode: +v committable6

[14:59] *** ChanServ sets mode: +v quotable6

[14:59] *** bisectable6 joined
[14:59] *** releasable6 joined
[14:59] *** bloatable6 joined
[14:59] *** ChanServ sets mode: +v releasable6

[14:59] *** ChanServ sets mode: +v bloatable6

[14:59] *** lowbro left
[14:59] *** shareable6 joined
[14:59] *** ChanServ sets mode: +v shareable6

[15:00] <Kaiepi> what vim plugins do you recommend for p6 dev?

[15:00] <Kaiepi> if you use vim

[15:04] *** benchable6 joined
[15:04] *** ChanServ sets mode: +v benchable6

[15:04] *** statisfiable6 joined
[15:10] *** konsolebox left
[15:11] <moritz> I use (g)vim without any plugins, fwiw

[15:13] <Xliff> m: ("a@@bcd" ~~ /<alpha + [@ _ $]>/).say

[15:13] <camelia> rakudo-moar 555db42a3: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Quantifier quantifies nothing‚ê§at <tmp>:1‚ê§------> 3("a@@bcd" ~~ /<alpha +7‚èè5 [@ _ $]>/).say‚ê§¬ª

[15:13] <mspo> polyglot has p6 i think

[15:13] <Xliff> m: ("abcd" ~~ /<alpha>/).say

[15:13] <camelia> rakudo-moar 555db42a3: OUTPUT: ¬´ÔΩ¢aÔΩ£‚ê§ alpha => ÔΩ¢aÔΩ£‚ê§¬ª

[15:13] <Xliff> m: ("abcd" ~~ /<:alpha>/).say

[15:13] <camelia> rakudo-moar 555db42a3: OUTPUT: ¬´ÔΩ¢aÔΩ£‚ê§¬ª

[15:13] <Xliff> Hrm

[15:14] <Xliff> m: ("a@@bcd" ~~ /<:L + [@ _ $]>/).say

[15:14] <camelia> rakudo-moar 555db42a3: OUTPUT: ¬´ÔΩ¢aÔΩ£‚ê§¬ª

[15:14] <Xliff> m: ("a@@bcd" ~~ /<:L + [@ _ $]>+/).say

[15:14] <camelia> rakudo-moar 555db42a3: OUTPUT: ¬´ÔΩ¢a@@bcdÔΩ£‚ê§¬ª

[15:14] <Xliff> m: ("a@@bcd" ~~ /<alpha + [@ _ $]>+/).say

[15:14] <camelia> rakudo-moar 555db42a3: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Quantifier quantifies nothing‚ê§at <tmp>:1‚ê§------> 3("a@@bcd" ~~ /<alpha +7‚èè5 [@ _ $]>+/).say‚ê§¬ª

[15:14] *** travis-ci joined
[15:14] <travis-ci> Doc build passed. Curt Tilmes 'Clarify int32_t, not just int, issue  #1772'

[15:14] <travis-ci> https://travis-ci.org/perl6/doc/builds/340980702 https://github.com/perl6/doc/compare/c7d95fad40f2...98b1f499f8b3

[15:14] *** travis-ci left
[15:14] <Kaiepi> polyglot?

[15:15] *** ReadersDigest left
[15:16] *** evalable6 joined
[15:16] *** ChanServ sets mode: +v evalable6

[15:17] *** adelyne joined
[15:17] <Xliff> m: ("a@@bcd" ~~ /<:L + [@ _ $]>+/).say

[15:17] <camelia> rakudo-moar 555db42a3: OUTPUT: ¬´ÔΩ¢a@@bcdÔΩ£‚ê§¬ª

[15:17] <Xliff> m: ("a@@bc\$" ~~ /<:L + [@ _ $]>+/).say

[15:17] <camelia> rakudo-moar 555db42a3: OUTPUT: ¬´ÔΩ¢a@@bc$ÔΩ£‚ê§¬ª

[15:18] *** greppable6 joined
[15:18] *** ChanServ sets mode: +v greppable6

[15:23] *** wamba joined
[15:23] <kybr> FYI: http://rosettacode.org/wiki/Wireworld#Perl_6 -- is broken for me on Rakudo Star version 2018.01 built on MoarVM version 2018.01 implementing Perl 6.c.

[15:26] *** unicodable6 joined
[15:26] *** ChanServ sets mode: +v unicodable6

[15:26] <lizmat> method postcircumfix:<[ ]>($i) { @.line[$i].comb }  # looks suspect to me?

[15:27] *** Kaiepi left
[15:28] *** zakharyas left
[15:31] *** konsolebox joined
[15:43] <moritz> it hasn't been a method for years

[15:44] *** zakharyas joined
[15:48] <b2gills> There are other problems with that entry

[15:50] <b2gills> I think part of the problem is it is pre-GLR

[15:53] *** pierre__ left
[15:53] <b2gills> I at least get different errors when I change ÔΩ¢-> $i, $j {ÔΩ£ with ÔΩ¢-> ($i, $j) {ÔΩ£

[15:59] <b2gills> I got it to work, will update the page now (and try and re-write it so it isn't modifying the state of other instances)

[16:04] <b2gills> I changed to many things with the one on my computer, it was just the method postcircumfix,  ÔΩ¢-> $i, $j {ÔΩ£ and ÔΩ¢-> \i, \j {ÔΩ£

[16:05] <b2gills> kybr: Thanks for telling us, it is fixed now. I will also see about re-writing it.

[16:07] <kybr> b2gills: sorry to not try to fix it myself; i would try if i had time. i want to show it in the class i'm teaching, so thanks for fixing it.

[16:09] *** lizmat left
[16:12] <b2gills> kybr: It isn't exactly a great example at the moment, I want to remove all instances of .pick for example

[16:15] *** troys joined
[16:19] <caa51h> Is there any Perl6 repo good for beginner as a reading material?

[16:20] <caa51h> MasterDuke's repo is full of nqp and I don't know what's that at all. :D

[16:23] <b2gills> http://perl6intro.com/ https://learnxinyminutes.com/docs/perl6/ https://examples.perl6.org/ may be good starting points

[16:23] *** pierre__ joined
[16:24] <b2gills> Or really anything on https://perl6.org/resources/

[16:24] <Geth> ¬¶ doc: 0be3298f5b | (Will "Coke" Coleda)++ | xt/words.pws

[16:24] <Geth> ¬¶ doc: learn new words

[16:24] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/0be3298f5b

[16:24] *** zakharyas left
[16:25] *** zakharyas joined
[16:28] *** pierre__ left
[16:28] *** zakharyas1 joined
[16:30] *** natrys joined
[16:30] *** zakharyas left
[16:32] *** daviddavis_ left
[16:36] <caa51h> b2gills: ok thank you

[16:37] *** as_ joined
[16:37] *** as_ left
[16:46] *** pmurias joined
[16:46] *** zakharyas1 left
[16:47] *** pierre__ joined
[16:50] *** zakharyas joined
[16:50] <[Coke]> Grant Proposals for the current round are up at: http://news.perlfoundation.org/2018/02/grant-proposals-januaryfebruar.html

[16:52] *** pierre__ left
[16:55] *** abraxxa left
[17:13] *** Kaiepi joined
[17:18] *** Kaiepi left
[17:20] *** psychoslave left
[17:21] *** psychoslave joined
[17:21] *** Kaiepi joined
[17:26] *** dakkar left
[17:27] *** psychoslave left
[17:32] *** pierre__ joined
[17:34] *** psychoslave joined
[17:36] *** pierre__ left
[17:45] *** Geth left
[17:45] *** Geth joined
[17:45] *** ChanServ sets mode: +v Geth

[17:48] *** s0me0ne-unkn0wn joined
[17:51] <moritz> [Coke]++ # posting grant proposals

[17:51] *** s0me0n3-unkn0wn left
[17:52] <[Coke]> moritz: I was going to say no problem, but am settling on "you're welcome". :)

[18:02] *** char_var[buffer] joined
[18:02] *** char_var[buffer] left
[18:03] * moritz doesn't really know what to think about http://news.perlfoundation.org/2018/02/grant-proposal-curating-and-im.html

[18:03] <moritz> it seem really useful

[18:04] <moritz> but -- there's always a "but", right ?

[18:04] <sena_kun> >Addressing 5 doc issues per day on average, minimum 2 issues per day. Reduce the amount of open issues by at least 120.

[18:04] <sena_kun> if that's true, it'd be awesome.

[18:04] <moritz> I don't see a really coherent vision behind it

[18:05] <moritz> maybe there is one, but IMHO doesn't really come through in this grant proposal

[18:08] <Kaiepi> btw is there a stylg guide i'm missing

[18:10] <[Coke]> https://github.com/perl6/doc/blob/master/STYLEGUIDE.md ?

[18:11] <Kaiepi> i don't want mym code to end up breaking that

[18:12] <Kaiepi> OH

[18:12] <Kaiepi> that should've been the first thing i checked allowed

[18:14] *** Actualeyes left
[18:20] *** zeddy_k left
[18:24] *** sena_kun left
[18:25] *** bisectable6 left
[18:25] *** bisectable6 joined
[18:25] *** lizmat joined
[18:27] *** rindolf left
[18:28] *** lucasb joined
[18:30] *** MilkmanDan left
[18:31] *** MilkmanDan joined
[18:32] <lucasb> I noticed in https://docs.perl6.org/type.html there's a visual distinction in class vs. role subtitles. Role subtitles shows up as italics... I wonder if you people like it or not?

[18:36] <Kaiepi> i feel like there aren't enough calls on the NativeCall api

[18:36] <Kaiepi> er

[18:37] <Kaiepi> not enough security flows that pop up something

[18:38] *** rindolf joined
[18:39] *** pierre_ joined
[18:42] *** setty1 joined
[18:44] *** pierre_ left
[18:54] *** psychoslave left
[18:55] *** darutoko left
[19:10] *** cdg left
[19:11] *** cdg joined
[19:11] *** sena_kun joined
[19:15] *** cdg left
[19:18] *** zakharyas left
[19:23] <lucasb> m: say ($ = 42).subst-mutate('a','b').WHAT

[19:23] <camelia> rakudo-moar 555db42a3: OUTPUT: ¬´(Any)‚ê§¬ª

[19:23] <lucasb> m: say ($ = '42').subst-mutate('a','b').WHAT

[19:23] <camelia> rakudo-moar 555db42a3: OUTPUT: ¬´Nil‚ê§¬ª

[19:24] <lucasb> ^^ any reason for returning different values?

[19:26] <lucasb> m: my $x = 42; $x ~~ s/a/b/; say $x.WHAT

[19:26] <camelia> rakudo-moar 555db42a3: OUTPUT: ¬´(Int)‚ê§¬ª

[19:26] <lucasb> m: my $x = 42; $x.subst-mutate('a','b'); say $x.WHAT

[19:26] <camelia> rakudo-moar 555db42a3: OUTPUT: ¬´(Str)‚ê§¬ª

[19:27] <lucasb> ^^ if s/// is implemented in terms of subst-mutate, how come they differ in behavior with regard a failed match?

[19:27] <lucasb> Can .subst-mutate be made to *not* change de type of the variable to Str if the match failed?

[19:28] <lucasb> s/de/the/

[19:32] <lizmat> hmmm....

[19:32] <lizmat> looking at that now, trying a fix

[19:34] <lizmat> looks like the fix is ok, spectesting just to be sure

[19:36] <lucasb> thanks lizmat. Are you talking about issue #1, #2 or both? :)

[19:36] <lizmat> m: say ($ = 42).subst-mutate('a','b').WHAT   # this will return Nil after my fix

[19:36] <camelia> rakudo-moar 555db42a3: OUTPUT: ¬´(Any)‚ê§¬ª

[19:37] <lizmat> *say Nil rather :-)

[19:42] <lizmat> lucasb: https://github.com/rakudo/rakudo/commit/e7af9a6a90

[19:43] *** pierre_ joined
[19:44] <El_Che> lizmat: back?

[19:46] <lucasb> lizmat: thanks again

[19:47] *** pierre_ left
[19:49] <timotimo> m: state %foo = <a b c d>.Set; say %foo.^name; say %foo.perl

[19:49] <camelia> rakudo-moar 555db42a3: OUTPUT: ¬´Hash‚ê§{:a, :b, :c, :d}‚ê§¬ª

[19:49] <timotimo> m: state %foo := <a b c d>.Set; say %foo.^name; say %foo.perl

[19:49] <camelia> rakudo-moar 555db42a3: OUTPUT: ¬´VMNull‚ê§Cannot call method 'perl' on a null object‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:49] <timotimo> ^- it's not so great we can't have it like that

[19:51] <AlexDaniel> moritz: you're not the only one: https://irclog.perlgeek.de/perl6-dev/2018-02-13#i_15813684

[19:52] <AlexDaniel> it would've been so much better if JJ posted a draft of the proposal here before submitting it

[19:52] <AlexDaniel> so that we could have given him some hints or something

[19:52] <lizmat> El_Che: no not back yet, just killing some hours in an Irish pub in Orlando before going to the eirport

[19:53] <El_Che> as in "the cruise is a fuzzy woodstock-like memory"?

[19:53] <AlexDaniel> I was *very* excited when I heard that they are applying and now I no longer feel that way

[19:53] <El_Che> lizmat: say hi to Wendy

[19:53] <lizmat> El_Che: no, the cruise is still very vivid

[19:54] <El_Che> AlexDaniel, moritz: maybe send your remarks to JJ? He's a very reasonable guy, probably adaptation would still be possible

[19:54] *** john51 left
[19:54] <El_Che> lizmat: I saw a camelia on a band's amp :)

[19:54] <lizmat> this time it was 5 days instead of 4: the 5th day was really just over the edge  :-)

[19:55] *** john51 joined
[19:55] <lizmat> El_Che: yeah, cool eh?

[19:55] <AlexDaniel> El_Che: well, you see‚Ä¶ the proposal is already published. We will of course post our comments there, but this whole situation is kinda LTA

[19:55] <El_Che> it was low-res, but camelia us very unique so it was quickly spotted

[19:55] <lizmat> I just presented it to the guitar player of Baraka when he was autographing CD's

[19:55] <lizmat> and two days later, it's on stage!

[19:56] <El_Che> AlexDaniel: a rejection demotivates, while constructive comments can be motivating. On the other hand, he's an academic, so rejection of papers and projects is not something unknown :)

[19:57] <El_Che> lizmat: I wonder how camelia would fare in a metal cruise :)

[19:57] <lizmat> pretty good, I suspect: most heavy metallers I know are suckers for stuffed toys  :-)

[19:58] <El_Che> you'll have to tell them camelia is a vampire

[19:58] <lizmat> hmmmm  :-)

[19:59] <DrForr> Two minutes with a marker and it's got fangs.

[19:59] <yoleaux> 12 Feb 2018 15:29Z <Xliff> DrForr: SQL Diagram https://cdn.rawgit.com/GuntherRademacher/ad6a447fdc0d0c331c6ba24cc39882c4/raw/bc69f06fe4eb9f243b69e889657ca8763c6441ab/sql_yacc.xhtml

[20:08] *** natrys left
[20:14] *** rindolf left
[20:15] *** caa51h left
[20:49] <Geth> ¬¶ doc: d6c650125f | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Str.pod6

[20:49] <synopsebot> Link: https://doc.perl6.org/type/Str

[20:49] <Geth> ¬¶ doc: Fix incorrect failed-match return type for .subst-mutate

[20:49] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/d6c650125f

[20:56] <Kaiepi> perl's module system confusses mme a little bit

[20:57] *** pierre_ joined
[20:57] <Kaiepi> like how our does or doesn't get add to ::PACKAGE

[20:57] <Kaiepi> but our + export does

[20:59] <Kaiepi> i think i need to learn more about scoping and the like since is seems pretty different in other languages

[21:01] *** pierre_ left
[21:08] *** cdg joined
[21:10] *** cdg_ joined
[21:10] *** cdg_ left
[21:10] *** espadrine joined
[21:10] *** cdg_ joined
[21:10] *** cdg left
[21:11] *** caa51h joined
[21:13] *** cdg joined
[21:14] <caa51h> camelia the vampire https://imgur.com/Vg7Zr7D

[21:16] <timotimo> that's cute

[21:17] *** cdg_ left
[21:17] <caa51h> :D

[21:19] <Kaiepi> it's great to get artists for stuff like this

[21:19] <Kaiepi> jsut as long as all credit is due

[21:20] <Kaiepi> don't be one of thoose guys that tries to commission for free and gets mad

[21:20] <timotimo> "for exposure"

[21:22] <Kaiepi> yeah 

[21:22] <Kaiepi> "texposure"

[21:22] <Kaiepi> i.e. interning but no job offter afterward

[21:24] *** lizmat left
[21:31] *** pmurias left
[21:33] <timotimo> i haven't heard that one yet

[21:37] *** brrt joined
[21:40] *** as_ joined
[21:40] *** as_ left
[21:43] *** pmurias joined
[21:48] *** rindolf joined
[21:53] *** TEttinger joined
[21:55] *** pmurias left
[22:04] *** pierre_ joined
[22:09] *** pierre_ left
[22:19] *** brrt left
[22:31] *** lucasb left
[22:34] *** skids left
[22:35] *** Sgeo__ left
[22:51] <adelyne> Hi, I'm reading about perl6, I've read perl6intro and the docs on concurrency, but there's something unclear for me: does each future get its own thread and has exclusive use of it, or can multiple futures run in a single thread? I've seen perl6 does not have an event loop, and doesn't have built-in coroutines according to the FAQ, hence why I'm asking this question.

[22:52] *** sena_kun left
[22:57] <Kaiepi> ohh, my bad

[22:58] <timotimo> adelyne: what you "start" gets pushed into a work queue for the scheduler you've set up, which is a ThreadPoolScheduler by default

[22:58] <timotimo> adelyne: if you declare your script to "use v6.d.PREVIEW", an "await" in a "start"ed block (or similar places) will push the task back into the work queue and another piece of work can be done by the same thread in the thread pool

[22:59] <timotimo> but if you just use v6.c (for example by not declaring any version) an "await" will actually block an operating system thread

[23:00] <timotimo> if you want to have an actual thread you have full control over, you can use the Thread class

[23:06] *** setty1 left
[23:06] <adelyne> Thank you timotimo that answers my question.

[23:10] *** Sgeo joined
[23:12] *** pierre_ joined
[23:17] *** pierre_ left
[23:23] *** lizmat joined
[23:24] <SmokeMachine> m: sub bla(UInt :$ble) { say $ble }; bla :ble # its a bug, right?

[23:24] <camelia> rakudo-moar 77794a28a: OUTPUT: ¬´True‚ê§¬ª

[23:24] <SmokeMachine> m: sub bla(Int :$ble) { say $ble }; bla :ble

[23:24] <camelia> rakudo-moar 77794a28a: OUTPUT: ¬´True‚ê§¬ª

[23:24] <SmokeMachine> m: sub bla(Str :$ble) { say $ble }; bla :ble

[23:24] <camelia> rakudo-moar 77794a28a: OUTPUT: ¬´Type check failed in binding to parameter '$ble'; expected Str but got Bool (Bool::True)‚ê§  in sub bla at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:24] <SmokeMachine> is Bool "a Int"?

[23:25] <SmokeMachine> s/a/an/

[23:26] <jnthn> Yes

[23:26] <jnthn> m: say Bool ~~ int

[23:26] <camelia> rakudo-moar 77794a28a: OUTPUT: ¬´False‚ê§¬ª

[23:26] <jnthn> m: say Bool ~~ Int

[23:26] <camelia> rakudo-moar 77794a28a: OUTPUT: ¬´True‚ê§¬ª

[23:26] <jnthn> All integer-based enums are subtypes of Int

[23:26] <MasterDuke> m: say Bool ~~ UInt

[23:26] <camelia> rakudo-moar 77794a28a: OUTPUT: ¬´True‚ê§¬ª

[23:27] <SmokeMachine> m: sub bla(int :$ble) { say $ble }; bla :ble

[23:27] <camelia> rakudo-moar 77794a28a: OUTPUT: ¬´1‚ê§¬ª

[23:28] <SmokeMachine> isn't that a problem?

[23:28] <jnthn> No

[23:29] <jnthn> Or to the degree it is, it's an intended problem :)

[23:29] <jnthn> But generally the thing one would care about is not getting any old integer in when a particular enumeration of values is wanted

[23:29] <jnthn> And that won't happen (thus why you can't pass an Int where a Bool is wnated)

[23:29] <jnthn> *wanted

[23:30] <SmokeMachine> m: sub bla(Int :$ble where {$_ !~~ Bool}) { say $ble }; bla :ble

[23:30] <camelia> rakudo-moar 77794a28a: OUTPUT: ¬´Constraint type check failed in binding to parameter '$ble'; expected anonymous constraint to be met but got Bool (Bool::True)‚ê§  in sub bla at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:30] <SmokeMachine> Ill have to do something like that... ^^

[23:30] <jnthn> Why do you have to, out of curiosity?

[23:34] <SmokeMachine> jnthn: Im doing something like multi sql-type(Uint :$varchar) {...} and I want to :varchar(1) be different from :varchar

[23:35] <jnthn> Ah, and named parameters don't take part in multi-dispatch

[23:36] <jnthn> Though they are dispatched in order, do jut putting the Bool case first would perhaps do it?

[23:36] *** pierre_ joined
[23:38] *** pierre_ left
[23:39] <SmokeMachine> jnthn: thanks! Ill try...

[23:39] <Voldenet> m: multi sub x (UInt :$y where { $y.WHAT =:= Int }){ say "is int" }; x(:y(3))

[23:39] <camelia> rakudo-moar 77794a28a: OUTPUT: ¬´is int‚ê§¬ª

[23:39] <Voldenet> m: multi sub x (UInt :$y where { $y.WHAT =:= Int }){ say "is int" }; x(:y)

[23:39] <camelia> rakudo-moar 77794a28a: OUTPUT: ¬´Cannot resolve caller x(:y); none of these signatures match:‚ê§    (Int :$y where { ... })‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:40] <Voldenet> ‚îê(¬¥ÔΩû`Ôºõ)‚îå 

[23:40] <Voldenet> it's not very elegant

[23:40] <Voldenet> but kind of works

[23:41] <SmokeMachine> jnthn: but I think Ill do something like: multi blue-type("varchar", % (UInt :$size is copy, :$on-error is copy where Str|Code = &warn) --> Hash()) {if $size ~~ Bool { $size = UInt }; ...}

[23:45] <Voldenet> it wouldn't work for IntStr, but meh

[23:52] <Voldenet> the only thing I'd really want from typesystem is to work painlessly with int32

[23:53] <Voldenet> multi sub x (int32 :$y){ say "is int" }; x(:y(42))

[23:53] <Voldenet> m: multi sub x (int32 :$y){ say "is int" }; x(:y(42))

[23:53] <camelia> rakudo-moar 77794a28a: OUTPUT: ¬´Lexical with name '$y' has a different type in this frame‚ê§  in sub x at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:53] *** wamba left
[23:55] *** dct_ left
[23:56] <SmokeMachine> is there a way to "make it work"? I mean make it run both methods:

[23:56] <SmokeMachine> m: class C { multi method bla(% (:$a, |)) {"a"}; multi method bla(% (:$b, |)) {"b"} }; say C.new.*bla: {a => 1, b => 2}

[23:56] <camelia> rakudo-moar 77794a28a: OUTPUT: ¬´(a)‚ê§¬ª

[23:57] <SmokeMachine> I know it shouldn't "work"... but is there some way to make what I want?

[23:59] <Voldenet> What should this return and in what order?

[23:59] *** greppable6 left
[23:59] *** greppable6 joined
[23:59] *** ChanServ sets mode: +v greppable6

[23:59] *** greppable6 left
