[00:08] *** skids joined
[00:19] *** cozachk left
[00:25] *** koto left
[00:27] *** blackberry9900 left
[00:29] *** wamba left
[00:33] <AlexDaniel> squashable6: next

[00:33] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in ‚âà9 hours (2018-07-07 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[00:36] *** mcmillhj left
[00:36] <squashable6> Webhook for perl6/doc is now active! Design for failure.

[00:41] <tbrowder_> AlexDaniel: I don‚Äôt know if it fits the definition precisely, but I feel like I‚Äôve learned to do TDD working with Perl 6.!

[00:49] *** eliasr left
[01:04] *** kjk joined
[01:05] *** spycrab0 left
[01:08] <kjk> here https://docs.perl6.org/language/modules.html#Preparing_the_Module.   It mentions a module, Vortex::TotalPerspective, but I can't seem to find it

[01:08] *** lizmat left
[01:09] <timotimo> it's an imaginary example module

[01:10] <timotimo> the total perspective vortex comes from the hitchhiker's guide to the galaxy

[01:13] <kjk> oh..haha I misunderstood the doc

[01:15] *** kerframil joined
[01:27] *** Xliff left
[01:29] *** blackberry9900 joined
[01:34] <Geth> ¬¶ doc/coke/build: 19 commits pushed by (Will "Coke" Coleda)++, Coke++

[01:34] <Geth> ¬¶ doc/coke/build: review: https://github.com/perl6/doc/compare/b7a51e98e9ce...50ed6a7e59c4

[01:37] <AlexDaniel> heh‚Ä¶ one annoying issue with TDD is that you see all these problems with your code and have to fix them :(

[01:38] *** ChoHag left
[01:41] *** fake_space_whale joined
[01:45] <kjk> so I'm using this mi6 tool to help with authoring a module, and I'm trying to upload my module to cpan, but it says I should prepare a ~/.pause file, I'm not sure what to put in there? I'm guessing it should contain my credential, but in what format?

[01:48] <timotimo> kjk: one line is "user KJKPAN", the next line is "password GoodBagels"

[01:49] <timotimo> end it with a newline i guess?

[01:52] <kjk> hmm upload failed with an error: 599 Internal Exception, https://pause.perl.org/pause/authenquery?ACTION=add_uri

[01:53] <kjk> however, I see the files in PAUSE

[01:54] *** raynold left
[02:05] <buggable> New CPAN upload: P6Repl-Helpers-0.0.1.tar.gz by KJK https://cpan.metacpan.org/authors/id/K/KJ/KJK/Perl6/P6Repl-Helpers-0.0.1.tar.gz

[02:07] <kjk> hmm, does that message mean it's successful?

[02:09] <kjk> if yes, I kind of wish it wasn't successful lol, coz I wanted to change the name of the module to just P6Repl::Helper, i.e., no 's' at the end.

[02:13] <kjk> ok that's it, I'm renaming it. just scheduled a delete of the files on PAUSE, hope it's ok.

[02:17] *** raynold joined
[02:18] *** Kaiepi left
[02:20] *** Kaiepi joined
[02:28] <kjk> ok this time successfully used mi6 release to upload my renamed module to cpan.  hmm, I see my old module on modules.perl6.org. I hope it will be gone once it's removed from cpan by PAUSE

[02:35] <buggable> New CPAN upload: P6Repl-Helper-0.0.1.tar.gz by KJK http://modules.perl6.org/dist/P6Repl::Helpers:cpan:KJK

[02:44] *** ufobat_ joined
[02:47] *** ufobat left
[02:56] <AlexDaniel> squashable6: next

[02:56] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in ‚âà7 hours (2018-07-07 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[03:07] *** Schepeers left
[03:12] *** ChoHag joined
[03:13] *** Schepeers joined
[03:28] *** xtreak joined
[03:34] <Geth> ¬¶ doc: e8f96f158e | (JJ Merelo)++ | size_t.p6

[03:34] <Geth> ¬¶ doc: Removed wrong example file

[03:34] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/e8f96f158e

[03:36] *** BlackBerry9999 joined
[03:37] *** fake_space_whale left
[03:39] *** blackberry9900 left
[03:54] *** BlackBerry9999 left
[04:16] *** BlackBerry9999 joined
[04:27] *** stee joined
[04:29] *** stee3 left
[04:31] *** BlackBerry9999 left
[04:31] *** BlackBerry9999 joined
[04:31] *** stee left
[04:41] *** stee joined
[04:43] *** kjk left
[04:45] *** stee left
[04:55] *** stee joined
[05:08] *** Kaiepi left
[05:09] *** Kaiepi joined
[05:13] *** Kaiepi left
[05:13] *** Kaiepi joined
[05:15] *** skids left
[05:17] *** sauvin joined
[05:38] *** HaraldJoerg joined
[05:50] *** stmuk joined
[05:50] *** labster joined
[05:52] *** stmuk_ left
[05:57] *** Kaiepi left
[05:57] *** psychoslave left
[05:58] *** Kaiepi joined
[06:17] *** psychoslave joined
[06:24] *** robertle_ left
[06:28] *** HaraldJoerg1 joined
[06:31] *** HaraldJoerg left
[06:37] *** BlackBerry9999 left
[06:37] *** konsolebox left
[06:41] *** konsolebox joined
[06:42] *** domidumont joined
[06:48] *** Technato1 joined
[06:48] *** domidumont left
[06:49] *** domidumont joined
[06:54] *** Technato1 left
[06:57] *** cgfbee joined
[06:59] *** Technato1 joined
[07:05] *** wamba joined
[07:06] *** Technato1 left
[07:13] *** curan joined
[07:19] *** aborazmeh joined
[07:19] *** aborazmeh left
[07:19] *** aborazmeh joined
[07:29] *** dakkar joined
[07:30] *** domidumont left
[07:30] *** domidumont joined
[07:40] *** rindolf joined
[07:54] *** xinming joined
[07:57] *** aborazmeh left
[07:58] *** xinming_ left
[08:04] *** benjikun left
[08:12] *** zakharyas joined
[08:15] *** Khisanth left
[08:19] *** scimon joined
[08:28] *** Khisanth joined
[08:28] <AlexDaniel> squashable6: next

[08:28] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in ‚âà1 hour (2018-07-07 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[08:29] *** kerframil left
[08:44] *** xtreak left
[09:10] *** torbjorn joined
[09:10] <AlexDaniel> squashable6: next

[09:10] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon is in 49 minutes (2018-07-07 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[09:15] *** curan left
[09:17] *** spycrab0 joined
[09:18] *** xtreak joined
[09:19] *** xtreak left
[09:20] *** xtreak joined
[09:21] *** lizmat joined
[09:28] *** Xliff joined
[09:29] *** ChoHag left
[09:41] *** xtreak left
[09:46] *** ChoHag joined
[09:59] <Altreus> Apparently a Promise.in is already vowed? How would one set up an event for the future, like a timeout, but then cancel it if the thing being timed out succeeds first?

[10:00] <Altreus> I thought I would just make a Promise.in and then break it if the timeout is not needed

[10:00] <lizmat> Altreus: you don't: the promise will be kept and the object will be removed automatically when the GC kicks in

[10:01] <Altreus> But the promise is a timeout

[10:01] <Altreus> if it's kept, the connection is closed

[10:01] *** ChoHag left
[10:01] *** benjikun joined
[10:01] <Altreus> Presumably there's a better way of setting up an alarm like this, such that it can be cancelled

[10:02] <lizmat> Altreus: please show the code, I think there's some misunderstanding

[10:02] <Altreus> let me commit the wip :)

[10:03] <Altreus> lizmat: https://github.com/kawaiiforums/p6-api-discord/blob/wip/lib/API/Discord.pm6

[10:03] <Altreus> You see I set up $!hb-timeout on line 76

[10:03] <Altreus> The idea is that if the heartbeat is acknowledged, I cancel the timeout

[10:03] <Altreus> if it's not, I close the connection

[10:04] <Altreus> But I can't work out how to cancel the timeout

[10:04] <Altreus> The *other* problem is that if I try to break a promise like this in a trivial script, I get an error

[10:04] <Altreus> but in this situation I do not

[10:05] *** stmuk_ joined
[10:06] <lizmat> hmmm... indeed, that also seems to have the same logical issue as: https://docs.perl6.org/type/Promise#method_in

[10:07] <Altreus> I mean it does seem like I should be able to not timeout if the proc finishes first

[10:07] <Altreus> I guess I can set it up in a slightly more complex way so the then block closes over state it can later read

[10:07] *** stmuk left
[10:07] <lizmat> I think that's the way to do it now

[10:08] <lizmat> I think we want Promise.in / at to return an augmented promise that you can call "cancel" on

[10:08] <Altreus> or to not be avowed so you can break it

[10:08] <Altreus> I'm surprised trying to break it in this code does not cause an error

[10:09] <lizmat> I just realize that the implementation of Promise.in / at predates the cancellation feature of ThreadPoolScheduler.cue

[10:09] <Altreus> aha

[10:09] <Altreus> Well this is why we need to try writing things in perl6 :D

[10:09] <Altreus> find all the kinks

[10:10] <lizmat> yes, please continue to do so!

[10:10] <jnthn> my $cancelled = Promise.new; Promise.anyof(Promise.in(5), $cancelled).then({ unless $cancelled { ...do stuff... } });

[10:11] <Altreus> ah that's nicer than a new member

[10:13] *** ChoHag joined
[10:14] <lizmat> jnthn: how do you feel of adding a "cancel" method on the Promise returned by .in / .at ?

[10:14] <jnthn> Not convinced that's the right way to do it at all.

[10:15] <Altreus> It feels tidier to never run the code than to run the code and check if you really want to

[10:15] <Altreus> Whenever I have something like promises it strikes me that I should almost never have to write another if

[10:15] <lizmat> well, I guess there's still a race condition

[10:16] <jnthn> Well yes, it's inherently a race

[10:16] <Altreus> a timeout is literally that :)

[10:17] <lizmat> well, I think at least the example at https://docs.perl6.org/type/Promise#method_in is wrong

[10:17] <lizmat> in the sense that it will *always* run the .kill after 5 seconds

[10:18] <lizmat> I guess the timeout code should be something like: unless $promise { note "timeout" ... }

[10:19] <jnthn> Yeah, that's not a good way to write that

[10:19] <scimon> Altreus: I wrote Timer::Breakable for this kind of situation.

[10:19] <jnthn> That's what a react block is for

[10:19] <lizmat> well, I think this example predates react  :-)

[10:22] <Altreus> scimon: oh handy

[10:22] <Altreus> definitely a perl

[10:24] <Altreus> time to take off the rose-tinted glasses and do real work though :(

[10:25] <scimon> And I've just spotted the docs are a bit wrong.... Ooops. 

[10:28] <Geth> ¬¶ doc: bc7070db68 | (Elizabeth Mattijsen)++ | doc/Type/Promise.pod6

[10:28] <Geth> ¬¶ doc: Adapt Promise.in example

[10:28] <Geth> ¬¶ doc: 

[10:28] <Geth> ¬¶ doc: In the original version, the .kill method would be called on the Proc

[10:28] <Geth> ¬¶ doc: after 5 seconds even if the other promise was successful.  This may not

[10:28] <synopsebot_> Link: https://doc.perl6.org/type/Promise

[10:28] <Geth> ¬¶ doc: be a problem in this case, but it implies that the other timeout promise

[10:28] <Geth> ¬¶ doc: does not fire (when in fact, it will).

[10:28] <squashable6> üçïüçïüçï  First contribution by lizmat++! ‚ô•

[10:28] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/bc7070db68

[10:30] <Geth> ¬¶ doc: cd8a2b1527 | (Elizabeth Mattijsen)++ | doc/Type/Promise.pod6

[10:30] <Geth> ¬¶ doc: Refer to react/whenever for Promise.in/at

[10:30] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/cd8a2b1527

[10:30] <synopsebot_> Link: https://doc.perl6.org/type/Promise

[10:30] <scimon> (I love Mi6 for module development) Best I get back to work.

[10:37] *** sftf left
[10:40] <Altreus> wow that turned around fast :D

[10:44] *** jmerelo joined
[10:44] * jmerelo on an intercity train to Arnhem

[10:44] <jmerelo> squashable6: status

[10:44] <squashable6> jmerelo, üçïüçï SQUASHathon is in progress! The end of the event in 2 days and ‚âà1 hour. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[10:44] <squashable6> jmerelo, Log and stats: https://gist.github.com/b398768be0d300f68da09b482ede3335

[10:44] *** BlackBerry9999 joined
[10:45] <buggable> New CPAN upload: Timer-Breakable-0.1.1.tar.gz by SCIMON http://modules.perl6.org/dist/Timer::Breakable:cpan:SCIMON

[10:51] <Geth> ¬¶ doc: a6077258a2 | (JJ Merelo)++ | doc/Language/classtut.pod6

[10:51] <Geth> ¬¶ doc: Fixes Pod and reflow, closes #2151

[10:51] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/a6077258a2

[10:51] <Geth> ¬¶ doc: bf2974c4b3 | (JJ Merelo)++ | doc/Language/classtut.pod6

[10:51] <Geth> ¬¶ doc: Clarifies why Submethod is there by adding a link

[10:51] <synopsebot_> Link: https://doc.perl6.org/language/classtut

[10:51] <Geth> ¬¶ doc: 

[10:51] <Geth> ¬¶ doc: Also reflows around there. Closes #2152

[10:51] <squashable6> üçïüçïüçï  First contribution by JJ++! ‚ô•

[10:51] <squashable6> üçï JJ++ closed issue ‚Äúclasstut rendering broken‚Äù: https://github.com/perl6/doc/issues/2151

[10:51] <squashable6> üçï JJ++ closed issue ‚Äú submethods concept from nowhere‚Äù: https://github.com/perl6/doc/issues/2152

[10:51] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/bf2974c4b3

[10:52] <squashable6> üçï JJ++ edited issue ‚ÄúMention the status of atomicints‚Äù: https://github.com/perl6/doc/issues/2150

[10:53] <squashable6> üçï JJ++ wrote a comment on ‚ÄúMention the status of atomicints‚Äù: https://github.com/perl6/doc/issues/2150#issuecomment-403000697

[10:53] <squashable6> üçï JJ++ labeled issue ‚ÄúMention the status of atomicints‚Äù: https://github.com/perl6/doc/issues/2150

[10:55] *** zakharyas left
[11:00] <jmerelo> Wifi on Dutch trains is surprisingly good...

[11:04] *** BlackBerry9999 left
[11:07] <jnthn> It seems to be pretty good in quite a few places by now

[11:08] <jnthn> trains++

[11:09] *** jmerelo left
[11:10] <jnthn> haha, ping timeout just after it was complimented :D

[11:21] *** benjikun2 joined
[11:24] *** raschipi joined
[11:25] *** benjikun left
[11:28] *** lizmat left
[11:29] *** kane joined
[11:29] *** kane is now known as Guest29522

[11:29] *** Guest29522 is now known as kawaii

[11:30] *** kawaii left
[11:30] *** wamba left
[11:35] <AlexDaniel> o/

[11:35] <AlexDaniel> squashable6: status

[11:35] <squashable6> AlexDaniel, üçïüçï SQUASHathon is in progress! The end of the event in 2 days and ‚âà0 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[11:35] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/2cccb50535249483fa0e85c787c6af97

[11:36] <tyil> scimon: what makes you like mi6 :>

[11:37] <tyil> .tell jmerelo my train should arrive at 13:59

[11:37] <yoleaux> tyil: I'll pass your message to jmerelo.

[11:38] <tbrowder_> hi, #perl6

[11:38] <tyil> hi tbrowder_ 

[11:38] <El_Che> hi, dr Nick^Wtbrowser_

[11:42] *** Technato1 joined
[11:43] <tbrowder_> i‚Äôm looking at the doc order in the Language section. i like the idea of grouping by categories with topics under them in some order that may not be alphabetical. i can‚Äôt promise any progress any time soon, but it would be helpful to have some concensus on grouping titles and their order.

[11:44] <stmuk_> tbrowder_: I'm experimenting with a "quick fix" .. which is to just sort language by filename order again (like you did with the program section)

[11:44] <stmuk_> but ordering in a more explicit way is certainly better

[11:46] *** markoong joined
[11:47] <tbrowder_> ok, good. i suggest using a renaming format something like xyy-name where x is a-z for grouping and yy is 00-99 for subgrouping.

[11:48] *** lizmat joined
[11:48] *** wamba joined
[11:49] <stmuk_> I wondered if the ordering should be done within the pod6 itself somehow rather than the filename

[11:49] <tbrowder_> stmuk: i think that‚Äôs not a bad solution (but devil in naming details).

[11:50] <tbrowder_> to create groups we can just add a page with the desired title for each group.

[11:50] <tbrowder_> using the xyy-name scheme.

[11:52] <squashable6> üçï AlexDaniel++ wrote a comment on ‚ÄúMention the status of atomicints‚Äù: https://github.com/perl6/doc/issues/2150#issuecomment-403011927

[11:52] <squashable6> üçïüçïüçï  First contribution by AlexDaniel++! ‚ô•

[11:52] <tbrowder_> ordering within the pod could be done with more backend work using some agreed-upon id or other key as a config entry on a defined or paragraph block.

[11:54] <tbrowder_> stmuk: for long-term maintenance that is imo the best way to go. maybe the easiest since we already use pod data!

[11:55] <stmuk_> I also think we should aim to make it easier for other HTML front-ends to process the pod6

[11:55] <tbrowder_> roger!

[11:56] *** jmerelo joined
[11:57] <Geth> ¬¶ doc: f64919368c | (JJ Merelo)++ | doc/Type/atomicint.pod6

[11:57] <Geth> ¬¶ doc: States when they were introduced.

[11:57] <Geth> ¬¶ doc: 

[11:57] <Geth> ¬¶ doc: Refs #2150. I'm not sure if this is it, so not closing it for now.

[11:57] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/f64919368c

[11:57] <synopsebot_> Link: https://doc.perl6.org/type/atomicint

[11:58] <tbrowder_> each page has ‚Äú=begin pod‚Äù so we can add to that line something like ‚Äú:page-order<xyy>‚Äù

[11:59] <squashable6> üçï JJ++ wrote a comment on ‚ÄúNo books mentioned in Perl 6 documentation‚Äù: https://github.com/perl6/doc/issues/2143#issuecomment-403013268

[12:00] *** Technato1 left
[12:01] *** Technato1 joined
[12:04] <squashable6> üçï tbrowder++ wrote a comment on ‚Äú"I don't know what's introductory in perl6/doc"‚Äù: https://github.com/perl6/doc/issues/2145#issuecomment-403014210

[12:04] <squashable6> üçïüçïüçï  First contribution by tbrowder++! ‚ô•

[12:04] *** spycrab0 left
[12:04] *** spycrab0 joined
[12:09] <Geth> ¬¶ doc: b1f3fbbd1f | (Steve Mynott)++ | htmlify.p6

[12:09] <Geth> ¬¶ doc: sort language index by file name to allow author control of order

[12:09] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/b1f3fbbd1f

[12:09] <Geth> ¬¶ doc: 2cfbe8035e | (Steve Mynott)++ | htmlify.p6

[12:09] <Geth> ¬¶ doc: Merge branch 'stmuk'

[12:09] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/2cfbe8035e

[12:09] <squashable6> üçïüçïüçï  First contribution by stmuk++! ‚ô•

[12:09] <squashable6> üçï stmuk++ wrote a comment on ‚Äú"I don't know what's introductory in perl6/doc"‚Äù: https://github.com/perl6/doc/issues/2145#issuecomment-403015396

[12:09] <squashable6> üçï zoffixznet++ wrote a comment on ‚ÄúNo books mentioned in Perl 6 documentation‚Äù: https://github.com/perl6/doc/issues/2143#issuecomment-403015460

[12:09] <squashable6> üçïüçïüçï  First contribution by zoffixznet++! ‚ô•

[12:13] *** jmerelo left
[12:13] *** yqt joined
[12:18] <tbrowder_> stmuk: as a start, i‚Äôadd ‚Äú:page-order<someval>‚Äù to each page‚Äôs ‚Äú=begin pod‚Äù line. as a starting value, i‚Äôll use ‚ÄúaNN‚Äù for each page where NN is the current order.  Then, after that is complete, htmlify  can be modified. Then the fun begins for adding category pages and page order values.

[12:23] *** zakharyas joined
[12:23] *** yqt left
[12:24] *** Kaiepi left
[12:29] *** Kaiepi joined
[12:31] <squashable6> üçï mienaikage++ wrote a comment on ‚ÄúHow to use wincompose (unicode_entry)‚Äù: https://github.com/perl6/doc/issues/1531#issuecomment-403020294

[12:31] <squashable6> üçïüçïüçï  First contribution by mienaikage++! ‚ô•

[12:36] <squashable6> üçï JJ++ wrote a comment on ‚ÄúHow to use wincompose (unicode_entry)‚Äù: https://github.com/perl6/doc/issues/1531#issuecomment-403021405

[12:38] <scimon> tyil: Just the fact it makes building, testing and releasing modules really simple. Thanks. 

[12:39] <Geth> ¬¶ doc: 5eac8134e0 | (Steve Mynott)++ | doc/Language/faq.pod6

[12:39] <Geth> ¬¶ doc: add perl6books.com to faq

[12:39] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/5eac8134e0

[12:39] <synopsebot_> Link: https://doc.perl6.org/language/faq

[12:40] *** Technato1 left
[12:40] <squashable6> üçï stmuk++ wrote a comment on ‚ÄúNo books mentioned in Perl 6 documentation‚Äù: https://github.com/perl6/doc/issues/2143#issuecomment-403022407

[12:40] *** mcmillhj joined
[12:40] <scimon> So I've fallen down a Rabbit hole and have been making a module to do percentages based on the Medium article Jo Christian Oterhals wrote. Includes of, *, +, - and =- operators 

[12:41] <scimon> (With the unicode one of that).

[12:41] <scimon> +- not =- 

[12:41] *** HaraldJoerg1 is now known as HaraldJoerg

[12:42] <scimon> (And now I'm surprised we don't have a +- operator 

[12:44] <tyil> scimon: ah

[12:44] <tyil> I'm interested as I develop App::Assixt, which also helps in building and releasing modules

[12:44] <tyil> wanted to see if there's anything in particular that I could learn from mi6 to improve assixt

[12:48] *** wamba left
[12:48] <AlexDaniel> scimon: +- operator?

[12:50] *** wamba joined
[12:50] *** Zoffix joined
[12:51] <Zoffix> samcv: you around?

[12:56] <samcv> Zoffix: yep

[12:56] <Zoffix> hah, I already committed

[12:57] <Zoffix> oh wait

[12:57] <Zoffix> I forgot to save the file in my editor :S

[12:57] <Zoffix> samcv: does "Decoding/Encoding windows-1252, windows-1251 and Latin1 throw on invalid input/output" require different behaviour between language versions in *methods* of some objects?

[12:58] *** zakharyas left
[13:00] <Zoffix> .tell moritz I wasn't sure what your timetable was, so I deferred the ".DEFINITE @%& params" to 6.e: https://github.com/perl6/6.d-prep/tree/master/deferred-to-6.e#--and-possibly--sigils-only-accept-definite-objects   If you still want them to go into 6.d, now's a good time to implement them :)

[13:00] <yoleaux> Zoffix: I'll pass your message to moritz.

[13:00] <samcv> Zoffix: yes

[13:01] <samcv> i wanted the next version to default to strict decoding of win-1251 and win-1252

[13:01] <Zoffix> samcv: alright, then we have to defer that until 6.e, because in 6.d we won't have the machinery to do that

[13:01] <samcv> well

[13:01] *** zakharyas joined
[13:01] <Zoffix> Because of R#1289

[13:01] <synopsebot_> R#1289 [open]: https://github.com/rakudo/rakudo/issues/1289 [6.e] Implement a Way to Know Caller's Language

[13:02] <samcv> Zoffix: this line https://github.com/rakudo/rakudo/blob/master/src/core/Encoding/Encoder/Builtin.pm6#L14

[13:03] <samcv> it would be strict by default instead of being loose by defualt as it is now

[13:03] <samcv> so there may not be a way to do that yet

[13:03] <Zoffix> .tell jnthn reminder that you're listed as a stakeholder for "start in sink attaches error handler" feature for 6.d: https://github.com/perl6/6.d-prep/blob/master/TODO/FEATURES.md#make-start-blocks-in-sink-context-attach-an-error-handler

[13:03] <yoleaux> Zoffix: I'll pass your message to jnthn.

[13:03] <Zoffix> samcv: yeah, we can only make compile-time decisions based on language, ATM.

[13:04] *** raynold left
[13:05] *** synopsebot_ left
[13:05] *** synopsebot joined
[13:05] *** ChanServ sets mode: +v synopsebot

[13:06] <Geth> ¬¶ doc: 92fdc6cbcf | (Steve Mynott)++ | 3 files

[13:06] <Geth> ¬¶ doc: Probably makes more sense to have the source language first which also looks better on the webpage in terms of ordering

[13:06] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/92fdc6cbcf

[13:06] *** eiro joined
[13:06] <eiro> hello people

[13:06] <Zoffix> \o

[13:07] <sjn> o/

[13:07] *** sjn is now known as _sjn

[13:07] <stmuk_> hmm there isn't a program to convert pod5 to pod6 is there?

[13:09] <timotimo> Zoffix: any clue for optional parameters of @/% sigils? should a ? at the end implicitly change the type constraint to drop the :D?

[13:10] <Zoffix> timotimo: I'm not the stakeholder for that feature :)

[13:10] *** lizmat left
[13:10] <timotimo> true

[13:10] <timotimo> moritz: ^

[13:11] <moritz> it should, yes

[13:11] <yoleaux> 13:00Z <Zoffix> moritz: I wasn't sure what your timetable was, so I deferred the ".DEFINITE @%& params" to 6.e: https://github.com/perl6/6.d-prep/tree/master/deferred-to-6.e#--and-possibly--sigils-only-accept-definite-objects   If you still want them to go into 6.d, now's a good time to implement them :)

[13:11] *** _sjn left
[13:12] <Zoffix> TBH, last night I was thinking about it and while it's true the proposal says people don't expect to accept typeobjects, it's equally true that it's not quite a problem I encountered IRL that a `@foo` parameter would all of a sudden be a type object. So to me, it feels like this is solving a hypothetical edge-case scenario, but it's introducing extra things for the programmer to learn: now a person learning

[13:12] <Zoffix> about `@foo` in parameters has to learn about `:D`/`:U` constraints at the same time

[13:12] *** sjn_ is now known as sjn

[13:13] <Zoffix> And now it's complicated by the fact that we're dropping the constraint conditionally, which invalidates the original purpose of the change.

[13:13] * Zoffix switches to -¬Ω on that change

[13:13] <moritz> Zoffix: we have had people in the chat asking questions that had this as root cause

[13:13] <Zoffix> And if we're conditionally dropping that contraint from `@foo`, why aren't we dropping it from `Int:D $foo`?

[13:13] <moritz> so it's not theoretical

[13:14] <Zoffix> moritz: how did they end up with a typeobject in those parameters?

[13:15] <moritz> Zoffix: my memories are fuzzy, but I think they did something like foo(bar()), and bar accidentally returned a type object

[13:16] <Zoffix> I think it's easy to come up with all sorts of crazy special behaviour that may look easy for us to remember because we already know most of the language, but from the perspective of programmers coming to the language or programmers who use it infrequently we're weaving a complicated web of special cases and behaviours. There's already a language that does that: Perl 5. 

[13:16] <eiro> AlexDaniel``, is it ok to push in master ? because JJ fixed the 2 issues but still

[13:16] <eiro> * this sentence has no sense

[13:17] <AlexDaniel> eiro: yes

[13:17] <eiro> * a sentence start with an uppercase

[13:17] <eiro> * ...

[13:17] <eiro> ko :)

[13:17] <eiro> ok ):

[13:17] <Zoffix> m: sub foo (@foo) { .say for @foo }; sub bar { Array }; foo bar

[13:17] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Invocant of method 'iterator' must be an object instance of type 'Array', not a type object of type 'Array'.  Did you forget a '.new'?‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:18] <Zoffix> m: sub foo (@foo) { dd @foo[42] }; sub bar { Array }; foo bar

[13:18] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Any $scalar = Any‚ê§¬ª

[13:18] * Zoffix was expecting "out of range" error

[13:18] <Zoffix> m: Array[42]

[13:18] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´===SORRY!===‚ê§Parameter 't' of routine 'parameterize' must be a type object of type 'Mu', not an object instance of type 'Int'.  Did you forget a 'multi'?‚ê§¬ª

[13:18] <Zoffix> m: (Array)[42]

[13:18] <camelia> rakudo-moar ade83c861: ( no output )

[13:19] <Zoffix> m: (42)[42]

[13:19] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Index out of range. Is: 42, should be in 0..0‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:19] <Zoffix> like this one

[13:19] *** lizmat joined
[13:20] <scimon> AlexDaniel: a +- b == (a-b, a+b) 

[13:21] *** cognominal joined
[13:21] <eiro> it seems the |¬†is missing. X<|submethod> instead of X<submethod>

[13:21] <AlexDaniel> scimon: oh, ¬±, it's mentioned here: https://github.com/rakudo/rakudo/wiki/save-me-from-ASCII#-9

[13:21] <eiro> what is the difference ?

[13:21] <Zoffix> m: my \a = 42; my \b = 3; say a +- b

[13:21] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´39‚ê§¬ª

[13:22] <Geth> ¬¶ doc: 47cfeb56f7 | (Steve Mynott)++ | doc/Language/haskell-to-p6.pod6

[13:22] <Geth> ¬¶ doc: haskell retitle

[13:22] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/47cfeb56f7

[13:22] <synopsebot> Link: https://doc.perl6.org/language/haskell-to-p6

[13:22] <Zoffix> :)

[13:22] *** domidumont left
[13:22] <eiro> hmm ... jut making it invisible with an empty label :)

[13:23] <scimon> Yeah but that is doing a + -b Where as I'm also playing with the ¬± version.

[13:23] <AlexDaniel> eiro: I think the syntax is X<text|label>

[13:23] *** cog left
[13:24] <scimon> This mostly comes from me playing with percentages as objects and wanting to be able to write x ¬± y% 

[13:24] <AlexDaniel> eiro: ah, yes. I see what you're saying now :)

[13:24] *** domidumont joined
[13:24] <AlexDaniel> eiro: the problem is that the text below has nothing about submethods‚Ä¶

[13:25] <AlexDaniel> eiro: well, just a little bit

[13:25] <Zoffix> m: sub postcircumfix:<¬± %> { $^a+$^b | $a-$b }; say 22 ¬± 5%

[13:26] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Confused‚ê§at <tmp>:1‚ê§------> 3cumfix:<¬± %> { $^a+$^b | $a-$b }; say 227‚èè5 ¬± 5%‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚ê§    ‚Ä¶¬ª

[13:26] <squashable6> üçï lizmat++ wrote a comment on ‚ÄúNo books mentioned in Perl 6 documentation‚Äù: https://github.com/perl6/doc/issues/2143#issuecomment-403033607

[13:26] <Zoffix> m: sub postcircumfix:<¬± %> { $^a+$^b | $a-$b }; say 22¬± 5%

[13:26] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing required term after infix‚ê§at <tmp>:1‚ê§------> 3ix:<¬± %> { $^a+$^b | $a-$b }; say 22¬± 5%7‚èè5<EOL>‚ê§    expecting any of:‚ê§        prefix‚ê§        term‚ê§¬ª

[13:26] <AlexDaniel> ‚ÄúA Submethod is a method that is not inherited by child classes‚Äù uh‚Ä¶ what?

[13:26] <AlexDaniel> why? what? Am I reading this incorrectly?

[13:26] <lizmat> no, I think that's correct ?

[13:27] *** Technato1 joined
[13:27] <Zoffix> Looks correct to me

[13:27] <scimon> Zoffix: I've got a whole pile of stuff with % being a postfix operator to create a percentage object :)

[13:27] <AlexDaniel> hm‚Ä¶ yes, seems to be correct :) docs++

[13:27] <Geth> ¬¶ doc: 0f2be9bf53 | (Marc Chantreux)++ | doc/Language/classtut.pod6

[13:27] <Geth> ¬¶ doc: hide label of submethod entry

[13:27] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/0f2be9bf53

[13:27] <synopsebot> Link: https://doc.perl6.org/language/classtut

[13:27] <squashable6> üçïüçïüçï  First contribution by eiro++! ‚ô•

[13:28] <Geth> ¬¶ doc: f00c099a68 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/faq.pod6

[13:28] <Geth> ¬¶ doc: Change 6.d FAQ

[13:28] <Geth> ¬¶ doc: 

[13:28] <Geth> ¬¶ doc: - Clarify the expectations for new features

[13:28] <Geth> ¬¶ doc: - Remove 6.d-prep repo; it's not for users

[13:28] <synopsebot> Link: https://doc.perl6.org/language/faq

[13:28] <Geth> ¬¶ doc: - Be less vague about release date

[13:28] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/f00c099a68

[13:30] <Geth> ¬¶ doc: tbrowder++ created pull request #2153: add a page-order config tag to all Language docs

[13:30] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2153

[13:30] <squashable6> üçï tbrowder++ opened pull request ‚Äúadd a page-order config tag to all Language docs‚Äù: https://github.com/perl6/doc/pull/2153

[13:30] <Geth> ¬¶ doc: 4831003b7a | (Marc Chantreux)++ | doc/Language/classtut.pod6

[13:30] <Geth> ¬¶ doc: missing L

[13:30] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/4831003b7a

[13:30] <synopsebot> Link: https://doc.perl6.org/language/classtut

[13:31] <Altreus> Can I go backwards with an enum to look up the name given a value?

[13:31] <Geth> ¬¶ doc: 4017039ddb | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/faq.pod6

[13:31] <Geth> ¬¶ doc: Clarify availability of 6.d features in Rakudo

[13:31] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/4017039ddb

[13:31] <synopsebot> Link: https://doc.perl6.org/language/faq

[13:32] <Zoffix> Altreus: .enums method gives you a list of key/value Pairs

[13:32] <tbrowder_>  stmuk: ps

[13:32] <AlexDaniel> m: say Signal(20)

[13:32] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´SIGTSTP‚ê§¬ª

[13:32] <Zoffix> oh

[13:32] <Altreus> I can grep it in the perl5 way but I wondered if there were a perl6y way

[13:32] <AlexDaniel> Altreus: like this ‚Üë ?

[13:32] <Altreus> oh

[13:32] <Zoffix> m: enum Foo (:1a, :1b, :1c, :2d); dd Foo(1)

[13:32] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Foo::c‚ê§¬ª

[13:33] <Zoffix> That looks broken to me

[13:33] <Zoffix> m: enum Foo (:1a, :1b, :1c, :2d); dd a

[13:33] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Foo::a‚ê§¬ª

[13:33] <Zoffix> m: enum Foo (:1a, :1b, :1c, :2d); dd +a

[13:33] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´1‚ê§¬ª

[13:33] <Zoffix> Or at least incomplete

[13:33] <Altreus> m: enum E(<cat dog>); E(1).^name

[13:33] <camelia> rakudo-moar ade83c861: ( no output )

[13:33] <Altreus> m: enum E(<cat dog>); E(1)

[13:33] <camelia> rakudo-moar ade83c861: ( no output )

[13:33] <timotimo> you have to "say" it, too

[13:33] <Altreus> oh heh

[13:33] <Altreus> thanks

[13:33] <Altreus> m: enum E(<cat dog>); say E(1)

[13:33] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´dog‚ê§¬ª

[13:33] <Altreus> swish

[13:33] * Altreus used to perlbot

[13:34] <tbrowder_> stmuk: with pr #2153 pages now have a unique sorting tag, ready for htmlify pagic.

[13:34] <AlexDaniel> Zoffix: broken because it gives only one value?

[13:34] <tbrowder_> *magic

[13:34] <Zoffix> m: enum Foo (:1a, :1b, :1c, :2d); say Foo.enums.categorize(*.value){1}

[13:34] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´[b => 1 a => 1 c => 1]‚ê§¬ª

[13:34] <Zoffix> Altreus: ^ no grep :P

[13:35] <Altreus> that's the magic

[13:35] <Altreus> not that I doubted it but I am quite enjoying perl6

[13:35] <timotimo> m: enum Foo (:1a, :1b, :1c, :2d); say Foo.enums.invert.Hash.perl

[13:35] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´{"1" => "c", "2" => "d"}‚ê§¬ª

[13:35] <Altreus> The only thing it's not given me out of the box so far is being able to abort a Promise.in

[13:35] <Zoffix> AlexDaniel: Incomplete because it gives only one value or broken because it silently picks an arbitrary value from a set of available ones

[13:35] <timotimo> m: enum Foo (:1a, :1b, :1c, :2d); say (my %).push(Foo.enums.invert)

[13:35] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´{1 => [a c b], 2 => d}‚ê§¬ª

[13:35] <timotimo> see, no categorize

[13:35] <AlexDaniel> Zoffix: I don't think it's arbitrary, it's probably the last one

[13:35] <Zoffix> heh

[13:35] <Zoffix> "probably" :)

[13:36] <AlexDaniel> :) I personally have seen no tests for it

[13:36] <timotimo> i hope it relies on hash order :P

[13:36] <AlexDaniel> but maybe it is tested, I don't know

[13:36] *** Zoffix left
[13:39] <AlexDaniel> but I don't think it's incomplete

[13:39] <timotimo> i would not expect MyEnum(1) to give me anything but an instance of MyEnum

[13:39] <timotimo> i.e. not a list

[13:39] <AlexDaniel> you said ‚Äúgive me enum entry that has value 0‚Äù and it answered ‚Äúhere you go: c‚Äù

[13:40] *** Zoffix joined
[13:40] <timotimo> perhaps if you have debug output, like you get something returned from a C library and you want to output what enum values it corresponds to but you don't know the "context"

[13:40] <Zoffix> Just realized why Array[42] gives Any: it's needed for autovivification magic

[13:40] *** Zoffix left
[13:40] <timotimo> yup

[13:41] <timotimo> well, the scalar is what's responsible, not the Any itself

[13:41] <timotimo> but that's the reason it doesn't, for example, throw an exception

[13:41] <timotimo> except if you have a shaped array, in that case autoviv doesn't exist

[13:42] <raschipi> That's why I was confused. I just saw normal autovivification and thought: what is he on about?

[13:42] <timotimo> i must have missed where he was first confused about that

[13:42] <timotimo> ah, there it is

[13:43] <AlexDaniel> timotimo: well, we can make it return any() junction, and then bring popcorn to see the world burn and people scream in pain :D

[13:43] <AlexDaniel> at least no one will argue that it is ‚Äúincomplete‚Äù :D

[13:45] * AlexDaniel runs away to take a nap before he gets more bright ideas

[13:46] <Geth> ¬¶ doc: b97b039809 | (Zoffix Znet)++ | doc/Type/IO/Handle.pod6

[13:46] <Geth> ¬¶ doc: Loosen language around `-` special path

[13:46] <Geth> ¬¶ doc: 

[13:46] <Geth> ¬¶ doc: We won't be able to unmagicallize it in 6.d, but later we will

[13:46] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/b97b039809

[13:46] <synopsebot> Link: https://doc.perl6.org/type/IO::Handle

[13:48] <Juerd> m: (1, 2)(3)

[13:48] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Invocant of method 'CALL-ME' must be a type object of type 'List', not an object instance of type 'List'.  Did you forget a 'multi'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:50] <Juerd> The error message is maybe trying too hard to help out here :)

[13:51] <lizmat> m: dd List(2,3,4)  # it's a consequence of this

[13:51] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´(2, 3, 4)‚ê§¬ª

[13:52] <timotimo> maybe it should have a parameter in the exception message "this type is from core" so it doesn't suggest "you forgot something?"

[13:55] <Juerd> lizmat: I understand that but I doubt anyone new to the language will :)

[13:56] <Juerd> I encountered this when expanding a whatevercode expression with a comma :)

[13:57] <Juerd> It did puzzle me for a minute or so

[14:00] *** robertle left
[14:01] <Geth> ¬¶ doc: e640491477 | (Zoffix Znet)++ | 2 files

[14:01] <Geth> ¬¶ doc: Loosen language in 6.d deprecation warnings

[14:01] <Geth> ¬¶ doc: 

[14:01] <Geth> ¬¶ doc: - .path talks about Rakudo specifically; toss versions, since

[14:01] <Geth> ¬¶ doc:     we won't actually be able to emit those warnings

[14:01] <Geth> ¬¶ doc: - Pair.freeze: remove version from message. Deprecation was deferred

[14:01] <Geth> ¬¶ doc:     to 6.e and I don't think the proposal has had enough eyes yet

[14:01] <Geth> ¬¶ doc:     to guarantee removal will occur.

[14:01] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/e640491477

[14:01] *** jmerelo joined
[14:07] <squashable6> üçï JJ++ submitted a review on pull request ‚Äúadd a page-order config tag to all Language docs‚Äù: https://github.com/perl6/doc/pull/2153#pullrequestreview-135028206

[14:11] <Geth> ¬¶ doc: 58323af3a0 | (Tom Browder)++ | 67 files

[14:11] <Geth> ¬¶ doc: add a page-order config tag to all Language docs

[14:11] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/58323af3a0

[14:11] <Geth> ¬¶ doc: 6794a8497d | (Tom Browder)++ (committed using GitHub Web editor) | 67 files

[14:11] <Geth> ¬¶ doc: Merge pull request #2153 from tbrowder/page-order

[14:11] <Geth> ¬¶ doc: 

[14:11] <Geth> ¬¶ doc: add a page-order config tag to all Language docs

[14:11] <squashable6> üçï tbrowder++ merged pull request ‚Äúadd a page-order config tag to all Language docs‚Äù: https://github.com/perl6/doc/pull/2153

[14:11] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/6794a8497d

[14:11] *** psychoslave left
[14:11] *** psychoslave joined
[14:12] *** mcmillhj_ joined
[14:13] *** mcmillhj left
[14:16] *** jmerelo left
[14:16] <Geth> ¬¶ doc: 76c9797d7e | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/faq.pod6

[14:16] <Geth> ¬¶ doc: Clarify CPAN FAQ

[14:16] <Geth> ¬¶ doc: 

[14:16] <Geth> ¬¶ doc: Mention that modules don't show up on metacpan.org, since a lot

[14:16] <Geth> ¬¶ doc: of people seem to mean MetaCPAN when they say "CPAN".

[14:16] <synopsebot> Link: https://doc.perl6.org/language/faq

[14:16] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/76c9797d7e

[14:18] <Geth> ¬¶ doc: 20dc2c29be | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/faq.pod6

[14:18] <Geth> ¬¶ doc: Make NativeCall a link

[14:18] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/20dc2c29be

[14:18] <synopsebot> Link: https://doc.perl6.org/language/faq

[14:22] *** subr joined
[14:22] *** subroot joined
[14:24] <Geth> ¬¶ doc: e2289689df | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/faq.pod6

[14:24] <Geth> ¬¶ doc: Use more links and truth

[14:24] <Geth> ¬¶ doc: 

[14:24] <Geth> ¬¶ doc: - Actually link to referenced modules

[14:24] <Geth> ¬¶ doc: - s/trivially simple/fairly easy/ to be more truthful

[14:24] <synopsebot> Link: https://doc.perl6.org/language/faq

[14:24] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/e2289689df

[14:25] *** pmurias joined
[14:26] *** epony left
[14:32] *** sno left
[14:32] *** epony joined
[14:33] *** Technato1 left
[14:36] *** lizmat left
[14:44] *** lizmat joined
[14:44] *** skids joined
[14:48] *** benjikun joined
[14:49] *** wamba left
[14:49] *** benjikun2 left
[14:50] *** robertle joined
[14:51] <jkramer> ZofBot: Heyho, I'm back, although a day late. :) Does this sound alright in regards to the non-released change? I basically copied and combined your suggestions from two days ago

[14:51] <jkramer> ZofBot: http://dpaste.com/0B5F45S.txt

[14:54] *** molaf joined
[14:56] *** troys joined
[15:03] *** scimon left
[15:04] <lizmat> commute to NLPW&

[15:04] *** lizmat left
[15:06] *** Kaiepi left
[15:07] *** Kaiepi joined
[15:08] *** csegura joined
[15:13] *** fake_space_whale joined
[15:15] *** Zoffix joined
[15:16] <Zoffix> So is it "Perl 6.d 'Diwali'", "Perl 6 6.d 'Diwali'", "Perl 6 'Diwali' 6.d" or something else?

[15:16] <Zoffix> jkramer: looks good

[15:18] *** csegura left
[15:18] <Juerd> Zoffix: I suggest "Perl 6.d (Diwali)"

[15:18] <Zoffix> üëç

[15:19] <Juerd> Whatever that is, my terminal doesn't render it :)

[15:19] <Zoffix> u: üëç

[15:19] <unicodable6> Zoffix, U+1F44D THUMBS UP SIGN [So] (üëç)

[15:19] <Juerd> :)

[15:20] <Geth> ¬¶ doc: 11b5ae8eb3 | (Jonas Kramer)++ | doc/Type/IO.pod6

[15:20] <Geth> ¬¶ doc: Re-added documentation for rakudo/rakudo#1906.

[15:20] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/11b5ae8eb3

[15:20] <synopsebot> Link: https://doc.perl6.org/type/IO

[15:20] <squashable6> üçïüçïüçï  First contribution by jkramer++! ‚ô•

[15:20] <synopsebot> RAKUDO#1906 [open]: https://github.com/rakudo/rakudo/issues/1906 [RFC][docs needed][easy to resolve][good first issue][testneeded] [RESOLVED; NEED TEST] &prompt should pass stuff through `val`

[15:20] <raschipi> Should I put Zalgo text here again to convince people to get better terminals?

[15:21] <Juerd> raschipi: Nah, I just needed to apt-get install fonts-symbola

[15:21] <jkramer> squashable6: Lies! I contributed plenty of (tiny) doc fixes

[15:21] <squashable6> jkramer, ALRIGHT, LET'S DO IT!!!

[15:21] <jkramer> :D

[15:21] *** domidumont left
[15:22] <Juerd> Ooh, fonts-noto-color-emoji is prettier.

[15:22] *** hudo left
[15:22] <Juerd> https://juerd.nl/i/c4770e43bff7b4bed5b1ae839ceeeead.png

[15:23] <Juerd> Huh, suddenly they're everywhere

[15:23] <Juerd> And it seems like a good spam filter to just block all mail with emoji in the subject

[15:24] <Juerd> Half of my manually deleted (well, moved to different folder) emails have them

[15:25] * geekosaur gets a few messages with emoji (commercial but solicited), so not so useful here

[15:26] <ingy> masak: can you tell me how to set up colabti?

[15:38] *** subr left
[15:38] *** subroot left
[15:41] *** FROGGS joined
[15:42] *** raschipi left
[15:43] <Zoffix> Wonder if promoting Perl 6 counts as "commercial use"

[15:48] <Juerd> It shouldn't

[15:52] <Zoffix> No? :) OK

[15:52] * Zoffix limbos under the legal bar

[15:52] *** sena_kun joined
[15:53] <Juerd> Perl 6 itself is not a for-profit or commercial project

[15:53] <Juerd> And that it may also be used for profit or commercial projects, is not relevant

[15:56] *** zakharyas left
[15:56] *** Xliff left
[15:56] <Zoffix> What about TPF grants? That don't count? Like if someone is doing a grant and is promoting P6 and is benefitting directly from it?

[15:57] <Juerd> TPF is a non-profit organisation

[15:57] <Juerd> Getting paid for something doesn't necessarily make that something a commercial endeavour 

[15:58] <Juerd> It's normal for non-profit organisations to have paid employees and to pay external workers

[15:59] <mst> Zoffix: this sounds like you have some sort of specific worry

[16:05] <Zoffix> Ah, OK.

[16:06] <Zoffix> mst: yeah, I'm making some Diwali flyers and this sexy font is not allowed for commercial use :) https://www.dafont.com/pw-curvy-regular-script.font

[16:07] <mst> I would imagine that, provided you're not charging for the result, you're fine

[16:07] <Zoffix> cool

[16:07] <mst> well and also not promoting a for-profit company

[16:07] <mst> but promoting perl6 doesn't suffer from either of those

[16:19] <El_Che> in .be real grants are exempt from taxes

[16:19] <Zoffix> in .ca I had to give ~33% of mine to gov

[16:19] *** psychoslave left
[16:20] <El_Che> as there is a difference between a grant and employement

[16:20] <El_Che> the ltter being commercial even if the organisation is a non-profit

[16:20] <El_Che> Zoffix: as expected, not everyone can give grants around here

[16:20] <El_Che> mostly academic and scientific organisations

[16:21] <El_Che> (universities's grant is just employment which grants you taxes, but also social protection)

[16:23] <El_Che> heat and trains is a bad combination (waiting in a broken train to me moved from the tracks)

[16:30] <squashable6> üçï nxadm++ wrote a comment on ‚ÄúNo books mentioned in Perl 6 documentation‚Äù: https://github.com/perl6/doc/issues/2143#issuecomment-403083626

[16:30] <squashable6> üçïüçïüçï  First contribution by nxadm++! ‚ô•

[16:30] *** fake_space_whale left
[16:30] <El_Che> do I get a pizza for that :)

[16:30] <El_Che> wow

[16:33] *** dakkar left
[16:33] *** Khisanth left
[16:43] *** domidumont joined
[16:46] *** wamba joined
[16:47] *** Khisanth joined
[16:48] <stmuk_> does =output work correctly in pod6? it seems to gobble whitespace when the docs say it shouldn't?

[16:48] <Zoffix> stmuk_: that should be fixed on HEAD

[16:48] <Zoffix> R#1979

[16:48] <synopsebot> R#1979 [closed]: https://github.com/rakudo/rakudo/pull/1979 Fix GH #1968: input/output block lines are squeezed

[16:49] <stmuk_> ah

[16:50] <squashable6> üçï moritz++ wrote a comment on ‚ÄúNo books mentioned in Perl 6 documentation‚Äù: https://github.com/perl6/doc/issues/2143#issuecomment-403088706

[16:50] <squashable6> üçïüçïüçï  First contribution by moritz++! ‚ô•

[16:57] <squashable6> üçï nxadm++ wrote a comment on ‚ÄúNo books mentioned in Perl 6 documentation‚Äù: https://github.com/perl6/doc/issues/2143#issuecomment-403090613

[16:58] <squashable6> üçï moritz++ wrote a comment on ‚ÄúNo books mentioned in Perl 6 documentation‚Äù: https://github.com/perl6/doc/issues/2143#issuecomment-403090711

[17:08] <Geth> ¬¶ marketing: 0e9d2965af | (Zoffix Znet)++ | 13 files

[17:08] <Geth> ¬¶ marketing: Add `await` 6.d teaser flyer / ID 1530896495

[17:08] <Geth> ¬¶ marketing: review: https://github.com/perl6/marketing/commit/0e9d2965af

[17:10] <stmuk_> is that a private repo?

[17:11] <stmuk_> oops I copy and pasted wrong

[17:11] *** mcmillhj_ left
[17:12] <Zoffix> stmuk_: marketing? No, it's public

[17:13] *** perlpilot joined
[17:15] *** domidumont left
[17:15] *** psychoslave joined
[17:22] *** mcmillhj joined
[17:25] *** Zoffix left
[17:26] *** psychoslave left
[17:28] *** mcmillhj left
[17:36] *** mcmillhj joined
[17:41] *** mcmillhj left
[17:48] *** pecastro left
[17:49] *** mcmillhj joined
[17:55] *** mcmillhj left
[17:55] *** mcmillhj joined
[18:17] *** psychoslave_ joined
[18:24] *** mniip joined
[18:25] *** sauvin left
[18:25] <squashable6> üçï AlexDaniel++ wrote a comment on ‚ÄúNo books mentioned in Perl 6 documentation‚Äù: https://github.com/perl6/doc/issues/2143#issuecomment-403112080

[18:29] *** uzl joined
[18:32] <uzl> m: for 'computer'.comb -> $l1, $l2 { print $l1, $l2," " }

[18:32] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´co mp ut er ¬ª

[18:32] *** Kaiepi left
[18:32] <uzl> m: for 'ocean'.comb -> $l1, $l2 { print $l1, $l2," " }

[18:32] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´oc Too few positionals passed; expected 2 arguments but got 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§ea ¬ª

[18:33] <uzl> m: for 'ocean'.comb -> $l1, $l2='' { print $l1, $l2," " }

[18:33] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´oc ea n ¬ª

[18:34] <uzl> Is using a default positional argument in a pointy block the right way to account for a word with an odd letter count in the previous example?

[18:34] <moritz> uzl: I'd say it's one valid way

[18:35] <moritz> m: for 'ocean'.comb(2) -> $ls { print $ls, " " }

[18:35] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´oc ea n ¬ª

[18:35] <perlpilot> uzl: for what you were doing, probably.  Typically, it looks something like this:  for 'ocean'.comb -> $l1, $l2? { ... } but then you get an uninit value

[18:35] *** Kaiepi joined
[18:36] <perlpilot> uzl: When I said "typically", I wasn't being specific to .comb  :-)

[18:37] <uzl> moritz: yes, one valid way ;)

[18:38] <uzl> perlpilot: it's a simplified version of this: https://github.com/LaurentRosenfeld/thinkperl6/blob/56301edb538ee294b5cdabf5104b3030d17b40f6/book/appendix_solutions.tex#L3857-L3860

[18:39] <uzl> it seems to throw an error when it finds an odd-numbered word.

[18:41] <perlpilot> yeah, because you get an uninitialized value in the mix

[18:42] <perlpilot> my gut reaction to that would be to use classify, but tmtowtdi  :)

[18:43] <perlpilot> or maybe for $word.comb -> $even, $odd? { push @evens with $even; push @odds, $odd with $odd; }

[18:44] <moritz> m: say [Z] 'ocean'.comb.map: -> $a, $b? { ($a, $b) }

[18:44] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´((o e n) (c a (Mu)))‚ê§¬ª

[18:44] <moritz> m: say [Z] 'ocean'.comb.map: -> $a, $b? { ($a, $b).grep(&defined) }

[18:44] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Cannot resolve caller ACCEPTS(Sub+{is-pure}: Str); none of these signatures match:‚ê§    (Mu:U: \topic, *%_)‚ê§    (Mu:U: Mu:U \topic, *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:44] <AlexDaniel> m: for 'ocean'.comb.rotor(2) { .say }

[18:44] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´(o c)‚ê§(e a)‚ê§¬ª

[18:45] <AlexDaniel> m: for 'ocean'.comb.rotor(2, :partial) { .say }

[18:45] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´(o c)‚ê§(e a)‚ê§(n)‚ê§¬ª

[18:45] <moritz> m: say [Z] 'ocean'.comb.map: -> $a, $b? { ($a, $b).grep(*.defined) }

[18:45] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´((o e n))‚ê§¬ª

[18:45] <moritz> oh, [Z] doesn't like lists of different lengths

[18:45] <AlexDaniel> you can try roundrobin

[18:45] <moritz> m: say 'ocean'.comb.map( -> $a, $b? { ($a, $b).grep(*.defined) }).roundrobin

[18:45] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´No such method 'roundrobin' for invocant of type 'Seq'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:45] <perlpilot> That's part of the beauty of TMTOWTDI, it fires off all kinds of neurons in your brain  :)

[18:45] <moritz> m: say 'ocean'.comb.map( -> $a, $b? { ($a, $b).grep(*.defined) }).list.roundrobin

[18:45] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´No such method 'roundrobin' for invocant of type 'List'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:46] <moritz> m: say &roundrobin

[18:46] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´sub roundrobin (|) { #`(Sub|62174272) ... }‚ê§¬ª

[18:46] *** robertle left
[18:46] <moritz> m: say roundrobin 'ocean'.comb.map( -> $a, $b? { ($a, $b).grep(*.defined) })

[18:46] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´((o e n) (c a))‚ê§¬ª

[18:46] <uzl> perlpilot: that's what I'm seeing!

[18:46] <moritz> thought that's quite a beast we came up with here :-)

[18:47] *** Zoffix joined
[18:47] <Zoffix> m: say "ocean".comb.batch: 2

[18:47] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´((o c) (e a) (n))‚ê§¬ª

[18:47] <Zoffix> (shorter version of `.rotor($n, :partial)`

[18:47] <Zoffix> )

[18:48] <moritz> oh, batch is nice

[18:48] <moritz> m: say roundrobin "ocean".comb.batch: 2

[18:48] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´((o e n) (c a))‚ê§¬ª

[18:49] <AlexDaniel> (available since rakudo 2017.02 it seems)

[18:49] <uzl> I'll probably go with the most obvious, albeit less elegant way. the positional parameter defaulted to an empty string.

[18:50] <AlexDaniel> uzl: depending on how large your data is, you might also want to measure performance of different solutions

[18:50] <uzl> But this is awesome! So many ways to approach the same problem! :)

[18:50] <perlpilot> uzl: programming isn't about elegance, it's about getting stuff done  ;)

[18:52] <uzl> I was about to submit a pull request to the book's Github repo. Probably will just point the author to this thread.

[18:55] <perlpilot> uzl: so you've been using "Think Perl¬†6" for learning?  What do you think of it?

[19:00] <uzl> perlpilot: It's been great. Even though Perl 6 is an extensive language, Laurent covers a lot ground with that book. Certainly useful for complete beginners

[19:00] *** natrys joined
[19:00] <uzl> to computer science, programming and Perl 6.

[19:01] <perlpilot> I haven't really looked at the book extensively, but that's the impression I got from speed reading a few sections.  So, I pointed my 12 year old son at it for learning.  He hasn't gotten very far, but I think he's doing okay.

[19:02] *** Zoffix left
[19:05] <uzl> perlpilot: It's a great book. He should learn a few things if he commits to it and do the exercises. The solutions in the back are really detailed so it's worth look into them.

[19:05] *** telex joined
[19:09] <uzl> perlpilot: There have been few commits to the repo with few fixes and corrections after the book was published. Probably worth looking into the commit history to spot the errors in the physical copy if that's what he's using.

[19:09] *** Xliff joined
[19:11] <perlpilot> he's looking at the pdf so i'll keep that in mind

[19:12] *** Xliff left
[19:13] <uzl> that's fine then!

[19:13] *** uzl left
[19:23] *** perlpilot left
[19:40] *** pecastro joined
[19:56] *** benjikun2 joined
[19:58] *** benjikun left
[20:07] *** pecastro left
[20:13] *** pecastro joined
[20:51] *** lizmat joined
[21:05] *** rindolf left
[21:06] *** psychoslave_ left
[21:06] *** rindolf joined
[21:11] *** skids left
[21:12] *** perlpilot joined
[21:15] <buggable> New CPAN upload: PDF-Class-0.2.5.tar.gz by WARRINGD http://modules.perl6.org/dist/PDF::Class:cpan:WARRINGD

[21:26] *** mcmillhj left
[21:36] *** wamba left
[21:43] *** MasterDuke left
[21:46] *** HaraldJoerg left
[21:50] *** MasterDuke joined
[21:58] *** Xliff joined
[21:58] <Xliff> m: my $a = -> $a { $a };

[21:58] <camelia> rakudo-moar ade83c861: ( no output )

[21:58] <Xliff> m: my $a = -> $a { $a }; say $a.^name;

[21:58] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Block‚ê§¬ª

[21:59] *** pecastro left
[21:59] <Xliff> m: my $a = -> $a { $a }; say $a(42)

[21:59] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´42‚ê§¬ª

[21:59] *** koto joined
[21:59] <Xliff> m: my $a = -> $a --> Int { $a }; say $a(42)

[21:59] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´42‚ê§¬ª

[21:59] <Xliff> m: my $a = -> $a --> Int { $a }; say $a("B:)

[21:59] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in double quotes; couldn't find final '"' (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> 3y $a = -> $a --> Int { $a }; say $a("B:)7‚èè5<EOL>‚ê§    expecting ‚Ä¶¬ª

[21:59] <Xliff> m: my $a = -> $a --> Int { $a }; say $a("B")

[21:59] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Type check failed for return value; expected Int but got Str ("B")‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:00] *** sena_kun left
[22:00] *** koto left
[22:00] <Xliff> m: my $a = -> Int $a --> { $a }; say $a("B")

[22:00] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Malformed return value‚ê§at <tmp>:1‚ê§------> 3my $a = -> Int $a -->7‚èè5 { $a }; say $a("B")‚ê§¬ª

[22:00] <Xliff> m: my $a = -> Int $a { $a }; say $a("B")

[22:00] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Type check failed in binding to parameter '$a'; expected Int but got Str ("B")‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:04] <Altreus> I seem to remember an idiomatic way of conditionally adding a pair to a list; in perl5 I'd do (x => $y) x!! $y, for example

[22:05] <Altreus> anyone able to read my mind and know what I mean? :)

[22:05] <Xliff> m: my $a = -> Int $a { $a }; say $a("B")

[22:05] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Type check failed in binding to parameter '$a'; expected Int but got Str ("B")‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:09] *** epony left
[22:10] *** psychoslave_ joined
[22:15] <Juerd> m: ( :foo<bar>, (:quux<xyzzy> if Bool.pick) ).perl.say

[22:15] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´(:foo("bar"), :quux("xyzzy"))‚ê§¬ª

[22:15] *** molaf left
[22:15] <Juerd> m: ( :foo<bar>, (:quux<xyzzy> if Bool.pick) ).perl.say

[22:15] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´(:foo("bar"), :quux("xyzzy"))‚ê§¬ª

[22:15] <Juerd> m: ( :foo<bar>, (:quux<xyzzy> if Bool.pick) ).perl.say

[22:15] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´(:foo("bar"),)‚ê§¬ª

[22:16] <Juerd> Altreus: Is that what you meant with conditionally adding a pair to a list?

[22:16] <Altreus> yes - but can I do it without repeating myself?

[22:16] <Juerd> Wat bedoel je?

[22:16] <Altreus> (:quux<$cat> if $cat)

[22:16] <Juerd> Er, what do you mean?

[22:17] <Altreus> can I do this without repeating $cat?

[22:17] <Juerd> Altreus: Did you mean :quux¬´$cat¬ª? :)

[22:17] <Altreus> I seem to remember I did something similar

[22:17] <Altreus> ah, probably, I'm new to this

[22:17] <Altreus> :)

[22:17] <timotimo> i'd strongly recommend :quux($cat) instead

[22:18] <timotimo> m: my $thing = "hello how are you"; say (:quux¬´$thing¬ª).perl

[22:18] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´:quux(("hello", "how", "are", "you"))‚ê§¬ª

[22:18] <timotimo> it does splitting

[22:18] <Altreus> I vaguely remember asking something similar but I can't find what I was doing that prompted me to ask

[22:18] <Altreus> so I can't find the answer :)

[22:18] *** wamba joined
[22:19] <Altreus> ah it might have been on my old laptop

[22:19] <Altreus> I mean it's not heck of long to repeat the variable

[22:20] <Altreus> (:$cat if $cat)

[22:21] <Altreus> ah just realised I'm not making a hash, I'm making a parameter list

[22:21] <Altreus> if I give it (:$cat if $cat), it says the default constructor only takes named arguments

[22:21] <timotimo> then you just need a | in front as well as ( ) around the stuff

[22:21] <Altreus> grand

[22:22] <Altreus> I was going to try that but it felt like clutching at straws

[22:22] <Altreus> trust your instincts, Fox

[22:22] <timotimo> DAD?!?!

[22:22] <Altreus> ^-^

[22:24] *** perlpilot left
[22:29] <Altreus> now I want to play lylat wars :(

[22:29] <Altreus> going to go to bed and dream of it. nn

[22:30] <timotimo> aha, european?

[22:36] *** raynold joined
[22:45] *** natrys left
[22:47] *** lizmat left
[23:00] *** epony joined
[23:06] *** wamba left
[23:06] *** psychoslave_ left
[23:21] *** benji__ joined
[23:25] *** benjikun2 left
[23:32] <Xliff> my $a = sub ( say $_ };  $a(42);

[23:32] <Xliff> m: my $a = sub ( say $_ };  $a(42);

[23:32] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Invalid typename 'say' in parameter declaration.‚ê§at <tmp>:1‚ê§------> 3my $a = sub ( say7‚èè5 $_ };  $a(42);‚ê§¬ª

[23:33] <Xliff> m: my $a = sub { say $_ };  $a(42);

[23:33] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Too many positionals passed; expected 0 arguments but got 1‚ê§  in sub  at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:33] <Xliff> m: my $a = sub(‚Ä¶) { say $_ };  $a(42);

[23:33] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´5===SORRY!5===‚ê§Word 'sub' interpreted as 'sub()' function call; please use whitespace around the parens‚ê§at <tmp>:1‚ê§------> 3my $a = sub7‚èè5(‚Ä¶) { say $_ };  $a(42);‚ê§Unexpected block in infix position (two terms in a row)‚ê§at <tmp>:1‚Ä¶¬ª

[23:33] <Xliff> m: my $a = sub() { say $_ };  $a(42);

[23:33] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´5===SORRY!5===‚ê§Word 'sub' interpreted as 'sub()' function call; please use whitespace around the parens‚ê§at <tmp>:1‚ê§------> 3my $a = sub7‚èè5() { say $_ };  $a(42);‚ê§Unexpected block in infix position (two terms in a row)‚ê§at <tmp>:1‚ê§‚Ä¶¬ª

[23:36] *** pmurias left
[23:37] *** pmurias joined
[23:37] *** cpage_ joined
[23:38] *** zachk joined
[23:38] *** zachk left
[23:38] *** zachk joined
[23:39] *** ChoHag left
[23:40] *** cpage_ is now known as cpage

[23:41] <rindolf> Altreus: hi

[23:43] *** ChoHag joined
[23:52] *** pmurias left
