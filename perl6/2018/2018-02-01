[00:00] <buggable> üé∫üé∫üé∫ It's time for the monthly Accidental /win Lottery üòçüòçüòç We have 3 ballots submitted by 2 users! DRUM ROLL PLEASE!...

[00:00] <buggable> And the winning number is 10! Congratulations to [Coke]! You win a roll of duck tape!

[00:07] *** comborico left
[00:14] *** skids joined
[00:16] *** trnh left
[00:17] *** bwisti left
[00:20] *** trnh joined
[00:29] *** markong left
[00:39] *** trnh left
[00:43] <lookatme> buggable: /win 5

[00:43] <buggable> lookatme, Thank you for entering Accidental /win Lottery! The next draw will happen in -1 weeks, 6 days, 23 hours, 16 minutes, and 10 seconds

[01:03] *** Cabanossi left
[01:05] *** Cabanossi joined
[01:08] *** cdg joined
[01:09] *** comborico1611 joined
[01:10] <comborico1611> Yup.

[01:12] *** cdg_ left
[01:12] *** ribasushi joined
[01:13] *** cdg left
[01:17] *** Rawriful left
[01:19] *** espadrine_ left
[01:22] *** john_parr joined
[01:40] *** aborazmeh joined
[01:40] *** aborazmeh left
[01:40] *** aborazmeh joined
[01:49] <tony-o> surprised Slang::SQL is still working after all of the changes

[01:51] *** astj_ left
[02:04] *** _Kaiepi left
[02:05] *** _Kaiepi joined
[02:14] *** cdg joined
[02:16] *** cdg left
[02:17] *** cdg joined
[02:20] *** comborico1611 left
[02:20] *** cdg left
[02:20] *** cdg joined
[02:39] *** ZzZombo left
[02:39] *** ZzZombo joined
[02:45] *** ilbot3 left
[02:57] *** ilbot3 joined
[02:57] *** ChanServ sets mode: +v ilbot3

[03:03] *** jeromelanteri joined
[03:03] *** jeromelanteri left
[03:03] *** jeromelanteri joined
[03:04] *** jeromelanteri left
[03:04] *** jeromelanteri joined
[03:19] *** ponbiki_ joined
[03:19] *** ponbiki_ left
[03:25] <buggable> New CPAN upload: Result-0.1.0.tar.gz by SAMGWISE https://cpan.metacpan.org/authors/id/S/SA/SAMGWISE/Perl6/Result-0.1.0.tar.gz

[03:29] *** cdg left
[03:35] <buggable> New CPAN upload: Seq-PreFetch-0.1.0.tar.gz by SAMGWISE https://cpan.metacpan.org/authors/id/S/SA/SAMGWISE/Perl6/Seq-PreFetch-0.1.0.tar.gz

[03:35] <buggable> New CPAN upload: Slang-Predicate-0.0.1.tar.gz by SAMGWISE https://cpan.metacpan.org/authors/id/S/SA/SAMGWISE/Perl6/Slang-Predicate-0.0.1.tar.gz

[03:39] *** ufobat___ joined
[03:42] *** ufobat_ left
[03:50] <skids> m: ‚ê§=SEE-ALSO foo‚ê§‚ê§42.say‚ê§

[03:50] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´42‚ê§¬ª

[03:50] <skids> ...that breaks with real newlines.

[03:50] <skids> regression within last few months.

[03:58] *** cdg joined
[04:05] <buggable> New CPAN upload: Serialise-Map-0.1.0.tar.gz by SAMGWISE https://cpan.metacpan.org/authors/id/S/SA/SAMGWISE/Perl6/Serialise-Map-0.1.0.tar.gz

[04:07] *** zephyrfalcon joined
[04:19] *** eliasr left
[04:22] *** Herby_ joined
[04:22] <Herby_> o/

[04:22] <skids> o/

[04:23] *** Cabanossi left
[04:23] *** Cabanoss- joined
[04:24] *** Cabanoss- is now known as Cabanossi

[04:25] <Herby_> anyone here poke around with raspberry pi's?

[04:25] <skids> Yes, but not me :-)

[04:26] <Herby_> i ordered one on a whim. wonder if anyone has got p6 working on it

[04:27] <skids> https://gist.github.com/stmuk/84b49fc92cba789e00112cf6c4ce9bfe

[04:27] <mspo> I have an older one in a shoe box somewhere

[04:28] *** unicodable6 left
[04:28] *** unicodable6 joined
[04:28] *** ChanServ sets mode: +v unicodable6

[04:28] <Herby_> skids: thanks. I'm a linux rookie so I'm gonna have to do some reading to figure that out

[04:34] *** khw left
[04:47] *** xtreak joined
[04:50] *** Herby_ left
[04:53] *** aborazmeh left
[04:56] *** wamba joined
[04:56] <ZzZombo> Why does REPL not relay messages printed in used modules?

[05:01] <ZzZombo> WTF, I can't return early from my trait, not even "fail" does that!

[05:02] <geekosaur> traits are run at compile time. what does returning early mean in that context?

[05:02] <ZzZombo> abort executing the rest of code?

[05:03] <ZzZombo> executing/evaluating of the trait code, I mean.

[05:05] <geekosaur> I would expect "fail" to be a bit odd at compile time, tbh

[05:13] <ZzZombo> I couldn't even change code flow inside with an `if 0`! Is this documented somewhere?

[05:16] <geekosaur> now *that* seems odd

[05:17] <geekosaur> conceivably there is something about control exceptions not working right at compile time, but I suspect that would be considered a bug

[05:18] <skids> .oO(nevermind apparently my instal script stopped working and I was running an old rakudo)

[05:25] <ZzZombo> m: class C { has Numeric:D $.probability is default(1) where * >= 0 }

[05:25] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot invoke this object (REPR: Null; VMNull)‚ê§at <tmp>:1‚ê§¬ª

[05:25] <ZzZombo> I broke something again :/

[05:26] <skids> ZzZombo: maybe see if a "default { }" will leave the block.

[05:26] <ZzZombo> What? Leave what block?

[05:26] <skids> your trait

[05:27] <ZzZombo> I don't understand your suggestion, like, at all.

[05:27] <skids> You wanted to stop a trait block in the middle, right?

[05:28] <skids> m: for ^4 { .say; default { }; "HERE".say }

[05:28] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§¬ª

[05:28] <ZzZombo> No

[05:29] <ZzZombo> I wanted the `is default(1)`, I don't even know what does "stop a trait block" mean.

[05:31] <skids> I'm referrig to 'ZzZombo: WTF, I can't return early from my trait, not even "fail" does that!'

[05:31] <ZzZombo> Ah, you should have clarified that.

[05:35] <ZzZombo> m: class C { has Numeric:D $.probability is default(1) where { $_ >= 0 } }

[05:35] <camelia> rakudo-moar 72948e847: ( no output )

[05:35] <ZzZombo> this works

[05:36] <ZzZombo> m: say (* > 0).gist

[05:36] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´{ ... }‚ê§¬ª

[05:36] <ZzZombo> m: say (* > 0).WHAT

[05:36] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´(WhateverCode)‚ê§¬ª

[05:36] <ZzZombo> m: say {$_ > 0}.WHAT

[05:36] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´(Block)‚ê§¬ª

[05:36] <ZzZombo> m: class C { has Numeric:D $.probability is default(1) where WhateverCode }

[05:37] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Type check failed in assignment to $!probability; expected <anon> but got Int (1)‚ê§at <tmp>:1‚ê§¬ª

[05:37] <ZzZombo> wtf

[05:37] <ZzZombo> m: class C { has Numeric:D $.probability is default(1) where (* >= 0) }

[05:37] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot invoke this object (REPR: Null; VMNull)‚ê§at <tmp>:1‚ê§¬ª

[05:39] *** zacts joined
[05:42] <skids> subset seems to do the same thing.

[05:43] <skids> m: class C { subset ≈π of Numeric:D where * >= 0; has ≈π $.probability is default(1) }

[05:43] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot invoke this object (REPR: Null; VMNull)‚ê§at <tmp>:1‚ê§¬ª

[05:44] <ZzZombo> and you can't use junctions as well.

[05:47] <skids> m: subset ≈π of Numeric:D where * >= 0; my ≈π $d; $d = 0

[05:47] *** zephyrfalcon left
[05:47] <camelia> rakudo-moar 72948e847: ( no output )

[05:48] <geekosaur> I am wondering if this is related to compile time too

[05:48] <geekosaur> since a class body gets evaluated at compile time, iirc

[05:49] <skids> works fine without the "is default"

[05:49] *** hobbs left
[05:50] *** hobbs joined
[05:50] *** hobbs left
[05:50] *** hobbs joined
[05:51] *** curan joined
[05:53] <geekosaur> yes, that's kinda the point. there may be some compile time confusion going on here

[05:53] * skids goes to bed

[05:57] <ZzZombo> m: multi trait_mod:<is>(Sub $m,:@foo [Str:D :$bar=$m.name,:&c?]=Empty){say $m.gist,$bar};sub m is xmlbinding{}

[05:57] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´5===SORRY!5===‚ê§Trait 'is xmlbinding' needs whitespace before block‚ê§at <tmp>:1‚ê§------> 3{say $m.gist,$bar};sub m is xmlbinding{}7‚èè5<EOL>‚ê§Missing block (apparently claimed by 'is xmlbinding')‚ê§at <tmp>:1‚ê§------> 3{say $m.gist,$bar}‚Ä¶¬ª

[05:57] <ZzZombo> m: multi trait_mod:<is>(Sub $m,:@foo [Str:D :$bar=$m.name,:&c?]=Empty){say $m.gist,$bar};sub m is xmlbinding {}

[05:57] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Can't use unknown trait 'is xmlbinding' in a sub declaration.‚ê§at <tmp>:1‚ê§    expecting any of:‚ê§        rw raw hidden-from-backtrace hidden-from-USAGE‚ê§        pure default DEPRECATED inlinable no‚Ä¶¬ª

[05:57] <ZzZombo> m: multi trait_mod:<is>(Sub $m,:@foo [Str:D :$bar=$m.name,:&c?]=Empty){say $m.gist,$bar};sub m is xmlbinding[] {}

[05:57] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Can't use unknown trait 'is xmlbinding' in a sub declaration.‚ê§at <tmp>:1‚ê§    expecting any of:‚ê§        rw raw hidden-from-backtrace hidden-from-USAGE‚ê§        pure default DEPRECATED inlinable no‚Ä¶¬ª

[05:57] <ZzZombo> m: multi trait_mod:<is>(Sub $m,:@foo [Str:D :$bar=$m.name,:&c?]=Empty){say $m.gist,$bar};sub m is foo[] {}

[05:57] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´sub m () { #`(Sub|64499736) ... }m‚ê§¬ª

[05:57] <ZzZombo> m: multi trait_mod:<is>(Sub $m,:@foo [Str:D :$bar=$m.name,:&c?]=Empty){say $m.gist,$bar};sub m is foo {}

[05:57] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Can't use unknown trait 'is foo' in a sub declaration.‚ê§at <tmp>:1‚ê§    expecting any of:‚ê§        rw raw hidden-from-backtrace hidden-from-USAGE‚ê§        pure default DEPRECATED inlinable nodal‚ê§ ‚Ä¶¬ª

[05:58] <ZzZombo> why the hell the default value of `Empty` doesn't get assigned to the array?

[05:58] *** skids left
[06:03] *** _Kaiepi left
[06:05] *** _Kaiepi joined
[06:13] *** piojo left
[06:20] *** cdg left
[06:21] *** cdg joined
[06:22] *** piojo joined
[06:22] *** piojo left
[06:26] *** darutoko joined
[06:26] *** cdg left
[06:39] *** cdg joined
[06:46] *** cdg left
[06:55] *** domidumont joined
[07:01] *** troys left
[07:08] *** rindolf joined
[07:11] *** domidumont left
[07:12] *** domidumont joined
[07:22] *** cdg joined
[07:27] *** cdg left
[07:27] *** telex left
[07:28] *** telex joined
[07:31] *** markong joined
[07:34] *** wamba left
[07:36] *** abraxxa joined
[07:48] *** xtreak left
[07:48] *** xtreak joined
[07:49] *** rindolf left
[07:50] *** xtreak left
[07:50] *** xtreak_ joined
[08:02] *** rindolf joined
[08:02] *** aindilis` joined
[08:04] *** aindilis left
[08:04] *** wamba joined
[08:11] *** scovit left
[08:22] *** someuser joined
[08:23] *** cdg joined
[08:26] *** someuser left
[08:27] *** someuser joined
[08:28] *** cdg left
[08:30] *** AlexDaniel joined
[08:36] *** mniip left
[08:43] <lookatme> I have not seen this syntax ever in documents `:@foo [Str:D :$bar=$m.name,:&c?]=Empty`

[08:43] *** dakkar joined
[08:46] *** zakharyas joined
[08:47] *** xtreak_ left
[08:49] *** zakharyas left
[08:49] *** zakharyas joined
[08:52] <gfldex> lookatme: it's a named parameter with a destructuring subsignature and a default value

[08:52] <gfldex> and since the default value doesn't fit into the subsig, it wont work

[08:54] <lookatme> a sub signature ?

[08:55] <gfldex> they are official! https://docs.perl6.org/type/Signature#Sub-signatures

[08:56] <lookatme> oh, I see

[09:02] *** lookatme left
[09:23] <AlexDaniel> squashable6: next

[09:23] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in 1 day and ‚âà0 hours (2018-02-03 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[09:24] *** cdg joined
[09:24] *** mniip joined
[09:28] *** zeddy_k joined
[09:29] *** cdg left
[09:34] *** zakharyas left
[09:36] *** scimon joined
[09:36] *** xtreak joined
[09:41] *** reportable6 left
[09:41] *** reportable6 joined
[09:46] *** reportable6 left
[09:46] *** reportable6 joined
[09:46] *** ChanServ sets mode: +v reportable6

[09:49] *** empT joined
[09:50] *** khw joined
[09:53] <ZzZombo> "===SORRY!===

[09:53] <ZzZombo> Something went wrong in (Assignment)"

[09:53] <ZzZombo> very helpful indeedy

[09:54] <AlexDaniel> ZzZombo: I've seen worse :)

[09:54] <ZzZombo> <gfldex> and since the default value doesn't fit into the subsig, it wont work

[09:54] <ZzZombo> Any way round it?

[09:55] <ZzZombo> AlexDaniel, but how do I find the source of the error then?

[09:55] <AlexDaniel> ZzZombo: what if you try with --ll-exception ?

[09:57] <ZzZombo> Not much better: "No exception handler located for catch"

[09:57] <AlexDaniel> ZzZombo: can you rakudobug it?

[09:57] <AlexDaniel> huggable: rakudobug

[09:57] <huggable> AlexDaniel, Report bugs on https://github.com/rakudo/rakudo/issues/new    If you don't have access to GitHub, you can email your report to [email@hidden.address] . See also: https://github.com/rakudo/rakudo/wiki/rt-introduction

[09:58] <ZzZombo> The backtrace is all out of my code entirely.

[09:58] <AlexDaniel> it shouldn't do that, yes

[09:59] <ZzZombo> I guess I actually shouldn't do that, because what I am doing seems like dirty hackery.

[09:59] <ZzZombo> IDK, I guess I should first have someone take a look at my code.

[10:07] *** traxex2 left
[10:07] *** john51_ joined
[10:08] *** evalable6 left
[10:08] *** evalable6 joined
[10:08] *** ChanServ sets mode: +v evalable6

[10:09] *** bisectable6 left
[10:09] *** committable6 left
[10:09] *** bisectable6 joined
[10:09] *** ChanServ sets mode: +v bisectable6

[10:09] *** committable6 joined
[10:09] *** ChanServ sets mode: +v committable6

[10:09] *** john51 left
[10:12] *** traxex2 joined
[10:13] *** john51_ left
[10:13] *** john51 joined
[10:16] *** wamba left
[10:19] *** Zoffix joined
[10:20] <Zoffix> .ask skids https://irclog.perlgeek.de/perl6/2018-02-01#i_15763577  Breaks how? Can you file a ticket? https://github.com/rakudo/rakudo/issues/new  I can't reproduce any problems on HEAD

[10:20] <yoleaux> Zoffix: I'll pass your message to skids.

[10:24] *** cdg joined
[10:25] <Zoffix> ZzZombo: FWIW, you could file those problems so the core devs could actually address them https://github.com/rakudo/rakudo/issues/new

[10:26] <Zoffix> Empty is an empty Slip. Assigning it to an Array would just result in an empty Array

[10:28] *** Zoffix left
[10:28] <ZzZombo> Zoffix, that's the point? So in this case the defaults inside the destructuring assignment are supposed to be invoked, aren't they?

[10:28] <ZzZombo> ...

[10:29] *** cdg left
[10:33] *** zakharyas joined
[10:40] <ZzZombo> I just found out you can't call ANY inherited methods from submethods under the pretense that "Virtual method call $.v may not be used on partially constructed object (maybe you mean $!v for direct attribute access here?)", despite the object being constructed a long time ago.

[10:41] <ZzZombo> I get it as if this warning was written only with BUILD/TWEAK in mind, right? Shouldn't it allow anything else?

[10:43] *** lowbro joined
[10:43] *** lowbro left
[10:43] *** lowbro joined
[10:52] *** Zoffix joined
[10:53] <Zoffix> ZzZombo: ah, sorry missed that. It does get assigned, but `is foo` doesn't get through this candidate

[10:53] <Zoffix> m: -> @ (:$foo = 42) = Empty { dd $foo }()

[10:53] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´Int $foo = 42‚ê§¬ª

[10:56] *** itaipu joined
[10:57] *** wamba joined
[10:58] <Zoffix> m: my $m = &say; my (@foo [Str:D :$bar=$m.name, :&c?]) = Empty; dd $bar

[10:58] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´Mu‚ê§¬ª

[10:58] <Zoffix> looks like still broken in `my` signature unpack :(

[11:00] <Zoffix> m: multi trait_mod:<is>(Sub $m, :$foo!) { -> :@foo [Str:D :$bar=$m.name,:&c?] = Empty { say $m.gist,$bar  }(|(:$foo if $foo !=== True))}; sub m is foo[:bar<foo>] {}

[11:00] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´sub m () { #`(Sub|46510784) ... }foo‚ê§¬ª

[11:00] <jnthn> That's not a signature unpack

[11:00] <Zoffix> ZzZombo: ^ that seems to work. Keeping trait signature simple, so you always get the right candidate, then unpacking the args inside the body. Normally, `my (@foo [Str:D :$bar=$m.name, :&c?])` would've worked, but looks like unpacking is still busted there

[11:01] <jnthn> It's a list assignment. We should really complain about use of sub-sigs in that context

[11:01] <jnthn> Needs to be := for a signature unpack

[11:01] <jnthn> m: my $m = &say; my (@foo [Str:D :$bar=$m.name, :&c?]) := Empty; dd $bar

[11:01] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´Too few positionals passed to '<unit>'; expected 1 argument but got 0‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:01] <Zoffix> Oh really

[11:02] <Zoffix> m: my $m = &say; my (@foo [Str:D :$bar=$m.name, :&c?]) := \(Empty); dd $bar 

[11:02] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´Mu‚ê§¬ª

[11:02] <Zoffix> m: my ($x, $, *@foo, :$foo = 42) = <a b c d e>; dd [$x, @foo, $foo]

[11:02] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´["a", ["c", "d", "e"], Any]‚ê§¬ª

[11:03] <Zoffix> jnthn: it goes through the <signature> token doesn't it? (can't tell; hangs in --target=parse). Wouldn't it be possible to make defaults work too?

[11:03] <Zoffix> m: my ($x, "b", *@foo, :$foo = 42) = <a b c d e>; dd [$x, @foo, $foo]

[11:03] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´["a", ["c", "d", "e"], Any]‚ê§¬ª

[11:03] <Zoffix> m: my ($x, "b", *@foo, :$foo = 42) = <a Z c d e>; dd [$x, @foo, $foo]

[11:03] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´Type check failed in assignment to anon; expected <anon> but got Str ("Z")‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:05] <jnthn> Zoffix: It does, but in the case of it being = we then take the signature and walk through it to pick out scalar/array/hash containers and pretend it's just a list of variables to declare

[11:05] <Zoffix> Ahh

[11:05] <jnthn> So it's parsed as a signature always

[11:05] <jnthn> This is...annoying, but with one pass parsing we can't really look *that* far ahead

[11:05] <jnthn> To see if it's gonna be an = or a :=

[11:05] <jnthn> So we parse signature then tweak

[11:05] <Zoffix> I see.

[11:06] <jnthn> I think we should do a much more complete job of saying what things are going to be totally ignored in that process

[11:08] *** roguelazer_ joined
[11:09] *** ecocode_ joined
[11:09] *** zostay_ joined
[11:09] *** clkao_ joined
[11:09] *** mrsolo_ joined
[11:10] *** kentnl joined
[11:10] *** ilmari_ joined
[11:11] *** timo joined
[11:11] *** roguelazer left
[11:11] *** zostay left
[11:11] *** ecocode left
[11:11] *** clkao left
[11:11] *** mrsolo left
[11:11] *** geekosaur left
[11:11] *** lumimies left
[11:11] *** ilmari left
[11:11] *** timotimo left
[11:11] *** kent\n left
[11:11] *** Levex left
[11:11] *** zostay_ is now known as zostay

[11:11] *** roguelazer_ is now known as roguelazer

[11:11] *** mrsolo_ is now known as mrsolo

[11:11] *** clkao_ is now known as clkao

[11:11] *** ilmari_ is now known as ilmari

[11:11] *** ilmari left
[11:11] *** ilmari joined
[11:11] *** timo is now known as Guest36665

[11:12] *** mithaldu_ left
[11:12] *** lumimies joined
[11:12] *** breinbaas left
[11:12] *** breinbaas joined
[11:13] *** mithaldu_ joined
[11:13] *** levex joined
[11:13] *** ecocode_ left
[11:13] *** nativecallable6 left
[11:13] *** quotable6 left
[11:13] *** coverable6 left
[11:13] *** levex is now known as Guest17694

[11:15] *** ribasushi left
[11:15] *** Skarsnik joined
[11:16] *** ecocode joined
[11:17] *** eliasr joined
[11:19] *** ribasushi joined
[11:20] *** geekosaur joined
[11:22] *** wamba left
[11:24] *** evalable6 left
[11:24] *** committable6 left
[11:24] *** bisectable6 left
[11:24] *** bisectable6 joined
[11:24] *** ChanServ sets mode: +v bisectable6

[11:25] *** itaipu left
[11:25] *** cdg joined
[11:30] *** cdg left
[11:31] *** evalable6 joined
[11:31] *** committable6 joined
[11:31] *** ChanServ sets mode: +v evalable6

[11:31] *** ChanServ sets mode: +v committable6

[11:33] *** pmurias joined
[11:39] *** nativecallable6 joined
[11:40] *** coverable6 joined
[11:41] *** unicodable6 left
[11:41] *** quotable6 joined
[11:41] *** ChanServ sets mode: +v quotable6

[11:41] *** greppable6 left
[11:41] *** greppable6 joined
[11:41] *** unicodable6 joined
[11:41] *** ChanServ sets mode: +v unicodable6

[11:42] <Zoffix> m: class { has $.z is default(1) where * > 0 }.new.z.say

[11:42] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot invoke this object (REPR: Null; VMNull)‚ê§at <tmp>:1‚ê§¬ª

[11:42] <Zoffix> m: class { has $.z is default(1) where {$_ > 0} }.new.z.say

[11:42] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´1‚ê§¬ª

[11:42] <Zoffix> ZzZombo: ^ you can workaround it with a block, if you still need it. We also have UInt type

[11:43] <ZzZombo> But I need floats as well.

[11:43] <Zoffix> cool

[11:45] *** notbenh left
[11:45] *** notbenh joined
[11:46] <Zoffix> (filed it as R#1465 )

[11:46] <synopsebot> R#1465 [open]: https://github.com/rakudo/rakudo/issues/1465 `where` clause in attributes doesn't get thunked right when `is default` is used

[11:49] <Zoffix> m: use nqp; my $a; nqp::assign($a, 42); dd $a; my @a; nqp::assign(@a, 42); dd @a

[11:49] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´Int $a = 42‚ê§Cannot assign to an immutable value‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:49] <Zoffix> Is there a single op that can figure out whether it needs to assign or callmethod STORE?

[11:51] <Zoffix> m: use nqp; my $a; nqp::p6store($a, 42); dd $a; my @a; nqp::p6store(@a, 42); dd @a

[11:51] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´Int $a = 42‚ê§Array @a = [42]‚ê§¬ª

[11:54] <ZzZombo> Do I read it right the signature thing is unfixable?

[11:57] <Zoffix> ZzZombo: not quite. Your original version doesn't work only because you're getting a different candidate than your trait. My original suggestion with list unpack in `my`‚Äîthat one will be made to throw rather than work. But the signature unpack with `my` is meant to work (needs to be fixed tho)

[11:57] <Zoffix> m: my $m = &say; my (@foo [Str:D :$bar=$m.name, :&c?] = Empty) := \(); dd $bar

[11:57] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´Mu‚ê§¬ª

[11:58] <Zoffix> my `my` used `= list here` while the signature unpack `my` uses binding

[11:58] <Zoffix> m: multi trait_mod:<is>(Sub $m, :$foo!) { -> :@foo [Str:D :$bar=$m.name,:&c?] = Empty { say $m.gist,$bar  }(|(:$foo if $foo !=== True))}; sub m is foo[:bar<foo>] {}

[11:58] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´sub m () { #`(Sub|41288384) ... }foo‚ê§¬ª

[11:58] <Zoffix> You can use this workaround tho

[11:59] * Zoffix notices saying that today too much :)

[11:59] <Zoffix> Basically using a block inside the trait's routine to unpack $foo and essentially being the body where all the magic happens

[11:59] *** Guest36665 is now known as timotimo

[11:59] <ZzZombo> Yea, gotcha.

[12:05] *** Skarsnik left
[12:06] *** Skarsnik joined
[12:08] *** AlexDaniel left
[12:09] *** mahafyi joined
[12:13] *** xtreak left
[12:13] *** xtreak joined
[12:15] *** mahafyi left
[12:15] <Zoffix> m: $_ = -42; .=abs; say $_

[12:15] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´42‚ê§¬ª

[12:15] <Zoffix> TIL that works :)

[12:15] <Zoffix> (the .= abs, with space in it doesn't)

[12:15] *** xtreak left
[12:30] *** zakharyas left
[12:37] *** colomon joined
[12:55] *** Zoffix left
[13:11] *** xtreak joined
[13:29] *** wamba joined
[13:29] *** wamba left
[13:37] <Geth> ¬¶ doc: 78b2e1b582 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/grammar_tutorial.pod6

[13:37] <Geth> ¬¶ doc: tidy ‚Äúgrammar‚Äù

[13:37] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/78b2e1b582

[13:37] <synopsebot> Link: https://doc.perl6.org/language/grammar_tutorial

[13:48] *** zakharyas joined
[13:50] *** zeddy_k left
[13:55] *** wamba joined
[13:56] *** cdg joined
[13:57] *** aborazmeh joined
[13:57] *** aborazmeh left
[13:57] *** aborazmeh joined
[13:58] *** cdg left
[13:58] *** cdg joined
[14:03] *** aborazmeh left
[14:12] *** tadzik left
[14:13] *** tadzik joined
[14:21] *** jeromelanteri left
[14:30] *** Skarsnik left
[14:37] *** giraffe left
[14:47] *** cdg left
[14:47] *** cdg joined
[14:54] *** wamba left
[15:00] *** zakharyas left
[15:01] *** zakharyas joined
[15:01] *** Skarsnik joined
[15:04] *** plicease left
[15:09] *** skids joined
[15:33] *** psychoslave joined
[15:35] *** comborico1611 joined
[15:36] <comborico1611> What is the term for "everything is an object"?

[15:37] <APic> Excellent Question!

[15:37] <comborico1611> Heh. Thanks.

[15:37] *** curan left
[15:37] <skids> Dunno... first class everything?

[15:37] <yoleaux> 10:20Z <Zoffix> skids: https://irclog.perlgeek.de/perl6/2018-02-01#i_15763577  Breaks how? Can you file a ticket? https://github.com/rakudo/rakudo/issues/new  I can't reproduce any problems on HEAD

[15:38] <skids> .tell Zoffix SEE-ALSO thing was my bad... I mistyped my install prefix so I had an old rakudo and did not realize it.

[15:38] <yoleaux> skids: I'll pass your message to Zoffix.

[15:41] <skids> or maybe... "golden hammer" :-)

[15:41] <ZzZombo> Why can I not auto pun a parametrized role?

[15:42] <skids> m: role A[$] { }; A[4].new.WHAT.say

[15:42] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´(A[Int])‚ê§¬ª

[15:43] *** AlexDaniel joined
[15:43] <ZzZombo> m: role A[$] { }; class C is A[4] {}

[15:43] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot resolve caller trait_mod:<is>(C, A, Array); none of these signatures match:‚ê§    (Mu:U $child, Mu:U $parent)‚ê§    (Mu:U $child, :$DEPRECATED!)‚ê§    (Mu:U $type, :$rw!)‚ê§    (Mu:U $type, :$nat‚Ä¶¬ª

[15:45] <skids> m: role A[$] { }; class C is A[4].^pun {}

[15:45] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot resolve caller trait_mod:<is>(C, A, Array); none of these signatures match:‚ê§    (Mu:U $child, Mu:U $parent)‚ê§    (Mu:U $child, :$DEPRECATED!)‚ê§    (Mu:U $type, :$rw!)‚ê§    (Mu:U $type, :$nat‚Ä¶¬ª

[15:46] <skids> Hrm...

[15:47] <skids> m: role A[$] { }; constant a = A[4].^pun; class C is a { }; C.^mro.say

[15:47] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´((C) (A[Int]) (Any) (Mu))‚ê§¬ª

[15:47] *** Zoffix joined
[15:47] <Zoffix> m: dd Int.(<a b c>)

[15:47] <yoleaux> 15:38Z <skids> Zoffix: SEE-ALSO thing was my bad... I mistyped my install prefix so I had an old rakudo and did not realize it.

[15:47] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´3‚ê§¬ª

[15:48] <Zoffix> What's the logic behind that? A .() on a type is equivalent to ()."$types.^name()"() ?

[15:49] <jnthn> m: my $a = 41; $a.++; say 4a

[15:49] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Confused‚ê§at <tmp>:1‚ê§------> 3my $a = 41; $a.++; say 47‚èè5a‚ê§¬ª

[15:49] <jnthn> m: my $a = 41; $a.++; say $a

[15:49] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´42‚ê§¬ª

[15:49] <jnthn> It's one of those cases where the . is meaningless

[15:50] <Zoffix> m: my $a = 41; $a.=++; say $a

[15:50] <camelia> rakudo-moar 72948e847: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot use .= on a non-identifier method call‚ê§at <tmp>:1‚ê§------> 3my $a = 41; $a.=++7‚èè5; say $a‚ê§¬ª

[15:50] <Zoffix> OK. Thanks.

[15:50] <skids> Zoffix: fantastic article (and I'm not just saying that because you kudoed me in it :-)

[15:50] <comborico1611> What article?

[15:51] <skids> https://rakudo.party/post/Perl-6-Core-Hacking-QASTalicious

[15:51] <Zoffix> There's a bogus roast test that'd need to be modified. It expects  Any .= () to throw MethodNotFound

[15:51] <Zoffix> skids: thanks. And thanks for the tip that led me to fixing those bugs :)

[15:51] <comborico1611> Zoffix, what is the term for "everything is an object"?

[15:51] <Zoffix> comborico1611: no idea

[15:51] <comborico1611> Grr

[15:51] *** _Kaiepi left
[15:51] <comborico1611> Thanks, though.

[15:52] <skids> Zoffix: In your quest to streamline your workflow you might want to play with https://github.com/rakudo/rakudo/wiki/dev-nqpslang

[15:52] *** _Kaiepi joined
[15:52] *** wamba joined
[15:52] <comborico1611> jnthn, what is the term for "everything is an object"?

[15:53] <skids> Zoffix: sometimes using that ends up a bit like eating spaghetti though when there are too many local subs relied on by a rule.  But it certainly helped me find that hint.

[15:53] <Zoffix> skids: I'll try to give it a go sometime. Thanks.

[15:54] <scimon> I think the term is "Everything is an object" (Seriously that's how I've heard it said).

[15:55] <jnthn> comborico1611: I'm not aware of another term for that; I've always heard it stated that way.

[15:55] <comborico1611> Thank you.

[15:55] <jnthn> comborico1611: It's not a particularly precise notion, because in reality for a bunch of languages it's more like "everything can least pretend to be an object if you use it as one"

[15:55] <jnthn> *at least

[15:56] *** nativecallable6 left
[15:56] <Zoffix> oh, it still throws a method not found after my mods but it's an X::AdHoc :/

[15:57] <jnthn> That's how it is for Perl 6, C#, and Java, for example, which all support native types that are decidedly not objects, but if you use them as one then they will be magically boxed into one for you

[15:57] *** nativecallable6 joined
[15:57] <skids> comborico1611: for example, if a GOTO/label were a true "first class object" you could delete it and alter the code in-place.  Not many languages support that.

[15:58] <comborico1611> Hmm.

[15:59] *** xtreak left
[15:59] *** nativecallable6 left
[15:59] <comborico1611> Object boxing would be the term then, or something like it. 

[16:00] <comborico1611> Or object gilding.

[16:00] <skids> "pernicious autoboxing" maybe?

[16:00] <comborico1611> That means dangerous, right?

[16:01] <skids> Erm right I'm thinking of a different word.

[16:01] <profan> .. pervasive?

[16:01] <profan> not sure that's any better actually

[16:01] <skids> profan++

[16:02] <comborico1611> The action is autoboxing, true.

[16:02] <comborico1611> Persistent autoboxing?

[16:02] <skids> Well, I guess it depends on your attitude towards makeing everything an object :-)

[16:03] <comborico1611> Global autobox?

[16:03] <comborico1611> Autoboxed language?

[16:03] <skids> permeating maybe.  Too bad permeate doesn't have a cooler adjective form.

[16:04] *** Zoffix left
[16:04] <comborico1611> I like that.

[16:04] *** psychoslave left
[16:04] <comborico1611> That's where your pernicious came from.

[16:04] <comborico1611> Permicious :-)

[16:05] <skids> That or lack of a good night's sleep :-)

[16:06] <comborico1611> Permeatous autoboxing.

[16:07] <comborico1611> Python was the first to do this, correct?

[16:12] <skids> I'd imagine there's a long history behind it.

[16:14] <comborico1611> I'm seeing a heritage of ABC, Algol, Icon.  I know nothing of those.

[16:15] <moritz> everything except lisp and maybe tcl inherits from algol :-)

[16:16] <comborico1611> Hmm. Interesting.

[16:17] *** reportable6 left
[16:17] *** reportable6 joined
[16:17] *** ChanServ sets mode: +v reportable6

[16:20] <comborico1611> skids, is this the term, "object-based subset"?

[16:22] <skids> I'm the wrong person to ask... I'm an engineer not a CS person.  I haven't even read Knuth.  :-)

[16:22] <geekosaur> moritz, fotran and snobol :)

[16:23] <comborico1611> geekosaur, Is there a good link to this into

[16:23] <comborico1611> Info*

[16:24] <comborico1611> I'm thinking a chart.

[16:25] <geekosaur> https://en.wikipedia.org/wiki/Generational_list_of_programming_languages https://github.com/stereobooster/programming-languages-genealogical-tree (the latter is a chart... and a "be careful what you ask for")

[16:25] <comborico1611> Haha. Thanks!

[16:25] <geekosaur> and be aware that there's not much in the way of linearity

[16:26] * skids is tempted to send you to that really outfield CS wiki where insane zealots opine on "patterns" and such, but is not that mean.

[16:26] <comborico1611> lol it looks like a circuit board!

[16:26] <skids> Can't rmemeber the site name anyway.

[16:26] <geekosaur> like, SNOBOL was FORTRAN-family, but its descendant Icon is Algol-family

[16:26] <geekosaur> and JavaScript is conceptually Lisp-family but syntactically Algol-family

[16:28] <comborico1611> Hmm!

[16:30] <geekosaur> (and then you get Perl which is the computer language equivalent of English: https://en.wikipedia.org/wiki/James_Nicoll#%22The_Purity_of_the_English_Language%22

[16:32] <skids> .oO(why does this remind me of the hillbilly family tree at the beginneing of Idiocracy?)

[16:33] *** unicodable6 left
[16:33] *** unicodable6 joined
[16:34] *** bisectable6 left
[16:34] *** nativecallable6 joined
[16:34] *** ChanServ sets mode: +v nativecallable6

[16:34] *** bisectable6 joined
[16:35] <comborico1611> Heh

[16:35] *** domidumont left
[16:36] <comborico1611> That's pretty neat.  Thanks, geekosaur!

[16:37] *** st_elmo joined
[16:39] *** mingdao left
[16:40] *** mingdao joined
[16:40] *** lowbro left
[16:50] *** scimon left
[16:59] *** abraxxa left
[16:59] <AlexDaniel> is matiaslina here?

[17:00] <AlexDaniel> .seen matiaslina

[17:00] <yoleaux> I haven't seen matiaslina around.

[17:01] *** st_elmo left
[17:02] *** st_elmo joined
[17:05] <buggable> New CPAN upload: Algorithm-GooglePolylineEncoding-0.0.4.tar.gz by SCIMON https://cpan.metacpan.org/authors/id/S/SC/SCIMON/Perl6/Algorithm-GooglePolylineEncoding-0.0.4.tar.gz

[17:10] *** _Kaiepi left
[17:12] *** Kaiepi joined
[17:24] *** dakkar left
[17:39] *** zeddy_k joined
[18:04] *** rindolf left
[18:07] *** zeddy_k left
[18:07] *** zeddy__k joined
[18:20] *** rindolf joined
[18:26] *** domidumont joined
[18:43] *** darutoko left
[18:59] *** markong left
[19:00] *** cdg_ joined
[19:01] *** markong joined
[19:04] *** cdg left
[19:05] *** cdg_ left
[19:06] *** zeddy__k left
[19:07] *** |oLa| left
[19:16] *** st_elmo left
[19:24] *** comborico joined
[19:24] *** comborico1611 left
[19:37] *** |oLa| joined
[19:52] *** committable6 left
[19:53] *** committable6 joined
[19:59] *** trnh joined
[20:02] *** trnh is now known as dct

[20:07] <Geth> ¬¶ whateverable: 2c23d3edaf | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable.pm6

[20:07] <Geth> ¬¶ whateverable: Do not sd_notify in debug modes

[20:07] <Geth> ¬¶ whateverable: 

[20:07] <Geth> ¬¶ whateverable: This way it doesn't even need systemd .so files if you want to run it

[20:07] <Geth> ¬¶ whateverable: locally.

[20:07] <Geth> ¬¶ whateverable: review: https://github.com/perl6/whateverable/commit/2c23d3edaf

[20:12] *** zakharyas left
[20:18] *** colomon left
[20:22] *** domidumont left
[20:35] *** pmurias left
[20:41] *** pmurias joined
[20:42] <pmurias> geekosaur: how is JavaScript Lisp-family?

[20:42] *** paul_ joined
[20:44] <geekosaur> it started out as a scheme-ish language then got re-syntaxed with the rebranding from "livescript" to "javascript"

[20:44] <geekosaur> it still shows in how it treats values

[20:49] *** zakharyas joined
[20:49] <traxex2> I remember reading that some pre-release version of javascript had lispy synta

[20:49] <traxex2> syntax

[20:50] <traxex2> and the way functions work in javascript is certainly very... functional

[20:50] <traxex2> just verbose

[20:51] *** lsm joined
[20:54] *** markong left
[20:57] *** Rawriful joined
[21:03] *** wamba left
[21:05] *** paul_ left
[21:13] *** Skarsnik left
[21:25] *** espadrine_ joined
[21:42] <AlexDaniel> squashable6: next

[21:42] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in ‚âà12 hours (2018-02-03 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[21:52] *** zakharyas left
[22:00] *** markong joined
[22:02] *** rindolf left
[22:05] *** skids left
[22:07] *** cdg joined
[22:11] *** cdg left
[22:15] *** cdg joined
[22:22] <Geth> ¬¶ whateverable: 7c0649d325 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable.pm6

[22:22] <Geth> ¬¶ whateverable: Allow anonymous gists

[22:22] <Geth> ¬¶ whateverable: 

[22:22] <Geth> ¬¶ whateverable: If no token was provided. Useful if you just cloned the repo and tried

[22:22] <Geth> ¬¶ whateverable: to run something.

[22:22] <Geth> ¬¶ whateverable: review: https://github.com/perl6/whateverable/commit/7c0649d325

[22:22] <Geth> ¬¶ whateverable: 1505d08ecd | (Aleks-Daniel Jakimenko-Aleksejev)++ | bin/Reportable.p6

[22:22] <Geth> ¬¶ whateverable: Clearly say that there are no snapshots

[22:22] <Geth> ¬¶ whateverable: 

[22:22] <Geth> ¬¶ whateverable: Instead of gisting an empty file.

[22:22] <Geth> ¬¶ whateverable: review: https://github.com/perl6/whateverable/commit/1505d08ecd

[22:29] *** cdg left
[22:30] *** cdg joined
[22:35] *** cdg left
[22:39] *** lizmat joined
[22:48] <El_Che> say whatever you want, but without lizmat, the channel is pretty dead :)

[22:48] <El_Che> lizmat: think of me when you drin a fun cocktail listening to live progressive rock!

[22:49] <lizmat> swimming pool

[22:49] <yoleaux> 31 Jan 2018 20:24Z <DrForr> lizmat: You just made the @OSCON twitter front page.

[22:49] <lizmat> what?

[22:49] <El_Che> lizmat: I'll link it to you

[22:49] <El_Che> lizmat: gimme a few minutes

[22:50] <El_Che> lizmat: https://twitter.com/oscon/status/958795407064170496

[22:50] <lizmat> aaaah... ok

[22:50] <lizmat> :-)

[22:50] <lizmat> thanks  :)

[22:52] <lizmat> that's bearable I guess :-)

[22:57] *** setty1 joined
[22:59] <El_Che> the post girls of Perl moved on like OSCON did :)

[22:59] <El_Che> they went corporate

[22:59] <El_Che> :)

[23:02] *** leont joined
[23:05] *** evalable6 left
[23:05] *** evalable6 joined
[23:05] <lizmat> El_Che: well, if you'd been at the OSCON where we had that booth

[23:05] *** bisectable6 left
[23:05] *** committable6 left
[23:05] *** bisectable6 joined
[23:05] *** committable6 joined
[23:06] <lizmat> you would have seen that all of the "community" booths were in "Diagon Alley"

[23:06] <lizmat> aka, a part of the exhibition where the muggles wouldn't come

[23:14] <El_Che> hahaha

[23:18] <Geth> ¬¶ whateverable: f09bb0fcdf | (Aleks-Daniel Jakimenko-Aleksejev)++ | 4 files

[23:18] <Geth> ¬¶ whateverable: Disable ‚Äúwhat:‚Äù command on non-cave channels

[23:18] <Geth> ¬¶ whateverable: 

[23:18] <Geth> ¬¶ whateverable: People trigger it unintentionally too often. Resolves #193.

[23:18] <Geth> ¬¶ whateverable: review: https://github.com/perl6/whateverable/commit/f09bb0fcdf

[23:20] *** nativecallable6 left
[23:20] *** nativecallable6 joined
[23:20] *** ChanServ sets mode: +v nativecallable6

[23:31] *** setty1 left
[23:51] <Geth> ¬¶ doc: 9a1530469a | (Samantha McVey)++ (committed using GitHub Web editor) | doc/Type/Encoding.pod6

[23:51] <Geth> ¬¶ doc: Add link to list of encodings on the Encodings page

[23:51] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9a1530469a

[23:51] <synopsebot> Link: https://doc.perl6.org/type/Encoding

[23:59] *** lizmat left
