[00:00] <timotimo> i'm not going to take a chance on that

[00:00] <teatime> timotimo: wait, when I said Red and Blue, I only meant to choose two random colors, i.e. items with qualitative rather than quantitative differences.

[00:00] <teatime> I hope I didn't accidentally reference something bad.

[00:00] *** Kyo91 left
[00:00] <teatime> (like Pokémon)

[00:00] <TEttinger> teatime: it's more the two-party system in US politics

[00:01] <timotimo> i'd prefer not to spoil your innocence

[00:01] <timotimo> or faith in humanity or whatever

[00:01] <teatime> TEttinger: Dear god man, you had to keep talking about it until I looked, didn't you?

[00:01] <TEttinger> I told you!

[00:01] <TEttinger> I was trying to suggest why you shouldn't look!

[00:02] *** xaltotun joined
[00:03] <TEttinger> well since your innocence gauge has dropped to 0, red is the party color for the US Republican party, blue for the US Democratic party, so red and blue would have political connotations

[00:03] <TEttinger> chartreuse and taupe, less so

[00:04] <TEttinger> (especially because you can't really find a taupe flag in use, because no one can settle on what taupe looks like)

[00:05] *** Guest18 joined
[00:09] <timotimo> TEttinger: that's not the connotation i was going for at all

[00:10] <timotimo> anyway, let's forget about it

[00:11] <TEttinger> oh, the halo thing

[00:12] <TEttinger> Perl Behemoth and Perl Leviathan

[00:13] <TEttinger> (referring to the evenly-matched great beasts from the biblical Book of Revelations, also the scope of both languages is large)

[00:13] <TEttinger> which fits with the Apocalypses term used in early Perl 6 lit, right?

[00:14] <geekosaur> except "apocalypse" was used more in the technical sense

[00:23] *** Guest18 left
[00:27] *** Guest18 joined
[00:35] <titsuki> zef doesn't show the alternatives when installing Term::termios by "zef install Term::termios": https://gist.github.com/titsuki/a5ece198029b01dec762f71a3165ebd9

[00:35] <titsuki> Should I delete my module?

[00:42] *** Rawriful left
[00:56] *** pecastro left
[01:01] *** markong left
[01:02] *** Cabanossi left
[01:03] <titsuki> ok. I reported the above behavior: https://github.com/ugexe/zef/issues/227

[01:03] *** jeek left
[01:03] *** jeek joined
[01:05] *** Cabanossi joined
[01:06] *** aborazmeh joined
[01:06] *** aborazmeh left
[01:06] *** aborazmeh joined
[01:15] <psch> fwiw, behemoth and leviathan are coded as first and second in the (really quite amazing) webserial Worm

[01:16] <psch> so that's still at least some cultural remnant that makes these two ordered 

[01:16] <psch> ...but then they're both city busting monsters vOv

[01:17] <teatime> psch: I really like The Zombie Knight.  it isn't finished though and I ran out of pages again this morning.

[01:18] <psch> teatime: i think i read the first ~5 chapters or so, didn't really grip me

[01:18] <teatime> fair enough

[01:20] <psch> teatime: i did enjoy super powereds a fair bit, until there was the reveal that something big had been going on and then the backlog was gone and i didn't keep up with the weekly chapter releases... :S

[01:21] <psch> midnight moonlight was really great too, and i'm really upset that the author had to drop it for the time being

[01:21] *** Thrush joined
[01:21] <teatime> I'm scared that will happen to zombie knight.  He disappears occassionally for months at a time, presumably eventually he'll not come back.

[01:21] <psch> well, upset that the event that made her drop it happened, to be clear

[01:22] <teatime> ah

[01:22] <Thrush> Hello!  What's the best way to compare two boolean variables in Perl6?  Should I use "$var1 == $var2" or "$var1 eq $var2" or something else?

[01:23] <psch> Thrush: to be clear, you want True when both are True or both are False?

[01:25] <Thrush> Psch:  Last week I needed to check two booleans, when they agreed.  I can't remember the exact context, though, but I remember that an xor would not have worked.

[01:26] *** cgfbee left
[01:26] <psch> Thrush: that sounds like an interesting special case, which probably the context would reveal the details of :)

[01:26] <gfldex> Thrush: see https://docs.perl6.org/type/Junction

[01:27] <psch> Thrush: in general, &infix:<==> should be fine

[01:27] <psch> m: say True == True, True == False, False == False

[01:27] <camelia> rakudo-moar a9a9e1c97: OUTPUT: «TrueFalseTrue␤»

[01:27] <psch> Thrush: i am definitely curious why xor/&infix:<^^> didn't work though

[01:27] <teatime> psch: I assume the worry is that they may not be actual booleans, just something that can coerce to bool

[01:28] <psch> oh

[01:28] <teatime> you could so($a) == so($b) or whatever

[01:28] <teatime> but presumably there's a cleaner way?

[01:28] *** Zoffix joined
[01:28] <Zoffix> m: https://gist.github.com/zoffixznet/8391d05b3c7a7e4669fbe4840c2bc6ca

[01:28] <camelia> rakudo-moar a9a9e1c97: OUTPUT: «Glass half full␤Glass half full␤Glass half empty␤»

[01:28] <Zoffix> m: https://gist.github.com/zoffixznet/8391d05b3c7a7e4669fbe4840c2bc6ca

[01:28] <camelia> rakudo-moar a9a9e1c97: OUTPUT: «Glass half full␤Glass half full␤Glass half full␤»

[01:29] <Zoffix> Weird. It's just three calls to nqp::rand_n, but it's *always* producing `full` for the first two prints.

[01:29] <Thrush> pcsh:  True == True worked for me, but I'm concerned that == is for numbers, which eq is for strings. (True eq True also worked for me.)

[01:29] <Zoffix> What am I doing wrong?

[01:29] *** wamba left
[01:29] <Thrush> which => while

[01:29] <psch> m: say Bool.^mro

[01:29] <camelia> rakudo-moar a9a9e1c97: OUTPUT: «((Bool) (Int) (Cool) (Any) (Mu))␤»

[01:29] <gfldex> m: say so True & True;

[01:29] <camelia> rakudo-moar a9a9e1c97: OUTPUT: «True␤»

[01:29] <psch> Thrush: Bool isa Int

[01:30] <gfldex> if you care about true boolean values use a Junction

[01:30] <psch> m: my $a = 0 but True; say $a & $a

[01:30] <camelia> rakudo-moar a9a9e1c97: OUTPUT: «0␤0␤»

[01:30] <psch> m: my $a = 0 but True; say so $a & $a

[01:30] <camelia> rakudo-moar a9a9e1c97: OUTPUT: «True␤»

[01:30] <psch> still have to coerce though

[01:31] <teatime> Zoffix: did you know that you only have the string 'Glass half empty' one time in that script?

[01:31] *** cgfbee joined
[01:31] <teatime> gfldex: there's not an all-or-none() junction tho

[01:32] * psch .oO( one(all(), none()) )

[01:32] <psch> definitely needs a builtin

[01:32] <psch> >_>

[01:32] <Zoffix> teatime++ thanks

[01:33] <teatime> Zoffix: sometimes you need a simple mind to find a simple problem :)

[01:34] <Zoffix> :)

[01:34] <psch> Thrush: in any case, &infix:<==> should work unless your operands have their own .Int

[01:34] <psch> Thrush: well, or they inherit one somewhere i suppose

[01:35] <psch> Thrush: alternatively you can use the wonderfully concise and comprehensible infix operator [&({$^a.so eqv $^b.so})]

[01:35] <psch> ...you probably shouldn't though, instead maybe implement .Bool on your classes and then use &infix:<^^>

[01:36] <psch> i'm making bad jokes, i probably shouldn't have logged in anymore, given the time and all, g'night~

[01:37] <Zoffix> m: for True, True, False, False, True, False -> $a, $b { say ($a + $b) %% 2 }

[01:37] <camelia> rakudo-moar a9a9e1c97: OUTPUT: «True␤True␤False␤»

[01:37] <Zoffix> m: for True, True, False, False, True, False -> $a, $b { say ?$a === ?$b }

[01:37] <camelia> rakudo-moar a9a9e1c97: OUTPUT: «True␤True␤False␤»

[01:38] *** Zoffix left
[01:40] * gfldex .oO( One needs to dig deep into the typesystem to tell what is true. )

[01:42] <gfldex> the docs are quite thin in that area

[01:43] <gfldex> they don't really tell where a True is comming from. They just state: There is an enum of True and False. Good luck!

[01:44] <gfldex> I think I better practice with a blogpost first before I take that topic on in the docs.

[02:00] <Xliff> If I have a class that does List, can I override methods? 

[02:01] <Xliff> m: class A { also does List; method first(+@a) { say "Hi!" } }

[02:01] <camelia> rakudo-moar a9a9e1c97: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤List is not composable, so A cannot compose it␤at <tmp>:1␤»

[02:02] <Xliff> m: class A { also is List; method first(+@a) { say "Hi!" } }

[02:02] <camelia> rakudo-moar a9a9e1c97: ( no output )

[02:02] <Xliff> m: class A { also is List; method first(+@a) { say "Hi!" } }; A.new.first;

[02:02] <camelia> rakudo-moar a9a9e1c97: OUTPUT: «Hi!␤»

[02:02] <Xliff> Ah!

[02:15] *** Zoffix joined
[02:32] *** cdg joined
[02:33] <Zoffix> New core hacking blog post: "Perl 6 Core Hacking: QASTalicious": https://rakudo.party/post/Perl-6-Core-Hacking-QASTalicious

[02:37] *** Zoffix left
[02:37] *** cdg left
[02:46] *** ilbot3 left
[02:48] *** itaipu left
[02:48] *** Thrush left
[02:57] *** ilbot3 joined
[02:57] *** ChanServ sets mode: +v ilbot3

[03:07] *** aborazmeh left
[04:25] *** Cabanossi left
[04:27] *** Cabanossi joined
[04:47] *** eliasr left
[05:12] *** ramortegui joined
[05:20] *** aborazmeh joined
[05:20] *** aborazmeh left
[05:20] *** aborazmeh joined
[05:31] *** Guest18 left
[05:35] <buggable> New CPAN upload: Terminal-Getpass-0.0.5.tar.gz by TITSUKI https://cpan.metacpan.org/authors/id/T/TI/TITSUKI/Perl6/Terminal-Getpass-0.0.5.tar.gz

[05:36] *** opollen joined
[05:49] *** khw left
[05:55] *** opollen is now known as mpollen

[05:57] *** cdg joined
[05:57] *** aborazmeh left
[05:59] *** mpollen is now known as lpollen

[06:02] *** cdg left
[06:07] *** lpollen left
[06:29] *** darutoko joined
[07:01] *** Eddward joined
[07:04] <Eddward> Where's the best place to open a github issue for the latest star?  I'd think rakudo, but last time I saw a problem like this the right answer was moarvm.

[07:04] <Eddward> # generate sample input

[07:04] <Eddward> cat > /tmp/sample.input <<EOF

[07:04] <Eddward> Musopen%20DVD/Brahms%20-%20Symphony%20No%201%20in%20C%20Major/Symphony%20No.%201%20in%20C%20Minor,%20Op.%2068%20-%20IV.%20Adagio%20-%20PiuC%80%20andante%20-%20Allegro%20non%20troppo,%20ma%20con%20brio.mp3

[07:04] <Eddward> EOF

[07:04] <Eddward> # generate sample output

[07:04] <Eddward> perl -E 'print chr for 77,117,115,111,112,101,110,32,68,86,68,47,66,114,97,104,109,115,32,45,32,83,121,109,112,104,111,110,121,32,78,111,32,49,32,105,110,32,67,32,77,97,106,111,114,47,83,121,109,112,104,111,110,121,32,78,111,46,32,49,32,105,110,32,67,32,77,105,110,111,114,44,32,79,112,46,32,54,56,32,45,32,73,86,46,32,65,100,97,103,105,111,32,45,32,80,105,117,204,128,32,97,110,100,97,110,116,101,32

[07:04] <Eddward> ,45,32,65,108,108,101,103,114,111,32,110,111,110,32,116,114,111,112,112,111,44,32,109,97,32,99,111,110,32,98,114,105,111,46,109,112,51,10' > /tmp/sample.output

[07:05] <Eddward> # attempt translate

[07:05] <Eddward> perl6 -e 'S:g/"%" ( <xdigit>**2)/{ :16(~$0).chr }/.say given "/tmp/sample.input".IO.slurp()' | diff -sq - /tmp/sample.output

[07:05] <Eddward> # legacy translare

[07:05] <Eddward> perl -MFile::Slurp -e 'print(read_file("/tmp/sample.input") =~ s/%([0-9A-Fa-f]{2})/chr(hex($1))/egr)' | diff -sq - /tmp/sample.output

[07:06] <Eddward> That didn't work.  The generated /tmp/sample.output was wrong when I copied it out of irc.

[07:08] <teatime> umm, Eddward 

[07:08] <teatime> there are better ways to paste (use a paste site)

[07:09] <Eddward> yeah.  Sorry.  I'm up too late.  Let me do that right,

[07:11] <Eddward> This works. https://pastebin.com/3xEHcLD5

[07:13] <Eddward> The perl6 version results in "Files - and /tmp/sample.output differ".  The perl5 gets (the expected) "Files - and /tmp/sample.output are identical"

[07:14] <Eddward> I'm probably doing it wrong but I've never found the right way.

[07:22] *** Zoffix joined
[07:23] <Zoffix> Eddward: the difference in in your Perl 5 version, you're just working on bytes, while in Perl 6 version you're working on utf8-decode and normalized strings.

[07:24] <teatime> hrm, I'm not so sure

[07:24] <Eddward> right.

[07:24] <teatime> in your sample input you have, at one point, "Piu%CC%80"

[07:24] <teatime> What should that become?

[07:24] <Eddward> The target has an encoding that perl6 considers "wrong" but that's the name of a file on disk.

[07:25] <Zoffix> Eddward: the first problem you can solve by just using a module, e.g. `use URI::Encode; "/tmp/sample.input".IO.slurp.&uri_decode.say`, but you'll still have the issue with normalization, unless you work with bytes in Perl 6 as well and IIRC there's no simple way to do so right now (like, no same convenince as just running a regex on a bunch of bytes)

[07:25] <Zoffix> Eddward: what's the encoding?

[07:25] <Eddward> Musopen DVD/Brahms - Symphony No 1 in C Major/Symphony No. 1 in C Minor, Op. 68 - IV. Adagio - Piu􏿽xCC􏿽x80 andante - Allegro non troppo, ma con brio.mp3

[07:25] <teatime> Eddward: No, I don't mean post the output, I mean reason about what it should become.

[07:25] <teatime> I think you're working in UTF-8 in Perl6, but not in Perl5.

[07:26] <teatime> (but yeah, the sane thing to do is use a decoding module.)

[07:26] <Eddward> I don't know the encoding specifically.  The are multiple ways to represent the accented u.

[07:27] <teatime> oh, hrm, I take that back.

[07:27] <Eddward> I'm trying to read it from a database and open it in the file system, 

[07:28] <teatime> 0xCC 0x80 would indeed be a combining grave

[07:28] <Eddward> I think perl5 is just pushing bytes,  I don't know how to do that in p6.

[07:28] <teatime> that doesn't seem right to me...

[07:29] <teatime> yeah, I guess Zoffix was right.  My apologies, Zoffix :)

[07:31] <Eddward> URI::Encode doesn't handle other URLs right.  (or rather it handles them right but mono doesn't do it right when creating the database.

[07:32] *** ramortegui left
[07:33] <Eddward> The only problem I see when I use the regex to decode the url is the normalizing.

[07:34] <Eddward> I think think the source db has urls with + or something in them.  URI::Encode turns them into spaces.

[07:34] <teatime> well, when you do chr() separately on CC and 80 you get 2 characters, an I with an accent U+00CC, and an illegal character U+0080

[07:35] <Zoffix> m: say "u\x[300]".chars

[07:35] <camelia> rakudo-moar 9bc26ec3c: OUTPUT: «1␤»

[07:35] <Eddward> It's a legal filename.

[07:35] <teatime> any series of bytes is a legal filename

[07:36] <teatime> as long as it doesn't have / or NUL.  at least on Unix.

[07:36] <teatime> BUT, that only happens in your Perl6 version.

[07:36] <Eddward> I didn't create the file or the db.

[07:36] <teatime> chr() in Perl5 seems to do something... different.

[07:36] <Eddward> So no easy way to do this for now?

[07:36] <teatime> ah, I'm sure you can do it.

[07:37] <Zoffix> Eddward: "this" being what? Are you just trying to read the file or are you doing the decoding too?

[07:37] <Zoffix> Eddward: are the names percent-encoded in the DB?

[07:38] <Eddward> Read input data like the sample and produce the expected sample.output.

[07:39] <Eddward> Yes.  They are file:// url.  It trimmed the input to simplify it.

[07:40] <Eddward> It's a sqlite3 db produced by banshee.  I'm just trying to port my script for exporting playlists.

[07:41] *** darutoko left
[07:42] *** darutoko joined
[07:42] <Eddward> I had this old issue I was never able to figure out : https://github.com/MoarVM/MoarVM/issues/525

[07:43] <Eddward> I saw p6 was getting faster and thought I'd give it another try.

[07:45] <teatime> "call uri_unescape() (we get 2 byte 'ù' here)" that's normalization again

[07:45] <Zoffix> Eddward: lemme try something

[07:45] <Eddward> ok.  Thanks

[07:46] *** darutoko left
[07:46] <teatime> "I wonder if I should be using some datatype other than Str to store path data since Str seems to enforce rules that the filesystem does not."  Yes, exactly.

[07:46] <Eddward> I'm using 2017.10 & 6.c

[07:49] <teatime> How come you dropped the utf8-c8 solution?  afaik that's still valid.

[07:50] <teatime> specifically uri-decode($string, :enc('utf8-c8'))

[07:50] <Eddward> I never got it to work.

[07:51] <Eddward> I'll try again.

[07:52] <Eddward> I don't really understand what utf8-c8.  Will that work for any byte string or will it fail with some other encoding?

[07:53] <teatime> it exists almost entirely because normalization breaks filenames :)

[07:53] *** wamba joined
[07:53] <Zoffix> It won't work. utf8-c8 is just utf8 except instead of exploding on invalid utf8, it will shove the bad bits as as is

[07:54] <teatime> "UTF-8 Clean-8 is an encoder/decoder that primarily works as the UTF-8 one. However, upon encountering a byte sequence that will either not decode as valid UTF-8, or that would not round-trip due to normalization, it will use NFG synthetics to keep track of the original bytes involved. This means that encoding back to UTF-8 Clean-8 will be able to recreate the bytes as they originally existed."

[07:54] <Eddward> ok

[07:54] <Zoffix> Oh

[07:54] <teatime> https://docs.perl6.org/language/unicode

[07:55] <Zoffix> m: say buf8.new(0xCC, 0x80).decode: 'utf8-c8'

[07:55] <camelia> rakudo-moar 9bc26ec3c: OUTPUT: «̀␤»

[07:55] <Zoffix> m: say buf8.new(0x75, 0xCC, 0x80).decode: 'utf8-c8'

[07:55] <camelia> rakudo-moar 9bc26ec3c: OUTPUT: «u􏿽xCC􏿽x80␤»

[07:55] <Zoffix> m: say buf8.new(0x75, 0xCC, 0x80).decode('utf8-c8').chars

[07:55] <camelia> rakudo-moar 9bc26ec3c: OUTPUT: «3␤»

[07:55] <Eddward> perl6 -MURI::Escape  ?

[07:56] <Zoffix> teatime: so uri-decode :enc works?

[07:56] <teatime> Zoffix: samcv says it does in the ticket from a year ago

[07:56] <Zoffix> Ah, cool

[07:56] <teatime> I'm at a bit of a loss for how to plug the pieces together properly, though.

[07:56] <Eddward> I never got it to work.

[07:57] <Eddward> The behavior changed, but I just got a different encoding of the bytes.

[07:58] <Eddward> Looks like I need to install URI::Escape.  It's not panda any mor, right?

[07:58] <Zoffix> zef install URI::Escape

[07:59] <Eddward> thanks

[07:59] <Eddward> Says it is installed already.

[07:59] <Zoffix> Eddward: yeah, teatime++'s way works. Just need to write to STDOUT in bin mode: $ perl6 -e 'use URI::Escape; $*OUT.write: "/tmp/sample.input".IO.slurp.&uri-unescape(:enc<utf8-c8>).encode("utf8-c8")' | diff -sq - /tmp/sample.output

[07:59] <Zoffix> Files - and /tmp/sample.output are identical

[08:00] <Eddward> cool!  Thanks!

[08:00] <Eddward> I'll wrap that into my p6 version of the export script.  I want to see how it performs.  It was slow a year ago.

[08:01] <teatime> Also, I feel better seeing that samcv was confused for a moment in the same way I was by 0xCC 0x80 :)

[08:02] <Eddward> It sounds like it's a screwy file.  I just hate editing originals though.

[08:02] <samcv> hello :)

[08:02] <teatime> oh, hey.  Sorry to ping you :)

[08:02] <samcv> does anyone have a question though :)

[08:02] <teatime> Eddward: which?

[08:02] <teatime> samcv: not anymore I don't think :)

[08:02] <samcv> aww.

[08:02] <samcv> if you have one go ahead and let me know :)

[08:02] <teatime> samcv: your comments on a ticket lead us to solve it.

[08:02] <Eddward> I dug up an old problem.

[08:03] <samcv> ah

[08:03] <teatime> samcv++

[08:03] <samcv> oh URI::Escape?

[08:03] <teatime> yes

[08:03] <samcv> yeah i added utf8-c8 capabilities to that module :) you're welcome!

[08:03] <samcv> someone else had that issue a while ago and so i took the steps to add that functionality in. since i deemed it pretty essential

[08:04] <Eddward> Once I got an updated star it didn't work.  Looks like I missed the binary output.

[08:04] <teatime> Eddward: Your filenames on disk aren't wrong.  Your database is kindof annoying, but not wrong per-se.

[08:04] <teatime> and as you say, it's the data you have.

[08:05] <Eddward> samcv I was me.  I never got it to work before.  I'm getting back to it now.  Sorry to be a pest.

[08:05] <samcv> ah

[08:05] <Eddward> Looks like we have it worked out.

[08:05] <samcv> no worries

[08:05] <teatime> Eddward: there's just more than one correct utf8 encoding for most strings, and filenames are in bytes, not any specific normalization etc.

[08:05] <Eddward> Thanks again everyone

[08:05] <samcv> yep filenames are decoded with utf8-c8 always since we can't assume anything

[08:08] <teatime> Zoffix: Did you ever figure out the answer to the question you had that day... it wasn't actually about receiving multiple ^D from stdin, but that was part of the question/example.

[08:10] <teatime> I ended up researching and getting re-educated about ^D, which is always welcome, and now I'm curious about the original question.  I can find it in the log probably if you don't recall.

[08:13] <Zoffix> teatime: https://irclog.perlgeek.de/perl6/2018-01-20#i_15714540

[08:14] *** Zoffix left
[08:15] <teatime> well, that's the one :/

[08:25] *** Zoffix joined
[08:25] <Zoffix> Eddward: FWIW this version is benching to be 2x faster and doesn't need a module: https://gist.github.com/zoffixznet/7d0aaef60fcf8e1e9735395477b71ee9

[08:26] <Eddward> cool

[08:27] <Eddward> I'd need to adapt it.

[08:30] <Eddward> At the moment I'm trying to figure out "No such method 'IO' for invocant of type 'Blob[uint8]'"

[08:31] <Eddward>     $fh.write: $sth.allrows.map( *.subst: /^ 'file://' /, '' )

[08:31] <Eddward>                            .map( { S :g / '+' /{uri-escape('+')}/ } )

[08:31] <Eddward>                            .map( *.&uri-unescape(:enc('utf8-c8')).encode("utf8-c8") )

[08:31] <Eddward>                            .map( *.IO.relative($library_root.IO.absolute) )

[08:31] <Eddward>                            .map( * ~ "\n" )

[08:31] <Eddward>                            .join;

[08:32] <Zoffix> Eddward: remove `.encode("utf8-c8")`

[08:32] <Eddward> I can probably get away with moving the rel->abs before the url unescape since I know the prefix shouldn't be escaped.

[08:33] <Eddward> Type check failed in binding to parameter '$buf'; expected Blob but got Str ("mod/demo/skaven/seve...)

[08:33] <Eddward> encode at the end?

[08:33] *** ZzZombo joined
[08:34] <Eddward> That ran...

[08:35] <Zoffix> That's a lot of .maps... why not write a single one?

[08:36] <Eddward> I tried that.  Broke it a apart to debug and because I don't really know what I'm doing.

[08:36] <Eddward> I'll try to collapse them.

[08:37] <Eddward> btw, the p6 result watches the p5 result for my entire music library now.

[08:37] <Zoffix> Eddward: also `.subst: :g, "+", "%2b"` will be orders faster than using a regex and sub call

[08:37] <Eddward> err watches=> matches

[08:37] <Zoffix> * instead of { S :g / '+' /{uri-escape('+')}/ } I meant

[08:38] <Zoffix> Also, I imagine `.starts-with 'file://' ?? .substr: chars 'file://' !! $_` would be loads faster than `*.subst: /^ 'file://' /, ''`. And if they all start with `file://` just use .substr without the conditional

[08:39] <Eddward> subst: :g, "+", "%2b" was actually slower.  0m29.627s v 0m32.654s

[08:40] <Eddward> I'll work on collapsing first.

[08:40] <Zoffix> 0_0

[08:40] <Zoffix> ZofBot: IMPOSSIBRU!

[08:40] <ZofBot> Zoffix, 'Sixty-fower, sixty-fower, sixty-fow--' The kitchen door opens, and Juliet emerges

[08:40] <ZzZombo> "Cannot put a type constraint on an 'our'-scoped variable"

[08:40] <ZzZombo> why is that O_o

[08:42] <Zoffix> m: my $s = "foo+bar+ber" ~ rand;  for ^1000_00 { s:g/ '+' /{'%2B'}/ }; say now - INIT now

[08:42] <camelia> rakudo-moar 9bc26ec3c: OUTPUT: «7.9058585␤»

[08:42] <Zoffix> m: my $s = "foo+bar+ber" ~ rand;  for ^1000_00 { .subst: :g, '+', '%2B' }; say now - INIT now

[08:42] <camelia> rakudo-moar 9bc26ec3c: OUTPUT: «1.38105620␤»

[08:42] <Eddward> I'm doing something stupid...

[08:43] <Eddward>     $fh.write: $sth.allrows.map( *.subst: /^ 'file://' /, ''

[08:43] <Eddward>                                   .subst: :g, "+", "%2b" 

[08:43] <Eddward>                                   .&uri-unescape(:enc('utf8-c8')) 

[08:43] <Eddward>                                   .IO.relative($library_root.IO.absolute)

[08:43] <Eddward>                                   ~ "\n" )

[08:43] <Eddward>                            .join.encode("utf8-c8");

[08:43] <Eddward> Malformed postfix call (only alphabetic methods may be detached)

[08:43] <Eddward> I need parens somewhere.

[08:43] <Zoffix> Yes, everywhere you've used `:` instead of `()` for a method call

[08:44] <Eddward> cool

[08:45] <Eddward> .⏏&uri-unescape(:enc('utf8-c8'))

[08:45] <Eddward> Still doesn't like this.

[08:45] <Zoffix> Eddward: oh, right

[08:46] <Eddward> Can't use method syntax?

[08:46] <Zoffix> Eddward: can't break up method chains that contain non-alphabetic methods

[08:46] <Zoffix> like &uri-unescape

[08:47] <Eddward> So one line, no spaces?

[08:48] <Eddward>     $fh.write: $sth.allrows.map( *.subst(/^ 'file://' /, '')

[08:48] <Eddward>                                   .subst(:g, "+", "%2b")

[08:48] <Eddward>                                   .&uri-unescape(:enc('utf8-c8')) 

[08:48] <Eddward>                                   .IO.relative($library_root.IO.absolute)

[08:48] <Eddward>                                   ~ "\n" )

[08:48] <Eddward>                            .join.encode("utf8-c8");

[08:49] <Eddward>     $fh.write: $sth.allrows.map( *.subst(/^ 'file://' /, '').subst(:g, "+", "%2b").&uri-unescape(:enc('utf8-c8')).IO.relative($library_root.IO.absolute)

[08:49] <Eddward>                                   ~ "\n" )

[08:49] <Eddward>                            .join.encode("utf8-c8");

[08:49] <Eddward> that works

[08:49] <Eddward> ugly, but works.

[08:50] *** rindolf joined
[08:50] <Eddward> 0m31.993s

[08:53] *** dogbert11 joined
[08:55] *** setty1 joined
[08:55] *** dogbert17 left
[08:57] <Zoffix> Eddward: you don't need to write it all in one line. Just don't put whitespace between method call dots (or use unspace (`\`)). https://gist.github.com/zoffixznet/5f8e4f64b1d0ce20bd0d10dc9463cb54

[08:57] *** Zoffix left
[08:58] <Eddward> got it

[09:00] *** syntaxman left
[09:02] *** cgfbee left
[09:02] *** syntaxman joined
[09:03] *** syntaxman is now known as Guest79180

[09:07] <Eddward> A little faster ... 0m25.846s

[09:07] *** statisfiable6 left
[09:07] *** statisfiable6 joined
[09:07] *** ChanServ sets mode: +v statisfiable6

[09:08] *** cgfbee joined
[09:20] *** parv joined
[09:23] *** greppable6 left
[09:23] *** greppable6 joined
[09:24] *** ZzZombo left
[09:28] <AlexDaniel> reportable6: uptime

[09:28] <reportable6> AlexDaniel, 1 day, 17 hours, 20 minutes, and 16 seconds, 1566.617188MiB maxrss. This is Rakudo version 2018.01-29-ga2499c90f built on MoarVM version 2018.01 implementing Perl 6.c.

[09:28] <AlexDaniel> uhhh…

[09:28] *** reportable6 left
[09:28] *** bisectable6 left
[09:28] *** unicodable6 left
[09:28] *** reportable6 joined
[09:28] *** ChanServ sets mode: +v reportable6

[09:28] *** bisectable6 joined
[09:28] *** unicodable6 joined
[09:29] *** ZzZombo joined
[09:36] *** lasse_ joined
[09:37] *** Eddward left
[09:38] <lasse_> Hi, I have a PHP job scheduling system. I want to call perl6 from it. PHP arrays carring needed info, Those can be serialized or var_exported and written to disk before perl6 invokation and read back after return. Can anyone advice how to do this?

[09:53] *** Zoffix joined
[09:57] <Zoffix> lasse_: do you have PHP end sorted? What about using json_encode() on the data and sending it to perl6 to STDIN, and then reading it from STDOUT. Then on perl6 end, you'd do `use JSON::Fast; my @data := from-json $*IN.slurp; .... process it....; put to-json @result'

[09:59] <Zoffix> m: use QAST:from<NQP>; BEGIN $*W.compile_time_evaluate: $, QAST::Op.new: :op<call>, :name<&say>, QAST::Op.new: :op<call>, QAST::Block.new: QAST::SVal.new: :value<meows>

[09:59] <camelia> rakudo-moar b6a7d7f64: OUTPUT: «meows␤»

[10:00] <Zoffix> Is it mandatory that QAST::Blocks be declared somewhere and then cloned and p6capturelex'ed into a QAST::WVAL? Is the above call fine? (also, does it need p6capturelex?)

[10:02] <Zoffix> m: use QAST:from<NQP>; BEGIN $*W.compile_time_evaluate: $, QAST::Stmts.new: QAST::Op.new(:op<bind>, QAST::Var.new(:name<$foo>, :scope<lexical>, :decl<var>), QAST::SVal.new: :value<meows>), QAST::Op.new: :op<call>, :name<&say>, QAST::Op.new: :op<call>, QAST::Block.new: QAST::Var.new: :name<$foo>, :scope<lexical>

[10:02] <camelia> rakudo-moar b6a7d7f64: OUTPUT: «meows␤»

[10:02] <lasse_> What do you mean by PHP end sorted? Yes I can Json_encode. Bus how do i invoke Perl6 and make it read my JSON?

[10:03] <Zoffix> Seems to work, but I wonder if it's doing too much work with QAST::Block

[10:05] <Zoffix> lasse_: just like any other program. ##php would be able to give more competent advice than me, but quickly glancing at the docs, looks like proc_open() can get the job done: http://php.net/manual/en/function.proc-open.php#example-4258

[10:06] <Zoffix> lasse_: you'd just `fwrite($pipes[0], json_encode($the_stuff));` and then `$result = stream_get_contents($pipes[1]);` to get the results

[10:06] <Zoffix> + `fclose($pipes[0]);` in between :)

[10:06] <Zoffix> PHP++ # easy to program-by-googling

[10:07] *** lookatme left
[10:07] *** lookatme joined
[10:09] <lasse_> Tx Zoffix, I try it. Now I just have to learn Perl 6:)

[10:10] <Zoffix> :)

[10:20] <Zoffix> lasse_: this seems to work (reverses the array and uppercases the stuff in it): https://gist.github.com/zoffixznet/ef6dd977649eb2857ba832f0e9e1d5d6

[10:20] <Zoffix> Hope that helps \o

[10:20] *** Zoffix left
[10:36] *** ZzZombo left
[10:37] *** ZzZombo joined
[10:43] *** leah2 left
[10:48] *** shinobi-cl left
[11:05] *** lookatme left
[11:06] *** lookatme joined
[11:08] *** markong joined
[11:11] *** quotable6 left
[11:13] *** lookatme left
[11:14] *** lookatme joined
[11:17] *** Grauwolf left
[11:18] *** Grauwolf joined
[11:27] <Geth> ¦ doc: 9292ce5b45 | (JJ Merelo)++ | t/pod6.t

[11:27] <Geth> ¦ doc: Refactor to turn into a single test

[11:27] <Geth> ¦ doc: 

[11:27] <Geth> ¦ doc: And maybe it should be merged into another file to make tests a bit faster.

[11:27] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9292ce5b45

[11:34] *** wamba left
[11:35] *** quotable6 joined
[11:36] *** itaipu joined
[11:37] *** setty1 left
[11:39] *** eliasr joined
[11:40] *** quotable6 left
[11:42] *** quotable6 joined
[11:46] *** quotable6 left
[11:51] *** wamba joined
[11:51] *** lookatme left
[11:52] *** lookatme joined
[12:10] *** parv left
[12:12] *** lookatme left
[12:14] *** quotable6 joined
[12:14] *** ChanServ sets mode: +v quotable6

[12:21] *** lookatme joined
[12:36] *** |oLa|1 left
[12:43] *** rindolf left
[12:57] <ZzZombo>  <ZzZombo> "Cannot put a type constraint on an 'our'-scoped variable"

[12:57] <ZzZombo> <ZzZombo> why is that O_o

[12:59] <moritz> 'our'-scoped variables are globals, so no one piece of code has authority over it

[13:00] <ZzZombo> what do you mean global??

[13:00] <moritz> m: { our $x = 42 }; { say our $x }

[13:00] <camelia> rakudo-moar b6a7d7f64: OUTPUT: «42␤»

[13:01] <moritz> our $x creates a lexical $x that is an alias for $x in the current namespace

[13:02] <ZzZombo> Anyway, I don't get it why does that change anything regarding "no one piece of code has authority over it".

[13:03] <moritz> change from what?

[13:04] <ZzZombo> Err? That shouldn't change anything, and constrained `our` variables should work like any other type of them.

[13:05] <El_Che>  that's the point of being global

[13:06] <moritz> ZzZombo: so, if you have a lexical variable "my Int $x = 42", there can be only one declaration of it, and its type is clear

[13:06] <moritz> but, globals aren't like that, tied to a lexical location of your program

[13:07] *** shinobi-cl joined
[13:07] <moritz> they just come into existence whenever somebody references it

[13:07] <moritz> which access determines its type, then?

[13:09] <moritz> multiple declarations or run-time reads and writes could have conflicting or more narrow or more specific types

[13:09] *** markong is now known as supernaut

[13:09] *** supernaut is now known as suprnaut

[13:09] <moritz> and in the end, globals are simply not such a good idea for most purposes, so it doesn't seem to be worth it to come up with an elaborate scheme for dealing with it all

[13:10] *** suprnaut is now known as markong

[13:14] *** ChoHag joined
[13:15] <ZzZombo> Sorry, I don't follow you. I have a package X with a variable `our y`, to use it I need to import the said package first, while to use a true global variable I just reference it.

[13:16] <ZzZombo> And there can only be one package named such.

[13:16] <moritz> I don't understand your distinction between a package variable a "true global variable"

[13:17] <moritz> m: say $X::y

[13:17] <camelia> rakudo-moar b6a7d7f64: OUTPUT: «(Any)␤»

[13:17] *** jeromelanteri joined
[13:17] <moritz> see? I could reference that before doing any use or import

[13:17] <moritz> before any type constraint for it could even be known

[13:18] <moritz> m: $Just::discovered = 42;

[13:18] <camelia> rakudo-moar b6a7d7f64: ( no output )

[13:18] <ZzZombo> Why does that not fail the same way as accessing undeclared `my` variables?

[13:18] <moritz> if i run that, and *then* load module Just, which declares  "our Array $discovered"; what then?

[13:18] *** p6lert left
[13:18] <moritz> because it's a global

[13:18] <moritz> and globals don't need declarations

[13:18] <ZzZombo> ugh

[13:19] <moritz> only their lexical aliases

[13:19] <moritz> if you don't like 'em, don't use 'em :)

[13:19] <ZzZombo> except I have to?

[13:19] *** p6lert joined
[13:19] <ZzZombo> what kind of response is that?

[13:19] <moritz> what do you need them for?

[13:19] <ZzZombo> I want to store some state in my package.

[13:20] <moritz> there are lots of ways to do that

[13:20] <moritz> singletons come to mind, for example

[13:21] <ZzZombo> Singletons are for classes, right?

[13:21] <moritz> and classes are a nice way to store structured, type-safe data

[13:21] <moritz> which seem to do want to do

[13:22] <ZzZombo> No, I don't need nor want any initialization/clean up that using objects brings.

[13:23] <moritz> I don't think I can help you, nor do I feel this discussion is being productive for anybody

[13:23] <ZzZombo> what

[13:24] <ZzZombo> fuck this shit as well, holy crap, what a load of bullshit was that??

[13:29] *** shinobi-cl left
[13:33] *** camelia left
[13:35] *** jeromelanteri left
[13:41] *** leah2 joined
[13:46] *** leah2 left
[13:57] *** shinobi-cl joined
[13:57] *** Eddward joined
[13:58] <teatime> Eddward: Welcome back!

[14:02] *** aborazmeh joined
[14:02] *** aborazmeh left
[14:02] *** aborazmeh joined
[14:03] *** moritz joined
[14:09] *** aborazmeh left
[14:10] <Eddward> teatime:  Good morning!

[14:22] *** Guest79180 left
[14:23] *** syntaxman joined
[14:23] *** cgfbee left
[14:23] *** syntaxman is now known as Guest77349

[14:24] *** Eddward left
[14:29] *** cgfbee joined
[14:42] *** itaipu left
[14:54] *** itaipu joined
[14:55] *** Ven`` joined
[14:57] *** pecastro joined
[15:01] *** cdg joined
[15:02] *** itaipu left
[15:03] *** cdg left
[15:03] *** cdg joined
[15:06] *** rindolf joined
[15:07] *** cdg left
[15:23] <shinobi-cl> hi all... what is the X:: exception for Out Of Memory? I could not find it in docs.perl6.org

[15:24] <El_Che> shinobi-cl: does it exist?

[15:24] <timotimo> shinobi-cl: when you run out of memory, moarvm just exits

[15:24] <El_Che> Out of memery is mostly too late

[15:24] <El_Che> o

[15:25] <shinobi-cl> oh, ok.

[15:25] <timotimo> an out-of-memory situation is exceedingly difficult to properly recover from

[15:25] *** BuildTheRobots joined
[15:25] <El_Che> most likely the kernel will kill your process

[15:25] <timotimo> especially when you're dealing with multiple threads; we always have the spesh thread

[15:25] <timotimo> oh, hold on

[15:25] <timotimo> m: my $foo = buf8.allocate(999999999999); CATCH { .perl.say }

[15:25] <evalable6> timotimo, rakudo-moar c6cc673de: OUTPUT: «(exit code 1) MoarVM panic: Memory allocation failed; could not allocate 999999999999 bytes␤»

[15:26] <timotimo> hm, ok

[15:26] <timotimo> i thought perhaps we throw that kind of error

[15:26] <timotimo> i mean, when you're requesting 1 gig of memory and the system can't give you what you want, that doesn't mean that the next 8 byte allocation will also fail

[15:27] <timotimo> m: say 999999999999 / 1024 / 1024 / 1024

[15:27] <evalable6> timotimo, rakudo-moar c6cc673de: OUTPUT: «931.32257461455␤»

[15:27] <timotimo> in this case, though, i was requesting almost a terabyte of ram

[15:29] <shinobi-cl> I have a big table, and the user has the chance to request creation of indexes for all the columns if he/she wants to. I was thinking on returning a False if the index ended being too big for RAM.

[15:30] <timotimo> you can check if asking for a given chunk of memory would succeed by NativeCalling into malloc (and of course free right after that) and deciding based on the result

[15:30] <shinobi-cl> obviously it is better to return a False before trying to allocate too much memory, but in the meantime i thought that capturing the exception would have been good enough.

[15:31] <timotimo> actually, if your index data is a buf8 or blob8 or similar already, you can just use what malloc gives you

[15:31] <El_Che> will the application be portable?

[15:32] <timotimo> malloc is available everywhere we have moarvm, i believe

[15:33] <El_Che> aren't you binding libc?

[15:33] <El_Che> (aka will it work on Windows?)

[15:33] <timotimo> if you "is native(Str)" it will use what's loaded in the process already

[15:33] <shinobi-cl> the data is not buf8 of blob8. It is actually anything that perl6 can represent. I will skip this for the moment i guess. BTW i'm developing on Linux 64bit.

[15:34] <timotimo> oh, in that case calculating what the necessary size would be for the buffer is rather difficult

[15:34] <timotimo> if your index is just like an array of native ints or nums it'd be simple, but with proper objects you'll go through moarvm's own gc-managed heap

[15:35] <shinobi-cl> Well... the index is just a .Str of the data in the cells, and the contents are just Ints indicating the row number where the value can be found

[15:36] <shinobi-cl> like "A" -> (1, 3, 4, 1000)

[15:36] <shinobi-cl> like "A" => (1, 3, 4, 1000)

[15:36] <shinobi-cl> we can found the value "A" in the rows 1, 3, 4 and 1000 for that column.

[15:36] <timotimo> so a list of pairs from Str to a list of Int?

[15:37] <shinobi-cl> yes

[15:37] <timotimo> if you want to be memory-efficient and don't mind a bit of extra work, you can make that a list of strings and three lists of ints

[15:38] <timotimo> the list of strings is what has your "A" and friends in it, the first list of ints tells you where in the third list your actual data begins and the second list of ints tells you how many entries belong to that

[15:38] <timotimo> i.e. for just the A example you have it would be ["A"], [0], [4], [1, 3, 4, 1000]

[15:38] *** Rawriful joined
[15:38] <shinobi-cl> %index<ColumnA> = :A(1,3,4,100), :B(2,500), :C(9,10,11,540)     .... etc

[15:42] <shinobi-cl> thanks timotimo, i will see how i can make it work. will try to use the least amoung of hashes and only use arrays when possible. Just one last question. Is there a method or way to ask the acual size of an object?

[15:42] <shinobi-cl> actual size*

[15:43] <timotimo> apart from taking heap snapshots and measuring memory usage before and after creating it, not really, no

[15:43] <Ulti> ///^H^H^H^H/win 5

[15:43] <timotimo> especially since if you recently freed objects of the "right size", you'll fill slots back up that were used before, so memory usage will appear to be 0

[15:44] <shinobi-cl> that sounds fine for a test i am doing. What can i found docs about this (my guess is that this has to be done in NQP)

[15:44] <shinobi-cl> Where can i find*

[15:44] <shinobi-cl> (sorry my english sucks today :P )

[15:46] <timotimo> which do you mean?

[15:46] <timotimo> measuring memory usage before and after?

[15:46] <shinobi-cl> yes

[15:46] <timotimo> the telemetry module in rakudo exposes that, for example

[15:49] <shinobi-cl> I will use that one, seems ok for what i need :) thanks timotimo++

[15:50] <timotimo> good luck!

[15:50] <timotimo> i'll be afk for a bit

[15:52] *** cdg joined
[15:59] <wictory[m]> where is &next defined?

[16:00] <moritz> src/core/control.pm

[16:00] <wictory[m]> thanks!

[16:00] <moritz> found through "git grep 'sub next'" :-)

[16:00] <moritz> you're welcome

[16:01] *** setty1 joined
[16:02] <wictory[m]> hmm, I was grepping but I didnt find it through that .. I'm probably getting tired. Also good to hear that other people use the same method as I do :) Thanks again!

[16:09] *** esh left
[16:10] <timotimo> s: "next", \()

[16:10] <SourceBaby> timotimo, Something's wrong: ␤ERR: Cannot resolve caller sourcery(Str, Capture); none of these signatures match:␤    ($thing, Str:D $method, Capture $c)␤    ($thing, Str:D $method)␤    (&code)␤    (&code, Capture $c)␤  in block <unit> at -e line 6␤␤

[16:10] <timotimo> s: &next, \()

[16:10] <SourceBaby> timotimo, Sauce is at https://github.com/rakudo/rakudo/blob/c6cc673de/src/core/control.pm#L80

[16:10] <timotimo> wictory[m]: ^

[16:10] *** esh joined
[16:13] * moritz never figured out how to use that bot

[16:13] <wictory[m]> timotimo: 👍

[16:17] *** igor__ joined
[16:18] <igor__> Hi everyone! Can my someone explain why sort(@a) ~~ sort(@a) is False?

[16:18] <igor__> What comparison operator should use in this case?

[16:19] <psch> igor__: depending on the contents, probably &infix:<eqv>

[16:19] <igor__> I just want to compare these two lists

[16:19] <igor__> I don't understand why ~~ doesn't work here

[16:19] <psch> igor__: the content dependency is "are there custom classes in there that maybe eqv weirdly"

[16:20] * psch wonders where camelia fluttered off to

[16:20] <psch> evalable6: help

[16:20] <evalable6> psch, Like this: evalable6: say ‘hello’; say ‘world’ # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Evalable

[16:20] <psch> evalable6: my @a = 3,1,5,2,4; say sort(@a) ~~ sort(@a)

[16:20] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «False␤»

[16:21] <geekosaur> also ~~ is not a short way to say eqv. it has special behaviors that may be getting in the way

[16:21] <geekosaur> do NOT assume it's the way to write a generic "=="!

[16:21] <psch> yeah, i was wondering if the LHS topicalization is to blame

[16:21] <psch> geekosaur++

[16:21] <El_Che> eqv also is False

[16:21] <igor__> Yes, eqv works indeed

[16:21] <psch> evalable6: my @a = 3,1,5,2,4; say sort(@a) eqv sort(@a)

[16:21] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «True␤»

[16:22] <igor__> I know that it is not a short way, I thought that ~~ is used to compare elements

[16:22] <igor__> and if elements are equal, then ~~ is true

[16:22] <psch> igor__: smartmatch is not comparison.  it's asking the RHS if the LHS is acceptable

[16:23] <psch> evalable6: my &h = -> $a { $a.uc }; say &h ~~ &h

[16:23] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «(exit code 1) No such method 'uc' for invocant of type 'Block'␤  in block <unit> at /tmp/Ki1IIGAwks line 1␤␤»

[16:23] <psch> evalable6: my &h = -> $a { $a.gist.uc }; say &h ~~ &h

[16:23] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «-> $A { #`(BLOCK|94066313049264) ... }␤»

[16:24] <igor__> Quote from a Perl6 book that I'm reading now: "To know whether they contain the same elements, use the smart match operator"

[16:24] <timotimo> evalable6: my @a = 3,1,5,2,4; say sort(@a).List ~~ sort(@a).List

[16:24] <evalable6> timotimo, rakudo-moar 8afd791c1: OUTPUT: «True␤»

[16:24] <El_Che> evalable6: my @a = 3,1,5,2,4; @a ~~ @a

[16:24] <evalable6> El_Che, rakudo-moar 8afd791c1: OUTPUT: «»

[16:24] <timotimo> igor__: ^

[16:25] <El_Che> evalable6: my @a = 3,1,5,2,4; say @a ~~ @a

[16:25] <evalable6> El_Che, rakudo-moar 8afd791c1: OUTPUT: «True␤»

[16:25] <timotimo> evalable6: my @a = 3,1,5,2,4; say @a.sort.WHAT

[16:25] <evalable6> timotimo, rakudo-moar 8afd791c1: OUTPUT: «(Seq)␤»

[16:25] <psch> timotimo: ah, so it's Seq.ACCEPTS that's surprising?

[16:25] <timotimo> i think so

[16:25] <igor__> Ok, that means that I have to add .List here

[16:25] <timotimo> i don't know what Seq.Accepts should do, in general

[16:25] <igor__> convert to a list explicitly

[16:25] <psch> it does Cool.ACCEPTS currently, apparently

[16:25] <timotimo> igor__: or assign to an @ variable earlier

[16:25] <psch> as in, Seq.pm doesn't have a definition

[16:26] <psch> +src/core/

[16:26] <psch> oh hm, maybe Iterable or Sequence have one

[16:26] <El_Che> it true it's not alway straight forward when a .List convertion is required

[16:26] <timotimo> psch: sourcery can help us with that :)

[16:27] <timotimo> s: (1,2,3).sort, "ACCEPTS", \()

[16:27] <SourceBaby> timotimo, Something's wrong: ␤ERR: Could not find candidate that can do \()␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 29␤  in block <unit> at -e line 6␤␤

[16:27] <timotimo> er, of course

[16:27] <timotimo> s: (1,2,3).sort, "ACCEPTS", \(Seq)

[16:27] <SourceBaby> timotimo, Sauce is at https://github.com/rakudo/rakudo/blob/8afd791c1/src/core/Any.pm#L19

[16:27] <psch> ah, Any

[16:27] <timotimo> oops

[16:27] <timotimo> that's an undefined seq right there

[16:27] <psch> timotimo: yeah i stopped looking manually after checking Seq, Sequence, and Iterable

[16:27] <timotimo> s: (1,2,3).sort, "ACCEPTS", \(Seq:D)

[16:27] <SourceBaby> timotimo, Sauce is at https://github.com/rakudo/rakudo/blob/8afd791c1/src/core/Any.pm#L19

[16:27] <timotimo> s: (1,2,3).sort, "ACCEPTS", \(Seq.new())

[16:27] <SourceBaby> timotimo, Something's wrong: ␤ERR: Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at -e line 6␤␤

[16:27] <timotimo> s: (1,2,3).sort, "ACCEPTS", \((1,2,3).sort)

[16:27] <SourceBaby> timotimo, Sauce is at https://github.com/rakudo/rakudo/blob/8afd791c1/src/core/Any.pm#L18

[16:27] <timotimo>     multi method ACCEPTS(Any:D: Mu:D \a) { self === a }

[16:28] <timotimo> that's the one it uses

[16:28] <psch> mhm, eqaddr should probably fail there

[16:28] <psch> ...unless we started interning Seqs? :o

[16:28] <igor__> Is there any universal method to say, when I should convert something to a list and when not?

[16:29] <psch> igor__: i'm not quite sure the current behavior you observed should stay like this

[16:29] <igor__> By the way, it is enough to convert the RHS only

[16:29] *** Rawriful left
[16:29] <psch> as in, at least fully reified Seqs should probably ACCEPTS like List does

[16:29] <igor__> so sort(@a) ~~ sort(@a).List is True

[16:29] <psch> says my gut

[16:31] <mst> psch: I think <thing> ~~ <thing> for any value of <thing> should be expected to be true unless you've got a *really* good reason for it not to be, yeah

[16:31] <psch> mst: like <thing> being a Routine

[16:32] <El_Che> mst++

[16:32] <igor__> mst: I agree, that Is what I expected

[16:32] *** domidumont joined
[16:33] <psch> evalable6: say Regex.^mro

[16:33] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «((Regex) (Method) (Routine) (Block) (Code) (Any) (Mu))␤»

[16:33] <mst> psch: because putting a Routine on the RHS of smartmatch is explicitly asking for it to be invoked and its result used, right/

[16:33] <psch> well, Code is probably the type graph diversion that makes it special

[16:34] <mst> ah, yeah, it's marked as "(Code) method ACCEPTS" but it's in the Routine docs, hence me getting the wrong one

[16:34] <igor__> Is there any method shat I should use for reliable comparison of tqo seqs? Just convert the RHS to a List?

[16:35] <psch> mst: to be fair, i think that really is the one execption, Code being magically as smartmatch RHS

[16:35] <psch> igor__: eqv as suggested earlier seemed to work?

[16:35] * teatime wonders if the similarity between Seq and Sikh is one of those odd Perl/Larry jokes or not

[16:35] <mst> or "you made an object of a class where you defined your own ACCEPTS method in order to intentionally alter the behaviour"

[16:36] <mst> Code behaving magically is really just a shorthand way of doing that

[16:36] <mst> (arguably, in my head)

[16:36] *** chakli joined
[16:36] <igor__> eqv will not work if you compare sorted([1,2,3,4]) with [1,2,3,4] though elements are equal

[16:36] <psch> oh, yeah, but Code is the one exception we have in CORE afaik

[16:36] <psch> igor__: but that's not two Seqs ;)

[16:36] <psch> igor__: i see your point though.

[16:37] <igor__> yes, I said it wrong

[16:37] <igor__> two iterables or whatever

[16:37] <mst> I guess the problem is that you can't be consistent for all Seqs, because not all Seqs can be effectively compared, because they could be lazy and/or infinite?

[16:37] <chakli> Is there a builtin class/function to measure time elapsed

[16:37] <timotimo> mst: Seq is a stateful thing, so checking against another thing should consume the seq and you're screwed :)

[16:37] <chakli> m: my $start = time; sleep 3;say time -$start 

[16:37] <evalable6> chakli, rakudo-moar 8afd791c1: OUTPUT: «3␤»

[16:38] <chakli> like this?

[16:38] <timotimo> m: my @a = 9, 4, 2, 5, 6; my $foo = @a.sort; say $foo ~~ $foo; .say for $foo

[16:38] <evalable6> timotimo, rakudo-moar 8afd791c1: OUTPUT: «True␤(2 4 5 6 9)␤»

[16:38] <psch> m: my $start = now; sleep 1; say now - $start

[16:38] *** domidumont left
[16:38] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «1.0017287␤»

[16:38] <timotimo> but apparently we cache that?

[16:38] <timotimo> oh, we don't compare at all, right

[16:38] <timotimo> m: my @a = 9, 4, 2, 5, 6; my $foo = @a.sort; say $foo ~~ $foo.List; .say for $foo

[16:38] <evalable6> timotimo, rakudo-moar 8afd791c1: OUTPUT: «(exit code 1) False␤The iterator of this Seq is already in use/consumed by another Seq␤(yo…»

[16:38] <evalable6> timotimo, Full output: https://gist.github.com/c10d4b00c8389e82e53fc2eb534a78d2

[16:38] <timotimo> mst: ^- check it out

[16:38] *** evalable6 left
[16:38] *** evalable6 joined
[16:38] *** domidumont joined
[16:39] <moritz> chakli: I think lizmat built something for instrumentation/timing, but I can't remember what it's called

[16:40] <timotimo> moritz: it's "Telemetry" and "snapper"

[16:40] <timotimo> i.e. if you -Msnapper your script it'll give you a nice table/summary at the end

[16:40] <igor__> So, may I think that the best method is to ~~ + convert RHS into a list?

[16:40] *** zakharyas joined
[16:41] <psch> the build-in module for timing is Telemetry, isn't it

[16:41] <timotimo> yes

[16:46] <chakli> Telemetry seems more like perf :) ill stick to "time - $start" :)

[16:47] <chakli> Thanks

[16:48] <psch> m: say time.WHAT; say now.WHAT

[16:48] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «(Int)␤(Instant)␤»

[16:48] <psch> chakli: &now gives you milliseconds, fyi

[16:49] <moritz> m: say now

[16:49] <evalable6> moritz, rakudo-moar 8afd791c1: OUTPUT: «Instant:1517158200.001190␤»

[16:49] <chakli> oh, thanks. ill use that then

[16:49] <moritz> looks like microseconds, even

[16:52] <chakli> is there something like c++ destructor for perl6 classes?

[16:52] <moritz> there's DESTROY, but it only runs when the GC reclaims the object

[16:53] <psch> object destruction isn't deterministic

[16:53] <psch> there's probably a long explanation by jnthn++ somewhere in the irclog

[16:54] <psch> all i know is "spooky lowlevel magic happens sometimes"

[16:54] <chakli> not when it the object goes out of scope

[16:54] <timotimo> correct

[16:55] <geekosaur> it becomes *eligible* if it goes out of scope with no remaining references. gc will happen when memory is needed at some point afterward

[16:56] <geekosaur> I don;t know exactly what gc strategy or mechanism moarvm uses

[16:56] <timotimo> if the object dies young, the gc that will get it will happen rather a bit sooner, because moarvm does minor and major collections

[17:00] <wictory[m]> is there any nice way to format a Duration as hh:mm:ss, for example, or does everybody roll their own formating every time?

[17:02] *** Cabanossi left
[17:02] *** zakharyas left
[17:03] *** khw joined
[17:03] <wictory[m]> p6: say(DateTime.new(DateTime.now.later(:1day)-DateTime.now).hh-mm-ss)

[17:04] *** Cabanossi joined
[17:06] <wictory[m]> m: say(DateTime.new(DateTime.now.later(:1day)-DateTime.now).hh-mm-ss);

[17:06] <evalable6> wictory[m], rakudo-moar 8afd791c1: OUTPUT: «23:59:59␤»

[17:09] *** itaylor57 joined
[17:10] * psch .o( days are only 23:59:59 long??! )

[17:10] <moritz> seems about right :-)

[17:10] *** khisanth__ left
[17:10] <moritz> the two execution of DateTime.now won't return the same result

[17:10] <moritz> *executions

[17:13] <wictory[m]> a day is actually something like 23:59:59.999287, depending on your perl6 build..

[17:13] <moritz> m: given DateTimew.now { say DateTime.new(.later(:1day)-$_).hh-mm-ss

[17:13] <evalable6> moritz, rakudo-moar 8afd791c1: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/bhWVSLxhbq␤Missing…»

[17:13] <evalable6> moritz, Full output: https://gist.github.com/49ade66e5ef99e603ca967d68d53f6b0

[17:13] <igor__> Ok, thank you very much for the help! I created a question on Stackoverflow (before joining this channel), so if you have time and want to answer it for all, please: https://stackoverflow.com/questions/48488381/perl6-comparison-operator

[17:13] <moritz> m: given DateTimew.now { say DateTime.new(.later(:1day)-$_).hh-mm-ss }

[17:13] <evalable6> moritz, rakudo-moar 8afd791c1: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/WWT6E4x5xo␤Undeclared name:␤    DateTimew used at line 1. Did you mean 'DateTime'?␤␤»

[17:13] <igor__> And thank you very much for the help once again

[17:14] <moritz> m: given DateTime.now { say DateTime.new(.later(:1day)-$_).hh-mm-ss }

[17:14] <evalable6> moritz, rakudo-moar 8afd791c1: OUTPUT: «00:00:00␤»

[17:14] *** leah2 joined
[17:22] *** khisanth__ joined
[17:23] *** igor__ left
[17:23] <moritz> igor__: I've written an answer, though I suspect it might not be very satisfactory to you

[17:27] <Geth> ¦ doc: f74384849d | (Moritz Lenz)++ | doc/Type/Any.pod6

[17:27] <Geth> ¦ doc: &sort actually returns a Seq, not a List

[17:27] <Geth> ¦ doc: 

[17:27] <Geth> ¦ doc: see https://stackoverflow.com/questions/48488381

[17:27] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f74384849d

[17:27] <synopsebot> Link: https://doc.perl6.org/type/Any

[17:28] *** leah2 left
[17:30] <teatime> moritz: from the other guy: "It would not make sense to run through two Seqs to see if they equivalent because then they'd be exhausted."  seems like there would be plenty of situations where that's all you want/need to know about two seqs, and are happy to let them be exhausted after comparison.  *shrug*

[17:31] <timotimo> teatime: then you can still use .List on them and discard the result immediately, or use something like >>==<<

[17:31] <moritz> teatime: the other option would be to use .cache in ACCEPTS

[17:31] <moritz> teatime: for the plenty of cases where you don't want the Seq to be exhausted

[17:32] <moritz> the other question is: is it really worthwhile to return a Seq from sort, and not just a List?

[17:32] <moritz> you have to exhaust the input list anyway for sorting, so the performance gains from returning a lazy list are limited by nature

[17:33] <teatime> timotimo: to your first point, they might be really long.  but >>==<< would seem to satisfy me.

[17:33] *** zakharyas joined
[17:34] <moritz> m: say (1, 2) >>==<< (1, 2, 3)

[17:34] <evalable6> moritz, rakudo-moar 8afd791c1: OUTPUT: «(exit code 1) Lists on either side of non-dwimmy hyperop of infix:<==> are not of the same length␤left: 2 elements, right: 3 elements␤  in block <unit> at /tmp/bhurDAHHbt line 1␤␤»

[17:34] <moritz> might not be what you want

[17:34] <psch> m: say (1,2) <<==>> (1,2,3)

[17:34] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/esu9jrTNFo␤Unsuppo…»

[17:34] <evalable6> psch, Full output: https://gist.github.com/f8e42d06acaa84869d71c76336373a25

[17:35] <psch> oh can't dwim both sides or something..?

[17:35] <psch> ah, no

[17:35] <psch> m: say (1,2) <<[==]>> (1,2,3)

[17:35] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «(True True False)␤»

[17:37] *** trnh joined
[18:00] *** leah2 joined
[18:03] *** zakharyas left
[18:08] *** domidumont left
[18:09] *** domidumont joined
[18:16] *** zakharyas joined
[18:16] *** domidumont1 joined
[18:18] *** domidumont left
[18:20] *** Ven`` left
[18:22] <lizmat> Files=1233, Tests=76124, 302 wallclock secs (15.06 usr  5.48 sys + 2070.09 cusr 200.43 csys = 2291.06 CPU)

[18:22] <lizmat> wow ^^^

[18:32] *** igor__ joined
[18:33] <igor__> It's me again (the question about ~~ of seqs)

[18:33] <igor__> Probably you knew it, but it was a surprise for me,

[18:34] <igor__> result of ~~ depdends on implementation: Perl6 from Debian returns True,

[18:34] <psch> igor__: that's the same implementation, just an older version

[18:34] <igor__> and perl6 that I built using rakudobrew returns False

[18:34] <psch> bisectable6: help

[18:34] <bisectable6> psch, Like this: bisectable6: old=2015.12 new=HEAD exit 1 if (^∞).grep({ last })[5] // 0 == 4 # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Bisectable

[18:35] <teatime> igor__: it might be such an old version that sort doesn't return a seq.

[18:35] <psch> bisectable6: old=2015.12 new=HEAD my @a = 2,4,1; say sort(@a) ~~ sort(@a)

[18:35] <bisectable6> psch, Bisecting by output (old=2015.12 new=8afd791) because on both starting points the exit code is 0

[18:35] <bisectable6> psch, bisect log: https://gist.github.com/455b8ae06915031698fc447da6b2cbef

[18:35] <bisectable6> psch, (2016-12-28) https://github.com/rakudo/rakudo/commit/434bf75b9d69747f8b13de92a64bde296ecab5be

[18:35] <igor__> yes, you seem to be right

[18:35] <igor__> ic$ perl6 --version This is Rakudo version 2017.12 built on MoarVM version 2017.12.1 implementing Perl 6.c. ic$ /usr/bin/perl6 --version This is perl6 version 2015.11 built on MoarVM version 2015.11

[18:35] <AlexDaniel> 6c: my @a = 2,4,1; say sort(@a) ~~ sort(@a)

[18:35] <committable6> AlexDaniel, ¦2015.12,2016.01.1,2016.02,2016.03,2016.04,2016.05,2016.06,2016.07.1,2016.08.1,2016.09,2016.10,2016.11,2016.12: «True␤» ¦2017.01,2017.02,2017.03,2017.04.3,2017.05,2017.06,2017.07,2017.08,2017.09,2017.10,2017.11,2017.12,2018.01,HEAD(8afd791): «False␤»

[18:35] <psch> AlexDaniel++ 

[18:36] <igor__> wow

[18:36] <igor__> that was cool

[18:36] <AlexDaniel> .oO( what am I being ++-ed for? The bots are doing all the work )

[18:36] <igor__> 6c makes magic

[18:36] <igor__> 6c: my @a = 2,4,1; say sort(@a) ~~ sort(@a).List

[18:36] <committable6> igor__, ¦6c (27 commits): «True␤»

[18:37] <psch> AlexDaniel: knowing and working on the bots :p

[18:37] <igor__> Wow, that was cool

[18:37] <igor__> How can I use this bot offline? Or better to say, how can I use without IRC?

[18:38] <igor__> Just to check my dumb question before asking them

[18:38] <AlexDaniel> psch: what I find more impressive is that evalable6 figured out by itself that camelia is not here, and started responding to m:

[18:38] *** kjk joined
[18:38] <AlexDaniel> never thought that this feature would be as useful :)

[18:38] *** zakharyas left
[18:39] <AlexDaniel> igor__: unfortunately there is no way currently, I have some ideas on how to make that happen but not much done yet

[18:39] <psch> yeah, that's pretty great

[18:39] <AlexDaniel> igor__: you can of course compile rakudo on every release, that by itself will take a bit of time

[18:39] <igor__> Yes, I would do it

[18:39] <igor__> And provide a public service doing this

[18:40] <AlexDaniel> mm what do you mean? :)

[18:40] <igor__> I'm working on a documentation service for different languages (cheat.sh; just do curl cheat.sh to see what it looks like)

[18:40] <psch> igor__: maybe make it an irc bo- wait a second

[18:41] *** Kyo91 joined
[18:41] <igor__> perl6 is not yet integrated, but I'm working on it now

[18:41] *** rindolf left
[18:42] <igor__> so it will be possible to get perl6 doc using cheat.sh (and all its interfaces like vim plugins, emacs plugins etc.). Probably it is not really useful for perl6,

[18:42] <teatime> igor__: nice.

[18:42] <igor__> because it has its own documentation mechanisms and they are really cool,

[18:42] <psch> igor__: nah, it sounds like it could be useful

[18:42] <igor__> BUT

[18:42] <AlexDaniel> interesting project

[18:42] <igor__> I want to integrate perl6 support in cheat.sh anyway,

[18:42] <igor__> and now I had an idea: 

[18:43] <kjk> hello,   10.rand   works but shouldn't    rand(10:)    also work?

[18:43] <igor__> integrate not only doc, but execution also

[18:43] <AlexDaniel> huggable: eval

[18:43] <huggable> AlexDaniel, nothing found

[18:43] <igor__> and this feature (something like c6)

[18:43] <psch> kjk: i think you mean 'rand 10:'

[18:43] <igor__> would be really cool here

[18:43] *** rindolf joined
[18:43] <teatime> igor__: I'm actually rather impressed, because the commands I've tried so far actually have useful cheatsheets already.

[18:43] <psch> m: say rand 10:

[18:43] <kjk> psch: doesn't work either

[18:43] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/qRLhDwjZ8w␤Unsuppo…»

[18:43] <evalable6> psch, Full output: https://gist.github.com/7cef0e5f02b365d8443ef3d99f22e40f

[18:44] <psch> kjk: ah, precedence there probably

[18:44] <psch> m: say rand 10::

[18:44] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/TMhaVa_tKI␤Unsuppo…»

[18:44] <evalable6> psch, Full output: https://gist.github.com/bf49a5fdc984c3984a11477a79330489

[18:44] *** leah2 left
[18:44] <psch> hmm, maybe not vOv

[18:44] <psch> ooh, it's a per5-ism warning there

[18:45] <psch> kjk: yeah, it should work but we don't reach the... whatever we call the : there during parse because we hit a perl5-ism complaint first

[18:45] <psch> m: say 10:

[18:45] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «10␤»

[18:45] <kjk> perl5-ism warning messes up the grammar?

[18:45] <igor__> teatme: you cal try cheat.sh/perl/ by the way

[18:45] <psch> kjk: FSDO "mess up," i suppose :)

[18:46] <psch> ...i think that colon is also an invocant marker?  the term seems bound to signatures in my head though

[18:50] *** igor__ left
[18:51] <kjk> psch: rand being a term gives it higher precedence than calling like rand(10:) ?

[18:51] <psch> kjk: the parens are always wrong i think

[18:52] <psch> m: say(10:)

[18:52] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «10␤»

[18:52] <psch> uh

[18:52] <psch> ...or i'm just confused

[18:52] <psch> m: class A { method foo { say "foo" } }; foo(A:)

[18:52] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «foo␤»

[18:52] <kjk> m: pick(^10:)

[18:52] <evalable6> kjk, rakudo-moar 8afd791c1: OUTPUT: «»

[18:52] <psch> kjk++ 

[18:53] <psch> of course the parens are allowed, because : is just an invocant marker and it's still a normal invocation... >_>

[18:54] <psch> m: say &rand

[18:54] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «sub rand ( --> Num:D) { #`(Sub+{Callable[Num:D]}|93966989900360) ... }␤»

[18:54] <psch> m: say &term:<rand>

[18:54] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/JuJI2NSlYq␤Undeclared routine:␤    term:<rand> used at line 1. Did you mean 'term:<time>', 'term:<now>'?␤␤»

[18:54] <psch> kjk: rand doesn't seem to be a term

[18:55] <psch> well, we have a 'token term:sym<rand>' in Perl6::Grammar

[18:55] <psch> that's why we compile-time SORRY

[18:55] <kjk> saw this in the doc: sub term:<rand> (--> Num:D)

[18:56] <psch> huh, i wonder why that's there

[18:56] <psch> the impl of &rand is a normal sub

[18:56] <psch> https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp#L3426 is the relevant bit of the core grammar

[18:57] <psch> that's where we compile-time bail

[18:57] <kjk> I don't really understand the difference between a term and a normal sub. is it precedence?

[18:58] <psch> terms have different parsing rules

[18:59] <psch> and allow more than subs as their identifier too

[18:59] <psch> ...actually i think that is the parsing difference

[18:59] <psch> i might be getting tired :)

[18:59] <psch> m: sub term:<dice> { 1..6 .pick }; say dice + dice

[18:59] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «12␤»

[18:59] <psch> m: sub dice { 1..6 .pick }; say dice + dice

[18:59] <evalable6> psch, rakudo-moar 8afd791c1: OUTPUT: «(exit code 1) Too many positionals passed; expected 0 arguments but got 1␤  in sub dice at /tmp/DJhj6EhYGP line 1␤  in block <unit> at /tmp/DJhj6EhYGP line 1␤␤»

[19:00] <psch> kjk: ^^^ that's another difference actually

[19:00] <psch> from https://docs.perl6.org/routine/term:%3C%3E

[19:01] <kjk> psch: oh ic, thanks

[19:03] <TEttinger> m: sub term:<dice> { 1..6 .pick }; say dice + dice + dice + dice

[19:03] <evalable6> TEttinger, rakudo-moar 8afd791c1: OUTPUT: «12␤»

[19:03] <TEttinger> m: sub term:<dice> { 1..6 .pick }; say dice + dice + dice + dice

[19:03] <evalable6> TEttinger, rakudo-moar 8afd791c1: OUTPUT: «12␤»

[19:03] <TEttinger> uh

[19:03] <kjk> ha I think (1..6).pick is needed

[19:03] <teatime> TEttinger: https://abhishekkr.github.io/slides/slide-images/dilbert-random-not-random.gif

[19:03] <psch> oh right

[19:03] <psch> prefix:<^> vs infix:<..>

[19:04] <TEttinger> but that wouldd be 3 right?

[19:04] <psch> the former has the space trick

[19:04] <psch> ...or something?

[19:04] <psch> i give up, time for bed o/

[19:04] <TEttinger> m: sub term:<dice> { (1..6).pick }; say dice + dice + dice + dice

[19:04] <evalable6> TEttinger, rakudo-moar 8afd791c1: OUTPUT: «14␤»

[19:04] <TEttinger> better

[19:04] <TEttinger> m: sub term:<dice> { (1..6).pick }; say dice + dice + dice + dice + dice

[19:04] <evalable6> TEttinger, rakudo-moar 8afd791c1: OUTPUT: «17␤»

[19:04] <TEttinger> still statistically unlikely

[19:05] <TEttinger> err no

[19:05] <TEttinger> that's average, or close

[19:05] <TEttinger> m: sub term:<dice> { (1..6).pick }; say dice + dice + dice + dice + dice

[19:05] <evalable6> TEttinger, rakudo-moar 8afd791c1: OUTPUT: «15␤»

[19:05] <TEttinger> ok, good

[19:10] *** leah2 joined
[19:12] *** kjk left
[19:29] *** leah2 left
[19:34] *** greppable6 left
[19:35] *** greppable6 joined
[19:37] *** pecastro left
[19:41] *** domidumont1 left
[19:51] *** Rawriful joined
[20:12] *** leah2 joined
[20:30] *** ChoHag left
[20:32] <DrForr> m: sub infix:<d>($a,$b){[+]{(1..$b).pick) xx $a}}

[20:32] <evalable6> DrForr, rakudo-moar 8afd791c1: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/sS0f4AFe1Y␤Unable …»

[20:32] <evalable6> DrForr, Full output: https://gist.github.com/b84be515d7b8a115c49e4efa8ddee656

[20:33] *** Kaiepi left
[20:36] *** Kaiepi joined
[20:36] <AlexDaniel> m: sub infix:<d>($a,$b){[+]{(1..$b).pick xx $a}}

[20:36] <evalable6> AlexDaniel, rakudo-moar 8afd791c1: OUTPUT: «»

[20:55] *** teatime left
[21:00] *** rindolf left
[21:02] *** rindolf joined
[21:05] *** |oLa| joined
[21:07] *** markong left
[21:13] *** colomon left
[21:14] *** colomon joined
[21:14] *** MasterDuke joined
[21:22] *** MasterDuke left
[21:33] *** lasse_ left
[21:40] *** rindolf left
[21:45] *** MasterDuke joined
[21:56] *** MasterDuke left
[21:58] *** MasterDuke joined
[22:04] *** markong joined
[22:04] *** MasterDuke left
[22:05] *** Aaronepower joined
[22:10] *** itaipu joined
[22:39] *** setty1 left
[22:42] *** shinobicl joined
[22:43] *** shinobi-cl left
[23:04] *** SourceBaby left
[23:05] *** p6lert left
[23:06] *** synopsebot left
[23:06] *** dalek left
[23:06] *** Geth left
[23:06] *** psch left
[23:06] *** Util left
[23:07] *** sergot left
[23:07] *** masak left
[23:09] *** Ven`` joined
[23:09] *** Ven`` left
[23:09] *** dalek joined
[23:09] *** ChanServ sets mode: +v dalek

[23:09] *** synopsebot joined
[23:09] *** Geth joined
[23:09] *** ChanServ sets mode: +v synopsebot

[23:09] *** ChanServ sets mode: +v Geth

[23:09] *** p6lert joined
[23:11] *** colomon left
[23:11] *** Ven`` joined
[23:17] *** cdg left
[23:24] *** shinobi-cl joined
[23:25] *** shinobicl left
[23:25] <buggable> New CPAN upload: P5-X-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5-X-0.0.1.tar.gz

[23:25] *** shinobicl joined
[23:28] *** shinobi-cl left
[23:30] *** Util joined
[23:30] <lizmat> ^^ supporting -r -w -x -e -f -d -s -z -l

[23:31] <lizmat> still a WIP, but usable so far

[23:31] *** Eddward joined
[23:32] *** Ven`` left
[23:34] *** wamba left
[23:35] <buggable> New CPAN upload: P5built-ins-0.0.3.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5built-ins-0.0.3.tar.gz

[23:50] *** comborico1611 joined
[23:54] *** colomon joined
[23:59] *** trnh left
