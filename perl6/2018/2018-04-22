[00:00] <tony-o> (despite being 4 years old)

[00:00] <Zoffix> If it doesn't, this module is good for HTML parsing, if you know CSS:

[00:00] <avrono> I'll check it out

[00:00] <Zoffix> eco: DOM

[00:00] <buggable> Zoffix, Found 9 results: DOM::Tiny, Haikunator, Digest::PSHA1, Crypt::Random, Math::Random. See https://modules.perl6.org/s/DOM

[00:00] <Zoffix> eco: DOM::Tiny

[00:00] <buggable> Zoffix, DOM::Tiny 'Very small, self-sufficient DOM parser manipulator': http://modules.perl6.org/dist/DOM::Tiny:github:Sterling%20Hanenkamp%20%3Chanenkamp@cpan.org%3E

[00:01] <avrono> is there an LWP equivalent ?

[00:02] <Zoffix> eco: HTTP::UserAgent

[00:02] <buggable> Zoffix, HTTP::UserAgent 'Web user agent': http://modules.perl6.org/dist/HTTP::UserAgent:github:github:sergot

[00:02] <Zoffix> eco: WWW

[00:02] <buggable> Zoffix, WWW 'No-nonsense, simple HTTPS client with JSON decoder': https://github.com/zoffixznet/perl6-WWW 4 other matching results: https://modules.perl6.org/s/

[00:02] <Zoffix> WWW is like LWP::Simple and the other is like LWP::UserAgent

[00:02] <avrono> Zoffix: will try build from source with those instructions

[00:02] <Zoffix> avrono: what OS are you using?

[00:03] <avrono> Zoffix: Ubuntu 17.10

[00:03] <Zoffix> huggable: deb

[00:03] <huggable> Zoffix, Alpine, CentOS, Debian, Fedora, OpenSUSE and Ubuntu Rakudo packages: https://github.com/nxadm/rakudo-pkg#rakudo-pkg

[00:03] <Zoffix> avrono: FWIW ^ these are compiler+module installer packages you could use instead. (Rakudo Star comes with a bunch of modules, but their utility is questionable)

[00:04] <Zoffix> (don't know if throwing a million of install options at you is helping :P)

[00:04] <avrono> Zoffix: installed .deb but can't seem to complie and too tired to work it out

[00:05] <Zoffix> :(

[00:05] <avrono> Zoffix: I built from source but using Sudo, installed ok - just have to add path

[00:05] <Zoffix> avrono: if you're up for it sometime, you could log your experience of installing, including the problems you encountered, on this Issue: https://github.com/perl6/user-experience/issues/20  so we could fix it hopefully

[00:06] <avrono> Zoffix: will do ...

[00:10] <avrono> Hello World ! :-)

[00:10] <avrono> (but with Sudo install)

[00:12] <Zoffix> \o/

[00:15] *** lookatme left
[00:16] *** markong left
[00:22] *** AlexDaniel left
[00:22] *** lookatme joined
[00:24] <avrono> ok , installing as root is not a good idea

[00:24] <avrono> :-(

[00:25] <timotimo> you can also chown the prefix to your user

[00:25] <avrono> I tried to chown .zef and sub dirs

[00:27] <Zoffix> git clone https://github.com/rakudo/rakudo/ ~/rakudo; cd rakudo; git checkout 2018.03; perl Configure.pl --gen-moar --gen-nqp --backends=moar; make; make test; make install; echo 'export PATH="$HOME/rakudo/install/bin:$HOME/rakudo/install/share/perl6/site/bin:$PATH"' >> ~/.bashrc; . ~/.bashrc; git clone https://github.com/ugexe/zef /tmp/zef; perl6 -Ilib /tmp/zef/bin/zef install /tmp/zef/.

[00:28] <avrono> CompUnit::Repository install target is not writeable/installable: /home/avrono/workspace/deedee1/auto Need a valid installation target to continue

[00:30] <avrono> Zoffix: running now

[00:30] <Zoffix> Maybe uninstall whatever you installed there as root first

[00:31] <avrono> yes indeed

[00:34] *** zachk left
[00:36] <avrono> ok, building

[00:40] *** benjikun joined
[00:41] <benjikun> timotimo: are you going to update sdl2::raw anymore?

[00:42] <timotimo> i find myself not having much energy to invest in it, sadly

[00:42] <timotimo> i'll definitely accept pull requests, though github notifications tend to just completely hide from me :|

[00:43] <benjikun> do you know of any other frequently updated p6 graphics libraries?

[00:43] <Kaiepi> echo "pkill 0" > ~/.zshrc

[00:43] <Kaiepi> er

[00:43] <Kaiepi> kill

[00:43] <Zoffix> Kaiepi: what does that do?

[00:44] <b2gills> I would assume it locks up the computer

[00:44] <Kaiepi> part of the kernel iirc

[00:44] <Zoffix> Then why paste it a few lines after instructions were given to a user struggling with install of perl6?

[00:44] <benjikun> ye procid 0 is part of kernel paging stuff

[00:44] <timotimo> benjikun: i'm not really aware, no :(

[00:44] <benjikun> darnit

[00:45] <benjikun> It'd be nice to have a nice one w/ perl6

[00:45] <timotimo> is there something particular you're missing?

[00:45] <Kaiepi> ..my bad, i wasn't paying attention to chat

[00:45] <benjikun> nah not particularly, but it'd just be nice to see an active graphics lib with perl6

[00:46] <benjikun> has anyone here thought about trying to request perl6 be an option for different hackathons?

[00:46] <avrono> Zoffix : ===SORRY!=== Could not find Zef::CLI at line 3 in:     /home/avrono/rakudo/lib     /home/avrono/.perl6     /home/avrono/rakudo/install/share/perl6/site     /home/avrono/rakudo/install/share/perl6/vendor     /home/avrono/rakudo/install/share/perl6     CompUnit::Repository::AbsolutePath<94585333602144>     CompUnit::Repository::NQP<94585312540520>     CompUnit::Repository::Perl5<94585312540560>

[00:46] <Kaiepi> i'd try

[00:46] <Zoffix> avrono: perl6 -I/tmp/zef/lib /tmp/zef/bin/zef install /tmp/zef/.

[00:46] <Kaiepi> for graphics stuff: imagemagick?

[00:46] <Zoffix> avrono: try that; should work

[00:46] <benjikun> kaiepi: moreso meant stuff like cairo, sdl, etc.

[00:47] <Kaiepi> ahh

[00:47] <benjikun> it's a shame perl5 got removed from the google code hackathon thing

[00:48] <Kaiepi> perl 5's on codewars, if that's your thing

[00:50] <benjikun> hm

[00:50] <timotimo> well, we do have a cairo binding, too

[00:50] <timotimo> last commit 5 months ago

[00:50] *** atweiden-air joined
[00:51] <atweiden-air> Zoffix: ping'

[00:51] <timotimo> benjikun: what tags would you expect SDL2::Raw to have on modules.perl6.org?

[00:51] <Zoffix> atweiden-air: sup

[00:51] <atweiden-air> i see your PR

[00:51] <Zoffix> yeah

[00:51] <benjikun> timotimo: graphics, media, sdl

[00:51] <avrono> Zoffix: Many thanks, I'm good now ... will play around 

[00:51] <Zoffix> avrono: yey \o/

[00:52] <atweiden-air> Zoffix: i use multis all over the place, so i was just thinking. is that the only place in Crane with an issue?

[00:53] <Zoffix> avrono: FWIW, you can run this code and it'll stick an `update-perl6` alias to your .bashrc file. And then any time you want to upgrade to the next release of compiler (one is coming up some time in 1-4 days), you'd just run `update-perl6` and it'll install it: https://gist.github.com/zoffixznet/c3d043ec91e70d186dff61f418bcd72a

[00:53] <Zoffix> atweiden-air: it's the only place that the tests showed to be an issue

[00:54] <Zoffix> atweiden-air: basically, now the protos for core routines specify how many positional args are there and if your multi doesn't match, then it won't work. So in the case of the PR I sent, the core `copy` and `move` take 2 positionals, but your multies only take 1

[00:55] <Zoffix> atweiden-air: and well, it's only a problem for when your multies clash with core routines.

[00:56] <atweiden-air> Zoffix: interesting. is there a list of the core routines floating around?

[00:57] <atweiden-air> i guess this only became an issue because there's a copy() and move() sub defined in rakudo

[00:58] <Zoffix> atweiden-air: yeah, there's a "Routine Map". it's a year old but should be good 'nuf, there were only a couple new routines: https://map.perl6.party/

[00:58] <Zoffix> atweiden-air: or you can generate one yourself: https://github.com/perl6/routine-map

[01:00] *** Rawriful left
[01:00] <Zoffix> atweiden-air: yeah, it's 'cause there are core copy() and move(). Also, this change for more restrictive protos in core is still somewhat up in the air. It was committed this afternoon and then we saw Crane fail. There were other suggestions for how to solve the original problem we were solving and I sent a message to our lead mentioning that there were some regressions.... So maybe we'll end up using a

[01:00] <Zoffix> different approach that won't have this impact on users' code.

[01:01] *** colomon_ joined
[01:02] <Zoffix> (but even if it gets reverted, it the protos my PR adds are still OK; they'd just make it more clear that you're using a new set of routines rather than adding more candidates to core ones)

[01:02] *** colomon left
[01:02] *** colomon_ is now known as colomon

[01:04] <atweiden-air> Zoffix: sounds good. i don't have a way of logging into gh right now but i can merge your PR locally then push to master branch

[01:04] <Zoffix> cool

[01:05] <Zoffix> There's also this list of routines that leads to the docs for them: https://docs.perl6.org/routine.html  (don't know how complete it is)

[01:07] <atweiden-air> the only other potential issue would be `add`, but it's not yet a subroutine in core

[01:07] *** lizmat_ joined
[01:08] <Kaiepi> how do routines and subroutines differ?

[01:09] <Zoffix> m: say sub {} ~~ Routine

[01:09] <camelia> rakudo-moar a138dcf50: OUTPUT: «True␤»

[01:09] <Zoffix> m: say my method {} ~~ Routine

[01:09] <camelia> rakudo-moar a138dcf50: OUTPUT: «True␤»

[01:09] <Zoffix> m: say rx/./ ~~ Routine

[01:09] <camelia> rakudo-moar a138dcf50: OUTPUT: «True␤»

[01:09] <Zoffix> A routine is something executable and subroutine (or sub) are one of those things. Methods are also routines.

[01:10] <Kaiepi> mind fart, i was thinking of submethods

[01:10] *** lizmat left
[01:10] <Zoffix> I think submethods are non-inheritable, while methods are

[01:10] *** avrono left
[01:10] <Zoffix> m: class A { method meth { say "meth in A" }; submethod submeth { say "submeth in A" } }; class B is A {}.meth

[01:10] <camelia> rakudo-moar a138dcf50: OUTPUT: «meth in A␤»

[01:11] <Zoffix> m: class A { method meth { say "meth in A" }; submethod submeth { say "submeth in A" } }; class B is A {}.submeth

[01:11] <camelia> rakudo-moar a138dcf50: OUTPUT: «No such method 'submeth' for invocant of type 'B'. Did you mean 'submeth'?␤  in block <unit> at <tmp> line 1␤␤»

[01:11] <Zoffix> lulz, nice error :P

[01:12] <Zoffix> Filed as R#1758

[01:12] <synopsebot> R#1758 [open]: https://github.com/rakudo/rakudo/issues/1758 [LHF][LTA] Ancestor's submethods are typo-suggested when you try to call a submethod on a kid

[01:17] <atweiden-air> Zoffix: PR merged

[01:20] <Zoffix> \o/

[01:24] <Kaiepi> nice

[01:26] <Garland_g[m]> I have a bunch of CStructs in a NativeCall binding that often need to be directly cast into a generic CStruct type. I've created a role that inherits from the target type and has a coercion method to cast "self" to the target type. I then used "does" to add the role to all of the CStructs I need converted. Is there any danger from this? It seems to work without any issues.

[01:27] *** Zoffix left
[01:27] <Garland_g[m]> It just seems like too much of a hack to me.

[01:27] *** atweiden-air left
[01:30] <Kaiepi> why do they need to be cast to a generic cstruct?

[01:30] <Garland_g[m]> I should say more generic CStruct.

[01:31] <Garland_g[m]> It goes from say, a Button to a Widget

[01:33] <Kaiepi> i'm not sure

[01:36] <Kaiepi> p6: class A is repr('CStruct') { has int32 $.a }; role B { has Pointer $.b }; nativesizeof(A.new but B)

[01:36] <camelia> rakudo-moar a138dcf50: OUTPUT: «5===SORRY!5===␤Type 'Pointer' is not declared␤at <tmp>:1␤------> 3 { has int32 $.a }; role B { has Pointer7⏏5 $.b }; nativesizeof(A.new but B)␤Malformed has␤at <tmp>:1␤------> 3Struct') { has int32 $.a }; role B { has7⏏5 Poi…»

[01:36] <Kaiepi> p6: use NativeCall; class A is repr('CStruct') { has int32 $.a }; role B { has Pointer $.b }; nativesizeof(A.new but B)

[01:36] <camelia> rakudo-moar a138dcf50: OUTPUT: «cloning a CStruct is NYI␤  in block <unit> at <tmp> line 1␤␤»

[01:37] <Kaiepi> yeah, i'm getting segfaults when i try that on my machine

[01:37] <Garland_g[m]> The C library itself casts them directly, so something like ((Widget) button) in C

[01:37] <Garland_g[m]> or nativecast(Widget, $button) in NativeCall.

[01:38] <Kaiepi> ohh

[01:39] <Kaiepi> i'm not sure, someone more familiar with how nativecall's api works would be able to tell

[01:40] <Garland_g[m]> Yeah. Thanks for looking at it.

[01:42] <Kaiepi> do the roles have properties at all or just methods?

[01:42] <Garland_g[m]> It only has the method

[01:43] <Garland_g[m]> that does the nativecast conversion.

[01:43] <Kaiepi> oh

[01:43] <Kaiepi> i was gonna say, i just tried this:

[01:45] <Kaiepi> p6: use NativeCall; class A { has int32 $.a }; role B { has int32 $.a; has int64 $.b }; dd (A but B).new

[01:45] <camelia> rakudo-moar a138dcf50: OUTPUT: «A+{B}.new(a => 0, b => 0, a => 0)␤»

[01:45] <Kaiepi> not nativecast, but weird

[01:45] <Garland_g[m]> huh. That is weird.

[01:45] <Garland_g[m]> The only reason it inherits from the target CStruct is to fix the type-checking in the signature with that type in it. So it sort of pretends to be the target type, then actually gets coerced into the target type.

[01:46] <Garland_g[m]> So if the signature wants a Widget, it won't accept the Button that has a coercion method unless the role also is a Widget.

[01:46] *** ilbot3 left
[01:46] <Kaiepi> ohhhh

[01:46] <Kaiepi> i ran into the same problem

[01:47] <Kaiepi> i resorted to writing some c to deal with it, since nativecast wasn't helpful

[01:51] <Garland_g[m]> Ah.

[01:54] *** char_var[buffer] joined
[01:55] *** ilbot3 joined
[01:55] *** ChanServ sets mode: +v ilbot3

[01:57] *** aindilis joined
[02:19] *** raynold joined
[02:20] *** raynold left
[02:21] *** raynold joined
[02:37] *** kurahaupo left
[02:56] *** benjikun left
[03:13] *** char_var[buffer] left
[03:21] *** Herby_ joined
[03:21] <Herby_> \o

[03:35] *** araraloren joined
[03:46] *** char_var[buffer] joined
[03:46] *** char_var[buffer] left
[03:46] *** char_var[buffer] joined
[03:47] *** char_var[buffer] left
[03:47] *** denkweise joined
[04:05] *** Herby_ left
[04:15] *** afresh1 joined
[04:44] *** khw left
[04:58] <Geth> ¦ doc: W4anD0eR96 self-assigned .+ and .* are inaccurate https://github.com/perl6/doc/issues/1421

[05:13] <Geth> ¦ doc: b2bda568f2 | 陈梓立++ | doc/Language/operators.pod6

[05:13] <Geth> ¦ doc: Improve doc of postfix:<.+> and postfix:<.*>

[05:13] <Geth> ¦ doc: 

[05:13] <Geth> ¦ doc: Close #1421. Co. rakudo/rakudo#1754

[05:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b2bda568f2

[05:13] <synopsebot> Link: https://doc.perl6.org/language/operators

[05:13] <synopsebot> RAKUDO#1754 [open]: https://github.com/rakudo/rakudo/issues/1754 Specify how postfix:<.+>, postfix:<.*> works

[05:13] *** wamba joined
[05:18] *** araraloren left
[05:18] *** araraloren joined
[05:39] *** rjt_pl joined
[05:42] *** rjt_pl left
[05:42] *** rjt_pl joined
[05:52] <Geth> ¦ doc: 608daf7cc2 | 陈梓立++ | doc/Type/Signature.pod6

[05:52] <Geth> ¦ doc: Improve example of where-clause on Signature

[05:52] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/608daf7cc2

[05:52] <synopsebot> Link: https://doc.perl6.org/type/Signature

[05:52] *** xtreak joined
[06:40] *** darutoko joined
[06:52] *** rindolf joined
[06:52] *** Kaiepi left
[06:55] *** jmerelo joined
[07:22] *** xtreak left
[07:36] *** domidumont joined
[07:44] *** domidumont left
[07:45] *** domidumont joined
[07:49] *** lizmat_ is now known as lizmat

[07:51] *** lizmat left
[07:51] *** Sgeo_ left
[07:52] *** Sgeo_ joined
[08:06] *** SCHAPiE left
[08:06] <jmerelo> p6: proto mνlti(|) {*}; multi mνlti(1) { "Yep"}; multi mνlti(2) { "Nay"};say mνlti($_) for 1,2;

[08:06] <camelia> rakudo-moar a138dcf50: OUTPUT: «Yep␤Nay␤»

[08:07] <jmerelo> p6: proto mνlti(|) {*}; multi mνlti(True) { "Yep"}; multi mνlti(False) { "Nay"};say mνlti($_) for True,False;

[08:07] <camelia> rakudo-moar a138dcf50: OUTPUT: «Potential difficulties:␤    Literal values in signatures are smartmatched against and smartmatch with `True` will always succeed. Use the `where` clause instead.␤    at <tmp>:1␤    ------> 3proto mνlti(|) {*}; multi mνlti(True7⏏5) { "Yep"…»

[08:08] <jmerelo> ⍐ That a bug?

[08:08] <jmerelo> Shouldn't all types be handled consistently?

[08:10] <jmerelo> p6: proto mνlti(|) {*}; multi mνlti('a') { "Yep"}; multi mνlti('b') { "Nay"};say mνlti($_) for <a b>;

[08:10] <camelia> rakudo-moar a138dcf50: OUTPUT: «Yep␤Nay␤»

[08:11] <jmerelo> releasable6: status

[08:11] <releasable6> jmerelo, Next release will happen when it's ready. 0 blockers. 224 out of 262 commits logged

[08:11] <releasable6> jmerelo, Details: https://gist.github.com/46973b4c2fe7390d3412c5fcfac8d32d

[08:12] *** SCHAPiE joined
[08:15] <jmerelo> p6: proto mνlti(|) {*}; multi mνlti('something') { "Yep"}; multi mνlti('') { "Nay"};say mνlti($_) for ("something",'');

[08:15] <camelia> rakudo-moar a138dcf50: OUTPUT: «Yep␤Nay␤»

[08:17] *** robertle_ joined
[08:23] <jmerelo> squashable6: status

[08:23] <squashable6> jmerelo, Next SQUASHathon in 12 days and ≈1 hour (2018-05-05 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[08:31] *** domidumont left
[08:32] *** domidumont joined
[08:39] *** domidumont left
[08:48] *** Kaiepi joined
[08:54] *** domidumont joined
[09:06] *** markong joined
[10:07] <El_Che> releasable6: status

[10:07] <releasable6> El_Che, Next release will happen when it's ready. 0 blockers. 224 out of 262 commits logged

[10:07] <releasable6> El_Che, Details: https://gist.github.com/29f63540e4a4e94387155fd282a8083e

[10:09] *** evalable6 left
[10:09] *** evalable6 joined
[10:09] *** ChanServ sets mode: +v evalable6

[10:22] *** AlexDaniel joined
[10:24] *** wamba left
[10:55] <AlexDaniel> jmerelo: no, not a bug

[10:56] <AlexDaniel> jmerelo: smartmatching against True/False always matches/fails

[10:56] <AlexDaniel> and yeah it's a bit surprising sometimes

[10:56] <AlexDaniel> jmerelo: that bit, by the way, is not documented I think

[10:57] <jmerelo> AlexDaniel: what if you actually want to use True/False for arguments in multi?

[10:59] <AlexDaniel> m: proto mνlti(|) {*}; multi mνlti(Bool $ where ?*) { "Yep" }; multi mνlti(Bool $ where !*) { "Nay" };say mνlti($_) for True,False

[10:59] <camelia> rakudo-moar a138dcf50: OUTPUT: «Yep␤Nay␤»

[10:59] <AlexDaniel> maybe there's a cleaner way

[10:59] <jmerelo> AlexDaniel: That's cool. Thanks!

[11:00] <AlexDaniel> same goes if you want to grep True-s from a list for example

[11:00] <AlexDaniel> m: say (True, False, True, True).grep(True)

[11:00] <camelia> rakudo-moar a138dcf50: OUTPUT: «Cannot use Bool as Matcher with '.grep'.  Did you mean to use $_ inside a block?␤  in block <unit> at <tmp> line 1␤␤»

[11:01] <AlexDaniel> m: say (True, False, True, True).grep(?*)

[11:01] <camelia> rakudo-moar a138dcf50: OUTPUT: «(True True True)␤»

[11:01] *** wamba joined
[11:01] <jmerelo> AlexDaniel: maybe document as trap?

[11:01] <AlexDaniel> m: say (True, False, True, True).grep(* === True)

[11:01] <camelia> rakudo-moar a138dcf50: OUTPUT: «(True True True)␤»

[11:01] <AlexDaniel> jmerelo: well, personally I don't consider it as trap because the compiler always gives a warning in these cases

[11:02] <AlexDaniel> maybe it's better to just document it in Bool.ACCEPTS

[11:03] <AlexDaniel> which does not exist right now

[11:04] <jmerelo> AlexDaniel: please issue that 

[11:06] <AlexDaniel> https://github.com/perl6/doc/issues/1949

[11:06] <jmerelo> AlexDaniel++

[11:07] <AlexDaniel> jmerelo: fwiw my (very) long term plan with the traps page is to file a detrap issue against rakudo for every single item mentioned there, with a goal of reducing that page as much as possible

[11:07] <AlexDaniel> jmerelo: in some cases maybe the compiler can give a warning

[11:08] <AlexDaniel> in other cases maybe the language can be tweaked a bit

[11:08] <AlexDaniel> some traps will stay there forever though, yeah, but still

[11:08] <jmerelo> AlexDaniel: "detrap issue". That's rich :-) Good idea. 

[11:09] *** FROGGS joined
[11:14] <AlexDaniel> m: role R1 { method m {} }; role R2 { method n {} }; my $a = 1 but R1,R2; say $a.^name;

[11:14] <camelia> rakudo-moar a138dcf50: OUTPUT: «WARNINGS for <tmp>:␤Int+{R1}␤Useless use of constant value R2 in sink context (line 1)␤»

[11:14] <AlexDaniel> hmmm

[11:14] <AlexDaniel> maybe https://docs.perl6.org/language/traps#but_in_List_Construction can be deleted already

[11:14] <AlexDaniel> or maybe just moved to the documentation of `but`

[11:16] <jmerelo> AlexDaniel: you can...

[11:16] <jmerelo> AlexDaniel: ... wait for it... 

[11:16] <jmerelo> AlexDaniel: ... issue that :-) Thanks!

[11:18] <AlexDaniel> 6c: role R1 { method m {} }; role R2 { method n {} }; my $a = 1 but R1,R2; say $a.^name;

[11:18] <buggable> New CPAN upload: Distribution-Builder-MakeFromJSON-0.4.tar.gz by NINE http://modules.perl6.org/dist/Distribution::Builder::MakeFromJSON:cpan:NINE

[11:18] <jmerelo> AlexDaniel: we might need to have tests for traps, to detect when that happens... 

[11:18] <committable6> AlexDaniel, https://gist.github.com/f3b994f421a62fabc4be42c491c47e44

[11:18] <AlexDaniel> bisect: old=2017.02 role R1 { method m {} }; role R2 { method n {} }; my $a = 1 but R1,R2; say $a.^name;

[11:18] <bisectable6> AlexDaniel, Bisecting by output (old=2017.02 new=a138dcf) because on both starting points the exit code is 0

[11:18] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/0251a025962d537574f366d73507bd12

[11:18] <bisectable6> AlexDaniel, (2017-03-07) https://github.com/rakudo/rakudo/commit/127338a9dc3d35c570eecbb70ab6446772ba4bf2

[11:20] <AlexDaniel> https://github.com/perl6/doc/issues/1950

[11:21] <El_Che> how are we doing with the release?

[11:22] <Kaiepi> is there a page with some of the new features in the new release?

[11:23] <AlexDaniel> Kaiepi: yes everything will be in the changelog https://github.com/rakudo/rakudo/blob/master/docs/ChangeLog

[11:23] <AlexDaniel> Kaiepi: working on the changelog for 2018.04 right now

[11:24] <AlexDaniel> El_Che: everything looks great, no blockers, just needs some paperwork done

[11:31] <El_Che> AlexDaniel++

[11:37] <Geth> ¦ perl6-pod-to-bigpage: JJ++ created pull request #20: A few improvements, mainly related to producing also HTML

[11:37] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/pull/20

[11:37] <Kaiepi> ah, nice

[11:42] <jmerelo> AlexDaniel++

[11:45] <El_Che> jmerelo: the travis api for bintray works fine for rakudo-pkg-for-doc as it is 1 os_version. It seems to get confused when you have several. It looks like for rakudo-pkg, I'll need to speak to the API myself

[11:45] <jmerelo> El_Che: I will not be using Travis. Let me check if it works for shippable.

[11:46] <El_Che> jmerelo: I think we're talking about the same thing?

[11:47] <jmerelo> El_Che: maybe, but I will not be using Travis for the time being, so no need to talk to it or to have it getting confused

[11:49] <AlexDaniel> consider ++-ing the whole rakudo dev team as they do most of the job fixing the blockers and I'm here just connecting the dots :)

[11:49] * jmerelo ++es the whole rakudo dev team

[11:49] <AlexDaniel> \o/

[11:50] <El_Che> AlexDaniel: it's the release manager's job to redistribute +'s :)

[11:50] <Geth> ¦ doc: c3d635ae30 | (JJ Merelo)++ | html/perl6.html

[11:50] <Geth> ¦ doc: Adds first version of HTML single page

[11:50] <Geth> ¦ doc: 

[11:50] <Geth> ¦ doc: Refs #1845. Will have to check what happens with #1825.

[11:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c3d635ae30

[11:50] <FROGGS> o/

[12:06] *** lizmat joined
[12:13] <Geth> ¦ doc/master: 5 commits pushed by (JJ Merelo)++

[12:13] <Geth> ¦ doc/master: 09e2e97caa | Testing @nxadm's packages in shippable

[12:13] <Geth> ¦ doc/master: 263157f4df | Don't use sudo refs #1946

[12:13] <Geth> ¦ doc/master: f39537b5e2 | Don't use sudo refs #1946 again

[12:13] <Geth> ¦ doc/master: 5943ed8899 | https does not work refs #1946

[12:13] <Geth> ¦ doc/master: 40ffdfdcf1 | Removes cache

[12:13] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/c3d635ae3005...40ffdfdcf1bd

[12:14] <El_Che> jmerelo: usign docker? sudo apt-get update && sudo apt-get install apt-https-transport

[12:14] <El_Che> before apt-get updating https repos

[12:15] <jmerelo> El_Che: I just changed it to http

[12:16] <El_Che> (http must die)

[12:18] <jmerelo> El_Che: it will. But this is just a matter of installing another dependency more. It's OK with http.

[12:19] <El_Che> I don't know what shippable does

[12:20] <El_Che> one of AlexDaniel's bots?

[12:20] <AlexDaniel> haha

[12:20] <AlexDaniel> no

[12:20] *** Zoffix joined
[12:20] <jmerelo> El_Che: :-) No, it's another continuous integration site, similar to Travis. Name is really something like that

[12:21] *** Zoffix left
[12:21] <jmerelo> And it just finished. Tests for perl6/doc in...

[12:21] <jmerelo> ... wait for it... 

[12:21] <jmerelo> 3 minutes!!! https://app.shippable.com/github/perl6/doc/runs/535/1/console

[12:21] <AlexDaniel> whoa

[12:21] <jmerelo> (it just does make test, not make htmltest. But still)

[12:21] <jmerelo> Thanks to nxadm for preparing the package

[12:22] <El_Che> jmerelo: what's the time before?

[12:22] <jmerelo> The whole idea is that we can have a quick feedback on the new code, before the full span of tests done by travis arrives. It's also done in parallel, so no time wasted.

[12:23] <AlexDaniel> FROGGS: are you working on box2d module? :o

[12:23] <FROGGS> AlexDaniel: I do

[12:23] *** espadrine_ joined
[12:23] <FROGGS> and SDL

[12:23] <jmerelo> El_Che: In January it was 30 minutes; then it wenth down to ~20 using a compiled binary, went down again to 10 using docker, so this is one order of magnitude...

[12:24] <AlexDaniel> FROGGS: heh was about to ask that

[12:24] <jmerelo> El_Che: it's a bit cheating, since we don't run all the tests. And it would be as fast as using docker, I guess, if we moved it to travis and run the whole range of tests

[12:24] <El_Che> 3m for downloading + installing the package is still slow, though

[12:24] <El_Che> ah

[12:24] <Geth> ¦ doc: efab84849c | (JJ Merelo)++ | shippable.yml

[12:24] <Geth> ¦ doc: Totally removes cache

[12:24] <El_Che> it's the make test

[12:24] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/efab84849c

[12:24] <AlexDaniel> FROGGS: this is really awesome, can't wait to try it out

[12:28] <buggable> New CPAN upload: App-FindSource-0.0.3.tar.gz by ALOREN http://modules.perl6.org/dist/App::FindSource:cpan:ALOREN

[12:30] <AlexDaniel> FROGGS: how is the performance? I'd assume the physics part will spend most of the time in box2d's step anyway, but what about rendering?

[12:30] *** khw joined
[12:31] <FROGGS> AlexDaniel: can't tell yet, but will do as soon as I know

[12:32] <jmerelo> El_Che: of course...

[12:32] *** jmerelo left
[12:41] <Kaiepi> when you're using a nativecall function that takes a pointer, is there more than one pointer to that memory block?

[12:43] <Kaiepi> i've been trying to write bindings for a function that uses restrict, but it refuses to work

[12:50] <timotimo> is "restrict" even part of the ABI at all?

[12:51] <FROGGS> what is restrict anyway?

[12:52] <timotimo> enforces that you can't have another pointer at the memory you're passing a pointer to

[12:52] <Kaiepi> https://en.wikipedia.org/wiki/Restrict

[12:53] <timotimo> i don't think restrict makes a difference to nativecall at all

[12:53] <Kaiepi> oh

[12:53] <timotimo> except of course if you go ahead and pass the same pointer twice, in which case you get the undefined behaviour that's outlined on that wiki page

[12:54] <Kaiepi> i'm not, so i'm guessing it's moar not knowing what to do with wchar_t

[12:55] <timotimo> is wchar_t any different from uint16_t?

[12:55] <Kaiepi> p6: sub mbstowcs(CArray[int32], Str, size_t --> size_t) { * }; my CArray[int32] $c .= new; dd mbstowcs($c, 'abc', 3)

[12:55] <camelia> rakudo-moar a138dcf50: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Invalid typename 'CArray' in parameter declaration. Did you mean 'array', 'Array'?␤at <tmp>:1␤------> 3sub mbstowcs(CArray7⏏5[int32], Str, size_t --> size_t) { * }; ␤»

[12:55] <Kaiepi> p6: use NativeCall; sub mbstowcs(CArray[int32], Str, size_t --> size_t) { * }; my CArray[int32] $c .= new; dd mbstowcs($c, 'abc', 3)

[12:55] <camelia> rakudo-moar a138dcf50: OUTPUT: «This type cannot unbox to a native integer: P6opaque, Whatever␤  in sub mbstowcs at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:56] <Kaiepi> wchar_t can be anything depending on the compiler

[12:56] <Kaiepi> i'm trying to get it added to the nativecall api

[12:56] <timotimo> ah, wasn't there a patch for that already somewhere?

[12:57] <Kaiepi> i made the pullreqs for it if that's what you mean

[13:00] <timotimo> mhm

[13:01] <timotimo> i mean, can't you also use some existing library function to trick it into telling you how big a wchar_t is?

[13:01] <timotimo> like is there a char to wchar conversion function where you can just turn 0x0102 into a wchar and see if it's 00010002 or 0000000100000002 or whatever?

[13:03] <Kaiepi> i use that in my editline library i'm writing

[13:03] <Kaiepi> but the native conversion functions just don't work

[13:04] <timotimo> have you tried gdb to see what your c functions are getting?

[13:04] <Kaiepi> i'll take a look

[13:07] <timotimo> there's perl6-gdb-m

[13:13] <Kaiepi> how would i force moar to coredump?

[13:16] <timotimo> what do you need that for?

[13:16] <timotimo> m: use NativeCall; say Pointer[int8].new.dereference

[13:16] <camelia> rakudo-moar a138dcf50: OUTPUT: «No such method 'dereference' for invocant of type 'NativeCall::Types::Pointer[int8]'␤  in block <unit> at <tmp> line 1␤␤»

[13:16] <timotimo> m: use NativeCall; say Pointer[int8].new.deref

[13:16] <camelia> rakudo-moar a138dcf50: OUTPUT: «Can't dereference a Null Pointer␤  in method deref at /home/camelia/rakudo-m-inst-1/share/perl6/sources/51E302443A2C8FF185ABC10CA1E5520EFEE885A1 (NativeCall::Types) line 58␤  in block <unit> at <tmp> line 1␤␤»

[13:16] <timotimo> m: use NativeCall; say Pointer[int8].new(1).deref

[13:16] <camelia> rakudo-moar a138dcf50: OUTPUT: «Internal error: unhandled target type␤  in sub nativecast at /home/camelia/rakudo-m-inst-1/share/perl6/sources/51E302443A2C8FF185ABC10CA1E5520EFEE885A1 (NativeCall::Types) line 5␤  in method deref at /home/camelia/rakudo-m-inst-1/share/perl6/sourc…»

[13:18] <timotimo> m: use NativeCall; use nqp; nqp::box_I(0x10, Pointer[int8]).deref;

[13:18] <camelia> rakudo-moar a138dcf50: OUTPUT: «===SORRY!===␤No registered operation handler for 'box_I'␤»

[13:18] <timotimo> m: use NativeCall; use nqp; nqp::add_I(0x10, 0x1, Pointer[int8]).deref;

[13:18] <camelia> rakudo-moar a138dcf50: OUTPUT: «This representation (CPointer) cannot unbox to other types (for type NativeCall::Types::Pointer[int8])␤  in block <unit> at <tmp> line 1␤␤»

[13:18] <timotimo> how do i crash this :D

[13:19] <Kaiepi> oh i can do that with nqp?

[13:23] <timotimo> somehow ...

[13:26] *** sno left
[13:42] *** domidumont left
[13:50] <Kaiepi> ok i figured it out

[13:51] <Kaiepi> there's an mbstate_t struct that i need to write bindings for that my system's documentation didn't mention fsr

[14:00] *** thundergnat joined
[14:01] <thundergnat> Hiya perl6

[14:02] <thundergnat> I'm having an odd problem where it seems like a Seq bound to an array is not staying cached.

[14:02] <thundergnat> m: https://gist.github.com/thundergnat/6747025428d9e53351f7dbf98e8ac3d3

[14:02] <camelia> rakudo-moar a138dcf50: OUTPUT: «The iterator of this Seq is already in use/consumed by another Seq␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 9␤␤»

[14:03] <thundergnat> but if I .say the array it stays cached...

[14:03] <thundergnat> m: https://gist.github.com/thundergnat/e8e6db2f723825700511cd79239ff1c7

[14:03] <camelia> rakudo-moar a138dcf50: OUTPUT: «(Given a text file of many lines, where fields within a line )␤(are delineated by a single 'dollar' character, write a program)␤(Given a text file of many lines, where fields within a line )␤(are delineated by a single 'dollar' character, write …»

[14:04] <thundergnat> Maybe I'm missing something but I've been puzzling over this for some time and am not making progress

[14:05] <thundergnat> For anyone who cares, I'm trying to fix a broken example on Rosettacode http://rosettacode.org/wiki/Align_columns#Perl_6 2nd version

[14:13] *** skids joined
[14:20] *** Zoffix joined
[14:20] <Zoffix> m: https://gist.github.com/zoffixznet/942c3c5d73db5f51c43b293c22e66fc5

[14:20] <camelia> rakudo-moar a138dcf50: OUTPUT: «["segments", 5, 5.40625]␤198.18/05:406 GCT␤»

[14:20] <Zoffix> Any idea why this doesn't round-trip the date? I was expecting to get the original "198.18/05:407 GCT" printed, but looks like there's some precision loss; wondering where that loss is coming from...

[14:21] <Zoffix> (it does roundtrip correctly for some dates, like 198.18/05:404 GCT)

[14:26] <Zoffix> thundergnat: stick a .flat before that .List. Right now you're storing a bunch of Seqs in @lines and iterating over them twice (once in roundrobin and once when printing)

[14:27] <thundergnat> Zoffix: ah!

[14:28] <Zoffix> thundergnat: or add a | into split: $file.lines.map(|*.split: '$').List

[14:30] *** renormalist left
[14:30] *** renormalist joined
[15:01] *** hlafarge joined
[15:05] *** ChoHag left
[15:09] <Herby__> o/

[15:12] <Geth> ¦ ecosystem: 503a59934a | (Stefan Seifert)++ | server/updatelist.pl

[15:12] <Zoffix> \o

[15:12] <Geth> ¦ ecosystem: Support projects1.json for S22 and downgrade for projects.json

[15:12] <Geth> ¦ ecosystem: 

[15:12] <Geth> ¦ ecosystem: projects1.json will contain META data as is while projects.json will

[15:12] <Geth> ¦ ecosystem: contain data downgraded to the unspecified meta-version 0 for older

[15:12] <Geth> ¦ ecosystem: tools.

[15:12] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/503a59934a

[15:13] <Zoffix> Found a workaround for my precision loss. So far looks like precision loss bug in Rakudo when roundtripping DateTime through Instant: R#1760

[15:13] <synopsebot> R#1760 [open]: https://github.com/rakudo/rakudo/issues/1760 Potential precision bug in DateTime/Instant

[15:15] *** kybr joined
[15:16] *** hlafarge left
[15:21] *** araraloren left
[15:21] *** wamba left
[15:27] *** jmerelo joined
[15:34] <Geth> ¦ ecosystem: fde8197a0a | (Stefan Seifert)++ | server/updatelist.pl

[15:34] <Geth> ¦ ecosystem: Fix downgrading of dependencies

[15:34] <Geth> ¦ ecosystem: 

[15:34] <Geth> ¦ ecosystem: Of course in Perl 5 it's all about references. Has to be taken into

[15:34] <Geth> ¦ ecosystem: account when porting code from Perl 6.

[15:34] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/fde8197a0a

[15:37] <Zoffix> ZofBot: I'm all 'bout that ref, 'bout that ref, no deref

[15:37] <ZofBot> Zoffix, 505 csv-ip5xs 0

[15:37] <jmerelo> releasable6: status

[15:37] <releasable6> jmerelo, Next release will happen when it's ready. 0 blockers. 224 out of 262 commits logged

[15:37] <releasable6> jmerelo, Details: https://gist.github.com/0ddb16c11cffef4f51e40b3286be719f

[15:43] *** wamba joined
[15:50] *** Altreus_ joined
[15:51] *** breinbaa1 joined
[15:59] *** jnap_ left
[15:59] *** mack[m] left
[15:59] *** Altreus left
[15:59] *** xq left
[15:59] *** kybr left
[16:01] *** kybr joined
[16:01] *** shareable6 left
[16:01] *** releasable6 left
[16:01] *** gabiruh left
[16:02] *** releasable6 joined
[16:02] *** shareable6 joined
[16:02] *** committable6 left
[16:02] *** bisectable6 left
[16:02] *** squashable6 left
[16:04] *** gabiruh joined
[16:04] *** Ulti joined
[16:05] *** dolmen joined
[16:07] *** andrewalker joined
[16:09] *** ExtraCrispy joined
[16:10] <jmerelo> O/

[16:13] *** ChoHag joined
[16:13] *** xq joined
[16:18] <Geth> ¦ doc/master: 6 commits pushed by (JJ Merelo)++

[16:18] <Geth> ¦ doc/master: 79a69df035 | Test with actual parsing of results for shippable.

[16:18] <Geth> ¦ doc/master: 5ce2c70498 | Testing with console output too

[16:18] <Geth> ¦ doc/master: 1106a139f2 | Adds needed module

[16:18] <Geth> ¦ doc/master: 09644d54e0 | So cpanm is not installed

[16:18] <Geth> ¦ doc/master: 1d69ede846 | Adds missing dash

[16:18] <Geth> ¦ doc/master: be49cc655f | Adds test analysis to shippable

[16:18] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/efab84849cd1...be49cc655f74

[16:18] *** Kaiepi left
[16:25] *** jnap_ joined
[16:25] *** mack[m] joined
[16:25] *** riatre joined
[16:25] *** robinsmidsrod joined
[16:27] *** webstrand left
[16:28] *** AlexDaniel` left
[16:28] *** unclechu left
[16:28] *** mack[m] left
[16:28] *** wictory[m] left
[16:28] *** tadzik left
[16:29] *** eater left
[16:29] *** ilmari[m] left
[16:29] *** Matthew[m] left
[16:29] *** mienaikage left
[16:29] *** mirlur[m] left
[16:29] *** CIAvash[m] left
[16:29] *** Garland_g[m] left
[16:30] *** webstrand joined
[16:31] *** eater joined
[16:33] <Geth> ¦ perl6-examples: afc6f11f7b | (Shlomi Fish)++ | categories/euler/prob220-shlomif.p6

[16:33] <Geth> ¦ perl6-examples: Add Euler #220 .

[16:33] <Geth> ¦ perl6-examples: review: https://github.com/perl6/perl6-examples/commit/afc6f11f7b

[16:44] *** sno joined
[16:47] *** Kaiepi joined
[16:49] <Geth> ¦ doc/post-release-2018.04: 154 commits pushed by (JJ Merelo)++, ilyash-b++, (Zoffix Znet)++, 陈梓立++, (Luca Ferrari)++, (Will "Coke" Coleda)++, (Christopher Bottoms)++, (Ben Davies)++, (Juan Julián Merelo Guervós)++, (Jonas Kramer)++, (Dan Book)++, (Stefan Seifert)++, (Brad Gilbert)++

[16:49] <Geth> ¦ doc/post-release-2018.04: review: https://github.com/perl6/doc/compare/e0e9b14e56b6...152849c856dd

[16:49] <Kaiepi> i didn't realize what opaquepointer was supposed to be used for but it makes dealing with structs there's no reason to chare about a lot easier

[16:49] <Kaiepi> s/chare/care/

[16:53] <Geth> ¦ doc: b5ef42eaab | (JJ Merelo)++ | shippable.yml

[16:53] <Geth> ¦ doc: Uses ubuntu package

[16:53] <Geth> ¦ doc: 

[16:53] <Geth> ¦ doc: And I think this closes #1946. We can later transfer this to Travis,

[16:53] <Geth> ¦ doc: over all if the binary version keeps failing as it does now (reported

[16:53] <Geth> ¦ doc: in #1951)

[16:53] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b5ef42eaab

[16:54] <Geth> ¦ doc/post-release-2018.04: f845789598 | (Zoffix Znet)++ | doc/Type/DateTime.pod6

[16:54] <Geth> ¦ doc/post-release-2018.04: Fix up desc of :2foo format in .later

[16:54] <Geth> ¦ doc/post-release-2018.04: 

[16:54] <Geth> ¦ doc/post-release-2018.04: Don't make it sound like this is some "special syntax"

[16:54] <Geth> ¦ doc/post-release-2018.04: for .later calls, as it's just another colonpair format.

[16:54] <Geth> ¦ doc/post-release-2018.04: review: https://github.com/perl6/doc/commit/f845789598

[16:54] <jmerelo> Yay!!!!!

[16:54] <Geth> ¦ doc/post-release-2018.04: 2884b1ea4b | (Zoffix Znet)++ | doc/Type/DateTime.pod6

[16:54] <Geth> ¦ doc/post-release-2018.04: Remove extraneous spaces

[16:54] <Geth> ¦ doc/post-release-2018.04: review: https://github.com/perl6/doc/commit/2884b1ea4b

[16:55] <El_Che> \o/

[16:55] *** FROGGS left
[16:56] *** ExtraCrispy left
[16:57] *** domidumont joined
[16:59] *** bisectable6 joined
[16:59] *** committable6 joined
[16:59] *** ChanServ sets mode: +v committable6

[16:59] *** squashable6 joined
[17:06] <Geth> ¦ doc: fe2d4b4c8d | (JJ Merelo)++ | README.md

[17:06] <Geth> ¦ doc: Adds shippable badge

[17:06] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fe2d4b4c8d

[17:06] *** comborico1611 joined
[17:07] <comborico1611> .tell timotimo We spoke Friday afternoon about long and sluggish installation of Rakudo Star.  You asked how much gigs of memory.  It is a laptop with 2 gigs of ram.  Hope that helps!

[17:07] <yoleaux> comborico1611: I'll pass your message to timotimo.

[17:07] *** comborico1611 left
[17:08] *** Kaiepi left
[17:09] *** Kaiepi joined
[17:11] *** Kaiepi left
[17:11] *** Kaiepi joined
[17:14] <El_Che> jmerelo: the trusty pkg will be a *lot* faster than cpanm

[17:15] <jmerelo> El_Che: it really is. It's back to 3 minutes. Check it out in the latest shippable builds (now you can click on the badge in the README.md file)

[17:17] <Geth> ¦ doc/post-release-2018.04: 2f27bfa5c6 | (Zoffix Znet)++ | doc/Type/DateTime.pod6

[17:17] <Geth> ¦ doc/post-release-2018.04: Document DateTime.later/.earlier .Intify units…

[17:17] <Geth> ¦ doc/post-release-2018.04: 

[17:17] <Geth> ¦ doc/post-release-2018.04: …unless the unit is `second`/`seconds`. Intification was being

[17:17] <Geth> ¦ doc/post-release-2018.04: done for awhile in rakudo and was removed from `second` units

[17:17] <Geth> ¦ doc/post-release-2018.04: in https://github.com/rakudo/rakudo/commit/656ff77b96

[17:17] <Geth> ¦ doc/post-release-2018.04: Propspec: https://github.com/perl6/roast/commit/7c3bf500ed

[17:17] <Geth> ¦ doc/post-release-2018.04: review: https://github.com/perl6/doc/commit/2f27bfa5c6

[17:18] <Zoffix> Turns out ^ that was the cause of my earlier precision bug. It's 'cause .later was .Int'ifying my seconds.

[17:21] <jmerelo> Zoffix: bad, bad .later

[17:21] <Kaiepi> what kinds of cases would you use is repr('Uninstantiable')?

[17:22] <Zoffix> m: Int:D.new

[17:22] <camelia> rakudo-moar a138dcf50: OUTPUT: «You cannot create an instance of this type (Int:D)␤  in block <unit> at <tmp> line 1␤␤»

[17:22] <Zoffix> ^ like that one

[17:23] <Zoffix> Kaiepi: here's where it's used in core: https://gist.github.com/zoffixznet/8836ad3c457e97468d2c56ac6a57705a

[17:25] <Kaiepi> is it meant for internal type classes?

[17:26] * Zoffix shrugs

[17:27] <Kaiepi> p6: role Foo does repr('Uninstantiable') { method elems(--> Int) { 9000 } }; my $bar := 'a' but Foo

[17:27] <camelia> rakudo-moar a138dcf50: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Invalid typename 'repr'. Did you mean 'REPL'?␤at <tmp>:1␤------> 3role Foo does repr7⏏5('Uninstantiable') { method elems(--> In␤»

[17:27] <Kaiepi> p6: role Foo is repr('Uninstantiable') { method elems(--> Int) { 9000 } }; my $bar := 'a' but Foo

[17:27] <camelia> rakudo-moar a138dcf50: ( no output )

[17:31] <Kaiepi> ohh

[17:31] <Kaiepi> singletons?

[17:32] <Kaiepi> well, sort of singletons

[17:32] <jmerelo> Kaiepi: singletish?

[17:33] <Kaiepi> i guess so

[17:35] <Kaiepi> is repr('Semaphore') might have some interesting uses

[17:35] <timotimo> why not just derive from Semaphore?

[17:35] <yoleaux> 17:07Z <comborico1611> timotimo: We spoke Friday afternoon about long and sluggish installation of Rakudo Star.  You asked how much gigs of memory.  It is a laptop with 2 gigs of ram.  Hope that helps!

[17:36] *** raynold left
[17:36] <Kaiepi> because i'm bored and looking through moarvm

[17:36] <timotimo> OK

[17:38] <El_Che> jmerelo: good to hear

[17:39] <El_Che> jmerelo: 3 minutes is very acceptable for a ci test

[17:39] *** kurahaupo joined
[17:40] *** kurahaupo_ joined
[17:40] <Kaiepi> maybe something like a thread-safe map?

[17:40] <Kaiepi> instead of acquire/try-acquire/release, use the nqp methods those use in get/set

[17:41] <timotimo> i don't think a Semaphore can have attributes

[17:41] <timotimo> have you looked at OO::Monitors?

[17:42] <Kaiepi> not yet

[17:43] <Kaiepi> oh that looks pretty cool

[17:44] *** kurahaupo left
[17:46] *** kurahaupo_ left
[17:46] *** kurahaupo joined
[17:53] <jmerelo> El_Che: I think everything could be made faster by using this https://github.com/perl6/doc/issues/1952

[17:54] <El_Che> yeah, I saw the ticket. Idd

[17:54] <El_Che> indeed

[17:58] *** Kaiepi left
[17:58] *** Kaiepi joined
[18:00] *** jmerelo left
[18:05] <stmuk_> you could just print %data.perl to a file and EVALFILE it back

[18:06] <stmuk_> I'm not aware of proper serialisation being available

[18:06] <Zoffix> .perl is supposed to be proper serialization

[18:07] <stmuk_> I thought there was talk of something more native at the MoarVM level at one point but my memories of it are vague

[18:08] <Zoffix> Ah

[18:11] <timotimo> yeah, just write it as perl6 code into a file that you "use" and it'll be precompiled for you

[18:13] <stmuk_> ah that sounds better

[18:15] <timotimo> not sure if precomp folders get cleaned up, though

[18:15] <timotimo> so if you rewrite often, maybe it'll keep growing?

[18:16] <timotimo> messagepack can reproduce perl6 structures better than json can, and isn't very slow

[18:17] <stmuk_> it would be nice to avoid deserialising actual executable code as well

[18:18] <Geth> ¦ doc/post-release-2018.04: 83bbb39d02 | (Zoffix Znet)++ | doc/Type/DateTime.pod6

[18:18] <Geth> ¦ doc/post-release-2018.04: Document .earlier takes plural units too

[18:18] <Geth> ¦ doc/post-release-2018.04: 

[18:18] <Geth> ¦ doc/post-release-2018.04: .earlier's docs say to see .later for units and it's confusing

[18:18] <Geth> ¦ doc/post-release-2018.04: to say that only .later takes the plurals.

[18:18] <Geth> ¦ doc/post-release-2018.04: review: https://github.com/perl6/doc/commit/83bbb39d02

[18:18] *** Zoffix left
[18:23] *** Kaiepi left
[18:25] *** Kaiepi joined
[18:31] <japhb> timotimo: What does messagepack do better than JSON (besides being a native-binary format)?

[18:31] <timotimo> it allows keys to be arbitrary things

[18:35] <El_Che> it looks it's competing with grpc

[18:35] <El_Che> wow, Perl 6 support of msgpack :)

[18:36] <El_Che> (and no Perl 5 support)

[18:36] <El_Che> finally a usecase for Inline::Perl6 :)

[18:36] <timotimo> moarvm uses it for the remote debugger protocol

[18:36] <El_Che> (just kidding, nine :) )

[18:41] <xq> what is the status of jvm port/target ?

[18:48] *** domidumont left
[18:49] *** domidumont joined
[18:49] *** FROGGS joined
[18:51] <moritz> xq: not very active, I think; it tends to receive fixes when the build breaks, but I don't know if more than that is done

[18:52] *** darutoko left
[18:52] <xq> I see

[18:52] <xq> thanks moritz 

[18:55] *** Kaiepi left
[18:58] <Geth> ¦ doc: 9ec5b2ef60 | (Tobias Leich)++ (committed using GitHub Web editor) | doc/Type/Metamodel/MROBasedMethodDispatch.pod6

[18:58] <Geth> ¦ doc: Fix spelling of method names: find_method*

[18:58] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9ec5b2ef60

[18:58] <synopsebot> Link: https://doc.perl6.org/type/Metamodel::MROBasedMethodDispatch

[18:58] *** Kaiepi joined
[19:12] <MasterDuke> xq: bartolin is doing most of the jvm work at the moment if you have a specific question

[19:13] *** domidumont left
[19:21] *** Kaiepi left
[19:21] *** Kaiepi joined
[19:23] *** Kaiepi left
[19:24] *** zakharyas joined
[19:24] *** Kaiepi joined
[19:32] *** mienaikage joined
[19:38] *** mirlur[m] joined
[19:38] *** AlexDaniel` joined
[19:38] *** tadzik joined
[19:38] *** unclechu joined
[19:38] *** Matthew[m] joined
[19:38] *** ilmari[m] joined
[19:38] *** Garland_g[m] joined
[19:38] *** CIAvash[m] joined
[19:38] *** mack[m] joined
[19:38] *** wictory[m] joined
[19:42] *** zakharyas left
[19:48] *** Kaiepi left
[19:50] *** Kaiepi joined
[19:55] *** comborico1611 joined
[19:56] *** FROGGS left
[19:59] *** khisanth__ left
[20:05] *** pmurias joined
[20:06] <pmurias> moritz, xq: the jvm backend is getting fixes by bartolin++ , not sure what the larger plans for it are

[20:16] *** entonian joined
[20:21] *** entonian left
[20:21] <comborico1611> Howdy

[20:22] <xq> thanks pmurias 

[20:23] <xq> I didn't have any specific question, just wondering about port's status in general

[20:23] <xq> a ton of the stuff at $work is java

[20:23] <lizmat> "in need of increase of bus factor"

[20:23] <yoleaux> 20 Apr 2018 12:44Z <samcv> lizmat: i think it was MixHash or one of the similar types i'd been wanting a .grab for a while

[20:23] <xq> so something targeting jvm could potentially fly

[20:24] <lizmat> xq: I would say yes

[20:25] *** khisanth__ joined
[20:32] <pmurias> fixing bugs on the jvm backend and making it pass more tests seems doable

[20:33] <pmurias> not sure what it would take to attract more developers to the JVM backend

[20:33] *** pmurias left
[20:33] <MasterDuke> increasing the compile speed would help

[20:38] *** khisanth__ left
[20:52] *** khisanth__ joined
[20:54] <Kaiepi> i don't know java sadly

[20:54] <Kaiepi> if the js backend needs any eyes though, that i can do

[21:09] *** Kaiepi left
[21:11] <Geth> ¦ ecosystem: e4dd925eaa | (Zoffix Znet)++ (committed using GitHub Web editor) | META.list

[21:11] <Geth> ¦ ecosystem: Add Games::TauStation::DateTime to ecosystem

[21:11] <Geth> ¦ ecosystem: 

[21:11] <Geth> ¦ ecosystem: "Convert TauStation's ( https://taustation.space ) Coordinated Central Time to Old Earth Time"

[21:11] <Geth> ¦ ecosystem: https://github.com/zoffixznet/perl6-Games-TauStation-DateTime

[21:11] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/e4dd925eaa

[21:11] <lizmat> Zoffix: why not on CPAN ?

[21:12] *** Zoffix joined
[21:13] *** Kaiepi joined
[21:13] <Zoffix> lizmat: just like p6c better. Haven't had time to find a good tool to upload. I tried App::Mi6, but it nuked my README and that was a deal breaker.

[21:14] <lizmat> yeah, the README is generated from the pod

[21:14] <Zoffix> Yeah, I don't like pod

[21:14] <lizmat> have you tried tyil's App::Assixt ?

[21:15] <lizmat> not sure whether that would solve your issue, though

[21:15] <japhb> Zoffix: Do you work on TauStation as a $dayjob?

[21:16] <Zoffix> japhb: no, just a player

[21:16] <Zoffix> lizmat: no, haven't had a chance to try anything else yet.

[21:24] *** athenot joined
[21:25] *** pmurias joined
[21:26] <pmurias> Kaiepi: attracting extra developers to the js backend would be great

[21:26] *** espadrine_ left
[21:27] <pmurias> Kaiepi: I guess a major obstacle for it is that the setting takes a super long time to compile on it

[21:29] <El_Che> maybe also that the jvm world turns around java compability, while the rest of the world stays away from the jvm because of the java ecosystem

[21:37] <Kaiepi> which version of node is the js backend aiming to be compatible with?

[21:39] <pmurias> Kaiepi: I'm using v8.3.0 myself

[21:39] <pmurias> I haven't really though that much around it

[21:41] <Kaiepi> 7+ should be safe enough

[21:41] <Kaiepi> lemme check what version something like centos still uses

[21:42] <Kaiepi> damn, debian's still running 4.8

[21:43] <Kaiepi> that leaves out async/await, but i think promises, maps, and sets are still compatible at least

[21:43] *** athenot_ joined
[21:44] *** Zoffix left
[21:44] *** athenot left
[21:48] <pmurias> Kaiepi: is debian offering a working node.js nowadays

[21:48] *** wamba left
[21:48] <pmurias> ?

[21:48] *** wamba joined
[21:49] <Kaiepi> they offer it, but whether or not it works i haven't tested https://packages.debian.org/search?keywords=nodejs

[21:52] <Kaiepi> i think it'd be better to expect v7 and expect people to use nvm/n if they don't have it because it has the bulk of the es6 features

[21:54] <pmurias> I think people got used to debian node.js not working because that package was useless for a long time ;)

[21:55] <pmurias> (stuff from npm didn't install on it)

[21:55] <pmurias> Kaiepi: I'm only partially awake at this point so I guess I should be heading to sleep soonish ;)

[21:56] <Kaiepi> aight

[21:56] <Kaiepi> night

[21:56] *** wamba left
[21:58] <pmurias> night

[21:58] *** pmurias left
[22:17] *** athenot joined
[22:17] *** athenot_ left
[22:21] <TEttinger> my question for pmurias would be if node.js is offering a working node.js nowadays, cough left-pad cough

[22:26] *** denkweise left
[22:26] <Kaiepi> nah npm's still pretty bad

[22:26] <Kaiepi> there are alternatives like yarn out now though

[22:27] *** denkweise joined
[22:39] <SmokeMachine> m: say $++, " - {$++}" for ^10 # is that expected?

[22:39] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «0 - 0␤1 - 0␤2 - 0␤3 - 0␤4 - 0␤5 - 0␤6 - 0␤7 - 0␤8 - 0␤9 - 0␤»

[22:41] <AlexDaniel> yes

[22:41] <SmokeMachine> I understand that the $ is owned by the block... but is that useful?

[22:42] <comborico1611> Is there an effort to keep articles in Docs brief?

[22:42] <AlexDaniel> comborico1611: not really, no

[22:42] <comborico1611> Seems like it is more like a quick reference.

[22:42] <AlexDaniel> comborico1611: but please file an issue if that's a problem

[22:43] <AlexDaniel> there are slightly bigger documents here: https://docs.perl6.org/language.html

[22:43] <comborico1611> I see.  I'm just trying to get a feel of what the Docs' goal/purpose is.

[22:44] <comborico1611> Thanks!

[22:44] <AlexDaniel> comborico1611: Vision: “I want p6doc and doc.perl6.org to become the No. 1 resource to consult when you want to know something about a Perl 6 feature, be it from the language, or built-in types and routines. I want it to be useful to every Perl 6 programmer.”

[22:44] <comborico1611> What is this more verbose version called?

[22:44] <AlexDaniel> what do you mean?

[22:45] <comborico1611> "Consult" versus "teach" is something that comes to my mind.

[22:46] <comborico1611> .org/language is lengthier articles than Docs, right? So does that group of documentation have a name?

[22:46] <AlexDaniel> SmokeMachine: well, in that case it's not, but you wrote it that way :)

[22:47] <AlexDaniel> SmokeMachine: but

[22:47] <AlexDaniel> c: 2017.08,2017.09 say $++, " - {$++}" for ^10

[22:47] <committable6> AlexDaniel, ¦2017.08: «0 - 0␤1 - 1␤2 - 2␤3 - 3␤4 - 4␤5 - 5␤6 - 6␤7 - 7␤8 - 8␤9 - 9␤» ¦2017.09: «0 - 0␤1 - 0␤2 - 0␤3 - 0␤4 - 0␤5 - 0␤6 - 0␤7 - 0␤8 - 0␤9 - 0␤»

[22:48] <AlexDaniel> SmokeMachine: here's the commit that fixed it: https://github.com/rakudo/rakudo/commit/59454b03cc3e12fd9236ecb980669f8712961141

[22:49] *** ZofBot joined
[22:49] *** ChanServ sets mode: +v ZofBot

[22:49] <comborico1611> Why doesn't doc.perl6.org have a banner click to homepage (perl6.org)?

[22:51] *** ZofBot left
[22:51] <AlexDaniel> comborico1611: there's no name for it, but yes, generally these files are for lengthier tutorials/guides/somethings

[22:51] <AlexDaniel> comborico1611: good question, maybe it should

[22:51] <comborico1611> What would you call it?

[22:52] *** zacts joined
[22:52] <comborico1611> AlexDaniel: Will you post an issue about it, or shall I?

[22:52] *** ZofBot joined
[22:52] *** ChanServ sets mode: +v ZofBot

[22:52] <AlexDaniel> “Perl 6” link on the home page actually leads you to perl6.org, but I don't know if that's enough

[22:53] *** ZofBot left
[22:53] <AlexDaniel> comborico1611: I'm in the middle of something else, so please do it

[22:53] <comborico1611> AlexDaniel: Sure thing!

[22:53] <AlexDaniel> thanks

[22:54] *** statisfiable6 left
[22:54] *** nativecallable6 left
[22:54] *** evalable6 left
[22:54] *** committable6 left
[22:54] *** coverable6 left
[22:54] *** squashable6 left
[22:54] *** reportable6 left
[22:54] *** bisectable6 left
[22:54] *** notable6 left
[22:54] *** benchable6 left
[22:54] *** releasable6 left
[22:54] *** shareable6 left
[22:54] *** greppable6 left
[22:54] *** unicodable6 left
[22:54] *** undersightable6 left
[22:54] *** bloatable6 left
[22:54] *** quotable6 left
[22:56] *** markong left
[22:59] *** rindolf left
[23:02] *** zacts left
[23:04] *** zacts joined
[23:07] *** nativecallable6 joined
[23:07] *** ChanServ sets mode: +v nativecallable6

[23:07] *** notable6 joined
[23:07] *** unicodable6 joined
[23:07] *** committable6 joined
[23:07] *** evalable6 joined
[23:07] *** bloatable6 joined
[23:07] *** greppable6 joined
[23:07] *** coverable6 joined
[23:07] *** quotable6 joined
[23:07] *** ChanServ sets mode: +v notable6

[23:07] *** ChanServ sets mode: +v unicodable6

[23:07] *** reportable6 joined
[23:07] *** benchable6 joined
[23:07] *** ChanServ sets mode: +v reportable6

[23:07] *** shareable6 joined
[23:07] *** bisectable6 joined
[23:07] *** ChanServ sets mode: +v shareable6

[23:07] *** squashable6 joined
[23:07] *** releasable6 joined
[23:07] *** ChanServ sets mode: +v bisectable6

[23:07] *** statisfiable6 joined
[23:11] <SmokeMachine> is there a way to access the original method overwrited by a mixin role?

[23:14] <jnthn> To call it from the overridden method, use callsame(). From the outside, $foo.The::Original::Type::method()

[23:14] <yoleaux> 00:57Z <Zoffix> jnthn: FWIW, on the more restrictive protos in core thing—you said you'll think more about it. We had a regression in Crane because user's own multies took 1 positional arg but all core ones took 2: https://github.com/atweiden/crane/pull/4

[23:14] <comborico1611> Is .get shorthand for $*IN?

[23:14] <comborico1611> I mean get

[23:15] <SmokeMachine> jnthn: and if the original method came from another role?

[23:16] <jnthn> Each mixin is a new level of anonymous inheritance, so callsame() would work still

[23:16] <SmokeMachine> m: role R { method CALL-ME(|) { self.Routine::CALL-ME()} }; sub bla { 42 }; &bla does R; say bla # jnthn I mean something like this...

[23:16] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «Cannot find method 'CALL-ME' on object of type Routine␤  in method CALL-ME at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:16] <SmokeMachine> m: role R { method CALL-ME(|) { self.Callable::CALL-ME()} }; sub bla { 42 }; &bla does R; say bla

[23:16] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «No concretization found for Callable␤  in method CALL-ME at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:18] <timotimo> comborico1611: .get is syntax for $_.get, but the sub get will access $*IN for you without you having to mention it

[23:19] <jnthn> Ah, that won't work since CALL-ME is only a mechanism for customizing invocation. A `sub` has no CALL-ME method of its own; its invocation is a lower-level thing. Probably better just to use .wrap in that case.

[23:19] <comborico1611> So it is shorthand.  Thanks timotimo!

[23:19] <timotimo> .foo is short for $_.foo

[23:19] <comborico1611> timotimo: Did you get my message? 2 gigs

[23:19] <timotimo> i did; yeah, 2 gigs is really tight if you have other programs running

[23:20] <comborico1611> Heh.  It takes so much RAM because it is being built from scratch, compared to "finished build"?

[23:21] <SmokeMachine> m: role R { method TWEAK(|) { self.^find_method("CALL-ME").wrap: -> |c { callsame |c } } }; sub bla { 42 }; &bla does R; say bla # jnthn I've tried...

[23:21] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «No such method 'wrap' for invocant of type 'Mu'␤  in method TWEAK at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:22] <tobs> comborico1611: but the get routine without the dot seems to be smarter https://docs.perl6.org/routine/get#class_IO%3A%3AHandle

[23:22] <SmokeMachine> m: role R[&cloned] { method CALL-ME(|c) { cloned |c } }; sub bla { 42 }; &bla does R[&bla.clone]; say bla # this is the only way I could do it...

[23:22] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «42␤»

[23:23] <tobs> If I understood correctly, it's like the diamond <> in perl5, opening files mentioned on the command line or $*IN by default.

[23:23] <comborico1611> Hmm.  No Perl5 experience here, but I appreciate the link!

[23:24] <timotimo> sorry, you're right, get and friends work on $*ARGFILES, which is stdin if you have no file names on the commandline, otherwise it goes through the files as it consumes data

[23:26] <Juerd> I'm feeling dumb. I want a subroutine argument that is a list of strings, and then call it with literals. Can't use sub x(Str @foo) because my literal list is not typed. And for whatever reason sub x(@foo where *.all ~~ Str) doesn't seem to dwim either. Any hints?

[23:30] <MasterDuke> m: sub f(@g where @g.all ~~ Str) { dd @g }; f(("a", "z"))

[23:30] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «("a", "z")␤»

[23:30] <MasterDuke> m: sub f(@g where @g.all ~~ Str) { dd @g }; f(("a", "z", 3))

[23:30] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «Constraint type check failed in binding to parameter '@g'; expected anonymous constraint to be met but got List ($("a", "z", 3))␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:30] <Juerd> Why @g.all instead of *.all?

[23:31] *** dolmen left
[23:31] <MasterDuke> m: sub f(@g where { $_.all ~~ Str }) { dd @g }; f(("a", "z", 3))

[23:31] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «Constraint type check failed in binding to parameter '@g'; expected anonymous constraint to be met but got List ($("a", "z", 3))␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:31] <MasterDuke> m: sub f(@g where { $_.all ~~ Str }) { dd @g }; f(("a", "z"))

[23:31] <camelia> rakudo-moar d4a6b92f3: OUTPUT: «("a", "z")␤»

[23:33] <Juerd> Also, I'm being bitten by f(("a")) not being a list. It's the one thing in Perl 6 that I keep getting bitten by and can't seem to get used to :(

[23:34] <Juerd> Still I don't understand why *.all ~~ Str doesn't dwim while { $_.all ~~ Str } does.

[23:35] <MasterDuke> there are some subtle difference between * and { $_ } in wheres, something to do with thunking i think, but i don't know enough to explain

[23:37] <MasterDuke> btw, you know to add a ',' after a single thing to make it a list?

[23:38] <Juerd> I do, but I forget remembering that I have to.

[23:38] <comborico1611> lol

[23:39] <tobs> Juerd: people keep saying "parentheses don't make lists, the comma does". Maybe that's memorable.

[23:40] <Juerd> tobs: But in many cases I'm not really aware that I should make a list.

[23:40] <Juerd> tobs: For example, @foo.append vs @foo.push -- I know they're different but I can't tell which one is which. It's too subtle and there is no visual indication of the actual difference.

[23:41] <Juerd> And that it doesn't matter which one I use in most cases, means I'll probably never get used to it at all.

[23:42] <MasterDuke> i think of it that 'append', the longer one, adds more things to a list, than 'push', which is shorter and only adds one thing

[23:42] <Juerd> MasterDuke: That's a good mnemonic at least for these. Thanks.

[23:42] *** w_richard_w joined
[23:43] *** athenot_ joined
[23:43] <MasterDuke> welcome

[23:44] *** athenot left
[23:46] *** ZofBot joined
[23:46] *** ChanServ sets mode: +v ZofBot

[23:47] *** raynold joined
[23:58] *** Kaiepi left
[23:59] *** mryan left
