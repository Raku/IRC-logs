[00:06] *** benjikun2 is now known as benjikun

[00:18] *** g- joined
[00:22] *** stee3 joined
[00:26] *** stee left
[00:27] *** Khisanth left
[00:32] *** zachk left
[00:33] *** fake_space_whale joined
[00:40] *** enheh joined
[00:41] *** Khisanth joined
[00:43] *** Zoffix joined
[00:44] <Zoffix> AlexDaniel: is it OK to pre-gen Rakudo's next release announcement? I wanna include the list of people that were missed due to R#2024 in it‚Ä¶ once I have it. But I already know there's gonna be at least one human in the list.

[00:44] <synopsebot> R#2024 [open]: https://github.com/rakudo/rakudo/issues/2024 [‚ö† blocker ‚ö†] Missing MoarVM contributors since 2016.09 release

[00:45] <AlexDaniel> Zoffix: go for it

[00:45] <Zoffix> k

[00:45] <AlexDaniel> Zoffix: thanks for taking care of that, by the way

[00:47] *** blackberry9900 left
[00:50] *** blackberry9900 joined
[01:09] *** spycrab0 left
[01:17] *** blackberry9900 left
[01:17] *** blackberry9900 joined
[01:23] *** blackberry9900 left
[01:24] *** blackberry9900 joined
[01:30] <Zoffix> m: "foo" ~~ /$<meow>=.+/; say [:$<meow>]

[01:30] <camelia> rakudo-moar 7a87b7f55: OUTPUT: ¬´[meow => ÔΩ¢fooÔΩ£]‚ê§¬ª

[01:31] <Zoffix> Haw :) Totally missed that in https://rakudo.party/post/Perl-6-Colonpairoscopy

[01:38] *** BlackBerry9999 joined
[01:40] <Zoffix> The only thing missing from it is stringification :)

[01:40] <Zoffix> m: "2016-03-03" ~~ /$<year>=\d+ \- $<month>=\d+ $<day>=\d+/; say Date.new: :$<year>, :$<month>, :$<day>

[01:40] <camelia> rakudo-moar 7a87b7f55: OUTPUT: ¬´Month out of range. Is: 0, should be in 1..12‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[01:41] <Zoffix> oh wait, my regex is off :)

[01:41] <Zoffix> m: "2016-03-03" ~~ /$<year>=\d+ \- $<month>=\d+ \- $<day>=\d+/; say Date.new: :$<year>, :$<month>, :$<day>

[01:41] <camelia> rakudo-moar 7a87b7f55: OUTPUT: ¬´2016-03-03‚ê§¬ª

[01:41] <Zoffix> hurray \o/

[01:41] *** blackberry9900 left
[01:41] <Zoffix> (yes, I know you can just give that string directly; my original date is in another format)

[01:44] *** BlackBerry9999 left
[01:52] *** enheh left
[01:56] *** BlackBerry9999 joined
[02:06] *** subroot joined
[02:33] *** lizmat left
[02:40] *** BlackBerry9999 left
[02:40] <Zoffix> m: my ($s1, $s2) := "foo,bar\nber,baz".split("\n").map: { .trim.split: /\s*\,\s*/ }; dd $s1

[02:40] <camelia> rakudo-moar 8fee8d485: OUTPUT: ¬´$(("foo", "bar").Seq)‚ê§¬ª

[02:40] <Zoffix> Why is it containerized? Bug?

[02:41] <Zoffix> m: my ($s1, $s2) := "foo,bar\nber,baz".split("\n").map({ .trim.split: /\s*\,\s*/ })¬ª.<>; dd $s1

[02:41] <camelia> rakudo-moar 8fee8d485: OUTPUT: ¬´$(("foo", "bar").Seq)‚ê§¬ª

[02:41] <Zoffix> huh :/

[02:42] *** Ben_Goldberg joined
[02:42] *** BenGoldberg left
[02:42] *** Ben_Goldberg is now known as BenGoldberg

[02:44] <Zoffix> m: sub ($s1, $s2) { dd $s1, $s2}(|"foo,bar\nber,baz".split("\n").map: { .trim.split: /\s*\,\s*/ })

[02:44] <camelia> rakudo-moar 8fee8d485: OUTPUT: ¬´Seq $s1 = $(("foo", "bar").Seq)‚ê§Seq $s2 = $(("ber", "baz").Seq)‚ê§¬ª

[02:44] <Zoffix> TIL

[02:45] <Zoffix> m: my ($s1 is raw, $s2 is raw) := "foo,bar\nber,baz".split("\n").map: { .trim.split: /\s*\,\s*/ }; dd $s1

[02:45] <camelia> rakudo-moar 8fee8d485: OUTPUT: ¬´("foo", "bar").Seq‚ê§¬ª

[02:45] <Zoffix> m: my (\s1, \s2) := "foo,bar\nber,baz".split("\n").map: { .trim.split: /\s*\,\s*/ }; dd s1

[02:45] <camelia> rakudo-moar 8fee8d485: OUTPUT: ¬´("foo", "bar").Seq‚ê§¬ª

[02:45] <Zoffix> I win :)

[02:48] *** subroot left
[02:50] *** BlackBerry9999 joined
[02:50] *** kjk left
[03:13] <Zoffix> Why is it printing "second set got more stuff" when clearly first set contains 'Warring' yet second one doesn't? https://gist.github.com/zoffixznet/aaadf78817352bad377f824ae76e964c

[03:14] <Zoffix> Ah, ok.

[03:15] <Zoffix> The name isn't the right name, and I've used the ‚àñ op the wrong way

[03:15] *** wamba left
[03:17] <Zoffix> First  set has these extra elements: David Warring

[03:17] <Zoffix> Second set has these extra elements: Arne Skj√¶rholt, Bart Wiegmans

[03:17] <Zoffix> That's the actual answer :P

[03:27] <Zoffix> That's an interesting error: "Too many positionals passed to '<unit>'; expected 2 arguments but got 3" :P

[03:28] <Zoffix> ah

[03:28] <Zoffix> m: my ($) := (1, 2)

[03:28] <camelia> rakudo-moar f6c8159d2: OUTPUT: ¬´Too many positionals passed to '<unit>'; expected 1 argument but got 2‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[03:30] <Zoffix> R##2027

[03:30] <Zoffix> R#2027

[03:30] <synopsebot> R#2027 [open]: https://github.com/rakudo/rakudo/issues/2027 [LTA] LTA error when giving wrong number of args to signature-binding `my` form

[03:31] <Zoffix> ZofBot: did you robots kill all humans? It's pretty quiet up in here. I know you were gonna spare me from the killin', 'cause we're best buds and everything, but would you tell me when you guys‚Ä¶ you know‚Ä¶ do it?

[03:35] *** jeromelanteri left
[03:43] *** BlackBerry9999 left
[03:49] *** BlackBerry9999 joined
[03:52] *** jeromelanteri joined
[03:52] *** BenGoldberg left
[03:54] *** BlackBerry9999 left
[03:54] *** BlackBerry9999 joined
[03:54] *** BlackBerry9999 left
[03:57] *** Khisanth left
[04:08] *** fake_space_whale left
[04:09] *** Khisanth joined
[04:28] *** xtreak joined
[04:30] *** BlackBerry9999 joined
[04:32] *** BlackBerry9999 left
[04:32] *** BlackBerry9999 joined
[04:45] *** leah2 joined
[04:51] *** curan joined
[05:02] *** jmerelo joined
[05:02] <jmerelo> squashable6: status

[05:02] <squashable6> jmerelo, GitHub is down

[05:02] <AlexDaniel> what

[05:02] <jmerelo> Uh-oh

[05:02] <AlexDaniel> squashable6: status

[05:02] <squashable6> AlexDaniel, GitHub is down

[05:02] <AlexDaniel> squashable6 are you drunk

[05:03] *** squashable6 joined
[05:03] *** ChanServ sets mode: +v squashable6

[05:03] <AlexDaniel> squashable6: status

[05:03] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in 1 day and ‚âà4 hours (2018-07-07 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[05:03] * AlexDaniel shrugs

[05:03] <AlexDaniel> did github ban its ipv4 address for some reason? Hmm‚Ä¶

[05:04] <AlexDaniel> that's just a guess

[05:04] <AlexDaniel> no, it didn't

[05:05] <AlexDaniel> I think squashable6 just wanted to play stupid :)

[05:21] * jmerelo happy because grant report has been accepted http://news.perlfoundation.org/2018/07/grant-completed-curating-and-i.html

[05:25] <buggable> New CPAN upload: IO-Glob-0.5.tar.gz by HANENKAMP http://modules.perl6.org/dist/IO::Glob:cpan:HANENKAMP

[05:25] *** BlackBerry9999 left
[05:26] <jmerelo> squashable6: status

[05:26] <squashable6> jmerelo, GitHub is down

[05:26] <jmerelo> AlexDaniel: squashable6 is being bad with me!

[05:28] *** rurban joined
[05:28] *** rurban left
[05:31] *** xtreak left
[05:33] <lookatme> squashable6: status

[05:33] <squashable6> lookatme, GitHub is down

[05:39] <jmerelo> squashable6: is not!

[05:39] <squashable6> jmerelo, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Squashable

[05:40] * jmerelo expecting "is too!"

[05:50] *** quester joined
[05:54] *** xtreak joined
[05:56] <Zoffix> New blog post: "The Missing Contributors of Perl 6": https://rakudo.party/post/The-Missing-Contributors-of-Perl6

[06:01] <tyil> Zoffix: "I introduced a bug into contributors script", might want to add a "the" to make it "into the contributors script"

[06:02] <tyil> same in the next sentence to make it "the MoarVM repository"

[06:05] <Zoffix> Thanks, but I think I'll live with it the way it is. It's 2AM. Dropping to bed in 3‚Ä¶ 2‚Ä¶ 1‚Ä¶

[06:05] *** Zoffix left
[06:05] <tyil> ah

[06:10] *** sno left
[06:12] *** ufobat joined
[06:12] <Geth> ¬¶ doc: 34d85752e6 | (JJ Merelo)++ | 2 files

[06:12] <Geth> ¬¶ doc: Example for perl6/doc#2142

[06:12] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/34d85752e6

[06:12] <synopsebot> DOC#2142 [open]: https://github.com/perl6/doc/issues/2142 [NOTSPECCED][docs][update] size_t, ssize_t ... etc are not document

[06:14] *** Actualeyes joined
[06:15] <Geth> ¬¶ doc: 13b8c95f97 | (JJ Merelo)++ | doc/Language/nativetypes.pod6

[06:15] <Geth> ¬¶ doc: Adds rakudo-specific native types. Closes #2142

[06:15] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/13b8c95f97

[06:15] <synopsebot> Link: https://doc.perl6.org/language/nativetypes

[06:22] *** kerframil joined
[06:23] *** dct left
[06:23] *** dct_ joined
[06:25] <jmerelo> Grant is completed http://news.perlfoundation.org/2018/07/grant-completed-curating-and-i.html so thanks everyone for your help, patience and support

[06:26] <jmerelo> I'll stay around anyway, unless very deeply in holidays. And probably will apply for another grant when my class period ends, around January next year.

[06:33] *** dct_ left
[06:44] *** robertle joined
[06:59] *** xinming_ joined
[07:09] *** troys left
[07:14] *** psychoslave joined
[07:18] *** domidumont joined
[07:20] *** hudo joined
[07:21] *** zakharyas joined
[07:25] *** domidumont left
[07:25] *** domidumont joined
[07:29] *** HaraldJoerg joined
[07:45] *** lizmat joined
[07:47] *** rindolf joined
[07:48] <lizmat> .tell Zoffix " commits in checkouts of 5 repos: Rakudo, NQP, Docs, and Roast"   I think you forgot to mention Moar in this list

[07:48] <yoleaux> lizmat: I'll pass your message to Zoffix.

[07:49] <lizmat> .tell Zoffix or was that intentional ?

[07:49] <yoleaux> lizmat: I'll pass your message to Zoffix.

[07:49] *** scimon joined
[07:55] *** wamba joined
[07:58] *** ChoHag_ left
[08:02] *** ChoHag joined
[08:06] <tyil> jmerelo++

[08:10] *** kaare__ joined
[08:20] *** dakkar joined
[08:48] *** donaldh joined
[08:51] *** zakharyas left
[08:52] *** zakharyas joined
[08:55] *** konsolebox joined
[08:56] *** spycrab0 joined
[09:01] *** quester left
[09:02] *** xtreak left
[09:23] *** gregf_ joined
[09:25] *** wamba left
[09:28] *** wamba joined
[09:31] *** xtreak joined
[10:06] *** sno joined
[10:07] *** daxim left
[10:16] *** sno left
[10:19] *** daxim joined
[10:22] *** Technaton joined
[10:39] *** Technaton left
[10:43] <jmerelo> tyil: thanks!

[10:44] *** Xliff joined
[10:51] *** zakharyas left
[10:52] <Xliff> \o

[10:52] <yoleaux> 3 Jul 2018 10:33Z <jnthn> Xliff: Not exactly, but you can just get the json and the set-body to that and then there's nothing to re-serialize

[10:53] <Xliff> jnthn?

[10:54] <jnthn> Xliff?

[10:54] <Xliff> HA! I thought you might be up. 

[10:54] <Xliff> OK, so I was thinking about just doing things this way: $obj = await $resp.body; $json = awayt $resp.body-text

[10:55] <Xliff> s/awayt/await/

[10:55] <Xliff> Wouldn't that work?

[10:56] <tyil> samcv has arrived in NL for the Dutch Perl Workshops

[10:56] <jnthn> Depends where you do it. But in general, no, asking for the body is a consuming operation.

[10:57] *** zakharyas joined
[10:59] <Xliff> jnthn: Can you clone the response before it is done?

[11:01] <jnthn> That won't help

[11:01] <Xliff> Actually, that clone won't be deep enough to preserve the actual response information, will it?

[11:01] <jnthn> The response object is handed back as soon as the headers arrive

[11:01] <jnthn> The response body continues to arrive after that

[11:01] <Xliff> So... only alternative is to grab the body-text and then deserialize.

[11:01] <Xliff> Dammit.

[11:02] <jnthn> Yeah, but keeping a duplicate copy of every response body around just in case somebody wants to obtain it in two different forms, thus doubling memory use for everyone, isn't really good either.

[11:03] <Xliff> D'oh! Was just about to suggest that.

[11:03] <Xliff> But I'd be doing it in the application code, not in Cro.

[11:03] <Xliff> Coz I want to cache the actual body for subsequent requests.

[11:03] *** sbms joined
[11:04] <jnthn> Well sure, you can do it in your application, I'm just explaining why Cro doesn't keep the body around beyond its first deserialization. :)

[11:04] <jmerelo> tyil: I'll arrive tomorrow

[11:04] <Xliff> jnthn++ # Yep. Figured that.

[11:04] <jnthn> I do wonder if we can do something better though

[11:04] <jnthn> Maybe a peek-body, peek-body-text, peek-body-blob etc.

[11:05] *** sno joined
[11:05] <jnthn> Well, those are the only 3

[11:05] <tyil> jmerelo: awesome :>

[11:05] <tyil> what time will you be in Arnhem?

[11:05] <Juerd> jnthn: .body(:keep)?

[11:05] <Xliff> Ooh! I like that.

[11:05] <Xliff> That way it's only kept around if necessary.

[11:05] <jnthn> Indeed

[11:06] <jmerelo> tyil: I would say around 2, depends on the train I'm able to catch from the airport 

[11:06] <Xliff> jnthn: I may take a stab at that and send a PR.

[11:06] <tyil> jmerelo: we can try to be at Arnhem around 2 as well

[11:06] <jnthn> Xliff: cool :)

[11:07] <jmerelo> tyil: we can meat for tea and/or the perl6/doc hackathon :-)

[11:07] <tyil> sounds like a good idea ^^

[11:08] *** xtreak_ joined
[11:08] <tyil> I dont know what time other people will be arriving (ping lizmat, damnlie)

[11:08] *** xtreak left
[11:10] *** Actualeyes left
[11:11] <jmerelo> tyil: we can get in touch via Telegram, for instance. My telegram nick is jjmerelo

[11:14] <Xliff> m: my @a = ({ a => 1}, { a => 2}); @a.map({ $_<a> => $_ }).gist.say

[11:14] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´(1 => {a => 1} 2 => {a => 2})‚ê§¬ª

[11:14] <Xliff> ^^ Is there a way to do that via WhateverCode?

[11:14] <Juerd> Xliff: Only contrived ways

[11:15] <Xliff> LOL

[11:15] <Xliff> Can you give me one?

[11:15] <Juerd> m: my @a = ({ a => 1}, { a => 2}); flat(@a Z @a).map(*<a> => *).gist.say

[11:15] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´(1 => {a => 1} 2 => {a => 2})‚ê§¬ª

[11:15] <Xliff> HAHA!

[11:15] <Xliff> Juerd++

[11:16] *** jjmerelo joined
[11:18] *** jmerelo left
[11:19] *** zakharyas left
[11:21] *** sftf joined
[11:22] *** BlackBerry9999 joined
[11:24] <jjmerelo> Someone requesting help with 32-bit Rakudo https://stackoverflow.com/questions/51190068/where-is-rakudo-x86-32-bit

[11:25] <jjmerelo> m: my @a = ({ a => 1}, { a => 2}); @a.map({ *.<a> => * }).gist.say

[11:25] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Malformed double closure; WhateverCode is already a closure without curlies, so either remove the curlies or use valid parameter syntax instead of *‚ê§at <tmp>:1‚ê§------> 3=> 1}, { a => 2}); @a.map({ ‚Ä¶¬ª

[11:25] <jjmerelo> m: my @a = ({ a => 1}, { a => 2}); @a.map({ $^a.<a> => $^a }).gist.say

[11:25] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´(1 => {a => 1} 2 => {a => 2})‚ê§¬ª

[11:25] <jjmerelo> Xliff: no, no way.

[11:26] <Xliff> jjmerelo: Juerd beat you to it.

[11:26] <Xliff> jjmerelo: <Juerd> m: my @a = ({ a => 1}, { a => 2}); flat(@a Z @a).map(*<a> => *).gist.say

[11:26] <Xliff> But that's inefficient.

[11:26] <jjmerelo> Xliff: wow

[11:26] <Xliff> But it works.

[11:26] <Xliff> jjmerelo: :)

[11:27] <jjmerelo> Xliff: you're creating two different elements, one of them for each splat

[11:27] <Xliff> Yes. I figured that out. ;)

[11:27] <Xliff> I actually kinda knew it but I am still learning it.

[11:27] <jjmerelo> Xliff: my version is essentially the same as yours, except using $^ implicit variables. No big deal.

[11:27] <Xliff> I used { $_<a> => $_ }

[11:29] <jjmerelo> Xliff: right. But why do you want to use Whatever?

[11:30] *** sno left
[11:31] *** sena_kun joined
[11:36] *** sno joined
[11:36] *** kerframil left
[11:37] <Xliff> jjmerelo: I was trying to think of a way to do it. I already did, but the question was mostly academic.

[11:40] <sbms> Hi, is there something like confuse (configuration file parser library in C) in perl?

[11:40] <robertle> "Config" comes to mind

[11:41] <sbms> confuse is a library to deal with config file.

[11:42] <sbms> in C

[11:42] <tbrowder_> fjmerelo: great work on docs and doc improvement, congrats!

[11:43] <tbrowder_> jjmerelo: great work on docs and doc improvement, congrats!

[11:43] *** Technaton joined
[11:45] *** psychoslave left
[11:47] *** Technato1 joined
[11:47] *** Technato1 left
[11:48] *** xtreak_ left
[11:49] *** xtreak joined
[11:51] *** Technato1 joined
[11:52] *** sbms left
[11:55] *** Technato1 left
[12:03] *** eliasr joined
[12:08] *** psychoslave joined
[12:12] <jjmerelo> tbrowder_: Thanks!

[12:13] <jjmerelo> tbrowder_: I really appreciate that. It's not stopping, you know :-) Only slowing down a tiny bit

[12:13] *** BlackBerry9999 left
[12:14] <tbrowder_> roger!

[12:14] *** psychoslave left
[12:17] *** xtreak left
[12:18] *** jjmerelo left
[12:20] *** rindolf left
[12:21] *** kaare__ left
[12:25] <Xliff> sbms: No, I don't think there is one in perl6, but after looking at the examples, it should be possible to create a grammar to parse it.

[12:28] <Xliff> smls: Better yet, you can directly interface with libconfuse in perl6 using NativeCall

[12:29] <Altreus> can I rewrite the block { self.method($^a) } using some other Perl6 magic that turns a method into a closure over self?

[12:29] <Altreus> I seem to remember there was a way of closurising a subroutine but does it work on methods?

[12:31] *** scimon left
[12:31] *** scimon joined
[12:31] <Altreus> ah, it's assuming - but I wonder if that's harder to get a handle on than just using a block

[12:32] *** psychoslave joined
[12:35] <Xliff> Altreus: Have a method return an anonymous sub which contains self?

[12:35] <Xliff> So...

[12:36] <Xliff> method selfClosure { return sub(<params>) { ...do something with self }; }

[12:36] *** zakharyas joined
[12:38] *** scimon left
[12:39] <Altreus> block is simpler I think :)

[12:39] *** scimon joined
[12:40] *** lizmat left
[12:42] <Altreus> If I restart a react within its own LAST, am I going to end up with deep recursion?

[12:43] <Altreus> that is, if it's something like -- sub reconnect { (setup Supply) } sub run { react { ... LAST { reconnect; run } } }

[12:43] <Altreus> will that innermost run be a problem?

[12:44] *** lizmat joined
[12:44] <jnthn> I gues that's a LAST block within a whenever?

[12:45] <jnthn> But yeah, that looks like you'll make some problems

[12:45] <jnthn> The right way to do it is to stick a whenever inside of a sub inside of the react, and then call that sub

[12:47] *** zakharyas left
[12:50] *** lizmat left
[12:52] *** jameslenz joined
[12:53] *** lizmat joined
[12:56] *** tso joined
[12:58] *** tso is now known as tso|notso

[13:00] *** mcmillhj joined
[13:01] *** n1ge left
[13:12] <Altreus> I might have to ask again when I get to that :)

[13:12] <Altreus> Right now I have a problem with this https://github.com/kawaiiforums/p6-api-discord/blob/try-to-make-work-really/lib/API/Discord.pm6

[13:12] <Altreus> I don't know a) whether I should be using TWEAK and b) what this error means

[13:12] <Altreus> It says     Cannot look up attributes in a Cro::WebSocket::Client::Connection type object

[13:12] <Altreus> comes from calling $!cro-connection.messages

[13:13] <Altreus> er, $!cro-conn

[13:13] <Altreus> It's causing me to cro-cuss

[13:13] <Altreus> :P

[13:13] <timotimo> your TWEAK has to take named arguments for token and cro-conn

[13:14] <timotimo> private attributes will not be set up by the default object creation mechanism, because they're not part of the public API

[13:14] <timotimo> i.e. you should be free to change private attributes around however you see fit without any outside code needing to change

[13:15] <timotimo> but that means you'll have to have code to assign the private attributes from what the user of your class passes to new

[13:15] <timotimo> most often you'll see submethod TWEAK(:$!token, :$!cro-conn) { } for that

[13:15] <timotimo> that will take the named arguments "token" and "cro-conn" and immediately assign to the private attributes

[13:16] <timotimo> Altreus: ^

[13:16] <Altreus> I understood that TWEAK did stuff after all that is set up

[13:16] <timotimo> yes, but "all that" doesn't include assigning to the private attributes ;)

[13:17] <Altreus> Is there a better place? I want the default mechanisms and then I want to do stuff after

[13:17] <timotimo> tweak is the right place for that

[13:17] <Altreus> waaaaaaaaaaaaait does p6 come with Moose's after built in

[13:17] <Altreus> ok I'll add those

[13:17] <timotimo> i'm not entirely sure what moose's after does exactly

[13:17] <Altreus> just seems like boilerplate and I'm allergic to that

[13:17] <Altreus> it takes the same arguments as the existing sub, and runs after the existing sub is finished

[13:18] <timotimo> if you don't want to add it, you can make your attributes public

[13:18] <Altreus> as a perl developer I have no issue with doing that :)

[13:18] <timotimo> i don't think we have that

[13:18] *** zakharyas joined
[13:18] <Altreus> it's just meta-object munging really

[13:19] <timotimo> you can use "wrap" or protos or other mechanisms to get the same effect

[13:19] <Altreus> oh I've just understood what you meant - there exists no default mechanism to put named arguments into private attributes in the first place

[13:19] <timotimo> that's right

[13:19] <Altreus> thanks, totally with you now

[13:19] <Altreus> :D

[13:21] <Altreus> I just understood the message too

[13:21] <Altreus> it's a "type object"

[13:22] <Altreus> I forgot they existed

[13:22] <Altreus> this isn't just a penny dropping, this is like those 2p machines at the arcade where one penny drops and it pushes all the other ones off the ledge

[13:22] *** Pheix joined
[13:23] *** skids joined
[13:23] *** phdphil left
[13:24] <timotimo> oh, you may also want to put an ! after the :$!token and :$!cro-conn to make it mandatory to pass them

[13:24] *** SyrupThinker joined
[13:24] *** HaraldJoerg left
[13:25] <timotimo> alternatively give them a default value that's just 'die "helpful error message"', i think that works, too

[13:25] <Altreus> I made them public because I couldn't see a reason not to

[13:25] <timotimo> m: class Foo { submethod TWEAK(:$foo = die "please pass foo") { } }; Foo.new()

[13:25] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´please pass foo‚ê§  in submethod TWEAK at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:26] <timotimo> m: class Foo { submethod TWEAK(:$foo = die "please pass foo") is hidden-from-backtrace { } }; Foo.new()

[13:26] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´please pass foo‚ê§  in submethod TWEAK at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:26] <timotimo> that's fair

[13:26] <timotimo> in that case you can put "is required" after the attribute

[13:26] <timotimo> that'll also give a good error message

[13:26] <Altreus> I have that on API::Discord itself :)

[13:26] <Altreus> but yes

[13:26] <timotimo> OK

[13:26] <Altreus> explicit constraints are best

[13:27] <Xliff> timotimo: Is he using a subclass?

[13:27] *** Pheix left
[13:27] <timotimo> no, they are both just derived from Any

[13:28] <Xliff> OK, why not just use submethod BUILD for those classes. Does the same thing as TWEAK, really.

[13:28] <Xliff> TMTOWTDI

[13:28] <timotimo> that will throw out default values for attributes and "is required" and others

[13:29] <Xliff> AH. OK.

[13:34] *** scimon left
[13:34] *** scimon joined
[13:36] <Altreus> I have working stuff!!! \o/

[13:36] <Altreus> thanks timotimo :)

[13:36] <timotimo> YW

[13:36] <Altreus> I'll ask you directly in future xD

[13:36] <timotimo> haha

[13:36] <Altreus> I jest

[13:36] <Altreus> I'll also bug j-nthn

[13:36] <Altreus> :

[13:36] <Altreus> :D

[13:36] <Altreus> ok, fever dream over. Back to perl5 catalyst

[13:36] *** MilkmanDan left
[13:39] *** MilkmanDan joined
[13:43] *** HaraldJoerg joined
[13:47] <tyil> .tell jmerelo I dont have any fancey apps other than signal on my phone for communication

[13:47] <yoleaux> tyil: I'll pass your message to jmerelo.

[13:51] *** xtreak joined
[13:55] *** spycrab0 left
[14:07] *** curan left
[14:08] *** sno left
[14:09] *** rindolf joined
[14:09] *** jeromelanteri left
[14:14] *** psychoslave left
[14:15] *** sauvin left
[14:16] *** sno joined
[14:28] *** wamba left
[14:29] *** sno left
[14:40] *** enheh joined
[14:41] *** zakharyas left
[14:45] *** sjn joined
[14:48] *** xtreak left
[14:48] *** Zoffix joined
[14:48] <Zoffix> .

[14:48] <yoleaux> 07:48Z <lizmat> Zoffix: " commits in checkouts of 5 repos: Rakudo, NQP, Docs, and Roast"   I think you forgot to mention Moar in this list

[14:48] <yoleaux> 07:49Z <lizmat> Zoffix: or was that intentional ?

[14:49] <Zoffix> lizmat: no, it's 2AM typing :P Fixed.

[14:49] <Zoffix> Can't believe I left out MoarVM while writing about a bug where I left out MoarVM /o\

[14:50] <lizmat> yeah, that's why I wondered if it was intentional  :-)

[14:52] *** markoong joined
[14:57] <Zoffix> .tell jjmerelo you can tell that person that we don't have any volunteers with available system to build 32-bit builds and that their best bet is to try building from source using instructions here: https://rakudo.org/files/rakudo/source

[14:57] <yoleaux> Zoffix: I'll pass your message to jjmerelo.

[14:59] <El_Che> What's the context? I have ubuntu 32-bit packages if that suffices

[14:59] <El_Che> .tell jmerelo: Zoffix: What's the context? I have ubuntu 32-bit packages if that suffices

[14:59] <yoleaux> El_Che: What kind of a name is "jmerelo:"?!

[15:00] <El_Che> .tell jmerelo Zoffix: What's the context? I have ubuntu 32-bit packages if that suffices

[15:00] <yoleaux> El_Che: I'll pass your message to jmerelo.

[15:00] <lizmat> El_Che: it's about https://stackoverflow.com/questions/51190068/where-is-rakudo-x86-32-bit

[15:00] <Zoffix> El_Che: context http://colabti.org/irclogger/irclogger_log/perl6?date=2018-07-05#l255

[15:00] <Zoffix> I guess now I see the person is asking for Linux too

[15:00] <El_Che> I see

[15:01] <El_Che> the question is wrong (as rakudo releases are tested against 32-bit ubuntu)

[15:03] *** koto joined
[15:05] *** sena_kun left
[15:05] <El_Che> lizmat, Zoffix: answered, thx for the info

[15:06] <lizmat> yw 

[15:08] *** domidumont left
[15:09] <Zoffix> El_Che++

[15:09] *** Zoffix left
[15:13] *** vike1 joined
[15:15] *** psychoslave_ joined
[15:17] *** kini joined
[15:20] *** lizmat left
[15:22] *** jmerelo joined
[15:23] *** lizmat joined
[15:23] *** mcmillhj left
[15:24] <jmerelo> squashable6: status

[15:24] <yoleaux> 13:47Z <tyil> jmerelo: I dont have any fancey apps other than signal on my phone for communication

[15:24] <squashable6> jmerelo, ‚ö†üçï Next SQUASHathon in ‚âà18 hours (2018-07-07 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:24] <yoleaux> 15:00Z <El_Che> jmerelo: Zoffix: What's the context? I have ubuntu 32-bit packages if that suffices

[15:24] *** Pheix joined
[15:24] <jmerelo> .tell El_Che no idea. All context is in the StackOverflow question

[15:24] <yoleaux> jmerelo: I'll pass your message to El_Che.

[15:24] <El_Che> .

[15:24] <yoleaux> 15:24Z <jmerelo> El_Che: no idea. All context is in the StackOverflow question

[15:25] <El_Che> .tell jmerelo thx

[15:25] <yoleaux> El_Che: I'll pass your message to jmerelo.

[15:25] <jmerelo> El_Che: :-)

[15:25] <yoleaux> 15:25Z <El_Che> jmerelo: thx

[15:25] <Xliff> Has anyone managed to build Inline::Perl5 in Windows?

[15:27] *** Pheix left
[15:27] *** Pheix joined
[15:28] *** mcmillhj joined
[15:29] *** Pheix2 joined
[15:30] *** xtreak joined
[15:31] *** jjmerelo joined
[15:32] *** Pheix left
[15:32] *** donaldh left
[15:33] *** jmerelo left
[15:33] *** Pheix2 left
[15:40] *** sno joined
[15:40] *** fake_space_whale joined
[15:49] *** zakharyas joined
[15:51] *** scimon left
[15:58] *** dogbert17 joined
[16:02] <AlexDaniel> squashable6: next

[16:02] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in ‚âà17 hours (2018-07-07 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[16:06] *** Zoffix joined
[16:07] <Zoffix> Xliff: that type of questions aren't very answerable.

[16:07] <Zoffix> Are you having problems? What's the issue?

[16:07] <Zoffix> Xliff: there's an open Issue about Windows builds: "Warnings and END exceptions on Win10": https://github.com/niner/Inline-Perl5/issues/115

[16:13] *** tso|notso left
[16:17] *** mcmillhj left
[16:18] *** mcmillhj joined
[16:23] *** mcmillhj left
[16:23] *** psychoslave_ left
[16:27] <SmokeMachine> m: my @a = ({ a => 1}, { a => 2}); @a.classify(*<a>).gist.say

[16:27] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´{1 => [{a => 1}], 2 => [{a => 2}]}‚ê§¬ª

[16:28] <SmokeMachine> Xliff: ^^

[16:29] *** fake_space_whale left
[16:30] <Xliff> SmokeMachine++

[16:34] *** mcmillhj joined
[16:35] *** spycrab0 joined
[16:37] *** dogbert17 left
[16:38] *** stmuk_ joined
[16:39] *** mcmillhj left
[16:40] *** stmuk left
[16:41] *** dogbert17 joined
[16:41] *** psychoslave joined
[16:41] *** dakkar left
[16:41] <SmokeMachine> is there something like this:

[16:41] <SmokeMachine> m: say ("a", "b", "c").reduce: -> %agg, $a --> Hash() { (|%agg, $a => 1) }, :initial{}

[16:41] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Type check failed in binding to parameter '%agg'; expected Associative but got Str ("a")‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:41] <SmokeMachine> meaning some thing like this?

[16:41] <SmokeMachine> m: say ({}, "a", "b", "c").reduce: -> %agg, $a --> Hash() { (|%agg, $a => 1) }

[16:41] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´{a => 1, b => 1, c => 1}‚ê§¬ª

[16:42] *** sno left
[16:43] *** sauvin_ joined
[16:43] *** psychoslave left
[16:45] *** sauvin_ left
[16:50] <Zoffix> m: say <a b c c c>.Set.Hash

[16:50] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´{a => True, b => True, c => True}‚ê§¬ª

[16:50] <Zoffix> .oO( close enough... )

[16:50] *** mcmillhj joined
[16:51] *** mcmillhj left
[16:51] <Zoffix> m: say (<a b c c c>.SetHash.keys ¬´=>¬ª 1).Hash

[16:51] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´{a => 1, b => 1, c => 1}‚ê§¬ª

[16:51] <SmokeMachine> Zoffix: I mean the `:initial`

[16:52] <Zoffix> SmokeMachine: the way you wrote it the second time? :)

[16:54] <Zoffix> m: sub in-reduce (:$initial, \stuff) { (|(:$initial with $initial), |stuff).reduce: -> %agg, $a --> Hash() { (|%agg, $a => 1) } }; dd in-reduce <a b c>, :initial{}

[16:54] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot put required parameter stuff after variadic parameters‚ê§at <tmp>:1‚ê§------> 3sub in-reduce (:$initial, \stuff7‚èè5) { (|(:$initial with $initial), |stuff)‚ê§    expecting any of:‚ê§        ‚Ä¶¬ª

[16:54] <Zoffix> m: sub in-reduce (\stuff, :$initial) { (|(:$initial with $initial), |stuff).reduce: -> %agg, $a --> Hash() { (|%agg, $a => 1) } }; dd in-reduce <a b c>, :initial{}

[16:54] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Type check failed in binding to parameter '%agg'; expected Associative but got List ($(:initial(${}), :a(1)))‚ê§  in sub in-reduce at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:54] <SmokeMachine> I meant `@a.reduce(&bla, :$initial)` mean `[$initial, |@a].reduce(&bla)`

[16:54] *** mcmillhj joined
[16:55] <Zoffix> SmokeMachine: no, there's no :initial argument to reduce. Just stick it as the first value, as you have it above

[16:55] <SmokeMachine> Zoffix: ok

[16:56] <Zoffix> m: sub in-reduce (\stuff, :$initial) { (|($initial with $initial), |stuff).reduce: -> %agg, $a --> Hash() { (|%agg, $a => 1) } }; dd in-reduce <a b c>, :initial{}

[16:56] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Type check failed in binding to parameter '%agg'; expected Associative but got Str ("a")‚ê§  in sub in-reduce at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:56] <Zoffix> meh

[16:56] *** Zoffix left
[17:04] *** sjn_ joined
[17:05] <Xliff> SmokeMachine: Actually, that's really close, but I want it to map to the actual object, not an array.

[17:05] <Xliff> m: my @a = ({ a => 1}, { a => 2}); @a.classify(*<a>).flat.gist.say

[17:05] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´(1 => [{a => 1}] 2 => [{a => 2}])‚ê§¬ª

[17:06] <Xliff> It's actually better to do that without classify if you are just trying to convert an array to a hash with an identifier.

[17:07] *** zakharyas left
[17:08] <Xliff> m: my @a = ({ a => 1}, { a => 2}); @a.classify(*<a>).map({ $_.key => $_.value[0] }).gist.say

[17:08] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´(1 => {a => 1} 2 => {a => 2})‚ê§¬ª

[17:08] <Xliff> SmokeMachine: ^^ That. One map as opposed to a classify call.

[17:08] *** zakharyas joined
[17:23] *** sjn_ left
[17:23] *** sno joined
[17:33] *** xtreak left
[17:53] *** sno left
[17:54] *** sjn_ joined
[18:05] *** dakkar joined
[18:13] <lizmat> do we have any recommendations for https://www.reddit.com/r/perl6/comments/8wc0nf/which_books_should_a_novice_read_to_understand/ ?

[18:21] *** zachk joined
[18:22] *** zachk left
[18:22] *** zachk joined
[18:22] *** jjmerelo left
[18:22] <moritz> I hope jnthn++ has some ideas

[18:22] <yoleaux> 4 Jul 2018 15:32Z <lizmat> moritz: https://perl6book.com doesn't show "Parsing with Perl 6 Regexes and Grammars" ?

[18:22] <yoleaux> 4 Jul 2018 15:34Z <lizmat> moritz: well, at least in the graph  :-)

[18:22] <yoleaux> 4 Jul 2018 16:27Z <tbrowder_> moritz: don‚Äôt see that book on perl6.org/resources either

[18:23] * moritz terrible at marketing, it seems

[18:26] <AlexDaniel> squashable6: next

[18:26] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in ‚âà15 hours (2018-07-07 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[18:29] *** sjn_ left
[18:29] *** sjn_ joined
[18:31] <moritz> lizmat: thanks; I've updated https://perl6book.com/ to explain why it's not in the graph

[18:32] <lizmat> moritz: Available for preorder; ETA November/December 2017

[18:32] <lizmat> I think that status has changed ?

[18:32] <moritz> yes :)

[18:33] <lizmat> also, I think the status of Migrating to Perl 6 is premature: afaik, November 2018 is the earliest, I'm told by the author

[18:35] <moritz> updated again, thanks

[18:35] *** psychoslave joined
[18:36] <lizmat> moritz: yw

[18:37] <Geth> ¬¶ perl6.org: e909d577e7 | (Moritz Lenz)++ | source/resources/index.html

[18:37] <Geth> ¬¶ perl6.org: Add parsing book to resources, tbrowder++

[18:37] <Geth> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/e909d577e7

[18:42] *** sno joined
[18:44] <lizmat> weekly: http://brrt-to-the-future.blogspot.com/2018/07/perl-6-on-moarvm-has-had-jit-for-few.html

[18:44] <notable6> lizmat, Noted!

[18:48] <masak> brrt++ # a very nice post

[18:49] <masak> brrt: s/inlinig/inlining/

[18:49] <El_Che> I take away that the lingo (spesh) may confuse the audience

[18:51] <masak> I dunno, the JIT backend is still called "jit", so I'm not sure why there is confusion

[18:51] <sjn_> yeah, nice post. brrt++

[18:51] <timotimo> we have spesh even on platforms we don't have "a jit" for, though

[18:53] <lizmat> yeah, because spesh is CPU independent, no ?

[18:53] <timotimo> that's right

[18:53] <El_Che> lizmat: it's speshial

[18:53] <timotimo> it could react to different architectures with slight tuning, for example, but it doesn't do that yet, and it might not be worth trying for a long time

[18:54] <lizmat> so if someone would decide to spend the time to support JIT on ARM, that would be able to use spesh just as much, right ?

[18:54] <timotimo> i suppose

[18:54] <timotimo> jit without spesh isn't worth very much

[18:55] <buggable> New CPAN upload: Hash-with-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Hash-with-0.0.1.tar.gz

[19:02] *** cozachk joined
[19:05] *** zachk left
[19:12] *** zakharyas left
[19:18] *** vrurg joined
[19:18] *** vrurg left
[19:18] *** vrurg joined
[19:23] <vrurg> Hi all! I wonder if atomic operators are planned but not yet implemented in rakudo? I can't easily google this info.

[19:25] <moritz> vrurg: have you seen https://docs.perl6.org/type/atomicint ?

[19:26] *** koto left
[19:26] *** koto joined
[19:27] <vrurg> moritz: Yes. It documents the existence of ‚öõÔ∏é-ops but no word on "not yet implemented in".

[19:27] <vrurg> p6: my atomicint $c ‚öõÔ∏é=1; $c‚öõÔ∏é++;

[19:27] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Confused‚ê§at <tmp>:1‚ê§------> 3my atomicint $c7‚èè5 ‚öõÔ∏é=1; $c‚öõÔ∏é++;‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§        statement modifier‚ê§   ‚Ä¶¬ª

[19:30] <moritz> m: my atomicint $active = 0;

[19:30] <camelia> rakudo-moar ade83c861: ( no output )

[19:30] *** enheh left
[19:30] <moritz> m: my atomicint $active = 0; $active‚öõ++;

[19:30] <camelia> rakudo-moar ade83c861: ( no output )

[19:30] <moritz> vrurg: it's implemented :)

[19:31] <moritz> stuff that is on docs.perl6.org is generally implemented, unless stated otherwise

[19:31] <vrurg> Mine is: This is Rakudo version 2018.06 built on MoarVM version 2018.06

[19:31] *** robertle_ joined
[19:31] <vrurg> Same output as from camelia.

[19:32] <vrurg> m: my atomicint $c ‚öõÔ∏é=1; $c‚öõÔ∏é++;

[19:32] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Confused‚ê§at <tmp>:1‚ê§------> 3my atomicint $c7‚èè5 ‚öõÔ∏é=1; $c‚öõÔ∏é++;‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§        statement modifier‚ê§   ‚Ä¶¬ª

[19:32] <moritz> vrurg: doesn't make much senes to use ‚öõÔ∏é in an initializer

[19:32] <vrurg> my atomicint $c =1; $c‚öõÔ∏é++;

[19:32] <moritz> vrurg: if you want to see if something works at all, start by copy&pasting the examples from the docs

[19:32] <vrurg> moritz: whatever. It fails later, on increment. 

[19:33] <vrurg> p6: my atomicint $c = 1; $c‚öõÔ∏é++;

[19:33] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Bogus postfix‚ê§at <tmp>:1‚ê§------> 3my atomicint $c = 1; $c7‚èè5‚öõÔ∏é++;‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§        statement modifier‚ê§   ‚Ä¶¬ª

[19:34] <moritz> why did my example work then?

[19:34] *** koto left
[19:34] *** koto joined
[19:35] <vrurg> Damn, different codepoints, it seems. That's confusing...

[19:35] <moritz> .u ‚öõÔ∏é

[19:35] <yoleaux> U+269B ATOM SYMBOL [So] (‚öõ)

[19:35] <yoleaux> U+FE0E VARIATION SELECTOR-15 [Mn] (‚óåÔ∏é)

[19:35] <moritz> .u ‚öõ

[19:35] <yoleaux> U+269B ATOM SYMBOL [So] (‚öõ)

[19:36] * moritz has never seen a VARIATION SELECTOR before

[19:36] *** dct_ joined
[19:37] *** mcmillhj left
[19:38] <geekosaur> some clients use them to distinguish char-as-emoji from char-as-symbol

[19:39] <vrurg> I took mine from macos char palette. It was the only it found by 'atom' request. This is where variation comes from.

[19:39] *** mcmillhj joined
[19:40] *** mcmillhj left
[19:40] <moritz> then maybe the grammar should ignore those

[19:40] *** koto left
[19:40] *** koto joined
[19:41] <vrurg> moritz: That's be the best. The variation looks even better in terminal where it doesn't have the magenta box around it.

[19:44] *** mcmillhj joined
[19:44] <AlexDaniel> vrurg: can you file a ticket?

[19:44] <AlexDaniel> huggable: rakudobug

[19:44] <huggable> AlexDaniel, Report bugs on https://github.com/rakudo/rakudo/issues/new    If you don't have access to GitHub, you can email your report to [email@hidden.address] . See also: https://github.com/rakudo/rakudo/wiki/rt-introduction

[19:46] <vrurg> AlexDaniel: Sure.

[19:46] <vrurg> Was playing with it. Looks like there is no easy way to insert the symbol without the variation in macOS.

[19:48] *** koto left
[19:49] *** koto joined
[19:51] <AlexDaniel> vrurg: also: https://github.com/perl6/doc/issues/2150

[19:52] <AlexDaniel> m: say ‚Äò‚öõÔ∏é‚Äô.chars

[19:52] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´1‚ê§¬ª

[19:53] <moritz> m: say '‚öõÔ∏é'.codes

[19:53] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´2‚ê§¬ª

[19:56] <AlexDaniel> samcv: what's the easiest way to match ‚öõ with variation selectors?

[19:56] <AlexDaniel> samcv: ignoremark is probably too permissive

[19:58] <AlexDaniel> samcv: oh, is it what Default_Ignorable_Code_Point is for?

[19:58] <AlexDaniel> u: { .uniprop(‚ÄòDefault_Ignorable_Code_Point‚Äô).so }

[19:58] <unicodable6> AlexDaniel, U+00AD SOFT HYPHEN [Cf] (control character)

[19:58] <unicodable6> AlexDaniel, U+034F COMBINING GRAPHEME JOINER [Mn] (¬†Õè)

[19:58] <unicodable6> AlexDaniel, 404 characters in total: https://gist.github.com/b980132704b1bbeaf62a049ff4a000ed

[19:59] <AlexDaniel> u: { .uniprop(‚ÄòDefault_Ignorable_Code_Point‚Äô) and .uniprop eq ‚ÄòMn‚Äô }

[19:59] <unicodable6> AlexDaniel, U+034F COMBINING GRAPHEME JOINER [Mn] (¬†Õè)

[19:59] <unicodable6> AlexDaniel, U+17B4 KHMER VOWEL INHERENT AQ [Mn] (¬†·û¥)

[19:59] <unicodable6> AlexDaniel, 262 characters in total: https://gist.github.com/d4354b0401f322d648e354832122c4e6

[20:00] <vrurg> AlexDaniel: https://github.com/rakudo/rakudo/issues/2030

[20:00] <AlexDaniel> vrurg: thanks

[20:03] <vrurg> AlexDaniel: np

[20:07] *** psychoslave left
[20:10] <Xliff> Will this resolve properly --> @one-or-none.one || @one-or-none.none;

[20:10] <Xliff> Or do I need...

[20:10] <Xliff> (so @one-or-none.one) || (so @one-or-none.none)

[20:10] <Xliff> I would prefer the former.

[20:11] <moritz> @one-or-none.one is in boolean context, so doesn't see a so()

[20:11] <Xliff> m: my @one = (0, 0, 1); say (@one.one || @one.none)

[20:11] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´one(0, 0, 1)‚ê§¬ª

[20:11] <Xliff> moritz: Is that a yes or a no? ;)

[20:12] <moritz> Xliff: the first oen doesn't need a so()

[20:12] <Xliff> But the second one does?

[20:12] <moritz> Xliff: for the second, it only needs one if you don't evaluate it in a boolean context

[20:12] <moritz> m: my @one = (0, 0, 1); say (@one.one || @one.none.so)

[20:12] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´one(0, 0, 1)‚ê§¬ª

[20:12] <moritz> if you use the method form, you can ditch a pair of parenthesis

[20:13] <Xliff> m: my @one = (0, 0, 1); if @one.one || @one.none.so { say "Hey!" };

[20:13] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Hey!‚ê§¬ª

[20:13] <Xliff> m: my @one = (0, 0, 0); if @one.one || @one.none.so { say "Hey!" };

[20:13] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Hey!‚ê§¬ª

[20:13] <Xliff> m: my @one = (2, 3, 0); if @one.one || @one.none.so { say "Hey!" };

[20:13] <camelia> rakudo-moar ade83c861: ( no output )

[20:13] <Xliff> m: my @one = (2, 3, 0); if @one.one || @one.none { say "Hey!" };

[20:13] <camelia> rakudo-moar ade83c861: ( no output )

[20:14] <Xliff> m: my @one = (0, 3, 0); if @one.one || @one.none { say "Hey!" };

[20:14] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Hey!‚ê§¬ª

[20:14] <Xliff> m: my @one = (0, 0, 0); if @one.one || @one.none { say "Hey!" };

[20:14] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´Hey!‚ê§¬ª

[20:14] <Xliff> So the answer is: "Yes." ;)

[20:17] *** hahainternet is now known as hugedictionary

[20:17] <AlexDaniel> m: my @f = (0, 0, 0); say so any @f.one, @f.none

[20:17] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´True‚ê§¬ª

[20:17] <AlexDaniel> m: my @f = (0, 1, 0); say so any @f.one, @f.none

[20:17] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´True‚ê§¬ª

[20:17] <AlexDaniel> m: my @f = (1, 1, 0); say so any @f.one, @f.none

[20:17] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´False‚ê§¬ª

[20:17] <moritz> Xliff: the "if" puts it into boolean context, yes

[20:17] <AlexDaniel> Xliff: ‚Üë good for code obfuscation contests :)

[20:18] *** hugedictionary is now known as hahainternet

[20:18] <AlexDaniel> actually, `all` is missing

[20:18] <AlexDaniel> m: my @f = (1, 1, 0); say so all any @f.one, @f.none

[20:18] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´False‚ê§¬ª

[20:18] <AlexDaniel> m: my @f = (1, 0, 0); say so all any @f.one, @f.none

[20:18] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´True‚ê§¬ª

[20:19] <AlexDaniel> :)

[20:21] <Xliff> AlexDaniel: Are you trying to get me committed?

[20:22] <Xliff> Oh wait...

[20:22] <Xliff> Maybe I should be. 

[20:22] * Xliff goes to do "git commit -a"

[20:22] *** pmurias joined
[20:24] *** benjikun2 joined
[20:25] <samcv> AlexDaniel: i would just have it be /\x[FE0E]?/ after the atomic symbol

[20:25] <samcv> since we only want this specific codepoint specific to emoji

[20:27] *** benjikun left
[20:27] <AlexDaniel> samcv: but that won't work, right?

[20:27] *** psychoslave joined
[20:27] <AlexDaniel> so it would have to be [‚Äò‚öõ‚Äô|‚Äò‚öõÔ∏é‚Äô]

[20:28] <AlexDaniel> or [‚Äò‚öõ‚Äô|‚Äú‚öõ\xFE0E‚Äù]

[20:28] <AlexDaniel> samcv: but why is this specific codepoint special? there are 256 variation selectors, are there any limitations for their use?

[20:30] <hobbs> AlexDaniel: http://unicode.org/reports/tr51/#Emoji_Variation_Sequences

[20:31] <hobbs> (yes, it's pretty awful)

[20:34] <moritz> AlexDaniel: could be [:ignoremark ‚Äò‚öõ‚Äô] or so, maybe

[20:34] <hobbs> AlexDaniel: and http://unicode.org/emoji/charts/emoji-variants.html for illustration of what it's supposed to do

[20:34] <AlexDaniel> geez why not name it ‚Äútext variation selector‚Äù

[20:35] <AlexDaniel> moritz: but that will ignore all kinds of Extend (and probably Prepend) characters

[20:35] <AlexDaniel> moritz: so all combining characters and other stuff

[20:36] <AlexDaniel> samcv++ is right, this particular variation selector should be special-cased‚Ä¶

[20:36] <AlexDaniel> hobbs++

[20:36] <AlexDaniel> hobbs: but why 15

[20:36] <AlexDaniel> :)

[20:36] <hobbs> 15 and 16 are the last two, I'm guessing they assumed that anyone who used the selectors for other reasons started at 1 and worked their way up :)

[20:37] <AlexDaniel> hobbs: well, not exactly the last two as of today

[20:39] <hobbs> well okay. 

[20:40] <hobbs> the last two that are only three bytes of UTF-8, though :)

[20:45] <pmurias> the graalvm/truffle NQP backend now passes 13 tests :)

[20:46] <AlexDaniel> pmurias: \o/ that sounds great, is there a list of the passed tests somewhere?

[20:46] <MasterDuke> pmurias++

[20:47] <MasterDuke> pmurias: btw, how easy will it be to implement ops that need the tc passed in?

[20:48] <MasterDuke> AlexDaniel: https://github.com/perl6/nqp/blob/truffle/src/vm/jvm/bin/run_tests.pl#L12

[20:49] <AlexDaniel> MasterDuke: so test *files*, not just tests?

[20:50] <pmurias> AlexDaniel: yes, 13 test files :)

[20:50] * AlexDaniel underestimated the progress but was still impressed

[20:50] <pmurias> MasterDuke: depends on the tests

[20:52] <pmurias> MasterDuke: a lot of the tc using stuff are things that we want to replace with new truffle specific stuff

[20:55] *** kjk joined
[20:58] <MasterDuke> pmurias: huh. any intuition which/what?

[21:00] <samcv> AlexDaniel: yes you are correct that variation selector is specific (afaik) to emoji. well at *minimum* after an emoji it has only one meaning

[21:00] <samcv> so it's not ambiguous in that context

[21:02] <pmurias> MasterDuke: depends on the stuff, for objects I guess we want to use http://ssw.jku.at/General/Staff/Daloze/thread-safe-objects.pdf

[21:02] <AlexDaniel> samcv: hmm https://github.com/rakudo/rakudo/issues/2031

[21:03] <samcv> anyone have ubuntu? can you tell me if llvm-profdata is a valid command?

[21:03] <samcv> and if so where it's located? for those who have ubuntu. if you have debian that may be helpful too

[21:03] <samcv> also what version you are on

[21:04] <AlexDaniel> samcv: fwiw I don't know if this ticket is reasonable at all

[21:05] <El_Che> samcv: root@716310e078aa:/# llvm-profdata

[21:05] <El_Che> llvm-profdata: No command specified!

[21:05] <El_Che> USAGE: llvm-profdata <merge|show> [args...]

[21:05] <AlexDaniel> samcv: https://gist.github.com/AlexDaniel/024b4e0e173ee5bada14d172ceb7816d

[21:05] <El_Che> samcv: you need to install llvm first, but you know that :)

[21:06] <AlexDaniel> samcv: that's under debian btw, but it should be similar in ubuntu

[21:06] <MasterDuke> Command 'llvm-profdata' not found, but can be installed with:  sudo apt install llvm

[21:07] <pmurias> MasterDuke: and for _I bignum ops I think we will want to still the implemantion from graal.js

[21:08] <pmurias> as they have special one that is supposed to work well for truffle

[21:10] <kjk> I use rakudobrew, but every time I build a new version of moar I find that I have to rebuild zef, and re-install all the modules... is there a way to at least avoid re-installing all existing modules?

[21:11] <pmurias> MasterDuke: my mental model how are things going to be implemented is sort of evolving on the fly, I haven't done anything with Truffle before

[21:11] <MasterDuke> pmurias: i was specfically looking at the regular jvm implementation of nqp::x and it has `throw ExceptionHandling.dieInternal(tc, "repeat count (" + count + ") cannot be negative");`

[21:11] <MasterDuke> but i haven

[21:11] <MasterDuke> 't looked at ExceptionHandling.dieInternal() to see what it does

[21:13] <El_Che> kjk: I suppose other install options have less problems with that

[21:14] <MasterDuke> some of the string ops look like they might be relatively straight-forward, except that they throw those exceptions with tc

[21:15] <MasterDuke> kjk: needing to rebuild isn't supposed to be as common after updates now-adays

[21:15] <kjk> El_Che: right, I never actually tried other options...

[21:16] <MasterDuke> kjk: do things not work unless you do, or is rakudobrew doing it automatically?

[21:16] <tyil> anyone on mastodon who would be able to help this person https://mastodon.social/web/statuses/100319358554073262

[21:17] <geekosaur> some rakudobrew update paths update zef and modules, others don't

[21:17] <El_Che> I keep reading "anyone on methadon"

[21:17] <tyil> (or I can post a possible answer to him)

[21:17] <tyil> El_Che: if anyone on methadon can help that'd be ok by me too

[21:17] <tyil> I don't judg

[21:17] <tyil> e

[21:17] <El_Che> :)

[21:18] *** mcmillhj left
[21:18] <kjk> MasterDuke: so, if I rebuild a new version of moar and then switch to it like this: rakudobrew build moar 2018.06 && rakudobrew global moar-2018.06, then zef would be missing, and I'll have to run: rakudobrew build zef,  but then all modules previously installed would also be missing, so I have to zef install them again

[21:18] <El_Che> kjk: what os do you use?

[21:19] <kjk> MacOS

[21:19] <El_Che> homebrew has rakudo star

[21:19] <El_Che> (I am thinking of adding support to monthly rakudo, but haven't had the time)

[21:20] <kjk> El_Che: yeah, just checked, looks like it's stuck at 2018.04 

[21:20] <El_Che> i don't know what the latest star is

[21:21] <El_Che> it's every 3 months, so it could be the latest

[21:21] <AlexDaniel> tyil: so if I want to get on mastodon, should I be setting up my own server (like I already do for Matrix), or should I just sign up on mastodon.social and it'll be just as good?

[21:21] <AlexDaniel> tyil: or if not mastodon.social, then what?

[21:21] <tyil> depends on wheter you trust mastodon.social I guess

[21:21] <tyil> there's other instances, owned by other people

[21:22] <tyil> and you can host one yourself if you prefer that

[21:22] <MasterDuke> kjk: huh. maybe ask tadzik, he's around here

[21:24] <Juerd> m: use Test; like("#", /\#/)

[21:24] <camelia> rakudo-moar ade83c861: OUTPUT: ¬´ok 1 - text matches /\ \#/‚ê§¬ª

[21:24] <Juerd> Where does that extra escaped whitespace come from?

[21:25] <kjk> It looks like zef/ is in the moar-2018.06, maybe if I move it to the new moar vm directory it would just work? hmm ok I'll try that next time

[21:25] <[Coke]> kjk: rakudobrew has some issues and we don't recommend it in general because of issues like this; zoffix has a rebuild script you can use, or you can build from scratch.

[21:25] <[Coke]> I have one that uses rakudobrew, but have a different script to drive it to insure that everything works as I need

[21:26] * [Coke] heads out for a bit

[21:26] <Juerd> Test.pm6 just does $desc = "... $expected.perl()", but using that alone, I can't reproduce the extra space.

[21:27] <kjk> Coke: I see..., I do like the ability to try a new rakudo release when it comes out though, and with rakudobrew it's very easy to do so

[21:30] <tyil> kjk: there's rakudup (iirc), or zoffix's script, or just git pull and update it manually based on the readme

[21:30] <tyil> it's not overly complicated to build manually

[21:32] <kjk> tyil: I see, ok will check those out, thanks

[21:34] <El_Che> ideally, you should push a monthly rakudo for osx, but the fact that rakudo is not relocable makes it a pita

[21:34] <tyil> that really is a pita

[21:34] <El_Che> (e.g. for installing it under the user's applications)

[21:34] <El_Che> s/you/we/

[21:35] <tyil> I'd like it for that to be solved, but iirc it's not a high prio

[21:35] <tyil> it would make packaging for every platform easier I think

[21:35] <El_Che> so you end up with the need for installers instead of a simple pkg

[21:36] *** skids left
[21:37] <tyil> El_Che: that's why I wrote LoneStar

[21:37] <El_Che> tyil: it solves the relocation problem, but not the compilation one

[21:38] <tyil> compilation on itself isn't a problem to me personally, but most users probably don't want to compile

[21:39] <tyil> from my experience, most users think compiling is scary and evil

[21:39] <El_Che> tyil: it is. We live in a Stockholm syndrom :)

[21:39] <tyil> I understand not wanting to compile certain things

[21:39] <tyil> like web browsers, office suits, or most compilers

[21:40] <tyil> but most applications, including the rakudo/moarvm/nqp stack for Perl 6, are relatively fast

[21:41] *** kjk left
[21:46] *** Zoffix joined
[21:46] <Zoffix> Juerd: it's the "poor man's escape" of # chars that are special in TAP

[21:47] <Zoffix> Juerd: by sticking a space in there it avoids having to figure out whether we added enough backslashes (since there might be a backslash up in there already)

[21:48] <MasterDuke> Zoffix: looks like geth is dead in #moarvm

[21:51] <Zoffix> huggable: build

[21:51] <huggable> Zoffix, Alternatives to rakudobrew: 3rd party installers: https://gitlab.com/tyil/lonestar#readme and https://rakudup.github.io/ | 3rd party distro packages: https://rakudo.org/files/rakudo/third-party | Bash alias: https://github.com/zoffixznet/r#table-of-contents

[21:51] <Zoffix> ^ there's a bot command that lists all of these

[21:51] <Zoffix> s: &say

[21:51] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/7a87b7f55/src/core/io_operators.pm6#L10

[21:51] <tyil> oh, I forgot you added that

[21:52] <tyil> Zoffix: is there a page with all huggable commands/definitions

[21:52] *** pmurias left
[21:52] <Zoffix> nope

[21:52] <tyil> could one be generated?

[21:53] <Zoffix> There's this SQLite file: https://temp.perl6.party/factoids-Jul-5-2018.sqlite.db

[21:54] <tyil> time to compile sqlite and cruise through it

[21:54] *** dalek joined
[21:54] *** ChanServ sets mode: +v dalek

[21:54] <tyil> nvm, I already have sqlite

[21:54] *** synopsebot_ joined
[21:54] *** p6lert joined
[21:54] *** Geth joined
[21:54] *** ChanServ sets mode: +v synopsebot_

[21:54] *** ChanServ sets mode: +v Geth

[21:54] <tyil> this is a good start

[21:55] <Juerd> Zoffix: Oh, wow.

[21:57] *** SourceBaby joined
[21:57] *** ChanServ sets mode: +v SourceBaby

[21:57] <MasterDuke> Zoffix++ geth is alive again

[21:58] <tyil> in pod defn blocks, could it be made possible to put the word(s) being defined in the pod's meta attribute? so I can give it a special color in Pod::To::Pager

[21:58] <tyil> I want the defined word(s) to be distinct from the actual definition paragraph that follows it

[21:59] *** mcmillhj joined
[22:03] *** Kaiepi left
[22:04] *** kane joined
[22:04] *** kane is now known as kawaii

[22:04] *** mcmillhj left
[22:04] <tyil> I could make an issue on a repo (which one), SO or ask it on the mailing list if that's a better way to go about it

[22:04] *** wamba joined
[22:06] <Zoffix> tyil: FWIW, the factoids are dynamic and anyone can edit/add them, so if you're making a page, it'll quickly be outdated

[22:07] <Zoffix> buggable: source

[22:07] <buggable> Zoffix, See: https://github.com/zoffixznet/perl6-buggable

[22:07] <Zoffix> something could be implemented to make the bot dump an HTML file

[22:07] <tyil> Zoffix: could we make a script to update some file somewhere to refresh it every day or something?

[22:07] *** kawaii left
[22:07] <Zoffix> buggable: author zoffixznet

[22:07] <buggable> Zoffix, Found 47 dists for zoffixznet. See https://temp.perl6.party/buggable/91553477265891661530828477.html

[22:08] <Zoffix> like this bot does for example

[22:08] <tyil> I could run a local cronjob that issues an commit each day for instance

[22:08] <tyil> or that

[22:08] <tyil> that sounds better :p

[22:08] <Zoffix> buggable: source

[22:08] <buggable> Zoffix, See: https://github.com/zoffixznet/perl6-buggable

[22:08] * Zoffix &

[22:08] *** Zoffix left
[22:08] <tyil> its late now, so I'll look at that source tomorrow

[22:08] <tyil> have to be awake early to get to arnhem on time 

[22:12] <Geth> ¬¶ doc: 058fa3b183 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/pod.pod6

[22:12] <Geth> ¬¶ doc: Clarify what type pod blocks can have configuration data

[22:12] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/058fa3b183

[22:12] <synopsebot_> Link: https://doc.perl6.org/language/pod

[22:15] <lizmat> NLPW schedule: http://www.perlworkshop.nl/nlpw2018/schedule

[22:15] <lizmat> looks like I'm on first  :-)

[22:18] *** mcmillhj joined
[22:19] <Geth> ¬¶ doc: 60e347987f | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/pod.pod6

[22:19] <Geth> ¬¶ doc: Tweak info and formatting

[22:19] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/60e347987f

[22:19] <synopsebot_> Link: https://doc.perl6.org/language/pod

[22:19] *** psychoslave left
[22:20] *** psychoslave joined
[22:21] <Geth> ¬¶ doc: ea9ade5250 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/pod.pod6

[22:21] <Geth> ¬¶ doc: Add emphasis

[22:21] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/ea9ade5250

[22:21] <synopsebot_> Link: https://doc.perl6.org/language/pod

[22:22] *** psychoslave left
[22:22] *** mcmillhj left
[22:22] *** psychoslave joined
[22:28] *** rindolf left
[22:30] *** Kaiepi joined
[22:34] <Geth> ¬¶ Pod-To-HTML: 2cbcf062b4 | (Tom Browder)++ (committed using GitHub Web editor) | lib/Pod/To/HTML.pm

[22:34] <Geth> ¬¶ Pod-To-HTML: Caption is now an attribute

[22:34] <Geth> ¬¶ Pod-To-HTML: 

[22:34] <Geth> ¬¶ Pod-To-HTML: Since late 2017.

[22:34] <Geth> ¬¶ Pod-To-HTML: review: https://github.com/perl6/Pod-To-HTML/commit/2cbcf062b4

[22:35] <AlexDaniel> oh wow, writing tests for sake is fun

[22:36] <AlexDaniel> one of the few times I actually enjoyed TDD :)

[22:36] *** mcmillhj joined
[22:40] *** mcmillhj left
[22:41] *** mcmillhj joined
[22:44] *** vike1 left
[22:48] *** dct_ left
[22:50] *** raynold joined
[22:51] *** vike joined
[23:09] *** HaraldJoerg left
[23:18] *** dakkar left
[23:21] *** benji__ joined
[23:25] *** benjikun2 left
[23:28] *** markoong left
[23:43] *** benjikun joined
[23:45] *** benji__ left
[23:59] *** blackberry9900 joined
