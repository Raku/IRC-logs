[00:00] *** digiwano9 joined
[00:03] *** digiwano9 left
[00:18] *** aborazmeh joined
[00:18] *** aborazmeh left
[00:18] *** aborazmeh joined
[00:18] *** p6bannerbot sets mode: +v aborazmeh

[00:19] *** p6bannerbot sets mode: +v aborazmeh

[00:19] *** lizmat left
[00:23] *** lizmat joined
[00:24] *** p6bannerbot sets mode: +v lizmat

[00:25] *** lucs joined
[00:26] *** p6bannerbot sets mode: +v lucs

[00:28] *** lizmat left
[00:31] <Garland_g[m]> I'm about ready to release the first version of the module I've been calling "Libui" to CPAN. Would it be reasonable to take that slot in the top level namespace, given that it's a binding to a C library of the same name?

[00:42] *** khisanth_ left
[00:45] *** Kaiepi left
[00:47] *** psychoslave joined
[00:48] *** p6bannerbot sets mode: +v psychoslave

[00:48] *** Zoffix joined
[00:48] *** p6bannerbot sets mode: +v Zoffix

[00:48] <Zoffix> Garland_g[m]: yeah

[00:48] <yoleaux> 19 Sep 2018 20:51Z <tony-o> Zoffix: sure enough.  it's used on modules.zef.pm and i could probably integrate it into zef with some work, it would be slow on large repos but at least the functionality would be there i suppose

[00:48] <Zoffix> Garland_g[m]: in theory, you can't really "take" a slot, since multiple authors can use the same module name

[00:49] <Zoffix> (due to :auth<> qualifier on module names specifying whose module you want)

[00:51] <geekosaur> hm, there's a question tough. can I use :as<>?

[00:52] <geekosaur> just in case I want two modules with the same name and different auth or potentially even version (think upgrade scripts, for one)?

[00:52] <Garland_g[m]> Oh, that's cool. I didn't know about that. Thanks, Zoffix.

[00:53] <Zoffix> No idea. I think it's a terrible idea anyway. It's trying to solve a headache (authors calling dibs on good names) by cutting off the head (making :auth<> specifier mandatory if you want proper module name, but no one specifies it anyway and users subject themselves to getting from module names)

[00:54] <Zoffix> *getting wrong modules with just module names

[00:54] *** khisanth_ joined
[00:55] *** p6bannerbot sets mode: +v khisanth_

[00:59] <timotimo> maybe someone has to put a fake JSON::Fast that plays rickroll into the ecosystem to "wake people up" to that :)

[01:00] * daemon waves at Zoffix long time no see :P

[01:00] *** rjbs joined
[01:00] *** markk_ joined
[01:00] *** syntaxman joined
[01:00] *** p6bannerbot sets mode: +v syntaxman

[01:00] *** perlawhirl joined
[01:00] *** krunen joined
[01:00] *** moritz joined
[01:00] *** mst joined
[01:00] *** p6bannerbot sets mode: +v mst

[01:01] * Zoffix doesn't recognize daemon

[01:01] * daemon walks back his corner

[01:01] *** mst left
[01:01] *** mst joined
[01:01] *** livingstone.freenode.net sets mode: +v mst

[01:01] *** p6bannerbot sets mode: +v mst

[01:01] *** go|dfish joined
[01:01] *** p6bannerbot sets mode: +v go|dfish

[01:01] <Zoffix> Unless you were my boss like 10 years ago. eCreate web dev, eh?

[01:01] *** p6bannerbot sets mode: +v rjbs

[01:01] *** p6bannerbot sets mode: +v markk_

[01:01] *** p6bannerbot sets mode: +v perlawhirl

[01:01] *** p6bannerbot sets mode: +v krunen

[01:01] *** p6bannerbot sets mode: +v moritz

[01:01] <daemon> Zoffix, not boss, but a damn long time ago we was doing something might even be openprojects

[01:02] <daemon> or was it POE related

[01:02] * Zoffix doesn't remember

[01:02] <daemon> god damn im going to have to dig out old logs

[01:03] *** leah2 joined
[01:03] *** pierrot joined
[01:03] *** p6bannerbot sets mode: +v pierrot

[01:03] *** p6bannerbot sets mode: +v leah2

[01:04] *** Zoffix left
[01:08] *** kurahaupo joined
[01:08] *** p6bannerbot sets mode: +v kurahaupo

[01:11] *** rindolf left
[01:11] *** brick joined
[01:15] *** brick left
[01:18] *** molaf left
[01:21] *** zakharyas joined
[01:22] *** p6bannerbot sets mode: +v zakharyas

[01:31] *** molaf joined
[01:32] *** p6bannerbot sets mode: +v molaf

[01:32] *** MasterDuke left
[02:09] *** ufobat_ joined
[02:09] *** p6bannerbot sets mode: +v ufobat_

[02:10] *** mahafyi left
[02:11] *** trfl joined
[02:11] *** trfl was kicked by timotimo (trfl))
[02:13] *** ufobat left
[03:09] *** psychoslave left
[03:29] *** vike1 left
[03:33] *** vike1 joined
[03:34] *** p6bannerbot sets mode: +v vike1

[03:34] <buggable> New CPAN upload: Libui-0.0.1.tar.gz by GARLANDG https://cpan.metacpan.org/authors/id/G/GA/GARLANDG/Perl6/Libui-0.0.1.tar.gz

[03:39] *** vike1 left
[03:42] *** vike1 joined
[03:43] *** p6bannerbot sets mode: +v vike1

[04:24] *** molaf left
[04:43] *** cjkinni left
[04:44] *** cjkinni joined
[04:44] *** p6bannerbot sets mode: +v cjkinni

[04:48] *** sno left
[04:54] *** curan joined
[04:54] *** p6bannerbot sets mode: +v curan

[05:23] *** igoryonya joined
[05:24] *** p6bannerbot sets mode: +v igoryonya

[05:25] *** _28_ria joined
[05:26] *** p6bannerbot sets mode: +v _28_ria

[05:26] *** _28_ria left
[05:28] *** igoryonya left
[05:28] *** newbie51 joined
[05:29] *** newbie51 left
[05:29] *** kensanata joined
[05:29] *** p6bannerbot sets mode: +v kensanata

[05:29] *** newbie51 joined
[05:30] *** p6bannerbot sets mode: +v newbie51

[05:34] *** newbie51 left
[05:40] *** aborazmeh left
[05:42] *** xinming_ is now known as xinming

[06:08] *** newbie53 joined
[06:08] *** p6bannerbot sets mode: +v newbie53

[06:17] *** robertle joined
[06:18] *** p6bannerbot sets mode: +v robertle

[06:18] <El_Che> .tell lizmat You have a comment on your second p5-6 article https://opensource.com/article/18/8/garbage-collection-perl-6

[06:18] <yoleaux> El_Che: I'll pass your message to lizmat.

[06:19] <El_Che> .tell lizmat And an error in the 3rd (p5: say @bar[1]) https://opensource.com/article/18/8/containers-perl-6

[06:19] <yoleaux> El_Che: I'll pass your message to lizmat.

[06:34] *** sno joined
[06:35] *** p6bannerbot sets mode: +v sno

[06:38] *** robertle left
[06:38] *** sno left
[06:50] *** psychoslave joined
[06:50] *** p6bannerbot sets mode: +v psychoslave

[06:54] *** newbie53 left
[06:54] *** newbie53 joined
[06:55] *** p6bannerbot sets mode: +v newbie53

[06:55] *** newbie53 left
[07:05] <kensanata> Is there a blog post somewhere detailing best practice regarding the use of directories? As I'm writing, I'm running into annoying errors again and again. "Died with the exception: Failed to get the directory contents of 'XXX': Failed to open dir: 2" There's no source file or line so I have to hunt for uses of XXX. Specially since I know it doesn't exist.

[07:09] <moritz> kensanata: try adding a 'use fatal;' to your program

[07:09] <moritz> then the failure becomes an exception immediately

[07:09] <moritz> (it's lexically scoped, so you can limit its impact)

[07:09] <kensanata> Cool, will try.

[07:09] <moritz> no blog post for you though, sorry :-)

[07:14] <kensanata> :)

[07:17] <kensanata> Sadly, this didn't help me locate the error. Does anybody know how to print log statements from a Cro service?

[07:20] *** domidumont joined
[07:21] *** p6bannerbot sets mode: +v domidumont

[07:23] *** rindolf joined
[07:23] *** p6bannerbot sets mode: +v rindolf

[07:26] *** hankache joined
[07:26] *** lizmat joined
[07:27] *** p6bannerbot sets mode: +v hankache

[07:27] *** p6bannerbot sets mode: +v lizmat

[07:28] <hankache> Hello #perl6

[07:28] <yoleaux> 16 Sep 2018 15:34Z <b2gills> hankache: `abs` is specifically caught by the parser, and the `use isms;` disables the parser from catching it

[07:28] <hankache> .seen b2gills

[07:28] <yoleaux> I saw b2gills 16 Sep 2018 15:34Z in #perl6: <b2gills> .tell hankache  `abs` is specifically caught by the parser, and the `use isms;` disables the parser from catching it

[07:30] <hankache> .tell b2gills thanks mate. But shouldn't the parser catch all occurrences? Why did it only catch abs?

[07:30] <yoleaux> hankache: I'll pass your message to b2gills.

[07:40] *** dakkar joined
[07:41] *** p6bannerbot sets mode: +v dakkar

[07:48] *** phryk20 joined
[07:51] *** phryk20 left
[07:58] *** araujo left
[08:05] *** leont joined
[08:05] *** p6bannerbot sets mode: +v leont

[08:15] *** newbie joined
[08:15] *** p6bannerbot sets mode: +v newbie

[08:16] *** newbie87 joined
[08:17] *** p6bannerbot sets mode: +v newbie87

[08:19] *** newbie left
[08:21] *** newbie87 left
[08:39] *** dakkar left
[08:39] *** dakkar joined
[08:40] *** p6bannerbot sets mode: +v dakkar

[08:43] *** labster left
[08:47] *** ab5tract_ joined
[08:47] *** p6bannerbot sets mode: +v ab5tract_

[08:47] <ab5tract_> o/ #perl6

[08:47] <tyil> \o

[08:48] <ab5tract_> lizmat: do you ever recall any discussion of an operator for the QuantHash types that will actually remove elements?

[08:48] <ab5tract_> i'm working on the docs for the quanters but found this dichotomy a bit jarring:

[08:49] <ab5tract_> m: my $available = <Harry Voldemort Horcrux Horcrux Horcrux>.Set; dd my @fillable-orders = <Owl Horcrux Wand>.grep: * ∈ $available;

[08:49] <camelia> rakudo-moar 16ce9c89a: OUTPUT: «Array @fillable-orders = ["Horcrux"]␤»

[08:50] <lizmat> ab5tract_: .grab ?

[08:50] <ab5tract_> m: my $available = <Harry Voldemort Horcrux Horcrux Horcrux>.BagHash; dd my @fillable  = <Horcrux Horcrux Horcrux Horcrux>.grep: { --$available{$_} };

[08:50] <camelia> rakudo-moar 16ce9c89a: OUTPUT: «Array @fillable = ["Horcrux", "Horcrux"]␤»

[08:51] <ab5tract_> ooo

[08:51] <ab5tract_> nice. it could be interesting to offer that as in infix though :)

[08:51] <lizmat> I think that would be module space, at least for now

[08:52] <ab5tract_> fair enough :)

[08:53] <ab5tract_> hmm... .grab is not what i am looking for, unfortunately

[08:53] <lizmat> then I'm not understanding the question

[08:53] <ab5tract_> i want something that takes one of the keys of the BagHash and decrements it. 

[08:54] <jnthn> -- ? :)

[08:54] <ab5tract_> a destructive (elem) check

[08:54] <ab5tract_> jnthn: indeed, but that feels exactly like the lookup hash example that i am providing as a "look how primitive this used to be" example :P

[08:54] <ab5tract_> s/feels/looks and feels/

[08:55] <ab5tract_> it certainly doesn't have the feel of other quanter interactions

[08:56] <lizmat> m: my $b = <a b b c c c>.BagHash; dd $b<a>--; dd $b<a>--

[08:56] <camelia> rakudo-moar 16ce9c89a: OUTPUT: «1␤0␤»

[08:56] <lizmat> ab5tract_: ^^ something like that ?

[08:58] <ab5tract_> well, yes, i'm aware of that.. it's fine, i just feel like this is a gap in the otherwise extensive list of operators that allow you to interact with quanters in declarative rather than procedural terms

[08:59] <ab5tract_> it's really a nothing-burger, but one thing that does make it more cumbersome is that the infix set operators are super easy to WhateverCode, whereas the hash access form requires an explicit block (or else I'd love to be proven wrong :D)

[08:59] <jnthn> Can't you do *<a>-- ?

[09:00] <ab5tract_> doh :)

[09:00] <jnthn> m: my $b = <a b b c c c>.BagHash; dd (*<a>--)($b)

[09:00] <camelia> rakudo-moar 16ce9c89a: OUTPUT: «1␤»

[09:00] <ab5tract_> no, that is taking the bag as an argument, not the key

[09:00] <jnthn> Ah, OK

[09:13] <Geth> ¦ doc: hankache++ created pull request #2319: Add Pod::Defn & Pod::FormattingCode

[09:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2319

[09:14] *** Ven` joined
[09:15] *** p6bannerbot sets mode: +v Ven`

[09:15] <lizmat> m: sub circumfix:<(pull)>(\value,BagHash:D \b) { b{value}-- }; my $b = <a b b c c c>.BagHash; dd "a" (pull) $b; dd "a" (pull) $b

[09:15] <camelia> rakudo-moar 16ce9c89a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Not enough symbols provided for categorical of type circumfix; needs 2␤at <tmp>:1␤------> 3sub circumfix:<(pull)>7⏏5(\value,BagHash:D \b) { b{value}-- }; my␤»

[09:16] <lizmat> m: sub infix:<(pull)>(\value,BagHash:D \b) { b{value}-- }; my $b = <a b b c c c>.BagHash; dd "a" (pull) $b; dd "a" (pull) $b

[09:16] <camelia> rakudo-moar 16ce9c89a: OUTPUT: «1␤0␤»

[09:16] *** sotona joined
[09:16] <lizmat> ab5tract_: leaving it up to you to devise the unicode equivalent

[09:17] <ab5tract_> :D :D 

[09:17] *** p6bannerbot sets mode: +v sotona

[09:17] <ab5tract_> huggable: hug lizmat

[09:17] * huggable hugs lizmat

[09:17] <ab5tract_> :)

[09:21] *** sotona left
[09:26] <lizmat> weekly: http://blogs.perl.org/users/lichtkind/2018/09/perl6mathmatrix-part-3-when-to-use-mmd.html

[09:26] <notable6> lizmat, Noted!

[09:26] <masak> in a regex, is [\d+]? always equivalent to [\d*] ?

[09:28] <lizmat> "" would match \d* would it not ?

[09:29] <jnthn> It'd match [\d+]? too :)

[09:29] <masak> aye

[09:29] <lizmat> aaah I missed the ?

[09:30] <Geth> ¦ doc: f917ffe813 | (Naoum Hankache)++ | 3 files

[09:30] <Geth> ¦ doc: Add Pod::Defn & Pod::FormattingCode

[09:30] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f917ffe813

[09:30] <Geth> ¦ doc: 3ee141e222 | (Naoum Hankache)++ (committed using GitHub Web editor) | 3 files

[09:30] <Geth> ¦ doc: Merge pull request #2319 from hankache/master

[09:30] <Geth> ¦ doc: 

[09:30] <Geth> ¦ doc: Add Pod::Defn & Pod::FormattingCode

[09:30] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/3ee141e222

[09:30] <masak> don't blame you -- my last ? was for the question itself :P

[09:30] <masak> I put high demands on my readers

[09:30] <lizmat> .oO( significant whitespace )

[09:31] <jnthn> One of the nice things about Perl 6 not using the ` char is that you can always easily quote Perl 6 code using it :P

[09:31] <masak> jnthn: I thought the ` char was "reserved for slangs"

[09:31] <masak> so if we ever get slangs, that benefit goes out the window...?

[09:32] * masak .oO( newsflash: it's 2019 and Perl 6 has used up the last character for actual syntax -- dire metasyntax shortage )

[09:33] <masak> I remember the first time I realized that the `...` yadda term was confusing because sometimes people used it as syntax and sometimes as metasyntax

[09:33] <masak> also, when people write "..." they might refer to the ... or to the ""

[09:34] *** a____ptr17 joined
[09:34] <jnthn> If there's a slang involved, it's not Perl 6 any more, it's Perl 6 + something :)

[09:34] <masak> look a no-true-Scotsman, on #perl6 no less! :D

[09:34] <jnthn> Anyway, I can't think of a case where the two regex constructs would match a different thing.

[09:35] <masak> no, it feels like an "algebraic law"

[09:37] <jnthn> I mean, if you reduce it to the most basic definition of regular expressions - concat, alt, kleene star - then they both reduce to the same thing

[09:38] <masak> yes, the + doesn't show up in sed and vi IIRC

[09:38] * masak .oO( Rakudo Kleene Star )

[09:39] *** a____ptr17 left
[09:43] <jnthn> The ? doesn't show up in the formal def either, since a? is just (a|) :)

[09:43] <masak> everything's sugar

[09:44] <jnthn> Yup. So much sugar. :)

[09:45] <masak> what's wrong with combinatorial calculus, really

[09:46] * masak .oO( gimme an I, gimme a K, gimme an S... )

[09:48] *** hankache left
[09:49] * lizmat is reminded she once worked for a company called "IKSX Consultants"  :-)

[09:50] <masak> lizmat: nice! is there an X combinator?

[09:50] <masak> I only know about the Y combinator :)

[09:50] <lizmat> hehe

[09:50] <lizmat> it stood for "Information Knowledge Skills Xfer"

[09:51] *** sena_kun joined
[09:51] <masak> rolls right off the tongue

[09:51] <masak> fun historical fact: the Z metaop that we all know and love was once spelled "Y"

[09:51] <masak> because Y looks like a zipper, ya know

[09:51] *** p6bannerbot sets mode: +v sena_kun

[09:52] <jnthn> And the Unicode spelling was the Yen, because it looks even more like one :P

[09:53] <El_Che> lizmat: it looks like yoleaux didn't pass you my messages?

[09:53] <yoleaux> 07:54Z <lizmat> El_Che: those pseky P6isms keep creeping in  :-(   alas, I cannot correct the artical afaik

[09:53] <lizmat> it did, but not on this channel ?

[09:54] * masak .oO( trying to beat Ruby on its home turf ) :P

[09:54] *** nebuchadnezzar left
[09:54] *** nebuchadnezzar joined
[09:54] <El_Che> lizmat: your pelr 5 has a strong perl 6 accent nowadays :)

[09:54] <lizmat> masak: in dutch it was pronounced "XX"

[09:55] *** p6bannerbot sets mode: +v nebuchadnezzar

[09:55] <lizmat> El_Che: yeah,  :-(

[09:57] <masak> lizmat: d'oh! of course :)

[10:01] *** zakharyas left
[10:04] <buggable> New CPAN upload: Image-Libexif-0.1.0.tar.gz by FRITH http://modules.perl6.org/dist/Image::Libexif:cpan:FRITH

[10:06] *** brian|lfs joined
[10:11] *** brian|lfs left
[10:27] *** Guest32 joined
[10:27] *** p6bannerbot sets mode: +v Guest32

[10:28] *** Guest32 left
[10:34] *** johnsom2 joined
[10:35] *** pmurias joined
[10:36] *** p6bannerbot sets mode: +v pmurias

[10:36] <pmurias> Zoffix: re "taking" a slot isn't the unqualified author-less a singular resource?

[10:37] *** kensanata left
[10:38] *** johnsom2 left
[10:47] *** rindolf left
[10:49] *** rindolf joined
[10:50] *** p6bannerbot sets mode: +v rindolf

[10:51] *** Zoffix joined
[10:51] *** p6bannerbot sets mode: +v Zoffix

[10:51] <Zoffix> pmurias: how is the decision on which module to load is made?

[10:53] <Zoffix> pmurias: I don't understand your question actually. What do you mean "singular resource"? 

[10:55] <Zoffix> pmurias: nothing's stopping me from uploading JSON::Fast module with auth<zoffix>, despite there already being a JSON::Fast with whatever auth timo used (I don't even know what it is). I can guarantee all the numerous users of timo's module have just `use JSON::Fast` in their code, so now their code is ambiguous. Which JSON::Fast is it meant to load? Timo's or mine (oh and as a bonus, mine parses the JSON but

[10:55] <Zoffix> also has an exploit in it)

[10:56] <Zoffix> And people might notice it now that something fishy went in, but when we'll have thousands upon thousands of packages, I foresee many rogue Leftpads uploaded to pose as legit modules, but with the wrong auth.

[10:57] <Zoffix> I'm +2 on ditching the :auth :)

[11:05] *** newbie joined
[11:06] *** p6bannerbot sets mode: +v newbie

[11:06] <pmurias> Zoffix: what I meant that what a unqualified JSON::Fast resolves to can't change when someone else upload an unrelated or nefarious modules

[11:06] *** avar left
[11:06] <pmurias> s/that/is that/

[11:06] *** avar joined
[11:06] *** avar left
[11:06] *** avar joined
[11:06] *** p6bannerbot sets mode: +v avar

[11:07] *** newbie left
[11:07] *** p6bannerbot sets mode: +v avar

[11:07] <Zoffix> pmurias: what are the rules for what it resolves to?

[11:08] *** newbie joined
[11:08] <pmurias> Zoffix: you mean current ones or ones that should be?

[11:08] <Zoffix> pmurias: either

[11:08] <Zoffix> pmurias: I don't see how it's possible at all. How would zef know that I meant one JSON::Fast and not the other when I write JSON::Fast only?

[11:08] *** p6bannerbot sets mode: +v newbie

[11:09] *** newbie left
[11:09] *** newbie joined
[11:10] <pmurias> Zoffix: we could have a name registry

[11:10] <Zoffix> It's like calling to a company and asking to speak to "Dave". If there's more than one Dave in the company, how could they possibly know which one you meant?

[11:10] <Zoffix> pmurias: what's that?

[11:10] *** p6bannerbot sets mode: +v newbie

[11:10] *** newbie left
[11:10] <pmurias> a mapping from JSON::Fast to the "official" JSON::Fast

[11:11] <Zoffix> pmurias: and who's going to maintain it for all the modules? Forget JSON::Fast, how about Leftpad from Joe::NoOneHeardOf

[11:12] <Zoffix> pmurias: also, that would mean anyone else releasing a JSON::Fast now absolutely MUST use :auth to load it, which completely defeats the original purpose of allowing multiple authors to lay claim to a module name

[11:13] <Zoffix> So now: we lost most of the benefit from the :auth feature AND we have volunteers trying to keep up with maintaining a "name registry".

[11:13] <pmurias> Zoffix: re everyone else MUST use :auth, it's impossible to avoid that

[11:14] <pmurias> Zoffix: the "name registry" could work automatically on first come basis

[11:14] <pmurias> Zoffix: in npm you can release your own @Zoffix/leftpad but the leftpad name is already taken

[11:15] <pmurias> Zoffix: there where proposal that a user installing a modules would choose which JSON::Fast module he wants (like in linux distros)

[11:15] <pmurias> but that scheme is simply not acceptable at all

[11:16] <Zoffix> pmurias: "everyone else MUST use :auth, it's impossible to avoid that" yeah, so why not get rid of it?

[11:17] <Zoffix> pmurias: what benefit does :auth give, if we still have first-come-dibs for names and everyone else must specify extra qualifiers that are effectively a new name?

[11:18] <Zoffix> I may as well name my module JSON::Fasterish instead of having to tell everyone they must have JSON::Fast:auth<zoffix> on their uselines all the time

[11:19] *** sno joined
[11:20] <Zoffix> Hell, naming it even JSON::Fast::Zoffix makes more sense than the :auth, since now I won't have to explain to people they must use :auth to get the right module

[11:20] *** p6bannerbot sets mode: +v sno

[11:22] <pmurias> Zoffix: I don't have a super strong opinion about the details, I just share a sentiments that two modules can't both equally share a name

[11:22] <pmurias> s/a sentiments/the sentiment

[11:24] <pmurias> Zoffix: I think one of the motivations behind the :auth scheme is that we could have multiple name registries

[11:24] <Zoffix> I see

[11:24] <pmurias> so that JSON::Fast from CPAN would be on thing and a JSON::Fast from Zoffixpan could be something else 

[11:26] *** Ven` left
[11:26] * Zoffix eyes sub infix:<(pull)>

[11:27] <Zoffix> Is that going to core?

[11:27] <Zoffix> Kinda inconsistent that we have .push method but no .pull method, yet (pull) operator, but no (push) operator.

[11:30] <lizmat> Zoffix:  no, (pull) was just shown by me as an indication how easy it was to make such a thing in module space

[11:30] <Zoffix> Ah, k

[11:31] * pmurias is relived that a (pull) operators is not going into core ;)

[11:31] <pmurias> * operator

[11:32] <lizmat> m: sub infix:<(push)>(\value,BagHash:D \bag) { ++bag{value} }; my $b = <a b b c c c>.BagHash; dd "d" (push) %=$b; dd $b

[11:32] <camelia> rakudo-moar 16ce9c89a: OUTPUT: «Type check failed in binding to parameter 'bag'; expected BagHash but got Hash (${})␤  in sub infix:<(push)> at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:32] <lizmat> m: sub infix:<(push)>(\value,BagHash:D \bag) { ++bag{value} }; my $b = <a b b c c c>.BagHash; dd "d" (push) $b; dd $b

[11:32] <camelia> rakudo-moar 16ce9c89a: OUTPUT: «1␤BagHash $b = ("a"=>1,"c"=>3,"d"=>1,"b"=>2).BagHash␤»

[11:33] *** Zoffix left
[11:36] <lizmat> Zoffix: did you eye 	https://github.com/ugexe/zef/issues/273 as well ?

[11:41] *** cl joined
[11:41] *** p6bannerbot sets mode: +v cl

[11:43] *** sno left
[11:49] *** mahafyi joined
[11:50] *** p6bannerbot sets mode: +v mahafyi

[11:58] *** awwaiid joined
[11:59] *** p6bannerbot sets mode: +v awwaiid

[12:01] *** Zoffix joined
[12:01] *** p6bannerbot sets mode: +v Zoffix

[12:01] <Zoffix> lizmat: I saw it in the log. lizmat++ for dropping 2.2 to 0.3s, but I have no other opinions on it :)

[12:03] *** Zoffix left
[12:15] *** Ven` joined
[12:16] *** p6bannerbot sets mode: +v Ven`

[12:21] *** Zoffix joined
[12:21] *** p6bannerbot sets mode: +v Zoffix

[12:21] <Zoffix> m: 'ab'  ~~ m:g/./; dd %();

[12:21] <camelia> rakudo-moar 16ce9c89a: OUTPUT: «Hash % = {:a(Match.new(hash => Map.new(()), orig => "ab", made => Any, from => 1, list => (), pos => 2))}␤»

[12:21] <Zoffix> Is this stuff documented somewhere?

[12:22] <Zoffix> (I mean specifically on docs.perl6.org)

[12:31] *** sno joined
[12:31] *** p6bannerbot sets mode: +v sno

[12:36] <Zoffix> So what happened to better sorting on docs/Language? I've seen miles of bikeshedding, but looks like nothing actually got done.

[12:39] <Zoffix> Found the magiks documented on https://docs.perl6.org/syntax/$$SOLIDUS

[12:42] *** sno left
[12:43] *** Zoffix left
[13:02] <moritz> FTR https://docs.perl6.org/language/variables also https://docs.perl6.org/language/variables mentions %()

[13:04] <Geth> ¦ doc: f55804fc62 | (Zoffix Znet)++ | doc/Language/variables.pod6

[13:04] <Geth> ¦ doc: [6.d] Document $()/@()/%() are no longer magical in 6.d

[13:04] <Geth> ¦ doc: 

[13:04] <Geth> ¦ doc: Per 6.d-prep: https://github.com/perl6/6.d-prep/blob/dffa2642419a0f481591b9b64b602bfc4c4eb66b/TODO/FEATURES.md#remove--magicalness-from--and-

[13:04] <Geth> ¦ doc: Propspec: https://github.com/perl6/roast/commit/79e86e5f14

[13:04] <synopsebot> Link: https://doc.perl6.org/language/variables

[13:04] <Geth> ¦ doc: POV: https://github.com/rakudo/rakudo/commit/bb88a0324e

[13:04] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f55804fc62

[13:12] *** buggable joined
[13:12] *** ChanServ sets mode: +v buggable

[13:12] *** p6bannerbot sets mode: +v buggable

[13:15] *** zakharyas joined
[13:16] *** p6bannerbot sets mode: +v zakharyas

[13:21] <Geth> ¦ doc: 212687526d | (Zoffix Znet)++ | doc/Language/variables.pod6

[13:21] <Geth> ¦ doc: Document extra magic of $() 6.c shortcut

[13:21] <Geth> ¦ doc: 

[13:21] <Geth> ¦ doc: It doesn't just stringify, but actually checks .ast value first

[13:21] <Geth> ¦ doc: and returns it if it's truthy or stringifies match object if not.

[13:21] <synopsebot> Link: https://doc.perl6.org/language/variables

[13:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/212687526d

[13:40] *** Burgundy12 joined
[13:43] *** Burgundy12 left
[13:43] *** robertle joined
[13:44] *** p6bannerbot sets mode: +v robertle

[13:47] *** aborazmeh joined
[13:48] *** aborazmeh left
[13:48] *** aborazmeh joined
[13:48] *** p6bannerbot sets mode: +v aborazmeh

[13:48] *** p6bannerbot sets mode: +v aborazmeh

[13:59] *** Azhurederp joined
[14:00] *** lizmat left
[14:02] *** Azhurederp left
[14:02] <[Coke]> dd

[14:05] <[Coke]> ww

[14:07] <leont> Does that mean $() is gone in 6.d?

[14:09] *** pyrimidine joined
[14:09] *** p6bannerbot sets mode: +v pyrimidine

[14:11] <jnthn> Yes

[14:12] *** kanbas left
[14:12] *** kanbas joined
[14:13] *** sunnavy joined
[14:13] *** p6bannerbot sets mode: +v kanbas

[14:14] *** p6bannerbot sets mode: +v sunnavy

[14:14] *** lizmat joined
[14:15] *** p6bannerbot sets mode: +v lizmat

[14:20] *** ccc joined
[14:20] *** Ven` left
[14:21] *** p6bannerbot sets mode: +v ccc

[14:23] <ccc> On the Perl 6 doc website, I was searching for something, clicked on one of the choices and got a 404 error. The 404 page asked me to please report it. So I go to github.com/perl6/doc/issues/new to do so and the "Submit new issue" button is inactive.

[14:24] *** Actualeyes left
[14:24] <vrurg> ccc: Did you fill in the title?

[14:24] <[Coke]> you have to type in a title.

[14:24] <ccc> Ah - no let me try that

[14:24] <[Coke]> vrurg++

[14:25] <ccc> Thanks vrurg

[14:25] <vrurg> Welcome!

[14:29] *** cl left
[14:32] <buggable> New CPAN upload: JSON-Schema-0.8.tar.gz by JNTHN https://cpan.metacpan.org/authors/id/J/JN/JNTHN/Perl6/JSON-Schema-0.8.tar.gz

[14:32] *** grumble joined
[14:32] *** p6bannerbot sets mode: +v grumble

[14:32] <Geth> ¦ doc: 1521c9f7c0 | (Will "Coke" Coleda)++ | doc/Language/variables.pod6

[14:32] <Geth> ¦ doc: allow sample code to compile

[14:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1521c9f7c0

[14:32] <synopsebot> Link: https://doc.perl6.org/language/variables

[14:33] *** molaf joined
[14:34] *** p6bannerbot sets mode: +v molaf

[14:35] *** sno joined
[14:36] *** p6bannerbot sets mode: +v sno

[14:36] *** zakharyas left
[14:38] *** ufobat_ is now known as ufobat

[14:38] *** curan left
[14:40] *** psychoslave left
[14:40] *** lizmat left
[14:43] *** devin______ joined
[14:44] *** MilkmanDan left
[14:44] *** lizmat joined
[14:45] *** p6bannerbot sets mode: +v lizmat

[14:45] *** MilkmanDan joined
[14:45] *** p6bannerbot sets mode: +v MilkmanDan

[14:47] *** Zoffix joined
[14:47] *** p6bannerbot sets mode: +v Zoffix

[14:47] *** Ven` joined
[14:47] *** devin______ left
[14:47] *** sno left
[14:48] *** aborazmeh left
[14:48] *** p6bannerbot sets mode: +v Ven`

[14:48] <Zoffix> leont: to unpack the umbiguity: In 6.c literally `$()` has special meaning doing magic stuff with `$/`. THAT part is gone in 6.d, and `$()` means the same thing as `$( )`, i.e. a containerized list. The $(@foo) and all other permutations aren't affected

[14:49] <Zoffix> m: 'test' ~~ /.../; say $(); $/.make: 'McTesty'; say $()

[14:49] <camelia> rakudo-moar bb88a0324: OUTPUT: «tes␤McTesty␤»

[14:49] <Zoffix> m: use v6.d.PREVIEW; 'test' ~~ /.../; say $(); $/.make: 'McTesty'; say $()

[14:49] <camelia> rakudo-moar bb88a0324: OUTPUT: «()␤()␤»

[14:49] <Zoffix> uhh

[14:49] <Zoffix> Ah, it's `say`, not `dd`

[14:49] <Zoffix> m: use v6.d.PREVIEW; 'test' ~~ /.../; dd $(); $/.make: 'McTesty'; dd $()

[14:49] <camelia> rakudo-moar bb88a0324: OUTPUT: «$( )␤$( )␤»

[14:49] *** psychoslave_ joined
[14:50] *** p6bannerbot sets mode: +v psychoslave_

[14:54] *** Zoffix left
[14:56] *** psychoslave_ left
[14:58] *** lizmat_ joined
[14:59] *** p6bannerbot sets mode: +v lizmat_

[15:01] *** abraxxa left
[15:02] *** lizmat left
[15:12] *** ubt2 joined
[15:13] *** lizmat_ left
[15:15] *** lizmat joined
[15:15] *** ubt2 left
[15:15] *** p6bannerbot sets mode: +v lizmat

[15:15] *** robertle left
[15:16] *** kodapa6 joined
[15:20] *** kodapa6 left
[15:25] <ccc> m:sub foo(**@a) {say @a.elems}; foo((1, 2), (3,4,5))

[15:25] <evalable6> ccc, rakudo-moar 58592bd0d: OUTPUT: «2␤»

[15:25] <ccc> m:sub foo(*@a) {say @a.elems}; foo((1, 2), (3,4,5))

[15:25] <evalable6> ccc, rakudo-moar 58592bd0d: OUTPUT: «5␤»

[15:27] <SmokeMachine> is `.race.reduce` sequencial? couldn't it be parallel?

[15:28] <jnthn> Yes, it could, just hasn't been yet

[15:29] *** lizmat left
[15:29] <SmokeMachine> jnthn: thanks for the reply

[15:32] <SmokeMachine> jnthn: how should it work? `^6 .hyper.reduce: {$^a + $^b}` should it do the following operations in parallel (if :1batch)? `0 + 1`, `2 + 3`, `4 + 5`, `1 + 5`, `6 + 9`?

[15:33] <SmokeMachine> returning 15?

[15:35] <SmokeMachine> ^6 .hyper(:1batch).reduce: {$^a + $^b}

[15:35] <Geth> ¦ ecosystem-unbitrot: CurtTilmes self-assigned Math::Primesieve https://github.com/perl6/ecosystem-unbitrot/issues/137

[15:37] *** committable6 left
[15:37] *** wbn joined
[15:38] <Ulti> you'd then have to keep dispatching reduces on those results

[15:38] *** p6bannerbot sets mode: +v wbn

[15:39] *** shareable6 left
[15:39] *** unicodable6 left
[15:39] *** squashable6 left
[15:39] *** releasable6 left
[15:40] <Ulti> isnt a tree of promises of calling the function on batch size basically what you need?

[15:45] <SmokeMachine> Util: do you mean how to implement it on reduce?

[15:46] *** bisectable6 left
[15:46] *** domidumont left
[15:46] <Ulti> yeah

[15:47] <SmokeMachine> Ulti: yes, I was thinking something like that too...

[15:48] *** robertle joined
[15:49] *** p6bannerbot sets mode: +v robertle

[15:49] *** kurahaupo left
[15:53] *** molaf left
[15:53] *** BooK_ joined
[15:54] *** p6bannerbot sets mode: +v BooK_

[15:55] *** Kris joined
[15:55] *** Kris left
[16:02] <SmokeMachine> Util: maybe it could be `.elems / 2` maps (like this `.map(-> $a, $b { reduce-func($a, $b) })`)chained...

[16:04] <SmokeMachine> `^6 .hyper.reduce: -> $a, $b {$a + $b}` be equivalent to: `my &reduce-func = -> $a, $b { $a + $b }; ^6 .hyper.map(&reduce-func).map(&reduce-func).iterator.pull-one`

[16:04] <SmokeMachine> m: my &reduce-func = -> $a, $b { $a + $b }; ^6 .hyper.map(&reduce-func).map(&reduce-func).first

[16:04] <camelia> rakudo-moar c9432c207: OUTPUT: «A worker in a parallel iteration (hyper or race) initiated here:␤  in block <unit> at <tmp> line 1␤␤Died at:␤    Too few positionals passed; expected 2 arguments but got 1␤      in block  at <tmp> line 1␤␤»

[16:05] <SmokeMachine> m: my &reduce-func = -> $a, $b = 0 { $a + $b }; ^6 .hyper.map(&reduce-func).map(&reduce-func).first

[16:05] <camelia> rakudo-moar c9432c207: ( no output )

[16:05] <SmokeMachine> m: my &reduce-func = -> $a, $b = 0 { $a + $b }; say ^6 .hyper.map(&reduce-func).map(&reduce-func).first

[16:05] <camelia> rakudo-moar c9432c207: OUTPUT: «6␤»

[16:05] <SmokeMachine> :(

[16:06] <SmokeMachine> m: my &reduce-func = -> $a, $b = 0 { $a + $b }; say ^6 .hyper.map(&reduce-func).map(&reduce-func).map(&reduce-func).first

[16:06] <camelia> rakudo-moar c9432c207: OUTPUT: «15␤»

[16:07] <SmokeMachine> does that make sense?

[16:07] <timotimo> not all reduce functions are commutable, though?

[16:08] <sena_kun> m: class A { has $.a; has $.b; }; my @a = a => 1, b => 2; A.new(|@a);

[16:08] <camelia> rakudo-moar c9432c207: OUTPUT: «Default constructor for 'A' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»

[16:08] <timotimo> commutative*

[16:08] <sena_kun> is that a dead end ^?

[16:08] <timotimo> no

[16:08] <timotimo> m: class A { has $.a; has $.b; }; my @a = a => 1, b => 2; A.new(|%@a)

[16:08] <camelia> rakudo-moar c9432c207: ( no output )

[16:08] <timotimo> m: class A { has $.a; has $.b; }; my @a = a => 1, b => 2; A.new(|%@a).perl.say

[16:08] <camelia> rakudo-moar c9432c207: OUTPUT: «A.new(a => 1, b => 2)␤»

[16:08] <sena_kun> oh. thanks!

[16:08] <timotimo> no problem :)

[16:09] <SmokeMachine> timotimo: you are probably right but I can't think right now on a example...

[16:09] <timotimo> m: say (1 ** 2 ** 3) ** (4 ** 5 ** 6)

[16:09] <camelia> rakudo-moar c9432c207: OUTPUT: «1␤»

[16:09] <timotimo> %)

[16:09] <timotimo> of course

[16:10] <timotimo> m: say (2 ** 2 ** 2) ** (2 ** 2 ** 2)

[16:10] <camelia> rakudo-moar c9432c207: OUTPUT: «18446744073709551616␤»

[16:10] <SmokeMachine> sure

[16:10] <timotimo> m: say (2 ** 2 ** 2 ** 2 ** 2 ** 2)

[16:10] <camelia> rakudo-moar c9432c207: OUTPUT: «Numeric overflow␤  in block <unit> at <tmp> line 1␤␤»

[16:10] <SmokeMachine> `/` too

[16:10] <timotimo> not that that's something you'd sensibly want to reduce in parallel i suppose

[16:10] <timotimo> m: say (2 ** 1.0001 ** 1.0001 ** 1.0001 ** 1.0001 ** 1.0001)

[16:10] <camelia> rakudo-moar c9432c207: OUTPUT: «2.000138648106738␤»

[16:10] <timotimo> m: say (2 ** 1.0001 ** 1.0001) ** (1.0001 ** 1.0001 ** 1.0001)

[16:10] <camelia> rakudo-moar c9432c207: OUTPUT: «2.000277319691376␤»

[16:11] <SmokeMachine> timotimo: but how could be made a parallel reduce with a non commutative function?

[16:14] <timotimo> by being very very smart on a case-by-case basis? dunno :|

[16:14] <jnthn> SmokeMachine: With .hyper it can't, only .race, since .hyper implies that order matters. I think it'd be useless if :1batch perhaps; the idea would be to reduce each batch, and then reduce the results of those.

[16:14] <timotimo> oh, if you .race you're already specifying the order doesn't matter to you

[16:14] <timotimo> cool trick

[16:14] <jnthn> By using .race you are promising that it's commutative.

[16:17] <AlexDaniel> mst: some of my bots got k-lined, what should I do?

[16:18] <SmokeMachine> jnthn: do you think the "chain of maps method" would work?

[16:19] <ccc> multi sub infix:<c>(Str $a, Str $b --> Str) {$a ~ $b}; say 'foo' c 'bar';

[16:19] <evalable6> ccc, rakudo-moar c9432c207: OUTPUT: «foobar␤»

[16:20] *** lizmat joined
[16:20] <jnthn> SmokeMachine: There's already a bunch of infrastructure in place for breaking up work; that should be used

[16:21] <jnthn> SmokeMachine: Effectively, it's differnet kinds of batch workers that fork/process/join

[16:21] *** p6bannerbot sets mode: +v lizmat

[16:21] <SmokeMachine> jnthn: but isn't it being used by map?

[16:22] <jnthn> Yes, this is the mechanism used to implement hyper/race map and grep

[16:23] *** Ven` left
[16:23] <SmokeMachine> jnthn: using map to implement reduce wouldn't use that? I am missing something...

[16:23] <jnthn> I think it'd need to be used directly to get it right

[16:23] <timotimo> yeah, if you do it with map, it'll be called once per item, rather than once per batch

[16:23] <jnthn> Since at the .map level the concept of batch doesn't exist

[16:25] <mst> AlexDaniel: oh?

[16:25] <mst> hm

[16:26] <AlexDaniel> it could be an issue with some bot (maybe it spammed hard for some reason), but I'm not sure

[16:26] <mst> I'm seeing them k-lined but no kill/whatever

[16:27] * mst pokes

[16:29] <SmokeMachine> jnthn: ok... thanks

[16:29] <mst> AlexDaniel: I see a bunch of them ping timeouting then them all showing as k-lined without anything that looks like them triggering spam checks

[16:30] <AlexDaniel> mst: could it be because they were trying to rejoin at the same time?

[16:30] <SmokeMachine> timotimo: but wouldn't it process batched? once its the `race.map`...

[16:30] <mst> AlexDaniel: it *could* but that seems strange, hence my trying to track stuff down

[16:30] <timotimo> because map runs on items, not on batches :)

[16:30] <SmokeMachine> Ill study it better... thanks!

[16:30] <timotimo> that's the API that map has

[16:31] <timotimo> m: (1, 2, 3, 4).map(*.say); (1, 2, 3, 4).race(:1batch).map(*.say)

[16:31] <camelia> rakudo-moar c9432c207: OUTPUT: «1␤2␤3␤4␤1␤2␤3␤4␤»

[16:31] <timotimo> m: (1, 2, 3, 4).map(*.say); (1, 2, 3, 4).race(:2batch).map(*.say)

[16:31] <camelia> rakudo-moar c9432c207: OUTPUT: «1␤2␤3␤4␤1␤2␤3␤4␤»

[16:32] <timotimo> if map after a .hyper or .race had batch-based semantics, those two outputs would be different

[16:34] *** dakkar left
[16:49] *** lizmat left
[16:52] <Xliff> m: my &reduce-func = -> $a, $b = 0 { $a + $b }; say ^6 .hyper.map(&reduce-func).map(&reduce-func).map(&reduce-func).first

[16:52] <camelia> rakudo-moar c9432c207: OUTPUT: «15␤»

[16:52] <Xliff> m: my &reduce-func = -> $a, $b = 0 { $a + $b }; say ^6 .hyper.map(&reduce-func)

[16:52] <camelia> rakudo-moar c9432c207: OUTPUT: «(1 5 9)␤»

[16:52] *** notable6 joined
[16:52] *** ChanServ sets mode: +v notable6

[16:52] *** statisfiable6 joined
[16:52] *** ChanServ sets mode: +v statisfiable6

[16:52] <Xliff> m: my &reduce-func = -> $a, $b = 0 { $a + $b }; say ^6 .hyper.map(&reduce-func).map(&reduce-func)

[16:52] <camelia> rakudo-moar c9432c207: OUTPUT: «(6 9)␤»

[16:53] *** nckx4 joined
[16:53] *** unicodable6 joined
[16:53] *** ChanServ sets mode: +v unicodable6

[16:53] *** lizmat joined
[16:53] <Xliff> m: my &reduce-func = -> $a, $b = 0 { $a + $b }; say ^6 .hyper.map(&reduce-func).map(&reduce-func).map(&reduce-func)

[16:53] <camelia> rakudo-moar c9432c207: OUTPUT: «(15)␤»

[16:53] *** p6bannerbot sets mode: +v notable6

[16:53] *** p6bannerbot sets mode: +v statisfiable6

[16:53] <Xliff> m: say ^6

[16:53] <camelia> rakudo-moar c9432c207: OUTPUT: «^6␤»

[16:53] <Xliff> m: say (^6)

[16:53] <camelia> rakudo-moar c9432c207: OUTPUT: «^6␤»

[16:53] <Xliff> m: say (^6).eager

[16:53] <camelia> rakudo-moar c9432c207: OUTPUT: «(0 1 2 3 4 5)␤»

[16:53] *** p6bannerbot sets mode: +v unicodable6

[16:54] *** p6bannerbot sets mode: +v lizmat

[16:54] *** lizmat left
[16:54] *** nckx4 left
[17:00] <TimToady> m: say (^6).list

[17:00] <camelia> rakudo-moar c9432c207: OUTPUT: «(0 1 2 3 4 5)␤»

[17:00] <TimToady> it's just the listiness, not the eagerness :)

[17:06] *** nativecallable6 joined
[17:06] *** shareable6 joined
[17:06] *** p6bannerbot sets mode: +v nativecallable6

[17:07] *** p6bannerbot sets mode: +v shareable6

[17:15] * tobs .oO(so a Range is listless)

[17:17] <ccc> When there is an ascii equivalent to a unicode operator is that done with an alias of some kind or with 2 definitions with same name?

[17:17] <ccc> s/different/same/

[17:18] <ccc> vice versa

[17:19] <ccc> So I want to define an infix operator of my own and there's a nice unicode symbol for it, but I also want to provide a version easier to type

[17:20] *** scotticles joined
[17:20] <ccc> So sub infix:<⊛>(...) {...} ; then sub infix:<c*>(...){...} ?

[17:20] *** p6bannerbot sets mode: +v scotticles

[17:21] <timotimo> my &infix:<⊛> = &infix:<c*>;

[17:22] *** scotticles left
[17:22] <ccc> And our &infix:<⊛> = &infix:<c*>; if we want our users to see it?

[17:23] <timotimo> and "is export" if it should be exported like the sub

[17:23] <ccc> got it; thanks

[17:36] *** kaare_ left
[17:41] *** kaare_ joined
[17:42] *** p6bannerbot sets mode: +v kaare_

[17:48] *** committable6 joined
[17:49] *** bisectable6 joined
[17:49] *** p6bannerbot sets mode: +v committable6

[17:50] *** p6bannerbot sets mode: +v bisectable6

[17:50] *** releasable6 joined
[17:51] *** p6bannerbot sets mode: +v releasable6

[17:55] *** squashable6 joined
[17:56] *** p6bannerbot sets mode: +v squashable6

[17:57] *** kensanata joined
[17:57] *** p6bannerbot sets mode: +v kensanata

[18:00] <kensanata> I'm a bit confused about making my module ready for CPAN. My code is here: https://alexschroeder.ch/cgit/oddmuse6/tree/ and my idea was that I'd test this by saying "zef install ./Oddmuse" (with lib being below that). That doesn't quite work, however. zef test works but zef install fails because it can't find Oddmuse::View. What am I missing?

[18:01] <kensanata> Complete output here: https://alexschroeder.ch/wiki/Comments_on_2018-09-20_Perl_6_Peer_Review%3f

[18:01] <timotimo> you don't seem to have a META6.json

[18:02] <kensanata> timotimo: It's in the directory below that, together with lib/, t/, and all that.

[18:02] <kensanata> timotimo: Perhaps I'm calling zef in the wrong dir?

[18:02] <timotimo> oh, huh, ok

[18:02] <timotimo> your provides section isn't right :)

[18:02] <timotimo> you wouldn't have a .pm6 in the key part, and you don't have Oddmuse::View in the provides section either

[18:03] <kensanata> timotimo: Hm. I'm expecting people using the module to just use Oddmuse::Routes and the rest to be "internal" stuff. Should I still list them all?

[18:04] <timotimo> yes, otherwise you can't "use" them in your own module

[18:05] <kensanata> Ah, interesting. OK, adding them all.

[18:06] <kensanata> I'm getting the feeling that eventually I'll need some sort of script to assemble META6.json. :)

[18:06] <timotimo> there are tools that handle that, and Comma will also deal with it for you :)

[18:07] <kensanata> Hm. I'm too new to this. 

[18:08] <timotimo> though i'm not entirely sure if Comma has something for the resources section already or not

[18:08] *** lichtkind joined
[18:09] *** p6bannerbot sets mode: +v lichtkind

[18:21] <kensanata> timotimo: Yay, zef install worked. Thanks!

[18:23] <kensanata> Too bad Test::META didn't tell me about this, actually.

[18:25] *** Torun18 joined
[18:27] *** Torun18 left
[18:30] *** itaipu joined
[18:31] *** p6bannerbot sets mode: +v itaipu

[18:33] *** diamond_gr6 joined
[18:33] <AlexDaniel> timotimo: I don't think that it's a wonderful idea to recommend a non-free tool left and right like that

[18:35] *** sotona joined
[18:36] *** diamond_gr6 left
[18:36] *** p6bannerbot sets mode: +v sotona

[18:36] *** lizmat joined
[18:36] <AlexDaniel> “We did not yet decide on a strategy with regards to a release of Comma itself under an open source license”

[18:36] <AlexDaniel> hurry up then ;)

[18:37] *** p6bannerbot sets mode: +v lizmat

[18:38] <mst> AlexDaniel: I've had the bots exempted, should sort itself out

[18:38] <mst> AlexDaniel: tell me if it happens again

[18:38] <AlexDaniel> mst: thank you!

[18:39] *** domidumont joined
[18:40] *** domidumont left
[18:42] *** domidumont joined
[18:43] *** p6bannerbot sets mode: +v domidumont

[18:48] *** kerframil joined
[18:48] *** p6bannerbot sets mode: +v kerframil

[18:51] *** domidumont left
[18:52] <ccc> zef search take a perl6 regex argument ?

[18:54] *** lizmat left
[18:56] <ccc> hmm doesn't look like it

[18:57] <ccc> unless there's an undocumented flag

[18:57] <ccc> or option

[19:00] *** ccc left
[19:03] <Geth> ¦ doc: 44ac0f916d | (Zoffix Znet)++ | doc/Type/Signature.pod6

[19:03] <Geth> ¦ doc: [6.d] Document DefiniteHOW's new default defaults

[19:03] <Geth> ¦ doc: 

[19:03] <Geth> ¦ doc: Per 6.d-prep: https://github.com/perl6/6.d-prep/blob/dffa2642419a0f481591b9b64b602bfc4c4eb66b/TODO/FEATURES.md#make-default-defaults-for-definitehows-be-normal-types

[19:03] <Geth> ¦ doc: POV: https://github.com/rakudo/rakudo/commit/38b198c992

[19:03] <synopsebot> Link: https://doc.perl6.org/type/Signature

[19:03] <Geth> ¦ doc: Propspec: https://github.com/perl6/roast/commit/8c8e8f55bb

[19:03] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/44ac0f916d

[19:17] *** pecastro joined
[19:17] <timotimo> AlexDaniel: OK, i'll not push comma as much in the future

[19:18] *** p6bannerbot sets mode: +v pecastro

[19:20] *** kensanata left
[19:21] *** lichtkind left
[19:21] *** Mian joined
[19:25] *** Mian left
[19:27] <jnthn> AlexDaniel: What's your problem? TIMTOWTDI applies to licensing models too. If you personally choose to only use free/open source things, that's fine. Saying something should not be mentioned as an option because you wouldn't personally use it is unreasonable.

[19:29] *** Zoffix joined
[19:29] *** p6bannerbot sets mode: +v Zoffix

[19:29] <Zoffix> timotimo: meh, do push it. It's an IDE designed for Perl 6. Not mentioning it is lame.

[19:30] <AlexDaniel> if it doesn't even provide anything for that issue, why was it mentioned at all… non-free or not

[19:30] <[Coke]> +1 for mentioning it.

[19:31] <jnthn> AlexDaniel: The comment was about needing something to maintain META6.json, and Comma *does* automatically maintain the `provides` section for you.

[19:32] *** Zoffix left
[19:32] *** molaf joined
[19:33] *** lichtkind joined
[19:33] *** p6bannerbot sets mode: +v molaf

[19:33] <jnthn> I figure some of the other module authoring support tools (mi6? App::Assixt?) also do

[19:34] <jnthn> Yes, the latter certainly does help with that.

[19:41] *** timotimo sets mode: +v lichtkind

[19:42] <lichtkind> tyil: ping

[19:43] <tyil> lichtkind: pong

[19:44] *** buggable left
[19:44] *** buggable joined
[19:44] *** ChanServ sets mode: +v buggable

[19:45] *** p6bannerbot sets mode: +v buggable

[19:48] <AlexDaniel> no, do not “push” it. There are many people who will feel uncomfortable with that. Also you can visit kensanata's blog for some bonus thougths on free software :)

[19:49] <lichtkind> tyil can you see privat chats on irc?

[19:49] <tyil> I can, but freenode sets +R by default these days

[19:50] <tyil> so I have not received your private messages if you sent any

[19:50] <tyil> (+R ignores private messages from unregistered people)

[19:50] <lichtkind> tyil that explains it

[19:50] <tyil> I unset it for now :>

[19:50] <jnthn> AlexDaniel: I saw a mention, not a push. Just like I just mentioned App::Assixt up there.

[19:50] <AlexDaniel> jnthn: that was a response to “do push it”

[19:52] * mst thinks "it's worth mentioning it, but probably also nearest OSS equivalents

[19:52] <AlexDaniel> jnthn: but IMO instead of arguing how a non-free tool is an acceptable thing, maybe that energy should be spent on clarifying the strategy. Because if it's open-source then no need to discuss that thing at all.

[19:53] <jnthn> AlexDaniel: Yes, I'd tend to agree pushing anything - including the view that all software must be open source - is not really helpful. :)

[19:53] <jnthn> mst: Indeed. I even went and found some to mention. :)

[19:53] <[Coke]> AlexDaniel: I have plenty of history working with open source, and commercial products. if there's a commercial product that is useful for a thing, I have no issues supporting it.

[19:54] <[Coke]> (and if supporting it here is mentioning it in the context of an OS project, again, don't have an issue)

[19:54] <[Coke]> jnthn++

[19:55] *** dogbert17 joined
[19:56] *** p6bannerbot sets mode: +v dogbert17

[19:56] * jnthn goes back to his cooking for a bit

[19:57] <AlexDaniel> jnthn: that's incorrect though, some things are worth pushing of course

[19:57] <mst> AlexDaniel: hostility to commercial software doesn't seem like a net win from the POV of creating a sustainable ecosystem.

[19:59] <AlexDaniel> mst: the issue is not about the thing being commercial or not

[20:02] *** robertle left
[20:09] *** susmus joined
[20:10] *** p6bannerbot sets mode: +v susmus

[20:10] *** ab5tract_ left
[20:20] *** sno joined
[20:21] *** p6bannerbot sets mode: +v sno

[20:25] *** sno left
[20:38] *** sotona left
[20:54] *** sno joined
[20:55] *** p6bannerbot sets mode: +v sno

[21:05] *** eythian left
[21:06] *** sotona joined
[21:07] *** eythian joined
[21:07] *** eythian left
[21:07] *** eythian joined
[21:07] *** p6bannerbot sets mode: +v eythian

[21:07] *** p6bannerbot sets mode: +v sotona

[21:07] *** p6bannerbot sets mode: +v eythian

[21:25] *** ubt7 joined
[21:26] *** ubt7 was kicked by timotimo (ubt7))
[21:34] *** ufobat left
[21:41] *** atphalix joined
[21:42] *** p6bannerbot sets mode: +v atphalix

[21:45] *** sotona left
[21:55] *** epony left
[22:03] *** sena_kun left
[22:05] *** epony joined
[22:05] *** p6bannerbot sets mode: +v epony

[22:08] *** mfa29829 joined
[22:08] *** mfa29829 was kicked by timotimo (mfa29829))
[22:09] <timotimo> i'm always oto late, but it's still mildly cathartic

[22:09] *** ChanServ sets mode: +o mst

[22:09] *** Sigyn joined
[22:09] *** p6bannerbot sets mode: +v Sigyn

[22:09] *** mst sets mode: +o Sigyn

[22:09] *** mst sets mode: -o mst

[22:09] <mst> timotimo: MUHAHAHAHAHAHAHA

[22:10] <timotimo> sigyn will do it for us?

[22:12] *** rindolf left
[22:12] <geekosaur> sigynificant improvement?

[22:20] *** pmurias left
[22:22] *** dct joined
[22:22] *** p6bannerbot sets mode: +v dct

[22:28] *** lizmat joined
[22:29] *** p6bannerbot sets mode: +v lizmat

[22:33] *** void1 left
[22:35] *** cloudcell26 joined
[22:35] *** cloudcell26 left
[22:36] <timotimo> yeah, that's better

[22:36] *** pecastro left
[22:43] *** atphalix left
[22:55] <mst> timotimo: if she eats a bot you can do '/msg sigyn unkline <botname>' if you're quick enough

[22:55] <mst> (I forget how quick you have to be)

[22:55] <mst> if that doesn't work, poke me

[22:56] <timotimo> how quick do i have to be, and how do i know whether i did it right?

[22:57] <mst> (1) I forget, (2) you'll get a message back saying if she un-k-lined or not

[22:57] <timotimo> OK :)

[22:57] <mst> ten minutes is definitely fine, two hours probably too late, I don't know if it's a time limit or a rolling buffer or what though

[22:58] <mst> I'm actually pretty bad at freenode's staff toolkit, I tend to get deployed when the problem is liveware

[22:58] <timotimo> OK

[22:59] <mst> also if I notice what looks like a bad kill the unkline just requires you to be +o when you send the /msg

[22:59] <mst> so I can op up and do it

[22:59] <mst> but I've got enough channels where I get to see the spam

[23:01] <timotimo> i didn't see any spam in #moarvm in the last time! (also i don't have +o there, so that's pretty obviously a possible cause for that)

[23:02] *** MasterDuke joined
[23:02] *** p6bannerbot sets mode: +v MasterDuke

[23:03] *** MasterDuke left
[23:03] *** MasterDuke joined
[23:03] *** herbert.freenode.net sets mode: +v MasterDuke

[23:03] *** p6bannerbot sets mode: +v MasterDuke

[23:04] <mst> timotimo: yes, we're using +mz so you only see unvoiced users if +o

[23:04] <mst> hence why you can see the spam here, I can see it there, and sigyn can see and act upon it in both

[23:06] <timotimo> right

[23:10] <geekosaur> 15m according to my notes

[23:11] <timotimo> thank you geekosaur 

[23:12] <geekosaur> and having done it once, you do get a confirmation message

[23:13] *** kerframil left
[23:14] <timotimo> cool

[23:22] *** titsuki left
[23:26] *** rouking joined
[23:27] <timotimo> there is not, however, you can pass around Capture objects

[23:32] <timotimo> probably lib/experiemntal.pm

[23:32] *** leont left
[23:33] *** sotona joined
[23:34] *** p6bannerbot sets mode: +v sotona

[23:49] *** Couto10 joined
[23:49] *** Couto10 left
