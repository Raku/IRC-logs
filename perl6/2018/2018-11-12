[00:05] *** ryn1x joined
[00:05] *** p6bannerbot sets mode: +v ryn1x

[00:09] *** ryn1x left
[00:10] <timotimo> you want to have something like $my-instance.attribute-name($value-it-should-get)?

[00:11] *** ryn1x joined
[00:12] *** p6bannerbot sets mode: +v ryn1x

[00:24] *** beeman left
[00:25] <jdv79> kinda

[00:26] <jdv79> more like $instance.rando_meth($val_for_baz_attr) and the sig of the rando_meth handles binding that to $!baz

[00:27] <jdv79> similar to the common BUILD pattern where a named arg is bound directly to a attr

[00:29] *** beeman joined
[00:29] *** p6bannerbot sets mode: +v beeman

[00:29] <timotimo> ah

[00:29] <timotimo> yeah, all you need is to give it the right name and just not put a : in front

[00:29] <timotimo> i think that ought to do it

[00:30] *** Kaiepi left
[00:43] *** MasterDuke joined
[00:43] *** p6bannerbot sets mode: +v MasterDuke

[00:43] *** MasterDuke left
[00:43] *** MasterDuke joined
[00:43] *** herbert.freenode.net sets mode: +v MasterDuke

[00:43] *** p6bannerbot sets mode: +v MasterDuke

[00:44] <jdv79> what's the right name if its a positional passed as a literal

[00:45] <timotimo> i'm not sure i understand?

[00:45] <timotimo> m: class Test { has $.attribute; method sets-the-attr($!attribute) { say "set it!"; say $.attribute } }; Test.new.sets-the-attr(1)

[00:45] <camelia> rakudo-moar fa5215b61: OUTPUT: «set it!␤1␤»

[00:46] <jdv79> ah.  got it.

[00:46] <jdv79> thanks

[00:47] <timotimo> YW

[00:52] *** cydf left
[01:07] *** Kaiepi joined
[01:07] *** p6bannerbot sets mode: +v Kaiepi

[01:15] *** kurahaupo left
[01:16] *** kurahaupo joined
[01:16] *** p6bannerbot sets mode: +v kurahaupo

[01:35] <jdv79> lets say i have an array attr (@.baz) and i want to slip in a hash for the constructor args.  is there a way to get %args<baz> to slip in properly?

[01:36] <timotimo> hm, normally signature application is "binding", not sure if @-sigiled parameters do things differently

[01:37] <jdv79> it looks like it ends up as the first elem in the attr array

[01:37] <jdv79> aka $!baz has [[1,2,3]]

[01:38] <jdv79> rather @!baz

[01:38] <jdv79> if i make the attr a scalar it doesn't double it up like so

[01:39] <timotimo> perhaps it does do assignment semantics, but your array has a scalar container around it?

[01:39] <jdv79> i believe it does

[01:42] *** holyghost joined
[01:42] <timotimo> in that case it would appear you can't just have it like that

[01:43] *** p6bannerbot sets mode: +v holyghost

[01:45] <jdv79> m: class Foo { has @.a; method b (:@!a) {} }; my @foo = 1,2,3; my %args = :a(@foo); my $f = Foo.new(|%args); $f.say

[01:45] <camelia> rakudo-moar fa5215b61: OUTPUT: «Foo.new(a => [[1, 2, 3],])␤»

[01:46] *** molaf left
[01:47] <jdv79> so if to be able to slip constructor args the class can't use anything but scalar attrs

[01:48] <jdv79> m: class Foo { has @.a; method b (:@!a) {} }; my @foo = 1,2,3; my %args = :a(@foo); my $f = Foo.new(|%args,:a(@foo)); $f.say

[01:48] <camelia> rakudo-moar fa5215b61: OUTPUT: «Foo.new(a => [1, 2, 3])␤»

[01:48] <jdv79> that's unfortunate

[01:49] <jdv79> i thought this was a case were a slip would workk

[01:54] <timotimo> slip only works if something is there to iterate, apparently this doesn't have that

[01:55] <SmokeMachine> How can I get the path of a module’s file programaticaly?

[01:56] <jdv79> seems maybe inconsistent that its possible to have it work as expected without slipping the method args in and not when the slipping.

[01:57] <jdv79> jnthn: is that on purpose and/or necessary?

[02:00] <timotimo> oh, sorry, i should have said that slipping arguments will unpack lists to become positional args or named args depending on positional vs associative or something

[02:00] <timotimo> maybe also iterable

[02:03] *** finanalyst joined
[02:04] *** p6bannerbot sets mode: +v finanalyst

[02:13] *** hph^ joined
[02:14] *** p6bannerbot sets mode: +v hph^

[02:27] <holyghost> hello

[02:29] <holyghost> I'm back to work in a few hours

[02:54] <sacomo> hi all

[02:57] *** newbie23 joined
[02:57] <sacomo> is there a way to interpolate a string regex, e.g. my $r = "'some part' \\s (\\d+) \\s 'more string' (\\w+)", into a regex for match? $str ~~ / $r /

[02:58] *** p6bannerbot sets mode: +v newbie23

[03:02] <buggable> New CPAN upload: AI-Agent-Music-0.2.4.tar.gz by HOLYGHOST https://cpan.metacpan.org/authors/id/H/HO/HOLYGHOST/Perl6/AI-Agent-Music-0.2.4.tar.gz

[03:02] <buggable> New CPAN upload: Bayes-Learn-0.1.10.tar.gz by HOLYGHOST http://modules.perl6.org/dist/Bayes::Learn:cpan:HOLYGHOST

[03:06] <lookatme_q> sacomo, EVAL ??

[03:07] <lookatme_q> or /<$r>/

[03:08] <lookatme_q> m:  my $r = "'some part' \\s (\\d+) \\s 'more string' (\\w+)"; say "some part 123 more string foo" ~~ /<$r>/

[03:08] <camelia> rakudo-moar fa5215b61: OUTPUT: «Nil␤»

[03:09] <lookatme_q> m:  my $r = "'some part' \\s (\\d+) \\s 'more string' (\\w+)"; say "some part 123 more stringfoo" ~~ /<$r>/

[03:09] <camelia> rakudo-moar fa5215b61: OUTPUT: «｢some part 123 more stringfoo｣␤»

[03:09] <lookatme_q> ^^ sacomo 

[03:09] <lookatme_q> m:  my $r = "'some part' \\s (\\d+) \\s 'more string' (\\w+)"; say "some part 123 more stringfoo" ~~ /<$r>/; say $/

[03:09] <camelia> rakudo-moar fa5215b61: OUTPUT: «｢some part 123 more stringfoo｣␤｢some part 123 more stringfoo｣␤»

[03:12] <buggable> New CPAN upload: AI-Agent-0.2.3.tar.gz by HOLYGHOST http://modules.perl6.org/dist/AI::Agent:cpan:HOLYGHOST

[03:15] <sacomo> lookatme_q: thanks. but I think that is only returning orig... 

[03:16] *** ufobat_ joined
[03:17] *** p6bannerbot sets mode: +v ufobat_

[03:20] *** ufobat left
[03:32] <buggable> New CPAN upload: Bayes-Learn-0.1.11.tar.gz by HOLYGHOST http://modules.perl6.org/dist/Bayes::Learn:cpan:HOLYGHOST

[03:32] <holyghost> Bayes::Learn is on github, github.com/theholyghost2

[03:32] <holyghost> It should be debugged

[03:33] <holyghost> If anyone wants to make a pulle request, it's nice code to read and learn from

[03:33] <holyghost> s/pulle/pull

[03:42] <lookatme_q> sacomo, what do you mean ??

[03:42] <lookatme_q> m:  my $r = "'some part' \\s (\\d+) \\s 'more string' (\\w+)"; "some part 123 more stringfoo" ~~ /(<$r>)/; say $/

[03:42] <camelia> rakudo-moar fa5215b61: OUTPUT: «｢some part 123 more stringfoo｣␤ 0 => ｢some part 123 more stringfoo｣␤»

[03:42] <lookatme_q> It matched obviously

[03:43] *** Guest79068 joined
[03:44] <sacomo> yeah, that matched... what I am trying to do is grab the captures also, for example:

[03:44] <sacomo> m: say "some part 123 more" ~~ /'some part ' (\d+) ' more'/

[03:44] <camelia> rakudo-moar fa5215b61: OUTPUT: «｢some part 123 more｣␤ 0 => ｢123｣␤»

[03:44] *** p6bannerbot sets mode: +v Guest79068

[03:46] <lookatme_q> sacomo, IDK why it not captured

[03:48] *** Guest79068 left
[03:51] <sacomo> hmm

[03:53] <lookatme_q> sacomo, but EVAL should work

[03:54] <sacomo> yeah, ok thanks

[03:55] *** khisanth_ left
[04:07] *** w_richard_w joined
[04:08] *** p6bannerbot sets mode: +v w_richard_w

[04:08] *** khisanth_ joined
[04:08] *** Itaipu left
[04:09] *** p6bannerbot sets mode: +v khisanth_

[04:09] *** Itaipu joined
[04:10] *** p6bannerbot sets mode: +v Itaipu

[04:12] *** Cabanossi left
[04:13] *** Cabanossi joined
[04:14] *** p6bannerbot sets mode: +v Cabanossi

[04:22] <buggable> New CPAN upload: IO-Glob-0.6.tar.gz by HANENKAMP http://modules.perl6.org/dist/IO::Glob:cpan:HANENKAMP

[04:30] <Geth> ¦ ecosystem: ccworld1000++ created pull request #417: add GtkPlus [On the way]

[04:30] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/417

[04:34] <holyghost> I've made some music from remixed from a frined of mine : here's the 2 sampled sounds :

[04:34] <holyghost> http://www.mediafire.com/file/yg9evcxqgocspco/lost-momentum-rage-remix-1.mp3/file

[04:34] <holyghost> http://www.mediafire.com/file/k71a94bc1xqqbb1/lost-momentum-rage-remix-4.mp3/file

[04:34] <holyghost> It's industrial

[04:36] <holyghost> I have programmed a simple sample recognizer with the use of Matrixes to interpolate

[04:36] <holyghost> you just enlarge the 8-bit sample with a matrix, they'll come when Mathx::Matrix exists

[04:37] <holyghost> Further on we might have Game::Markov::Sound

[04:38] <holyghost> future music

[04:42] <buggable> New CPAN upload: HTTP-Request-Supply-0.1.2.tar.gz by HANENKAMP https://cpan.metacpan.org/authors/id/H/HA/HANENKAMP/Perl6/HTTP-Request-Supply-0.1.2.tar.gz

[04:52] <holyghost> ok, AI-Agent and AI-Agent-Music compile, I need tests 

[04:53] <holyghost> next is Bayes::Learn then Game::Markov

[05:02] <buggable> New CPAN upload: Path-Router-0.2.tar.gz by HANENKAMP https://cpan.metacpan.org/authors/id/H/HA/HANENKAMP/Perl6/Path-Router-0.2.tar.gz

[05:05] *** Itaipu left
[05:09] *** Itaipu joined
[05:10] *** p6bannerbot sets mode: +v Itaipu

[05:12] *** ryn1x left
[05:14] <ZzZombo> New release? Yes!

[05:21] <ZzZombo> "panda-sub which pointed user to zef now removed" -- looks like a typo. I'd fix it myself, but WTF Github, I can't?

[05:32] <holyghost> There's Mathx::Matrix on github.com/theholyghost2

[05:32] <holyghost> a start with VectorN, MatrixNM

[05:34] *** kurahaupo_ joined
[05:35] *** p6bannerbot sets mode: +v kurahaupo_

[05:37] *** vrurg left
[05:38] *** vrurg joined
[05:38] *** kurahaupo left
[05:39] *** p6bannerbot sets mode: +v vrurg

[05:39] *** hdch left
[05:52] <holyghost> If you want to make a non-initialzed nested list, maybe it would be handy to nest while pushing or setting

[05:53] *** kurahaupo_ left
[05:53] <holyghost> m: Class A { has @!l; sub set($y,$value) { push(@!l[$y] = $value; } }

[05:53] <camelia> rakudo-moar fa5215b61: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤You cannot declare attribute '@!l' here; maybe you'd like a class or a role?␤at <tmp>:1␤------> 3Class A { has @!l7⏏5; sub set($y,$value) { push(@!l[$y] = $v␤    expecting any of:␤        …»

[05:54] *** kurahaupo joined
[05:54] *** p6bannerbot sets mode: +v kurahaupo

[05:56] <holyghost> m: Class A { has @!l; sub set($y,$value) { push(@!l[$y], $value); } }

[05:56] <camelia> rakudo-moar fa5215b61: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤You cannot declare attribute '@!l' here; maybe you'd like a class or a role?␤at <tmp>:1␤------> 3Class A { has @!l7⏏5; sub set($y,$value) { push(@!l[$y], $va␤    expecting any of:␤        …»

[05:58] *** lizmat left
[05:59] <holyghost> It's not Lisp or smalltalk anyway :-)

[06:01] <holyghost> In C++ you have to use reserve

[06:02] <buggable> New CPAN upload: DOM-Tiny-0.5.1.tar.gz by HANENKAMP http://modules.perl6.org/dist/DOM::Tiny:cpan:HANENKAMP

[06:02] <holyghost> e.g. in the vector STL class

[06:02] <holyghost> #include <vector>

[06:05] <holyghost> .tell jmerelo I have a module ready on github (Mathx-Matrix), I won't upload to CPAN before I have tests so you never have to worry anymore

[06:05] <yoleaux> holyghost: I'll pass your message to jmerelo.

[06:05] <holyghost> .tell My apologies for broken CPAN modules (with time)

[06:05] <yoleaux> holyghost: I'll pass your message to My.

[06:06] *** Summertime left
[06:06] <kurahaupo> holyghost: tell whom?

[06:07] <holyghost> .tell jmerelo My apologies for broken CPAN modules (within time)

[06:07] <yoleaux> holyghost: I'll pass your message to jmerelo.

[06:07] <holyghost> kurahaupo: thanks

[06:07] *** Summertime joined
[06:07] *** p6bannerbot sets mode: +v Summertime

[06:09] <Geth> ¦ doc: e2130a225e | (JJ Merelo)++ | doc/Type/Any.pod6

[06:09] <Geth> ¦ doc: Adds better example for Any.roll

[06:09] <Geth> ¦ doc: 

[06:09] <Geth> ¦ doc: Eliminates the class example, and adds pointers. Refs #1731

[06:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e2130a225e

[06:09] <synopsebot> Link: https://doc.perl6.org/type/Any

[06:09] <Geth> ¦ doc: 54ea17ee87 | (JJ Merelo)++ | doc/Type/Any.pod6

[06:09] <Geth> ¦ doc: Adds better example for Any.pick using Ranges

[06:09] <Geth> ¦ doc: 

[06:09] <Geth> ¦ doc: Eliminates the class example too; refs #1731

[06:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/54ea17ee87

[06:09] <Geth> ¦ doc: d6548d0919 | (JJ Merelo)++ | doc/Type/Any.pod6

[06:09] <Geth> ¦ doc: Improves descripton of prepend

[06:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d6548d0919

[06:12] *** jmerelo joined
[06:13] *** p6bannerbot sets mode: +v jmerelo

[06:13] *** kurahaupo_ joined
[06:13] <jmerelo> O/

[06:13] <yoleaux> 11 Nov 2018 15:04Z <SmokeMachine> jmerelo: if you have some time could you please comment? (it's far from complete yet) https://gist.github.com/FCO/33be94f5ecfab73812705f60efd89085#file-redsecretsanta-md

[06:13] <yoleaux> 06:05Z <holyghost> jmerelo: I have a module ready on github (Mathx-Matrix), I won't upload to CPAN before I have tests so you never have to worry anymore

[06:13] <yoleaux> 06:07Z <holyghost> jmerelo: My apologies for broken CPAN modules (within time)

[06:14] *** p6bannerbot sets mode: +v kurahaupo_

[06:15] <jmerelo> .tell SmokeMachine to please make a PR for the day you want too. I'll try to take a look today.

[06:15] <yoleaux> jmerelo: I'll pass your message to SmokeMachine.

[06:16] *** kurahaupo_ left
[06:16] *** kurahaupo left
[06:23] *** kurahaupo joined
[06:24] *** p6bannerbot sets mode: +v kurahaupo

[06:25] <holyghost> jmerelo: If you want to take a look at AI::Agent in the future, it compiles

[06:26] <holyghost> jmerelo: so does AI::Agent::Music

[06:26] <jmerelo> holyghost: does it have tests?

[06:26] <holyghost> not yet

[06:27] <jmerelo> holyghost: I think I'll pass, then. 

[06:27] <holyghost> ok

[06:28] <holyghost> jmerelo: It's a base class anyway, I need to write a parser for agent-agent talk

[06:28] <holyghost> especially the music agent system

[06:28] <holyghost> You can or cannot use it

[06:29] <jmerelo> holyghost: you say base class as if base classes didn't need tests... Everything needs a test

[06:30] <holyghost> jmerelo: I know now

[06:32] * holyghost reads https://docs.perl6.org/language/testing

[06:35] *** vike1 left
[06:38] *** shadowpaste left
[06:40] *** nebuchadnezzar left
[06:40] *** shadowpaste joined
[06:40] *** nebuchad` joined
[06:40] *** p6bannerbot sets mode: +v shadowpaste

[06:41] *** p6bannerbot sets mode: +v nebuchad`

[06:50] *** vike1 joined
[06:51] *** p6bannerbot sets mode: +v vike1

[06:52] *** nebuchad` is now known as nebuchadnezzar

[06:53] <holyghost> what's wrong with this ? https://pastebin.com/GiaY6Q1L

[06:54] <holyghost> prove --exec perl6 -r t -I lib/

[06:54] <holyghost> t/make-agent.t .. ===SORRY!=== Error while compiling /home/erana/perl6/AI-Agent/t/make-agent.t

[06:54] <holyghost> Undeclared name:

[06:54] <holyghost>     Agent used at line 15

[06:56] <holyghost> Confused

[06:56] <holyghost> at /home/erana/perl6/AI-Agent/t/make-agent.t:15

[06:56] <holyghost> ------> my $ag = AI:Agent:⏏:Agent.new(0);

[06:57] <jmerelo> holyghost: double :: between AI and Agent

[06:58] <holyghost> t/make-agent.t .. Could not find symbol '&Agent'

[06:58] *** lizmat joined
[06:58] *** p6bannerbot sets mode: +v lizmat

[06:58] <holyghost> ^-- double

[06:58] <jmerelo> holyghost: because you need to get the syntax right. See above.

[06:59] <jmerelo> you are writing AI:Agent, it should be AI::Agent

[06:59] <holyghost> https://pastebin.com/PTtHUw90

[06:59] <holyghost> $ prove --exec perl6 -r t -I lib/

[06:59] <holyghost> t/make-agent.t .. Could not find symbol '&Agent'

[06:59] <holyghost>   in block <unit> at t/make-agent.t line 15

[07:00] <jmerelo> holyghost: it would be better if you read the documents.

[07:00] <jmerelo> holyghost: use lib is for declaring paths to lib, not to use an actual lib

[07:01] <jmerelo> holyghost: in that code, you're not even running a test. You need to actually use some test routine like "ok" or "is"

[07:02] <jmerelo> holyghost: you should read thoroughly some Perl 6 book.

[07:02] <holyghost> ok

[07:06] <jmerelo> jmerelo: please start with the test documentation you've pointed to above. If you don't understand anything, please ask here or in StackOverflow or in both places

[07:07] <holyghost> Default constructor for 'AI::Agent::Agent' only takes named arguments

[07:08] <jmerelo> holyghost: default constructor for all classes do

[07:08] <holyghost> What's a named argument ?

[07:09] <moritz> m: sub f(:$x) { say $x }; f x => 42;

[07:09] <camelia> rakudo-moar fa5215b61: OUTPUT: «42␤»

[07:09] <jmerelo> holyghost: ... and that is why you need to read some book and/or documentation and/or both

[07:09] <jmerelo> holyghost: https://docs.perl6.org/type/Signature#index-entry-named_argument

[07:15] <holyghost> t/make-agent.t .. Dubious, test returned 255 (wstat 65280, 0xff00)

[07:15] <holyghost> Failed 1/1 subtests 

[07:16] <holyghost> I got it cornered

[07:16] <holyghost> now the ok system

[07:16] <holyghost> in an hour

[07:16] <holyghost> jmerelo: thanks for the help, I only have the beastie book

[07:17] <holyghost> So it just fails when not returning 1;

[07:19] <holyghost> jmerelo: https://pastebin.com/9MSSYBCc

[07:19] *** domidumont joined
[07:19] <holyghost> Needs the test system further on

[07:20] *** p6bannerbot sets mode: +v domidumont

[07:24] <holyghost> t/make-agent.t .. ok   

[07:24] <holyghost> All tests successful.

[07:25] <holyghost> jmerelo: I've got my first test :-)

[07:39] *** robertle joined
[07:39] <holyghost> jmerelo: I uploaded with the main test for a n Agent dispatch to CPAN

[07:39] *** jmerelo left
[07:39] *** p6bannerbot sets mode: +v robertle

[07:42] <buggable> New CPAN upload: AI-Agent-0.2.4.tar.gz by HOLYGHOST http://modules.perl6.org/dist/AI::Agent:cpan:HOLYGHOST

[07:43] <holyghost> ^-- this should give you a subclass for dispatchable messages to agents

[07:44] *** xinming left
[07:46] *** xinming joined
[07:46] *** p6bannerbot sets mode: +v xinming

[07:51] *** kdr22 left
[08:00] *** abraxxa joined
[08:01] *** p6bannerbot sets mode: +v abraxxa

[08:02] *** w_richard_w left
[08:05] *** kdr22 joined
[08:06] *** p6bannerbot sets mode: +v kdr22

[08:12] *** yqt joined
[08:13] *** p6bannerbot sets mode: +v yqt

[08:17] *** Itaipu left
[08:22] *** rindolf joined
[08:23] *** Itaipu joined
[08:23] *** p6bannerbot sets mode: +v rindolf

[08:24] *** p6bannerbot sets mode: +v Itaipu

[08:24] *** zakharyas joined
[08:25] *** p6bannerbot sets mode: +v zakharyas

[08:30] *** kensanata joined
[08:30] *** p6bannerbot sets mode: +v kensanata

[08:32] <holyghost> What's wrong with the apply of arguments, they are stationary : https://pastebin.com/DLG80QYs

[08:35] <holyghost> I need some kind of binding

[08:37] *** dalek left
[08:43] *** dakkar joined
[08:44] *** sena_kun joined
[08:44] *** p6bannerbot sets mode: +v dakkar

[08:45] *** p6bannerbot sets mode: +v sena_kun

[08:46] *** kdr22 left
[08:47] *** kdr22 joined
[08:47] *** Itaipu left
[08:48] *** p6bannerbot sets mode: +v kdr22

[08:52] *** Itaipu joined
[08:53] *** p6bannerbot sets mode: +v Itaipu

[08:57] *** kdr22 left
[08:57] *** kdr22 joined
[08:58] *** p6bannerbot sets mode: +v kdr22

[08:59] *** parv joined
[09:00] *** p6bannerbot sets mode: +v parv

[09:01] *** fatguy joined
[09:01] *** p6bannerbot sets mode: +v fatguy

[09:03] *** cydf joined
[09:04] *** p6bannerbot sets mode: +v cydf

[09:15] *** rindolf left
[09:19] *** Itaipu left
[09:21] *** rindolf joined
[09:22] *** p6bannerbot sets mode: +v rindolf

[09:23] *** Itaipu joined
[09:24] *** p6bannerbot sets mode: +v Itaipu

[09:24] *** dogbert11 left
[09:34] *** fatguy left
[09:42] <buggable> New CPAN upload: AI-Agent-0.2.5.tar.gz by HOLYGHOST http://modules.perl6.org/dist/AI::Agent:cpan:HOLYGHOST

[09:42] *** Freeaqingme1 joined
[09:42] *** Freeaqingme1 left
[09:47] *** tobs` joined
[09:47] <holyghost> .tell jmerelo I have HashedAgent and Agent tested, you can use the ask routines. If you want to try SFY

[09:47] <yoleaux> holyghost: I'll pass your message to jmerelo.

[09:48] *** p6bannerbot sets mode: +v tobs`

[09:48] *** kerframil joined
[09:48] *** p6bannerbot sets mode: +v kerframil

[10:05] *** hamhu3_ joined
[10:06] *** p6bannerbot sets mode: +v hamhu3_

[10:07] *** hamhu3 left
[10:09] *** Itaipu left
[10:11] *** Itaipu joined
[10:12] <buggable> New CPAN upload: Mathx-Stat-0.1.14.tar.gz by HOLYGHOST http://modules.perl6.org/dist/Mathx::Stat:cpan:HOLYGHOST

[10:12] *** p6bannerbot sets mode: +v Itaipu

[10:20] <holyghost> ok, enough work, I am going to grab a beer

[10:21] *** Sound joined
[10:21] *** p6bannerbot sets mode: +v Sound

[10:21] <holyghost> Mathx::Stat has 2 tests, but I need to configure the outcome of the "ok"'s

[10:21] <holyghost> I am getting there , slowly

[10:21] <holyghost> jmerelo, lizmat : Hope you like the new github modules

[10:27] <holyghost> s/new/updated

[10:27] <lizmat> and now for something completely different: https://jnthn.net/all-the-czech-railways/#2018

[10:29] <holyghost> jnthn, lizmat: I like the beer mentioning

[10:30] *** rindolf left
[10:31] <holyghost> <-- old fart, linux this month

[10:31] <holyghost> elder

[10:32] <holyghost> I don't remember, I joined linux in november 1998 with 7 debian floppies

[10:34] <holyghost> I burned them myself with rawrite.exe in win 98

[10:36] <holyghost> root.bin/root.flp for example

[10:39] *** fatguy joined
[10:39] *** p6bannerbot sets mode: +v fatguy

[10:40] <fatguy> when i .parse grammar with action to a class, looks like it also pass non matched string to the method since i got 'Use of Nil in string context' , how to avoid ? 

[10:41] <fatguy> code https://pastebin.com/dR9b2pe6

[10:42] *** ChoHag left
[10:43] <sena_kun> fatguy, can you also provide `sar30` file? at least partly, at the point where warnings are present.

[10:46] *** rindolf joined
[10:46] *** p6bannerbot sets mode: +v rindolf

[10:51] <fatguy> +sena_kun: https://ufile.io/6yhae

[10:51] *** Sound left
[10:56] *** domidumont left
[10:56] <sena_kun> well, the thing is, as stated, in lines 25 and 26. when I did a simple `say $/` before those lines, I saw that not every parsed structure has `PM|AM` present. `$/[$UnknownThing]` evaluates to Nil, and when you try to `Nil eq "foo"`, it warns you that Nil is used in string context.

[10:56] <sena_kun> to avoid that, you may want to use something like `if $/{3}:exists && $/[3] eq 'AM';`. It's the first thing that comes from my mind, but it's ugly. :)

[10:58] <sena_kun> personally, I would create a new token, like `token am-or-pm { 'AM' | 'PM' }`, and then used it as `<am-or-pm>` instead of `('AM')`. then in action method you can do like `with $<am-or-pm> { make self.foo($/) }`. }

[10:59] <sena_kun> *instead of `AM` and `PM` notes, of course, without parens

[10:59] <sena_kun> fatguy, ^

[10:59] *** ChoHag joined
[11:00] *** p6bannerbot sets mode: +v ChoHag

[11:01] <sena_kun> or, rather, `with $<am-or-pm> { if }

[11:01] <sena_kun> ugh

[11:02] <sena_kun> *when `PM` { foo }; when 'AM' { bar }

[11:05] <fatguy> +sena_kun: thanks for your advise, let me try it :)

[11:05] <sena_kun> fatguy, you are welcome!

[11:07] <holyghost> lizmat: I really like the railway link :-)

[11:08] *** finanalyst left
[11:23] *** nwellnhof joined
[11:23] *** p6bannerbot sets mode: +v nwellnhof

[11:23] <nwellnhof> p6: say <0>.comb

[11:23] <camelia> rakudo-moar fa5215b61: OUTPUT: «(0)␤»

[11:24] <nwellnhof> OK, this was fixed: https://github.com/rakudo/rakudo/issues/2010

[11:24] *** nwellnhof left
[11:36] <holyghost> jnthn: thanks for relieving on chezch railways :-)

[11:36] <jnthn> :)

[11:40] <holyghost> really like the winter photos

[11:41] <holyghost> I'm in since "de snoezige snowijt", a strip from Vandersteen

[11:41] <holyghost> about 30 years ago

[11:41] <holyghost> It was about "Flip, het winterkonkje"

[11:42] <holyghost> Flip, the winter king, a bird

[11:42] <El_Che> holyghost: are you from .be?

[11:42] <holyghost> yes

[11:42] *** pecastro joined
[11:42] <holyghost> The Netherlands

[11:43] <lizmat> .be is not the Netherlands ?

[11:43] <holyghost> it was :-)

[11:43] <El_Che> not since we threw William I over the border :)

[11:43] *** p6bannerbot sets mode: +v pecastro

[11:43] <holyghost> we ventured with some on with some musketeers on foot

[11:44] <holyghost> I don't remember the name

[11:44] <holyghost> split off in 1930

[11:44] <holyghost> s/19/18

[11:45] <holyghost> anyway, I'm a Belgian, Flemish in Brussels

[11:45] <holyghost> not a Walloon :-)

[11:45] <lizmat> holyghost: then maybe you should join El_Che for a Brussels.pm meeting :-)

[11:45] <El_Che> I used to live close to Vandersteen :)

[11:46] <holyghost> You're bruxelles.pm.org, El_Che  ?

[11:46] <El_Che> no, but I know them and sometimes I drop by

[11:46] <holyghost> ok, I work for them

[11:47] <holyghost> I get some 100s of euros each time I release a package

[11:47] <holyghost> I'm not a system hacker

[11:48] <holyghost> El_Che: you're from Antwerp ?

[11:48] <El_Che> yes

[11:48] <holyghost> I cannot CTCP you

[11:49] <holyghost> nazi-town in Belgium :-)

[11:49] <holyghost> I work for Alexandre

[11:49] <holyghost> I wanted to go to a meeting decades ago, also to Munich YAPC

[11:50] <holyghost> I'll join a meeting once but I need more time to code really

[11:51] <holyghost> I'm not a meeting fellow

[11:51] <holyghost> gnoll statutes :-)

[11:52] <holyghost> glad to know where you're from

[11:52] <holyghost> I have a music/graphics codirector in Antwerp

[11:53] <holyghost> for my band "Lost Momentum"

[11:54] <holyghost> lizmat: there's 2 links up above

[11:54] <holyghost> http://www.mediafire.com/file/k71a94bc1xqqbb1/lost-momentum-rage-remix-4.mp3/file

[11:55] <holyghost> That's my latest music with her

[11:55] <holyghost> El_Che: It's a rework from the group "Implant", they're Belgian

[11:56] <holyghost> Rage is one of their songs

[11:56] <holyghost> I tried to mix with Juno reactor, but it isn't easy

[11:58] <holyghost> It's simple but I work on it from time to time in the weekend

[11:58] <holyghost> As I said I'm going to write some perl6 sound modules

[11:58] <holyghost> that's something a reverse engineer can parse :-)

[12:01] <holyghost> lizmat: It's not metal, I'm sorry :-)

[12:02] <holyghost> Anyway, El_Che I'm engoying a Chimay Blue

[12:02] <holyghost> if you like that beer, it's brussels one

[12:03] <El_Che> sorry, somewhat absent, wat working at some code for work

[12:03] <holyghost> ok, nm

[12:07] <lizmat> holyghost: also distracted... and it's woolfy who's very much into metal

[12:07] * lizmat is more of a prog rock person

[12:07] *** Itaipu left
[12:07] <holyghost> woolfy ?

[12:07] *** kudzo__ joined
[12:08] <holyghost> lizmat: sure

[12:08] *** p6bannerbot sets mode: +v kudzo__

[12:08] <holyghost> lizmat: I like new wave which a friend of mine has delivered me

[12:09] <holyghost> lizmat: Covenant for example, it's not funny however

[12:09] *** Itaipu joined
[12:09] <holyghost> lizmat: I prolly cannot talk to woolfy about Metallica, the black album

[12:09] *** p6bannerbot sets mode: +v Itaipu

[12:10] <holyghost> lizmat: I also love "the matrix" film sounds

[12:10] <holyghost> woolfy : see above for good metal from Keanu Reeves

[12:11] *** kudzo_ left
[12:18] *** finanalyst joined
[12:19] *** p6bannerbot sets mode: +v finanalyst

[12:21] <holyghost> lizmat: Is woolfy older than 30 ? else I'll tell him some good sounds

[12:22] <lizmat> one good and one bad assumption  :-)

[12:23] <holyghost> lizmat: If he's young I'd like to tell him about new wave, terefrom

[12:23] *** domidumont joined
[12:23] <El_Che> colder...

[12:23] <El_Che> :)

[12:23] <holyghost> s/terefrom/therefrom

[12:23] <lizmat> two bad assumptions  :-)

[12:24] *** p6bannerbot sets mode: +v domidumont

[12:24] <holyghost> .tell woolfy we need to talk about music, new wave and metal

[12:24] <yoleaux> holyghost: I'll pass your message to woolfy.

[12:24] <holyghost> so there :-)

[12:24] <lizmat> I'll check what the old girl can do for you  :-)

[12:24] <holyghost> girl ?

[12:25] <holyghost> woolfy is a girl ?

[12:25] <El_Che> warmer

[12:25] <holyghost> lol

[12:25] <holyghost> old women make me fry :-)

[12:25] <El_Che> and now she'll hit you

[12:26] <holyghost> anyway, I'll tell her about Covenant, Sepultura and Industrial/Dark wave

[12:26] *** woolfy joined
[12:26] <holyghost> hello

[12:26] <holyghost> Can you see this backlog ?

[12:27] <holyghost> no because I don't run BitchX :-)

[12:27] <El_Che> there are logs

[12:27] <holyghost> woolfy : check the backlog

[12:28] <holyghost> woolfy: we need to talk, kibologist

[12:28] <holyghost> Chaos A.D.

[12:28] <El_Che> holyghost: it sounds you're 40+

[12:29] <El_Che> I remember seeing them around that time

[12:29] <holyghost> El_Che: yes

[12:29] <holyghost> Back  in the day I used a 28.8k modem

[12:29] <holyghost> external

[12:29] <holyghost> in 1995 a simple winsoft modem

[12:29] <El_Che> 14.4 internal :)

[12:30] <holyghost> coolness

[12:30] <holyghost> I'm 41

[12:30] <holyghost> years old

[12:30] <Kaiepi> o/

[12:30] <holyghost> hi

[12:31] <holyghost> Kaiepi: tell us your secrets :-)

[12:31] <Kaiepi> well i'm 22 and a hs dropout

[12:31] <Kaiepi> got my ged though

[12:32] <SmokeMachine> .

[12:32] <yoleaux> 06:15Z <jmerelo> SmokeMachine: to please make a PR for the day you want too. I'll try to take a look today.

[12:32] <holyghost> Kaiepi: ged == ?

[12:32] <Kaiepi> equivalent to a hs diploma

[12:32] <holyghost> ok

[12:33] <SmokeMachine> .tell jmerelo sorry, I didn't get it... PR for what?

[12:33] <yoleaux> SmokeMachine: I'll pass your message to jmerelo.

[12:33] <holyghost> I graduated in 2015, Ph.D in physics and Computer Science

[12:33] <holyghost> in 2002 Mr. CS

[12:33] <Kaiepi> nice

[12:33] <Kaiepi> i plan on going to uni for cs once i get my shit together

[12:33] <holyghost> sure

[12:34] <holyghost> Better read some books then :-)

[12:34] <Kaiepi> got mental health issues and addictions i need to get sorted out first

[12:34] <Kaiepi> what sort of books?

[12:34] <holyghost> the wizard book. the dragon book

[12:34] <holyghost> (TNHD hacker dict)

[12:35] <Kaiepi> ah sicp

[12:35] <holyghost> coolness, I got one there :-)

[12:35] <Kaiepi> dragon book being Compilers: Principles, Techniques, and Tools?

[12:36] <sena_kun> yes

[12:36] <holyghost> yacc and lex

[12:37] <holyghost> the wizard book, scheme meta-evals

[12:37] <holyghost> and an intro to scheme

[12:37] <holyghost> You can then program emacs somewhat :-)

[12:38] *** woolfy left
[12:38] *** titsuki left
[12:39] <Kaiepi> i'm a vim guy

[12:39] *** finanalyst left
[12:39] <holyghost> me too, elvis and BSD vi

[12:40] <holyghost> Kaiepi: anyway take care to grep book in TNHD

[12:41] <holyghost> it's not stupid, old yes, but good for UNIX->Linux

[12:41] <holyghost> s/UNIX/UNIX</

[12:43] * holyghost misses woolfy

[12:43] <holyghost> I thought I could talk about music, with my sounds, I need remixers :-)

[12:44] <lizmat> holyghost: if you want to talk about music, this is probably not the right channel

[12:44] <Kaiepi> tnhd?

[12:45] *** zakharyas left
[12:47] <holyghost> Kaiepi: The New Hacker Dictionary

[12:47] <holyghost> lizmat: ok

[12:47] <holyghost> Kaiepi: if you need help for C++, I'm here

[12:49] <holyghost> Kaiepi: To tell secrets: Effective C, More Effective ++, Effective STL should you get started also C++faqs online

[12:49] <Kaiepi> ah

[12:49] <holyghost> lizmat: I like meta-chat, but music prolly isn't the right channel

[12:50] <holyghost> Kaiepi: so you need those books :-)

[12:50] <holyghost> lizmat: unless I meta-magic it into a package with a remix :-)

[12:50] *** Itaipu left
[12:51] <holyghost> lizmat: See above for sound software from me

[12:51] *** Itaipu joined
[12:52] <holyghost> Kaiepi: I don't like amazon but you can get them 2nd hand for 5$ or so

[12:52] *** p6bannerbot sets mode: +v Itaipu

[12:56] *** fatguy left
[13:21] *** haukex joined
[13:22] *** p6bannerbot sets mode: +v haukex

[13:29] *** finanalyst joined
[13:29] *** p6bannerbot sets mode: +v finanalyst

[13:36] *** damaxi joined
[13:36] *** damaxi is now known as andrzejku

[13:36] *** p6bannerbot sets mode: +v andrzejku

[13:41] <andrzejku> someone saw araraloren here?

[13:41] <andrzejku> araraloren are you there?

[13:41] <andrzejku> /!seen araraloren

[13:41] <andrzejku> !seen araraloren

[13:42] <timotimo> .seen araraloren

[13:42] <yoleaux> I saw araraloren 4 Nov 2018 16:06Z in #perl6: <araraloren> Zoffix okay, thanks :)

[13:42] <El_Che> .seen araraloren

[13:42] <yoleaux> I saw araraloren 4 Nov 2018 16:06Z in #perl6: <araraloren> Zoffix okay, thanks :)

[13:42] <andrzejku> :(

[13:42] <andrzejku> I miss my friend

[13:42] <andrzejku> .seen loren

[13:42] <yoleaux> I saw loren 8 Jul 2016 13:51Z in #perl6: <loren> e, ^_^ .. haha don't mind

[13:45] *** jmerelo joined
[13:46] *** p6bannerbot sets mode: +v jmerelo

[13:47] <jmerelo> O/

[13:47] <yoleaux> 09:47Z <holyghost> jmerelo: I have HashedAgent and Agent tested, you can use the ask routines. If you want to try SFY

[13:47] <yoleaux> 12:33Z <SmokeMachine> jmerelo: sorry, I didn't get it... PR for what?

[13:49] <jmerelo> .tell SmokeMachine I see you did it already. Great!

[13:49] <yoleaux> jmerelo: I'll pass your message to SmokeMachine.

[13:49] <SmokeMachine> .

[13:49] <yoleaux> 13:49Z <jmerelo> SmokeMachine: I see you did it already. Great!

[13:49] <SmokeMachine> jmerelo: :(

[13:49] <SmokeMachine> jmerelo: :)

[13:49] <SmokeMachine> sorry, wrong key...

[13:49] <jmerelo> SmokeMachine: hi! 

[13:50] <SmokeMachine> jmerelo: hi! :)

[13:50] <jmerelo> We could be like that the whole day...

[13:50] <SmokeMachine> :)

[13:51] <jmerelo> I'll take a look at the article. Did someone add you to the WordPress blog?

[13:51] <SmokeMachine> jmerelo: that's not my first perl6 advent calendar post...

[13:51] <jmerelo> SmokeMachine: ah, great, so you're in already 

[13:52] <SmokeMachine> jmerelo: this was my first one: https://perl6advent.wordpress.com/2016/12/22/day-22-generative-testing/

[13:52] <jmerelo> .tell holyghost great to see you're advancing, but while these tests exist, they don't really test all functionality and what $ag is supposed to do. You should check for the return value, change of state or something.

[13:52] <yoleaux> jmerelo: I'll pass your message to holyghost.

[13:53] <jmerelo> SmokeMachine: I remember that one. Very interesting. Didn't remember it was yours, though...

[13:54] *** sjoshi joined
[13:54] <SmokeMachine> thanks

[13:55] *** p6bannerbot sets mode: +v sjoshi

[13:56] *** scimon joined
[13:57] *** p6bannerbot sets mode: +v scimon

[13:58] <holyghost> jmerelo: I'm here

[13:58] <yoleaux> 13:52Z <jmerelo> holyghost: great to see you're advancing, but while these tests exist, they don't really test all functionality and what $ag is supposed to do. You should check for the return value, change of state or something.

[13:59] <holyghost> jmerelo: I'll extend test functionality

[13:59] <holyghost> I almost fell asleep

[14:00] <jmerelo> holyghost: would it be possible that you refrain from uploading new versions to CPAN while your tests are not completed?

[14:00] <holyghost> no if I comprehend

[14:00] <holyghost> cpan and github are synced

[14:01] <holyghost> I was working on Mathx::Stat tests (2)

[14:01] <holyghost> anyway, the base class dipatch of the Agent.pm6 works

[14:01] <holyghost> s/dipatch/dispatch

[14:01] <jmerelo> holyghost: how come? You have to specifically upload to cpan. That's what I do, at least. New version, make dist, upload to CPAN.

[14:02] <holyghost> eco: AI::Agent

[14:02] <buggable> holyghost, Failed to decode result JSON: 

[14:02] <jmerelo> holyghost: works as in it's thoroughly tested in any aspect and I also provide an example so that people can use it?

[14:02] <holyghost> jmerelo: works in the meaning,

[14:03] <holyghost> with an example yes in t/make-agent.t

[14:03] <holyghost> it's a superclass however, which I might need to extend to test

[14:03] <timotimo> yes, definitely

[14:03] <holyghost> That's what AI-Agent-Music is used in

[14:04] <jmerelo> holyghost: that's not an example, it's a test, it just tests that it does not crash, it does not test for actual state change or for the actual functionality

[14:04] <timotimo> you can write tests that look like code you'd expect your users to write

[14:04] <timotimo> plus a bunch of verification code that everything does what you expect

[14:04] <holyghost> sure, I'll have to extend then

[14:04] <jmerelo>  timotimo: from my point of view, tests in many cases can be used as examples, if they clearly express intent beyond the syntax. That's not the case here.

[14:05] <holyghost> with my excuses, I wrote a simple test _script_, I might want tot use OOP for it

[14:05] <holyghost> s/tot/to

[14:06] <jmerelo> timotimo: "my $ag = AI::Agent::Agent.new( x => 0 );" does not say what x is for, or what kind of values it can take, or anything. The other test uses a dummy message, with an empty %optargs, and is also OK. You are none the wiser about what that object is supposed to do.

[14:07] <jmerelo> holyghost: it's also customary to have the base class with the same name as the module. In your case, it would probably be the best to create an lib/AI/Agent.pm6 which would hold the base class (which if I understand is now in AI::Agent::Agent)

[14:08] <holyghost> jmerelo: note my $msg = "ask about";

[14:08] <holyghost> jmerelo: it's not an empty message 2nd time

[14:09] <Ulti> if I want to find all the substrings that match a given grammar is there a nice way to do that?

[14:09] *** jmerelo left
[14:09] <Ulti> parse is like the entire string is going to match TOP rather than looking for all the matches within like a regex

[14:10] <sena_kun> Ulti, with overlapping substrings possible?

[14:10] <Ulti> preferably not but I'd take that

[14:10] <jnthn> Ulti: Probably $str.match(/<TheGrammar::TOP>/, :g) does it

[14:10] <sena_kun> well, I don't know about overlapping ones(well, except for bruteforce char-by-char), but, oh, I'm late. :)

[14:11] <Ulti> ok so thats like taking TOP out as a regex

[14:11] *** holyghost left
[14:11] <jnthn> and I think pass :ov to get overlapping ones if you did want them

[14:12] <Ulti> thanks

[14:19] *** holyghost joined
[14:20] *** p6bannerbot sets mode: +v holyghost

[14:24] <holyghost> timotimo: you would like me to write a full test (OO) for the AI::Agent::Agent class ?

[14:25] <holyghost> to interleave

[14:27] <timotimo> sorry, i'm too busy with other stuff to write the tests for you

[14:27] <holyghost> ok

[14:28] <timotimo> but i imagine you would have a "class TestAgent is AI::Agent::Agent { ... }" implement some methods, and then do some stuff with it and see if what it did matches with what it was supposed to do

[14:29] <holyghost> timotimo: with all due respect those are overridden methods

[14:29] <holyghost> timotimo: the sole keyword as a message to self.dispatch is "ask about"

[14:30] <holyghost> timotimo: which answers the correct string

[14:31] <holyghost> to dispatch an agent I would have 2 agents which just return a &self.ask_agentmethod, which means it has to parse the dispatched agent

[14:31] <timotimo> OK, then the tests could also be "try creating a class that doesn't re-implement all necessary methods and make sure that it throws an exception"

[14:31] <holyghost> that's not the point of AI::Agent::Agent, it is a base class for the parsing stuff

[14:32] <holyghost> timotimo: that's already in

[14:32] <holyghost> the 2 tests

[14:32] <timotimo> OK

[14:32] <holyghost> else you just call a method on an instance which constructs nicely in t/

[14:32] <timotimo> i'm not the best at testing code, either

[14:33] <holyghost> it's not my kind of thing also

[14:33] <timotimo> but for every piece of code you have in the module, you should try to find a way to test that it does what you hope

[14:34] <holyghost> that's ok except parsing other agents return a &$agent.dispatch

[14:34] <holyghost> that's incomputable in a test

[14:34] <holyghost> where dispatch is the double dispatched agent's dispatch method

[14:35] <holyghost> with an ok syntax

[14:35] <holyghost> it's a ref

[14:35] <holyghost> scalar vs. ref

[14:36] *** kerframil left
[14:37] <holyghost> anyway, the dispatch proc works, so there shouldn't be much of a problem anymore

[14:38] <holyghost> dispatch of "ask about"

[14:38] <holyghost> message

[14:38] *** pmurias joined
[14:38] *** p6bannerbot sets mode: +v pmurias

[14:39] <holyghost> dispatch of message "agent" gives &$agent.dispatch

[14:39] <holyghost> that's all the base class does

[14:39] <holyghost> So I'm half right :-)

[14:40] <holyghost> pmurias: check out AI::Agent, my 1st 2 tests

[14:42] *** Itaipu left
[14:43] *** broquaint left
[14:43] *** broquaint joined
[14:44] *** p6bannerbot sets mode: +v broquaint

[14:44] <holyghost> hail to broquaint 

[14:46] *** Itaipu joined
[14:47] *** p6bannerbot sets mode: +v Itaipu

[14:52] <holyghost> lizmat: hail to Itaipu !

[14:53] *** reportable6 left
[14:53] *** reportable6 joined
[14:53] <holyghost> woolfy: hail to Itaipu !

[14:53] *** p6bannerbot sets mode: +v reportable6

[14:55] <holyghost> Oh, they're not online :-)

[14:55] *** undersightable6 left
[14:55] *** undersightable6 joined
[14:56] *** p6bannerbot sets mode: +v undersightable6

[14:58] *** kurahaupo left
[14:58] *** kurahaupo joined
[14:59] *** p6bannerbot sets mode: +v kurahaupo

[15:02] *** zakharyas joined
[15:02] <holyghost> hail to zakharyas 

[15:03] *** p6bannerbot sets mode: +v zakharyas

[15:05] <holyghost> hello, what  you've been up to zakharyas ?

[15:07] <holyghost> I remember that zakharyas was the name of an elder necrarch, zakharyas the everliving. An vampire

[15:09] <jdv79> anyone know about this?:  https://nopaste.xyz/?285372ce79885ca5#Y8Bo85i5YZ10b6xZZwA9EGrZ8xdppHaQ70jmxj9Ae6I=

[15:13] *** sergot left
[15:13] *** dalek joined
[15:13] *** ChanServ sets mode: +v dalek

[15:14] *** Geth_ joined
[15:14] *** synopsebot_ joined
[15:14] *** p6lert_ joined
[15:14] *** ChanServ sets mode: +v Geth_

[15:14] *** ChanServ sets mode: +v synopsebot_

[15:14] *** synopsebot left
[15:14] *** Geth left
[15:14] *** p6bannerbot sets mode: +v dalek

[15:14] *** p6bannerbot sets mode: +v synopsebot_

[15:14] *** p6bannerbot sets mode: +v p6lert_

[15:15] *** parv left
[15:15] *** p6lert left
[15:15] *** SourceBaby left
[15:15] <Geth_> ¦ whateverable: 6216854099 | (Aleks-Daniel Jakimenko-Aleksejev)++ | xbin/Undersightable.p6

[15:15] <Geth_> ¦ whateverable: Remove 6lang.party

[15:15] <Geth_> ¦ whateverable: 

[15:15] <Geth_> ¦ whateverable: It's no longer a thing

[15:15] <Geth_> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/6216854099

[15:17] <jdv79> .tell jnthn i'm not sure who else to ask - https://nopaste.xyz/?285372ce79885ca5#Y8Bo85i5YZ10b6xZZwA9EGrZ8xdppHaQ70jmxj9Ae6I=

[15:17] <yoleaux> jdv79: I'll pass your message to jnthn.

[15:18] *** Sgeo__ joined
[15:19] *** p6bannerbot sets mode: +v Sgeo__

[15:20] *** Sgeo_ left
[15:21] <holyghost> jdv79: if you paste in pastebin.com I might be of some help

[15:21] <holyghost> I don't parse upper SSL

[15:22] <lizmat> m: dd my %args = :a([1,2,3]) # jdv79 

[15:22] <camelia> rakudo-moar fa5215b61: OUTPUT: «Hash %args = {:a($[1, 2, 3])}␤»

[15:22] <lizmat> when you put the array into the hash, it gets itemized

[15:23] <lizmat> because the Array object is put into a container

[15:23] <lizmat> because a Hash is mutable

[15:23] <lizmat> m: my %args is Map = a => [1,2,3]

[15:23] <camelia> rakudo-moar fa5215b61: ( no output )

[15:24] <lizmat> m: dd my %args is Map = a => [1,2,3]

[15:24] <camelia> rakudo-moar fa5215b61: OUTPUT: «Map.new((:a([1, 2, 3])))␤»

[15:24] <jdv79> i realize that.  my question is is there a way to get around that in this case.

[15:24] <lizmat> a Map doesn't have that issue

[15:24] <lizmat> m: class C { has @.a }; my @foo = 1,2,3; my %args is Map = :a(@foo); my $c = C.new(|%args); $c.say

[15:24] <camelia> rakudo-moar fa5215b61: OUTPUT: «C.new(a => [1, 2, 3])␤»

[15:25] *** Manifest1 joined
[15:25] *** p6bannerbot sets mode: +v Manifest1

[15:29] <holyghost>  m: class C { has @.a;  }; my bar (%args) { } my @foo = 1,2,3; my %args is Map = :a(@foo); my $c = C.new(bar(|%args)); $c.say

[15:29] <camelia> rakudo-moar fa5215b61: OUTPUT: «5===SORRY!5===␤Type 'bar' is not declared␤at <tmp>:1␤------> 3class C { has @.a;  }; my bar7⏏5 (%args) { } my @foo = 1,2,3; my %args i␤Malformed my␤at <tmp>:1␤------> 3class C { has @.a;  }; my7⏏5 bar (%args) { } my @foo = 1…»

[15:29] <jdv79> lizmat: ah.  i see it now.  its buried in the Signatures doc page

[15:30] <holyghost>  m: class C { has @.a;  }; my bar (%args) { } my @foo = 1,2,3; my %args is Map = :a(@foo); my $c = C.new(C.bar(|%args)); $c.say

[15:30] <camelia> rakudo-moar fa5215b61: OUTPUT: «5===SORRY!5===␤Type 'bar' is not declared␤at <tmp>:1␤------> 3class C { has @.a;  }; my bar7⏏5 (%args) { } my @foo = 1,2,3; my %args i␤Malformed my␤at <tmp>:1␤------> 3class C { has @.a;  }; my7⏏5 bar (%args) { } my @foo = 1…»

[15:30] <holyghost> lizmat: is they're a wat to apply sub bar to %args ?

[15:30] <holyghost> s/wat/way

[15:31] <holyghost> to be honest, I'm looking for simple "apply" routine

[15:31] <jdv79> oof.  maybe that shoudl be on the Slip page too.  idk.  doc'ing such a "deep" lang seems hard.

[15:31] *** Itaipu left
[15:31] *** pmurias left
[15:31] <jdv79> thanks

[15:32] <lizmat> jdv79: yw

[15:32] *** Itaipu joined
[15:32] <lizmat> holyghost: perhaps start by making "bar" a method and making sure the number of opening curlies matches the number of closing curlies?

[15:33] *** p6bannerbot sets mode: +v Itaipu

[15:34] <holyghost>  m: class C { has @.a;  }; my bar (%args) { }; my @foo = 1,2,3; my %args is Map = :a(@foo); my $c = C.new(C.bar(|%args)); $c.say

[15:34] <camelia> rakudo-moar fa5215b61: OUTPUT: «5===SORRY!5===␤Type 'bar' is not declared␤at <tmp>:1␤------> 3class C { has @.a;  }; my bar7⏏5 (%args) { }; my @foo = 1,2,3; my %args ␤Malformed my␤at <tmp>:1␤------> 3class C { has @.a;  }; my7⏏5 bar (%args) { }; my @foo = …»

[15:35] <holyghost>  m: class C { has @.a;   my bar (%args) { }; };  my @foo = 1,2,3; my %args is Map = :a(@foo); my $c = C.new(C.bar(|%args)); $c.say

[15:35] <camelia> rakudo-moar fa5215b61: OUTPUT: «5===SORRY!5===␤Type 'bar' is not declared␤at <tmp>:1␤------> 3class C { has @.a;   my bar7⏏5 (%args) { }; };  my @foo = 1,2,3; my %a␤Malformed my␤at <tmp>:1␤------> 3class C { has @.a;   my7⏏5 bar (%args) { }; };  my @foo = …»

[15:35] <holyghost>  m: class C { has @.a;   method bar (%args) { }; };  my @foo = 1,2,3; my %args is Map = :a(@foo); my $c = C.new(C.bar(|%args)); $c.say

[15:35] <camelia> rakudo-moar fa5215b61: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in method bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:36] <holyghost> lizmat: ^--

[15:38] <holyghost> I've solved it with a :

[15:38] <holyghost> method dispatch($message, %optargs) {

[15:38] <holyghost>                 unless $!done {

[15:38] <holyghost>                         self.dispatch($message, %optargs) for %!dependencies;

[15:38] <holyghost>                         $!done = True;

[15:38] <holyghost>                 }

[15:38] <holyghost>         }

[15:38] <holyghost> lizmat: same thing

[15:38] <holyghost> method BUILD() {

[15:38] <holyghost>                 self.add-dependency(&self.ask);

[15:38] <holyghost>                 self.add-dependency(&self.agent);

[15:38] <holyghost>         }

[15:38] <holyghost>         method add-dependency($dependency) {

[15:38] <holyghost>                 %.dependencies{$dependency.name => $dependency};

[15:38] <holyghost>         }

[15:39] <holyghost> sorry about the flood, just showing

[15:40] <El_Che> holyghost: use a paste service

[15:40] <holyghost> I'm sorry

[15:40] <lizmat> holyghost: the "bar" method expects an Associative.  You're flattening the hash in the call to named parameters.  dispatch will fail, because you don't pass a hash as a positional

[15:40] <lizmat> either don't slip the hash in the call, or make the parameter of "bar" a slurpy hash

[15:41] <holyghost> https://pastebin.com/YaP9wAQT

[15:42] <jnthn> .tell jdv79 Do `%foo<a> := @foo` when building the thing to not have the Scalar containers in the first place, or `|%h.Map` to get rid of them

[15:42] <yoleaux> 15:17Z <jdv79> jnthn: i'm not sure who else to ask - https://nopaste.xyz/?285372ce79885ca5#Y8Bo85i5YZ10b6xZZwA9EGrZ8xdppHaQ70jmxj9Ae6I=

[15:42] <yoleaux> jnthn: I'll pass your message to jdv79.

[15:42] <scimon> Hey all

[15:43] <lizmat> scimon o/

[15:43] <timotimo> holyghost: i don't think "&self.ask" is what you think it is

[15:43] <timotimo> greetings scimon 

[15:43] * lizmat continues working on the P6W

[15:45] <holyghost> timotimo: I should know my refs

[15:45] <holyghost> it dispatches in method dispatch correctly

[15:45] <timotimo> you know that perl6 doesn't have refs any more, right?

[15:46] <holyghost> method refs should work ?

[15:46] <timotimo> not like you wrote in your code

[15:47] <timotimo> did you ever try to see if %.dependencies contains what you expected?

[15:47] <timotimo> in that code, i mean?

[15:47] <holyghost> eco: AI::Agent

[15:47] <buggable> holyghost, AI::Agent 'AI network Agent system, Music Link Agent': http://cpan.metacpan.org/authors/id/H/HO/HOLYGHOST/Perl6/AI-Agent-Music-0.2.4.tar.gz 1 other matching results: https://modules.perl6.org/s/AI%3A%3AAgent

[15:48] <holyghost> ^-- check those tests

[15:48] <holyghost> oh AI-Agent has disappeared 

[15:48] <holyghost> maybe try zef AI::Agent

[15:49] <holyghost> s/zef/zef install 

[15:49] <holyghost> the tests of AI-Agent work

[15:50] <jdv79> jnthn: thanks!

[15:50] <yoleaux> 15:42Z <jnthn> jdv79: Do `%foo<a> := @foo` when building the thing to not have the Scalar containers in the first place, or `|%h.Map` to get rid of them

[15:51] <timotimo> holyghost: how can you be sure it does anything at all?

[15:52] <holyghost> timotimo: This is my test file: https://pastebin.com/Pi8JKurh

[15:53] <timotimo> that's what i'm looking at right now

[15:54] <timotimo> what do you make of the 8 warnings it outputs?

[15:54] <holyghost> It passes 2 tests on mu machine

[15:54] <holyghost> s/mu/my

[15:54] <holyghost> timotimo: nothing because of the ok $hag.dispatch ...

[15:54] <timotimo> ?

[15:55] <holyghost> it returns the correct value, AI::Agent::HashedAgent should be used as a superclass as I mentioned before

[15:55] <holyghost> it dispatches a correct $msg

[15:56] <timotimo> how do you know?

[15:56] <holyghost> you can then call it by AI::Agent::HashedAgent.ask

[15:56] *** cydf left
[15:57] <timotimo> the tests don't seem to test HashedAgent.ask at all, though?

[15:57] <holyghost> timotimo: https://pastebin.com/DXusjsAG

[15:58] <timotimo> i think you're misunderstanding what "ok" does

[15:58] <holyghost> timotimo: no because it has not been superclassed

[15:58] <timotimo> ok is a passed test if the result is true-ish

[15:58] <timotimo> and the text after that is what it shall output as the "name" of the test

[15:58] <timotimo> see what happens when you change the text after the "ok $ag.dispatch($msg, %optargs)" line

[16:00] <holyghost> $ag and $hag are different instances

[16:00] <timotimo> yeah

[16:00] <holyghost> so is the ok return value

[16:00] <timotimo> try it with both

[16:00] *** kurahaupo left
[16:00] *** domidumont left
[16:00] <holyghost> my $num-tests = 2;

[16:00] *** kurahaupo joined
[16:01] <timotimo> i have another suggestion

[16:01] *** kurahaupo left
[16:01] <timotimo> try what happens when you dispatch the same message a second time on the same instance

[16:01] *** kurahaupo joined
[16:01] <timotimo> with a second test that looks just the same

[16:01] <timotimo> and adjust the $num-tests to 3, of course

[16:01] <timotimo> you will find that the second time you dispatch the same message it will fail

[16:02] <buggable> New CPAN upload: Template-Anti-0.5.2.tar.gz by HANENKAMP http://modules.perl6.org/dist/Template::Anti:cpan:HANENKAMP

[16:02] *** p6bannerbot sets mode: +v kurahaupo

[16:02] <timotimo> it's because your test tests whether the return value of the dispatch method is truthy

[16:02] <timotimo> a method without an explicit "return" will return the value of the last statement in it

[16:02] *** jast left
[16:03] <timotimo> the last statement in your dispatch method is the "unless" block, which does the same thing: it returns the value of its last statement inside, which is $!done = True. the result of that is True, so dispatch returns True the first time. the second time the unless block doesn't run and the return value is Nil

[16:04] *** troys joined
[16:04] <holyghost> ok

[16:04] <timotimo> and i'll tell you right now, the dependencies attribute does not have in it what you expect, you should check it, perhaps in the BUILD submethod (please make it a submethod)

[16:04] *** p6bannerbot sets mode: +v troys

[16:04] *** jast joined
[16:05] *** jmerelo joined
[16:05] *** p6bannerbot sets mode: +v jast

[16:06] *** p6bannerbot sets mode: +v jmerelo

[16:06] <timotimo> perhaps dd it for more clarity than you get when you just "say" it

[16:06] <timotimo> AFK

[16:09] *** Itaipu left
[16:12] *** Itaipu joined
[16:12] *** ExtraCrispy joined
[16:12] *** p6bannerbot sets mode: +v ExtraCrispy

[16:12] *** p6bannerbot sets mode: +v Itaipu

[16:13] <holyghost> timotimo: thx, I need to redesign my hash

[16:13] <timotimo> oh, another thing: "zef test" will not output your test's output, so you can more easily miss stuff, like debug output. i recommend running the tests with "perl6 -I lib t/foo.t" instead so you can see everything

[16:14] <timotimo> i see the docs have nothing about methodrefs

[16:15] <timotimo> but methodrefs don't exist in the same way as they did in perl5

[16:15] <holyghost> timotimo: ?

[16:15] <timotimo> you either use a little curly block as a closure over self, or you get the method from the object with .^find_method("methodname")

[16:15] <jmerelo> timotimo: well, refs in general.

[16:16] <timotimo> jmerelo: refs don't exist, but methodrefs exist even less

[16:16] <timotimo> they don't-exist very strongly

[16:16] <timotimo> they un-exist to a higher degree than simply not being there

[16:16] <jmerelo> timotimo: they don't++ exist

[16:16] <jmerelo> timotimo: they don't even meta-exist

[16:16] <timotimo> they (exist := -Inf)

[16:17] * jmerelo lols

[16:17] <holyghost> +1

[16:17] <haukex> Hi all! Thought you might be interested: http://webperl.zero-g.net/perl6.html

[16:17] <timotimo> AFK

[16:17] <holyghost> jmerelo: so method refs are unofficial ?

[16:18] <holyghost> coolness, I'll look it up later on, method refs as timotimo says should be basic perl6

[16:19] <holyghost> as in C++ STL

[16:19] <jmerelo> holyghost: you can simply, if you use the correct syntax, store a callable that calls an object method in a container. But the whole pointer/reference thing does not exist in Perl 6

[16:21] <holyghost> jmerelo: by usinng @!dependencies ?

[16:21] <holyghost> the above is simply offensive

[16:21] <jmerelo> holyghost: not exactly. Let's just say you can do it.

[16:22] <holyghost> that's a cored system AFAIK

[16:22] <holyghost> anyway, I just wanted a hash of methods

[16:23] <holyghost> not an array :-|

[16:24] <holyghost> smalltalk uses a dictionary for class methods

[16:24] *** Itaipu left
[16:24] *** cydf joined
[16:24] <holyghost> anyway, I'll have to redesign

[16:24] *** Itaipu joined
[16:25] *** p6bannerbot sets mode: +v cydf

[16:25] <holyghost> jmerelo: with all due respect, AI::Agent::Agent is usable

[16:25] <holyghost> not AI::Agent::HashedAgent

[16:25] *** p6bannerbot sets mode: +v Itaipu

[16:25] <jmerelo> holyghost: I'm not saying otherwise

[16:26] <holyghost> np

[16:26] <jmerelo> What I'm saying is that it's costumary to have the main class in a module to have the same name as the module.

[16:26] <holyghost> ok

[16:26] <jmerelo> You have no AI::Agent actual class, nor an AI/Agent.pm6 file which includes documentation and somesuch

[16:27] <jmerelo> Please not I'm not saying that it's usable either. Just that if you want to build a module, that's the usual thing.

[16:27] *** pmurias joined
[16:27] *** p6bannerbot sets mode: +v pmurias

[16:27] *** vike1 left
[16:27] <holyghost> I will take a look at it tomorrow, it's 5:29 pm here, I've started coding since 3am

[16:27] <jmerelo> If people install an X::Y, they will want to do an use X::Y to use it, not an X::Y::Y (or whatever).

[16:28] <pmurias> haukex: super cool :)

[16:28] <pmurias> exit

[16:28] *** pmurias left
[16:29] *** pmurias joined
[16:29] *** p6bannerbot sets mode: +v pmurias

[16:29] *** TimToady left
[16:29] *** TimToady joined
[16:29] *** tolkien.freenode.net sets mode: +v TimToady

[16:29] *** p6bannerbot sets mode: +v TimToady

[16:30] <haukex> pmurias: oh, hi! Rakudo.js is super cool ;-) I just sent you an email a second ago

[16:31] *** andrzejku left
[16:32] <pmurias> haukex: I have heard of webperl recently, I was even thinking how interop between the too should work

[16:33] <jmerelo> Hi, TimToady :-)

[16:33] <haukex> pmurias: I already gave that a try :-) https://github.com/haukex/webperl/blob/master/experiments/p6/test6.html

[16:33] * TimToady is officially back from vacation, but completely trashed due to helping SoCal family deal with wildfire evacuations (nothing of ours burnt down, thankfully), and now I get to breathe all the smoke in NorCal, so it's gonna be a while before I'm back in sync enough to act like a BDFL...and maybe that's a good thing :)

[16:33] <yoleaux> 7 Nov 2018 12:07Z <Zoffix> TimToady: please respond to https://github.com/perl6/user-experience/issues/33

[16:34] <holyghost> TimToady: wb

[16:34] <jmerelo> TimToady: you've literally been in hell and back...

[16:35] <haukex> pmurias: I'll be AFK for dinner now, hopefully back later

[16:35] <El_Che> TimToady: there priorities in life. It's good you know yours. I hope you and your family and friends are well.

[16:35] * holyghost is AFK

[16:41] *** vike1 joined
[16:42] *** p6bannerbot sets mode: +v vike1

[16:49] <timotimo> haukex: oooh nice

[16:50] <timotimo> so, can someone explain to me why this happens:

[16:50] <timotimo> m: class test { method a { say &self } }; test.a

[16:50] <camelia> rakudo-moar fa5215b61: OUTPUT: «Nil␤»

[16:51] <timotimo> we generate an ifnull for the lexical &self, and if it's null we return Nil

[16:51] *** zakharyas left
[16:51] <timotimo> but for other names it doesn't do that

[16:51] <timotimo> m: class test { method a { say &foobar } }; test.a

[16:51] <camelia> rakudo-moar fa5215b61: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    foobar used at line 1␤␤»

[16:51] <timotimo> unsurprisingly

[16:51] <timotimo> greppable6: &self

[16:51] <greppable6> timotimo, Found nothing!

[16:52] *** reportable6 left
[16:52] *** reportable6 joined
[16:52] <timotimo> i don't seem to find any mention of "&self" in the spec tests

[16:52] *** p6bannerbot sets mode: +v reportable6

[16:53] *** lucasb joined
[16:54] *** p6bannerbot sets mode: +v lucasb

[16:55] <SmokeMachine> m: my \bla = 1; say &bla

[16:55] <camelia> rakudo-moar fa5215b61: OUTPUT: «Nil␤»

[16:55] <SmokeMachine> timotimo: that's it? ^^

[16:56] <SmokeMachine> m: class test { method a(\foobar:) { say &foobar } }; test.a

[16:56] <camelia> rakudo-moar fa5215b61: OUTPUT: «Nil␤»

[16:57] <holyghost> timotimo, jmerelo : $!done stays True while reloading HashedAgent.dispatch, so 2 tests do not fail

[16:57] <SmokeMachine> timotimo: isnt & "working" with any sigilless var?

[16:58] * lizmat is glad to hear TimToady is ok

[16:59] <timotimo> weird, because the lexical lookup is still for &bla in that case

[17:01] <pmurias> rakudo.js update: http://blogs.perl.org/users/pawel_murias/2018/11/rakudojs-update---running-tests.html

[17:02] <timotimo> can't read that right now because the cat is expecting to get fed and is standing in front of my screen

[17:02] <timotimo> pmurias: "exciting" instead of "exiting" in the last line :)

[17:03] <timotimo> pmurias++

[17:03] <lucasb> https://github.com/haukex/webperl/blob/master/experiments/p6/webperl6.js#L31-L41

[17:03] <lucasb> ^^ Raku =^.^=

[17:05] *** scotticles joined
[17:06] *** p6bannerbot sets mode: +v scotticles

[17:06] <scotticles> currently looking at learning perl6, wanting to do some web stuff is Cro the best option to build on?

[17:06] *** Itaipu left
[17:06] <Geth_> ¦ doc: a8a25c0e42 | Coke++ | doc/Type/Any.pod6

[17:06] <Geth_> ¦ doc: Statements need to end with ;

[17:06] <Geth_> ¦ doc: review: https://github.com/perl6/doc/commit/a8a25c0e42

[17:06] <synopsebot_> Link: https://doc.perl6.org/type/Any

[17:06] <jmerelo> scotticles: probably. Best of luck, and come back here if you need help

[17:07] <MasterDuke> scotticles: there's also #cro

[17:08] <timotimo> cro is pretty good, though it doesn't yet bring its own templating and such (there is something experimental in a repo called cro-webapp, though)

[17:08] <scotticles> ah ok, thanks, also is DBI still best to use the p5 include to handle databases or is there something for perl6

[17:08] <sena_kun> scotticles, it may be. but don't assume Cro is web-framework like django/dancer/etc, it is more of microsevice building tool(with nice modules built for HTTP), so things like database access and templating are not out of the box.

[17:08] <timotimo> Db::Pg or what it's called if you have a postgres database

[17:08] <timotimo> otherwise DBIish will do what you need

[17:09] <timotimo> DBIish also does postgres

[17:09] <timotimo> but DB::Pg does it better

[17:09] <jmerelo> scotticles: there's DBIish, which includes several databases, and they there's RED, an ORM by SmokeMachine which gives you a high-level interface

[17:09] <scotticles> yeah i should use postgres for this project, its been on my todo list for a long time of learning it vs using mysql

[17:09] <scotticles> thanks this will get me going

[17:09] <kensanata> I've been using Cro with Template::Mustache and that worked very well.

[17:10] *** Itaipu joined
[17:11] *** sjoshi left
[17:11] *** finanalyst left
[17:11] *** p6bannerbot sets mode: +v Itaipu

[17:11] <SmokeMachine> scotticles: if you'd like to use a ORM, I think Red is a good choose: http://github.com/FCO/Red

[17:12] <jmerelo> SmokeMachine: :-) see above ^^^

[17:12] <SmokeMachine> jmerelo: I saw it! thanks! :)

[17:12] <jmerelo> SmokeMachine++

[17:13] <scotticles> havn't considered an ORM , so used to writing sql. But i'll look into Red, might as well.

[17:14] <SmokeMachine> jmerelo: sorry being boring you.... but had you had time to see the current version of the post?

[17:14] <timotimo> i've got a project right now where i use cro + sqlite in the backend and react.js in the frontend

[17:15] <timotimo>  the one thing i wish would be better is compile times whenever i update the component that currently has all the database queries in it

[17:15] <timotimo> i might build a middleware of some kind that lets me edit the queries in the browser and re-run if i don't like the results :D

[17:16] <SmokeMachine> timotimo: why dont you try to use Red?

[17:16] <timotimo> because i mostly just pull stuff out of the DB and pass it on as json :)

[17:16] <jmerelo> SmokeMachine: I have a deadline for a conference today, and I'm really busy with a couple of papers... Check out my GH activity.

[17:16] <jmerelo> Plus classes...

[17:16] *** Itaipu left
[17:16] *** rindolf left
[17:16] <timotimo> in the future i may even let sqlite generate the json directly in some cases

[17:17] <SmokeMachine> jmerelo: sorry...

[17:17] <timotimo> but i'd be interested to hear from you if you can see much benefit that RED could give based on my code

[17:17] <timotimo> i'll give you a link

[17:17] *** Itaipu joined
[17:18] <SmokeMachine> timotimo: :)

[17:18] <timotimo> https://github.com/timo/moarperf/blob/master/lib/ProfilerWeb.pm6#L123 - for example

[17:18] *** p6bannerbot sets mode: +v Itaipu

[17:19] <pmurias> timotimo: thanks for spoting the typo ;)

[17:20] <SmokeMachine> timotimo: yes... I dont think Red can help you yet... but it will in the near future! :)

[17:21] <timotimo> wow, how?

[17:24] <SmokeMachine> timotimo: there are some of your queries that could be beneficied by Red... the simpler ones...

[17:25] <timotimo> right

[17:25] <timotimo> do you happen to have any experience with sqlite and recursive queries? :)

[17:25] <SmokeMachine> timotimo: for example: https://www.irccloud.com/pastebin/BqTbD7SO/

[17:26] <timotimo> actually, i'm done with that particular can of worms

[17:26] <timotimo> and i won't revisit that any time soon :D

[17:27] <SmokeMachine> timotimo: if calls where a Red model, could be written as: `Calls.^all.grep(*.id == $id).map: { .id, .parent, .routine }`

[17:27] *** domidumont joined
[17:28] <timotimo> does that build an efficient sql query?

[17:28] <SmokeMachine> yes, the same you wrote...

[17:28] *** p6bannerbot sets mode: +v domidumont

[17:28] <timotimo> cool

[17:28] <timotimo> gotta look at the implementation at some point :)

[17:29] *** sjoshi joined
[17:29] *** dakkar left
[17:29] *** p6bannerbot sets mode: +v sjoshi

[17:30] *** scimon left
[17:30] <SmokeMachine> timotimo: take a look at this sample: https://github.com/FCO/Red/wiki/Features-Sample

[17:30] <timotimo> does it break down if you have something like .map: { .id, (.parent if .id > 10), .routine }, too?

[17:31] <SmokeMachine> timotimo: currently yes...

[17:31] <timotimo> then i have a clue how you might have implemented that :D

[17:31] <SmokeMachine> :)

[17:32] <SmokeMachine> timotimo: would you like to guess?

[17:33] <timotimo> you first pass an "information collector" object to the block that map gets

[17:33] <timotimo> to find out what columns are asked for

[17:33] <SmokeMachine> that's it...

[17:33] <timotimo> i might have done the same thing

[17:33] <SmokeMachine> not only to .map...

[17:33] <timotimo> right

[17:34] <timotimo> and you probably have implementations of &infix:<==> and friends, too

[17:34] <SmokeMachine> timotimo: thats it!

[17:34] <timotimo> you could even support user-provided infix operators with sql's custom functions :D

[17:34] <SmokeMachine> timotimo: https://github.com/FCO/Red/blob/master/lib/Red/Operators.pm6

[17:35] <timotimo> but that reaches into "terribly clever" territory

[17:36] <SmokeMachine> timotimo: what do you mean with  "terribly clever"?

[17:37] <SmokeMachine> timotimo: I have a lot to do with Red yet... but i think its going to become very good to use...

[17:39] <timotimo> are you considering exhaustively mapping the decision states of such grep and map functions? since you already know all comparisons and computations that happen

[17:39] <tobs`> Can I tell List.reduce to be "right-associative" somehow? As in I want <a b c>.reduce(&f) to compute f(a, f(b, c)) instead of f(f(a, b), c).

[17:39] <timotimo> m: say &infix:<**>.assoc

[17:39] <camelia> rakudo-moar fa5215b61: OUTPUT: «No such method 'assoc' for invocant of type 'Sub+{is-pure}+{Precedence}'␤  in block <unit> at <tmp> line 1␤␤»

[17:39] <jmerelo> tobs`: using reverse?

[17:39] <timotimo> m: say &infix:<**>.^assoc

[17:39] <camelia> rakudo-moar fa5215b61: OUTPUT: «No such method 'assoc' for invocant of type 'Perl6::Metamodel::ClassHOW'␤  in block <unit> at <tmp> line 1␤␤»

[17:39] <timotimo> how does assoc, hmm.

[17:39] <timotimo> m: say &infix:<**>.^methods

[17:39] <camelia> rakudo-moar fa5215b61: OUTPUT: «(prec is-pure soft <anon> yada <anon> <anon> <anon> perl <anon> wrap <anon> <anon> <anon> <anon> <anon> onlystar multi <anon> <anon> gist leave package <anon> <anon> cando candidates <anon> unwrap <anon> BUILDALL set_why <anon> has-phasers fire_phaser…»

[17:39] <timotimo> m: say &infix:<**>.prec

[17:39] <camelia> rakudo-moar fa5215b61: OUTPUT: «{assoc => right, prec => w=}␤»

[17:40] <timotimo> ah, of course

[17:40] <SmokeMachine> timotimo: sorry, I didnt understand... what?

[17:40] <timotimo> m: sub f($a, $b) is assoc<right> { say "<$a, $b>"; $a ~ $b }; <a b c d>.reduce(&f)

[17:40] <camelia> rakudo-moar fa5215b61: OUTPUT: «<c, d>␤<b, cd>␤<a, bcd>␤»

[17:40] <timotimo> tobs`: is that it?

[17:41] <timotimo> SmokeMachine: in my example with .parent if .id > 10

[17:41] <jmerelo> timotimo: cool

[17:41] <timotimo> you could hook it up to return true the first and false the second time

[17:41] <tobs`> heh, cool timotimo++

[17:41] <timotimo> that way it would find that sometimes .parent can be found

[17:41] <SmokeMachine> timotimo: I dont know how to solve that yet... but I was thinking in a slang...

[17:42] <SmokeMachine> timotimo: currently I only run it once...

[17:42] <tobs`> jmerelo: good thought, but my f is not commutative, so it'd be a double reverse List.reverse.reduce({ f($^b, $^a) })

[17:42] <SmokeMachine> but I think thats a good idea...

[17:43] <tobs`> m: <a b c d>.reverse.reduce({ $^b ~ $^a }).say

[17:43] <camelia> rakudo-moar fa5215b61: OUTPUT: «abcd␤»

[17:43] <tobs`> m: <a b c d>.reverse.reduce({ say $^b ~ $^a })

[17:43] <camelia> rakudo-moar fa5215b61: OUTPUT: «cd␤bTrue␤aTrue␤»

[17:43] <timotimo> m: <a b c d>.reverse.reduce( &[R~] )

[17:43] <camelia> rakudo-moar fa5215b61: ( no output )

[17:43] <timotimo> m: <a b c d>.reverse.reduce( &[R~] ).say

[17:43] <camelia> rakudo-moar fa5215b61: OUTPUT: «abcd␤»

[17:43] <timotimo> m: <a b c d>.reverse.reduce( [R~] ).say

[17:43] <camelia> rakudo-moar fa5215b61: OUTPUT: «Cannot resolve caller reduce(Seq: Str); none of these signatures match:␤    (Any:U: &, *%_ --> Nil)␤    (Any:D: &with, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[17:43] <timotimo> m: <a b c d>.reverse.reduce( &[~] ).say

[17:43] <camelia> rakudo-moar fa5215b61: OUTPUT: «dcba␤»

[17:44] <SmokeMachine> timotimo: but had you liked how Red is writen?

[17:44] <timotimo> reversing operators is built-in to perl6 :) ):

[17:44] <timotimo> :) :)

[17:44] <timotimo> SmokeMachine: have not looked deep enough, but i think it's cool

[17:44] <timotimo> obviously that might change if i encounter some problems with that approach in real-life usage

[17:45] <SmokeMachine> :)

[17:54] <SmokeMachine> timotimo: Now I see! i can get that .id.Bool was called and call the clousure again...

[17:56] *** kurahaupo_ joined
[17:57] <timotimo> well, really the result of .id > 10 will have .Bool called on it, but yeah, that's exactly it

[17:57] *** p6bannerbot sets mode: +v kurahaupo_

[17:57] *** kurahaupo left
[17:58] *** kurahaupo_ left
[17:58] *** rindolf joined
[17:58] *** kurahaupo joined
[17:59] *** p6bannerbot sets mode: +v rindolf

[17:59] *** p6bannerbot sets mode: +v kurahaupo

[18:02] *** robertle left
[18:05] *** haukex left
[18:09] <jmerelo> 6 days without a Perl 6 question in StackOverflow... https://stackoverflow.com/questions/tagged/perl6

[18:09] <jmerelo> I should start again the campaign to (also) ask your questions in SO...

[18:09] *** haukex joined
[18:10] *** p6bannerbot sets mode: +v haukex

[18:10] <SmokeMachine> timotimo: yes... the result is a Red::AST... so...

[18:11] <SmokeMachine> jmerelo: maybe it means that the docs are getting "too" good... :P

[18:11] <jmerelo> SmokeMachine: he. I wish

[18:12] <SmokeMachine> just joking...

[18:13] *** kurahaupo left
[18:13] <tobs`> m: use Test; is-deeply set(1, |set(1)), Set(1, |Set(1))

[18:13] <camelia> rakudo-moar fa5215b61: OUTPUT: «not ok 1 - ␤# Failed test at <tmp> line 1␤# expected: Set.new(1)␤#      got: Set.new(1 => Bool::True,1)␤»

[18:13] *** kurahaupo joined
[18:13] <lizmat> m: dd (1,2).Set.Slip

[18:13] <camelia> rakudo-moar fa5215b61: OUTPUT: «slip(2 => Bool::True, 1 => Bool::True)␤»

[18:14] *** p6bannerbot sets mode: +v kurahaupo

[18:14] <lizmat> m: dd Set(1).Slip

[18:14] <camelia> rakudo-moar fa5215b61: OUTPUT: «slip(1 => Bool::True,)␤»

[18:15] <lizmat> m: dd set(1).Slip

[18:15] <camelia> rakudo-moar fa5215b61: OUTPUT: «slip(1 => Bool::True,)␤»

[18:15] <tobs`> m: dd Set.new(1, |Set.new(1))

[18:15] <camelia> rakudo-moar fa5215b61: OUTPUT: «Set.new(1 => Bool::True,1)␤»

[18:15] <tobs`> m: dd Set(1, |Set(1))

[18:15] <camelia> rakudo-moar fa5215b61: OUTPUT: «Set.new(1)␤»

[18:15] *** kurahaupo left
[18:16] *** kurahaupo joined
[18:16] <tobs`> so, the documentation is correct in saying set() is just Set.new(), but I don't understand the different behaviour with slip

[18:16] <lizmat> m: dd Set(1).Slip

[18:16] <camelia> rakudo-moar fa5215b61: OUTPUT: «slip(1 => Bool::True,)␤»

[18:16] *** kurahaupo left
[18:16] *** kurahaupo joined
[18:16] <lizmat> ah, I think I know what it is

[18:16] <lizmat> m: dd (1 => True).Set

[18:16] <camelia> rakudo-moar fa5215b61: OUTPUT: «Set.new(1)␤»

[18:17] *** p6bannerbot sets mode: +v kurahaupo

[18:18] <lizmat> m: dd Set.new(1, 1=> True)

[18:18] <camelia> rakudo-moar fa5215b61: OUTPUT: «Set.new(1 => Bool::True,1)␤»

[18:18] <lizmat> Set.new attempts to be smart on how it setifies its parameters

[18:18] <lizmat> m: dd Set.new(1, 2 1=> True)

[18:18] <camelia> rakudo-moar fa5215b61: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3dd Set.new(1, 27⏏5 1=> True)␤    expecting any of:␤        in…»

[18:18] <lizmat> m: dd Set.new(1, 2, 1=> True)

[18:18] <camelia> rakudo-moar fa5215b61: OUTPUT: «Set.new(1,2,1 => Bool::True)␤»

[18:18] <lizmat> actually, set() is

[18:18] <lizmat> m: dd set(1, 2, 1=> True)

[18:18] <camelia> rakudo-moar fa5215b61: OUTPUT: «Set.new(1,1 => Bool::True,2)␤»

[18:19] <lizmat> hmmm

[18:19] <tobs`> you mean Set() is?

[18:19] <lizmat> ok, clearly I'm too dim atm

[18:19] <tobs`> m: dd Set(1, 2, 1 => True)

[18:19] <camelia> rakudo-moar fa5215b61: OUTPUT: «Set.new(2,1)␤»

[18:19] <lizmat> right, that one

[18:19] <lizmat> m: dd Set(1, 2, 3, 1 => True)

[18:19] <camelia> rakudo-moar fa5215b61: OUTPUT: «Set.new(3,2,1)␤»

[18:20] <lizmat> m: dd Set(2, 3, 1 => False)

[18:20] <camelia> rakudo-moar fa5215b61: OUTPUT: «Set.new(3,2)␤»

[18:20] <lizmat> m: dd Set(2, 3, 1 => True)

[18:20] <camelia> rakudo-moar fa5215b61: OUTPUT: «Set.new(1,3,2)␤»

[18:20] * lizmat goes back to working on the P6W

[18:20] <tobs`> thanks lizmat

[18:20] *** holyghost left
[18:21] <tobs`> it's even right there in the documentation of the Set() routine ._.

[18:21] *** holyghost joined
[18:21] *** scotticles left
[18:21] <tobs`> when you think you found an undocumented corner case...

[18:22] *** p6bannerbot sets mode: +v holyghost

[18:22] *** Itaipu left
[18:23] *** Itaipu joined
[18:24] *** p6bannerbot sets mode: +v Itaipu

[18:24] *** sauvin left
[18:28] *** lucasb left
[18:29] *** damaxi joined
[18:30] *** p6bannerbot sets mode: +v damaxi

[18:35] *** Itaipu left
[18:35] *** Itaipu joined
[18:36] *** p6bannerbot sets mode: +v Itaipu

[18:37] *** kdr23 joined
[18:38] *** p6bannerbot sets mode: +v kdr23

[18:39] *** Itaipu left
[18:40] *** kdr22 left
[18:41] *** Itaipu joined
[18:41] *** p6bannerbot sets mode: +v Itaipu

[18:45] *** damaxi is now known as andrzejku

[18:51] *** Itaipu left
[18:55] *** noganex_ left
[18:56] *** noganex joined
[18:57] *** haukex left
[18:57] *** p6bannerbot sets mode: +v noganex

[18:58] *** ryn1x joined
[18:59] *** p6bannerbot sets mode: +v ryn1x

[18:59] *** ryn1x left
[19:00] *** ryn1x joined
[19:01] *** p6bannerbot sets mode: +v ryn1x

[19:14] *** tobs` left
[19:26] *** Mithaldu left
[19:27] *** Mithaldu joined
[19:27] *** kensanata left
[19:28] *** p6bannerbot sets mode: +v Mithaldu

[19:36] *** ryn1x left
[19:37] *** molaf joined
[19:38] *** p6bannerbot sets mode: +v molaf

[19:41] *** domidumont left
[19:43] *** natrys joined
[19:44] *** p6bannerbot sets mode: +v natrys

[19:49] *** pmurias left
[20:04] *** sjoshi left
[20:17] *** jmerelo left
[20:18] *** yqt left
[20:22] <SmokeMachine> why is ACCEPTS the oposite? I men:

[20:22] <SmokeMachine> m: my $a = 42 but role :: { method ACCEPTS(|c) { say "called { c }"; True } }; given $a { when "b" {}}

[20:22] <camelia> rakudo-moar fa5215b61: ( no output )

[20:22] <SmokeMachine> m: my $a = 42 but role :: { method ACCEPTS(|c) { say "called { c }"; True } }; given "b" { when $a {}}

[20:22] <camelia> rakudo-moar fa5215b61: OUTPUT: «called b␤»

[20:24] <SmokeMachine> that means: if I want to do something when my object is used on a given/when, I cant... I have to change every other class to insert another ACCEPTS candidate (ok, I can only change Any...)

[20:25] <tobs> SmokeMachine: in a given-when, you're trying to see if the topic falls into any of the when categories, via smartmatch

[20:25] <gfldex> m: my $a = 42 but role :: { method ACCEPTS(|c) { say "called { c }"; True } }; $_ = "b"; when $a {}

[20:25] <camelia> rakudo-moar fa5215b61: OUTPUT: «called b␤»

[20:25] <tobs> I think it makes sense to ask the *categories* if they accept the topic

[20:26] <tobs> I mean, that's not an explanation, but evidence that it makes sense to some :)

[20:26] <SmokeMachine> the gfldex makes sense...

[20:27] <SmokeMachine> but it makes more dificult what I want to do... :(

[20:27] <gfldex> this is the rare case where i make sense :)

[20:27] <gfldex> SmokeMachine: what do you want to do?

[20:28] <SmokeMachine> tobs: that makes sense...

[20:29] <SmokeMachine> gfldex: try to find whats happening inside a Callable...

[20:31] <SmokeMachine> gfldex: as I was talking with timotimo (https://colabti.org/irclogger/irclogger_log/perl6?date=2018-11-12#l1102) but I was thinking how I could do that for given/when...

[20:37] <SmokeMachine> m: use MONKEY-TYPING; role R {}; augment class Any { multi method ACCEPTS(R $a) { say "called {self} $a"; True } }; Any.^compose; given R.new { when "b" {}} # :(

[20:37] <camelia> rakudo-moar fa5215b61: ( no output )

[20:42] <masak> moritz: does writing/modifying grammars ever stop feeling like an exercise in Spooky Action at a Distance?

[20:42] <masak> (asking for a friend, who just busted his grammar *again*)

[20:47] <masak> good news: my anonymous friend just found the problem -- it was a stray bit of whitespace in a `rule`

[20:50] <jnthn> masak: I'm not moritz, but I dunno if I ever really felt like that... :)

[20:50] *** Sound joined
[20:50] *** p6bannerbot sets mode: +v Sound

[20:50] *** kst joined
[20:51] *** p6bannerbot sets mode: +v kst

[20:51] <jnthn> masak: I mean, sure, a change I do might regress a test I wasn't expecting it to at some point along the way, but it doesn't spook me more than that happening in non-grammar code would :)

[20:54] *** newbie23 left
[20:55] *** newbie23 joined
[20:55] *** p6bannerbot sets mode: +v newbie23

[21:10] *** rindolf left
[21:16] *** rindolf joined
[21:17] *** p6bannerbot sets mode: +v rindolf

[21:18] <moritz> masak: kinda, yes

[21:23] <SmokeMachine> where CX::Next is handled?

[21:25] <SmokeMachine> better question: how can I create a sub that accepts next?

[21:34] <SmokeMachine> is that possible?

[21:36] <moritz> m: sub f(&g) { g(); CONTROL { when CX::Next { say "next caught" } } }; f sub { next }

[21:36] <camelia> rakudo-moar fa5215b61: OUTPUT: «next caught␤»

[21:36] <moritz> SmokeMachine: ^^ like that?

[21:36] <SmokeMachine> moritz: thanks! I didnt know CONTROL... I was trying with CATCH!

[21:37] <moritz> SmokeMachine: my pleasure

[21:39] <SmokeMachine> CX::Next isnt resumable?

[21:39] <SmokeMachine> is there a way to resume it?

[21:39] <moritz> m: sub f(&g) { g(); CONTROL { when CX::Next { say "next caught"; .resume } } }; f sub { next; say "after next" }

[21:39] <camelia> rakudo-moar fa5215b61: OUTPUT: «next caught␤This exception is not resumable␤  in block  at <tmp> line 1␤  in sub  at <tmp> line 1␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:44] *** kensanata joined
[21:44] *** p6bannerbot sets mode: +v kensanata

[21:47] <kensanata> Quick question before I go to bed. I just finished building rakudo star 2018.10. Strangely, 2018.6 ended up as "/home/alex/rakudo/install/bin//perl6" according to "which perl6" and I can find 2018.10 as "rakudo/bin/perl6" -- how did this happen? Did I miss a step somewhere or was the default changed?

[21:48] * kensanata changes ~/.bashrc and stops wondering

[21:49] <gfldex> lizmat: have you considered to write a how-has-Perl 6-grown-in-the-last-12-months-post for the advent calendar?

[21:49] * kensanata cries as all the zef stuff breaks...

[21:50] <gfldex> lizmat: I'm asking because I need the numbers of new modules until xmass 2018 for a post I might write. :)

[21:51] *** dct joined
[21:51] *** p6bannerbot sets mode: +v dct

[21:51] <lizmat> gfldex:I haven't  :-)

[21:51] <gfldex> lizmat: please tell me when you reconsider

[21:52] <lizmat> I will

[21:56] <sena_kun> I am thinking about writing a post, but I have never made one(except literature, but that's another deal) and cannot really think of topic. I know stuff about Cro, a lot about Comma and am building some ASN.1 library right now. I wonder if something can hit the bar.

[21:59] <sena_kun> ugh, s/hit the bar/be useful and meaningful enough/

[22:00] <SmokeMachine> Oh! talking about Comma! jnthn, sena_kun I am mentioning Comma on my perl6 advent calendar post, is it OK? Not finished yet, but if you want to know how/why its being mentioned: https://gist.github.com/FCO/33be94f5ecfab73812705f60efd89085#file-redsecretsanta-md (if you'd like to comment too, that OK :) )

[22:01] <SmokeMachine> *that's OK

[22:02] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/11/12/2018-45-46-post-diwali/

[22:02] <sena_kun> not sure about jnthn, but you have my Seal of Approval. :) Don't see any harm in such mention.

[22:03] <lizmat> moritz:  https://p6weekly.wordpress.com/2018/11/12/2018-45-46-post-diwali/

[22:03] <lizmat> notable6: weekly reset

[22:03] <notable6> lizmat, Moved existing notes to “weekly_2018-11-12T22:03:38Z”

[22:08] <timotimo> \o/

[22:08] <timotimo> lizmat++

[22:08] *** kensanata left
[22:08] <sena_kun> lizmat++

[22:09] <timotimo> lizmat: did last squashathon's winner get a prize?

[22:10] *** leont joined
[22:11] <lizmat> well, I know the nick of the winner

[22:11] <lizmat> I don't have an address yet to send Camelia to

[22:11] *** p6bannerbot sets mode: +v leont

[22:14] <moritz> lizmat++

[22:14] *** newbie23 left
[22:15] *** newbie joined
[22:16] *** p6bannerbot sets mode: +v newbie

[22:16] <jdv79> lizmat: did you do anything on the one arg rule/itemization/etc... in your articles?

[22:16] *** dct left
[22:16] <jdv79> i don't see it

[22:16] <jdv79> and do you plan to?

[22:16] <lizmat> you mean the opensource.com articles ?

[22:16] <jdv79> yeah.  i thought there'd be a bit in the containers artile but i don't see it

[22:17] *** newbie left
[22:18] *** newbie joined
[22:19] *** p6bannerbot sets mode: +v newbie

[22:19] *** andrzejku left
[22:19] <lizmat> it's not really about containers, but about signatures / parameters

[22:19] <jdv79> cool p6w though.  its getting quite long.

[22:19] <lizmat> tell me about it

[22:19] <jdv79> yeah, that's true.

[22:19] * lizmat goes off for some R&R

[22:19] *** newbie left
[22:20] *** newbie joined
[22:20] *** p6bannerbot sets mode: +v newbie

[22:30] *** sena_kun left
[22:33] <jnthn> SmokeMachine: Yeah, find by me, though we don't tend to write it fully capitalized (e.g. just Comma). It's named after a type of butterfly, rather than being an acronym. :)

[22:33] <jnthn> *fine by me

[22:33] <SmokeMachine> jnthn: fixing it...

[22:52] *** ryn1x joined
[22:52] *** p6bannerbot sets mode: +v ryn1x

[23:02] *** lucasb joined
[23:02] *** natrys left
[23:02] *** p6bannerbot sets mode: +v lucasb

[23:05] *** comborico1611 joined
[23:06] *** p6bannerbot sets mode: +v comborico1611

[23:06] *** ryn1x left
[23:08] *** rindolf left
[23:11] *** ryn1x joined
[23:12] *** p6bannerbot sets mode: +v ryn1x

[23:16] *** pecastro left
[23:19] *** Sound left
[23:30] *** jast left
[23:38] <lucasb> so, 'my Foo @a' is an Array that does Positional[Foo], right?

[23:38] *** jast joined
[23:38] <lucasb> and 'my Foo %h' is a Hash that does Associative[Foo], ok? :)

[23:39] <lucasb> but...

[23:39] *** p6bannerbot sets mode: +v jast

[23:39] <lucasb> 'my Foo $x' isn't a Scalar that does Itemable[Foo]

[23:40] <lucasb> Scalar is a class. I mean "Itemable" for whatever the "missing" role was supposed to be named :)

[23:40] <lucasb> IOW, did this design lost an opportunity to have some symmetry between Scalars, Positionals and Associatives?

[23:41] <lucasb> it shows in this case:

[23:41] <lucasb> m: constant Foo = 42; my Foo @x  # ok, error, nonsense code

[23:41] <camelia> rakudo-moar fa5215b61: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Can not parameterize Array with 42␤at <tmp>:1␤------> 032; my Foo @x  # ok, error, nonsense code7⏏5<EOL>␤    expecting any of:␤        constraint␤»

[23:41] <lucasb> m: constant Foo = 42; my Foo $x

[23:41] <camelia> rakudo-moar fa5215b61: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable definition of type Int (implicit : by pragma) requires an initializer␤at <tmp>:1␤------> 3constant Foo = 42; my Foo $x7⏏5<EOL>␤    expecting any of:␤        constraint␤»

[23:42] *** ryn1x left
[23:43] <lucasb> if a Scalar was a parameterizable Itemable[::T], then it would have the same error as arrays, "Cannot parameterize Scalar with 42"

[23:46] *** comborico1611 left
[23:51] <lucasb> "constant Foo = 42; my Foo $x" doesn't make sense, but let's follow what the error message says. it requires an initializer, so let's give it one:

[23:51] <lucasb> m: constant Foo = 42; my Foo $x = Any

[23:51] <camelia> rakudo-moar fa5215b61: OUTPUT: «Type check failed in assignment to $x; expected Int but got Any (Any)␤  in block <unit> at <tmp> line 1␤␤»

[23:51] <lucasb> expects Int...

[23:51] <lucasb> m: constant Foo = 42; my Foo $x = Int

[23:51] <camelia> rakudo-moar fa5215b61: OUTPUT: «Type check failed in assignment to $x; expected 42 but got Int␤  in block <unit> at <tmp> line 1␤␤»

[23:52] <lucasb> ok, it changed its mind, wants 42 now :)

[23:52] <lucasb> m: constant Foo = 42; my Foo $x = 42

[23:52] <camelia> rakudo-moar fa5215b61: OUTPUT: «Type check failed in assignment to $x; expected type 42 cannot be itself (perhaps Nil was assigned to a :D which had no default?)␤  in block <unit> at <tmp> line 1␤␤»

[23:52] <lucasb> m: constant Foo = 42; my Foo $x = 21+21

[23:52] <camelia> rakudo-moar fa5215b61: OUTPUT: «Type check failed in assignment to $x; expected 42 but got 42␤  in block <unit> at <tmp> line 1␤␤»

[23:57] *** lucasb left
[23:59] *** Pllll joined
[23:59] *** p6bannerbot sets mode: +v Pllll

