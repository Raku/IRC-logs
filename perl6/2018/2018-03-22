[00:00] *** pharv left
[00:04] *** cdg joined
[00:06] *** w_richard_w joined
[00:07] *** cdg left
[00:08] *** cdg_ left
[00:10] *** comborico1611 left
[00:14] *** pharv joined
[00:17] *** |oLa| left
[00:18] *** pharv left
[00:20] *** cdg joined
[00:21] *** bwisti left
[00:23] *** |oLa| joined
[00:24] *** mcmillhj joined
[00:25] *** cdg left
[00:26] *** pierre joined
[00:29] *** mcmillhj left
[00:31] *** markong left
[00:32] *** bwisti joined
[00:38] *** mcmillhj joined
[00:42] *** mcmillhj left
[00:52] *** skids joined
[00:54] *** mcmillhj joined
[00:58] *** mcmillhj left
[01:03] *** noganex left
[01:06] *** mcmillhj joined
[01:10] *** mcmillhj left
[01:12] *** athenot left
[01:13] *** athenot joined
[01:14] *** Kaiepi left
[01:17] *** Zoffix joined
[01:18] *** mcmillhj joined
[01:21] <Zoffix> FWIW: my vacation at $work started and I'm gonna go into isolation until Apr. 6, to enjoy it. I might make some commits to repos, but I'll be ignoring all notifications. If I break something, just revert or fix the commit, as I won't see the notification about breakage. If pmichaud comes around; rakudo.org domain is ready for move, per https://github.com/perl6/perl6.org/issues/96#issuecomment-373971373

[01:22] *** Zoffix left
[01:23] *** mcmillhj left
[01:27] *** wamba left
[01:35] *** cdg joined
[01:38] *** mcmillhj joined
[01:42] *** mcmillhj left
[01:45] *** itaipu joined
[01:45] *** TreyHarris left
[01:57] *** mcmillhj joined
[02:01] *** cdg left
[02:02] *** mcmillhj left
[02:05] <Herby_> exit

[02:05] <Herby_> ...

[02:08] *** Kaiepi joined
[02:09] *** mcmillhj joined
[02:10] *** Herby_ left
[02:10] *** herby_ joined
[02:13] *** lichtkind left
[02:14] *** mcmillhj left
[02:15] <Kaiepi> m: sub foo(--> Callable[Int]) { sub (Int $_ --> Int) { $_ + 1 } }; say foo()(1)

[02:15] <camelia> rakudo-moar a3e4f9e3e: OUTPUT: «2␤»

[02:15] <Kaiepi> oh

[02:18] *** aindilis left
[02:18] *** aindilis joined
[02:19] *** aindilis left
[02:20] *** aindilis joined
[02:20] *** aindilis left
[02:23] *** mcmillhj joined
[02:26] *** cdg joined
[02:28] *** mcmillhj left
[02:30] *** cdg left
[02:41] *** pierre left
[02:42] *** mcmillhj joined
[02:46] *** ilbot3 left
[02:47] *** mcmillhj left
[02:50] *** pierre joined
[02:54] *** pierre left
[02:55] *** ilbot3 joined
[02:55] *** ChanServ sets mode: +v ilbot3

[02:57] *** mcmillhj joined
[02:58] *** herby_ left
[03:01] *** pharv joined
[03:02] *** TreyHarris joined
[03:02] *** mcmillhj left
[03:04] *** enheh left
[03:05] *** pierre joined
[03:05] *** pharv left
[03:16] *** eliasr left
[03:17] *** mcmillhj joined
[03:22] *** mcmillhj left
[03:24] *** AlexDaniel left
[03:25] *** lichtkind joined
[03:29] *** mcmillhj joined
[03:33] *** mcmillhj left
[03:35] *** itaipu left
[03:40] *** ufobat_ joined
[03:44] *** mcmillhj joined
[03:44] *** ufobat___ left
[03:44] *** kini joined
[03:48] *** mcmillhj left
[03:50] *** kini left
[03:50] *** skids left
[03:54] *** mtj_ joined
[04:00] *** aindilis joined
[04:02] *** mcmillhj joined
[04:04] *** kini joined
[04:07] *** mcmillhj left
[04:13] *** khw left
[04:18] *** mcmillhj joined
[04:21] *** eckhardt joined
[04:23] *** mcmillhj left
[04:31] *** mcmillhj joined
[04:36] *** mcmillhj left
[04:36] *** pierre left
[04:44] *** pierre joined
[04:45] *** mcmillhj joined
[04:48] *** TreyHarris left
[04:48] *** pierre left
[04:50] *** mcmillhj left
[04:56] *** wamba joined
[05:02] *** pharv joined
[05:02] *** cdg joined
[05:03] *** pierre joined
[05:03] *** mcmillhj joined
[05:06] *** cdg left
[05:06] *** pharv left
[05:07] *** pierre left
[05:08] *** mcmillhj left
[05:12] *** eckhardt left
[05:21] *** pierre joined
[05:23] *** mcmillhj joined
[05:25] *** pierre left
[05:28] *** mcmillhj left
[05:34] *** donpdonp joined
[05:34] <donpdonp> ive got $socket.Supply(:bin).tap(receive); which works with a -> $buf {} but if I use sub receive($buf) {}

[05:34] <donpdonp> I get Calling receive() will never work with declared signature

[05:35] <donpdonp> i would have thought the lambda and the receive sub would be equivalent.

[05:36] *** vike left
[05:38] *** mcmillhj joined
[05:43] *** mcmillhj left
[05:45] *** sauvin_ joined
[05:52] *** mcmillhj joined
[05:57] *** mcmillhj left
[06:00] *** pierre joined
[06:04] *** mcmillhj joined
[06:09] *** mcmillhj left
[06:17] *** dalek left
[06:17] *** dalek joined
[06:17] *** ChanServ sets mode: +v dalek

[06:20] *** JMERELO joined
[06:21] <JMERELO> Hi

[06:23] *** mcmillhj joined
[06:28] *** mcmillhj left
[06:31] *** rindolf joined
[06:32] *** wamba left
[06:33] *** pierre left
[06:41] <JMERELO> I've created a repo for my activity during the Perl6/doc grant https://github.com/JJ/TPF-Grant/

[06:42] <JMERELO> I'll be obviusly looking at the issues in perl6/doc, but if you want me to do something specific, or check out the progress report, or whatever, just set a watch there

[06:44] *** lowbro joined
[06:44] *** lowbro left
[06:44] *** lowbro joined
[06:45] *** sauvin_ is now known as bocaneri

[06:46] *** pmurias joined
[06:53] *** darutoko joined
[06:54] *** mcmillhj joined
[06:56] *** domidumont joined
[06:58] *** mcmillhj left
[07:04] *** domidumont left
[07:04] *** domidumont joined
[07:04] *** parv joined
[07:05] *** pierre joined
[07:05] *** thgilfodrol joined
[07:05] *** mcmillhj joined
[07:07] <Kaiepi> m: my Int @a = [1,2,3]

[07:07] <camelia> rakudo-moar a3e4f9e3e: ( no output )

[07:07] <Kaiepi> m: my Int @a = [1,2,3]; say @a

[07:07] <camelia> rakudo-moar a3e4f9e3e: OUTPUT: «[1 2 3]␤»

[07:07] <Kaiepi> m: my Int @a := [1,2,3]; say @a

[07:07] <camelia> rakudo-moar a3e4f9e3e: OUTPUT: «Type check failed in binding; expected Positional[Int] but got Array ($[1, 2, 3])␤  in block <unit> at <tmp> line 1␤␤»

[07:08] <Kaiepi> is this supposed to happen?

[07:09] <JMERELO> m: my Array[Int] @a = [1,2,3]

[07:09] <camelia> rakudo-moar a3e4f9e3e: OUTPUT: «Type check failed in assignment to @a; expected Array[Int] but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[07:10] <JMERELO> @Kaiepi yep, @a is supposed to be an Int, and you're assigning it to an array instead

[07:10] *** mcmillhj left
[07:14] <donpdonp> Kaiepi: this might be helpful https://docs.perl6.org/language/operators#infix_:=

[07:17] <Kaiepi> ah ok

[07:18] <Kaiepi> m: my Int @a = [1,2,3]; my Int @b := @a

[07:18] <camelia> rakudo-moar a3e4f9e3e: ( no output )

[07:21] *** mcmillhj joined
[07:22] *** darutoko left
[07:26] *** hoelzro_ joined
[07:26] *** mcmillhj left
[07:26] *** dalek left
[07:26] *** athenot left
[07:26] *** bwisti left
[07:26] *** Possum left
[07:26] *** joy left
[07:26] *** synopsebot left
[07:26] *** stux|RC left
[07:26] *** SourceBaby left
[07:26] *** jeek left
[07:26] *** thowe left
[07:26] *** khisanth__ left
[07:26] *** aeruder left
[07:26] *** committable6 left
[07:26] *** jeek joined
[07:26] *** yubimusubi joined
[07:26] *** stux|RC-only joined
[07:26] *** aeruder joined
[07:26] *** khisanth__ joined
[07:26] *** SmokeMachine joined
[07:27] *** athenot joined
[07:27] *** joy joined
[07:28] *** dalek joined
[07:28] *** ChanServ sets mode: +v dalek

[07:28] *** kurahaupo_ left
[07:28] *** yoleaux left
[07:28] *** bwisti joined
[07:28] *** thowe joined
[07:28] *** synopsebot joined
[07:28] *** ChanServ sets mode: +v synopsebot

[07:28] *** SourceBaby joined
[07:28] *** ChanServ sets mode: +v SourceBaby

[07:28] *** S007 joined
[07:28] *** bisectable6 left
[07:28] *** squashable6 left
[07:29] *** unicodable6 left
[07:29] *** greppable6 left
[07:29] *** reportable6 left
[07:29] *** releasable6 left
[07:29] *** evalable6 left
[07:29] *** shareable6 left
[07:30] *** shareable6 joined
[07:30] *** bloatable6 joined
[07:30] *** releasable6 joined
[07:30] *** evalable6 joined
[07:30] *** reportable6 joined
[07:30] *** unicodable6 joined
[07:30] *** greppable6 joined
[07:30] *** statisfiable6 left
[07:30] *** benchable6 left
[07:30] *** benchable6 joined
[07:30] *** statisfiable6 joined
[07:33] *** eroux joined
[07:34] *** dct joined
[07:38] *** JMERELO left
[07:45] *** dct left
[07:50] *** noganex joined
[07:51] *** lookatme left
[07:52] *** lookatme joined
[07:52] *** mcmillhj joined
[07:53] *** leah2 left
[07:56] *** ecocode joined
[07:57] *** mcmillhj left
[07:57] *** Grauwolf_ joined
[07:59] *** leah2 joined
[08:01] *** robertle joined
[08:01] *** CIAvash[m] joined
[08:05] *** mcmillhj joined
[08:08] <timotimo> donpdonp: i think you wanted .tap(&receive) rather than .tap(receive)

[08:08] <timotimo> the latter immediately calls receive and uses the return value of receive() as the function to tap with

[08:09] *** mcmillhj left
[08:18] <donpdonp> timotimo: ah yes, thx!

[08:18] <donpdonp> perl6 has everything :)

[08:20] *** mniip joined
[08:22] *** committable6 joined
[08:22] *** pierre left
[08:23] *** pierre joined
[08:23] *** mcmillhj joined
[08:26] *** bisectable6 joined
[08:26] *** squashable6 joined
[08:26] *** ChanServ sets mode: +v squashable6

[08:27] *** lookatme left
[08:27] *** pierre left
[08:28] *** lookatme joined
[08:28] *** mcmillhj left
[08:29] *** mr_ron left
[08:34] *** mcmillhj joined
[08:39] *** mcmillhj left
[08:40] *** dakkar joined
[08:45] *** mcmillhj joined
[08:50] *** mcmillhj left
[08:53] *** coverable6 joined
[08:53] *** quotable6 joined
[08:53] *** ChanServ sets mode: +v coverable6

[08:53] *** ChanServ sets mode: +v quotable6

[08:55] *** mcmillhj joined
[08:58] *** lookatme left
[09:00] *** mcmillhj left
[09:02] *** cdg joined
[09:03] *** pharv joined
[09:05] *** parv left
[09:07] *** mcmillhj joined
[09:08] *** pharv left
[09:08] *** cdg left
[09:09] *** Grauwolf_ is now known as Grauwolf

[09:10] *** vike joined
[09:11] *** w_richard_w left
[09:11] *** mcmillhj left
[09:17] <robertle> m: my $l = Lock.new; $l.protect({ say "woo"; })

[09:17] <camelia> rakudo-moar a3e4f9e3e: OUTPUT: «woo␤»

[09:17] <robertle> m: my $l = Lock.new; $l.protect({});

[09:17] <camelia> rakudo-moar a3e4f9e3e: OUTPUT: «Attempt to unlock mutex by thread not holding it␤  in block <unit> at <tmp> line 1␤␤»

[09:17] <robertle> surprising!

[09:21] <lizmat> indeed

[09:21] <lizmat> but maybe not

[09:21] <lizmat> m: dd {}

[09:21] <camelia> rakudo-moar a3e4f9e3e: OUTPUT: «Hash % = {}␤»

[09:21] <lizmat> m: my $l = Lock.new; $l.protect({ ... });

[09:21] <camelia> rakudo-moar a3e4f9e3e: OUTPUT: «Stub code executed␤  in block <unit> at <tmp> line 1␤␤»

[09:22] <lizmat> robertle: so you're feeding Lock.protect a Hash

[09:23] *** pierre_ joined
[09:23] <lizmat> It think this warrants a GH Issue  :-)

[09:24] <lizmat> that error is LTA

[09:25] <robertle> ah!

[09:26] <robertle> hm, there isn't really any valid use case for feeding protect anything that isn't callable, right?

[09:27] *** yoleaux joined
[09:27] *** ChanServ sets mode: +v yoleaux

[09:28] <robertle> it is a slightly misleading error message, but admittedly not a very useful thing to do anyway. but it can happen during development when you comment out code from the protected block

[09:34] <robertle> m:  my &t = {};

[09:34] <camelia> rakudo-moar 37fc2883d: OUTPUT: «Type check failed in assignment to &t; expected Callable but got Hash (${})␤  in block <unit> at <tmp> line 1␤␤»

[09:34] <robertle> isn't it also surprising that the &code in the protect() signature doesn't constrain it to a callable in a similar manner as tghe assignment does?

[09:35] <robertle> m: my sub dosth(&code) { ...}; dosth(1);

[09:35] <camelia> rakudo-moar 37fc2883d: OUTPUT: «Type check failed in binding to parameter '&code'; expected Callable but got Int (1)␤  in sub dosth at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[09:35] <robertle> m: my sub dosth(&code) { ...}; dosth({});

[09:35] <camelia> rakudo-moar 37fc2883d: OUTPUT: «Type check failed in binding to parameter '&code'; expected Callable but got Hash (${})␤  in sub dosth at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[09:36] <pmichaud> good evening, #perl6

[09:36] <yoleaux> 10 Mar 2018 01:56Z <Zoffix> pmichaud: do you got Rakudo's logo in vector or at least high-res format? This one http://rakudo.org/wp/wp-content/uploads/2011/04/rakudo-1001.png

[09:36] <yoleaux> 10 Mar 2018 02:25Z <Zoffix> pmichaud: Actually, I found a large one in our marketing repo, but if you have a vector version, wouldn't hurt to add it there too: https://github.com/perl6/marketing/blob/master/LOGOs/Rakudo/rakudo-box-3000.png

[09:36] <yoleaux> 11 Mar 2018 17:23Z <Zoffix> pmichaud: timotimo I'm on it

[09:36] <yoleaux> 12 Mar 2018 03:20Z <Zoffix> pmichaud: I think it's best to wait until your return on Apr 1 before moving the site, rather than rush everything for Mar 14—I'd like to take extra time to ensure all the old links still map to something sane on the new site. I already got majority of the content up (other than binaries and the new pages we're adding) and put up a demo for you, if you wanted to look at progress so far:

[09:36] <yoleaux> 12 Mar 2018 03:20Z <Zoffix> pmichaud: http://hack.p6c.org:4242/

[09:36] <yoleaux> 12 Mar 2018 10:23Z <Zoffix> pmichaud: also the Rakudo Star release manager decided to have a shit fit. Added this page hours after told him we were re-designing the site https://perl6.org/downloads/others.html and now that he's seen my demo http://hack.p6c.org:4242/files says he oposes it because it's "confusing" and will resign as release manager

[09:36] <yoleaux> 12 Mar 2018 13:24Z <Zoffix> pmichaud: nevermind; there appears to have been confusion on what site is even changing: https://github.com/perl6/perl6.org/issues/96

[09:36] <yoleaux> 18 Mar 2018 04:03Z <Zoffix> pmichaud: new rakudo.org is good to go. Just need to move the domain. More info: https://github.com/perl6/perl6.org/issues/96#issuecomment-373971373

[09:37] *** scimon joined
[09:37] <pmichaud> Coming to you tonight from the Hotel Chinzanso Tokyo  :)

[09:37] <masak> pmichaud! \o/

[09:38] <moritz> \o pmichaud 

[09:39] <pmichaud> masak! o/

[09:39] <pmichaud> moritz! o/

[09:40] <lizmat> pmichaud o/

[09:40] <masak> just like old times :)

[09:41] <pmichaud> except that at the moment I'm in a timezone that is ahead of most of you :)

[09:41] <pmichaud> lizmat o/

[09:41] <masak> I thought "Hotel Chinzanso Tokyo" sounded vaguely Asian :P

[09:42] <pmichaud> More than that, "chinzanso" seems to have a perl6-ish connection :)

[09:43] <masak> "House of Camellia"! o.O

[09:43] <masak> https://en.wikipedia.org/wiki/Chinzan-so

[09:44] <pmichaud> Indeed.  :)

[09:46] <El_Che> pmichaud: log trip?

[09:47] *** mr_ron joined
[09:47] * masak imagines pmichaud floating across the Pacific on a log

[09:47] <masak> well, we all know the importance of logging, so...

[09:50] <pmichaud> Anyway, I felt a desire to share this little connection to Perl 6 from the land of the Rising Sun.  The garden (and hotel grounds) are very beautiful here.  We should have a conference or event here some day.  :)

[09:50] <masak> +1

[09:56] <pmichaud> I'll check back in a week or so, I think

[09:56] <pmichaud> happy spring equinox to all

[09:56] <masak> likewise!

[10:30] *** lowbro left
[10:32] *** dogbert2 joined
[10:33] *** dogbert2 left
[10:37] *** dogbert2 joined
[10:38] *** wamba joined
[10:40] *** enheh joined
[10:55] *** wamba left
[11:03] *** pierre_ left
[11:04] *** pharv joined
[11:09] *** pharv left
[11:26] *** S007 left
[11:33] *** kurahaupo joined
[11:38] *** Guest6 joined
[11:42] <tbrowder_>  hi, #perl6

[11:43] <pmurias> https://p6up.github.io/ - mockup p6up installer page

[11:44] <pmurias> tbrowder_: \o/

[11:44] <tbrowder_> continuing experimenting with toasting modules, i have found some that always hang and cannot (that i can find) be killed by toaster.

[11:45] <tbrowder_> pmurias: \o/

[11:45] <pmurias> now we need an actuall p6up installer ;)

[11:46] <tbrowder_> toaster can ignore those for testing primarily, but not when testing other modules that depend on them.

[11:49] <tbrowder_> so i’m still getting hangers.  my next trials will be with using this zef command: zef —force install module; zef test module

[11:49] *** S007 joined
[11:50] <tbrowder_> to try to decouple the dependency test failure from the primary installation during toasting.

[11:50] *** abraxxa joined
[11:51] *** abraxxa left
[11:53] <tbrowder_> eventually i would like toast results to show, for each module, its test results along with its dependencies and their test results.

[11:56] <tbrowder_> pmurias: it looks inviting! how will it affect my existing rakudo setup if i try it?

[11:58] *** Guest6 left
[12:02] *** itaipu joined
[12:08] <pmurias> tbrowder_: it's a pure mockup at this point so it doesn't work at all yet ;)

[12:09] <tbrowder_>   gotcha!

[12:14] *** eliasr joined
[12:15] <[Coke]> Anyone here attending tpc us 2018?

[12:24] * lizmat  

[12:24] *** enheh left
[12:25] *** enheh_ joined
[12:30] *** wamba joined
[12:40] *** mcmillhj joined
[12:45] *** AlexDaniel joined
[12:46] *** darutoko joined
[12:50] *** pecastro left
[12:51] <DrForr> [Coke]: Planning to, yes.

[12:51] * [Coke] is trying to determine if he's coming for anything other than the main event.

[12:52] *** eroux left
[12:53] <DrForr> Well, I'm doing a tutorial, but I suspect that most of the peeps here don't need it.

[12:55] *** cdg joined
[12:59] <DrForr> And I'm setting up an Origami BOF, though I don't know what day they'll block out. That does make the whole thing a bit logistically awkward, because though I'm going to be there all week, others may not, and if their BOF gets arranged for a day they're not planning to be there (I'm thinking the last 3 days) they won't be there for tehir own BOF.

[12:59] <Geth> ¦ marketing: 79aed7ba58 | (Zoffix Znet)++ | 6 files

[12:59] <Geth> ¦ marketing: Update "Introducing Perl 6" Brochure to rev2

[12:59] <Geth> ¦ marketing: 

[12:59] <Geth> ¦ marketing: - Add revision marker on last page

[12:59] <Geth> ¦ marketing: - Make all links proper HyperLink objects to prevent issues with readers

[12:59] <Geth> ¦ marketing:     auto-guessing URLs wrong. Fixes https://github.com/perl6/marketing/issues/6

[12:59] <Geth> ¦ marketing: - Fix typos and minor font weight/color issues.

[12:59] <Geth> ¦ marketing:     Fixes https://github.com/perl6/marketing/issues/4

[12:59] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/79aed7ba58

[12:59] *** cdg left
[13:00] *** cdg joined
[13:00] * DrForr plugs some more edge cases.

[13:01] <Geth> ¦ marketing: 71691dc489 | (Zoffix Znet)++ | 3 files

[13:01] <Geth> ¦ marketing: Update pub "Introducing Perl 6" Brochure PDFs to rev 2

[13:01] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/71691dc489

[13:03] *** wamba left
[13:04] *** vcv joined
[13:14] *** pierre__ joined
[13:17] <Geth> ¦ marketing: 3b351b9616 | (Zoffix Znet)++ | 5 files

[13:17] <Geth> ¦ marketing: Fix inconsistent time on "Rakudo Concise" poster

[13:17] <Geth> ¦ marketing: 

[13:17] <Geth> ¦ marketing: Fixes https://github.com/perl6/marketing/issues/5

[13:17] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/3b351b9616

[13:20] *** mcmillhj left
[13:20] *** scimon left
[13:20] *** mcmillhj joined
[13:24] *** scimon joined
[13:24] *** yubimusubi left
[13:28] *** SourceBaby left
[13:28] *** SourceBaby joined
[13:28] *** ChanServ sets mode: +v SourceBaby

[13:29] *** vcv left
[13:30] *** vcv joined
[13:31] *** SourceBaby left
[13:32] *** scimon left
[13:32] *** SourceBaby joined
[13:32] *** ChanServ sets mode: +v SourceBaby

[13:33] *** SourceBaby left
[13:33] *** enheh_ left
[13:35] *** SourceBaby joined
[13:35] *** ChanServ sets mode: +v SourceBaby

[13:36] *** scimon joined
[13:39] *** abraxxa joined
[13:42] *** skids joined
[13:56] *** Possum joined
[14:01] *** vcv left
[14:03] *** vcv joined
[14:09] *** khw joined
[14:16] *** darutoko- joined
[14:18] *** telnet joined
[14:19] *** darutoko left
[14:22] <tbrowder_> ref hanging modules: i have found the following modules hang during toasting and cannot be killed by the job:

[14:24] <AlexDaniel> please file a ticket for every module that does that

[14:25] <AlexDaniel> (there are some tickets already, by the way)

[14:25] <tbrowder_> OO::Actors, Test::Scheduler, IO::Socket::Async::SSL, and Event::Emitter::Inter-Process

[14:25] <tbrowder_>  AlexDaniel: WILCO

[14:27] <AlexDaniel> yeah, first two already have a ticket

[14:27] <tbrowder_> ticket at each url, roger, anywhere else?

[14:32] *** scimon left
[14:32] *** scimon joined
[14:36] *** athenot left
[14:37] *** athenot joined
[14:47] *** mr_ron left
[14:47] *** pierre__ left
[14:48] *** markong joined
[14:56] *** unicodable6 left
[14:57] *** unicodable6 joined
[14:57] *** ChanServ sets mode: +v unicodable6

[14:59] *** mr_ron joined
[15:08] *** juih joined
[15:11] <tbrowder_>  AlexDaniel: all the modules i lsted have an issue filed about tests hanging

[15:11] <AlexDaniel> cool

[15:17] *** juih left
[15:28] *** vcv left
[15:29] *** vcv joined
[15:37] *** comborico1611 joined
[15:37] *** thundergnat joined
[15:38] *** athenot left
[15:38] <thundergnat> Heya perl6.

[15:40] *** athenot joined
[15:41] <lizmat> thundergnat o/

[15:41] <thundergnat> Sometime in the past year, it seems that the bigInt, bigInt candidate for %% got changed so it no longer handles them. It _used_ to. I know it worked in 2016.10  

[15:41] <thundergnat> m: say 23067200747291880127814827277075079921671259751791 %% 100000000000000000000000000000000000000000000000577;

[15:41] <camelia> rakudo-moar f4255d5a1: OUTPUT: «Cannot unbox 164 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[15:42] <thundergnat> That _used_ to work...

[15:44] <lizmat> thundergnat: please make a GH issue  :-)

[15:44] <thundergnat> Ok. 

[15:44] *** troys joined
[15:47] <MasterDuke> bisectable6: say 23067200747291880127814827277075079921671259751791 %% 100000000000000000000000000000000000000000000000577

[15:47] <bisectable6> MasterDuke, Bisecting by exit code (old=2015.12 new=f4255d5). Old exit code: 0

[15:47] <bisectable6> MasterDuke, bisect log: https://gist.github.com/0c0a04c16226bb81175a5bdee18ad4b8

[15:47] <bisectable6> MasterDuke, (2017-02-22) https://github.com/rakudo/rakudo/commit/755e25bd575c681c2361749daa12977f93def3d3

[15:48] <MasterDuke> thundergnat, lizmat: ^^^

[15:48] <thundergnat> MasterDuke: Thanks, I'll include that in the ticket.

[15:48] *** darutoko- left
[15:53] *** domidumont left
[16:01] *** Voldenet joined
[16:01] *** Voldenet left
[16:01] *** Voldenet joined
[16:05] *** JMERELO joined
[16:06] <thundergnat> Issue submitted: R#1640

[16:06] <synopsebot> R#1640 [open]: https://github.com/rakudo/rakudo/issues/1640 %% fails with bigInt, bigInt arguments 

[16:11] *** athenot left
[16:14] *** robertle left
[16:14] <lizmat> thundergnat++   # close to a fix  :-)

[16:15] *** comborico1611 left
[16:15] <thundergnat> lizmat: woot!

[16:16] <lizmat> m: use nqp; say nqp::not_i(23067200747291880127814827277075079921671259751791)

[16:16] <camelia> rakudo-moar bdd8143e6: OUTPUT: «Cannot unbox 164 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[16:16] <lizmat> was the underlying issue

[16:16] <lizmat> m: use nqp; say !23067200747291880127814827277075079921671259751791

[16:16] <camelia> rakudo-moar bdd8143e6: OUTPUT: «False␤»

[16:16] <lizmat> the fix

[16:18] *** bdmatatu joined
[16:23] <bdmatatu> p6: say (^40).grep( / (.)'4' / ).map({ $/[0] })

[16:23] <camelia> rakudo-moar bdd8143e6: OUTPUT: «(Nil Nil Nil)␤»

[16:23] <bdmatatu> Hi folks, what's a good way to do something like the above? (since the match object doesn't seem to be available)

[16:24] <timotimo> bdmatatu: use -> $/ { $/[0] } or just { .[0] }

[16:24] <timotimo> or *[0]

[16:25] <AlexDaniel> m: say (^40).map({/ (.)'4' / ?? $0 !! Empty})

[16:25] <camelia> rakudo-moar bdd8143e6: OUTPUT: «(｢1｣ ｢2｣ ｢3｣)␤»

[16:25] <moritz> or

[16:25] <moritz> say (^40).grep( / . )> '4' / )

[16:25] <evalable6> moritz, rakudo-moar bdd8143e6: OUTPUT: «(14 24 34)␤»

[16:25] <JMERELO> Hi, @timotimo. Can you help with this concurrent thingie I'm trying to build? I replied to your comment in StackOverflow here https://stackoverflow.com/questions/49369853/running-self-feeding-channels-in-perl-6#comment85859428_49369853 pointing to this code https://github.com/JJ/my-perl6-examples/blob/f01c8c6b270e25eeda4cf69218272ec11e076f3d/concurrent.p6

[16:25] <moritz> erm

[16:25] <moritz> say (^40).grep( / . <( '4' / )

[16:26] <evalable6> moritz, rakudo-moar bdd8143e6: OUTPUT: «(14 24 34)␤»

[16:26] <moritz> why doesn't )> work here?

[16:26] <AlexDaniel> because it only checks, it doesn't map

[16:26] <moritz> ah, right

[16:26] <moritz> say (^40).grep( / . <( '4' / ).map({$_})

[16:26] <evalable6> moritz, rakudo-moar bdd8143e6: OUTPUT: «(14 24 34)␤»

[16:26] <moritz> say (^40).grep( / . )> '4' / ).map({$_})

[16:26] <evalable6> moritz, rakudo-moar bdd8143e6: OUTPUT: «(14 24 34)␤»

[16:26] <moritz> meh

[16:27] * moritz not thinking straight

[16:29] <AlexDaniel> bdmatatu: so, is my solution good enough?

[16:30] <bdmatatu> I think that's the only one of the above that works

[16:31] <moritz> say (^40).grep( * % 10 == 4 ).map( (*/10).Int)

[16:31] <evalable6> moritz, rakudo-moar 33c52dbc7: OUTPUT: «(0 1 2 3)␤»

[16:31] <moritz> say (^40).grep(*>10).grep( * % 10 == 4 ).map( (*/10).Int)

[16:31] <evalable6> moritz, rakudo-moar 33c52dbc7: OUTPUT: «(1 2 3)␤»

[16:31] <JMERELO> @moritz nice trick :-)

[16:32] *** darutoko joined
[16:34] <bdmatatu> I have some files with names including foo-001.json, foo-002.json (among others) and was trying to a grep + map to get 001, 002,...

[16:36] <bdmatatu> But I suppose I could just do the map with a ternary and skip the grep

[16:36] <jnthn> m: say <foo-001.json foo-002.json foo-042.json>.map(*.comb(/'-' <( \d+ )> '.'/)).flat

[16:36] <camelia> rakudo-moar 33c52dbc7: OUTPUT: «(001 002 042)␤»

[16:36] <jnthn> m: say <foo-001.json foo-002.json foo-042.json nonum.json>.map(*.comb(/'-' <( \d+ )> '.'/)).flat

[16:36] <camelia> rakudo-moar 33c52dbc7: OUTPUT: «(001 002 042)␤»

[16:36] <moritz> m: <bla foo-001.json foo-002.json bar>.map({/'-'<(\d+)>'.json'/}).grep(?*)

[16:36] <camelia> rakudo-moar 33c52dbc7: OUTPUT: «Invocant of method 'match' must be a type object of type 'Any', not an object instance of type 'Regex'.  Did you forget a 'multi'?␤  in block <unit> at <tmp> line 1␤␤»

[16:37] <moritz> m: <bla foo-001.json foo-002.json bar>.map({m/'-'<(\d+)>'.json'/}).grep(?*)

[16:37] <camelia> rakudo-moar 33c52dbc7: ( no output )

[16:37] <moritz> m: say  <bla foo-001.json foo-002.json bar>.map({m/'-'<(\d+)>'.json'/}).grep(?*)

[16:37] <camelia> rakudo-moar 33c52dbc7: OUTPUT: «(｢001｣ ｢002｣)␤»

[16:37] <moritz> m: say  <bla foo-001.json foo-002.json bar>.map({m/'-'<(\d+)>'.json'/}).grep(?*).map(~*)

[16:37] <camelia> rakudo-moar 33c52dbc7: OUTPUT: «(001 002)␤»

[16:37] <moritz> a bit weird, but *finally* I got to use <( and )> in a regex :-)

[16:39] <jnthn> Think I prefer my flat comb solution ;)

[16:40] <jnthn> But yeah, that also works :)

[16:41] <bdmatatu> <( and )> look pretty useful, thanks

[16:41] *** cog_ left
[16:43] <moritz> m: say gather for <bla foo-001.json foo-002.json bar> { take ~$/[0] if m/'-' (\d+) '.json'/ }

[16:43] <camelia> rakudo-moar 33c52dbc7: OUTPUT: «(001 002)␤»

[16:43] <moritz> simple to reason about :-)

[16:43] *** cfa joined
[16:43] <JMERELO> So I want to create a new Channel that groups elements in a base Channel. I'm using this my $c2 = $c.Supply.batch( elems => 2).Channel;

[16:44] <moritz> JMERELO: I've already seen similar things on stackoverflow; why are you so eager to turn Supplies into Channels?

[16:44] <JMERELO> It simply hangs up. I initially tried to use Supplies, but you can't run them concurrently

[16:45] <JMERELO> @moritz not really. I tried @timotimo answer, but the problem is that turning a channel into a list blocks it if there's no supply available.

[16:46] <JMERELO> OK, back to basics. I want to do this. I have a channel and I want to do stuff to individual elements in a channel, but concurrently I want to do stuff to couples of elements in the channel.

[16:46] <moritz> JMERELO: why not work with the supplies directly?

[16:46] *** robertle joined
[16:46] <JMERELO> @moritz they are supposed to not be concurrent, I guess. 

[16:47] <moritz> channels are also for serializing things

[16:47] <JMERELO> This is the code with supplies

[16:47] <JMERELO> my $length = 32;

[16:48] <JMERELO> my $supplier = Supplier.new;

[16:48] <JMERELO> my $supply   = $supplier.Supply;

[16:48] <JMERELO> my $pairs = $supply.batch( elems => 2 );

[16:48] <JMERELO> $supply.tap( -> $v { say "First : ", $v });

[16:48] <JMERELO> $supply.tap( -> $χ { say max-ones( $χ ) } );

[16:48] <JMERELO> $pairs.tap( -> @pair { say crossover( @pair[0], @pair[1] )} );

[16:48] <moritz> you can do something like while my $elem = $channel.receive() { start { do something with $elem } }

[16:48] <JMERELO> for 1 .. 10 {

[16:48] <timotimo> please don't paste code directly into irc, thanks

[16:48] <JMERELO>     $supplier.emit( random-chromosome($length) );

[16:48] <JMERELO> }

[16:48] <mst> JMERELO: pasting directly into an IRC channel creates an unreadable mess

[16:48] <JMERELO> @timotimo OK. What's the best way to do it?

[16:48] <mst> please consider using e.g. github's gist or http://fpaste.scsys.co.uk/

[16:48] <JMERELO> @mst will do. Thanks.

[16:49] <mst> also note that on IRC you address people with 'mst:', twitter-style is weird

[16:49] <timotimo> not only does it allow others to write in between your lines, but also - in order for the server to not kick you for spam - your client spreads it out at about 1 line per second

[16:49] <JMERELO> You have probably noticed I'm not too familiar with IRC. Sorry. mst: timotimo:

[16:50] <JMERELO> Anyway, here's the code https://github.com/JJ/p6-algorithm-evolutionary-simple/blob/master/examples/supply.p6 

[16:51] *** TreyHarris joined
[16:51] <timotimo> JMERELO: do you realize you've closed the $c channel that $more-work is supposed to send stuff to in line 5?

[16:51] <JMERELO> Works pretty well, but I would like the two taps to run concurrently. That's why I tried channels, but then I realized it's not easy to do that with channels. 

[16:52] <JMERELO> timotimo: no. So stupid.

[16:52] <timotimo> that doesn't fix it, though

[16:53] <JMERELO> timotimo: does not make it any less stupid. 

[16:55] <JMERELO> Took it down to this https://gist.github.com/JJ/47c5988e661291cab2691e9262992c17 It simply hangs up.

[16:55] *** abraxxa left
[16:55] <moritz> maybe you really want to something with .hyper.map with two parallel jobs or so?

[16:55] <thundergnat> Is there any way to modify the .pos of a match from inside a Grammar? I'm trying to update this code: http://rosettacode.org/wiki/Names_to_numbers#Perl_6 to work with modern Rakudo and this is a major stumbling block. See the .trimspace method, last line.

[16:55] <JMERELO> moritz: maybe. Tell me more...

[16:56] <moritz> JMERELO: https://6guts.wordpress.com/2017/03/16/considering-hyperrace-semantics/ 

[16:59] <JMERELO> moritz: Not sure. It's nice, but I would need the left hand side of the .hyper to be generated dynamically.

[16:59] <JMERELO> moritz: that is, to be a channel or supply

[17:00] *** pharv joined
[17:01] *** darutoko left
[17:01] *** darutoko joined
[17:03] <JMERELO> This one works a tiny bit better: https://gist.github.com/JJ/47c5988e661291cab2691e9262992c17 Spits numbers for a while, then hangs.

[17:03] <JMERELO> If I stop re-sending what's been read to the channel, it spits _less_ numbers and then hangs.

[17:06] *** athenot joined
[17:08] <jnthn> my $work = start react whenever $c -> $item { $c.send( $item );

[17:08] <jnthn> ...is that meant to be sending to itself forever?

[17:08] <JMERELO> jnthm: there's a counter to make it stop after some time. But in a first approximation, yes.

[17:08] <jnthn> Well, until somebody closes it, and then it will potentially die on the .send

[17:09] <El_Che> JMERELO: /nick jmerelo

[17:09] <El_Che> JMERELO: it seems you're screaming :)

[17:09] *** JMERELO is now known as jmerelo

[17:09] <jmerelo> El_Che: Thanks 

[17:09] <El_Che> way beter :)

[17:10] <El_Che> who said the Spanish always yell ;)

[17:10] *** athenot left
[17:10] <jmerelo> El_Che: and wave hands \o/

[17:11] <El_Che> that's the Italian :)

[17:11] <El_Che> jmerelo: who's your grant manager, by the way?

[17:11] <jmerelo> El_Che: :-)

[17:12] <jmerelo> El_Che: Mark Jensen

[17:12] <jmerelo> I kinda got this concurrent Fibonacci to work https://github.com/JJ/my-perl6-examples/blob/master/concurrent.p6

[17:13] <El_Che> jmerelo: I don't know him personally

[17:13] <El_Che> jmerelo: I love channels as well

[17:13] <El_Che> nice

[17:13] <jmerelo> El_Che: Likewise. 

[17:14] <jmerelo> El_Che: the thing is to keep the stuff moving as long as you take only one element from the channel.

[17:14] <El_Che> I find them easy to conceptualize in my head

[17:14] <El_Che> the other stuff less so

[17:14] <El_Che> :)

[17:15] *** athenot joined
[17:18] * jnthn uses Channel much less than Promise and Supply, but that's probably a reflection of the problems he works on

[17:18] <jmerelo> :jnthn I couldn't figure out how to that with Promises. 

[17:18] <El_Che> jnthn: I know you are a promise guy

[17:18] <El_Che> :)

[17:19] <timotimo> well, promises are for single values, and you really want multiple values over time

[17:20] *** comborico1611 joined
[17:24] <jmerelo> It hangs now after the last sentence... https://github.com/JJ/my-perl6-examples/blob/3f616830fc9edd208b2e732d8c1633085695a084/concurrent.p6

[17:25] *** scimon left
[17:25] <jnthn> jmerelo: I didn't say they are the right tool for your task :)

[17:25] <jnthn> I think Channel may actually be the right thing here

[17:30] <jnthn> jmerelo: $output is never closed

[17:30] <jmerelo> jnthm: Do I need to close it before reading it?

[17:30] <jnthn> No, but you need to close it for a .list loop over it to terminate

[17:30] <jnthn> for $channel.list { } means read from the channel, blocking until there's values, until the channel is closed

[17:31] <jmerelo> jnthn: right. So I guess I would need to use poll instead, and close if there's nothing there waiting.

[17:31] <jnthn> Maybe but beware race conditions

[17:32] <jnthn> I don't know what problem this is abstracted from so it's hard to suggest a better solution without risking factoring out the actual problem :)

[17:33] <jmerelo> jnthn: an evolutionary algorithm

[17:35] <jnthn> Ah, sadly I know nothing much about those.

[17:35] *** mr_ron left
[17:35] <jmerelo> Well, there's this nice (and rather recent) Perl 6 Module... https://modules.perl6.org/dist/Algorithm::Evolutionary::Simple:cpan:JMERELO

[17:36] *** vike left
[17:37] <jnthn> Is the re-sending of items significant or just because channels are a one-to-one mechanism, not a broadcast one?

[17:38] <jmerelo> jnthn: it rather is. My idea is to evolve populations concurrently, and have a "mixer" mixing populations coming from a particular channel.

[17:38] *** cdg_ joined
[17:38] <jmerelo> jnthn: so basically yes. 

[17:40] <jmerelo> I guess this is it, channel mixing achieved, output channel printed at the end using poll https://github.com/JJ/my-perl6-examples/blob/c1238703cff36c2d62d4db845fbacd2a8ecf92a3/concurrent.p6

[17:41] *** cdg left
[17:42] <jnthn> :)

[17:42] * jnthn bbl

[17:43] *** pharv left
[17:43] *** cdg_ left
[17:44] *** dakkar left
[17:44] *** cdg joined
[17:44] *** pharv joined
[17:46] *** vike joined
[17:50] <jmerelo> So, next question. Can anyone give me the docs.perl6.org server logs? Or a few of them anyway? I'd like to analyze them basically for search engine terms, landing pages and leaving pages.

[17:50] <jmerelo> IPs are not so important, so they can be anonymized if needed.

[17:52] <El_Che> jmerelo: probably a question for moritz

[17:52] *** khisanth__ left
[17:53] *** thundergnat left
[17:54] *** |oLa|1 joined
[17:54] <jmerelo> moritz: can you help with the p6doc server logs?

[17:54] *** |oLa|1 left
[17:54] *** |oLa|1 joined
[17:57] *** Kaiepi left
[17:57] *** |oLa| left
[17:58] *** Kaiepi joined
[17:58] *** epony left
[17:59] *** jmerelo left
[18:00] *** epony joined
[18:01] *** tst133 joined
[18:02] *** pharv left
[18:02] *** tst133 left
[18:05] *** committable6 left
[18:05] *** committable6 joined
[18:05] *** khisanth__ joined
[18:08] *** pharv joined
[18:11] *** darutoko- joined
[18:11] *** bisectable6 left
[18:11] *** bisectable6 joined
[18:11] *** ChanServ sets mode: +v bisectable6

[18:14] *** darutoko left
[18:15] *** darutoko- left
[18:16] *** domidumont joined
[18:21] *** kaare_ left
[18:22] *** kaare_ joined
[18:24] *** bocaneri left
[18:24] *** mr_ron joined
[18:24] *** domidumont left
[18:25] *** Kaiepi left
[18:25] *** domidumont joined
[18:26] *** Kaiepi joined
[18:29] *** wamba joined
[18:31] *** domidumont left
[18:31] *** domidumont joined
[18:32] *** domidumont left
[18:33] *** domidumont joined
[18:37] *** mcmillhj left
[18:37] *** mcmillhj joined
[18:38] *** amalia___ left
[18:46] *** cdg left
[18:47] *** cdg joined
[18:48] *** cdg_ joined
[18:48] *** domidumont left
[18:52] *** cdg left
[18:53] *** cdg_ left
[19:01] *** comborico1611 left
[19:04] *** domidumont joined
[19:10] *** pharv left
[19:11] *** pharv joined
[19:13] *** mcmillhj left
[19:14] *** mcmillhj joined
[19:21] *** comborico1611 joined
[19:27] *** natrys joined
[19:41] *** jimav joined
[19:42] *** athenot left
[19:42] <jimav> I'm wondering why atomic operators are not restricted to "atomicint", which is portable...

[19:43] *** athenot joined
[19:43] <jimav> In other words, is it helpful to allow the non-portable  "my int64 $i; cas $i,0,1" without a warning?

[19:45] <jimav> Relatedly, why throw an exception if the result from atomic ops won't fit in 64 bits, rather than won't fit in atomicint (which could be 32 bits)?

[19:45] *** Kaiepi left
[19:45] *** Kaiepi joined
[19:52] *** domidumont left
[19:52] <jimav> Are the various is repr('...') documented anywhere?

[20:06] *** pharv left
[20:06] *** pharv joined
[20:15] *** bdmatatu left
[20:16] *** lelf joined
[20:17] <lelf> p6: sub foo ($x? where Int) { }; foo()

[20:17] <camelia> rakudo-moar d75f4cfc7: OUTPUT: «Constraint type check failed in binding to parameter '$x'; expected anonymous constraint to be met but got Any (Any)␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:17] <lelf> unconfuse me please

[20:20] <jnthn> p6: sub foo (Int $x?) { }; foo() # why not this?

[20:20] <camelia> rakudo-moar d75f4cfc7: ( no output )

[20:21] *** Kaiepi left
[20:23] <jnthn> jimav: Native types are don't carry type information at runtime, so we can't tell the difference. We could try and do static analysis and catch some cases.

[20:23] *** Kaiepi joined
[20:24] <lelf> p6: subset Even of Int where * %% 2; sub foo (Even $x?) { }; foo() # jnthn:

[20:24] <camelia> rakudo-moar d75f4cfc7: OUTPUT: «Use of uninitialized value of type Int in numeric context␤  in whatevercode  at <tmp> line 1␤»

[20:25] <[Coke]> r: subset Even of Int:D where * %% 2; sub foo (Even $x?) { }; foo() # jnthn:

[20:25] <camelia> rakudo-moar d75f4cfc7: OUTPUT: «Constraint type check failed in binding to parameter '$x'; expected Even but got Int (Int)␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:25] <camelia> ..rakudo-jvm a92950fb4: ( no output )

[20:25] <[Coke]> (oops, meant m)

[20:27] <jnthn> Interesting that r-j things differently though

[20:28] <jnthn> But yeah, it enforces the constraint even on an optional.

[20:29] *** pharv left
[20:30] *** pharv joined
[20:33] *** vcv left
[20:40] *** pharv left
[20:41] *** pharv joined
[20:41] *** wamba left
[20:44] *** mr_ron left
[20:45] *** pharv left
[20:45] *** pharv_ joined
[20:49] *** wamba joined
[20:50] *** stmuk_ joined
[20:52] *** stmuk left
[20:59] *** mcmillhj left
[20:59] *** comborico1611 left
[21:04] *** cdg joined
[21:06] *** Kaiepi left
[21:07] *** Kaiepi joined
[21:07] *** pharv_ left
[21:10] *** pharv joined
[21:13] *** cdg_ joined
[21:15] *** cdg left
[21:17] *** skids left
[21:20] *** mr_ron joined
[21:26] *** espadrine joined
[21:34] *** pharv left
[21:34] *** pharv joined
[21:36] *** mcmillhj joined
[21:37] *** kurahaupo_ joined
[21:38] *** kurahaupo_ is now known as kurahaupo__

[21:40] *** kurahaupo left
[21:40] *** mcmillhj left
[21:42] *** kurahaupo__ is now known as kurahaupo

[21:47] <AlexDaniel> bisectable6: uptime

[21:47] <bisectable6> AlexDaniel, 3 hours, 36 minutes, and 5 seconds, 208.800781MiB maxrss. This is Rakudo version 2018.02.1-166-g51c4d4d89 built on MoarVM version 2018.02-171-geee5be412 implementing Perl 6.c.

[21:48] <AlexDaniel> committable6: uptime

[21:48] <committable6> AlexDaniel, 3 hours, 42 minutes, and 41 seconds, 203.855469MiB maxrss. This is Rakudo version 2018.02.1-166-g51c4d4d89 built on MoarVM version 2018.02-171-geee5be412 implementing Perl 6.c.

[21:48] <AlexDaniel> notable6: uptime

[21:48] <notable6> AlexDaniel, 2 days, 23 hours, and 57 seconds, 239.210938MiB maxrss. This is Rakudo version 2018.02.1-166-g51c4d4d89 built on MoarVM version 2018.02-171-geee5be412 implementing Perl 6.c.

[21:49] *** wamba left
[21:51] *** mcmillhj joined
[21:55] <AlexDaniel> # license ‘GPL-3.0-or-later’ is not one of the standardized SPDX license identifiers.

[21:55] <AlexDaniel> what the

[21:55] <AlexDaniel> ah… it's outdated

[21:56] *** mcmillhj left
[22:03] *** athenot left
[22:04] *** athenot joined
[22:07] *** athenot left
[22:08] *** mcmillhj joined
[22:09] <Geth> ¦ ecosystem: c05cbfdb8d | (Aleks-Daniel Jakimenko-Aleksejev)++ | META.list

[22:09] <Geth> ¦ ecosystem: Add App::OrgSleep

[22:09] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/c05cbfdb8d

[22:10] <AlexDaniel> heh… first module…

[22:11] *** mr_ron left
[22:12] *** mcmillhj left
[22:25] *** rindolf left
[22:26] *** mcmillhj joined
[22:31] *** mcmillhj left
[22:33] *** pmurias left
[22:36] *** comborico1611 joined
[22:38] *** mcmillhj joined
[22:42] *** mcmillhj left
[22:54] *** mcmillhj joined
[22:59] *** mcmillhj left
[23:01] *** vike1 joined
[23:01] *** vike left
[23:01] *** mr_ron joined
[23:05] *** robertle left
[23:05] *** dct joined
[23:09] *** mcmillhj joined
[23:09] *** itaipu left
[23:11] *** natrys left
[23:13] *** mcmillhj left
[23:17] *** pharv left
[23:18] *** pharv joined
[23:21] *** skids joined
[23:21] *** mcmillhj joined
[23:22] *** kaare__ joined
[23:23] *** pharv left
[23:24] *** kaare_ left
[23:26] *** mcmillhj left
[23:27] *** lelf left
[23:34] *** dct left
[23:35] *** enheh_ joined
[23:36] *** athenot joined
[23:41] *** mcmillhj joined
[23:42] *** cdg joined
[23:45] *** mcmillhj left
[23:46] *** cdg_ left
[23:46] *** khw left
[23:47] *** cdg left
[23:51] *** jimav left
[23:52] *** mcmillhj joined
[23:58] *** mcmillhj left
