[00:05] *** kurahaupo joined
[00:08] *** kurahaupo_ left
[00:08] *** mr_ron left
[00:12] <Geth> ¦ doc: 8293246c0a | (Ben Davies)++ | 3 files

[00:12] <Geth> ¦ doc: Simplify util/perl-nbsp.p6

[00:12] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8293246c0a

[00:13] <Kaiepi> thanks zoffix

[00:17] *** shareable6 left
[00:23] *** pmurias left
[00:25] <Zoffix> eco: author:elizabeth

[00:25] <buggable> Zoffix, Found 70 results: List::UtilsBy, P5-X, Hash::Util, List::AllUtils, List::MoreUtils. See https://modules.perl6.org/s/author%3Aelizabeth

[00:25] <Zoffix> 70!

[00:31] *** lucasb left
[00:43] <Geth> ¦ doc: bf181d1eb3 | (Will "Coke" Coleda)++ | doc/Language/system.pod6

[00:43] <Geth> ¦ doc: remove duplicate word

[00:43] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/bf181d1eb3

[00:43] <Geth> ¦ doc: 6dcb91772a | (Will "Coke" Coleda)++ | doc/Type/Attribute.pod6

[00:43] <Geth> ¦ doc: fix compilation

[00:43] <synopsebot> Link: https://doc.perl6.org/language/system

[00:43] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6dcb91772a

[00:43] <synopsebot> Link: https://doc.perl6.org/type/Attribute

[00:47] <Geth> ¦ doc: fdbc09e822 | (Will "Coke" Coleda)++ | doc/Language/nativecall.pod6

[00:47] <Geth> ¦ doc: fix pod error

[00:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fdbc09e822

[00:47] <synopsebot> Link: https://doc.perl6.org/language/nativecall

[00:48] <Geth> ¦ doc: 0c413c2060 | (Will "Coke" Coleda)++ | doc/Language/system.pod6

[00:48] <Geth> ¦ doc: fix pod error; pass links test

[00:48] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0c413c2060

[00:49] *** Davercc joined
[00:50] <Geth> ¦ doc: ff2ed63356 | (Will "Coke" Coleda)++ | Makefile

[00:50] <Geth> ¦ doc: fix xtest test order; simple first

[00:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ff2ed63356

[00:53] *** Davercc left
[00:56] *** Zoffix left
[01:04] *** mcmillhj joined
[01:06] *** markong left
[01:12] *** mcmillhj left
[01:26] <Geth> ¦ doc/coke/build: 18 commits pushed by (Will "Coke" Coleda)++

[01:26] <Geth> ¦ doc/coke/build: review: https://github.com/perl6/doc/compare/b7fc7187be26...2f9422715b40

[01:31] *** kurahaupo left
[01:31] *** kurahaupo joined
[01:33] *** Kaiepi left
[01:36] *** comborico1611 left
[01:43] *** Kaiepi joined
[01:47] *** ilbot3 left
[01:54] <Geth> ¦ doc: 6ae7cf8e69 | (Ben Davies)++ | 3 files

[01:54] <Geth> ¦ doc: Match linebreaks between Perl and 5/6 in util/perl-nbsp.p6

[01:54] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6ae7cf8e69

[01:56] *** ilbot3 joined
[01:56] *** ChanServ sets mode: +v ilbot3

[01:57] <Kaiepi> jesus that was way more annoying to write than it should've been

[02:03] *** rouking joined
[02:05] <rouking> Hey folks, I am watching one of jnthn's talks about concurrency, and I was wondering why the `.start(...).migrate()` pattern uses a supply of supplies rather than a supply of promises. Wouldn't promsises make more sense, since each supply coming through that topmost supply will only ever produce one value?

[02:05] *** athenot joined
[02:07] *** kerrhau joined
[02:08] <kerrhau> rouking: hello

[02:14] *** daxim_ joined
[02:28] *** zakharyas joined
[03:05] *** Kaiepi left
[03:13] *** psychoslave joined
[03:32] *** kurahaupo left
[03:33] *** kurahaupo joined
[03:33] *** kurahaupo left
[03:33] *** kurahaupo joined
[03:42] *** zakharyas left
[03:49] *** BenGoldberg left
[04:07] *** Kaiepi joined
[04:14] *** bwisti left
[04:49] *** Summertime joined
[05:02] <Kaiepi> is there some way to escape < and > inside C<> pod blocks?

[05:27] *** kaare_ joined
[05:29] <Xliff_> What is the recommended way to predefine a regex for when you need circular dependency?

[05:30] *** psychoslave left
[05:32] *** robertle left
[05:42] *** sena_kun joined
[05:44] *** psychoslave joined
[05:44] *** wamba joined
[05:52] *** espadrine_ joined
[05:53] *** jmerelo joined
[05:54] *** raschipi left
[05:56] <TEttinger> Xliff_: pray to The Lurker in Darkness that he might spare your mind as you attempt to parse the infinite

[05:58] <Kaiepi> worked out my problem, just needed to use C«» instead of C<> to put < and > inside the tag

[05:59] <Geth> ¦ doc: 09c4084b12 | (Ben Davies)++ | doc/Language/js-nutshell.pod6

[05:59] <Geth> ¦ doc: Fix formatting in language/js-nutshell.pod6

[05:59] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/09c4084b12

[05:59] <synopsebot> Link: https://doc.perl6.org/language/js-nutshell

[06:00] *** robertle joined
[06:04] *** rindolf joined
[06:09] *** Schepeers left
[06:12] *** espadrine_ left
[06:15] <Xliff_> TEttinger: You do know that when you Look at the Lurker, the Lurker looks back?

[06:22] <Geth> ¦ doc: e1b7553fcb | (JJ Merelo)++ | 4 files

[06:22] <Geth> ¦ doc: Fixes two breaking space instances

[06:22] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e1b7553fcb

[06:22] <Geth> ¦ doc: 94f9d75886 | (JJ Merelo)++ | 5 files

[06:22] <Geth> ¦ doc: Adds detection of breaking space across lines

[06:22] <Geth> ¦ doc: 

[06:22] <Geth> ¦ doc: Also reflows and fixes files where it's found. Closes #2066

[06:22] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/94f9d75886

[06:50] <Geth> ¦ doc: 6601343c30 | (JJ Merelo)++ | Makefile

[06:50] <Geth> ¦ doc: Moves :Z to an independent variable

[06:50] <Geth> ¦ doc: 

[06:50] <Geth> ¦ doc: To avoid problems with BSD make. Closes #2065

[06:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6601343c30

[06:59] *** psychoslave left
[07:02] *** domidumont joined
[07:08] *** domidumont left
[07:09] *** domidumont joined
[07:09] *** psychoslave joined
[07:22] *** rindolf left
[07:25] *** rindolf joined
[07:27] *** kurahaupo_ joined
[07:31] *** kurahaupo left
[07:32] *** Schepeers joined
[07:32] *** darutoko joined
[07:38] *** andrzejku joined
[07:38] <andrzejku> hello :)

[07:40] *** sauvin joined
[07:42] <rindolf> andrzejku: hey

[07:42] <rindolf> andrzejku: what's up?

[07:46] <Geth> ¦ doc: 3e49ef786f | (JJ Merelo)++ | 4 files

[07:46] <Geth> ¦ doc: Re-indexing "trait is default"

[07:46] <Geth> ¦ doc: 

[07:46] <Geth> ¦ doc: There was a bogus category generated, as well as some other

[07:46] <Geth> ¦ doc: problems. There's still a problem referenced in #1823 comments, but at

[07:46] <Geth> ¦ doc: least a new bogus category (which wasn't even in #1410) has been

[07:46] <Geth> ¦ doc: eliminated.

[07:46] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/3e49ef786f

[07:52] <Geth> ¦ doc: e58ebb4e17 | (JJ Merelo)++ | doc/Language/functions.pod6

[07:52] <Geth> ¦ doc: Reflow and minor grammar adjustments

[07:52] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e58ebb4e17

[07:52] <synopsebot> Link: https://doc.perl6.org/language/functions

[07:54] *** xinming joined
[07:58] <Geth> ¦ doc: 419a8f8bdd | (JJ Merelo)++ | doc/Language/structures.pod6

[07:58] <Geth> ¦ doc: Starts with data structures refs #114

[07:58] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/419a8f8bdd

[07:58] <synopsebot> Link: https://doc.perl6.org/language/structures

[08:00] *** domidumont left
[08:00] *** domidumont joined
[08:07] <andrzejku> rindolf: fine :)

[08:27] *** HaraldJoerg joined
[08:30] *** kurahaupo_ left
[08:31] *** kurahaupo joined
[08:48] *** aindilis left
[08:49] *** aindilis joined
[09:00] *** domidumont left
[09:01] <AlexDaniel> jmerelo: pm :)

[09:18] *** kaare_ left
[09:19] *** kaare_ joined
[09:20] *** wamba left
[09:24] *** psychoslave left
[09:54] <Summertime> I noticed that there is very little facilities for sticking two lists together, is it just because its not seen as needed? (due to how versatile slips seem to be?)

[09:57] *** eliasr joined
[10:00] *** aindilis left
[10:00] <moritz> usually you can use the comma operator, and if the context is sufficiently flattening, tha works

[10:01] <moritz> m: my @a = <a b c>; my @b = 1..3; my @c = @a, @b; say @c.perl

[10:01] <camelia> rakudo-moar 01a373649: OUTPUT: «[["a", "b", "c"], [1, 2, 3]]␤»

[10:01] <moritz> huh, not flattening enough :(

[10:01] <moritz> m: my @a = <a b c>; my @b = 1..3; my @c = flat @a, @b; say @c.perl

[10:01] <camelia> rakudo-moar 01a373649: OUTPUT: «["a", "b", "c", 1, 2, 3]␤»

[10:01] <lizmat> moritz: that was the single arg rule in action :-)

[10:02] <moritz> :(

[10:02] * moritz somehow has a brainz blockade when it comes to understanding post-GLR semantics

[10:03] <lizmat> m: my @a = ^5; my @b = <a b c d e>; my @c = (|@a,|@b); dd @c   # expected

[10:03] <camelia> rakudo-moar 01a373649: OUTPUT: «Array @c = [0, 1, 2, 3, 4, "a", "b", "c", "d", "e"]␤»

[10:03] <lizmat> m: my @a = ^5; my @b = <a b c d e>; my @c = (@a,@b).>>Slip  # *not* expected, is this a bug ?

[10:03] <camelia> rakudo-moar 01a373649: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing dot on method call␤at <tmp>:1␤------> 3 my @b = <a b c d e>; my @c = (@a,@b).>>7⏏5Slip  # *not* expected, is this a bug ?␤    expecting any of:␤        postfix␤»

[10:03] <lizmat> m: my @a = ^5; my @b = <a b c d e>; my @c = (@a,@b)>>.Slip  # *not* expected, is this a bug ?

[10:03] <camelia> rakudo-moar 01a373649: ( no output )

[10:03] <lizmat> m: my @a = ^5; my @b = <a b c d e>; my @c = (@a,@b)>>.Slip; dd @c  # *not* expected, is this a bug ?

[10:03] <camelia> rakudo-moar 01a373649: OUTPUT: «Array @c = [slip(0, 1, 2, 3, 4), slip("a", "b", "c", "d", "e")]␤»

[10:04] <lizmat> m: my @a = ^5; my @b = <a b c d e>; my @c = (@a,@b)>>.Slip; dd $_ for @c

[10:04] <camelia> rakudo-moar 01a373649: OUTPUT: «Slip @c = $(slip(0, 1, 2, 3, 4))␤Slip @c = $(slip("a", "b", "c", "d", "e"))␤»

[10:04] <lizmat> itemized slips...  hmmm

[10:20] <Summertime> seems to only be the hyper too? other methods for slipping a list seem to work fine

[10:21] <lizmat> Summertime: yeah, that's why I wonder whether that's a bug or not

[10:22] <lizmat> it was at least a bit of a WAT to me

[10:22] <Summertime> either a bug or needs documentin', either way, I've ended up going with sub infix:<cc>{|@^a,|@^b} as a concat operator

[10:22] <Summertime> I just don't know if I'll ever need it now though :(

[10:23] *** wamba joined
[10:26] <Summertime> then again it allows for collecting values using cc=, which also makes a smiley face which is neat

[10:53] *** Zoffix joined
[10:53] <Zoffix> Summertime: I presume you know about `flat` and `append`?

[10:54] <Zoffix> m: my @a = <a b c>; my @b = <d e f>; @a .= append: @b; dd @a;

[10:54] <camelia> rakudo-moar 01a373649: OUTPUT: «Array @a = ["a", "b", "c", "d", "e", "f"]␤»

[10:54] <Zoffix> This one mutates one of the lists

[10:54] <Zoffix> m: my @a = <a b c>; my @b = <d e f>; my @c = flat @a, @b, @a, @b, @a, @b; dd @c;

[10:54] <camelia> rakudo-moar 01a373649: OUTPUT: «Array @c = ["a", "b", "c", "d", "e", "f", "a", "b", "c", "d", "e", "f", "a", "b", "c", "d", "e", "f"]␤»

[10:54] <Zoffix> And this one makes a newone

[10:55] <Zoffix> lizmat: if it'd decont, then those cells in the returned Array would no longer be mutable, I think

[10:55] <Zoffix> m: my @a = ^5; my @b = <a b c d e>; my @c = (@a,@b)».Slip».uc; dd $_ for @c

[10:55] <camelia> rakudo-moar 01a373649: OUTPUT: «Str @c = "0"␤Str @c = "1"␤Str @c = "2"␤Str @c = "3"␤Str @c = "4"␤Str @c = "A"␤Str @c = "B"␤Str @c = "C"␤Str @c = "D"␤Str @c = "E"␤»

[10:56] <Zoffix> m: my @a = ^5; my @b = <a b c d e>; my @c = (@a,@b)».Slip».self; dd @c

[10:56] <camelia> rakudo-moar 01a373649: OUTPUT: «Array @c = [0, 1, 2, 3, 4, "a", "b", "c", "d", "e"]␤»

[10:56] <Zoffix> m: my @a = ^5; my @b = <a b c d e>; my @c = (@a,@b)».Slip; @c[0] = 42; dd @c

[10:56] <camelia> rakudo-moar 01a373649: OUTPUT: «Array @c = [42, slip("a", "b", "c", "d", "e")]␤»

[10:56] <Zoffix> m: my @a = ^5; my @b = <a b c d e>; (my @c)[0] := (@a,@b)».Slip.head; @c[0] = 42; dd @c

[10:56] <camelia> rakudo-moar 01a373649: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[10:58] <Zoffix> m: dd (<a b c>.Slip.item, <z y z>.Slip.item)

[10:58] <camelia> rakudo-moar 01a373649: OUTPUT: «("a", "b", "c", "z", "y", "z")␤»

[10:58] <Zoffix> lizmat: nm, I don't get how it works..

[10:58] *** Zoffix left
[11:04] <Kaiepi> m: <a b c>.index('b')

[11:04] <camelia> rakudo-moar 01a373649: ( no output )

[11:04] <Kaiepi> m: dd <a b c>.index('b')

[11:04] <camelia> rakudo-moar 01a373649: OUTPUT: «2␤»

[11:04] <Kaiepi> m: dd <a b c>.grep('b', :k).head

[11:04] <camelia> rakudo-moar 01a373649: OUTPUT: «1␤»

[11:04] <Kaiepi> is there a simpler way to get the index of an element in an array?

[11:06] <lizmat> m: dd <aa b c>.index('b')  # wrong way

[11:06] <camelia> rakudo-moar 01a373649: OUTPUT: «3␤»

[11:06] <lizmat> .index coerces to Str, and then looks up what you give it

[11:07] <Kaiepi> i know, that's why i gave the second example

[11:09] <lizmat> Kaiepi: if you only want to know the first occurrence, you can use 'first'

[11:09] <tbrowder_> nqp: my $r := /[ \x[0020] # space \n ]>+/;

[11:09] <camelia> nqp-moarvm: OUTPUT: «Regex not terminated. at line 2, near ""␤   at gen/moar/stage2/NQPHLL.nqp:701  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:panic)␤ from gen/moar/stage2/NQPP6QRegex.nqp:75  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPP6QRegex.moarvm:throw_r…»

[11:10] <lizmat> m: dd <a b c>.first('b', :k)

[11:10] <camelia> rakudo-moar 01a373649: OUTPUT: «1␤»

[11:10] <Kaiepi> thanks

[11:10] <lizmat> m: dd <a b c d e b>.first('b', :k, :end)  # and the last one

[11:10] <camelia> rakudo-moar 01a373649: OUTPUT: «5␤»

[11:11] <tbrowder_> nqp: my $r := /<[ \x[0020] # space \n ]>+/;

[11:11] <camelia> nqp-moarvm: ( no output )

[11:24] *** [particle] joined
[11:28] *** [particle] left
[11:28] *** [particle] joined
[11:29] *** markong joined
[11:51] *** Qwerasd joined
[11:52] <Qwerasd> If I have a Parameter object how can I get the type as a string?

[11:52] <yoleaux> 25 May 2018 14:55Z <b2gills> Qwerasd: `for @arr.kv -> $i, $_ { @arr.splice($i,1) when 5 }`

[11:52] <Qwerasd> What?

[11:52] <Qwerasd> m: say (-> Str @a {}).signature.params[0].type

[11:52] <camelia> rakudo-moar 01a373649: OUTPUT: «(Positional[Str])␤»

[11:53] <Qwerasd> How would I coerce that in to a string that just says "Str"

[11:54] <moritz> m: say (-> Str @a {}).signature.params[0].type.of

[11:54] <camelia> rakudo-moar 01a373649: OUTPUT: «(Str)␤»

[11:54] <moritz> m: say (-> Str @a {}).signature.params[0].type.of.^name

[11:54] <camelia> rakudo-moar 01a373649: OUTPUT: «Str␤»

[11:54] <moritz> Qwerasd: ^^

[11:54] <Qwerasd> Thank you!

[11:54] <Qwerasd> Can you explain what the .of is about?

[11:54] <moritz> https://docs.perl6.org/type/Positional#method_of

[11:55] *** kurahaupo_ joined
[11:55] <Qwerasd> Thanks!

[11:56] *** kurahaupo left
[11:57] *** kurahaupo_ left
[11:57] *** kurahaupo joined
[12:01] *** Paul_ joined
[12:01] *** Paul_ left
[12:03] <buggable> New CPAN upload: Digest-BubbleBabble-0.0.1.tar.gz by KAIEPI https://cpan.metacpan.org/authors/id/K/KA/KAIEPI/Perl6/Digest-BubbleBabble-0.0.1.tar.gz

[12:05] *** [particle]1 joined
[12:06] *** [particle] left
[12:14] *** [particle] joined
[12:15] *** [particle]1 left
[12:16] *** [particle]1 joined
[12:18] *** [particle] left
[12:22] *** Qwerasd left
[12:22] *** [particle] joined
[12:24] *** [particle]1 left
[12:34] *** enheh left
[12:34] *** enheh joined
[12:35] <timotimo> lizmat: i could imagine the >>.Slip resulting in a 2-element-array comes from "hyper tries its best to keep structure of its input"

[12:35] <[Coke]>  /win 3

[12:35] <buggable> [Coke], Thank you for entering Accidental /win Lottery! The next draw will happen in 4 days, 11 hours, 24 minutes, and 7 seconds

[12:37] *** mcmillhj joined
[12:40] *** Zoffix joined
[12:40] *** Zoffix left
[12:46] *** HaraldJoerg left
[12:48] *** HaraldJoerg joined
[12:49] *** benjikun left
[12:51] *** benjikun joined
[13:10] *** domidumont joined
[13:32] *** mcmillhj left
[13:56] <Xliff_> Is there any way I can pass a rule to a subroutine, use it in a regexp and preserve all of the capture rules within it?

[13:56] <Xliff_> <Xliff_> m: my rule d { <ws><ident><ws> }; say "ddd" ~~ /<d>/

[13:56] <Xliff_> <camelia> rakudo-moar 01a373649: OUTPUT: «｢ddd｣␤ d => ｢ddd｣␤  ws => ｢｣␤  ident => ｢ddd｣␤  ws => ｢｣␤»

[13:56] <Xliff_> ^^ This is what I want to get, but as soon as I send it to a container:

[13:56] <Xliff_> <Xliff_> m: my rule d { <ws><ident><ws> }; my $r = /d/; say "ddd" ~~ /<$r>/

[13:56] <Xliff_> <camelia> rakudo-moar 01a373649: OUTPUT: «｢d｣␤»

[13:57] <timotimo> well, there you're just matching a literal d

[13:58] <timotimo> the rule d isn't even being used at all

[13:58] <timotimo> m: my rule d { <ws><ident><ws> }; my $r = /<d>/; say "ddd" ~~ /<$r>/

[13:58] <camelia> rakudo-moar 01a373649: OUTPUT: «｢ddd｣␤»

[13:58] <timotimo> but yeah, it looks like it doesn't preserve the structure

[13:58] <timotimo> m: my rule d { <ws><ident><ws> }; my $r = /<d>/; say "ddd" ~~ $r

[13:58] <camelia> rakudo-moar 01a373649: OUTPUT: «｢ddd｣␤ d => ｢ddd｣␤  ws => ｢｣␤  ident => ｢ddd｣␤  ws => ｢｣␤»

[13:59] <Xliff_> O

[13:59] <Xliff_> Thanks!

[13:59] <timotimo> if the "r" is supposed to be dynamic, use the ::("&r") trick again

[14:01] <Xliff_> Right, because I may need to use $r in another dynamic regex.

[14:02] <Xliff_> So in the case of the rule, I want the <ident> part to be specified by a container.

[14:03] <Xliff_> OK. Longer story.

[14:03] <Xliff_> I want to perform unit tests of rules in my grammar. So I need to test certain rules individually, but I want to make sure they are anchored, as they would be in the greater grammar.

[14:04] <Xliff_> So I want to write something like "rule test { <ws><$dynamicRule><ws> };" and then test strings against rule test.

[14:04] <Xliff_> But I want to do that in a way that the structure of $dynamicRule is preserved.

[14:17] * Xliff_ throws his hands up in confusion....

[14:18] <Xliff_> ᕕ༼ ͠ຈ Ĺ̯ ͠ຈ ༽┌∩┐

[14:18] <Xliff_> (╬ﾟ◥益◤ﾟ)

[14:18] <Xliff_> I will gist this as soon as I calm back down.

[14:18] <moritz> Xliff_: you have to capture is explicitly

[14:19] <moritz>  rule test { <ws> [$<dynamic>=<$dynamic_Rule>] <ws> }

[14:19] <Xliff_> moritz: Yes, and I have a rule that works perfectly in the positive case, and in the negative case, something is gobbling up symbols and not failing.

[14:19] *** kaare_ left
[14:19] <Xliff_> moritz++

[14:24] *** itaipu joined
[14:25] <Xliff_> https://gist.github.com/Xliff/9f36da860843dd1793b1206493496c60

[14:29] *** wamba left
[14:30] *** captain-cassian- joined
[14:30] *** captain-cassian- left
[14:31] *** wamba joined
[14:32] *** capcassiuscalhou joined
[14:43] <capcassiuscalhou> Is it possible to have some short form:  @A[^2;^2] = 10.rand;    instead of:   for ^2 ->\i {  for ^2 ->\j { @A[i;j] = 10.rand } }   ?

[14:45] <timotimo> yup!

[14:45] <timotimo> m: my @a[4;4]; @a[^2;^2] Z= 10.rand; say @a

[14:45] <camelia> rakudo-moar 01a373649: OUTPUT: «Partially dimensioned views of shaped arrays not yet implemented. Sorry.␤  in block <unit> at <tmp> line 1␤␤»

[14:46] <timotimo> ah, right

[14:46] <Xliff_> m: my @a = (10.rand xx 2, 10.rand xx 2); @a.say

[14:46] <camelia> rakudo-moar 01a373649: OUTPUT: «[(7.196854692594082 0.9698668971034952) (9.657844142402483 7.664903413900274)]␤»

[14:46] <timotimo> m: my @a[4;4]; @a[^2]>>.[^2] X= 10.rand; say @a

[14:46] <camelia> rakudo-moar 01a373649: OUTPUT: «Partially dimensioned views of shaped arrays not yet implemented. Sorry.␤  in block <unit> at <tmp> line 1␤␤»

[14:46] <timotimo> well, i imagine they want an actual shaped array

[14:46] <timotimo> if you want to initialize a shaped array like that you can have:

[14:47] <timotimo> my @a[4;4]; @a = (^10).pick xx 4 xx 4; say @a

[14:47] <evalable6> timotimo, rakudo-moar 01a373649: OUTPUT: «[[4 3 7 6] [5 4 2 6] [7 0 9 3] [6 8 8 7]]␤»

[14:47] <timotimo> but if you want to assign only to parts, that's tricky with those NYI pieces we have there

[14:47] <Xliff_> Yup

[14:48] <timotimo> huh.

[14:49] <timotimo> m: my @a[4;4]; @a[$_[0];$_[1]] = (^10).pick for @a.keys.grep({ .[0] ~~ ^2 && .[1] ~~ ^2 }); say @a

[14:49] <camelia> rakudo-moar 01a373649: OUTPUT: «[[0 1 (Any) (Any)] [6 8 (Any) (Any)] [(Any) (Any) (Any) (Any)] [(Any) (Any) (Any) (Any)]]␤»

[14:49] <timotimo> ugh, disgusting

[14:51] <timotimo> m: my @a[4;4]; @a[$_;] = (^10).pick for @a.keys.grep({ .[0] ~~ ^2 && .[1] ~~ ^2 }); say @a

[14:51] <camelia> rakudo-moar 01a373649: OUTPUT: «Partially dimensioned views of shaped arrays not yet implemented. Sorry.␤  in block <unit> at <tmp> line 1␤␤»

[14:51] <timotimo> m: my @a[4;4]; @a[$_,] = (^10).pick for @a.keys.grep({ .[0] ~~ ^2 && .[1] ~~ ^2 }); say @a

[14:51] <camelia> rakudo-moar 01a373649: OUTPUT: «Partially dimensioned views of shaped arrays not yet implemented. Sorry.␤  in block <unit> at <tmp> line 1␤␤»

[14:51] <timotimo> i can't seem to figure out how to pass the tuple as key there

[14:52] <timotimo> until someone really invests a month or two into shaped arrays it's going to kind of suck

[14:55] <Xliff_> timotimo: Read my gist?

[14:55] <Xliff_> https://gist.github.com/Xliff/9f36da860843dd1793b1206493496c60

[14:56] <timotimo> sorry, i haven't. let me see

[14:56] <timotimo> how are you matching this?

[14:57] <timotimo> it looks like you simply neglected to anchor the match to the beginning and end

[14:57] *** APic joined
[14:57] <Xliff_> I surround that in <ws>

[14:58] <timotimo> that only means it'd allow spaces in front and at the end

[14:58] <timotimo> m: say "hello world how are you" ~~ /\w\w\w/

[14:58] <camelia> rakudo-moar 01a373649: OUTPUT: «｢hel｣␤»

[14:58] <Xliff_> Right, but for the negative cases, it chops off the first invalid character.

[14:58] <Xliff_> And I can't find where that character is going in the regex.

[14:58] <timotimo> er, that's not what i meant %)

[14:58] <Xliff_> LOL

[14:59] *** shareable6 joined
[14:59] <timotimo> m: say "hello world how are you" ~~ /\s\w\w\w\s/

[14:59] <camelia> rakudo-moar 01a373649: OUTPUT: «｢ how ｣␤»

[14:59] <timotimo> your question is similar to "why is this matching if there's text before and after that"

[15:00] <Xliff_> m: my $m = "!@notallotta" ~~ /<ws>$<o>=[ <:Letter + [ _ @ # ]> <:Letter + [ _ @ # $ ]>* ]<ws>/; $m.gist.say;

[15:00] <camelia> rakudo-moar 01a373649: OUTPUT: «｢@notallotta｣␤ ws => ｢｣␤ o => ｢@notallotta｣␤ ws => ｢｣␤»

[15:00] <Xliff_> m: my $m = " !@notallotta" ~~ /<ws>$<o>=[ <:Letter + [ _ @ # ]> <:Letter + [ _ @ # $ ]>* ]<ws>/; $m.gist.say;

[15:00] <camelia> rakudo-moar 01a373649: OUTPUT: «｢@notallotta｣␤ ws => ｢｣␤ o => ｢@notallotta｣␤ ws => ｢｣␤»

[15:01] <timotimo> m: my $m = " !@notallotta" ~~ /^<ws>$<o>=[ <:Letter + [ _ @ # ]> <:Letter + [ _ @ # $ ]>* ]<ws>$/; $m.gist.say;

[15:01] <camelia> rakudo-moar 01a373649: OUTPUT: «(Any)␤»

[15:01] <Xliff_> So why is the "!" not being applied to the first group in $o?

[15:01] <timotimo> m: say "!" ~~ /<:Letter + [_@#]>/

[15:01] <camelia> rakudo-moar 01a373649: OUTPUT: «Nil␤»

[15:01] <timotimo> m: say "!" ~~ /<:Letter + [_@#!]>/

[15:01] <camelia> rakudo-moar 01a373649: OUTPUT: «｢!｣␤»

[15:01] <Xliff_> Right, but this is part of a greater grammar, and anchoring it that way won't work.

[15:01] <timotimo> m: my $m = " !@notallotta" ~~ /^<ws>$<o>=[ <:Letter + [ _ ! @ # ]> <:Letter + [ _ @ # $ ]>* ]<ws>$/; $m.gist.say;

[15:01] <camelia> rakudo-moar 01a373649: OUTPUT: «｢ !@notallotta｣␤ ws => ｢ ｣␤ o => ｢!@notallotta｣␤ ws => ｢｣␤»

[15:02] <Xliff_> OK. So the regex itself is skipping that part and the <ws> doesn't matter. :s

[15:02] <timotimo> <ws> is allowed to match nothing

[15:03] <Xliff_> I know. So why doesn't that anchor the "!" instead of the "@"?

[15:03] <timotimo> because the ! doesn't match your character class

[15:03] <Xliff_> Right. But I was hoping the <ws> would force it to start there and not skip a character.

[15:03] <timotimo> it does no such thing

[15:04] <timotimo> m: say "!hello!" ~~ /<ws> "hello" <ws>/

[15:04] <camelia> rakudo-moar 01a373649: OUTPUT: «｢hello｣␤ ws => ｢｣␤ ws => ｢｣␤»

[15:04] <timotimo> m: say "ahelloa" ~~ /<ws> "hello" <ws>/

[15:04] <camelia> rakudo-moar 01a373649: OUTPUT: «Nil␤»

[15:04] <timotimo> the default ws allows no space to be there if there's a symbol on either side

[15:04] <timotimo> i.e. <ws> will match between a ! and an @

[15:04] <Xliff_> *headdesk*

[15:05] <Xliff_> So how would I anchor this properly without the use of ^?

[15:06] <timotimo> it depends entirely on the rest of your grammar, i think

[15:06] <Xliff_> The only other way I can think of to do this would be a 0LA.

[15:06] <timotimo> well, <ws> is also potentially a 0LA

[15:07] <Xliff_> Yeah, but that means unit testing negative cases is harder.

[15:07] <Xliff_> And up until now, I haven't had that problem. :/

[15:07] <Xliff_> OK, well another 0LA

[15:07] <timotimo> if this is only for testing, why not wrap the match in ^ and $

[15:08] <Xliff_> *shrug* -- Why not?

[15:08] <Xliff_> *headdeskagain*

[15:08] <timotimo> this stuff is tricky :)

[15:09] <Xliff_> Works.

[15:09] <Xliff_> *headdesk3times*

[15:09] <Xliff_> timotimo++

[15:09] <timotimo> i was confused by your suggestion for "COALESCE" in that ticket, did you see my comment?

[15:10] <Xliff_> No. Link?

[15:11] <timotimo> https://github.com/perl6/doc/issues/2061

[15:11] <Xliff_> So how would I convert this to a proper testing routine? Not that I'd want <ident_sys> to be a rule/token/regex parameter and the structure to remain intact: "sub test(Str $s) { $m = $s ~~ /^<ident_sys>/; }"

[15:11] <timotimo> worst case, just build the BOS assertion yourself "after" the match

[15:11] <timotimo> i.e. "fail if $/.pos != 0"

[15:12] <timotimo> can you pass in the actual ident_sys token object, or do you just have the name and it's inside a grammar?

[15:13] <Xliff_> I can pass the object.

[15:13] <timotimo> cool, then i'd just $s ~~ $regex_obj; ok  $/ && $/ == 0

[15:13] <timotimo> or something like that

[15:14] <Xliff_> OK, so no cool single place test.

[15:14] <Xliff_> That's what I've been doing.

[15:16] *** robertle left
[15:16] <Xliff_> So you can't do: "my token t { 'ttt' }; sub test (Str $s, \r) { $s ~~ \r }; test("tt", t)" ?

[15:17] *** Schepeers left
[15:18] <timotimo> m: my token t { 'ttt' }; say &t.parse("tttt")

[15:18] <camelia> rakudo-moar 01a373649: OUTPUT: «No such method 'parse' for invocant of type 'Regex'. Did you mean 'pairs'?␤  in block <unit> at <tmp> line 1␤␤»

[15:18] <timotimo> mhm

[15:24] *** Schepeers joined
[15:39] <Xliff_> timotimo: Thanks for your help. I will rest my brain for the rest of the day.

[15:39] *** AlexDaniel left
[15:40] <Xliff_> timotimo: Hope you can do the same. :)

[15:40] <timotimo> i was hoping i could get some more productive work time today

[15:40] *** AlexDaniel joined
[15:41] *** SCHAPiE joined
[15:42] <timotimo> i've been lazy so far :)

[15:43] <buggable> New CPAN upload: Env-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Env-0.0.1.tar.gz

[15:44] <timotimo> what does that do?

[15:46] <lizmat> https://metacpan.org/pod/Env

[15:46] <timotimo> ah, neat

[15:46] <lizmat> it basically exports the keys of %*ENV by their name

[15:47] <timotimo> wouldn't that want a p5 in the name like the other butterfly modules?

[15:47] <lizmat> thanks to Zoffix I was able to pull that off

[15:47] <lizmat> timotimo: no, because the P5... live in the core of Perl 5, not in a module

[15:47] <timotimo> oh, OK

[15:48] <lizmat> if it's a module, I use the same name to minimize the difference

[15:48] <lizmat> for functions that turned out to be impossible

[15:49] <timotimo> oh, how so? too many overlaps with perl6 builtins?

[15:49] <lizmat> no, some weird interaction between module name being the same as the sub name being exported from a compiled module

[15:49] <lizmat> forget what it was exactly

[15:49] <timotimo> oh? that sounds weird

[15:49] <lizmat> it felt a bit like DIHWIDT, so I didn't report it  :-)

[15:50] <lizmat> anyways, it's too late now: not going to change the names of 50+ distributions

[15:50] <timotimo> mhm

[15:50] <lizmat> I guess I should have called them CORE::function

[15:51] <lizmat> hmmm...

[15:51] *** molaf joined
[15:53] *** robertle joined
[15:54] *** BenGoldberg joined
[15:56] *** irco joined
[16:05] *** margeas joined
[16:05] *** zpc joined
[16:06] *** kaare_ joined
[16:06] *** markong left
[16:07] <Ulti> jnthn: any more noise about comma ?

[16:10] <Ulti> I'm getting fairly addicted to using PyCharm for my Python work vs a plain editor

[16:11] *** markong joined
[16:11] *** margeas left
[16:16] *** robertle left
[16:19] <jnthn> Ulti: I've been doing little except Comma-related things, eating, and sleeping for the last while. :-)

[16:22] <jnthn> Ulti: The release engineering side of things has been a bit more of a headache than we expected. We're getting close on that. Meanwhile, the legal/logistical things we had to take care of are pretty much done, and I've been using it for my own Perl 6 programming for a while and feel comfortable we have things working well enough for an initial BETA release.

[16:23] <jmerelo> jnthn++

[16:26] * jnthn wants to say "this week" but is afraid of jinxing it :P

[16:30] *** irco left
[16:31] *** irco joined
[16:34] *** comborico1611 joined
[16:35] *** comborico1611 left
[16:35] *** comborico1611 joined
[16:39] *** itaipu left
[16:57] <Ulti> I can recommend sleeping in the sun rather than in your IDE :P

[16:57] <Ulti> that sounds amazing jnthn #nojinx

[16:58] *** TreyHarris joined
[17:04] *** [particle]1 joined
[17:06] *** [particle] left
[17:10] *** margeas joined
[17:12] *** markong left
[17:13] *** pilne left
[17:18] *** Khisanth left
[17:29] *** zpc left
[17:31] *** MasterDuke left
[17:32] *** Khisanth joined
[17:41] *** MasterDuke joined
[17:44] *** benjikun left
[17:44] *** Schepeers left
[17:45] *** Schepeers joined
[17:45] *** benjikun joined
[17:53] *** margeas is now known as markong

[18:18] <Geth> ¦ doc: 7776882f6f | (JJ Merelo)++ | doc/Language/structures.pod6

[18:18] <Geth> ¦ doc: Advances structures page refs #114

[18:18] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7776882f6f

[18:18] <Geth> ¦ doc: 47d87c2f1b | (JJ Merelo)++ | doc/Language/structures.pod6

[18:18] <Geth> ¦ doc: Clarification about identity and scalars

[18:18] <synopsebot> Link: https://doc.perl6.org/language/structures

[18:18] <Geth> ¦ doc: 

[18:18] <Geth> ¦ doc: Also goes towards #114

[18:18] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/47d87c2f1b

[18:18] <Geth> ¦ doc: f1881ff53f | (JJ Merelo)++ | doc/Language/structures.pod6

[18:18] <Geth> ¦ doc: Adds complex data structres advances #114

[18:18] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f1881ff53f

[18:19] *** [particle] joined
[18:20] *** [particle]1 left
[18:23] *** [particle]1 joined
[18:24] *** [particle] left
[18:30] *** aindilis joined
[18:36] *** BenGoldberg left
[18:47] *** darutoko left
[18:49] *** eythian joined
[18:53] *** domidumont left
[19:01] *** domidumont joined
[19:10] *** domidumont left
[19:14] <Geth> ¦ doc: 409ff2c4cc | (JJ Merelo)++ | doc/Language/structures.pod6

[19:14] <Geth> ¦ doc: Starts with funcs and reflows

[19:14] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/409ff2c4cc

[19:14] <Geth> ¦ doc: af5953d4fe | (JJ Merelo)++ | doc/Language/structures.pod6

[19:14] <Geth> ¦ doc: Adds iteration and things refs #114

[19:14] <synopsebot> Link: https://doc.perl6.org/language/structures

[19:14] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/af5953d4fe

[19:15] *** jmerelo left
[19:20] *** shareable6 left
[19:33] *** pilne joined
[19:44] *** espadrine_ joined
[19:58] *** eliasr left
[20:01] *** kurahaupo left
[20:01] *** kurahaupo joined
[20:17] *** |Sno| left
[20:28] *** andrzejku left
[20:29] *** sena_kun left
[20:39] *** rindolf left
[20:42] *** rindolf joined
[20:44] *** enheh left
[20:45] *** sno joined
[21:04] *** Grauwolf joined
[21:08] *** Kaiepi left
[21:09] *** Kaiepi joined
[21:17] *** comborico joined
[21:21] *** zpc joined
[21:21] *** margeas joined
[21:24] *** markong left
[21:26] *** wamba left
[21:28] *** margeas is now known as markong

[21:35] <rindolf> hi all

[21:37] *** fascinum joined
[21:38] <AlexDaniel> o/

[21:40] <rindolf> AlexDaniel: hi

[22:06] <Xliff_> \o

[22:21] *** DarthGandalf left
[22:22] *** DarthGandalf joined
[22:31] *** athenot left
[22:39] *** kurahaupo_ joined
[22:42] *** kurahaupo left
[22:46] <sjn> https://up-for-grabs.net/#/tags/perl6 <- probably a good place to get some visibility

[22:48] *** rindolf left
[22:53] *** stevie joined
[22:58] *** fascinum left
[23:22] *** HaraldJoerg left
[23:36] *** zpc left
[23:40] <Xliff_> Is DBIish in a fit to install via zef?

[23:40] <Xliff_> I'm getting a lot of this:

[23:40] <Xliff_> Undeclared name:

[23:40] <Xliff_>     DEPRECATED used at line 34

[23:41] <geekosaur> it hasn't caught up with recent changes to "is DEPRECATED", yes

[23:44] <Xliff_> So I have to force it?

[23:44] <Xliff_> Looks like it will blow up anything that uses it.

[23:44] <Xliff_> Is there something online that describes these changes?

[23:47] <MasterDuke> https://github.com/rakudo/rakudo/commits/master lizmat

[23:47] <MasterDuke> 's recent commits with DEPRECATED in the message

[23:47] <Xliff_> I see a liztomato in blog post from 2013.

[23:51] <Xliff_> SO.

[23:51] <Xliff_> DEPRECATED("message") inside a method becomes is DEPRECATED("message") outside?

