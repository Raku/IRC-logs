[00:01] *** Zoffix joined
[00:02] <Zoffix> psch: the reduce meta op is not allowed to have any whitespace in it. IIRC it's formally ambiguous with the Array constructor, so it's possible we can't even throw X::Cannot::InlineDefineReduce (if we could, why not just make it work then?)

[00:04] *** cdg joined
[00:06] *** cdg left
[00:08] <timotimo> oh!

[00:08] <timotimo> that really shouldn't have been attributed to me

[00:08] *** cdg joined
[00:09] <timotimo> .tell lizmat almost all the work from that commit was actually done by nine, i assume he's jusf flattened the commits and it somehow kept me as the author?

[00:09] <yoleaux> timotimo: I'll pass your message to lizmat.

[00:13] *** cdg left
[00:21] *** markong left
[00:32] *** Zoffix left
[00:32] *** AlexDani` joined
[00:34] *** AlexDaniel left
[00:42] *** astj joined
[00:45] *** greppable6 joined
[00:45] *** ChanServ sets mode: +v greppable6

[00:46] *** astj left
[00:52] *** lookatme joined
[01:02] *** espadrine_ left
[01:03] *** Rawriful left
[01:23] *** noganex left
[01:24] *** astj joined
[02:03] *** piojo joined
[02:04] *** comborico left
[02:04] <sjn> m: my @a = <a 1 b 2 c 3>; for (@a,) { .WHAT.say }

[02:04] <evalable6> sjn, rakudo-moar 005714b6c: OUTPUT: «(Array)␤»

[02:05] <sjn> m: my @a = <a 1 b 2 c 3>; for (%@a,) { .WHAT.say }

[02:05] <evalable6> sjn, rakudo-moar 005714b6c: OUTPUT: «(Hash)␤»

[02:05] <sjn> m: my @a = <a 1 b 2 c 3>; for (@%@a,) { .WHAT.say }

[02:05] <evalable6> sjn, rakudo-moar 005714b6c: OUTPUT: «(Seq)␤»

[02:05] *** piojo1 left
[02:05] <sjn> m: my @a = <a 1 b 2 c 3>; for (@%@a) { .WHAT.say }

[02:05] <evalable6> sjn, rakudo-moar 005714b6c: OUTPUT: «(Pair)␤(Pair)␤(Pair)␤»

[02:05] <sjn> m: my @a = <a 1 b 2 c 3>; for ($%@a) { .WHAT.say }

[02:05] <evalable6> sjn, rakudo-moar 005714b6c: OUTPUT: «(Hash)␤»

[02:06] <sjn> fun

[02:07] <sjn> m: my @a = <a 1 b 2 c 3>; for ($%$@%%%$$$$@@@$@$@@@@@@%$@a) { .WHAT.say }

[02:07] <evalable6> sjn, rakudo-moar 005714b6c: OUTPUT: «(Hash)␤»

[02:08] <sjn> that'll be an instant hit... :)

[02:09] *** paul_ joined
[02:10] <paul_> I'm trying to install mod_scgi on my computer to work with the http clients for perl6, has anybody successfully crossed that hurtle on a mac?

[02:11] <paul_> ls

[02:26] <lookatme> Don't know MAC :)

[02:29] <paul_> switching to nginx

[02:35] *** paul_ left
[02:41] <mspo> scgi?

[02:47] *** ilbot3 left
[02:48] *** manchicken joined
[02:48] <manchicken> Hiya!

[02:48] <manchicken> I have some progress on the POSIX stuff.

[02:48] <manchicken> Took me a while, got sick for like four consecutive weeks.

[02:48] <manchicken> (I don't recommend that)

[02:49] <manchicken> I hope to have the POSIX starter revived soon.

[02:52] *** epony left
[02:52] *** epony joined
[02:56] *** Sgeo_ left
[02:57] *** ilbot3 joined
[02:57] *** ChanServ sets mode: +v ilbot3

[02:58] <manchicken> Do we have someone who packages rakudo for homebrew?

[02:59] *** Sgeo joined
[03:06] *** cdg joined
[03:07] *** aborazmeh joined
[03:07] *** aborazmeh left
[03:07] *** aborazmeh joined
[03:11] *** cdg left
[03:19] *** cdg joined
[03:22] *** aborazmeh left
[03:36] *** Voldenet_ is now known as Voldenet

[03:36] *** Voldenet left
[03:36] *** Voldenet joined
[04:01] *** manchicken left
[04:05] *** manchicken joined
[04:07] *** ChoHag joined
[04:11] <manchicken> I think `File::Which` is missing `Test::META` as a dependency in its `META6.json`.

[04:20] <manchicken> Turns out closing the ^%@#ing file I just wrote is suuuuper important before using it in a child process.

[04:24] *** Kyo91 joined
[04:24] *** Cabanossi left
[04:26] *** Cabanossi joined
[04:31] *** eliasr left
[04:49] *** itaipu left
[04:53] *** manchicken left
[04:56] *** cdg left
[04:57] *** cdg joined
[05:02] *** cdg left
[05:29] *** perlpilot_ joined
[05:30] *** perlpilot_ left
[05:32] *** itaipu joined
[05:36] *** khw left
[05:43] *** curan joined
[05:58] *** cdg joined
[05:59] *** khisanth__ left
[06:00] *** Khisanth joined
[06:01] *** troys left
[06:03] *** wamba joined
[06:03] *** cdg left
[06:11] *** tyil left
[06:11] *** tyil joined
[06:15] *** itaipu left
[06:41] *** astj_ joined
[06:41] *** astj left
[06:49] *** ZzZombo joined
[06:59] *** cdg joined
[07:04] *** cdg left
[07:05] *** imcsk8 left
[07:09] *** lowbro joined
[07:09] *** lowbro left
[07:09] *** lowbro joined
[07:14] *** imcsk8 joined
[07:14] <ZzZombo> m: class C {has Str() $.a=123};C.new

[07:14] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/9UPtfsy_O0␤Coercio…»

[07:15] <evalable6> ZzZombo, Full output: https://gist.github.com/d03f2111b902a4cbcd0635f10e19b5ea

[07:15] *** domidumont joined
[07:15] <ZzZombo> Uh, what does it try to tell me about the code?

[07:17] <psch> coercers are not types

[07:19] <geekosaur> in a sense, a coercion in a method parameter is an instruction to the parameter-passing code, not a type. variables don't have such parameter-passing code, so coercions can't work.

[07:20] *** espadrine_ joined
[07:22] *** darutoko joined
[07:27] <ZzZombo> m: role R {has $.val is rw};class C {has Proxy $.a.=new(:STORE(method ($val){self.val=$val}),:FETCH(method (){self.val})) but R};$_=C.new;.a=3;.a.say

[07:27] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «(signal SIGHUP) «timed out after 10 seconds»»

[07:28] <ZzZombo> what did I break now?

[07:29] <ZzZombo> m: role R {has $.val is rw};class C {has $.a = Proxy.new(:STORE(method ($val){self.val=$val}),:FETCH(method (){self.val})) but R}

[07:29] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «»

[07:30] <ZzZombo> m: role R {has $.val is rw};class C {has $.a = Proxy.new(:STORE(method ($val){self.val=$val}),:FETCH(method (){self.val})) but R};$_=C.new

[07:30] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «(signal SIGHUP) «timed out after 10 seconds»»

[07:30] <ZzZombo> m: role R {has $.val is rw};class C {has $.a = Proxy.new(:STORE(method ($val){self.val=$val}),:FETCH(method (){self.val}))};$_=C.new

[07:30] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «(signal SIGHUP) «timed out after 10 seconds»»

[07:32] <ZzZombo> m: role R {has $.val is rw};class C {has $.a = Proxy.new(:STORE(method ($val){self.val=$val}),:FETCH(method (){self.val})) but R};$_=C.new(:a)

[07:32] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «»

[07:33] <ZzZombo> m: role R {has $.val is rw};class C {has $.a};$_=C.new(:a(Proxy.new(:STORE(method ($val){self.val=$val}),:FETCH(method (){self.val})) but R))

[07:33] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «(signal SIGHUP) «timed out after 10 seconds»»

[07:37] *** ufobat joined
[07:37] <ufobat> m: my $acp; dd split($acp, ",")

[07:37] <evalable6> ufobat, rakudo-moar 005714b6c: OUTPUT: «(exit code 1) Cannot resolve caller split(Str: Any); none of these signatures match:␤    (…»

[07:37] <evalable6> ufobat, Full output: https://gist.github.com/201f5c5d1b55fffe925f2d1cb101839b

[07:37] <ufobat> m: my Str $acp; dd split($acp, ",")

[07:37] <evalable6> ufobat, rakudo-moar 005714b6c: OUTPUT: «(exit code 1) Cannot unbox a type object (Str) to a str.␤  in block <unit> at /tmp/n0B_mfFXOZ line 1␤␤»

[07:37] <ufobat> :-(

[07:39] *** pierrot left
[07:39] *** pierrot joined
[07:39] *** cpup left
[07:41] *** noganex joined
[07:44] *** cpup joined
[07:55] *** wamba left
[07:56] <ZzZombo> m: role R {has $.asd='asd'};class C {has $.a but R=1};C.new.a

[07:56] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «(exit code 1) Cannot modify an immutable Str (Nil)␤  in block <unit> at /tmp/wmBuSkCUkh line 1␤␤»

[07:57] <ZzZombo> m: role R {has $.asd};class C {has $.a but R=1};C.new.a

[07:57] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «(exit code 1) Cannot modify an immutable Str (Nil)␤  in block <unit> at /tmp/848HMiomDp line 1␤␤»

[07:57] <ZzZombo> m: role R {has $.asd};class C {has $.a but R};C.new.a

[07:57] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «»

[07:57] <lookatme> m: role R {has $.asd='asd'};class C {has $.a does R=1};C.new.a

[07:57] <evalable6> lookatme, rakudo-moar 005714b6c: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/NmMuznaty2␤Cannot …»

[07:57] <evalable6> lookatme, Full output: https://gist.github.com/0989c254edf32de7a479736e9b7879fc

[07:57] <lookatme> m: role R {has $.asd='asd'};class C {has $.a =1 but R};C.new.a

[07:57] <evalable6> lookatme, rakudo-moar 005714b6c: OUTPUT: «»

[07:57] <ZzZombo> m: role R {has $.asd='asd'};class C {has $.a but R};C.new.a

[07:58] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «»

[08:00] <lookatme> m: role R {has $.asd='asd'};class C {has $.a is rw = 1 };my $c = C.new; $c.a does R; say $c.a.asd;

[08:00] <evalable6> lookatme, rakudo-moar 005714b6c: OUTPUT: «asd␤»

[08:00] <lookatme> m: role R {has $.asd='asd'};class C {has $.a =1 but R};say C.new.a.asd

[08:00] <evalable6> lookatme, rakudo-moar 005714b6c: OUTPUT: «asd␤»

[08:00] *** cdg joined
[08:01] <ZzZombo> m: role R {has $.asd='asd'};class C {has $.a is rw=1 but R};C.new.a.asd=123;C.new.a.asd.say

[08:01] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «(exit code 1) Cannot modify an immutable Str (asd)␤  in block <unit> at /tmp/BuH51kDWFJ line 1␤␤»

[08:02] <ZzZombo> m: role R {has $.asd is rw='asd'};class C {has $.a is rw=1 but R};C.new.a.asd=123;C.new.a.asd.say

[08:02] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «123␤»

[08:02] <ZzZombo> shit, I need it to be per per object.

[08:02] <lookatme> `but` is only using in declaration sentence of variable, I think

[08:05] *** cdg left
[08:10] *** Cabanossi left
[08:11] *** Cabanossi joined
[08:11] *** espadrine_ left
[08:13] *** domidumont left
[08:14] *** domidumont joined
[08:20] <timotimo> is that a bug in our optimization i wonder

[08:20] <timotimo> at some point we got an opt in if the RHS of the default value "assignment" is a constant

[08:21] <timotimo> but it should still have cloned it

[08:24] *** astj_ left
[08:24] *** astj joined
[08:25] *** astj left
[08:25] *** astj joined
[08:29] *** konsolebox left
[08:32] <ZzZombo> m: class C {has $a='wut???'};dd C.new

[08:32] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «C.new␤»

[08:32] <ZzZombo> Why is that allowed?

[08:33] <timotimo> it's shorthand for a private attribute i believe?

[08:33] <ZzZombo> m: class C {has $a='wut???'};say C.new.^attrs

[08:33] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «(exit code 1) No such method 'attrs' for invocant of type 'Perl6::Metamodel::ClassHOW'␤  in block <unit> at /tmp/0c1d0lE6lQ line 1␤␤»

[08:33] <ZzZombo> m: class C {has $a='wut???'};say C.new.^attributes

[08:33] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «(Mu $!a)␤»

[08:34] <timotimo> m: class C {has $a='wut???'; method wut { say $a } }; C.new.wut

[08:34] <evalable6> timotimo, rakudo-moar 005714b6c: OUTPUT: «wut???␤»

[08:34] <timotimo> we even install a lexical alias for it

[08:34] *** konsolebox joined
[08:37] <ZzZombo> So it's not private?

[08:37] <ZzZombo> ah

[08:37] <timotimo> no, it is

[08:37] <ZzZombo> you changed the class

[08:38] <lookatme> :|

[08:40] *** dakkar joined
[08:44] *** abraxxa joined
[08:46] *** wamba joined
[08:51] <ZzZombo> m: grammar G {has $a}

[08:51] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «»

[08:52] <ZzZombo> m: grammar G {has $a=1};G.new

[08:52] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «»

[08:52] <ZzZombo> m: grammar G {has $a=1};G.new.say

[08:52] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «｢｣␤»

[08:52] <ZzZombo> m: grammar G {has $a=1};G.new.a.say

[08:52] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «(exit code 1) No such method 'a' for invocant of type 'G'. Did you mean 'at'?␤  in block <unit> at /tmp/VJevxCVUB2 line 1␤␤»

[08:52] <ZzZombo> m: grammar G {has $.a=1};G.new.a.say

[08:52] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «1␤»

[08:52] <ZzZombo> huh

[08:53] <ZzZombo> where can I find the latest docs regarding slang creation?

[08:54] <lookatme> no documents currently :)

[08:57] <timotimo> there was a draft document somewhere. it had the same style as docs.perl6.org, but it was hosted on someone's private server

[08:57] <timotimo> https://mouq.github.io/slangs.html

[08:57] <lizmat> there's some code in Slang:: modules that can be cargo-culted

[08:57] <lizmat> Slang::Roman comes to mind

[08:58] <ZzZombo> I see there is `define_slang`, but no info on it, what is that?

[08:58] <lizmat> meanwhile I'm still hoping for help with https://github.com/lizmat/P5wantarray/issues/1

[08:59] *** scimon joined
[08:59] <lizmat> $*LANG.define_slang(

[08:59] <lizmat>       'MAIN',

[08:59] <lizmat>       $*LANG.slang_grammar('MAIN').^mixin(Scalar::Grammar),

[08:59] <lizmat>       $*LANG.slang_actions('MAIN').^mixin(Scalar::Actions),

[08:59] <lizmat>     );

[08:59] <lizmat> is basically the trick

[08:59] <lizmat> (supposedly, anyway)

[09:00] <scimon> I really need to control that voice in the back of my head that says. "How hard can it be?" Currently it's pointing at the Fork button on the SWIG Github...

[09:00] <scimon> Because yeah, I've written more than 10 lines of c in the last 5 years. 

[09:00] <scimon> I might give it a quick look though.

[09:01] *** cdg joined
[09:03] <scimon> (Yeah. This may be somewhat beyond me ATM)

[09:05] <El_Che> lizmat: isn't wantarray on Perl5's chopping block?

[09:06] <lizmat> well, potentially, yes

[09:06] <El_Che> ah, not yet, then

[09:06] <lizmat> it was more an exercise for me creating a slang

[09:06] *** cdg left
[09:07] <El_Che> I see an upcoming CCC talks by a clown trashing perl6 becasue of p5wantarray :)

[09:07] <ZzZombo> m: multi trait_mod:<has>(Any:D $s,:$thing){say "\"$s\" has $thing."};my $a has thing<foo>;

[09:07] <evalable6> ZzZombo, rakudo-moar 005714b6c: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/L9w0wzzipj␤Two ter…»

[09:07] <lizmat> hehe

[09:07] <evalable6> ZzZombo, Full output: https://gist.github.com/12c3ecb5fb585fbaab1346becb8ce0d3

[09:07] *** Zoffix joined
[09:07] <ZzZombo> Why is this not allowed?

[09:07] <lizmat> anyways, I need the same slanginess for handling P5exists() and P5delete()  :-(

[09:07] <Zoffix> ZzZombo: there are no docs on slang creation because there's no supported interface yet. It's an entirely experimental feature that can change at any time.

[09:09] <Zoffix> ZzZombo: there's no 'has' trait.

[09:09] <lookatme> yeah, like the macro, slang is experimental feature. I am expect the macro feature :)

[09:09] <ZzZombo> How so? I just declared it!

[09:12] * lizmat clickbaits https://p6weekly.wordpress.com/2018/01/29/2018-05-mille-plus-modules/

[09:13] <lookatme> m: multi trait_mod:<is>(Any:D $s,:$thing){say "\"$s\" has $thing."};my $a is thing<foo>;

[09:13] <evalable6> lookatme, rakudo-moar 005714b6c: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/3pRvfDT05d␤Can't u…»

[09:13] <evalable6> lookatme, Full output: https://gist.github.com/4fcd4324585205f523325cd6b9aabae7

[09:13] <lookatme> m: multi trait_mod:<is>(Any:D $s,:$thing){say "$s has $thing."};my $a is thing<foo>;

[09:13] <evalable6> lookatme, rakudo-moar 005714b6c: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/qPnSp0V8NH␤Can't u…»

[09:13] *** pmurias joined
[09:13] <evalable6> lookatme, Full output: https://gist.github.com/84d3e5fe0758d8aa7360c4cb232300ce

[09:13] <Zoffix> ZzZombo: you declared a subroutine. Unlike operators, you can't install arbitrarily-named traits and are restricted to `is`, `does`, `hides`, `will`, `of`, `returns`, and `handles` as primary trait keyword, but you can modify the name that follows it by using named attributes

[09:13] <lookatme> m: multi trait_mod:<is>(Variable $s,:$thing){say "$s has $thing."};my $a is thing<foo>;

[09:13] <evalable6> lookatme, rakudo-moar 005714b6c: OUTPUT: «Variable<94018092016616> has foo.␤»

[09:13] *** lookatme left
[09:16] <Zoffix> m: multi infix:<has> (Any $s, Pair $thing) {say "\"$s.perl()\" has $thing."}; my $a has :thing<foo>;

[09:16] <evalable6> Zoffix, rakudo-moar 005714b6c: OUTPUT: «"Any" has thing␉foo.␤»

[09:17] <Zoffix> m: multi prefix:<thing> (\s) {s}; multi infix:<has> (Any $s, $thing) {say "\"$s.perl()\" has $thing."}; my $a has thing<foo>;

[09:17] <evalable6> Zoffix, rakudo-moar 005714b6c: OUTPUT: «"Any" has foo.␤»

[09:17] <Zoffix> :)

[09:23] *** wamba left
[09:27] *** wamba joined
[09:30] <ZzZombo> Why the choice of trait names limited?

[09:32] <Zoffix> ZzZombo: Presumably because they get special treatment. There's more limitation: some of them can only be used with typenames.

[09:32] <lizmat> because you would need a slang for it

[09:32] <lizmat> m: multi trait_mod:<foo>(Variable $s,:$thing){say "$s has $thing."};my $a foo thing<foo>

[09:32] <evalable6> lizmat, rakudo-moar 005714b6c: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/HijVx_oDQM␤Two ter…»

[09:32] <evalable6> lizmat, Full output: https://gist.github.com/25617c97851d4547bba8113c6b5a4017

[09:32] *** Geth left
[09:33] *** Geth joined
[09:33] *** ChanServ sets mode: +v Geth

[09:35] <buggable> New CPAN upload: P5sleep-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5sleep-0.0.1.tar.gz

[09:40] <lizmat> sleep in P5 returns number of seconds actually slept

[09:41] <lizmat> sleep in P6 returns Nil

[09:42] <Zoffix> lizmat: looking at your code, you need to .Int the seconds too

[09:42] <El_Che> where do the p5 modules appear? Not on metacpan it seems

[09:42] <Zoffix> $ perl -wlE 'say sleep 0.6'

[09:42] <Zoffix> 0

[09:43] <lizmat> Zoffix: am assuming Time::HiRes is installed, I guess

[09:43] <Zoffix> El_Che: metacpan is for Perl 5 modules. These are Perl 6 modules.

[09:43] <lizmat> hmmm...not even with Time::Hires

[09:44] <El_Che> they don't appear on https://modules.perl6.org/, hence my question

[09:44] <Zoffix> $ perl -MTime::HiRes=sleep -wlE 'say sleep .6'

[09:44] <Zoffix> 0.600061

[09:44] <Zoffix> Need to also import the routine

[09:44] <lizmat> ah, yes

[09:44] <Zoffix> eco: from:cpan author:ELIZABETH

[09:45] <buggable> Zoffix, Found 34 results: Sub::Name, List::Util, Scalar::Util, Sub::Util, Tie::StdArray. See https://modules.perl6.org/s/from%3Acpan%20author%3AELIZABETH

[09:45] <buggable> New CPAN upload: P5built-ins-0.0.5.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5built-ins-0.0.5.tar.gz

[09:45] <Zoffix> El_Che: ^ seem to show up. Note that it'd take some time for P5sleep to show up, since it's a new module

[09:45] <El_Che> thx

[09:46] *** Zoffix left
[09:46] *** xtreak joined
[09:55] <buggable> New CPAN upload: P5sleep-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5sleep-0.0.2.tar.gz

[09:59] * stmuk does the "start virtualbox windows for the first time in months and install 100GB of updates" dance

[09:59] <moritz> with 5 reboots!

[09:59] <lizmat> afk for a few hours&

[09:59] <El_Che> stmuk: please be patient

[10:02] *** cdg joined
[10:04] <TEttinger> stmuk: there's an offline installer, I heartily recommend it

[10:04] <TEttinger> http://download.wsusoffline.net/

[10:04] <El_Che> TEttinger: is it called ubuntu

[10:05] <TEttinger> I use it every time I have a windows machine that's years behind on updates

[10:05] <stmuk> the highlight is the unchecking of the "always trust Oracle" box for VB itself

[10:05] <TEttinger> it handles the reboots when necessary and keeps upating

[10:05] <El_Che> I had a windows 7 laying around missing about 3 months op patches

[10:05] <El_Che> it took literally more than 24h non stop

[10:06] <TEttinger> yep

[10:06] <stmuk> TEttinger: I've got "defer updates" checked which actually stops new features and allows security updates

[10:06] <TEttinger> windows 10?

[10:06] <El_Che> I don't know if the update mechanism is broken upstreak, or if they broke it to push people to windows 10

[10:06] *** cdg left
[10:06] <El_Che> windowws 8 takes also that long

[10:07] <stmuk> yeah and I've also experimented with Enterprise LTSB which I may move to

[10:07] <TEttinger> not as much fun as enterprise LSD

[10:07] <El_Che> defer as ha-aha-we'll-put-it-through-you-throat-anyway

[10:07] <stmuk> Windows 10 Enterprise LTSB doesn't even have Metro or Flappy Birds

[10:11] <ZzZombo> Huh, can I somehow override a metamodel for my class or anything for this matter? That could help me avoid to delve deep into slang creation...

[10:14] <AlexDani`> “deep in the nqp bowels” :D

[10:14] *** AlexDani` is now known as AlexDaniel

[10:14] <AlexDaniel> squashable6: next

[10:14] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 2 days and ≈23 hours (2018-02-03 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[10:14] <AlexDaniel> ouh wow!

[10:14] <AlexDaniel> totally forgot about that

[10:14] <AlexDaniel> sooooo let's see

[10:16] *** dmaestro left
[10:16] <AlexDaniel> buggable: tag TESTNEEDED

[10:16] <buggable> AlexDaniel, There are 31 tickets tagged with TESTNEEDED; See http://fail.rakudo.party/t/TESTNEEDED for details

[10:18] <AlexDaniel> heh, roast about to reach commit 15000

[10:22] <AlexDaniel> squashable6: next

[10:22] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 2 days and ≈23 hours (2018-02-03 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[10:37] *** zakharyas joined
[10:44] *** aindilis left
[10:51] *** ChoHag left
[10:56] *** SourceBaby joined
[10:56] *** ChanServ sets mode: +v SourceBaby

[10:57] *** pmurias left
[10:58] *** ChoHag joined
[11:03] *** pmurias joined
[11:09] *** wamba left
[11:14] *** xtreak left
[11:15] *** wamba joined
[11:16] *** unicodable6 left
[11:16] *** reportable6 left
[11:16] *** bisectable6 left
[11:16] *** unicodable6 joined
[11:16] *** ChanServ sets mode: +v unicodable6

[11:16] *** reportable6 joined
[11:16] *** ChanServ sets mode: +v reportable6

[11:16] *** bisectable6 joined
[11:16] *** ChanServ sets mode: +v bisectable6

[11:17] *** xtreak joined
[11:21] *** dogbert17 joined
[11:33] *** itaipu joined
[11:43] *** cdg joined
[11:44] *** markong joined
[11:49] *** cdg left
[11:56] *** jeromelanteri left
[11:57] <ufobat> could anyone be so kind and update the Docker image to the current rakduo star version? https://hub.docker.com/r/_/rakudo-star/

[11:58] * moritz has no idea who can do that

[11:59] <stmuk> its probably just bumping the version in

[11:59] <stmuk> https://github.com/perl6/docker/blob/1be22e4dea6aefa7d0712a1cb13b2b4d9541f600/Dockerfile

[12:00] <stmuk> MAINTAINER Rob Hoelz

[12:01] <AlexDaniel> hoelzro: ↑ ?

[12:02] <moritz> and then pushing the newly built image to the registry

[12:20] *** xtreak left
[12:20] *** piojo left
[12:20] *** piojo1 joined
[12:23] *** xtreak joined
[12:39] *** mahafyi joined
[12:39] *** emeric joined
[12:56] *** abraxxa left
[12:56] <ZzZombo> m: my method(){}

[12:56] <evalable6> ZzZombo, rakudo-moar 2c36ab2ef: OUTPUT: «(exit code 1) 04===SORRY!04===␤Type 'method' is not declared. Did you mean '…»

[12:56] <evalable6> ZzZombo, Full output: https://gist.github.com/cc8bbe1649c7c2bf8e2af3701226ffe3

[12:56] <ZzZombo> m: my sub(){}

[12:56] <evalable6> ZzZombo, rakudo-moar 2c36ab2ef: OUTPUT: «(exit code 1) 04===SORRY!04===␤Type 'sub' is not declared. Did you mean 'Sub…»

[12:56] <evalable6> ZzZombo, Full output: https://gist.github.com/85761eae8f450f7fd30d352c5acd9d11

[12:56] <ZzZombo> m: my sub x(){}

[12:56] <evalable6> ZzZombo, rakudo-moar 2c36ab2ef: OUTPUT: «»

[13:00] *** abraxxa joined
[13:03] *** sacomo joined
[13:06] *** xtreak left
[13:08] *** xtreak joined
[13:11] *** melezhik left
[13:24] * stmuk is still updating Win 10 64 bit and has no desire to do this with 32 bit as well

[13:24] <stmuk> hmmm maybe appveyor offers 32 bit

[13:25] *** raschipi joined
[13:26] *** xtreak left
[13:30] <DrForr> m: my $p=run('perl6','-e','say 2+',:err);say $p.err.get;

[13:30] <evalable6> DrForr, rakudo-moar 2c36ab2ef: OUTPUT: «Nil␤»

[13:33] <DrForr> I was ratehr hoping that would capture the syntax error text...

[13:33] <DrForr> *rather

[13:34] <raschipi> stmuk: You should try a multi-tasking operating system.

[13:34] <El_Che> m: my $p=run('perl6','-e','say 2+',:out);say $p.out.get;

[13:34] <evalable6> El_Che, rakudo-moar 2c36ab2ef: OUTPUT: «Nil␤»

[13:34] <El_Che> good try :)

[13:34] <stmuk> raschipi: its hosted on one

[13:35] <jnthn> DrForr: Dunno if it's something with the bot, but it works when I try it locally

[13:37] <DrForr> Hrm. I'm doing this inside Cro, so I'm not sure if that's interfering. I'll try it outside Cro...

[13:38] <El_Che> jnthn: does not work on my local install

[13:38] <jnthn> Can't think how that'd make a difference

[13:38] <El_Che> 2017.11

[13:39] <jnthn> Just ran it on whatever I have around, which happens to be 2017.12-270-g90246e6

[13:39] <El_Che> or maybe it does

[13:39] <El_Che> weird output

[13:40] <jnthn> The output will have color escapes I guess

[13:40] <jnthn> For me those were passed straight on through

[13:40] <DrForr> It works outside the app, so it's something in the stack I'm working with.

[13:40] <El_Che> well, the error is printed by the perl6 cmd, not the $p.out.get

[13:41] <El_Che> ah

[13:41] <El_Che> err

[13:41] <El_Che> wrong copy paste

[13:41] <El_Che> sorry

[13:42] <jnthn> DrForr: Maybe try using Proc::Async directly (Proc is just a wapper around that), to rule out any oddities with that

[13:43] <raschipi> Perl6 emits color codes without checking if those are appropriate? Should at least ask if isatty(3).

[13:43] <jnthn> raschipi: Yeah, probably should. Feel free to submit at patch, if time/interest. :)

[13:43] <DrForr> jnthn: I tried that as well, the example was too long to paste to the bot, but I'll try it again.

[13:45] <jnthn> s/at/a

[13:47] <DrForr> I've also tried it asynchronously, though I'll admit that it's probably me in that case.

[13:48] <DrForr> At least I know it's not something I'm doing that's *egregiously* stupid.

[13:50] *** astj left
[13:50] *** astj joined
[13:51] *** cdg joined
[13:55] *** cdg left
[13:55] *** cdg joined
[14:02] <AlexDaniel> m: my $p=run('/home/alex/.rakudobrew/bin/perl6','-e','say 2+',:out);say $p.out.get;

[14:02] <evalable6> AlexDaniel, rakudo-moar 2c36ab2ef: OUTPUT: «04===SORRY!04=== Error while compiling -e␤Missing required term after infix␤at -e:1␤------> 03say 2+08⏏04<EOL>␤    expecting any of:␤        prefix␤        term␤Nil␤»

[14:02] <AlexDaniel> ‘perl6’ is not in PATH

[14:02] <AlexDaniel> because, well… which perl6 do you want? :)

[14:02] <AlexDaniel> the one that the bots runs with, or the one that you're running the code with?

[14:02] <AlexDaniel> so HEAD or whatever the bot has?

[14:05] *** cgfbee left
[14:06] *** aborazmeh joined
[14:06] *** aborazmeh left
[14:06] *** aborazmeh joined
[14:07] * DrForr digs around in evalbot source.

[14:09] *** cgfbee joined
[14:09] *** aborazmeh left
[14:10] <AlexDaniel> evalable6: source

[14:10] <evalable6> AlexDaniel, https://github.com/perl6/whateverable

[14:10] <AlexDaniel> well, let's add the current one to the path

[14:11] <lizmat> DrForr: re Spreadsheet::(Read|Write)Excel: http://modules.perl6.org/dist/P5pack:cpan:ELIZABETH

[14:13] *** araraloren joined
[14:13] <DrForr> lizmat: Nod. I didn't say I'd be the one to write it though :)

[14:14] <lizmat> ah, ok  :-)

[14:15] <lizmat> just wanted to let you know that at least you don't need to look at pack/unpack (hopefully)

[14:15] *** natrys joined
[14:24] *** evalable6 left
[14:24] <AlexDaniel> actually, thanks everyone

[14:24] <AlexDaniel> this is probably a nice addition

[14:25] <buggable> New CPAN upload: Terminal-Table-0.0.7.tar.gz by ALOREN https://cpan.metacpan.org/authors/id/A/AL/ALOREN/Perl6/Terminal-Table-0.0.7.tar.gz

[14:25] <AlexDaniel> because now you can bisect by running perl6 with different flags and stuff

[14:25] <AlexDaniel> let's see if it works…

[14:26] *** evalable6 joined
[14:26] <araraloren> :) Happy to see it was working

[14:26] <AlexDaniel> evalable6test: run ‘perl6’, ‘-e’, ‘say $*PERL.compiler’

[14:26] <AlexDaniel> evalable6: run ‘perl6’, ‘-e’, ‘say $*PERL.compiler’

[14:26] <evalable6> AlexDaniel, rakudo-moar 2c36ab2ef: OUTPUT: «rakudo (2018.01.60.g.2.c.36.ab.2.ef)␤»

[14:26] <AlexDaniel> yay?

[14:26] *** committable6 left
[14:26] *** bisectable6 left
[14:26] <tbrowder> lizmat: if you have in mind p5 modules to be p6’d, maybe you could get people to commit to converting them in a list something like mos5 wantd for p5 to p6 (in some kind of order of importance as you see it).

[14:26] *** committable6 joined
[14:26] *** ChanServ sets mode: +v committable6

[14:26] *** bisectable6 joined
[14:26] <AlexDaniel> c: 2017.12 run ‘perl6’, ‘-e’, ‘say $*PERL.compiler’

[14:26] <committable6> AlexDaniel, ¦2017.12: «rakudo (2017.11.137.gc.84.ed.2942)␤»

[14:27] <AlexDaniel> hm this one is a bit weird

[14:27] <araraloren> but.. seems like we not support ASCIIDOC ?

[14:27] <AlexDaniel> c: 2017.12^ run ‘perl6’, ‘-e’, ‘say $*PERL.compiler’

[14:27] <committable6> AlexDaniel, ¦2017.12^: «rakudo (2017.11.136.g.0700.cdbf.0)␤»

[14:27] <tbrowder> uh, “most wanted for p5 to p6...”

[14:27] <araraloren> I am not using markdown 

[14:28] <AlexDaniel> IIRC there's a bug in whateverable that some tagged releases are built before the tag is pulled, so they end up with weird versions. But everything is technically correct anyway

[14:28] <AlexDaniel> m: my $p=run('perl6','-e','say 2+',:err);say $p.err.get;

[14:28] <evalable6> AlexDaniel, rakudo-moar 2c36ab2ef: OUTPUT: «04===SORRY!04=== Error while compiling -e␤»

[14:29] <AlexDaniel> m: my $p=run('perl6','-e','say 2+',:err);say $p.err.slurp;

[14:29] <evalable6> AlexDaniel, rakudo-moar 2c36ab2ef: OUTPUT: «04===SORRY!04=== Error while compiling -e␤Missing required term after infix␤at -e:1␤------> 03say 2+08⏏04<EOL>␤    expecting any of:␤        prefix␤        term␤␤»

[14:29] <AlexDaniel> DrForr: ↑

[14:29] <AlexDaniel> does anybody want to try bisecting REPL now? :)

[14:29] *** curan left
[14:29] <AlexDaniel> you'd just need to feed the stdin into it correctly, I think

[14:29] <araraloren> :( So our module page not support ASCIIDOC ? 

[14:30] <lizmat> tbrowder: yes, I will but after I get back from my PR&R

[14:30] <lizmat> unless someone beats me to it, of course  :-)

[14:30] <lizmat> tbrowder: it most definitely should not depend on me  :-)

[14:32] *** ZzZombo left
[14:32] <DrForr> AlexDaniel: Thanks.

[14:33] <DrForr> Oh, probably linefeed issues, the output has linebreak...

[14:33] <DrForr> *linebreaks

[14:33] <Geth> ¦ whateverable: 2e06be9a04 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable.pm6

[14:33] <Geth> ¦ whateverable: Tweak PATH to make perl6 available

[14:33] <Geth> ¦ whateverable: 

[14:33] <Geth> ¦ whateverable: Phixes #279

[14:33] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/2e06be9a04

[14:33] <AlexDaniel> DrForr: ↑ and that's how it looks in code :)

[14:34] <tbrowder> well, putting a list on the site should be reasonably easy, the hard part is getting thoughts on the importance of modules to be converted. several folks have said p6 is not a good language for beginners because of lack of advanced features--those folks should be making entries on the "most wanted p5 to p6" list.

[14:34] <AlexDaniel> oh, that's exactly what I needed by the way…

[14:35] *** astj left
[14:35] <daxim> pmurias, http://redd.it/7ty4xn

[14:36] *** astj joined
[14:37] <Geth> ¦ doc: 8fdecffaa7 | (Zoffix Znet)++ | doc/Language/quoting.pod6

[14:37] <Geth> ¦ doc: Clarify :b quoter tweak

[14:37] <Geth> ¦ doc: 

[14:37] <Geth> ¦ doc: It doesn't imply `q`, since `q` has only rudimentary backslashing

[14:37] <Geth> ¦ doc: and is silent on unrecognized sequences, while in `:b` they throw.

[14:37] <synopsebot> Link: https://doc.perl6.org/language/quoting

[14:37] <Geth> ¦ doc: 

[14:37] <Geth> ¦ doc: Rakudo impl: https://github.com/rakudo/rakudo/commit/deffe54b8d

[14:37] <Geth> ¦ doc: Spec:        https://github.com/perl6/roast/commit/284a97d31d

[14:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8fdecffaa7

[14:37] <AlexDaniel> 6c: run :ENV(%(MVM_COVERAGE_LOG => ‘/anoethusntoahu’), <perl6 -e>, ‘say ‘hello’’

[14:38] <committable6> AlexDaniel, https://gist.github.com/f3c10a2818550e8e2be2340681d60797

[14:38] <AlexDaniel> 6c: run :ENV(%(MVM_COVERAGE_LOG => ‘/anoethusntoahu’)), <perl6 -e>, ‘say ‘hello’’

[14:38] *** jast left
[14:38] <committable6> AlexDaniel, ¦6c (27 commits): «Unexpected named argument 'ENV' passed␤  in block <unit> at /tmp/I3myGKQ3o0 line 1␤␤ «exit code = 1»»

[14:38] <AlexDaniel> 6c: run :env(%(MVM_COVERAGE_LOG => ‘/anoethusntoahu’)), <perl6 -e>, ‘say ‘hello’’

[14:38] <committable6> AlexDaniel, https://gist.github.com/b3aca17b4e1bae843bb28765a7788d89

[14:40] <DrForr> Grump. I think it was actually an amalgam of three issues...

[14:41] <El_Che> s/^G/T/

[14:42] *** araraloren left
[14:42] <DrForr> Yep, the slurp + two other things I noticed fixed it.

[14:42] <DrForr> AlexDaniel++

[14:51] <lizmat> afk&

[14:52] <DrForr> It's not quite ready for prime time - there are two more features I need to add, but this should give you an idea of what I've been doing. Gimme a few ere...

[14:52] <DrForr> *here

[14:54] *** pmurias left
[14:54] *** pmurias joined
[14:55] <DrForr> https://github.com/drforr/perl6-App-Learn-Perl6

[14:58] *** astj left
[15:02] *** troys joined
[15:03] *** wamba left
[15:04] *** ChoHag left
[15:05] *** zakharyas left
[15:05] *** zakharyas joined
[15:05] *** astj joined
[15:06] *** ChoHag joined
[15:07] <scimon> So I just did a little test, writing a simple REST API (that simulates rolling a bunch of dice, not external dependencies) in Mojo::Lite, Cro and express. All in basically the simplest run types so no WSGI NGINX or other stuff.

[15:07] <AlexDaniel> squashable6: next

[15:07] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 2 days and ≈18 hours (2018-02-03 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:08] <scimon> Mojo and express clocked in at 2 seconds for 100 requqests to roll 1000 1000 sided dice (because generating lots of random numbers is fun). 

[15:08] <scimon> Cro took 3 seconds for the same. 

[15:08] <scimon> (This is sequential requests, using a for loop and curl).

[15:08] <scimon> So... that's not too shabby.

[15:09] *** astj left
[15:09] *** zakharyas left
[15:11] *** ZzZombo joined
[15:11] <ZzZombo> m: role R {};sub x() does R {}

[15:11] <evalable6> ZzZombo, rakudo-moar deffe54b8: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/7YTrCaj5OV␤Cannot …»

[15:11] <evalable6> ZzZombo, Full output: https://gist.github.com/860367b59513d9035dff445c14ffca4c

[15:11] <ZzZombo> m: role R {};sub x does R () {}

[15:11] <evalable6> ZzZombo, rakudo-moar deffe54b8: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/d_ZQeaDzqg␤Missing…»

[15:11] <evalable6> ZzZombo, Full output: https://gist.github.com/d6e792870b2250a407f4b7b40240a1c1

[15:12] <ZzZombo> Why?

[15:12] *** ChoHag left
[15:13] <jnthn> What are you expecting to happen?

[15:13] <ZzZombo> apply the role to the sub?

[15:14] <DrForr> What could the role give the subroutine that would be relevant?

[15:14] <jnthn> But a sub isn't a type, and the does trait modifier is defined as doing compile-time role composition into a type

[15:14] <ZzZombo> m: role R {};sub x(){};&x does R;say &x ~~ R

[15:14] <evalable6> ZzZombo, rakudo-moar deffe54b8: OUTPUT: «True␤»

[15:14] <DrForr> Attributes work with clases, not subroutines. Same with methods.

[15:14] *** ChoHag joined
[15:15] <ZzZombo> how is sub not a type?

[15:15] *** astj joined
[15:15] <ZzZombo> m: role R {};sub x(){};&x does R;say &x ~~ R,&x.WHAT

[15:15] <evalable6> ZzZombo, rakudo-moar deffe54b8: OUTPUT: «True(Sub+{R})␤»

[15:15] <jnthn> The way to do this is to write a routine trait that receives the routine as a parameter and then does the application of the role

[15:16] <ZzZombo> m: role R {};sub x(){};&x.WHAT.say

[15:16] <evalable6> ZzZombo, rakudo-moar deffe54b8: OUTPUT: «(Sub)␤»

[15:16] <jnthn> A sub is an *instance* of the Sub class

[15:16] <jnthn> Contrast it with class C does R { } where you're declaring a type C

[15:18] <ZzZombo> DrForr, in my case I just apply a role to tag a method as some kind, like Delphi attributes, but without any other fields (http://docwiki.embarcadero.com/RADStudio/Tokyo/en/Attributes_(RTTI)).

[15:19] *** szabgab joined
[15:19] <szabgab> hi there!

[15:19] <yoleaux> 18 Aug 2017 12:42Z <Zoffix> szabgab: RE smoking Rakudo itself. There's no real setup yet. There's Toaster ( https://rakudo.party/post/Perl-6-Release-Quality-Assurance-Full-Ecosystem-Toaster ) that's currently being run on just Debian. Eventually that'll expand to more OSes. Of course, anyone can do `make stresstest` in a Rakudo checkout to stresstest it on their own systems.

[15:19] <szabgab> It seem yoleaux just knows what I wanted to ask :)

[15:19] <szabgab> I just looked at http://smoke.perl6.org/report and it returns 500

[15:20] <SmokeMachine> m: multi trait_mod:<does>(&func, Mu:U $bla) {&func does $bla}; role R {}; sub ble does R {}; say &ble.WHAT

[15:20] <evalable6> SmokeMachine, rakudo-moar deffe54b8: OUTPUT: «(Sub+{R})␤»

[15:20] <szabgab> is that site supposed to work?

[15:20] *** lowbro left
[15:20] <DrForr> ZzZombo: Yeah, I was jus thinking about your potential use case and I was probably being unnecesarily harsh.

[15:21] *** astj left
[15:21] <SmokeMachine> ZzZombo: ^^

[15:21] <jnthn> We could in theory make it work, it just feels slightly off to me

[15:22] <ZzZombo> SmokeMachine, I'll take a look. Thank you.

[15:22] <jnthn> It's not so much effort to write a multi trait_mod:<is>(Routine $r, ...) { ... }

[15:23] *** astj joined
[15:23] *** bisectable6 left
[15:24] *** bisectable6 joined
[15:24] *** ChanServ sets mode: +v bisectable6

[15:24] <MasterDuke> szabgab: i don't think that site has been updated at all recently

[15:25] *** astj left
[15:26] <szabgab> It is linked under "smoke testing" on https://perl6.org/community/  so if that site is not in use then maybe it should not be linked either.

[15:26] *** astj joined
[15:30] *** astj left
[15:33] *** astj joined
[15:38] *** ZzZombo left
[15:38] *** ZzZombo joined
[15:38] *** khw joined
[15:42] *** szabgab left
[15:43] <stmuk> http://testers.perl6.org/ also seems dead

[15:46] *** Kaiepi left
[15:46] *** Kaiepi joined
[15:47] *** bisectable6 left
[15:48] *** bisectable6 joined
[15:48] *** ChanServ sets mode: +v bisectable6

[15:53] *** astj left
[15:57] *** dakkar left
[15:57] *** dakkar joined
[16:02] *** astj joined
[16:07] *** zakharyas joined
[16:09] *** zakharyas left
[16:11] *** zakharyas joined
[16:17] *** domidumont left
[16:17] *** Aaronepower left
[16:20] *** wamba joined
[16:28] *** raschipi left
[16:35] *** Actualey` left
[16:36] *** Actualeyes joined
[16:45] <Geth> ¦ whateverable: f3b3e352d7 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable.pm6

[16:45] <Geth> ¦ whateverable: Fix Bisectable and others not getting the right PATH

[16:45] <Geth> ¦ whateverable: 

[16:45] <Geth> ¦ whateverable: Fixes an oops in 2e06be9a049854d6cb5a5913a28b09122afc5e7d

[16:45] <Geth> ¦ whateverable: 

[16:45] <Geth> ¦ whateverable: Phixes #280

[16:45] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/f3b3e352d7

[16:53] *** xtreak joined
[16:58] *** lizmat left
[17:04] *** Actualeyes left
[17:04] *** Actualeyes joined
[17:13] *** domidumont joined
[17:24] *** zakharyas1 joined
[17:25] *** zakharyas left
[17:31] *** scimon left
[17:33] *** mahafyi left
[17:34] *** cpup left
[17:37] <jkramer> m: (1 xx 5).combinations(1..3).say

[17:37] <evalable6> jkramer, rakudo-moar deffe54b8: OUTPUT: «((1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1))␤»

[17:38] <jkramer> Is there a smarter way to get a list of combinations without the duplications, instead of first generating lots of duplicates and then using .unique?

[17:38] <jkramer> With smarter I mean faster, when using a really long list of input values :)

[17:38] <jkramer> That possibly are all the same

[17:39] *** ChoHag left
[17:41] *** Actualeyes left
[17:42] *** dakkar left
[17:44] <hoelzro> stmuk, AlexDaniel: it's a matter of bumping the version there and updating the library file in the images repo

[17:44] <hoelzro> I can do it later today

[17:44] <hoelzro> I totally missed the announcement that R* just came out =S

[17:47] *** zakharyas1 left
[17:50] <stmuk> ++hoelzro

[17:50] *** ChoHag joined
[18:00] *** cpup joined
[18:14] *** paul_ joined
[18:21] *** GregDonald left
[18:24] *** nine left
[18:26] *** nine joined
[18:27] *** camelia joined
[18:28] *** ChanServ sets mode: +v camelia

[18:30] *** darutoko left
[18:33] *** xtreak left
[18:35] *** eliasr joined
[18:38] *** xtreak joined
[18:44] *** webstrand left
[18:46] *** webstrand joined
[18:47] *** cdg left
[18:47] *** xtreak left
[19:01] *** GregDonald joined
[19:06] *** pochi left
[19:09] *** pochi joined
[19:22] *** setty1 joined
[19:23] *** japhb left
[19:23] *** stmuk_ joined
[19:26] *** stmuk left
[19:32] <ufobat> btw, the term "sigilless variable" is in the glossary but does not have any text to it: https://docs.perl6.org/language/glossary#Sigilless_Variable

[19:33] *** Kyo91 left
[19:34] *** trnh joined
[19:34] *** wamba left
[19:35] *** natrys left
[19:37] *** wamba joined
[19:50] *** natrys joined
[19:56] *** skids joined
[20:01] *** domidumont left
[20:02] *** wamba left
[20:02] *** wamba joined
[20:06] *** ChoHag left
[20:17] *** bart__ joined
[20:18] *** bart__ is now known as brrt

[20:21] *** brrt left
[20:27] *** jast joined
[20:27] *** brrt joined
[20:29] *** zakharyas joined
[20:31] *** zakharyas left
[20:33] *** Rawriful joined
[20:33] *** brrt left
[20:33] *** pochi left
[20:34] *** zakharyas joined
[20:38] *** brrt joined
[20:41] *** brrt left
[20:57] *** pecastro left
[21:03] *** Kaiepi left
[21:04] *** Kaiepi joined
[21:09] *** zakharyas left
[21:15] *** zakharyas joined
[21:19] *** cdg joined
[21:46] *** wamba left
[21:46] *** wamba joined
[21:51] *** bazzaar joined
[21:51] <bazzaar> \o perl6

[21:55] <bazzaar> hi, I'm trying out Cro and IO.spurt of a http request header/body response to file(s), would be grateful if someone could look at https://gist.github.com/bazzaar/040af6a440c86201c3921a2740a82c69#file-gistfile1-txt, the result is at the bottom of the gistfile

[21:58] <bazzaar> I'm using Rakudo Star 2018.01, but I got the same result with 2017.10 this am

[22:07] <geekosaur> you will probably need to either extract the response content yourself, or explicitly request the response be converted to Str

[22:07] <geekosaur> a response is not just the content! it's also a response code and various headers telling you/the application how to interpret the response content

[22:08] *** cdg_ joined
[22:08] <geekosaur> I don;t know Cro offhand, so I don't knwo if it has e.g. Cro::HTTP::Response.Str

[22:09] <DrForr> Wish this hadn't come up while I wasn't buried in OSCON stuff.

[22:09] <DrForr> (just put a Cro application up on GH, hence my interest.)

[22:10] <bazzaar> geekosaur: thanks for your words of wisdom, that's given me a good lead, I will go away and investigate further.

[22:11] *** cdg left
[22:13] *** zakharyas left
[22:14] *** lizmat joined
[22:17] *** skids left
[22:32] *** rindolf left
[22:47] <timotimo> bazzaar: there's a support channel for cro on freenode, too, btw! it'? #cro

[22:47] <timotimo> it's #cro

[22:50] <timotimo> bazzaar: https://irclog.perlgeek.de/cro/2018-01-24 - does this help perhaps?

[22:50] <bazzaar> timotimo: thanks for the #cro channel link, I'd forgotten about it. In this case I was sure if it was an IO related thing

[22:50] *** natrys left
[22:51] <timotimo> depending on what you want to do, you could put the code earlier in the pipeline where the body hasn't been parsed yet

[22:51] <timotimo> or feed it into a RequestSerializer, like the one the http client uses

[22:51] *** cdg joined
[22:52] *** pmurias left
[22:52] <bazzaar> timotimo: that's brilliant advice, thanks so much :-)

[22:52] *** cdg left
[22:53] *** cdg_ left
[22:54] <bazzaar> *wasn't (previous previous)

[22:54] *** cdg joined
[22:55] <El_Che> DrForr: you planning to go delirium or something on friday? Someone on twitter asks

[22:55] <El_Che> (I am not sure I can make it myself)

[22:59] <DrForr> Aroo? Yeah, I'll be there.

[22:59] <DrForr> I'm still in the throes of writing here, so I haven't checked recently.

[23:02] *** espadrine_ joined
[23:02] *** setty1 left
[23:04] <jnthn> bazzaar: What exactly are you after, out of curiosity?

[23:04] <DrForr> I didn't see a mention or DM, what message is it?

[23:04] <jnthn> bazzaar: To write out the exact set of bytes that come back over the network without any decoding applied at all?

[23:05] <jnthn> Anyway, $resp.Str for the first spurt will get you the response line and headers

[23:06] <jnthn> await $resp.body-blob a few lines up will get you the bytes making up the response body, except that decoding chunked encoding will have been handled for you

[23:06] <El_Che> DrForr: someone sent me a private msg asking if we've planned something

[23:07] <bazzaar> jnthn: to be honest, I'm just aiming to do some text retrieval from a web search page, and I thought I'd have a go using cro, and started off using the example in the http request example

[23:08] <DrForr> Oh. Have them DM me or whatever as well, but as I recall last time, it really doesn't open for our purposes until around 4pm.

[23:10] <bazzaar> jnthn: thanks for the tip re. $resp.Str and  $resp.body-blob

[23:10] *** cdg left
[23:10] <jnthn> bazzaar: oh, then what I said will do it, and if you know the body is text then $resp.body-text will get you a Str instead of a Blob :)

[23:10] *** cdg joined
[23:11] <jnthn> .body will look at the set of available body parsers and Do The Right Thing

[23:11] <jnthn> The default set includes a JSON parser, so if you get a JSON response then .body will already be decoded

[23:12] <bazzaar> jnthn: thanks again, and thanks for Cro :-)

[23:14] *** cdg_ joined
[23:15] *** |oLa| left
[23:15] *** cdg left
[23:16] * lizmat waves from FRA

[23:17] <jnthn> bazzaar: Welcome :)

[23:17] <jnthn> lizmat: Hmm, the lounge there has beer on tap and sausages? :)

[23:17] <El_Che> lizmat will rock the boat!

[23:18] <lizmat> well, actually from a new hotel just outside of the airport

[23:19] <lizmat> and yes, the bar has beer on tao and sausages

[23:19] <lizmat> it *is* germany after all  :-_

[23:19] <lizmat> )

[23:20] <jnthn> .oO( Is the typing due to the beer on tap? :-) )

[23:20] <timotimo> lizmat: have a safe trip!

[23:21] <lizmat> well, some rum and cider already passed the revue

[23:21] <lizmat> :-)

[23:21] <lizmat> timotimo: thanks

[23:32] <El_Che> lizmat: take care!

[23:32] <El_Che> and if a ghost ask for a present of your mother tell it you love reggae

[23:35] <buggable> New CPAN upload: P5sleep-0.0.3.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5sleep-0.0.3.tar.gz

[23:44] *** wamba left
[23:45] *** comborico1611 joined
[23:46] *** bazzaar left
[23:47] *** comborico joined
[23:47] <comborico1611> So I read some tutorials and still dont' know how to customize a major mode in Emacs . . . 

[23:47] <comborico1611> All I want to do is turn off electric-indent-mode from off html-mode.

[23:52] <lizmat> .oO( what a dreadlock holiday )

[23:52] <lizmat> sleep&

[23:52] *** lizmat left
[23:53] *** lizmat joined
[23:53] *** lizmat left
[23:53] *** imcsk8 left
[23:56] <ilmari> comborico1611: (add-hook 'html-mode (lambda () (electric-indent-local-mode 0)))

[23:56] <ilmari> html-mode-hook, even

[23:58] <comborico1611> Thank you so much.  Trying it now.

