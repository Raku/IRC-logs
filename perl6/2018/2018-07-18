[00:00] <jnthn> This is the way that HyperSeq and RaceSeq work

[00:00] <SmokeMachine> yes

[00:00] <SmokeMachine> hum...

[00:00] <b2gills> have it so each method returns a new instance that knows about the previous instance

[00:00] <jnthn> They interpret the operations they knwo how to parallelize in their own way, and then fall back on being normally iterable once you do an operation outside of that set.

[00:01] <jnthn> Much as in this case you want to stack up operations while in the while/ignore filtering language, and then iterate the result once an operation like .map is appended

[00:02] <SmokeMachine> jnthn: Thanks! Ill try that!

[00:03] <jnthn> :)

[00:03] <jnthn> SmokeMachine++

[00:03] <timotimo> i think we'll really want a good ordered hash in the ecosystem at some point; the question keeps coming up

[00:04] <timotimo> (i can barely keep up with my one module …)

[00:07] <MasterDuke> timotimo: isn't that what ArrayHash does?

[00:07] <timotimo> oh, is it?

[00:08] <timotimo> cool.

[00:08] <MasterDuke> TimToady: locally i get results consistent with that for more iterations, but benchable would time out....

[00:08] <MasterDuke> eco: ArrayHash

[00:08] <buggable> MasterDuke, ArrayHash 'An array in a hash in an array... like a turducken': git://github.com/zostay/perl6-ArrayHash.git 1 other matching results: https://modules.perl6.org/s/ArrayHash

[00:17] <SmokeMachine> eco: OrderedHash

[00:17] <buggable> SmokeMachine, OrderedHash 'blah blah blah': http://modules.perl6.org/dist/OrderedHash:github:Fernando%20Correa%20de%20Oliveira

[00:18] *** wonner joined
[00:19] <jnthn> Nice description :P

[00:19] <timotimo> "Write Me!"

[00:19] <SmokeMachine> :(

[00:27] *** wonner left
[00:36] <fake_space_whale> If I am naming a module with the intent of possible uploading the package to Perl 6 CPAN, what is the proper way to choose a prefix like how other modules have names like JSON::tiny?

[00:37] <fake_space_whale> s/possible/possibly/

[00:39] *** markoong left
[00:42] <timotimo> i don't have a good suggestion. only that we tend to have App:: for things that we expect users to directly invoke like ... like an application i guess

[00:50] <fake_space_whale> so the norm would be look at existing modules and sorta back solve for a good prefix from similar modules?

[00:50] <timotimo> that's what I'd do (but i don't have many modules at all)

[00:53] <MasterDuke> you also have a lot more freedom to re-use names since they can be distinguished by author (when 'use'ing them)

[00:53] <timotimo> right

[01:04] *** jameslenz joined
[01:07] *** fascinum joined
[01:08] *** Zoffix joined
[01:08] *** jameslenz left
[01:09] <Zoffix> Weird: "dd ['ZZZZ', achar, .<condition>, achar ~~ .<condition>];" gives me ["ZZZZ", "A", /<[A..Za..z\d+-]>/, Bool::False]

[01:09] <Zoffix> m: say "A" ~~ /<[A..Za..z\d+-]>/

[01:09] <camelia> rakudo-moar b30800c8e: OUTPUT: «｢A｣␤»

[01:09] <Zoffix> why is it false there :S

[01:10] <Zoffix> oh, the $_ var

[01:10] <Zoffix> m: $_ := {:cond(/<[A..Za..z\d+-]>/)}; my \achar = 'A'; dd ['ZZZZ', achar, .<condition>, achar ~~ .<condition>];

[01:10] <camelia> rakudo-moar b30800c8e: OUTPUT: «["ZZZZ", "A", Any, Bool::False]␤»

[01:10] <Zoffix> m: $_ := {:cond(/<[A..Za..z\d+-]>/)}; my \achar = 'A'; dd ['ZZZZ', achar, .<condition>, .<condition>.ACCEPTS: achar];

[01:10] <camelia> rakudo-moar b30800c8e: OUTPUT: «["ZZZZ", "A", Any, Bool::True]␤»

[01:10] <Zoffix> k

[01:11] *** Zoffix left
[01:13] <lookatme> evalable6: say "I am working"; 

[01:13] <evalable6> lookatme, rakudo-moar b30800c8e: OUTPUT: «I am working␤»

[01:13] <lookatme> How to add command line argument to robot evalable6 ?

[01:16] <MasterDuke> evalable6: source

[01:16] <evalable6> MasterDuke, https://github.com/perl6/whateverable

[01:17] <MasterDuke> lookatme: https://github.com/perl6/whateverable/blob/master/bin/Evalable.p6

[01:19] <lookatme> evalable6: https://pastebin.com/4hqBMvzP -w -a -b

[01:19] <evalable6> lookatme, It looks like a URL, but mime type is ‘text/html; charset=utf-8’ while I was expecting something with ‘text/plain’ or ‘perl’ in it. I can only understand raw links, sorry.

[01:19] <lookatme> evalable6: https://pastebin.com/raw/4hqBMvzP -w -a b

[01:19] <evalable6> lookatme, Successfully fetched the code from the provided URL

[01:19] <evalable6> lookatme, rakudo-moar b30800c8e: OUTPUT: «done the supplier␤»

[01:23] <MasterDuke> lookatme: i think the '-w -a b' will just get ignored

[01:24] <lookatme> yes, MasterDuke 

[01:24] <lookatme> I am now review the code find something can set command line arguments :)

[01:25] <timotimo> you can perhaps overwrite/mutate @*ARGS from user code at the earliest stage, like with a BEGIN block

[01:26] <lookatme> oh, right :)

[01:28] <lookatme> evalable6: https://pastebin.com/raw/sAJjAmzD

[01:28] <evalable6> lookatme, Successfully fetched the code from the provided URL

[01:28] <evalable6> lookatme, rakudo-moar b30800c8e: OUTPUT: «In Parser: Emit the option -w␤In MAIN: GOT MESSAGE: The -w matched ? FAILED␤In MAIN: GOT M…»

[01:28] <evalable6> lookatme, Full output: https://gist.github.com/88d6984b67b5bba78e701c2644ddd38d

[01:32] *** reu left
[01:32] <AlexDaniel> e: chdir ‘sandbox’; run ‘wget’, ‘https://pastebin.com/raw/sAJjAmzD’

[01:32] <evalable6> AlexDaniel, rakudo-moar b30800c8e: OUTPUT: «--2018-07-18 03:32:44--  https://pastebin.com/raw/sAJjAmzD␤Resolving pastebin.com (pastebi…»

[01:32] <evalable6> AlexDaniel, Full output: https://gist.github.com/01acf9a0226554b7aa1e62cb63c1ba38

[01:33] <AlexDaniel> e: run ‘sandbox/sAJjAmzD’, 42

[01:33] <evalable6> AlexDaniel, rakudo-moar b30800c8e: OUTPUT: «(exit code 1) The spawned command 'sandbox/sAJjAmzD' exited unsuccessfully (exit code: 1)␤  in block <unit> at /tmp/jCd2ivmJRt line 1␤␤»

[01:33] <AlexDaniel> e: run <perl6 sandbox/sAJjAmzD>, 42

[01:33] <evalable6> AlexDaniel, rakudo-moar b30800c8e: OUTPUT: «In Parser: Emit the option -w␤In MAIN: GOT MESSAGE: The -w matched ? FAILED␤In MAIN: GOT M…»

[01:33] <evalable6> AlexDaniel, Full output: https://gist.github.com/8b7b49309bed9dd2361418d9707386c4

[01:33] <AlexDaniel> I mean, that's how you can do it ↑

[01:34] <AlexDaniel> well, that's one way

[01:34] <AlexDaniel> there's a better one

[01:35] <AlexDaniel> e: https://gist.github.com/AlexDaniel/f501ce8757fc74bc27fbc2f900c87e24

[01:35] <evalable6> AlexDaniel, Using file “run.p6” as a main file, other files are placed in “sandbox/”

[01:35] <evalable6> AlexDaniel, rakudo-moar b30800c8e: OUTPUT: «In Parser: Emit the option -w␤In MAIN: GOT MESSAGE: The -w matched ? FAILED␤In MAIN: GOT M…»

[01:35] <evalable6> AlexDaniel, Full output: https://gist.github.com/e3049b93ddff0ce3457c790784d32c3c

[01:35] <AlexDaniel> lookatme: ↑

[01:35] <AlexDaniel> that probably makes more sense :)

[01:36] <lookatme> :( Can not access gist 

[01:36] <AlexDaniel> what do you mean?

[01:36] <lookatme> Stupid Firewall

[01:36] <lookatme> China

[01:37] *** MasterDuke left
[01:37] <AlexDaniel> oooh

[01:37] <AlexDaniel> well, that's unfortunate…

[01:37] <AlexDaniel> whateverable doesn't support multifile thingies anywhere else besides github

[01:38] <AlexDaniel> but you can still `wget` whatever you need :)

[01:38] <lookatme> yeah, I just want ask is this good practice, emit something (like $mc) to a supply, and get if it is done well through the interface of the $mc

[01:38] <lookatme> like .available

[01:39] <AlexDaniel> e: spurt ‘sandbox/foo’, ‘sub MAIN($x) { say ‘hello=’, $x }; run <perl6 sandbox/foo>, 42;

[01:39] <evalable6> AlexDaniel, rakudo-moar b30800c8e: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/kK2SUl2gwQ␤Unable …»

[01:39] <evalable6> AlexDaniel, Full output: https://gist.github.com/df427a33956d4bd34c52e248e834fee1

[01:39] <AlexDaniel> e: spurt ‘sandbox/foo’, ｢｢｢sub MAIN($x) { say ‘hello=’, $x }｣｣｣; run <perl6 sandbox/foo>, 42;

[01:39] <evalable6> AlexDaniel, rakudo-moar b30800c8e: OUTPUT: «(exit code 1) 'sandbox/foo' is a directory, cannot do '.open' on a directory␤  in block <unit> at /tmp/yzMPwJJaOp line 1␤␤»

[01:39] <AlexDaniel> e: spurt ‘sandbox/baz’, ｢｢｢sub MAIN($x) { say ‘hello=’, $x }｣｣｣; run <perl6 sandbox/baz>, 42;

[01:39] <evalable6> AlexDaniel, rakudo-moar b30800c8e: OUTPUT: «WARNINGS for /home/bisectable/git/whateverable/sandbox/baz:␤Useless use of "｢sub MAIN($x) { say ‘hello=’, $x }｣" in expression "｢sub MAIN($x) { say ‘hello=’, $x }｣" in sink context (line 1)␤»

[01:40] <AlexDaniel> e: spurt ‘sandbox/baz’, ｢sub MAIN($x) { say ‘hello=’, $x }｣; run <perl6 sandbox/baz>, 42;

[01:40] <evalable6> AlexDaniel, rakudo-moar b30800c8e: OUTPUT: «hello=42␤»

[01:40] <AlexDaniel> yay \o/

[01:41] <lookatme> oh, I see

[01:41] <AlexDaniel> lookatme: can't answer your question unfortunately, my brain is shutting down :)

[01:41] * AlexDaniel 💤

[01:41] <lookatme> oh .. :)

[01:42] <lookatme> haha

[01:42] <lookatme> e: run < ls sandbox >;

[01:42] <evalable6> lookatme, rakudo-moar b30800c8e: OUTPUT: «040-request.t␤0.806238500539699.lock␤answer␤aws-s3-perl6␤basic.t␤baz␤bombz␤can␤data␤DBIish…»

[01:42] <evalable6> lookatme, Full output: https://gist.github.com/cc269f232c3902bbd6270ba228c1f96b

[01:43] <lookatme> thanks AlexDaniel 

[01:44] *** mephinet joined
[01:52] *** reu joined
[02:03] *** molaf left
[02:16] *** molaf joined
[02:27] *** aborazmeh joined
[02:27] *** aborazmeh left
[02:27] *** aborazmeh joined
[02:32] <Geth> ¦ doc: 7b0b78450f | Coke++ | doc/Type/IO/Handle.pod6

[02:32] <Geth> ¦ doc: This example can't work without modules installed

[02:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7b0b78450f

[02:32] <synopsebot> Link: https://doc.perl6.org/type/IO::Handle

[02:47] *** fbynite joined
[02:48] <fbynite> is there a p6 module equivalent to p5's Math::Round?

[02:51] <lookatme> m: 2.333.round.say; # ?

[02:51] <camelia> rakudo-moar b30800c8e: OUTPUT: «2␤»

[02:51] <lookatme> what that Math::Round do ?

[02:52] <lookatme> s/what/what's/

[02:53] <lookatme> fbynite, is this helpful ?

[02:53] <lookatme> ^^

[02:55] <fbynite> slightly, except that I want to round to the nearest tenth

[02:56] <lookatme> fbynite, they are many other method : https://docs.perl6.org/type/Int#(Real)_method_round

[02:58] <lookatme> oh, I see the module example

[02:59] <lookatme> you need a `nearest` ?

[03:00] <fbynite> yep, exactly - I'm reading the link you sent

[03:00] <fbynite> looks like I need to set the scale

[03:01] <lookatme> m: 2.333.round(10).say; # ?

[03:01] <camelia> rakudo-moar b30800c8e: OUTPUT: «0␤»

[03:01] <lookatme> m: 15.round(10).say; # ?

[03:01] <camelia> rakudo-moar b30800c8e: OUTPUT: «20␤»

[03:01] <lookatme> m: 5.round(10).say; # ?

[03:01] <camelia> rakudo-moar b30800c8e: OUTPUT: «10␤»

[03:01] <fbynite> 2.333.round(0.1).say

[03:01] <evalable6> fbynite, rakudo-moar b30800c8e: OUTPUT: «2.3␤»

[03:02] <lookatme> m: 14.999.round(10).say; # ?

[03:02] <camelia> rakudo-moar b30800c8e: OUTPUT: «10␤»

[03:02] <fbynite> 14.999.round(0.1).say

[03:02] <evalable6> fbynite, rakudo-moar b30800c8e: OUTPUT: «15␤»

[03:03] <fbynite> lookatme: thanks!

[03:03] *** ruoso left
[03:03] <lookatme> welcome

[03:04] <lookatme> m: (-45).round(10).say

[03:04] <camelia> rakudo-moar b30800c8e: OUTPUT: «-40␤»

[03:04] *** jameslenz joined
[03:05] <lookatme> fbynite, but notice the negative number, it have different result with that nearest in Math::Round

[03:07] <fbynite> -45.round(10).say

[03:07] <evalable6> fbynite, rakudo-moar b30800c8e: OUTPUT: «WARNINGS for /tmp/CeGRYBCS83:␤50␤Useless use of "-" in expression "-45.round(10).say" in sink context (line 1)␤»

[03:08] *** jameslenz left
[03:08] <fbynite> using the REPL, I got 50

[03:09] <lookatme> you should parentheses the -45

[03:09] <lookatme> say (-45).round(10)

[03:09] <evalable6> lookatme, rakudo-moar b30800c8e: OUTPUT: «-40␤»

[03:09] <lookatme> say -45.round(10)

[03:09] <evalable6> lookatme, rakudo-moar b30800c8e: OUTPUT: «-50␤»

[03:11] *** MasterDuke joined
[03:15] *** fake_space_whale left
[03:15] *** MasterDuke_ joined
[03:18] *** MasterDuke left
[03:18] *** MasterDuke_ is now known as MasterDuke

[03:21] *** fbynite left
[03:30] *** fbynite joined
[03:37] *** aborazmeh left
[03:38] *** fascinum left
[03:52] <warriors> cool

[03:53] <warriors> i think -45.round(10) is treated as -(45.round(10))

[03:59] *** sauvin joined
[03:59] *** wamba joined
[04:04] *** sauvin left
[04:09] *** sauvin joined
[04:23] *** Kaiepi joined
[04:24] <Kaiepi> i won't be able to contribute for a while since i'll be in the mental hospital starting tomorrow

[04:25] <Kaiepi> sorry

[04:34] <benjikun> Kaiepi: I hope everything turns out okay bud

[04:42] *** brrt joined
[04:42] <Kaiepi> thanks

[04:53] *** curan joined
[05:04] <kjk> MasterDuke: so ,= is a lot faster than <<=<<  ? Am I interpreting the benchmark result right?

[05:04] *** jameslenz joined
[05:06] *** wamba left
[05:08] *** jameslenz left
[05:09] *** speedChi- joined
[05:10] *** zoosha_ joined
[05:11] *** cibs_ joined
[05:11] *** avarab joined
[05:11] *** avarab left
[05:11] *** avarab joined
[05:11] *** nopl_ joined
[05:13] *** wamba joined
[05:16] *** buggable left
[05:16] *** eliasr left
[05:16] *** SmokeMachine left
[05:16] *** BuildTheRobots left
[05:23] *** felher joined
[05:23] *** spider-mario joined
[05:25] *** shadowpaste joined
[05:27] *** molaf left
[05:35] *** buggable joined
[05:35] *** leah2 joined
[05:35] *** kent\n joined
[05:35] *** casdr joined
[05:35] *** zostay joined
[05:35] *** xi- joined
[05:35] *** SmokeMachine joined
[05:35] *** BuildTheRobots joined
[05:35] *** timeless joined
[05:35] *** rodarmor joined
[05:35] *** skaji joined
[05:35] *** olinkl joined
[05:35] *** chansen_ joined
[05:35] *** Spot_ joined
[05:35] *** PotatoGim joined
[05:35] *** huggable joined
[05:35] *** Failure joined
[05:35] *** joy_ joined
[05:35] *** rajaniemi.freenode.net sets mode: +vv buggable huggable

[05:38] *** diegok joined
[06:07] *** xtreak joined
[06:08] *** wamba left
[06:16] *** bisectable6 joined
[06:16] *** greppable6 joined
[06:16] *** nativecallable6 joined
[06:16] *** statisfiable6 joined
[06:29] *** rindolf joined
[06:32] *** kerframil left
[06:34] *** rindolf left
[06:41] *** konsolebox joined
[06:45] *** wamba joined
[06:50] *** robertle joined
[06:50] *** rindolf joined
[06:52] *** domidumont joined
[06:58] *** domidumont left
[06:58] *** domidumont joined
[07:04] *** jameslenz joined
[07:09] *** jameslenz left
[07:14] *** lookatme joined
[07:29] *** brrt left
[07:35] *** troys left
[07:48] *** domidumont left
[07:49] *** domidumont joined
[07:50] *** psychoslave joined
[07:55] *** sarna joined
[07:56] *** xinming_ joined
[07:57] *** zakharyas joined
[07:57] <sarna> hey, how to call a method from another method?

[07:58] <sarna> self.method()?

[07:58] *** psychoslave left
[08:02] *** dakkar joined
[08:05] <lookatme> sarna, yes, right

[08:06] <lookatme> m: class Foo { method bar() { self.foo(); }; method foo() { "CALL ME".say; }; }; Foo.new.bar;

[08:06] <camelia> rakudo-moar b30800c8e: OUTPUT: «CALL ME␤»

[08:06] <sarna> ok :) thought maybe there was another way

[08:06] *** brrt joined
[08:06] <lookatme> sarna, another way ?

[08:07] <sarna> lookatme: dunno really. it doesn't matter :D

[08:07] <lookatme> this is the official way :)

[08:07] <geekosaur> aside from foo(self:)

[08:07] <lookatme> if you want another way, it maybe ^^

[08:07] <geekosaur> which is just a different way to say self.foo()

[08:07] <lookatme> yeah, like geekosaur said

[08:07] <lookatme> foo(self, ...)

[08:08] <geekosaur> no, it has to be a colon so it's the invocant rather than a parameter

[08:08] *** zakharyas left
[08:08] <geekosaur> you do find some things that work that way, but that's because there are both method and sub forms defined for them

[08:08] <sarna> cool beans

[08:08] <lookatme> maybe foo(self: ...) ?

[08:08] <geekosaur> right, foo(self: other parms here)

[08:09] <lookatme> m: class Foo { method bar() { $?CLASS.^lookup("foo").(self); }; method foo() { "CALL ME".say; }; }; Foo.new.bar;

[08:09] <camelia> rakudo-moar b30800c8e: OUTPUT: «CALL ME␤»

[08:10] <lookatme> m: class Foo { method bar() { $?CLASS.^lookup("foo").(self, 4); }; method foo($a) { "CALL ME $a".say; }; }; Foo.new.bar;

[08:10] <camelia> rakudo-moar b30800c8e: OUTPUT: «CALL ME 4␤»

[08:10] <lookatme> m: class Foo { method bar() { $?CLASS.^lookup("foo").(self: 4); }; method foo($a) { "CALL ME $a".say; }; }; Foo.new.bar;

[08:10] <camelia> rakudo-moar b30800c8e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3od bar() { $?CLASS.^lookup("foo").(self:7⏏5 4); }; method foo($a) …»

[08:10] <lookatme> It's not working, the colon

[08:12] <sarna> btw, can I declare a method inside a method? like with subs

[08:12] <lookatme> yes sarna 

[08:12] *** fbynite left
[08:12] <lookatme> `my method` would works fine

[08:13] <sarna> my method inside that other method?

[08:13] <sarna> I don't want it to be visible from the outside, because, well, it wouldn't make sense from the outside

[08:13] <lookatme> m: my method outside(self: $a) { say self, $a; }; say outside(42, ".");

[08:13] <camelia> rakudo-moar b30800c8e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Invalid typename 'self' in parameter declaration.␤at <tmp>:1␤------> 3my method outside(self7⏏5: $a) { say self, $a; }; say outside(42,␤»

[08:14] <lookatme> m: my method outside($a) { say self, $a; }; say outside(42, ".");

[08:14] <camelia> rakudo-moar b30800c8e: OUTPUT: «42.␤True␤»

[08:15] <lookatme> sarna, if you want private method, you can add ! before the method name

[08:15] <lookatme> m: class Foo { method !foo($a) { "CALL ME $a".say; }; }; Foo.new.foo: 4;

[08:15] <camelia> rakudo-moar b30800c8e: OUTPUT: «No such method 'foo' for invocant of type 'Foo'. Did you mean '!foo'?␤  in block <unit> at <tmp> line 1␤␤»

[08:16] <sarna> hmm I don't know if I explained correctly

[08:16] <lookatme> I recommend you read the documents about Class https://docs.perl6.org/language/classtut#index-entry-%21_%28private_methods%29

[08:17] <lookatme> sarna, you can use private method in other method ,but not outside

[08:17] <lookatme> that's what I said

[08:21] <sarna> what I'm trying to accomplish:

[08:21] <sarna> m: sub foo() { sub bar() { say 'hi'; }; bar(); }; foo();

[08:21] <camelia> rakudo-moar b30800c8e: OUTPUT: «hi␤»

[08:21] <sarna> m: sub foo() { sub bar() { say 'hi'; }; bar(); }; foo(); bar();

[08:21] <camelia> rakudo-moar b30800c8e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    bar used at line 1. Did you mean 'bag', 'VAR'?␤␤»

[08:22] <sarna> with 'my method bar()' I get an error

[08:22] <sarna> Too few positionals passed; expected 1 argument but got 0

[08:23] <sarna> I guess self isn't passed to bar or something

[08:23] <lookatme> why do you want a method ?

[08:23] <lookatme> m: sub foo() { my method bar() { say self; }; bar(42); }; foo();

[08:23] <camelia> rakudo-moar b30800c8e: OUTPUT: «42␤»

[08:24] <lookatme> you should pass self to bar manually

[08:24] <sarna> I guess self isn't passed to bar or something

[08:24] <sarna> sorry

[08:24] <lookatme> hmm ?

[08:24] <sarna> alt-tabbed to a wrong thing :) I'll check if your code works for me, a sec

[08:24] <lookatme> okay

[08:26] <sarna> okay, it works! thank you :D

[08:26] <sarna> and sorry for not explaining myself better

[08:27] *** sarna left
[08:31] *** zakharyas joined
[08:41] *** Ven` joined
[08:41] *** xtreak left
[08:50] *** domidumont left
[08:50] *** domidumont joined
[08:51] *** domidumont left
[08:52] *** domidumont joined
[08:58] *** brrt left
[09:01] *** xinming_ left
[09:03] *** xinming joined
[09:05] *** psychoslave joined
[09:05] *** jameslenz joined
[09:05] *** psychoslave left
[09:06] *** psychoslave joined
[09:07] *** dogbert2 joined
[09:08] *** xtreak joined
[09:09] *** sena_kun joined
[09:09] *** xinming left
[09:10] *** jameslenz left
[09:10] *** xinming joined
[09:11] *** brrt joined
[09:16] *** domidumont left
[09:17] *** domidumont joined
[09:27] *** brrt left
[09:28] *** lizmat joined
[09:30] *** cibs_ is now known as cibs

[09:31] *** domidumont left
[09:32] *** domidumont joined
[09:44] *** scimon joined
[09:45] *** aindilis joined
[09:46] *** psychoslave left
[09:46] *** psychoslave joined
[10:00] *** SCHAPiE joined
[10:04] *** zakharyas left
[10:05] *** zakharyas joined
[10:08] *** andrewalker joined
[10:10] *** psychoslave left
[10:13] *** pmurias joined
[10:26] *** Ven` left
[10:30] *** SCHAPiE left
[10:33] *** xtreak left
[10:36] <buggable> New CPAN upload: Archive-Libarchive-Raw-0.0.6.tar.gz by FRITH http://modules.perl6.org/dist/Archive::Libarchive::Raw:cpan:FRITH

[10:38] *** markoong joined
[10:40] *** Zoffix joined
[10:50] <Zoffix> I love how much easier it is to make custom IO handles in 6.d: https://raw.githubusercontent.com/perl6/marketing/master/Flyers/6.d-Teasers/T2-Simple-Handle--1531801752/T2-Simple-Handle--1531801752.pdf

[10:58] <Zoffix> m: -45 .round: 10 # another way to specify precedence of prefix before method call here, is to add a space instead of parens

[10:58] <camelia> rakudo-moar b30800c8e: ( no output )

[10:58] <Zoffix> m: say -45 .round: 10 # another way to specify precedence of prefix before method call here, is to add a space instead of parens

[10:58] <camelia> rakudo-moar b30800c8e: OUTPUT: «-40␤»

[11:00] *** Zoffix left
[11:01] *** buggable left
[11:01] *** buggable joined
[11:01] *** ChanServ sets mode: +v buggable

[11:02] *** robertle left
[11:03] *** SCHAPiE joined
[11:05] *** jameslenz joined
[11:06] *** xtreak joined
[11:10] *** jameslenz left
[11:12] *** Schepeers joined
[11:12] *** zakharyas left
[11:13] *** xinming left
[11:24] *** xinming joined
[11:26] *** Ven` joined
[11:33] *** HaraldJoerg joined
[11:47] *** psychoslave joined
[11:50] *** psychoslave left
[11:50] *** psychoslave_ joined
[11:50] *** psychoslave_ is now known as psychoslave

[11:51] *** raschipi joined
[11:56] *** robertle joined
[12:08] *** psychoslave left
[12:16] *** scimon left
[12:23] *** fake_space_whale joined
[12:24] *** veesh joined
[12:25] <veesh> what's a good font to use in my terminal for the perl6 repl?

[12:25] <veesh> i get weird overlaps with my default

[12:25] *** itaipu joined
[12:28] *** zakharyas joined
[12:28] <lizmat> veesh: that's very much dependent on the OS / terminal program that you're using

[12:30] *** vike joined
[12:30] *** MasterDuke left
[12:30] <timotimo> i tend to be anti-REPL anyway :S

[12:36] <timotimo> not against REPL in general, just against *our* repl :\

[12:37] <Geth> ¦ doc: tbrowder self-assigned new manage-page-order.p6 script https://github.com/perl6/doc/issues/2185

[12:40] *** nooninm joined
[12:40] *** domidumont left
[12:40] <nooninm> I am going to enter a short test script to show that sub MAIN is executing last instead of first. 

[12:40] *** domidumont joined
[12:41] <nooninm> sub execute_after_main(Str $string) {     say "\tDid this $string print out after MAIN was done?"; } execute_after_main("1");  sub MAIN() {     say "\tThis is main so this should print first"; } execute_after_main("2");  #Result: #       Did this 1 print out after MAIN was done? #       Did this 2 print out after MAIN was done? #       This is main so this should print first

[12:41] <nooninm> How does one enter line breaks in irc?

[12:41] <nooninm> Let me try again, one line at a time

[12:41] <tbrowder_>  hi #perl6

[12:41] <nooninm> sub execute_after_main(Str $string) {

[12:41] <nooninm>     say "\tDid this $string print out after MAIN was done?";

[12:42] <nooninm> }

[12:42] <timotimo> you're right, MAIN gets executed after the script has finished running

[12:42] <jnthn> MAIN executes after the mainline of the script

[12:42] <timotimo> you may be interested in a phaser

[12:42] <jnthn> In part so that it can fiddle with @*ARGS if needed

[12:42] <nooninm> # Yes, it is supposed to.  My script will show that it is not.

[12:43] <tbrowder_> AlexDaniel: ref Lang page: do you want subpages for groups or drop down lists? please enter as issue and assign me u;less someone else has raised a hand.

[12:43] <nooninm> What do mean "after the main line"

[12:43] <AlexDaniel> tbrowder_: just separate tables will do

[12:43] <nooninm> Do you mean after all other code has executed?

[12:43] <timotimo> yes

[12:43] <tbrowder_> ok

[12:43] *** itaipu left
[12:44] <nooninm> Perl page 62 of Think Perl 6, a program that has a defined MAIN subroutine will usually start its execution with that subroutine.

[12:44] *** itaipu joined
[12:44] <nooninm> But if as you say it executes sub MAIN last, the book is in error, correct?

[12:44] <Altreus> can I slice an object to fetch multiple properties at once?

[12:45] <jnthn> nooninm: Seems so, yes. It's behaved in the current way for as long as I can remember.

[12:45] <jnthn> Altreus: Destructure it

[12:45] <timotimo> do i have the wrong page?

[12:45] <timotimo> this is in chapter 4: loops, conditionals, and recursion

[12:45] <timotimo> it has "nested conditionals" on 62 and "if conditionals as statement modifiers" and "unless conditional statement" on 63

[12:45] <nooninm> Okay, I'll try to write the author.  We have two topics going on here so I'll leave.  Thanks

[12:46] <Altreus> I put destructure into google and got results!

[12:46] <nooninm> Bye

[12:46] <timotimo> no need to leave

[12:46] <timotimo> there's a ticket tracker on github if you have an account

[12:46] <timotimo> for think perl 6 the book

[12:46] <lizmat> nooninm: page 62 in my copy doesn't say anything about MAIN ?

[12:46] <jnthn> m: my (:$numerator, :$denominator) := 4.5; say $numerator; say $dominator;

[12:46] <camelia> rakudo-moar b30800c8e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$dominator' is not declared. Did you mean '$denominator'?␤at <tmp>:1␤------> 3enominator) := 4.5; say $numerator; say 7⏏5$dominator;␤»

[12:47] <jnthn> m: my (:$numerator, :$denominator) := 4.5; say $numerator; say $denominator;

[12:47] <camelia> rakudo-moar b30800c8e: OUTPUT: «9␤2␤»

[12:47] <jnthn> Altreus: ^^

[12:47] <jnthn> .oO( Guess what I'm been doing too much of... )

[12:47] <nooninm> This is the title on page 62: "4.15 Program Arguments and the MAIN Subroutine"

[12:48] <lizmat> nooninm: it's page 69 in my hardcopy

[12:48] <Geth> ¦ doc: tbrowder self-assigned divide Language page groups into separate pages https://github.com/perl6/doc/issues/2186

[12:48] <nooninm> Okay.  I have 1st Edition, Version 0.5.0 May 2017

[12:48] <lizmat> but you're right, the phrasing could have been better

[12:49] <lizmat> nooninm: as do I, but in hardcopy.  I assume you have en ebook version ?

[12:49] <nooninm> Good enough.  I'll leave you guys.  And thanks!

[12:49] <nooninm> bye

[12:49] <lizmat> bye nooninm 

[12:50] *** xtreak left
[12:54] *** nooninm left
[12:54] *** itaipu left
[12:54] *** itaipu joined
[12:59] *** itaipu left
[12:59] *** itaipu joined
[13:01] *** scimon joined
[13:03] *** ruoso joined
[13:03] *** curan left
[13:04] *** itaipu left
[13:05] *** zakharyas left
[13:05] *** itaipu joined
[13:05] *** zakharyas joined
[13:05] *** jameslenz joined
[13:08] *** araraloren joined
[13:08] *** psychoslave joined
[13:09] *** itaipu left
[13:09] *** aindilis left
[13:10] *** jameslenz left
[13:10] *** itaipu joined
[13:10] *** psychoslave_ joined
[13:13] *** psychoslave left
[13:13] *** psychoslave_ is now known as psychoslave

[13:14] *** domidumont left
[13:14] *** domidumont joined
[13:14] *** domidumont left
[13:15] *** domidumont joined
[13:15] *** lalitmee joined
[13:19] *** Zoffix joined
[13:19] *** aindilis joined
[13:19] <Zoffix> m: .say for (Date.today…∞).grep(1 ≤ *.day-of-week ≤ 5)[^10] # the … also dwims without needing * + 1 in there

[13:19] <camelia> rakudo-moar b30800c8e: OUTPUT: «2018-07-18␤2018-07-19␤2018-07-20␤2018-07-23␤2018-07-24␤2018-07-25␤2018-07-26␤2018-07-27␤2018-07-30␤2018-07-31␤»

[13:20] *** wamba left
[13:20] <Zoffix> oops, wc

[13:20] *** Zoffix left
[13:22] <raschipi> Yuck, days of the week starting at Monday.

[13:22] <timotimo> that's the only way it makes sense

[13:23] <timotimo> the weekend goes at the end, not "at both ends"

[13:24] <raschipi> That just means it's not the "weekend".

[13:25] <timotimo> why would saturday and sunday not be the weekend?

[13:26] <raschipi> Saturday is the weekend and Sunday is the weekstart.

[13:26] <Ven`> first day of the week being monday is obvious to everyone but americans I think :).

[13:26] <timotimo> that is super weird to me

[13:26] <jnthn> I think you're the first person I've ever heard use the word weekstart :)

[13:26] <jnthn> .oO( It's making a weak start on its adoption... )

[13:26] <raschipi> I just made it up.

[13:27] <timotimo> we call that "cognitive dissonance" :D

[13:27] <raschipi> Ven`: I'm not American.

[13:27] <Ven`> > According to the International Organization for Standardization ISO 8601, Sunday is the seventh day of the week

[13:27] <Ven`> whatever that is worth, though.

[13:27] <raschipi> Just means they are wrong.

[13:28] <Ven`> Not sure about that :-).

[13:28] <timotimo> i'm not sure if you're serious or not, raschipi 

[13:28] <raschipi> If you just assume standards organizations are always right, you're gonna have a bad time.

[13:28] <Ven`> so it's goodI did no such thing.

[13:29] <Ven`> timotimo: it depends between countries

[13:29] <raschipi> It's all just a question of culture, habits and preferences, of course.

[13:29] <raschipi> Yet, yuck.

[13:29] <araraloren> evalable6: https://gist.githubusercontent.com/araraloren/5541759070fe176431499c49f9a59b15/raw/4d334d461d81d083bed1bfec7d165188bf96ab15/po.p6

[13:29] <evalable6> araraloren, Successfully fetched the code from the provided URL

[13:29] <evalable6> araraloren, rakudo-moar b30800c8e: OUTPUT: «In Parser: Emit the option -w␤In MAIN: GOT MESSAGE: The -w matched ? FAILED␤In MAIN: GOT M…»

[13:29] <evalable6> araraloren, Full output: https://gist.github.com/47e7d3e446eb9aebb3a5337e7a4a751d

[13:30] *** Grrrr joined
[13:30] <jnthn> If we did modulo math then it could be the 0th and 7th day :P

[13:31] <araraloren> jnthn Is this good pratice, emit something (like $mc) to a supply, and get if it is done well through the interface of $mc ?

[13:32] *** itaipu left
[13:33] *** itaipu joined
[13:34] *** itaipu left
[13:38] *** itaipu joined
[13:39] *** itaipu left
[13:41] <buggable> New CPAN upload: Archive-Libarchive-Raw-0.0.7.tar.gz by FRITH http://modules.perl6.org/dist/Archive::Libarchive::Raw:cpan:FRITH

[13:43] *** itaipu joined
[13:45] *** itaipu left
[13:47] *** ambs joined
[13:48] *** itaipu joined
[13:49] *** lalitmee left
[13:52] *** itaipu left
[13:52] *** subroot joined
[13:53] *** itaipu joined
[13:56] *** itaipu left
[13:58] *** itaipu joined
[13:59] *** SHODAN joined
[14:01] <tbrowder_> [Coke]: is htmlify to be moved to util/ in your proposal? (issue 2185)

[14:02] *** itaipu left
[14:02] *** skids joined
[14:03] *** itaipu joined
[14:03] *** zakharyas left
[14:04] *** zakharyas joined
[14:07] *** itaipu left
[14:08] *** SHODAN left
[14:08] *** itaipu joined
[14:12] *** itaipu left
[14:13] *** SHODAN joined
[14:14] *** itaipu joined
[14:16] *** itaipu left
[14:19] *** itaipu joined
[14:20] <[Coke]> I'm slowly decomposing that into build steps in my branch.

[14:20] <[Coke]> but no, in master, I was suggesting moving the new thing.

[14:21] <[Coke]> Esp. in light of the recent discussion (which I thought you were part of but am not sure) about having too many things top level.

[14:21] *** psychoslave left
[14:22] *** wamba joined
[14:22] *** psychoslave joined
[14:23] *** itaipu left
[14:23] *** psychoslave left
[14:23] <tbrowder_> ok, i’m starting that now if that’s ok.

[14:23] *** psychoslave joined
[14:24] *** itaipu joined
[14:24] <[Coke]> Sure, thanks!

[14:24] <[Coke]> I am still working on cleaning up htmlify/Makefile stuff in the coke/build branch, but tuits are spare these days.

[14:26] <tbrowder_> i made a new top-level dir called build-prods but build may be better. it should be able to be deleted with a make distclean or other target.

[14:27] *** itaipu left
[14:28] <tbrowder_> i and jmerelo were two of folks in discussion of doc reorg or cleanup

[14:28] *** psychoslave left
[14:29] *** itaipu joined
[14:31] *** ThoSvePa joined
[14:31] <ThoSvePa> Hi there!

[14:32] *** itaipu left
[14:32] <ThoSvePa> I'm trying to install rakudo on CentOS 7 and have an error while executing 'perl Configure.pl --backend=moar --gen-moar'

[14:33] <araraloren> ThoSvePa what error ?

[14:33] <ThoSvePa> It is 'Can't locate Digest/SHA.pm in @INC'

[14:33] <araraloren> oh, maybe you should install that Perl 5 module

[14:33] <araraloren> using cpan/cpanm

[14:34] <ThoSvePa> That's all? Thank you very much.

[14:34] *** itaipu joined
[14:35] <araraloren> yeah, maybe this helpful ： `sudo dnf install perl-Digest-SHA`

[14:35] <araraloren> I don't know the actual package name

[14:36] <ThoSvePa> Ok, I'm searching on myself how to install the package. Think I have to install cpan or cpanm first.

[14:36] <ilmari> Digest::SHA is core, but centos/redhat/fedora have broken the packaging

[14:36] <araraloren> oh

[14:36] <ilmari> you need to install the 'perl-core' package to get a complete perl instlalation

[14:37] <ilmari> they've finally fixed it in fedora 28 and the upcoming rhel/centos 8

[14:38] *** itaipu left
[14:38] <ThoSvePa> Thanks a lot again. It's great to get help so fast.

[14:41] <Altreus> jnthn: cool, that's exactly what I got from the docs and blogs I found :)

[14:42] <Altreus> that means those things are actually sufficient learning tools :o

[14:43] <Altreus> m: my %h = %(:numerator, :denominator) = 4.5;  # something like this might work?

[14:43] <camelia> rakudo-moar b30800c8e: OUTPUT: «Odd number of elements found where hash initializer expected:␤Only saw: 4.5␤  in block <unit> at <tmp> line 1␤␤»

[14:43] <Altreus> m: my %h = %(:numerator, :denominator) := 4.5;  # something like this might work?

[14:43] <camelia> rakudo-moar b30800c8e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use bind operator with this left-hand side␤at <tmp>:1␤------> 3 %h = %(:numerator, :denominator) := 4.57⏏5;  # something like this might work?␤»

[14:44] <Altreus> I know I'm guessing but I hoped I would guess right xD

[14:44] <Altreus> Can I unpack the object into a hash in one go like this?

[14:44] <Altreus> m: my %h(:numerator, :denominator) := 4.5;  # something like this might work?

[14:44] <camelia> rakudo-moar b30800c8e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use bind operator with this left-hand side␤at <tmp>:1␤------> 3my %h(:numerator, :denominator) := 4.57⏏5;  # something like this might work?␤»

[14:45] *** Zoffix joined
[14:45] <Zoffix> m: my %h = 4.5.Capture; say %h

[14:45] <camelia> rakudo-moar b30800c8e: OUTPUT: «{}␤»

[14:45] <Zoffix> m: my %h = 4.5.Capture.hash; say %h

[14:45] <camelia> rakudo-moar b30800c8e: OUTPUT: «{denominator => 2, numerator => 9}␤»

[14:45] <lizmat> m: my %h = numerator => 4, denominator => 5; dd %h

[14:45] <camelia> rakudo-moar b30800c8e: OUTPUT: «Hash %h = {:denominator(5), :numerator(4)}␤»

[14:46] <Altreus> m: my %h = 4.5.Capture<numerator>:kv; dd %h;

[14:46] <camelia> rakudo-moar b30800c8e: OUTPUT: «Hash %h = {:numerator(9)}␤»

[14:46] *** ThoSvePa left
[14:46] <Altreus> that's the job

[14:46] <lizmat> m: my %h = :4numerator, :5denominator; dd %h  # more cryptic

[14:46] <camelia> rakudo-moar b30800c8e: OUTPUT: «Hash %h = {:denominator(5), :numerator(4)}␤»

[14:47] <Zoffix> Altreus: `my (...) :=` is a special syntax that treats the bit inside `(...)` as a signature and on the RHS you give it a Capture (or it's automatically obtained by calling .Capture)

[14:47] <Zoffix> So outside that special syntax you have to poke at .Capture manually

[14:47] <Altreus> at least it's there :D

[14:47] <Zoffix> Captures can provide both named and positional args, so the .hash bit steals the named portion 

[14:47] <Zoffix> m: dd 4.5.Capture

[14:47] <camelia> rakudo-moar b30800c8e: OUTPUT: «\(:denominator(2), :numerator(9))␤»

[14:48] <Zoffix> And you can't Capture some objeccts

[14:48] <Zoffix> m: dd 4.Capture

[14:48] <camelia> rakudo-moar b30800c8e: OUTPUT: «Cannot unpack or Capture `4`.␤To create a Capture, add parentheses: \(...)␤If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}␤or missed `:` in signature unpacking? -> &c:(Int) {}␤  in block <unit> at …»

[14:48] <lizmat> ah,  now I understand the question, sorry for the noise :-)

[14:48] <Zoffix> :)

[14:48] <Altreus> speaking of lizmat's noise, is :4numerator an accident or is there rationale behind that?

[14:48] *** wamba left
[14:49] <lizmat> :2nd, :3rd, :4th

[14:49] *** ChoHag left
[14:49] <Zoffix> Altreus: it's syntax driving stuff like `s:2nd/.../.../`... The :4numerator is the abuse… err extension… of that syntax

[14:49] <lizmat> was the original intent

[14:49] <Altreus> this is why there's a rolling eyes emoji!

[14:49] <Zoffix> :)

[14:49] <Zoffix> More colonpair shortcuts: https://rakudo.party/post/Perl-6-Colonpairoscopy

[14:50] <Zoffix> (the :$<foo> shortcut is missing from the article tho)

[14:50] <Altreus> I'm glad the time between my questions is increasing :P

[14:50] *** ChoHag joined
[14:50] <Altreus> means I can start understanding these articles

[14:50] <Zoffix> m: "foobar" ~~ /$<foo>=.**3/; say [:$<foo>]

[14:50] <camelia> rakudo-moar b30800c8e: OUTPUT: «[foo => ｢foo｣]␤»

[14:50] <Zoffix> :)

[14:51] *** lalitmee joined
[14:52] <Zoffix> How come this is an empty Hash?

[14:52] <Zoffix> m: my %h = 4.5.Capture; say %h

[14:52] <camelia> rakudo-moar b30800c8e: OUTPUT: «{}␤»

[14:53] <Zoffix> I would've accepted an "Odd number of blah blah" error, but empty?

[14:54] <Altreus> m: 4.5.Capture.PERL.say

[14:54] <camelia> rakudo-moar b30800c8e: OUTPUT: «No such method 'PERL' for invocant of type 'Capture'␤  in block <unit> at <tmp> line 1␤␤»

[14:54] <Altreus> o

[14:54] <Zoffix> .perl

[14:54] <Altreus> m: 4.5.Capture.perl.say

[14:54] <camelia> rakudo-moar b30800c8e: OUTPUT: «\(:denominator(2), :numerator(9))␤»

[14:55] <Altreus> oh you already did that, I see now

[14:55] <[Coke]> m: 4.5.Capture.elems.say

[14:55] <camelia> rakudo-moar b30800c8e: OUTPUT: «0␤»

[14:55] <Zoffix> Ah, it's going by what .iterator gives it and that iterates through positionals

[14:56] *** psychoslave joined
[14:56] <Zoffix> m: my %h = \('foo', 'bar', :42meows); dd %h

[14:56] <camelia> rakudo-moar b30800c8e: OUTPUT: «Hash %h = {:foo("bar")}␤»

[14:57] <tbrowder_> Zoffix: nice party article, thanks!

[15:03] *** zakharyas left
[15:04] <Altreus> is it possible to create a strict hash, one that complains if you look up a missing key?

[15:04] <Altreus> Often it is useful to throw an error if there is missing config, for example

[15:04] *** zakharyas joined
[15:04] <Altreus> but it is tedious to repeat yourself, once in the hash lookup, and again in the error message

[15:04] <lizmat> m: my %restricted is Map = ....;  # this at least is immutable

[15:04] <camelia> rakudo-moar b30800c8e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3my %restricted is Map = ....7⏏5;  # this at least is immutable␤»

[15:05] *** x[LGWs4x4i]uG2N0 joined
[15:05] <Altreus> m: my %restricted is Map = :config<value>; %restricted<missing>;

[15:05] <camelia> rakudo-moar b30800c8e: ( no output )

[15:05] <Altreus> ^ this would be the time to throw

[15:05] *** jameslenz joined
[15:06] <Altreus> otherwise it's die "Missing config value: missing" unless %restricted<missing>:exists

[15:06] <Altreus> and *then* you have to repeat yourself again later when you actually make use of that value (because exists can't return the value for assignment)

[15:07] *** molaf joined
[15:07] <lizmat> Altreus: ok, so you want to specify a list of allowable keys at initialization ?

[15:08] <Altreus> There's options, but my assumption would be that you could do something like my $value = %config<value>:s

[15:08] <Altreus> where s means strict, or some such adverb

[15:08] <lizmat> Altreus: perhaps http://modules.perl6.org/dist/Hash::Util is something for you ?

[15:10] <Altreus> hmm

[15:10] <lizmat> Would something like:

[15:10] *** jameslenz left
[15:10] <lizmat> my %config is restricted-to<foo bar baz> = init

[15:11] <lizmat> work for you ?

[15:11] <Altreus> If you've ever used python you might know it's useful that it complains if you look up a nonexistent item, but also that it gives you a way around it that just returns nil

[15:11] <Altreus> I think we're thinking from opposite directions

[15:11] <lizmat> that would complain at initialization ?

[15:11] <Altreus> I don't mind what extra keys exist, I just want to auto-die if I try to access a key the user hasn't provided

[15:11] <jnthn> araraloren: Supplies don't introduce concurrency, so it's safe in that sense.

[15:11] <lizmat> Altreus: perhaps

[15:11] <Altreus> you know what, I bet I can do that in the signature

[15:12] <lizmat> Altreus: named parameters can be obligatory by adding a !

[15:12] <lizmat> sub a (:$foo!) 

[15:12] *** veesh left
[15:12] <lizmat> m: sub a (:$foo!) { }; a 42

[15:12] <camelia> rakudo-moar b30800c8e: OUTPUT: «Too many positionals passed; expected 0 arguments but got 1␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:12] <lizmat> m: sub a (:$foo!) { }; a :bar

[15:12] <camelia> rakudo-moar b30800c8e: OUTPUT: «Required named parameter 'foo' not passed␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:13] <araraloren> jnthn thanks the advices :)

[15:13] <Altreus> m: sub a ( %(:required) ) {} a { :optional };

[15:13] <camelia> rakudo-moar b30800c8e: OUTPUT: «5===SORRY!5===␤Shape declaration with () is reserved;␤  please use whitespace if you meant a subsignature for unpacking,␤  or use the :() form if you meant to add signature info to the function's type␤at <tmp>:1␤------> 3sub a ( %7⏏…»

[15:13] <Altreus> m: sub a ( %( :required ) ) {} a { :optional };

[15:13] <camelia> rakudo-moar b30800c8e: OUTPUT: «5===SORRY!5===␤Shape declaration with () is reserved;␤  please use whitespace if you meant a subsignature for unpacking,␤  or use the :() form if you meant to add signature info to the function's type␤at <tmp>:1␤------> 3sub a ( %7⏏…»

[15:13] <Altreus> um

[15:13] <Zoffix> "...please use whitespace if you meant a subsignature.."

[15:14] <Zoffix> oh

[15:14] <Zoffix> m: sub a ( % (:required) ) {} a { :optional };

[15:14] <camelia> rakudo-moar b30800c8e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> 3sub a ( % (:7⏏5required) ) {} a { :optional };␤»

[15:14] <Zoffix> m: sub a ( % (:$required) ) {} a { :optional };

[15:14] <camelia> rakudo-moar b30800c8e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3sub a ( % (:$required) ) {}7⏏5 a { :optional };␤    expecting any of:␤        infix␤        infix stopper␤   …»

[15:14] <Altreus> anyway the idea is that we don't have to keep saying "You didn't configure xyz" unless %config<xyz>

[15:14] <Zoffix> m: sub a ( % (:$required) ) {}; a { :optional };

[15:14] <camelia> rakudo-moar b30800c8e: OUTPUT: «Unexpected named argument 'optional' passed in sub-signature␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:14] <Altreus> It should just die when we access %config<xyz>

[15:14] <Altreus> a lexical pragma might work, or an adjective on the lookup

[15:14] <Zoffix> .oO( or a module )

[15:14] <Altreus> where pragma may mean module :)

[15:15] <Altreus> use Strict::Hashes;

[15:15] <Altreus> that way, the config hash can contain whatever it wants to, as long as what *we* are looking for is in there

[15:15] <lizmat> Altreus: ok, I'll bite

[15:15] <lizmat> I was thinking of a trait

[15:16] <Altreus> sub a (%config is strict)

[15:16] <Zoffix> is default({die})

[15:16] <lizmat> Zoffix++

[15:16] <lizmat> that would actually work  :-)

[15:16] <Zoffix> IIRC there's a ticket for Callables in `is default` to do something more interesting that just be normal values

[15:16] <Altreus> wait, is default on a hash is the default value for lookups?

[15:17] <Altreus> I could have used quotes better in that message

[15:17] <Zoffix> default value for containers of values

[15:17] <lizmat> it's the default for the container that gets returned 

[15:17] <Zoffix> m: my %h is default(Failure.new); say %h<foo>

[15:17] <camelia> rakudo-moar b30800c8e: OUTPUT: «===SORRY!===␤Failed␤»

[15:17] <lizmat> Zoffix: but the failure only gets thrown when the value is actually used, not when it is fetched

[15:17] <Altreus> m: my %h is default(Failure.new) = :foo; say %h<foo>

[15:17] <camelia> rakudo-moar b30800c8e: OUTPUT: «True␤»

[15:17] <Zoffix> yeah

[15:17] <Zoffix> It also lacks location info

[15:17] <Altreus> whaaaaaaaaat

[15:18] <Altreus> yeah if that could output better that would be perfect

[15:18] <Altreus> i.e. if it could be parameterised

[15:18] <Altreus> eh

[15:18] * lizmat will think about that after some time away from the keyboard

[15:18] <Altreus> lizmat: actually that's kind of OK

[15:18] <Altreus> With the perl6 hot-potato sort of Failure, if I accidentally look up a config setting I never use, the user never gets told off

[15:19] <Zoffix> lizmat: RT#131599 is the ticket

[15:19] <synopsebot> RT#131599 [open]: https://rt.perl.org/Ticket/Display.html?id=131599 [RFC] Allow a Callable for `is default` that will generate default values

[15:20] <Zoffix> uhh... or maybe it's just a title of a renamed ticket :) the content itself seems to be about [] in defaults :P

[15:20] *** robertle left
[15:20] *** araraloren left
[15:20] <Zoffix> Ah, you'd use {[]} to ensure it's a new container each time. OK

[15:22] *** Zoffix left
[15:24] <moritz> m: sub f($s = []) { $s }; say f() === f()

[15:24] <camelia> rakudo-moar b30800c8e: OUTPUT: «False␤»

[15:25] <Altreus> I will weigh in on this rt

[15:28] <Altreus> m: my %h is default(Failure.new); CATCH { $_.say } say %h<foo>; say %h<bar>;

[15:28] <camelia> rakudo-moar b30800c8e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3s default(Failure.new); CATCH { $_.say }7⏏5 say %h<foo>; say %h<bar>;␤»

[15:29] <Altreus> m: my %h is default(Failure.new); CATCH { $_.say }; say %h<foo>; say %h<bar>;

[15:29] <camelia> rakudo-moar b30800c8e: OUTPUT: «Failed␤  in any trait_mod at /home/camelia/rakudo-m-inst-1/share/nqp/lib/Perl6/Grammar.moarvm line 1␤  in any trait at /home/camelia/rakudo-m-inst-1/share/nqp/lib/Perl6/Grammar.moarvm line 1␤  in any scope_declarator:sym<my> at /home/camelia/rak…»

[15:29] <Altreus> I suppose it does explode each time

[15:35] <raschipi> m: my %h is default(Failure.new("Strict Hash")); CATCH { $_.say }; say %h<foo>; say %h<bar>;

[15:35] <camelia> rakudo-moar b30800c8e: OUTPUT: «Strict Hash␤  in any trait_mod at /home/camelia/rakudo-m-inst-1/share/nqp/lib/Perl6/Grammar.moarvm line 1␤  in any trait at /home/camelia/rakudo-m-inst-1/share/nqp/lib/Perl6/Grammar.moarvm line 1␤  in any scope_declarator:sym<my> at /home/cameli…»

[15:42] *** [particle] joined
[15:50] *** Zoffix joined
[15:50] <Zoffix> Altreus: nah, it has the same issue as the `is default([])`. You keep getting the same object in the defaults. If one piece of code handles that failure, another failed lookup will return a now-handled failure

[15:51] <Zoffix> m: my %h is default(Failure.new); %h<foo>.so; %h<bar>.self;

[15:51] <camelia> rakudo-moar b30800c8e: ( no output )

[15:51] <Zoffix> m: my %h is default(Failure.new);  %h<bar>.self;

[15:51] <camelia> rakudo-moar b30800c8e: OUTPUT: «===SORRY!===␤Failed␤»

[15:51] <Zoffix> "action at a distance" basically

[15:52] *** lalitmee left
[15:53] <b2gills> Create a class named Strict::Hash then `my %h is Strict::Hash = …`

[15:54] <b2gills> have `.AT-KEY` return a Failure if the key isn't already there. Then you can do `%h<nonexistent> // 0`

[15:56] <Altreus> yeah, I figured I could just override it

[15:56] <Zoffix> m: class Bomb is Mu { BEGIN ::?CLASS.^add_method: .name, -> | {die "Boom" } for ::?CLASS.^methods: :all; method FALLBACK(|) { die "Boom" } }; my %h is default(Bomb); try say %h<foo>; say %h<bar>

[15:56] <camelia> rakudo-moar b30800c8e: OUTPUT: «Boom␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:56] <Zoffix> m: class Bomb is Mu { BEGIN ::?CLASS.^add_method: .name, -> | {die "Boom" } for ::?CLASS.^methods: :all; method FALLBACK(|) { die "Boom" } }; my %h is default(Bomb); %h<bar>

[15:56] <camelia> rakudo-moar b30800c8e: ( no output )

[15:57] <Zoffix> boo

[15:57] *** robertle joined
[15:59] *** zakharyas left
[15:59] <Zoffix> m: (my %h = :42foo) does role { method AT-KEY (\v, |c) { self{v}:exists ?? nextsame() !! die "Boom"} }; %h<foos>:v

[15:59] <camelia> rakudo-moar b30800c8e: ( no output )

[15:59] <Zoffix> looks like more than just AT-KEY needs to be modded

[15:59] <Zoffix> m: (my %h = :42foo) does role { method AT-KEY (\v, |c) { self{v}:exists ?? nextsame() !! die "Boom"} }; %h{*}

[15:59] <camelia> rakudo-moar b30800c8e: ( no output )

[15:59] *** Zoffix left
[16:00] *** domidumont left
[16:15] *** DarthGandalf left
[16:20] <SmokeMachine> m: use MONKEY-TYPING; augment class Seq { has $!a = 42; method b { say $!a } }; Seq.new(class :: does Iterator {method pull-one{1}}.new).b

[16:20] <camelia> rakudo-moar b30800c8e: OUTPUT: «P6opaque: no such attribute '$!a' on type Seq in a Seq when trying to get a value␤  in method b at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:21] <SmokeMachine> why this isn't working?

[16:22] <jnthn> Because you can't augment in extra attributes

[16:24] <SmokeMachine> jnthn: how can I do something like that?

[16:24] <jnthn> Mix in to it using does

[16:26] *** fake_space_whale left
[16:32] *** scimon left
[16:32] *** geekosaur joined
[16:32] *** geekosaur left
[16:34] *** geekosaur joined
[16:39] <SmokeMachine> insta working... :(

[16:40] <SmokeMachine> jnthn: https://gist.github.com/FCO/88f9773eb3a4eab73dd2352362541186

[16:41] <buggable> New CPAN upload: Sparrowdo-VSTS-YAML-Build-0.0.4.tar.gz by MELEZHIK http://modules.perl6.org/dist/Sparrowdo::VSTS::YAML::Build:cpan:MELEZHIK

[16:46] *** dakkar left
[16:47] <SmokeMachine> m: use MONKEY-TYPING; role Bla { has $!a = 42; method b { say $!a } }; augment class Seq does Bla {}; Seq.new(class :: does Iterator {method pull-one{1}}.new).b

[16:47] <camelia> rakudo-moar b30800c8e: OUTPUT: «P6opaque: no such attribute '$!a' on type Seq in a Seq when trying to get a value␤  in method b at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:48] <SmokeMachine> m: role Bla { has $!a = 42; method b { say $!a } }; Seq does Bla; Seq.new(class :: does Iterator {method pull-one{1}}.new).b

[16:48] <camelia> rakudo-moar b30800c8e: OUTPUT: «Cannot use 'does' operator on a type object Seq.␤  in block <unit> at <tmp> line 1␤␤»

[16:48] *** fbynite joined
[16:49] <SmokeMachine> m: role Bla { has $!a = 42; method b { say $!a } }; (Seq.new(class :: does Iterator {method pull-one{1}}.new) but Bla).b

[16:49] <camelia> rakudo-moar b30800c8e: OUTPUT: «42␤»

[16:49] <SmokeMachine> :)

[16:55] *** fbynite left
[16:56] <robertle> does anyone have experience with composing Cro routes at runtime rather than compile time?

[16:57] <robertle> I have a url scheme like /foo/<id>/<stuff> where depending on the <id> objects of different types are responsible to handle <stuff>

[16:57] *** psychoslave left
[16:58] <sena_kun> robertle, you can actually do that using `.compose` method from Cro::Core.

[16:58] <robertle> with plan request/response handling I can of course look up the handler object from some structure and then delegate to a method call on the object. but <stuff> within the object can have many endpoints and quite some logic, so it would be cool to use a route there as well

[16:59] <sena_kun> I believe that every provided shortcut class like Server or Client can be as well constructed from client side of things.

[16:59] <robertle> sena_kun: I am not sure I understand. I was looking at that, but don't see how I can make it do what I want...

[16:59] <jnthn> subset SomeObjectType of Int where ...determine what it is...; get -> 'foo', SomeObjectType $id, $stuff { } perhaps?

[17:00] *** DarthGandalf joined
[17:00] <sena_kun> robertle, I am not fully sure what your usecase is, but the answer is "Yes, it can be". Did you read https://cro.services/docs/approach ?

[17:01] <jnthn> sena_kun: I think this is about the router rather than pipeline composition.

[17:01] <robertle> regarding teh .compose: I can use it to do sequential pipelines, but I need a fork in my pipeline, and I don't get how to realise that

[17:01] <sena_kun> ooh, indeed.

[17:02] <sena_kun> maybe Conditional can help?

[17:02] <sena_kun> hmmm.

[17:02] <robertle> and regarding the subset idea: it's not only about the types, also about state that these objects could hold. so I really need/want to switch to an instanced, not a type.

[17:03] <robertle> an alternative view would be: given a route and a request object, how can I pass the request to the

[17:03] <robertle> route and yield a response?

[17:03] <jkramer> Can somebody help me out? https://bpaste.net/show/23e41b4bd43a

[17:04] <jkramer> What's wrong here? Why does the Z- give me only one value in return?

[17:05] <jkramer> Also where is the value coming from? :D 0 - 5 should be -5, 5 - 10 too.

[17:05] *** lizmat left
[17:05] *** Zoffix joined
[17:05] *** DarthGandalf left
[17:06] <Zoffix> jkramer: you're storring stuff in an Array, which automatically places stuff into Scalar containers. You need to decont stuff

[17:06] <Zoffix> huggable: decont

[17:06] *** eliasr joined
[17:06] <huggable> Zoffix, Article on containers and decont: https://perl6advent.wordpress.com/2017/12/02/#theoneandonly

[17:06] *** jameslenz joined
[17:06] *** DarthGandalf joined
[17:07] <jnthn> robertle: Ah, then probably the best way is to write something that does the Cro::Transform role, looks at the incoming request object, and then does the onwards delegation

[17:07] <Zoffix> m: my @words = <foo bar baz lol 123 foo baz quux 123 lol foo trolololol lol asd>.pairs; my %positions .= classify-list: *.value, @words, :as(*.key); say .key, ': ', (.value<> Z- .value.skip) for %positions.grep(+*.value > 2)

[17:07] <camelia> rakudo-moar b30800c8e: OUTPUT: «lol: (-6 -3)␤foo: (-5 -5)␤»

[17:07] <jkramer> Oh ok. I tried .value.flat earlier, shouldn't that work the same in this case?

[17:08] <jnthn> robertle: You can get a route block to process a request by something a bit like `whenever $that-route-block.transformer(emit $request) -> $response { emit $response }`

[17:08] <Zoffix> jkramer: .flat doesn't flatten conted stuff

[17:08] <jnthn> ah, sorry, `supply emit $request` there

[17:09] <Zoffix> m: dd falt (1, (2, (3, (4,)))

[17:09] <camelia> rakudo-moar b30800c8e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in parenthesized expression; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3dd falt (1, (2, (3, (4,)))7⏏5<EOL>␤    expecting any…»

[17:09] <Zoffix> m: dd falt (1, (2, (3, (4,))))

[17:09] <camelia> rakudo-moar b30800c8e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    falt used at line 1. Did you mean 'flat'?␤␤»

[17:09] <Zoffix> m: dd flat (1, (2, (3, (4,))))

[17:09] <camelia> rakudo-moar b30800c8e: OUTPUT: «(1, 2, 3, 4).Seq␤»

[17:09] <Zoffix> m: dd flat (1, (2, $(3, (4,))))

[17:09] <camelia> rakudo-moar b30800c8e: OUTPUT: «(1, 2, $(3, (4,))).Seq␤»

[17:09] *** chrom joined
[17:09] <Zoffix> m: dd flat $(1, (2, $(3, (4,))))

[17:09] <camelia> rakudo-moar b30800c8e: OUTPUT: «(1, 2, $(3, (4,))).Seq␤»

[17:09] <chrom> heyho

[17:09] <Zoffix> \o

[17:10] <Zoffix> jkramer: though it'd work to decont the iterable it's called on. Were you calling it in place of `<>` in my eval above?

[17:10] *** jameslenz left
[17:10] <Zoffix> m: my @words = <foo bar baz lol 123 foo baz quux 123 lol foo trolololol lol asd>.pairs; my %positions .= classify-list: *.value, @words, :as(*.key); say .key, ': ', (.value.flat Z- .value.skip) for %positions.grep(+*.value > 2)

[17:10] <camelia> rakudo-moar b30800c8e: OUTPUT: «lol: (-6 -3)␤foo: (-5 -5)␤»

[17:10] <Zoffix> m: my @words = <foo bar baz lol 123 foo baz quux 123 lol foo trolololol lol asd>.pairs; my %positions .= classify-list: *.value, @words, :as(*.key); say .key, ': ', (.value.self Z- .value.skip) for %positions.grep(+*.value > 2)

[17:10] <camelia> rakudo-moar b30800c8e: OUTPUT: «foo: (-5 -5)␤lol: (-6 -3)␤»

[17:11] <jkramer> Zoffix: Yes

[17:11] <Zoffix> seems to work above

[17:13] *** Zoffix left
[17:15] <SmokeMachine> jnthn: what do you think? https://www.irccloud.com/pastebin/QHM6KSZN/

[17:15] <jkramer> Weird, don't know what I did there.

[17:16] <SmokeMachine> https://gist.github.com/FCO/5e4dffcc2f47d4c1c2c4a0a4ce74e2c2

[17:18] *** sauvin left
[17:18] <robertle> jnthn: that sounds fab, I'll try and build my own transform

[17:22] *** domidumont joined
[17:32] *** chrom left
[17:38] *** fbynite joined
[17:41] <fbynite> I've got the following p5 code: my ($var1, $var2, $var3) = /some-regex/;. In p6m should I use grammars, named captures or ...?

[17:41] <El_Che> you can get an array of matches, I think

[17:42] <timotimo>   if you're only interested in the strings that matched anyway, maybe comb is the right thing for you

[17:45] *** kaiser_ joined
[17:48] *** donpdonp joined
[17:48] <donpdonp> what am I missing when the perl6 cli does not have readline support?

[17:48] <El_Che> donpdonp: it shoud tell you

[17:49] <El_Che> Linenoise or Readline

[17:49] <donpdonp> it doesnt say anything, i just dont get up-arrow

[17:49] <donpdonp> i'll try linenoise, thx.

[17:53] *** Zoffix joined
[17:54] <Zoffix> RE: 6.d: someone's asking "Is there a reason why y’all are putting letters in the versions?" https://twitter.com/genio_cw/status/1019627279830351872

[17:54] *** molaf left
[17:55] <Zoffix> Skimming the logs, doesn't look like there were some grand plans for versioning and it just all carried on from 6.b => beta/Birthday, 6.c => Christmas, 6.d … 6.za, but if someone remembers a better answer maybe you can respond better :)

[17:58] <kaiser_> Hello everyone. I am experiencing something weird. I have a simple script that counts lines and words in a Node.js project. When the script is run for the first time, it takes ages to finish. Then it averages around 0.4 sec. More or less the same script in Perl 5 (with only minor differences) finishes in cca. 0.035 sec.

[17:58] <kaiser_> What I really want to understand is why it takes sooo looong for the first time, I'm less concerned about the diff between P5 and P6. I'm not an expert in Perl, so I'm pretty sure my code can be improved.

[17:59] <kaiser_> The code is here: https://gist.github.com/kaisersparpick/a49930795e9f505c5924cbddb8a5aa49  As a comparison, the Perl 5 code is here: https://gist.github.com/kaisersparpick/29e368b12bb3755b185359dca714c587

[17:59] <kaiser_> I'd appreciate your feedback. Thanky ou.

[17:59] *** lucasb joined
[18:00] <lucasb> from 6.a (advent/alpha) even :)

[18:00] <Zoffix> kaiser_: is that the whole thing? Usually what you describe applies to making changes in a module. The first run is slower because of precompilation of that module. But if you're not using any modules, then it's probably something else.

[18:02] <Zoffix> kaiser_: what version of perl6 you use?

[18:02] *** Ven` left
[18:02] <kaiser_> That is all the code. The lines are printed pretty fast until the first "Subtotal" line, so after the "for dir $dir -> $file" iteration.

[18:03] <kaiser_> Then it seems to wait for a long time

[18:05] <raschipi> kaiser_: Which version are you running?

[18:05] <kaiser_> I've added Int's to the var declarations to prevent p6 from using bigints, which are the default if I'm not mistaken.

[18:05] <Zoffix> On 2018.06+, the first and subsequent runs take the same time for me

[18:06] <Zoffix> kaiser_: Ints are bigints

[18:06] <kaiser_> Rakudo Star from around February - sorry I don't know exactly.

[18:06] <Zoffix> perl6 -v prints it

[18:06] <Zoffix> huggable: star

[18:06] <huggable> Zoffix, Estimated Rakudo Star releases: .01, .04, .07 & .10

[18:06] <Zoffix> I'm guessing 2018.01

[18:07] <kaiser_> The code is at my workplace and I'm at home now :(

[18:07] <Zoffix> Could it be some operating system disk caching or something?

[18:07] <kaiser_> "Ints are bigints" - Oh. Then what can I use to avoid them?

[18:08] <lucasb> lowercase int

[18:08] <Zoffix> kaiser_: you can use lowercase `int` for native ints

[18:08] <Zoffix> 105s first run? Then 0.4s all subsequent runs? Weird

[18:08] <Zoffix> kaiser_: what operating system is this on?

[18:08] <kaiser_> I'm using Ubuntu 16. I did not set up any special caching.

[18:08] <kaiser_> Exactly.

[18:09] <kaiser_> "105s first run? Then 0.4s all subsequent runs?" <- Exactly :)

[18:09] <Zoffix> :)

[18:10] <kaiser_> lucasb: Thanks! I'll try that tomorrow.

[18:10] *** pecastro joined
[18:11] *** wamba joined
[18:12] <kaiser_> Will I gain considerable speed improvement by switching to lowercase int?

[18:13] <Zoffix> not really

[18:13] <kaiser_> Hmmm

[18:13] *** lizmat joined
[18:13] <Zoffix> sometimes can even be slower, due to boxing-unboxing

[18:17] <Zoffix> kaiser_: what defines a first run, BTW? Do you have to wait 100s after each change to the script?

[18:18] <Zoffix> c: HEAD,2018.01 https://temp.perl6.party/z.txt

[18:18] <committable6> Zoffix, Successfully fetched the code from the provided URL

[18:18] <committable6> Zoffix, ¦HEAD(a847abe): «␤1.0552871␤» ¦2018.01: «␤1.1416646␤»

[18:19] <kaiser_> When I first run the script, it quickly starts printing the lines for the first project, then it seems to be waitin around 100 s before printing the "Subtotal" line, then it proceeds with the second project and quickly finishes. When I run the same script again, it finishes in 0.4s.

[18:20] <kaiser_> This is the behaviour whenever I reboot Ubuntu.

[18:20] <SmokeMachine> Im not sure if the expected is with or without the first line... (the /^lo/ one) https://www.irccloud.com/pastebin/ohj5TB4D/

[18:22] <raschipi> Could be that in the subsequent runs the OS has the files in memory and doesn't need to read them from the disk again.

[18:23] <Zoffix> But 100s difference? Also, I'm guessing Perl 5's version is not affected

[18:24] *** lucasb left
[18:24] <kaiser_> The perofmance of the Perl5 version is reliably consistent around 0.035 seconds

[18:26] <raschipi> Can you try timing it again after running 'echo 3 > /proc/sys/vm/drop_caches' ?

[18:26] <Zoffix> kaiser_: no idea what might be causing it, but next time you're at work, you can try if this version has the same problem: https://gist.github.com/zoffixznet/6902c3fb1ccab4d73624d90b3b165734

[18:27] <Zoffix> kaiser_: in your version, you're descending into dirs while iterating the current dir, so you have a potential bug of running out of open file handles, if you're searching through a very nested dir structure. In my version, I just push the dirs to search into an array and do open one dir at a time basically.

[18:27] <Zoffix> kaiser_: also, instead of reading the same file twice to get the lines and then the words, I read it once and get lines/words from the read content.

[18:28] <Zoffix> Doubt if this would fix anything, but maybe it does vOv

[18:29] <Zoffix> And if you want to speed it up, you could replace that `sprintf` with something hand-rolled, 'cause right now sprintf is super slow

[18:29] <Zoffix> (N.B.: in the docs, you might find .fmt method, but on most objects it's just a sprintf call under the hood, so is equivally slow)

[18:31] <kaiser_> Zoffix and reschipi: I see, thanks for the clarification and suggestions. I'll try them tomorrow.

[18:31] *** DarthGandalf left
[18:32] *** kerframil joined
[18:32] *** DarthGandalf joined
[18:34] <Zoffix> m: my ($n, $l, $w) = "meows", ^100 .pick, ^100 .pick; for ^2000 { sprintf "%-60.s | %5.d | %6.d", $n, $l, $w }; say now - ENTER now

[18:34] <camelia> rakudo-moar a847abe52: OUTPUT: «0.7465759␤»

[18:34] <Zoffix> m: my ($n, $l, $w) = "meows", ^100 .pick, ^100 .pick; for ^2000 { join " ", $n, " " x (60-$n.chars), " | ", " " x (5-$l.chars), $l, " | ", " " x (6-$w.chars), $w }; say now - ENTER now

[18:34] <camelia> rakudo-moar a847abe52: OUTPUT: «0.0688703␤»

[18:34] <Zoffix> m: say 0.7465759/0.0688703

[18:34] <camelia> rakudo-moar a847abe52: OUTPUT: «10.8403172␤»

[18:39] *** konsolebox left
[18:41] *** konsolebox joined
[18:42] <kaiser_> Oh, sprintf is slow indeed :)

[18:42] <Garland_g[m]> I noticed while working with the json exceptions handler that the output for a X::CompUnit::UnsatisfiedDependency doesn't have all of the standard information about a line number, position, filename, etc. It only has "message" and "specification."

[18:43] <Garland_g[m]> This causes the perl6 syntastic plugin to fail to bring up any errors in the error bar, as it is relying on having those particular fields to place the markers in the vim gutter.

[18:44] <Garland_g[m]> Where would be the appropriate place to report this to?

[18:49] <Zoffix> Garland_g[m]: usually https://github.com/rakudo/rakudo/issues/new  but 1 sec, there's already a related issue. Lemme find it

[18:50] <Zoffix> Garland_g[m]: this one: https://github.com/rakudo/rakudo/issues/2022

[18:50] *** itaipu joined
[18:52] <Garland_g[m]> Thanks for the link.

[18:54] *** psychoslave joined
[18:55] <donpdonp> my ($a, $b) = go; sub go {("A","Z")}; This type cannot unbox to a native string: P6opaque, Hash

[18:55] *** hythm_ joined
[18:55] <donpdonp> im baffled by the error. my ($a,$b) = ("A","Z"); is happy.

[18:56] *** fbynite left
[18:56] <Zoffix> m: my ($a, $b) = go; sub go {("A","Z")};

[18:56] <camelia> rakudo-moar a847abe52: ( no output )

[18:56] <donpdonp> ok I winged the example a bit. let me make a better one.

[18:57] <Zoffix> donpdonp: did you have a block somewhere with code that you then removed all the code from and it became a {}? That's a Hash, you need to write it as {;} to have a Block there

[18:57] <Zoffix> (doesn't apply to `sub {}`, but to plain blocks)

[18:58] <Zoffix> m: my str $x = {}

[18:58] <camelia> rakudo-moar a847abe52: OUTPUT: «This type cannot unbox to a native string: P6opaque, Hash␤  in block <unit> at <tmp> line 1␤␤»

[18:59] <donpdonp> Zoffix: I dont think I did that. my simple example doesnt actually error, im looking into how my code is different.

[19:00] <hythm_> How to modify installed module locally for quick testing? I tried modifying at ~/.zef/store/module-name but that does not seem to ork

[19:01] <hythm_> Work*

[19:01] <Zoffix> hythm_: installed modules are precompiled. I don't think there's a way to modify them without re-installing

[19:01] <Zoffix> You need to get module's source and add the path to the source with -I or `use lib` to get it looked at there first

[19:02] <hythm_> That will work, thank Zoffix

[19:02] *** wamba left
[19:03] *** wamba joined
[19:03] <donpdonp> Zoffix: ah I had go(str $param) and called go(some_hash_of_some_sort) so it was a signature problem.

[19:03] *** kaiser_ left
[19:03] <Zoffix> ah

[19:03] <raschipi> Zoffix, can't trying to use an empty hash as a block be detected and the message be awesome?

[19:04] <donpdonp> compounded by lowercase str.

[19:04] <donpdonp> why does that compile? go(str $param)

[19:05] <donpdonp> with go(Str $param) the error makes sense Type check failed in binding to parameter '$body'; expected Str but got Hash 

[19:05] <Zoffix> donpdonp: `str` is a native type. You get the "cannot unbox" errors for those

[19:05] <Zoffix> The error isn't great, but you get used to them

[19:05] <Altreus> I keep doing something of the shape `$a = $b if $b`. Can I say it shorter?

[19:06] <Altreus> i.e. stop repeating whatever $b is in each situation

[19:06] *** jameslenz joined
[19:06] <Altreus> The $a is actually of the form $hash<some-key>

[19:06] <Altreus> so I want to avoid creating the key

[19:07] <donpdonp> my $a = $b || "default" would answer the first question, but its not going to prevent assignment

[19:07] <Zoffix> m: my $a = 42; my $b = 100; $a R[&&]= $b; say $a

[19:07] <camelia> rakudo-moar a847abe52: OUTPUT: «===SORRY!===␤Cannot find method 'ann' on object of type NQPMu␤»

[19:07] <Zoffix> Altreus: I think ^ that would work, once the bug is fixed :)

[19:08] <Altreus> see perl6 seems to have an answer for everything that bores me in perl5 :D

[19:08] <donpdonp> ah the if wraps the entire assignment, i didnt notice that before.

[19:08] *** domidumont left
[19:08] <Zoffix> oh, maybe not:

[19:08] <Zoffix> m: my $a = 42; my $b = 100; $a R[and]= $b; say $a

[19:08] <camelia> rakudo-moar a847abe52: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot reverse the args of  because assignment operator operators are too fiddly␤at <tmp>:1␤------> 3my $a = 42; my $b = 100; $a R[and]=7⏏5 $b; say $a␤»

[19:08] <Zoffix> too fiddly

[19:09] <Altreus> at least it's honest

[19:09] <lizmat> .oO( users playing second fiddle :-)

[19:09] <Zoffix> m: sub infix:<♥> (\a, \b) { a = b if b }; my $a = 42; my $b = 100; $a ♥ $b; dd $a

[19:09] <camelia> rakudo-moar a847abe52: OUTPUT: «Int $a = 100␤»

[19:09] <Zoffix> m: sub infix:<♥> (\a, \b) { a = b if b }; my $a = 42; my $b = 0; $a ♥ $b; dd $a

[19:09] <camelia> rakudo-moar a847abe52: OUTPUT: «Int $a = 42␤»

[19:09] <Zoffix> :)

[19:10] <Altreus> :3

[19:10] <Zoffix> :D

[19:10] <Juerd> It's not only being honest, it actually says sorry. Is there any other compiler that does that? :)

[19:10] <lizmat> feels better if that would be "with b" to me

[19:10] *** jameslenz left
[19:11] <raschipi> Unless he really wants to depend on it being True, not just defined.

[19:11] <Juerd> raschipi: itym true, not True. True is a specific kind of true.

[19:11] <Altreus> hmm that's a good question

[19:11] <AlexDaniel> m: my $a = 42; my $b = 100; $a R[and]= $b; say $a

[19:11] <camelia> rakudo-moar a847abe52: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot reverse the args of  because assignment operator operators are too fiddly␤at <tmp>:1␤------> 3my $a = 42; my $b = 100; $a R[and]=7⏏5 $b; say $a␤»

[19:11] <AlexDaniel> args of what?

[19:11] <Zoffix> mystery :)

[19:11] <Zoffix> m: sub postfix:<⬅> (\a) { a = $OUTER::_ }; my $a = 42; my $b = 0; $a⬅ with $b; dd $a

[19:11] <camelia> rakudo-moar a847abe52: OUTPUT: «Any $a = Any␤»

[19:12] <Zoffix> m: sub postfix:<⬅> (\a) { a = $OUTER::_ }; my $a = 42; my $b = 42; $a⬅ with $b; dd $a

[19:12] <camelia> rakudo-moar a847abe52: OUTPUT: «Any $a = Any␤»

[19:12] <Zoffix> hm

[19:12] <lizmat> m: sub infix:<=//> (\a, \b) { a = b with b }; my $a = 42; my $b; $a =// $b; dd $a

[19:12] <camelia> rakudo-moar a847abe52: OUTPUT: «Int $a = 42␤»

[19:12] <lizmat> m: sub infix:<=//> (\a, \b) { a = b with b }; my $a = 42; my $b = 666; $a =// $b; dd $a

[19:12] <camelia> rakudo-moar a847abe52: OUTPUT: «Int $a = 666␤»

[19:12] <AlexDaniel> is it ticketed?

[19:12] <AlexDaniel> that the string is empty in there

[19:12] <AlexDaniel> ‘args of  because’

[19:13] <Zoffix> m: my $a = 42; my $b = 666; $a R[//]= $b; dd $a

[19:13] <camelia> rakudo-moar a847abe52: OUTPUT: «===SORRY!===␤Cannot find method 'ann' on object of type NQPMu␤»

[19:13] <Zoffix> grr

[19:13] * AlexDaniel 💤

[19:13] <Zoffix> AlexDaniel: don't think so.

[19:14] <Zoffix> R#2093

[19:14] <synopsebot> R#2093 [open]: https://github.com/rakudo/rakudo/issues/2093 [LTA] Too-fiddly error missing op name

[19:16] <Zoffix> (and the explosion one was ticketed before R#1986 )

[19:16] <synopsebot> R#1986 [open]: https://github.com/rakudo/rakudo/issues/1986 [QAST] Explosion when `R`-metaopping `||`, `//`, `&&` meta-assigns

[19:16] <Altreus> what did you expect $OUTER::_ to resolve to?

[19:16] <Altreus> does with contextualise?

[19:16] <Zoffix> $_ of outer

[19:16] <Zoffix> m: sub foo { dd $OUTER::_ }; $_ = 42; foo

[19:16] <camelia> rakudo-moar a847abe52: OUTPUT: «Int $_ = 42␤»

[19:16] <Altreus> or is it because it doesn't tat it didn't work

[19:16] <Zoffix> Yeah

[19:16] <Zoffix> Yeah, with does set $_

[19:17] <Altreus> so I could do $a = $_ with $b

[19:17] <Zoffix> Yeah

[19:17] <Altreus> and at least it shortens $b

[19:17] <Altreus> cool

[19:17] <Zoffix> or `$b andthen $a = $_`

[19:17] <Zoffix> (same thing; just written left-to-right instead of right-to-left)

[19:18] <Altreus> %self{$prop} andthen $json{$prop} = .to-json

[19:18] <Altreus> no I don't know why one is a real hash and the other is in a scalar :)

[19:18] <Altreus> Perl5 thinking is leaking in

[19:21] <Zoffix> m: my %a = :42foo; my %b; %b<foo> ,= %a<foo>; dd %b

[19:21] <camelia> rakudo-moar a847abe52: OUTPUT: «Hash %b = {:foo($((), 42))}␤»

[19:22] <Zoffix> :(

[19:22] <Zoffix> m: my %a = :42foo; my %b; %b ,= %a<foo>:v; dd %b

[19:22] <camelia> rakudo-moar a847abe52: OUTPUT: «Odd number of elements found where hash initializer expected:␤Only saw: 42␤  in block <unit> at <tmp> line 1␤␤»

[19:22] <Zoffix> m: my %a = :42foo; my %b = :100meows; %b ,= %a<foo>:p; dd %b

[19:22] <camelia> rakudo-moar a847abe52: OUTPUT: «Hash %b = {:foo(42), :meows(100)}␤»

[19:22] <Zoffix> m: my %a = :42foos; my %b = :100meows; %b ,= %a<foo>:p; dd %b

[19:23] <camelia> rakudo-moar a847abe52: OUTPUT: «Died with X::Hash::Store::OddNumber␤  in block <unit> at <tmp> line 1␤␤»

[19:23] <Zoffix> m: my %a = :42foos; my %b = :100meows; %b ,= %a<foo>:vp; dd %b

[19:23] <camelia> rakudo-moar a847abe52: OUTPUT: «Unexpected named argument 'vp' passed␤  in block <unit> at <tmp> line 1␤␤»

[19:23] <Zoffix> m: my %a = :42foos; my %b = :100meows; %b ,= %a<foo>:v:p; dd %b

[19:23] <camelia> rakudo-moar a847abe52: OUTPUT: «Unsupported combination of adverbs (p v) passed to slice on %a␤  in block <unit> at <tmp> line 1␤␤»

[19:23] * Zoffix shakes fist

[19:23] <lizmat> Zoffix: why ?

[19:24] *** hythm_ left
[19:24] <lizmat> :v:p are mutually exclusive

[19:24] <Zoffix> 'cause I'm failing to do the right thing :)

[19:24] <Zoffix> m: my %a = :42foo; my %b = :100meows; %b ,= %(%a<foo>:kv); dd %b

[19:24] <camelia> rakudo-moar a847abe52: OUTPUT: «Hash %b = {:foo(42), :meows(100)}␤»

[19:24] <Zoffix> m: my %a = :42fooss; my %b = :100meows; %b ,= %(%a<foo>:kv); dd %b

[19:24] <camelia> rakudo-moar a847abe52: OUTPUT: «Hash %b = {:meows(100)}␤»

[19:24] <Zoffix> w00t

[19:24] <lizmat> although you could argue that they *could* be specified together

[19:24] <Zoffix> Altreus: ^ dunno if it's shorter or fits your usecase but it don't repeat stuff :)

[19:24] <lizmat> as :v could be considered a filter on existing keys

[19:25] <Zoffix> lizmat: Yeah, that's what I was expecting it to do, `:v` to filter on existing keys, but give me a pair like `:p` would

[19:25] <Zoffix> m: my %h; dd %h<foo>:k

[19:25] <camelia> rakudo-moar a847abe52: OUTPUT: «()␤»

[19:25] <Zoffix> m: my %h; dd %h<foo>:p

[19:25] <camelia> rakudo-moar a847abe52: OUTPUT: «()␤»

[19:25] <lizmat> Zoffix: please file a ticket for that

[19:25] <Zoffix> Well, it does work right, looks like

[19:26] <Zoffix> I mean, :p works like :k:p already

[19:26] <lizmat> ah, yes

[19:26] <Altreus> hmm

[19:26] <lizmat> hmmm

[19:26] <Altreus> no I'm hmming

[19:26] <Zoffix> I think the "odd number" error was from trying to stick a List as one thing

[19:26] <lizmat> it's been a while I was in that section of the code

[19:27] <Altreus> Zoffix: It's academically interesting but the topicalising of with/andthen basically solves it

[19:28] <Zoffix> :)

[19:28] <Altreus> does :kv also filter on existing things?

[19:28] <Zoffix> m: my %h; dd %h<foo>:kv

[19:28] <camelia> rakudo-moar a847abe52: OUTPUT: «()␤»

[19:28] <Zoffix> yup

[19:28] <Altreus> isn't that the same as :v:p then 🤔

[19:28] <lizmat> Altreus: no, :kv produces 2 values for each key/value

[19:29] <lizmat> :p produces 1 value, a Pair with the key/value

[19:29] <Altreus> oh yes

[19:29] <Altreus> but :p doesn't filter, I see

[19:29] <Zoffix> It does

[19:29] <Zoffix> All of these do filter

[19:29] <Altreus> :x

[19:30] <Altreus> what does this do then:

[19:30] <Altreus> m: my %a = :42fooss; my %b = :100meows; %b ,= $a<foo>:p; dd %b

[19:30] <camelia> rakudo-moar a847abe52: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared. Did you mean '%a'?␤at <tmp>:1␤------> 3%a = :42fooss; my %b = :100meows; %b ,= 7⏏5$a<foo>:p; dd %b␤»

[19:30] <Altreus> gosh

[19:30] <Altreus> m: my %a = :42fooss; my %b = :100meows; %b ,= %a<foo>:p; dd %b

[19:30] <camelia> rakudo-moar a847abe52: OUTPUT: «Died with X::Hash::Store::OddNumber␤  in block <unit> at <tmp> line 1␤␤»

[19:30] <Altreus> okay

[19:30] <Zoffix> Altreus: it does %b = %b, () with the empty list being the "odd" one out

[19:31] <Altreus> m: my %a = :42fooss; my %b = :100meows; %b ,= %a<foo>:kv; dd %b

[19:31] <camelia> rakudo-moar a847abe52: OUTPUT: «Died with X::Hash::Store::OddNumber␤  in block <unit> at <tmp> line 1␤␤»

[19:31] <Zoffix> m: my %a = :42fooss; my %b = :100meows; %b ,= |(%a<foo>:p); dd %b

[19:31] <camelia> rakudo-moar a847abe52: OUTPUT: «Hash %b = {:meows(100)}␤»

[19:31] <Zoffix> m: my %a = :42foo; my %b = :100meows; %b ,= |(%a<foo>:p); dd %b

[19:31] <camelia> rakudo-moar a847abe52: OUTPUT: «Hash %b = {:foo(42), :meows(100)}␤»

[19:31] <Zoffix> and this one slips it in, so you don't get the error

[19:31] <Zoffix> m: my %a = :42foo; my %b = :100meows; %b ,= %a<foo>:p; dd %b

[19:31] <camelia> rakudo-moar a847abe52: OUTPUT: «Hash %b = {:foo(42), :meows(100)}␤»

[19:32] <Zoffix> and this one works 'cause Pair is Associative so it gets the "combine the things" treatment like %a = %b, %c would

[19:32] <Zoffix> or is it a list of pairs

[19:32] <Zoffix> m: my %a = :42foo; dd %a<foo>:p.^name

[19:32] <camelia> rakudo-moar a847abe52: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3my %a = :42foo; dd %a<foo>:p.7⏏5^name␤»

[19:32] <Altreus> this actually helps for my other assignment, where I actually have a slice of more than one thing

[19:32] <Zoffix> m: my %a = :42foo; dd (%a<foo>:p).^name

[19:32] <camelia> rakudo-moar a847abe52: OUTPUT: «"Pair"␤»

[19:32] <Altreus> eh, no it doesn't, because I'm translating the keys too :(

[19:32] <Zoffix> nah, just a Pair

[19:33] * Zoffix &

[19:33] *** Zoffix left
[19:35] <Altreus> this is fun though

[19:35] <Altreus> written perl5 for so long I'm pretty sure of the fastest way of doing most things

[19:35] <Altreus> but perl6 offers many more shortcuts

[19:36] * masak .oO( more but slower shortcuts )

[19:36] <Juerd> Honestly, the shortcut that I like most is ^

[19:38] <masak> :)

[19:42] <timotimo> i like that there's shortcuts for all kinds of access to $_, like .<foo> and .[foo] and .method

[19:44] <SmokeMachine> m: $_ = 42; dd [:.abs] # I'd like this one...

[19:44] <camelia> rakudo-moar a847abe52: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus statement␤at <tmp>:1␤------> 3$_ = 42; dd [:7⏏5.abs] # I'd like this one...␤    expecting any of:␤        colon pair␤»

[19:44] <timotimo> interesting

[19:45] <SmokeMachine> m: $_ = 42; dd [:abs(.abs)]

[19:45] <camelia> rakudo-moar a847abe52: OUTPUT: «[:abs(42)]␤»

[19:46] <SmokeMachine> I could be writing less: https://github.com/FCO/EventSource/blob/master/test/Assinatura.pm6#L42

[19:47] <SmokeMachine> I think Zoffix already wrote something about that...

[19:47] <timotimo> colonpairoscopy, yeah

[19:52] *** Zoffix joined
[19:53] <Zoffix> SmokeMachine: I proposed-but-then-rejected it in R#1462

[19:53] <synopsebot> R#1462 [closed]: https://github.com/rakudo/rakudo/issues/1462 [RFC] [RFC] make `:.foo` mean `:foo(.foo)`, as in `:foo($_.foo)`

[19:53] <SmokeMachine> Zoffix: yes, I was reading that link...

[19:54] <Zoffix> m: say 42.:<->

[19:54] <camelia> rakudo-moar a847abe52: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Decimal point must be followed by digit␤at <tmp>:1␤------> 3say 42.7⏏5:<->␤»

[19:54] <Zoffix> Ambiguitity

[19:54] <Zoffix> m: say (42).:<->

[19:54] <camelia> rakudo-moar a847abe52: OUTPUT: «-42␤»

[19:55] <Zoffix> s/A.+/bug/;

[19:56] <Zoffix> R#2094

[19:56] <synopsebot> R#2094 [open]: https://github.com/rakudo/rakudo/issues/2094 [LTA] "decimal point must be followed..." error is too eager

[19:58] *** Ven` joined
[20:02] *** itaipu left
[20:03] *** Ven` left
[20:03] *** itaipu joined
[20:17] *** molaf joined
[20:24] *** ownTheLibs joined
[20:24] *** stee3 joined
[20:42] *** ruoso left
[20:52] <Altreus> OK I have a bunch of related classes. I'd like them to be able to refer to each other without introducing a circular dependency, and presumably I can do this without doing some C++ shenanigans like having one file that includes them all and I'm supposed to include that

[20:53] <Altreus> is this what need is for?

[20:53] <Altreus> I don't really understand the doc for need

[20:57] <raschipi> Altreus: the way to do it is the same as in C++

[20:57] <raschipi> Can't have circular depedencies like you can in Perl 5.

[21:00] <Altreus> I'm only doing 'use' so the types exist

[21:00] <Altreus> is there some way of saying "This type is going to exist", so I can use it as a type?

[21:00] <Altreus> this sounds like a step backwards, is all

[21:00] <Altreus> :/

[21:01] <raschipi> It comes as a cost of one-pass parsing, it's a trade-off

[21:02] <Altreus> well butts

[21:03] *** skids left
[21:03] <[Coke]> this is the point of the conversation where we typically suggest using roles instead of classes for parts of the design, I think.

[21:03] <timotimo> um

[21:03] <timotimo> but there is a way of saying "this type is going to exist"

[21:03] <timotimo> it's just stubbing the class

[21:04] <timotimo> like class Foobar { ... };

[21:04] <timotimo> literally containing three dots

[21:04] <Garland_g[m]> You can stub a class, and then the type exists, but you can't inherit from it until it is fully defined.

[21:04] <raschipi> And it needs to be defined in the current scope, not in some other file

[21:05] <Altreus> ya

[21:05] <timotimo> m: class Parent {...}; class Bloop is Parent { }; class Parent { has $.foo }

[21:05] <camelia> rakudo-moar a847abe52: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤'Bloop' cannot inherit from 'Parent' because 'Parent' isn't composed yet (maybe it is stubbed)␤at <tmp>:1␤»

[21:05] <timotimo> ah, mhm

[21:05] <Altreus> I'm not really sure I remember how to do it in C++ ;p

[21:05] <Altreus> I have one class Message and another class Channe;

[21:05] <Altreus> Channel

[21:05] <Altreus> Channel has @.messages and Message has $.channel

[21:06] <Altreus> So I'd like to provide the types to those

[21:06] <Altreus> I dunno whether I prefer monkeying around with extra files, or just not putting the constraints on

[21:06] *** jameslenz joined
[21:11] *** jameslenz left
[21:11] <Zoffix> Altreus: just don't put the constraint

[21:11] <Zoffix> timotimo: another limitation is the stub can't be in a separate file.

[21:12] <Altreus> in perl5 I'd be happy with that but I don't want to believe that there are any problems with perl6

[21:12] <Zoffix> Altreus: all languages suck :)

[21:12] <Altreus> ;_;

[21:12] <Zoffix> :D

[21:12] <Zoffix> Altreus: stick everything into one file :P

[21:13] <Zoffix> Or make a build script that sticks everything into one file. Rakudo compiler does it that way :)

[21:13] *** subroot left
[21:14] *** raschipi left
[21:14] <jnthn> Or extract a role and use it in the two places :)

[21:14] <Zoffix> :)

[21:16] <Zoffix> Actually, there's a hackish way to do a circular dependency

[21:17] <Altreus> with a .c and a .h :P

[21:18] <Zoffix> What's that?

[21:18] <Altreus> one with the interface and one with the implementation

[21:18] <Zoffix> Ah 

[21:18] <Altreus> which is basically a role and a class tbh

[21:18] <Zoffix> No, by writing the constraint on one side as `has $.bar where do require ::('Bar')` :)

[21:19] <Zoffix> e: BEGIN { given '/tmp/z4222/'.mkdir { .add('Foo.pm6').spurt: ｢class Foo { has $.bar where do require ::('Bar') }｣; .add('Bar.pm6').spurt: ｢use Foo; class Bar { has Foo $.foo }｣ }; use lib '/tmp/Foo'; use Bar; use Foo; Foo.new: :bar(Bar)

[21:19] <evalable6> Zoffix, rakudo-moar a847abe52: OUTPUT: «(exit code 1) ===SORRY!===␤Could not find Bar at line 1 in:␤    /tmp/Foo␤    /home/bisecta…»

[21:19] <evalable6> Zoffix, Full output: https://gist.github.com/6433f04f8794be1a8ac5b9cb3cc9b93a

[21:19] <Zoffix> Dunno why the bot don't like it, but works locally :)

[21:19] <Altreus> probably because use looks for a file? :s

[21:19] <tbrowder_> [Coke]: please see and comment on my proposal in doc issue GH #2185.

[21:19] <Zoffix> Altreus: yeah, but I create those files in begin

[21:20] <Altreus> oh yes hacky indeed

[21:20] <Altreus> I think I'll pass

[21:20] <Zoffix> No, the file creation isn't the hack. That's just for the bot

[21:20] <Altreus> the constraints are documentation, not compilation

[21:20] <Zoffix> The `has $.bar where do require ::('Bar')` is the hack

[21:21] <Zoffix> 'cause you require a module on each typecheck :P

[21:21] <Zoffix> .oO( once do require … )

[21:21] <Altreus> surely it is still a circular dependency because that module requires me!

[21:21] <Zoffix> Altreus: yeah, it can knock itself out and require. The `require` stop doesn't involving requiring that module back

[21:22] <Zoffix> s/stop/step/;

[21:22] <Zoffix> The require-back step only happens during typecheck (well, if you add `once`, presumably just the first typecheck)

[21:24] *** robertle left
[21:25] <Zoffix> Ah, I messed up braces that's why

[21:25] <Zoffix> e: BEGIN { given '/tmp/z4223/'.IO.mkdir { .add('Foo.pm6').spurt: ｢class Foo { has $.bar where do require ::('Bar') }｣; .add('Bar.pm6').spurt: ｢use Foo; class Bar { has Foo $.foo }｣ } }; use lib '/tmp/z4223'; use Bar; use Foo; Foo.new: :bar(Bar)

[21:25] <evalable6> Zoffix, rakudo-moar a847abe52: OUTPUT: «»

[21:25] <Zoffix> e: BEGIN { given '/tmp/z4223/'.IO.mkdir { .add('Foo.pm6').spurt: ｢class Foo { has $.bar where do require ::('Bar') }｣; .add('Bar.pm6').spurt: ｢use Foo; class Bar { has Foo $.foo }｣ } }; use lib '/tmp/z4223'; use Bar; use Foo; Foo.new: :bar(42)

[21:25] <evalable6> Zoffix, rakudo-moar a847abe52: OUTPUT: «(exit code 1) Type check failed in assignment to $!bar; expected <anon> but got Int (42)␤  in block <unit> at /tmp/mLzVP7GOHX line 1␤␤»

[21:26] <Zoffix> works :)

[21:26] <Zoffix> the challenge is for this to be non-hacky, you need to keep sort of state inside the `where`, but that's not supported.

[21:27] <Zoffix> (keep state so that you load Bar just once)

[21:27] <Zoffix> oh

[21:27] <Zoffix> oh nm

[21:28] <Altreus> going with "remove the constraints"

[21:29] <Altreus> :D

[21:31] <Zoffix> :D

[21:31] <tbrowder_> .ask [Coke] at your convenience please look at my last comment in doc issue GH #2185

[21:31] <yoleaux> tbrowder_: I'll pass your message to [Coke].

[21:32] <[Coke]> .

[21:32] <yoleaux> 21:31Z <tbrowder_> [Coke]: at your convenience please look at my last comment in doc issue GH #2185

[21:32] <[Coke]> tbrowder_: I see those alerts from GH. you don't have to also ping me here, btw.

[21:33] <[Coke]> but since we are both here: those comments seem to cover a lot more ground than my 2 (now 3) bullet points.

[21:33] <[Coke]> I also commented on the ticket.

[21:34] *** Zoffix left
[21:37] *** jabits joined
[21:40] *** HaraldJoerg left
[21:49] <tbrowder_> i don’t think that’s too much ground since they all logically fit together. yr mod to htmlify.p6 may have to change dirs but maintenance should be much improved imo.

[21:53] *** jabits left
[21:59] <timotimo> what kind of chart would y'all use to display distances between time points?

[22:02] *** rindolf left
[22:05] *** psychoslave left
[22:11] *** ChoHag left
[22:35] <warriors> well it depends, if you have a set of two points, and you want to compare the sets, likes which set of two points have the biggest or smallest diff, i would use a simple bar chart 

[22:36] <timotimo> this is about showing when the individual GC runs start

[22:36] <timotimo> so i have a series of points with ever-increasing values, i.e. a line graph would usually tend to look like a diagonal

[22:38] *** fbynite joined
[22:39] <warriors> a line chart make sense, especial if you want to highlight the  upward diagonal pattern

[22:40] <warriors> i think bar chart is more to drive attention to individual bar, like highest  or lowest barn ... line charts are better to focus on the pattern of movement 

[22:40] *** Zoffix joined
[22:41] *** Zoffix left
[22:41] <timotimo> it'll take me a long time to try this out ... because the cat's between keyboard and display again, demanding belly rubs and looking really cute

[22:41] <warriors> :)

[22:41] <warriors> good luck

[22:41] <timotimo> thanks

[22:41] *** MasterDuke joined
[22:43] <donpdonp> META6.json: ... "depends" : ["Cro::HTTP", "URI"]; zef install . -> All candidates are currently installed; perl6> use URI; -> Could not find URI at line 1 in:

[22:43] <donpdonp> what am I missing?

[22:43] <timotimo> unlikely, but ... more than one perl6 binary involved?

[22:44] <donpdonp> im pretty sure its only 1

[22:44] <donpdonp> $ zef -i list|grep URI -> no matches. hmmm.

[22:44] <timotimo> it could be that URI doesn't actually ahve a "provides" for a module named "URI"

[22:44] *** lizmat left
[22:44] <timotimo> also, perhaps you want "zef install --deps-only ."

[22:45] <donpdonp> --deps-only also says everyhign is installed

[22:46] <timotimo> and "zef install URI" does what?

[22:46] <donpdonp> $ zef -i list|grep Cro -> Cro::Core:ver<0.7.6>...

[22:46] <donpdonp> i'll try it

[22:46] <donpdonp> ===> Installing: URI:ver<.0.1.4>

[22:47] <donpdonp> $ zef -i list|grep URI => URI:ver<.0.1.4>

[22:47] <donpdonp> so whats wrong with META6.json

[22:48] <timotimo> not sure. perhaps a thing regarding "you already installed this name/auth/version before, so i won't do anything"

[22:53] <donpdonp> hmm anyone have a url parser they like? URI doesnt seem to do anything

[22:56] <benjikun> donpdonp: Does it just not install?

[22:57] <benjikun> if so, have you tried adding `--force-install`?

[22:57] *** sena_kun left
[22:57] <donpdonp> benjikun: its installed 

[22:58] <donpdonp> URI.new.parse("https://something.com/") => nil

[22:59] *** hoelzro left
[22:59] *** huggable left
[23:00] *** zoosha_ left
[23:00] *** buggable left
[23:02] <geekosaur> parse doesn't seem to produce anything; you're supposed to apply methods to the URI object?

[23:02] <geekosaur> it might be argued that it should return self, but currently it doesn't

[23:02] <benjikun> donpdonp: `URI.new('https://perl6.org/');`

[23:03] <geekosaur> that's probably the most straightforward way to fix it, yes

[23:03] <benjikun> remove `.parse`, that's all

[23:04] <donpdonp> i see. thx. so how would i get at say, the 'path' part of the url

[23:04] <benjikun> `$url.path`

[23:04] <geekosaur> save the object, use $obj.path

[23:04] <donpdonp> got it. thx all.

[23:04] <benjikun> :)

[23:06] *** jameslenz joined
[23:10] *** Gex_ joined
[23:11] *** jameslenz left
[23:12] <Gex_> Hi everyone

[23:13] *** Gex_ left
[23:16] *** Chri joined
[23:27] *** Chri left
[23:31] *** pecastro left
[23:33] *** lizmat joined
[23:33] *** pmurias left
[23:37] <Kaiepi> hm

[23:37] <Kaiepi> i can't build rakudo

[23:38] *** kerframil left
[23:40] *** xyzq joined
[23:40] *** guestorino joined
[23:40] <xyzq> howdy everyone

[23:43] <TimToady> everyone isn't here, apparently

[23:44] <guestorino> haha, nice

[23:44] <Kaiepi> this is what happens when i try to build rakudo https://hastebin.com/emicofoboj.sql

[23:44] <Kaiepi> i'll try again genning moarvm and nqp

[23:46] *** xyzq left
[23:47] *** Chrs_ joined
[23:47] <Kaiepi> also about last night i don't get to the mental hospital for about another week since i need a doctor's notice and canada's mental health care system absolutely rules but i'll try to contribute in the meantime

[23:48] *** guestorino left
[23:49] <TimToady> Kaiepi: well, hang in there, and cut yourself all the slack you need

[23:49] *** go|dfish joined
[23:50] <Kaiepi> nope, build still fails

[23:50] <Kaiepi> i'll make an issue

[23:50] <Kaiepi> and thanks TimToady 

[23:50] *** jcallen joined
[23:52] *** Chrs_ left
[23:54] *** hobbs joined
[23:54] *** hobbs left
[23:54] *** hobbs joined
[23:55] *** jeezy` joined
[23:55] *** fbynite left
[23:58] *** jeezy` left
[23:59] *** buggable joined
[23:59] *** ChanServ sets mode: +v buggable

[23:59] *** ZofBot joined
[23:59] *** ChanServ sets mode: +v ZofBot

