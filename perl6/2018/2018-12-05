[00:06] *** yqt left
[00:10] <Geth> ¬¶ doc: e6a5ab4e6a | (Tom Browder)++ (committed using GitHub Web editor) | doc/Type/Encoding/Registry.pod6

[00:10] <Geth> ¬¶ doc: fix grammar

[00:10] <synopsebot_> Link: https://doc.perl6.org/type/Encoding::Registry

[00:10] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/e6a5ab4e6a

[00:12] *** pecastro left
[00:18] *** w_richard_w joined
[00:19] *** p6bannerbot sets mode: +v w_richard_w

[00:21] *** rindolf left
[00:25] *** Kaiepi left
[00:26] *** daxim left
[00:28] *** ufobat left
[00:36] *** daxim joined
[00:37] *** p6bannerbot sets mode: +v daxim

[00:38] *** clarkema left
[00:38] *** clarkema_ is now known as clarkema

[00:38] *** clarkema left
[00:49] <timotimo> lichtkind: prompt has to flush stdout because it doesn't print a newline after printing out the "question" you supply

[00:50] <timotimo> and terminals or whatever might buffer or wait for a newline before displaying anything

[00:56] <lichtkind> timotimo, so script has not enough rights?

[00:57] <timotimo> no

[00:57] <timotimo> it might not be connected to a tty/pty

[00:59] <lichtkind> but it is

[00:59] <timotimo> you can check what strace says

[01:01] *** kurahaupo_ joined
[01:01] <lichtkind> im on mac

[01:01] <timotimo> there's an strace equivalent, i don't remember what it's called

[01:01] *** p6bannerbot sets mode: +v kurahaupo_

[01:04] *** kurahaupo left
[01:04] <lichtkind> timotimo, thank you , i think has to do how i call it from a bash script because otherwise it works

[01:08] *** atweiden-air joined
[01:09] *** p6bannerbot sets mode: +v atweiden-air

[01:10] <atweiden-air> looking 4 collab on https://github.com/Homebrew/homebrew-core/pull/34785

[01:10] <atweiden-air> needed: a test case for the `moar` and `nqp` binaries

[01:16] *** Kaiepi joined
[01:17] *** p6bannerbot sets mode: +v Kaiepi

[01:17] <Kaiepi> m: my Promise $p .= start({ Promise.start({ 0 }) }); say await $p

[01:17] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´Promise.new(scheduler => ThreadPoolScheduler.new(initial_threads => 0, max_threads => 64, uncaught_handler => Callable), status => PromiseStatus::Kept)‚ê§¬ª

[01:18] <Kaiepi> huh that's different from how node handles promises

[01:18] <Kaiepi> m: my Promise $p .= start({ Promise.start({ 0 }) }); say await await $p

[01:18] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´0‚ê§¬ª

[01:18] <timotimo>  await will keep resolving until nothing resolvable is left?

[01:18] <Kaiepi> yeah

[01:33] <atweiden-air> is there such thing as an nqp one-liner?

[01:36] <timotimo> yeah, you can nqp-m -e '...'

[01:36] <timotimo> or what do you mean?

[01:38] <atweiden-air> yes, that is what i meant

[01:41] *** Sgeo joined
[01:41] *** p6bannerbot sets mode: +v Sgeo

[01:43] *** Sgeo__ left
[01:47] *** MasterDuke joined
[01:47] *** p6bannerbot sets mode: +v MasterDuke

[01:47] *** MasterDuke left
[01:47] *** MasterDuke joined
[01:47] *** herbert.freenode.net sets mode: +v MasterDuke

[01:47] *** p6bannerbot sets mode: +v MasterDuke

[01:49] <atweiden-air> timotimo: is there such thing as a `moar -e` one liner?

[01:49] <atweiden-air> just wanting to see if i can test the functionality of moar on the commandline for macos homebre

[01:49] <timotimo> no, moarvm has no text-based input format

[01:50] <timotimo> if you have zsh, you can "just"‚Ñ¢ put a looooooooong string in the commandline and have zsh replace it with a filename that contains the string

[01:50] <timotimo> and then have a crapton of escape sequences for unprintable bytes

[01:50] <atweiden-air> seems good imo

[01:51] *** mcmillhj joined
[01:51] <atweiden-air> presumably it can do `moar *.moarvm` ?

[01:51] *** p6bannerbot sets mode: +v mcmillhj

[01:52] <timotimo> it only takes a single moarvm file on the commandline

[01:52] *** MasterDuke left
[01:52] <atweiden-air> is there a bashism for generating a makeshift helloworld.moarvm ?

[01:52] <timotimo> you'll have a "fun" time building a working payload

[01:53] <mcmillhj> What would be the correct way to group a string by letter? I have made a few attempts using `classify` but haven't made much headway 

[01:53] <timotimo> especially if you don't want it to require any other .moarvm files

[01:53] <atweiden-air> well, if it's too much fun, then i can let the homebrew maintainers know i suppose...

[01:54] <mcmillhj> specifically if I had 'aabb' or (a a b b) I think would want back ((a a) (b b))

[01:54] <atweiden-air> mcmillhj: maybe comb

[01:54] <timotimo> you'll probably get far by only constructing QAST from either a perl6 or nqp script and spitting that out

[01:55] <timotimo> mcmillhj: are the letters "in order" when they come in?

[01:55] <mcmillhj> timotimo: I was planning to sort them to support the effort of grouping 

[01:55] <timotimo> m: say "hello how are you today".comb.Bag.kxxv

[01:55] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´(u h h e e l l t o o o o y y d         a a w r)‚ê§¬ª

[01:55] <timotimo> daawr

[01:56] <mcmillhj> oh wow, comb.Bag does exactly what I want if the string is pre-sorted

[01:56] <timotimo> shouldn't make a differenwe whether the string is pre-sorted or not

[01:57] <mcmillhj> timotimo: my mistake, I didnt test the other case. Thanks for the help! 

[01:57] <timotimo> no problem!

[01:58] <mcmillhj>  

[02:00] <sacomo> hi all

[02:00] <timotimo> greetings sacomo 

[02:01] <holyghost> hello

[02:02] <sacomo> are there any tips to speed up precomp? 

[02:02] <sacomo> hi timotimo, holyghost

[02:02] <timotimo> put more stuff in precompiled modules :)

[02:03] <sacomo> yeah

[02:03] <timotimo> if you're extra fancy, have a script that uses modules "in the right order" in parallel

[02:03] <sacomo> hmm

[02:04] <timotimo> since a module can change what the next line "means", we can't go off compiling a bunch of modules we see "in the future" in the code

[02:05] <holyghost> true

[02:05] <sacomo> is there anyway to flag a module to exclude it from recompiling?

[02:05] <timotimo> yeah, "no precompilation" ought to do it

[02:05] <timotimo> with a ; at the end, too

[02:05] <sacomo> ah, in the module? is there a way to set an envvar?

[02:05] *** rouking joined
[02:06] *** MasterDuke joined
[02:06] *** p6bannerbot sets mode: +v MasterDuke

[02:06] *** MasterDuke left
[02:06] *** MasterDuke joined
[02:06] *** herbert.freenode.net sets mode: +v MasterDuke

[02:06] *** p6bannerbot sets mode: +v MasterDuke

[02:06] *** p6bannerbot sets mode: +v rouking

[02:06] <rouking> It seems like the behavior of WhateverCode in array subscripts is inconsistent, for example `[1, 2, 3, 4][*-1]` yields `4`, implying `*` is the length of the array

[02:07] <rouking> but  `[1, 2, 3, 4][1..^*]` yields only `(2 3)`, implying `*` is the last valid subscript (i.e. one less than the length)

[02:08] <timotimo> the .. operator actually noms the * and it won't turn into a whatevercode

[02:08] <rouking> hmmm

[02:09] <timotimo> so you'll have to use a block in this case

[02:09] <holyghost> rouking: also, ^ excludes, *

[02:10] <timotimo> holyghost: except ..* is to infinity, which excluding it doesn't make much of a difference

[02:10] <holyghost> no,

[02:10] <rouking> Yet it seems to come back from the end of the array, since it only yields 2 and 3

[02:10] <timotimo> oh? let me re-verify what i've been claiming

[02:11] <rouking> I don't know, maybe there is magic afoot

[02:11] <timotimo> huh

[02:11] <holyghost> you just yield an array of index 1..^.elems

[02:11] <rouking> Which should get the last element

[02:11] <timotimo> i totally wronged!

[02:11] <holyghost> indeed

[02:11] <timotimo> sorry about that, .. doesn't actually nom the whatever star

[02:11] <holyghost> it's a perl range

[02:11] <holyghost> online

[02:12] <timotimo> sorry, hold on again

[02:12] <timotimo> huh.

[02:13] <rouking> This is actually a little oddity I noticed really early on, but I figured I was just overlooking some really smart decision by the language designers :^)

[02:13] <rouking> for some reason, I'm still on 2018.04

[02:13] <rouking> let me grab 2018.10 and see if it's the same

[02:14] <holyghost> s/perl range/perl6 range

[02:14] *** w_richard_w left
[02:15] *** tmtvl left
[02:16] <rouking> p6: [1, 2, 3, 4][1..^*]

[02:16] <camelia> rakudo-moar 194c84b91: ( no output )

[02:16] <rouking> p6: say [1, 2, 3, 4][1..^*]

[02:16] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´(2 3)‚ê§¬ª

[02:17] <rouking> p6: [1, 2, 3, 4][{ say *; 1 }]

[02:17] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´*‚ê§¬ª

[02:17] *** Cabanoss- left
[02:17] <rouking> p6: [1, 2, 3, 4][{ say $_; 1 }]

[02:17] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´4‚ê§¬ª

[02:17] <timotimo> if you have a block, * won't get an argument; also, * won't curry subroutine calls

[02:17] <rouking> Yeah, had a brainfart there

[02:18] <timotimo> p6: say [1, 2, 3, 4][{ 1 }]

[02:18] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´2‚ê§¬ª

[02:18] <timotimo> p6: say [1, 2, 3, 4][{ say $_; 1 }]

[02:18] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´4‚ê§2‚ê§¬ª

[02:18] *** Cabanossi joined
[02:18] <timotimo> ah, there was no "say" outside

[02:18] <timotimo> i was wondering wht it'd get a 4 out of the 2nd slot

[02:19] <rouking> So, sure enough, it seems it's the length, which would imply 1..^* is 1..^4, aka 1..3, and therefore it should get the whole tail of the list

[02:19] *** p6bannerbot sets mode: +v Cabanossi

[02:19] <rouking> Yet it doesn't

[02:19] <timotimo> so, here's what confuses me

[02:20] <timotimo> m: say 1..*; say 1..^*; say 1..Inf; say 1..^Inf;

[02:20] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´1..Inf‚ê§1..^Inf‚ê§1..Inf‚ê§1..^Inf‚ê§¬ª

[02:20] <timotimo> those are the same

[02:21] <holyghost> now a list should return it's inifinite * value

[02:21] <rouking> Yep, I suppose since the range operator assumes a WhateverCode on the rhs means go to infinity

[02:21] <timotimo> * itself isn't actually a whatevercode by itself

[02:22] <rouking> Oh, really?

[02:22] <rouking> What is it

[02:22] <sacomo> timotimo, thanks, 'no precompilation;' is helping.

[02:22] <timotimo> m: say [1, 2, 3, 4][1..^(*+0)]

[02:22] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´(2 3 4)‚ê§¬ª

[02:22] <timotimo> m: say [1, 2, 3, 4][1..^*]

[02:22] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´(2 3)‚ê§¬ª

[02:22] <timotimo> m: say [1, 2, 3, 4][1..^(*)]

[02:22] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´(2 3)‚ê§¬ª

[02:22] <timotimo> m: say [1, 2, 3, 4][1..(^*)]

[02:22] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´Range objects are not valid endpoints for Ranges‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[02:23] <rouking> Oh boy, now that's an oddity

[02:23] <mcmillhj> m: my @counts = "aabb\nbbdd".words.map({.comb.Bag})>>.values; say @counts>>.grep({ $_ == 2 }).elems; say @counts>>.grep({ $_ == 3 }).elems;

[02:23] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´2‚ê§The iterator of this Seq is already in use/consumed by another Seq‚ê§(you might solve this by adding .cache on usages of the Seq, or‚ê§by assigning the Seq into an array)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[02:23] <timotimo> well, this does show me that ..^ actually does not WhateverCurry, even in postcircumfix:<[ ]>

[02:23] <mcmillhj> ^ which Seq is being referred to above? @counts is an Array if I understand correctly 

[02:24] <timotimo> @counts is an array of seqs, i'd expect

[02:24] <rouking> So forcing it to be a WhateverCode with that identity addition makes the whole thing work as expected

[02:24] <timotimo> m: my @counts = "aabb\nbbdd".words.map({.comb.Bag})>>.values; say @counts.perl

[02:24] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´[(2, 2).Seq, (2, 2).Seq]‚ê§¬ª

[02:24] <timotimo> rouking: yeah, but why would 1..^Inf and 1..^* be different

[02:25] <mcmillhj> ooh, so to use each of those seqs again they need to be individually cached? 

[02:25] <rouking> So what in the world is `*` on its own in an expression like `1..^*`

[02:25] <timotimo> mcmillhj: indeed

[02:25] <timotimo> rouking: it's just Whatever

[02:25] <timotimo> m: say Whatever; say *

[02:25] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´(Whatever)‚ê§*‚ê§¬ª

[02:25] <timotimo> Whatever is the type, * is an instance of that type

[02:25] <rouking> Ah

[02:25] <timotimo> whatever currying, on the other hand, is a compile-time syntaxt hing

[02:26] <rouking> Yes, that is very odd

[02:26] <timotimo> m: say [1, 2, 3, 4][1..^*]; say [1, 2, 3, 4][1..^Inf]

[02:26] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´(2 3)‚ê§(2 3 4)‚ê§¬ª

[02:26] <timotimo> ^- i have no explanation for how this happens, but i haven't looked at code at all yet

[02:27] <rouking> Since putting 1..^* in the REPL spits out 1..^Inf

[02:27] <rouking> The .gist must be oversimplifying

[02:29] <timotimo> a whole bunch of different methods on it return the same stuff, though

[02:31] <timotimo> and the attributes all seem to have the same stuff in them, too

[02:31] <rouking> Then is its location in a subscript doing something funky?

[02:32] <rouking> But you'd think it would have different behaviour were that the case‚Ä¶

[02:35] <rouking> I think you already determined this, but a Range *will* eat a Whatever, but not a WhateverCode

[02:36] <timotimo> yeah, if there's already a whatevercode, it will curry the .. along with it

[02:39] <holyghost> WhateverCode is probably like a smalltalk block

[02:40] <holyghost> you overload procedures with it

[02:40] <holyghost> literally and non-literally

[02:41] *** mcmillhj left
[03:06] <SmokeMachine> m: class A is Hash { has $.a = 0 }; say A.new.a # is this a bug?

[03:06] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´(Any)‚ê§¬ª

[03:08] <SmokeMachine> m: class A is Hash { has $.a = 0 }; say A.new(:1a).a

[03:08] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´(Any)‚ê§¬ª

[03:08] <SmokeMachine> m: class A { has $.a = 0 }; say A.new(:1a).a

[03:08] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´1‚ê§¬ª

[03:08] <SmokeMachine> why hash is doing that?

[03:08] <SmokeMachine> m: class A does Associative { has $.a = 0 }; say A.new(:1a).a

[03:08] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´1‚ê§¬ª

[03:10] <timotimo> might be providing a custom method new

[03:10] <timotimo> s: Hash, "new", \()

[03:10] <SourceBaby> timotimo, Sauce is at https://github.com/rakudo/rakudo/blob/194c84b91/src/core/Map.pm6#L48

[03:10] <timotimo> yup, no concern for named arguments at all

[03:11] <SmokeMachine> :)

[03:11] <SmokeMachine> timotimo: but the default value shouldn't work?

[03:14] <timotimo> not if it doesn't call bless or BUILDALL

[03:16] <SmokeMachine> timotimo: it makes sense

[03:22] * timotimo goes to bed

[03:22] <timotimo> seeya!

[03:23] *** graphene left
[03:24] *** graphene joined
[03:24] <SmokeMachine> bye!

[03:25] *** p6bannerbot sets mode: +v graphene

[03:30] *** atweiden-air left
[03:36] *** lucasb left
[04:36] *** releasable6 left
[04:36] *** squashable6 left
[04:36] *** undersightable6 left
[04:36] *** reportable6 left
[04:36] *** benchable6 left
[04:36] *** statisfiable6 left
[04:36] *** evalable6 left
[04:36] *** committable6 left
[04:36] *** bisectable6 left
[04:36] *** shareable6 left
[04:37] *** shareable6 joined
[04:38] *** evalable6 joined
[04:38] *** p6bannerbot sets mode: +v shareable6

[04:38] *** bisectable6 joined
[04:38] *** ChanServ sets mode: +v bisectable6

[04:38] *** benchable6 joined
[04:38] *** unicodable6 joined
[04:38] *** ChanServ sets mode: +v unicodable6

[04:38] *** committable6 joined
[04:38] *** ChanServ sets mode: +v committable6

[04:38] *** quotable6 joined
[04:38] *** p6bannerbot sets mode: +v evalable6

[04:39] *** bloatable6 joined
[04:39] *** p6bannerbot sets mode: +v bisectable6

[04:39] *** p6bannerbot sets mode: +v benchable6

[04:39] *** p6bannerbot sets mode: +v unicodable6

[04:39] *** p6bannerbot sets mode: +v committable6

[04:39] *** p6bannerbot sets mode: +v quotable6

[04:39] *** p6bannerbot sets mode: +v bloatable6

[04:40] *** statisfiable6 joined
[04:40] *** ChanServ sets mode: +v statisfiable6

[04:40] *** coverable6 joined
[04:40] *** p6bannerbot sets mode: +v statisfiable6

[04:41] *** greppable6 joined
[04:41] *** p6bannerbot sets mode: +v coverable6

[04:41] <holyghost> lol

[04:41] *** reportable6 joined
[04:41] *** ChanServ sets mode: +v reportable6

[04:41] *** releasable6 joined
[04:41] *** squashable6 joined
[04:41] *** ChanServ sets mode: +v squashable6

[04:41] *** p6bannerbot sets mode: +v greppable6

[04:41] *** undersightable6 joined
[04:41] *** nativecallable6 joined
[04:41] *** ChanServ sets mode: +v nativecallable6

[04:42] *** p6bannerbot sets mode: +v reportable6

[04:42] *** p6bannerbot sets mode: +v releasable6

[04:42] *** p6bannerbot sets mode: +v squashable6

[04:42] *** p6bannerbot sets mode: +v undersightable6

[04:42] *** p6bannerbot sets mode: +v nativecallable6

[04:43] <holyghost> holyghost-able :-)

[04:47] *** Cabanoss- joined
[04:48] *** sauvin joined
[04:48] *** p6bannerbot sets mode: +v sauvin

[04:48] *** p6bannerbot sets mode: +v Cabanoss-

[04:48] *** Cabanossi left
[04:57] *** abraxxa joined
[04:57] *** p6bannerbot sets mode: +v abraxxa

[05:01] *** abraxxa left
[05:07] *** jeek left
[05:15] *** abraxxa joined
[05:16] *** p6bannerbot sets mode: +v abraxxa

[05:27] <Geth> ¬¶ doc: finanalyst++ created pull request #2493: Change absolute urls to relative urls

[05:27] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2493

[05:32] *** Sgeo_ joined
[05:33] *** p6bannerbot sets mode: +v Sgeo_

[05:33] <buggable> New CPAN upload: DateTime-Monotonic-0.0.2.tar.gz by JMASLAK http://modules.perl6.org/dist/DateTime::Monotonic:cpan:JMASLAK

[05:35] *** Sgeo left
[05:45] *** curan joined
[05:45] *** p6bannerbot sets mode: +v curan

[06:01] *** molaf joined
[06:01] *** p6bannerbot sets mode: +v molaf

[06:12] *** abraxxa left
[06:16] *** jmerelo joined
[06:16] *** curan left
[06:16] *** curan joined
[06:16] *** p6bannerbot sets mode: +v curan

[06:16] *** p6bannerbot sets mode: +v jmerelo

[06:22] <Geth> ¬¶ doc/master: 4 commits pushed by (Richard Hainsworth)++, finanalyst++, (Juan Juli√°n Merelo Guerv√≥s)++

[06:22] <Geth> ¬¶ doc/master: bf2b444528 | Merge pull request #3 from perl6/master

[06:22] <Geth> ¬¶ doc/master: 4dc0876b33 | Merge pull request #4 from perl6/master

[06:22] <Geth> ¬¶ doc/master: 6e7e15724b | remove hard urls

[06:22] <Geth> ¬¶ doc/master: ee66715cb1 | Merge pull request #2493 from finanalyst/master

[06:22] <Geth> ¬¶ doc/master: review: https://github.com/perl6/doc/compare/e6a5ab4e6a9f...ee66715cb192

[06:25] <jmerelo> There's a free slot on the advent calendar next 9th: https://github.com/perl6/advent/blob/master/perl6advent-2018/schedule Anyone wants to grab it?

[06:35] *** larkenx joined
[06:35] *** p6bannerbot sets mode: +v larkenx

[06:35] <larkenx> hello

[06:37] *** larkenx left
[06:43] <buggable> New CPAN upload: DateTime-Monotonic-0.0.3.tar.gz by JMASLAK http://modules.perl6.org/dist/DateTime::Monotonic:cpan:JMASLAK

[07:01] <holyghost> hi

[07:03] <buggable> New CPAN upload: DateTime-Monotonic-0.0.4.tar.gz by JMASLAK http://modules.perl6.org/dist/DateTime::Monotonic:cpan:JMASLAK

[07:12] *** ufobat joined
[07:13] *** p6bannerbot sets mode: +v ufobat

[07:24] *** ufobat left
[07:36] *** robertle_ joined
[07:37] *** p6bannerbot sets mode: +v robertle_

[07:39] *** jmerelo left
[07:41] *** abraxxa joined
[07:41] *** domidumont joined
[07:42] *** p6bannerbot sets mode: +v abraxxa

[07:42] *** p6bannerbot sets mode: +v domidumont

[07:43] *** Macro left
[07:46] *** Manifest0 left
[07:48] *** Manifest0 joined
[07:49] *** p6bannerbot sets mode: +v Manifest0

[07:53] *** oftl left
[07:56] *** Manifest0 left
[07:57] *** Manifest0 joined
[07:58] *** p6bannerbot sets mode: +v Manifest0

[08:38] *** Ven`` joined
[08:38] *** p6bannerbot sets mode: +v Ven``

[08:46] *** dakkar joined
[08:46] *** p6bannerbot sets mode: +v dakkar

[08:50] *** MasterDuke left
[08:55] *** rindolf joined
[08:56] *** p6bannerbot sets mode: +v rindolf

[09:05] *** scimon joined
[09:06] *** p6bannerbot sets mode: +v scimon

[09:20] *** imcsk8 left
[09:27] <masak> moritz: no, there are two separate actions needed: (a) scheduling the post at a certain datetime, and (b) hitting "Schedule" (not "Publish")

[09:28] <masak> moritz: if one does (a) but not (b) (IME) nothing happens and the deadline makes a whooshing sound

[09:28] *** imcsk8 joined
[09:29] *** p6bannerbot sets mode: +v imcsk8

[09:30] <masak> I'm such an old geezer in this community, I can re-read most advent posts I wrote in pasts years and be surprised and delighted someone who shares my name could write so eloquently

[09:30] <masak> I wish I could, too :P

[09:30] <moritz> masak: there are two actions necessary, correct

[09:30] <moritz> though the "Publish" button automatically changes to "Schedule" when I select a data, that's the only point I was trying to make :)

[09:31] <masak> aggreed on your point

[09:31] <masak> fat lot of good that does me if I miss the button, though :P

[09:31] *** tadzik joined
[09:31] <masak> I mean, I probably did in about 117 of the 119 universes parallel to ours

[09:32] <moritz> > Some older languages (such as Forth) actually have different syntaxes for these two usages, and I love them for it.

[09:32] *** p6bannerbot sets mode: +v tadzik

[09:32] <moritz> I still write the odd shell script or Makefile occasionally, where the distinction has survived until today

[09:32] <masak> aye

[09:32] <masak> and bash, too, when you think about it

[09:33] <masak> oh, you write "shell script"

[09:33] <tadzik> oh no, I updated my irc client and now your nicknames have different colours than they used to

[09:33] <tadzik> I don't think I'll ever recover this week

[09:33] <masak> sorry -- reading comprehension also seems to disappear with age

[09:33] <masak> tadzik: wait -- what color did I use to have? was it nice?

[09:33] <tadzik> masak: it was yellow, now you're blue (da bu di da bu da)

[09:35] *** mscha joined
[09:35] *** p6bannerbot sets mode: +v mscha

[09:35] <masak> I think I'd rather be blue, to be honest

[09:35] *** zakharyas joined
[09:35] <masak> sorry, I meant to show you some sympathy. but then you told me I used ta be yellow :P

[09:35] <mscha> m: 'hello' ~~ /.$0/;  # Trying to match "ll"

[09:35] <camelia> rakudo-moar 194c84b91: ( no output )

[09:36] <mscha> Dumb question: how do I do this?

[09:36] *** p6bannerbot sets mode: +v zakharyas

[09:36] <masak> m: 'hello' ~~ /(.)$0/

[09:36] <camelia> rakudo-moar 194c84b91: ( no output )

[09:36] <masak> m: 'hello' ~~ /(.)$0/; say ~$/

[09:36] <mscha> Yeah, that'

[09:36] <camelia> rakudo-moar 194c84b91: OUTPUT: ¬´ll‚ê§¬ª

[09:36] <mscha> 's what I meant, but doesn't work.

[09:36] <masak> mscha: $0 and pals get capture groups, so you need to capture

[09:36] <tadzik> masak: I managed to change the colour pallete to adjust your blue to my liking \o/

[09:36] <masak> mscha: it does work, when you do it like I did

[09:36] <masak> mscha: ovserve it work, above! :D

[09:37] <mscha> Ah, thanks.

[09:37] <masak> observe*

[09:39] *** tmetro left
[09:52] *** mscha left
[09:57] *** tobs` joined
[09:57] *** p6bannerbot sets mode: +v tobs`

[10:24] <lizmat> PSA: slowly getting back but still very tired: won't have much time online the coming days most likely, so next week's P6W will be a double one

[10:28] *** rindolf left
[10:34] *** Ven`` left
[10:36] *** coet joined
[10:36] *** p6bannerbot sets mode: +v coet

[10:36] <Geth> ¬¶ advent: duffee++ created pull request #9: claiming Dec 9

[10:36] <Geth> ¬¶ advent: review: https://github.com/perl6/advent/pull/9

[10:38] <Geth> ¬¶ advent: e434e4e108 | (Boyd Duffee)++ (committed using GitHub Web editor) | perl6advent-2018/schedule

[10:38] <Geth> ¬¶ advent: claiming Dec 9

[10:38] <Geth> ¬¶ advent: 

[10:38] <Geth> ¬¶ advent: grabbing the last slot - Dec 9

[10:38] <Geth> ¬¶ advent: review: https://github.com/perl6/advent/commit/e434e4e108

[10:38] <Geth> ¬¶ advent: 4b11de489e | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | perl6advent-2018/schedule

[10:38] <Geth> ¬¶ advent: Merge pull request #9 from duffee/master

[10:38] <Geth> ¬¶ advent: 

[10:38] <Geth> ¬¶ advent: claiming Dec 9

[10:38] <Geth> ¬¶ advent: It was released just today... I don't know if you know the ropes, but first and foremost, create an account in Wordpress.com and/or send it to me via email.

[10:38] <Geth> ¬¶ advent: review: https://github.com/perl6/advent/commit/4b11de489e

[10:41] *** Ven`` joined
[10:42] *** p6bannerbot sets mode: +v Ven``

[10:46] *** kensanata joined
[10:46] *** p6bannerbot sets mode: +v kensanata

[10:48] *** Ven`` left
[10:50] <masak> lizmat: rest well!

[10:51] <lizmat> well, no rest for the wicker, I still need to write an advent post  :-)

[10:51] <lizmat> *wicked

[10:55] *** graphene left
[10:57] *** Ven`` joined
[10:57] *** graphene joined
[10:57] *** p6bannerbot sets mode: +v Ven``

[10:57] *** p6bannerbot sets mode: +v graphene

[11:00] *** gregf_ joined
[11:00] *** p6bannerbot sets mode: +v gregf_

[11:09] *** domidumont left
[11:12] *** rindolf joined
[11:13] *** p6bannerbot sets mode: +v rindolf

[11:17] *** lucasb joined
[11:17] *** p6bannerbot sets mode: +v lucasb

[11:24] <lucasb> yeah, I beat clarkema today! but he's still on the lead :)

[11:26] *** lizmat left
[11:29] *** lizmat joined
[11:29] *** p6bannerbot sets mode: +v lizmat

[11:32] *** lichtkind left
[11:42] *** tmtvl joined
[11:43] *** p6bannerbot sets mode: +v tmtvl

[11:44] *** lichtkind joined
[11:45] *** p6bannerbot sets mode: +v lichtkind

[11:51] *** Voldenet joined
[11:51] *** Voldenet left
[11:51] *** Voldenet joined
[11:51] *** p6bannerbot sets mode: +v Voldenet

[11:52] *** p6bannerbot sets mode: +v Voldenet

[11:53] *** chienjo joined
[11:54] *** p6bannerbot sets mode: +v chienjo

[11:58] *** abraxxa1 joined
[11:59] *** p6bannerbot sets mode: +v abraxxa1

[11:59] *** abraxxa left
[12:11] *** abraxxa1 left
[12:11] *** abraxxa joined
[12:12] *** p6bannerbot sets mode: +v abraxxa

[12:16] *** abraxxa left
[12:16] *** dotdotdot left
[12:20] *** matze_ joined
[12:20] *** p6bannerbot sets mode: +v matze_

[12:21] <matze_> hi there, I would like to do DNS checks on list of domain names .. is there a way I could do that parallel?

[12:22] <matze_> i read about promises but I dont dig it 

[12:23] <matze_> p6: say "hello"

[12:23] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´hello‚ê§¬ª

[12:23] <jnthn> Have you got it working serially already?

[12:24] <matze_> i used Net::DNS and created a simple loop 

[12:25] <jnthn> If it's a `for` loop, you could parallelize the loop, just make sure that the loop doesn't mutate anything inside of it

[12:25] <matze_> i have a for loop for reading the list of domainnames

[12:26] <matze_> i already did it in perl5 by using parallel::ForkManager.. and i would like to port it to p6

[12:26] <jnthn> Depending how your loop looks it could be as simple as `my @results = race for $fh.lines -> $domain { }`

[12:27] *** clarkema joined
[12:27] <jnthn> (Without seeing the code structure you have, it's hard to be more precise)

[12:27] *** p6bannerbot sets mode: +v clarkema

[12:28] <matze_> looks like: for 'start.csv'.IO.lines -> $line {   my ($dom) = $line.split(/ \; /); ..doTheLookUp..}

[12:32] <jnthn> That's fine, but what do you do with the result of the lookup?

[12:33] <jnthn> Provided that step is safe, you can use `race` as I suggested, and optionally configure the degree of parallelism and batch size

[12:33] <jnthn> https://docs.perl6.org/routine/race for more info

[12:34] <matze_> i just could return the domainname ~ ip4 address 

[12:34] <matze_> i just need to know whether the domain has an ip or not

[12:35] *** Ven`` left
[12:35] <jnthn> Yeah, if the loop evaluates to that then `my @results = race for  'start.csv'.IO.lines -> $line { my ($dom) = $line.split(';'); $dom ~ ' ' ~ doTheLookup($dom) }` or similar

[12:36] <jnthn> And you can after .lines write `.race(:10degree, :1batch)` to parallelize every lookup and do 10 at a time, for example

[12:36] <matze_> i am trying :)

[12:36] <jnthn> The default is a batch size of 64 and degree based on CPU cores, but you're not CPU bound so it probably makes sense to configure sensible values

[12:36] <clarkema> Trying to get through today's AoC part two with an inefficient algorithm + brute force horsepower.  Rakudo is currently using 78G of RAM and rising steadily :(

[12:37] <jnthn> Gotta get on a ferry...back in an hour

[12:38] <matze_> yeah, works

[12:39] <matze_> thanks alot :)

[12:43] *** Frishkorn joined
[12:43] *** p6bannerbot sets mode: +v Frishkorn

[12:44] <matze_> mhm..when i use race in this way how can i add a batch size?

[12:45] <matze_> i need i use the object syntax in this case?

[12:47] *** Frishkorn left
[12:49] *** Ven`` joined
[12:50] *** p6bannerbot sets mode: +v Ven``

[12:57] *** yqt joined
[12:58] *** p6bannerbot sets mode: +v yqt

[13:03] *** abraxxa joined
[13:04] *** p6bannerbot sets mode: +v abraxxa

[13:09] <chienjo> m: my $a = "test-1.txt"; say $a++ for ^3;

[13:09] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´test-1.txt‚ê§test-2.txt‚ê§test-3.txt‚ê§¬ª

[13:10] <chienjo> m: my $a = "test-1-foo.txt"; say $a++ for ^3;

[13:10] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´test-1-foo.txt‚ê§test-1-fop.txt‚ê§test-1-foq.txt‚ê§¬ª

[13:12] *** MasterDuke joined
[13:12] *** p6bannerbot sets mode: +v MasterDuke

[13:12] *** MasterDuke left
[13:12] *** MasterDuke joined
[13:12] *** herbert.freenode.net sets mode: +v MasterDuke

[13:12] *** p6bannerbot sets mode: +v MasterDuke

[13:13] *** chienjo left
[13:16] *** gregf_ left
[13:17] <timotimo> clarkema: may i see the code? maybe i can see an opportunity for improvement :)

[13:17] <timotimo> though my machine doesn't have enough ram for that

[13:21] *** zebralan joined
[13:21] *** p6bannerbot sets mode: +v zebralan

[13:24] *** zebralan left
[13:28] <clarkema> timotimo: I've brought it down to reasonable levels now, thanks ;)  I suspect there's a leak somewhere to do with regex handling though, because there's no way it should have been chewing through that much RAM.  It got to 110G before finishing

[13:28] *** Ven`` left
[13:28] <clarkema> I might try and isolate it into a test case later on

[13:29] <timotimo> that would be cool

[13:33] <MasterDuke> clarkema: i believe there are some old, open tickets about some regex stuff leaking, but new confirmation/test cases would be good

[13:34] <AlexDaniel> interesting, I see people liking my advent post from 2016

[13:35] <tobs`> about memory leaks, this script currently uses 355G and has written a 4G file. https://github.com/taboege/p6-costas/blob/master/costas.p6

[13:36] <tobs`> Maybe there is some caching going on somewhere, but I thought I wrote it in a "pipeline" fashion, not storing more than I needed to print the next line of output

[13:38] *** jmerelo joined
[13:38] <AlexDaniel> also, how do I like a post on wordpress?

[13:39] <tobs`> (the memory usage has been steadily crawling up, at the rate of roughly 100√ó output file size)

[13:39] <timotimo> it could be that it caches the result of permutation-axioms and costas-axioms, but i don't think it should

[13:39] <timotimo> AlexDaniel: just be logged in, then there's a like button at the end of each post on the post page

[13:39] *** p6bannerbot sets mode: +v jmerelo

[13:39] <timotimo> probably not on the list-of-posts page

[13:39] <AlexDaniel> oooooooooooooh I have to turn off ¬µBlock to see it‚Ä¶

[13:39] <jmerelo> AlexDaniel: I hope you _really_ like it.

[13:39] <timotimo> haha

[13:40] <AlexDaniel> yeah I love it :)

[13:41] <AlexDaniel> tobs`: sorry, 355G of RAM? Where did you get that machine?

[13:43] <tobs`> AlexDaniel: it's a computation server of the university

[13:43] <AlexDaniel> oh, okay

[13:46] <lucasb> that Costas code looks interesting, unfortunately there's lots of unicode char boxes in my screen :)

[13:47] <lucasb> circumfix:<‚∏® ‚∏©>

[13:47] <timotimo> tobs`: if the values of $.i and $.j don't exceed 2 ** 32, you can use "has int32 $.i; has int32 $.j" to make the Literal instances just a little smaller

[13:48] <jnthn> matze_: Actually you need both, but yes, you'd specify degree and batch with the object syntax. If you only want the word "race" in the code once, replace `for` with a `map`

[13:48] <timotimo> the lookup of dynamic variables is often slower than that of lexicals, maybe you can gain a little bit of speed by caching $*N in every sub that gets called

[13:54] *** Ven`` joined
[13:54] <tobs`> timotimo: I'll try those

[13:55] *** p6bannerbot sets mode: +v Ven``

[13:56] <tobs`> and a different question: I'm calling an external program P and want to wrap input to it and output from it at the same time in a composable way, think of bare "P" turns into "serialize => P => deserialize" and possibly multiple steps.

[13:57] <timotimo> oh, how much time is actually spent for permutation-axioms and costas-axioms themselves?

[13:57] <tobs`> Transforming the output is easy enough with map, but is there a dual on the input end?

[13:57] <timotimo> are they worth improving at all?

[13:57] <timotimo> they could be very fast

[13:57] <timotimo> yes, supplies are probably what you want!

[13:58] <timotimo> probably barely anything in permutation-axioms and most time in costas-axioms?

[13:58] <tobs`> timotimo: yes, that whole program could have been written in C without adding much more lines. (Maybe that makes it an interesting target for benchmarking abstractions, or maybe not?)

[13:59] <tobs`> timotimo: I have never profiled it to be honest, let's see

[13:59] *** Manifest0 left
[14:00] <timotimo> profiling something that runs for so many hours and goes up to multiple hundred gigs ... :D

[14:01] *** matze_ left
[14:02] <tobs`> I would use a smaller $*N of course, but yeah permutation-axioms is negligible I dare say

[14:03] <tobs`> (permutations need $*N**2 and costas on the order of $*N**6 iterations)

[14:03] <tobs`> or something like that

[14:04] <timotimo> i removed |costas-axioms from the loop at the bottom and it finished in 18.5 seconds

[14:06] <tobs`> I'm still hung up on the supply/map question though. When transforming stuff that goes into the program P, I have a consumer, P, but I don't have a producer yet to which I could apply map.

[14:06] <timotimo> oh, by input you mean stuff your program writes into that program?

[14:06] *** Manifest0 joined
[14:06] <tobs`> exactly, I think I could maintain a pair (Supplier, Supply) and

[14:07] *** p6bannerbot sets mode: +v Manifest0

[14:07] <timotimo> right, you'd probably offer a little function that a user can call with their own supplier and your code would tap it with your "pipeline" and the output of the pipeline would go into the program

[14:08] <tobs`> when I want to wrap another serialize/deserialize layer around that, I create a new supplier which emits into the old supplier and applies the serializable in the middle. That would be the same as a `map: deserialize` on the output, I think

[14:08] <tobs`> and by "the same", I mean "the dual"

[14:08] <timotimo> alternative could always be to offer a Channel that can be written into, that makes the API different and maybe more natural

[14:09] <timotimo> but you can still tap the .Supply of a channel and use the transformation methods of that

[14:12] <jmerelo> Just created the nqp tag in StackOverflow https://stackoverflow.com/questions/tagged/nqp

[14:13] <jmerelo> Anyone wants to fill it in (and have the privs to do so), please do it.

[14:13] <tobs`> Alright, that should help me progress, thanks

[14:18] *** clarkema left
[14:18] *** clarkema joined
[14:19] *** p6bannerbot sets mode: +v clarkema

[14:20] <tobs`> It seems like in my test run, 33% of time is spent in the ‚∏® ‚∏© operators. It's tragic that they look so nice but can/should be replaced by simple arithmetic on native ints.

[14:21] <timotimo> that sub only spends 5% inside of itself, though, all the other stuff it does is in stuff below it

[14:23] <tobs`> what it does is create a Literal object and that entire object is just wrapping the conversion of a point ($x,$y) to a unique index $*N*$x+$y

[14:23] <timotimo> oh, huh.

[14:24] <timotimo> about 60% of the time is spent in the slow path binder for some reason

[14:24] <tobs`> (maybe with a minus in front). You know I was tempted to make the code look like it does on paper :-)

[14:24] <MasterDuke> it uses a where clause in the signature

[14:25] <timotimo> oh, yes

[14:25] <timotimo> that's it

[14:25] *** jmerelo left
[14:26] <tobs`> which can be dropped without affecting the calling code actually, since it never passes any .elems ‚â† 2

[14:26] <[Coke]> (moarvm test payload) wonder if it would be worth generating a bytecode file that just printed "hello world" to stdout as part of the build for very minimal testing.

[14:27] * lizmat finished her advent post for the 7th and is now tired and afk&

[14:27] <timotimo> lizmat: would it be okay in case i don't make it til midnight to post yours instead of mine and give me another day?

[14:28] <lizmat> sure....  just need to change the title a bit  :-)

[14:28] <timotimo> tobs`: without the where clause, it takes 27 seconds on my machine for $*N = 9, and with it it takes 36 seconds

[14:28] <timotimo> TYVM, i-ll still try to work hard

[14:30] <timotimo> tobs`: making negated an int8 and $.i and $.j int32 doesn't make it much faster, but it does reduce memory consumption somewhat

[14:31] <timotimo> m: say 428968 / 358412

[14:31] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´1.196857‚ê§¬ª

[14:31] <timotimo> just below 20%

[14:31] <timotimo> m: say 428968 R/ 358412

[14:31] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´0.8355215‚ê§¬ª

[14:31] <tobs`> but what I was trying to do with the where clause should be deducible statically somehow. Maybe not if I make the ‚∏® ‚∏© a circumfix though...

[14:31] <timotimo> hm, not completely

[14:31] <timotimo> you can make it an infix, then it'll work

[14:32] <timotimo> it'll look funny, though

[14:34] <Geth> ¬¶ doc: 13cbf906ee | Coke++ | xt/braces.t

[14:34] <Geth> ¬¶ doc: allow mention of unicode's lenticular brackets

[14:34] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/13cbf906ee

[14:34] <tobs`> I can use an umbrella ‚•æ :-)

[14:34] <tobs`> u: ‚•æ

[14:34] <unicodable6> tobs`, U+297E UP FISH TAIL [Sm] (‚•æ)

[14:35] <timotimo> oh, yeah, that's faster

[14:35] <timotimo> and smaller

[14:35] <timotimo> m: say 253736 / 358412

[14:35] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´0.707945‚ê§¬ª

[14:35] <moritz> ‚òÇ

[14:35] <timotimo> m: say 15 / 27.5

[14:35] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´0.545455‚ê§¬ª

[14:36] <timotimo> https://gist.github.com/timo/65e97581e1e5b7217bfdd42e029f37c4

[14:36] <moritz> unicodable6: umbrella

[14:36] <unicodable6> moritz, U+2602 UMBRELLA [So] (‚òÇ)

[14:36] <unicodable6> moritz, U+2614 UMBRELLA WITH RAIN DROPS [So] (‚òî)

[14:36] <timotimo> i transformed it into an infix, but kept the look. needed parenthesis in a few places

[14:36] <unicodable6> moritz, 5 characters in total (‚òÇ‚òî‚õ±üåÇüèñ): https://gist.github.com/064a31b64f4fcbe8ababd690ac64a985

[14:36] <timotimo> oh

[14:36] <timotimo> the one with rain drops could be the negated one

[14:37] <Geth> ¬¶ doc: finanalyst++ created pull request #2496: formating codes in pod

[14:37] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2496

[14:42] <timotimo> another small win from .map(*.Str) instead of >>.Str

[14:44] <tobs`> I get 9 seconds for N=8 on my laptop using the umbrella operators

[14:44] <timotimo> i can get it to 140% cpu usage by hypering the stringification and joining

[14:44] <timotimo> but i didn't use atomic ops for the ++, oops :)

[14:47] <timotimo> OK, so

[14:47] <timotimo> m: say 8.75 / 35.8

[14:47] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´0.244413‚ê§¬ª

[14:47] <timotimo> m: 333448 / 477100

[14:47] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "/" in expression "333448 / 477100" in sink context (line 1)‚ê§¬ª

[14:47] <timotimo> m: say 333448 / 477100

[14:47] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´0.6989059‚ê§¬ª

[14:47] <Geth> ¬¶ doc/master: 4 commits pushed by Coke++

[14:47] <Geth> ¬¶ doc/master: e50199b771 | braces, not brackets

[14:47] <Geth> ¬¶ doc/master: 5e997b0cec | specify bracket type

[14:47] <Geth> ¬¶ doc/master: 94a77a48f8 | brackets, not braces

[14:47] <Geth> ¬¶ doc/master: 03d2657448 | verbosely mention bracket style

[14:47] <Geth> ¬¶ doc/master: review: https://github.com/perl6/doc/compare/13cbf906ee00...03d265744826

[14:47] <timotimo> wallclock run time reduced to 25%, memory usage reduced to 68%

[14:48] <timotimo> sha256sum of the output files matches still

[14:49] <Geth> ¬¶ advent: tbrowder++ created pull request #10: add schedule for 2019; take first slot

[14:49] <Geth> ¬¶ advent: review: https://github.com/perl6/advent/pull/10

[14:51] <tobs`> and can native integers be used throughout? It doesn't seem to like sub MAIN (int32 $*N, Str $outfile)

[14:52] *** MasterDuke left
[14:52] <tobs`> in fact $*N will be the largest number occuring, so even int8 would be fine for all relevant inputs

[14:53] <tobs`> although memory usage is probably fine anyway as soon as it doesn't leak

[14:55] <timotimo> oh yikes

[14:55] <timotimo> Lexical with name '$i' has a different type in this frame

[14:56] <lucasb> hehe tbrowder++ is in a hurry :)

[14:57] *** jaush left
[14:57] <tbrowder> hee hee, at my age you better write a note before you forget!

[14:58] <tbrowder> had a brainstorm from a topic at  my linux group meeting monday

[15:02] <timotimo> ah, neat.

[15:02] <timotimo> tobs`: you can use native ints in costas-axioms, but you have to "for flat ..." and then "-> int8 $x, int8 $y" for the loops

[15:02] <timotimo> it is in fact faster, it also takes less memory still

[15:03] <timotimo> it seems to be rather variable now, but i get it to 6.4 with 312372 now

[15:05] <timotimo> and adding a multi candidate for the infix operator that takes native ints is now also possible

[15:06] <timotimo> i'm still not sure why it'd grow in memory usage with increasingly big $*N

[15:08] <Xliff> *sigh*

[15:09] <Xliff> Figures. I'd start doing this and then dependencies would crop up.

[15:09] * Xliff starts working on Pango bindings.

[15:11] <tobs`> oh shoot, I have to run now. Thanks timotimo for all the help and moritz for the operators :-)

[15:12] <tobs`> (maybe it's also good if you can work on your article in peace)

[15:12] *** curan left
[15:12] *** tobs` left
[15:26] <tbrowder> AlexDaniel: any objections to an advent merge?

[15:26] *** abraxxa1 joined
[15:26] *** abraxxa left
[15:27] *** p6bannerbot sets mode: +v abraxxa1

[15:28] <AlexDaniel> tbrowder: honestly I see no point :D

[15:28] *** Actualeyes joined
[15:28] <AlexDaniel> tbrowder: do we really need to plan ahead that much?

[15:28] <AlexDaniel> I don't mind it though, merge if you want

[15:28] <tbrowder> well, does it hurt? it would make JJ happy!

[15:28] *** p6bannerbot sets mode: +v Actualeyes

[15:29] <tbrowder> ok

[15:29] <Geth> ¬¶ advent: 4ffabc4a56 | (Tom Browder)++ | archives/perl6advent-2019/schedule

[15:29] <Geth> ¬¶ advent: add schedule for 2019; take first slot

[15:29] <Geth> ¬¶ advent: review: https://github.com/perl6/advent/commit/4ffabc4a56

[15:29] <Geth> ¬¶ advent: 2338b76560 | (Tom Browder)++ (committed using GitHub Web editor) | archives/perl6advent-2019/schedule

[15:29] <Geth> ¬¶ advent: Merge pull request #10 from tbrowder/master

[15:29] <Geth> ¬¶ advent: 

[15:29] <Geth> ¬¶ advent: add schedule for 2019; take first slot

[15:29] <Geth> ¬¶ advent: review: https://github.com/perl6/advent/commit/2338b76560

[15:56] *** Ven`` left
[16:00] *** robertle_ left
[16:13] *** graphene left
[16:15] *** graphene joined
[16:16] *** p6bannerbot sets mode: +v graphene

[16:24] *** jmerelo joined
[16:25] <Kaiepi> just applied for a grant!

[16:25] *** p6bannerbot sets mode: +v jmerelo

[16:27] <jmerelo> Kaiepi: good luck! Can you post the link?

[16:28] <Kaiepi> idk where to find the link, i just sent the email a minute ago

[16:30] *** kensanata left
[16:31] <jmerelo> Kaiepi: it will be published in the Perl Foundation, and people will be able to comment on it.

[16:38] *** ryn1x left
[16:40] *** domidumont joined
[16:41] *** p6bannerbot sets mode: +v domidumont

[16:44] *** sena_kun joined
[16:45] *** p6bannerbot sets mode: +v sena_kun

[16:52] *** nemo joined
[16:52] *** p6bannerbot sets mode: +v nemo

[16:52] <nemo> huh.. I was wondering why my package management was failing

[16:52] <nemo> Perl v5.20.1 required--this is only v5.18.2, stopped at /usr/share/perl6/rakudo-helper.pl line 14.

[16:53] <nemo> apparently someone updated rakudo to 2018.10 but did not update perl

[16:53] <nemo> in ubuntu 14.04

[16:53] <nemo> just mentioning in case anyone else encounters it

[16:53] <nemo> http://ppa.launchpad.net/jonathonf/perl6/ubuntu

[16:54] *** pmurias joined
[16:54] *** p6bannerbot sets mode: +v pmurias

[16:55] *** pmurias left
[16:57] *** pmurias joined
[16:57] *** p6bannerbot sets mode: +v pmurias

[16:59] <pmurias> masak: re tennent's correspondence principle isn't that something else (according to the definitions found on google)

[16:59] <yoleaux> 4 Dec 2018 23:20Z <SmokeMachine> pmurias: I splitted the modules into different files and started to write some tests...

[16:59] <jmerelo> .tell El_Che look at th elines above for a bug report on the version of Perl needed in Ubuntu 14.04 packages.

[16:59] <yoleaux> jmerelo: I'll pass your message to El_Che.

[17:00] *** clsn joined
[17:00] <pmurias> masak: also the example is super misleading, you can replace variable by parameter binding but you need self recoursion not calling an anonymous closures

[17:00] *** p6bannerbot sets mode: +v clsn

[17:01] <pmurias> masak: http://gafter.blogspot.com/2006/08/tennents-correspondence-principle-and.html - this doesn't apply to Perl 6 anyway

[17:02] <clsn> Is it a known bug (in Rakudo) that 5¬≥‚Å∫‚Å¥ returns 244140625 (i.e. 5**12) instead of 78125 (5**7)?  I didn't see it searching the bugs tracker, but may have missed it.

[17:02] <pmurias> masak: the transformation you have in the block post (using an IIFE) emulates let style one time assignment

[17:03] <pmurias> masak: but how can you write to a variable a second time?

[17:10] *** clarkema left
[17:12] *** kou25 joined
[17:12] *** p6bannerbot sets mode: +v kou25

[17:13] <buggable> New CPAN upload: Math-FFT-Libfftw3-0.1.2.tar.gz by FRITH http://modules.perl6.org/dist/Math::FFT::Libfftw3:cpan:FRITH

[17:17] *** kou25 left
[17:20] *** scimon left
[17:31] *** clarkema joined
[17:32] *** p6bannerbot sets mode: +v clarkema

[17:36] *** lucasb left
[17:37] *** gregf_ joined
[17:37] *** p6bannerbot sets mode: +v gregf_

[17:37] *** dakkar left
[17:40] *** ryn1x joined
[17:41] *** p6bannerbot sets mode: +v ryn1x

[17:41] *** ufobat joined
[17:42] *** p6bannerbot sets mode: +v ufobat

[17:50] *** ferreira1 joined
[17:51] *** p6bannerbot sets mode: +v ferreira1

[17:51] *** Peter_R left
[17:52] *** Peter_R joined
[17:52] *** p6bannerbot sets mode: +v Peter_R

[17:52] *** ferreira left
[17:52] *** joy_ left
[17:53] *** iviv joined
[17:53] *** p6bannerbot sets mode: +v iviv

[17:53] *** joy_ joined
[17:53] *** p6bannerbot sets mode: +v joy_

[17:58] *** coet left
[17:58] *** ryn1x left
[18:02] *** jmerelo left
[18:04] *** lucasb joined
[18:04] *** p6bannerbot sets mode: +v lucasb

[18:10] *** ryn1x joined
[18:10] *** p6bannerbot sets mode: +v ryn1x

[18:12] <Geth> ¬¶ ecosystem: 3cf7c7f5f0 | (Martin Barth)++ (committed using GitHub Web editor) | META.list

[18:12] <Geth> ¬¶ ecosystem: Added StrictClass 

[18:12] <Geth> ¬¶ ecosystem: 

[18:12] <Geth> ¬¶ ecosystem: Added StrictClass behaves a bit MooseX::StrictConstructor

[18:12] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/3cf7c7f5f0

[18:13] *** ryn1x left
[18:13] *** ryn1x_ joined
[18:14] *** p6bannerbot sets mode: +v ryn1x_

[18:18] <clsn> p6: say 5¬≥‚Å∫‚Å¥;

[18:18] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´244140625‚ê§¬ª

[18:18] <clsn> p6: say 5**7

[18:18] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´78125‚ê§¬ª

[18:23] *** ryn1x_ left
[18:24] *** ferreira joined
[18:24] *** sauvin left
[18:25] *** ferreira1 left
[18:25] *** p6bannerbot sets mode: +v ferreira

[18:26] *** ufobat left
[18:29] *** yqt left
[18:30] <lucasb> how can we call this... "exponent arithmetics"? Well, I'm not sure the syntax is supposed to work

[18:31] <lucasb> should be just plain digits... no operations

[18:33] <lucasb> m: say 5¬≥\‚Å¥;

[18:33] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´244140625‚ê§¬ª

[18:34] <lucasb> is it multipliying 3*4? strange :)

[18:36] *** pmurias left
[18:36] *** MasterDuke joined
[18:37] *** Cabanossi joined
[18:37] *** p6bannerbot sets mode: +v MasterDuke

[18:37] <MasterDuke> committable6: releases say 5¬≥\4

[18:37] *** p6bannerbot sets mode: +v Cabanossi

[18:38] <committable6> MasterDuke, ¬¶releases (35 commits): ¬´04===SORRY!04=== Error while compiling /tmp/iVk8QtV8Si‚ê§Confused‚ê§at /tmp/iVk8QtV8Si:1‚ê§------> 03say 5¬≥\08‚èè044‚ê§    expecting any of:‚ê§        postfix‚ê§ ¬´exit code = 1¬ª¬ª

[18:38] <MasterDuke> committable6: releases say 5¬≥‚Å∫‚Å¥

[18:38] <committable6> MasterDuke, ¬¶releases (35 commits): ¬´244140625‚ê§¬ª

[18:38] *** Cabanoss- left
[18:39] <lucasb> token postfix:sym<‚Åø> { <sign=[‚Åª‚Å∫¬Ø]>? <dig=[‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ]>+ }

[18:41] <lucasb> ah, I think it's ok

[18:41] <lucasb> 5¬≥‚Å∫‚Å¥ really means (5¬≥)‚Å∫‚Å¥

[18:42] *** pmurias joined
[18:42] *** p6bannerbot sets mode: +v pmurias

[18:43] <lucasb> or, in ASCII (5 ** 3) ** 4 :)

[18:45] <clsn> That makes sense... except that the web site seemed to be different.  sec.

[18:46] <clsn> https://docs.perl6.org/language/unicode_ascii implies that ‚Å∫ "can be used" in exponentiation, in which case I would expect it to work in the more obvious way.

[18:46] <clsn> But it really means only as a unary.  maybe that's what "must use explicit number" refers to?

[18:47] *** zakharyas left
[18:47] <lucasb> indeed, it's confusing :)

[18:47] <clsn> And I don't see how the ASCII version "|" is even relevant.  This is more a documentation issue.

[18:47] <lucasb> should have just said that ‚Åª ‚Å∫ can be used as unary operators in exponents, yeah, like you said

[18:48] <clsn> I guess the web page needs to be updated.  That's why I wanted to ask here before submitting a bug report on the compiler.

[18:49] <lucasb> that "|" looks stray

[18:49] <clsn> Agreed.

[18:49] <lucasb> clsn: feels like editing that doc page? :)

[18:50] <clsn> Like it was from some earlier format that was drawing the table with | characters or something.

[18:50] <clsn> Eh, for something so simple, sure I'll do it.  How do I get/have access to it?  Is the website on a github repo or something that I'd do a pull-request?  It's been forever since I worked on perl6.

[18:51] *** MasterDuke left
[18:51] <lucasb> https://github.com/perl6/doc/blob/master/doc/Language/unicode_ascii.pod6

[18:51] <lucasb> the html tables... they don't preserve the source order, they get JS-sorted on the browser

[18:52] <lucasb> the lines: https://github.com/perl6/doc/blob/master/doc/Language/unicode_ascii.pod6#L79-L81

[18:53] <lucasb> turned-off js temporarily :)

[18:53] <clsn> yep, I see 'em.  I'll check it out tonight, meeting coming up.

[18:53] <lucasb> the "+" gets turned into "|" in the html conversion... Pod 6 syntax glitch?

[18:53] <clsn> I wondered about that.

[18:57] *** pecastro joined
[18:58] *** p6bannerbot sets mode: +v pecastro

[18:58] <lucasb> doc writers: that automatic js-sorting isn't always good, wouldn't you agree? sorting static text should be made as a commit to the sources to rearrange lines :)

[18:59] <lucasb> see this hack here? https://github.com/perl6/doc/blob/master/assets/js/main.js#L9-L18

[18:59] <clsn> off to meeting, will work on remembering to do the fix tonight,

[18:59] <lucasb> clsn: o/

[19:01] <lucasb> IIRC it may have been me who asked zoffix to not sort operators table precedence, because I was staring for it for too long wondering how come P6 precedence was so mixed up!

[19:05] *** ryn1x_ joined
[19:06] <lucasb> in that JS, the text=='A' and text=='Level' is supposed to match the HTML table headers in https://docs.perl6.org/language/operators#Operator_precedence

[19:06] *** p6bannerbot sets mode: +v ryn1x_

[19:25] <SmokeMachine> pmurias: Ive added some tests and a new poorly tested feature, attributes binded that means that it auto render when it is setted... I hope it would not caouse any problem...

[19:28] <SmokeMachine> *cause

[19:29] *** rindolf left
[19:35] <masak> pmurias: re "how can you write to a variable a second time?" -- good question.

[19:36] <masak> pmurias: I had a different thing that I was thinking about: how can you make sure control flow works exactly the same one layer down? at least (the unimplemented) `leave` will work differently inside that pointy block.

[19:37] <masak> pmurias: re the Gafter blog post -- my point wasn't that it applied to Perl 6, it's at that point the principle had already taken on its own life, quite distinct from what it meant when it was founded

[19:37] <masak> it seems that the principle mostly says "variable declarations and parameter declarations should be equally powerful"

[19:39] *** ryn1x_ left
[19:47] *** ryn1x_ joined
[19:48] *** p6bannerbot sets mode: +v ryn1x_

[19:50] *** leont left
[19:56] <pmurias> masak: it's a super common pattern in Erlang where you implement variables assignment all the time by doing a self-recursive tail call

[19:57] *** ryn1x_ left
[19:58] *** patrickb joined
[19:59] *** p6bannerbot sets mode: +v patrickb

[20:00] *** domidumont left
[20:00] <SmokeMachine> pmurias: is there a example to that? (Im just curious... I dont speak Erlang...)

[20:01] <mornfall> if a sub passed to Supply.throttle dies... nothing happens?

[20:01] *** Guest29795 joined
[20:01] <clarkema> SmokeMachine: there kinda isn't any persistent storage 'slots' like package variables or objects etc

[20:01] <clarkema> You just have a function that keeps calling itself, passing the state in as another argument

[20:02] *** p6bannerbot sets mode: +v Guest29795

[20:03] <pmurias> SmokeMachine: https://gist.github.com/pmurias/b80128944e9a49fb97161c170ed93961 # look at how loop is called

[20:03] <SmokeMachine> hum...

[20:03] <pmurias> SmokeMachine: I haven't written any erlang since uni it's a super uncool tedious language

[20:04] <SmokeMachine> clarkema, pmurias: thanks!

[20:04] <clarkema> pmurias: try Elixir!  All of the amazing goodness of the Erlang VM, but with a nicer language on top

[20:04] <SmokeMachine> pmurias: what do you think about elixir?

[20:04] <pmurias> SmokeMachine: haven't used it

[20:04] <SmokeMachine> clarkema: That's what I heard about it...

[20:05] <clarkema> I'm a big fan

[20:05] <clarkema> and Phoenix is _amazing_

[20:05] <pmurias> but it looks like it replaced the Prolog heritage with a Ruby one ;)

[20:05] <clarkema> pmurias: it pretty much did

[20:05] <SmokeMachine> pmurias: did my changes do any problem to your work?

[20:05] *** Guest29795 left
[20:07] <SmokeMachine> there are a lot of brazilians very proud about elixir and lua...

[20:08] * [Coke] imagines it wouldn't be hard to create a role for variables that enforced the set-once contract.

[20:09] <masak> SmokeMachine: Lua seems totally magical. not so much the language, but the VM, oh wow.

[20:10] <pmurias> SmokeMachine: doesn't the VM seem so magical due to how none magical the language is

[20:10] <pmurias> meant masak:

[20:11] <masak> almost certainly not :)

[20:11] <SmokeMachine> masak: lua is something that Id like to study a little...

[20:11] <masak> I mean, the language certainly enables the VM being nice and being able to optimize (and JIT) things well

[20:11] <SmokeMachine> but it sounds strange to me a language called "moon" (lua in portuguese)

[20:12] <clarkema> I'm actually working through a Lua book atm -- mainly for AwesomeWM

[20:12] <lucasb> Programming in Lua 4th ed? :)

[20:13] <SmokeMachine> but I think I got a lot more interest on lua when I heard about fanlang

[20:13] <clarkema> lucasb: yup

[20:14] <lucasb> SmokeMachine: fanlang? could not find

[20:14] <lucasb> have you seen MoonScript?

[20:14] <lucasb> CoffeeScript syntax compiled to lua :)

[20:14] <SmokeMachine> lucasb: https://github.com/agentzh/perl-parsing-library-benchmark

[20:15] <SmokeMachine> lucasb: https://twitter.com/agentzh/status/826922812099043328?lang=en

[20:15] <lucasb> ah, thanks!

[20:15] <SmokeMachine> does anyone know any news about fanlang?

[20:15] <lucasb> they are the first results in search... I unconsciously skipped

[20:17] <pmurias> SmokeMachine: from talking on #perl6 with a guy who used to work on it, fanlang got to the point where it's good enough for what they want from it

[20:17] <SmokeMachine> https://twitter.com/agentzh/status/845882525587202050

[20:17] <[Coke]> wonder if we have an update to https://twitter.com/agentzh/status/826922812099043328?lang=en, it's been almost 2 years.

[20:17] <[Coke]> (from our end)

[20:18] <SmokeMachine> Ill ask him on twitter

[20:20] <SmokeMachine> https://twitter.com/smokemachine/status/1070412500372480007

[20:20] <SmokeMachine> :( my english is terrible... :(

[20:21] <pmurias> SmokeMachine: s/how is/what is/

[20:21] <SmokeMachine> thanks!

[20:25] <SmokeMachine> lucasb: no, I havent...

[20:29] <lucasb> is "--target=mbc" supposed to work? fails here

[20:30] <lucasb> Cannot dump this object; no dump method

[20:31] <Kaiepi> m: my IO::Socket::INET $c .= new: :!listen, :localhost<localhost>, :0localport; $c.close

[20:31] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´IO::Socket::INET is disallowed in restricted setting‚ê§  in sub restricted at src/RESTRICTED.setting line 1‚ê§  in method new at src/RESTRICTED.setting line 32‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:32] <Kaiepi> evalable6, help

[20:32] <evalable6> Kaiepi, Like this: evalable6: say ‚Äòhello‚Äô; say ‚Äòworld‚Äô # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Evalable

[20:32] <Kaiepi> evalable6: my IO::Socket::INET $c .= new: :!listen, :localhost<localhost>, :0localport; $c.close

[20:32] <evalable6> Kaiepi, rakudo-moar 9f5cc8d1b: OUTPUT: ¬´(exit code 1) Earlier failure:‚ê§ Nothing given for new socket to connect or bind to. Invali‚Ä¶¬ª

[20:32] <evalable6> Kaiepi, Full output: https://gist.github.com/9bbf830b1ad9fd750e3e84fa3cfa9981

[20:32] <Kaiepi> i could've sworn this used to work

[20:33] <AlexDaniel> 6c: my IO::Socket::INET $c .= new: :!listen, :localhost<localhost>, :0localport; $c.close

[20:33] <committable6> AlexDaniel, https://gist.github.com/c9a6ea8f0a5f71d85dbdf11212793739

[20:34] <Kaiepi> oh wait

[20:34] <Kaiepi> evalable6: my IO::Socket::INET $c .= new: :!listen, :host<localhost>, :0port; $c.close

[20:34] <evalable6> Kaiepi, rakudo-moar 9f5cc8d1b: OUTPUT: ¬´(exit code 1) Could not connect socket: Connection refused‚ê§  in block <unit> at /tmp/GkaJ1daxnA line 1‚ê§‚ê§¬ª

[20:34] <Kaiepi> forgot you need to use host/port instead of localhost/localport for clients

[20:38] <pmurias> SmokeMachine: I have to make release a working updated rakudo.js on npm (and I should likely make the process less annoying/error prone) and you see yourself

[20:57] <Kaiepi> so this is my grant proposal https://hastebin.com/bajalihamu.sql

[20:57] <Kaiepi> what do you guys think?

[20:57] *** ufobat joined
[20:58] *** p6bannerbot sets mode: +v ufobat

[20:59] * moritz reads

[20:59] <moritz> the Deliverables section sounds pretty vague

[21:01] <moritz> I like the proposal, but it might benefit from some overall narrative

[21:01] <moritz> why are you planning to implement those features?

[21:02] <moritz> is there a certain goal behind it? (feature parity with $something, or being able to do $something)?

[21:02] <mornfall> what are my options for an http client other than HTTP::UserAgent and WWW (which is based on the former)?

[21:02] <robertle> when reading this I wonder how easy it is to achieve this without breaking portability

[21:02] <mornfall> i would rather like to be able to POST text/plain, but that doesn't seem to be possible with those two

[21:02] <mornfall> hmm or is it

[21:03] <Kaiepi> which parts would easily break portability?

[21:03] <moritz> mornfall: take a look at https://cro.services/docs/intro/http-client

[21:04] <Kaiepi> some of my goals for this are to be able to use SO_OOBINLINE for my telnet library, to allow SO_REUSEADDR to be used with async sockets, and to make it possible to write an icmp library purely in perl 6

[21:04] <SmokeMachine> Kaiepi: are you implementing IO::Socket::UNIX? that would be great

[21:04] <robertle> well, not sure but "native-descriptos" and "getsockopt/setsockopt" sound like very platform-specific stuff. I may well be wrong, just saying that other readers might wonder the same and that this might be worth addressing

[21:04] <Kaiepi> i haven't thought about it

[21:05] <SmokeMachine> Kaiepi: that does not exists on perl6 (I think)

[21:05] <Kaiepi> getsockopt/setsockopt gets the SO_* constants similar to how the signals' constants are fetched

[21:05] <moritz> Kaiepi: maybe include that as a motivation in the grant request

[21:05] <mornfall> never mind i missed add-content in HTTP::Request

[21:05] <SmokeMachine> but I mean some way to use unix sockets...

[21:05] <mornfall> though i'll have a look at Cro

[21:05] *** patrickz joined
[21:05] <clsn> Is there a current reference on what the performance speed of rakudo is like these days, compared to previous and to say perl5?

[21:06] *** p6bannerbot sets mode: +v patrickz

[21:07] <SmokeMachine> Kaiepi: https://metacpan.org/pod/distribution/perl/dist/IO/lib/IO/Socket/UNIX.pm

[21:07] <SmokeMachine> Kaiepi: (this is perl5)

[21:08] <Kaiepi> i think i'll add IO::Socket::UNIX to the list of things to implement

[21:09] <moritz> clsn: not really. Performance depends very much on what you're doing, and can be all over the place

[21:09] *** patrickb left
[21:09] <timotimo> clsn!!

[21:10] <timotimo> we've been getting more and more microbenchmarks and minibenchmarks where we outperform perl5

[21:10] <timotimo> and our parallel computing stuff is rather good, as well as asynchronous stuff

[21:11] <SmokeMachine> Kaiepi: \o/

[21:11] <timotimo> Kaiepi: http://news.perlfoundation.org/2017/09/grant-proposal-rakudo-perl-6-p.html - my grant proposal from >1 year ago, it went well, so maybe it's a good one to steal from

[21:13] <timotimo> clsn: https://6guts.wordpress.com/2018/10/06/speeding-up-object-creation/ - latest "we sped up something a bunch" post on jn's blog

[21:16] <lucasb> those Text::CSV performance numbers... does Tux keeps them somewhere? 

[21:17] *** mcmillhj joined
[21:17] *** AlexDaniel left
[21:17] *** AlexDaniel joined
[21:17] *** p6bannerbot sets mode: +v AlexDaniel

[21:17] *** Skarsnik joined
[21:18] *** p6bannerbot sets mode: +v mcmillhj

[21:18] *** p6bannerbot sets mode: +v Skarsnik

[21:18] <timotimo> of course

[21:18] <timotimo> https://tux.nl/Talks/CSV6/speed4.html

[21:19] <lucasb> ah, nice timotimo!

[21:19] <Skarsnik> Hello

[21:19] <yoleaux> 4 Dec 2018 20:32Z <hankache> Skarsnik: regarding https://colabti.org/irclogger/irclogger_log/perl6?date=2018-12-03#l928 feel free to take my spot on the 9th. Kindly submit a PR to perl6/advent.

[21:19] <timotimo> buggable: speed 60 :4

[21:19] <buggable> timotimo, Try larger period. Could not calculate using period 60: Cannot convert NaN to Int: 

[21:20] <clsn> timotimo: Heh.  hey there.

[21:20] <timotimo> buggable: speed 30 :4

[21:20] <timotimo> wait. larger?

[21:20] <buggable> timotimo, Try larger period. Could not calculate using period 30: Cannot convert NaN to Int: 

[21:21] <timotimo> buggable: speed 90 :4

[21:21] <buggable> timotimo, Try larger period. Could not calculate using period 90: Cannot convert NaN to Int: 

[21:21] <lucasb> it's NoNpossible!

[21:22] <timotimo> buggable: speed 120 :4

[21:22] <buggable> timotimo, Try larger period. Could not calculate using period 120: Cannot convert NaN to Int: 

[21:22] <timotimo> i don't know what's wrong with that

[21:23] <Skarsnik> buggable: speed 30 4

[21:23] <buggable> Skarsnik, Try larger period. Could not calculate using period 30: Index out of range. Is: -1, should be in 0..^Inf

[21:24] <timotimo> shruuuuuuug

[21:26] <SmokeMachine> what's the average of $/hour on grant proposals?

[21:27] <timotimo> proposed or actually?

[21:27] <pmurias> SmokeMachine: the actuall one depends on how according to plan your grant proposal goes

[21:31] <[Coke]> SmokeMachine: that data isn't tracked, but you can look at approved grants on the site.

[21:33] <[Coke]> GC takes into account many factors when approving/funding, including community impact, estimated time, skill of person applying, difficulty of task, etc.

[21:34] <Skarsnik> buggable, help

[21:34] <buggable> Skarsnik, tags | tag SOMETAG | eco | eco Some search term | author github username | speed | testers CPANTesters report ID

[21:34] <Skarsnik> buggable: speed 30:4

[21:34] <buggable> Skarsnik, Try larger period. Could not calculate using period 30: Cannot convert NaN to Int: 

[21:34] <SmokeMachine> my real question is: does the people on a grant do that full time? or do they continue on the day job and do the grant on the free time?

[21:35] <SmokeMachine> usualy

[21:35] <SmokeMachine> im just curious...

[21:36] <mornfall> *sigh* well i know why i missed add-content now... it's missing from p6doc HTTP::Request :(

[21:39] <SmokeMachine> I was thinking to propose a grant to write Red... but if it was accepted I would lose almost avery time I use to play with my kids... so I thoght I could quit my job to do that... but Ill have to find another job when Red become done...

[21:39] <SmokeMachine> so I was thinking how other people do that...

[21:40] <mcmillhj> is it possible to use the >>. hyper operator on multiple functions? Like if I wanted to say `[("ayitmcjvlhedbsyoqfzukjpxwt", "agirmcjvlheybsyogfzuknpxxt")]>>.comb.Bag`

[21:40] <sena_kun> SmokeMachine, some people are single or don't have kids.

[21:41] <timotimo> mcmillhj: not sure how you mean, but you can totally >>.comb>>.Bag

[21:41] <SmokeMachine> sena_kun: that makes sense... :)

[21:42] <timotimo> some people live in their parent's basement, figuratively or literally

[21:42] *** graphene left
[21:43] <SmokeMachine> timotimo: :)

[21:43] <timotimo> in your case, you have people living in your basement, figuratively

[21:44] <timotimo> so maybe they should work on Red for a TPF grant :)

[21:44] <Skarsnik> lol

[21:44] *** graphene joined
[21:44] <SmokeMachine> timotimo: the biggest one is almost there!!! :) she is 6 and is learning how to code... :)

[21:45] *** p6bannerbot sets mode: +v graphene

[21:45] <timotimo> neat

[21:45] <Skarsnik> lul

[21:47] <SmokeMachine> would it be interesting to TPF a grant to write Red?

[21:49] <Skarsnik> What is Red?

[21:49] <mcmillhj> timotimo: thanks, that was exactly what I needed

[21:51] <SmokeMachine> Skarsnik: http://github.com/FCO/Red

[21:53] <Skarsnik> I started something like that, it use the .WHY of attributes thou

[21:54] *** vrurg left
[21:54] *** patrickz left
[21:55] <Skarsnik> https://gist.github.com/Skarsnik/ea16c3d9b305bed0f536

[21:57] *** tmtvl left
[21:59] *** ryn1x_ joined
[21:59] *** p6bannerbot sets mode: +v ryn1x_

[22:01] *** kensanata joined
[22:01] *** p6bannerbot sets mode: +v kensanata

[22:04] *** graphene left
[22:05] *** graphene joined
[22:06] *** clsn left
[22:06] *** p6bannerbot sets mode: +v graphene

[22:10] *** vrurg joined
[22:10] <mornfall> *sigh* something is eating all errors in my .throttle :(

[22:10] <mornfall> it's pretty hard to code that way

[22:10] *** p6bannerbot sets mode: +v vrurg

[22:11] <timotimo> coming in or going out?

[22:11] <mornfall> i mean, even calling a nonexistent method will just quietly go on to the next item

[22:12] <timotimo> m: Supply.from-list(^6).throttle: 3, { die "oh no" }; $t.wait;

[22:12] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$t' is not declared‚ê§at <tmp>:1‚ê§------> 3-list(^6).throttle: 3, { die "oh no" }; 7‚èè5$t.wait;‚ê§¬ª

[22:12] <timotimo> m: my $t = Supply.from-list(^6).throttle: 3, { die "oh no" }; $t.wait;

[22:12] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´(timeout)¬ª

[22:12] <mornfall> m: Supply.from-list(1, 2).throttle( 1, { die "hello" } ).tap( { .say } );

[22:12] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´Promise.new(scheduler => ThreadPoolScheduler.new(initial_threads => 0, max_threads => 64, uncaught_handler => Callable), status => PromiseStatus::Broken)‚ê§Promise.new(scheduler => ThreadPoolScheduler.new(initial_threads => 0, max_threads => 64, uncau‚Ä¶¬ª

[22:12] <mornfall> ^^ i think this is my problem

[22:13] <SmokeMachine> Skarsnik: that looks good...

[22:14] <timotimo> ah, so it spits out a promise for each execution

[22:14] <timotimo> and those promises are broken

[22:14] <timotimo> which counts as having handled the error

[22:14] <mornfall> yes :(

[22:14] <timotimo> well, you can just tap it to see the explosions

[22:15] <mornfall> but it's tapped all right (in a react block)

[22:15] <mornfall> hm, i guess i need to .await in there

[22:15] <timotimo> then you'll have to react to the promises you're getting

[22:16] <mornfall> well i have whenever $test_supp {} ‚Üê i imagine that'd fail, but it doesn't

[22:16] <mornfall> m: Supply.from-list(1, 2).throttle( 1, { die "hello" } ).tap( { .await } );

[22:16] <camelia> rakudo-moar 9f5cc8d1b: ( no output )

[22:16] <mornfall> nope, i'm doing something wrong

[22:17] <timotimo> you're not reacting to the supply sending a Quit, i'd say?

[22:17] <SmokeMachine> Skarsnik: has you seen this? https://github.com/FCO/Red/wiki/Case-When

[22:17] <timotimo> m: react whenever Supply.from-list(1, 2).throttle(1, { die "hello" }) { .await }

[22:17] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´A react block:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Died because of the exception:‚ê§    No such method 'await' for invocant of type 'Promise'‚ê§      in block  at <tmp> line 1‚ê§‚ê§¬ª

[22:18] <timotimo> m: react whenever Supply.from-list(1, 2).throttle(1, { die "hello" }) { await $_ }

[22:18] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´A react block:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Died because of the exception:‚ê§    An operation first awaited:‚ê§      in block  at <tmp> line 1‚ê§‚ê§    Died with the exception:‚ê§        hello‚ê§          in block  at <tmp> line 1‚ê§‚ê§¬ª

[22:18] *** mcmillhj left
[22:18] <timotimo> if an exception happens in a tapped block, it'll just quit the supply that comes "out of that"

[22:18] <timotimo> m: my $tap = Supply.from-list(1, 2).throttle(1, { die "hello" }).tap({ await $_ }); say $t.perl

[22:18] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$t' is not declared‚ê§at <tmp>:1‚ê§------> 3{ die "hello" }).tap({ await $_ }); say 7‚èè5$t.perl‚ê§¬ª

[22:19] <timotimo> m: my $tap = Supply.from-list(1, 2).throttle(1, { die "hello" }).tap({ await $_ }); say $tap.perl

[22:19] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´Tap.new‚ê§¬ª

[22:19] <timotimo> huh. for some reason there is no link from /type/Supply to /type/Tap

[22:20] <timotimo> m: my $tap = Supply.from-list(1, 2).throttle(1, { die "hello" }).tap({ await $_ }, quit => -> $ex { say "the tap died with $ex.perl() }); say $tap.perl

[22:20] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in double quotes; couldn't find final '"' (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> 3p died with $ex.perl() }); say $tap.perl7‚èè5<EOL>‚ê§    expecting ‚Ä¶¬ª

[22:20] <timotimo> m: my $tap = Supply.from-list(1, 2).throttle(1, { die "hello" }).tap({ await $_ }, quit => -> $ex { say "the tap died with $ex.perl()" }); say $tap.perl

[22:20] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´Tap.new‚ê§¬ª

[22:20] <mornfall> well, .&await in the whenever $test_supp works, but i still have no idea why :\

[22:20] <timotimo> m: my $tap = Supply.from-list(1, 2).throttle(1, { die "hello" }).tap({ await $_ }, quit => -> $ex { say "the tap died with $ex.perl()" }); say $tap.perl; sleep 5;

[22:20] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´Tap.new‚ê§¬ª

[22:20] <timotimo> that's more interesting now

[22:20] <timotimo> oh, is that for when the supply that's tapped sends a Quit, rather than the tap itself

[22:21] <timotimo> anyway, react/whenever is a lot less fiddly than tapping manually, for many reasons

[22:22] <timotimo> and if you want to handle errors there, may i suggest map instead of tap?

[22:22] <mornfall> i have a react block

[22:22] <mornfall> i didn't realize that the react does something on top of tapping all the whenevers

[22:22] <timotimo> i guess i'll have to see some code, then :) :)

[22:23] <timotimo> react does all the subscription handling and lets you stay sane while handling errors and similar conditions

[22:23] *** coet joined
[22:23] *** p6bannerbot sets mode: +v coet

[22:23] <mornfall> gimme 5 minutes

[22:24] <timotimo> luckily, gimme is no longer a thing in perl6! :D

[22:24] <tobs> was that a keyword once?

[22:24] <tobs> for eager? :)

[22:25] <timotimo> it was a method involved in lazy lists

[22:25] <timotimo> but then there was the Great List Refactor

[22:25] <timotimo> which took away so much pain ...

[22:26] <mornfall> http://sprunge.us/vTKS9t this version works (well, fails correctly, due to the .&await ... what i don't understand is why it doesn't fail without that)

[22:26] <timotimo> m: say "hi".&await

[22:26] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´An operation first awaited:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Died with the exception:‚ê§    Can only specify Awaitable objects to await (got a Str)‚ê§      in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:27] <timotimo> heh

[22:28] *** Manifest0 left
[22:28] <timotimo> it doesn't look like you're stopping the react block when "stop" is called?

[22:28] <mornfall> i'm not super fond of the $fail_supply... normally it's tapped to report_and_die which does an exit()

[22:28] *** Manifest0 joined
[22:28] <mornfall> well, stop sends a signal to $proc, and then $proc.start should trigger

[22:28] <mornfall> which has done in it

[22:29] <timotimo> to me, fail_supply comes completely out of nowhere :)

[22:29] <timotimo> oh, it does have done!

[22:29] *** p6bannerbot sets mode: +v Manifest0

[22:29] <mornfall> http://sprunge.us/VwfTk1 is the $fail_supply plumbing

[22:31] <timotimo> so you would expect the tests to use your error and report_and_die subs when something goes wrong?

[22:31] <mornfall> just 'error', as long as autofail is True it should just die through the tap

[22:32] <mornfall> but the die in error is not so good :|

[22:32] <timotimo> i'm not sure why you have a fail_supply at all if you could just go with exceptions?

[22:32] <timotimo> also, i'm not sure what throttle is good for when you have it set to 1 :D

[22:33] <mornfall> timotimo: without the throttle, all tests try to run at once

[22:33] <mornfall> which doesn't go so well :p

[22:33] <timotimo> can you show me an example of that?

[22:33] <timotimo> oh, maybe i understand what you mean

[22:33] <mornfall> it just goes async( @cmd, ( &check1, &check2, &check3 ) )

[22:33] <timotimo> it might be better to use a supply block that emits the checks in turn

[22:34] <timotimo> rather than Supply.from-list

[22:34] <timotimo> then, it'd only run when it's finally tapped by the react/whenever block

[22:34] <mornfall> but they'll still all run at once, no?

[22:34] <timotimo> react/whenever will only ever run one thing at a time

[22:34] <timotimo> let me try it with a one-liner

[22:35] <timotimo> m: my $ts = Supply.from-list([{ say "one"; sleep 0.5; say "one done" }, { say "two"; sleep 0.5; say "two done" }]).throttle(1, { .() });

[22:35] <camelia> rakudo-moar 9f5cc8d1b: ( no output )

[22:35] <timotimo> m: my $ts = Supply.from-list([{ say "one"; sleep 0.5; say "one done" }, { say "two"; sleep 0.5; say "two done" }]).throttle(1, { .() }); react whenever $ts { .perl.say };

[22:35] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´one‚ê§one done‚ê§Promise.new(scheduler => ThreadPoolScheduler.new(initial_threads => 0, max_threads => 64, uncaught_handler => Callable), status => PromiseStatus::Kept)‚ê§two‚ê§two done‚ê§Promise.new(scheduler => ThreadPoolScheduler.new(initial_thread‚Ä¶¬ª

[22:35] <timotimo> this is with throttle

[22:35] <timotimo> m: my $ts = Supply.from-list([{ say "one"; sleep 0.5; say "one done" }, { say "two"; sleep 0.5; say "two done" }]).map({ .() }); react whenever $ts { .perl.say };

[22:35] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´one‚ê§one done‚ê§Bool::True‚ê§two‚ê§two done‚ê§Bool::True‚ê§¬ª

[22:35] <timotimo> this is without

[22:36] <timotimo> that seems to work fine, though?

[22:36] <mornfall> lemme comment out that throttle

[22:38] <mornfall> for a change it doesn't do anything without the throttle... i'm confused

[22:39] <mornfall> it just hits that Promise.in(10)

[22:39] <mornfall> oh, you did a .map instead of .throttle

[22:40] <timotimo> yes

[22:41] <mornfall> what i did was whenever $test_supp { .() }

[22:41] <mornfall> which runs everything at once

[22:41] <timotimo> interesting! let me see

[22:41] <mornfall> i think, anyway

[22:41] <timotimo> m: my $ts = Supply.from-list([{ say "one"; sleep 0.5; say "one done" }, { say "two"; sleep 0.5; say "two done" }]); react whenever $ts { .() };

[22:41] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´one‚ê§one done‚ê§two‚ê§two done‚ê§¬ª

[22:42] <mornfall> :\

[22:42] <timotimo> :/

[22:43] <mornfall> how many threads are available to camelia?

[22:43] <buggable> New CPAN upload: HTML-Canvas-0.0.5.tar.gz by WARRINGD http://modules.perl6.org/dist/HTML::Canvas:cpan:WARRINGD

[22:43] <mornfall> not that, it works okay when i paste your line into perl6

[22:43] <timotimo> m: await for ^10 { start { sleep 1 } }; say now - INIT now

[22:43] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unexpected block in infix position (missing statement control word before the expression?)‚ê§at <tmp>:1‚ê§------> 3await for ^107‚èè5 { start { sleep 1 } }; say now - INIT n‚ê§    expecting any of:‚Ä¶¬ª

[22:43] <timotimo> m: await do for ^10 { start { sleep 1 } }; say now - INIT now

[22:43] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´1.1897424‚ê§¬ª

[22:43] <timotimo> m: await do for ^16 { start { sleep 1 } }; say now - INIT now

[22:44] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´1.3259977‚ê§¬ª

[22:44] <timotimo> m: await do for ^32 { start { sleep 1 } }; say now - INIT now

[22:44] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´1.516654‚ê§¬ª

[22:44] <timotimo> m: await do for ^46 { start { sleep 1 } }; say now - INIT now

[22:44] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´MoarVM panic: Could not spawn thread: errorcode -11‚ê§¬ª

[22:44] <timotimo> m: await do for ^40 { start { sleep 1 } }; say now - INIT now

[22:44] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´MoarVM panic: Could not spawn thread: errorcode -11‚ê§¬ª

[22:44] <timotimo> m: await do for ^38 { start { sleep 1 } }; say now - INIT now

[22:44] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´MoarVM panic: Could not spawn thread: errorcode -11‚ê§¬ª

[22:44] <timotimo> m: await do for ^35 { start { sleep 1 } }; say now - INIT now

[22:44] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´MoarVM panic: Could not spawn thread: errorcode -11‚ê§¬ª

[22:44] <timotimo> m: await do for ^33 { start { sleep 1 } }; say now - INIT now

[22:44] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´MoarVM panic: Could not spawn thread: errorcode -11‚ê§¬ª

[22:44] <timotimo> m: await do for ^32 { start { sleep 1 } }; say now - INIT now

[22:44] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´1.5179599‚ê§¬ª

[22:44] <timotimo> 32 threads

[22:46] <mornfall> when i do it with whenever, i get failures left and right... with map, it goes smoothly

[22:47] <mornfall> how do i get a timestamp?

[22:48] <mornfall> i guess time works (p6doc -f time says no such thing exists :\)

[22:51] <mornfall> but time.say confirms the timing is okay, so map is another of those things that eats exceptions, presumably

[22:52] <mornfall> indeed, .map has the same effect as .throttle -- i need to .&await to get exceptions

[22:52] <mornfall> timotimo: oh, i also remember why i didn't use exceptions -- i don't know how to make a 'universal' handler

[22:52] <mornfall> i want to print the log before the program dies

[22:53] <timotimo> oh

[22:53] <mornfall> various attempts with QUIT did not bear fruit

[22:53] <timotimo> CATCH { default { .note } }

[22:53] <mornfall> yeah, but where? i don't want to write that 20 times :p

[22:53] <timotimo> QUIT runs when the react block dies with an exception, and i don't think you can "resurrect" it

[22:53] <mornfall> or was that END

[22:54] <timotimo> nah, END is for when the actual program ends

[22:55] <mornfall> oh i remember, what i had before was that error would directly call exit and i tried using END to kill the slave process

[22:56] <mornfall> which didn't work because END is a magical beast that is eval'd even if the program didn't reach the END block yet

[22:56] <mornfall> and then it tries to use variables that don't exist

[22:56] <mornfall> well END is not for me :p

[22:56] <timotimo> aye, END gets registered at compile time when the compiler parses it

[22:56] <timotimo> https://github.com/colomon/Phaser-ATEXIT - you may want this

[23:04] <mornfall> so the question becomes, can a module install a CATCH phaser for its importer?

[23:04] <timotimo> i think there's a way, but if i remember it correctly, it's totally a hack

[23:07] *** ryn1x_ left
[23:10] <AlexDaniel> m: await do for ^100 { start { sleep 1 } }; say now - INIT now

[23:10] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´MoarVM panic: Could not spawn thread: errorcode -11‚ê§¬ª

[23:10] <AlexDaniel> e: await do for ^100 { start { sleep 1 } }; say now - INIT now

[23:10] <evalable6> AlexDaniel, rakudo-moar 9f5cc8d1b: OUTPUT: ¬´2.45722987‚ê§¬ª

[23:10] <timotimo> it's probably a ulimit

[23:10] <AlexDaniel> yea but evalable has it too I think

[23:10] <timotimo> also: the thread pool scheduler should perhaps catch exceptions when trying to spawn a thread and just shrug it off?

[23:10] <AlexDaniel> but yes the thread poll scheduler is limited to 64 I think

[23:10] <AlexDaniel> pool*

[23:11] <AlexDaniel> e: await do for ^100 { start { sleep 1; say now } }; say now - INIT now

[23:11] <evalable6> AlexDaniel, rakudo-moar 9f5cc8d1b: OUTPUT: ¬´Instant:1544051540.369039‚ê§Instant:1544051540.380755‚ê§Instant:1544051540.391041‚ê§Instant:1544‚Ä¶¬ª

[23:11] <timotimo> aye, it is by default

[23:11] <evalable6> AlexDaniel, Full output: https://gist.github.com/787de69413b6acffbabe8fdf9d6a014a

[23:11] <timotimo> overridable with an env var

[23:12] <mornfall> it is not possible to have a CATCH for the entire react?

[23:12] <mornfall> hm, outside of react works, but not inside; okay i guess that works

[23:12] <AlexDaniel> timotimo: why is that shit so slow? :)

[23:12] <timotimo> hm, i would have thought it might be possible

[23:13] <AlexDaniel> timotimo: I mean, you could still see the 64 limit here https://gist.github.com/Whateverable/787de69413b6acffbabe8fdf9d6a014a#file-result-L64-L65

[23:13] <timotimo> if you put it outside, it'll run when the react itself dies with the exception

[23:13] <AlexDaniel> timotimo: but it's still like 10ms between prints‚Ä¶ what is it spending it's time on?

[23:14] <mornfall> yes, it also works inside a whenever block, but that's too specific

[23:14] <timotimo> it's probably waiting for the supervisor thread to notice it needs more threads

[23:14] <timotimo> e: PERL6_SCHEDULER_DEBUG=1 await do for ^100 { start { sleep 1; say now } }; say now - INIT now

[23:14] <evalable6> timotimo, rakudo-moar 9f5cc8d1b: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/Xp_DQMHcsT‚ê§Two ter‚Ä¶¬ª

[23:14] <evalable6> timotimo, Full output: https://gist.github.com/1d746a9253187dbd809870d425ee2704

[23:14] <timotimo> e: %*ENV<PERL6_SCHEDULER_DEBUG> = 1 await do for ^100 { start { sleep 1; say now } }; say now - INIT now

[23:14] <evalable6> timotimo, rakudo-moar 9f5cc8d1b: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/GcTEdNMzU1‚ê§Two ter‚Ä¶¬ª

[23:14] <evalable6> timotimo, Full output: https://gist.github.com/795179871300b95c58605a15fcfeeaef

[23:14] <timotimo> e: %*ENV<PERL6_SCHEDULER_DEBUG> = 1; await do for ^100 { start { sleep 1; say now } }; say now - INIT now

[23:14] <evalable6> timotimo, rakudo-moar 9f5cc8d1b: OUTPUT: ¬´Instant:1544051728.195933‚ê§Instant:1544051728.207031‚ê§Instant:1544051728.217304‚ê§Instant:1544‚Ä¶¬ª

[23:14] <evalable6> timotimo, Full output: https://gist.github.com/db737c0f2c2b32f0a4d1188ae6ff6b89

[23:14] <timotimo> e: %*ENV<RAKUDO_SCHEDULER_DEBUG> = 1; await do for ^100 { start { sleep 1; say now } }; say now - INIT now

[23:14] <evalable6> timotimo, rakudo-moar 9f5cc8d1b: OUTPUT: ¬´Instant:1544051735.037453‚ê§Instant:1544051735.04918‚ê§Instant:1544051735.059401‚ê§Instant:15440‚Ä¶¬ª

[23:15] <evalable6> timotimo, Full output: https://gist.github.com/2718a97d8e06ba48cec8ca7a58c99a99

[23:15] <timotimo> that's not how you turn that on

[23:15] <AlexDaniel> e: %*ENV<RAKUDO_SCHEDULER_DEBUG> = 1; run <perl6 -e>, ÔΩ¢await do for ^100 { start { sleep 1; say now } }; say now - INIT nowÔΩ£

[23:15] <evalable6> AlexDaniel, rakudo-moar 9f5cc8d1b: OUTPUT: ¬´(exit code 1) [SCHEDULER 26165] Created initial general worker thread‚ê§MoarVM panic: Could ‚Ä¶¬ª

[23:15] <evalable6> AlexDaniel, Full output: https://gist.github.com/60348863e810d277354cab5ce00caaf1

[23:16] <timotimo> huh

[23:16] <AlexDaniel> e: %*ENV<RAKUDO_SCHEDULER_DEBUG> = 1; run <perl6 -e>, ÔΩ¢await do for ^10 { start { sleep 1; say now } }; say now - INIT nowÔΩ£

[23:16] <evalable6> AlexDaniel, rakudo-moar 9f5cc8d1b: OUTPUT: ¬´[SCHEDULER 26416] Created initial general worker thread‚ê§Instant:1544051817.452081‚ê§Instant:‚Ä¶¬ª

[23:16] <evalable6> AlexDaniel, Full output: https://gist.github.com/08bfcf793f4bde0fe814d8484f8e9232

[23:17] <AlexDaniel> it makes sense, I guess it's limited to 80

[23:17] <AlexDaniel> in total

[23:17] <AlexDaniel> so 64 + something for the main program I guess?

[23:17] <AlexDaniel> ah there's also the bot process itself

[23:17] <timotimo> main thread, spesh thread, event loop thread

[23:19] <Geth> ¬¶ whateverable: 43a4e48262 | (Aleks-Daniel Jakimenko-Aleksejev)++ | services/whateverable@.service

[23:19] <Geth> ¬¶ whateverable: Bump TasksMax to 200

[23:19] <Geth> ¬¶ whateverable: 

[23:19] <Geth> ¬¶ whateverable: It seems to be relatively easy to go over the limit.

[23:19] <Geth> ¬¶ whateverable: review: https://github.com/perl6/whateverable/commit/43a4e48262

[23:19] <AlexDaniel> this will come into effect later

[23:20] <AlexDaniel> timotimo: but anyway, my understanding is that starting a thread, overhead for sleep and printing takes ‚âà10ms or so

[23:20] <timotimo> i disagree

[23:21] <AlexDaniel> cool but why?

[23:21] <mornfall> starting an OS thread is somewhat expensive

[23:21] <mornfall> also 200 threads will map 2G of memory for stacks (it'll not be paged in, but it's still a burden) :p

[23:22] <timotimo> the supervisor is responsible for adding threads

[23:22] <timotimo> it keeps a sliding window of cpu usage to figure out when adding a new thread is beneficial

[23:23] <timotimo> set RAKUDO_SCHEDULER_DEBUG_STATUS as well to see it spit out text

[23:23] <mornfall> what could cause a whenever Promise.in(10) to never fire?

[23:24] <timotimo> the react block could be shut down first, or another whenver block is blocking execution of the whole react

[23:24] *** kensanata left
[23:25] <AlexDaniel> e: say now; await do for ^10 { start { sleep 1; say now } }; say now - INIT now

[23:25] <evalable6> AlexDaniel, rakudo-moar 9f5cc8d1b: OUTPUT: ¬´Instant:1544052344.260376‚ê§Instant:1544052345.26539‚ê§Instant:1544052345.276414‚ê§Instant:15440‚Ä¶¬ª

[23:25] <evalable6> AlexDaniel, Full output: https://gist.github.com/2e89c5c5671adfb08ee4dacda9534735

[23:25] <mornfall> timotimo: hmm, so my assumption that react is concurrent was wrong :\ i don't know how i came to that conclusion

[23:25] <mornfall> something about the Supply.from-list firing all at once at me ... must have been some stupid mistake on my part

[23:25] <timotimo> it's one-at-a-time, so that accessing lexical variables defined inside the react block is safe

[23:26] <timotimo> maybe you had a higher number than 1 in the throttle? because that would execute multiple at the same time

[23:26] <mornfall> i added the throttle to get rid of the stuff coming in all at once (but of course i can no longer make it do that)

[23:27] <timotimo> i know that feeling :)

[23:28] <mornfall> but i can just start the thing instead before the react and sleep 10; in there

[23:28] <timotimo> oh

[23:28] <mornfall> which... didn't help?

[23:28] <timotimo> of course, the test code

[23:28] <timotimo> that's probably what's blocking the execution

[23:28] <timotimo> so here's an idea

[23:29] <mornfall> yes, the test is blocked because it's waiting for a response... the idea of the Promise.in(10) was to cut that off

[23:29] <timotimo> instead of whenever $code-comes-from-here { .() } you can do whenever $code-comes-from-here -> $task { whenever start { $task() } { .&await } }

[23:29] <timotimo> that will let it run in a thread and come back when it's done

[23:29] <timotimo> oh, but then you'll actually want to have a "wait until the one test is done" mechanism

[23:29] *** benjikun joined
[23:29] <timotimo> because *then* it will do them all at once otherwise

[23:30] <mornfall> yes :)

[23:30] *** pmurias left
[23:30] *** clarkema left
[23:30] *** p6bannerbot sets mode: +v benjikun

[23:31] <mornfall> but react won't block out a start block, will it?

[23:31] <mornfall> because it looks like it does just that :\

[23:31] <timotimo> "whenever start" is a way to "opt out" of the "one at a time" semantics

[23:31] <timotimo> because the code that's running is inside the start block, but dynamically not "inside the react/whenever"

[23:39] <mornfall> ok react is a lot more serial than i anticipated

[23:39] <mornfall> start { say "watching"; sleep 2; say "timeout"; stop; }

[23:39] <mornfall> says "watching" but never gets to "timeout" because the react block apparently mutexes it out

[23:40] <mornfall> i'm sad :\

[23:40] <timotimo> i'll need a code example for that

[23:41] <timotimo> it could very well be that it dies because you can't "done" inside the start, it has to be inside a whenever "directly"

[23:41] <timotimo> so you can whenever start { ... } { done }

[23:42] <mornfall> simple examples work

[23:42] <timotimo> m: react { whenever start { say "watching"; sleep 2; say "timeout" } { done }; whenever Promise.in(1) { say "hooray" } }

[23:42] <mornfall> is it possible that something that HTTP::UserAgent does interferes?

[23:42] <camelia> rakudo-moar 9f5cc8d1b: OUTPUT: ¬´watching‚ê§hooray‚ê§timeout‚ê§¬ª

[23:42] <timotimo> yeah don't they always ;(

[23:43] *** graphene left
[23:45] *** graphene joined
[23:45] *** p6bannerbot sets mode: +v graphene

[23:46] *** pecastro left
[23:50] <mornfall> okay i get it now

[23:51] <mornfall> so start does the thing it should do, just the stdio gets buffered

[23:51] <mornfall> it kills the slave process, but the react block is in a test which has a TCP connection opened to said process

[23:51] <mornfall> so it won't react to the process dying

[23:51] <mornfall> :|

[23:53] *** dct joined
[23:53] *** p6bannerbot sets mode: +v dct

[23:53] <timotimo> d'oh

[23:53] <mornfall> /o\

[23:54] <mornfall> this is crummy

[23:54] <mornfall> trying to whenever start $proc.start { given .&await ... } straight out deadlocks

[23:55] <mornfall> so react is basically a monitor for the whenever blocks

[23:55] <timotimo> that's weeeird :D

[23:55] <mornfall> (in the synchronisation sense of the word monitor)

[23:55] <timotimo> yeah, that ain't gonna work what you go tthere

[23:56] <timotimo> hm, but isn't awaiting inside a whenever supposed to allow code to run ...

[23:56] <mornfall> if those were coroutines, then that'd be how it works

[23:57] <mornfall> but start just makes a promise

[23:57] <timotimo> yeah, but $proc.start already returns a promise

