[00:00] <Railalis> in method TWEAK I am calling another method $!reset();

[00:00] <Railalis> and it essentially resets the array with default values for the game.

[00:00] <Railalis> I'm making backgammon 

[00:00] *** mcmillhj joined
[00:01] <TimToady> maybe a new game should get a new object...

[00:02] <Railalis> Sure, but then I still have to run this logic in TWEAK

[00:02] <TimToady> or declare your array with 'is default("a")' or some such

[00:03] <Railalis> Eh.. That's not really my style.

[00:03] <MasterDuke> m: my @a[4] is default("b")

[00:03] <camelia> rakudo-moar 874ead515: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤is default on shaped Array not yet implemented. Sorry.␤at <tmp>:1␤------> 3my @a[4] is default("b")7⏏5<EOL>␤    expecting any of:␤        constraint␤»

[00:03] <TimToady> aww

[00:05] <Railalis> ok I got things working for now..

[00:05] *** mcmillhj left
[00:05] <Railalis> now I have to figure out how to print this board.

[00:17] *** mcmillhj joined
[00:22] *** mcmillhj left
[00:33] *** mcmillhj joined
[00:36] *** timeless left
[00:37] *** timeless joined
[00:37] *** mcmillhj left
[00:42] *** Zoffix joined
[00:43] <Zoffix> mr_ron: did you delete your module or something? For some reason my local build didn't get it

[00:43] <Zoffix> Oh wait, just realized you wouldn't be able to delete it this fast, 'cause PAUSE has a 3-day delay... nm

[00:48] <Zoffix> :S got it now... Seems rsync doesn't rsync all the files or something :S

[00:53] *** gfldex joined
[00:56] *** Railalis left
[00:57] <timotimo> run it in an infinite loop, call it "eventual consistency"

[00:58] *** raynold joined
[01:00] *** raschipi joined
[01:01] *** raschipi left
[01:14] <Geth> ¦ modules.perl6.org: b3e67564c1 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/Source/CPAN.pm

[01:14] <Geth> ¦ modules.perl6.org: [REBUILD] Use original repo_url for dist url for CPAN dists

[01:14] <Geth> ¦ modules.perl6.org: 

[01:14] <Geth> ¦ modules.perl6.org: It was accidentally lost when we split dist and repo urls[^1],

[01:14] <Geth> ¦ modules.perl6.org: which resulted in site links being "N/A"

[01:14] <Geth> ¦ modules.perl6.org: 

[01:14] <Geth> ¦ modules.perl6.org: [1] https://github.com/perl6/modules.perl6.org/commit/f7fdf0b9cf5b0f67b802e155f5180d54edc56d60

[01:14] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/b3e67564c1

[01:15] <Zoffix> .tell mr_ron I fixed all the modules.perl6.org issues with your dist that I saw. Repo URL is already fixed and CPAN tarball URL will get fixed on next update (~2hr)

[01:15] <yoleaux> Zoffix: I'll pass your message to mr_ron.

[01:15] *** Zoffix left
[01:17] *** mcmillhj joined
[01:22] *** mcmillhj left
[01:27] *** comborico1611 left
[01:41] <ingy> e: sub foo($a) {}; foo()

[01:41] <evalable6> ingy, rakudo-moar 874ead515: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/LuTUnBbcr4␤Calling foo() will never work with declared signature ($a)␤at /tmp/LuTUnBbcr4:1␤------> 03sub foo($a) {}; 08⏏04foo()␤»

[01:41] <ingy> e: sub foo($a=Nil) {}; foo()

[01:41] <evalable6> ingy, rakudo-moar 874ead515: OUTPUT: «»

[01:41] <b2gills> m: sub foo($a=Nil) {}; say foo()

[01:41] <ingy> lizmat, b2gills: ^^ is what I was going for

[01:41] <camelia> rakudo-moar 874ead515: OUTPUT: «Nil␤»

[01:42] <ingy> $a=Nil makes arg optional

[01:42] <b2gills> m: sub foo($a is copy =Nil) {$a = Nil; $a}; say foo()

[01:42] <camelia> rakudo-moar 874ead515: OUTPUT: «(Any)␤»

[01:43] <b2gills> That is what I thought would happen as the default is Any

[01:44] <b2gills> m: sub foo( $a? ) {}; say foo() # optional

[01:44] <camelia> rakudo-moar 874ead515: OUTPUT: «Nil␤»

[01:44] <b2gills> m: sub foo( $a? ) {$a}; say foo() # optional

[01:44] <camelia> rakudo-moar 874ead515: OUTPUT: «(Any)␤»

[01:45] <ingy> ok

[01:46] * ingy looks forward to the day when all his perl6 (and every other language) code is generated :)

[01:46] <ingy> then I'll let b2gills code review the generator and all my perl6 will be best practice

[01:48] <ingy> I spent the last year writing compilers to generate Lua. Lua is the best code to generate that I've seen.

[01:48] <ingy> very regular and no ambiguities

[01:48] <ingy> pretty hard to mess up...

[01:49] <ingy> but Lingy will be even easier I think

[01:49] <ingy> since the encoding is just json

[01:50] *** mcmillhj joined
[01:50] * geekosaur smells famous last words in there somewhere

[01:51] <ingy> http://testml.org/playground/?type=example&name=math&view=compiler shows the Lingy generated for TestML (TestML compiles to Lingy)

[01:51] <ingy> geekosaur: it's interactive with scores of examples. try it out

[01:52] *** vike left
[01:52] <ingy> Lingy = Lisp + JSON. What could possibly go wrong?!

[01:53] *** vike joined
[01:53] <ingy> I have have a small module called RotN (pronounced RotN) that I wrote in all the TestML langs for my talks last week and next week

[01:54] <ingy> after $yapc I'm going to single source it as CafeScript that generates Lingy, and then I'll upload it to CPAN 6PAN PyPI and NPM

[01:55] <ingy> with tests in TestML of course

[01:55] *** mcmillhj left
[01:55] <ingy> CafeScript is a fork of CoffeeScript that generates Lingy instead of JS

[01:56] <ingy> Lingy targets every language that can do JSON. That should give me a good amount of languages to target.

[01:57] <ingy> at first the modules will dep on a lingy eval loop module

[01:57] <ingy> but as things catch on I'll do Lingy to native code generators

[01:57] <ingy> and if I can gen C code from Lingy then...

[01:59] *** molaf left
[02:01] *** espadrine left
[02:09] <ingy> how do I compare 2 boolean values?

[02:11] <rjbs> My naive quesiton is, "Isn't it with == ?"

[02:11] <ingy> e: False -- False

[02:11] <evalable6> ingy, rakudo-moar 874ead515: OUTPUT: «WARNINGS for /tmp/hxpRPLdX7E:␤Useless use of "-" in expression "False -- " in sink context (line 1)␤»

[02:11] <ingy> e: False == False

[02:11] <evalable6> ingy, rakudo-moar 874ead515: OUTPUT: «WARNINGS for /tmp/Euh_Mgqrrw:␤Useless use of "==" in expression "False == False" in sink context (line 1)␤»

[02:12] <ingy> == is numeric compare

[02:12] <ingy> I wish == were more polymorphic

[02:12] *** molaf joined
[02:12] <ingy> Ironically I'm need to know to implement my polymorphic == in TestML in p6

[02:14] <ingy> I guess I'll craft some crafty boolean logical expression

[02:17] <ingy> I think: $a ?? $a && $b !! not($a || $b)

[02:17] <ingy> seems crafty

[02:17] <ingy> open to suggestions

[02:19] *** Xliff joined
[02:19] <Xliff> \o

[02:19] <Xliff> I hope tonight finds everyone well.

[02:21] <ingy> define well :)

[02:22] <Xliff> Will this work for a statically defined struct in C: "my class A is repr('CStruct') { ... }; my $a := cglobal('gtk+', 'GtkWidgetClass', A)"

[02:22] <Xliff> ingy: Definition: "Well enough, i hope?"

[02:22] *** benjikun joined
[02:23] <benjikun> `Aborting due to build falure: digest::sha1::native:ver<0.03> (use —force-build to overide)`

[02:24] <benjikun> For some reason, when my bud tries to install digest::sha1::native 

[02:24] <Xliff> Please note that the "..." above matches the native call definitions necessary to be compatible with 'GtkWidgetClass' and not a stub.

[02:24] <benjikun> he's on 2018.05-86 for rakudo

[02:25] <benjikun> zef 0.4.4

[02:30] *** mr_ron left
[02:35] <ingy> welp, all my boolean test passing now. My logic for a true TestML value in p6 is currently: $value.defined and $value.^name ne 'Bool' || $value

[02:36] <ingy> basically None and Null and False are false

[02:36] *** mcmillhj joined
[02:36] <ingy> close to Ruby semantics

[02:38] <ingy> I think those semantics are best, when you have to explain truth to people from every language...

[02:41] *** mcmillhj left
[02:41] <Xliff> ingy: Just out of curiosity, why not $value !~~ Bool?

[02:42] <Xliff> m: (1 ~~ Bool).say

[02:42] <camelia> rakudo-moar 874ead515: OUTPUT: «False␤»

[02:42] <Xliff> m: (True ~~ Bool).say

[02:42] <camelia> rakudo-moar 874ead515: OUTPUT: «True␤»

[02:42] <rjbs> ingy: My next quesiton would've been "why not xor"?

[02:42] <rjbs> e: True xor True

[02:42] <evalable6> rjbs, rakudo-moar 874ead515: OUTPUT: «WARNINGS for /tmp/rD60KtTJie:␤Useless use of constant integer True in sink context (line 1)␤»

[02:42] *** benjikun left
[02:43] <rjbs> e: (True xor True) ?? "FALSE" :: "TRUE"

[02:43] <evalable6> rjbs, rakudo-moar 874ead515: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/csSieGNtDk␤Please …»

[02:43] <evalable6> rjbs, Full output: https://gist.github.com/48889e89c6638a73ff85dd27090be791

[02:43] <Xliff> e: (True xor True).say

[02:43] <evalable6> Xliff, rakudo-moar 874ead515: OUTPUT: «Nil␤»

[02:43] <rjbs> Okay, I'm gonna not try to eval anything more.

[02:43] <Xliff> m: (True xor True).say

[02:43] <camelia> rakudo-moar 874ead515: OUTPUT: «Nil␤»

[02:43] <Xliff> m: (True xor False).say

[02:43] <camelia> rakudo-moar 874ead515: OUTPUT: «True␤»

[02:43] <rjbs> m: (True !xor True).say

[02:43] <camelia> rakudo-moar 874ead515: OUTPUT: «True␤»

[02:43] *** rabbit_ joined
[02:43] <Xliff> Hmmm...

[02:43] <rabbit_> Hello

[02:43] <rjbs> So, that's my Official Probably Bullshit Ricardo Answer. ;-)

[02:44] <Xliff> \o rabbit_ 

[02:44] <rabbit_> Wow, a lot of people here ;)

[02:45] <rabbit_> Could someone help me with an issue regarding installing cro with zef? I have yet to find an answer.

[02:46] *** kjk joined
[02:48] <rabbit_> ===> Building [FAIL]: Digest::SHA1::Native:ver<0.03>

[02:48] <rabbit_> Aborting due to build failure: Digest::SHA1::Native:ver<0.03> (use --force-build to override)

[02:49] <rabbit_> anyone have any similar problems? 

[02:51] <MasterDuke> rabbit_: i think i've seen mention of something similar before (don't remember details though)

[02:51] <MasterDuke> what os and perl6 version do you have?

[02:52] <rabbit_> This is Rakudo version 2018.03 built on MoarVM version 2018.03

[02:52] <rabbit_> implementing Perl 6.c.

[02:52] <rabbit_> ubuntu 18.04

[02:52] <rabbit_> 4.15.0-23-generic

[02:53] *** kjk left
[02:53] <MasterDuke> you might need some -dev package installed

[02:56] <rabbit_> hmm, any clues which package that would be? I am going to try to install some older openssl dev packages

[02:57] <MasterDuke> rabbit_: also, you might try the --verbose option to zef and see if that says anything helpful

[02:57] *** BenGoldberg joined
[02:58] <rabbit_> benji is that you?

[02:59] <MasterDuke> me? if so, nope

[03:00] <rabbit_> Sorry. I thought it was someone else who I asked earlier. 

[03:00] <rabbit_> Alright so I tried install libssl1.0-dev tcl-tls openssl1.0

[03:00] <rabbit_> and after installing those packages cro install zef got a lot further 

[03:00] <rabbit_> and then I got:

[03:00] <rabbit_> ===> Testing [FAIL]: Cro::HTTP:ver<0.7.5>

[03:00] <rabbit_> Aborting due to test failure: Cro::HTTP:ver<0.7.5> (use --force-test to override)

[03:02] <rabbit_> trying install libhttp-async-perl

[03:02] <rabbit_> fingers crossed this time

[03:05] <lookatme> rabbit_, maybe add --/test 

[03:05] <MasterDuke> rabbit_: i think most of the cro devs are offline at this time, but you could also try in #cro

[03:06] <lookatme> they recommend you using `zef install --/test cro` install cro

[03:06] *** Xliff left
[03:06] <lookatme> maybe some test not ready currently

[03:17] <rabbit_> https://pastebin.com/gnzv3WaE

[03:20] *** mcmillhj joined
[03:23] <rabbit_> Thanks for the help/suggestions MasterDuke. It's getting pretty late here. I'm going to hit the sack. 

[03:24] *** mcmillhj left
[03:37] *** fascinum joined
[03:47] *** wamba joined
[03:49] *** fascinum left
[03:51] *** mcmillhj joined
[03:56] *** mcmillhj left
[03:59] *** flw joined
[04:01] *** fascinum joined
[04:03] *** subroot left
[04:08] *** mcmillhj joined
[04:10] *** flw left
[04:12] *** mcmillhj left
[04:27] *** Possum left
[04:36] *** mcmillhj joined
[04:38] *** wamba left
[04:41] *** mcmillhj left
[04:41] *** |oLa|1 joined
[04:41] *** sno left
[04:42] <wbn> is there an easy way to see if a module was loaded (e.g. Test) in the current context?

[04:43] *** |oLa| left
[04:44] *** molaf left
[04:50] *** mcmillhj joined
[04:51] *** curan joined
[04:55] *** mcmillhj left
[04:55] *** digitalw00t joined
[04:56] <digitalw00t> Evening!!

[04:56] *** digitalw00t left
[05:15] *** sauvin joined
[05:16] *** xtreak joined
[05:17] *** mcmillhj joined
[05:19] *** xtreak left
[05:20] *** BenGoldberg left
[05:22] *** mcmillhj left
[05:23] *** Possum joined
[05:24] <ingy> re the Boolean comparison conundrum I posted earlier...

[05:25] <ingy> not xor is the best thing I've found

[05:25] <ingy> e: for [True, False] -> $a { for [True, False] -> $b { say not($a ^^ $b) } }

[05:25] <evalable6> ingy, rakudo-moar 874ead515: OUTPUT: «True␤False␤False␤True␤»

[05:26] <ingy> my previous entry was

[05:27] <ingy> e: for [True, False] -> $a { for [True, False] -> $b { say $a ?? ($a && $b) !! not($a || $b) } }

[05:27] <evalable6> ingy, rakudo-moar 874ead515: OUTPUT: «True␤False␤False␤True␤»

[05:27] <ingy> still keen to see a more idiomatic solution

[05:28] <ingy> to restate, looking for boolean equality. ie $a == $b for Bool

[05:29] <ingy> rjbs: ^^ since you were vaguely interested

[05:33] <tobs> e: for [X] [True, False] xx 2 -> ($a, $b) { say $a == $b }

[05:33] <evalable6> tobs, rakudo-moar 874ead515: OUTPUT: «True␤False␤False␤True␤»

[05:33] <tobs> ingy: I didn't follow early, but == seems to work?

[05:34] <tobs> s/early/ealier/

[05:34] *** gkokmdam joined
[05:34] *** gkokmdam left
[05:35] <tobs> and it really should +True and +False are 1 and 0.

[05:35] <tobs> s/should/should because/

[05:36] <tobs> what's with my typing today?

[05:36] <ingy> e: say True == True

[05:36] <evalable6> ingy, rakudo-moar 874ead515: OUTPUT: «True␤»

[05:36] <ingy> e: say False == False

[05:36] <evalable6> ingy, rakudo-moar 874ead515: OUTPUT: «True␤»

[05:37] <ingy> e: say False == True

[05:37] <evalable6> ingy, rakudo-moar 874ead515: OUTPUT: «False␤»

[05:37] <ingy> tobs: I tried this earlier and failed

[05:37] <ingy> meh

[05:37] <ingy> what a waste of time

[05:38] <ingy> tobs: thanks!

[05:40] <ingy> tobs: you're 1-liner is pretty dope too... wish I understood it

[05:40] *** mcmillhj joined
[05:41] <ingy> mostly don't get [X]

[05:41] <tobs> ingy: it takes the cartesian product of the lists passed to it (which is [True,False],[True,False])

[05:42] <ingy> ah, nice

[05:42] <tobs> never use nested loops in P6 :)

[05:42] *** skids left
[05:43] <ingy> I suspect when all my perl6 code is generated from transpilers, there will be nested loops :)

[05:43] <ingy> and I can sleep at night, if that's the case

[05:43] <ingy> but until then, sure, ok

[05:44] * ingy googles for JSON in FORTH

[05:45] *** mcmillhj left
[05:46] <ingy> the 2nd hit involved Parrot! hahahaha https://github.com/parrot/forth/blob/master/ports/plumage/forth.json

[05:47] <ingy> I thought the Parrot was dead...

[05:48] <tobs> ingy: I'm new to P6 myself. just really like the many ways to prepare simple data structures like that

[05:48] *** sno joined
[05:51] <ingy> tobs: I just finished adding perl6 to my new test language that works in all (5 so far languages)

[05:51] <ingy> tobs: the code is here: https://github.com/testml-lang/testml/tree/master/lib

[05:51] <ingy> feedback on the p6 welcome

[05:52] <ingy> tobs: to see it in action (with the js port in the browser) I made this: http://testml.org/playground/

[05:53] <tobs> I remember catching bits about it in here. This is related to acme-ism, right?

[05:53] <ingy> the language compiles to JSON/Lisp (click Compiler) and then runs the tests as TAP (perl test output) or Mocha

[05:54] <ingy> right. the language has been around in various forms in Perl since 2004 or so

[05:54] <ingy> but now I've figured out how to get it to every language that can do JSON

[05:55] <ingy> which seems like all the important ones

[05:55] <ingy> tobs: anyway the perl6 is hot off the press: https://github.com/testml-lang/testml/tree/master/lib/perl6/TestML 

[05:56] <ingy> I thought Python was a pita, but p6 twice as much

[05:56] <ingy> but now its all done so I can enjoy the beer I'm drinking right now

[05:57] <tobs> nice, I'll look at it. We tried working on testing for Gambas (a BASIC language) but progress is slow. Maybe I can steal some bits here (and later unsteal them?)

[05:57] <ingy> if you care to glance over the p6, thoughts would be most appreciated

[05:57] <tobs> Gambas at least has a JSON module

[05:57] <ingy> great, let's port it!

[05:58] <tobs> but right now I have to get off to $uni o/

[05:59] <ingy> 859 total lines p6

[05:59] <ingy> catch you later

[06:00] <ingy> tobs: msg me the best url for Gambas

[06:14] *** xtreak joined
[06:15] *** domidumont joined
[06:18] *** psychoslave_ joined
[06:20] *** domidumont left
[06:21] *** domidumont joined
[06:23] *** mcmillhj joined
[06:28] *** mcmillhj left
[06:37] *** mcmillhj joined
[06:42] *** mcmillhj left
[06:50] *** HaraldJoerg joined
[06:54] *** robertle joined
[07:05] *** darutoko joined
[07:09] <masak> ingy: nice!

[07:10] <masak> ingy: the code looks very neat, but to me what stands out is the complete lack of type annotations. any reason for that? (besides maybe being close to other implementations)

[07:10] <masak> ingy: also curious why p6 was twice the PITA of Python (though I have my guesses)

[07:12] *** AlexDaniel left
[07:13] *** xtreak left
[07:15] *** xtreak joined
[07:16] *** sarna joined
[07:18] <sarna> hey, is there a tool that'd create a project template for me? like `cargo new` in Rust

[07:25] *** mcmillhj joined
[07:30] *** mcmillhj left
[07:30] <sacomo> sarna, take a look at https://github.com/gfldex/perl6-meta6-bin

[07:32] <sarna> sacomo: nice, thanks!

[07:36] *** dakkar joined
[07:36] *** rindolf joined
[07:39] <lizmat> sarna: personally, I use http://modules.perl6.org/dist/App::Mi6:cpan:SKAJI a lot

[07:39] <lizmat> also, there's the Perl 6 IDE of the future: https://commaide.com

[07:44] *** fascinum left
[07:50] <sarna> lizmat: sweet!

[07:50] <sarna> 120 euro though, oof

[07:50] <sarna> also, what's up with this naming? eg App::Mi6

[07:54] *** psychoslave_ left
[07:55] * masak .oO( we could tell you, but then we'd have to kill you )

[07:56] <masak> :P

[07:57] <ingy> hi masak 

[07:57] <masak> \o

[07:57] <masak> my favorite ingy singleton :>

[07:59] * sarna shivers

[07:59] <moritz> an ingyton :)

[08:00] <ingy> I came up with a new tagline for p6: "Perl 6 makes simple things simple, hard things possible, and everything in between a royal pain in the ass." :D

[08:00] *** mcmillhj joined
[08:00] <ingy> masak: do you mean type annotations for class properties?

[08:01] <TimToady> if you want polymorphic comparison, why aren't you using eqv or ===?

[08:01] *** ufobat joined
[08:02] <ingy> TimToady: who was that for?

[08:02] <TimToady> you, sirrah!

[08:02] <ingy> the bool thing?

[08:03] <TimToady> yep, eqv and === are intented to be polymorphic

[08:03] <TimToady> *d

[08:03] <TimToady> == isn't

[08:03] <masak> ingy: :P

[08:03] <masak> ingy: I meant

[08:03] <masak> m: my Int $i = 42

[08:03] <camelia> rakudo-moar 874ead515: ( no output )

[08:03] <ingy> I guess the answer is: because you didn't speak up earlier :)

[08:04] <masak> no need to blame TimToady for your code :P

[08:04] <ingy> well I asked earlier

[08:04] <masak> oh!

[08:04] <TimToady> I think the things that are "a royal pain in the ass" are really just things you don't know yet about Perl 6 :P

[08:04] <ingy> is all

[08:04] <ingy> I hit some hard corners

[08:05] <ingy> but sure

[08:05] <masak> stab in the dark: lists were involved somehow

[08:05] <TimToady> I'm a bit surprised nobody suggested eqv or ===, is all

[08:05] *** mcmillhj left
[08:05] <ingy> I don't think anyone was on chan at the time

[08:05] *** zakharyas joined
[08:05] <ingy> except rjbs

[08:05] <TimToady> that's not to say there aren't some hard corners here or there, of course

[08:06] <TimToady> you need to learn to sleep when the eurofolk are sleeping, is all :)

[08:06] * masak .oO( hard cor[e|ner] programming )

[08:06] *** Luneburg joined
[08:06] <ingy> might take a while

[08:06] <ingy> anyway I'm 100% passing with the p6 port

[08:06] <ingy> so I can heal now

[08:07] <TimToady> obviously you need more tests ;)

[08:07] <masak> time to write more tests! :P

[08:07] <masak> d'oh, TimToady is faster :P

[08:07] <ingy> that's easy, it's a language for writing tests

[08:07] <TimToady> we still have only 76,373 tests, alaas

[08:07] * masak .oO( so far, the tests cover the first 100% )

[08:07] <ingy> my point was the p6 == p5 == coffee == python == node

[08:08] <ingy> I had about a weeks worth of stuff to catch up on

[08:08] <ingy> Python took me an 18 hour day

[08:08] <ingy> p6 twice that

[08:10] <TimToady> yes, but next time it'll only take you half as long

[08:11] * ingy is looking forward to the Gambas port with tobs++

[08:11] <ingy> meet new people from far off languages!

[08:12] * TimToady starts driving toward SLC tomorrow...well, today...so better sleep while the eurofolk are awake

[08:12] *** zakharyas left
[08:13] *** mahafyi_ joined
[08:13] <ingy> probably the p6 array magics were the most troublesome

[08:13] * ingy is about halfway into a 3 week Utah stay

[08:13] <ingy> daoswald++ for the spare room

[08:14] *** mahafyi left
[08:14] *** mahafyi_ is now known as mahafyi

[08:14] <ingy> openwest conf was last week here

[08:14] *** zakharyas joined
[08:15] <ingy> masak: take a look at the playground to see what testml compiles into: http://testml.org/playground/?type=example&name=math&view=compiler

[08:16] <ingy> I call it Lingy, it's my favorite part

[08:16] <ingy> ok g'night my perl fiends o/

[08:16] *** mcmillhj joined
[08:16] <Luneburg> Is there a simple way to turn a string into an array?

[08:16] * ingy tries to make new fiends...

[08:17] <El_Che> Luneburg: split?

[08:17] <ingy> http://www.makingfiends.com/

[08:17] <ingy> [$str]

[08:18] *** subroot joined
[08:19] <Luneburg> El_Che: Looks a lot better than what I was trying to do (make a loop that loops through $string.comb, then concatenate to new strings, which are added as elements in an array)

[08:19] *** psychoslave joined
[08:20] <El_Che> Luneburg: there are several methods that work on strings depending on what you need

[08:20] *** mcmillhj left
[08:24] <Luneburg> El_Che: .split seems to work fine, but it returns a .Seq instead of an array?

[08:25] <Luneburg> ingy: *hugs*

[08:31] <masak> <ingy> probably the p6 array magics were the most troublesome

[08:31] <masak> called it :)

[08:32] <masak> m: my @things = "1, 2, 3, 4".split(", "); say @things.^name

[08:32] <camelia> rakudo-moar 874ead515: OUTPUT: «Array␤»

[08:32] <lizmat> m: my @a = "foobar".comb   # turning a string into an array

[08:32] <camelia> rakudo-moar 874ead515: ( no output )

[08:32] <masak> Luneburg: if you do it like that, it's an array

[08:32] *** zakharyas left
[08:32] *** zakharyas joined
[08:35] <lookatme> m: say "123".comb

[08:35] *** mahafyi_ joined
[08:35] <camelia> rakudo-moar 874ead515: OUTPUT: «(1 2 3)␤»

[08:35] <Luneburg> m: my @things = "1, 2, 3, 4".split(", "); say @things.^name; say @things.elems;

[08:35] <camelia> rakudo-moar 874ead515: OUTPUT: «Array␤4␤»

[08:35] <Luneburg> masak: Ah, that works :D

[08:35] <lookatme> m: dd "123".comb

[08:35] <camelia> rakudo-moar 874ead515: OUTPUT: «("1", "2", "3").Seq␤»

[08:36] *** mahafyi left
[08:36] *** mahafyi_ is now known as mahafyi

[08:39] *** zakharyas left
[08:42] *** mcmillhj joined
[08:44] *** xtreak left
[08:45] *** xtreak joined
[08:46] *** hami joined
[08:47] *** mcmillhj left
[08:50] *** xtreak left
[08:50] *** jmerelo joined
[08:50] <jmerelo> o/

[08:50] <masak> \o

[08:50] <Geth> ¦ doc/master: 7 commits pushed by (JJ Merelo)++

[08:50] <Geth> ¦ doc/master: 4682787a49 | Some reflow and un-capitalization

[08:50] <Geth> ¦ doc/master: 0db3e69bcf | Reflow and minor corrections

[08:50] <Geth> ¦ doc/master: 450d853717 | Correcting headers and some examples

[08:50] <Geth> ¦ doc/master: 8192aa4f87 | Clarifies variable name interpolation

[08:50] <Geth> ¦ doc/master: b76c4bed86 | Lowercasing unduly capitalized headers

[08:50] <Geth> ¦ doc/master: ad8e495a6b | Adds metaoperator to the list of word variants

[08:50] <Geth> ¦ doc/master: c53ef1150f | Metaoperator normalized

[08:50] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/534afbc9d526...c53ef1150f36

[08:51] <jmerelo> Just managed to connect from the train...

[08:51] <jmerelo> And arriving to station, so AFK now. See you!

[08:51] *** zakharyas joined
[08:52] *** scimon joined
[08:52] *** hami left
[08:56] *** jmerelo left
[09:11] *** xtreak joined
[09:19] *** mcmillhj joined
[09:22] <sarna> what's in .pm6 files? or is it just like .pl6

[09:24] *** mcmillhj left
[09:27] <lizmat> sarna: what's the difference between .pl and .pm in Perl 5 ?

[09:29] <sarna> lizmat: I don't know perl5 :(

[09:29] <lizmat> ah, ok

[09:29] <lizmat> well, the extensions an indication that they contain Perl 6 source code

[09:29] <sarna> I googled it though

[09:29] <lizmat> .pl6 is generally used to indicate runnable scripts

[09:30] <lizmat> .pm6 is generally used to indicate installable modues

[09:30] <lizmat> *modules

[09:30] <sarna> I've ran that Mi6 tool and ended up with a .pm6 file

[09:30] <sarna> idk if I'm supposed to create a .pl6 one or put my stuff into that .pm6

[09:30] <lizmat> yup, it does that  :-)

[09:30] * masak tends to use the empty string at the end of his runnable scripts :)

[09:30] <lizmat> masak: that works fine if you're not on Windows  :-)

[09:31] <masak> oh yeah, I've heard about that OS

[09:31] <lizmat> sarna: mi6 assumes you want to create an installable module

[09:31] <lizmat> so generally, that happens in the lib/Foo.pm6 file, if you did "mi6 new Foo"

[09:32] <sarna> I did App::Foo because I learned a thing :^)

[09:32] <lizmat> then you got an lib/App/Foo.pm6  :-)

[09:33] *** eliasr joined
[09:34] *** Luneburg left
[09:34] <sarna> thanks for taking your time lizmat

[09:35] <lizmat> sarna: yw

[09:39] *** mahafyi left
[09:48] *** aborazmeh joined
[09:48] *** aborazmeh left
[09:48] *** aborazmeh joined
[09:49] *** aborazmeh left
[09:52] *** w_richard_w left
[09:56] *** domidumont left
[10:05] *** subroot left
[10:11] *** sarna_ joined
[10:13] <sarna_> hmm, how to invoke a subroutine in my test file? I've tried func(), App::foo::func() and foo::func(). neither of them work

[10:14] <robertle> do you "use" your module?

[10:14] <yoleaux> 13 Jun 2018 00:14Z <MasterDuke> robertle: is your program (the one with all the regexes) available somewhere online?

[10:14] <sarna_> I have `use App::foo;` at the top of my file

[10:15] <robertle> and do you export from App::foo? e.g. "sub func() is export"?

[10:15] <robertle> but there are many ways to export: https://docs.perl6.org/language/modules

[10:16] <sarna_> do I have to export them to test them? heck :(

[10:16] <robertle> MasterDuke: unfortunately it's a work thing, but I could craft a similar case if it helps...

[10:19] <robertle> sarna_: there most certainly is a way to import something that has not been explicitely exported, e.g. for tests, but I have to admit that I don't know what it is. I guess a good start would be to see what '

[10:19] <robertle> import' actually does...

[10:20] <jnthn> Generally, the choice is either to export them or declare them `our` scope so they can be looked up fully qualified

[10:21] <jnthn> (subs default to `my` scope)

[10:23] *** AlexDaniel joined
[10:24] *** xtreak_ joined
[10:25] <sarna_> thanks robertle, I figured it out :)

[10:26] <sarna_> why can't I write `returns Str, is export`?

[10:26] <robertle> actually jnthn's point is far more interesting: that there is lexical scope in perl6 as well as namespace scope. that is a very powerful combination

[10:27] <jnthn> sarna_: Because it's incorrect syntax. :) Get rid of the ,

[10:27] *** ambs joined
[10:27] *** xtreak left
[10:27] <sarna_> jnthn: oh! thank you :)

[10:28] <robertle> is there some consensus on what the "preferred" return type declaration is? there just seem to be too many...

[10:28] <sarna_> I only know about --> and returns

[10:29] <robertle> I have used --> so far, but it looks kinda weird

[10:29] <sarna_> I prefer returns :) looks better

[10:29] <jnthn> I think those are the two ways in common use

[10:29] <sarna_> hm, what if I wanted to test a private sub? just declare it our?

[10:30] <jnthn> Well, then it's not private, but yes :)

[10:30] <sarna_> I can't test private functions then? :D

[10:30] <jnthn> Nope. Because if your test is calling it then it's not private.

[10:30] <sarna_> oh well

[10:31] <jnthn> The point of privacy (lexical scoping, private methods) in Perl 6 is that you can refactor them without having to look anywhere else in the program source code

[10:31] <robertle> it's kinda funny that of all languages, perl6 is the strictest abotu privateness ;)

[10:31] <sarna_> "I declare everything to be public, who am I not to trust my own code?" - my coworker

[10:33] <jnthn> robertle: I'm really glad of it though. Both as a Perl 6 programmer (I feel safer refactoring) and as an IDE developer (a bunch of useful bits of analysis are easier) :)

[10:34] <robertle> sure, and it makes more sense seen from the "lexical" point of view than from "private": in a language like java, a private class will still have a global name and can be addressed. you are just not allowed to do certain things. 

[10:34] <sarna_> jnthn: which IDE you're developing? commaide?

[10:34] <jnthn> sarna_: Yes

[10:34] <sarna_> if you don't mind me asking

[10:34] <sarna_> sweet!

[10:35] <robertle> a lexical scoped thing simply isn't addressable from outside that lexical scope. taht is very nice

[10:35] <jnthn> Well, it's not just me, but I'm to blame for parts of it :)

[10:36] *** molaf joined
[10:41] *** AlexDaniel left
[10:41] *** AlexDaniel joined
[10:42] <sarna_> does perl prefer to die early or return an empty collection or something?

[10:47] *** robertle left
[10:53] *** sarna_ left
[10:53] <tyil> what's the best way to sent an EOF to the standard input of a Proc?

[10:54] <ilmari> tyil: $proc.in.close()?

[10:55] <tyil> some things are so simple that I just forget to think about them

[10:55] <tyil> thanks ilmari 

[11:11] *** mahafyi joined
[11:14] *** zakharyas left
[11:21] *** raynold left
[11:24] <Geth> ¦ user-experience: rafaelschipiura assigned to robertlemmen Issue Distros don't offer Star. https://github.com/perl6/user-experience/issues/23

[11:24] *** xtreak_ left
[11:24] <Geth> ¦ user-experience: rafaelschipiura assigned to niner Issue Distros don't offer Star. https://github.com/perl6/user-experience/issues/23

[11:27] *** raschipi joined
[11:40] *** mahafyi left
[11:43] *** xtreak joined
[11:44] *** domidumont joined
[11:59] <jkramer> How can I compile a regex from a string? Something like Regex.new('foo.*') doesn't seem to exist

[12:01] <El_Che> rx

[12:02] <jkramer> Nevermind, found this https://docs.perl6.org/syntax/%20Regex%20Interpolation

[12:03] <El_Che> https://docs.perl6.org/language/regexes#index-entry-quote_%2F_%2F-quote_rx-quote_m-Lexical_Conventions

[12:11] *** domidumont1 joined
[12:13] <Geth> ¦ doc: 795b3d96db | (Will "Coke" Coleda)++ | xt/word-variants.t

[12:13] <Geth> ¦ doc: whitespace [no tabs]

[12:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/795b3d96db

[12:14] *** domidumont left
[12:29] *** zakharyas joined
[12:35] *** molaf left
[12:40] *** xtreak left
[12:44] *** kurahaupo left
[12:44] *** Schepeers left
[12:44] *** kurahaupo joined
[12:54] *** domidumont joined
[12:55] *** Schepeers joined
[12:57] *** domidumont1 left
[13:22] *** AlexDaniel left
[13:22] *** subroot joined
[13:23] <masak> m: my $rx-string = "fo+"; say so "fooooo" ~~ / <$rx-string> /

[13:23] <camelia> rakudo-moar 2fa08d5e6: OUTPUT: «True␤»

[13:24] <masak> standard injection disclaimer applies

[13:29] *** robertle joined
[13:42] * moritz injects a standard into Perl 6

[13:46] <raschipi> RFC 2549?

[13:48] <timotimo> that's a good one

[13:52] *** skids joined
[13:52] <moritz> I thought about ISO 8601

[13:59] <hahainternet> i think proper email address validation would be something worthy of a blog post, and worthy of inclusion, because i now have a list of 3 companies that will completely screw up your order / take your money and not send you stuff if you have a '+' in your address :'(

[14:01] <robertle> I have seen *@domain.com which is technically legal, but  wonder how many systems barf on it...

[14:01] <hahainternet> indeed, plus with the variety of new TLDs, the correct behaviour is to attempt a delivery and watch MX logs for the actual attempt

[14:02] <hahainternet> other than checking for @ and at least one \w.\w is about all you can do i think now

[14:02] <hahainternet> but that's why it'd make an interesting blog post :)

[14:02] <hahainternet> missed \ in that there regex too

[14:09] *** curan left
[14:18] <moritz> hahainternet is a valid email address

[14:19] <moritz> though if you want to accept it as input depends on context

[14:33] *** hami joined
[14:35] <buggable> New CPAN upload: FINALIZER-0.0.4.tar.gz by ELIZABETH http://modules.perl6.org/dist/FINALIZER:cpan:ELIZABETH

[14:36] *** MasterDuke left
[14:36] *** mcmillhj joined
[14:39] *** hami left
[14:39] *** molaf joined
[14:41] *** mcmillhj left
[14:52] *** mcmillhj joined
[14:52] *** mcmillhj left
[15:09] *** mcmillhj joined
[15:15] *** mcmillhj left
[15:15] *** jmerelo joined
[15:19] <[Coke]> IMO it's like checking file permissions. just try to do the thing (send the email) and then complain if it didn't work (get a response)

[15:23] *** molaf left
[15:23] <hoelzro> sarna, El_Che: sorry about the Linenoise bug - I haven't been able to reproduce it myself, so fixing it is tricky

[15:24] *** jmerelo left
[15:25] *** mcmillhj joined
[15:26] *** markoong joined
[15:27] *** robertle left
[15:30] *** mcmillhj left
[15:31] *** pmurias joined
[15:31] <pmurias> hi

[15:32] <b2gills> ingy: I think `method sum(+@list) {sum(|@list)}` is more efficiently written as `method sum(+list){ list.sum }`

[15:33] <pmurias> ingy: what's the state of funlang? we haven't heard of it in a while?

[15:33] *** mcmillhj joined
[15:36] *** perlpilot_ joined
[15:36] *** perlpilot_ is now known as perlpilot

[15:36] <ingy> pmurias: fanlang? I don't work for openresty anymore. 

[15:37] <ingy> but they didn't really work on it at all last year after May. it was pretty much stable for their needs.

[15:37] <ingy> b2gills: thx!

[15:38] <ingy> b2gills: how can you have a var w/o a sigil?

[15:39] <ingy> e: sub sum(+list){ list.sum }; say sum(1,2,3)

[15:39] <evalable6> ingy, rakudo-moar 2fa08d5e6: OUTPUT: «6␤»

[15:39] * ingy has a lot to learn here

[15:40] <lizmat> m: my \a = my $; a = 42; say a; a = 666; say a  # bit degenerate case, but there you go

[15:40] <camelia> rakudo-moar 2fa08d5e6: OUTPUT: «42␤666␤»

[15:40] <lizmat> what in fact you're doing there is create an alias to an anonymous container

[15:41] * ingy is a degenerate

[15:41] <pmurias> ingy: thanks :), it was potentially superinteresting the last time I heard of it 

[15:41] <lizmat> I've seen you cycling, before and after, I know  :-)

[15:42] <ingy> :*

[15:43] <ingy> lizmat: is there a place I can read more about what you are showing?

[15:43] <lizmat> https://docs.perl6.org/language/containers#index-entry-%5C_%28container_binding%29

[15:43] <ingy> masak: ping

[15:44] <ingy> lizmat: xo

[15:45] <buggable> New CPAN upload: Perl6-US-ASCII-0.6.5.tar.gz by RONALDWS https://cpan.metacpan.org/authors/id/R/RO/RONALDWS/Perl6/Perl6-US-ASCII-0.6.5.tar.gz

[15:45] * perlpilot is still surprised ingy's sub sum(+list) worked.

[15:45] <yoleaux> 11 Apr 2018 13:44Z <[Coke]> perlpilot: - any thoughts on a File::Temp option that doesn't bother opening a file handle?

[15:46] <lizmat> perlpilot: that's the single argument signature, that works like \, but with different semantics?

[15:46] <raschipi> I think they expected +@, just like *@

[15:46] <perlpilot> right.

[15:46] <perlpilot> re-reading about it now

[15:47] *** ExtraCrispy left
[15:47] <raschipi> m: sub sum(*list){ list.sum }; say sum(1,2,3)

[15:47] <camelia> rakudo-moar 2fa08d5e6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3sub sum(*7⏏5list){ list.sum }; say sum(1,2,3)␤»

[15:47] <raschipi> m: sub sum(+list){ list.sum }; say sum(1,2,3)

[15:47] <camelia> rakudo-moar 2fa08d5e6: OUTPUT: «6␤»

[15:47] <raschipi> m: sub sum(*@list){ list.sum }; say sum(1,2,3)

[15:47] <camelia> rakudo-moar 2fa08d5e6: OUTPUT: «0␤»

[15:47] <raschipi> m: sub sum(*@list){ @list.sum }; say sum(1,2,3)

[15:47] <camelia> rakudo-moar 2fa08d5e6: OUTPUT: «6␤»

[15:48] <ingy> perlpilot: that was b2gills' I just ran it because I was surprised too!

[15:49] <b2gills> ingy: sigilless variables are SSA (Static Single Assignment). I like to think of them as sort of like a runtime constant.

[15:50] * ingy really doesn't have time to unblown his mind with all this :)

[15:50] <b2gills> Usually they are defined with \  but as I often do I tried to bend the parser to see where it breaks. Very rarely does it actually break.

[15:51] <ingy> :)

[15:51] <geekosaur> not sure I call that break. think of \ as a hack for when it needs a sigil, but there + has the same effect as a sigil

[15:51] <geekosaur> but * is more ambiguous

[15:51] <b2gills> I mean the following works

[15:51] <b2gills> m: my $a = 42; if $a -> $b { say $b }

[15:51] <camelia> rakudo-moar 2fa08d5e6: OUTPUT: «42␤»

[15:52] <ingy> masak: I'd like to talk more about type annotations now that I'm awake

[15:52] *** robertle joined
[15:54] <b2gills> ingy: What are you trying to do with `method bool` as I think that would be a good starting point for learning about type annotations.

[15:54] <ingy> pmurias: the thing I'm working on now, TestML, is taking all the work I did for OpenResty to make fanlang and perl5 versions of the language, and open source them to all open langauges.

[15:54] <b2gills> The main use of type annotations is for multi methods/subs

[15:55] <ingy> pmurias: I redesigned the language completely at openresty and its pretty awesome

[15:55] <ingy> and I've made it even better in this rewrite

[15:56] <lizmat> rewrite++  #  hehe

[15:56] <ingy> they use the old TestML (CPAN Test::Base) almost exclusively to test over 100 repos

[15:57] <ingy> pmurias: including fanlang. 100% tested with the Test::Base

[15:57] <b2gills> multi method bool ( Bool:D $value ) { $value }; multi method bool ( Any:U --> False ){}; multi method bool ( Any:D --> True ){}

[15:58] <ingy> b2gills: ah perfect

[15:58] <b2gills> Also `$value.^name ne 'Bool'` may be better written as `$value !~~ Bool`, unless you want to dismiss all possible classes with the name Bool

[15:58] * ingy copies b2gills' code in to see if it can work

[15:59] <b2gills> m: sub new-bool (){ anon class Bool {} }; say new-bool().^name eq 'Bool'; say new-bool() ~~ Bool;

[15:59] <camelia> rakudo-moar 2fa08d5e6: OUTPUT: «True␤False␤»

[16:00] *** AlexDaniel joined
[16:00] *** eliasr left
[16:01] <raschipi> ingy, gimme a link to the repo

[16:01] *** kurahaupo left
[16:01] <ingy> raschipi: TestML?

[16:01] *** kurahaupo joined
[16:01] <raschipi> yep

[16:02] <b2gills> You may want to put in a `proto method` if you are overriding a method from a parent class to prevent it from dispatching to said parent class.

[16:02] <ingy> https://github.com/testml-lang/testml/tree/master/lib

[16:02] <ingy> b2gills: the cat method is also multi

[16:03] <ingy> *@args or @args

[16:03] <ingy> I'll try to figure that one out myself

[16:03] <b2gills> If you are only going to use one then I recommend to use +@

[16:04] <ingy> right

[16:05] <buggable> New CPAN upload: FINALIZER-0.0.5.tar.gz by ELIZABETH http://modules.perl6.org/dist/FINALIZER:cpan:ELIZABETH

[16:05] <raschipi> has TestML::TAP $.tap = TestML::TAP.new; can be written as has TestML::TAP $.tap .= new;

[16:05] <b2gills> :( @ ) takes one positional :( *@ ) flattens everything it can :( **@ ) flattens the first level, and :( +@ ) does the best of both :( @ ) and :( **@ )

[16:07] <b2gills> If you ask me, :( *@ ) should be the signature of last resort.

[16:08] *** psychoslave left
[16:08] <ingy> ok great. makes more sense

[16:09] <b2gills> I tend to bend the language more than most, because I am heavily active on https://codegolf.stackexchange.com/users/1147/brad-gilbert-b2gills?tab=answers

[16:10] <sarna> hoelzro: no worries :)

[16:10] * ingy golfed the rosettacode fizzbuzz to be the shortest fizzbuzz on rosetta

[16:10] <El_Che> ingy: does the golfed line include a compiler?

[16:10] <ingy> :P

[16:11] <Geth> ¦ doc: 35a3804b62 | (Elizabeth Mattijsen)++ | doc/Language/5to6-nutshell.pod6

[16:11] <Geth> ¦ doc: Add se section about P5built-ins

[16:11] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/35a3804b62

[16:11] <synopsebot_> Link: https://doc.perl6.org/language/5to6-nutshell

[16:11] <Geth> ¦ user-experience: rafaelschipiura assigned to MattOates Issue Distros don't offer Star. https://github.com/perl6/user-experience/issues/23

[16:23] <hoelzro> sarna, El_Che: I just installed Linenoise on a 18.04 box freshly made on Digital Ocean (rakudo 2018.04.1, with latest zef) - I still can't reproduce the issue =(

[16:23] <hoelzro> any guidance on how to reproduce it would be very much appreciated!

[16:24] *** dakkar left
[16:24] <El_Che> hoelzro: yes, I should be able to reproduce in something packaged like docker

[16:25] <hoelzro> I'll try the docker image - docker's acting up on my machine, though =(

[16:26] <El_Che> LeoNerd: it looks like a window from the sawfish era

[16:26] <El_Che> (it took me a while to find the name)

[16:26] <El_Che> oops

[16:26] <El_Che> laggy terminal on train

[16:26] <sarna> hoelzro: I'm on openSUSE tumbleweed with the same packages :( idk what's going on

[16:27] <hoelzro> so far this issue has been reported on OpenBSD, Ubuntu 18.04, and Windows 10

[16:27] <sarna> (the same versions I mean)

[16:27] <hoelzro> I'm at a loss as to what's going on - unfortunately I haven't been keeping up with perl 6 much lately =/

[16:27] *** AADDJTD joined
[16:30] *** scimon left
[16:31] *** sena_kun joined
[16:32] *** perlpilot left
[16:33] *** sno left
[16:35] *** stux|RC-- joined
[16:36] <ingy> b2gills, raschipi: https://github.com/testml-lang/testml/commit/4eb7685f424db95597b2add4956a998cbd3ccdbc

[16:36] <ingy> thanks

[16:37] <raschipi> I can't clone the repo and test it right now, will do more later.

[16:38] <El_Che> ingy: what's the usecase of Lingy besides "it's cool"?

[16:38] <El_Che> do you target a specific niche?

[16:39] *** bhm left
[16:39] <ingy> raschipi: `make test` will test 5 langs (including coffee) `make test-perl6-tap` will do just perl6. but be warned, this currently deps on `npm install -g testml-compiler`

[16:39] *** bhm joined
[16:39] <ingy> El_Che: you aren't going to $yapc next week are you?

[16:39] <raschipi> I won't install node if that's what you're suggesting.

[16:40] *** domidumont left
[16:40] <ingy> you'll have to wait for the binary compiler then

[16:40] <El_Che> ingy: no, decided not attend anything this year to finish other stuff

[16:40] <El_Che> no conferences for me

[16:40] <ingy> distributed test in cpan and 6pan don't need the compiler

[16:40] <ingy> but testing the repo does

[16:41] <El_Che> maybe your talk will be filmed

[16:42] <ingy> El_Che: I've used this style testing for almost all my software tests over last 15+ years (various versions of TestML)

[16:42] <ingy> the new YAML Test Suite for all YAML implementations is in TestML

[16:42] *** stux|RC-- left
[16:42] *** stux|RC joined
[16:44] <El_Che> ingy: By the way, I am fighting the fight at work against the toml heretics. Love yaml :)

[16:44] <ingy> entire companies (Socialtext, OpenResty) used this for almost all tests

[16:45] <ingy> Miyagawa (one of the top perl hackers of all time) used this extensively

[16:45] <ingy> as did many others

[16:46] <ingy> it's all about writing tests suites that are almost all data

[16:47] <ingy> testml tests usually only have 1 line of code. something like this: `*input.do-something-testy == *output` that can run over tons of in/out sets

[16:48] <El_Che> interesting

[16:48] <ingy> and the new testml works will work in almost every language that can handle json

[16:49] <ingy> json seems to be the commo ground. the testml type system is a superset of json's

[16:51] <ingy> El_Che: so to me, TestML is the cornerstone of Acmeism (and also the best way of writing tests I've found in just single language endeavors)

[16:52] <El_Che> ingy: the cert for https://testml.org/ is broken (in case it's yours)

[16:53] <ingy> Does anyone remember my friend Ryan King who escaped from the Texas insane asylum during the Austin YAPC and showed up at the hackathon?

[16:53] * ingy looks at TimToady

[16:54] *** molaf joined
[16:54] <ingy> Before he went bonkers, we were working together at Socialtext and invented Test::Base together (TestML 0.0.1)

[16:54] *** Schepeers left
[16:55] <ingy> I think I'll dedicate the testml book to him

[16:55] <lizmat> ingy: is he the one who recommended I should use tmux ?

[16:56] <ingy> wearing a white sheet and sandles? yes

[16:56] <lizmat> ah, yes, Jesus telling me to use tmux, I tell the story often  :-)

[16:56] <ingy> do you now use tmux?

[16:56] <lizmat> no

[16:56] <mcmillhj> heretic 

[16:56] <lizmat> hehe

[16:57] <ingy> oh well

[16:57] <El_Che> poor guy

[16:57] <El_Che> yaml drove him crazy

[16:57] <mcmillhj> I would rather people try to demonstrate why I should use something, than just telling me to 

[16:57] <ingy> he probably did

[16:57] <lizmat> afk&

[16:58] <ingy> he was an amazing programmer and mind. almost all my programming ideas stem to him.

[16:59] <ingy> I miss him

[17:00] <ingy> El_Che: I'll fix that cert now

[17:04] <jkramer> Nevermind, found this https://docs.perl6.org/syntax/%20Regex%20Interpolation

[17:04] <jkramer> Ups

[17:05] <ingy> El_Che: hopefully fixed

[17:06] <ingy> wait for DNS changes...

[17:06] <ingy> El_Che: and thanks

[17:08] *** sivoais left
[17:09] <raschipi> ingy: I hope he recovers.

[17:10] *** sivoais_ joined
[17:12] *** sivoais_ left
[17:15] <jkramer> m: say (1,1,1)..(2,2,2)

[17:15] <camelia> rakudo-moar 2fa08d5e6: OUTPUT: «3..3␤»

[17:15] <jkramer> What is happening here? ^

[17:15] <jnthn> m: say (1,1,1).Numeric

[17:15] <camelia> rakudo-moar 2fa08d5e6: OUTPUT: «3␤»

[17:15] <jkramer> Aaaah ok thanks :)

[17:16] <geekosaur> m: say (1,1,1)...(2,2,2)

[17:16] <camelia> rakudo-moar 2fa08d5e6: OUTPUT: «(2 2)␤»

[17:16] *** sivoais joined
[17:16] *** Khisanth left
[17:21] <b2gills> m: say {++$,++$,++$}...*eqv(3,3,3)

[17:21] <camelia> rakudo-moar 2fa08d5e6: OUTPUT: «((1 1 1) (2 2 2) (3 3 3))␤»

[17:21] <b2gills> m: say ++$ xx 3 Xxx 3

[17:21] <camelia> rakudo-moar 2fa08d5e6: OUTPUT: «((1 1 1) (2 2 2) (3 3 3))␤»

[17:30] *** Khisanth joined
[17:30] <sena_kun> http://ecosystem-api.p6c.org/projects.json has modules from github(apparently), is there an equivalent that consists of modules from cpan too(additionally to github ones)?

[17:31] <ingy> raschipi: thanks

[17:32] <ingy> El_Che: github says I need to wait 24 hours to enforce https. They need to issue a cert I think.

[17:32] <ingy> but the https works now

[17:33] *** Schepeers joined
[17:35] <buggable> New CPAN upload: Sparrowdo-VSTS-YAML-Solution-0.0.1.tar.gz by MELEZHIK https://cpan.metacpan.org/authors/id/M/ME/MELEZHIK/Perl6/Sparrowdo-VSTS-YAML-Solution-0.0.1.tar.gz

[17:35] <buggable> New CPAN upload: Sparrowdo-VSTS-YAML-Build-Assembly-Patch-0.0.1.tar.gz by MELEZHIK https://cpan.metacpan.org/authors/id/M/ME/MELEZHIK/Perl6/Sparrowdo-VSTS-YAML-Build-Assembly-Patch-0.0.1.tar.gz

[17:35] <buggable> New CPAN upload: Sparrowdo-VSTS-YAML-Artifact-0.0.1.tar.gz by MELEZHIK https://cpan.metacpan.org/authors/id/M/ME/MELEZHIK/Perl6/Sparrowdo-VSTS-YAML-Artifact-0.0.1.tar.gz

[17:37] *** pecastro joined
[17:38] <timotimo> sena_kun: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan.json seems to be what's used by zef for cpan stuff

[17:38] <sena_kun> timotimo, thanks a lot.

[17:45] <buggable> New CPAN upload: Sparrowdo-VSTS-YAML-Nuget-0.0.1.tar.gz by MELEZHIK https://cpan.metacpan.org/authors/id/M/ME/MELEZHIK/Perl6/Sparrowdo-VSTS-YAML-Nuget-0.0.1.tar.gz

[17:54] *** zakharyas left
[17:54] *** |oLa|1 left
[17:55] *** pecastro left
[18:05] <buggable> New CPAN upload: P5fileno-0.0.3.tar.gz by ELIZABETH http://modules.perl6.org/dist/P5fileno:cpan:ELIZABETH

[18:10] *** perlpilot joined
[18:12] *** pecastro joined
[18:25] *** sauvin left
[18:26] *** zachk joined
[18:27] *** zachk left
[18:27] *** zachk joined
[18:30] *** psychoslave joined
[18:33] *** sno joined
[18:35] *** xtreak joined
[18:36] *** vike left
[18:40] *** ponbiki joined
[18:40] *** ponbiki left
[18:42] *** perlpilot left
[18:43] *** ponbiki joined
[18:49] *** Xliff joined
[18:55] *** TeamBlast left
[18:57] *** TeamBlast joined
[19:05] <buggable> New CPAN upload: US-ASCII-0.6.6.tar.gz by RONALDWS https://cpan.metacpan.org/authors/id/R/RO/RONALDWS/Perl6/US-ASCII-0.6.6.tar.gz

[19:05] *** xtreak left
[19:15] <buggable> New CPAN upload: Inline-Perl5-0.35.tar.gz by NINE http://modules.perl6.org/dist/Inline::Perl5:cpan:NINE

[19:21] *** darutoko left
[19:27] *** |oLa| joined
[19:27] *** |oLa| left
[19:34] *** rindolf left
[19:35] <buggable> New CPAN upload: Sparrowdo-VSTS-YAML-Build-Assembly-Patch-0.0.2.tar.gz by MELEZHIK http://modules.perl6.org/dist/Sparrowdo::VSTS::YAML::Build::Assembly::Patch:cpan:MELEZHIK

[19:36] *** rindolf joined
[19:37] *** hami joined
[19:37] *** psychoslave left
[19:38] *** Xliff left
[19:42] *** hami left
[20:07] *** mcmillhj left
[20:08] *** skids left
[20:13] *** Railalis joined
[20:13] <Railalis> Question, is there ever a reason to return Nil to prevent sideeffects?

[20:17] <timotimo> you don't always want to leak the value of your last statement to the caller

[20:18] <ingy> `return;` returns Nil, yes?

[20:19] <Railalis> yes

[20:19] <Railalis> m: sub foo() returns Nil { return; }

[20:19] <camelia> rakudo-moar 2fa08d5e6: ( no output )

[20:19] <Railalis> m: sub foo() returns Nil { return; }; foo();

[20:19] <camelia> rakudo-moar 2fa08d5e6: ( no output )

[20:20] <jnthn> The main reason to use `--> Nil` is to make sure any side-effects of the final statement happen within the bounds of the current sub

[20:22] *** mcmillhj joined
[20:25] <Railalis> Are there any arguments as to the best way to declare return type?

[20:27] *** mcmillhj left
[20:27] *** vike joined
[20:27] <timotimo> the --> form allows more different things for syntax reasons

[20:28] <Railalis> do you do that with a trailing comma?

[20:29] <Railalis> m: sub foo(Int $bar, --> Nil) { return; }

[20:29] <camelia> rakudo-moar 2fa08d5e6: ( no output )

[20:29] <Railalis> that's kind of weird

[20:31] <jnthn> I've never written in that way :)

[20:31] <jnthn> *it

[20:31] <jnthn> Also, writing --> Nil and return; at the end is redundant

[20:31] *** vike left
[20:32] <jnthn> Since the idea of the --> Nil is to say the returned value should be Nil

[20:32] <pmurias> is there a strong preference against using the parcel bundler for rakudo.js?

[20:32] <pmurias> (or even any even weak opinions why that will be a bad idea) ;)

[20:32] <jnthn> (I write it `sub foo(Int $bar --> Nil) { }` to be clear)

[20:33] *** vike joined
[20:35] <buggable> New CPAN upload: Sparrowdo-VSTS-YAML-Nuget-0.0.2.tar.gz by MELEZHIK http://modules.perl6.org/dist/Sparrowdo::VSTS::YAML::Nuget:cpan:MELEZHIK

[20:37] *** rindolf left
[20:38] *** vike left
[20:38] <raschipi> m: sub foo(Int $bar --> Nil) { 3 }; say foo #won't return 3

[20:38] <camelia> rakudo-moar 2fa08d5e6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling foo() will never work with declared signature (Int $bar --> Nil)␤at <tmp>:1␤------> 3sub foo(Int $bar --> Nil) { 3 }; say 7⏏5foo #won't return 3␤»

[20:38] <raschipi> m: sub foo(Int $bar --> Nil) { 3 }; say foo 2 #won't return 3

[20:38] <camelia> rakudo-moar 2fa08d5e6: OUTPUT: «WARNINGS for <tmp>:␤Nil␤Useless use of constant integer 3 in sink context (line 1)␤»

[20:39] *** vike joined
[20:43] *** vike left
[20:44] *** Khisanth left
[20:52] *** mcmillhj joined
[20:57] *** mcmillhj left
[20:58] *** MasterDuke joined
[20:59] *** Mark04 joined
[21:04] *** Khisanth joined
[21:06] *** mcmillhj joined
[21:06] <lizmat> pmurias: my opinion in that respect is even weaker than weak

[21:11] *** mcmillhj left
[21:12] *** mcmillhj joined
[21:12] *** jmerelo joined
[21:14] *** raschipi left
[21:16] *** mcmillhj left
[21:19] <pmurias> lizmat: parcel seems to be working at least for nqp.js, OTOH all the js tools at stuff that's not built by gigantic tech company feels a bit shoddy ;)

[21:26] *** sarna left
[21:26] *** mcmillhj joined
[21:30] *** Railalis left
[21:31] *** mcmillhj left
[21:32] <rabbit_> Hello. I installed zef using the instructions from github.com/ugexe/zef.

[21:32] <rabbit_> $ git clone https://github.com/ugexe/zef.git

[21:32] <rabbit_> $ cd zef

[21:32] <rabbit_> $ perl6 -I. bin/zef install .

[21:32] <rabbit_> This creates a dot folder called .perl6 in ~

[21:32] <lizmat> that is correct, afaik

[21:33] <rabbit_> But I can't seem to call any of the commands from ~/.perl6/bin/

[21:33] <rabbit_> is there an export that I need to add to my bashrc?

[21:34] <lizmat> either you add zef/bin to your path, or you symlink zef/bin/zef to a directory that's in your path

[21:34] *** fascinum joined
[21:36] *** perlpilot joined
[21:36] <rabbit_> Thanks a bunch. I tried export PATH=$PATH:$HOME/.perl6/bin

[21:37] <lizmat> the ~/.perl6 directory is internal to Perl 6, it contains default precompiled modules, afaik

[21:42] <lizmat> afk&

[21:45] *** espadrine joined
[21:45] <Mark04> Hi all. I'm trying to learn the ins and outs of signatures and parameter constraints in p6

[21:46] <Mark04> How does one constrain the elements of an array parameter to a sub?

[21:46] *** mcmillhj joined
[21:46] <perlpilot> You mean like make sure it's an array of Int or array of Str?

[21:47] <Mark04> perlpilot: thanks for saying it way more clearly than I did :) yes exactly

[21:47] <Mark04> I'm browsing this but can't seem to make it work: https://docs.perl6.org/type/Signature#Type_Constraints

[21:49] <Mark04> I need a "where" clause I guess do I?

[21:51] *** sena_kun left
[21:51] *** mcmillhj left
[21:51] <Mark04> Oh, this works: sub takes_an_array_of_str( @array where { @array.all ~~Str } ) { blabla… }

[21:51] <Mark04> I think…

[21:53] <perlpilot> yeah, that should work.  Though, you might want to consider using a subset if "array of Str" is an important thing for you

[21:53] <Mark04> perlpilot: subset? is that like a user-defined type?

[21:54] <perlpilot> yes

[21:56] <Mark04> perlpilot: right yes I see how that would help in some cases. I was focused on the sub declarations in this case… but I'll remember subsets in the future thanks

[22:01] <MasterDuke> Mark04: your other option is https://docs.perl6.org/language/list#index-entry-typed_array

[22:01] *** jmerelo left
[22:05] *** mcmillhj joined
[22:06] <perlpilot> It's a wonder someone hasn't written a typing tutorial that eases people into this stuff. (or maybe it's written but I don't know about it)

[22:09] *** mcmillhj left
[22:12] <MasterDuke> https://perl6.party/post/Perl-6-Types--Made-for-Humans is a start

[22:15] *** HaraldJoerg left
[22:21] *** vike joined
[22:21] <perlpilot> yep, but that covers the "easy" cases  :-)

[22:21] <perlpilot> It's when you start trying to do things with arrays and hashes that the problems start

[22:23] <perlpilot> m: sub foo(Array[Int]) {};  foo([1,2,3]);   # I think people expect this to work

[22:23] <camelia> rakudo-moar 2fa08d5e6: OUTPUT: «Type check failed in binding to parameter '<anon>'; expected Array[Int] but got Array ($[1, 2, 3])␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[22:24] *** robertle left
[22:29] *** markoong left
[22:30] *** markoong joined
[22:32] *** Mark04 left
[22:35] *** kurahaupo_ joined
[22:36] *** kurahaupo left
[22:36] *** kurahaupo_ is now known as kurahaupo

[22:47] *** pmurias left
[22:53] <lucs> perlpilot: In that example, what would the correct sub declaration be for the expectation to be met?

[22:54] <lucs> Oh, just read the backscroll.

[23:01] *** mcmillhj joined
[23:06] *** mcmillhj left
[23:06] *** perlpilot left
[23:31] *** raschipi joined
[23:37] *** mcmillhj joined
[23:38] *** w_richard_w joined
[23:42] *** mcmillhj left
