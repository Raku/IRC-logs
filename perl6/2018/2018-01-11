[00:02] <AlexDaniel> timotimo: sorry, what is?

[00:03] <AlexDaniel> I can't possibly see any other way it would work

[00:03] <AlexDaniel> in this case, $foo is a *key*

[00:03] <AlexDaniel> so it must now its value at the time of creation, yeah?

[00:03] <AlexDaniel> unless I'm missing something

[00:04] <AlexDaniel> m: my $foo; my $p1 = a => $foo; my $p2 = $foo => ‘a’; $foo = 99; say $p1; dd $p2

[00:04] <camelia> rakudo-moar 0be9d5520: OUTPUT: «a => 99␤Pair $p2 = (Any) => "a"␤»

[00:04] <AlexDaniel> m: my $foo; my $p1 = a => $foo; my $p2 = $foo => ‘a’; $foo = 99; say $p1; say $p2

[00:04] <camelia> rakudo-moar 0be9d5520: OUTPUT: «a => 99␤(Any) => a␤»

[00:04] <AlexDaniel> ↑ golfed

[00:05] <AlexDaniel> I guess the question is whether “a => $foo” works the way it does by design?

[00:06] <AlexDaniel> c: all my $foo; my $p1 = a => $foo; my $p2 = $foo => ‘a’; $foo = 99; say $p1; say $p2

[00:06] <committable6> AlexDaniel, https://gist.github.com/a1e9e8501bc051595e182770ef90aa79

[00:07] <AlexDaniel> c: all my $foo; my $p1 = a => $foo; my $p2 = $foo => 'a'; $foo = 99; say $p1; say $p2

[00:07] <committable6> AlexDaniel, https://gist.github.com/0d6fead97b73e4befa208477f04708f6

[00:07] <jnthn> In various ways we've consider a Pair a bit like a one-item hash; seen in that light, the behavior fits

[00:08] <jnthn> (And for hashes it's of course very much by design)

[00:08] <jnthn> *considered

[00:08] <AlexDaniel> jnthn: what's the right way to reproduce it with a hash?

[00:08] <AlexDaniel> m: my $foo; my %h = a => $foo; $foo = 99; say %h

[00:08] <camelia> rakudo-moar 0be9d5520: OUTPUT: «{a => (Any)}␤»

[00:08] <AlexDaniel> ↑ that doesn't work

[00:08] <jnthn> You'd need an object hash

[00:09] <jnthn> Oh, wait, you mean the value

[00:09] <jnthn> Would need to bind

[00:09] <AlexDaniel> m: my $foo; my %h := :{a => $foo}; $foo = 99; say %h

[00:09] <camelia> rakudo-moar 0be9d5520: OUTPUT: «{a => (Any)}␤»

[00:09] <AlexDaniel> m: my $foo; my %h := (a => $foo); $foo = 99; say %h

[00:09] <camelia> rakudo-moar 0be9d5520: OUTPUT: «a => 99␤»

[00:09] <jnthn> No, bind the value into the hash with :=. Can't use the hash constructor syntax for this

[00:10] <jnthn> m: my %h; my $foo; %h<a> := $foo; $foo = 99; say %h

[00:10] <camelia> rakudo-moar 0be9d5520: OUTPUT: «{a => 99}␤»

[00:11] <AlexDaniel> as a user, I really didn't expect the pair to behave like this…

[00:11] <AlexDaniel> this I mean:

[00:11] <AlexDaniel> m: my $foo; my $p = a => $foo; $foo = 99; say $p

[00:11] <camelia> rakudo-moar 0be9d5520: OUTPUT: «a => 99␤»

[00:11] <jnthn> Also

[00:12] <jnthn> m: my $foo; my $p = a => $foo; $p.value = 42; say $p;

[00:12] <camelia> rakudo-moar 0be9d5520: OUTPUT: «a => 42␤»

[00:12] <jnthn> m: my $foo; my $p = a => $foo; $p.value = 42; say $foo

[00:12] <camelia> rakudo-moar 0be9d5520: OUTPUT: «42␤»

[00:12] <AlexDaniel> heh

[00:12] <jnthn> I remember making .value and l-value being discussed and done intentionally

[00:12] <jnthn> (Don't remember the arguments, just that it was discussed and purposefully made this way)

[00:24] <perlawhi1l> I'm trying to build from HEAD and getting this msg...

[00:24] <perlawhi1l> 'You asked me to build , but 2017.12-25-g1e2a3fb is not new enough to satisfy version 2017.12.1-25-g1e2a3fb'

[00:25] <timotimo> what is your build commandline?

[00:26] <perlawhi1l> it's an alias i run almost every day without issue until today... the alias is essentially this: -

[00:26] <perlawhi1l> git pull && perl Configure.pl --gen-moar --gen-nqp --backends=moar && make && make install

[00:27] *** Praise- joined
[00:27] *** Praise- left
[00:27] *** Praise- joined
[00:27] <perlawhi1l> it looks like the '.1' is missing after '12' in the msg: "2017.12-25-g1e2a3fb is not new enough"

[00:27] <AlexDaniel> hah!

[00:28] <jnthn> https://github.com/perl6/nqp/blob/master/tools/build/MOAR_REVISION # probably should not have had the .1 in there

[00:29] *** Zoffix joined
[00:29] <AlexDaniel> git describe includes .1

[00:29] <Zoffix> FWIW that was an automated bump that uses git describe

[00:30] <jnthn> *sigh*

[00:30] <jnthn> Next time I'll just wait for the next monthly :-)

[00:30] <Zoffix> :)

[00:30] <Zoffix> we just need to tweak the thing that complains about too old

[00:30] <jnthn> That'd be another solution :)

[00:31] <Zoffix> Also PSA: nobody bump MoarVM the last commit has some floppy bug in it (the current version set in NQP seems to be fine tho)

[00:31] <jnthn> I also put in a sanity check to `make release` to prevent the problem that caused the bad tarball happening again.

[00:31] * Zoffix looks into the too-old complainer

[00:31] <jnthn> I'd hope anyone bumping revisions would be testing that the bumps they're doing work. :)

[00:32] <Zoffix> Mine do a full stresstest :) <3 zscript

[00:32] <Zoffix> huggable: zscript

[00:32] <huggable> Zoffix, Helper script for Rakudo Perl 6 core development: https://github.com/zoffixznet/z

[00:33] <jnthn> Funny thing is, I thought I'd done a build with spesh stressing turned on

[00:33] <jnthn> I'm really hoping I just did that step wrong

[00:33] <jnthn> Otherwise we'll have a bug "not on my machine", which is always a pain.

[00:36] <Zoffix> perlawhi1l: what does `git describe --tags` in your MoarVM directory give you?

[00:37] <perlawhi1l> Zoffix: 2017.12-25-g1e2a3fb

[00:37] <Zoffix> dafuq

[00:38] <Zoffix> perlawhi1l: do git checkout master; git pull --tags; 

[00:38] <Zoffix> And I'm guessing your usual build will succeed then

[00:39] <Zoffix> do ^ that in MoarVM repo

[00:39] <AlexDaniel> c: run(:out, :cwd(‘data/moarvm’), ‘git’, ‘describe’).out.slurp.say

[00:39] <committable6> AlexDaniel, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Committable

[00:39] <AlexDaniel> e: run(:out, :cwd(‘data/moarvm’), ‘git’, ‘describe’).out.slurp.say

[00:39] <evalable6> AlexDaniel, rakudo-moar 0be9d5520: OUTPUT: «2017.12.1-26-g65098f05␤␤»

[00:40] <AlexDaniel> e: run(:out, :cwd(‘data/moarvm’), ‘git’, ‘--version’).out.slurp.say

[00:40] <evalable6> AlexDaniel, rakudo-moar 0be9d5520: OUTPUT: «git version 2.11.0␤␤»

[00:40] <Zoffix> AlexDaniel: does that thing build from scratch each time or does it build in the same repo, while pulling new things?

[00:40] <jnthn> sleep &

[00:40] *** markong left
[00:41] <AlexDaniel> Zoffix: like does it git clone the repo from scratch each time? No, it does git pull

[00:43] <AlexDaniel> e: run(:out, :cwd(‘/tmp/whateverable/moarvm-repo’), ‘git’, ‘describe’).out.slurp.say

[00:43] <evalable6> AlexDaniel, rakudo-moar 0be9d5520: OUTPUT: «␤»

[00:43] <Zoffix> e: run(:out, :cwd(‘/tmp/whateverable/moarvm-repo’), ‘git’, ‘describe’, :err).err.slurp.say

[00:43] <evalable6> Zoffix, rakudo-moar 0be9d5520: OUTPUT: «␤»

[00:43] <AlexDaniel> that's weird

[00:44] <AlexDaniel> e: run(:err, :cwd(‘/tmp/whateverable/moarvm-repo’), ‘git’, ‘describe’, :err).err.slurp.say

[00:44] <evalable6> AlexDaniel, rakudo-moar 0be9d5520: OUTPUT: «␤»

[00:44] <Zoffix> well, I'm just gonna add a `system_or_die('git', 'fetch', '--tags');` and I think that'll avoid this issue in the future and is probably harmless in cases where it isn't needed

[00:44] <AlexDaniel> ah it was there…

[00:45] <AlexDaniel> e: run(:out, :cwd(‘/tmp/whateverable/moarvm-repo’), ‘git’, ‘describe’).out.slurp.say

[00:45] <evalable6> AlexDaniel, rakudo-moar 0be9d5520: OUTPUT: «␤»

[00:45] <perlawhi1l> Zoffix: Thanks for the help. It still wasn't working but I think I messed up, so just blew away my nqp dir and re-running my alias. should be fine

[00:45] * AlexDaniel shrugs

[00:47] <Zoffix> perlawhi1l: hm, ok. I've just pushed the `--fetch` update.

[00:48] *** lelf` left
[00:48] <Zoffix> I mean --tags

[00:50] *** lookatme joined
[00:58] *** TreyHarris left
[01:01] <Zoffix> BTW, figured out my earlier QAST question. Yes, that rogue QAST is rouge, is from the buggy colonpair, and gets there because the colonpair gets compiled in a thing that makes blocks or something and pre-pushes them into the pad... and... *drumroll* yes, nuking that rogue QAST fixed the incorrect warning :)

[01:01] * Zoffix stresstests the fix

[01:01] <Zoffix> \o

[01:01] *** Zoffix left
[01:10] *** aborazmeh joined
[01:10] *** aborazmeh left
[01:10] *** aborazmeh joined
[01:15] *** wamba left
[01:16] *** nativecallable6 left
[01:16] *** nativecallable6 joined
[01:17] *** unicodable6 left
[01:17] *** quotable6 left
[01:17] *** unicodable6 joined
[01:17] *** ChanServ sets mode: +v unicodable6

[01:17] *** quotable6 joined
[01:17] *** ChanServ sets mode: +v quotable6

[01:31] *** cdg joined
[01:36] *** cdg left
[01:37] *** konsolebox left
[01:38] *** konsolebox joined
[01:58] *** troys is now known as troys_

[02:05] *** aborazmeh left
[02:05] *** FROGGS left
[02:13] *** aborazmeh joined
[02:13] *** aborazmeh left
[02:13] *** aborazmeh joined
[02:17] *** itaipu left
[02:17] *** FROGGS joined
[02:23] *** Kaiepi left
[02:23] *** Kaiepi joined
[02:25] *** troys_ is now known as troys

[02:26] *** cdg joined
[02:27] *** Kaiepi left
[02:27] *** Kaiepi joined
[02:29] *** itaipu joined
[02:31] *** cdg left
[02:32] *** armin_ joined
[02:33] *** Cabanossi left
[02:34] *** Cabanossi joined
[02:36] *** mniip joined
[02:40] *** TreyHarris joined
[02:43] *** cdg joined
[02:44] *** pilne left
[02:45] *** ilbot3 left
[02:50] *** wander joined
[02:50] <wander> HI

[02:51] <wander> how can perl6 `run` or `shell` be tolerant of bad exit code?

[02:51] <wander> The spawned command 'diff' exited unsuccessfully (exit code: 1)   in block <unit> at -e line 1

[02:51] <wander> although THIS diff fail, I'd like to continue to diff the rest

[02:52] <wander> https://gist.github.com/W4anD0eR96/9301aeffdacb896b6b0dacbe52b94ac1

[02:53] <wander> here is my code, used to be two `shell`, I try to use `run` but cannot workaround

[03:00] *** FROGGS_ joined
[03:01] *** ilbot3 joined
[03:01] *** ChanServ sets mode: +v ilbot3

[03:03] *** FROGGS left
[03:07] *** GregDonald_ joined
[03:07] *** GregDonald left
[03:07] *** GregDonald_ left
[03:08] <AlexDaniel> wander: just don't do it in sink context

[03:09] <tusooa> failure is an unthrown exception

[03:09] <AlexDaniel> it's not about Failures

[03:09] <AlexDaniel> it's the Proc object that gets sunk

[03:10] <tusooa> well maybe I will need more research on this

[03:10] <AlexDaniel> tusooa: it's a common question actually

[03:11] <AlexDaniel> and I don't see any docs for it… although I remember that something was written somewhere

[03:12] <wander> workaround it, thank you Alex

[03:12] <AlexDaniel> wander: $ = run …

[03:12] <wander> yes

[03:12] <wander> ^_^

[03:12] *** noganex joined
[03:14] <AlexDaniel> wander: wow you're doing something interesting

[03:14] *** itaipu left
[03:15] *** splatt9990 joined
[03:15] <AlexDaniel> wander: but please don't use ‘shell’ :) (as you immediately get shell injection through $test)

[03:16] <AlexDaniel> greppable6: shell\(\"

[03:16] <greppable6> AlexDaniel, https://gist.github.com/eb2737834ded5ecd9f4c63e42863b64d

[03:18] <wander> sure it is. it's a long ago when I could even not make code work with `run` :P

[03:19] <wander> anyway, shell is direct

[03:20] *** aborazmeh left
[03:25] <AlexDaniel> pft… last time I looked `shell` was only used in .t files

[03:25] <AlexDaniel> which is something I can close my eyes on

[03:42] *** splatt9990 left
[03:44] *** kerframil left
[03:45] *** troys is now known as troys_

[03:57] *** bloatable6 left
[03:57] *** bloatable6 joined
[04:24] *** cdg left
[04:25] *** cdg joined
[04:28] *** cdg_ joined
[04:30] *** cdg left
[04:31] *** Kaiepi left
[04:33] *** cdg_ left
[04:33] *** Kaiepi joined
[04:35] *** eliasr left
[04:42] *** Cabanossi left
[04:44] *** Cabanossi joined
[04:52] *** troys_ is now known as troys

[05:11] *** cdg joined
[05:14] *** cdg left
[05:14] *** cdg_ joined
[05:18] *** cdg joined
[05:19] *** cdg_ left
[05:19] *** [particle] left
[05:22] *** lizmat left
[05:23] *** cdg left
[05:25] *** cdg joined
[05:30] *** cdg left
[05:32] *** cdg joined
[05:37] *** cdg left
[05:42] *** lizmat joined
[05:46] *** khw left
[06:12] *** darutoko joined
[06:15] *** troys left
[06:21] *** FROGGS_ left
[06:38] *** [particle] joined
[06:51] *** lookatme left
[06:58] *** domidumont joined
[07:05] *** domidumont left
[07:06] *** domidumont joined
[07:22] *** lowbro joined
[07:22] *** lowbro left
[07:22] *** lowbro joined
[07:26] *** wamba joined
[07:26] *** rindolf joined
[07:32] *** domidumont left
[07:44] *** domidumont joined
[07:46] *** espadrine_ left
[07:53] *** astj_ left
[07:53] *** astj joined
[07:57] *** astj left
[07:57] *** astj joined
[08:12] *** rindolf left
[08:30] <DrForr> timotimo: Thanks, nuking.

[08:31] <DrForr> At least I've gotten something :)

[08:33] *** abraxxa joined
[08:36] *** zakharyas joined
[08:43] *** wamba left
[08:47] *** zakharyas1 joined
[08:47] *** zakharyas left
[09:04] *** itaipu joined
[09:09] *** itaipu left
[09:10] *** zakharyas1 left
[09:12] *** zakharyas joined
[09:14] *** itaipu joined
[09:23] *** ckraniak left
[09:33] *** itaipu left
[09:34] *** itaipu joined
[09:38] *** cdg joined
[09:39] *** cdg_ joined
[09:42] *** cdg left
[09:43] *** cdg_ left
[09:49] *** itaipu left
[09:52] *** AlexDaniel left
[10:11] *** zakharyas left
[10:11] *** zakharyas joined
[10:15] *** jkramer left
[10:15] *** cdg joined
[10:19] *** cdg left
[10:20] *** eliasr joined
[10:21] *** itaipu joined
[10:41] *** AlexDaniel joined
[10:49] *** AlexDaniel left
[10:54] *** itaipu left
[10:55] *** itaipu joined
[10:56] *** raschipi joined
[11:04] *** cdg joined
[11:08] *** cdg left
[11:08] *** itaipu left
[11:11] *** Hotkeys left
[11:33] *** GregDonald joined
[11:39] *** wamba joined
[11:45] *** committable6 left
[11:46] *** committable6 joined
[11:46] *** dudebbn joined
[11:54] *** wamba left
[11:54] *** cdg joined
[11:58] *** markong joined
[11:58] *** zakharyas left
[11:59] *** cdg left
[12:02] *** wander left
[12:02] *** mrsolo joined
[12:24] *** nebuchadnezzar joined
[12:27] *** literal joined
[12:53] <Geth> ¦ modules.perl6.org: dd82fd7987 | (Zoffix Znet)++ (committed using GitHub Web editor) | templates/root/help.html.ep

[12:53] <Geth> ¦ modules.perl6.org: Update info on `from:` search modifier

[12:53] <Geth> ¦ modules.perl6.org: 

[12:53] <Geth> ¦ modules.perl6.org: - Include "core" tag

[12:53] <Geth> ¦ modules.perl6.org: - "cpan" tag is already implemented

[12:53] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/dd82fd7987

[12:59] <Geth> ¦ doc: 0ced8615f7 | (Luca Ferrari)++ | doc/Language/control.pod6

[12:59] <Geth> ¦ doc: Labels can be also applied to 'loop' loops.

[12:59] <Geth> ¦ doc: 

[12:59] <Geth> ¦ doc: State it clearly and provide an example of usage with intra-loop labels.

[12:59] <Geth> ¦ doc: 

[12:59] <synopsebot> Link: https://doc.perl6.org/language/control

[12:59] <Geth> ¦ doc: Close #1691

[12:59] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0ced8615f7

[13:00] *** rindolf joined
[13:12] *** dakkar joined
[13:23] *** bdmatatu joined
[13:28] *** jsimonet joined
[13:35] *** pmurias joined
[13:39] *** mscha joined
[13:40] <mscha> m: role Bar { method bar { say "bar: ", self } }; enum Foo <x y z> does Bar; my Foo $f = y; $f.bar; # Shouldn't this work?

[13:40] <camelia> rakudo-moar b6004362b: OUTPUT: «No such method 'bar' for invocant of type 'Foo'␤  in block <unit> at <tmp> line 1␤␤»

[13:41] *** zakharyas joined
[13:45] *** Zoffix joined
[13:45] <Zoffix> m: role Bar { method bar { say "bar: ", self } }; enum Foo does Bar <x y z> ; my Foo $f = y; $f.bar;

[13:45] <camelia> rakudo-moar b6004362b: OUTPUT: «bar: y␤»

[13:45] <Zoffix> I imagine the other variant is an infix `does` that mixes into the list used to make enums out of maybe

[13:46] <mscha> Zoffix: thanks!

[13:47] <Zoffix> mscha: prolly worth a ticket to see what the other variant is doing and complain for it. Would you file one? https://github.com/rakudo/rakudo/issues/new

[13:47] <mscha> Zoffix: sure, I will.

[13:47] <Zoffix> mscha++

[13:47] *** Zoffix left
[13:52] <pmurias> do we have a docs page with all the backslash escapes allowed in a string?

[13:54] *** dct joined
[13:57] *** AlexDaniel joined
[13:58] *** cdg joined
[14:02] *** cdg left
[14:02] *** noganex left
[14:03] *** noganex joined
[14:04] <[Coke]> https://docs.perl6.org/language/quoting#Interpolation:_qq ?

[14:04] <mscha> m: role Bar { method bar { say "bar: ", self } }; enum Foo does Bar <x y z>; my Foo $f = y; $f.bar; # this works, so ...

[14:04] <camelia> rakudo-moar b6004362b: OUTPUT: «bar: y␤»

[14:04] <mscha> m: enum Foo does role { method bar { say "bar: ", self } } <x y z>; my Foo $f = y; $f.bar; # ... shouldn't this as well?

[14:04] <camelia> rakudo-moar b6004362b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Invalid typename 'role'␤at <tmp>:1␤------> 3enum Foo does role7⏏5 { method bar { say "bar: ", self } } <x␤»

[14:08] *** dct left
[14:09] *** cdg joined
[14:09] <jnthn> No

[14:09] <jnthn> The does trait parses a typename after it

[14:09] <mscha> So is there a way to mixin an anonymous role?

[14:09] <jnthn> No, though you can lexically scope a role and then just not export it

[14:10] <mscha> OK, thanks.

[14:10] <jnthn> One can mix in an anonymous role with the `does` operator at runtime, but not with the `does` trait at compile time

[14:11] *** donaldh joined
[14:13] *** ponbiki_ joined
[14:13] *** ponbiki_ left
[14:16] *** ponbiki left
[14:16] *** ponbiki joined
[14:17] <Geth> ¦ doc/master: 5 commits pushed by (Luca Ferrari)++

[14:17] <Geth> ¦ doc/master: dbe8ec5745 | Fix 'before' with 'after' in look-behind assertions.

[14:17] <Geth> ¦ doc/master: 8659e4248a | Document <?thing> lookahead assertion.

[14:17] <Geth> ¦ doc/master: c9c198ab51 | Use a coherent wording for look-{ahead|around}.

[14:17] <Geth> ¦ doc/master: 17c5511f45 | Link from the nutshell regexp to the lookahead assertion.

[14:17] <Geth> ¦ doc/master: 9622e683e6 | Fix some typos.

[14:17] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/0ced8615f7...9622e683e6

[14:20] *** ponbiki left
[14:23] <Geth> ¦ doc: 8fd3ee1698 | (Zoffix Znet)++ | doc/Language/quoting.pod6

[14:23] <Geth> ¦ doc: Document \qq[] escape in `q` quoting docs

[14:23] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8fd3ee1698

[14:23] <synopsebot> Link: https://doc.perl6.org/language/quoting

[14:28] <buggable> New CPAN upload: Scalar-Util-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Scalar-Util-0.0.1.tar.gz

[14:33] *** bwisti left
[14:46] *** abraxxa left
[14:47] *** pmurias left
[14:48] *** pmurias joined
[14:53] *** khw joined
[15:04] *** mscha left
[15:05] *** novalinium joined
[15:05] <novalinium> Is there a way to break a Promise.in?

[15:07] <raschipi> Create another promise that will either keep when the 'in' promise id kept or break when a promise you can break on command is broken.

[15:07] <jnthn> No; typically you'd my $breaker = Promise.new and then use Promise.anyof(Promise.in($seconds), $breaker)

[15:08] *** konsolebox left
[15:08] <buggable> New CPAN upload: epoll-0.1.tar.gz by CTILMES https://cpan.metacpan.org/authors/id/C/CT/CTILMES/Perl6/epoll-0.1.tar.gz

[15:08] <raschipi> Yes, what jnthn said.

[15:09] <novalinium> Gotcha, so if I wanted to schedule something to either be run ASAP after 10 seconds or be manually triggered earlier I'd use a Promise.anyof to schedule the timeout and call the promise.keep itself early if need be?

[15:10] <jnthn> Yes

[15:10] <novalinium> Elegant! tyty

[15:11] <raschipi> Don't forget Promise.then too.

[15:12] <novalinium> So Promise.anyof(Promise.in(TIME).then($breaker), $breaker)?

[15:12] <jnthn> No, you'd put the .then on what anyof returns

[15:12] <novalinium> Ah ok

[15:12] <raschipi> Promise.anyof(Promise.in(TIME), $breaker).then(TASK)

[15:12] <novalinium> Makes more sense now

[15:13] <jnthn> :)

[15:13] *** konsolebox joined
[15:14] <novalinium> (I'm writing some radio automation software as a project to learn Perl 6 and the concurrency model is v neat if confusing at times)

[15:15] <raschipi> Reading the docs now, I got .then wrong. It will run the chained promise if the earlier is broken. Is there a way to know if it was kept or broken in the later?

[15:16] <moritz> raschipi: it passes in the promise as the first argument

[15:16] <novalinium> I set the "keep" value of the later promise and check that

[15:16] <moritz> m: my $p = Promise.new; $p.then({say .status }); $p.break("foo")

[15:16] <camelia> rakudo-moar b6004362b: ( no output )

[15:16] <moritz> m: my $p = Promise.new; $p.then({say .status }); $p.break("foo"); await $p;

[15:16] <camelia> rakudo-moar b6004362b: OUTPUT: «Broken␤An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    foo␤      in block <unit> at <tmp> line 1␤␤»

[15:17] <moritz> m: my $p = Promise.new; $p.then({say .status }); $p.break("foo"); try await $p;

[15:17] <camelia> rakudo-moar b6004362b: OUTPUT: «Broken␤»

[15:17] <raschipi> Right, in this case it doesn't make much difference because the promise will always be kept, but it's good to know.

[15:17] <raschipi> In novalinium's case that is

[15:19] <novalinium> http://ix.io/E1M

[15:19] <novalinium> If anyone's interested in some sample of the code

[15:19] <raschipi> Very useful to use it as a pipeline too.

[15:21] <novalinium> Does anyone here use vim as their editor?

[15:22] <raschipi> I do.

[15:22] <novalinium> Is there a perl6 syntax file?

[15:22] <raschipi> Yes

[15:23] <MasterDuke> novalinium: yeah, i think it's included by default now

[15:23] <raschipi> It came with mine by default

[15:23] <novalinium> Oh awesome! I can enable syntax highlighting then :)

[15:24] <raschipi> :set ft? returns filetype=perl6 for me, just tested it. Stock Debian configuration.

[15:25] <raschipi> Doesn't work very well but it's trying.

[15:28] *** lowin joined
[15:36] *** lowbro left
[15:42] *** zakharyas left
[15:43] *** zakharyas joined
[15:52] *** troys joined
[15:55] *** wamba joined
[15:59] *** zakharyas left
[16:00] *** zakharyas joined
[16:11] *** squashable6 left
[16:12] *** squashable6 joined
[16:12] *** ChanServ sets mode: +v squashable6

[16:19] *** cdg left
[16:21] *** jkramer joined
[16:21] <jkramer> Ahoy

[16:22] <timotimo> ahoyhoy

[16:22] <novalinium> hoya

[16:25] <jkramer> Quick question: I have a Seq of Seqs of Seqs. How can I remove the outmost Seq so I only iterate over Seqs of Seqs? .flat seems to flatten all the seqs recursively

[16:26] <novalinium> Could you use .map on the outer Seq?

[16:27] <jkramer> Basically I want to do this:

[16:27] <jkramer> m: say (^3).combinations(2).map(*.permutations)

[16:27] <camelia> rakudo-moar b6004362b: OUTPUT: «(((0 1) (1 0)) ((0 2) (2 0)) ((1 2) (2 1)))␤»

[16:27] <jkramer> But iterate over the 6 inner seqs, not the 3 ones with 2 seqs in them each

[16:29] <moritz> m: say (^3).combinations(2)

[16:29] <camelia> rakudo-moar b6004362b: OUTPUT: «((0 1) (0 2) (1 2))␤»

[16:29] <moritz> m: say (^3).combinations(2).flat.map(*.permutations)

[16:29] <camelia> rakudo-moar b6004362b: OUTPUT: «(((0)) ((1)) ((0)) ((2)) ((1)) ((2)))␤»

[16:30] <jnthn> m: say (^3).combinations(2).map(*.permutations.Slip)

[16:30] <camelia> rakudo-moar b6004362b: OUTPUT: «((0 1) (1 0) (0 2) (2 0) (1 2) (2 1))␤»

[16:30] <moritz> jkramer: how about a simple nested loop?

[16:30] <moritz> m: for (^3).combinations(2) -> $c { do something with $c.permutations here }

[16:30] <camelia> rakudo-moar b6004362b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3> $c { do something with $c.permutations7⏏5 here }␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement …»

[16:31] <moritz> m: for (^3).combinations(2) -> $c { say $c.permutations.join }

[16:31] <camelia> rakudo-moar b6004362b: OUTPUT: «0 11 0␤0 22 0␤1 22 1␤»

[16:31] <jnthn> m: say (^3).combinations(2).map({ |.permutations }) # arguably prettier alternative

[16:31] <camelia> rakudo-moar b6004362b: OUTPUT: «((0 1) (1 0) (0 2) (2 0) (1 2) (2 1))␤»

[16:32] <jkramer> Ah nice, .map(|*.permutations) seems to do the job

[16:32] <jkramer> Thanks!

[16:32] <jkramer> Nested loops work too of course, but this seems nicer

[16:34] <timotimo> m: say (^3).combinations(2).permutations

[16:34] <camelia> rakudo-moar 631875fcd: OUTPUT: «(((0 1) (0 2) (1 2)) ((0 1) (1 2) (0 2)) ((0 2) (0 1) (1 2)) ((0 2) (1 2) (0 1)) ((1 2) (0 1) (0 2)) ((1 2) (0 2) (0 1)))␤»

[16:34] <novalinium> Can I pass a variable into a Promise?

[16:34] <novalinium> Actually, ignore me

[16:34] <raschipi> No

[16:35] <jnthn> jkramer: oh, didn't realize | would whatever-curry...nice :)

[16:38] *** cdg joined
[16:50] <moritz> if not, you could always .Slip, which does

[17:05] *** zakharyas left
[17:06] *** zakharyas joined
[17:08] <buggable> New CPAN upload: DB-Pg-0.1.tar.gz by CTILMES https://cpan.metacpan.org/authors/id/C/CT/CTILMES/Perl6/DB-Pg-0.1.tar.gz

[17:12] *** comborico1611 joined
[17:12] <comborico1611> Anyone decent with HTML?

[17:12] <novalinium> Sup

[17:12] <comborico1611> Quick question. 

[17:12] <comborico1611> Haha.

[17:13] <comborico1611> So, why feature does it add to use scope="row" for <th>

[17:13] <comborico1611> what feature*

[17:14] <comborico1611> My book didn't mention it, and neither did a quick search.  I suppose it is for Javascript?

[17:14] <novalinium> Its an accessibility feature, you can check the WCAG 2 spec

[17:14] <comborico1611> I'm just not seeing the association benefiting anything in pure HTML.

[17:14] <comborico1611> I see.  Thanks!

[17:14] *** domidumont left
[17:15] <novalinium> It baseically makes th semantically better when it isn't in a thead

[17:22] *** coverable6 left
[17:23] *** benchable6 left
[17:23] *** coverable6 joined
[17:23] *** ChanServ sets mode: +v coverable6

[17:23] *** benchable6 joined
[17:23] *** ChanServ sets mode: +v benchable6

[17:27] *** andrzejku left
[17:27] *** donaldh left
[17:39] *** bisectable6 left
[17:39] *** bisectable6 joined
[17:39] *** ChanServ sets mode: +v bisectable6

[17:44] <novalinium> What's the best way to track down the actual location of a "Malformed UTF-8" error

[17:44] <timotimo> like, how far into a given string or file it was?

[17:45] <DrForr> From outside perl6? I'd dump it into vim and use '8g8' which jumps to the first malformed UTF-8 byte.

[17:45] <timotimo> whoa, really?

[17:46] <timotimo> TIL

[17:46] <geekosaur> assuming it really is

[17:46] <geekosaur> how well does that work if the file isn't utf8?

[17:46] <DrForr> (TL;DR I have way too much experience at this.)

[17:46] <geekosaur> (and vim recognized that)

[17:47] <timotimo> fwiw, you can change the file handle to use utf8-c8 instead and that'll allow you to decode broken utf8 and get a string from it that turns back into the original data if you encode it back with utf8-c8, and it'll look funky in the places where invalid utf8 was encountered

[17:47] <DrForr> Dunno if you use other encoding types, but iconv can help there otherwise.

[17:48] <novalinium> Hmm, I'm not actually seeing anything from that, I'm not doing any kind of file I/O or mucking about with encodings, I think it might have to do with a HEREDOC, but not sure since its saying line 1 col 38

[17:49] <DrForr> Probably reporting relative to the start of the offending heredoc block thn.

[17:49] <DrForr> *then

[17:50] <timotimo> but how do you get broken utf8 into source code without the parser immediately complaining?

[17:50] <timotimo> rakudo will decode the whole program string right away, i believe?

[17:51] <timotimo> novalinium: do you get anything if you pass --ll-exception to the perl6 command?

[17:51] <comborico1611> Lunch!

[17:51] *** comborico1611 left
[17:51] <novalinium> timotimo: doesn't seem to make a difference

[17:52] <novalinium> It drops into SETTING::src/core/Buf

[17:53] <timotimo> yeah, that'd be the decode method

[17:53] <timotimo> where is it called from?

[17:53] *** dakkar left
[17:54] <novalinium> Trace: http://ix.io/E26

[17:54] <novalinium> AFK

[17:54] <timotimo> you're receiving data on a socket and that data's not valid utf8 it looks like

[17:54] <novalinium> I'll take a look

[17:54] *** novalinium left
[17:59] *** Kaiepi left
[18:00] *** Kaiepi joined
[18:01] *** ChoHag left
[18:22] *** darutoko left
[18:34] *** ChoHag joined
[18:42] *** adu joined
[18:47] *** zakharyas left
[18:52] *** comborico1611 joined
[18:53] *** Zoffix joined
[18:54] <Zoffix> Kaiepi: FWIW https://github.com/zoffixznet/z is aimed at core developers. If you're simply looking to *use* Rakudo Perl 6, then you likely want these instructions instead: https://github.com/zoffixznet/r

[18:54] <Zoffix> No idea of the instructions work on bsds tho :)

[18:55] <Zoffix> oh, that was meant for #perl6-dev

[18:55] <Kaiepi> i'm interested and learning and developing for as well

[18:55] <Zoffix> I need to up my chatlog spying game :)

[18:56] <Kaiepi> oh my

[18:59] <Kaiepi> main thing i'm aiiming to do is to get perl6 running smoothly on the bsds

[19:00] <El_Che> Zoffix: sent you a PR for mentioning Alpine packages as well

[19:00] <Zoffix> Merged. Thanks.

[19:01] <El_Che> ty

[19:02] *** cdg left
[19:04] *** Zoffix left
[19:08] <Kaiepi> small, but moarvm  should probably not just assume gcc or clang and call that

[19:08] <Kaiepi> when multiple versions can be installed or called something

[19:11] <Kaiepi> *else

[19:12] <raschipi> What are they called in BSD?

[19:13] *** ponbiki joined
[19:13] <geekosaur> ports lets you install multiple versions, with version suffixes

[19:14] <Kaiepi> i'm not sure about the name

[19:14] <Kaiepi> buy you can have gcc 5 and gcc4 at the same time

[19:15] <Kaiepi> and probably do since the userland has its own out-of-date version

[19:15] *** ponbiki left
[19:15] <Kaiepi> ohhhh that's where the jdk went

[19:16] * TimToady still has a fond spot for BSDs, so Kaiepi++

[19:16] <Kaiepi> <3

[19:17] <El_Che> TimToady-approved. What do you want on top of that :)

[19:17] <Kaiepi>  /usr/local/jdk

[19:18] <Kaiepi> what's with go npm and jdk for doing this

[19:18] <Kaiepi> not like butting the bins and libs where they usually go, just cramming the whole language there

[19:18] <geekosaur> for jdk, it;s mostly that it misbehaves if you don't do it the way it expects, which is that

[19:19] <Kaiepi> ah

[19:19] *** troys is now known as troys_

[19:19] <geekosaur> java has never been a wel behaved member of any ecosystem it's installed in

[19:21] <Kaiepi> abstractgenericmemberofsocietyfactory implements oracledelegate

[19:21] <raschipi> Linux distros also can install multiple GCC versions (usually because the kernel requires a specific version), but a link is created to the default.

[19:23] <El_Che> Kaiepi: is there a Travis-like service that support BSD's? 

[19:23] <timotimo> what, is mac osx not bsd enough for you? :P

[19:24] <El_Che> timotimo: if the bsd's can install *.pkg compile on macos, sure!

[19:25] <Kaiepi> i don't think there is

[19:25] <Kaiepi> but that's a great idea

[19:25] *** troys_ is now known as troys

[19:29] *** Guest14653 left
[19:29] *** syntaxman joined
[19:29] *** syntaxman left
[19:29] *** syntaxman joined
[19:32] *** awwaiid left
[19:39] *** syntaxman left
[19:39] *** greppable6 left
[19:39] *** greppable6 joined
[19:43] *** khisanth_ left
[19:43] <Geth> ¦ modules.perl6.org: 484ca3d1c3 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | lib/ModulesPerl6/Model/CoreModules.pm

[19:43] <Geth> ¦ modules.perl6.org: Add Telemetry / snapper to core modules

[19:43] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/484ca3d1c3

[19:54] *** Ven`` joined
[19:56] *** khisanth_ joined
[19:57] <sjn> Coordinated Universal      

[19:57] <sjn> oops :)

[19:57] <sjn> o/

[19:58] *** ponbiki joined
[19:58] <El_Che> sjn: good coolaid/gajan/coffee there

[19:59] *** syntaxman joined
[19:59] *** syntaxman left
[19:59] *** syntaxman joined
[20:04] <geekosaur> "it's about time"?

[20:15] *** zakharyas joined
[20:33] *** raschipi left
[20:38] *** adu left
[20:47] *** MasterDuke left
[20:49] <timotimo> .u times

[20:49] <yoleaux> U+2062 INVISIBLE TIMES [Cf] (<control>)

[20:49] <yoleaux> U+2297 CIRCLED TIMES [Sm] (⊗)

[20:49] <yoleaux> U+22A0 SQUARED TIMES [Sm] (⊠)

[20:49] <timotimo> u: times

[20:49] <unicodable6> timotimo, U+2062 INVISIBLE TIMES [Cf] (control character)

[20:49] <unicodable6> timotimo, U+2297 CIRCLED TIMES [Sm] (⊗)

[20:49] <unicodable6> timotimo, 646 characters in total: https://gist.github.com/bbc810c53572d245d73d02030de47aa2

[20:51] *** ChoHag left
[20:59] *** evalable6 left
[20:59] *** evalable6 joined
[21:03] *** adu joined
[21:08] *** ChoHag joined
[21:08] <buggable> New CPAN upload: DB-Pg-0.2.tar.gz by CTILMES https://cpan.metacpan.org/authors/id/C/CT/CTILMES/Perl6/DB-Pg-0.2.tar.gz

[21:08] *** bdmatatu left
[21:11] *** adu left
[21:11] *** bart_ joined
[21:11] *** Kaiepi left
[21:18] <buggable> New CPAN upload: Scalar-Util-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Scalar-Util-0.0.2.tar.gz

[21:21] *** bart_ left
[21:22] *** zakharyas left
[21:22] *** cdg_ joined
[21:22] *** Kaiepi joined
[21:22] *** zakharyas joined
[21:28] <buggable> New CPAN upload: List-Util-0.0.3.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/List-Util-0.0.3.tar.gz

[21:31] *** pilne joined
[21:33] *** troys is now known as troys_

[21:36] *** natrys joined
[21:36] <lizmat> http://theperlfisher.blogspot.nl/2018/01/abusing-multiple-dispatch-creatively.html   # DrForr++

[21:40] *** Kaiepi left
[21:43] *** jdoege left
[21:52] *** Kaiepi joined
[21:55] *** perlpilot joined
[21:57] *** comborico1611 left
[22:01] *** cdg joined
[22:04] *** cdg_ left
[22:07] *** Ven`` left
[22:09] *** samcv joined
[22:11] *** bart_ joined
[22:19] *** perlpilot left
[22:20] *** zakharyas left
[22:21] *** bart_ left
[22:21] <Geth> ¦ doc: a243285ab5 | (Will "Coke" Coleda)++ | doc/Language/control.pod6

[22:21] <Geth> ¦ doc: fix typo

[22:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a243285ab5

[22:21] <Geth> ¦ doc: 97f1ddef3d | (Will "Coke" Coleda)++ | xt/duplicates.t

[22:21] <Geth> ¦ doc: default default is a common phrase

[22:21] <synopsebot> Link: https://doc.perl6.org/language/control

[22:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/97f1ddef3d

[22:21] <Geth> ¦ doc: 9f0b1bb793 | (Will "Coke" Coleda)++ | xt/code.pws

[22:21] <Geth> ¦ doc: learn some code

[22:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9f0b1bb793

[22:22] *** natrys left
[22:23] *** mingdao joined
[22:32] *** statisfiable6 left
[22:32] *** releasable6 left
[22:32] *** statisfiable6 joined
[22:32] *** releasable6 joined
[22:32] *** reportable6 left
[22:32] *** reportable6 joined
[22:51] *** greppable6 left
[22:51] *** nativecallable6 left
[22:52] *** committable6 left
[22:52] *** bloatable6 left
[22:52] *** greppable6 joined
[22:59] *** Kaiepi left
[23:00] *** dct joined
[23:02] *** Kaiepi joined
[23:07] *** troys_ is now known as troys

[23:20] *** pmurias left
[23:25] *** espadrine_ joined
[23:29] *** dct left
[23:35] *** comborico1611 joined
[23:36] <comborico1611> Another cold-spell for Texas.

[23:37] <jnthn> By contrast, winter here is a bit mild for my liking. No snow.

[23:38] <jnthn> These things seem unevenly distributed :)

[23:39] <comborico1611> I definitely prefer a location with actual  seasons.  Here in Austin, the year just goes by.

[23:44] *** rindolf left
[23:58] *** comborico1611 left
