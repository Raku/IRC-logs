[00:03] *** mcmillhj joined
[00:08] *** pharv joined
[00:08] *** mcmillhj left
[00:12] *** pharv left
[00:13] *** mcmillhj joined
[00:18] *** mcmillhj left
[00:18] *** pharv joined
[00:22] <Herby_> m: say index "Find index of Year in this string", "Year";

[00:22] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «14␤»

[00:24] *** w_richard_w joined
[00:25] <Zoffix> m: say WHY "Life, the Universe and Everything":

[00:26] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «42␤»

[00:27] <Herby_> :)

[00:32] *** pharv left
[00:33] *** pharv joined
[00:34] *** SuicidalSunchip joined
[00:35] <SuicidalSunchip> is anyone here

[00:35] <comborico1611> hi

[00:36] <Herby_> o/

[00:37] <SuicidalSunchip> hello

[00:38] *** pharv left
[00:39] <comborico1611> Sunchips make my teeth feel really weird.  Like stripping the enamel.

[00:40] <comborico1611> I have to eat a big bag for it to do it, though.  I stoppped eatting sunchips.

[00:43] <comborico1611> I'm off to enjoy the sunset!

[00:43] *** comborico1611 left
[00:47] *** mcmillhj joined
[00:48] <SmokeMachine> m: say 42 ~~ Int; say 42 ~~ (* > 10); say 42 ~~ Int & (* > 10); shouldn't the last one return `all(True, True)`?

[00:48] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus term␤at <tmp>:1␤------> 3(* > 10); shouldn't the last one return 7⏏5`all(True, True)`?␤    expecting any of:␤        argument list␤        infix␤        infix stopper␤        p…»

[00:48] <SmokeMachine> m: say 42 ~~ Int; say 42 ~~ (* > 10); say 42 ~~ Int & (* > 10); #shouldn't the last one return `all(True, True)`?

[00:48] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «True␤True␤all((Int), True)␤»

[00:50] <SmokeMachine> m: say 42 ~~ 42 & (* > 10)

[00:50] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «all(42, True)␤»

[00:50] <SmokeMachine> m: say 42 ~~ (* > 10) & 42

[00:50] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «all(True, 42)␤»

[00:51] <SmokeMachine> m: say 42 ~~ (42 & Int)

[00:51] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «True␤»

[00:51] <SmokeMachine> m: say 42 ~~ 42 & Int

[00:51] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «True␤»

[00:51] <SmokeMachine> m: say 42 ~~ (* > 10) & (* < 100)

[00:51] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[00:52] *** mcmillhj left
[01:06] *** mcmillhj joined
[01:11] *** mcmillhj left
[01:11] *** cozachk left
[01:16] *** Praise left
[01:17] *** mcmillhj joined
[01:22] *** mcmillhj left
[01:23] *** Praise joined
[01:23] *** Praise left
[01:23] *** Praise joined
[01:29] *** pharv joined
[01:33] *** espadrine left
[01:33] *** w_richard_w left
[01:34] *** w_richard_w joined
[01:36] *** mcmillhj joined
[01:38] *** vike left
[01:41] *** mcmillhj left
[01:50] *** ilbot3 left
[01:51] <Zoffix> m: say 42 ~~ Int; say 42 ~~ (* > 10); say 42 ~~ Int & ((* > 10));

[01:51] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «True␤True␤True␤»

[01:51] <Zoffix> SmokeMachine: you were closing over the `&` op

[01:51] <Zoffix> m: say ((Int & (* > 10))).^name

[01:51] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «WhateverCode␤»

[01:52] <Zoffix> m: say (Int & ((* > 10))).^name

[01:52] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «Junction␤»

[01:52] <SmokeMachine> Zoffix: thats it!! thanks!

[01:52] <Zoffix> And ~~ collapses Junctions, so it's just a True, not all(True, True)

[01:55] *** mcmillhj joined
[01:56] *** ilbot3 joined
[01:56] *** ChanServ sets mode: +v ilbot3

[02:00] *** mcmillhj left
[02:01] <Herby_> hmm.

[02:01] <Herby_> I'm trying to get a grammar token to match year (ex: 2001), as long as the year is not at the start of the string

[02:01] <Herby_> "Party 1999" -> TRUE,  "2001 Space" -> False

[02:02] <Herby_> token year { <[ \[ \(]>? <!after ^> [19 <[0..9]> | 20 <[0..1]>] <[0..9]> <[ \] \)]>? }

[02:02] <Herby_> sorry

[02:03] <Herby_> token year { <[ \[ \(]>? [19 <[0..9]> | 20 <[0..1]>] <[0..9]> <[ \] \)]>? }

[02:03] <Herby_> that is how it currently sits

[02:03] <Herby_> I tried that <!after ^> pattern, but that didnt quite work

[02:03] <Herby_> any ideas?

[02:11] <geekosaur> I'd have said <after .> but would it have that context?

[02:12] <geekosaur> actually, it should, I'm overthinking it

[02:13] <Herby_> geekosaur: you're right. I'm trying to capture an edge case and its messing with my other matches

[02:13] <Herby_> i'll figure out a different way to approach it

[02:14] <geekosaur> did you try it? I have no idea what you're trying to do but the rephrased after might work

[02:15] <geekosaur> (instead of trying to say "after start of line", say "after any character". positive matches are more likely to do what you expect than negative ones)

[02:15] *** mcmillhj joined
[02:16] <[Coke]> https://docs.perl6.org/%20tilde.html

[02:17] <[Coke]> looks like quite a few pages with leading spaces. (many more in the coke/build branch)

[02:18] <Herby_> geekosaur: I did. it does work as described but then a later token starts failing instead

[02:18] <Geth> ¦ doc/coke/build: 10be05c24c | (Will "Coke" Coleda)++ | 3 files

[02:18] <Geth> ¦ doc/coke/build: Attempt to process all pod files

[02:18] <Geth> ¦ doc/coke/build: 

[02:18] <Geth> ¦ doc/coke/build: Unsure if the right move here is to convert everything to string when needed, or if we

[02:18] <Geth> ¦ doc/coke/build: should have converted it to string when trying to save it.

[02:18] <Geth> ¦ doc/coke/build: review: https://github.com/perl6/doc/commit/10be05c24c

[02:20] *** SuicidalSunchip left
[02:20] *** mcmillhj left
[02:26] *** pilne left
[02:27] *** mcmillhj joined
[02:32] *** mcmillhj left
[02:35] *** w_richard_w left
[02:35] *** w_richard_w joined
[02:45] *** mcmillhj joined
[02:50] *** mcmillhj left
[02:57] *** simpleseeker left
[02:59] *** simpleseeker joined
[03:02] *** mcmillhj joined
[03:07] *** mcmillhj left
[03:12] *** dugdig left
[03:13] *** mcmillhj joined
[03:17] *** mcmillhj left
[03:27] *** mcmillhj joined
[03:32] *** mcmillhj left
[03:38] *** khw joined
[03:38] *** dugdig joined
[03:39] *** titsuki_ joined
[03:39] *** titsuki left
[03:45] *** mcmillhj joined
[03:50] *** mcmillhj left
[03:51] <Herby_> tyil: Looking at your "Introduction to Application Programming" article, and under the section of "creating library", you say to use "touch lib" but your code uses "touch unit"

[03:51] <Herby_> just an fyi

[03:58] *** pharv left
[03:58] *** pharv joined
[04:05] *** mcmillhj joined
[04:09] *** mcmillhj left
[04:18] *** mcmillhj joined
[04:22] *** mcmillhj left
[04:42] *** curan joined
[04:47] *** mcmillhj joined
[04:52] *** mcmillhj left
[05:00] *** Kaiepi left
[05:01] *** fbynite joined
[05:03] *** fbynite left
[05:04] *** mcmillhj joined
[05:04] *** espadrine joined
[05:09] *** mcmillhj left
[05:09] *** pharv left
[05:10] *** pharv joined
[05:11] *** char_var[buffer] joined
[05:14] *** mcmillhj joined
[05:16] *** sauvin joined
[05:18] *** ufobat joined
[05:19] *** mcmillhj left
[05:34] *** mcmillhj joined
[05:39] *** mcmillhj left
[05:41] <tyil> Herby_: nice catch, thanks!

[05:51] *** mcmillhj joined
[05:56] *** mcmillhj left
[05:56] *** khw left
[06:01] *** wamba joined
[06:03] *** mcmillhj joined
[06:07] *** mcmillhj left
[06:09] *** troys left
[06:21] *** mcmillhj joined
[06:26] *** mcmillhj left
[06:31] *** domidumont joined
[06:31] *** mcmillhj joined
[06:32] *** dustinm` joined
[06:36] *** mcmillhj left
[06:38] *** rindolf joined
[06:38] *** domidumont left
[06:39] *** domidumont joined
[06:39] *** pharv left
[06:43] <ufobat> in perl5 'x 2' would also double a list. e.g. (1..3) x 2 

[06:43] <ufobat> what would be the perl6 way of doing this?

[06:43] <ufobat> m: (1..3) x 2

[06:43] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "x" in expression "(1..3) x 2" in sink context (line 1)␤»

[06:43] <ufobat> m: say (1..3) x 2

[06:43] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «1 2 31 2 3␤»

[06:43] *** dct joined
[06:44] <ufobat> x seems to stringify it

[06:46] <geekosaur> xx?

[06:46] <geekosaur> m: say (1..3) xx 2

[06:46] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «(1..3 1..3)␤»

[06:46] <geekosaur> m: say |(1..3) xx 2

[06:46] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «(1 2 3 1 2 3)␤»

[06:46] <ufobat> yay! thanks

[06:47] *** mcmillhj joined
[06:49] *** andrzejku joined
[06:49] <ufobat> and if i want to put this in a pair ;-)

[06:50] <ufobat> m: say Pair.new( |@((qw|ru be uk|) xx 2))

[06:50] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «(ru be uk) => (ru be uk)␤»

[06:50] <ufobat> looks not really readable :(

[06:51] <ufobat> i can leave out the @

[06:51] <moritz> m: say (<ru be uk> xx 2).flat

[06:51] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «(ru be uk ru be uk)␤»

[06:52] <moritz> m: say Pair.new: |(<ru be uk> xx 2)

[06:52] *** dct left
[06:52] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «(ru be uk) => (ru be uk)␤»

[06:52] <moritz> let's say I've seen worse :-)

[06:52] <moritz> m: say Pair.new: |<ru be uk> xx 2

[06:52] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «Cannot resolve caller new(Pair: Seq); none of these signatures match:␤    (Pair $: Cool:D \key, Mu \value, *%_)␤    (Pair $: Mu \key, Mu \value, *%_)␤    (Pair $: Mu :$key!, Mu :$value!, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[06:52] *** mcmillhj left
[06:53] <ufobat> m: say |<ru be uk> xx 2

[06:53] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «(ru be uk ru be uk)␤»

[06:53] <ufobat> that would flatten to much

[06:54] <moritz> right

[06:54] <moritz> I wasn't sure about the relative precedence of prefix | and infix xx

[06:54] <ufobat> ty :-)

[06:58] *** mcmillhj joined
[07:03] *** mcmillhj left
[07:08] *** domidumont left
[07:12] *** mcmillhj joined
[07:17] *** mcmillhj left
[07:27] *** mcmillhj joined
[07:29] <stmuk_> Herby_: https://wakelift.de/

[07:30] *** domidumont joined
[07:31] *** darutoko joined
[07:32] *** mcmillhj left
[07:35] *** jmerelo joined
[07:38] *** scimon joined
[07:43] *** mcmillhj joined
[07:44] <jmerelo> Hi

[07:47] <ufobat> https://stackoverflow.com/questions/38909146/method-to-add-element-to-sethash-in-perl6 ++ :(

[07:48] *** mcmillhj left
[07:49] <Geth> ¦ doc: 52e38a9dcc | (JJ Merelo)++ | doc/Language/grammars.pod6

[07:49] <Geth> ¦ doc: Reverts in part 9b1a88acf50cc31a

[07:49] <Geth> ¦ doc: 

[07:49] <Geth> ¦ doc: Because the code that generates indexes is terra incognita and changing the grammar declarator from one place to another leads to errors. Change related to #1912 remains in place.

[07:49] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/52e38a9dcc

[07:49] <synopsebot> Link: https://doc.perl6.org/language/grammars

[07:49] <jmerelo> ufobat: thanks!

[07:50] <ufobat> jmerelo, huh?

[07:52] <jmerelo> ufobat: thanks for posting an StackOverflow link. We should do that much more :-)

[07:52] <jmerelo> ufobat: and/or post questions/answers to StackOverflow :-)

[07:54] <ufobat> heh :-) indeed. i was just.. whining because i was missing this method and i switched to @array with calling .unique in the end, because it looks better

[07:58] <ufobat> m: @a = <a>; my @values = (1,2,3); @a.append: @values; say @a

[07:58] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@a' is not declared␤at <tmp>:1␤------> 3<BOL>7⏏5@a = <a>; my @values = (1,2,3); @a.appen␤»

[07:58] <ufobat> m: my @a = <a>; my @values = (1,2,3); @a.append: @values; say @a

[07:58] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «[a 1 2 3]␤»

[07:58] <ufobat> m: my @a = <a>; my @values = (1,2,3); @a.append: @values, 4; say @a

[07:58] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «[a [1 2 3] 4]␤»

[07:58] <ufobat> is this a bug?

[07:59] <ufobat> it's confusing to me

[07:59] <ufobat> m: my @a = <a>; my @values = (1,2,3); @a.push: @values, 4; say @a

[07:59] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «[a [1 2 3] 4]␤»

[07:59] <jmerelo> I would say the "single argument rule" is kicking in.

[07:59] <ufobat> m: my @a = <a>; my @values = (1,2,3); @a.push: @values; say @a

[07:59] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «[a [1 2 3]]␤»

[08:00] <jmerelo> ufobat: when you add the comma in @values,4 you're making it two different arguments. The single argument rule implies arguments to iterators are not flattened, basically

[08:01] <jmerelo> , is creating a list with two elements, @values and 4

[08:01] <ufobat> yeah - it makes sense to me now

[08:01] <jmerelo> I just added yesterday that to the documentation, closing issue #600

[08:02] *** dakkar joined
[08:02] <ufobat> i knew it actually. but i was just assuming that append would work differently

[08:02] <jmerelo> Now, I would be _extremely_ happy if you posted that same question to StackOverflow :-) you can answer it yourself, if you want, but the point is to make everything easily searchable

[08:03] *** mcmillhj joined
[08:03] <ufobat> okay! i'll create an stackoverflow account

[08:05] *** noganex left
[08:07] <jmerelo> ufobat: thanks!

[08:07] *** mcmillhj left
[08:16] <ufobat> jmerelo, done ;)

[08:16] *** mcmillhj joined
[08:16] *** zakharyas joined
[08:19] <jmerelo> ufobat++

[08:21] *** mcmillhj left
[08:23] *** pmurias joined
[08:24] <pmurias> re parrot in a new hat, they got low level and high level languages to run together so they succedded in more than parrot was ever imagined to be

[08:29] <pmurias> Zoffix: re porting over to a new backends you mostly need to port over the nqp:: ops and some QAST::* nodes

[08:30] <TEttinger> pmurias: was the re about MOAR or some other VM?

[08:30] <pmurias> TEttinger: Zoffix was asking a question about porting Rakudo to GraalVM

[08:30] <TEttinger> oh...

[08:31] <TEttinger> I uh have had very poor experiences with Graal

[08:31] <TEttinger> it may become usable at some point though

[08:31] <pmurias> what was wrong with it?

[08:33] <TEttinger> it has a ton of backing from Oracle, I guess. what's wrong with it is multifaceted. there's no windows support; when I tried it they apparently thought there was but it had some mix of very basic Python code bugs in their NIH build tool called mx, and very hard bugs in other parts. it's GPL2, no exceptions, so it's license incompatible with a ton of Java code despite being for the JVM

[08:34] <TEttinger> it couldn't use anything from Apache, for instance

[08:35] *** mcmillhj joined
[08:35] <TEttinger> it needs lab JVMs, it won't currently work on a normal JVM at least for dev

[08:36] *** noganex joined
[08:37] <TEttinger> its licensing scheme is generally confusing and I don't know why they didn't match OpenJDK's restrictive license and went with something even more restrictive

[08:38] <pmurias> TEttinger: re windows support it seems like something that could have been ironed out for 1.0

[08:38] <TEttinger> I can find my issue

[08:38] <TEttinger> https://github.com/graalvm/graal-core/issues/262

[08:38] <TEttinger> they've since rearranged all the projects to erase all old issues it looks like

[08:40] *** mcmillhj left
[08:41] <pmurias> TEttinger: re license issues I'm not a lawyer but they seem to license a bunch of GraalVM parts differently

[08:45] <TEttinger> it may have improved, I dunno. I just had a very unpleasant experience with it

[08:46] <pmurias> they don't seem to advertise windows support on their downloads page

[08:47] <TEttinger> indeed, it needs you to build the VM yourself

[08:47] <TEttinger> https://github.com/oracle/graal/blob/master/compiler/README.md#building-jvmci-jdk8

[08:47] *** mcmillhj joined
[08:48] <TEttinger> it also says it works with JDK9, later builds

[08:48] <pmurias> I don't use windows myself for anything than playing some games once in a blue moon, but I understand it's a limitation

[08:48] <TEttinger> it's my currently only OS

[08:51] *** eliasr joined
[08:52] <TEttinger> ugh but some stuff won't work with jdk9 anyway https://github.com/oracle/graal/blob/master/substratevm/README.md#build-script

[08:53] <TEttinger> lol, and their motto is "GraalVM: Run Programs Faster Anywhere"

[08:53] <tadzik> the good, ol' "run everywhere" :P

[08:55] *** jmerelo left
[08:56] *** mcmillhj left
[08:58] <TEttinger> the funnier thing is there's an open bug with its support for normal Java apps that use libGDX, which is a gamedev framework that actually does run almost everywhere with no code changes in some cases (I've had android ports of desktop apps be simply an extra compilation)

[08:59] <TEttinger> I kinda doubt graal targets iOS

[08:59] <TEttinger> LLVM would let it do that though

[08:59] <TEttinger> JITs aren't allowed by App Store rules though

[09:10] *** w_richard_w left
[09:20] *** jmerelo joined
[09:22] <pmurias> TEttinger: graalvm doesn't run on the LLVM

[09:24] *** wamba left
[09:26] <jmerelo> exit

[09:26] *** jmerelo left
[09:26] <TEttinger> sulong does, which is an implementation of graalvm

[09:45] *** dogbert2_ joined
[09:48] *** xtreak joined
[09:49] <pmurias> TEttinger: nope, sulong runs LLVM *on* the graalvm

[09:50] <pmurias> TEttinger: so you can run C++ or Rust on the graalvm using sulong

[09:52] *** markong joined
[09:53] <TEttinger> that's uh something 

[09:54] *** AlexDaniel joined
[10:06] *** domidumont left
[10:06] *** pmurias left
[10:15] *** pmurias joined
[10:16] <pmurias> TEttinger: they *could* disable the JIT and run it slower on the iOS not sure if it's something they are interested in

[10:17] <pmurias> TEttinger: it seems to be they want to take over the server side dynamic/scripting language marker

[10:17] <pmurias> * market

[10:18] <TEttinger> mmmm

[10:19] *** xtreak left
[10:36] <Zoffix> pmurias: it wasn't me who was asking tho. It was simcop2387 

[10:42] *** TEttinger left
[10:46] <pmurias> Zoffix: sorry, meant to say answering

[10:46] <Zoffix> ah

[10:47] <pmurias> but hopefully for GraalVM a lot of the more mudane nqp:: ops can be stolen from our existing JVM backend

[10:48] <Geth> ¦ doc: JJ self-assigned Explanation of the "Single Arg Rule" https://github.com/perl6/doc/issues/600

[10:49] <timotimo> m: say (<ru be uk> xx 2).pairup # ufobat

[10:49] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «((ru be uk) => (ru be uk))␤»

[10:49] <yoleaux> 01:02Z <MasterDuke> timotimo: some info re sinking and loops from TimToady and Zoffix https://irclog.perlgeek.de/moarvm/2018-04-18#i_16059397

[10:50] <pmurias> Zoffix: for me a large part of building a rakudo backends was implementing stuff and then discovering "not that's not how Rakudo wants things to work"

[10:54] <Zoffix> And buggy tests :)

[10:54] * Zoffix &

[10:54] *** Zoffix left
[11:01] *** xtreak joined
[11:12] <daxim> https://www.johndcook.com/blog/2018/04/17/unpopular-languages/#comment-936952  (via hn)

[11:13] <tadzik> darkpan!

[11:20] <timotimo> oh, i should definitely put "perl programming" in visible text on my blog

[11:20] <timotimo> now that i have a site with stuff on it, might as well have it counted by tiobe

[11:21] <tadzik> heh

[11:21] <timotimo> seriously, though. tiobe's methodology is so bunk it's not even funny

[11:21] <tadzik> X-Powered-By: Mojolicious BTW PERL PROGRAMMING HI TIOBE

[11:22] <tadzik> well, it's an ok methodology, but not exactly for progamming language popularity

[11:22] <timotimo> yet somehow people keep mentioning tiobe. it's as if homeopathy kept showing up in medical journals with the aside "i won't argue if homeopathy works, but for this article i'll assume it's good enough"

[11:23] <tadzik> heh

[11:23] <tadzik> true that

[11:24] <tadzik> but it's hard to argue that perl is not exactly a shining star anymore

[11:24] <tadzik> when perl shops have to hire non-perl programmers and teach them on site in order to get *anybody*

[11:24] <tadzik> we have a guy now at one of the clients whose daily standup report is "I did chapter 7 and 8 from learning perl"

[11:25] <donpdonp> heh

[11:25] <timotimo> does it count if it's inside <small> tags?

[11:26] <tadzik> hm, does it actually count text on websites? I thought it's google search terms

[11:28] <jkramer> I think I've asked this bevor, but I don't remember. How can I look up an enum object by it's value?

[11:28] <jkramer> m: enum Foo (:bar('lol'), :baz('yay')); say Foo.enums.antipairs.Map<yay>.WHAT

[11:28] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «(Str)␤»

[11:28] <timotimo> there's the mailing list thread where one of the tiobe folks comes to the pascal community and says "oh, just add 'pascal programming' to all your sites!" and later "hey your work has paid off, your rank has improved significantly!"

[11:28] <jkramer> This gives me the name as a string, but not the object

[11:29] <jkramer> m: enum Foo (:bar('lol'), :baz('yay')); say Foo.enums.antipairs.Map<yay>.WHAT; say bar.WHAT

[11:29] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «(Str)␤(Foo)␤»

[11:29] <timotimo> m: enum Foo (:bar('lol'), :baz('yay')); say Foo("lol").perl

[11:29] <camelia> rakudo-moar ceeb3a00d: OUTPUT: «Foo::bar␤»

[11:30] <timotimo> jkramer: just like that

[11:30] <jkramer> Ooh, so simple :)

[11:30] <jkramer> timotimo: Thanks!

[11:34] <timotimo> http://delphi.org/2008/10/delphi-language-of-the-year-2008/

[11:36] *** brrt joined
[11:37] <AlexDaniel> nice.

[11:37] *** rindolf left
[11:38] *** mikak joined
[11:38] *** mikak left
[11:48] <buggable> New CPAN upload: List-SomeUtils-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/List-SomeUtils-0.0.1.tar.gz

[11:48] *** domidumont joined
[11:48] *** zakharyas left
[12:03] <jkramer> When I have an object hash like my ValueClass %hash{KeyClass}, how are KeyClass keys looked up in the hash? Or rather how are they compared with each other?

[12:04] <timotimo> it uses the WHICH method

[12:05] <jkramer> Hmm, so I guess I can't do %foo{$basically-the-same-object-contentwise-as-the-key-but-a-new-instance}?

[12:06] <jkramer> Or can I override WHICH for my key class? Would that be a smart thing to do? :)

[12:08] <timotimo> you can of course do that

[12:09] <jkramer> But might it break something else? I'm assuming WHICH is kind of internal stuff that I might not want to touch :)

[12:10] *** AlexDani` joined
[12:11] *** AlexDaniel left
[12:11] <lizmat> jkramer: .WHICH is how you would like to provide an object of your class with a unique ID

[12:12] <lizmat> the default assumes that each instantiated object of your class is unique

[12:12] <jkramer> Basically what I want to do is: %grid{Coordinates.new(:x(123), :y(345))} and have it find the value for those coordinates, even though the Coordinates object is a new one

[12:12] <lizmat> then you need to provide a .WHICH method that is unique for the *values* in your object

[12:12] <jkramer> So I guess in Coordinates you could just do method WHICH { "$.x $.y" }

[12:12] <lizmat> well, you'd probably want to include the name of your class

[12:13] <lizmat> as .WHICH values are considered to be global

[12:13] <jkramer> Ha true

[12:13] <lizmat> but yes, that's basically it

[12:13] <lizmat> of course you may want to make sure that :x(12),:y(345) and :x(123),:y(45) don't produce the same .WHICH value

[12:15] <jkramer> Yeah I think the space should do that :)

[12:15] *** AlexDani` is now known as AlexDaniel

[12:15] <lizmat> jkramer: if it's just about numerical values, that's fine

[12:15] <lizmat> with string values not so much  :-)

[12:15] <jkramer> So method WHICH { "$.^name $.x $.y" } should work I guess, I'll try that now :)

[12:16] <jkramer> lizmat: They're both Int so that should be fine :)

[12:16] <ufobat> pairup!!!!!! timotimo thx :D

[12:16] *** pmurias left
[12:17] <jkramer> Actually, why not just do method WHICH { $.perl }?

[12:17] <lizmat> jkramer: if you don't expect subclasses, then it would probably be wiser to hard code the .^name value and use $!x $!y for performance

[12:17] <lizmat> jkramer: if the attributes are public, sure

[12:17] <jkramer> lizmat: It's just a little script for a coding challenge, I don't expect subclasses and don't care about performance ;)

[12:18] <lizmat> then $.perl should do just fine

[12:21] <jkramer> Ha, fun fact: .perl calls .WHICH to find out the class name, so that's an infinite loop/recursion :)

[12:21] <lizmat> ah, hmmm...

[12:21] <jkramer> Or well it calls it anyways, don't know what it actually does with it

[12:22] <lizmat> ah, looks like that's the self-referring data structure check that's interfering

[12:23] <timotimo> ufobat: don't forget it returns a list

[12:23] *** mcmillhj joined
[12:23] <lizmat> jkramer: I guess you'll have to throw your own then anyways

[12:23] <jkramer> Yup

[12:30] *** wamba joined
[12:30] <Herby_> o/

[12:33] *** wamba left
[12:35] <timotimo> maybe create an ObjValAt in the WHICH for your custom class

[12:50] *** vcv joined
[12:52] *** zakharyas joined
[12:53] *** rindolf joined
[12:59] *** xtreak left
[13:06] *** curan left
[13:07] *** curan joined
[13:07] *** curan left
[13:12] *** vike joined
[13:13] *** telex left
[13:14] *** telex joined
[13:19] *** mcmillhj left
[13:21] *** raynold left
[13:24] <[Coke]> pondering a htmlify option that will not emit information about what commit and when the docs were created, to help with refactoring so it's easier to compare the differences.

[13:25] *** mcmillhj joined
[13:26] *** vcv left
[13:27] *** vcv joined
[13:29] *** vcv left
[13:30] *** vcv joined
[13:38] <buggable> New CPAN upload: List-MoreUtils-0.0.3.tar.gz by ELIZABETH http://modules.perl6.org/dist/List::MoreUtils:cpan:ELIZABETH

[13:52] *** domidumont left
[14:11] *** nwellnhof joined
[14:12] <nwellnhof> rakudo: say (<a b c>, *.reverse ... *)[5]

[14:12] <camelia> rakudo-moar 057966987: OUTPUT: «The iterator of this Seq is already in use/consumed by another Seq␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[14:12] <nwellnhof> Can anyone explain?

[14:13] <timotimo> m: say (<a b c>, *.reverse.List ... *)[5]

[14:13] <camelia> rakudo-moar 057966987: OUTPUT: «(c b a)␤»

[14:13] <timotimo> m: say (<a b c>, *.reverse.cache ... *)[5]

[14:13] <camelia> rakudo-moar 057966987: OUTPUT: «(c b a)␤»

[14:13] <Geth> ¦ marketing: 37dc838609 | (Zoffix Znet)++ | 154 files

[14:13] <Geth> ¦ marketing: Rename "Table Posters" to "Flyers"

[14:13] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/37dc838609

[14:14] <timotimo> i'm not sure i've got a proper explanation for this, but i do have the solution

[14:14] <AlexDaniel> well, it's trying to reverse the same Seq over and over

[14:15] <AlexDaniel> m: <a b c>.reverse.reverse.say

[14:15] <camelia> rakudo-moar 057966987: OUTPUT: «(a b c)␤»

[14:15] <AlexDaniel> but that works

[14:16] <AlexDaniel> that initial snippet actually worked previously before https://github.com/rakudo/rakudo/commit/beda5767ba6934e84122a0c0458a53d919c695d0

[14:17] <AlexDaniel> but List.reverse returning a Seq is probably right

[14:19] <nwellnhof> I don't really understand why the Seq is iterated twice.

[14:21] <Geth> ¦ marketing: 7e0b5999e7 | (Zoffix Znet)++ | 154 files

[14:21] <Geth> ¦ marketing: Add IDs to print materials

[14:21] <Geth> ¦ marketing: 

[14:21] <Geth> ¦ marketing: Makes things a lot easier to manage when you got 100s of flyers

[14:21] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/7e0b5999e7

[14:21] <moritz> once from the series operator at least, and once form say()

[14:21] <moritz> *from*

[14:22] <Geth> ¦ marketing: 723ac43d50 | (Zoffix Znet)++ | 12 files

[14:22] <Geth> ¦ marketing: Add "All Your Cores" flyer / ID: 1524053519

[14:22] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/723ac43d50

[14:25] <nwellnhof> But say() only receives the last Seq that hasn't been iterated yet.

[14:27] <AlexDaniel> moritz: but why is … iterating it? Isn't it supposed to build a sequence of Seqs?

[14:28] <AlexDaniel> m: dd (<a b c>, *.Seq ... *)[^2]

[14:28] <camelia> rakudo-moar 057966987: OUTPUT: «(("a", "b", "c"), ("a", "b", "c").Seq)␤»

[14:28] <AlexDaniel> m: dd (<a b c>, *.Seq ... *)[^3]

[14:28] <camelia> rakudo-moar 057966987: OUTPUT: «(("a", "b", "c"), Seq.new-consumed(), Seq.new-consumed())␤»

[14:28] <AlexDaniel> m: dd (<a b c>, *.Seq ... *)[3]

[14:28] <camelia> rakudo-moar 057966987: OUTPUT: «The iterator of this Seq is already in use/consumed by another Seq␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[14:30] *** committable6 left
[14:30] <moritz> AlexDaniel: well, the third item has to iterate the second item in order to create the reversed-again list

[14:30] *** committable6 joined
[14:30] *** ChanServ sets mode: +v committable6

[14:32] <AlexDaniel> oh

[14:32] <AlexDaniel> wait uh

[14:33] <AlexDaniel> m: <a b c>.reverse.reverse.reverse.reverse.reverse.say

[14:33] <camelia> rakudo-moar 057966987: OUTPUT: «(c b a)␤»

[14:33] <AlexDaniel> but that works, right?

[14:33] <AlexDaniel> so why can't it be done with … operator? what am I missing?

[14:33] <nwellnhof> Yeah, that's my point.

[14:33] *** Zoffix joined
[14:33] <Zoffix> AlexDaniel: there you're not using the Seq the second time

[14:34] <Zoffix> m: my $s1 := <a b c>.reverse; my $s2 := $s1.reverse; say $s1;

[14:34] <camelia> rakudo-moar 057966987: OUTPUT: «The iterator of this Seq is already in use/consumed by another Seq␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[14:34] <Zoffix> This is the right equivalent

[14:36] *** bisectable6 left
[14:36] *** bisectable6 joined
[14:36] *** ChanServ sets mode: +v bisectable6

[14:37] <AlexDaniel> so what is using the Seq the second time when using … ?

[14:37] <AlexDaniel> like here

[14:37] <Zoffix> say

[14:37] <AlexDaniel> m: say (<a b c>, *.Seq ... *)[3]

[14:37] <camelia> rakudo-moar 057966987: OUTPUT: «The iterator of this Seq is already in use/consumed by another Seq␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[14:37] <AlexDaniel> ok, what's the first time then?

[14:37] <Zoffix> .reverse

[14:38] <AlexDaniel> what did .reverse on the 3rd element?

[14:38] <AlexDaniel> I never asked for 4th

[14:38] <Zoffix> 3 is 4th

[14:39] <Zoffix> m: say (<a b c>, *.Seq ... *)[^2]

[14:39] <camelia> rakudo-moar 057966987: OUTPUT: «((a b c) (a b c))␤»

[14:39] <Zoffix> m: say (<a b c>, *.Seq ... *)[^3]

[14:39] <camelia> rakudo-moar 057966987: OUTPUT: «The iterator of this Seq is already in use/consumed by another Seq␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[14:39] *** brrt left
[14:39] <Zoffix> m: @ = (<a b c>, *.reverse ... *)[^3]

[14:39] <camelia> rakudo-moar 057966987: OUTPUT: «The iterator of this Seq is already in use/consumed by another Seq␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[14:40] <AlexDaniel> m: my $l1 := <a b c>; my $s1 := $l1.reverse; my $s2 := $s1.reverse; say $s2

[14:40] <camelia> rakudo-moar 057966987: OUTPUT: «(a b c)␤»

[14:40] <AlexDaniel> that works

[14:40] <AlexDaniel> m: say (<a b c>, *.reverse ... *)[2]

[14:40] <camelia> rakudo-moar 057966987: OUTPUT: «The iterator of this Seq is already in use/consumed by another Seq␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[14:40] <AlexDaniel> that doesn't

[14:40] * AlexDaniel is stupid and does not get it

[14:40] <Zoffix> [2] is the third item, not second: 0, 1, 2

[14:41] <AlexDaniel> m: my $l0 := <a b c>; my $s1 := $l1.reverse; my $s2 := $s1.reverse; say $s2

[14:41] <camelia> rakudo-moar 057966987: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$l1' is not declared. Did you mean any of these?␤    $l0␤    $s1␤␤at <tmp>:1␤------> 3my $l0 := <a b c>; my $s1 := 7⏏5$l1.reverse; my $s2 := $s1.reverse; say ␤»

[14:41] <AlexDaniel> m: my $l0 := <a b c>; my $s1 := $l0.reverse; my $s2 := $s1.reverse; say $s2

[14:41] <camelia> rakudo-moar 057966987: OUTPUT: «(a b c)␤»

[14:41] <AlexDaniel> l0, s1, s2

[14:41] <Zoffix> ah

[14:43] <Zoffix> m: @ = (<a b c>, {dd $_; .reverse} ... *)[^3]

[14:43] <camelia> rakudo-moar 057966987: OUTPUT: «List @tail = $("a", "b", "c")␤The iterator of this Seq is already in use/consumed by another Seq␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[14:43] <Zoffix> it doesn't even get sent as a Seq to the code

[14:55] <Zoffix> Golfed:

[14:55] <Zoffix> m: dd gather { ().Seq.take }

[14:55] <camelia> rakudo-moar 057966987: OUTPUT: «(Seq.new-consumed(),).Seq␤»

[14:55] <Zoffix> s: ().Seq, 'take', \()

[14:55] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/057966987/src/core/Mu.pm6#L62

[14:56] <Zoffix> s: &take, \(().Seq)

[14:56] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/057966987/src/core/control.pm6#L62

[14:59] <Zoffix> Filed as R#1742

[14:59] <synopsebot> R#1742 [open]: https://github.com/rakudo/rakudo/issues/1742 Can't .take uncached Seq 

[14:59] <Zoffix> nwellnhof: so the answer to your question: it's either a bug (more likely) or a limitation.

[15:01] <nwellnhof> Thanks for the answer!

[15:02] <Zoffix> oh, lol, I see the bug :)

[15:02] <Zoffix> &THROW returns the arg and it gets sunk and consumes the seq

[15:03] *** Sgeo__ joined
[15:03] <timotimo> %)

[15:04] *** pmurias joined
[15:05] <Zoffix> Well, I guess it's really .take returning its value that messes this up

[15:05] <Zoffix> m: dd gather { my $ = ().Seq.take }

[15:05] <camelia> rakudo-moar 057966987: OUTPUT: «(().Seq,).Seq␤»

[15:05] * Zoffix patches &SEQUENCE

[15:06] *** Sgeo_ left
[15:18] <Zoffix> e: say (<a b c>, *.reverse ... *)[5]

[15:18] <evalable6> Zoffix, rakudo-moar 9e6ae276a: OUTPUT: «(c b a)␤»

[15:19] <Zoffix> nwellnhof: so the answer to your question: it works fine if your rakudo is recent enough ^_^

[15:27] *** pharv joined
[15:30] <AlexDaniel> hahaha

[15:30] <AlexDaniel> Zoffix++ thank you

[15:31] <nwellnhof> Cool, thanks.

[15:33] <nwellnhof> So it seems I could golf my PCG answer by two more bytes: https://codegolf.stackexchange.com/a/162701

[15:36] *** Zoffix left
[15:37] *** robertle left
[15:42] *** pharv left
[15:43] *** pharv joined
[15:45] *** scimon left
[15:50] *** khw joined
[15:51] *** quotable6 left
[15:51] *** quotable6 joined
[15:51] *** ChanServ sets mode: +v quotable6

[15:54] *** pharv left
[15:54] *** pharv joined
[15:54] *** mcmillhj left
[15:55] *** brrt joined
[15:57] *** nwellnhof left
[15:57] *** brrt left
[16:02] *** jmerelo joined
[16:04] *** mcmillhj joined
[16:04] *** zakharyas left
[16:05] *** pharv left
[16:07] *** pharv joined
[16:09] <Geth> ¦ doc: b409bd1d3d | (JJ Merelo)++ | doc/Language/list.pod6

[16:09] <Geth> ¦ doc: Clarifies even more the "single arg rule"

[16:09] <Geth> ¦ doc: 

[16:09] <Geth> ¦ doc: eliminates reference to Synopsis, too. Closes #600 again.

[16:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b409bd1d3d

[16:09] <synopsebot> Link: https://doc.perl6.org/language/list

[16:09] *** mcmillhj left
[16:14] <Geth> ¦ doc: 68390f1467 | (Will "Coke" Coleda)++ | doc/Language/list.pod6

[16:14] <Geth> ¦ doc: style: space after comma

[16:14] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/68390f1467

[16:15] <jmerelo> What was that robot that told you where some particular class was implemented?

[16:16] *** mcmillhj joined
[16:19] <geekosaur> SourceBaby

[16:19] <jmerelo> SourceBaby: CompUnit::Repository::Installation

[16:19] <jmerelo> geekosaur: thanks

[16:21] <jmerelo> SourceBaby: s CompUnit::Repository::Installation

[16:21] <jmerelo> SourceBaby: 'CompUnit::Repository::Installation'

[16:21] <jmerelo> SourceBaby: 'CompUnit::Repository::Staging'

[16:22] *** lalitmee joined
[16:22] *** lalitmee left
[16:23] *** lalitmee joined
[16:23] <geekosaur> usage is a bit complex, iirc

[16:25] *** Zoffix joined
[16:25] *** lalitmee left
[16:25] <Zoffix> jmerelo: it doesn't really tell where class is defined. It reports the .line and .file for a particular routine 

[16:25] *** lalitmee joined
[16:26] <jmerelo> p6: $*REPO.resolve(CompUnit::DependencySpecification.new(:short-name<Compunit::Repository::Installation>))

[16:26] <camelia> rakudo-moar 9e6ae276a: ( no output )

[16:26] <Zoffix> It's in rakudo's lib/

[16:26] <Zoffix> The CompUnit::Repository::Staging I mean

[16:27] <jmerelo> OK, I found it https://github.com/rakudo/rakudo/blob/98e575de00db42101d4879e43fe740a34791c418/src/core/CompUnit/RepositoryRegistry.pm6 Thanks!

[16:28] *** jmerelo left
[16:28] <Zoffix> jmerelo: as I remember it, the CompUnit's interface is essentially unspecced and can't really be documented.

[16:29] <Zoffix> oh, there's some in S11-compunit/S10-packages

[16:29] *** evalable6 left
[16:29] *** evalable6 joined
[16:29] <Zoffix> and S11-repository

[16:29] *** Zoffix left
[16:34] *** pilne joined
[16:39] *** margeas joined
[16:43] *** markong left
[16:46] *** margeas left
[17:00] *** dakkar left
[17:10] *** mcmillhj left
[17:11] *** stmuk joined
[17:13] *** stmuk_ left
[17:17] *** irco joined
[17:17] *** mcmillhj joined
[17:23] *** mcmillhj left
[17:26] *** mcmillhj joined
[17:30] *** robertle joined
[17:35] *** domidumont joined
[17:36] *** pharv left
[17:37] *** pharv joined
[17:40] *** zakharyas joined
[17:42] *** mcmillhj left
[17:44] *** zakharyas left
[17:44] *** pharv left
[17:45] *** zakharyas joined
[17:45] *** lindylex joined
[17:50] *** zakharyas left
[17:50] <lindylex> p6: say 3;

[17:50] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «3␤»

[17:57] *** mcmillhj joined
[17:57] *** wamba joined
[18:02] *** mcmillhj left
[18:04] <lindylex> p6: 100.WHAT.say;

[18:04] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «(Int)␤»

[18:07] *** stux|away joined
[18:08] *** mcmillhj joined
[18:11] *** pharv joined
[18:12] *** FROGGS joined
[18:13] *** mcmillhj left
[18:16] *** mcmillhj joined
[18:18] *** sauvin left
[18:23] *** raynold joined
[18:37] *** darutoko left
[18:41] *** domidumont left
[18:49] *** comborico1611 joined
[18:56] *** simpleseeker left
[19:05] *** vcv left
[19:07] *** pecastro left
[19:12] <comborico1611> I forgot how to call the REPL.

[19:12] <comborico1611> round (42.25, 1)

[19:13] <comborico1611> Produces 2.  I'm not sure why.  I understand it has something to do with the leading space first parenthesis.

[19:13] <tobs> m: round(42.25, 1)

[19:13] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "round(42.25, 1)" in expression "round(42.25, 1)" in sink context (line 1)␤»

[19:13] <tobs> m: say round(42.25, 1)

[19:13] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «42␤»

[19:13] <tobs> m: say round (,)

[19:13] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix , instead.␤at <tmp>:1␤------> 3say round (,7⏏5)␤»

[19:14] <tobs> comborico1611: anyway, iirc, the space between routine call and parentheses makes the list of arguments a single list which is passed to the routine

[19:15] <comborico1611> So how is (42.25, 1) being rounded to 2?

[19:15] <tobs> no idea

[19:15] <comborico1611> Bazaarness.

[19:15] <xq> number of elements in a list?

[19:15] <comborico1611> Heh.

[19:15] <comborico1611> Let me check

[19:15] <tobs> looks like it

[19:16] <comborico1611> m: round (42.25, 1, 3)

[19:16] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "round (42.25, 1, 3)" in expression "round (42.25, 1, 3)" in sink context (line 1)␤»

[19:16] <xq> m: say round (42.25, 1);

[19:16] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «2␤»

[19:16] <xq> m: say round (42.25, 1, 3);

[19:16] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «3␤»

[19:16] <comborico1611> This REPL is different than my REPL.

[19:16] <xq> that's how

[19:16] <comborico1611> oh. semicolon

[19:16] <xq> note the space between d and (

[19:16] <comborico1611> Hmm.

[19:16] <xq> round() is different from round ()

[19:17] <comborico1611> So round also works as an element counter

[19:17] <comborico1611> xq: Roger that.

[19:19] <tobs> m: say (42.25, 1).isa(Cool)

[19:19] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «True␤»

[19:20] <tobs> round coerces Cool to Numeric, so that's why

[19:20] <tobs> (I guess?)

[19:21] <comborico1611> Less than awesome error message for round( 42.25, 1, 3).  Proto signature?  Never heard of it, neither is listed under search in Docs.

[19:21] <comborico1611> I can tell you Perl6 is much better error messing than Common Lisp, though!

[19:22] <comborico1611> And I do speculate Perl6 has the best error messing in the biz.

[19:22] <comborico1611> messaging*

[19:22] <comborico1611> Which is smart.

[19:23] *** vcv joined
[19:26] <comborico1611> Same error message with: say round;

[19:29] <moritz> m: say round

[19:29] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling round() will never work with proto signature ($, $?)␤at <tmp>:1␤------> 3say 7⏏5round␤»

[19:29] *** Zoffix joined
[19:29] *** zachk joined
[19:29] *** zachk left
[19:29] *** zachk joined
[19:30] <moritz> just ignore the word you don't understand :-)

[19:30] <comborico1611> :-)

[19:30] <comborico1611> I will try.

[19:30] *** zachk left
[19:31] <Zoffix> It is a bit LTA that you can give a Cool in single-arg form, but you gotta give a Numeric in 2-arg form

[19:31] *** zachk joined
[19:31] *** zachk left
[19:31] *** zachk joined
[19:31] <Zoffix> m: say round <a b c>

[19:31] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «3␤»

[19:31] <Zoffix> m: say round <a b c>, 10

[19:31] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «Cannot resolve caller round(List, Int); none of these signatures match:␤    ($a)␤    (Numeric $a)␤    (Numeric $a, $scale)␤  in block <unit> at <tmp> line 1␤␤»

[19:31] <Zoffix> comborico1611: what would be a clearer error message?

[19:32] *** mcmillhj left
[19:32] <Zoffix> R#1745

[19:32] <synopsebot> R#1745 [open]: https://github.com/rakudo/rakudo/issues/1745 [LHF][consistency] &round inconsistent on types of arguments.

[19:33] *** zachk left
[19:34] *** zachk joined
[19:34] <Zoffix> comborico1611: also, I'd say Rust has the best error messages in the biz :) but we're catching up

[19:34] *** mcmillhj joined
[19:34] *** FROGGS left
[19:35] <comborico1611> Zoffix: I'm not knowledgeable enough to provide a clearer error message.  I'm just reporting what I'm finding as a newbie.

[19:35] <comborico1611> Zoffix: That is intersting to know.

[19:35] <Zoffix> comborico1611: it's basically saying of all the ways you can call &round, none of them will accept the 3 arguments

[19:36] <Zoffix> m: proto z($, $?) {}; z 1, 2, 3

[19:36] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «Too many positionals passed; expected 1 or 2 arguments but got 3␤  in sub z at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[19:37] <Zoffix> s: &round

[19:37] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/9e6ae276a/src/core/Numeric.pm6#L199

[19:37] <geekosaur> that message is telling you that it wants some kind of scalar, and another optional scalar. it can't say more, really, it doesn't know enough

[19:37] <comborico1611> Zoffix: So instead of proto signature, I would say that, "passed too many arguments".  But I'm not sure if that will not be adequate for all the scenarios like proto signature I assume is.

[19:38] <Zoffix> m: proto z($, $?) {*}; z 1, 2, 3

[19:38] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling z(Int, Int, Int) will never work with proto signature ($, $?)␤at <tmp>:1␤------> 3proto z($, $?) {*}; 7⏏5z 1, 2, 3␤»

[19:38] <geekosaur> hypothentically it could go digging for all possible implementations, but that could take a long time even given that it's an error message

[19:38] <comborico1611> But I want to be vocal in case my newbieness DOES find an legitimate LTA error message.

[19:39] <comborico1611> Newbies are good at producing unexpected errors.

[19:39] <Zoffix> m: proto z($ where rand) {*}; say z "x"

[19:39] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling z(Str) will never work with declared signature ␤at <tmp>:1␤------> 3proto z($ where rand) {*}; say 7⏏5z "x"␤»

[19:39] <Zoffix> Well, you found at least 1 bug :) That's missing the declared signature

[19:40] *** zachk left
[19:40] *** zachk joined
[19:41] <comborico1611> Zoffix: I did? Haha

[19:41] <comborico1611> I remember a while back someone thought something was worthy of a report.

[19:44] <tobs> does the "where rand" constraint produce a function that's almost non-callable?

[19:44] <Zoffix> R#1746

[19:44] <synopsebot> R#1746 [open]: https://github.com/rakudo/rakudo/issues/1746 [LHF][LTA] Error missing declared signature if `where` clause is used in proto

[19:45] <geekosaur> intercal, only more so

[19:45] <timotimo> "where rand" will almost always succeed, given how unlikely it is for rand to result in exactly 0

[19:45] <Zoffix> tobs: pretty much. The given argument would have to be numerically equal to the value produced to rand

[19:45] <timotimo> oh

[19:45] <tobs> :)

[19:45] <timotimo> of course it's that way

[19:45] <tobs> ah, it's a smartmatch.

[19:46] <Zoffix> timotimo: it'd be 0 if it were `where {rand}`. A thunked `where` ain't got a block

[19:46] <Zoffix> m: -> $ where {42} {}(10)

[19:46] <camelia> rakudo-moar 9e6ae276a: ( no output )

[19:46] <Zoffix> m: -> $ where 42 {}(10)

[19:46] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «Constraint type check failed in binding to parameter '<anon>'; expected anonymous constraint to be met but got Int (10)␤  in block <unit> at <tmp> line 1␤␤»

[19:46] <Zoffix> m: -> $ where 42 {}(42)

[19:46] <camelia> rakudo-moar 9e6ae276a: ( no output )

[19:47] <Zoffix> wait, it'd be anything BUT 0 :)  'cause it'd need to be truthy :)

[19:51] <Zoffix> R#1747

[19:51] <synopsebot> R#1747 [open]: https://github.com/rakudo/rakudo/issues/1747 [LHF][LTA] X::TypeCheck::Argument could use a minor wording tweak

[19:51] <Zoffix> comborico1611: ^ I think that'd address it in some way. We can't really say "passed to many arguments" since there are many other ways to violate the sig of the proto

[19:51] * Zoffix &

[19:51] *** Zoffix left
[19:53] *** lindylex left
[19:54] *** lindylex joined
[19:55] *** pharv left
[19:57] *** pharv joined
[20:01] *** pecastro joined
[20:12] *** lalitmee left
[20:14] <Geth> ¦ perl6.org: zoffixznet self-assigned Implement Perl 6 Academy for use as call to action on marketing pieces https://github.com/perl6/perl6.org/issues/107

[20:19] *** simpleseeker joined
[20:22] *** pharv left
[20:29] *** AlexDaniel left
[20:29] *** khisanth__ left
[20:35] *** pmurias left
[20:36] *** TEttinger joined
[20:39] *** pharv joined
[20:41] *** pharv left
[20:42] *** khisanth__ joined
[20:46] *** AlexDaniel joined
[20:47] <comborico1611> AlexDaniel: I'm not sure how to put that Issue into a label.

[20:47] <comborico1611> And, I hope that qualifies for LTA.

[20:48] <AlexDaniel> you mean R#1748 ? I've already added a label

[20:48] <synopsebot> R#1748 [open]: https://github.com/rakudo/rakudo/issues/1748 [LTA] LTA: Clunky expression in error message ("Useless use")

[20:48] *** markong joined
[20:49] *** Guest629 joined
[20:49] <AlexDaniel> if I understand correctly, non-members of the rakudo github org can't add labels

[20:49] <comborico1611> Yes.  I was just explaining why I didn't add the label myself.

[20:49] <AlexDaniel> which is not cool

[20:49] <AlexDaniel> comborico1611: ah yeah, don't worry about that, you did it right

[20:49] *** vcv left
[20:49] <comborico1611> I see.  Very good.

[20:52] *** pharv joined
[20:53] *** pharv_ joined
[20:53] *** pharv left
[20:55] *** mcmillhj left
[21:00] <comborico1611> AlexDaniel: The "useless use" phrase showed up in another error message. : -(  What should I do?

[21:00] *** mcmillhj joined
[21:01] *** Kaiepi joined
[21:01] <Kaiepi> m: say $*VM.osname

[21:01] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «linux␤»

[21:01] <Kaiepi> m: chdir '~'

[21:01] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «Failed to change the working directory to '/home/camelia/~': does not exist␤  in block <unit> at <tmp> line 1␤␤»

[21:01] <Kaiepi> should this work?

[21:01] <AlexDaniel> comborico1611: what do you mean? If it's something about the bug report, feel free to click the pencil button and edit it

[21:01] <geekosaur> no

[21:01] <geekosaur> ~ is shell magic

[21:01] *** bazzaar joined
[21:01] <Kaiepi> ah

[21:01] <comborico1611> AlexDaniel: Alright.

[21:02] *** lindylex left
[21:02] <AlexDaniel> m: chdir $*HOME

[21:02] <camelia> rakudo-moar 9e6ae276a: ( no output )

[21:02] <AlexDaniel> m: say $*HOME

[21:02] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «"/home/camelia".IO␤»

[21:03] <AlexDaniel> m: say “$*HOME”

[21:03] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «/home/camelia␤»

[21:03] <AlexDaniel> Kaiepi: ↑

[21:03] <geekosaur> perl 5 used to try to make it work in some circumstances (I don't know if they stopped at some point). it was never consistent, and if it leaks through to the OS then the call will fail

[21:03] <AlexDaniel> geekosaur: haha

[21:03] <Kaiepi> ah

[21:03] <bazzaar> o/ perl6

[21:04] <geekosaur> unless it goes through a shell without quoting, in which case the shell wille xpand it

[21:05] <AlexDaniel> geekosaur: at first it was funny, now I'm about to cry… please stop! :'D

[21:05] *** mcmillhj left
[21:05] <AlexDaniel> though I'm interested to know what perl5 was doing exactly

[21:06] <Kaiepi> m: my $conf = '~/Documents'; $conf ~~ s/\~/$*HOME/; say $conf

[21:06] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «/home/camelia/Documents␤»

[21:07] <Kaiepi> alright i think i know what to do now

[21:07] <Kaiepi> thanks

[21:07] <AlexDaniel> oh, it was in angle quotes I think < >

[21:07] <bazzaar> I'm just viewing "gpw2016 Bernhard Specht - ‎the beauty of perl6‎" talk [youtube video], the first example RLI encoding

[21:07] <El_Che> releasable6: status

[21:07] <geekosaur> should be a thing in perlguts to expand ~ and ~user, but if an XS or etc. uses a filename and doesn't call it then the ~ goes untranslated

[21:07] <releasable6> El_Che, Next release in ≈2 days and ≈21 hours. 7 blockers. 224 out of 241 commits logged

[21:07] <releasable6> El_Che, Details: https://gist.github.com/afac81adab322c60fafa25ae119ff900

[21:08] <geekosaur> ~ is in general a lot of "too clever", and not just in p5

[21:08] <bazzaar> m: my Int @bits = "0 0 0 0 0 0 0 0 1 0 1 1 1 0 1 1 1 1".words».Int;

[21:08] <camelia> rakudo-moar 9e6ae276a: ( no output )

[21:08] <comborico1611> Why does leaving the ( ) off trip a warning? sub do_twice($code) {$code; $code}

[21:08] <geekosaur> use of ~ in filenames is a C faq, I think

[21:09] <comborico1611> Versus: sub do_twice($code) { $code(); $code() }

[21:09] <bazzaar> but, putting the method call on a separate line doesn't

[21:09] <geekosaur> use/mentuon distinction

[21:09] *** wamba left
[21:10] <AlexDaniel> comborico1611: the warning is correct, because just “$code;” does not call the code

[21:11] *** DrForr left
[21:12] <comborico1611> Hmm.  I see.  

[21:12] *** DrForr joined
[21:13] <geekosaur> think about it. if it did then you couldn't pass it to the sub in the first place

[21:13] <AlexDaniel> Kaiepi: why do you need this by the way? ~ is a valid file/directory name so you shouldn't be replacing it like that

[21:14] <AlexDaniel> bazzaar: sorry, what's the question?

[21:14] <comborico1611> I will start using () then to play it safe.

[21:15] <AlexDaniel> m: my Int @bits = "0 0 0 0 0 0 0 0 1 0 1 1 1 0 1 1 1 1"      .words.map: *.Int

[21:15] <camelia> rakudo-moar 9e6ae276a: ( no output )

[21:15] <AlexDaniel> bazzaar: you want something like this but with », right?

[21:16] <bazzaar> sorry, I wasn't very clear, the presence of a newline between the string and .words brings up an error

[21:16] *** mcmillhj joined
[21:16] <AlexDaniel> you can try this

[21:16] <AlexDaniel> m: my Int @bits = "0 0 0 0 0 0 0 0 1 0 1 1 1 0 1 1 1 1"\      .words».Int

[21:16] <camelia> rakudo-moar 9e6ae276a: ( no output )

[21:16] <AlexDaniel> m: my Int @bits = "0 0 0 0 0 0 0 0 1 0 1 1 1 0 1 1 1 1"\␤.words».Int # testing with a newline

[21:16] <camelia> rakudo-moar 9e6ae276a: ( no output )

[21:17] <AlexDaniel> so called “unspace” https://docs.perl6.org/language/syntax#index-entry-syntax_Unspace

[21:20] <AlexDaniel> El_Che: note that this release will be late (kinda obvious given 7 open blockers)

[21:20] <bazzaar> AlexDaniel: thanks for the Unspace link, I can see it is documented that I should escape the whitespace in front of the method call

[21:21] <AlexDaniel> bazzaar: not always, but in complex cases yes

[21:21] *** mcmillhj left
[21:21] <AlexDaniel> m: say 25     .     sqrt

[21:21] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «5␤»

[21:22] <AlexDaniel> in this case . works like an infix operator

[21:22] <AlexDaniel> so you can have whitespace around it without unspace

[21:25] <bazzaar> I see, ... I wonder if the hyper causes the complication, since the error says "missing << or >>"

[21:31] *** Guest629 left
[21:32] *** devmikey joined
[21:33] *** stmuk_ joined
[21:33] *** mcmillhj joined
[21:35] *** stmuk left
[21:35] *** simpleseeker left
[21:36] *** simpleseeker joined
[21:38] *** mcmillhj left
[21:39] <bazzaar> m: my Int @bits = "0 0 0 0 0 0 0 0 1 0 1 1 1 0 1 1 1 1"\␤.words».Int; say @bits;

[21:39] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «[0 0 0 0 0 0 0 0 1 0 1 1 1 0 1 1 1 1]␤»

[21:40] *** devmikey left
[21:44] <bazzaar> that last codeline seems to fail on my Rakudo Star 2018.01 linux, says "expecting postfix" after the escape char

[21:44] *** mcmillhj joined
[21:46] <timotimo> did you use an actual newline?

[21:46] <timotimo> because camelia will translate ␤ to a proper newline and back, because irc doesn't do multi-line text

[21:49] <bazzaar> timotimo: aaah, that explains it, sorry my bad, didn't realise that's what Camelia did

[21:49] *** mcmillhj left
[21:51] *** dugdig left
[21:52] *** char_var[buffer] left
[21:54] <timotimo> no prob :)

[21:59] *** pharv_ left
[22:00] *** mcmillhj joined
[22:01] *** pharv joined
[22:02] *** pharv left
[22:03] *** pharv joined
[22:05] *** mcmillhj left
[22:06] *** alpha6 left
[22:09] *** simpleseeker left
[22:13] *** mcmillhj joined
[22:14] *** alpha6 joined
[22:14] *** bazzaar left
[22:16] *** robertle left
[22:17] *** pharv left
[22:18] *** mcmillhj left
[22:24] *** mcmillhj joined
[22:31] *** mcmillhj left
[22:34] *** pharv joined
[22:36] *** cozachk joined
[22:37] *** mcmillhj joined
[22:37] *** releasable6 left
[22:37] *** releasable6 joined
[22:37] *** ChanServ sets mode: +v releasable6

[22:39] *** zachk left
[22:41] *** mcmillhj left
[22:43] *** pharv left
[22:47] *** pharv joined
[22:50] *** mcmillhj joined
[22:55] *** mcmillhj left
[22:59] *** zachk joined
[23:00] *** cocozachk joined
[23:02] *** cozachk left
[23:04] *** zachk left
[23:06] <Herby_> o/

[23:08] <Herby_> \o

[23:09] <comborico1611> Hello

[23:10] *** cozachk joined
[23:13] *** cocozachk left
[23:19] *** mcmillhj joined
[23:22] *** cozachk is now known as zachk

[23:22] *** zachk left
[23:22] *** zachk joined
[23:24] *** mcmillhj left
[23:25] <comborico1611> Wondering why this very simple program isn't doing what I want: https://hastebin.com/kitibizesa.pl

[23:26] *** cozachk joined
[23:29] <tobs> comborico1611: what do you want? (You never use the return value of do_twice, for one)

[23:30] <comborico1611> Oh!  Let me try that real quick.  Thanks

[23:30] *** mcmillhj joined
[23:30] *** zachk left
[23:31] <tobs> ah, wait. I think I get it. You expect the "x 2" in do_twice to execute your "say" twice?

[23:31] <comborico1611> Right.

[23:31] <tobs> But it will just duplicate the return value of the function call, not call the function twice.

[23:31] <comborico1611> I see.  That's what I needed to understand!  Thanks!

[23:33] <tobs> m: -> $code, $val { $code($val) for ^2 }((* x 2).say, "Wall")

[23:33] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «WallWall␤WallWall␤»

[23:34] *** markong left
[23:34] <tobs> "for ^2" is your do_twice

[23:35] *** mcmillhj left
[23:35] <timotimo> you want xx instead of x here, i think

[23:36] <timotimo> m: sub do_twice($code, $val) { $code($val) xx 2 }; sub print_twice($x) { (say $x) xx 2 }; do_twice({ say "i do the $_ 'round these parts!" }, "saying"); print_twice("hello")

[23:36] <camelia> rakudo-moar 9e6ae276a: OUTPUT: «i do the saying 'round these parts!␤i do the saying 'round these parts!␤hello␤hello␤»

[23:37] <timotimo> comborico1611: x is string multiplication, that's why it doesn't re-evaluate the LHS multiple times. the xx operator, aka list multiplication, does exactly that, though

[23:39] <comborico1611> timotimo: Ah yes.  It worked.  Truly more than one way to do it.

[23:39] <comborico1611> Thanks!

[23:39] <timotimo> YW

[23:39] <comborico1611> LHS?

[23:40] <timotimo> left-hand side

[23:42] *** zachk joined
[23:43] *** mcmillhj joined
[23:44] *** cozachk left
[23:45] *** zachk left
[23:45] *** zachk joined
[23:48] *** mcmillhj left
[23:54] *** w_richard_w joined
[23:54] *** mcmillhj joined
[23:55] *** cozachk joined
[23:57] *** simpleseeker joined
[23:58] *** zachk left
[23:59] *** mcmillhj left
