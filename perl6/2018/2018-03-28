[00:01] *** comborico1611 left
[00:05] *** mcmillhj joined
[00:10] *** mcmillhj left
[00:14] <timotimo> http://blog.frizk.net/2018/03/total-meltdown.html?m=1  m(

[00:24] *** w_richard_w joined
[00:24] *** mcmillhj joined
[00:29] *** mcmillhj left
[00:34] *** Bowlslaw joined
[00:35] *** cdg joined
[00:35] <Bowlslaw> does anyone know how to do the perl 6 equivalent of `my ($var1, $var2) = $sth->fetchrow_array`

[00:35] <Bowlslaw> that is, get values from a sql database one by one and assign them to $vars

[00:37] <timotimo> i believe you want binding, i.e. the := operator

[00:38] *** cdg_ left
[00:38] *** khw left
[00:39] *** mcmillhj joined
[00:39] *** cdg left
[00:44] *** mcmillhj left
[00:47] *** Wenjie joined
[00:47] *** Wenjie left
[00:49] <Bowlslaw> hmm

[00:49] <timotimo> m: sub returns-array() { [1, 2] }; my ($var1, $var2) := returns-array; say "var1 is $var1, and var2 is $var2"

[00:49] <camelia> rakudo-moar 17ca56b4e: OUTPUT: «var1 is 1, and var2 is 2␤»

[00:50] <lookatme> m: sub returns-array() { [1, 2] }; my ($var1, $var2) = returns-array; say "var1 is $var1, and var2 is $var2"

[00:50] <camelia> rakudo-moar 17ca56b4e: OUTPUT: «var1 is 1, and var2 is 2␤»

[00:50] *** Bowlslaw left
[00:51] <lookatme> m: sub returns-array() { $[1, 2] }; my ($var1, $var2) = returns-array; say "var1 is $var1, and var2 is $var2"

[00:51] <camelia> rakudo-moar 17ca56b4e: OUTPUT: «var1 is 1, and var2 is 2␤»

[00:51] <timotimo> oh, that's fine, too

[00:52] <lookatme> m: sub returns-array() { $[1, [2, 3],] }; my ($var1, $var2) = returns-array; say "var1 is $var1, and var2 is $var2"

[00:52] <camelia> rakudo-moar 17ca56b4e: OUTPUT: «var1 is 1, and var2 is 2 3␤»

[00:56] *** aborazmeh joined
[00:56] *** aborazmeh left
[00:56] *** aborazmeh joined
[00:57] *** mcmillhj joined
[01:03] *** mcmillhj left
[01:03] *** pierre left
[01:06] *** ufobat___ left
[01:12] *** mcmillhj joined
[01:17] *** mcmillhj left
[01:21] *** skids left
[01:25] *** pierre joined
[01:26] *** mcmillhj joined
[01:27] *** skids joined
[01:31] *** mcmillhj left
[01:33] *** itaipu joined
[01:43] *** rindolf left
[01:45] *** itaipu left
[01:45] *** ufobat joined
[01:45] *** mcmillhj joined
[01:46] *** ilbot3 left
[01:50] *** mcmillhj left
[01:56] *** ilbot3 joined
[01:56] *** ChanServ sets mode: +v ilbot3

[01:57] *** itaipu joined
[01:58] *** pharv left
[01:59] *** pharv joined
[02:03] *** pharv left
[02:04] *** mcmillhj joined
[02:06] *** pharv joined
[02:09] *** mcmillhj left
[02:10] *** pharv left
[02:16] *** mcmillhj joined
[02:17] *** ufobat_ joined
[02:20] *** ufobat left
[02:21] *** mcmillhj left
[02:23] *** Bowlslaw joined
[02:30] <BenGoldberg> Can anybody here help me with rakudobrew?  When I try to run it, I get the error message: Can't open perl script "C:\Users\Ben": No such file or directory

[02:34] *** mcmillhj joined
[02:39] *** mcmillhj left
[02:43] *** pierre left
[02:43] <Bowlslaw> All I know is that use of rakudobrew is discouraged now.

[02:44] *** pierre joined
[02:45] *** pierre left
[02:45] *** pierre joined
[02:48] <donpdonp> my $header = BlkMev::Chain::($chain.name)::header; => Combination of indirect name lookup and call not supported

[02:49] <donpdonp> im not sure what thats trying to tell me. the modules are defined as: module BlkMeV::Chain::Bitcoin { our $header = Buf.new(0xf9, 0xbe, 0xb4, 0xd9); }

[02:53] *** mcmillhj joined
[02:58] *** mcmillhj left
[02:58] *** itaipu_ joined
[03:01] *** itaipu left
[03:10] *** rjt_pl joined
[03:11] *** shinobi-cl joined
[03:11] *** aborazmeh left
[03:13] *** shinobi-cl left
[03:13] *** mcmillhj joined
[03:14] *** athenot left
[03:14] *** athenot joined
[03:17] *** mr_ron left
[03:17] *** mcmillhj left
[03:18] <Bowlslaw> hey guys i'm having a bit of trouble : after a variable

[03:18] <Bowlslaw> for example, if I have a class with a method

[03:18] <Bowlslaw> method my-method($me:) { say $me.^name(); }

[03:19] <Bowlslaw> the : allows me to use that variable to identify the class

[03:19] <Bowlslaw> but what is it called?

[03:29] <MasterDuke> Bowlslaw: the invocant i think

[03:31] *** mcmillhj joined
[03:35] *** skids left
[03:36] *** mcmillhj left
[03:37] *** Bowlslaw left
[03:46] *** mcmillhj joined
[03:46] *** khw joined
[03:50] *** mcmillhj left
[04:03] *** Bowlslaw joined
[04:03] *** itaipu_ left
[04:04] <Bowlslaw> MasterDuke: thanks

[04:04] *** mcmillhj joined
[04:04] *** Bowlslaw left
[04:09] *** mcmillhj left
[04:11] <donpdonp> how can i set a timeout for https://docs.perl6.org/type/IO::Socket::Async#method_connect

[04:13] <donpdonp> oh, use .in(seconds) on the promise.

[04:14] <donpdonp> hmm no, connect doesnt give the promise until connected apparently

[04:15] *** mcmillhj joined
[04:19] *** rjt_pl left
[04:20] *** mcmillhj left
[04:25] *** pierre left
[04:26] *** pierre joined
[04:29] *** mcmillhj joined
[04:29] *** cdg joined
[04:30] *** pierre left
[04:32] *** pierre joined
[04:34] *** mcmillhj left
[04:35] *** b2gills joined
[04:35] *** cdg left
[04:36] *** pierre left
[04:44] *** mcmillhj joined
[04:48] *** khw left
[04:49] *** mcmillhj left
[04:50] *** pierre joined
[04:55] *** pierre left
[04:59] *** pharv joined
[05:00] *** pierre joined
[05:03] *** mcmillhj joined
[05:04] *** pharv left
[05:04] *** pierre left
[05:09] *** mcmillhj left
[05:10] *** pierre_ joined
[05:14] *** dct joined
[05:15] *** domidumont joined
[05:17] *** BenGoldberg left
[05:18] *** sauvin joined
[05:19] *** dct left
[05:19] *** mcmillhj joined
[05:20] *** troys left
[05:21] *** domidumont left
[05:22] *** cdg joined
[05:24] *** mcmillhj left
[05:24] *** pierre_ left
[05:27] *** cdg left
[05:37] *** pierre_ joined
[05:37] *** mcmillhj joined
[05:41] *** pierre_ left
[05:42] *** mcmillhj left
[05:43] *** robertle left
[05:47] *** pierre_ joined
[05:51] *** pierre_ left
[05:56] *** mcmillhj joined
[05:59] *** kurahaupo joined
[06:00] *** mcmillhj left
[06:01] *** domidumont joined
[06:03] *** ambs joined
[06:05] *** pierre_ joined
[06:09] *** pierre_ left
[06:11] *** pierre_ joined
[06:12] *** ufobat_ left
[06:12] *** mcmillhj joined
[06:17] *** mcmillhj left
[06:19] *** reu joined
[06:28] *** noganex joined
[06:29] *** mcmillhj joined
[06:34] *** mcmillhj left
[06:40] *** pierre_ left
[06:41] *** pierre_ joined
[06:43] *** lowbro joined
[06:43] *** lowbro left
[06:43] *** lowbro joined
[06:44] *** mcmillhj joined
[06:44] *** robertle joined
[06:45] *** pierre_ left
[06:46] *** pierre_ joined
[06:49] *** mcmillhj left
[06:55] *** entonian joined
[06:57] *** entonian left
[07:00] *** pharv joined
[07:00] *** mcmillhj joined
[07:01] *** wamba joined
[07:04] *** pharv left
[07:05] *** mcmillhj left
[07:10] *** mcmillhj joined
[07:12] *** cdg joined
[07:16] *** mcmillhj left
[07:17] *** cdg left
[07:19] *** pierre_ left
[07:20] *** pierre_ joined
[07:21] *** cdg joined
[07:26] *** cdg left
[07:26] *** mcmillhj joined
[07:31] *** mcmillhj left
[07:35] *** darutoko joined
[07:36] *** ufobat_ joined
[07:36] *** Diddi left
[07:39] *** AlexDaniel joined
[07:41] *** mcmillhj joined
[07:44] *** darutoko left
[07:46] *** mcmillhj left
[07:49] <AlexDaniel> squashable6: next

[07:49] <squashable6> AlexDaniel, Next SQUASHathon in 9 days and ≈2 hours (2018-04-07 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[07:51] *** scimon joined
[07:51] *** dakkar joined
[07:53] *** ufobat_ left
[07:57] *** chartractegg joined
[08:00] *** mcmillhj joined
[08:01] *** rindolf joined
[08:02] *** pierre_ left
[08:03] *** pierre joined
[08:06] *** mcmillhj left
[08:06] *** undersightable6 left
[08:07] *** undersightable6 joined
[08:07] *** ChanServ sets mode: +v undersightable6

[08:07] *** zakharyas joined
[08:09] <AlexDaniel> .tell moritz not sure if you received my last message, so here it is again. Maybe fix issues with https on some domains: https://gist.github.com/Whateverable/8c42cf757bca538dc8af294d3aa6b529

[08:09] <yoleaux> AlexDaniel: I'll pass your message to moritz.

[08:09] <AlexDaniel> well, or anyone who has enough access and tuits ↑

[08:15] *** mcmillhj joined
[08:18] *** zakharyas left
[08:18] *** zakharyas joined
[08:20] *** mcmillhj left
[08:22] *** sauvin_ joined
[08:22] *** sauvin_ left
[08:24] *** sauvin left
[08:24] *** sauvin_ joined
[08:33] *** mcmillhj joined
[08:35] *** sena_kun joined
[08:39] <AlexDaniel> heh https://github.com/issues/assigned

[08:39] *** mcmillhj left
[08:40] <AlexDaniel> Useful link. I'm now down to three from a gazillion!

[08:41] *** chartractegg left
[08:44] <scimon> Hmm.... I want to test that calling a method returns a Failure. Anyone got a handy pointer on how to do that? 

[08:45] <AlexDaniel> m: sub foo { my $x = +‘a’; $x }; if foo() ~~ Failure { say ‘oops’ }

[08:45] <camelia> rakudo-moar 17ca56b4e: OUTPUT: «oops␤»

[08:45] <AlexDaniel> that's for testing that something returns a failure, it won't catch exceptions

[08:45] <scimon> So in the case of a unit test just use and OK? 

[08:45] <AlexDaniel> is that what you wanted?

[08:46] <scimon> ie ok test-call() ~~ Failure

[08:46] <scimon> (Which works) I thought is test-call(), Failure would work but it gave the wonderful error expected: (Failure) got: (Failure) 

[08:47] <scimon> Cheers.

[08:48] <AlexDaniel> I actually don't know if that's the best way, maybe someone else can comment

[08:48] <AlexDaniel> roast does exactly that in some cases

[08:49] <AlexDaniel> in other cases:

[08:49] <AlexDaniel> isa-ok 10 div 0   , Failure, "10 div 0 softfails";

[08:49] <AlexDaniel> scimon: ↑ alternative solution

[08:51] *** mcmillhj joined
[08:56] <scimon> Hmmm (loosk)

[08:56] <scimon> looks even

[08:56] <scimon> Chhers.

[08:56] *** mcmillhj left
[08:56] <scimon> (Today is bad typing day apparently)

[08:57] <scimon> isa-ok seems to be a better match. 

[09:00] *** pharv joined
[09:05] *** zakharyas left
[09:05] *** pharv left
[09:12] *** [particle] joined
[09:13] *** w_richard_w left
[09:18] *** Lasse joined
[09:19] *** cdg joined
[09:20] <AlexDaniel> “clip arser with grammar” hmmm… Ah! CLI parser!

[09:20] <AlexDaniel> ( https://github.com/rakudo/rakudo/pull/324 )

[09:22] *** kaare_ joined
[09:23] *** zakharyas joined
[09:24] *** cdg left
[09:28] *** pierre left
[09:32] <AlexDaniel> tyil: lonestar is under AGPLv3 but… why? I'm using APGLv3 myself for several things, but in this particular case I don't see the point… I'm really curious, why?

[09:33] * lizmat just typed "gut push"   # bad typing day today indeed  :-)

[09:33] <tyil> AlexDaniel: its my go-to license these days, used to be GPLv3

[09:34] <AlexDaniel> lizmat: I do that all the time when I'm not in Ctrl+R, and I get really mad that things don't autocorrect commands

[09:34] <tyil> would there be any reason to not use AGPL?

[09:35] <AlexDaniel> tyil: I'm not sure…

[09:39] <AlexDaniel> say I make a web application that has lonestar built into it to update itself, does it mean that I would have to release the source code?

[09:39] <AlexDaniel> I have no idea

[09:40] <tyil> im not a lawyer, but from what I understand, yes

[09:40] <tyil> the AGPL intends to spread the libre even on webservices

[09:41] <AlexDaniel> which is fine if you're making a webservice, but lonestar is not…

[09:42] <tyil> I know

[09:42] <AlexDaniel> so you're potentially “infecting” stuff by your little thingy that just installs rakudo, and I don't know if it's right or not. It's weird for sure :)

[09:42] <tyil> but as I said, it's my default license I go to

[09:42] <tyil> how would it "infect" things if it just installs rakudo?

[09:43] <tyil> from what I've seen, most people who talk about the dangers of GPL infecting code are FUD

[09:43] <AlexDaniel> well, I thought I gave an example a few messages ago? :)

[09:43] *** pierre joined
[09:43] <tyil> if you use lonestar to install rakudo, thats completely different from forking it and using that in your site's codebase

[09:43] <AlexDaniel> don't get me wrong, I'm all for AGPLv3. The whole whateverable is under AGPLv3 for a good reason

[09:43] <AlexDaniel> but using AGPLv3 for an installer… hmmm… does not sound appropriate to me, but maybe it's ok

[09:44] <AlexDaniel> it was just a question anyway

[09:44] <tyil> you're free to use (A)GPL code as a tool to setup any project

[09:44] <tyil> said project is not in any way required to follow the GPL

[09:44] <tyil> it is once you take part of the tool and incorporate it directly into your project that the license will start demanding things of your project

[09:44] *** kaare_ left
[09:45] <tyil> but just bundling the entire tool and not modifying it is no problem

[09:46] <tyil> on a related note, did you try lonestar (and if you do, did any issues arise)?

[09:46] <AlexDaniel> tyil: not yet, I'm hiding under the bed because the amount of installers we have nowadays is scaring me :)

[09:47] <tyil> last time I referenced one in an article I got yelled at

[09:47] <tyil> and all other solutions proposed then were... lacklustre in my view

[09:48] *** darutoko joined
[09:48] <AlexDaniel> tyil: fwiw the license question was not yelling in any way, I was just curious why one would use AGPL for a non-webservice project and how they see it

[09:49] <tyil> oh, I didnt mean to imply you were part of the yelling

[09:49] <AlexDaniel> just making sure :)

[09:49] <tyil> the yelling was before I started on lonestar :p

[09:49] <AlexDaniel> I've seen that, yeah

[09:49] <tyil> I just use AGPL for new projects unless there's a solid reason not to go with AGPL

[09:49] <AlexDaniel> we tend to yell sometimes on IRC. I guess we just need a bit more ♥

[09:50] <AlexDaniel> it was also reddit I think?

[09:50] <AlexDaniel> reddit is unfixable though :P

[09:50] <tyil> tbh I could go for some ♥ but my gf isn't physically around :(

[09:50] <tyil> what was on reddit?

[09:50] <AlexDaniel> discussion about rakudobrew

[09:50] <tyil> oh

[09:51] <tyil> the time I was involved was in here

[09:51] <tyil> reddit is strangely kind to me unless I talk about perl in a positive light outside of the perl communities :p

[09:51] <AlexDaniel> haha

[09:52] <donpdonp> hehe

[09:53] <tyil> inspired by JJ's need for analytics I set up that Matomo thing, but I dont like tracking people with js, so I'm now working on a small application to parse nginx logs into a db, and a frontend with cro and react to have decent insight of how many visitors I'm getting

[09:54] <tyil> once I get more positive feedback on lonestar I'll update my perl6 on a raspi guide to use that instead of rakudobrew

[09:55] <AlexDaniel> cool

[09:56] <timotimo> tyil: fwiw, matomo offers an opt-out button that you can include as an iframe

[09:57] <AlexDaniel> what about an opt-in button?

[09:57] *** wamba left
[09:57] <timotimo> perhaps you can change the default

[09:57] <stmuk> what is lonestar?

[09:58] <timotimo> anyway, matomo also lets you just feed it the server logs instead

[09:58] <AlexDaniel> stmuk: https://github.com/Tyil/lonestar

[09:59] <timotimo> lonestar is a rebel that tends to jam Dark Helmet's radar with raspberry jam

[09:59] <timotimo> who*

[10:00] <stmuk> I had a cow-orker who got so into bash he started using its unit test framework

[10:00] <donpdonp> timotimo: only one man would dare give dark helmet the raspberry.

[10:00] <tyil> stmuk: I intended it to make it posix sh

[10:01] <tyil> but posix sh had no export -f

[10:01] <stmuk> I probably should port rakudup to posix sh TBH. stmuk 2002 would hate me 

[10:03] *** zakharyas left
[10:03] *** zakharyas joined
[10:06] <tyil> I wonder how much effort it would be to get server side rendering with react and cro

[10:07] *** zakharyas left
[10:07] <stmuk> when I saw the old school UNIX guys who produced go used bash I realised the battle was lost

[10:18] *** zakharyas joined
[10:21] *** zakharyas left
[10:25] *** zakharyas joined
[10:26] *** mahafyi joined
[10:32] *** Zoffix joined
[10:32] <Zoffix> scimon: there's a fails-like test routine that got the same interface as throws-like you can steal: https://github.com/perl6/roast/blob/master/packages/Test/Util.pm#L336-L353

[10:33] <Zoffix> scimon: isa-ok ..., Failure isn't good as it leaves the Failure unhandled and you'll get warned about it if it's GCed.

[10:36] <Zoffix> AlexDaniel: well, I have enough access and tuits, but what do I need to do? I already brought it up to moritz, but he said he doesn't see an issue: https://irclog.perlgeek.de/perl6/2018-03-18#i_15935550

[10:37] <Zoffix> Based on the domain name involved, I'd guess I messed up when seting up alerts.perl6.org 'cause I used the certbot command from repos or something. Basically, not the same certbot that was apparently already in use on the server

[10:38] *** pierre left
[10:39] <moritz> https://faq.perl6.org/ does seem to have a problem

[10:39] <yoleaux> 08:09Z <AlexDaniel> moritz: not sure if you received my last message, so here it is again. Maybe fix issues with https on some domains: https://gist.github.com/Whateverable/8c42cf757bca538dc8af294d3aa6b529

[10:39] <moritz> testers too

[10:39] <moritz> rakudo.org doesn't yet point to our server, so nothing we can do

[10:40] <moritz> collabti.org is outside our control

[10:41] <moritz> Zoffix: I think certbot dosn't create certificates for pure redirect domains, because it needs a document root where it can store the challenge

[10:41] <Zoffix> Is faq. using the wildcard cert instead of separate certbot cert?

[10:42] <moritz> there is no wildcard cert

[10:42] <moritz> there is just one cert with several subject names

[10:42] <Zoffix> At work I got half a dozen web apps with reverseproxy only setup and they work OK.

[10:42] <moritz> which is used for everything on the www.p6c.org apache process

[10:42] <moritz> oh

[10:43] <moritz> iirc certbot/acme uses a fixed prefix for the challenge

[10:43] <moritz> maybe if you exclude these URL prefixes from the redirects, it starts working

[10:43] <Zoffix> Imma run certbot with faq.perl6.org and see what it says.

[10:43] <Zoffix> I never had to worry about prefixes or challenges before :/

[10:44] <moritz> it tries /.well-known/acme-challenge/$something

[10:44] <moritz> I might get around to it on the Easter weekend otherwise

[10:44] <Zoffix> Attempting to parse the version 0.22.2 renewal configuration file found at /etc/letsencrypt/renewal/www.perl6.org.conf with version 0.19.0 of Certbot. This might not work.

[10:44] <Zoffix> Client with the currently selected authenticator does not support any combination of challenges that will satisfy the CA.

[10:44] <Zoffix> No idea what that means...

[10:45] <moritz> it means we have to update certbot, i think

[10:46] * moritz tries that

[10:46] <moritz> https://community.letsencrypt.org/t/solution-client-with-the-currently-selected-authenticator-does-not-support-any-combination-of-challenges-that-will-satisfy-the-ca/49983

[10:49] * Zoffix just looked at $work's configs

[10:50] <Zoffix> Don't see any challenges. Just a bunch of SSL* directives

[10:51] <Zoffix> ZofBot: would you like a challenge?

[10:51] <ZofBot> Zoffix, 27 megs, cool.

[10:51] <Zoffix> You're not supposed to enjoy the challenge!

[10:54] <Zoffix> g2g. Ping me if you need me to try anything with fixing it.

[10:54] *** Zoffix left
[10:56] *** kurahaupo_ joined
[10:59] *** kurahaupo left
[10:59] *** Zoffix joined
[10:59] <Zoffix> scimon: BTW, if you want to test *just* that you got a Failure and not what exception it contains, you can just use `is` routine:   is $o.meth, Failure, "meth returns a Failure"

[10:59] *** Zoffix left
[11:01] *** pharv joined
[11:04] *** mahafyi left
[11:05] *** pharv left
[11:10] *** kurahaupo_ left
[11:11] *** kurahaupo joined
[11:11] <scimon> Zoffix: That's what I tried first time (is method, Failure)

[11:17] *** zakharyas left
[11:20] *** Zoffix joined
[11:20] <Zoffix> scimon: it should work. Did you have trouble with it?

[11:21] <Zoffix> m: use Test; sub z { fail }; is z(), Failure

[11:21] <camelia> rakudo-moar 29b7f464e: OUTPUT: «not ok 1 - ␤# Failed test at <tmp> line 1␤# expected: (Failure)␤#      got: (Failure)␤»

[11:21] <Zoffix> oops

[11:21] <Zoffix> That's a bug

[11:22] <moritz> shouldn't you use isa-ok for that?

[11:23] <moritz> m: use Test; sub z { fail }; isa-ok z(), Failure

[11:23] <camelia> rakudo-moar 29b7f464e: OUTPUT: «ok 1 - The object is-a 'Failure'␤»

[11:23] *** kurahaupo left
[11:24] <Zoffix> scimon: oh nevermind. I'm clearly nit awake. That only tests type objects in $got

[11:24] *** darutoko left
[11:24] *** kurahaupo joined
[11:25] <Zoffix> scimon: so yeah, use fails-like from that code I linked or isa-ok with manual defusion of failures with .so call on them

[11:25] <Zoffix> moritz: it doesn't mark them as handled

[11:28] * Zoffix would be +1 on adding fails-like to core Test.pm6

[11:32] <Lasse> Is there a way to interface with SAP RFC? if so can someone point at an example? That would be much appreciated.

[11:33] *** cdg joined
[11:33] <Zoffix> m: use Test; sub z { fail }; isa-ok ($_ without z), Failure

[11:33] <camelia> rakudo-moar 29b7f464e: OUTPUT: «ok 1 - The object is-a 'Failure'␤»

[11:33] <Zoffix> eco: sap

[11:33] <buggable> Zoffix, Nothing found

[11:34] <Zoffix> Lasse: doesn't seem to be anything in ecosystem You could try searching metacpan.org and using what you find with Inline::Perl5

[11:34] <Zoffix> eco: Perl5

[11:34] <buggable> Zoffix, Found 5 results: Inline::Perl5, Digest::MD5, Web::Scraper, Pod::Perl5, Inline::Perl5. See https://modules.perl6.org/s/Perl5

[11:35] *** Zoffix left
[11:35] *** markong joined
[11:37] *** kurahaupo left
[11:37] *** kurahaupo joined
[11:37] *** cdg left
[11:47] *** reu left
[11:50] *** lowbro left
[11:51] *** kurahaupo left
[11:51] *** kurahaupo joined
[11:55] *** pierre_ joined
[11:58] <[Coke]> bengoldberg's problem smelled like not handling spaces in paths.

[11:58] <[Coke]> (but I don't know if rakudobrew ever worked on windows)

[11:58] *** reu joined
[12:06] *** kurahaupo left
[12:07] *** kurahaupo joined
[12:14] *** itaipu joined
[12:21] *** kurahaupo left
[12:22] *** kurahaupo joined
[12:23] <scimon> Cheers :)

[12:35] *** kurahaupo left
[12:36] *** kurahaupo joined
[12:38] <AlexDaniel> moritz: well yeah obviously I meant just the perl6.org ones

[12:39] *** darutoko joined
[12:42] *** undersightable6 left
[12:42] *** undersightable6 joined
[12:42] *** ChanServ sets mode: +v undersightable6

[12:49] *** kurahaupo left
[12:49] *** kurahaupo joined
[12:50] *** athenot_ joined
[12:51] *** athenot left
[12:52] *** mcmillhj joined
[12:53] <robertle> AlexDaniel: if there is anything that I can do regarding R#1663 and similar ones, please let me know. I can do some debugging, but some of this is quite hard so I would need help. for example I don't understand where we create something that can be called from C for a sub reference that we pass to C code...

[12:53] <synopsebot> R#1663 [open]: https://github.com/rakudo/rakudo/issues/1663 [severe][⚠ blocker ⚠] rakudo 2018.02 test failure on big endian systems in t/04-nativecall/21-callback-other-thread.t

[12:54] <AlexDaniel> robertle: I don't know too, unfortunately. But I totally see why we should want to resolve these issues as soon as possible…

[12:54] <AlexDaniel> debian testing has no rakudo now. 💩 :(

[12:55] <AlexDaniel> that said, I'm a bit confused why it throws away the whole package if it doesn't build on some architectures

[12:56] <robertle> debian distinguished between "release" architectures and those that are not, a package needs to work on all release architectures to be a candidate for testing

[12:57] <AlexDaniel> OK makes sense

[12:57] <ilmari> robertle: I thought it only needed to work on all release architectures it has worked on in the past

[12:57] <robertle> the maintainer can furtehr restrict that set of architectrues, but the idea there is to use this for functional reasons, not quality. so e.g. a arm-specific  bootloader would not be attempted on mips

[12:57] <AlexDaniel> ilmari: rakudo did work in the past

[12:57] <AlexDaniel> on big endian and other stuff

[12:58] <robertle> but apart from the technicalities of that process, I think it's a wise thing to do even if painful sometimes. if our nativecall implementation only works on some architectures, then that is clearly a quality problem

[12:58] *** wamba joined
[12:59] <robertle> and a quite intriguing one as well!

[13:00] <AlexDaniel> robertle: by the way, if it did work in the past, maybe bisecting it is a reasonable idea?

[13:00] <AlexDaniel> who knows, maybe you'll get some clues from the commit it points to

[13:02] <robertle> yeah, but from what I have glanced the point where it stoppedworking was when that test was added :)

[13:02] <AlexDaniel> awesome

[13:02] <AlexDaniel> … maybe skipping the test for now is a reasonable idea?…

[13:03] <AlexDaniel> not nice, but the rest of rakudo works fine, right?…

[13:03] <AlexDaniel> does not resolve the quality issue though

[13:03] <robertle> but we'll need working nativecall for lots of things that may not have enough test coverage on their own, e.g. database drivers

[13:04] <AlexDaniel> right-right. Just thinking out loud…

[13:04] *** kurahaupo left
[13:04] <AlexDaniel> robertle: thank you for your help by the way

[13:04] <robertle> I am wondering what ppc64 and s390x have in common that other arhcs do not have...

[13:04] *** kurahaupo joined
[13:09] *** zakharyas joined
[13:10] *** vcv joined
[13:17] <Geth> ¦ doc/fails-like: 0c15591809 | (Zoffix Znet)++ | doc/Language/testing.pod6

[13:17] <Geth> ¦ doc/fails-like: Document fails-like test routine

[13:17] <Geth> ¦ doc/fails-like: 

[13:17] <Geth> ¦ doc/fails-like: Impl     PR: https://github.com/rakudo/rakudo/pull/1664

[13:17] <Geth> ¦ doc/fails-like: Propspec PR: https://github.com/perl6/roast/pull/408

[13:17] <Geth> ¦ doc/fails-like: review: https://github.com/perl6/doc/commit/0c15591809

[13:17] <Geth> ¦ doc: zoffixznet++ created pull request #1876: Document fails-like test routine

[13:17] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/1876

[13:19] *** kurahaupo left
[13:19] *** kurahaupo joined
[13:21] <Lasse> Zoffix: thanks but I would like to write my program in Perl6. I have never written anything in Perl5, can I use Perl5 modules in Perl6? 

[13:23] *** Zoffix joined
[13:23] <Zoffix> Lasse: yeah, that's why I mentioned Inline::Perl5. It lets you use Perl 5 modules in Perl 6, though if you never coded in Perl 5, it might be tough to figure out how to use those modules (and install them too)

[13:23] <Zoffix> Lasse: I guess you could trailblaze and write a Perl 6 implementation of that stuff :)

[13:24] <sjn> Lasse: No need to use Perl5 modules in a Perl6 program, especially when you're learning :)

[13:25] <Zoffix> sjn: is there Perl 6 SAP RFC then?

[13:26] <Zoffix> .oO( what a terrible name choice to call it "RFC" )

[13:27] <sjn> Zoffix: I'd be surprised. I was just speaking from the KISS perspective :)

[13:28] *** zakharyas left
[13:28] <sjn> but sure, if the goal is to talk with SAP and learning stuff is secondary, then why not

[13:28] *** zakharyas joined
[13:30] *** zakharyas left
[13:31] *** zakharyas joined
[13:32] <Zoffix> Looking at guts of https://metacpan.org/pod/release/PIERS/sapnwrfc-0.37/sapnwrfc.pm seems a pretty big task to write an implementation of it

[13:33] <scimon> So if we're converting a Perl5 module to Perl6 do we stick to snake case? Or update methods to kebab case? Thoughts?

[13:34] *** kurahaupo left
[13:34] *** kurahaupo joined
[13:35] *** travis-ci joined
[13:35] <travis-ci> Doc build failed. Zoffix Znet 'Document fails-like test routine

[13:35] <travis-ci> https://travis-ci.org/perl6/doc/builds/359363683 https://github.com/perl6/doc/commit/0c1559180933

[13:35] *** travis-ci left
[13:35] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[13:36] <timotimo> scimon: let's build a metaprogramming module that can switch names around at import time

[13:37] <Zoffix> .tell tbrowder_ docs build have a bunch of warnings about RAKUDO_POD_TABLE_DEBUG stuff. IIRC you implemented that. Perhaps you'll be able to convert the tables in the docs to proper format? https://travis-ci.org/perl6/doc/builds/359363683#L1375

[13:37] <yoleaux> Zoffix: I'll pass your message to tbrowder_.

[13:40] <scimon> That's a plan... 

[13:43] *** zakharyas left
[13:44] *** zakharyas joined
[13:47] *** pmurias joined
[13:47] <pmurias> tyil: what's lonestar?

[13:48] <tyil> from the first line of the readme: A small Bash application to install the Rakudo Star Perl 6 distribution.

[13:49] <Zoffix> pmurias: https://github.com/Tyil/lonestar

[13:49] *** kurahaupo left
[13:49] <tyil> I'm at work rn, so I cant answer all questions properly, but if you have any questions, feel free to hl me or make an issue

[13:49] *** kurahaupo joined
[13:51] <pmurias> tyil: thanks, it's straighforward enought that looking through the source answered my questions

[13:51] <tyil> :>

[13:52] <tyil> glad to hear that

[13:52] <tbrowder_> Zoffix: noted

[13:52] <yoleaux> 13:37Z <Zoffix> tbrowder_: docs build have a bunch of warnings about RAKUDO_POD_TABLE_DEBUG stuff. IIRC you implemented that. Perhaps you'll be able to convert the tables in the docs to proper format? https://travis-ci.org/perl6/doc/builds/359363683#L1375

[13:55] <Zoffix> looks like above travis failure was due to the same bug that makes precomp spectests flop. Similar warnings in output and it works fine after I restarted it

[13:55] *** Zoffix left
[13:58] *** skids joined
[13:58] *** travis-ci joined
[13:58] <travis-ci> Doc build passed. Zoffix Znet 'Document fails-like test routine

[13:58] <travis-ci> https://travis-ci.org/perl6/doc/builds/359363683 https://github.com/perl6/doc/commit/0c1559180933

[13:58] *** travis-ci left
[14:04] *** kurahaupo left
[14:05] *** kurahaupo joined
[14:10] *** mr_ron joined
[14:11] <buggable> New CPAN upload: LibGit2-0.2.tar.gz by CTILMES https://cpan.metacpan.org/authors/id/C/CT/CTILMES/Perl6/LibGit2-0.2.tar.gz

[14:12] <Lasse> Soffix: tx again. I look  into it to if it is worth the effort. Perl6 is worth the effort of learning though:)

[14:17] *** kurahaupo left
[14:17] *** kurahaupo joined
[14:20] *** zakharyas left
[14:22] *** itaipu_ joined
[14:22] *** zakharyas joined
[14:22] *** itaipu left
[14:28] *** vcv left
[14:29] *** vcv joined
[14:32] *** kurahaupo left
[14:33] *** kurahaupo joined
[14:34] <abraxxa> can the link buggable posts be changed to the metacpan documentation page?

[14:34] <moritz> abraxxa: do you have an example where it should point to?

[14:34] <abraxxa> or to modules.perl6.org because it seems metacpan can't display perl 6 module docs

[14:37] <mr_ron> m: class C {has $.a = 5}; class C1 is C { method a { return 2 * $!a } }; say C1.new.a

[14:37] <camelia> rakudo-moar 68a576e62: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Attribute $!a not declared in class C1␤at <tmp>:1␤------> 3 C1 is C { method a { return 2 * $!a } }7⏏5; say C1.new.a␤    expecting any of:␤        horizontal whitespace␤        postfix…»

[14:37] <mr_ron> m: class C {has $.a = 5}; class C1 is C { method a { return 2 * $.a } }; say C1.new.a # how to override default accessor?

[14:37] <camelia> rakudo-moar 68a576e62: OUTPUT: «MoarVM panic: Memory allocation failed; could not allocate 306928 bytes␤»

[14:38] <moritz> mr_ron: return 2 * $!a

[14:38] <timotimo> mr_ron: you have overridden the default accessor there

[14:38] <timotimo> that's why it infinitely recurses

[14:38] <moritz> a refers to the method you are declaring, the default acccessor doesn't exist anymore

[14:39] <mr_ron> I'm confused.  The first attempt had a syntax error and the second one hangs.

[14:40] <timotimo> yeah, private attributes are private, derived classes can't access them

[14:40] <timotimo> but you can call self.C::a

[14:40] <timotimo> m: class C {has $.a = 5}; class C1 is C { method a { return 2 * self.C::a } }; say C1.new.a

[14:40] <camelia> rakudo-moar 68a576e62: OUTPUT: «10␤»

[14:40] <timotimo> m: class C {has $.a = 5}; class C1 is C { method a { return 2 * callsame } }; say C1.new.a

[14:40] <camelia> rakudo-moar 68a576e62: OUTPUT: «10␤»

[14:40] <timotimo> that's another way to reach the original a method

[14:41] <timotimo> i didn't immediately see you had two classes there, sorry

[14:42] <mr_ron> Thanks.  Just curious - any way with ^parents?

[14:42] <timotimo> if you want

[14:42] <timotimo> m: class C {has $.a = 5}; class C1 is C { method a { my $parent = self.^parents[0]; my $meth = $parent.^find_method("a"); return 2 * self.$meth() } }; say C1.new.a

[14:42] <camelia> rakudo-moar 68a576e62: OUTPUT: «10␤»

[14:43] <mr_ron> thanks - working on a related doc issue ...

[14:43] <timotimo> btw, it'd be better to get the .^mro

[14:44] <timotimo> because that's how methods are normally resolved. it's literally the method resolution order

[14:44] <tyil> if anyone around here is using Hash::Merge, I'm going to break it later tonight or tomorrow morning probably (UTC+2)

[14:44] <lizmat> tyil: before you do that

[14:44] <lizmat> could you release a version with an :api in the meta

[14:45] <lizmat> and then break it, with a different :api in the meta ?

[14:45] <tyil> lizmat: can do

[14:45] <tyil> I was gonna add :api<1> and release a 1.0.0 with it

[14:45] <lizmat> that would give us an opportunity to test zef for :api specification  :-)

[14:45] <tyil> but I can do an api<0.1> first

[14:45] <tyil> for testing purposes :>

[14:45] <lizmat> fwiw, it doesn't have to be a number

[14:45] <lizmat> afaik

[14:45] <tyil> from what I understood its a Version

[14:46] <lizmat> ah? it is?

[14:46] <tyil> https://github.com/ugexe/zef/issues/233#issuecomment-374010261

[14:47] <tyil> seems like it differs

[14:47] <tyil> there's no consensus yet :p

[14:48] *** kurahaupo left
[14:48] <lizmat> :-(

[14:48] *** kurahaupo joined
[14:49] *** itaipu_ left
[14:50] <Geth> ¦ doc: 0c15591809 | (Zoffix Znet)++ | doc/Language/testing.pod6

[14:50] <Geth> ¦ doc: Document fails-like test routine

[14:50] <synopsebot> Link: https://doc.perl6.org/language/testing

[14:50] <Geth> ¦ doc: 

[14:50] <Geth> ¦ doc: Impl     PR: https://github.com/rakudo/rakudo/pull/1664

[14:50] <Geth> ¦ doc: Propspec PR: https://github.com/perl6/roast/pull/408

[14:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0c15591809

[14:50] <Geth> ¦ doc: 86293271f6 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Language/testing.pod6

[14:50] <Geth> ¦ doc: Merge pull request #1876 from perl6/fails-like

[14:50] <Geth> ¦ doc: 

[14:50] <Geth> ¦ doc: Document fails-like test routine

[14:50] <Geth> ¦ doc: Thanks!

[14:50] <Geth> ¦ doc: Although it depends on a couple of other PRs, they both look OK.

[14:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/86293271f6

[14:52] *** obfusk_ joined
[14:56] *** itaipu joined
[14:59] *** kurahaupo left
[14:59] *** kurahaupo joined
[15:05] *** tyil joined
[15:10] *** kurahaupo left
[15:11] *** kurahaupo joined
[15:19] *** pierre_ left
[15:20] *** zakharyas left
[15:21] *** zakharyas joined
[15:21] <scimon> https://github.com/Scimon/p6-Proc-InvokeEditor : Almost ready for the 0.1 release. (Needs docs). 

[15:22] *** robertle left
[15:22] *** kurahaupo left
[15:22] *** kurahaupo joined
[15:25] *** AlexDaniel left
[15:30] *** cdg joined
[15:33] *** khw joined
[15:34] *** cfa joined
[15:34] <cfa> morning all

[15:34] <cfa> https://github.com/perl6/doc/blob/HEAD/doc/Language/testing.pod6#L664

[15:34] <cfa> missing comma?

[15:34] *** kurahaupo left
[15:34] <pmurias> re :api isn't it supposed to be for a major rework of the interface rather than just regular breaking changes?

[15:34] *** kurahaupo joined
[15:38] <AlexDaniel`> Regular breaking changes xD

[15:39] *** mr_ron left
[15:39] *** mr_ron joined
[15:39] <pmurias> AlexDaniel`: I might be exposed to npm too much ;)

[15:40] *** mcmillhj left
[15:41] <pmurias> AlexDaniel`: by rework I mean things like Dancer vs Dancer2 or Angular vs Angular2 where the old version is expect to linger around

[15:41] *** Zoffix joined
[15:42] <Zoffix> BTW, since topic of packaging/install was recently discussed, just spotted this thing while downloading Brave browser: https://snapcraft.io/

[15:42] <Zoffix> "Snaps are quick to install, easy to create, safe to run, and they update automatically and transactionally so your app is always fresh and never broken."

[15:43] <Geth> ¦ doc: 76d90fa4f8 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/testing.pod6

[15:43] <Geth> ¦ doc: Fix broken code example; cfa++

[15:43] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/76d90fa4f8

[15:43] <synopsebot> Link: https://doc.perl6.org/language/testing

[15:43] *** mcmillhj joined
[15:43] <cfa> Zoffix: thanks

[15:44] <cfa> note that the example currently fails to compile as &fails-like is undefined

[15:44] <cfa> might be worth skipping in the interim

[15:45] <cfa> (seems like this was merged ahead of time; might just be worth leaving the failure until the next rakudo release)

[15:45] <Zoffix> I think docs are built using latest and greatest rakudo

[15:47] <cfa> ah okay

[15:47] *** pharv joined
[15:47] <cfa> so it's just my local tests failing (i'm on .03); 

[15:47] <Zoffix> It's also a bit weird the docs PR was merged before the impl/spec got merged.

[15:48] <Zoffix> ZofBot: the humans are doing it wrong. Help!

[15:48] <ZofBot> Zoffix, Mother had not died

[15:48] <Zoffix> cfa: yeah, it went in just like 2 hours ago

[15:49] <Zoffix> m: use Test; fails-like { sub { fail }() }, Exception

[15:49] <camelia> rakudo-moar a0e5e8805: OUTPUT: «    1..2␤    ok 1 - code returned a Failure␤        1..2␤        ok 1 - code dies␤        ok 2 - right exception type (Exception)␤    ok 2 - Failure threw when sunk␤ok 1 - did we fails-like Exception?␤»

[15:49] *** kurahaupo left
[15:49] *** kurahaupo joined
[15:50] *** Zoffix left
[15:50] * cfa nods

[15:50] *** pierre_ joined
[15:51] *** kaare_ joined
[15:51] *** wamba left
[15:52] *** pharv left
[15:53] *** robertle joined
[15:54] *** pierre_ left
[15:54] *** mcmillhj left
[15:58] *** mcmillhj joined
[15:59] *** troys joined
[15:59] *** pharv joined
[16:00] <El_Che> Zoffix: there is snap, flatpacks, nix, appimage, and 10 others. None has a complete install base

[16:01] *** domidumont left
[16:01] *** cdg left
[16:01] <El_Che> Zoffix: atm, snap is more of a deb alternative for Ubuntu than a common Linux installer

[16:01] *** Bowlslaw joined
[16:01] <El_Che> Zoffix: I am a little reluctant in investing time on snaps as they feel very closed garden-like

[16:01] <buggable> New CPAN upload: Proc-InvokeEditor-0.0.2.tar.gz by SCIMON https://cpan.metacpan.org/authors/id/S/SC/SCIMON/Perl6/Proc-InvokeEditor-0.0.2.tar.gz

[16:03] <scimon> (So I may have had not a huge amount to do today)

[16:04] *** mcmillhj left
[16:04] *** kurahaupo left
[16:05] *** kurahaupo joined
[16:09] *** Lasse left
[16:10] *** mcmillhj joined
[16:10] *** comborico1611 joined
[16:10] *** pharv left
[16:11] *** pharv joined
[16:12] *** scovit left
[16:13] *** cdg joined
[16:15] *** mcmillhj left
[16:16] *** scimon left
[16:20] *** kurahaupo left
[16:20] *** kurahaupo joined
[16:22] *** mcmillhj joined
[16:26] *** AlexDaniel joined
[16:27] *** mcmillhj left
[16:31] *** kurahaupo left
[16:31] *** kurahaupo joined
[16:32] *** pierre_ joined
[16:34] *** wamba joined
[16:35] *** mcmillhj joined
[16:38] *** domidumont joined
[16:41] *** zakharyas left
[16:44] *** kurahaupo left
[16:44] *** kurahaupo joined
[16:45] *** pierre_ left
[16:46] *** comborico1611 left
[16:47] *** kaare_ left
[16:54] *** kurahaupo left
[16:54] *** kurahaupo joined
[16:55] *** mcmillhj left
[16:56] *** kurahaupo left
[16:57] *** kurahaupo joined
[16:58] *** mcmillhj joined
[17:08] *** vike1 left
[17:08] *** dakkar left
[17:14] *** mcmillhj left
[17:18] *** pharv left
[17:21] *** mcmillhj joined
[17:23] *** kaare_ joined
[17:24] *** vike joined
[17:26] *** cdg left
[17:29] *** pharv joined
[17:31] *** cdg joined
[17:38] *** pharv left
[17:41] *** pharv joined
[17:41] *** pharv left
[17:41] *** pharv joined
[17:43] <tyil> lizmat: I uploaded Hash::Merge 0.2.1, which contains an api key

[17:45] <tyil> (and doesnt break usage for other people yet)

[17:49] *** pharv left
[17:51] <buggable> New CPAN upload: Hash-Merge-0.2.1.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/Hash-Merge-0.2.1.tar.gz

[17:52] *** AlexDaniel left
[17:54] *** giraffe left
[17:56] *** cfa left
[18:06] *** pharv joined
[18:11] *** giraffe joined
[18:11] *** kurahaupo_ joined
[18:13] *** kurahaupo left
[18:14] *** kurahaupo_ left
[18:14] *** kurahaupo joined
[18:16] *** cdg_ joined
[18:16] *** espadrine joined
[18:19] *** cdg left
[18:20] *** wamba left
[18:20] *** cdg_ left
[18:21] <buggable> New CPAN upload: PDF-Class-0.1.1.tar.gz by WARRINGD https://cpan.metacpan.org/authors/id/W/WA/WARRINGD/Perl6/PDF-Class-0.1.1.tar.gz

[18:22] *** kurahaupo_ joined
[18:22] *** sauvin_ left
[18:23] *** wamba joined
[18:24] *** kurahaupo_ left
[18:24] <mspo> <guyfromanotherchat> ISTM we should have better programming notation for "append string/list" than `+` in 2018.

[18:24] <mspo> <guyfromanotherchat> seems like there should be a suitable Unicode character.

[18:25] *** kurahaupo_ joined
[18:25] <mspo> <mspo> omg use perl6

[18:26] *** kurahaupo left
[18:26] *** undersightable6 left
[18:27] *** undersightable6 joined
[18:29] *** comborico1611 joined
[18:32] <Bowlslaw> ewww

[18:32] <Bowlslaw> um

[18:32] <Bowlslaw> what is "better" than that?

[18:32] <Bowlslaw> it's one universal simple character

[18:32] <Bowlslaw> keep your complexity creep away from meee

[18:32] <mspo> I prefer push(), append(), unshift()

[18:33] <El_Che> <<

[18:33] <El_Che> is also nice

[18:33] <El_Che> (ruby)

[18:33] <mspo> + is too overloaded :)

[18:33] <El_Che> the append function in golang is awful

[18:33] <Bowlslaw> golang is aweful

[18:33] <Bowlslaw> hash tag autist language wars

[18:33] * Bowlslaw runs

[18:33] <El_Che> arraySlice = append(arraySlice, "foo")

[18:34] <El_Che> I like go

[18:34] <El_Che> in a lot of ways the opposite of perl6

[18:34] <mspo> I thought slices were immutable

[18:34] <El_Che> I don't like middle ground langs :)

[18:34] <El_Che> mspo: you assign a new one

[18:34] <El_Che> with the same name

[18:35] <mspo> El_Che: L1 ++ L2

[18:36] *** pierre joined
[18:36] <masak> mspo: in 007 we vacillated between a lot of options for the array concat operator. ++ was the main contender, but it doesn't quite fly in 007 because infixes share a namespace with postfixes, because 007 doesn't do Perl 6's whitespace sensitivity thing.

[18:37] <masak> mspo: in the end, we just went with array.append(array2) instead

[18:37] <masak> er, array.concat(array2)

[18:37] <masak> like JavaScript does

[18:37] <mspo> masak: ++ like that is erlang syntax

[18:37] <El_Che> I don't see the evil in overloading + for lists

[18:37] <masak> yeah. I like how it looks, but postfix:<++> has first dibs on that spelling

[18:38] *** enheh_ left
[18:38] <masak> El_Che: it's a matter of taste, I think.

[18:38] <masak> El_Che: Perl wants to keep its operators for "one" thing.

[18:38] <moritz> it's a matter of philsophy

[18:38] <mspo> I'm not a big fan of overloaded in general

[18:38] <mspo> it's kind of okay in perl because sigils give you the type most of the time

[18:38] <moritz> you can only do coercion of arguments if you stick to one semantics for an operation

[18:39] <mspo> at least list vs scalar

[18:39] <moritz> the python model also works where "+" means "mush two things together", so it's sum for numbers, concat for arrays and strings etc., but then you can't do coercion and have it dwim

[18:40] <masak> it's been a real eye-opener to be a language designer for a few years, even of a toy language like 007. the tradeoffs really box you in sometimes.

[18:40] <masak> moritz: which is fine, because Python doesn't do a lot of coercion/dwim anyway

[18:40] *** pierre left
[18:42] <El_Che> moritz: good point about the sigils

[18:43] <masak> that was mspo :)

[18:43] <masak> also, in Perl 6, the sigils give you more of an interface/API than the actual type

[18:43] <mspo> @list1 + @list2 is pretty clear thanks to @, is what I meant.  l1 + l2 could be freaking anything

[18:44] <masak> like % means it's something Associative, possibly backed by a Hash, or maybe something else

[18:44] <El_Che> mspo: well, it's ok if the lang is typed, though

[18:44] <mspo> El_Che: sure

[18:45] *** FROGGS joined
[18:45] <masak> I've been half-wanting to make `l1 + l2` mean `l1.add(l2)` in 007 -- rather than Perl 6's `infix:<+>(l1, l2)` -- because that'd make it easier for custom types to provide their own operations

[18:46] <masak> but I'm not sure. I don't feel strongly that that'd be a better way forwards than just having multis

[18:46] <El_Che> masak: what was the itch for 007?

[18:46] <masak> provide a test-bed for macros, a code base for quick experimentation and iteration

[18:47] <El_Che> a feedback loop for general perl6?

[18:47] <masak> yes

[18:47] <masak> the above musings are part of the eternal tension of wanting to implement things in a simple/consistent way, but also wanting to stick close to Perl 6, so that lessons are transferable

[18:48] <El_Che> a thin line

[18:52] *** kaare_ left
[18:56] *** darutoko left
[19:00] <Bowlslaw> hey guys I have a question about perl 6 and how it interacts with database, and also OOP design

[19:00] <Bowlslaw> https://stackoverflow.com/questions/49522489/cannot-resolve-caller-sqlite3-bind-do-not-understand-this-error-in-my-perl-6-sc/49530712#49530712

[19:00] <Bowlslaw> the person says, 'You might want to change the insert method to a submethod that instantiates the item and inserts it into the database.'

[19:01] <Bowlslaw> what does he mean by submethod and how would I instantiate the item and insert it?

[19:01] <Bowlslaw> also aren't submethods non-inheritable? so i would have to write an insert method for each of my classes

[19:03] *** kaare_ joined
[19:14] *** natrys joined
[19:19] *** domidumont left
[19:20] *** natrys left
[19:33] *** pharv left
[19:35] *** pharv joined
[19:37] *** pharv left
[19:37] *** pharv joined
[19:44] *** obfusk_ left
[19:44] *** obfusk joined
[19:54] *** silug joined
[19:54] *** mcmillhj left
[19:57] *** comborico1611 left
[19:58] *** comborico1611 joined
[19:58] *** athenot_ left
[19:59] *** athenot joined
[20:05] *** pharv left
[20:05] *** pharv joined
[20:06] *** athenot left
[20:06] *** robertle left
[20:07] *** athenot joined
[20:08] *** mcmillhj joined
[20:15] *** rindolf left
[20:27] *** leah2 left
[20:34] *** pierre joined
[20:35] *** cdg joined
[20:37] *** cdg left
[20:37] *** cdg joined
[20:38] *** pierre left
[20:39] *** skids left
[20:43] *** ilbelkyr_ is now known as ilbelkyr

[20:47] *** wamba left
[20:50] *** vcv left
[20:55] *** mcmillhj left
[20:59] *** leah2 joined
[20:59] *** leah2 left
[21:02] *** pharv left
[21:03] *** mcmillhj joined
[21:05] *** pharv joined
[21:05] *** pharv left
[21:06] *** pharv joined
[21:07] *** sena_kun left
[21:07] *** khisanth_ joined
[21:08] *** mcmillhj left
[21:09] *** khisanth__ left
[21:11] *** cdg_ joined
[21:11] <buggable> New CPAN upload: Hash-Merge-1.0.0.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/Hash-Merge-1.0.0.tar.gz

[21:12] *** mcmillhj joined
[21:13] *** cdg left
[21:20] *** mcmillhj left
[21:27] *** itaipu left
[21:30] *** pierre joined
[21:31] *** mcmillhj joined
[21:35] *** pierre left
[21:35] *** cdg joined
[21:38] *** cdg_ left
[21:39] *** mcmillhj left
[21:40] *** cdg left
[21:41] <buggable> New CPAN upload: Config-1.3.5.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/Config-1.3.5.tar.gz

[21:46] *** leah2 joined
[21:49] *** mcmillhj joined
[21:52] *** Herby_ joined
[21:52] <Herby_> o/

[21:56] *** mcmillhj left
[22:03] *** pmurias left
[22:11] <buggable> New CPAN upload: App-Assixt-0.2.4.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/App-Assixt-0.2.4.tar.gz

[22:12] <tyil> Herby_: hi

[22:12] <tyil> glad to hear assixt finally installed for you

[22:13] <tyil> in an hour or so you can install v0.2.4, which is a couple of orders of magnitude faster

[22:14] <tyil> parse time went down from 13s to sub 0.5s

[22:14] <tyil> 0.145 on my laptop

[22:15] <Herby_> awesome, I'll give it a whirl

[22:15] *** |oLa| left
[22:16] <tyil> time to sleep tho

[22:16] <tyil> gn

[22:16] <Herby_> o/

[22:39] *** Bowlslaw left
[23:00] *** eliasr joined
[23:05] *** skids joined
[23:18] *** uvb joined
[23:26] *** vcv joined
[23:32] *** pierre_ joined
[23:34] *** mcmillhj joined
[23:37] *** pierre_ left
[23:39] *** mcmillhj left
[23:49] *** mcmillhj joined
[23:54] *** mcmillhj left
[23:56] *** w_richard_w joined
