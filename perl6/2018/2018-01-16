[00:02] *** lowin joined
[00:06] <Geth> ¬¶ doc: f71865883d | (Will "Coke" Coleda)++ | 2 files

[00:06] <Geth> ¬¶ doc: fix typo

[00:06] <Geth> ¬¶ doc: 

[00:06] <Geth> ¬¶ doc: toggled means both set & unset; don't need to negate it.

[00:06] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/f71865883d

[00:06] <Geth> ¬¶ doc: cfea1b40a7 | (Will "Coke" Coleda)++ | doc/Language/terms.pod6

[00:06] <Geth> ¬¶ doc: This isn't Perl

[00:06] <synopsebot> Link: https://doc.perl6.org/language/terms

[00:06] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/cfea1b40a7

[00:06] <timotimo> We're not in Perl anymore.

[00:06] *** pmurias left
[00:08] *** lichtkind left
[00:10] *** dct left
[00:12] *** mempko joined
[00:19] *** bwisti joined
[00:32] *** wamba left
[00:38] *** comborico1611 joined
[01:02] *** cdg joined
[01:07] *** cdg left
[01:09] *** shinobicl left
[01:16] *** leont left
[01:17] *** markong left
[01:17] *** unicodable6 left
[01:17] *** quotable6 left
[01:17] *** unicodable6 joined
[01:17] *** quotable6 joined
[01:17] *** ChanServ sets mode: +v quotable6

[01:18] *** comborico1611 left
[01:20] *** jeek joined
[01:27] *** astj_ joined
[01:28] *** astj__ joined
[01:29] *** shinobi-cl joined
[01:30] *** astj left
[01:31] *** leont joined
[01:32] *** astj_ left
[01:35] *** klapperl left
[01:36] *** klapperl joined
[01:44] *** lowin left
[01:48] *** troys is now known as troys_

[01:52] *** lowin joined
[01:58] *** eliasr left
[01:59] *** mempko left
[02:09] *** shinobi-cl left
[02:10] *** shinobi-cl joined
[02:17] *** astj joined
[02:20] *** astj__ left
[02:31] *** astj_ joined
[02:35] *** astj left
[02:42] *** cdg joined
[02:45] *** ilbot3 left
[02:47] *** cdg left
[02:48] *** Sgeo left
[02:52] *** lowin left
[02:53] *** lowin joined
[02:56] *** cdg joined
[02:56] *** ilbot3 joined
[02:56] *** ChanServ sets mode: +v ilbot3

[03:00] *** leont left
[03:04] *** astj joined
[03:05] *** astj__ joined
[03:05] *** troys_ is now known as troys

[03:05] *** astj left
[03:06] *** astj joined
[03:06] *** mempko joined
[03:07] *** astj_ left
[03:09] *** astj__ left
[03:20] *** Sgeo joined
[03:31] *** lowin left
[03:39] *** leont joined
[03:44] *** lowin joined
[03:45] *** troys is now known as troys_

[03:55] *** leont left
[03:56] *** ufobat_ joined
[03:57] *** bloatable6 left
[03:57] *** bloatable6 joined
[03:57] *** ChanServ sets mode: +v bloatable6

[03:59] *** ufobat left
[04:01] *** astj_ joined
[04:05] *** astj left
[04:06] *** lowin left
[04:12] *** lowin joined
[04:14] *** leont joined
[04:24] <syntaxman> I'm using zef to install Jupyter::Kernel, but it fails saying that Net::ZMQ can't find the libzmq.so.5 library... which is in /usr/local/lib

[04:31] <syntaxman> My firm belief is that asking dumb questions in public will make the answer pop into your brain.

[04:31] <syntaxman> .

[04:31] <syntaxman> ldconfig saves the day.

[04:31] *** Mithaldu joined
[04:37] *** stmuk_ joined
[04:38] *** Cabanossi left
[04:39] *** Cabanossi joined
[04:39] *** stmuk left
[04:40] *** cdg left
[04:53] <geekosaur> rubber duck debugging saves the day again :p

[04:55] *** cdg joined
[04:59] *** cpage_ joined
[05:00] *** cdg left
[05:12] *** ufobat_ left
[05:13] *** troys_ is now known as troys

[05:20] *** khw left
[05:34] *** leont left
[05:50] *** leont joined
[05:55] *** shinobi-cl left
[06:00] *** troys left
[06:00] *** shinobi-cl joined
[06:11] <shinobi-cl> hi all. How should a bidimensional array handle .elems? I think it should return a pair of (number of columns, number of rows).

[06:16] <moritz> or it could return the number of rows

[06:16] <moritz> and @a[0].elems returns the number of columns

[06:17] <moritz> or the other way round, depending on whether your array is row-major or column-major

[06:17] <moritz> or .elems could return $rows * $columns, and you have separate methods for accessing those individually

[06:24] <shinobi-cl> i think i will use your last suggestion. Thanks! :)

[06:30] *** darutoko joined
[06:32] <shinobi-cl> can i use AT-POS with something different that a Int? Like a Pair? my $cell = $myobj[('A', 1)] ?

[06:34] <shinobi-cl> I thikn that associative makes more sense, i just want to know if it is pssible :)

[06:34] <moritz> should be possible, yes

[06:35] <moritz> you can look in rakudo's file src/core/array_slice.pm to see what kind of stuff is supported

[06:36] <moritz> you can certainly pass an Iterable to .[]

[06:37] <shinobi-cl> Thank you very much, moritz++

[06:40] *** leont left
[06:49] *** kerframil joined
[06:50] *** domidumont joined
[07:00] *** lowbro joined
[07:00] *** lowbro left
[07:00] *** lowbro joined
[07:00] *** domidumont1 joined
[07:02] *** domidumont left
[07:05] *** domidumont joined
[07:08] *** domidumont1 left
[07:11] *** domidumont left
[07:12] *** domidumont joined
[07:17] *** cdg joined
[07:21] *** cdg left
[07:22] *** kerframil left
[07:28] *** shinobi-cl left
[07:33] *** |oLa| joined
[07:37] *** dudebbn__ joined
[07:39] *** dudebbn_ left
[07:51] *** lookatme joined
[07:52] *** kerframil joined
[07:59] *** wamba joined
[08:10] *** abraxxa joined
[08:24] *** mniip left
[08:27] *** aeruder joined
[08:28] *** rindolf joined
[08:28] *** mniip joined
[08:40] *** leont joined
[08:51] *** scimon joined
[08:53] *** zakharyas joined
[08:59] *** zakharyas left
[09:09] *** leont left
[09:10] *** cgfbee joined
[09:18] *** dakkar joined
[09:19] *** cgfbee left
[09:24] * lizmat clickbaits https://p6weekly.wordpress.com/2018/01/15/2018-03-blue-note/

[09:24] *** cgfbee joined
[09:25] *** wamba left
[09:30] * DrForr is baited.

[09:39] *** andrewalker joined
[09:43] *** leont joined
[09:51] *** sftp joined
[10:05] <El_Che> DrForr: I have some timesharing opportunities you'd be interested in

[10:05] <DrForr> Oh dear.

[10:10] <DrForr> Oh, got it. Sorry, I'm still a little stiff from a bad night's sleep.

[10:12] <moritz> .oO( would you like to multi task with me? ) :D

[10:13] <DrForr> Let's not go there at the moment :)

[10:15] <DrForr> I'll be OK by FOSDEM, I just need to remember to stretch.

[10:19] <scimon> lizmat++ on the weekly :) 

[10:19] *** wamba joined
[10:21] *** cdg joined
[10:31] *** eliasr joined
[10:32] *** leont left
[10:33] *** sftp left
[10:35] *** sftp joined
[10:53] *** zakharyas joined
[10:54] *** wamba left
[11:02] <Geth> ¬¶ doc/fluca1978-backtracking: 10 commits pushed by (Luca Ferrari)++

[11:02] <Geth> ¬¶ doc/fluca1978-backtracking: review: https://github.com/perl6/doc/compare/0000000000...869e2eecaa

[11:04] <jnthn> m: my @a[2;4]; say @a.elems; say @a.shape

[11:04] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´2‚ê§(2 4)‚ê§¬ª

[11:05] <jnthn> That's what Perl 6 does with the built-in multi-dimensional arrays, fwiw :)

[11:05] <jnthn> (Referring to question in backlog)

[11:05] <jnthn> m: my @a[2;4]; say [*] @a.shape

[11:05] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´8‚ê§¬ª

[11:05] <jnthn> And the other thing is easy too :)

[11:09] <Altreus> is that the volume

[11:09] <Altreus> m: my @a[2;5;4]; say [*] @a.shape;

[11:09] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´40‚ê§¬ª

[11:09] <Altreus> :o

[11:09] * Altreus flexes repl

[11:09] <timotimo> m: my @a[2;4] = (1, 2, 3, 4; 9, 9, 9, 9)

[11:09] <camelia> rakudo-moar cf1543557: ( no output )

[11:09] <timotimo> m: my @a[2;4] = (1, 2, 3, 4; 9, 9, 9, 9); say @a.elems; .say for @a

[11:09] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´2‚ê§1‚ê§2‚ê§3‚ê§4‚ê§9‚ê§9‚ê§9‚ê§9‚ê§¬ª

[11:10] <timotimo> i'm not very happy with the difference in what .elems gives and what you get in a for loop :\

[11:10] <Altreus> surely .elems is going to be 2

[11:11] <timotimo> yeah, it gave 2

[11:11] <timotimo> then iterated over 8 elements :)

[11:12] <Altreus> oh

[11:12] <Altreus> one would have expected more []s

[11:14] <Altreus> I'm mildly confused by the various ways I can use (), [], and ;

[11:14] <jnthn> .elems is made to give the first dimension so that we can make @a[*-1;*-1] style things work

[11:14] *** wamba joined
[11:14] <timotimo> ah, hm

[11:14] <jnthn> (In the future, they won't yet)

[11:15] <Altreus> So it seems like a shaped array is a bit WIP right now

[11:16] <Altreus> is there a document on how it's supposed to work? I'm interested

[11:16] <Altreus> It seems a little bit surprising because you don't know you've got a shaped array when you start iterating

[11:18] <jnthn> Partial views of multi-dim arrays were deferred to a future language version; doing them efficiently needs some careful work.

[11:18] <jnthn> But the "iterate the leaves" behavior was settled

[11:19] <jnthn> I think S09 is the best place to look for info on the full set of speculated features

[11:19] <Altreus> I guess you can always just have a multidimensional array without p6 knowing its shape

[11:20] <jnthn> If you don't declare a shape, you just have an array of arrays

[11:20] <jnthn> Which is fine

[11:21] <jnthn> The storage strategy will be different then

[11:21] <jnthn> When a shape is provided then a single blob of memory is used for all the data

[11:22] <Altreus> that makes sense

[11:22] <Altreus> hopefully not a sploit ;)

[11:25] <jnthn> No, it enforces the dimensions

[11:27] <timotimo> if you want the sploit, you use CArray

[11:28] *** travis-ci joined
[11:28] <travis-ci> Doc build passed. Luca Ferrari 'Add backtracking term to the glossary.

[11:28] <travis-ci> https://travis-ci.org/perl6/doc/builds/329414192 https://github.com/perl6/doc/compare/7d480a3a1ffc^...869e2eecaab0

[11:28] *** travis-ci left
[11:34] <Geth> ¬¶ doc: fluca1978++ created pull request #1733: Fluca1978 backtracking

[11:34] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/1733

[11:35] *** scovit joined
[11:40] *** cdg left
[11:46] *** committable6 left
[11:46] *** committable6 joined
[11:50] *** pmurias joined
[11:51] <pmurias> https://rt.perl.org/Public/Bug/Display.html?id=125682 - this ticket can still be reproduced on rakudo.moar just with a longer year 

[12:15] *** markong joined
[12:21] <jkramer> Is there a List/Array method that takes a matcher, removes all matching elements from array and returns them? I thought I've seen something like that but can't remember

[12:21] <yoleaux> 13 Jan 2018 04:14Z <Zoffix> jkramer: the `where` on variable thing makes sense to me and contrary to what was suggested in the channel earlier, I don't think it's a bug. The difference lies in that when you use a `where` in a parameter, it concerns a single transaction: binding a value to parameter. When you use `where` with attribute/variable, however, it checks the *values* whenever they're modified. It'd be weird if doing

[12:21] <yoleaux> 13 Jan 2018 04:15Z <Zoffix> jkramer: @foo[42] = 1337 would invoke `where` callable with the entire array instead of just the value we're interested in

[12:22] <timotimo> jkramer: depending on how exactly you want it to behave, your best bet is probably @list .= grep(none(your-matcher));

[12:22] <timotimo> m: my @a = ^100; @a .= grep(none(*.is-prime)); say @a

[12:22] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´[0 1 4 6 8 9 10 12 14 15 16 18 20 21 22 24 25 26 27 28 30 32 33 34 35 36 38 39 40 42 44 45 46 48 49 50 51 52 54 55 56 57 58 60 62 63 64 65 66 68 69 70 72 74 75 76 77 78 80 81 82 84 85 86 87 88 90 91 92 93 94 95 96 98 99]‚ê§¬ª

[12:24] *** stmuk joined
[12:24] <geekosaur> comb?

[12:24] <timotimo> oh, wait, you want the removed bits returned

[12:25] <timotimo> you can get that with classify/categorize

[12:25] <timotimo> if you're okay with the array having holes afterwards, you can do slicing

[12:25] *** stmuk_ left
[12:25] <jkramer> timotimo: But does it return the other elements? I basically want to partition a list into two groups based on the matcher. .classify and categorize are ok, but getting a hash back is a bit of a hassle sometimes when I just want to lists

[12:26] <moritz> m: say (1..5).classify(*.is-prime)

[12:26] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´{False => [1 4], True => [2 3 5]}‚ê§¬ª

[12:26] <jkramer> Basically Haskell's groupBy :)

[12:26] <timotimo> m: say (1..10).classify(*.is-prime)<True False>.perl

[12:26] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´(Any, Any)‚ê§¬ª

[12:26] <timotimo> oops, has to be objects

[12:26] <timotimo> m: say (1..10).classify(*.is-prime){True, False}.perl

[12:26] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´($[2, 3, 5, 7], $[1, 4, 6, 8, 9, 10])‚ê§¬ª

[12:26] <timotimo> there you get two lists ;)

[12:26] <jkramer> Hmm I guess that'll do :D

[12:26] <jkramer> Thanks

[12:26] <timotimo> YW

[12:27] <moritz> m: my (:True(@primes), :False(@non-primes)) := (1..10).classify(*.is-prime); say @non-primes.perl

[12:27] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´[1, 4, 6, 8, 9, 10]‚ê§¬ª

[12:27] <timotimo> that's a lot wordier, but also rather a bit prettier

[12:30] <perlawhi1l> m: (1..10).classify(*.is-prime).values

[12:30] <camelia> rakudo-moar cf1543557: ( no output )

[12:30] <perlawhi1l> m: say (1..10).classify(*.is-prime).values

[12:30] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´([2 3 5 7] [1 4 6 8 9 10])‚ê§¬ª

[12:30] <timotimo> perlawhi1l: it isn't guaranteed what order True and False will hash in

[12:31] <timotimo> bisectable6: :{True => 1, False => 2}.values.say

[12:31] <bisectable6> timotimo, Bisecting by output (old=2015.12 new=cf15435) because on both starting points the exit code is 0

[12:31] <timotimo> no, not the right bot

[12:31] <bisectable6> timotimo, bisect log: https://gist.github.com/aee7d6186ecf0bb2b61966016193d066

[12:31] <bisectable6> timotimo, (2017-02-22) https://github.com/rakudo/rakudo/commit/1cafc67b1aad14eafa8d3e6431656524e4d0d5d3

[12:31] <timotimo> committable6: releases :{True => 1, False => 2}.values.say

[12:31] <committable6> timotimo, ¬¶2015.12,2016.01.1,2016.02,2016.03,2016.04,2016.05,2016.06,2016.07.1,2016.08.1,2016.09,2016.10,2016.11,2016.12,2017.01,2017.02: ¬´(1 2)‚ê§¬ª ¬¶2017.03,2017.04.3,2017.05,2017.06,2017.07,2017.08,2017.09,2017.10,2017.11,2017.12,HEAD(cf15435): ¬´(2 1)‚ê§¬ª

[12:32] <timotimo> regardless of what this says! don't rely on it

[12:33] <AlexDaniel> committable6: all :{True => 1, False => 2}.values.say

[12:33] <committable6> AlexDaniel, https://gist.github.com/d0993097c22c7c90b211eeab26eeb0aa

[12:34] <AlexDaniel> ‚Üë that's a better picture :)

[12:34] <AlexDaniel> ah no

[12:34] <AlexDaniel> same

[12:34] * AlexDaniel is blind

[12:37] *** pmurias left
[12:39] *** pmurias joined
[13:07] *** wamba left
[13:08] *** famra joined
[13:11] *** pilne left
[13:16] <perlawhi1l> There was a big change a few months back... if I recall, a new JIT for Moar. approximately when was that

[13:16] <perlawhi1l> (or hey, if you have the exact commit, i won't complain)

[13:18] *** wamba joined
[13:21] <AlexDaniel> well, the rakudo commit is right there

[13:27] *** rgrau left
[13:30] *** aindilis left
[13:31] *** aindilis joined
[13:34] *** famra left
[13:34] *** rgrau joined
[13:37] *** foobar` left
[13:39] <timotimo> 2017.10

[13:39] <timotimo> perlawhi1l: ^- that's the release of moarvm that merged it

[13:41] <jkramer> m: my (@a, @b) = (^5, 2..3, 7..9).classify(so * (&) (3..4)){True, False}; say @a.perl; say @b.perl;

[13:41] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´[[^5, 2..3], [7..9,]]‚ê§[]‚ê§¬ª

[13:42] <jkramer> How do I make the False-result go into @b?

[13:42] <perlawhi1l> timotimo: thanks

[13:42] <jkramer> m: my (@a, @b) = |(^5, 2..3, 7..9).classify(so * (&) (3..4)){True, False}; say @a.perl; say @b.perl;

[13:42] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´[[^5, 2..3], [7..9,]]‚ê§[]‚ê§¬ª

[13:42] <timotimo> jkramer: you're gonna need := instead of =

[13:42] *** pochi left
[13:42] <jkramer> m: my (@a, @b) := |(^5, 2..3, 7..9).classify(so * (&) (3..4)){True, False}; say @a.perl; say @b.perl;

[13:42] *** pochi joined
[13:42] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´[^5, 2..3]‚ê§[7..9,]‚ê§¬ª

[13:42] <jkramer> Oh nice, thanks :)

[13:44] <timotimo> m: my (@a, @b) := (^5, 2..3, 7..9).classify(so * (&) (3..4)){True, False}; say @a.perl; say @b.perl;

[13:44] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´[^5, 2..3]‚ê§[7..9,]‚ê§¬ª

[13:44] <timotimo> no need for the prefix:<|> either

[13:44] <scimon> So you can't have private multi methods. Is that a "We'd like to but not implemented it" or a "Not going to happen" thing? And if it's the second case can someone give me a rationale? 

[13:45] *** famra joined
[13:46] <jkramer> m: my (@a, @b) := |(^5, 2..3, 7..9).classify(so * (&) (10..11)){True, False}; say @a.perl; say @b.perl;

[13:46] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´Type check failed in binding to parameter '@a'; expected Positional but got Any (Any)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:46] <jkramer> How can I prevent that?

[13:47] <jkramer> Oh whatever I'll just use the hash then, this is too much hassle now :)

[13:47] <jnthn> scimon: I don't see any reason why we can't have it, it's just figuring out a good way to implement it

[13:47] <scimon> That's cool. :) 

[13:47] <timotimo> oh, if it doesn't have any results in one of them?

[13:48] <timotimo> m: my (@a, @b) := {a => (1, 2, 3)}<a b>

[13:48] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´Type check failed in binding to parameter '@b'; expected Positional but got Any (Any)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:49] <timotimo> m: my ($a, $b) := {a => (1, 2, 3)}<a b>; say $a; say $b

[13:49] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´(1 2 3)‚ê§(Any)‚ê§¬ª

[13:49] <timotimo> m: my ($a, $b) := {b => (1, 2, 3)}<a b>; say $a; say $b

[13:49] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´(Any)‚ê§(1 2 3)‚ê§¬ª

[13:49] <timotimo> m: my ($a, $b) := {c => (1, 2, 3)}<a b>; say $a; say $b

[13:49] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´(Any)‚ê§(Any)‚ê§¬ª

[13:49] <timotimo> m: my (@a, @b) := {a => (1, 2, 3)}<a b>.>>.list; say @a.perl; say @b.perl

[13:49] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´(1, 2, 3)‚ê§(Any,)‚ê§¬ª

[13:49] <timotimo> no, that doesn't help

[13:49] <timotimo> m: my (@a, @b) := {a => (1, 2, 3)}<a b> >>//>> Empty; say @a.perl; say @b.perl

[13:49] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´Too few positionals passed to '<unit>'; expected 2 arguments but got 0‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:49] <timotimo> nope.

[13:53] *** cdg joined
[13:56] *** stmuk_ joined
[13:57] *** stmuk left
[13:58] <jkramer> Is there some syntax sugar to make this a bit nicer/shorter? .reduce({ ($^a.min min $^b.min)..^($^a.max max $^b.max) })

[13:58] <jkramer> (2..4, 1..3, 3..6).reduce({ ($^a.min min $^b.min)..^($^a.max max $^b.max) })

[13:58] <jkramer> m: (2..4, 1..3, 3..6).reduce({ ($^a.min min $^b.min)..^($^a.max max $^b.max) }).say

[13:58] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´1..^6‚ê§¬ª

[14:03] <jnthn> m: say (2..4, 1..3, 3..6).reduce(&minmax)

[14:03] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´1..6‚ê§¬ª

[14:03] <jnthn> That's pretty close, I think

[14:04] <jkramer> Uhmm ok I'll have to figure out how/why that works first :D I looked into minmax but couldn't see how it's useful for reduce

[14:05] <jnthn> I don't know without looking either ;)

[14:05] <timotimo> m: say 2..4 minmax 9..100

[14:05] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´2..100‚ê§¬ª

[14:05] <timotimo> m: say 2..4 minmax 1..100

[14:05] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´1..100‚ê§¬ª

[14:05] <timotimo> i suppose minmax is defined on two ranges, too

[14:05] <timotimo> m: say 2..4 minmax 50

[14:05] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´2..50‚ê§¬ª

[14:05] <timotimo> m: say 2..4 minmax 0

[14:05] <camelia> rakudo-moar cf1543557: OUTPUT: ¬´0..4‚ê§¬ª

[14:05] <jkramer> Ohh so minmax is an operator, I was just looking the method Range.minmax

[14:06] <timotimo> heh.

[14:10] *** famra left
[14:11] *** squashable6 left
[14:11] *** squashable6 joined
[14:13] *** bisectable6 left
[14:14] *** bisectable6 joined
[14:14] *** ChanServ sets mode: +v bisectable6

[14:17] <jkramer> Isn't the minmax operator documented anywhere? It's mentioned on https://docs.perl6.org/language/operators in the precendence table, but with no explanation

[14:21] *** pmurias left
[14:21] <scimon> So  the more I play with multi methods the more I love there awesomeness.

[14:22] <wamba> m: with "ab" { say ¬†m/ [ <?after a> (.*)] $ /; say m:P5/(?=a)(.*)$/}

[14:22] <camelia> rakudo-moar efdbfecad: OUTPUT: ¬´ÔΩ¢bÔΩ£‚ê§ 0 => ÔΩ¢bÔΩ£‚ê§ÔΩ¢abÔΩ£‚ê§ 0 => ÔΩ¢abÔΩ£‚ê§¬ª

[14:22] *** Kaiepi left
[14:23] *** Kaiepi joined
[14:27] *** dylanwh joined
[14:27] *** pmurias joined
[14:39] *** releasable6 left
[14:39] *** greppable6 left
[14:39] *** statisfiable6 left
[14:39] *** releasable6 joined
[14:39] *** greppable6 joined
[14:39] *** statisfiable6 joined
[14:41] <AlexDaniel> m: say 5 minmax 8 minmax 3

[14:41] <camelia> rakudo-moar 354a38484: OUTPUT: ¬´3..8‚ê§¬ª

[14:41] <AlexDaniel> cool

[14:43] <perlawhi1l> m: say [minmax] 5, 8, 3, 2, 7

[14:43] <camelia> rakudo-moar 354a38484: OUTPUT: ¬´2..8‚ê§¬ª

[14:43] <AlexDaniel> jkramer: https://github.com/perl6/doc/issues/1734

[14:47] <perlawhi1l> if you actually want the min and max values for assignment, you can also use the 'bounds' (or 'int-bounds') methods

[14:47] <perlawhi1l> m: my ($min, $max) = ( [minmax] 5, 8, 3, 2, 7).bounds; say $min; say $max;

[14:47] <camelia> rakudo-moar 354a38484: OUTPUT: ¬´2‚ê§8‚ê§¬ª

[14:55] <AlexDaniel> m: say minmax 5, 8, 3, 2, 7

[14:55] <camelia> rakudo-moar 354a38484: OUTPUT: ¬´2..8‚ê§¬ª

[14:56] *** pmurias left
[14:59] *** zakharyas left
[14:59] *** zakharyas joined
[15:04] *** kerframil left
[15:04] *** zakharyas left
[15:08] *** pmurias joined
[15:13] <[Coke]> m: Promise.in(4).then: { say 'yawn' }

[15:13] <camelia> rakudo-moar 354a38484: ( no output )

[15:13] <[Coke]> m: await Promise.in(4).then: { say 'yawn' }

[15:13] <camelia> rakudo-moar 354a38484: OUTPUT: ¬´yawn‚ê§¬ª

[15:13] <timotimo> the process shuts down before the promise gets resolved

[15:15] *** pmurias left
[15:19] <[Coke]> Yes, I wasn't reporting a bug, just correcting my typo.

[15:19] <timotimo> OK

[15:23] *** famra joined
[15:29] <scimon> So, how polished do people thing a module should be before release?

[15:30] <scimon> *think*

[15:31] <lizmat> it should have some documentation and some tests that don't fail ?

[15:31] *** dylanwh left
[15:31] <lizmat> .oO( release early, release often )

[15:31] <El_Che> scimon: if you plan to change the API dramatically, state it in the doc

[15:32] <scimon> Oh yeah. Definitely. 

[15:32] *** dylanwh joined
[15:32] <El_Che> scimon: you can use version numbers for that

[15:32] <scimon> In this case it's a bare bones of what I'd like it to do but it's enough I can start using it in tests for other modules. So I figure I can share it. It might be helpful.

[15:35] <scimon> Righto. It's on it's way.

[15:37] *** famra left
[15:38] *** lowbro left
[15:38] *** pmurias joined
[15:39] <jkramer> AlexDaniel: Thanks!

[15:39] <jkramer> That reminds me that I wanted to report a bug a few days ago but I don't remember what it was

[15:42] <buggable> New CPAN upload: Test-HTTP-Server-0.1.0.tar.gz by SCIMON https://cpan.metacpan.org/authors/id/S/SC/SCIMON/Perl6/Test-HTTP-Server-0.1.0.tar.gz

[15:42] *** geospeck joined
[15:43] *** geospeck left
[15:44] <lizmat> jkramer: maybe a memory problem  :-)

[15:47] * lizmat has that all the time :-(

[15:47] <moritz> try to get another gig of RAM, maybe? :-)

[15:48] <jkramer> Ok I remember now. Where would I report a bug regarding class attributes? In rakudo I guess?

[15:48] <moritz> yes

[15:55] <Geth> ¬¶ doc: 3157e72c19 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Rat.pod6

[15:55] <Geth> ¬¶ doc: Fix Rat parametarization

[15:55] <Geth> ¬¶ doc: 

[15:55] <Geth> ¬¶ doc: (even tho rakudo doesn't yet implement it as a native type, it's

[15:55] <Geth> ¬¶ doc: better than a type that doesn't exist)

[15:55] <synopsebot> Link: https://doc.perl6.org/type/Rat

[15:55] <Geth> ¬¶ doc: https://github.com/rakudo/rakudo/commit/cf15435575

[15:55] <Geth> ¬¶ doc: https://github.com/rakudo/rakudo/commit/6977680bd9

[15:55] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/3157e72c19

[15:56] *** Zoffix joined
[15:56] <Zoffix> jkramer: did you see my robot message to you?

[15:58] <jkramer> Zoffix: No, what should I look for? :)

[15:58] <Zoffix> jkramer: I don't think it's a bug. What behaviour for `has @.foo where ‚Ä¶` do you expect when `Foo.foo[0] = 42;` is performed? The where executed with the entire Array?

[15:58] <Zoffix> jkramer: https://irclog.perlgeek.de/perl6/2018-01-16#i_15695964

[15:59] <Zoffix> m: -> @a where +* { @a = (); dd @a}([1,])

[15:59] <camelia> rakudo-moar 6977680bd: OUTPUT: ¬´[]‚ê§¬ª

[15:59] <Zoffix> If anything, ^ that is a bug because the `where` is lost, but I think that ship has sailed...

[16:00] *** wamba left
[16:00] <jkramer> Ah ok. Hmm I still think it's weird/wrong. You could still use the where to check on every element if that's what you really want to do, but if this is the default there's no way to check on things like array length etc.

[16:00] *** Kaiepi left
[16:00] *** Kaiepi joined
[16:02] <jkramer> I also wouldn't expect @foo[42] = 1337 to cause a constraint check on @foo but on @foo[42], but isn't that what subtyping with Array[Int] etc is for?

[16:05] <Zoffix> m: my @a where { dd $_; True } := [<a b c>]

[16:05] <camelia> rakudo-moar 6977680bd: OUTPUT: ¬´Type check failed in binding; expected Positional[<anon>] but got Array ($["a", "b", "c"])‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:05] <Zoffix> m: my $a where { dd $_; True } := [<a b c>]

[16:05] <camelia> rakudo-moar 6977680bd: OUTPUT: ¬´["a", "b", "c"]‚ê§¬ª

[16:05] <Zoffix> jkramer: ok, file away then :) https://github.com/rakudo/rakudo/issues/new

[16:10] *** comborico1611 joined
[16:12] *** cdg left
[16:12] <jkramer> https://github.com/rakudo/rakudo/issues/1414

[16:12] <comborico1611> Hello

[16:13] <Zoffix> \o

[16:13] <timotimo> do we have a nice little factoid for how to begin a slang on camelia?

[16:14] <Zoffix> How about: "Don't do it, because there's no official interface"

[16:14] <Zoffix> :)

[16:14] <Zoffix> huggable: slang

[16:14] <huggable> Zoffix, https://mouq.github.io/slangs.html   Make an op that chains right (uses unsupported feature: slangs): BEGIN { $?LANG.refine_slang('MAIN', role { token infix:sym¬´smaller¬ª { <sym> <O('prec', 'm=', 'assoc', 'left', 'dba', 'chaining', 'iffy', 1, 'diffy', 1, 'pasttype', 'chain')> } } )}; sub infix:<smaller> { $^a < $^b }; say 1 smaller 2 smaller 3

[16:16] *** troys joined
[16:18] <timotimo> aaw

[16:19] <timotimo> we'll have something some day i guess

[16:20] <Zoffix> I wonder what that'd look like... Would we just freeze pieces of the grammar? To be modifieable only under the same conditions as routines/methods?

[16:21] <timotimo> BEGIN { $?LANG.refine_slang('MAIN', role { token ws { <_ws> | "like" ","? } }); }; sub like, hi() { say like, "how are you" }; like hi()

[16:21] <timotimo> m: BEGIN { $?LANG.refine_slang('MAIN', role { token ws { <_ws> | "like" ","? } }); }; sub like, hi() { say like, "how are you" }; like hi()

[16:21] <camelia> rakudo-moar 6977680bd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3 { <_ws> | "like" ","? } }); }; sub like7‚èè5, hi() { say like, "how are you" }; like‚ê§    expecting any of:‚ê§        new name to be defined‚ê§¬ª

[16:21] <timotimo> m: BEGIN { $?LANG.refine_slang('MAIN', role { token ws { <_ws> | "like" ","? } }); }; { sub like, hi() { say like, "how are you" }; like hi() }

[16:21] <camelia> rakudo-moar 6977680bd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3 <_ws> | "like" ","? } }); }; { sub like7‚èè5, hi() { say like, "how are you" }; like‚ê§    expecting any of:‚ê§        new name to be defined‚ê§¬ª

[16:21] <timotimo> :(

[16:21] <Zoffix> You can't modify ws that easily

[16:21] <timotimo> oh, i'd have to match whitespace around it, too

[16:22] <timotimo> m: BEGIN { $?LANG.refine_slang('MAIN', role { token ws { <_ws> | <_ws> "like" ","? <_ws> } }); }; { sub like, hi() { say like, "how are you" }; like hi() }

[16:22] <camelia> rakudo-moar 6977680bd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3s> "like" ","? <_ws> } }); }; { sub like7‚èè5, hi() { say like, "how are you" }; like‚ê§    expecting any of:‚ê§        new name to be defined‚ê§¬ª

[16:22] <timotimo> :(

[16:26] *** Zoffix left
[16:37] *** domidumont left
[16:38] *** cdg joined
[16:43] *** cdg left
[16:52] *** Abid joined
[16:53] <Abid> help

[16:54] *** Abid left
[16:58] *** khw joined
[16:58] <timotimo> what a brief existence abid had

[16:58] <geekosaur> abid them adieu >.>

[16:59] *** abraxxa left
[17:12] *** troys is now known as troys_

[17:23] *** coverable6 left
[17:23] *** benchable6 left
[17:23] *** coverable6 joined
[17:23] *** ChanServ sets mode: +v coverable6

[17:23] *** benchable6 joined
[17:23] *** ChanServ sets mode: +v benchable6

[17:25] *** cdg joined
[17:28] *** scimon left
[17:30] *** cdg left
[17:30] *** cdg joined
[17:30] *** cdg left
[17:31] <TEttinger> is there any way to do that "like, " slang using comments instead of ws?

[17:31] *** cdg joined
[17:31] *** troys_ is now known as troys

[17:31] *** cdg_ joined
[17:36] *** cdg left
[17:36] *** dakkar left
[17:38] *** wamba joined
[17:38] <timotimo> should be

[17:38] <timotimo> i was too lazy to investigate any further

[17:47] *** as_ joined
[17:51] *** as_ left
[18:00] *** Zoffix joined
[18:01] <Zoffix> TEttinger: comments are part of ws. You also can't override ws/comments in mainline. https://perl6advent.wordpress.com/2017/12/01/#ho-ho-ho

[18:17] *** Ven`` joined
[18:17] <TimToady> m: my ($a, $b) := (^5, 2..3, 7..9).classify(so * (&) (10..11)){True, False}; say $a.perl; say $b.perl;

[18:17] <camelia> rakudo-moar 6977680bd: OUTPUT: ¬´Any‚ê§$[^5, 2..3, 7..9]‚ê§¬ª

[18:17] <TimToady> jkramer: ^^^

[18:20] <Zoffix> TimToady: FWIW there's expert opinion wanted. RE: why `@foo where ‚Ä¶` applies to the entire array in params, but to individual elements in variables: https://github.com/rakudo/rakudo/issues/1414#issuecomment-358021893

[18:25] <TimToady> someone probably just implemented the one as an anonymous subset, so it distributes like a subset type

[18:25] <TimToady> we should probably make them consistent

[18:29] <Zoffix> Noted.

[18:30] *** cdg_ left
[18:31] <TimToady> otoh, binding is for the whole array, and most varaiables are constructed piecemeal by individual assignments that each have to be checked, so the situations aren't equivalent

[18:32] <lizmat> m: sub a(@a[3]) { }; dd &a.signature  # this feels wrong

[18:32] <camelia> rakudo-moar 6977680bd: OUTPUT: ¬´:(@a[3] where { ... })‚ê§¬ª

[18:32] <TimToady> if you checked the whole array every time you assigned, that would be a lot of overhead

[18:33] <TimToady> going the other way, how would you then write a constraint on the whole binding?

[18:33] <TimToady> so maybe it would be a foolish consistency...

[18:35] <Zoffix> m: subset Foo where { dd "[$_]"; $_ ne "z" }; -> Foo @a { @a[1] = "z"}(Array[Foo].new: <a b c>)

[18:35] <El_Che> "Perl 6: foolishly consistent" is not that bad

[18:35] <camelia> rakudo-moar 6977680bd: OUTPUT: ¬´"[a]"‚ê§"[b]"‚ê§"[c]"‚ê§"[a b c]"‚ê§"[z]"‚ê§Type check failed in assignment to ; expected Foo but got Str ("z")‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:35] <El_Che> :)

[18:35] <Zoffix> I think I see a consistent path here.

[18:36] <Zoffix> `my @foo where ‚Ä¶` and `:(@foo where ‚Ä¶)` typecheck the binding to Positional + where.   And `my Foo @foo` and `:(Foo @foo ‚Ä¶)` typecheck the elements on STORE

[18:36] *** darutoko left
[18:36] <TimToady> or we could always distribute on @, but require $ binding to check entire array

[18:37] <TimToady> that would still be potentially incompatible, so something for .d boundary

[18:37] <Zoffix> so `my @foo where ‚Ä¶ = ‚Ä¶` wouldn't even invoke the where

[18:38] <Zoffix> Oh wait yeah it would

[18:38] <TimToady> well, it could, since there's =

[18:38] <Zoffix> `my @foo where * !~~ Array = 42` would type-check blow up, while `my @foo where * !~~ List = 42` would work.

[18:39] *** setty1 joined
[18:39] <Zoffix> Oh wait the second too would blow up 'cause it's Array is a List :)

[18:39] <Zoffix> But the point is the default container would be checked against the where

[18:39] <TimToady> no, we'd make it consistent by applying the where to each element, not the whole thing

[18:39] <Zoffix> In the parameters?

[18:40] <Zoffix> That'd have a huge amount of fallout :o

[18:40] <TimToady> which is why we'd have to do it on the .d boundary, like I said

[18:40] *** reportable6 left
[18:41] *** nativecallable6 left
[18:41] *** reportable6 joined
[18:41] *** nativecallable6 joined
[18:41] <Zoffix> -1 on that. It'd be removing a feature.

[18:42] <Zoffix> We even use it in core: https://github.com/rakudo/rakudo/blob/master/src/core/Proc.pm#L228

[18:42] <TimToady> arguably, there are few wheres on variables, so one could do it the other way with less fallout, but that would tend to violate people's expectations when they assign individual elements instead

[18:43] <TimToady> but if we did it that way, at least we could point people to the subtype to get a where that applies individually

[18:43] <TimToady> s/subtype/subset/

[18:43] <Zoffix> Yeah, +1 on that and we'd keep a way to get typecheck on the whole array if you want it

[18:43] <Zoffix> when binding, like in params

[18:44] <TimToady> okay, I'm happier with that

[18:44] <Zoffix> \o/

[18:45] *** cdg joined
[18:47] *** Kaiepi left
[18:47] *** Kaiepi joined
[18:54] *** Zoffix left
[19:01] *** foobar` joined
[19:02] <buggable> New CPAN upload: P5tie-0.0.4.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5tie-0.0.4.tar.gz

[19:02] *** Ven`` left
[19:03] *** troys is now known as troys_

[19:35] *** leont joined
[19:39] *** cdg_ joined
[19:43] *** cdg left
[19:44] *** cdg_ left
[19:44] *** comborico1611 left
[19:47] *** Kaiepi left
[19:51] *** comborico1611 joined
[19:54] *** dct joined
[19:54] *** mempko left
[19:56] *** Ven`` joined
[19:56] *** Ven`` left
[19:57] *** Ven`` joined
[20:29] <rightfold> .oO(Fibonacci numbers are like Merkle trees)

[20:30] <TEttinger> rightfold: have you heard of fibonacci heaps?

[20:30] <TEttinger> https://en.wikipedia.org/wiki/Fibonacci_heap

[20:35] *** zakharyas joined
[20:40] *** DoverMo joined
[20:44] *** pilne joined
[20:50] *** dct left
[20:50] *** evalable6 left
[20:51] *** evalable6 joined
[20:51] *** ChanServ sets mode: +v evalable6

[20:53] *** DoverMoo joined
[20:53] *** DoverMo left
[20:59] *** DoverMoo left
[21:02] <buggable> New CPAN upload: P5tie-0.0.5.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5tie-0.0.5.tar.gz

[21:02] <buggable> New CPAN upload: Tie-Array-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Tie-Array-0.0.1.tar.gz

[21:04] *** mempko joined
[21:41] *** dct joined
[21:49] *** zakharyas left
[21:51] *** cdg joined
[22:06] *** dct left
[22:11] *** dogbert2 left
[22:12] *** dct joined
[22:15] *** Ven`` left
[22:21] *** troys_ is now known as troys

[22:26] *** comborico1611 left
[22:29] *** Ven`` joined
[22:30] *** comborico1611 joined
[22:31] *** Sgeo left
[22:31] *** espadrine joined
[22:37] *** Ven`` left
[22:38] *** Ven`` joined
[22:39] *** dct left
[22:44] *** dct joined
[22:50] *** setty1 left
[22:55] *** Ven`` left
[23:05] *** bhm joined
[23:13] *** |oLa| left
[23:18] *** rindolf left
[23:19] *** pmurias left
[23:37] *** Sgeo joined
[23:50] *** wamba left
[23:50] *** mempko left
[23:53] *** markong left
[23:58] *** dct left
