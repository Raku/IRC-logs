[00:00] <timotimo> maybe we should have asked rindolf to run the script with -Msnapper, that might've been interesting

[00:01] <jnthn> I think on that Rakudo version, snapper didn't exit :)

[00:01] <jnthn> *exist

[00:02] <timotimo> oh, huh

[00:02] <timotimo> committable6: releases use snapper

[00:02] <committable6> timotimo, https://gist.github.com/23a6d87442c8b034770d80ad0ec50c11

[00:02] <timotimo> amusing how "releases use snapper" sounds like "give me the releases that use snapper"

[00:03] <timotimo> ah, one entry for each release because of different paths

[00:03] <timotimo> 2017.11 was the first one to have it

[00:03] <timotimo> oh what

[00:04] <timotimo> rindolf said "rakudobrew latest" ... perhaps that was the exact time we went from master to nom?

[00:04] <timotimo> other way around*

[00:04] <AlexDaniel> yes, possibly

[00:05] *** Xliff_ joined
[00:05] *** Xliff left
[00:05] *** markong left
[00:06] <timotimo> maybe it's time to turn nom into a branch that has a Configure.pl that is basically just "note 'the `nom` branch is no longer being used for rakudo. please switch over to `master` instead; exit 1"

[00:18] *** cognominal joined
[00:19] *** Geth left
[00:19] *** Geth joined
[00:19] *** ChanServ sets mode: +v Geth

[00:20] *** agwind left
[00:20] *** agwind joined
[00:25] *** sharksoft joined
[00:36] *** pharv left
[00:36] *** pharv joined
[00:40] *** pierre joined
[00:40] *** skids joined
[00:46] *** Actualeyes left
[00:57] <Xliff_> timotimo: Probably.

[01:00] *** agwind left
[01:01] *** agwind joined
[01:04] *** Kaiepi left
[01:04] *** Guest18 joined
[01:06] *** Guest18 left
[01:07] *** Guest18 joined
[01:11] *** cdg_ joined
[01:13] *** cdg__ joined
[01:14] *** space joined
[01:15] *** cdg left
[01:16] *** cdg_ left
[01:17] *** cdg__ left
[01:17] *** space left
[01:22] *** pharv left
[01:23] *** pharv joined
[01:28] *** pharv left
[01:30] *** comborico joined
[01:31] *** comborico is now known as comborico1611_

[01:36] *** pharv joined
[01:37] *** pierre left
[01:37] *** sharksoft left
[01:37] <comborico1611_> Which module is the most beginner-friendly for someone to read some simple programs?

[01:38] <comborico1611_> (and not math intensive)

[01:39] *** pierre joined
[01:40] *** pharv left
[01:40] *** pharv joined
[01:40] *** pharv left
[01:40] *** pharv joined
[01:43] <timotimo> JSON::Tiny is rather simple, i think?

[01:44] *** pharv_ joined
[01:45] *** pharv_ left
[01:45] *** pharv left
[01:45] *** pharv joined
[01:47] <comborico1611> timotimo, thank you!

[01:48] <timotimo> that could totally be a tag we put on distributions on the ecosystem

[01:48] <comborico1611> I don't yet know what JSON is but i am close to, in my learning it JavaScript.

[01:48] <comborico1611> I don't know what you are talking about, but I'm glad I could help.

[01:49] *** Actualeyes joined
[01:49] <comborico1611> timotimo, it would be cool if there was a module specifically for beginners.

[01:50] *** pharv left
[01:50] <comborico1611> And the community could simply dump they're simple programs into it, hopefully with adequate documentation.

[01:50] <comborico1611> Their*

[01:50] <APic> k

[01:55] <timotimo> well, we do have the examples page: https://examples.perl6.org/

[01:59] *** redhands left
[02:00] <comborico1611_> timotimo: thanks!

[02:06] <comborico1611_> Off to bed.  Goodnight, guys.

[02:07] *** comborico1611_ left
[02:09] *** comborico1611 left
[02:10] * skids wonders what could be done to make bits of Perl6 as effifcient as nqp so we could have less nqp:: things in src/core

[02:10] <APic> yay

[02:10] <APic> Took both Clones.

[02:16] *** Lynx_ left
[02:17] *** jeromelanteri joined
[02:18] *** Lynx_ joined
[02:33] *** konsolebox left
[02:38] *** konsolebox joined
[02:46] *** ilbot3 left
[02:56] *** ilbot3 joined
[02:56] *** ChanServ sets mode: +v ilbot3

[02:57] *** jeromelanteri left
[02:59] *** jeromelanteri joined
[03:00] *** Guest18 left
[03:01] *** Kaiepi joined
[03:03] *** Guest18 joined
[03:22] *** ufobat___ joined
[03:26] *** ufobat_ left
[03:42] *** leejo left
[03:43] *** Actualeyes left
[04:00] *** pharv joined
[04:03] *** jeromelanteri left
[04:05] *** jeromelanteri joined
[04:37] *** konsolebox left
[04:39] *** konsolebox joined
[04:42] *** pierre left
[04:43] *** pierre joined
[04:47] *** pierre left
[04:57] *** Cabanossi left
[04:58] *** pierre joined
[04:59] *** Cabanossi joined
[05:01] *** Guest18 left
[05:03] *** pierre left
[05:03] *** Guest18 joined
[05:05] <perlawhirl> bisectable6: say [^5+5]

[05:05] <bisectable6> perlawhirl, On both starting points (old=2015.12 new=c2d0d3a) the exit code is 0 and the output is identical as well

[05:05] <bisectable6> perlawhirl, Output on both points: «[5 6 7 8 9]␤»

[05:05] <perlawhirl> seems that parses a bit odd. is there a reason for it?

[05:06] <perlawhirl> found out because i was doing something like `@a[^$n+1]` and didn't get what I expected

[05:06] <perlawhirl> need to disambiguate with `@a[^($n+1)]`

[05:06] *** committable6 left
[05:06] <perlawhirl> but I wonder the reason for the current result?

[05:06] *** committable6 joined
[05:06] *** ChanServ sets mode: +v committable6

[05:07] *** pierre joined
[05:07] <AlexDaniel> m: say (0..4) + 5

[05:07] <camelia> rakudo-moar c2d0d3ace: OUTPUT: «5..9␤»

[05:07] <AlexDaniel> m: say (0..4) * 2

[05:07] <camelia> rakudo-moar c2d0d3ace: OUTPUT: «0..8␤»

[05:08] <AlexDaniel> perlawhirl: ↑ that's the reason

[05:08] <AlexDaniel> (you can scale and shift ranges with math ops)

[05:09] <AlexDaniel> but even without that feature it wouldn't work anyway because of the precedence

[05:09] <AlexDaniel> c: 2014.01 say ^5+5

[05:09] <committable6> AlexDaniel, ¦2014.01: «10␤»

[05:09] <AlexDaniel> ↑ that's a different way to do it

[05:10] <AlexDaniel> I mean compared to doing the range shift

[05:10] <perlawhirl> ahh I see, i'm adding to a Range not an Int... fair enough

[05:11] *** pierre left
[05:14] *** xtreak joined
[05:16] *** khw left
[05:19] *** lizmat left
[05:22] *** sno left
[05:25] *** pierre joined
[05:29] *** lizmat joined
[05:29] *** pierre left
[05:43] *** noganex left
[05:43] *** pierre joined
[05:43] *** skids left
[05:45] *** Actualeyes joined
[05:48] *** pierre left
[05:48] *** curan joined
[05:54] *** troys left
[05:55] *** eliasr left
[05:59] *** pierre joined
[06:08] *** wamba joined
[06:26] *** pierre left
[06:27] *** pierre joined
[06:31] *** pierre left
[06:32] *** sno joined
[06:42] *** pierre joined
[06:47] *** pierre left
[06:59] *** Spot__ is now known as Spot_

[06:59] *** wamba left
[07:01] *** pierre joined
[07:06] *** pierre left
[07:08] *** pierre joined
[07:09] *** darutoko joined
[07:15] *** espadrine left
[07:28] *** noganex joined
[07:34] *** domidumont joined
[07:35] *** lizmat left
[07:37] *** xtreak left
[07:38] *** xtreak joined
[07:39] *** domidumont left
[07:40] *** xtreak left
[07:40] *** domidumont joined
[07:40] *** xtreak joined
[07:46] *** lizmat joined
[07:47] *** pierre left
[07:47] *** pmurias joined
[07:53] *** pierre_ joined
[07:55] *** d4l3k_ joined
[07:55] *** ChanServ sets mode: +v d4l3k_

[07:57] *** statisfiable6 left
[07:57] *** benchable6 left
[07:57] *** coverable6 left
[07:57] *** mithaldu_ left
[07:57] *** SourceBaby left
[07:57] *** dalek left
[07:58] *** mithaldu_ joined
[07:58] *** d4l3k_ is now known as dalek

[07:59] *** squashable6 left
[07:59] *** shareable6 left
[07:59] *** unicodable6 left
[07:59] *** bloatable6 left
[07:59] *** notable6 left
[07:59] *** greppable6 left
[08:00] *** abraxxa1 left
[08:00] *** greppable6 joined
[08:00] *** notable6 joined
[08:00] *** bloatable6 joined
[08:00] *** shareable6 joined
[08:00] *** unicodable6 joined
[08:00] *** squashable6 joined
[08:00] *** releasable6 left
[08:00] *** abraxxa joined
[08:00] *** abraxxa left
[08:01] *** quotable6 left
[08:01] *** abraxxa joined
[08:02] *** rindolf joined
[08:02] *** abraxxa left
[08:05] *** lowbro joined
[08:05] *** lowbro left
[08:05] *** lowbro joined
[08:07] *** wamba joined
[08:19] *** amalia___ joined
[08:19] *** abraxxa joined
[08:22] *** lizmat left
[08:28] *** xtreak left
[08:29] *** xtreak joined
[08:29] *** abraxxa left
[08:34] *** xtreak left
[08:41] *** wamba left
[08:45] *** AlexDaniel left
[08:46] *** Guest18 left
[08:48] *** abraxxa joined
[08:49] *** lizmat joined
[08:52] *** Guest18 joined
[08:57] *** Anding joined
[08:57] *** coverable6 joined
[08:57] *** ChanServ sets mode: +v coverable6

[08:57] *** benchable6 joined
[08:57] *** statisfiable6 joined
[08:57] *** ChanServ sets mode: +v statisfiable6

[08:57] <Anding> Hello - I hope I might ask a question or two

[08:57] *** quotable6 joined
[08:57] *** ChanServ sets mode: +v quotable6

[08:57] *** releasable6 joined
[08:58] <Anding>  loop (my $n = 0; $n < limit; $n++) { $s += $n}  #  Is $n visible to the code outside of this loop and {}

[08:59] <lizmat> m: loop (my $n = 0; $n < limit; $n++) { $s += $n} ; $n

[08:59] <camelia> rakudo-moar c2d0d3ace: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$s' is not declared␤at <tmp>:1␤------> 3loop (my $n = 0; $n < limit; $n++) { 7⏏5$s += $n} ; $n␤»

[08:59] *** pharv left
[08:59] <lizmat> m: my $s;  loop (my $n = 0; $n < limit; $n++) { $s += $n} ; $n

[08:59] <camelia> rakudo-moar c2d0d3ace: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    limit used at line 1. Did you mean 'emit', 'list'?␤␤»

[08:59] *** xtreak joined
[09:00] <lizmat> m: my $s;  loop (my $n = 0; $n < 10; $n++) { $s += $n} ; $n

[09:00] <camelia> rakudo-moar c2d0d3ace: OUTPUT: «WARNINGS for <tmp>:␤Useless use of $n in sink context (line 1)␤»

[09:00] *** pharv joined
[09:00] <Anding> $s was already declared.  It's just a question about scope

[09:00] <lizmat> m: my $s;  loop (my $n = 0; $n < 10; $n++) { $s += $n} ; say $n

[09:00] <camelia> rakudo-moar c2d0d3ace: OUTPUT: «10␤»

[09:00] <lizmat> apparently it is :-)

[09:01] <Anding> That's what I got - but that's quite counter-intuitive.  loop( ) { } looks like a signature with {}, so I was expecting similar behaviour

[09:02] <lizmat> "The initializer is executed once and any variable declaration will spill into the surrounding block."

[09:02] <lizmat> on https://docs.perl6.org/syntax/loop

[09:02] <lizmat> if you want visibility inside the block only:

[09:03] <Anding> In C for(int i = 0 ; i < index ; ++i), i has no external visibility

[09:03] <lizmat> for ^limit -> $n { }

[09:04] *** dakkar joined
[09:04] *** pharv left
[09:04] <Anding> Fair enough...

[09:04] <lizmat> that is also better optimnized :-)

[09:12] *** sena_kun joined
[09:20] *** zakharyas joined
[09:21] *** jeromelanteri left
[09:24] *** wamba joined
[09:31] *** lizmat left
[09:43] *** Guest18 left
[09:47] *** Anding left
[09:54] *** TEttinger left
[09:57] <pmurias> what should NEXT {next} do?

[10:01] *** pierre_ left
[10:01] *** pierre_ joined
[10:06] *** pierre_ left
[10:10] *** lizmat joined
[10:17] <Ulti> evaluate {next} and jump to the label of the string interp and then increment that loop counter and reenter?

[10:17] <Ulti> at least thats what I would guess as an idiot glaring at code

[10:17] <Ulti> possibly entering at the label rather than the start of the surrounding loop... though thats a bit jumpy

[10:18] *** pierre_ joined
[10:19] <Ulti> next feels more like it should only apply to loops though Id be surprised if it was also a goto

[10:19] <Ulti> or is next a phaser for on next

[10:19] <Ulti> which is sort of weird

[10:22] *** pierre_ left
[10:28] <lizmat> NEXT is the name of the phaser

[10:28] <lizmat> m: for ^10 { NEXT .say }

[10:28] <camelia> rakudo-moar c2d0d3ace: OUTPUT: «0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[10:28] <lizmat> m: for ^10 { NEXT .say; next }

[10:28] <camelia> rakudo-moar c2d0d3ace: OUTPUT: «0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[10:29] <jnthn> It hinges on whether the call to the NEXT phaser is considered to be within the dynamic scope of the `next` control exception handler or not

[10:29] <jnthn> And also what that even means

[10:30] <jnthn> Neither is terribly good

[10:31] *** pmurias left
[10:36] *** pierre__ joined
[10:36] *** pmurias joined
[10:37] <pmurias> m: for ^5 {say $_; NEXT {say("next 1");next}}

[10:37] <camelia> rakudo-moar cdb45fa5a: OUTPUT: «0␤next 1␤next 1␤1␤next 1␤next 1␤2␤next 1␤next 1␤3␤next 1␤next 1␤4␤next 1␤next 1␤»

[10:38] <pmurias> Ulti: I was concerned about NEXT {next} inside a loop, but it seems to be behaving rather weird

[10:43] *** Guest18 joined
[10:45] *** Guest18 left
[10:46] *** pierre__ left
[10:46] *** pierre__ joined
[10:47] *** lizmat left
[10:51] *** pierre__ left
[10:56] *** pmurias left
[10:59] *** wbiker joined
[10:59] <wbiker> hi all

[11:00] <wbiker> I am not able to install rakudo star 2018.1 on Fedora 27 fresh installation.

[11:00] <wbiker> perl Configure.pl --backend=moar --gen-moar --prefix=/opt/perl6 works

[11:00] <wbiker> as well as make

[11:01] <wbiker> make install failes with:

[11:01] <wbiker> == Installing modules for MoarVM cd modules/zef && sh -c "PATH=/opt/perl6/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/home/wolfgangbanaston/.local/bin:/home/wolfgangbanaston/bin /opt/perl6/bin/perl6-m -Ilib bin/zef install ." ===> Testing: zef:ver<0.2.0>:auth<github:ugexe> ===> Testing [FAIL]: zef:ver<0.2.0>:auth<github:ugexe> Aborting due to test failure: zef:ver<0.2.0>:auth<github:ugexe> (use --force-test to override)

[11:01] <wbiker> if I start all tests in /t they passes all. But not if the sh -c commadn is used. Any idea where the problem could be?

[11:03] <jnthn> No, though I think if you run that command and give zef the --verbose flag or some such it will at least give a bit more info

[11:03] *** breinbaas joined
[11:09] <rindolf> hi all! moritz : [Coke] : with the latest rakudo/moar master mem consumption is acceptable. It runs slowly however

[11:18] <wbiker> jnthn That might help, thx

[11:19] *** zakharyas left
[11:20] *** zakharyas joined
[11:23] <wbiker> unfortunately, there is no --verbose flag. I could not find such flag in the help as well 

[11:24] <El_Che> wbiker: does your user has access to /opt/perl6

[11:25] *** Actualeyes left
[11:26] <wbiker> El_Che: thanks for helping. But of course. I tried both: installation with root in /opt and with user in ~/perl6. Both show the problem

[11:27] <El_Che> wbiker: Weird. I build fedora 27 packages without trouble. I compile moarvm and nqp separedly though

[11:28] *** raschipi joined
[11:30] *** SyrupThinker joined
[11:30] <wbiker> 2018.1 is out quite a while and just I have this troubles? Probably something is wrong with my box. But what could that be?

[11:30] <El_Che> The rpm (https://github.com/nxadm/rakudo-pkg/releases) is built with this p5 sub: https://github.com/nxadm/rakudo-pkg/blob/master/docker/pkg_rakudo.pl#L98

[11:31] *** SyrupThinker is now known as Guest51578

[11:31] *** Guest51578 left
[11:32] *** SyrupThi` joined
[11:32] *** SyrupThi` left
[11:34] <wbiker> OK, I found the verbosity flag and started zef with --debug. That is what I got:

[11:35] <wbiker> Seems too long string

[11:35] <wbiker> SKIP: No Build.pm for zef:ver<0.2.0>:auth<github:ugexe> ===> Testing: zef:ver<0.2.0>:auth<github:ugexe> Testing with plugin: Zef::Service::Shell::Test+{<anon|51996944>} ===> Testing [FAIL]: zef:ver<0.2.0>:auth<github:ugexe> Aborting due to test failure: zef:ver<0.2.0>:auth<github:ugexe>

[11:36] *** SyrupThi` joined
[11:36] *** SyrupThi` left
[11:40] *** markong joined
[11:40] <dogbert2> rindolf: that sounds like a step in the right direction at least :-)

[11:42] <rindolf> dogbert2: yes

[11:45] <dogbert2> does it take ~10 minutes for you as well?

[11:58] <rindolf> dogbert2: 13m

[11:59] <rindolf> dogbert2: the p5 version and py3 take about 20s

[11:59] <rindolf> dogbert2: pypy3 runs it under a second

[12:00] <rindolf> dogbert2: so the performance of p6 is abysmal here

[12:00] <dogbert2> rindolf: sound as if there is room for some further optimizations in p6 :-)

[12:01] <dogbert2> I believe that one of the biggest culprits is array accesses, if memory serves timotimo has said that they are far from optimal

[12:01] <rindolf> dogbert2: yes, but how long do we have to wait?

[12:02] <moritz> rindolf: until it's done

[12:02] <moritz> rindolf: you know how volunteer-driven projects work, don't you?

[12:03] <dogbert2> do you know if numbers in p5 and python are 32-bit, 64-bit or larger?

[12:05] <moritz> 64 bit, afaict

[12:06] <dogbert2> moritz: thx

[12:06] <moritz> though python seems to have big ints too

[12:06] <dogbert2> are they used by default?

[12:06] <moritz> 2**7000 gives a non-floating-point result

[12:06] <moritz> so it seems yes

[12:06] <dogbert2> cool

[12:10] *** gregf_ left
[12:11] *** Zoffix joined
[12:15] *** Zoffix left
[12:24] *** gregf_ joined
[12:26] *** MilkmanDan left
[12:27] <Ulti> feels tangibly faster to me in the shell if you sprinkle int64 on every variable in the code

[12:27] <Ulti> I CBA to bench that though

[12:27] *** scimon joined
[12:28] *** MilkmanDan joined
[12:28] *** wbiker left
[12:29] *** zakharyas left
[12:30] *** xtreak left
[12:32] <dogbert2> m: say "abcde" ~~ / ab <![e]> cde | ab.. /

[12:32] <camelia> rakudo-moar e3c4db732: OUTPUT: «｢abcd｣␤»

[12:33] *** xtreak joined
[12:33] <dogbert2> is this correct, there's an old RT claiming that it's not. What does moritz say.

[12:36] <moritz> the <![e]> c should terminate LTM

[12:36] <moritz> so I think abcd is correct

[12:36] <moritz> let me reread S05

[12:38] <moritz> "So LTM completely ignores negative lookaheads, and continues to look for pure patterns in whatever follows the negative lookahead"

[12:39] <moritz> then it's wrong, and the ticket is right, and the match should be the whole string

[12:46] *** riatre left
[12:47] *** riatre joined
[12:51] *** xtreak left
[13:02] *** comborico1611 joined
[13:14] *** eliasr joined
[13:29] *** g- joined
[13:37] <dogbert2> moritz: thx, it's an oldie RT #122951

[13:37] <synopsebot> RT#122951 [open]: https://rt.perl.org/Ticket/Display.html?id=122951 [BUG] negative lookahead doesn't LTM properly

[13:39] <moritz> dogbert2: yes, still valid

[13:39] <moritz> and pmichaud is generally to be trusted with such issues :-)

[13:40] <moritz> (I learned much of my regex knowledge from him, jnthn++ and TimToady++)

[13:40] *** cdg joined
[13:42] <moritz> and Jeffrey Friedl's book, and "perlregex", and perlmonks

[13:46] <dogbert2> moritz: interesting, I have an old edition of Friedl and a new Perl 6 Regex book by some noname author :-)

[13:54] *** pierre_ joined
[13:54] <timotimo> rindolf: if i want to reduce the workload so i can profile changes more quickly, can i just change the "2.. 24" near the bottom to a shorter range?

[13:55] *** curan left
[13:56] <rindolf> timotimo: yes

[13:56] <Xliff_> Hi. Is there a perl6 equivalent option to perl5's -n"

[13:57] <Xliff_> Which is "assume program runs within a while <> {}" loop

[13:57] <scimon> There's -n

[13:57] <scimon>  -n                   run program once for each line of input

[13:58] <El_Che> :)

[13:58] <[Coke]> https://docs.perl6.org/language/5to6-nutshell#Command-line_flags

[13:59] <El_Che> I would have expected something more esoteric: perl6 -☔

[14:00] *** zakharyas joined
[14:03] <Xliff_> scimon++ # LOL -- missed that.

[14:12] <scimon> :D

[14:12] <scimon> See the one I'd like is -E being a synonym for -e so when I flip between perl5 and perl6 on the commandline I get less confused. 

[14:13] <timotimo> we seem to spend rather a lot of time inside infix:<%>

[14:13] <moritz> does it coerce anything?

[14:16] *** aindilis left
[14:16] <timotimo> m: say 

[14:16] <camelia> rakudo-moar e3c4db732: OUTPUT: «5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 3say7⏏5<EOL>␤Other potential difficulties:␤    Unsupported use of bare "say"; in Perl 6 please use .say if you meant to call it as a method on $_, or use an …»

[14:16] <timotimo> oops

[14:17] <timotimo> m: say 1000000000.msb

[14:17] <camelia> rakudo-moar e3c4db732: OUTPUT: «29␤»

[14:17] <timotimo> the result values should fit into native ints, but the in-between values probably don't

[14:19] <timotimo> the amount of time we spend in malloc and free is surprising

[14:19] *** vcv joined
[14:22] <timotimo> we spend a lot of time in mp_mul_2d, which we use for left shifts and creating big integer values from ints or nums

[14:27] *** pmurias joined
[14:32] <[Coke]> timotimo: digging into rindolf's slow code?

[14:33] <dogbert2> [Coke]: yep

[14:39] *** gregf_ left
[14:46] *** pierre_ left
[14:46] *** pierre_ joined
[14:47] <pmurias> jnthn: we do have tests for NEXT {last} which seems useful

[14:48] <pmurias> jnthn: the way NEXT {next} behaves seems just weird and accidental

[14:49] <pmurias> jnthn: do you think just implementing NEXT {last} and throwing an exception on NEXT {next} seems sane

[14:49] <pmurias> ?

[14:50] <pmurias> I'm not sure if we want NEXT {redo}

[14:52] *** skids joined
[14:52] *** Actualeyes joined
[14:57] *** aindilis joined
[14:57] *** wamba left
[14:59] *** abraxxa left
[15:05] <timotimo> there was an easy win in the code from replacing @blah[1..*] with @blah.skip(1), but i didn't manage to improve much more

[15:33] *** raschipi left
[15:33] *** raschipi joined
[15:38] *** pierre_ left
[15:39] *** pierre_ joined
[15:51] *** Xliff joined
[15:51] *** Xliff_ left
[15:56] *** pmurias left
[15:59] *** wamba joined
[15:59] <jnthn> .tell pmurias Exception is at lesat better than undefiend behavior. I suspect the oddness is becasue we're outside of the region covered by the next control handler of the loop in question, and so some other loop in the internals, which is in dynamic scope, catches it.

[15:59] <yoleaux> jnthn: I'll pass your message to pmurias.

[15:59] *** troys joined
[16:04] *** bwisti left
[16:05] <Xliff> Is there a way to format DateTime objects into arbitrary strings after initialization?

[16:06] <Xliff> I don't have the luxury of specifying a formatter since I may not be the one instantiating the objects.

[16:10] *** zakharyas left
[16:11] <jkramer> You could just use the sub/callable that you'd use as formatter directly?

[16:12] <raschipi> Xliff: Copy the data into another object and specify the formatter?

[16:12] <Xliff> Or DateTime::Format?

[16:15] *** aindilis left
[16:16] <jkramer> m: DateTime.now.clone(:formatter(-> $_ { sprintf('custom formatter %04d', .year) })).print

[16:16] <camelia> rakudo-moar e3c4db732: OUTPUT: «custom formatter 2018»

[16:16] *** bwisti joined
[16:16] *** athenot joined
[16:23] <Xliff> jkramer++

[16:23] <Xliff> Seems wasteful, though.

[16:23] <Xliff> That and I need something better than what DateTime can do. For example: Properly formatted git dates, which need text DOW and MOY

[16:23] <Xliff> DateTime only allows for index numbers.

[16:24] <Xliff> At least as far as I can determine from the docs.

[16:24] *** pmurias joined
[16:26] <jkramer> DateTime::Format has strftime https://github.com/supernovus/perl6-datetime-format

[16:28] <daxim> rakudo: use v6; class Foo { sub bar() { return 3 }}; say Foo::bar

[16:28] <camelia> rakudo-moar e3c4db732: OUTPUT: «Could not find symbol '&bar'␤  in block <unit> at <tmp> line 1␤␤»

[16:29] <daxim> how to namespace?

[16:30] <jkramer> m: class Foo { method bar { return 3 }}; say Foo.bar

[16:30] <camelia> rakudo-moar e3c4db732: OUTPUT: «3␤»

[16:32] <jnthn> daxim: Subs are my-scoped by default, stick an our on it to make it package-visible

[16:33] <daxim> great, that does the trick

[16:36] *** atta_ is now known as atta

[16:38] *** lowbro left
[16:45] *** john51 left
[16:47] <Xliff> What's the best way to send this command using perl6?

[16:47] <Xliff> https://pastebin.com/bt7cupGw

[16:47] <Xliff> I'm using qq:x, but that's causing problems.

[16:48] <jkramer> run 'git', 'filter-branch', '--env-filter', 'if [ ....' ?

[16:49] *** john51 joined
[16:50] <jkramer> With :out, :err if you want to capture the output

[16:52] *** domidumont left
[17:00] *** cdg left
[17:00] *** cdg joined
[17:05] *** cdg left
[17:12] *** scimon left
[17:13] <pmurias> jnthn: re better than undefined behavior, do we have any useful/sensible behavior for that?

[17:13] <yoleaux> 15:59Z <jnthn> pmurias: Exception is at lesat better than undefiend behavior. I suspect the oddness is becasue we're outside of the region covered by the next control handler of the loop in question, and so some other loop in the internals, which is in dynamic scope, catches it.

[17:27] *** lizmat joined
[17:31] <jnthn> pmurias: I guess maybe "get me out of this NEXT phaser" or some such could work :)

[17:32] *** domidumont joined
[17:37] *** tt left
[17:41] *** dakkar left
[17:42] *** comborico1611 left
[17:44] *** __semper__ left
[17:49] *** cdg joined
[17:50] *** amalia___ left
[17:50] *** epony joined
[17:51] <pmurias> jnthn: that would make sense but OTOH it might be better to just not allow something that's non-obvious and super rarely useful

[17:53] <jnthn> pmurias: True

[17:55] *** aindilis joined
[17:59] *** AlexDaniel joined
[18:14] *** char_var[buffer] joined
[18:18] *** lizmat left
[18:19] *** lizmat joined
[18:30] *** lizmat left
[18:35] *** adelyne left
[18:40] *** epony left
[18:40] *** xenotrope left
[18:41] *** zakharyas joined
[18:41] *** xenotrope joined
[18:42] *** espadrine joined
[18:43] *** lizmat joined
[18:49] *** zakharyas left
[18:51] *** darutoko left
[18:52] *** pharv joined
[18:55] *** lizmat left
[18:57] *** lizmat joined
[19:00] *** TEttinger joined
[19:02] *** sno left
[19:03] *** athenot left
[19:05] *** athenot joined
[19:09] *** lizmat left
[19:12] *** cdg left
[19:16] <rindolf> timotimo: hi

[19:16] <rindolf> timotimo: any news?

[19:19] *** lizmat joined
[19:29] *** lizmat left
[19:38] *** domidumont left
[19:40] *** thunktone joined
[19:42] *** pharv left
[19:43] *** pharv joined
[19:45] *** pharv left
[19:45] *** pharv joined
[19:49] *** evalable6 left
[19:49] *** evalable6 joined
[20:03] *** ZofBot left
[20:06] *** pharv left
[20:06] *** ZofBot joined
[20:06] *** ChanServ sets mode: +v ZofBot

[20:07] *** pharv joined
[20:16] *** lizmat joined
[20:25] *** lizmat left
[20:25] <timotimo> rindolf: nothing really good

[20:26] <rindolf> timotimo: ah.

[20:26] <Xliff> rindolf: Just out of morbid curiosity, have you tried this in PHP?

[20:26] <timotimo> rindolf: it gets faster if you replace @foo[1..*] with @foo.skip(1), for example

[20:26] <rindolf> timotimo: well, good luck

[20:26] <rindolf> timotimo: ah

[20:26] <timotimo> rindolf: the numbers in the calculation before the % $BASE reach outside of 64 bit, don't they?

[20:27] <rindolf> timotimo: no they dont

[20:27] <timotimo> oh!

[20:27] <timotimo> well, that changes everything

[20:27] <rindolf> Xliff: not yet

[20:27] <rindolf> Xliff: and doing numeric in php is evil

[20:27] <Xliff> Yes. I did mention "morbid", didn't I? :)

[20:28] <rindolf> Xliff: i did it  in py2/3 perl5 and perl6

[20:28] <rindolf> Xliff: yes

[20:28] <Xliff> Yeah, I did read that. 

[20:29] * Xliff laments he still hasn't bought moritz++ book yet.

[20:34] <rindolf> timotimo: i think it exceeds 32-bit though

[20:35] *** sno joined
[20:43] *** cdg joined
[20:50] *** quotable6 left
[20:50] *** quotable6 joined
[20:52] *** adelyne joined
[20:54] *** pharv left
[20:55] *** pharv joined
[20:55] *** epony joined
[21:00] *** pharv left
[21:06] *** pharv joined
[21:06] *** kurahaupo joined
[21:08] *** pharv left
[21:08] *** pharv joined
[21:15] *** greppable6 left
[21:15] *** greppable6 joined
[21:15] *** ChanServ sets mode: +v greppable6

[21:18] *** comborico1611 joined
[21:20] *** raschipi left
[21:22] *** pecastro_ left
[21:23] *** Mithaldu left
[21:25] *** wamba left
[21:26] *** cdg_ joined
[21:28] *** wamba joined
[21:30] *** cdg left
[21:31] *** Mithaldu joined
[21:32] *** |oLa| joined
[21:44] *** vcv left
[21:49] *** pmurias left
[21:50] *** cdg_ left
[21:51] *** lancew joined
[21:53] *** lancew_ joined
[21:54] <lancew_> Quick question, I am writing some tests that are time dependant. How do I set a fixed time for my tests? I.e. so something like "Date.new(DateTime.now);" can be set to a known good point so I can test date logic?

[21:55] <lancew_> (can you guess that I have some tests that have broken as I look back at dates over 4 months and now my this year and last year dates don't work as I wrote the test in late 2017 when all was in "This year", now some is in "Last Year")

[21:56] *** lancew left
[21:56] *** rindolf left
[21:58] *** lancew__ joined
[22:01] <moritz> can't you just use relative dates when doing the comparison?

[22:02] *** lancew_ left
[22:04] *** skids left
[22:04] <lancew__> moritz, I am doing totals for this year and last year. But my test adds data with relative dates (i.e. this today, today -1 month, today -2 months, today  -3 months, today - 13 months. Then has hard coded "expected" values for "this year" and "last year". Lazy I guess....

[22:04] * lancew__ goes off to re-write

[22:06] <moritz> lancew__: the other thing you could is to give the code an optional parameter for what to consider "today"

[22:06] <moritz> and default to Date.today()

[22:06] <moritz> but in the tests, you can pass in a hard-coded date

[22:10] *** lancew__ left
[22:14] *** Xliff left
[22:22] *** Xliff joined
[22:23] *** epony left
[22:23] *** epony joined
[22:26] *** aindilis left
[22:39] *** wamba left
[22:40] *** comborico1611 left
[22:52] *** thunktone left
[22:55] *** SourceBaby joined
[22:55] *** ChanServ sets mode: +v SourceBaby

[22:58] *** Grrrr left
[23:02] *** lizmat joined
[23:12] *** sivoais left
[23:21] *** Grrrr joined
[23:22] *** sena_kun left
[23:22] *** Grrrr left
[23:24] *** Grrrr joined
[23:29] *** Grrrr left
[23:31] *** Grrrr joined
[23:32] *** pierre_ left
[23:33] *** aindilis joined
[23:38] *** pierre joined
[23:42] *** pierre left
[23:50] *** krunen_ joined
[23:50] *** krunen left
[23:51] *** krunen_ left
[23:52] *** krunen joined
