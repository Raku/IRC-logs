[00:00] <timotimo> 0xdfdfdfdfdf

[00:00] <mornfall> openbsd malloc has a tendency to junk everything it can, so if you read memory that was free'd you tend to get dfdfdf :p

[00:00] <timotimo> that's amusing

[00:01] <timotimo> you usually get that from doing multithreaded stuff carelessly, but there could of course also be a bug

[00:01] <timotimo> reproducing stuff that happened in the repl could be difficult though?

[00:01] <mornfall> it happens rather reliably for me

[00:02] <timotimo> ok then, time to apply some env vars

[00:02] <timotimo> will MVM_SPESH_DISABLE=yes cause it to no longer crash?

[00:03] <mornfall> nope, still dies in flames

[00:03] <mornfall> also with JIT disabled

[00:03] <timotimo> cool

[00:03] <timotimo> disabling spesh will force jit to be disabled as well

[00:03] <mornfall> okay

[00:04] <timotimo> what most other langs call jit we call "spesh and then jit"

[00:05] <mornfall> it's dying in uv_free_cpu_info :\

[00:05] <timotimo> oh

[00:05] <mornfall> called from MVM_platform_cpu_count

[00:05] <mornfall> seriously

[00:05] <timotimo> that was just fixed

[00:05] <timotimo> | * 6455d1f6a - Fix double free in platform/sys.c (2 days ago) <Ben Davies>

[00:06] <mornfall> good, don't mind me then (grabbed 2018.11 by tag, IIRC)

[00:07] <timotimo> aye, it got fixed post release

[00:08] <timotimo> in all the time it has been in there, nobody has triggered it; maybe it only ever "fails" on some systems and not on others

[00:09] <timotimo> oh, time to look at today's advent calendar post

[00:09] <mornfall> i clearly got late to the game :p

[00:09] <timotimo> glad to have you, tho

[00:09] <timotimo> it's always good to have people who can sniff out rare bugs, as much as it sucks for them to find bugs all the time :(

[00:10] *** kensanata left
[00:12] <timotimo> also always good to have people read the docs and tutorials afresh to tell us what's bad

[00:12] <timotimo> we try to "torture the implementors for the benefit of the users", but some things the devs just can't reliably access

[00:13] *** john_parr_ joined
[00:13] *** sena_kun left
[00:13] *** lizmat_ joined
[00:13] *** p6bannerbot sets mode: +v lizmat_

[00:13] *** p6bannerbot sets mode: +v john_parr_

[00:14] *** TimToady joined
[00:15] *** mingdao_ joined
[00:15] *** p6bannerbot sets mode: +v mingdao_

[00:15] *** p6bannerbot sets mode: +v TimToady

[00:15] *** tharkun_ joined
[00:15] *** _kristia1 joined
[00:15] *** p6bannerbot sets mode: +v _kristia1

[00:15] *** Mikey_ joined
[00:16] *** p6bannerbot sets mode: +v tharkun_

[00:16] *** caa51h_ joined
[00:16] *** mingdao_ left
[00:16] *** p6bannerbot sets mode: +v Mikey_

[00:16] *** mingdao_ joined
[00:16] *** p6bannerbot sets mode: +v mingdao_

[00:17] *** p6bannerbot sets mode: +v caa51h_

[00:17] *** agentzh_ joined
[00:17] *** agentzh_ left
[00:17] *** agentzh_ joined
[00:17] *** p6bannerbot sets mode: +v agentzh_

[00:18] *** john_parr left
[00:18] *** lizmat left
[00:18] *** caa51h left
[00:18] *** p6bannerbot sets mode: +v agentzh_

[00:18] *** john_parr_ is now known as john_parr

[00:18] *** mingdao_ is now known as mingdao

[00:19] *** cjkinni joined
[00:19] <mornfall> it's okay, i like the language and it's been a while since i had this much fun programming test scripts :p

[00:19] *** felher joined
[00:20] *** p6bannerbot sets mode: +v cjkinni

[00:20] *** mingdao left
[00:20] <mornfall> it's definitely a huge improvement over p5 despite the occasional sharp edge

[00:20] *** p6bannerbot sets mode: +v felher

[00:21] *** oodani left
[00:21] *** m0ltar left
[00:21] *** Mithaldu left
[00:22] *** yqt joined
[00:23] *** m0ltar joined
[00:23] *** p6bannerbot sets mode: +v yqt

[00:23] *** oodani joined
[00:24] *** p6bannerbot sets mode: +v m0ltar

[00:24] *** p6bannerbot sets mode: +v oodani

[00:24] *** Mithaldu joined
[00:25] *** p6bannerbot sets mode: +v Mithaldu

[00:25] *** Guest18_ joined
[00:26] *** p6bannerbot sets mode: +v Guest18_

[00:31] *** w_richard_w joined
[00:32] *** p6bannerbot sets mode: +v w_richard_w

[00:34] *** rindolf left
[00:37] *** yqt left
[00:45] *** zacts joined
[00:45] *** p6bannerbot sets mode: +v zacts

[00:46] *** pecastro left
[00:55] <SmokeMachine> why this works?

[00:55] <SmokeMachine> class C { has $.a is rw }; C.^compose; my $c = C.new; nqp::bindattr(nqp::decont($c),$c.WHAT,q"$!a", Proxy.new: FETCH => -> $ { say "FETCH" }, STORE => -> $, $value is copy { say "STORE" }); say $c.a; $c.a = 42

[00:56] <SmokeMachine> m: class C { has $.a is rw }; C.^compose; my $c = C.new; nqp::bindattr(nqp::decont($c),$c.WHAT,q"$!a", Proxy.new: FETCH => -> $ { say "FETCH" }, STORE => -> $, $value is copy { say "STORE" }); say $c.a; $c.a = 42

[00:56] <camelia> rakudo-moar dd0301454: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::decont, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3c = C.new; nqp::bindattr(nqp::decont($c)7⏏5,$c.WHAT,q"$!a", Proxy.new: FETCH => -> ␤»

[00:56] <SmokeMachine> sorry, wrong test

[00:56] *** atweiden-air joined
[00:57] <SmokeMachine> m: use nqp; class C { has $.a is rw }; C.^compose; my $c = C.new; nqp::bindattr(nqp::decont($c),$c.WHAT,q"$!a", Proxy.new: FETCH => -> $ { say "FETCH" }, STORE => -> $, $value is copy { say "STORE" }); say $c.a; $c.a = 42

[00:57] <camelia> rakudo-moar dd0301454: OUTPUT: «FETCH␤FETCH␤FETCH␤FETCH␤FETCH␤FETCH␤FETCH␤FETCH␤FETCH␤True␤STORE␤»

[00:57] *** p6bannerbot sets mode: +v atweiden-air

[00:57] <SmokeMachine> why this works ^^ ?

[00:57] <SmokeMachine> use nqp; class C { has $!a }; C.^add_multi_method: "a", method () is rw { return-rw self.^attributes.head.get_value: self }; C.^compose; my $c = C.new; nqp::bindattr(nqp::decont($c),$c.WHAT,q"$!a", Proxy.new: FETCH => -> $ { say "FETCH" }, STORE => -> | { say "STORE" }); say $c.a; $c.a = 42

[00:57] <SmokeMachine> m: use nqp; class C { has $!a }; C.^add_multi_method: "a", method () is rw { return-rw self.^attributes.head.get_value: self }; C.^compose; my $c = C.new; nqp::bindattr(nqp::decont($c),$c.WHAT,q"$!a", Proxy.new: FETCH => -> $ { say "FETCH" }, STORE => -> | { say "STORE" }); say $c.a; $c.a = 42

[00:57] <camelia> rakudo-moar dd0301454: OUTPUT: «FETCH␤Cannot modify an immutable Bool (True)␤  in block <unit> at <tmp> line 1␤␤True␤FETCH␤»

[00:58] <SmokeMachine> and this doesn't ^^ ?

[01:01] <timotimo> i assume get_value doesn't return-rw

[01:04] *** w_richard_w left
[01:04] *** ChoHag joined
[01:05] *** zacts left
[01:05] *** p6bannerbot sets mode: +v ChoHag

[01:05] *** Kaypie left
[01:05] *** Kaypie joined
[01:06] *** p6bannerbot sets mode: +v Kaypie

[01:06] *** zengargoyle joined
[01:07] *** p6bannerbot sets mode: +v zengargoyle

[01:07] <zengargoyle> p6: "Hey A is B duh".match(/[\s(<[A..Z]>)\s]/,:g);say (@($/)[0]>>.Str).perl;

[01:07] <camelia> rakudo-moar dd0301454: OUTPUT: «("A",)␤»

[01:07] <zengargoyle> "Hey A is B duh".match(/[\s(<[A..Z]>)\s]/,:g);say (@($/)[1]>>.Str).perl;

[01:07] <evalable6> zengargoyle, rakudo-moar dd0301454: OUTPUT: «("B",)␤»

[01:07] <zengargoyle> "Hey A is B duh".match(/[\s(<[A..Z]>)\s]/,:g);say (@($/)[0,1]>>.Str).perl;

[01:07] <evalable6> zengargoyle, rakudo-moar dd0301454: OUTPUT: «(" A ", " B ")␤»

[01:07] <zengargoyle> what????

[01:09] <timotimo> that's individual items behaving like lists if you treat them list-like

[01:09] <timotimo> m: say "a">>.Str.perl

[01:09] <camelia> rakudo-moar dd0301454: OUTPUT: «("a",)␤»

[01:09] <timotimo> m: say "a".Str.perl

[01:09] <camelia> rakudo-moar dd0301454: OUTPUT: «"a"␤»

[01:09] <zengargoyle> why the spaces???

[01:10] <timotimo> m: "Hey A is B duh".match(/[\s(<[A..Z]>)\s]/,:g); say @/[0,1].perl

[01:10] <camelia> rakudo-moar dd0301454: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5[0, 1]' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[01:10] <zengargoyle> it seems the semantics of the regex match change to include the non-included...

[01:10] <timotimo> m: "Hey A is B duh".match(/[\s(<[A..Z]>)\s]/,:g); say $/.list[0,1].perl

[01:10] <camelia> rakudo-moar dd0301454: OUTPUT: «(Match.new(from => 3, pos => 6, list => (Match.new(hash => Map.new(()), orig => "Hey A is B duh", list => (), made => Any, pos => 5, from => 4),), made => Any, orig => "Hey A is B duh", hash => Map.new(())), Match.new(from => 8, pos => 11, made => Any…»

[01:10] <timotimo> m: "Hey A is B duh".match(/[\s(<[A..Z]>)\s]/,:g); say $/.list[0,1].>>.Str

[01:10] <camelia> rakudo-moar dd0301454: OUTPUT: «( A   B )␤»

[01:11] <timotimo> m: "Hey A is B duh".match(/[\s(<[A..Z]>)\s]/,:g); say $/.list[0,1].>>.Str.>>.perl

[01:11] <camelia> rakudo-moar dd0301454: OUTPUT: «(" A " " B ")␤»

[01:11] <timotimo> this output is barely readable in irc %)

[01:12] <zengargoyle> i only wanted the A and B and not the H based on A and B being surrounded by spaces.  couldn't make it work with the whole array, or a 0,1 slice.

[01:13] *** Kaypie left
[01:13] <zengargoyle> the spaces only show up if you take the whole array, if you take .[0] or .[1] the spaces aren't there (which is DWIMeant)

[01:13] *** Kaypie joined
[01:13] <timotimo> m: "Hey A is B duh".match(/[\s(<[A..Z]>)\s]/,:g); say $/[0].list[0,1].>>Str

[01:13] <camelia> rakudo-moar dd0301454: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing dot on method call␤at <tmp>:1␤------> 3[A..Z]>)\s]/,:g); say $/[0].list[0,1].>>7⏏5Str␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤ …»

[01:13] <timotimo> m: "Hey A is B duh".match(/[\s(<[A..Z]>)\s]/,:g); say $/[0].list[0,1]>>.Str

[01:13] <camelia> rakudo-moar dd0301454: OUTPUT: «Use of Nil in string context␤(A )␤  in block <unit> at <tmp> line 1␤»

[01:13] <timotimo> m: "Hey A is B duh".match(/[\s(<[A..Z]>)\s]/,:g); say $/[0][0,1]>>.Str

[01:13] <camelia> rakudo-moar dd0301454: OUTPUT: «Use of Nil in string context␤(A )␤  in block <unit> at <tmp> line 1␤»

[01:14] <timotimo> m: "Hey A is B duh".match(/[\s(<[A..Z]>)\s]/,:g); say $/[0,1][0]>>.Str

[01:14] <camelia> rakudo-moar dd0301454: OUTPUT: «(A)␤»

[01:14] <timotimo> m: "Hey A is B duh".match(/[\s(<[A..Z]>)\s]/,:g); say $/[0,1][0,1]>>.Str

[01:14] <camelia> rakudo-moar dd0301454: OUTPUT: «( A   B )␤»

[01:14] <timotimo> weird, but i can't go much deeper into this right now

[01:14] *** p6bannerbot sets mode: +v Kaypie

[01:16] <zengargoyle> no prob, i think it's a bug... i had to fall back to ($/.[0], $/.[1]) to get the matches without the spaces...  like it's ignoring the non-capture [] and the capture () bits somehow.

[01:16] <timotimo> it must be giving you the entire match object for both global matches

[01:17] <zengargoyle> yeah.

[01:17] <timotimo> however

[01:17] <timotimo> there is a simpler solution here

[01:17] <timotimo> use <( and )>

[01:18] <zengargoyle> i'll have to look that up. :)   (make this the global match???)

[01:19] <timotimo> aye

[01:20] <timotimo> it's like an inside-out lookahead/lookbehind

[01:20] <zengargoyle> gotcha.

[01:21] <zengargoyle> would observed behavior be a bug?  it's been a while since i've done p6.  trying to refresh my memory with Advent of Code challenges and this tripped me up for a bit.

[01:21] *** lucasb left
[01:22] <timotimo> sorry, i've got a bit of a headache. Data::Dump::Tree could probably help out here

[01:22] <timotimo> fwiw, comb is sometimes a lot better than match :g :)

[01:23] <zengargoyle> i used comb for almost everyting.... this was an attempt to not have to get rid of the inital Capital letter in the string. :)

[01:24] <zengargoyle> screw parsing that string, just give me the digits.

[01:26] <zengargoyle> take it easy, hope your headache goes away.

[01:30] <timotimo> o/

[01:37] <SmokeMachine> timotimo: yes... probably... but this worked:

[01:37] <SmokeMachine> m: use nqp; class C { has $!a }; C.^add_multi_method: "a", method () is rw { nqp::getattr(self, self.WHAT, q"$!a") }; C.^compose; my $c = C.new; nqp::bindattr(nqp::decont($c),$c.WHAT,q"$!a", Proxy.new: FETCH => -> $ { say "FETCH" }, STORE => -> | { say "STORE" }); say $c.a; $c.a = 42

[01:37] <camelia> rakudo-moar dd0301454: OUTPUT: «FETCH␤FETCH␤FETCH␤FETCH␤FETCH␤FETCH␤FETCH␤FETCH␤FETCH␤True␤STORE␤»

[01:37] <timotimo> yeah, get_value is not used by rakudo itself

[01:38] <timotimo> it's only for metaprogramming situations

[01:38] <timotimo> well, at least it isn't used for regular class attributes

[01:38] <timotimo> not such a big surprise that it behaves differently

[01:38] <timotimo> it's probably barely tested

[01:40] <timotimo> want to send a pullrequest that makes get_value use return-rw and be an "is rw" method?

[01:41] <SmokeMachine> I think Ill try

[01:45] *** Thaeus left
[01:51] *** kurahaupo left
[01:57] <Kaypie> m: my @a = [1,2,3]; my $a = @a.shift if @a.first == 2; say @a

[01:57] <camelia> rakudo-moar dd0301454: OUTPUT: «[1 2 3]␤»

[01:57] *** Kaypie is now known as Kaiepi

[01:57] <Kaiepi> ok so the if gets evaluated before .shift

[01:57] <Kaiepi> good

[01:58] <timotimo> well, yeah, otherwise it wouldn't be much of an "if" :D

[01:58] *** kurahaupo joined
[01:59] *** p6bannerbot sets mode: +v kurahaupo

[01:59] <SmokeMachine> timotimo: it's working! spec testing

[02:04] <SmokeMachine> timotimo: if all the tests pass, Im committing it... ok?

[02:05] <timotimo> it's probably fine

[02:05] <timotimo> pull requests sometimes take long to be merged

[02:05] <timotimo> but in this case it's probably better for others to look over it and say if it's a sensible change or if the behavior was perhaps even intended

[02:11] <SmokeMachine> ok... PRing then...

[02:16] *** atweiden-air left
[02:27] *** molaf left
[02:31] *** coet left
[02:38] <SmokeMachine> timotimo: t/spec/S32-str/utf8-c8.t is broken on line 95... Im testing again without my change...

[02:38] <SmokeMachine> yes. without my change its broken too...

[02:39] *** molaf joined
[02:40] *** p6bannerbot sets mode: +v molaf

[02:41] <SmokeMachine> its always broken here...

[02:41] <SmokeMachine> Im PRing...

[02:46] <SmokeMachine> timotimo: https://github.com/rakudo/rakudo/pull/2526

[03:10] *** w_richard_w joined
[03:11] *** p6bannerbot sets mode: +v w_richard_w

[03:28] *** ufobat_ joined
[03:28] *** p6bannerbot sets mode: +v ufobat_

[03:31] *** ufobat left
[03:34] *** nivekuil` joined
[03:34] *** nivekuil` left
[03:36] *** zacts joined
[03:36] *** p6bannerbot sets mode: +v zacts

[03:40] <Geth> ¦ doc: ce78069b51 | (Richard Hainsworth)++ (committed using GitHub Web editor) | Makefile

[03:40] <Geth> ¦ doc: Update Makefile

[03:40] <Geth> ¦ doc: 

[03:40] <Geth> ¦ doc: add comment mainly to trigger rebuild

[03:40] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ce78069b51

[03:43] *** finanalyst joined
[03:43] *** p6bannerbot sets mode: +v finanalyst

[03:46] *** w_richard_w left
[03:48] <finanalyst> .tell moritz current failure due to old version of Pod::To::BigPage being used. Old version fails on Pod::Defn. Updated version has new handler. 

[03:48] <yoleaux> 7 Dec 2018 11:18Z <moritz> finanalyst: I've updated rakudo. Enjoy :)

[03:48] <yoleaux> finanalyst: I'll pass your message to moritz.

[03:48] <yoleaux> 7 Dec 2018 21:55Z <[Coke]> finanalyst: can you merge https://github.com/perl6/perl6-pod-to-bigpage/pull/33 and publish it, on the assumption that it will let us fix the doc generation for the public site? the upgrade to rakudo has broken it until we get the fix in.

[03:58] <finanalyst> [Coke}: are you online?

[03:59] <finanalyst> [Coke}: are you online?

[03:59] <finanalyst> [Coke]: are you online?

[04:03] <finanalyst> can anyone tell me why an old version of a module is being downloaded by zef? Is there another step needed after merging, eg. publishing

[04:03] <finanalyst> if so, how to publish?

[04:20] *** Cabanossi left
[04:20] *** Cabanoss- joined
[04:21] *** p6bannerbot sets mode: +v Cabanoss-

[04:25] <Geth> ¦ perl6-pod-to-bigpage: 6d01e65d5e | (Richard Hainsworth)++ (committed using GitHub Web editor) | META6.json

[04:25] <Geth> ¦ perl6-pod-to-bigpage: bump version to 0.4.1

[04:25] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/commit/6d01e65d5e

[04:28] <finanalyst> how often does zef update its module source lists?

[04:44] <finanalyst> .tell moritz zef now installing updated version of Pod::To::BigPage that will process Pod::Defn. Please upgrade Pod::To::BigPage on docs server, if this is not automatic

[04:44] <yoleaux> finanalyst: I'll pass your message to moritz.

[04:46] <finanalyst> .tell [Coke] new version of Pod::To::BigPage processes Pod::Defn on a local version of docs. zef now installing new version.

[04:46] <yoleaux> finanalyst: I'll pass your message to [Coke].

[04:49] *** finanalyst left
[05:25] *** AlexDaniel left
[05:29] *** Guest18_ left
[05:49] *** sauvin joined
[05:49] *** p6bannerbot sets mode: +v sauvin

[05:53] *** [Sno] joined
[05:54] *** Sgeo_ joined
[05:54] *** p6bannerbot sets mode: +v [Sno]

[05:54] *** p6bannerbot sets mode: +v Sgeo_

[05:55] *** sno left
[05:57] *** Sgeo left
[06:31] *** zacts left
[06:54] *** irdr joined
[06:54] *** p6bannerbot sets mode: +v irdr

[07:17] <ufobat_> when have/use some module in a script can I get information from which CompUnit::Repository it was from, in order to access its META6 data?

[07:18] <ufobat_> and can i also access the %?RESOURCES of this module?

[08:06] <Geth> ¦ perl6-pod-to-bigpage: 1561288c3b | (JJ Merelo)++ | META6.json

[08:06] <Geth> ¦ perl6-pod-to-bigpage: Bumps up version to account for Defn being handled now

[08:06] <Geth> ¦ perl6-pod-to-bigpage: 

[08:06] <Geth> ¦ perl6-pod-to-bigpage: It was done in #33 actually. This closes #31

[08:06] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/commit/1561288c3b

[08:06] <Geth> ¦ perl6-pod-to-bigpage: 06ad9bf992 | (JJ Merelo)++ | 0 files

[08:06] <Geth> ¦ perl6-pod-to-bigpage: Changes author to Perl 6

[08:06] <Geth> ¦ perl6-pod-to-bigpage: 

[08:06] <Geth> ¦ perl6-pod-to-bigpage: And bumps up version to 0.5. It's using new block types, so it merits bumping up.

[08:06] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/commit/06ad9bf992

[08:13] <buggable> New CPAN upload: Algorithm-LDA-0.0.5.tar.gz by TITSUKI http://modules.perl6.org/dist/Algorithm::LDA:cpan:TITSUKI

[08:17] *** nige joined
[08:18] *** p6bannerbot sets mode: +v nige

[08:19] <nige> currently doing my advent entry for the 10th - have run in to a little problem - I'd like to use the output of the perl6 interpreter - however the colours are causing Terminal::Print trouble - is there a way to turn off colour output for the interpreter?

[08:25] *** jjmerelo joined
[08:25] *** p6bannerbot sets mode: +v jjmerelo

[08:26] <jjmerelo> Hi

[08:26] <yoleaux> 2 Dec 2018 13:08Z <tbrowder> jjmerelo: i've edited your day 2 post a bit: adjusted the date/time published (p6 wp is on UTC, so you use the exact date an time of 00:01 which displays in the summary as 12:01 AM); also, removed the duplicate title and closed up some of the extra newlines inside obvious paras. you may want to tweak the content by hand some more. i would like you to completely update day 2 content later following the procedures i'm

[08:26] <jjmerelo> .tell tbrowder thanks.

[08:26] <yoleaux> jjmerelo: I'll pass your message to tbrowder.

[08:26] <jjmerelo> .seen moritz

[08:26] <yoleaux> I saw moritz 7 Dec 2018 22:17Z in #perl6: <moritz> can't we let travis build the site?

[08:26] <jjmerelo> .seen AlexDaniel

[08:26] <yoleaux> I saw AlexDaniel 02:08Z in #perl6-dev: <AlexDaniel> samcv: ↑

[08:28] *** domidumont joined
[08:28] <moritz> \o

[08:28] <yoleaux> 03:48Z <finanalyst> moritz: current failure due to old version of Pod::To::BigPage being used. Old version fails on Pod::Defn. Updated version has new handler.

[08:28] <yoleaux> 04:44Z <finanalyst> moritz: zef now installing updated version of Pod::To::BigPage that will process Pod::Defn. Please upgrade Pod::To::BigPage on docs server, if this is not automatic

[08:28] <jjmerelo> moritz ^^^

[08:28] <jjmerelo> I have just upgraded Pod::To::Bigpage to 0.5.0

[08:28] *** p6bannerbot sets mode: +v domidumont

[08:29] <jjmerelo> Can you please upgrade that and check?

[08:29] <moritz> I can try

[08:29] <jjmerelo> I no longer have access, for some reason. 

[08:29] <jjmerelo> Thanks.

[08:29] <moritz> how so?

[08:29] *** nige left
[08:30] <jjmerelo> moritz: yesterday I tried with my desktop computer, whose public key was installed there. It didn't work.

[08:31] <jjmerelo> moritz: today I'm marooned in the sofa with back pain, and I don't think this public key is there. I can send it to you if you would be so kind to install it there.

[08:31] <jjmerelo> (I mean the laptop public key, not the sofa's public key)

[08:31] <moritz> ===> Updating: Pod::To::BigPage:ver<0.5.0>:auth<Perl 6

[08:32] <moritz> jjmerelo: yesterday, hack was down. I've rebooted it

[08:32] <moritz> jjmerelo: but I'll happily add more SSH keys for you

[08:33] <jjmerelo> moritz: ok, that must have been it. Please add the one I've emailed to you.

[08:33] <moritz> jjmerelo: done

[08:33] <jjmerelo> moritz++

[08:33] <samcv> .

[08:33] <jjmerelo> moritz: I'm in :-)

[08:34] <jjmerelo> Hi, samcv !

[08:34] <samcv> hi

[08:38] <jjmerelo> samcv: just saw this issue you solved about indexing %

[08:38] <jjmerelo> samcv: there's a problem now with indexing %%. I don't know if what you did, changing it to its unicode name, would work for that

[08:39] <jjmerelo> samcv: indexing of names is more or less OK, indexing of fragments is kind of broken and totally jury-rigged

[08:43] <samcv> hmm

[08:43] *** lizmat_ left
[08:43] <samcv> wait i need an example

[08:48] *** lizmat joined
[08:48] *** p6bannerbot sets mode: +v lizmat

[08:56] <jjmerelo> I would say that the docs.perl6.org is back to normal, right?

[09:01] *** Sgeo_ left
[09:06] *** kent\n left
[09:07] <Geth> ¦ doc: e3fb0e6ffa | (JJ Merelo)++ | 2 files

[09:07] <Geth> ¦ doc: Insert recommendations for make html and making docs

[09:07] <Geth> ¦ doc: 

[09:07] <Geth> ¦ doc: Since Defn is only interpreted after 2018.11, that's been the version recommended. It should work with prior versions, only they will not be rendered in the same way. Closes #2424

[09:07] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e3fb0e6ffa

[09:08] *** Sgeo joined
[09:09] *** p6bannerbot sets mode: +v Sgeo

[09:09] *** kent\n joined
[09:09] *** p6bannerbot sets mode: +v kent\n

[09:12] *** sena_kun joined
[09:13] *** p6bannerbot sets mode: +v sena_kun

[09:15] <Geth> ¦ Pod-To-HTML/master: 5 commits pushed by (JJ Merelo)++

[09:15] <Geth> ¦ Pod-To-HTML/master: 0430fb94b6 | Fixed syntax error

[09:15] <Geth> ¦ Pod-To-HTML/master: d8ab051825 | Reverting to Pod::Defn which what is in Rakudo refs perl6/Pod-To-HTML#43

[09:15] <Geth> ¦ Pod-To-HTML/master: 32456c56c7 | Merging the changes upstream

[09:15] <Geth> ¦ Pod-To-HTML/master: b76a3d0203 | Merging with local changes

[09:15] <Geth> ¦ Pod-To-HTML/master: 0513a85ded | Updates metadata

[09:15] <Geth> ¦ Pod-To-HTML/master: review: https://github.com/perl6/Pod-To-HTML/compare/76b3e85db5c9...0513a85ded91

[09:21] <mornfall> can i subscribe to file change notifications as a supply?

[09:21] <mornfall> inotify/kqueue kind of stuff

[09:24] <mornfall> oh yes, IO::Notification is it?

[09:29] *** kurahaupo left
[09:30] <sena_kun> yes

[09:30] <sena_kun> `watch-path`

[09:33] <mornfall> oops, there's a bug? just doing empty 'whenever $watch' i get 'Use of uninitialized value of type Str in string context.' on every event?

[09:34] <sena_kun> cannot reproduce on linux. :S

[09:34] <sena_kun> my code is: `react { whenever IO::Notification.watch-path('yaml.yml') { $_.say } }` from repl.

[09:34] <mornfall> yeah, it'd be quickly caught

[09:36] <mornfall> okay i was watching a directory

[09:36] <mornfall> watching a single file seems to be okay

[09:37] <mornfall> also docs say watching a directory watches the entire subtree but it doesn't :\

[09:38] <mornfall> okay it say 'file in that directory' but that also doesn't work :\

[09:38] <mornfall> files*

[09:38] *** daxim joined
[09:39] *** p6bannerbot sets mode: +v daxim

[09:39] <mornfall> IO::Notification seems to be a rather thin wrapper around nqp::watchfile

[09:44] <mornfall> so it seems nqp::watchfile just sends undef (Str) for the path if i watch a directory

[09:45] <Woodi> mornfall: just Perl6 is in organic growth phase :)  more users are needed

[09:45] <Geth> ¦ Pod-To-HTML: 3eb562b7af | (JJ Merelo)++ | 2 files

[09:45] <Geth> ¦ Pod-To-HTML: Updates test to check for template filling

[09:45] <Geth> ¦ Pod-To-HTML: 

[09:45] <Geth> ¦ Pod-To-HTML: And also updates a bit the README.md to reflect the use of templates. Refs #35 but shouldn't be closed unless it's documented actually on the code.

[09:45] <Geth> ¦ Pod-To-HTML: review: https://github.com/perl6/Pod-To-HTML/commit/3eb562b7af

[09:45] <Geth> ¦ Pod-To-HTML: a489b345a1 | (JJ Merelo)++ | 2 files

[09:45] <Geth> ¦ Pod-To-HTML: Adds small comment

[09:45] <mornfall> okay it goes all the way down to moar

[09:45] <Geth> ¦ Pod-To-HTML: 

[09:45] <Geth> ¦ Pod-To-HTML: As a matter of fact, the whole module is not documented, but that's another completely different topic. Bumps up version to reflect the templating change and closes #35

[09:45] <Geth> ¦ Pod-To-HTML: review: https://github.com/perl6/Pod-To-HTML/commit/a489b345a1

[09:46] <mornfall> MVM_OP_watchfile

[09:46] <Woodi> probably libuv is at the bottom...

[09:47] <mornfall> yes, but i sort of expect libuv to work

[09:47] <mornfall> though so far i only found layers of wrappers

[09:49] <mornfall> *sigh* this is ugly

[09:49] <Woodi> mornfall: Rakudo implementation of v6 is based on nqp with Moar backend which uses libuv. becouse Moarvm replaces Parrot and we needed something working *fast* :)

[09:51] <Woodi> and at least we have something working on uncompatible oses like nixes and windowses

[09:53] <Woodi> there was some talks about replacing libuv some years ago

[09:54] <Woodi> but, imo, we should just have NativeCalls libraries of every os specific features...

[09:54] *** rindolf joined
[09:55] <mornfall> no, platform abstraction is good and useful

[09:55] <mornfall> it just sucks when it breaks, because it's usually ugly

[09:55] *** p6bannerbot sets mode: +v rindolf

[09:55] <Woodi> magical i/o is like ORM - it's stops be magicall at some point

[09:56] <Woodi> but, yes, Perl usually is full of batteries by defult :)

[09:57] <mornfall> yey, a null pointer comes as the filename into the uv_fs_event_start callback

[09:57] <mornfall> don't i just love my life?

[09:57] <Woodi> mornfall: you just doing something good :>

[09:57] <mornfall> that'd be the on_changed function in src/io/filewatchers.c in moar

[10:00] <Woodi> mornfall: do you try Perl6 grammars already ? I'm interested in your usability evaluation :)

[10:00] * Woodi </cynic mode> :)

[10:00] <mornfall> not yet, but i'll get to that

[10:01] *** jjmerelo left
[10:02] <mornfall> moar has a newer libuv bundled than my system, but when i use that the moar binary just dies of SIGTRAP very quickly, in MVM_frame_try_return

[10:08] <mornfall> okay those two problems are unrelated

[10:08] <mornfall> all new builds of moar SIGTRAP for me :\

[10:08] <Woodi> mornfall: you are on OpenBSD ? do you run nqp tests ?

[10:08] <mornfall> yes, openbsd

[10:08] <mornfall> currently i can no longer build moar after i updated to 6.4, presumably due to compiler changes

[10:13] <Woodi> hmm, Moar do a lot of asm code generation... I remember prediction from some time ago that OpenBSD will not be jit friendly... but no details in memory...

[10:15] <mornfall> yes, JIT broke between 6.3 and 6.4

[10:15] <mornfall> (openbsd, that is)

[10:17] <mornfall> oh god.

[10:17] <mornfall> timotimo: you know what? i hit that double free in MVM_platform_cpu_count again, in a completely different way :p

[10:18] <Woodi> OpenBSD disabled hyper-threading ?

[10:19] <mornfall> by default, yes

[10:23] <mornfall> how interdepedent moar, nqp and rakudo are?

[10:24] <mornfall> everything fell apart :( i guess i have to rebuild nqp with the new moar?

[10:24] <mornfall> Bytecode validation error at offset 604, instruction 95:

[10:24] <mornfall> branch targets offset 552 within instruction 86

[10:24] <mornfall> okay nope

[10:24] <mornfall> moar is just busted

[10:25] <Woodi> separate code repositories/projects :)  but they are rather depended on each other...  

[10:26] <mornfall> okay i apparently ended up on some god-forsaken branch of moarvm (i just used the commitid timotimo mentioned as fixing the double free)

[10:26] <mornfall> cherry-picked that into master, let's see how that goes

[10:28] *** rindolf left
[10:29] <mornfall> so the jitter destroys a retguard cookie \o/

[10:34] <mornfall> i don't think that should actually be happening btw

[10:34] <mornfall> anyway, disabling retguard gives me back perl6 that can jit

[10:35] <mornfall> so i'm where i started, libuv is sending null pointers for filenames because why not but at least i can run stuff

[10:35] <mornfall> the double free seems to be gone, so there's that

[10:42] *** rindolf joined
[10:43] *** nige joined
[10:43] *** p6bannerbot sets mode: +v rindolf

[10:44] *** p6bannerbot sets mode: +v nige

[10:47] *** jjmerelo joined
[10:47] *** p6bannerbot sets mode: +v jjmerelo

[10:55] *** lucasb joined
[10:55] *** p6bannerbot sets mode: +v lucasb

[10:56] *** nige left
[10:56] *** nige joined
[10:57] *** p6bannerbot sets mode: +v nige

[11:02] <mornfall> are you kidding me /o\ ... libuv has bloody syscall numbers in it? http://sprunge.us/LDGUVv

[11:09] *** nige left
[11:09] *** nige_ joined
[11:10] *** p6bannerbot sets mode: +v nige_

[11:37] <Geth> ¦ Pod-To-HTML: 5b4e4d326c | (JJ Merelo)++ | 3 files

[11:37] <Geth> ¦ Pod-To-HTML: Changes template to non-URI-encode headers

[11:37] <Geth> ¦ Pod-To-HTML: 

[11:37] <Geth> ¦ Pod-To-HTML: And also adds tests for it; changes main template too. Closes #50

[11:37] <Geth> ¦ Pod-To-HTML: review: https://github.com/perl6/Pod-To-HTML/commit/5b4e4d326c

[11:37] <Geth> ¦ Pod-To-HTML: 340b36bc4f | (JJ Merelo)++ | META6.json

[11:37] <Geth> ¦ Pod-To-HTML: Bumps up to 0.4.0

[11:37] <Geth> ¦ Pod-To-HTML: 

[11:37] <Geth> ¦ Pod-To-HTML: It should have probably beem bumped before, but the fact that it now uses templates and changes interface merits a new minor, at least.

[11:37] <Geth> ¦ Pod-To-HTML: review: https://github.com/perl6/Pod-To-HTML/commit/340b36bc4f

[11:45] *** kensanata joined
[11:45] *** p6bannerbot sets mode: +v kensanata

[11:50] *** pmurias left
[11:52] *** pmurias joined
[11:52] *** p6bannerbot sets mode: +v pmurias

[11:54] <mornfall> *sigh* creating a pull request for one patch is a 5 minute enterprise with git(hub) :\

[11:54] <mornfall> create a branch (figure out how to do that), cherry-pick the patch, push the new branch to the fork, hub pull-request

[11:58] *** Actualeyes left
[11:58] <timotimo> you can do it way easier than that

[11:58] *** pmurias left
[11:58] <Woodi> sending patches by email had some clarity in it ;) 

[11:58] <mornfall> timotimo: hmm, how?

[11:58] *** pmurias joined
[11:58] *** p6bannerbot sets mode: +v pmurias

[11:59] <mornfall> just doing a pull request off master wanted to include an earlier patch (which makes sense)

[11:59] <mornfall> which wasn't merged yet

[11:59] <timotimo> find the file on github, click the "pencil" icon, change the code in the on-line editor or just copy-paste your edited code in, enter a commit message and description, then enter pull request text 

[11:59] <Geth> ¦ doc: c14b44c58f | (JJ Merelo)++ | META6.json

[11:59] <Geth> ¦ doc: Upgrades Pod::To::HTML to make definition lists work.

[11:59] <Geth> ¦ doc: 

[11:59] <Geth> ¦ doc: Actually, upgrades to 0.4.0 since that fixed Pod-To-HTML#50. Closes #2503

[11:59] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c14b44c58f

[11:59] *** pmurias left
[11:59] <mornfall> that involves a lot of clicking :\

[11:59] <timotimo> hah

[11:59] <timotimo> anyway, hub also has a fork subcommand

[11:59] <mornfall> probably would take longer than mucking around with branches

[11:59] <mornfall> yes, i already own a fork

[12:00] <mornfall> the first pull-request was a lot easier

[12:00] <timotimo> but yeah, if you've never gitted, it's not trivial

[12:00] <mornfall> because i could just do it off master

[12:00] <mornfall> (and if it was merged, i could have just rebased master and re-use that, presumably)

[12:00] <mornfall> making branches in git is kinda expensive

[12:01] <timotimo> you think?

[12:02] <Woodi> it's improvement from CVS :)

[12:02] <timotimo> branches are one of the cheapest things git has to offer :)

[12:03] *** pmurias joined
[12:03] *** p6bannerbot sets mode: +v pmurias

[12:05] <timotimo> it's implemented literally as a file in the right place with a sha1 in it, plus optionally (but usually) a piece of config that tells git where you want it pushed to and pulled from by default

[12:05] <mornfall> it's kinda funny how i can cherry-pick what to commit 'for free' (commit -p) but i can't make a cherry-picked branch in one go like that

[12:06] <timotimo> you can, but it's a scary incantation :D

[12:06] <timotimo> git rebase --onto master next topic

[12:06] <timotimo> where next is the branch or commit sha1 that has the initial change, and topic has the changes you want on top of next

[12:06] <mornfall> i know how git is implemented :p i wrote a git-fast-{import,export} parser/serializer in haskell at one point

[12:07] <timotimo> OK

[12:07] <mornfall> okay, didn't know rebase can create branches

[12:07] <timotimo> in my experience learning about how a git repo looks on the inside helped me grok git a lot better, but of course if you don't use git you wouldn't know where to look

[12:08] *** aindilis left
[12:08] <mornfall> i have a pretty good idea how it works under the hood, though the github-specific parts not so much

[12:08] <mornfall> it's the user interface that gets me every time :\

[12:08] *** aindilis joined
[12:08] <timotimo> the separation is much closer towards github than you perhaps realize

[12:08] *** pecastro joined
[12:09] *** jw358 joined
[12:09] *** p6bannerbot sets mode: +v jw358

[12:09] *** p6bannerbot sets mode: +v aindilis

[12:09] <mornfall> yeah, it's mostly just metadata

[12:09] <mornfall> but 'just metadata' can be a lot of stuff

[12:09] <timotimo> yeah, the user interface is not quite well structured

[12:09] *** p6bannerbot sets mode: +v pecastro

[12:10] <mornfall> timotimo: i don't think your rebase command works in my git?

[12:10] <mornfall> says no such branch/commit topic

[12:10] <timotimo> well, yeah, you need to put the right name in there

[12:11] <timotimo> in your case, HEAD will probably be correct

[12:11] <mornfall> if i have to create the branch by hand, it's not better than cherry-pick

[12:11] <timotimo> you do not

[12:11] <timotimo> hm

[12:11] <timotimo> though it might complain that it doesn't have a name for the new thing in that case

[12:11] <mornfall> but 'topic' is supposed to be the new branch?

[12:11] <timotimo> no, topic is the branch that will be replaced

[12:11] <mornfall> i work on master, since i want to actually use the resulting thing

[12:12] <timotimo> in that case your master is topic and my master is origin/master

[12:12] <mornfall> so when i have multiple patches i want all of them to build, but for the sake of upstream, i also want to separate out the changes

[12:13] *** aindilis left
[12:14] <timotimo> i'm not sure that workflow is very well supported

[12:14] <timotimo> but a shell alias shouldn't be too hard to make

[12:15] <mornfall> hmm, i can't figure out the correct rebase command... i managed to erase the commit though \o/ :p

[12:15] * mornfall cherry-picks it back from the topic branch

[12:15] <timotimo> hah

[12:15] <timotimo> you can always get your old stuff back with "git reflog"

[12:15] <mornfall> i think i stick to cherry-pick, that's at least safe-ish

[12:15] <mornfall> rebase i use for normal rebase stuff

[12:16] <mornfall> (i have diverged and want to put my commits on top of current upstream)

[12:16] <mornfall> (i think that works quite well, at least in my experience)

[12:16] <mornfall> (unless the divergence becomes large, then it starts to flake)

[12:17] <mornfall> (had to maintain a divergent branch for many months and rebase it regularly, it was getting painful... that was at old job though, good riddance :p)

[12:19] *** Manifest0 left
[12:21] <mornfall> apart from the crummy commandline interface, my main pet peeve with git is that branches are its go-to hammer; i know they are cheap implementation-wise, but they are not cheap for a human to keep track of...

[12:22] <mornfall> but enough of that, the pull request is done, i want to forget all about it :p

[12:23] <timotimo> that's fair

[12:25] <mornfall> i would improve the docs but i'm confused as to where they live?

[12:25] <mornfall> src/core/IO/Notification.pm6 has the implementation

[12:25] <mornfall> but there's no pod in there, even though p6doc shows me the docs for it

[12:25] <timotimo> there's a repo "perl6/docs" i think? docs.perl6.org has a link to it on every non-generated page

[12:26] <mornfall> oh the docs live in another repo? :(

[12:27] <mornfall> is that because those classes are part of the language instead of part of the stdlib?

[12:27] <timotimo> yes

[12:28] <timotimo> hm, i suppose?

[12:28] <mornfall> or is the stdlib a spec also, and rakudo just tries to implement that?

[12:28] <timotimo> language/compiler/stdlib is a rather muddy definition, IMO

[12:28] <mornfall> (that would explain differences in behaviour from the docs, at least)

[12:29] <mornfall> but it seems odd, this ties all the way into libuv behaviour

[12:29] <timotimo> perl6 is specified by the test suite, and that has stuff for all those classes

[12:29] <mornfall> or rather into the kernel if you will

[12:29] <timotimo> file system notifications are absolute and utter garbage :)

[12:29] <timotimo> especially when you look at it from a cross-platform perspective

[12:30] <mornfall> great :p

[12:30] <mornfall> yes, i noticed it's just 4 layers of wrapers around kevent :p

[12:30] <mornfall> on openbsd anyway, it's probably 4 layers of wrappers around inotify on linux

[12:30] <timotimo> i don't think i want to look :D

[12:30] <mornfall> none of them appear to make any attempt at unifying behaviour across platforms

[12:31] <timotimo> i think on at least one platform - could be linux - you actually need one fd for every file or directory you're monitoring, so have fun with directory trees i guess

[12:31] <mornfall> let me see, there's libuv which wraps kevent/inotify, then there's MVM_op_watchfile, then nqp::watchfile then IO::Notify?

[12:31] <timotimo> MVM_op_watchfile is most probably 1:1 equivalent with nqp::watchfile

[12:31] <mornfall> yes that's normal, it's like that on all (?) platforms re descriptors

[12:32] <mornfall> maybe OSX has something different, there's a special fsevents blob of code in libuv for OSX

[12:32] <mornfall> pardon me, macOS :p

[12:34] <mornfall> you are right, it seems the thing passes right through nqp on moar and throws an exception on jvm :)

[12:34] *** coet joined
[12:34] *** p6bannerbot sets mode: +v coet

[12:35] <mornfall> anyway i think i can make it work, we'll see

[12:35] <timotimo> a very big portion of nqp::blah maps 1:1 to MVM_OP_*

[12:35] <timotimo> some have a little bit of extra code in the compiler

[12:36] <mornfall> yeah when i noticed there's an MVM_OP_ for it, i went straight there to check what is coming out of libuv... but i wouldn't want to write a VM for rakudo to run on :P the opcode list is awfully long

[12:37] <timotimo> more and more of those ops are for optimization purposes :)

[12:37] *** pmurias left
[12:37] <Kaiepi> morning

[12:37] <timotimo> everything starting with sp_ only ever gets emitted by the specializer, and some of those are copies of other ops that don't do checks etc

[12:37] <Woodi> all that becouse nqp is our "abstract" layer, it allows eg. backends in Java and Java Script. everything below nqp probably should be invisible to not-devs

[12:37] *** pmurias joined
[12:37] *** p6bannerbot sets mode: +v pmurias

[12:38] <mornfall> Woodi: abstractions leak

[12:38] <mornfall> like the libuv stuff :-)

[12:38] <mornfall> some leak less, some leak more

[12:38] <Woodi> that's not leak, it's realy good wrapped :)

[12:38] <mornfall> but apart from a tiny subset, all abstractions leak

[12:38] <Kaiepi> i've ran into several issues with libuv on openbsd

[12:39] <Kaiepi> not as bad as node's though

[12:39] <mornfall> libuv *is* node?

[12:39] <Kaiepi> yeah

[12:39] <timotimo> we'd have a very, very hard time not making the filesystem watcher abstraction leak ... we'd probably have to offer kernel modules for all OSes we target :)

[12:40] <Kaiepi> the only problems i've encountered with the jvm is how unbearably long it takes to build

[12:41] <Kaiepi> haven't tested the js vm yet, but i should since node's the language i'm second most experienced in

[12:42] <Geth> ¦ Pod-To-HTML: 901c9b8513 | (JJ Merelo)++ | 5 files

[12:42] <Geth> ¦ Pod-To-HTML: Improves documentation a bit by adding examples refs #49

[12:42] <Geth> ¦ Pod-To-HTML: review: https://github.com/perl6/Pod-To-HTML/commit/901c9b8513

[12:42] <Geth> ¦ Pod-To-HTML: f5ea68c2bb | (JJ Merelo)++ | 4 files

[12:42] <Geth> ¦ Pod-To-HTML: Adds pointer in README.md

[12:42] <Geth> ¦ Pod-To-HTML: 

[12:42] <Geth> ¦ Pod-To-HTML: And removes example to the former examples dir to the new one. Refs #49

[12:42] <Geth> ¦ Pod-To-HTML: review: https://github.com/perl6/Pod-To-HTML/commit/f5ea68c2bb

[12:42] *** Manifest0 joined
[12:43] <mornfall> timotimo: it doesn't have to leak nearly as much though... at least within the unix family, it should all mostly work with libuv, you'd just have to forget about the pathname attribute

[12:43] *** p6bannerbot sets mode: +v Manifest0

[12:44] <mornfall> the fact that inotify will lose events if there are too many is harder to hide, i guess

[12:44] <mornfall> i don't know how kevent handles that situation

[12:46] <mornfall> basically the abstraction that i think would be available mostly everywhere is 'this directory changed, go figure it out' and 'this file was modified, go figure it out'

[12:46] <mornfall> the specific types of changes are a lot more variable, as is the extra data available with them

[12:46] *** xlat joined
[12:46] *** p6bannerbot sets mode: +v xlat

[12:46] *** pmurias left
[12:46] <mornfall> (for directory changes, inotify on linux sends the name of the file that appeared/disappeared, but kevent does not, or if it does, libuv throws that away)

[12:48] *** pmurias joined
[12:48] *** p6bannerbot sets mode: +v pmurias

[12:48] *** pmurias left
[12:49] <Kaiepi> i need to look through libuv's source code at some point

[12:49] <Kaiepi> i feel a bit out of my depth with this convo lo

[12:49] <Kaiepi> *lol

[12:51] *** literal joined
[12:52] <mornfall> okay even if kqueue doesn't lose events, libuv does \o/

[12:52] *** p6bannerbot sets mode: +v literal

[12:52] <mornfall> it operates filesystem kevents in one-shot mode and puts them back after they fire (creating a race window)

[12:54] <mornfall> i also made the mistake of using --prefix ~/prog/rakudo and now i have a directory called '~' :\

[12:54] <mornfall> (on linux, i wanted to check how IO::Notification behaves there)

[12:55] <mornfall> rm -rf ~ sounds like a great way to get rid of that dir :p

[12:56] <mornfall> anyway, i need to go for a walk before i go crazy... sorry that i use this place as a rubber duck, i hope you folks don't mind too much

[12:56] <lucasb> in '--prefix ~/prog/rakudo' the shell should have expanded that tilde, no?

[12:57] <lucasb> if you wrote '--prefix=~/prog/rakudo', then no :)

[12:58] <mornfall> yes of course you are right (isn't the = required? i don't know)

[12:59] <mornfall> i usually say $HOME when talking to configure scripts, i just slipped

[12:59] <lucasb> yeah, it may be required, idk. me too uses --foo="$HOME/..."

[13:08] *** pmurias joined
[13:08] *** p6bannerbot sets mode: +v pmurias

[13:11] <Kaiepi> that reminds me

[13:11] <Kaiepi> i was never able to get $HOME to work properly when using config.default

[13:12] <ufobat_> is there a way to get the %?RESOURCES of a nother name that you know by callframe?

[13:12] <ufobat_> s/name/module/

[13:13] <Kaiepi> %?RESOURCES?

[13:14] <tbrowder> \o #perl6

[13:14] <yoleaux> 08:26Z <jjmerelo> tbrowder: thanks.

[13:14] <ufobat_> it would be most likly different module, not that one i am currently in?

[13:15] <timotimo> m: .name.say for $*REPO.^methods

[13:15] <camelia> rakudo-moar dd0301454: OUTPUT: «BUILD␤writeable-path␤can-install␤name␤upgrade-repository␤install␤uninstall␤script␤files␤resolve␤need␤resource␤id␤short-id␤loaded␤distribution␤installed␤precomp-store␤precomp-repository␤repo-chain␤load␤path-spe…»

[13:15] <pmurias> Kaiepi: I'm afraid rakudo on js takes longer to build then on the jvm :(

[13:16] <timotimo> e: .name.say for $*REPO.resolve("JSON::Fast")

[13:16] <evalable6> timotimo, rakudo-moar dd0301454: OUTPUT: «(exit code 1) Type check failed in binding to parameter '$spec'; expected CompUnit::DependencySpecification but got Str ("JSON::Fast")␤  in block <unit> at /tmp/zzf0tFTaeq line 1␤␤»

[13:16] <timotimo> oops

[13:16] <timotimo> well, something in that general direction

[13:16] <lucasb> Haskell to Perl 6 doc page mentioned in the news... :)

[13:16] <Kaiepi> pmurias it's also even more annoying because node likes to try to use the really old version of gcc that comes with openbsd to build cpp code

[13:17] *** kensanata left
[13:18] <Kaiepi> CC=egcc CPP=eg++ CXX=ec++ npm install

[13:19] <tbrowder> being slow, i’m starting to work on my 2019 advent post and need some help from santa’s elves. what i need immediately is to vote on a choice of names from a list. if you are willing to do that AND keep it secret, please message me privately

[13:20] *** pmurias left
[13:20] <lucasb> tbrowder: let's setup a private mailing list for all authors?

[13:20] <ufobat_> timotimo, but the information i need for the https://github.com/rakudo/rakudo/blob/master/src/core/CompUnit/DependencySpecification.pm6 are not obtainable from the CallFrame, are they?

[13:20] <timotimo> hm, probably not

[13:20] <timotimo> have you tried if you can access %?RESOURCES literally through the callframe?

[13:20] *** pmurias joined
[13:20] *** p6bannerbot sets mode: +v pmurias

[13:21] <ufobat_> not yet

[13:22] <tbrowder> lucasb: but that wouldn’t solve my immediate problem since discussion would be shared with the group. as someone pointed out recently, the p6 group is quite small.

[13:22] <Kaiepi> OH

[13:22] <Kaiepi> i completely forgot what %?RESOURCES was

[13:22] <Kaiepi> lmao

[13:23] <Kaiepi> m: say %?RESOURCES.^methods

[13:23] <camelia> rakudo-moar dd0301454: OUTPUT: «(new Numeric Str sink AT-POS AT-KEY BIND-POS BIND-KEY ASSIGN-POS ASSIGN-KEY STORE push append unshift prepend FALLBACK ords chrs chop chomp iterator Set SetHash Bag BagHash Mix MixHash gist)␤»

[13:24] <ufobat_> timotimo, i dont know how, because CallFrame.my is for the lexical scoped ones

[13:25] <ufobat_> i am actually just toying around in order to figure out a way to access %?RESOURCES of some $module, in order to provide this functionality as a module ;)

[13:26] <jjmerelo> tbrowder: I can help you with whatever

[13:26] *** Kaiepi left
[13:27] *** Kaiepi joined
[13:28] *** p6bannerbot sets mode: +v Kaiepi

[13:30] <tbrowder> jmerelo: thanks! i’ll email you soon

[13:32] <Kaiepi> m: %?RESOURCES.BIND_KEY('test', anon sub { %?RESOURCES.new }); %?RESOURCES<test>()

[13:32] <camelia> rakudo-moar dd0301454: OUTPUT: «Cannot find method 'Nil' on object of type List␤  in block <unit> at <tmp> line 1␤␤»

[13:33] <Kaiepi> m: say %?RESOURCES.WHAT

[13:33] <camelia> rakudo-moar dd0301454: OUTPUT: «Nil␤»

[13:35] <Kaiepi> m: %?RESOURCES .= new: foo => { &die = &say }(); say %?RESOURCES

[13:35] <camelia> rakudo-moar dd0301454: OUTPUT: «Cannot modify an immutable Sub (&die)␤  in block <unit> at <tmp> line 1␤␤»

[13:35] <Kaiepi> m: %?RESOURCES .= new: foo => { &die := &say }(); say %?RESOURCES

[13:35] <camelia> rakudo-moar dd0301454: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use bind operator with this left-hand side␤at <tmp>:1␤------> 3RESOURCES .= new: foo => { &die := &say 7⏏5}(); say %?RESOURCES␤»

[13:35] <timotimo> that'll have to be => or have a -> in front

[13:35] <timotimo> er, what are you trying to do?

[13:37] <Kaiepi> that was a pretty bad attempt, but i was trying to see how i could construct new instances of %?RESOURCES

[13:37] <Kaiepi> i should just read the source code

[13:37] <timotimo> %?RESOURCES is just a Hash i believe

[13:48] *** pmurias left
[13:54] *** kurahaupo joined
[13:55] *** p6bannerbot sets mode: +v kurahaupo

[13:59] *** pmurias joined
[14:00] *** p6bannerbot sets mode: +v pmurias

[14:02] <Kaiepi> m: $*VM.platform-library-name('ssl'.IO)

[14:02] <camelia> rakudo-moar dd0301454: ( no output )

[14:02] <Kaiepi> m: say $*VM.platform-library-name('ssl'.IO)

[14:02] <camelia> rakudo-moar dd0301454: OUTPUT: «"libssl.so".IO␤»

[14:03] <Kaiepi> m: say qx[stat /usr/lib/libssl.so]

[14:03] <camelia> rakudo-moar dd0301454: OUTPUT: «stat: cannot stat '/usr/lib/libssl.so': No such file or directory␤␤»

[14:04] <Kaiepi> m: say qx[ldconfig -r | grep libssl]

[14:04] <camelia> rakudo-moar dd0301454: OUTPUT: «ldconfig: option requires an argument -- 'r'␤Try `ldconfig --help' or `ldconfig --usage' for more information.␤␤»

[14:04] <Kaiepi> odd

[14:04] <mornfall> weird, installing rakudo-star 2018.10 on linux gets me Aborting due to test failure: zef:ver<0.5.3>:auth<github:ugexe>:api<0> (use --force-test to override)

[14:04] <timotimo> i thought camelia uses the restricted setting ...

[14:05] <Kaiepi> anyway my question is i have three different versions of libssl on my system

[14:05] <mornfall> that's about as much detail as it gives me

[14:05] <Kaiepi> how does perl decide which version to pick?

[14:05] <timotimo> unless you give it some stuff in the dependency spec, it'll take the newest, or complain when there's ambiguity

[14:06] <mornfall> Kaiepi: the right fix for that is to use the base c++ (which is clang 6 at this point), re openbsd g++

[14:07] <Kaiepi> right fix for what?

[14:08] <Kaiepi> oh building the js vm?

[14:08] <mornfall> Kaiepi: +Kaiepi | CC=egcc CPP=eg++ CXX=ec++ npm install

[14:08] <mornfall> eg++ is gcc 4.9 or something, pretty ancient too

[14:08] <Kaiepi> ah

[14:09] *** kerframil joined
[14:09] *** p6bannerbot sets mode: +v kerframil

[14:09] *** jjmerelo left
[14:09] <mornfall> i don't think node runs on any platforms that still use gcc in base

[14:24] *** rfold joined
[14:24] *** p6bannerbot sets mode: +v rfold

[14:29] <pmurias> Kaiepi: what ops do you want to implement on node.js?

[14:30] *** lizmat left
[14:30] <Kaiepi> i'm not sure, i haven't taken a very good look at it

[14:30] <Kaiepi> one thing that really irks me though is how exports are handled

[14:31] <Kaiepi> iirc it's most optimal to export everything in a module as one object with module.exports instead of using exports, which is what node core does

[14:42] *** Kaiepi left
[14:43] *** Kaiepi joined
[14:44] *** p6bannerbot sets mode: +v Kaiepi

[14:46] *** kurahaupo left
[14:47] *** kurahaupo joined
[14:48] *** p6bannerbot sets mode: +v kurahaupo

[14:48] *** Kaiepi left
[14:48] *** Kaiepi joined
[14:49] *** p6bannerbot sets mode: +v Kaiepi

[14:59] <Kaiepi> m: anon sub { say 1 }

[14:59] <camelia> rakudo-moar dd0301454: OUTPUT: «WARNINGS for <tmp>:␤Useless use of anonymous sub, did you forget to provide a name? (line 1)␤»

[14:59] <Kaiepi> what does anon do?

[14:59] <Kaiepi> m: do anon sub { say 1 }

[14:59] <camelia> rakudo-moar dd0301454: ( no output )

[15:00] <Kaiepi> m: anon sub { say 1 }()

[15:00] <camelia> rakudo-moar dd0301454: OUTPUT: «1␤»

[15:18] *** lizmat joined
[15:18] *** p6bannerbot sets mode: +v lizmat

[15:19] <dogbert17> .seen moritz

[15:19] <yoleaux> I saw moritz 08:33Z in #perl6: <moritz> jjmerelo: done

[15:25] *** vike left
[15:29] *** kurahaupo left
[15:29] <mornfall> can i react to a dynamically changing supply?

[15:29] *** kurahaupo joined
[15:30] <mornfall> i'm playing with the IO notifications

[15:30] <mornfall> but i would like to add and remove files as they come/go

[15:30] <mornfall> the problem is mainly stop watching when things disappear

[15:30] *** p6bannerbot sets mode: +v kurahaupo

[15:30] <mornfall> i think .merge on a supply kinda does what i want, but there is no unmerge?

[15:31] <mornfall> the expression in whenever only seems to be evaluated once, so doing react whenever $watch and then replacing $watch does nothing

[15:32] <mornfall> maybe i could forcibly quit watches... hmm

[15:32] *** vike joined
[15:33] *** p6bannerbot sets mode: +v vike

[15:33] <mornfall> maybe not, doesn't seem to be possible to do that without the supplier

[15:34] <mornfall> okay migrate might be the one

[15:36] <mornfall> though that has builtin data races :(

[15:36] *** Kaiepi left
[15:37] *** Kaiepi joined
[15:38] *** p6bannerbot sets mode: +v Kaiepi

[15:44] <b2gills> You could create a merged supply with the `supply` block which is exactly the same as a `react` block, except that it intercepts `emit` messages

[15:44] <mornfall> yeah i thought about that

[15:44] <mornfall> but that's not going to cut it either, i think

[15:44] <mornfall> it's all a little complicated

[15:46] <b2gills> m: my $supply = supply { whenever Supply.interval(1) { .emit; last when (2) }; }; react whenever $supply { .say }

[15:46] <camelia> rakudo-moar dd0301454: OUTPUT: «0␤===SORRY!===␤1␤2␤last without loop construct␤»

[15:46] *** aindilis joined
[15:46] <mornfall> yes, that's going to be a building block, but i'll have to wrap this up in a class

[15:47] *** p6bannerbot sets mode: +v aindilis

[15:47] <mornfall> method Supply() would be somewhat idiomatic, right?

[15:48] <b2gills> m: say (1,2,3).Supply

[15:48] <camelia> rakudo-moar dd0301454: OUTPUT: «Supply.new␤»

[15:48] <mornfall> m: (1,2).Supply.tap( { .say } )

[15:48] <camelia> rakudo-moar dd0301454: OUTPUT: «1␤2␤»

[15:49] <b2gills> The way we generally do type coercions is with a method of that name

[15:49] <b2gills> m: say (1,2,3).Capture

[15:49] <camelia> rakudo-moar dd0301454: OUTPUT: «\(1, 2, 3)␤»

[15:52] <b2gills> m: class Foo { method Str () { say 'Str method called' }}; ~Foo

[15:52] <camelia> rakudo-moar dd0301454: OUTPUT: «Str method called␤WARNINGS for <tmp>:␤Useless use of "~" in expression "~Foo" in sink context (line 1)␤»

[15:54] *** kurahaupo left
[15:54] *** kurahaupo joined
[15:54] *** kurahaupo left
[15:54] *** kurahaupo joined
[15:55] *** p6bannerbot sets mode: +v kurahaupo

[15:57] <lucasb> do you think would make sense to have recursive coercion types? like Foo(Bar(Baz)) :)

[15:58] <lucasb> sub f(Foo(Bar(Baz)) $x) {...} would coerce the Baz argument with the methods 'my Foo $x = arg.Bar.Foo'

[15:58] *** kurahaupo left
[15:58] *** kurahaupo joined
[15:59] *** p6bannerbot sets mode: +v kurahaupo

[16:14] *** kurahaupo left
[16:15] *** kurahaupo joined
[16:16] *** p6bannerbot sets mode: +v kurahaupo

[16:18] <Geth> ¦ doc: uzluisf++ created pull request #2504: Whitespace and minor improvements

[16:18] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2504

[16:24] *** uzl joined
[16:25] *** p6bannerbot sets mode: +v uzl

[16:26] <timotimo> prevents the sub from being installed in the lexical pad

[16:27] *** _uzl joined
[16:28] *** p6bannerbot sets mode: +v _uzl

[16:29] *** __uzl joined
[16:29] *** __uzl left
[16:29] *** _uzl left
[16:29] *** uzl left
[16:30] *** rindolf left
[16:31] <lucasb> A minor doc detail, I see 2 styles with regard spacing after period: put one or two spaces after it, "EOL. BOL" vs "EOL.  BOL". Should the docs follow one style or another? Is this testable?

[16:31] *** uzl joined
[16:31] <lucasb> I mean, I accept both styles, I'm fine. I don't see as relevant removing extra spaces after periods, IMO.

[16:32] *** p6bannerbot sets mode: +v uzl

[16:35] <uzl> weekly: Haskell to Perl 6 -> https://news.ycombinator.com/item?id=18625749

[16:35] <notable6> uzl, Noted!

[16:40] *** domidumont left
[16:57] <mornfall> the supply block won't fix my problems

[16:57] <mornfall> can i add 'is Supply' on a class and emit stuff that way?

[16:57] <mornfall> hm

[16:57] <mornfall> or rather is Supplier?

[16:59] *** _uzl joined
[16:59] *** uzl left
[16:59] *** _uzl left
[17:00] <Kaiepi> uhhh

[17:00] <Kaiepi> zef just nuked half my packages and a good chunk of the project i was working on

[17:01] <timotimo> whoa, how did it do that?

[17:01] <Kaiepi> i don't know

[17:02] <timotimo> like, it really shouldn't do that :D

[17:02] <Kaiepi> i was pretty well spamming zef install . --force-install because i was having issues fixing a minor bug when it happened

[17:02] <Kaiepi> ik i can do perl6 -Ilib, not sure why i wasn't doing it

[17:03] <timotimo> yeah but still, how did that nuke things? :o

[17:04] *** Ven`` joined
[17:04] <Kaiepi> i don't know

[17:05] *** p6bannerbot sets mode: +v Ven``

[17:05] <mornfall> the filesystem gave up :p

[17:05] <mornfall> (i'm only like 90% joking)

[17:06] <mornfall> it's not nfs is it?

[17:06] <timotimo> like, the place where it installs stuff is meant to be immutable

[17:06] <timotimo> so if it just overwrote something with an older version or so, it'll still be there

[17:06] <mornfall> yeah, looks pretty hash-y to me

[17:06] <mornfall> would need to be a major screwup for things to actually disappear

[17:09] <mornfall> oh! the supply block doesn't need to have whenevers in it

[17:09] <mornfall> is it a while loop by itself?

[17:09] <mornfall> i mean, is supply just an async forever { ... }?

[17:10] <timotimo> supply without whenever needs at least emit to do anything :)

[17:10] * mornfall reads the concurrency page once again

[17:10] <timotimo> and it will only do something once it's tapped

[17:10] <mornfall> sure, that's fine

[17:10] <mornfall> my problem is that whenever is too strict

[17:10] <timotimo> strict how?

[17:10] <mornfall> (in the sense that the whenever guard is evaluated too eagerly for my purposes)

[17:12] <timotimo> what do you mean by "whenever guard"?

[17:12] *** cibs left
[17:12] <mornfall> whenever foo() only calls foo() once

[17:12] <timotimo> yes

[17:12] <mornfall> it is not re-evaluated after firing

[17:12] <timotimo> it's meant to get a supply

[17:12] <mornfall> which means that i can't swap the supply

[17:12] <timotimo> or a promise

[17:12] <timotimo> in that case, just have:

[17:13] <timotimo> sub subscribe-foo { whenever foo { do-the-thing; subscribe-foo } } inside your supply block

[17:13] <mornfall> hmm! tail recursion is optimized away?

[17:14] *** cibs joined
[17:14] *** rindolf joined
[17:14] <timotimo> not quite

[17:14] *** p6bannerbot sets mode: +v cibs

[17:14] <timotimo> whenever is asynchronous. there is not actually a call stack involved there

[17:15] <mornfall> m: Supply.zip( supply { emit 1; }, Supply.from-list( 1, 2, 3 ) ).tap( { .say } )

[17:15] <camelia> rakudo-moar dd0301454: OUTPUT: «(1 1)␤»

[17:15] *** p6bannerbot sets mode: +v rindolf

[17:15] <mornfall> m: Supply.zip( supply { sub e { emit 1; e } }, Supply.from-list( 1, 2, 3 ) ).tap( { .say } )

[17:15] <camelia> rakudo-moar dd0301454: ( no output )

[17:15] <mornfall> m: Supply.zip( supply { sub e { emit 1; e }; e }, Supply.from-list( 1, 2, 3 ) ).tap( { .say } )

[17:15] <camelia> rakudo-moar dd0301454: ( no output )

[17:15] <mornfall> nvm, i'll figure it out

[17:15] <mornfall> sub inside the supply you say

[17:16] <mornfall> oh i need whenever inside the sub

[17:16] *** silug left
[17:16] <timotimo> oh, that too

[17:17] <timotimo> hm

[17:24] *** Ven`` left
[17:28] *** silug joined
[17:29] *** p6bannerbot sets mode: +v silug

[17:30] *** kurahaupo left
[17:33] *** kurahaupo joined
[17:33] *** Khisanth left
[17:34] *** p6bannerbot sets mode: +v kurahaupo

[17:38] <Kaiepi> ok i lost the test module

[17:38] <Kaiepi> how do i install it again?

[17:38] <timotimo> that comes from rakudo itself

[17:38] <timotimo> so just "make install" in rakudo again

[17:39] <Kaiepi> i tried rebuilding rakudo and it still isn't available

[17:39] <timotimo> wrong --prefix maybe?

[17:40] <Kaiepi> wait i think i'm missing something from my $PATH

[17:40] *** jw358 left
[17:42] <Kaiepi> no, that wasn't it

[17:42] <Kaiepi> i'll try rebuilding rakudo again since i forgot to configure it beforehand from when i was testing stuff

[17:44] <Geth> ¦ doc: e4d0c13db7 | (Luis F. Uceta)++ | doc/Language/py-nutshell.pod6

[17:44] <Geth> ¦ doc: Whitespace and minor improvements

[17:44] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e4d0c13db7

[17:44] <Geth> ¦ doc: 88b116e8d5 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Language/py-nutshell.pod6

[17:44] <Geth> ¦ doc: Merge pull request #2504 from uzluisf/master

[17:44] <Geth> ¦ doc: 

[17:44] <Geth> ¦ doc: Whitespace and minor improvements. Refs #2354

[17:44] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/88b116e8d5

[17:47] *** Khisanth joined
[17:48] *** p6bannerbot sets mode: +v Khisanth

[17:49] <mornfall> timotimo: i don't think your trick quite works... the old whenever's remain active?

[17:50] <timotimo> yes

[17:50] <timotimo> unless you "last" them

[17:51] *** Kaiepi left
[17:51] <mornfall> do you mean done? says here using 'last' is an error

[17:51] <mornfall> or maybe it's last in supply but done in react

[17:51] <timotimo> oh, i thought done would finish the supply rather than the whenever

[17:52] <mornfall> you mean last inside the whenever block?

[17:52] <mornfall> but the whenever block doesn't know it's getting obsolete :\

[17:52] <timotimo> m: react { whenever Supply.interval(0.1) { .say; last if $_ > 4 } }

[17:52] <camelia> rakudo-moar dd0301454: OUTPUT: «0␤===SORRY!===␤1␤2␤3␤4␤5␤last without loop construct␤»

[17:52] <timotimo> m: react { whenever Supply.interval(0.1) { .say; done if $_ > 4 } }

[17:52] <camelia> rakudo-moar dd0301454: OUTPUT: «0␤1␤2␤3␤4␤5␤»

[17:52] <mornfall> either way says ... exactly that

[17:53] *** Ven`` joined
[17:53] <timotimo> m: react { whenever Supply.interval(0.1) { .say; done if $_ > 4 }; whenever Supply.interval(0.2) { say $_ xx 2; done if $_ > 4 } }

[17:53] <camelia> rakudo-moar dd0301454: OUTPUT: «0␤(0 0)␤1␤2␤(1 1)␤3␤(2 2)␤4␤5␤»

[17:53] <mornfall> and the done shuts the whole supply block indeed

[17:53] <mornfall> so not a solution either :\

[17:53] *** p6bannerbot sets mode: +v Ven``

[17:53] <timotimo> i'm just a little confused here

[17:58] *** kurahaupo left
[17:58] *** kurahaupo joined
[17:58] *** leont joined
[17:59] <timotimo> i mean

[17:59] <timotimo> m: react { my $tap-one = whenever Supply.interval(0.1) { .say; $tap-one.close if $_ > 4 }; my $tap-two = whenever Supply.interval(0.2) { say $_ xx 2; $tap-two.close if $_ > 4 } }

[17:59] <camelia> rakudo-moar dd0301454: OUTPUT: «5===SORRY!5===␤Word 'whenever' interpreted as a listop; please use 'do whenever' to introduce the statement control word␤at <tmp>:1␤------> 3react { my $tap-one = whenever7⏏5 Supply.interval(0.1) { .say; $tap-one.c␤Unexpected block i…»

[17:59] *** p6bannerbot sets mode: +v kurahaupo

[17:59] <timotimo> m: react { my $tap-one = do whenever Supply.interval(0.1) { .say; $tap-one.close if $_ > 4 }; my $tap-two = do whenever Supply.interval(0.2) { say $_ xx 2; $tap-two.close if $_ > 4 } }

[17:59] *** Ven`` left
[17:59] *** p6bannerbot sets mode: +v leont

[17:59] <camelia> rakudo-moar dd0301454: OUTPUT: «(timeout)0␤»

[18:00] <timotimo> m: react { my $tap-one = (whenever Supply.interval(0.1) { .say; $tap-one.close if $_ > 4 }); my $tap-two = (whenever Supply.interval(0.2) { say $_ xx 2; $tap-two.close if $_ > 4 }) }

[18:00] <camelia> rakudo-moar dd0301454: OUTPUT: «(timeout)0␤»

[18:01] <timotimo> i'm somewhat certain there's something simple to close these taps

[18:02] <b2gills> mornfall: Does knowing that the following works help? `supply { sub foo ($s) { whenever $s { foo($_) }};  foo $a }`

[18:03] *** tharkun_ left
[18:03] *** tharkun_ joined
[18:03] *** cherryh.freenode.net sets mode: +v tharkun_

[18:03] *** p6bannerbot sets mode: +v tharkun_

[18:03] *** tharkun_ is now known as tharkun

[18:03] <b2gills> Also I think that `last` inside of a `whenever` shouldn't generate an error

[18:03] <mornfall> http://sprunge.us/Yqnpg9 this is what i currently have, and it sort of works

[18:03] <mornfall> but it's really ghastly

[18:03] <timotimo> bisectable6: react whenever Supply.interval(0.01) { last }

[18:03] <bisectable6> timotimo, Bisecting by output (old=2015.12 new=dd03014) because on both starting points the exit code is 1

[18:03] *** yqt joined
[18:04] <bisectable6> timotimo, bisect log: https://gist.github.com/44ee154696be8f7a83f63e6ebe4f3a8a

[18:04] <bisectable6> timotimo, (2016-09-27) https://github.com/rakudo/rakudo/commit/222d16b0b94911fdedb06ee6ad817d0f14b9c05c

[18:04] *** p6bannerbot sets mode: +v yqt

[18:05] <mornfall> it also has a race condition and i don't like that :(

[18:05] <mornfall> or at least i think it does

[18:05] <timotimo> only one whenever inside the supply will ever run at the same time

[18:06] <mornfall> sure, but what happens to the events that were never consumed in those supplies?

[18:06] <timotimo> at what point?

[18:06] <mornfall> when $watch does a 'done'

[18:06] <mornfall> then $events gets thrown away and new .watch calls start new supplies

[18:07] <timotimo> when you "done", they get dropped; otherwise it would be like "break" in a loop running another two or three iterations just for fun

[18:07] <mornfall> anything unprocessed will be lost

[18:07] <mornfall> yeah

[18:07] <mornfall> which means this is not a good solution :\

[18:07] <timotimo> mhh

[18:10] <mornfall> a supply with no taps will get GCed, right?

[18:11] <mornfall> i'll need to manage the taps explicitly

[18:13] <timotimo> if there's no taps and nothing holds on to the variable, it'll get GCd

[18:13] *** Kaiepi joined
[18:14] *** p6bannerbot sets mode: +v Kaiepi

[18:14] <timotimo> supplies from supply blocks have the property that whenever they get tapped, the code in the block runs to set everything up

[18:15] <timotimo> well, many supplies act like that, for example server sockets will only listen once they get tapped

[18:19] <mornfall> okay i think i can work with that (and shoving my taps into a map and closing them as needed)

[18:21] *** random_yanek left
[18:24] <Kaiepi> got test installed, but i had to do it manually by making a fake meta6.json file

[18:30] <b2gills>  mornfall: I am not sure why you have multi layered `supply` blocks.

[18:30] <b2gills> https://gist.github.com/b2gills/8e0187f873b1663b5075e32e30229c82

[18:33] *** random_yanek joined
[18:34] *** p6bannerbot sets mode: +v random_yanek

[18:35] <mornfall> b2gills: never mind that, i'm rewriting it with explicit taps

[18:36] <b2gills> Show me when your done. I'll show you how it could be re-written in terms of `supply`

[18:37] <Kaiepi> is there a way to strip out ansi escape codes from the output of Proc::Async?

[18:38] <timotimo> i think Terminal::ANSIColor has a function to strip output of codes?

[18:38] <timotimo> hopefully more than just color

[18:40] <Xliff> If I have the following nativecall def: sub a(&func:(int32, Pointer)) { * }, what's the best way to set &func to NULL?

[18:40] <timotimo> probably call it with "Callable"?

[18:40] <Xliff> Ah!

[18:40] *** zakharyas joined
[18:40] <timotimo> ask it what exact type it has, maybe it needs to be Callable[something]

[18:41] <Xliff> How are you doing, timotimo?

[18:41] *** p6bannerbot sets mode: +v zakharyas

[18:42] <timotimo> i'm okay, how about you?

[18:45] <mornfall> b2gills: http://sprunge.us/a425r1 knock yourself out... (this version presumably leaks filedescriptors like crazy, or elsewise doesn't work so well, but it's much clearer what's going on to me)

[18:46] <mornfall> (i'm trying to debug, without much luck yet)

[18:48] <b2gills> You could have `has Supplier $.supplier .= new;`

[18:49] <mornfall> yeah i never did objects before sorry

[18:49] <Xliff> timotimo: Glad to hear it! I'm getting over a cold, otherwise not too bad. 

[18:50] <mornfall> yeah the $ich.taps{ $root } is really a funny typo, never mind that :p

[18:50] <timotimo> ugh, colds are really annoying

[18:50] <mornfall> i mean it's funny because it compiles just fine

[18:50] <mornfall> i just stopped writing mid-line and forgot about it

[18:57] <El_Che> The latest Rust release may be interesting for some people here: https://hacks.mozilla.org/2018/12/rust-2018-is-here/ (e.g., their release strategy)

[19:00] <mornfall> async/await

[19:00] <mornfall> i'm living in a perpetual state of déjà vu

[19:00] <El_Che> reservation of keywords, not yet implementation if I understand it correctly

[19:01] *** abraxxa joined
[19:02] *** p6bannerbot sets mode: +v abraxxa

[19:03] <timotimo>  why is perl6 still the only language that has await

[19:03] <El_Che> ?

[19:04] <El_Che> I thought it's pretty common?

[19:04] <El_Che> JS, C#

[19:04] <timotimo> no, JS has async/await

[19:04] <timotimo> i think it's the same with C# maybe?

[19:04] *** pmurias_ joined
[19:04] *** p6bannerbot sets mode: +v pmurias_

[19:05] <mornfall> timotimo: python has await too

[19:05] *** abraxxa left
[19:05] <timotimo> it looks like it also only has async/await

[19:06] <mornfall> i probably don't know what you mean by await

[19:06] <timotimo> well

[19:06] <timotimo> when you add an async, do you have to also add a five thousand line patch adding "async" to about fifty different files?

[19:07] <mornfall> async def can call normal routines

[19:08] <mornfall> await is for calling async defs

[19:08] <mornfall> so if you turn a def into an async def, all its callers need to be async too

[19:08] <pmurias_> mornfall: what timotimo was asking why aren't all functions async as in perl 6

[19:09] <timotimo> it's like python's generators

[19:09] <timotimo> you can't easily "yield" in a function you want to have called by an "oblivious" function

[19:09] <mornfall> pmurias_: in perl6 not all functions are async? what do you mean by a function being async?

[19:09] <timotimo> i mean, python has a "functional programmers keep out" attitude, so it's not as bad i guess

[19:10] <pmurias_> mornfall: functions aren't async by default in js

[19:10] <mornfall> pmurias_: function calls are synchronous by default in just about everything

[19:10] <mornfall> pmurias_: an async function call is just 'start'?

[19:11] <pmurias_> mornfall: async as in 'async function foo() {...}'

[19:11] <mornfall> pmurias_: what's 'async function foo()' though?

[19:11] <mornfall> sorry i don't speak js

[19:11] <Ulti> I can attest to async def/await in Python being miserable to work with

[19:11] <timotimo> it's "a function you are allowed to call await in, or call async functions from"

[19:11] <mornfall> well, not anything newer than circa 2000 :p

[19:12] <Ulti> my current contract work is all asyncio and its terrible

[19:12] <Ulti> and makes me realise Rakudo and Perl 6 actually have huge value if people think the Python implementation is "cool"

[19:12] <mornfall> Ulti: come on, it's okay? compared to node 'callbacks are nice' js

[19:13] <mornfall> Ulti: the value in async def is that it's really hard to write a data race with it

[19:13] <Ulti> its awful just my one test with the aiohttp test server broke 90 other tests

[19:13] <mornfall> Ulti: and if you do, it's easy to fix

[19:13] <Ulti> because it closed all of the threads

[19:13] <mornfall> what threads :D

[19:13] <mornfall> there's no threads in asyncio :p

[19:13] <pmurias_> mornfall: node.js has async/await nowadays

[19:13] <Ulti> because thread management is totally craptastic combined with asyncio

[19:13] <Ulti> mornfall: sure there is if you want them

[19:13] <mornfall> Ulti: of course, python and threads don't mix

[19:14] <mornfall> Ulti: i guess at your own peril at best

[19:14] <Ulti> working out where and when to async is also really annoying you just have loads of trouble knowing for sure something is still concurrent or not

[19:14] <mornfall> it's really very unsupported

[19:14] <Ulti> its very supported

[19:14] *** pmurias left
[19:14] <Ulti> in the core of the language so not sure what you're saying

[19:14] *** pmurias_ is now known as pmurias

[19:14] <Ulti> its as supported as Perl 6 supports it

[19:15] <Ulti> but its just really hard to use and reason about and feels utterly hacked on

[19:15] <mornfall> Ulti: in perl6, async is based on threads... in python it's coroutines

[19:15] <timotimo> in perl6.d it's also coroutines, partially

[19:15] <timotimo> when you "await", a continuation is taken and the thread in the pool is freed up to do another task

[19:16] *** Sgeo_ joined
[19:16] <mornfall> timotimo: yes, but there is actual parallelism out of the box

[19:16] <mornfall> which has its upsides and downsides

[19:17] *** p6bannerbot sets mode: +v Sgeo_

[19:17] *** pmurias left
[19:18] <Ulti> mornfall I've so far not come across any asyncio code that wasnt also using ThreadPoolExecutor

[19:18] <Ulti> which is basically the same as Perl 6 really

[19:18] *** Sgeo left
[19:20] <Ulti> is react/whenever as an idea unique to Perl 6 or has that been borrowed?

[19:20] <Ulti> because I think having a nice event loop syntax helps a lot

[19:21] <timotimo> Ulti: can you tell me why i'm imagining there's "last" support in whenever blocks?

[19:21] *** abraxxa joined
[19:21] *** pmurias joined
[19:21] *** p6bannerbot sets mode: +v pmurias

[19:22] *** p6bannerbot sets mode: +v abraxxa

[19:22] <Ulti> because there is? or something like it, might have another name 

[19:22] <pmurias> timotimo: I would guess async/await are used a pair in other languages becuase they where added latter on

[19:22] <pmurias> timotimo: and it made sense to have a distinction between the async part

[19:22] <Ulti> if you mean phaser rather than like break

[19:23] <mornfall> Ulti: okay i can't find the docs in question, but #python repeatedly told me to absolutely never use threads, especially not with asyncio :p i originally assumed that the asyncio event loop would dispatch to a thread pool, because that's the obvious thing to do

[19:23] <Ulti> its done inside react/whenever to escape out

[19:23] *** pmurias_ joined
[19:23] *** p6bannerbot sets mode: +v pmurias_

[19:23] <mornfall> Ulti: though there's GIL, so i don't think you can get too much parallelism out of a thread pool unless you call into C a lot

[19:23] <Ulti> mornfall: https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor

[19:24] <mornfall> Ulti: yes i went through the docs again, i'm sure it mentioned "don't ever use threads unless you absolutely can't avoid blocking IO, but don't use it anyway" kind of thing :p

[19:24] <Ulti> welcome to Python not 2.7 if only everyone would switch >:3 where have I heard this before

[19:24] <timotimo> Ulti: yeah, LAST exists, but not last for some reason

[19:24] <Ulti> timotimo: yeah its `done` ?

[19:26] <timotimo> that kills the whole supply/react blokc

[19:26] <abraxxa> .round(0.1) doesn't do what the docs say

[19:26] <abraxxa> I still get a number without any digits after the comma

[19:27] <Ulti> timotimo: yeah 

[19:27] <timotimo> oh

[19:27] <Ulti> so you mean just stops the whenever from being a thing?

[19:27] <timotimo> i guess you could throw an exception in the whenever and CATCH { when KillWhenever { } } it in the supply thing?

[19:27] <timotimo> yeah

[19:27] <timotimo> like as if the source had "done"d

[19:27] <abraxxa> it's a Rat I get back from round

[19:27] <mornfall> Ulti: the remark was removed from 3.7 docs... 3.6 asyncio page says: „an interface for passing work off to a threadpool, for times when you absolutely, positively have to use a library that makes blocking I/O calls.“

[19:28] <mornfall> Ulti: https://docs.python.org/3.6/library/asyncio.html

[19:28] <Ulti> guess its good marketing to remove it and make everyone beliece your language can actually do that functionality easily...

[19:28] <mornfall> Ulti: there are also multiple remarks in 3.7 library docs that most of asyncio is not threadsafe

[19:29] <Ulti> its fine most people immediately break the concurrency and block anyway

[19:29] <Ulti> thats why they all use the threads :D

[19:29] <mornfall> it's stupid :p

[19:30] <mornfall> i'm pretty sure asyncio was designed to run in a single thread

[19:30] <Ulti> print('getting here 2016')  WHOOOPS

[19:30] <mornfall> *but* if you stick to a single thread and can keep your latencies reasonable, it works okay

[19:31] <Ulti> yeah, my current contract is a fairly /interestng/ bespoke and abstract request framework

[19:31] <mornfall> OS threads are a lot of trouble

[19:31] <Ulti> it would be cool if it wasnt a little insane

[19:31] <Ulti> it abstracts kafka and http :D

[19:32] <Ulti> I should really poke at cro and see how easy it would be to add other protocols to it

[19:33] <mornfall> timotimo: well, each whenever is a separate tap right?

[19:33] <timotimo> aye

[19:33] <mornfall> timotimo: if you could do my $foo = whenever ..., then you would be able to $foo.close :)

[19:33] <timotimo> you can get the tap object, too

[19:33] <timotimo> i thought so, too. except it didn't work when i tried it

[19:33] <mornfall> interesting

[19:34] <mornfall> anyway, back to my real problems... Unhandled exception in code scheduled on thread 4: no such file or directory

[19:34] <mornfall> how do i get a backtrace from this? :(

[19:35] <timotimo> you can overwrite the unhandled exception handler in the ThreadPoolScheduler, i think?

[19:35] <mornfall> oh dear :)

[19:35] <mornfall> $*SCHEDULER?

[19:36] <mornfall> yeah that prevents the crash but i would also like where it came from :\

[19:36] <Ulti> another option is to try a fail instead of a throw maybe?

[19:36] *** pmurias left
[19:36] *** pmurias_ left
[19:36] <mornfall> Ulti: it apparently originates in the bowels of rakudo

[19:36] <Ulti> oh right

[19:37] <mornfall> i don't think it has a backtrace attached :\ .say and .payload just say 'no such file or directory' and that's that

[19:37] <timotimo> you'll get the exception object, it has a backtrace, hopefully

[19:37] <mornfall> please tell me it's not coming from nqp

[19:37] <timotimo> oh?

[19:37] <timotimo> nqp also has exceptions that can have file/line no

[19:38] <timotimo> worst case, perl6-gdb-m, break the line that does MVM_exception_throw_adhoc with the string in question, when it breaks do MVM_dump_backtrace(tc)

[19:41] <mornfall> nope, no MVM_exception_throw_adhoc involved

[19:42] <timotimo> it could be directly sending an uv_errstr or what it's called on

[19:42] <timotimo> or did you break on MVM_exception_throw_adhoc itself?

[19:42] <mornfall> it's not perror or strerror_r either

[19:42] <mornfall> yes i did a break on that

[19:42] <timotimo> ah, another thing to try is to pass --ll-exception to perl6

[19:43] <mornfall> uv_strerr(_r) not involved either :\

[19:44] *** graphene left
[19:44] <mornfall> (they are involved in other places though, along with MVM_exception_throw_adhoc, so the breakpoints work)

[19:45] *** graphene joined
[19:46] *** p6bannerbot sets mode: +v graphene

[19:46] <b2gills> mornfall: I'm not sure why you are re-tapping, so I didn't do that. Anyway I think something like this would work (untested) https://gist.github.com/b2gills/8e0187f873b1663b5075e32e30229c82

[19:47] <mornfall> b2gills: without retapping it's useless though... that's the whole point of the exercise?

[19:48] <mornfall> b2gills: i mean, the idea is that if the file is replaced by another file, you need to .watch the new file

[19:48] <mornfall> it's not watching by name

[19:49] <mornfall> it opens the file and holds an inode reference

[19:49] <b2gills> The taps are in %taps, so just call %taps{$path}.close

[19:50] <b2gills> It will run the `LAST …` in the `whenever`

[19:51] <mornfall> well i have two problems right now... one is that exceptions come from somewhere and i can't locate the source, the other is that .watch opens a descriptor and i don't know how to get rid of it

[19:52] *** pmurias joined
[19:52] *** p6bannerbot sets mode: +v pmurias

[19:52] <mornfall> waiting for the GC turns out to be a bad strategy

[19:52] *** pmurias_ joined
[19:52] *** p6bannerbot sets mode: +v pmurias_

[19:54] <mornfall> b2gills: alse your perl5 habits are leaking? $taps{$path} :)

[20:01] <b2gills> I would like to note that `supply {…}` is actually a bare block `{…}` with the statement prefix operator `supply` (at least notionally)

[20:01] <mornfall> cool, i crashed gdb :(

[20:01] *** xlat left
[20:01] *** graphene left
[20:03] *** graphene joined
[20:03] <buggable> New CPAN upload: PDF-ISO_32000-0.0.2.tar.gz by WARRINGD http://modules.perl6.org/dist/PDF::ISO_32000:cpan:WARRINGD

[20:03] *** p6bannerbot sets mode: +v graphene

[20:04] *** pmurias left
[20:05] *** pmurias joined
[20:05] *** p6bannerbot sets mode: +v pmurias

[20:06] *** pmurias left
[20:06] *** pmurias_ left
[20:08] *** pmurias joined
[20:08] *** p6bannerbot sets mode: +v pmurias

[20:08] *** Marcool joined
[20:09] *** p6bannerbot sets mode: +v Marcool

[20:09] <Marcool> Hi all, is there a way to parse the output of "dir" so that special characters (for example: é), don't show up as codepoints, such as: "e􏿽xCC􏿽x81")? 

[20:10] *** pmurias_ joined
[20:10] *** p6bannerbot sets mode: +v pmurias_

[20:11] <Marcool> These are files created by Finder on a macOS system…

[20:12] <El_Che> is't it a terminal thing?

[20:12] <Marcool> Strangely, if I do run("touch", 'é'); then my @files = dir, I have the unicode character in @files.gist…

[20:12] <Marcool> El_Che: I don't know…

[20:12] <Marcool> using iTerm with (usually) very good unicode support

[20:13] <Marcool> no ssh involved or anything

[20:13] <El_Che> when on osx I use iterm2, I remember some weird stuff with the normal terminal

[20:13] <El_Che> mm

[20:13] <El_Che> I don't have a mac handy to test is

[20:14] <Marcool> El_Che: no pb, I'm just testing different things. The issue happens when I create the file or folder with Finder, then use dir, it garbles the name. If I create the file in the terminal or using perl6, it's fine when listed…

[20:16] <El_Che> Marcool: in the same dir? (e.g. not one on hfs+ the other on AFS)

[20:19] <Marcool> hum, no I'm testing all those different methods on same AFS disk

[20:19] <Marcool> (in the same folder even)

[20:19] <El_Che> ok

[20:19] *** pmurias_ left
[20:19] *** pmurias left
[20:20] <El_Che> so "ls -al" gives utf8 output in the terminal for those finder files?

[20:20] *** pmurias joined
[20:20] *** p6bannerbot sets mode: +v pmurias

[20:22] <Marcool> El_Che: here is a better illustration: https://framabin.org/p/?2c11cf4449213e7c#qHg7eHKmF+kwD3JF8SB2ULMNejN5+sX+J/i/5FfhbnU=

[20:24] <Marcool> El_Che: yes to the ls -al (my ls is aliased to gls --color -lah)

[20:24] <El_Che> file -I file

[20:24] <El_Che> file -I é

[20:24] <El_Che> file -I tmp

[20:25] *** pmurias_ joined
[20:25] *** p6bannerbot sets mode: +v pmurias_

[20:25] <Marcool> El_Che: "file -I é

[20:25] <Marcool> é: inode/x-empty; charset=binary"

[20:25] <Marcool> Same when created via Finder

[20:25] <Marcool> and same for file -I tmp

[20:26] <El_Che> and "$ locale" gives you all UTF-8?

[20:26] <Marcool> El_Che: yup :/

[20:27] <Marcool> en_US.UTF-8 all the way

[20:27] <El_Che> I am looking at this ticket that sound similar: https://hacks.mozilla.org/2018/12/rust-2018-is-here/

[20:27] <El_Che> oops

[20:27] <El_Che> https://github.com/vgough/encfs/issues/316

[20:27] <El_Che> that one

[20:28] <El_Che> it's about EncFS, but they mention NFD normalization

[20:29] <El_Che> or this one: https://github.com/gohugoio/hugo/issues/4853

[20:29] <Marcool> ahah, yeah I see what you're getting at, this comment sounds informative: https://github.com/vgough/encfs/issues/316#issuecomment-299574065

[20:30] *** nige_ left
[20:30] <El_Che> Marcool: there are pretty knowledgable people about utf8 here in the channel

[20:30] <El_Che> stick around :)

[20:31] <Marcool> El_Che: sure :) will do

[20:31] <Marcool> do you think this UTF8-MAC

[20:31] <Marcool> might be the issue?

[20:31] <El_Che> https://eclecticlight.co/2017/07/05/high-sierra-and-filenames-apple-is-relenting/

[20:32] <Marcool> Damn that's a depressing read (even cursory)!

[20:33] <El_Che> https://gitlab.com/gnachman/iterm2/issues/5469

[20:35] <Marcool> p6: say "e􏿽xCC􏿽x81".decode('UTF8-MAC').Str

[20:35] <camelia> rakudo-moar dd0301454: OUTPUT: «No such method 'decode' for invocant of type 'Str'. Did you mean 'encode'?␤  in block <unit> at <tmp> line 1␤␤»

[20:35] <Marcool> p6: say "e􏿽xCC􏿽x81".encode('UTF8-MAC').Str

[20:35] <camelia> rakudo-moar dd0301454: OUTPUT: «Unknown string encoding 'UTF8-MAC'␤  in block <unit> at <tmp> line 1␤␤»

[20:35] <Marcool> ah, that solves that…

[20:36] <El_Che> Marcool: https://www.iterm2.com/documentation-preferences.html <-- play with the preferences there and see if it's better

[20:38] <Marcool> El_Che: there is an option to select a normalization, NFC or NFD of HFS+ but they don't make any difference to perl6, the terminal (like, when using ls) is rendering the caracter fine

[20:38] <Marcool> it's the perl6 -e "say dir.Str" that mushes it

[20:39] <Marcool> it's really in the dir routine/method I think, cos I can match the file name with unicode "é" for instance in the perl6 code

[20:39] <Marcool> but the when I "dir" I get a messed up representation of the file name

[20:40] <Marcool> I could probably fix this with a dump 'run("ls", :out)' or 'run("find", :out)'

[20:40] <El_Che> Marcool: could you open an issue. it looks like something interesting for the urf8 people (and the core devs using macos)

[20:40] <Marcool> El_Che: sure, can you point me to the right place?

[20:40] <Marcool> rakudo on github?

[20:40] <El_Che> yes

[20:41] <El_Che> https://github.com/rakudo/rakudo/issues

[20:42] <mornfall> can i explicitly destroy an object?

[20:43] <mornfall> okay the fd leak is in moar :(

[20:43] <mornfall> so destroying anything won't help

[20:44] *** nige_ joined
[20:45] *** p6bannerbot sets mode: +v nige_

[20:45] *** graphene left
[20:47] *** graphene joined
[20:47] <mornfall> can i force a collection? there's a GC handler for the object in moar, it just doesn't close the fd

[20:47] *** dogbert11 joined
[20:47] <mornfall> (i probably can't test if that works without forcing collections quite often)

[20:47] *** p6bannerbot sets mode: +v graphene

[20:48] *** p6bannerbot sets mode: +v dogbert11

[20:50] *** dogbert17 left
[20:52] <Marcool> El_Che: ok, issue submited: https://github.com/rakudo/rakudo/issues/2528

[20:52] <El_Che> Marcool++

[20:52] <Marcool> El_Che: thanks for helping to look around this issue!

[20:52] <Marcool> Must run now, all the best! 

[20:52] <Marcool> :)

[20:52] <El_Che> will have a look on a mac, soonish :)

[20:52] *** Marcool left
[20:53] *** pmurias left
[20:54] *** pmurias_ left
[20:56] *** graphene left
[20:57] *** graphene joined
[20:58] *** p6bannerbot sets mode: +v graphene

[20:58] <ufobat_> how do i get the long form of a class name? .WHAT gives the short form, right?

[21:00] *** sena_kun left
[21:01] *** sena_kun joined
[21:01] *** sena_kun left
[21:02] *** quester joined
[21:02] *** p6bannerbot sets mode: +v quester

[21:04] *** abraxxa left
[21:04] *** ufobat_ left
[21:05] <Xliff> Has anyone seen this error using zef, before: No such method 'payload' for invocant of type 'X::Parameter::InvalidConcreteness'

[21:05] <Xliff> I get it with 'zef install --deps-only .'

[21:05] <Xliff> ufobat: .^name

[21:06] <Xliff> m: class A::B { }; my $ab = A::B.new; say $ab.^name

[21:06] <camelia> rakudo-moar 1d597fa51: OUTPUT: «A::B␤»

[21:06] *** ufobat_ joined
[21:07] <Xliff> ufobat: .^name

[21:07] <Xliff> m: class A::B { }; my $ab = A::B.new; say $ab.^name

[21:07] <camelia> rakudo-moar 1d597fa51: OUTPUT: «A::B␤»

[21:07] *** p6bannerbot sets mode: +v ufobat_

[21:09] <ufobat_> Xliff, thx :)

[21:09] <Xliff> Is this supposed to happen?

[21:09] <Xliff> $ zef install --deps-only .

[21:09] <Xliff> No such method 'payload' for invocant of type 'X::Parameter::InvalidConcreteness'

[21:09] <mornfall> anyone understands the AsyncType repr things? SocketCancellation, TimerCancellation, FileWatchCancellation?

[21:09] <mornfall> they don't seem to do anything at all, other than stand in for the AsyncTask?

[21:11] <timotimo> that is correct

[21:11] <timotimo> they are there to be passed to nqp::asynccancel or whatever it's called

[21:11] <mornfall> that's the crucial bit i was looking for

[21:12] <mornfall> (how to trigger the cancel() op on AsyncTask)

[21:15] <masak> I just wanted to say it here again, even though I've pointed it out once before, because it's so freaky:

[21:15] *** kerframil left
[21:16] <mornfall> i have problems following the cancel_notify_queue code :\

[21:16] <masak> the corner case between macro injection and custom operators with precedence levels means you can have operators that *don't have comparable precedence*

[21:17] <mornfall> is interp.c seriously a 6000 line switch? :(

[21:20] <El_Che> mornfall: maybe you'll have more luch in #perl6-dev or #moarvm

[21:20] <mornfall> timotimo: hmm, i don't think you can do that though... nqp::watchfile (and the rest of the family) take the type as a parameter... oh, but they return the object... which rakudo promptly throws away

[21:21] <timotimo> yeah, if you want to cancel, you'll have to catch that

[21:21] <timotimo> it could very well be, though, that it gets passed to the callbacks

[21:21] *** success joined
[21:22] *** success is now known as Guest46388

[21:22] <mornfall> yes, i think i understand how it works now, i need to find a place to put the nqp::cancel though

[21:22] <timotimo> you're working with a tappable, right?

[21:22] <timotimo> it has a callback for when the tap is closed

[21:22] *** p6bannerbot sets mode: +v Guest46388

[21:22] <mornfall> (and actually add an implementation of cancel to the watchfile task)

[21:23] <mornfall> timotimo: it's a normal Supply in IO::Notification, derived from a Supplier

[21:23] <masak> but don't worry! unquoted operators will be counted as maximally loose, by Ven++'s argument here: https://github.com/masak/007/issues/334#issuecomment-433910876

[21:24] <Xliff> mornfall: Wow! You're right. Is there a better way to implement that though?

[21:24] <mornfall> timotimo: do you mean i should call on-close on the Supply that watch-path returns?

[21:24] <Xliff> Function dispatch table?

[21:25] <timotimo> not entirely sure

[21:26] <mornfall> timotimo: well, i'll figure it out, i'll start with patching through the task object into userland so i can nqp::cancel it manually

[21:26] <mornfall> um, can i have output parameters? :D

[21:27] <timotimo> "is rw" will do it

[21:28] *** SqrtNegInf left
[21:31] <SmokeMachine> Maybe what Marcool found is the reason why t/spec/S32-str/utf8-c8.t is broken on my Mac...

[21:37] *** nige_ left
[21:38] *** sena_kun joined
[21:38] *** p6bannerbot sets mode: +v sena_kun

[21:41] <mornfall> timotimo: am i supposed to put results of nqp::* into \variables? nqp::cancel doesn't like my scalar

[21:41] <lucasb> I just read the issue, I'm trying to understand... so, if a "é" file is created in the shell, dir() returns ok, if it's created in mac's file manager, then it returns mangled?

[21:41] <mornfall> oh, i can use a scalar but i have to use :=

[21:42] <mornfall> but there isn't a 'bind-return' is there?

[21:43] <timotimo> no

[21:43] <timotimo> return-rw is for returning a scalar without decontainerizing the contents

[21:43] <mornfall> or an unboxed tuple?

[21:44] <timotimo> by tuples you mean..?

[21:44] <mornfall> multiple return values

[21:44] <mornfall> where the items would be binds

[21:44] <mornfall> although

[21:44] <timotimo> from nqp to nqp or from nqp to rakudo?

[21:45] <mornfall> mabye nqp::decont will work

[21:46] <mornfall> timotimo: in rakudo

[21:47] <timotimo> ok, more like: user-facing or internals-facing?

[21:47] <mornfall> (fwiw, decont doesn't help)

[21:48] <mornfall> timotimo: oh, i'm just throwing things around for testing... the cancellation object shouldn't pass out of rakudo stdlib if i get it to work

[21:48] <timotimo> in that case you can put the two things into an nqp::list(..,..)

[21:49] <mornfall> *but* i managed to call through into the cancel handler i put in moar from inside stdlib, so things are progressing

[21:53] <mornfall> is there a way to build rakudo in pieces, instead of rebuilding the CORE.setting blob? takes 2 minutes :\

[21:54] <mornfall> (i know, i need to get a faster computer...)

[21:54] <mornfall> (it'd be an okay time if i knew what i was doing, which i don't)

[21:55] *** DarthGandalf joined
[21:55] *** p6bannerbot sets mode: +v DarthGandalf

[21:55] <timotimo> you can copy-paste the code you're working on into a file and use that

[21:56] <Xliff> What's the best way to specify native dependencies in META6.json?

[21:56] <timotimo> worst case, just put your code in the existing classes via .wrap

[21:56] <Xliff> "libname:from<native>" throws errors in zef

[21:58] <mornfall> timotimo: good thinking, thanks

[21:58] <mornfall> this also unmasked the origin of the 'no such file or directory', incidentally

[21:59] <mornfall> \o/ it's worky

[21:59] <timotimo> better worky than wonky

[22:00] <mornfall> i no longer run out of descriptors after 10 seconds

[22:00] <mornfall> okay now let's make this into patches

[22:02] *** rindolf left
[22:02] *** graphene left
[22:04] *** atweiden-air joined
[22:04] *** graphene joined
[22:04] *** p6bannerbot sets mode: +v atweiden-air

[22:05] *** p6bannerbot sets mode: +v graphene

[22:05] * timotimo BBL, cooking and such

[22:06] *** kurahaupo left
[22:07] *** kurahaupo joined
[22:07] *** p6bannerbot sets mode: +v kurahaupo

[22:18] <mornfall> can someone quickly remind me how i create a remote branch with git push? :\

[22:19] <sena_kun> git push origin my-new-branch?

[22:19] *** zakharyas left
[22:19] <mornfall> yeah turns out i'm on the wrong branch locally, sorry

[22:20] <sena_kun> :)

[22:21] <mornfall> *phew*

[22:30] <mornfall> lizmat: /o\ mea culpa

[22:31] *** wbn left
[22:34] *** wbn joined
[22:35] *** p6bannerbot sets mode: +v wbn

[22:38] *** atweiden-air left
[22:44] *** Ven`` joined
[22:45] *** p6bannerbot sets mode: +v Ven``

[22:48] <masak> mornfall: shouldn't matter which branch you're on when you push with `git push origin <branch-name>`

[22:50] *** ufobat_ left
[22:50] <mornfall> masak: yeah i only got up to origin

[22:50] <mornfall> got a puzzling error message

[22:50] <mornfall> you get a much better error message when you are on the right local branch :p

[22:51] <mornfall> somehow it always bites me that creating a branch doesn't switch to that branch

[22:51] <mornfall> i feel like i have to type in million commands to achieve really simple things :\ i'm more used to darcs than to git

[22:52] <El_Che> git checkout -b newBranch

[22:52] <masak> was gonna say

[22:52] <mornfall> oh that... i knew there was a command for that? or vaguely remembered

[22:52] <masak> I taught git earlier this week. our introduction course.

[22:52] <mornfall> i used to use git more often you see

[22:53] <masak> I mentioned *specifically* that I don't use `git branch <new-branch>` to create branches

[22:53] <mornfall> but it was always painful :\ i much prefer systems with first-class changesets/patches instead of the branchy git approach

[22:53] <masak> I use `git checkout -b <new-branch>`

[22:53] <sena_kun> masak, `checkout -b` instead?

[22:53] <masak> aye

[22:53] <sena_kun> oh, goodness. :)

[22:54] <masak> also, I made a git-upstream binary, because I got tired of re-typing the branch name just to push it up to `origin` :P

[22:54] <masak> highly recommended

[22:54] <masak> also, I have a custom branch visualization tool, which sorts my local branches in last-modified order, and shows ahead/behind information just like github does

[22:55] <masak> frankly, I could give a one-day course just about the environment I've set up to make myself effective with git

[22:56] <mornfall> yeah, it's a really sad state of affairs :p

[22:56] <masak> I disagree

[22:56] <El_Che> masak: https://vignette.wikia.nocookie.net/simpsons/images/e/ed/Bart_Bart.jpg/revision/latest?cb=20120516184134

[22:56] <masak> what it is is a tool that invites customization

[22:56] *** Sgeo_ left
[22:56] <masak> El_Che: ;)

[22:57] <mornfall> what, that it would take a day to just explain all the hacks you need on top of 'the' version control tool to be productive? yes, that's just sad

[22:57] <masak> again, I disagree

[22:57] <masak> I still think Git is better than all its predecessors and its modern-day competitors. it just happens to have a non-perfect UI by default

[22:58] <El_Che> it does a lot more

[22:58] <masak> the metaphors Git uses in its model are quite neat. no complaints there. the CLI subcommands are sometimes... lacking. unfortunate.

[22:59] <masak> I used to be a big fan of `git stash`. this time when I taught it, I noticed that my habits have changed, and I use named branches for the same thing. half a year ago I might not have noticed that.

[22:59] <masak> (named branches are a lot more visible than saved stashes)

[22:59] *** Sgeo joined
[23:00] <El_Che> my usage of stash is pretty much "damnit" followed by "git stash drop"

[23:00] *** p6bannerbot sets mode: +v Sgeo

[23:01] <mornfall> you know, if you could have unnamed branches and refer to them by fragments of commit messages that live on them, that'd be something :p

[23:01] <masak> I'm sure that can be arranged

[23:02] <Kaiepi> iirc mercurial isn't that bad

[23:02] <mornfall> sure, but it's probably a day of programming

[23:03] <mornfall> well, to me, many people's relationship to git seems a lot like stockholm syndrome :-)

[23:03] <mornfall> also, i have to watch poor students fight it out with git... it's sad (and there's basically nothing i can do... i tried explaining the data model, but it doesn't help)

[23:04] <masak> I'm Swedish, and I hate it when people invoke "Stockholm syndrome" on all kinds of IT stuff :/

[23:04] <El_Che> you don't need a lot of git knowledge to be productive

[23:04] <masak> what they mean is usually "you've gotten used to this tool, and so you can't evaluate its negatives"

[23:05] <mornfall> masak: which is not what i mean... people get upset when you say something bad about git

[23:06] <masak> that might well be. I don't mean to be dogmatic about it. in the end it's just a tool.

[23:06] <El_Che> masak: the .be governement (that fell today, good riddance) called themselves the "Swedish coalition": blue for liberals, yellow for nationalist populists and the cross for christian-democrats :)

[23:06] <masak> I was an avid SVN user before I started using Git. Git fits my brain. I see a correlation between Perl programmers and Git users, too.

[23:06] <mornfall> oh, belgium is without a government again? :-)

[23:06] <mornfall> masak: remember svk?

[23:06] <El_Che> we have a minority one now

[23:06] <mornfall> i used svk

[23:07] <masak> mornfall: I do remember it.

[23:07] <masak> it was a proto-git in some ways, like cassette tapes

[23:07] <El_Che> the populists saw an opportunity to set the agenda for the elections in may and stepped out. We'll be allright :)

[23:07] <mornfall> masak: there's been half a dozen protogits before git

[23:07] <masak> aye, most likely

[23:07] <El_Che> svn is indeed pretty close

[23:08] <El_Che> except when you're on a train

[23:08] <masak> there was a power vacuum there, and Git hit the spot

[23:08] <mornfall> masak: i'm fairly sure it was github that did it, not git

[23:08] <mornfall> you barely see any git repos outside of the linux kernel, github and gitlab

[23:09] <El_Che> mornfall: that's a weird statement

[23:09] <El_Che> I think most people/companies repos are git today

[23:09] <masak> mornfall: I respectfully disagree

[23:09] <El_Che> there are lots of tooling for git

[23:09] <masak> I mean, Github has been instrumental in Git's success and spread, but Git was already succeeding before Github

[23:09] <El_Che> gitea, gitlabn ...

[23:10] <mornfall> El_Che: the faculty gitlab instance went down for a few hours, and there was a clear sense of panic because obviously you can't get work done without gitlab running?

[23:10] <El_Che> probably pipelines or other CI pieces?

[23:10] <mornfall> El_Che: no, it wasn't even for code, just text

[23:11] <masak> people depend on a centralized point in a decentralized system; news at 11

[23:11] <El_Che> we use git with gitea as a webinterface, linked with Jenkins for CI en Artefactory for artefact (e.g. Docker images)

[23:11] <El_Che> pretty sweet

[23:11] <El_Che> however, I can perfectly work on the train without network on my local checkouts

[23:12] <mornfall> i really don't remember cloning a git repo from a place other than hosted in one of those three systems... maybe glibc from sourceware.org?

[23:12] <mornfall> i'm not saying people don't do that, but github is just huge

[23:13] <mornfall> i also only see public stuff... in-house, the picture may well be different

[23:14] <El_Che> even older projects that use svn for ever seem to have moved to git (like openldap) or present git mirrors 

[23:17] <Kaiepi> openbsd uses cvs

[23:17] <mornfall> the thing that git doesn't solve (and delegates) that's pretty crucial is pull requests, or rather how people exchange patches... git send-email isn't that popular; this is much easier in a closed team of course, people just come to me and tell me 'i did some work, please pull' ... but this is the piece that github provides

[23:18] <mornfall> you could probably do it through a bug tracker, but then everyone needs a public address for their git repo, etc.

[23:18] <masak> indeed, and I've gradually started talking more about PRs and PR workflows in my teaching as well

[23:19] <masak> it feels like the natural continuation to "here are the Git commands, here's how you use Git"

[23:19] <El_Che> indeed, that's one of the reasons we're moving to gitea from redmine

[23:19] <El_Che> PRs are very useful

[23:21] <mornfall> unfortunately, the success of github prevented a distributed solution of both issue tracking and patch exchange :\

[23:22] <Kaiepi> i find it can be difficult to plan serious projects on github

[23:22] *** kensanata joined
[23:22] *** p6bannerbot sets mode: +v kensanata

[23:22] <Kaiepi> it's easier just to rely on other services to do it

[23:24] <mornfall> (i sometimes wonder if github one day follows sourceforge :p the first tiny hints that facebook might follow myspace are already there, even though the scale of the thing is completely different)

[23:24] <mornfall> (but yeah, we veered way off topic...)

[23:25] <El_Che> mornfall: what? We haven't mentioned Microsoft yet :)

[23:25] <mornfall> (also, can i have my geocities webrings back now? thx :p)

[23:26] <timotimo> anyone try fossil yet?

[23:27] <mornfall> i think i fired up an instance for a few minutes once

[23:28] <Kaiepi> what's fossil?

[23:28] <El_Che> https://en.wikipedia.org/wiki/Fossil_(software)

[23:28] <timotimo> old and dusty

[23:28] <mornfall> fossil-scm.org

[23:28] <Kaiepi> oh lol

[23:28] <El_Che> Initial release2006; 12 years ago

[23:28] <mornfall> it's neither old nor dusty :-)

[23:28] <El_Che> not *that* old

[23:28] <mornfall> latest commit is 2 days ago

[23:29] <mornfall> and that's only because i just crossed midnight 30 minutes back

[23:30] <mornfall> i can't bring myself to trust sqlite with anything important

[23:30] <El_Che> http://fossil-scm.org/index.html/dir?ci=tip <-- if that is the code view, I am not impressed

[23:30] <timotimo> aren't they the champions of reliability?

[23:31] <mornfall> El_Che: look at the timeline, that's quite okay

[23:32] *** Ven`` left
[23:32] <mornfall> the interesting thing about fossil are that it has distributed everything... afaict even the forum is part of the normal distributed repo

[23:34] <Kaiepi> at least they made their makefiles compatible with bsd make

[23:35] <mornfall> but a database which by default ignores foreign constraints and which happily loses data when placed on nfs... doesn't inspire confidence in me

[23:36] <mornfall> bdb is another of those things that's supposed to be resilient, but subversion nearly died due to bdb unreliability

[23:38] <El_Che> mornfall: haven't you moved to hdb?

[23:39] <mornfall> hdb?

[23:39] <mornfall> (if that's re svn, i only remember fsfs?)

[23:40] *** rfold left
[23:41] *** Cabanoss- left
[23:41] *** sena_kun left
[23:42] *** Cabanossi joined
[23:43] *** p6bannerbot sets mode: +v Cabanossi

