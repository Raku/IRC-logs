[00:03] *** _kristian joined
[00:04] <timotimo> where did i see someone complain about the unbox error message for native nums?

[00:12] <AlexDaniel> timotimo: here? https://github.com/perl6/6.d-prep/issues/4#issuecomment-365767761

[00:12] <AlexDaniel> ok not that particular comment but that thread

[00:14] <timotimo> ah, that must be it

[00:15] <timotimo> is there some way to "reply to" a specific comment?

[00:15] <AlexDaniel> timotimo: you can select some text and press R

[00:16] <timotimo> i'll try that the next time, thanks!

[00:16] *** cdg joined
[00:17] *** epony joined
[00:21] *** cdg left
[00:43] *** comborico1611 left
[00:53] *** Herby_ joined
[00:53] <Herby_> o/

[00:54] *** pierre joined
[00:54] *** aborazmeh joined
[00:54] *** aborazmeh left
[00:54] *** aborazmeh joined
[00:55] *** ZzZombo joined
[01:03] *** Cabanossi left
[01:04] *** Rawriful left
[01:05] *** Cabanossi joined
[01:07] *** AlexDaniel left
[01:25] *** cdg joined
[01:28] *** pharv left
[01:30] *** cdg left
[01:31] *** MasterDuke_ joined
[01:32] *** MasterDuke left
[01:38] *** khisanth_ is now known as Khisanth

[01:50] *** aborazmeh left
[01:51] *** MasterDuke_ is now known as MasterDuke

[02:16] *** jeromelanteri joined
[02:34] *** noganex left
[02:46] *** ilbot3 left
[02:57] *** ilbot3 joined
[02:57] *** ChanServ sets mode: +v ilbot3

[03:01] *** pierre left
[03:01] *** Herby_ left
[03:02] *** pierre joined
[03:08] *** pierre left
[03:08] *** pierre joined
[03:15] *** fnodeuser joined
[03:16] *** fnodeuser left
[03:42] *** pharv joined
[03:47] *** pharv left
[03:56] *** kent\n left
[03:57] *** kent\n joined
[04:02] *** kent\n left
[04:02] *** kent\n joined
[04:03] *** pharv joined
[04:04] *** pharv_ joined
[04:07] *** Cabanossi left
[04:07] *** pharv left
[04:08] *** pharv_ left
[04:08] *** Cabanossi joined
[04:12] *** Khisanth left
[04:15] *** wamba joined
[04:20] *** cdg joined
[04:25] *** cdg left
[04:25] *** Khisanth joined
[04:28] *** skids left
[04:46] *** john_parr_ joined
[04:46] *** Khisanth left
[04:46] *** john_parr left
[04:46] *** john_parr_ is now known as john_parr

[04:47] *** Khisanth joined
[04:47] *** hythm left
[04:47] *** hythm joined
[05:04] *** m0ltar left
[05:07] *** m0ltar joined
[05:08] *** pierre left
[05:21] *** pharv joined
[05:25] *** pharv left
[05:26] *** pharv joined
[05:30] *** pharv left
[05:32] *** lalitmee joined
[05:40] *** pharv joined
[05:41] *** curan joined
[05:41] *** pharv left
[05:42] *** pharv joined
[05:48] *** khw left
[05:58] *** eliasr left
[06:15] *** wamba left
[06:15] *** cdg joined
[06:21] *** cdg left
[06:23] *** konsolebox left
[06:23] *** konsolebox joined
[06:28] *** troys left
[06:31] *** darutoko joined
[06:38] *** konsolebox left
[06:38] <Geth> ¬¶ doc: c5ae6ef62f | (JJ Merelo)++ | doc/Type/Signature.pod6

[06:38] <synopsebot> Link: https://doc.perl6.org/type/Signature

[06:38] <Geth> ¬¶ doc: Trying to fix the example

[06:38] <Geth> ¬¶ doc: 

[06:38] <Geth> ¬¶ doc: Which reflects the intent of the section (explaining how to smart

[06:38] <Geth> ¬¶ doc: match signatures), and actually uses $sig and does so

[06:38] <Geth> ¬¶ doc: correctly. Thanks to @jimav for the feedback, this closes #1777 again

[06:38] <Geth> ¬¶ doc: and feel free to comment or reopen if needed.

[06:38] *** pierre__ joined
[06:38] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/c5ae6ef62f

[06:39] *** konsolebox joined
[06:46] *** wamba joined
[06:51] *** wamba left
[06:55] *** travis-ci joined
[06:55] <travis-ci> Doc build passed. JJ Merelo 'Trying to fix the example

[06:55] <travis-ci> https://travis-ci.org/perl6/doc/builds/341758895 https://github.com/perl6/doc/compare/c15d37a87675...c5ae6ef62f04

[06:55] *** travis-ci left
[06:56] *** eroux joined
[06:58] *** konsolebox left
[06:58] *** konsolebox joined
[06:59] *** wamba joined
[07:10] *** Alikzus joined
[07:15] *** konsolebox left
[07:16] *** konsolebox joined
[07:23] *** konsolebox left
[07:26] *** konsolebox joined
[07:33] *** konsolebox left
[07:35] *** konsolebox joined
[07:39] *** noganex joined
[07:43] *** pharv left
[07:47] *** espadrine left
[08:00] *** konsolebox left
[08:01] *** konsolebox joined
[08:02] *** psychoslave joined
[08:06] *** konsolebox left
[08:07] *** konsolebox joined
[08:17] *** konsolebox left
[08:17] *** rindolf joined
[08:17] *** konsolebox joined
[08:20] *** evalable6 left
[08:20] *** evalable6 joined
[08:23] *** konsolebox left
[08:24] *** konsolebox joined
[08:25] <Xliff> m: my token EQ { 'EQ' || '=' }; say 'EQ' ~~ EQ;

[08:25] <camelia> rakudo-moar 63a1d25ac: OUTPUT: ¬´Too few positionals passed; expected 1 argument but got 0‚ê§  in regex EQ at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[08:25] <Xliff> m: my token EQ { [ 'EQ' || '=' ] }; say 'EQ' ~~ EQ;

[08:25] <camelia> rakudo-moar 63a1d25ac: OUTPUT: ¬´Too few positionals passed; expected 1 argument but got 0‚ê§  in regex EQ at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[08:25] <Xliff> m: my regex EQ { [ 'EQ' || '=' ] }; say 'EQ' ~~ EQ;

[08:25] <camelia> rakudo-moar 63a1d25ac: OUTPUT: ¬´Too few positionals passed; expected 1 argument but got 0‚ê§  in regex EQ at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[08:25] *** pierre__ left
[08:26] *** pierre__ joined
[08:27] *** pierre__ left
[08:28] *** pierre__ joined
[08:28] *** pierre__ left
[08:29] *** pierre__ joined
[08:30] *** |Sno| left
[08:31] *** cdg joined
[08:33] *** pierre__ left
[08:34] *** konsolebox left
[08:36] *** cdg left
[08:38] *** zakharyas joined
[08:38] *** konsolebox joined
[08:39] *** dakkar joined
[08:42] *** psch joined
[08:43] *** konsolebox left
[08:45] *** konsolebox joined
[08:50] *** konsolebox left
[08:52] *** konsolebox joined
[08:52] <ZzZombo> m: say my token {''}()

[08:52] <camelia> rakudo-moar 63a1d25ac: OUTPUT: ¬´Too few positionals passed; expected 1 argument but got 0‚ê§  in regex  at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[08:52] <ZzZombo> m: say my token {''}

[08:52] <camelia> rakudo-moar 63a1d25ac: OUTPUT: ¬´token {''}‚ê§¬ª

[08:52] <ZzZombo> ^

[08:53] <psch> m: my token EQ { [ 'EQ' || '=' ] }; say 'EQ' ~~ /<&EQ>/

[08:53] <camelia> rakudo-moar 63a1d25ac: OUTPUT: ¬´ÔΩ¢EQÔΩ£‚ê§¬ª

[08:54] <psch> m: my token EQ { [ 'EQ' || '=' ] }; say 'EQ' ~~ &EQ

[08:54] <camelia> rakudo-moar 63a1d25ac: OUTPUT: ¬´ÔΩ¢EQÔΩ£‚ê§¬ª

[09:00] *** dct_ joined
[09:06] *** zakharyas left
[09:06] *** zakharyas joined
[09:10] *** abraxxa joined
[09:10] *** zakharyas left
[09:14] *** scimon joined
[09:15] *** abraxxa left
[09:17] *** pmurias joined
[09:26] *** konsolebox left
[09:26] *** zakharyas joined
[09:29] *** konsolebox joined
[09:33] *** wamba left
[09:34] *** abraxxa joined
[09:37] *** lalitmee left
[09:37] *** abraxxa left
[09:40] *** rindolf left
[09:41] *** wamba joined
[09:41] <lizmat> .

[09:44] *** zakharyas left
[09:44] *** zakharyas joined
[09:45] *** rindolf joined
[09:47] *** konsolebox left
[09:49] *** konsolebox joined
[09:51] *** TEttinger left
[09:54] *** abraxxa joined
[09:55] *** pierre__ joined
[09:59] *** konsolebox left
[09:59] *** psychoslave left
[09:59] *** konsolebox joined
[10:02] *** epony left
[10:03] *** epony joined
[10:04] *** konsolebox left
[10:05] <moritz> \o lizmat 

[10:05] *** zakharyas1 joined
[10:06] *** zakharyas left
[10:06] *** konsolebox joined
[10:06] *** sno joined
[10:13] *** Guest14511 left
[10:19] *** dct_ left
[10:19] *** SyrupThinker joined
[10:24] <scimon> Hi lizmat

[10:25] *** dct_ joined
[10:28] *** dct_ left
[10:28] *** wamba left
[10:30] *** pierre__ left
[10:31] *** dct_ joined
[10:31] *** pierre__ joined
[10:35] *** dct_ left
[10:36] *** pierre__ left
[10:42] *** dct_ joined
[10:43] *** konsolebox left
[10:45] *** konsolebox joined
[10:46] <scimon> So my work Perl6 coding dojo is going to look at doing Proc::InvokeEditor for Perl6 starting today. 

[10:47] <scimon> Long term plan replicate and then add an async promise option. :)

[10:47] <scimon> When we've got *some* code I'll add a WIP link.

[10:51] *** dct_ left
[10:55] *** wamba joined
[10:56] *** konsolebox left
[10:57] *** konsolebox joined
[11:05] *** zakharyas1 left
[11:09] *** khw joined
[11:18] *** pierre__ joined
[11:20] *** zakharyas joined
[11:25] *** konsolebox left
[11:26] *** konsolebox joined
[11:29] *** wamba left
[11:30] <scimon> Tonight I might acutally install Perl6 on my Windows gaming box. (Coding in Windows, what a novel idea).

[11:32] *** wamba joined
[11:33] *** konsolebox left
[11:35] *** konsolebox joined
[11:36] <DrForr> scimon: I'm not going to discourage you as we need additional Windows love, but I've recently switched to a console-only VM and ssh'ing into it from Cygwin.

[11:37] <DrForr> (just saying, if you're doing it for benefit to the P6 community I'm all *for* it! But if you're just playing, then a simpler way might be a headless VirtualBox setup.)

[11:37] <scimon> Personally I hate the idea. But I also hate the idea of leaving a job half done and if I'm going to get  Proc::InvokeEditor working I am going to need to look at getting it working in Windows. 

[11:38] <DrForr> That sounds intriguing.

[11:38] <scimon> As I've got Windows running at home (because there are some games that won't run in a real OS) I might as well install it there. 

[11:39] <scimon> Basically I'm running a "Lets learn Perl6 thing at work" we've had a few weeks of playing about and I said "Right lets do a project... what shall we do?"

[11:39] <scimon> And we decided on porting a module.

[11:39] <scimon> We took a look at the p5 most wanted list to try and pick something we could do and Proc::InvokeEditor seemed doable.

[11:40] *** konsolebox left
[11:40] <scimon> Once we've got the vanilla P5 version working (in Linux at least) we'll look at a new bit to do it async.

[11:40] <DrForr> Didn't even know there was a p5 module by that name...

[11:41] <scimon> Nor did I.

[11:41] <scimon> But it does look useful for a few things. 

[11:41] *** konsolebox joined
[11:42] <scimon> I'll look at the Windows version once I'm happy the Linux one is working.

[11:43] <DrForr> Neat. How's the enthusiasm level?

[11:45] *** notbenh left
[11:45] *** notbenh joined
[11:46] <scimon> Well it's a small group right now. But I'm working on growing it. And mine has ups and downs. :) (Right now after watching the video of my talk from LPW my main enthusiasm is spend more time in the gym) :)

[11:46] <scimon> But I'm hoping we'll have something in place after lunch. 

[11:46] *** cdg_ joined
[11:47] <Geth> ¬¶ doc: aluaces++ created pull request #1779: Correct small typo: "suck like".

[11:47] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/1779

[11:50] *** cdg_ left
[11:50] <DrForr> I really should watch my own videos more; I'm kind of waiting to see what happens with OSCON.

[11:51] <DrForr> Aaaaah, Skype in the background was apparently f*cking with my YT video.

[11:51] *** zakharyas left
[11:52] <scimon> I try and watch them to get some idea of how I'm doing. I've only done two talks so far and I've got a lot to learn. 

[11:52] *** zakharyas joined
[11:52] *** kurahaupo joined
[11:56] <Geth> ¬¶ doc: 9bb3d4242e | (Alberto Luaces)++ (committed using GitHub Web editor) | doc/Language/variables.pod6

[11:56] <Geth> ¬¶ doc: Correct small typo: "suck like"

[11:56] <Geth> ¬¶ doc: 

[11:56] <Geth> ¬¶ doc: Left as "such like" for consistency with the rest of the text.

[11:56] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9bb3d4242e

[11:56] <synopsebot> Link: https://doc.perl6.org/language/variables

[11:56] <Geth> ¬¶ doc: f676756b86 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | doc/Language/variables.pod6

[11:56] <Geth> ¬¶ doc: Merge pull request #1779 from aluaces/patch-1

[11:56] <Geth> ¬¶ doc: 

[11:56] <Geth> ¬¶ doc: Correct small typo: "suck like".

[11:56] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/f676756b86

[11:56] <DrForr> I'm just lazy. Too lazy, maybe, given FOSDEM.

[11:58] <Ulti> scimon: I watched your latest vid want me to PM a couple of things I noticed? 

[12:03] <scimon> Sure. Though I already know that junctions are not threaded (probably should comment that in the notes). Feel free to comment on the video :)

[12:03] <scimon> Hope it wasn't *too* bad.

[12:04] *** zakharyas left
[12:05] *** pmurias left
[12:08] *** konsolebox left
[12:08] *** konsolebox joined
[12:09] <scimon> (I just popped the slides for the talk up on the video too)

[12:18] *** konsolebox left
[12:21] *** konsolebox joined
[12:28] *** konsolebox left
[12:30] *** konsolebox joined
[12:35] *** konsolebox left
[12:37] *** konsolebox joined
[12:44] *** konsolebox left
[12:45] *** konsolebox joined
[12:48] *** tt left
[12:48] *** tt_ joined
[13:03] *** wamba left
[13:03] *** rindolf left
[13:04] <moritz> FYI, I just rebooted www.p6c.org because it was unreachable

[13:04] <moritz> no idea what went wrong though

[13:04] *** konsolebox left
[13:05] *** konsolebox joined
[13:07] *** rindolf joined
[13:10] *** wamba joined
[13:20] *** colomon left
[13:37] <Geth> ¬¶ doc: c532a3bb11 | (Will "Coke" Coleda)++ | 7 files

[13:37] <Geth> ¬¶ doc: fix typos

[13:37] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/c532a3bb11

[13:37] <Geth> ¬¶ doc: 9b99292292 | (Will "Coke" Coleda)++ | doc/Type/Signature.pod6

[13:37] <Geth> ¬¶ doc: prefer space after comma

[13:37] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9b99292292

[13:37] <synopsebot> Link: https://doc.perl6.org/type/Signature

[13:38] *** curan left
[13:45] *** konsolebox left
[13:46] *** konsolebox joined
[13:48] *** zakharyas joined
[13:55] *** aborazmeh joined
[13:55] *** aborazmeh left
[13:55] *** aborazmeh joined
[13:56] *** eliasr joined
[13:58] *** wamba left
[13:58] <scimon> Well that went well. Early steps but we're learnig stuff.

[13:59] *** aborazmeh left
[14:03] *** zakharyas left
[14:04] <DrForr> Yay, encouraging signs.

[14:04] *** wamba joined
[14:10] <scimon> We got the basic concept working with a test script and Proc::Async :)

[14:12] <scimon> One wrinkle is the original module uses wantarray to return a string or array. 

[14:13] <lizmat> perhaps you could return a List with a custom .Str ?

[14:15] <lizmat> m: my $l = (1,2,3) but "foo"; say $l; put $l

[14:15] <camelia> rakudo-moar 63a1d25ac: OUTPUT: ¬´(1 2 3)‚ê§foo‚ê§¬ª

[14:20] <scimon> That's a thought. 

[14:21] <scimon> Or a Str with a but List on it. 

[14:22] *** rab26 joined
[14:23] * teatime continues thinking about how to duplicate the functionality of gulp.js in perl6

[14:23] <rab26> Hello, I'm on Mint 18.1 and have rakudo installed but am unable to install Zef. Does anybody know how to solve this? I get "Undeclared names" for JSONException and Supplier

[14:24] <rab26> sorry in advance if this is the wrong place to ask

[14:25] <scimon> What does perl6 -v return?

[14:25] <[Coke]> Should be fine; how are you trying to install zef? what version of perl6 do you have? (perl6 --version) 

[14:27] <lizmat> scimon: internally, usually .list is called to get something listy, or ~~ Iterable is done

[14:28] <lizmat> scimon: feels easier to cover all of the str coercions than vice-versa

[14:28] <scimon> Point. :)

[14:29] *** zakharyas joined
[14:30] <rab26> "This is perl6 version 2015.11 built on MoarVM version 2015.11" - I'm using the version on the Mint repo, and trying to install Zef via git. Looking at the version now I feel quite silly though, as this is very old - I'll try installing rakudo from git :)

[14:30] <moritz> rab26++

[14:31] <[Coke]> good plan.

[14:31] <jast> silly distros, always using ancient versions

[14:32] <scimon> lizmat: I'm still trying to work out the use case for the list version. More when you're going to want the returned data in a list. Anyway. It's all early stages.

[14:34] <DrForr> scimon: If it's preventing you from making progress, then maybe create a wrapper method to return the scalar versio, and modify the tests temporarily?

[14:35] <DrForr> Once you know what it's doing in Perl 5 it might not even be neede for p6, or have been a mistake

[14:35] <scimon> It's fine :) partly it's just discuss the best way to do it in the team. 

[14:38] <DrForr> Gotcha. My memory says I mostly did that so the scalar was the first item, rather than the last item in the array so I didn't have to create a scratch list or ()[-1].

[14:38] <DrForr> ER, ()[0]

[14:43] <scimon> Side note. Proc::Async is all shades of awesome :)

[14:46] <moritz> it is!

[14:48] *** cdg joined
[14:48] *** skids joined
[14:48] *** cdg_ joined
[14:51] *** comborico1611 joined
[14:53] *** cdg left
[14:56] <Ulti> .win 4

[14:56] <Ulti> erk

[14:59] *** zakharyas left
[15:02] *** buggable left
[15:02] *** cdg_ left
[15:02] *** cdg joined
[15:04] *** lizmat left
[15:07] *** cdg left
[15:08] *** zakharyas joined
[15:09] *** huggable left
[15:09] *** ZofBot left
[15:11] *** Eyoson joined
[15:13] *** zakharyas left
[15:14] *** zakharyas joined
[15:15] *** cono left
[15:15] *** AlexDaniel joined
[15:15] *** jeromelanteri left
[15:21] *** buggable joined
[15:21] *** ChanServ sets mode: +v buggable

[15:24] <Eyoson> Hello, can anyone tell me if R* optimizes tail recursion

[15:26] <jnthn> No

[15:26] <jnthn> (uh, "no it doesn't", not "nobody can tell you" :))

[15:27] <Eyoson> alright, thanks m8

[15:28] <moritz> m4 is half a m8, right? :-)

[15:29] *** pierre__ left
[15:30] *** pierre__ joined
[15:32] *** pierre___ joined
[15:34] *** pierre__ left
[15:37] *** kurahaupo left
[15:38] <Eyoson> lol

[15:39] *** pierre___ left
[15:45] <jkramer> m: (.=succ xx 4 with my $x = 'm4')[*-1]

[15:45] <camelia> rakudo-moar 0d0fe7934: ( no output )

[15:45] <jkramer> m: say (.=succ xx 4 with my $x = 'm4')[*-1]

[15:45] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´m8‚ê§¬ª

[15:46] <jkramer> m: my $x = 'm4'; say --$x

[15:46] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´m3‚ê§¬ª

[15:46] <jkramer> m: say 'm4'--

[15:46] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´Cannot resolve caller postfix:<-->(Str); the following candidates‚ê§match the type but require mutable arguments:‚ê§    (Mu:D $a is rw)‚ê§‚ê§The following do not match for other reasons:‚ê§    (Bool:D $a is rw)‚ê§    (Bool:U $a is rw)‚ê§    (Int:D $a ‚Ä¶¬ª

[15:46] <jkramer> m: say 'm4'-1

[15:46] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5m4' (indicated by ‚èè)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:54] *** zakharyas left
[16:01] *** zakharyas joined
[16:02] *** zakharyas left
[16:10] *** troys joined
[16:12] *** ZzZombo left
[16:13] *** ZzZombo joined
[16:14] *** eroux left
[16:17] *** xenotrope left
[16:19] *** xenotrope joined
[16:19] *** ZzZombo left
[16:20] *** ZzZombo joined
[16:23] *** pmurias joined
[16:23] *** Eyoson left
[16:26] *** zakharyas joined
[16:28] *** zakharyas left
[16:33] *** wamba left
[16:56] *** SyrupThinker left
[16:58] *** ZzZombo left
[16:58] *** ZzZombo joined
[17:00] *** abraxxa left
[17:06] *** sno left
[17:10] *** zakharyas joined
[17:25] *** wamba joined
[17:26] <Geth> ¬¶ doc: 87f1ed20db | (JJ Merelo)++ | doc/Language/objects.pod6

[17:26] <synopsebot> Link: https://doc.perl6.org/language/objects

[17:26] <Geth> ¬¶ doc: Adds accessor overriding example

[17:26] <Geth> ¬¶ doc: 

[17:26] <Geth> ¬¶ doc: I'm using the same wording mentioned in the first comment by

[17:26] <Geth> ¬¶ doc: @ronaldxs (get well soon :-) ) and including an example that overrides

[17:26] <Geth> ¬¶ doc: mutator and accessor, not using `Proxy` but just using multi methods.

[17:26] <Geth> ¬¶ doc: 

[17:26] <Geth> ¬¶ doc: I hope it's OK, so this closes #136, phew, but obviously if anyone has

[17:26] <Geth> ¬¶ doc: anything to object please feel free to re-open and make suggestions

[17:26] <Geth> ¬¶ doc: and/or pull requests.

[17:26] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/87f1ed20db

[17:30] *** scimon left
[17:32] *** dakkar left
[17:40] *** SyrupThinker joined
[17:40] <Xliff> How can you get the name of the current method?

[17:41] <moritz> m: class A { method b() { say &?ROUTINE.name } }; A.b

[17:41] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´b‚ê§¬ª

[17:41] <Xliff> moritz++

[17:42] *** lizmat joined
[17:43] <[Coke]> JJ - notes like that don't belong in the commit message; they belong in the ticket. IMO

[17:43] <[Coke]> the commit message is about the change you made.

[17:49] <Geth> ¬¶ doc: 53c012a66b | (JJ Merelo)++ | doc/Language/objects.pod6

[17:49] <Geth> ¬¶ doc: Changes tab to spaces

[17:49] <Geth> ¬¶ doc: 

[17:49] <Geth> ¬¶ doc: The program actually returned tabs, you know... But point

[17:49] <Geth> ¬¶ doc: taken. Closes #1780.

[17:49] <synopsebot> Link: https://doc.perl6.org/language/objects

[17:49] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/53c012a66b

[17:52] <[Coke]> again, comments like that don't belong in the commit message, IMO

[17:53] <Xliff> Is there a way to link to a github gist comment?

[17:54] <Xliff> Ah. Found it.

[17:55] <Xliff> https://gist.github.com/Xliff/5b8f8a7bd2ca9f9087c04895ee9630b6#gistcomment-2352640 # moritz++ and DrForr++

[17:55] <AlexDaniel> [Coke]: I don't think JJ is reading this?

[17:55] <yoleaux> 13:48Z <tbrowder> AlexDaniel: My nqp PR #414 is now passing all checks after a second commit.  Ready for merge if it satisfies you.

[17:56] <[Coke]> AlexDaniel: Yup, moved it to the ticket.

[17:57] <[Coke]> Xliff: yah, I think you have to cheat.

[17:59] *** zakharyas left
[18:03] *** ribasushi left
[18:03] <Xliff> Well, now I am at the dreaded <simple_expr> point in DDL.

[18:03] <Xliff> Whomever told me that would be fun.... LIED.

[18:04] <Geth> ¬¶ doc: 598d950fb1 | (JJ Merelo)++ | doc/Language/objects.pod6

[18:04] <Geth> ¬¶ doc: Modifies example to use only spaces

[18:04] <synopsebot> Link: https://doc.perl6.org/language/objects

[18:04] <Geth> ¬¶ doc: 

[18:04] <Geth> ¬¶ doc: And, just maybe, closes 1780

[18:04] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/598d950fb1

[18:07] *** ribasushi joined
[18:07] <Geth> ¬¶ doc: 881d17d195 | (JJ Merelo)++ | doc/Language/objects.pod6

[18:07] <Geth> ¬¶ doc: Closes #1780, my bad before

[18:07] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/881d17d195

[18:09] *** Kaiepi left
[18:11] *** Zoffix joined
[18:11] *** AlexDani` joined
[18:13] *** ZofBot joined
[18:13] *** ChanServ sets mode: +v ZofBot

[18:14] *** pharv joined
[18:14] *** lizmat left
[18:15] *** AlexDani` left
[18:16] *** AlexDaniel left
[18:17] *** huggable joined
[18:17] *** ChanServ sets mode: +v huggable

[18:18] <Zoffix> Is it just me or are all these weird variables (e.g. $‚≤ß, $√æing, $^√æ) being added to examples in docs are kinda distracting? These are English docs and these aren't the variable names a typical English-speaking programmer would use in their code, which makes the reader question why these special symbols were used.

[18:18] *** huggable left
[18:18] *** huggable joined
[18:18] *** ChanServ sets mode: +v huggable

[18:21] *** zeddy_k joined
[18:23] *** ribasushi left
[18:23] *** lizmat joined
[18:28] *** zeddy_k left
[18:29] *** ribasushi joined
[18:30] <Zoffix> Especially if they're coming from sigil-less languages; it's easy to assume `$√æ` is the sigil.

[18:32] *** ZzZombo left
[18:32] *** ZzZombo joined
[18:37] *** ZzZombo left
[18:37] *** ZzZombo joined
[18:38] *** AlexDani` joined
[18:38] *** pharv left
[18:39] *** pharv joined
[18:39] <Zoffix> Guess tis just me :)

[18:39] *** Zoffix left
[18:42] *** Exodist left
[18:42] <[Coke]> No, it's not just you.

[18:43] *** Exodist joined
[18:43] <[Coke]> I think it's a stylistic choice that we should decide on and enforce, and I'm not a fan of the non-english ones as well. examples should focus on showing you the one thing, and "cool variable names" isn't something that's part of "here's a for loop"

[18:44] *** sno joined
[18:44] <Juerd> +1

[18:44] <[Coke]> and sorry, not 'non-english', but mainly 'non-ASCII', I guess. Again, if it's a stylistic thing across the board, that's fine, but I suspect the concensus is not to do that.

[18:44] <Juerd> Examples that try to show off too many features at once really bother me

[18:45] <Juerd> In fact, I'd really prefer if everything but the main point of the example would be so simple that people coming from practically any language can follow it

[18:46] *** pharv left
[18:46] *** Rawriful joined
[18:48] *** pharv joined
[18:48] *** ZzZombo left
[18:48] *** ZzZombo joined
[18:50] <[Coke]> I think that's the platonic ideal here, yes.

[18:50] *** darutoko left
[18:56] *** ZzZombo left
[18:56] *** ZzZombo joined
[18:57] <mienaikage> A JSON::Fast bug bit me, it doesn't seem to like \u and \n together in the same string at the moment :(

[18:58] *** sno left
[19:01] *** sno joined
[19:04] <AlexDani`> timotimo: ‚Üë?

[19:04] *** AlexDani` is now known as AlexDaniel

[19:05] <timotimo> mienaikage: oh crap! thanks, can you give me the json that reroduces the bug?

[19:06] <mienaikage> I've added a comment in https://github.com/timo/json_fast/issues/35

[19:06] *** pharv left
[19:07] <El_Che> [Coke]: I get annoyed with the atom utf8 symbol in code

[19:07] *** lucasb joined
[19:08] *** pharv joined
[19:08] <mienaikage> The json I'd been using when the bug hit me was from http://exercism.io/api/v1/submissions/f73d57359c564bdf937c6fce392ba5f5

[19:08] <timotimo> damn it, i didn't notice that ticket at all

[19:10] <timotimo> that happens when your github notifications show as "1823 unread"

[19:15] *** setty1 joined
[19:15] <mienaikage> Heh, my email inbox is in a similar state :P

[19:16] *** troys left
[19:17] *** troys joined
[19:20] <timotimo> writing that json module has been exhausting and taught me to hate json with a passion

[19:22] *** robertle joined
[19:23] <robertle> is there a way to use/require a module and call something in it, conditionally on that module being present? if the module is not present, just don't call stuff from it? without EVAL or similar evil?

[19:26] <robertle> I can do "try require", but I don't understand how I can skip calling stuff in that module without making that a compile-time problem...

[19:28] <timotimo> well, with a "try require" you get the symbols but if the stuff wasn't available it'll just be empty

[19:29] <timotimo> http://rakudo.org/2017/03/18/lexical-require-upgrade-info/ - robertle 

[19:29] <psch> i'm surprised that a PackageHOW seems generally falsey

[19:29] <psch> m: require Test; say so Test

[19:29] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´False‚ê§¬ª

[19:29] <psch> m: require Test; say Test::.keys

[19:29] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´(&todo_output EXPORT &failure_output &output)‚ê§¬ª

[19:29] <psch> m: say so CORE

[19:29] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´False‚ê§¬ª

[19:30] <psch> 'cause that was my intuition -- e.g. try require Foo; if Foo { #`[ we did load it ] } else { #`[ didn't ] }

[19:30] <robertle> psch: yeah, but how do I call a method in Foo in the

[19:31] <robertle> "we did load it"Acase?

[19:31] *** sno left
[19:31] <psch> robertle: i'd still import there :)  doesn't matter though, that snippet doesn't do what you want

[19:31] <robertle> Test::.keys looks good, but I don't get my exported sub in my keys list, will investigate that route some more

[19:32] <psch> robertle: you should read timotimo++'s link i think 

[19:33] <AlexDaniel> mienaikage: I have 16663 unread messages in my mail. I don't think you can beat that? :D

[19:35] * psch knows how to use "mark all as read" :)

[19:35] <mienaikage> Not with my work address, my personal one is currently 19979 though lol

[19:36] <robertle> psch, timotimo: totally, that

[19:36] <robertle> did the trick! nad sorry for the

[19:36] <robertle>  noise, keyboard is flaky

[19:37] <AlexDaniel> psch: I still want to know which ones I've read, especially when I come back to some email that I must have read but didn't

[19:37] <psch> AlexDaniel: oh, yeah, i'm being snarky.  i do use gmails starring feature for "get back to this" instead

[19:38] *** sno joined
[19:38] *** sno left
[19:45] *** cdg joined
[19:45] *** sno joined
[19:49] *** cdg left
[19:51] *** SyrupThi` joined
[19:51] *** SyrupThi` left
[19:54] *** SyrupThinker left
[19:57] *** [Sno] joined
[19:59] *** sno left
[20:04] *** pharv left
[20:04] *** pharv joined
[20:06] * skids had 200k or so last he looked.

[20:08] *** [Sno] left
[20:29] *** kurahaupo joined
[20:45] <b2gills> https://codegolf.stackexchange.com/a/155896/1147

[20:46] <b2gills> m: .put for [Z~] ((' Aa','a A','Aa ')¬ª.ords ¬´+¬ª^26)¬ª.chr # I just found a use for matrix addition in a Code Golf entry

[20:46] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´ bC#eF&hI)kL,nO/qR2tU5wX8z‚ê§A!cD$fG'iJ*lM-oP0rS3uV6xY9‚ê§aB"dE%gH(jK+mN.pQ1sT4vW7yZ‚ê§¬ª

[20:48] <psch> m: ([Z~] ((' Aa','a A','Aa ')¬ª.ords ¬´+¬ª^26)¬ª.chr)>>.put

[20:48] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´ bC#eF&hI)kL,nO/qR2tU5wX8z‚ê§A!cD$fG'iJ*lM-oP0rS3uV6xY9‚ê§aB"dE%gH(jK+mN.pQ1sT4vW7yZ‚ê§¬ª

[20:48] <psch> ...still don't have compose set up here :/

[20:49] <psch> b2gills: i think postfix hyper method put gives you 2 chars?

[20:49] <b2gills> While that currently works, it might print them in a different order in the future.

[20:50] <psch> oh right 

[20:50] <psch> duh

[20:50] <psch> i also discovered that we can't chain reduce

[20:50] <psch> ooh wait

[20:50] <psch> i think i got confused actually... hold on

[20:51] <b2gills> m: [Z~](((' Aa','a A','Aa ')¬ª.ords ¬´+¬ª^26)¬ª.chr)>>.put # also [Z~](‚Ä¶) works btw

[20:51] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´ bC#eF&hI)kL,nO/qR2tU5wX8z‚ê§A!cD$fG'iJ*lM-oP0rS3uV6xY9‚ê§aB"dE%gH(jK+mN.pQ1sT4vW7yZ‚ê§¬ª

[20:52] <psch> yeah, i'm a bit insecure with some bits of methodop precedence :)

[20:52] *** zakharyas joined
[20:53] *** zakharyas left
[20:54] <psch> m: quietly [[&put]] [Z~] ((' Aa','a A','Aa ')¬ª.ords ¬´+¬ª^26)¬ª.chr 

[20:54] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´ bC#eF&hI)kL,nO/qR2tU5wX8zA!cD$fG'iJ*lM-oP0rS3uV6xY9‚ê§TrueaB"dE%gH(jK+mN.pQ1sT4vW7yZ‚ê§¬ª

[20:54] <psch> if one would ditch the quietly..?

[20:54] <psch> i added it for clarity 

[20:54] *** rindolf left
[20:54] *** zakharyas joined
[20:55] <psch> m: say ".put for".chars - "[[&put]]".chars

[20:55] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´0‚ê§¬ª

[20:55] <psch> eh vOv

[20:55] <lizmat> b2gills: |<1 2 0>    # one char less ?

[20:58] <psch> it seems unfortunate that we don't have a shortname for .combinations wrt this golf :)

[20:59] <psch> wait no, i want .rotor anyway..?

[20:59] *** lizmat left
[21:00] * psch &

[21:03] *** rindolf joined
[21:04] *** zakharyas left
[21:05] *** zakharyas joined
[21:05] <psch> ...actually

[21:05] <psch> m: quietly [[&put]] [Z~]((' Aa','a A','Aa ')¬ª.ords ¬´+¬ª^26)¬ª.chr

[21:05] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´chr codepoint 329867351017038104734110776441107947113825011685531198856122 (0x348D07D6CF57DC2F0E42B09F2873E68A8536E9387341029BBA) is too large‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:05] <b2gills> For a second lizmat had me thinking that |<1 2 0> was for the second golf (I generally put several up at the same time, and only count the last one)

[21:05] <b2gills> I had tried several ways of shortening the first one till I gave up, and tried another algorithm

[21:06] <psch> "chr codepoint is too large" sounds internal-ish

[21:18] <b2gills> `[Z~](‚Ä¶)¬ª.chr`  =:=  `( [Z~] ‚Ä¶ )¬ª.chr` so the `¬ª.chr` happens too late

[21:19] <psch> see, that's *exactly* the methodop precedence i mentioned earlier... >_>

[21:27] *** Zoffix joined
[21:27] <Zoffix> b2gills: you can save 2 chars by using ¬´¬ª for the three strings

[21:27] <Zoffix> m: [Z~]((¬´' Aa''a A''Aa '¬ª¬ª.ords ¬´+¬ª^26)¬ª.chr)¬ª.put

[21:27] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´ bC#eF&hI)kL,nO/qR2tU5wX8z‚ê§A!cD$fG'iJ*lM-oP0rS3uV6xY9‚ê§aB"dE%gH(jK+mN.pQ1sT4vW7yZ‚ê§¬ª

[21:27] <Zoffix> m: dd ¬´' Aa''a A''Aa '¬ª

[21:27] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´(" Aa", "a A", "Aa ")‚ê§¬ª

[21:29] *** TEttinger joined
[21:29] *** Zoffix left
[21:30] <b2gills> Unfortunately it saves 0 bytes, which is what actually matters on that website

[21:36] <lucasb> m: 0x110000.chr

[21:36] <camelia> rakudo-moar 0d0fe7934: ( no output )

[21:36] <lucasb> m: 0x110000.chr.say

[21:36] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´Error encoding UTF-8 string: could not encode codepoint 1114112 (0x110000), codepoint out of bounds. Cannot encode higher than 1114111 (0x10FFFF)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:37] <psch> that seems less internals

[21:37] <psch> lucasb++

[21:37] <b2gills> m: .put for [Z~] (<!Bb b!B Bb!>¬ª.ords ¬´+¬ª(^26-1))¬ª.chr

[21:37] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´ bC#eF&hI)kL,nO/qR2tU5wX8z‚ê§A!cD$fG'iJ*lM-oP0rS3uV6xY9‚ê§aB"dE%gH(jK+mN.pQ1sT4vW7yZ‚ê§¬ª

[21:37] <lucasb> the first eval should die too, right?

[21:37] <psch> probably something about the int/Int boundary that gets us the internals message?

[21:37] <psch> lucasb: i'm not sure, actually.  if it *is* a HLL Exception it should throw on sink

[21:38] <psch> lucasb: this probably means yours is on the internal side too, actually

[21:39] <b2gills> m: 0x110000.chr.^name.say

[21:39] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´Str‚ê§¬ª

[21:40] <psch> aha

[21:40] <psch> "codepoint is too large" *is* an X::AdHoc

[21:40] <psch> m: try 0x35832858181828512858128581285.chr; say $!.WHAT

[21:40] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´(AdHoc)‚ê§¬ª

[21:40] <psch> m: try 0x110000.chr; say $!.WHAT

[21:40] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´(Any)‚ê§¬ª

[21:41] <psch> m: try say 0x110000.chr; say $!.WHAT

[21:41] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´(AdHoc)‚ê§¬ª

[21:41] <psch> that's a relief, they're both already HLLish enough :)

[21:41] <b2gills> It is also happening because of Str.encode() (or related) rather than &chr

[21:41] <psch> might want them typed, maybe even the same type, but i'm not touching unicode stuff :)

[21:44] <psch> ...i'm also not touching "do we encode on &chr or on &say" vOv

[21:45] <Xliff> Are there grammar checkers for Perl6?

[21:46] <Xliff> I want something that will check to see if all of the rules have been defined.

[21:50] *** preaction left
[21:51] *** preaction joined
[21:55] <psch> Xliff: something like "for Grammar.^methods { say $_.^name ~ " isn't implemented" if .yada }" i think?

[21:55] <psch> m: sub a { ... }; sub b { 1 }; say a.yada; say b.yada

[21:55] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´Stub code executed‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:55] *** brrt joined
[21:55] <psch> m: sub a { ... }; sub b { 1 }; say &a.yada; say &b.yada # & nouns verbs :l

[21:55] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´True‚ê§False‚ê§¬ª

[21:57] <psch> m: class A { method b { ... } }; say A::b.yada

[21:57] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´Could not find symbol '&b'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:58] <psch> m: class A { method b { ... } }; say A.^lookup('b').yada

[21:58] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´True‚ê§¬ª

[21:58] <b2gills> m: role Bar { method baz {...} }; grammar Foo does Bar { }

[21:58] <psch> m: grammar G { token TOP { ... } }; G.^lookup('TOP').yada.say

[21:58] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Method 'baz' must be implemented by Foo because it is required by roles: Bar.‚ê§at <tmp>:1‚ê§¬ª

[21:58] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´False‚ê§¬ª

[21:58] <psch> hmm, or not 

[21:59] <psch> too many magicks in grammars :(

[21:59] <jnthn> ... matches any 3 chars :)

[21:59] <psch> oh duh

[21:59] <psch> of course...

[22:00] <psch> there has been a palm to forehead contact on this side of my screen just now :p

[22:00] <psch> huh, do we have stubbed rules?

[22:00] <psch> onlystar is proto-specific, isn't it?

[22:01] <b2gills> It could be made to work with "\c[HORIZONTAL ELLIPSIS]"

[22:01] <b2gills> m: grammar G { token TOP { ‚Ä¶ } }

[22:01] <camelia> rakudo-moar 0d0fe7934: OUTPUT: ¬´5===SORRY!5===‚ê§Unrecognized regex metacharacter ‚Ä¶ (must be quoted to match literally)‚ê§at <tmp>:1‚ê§------> 3grammar G { token TOP {7‚èè5 ‚Ä¶ } }‚ê§Unrecognized regex metacharacter   (must be quoted to match literally)‚ê§at <tmp>:1‚ê§----‚Ä¶¬ª

[22:01] <jnthn> Since a token is just a kind of method, then you can always method TOP { ... } :)

[22:01] <psch> jnthn++

[22:02] <jnthn> I think the original question is probably more about if there's anything that will look at all the rule *calls* in a grammar and say if they map to a declared token

[22:02] <psch> i'm gonna actually step away from the thinky-stuff for today

[22:02] <jnthn> Which I'm not aware of there being at present

[22:06] *** zakharyas left
[22:06] *** skids left
[22:08] <lucasb> Here on my 32-bit machine, I'm getting different results when I test (2**31-1).chr and when I type the literal value 0x7FFFFFFF.chr

[22:08] <lucasb> Both values are the same, but the one with exponentiantion dies and the literal one doesn't

[22:09] <lucasb> but I can't reproduce it here on 64-bit camelia

[22:09] <lucasb> :/

[22:10] *** espadrine joined
[22:19] *** sno joined
[22:24] <moritz> lucasb: the result of 2**31-1 might be stored as a bigint internally, while the other isn't

[22:24] *** lizmat joined
[22:30] <lucasb> moritz: thanks

[22:30] <lucasb> doing (my int $ = 2**31-1) made both behave the same

[22:32] *** statisfiable6 left
[22:32] *** unicodable6 left
[22:32] *** quotable6 left
[22:32] *** reportable6 left
[22:32] *** nativecallable6 left
[22:32] *** notable6 left
[22:32] *** committable6 left
[22:32] *** releasable6 left
[22:32] *** greppable6 left
[22:32] *** evalable6 left
[22:32] *** squashable6 left
[22:32] *** bloatable6 left
[22:32] *** shareable6 left
[22:32] *** benchable6 left
[22:32] *** bisectable6 left
[22:32] *** coverable6 left
[22:32] <lucasb> or... (my Int $ = 0x7FFFFFFF + 1 - 1).chr

[22:33] *** brrt left
[22:36] <Xliff> jnthn++: That's exactly what I am looking for.

[22:37] <Xliff> Map to a declared token or rule, really.

[22:37] <Xliff> I really don't want to have to write another script to parse the DDL parser I am writing. :P :D

[22:42] *** nativecallable6 joined
[22:42] *** ChanServ sets mode: +v nativecallable6

[22:42] *** evalable6 joined
[22:42] *** greppable6 joined
[22:42] *** notable6 joined
[22:42] *** quotable6 joined
[22:42] *** ChanServ sets mode: +v quotable6

[22:42] *** bloatable6 joined
[22:42] *** ChanServ sets mode: +v bloatable6

[22:42] *** reportable6 joined
[22:42] *** coverable6 joined
[22:42] *** committable6 joined
[22:42] *** ChanServ sets mode: +v committable6

[22:42] *** benchable6 joined
[22:42] *** ChanServ sets mode: +v benchable6

[22:42] *** releasable6 joined
[22:42] *** bisectable6 joined
[22:42] *** unicodable6 joined
[22:42] *** ChanServ sets mode: +v unicodable6

[22:42] *** shareable6 joined
[22:42] *** statisfiable6 joined
[22:58] *** lucasb left
[22:59] *** wamba left
[23:01] *** bisectable6 left
[23:05] *** shareable6 left
[23:05] *** notable6 left
[23:05] *** committable6 left
[23:05] *** releasable6 left
[23:05] *** benchable6 left
[23:05] *** quotable6 left
[23:05] *** unicodable6 left
[23:05] *** nativecallable6 left
[23:05] *** bloatable6 left
[23:05] *** evalable6 left
[23:05] *** reportable6 left
[23:05] *** greppable6 left
[23:05] *** coverable6 left
[23:05] *** statisfiable6 left
[23:09] *** pharv left
[23:09] <Xliff> m: my token _rule { '<' \w+ '>' }; my $a = "<bar>aaa<ber>;;;<foo>^&&&"; say ($a ~~ &_rule);

[23:09] <camelia> rakudo-moar beaad7b97: OUTPUT: ¬´ÔΩ¢<bar>ÔΩ£‚ê§¬ª

[23:10] <Xliff> Is there any way to get the above to catch all of "bar", "ber" and "foo"?

[23:10] <Xliff> Hopefully without changing the token _rule.

[23:10] *** pharv joined
[23:14] <Xliff> m: my token _rule { '<' \w+ '>' [ .+?  <_rule> ]? }; my $a = "<bar>aaa<ber>;;;<foo>^&&&"; say ($a ~~ &_rule);

[23:14] <camelia> rakudo-moar beaad7b97: OUTPUT: ¬´No such method '_rule' for invocant of type 'Match'. Did you mean 'prune'?‚ê§  in regex _rule at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:15] <Xliff> ^^ Recursive token doesn't seem to work. Was hoping there was a way to do m//g, but with tokens or rules.

[23:15] <Xliff> Thanks

[23:16] *** pharv left
[23:16] *** pharv joined
[23:17] <Xliff> Dur. Overthinking. This is better done with a regexp.

[23:21] <timotimo> you can call tokens and regexes from inside a regex :)

[23:21] *** Herby_ joined
[23:21] <Herby_> \o

[23:22] <Herby_> o/

[23:25] *** setty1 left
[23:26] <AlexDaniel> anyone seeing any issues on HEAD?

[23:27] <AlexDaniel> .oO( if you're not using rakudo on HEAD, can you please shoot yourself in the foot by upgrading? )

[23:28] *** Herby_ left
[23:31] *** TEttinger left
[23:32] <Xliff> m: <aa aa bb ee dd cc cc ee 1>.unique.say

[23:32] <camelia> rakudo-moar beaad7b97: OUTPUT: ¬´(aa bb ee dd cc 1)‚ê§¬ª

[23:33] *** rindolf left
[23:34] *** AlexDaniel left
[23:34] *** daxim left
[23:38] *** skids joined
[23:40] <Xliff> Hah! This seems to do the trick.

[23:40] <Xliff> https://gist.github.com/Xliff/7ec03064abe5b061cc8dd0e5d4c26a7d

[23:43] *** konsolebox left
[23:50] *** konsolebox joined
[23:50] *** comborico1611 left
[23:51] *** pharv left
[23:51] *** pharv joined
[23:53] *** AlexDaniel joined
[23:56] <AlexDaniel> more speficifally: zef install Pastebin::Gist

[23:57] <AlexDaniel> for me that hangs when running tests

[23:57] <AlexDaniel> buuut I think the actual problem is in HTTP::UserAgent maybe‚Ä¶

[23:58] <AlexDaniel> and the question is whether this is the result of the latest bump or it's this change: https://github.com/sergot/http-useragent/pull/187

[23:59] <AlexDaniel> MasterDuke: maybe if you have a minute ‚Üë

