[00:01] *** mcmillhj joined
[00:01] *** margeas left
[00:05] *** mcmillhj left
[00:08] *** comborico1611 left
[00:25] <lookatme> :)

[00:36] *** mcmillhj joined
[00:39] *** w_richard_w joined
[00:41] *** mcmillhj left
[00:44] <timotimo> .tell rindolf fwiw, the euler 287 program when slightly modified to be valid nqp code runs in 1:13.8, which is almost 45s faster than perl6 with only minor code differences

[00:44] <yoleaux> timotimo: I'll pass your message to rindolf.

[00:45] <El_Che> timotimo, the resident microoptimizer :)

[00:45] <timotimo> sorry about that :\

[00:45] <El_Che> no, it's interesting

[00:46] *** ryn1x joined
[00:47] *** ryn1x left
[00:47] <timotimo> oh, look, it's doing the thing again where it does all arithmetic as nums

[00:55] *** raschipi joined
[01:02] <buggable> New CPAN upload: Memoize-0.0.2.tar.gz by ELIZABETH http://modules.perl6.org/dist/Memoize:cpan:ELIZABETH

[01:09] *** mcmillhj joined
[01:13] <tbrowder_> lizmat++

[01:14] *** mcmillhj left
[01:36] *** mcmillhj joined
[01:41] *** mcmillhj left
[01:44] *** raschipi left
[01:48] *** ilbot3 left
[01:56] *** ilbot3 joined
[01:56] *** ChanServ sets mode: +v ilbot3

[02:05] *** dct left
[02:06] *** mcmillhj joined
[02:11] *** mcmillhj left
[02:12] *** john_parr left
[02:23] *** mahafyi joined
[02:23] *** mcmillhj joined
[02:28] *** mcmillhj left
[02:35] *** john_parr joined
[02:36] *** fascinum joined
[02:52] <buggable> New CPAN upload: Sparrowdo-0.0.38.tar.gz by MELEZHIK http://modules.perl6.org/dist/Sparrowdo:cpan:MELEZHIK

[03:13] *** aindilis joined
[03:16] *** Schepeers left
[03:21] *** mcmillhj joined
[03:23] *** fascinum left
[03:26] *** mcmillhj left
[03:39] *** Schepeers joined
[03:43] *** fascinum joined
[03:48] *** Schepeers left
[04:04] *** Schepeers joined
[04:14] *** mcmillhj joined
[04:18] *** mcmillhj left
[04:22] <buggable> New CPAN upload: P5chdir-0.0.4.tar.gz by ELIZABETH http://modules.perl6.org/dist/P5chdir:cpan:ELIZABETH

[04:28] *** mcmillhj joined
[04:32] *** mcmillhj left
[04:34] *** Schepeers left
[04:41] *** Schepeers joined
[04:42] *** curan joined
[04:50] *** kurahaupo left
[04:55] *** lizmat left
[04:55] *** psychoslave_ joined
[04:58] *** eliasr left
[04:59] *** xtreak joined
[05:01] *** lizmat joined
[05:02] *** kurahaupo joined
[05:02] *** mcmillhj joined
[05:07] *** mcmillhj left
[05:11] <AlexDaniel> squashable6: next

[05:11] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in 1 day and ‚âà4 hours (2018-06-02 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[05:21] *** sauvin joined
[05:32] <buggable> New CPAN upload: Sparrowdo-0.0.39.tar.gz by MELEZHIK http://modules.perl6.org/dist/Sparrowdo:cpan:MELEZHIK

[05:46] *** domidumont joined
[05:48] *** mcmillhj joined
[05:49] *** skids left
[05:52] *** domidumont left
[05:52] *** mcmillhj left
[05:53] *** domidumont joined
[06:15] *** mcmillhj joined
[06:16] *** jmerelo joined
[06:17] *** fascinum left
[06:19] *** domidumont left
[06:19] *** mcmillhj left
[06:20] <jmerelo> o/

[06:20] <yoleaux> 30 May 2018 20:45Z <El_Che> jmerelo: < mrdside> jmerelo: i found this - https://docs.perl6.org/type/Encoding

[06:21] <jmerelo> .tell mrdside right; you would have to implement something that mixes the Encoding role.

[06:21] <yoleaux> jmerelo: I'll pass your message to mrdside.

[06:34] *** wamba joined
[06:37] *** domidumont joined
[06:43] *** rindolf joined
[06:50] *** Ven`` joined
[06:51] *** mcmillhj joined
[06:54] *** Ven`` left
[06:54] *** Ven`` joined
[06:56] *** mcmillhj left
[07:02] <Geth> ¬¶ doc: eed1918137 | (JJ Merelo)++ | xt/word-variants.t

[07:02] <Geth> ¬¶ doc: Rewrites test to use actual regexes

[07:02] <Geth> ¬¶ doc: 

[07:02] <Geth> ¬¶ doc: Also adds "zero width" ‚Üí zero-width. Closes 2041.

[07:02] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/eed1918137

[07:02] <Geth> ¬¶ doc: 266d9f0cdd | (JJ Merelo)++ | 2 files

[07:02] <Geth> ¬¶ doc: Adds file system ‚Üí filesystem

[07:02] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/266d9f0cdd

[07:02] <Geth> ¬¶ doc: 1fdc6ed2a8 | (JJ Merelo)++ | 8 files

[07:02] <Geth> ¬¶ doc: Extensive word substitution and reflow

[07:02] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/1fdc6ed2a8

[07:03] <Geth> ¬¶ doc: 1b0518bfc3 | (JJ Merelo)++ | xt/word-variants.t

[07:03] <Geth> ¬¶ doc: Puts correct explanation closes #2041

[07:03] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/1b0518bfc3

[07:06] *** mcmillhj joined
[07:11] *** mcmillhj left
[07:14] *** darutoko joined
[07:17] <Voldenet> That may be a silly question, but how do I add a day to a date with local timezone?

[07:17] <Voldenet> and I'm not sure why dates don't have a timezone

[07:20] <Voldenet> It matters a little bit, because some countries might have skipped a day or two, but I guess it's possible to use DateTime everywhere

[07:21] <Voldenet> but in-timezone doesn't actually accept a timezone, which is even more confusing, it accepts a number

[07:21] <jmerelo> Voldenet: hum. Not sure I understand you.

[07:22] <jmerelo> Let's rewind. You have an Instant, a DateTime or a Date?

[07:23] <Voldenet> I have a string-formatted date and need to get a utc timestamp of previous and next day

[07:25] <jmerelo> Voldenet: the TZ is somewhere else, right? Or you have something like 2015-12-24T12:23:00+0200

[07:25] *** aindilis left
[07:26] <jmerelo> Voldenet: you can convert the date to UTC and then simply add or substract one day. There are all these methods to add/substract offset https://docs.perl6.org/type/DateTime#method_timezone

[07:26] *** zakharyas joined
[07:26] <Voldenet> hm, but adding a day to utc timestamp will lose the repeating hours

[07:27] <Voldenet> made by dst changes

[07:27] <Voldenet> I like how the day can have 23 or 25 hours thanks to that, it makes my life easier and better :D

[07:27] <Voldenet> and obviously, this is wrong: DateTime.now.later(days => 200).say

[07:28] <Voldenet> in CEST it returns a date that's one hour too late

[07:28] <jmerelo> Voldenet: but DST changes by country, even by state

[07:28] <Voldenet> Yes! That's why we have timezones :P

[07:29] <jmerelo> Voldenet: it's difficult to put that into a core module.

[07:30] *** dakkar joined
[07:30] <jmerelo> Voldenet: DST actually changes the TZ. 

[07:30] <TEttinger> 200 days and a move cross-country

[07:31] <Voldenet> It changes the offset, but the TZ remains Europe/Berlin for example

[07:31] <TEttinger> 200 days and in that time venezuela changes their timezone by 15 minutes

[07:31] <Voldenet> ...I think, I'm not sure

[07:31] *** mcmillhj joined
[07:31] <jmerelo> Voldenet: it's because in Europe all the TZ changes DST at the same time.

[07:32] <jmerelo> Voldenet: I seem to remember Arizona is, depending on DST, either in Pacific or Rocky Mountains time.

[07:32] <Voldenet> good heavens...

[07:32] <jmerelo> Voldenet: https://eu.azcentral.com/story/travel/2017/03/06/why-arizona-doesnt-observe-daylight-saving-time/98639074/

[07:33] <jmerelo> So you need additional information besides TZ to take DST into account. 

[07:34] <jmerelo> Voldenet: it's even worse, because inside Arizona, the actual time will depend on whether you are inside a Navajo or Hopi reservation.

[07:34] *** mrdside joined
[07:35] <jmerelo> Voldenet: you should visit Arizona. Beautiful country, if somewhat wacky re: clocks and time.

[07:36] <donpdonp> 'store all dates as utc, apply timezone tweaks for display.

[07:36] *** mcmillhj left
[07:36] <Voldenet> I really wonder why tz db doesn't have America/Arizona and how do people in IT deal with this issue

[07:38] <mrdside> hi. i asked tomorrow about new encoding. i found this - https://docs.perl6.org/type/Encoding and this - https://github.com/tony-o/perl6-encoding-huffman-pp6/blob/master/lib/Encoding/Huffman/PP6.pm6 . but i can't find information about 'Encoding::Decoder'

[07:38] <yoleaux> 06:21Z <jmerelo> mrdside: right; you would have to implement something that mixes the Encoding role.

[07:39] <jmerelo> mrdside: it's a method you have to override https://docs.perl6.org/type/Encoding#method_decoder

[07:39] *** aindilis joined
[07:41] <Voldenet> meh, for now I'll just add 86400 to a timestamp and hope nobody notices :)

[07:41] <mrdside> i should define class, that doing role Encoding with overrid there four methods. and what about 'Encoding::Registry'?

[07:42] <lookatme> I make a binding of libiconv currently

[07:43] <lookatme> It seems work now, but have not publish on CPAN

[07:43] <lookatme> https://github.com/araraloren/perl6-libiconv

[07:44] *** mcmillhj joined
[07:47] <Voldenet> hm, last time I checked, Blob.decode did not use the encoding registry, but it was some time ago

[07:48] *** mcmillhj left
[07:56] <Geth> ¬¶ doc: 7d8b76a755 | (JJ Merelo)++ | 2 files

[07:56] <Geth> ¬¶ doc: Revising Str.match, subst and subst-mutate.

[07:56] <Geth> ¬¶ doc: 

[07:56] <Geth> ¬¶ doc: * All match adverbs and cases are mentioned.

[07:56] <Geth> ¬¶ doc: * All subst adverbs are also mentioned in its own place. I have

[07:56] <Geth> ¬¶ doc:   changed the ordering of the sections.

[07:56] <Geth> ¬¶ doc: * subst-mutate is linked from subst.

[07:56] <Geth> ¬¶ doc: 

[07:56] <Geth> ¬¶ doc: So I would say the concerns of #919 have been adressed. Closes #919.

[07:56] <Geth> ¬¶ doc: 

[07:56] <Geth> ¬¶ doc: (some minor reflow in this and faq file too)

[07:56] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/7d8b76a755

[08:02] <Voldenet> mrdside: this more or less how it's used, but .decode method just won't even peek into the registry: http://ix.io/Mi6

[08:03] *** xtreak left
[08:03] *** mcmillhj joined
[08:08] *** mcmillhj left
[08:24] *** scimon joined
[08:25] <mrdside> Voldenet: thx. Unknown string encoding: 'custom' in block <unit> at decoder.p6 line 40

[08:25] <Voldenet> I know, right?

[08:25] *** pmurias joined
[08:25] <pmurias> hi

[08:27] <mrdside> p6: say 'Hi!';

[08:27] <camelia> rakudo-moar edc6ac6b2: OUTPUT: ¬´Hi!‚ê§¬ª

[08:27] <mrdside> p6: http://ix.io/Mi6

[08:27] <camelia> rakudo-moar edc6ac6b2: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Confused‚ê§at <tmp>:1‚ê§------> 3http:7‚èè5//ix.io/Mi6‚ê§    expecting any of:‚ê§        colon pair‚ê§¬ª

[08:28] <Voldenet> mrdside: http://ix.io/1bTH this is the solution I came up with

[08:28] <Voldenet> I guess it's far from elegant

[08:30] <Voldenet> and I guess there's a bug in it

[08:32] *** xtreak joined
[08:33] *** xtreak_ joined
[08:33] <mrdside> Voldenet: looks pretty nice, thanks

[08:33] <Voldenet> (I've used @state instead of @!state)

[08:36] *** xtreak left
[08:38] <Voldenet> And it has a huge problem: when decode is used internally (socket), you'll need to use bytes

[08:42] <mrdside> Voldenet: i need read file with specific encoding

[08:43] <mrdside> like 'my $fh = open "data.txt", enc => "custom";'

[08:43] <Voldenet> It just won't work. :)

[08:43] <mrdside> :)

[08:43] <Voldenet> (maybe it can work, but I'm doing something wrong)

[08:44] <mrdside> Voldenet: anyway thanks a lot

[08:49] *** mcmillhj joined
[08:50] *** wamba left
[08:51] <Voldenet> Oh, I might've been wrong

[08:53] *** mcmillhj left
[08:55] <Voldenet> mrdside: I'm taking that "it won't work" back, because it actually does work http://ix.io/1bTP

[08:55] <Voldenet> apparently, some methods use decoders properly

[08:58] *** mahafyi left
[09:04] <Geth> ¬¶ doc: 9f2cdfe13e | (JJ Merelo)++ | 2 files

[09:04] <Geth> ¬¶ doc: Some reflow and rephrasing following @b2gills' advice

[09:04] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9f2cdfe13e

[09:04] <Geth> ¬¶ doc: 4c75cd95ab | (JJ Merelo)++ | doc/Language/regexes.pod6

[09:04] <Geth> ¬¶ doc: Improved backtracking example closes #629

[09:04] <synopsebot> Link: https://doc.perl6.org/language/regexes

[09:04] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/4c75cd95ab

[09:06] *** mcmillhj joined
[09:10] *** mcmillhj left
[09:17] *** natrys joined
[09:19] *** ExtraCrispy joined
[09:29] *** mcmillhj joined
[09:35] *** sena_kun joined
[09:35] *** mcmillhj left
[09:38] *** scimon left
[09:38] *** scimon joined
[09:43] *** mahafyi joined
[10:06] *** gregf_ joined
[10:22] *** xtreak_ left
[10:23] *** w_richard_w left
[10:24] <Geth> ¬¶ doc: e9de3277ba | (JJ Merelo)++ | 4 files

[10:24] <Geth> ¬¶ doc: Un-reflows to put L links in the same line

[10:24] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/e9de3277ba

[10:24] <Geth> ¬¶ doc: 546102f55a | (JJ Merelo)++ | doc/Language/packages.pod6

[10:24] <Geth> ¬¶ doc: Expands confusing name lookup examples

[10:24] <Geth> ¬¶ doc: 

[10:24] <Geth> ¬¶ doc: And fixes some of them. Closes #969

[10:24] <synopsebot> Link: https://doc.perl6.org/language/packages

[10:24] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/546102f55a

[10:25] *** darutoko left
[10:29] *** xtreak joined
[10:42] *** margeas joined
[10:44] *** margeas is now known as markong

[10:45] *** markong is now known as markoong

[10:52] <AlexDaniel> squashable6: next

[10:52] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in ‚âà23 hours (2018-06-02 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[10:52] <Geth> ¬¶ doc: 469bdb40ba | (JJ Merelo)++ | doc/Programs/03-environment-variables.pod6

[10:52] <Geth> ¬¶ doc: Adds documentation on environment variables.

[10:52] <Geth> ¬¶ doc: 

[10:52] <Geth> ¬¶ doc: This would go towards solving #949. It's a page adapted from the

[10:52] <Geth> ¬¶ doc: Rakudo one, which is linked, along with author attribution.

[10:52] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/469bdb40ba

[10:52] <Geth> ¬¶ doc: 3de171f8a5 | (JJ Merelo)++ | doc/Programs/03-environment-variables.pod6

[10:52] <Geth> ¬¶ doc: Adds more env vars from the wiki by @masterduke17

[10:52] <Geth> ¬¶ doc: 

[10:52] <Geth> ¬¶ doc: This would close #949.

[10:53] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/3de171f8a5

[10:56] <jmerelo> Today is my last "official" day with the TPF grant. The number of issues is down to 175, which fill only 7 pages of issues. I'm kinda stopping solving issues for today, and focus a bit more on the report.

[10:57] <El_Che> jmerelo: üçï  for you!

[10:57] <El_Che> :)

[10:58] <jmerelo> I'm gonna stick around, but will decrease the time devoted to this. Also I'll try to focus on more complicated, "big" issues, as well as try to respond ASAP to new issues

[10:58] <AlexDaniel> cool

[10:58] <jmerelo> El_Che: thanks.

[10:58] <AlexDaniel> El_Che: no! That pizza was reserved for the squashathon!

[10:58] <AlexDaniel> :)

[10:59] <jmerelo> AlexDaniel: here, have it back :-)

[10:59] <AlexDaniel> nah don't worry, we'll order fresh ones for tomorrow :D

[10:59] <jmerelo> AlexDaniel: :-)

[11:02] <El_Che> AlexDaniel: it's probably Hawaii, half of the people hate it

[11:02] <El_Che> there will be some leftovers :)

[11:11] *** Ven`` left
[11:16] *** xtreak left
[11:16] *** mahafyi_ joined
[11:17] *** mahafyi left
[11:17] *** mahafyi_ is now known as mahafyi

[11:23] *** xtreak joined
[11:24] *** zakharyas left
[11:38] *** wamba joined
[11:42] <Geth> ¬¶ doc: ismailarilik++ created pull request #2084: Add missing right paranthesis

[11:42] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2084

[11:43] <Geth> ¬¶ doc: d0c4d01508 | (ƒ∞smail Arƒ±lƒ±k)++ (committed using GitHub Web editor) | doc/Language/glossary.pod6

[11:43] <Geth> ¬¶ doc: Add missing right paranthesis

[11:43] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/d0c4d01508

[11:43] <Geth> ¬¶ doc: 51e0943728 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | doc/Language/glossary.pod6

[11:43] <Geth> ¬¶ doc: Merge pull request #2084 from ismailarilik/patch-1

[11:43] <synopsebot> Link: https://doc.perl6.org/language/glossary

[11:43] <Geth> ¬¶ doc: 

[11:43] <Geth> ¬¶ doc: Add missing right paranthesis

[11:43] <Geth> ¬¶ doc: That's awesome. Thanks!

[11:43] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/51e0943728

[11:49] <jmerelo> Well, this is something I wanted to look at: perl6/doc file entropy https://fusiontables.google.com/data?docid=1yCaMG_5KRlISmM2FmhjQrGcy6ROaiBCLaU1_BzvF#chartnew:id=3

[11:50] *** mahafyi_ joined
[11:50] *** mahafyi left
[11:50] <jmerelo> It reflects the amount of "information" different files have, as in the number of different authors and variety of collaboration

[11:50] *** mahafyi_ is now known as mahafyi

[11:52] <El_Che> perl6 domains look to be down

[11:52] <jmerelo> The main one?

[11:52] <Ulti> not for me

[11:53] <El_Che> yes

[11:53] <El_Che> weird

[11:53] <El_Che> it's back

[11:54] *** psychoslave_ left
[11:59] <jmerelo> An article on author entropy just in case someone is interested. https://scholarsarchive.byu.edu/cgi/viewcontent.cgi?article=1861&context=facpub

[12:00] <El_Che> bookmarked

[12:13] *** kini left
[12:15] *** xtreak left
[12:17] <Geth> ¬¶ doc: ismailarilik++ created pull request #2085: Fix a typo

[12:17] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2085

[12:18] *** xtreak joined
[12:19] *** xtreak left
[12:20] *** kini joined
[12:24] *** natrys left
[12:28] <jmerelo> Here's the hall of fame of the files with the highest number of authors https://raw.githubusercontent.com/JJ/TPF-Grant/master/illos/top-20-authors-modified.png in perl6/doc

[12:28] <jmerelo> Can you guess without looking at the chart? It's a tie, actually.

[12:29] <jmerelo> And here's the top 20 authors with the highest number of modified files https://github.com/JJ/TPF-Grant/blob/master/illos/top-20-files-modified.png That one is easier to guess.

[12:30] <jmerelo> A factoid: there are ~1300 files in the repo, some 400 of them have been modified by a single author. All this data is in the TPF repo, of course.  https://raw.githubusercontent.com/JJ/TPF-Grant/

[12:31] *** Ven`` joined
[12:31] <jmerelo> He, and I just realized there's .DS_Store (or was) in the repo...

[12:32] <El_Che> https://raw.githubusercontent.com/JJ/TPF-Grant <-- err 400

[12:33] *** scimon left
[12:35] <jmerelo> Sorry: correct address  https:/github.com/JJ/TPF-Grant/

[12:36] *** mcmillhj joined
[12:36] *** mcmillhj left
[12:36] <jmerelo> There are actually only 452 files now, actually. 

[12:36] <Geth> ¬¶ doc: c7eb3227b6 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Type/Supply.pod6

[12:36] <Geth> ¬¶ doc: Rewrite rakudo-specific note

[12:36] <Geth> ¬¶ doc: 

[12:36] <Geth> ¬¶ doc: Normally implementation-specific things are not documented, but in

[12:36] <Geth> ¬¶ doc: this particular case we can prevent a lot of banging against a wall by

[12:36] <synopsebot> Link: https://doc.perl6.org/type/Supply

[12:36] <Geth> ¬¶ doc: mentioning some known issues. In this case the behavior has changed

[12:36] <Geth> ¬¶ doc: quite a bit so IMO it's a worthy mention.

[12:36] <Geth> ¬¶ doc: 

[12:36] <Geth> ¬¶ doc: See issue #1486 for more info on docs vs implementation-specific notes.

[12:36] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/c7eb3227b6

[12:37] *** jmerelo left
[12:37] *** HaraldJoerg joined
[12:37] <AlexDaniel> good job AlexDaniel, talking about a releases that do not exist yet :)

[12:37] <AlexDaniel> s/a//

[12:41] *** mcmillhj joined
[12:46] *** Ven` joined
[12:46] *** Ven` left
[12:47] *** Ven` joined
[12:47] <Geth> ¬¶ doc: 46f4ac6099 | (Will "Coke" Coleda)++ | README.pt.md

[12:47] <Geth> ¬¶ doc: whitespace

[12:47] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/46f4ac6099

[12:47] <Geth> ¬¶ doc: 9e1b78a730 | (Will "Coke" Coleda)++ | doc/Type/IO/Path.pod6

[12:47] <Geth> ¬¶ doc: fix compilation

[12:47] <synopsebot> Link: https://doc.perl6.org/type/IO::Path

[12:47] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9e1b78a730

[12:49] *** Ven`` left
[12:52] <Geth> ¬¶ whateverable: 2be293f0a5 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[12:52] <Geth> ¬¶ whateverable: Add fragile workarounds for signal issues

[12:52] <Geth> ¬¶ whateverable: 

[12:52] <Geth> ¬¶ whateverable: More info: https://github.com/rakudo/rakudo/issues/1888

[12:52] <Geth> ¬¶ whateverable: review: https://github.com/perl6/whateverable/commit/2be293f0a5

[12:55] *** Azry joined
[12:57] *** zakharyas joined
[13:15] <titsuki_> bisectable: use Test; is set("cat","bug"), set("bug","cat");

[13:15] <bisectable6> titsuki_, On both starting points (old=2015.12 new=c80ea2f) the exit code is 0 and the output is identical as well

[13:15] <bisectable6> titsuki_, Output on both points: ¬´ok 1 - ‚ê§¬ª

[13:21] *** Ven` left
[13:21] *** Ven`` joined
[13:26] *** psychoslave_ joined
[13:29] *** kurahaupo_ joined
[13:29] *** kurahaupo left
[13:31] *** psychoslave_ left
[13:31] *** psychoslave_ joined
[13:33] *** scimon joined
[13:52] *** skids joined
[13:54] *** mcmillhj left
[13:56] *** Zoffix joined
[13:56] *** Ven`` left
[13:57] <Zoffix> titsuki_: the bug is in that line of code :) sets are unordered and unless you stringify them with .gist or .perl (pending RT#131244 ) you'll get them stringified as unordered. The `is` routine is not an appropriate routine to test sets. Use `is-deeply` instead.

[13:57] <yoleaux> 30 May 2018 12:42Z <lizmat> Zoffix: re your last tweet: I would stick "@*ARGS.List.perl.say" in a script called "qw"  :-)

[13:57] <synopsebot> RT#131244 [new]: https://rt.perl.org/Ticket/Display.html?id=131244 Baggy/Setty .Str/.gist/.perl needs to guarantee order, like Map/Hash do

[13:58] <Zoffix> Ah, ok, .Str is also apparently meant to be ordered.

[13:58] *** mcmillhj joined
[13:59] <Zoffix> titsuki_: then there are two bugs. RT#131244 and using `is` routine, as say, `set($(<foo bar>), 42)` and `["foo bar", 42]` would still have the test passing despite being wrong types and having wrong contents

[14:01] *** Ven`` joined
[14:02] <titsuki_> so I should use "is-deeply" and use data type other than set (e.g., Array) ?

[14:03] *** mcmillhj left
[14:03] <Zoffix> titsuki_: you can use a set

[14:03] <Zoffix> m: use Test; is-deeply set(<a b c>), set <b c a>

[14:03] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´ok 1 - ‚ê§¬ª

[14:04] <titsuki_> Zoffix: Thanks! I see.

[14:05] <Zoffix> m: use Test; is ["foo bar", 42], set($(<foo bar>), 42)

[14:05] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´ok 1 - ‚ê§¬ª

[14:05] <Zoffix> m: use Test; is-deeply ["foo bar", 42], set($(<foo bar>), 42)

[14:05] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´not ok 1 - ‚ê§# Failed test at <tmp> line 1‚ê§# expected: (42,("foo", "bar")).Set‚ê§#      got: $["foo bar", 42]‚ê§¬ª

[14:08] *** Zoffix left
[14:23] <Juerd> What does ,= do, and what's the usecase for that?

[14:24] <Juerd> ",=" was mentioned in #perl as the operator that push could have been. I began to wonder if Perl 6 did anything with it. It does, but it doesn't seem too useful.

[14:26] <Juerd> In its defense @foo ,= 6; does do exactly what @foo = @foo, 6; does...

[14:26] *** nnunley joined
[14:26] <jkramer> m: my @foo = <foo bar baz>; @foo,=6; dd @foo

[14:26] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´Array @foo = ((my @Array_76155224) = [@Array_76155224, 6])‚ê§¬ª

[14:26] <jkramer> Wat

[14:26] <jkramer> m: my @foo = <foo bar baz>; @foo,=6; .say for @foo

[14:26] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´(\Array_66713320 = [Array_66713320 6])‚ê§6‚ê§¬ª

[14:26] <Juerd> You get an array of a self-reference and the new value.

[14:27] <Juerd> @foo is @foo[0] is @foo[0][0] is @foo[0][0][0] ad infinitum :D

[14:27] <jkramer> Nice :D

[14:27] <jkramer> m: my $foo = 5; $foo,=6; dd $foo

[14:27] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´List $foo = (my \List_63201824 = $(List_63201824, 6))‚ê§¬ª

[14:27] <Juerd> But am I understanding it correctly, and does it have *any* use case at all?

[14:28] <jkramer> It's not listed in https://docs.perl6.org/language/operators

[14:39] <moritz> = is a meta operator; I don't think we list all the combinations you can do with operators

[14:40] <moritz> += *= /= -= etc.

[14:40] <AlexDaniel> squashable6: next

[14:40] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in ‚âà19 hours (2018-06-02 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[14:45] <jkramer> Actually ,= would be quite nice and useful if it worked like .push

[14:45] *** Zoffix joined
[14:45] <Zoffix> Juerd: yeah, you can combine hashes with it

[14:46] <Zoffix> m: my %h1 = <a 1 b 2>; my %h2 = <b 3 c 4>; %h1 ,= %h2; dd %h1

[14:46] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´Hash %h1 = {:a(IntStr.new(1, "1")), :b(IntStr.new(3, "3")), :c(IntStr.new(4, "4"))}‚ê§¬ª

[14:46] <Juerd> Thanks

[14:47] *** Azry left
[14:48] <Zoffix> m: say [] ,= 42

[14:48] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´Cannot assign to an immutable value‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:48] <Zoffix> What immutable value?

[14:49] <moritz> m: [] = 42

[14:49] <camelia> rakudo-moar c80ea2f28: ( no output )

[14:50] <moritz> m: [] = [], 42

[14:50] <camelia> rakudo-moar c80ea2f28: ( no output )

[14:50] <moritz> looks like a bug to me

[14:50] <Zoffix> Yeah, looks like the genned QAST uses assign instead p6store op

[14:51] <Zoffix> m: my @a; my @b; @a ,= @b

[14:51] <camelia> rakudo-moar c80ea2f28: ( no output )

[14:51] <Zoffix> m: my @a; my @b; @a [R,]= @b

[14:51] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´Cannot assign to an immutable value‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:51] *** curan left
[14:52] *** rindolf left
[14:52] <Zoffix> R#1890

[14:52] <synopsebot> R#1890 [open]: https://github.com/rakudo/rakudo/issues/1890 [codegen] Bad codegen with `,=` meta op

[14:53] *** psychoslave_ left
[14:54] *** Zoffix left
[14:56] *** sjn left
[14:56] *** rindolf joined
[14:59] *** mrdside left
[15:05] *** Ven`` left
[15:09] *** Ven`` joined
[15:21] <[Coke]> docs - what is the purpose of the multi-lingual readmes when we force everyone to generate docs in english atm?

[15:22] <[Coke]> is the thought that this is a precursor to getting docs in multiple languages?

[15:24] <AlexDaniel> I wondered this too

[15:25] <AlexDaniel> but interestingly people are so eager to contribute this

[15:25] <AlexDaniel> which is great

[15:33] *** Ven`` left
[15:43] *** mahafyi left
[16:02] <[Coke]> aye

[16:04] *** domidumont left
[16:07] *** lucasb joined
[16:08] *** psychoslave_ joined
[16:09] *** mcmillhj joined
[16:10] *** mcmillhj left
[16:13] <lucasb> moritz quote at the end of the README also gets translated to other languages. This is funny

[16:14] *** jmerelo joined
[16:14] <jmerelo> o/

[16:14] *** mcmillhj joined
[16:15] <lucasb> hola

[16:16] <jmerelo> Buenas :-)

[16:17] <jmerelo> This question is still unanswered (sorta) in SO: https://stackoverflow.com/questions/50611014/is-there-a-shorthand-where-one-or-more-positionals-match-a-type-in-a-multi-sig Any idea?

[16:20] <moritz> lucasb: somebody wanted a "vision statement" from me to know what goes into the doc repo; it kinda makes sense to translate that

[16:21] *** zakharyas left
[16:23] *** dakkar left
[16:27] *** scimon left
[16:31] *** ExtraCrispy left
[16:37] *** comborico1611 joined
[16:42] *** natrys joined
[16:43] *** domidumont joined
[16:54] *** atroxaper joined
[17:02] *** psychoslave_ left
[17:02] *** zakharyas joined
[17:15] *** lucasb left
[17:20] *** Khisanth left
[17:25] *** eliasr joined
[17:27] *** cpage_ joined
[17:30] *** cpage left
[17:30] *** cpage_ is now known as cpage

[17:30] <Geth> ¬¶ doc: coke self-assigned Sharing Pod 6 caches https://github.com/perl6/doc/issues/1952

[17:33] *** Khisanth joined
[17:34] *** raynold joined
[17:39] *** matzek joined
[17:39] *** atroxaper left
[17:48] *** wamba left
[17:58] <AlexDaniel> .seen jstruder

[17:58] <yoleaux> I haven't seen jstruder around.

[17:58] <AlexDaniel> .seen jstuder

[17:58] <yoleaux> I saw jstuder 1 Apr 2018 15:51Z in #perl6-dev: <jstuder> yeah, don't understand why it would be performing that op on the iterator itself though

[17:59] *** zakharyas left
[18:00] <lizmat> AlexDaniel: yeah, he doesn't hang out online much

[18:00] <AlexDaniel> that's ok

[18:00] <AlexDaniel> I'll just file a ticket :)

[18:09] *** molaf joined
[18:12] *** sena_kun left
[18:17] <jmerelo> Another nice chart: open and closed issues through the history of the perl6/doc repo https://github.com/JJ/TPF-Grant/blob/master/illos/issues-open-closed-diff.png

[18:18] <jmerelo> Data in the usual place, the same TPF grant repo

[18:19] <jmerelo> March and April were the 2nd and 3rd with the highest number of issues open, BTW

[18:19] <jmerelo> April and May 1st and second with the highest number of issues closed.

[18:20] <jmerelo> I keep finding September'17 was a very special month. Summer 17, in general. Any idea what happened?

[18:22] <matzek> Hello folks. I have a perl6 script which is checking links, getting A records etc. and then stores all in a postgres database. The script is working well so far. But it stores nothing in a database when it runs via cron (fbsd, PATH is set properly). Any hints?

[18:23] <jmerelo> matzek: cron has usually got its own user. Also, possible problems with path.

[18:23] <timotimo> it could be unable to find its necessary libraries

[18:23] *** pmurias left
[18:24] <matzek> path is set - the job is running as root

[18:24] <matzek> top also shows that moar is running and consuming cpu time

[18:24] <timotimo> that seems like a very bad idea :)

[18:24] <matzek> there are many jobs runng as root ;)

[18:24] <jmerelo> matzek: could be library path. You'll have to find why it's not putting anything into the database. Most likely privileges; maybe root has not privileges to update the database...

[18:25] *** sauvin left
[18:25] <timotimo> well, if it can't find the libraries, it would probably die early throwing an exception

[18:25] <timotimo> so perhaps that isn't what's wrong

[18:25] <matzek> root has its own db 

[18:26] <matzek> so i should print some debug stuff in a file first, hm

[18:26] <timotimo> can always hook up to the moar process with gdb, "up" a few times until you're in a frame that has a tc available (for example MVM_interp_run) and then "call MVM_dump_backtrace(tc)", resume, ctrl-c, repeat

[18:26] <timotimo> to figure out what it's doing

[18:26] <El_Che> or do like I do and insert prints all over the place :)

[18:27] <timotimo> can you access the prints while the program is running, or only when cron has finished and sends the mail?

[18:32] <El_Che> cron sends a mail with the output

[18:32] <El_Che> or you can write to a file (>) etc

[18:39] <lizmat> jmerelo: maybe in the summer more people have time to try out fun things ?

[18:42] <jmerelo> lizmat: who knows. That might be the case...

[18:45] <matzek> nah, cron dont get an output..the log says just that the job has startet

[18:46] <matzek> lizmat: strange logic :D

[18:46] <jmerelo> lizmat: it's only that particular month in that particular summer, though...

[18:47] <lizmat> well, there *was* a Perl conference in Amsterdam that month  :-)

[18:49] <jmerelo> lizmat: so you think that was it? Lots of people were encouraged to try Perl 6?

[18:50] <lizmat> I'd like to think so  :-)

[18:50] <jmerelo> lizmat: it didn't happen in the American conference, though...

[18:52] <matzek> maybe thats the reason for perl6 :D

[18:54] <masak> is it just me, or is Python's read-and-evaluate style of traversing a program surprisingly similar to Lisp's?

[18:56] *** psychoslave_ joined
[18:57] <matzek> El_Che: sorry, you are right @mail :)  

[19:01] <lizmat> jmerelo: I didn't attend the American Perl Conference last year  :-)

[19:03] *** psychoslave_ left
[19:04] *** domidumont left
[19:09] *** mrdside joined
[19:15] <AlexDaniel> squashable6: next

[19:15] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in ‚âà14 hours (2018-06-02 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[19:18] <masak> m: say "pun".indent(4)  # pun indented

[19:18] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´    pun‚ê§¬ª

[19:18] <masak> sorry. I'm backlogging 2014, and that one was too funny not to do again in the present :P

[19:19] *** raynold left
[19:19] <masak> we also had one for "Girl, Interrupted"

[19:19] <jmerelo> masak: :-)))))

[19:19] <masak> m: for "Girl".comb { .print; last if ++(state $ ) == 2 } # interrupted

[19:19] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´Gi¬ª

[19:20] *** wamba joined
[19:21] *** jmerelo left
[19:25] *** psychoslave joined
[19:36] *** stee3 joined
[19:37] *** mrdside_ joined
[19:38] *** stee left
[19:39] *** mrdside left
[19:41] *** mrdside_ left
[19:51] <matzek> omfg..it was a relative path deep in a sub :/ hell...

[19:53] *** mcmillhj left
[19:56] *** Guest59250 joined
[19:56] <Guest59250> How do you qx{...} interactively?

[19:56] *** rindolf left
[19:57] <matzek> Guest59250: what do you mean with interactively?

[19:57] *** uzl joined
[19:58] <Guest59250> matzek: Output -> User Interaction -> Output

[20:00] <matzek> dunno, maybe qqx{} fits into your needs?

[20:00] <AlexDaniel> sounds like Proc::Async is needed

[20:01] *** rindolf joined
[20:01] <AlexDaniel> this was a nice example: my $p = Proc::Async.new: ‚Äòless‚Äô, :w; start { sleep 2; await $p.put: ‚Äúhello world $_‚Äù for ^50; sleep 3; $p.close-stdin }; react { whenever $p.start { say ‚Äòpager closed‚Äô } }

[20:01] <AlexDaniel> it is somewhat unrelated to the question, but maybe some ideas can be borrowed from it :)

[20:02] <AlexDaniel> Guest59250: what program are you running? And what kind of user interaction is expected?

[20:03] <Guest59250> AlexDaniel: qx{apt-get install ...}

[20:04] <matzek> and you would like to give an answer .. if needed?

[20:04] <AlexDaniel> Guest59250: ok, and by user interaction what do you mean?

[20:04] <Guest59250> AlexDaniel: y

[20:04] <El_Che> apt-get install -y

[20:05] <Guest59250> El_Che: Not like that.

[20:05] <El_Che> qx is not an Expect replacement

[20:05] <AlexDaniel> El_Che: hold on

[20:05] <AlexDaniel> you can still bind stdin, no?

[20:05] <matzek> is qx{} not more like shoot and forget?

[20:07] <uzl> Hi, guys! I was reading about Polish notation and I'm wondering if I could overload the + operator to behave in the following way: 

[20:07] <uzl> a b +   => a + b

[20:08] <uzl> m: [+] 2, 3;

[20:08] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of [+] in sink context‚ê§    at <tmp>:1‚ê§    ------> 3<BOL>7‚èè5[+] 2, 3;‚ê§¬ª

[20:08] *** epony left
[20:08] <uzl> m: say [+] 2, 3;

[20:08] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´5‚ê§¬ª

[20:08] *** epony joined
[20:08] *** mcmillhj joined
[20:09] <Guest59250> Is that RPN?

[20:10] <AlexDaniel> Guest59250: ok, here it is

[20:10] <matzek> AlexDaniel: you mean bind-stdin? can this be used for a "dialog" with the shell?

[20:10] <AlexDaniel> Guest59250: my $p = Proc::Async.new: ‚Äòapt-get‚Äô, ‚Äòinstall‚Äô, ‚Äòpidgin‚Äô, :w; react { whenever Promise.in(3) { $p.put: ‚Äòn‚Äô }; whenever $p.start { say ‚Äòdone‚Äô} }'

[20:10] <AlexDaniel> like, that's one way

[20:10] <AlexDaniel> let's try with bind-stdin also

[20:11] *** matzek_ joined
[20:11] <AlexDaniel> here it is: my $p = Proc::Async.new: ‚Äòapt-get‚Äô, ‚Äòinstall‚Äô, ‚Äòpidgin‚Äô; $p.bind-stdin: $*IN; react { whenever $p.start { say ‚Äòdone‚Äô } }

[20:12] <AlexDaniel> El_Che: can we now declare Proc::Async to be expect replacement? :P

[20:13] <El_Che> Expect had a very simple linear api

[20:13] <El_Che> async tends to make your head explode :)

[20:14] <AlexDaniel> El_Che: sounds like a great module, well volunteered

[20:14] <geekosaur> and expect handles things that want a terminal, you need to at least do more work to make Proc::Async use a pty instead of a pipe

[20:14] <AlexDaniel> .oO( 6pect )

[20:14] <El_Che> yeah, I'll add it to the plan after I finish this damn dessertation :)

[20:15] <AlexDaniel> geekosaur: yes that's true :(

[20:15] *** matzek left
[20:15] <AlexDaniel> in fact I'm a bit surprised that apt-get says ‚ÄúDo you want to continue? [Y/n]‚Äù to a non-tty

[20:15] <AlexDaniel> like, who is it talking to?

[20:16] <geekosaur> ‚Ä¶and now you;re in trouble on windows which doesn't do ptys (and other related things, like, er, entire tty interface. which makes interactive programs idiosyncratic in general when run in batch context)

[20:16] <El_Che> AlexDaniel: debian has a hive mind

[20:16] <Geth> ¬¶ whateverable/master: 5 commits pushed by (Aleks-Daniel Jakimenko-Aleksejev)++

[20:16] <Geth> ¬¶ whateverable/master: 0d9ece4ca3 | Force signal 0 to stringify to ‚ÄúNone‚Äù

[20:16] <Geth> ¬¶ whateverable/master: a49866c33d | Use --decompress instead of -decompress

[20:16] <Geth> ¬¶ whateverable/master: 911d58ac89 | Bump the timeout a little

[20:16] <Geth> ¬¶ whateverable/master: 6260f76ff2 | Wrap the whole fetch-build to ask for more time

[20:16] <Geth> ¬¶ whateverable/master: d4303139f7 | Do not pull builds when doing fuzzy search

[20:16] <Geth> ¬¶ whateverable/master: review: https://github.com/perl6/whateverable/compare/2be293f0a554...d4303139f79c

[20:17] <geekosaur> iirc that's semi-deliberate. as in, they punish interactiove use in non-interactive contexts directly instead of potentially leading to nasty surprises later

[20:17] <AlexDaniel> makes sense

[20:18] <AlexDaniel> geekosaur: hey, but if I do bind-stdin to $*IN, what's going to happen exactly?

[20:19] <AlexDaniel> will it be a simple pipe?

[20:21] <geekosaur> depends on what it was given. by defaultg is is a pipe

[20:21] <geekosaur> bind-stdin is too late to change this

[20:21] <geekosaur> you have to plumb the process with the right thing beforehand

[20:21] <AlexDaniel> but the process is not started before .start

[20:22] <AlexDaniel> and you can't bind-stdin after .start

[20:22] <AlexDaniel> iirc

[20:22] <geekosaur> this may mean the interface has made a common mistake that renders it potentially broken in other cases as well

[20:23] <AlexDaniel> what do you mean? What common mistake?

[20:23] <geekosaur> the very fact you're asking this‚Ä¶ no understanding of how inter-process communication works? how it has to work?

[20:24] <geekosaur> there are many common mistakes, really. I'm not exactly sure what it does currently therefore which of many mistakes it could have made

[20:24] <geekosaur> at one point the implementation did "link one procerss's stdout to anothrer's stdin" by making thjem separate and writing data --- once --- from one to the othet

[20:24] <geekosaur> which. very no.

[20:25] <geekosaur> worked for extremely simple things, broke anyone trying to actually use it

[20:25] <AlexDaniel> m: my $p = Proc::Async.new: ‚Äòbash‚Äô, ‚Äò-c‚Äô, ‚Äòif [ -t 1 ] ; then echo terminal; else echo "not a terminal"; fi‚Äô; $p.bind-stdin: $*IN; react { whenever $p.start { say ‚Äòdone‚Äô } }

[20:25] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´Proc::Async is disallowed in restricted setting‚ê§  in sub restricted at src/RESTRICTED.setting line 1‚ê§  in method new at src/RESTRICTED.setting line 32‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:25] <AlexDaniel> e: my $p = Proc::Async.new: ‚Äòbash‚Äô, ‚Äò-c‚Äô, ‚Äòif [ -t 1 ] ; then echo terminal; else echo "not a terminal"; fi‚Äô; $p.bind-stdin: $*IN; react { whenever $p.start { say ‚Äòdone‚Äô } }

[20:25] <evalable6> AlexDaniel, rakudo-moar c80ea2f28: OUTPUT: ¬´not a terminal‚ê§done‚ê§¬ª

[20:25] <AlexDaniel> well, here it's not a terminal ofc

[20:25] <geekosaur> Proc::Async is using pipes

[20:25] <AlexDaniel> but if you run it locally

[20:25] <AlexDaniel> then it say ‚Äúterminal‚Äù

[20:26] <geekosaur> hold on

[20:26] <geekosaur> I guess I have to go dig thought the impl now

[20:26] <AlexDaniel> yeah

[20:26] <AlexDaniel> but I guess I answered my question

[20:26] <geekosaur> and then confuse you a different way instead of the current way, probably

[20:27] <geekosaur> I *think* bind-stdi9n means you connected to its input, so output is still the thing you ran it on

[20:27] <AlexDaniel> ooooooh

[20:27] <geekosaur> because stdin and stdout are not magically always connected, otherwise you couldn't use pipes a | b | c becuase the first would loop a and b together

[20:27] <geekosaur> leaving nothing for c

[20:28] <geekosaur> *terminals* bind the tty / pty to all of stdin, stdout, stderr by default

[20:29] <geekosaur> ok, yes, bind-stdin tells the Proc::Async how to plumb the process's input

[20:29] <AlexDaniel> right

[20:29] <geekosaur> output is not affected and will be that of the perl script

[20:29] <Guest59250> AlexDaniel: Method 'bind-stdin' not found for invocant of class 'Proc::Async'

[20:30] <AlexDaniel> but my -t check is useless, right‚Ä¶

[20:30] <geekosaur> which for camelia is a service environment, stdout is a log file or /dev/null depending on how service is set up

[20:30] <geekosaur> and for a command line is going to be the pty unless redirected

[20:30] <AlexDaniel> Guest59250: what is your rakudo version?

[20:30] <geekosaur> as for that last, Proc::Async::Pipe actually

[20:31] <Guest59250> AlexDaniel: This is perl6 version 2015.11 built on MoarVM version 2015.11

[20:31] <AlexDaniel> Guest59250: well, that's very old, in fact that's even before the first stable language release

[20:31] <AlexDaniel> huggable: deb

[20:31] <huggable> AlexDaniel, Alpine, CentOS, Debian, Fedora, OpenSUSE and Ubuntu Rakudo packages: https://github.com/nxadm/rakudo-pkg#rakudo-pkg

[20:31] <Guest59250> I'm using Mint.

[20:32] <AlexDaniel> Guest59250: maybe you can grab a package from here ‚Üë

[20:32] <Guest59250> They don't have Mint?

[20:32] <geekosaur> doesn't look like we currently expose pty. iirc that's a separate libuv interface and may be difficult, not to say unportable to windows

[20:32] <geekosaur> Guest59250, for very nearly everything Mint is Ubuntu

[20:33] <geekosaur> unless you're running LMDE in which case it's the corresponding debian unstable

[20:33] <AlexDaniel> unless you're using a debian-based mint, I think

[20:34] <matzek_> .oO( what about openbsd :( )

[20:34] <AlexDaniel> matzek_: it should work if you compile it

[20:35] <AlexDaniel> we do try to keep it working on openbsd & freebsd

[20:35] <matzek_> rakudo * wont build and rakudobrew also dont build on obsd 6.3

[20:35] <AlexDaniel> matzek_: btw maybe you can even help with this ticket: https://github.com/rakudo/rakudo/issues/1867

[20:36] <AlexDaniel> .seen Kaiepi

[20:36] <yoleaux> I saw Kaiepi 27 May 2018 11:10Z in #perl6: <Kaiepi> thanks

[20:36] <AlexDaniel> matzek_: maybe talk to Kaiepi about that, it looks like they have it working on 6.3

[20:36] <matzek_> fbsd works well

[20:36] <AlexDaniel> geekosaur: thank you, by the way

[20:37] <matzek_> currently there is a port for rakudo 2017.10 or on obsd

[20:37] <geekosaur> POSIX IPC is tricky business. ptys make it more so. at one point there was something in ecosystem with a simple expect interface, I think, but it may be broken

[20:38] <geekosaur> buggable: eco pty

[20:38] <buggable> geekosaur, Nothing found

[20:38] <geekosaur> bah

[20:39] *** psychoslave left
[20:40] * geekosaur is actually a bit fried right now

[20:41] * AlexDaniel leaves for a quick nap

[20:42] <matzek_> gn8 gents

[20:42] *** matzek_ left
[20:45] <AlexDaniel> heh, I'm very confused about https://github.com/sergot/http-useragent/pull/200

[20:46] <AlexDaniel> sergot: I think did a boo-boo there ‚Üë

[20:46] <AlexDaniel> I did*

[20:49] <AlexDaniel> reverted the merge, now I go to bed :)

[20:52] *** raschipi joined
[20:52] <buggable> New CPAN upload: Memoize-0.0.3.tar.gz by ELIZABETH http://modules.perl6.org/dist/Memoize:cpan:ELIZABETH

[21:03] *** mcmillhj left
[21:05] *** scovit joined
[21:07] <scovit> Hello, if there is a function with a slurpy signature (non positional). Can I pass a set to it the same way I can pass a list?

[21:08] <moritz> scovit: example of the signature?

[21:09] <moritz> "non positional" sounds like "named", and I don't think you can pass a set to a slurpy named

[21:09] <scovit> sub pickBinomial(Numeric(Cool) $p, *@list --> Seq:D) { sat @list; }; pickBinomial(0.3, <a b c>);

[21:09] <scovit> m:sub pickBinomial(Numeric(Cool) $p, *@list --> Seq:D) { sat @list; }; pickBinomial(0.3, <a b c>);

[21:09] <evalable6> scovit, rakudo-moar c80ea2f28: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/EQ1HUaRAeK‚ê§Undeclared routine:‚ê§    sat used at line 1. Did you mean 'set', 'say'?‚ê§‚ê§¬ª

[21:10] <scovit> m:sub pickBinomial(Numeric(Cool) $p, *@list --> Seq:D) { say @list; }; pickBinomial(0.3, <a b c>);

[21:10] <evalable6> scovit, rakudo-moar c80ea2f28: OUTPUT: ¬´(exit code 1) [a b c]‚ê§Type check failed for return value; expected Seq but got Bool (Bool::True)‚ê§  in sub pickBinomial at /tmp/_a5nvQ2w7M line 1‚ê§  in block <unit> at /tmp/_a5nvQ2w7M line 1‚ê§‚ê§¬ª

[21:10] <moritz> m: sub f(*@a) { say @a.elems }; f set(1, 2, 3)

[21:10] <scovit> m:sub pickBinomial(Numeric(Cool) $p, *@list) { say @list; }; pickBinomial(0.3, <a b c>);

[21:10] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´1‚ê§¬ª

[21:10] <evalable6> scovit, rakudo-moar c80ea2f28: OUTPUT: ¬´[a b c]‚ê§¬ª

[21:10] <scovit> m:sub pickBinomial(Numeric(Cool) $p, *@list) { say @list; }; pickBinomial(0.3, <a b c>.set);

[21:10] <evalable6> scovit, rakudo-moar c80ea2f28: OUTPUT: ¬´(exit code 1) No such method 'set' for invocant of type 'List'. Did you mean any of these?‚ê§    Set‚ê§    sec‚ê§‚ê§  in block <unit> at /tmp/I_bd6aIScS line 1‚ê§‚ê§¬ª

[21:10] <scovit> m:sub pickBinomial(Numeric(Cool) $p, *@list) { say @list; }; pickBinomial(0.3, <a b c>.Set);

[21:10] <evalable6> scovit, rakudo-moar c80ea2f28: OUTPUT: ¬´[set(a b c)]‚ê§¬ª

[21:10] <moritz> scovit: seems sets are not flattened out

[21:10] <scovit> exactly

[21:10] <scovit> m:sub pickBinomial(Numeric(Cool) $p, *@list) { say @list; }; pickBinomial(0.3, |<a b c>.Set);

[21:10] <evalable6> scovit, rakudo-moar c80ea2f28: OUTPUT: ¬´[c => True b => True a => True]‚ê§¬ª

[21:11] <scovit> m:sub pickBinomial(Numeric(Cool) $p, *@list) { say @list.elems; }; pickBinomial(0.3, |<a b c>.Set);

[21:11] <evalable6> scovit, rakudo-moar c80ea2f28: OUTPUT: ¬´3‚ê§¬ª

[21:12] <scovit> so what would you do? add a multi?

[21:12] <moritz> yes

[21:12] <buggable> New CPAN upload: P5chdir-0.0.5.tar.gz by ELIZABETH http://modules.perl6.org/dist/P5chdir:cpan:ELIZABETH

[21:14] <lizmat> wow, CPAN upload notifications are running ~13 hours behind

[21:17] *** lizmat left
[21:19] *** lizmat joined
[21:22] <buggable> New CPAN upload: IConv-0.0.1.tar.gz by ALOREN http://modules.perl6.org/dist/IConv:cpan:ALOREN

[21:25] <scovit> I understand the logic: sets are not positional

[21:26] <scovit> m:sub pickBinomial(Numeric(Cool) $p, *%list) { say %list; }; pickBinomial(0.3, <a b c>);

[21:26] <evalable6> scovit, rakudo-moar c80ea2f28: OUTPUT: ¬´(exit code 1) Too many positionals passed; expected 1 argument but got 2‚ê§  in sub pickBinomial at /tmp/jbVIk2IX_C line 1‚ê§  in block <unit> at /tmp/jbVIk2IX_C line 1‚ê§‚ê§¬ª

[21:27] <scovit> m:sub pickBinomial(Numeric(Cool) $p, *%list) { say %list; }; pickBinomial(0.3, <a b c>.Set);

[21:27] <evalable6> scovit, rakudo-moar c80ea2f28: OUTPUT: ¬´(exit code 1) Too many positionals passed; expected 1 argument but got 2‚ê§  in sub pickBinomial at /tmp/yQHISkQXg5 line 1‚ê§  in block <unit> at /tmp/yQHISkQXg5 line 1‚ê§‚ê§¬ª

[21:28] <scovit> m:sub pickBinomial(Numeric(Cool) $p, *%list) { say %list; }; pickBinomial(0.3, <a b c>.Set.Hash);

[21:28] <evalable6> scovit, rakudo-moar c80ea2f28: OUTPUT: ¬´(exit code 1) Too many positionals passed; expected 1 argument but got 2‚ê§  in sub pickBinomial at /tmp/lwwMsx4qbs line 1‚ê§  in block <unit> at /tmp/lwwMsx4qbs line 1‚ê§‚ê§¬ª

[21:28] <scovit> and hash never flattenb

[21:29] *** natrys left
[21:32] <buggable> New CPAN upload: P5math-0.0.1.tar.gz by ELIZABETH http://modules.perl6.org/dist/P5math:cpan:ELIZABETH

[21:32] *** mcmillhj joined
[21:37] *** mcmillhj left
[21:38] <b2gills> Zoffix I edited [1] to fix the Markdown ordered list syntax (indent included text by 4 spaces), and to cleanup the links (place urls at top so they are easier to edit in the future). Hope you don't mind [1]: https://stackoverflow.com/posts/50630100/revisions

[21:38] <scovit> m: sub pickBinomial(Numeric(Cool) $p, List() *@list) { say @list; }; pickBinomial(0.3, <a b c>);

[21:38] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Slurpy positional parameters with type constraints are not supported‚ê§at <tmp>:1‚ê§------> 3Binomial(Numeric(Cool) $p, List() *@list7‚èè5) { say @list; }; pickBinomial(0.3, <a b‚ê§    expecting any‚Ä¶¬ª

[21:39] <scovit> m: sub pickBinomial(Numeric(Cool) $p, List() @list) { say @list; }; pickBinomial(0.3, <a b c>);

[21:39] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´Type check failed in binding to parameter '@list'; expected Positional[Any] but got List ($("a", "b", "c"))‚ê§  in sub pickBinomial at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:39] <b2gills> m: sub pickBinomial(Numeric(Cool) $p, *@list) { say @list; }; pickBinomial(0.3, <a b c>);

[21:39] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´[a b c]‚ê§¬ª

[21:39] <b2gills> You are asking for Positional[List], not List

[21:40] <scovit> m: sub pickBinomial(Numeric(Cool) $p, @list) { say @list; }; pickBinomial(0.3, <a b c>);

[21:40] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´(a b c)‚ê§¬ª

[21:40] *** skids left
[21:41] <scovit> Ok b2gills

[21:41] <b2gills> m: sub pickBinomial(Numeric(Cool) $p, +@list) { say @list; }; pickBinomial(0.3, <a b c>); # note that +@ *@ **@ are different

[21:41] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´[a b c]‚ê§¬ª

[21:42] <b2gills> `my List @foo`  is basically the same as `my @foo is Array[List]`

[21:43] <scovit> m: sub pickBinomial(Numeric(Cool) $p, +@list) { say @list; }; pickBinomial(0.3, <a b c>.Set);

[21:43] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´[set(a b c)]‚ê§¬ª

[21:44] <scovit> a set is not iterable?

[21:45] <b2gills> m: multi sub pickBinomial(Numeric(Cool) $p, +@list) { say @list; }; multi sub pickBinomial(Numeric(Cool) $p, Set $set){ samewith $p, $set.keys};  pickBinomial(0.3, <a b c>.Set);

[21:45] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´(b c a)‚ê§¬ª

[21:45] <b2gills> m: .say for set(<a b c>)

[21:45] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´c => True‚ê§a => True‚ê§b => True‚ê§¬ª

[21:45] <scovit> m: .say for <a b c>.Set;

[21:45] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´a => True‚ê§b => True‚ê§c => True‚ê§¬ª

[21:45] <geekosaur> it doesn't automatically unwind itself into a list, no. 'iterable' sounds like you;re using a different model than per;

[21:45] <geekosaur> perl6

[21:45] <scovit> geekosaur just learning

[21:46] <b2gills> scovit: You want to call .keys on a Set

[21:46] <geekosaur> +@ gives you a list made up of everything left, the one thing left is a set

[21:46] <b2gills> +@ will reuse the list if there is one *@ will flatten **@ doesn't flatten

[21:49] <scovit> b2gills to use multi was the solution proposed also by moritz. But I am left wondering how different is this from augment that is considered MONKEY

[21:49] <geekosaur> multi is declaring up front you want to allow additions. augment allows arbitrary additions at runtime

[21:49] <geekosaur> so augment is monkey patching something not intended for it

[21:50] <geekosaur> also you can't alter a multi across modules iirc, but augment can. (this means augment forces runtime resolution whereas multi can be compile time resolved because it knows it will see all variants)

[21:51] <geekosaur> runtime is more flexible but a lot slower, no optimizations possible

[21:51] <scovit> I understand.. compile time errors are good also

[21:51] <geekosaur> not just errors. if the compiler knows which variant will be used ahead of time, it can skip the runtoime part entirely and hardcode the one it knows

[21:52] <geekosaur> this makes for fairly big speedups compared to runtime dispatching

[21:52] <El_Che> if you don't need something specific from runtime, always to for compile time

[21:52] <El_Che> errors will be catch before data is touched

[21:52] *** sjn joined
[21:52] <buggable> New CPAN upload: P5math-0.0.2.tar.gz by ELIZABETH http://modules.perl6.org/dist/P5math:cpan:ELIZABETH

[21:58] <scovit> but let's say i'm lazy, I would just write:

[21:59] <scovit> m: sub pickBinomial(Numeric(Cool) $p, $list) { $list.pick(3).say }; pickBinomial(0.3, <a b c>.Set);

[21:59] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´(c a b)‚ê§¬ª

[21:59] <scovit> m: sub pickBinomial(Numeric(Cool) $p, $list) { $list.pick(3).say }; pickBinomial(0.3, <a b c>);

[21:59] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´(b a c)‚ê§¬ª

[21:59] <scovit> m: sub pickBinomial(Numeric(Cool) $p, $list) { $list.pick(3).say }; pickBinomial(0.3, Mu);

[21:59] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´Type check failed in binding to parameter '$list'; expected Any but got Mu (Mu)‚ê§  in sub pickBinomial at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:59] <scovit> works with lists, sets, but fail Runtime

[22:02] <scovit> and i fail to see a way that let me do that as a lazy person

[22:02] <scovit> (compile time checks)

[22:04] *** scovit left
[22:04] *** aindilis left
[22:08] <geekosaur> you probably don;t want Mu, it's somewhat special

[22:09] <geekosaur> for most purposes you want Any. Mu is used when you need specific handling for Junction, which otherwise autothreads so it will do what you intended it to do

[22:09] <b2gills> .tell scovit It seems like the compile time error doesn't throw unless both the parameter and argument are different sub-types of Any

[22:09] <yoleaux> b2gills: I'll pass your message to scovit.

[22:11] <b2gills> m: sub foo ( Str $ ){}; foo(Int)

[22:11] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Calling foo(Int) will never work with declared signature (Str)‚ê§at <tmp>:1‚ê§------> 3sub foo ( Str $ ){}; 7‚èè5foo(Int)‚ê§¬ª

[22:11] <b2gills> m: sub foo ( Str $ ){}; foo( class :: is Mu {} )

[22:11] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´Type check failed in binding to parameter '<anon>'; expected Str but got <anon|1> (<anon|1>)‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:13] <b2gills> m: sub foo ( Str $ ){}; foo( my $ is class :: is Mu {} ) # nevermind

[22:13] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Can't use unknown trait 'is class' in a variable declaration.‚ê§at <tmp>:1‚ê§------> 3sub foo ( Str $ ){}; foo( my $ is class7‚èè5 :: is Mu {} ) # nevermind‚ê§    expecting any of:‚ê§        TypeObj‚Ä¶¬ª

[22:13] <b2gills> m: sub foo ( Str $ ){}; foo( my $ is Mu )

[22:13] <camelia> rakudo-moar c80ea2f28: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§is trait on $-sigil variable not yet implemented. Sorry.‚ê§Did you mean: my Mu $?‚ê§at <tmp>:1‚ê§------> 3sub foo ( Str $ ){}; foo( my $ is Mu 7‚èè5)‚ê§    expecting any of:‚ê§        constraint‚ê§¬ª

[22:28] *** mcmillhj joined
[22:34] *** mcmillhj left
[22:36] *** HaraldJoerg left
[22:47] *** mcmillhj joined
[22:53] *** mcmillhj left
[22:57] *** rindolf left
[22:57] *** entonian joined
[22:58] *** mcmillhj joined
[23:00] *** zapwai joined
[23:01] *** entonian left
[23:01] *** entonian joined
[23:03] *** mcmillhj left
[23:08] *** entonian left
[23:08] *** entonian joined
[23:11] *** entonian left
[23:14] *** mcmillhj joined
[23:14] *** Zoffix joined
[23:15] *** zapwai left
[23:15] <Zoffix> Why do people edit my stuff? AlexDaniel on GitHub, now b2gills on SO. Get your own content and edit that.

[23:16] <Zoffix> b2gills: it looks like shit now.

[23:17] <Zoffix> This exactly why I hate SO. Every pedant feels they have to do something

[23:17] <raschipi> Zoffix: group maintenece is where's at. Owning content in frowned upon by modern communities.

[23:17] <Zoffix> Yeah, well, that's the last time I responded to anything on SO. Own that.

[23:17] *** Zoffix left
[23:18] <raschipi> Next he will add some files to MoarVM or Rakudo and complain when people change them.

[23:19] *** mcmillhj left
[23:20] <El_Che> Zoffix: don't get pissed off by small potatoes

[23:22] *** Zoffix joined
[23:22] <Zoffix> raschipi: the files in MoarVM and Rakudo do not have "posted by Zoffix" next to them

[23:23] <El_Che> they do have a "edited by the devil" though

[23:24] <Zoffix> El_Che: I'm not pissed off. I'm just pointing out the very obvious fact that it's rude to just go in and willy-nilly mess up formatting of another person's content. I don't make random sentences bold and I don't give my lists ugly offsets if I can help it. Why would a stranger go in and add that on things that have my name on it.

[23:24] *** mcmillhj joined
[23:24] <Zoffix> If you have your own style, use it on your own content. Don't force it down the throat of others.

[23:25] <El_Che> Zoffix: that pretty much how SO rolls. It's a "perk" for people with > 2K reputation

[23:25] <El_Che> I am not a fan of that, but not too annoyed either

[23:26] <El_Che> you can probably rollback changes as the authior

[23:26] *** psychoslave joined
[23:27] *** Zoffix left
[23:29] *** mcmillhj left
[23:31] *** psychoslave left
[23:43] *** uzl_ joined
[23:45] *** mcmillhj joined
[23:45] *** uzl left
[23:48] *** aindilis joined
[23:49] *** mcmillhj left
[23:59] *** w_richard_w joined
