[00:01] *** mcmillhj joined
[00:06] *** mcmillhj left
[00:09] *** konsolebox joined
[00:17] *** mcmillhj joined
[00:21] *** mcmillhj left
[00:22] <Geth> ¦ doc: 42817318db | (JJ Merelo)++ | doc/Language/glossary.pod6

[00:22] <Geth> ¦ doc: Changes link as indicated, closes #2170

[00:22] <Geth> ¦ doc: 

[00:22] <Geth> ¦ doc: Also reflows, puts anchors above titles, and rewrites the pull request entry (decapitalizing second word)

[00:22] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/42817318db

[00:22] <synopsebot> Link: https://doc.perl6.org/language/glossary

[00:43] *** fake_space_whale joined
[00:43] *** mcmillhj joined
[00:48] *** mcmillhj left
[00:55] *** mcmillhj joined
[00:57] *** benjikun2 is now known as benjikun

[01:00] *** mcmillhj left
[01:07] *** aborazmeh joined
[01:07] *** aborazmeh left
[01:07] *** aborazmeh joined
[01:07] *** molaf left
[01:09] *** jameslenz joined
[01:14] *** jameslenz left
[01:20] *** molaf joined
[01:23] *** kerframil joined
[01:32] *** mcmillhj joined
[01:33] *** markoong left
[01:34] *** sftp joined
[01:37] *** mcmillhj left
[01:50] *** mcmillhj joined
[01:55] *** mcmillhj left
[02:00] *** timotimo left
[02:07] *** timotimo joined
[02:08] *** cono joined
[02:14] *** fake_space_whale left
[02:16] *** aborazmeh left
[02:18] *** Zoffix joined
[02:18] *** Zoffix left
[02:20] *** mcmillhj joined
[02:24] *** mcmillhj left
[02:33] *** mcmillhj joined
[02:38] *** mcmillhj left
[02:39] <Geth> ¦ marketing: 087bc1b183 | (Zoffix Znet)++ | 8 files

[02:39] <Geth> ¦ marketing: Add some purchased stock

[02:39] <Geth> ¦ marketing: 

[02:39] <Geth> ¦ marketing: - Diwali illustrations and humans with computers

[02:39] <Geth> ¦ marketing: - DepositPhotos standard license applies:

[02:39] <Geth> ¦ marketing:     https://depositphotos.com/content-license.html

[02:39] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/087bc1b183

[02:58] *** tokomer joined
[03:09] *** jameslenz joined
[03:11] *** mcmillhj joined
[03:14] *** jameslenz left
[03:15] *** mcmillhj left
[03:20] *** Xliff joined
[03:20] <Xliff> \o

[03:21] <Xliff> I know it's late, but...

[03:21] <Xliff> https://gist.github.com/Xliff/6b16cccd09cee13d543bed8745730042

[03:26] *** mcmillhj joined
[03:30] *** araraloren joined
[03:31] *** mcmillhj left
[03:31] <araraloren> Hi

[03:34] <araraloren> When I call more than once `tap` on a Supply, what's the order when they be called ?

[03:39] <Xliff> m: my $supplier = Supplier.new; my $supply1 = $supplier.Supply; $supply1.tap(-> $v { say "1: $v" }); $supply1.tap(-> $v { say "2: $v" });  $supplier.emit(42);

[03:39] <camelia> rakudo-moar 762982046: OUTPUT: «1: 42␤2: 42␤»

[03:39] <Xliff> ^^ araraloren

[03:40] <Xliff> So, in order of the taps made on the supply.

[03:40] <araraloren> Xliff Can I write code reply on that order ?

[03:40] <Xliff> If you are doing this in a multithreaded manner, that order will be hard to define.

[03:40] <araraloren> oh, just in single thread

[03:41] <Xliff> araraloren: I don't really know. Based on that quick example, my guess is that the supplies execute based on a list. 

[03:41] <araraloren> okay, Xliff 

[03:41] <araraloren> thanks

[03:41] <Xliff> m: my $supplier = Supplier.new; my $supply1 = $supplier.Supply; $supply1.tap(-> $v { say "1: $v" }); $supply1.tap(-> $v { say "2: $v" }); $supply1.tap(-> $v { say "3: $v" }); $supplier.emit(42);

[03:41] <camelia> rakudo-moar 762982046: OUTPUT: «1: 42␤2: 42␤3: 42␤»

[03:41] <Xliff> Now if you get another sypply from the supplier, they should execute at the same time. 

[03:42] <araraloren> sametime ?

[03:42] <Xliff> m: my $supplier = Supplier.new; my $supply1 = $supplier.Supply; $supply1.tap(-> $v { say "1: $v" }); $supply1.tap(-> $v { say "2: $v" }); $supply1.tap(-> $v { say "3: $v" }); my $supply2 = $supplier.Supply; $supply2.tap(-> $v { say "S2: $v"}); $supplier.emit(42);

[03:42] <camelia> rakudo-moar 762982046: OUTPUT: «1: 42␤2: 42␤3: 42␤S2: 42␤»

[03:42] <Xliff> Oh wow! I am... nonplussed.

[03:43] <araraloren> I don't think so :)

[03:43] <Xliff> m: my $supplier = Supplier.new; my $supply1 = $supplier.Supply; $supply1.tap(-> $v { say "1: $v" }); $supply1.tap(-> $v { say "2: $v" }); $supply2.tap(-> $v { say "S2: $v"}); $supply1.tap(-> $v { say "3: $v" }); my $supply2 = $supplier.Supply; $supplier.emit(42);

[03:43] <camelia> rakudo-moar 762982046: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$supply2' is not declared. Did you mean any of these?␤    $supply1␤    &SUPPLY␤    Supply␤␤at <tmp>:1␤------> 3); $supply1.tap(-> $v { say "2: $v" }); 7⏏5$supply2.tap(-> $v { …»

[03:43] <araraloren> if they are in single thread, they should execute in order

[03:43] <Xliff> m: my $supplier = Supplier.new; my $supply1 = $supplier.Supply; $supply1.tap(-> $v { say "1: $v" }); $supply1.tap(-> $v { say "2: $v" }); my $supply2 = $supplier.Supply; $supply2.tap(-> $v { say "S2: $v"}); $supply1.tap(-> $v { say "3: $v" });  $supplier.emit(42);

[03:43] <camelia> rakudo-moar 762982046: OUTPUT: «1: 42␤2: 42␤S2: 42␤3: 42␤»

[03:43] <Xliff> Right. Fork and the order gets complex. 

[03:44] <araraloren> hmm

[03:44] <araraloren> okay, thanks

[03:44] <araraloren> I want to learn the react in Perl 6

[03:47] <Xliff> Me to.

[03:50] *** mcmillhj joined
[03:55] *** mcmillhj left
[04:03] *** aborazmeh joined
[04:03] *** aborazmeh left
[04:03] *** aborazmeh joined
[04:04] *** Xliff left
[04:17] *** mcmillhj joined
[04:22] *** imcsk8_ left
[04:22] *** mcmillhj left
[04:28] *** skids left
[04:29] *** MilkmanDan left
[04:30] *** imcsk8 joined
[04:31] *** aborazmeh left
[04:33] *** mcmillhj joined
[04:34] *** MilkmanDan joined
[04:37] *** mcmillhj left
[04:44] *** spycrab0 left
[04:46] *** x[LGWs4x4i]uG2N0 left
[04:49] *** x[LGWs4x4i]uG2N0 joined
[04:56] *** wamba joined
[04:59] *** mcmillhj joined
[05:04] *** mcmillhj left
[05:07] <benjikun> Hmm.. getting an error with installing zef that I've never gotten before

[05:07] <benjikun> `Unhandled exception: failed to load library 'dynext/libperl6_ops_moar.so'

[05:07] <benjikun>  at <unknown>:1  (/home/perl6/.rakudo/perl6.moarvm:<dependencies+deserialize>)

[05:07] <benjikun> `

[05:10] *** jameslenz joined
[05:12] *** mcmillhj joined
[05:13] *** Zoffix joined
[05:13] <Zoffix> benjikun: how did you install your perl6?

[05:13] <yoleaux> 13 Jul 2018 21:49Z <samcv> Zoffix: I replied to that. thanks for the heads up

[05:13] <benjikun> Zoffix: cloning the rakudo/rakudo repo directly and going from there

[05:14] <benjikun> I'm redoing it now, will see if it works with rakudostar instead

[05:14] <Zoffix> benjikun: what steps did you use to build?

[05:14] <geekosaur> you need to update, possibly; recently some extops were removed

[05:14] <Zoffix> sounds like you missed nqp rebuild or forgot to run perl6 Configure.pl

[05:14] <Zoffix> *perl

[05:14] *** jameslenz left
[05:14] <benjikun> Nah I ran `perl Configure.pl --backend=moar --gen-nqp --gen-moar`

[05:15] <benjikun> Like normal

[05:16] <geekosaur> hm. bootstrap nqp might need to be regenerated?

[05:16] *** mcmillhj left
[05:17] * Zoffix never had any issues with this updater script: https://github.com/zoffixznet/r#linux

[05:18] <benjikun> btw Zoffix, the guy I'm working with on that financial API thingy had some moarvm level error earlier: https://pastebin.com/Y8p6XfJ0

[05:18] <benjikun> Invalid pointer

[05:19] <benjikun> I believe it happened because he was using the windows subsystem for linux thing

[05:19] <Zoffix> benjikun: are you checking out a release tag or are you building HEAD?

[05:19] <benjikun> Zoffix: I built HEAD that time

[05:20] <Zoffix> benjikun: could be that's why. There's a bunch of issues on HEAD ATM, e.g. R#2047

[05:20] <synopsebot> R#2047 [open]: https://github.com/rakudo/rakudo/issues/2047 [⚠ blocker ⚠] [WIP] Rescalar merge & other toaster-related stuff

[05:20] <benjikun> Ah, I see

[05:20] <Zoffix> benjikun: you should build a release. The https://github.com/zoffixznet/r#linux script checks out a latest release on update

[05:20] <benjikun> Yeah, I'm just doing it from the latest rakudostar release now

[05:20] <Zoffix> huggable: star

[05:20] <huggable> Zoffix, Estimated Rakudo Star releases: .01, .04, .07 & .10

[05:21] <benjikun> We should put a warning not to use rakudobrew anymore on Zef's readme https://github.com/ugexe/zef

[05:21] <Zoffix> likely get a slightly more performant compiler if you build 2018.06 compiler release instead.

[05:21] <Zoffix> Submit a PR :)

[05:22] <benjikun> why does rakudostar still come with LWP::Simple

[05:22] <Zoffix> What do you mean? Why shouldn't it?

[05:22] <benjikun> didn't we stop using LWP::Simple for some reason

[05:22] <benjikun> or stop recommending it

[05:23] * Zoffix doesn't remember anything of the sort.

[05:23] <benjikun> hmm, maybe I'm just remembering nonsense lmao

[05:27] <Geth> ¦ marketing: 2c155714b0 | (Zoffix Znet)++ | 9 files

[05:27] <Geth> ¦ marketing: Add "Futureproof Perl 6" flyer / ID 1531540189

[05:27] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/2c155714b0

[05:29] *** molaf left
[05:31] <benjikun> Zoffix: I just reinstalled everything using the 2018.06 release and I'm still getting the weird `failed to load library 'dynext/libperl6_ops_moar.so'`

[05:32] <Zoffix> benjikun: did you say this was on Windows?

[05:33] <Zoffix> Can you check if you have any moar.exe processess running? It happens to me sometimes where an active process would silently interfer with rebuild

[05:34] <benjikun> Nah, this is on debian

[05:35] <Zoffix> benjikun: what's the full output of the reinstall session? Do you still have it?

[05:35] *** wamba left
[05:36] <benjikun> Zoffix: https://gist.github.com/ijneb/a44aac1f4803744aa680b326e61c3a57

[05:37] *** mcmillhj joined
[05:40] <Zoffix> benjikun: and the `load library` error comes only from zef? What about just `perl6 -e 'print 42'` ?

[05:40] <benjikun> Running `perl6` by itself gives the same thing

[05:41] <Zoffix> benjikun: what does `which perl6` give?

[05:41] <benjikun> UNLESS I'm in the directory in which it is installed

[05:41] <benjikun> oh what the heck

[05:41] <geekosaur> you have an old perl6 somewhere

[05:41] <benjikun> which perl6 gives `/home/perl6/.rakudo//perl6`

[05:41] <benjikun> lol

[05:41] <benjikun> not a typo

[05:41] <Zoffix> it should point to /home/perl6/.rakudo/install/bin/perl6

[05:41] <Zoffix> Then I think the error will go away

[05:42] <benjikun> I have the path set to include that too

[05:42] *** mcmillhj left
[05:42] <Zoffix> My only paths for Perl 6 are $HOME/rakudo/install/bin:$HOME/rakudo/install/share/perl6/site/bin

[05:43] <Zoffix> And I have rakduo installed in ~/rakudo

[05:43] <geekosaur> check for an alias?

[05:43] <geekosaur> which could indeed include a doubled slash

[05:44] <benjikun> weird, I logged out and logged back in and it went away

[05:44] <geekosaur> hash -r

[05:44] <geekosaur> ...right. tracked alias.

[05:45] <Zoffix> benjikun: and the load library error gone too?

[05:45] <benjikun> Zoffix: yep

[05:45] <Zoffix> sweet

[05:46] *** Zoffix left
[05:52] *** mcmillhj joined
[05:57] *** mcmillhj left
[06:00] *** MasterDuke left
[06:05] *** mcmillhj joined
[06:09] *** mcmillhj left
[06:25] *** robertle joined
[06:26] *** noganex_ joined
[06:28] *** mcmillhj joined
[06:28] <AlexDaniel> zostay: hello :) Any news about ArrayHash ? :)

[06:29] *** noganex left
[06:33] *** mcmillhj left
[06:34] *** ydlr left
[06:38] *** konsolebox left
[06:41] *** konsolebox joined
[06:46] *** troys left
[06:48] *** mcmillhj joined
[06:52] *** mcmillhj left
[06:54] <Geth> ¦ whateverable: 5937958248 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable.pm6

[06:54] <Geth> ¦ whateverable: Tweak the score a little bit for .t files

[06:54] <Geth> ¦ whateverable: 

[06:54] <Geth> ¦ whateverable: Otherwise in the presence of .p6 file and a .t file with a shebang

[06:54] <Geth> ¦ whateverable: both will have the same score (and I want to call a .t file from .p6).

[06:54] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/5937958248

[06:55] *** committable6 left
[06:55] *** bisectable6 left
[06:55] *** committable6 joined
[06:55] *** ChanServ sets mode: +v committable6

[06:56] *** bisectable6 joined
[06:56] *** evalable6 joined
[06:56] *** ChanServ sets mode: +v evalable6

[07:04] *** rindolf joined
[07:10] *** jameslenz joined
[07:13] *** lizmat joined
[07:14] *** jameslenz left
[07:19] *** lizmat left
[07:22] *** mcmillhj joined
[07:23] *** lizmat joined
[07:27] *** mcmillhj left
[07:28] *** ufobat_ joined
[07:35] *** lizmat left
[07:37] *** jmaslak_ joined
[07:41] *** jmaslak left
[07:42] *** mcmillhj joined
[07:46] *** mcmillhj left
[07:56] *** xinming_ joined
[07:58] *** lizmat joined
[07:58] *** sena_kun joined
[07:59] *** xinming left
[08:01] *** spycrab0 joined
[08:12] *** mcmillhj joined
[08:16] *** mcmillhj left
[08:28] *** mcmillhj joined
[08:32] *** mcmillhj left
[08:46] *** mcmillhj joined
[08:47] *** kerframil left
[08:50] *** mcmillhj left
[09:04] *** llfourn left
[09:07] *** llfourn joined
[09:10] *** jameslenz joined
[09:14] *** jameslenz left
[09:18] <Woodi> hi today :)

[09:19] <Woodi> can I precompile some simple script so it would run faster ?

[09:22] <Woodi> longer version: I have script that parses ~30 lines with grammar then sums and prints results. it takes 0.640s hot. but p5 version runs in 0.130s cold and 0.035s hot. --stagestats shows 0.400s is eaten by parse...

[09:23] <Woodi> is it script parsing or GRAMMAR.parse time ?

[09:24] <Woodi> 64-bit debian so it is 19 x perl5. 32-bit is ~22x since few years... 

[09:26] <AlexDaniel> I don't know if it's going to help noticeably, but you can move some stuff into a module

[09:29] <Woodi> but it's just 60 lines... arg parsing, printing :)  but for benchmarking it's a good idea

[09:32] <Ulti> startup time of just the runtime is like 0.25s to 0.3s for me if you care that much might be easier to just make your program like a service so you arent paying that all the time

[09:35] *** woolfy joined
[09:38] <Woodi> moving grammar to module makes 0.580s

[09:38] <Woodi> Ulti: I mainly care for traditional *nix like usage :)

[09:38] *** woolfy left
[09:39] <AlexDaniel> Woodi: so what else is taking time? Maybe there's a way to optimize your program?

[09:39] <AlexDaniel> sure the startup time is a big chunk, but that still leaves ≈300ms of something

[09:41] <Woodi> that quite possible :)  it's just naive use of grammar and for-each on the result. so possibly not good programming. but on the other hand pretty good, IMO, newcomer-like test case...

[09:42] <lizmat> Woodi: atm, putting the logic into a module is your best bet

[09:43] <lizmat> perhaps creating a module with a MAIN sub in it, and just running the module might work ?

[09:43] <lizmat> (a MAIN sub that doesn't get exported BTW)

[09:47] <Woodi> lizmat: that's a head scratch, a bit :)  from total newcomer to v6 point of view. slicing small script and putting grammar and for loop into a module is WOOT at least :)

[09:48] <Woodi> but i realy wanted to learn all that MAIN programming, thanx :)

[09:49] <lizmat> for instance: module Foo { }

[09:49] <lizmat> my sub MAIN(|c) { dd c }

[09:49] <evalable6> lizmat, rakudo-moar c567af736: OUTPUT: «\()␤»

[09:49] <lizmat> if you put that into a Foo.pm6 file

[09:49] <Woodi> checking...

[09:49] <lizmat> you can either run that as a script (it will run the sub MAIN)

[09:50] <lizmat> or you can just load it as a module with "use Foo" and MAIN won't get executed

[09:50] *** ufobat_ left
[10:04] *** |oLa| joined
[10:14] *** eliasr joined
[10:32] *** markoong joined
[10:57] <Woodi> ok, can't make it working atm, will try again later

[10:57] *** mst left
[10:57] *** mst joined
[10:57] <Woodi> Ulti: but emacs-like service have some addiction in it :)

[11:04] <Woodi> btw. fastest start up is a killer app ;)

[11:10] *** jameslenz joined
[11:15] *** jameslenz left
[11:29] *** sarna_ joined
[11:33] *** sarna_ is now known as sarna

[11:35] *** pecastro joined
[11:51] <tbrowder_> lizmat: g’day

[11:51] <lizmat> tbrowder_ o/

[11:52] <tbrowder_> lizmat: is there any way to see older p6 weeklies?

[11:53] <tbrowder_> when i look at the latest i see a menu item that seems to go to older ones but public access is blocked

[11:53] <moritz> tbrowder_: the frontpage of https://p6weekly.wordpress.com is infintely scrolling

[11:53] *** MasterDuke joined
[11:54] <moritz> there's also https://p6weekly.wordpress.com/page/21/  with page numbers from 1 to 25

[11:54] <moritz> or if you are interested in a particular month, something like https://p6weekly.wordpress.com/2018/06/ works

[11:55] <tbrowder_> moritz: thnx

[11:56] <tbrowder_> if that’s not on perl6.org it needs to be

[11:57] *** User_ joined
[11:59] <moritz> or you can just, like, google for older issues :-)

[12:01] *** User_ left
[12:02] *** User_ joined
[12:03] *** User_ left
[12:10] *** ufobat_ joined
[12:42] <tbrowder_> true

[12:42] *** pmurias joined
[12:45] *** mprelude joined
[12:45] *** mprelude left
[13:10] *** jameslenz joined
[13:15] *** jameslenz left
[13:33] *** benjikun2 joined
[13:35] *** benjikun left
[13:43] *** mprelude joined
[13:43] *** mprelude left
[13:46] *** skids joined
[13:54] *** felher joined
[14:06] *** wamba joined
[14:08] <sarna> o/

[14:08] <timotimo> o/

[14:09] <sarna> I'm sorry I wasn't there for the squashaton :(

[14:10] <timotimo> there'll be another :)

[14:10] <sarna> I've been busy with trying to get a job

[14:10] <sarna> I still don't have one, but the only thing I can do now is wait for potential employers to respond, so.. :)

[14:10] <sarna> is it the first weekend of the month?

[14:11] <timotimo> squashable6: status

[14:11] <squashable6> timotimo, Next SQUASHathon in 19 days and ≈19 hours (2018-08-04 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[14:12] <sarna> unbitrot?

[14:12] <AlexDaniel> also I'd appreciate help for organizing it

[14:12] <AlexDaniel> sarna: the idea is that many modules in the ecosystem don't pass their tests

[14:12] <AlexDaniel> so are essentially broken

[14:12] <sarna> of the whole ecosystem? hoo boy, gonna be fun

[14:13] *** MasterDuke left
[14:13] *** obfusk left
[14:13] <AlexDaniel> some of them are very old, some were “broken” by fixes in rakudo over time

[14:13] <sarna> AlexDaniel: I see

[14:13] <AlexDaniel> so we need a list of all failing modules, and then some way to distribute the work to for going through them

[14:14] <AlexDaniel> honestly there's no plan yet, as I'm usually working on release-squashathon-release-squashathon clock

[14:14] <AlexDaniel> releasable6: status

[14:14] <releasable6> AlexDaniel, Next release in ≈7 days and ≈4 hours. 10 blockers. 0 out of 180 commits logged

[14:15] <releasable6> AlexDaniel, Details: https://gist.github.com/7415494f707bacc31008b81212686637

[14:15] <AlexDaniel> so I'd be looking at it in around two weeks

[14:15] <AlexDaniel> if anybody else can organize it I'd be grateful

[14:16] *** MasterDuke joined
[14:17] <sarna> don't look at me, I wouldn't trust myself with important things

[14:17] <AlexDaniel> well, you can definitely do much better than me :)

[14:18] <AlexDaniel> as long as you have time and interest of course

[14:19] <sarna> well, I could try

[14:19] <sarna> but only if you promise I won't get extradited from #perl6 if I screw up

[14:21] <AlexDaniel> well, I'd be around anyway to assist :)

[14:21] <AlexDaniel> with squashable6 bot and other things if needed

[14:21] <AlexDaniel> although squashable6 is perhaps of no help in this case, as we can't track all of the modules in the ecosystem

[14:22] <sarna> alrighty then, what shall I do 👀

[14:22] <timotimo> why not? :P

[14:22] <timotimo> oh, we don't have control to put the hooks everywhere

[14:22] <AlexDaniel> yeah

[14:22] <timotimo> do we want a perl6communitymodulable btw?

[14:23] <timotimo> forks a module to the perl6 community account and changes ecosystem's meta.list to point to the new one?

[14:23] <timotimo> and back, once the original maintainer of a module returns

[14:23] <timotimo> just add it to the ~5000 open issues whateverable has :')

[14:25] <sarna> it only has 230 open issues :^)

[14:26] <sarna> it's such a nice number though

[14:27] <AlexDaniel> https://github.com/perl6/whateverable/issues/337

[14:27] *** sarna left
[14:28] *** sarna joined
[14:28] <Kaypie> what is the null multi_declarator in Perl6::Grammar meant to be used for? it's there, but it can't be used without slangs because term:sym<multi_declarator> only expects proto, multi, and only to be able to be used

[14:29] *** sarna_ joined
[14:36] <moritz> Kaypie: looks like dead code to me

[14:36] <moritz> ah no

[14:36] <timotimo> is it what makes "multi foo" instead of "multi sub foo" work?

[14:36] <AlexDaniel> sarna_: so we need a list of things to do, and some way of tracking the progress… I don't know really, maybe we can/should modify squashable6?

[14:37] <AlexDaniel> sarna_: for example maybe there should be a command like “gimme the list!!”

[14:37] <AlexDaniel> sarna_: and it gives you a list of modules to look at

[14:37] <sarna> AlexDaniel: gimme the list of things to do or modules in the ecosystem?

[14:37] <sarna> oh

[14:37] <AlexDaniel> yeah

[14:37] <moritz> Kaypie: it's probably for "sub foo" instead of "multi sub foo"

[14:37] <AlexDaniel> well can be both :)

[14:38] <moritz> it says sym<null>, but doesn't actually match the string 'null'

[14:38] <AlexDaniel> and then we can have a command like for saying “item X is done, comment: … … … …”

[14:38] <AlexDaniel> or module X is done

[14:38] <AlexDaniel> and it'll write down who did it and their comment

[14:38] <sarna> sounds rad

[14:39] <AlexDaniel> we can also have “give 10 things” or something like that, and it'd try not to give same tasks twice

[14:39] <moritz> irc frontend for a kanban board? :-)

[14:40] <AlexDaniel> so that we don't have multiple contributors working on the same thing

[14:40] <AlexDaniel> moritz: actually… yea? yeah…

[14:40] <AlexDaniel> I mean, if that is available somewhere, we don't need a bot, I'd say

[14:40] <AlexDaniel> can we do something like this on github?

[14:40] <AlexDaniel> like prepopulate a “Project” with a list of modules, and then anyone can drag them around and stuff like that

[14:41] <moritz> https://help.github.com/articles/about-project-boards/

[14:41] <moritz> there's also trello, not integrated with git/github

[14:42] <AlexDaniel> so we can maybe have TODO | PR submitted | Fixed

[14:42] <AlexDaniel> or something like that?

[14:42] <moritz> I haven't followed most of the conversation; sorry if my comments are off/useless

[14:42] <sarna> those github project boards look the most promising imo

[14:42] <El_Che>  we're talking about kanban

[14:43] <El_Che> so most of it is just out-my-ass talk

[14:43] <El_Che> (what I see at work)

[14:43] <sarna> and I have a question!

[14:43] <sarna> I'll ask it before I forget

[14:43] <sarna> m: loop (my UInt $i = 2; $i >= 0; $i--) {say $i;}

[14:43] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «2␤Type check failed in assignment to $i; expected UInt but got Int (-1)␤  in block <unit> at <tmp> line 1␤␤1␤0␤»

[14:43] <sarna> oh! why didn't it run? on my machine it throws an error on runtime

[14:44] <timotimo> that is a runtime error :)

[14:44] <sarna> well, there was an output

[14:44] <sarna> yeah

[14:44] <sarna> I skimmed over it

[14:44] <timotimo> stderr and stdout get kind of jumbled up

[14:44] <sarna> can I somehow check it at compile time?

[14:44] <AlexDaniel> moritz: it's very on point, and we are brainstorming :)

[14:45] <sarna> I mean something like "hey your loop is while(true) and you probably don't want that"

[14:45] <moritz> AlexDaniel: :-)

[14:45] <timotimo> very difficult, as $i could be modified inside the loop body

[14:46] <El_Che> that would be a terrible loop :)

[14:47] <sarna> I wondered if we could check that because clang gave me a warning when I tried to do that on accident

[14:47] <sarna> I'll try to modify i from inside the body and see what happens

[14:47] <timotimo> C is a lot more rigid :)

[14:48] *** Aukai joined
[14:49] *** Aukai left
[14:49] *** Aukai joined
[14:50] <sarna> oh!

[14:50] <sarna> well, look at the type, I mean

[14:50] <sarna> i is UInt, and can't ever be < 0

[14:51] <timotimo> problem is, we define UInt as a subset of Int "where * >= 0", which is code

[14:51] <timotimo> if we don't have a way to tell rakudo that this corresponds to a range, it won't be able to know

[14:51] <sarna> oh :(

[14:52] <timotimo> in your code i'd use Int instead of UInt; you're not going to reassign $i inside the block, are you? :P

[14:52] <timotimo> also, i'd probably use a ... operator and for loop, though if your code is performance-critical, the loop you have wins against that

[14:53] <sarna> it's just a toy example to illustrate what I meant :D

[14:53] <timotimo> right

[14:54] *** Aukai left
[14:55] <sarna> still, that runtime exception is much better than getting UBd into oblivion

[14:55] <timotimo> UB?

[14:56] <timotimo> oh, undefined behaviour

[14:56] <sarna> yep

[14:56] <sarna> nasal demons :)

[14:58] <sarna> > Organization-wide project boards can contain issues and pull requests from any repository that belongs to an organization

[14:59] <sarna> does every module in the ecosystem belong to the perl6 organization?

[15:05] <El_Che> o

[15:05] <El_Che> no

[15:11] *** jameslenz joined
[15:15] *** jameslenz left
[15:24] *** benjikun joined
[15:25] *** benjikun2 left
[15:31] *** thowe joined
[15:35] *** sarna left
[15:35] *** sarna_ is now known as sarna

[15:36] *** MilkmanDan left
[15:37] *** MilkmanDan joined
[15:39] *** fake_space_whale joined
[15:58] *** uzl joined
[16:03] *** obfusk joined
[16:05] <uzl> I created a pdf version of the Perl cheat sheet. The second page is about quoting constructs, though I am not sure if the simplified examples get their point across.

[16:05] <uzl> This is the pdf: http://docdro.id/9JLV6Lq

[16:05] <uzl> Any feedback would be welcome!

[16:13] <MasterDuke> uzl: the resources section should probably have perl6.org in addition to (or instead of) perl.org

[16:13] *** uzl left
[16:14] *** uzl joined
[16:15] *** uzl left
[16:16] <Juerd> Ooh, that's nice. I once created the Perl cheatsheet, Damian created the Perl 6 version of it. I'm glad to see it's still being kept up-to-date!

[16:16] <Juerd> https://perlmonks.org/?node_id=238031  # 15 years ago!

[16:18] <p6noob> is Q really the minimalistic string quoting?   Would just naked  single quotes get that title.

[16:18] *** uzl joined
[16:18] <timotimo> p6noob: naked single quotes still have limited backslashing in them i think?

[16:19] <p6noob> yeah, there are differences, depends what is being conveyed in that cheatsheet,  just seemed a bit weird to me as a starting recommendation.

[16:19] *** domidumont joined
[16:19] <uzl> MasterDuke: Oh, I missed that. Will take care of it.

[16:21] <uzl> According to the doc, Q() is interpreted as a function call. How is Q'' interpreted? And why does Q"" work?

[16:21] <timotimo> Q"" works because what comes after Q is interpreted as a quote

[16:22] <timotimo> m: say Qtpiet

[16:22] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Qtpiet used at line 1␤␤»

[16:22] <timotimo> ok, so no letters allowed

[16:22] <timotimo> m: say Q'foo'

[16:22] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say Q'foo7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤  …»

[16:22] <timotimo> that's also fair, though i imagine surprising to a newbie

[16:22] *** ExtraCrispy left
[16:23] <uzl> Juerd: That's sort of a long history. ;)

[16:25] *** domidumont left
[16:25] *** faraco joined
[16:26] *** araraloren left
[16:26] *** domidumont joined
[16:26] <MasterDuke> would it make sense to have a special error for Q' ?

[16:27] <uzl> timotimo: Can you ELI5 that compilation error if possible?

[16:28] <geekosaur> m my $x'y = 5; dd $x'y

[16:28] <geekosaur> er

[16:28] <geekosaur> m: my $x'y = 5; dd $x'y

[16:28] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «Int $x'y = 5␤»

[16:28] <geekosaur> primes are valid in names

[16:28] <timotimo> yeah, but only inside names, just like dashes

[16:29] <geekosaur> which makes Q'... look like a name instead of a quote

[16:29] *** Xliff joined
[16:29] <Xliff> \o

[16:29] <timotimo> yup, and perl6 grammar has only one place where it backtracks, and that's inside string interpolation

[16:29] <timotimo> so when it commits to interpreting it as an identifier, it sticks to that

[16:29] <Xliff> Is there an easy way to force an enum into its proper NativeCall type?

[16:30] <Xliff> Oh, and https://gist.github.com/Xliff/6b16cccd09cee13d543bed8745730042

[16:30] <timotimo> well, you can leave the first three numbers out ...

[16:31] <timotimo> m: our enum Test <hello 0 goodbye 1>; say hello.^mro

[16:31] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «((Test) (Int) (Cool) (Any) (Mu))␤»

[16:32] <timotimo> you don't have to use => if you don't want to

[16:32] <Xliff> Well, it's best to be explicit, sometimes.

[16:32] <Xliff> ^mro?

[16:34] <timotimo> method resolution order

[16:34] <Xliff> Ah! Thanks.

[16:34] <timotimo> had to make sure if it's an int enum

[16:34] <Xliff> m: our enum Test <hello 0 goodbye 1>; say hello.enums.gist.say

[16:34] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «Map.new((0 => 1, 1 => 3, goodbye => 2, hello => 0))␤True␤»

[16:38] *** sarna left
[16:39] *** zakharyas joined
[16:41] * faraco o/

[16:43] *** faraco left
[17:00] <Xliff> timotimo: What do you think about checking the max value of the enum and converting it to either uint32 or uint64 automatically?

[17:01] <Xliff> That way enums can just be... enums.

[17:01] *** gabiruh left
[17:01] <timotimo> but the difference comes only from how your nativecall sub's signature is set up?

[17:03] *** gabiruh joined
[17:05] *** zakharyas left
[17:07] *** Ven`` joined
[17:11] *** jameslenz joined
[17:15] *** AlexDani` joined
[17:16] *** jameslenz left
[17:17] *** gabiruh left
[17:17] *** uzl left
[17:17] *** telex left
[17:19] <Xliff> timotimo: True, but if the enums also come from the same project, doesn't that mean that it would still Just Work?

[17:19] *** Ven`` left
[17:20] <timotimo> i'm not sure how you mean?

[17:20] <timotimo> oh, you mean you want to put the enum type in the function signature?

[17:20] *** AlexDaniel left
[17:20] <Xliff> Yes.

[17:21] *** telex joined
[17:21] <timotimo> d'oh

[17:21] <timotimo> yeah, that makes sense

[17:21] <Xliff> :)

[17:21] <timotimo> but i'm not sure if autodetecting is a good idea

[17:21] <Xliff> OK. I will wait until I get to a stopping point and (try) to look into NativeCall.

[17:21] <Xliff> OK. Why not?

[17:22] <timotimo> are there ABIs that say not to clear the higher bits when passing a smaller int?

[17:22] <Xliff> Because it's not like we have a "is repr('CEnum')" yet.

[17:22] <Xliff> I am assuming that if that ABI asks for an enum that contains a 64 bit integer, it will take a 64 bit integer.

[17:23] <timotimo> yeah, but what if you don't care about some enum values and instead get a 32bit enum autodetected?

[17:23] <timotimo> m: our int32 enum Test <hello 0 goodbye 1>

[17:23] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot find method 'BUILDPLAN' on object of type Perl6::Metamodel::NativeHOW␤at <tmp>:1␤»

[17:23] <Xliff> Why would you not care about some enum values?

[17:23] <timotimo> m: our enum Test is int32 <hello 0 goodbye 1>

[17:23] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤int32 does not support inheritance, so Test cannot inherit from it␤at <tmp>:1␤»

[17:23] <timotimo> hm.

[17:24] <Xliff> Now THAT would be fine.

[17:24] <timotimo> it's bound to happen some day

[17:24] <Xliff> Yes, but meanwhile I have code that I was hoping (foolish me) would just take the enum type and call it a day.

[17:25] <timotimo> seems like we can't have that

[17:25] <timotimo> maybe special-case enums in nativecall and give EnumHOW some storage for a native int type

[17:32] *** skids left
[17:33] <Xliff> :(

[17:34] <Xliff> OK. Well... I am doing it the "proper" way.

[17:34] <Xliff> m: our enum Test is int32 <hello 0 goodbye 1>; my Test $t = 2; $t.gist.say

[17:34] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤int32 does not support inheritance, so Test cannot inherit from it␤at <tmp>:1␤»

[17:34] <Xliff> m: our enum Test <hello 0 goodbye 1>; my Test $t = 2; $t.gist.say

[17:34] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «Type check failed in assignment to $t; expected Test but got Int (2)␤  in block <unit> at <tmp> line 1␤␤»

[17:35] <Xliff> m: our enum Test <hello 0 goodbye 1>; my Test $t = Test(2); $t.gist.say

[17:35] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «goodbye␤»

[17:35] <Xliff> So yeah... that will be.... interesting.

[17:35] <timotimo> hm, +| and +& on an enum type don't give you an instance of the enum back (or an error if it can't be done)

[17:36] <timotimo> coercion types also won't do i'm afraid

[17:41] *** gabiruh joined
[17:49] <Xliff> OK. Moving on. I am getting this error: Calling g_signal_connect_object() will never work with declared signature (NativeCall::Types::Pointer $app, Str $name, NativeCall::Types::Pointer $handler, NativeCall::Types::Pointer $data, uint32 $connect_flags --> uint64)

[17:49] <fake_space_whale> Does while assign $_ to the result conditional statement? 

[17:50] <Xliff> When trying to match against this signature: gulong g_signal_connect_object (gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer gobject, GConnectFlags connect_flags);

[17:50] <Xliff> No, it shouldn'

[17:50] <Xliff> fake_space_whale: No. I don't think so.

[17:50] <fake_space_whale> ah okay

[17:50] <Xliff> https://docs.perl6.org/language/control#while,_until

[17:53] <fake_space_whale> Thank you, it appears that while $_ = EXPRESSION {} is what I wanted

[17:54] *** sarna joined
[17:55] <sarna> hey, do you think we should add perl6 to websites like devdocs.io / zealdocs.org ?

[17:55] <sarna> or ask for it to be added at least

[17:55] <sarna> those sites do have perl, that's Perl5 though

[18:00] <sarna> seems like we should have to create it ourselves and contribute it to Dash https://kapeli.com/docsets

[18:00] <sarna> s/should/would

[18:09] <sena_kun> sarna, personally, I think we should, but it depends on people willing to contribute.

[18:10] <sarna> sena_kun: I'll look into it tomorrow or so

[18:11] <sena_kun> And not only willing, but actually having time and enough, hmm, "power" to do so.

[18:12] <sena_kun> sarna, that'd be awesome. Generally, any improvements in code, docs, user experience, promotion/advertising are welcome, I'd say. :)

[18:13] <sarna> sena_kun: yeah, I wish more people knew we exist :(

[18:15] <sena_kun> I wish for a better world, where everything is nicer. And maybe a better internet connection here too.

[18:17] *** zakharyas joined
[18:26] *** salasrod joined
[18:43] <Woodi> 

[18:46] * masak .oO( you can Ctrl+Q anytime you like, but you can never leave... )

[18:46] <yoleaux> 13 Jul 2018 20:56Z <lizmat> masak: do you think .hash should always return a .Hash , or can it also return an immutable Map ?

[18:46] <masak> lizmat: that's a deep question :)

[18:47] <masak> lizmat: I confess to being generally bewildered when it comes to what Perl 6 convenience methods like that should do. like, what's *really* the difference between .Bool and .so? between .gist and .Str? between .list and .Array?

[18:47] <masak> I don't know. if there is a general rule, I'm not aware of it :/

[18:47] *** pmurias left
[18:52] <El_Che> .oO(or it may point to convenience method inflation)

[18:52] *** domidumont left
[18:54] <TimToady> well, in the case of "so" vs "Bool", that's just English vs Computerese :)

[18:54] <TimToady> and it also lets you shadow 'method so' without shadowing the basic conversion

[18:56] <TimToady> but for everyday programming, we tend to prefer things like given/when over things like switch/case

[18:56] <TimToady> so is more like the former, while Bool is more like the latter

[18:57] <TimToady> "I have a Boolean here" is a rather indirect way to ask whether it's true or not

[18:57] <TimToady> s/have/want/

[18:58] <El_Che> "I have a Boolean here"

[18:58] <El_Che> "so?"

[18:58] <TimToady> ?

[18:58] <El_Che> we're really teenagers

[18:58] <El_Che> :)

[18:59] <TimToady> it's 2018, which is a teen year

[18:59] <El_Che> :)

[19:03] <geekosaur> teeny Bools?

[19:03] <TimToady> bitsy

[19:04] *** Zoffix joined
[19:04] *** zakharyas left
[19:05] *** Zoffix left
[19:05] *** zakharyas joined
[19:08] *** zakharyas1 joined
[19:09] *** zakharyas left
[19:11] *** jameslenz joined
[19:16] *** jameslenz left
[19:26] *** zakharyas1 left
[19:29] *** tokomer left
[19:38] *** thowe left
[20:00] <Woodi> p6: package P; sub s { say 'P::s'; }; package main; P::s

[20:00] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤This appears to be Perl 5 code. If you intended it to be Perl 6 code, please use a Perl 6 style declaration like "unit package Foo;" or "unit module Foo;", or use the block form instead of the semicolon…»

[20:01] <Woodi> adding 'unit' x 2 not work...

[20:03] <Woodi> also putting packages into { } braces...

[20:05] <fake_space_whale> complements to the devs of the Rakudo for giving good error messages

[20:10] <geekosaur> p6: package P { our sub s { say 'P::s' } }; P::s

[20:10] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «P::s␤»

[20:10] <geekosaur> it's a "my" sub by default, so can't be invoked with a namespace

[20:10] <geekosaur> it either has to be exported and subsequently imported, or has to be declared "our"

[20:11] *** MasterDuke_ joined
[20:12] *** MasterDuke left
[20:12] <Woodi> oo, thank you geekosaur !

[20:12] *** kerframil joined
[20:13] *** MasterDuke_ is now known as MasterDuke

[20:19] *** gabiruh left
[20:22] *** haxmeist1r is now known as haxmeister

[20:23] <haxmeister> hey Larry Wall didn't quit did he?

[20:24] * TimToady doesn't think so

[20:24] <timotimo> who told you that?

[20:28] <haxmeister> nobody.. it was a cheap shot at Guido..lol

[20:36] *** AlexDani` is now known as AlexDaniel

[20:41] *** gabiruh joined
[20:46] <DrForr> o/

[20:47] <haxmeister> o/

[20:47] <DrForr> #include <macarena.h>

[20:48] <DrForr> What does $*VM.osname return for OS X?

[20:50] *** MasterDuke left
[20:51] <lizmat> DrForr: darwin

[20:51] <DrForr> Thanks.

[20:52] *** MasterDuke joined
[20:54] *** benjikun2 joined
[20:54] <TimToady> m: say $*KERNEL.name

[20:54] <camelia> rakudo-moar 5cf0afce0: OUTPUT: «linux␤»

[20:56] *** veesh joined
[20:56] <veesh> hi all

[20:57] <veesh> is there a ubuntu ppa for installing perl6?

[20:57] <MasterDuke> huggable: debs

[20:57] <huggable> MasterDuke, CentOS, Debian, Fedora and Ubuntu Rakudo packages: https://github.com/nxadm/rakudo-pkg/releases

[20:57] <MasterDuke> veesh: ^^^

[20:58] *** benjikun left
[20:58] *** AlexDaniel left
[20:58] *** AlexDaniel joined
[20:59] <veesh> many thanks

[21:00] <veesh> is there a wasm backend in the works for perl6?

[21:01] <DrForr> Also while people are around, LibraryCheck::library-check() seems to throw 'Cannot invoke this object (REPR: Null; VMNull)' while running inside a function called from 'is native(...)' - it's the reason I'm searching along explicit paths rather than just calling library-check().

[21:01] <El_Che> veesh: not that I know of

[21:01] <veesh> why not? would it be too big?

[21:02] <DrForr> No volunteers, I'd guess.

[21:02] <El_Che> because noone has had the itch

[21:02] <veesh> i'm  dying to use perl in the browser

[21:02] <MasterDuke> veesh: pmurias is working on a JS backend for rakudo

[21:03] <DrForr> perlito compiles p5 to JS, and there's a JS backend in the works.

[21:03] <MasterDuke> and a graalvm/truffle backend also

[21:03] <El_Che> MasterDuke: I thought it was node based

[21:03] <TimToady> he was mentioning possilby targeting wasm after that, but at the moment he's playing with truffle

[21:03] <veesh> the js is node based now

[21:03] <veesh> apparently moving to browser based as longint support is added to modern browsers

[21:03] <veesh> something like that

[21:03] <MasterDuke> El_Che: that sounds right

[21:12] *** jameslenz joined
[21:12] *** veesh left
[21:16] *** jameslenz left
[21:21] *** woolfy joined
[21:21] *** woolfy left
[21:25] *** mspo left
[21:27] *** benjikun2 left
[21:29] *** lizmat left
[21:32] *** lizmat joined
[21:32] *** wamba left
[21:37] *** epony left
[21:51] *** gabiruh left
[21:52] *** epony joined
[22:01] *** robertle left
[22:22] *** benjikun joined
[22:23] *** lpp joined
[22:24] *** lpp left
[22:26] *** stmuk_ joined
[22:27] *** fake_space_whale left
[22:28] *** stmuk left
[22:29] *** gabiruh joined
[22:34] *** sarna left
[22:34] *** gabiruh left
[22:37] *** Some-body_ joined
[22:37] *** DarthGandalf left
[22:38] *** Some-body_ is now known as DarthGandalf

[22:43] *** gabiruh joined
[22:46] *** jmaslak_ left
[22:53] *** ufobat_ left
[23:00] *** sena_kun left
[23:10] *** salasrod left
[23:12] *** jameslenz joined
[23:24] *** jameslenz left
[23:43] *** pecastro left
