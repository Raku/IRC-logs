[00:01] <jnthn> El_Che: Yes, I think the disconnect was that I designed precomp as a cache that you should never care about the insides of, and had nowhere near enough idea of how packaging/distribution works to know this might not really fly. Thankfully, folks more clueful on those things are taking care of that area now. :-)

[00:03] <El_Che> \o/

[00:03] <El_Che> jnthn: I think of it as a necessary evil for now, that will disapear once perl6 is faster

[00:03] <jnthn> Oh, we won't ever get rid of precomp, I don't think.

[00:04] <El_Che> or hide it better :)

[00:04] <jnthn> Yes, "hide it" is precisely what I was trying to do. The whole point of the SHA-1s was "you should totally not be poking in here, take a hint" :)

[00:04] <El_Che> as it, show the original module names in errors instead of sha1

[00:04] <jnthn> I thought that already was happening?

[00:05] <El_Che> not on the last stacktrace I saw

[00:05] <jnthn> Hmmm. I thought, sans --ll-exception, they were translated

[00:05] <El_Che> lemme check

[00:05] <jnthn> I may well be wrong on that, but at least my expectation is that they are :)

[00:06] <geekosaur> the original name should be displayed along with the hashed one

[00:06] <MasterDuke> jnthn: thanks, i'll take a look there

[00:06] <jnthn> geekosaur: By default, or by using --ll-exception to ask for it?

[00:06] <geekosaur> by default

[00:06] <jnthn> OK, reasoning?

[00:07] <geekosaur> that I don't know

[00:07] <geekosaur> possibly in case it was something internal/precomp-related going wrong

[00:07] <geekosaur> since it was done while precomp was still a bit troublesome

[00:08] <jnthn> Oh, hang on, are you saying how things are, or arguing how things should be?

[00:08] <kkrev> considering linenoise is apparently problematic and stock readline is broken on many distros I might humbly suggest you get rid of the line perl6 spits out on the console suggesting both of them. rlwrap works pretty well.

[00:08] <El_Che> nope

[00:08] <jnthn> I'd assumed the latter, but perhaps shouldn't have

[00:09] <El_Che> jnthn: i see sha1 paths https://gist.github.com/nxadm/e84b72cc23d5b5e16642796e08ad3dd9

[00:09] <geekosaur> I'm saying what it has been doing ever snce people complained about the hashes back then

[00:09] <jnthn> Ah, OK

[00:10] <geekosaur> El_Che, note the names after the hashes?

[00:10] <geekosaur> that is what was added

[00:10] <El_Che> that's the good part

[00:10] <El_Che> the sha1 is the one that make me grind my teeth

[00:10] <geekosaur> ok, you;re saying the hash should be made not to be at all. suspect you will get argyument there

[00:11] <geekosaur> no I anot going to try to dig up the old discussion that led to this

[00:11] <jnthn> Yeah, I'd somehow thought we only showed the "good part" and you got the hash under --ll-exception

[00:11] <El_Che> geekosaur: that's what I meant by well hidden (an implementation detail)

[00:11] <jnthn> e.g. concise by default, all detail upon request

[00:11] <El_Che> +1

[00:11] *** TreyHarris left
[00:12] <El_Che> I was told the line nr matched, so for debuggin purposes it should be transparent

[00:12] <geekosaur> but note that if you follow that path and look at that line number, you should see thecode in question

[00:13] <geekosaur> so shall everything provide full filesystem mappings so that editors that parse these things work, or is that an unnecessary detail?

[00:13] <geekosaur> it mis not present in a file called Zef::Client

[00:13] <geekosaur> not even in that directory

[00:13] <El_Che> geekosaur: yes, it's usable and useful. But ugly

[00:13] <geekosaur> bnecause you can have multiple versions installed

[00:14] <geekosaur> or potentially a module with the same name but a different authority

[00:14] <El_Che> true

[00:15] <El_Che> about: kkrev's sugestion, if someone is in touch with Linenoise or Readline authors, please ping them

[00:16] <El_Che> as perl6 indeed recommends the modules and they both are broken at least on the latest LTS ubuntu (probably the biggest install base)

[00:17] <El_Che> (I was thinking of adding of the 2 to rakudo-pkg)

[00:25] *** TreyHarris joined
[00:32] *** comborico1611 left
[00:35] *** Sgeo_ joined
[00:37] *** Sgeo__ left
[00:40] *** Kaiepi joined
[00:55] *** Kaiepi left
[00:55] *** Kaiepi joined
[01:01] *** markoong left
[01:05] *** Schepeers left
[01:07] *** Schepeers joined
[01:08] *** kkrev left
[01:35] *** BenGoldberg joined
[01:36] *** molaf left
[01:45] *** ilbot3 left
[01:49] *** molaf joined
[01:53] *** Kaiepi left
[01:54] *** Kaiepi joined
[01:57] *** ilbot3 joined
[01:57] *** ChanServ sets mode: +v ilbot3

[02:08] *** lizmat left
[02:18] *** aborazmeh joined
[02:18] *** aborazmeh left
[02:18] *** aborazmeh joined
[02:33] *** araraloren joined
[02:35] *** chakli left
[02:35] *** chakli_ joined
[02:36] <araraloren> morning :)

[02:45] *** chakli_ left
[02:46] *** MasterDuke left
[02:48] *** MasterDuke joined
[02:50] *** araraloren left
[02:51] *** araraloren joined
[02:53] *** ZofBot joined
[02:53] *** ChanServ sets mode: +v ZofBot

[02:53] *** huggable joined
[02:53] *** ChanServ sets mode: +v huggable

[02:53] *** buggable joined
[02:53] *** ChanServ sets mode: +v buggable

[03:09] *** chakli joined
[03:11] *** eliasr left
[03:31] *** aborazmeh left
[03:34] *** ZeonPeon joined
[03:36] *** Jonta left
[03:37] *** ZeonPeon left
[04:25] *** TimToady left
[04:28] *** kaare_ joined
[04:32] *** TimToady joined
[04:47] *** zpc left
[04:50] *** ZeonPeon joined
[04:50] <ZeonPeon> o/

[04:51] <ZeonPeon> Is there any perl6 language construct like lisp's "quote"?

[04:54] *** BenGoldberg left
[05:07] <MasterDuke> ZeonPeon: what does that do?

[05:13] <ZeonPeon> Are you familiar with lisp?

[05:16] <ZeonPeon> if so, it transforms lisp code into a list which can be manipulated (and turned back into lisp code with unquote)

[05:16] <geekosaur> I'm familiar, I just don;t see how it fits. A name like $foo is *already* quoted, in that sense; you don't need syntax to prevent a name from being dereferenced.

[05:16] <geekosaur> If what you were looking for was the opposite, that does exist

[05:16] <geekosaur> oh, you mean backquotes.

[05:16] <geekosaur> there's a macro extension, which is not well defined as yet

[05:16] <ZeonPeon> I was looking to capture a function call to be manipulated by an operator

[05:17] <ZeonPeon> I was hoping to make a dirty hack version of elixers pipe ( |> ) operator

[05:20] <AlexDaniel> squashable6: status

[05:20] <squashable6> AlexDaniel, üçïüçï SQUASHathon is in progress! The end of the event in ‚âà6 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[05:20] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/cdcc39cf4c63a50c9c4259ea07baa2cb

[05:22] <geekosaur> anyway I don't think you can do that as such currently

[05:22] <ZeonPeon> bummer, I guess it's still "early days"

[05:23] <geekosaur> perl 6 is not lisp

[05:23] <ZeonPeon> sadly

[05:24] <araraloren> thinking in Perl 6 :)

[05:24] <ZeonPeon> I guess that's a week ban?

[05:24] <araraloren> what ?

[05:25] <ZeonPeon> off colour jokes?

[05:25] <araraloren>   haha

[05:26] <geekosaur> lisp is somewhat unusual in letting you capture any expression as an AST. I don't think a form as general as lisp's is ever intended. not sure it's even possible as rakudo is implemented; already things like thunking need to be special cases in the grammar, not a general mechanism

[05:28] <ZeonPeon> I like it as a possiblility (not that I would use it effectively often)

[05:28] <geekosaur> I don't much. mostly because I know what it costs to support it ghenerally

[05:29] <araraloren> people always want some they may don't need it :)

[05:31] <ZeonPeon> I know b'y

[05:44] *** quotable6 left
[05:44] *** quotable6 joined
[05:46] *** kurahaupo left
[05:47] *** kurahaupo joined
[06:00] *** robertle joined
[06:02] *** psychoslave joined
[06:26] *** chakli left
[06:36] *** TimToady left
[06:36] *** TimToady joined
[06:43] *** wamba joined
[06:48] *** Tison joined
[06:49] *** Tison left
[06:49] *** Tison joined
[06:49] <Tison> \o

[06:49] <Tison> hi guys

[06:50] *** jmerelo joined
[06:51] <Tison> is `knowhow` a perl6 INTERNAL keyword? I've seen it at jnthn's OO::Monitor but it is not  documented.

[06:51] <Tison> anyway, how `knowhow` works

[06:51] <Tison> interesting sentence :-)

[06:52] <Tison> btw, our ecosystem can have modules having same name, right? IIRC we use :auth to distinguish it, but I'm not that sure

[06:52] <araraloren>  they are in different repo, such as github/cpan

[06:54] <jmerelo> Tison: I'll have to check. Anything with HOW is usually part of the metamodel, and this one tends to be implementation-dependent. So it might be Rakudo internal

[06:54] <araraloren> where the knowhow, I am not see it

[06:55] <jmerelo> araraloren: https://github.com/rakudo/rakudo/search?q=knowHOW&unscoped_q=knowHOW

[06:55] *** damaxi joined
[06:55] <araraloren> I mean in OO::Monitor..

[06:55] <damaxi> Hey :)

[06:55] <araraloren> okay, that's fine

[06:56] <Tison> https://docs.perl6.org/language/mop#Bootstrapping_concerns

[06:56] <Tison> some sentences about `knowhow`

[06:57] <araraloren> so, it said NQP has a ..

[06:57] <araraloren> it's maybe not stable in mean

[06:57] <jmerelo> Tison: yep, but it's NQP. 

[06:58] <Tison> araraloren: seems like I misremembered it :-(

[06:58] <jmerelo> You can apparently use it https://github.com/perl6/mu/blob/bafe575799d83256c263d35404acbb3cedc3a4a0/v6/Mildew-Setting-SMOP/t/p6/basic/classhow_add_method.t

[06:58] <araraloren> okay

[06:59] <jmerelo> But that code is old, so who knows. It's probably called something else now.

[07:00] *** Sgeo joined
[07:02] <Tison> ok, back to modules have same name. I know that they are in different repos, but do we distinguish them by `zef install <module>:auth<...>`?

[07:02] <Tison> ..if we use zef to install module

[07:02] <araraloren> yeah, I am not well know it

[07:02] *** Sgeo_ left
[07:03] <jmerelo> Tison: what else could you use? Yep, that's the way to distinguish them.

[07:04] <Tison> thanks :P

[07:08] <squashable6> üçï JJ++ wrote a comment on ‚ÄúRunning bots without zstd leaves lock dirs behind‚Äù: https://github.com/perl6/whateverable/issues/316#issuecomment-394142075

[07:17] *** Schepeers left
[07:20] <squashable6> üçï JJ++ wrote a comment on ‚ÄúRunning bots without zstd leaves lock dirs behind‚Äù: https://github.com/perl6/whateverable/issues/316#issuecomment-394142710

[07:23] *** darutoko joined
[07:25] <squashable6> üçï JJ++ opened issue ‚ÄúTests hang with "... is locked, waiting"‚Äù: https://github.com/perl6/whateverable/issues/327

[07:29] <squashable6> üçï JJ++ edited issue ‚ÄúTests hang with "... is locked, waiting"‚Äù: https://github.com/perl6/whateverable/issues/327

[07:30] *** psychoslave left
[07:33] *** HaraldJoerg joined
[07:39] *** rindolf joined
[07:47] *** domidumont joined
[07:50] *** Schepeers joined
[07:54] *** domidumont left
[07:55] *** domidumont joined
[07:56] *** Schepeers_ joined
[07:58] *** Schepeers left
[07:58] *** Schepeers_ left
[07:59] *** Schepeers joined
[08:07] *** sena_kun joined
[08:09] <Geth> ¬¶ whateverable: JJ++ created pull request #328: Adds test for correct MIME type

[08:09] <Geth> ¬¶ whateverable: review: https://github.com/perl6/whateverable/pull/328

[08:09] <squashable6> üçï JJ++ opened pull request ‚ÄúAdds test for correct MIME type‚Äù: https://github.com/perl6/whateverable/pull/328

[08:09] <jmerelo> squashable6: status

[08:09] <squashable6> jmerelo, üçïüçï SQUASHathon is in progress! The end of the event in ‚âà3 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[08:09] <squashable6> jmerelo, Log and stats: https://gist.github.com/bdb24ff95e54c6362c7dba5afdac1a20

[08:10] *** domidumont left
[08:11] *** domidumont joined
[08:21] *** domidumont left
[08:22] *** domidumont joined
[08:30] *** Schepeers left
[08:42] *** lizmat joined
[08:47] *** Schepeers joined
[08:51] *** espadrine left
[08:58] *** Schepeers left
[08:59] *** Schepeers joined
[09:04] *** Schepeers_ joined
[09:05] *** Schepeers left
[09:17] *** Schepeers_ left
[09:18] *** Schepeers joined
[09:25] *** Schepeers_ joined
[09:26] *** Schepeers left
[09:28] *** Schepeers_ left
[09:30] *** Schepeers joined
[09:31] <squashable6> üçï JJ++ wrote a comment on ‚ÄúDockerize it?‚Äù: https://github.com/perl6/whateverable/issues/323#issuecomment-394149235

[09:31] *** Schepeers left
[09:33] *** Schepeers joined
[09:36] *** Schepeers left
[09:37] *** Schepeers joined
[09:59] <squashable6> üçï JJ++ wrote a comment on ‚ÄúSet ME env variable‚Äù: https://github.com/perl6/whateverable/issues/204#issuecomment-394150769

[10:08] <squashable6> üçï JJ++ closed issue ‚ÄúRefuses to take a text/p‚Ä¶‚Äù: https://github.com/perl6/whateverable/issues/17

[10:08] <Geth> ¬¶ whateverable: a828f95d28 | (JJ Merelo)++ | t/unicodable.t

[10:08] <Geth> ¬¶ whateverable: Adds test for correct MIME type

[10:08] <Geth> ¬¶ whateverable: 

[10:08] <Geth> ¬¶ whateverable: This is basically part of the repo, so it's supposed to work. This

[10:08] <Geth> ¬¶ whateverable: would close #17

[10:08] <Geth> ¬¶ whateverable: 

[10:08] <Geth> ¬¶ whateverable: But there might be other issues here. I had to add it last, because it

[10:08] <squashable6> üçï JJ++ merged pull request ‚ÄúAdds test for correct MIME type‚Äù: https://github.com/perl6/whateverable/pull/328

[10:08] <Geth> ¬¶ whateverable: broke the next test, whatever that was.

[10:08] <Geth> ¬¶ whateverable: review: https://github.com/perl6/whateverable/commit/a828f95d28

[10:08] <Geth> ¬¶ whateverable: b148c2a585 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | t/unicodable.t

[10:08] <Geth> ¬¶ whateverable: Merge pull request #328 from JJ/master

[10:08] <Geth> ¬¶ whateverable: 

[10:08] <Geth> ¬¶ whateverable: Adds test for correct MIME type

[10:08] <Geth> ¬¶ whateverable: I'm going to accept this, since I have another one in the oven. It's just a commit, revert if not adequate.

[10:08] <Geth> ¬¶ whateverable: review: https://github.com/perl6/whateverable/commit/b148c2a585

[10:12] *** telex left
[10:12] <Geth> ¬¶ whateverable: JJ++ created pull request #329: Adds Dockerfile

[10:12] <Geth> ¬¶ whateverable: review: https://github.com/perl6/whateverable/pull/329

[10:12] <squashable6> üçï JJ++ opened pull request ‚ÄúAdds Dockerfile‚Äù: https://github.com/perl6/whateverable/pull/329

[10:14] *** telex joined
[10:26] <jmerelo> squashable6: status

[10:26] <squashable6> jmerelo, üçïüçï SQUASHathon is in progress! The end of the event in ‚âà1 hour. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[10:26] <squashable6> jmerelo, Log and stats: https://gist.github.com/5734baae11c8b3403d37570a342600f9

[10:31] *** psychoslave joined
[10:33] *** kurahaupo_ joined
[10:36] *** kurahaupo_ left
[10:36] *** kurahaupo_ joined
[10:37] *** kurahaupo left
[10:46] *** Jonta joined
[11:05] *** markoong joined
[11:11] *** jmerelo left
[11:25] *** mscha joined
[11:25] <mscha> m: my $r = 7/2 - 3/2; say $r; say $r.numerator, "/", $r.denominator; # wasn't this supposed to be fixed?

[11:25] <camelia> rakudo-moar 2234b61de: OUTPUT: ¬´2‚ê§4/2‚ê§¬ª

[11:26] *** Jonta is now known as Jonta2

[11:30] *** dakkar joined
[11:36] <Summertime> is there a way to get perl6 to not output unicode versions of quotes around things or whatever?

[11:36] <Summertime> makes debugging a grammar a bit of a pain

[11:40] <moritz> Summertime: you can just call .Str on the match object to get only the matched string, and no information about captures

[11:40] <moritz> Summertime: there's also Grammar::Tracer

[11:40] <moritz> Summertime: I've also written more about debugging grammars in https://smile.amazon.com/dp/1484232275/

[11:42] <Summertime> I don't mind the extra information! just some part of my environment is junked up in some way

[11:47] <moritz> maybe fix that? :)

[11:48] <moritz> https://perlgeek.de/en/article/set-up-a-clean-utf8-environment

[11:48] *** dct joined
[11:51] *** sno joined
[11:54] *** damaxi left
[11:58] <Summertime> hmm

[11:58] <Summertime> dunno how practical that'd be for me

[12:01] *** Aaronepower left
[12:01] <El_Che> Summertime: you may have the wrong priorities if you start adapting programs to be non utf8 :)

[12:04] <Summertime> oh I don't doubt that, but... something's junked, and I'm not exactly sure what, and I'm not smart enough to work it out

[12:09] <El_Che> most os'es come nowadays out of the box with urf8 support

[12:10] <El_Che> anyway, moritz .Str is a good workaround

[12:10] *** Kaiepi left
[12:13] *** kurahaupo joined
[12:16] <lizmat> or shorter: prefix ~

[12:16] *** Kaiepi joined
[12:17] *** kurahaupo_ left
[12:17] <El_Che> run a utf8 capable VM :)

[12:31] <jnthn> Tison: knowhow is a mechanism for bootstrapping the object system. It declares a type using the most primitive existing meta-object, and in fact the only one that a Perl 6 runtime needs to provide. It knows how to have attributes and methods and type-match precisely against itself. No inheritance, no role composition, etc. All other OO features are implemented then in NQP or Perl 6 code.

[12:32] <jnthn> Tison: There's very little use for it, unless you decide you'd like to bootstrap an object system from scratch. :-)

[12:34] <jnthn> The main interesting observation is that we don't need to implement things like inheritance, role composition, subset types, enum types, etc. at the level of the VM. Just one very minimal object system that enables writing more interesting meta-objects is enough to base the rest on.

[12:35] <jnthn> As it happens, roles and, to a limited degree, inheritance, are quite nice for factoring a complex meta-model, so NQP's relatively simple object system has meta-objects built on knowhow, and Perl 6 has meta-objects implemented atop of the NQP object system.

[12:40] <moritz> and if your mind isn't bent enough yet, read "The Art of the Metaobject Protocol" by Kiczales et al

[12:40] <moritz> :)

[12:41] <jnthn> My mind's so bent I don't find this stuff mind-bending any more. :P

[12:42] <El_Che> just waiting to snap :)

[12:43] <El_Che> P6 ook looks very nice to most people, I think. Haven't heard bad things about it

[12:43] <El_Che> s/ool/OO/

[12:44] <buggable> New CPAN upload: vars-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/vars-0.0.1.tar.gz

[12:44] <El_Che> great job!

[12:48] *** Schepeers left
[12:48] *** Schepeers joined
[12:51] *** Aaronepower joined
[13:04] <buggable> New CPAN upload: vars-0.0.2.tar.gz by ELIZABETH http://modules.perl6.org/dist/vars:cpan:ELIZABETH

[13:08] *** Aaronepower left
[13:13] *** Aaronepower joined
[13:18] *** AlexDani` joined
[13:20] *** AlexDaniel left
[13:22] *** dakkar left
[13:27] *** Aaronepower left
[13:44] *** daxim_ left
[13:47] *** psychoslave left
[13:48] *** psychoslave joined
[13:52] *** Aaronepower joined
[13:58] *** Aaronepower left
[13:58] *** Kaiepi left
[13:58] *** Kaiepi joined
[13:59] *** Aaronepower joined
[14:02] *** Aaronepower left
[14:02] *** Kaiepi left
[14:02] *** Kaiepi joined
[14:04] *** BenGoldberg joined
[14:12] *** john_parr_ joined
[14:12] *** john_parr left
[14:12] *** john_parr_ is now known as john_parr

[14:25] *** andreoss joined
[14:26] <andreoss> https://perl6.org/compilers/features this page seems to be empty

[14:28] <moritz> I think we can stop maintaining that page; not much going on there anyway these days

[14:28] *** zakharyas joined
[14:28] *** zpc joined
[14:30] <El_Che> it looks like a left over before the split of actual and historical compilers

[14:31] <andreoss> is JVM backend historical now?

[14:31] <araraloren> why we need so many backend

[14:31] <Geth> ¬¶ perl6.org: 2c7cc21a18 | (Moritz Lenz)++ | source/compilers/index.html

[14:31] <Geth> ¬¶ perl6.org: Stop linking to the feature matrix

[14:31] <Geth> ¬¶ perl6.org: 

[14:31] <Geth> ¬¶ perl6.org: not of much interest going on there these days

[14:31] <Geth> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/2c7cc21a18

[14:32] <moritz> if anybody disagrees strongly, feel free to revert this commit

[14:33] *** kaare_ left
[14:33] <andreoss> for me it was just an empty page

[14:34] <Geth> ¬¶ perl6.org: be2a3d8abb | (Claudio Ramirez)++ | source/compilers/index.html

[14:34] <Geth> ¬¶ perl6.org: remote empty referencen to feature matrix (pre split historical/present compilers

[14:34] <Geth> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/be2a3d8abb

[14:34] <Geth> ¬¶ perl6.org: c3ed280ee5 | (Claudio Ramirez)++ | 5 files

[14:34] <Geth> ¬¶ perl6.org: Merge branch 'master' of github.com:perl6/perl6.org

[14:34] <Geth> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/c3ed280ee5

[14:34] *** Kaiepi left
[14:35] <El_Che> oops

[14:35] <El_Che> we did the same commit

[14:35] <andreoss> araraloren: I used to want JVM backend to run perl6 on Solaris

[14:35] <El_Che> andreoss: jvm is part of the rakudo compiler

[14:36] <El_Che> rakudo has a moarvm and jvm backend (where the moarvm is the more advanced one for now)

[14:36] <El_Che> andreoss: rakudo already runs on Solaris. samcv did the work and tested it recently

[14:36] <El_Che> (it used to fail on libuv in the past)

[14:37] <araraloren> will rakudo have js backend in the future, NQP have a js backend under construction 

[14:38] <andreoss> El_Che: I've already changed the job

[14:38] <moritz> araraloren: rakudo already has a "js" branch

[14:38] <araraloren> oh, so I don't understand, why we need 3 backend ? 

[14:39] *** psychoslave left
[14:39] <moritz> because you cannot rakudo Perl 6 in the browser right now (js)

[14:39] <moritz> moarvm because it's the most versatile one

[14:39] <araraloren> Perl 6 will run on the browser ?

[14:39] <moritz> and jvm because some shops are very experienced with JVM, and are suspicious of everything that's not JVM

[14:40] <El_Che> araraloren: we don't need it. People work on what they find useful. And tha depends on what ecosystem they need to work

[14:40] <andreoss> araraloren: it'd be much easier to sneak perl6 into prduction with JVM backend 

[14:40] <moritz> and with open source projects, the question typically isn't "do we need it?" but "does somebody implement/maintain it?"

[14:41] <araraloren> okay

[14:42] <El_Che> araraloren: if it makes it easier to digest, most efforts seem to be focused on moarvm

[14:42] <El_Che> I certainly can see the value of a js and jvm backend, though

[14:43] <araraloren> I found we build it with node.js, Is node.js is server side language ? or is my mistake

[14:43] <El_Che> it can be used on the client

[14:45] *** psychoslave joined
[14:45] *** TimToady left
[14:45] <araraloren> oh, great

[14:45] <araraloren> thanks

[14:47] *** TimToady joined
[14:48] <Summertime> for / (<['"]>) <-[ ??? ]> * $0 /; how do I not match $0 in the center there?

[14:48] <andreoss> pmd is not very happy about java code rakudo got

[14:49] <andreoss> may be i should try to fix some of it?

[14:49] <jnthn> What's pmd?

[14:50] <andreoss> java's linter 

[14:50] <araraloren> m: say "aaa" ~~ /(\w)$0/;

[14:50] <camelia> rakudo-moar 398c270e4: OUTPUT: ¬´ÔΩ¢aaÔΩ£‚ê§ 0 => ÔΩ¢aÔΩ£‚ê§¬ª

[14:51] <andreoss> not actually java's

[14:51] <andreoss> i guess it has rulesets even for perl 

[14:53] <andreoss> no, i'm wrong it has only copy-paste code detection for Perl

[14:55] <Summertime> araraloren, looking to not match though, so, the opposite of $0 I guess?

[14:56] <andreoss> >Stage parse      : 339.055

[14:56] <jnthn> m: say "'foo'" ~~ / (<['"]>) {} :my $stop = ~$0; [<!before $stop> .]* $stop /

[14:56] <camelia> rakudo-moar 398c270e4: OUTPUT: ¬´ÔΩ¢'foo'ÔΩ£‚ê§ 0 => ÔΩ¢'ÔΩ£‚ê§¬ª

[14:59] <Summertime> I'll see if I can work a lookahead in

[14:59] <araraloren> JVM is slower than moarvm

[15:00] <andreoss> araraloren: for Perl 6 perphaps 

[15:00] *** HaraldJoerg1 joined
[15:00] <araraloren> hmm, yeah, only for Perl 6

[15:02] *** HaraldJoerg left
[15:08] *** rindolf left
[15:10] <andreoss> 6 seconds just to warm up

[15:11] *** rindolf joined
[15:18] *** psychoslave left
[15:19] *** araraloren left
[15:21] *** andreoss left
[15:24] *** aborazmeh joined
[15:24] *** aborazmeh left
[15:24] *** aborazmeh joined
[15:26] <El_Che> Compilers

[15:26] <El_Che> Rakudo

[15:26] <El_Che> ...

[15:26] <El_Che> NQP

[15:26] <El_Che> NQP (Not Quite Perl) is not a Perl 6 compiler. 

[15:26] <El_Che> that feels wrong

[15:28] <kurahaupo> It's more like an assembler

[15:28] <APic> Probably depends on how one defines ‚ÄûPerl 6‚Äú

[15:28] <kurahaupo> Perl 5+Œµ

[15:35] *** mkmk joined
[15:35] *** aborazmeh left
[15:36] *** HaraldJoerg1 left
[15:41] <Geth> ¬¶ perl6.org: dbf248a13f | (Claudio Ramirez)++ | source/compilers/index.html

[15:41] <Geth> ¬¶ perl6.org: Put Rakudo and NQP in the same paragraph for compilers (NQP is not a compiler) + s/nom/master/g in github links

[15:41] <Geth> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/dbf248a13f

[15:47] <Geth> ¬¶ rakudo.org: 80bb88123d | (Claudio Ramirez)++ | 31 files

[15:47] <Geth> ¬¶ rakudo.org: s/nom/master/g

[15:47] <Geth> ¬¶ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/80bb88123d

[15:56] *** kaare_ joined
[16:19] *** jmerelo joined
[16:23] *** Kaiepi joined
[16:28] *** mkmk left
[16:34] <Geth> ¬¶ perl6.org: 75af1865bd | (Claudio Ramirez)++ | source/compilers/index.html

[16:34] <Geth> ¬¶ perl6.org: typo

[16:34] <Geth> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/75af1865bd

[16:46] <Geth> ¬¶ perl6.org: a281da8777 | (Claudio Ramirez)++ | source/compilers/index.html

[16:46] <Geth> ¬¶ perl6.org: rewording multiple compiler ("there are" -> "it encourages") because there is only 1 active listed

[16:46] <Geth> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/a281da8777

[16:53] *** raschipi joined
[17:07] *** zakharyas left
[17:08] *** ufobat joined
[17:09] *** zakharyas joined
[17:18] *** raschipi left
[17:19] *** zakharyas left
[17:24] <mscha> I think I've got myself a Heisenbug...

[17:25] <mscha> m: my @m = [1,2,3],[4,5,6],[7,8,9]; for ^3 -> $i { @m[$i]<> X*= 2; }; dd @m; # doesn't work

[17:25] <camelia> rakudo-moar 398c270e4: OUTPUT: ¬´Array @m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]‚ê§¬ª

[17:25] <mscha> m: my @m = [1,2,3],[4,5,6],[7,8,9]; for ^3 -> $i { @m[$i]<> X*= 2; say @m[$i]; }; dd @m; # works after adding a .say

[17:25] <camelia> rakudo-moar 398c270e4: OUTPUT: ¬´[2 4 6]‚ê§Array @m = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]‚ê§[8 10 12]‚ê§[14 16 18]‚ê§¬ª

[17:25] <jmerelo> mscha: when it works after adding a "say" it's a problem with doing stuff in sink context.

[17:26] <mscha> I don't see how the context of the "X*=" is different in both cases...

[17:26] <jmerelo> mscha: probably not sink context. Item context in this case. In the second case, you're reifying @m[$i] when you do "say". In the first case, you're not

[17:27] <mscha> m: my @m = [1,2,3],[4,5,6],[7,8,9]; for ^3 -> $i { @m[$i]<> X*= 2; 1; }; dd @m;

[17:27] <camelia> rakudo-moar 398c270e4: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant integer 1 in sink context (line 1)‚ê§Array @m = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]‚ê§¬ª

[17:27] <jmerelo> mscha: kinda similar to this https://docs.perl6.org/language/traps#Containers_versus_values_in_a_Capture

[17:28] <mscha> This works as well, so it is indeed a context thing, but I'm not reifying @m now, am I?

[17:29] <geekosaur> mscha, I think what goes on here is that the sink context is that of the 'for'

[17:29] <jmerelo> mscha: you're using @m[$i]<>, decontainerizing and thus not reifying @m[$i]. That is why if you "say", it's reified. If you just did the multiplication without decontainerizing, the multiplication would reify

[17:29] <jmerelo> my @m = [1,2,3],[4,5,6],[7,8,9]; for ^3 -> $i { @m[$i] X*= 2; }; dd @m; 

[17:29] <evalable6> jmerelo, rakudo-moar 398c270e4: OUTPUT: ¬´Array @m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]‚ê§¬ª

[17:31] <jmerelo> it's complicated

[17:31] *** domidumont left
[17:31] <jmerelo> You're decontainerizing to eliminate item context. You should probably use deepmap here

[17:32] <jmerelo> my @m = [1,2,3],[4,5,6],[7,8,9]; say @m.deepmap( * * 2 )

[17:32] <evalable6> jmerelo, rakudo-moar 398c270e4: OUTPUT: ¬´[[2 4 6] [8 10 12] [14 16 18]]‚ê§¬ª

[17:32] <mscha> Without the decont it doesn't work correctly (wrong context)

[17:32] <mscha> m: my @m = [1,2,3],[4,5,6],[7,8,9]; for ^3 -> $i { @m[$i] X*= 2; 1; }; dd @m;

[17:32] <camelia> rakudo-moar 398c270e4: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant integer 1 in sink context (line 1)‚ê§Array @m = [6, 6, 6]‚ê§¬ª

[17:32] *** domidumont joined
[17:32] <jmerelo> my @m = [1,2,3],[4,5,6],[7,8,9]; say @m.deepmap( * X*= 2 )

[17:32] <evalable6> jmerelo, rakudo-moar 398c270e4: OUTPUT: ¬´[[(2) (4) (6)] [(8) (10) (12)] [(14) (16) (18)]]‚ê§¬ª

[17:34] <mscha> In my actual code I'm multiplying (actually dividing) each row with a different number, so deepmap is not an option.  I guess I'll go back to my nested for.  :-(

[17:35] <mscha> m: my @m = [1,2,3],[4,5,6],[7,8,9]; for ^3 -> $i { my @r := @m[$i]; @r X*= 2; }; dd @m; # even this doesn't work

[17:35] <camelia> rakudo-moar 398c270e4: OUTPUT: ¬´Array @m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]‚ê§¬ª

[17:35] <jmerelo> mscha: if you need the row number it's going to be complicated no matter what. But think that anythink you can do with for you can do with nested maps, using adverbs. 

[17:35] <jmerelo> mscha: for loops are not p6y, but they do the job.

[17:36] <mscha> I know.  But I want to write p6y code.  ;-)

[17:37] <mscha> m: my @m = [1,2,3],[4,5,6],[7,8,9]; for @m -> @r { @r X*= 2; }; dd @m; # still no good

[17:37] <camelia> rakudo-moar 398c270e4: OUTPUT: ¬´Array @m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]‚ê§¬ª

[17:37] <mscha> m: my @m = [1,2,3],[4,5,6],[7,8,9]; for @m -> @r { @r X*= 2; 1 }; dd @m; # works, with a warning

[17:37] <camelia> rakudo-moar 398c270e4: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant integer 1 in sink context (line 1)‚ê§Array @m = [[2, 4, 6], [8, 10, 12], [14, 16, 18]]‚ê§¬ª

[17:39] <mscha> m: my @m = [1,2,3],[4,5,6],[7,8,9]; for @m -> @r { my $div = @r[1]; @r /*= $div; 1 }; dd @m; # works, with a warning

[17:39] <camelia> rakudo-moar 398c270e4: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant integer 1 in sink context (line 1)‚ê§Cannot modify an immutable WhateverCode ({ ... })‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:39] <mscha> m: my @m = [1,2,3],[4,5,6],[7,8,9]; for @m -> @r { my $div = @r[1]; @r /= $div; 1 }; dd @m; # works, with a warning

[17:39] <camelia> rakudo-moar 398c270e4: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant integer 1 in sink context (line 1)‚ê§Array @m = [[1.5], [0.6], [0.375]]‚ê§¬ª

[17:39] <mscha> m: my @m = [1,2,3],[4,5,6],[7,8,9]; for @m -> @r { my $div = @r[1]; @r X/= $div; 1 }; dd @m; # works, with a warning

[17:39] <camelia> rakudo-moar 398c270e4: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant integer 1 in sink context (line 1)‚ê§Array @m = [[0.5, 1.0, 1.5], [0.8, 1.0, 1.2], [0.875, 1.0, 1.125]]‚ê§¬ª

[17:40] <mscha> That's pretty close to what I'm actually trying to do.  But I still don't really understand why it doesn't work without the dummy statement.

[17:42] *** kwb joined
[17:43] <geekosaur> I feel like the for is optimizing it away because it ends up in the for's result context where it is discarded, possibly because it's part of a list

[17:43] <geekosaur> we've had bugs like that before

[17:43] *** kwb left
[17:43] <geekosaur> and "features" (Failures don't fire in that case because why loop through a list thats's being discarded?)

[17:43] <mscha> m: my @m = [1,2,3],[4,5,6],[7,8,9]; for @m -> @r { my $div = @r[1]; @r X/= $div; $div = 0 }; dd @m; # works, still a dummy statement, but no warning

[17:43] <camelia> rakudo-moar 398c270e4: OUTPUT: ¬´Array @m = [[0.5, 1.0, 1.5], [0.8, 1.0, 1.2], [0.875, 1.0, 1.125]]‚ê§¬ª

[17:44] <mscha> So this is a bug, right, and worth reporting?

[17:44] *** zakharyas joined
[17:45] <geekosaur> I would say so, although others might differ

[17:46] <geekosaur> the line between "bug" and "normal but unexpected in some cases" is sometimes blurry

[17:50] <jmerelo> mscha: I would say it's a trap. Things get complicated when you involve different contexts (item, sink...)

[17:51] <jmerelo> dummy statement == statement in sink context. There's usually no warning, it just sinks.

[17:51] *** pmurias joined
[17:52] <jmerelo> mscha: it's worth the while to ask in StackOverflow; there will someone very knowledgeable who will explain what's going on. And they someone (or me) will reap the explanation and improve the documentation.

[17:52] *** MasterDuke left
[17:57] <jmerelo> Generated report of issues closed during the second month of the Perl Foundation grant: https://github.com/JJ/TPF-Grant/blob/master/report/issues-May-2018.md

[17:58] *** MasterDuke joined
[17:59] <mscha> jmerelo: already reported at https://github.com/rakudo/rakudo/issues/1898 .  If it's not a bug (I don't see how), just close it.  ;-)

[18:00] <jmerelo> mscha: don't have the privs there :-) But definitely, not a bug. 

[18:12] *** ZeonPeon left
[18:13] *** ZeonPeon joined
[18:24] *** AlexDani` is now known as AlexDaniel

[18:29] <Geth> ¬¶ doc: 509428b100 | (JJ Merelo)++ | doc/Language/classtut.pod6

[18:29] <Geth> ¬¶ doc: Adds doc on class attributes, closes #2089

[18:29] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/509428b100

[18:29] <synopsebot> Link: https://doc.perl6.org/language/classtut

[18:38] *** Kaiepi left
[18:38] *** ZeonPeon left
[18:38] *** f3ew_ left
[18:38] *** f3ew joined
[18:39] *** nnunley left
[18:40] *** espadrine joined
[18:40] *** ZeonPeon joined
[18:41] *** nnunley joined
[18:46] *** skids joined
[18:49] <Geth> ¬¶ doc: 9b7993bec5 | (JJ Merelo)++ | 2 files

[18:49] <Geth> ¬¶ doc: Adds TWEAK examples, closes #1393

[18:49] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9b7993bec5

[18:51] <Geth> ¬¶ doc: 5d32afafa4 | (JJ Merelo)++ | doc/Language/classtut.pod6

[18:51] <Geth> ¬¶ doc: Links the other section on TWEAK

[18:51] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/5d32afafa4

[18:51] <synopsebot> Link: https://doc.perl6.org/language/classtut

[18:52] *** ZeonPeon left
[19:00] *** domidumont left
[19:08] *** [Sno] joined
[19:08] *** darutoko left
[19:10] *** jmerelo left
[19:11] *** sno left
[19:11] <tbrowder_> i just saw the p6 comma IDE is now on the market--woo woo!

[19:12] *** rjbs left
[19:12] <tbrowder_> https://commaide.com

[19:32] *** BenGoldberg left
[19:36] *** rjbs joined
[19:44] <buggable> New CPAN upload: PDF-Class-0.2.2.tar.gz by WARRINGD http://modules.perl6.org/dist/PDF::Class:cpan:WARRINGD

[19:48] *** lizmat left
[19:48] *** aindilis left
[19:55] *** tyil left
[19:56] *** rindolf left
[19:58] *** tyil joined
[19:59] *** dct left
[20:00] *** andreoss joined
[20:01] *** rindolf joined
[20:04] *** dct joined
[20:07] *** zakharyas left
[20:13] *** lizmat joined
[20:29] *** andreoss left
[20:37] *** wamba left
[20:37] *** wamba joined
[20:49] *** rindolf left
[20:49] *** Schepeers left
[20:50] <Juerd> Why does Promise.in take an untyped $seconds, rather than a Duration?

[20:52] *** Schepeers joined
[20:56] <moritz> so that you don't have to coerce to Duration, if all you've got are seconds as an integer

[20:57] <El_Che> doesn't type trumps untyped?

[21:03] <Juerd> moritz: But wouldn't Duration() $d do that for you?

[21:03] <Juerd> Although I wouldn't know what if that'd be any better

[21:04] <MasterDuke> m: sub a(Duration() $d) { dd $d }; a(123)

[21:04] <camelia> rakudo-moar 398c270e4: OUTPUT: ¬´No such method 'Duration' for invocant of type 'Int'‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:09] <MasterDuke> though i agree that a Duration multi for Promise.in seems logical

[21:10] *** rindolf joined
[21:14] *** dct left
[21:14] *** aindilis joined
[21:14] *** Kaiepi joined
[21:22] <moritz> aye

[21:25] *** Kaiepi left
[21:27] *** Kaiepi joined
[21:28] <Geth> ¬¶ doc: 449d18ca23 | (Elizabeth Mattijsen)++ | doc/Language/5to6-nutshell.pod6

[21:28] <Geth> ¬¶ doc: Whitespace *is* allowed before the method period

[21:28] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/449d18ca23

[21:28] <synopsebot> Link: https://doc.perl6.org/language/5to6-nutshell

[21:30] *** rindolf left
[21:31] *** dct joined
[21:38] <Geth> ¬¶ doc: 1e17bb83cd | (Elizabeth Mattijsen)++ | doc/Language/5to6-nutshell.pod6

[21:38] <Geth> ¬¶ doc: I don't think Range still has wrinkles :-)

[21:38] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/1e17bb83cd

[21:40] <Geth> ¬¶ doc: 9e0dfe8602 | (Elizabeth Mattijsen)++ | doc/Language/5to6-nutshell.pod6

[21:40] <synopsebot> Link: https://doc.perl6.org/language/5to6-nutshell

[21:40] <Geth> ¬¶ doc: Point out that "{$foo}" is not just for variables

[21:40] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9e0dfe8602

[21:46] <Geth> ¬¶ doc: d2b0952449 | (Elizabeth Mattijsen)++ | doc/Language/5to6-nutshell.pod6

[21:46] <Geth> ¬¶ doc: for @a { } is the same as for @a <-> $_ { }

[21:46] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/d2b0952449

[21:49] *** sena_kun left
[21:51] <Geth> ¬¶ doc: 09a6e6d01f | (Elizabeth Mattijsen)++ | doc/Language/5to6-nutshell.pod6

[21:51] <Geth> ¬¶ doc: Elaborate a bit on blockless NEXT phasers

[21:51] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/09a6e6d01f

[21:51] <synopsebot> Link: https://doc.perl6.org/language/5to6-nutshell

[21:52] *** wamba left
[21:56] *** dct left
[21:58] *** molaf left
[22:00] <Geth> ¬¶ doc: aa13bf9c24 | (Elizabeth Mattijsen)++ | doc/Language/5to6-nutshell.pod6

[22:00] <Geth> ¬¶ doc: open() returns a Failure and doesn't throw

[22:00] <Geth> ¬¶ doc: 

[22:00] <Geth> ¬¶ doc: Give a little example on how to to test for Failure and easily get a

[22:00] <Geth> ¬¶ doc: $handle assigned on the fly.

[22:00] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/aa13bf9c24

[22:05] <Geth> ¬¶ doc: ff74285647 | (Elizabeth Mattijsen)++ | doc/Language/5to6-nutshell.pod6

[22:05] <Geth> ¬¶ doc: Mention œÑ, œÄ, ùëí as built-in constants

[22:05] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/ff74285647

[22:05] <synopsebot> Link: https://doc.perl6.org/language/5to6-nutshell

[22:06] <lizmat> enough for today&

[22:15] *** pmurias left
[22:18] *** BenGoldberg joined
[22:20] *** ufobat left
[22:27] *** a3f_ left
[22:31] *** a3f joined
[22:31] *** a3f left
[22:31] *** a3f joined
[22:41] <Geth> ¬¶ doc: b6dc8f5140 | MasterDuke17++ (committed using GitHub Web editor) | doc/Language/5to6-nutshell.pod6

[22:41] <Geth> ¬¶ doc: Remove an extra space

[22:41] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/b6dc8f5140

[22:41] <synopsebot> Link: https://doc.perl6.org/language/5to6-nutshell

[22:47] *** donpdonp left
[22:52] *** ufobat joined
[22:55] *** itaipu joined
[23:02] *** molaf joined
[23:18] *** ZeonPeon joined
[23:19] *** ZeonPeon left
[23:29] *** raschipi joined
[23:33] *** lizmat left
[23:39] *** Khisanth left
[23:42] *** lizmat joined
[23:49] *** Tison left
[23:55] *** Khisanth joined
[23:58] *** w_richard_w joined
