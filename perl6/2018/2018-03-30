[00:00] *** mcmillhj left
[00:12] *** SmokeMachine left
[00:12] *** hoelzro_ left
[00:12] *** scott left
[00:12] *** agwind left
[00:12] *** rouking left
[00:12] *** Exodist left
[00:12] *** alpha6 left
[00:12] *** nebuchadnezzar left
[00:12] *** S007 left
[00:12] *** CIAvash[m] left
[00:12] *** mtj_ left
[00:12] *** daxim left
[00:12] *** lizmat left
[00:12] *** raydiak left
[00:12] *** Kaiepi left
[00:12] *** khw left
[00:12] *** AlexDaniel left
[00:12] *** athenot left
[00:12] *** SourceBaby left
[00:12] *** p6lert left
[00:12] *** synopsebot left
[00:12] *** Geth left
[00:12] *** dalek left
[00:12] *** notable6 left
[00:12] *** speedChicken left
[00:12] *** jferrero left
[00:12] *** bisectable6 left
[00:12] *** llfourn_ left
[00:12] *** aeruder left
[00:12] *** jcallen_ left
[00:12] *** cosimo left
[00:12] *** Praise left
[00:12] *** TeamBlast left
[00:12] *** mingdao left
[00:12] *** stmuk left
[00:12] *** jalbo_ left
[00:12] *** dustinm` left
[00:12] *** troys left
[00:12] *** jeek left
[00:12] *** wmoxam left
[00:12] *** khisanth_ left
[00:12] *** kaare_ left
[00:12] *** vike left
[00:12] *** tyil left
[00:12] *** xinming_ left
[00:12] *** tt left
[00:12] *** lookatme left
[00:12] *** ilbelkyr left
[00:12] *** APic left
[00:12] *** [particle]1 left
[00:12] *** Util left
[00:12] *** nativecallable6 left
[00:12] *** reportable6 left
[00:12] *** quotable6 left
[00:12] *** undersightable6 left
[00:12] *** TEttinger left
[00:12] *** committable6 left
[00:12] *** greppable6 left
[00:12] *** shareable6 left
[00:12] *** squashable6 left
[00:12] *** benchable6 left
[00:12] *** unicodable6 left
[00:12] *** coverable6 left
[00:12] *** evalable6 left
[00:12] *** lucs left
[00:12] *** kybr left
[00:12] *** gabiruh_ left
[00:12] *** epony left
[00:12] *** phogg left
[00:12] *** yoleaux left
[00:12] *** stux|RC-only left
[00:12] *** donpdonp left
[00:12] *** erdic left
[00:12] *** samcv left
[00:12] *** Voldenet left
[00:12] *** noganex left
[00:12] *** KotH left
[00:12] *** joy left
[00:12] *** DarthGandalf left
[00:12] *** damnlie left
[00:12] *** ecocode left
[00:12] *** Matthew[m] left
[00:12] *** thgilfodrol left
[00:12] *** statisfiable6 left
[00:12] *** bloatable6 left
[00:12] *** lumimies left
[00:12] *** albongo left
[00:12] *** kst` left
[00:12] *** kurahaupo left
[00:12] *** Herby_ left
[00:12] *** b2gills left
[00:12] *** avar left
[00:12] *** imcsk8 left
[00:12] *** syntaxman left
[00:12] *** SCHAPiE left
[00:12] *** g- left
[00:12] *** sjn left
[00:12] *** riatre left
[00:12] *** tadzik left
[00:12] *** reu left
[00:12] *** Grauwolf left
[00:12] *** wictory[m] left
[00:12] *** eliasr left
[00:12] *** ilbot3 left
[00:12] *** ambs left
[00:12] *** cognominal left
[00:12] *** Possum left
[00:12] *** salva left
[00:12] *** ribasushi left
[00:12] *** MasterDuke left
[00:12] *** pharv_ left
[00:12] *** dogbert17 left
[00:12] *** bartolin left
[00:12] *** grumble left
[00:12] *** afresh1 left
[00:12] *** giraffe left
[00:12] *** mniip left
[00:12] *** Sgeo__ left
[00:12] *** protium left
[00:12] *** telnet left
[00:12] *** lichtkind left
[00:12] *** leah2 left
[00:12] *** obfusk left
[00:12] *** releasable6 left
[00:12] *** telex left
[00:12] *** ccakes left
[00:12] *** mempko left
[00:12] *** TreyHarris left
[00:12] *** rjbs left
[00:12] *** jast left
[00:12] *** dogbert2 left
[00:12] *** El_Che left
[00:12] *** eythian left
[00:14] *** scott joined
[00:14] *** Altreus joined
[00:14] *** imcsk8_ joined
[00:14] *** mephinet joined
[00:14] *** tomaw_ joined
[00:14] *** eater joined
[00:14] *** mcmillhj joined
[00:14] *** japanoise joined
[00:14] *** f3ew_ joined
[00:14] *** dpk joined
[00:14] *** hoelzro joined
[00:14] *** jnthn_ joined
[00:14] *** jhill_ joined
[00:14] *** iviv joined
[00:14] *** SmokeMachine joined
[00:14] *** [particle]1 joined
[00:14] *** lichtkind joined
[00:14] *** pharv_ joined
[00:14] *** Herby_ joined
[00:14] *** MasterDuke joined
[00:14] *** lizmat joined
[00:14] *** raydiak joined
[00:14] *** Kaiepi joined
[00:14] *** troys joined
[00:14] *** khw joined
[00:14] *** AlexDaniel joined
[00:14] *** Util joined
[00:14] *** athenot joined
[00:14] *** Voldenet joined
[00:14] *** eliasr joined
[00:14] *** SourceBaby joined
[00:14] *** synopsebot joined
[00:14] *** p6lert joined
[00:14] *** Geth joined
[00:14] *** dalek joined
[00:14] *** weber.freenode.net sets mode: +vvvv SourceBaby synopsebot Geth dalek

[00:14] *** dogbert17 joined
[00:14] *** afresh1 joined
[00:14] *** notable6 joined
[00:14] *** bartolin joined
[00:14] *** speedChicken joined
[00:14] *** quotable6 joined
[00:14] *** reportable6 joined
[00:14] *** nativecallable6 joined
[00:14] *** jeek joined
[00:14] *** wmoxam joined
[00:14] *** rjbs joined
[00:14] *** weber.freenode.net sets mode: +v notable6

[00:14] *** ilbot3 joined
[00:14] *** leah2 joined
[00:14] *** khisanth_ joined
[00:14] *** obfusk joined
[00:14] *** kaare_ joined
[00:14] *** undersightable6 joined
[00:14] *** giraffe joined
[00:14] *** vike joined
[00:14] *** tyil joined
[00:14] *** reu joined
[00:14] *** noganex joined
[00:14] *** ambs joined
[00:14] *** b2gills joined
[00:14] *** TEttinger joined
[00:14] *** jferrero joined
[00:14] *** committable6 joined
[00:14] *** releasable6 joined
[00:14] *** cognominal joined
[00:14] *** bisectable6 joined
[00:14] *** xinming_ joined
[00:14] *** jast joined
[00:14] *** tt joined
[00:14] *** llfourn_ joined
[00:14] *** lookatme joined
[00:14] *** mniip joined
[00:14] *** telex joined
[00:14] *** Sgeo__ joined
[00:14] *** aeruder joined
[00:14] *** ilbelkyr joined
[00:14] *** jcallen_ joined
[00:14] *** greppable6 joined
[00:14] *** statisfiable6 joined
[00:14] *** weber.freenode.net sets mode: +vvvv ilbot3 releasable6 bisectable6 statisfiable6

[00:14] *** squashable6 joined
[00:14] *** shareable6 joined
[00:14] *** unicodable6 joined
[00:14] *** benchable6 joined
[00:14] *** evalable6 joined
[00:14] *** coverable6 joined
[00:14] *** bloatable6 joined
[00:14] *** ccakes joined
[00:14] *** avar joined
[00:14] *** cosimo joined
[00:14] *** Praise joined
[00:14] *** protium joined
[00:14] *** lucs joined
[00:14] *** mempko joined
[00:14] *** weber.freenode.net sets mode: +v bloatable6

[00:14] *** kybr joined
[00:14] *** TeamBlast joined
[00:14] *** APic joined
[00:14] *** gabiruh_ joined
[00:14] *** epony joined
[00:14] *** phogg joined
[00:14] *** KotH joined
[00:14] *** mingdao joined
[00:14] *** imcsk8 joined
[00:14] *** syntaxman joined
[00:14] *** SCHAPiE joined
[00:14] *** stmuk joined
[00:14] *** jalbo_ joined
[00:14] *** dustinm` joined
[00:14] *** TreyHarris joined
[00:14] *** telnet joined
[00:14] *** Possum joined
[00:14] *** dogbert2 joined
[00:14] *** yoleaux joined
[00:14] *** Grauwolf joined
[00:14] *** ecocode joined
[00:14] *** joy joined
[00:14] *** stux|RC-only joined
[00:14] *** thgilfodrol joined
[00:14] *** donpdonp joined
[00:14] *** albongo joined
[00:14] *** lumimies joined
[00:14] *** tadzik joined
[00:14] *** wictory[m] joined
[00:14] *** g- joined
[00:14] *** salva joined
[00:14] *** sjn joined
[00:14] *** kst` joined
[00:14] *** El_Che joined
[00:14] *** Matthew[m] joined
[00:14] *** DarthGandalf joined
[00:14] *** eythian joined
[00:14] *** ribasushi joined
[00:14] *** damnlie joined
[00:14] *** erdic joined
[00:14] *** grumble joined
[00:14] *** samcv joined
[00:14] *** u-ou joined
[00:14] *** sivoais_ joined
[00:14] *** huf joined
[00:14] *** atta joined
[00:14] *** SHODAN joined
[00:14] *** weber.freenode.net sets mode: +v yoleaux

[00:14] *** krunen joined
[00:14] *** smash joined
[00:14] *** ccntrq joined
[00:14] *** john_parr joined
[00:14] *** geekosaur joined
[00:14] *** timotimo joined
[00:14] *** ingy joined
[00:14] *** zostay joined
[00:14] *** mst joined
[00:14] *** itaylor57 joined
[00:14] *** perigrin joined
[00:14] *** BuildTheRobots joined
[00:14] *** mack[m] joined
[00:14] *** chansen_ joined
[00:14] *** jsimonet joined
[00:14] *** roguelazer joined
[00:14] *** esh joined
[00:14] *** timeless joined
[00:14] *** ggherdov joined
[00:14] *** xi- joined
[00:14] *** pnu__ joined
[00:14] *** cpup joined
[00:14] *** tobs joined
[00:14] *** tbrowder_ joined
[00:14] *** daemon joined
[00:14] *** musca` joined
[00:14] *** pmichaud joined
[00:14] *** huggable joined
[00:14] *** buggable joined
[00:14] *** tinita joined
[00:14] *** webstrand joined
[00:14] *** riatre joined
[00:14] *** cgfbee joined
[00:14] *** go|dfish joined
[00:14] *** m0ltar joined
[00:14] *** a3f joined
[00:14] *** simcop2387 joined
[00:14] *** perlbot joined
[00:14] *** ilmari[m] joined
[00:14] *** mirlur[m]1 joined
[00:14] *** bhm joined
[00:14] *** japhb joined
[00:14] *** skaji joined
[00:14] *** peteretep joined
[00:14] *** kipd joined
[00:14] *** mrsolo joined
[00:14] *** weber.freenode.net sets mode: +vv huggable buggable

[00:14] *** caasih joined
[00:14] *** PotatoGim joined
[00:14] *** rodarmor joined
[00:14] *** jnap_ joined
[00:14] *** mithaldu_ joined
[00:14] *** profan joined
[00:14] *** caa51h joined
[00:14] *** nightfrog joined
[00:14] *** Spot_ joined
[00:14] *** charsbar joined
[00:14] *** stux|RC-- joined
[00:14] *** Kaffe joined
[00:14] *** awwaiid joined
[00:14] *** jantore joined
[00:14] *** DrForr joined
[00:14] *** Juerd joined
[00:14] *** avalenn joined
[00:14] *** Bucciarati joined
[00:14] *** Gothmog_ joined
[00:14] *** masak joined
[00:14] *** Garland_g[m] joined
[00:14] *** unclechu joined
[00:14] *** AlexDaniel` joined
[00:14] *** domm joined
[00:14] *** klapperl joined
[00:14] *** Ulti joined
[00:14] *** zoosha joined
[00:14] *** Grrrr joined
[00:14] *** breinbaas joined
[00:14] *** jkramer joined
[00:14] *** BinGOs joined
[00:14] *** andrewalker joined
[00:14] *** robinsmidsrod joined
[00:14] *** gfldex joined
[00:14] *** sunnavy joined
[00:14] *** [Coke] joined
[00:14] *** samebchase joined
[00:14] *** [ptc] joined
[00:14] *** ponbiki joined
[00:14] *** ilmari joined
[00:14] *** pierrot joined
[00:14] *** moritz joined
[00:14] *** integral joined
[00:14] *** leedo joined
[00:14] *** literal joined
[00:14] *** cibs joined
[00:14] *** freeze joined
[00:14] *** BooK_ joined
[00:14] *** kshannon joined
[00:14] *** bonsaikitten joined
[00:14] *** xxpor_ joined
[00:14] *** hcit joined
[00:14] *** diegok joined
[00:14] *** hahainternet joined
[00:14] *** nativecallable6 left
[00:14] *** spider-mario joined
[00:14] *** undersightable6 left
[00:14] *** shareable6 left
[00:14] *** squashable6 left
[00:14] *** benchable6 left
[00:14] *** unicodable6 left
[00:14] *** coverable6 left
[00:15] *** mcmillhj left
[00:15] *** committable6 left
[00:16] *** imcsk8 left
[00:16] *** scott is now known as Guest78496

[00:16] *** Altreus is now known as Guest14802

[00:16] *** reportable6 left
[00:16] *** quotable6 left
[00:16] *** greppable6 left
[00:16] *** kent\n joined
[00:18] *** yoleaux left
[00:19] *** yoleaux joined
[00:19] *** ChanServ sets mode: +v yoleaux

[00:22] *** mcmillhj joined
[00:23] *** wictory[m] left
[00:23] *** ilmari[m] left
[00:23] *** Matthew[m] left
[00:23] *** tadzik left
[00:23] *** mack[m] left
[00:23] *** mirlur[m]1 left
[00:23] *** unclechu left
[00:23] *** Garland_g[m] left
[00:23] *** AlexDaniel` left
[00:26] *** mcmillhj left
[00:27] *** cognominal left
[00:29] *** cognominal joined
[00:31] <Kaiepi> how would i write a test for if perl6 is exiting with a code?

[00:31] <Kaiepi> 6

[00:31] <Kaiepi> typo sorry

[00:32] *** mienaikage joined
[00:33] <timotimo> you have to run a perl6 compiler (or just the script) via run or Proc::Async for that purpose

[00:33] <MasterDuke> i think there are some tests in rakudo's t directory or in roast that do that

[00:34] <Kaiepi> would they work for tests for the repl?

[00:34] <timotimo> yeah, we do have repl tests already

[00:35] <Kaiepi> i know, i'm adding tests for the changes i'm making

[00:36] <Kaiepi> i'm ensuring pressing ^D twice in a row works

[00:36] <lookatme> m: use soft;  &say.wrap(-> |c { put c; nextsame; }); say 123

[00:36] <camelia> rakudo-moar 7572983a4: OUTPUT: «123␤Attempt to return outside of any Routine␤  in block <unit> at <tmp> line 1␤␤123␤»

[00:37] <lookatme> Argument of wrap can not be a anon sub ?

[00:37] <lookatme> or a block

[00:37] <lookatme> m: use soft;  &say.wrap(sub (|c) { put c; nextsame; }); say 123

[00:37] <camelia> rakudo-moar 7572983a4: OUTPUT: «123␤123␤»

[00:37] <lookatme> this fine

[00:37] *** w_richard_w joined
[00:38] *** aborazmeh joined
[00:38] *** aborazmeh left
[00:38] *** aborazmeh joined
[00:38] <Kaiepi> i think what i can do is make a proc for the repl, then test for whether it dies or not

[00:39] <lookatme> m: try "say 123".EVAL;

[00:39] <camelia> rakudo-moar 7572983a4: OUTPUT: «123␤»

[00:39] <lookatme> m: try "say abc".EVAL;

[00:39] <camelia> rakudo-moar 7572983a4: ( no output )

[00:39] <AlexDaniel> e: try "say abc".EVAL;

[00:39] <evalable6> AlexDaniel, rakudo-moar 7572983a4: OUTPUT: «»

[00:39] <AlexDaniel> e: try "say ‘abc’".EVAL;

[00:39] <evalable6> AlexDaniel, rakudo-moar 7572983a4: OUTPUT: «abc␤»

[00:39] <lookatme> yeah, how about EVAL :)

[00:41] *** pharv_ left
[00:42] *** pharv joined
[00:42] *** mcmillhj joined
[00:46] *** pharv left
[00:46] *** mcmillhj left
[00:50] <Geth> ¦ doc: 91b5c7beb2 | cfa++ | xt/links-not-links.t

[00:50] <Geth> ¦ doc: Remove trailing whitespace.

[00:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/91b5c7beb2

[00:53] *** char_var[buffer] joined
[00:55] *** skids joined
[00:57] *** char_var[buffer] left
[01:01] *** mcmillhj joined
[01:05] *** mcmillhj left
[01:06] *** pharv joined
[01:06] *** epony left
[01:06] *** Herby_ left
[01:10] *** herby_ joined
[01:10] *** pharv left
[01:12] *** nativecallable6 joined
[01:12] *** ChanServ sets mode: +v nativecallable6

[01:12] *** coverable6 joined
[01:12] *** unicodable6 joined
[01:12] *** committable6 joined
[01:12] *** ChanServ sets mode: +v unicodable6

[01:12] *** ChanServ sets mode: +v committable6

[01:12] *** undersightable6 joined
[01:12] *** benchable6 joined
[01:12] *** ChanServ sets mode: +v benchable6

[01:12] *** squashable6 joined
[01:12] *** shareable6 joined
[01:12] *** epony joined
[01:16] *** quotable6 joined
[01:16] *** ChanServ sets mode: +v quotable6

[01:16] *** reportable6 joined
[01:16] *** greppable6 joined
[01:16] *** aborazmeh left
[01:17] *** AlexDaniel` joined
[01:17] *** mirlur[m] joined
[01:17] *** wictory[m] joined
[01:17] *** tadzik joined
[01:17] *** CIAvash[m] joined
[01:17] *** mack[m] joined
[01:17] *** unclechu joined
[01:17] *** Matthew[m] joined
[01:17] *** ilmari[m] joined
[01:17] *** Garland_g[m] joined
[01:18] *** mcmillhj joined
[01:21] <herby_> tyil: the speed increase in the new version of assixt is great

[01:21] <tyil> :D

[01:22] <tyil> its been making my time working on other modules much more enjoyable

[01:22] <tyil> it went from ~13s parse time to ~0.15

[01:23] <tyil> I got some help from samcv in figuring out why it was so slow

[01:23] <herby_> i was about to ask, why was it slow?

[01:23] <tyil> so feel free to give her some credit too :>

[01:23] *** mcmillhj left
[01:23] <tyil> I changed two parts

[01:24] *** aindilis joined
[01:24] <tyil> for one, I updated Hash::Merge to expose subs that did not augment the Hash class

[01:24] <tyil> that used to make it unable to use precompilation

[01:24] <tyil> so it would always have to parse, making it slow

[01:25] <tyil> the other part was that I used to load all classes 

[01:25] <tyil> which has been turned into lazy loading the classes it needs to perform a task

[01:27] <tyil> my next project is a querybuilder, so I dont have to put hardcoded queries into programs

[01:27] <tyil> almost got update, insert and select queries working with it

[01:28] *** agwind joined
[01:28] *** rouking joined
[01:28] *** Exodist joined
[01:28] *** alpha6 joined
[01:28] *** nebuchadnezzar joined
[01:28] *** S007 joined
[01:28] *** mtj_ joined
[01:28] *** daxim joined
[01:28] *** olinkl joined
[01:28] *** dylanwh joined
[01:28] *** rgrau joined
[01:28] *** maettu joined
[01:28] *** marcusramberg joined
[01:28] <tyil> and next week at my semi-local perl monger meetup I'll look for some feedback and look into the possibilities of giving a talk at the perl conference

[01:28] <herby_> that's good stuff.

[01:29] <tyil> I hope so, yeah :D

[01:30] *** FROGGS_ joined
[01:30] *** reportable6 left
[01:30] *** greppable6 left
[01:30] *** japanoise left
[01:31] *** greppable6 joined
[01:31] *** reportable6 joined
[01:31] <tyil> its already 3:30 am

[01:31] <tyil> time to sleep I guess

[01:31] *** squashable6 left
[01:31] *** shareable6 left
[01:31] *** undersightable6 left
[01:31] *** coverable6 left
[01:31] *** evalable6 left
[01:31] <tyil> good night ~

[01:31] *** FROGGS left
[01:31] *** ilmari[m] left
[01:31] *** eater left
[01:32] <herby_> o/

[01:32] *** mirlur[m] left
[01:32] *** mienaikage left
[01:32] *** AlexDaniel` left
[01:32] *** CIAvash[m] left
[01:32] *** mack[m] left
[01:32] *** wictory[m] left
[01:32] *** tadzik left
[01:33] *** unclechu left
[01:33] *** Matthew[m] left
[01:33] *** Garland_g[m] left
[01:33] *** mcmillhj joined
[01:33] *** japanoise joined
[01:34] *** eater joined
[01:35] *** greppable6 left
[01:35] *** reportable6 left
[01:35] *** reportable6 joined
[01:35] *** greppable6 joined
[01:38] *** mcmillhj left
[01:40] *** g- left
[01:43] *** g- joined
[01:45] *** mcmillhj joined
[01:46] *** athenot left
[01:47] *** ilbot3 left
[01:47] *** mienaikage joined
[01:47] *** mienaikage left
[01:49] *** mcmillhj left
[01:50] *** athenot joined
[01:54] *** mienaikage joined
[01:55] *** ilbot3 joined
[01:55] *** ChanServ sets mode: +v ilbot3

[01:58] *** mcmillhj joined
[02:03] *** mcmillhj left
[02:12] *** mcmillhj joined
[02:17] *** mcmillhj left
[02:27] *** AlexDaniel` joined
[02:27] *** tadzik joined
[02:28] *** mirlur[m] joined
[02:28] *** mack[m] joined
[02:28] *** CIAvash[m] joined
[02:28] *** unclechu joined
[02:28] *** Matthew[m] joined
[02:28] *** wictory[m] joined
[02:28] *** ilmari[m] joined
[02:28] *** Garland_g[m] joined
[02:28] *** evalable6 joined
[02:28] *** undersightable6 joined
[02:28] *** shareable6 joined
[02:28] *** squashable6 joined
[02:28] *** mcmillhj joined
[02:33] *** mcmillhj left
[02:42] *** mcmillhj joined
[02:46] *** epony left
[02:47] *** mcmillhj left
[02:53] *** mcmillhj joined
[02:58] *** mcmillhj left
[03:00] *** herby_ left
[03:09] *** epony joined
[03:10] *** eliasr left
[03:11] *** mcmillhj joined
[03:15] *** mcmillhj left
[03:23] *** mcmillhj joined
[03:27] *** pharv joined
[03:28] *** mcmillhj left
[03:32] *** pharv left
[03:43] *** mcmillhj joined
[03:48] *** mcmillhj left
[03:48] *** yoleaux left
[03:49] *** yoleaux joined
[03:49] *** ChanServ sets mode: +v yoleaux

[04:01] *** mcmillhj joined
[04:06] *** mcmillhj left
[04:13] *** pierre_ joined
[04:18] *** mcmillhj joined
[04:20] <Kaiepi> how do i post a thread to the perl6 mailing list?

[04:21] *** skids left
[04:23] *** mcmillhj left
[04:32] *** mcmillhj joined
[04:37] *** mcmillhj left
[04:40] *** Malcolm joined
[04:42] *** Malcolm left
[04:50] *** yangh joined
[04:51] *** mcmillhj joined
[04:53] *** khw left
[04:55] *** yangh left
[04:55] *** mcmillhj left
[05:14] *** coverable6 joined
[05:20] *** sauvin joined
[05:27] *** pharv joined
[05:32] *** pharv left
[05:32] *** epony left
[05:33] *** mcmillhj joined
[05:37] *** mcmillhj left
[05:46] *** mcmillhj joined
[05:48] *** troys left
[05:51] *** mcmillhj left
[05:53] *** AlexDaniel left
[05:56] *** domidumont joined
[06:06] *** mcmillhj joined
[06:11] *** amalia___ joined
[06:11] *** mcmillhj left
[06:12] *** abraxxa joined
[06:13] *** abraxxa1 joined
[06:16] *** abraxxa left
[06:17] *** mcmillhj joined
[06:22] *** mcmillhj left
[06:27] *** lizmat_ joined
[06:30] *** lizmat left
[06:31] *** pierre_ left
[06:31] *** mcmillhj joined
[06:32] *** pierre_ joined
[06:32] *** pierre_ left
[06:33] *** pierre_ joined
[06:36] *** mcmillhj left
[06:38] *** jmerelo joined
[06:40] <jmerelo> Hi y'all

[06:41] *** Actualeyes left
[06:53] *** Actualeyes joined
[06:53] *** jalbo_ left
[06:58] *** Ven`` joined
[07:00] *** wamba joined
[07:06] <donpdonp> say "hello jmerelo"

[07:06] <evalable6> donpdonp, rakudo-moar 7572983a4: OUTPUT: «hello jmerelo␤»

[07:07] <jmerelo> :-)

[07:13] *** sauvin is now known as Sauvin

[07:14] <jmerelo> Working on old perl6/doc issues today... Anyone wants to have an issue assigned, just ask. Or don't. I'll assign them anyway :-)

[07:17] *** mcmillhj joined
[07:22] *** mcmillhj left
[07:28] *** pharv joined
[07:31] *** mcmillhj joined
[07:32] *** darutoko joined
[07:33] *** pharv left
[07:36] *** mcmillhj left
[07:36] <Geth> ¦ doc: 9156582edc | (JJ Merelo)++ | doc/Type/Signature.pod6

[07:36] <Geth> ¦ doc: Converts "below" to link to section it refers to.

[07:36] <Geth> ¦ doc: 

[07:36] <Geth> ¦ doc: Which would close #1883. Incidentally, it works towards solving #1416

[07:36] <Geth> ¦ doc: by adding a reference to **@. The second concept mentioned there, **%

[07:36] <synopsebot> Link: https://doc.perl6.org/type/Signature

[07:36] <Geth> ¦ doc: is not actually documented, but we can document it right there.

[07:36] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9156582edc

[07:40] *** rindolf joined
[07:42] *** Ven`` left
[07:43] *** athenot_ joined
[07:45] *** athenot left
[07:47] *** Ven`` joined
[07:47] *** mcmillhj joined
[07:50] *** lizmat_ is now known as lizmat

[07:52] *** mcmillhj left
[07:59] *** mcmillhj joined
[08:04] *** mcmillhj left
[08:13] *** mcmillhj joined
[08:18] *** mcmillhj left
[08:25] *** mcmillhj joined
[08:30] *** mcmillhj left
[08:31] *** speedChicken left
[08:38] <jmerelo> So, kind of a slow day, huh?

[08:40] *** speedChicken joined
[08:41] *** mcmillhj joined
[08:43] *** |oLa| joined
[08:44] <jmerelo> Is there some way to collect "How do I..." questions from the IRC bot? Can we have a "HowDoIAble"?

[08:46] *** mcmillhj left
[08:48] <Juerd> Followed up quickly by isitpossibletoable

[08:49] <jmerelo> Juerd: :-) Point is, I would like to collect those questions, and answers, for the documentation. If possible, automatically. Or as automatically as possible.

[09:00] *** mcmillhj joined
[09:05] *** mcmillhj left
[09:06] *** mcmillhj joined
[09:08] *** abraxxa1 is now known as abraxxa

[09:10] *** mcmillhj left
[09:16] *** sena_kun joined
[09:19] <Geth> ¦ perl6-most-wanted: b05b4eaea8 | (JJ Merelo)++ | most-wanted/documentation.md

[09:19] <Geth> ¦ perl6-most-wanted: Update and link to roadmap

[09:19] <Geth> ¦ perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/b05b4eaea8

[09:20] *** w_richard_w left
[09:22] <jmerelo> "Most wanted" link from modules just drops you into a GitHub page. Should we turn that into a proper web?

[09:29] *** pharv joined
[09:31] *** jnthn_ is now known as jnthn

[09:33] *** pharv left
[09:35] *** pierre_ left
[09:36] *** pierre_ joined
[09:39] *** Ven` joined
[09:40] *** pierre_ left
[09:40] *** Ven`` left
[09:42] *** wamba left
[09:43] <Kaiepi> sorry to ask again, but how do i post threads on one of the perl mailing lists?

[09:43] <Kaiepi> i'm already subscribed to it

[09:43] <lizmat> which perl mailing list do you mean?  there's many of them  :-)

[09:44] <El_Che> you send a mail to the address you got when you subscribed with from the email address you subscribed

[09:44] <lizmat> send an email to the posting email address of the list?

[09:45] <Kaiepi> the users one

[09:45] <Kaiepi> that'd be [email@hidden.address] right?

[09:46] *** athenot_ left
[09:48] <jmerelo> Kaiepi: you need to be subscribed, probably. We can help you right here if you want, too.

[09:48] <timotimo> already subscribed, see above

[09:48] <Kaiepi> i've already subscribed

[09:49] <jmerelo> Kaiepi: you need to send email from the same email address you are subscribed, using your email client.

[09:50] <Kaiepi> alright, i think i got it

[09:50] <Kaiepi> thanks

[09:50] <jmerelo> Kaiepi: Glad to be of help :-)

[09:52] *** donpdonp left
[09:52] *** eliasr joined
[09:53] *** athenot joined
[09:58] *** wamba joined
[09:59] *** cpage_ joined
[10:02] *** cpage left
[10:02] *** cpage_ is now known as cpage

[10:13] *** Ven` left
[10:17] *** Ven`` joined
[10:22] *** wamba left
[10:22] *** wamba joined
[10:24] *** markong joined
[10:31] *** donpdonp joined
[10:43] *** Ven`` left
[10:43] *** Ven`` joined
[10:44] *** pierre_ joined
[10:45] <jmerelo> There seems to be a single scholarly article on Perl 6, from 2007 and by Audrey Tang https://dl.acm.org/citation.cfm?id=1190218

[10:48] *** pierre_ left
[11:00] *** Ven`` left
[11:00] *** Ven`` joined
[11:00] *** Ven`` left
[11:01] <Kaiepi> p6: use NativeCall; my $ptr = cglobal('c', 'printf', Pointer); nativecast(:(Str), $ptr)('test')

[11:01] <camelia> rakudo-moar b22421e7e: OUTPUT: «Cannot locate native library 'libc.so': /usr/lib64/libc.so: invalid ELF header␤  in block  at /home/camelia/rakudo-m-inst-2/share/perl6/sources/24DD121B5B4774C04A7084827BFAD92199756E03 (NativeCall) line 680␤  in block <unit> at <tmp> line 1␤␤»

[11:01] <Kaiepi> huh

[11:01] <buggable> New CPAN upload: Lingua-Stopwords-0.0.3.tar.gz by CHSANCH https://cpan.metacpan.org/authors/id/C/CH/CHSANCH/Perl6/Lingua-Stopwords-0.0.3.tar.gz

[11:02] <Kaiepi> m: use NativeCall; my $ptr = cglobal('c', 'printf', Pointer); nativecast(:(Str), $ptr)('test')

[11:02] <camelia> rakudo-moar b22421e7e: OUTPUT: «Cannot locate native library 'libc.so': /usr/lib64/libc.so: invalid ELF header␤  in block  at /home/camelia/rakudo-m-inst-2/share/perl6/sources/24DD121B5B4774C04A7084827BFAD92199756E03 (NativeCall) line 680␤  in block <unit> at <tmp> line 1␤␤»

[11:02] <Kaiepi> welp i'll paste what i get i guess

[11:08] <Kaiepi> oh, printf doesn't write to stdout with sub printf(Str --> int32) is native { * } either

[11:09] <Kaiepi> different fds?

[11:27] <jmerelo> p6: say (Bool.roll xx 32).hyper.sum

[11:27] <camelia> rakudo-moar b22421e7e: OUTPUT: «21␤»

[11:27] <jmerelo> p6: say (Bool.roll xx 64).hyper.sum

[11:27] <camelia> rakudo-moar b22421e7e: OUTPUT: «30␤»

[11:28] <jmerelo> p6: my $start = now; say (Bool.roll xx 1024).hyper.sum; say "Time: ", now - $start;

[11:28] <camelia> rakudo-moar b22421e7e: OUTPUT: «512␤Time: 0.0642494␤»

[11:28] <jmerelo> p6: my $start = now; say (Bool.roll xx 2048).hyper.sum; say "Time: ", now - $start;

[11:28] <camelia> rakudo-moar b22421e7e: OUTPUT: «1035␤Time: 0.0512425␤»

[11:29] <jmerelo> p6: my $start = now; say (Bool.roll xx 65536).hyper.sum; say "Time: ", now - $start;

[11:29] <camelia> rakudo-moar b22421e7e: OUTPUT: «32778␤Time: 0.2149424␤»

[11:29] <jmerelo> p6: my $start = now; say (Bool.roll xx 2**34).hyper.sum; say "Time: ", now - $start;

[11:29] <camelia> rakudo-moar b22421e7e: OUTPUT: «MoarVM panic: Memory allocation failed; could not allocate 71139328 bytes␤»

[11:29] <jmerelo> p6: my $start = now; say (Bool.roll xx 2**32).hyper.sum; say "Time: ", now - $start;

[11:29] <El_Che> jota-jota energy boost

[11:29] <camelia> rakudo-moar b22421e7e: OUTPUT: «MoarVM panic: Memory allocation failed; could not allocate 70090752 bytes␤»

[11:30] <jmerelo> p6: my $start = now; say (Bool.roll xx 2**17).hyper.sum; say "Time: ", now - $start;

[11:30] <camelia> rakudo-moar b22421e7e: OUTPUT: «65390␤Time: 0.4147548␤»

[11:30] <jmerelo> p6: my $start = now; say (Bool.roll xx 2**17).hyper.sum; say "Time: ", now - $start;

[11:30] <camelia> rakudo-moar b22421e7e: OUTPUT: «65426␤Time: 0.3164581␤»

[11:31] <jmerelo> p6: my $start = now; say (Bool.roll xx 2**16).hyper.sum; say "Time: ", now - $start;

[11:31] <camelia> rakudo-moar b22421e7e: OUTPUT: «32793␤Time: 0.18517156␤»

[11:31] <jmerelo> It's not parallelizing much, right? Takes almost twice as much for twice the size. 

[11:31] <jmerelo> p6: my $start = now; say (Bool.roll xx 2**16).sum; say "Time: ", now - $start;

[11:31] <camelia> rakudo-moar b22421e7e: OUTPUT: «32660␤Time: 0.045990␤»

[11:32] <jmerelo> p6: my $start = now; say (Bool.roll xx 2**18).sum; say "Time: ", now - $start;

[11:32] <camelia> rakudo-moar b22421e7e: OUTPUT: «131158␤Time: 0.14542349␤»

[11:32] <jmerelo> And it's four times as slow as the sequential version. Am I missing something?

[11:37] <moritz> parallelization has a lot of overhead

[11:38] <moritz> for somethiing as fast as Bool.roll, you need a huge batch size for it to make sense

[11:39] <moritz> m: : my $start = now; my $result = (Bool.roll xx 2**16).hyper.sum; say "Time: ", now - $start;

[11:39] <camelia> rakudo-moar b22421e7e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus statement␤at <tmp>:1␤------> 3:7⏏5 my $start = now; my $result = (Bool.rol␤    expecting any of:␤        colon pair␤»

[11:39] <moritz> m: my $start = now; my $result = (Bool.roll xx 2**16).hyper.sum; say "Time: ", now - $start;

[11:39] <camelia> rakudo-moar b22421e7e: OUTPUT: «Time: 0.18563355␤»

[11:39] <moritz> m: my $start = now; my $result = (Bool.roll xx 2**16).hyper(batch => 2**14).sum; say "Time: ", now - $start;

[11:39] <camelia> rakudo-moar b22421e7e: OUTPUT: «Time: 0.10231314␤»

[11:39] <moritz> m: my $start = now; my $result = (Bool.roll xx 2**16).sum; say "Time: ", now - $start;

[11:39] <camelia> rakudo-moar b22421e7e: OUTPUT: «Time: 0.042404␤»

[11:40] <moritz> you probably can't speed up something so fast with a pretty generic parallization method

[11:41] <moritz> if you could tell the parallelizer "this is all identical, speed it up", it could probably to a better job

[11:41] <jmerelo> moritz: so we'd have to look for single-element heavyweight operations, right?

[11:42] <moritz> jmerelo: right

[11:43] <moritz> m: sub count-primes($upto) { (2..$upto).grep(&is-prime).elems }; say count-primes(1e5)

[11:43] <camelia> rakudo-moar b22421e7e: OUTPUT: «(timeout)»

[11:44] <moritz> m: sub count-primes($upto) { (2..$upto).grep(&is-prime).elems }; say count-primes(1e3)

[11:44] <camelia> rakudo-moar b22421e7e: OUTPUT: «168␤»

[11:44] *** ccntrq left
[11:44] <moritz> m: sub count-primes($upto) { (2..$upto).grep(&is-prime).elems }; say count-primes(5e3)

[11:44] <camelia> rakudo-moar b22421e7e: OUTPUT: «669␤»

[11:44] <moritz> m: my $start = now; my $result = (Bool.roll xx 2**16).hyper(batch => 2**14).sum; say "Time: ", now - $start;

[11:44] <camelia> rakudo-moar b22421e7e: OUTPUT: «Time: 0.1067636␤»

[11:47] <jmerelo> p6: my $start=now; ( (Bool.roll xx 64 ) xx 512).hyper.map( *.sum ); say now-$start;

[11:47] <camelia> rakudo-moar b22421e7e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    now used at line 1. Did you mean 'not', 'HOW'?␤␤»

[11:47] *** flw joined
[11:48] *** ccntrq joined
[11:49] <flw> py: say 3;

[11:49] <jmerelo> p6: my $start=now; ( (Bool.roll xx 64 ) xx 512).hyper.map( *.sum ); say now - $start;

[11:49] <camelia> rakudo-moar b22421e7e: OUTPUT: «0.0622274␤»

[11:49] *** xtreak joined
[11:49] <jmerelo> p6: my $start=now; ( (Bool.roll xx 64 ) xx 1024).hyper.map( *.sum ); say now - $start;

[11:49] <camelia> rakudo-moar b22421e7e: OUTPUT: «0.0908485␤»

[11:50] <jmerelo> moritz: now this is cool :-)

[11:50] <jmerelo> p6: my $start=now; ( (Bool.roll xx 256 ) xx 2048).hyper.map( *.sum ); say now - $start;

[11:50] <camelia> rakudo-moar b22421e7e: OUTPUT: «0.1775111␤»

[11:50] <jmerelo> WTF

[11:50] <jmerelo> p6: my $start=now; my @sums = ( (Bool.roll xx 256 ) xx 2048).hyper.map( *.sum ); say now - $start;

[11:50] <camelia> rakudo-moar b22421e7e: OUTPUT: «0.21646196␤»

[11:51] <jmerelo> p6: my $start=now; my @sums = ( (Bool.roll xx 1024 ) xx 2048).hyper.map( *.sum ); say now - $start;

[11:51] <camelia> rakudo-moar b22421e7e: OUTPUT: «0.43274324␤»

[11:52] *** bbkr joined
[12:02] *** flw left
[12:10] <jmerelo> moritz: This hyper is opening a world of possibilities. Thanks.

[12:13] <Kaiepi> unrelated, but why does running fcntl($*OUT.native-descriptor, 0) return -1 when running from a file, and something like 15 when run from the repl instead?

[12:16] <jmerelo> p6: say fcntl($*OUT.native-descriptor, 0)

[12:16] <camelia> rakudo-moar b22421e7e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    fcntl used at line 1␤␤»

[12:16] <jmerelo> p6: use NativeCall; say fcntl($*OUT.native-descriptor, 0)

[12:16] <camelia> rakudo-moar b22421e7e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    fcntl used at line 1␤␤»

[12:17] <Kaiepi> p6: use NativeCall; sub fcntl(int32, int32 --> int32); fcntl($*OUT.native-descriptor, 0)

[12:17] <camelia> rakudo-moar b22421e7e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤A unit-scoped sub definition is not allowed except on a MAIN sub;␤Please use the block form. If you did not mean to declare a unit-scoped sub,␤perhaps you accidentally placed a semicolon after routi…»

[12:17] <Kaiepi> p6: use NativeCall; sub fcntl(int32, int32 --> int32) is native { * }; fcntl($*OUT.native-descriptor, 0)

[12:17] <camelia> rakudo-moar b22421e7e: ( no output )

[12:17] *** |oLa| left
[12:17] <jmerelo> p6: use NativeCall; sub fcntl(int32, int32 --> int32) is native { * }; say fcntl($*OUT.native-descriptor, 0)

[12:17] <camelia> rakudo-moar b22421e7e: OUTPUT: «13␤»

[12:18] *** pierre_ joined
[12:18] <jmerelo> Kaiepi: probably a question for StackOverflow. I really have no idea.

[12:18] <jmerelo> Kaiepi: same as above. If a question goes unanswered here, it's better to go there. There are several perl6 answerers on duty, only asynchronously.

[12:19] *** |oLa| joined
[12:20] *** |oLa| left
[12:21] *** |oLa| joined
[12:22] *** pierre_ left
[12:29] *** hankache joined
[12:32] <Kaiepi> alright, thanks

[12:32] <[Coke]> presumably because $*OUT is wrapped in an object when dealing with the repl.

[12:32] * [Coke] checks.

[12:34] * [Coke] has weird presumptions, apparently.

[12:35] <[Coke]> backing up a step: what does $*OUT.native-descriptor return for you in both cases?

[12:35] <[Coke]> I get "1" here in both cases (indicating it's just the plain stdout)

[12:38] *** stmuk_ joined
[12:38] <[Coke]> I get 15 in a file, 132 in the REPL.

[12:39] <[Coke]> what OS are you on, OOC?

[12:40] *** stmuk left
[12:40] * [Coke] started out not thinking about what fcntl was actually doing here.

[12:45] *** releasable6 left
[12:45] *** releasable6 joined
[12:46] *** Ven`` joined
[12:46] *** mcmillhj joined
[12:48] *** pierre__ joined
[12:51] <Kaiepi> i'm on openbsd [Coke] 

[12:51] *** xtreak left
[12:53] <Kaiepi> 1 -> 0 in the file, 1 -> 15 in the repl

[12:53] <Kaiepi> *1 -> -1

[12:53] <lichtkind> mäsak thank but nevermind i found a way you just have to capsulate it in a submethod

[12:55] *** xtreak joined
[12:55] *** xtreak left
[13:00] <lichtkind> masak++

[13:03] *** dct joined
[13:07] *** pecastro joined
[13:07] *** Zoffix joined
[13:07] <Zoffix> Kaiepi: that sounds like a bug. I always get 1 on Linux

[13:07] <Kaiepi> damn

[13:08] <Zoffix> Why damn? Bugs are exciting \o/ :)

[13:08] <Kaiepi> true, this delays being able to write Editline though

[13:10] <Zoffix> Hm, -1 comes cause handle->body.ops->introspection gives false

[13:12] <Zoffix> Kaiepi: so you get false for $*OUT.t in REPL too?

[13:12] *** mcmillhj left
[13:13] <Kaiepi> nope, True

[13:13] <Zoffix> :S

[13:13] <Zoffix> ok, then that's not where it comes from :)

[13:13] <Zoffix> (the -1 I mean)

[13:15] *** mcmillhj joined
[13:16] <Zoffix> Well, I've no idea what I'm doing, but IIRC you know C, maybe you can figure out.

[13:16] <Zoffix> Kaiepi: it's basically coming from this function: https://github.com/MoarVM/MoarVM/blob/master/src/io/syncfile.c#L64

[13:16] *** cdg joined
[13:17] <Zoffix> Kaiepi: and the nqp op is mapped to this function: https://github.com/MoarVM/MoarVM/blob/master/src/io/io.c#L58-L72  

[13:17] <Kaiepi> thanks

[13:20] <El_Che> Kaiepi: https://i.imgflip.com/27fje7.jpg

[13:28] <Kaiepi> lol

[13:30] *** vcv joined
[13:34] *** Zoffix left
[13:35] <Geth> ¦ doc: maettu++ created pull request #1887: Hyper race methods: explain batch and degree

[13:35] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/1887

[13:38] *** Ven`` left
[13:40] *** khw joined
[13:42] *** Sauvin left
[13:54] *** abraxxa left
[13:54] *** robertle_ joined
[13:59] *** donpdonp left
[13:59] *** donpdonp joined
[13:59] *** Kaiepi left
[14:00] <lichtkind> masak, no i didnt found it my example would be: class C {has Int $.attr = 2; subset Pint of Int where {$_ > $.at()}; submethod at {$!attr}; method useit(Pint $a){say $a}}; C.new().useit(3)

[14:00] *** Kaiepi joined
[14:01] <lichtkind> p6: class C {has Int $.attr = 2; subset Pint of Int where {$_ > $.at()}; submethod at {$!attr}; method useit(Pint $a){say $a}}; C.new().useit(3)

[14:01] <camelia> rakudo-moar 20495f097: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable $.at used where no 'self' is available␤at <tmp>:1␤------> 032; subset Pint of Int where {$_ > $.at()7⏏5}; submethod at {$!attr}; method useit(P␤»

[14:01] <lichtkind> that is what i get too

[14:02] *** robertle_ left
[14:02] *** robertle_ joined
[14:12] *** maettu left
[14:14] *** skids joined
[14:16] *** Kaiepi left
[14:17] *** Ven`` joined
[14:23] *** Kaiepi joined
[14:35] *** zakharyas joined
[14:37] *** xi- left
[14:38] *** xi- joined
[14:51] *** Kaiepi left
[14:52] *** Kaiepi joined
[14:52] <Kaiepi> what great timing for my keyboard to go berserk

[14:53] <El_Che> there a limit on how much utf8 shortcuts it can takes ;)

[14:57] *** hankache left
[14:59] <[Coke]> m: class C { has Int $.attr = 2; submethod at {$!attr}; method useit(Int $a where * > self.at){say $a}}; C.new().useit(3)

[14:59] <camelia> rakudo-moar 20495f097: OUTPUT: «3␤»

[14:59] <[Coke]> I don't think you can have a dynamic reference like you're trying to get in the subset, so you have to put it into the sig.

[14:59] *** Kaiepi left
[15:00] <[Coke]> m: class C { has Int $.attr = 2; submethod at {$!attr}; method useit(Int $a where * > self.at){say $a}}; C.new().useit(3); C.new().useit(1);

[15:00] <camelia> rakudo-moar 20495f097: OUTPUT: «3␤Constraint type check failed in binding to parameter '$a'; expected anonymous constraint to be met but got Int (1)␤  in method useit at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:02] *** pierre__ left
[15:08] *** domidumont left
[15:11] *** Ven`` left
[15:14] *** sauvin joined
[15:17] *** Kaiepi joined
[15:18] <Kaiepi> yeah, my arrow keys are broken and my up key decided to spam constantly

[15:18] <Kaiepi> not fun to make stop

[15:19] *** ExtraCrispy joined
[15:22] <El_Che> hopefully it's not a laptop keyboard

[15:22] <El_Che> (and in that case not a mac)

[15:30] *** zakharyas left
[15:34] *** khisanth_ left
[15:47] *** khisanth_ joined
[15:49] *** domidumont joined
[15:56] <Kaiepi> it is, but it's a thinkpad

[15:56] <Kaiepi> 15 minute job to replace

[15:56] <timotimo> thinkpads are fantastic for this reason

[15:56] <Kaiepi> exactly

[15:57] <Kaiepi> i had an hp pavilion that was utter hell to repair at one point

[15:57] <Kaiepi> ~120 screws to remove to replace the keyboard

[15:58] <timotimo> ugh

[15:59] <Kaiepi> .tell zoffix, didn't end up being a bug, just differences in how openbsd handles fcntl that i wasn't aware of

[15:59] <yoleaux> Kaiepi: What kind of a name is "zoffix,"?!

[15:59] <Kaiepi> wait what's the command

[16:02] <timotimo> just no punctuation after the name

[16:03] <Kaiepi> .tell zoffix didn't end up being a bug, just differences in how openbsd handles fcntl that i wasn't aware of

[16:03] <yoleaux> Kaiepi: I'll pass your message to zoffix.

[16:03] <Kaiepi> thanks

[16:08] *** ExtraCrispy left
[16:10] *** pierre_ joined
[16:15] *** pierre_ left
[16:16] *** troys joined
[16:20] *** vcv left
[16:24] *** mcmillhj left
[16:27] *** aindilis left
[16:27] *** aindilis joined
[16:33] *** fzeffhj joined
[16:33] <fzeffhj> jmerelo , Kaiepi :

[16:33] <fzeffhj> m: use NativeCall; sub fcntl(int32, int32 --> int32) is native { * }; say fcntl($*OUT.native-descriptor, 0) xx 5

[16:33] <camelia> rakudo-moar 20495f097: OUTPUT: «(13 -1 -1 -1 -1)␤»

[16:33] <fzeffhj> m: use NativeCall; sub fcntl(int32, int32, int32 --> int32) is native { * }; say fcntl($*OUT.native-descriptor, 0, 0) xx 5

[16:33] <camelia> rakudo-moar 20495f097: OUTPUT: «(13 14 15 16 17)␤»

[16:33] *** fzeffhj left
[16:34] *** AlexDaniel joined
[16:38] *** mcmillhj joined
[16:38] <jmerelo> Still a bit perplexed with the inner workings of Channels and threads. Maybe you can help answering this stackoverflow question https://stackoverflow.com/questions/49577943/react-uses-a-single-thread-when-processing-a-channel

[16:40] <jnthn> jmerelo: The *entire point* of react/whenever is that one message is processed at a time

[16:40] <jnthn> If you want multiple workers, start them

[16:40] <jnthn> (start react in a loop for the amount of them you want)

[16:41] <jmerelo> jnthn: I thought it meant you *started* processing messages one at a time.

[16:41] <jmerelo> jnthn: I'll try that, but it didn't work... In fact, I did *start* inside the whenever block. Still only one thread.

[16:41] <Kaiepi> m: $*VM.osname

[16:41] <camelia> rakudo-moar 20495f097: ( no output )

[16:41] *** dct left
[16:41] <Kaiepi> m: say $*VM.osname

[16:41] <camelia> rakudo-moar 20495f097: OUTPUT: «linux␤»

[16:42] <jmerelo> jnthn: if I do start react whenever { do stuff } for ^10; still the same thing. Single thread.

[16:43] *** mcmillhj left
[16:43] <jnthn> And if it's (start react whenever { do stuff }) for ^10 ?

[16:43] <Kaiepi> going off the man pages the linux version of fcntl doesn't care about making the dest fs use the source fd's flags

[16:44] *** dct joined
[16:44] *** |oLa| left
[16:44] <jmerelo> jnthn: checking that

[16:45] <jmerelo> jnthn: that did the trick. Thanks. 

[16:45] <jmerelo> jnthn: please answer anyway at stackoverflow so that we can all give you a bit of karma :-)

[16:46] <jnthn> Will do, still hunting a tricky bug at the moment :)

[16:46] *** mcmillhj joined
[16:47] <jmerelo> jnthn: and here I have my concurrent evolutionary algorithm running thanks to you. You're awesome.

[16:47] <jnthn> Yay. :) Welcome :)

[16:51] <lichtkind> jnthn, is there a way to created subtype that uses data of class attribute (got allways no self accessable) ?

[16:52] <jnthn> No

[16:58] <Kaiepi> is there a way to force a library's symbols to get loaded before another's, when the latter depends on them?

[16:59] <Kaiepi> what i mean is moar complains that symbols don't exist for the latter if i try to load it

[16:59] *** Geth left
[17:00] *** Geth joined
[17:00] *** ChanServ sets mode: +v Geth

[17:00] <jmerelo> Kaiepi: example?

[17:00] <lichtkind> jnthn++ thanks (even it does make me decisevly not happy)

[17:02] <Kaiepi> https://hastebin.com/acemijured.coffeescript

[17:03] <Kaiepi> editline wants some symbols from curses since it expects programs using it to be compiled with both depending on how editline's built

[17:04] <jmerelo> Kaiepi: But it seems like the problem is that the library is not loaded, not the order of loading... Isn't that what it says in line 11?

[17:04] <Kaiepi> yeah

[17:04] <Kaiepi> it still needs to get loaded before editline though

[17:06] <jnthn> Kaiepi: Perhaps just try to call a symbol from that library for force it to be loaded

[17:07] *** th324 joined
[17:08] *** rindolf left
[17:09] *** maettu joined
[17:09] <AlexDaniel> maettu: o/

[17:13] *** vcv joined
[17:17] *** st_elmo joined
[17:17] *** wamba left
[17:21] *** th324 left
[17:21] *** pierre_ joined
[17:24] *** g- left
[17:24] *** [particle]1 left
[17:25] *** [particle] joined
[17:25] *** dct left
[17:25] *** pierre_ left
[17:33] <Geth> ¦ doc/master: 5 commits pushed by (Matthias Bloch)++, (Jonathan Worthington)++, (Aleks-Daniel Jakimenko-Aleksejev)++

[17:33] <Geth> ¦ doc/master: 5752249f3c | notes about hyper/race

[17:33] <Geth> ¦ doc/master: b126c6d498 | Some formatting and explanation tweaks

[17:33] <Geth> ¦ doc/master: 1b09195216 | make links

[17:33] <Geth> ¦ doc/master: 582db6b0a9 | clarify workers to limit cores

[17:33] <Geth> ¦ doc/master: 90714f11fd | Merge pull request #1887 from maettu/hyper_race_explain_batch_degree

[17:33] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/9156582edc98...90714f11fd45

[17:35] <AlexDaniel> squashable6: next

[17:35] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 6 days and ≈16 hours (2018-04-07 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[17:38] *** epony joined
[17:41] <jmerelo> AlexDaniel: is it going to be Rakudo-exclusive? Can we join in to work on the documentation?

[17:43] *** coverable6 left
[17:43] *** squashable6 left
[17:43] *** reportable6 left
[17:43] *** quotable6 left
[17:43] *** greppable6 left
[17:43] *** releasable6 left
[17:43] *** notable6 left
[17:43] *** undersightable6 left
[17:43] *** nativecallable6 left
[17:43] *** bloatable6 left
[17:43] *** benchable6 left
[17:43] *** bisectable6 left
[17:43] *** statisfiable6 left
[17:43] *** unicodable6 left
[17:43] *** committable6 left
[17:43] *** shareable6 left
[17:43] *** evalable6 left
[17:44] <AlexDaniel> jmerelo: well, every second month is a doc squashathon: https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[17:45] <AlexDaniel> you're free to work on docs ofc, but the point this time is to close testneeded tickets :)

[17:45] <[Coke]> (commits always welcome!)

[17:45] <AlexDaniel> buggable: tag testneeded

[17:45] <buggable> AlexDaniel, There are 48 tickets tagged with TESTNEEDED; See http://fail.rakudo.party/t/TESTNEEDED for details

[17:45] <AlexDaniel> + also: https://github.com/rakudo/rakudo/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Atestneeded

[17:45] <Kaiepi> jnthn that did the trick

[17:47] <Geth> ¦ doc: 2ab1c59411 | (Will "Coke" Coleda)++ | doc/Type/Iterable.pod6

[17:47] <Geth> ¦ doc: remove trailing whitespace

[17:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/2ab1c59411

[17:47] <Geth> ¦ doc: 0ab46fe702 | (Will "Coke" Coleda)++ | doc/Type/Iterable.pod6

[17:47] <Geth> ¦ doc: Prefer Ameringlish.

[17:47] <synopsebot> Link: https://doc.perl6.org/type/Iterable

[17:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0ab46fe702

[17:48] <jmerelo> AlexDaniel: OK. Might want to give it a try, anyway.

[17:49] *** nativecallable6 joined
[17:49] *** notable6 joined
[17:49] *** ChanServ sets mode: +v notable6

[17:49] *** greppable6 joined
[17:49] *** releasable6 joined
[17:49] *** bloatable6 joined
[17:49] *** committable6 joined
[17:49] *** evalable6 joined
[17:49] *** coverable6 joined
[17:49] *** quotable6 joined
[17:49] *** ChanServ sets mode: +v committable6

[17:49] *** ChanServ sets mode: +v evalable6

[17:49] *** ChanServ sets mode: +v coverable6

[17:49] *** ChanServ sets mode: +v quotable6

[17:49] *** reportable6 joined
[17:49] *** unicodable6 joined
[17:49] *** bisectable6 joined
[17:49] *** benchable6 joined
[17:49] *** ChanServ sets mode: +v unicodable6

[17:49] *** ChanServ sets mode: +v bisectable6

[17:49] *** ChanServ sets mode: +v benchable6

[17:49] *** squashable6 joined
[17:49] *** ChanServ sets mode: +v squashable6

[17:49] *** shareable6 joined
[17:49] *** ChanServ sets mode: +v shareable6

[17:50] *** statisfiable6 joined
[17:54] *** dct joined
[17:56] *** espadrine joined
[18:03] *** cdg left
[18:03] *** pharv joined
[18:04] *** pharv left
[18:05] *** pharv joined
[18:07] *** pharv_ joined
[18:09] *** dct left
[18:10] *** pharv left
[18:20] *** domidumont left
[18:20] *** rindolf joined
[18:23] *** amalia___ left
[18:24] *** zakharyas joined
[18:33] * El_Che wishes that p6 would pick the best syntax for task instead of going out of the way to backwards compatible with p5 (see: https://github.com/perl6/doc/issues/1380), or compatible with itself (see the key value combinations)

[18:34] <El_Che> mostly is not about TIMTOWTWDY, but about having 5 spellings for the same word

[18:34] *** Bowlslaw joined
[18:35] <El_Che> :127foo is like the phone message spelling in my eyes

[18:36] <Bowlslaw> does perl have a 'flag' reading function, like opt()? so if i call my script with a cmd line argument and a flag?

[18:36] <yoleaux> 29 Mar 2018 23:03Z <Zoffix> Bowlslaw: well, first `$dbh.prepare("select price from $table")` is an unsafe statement. You need to quote $table properly. I don't use DBIish, but there should be some method to quote stuff (placeholders might work too). As for the sum, `my $total = $sth.allrows».head.sum`

[18:36] <lizmat> :2nd :3rd  :4th   # read better

[18:36] <Bowlslaw> ???

[18:36] <evalable6> Bowlslaw, rakudo-moar 20495f097: OUTPUT: «Stub code executed␤  in block <unit> at /tmp/o68Dey4P6L line 1␤»

[18:36] <timotimo> :D

[18:36] <Bowlslaw> ahh what's happening

[18:36] <El_Che> lizmat: if you're 14and a lousy typist :)

[18:37] <timotimo> say "what if i forgot to put a m: in front?"

[18:37] <timotimo> hum?

[18:37] <lizmat> !!!

[18:37] <lizmat> ???

[18:37] <evalable6> lizmat, rakudo-moar 20495f097: OUTPUT: «Stub code executed␤  in block <unit> at /tmp/LlkxHgj1hK line 1␤»

[18:37] <timotimo> Bowlslaw: evalable6 judges messages that look like perl6 code to be "accidentally forgot to put an m: in front"

[18:37] <lizmat> weird

[18:37] <timotimo> so it just helpfully runs it for you instead

[18:37] <timotimo> say 99 + 1

[18:37] <evalable6> timotimo, rakudo-moar 20495f097: OUTPUT: «100␤»

[18:38] <El_Che> lizmat: :2nd is cute but it does not look useful. You really want a pair met the key nd???

[18:39] <lizmat> that part is where the developer gets tortured  :-)

[18:39] <El_Che> paying any price in complexity for that is weird

[18:39] <El_Che> lizmat: it tortures the readers that has to know all the variations

[18:40] <timotimo> what i really like is for things like datetime.later; :10seconds, :5days

[18:40] <timotimo> that reads really good to me

[18:40] <Bowlslaw> lol

[18:41] <timotimo> it's a syntactical feature that you can use when it makes sense, but don't have to use anywhere it wouldn't

[18:42] <El_Che> Pair.new('key', 'value'); 'key' => 'value'; :key<value>; :foo(127); :127foo; :key;:!key; 

[18:42] <El_Che> maybe I am getting old :)

[18:43] <El_Che> timotimo: it's not the shortcut itself, but the added complexity in an already complex language

[18:43] <El_Che> it adds up

[18:43] <timotimo> the straw that broke the butterfly's back?

[18:44] <El_Che> hehe

[18:44] <El_Che> timotimo: perl 5 is simple in comparison :)

[18:46] <Bowlslaw> ???

[18:46] <evalable6> Bowlslaw, rakudo-moar 20495f097: OUTPUT: «Stub code executed␤  in block <unit> at /tmp/Uxh61dspAq line 1␤»

[18:46] <lizmat> m: dd Pair.new(:key<key>, :value<value>)

[18:46] <camelia> rakudo-moar 20495f097: OUTPUT: «:key("value")␤»

[18:46] <Bowlslaw> why is '???' perl code?

[18:46] <Bowlslaw> O_o

[18:47] <lizmat> m: dd ???

[18:47] <camelia> rakudo-moar 20495f097: OUTPUT: «Stub code executed␤  in block <unit> at <tmp> line 1␤0␤»

[18:47] <El_Che> dd ...

[18:47] <lizmat> hmmm...

[18:47] <El_Che> dd {...}

[18:47] <evalable6> El_Che, rakudo-moar 20495f097: OUTPUT: «-> ;; $_? is raw { #`(Block|94792552303488) ... }␤»

[18:47] <El_Che> dd {???}

[18:47] <lizmat> Bowlslaw: https://docs.perl6.org/routine/%3F%3F%3F

[18:47] <evalable6> El_Che, rakudo-moar 20495f097: OUTPUT: «-> ;; $_? is raw { #`(Block|94830811845696) ... }␤»

[18:47] <timotimo> there's ???, !!! and ... that you can put in code that doesn't yet do something. one of them notes, one of them warns, one of them throws ... i think?

[18:48] <timotimo> m: ??? "oh my"

[18:48] <camelia> rakudo-moar 20495f097: OUTPUT: «oh my␤  in block <unit> at <tmp> line 1␤»

[18:51] <Bowlslaw> oh, haha, cool

[18:52] *** darutoko left
[18:52] <Bowlslaw> i like the #| comment

[18:55] *** st_elmo left
[19:06] *** vcv left
[19:11] *** dct joined
[19:21] <Guest14802> I'm confused by this line https://github.com/maros/oarm-p6/blob/master/lib/Oarm.pm6#L21

[19:21] <Guest14802> oh heck

[19:22] *** Guest14802 is now known as Altreus

[19:22] *** pierre_ joined
[19:22] <Altreus> uh what's my nickserv password

[19:22] *** Altreus is now known as Guest66879

[19:22] <Ulti> *******

[19:23] <Guest66879> um

[19:23] <Guest66879> weechat has done this automatically since time began

[19:23] <Guest66879> and I can't work out how :D

[19:24] <lizmat> Altreus: it show that the "is oarm_table" trait on a class mixes in the Oarm::TableHOW role into the HOW of that class

[19:24] <Guest66879> I'm confused by the use of ^mixin on something that's already a HOW

[19:24] <Guest66879> is it a metametaobject?

[19:25] *** tomaw_ is now known as tomaw

[19:25] <timotimo> yeah, that'd be one extra .HOW

[19:25] <lizmat> yup, it calls the method "mixin" on the HOW of the classHOW

[19:25] <lizmat> .oO( Perl 6 is turtles all the way down )

[19:25] <timotimo> but yeah, you want to change the HOW, so you add something to it via its own HOW

[19:26] *** Guest66879 is now known as Altreus

[19:26] *** Altreus left
[19:26] *** Altreus joined
[19:26] <Altreus> There we go

[19:26] *** vike left
[19:26] <timotimo> was it hunter2?

[19:26] <Bowlslaw> lol

[19:26] *** pierre_ left
[19:26] <Altreus> It might have been once but it's not now :P

[19:27] <Altreus> OK so it is intentionally changing the howhow

[19:27] <Altreus> I just need to understand better

[19:27] <lizmat> hmmm better phrased as: it's changing the HOW by calling a method from the HOW.HOW

[19:27] <Altreus> back to the docs :)

[19:28] <Altreus> I need to better understand the metaobject to understand what it means at 2 cuils

[19:28] <Altreus> so I'mma read that

[19:28] <lizmat> Altreus++

[19:31] <[Coke]> buh. https://github.com/perl6/doc/blob/coke/build/htmlify.p6#L164-L168 is dying with "Cannot find method 'Nil' on object of type List" on the require call there. I swear this worked the last time I poked at this (probably last rakudo release)

[19:41] *** zakharyas left
[19:44] <Altreus> OK I understand to some extent the concept of metaclasses and I think I know what might happen if you mess with the metametaclass, but I don't really understand the difference between the methods in Oauth::Table and those in Oauth::TableHOW (except that the latter is mixed into the HOWHOW when I declare a table)

[19:44] <Altreus> I mean this could be one of those decisions that's TIMTOWTDI

[19:44] <Altreus> I guess since it's incomplete it's also unclear

[19:45] <Altreus> I'm just wondering why put it all in TableHOW instead of just doing it right there in the trait_mod

[19:45] *** comborico joined
[19:45] <Altreus> now I ask, I realise that's a common question about normal programming and the answer is reuse

[19:46] <Altreus> I may be rubber-ducking slightly, sorry :)

[19:46] *** dct left
[19:46] <lizmat> .oO( some rubber ducks might learn from this as well :-)

[19:53] *** kurahaupo joined
[19:53] <Altreus> elsewhere we can see my @oarm_columns = self.HOW.oarm_columns().list;

[19:53] <Altreus> I suppose the author considered the structure of the table to be meta

[19:55] <Altreus> I think I can dig it

[19:56] *** Kaypie joined
[19:56] *** Kaiepi left
[20:00] *** Kaypie left
[20:00] *** Kaiepi joined
[20:01] *** dct joined
[20:02] *** Kaiepi left
[20:03] *** Kaiepi joined
[20:12] *** cdg joined
[20:14] <Geth> ¦ doc/master: 4 commits pushed by (Ronald Schmidt)++

[20:14] <Geth> ¦ doc/master: ee7cf1c9c6 | Mention attribute mutators by Proxy and refer to mutators.t in roast

[20:14] <Geth> ¦ doc/master: 7abcd9ad40 | Update Language/objects.pod6 to simplify explanation of mutator methods and give example as requested change.

[20:14] <Geth> ¦ doc/master: 89b0310513 | Update objects.pod6 with further refinements, simplification, clarification of section on attribute mutator methods.

[20:14] <Geth> ¦ doc/master: 86e1d3b8c8 | Merge pull request #1874 from ronaldxs/mention-proxy-attribute-mutator

[20:14] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/0ab46fe7022a...86e1d3b8c8ee

[20:17] *** cdg left
[20:18] <Altreus> I think I have reached the level of my understanding because I don't know where Oauth::X::Record comes from or if it's just not done yet

[20:18] *** pharv_ left
[20:19] *** mcmillhj left
[20:19] <Altreus> oh I found it

[20:19] <Altreus> wtf ack

[20:20] <Altreus> xD I acked for Oauth

[20:20] *** pharv joined
[20:21] *** sauvin left
[20:22] *** Kaiepi left
[20:23] *** vcv joined
[20:23] *** Kaiepi joined
[20:25] *** Kaiepi left
[20:26] *** Kaiepi joined
[20:27] *** vcv left
[20:27] <Altreus> this has also taught me how to autogenerate a resultset class for a result type

[20:30] *** jmerelo left
[20:32] *** mcmillhj joined
[20:35] *** sena_kun left
[20:36] *** sena_kun joined
[20:36] *** sena_kun left
[20:39] *** mcmillhj left
[20:40] *** cdg_ joined
[20:47] *** pharv left
[20:47] *** pharv joined
[20:53] *** Kaiepi left
[20:53] *** Kaiepi joined
[21:05] *** skids left
[21:15] *** cdg_ left
[21:15] *** pierre joined
[21:17] *** pharv left
[21:18] *** pharv joined
[21:20] *** pierre left
[22:02] <Geth> ¦ whateverable: 9b747bc43e | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[22:02] <Geth> ¦ whateverable: Uncomment now passing tests

[22:02] <Geth> ¦ whateverable: 

[22:02] <Geth> ¦ whateverable: These tests were SEGV-ing because of a rakudo bug. It is now fixed.

[22:02] <Geth> ¦ whateverable: See https://github.com/rakudo/rakudo/issues/1660#issuecomment-377584146

[22:02] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/9b747bc43e

[22:07] *** cdg joined
[22:10] *** pharv left
[22:24] *** kurahaupo_ joined
[22:27] *** wamba joined
[22:27] *** kurahaupo left
[22:30] <Geth> ¦ whateverable: 1d76409d4e | (Aleks-Daniel Jakimenko-Aleksejev)++ | t/benchable.t

[22:30] <Geth> ¦ whateverable: Bump the timeout a little

[22:30] <Geth> ¦ whateverable: 

[22:30] <Geth> ¦ whateverable: This is actually a bug in benchable (#299), as it uncompresses the

[22:30] <Geth> ¦ whateverable: build for every iteration (instead of uncompressing just once). Old

[22:30] <Geth> ¦ whateverable: revisions (e.g. 2015.12^) are now in long-term storage mode, so it

[22:30] <Geth> ¦ whateverable: takes more time. Bumping the timeout just a little bit (10s is

[22:30] <Geth> ¦ whateverable: default) makes the test pass.

[22:30] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/1d76409d4e

[22:39] *** kurahaupo_ left
[22:39] *** kurahaupo joined
[22:41] *** giraffe left
[22:47] *** cdg left
[22:48] *** cdg joined
[22:48] *** rindolf left
[22:49] *** kurahaupo left
[22:50] *** kurahaupo joined
[22:50] *** pharv joined
[22:54] *** Bowlslaw left
[22:54] *** cdg left
[23:03] *** kurahaupo left
[23:04] *** kurahaupo joined
[23:05] *** lichtkind left
[23:07] *** skids joined
[23:13] *** comborico left
[23:15] *** pierre joined
[23:16] <Kaiepi> took me a little too long to notice i could just abstract this so people don't have to deal with flags manually https://hastebin.com/erotilotej.pl

[23:17] *** lichtkind joined
[23:17] *** kurahaupo left
[23:18] *** kurahaupo joined
[23:19] <Kaiepi> i'll probably just give the flags their own methods instead of this mess

[23:20] *** pierre left
[23:20] *** [particle]1 joined
[23:21] *** [particle] left
[23:30] *** kurahaupo left
[23:30] *** kurahaupo joined
[23:41] *** kurahaupo left
[23:42] *** kurahaupo joined
[23:44] *** lichtkind left
[23:45] *** [particle] joined
[23:45] *** giraffe joined
[23:45] *** [particle]1 left
[23:51] *** dct left
[23:53] *** markong left
[23:56] *** kurahaupo left
