[00:00] <Bowlslaw> AlexDaniel: As far as I can tell, it waits on a Supply, and...does the code you type whenever the stuff in the whenever block happens

[00:00] <AlexDaniel> if I had to summarize it in one sentence, I'd say that it does sequential processing of asynchronous events

[00:00] <AlexDaniel> but I'm not sure if others understand what I try to say by that

[00:01] <AlexDaniel> and if it's the right way to explain it

[00:01] <Bowlslaw> it's easier then typing out .tap and all that crap

[00:01] <Bowlslaw> which i don't really get at all

[00:02] <AlexDaniel> well, more importantly it .taps do something completely different

[00:02] <AlexDaniel> s/it//

[00:02] <Bowlslaw> o

[00:02] <Bowlslaw> ok, well

[00:02] <AlexDaniel> m: Promise.in(1).tap: { sleep ‚àû }; Promise.in(2).tap: { say ‚ÄòIt taps!‚Äô; exit }

[00:02] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´No such method 'tap' for invocant of type 'Promise'. Did you mean any of these?‚ê§    Map‚ê§    map‚ê§‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[00:02] <Bowlslaw> i don't know

[00:03] <AlexDaniel> m: Promise.in(1).Supply.tap: { sleep ‚àû }; Promise.in(2).Supply.tap: { say ‚ÄòIt taps!‚Äô; exit }

[00:03] <camelia> rakudo-moar 4bdb9787d: ( no output )

[00:03] <AlexDaniel> m: Promise.in(1).Supply.tap: { sleep ‚àû }; Promise.in(2).Supply.tap: { say ‚ÄòIt taps!‚Äô; exit }; sleep ‚àû

[00:03] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´It taps!‚ê§¬ª

[00:04] <AlexDaniel> Bowlslaw: fwiw here's a cool react example: https://docs.perl6.org/type/Proc::Async

[00:05] *** jrra joined
[00:05] <Bowlslaw> moritz has a cool example in his Perl 6 Fundamentals book using Proc::Async 

[00:15] *** BenGoldberg joined
[00:21] <AlexDaniel> Bowlslaw: I created this ticket D#2135

[00:21] <synopsebot> D#2135 [open]: https://github.com/perl6/doc/issues/2135 [docs] So what the hell is react/whenever

[00:23] <Bowlslaw> haahhaha

[00:24] <Bowlslaw> i

[00:24] <Bowlslaw> I didn't learn it from the docs, even though i've read them multiple times

[00:24] <Bowlslaw> jnthn showed me a piece of code as an example

[00:28] *** MasterDuke joined
[00:36] <tobs> re: react whenever. I found this while tracing the sources. It's reassuring: https://github.com/rakudo/rakudo/blob/master/src/core/Supply.pm6#L2033

[00:37] <Bowlslaw> lol

[00:57] *** markoong left
[00:58] *** markoong joined
[00:59] *** Xliff left
[01:00] <Bowlslaw> AlexDaniel: Can you tell me why this doesn't work? https://pastebin.com/0ExeaCZD

[01:00] <Bowlslaw> it gets the links on the initial page, but then it doesn't get any more

[01:02] <Bowlslaw> i forgot a line in that paste but it still doesn't work

[01:03] <AlexDaniel> which line? :)

[01:03] * AlexDaniel is installing DOM::Tiny

[01:03] *** markoong left
[01:03] <Bowlslaw> hehe

[01:03] <Bowlslaw> return if $depth <= 0;

[01:04] <Bowlslaw> as the first line of the sub

[01:04] <Bowlslaw> it just keeps getting the initial link over and over

[01:05] <Bowlslaw> well, it grabs the initial link for whatever the $depth value is

[01:06] <AlexDaniel> Bowlslaw: but that's because it finds a link to / on every page

[01:06] <AlexDaniel> right?

[01:08] <AlexDaniel> Bowlslaw: remove ‚Äúwhile $depth ‚â• 0 {‚Äù line

[01:09] <AlexDaniel> Bowlslaw: this works: https://gist.github.com/AlexDaniel/50fcc38251c92995e3776237ed89eb0e

[01:09] <AlexDaniel> I mean, it crawls

[01:09] <AlexDaniel> it does die a bit later because of something else in HTTP::UserAgent, but you can probably debug that separately

[01:11] <Bowlslaw> hmmmmm

[01:11] <Bowlslaw> oh yeah...

[01:12] <Bowlslaw> I must've forgotten to remove that bit from earlier

[01:12] <Bowlslaw> @_@

[01:12] <Bowlslaw> thanks

[01:13] <Bowlslaw> oh i see what i did to make it die

[01:14] <Bowlslaw> @_@

[01:17] <benjikun> AlexDaniel: yeah, the doc page on concurrency could be better for newbies

[01:42] <Bowlslaw> AlexDaniel: I suppose I should clear the @links array before I use it again...

[01:42] <Bowlslaw> hahahhahaha

[01:42] <AlexDaniel> Bowlslaw: why?

[01:43] <AlexDaniel> it's always empty when crawl is entered

[01:43] *** ChoHag left
[01:43] <Bowlslaw> hmmmm

[01:44] <Bowlslaw> well it looks like it is starting from the beginning every time

[01:45] <Bowlslaw> LOL it crawls the entire github repo

[01:46] <Bowlslaw> oh wait, that's just me being silly

[01:47] <Bowlslaw> it looks like it works fine except for what you mentioned

[01:51] <Bowlslaw> hmm

[01:51] *** ChoHag joined
[01:54] <AlexDaniel> Bowlslaw: honestly, if I were you I'd just use run(:out, ‚Äòcurl‚Äô, ‚Ä¶).out.slurp

[01:55] <AlexDaniel> instead of HTTP::UserAgent

[01:55] <Bowlslaw> LOL

[01:55] <Bowlslaw> whaaaaat

[01:55] <AlexDaniel> that's obviously not portable, but it's much faster and will work better

[01:55] <Bowlslaw> hmmmmmmmm

[01:56] <AlexDaniel> buggable: eco curl

[01:56] <buggable> AlexDaniel, Found 2 results: LibCurl, Net::Curl. See https://modules.perl6.org/s/curl

[01:56] <AlexDaniel> ‚Üë also something that can be considered

[01:57] <Bowlslaw> cool

[01:57] <Bowlslaw> yet more rewrites, haha

[01:58] <AlexDaniel> Bowlslaw: actually, I tried rewriting your script like this: https://gist.github.com/AlexDaniel/4b0f0ac86840290b80e59221a3e459b0

[01:58] <AlexDaniel> but I stumbled upon this regression: https://github.com/rakudo/rakudo/issues/2008

[01:58] <AlexDaniel> and I also don't know when to close the channel :)

[02:00] <Bowlslaw> hmmm

[02:00] <Bowlslaw> this is much more difficult than i thought it would be

[02:01] *** aborazmeh joined
[02:01] *** aborazmeh left
[02:01] *** aborazmeh joined
[02:03] <AlexDaniel> Bowlslaw: actually, it's not, can you try this? https://gist.github.com/AlexDaniel/d268f439499c18b7fbfd9bbb854a1c76

[02:04] <AlexDaniel> you'd need to catch exceptions properly, but otherwise it crawls in multiple threads

[02:05] <Bowlslaw> hmm

[02:06] <Bowlslaw> oh eah, i forgot about exceptions

[02:06] <Bowlslaw> i definately want to implement those properly

[02:06] <AlexDaniel> hm‚Ä¶ but again, the channel is never closed :)

[02:07] <Bowlslaw> why does that matter?

[02:07] <AlexDaniel> Bowlslaw: once the website is fully crawled, the program will just sleep forever

[02:07] <Bowlslaw> hmmm

[02:10] <Geth> ¬¶ doc: 8cefbeffb6 | (Will "Coke" Coleda)++ | doc/Language/glossary.pod6

[02:10] <Geth> ¬¶ doc: whitespace

[02:10] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/8cefbeffb6

[02:10] <synopsebot> Link: https://doc.perl6.org/language/glossary

[02:11] <Bowlslaw> gotta learn about your code

[02:11] <Bowlslaw> some things i haven't seen, but you did keep the algorithm it seems

[02:12] *** imcsk8_ joined
[02:13] *** dogbert2 joined
[02:15] *** imcsk8 left
[02:16] <Bowlslaw> AlexDaniel: does my script run multi-threaded?

[02:16] <Bowlslaw> how can I verify myself?

[02:16] <AlexDaniel> Bowlslaw: which one?

[02:16] *** dogbert17 left
[02:18] <Bowlslaw> https://github.com/Bowlslaw/webcrawler/blob/master/crawler.p6

[02:19] <AlexDaniel> Bowlslaw: no

[02:19] *** john_parr joined
[02:20] <Bowlslaw> then what is the react/whenever doing?

[02:20] *** nopl left
[02:20] <AlexDaniel> Bowlslaw: in this case nothing important

[02:21] <AlexDaniel> Bowlslaw: you can also write my $response = await $ua.get($url);

[02:21] <AlexDaniel> ah actually, you don't even need that

[02:21] <AlexDaniel> just my $response = $ua.get($url); will do

[02:21] *** nopl joined
[02:22] <AlexDaniel> if you want workers you'll need to `start` some, or use hyper/race

[02:26] <Bowlslaw> @_@

[02:26] <Bowlslaw> this is not clear at all...

[02:27] <AlexDaniel> Bowlslaw: `react` is just a way of processing events, it does not start new threads by itself

[02:33] <Bowlslaw> hmm

[02:33] <AlexDaniel> Bowlslaw: here's another crude example that does it using more than one thread: https://gist.github.com/AlexDaniel/521c27e47fecda42297f39d3a528718a

[02:33] <AlexDaniel> note that all I did was `start crawl($link, $file, $depth - 1);`

[02:34] <AlexDaniel> semaphore stuff is in there to prevent hundrends of threads working at the same time

[02:35] <AlexDaniel> maybe someone more knowledgeable can propose an easier way to do that?

[02:54] *** aborazmeh left
[03:01] *** stmuk_ joined
[03:04] *** stmuk left
[03:18] *** Bowlslaw left
[03:30] *** CoolGuy18 joined
[03:30] <CoolGuy18> hello

[03:30] <CoolGuy18> p6: say 3;

[03:30] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´3‚ê§¬ª

[03:31] <CoolGuy18> p6: say 'hello';

[03:31] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´hello‚ê§¬ª

[03:31] <CoolGuy18> p6: say 'hell\no';

[03:31] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´hell\no‚ê§¬ª

[03:31] <CoolGuy18> p6: say "hell\no";

[03:31] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´hell‚ê§o‚ê§¬ª

[03:31] <CoolGuy18> bye

[03:31] *** CoolGuy18 left
[03:32] <AlexDaniel> byyyyyyeee

[03:32] <AlexDaniel> :)

[03:36] *** Khisanth left
[03:49] *** kaare__ left
[03:52] *** Khisanth joined
[03:56] *** fatguy joined
[04:02] <AlexDaniel> squashable6: next

[04:02] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in 4 days and ‚âà5 hours (2018-07-07 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[04:16] <fatguy> i've been running this sample script https://pastebin.com/8gwgjaB3 for more than 10 days on linux system with 4GB memory

[04:18] <fatguy> it basically just write to file with it cpu and memory usage. memory usage increase 1% daily on average

[04:18] <AlexDaniel> fatguy: is it linear?

[04:38] <AlexDaniel> fatguy: but anyway, can you create a ticket?

[04:38] <AlexDaniel> huggable: rakudobug

[04:38] <huggable> AlexDaniel, Report bugs on https://github.com/rakudo/rakudo/issues/new    If you don't have access to GitHub, you can email your report to [email@hidden.address] . See also: https://github.com/rakudo/rakudo/wiki/rt-introduction

[04:38] <fatguy> AlexDaniel: not constantly, here are from 20 -30 June : 0.9 1.0 0.9 1.3 1.0 1.3 0.9 0.9 1.4 0.8 1.1 (on average 1.1%)

[04:38] <fatguy> ok

[04:43] *** xtreak joined
[04:52] *** curan joined
[04:54] *** sno left
[04:56] *** lizmat left
[05:01] *** kaare__ joined
[05:05] *** jmerelo joined
[05:20] *** BenGoldberg left
[05:29] *** wamba joined
[05:36] <jmerelo> m: say GLOBALish.WHO

[05:36] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´GLOBAL‚ê§¬ª

[05:36] <jmerelo> m: say GLOBALish.perl

[05:36] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´GLOBAL‚ê§¬ª

[05:37] <jmerelo> m: say $*REPO.^mro

[05:37] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´((Installation) (Any) (Mu))‚ê§¬ª

[05:46] *** fatguy left
[06:13] <perlawhirl> hi perlers

[06:13] <perlawhirl> this seems inconsistent

[06:13] <perlawhirl> m: <0000 0001>¬ª.comb.say 

[06:13] *** charsbar left
[06:13] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´(() (0 0 0 1))‚ê§¬ª

[06:14] <perlawhirl> why is IntStr 0 special

[06:14] <jmerelo> perlawhirl: hum

[06:14] <perlawhirl> bisectable6: <0000 0001>¬ª.comb.say 

[06:14] <bisectable6> perlawhirl, Bisecting by output (old=2015.12 new=4bdb978) because on both starting points the exit code is 0

[06:14] <bisectable6> perlawhirl, bisect log: https://gist.github.com/5d15691f2e5bef5d01b654aed2305ffe

[06:14] <bisectable6> perlawhirl, (2017-03-11) https://github.com/rakudo/rakudo/commit/d444f655fd82df4b71f29c0a04fc2626bc76be53

[06:14] <jmerelo> m: <0000 0001>.map: .comb.say

[06:14] <AlexDaniel> 6c: <0000 0001>¬ª.comb.say 

[06:14] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´No such method 'comb' for invocant of type 'Any'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[06:15] <jmerelo> m: <0000 0001>.map: *.comb.say

[06:15] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´()‚ê§(0 0 0 1)‚ê§¬ª

[06:15] <committable6> AlexDaniel, https://gist.github.com/a98a4d6ca940bf5a1735fd3690f66386

[06:15] <AlexDaniel> c: d444f655^,d444f655 <0000 0001>¬ª.comb.say 

[06:15] <committable6> AlexDaniel, ¬¶d444f655^: ¬´((0 0 0 0) (0 0 0 1))‚ê§¬ª ¬¶d444f65: ¬´(() (0 0 0 1))‚ê§¬ª

[06:16] <AlexDaniel> perlawhirl: yeah, looks like regression to me

[06:16] <AlexDaniel> perlawhirl: can you file a ticket?

[06:16] <perlawhirl> sure

[06:17] <perlawhirl> the things you find when trying to solve a childrens puzzle, haha

[06:26] *** sno joined
[06:29] *** robertle joined
[06:33] *** fake_space_whale left
[06:41] *** damnlie left
[06:43] *** damnlie joined
[06:53] <masak> perlawhirl: what puzzle is that, ooc?

[06:55] *** lookatme joined
[06:55] *** lookatme_q joined
[06:55] <jmerelo> m: my %hash = { foo => { bar => baz}}; say %hash

[06:55] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´5===SORRY!5===‚ê§Undeclared routine:‚ê§    baz used at line 1. Did you mean 'bag'?‚ê§‚ê§Other potential difficulties:‚ê§    Useless use of hash composer on right side of hash assignment; did you mean := instead?‚ê§    at <tmp>:1‚ê§    ------> 3my‚Ä¶¬ª

[06:55] <jmerelo> m: my %hash = { foo => { bar => 'baz'}}; say %hash

[06:55] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of hash composer on right side of hash assignment; did you mean := instead?‚ê§    at <tmp>:1‚ê§    ------> 3my %hash = { foo => { bar => 'baz'}}7‚èè5; say %hash‚ê§{foo => {bar => baz}}‚ê§¬ª

[06:56] <jmerelo> m: my %hash = { foo => { 'bar' => 'baz'}}; say %hash

[06:56] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of hash composer on right side of hash assignment; did you mean := instead?‚ê§    at <tmp>:1‚ê§    ------> 3my %hash = { foo => { 'bar' => 'baz'}}7‚èè5; say %hash‚ê§{foo => {bar => baz}}‚ê§¬ª

[06:56] <jmerelo> m: my %hash = { foo => { 'bar' => 'baz'} }; say %hash

[06:56] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of hash composer on right side of hash assignment; did you mean := instead?‚ê§    at <tmp>:1‚ê§    ------> 3my %hash = { foo => { 'bar' => 'baz'} }7‚èè5; say %hash‚ê§{foo => {bar => baz}}‚ê§¬ª

[06:56] <jmerelo> m: my %hash = { foo =>  'bar' => 'baz' }; say %hash

[06:56] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of hash composer on right side of hash assignment; did you mean := instead?‚ê§    at <tmp>:1‚ê§    ------> 3my %hash = { foo =>  'bar' => 'baz' }7‚èè5; say %hash‚ê§{foo => bar => baz}‚ê§¬ª

[06:57] *** lookatme_q left
[06:59] <jmerelo> m: my %hash = ( foo =>  'bar' => 'baz' ); say %hash

[06:59] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´{foo => bar => baz}‚ê§¬ª

[07:00] <lookatme> m: my %hash = %{ foo => { 'bar' => 'baz' } }; say %hash

[07:00] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´{foo => {bar => baz}}‚ê§¬ª

[07:01] <lookatme> m: my %hash := { foo => { 'bar' => 'baz' } }; say %hash

[07:01] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´{foo => {bar => baz}}‚ê§¬ª

[07:01] <lookatme> m: my %hash = { foo => { 'bar' => 'baz' } }; say %hash

[07:01] <camelia> rakudo-moar 4bdb9787d: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of hash composer on right side of hash assignment; did you mean := instead?‚ê§    at <tmp>:1‚ê§    ------> 3my %hash = { foo => { 'bar' => 'baz' } }7‚èè5; say %hash‚ê§{foo => {bar => baz}}‚ê§¬ª

[07:01] <lookatme> :)

[07:04] *** |oLa| joined
[07:13] *** domidumont joined
[07:18] *** domidumont left
[07:18] *** domidumont joined
[07:27] *** Xliff joined
[07:37] <Geth> ¬¶ doc: 155cbd0ed6 | (JJ Merelo)++ | doc/Language/hashmap.pod6

[07:37] <Geth> ¬¶ doc: Improves text on hash assignment

[07:37] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/155cbd0ed6

[07:37] <synopsebot> Link: https://doc.perl6.org/language/hashmap

[07:38] *** pmurias joined
[07:40] *** xtreak left
[07:42] *** wamba left
[07:42] *** xtreak joined
[07:46] *** xtreak left
[07:47] *** spycrab0 left
[07:48] *** kaare__ is now known as kaare_

[07:50] *** zakharyas joined
[07:52] *** tphilipp joined
[07:52] *** tphilipp is now known as disc0rd_

[07:53] *** tphilipp joined
[07:53] *** tphilipp left
[08:01] *** scimon joined
[08:09] *** xtreak joined
[08:10] *** domidumont left
[08:12] *** wamba joined
[08:12] *** domidumont joined
[08:12] *** xtreak_ joined
[08:15] *** xtreak left
[08:18] *** disc0rd_ left
[08:35] *** Ven` joined
[08:39] *** sena_kun joined
[08:47] *** hami joined
[08:55] *** hami left
[08:58] *** rindolf joined
[09:05] <Geth> ¬¶ doc: 5465e22449 | (JJ Merelo)++ | doc/Language/hashmap.pod6

[09:05] <Geth> ¬¶ doc: More clarifications on hash definition

[09:05] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/5465e22449

[09:05] <synopsebot> Link: https://doc.perl6.org/language/hashmap

[09:11] *** Ven` left
[09:20] *** Ven` joined
[09:27] *** lizmat joined
[09:51] *** xtreak_ left
[09:54] *** xtreak joined
[10:03] *** zakharyas left
[10:05] *** zakharyas joined
[10:09] *** aborazmeh joined
[10:09] *** aborazmeh left
[10:09] *** aborazmeh joined
[10:16] *** DeepIO joined
[10:29] *** aborazmeh left
[10:48] *** ChoHag left
[10:50] *** p6noob left
[10:51] *** ChoHag joined
[11:00] *** konsolebox joined
[11:06] <Geth> ¬¶ doc: Scimon++ created pull request #2137: Modify without example

[11:06] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2137

[11:15] *** Ven` left
[11:23] *** n1ge joined
[11:23] *** n1ge left
[11:28] <lizmat> weekly: https://perlmonks.org/?node_id=1217692

[11:28] <notable6> lizmat, Noted!

[11:30] *** zakharyas left
[11:31] *** xtreak left
[11:32] *** eliasr joined
[11:33] *** xtreak joined
[11:40] *** spycrab0 joined
[11:44] *** markoong joined
[11:48] *** benjikun2 joined
[11:49] *** benjikun left
[11:57] *** Altreus_ is now known as Altreus

[12:09] *** Ven` joined
[12:10] *** MasterDuke left
[12:13] *** ChoHag left
[12:14] <Geth> ¬¶ doc: f60f274bab | (Simon Proctor)++ (committed using GitHub Web editor) | doc/Language/control.pod6

[12:14] <Geth> ¬¶ doc: Modify without example

[12:14] <Geth> ¬¶ doc: 

[12:14] <Geth> ¬¶ doc: The example given for without raises an error about stringifying which seems LTA. The update displays the type of `$answer` that seems more useful as an example.

[12:14] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/f60f274bab

[12:14] <synopsebot> Link: https://doc.perl6.org/language/control

[12:14] <Geth> ¬¶ doc: 086ed9226c | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | doc/Language/control.pod6

[12:14] <Geth> ¬¶ doc: Merge pull request #2137 from Scimon/master

[12:14] <Geth> ¬¶ doc: 

[12:14] <Geth> ¬¶ doc: Modify without example

[12:14] <Geth> ¬¶ doc: Thanks!

[12:14] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/086ed9226c

[12:16] *** xtreak left
[12:16] <scimon> I was just playing about with without and noticed that.

[12:16] <jmerelo> scimon: it's awesome. Thanks!

[12:16] <jmerelo> scimon: keep playing around :-)

[12:23] <scimon> I'll do my best.

[12:25] *** ChoHag joined
[12:30] *** noganex joined
[12:36] *** jmerelo left
[12:43] <Geth> ¬¶ perl6.org: hankache++ created pull request #116: perl6intro.com supports https

[12:43] <Geth> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/pull/116

[12:44] <Geth> ¬¶ perl6.org: 883bbd6321 | (Naoum Hankache)++ | 2 files

[12:44] <Geth> ¬¶ perl6.org: perl6intro.com supports https

[12:44] <Geth> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/883bbd6321

[12:44] <Geth> ¬¶ perl6.org: 5eceaf3eab | (Naoum Hankache)++ (committed using GitHub Web editor) | 2 files

[12:44] <Geth> ¬¶ perl6.org: Merge pull request #116 from hankache/master

[12:44] <Geth> ¬¶ perl6.org: 

[12:44] <Geth> ¬¶ perl6.org: perl6intro.com supports https

[12:44] <Geth> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/5eceaf3eab

[12:44] <jkramer> How would I do this correctly?

[12:45] <jkramer> m: for <foo bar baz lol>.pairs.rotor(2 => -1) -> $a, $b { say "a should be 0 => foo, b should be 1 => bar, instead a is $a and b is $b" }

[12:45] <camelia> rakudo-moar 72ccd432a: OUTPUT: ¬´a should be 0 => foo, b should be 1 => bar, instead a is 0      foo 1   bar and b is 1  bar 2   baz‚ê§Too few positionals passed; expected 2 arguments but got 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:45] <jkramer> This doesn't work either:

[12:45] <jkramer> m: for <foo bar baz lol>.pairs.rotor(2 => -1) -> ($a, $b) { say "a should be 0 => foo, b should be 1 => bar, instead a is $a and b is $b" }

[12:45] <camelia> rakudo-moar 72ccd432a: OUTPUT: ¬´Too few positionals passed to '<anon>'; expected 2 arguments but got 0 in sub-signature‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:46] <jnthn> for flat <foo bar baz lol>.pairs.rotor(2 => -1) -> $a, $b { say "a = $a, b = $b" }

[12:46] <evalable6> jnthn, rakudo-moar 72ccd432a: OUTPUT: ¬´a = 0‚êâfoo, b = 1‚êâbar‚ê§a = 1‚êâbar, b = 2‚êâbaz‚ê§a = 2‚êâbaz, b = 3‚êâlol‚ê§¬ª

[12:46] *** kaare_ left
[12:47] <jkramer> Ah so you flatten the whole thing first and then have the for divide it in groups of two elements

[12:47] <jnthn> Yes

[12:47] <jnthn> m: for <foo bar baz lol>.pairs.rotor(2 => -1) -> [$a, $b] { say "a = $a, b = $b" }

[12:47] <camelia> rakudo-moar 72ccd432a: OUTPUT: ¬´Too few positionals passed to '<anon>'; expected 2 arguments but got 0 in sub-signature‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:47] <jkramer> Is there no syntax that allows me to disassemble a list into elements in the signature?

[12:48] <jnthn> Hm, I thought might do it

[12:48] <jnthn> Though it will probably be multiple times slower than the for flat approach

[12:49] <jkramer> I thought I could probably do something with | or * in the signature but I guess not

[12:49] <jkramer> Yup, using the flat one, thanks :)

[12:49] <jnthn> m: for <foo bar baz lol>.pairs.rotor(2 => -1).skip(1) -> [$a, $b] { say "a = $a, b = $b" }

[12:49] <camelia> rakudo-moar 72ccd432a: OUTPUT: ¬´Too few positionals passed to '<anon>'; expected 2 arguments but got 0 in sub-signature‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:49] <jnthn> huh, where's the 0 coming from

[12:49] <timotimo> m: for <foo bar baz lol>.pairs.rotor(2 => -1) -> @ [$a, $b] { say "a = $a, b = $b" }

[12:49] <camelia> rakudo-moar 72ccd432a: OUTPUT: ¬´Too few positionals passed to '<anon>'; expected 2 arguments but got 0 in sub-signature‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:49] <jnthn> m: dd <foo bar baz lol>.pairs.rotor(2 => -1)

[12:49] <camelia> rakudo-moar 72ccd432a: OUTPUT: ¬´((0 => "foo", 1 => "bar"), (1 => "bar", 2 => "baz"), (2 => "baz", 3 => "lol")).Seq‚ê§¬ª

[12:49] <timotimo> it's not accidentally interpreting pairs as nameds?

[12:50] <jnthn> oh, maybe it is

[12:50] <timotimo> m: for <foo bar baz lol>.pairs.rotor(2 => -1) -> *%x { dd %x }

[12:50] <camelia> rakudo-moar 72ccd432a: OUTPUT: ¬´Too many positionals passed; expected 0 arguments but got 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:50] <jnthn> I didn't think List.Capture did that though :/

[12:50] <timotimo> er, of course

[12:50] <timotimo> m: for <foo bar baz lol>.pairs.rotor(2 => -1) -> $ (*%x) { dd %x }

[12:50] <camelia> rakudo-moar 72ccd432a: OUTPUT: ¬´{"0" => "foo", "1" => "bar"}‚ê§{"1" => "bar", "2" => "baz"}‚ê§{"2" => "baz", "3" => "lol"}‚ê§¬ª

[12:50] <timotimo> yeah, it's doing that

[12:50] <jnthn> Hm. I guess it often makes some sense, but not here

[12:58] * masak is utterly confused by the .rotor API

[12:58] <masak> "it's simple! just send in your argument as a Pair!"

[12:58] <timotimo> multiple pairs, actually

[12:58] <timotimo> well, potentially

[12:58] <masak> o.O

[12:59] *** mcmillhj joined
[12:59] <timotimo> m: .say for (^16).rotor(2 => -1, 3 => -2, 4 => 1)

[12:59] <camelia> rakudo-moar 72ccd432a: OUTPUT: ¬´(0 1)‚ê§(1 2 3)‚ê§(2 3 4 5)‚ê§(7 8)‚ê§(8 9 10)‚ê§(9 10 11 12)‚ê§(14 15)‚ê§¬ª

[13:00] <masak> kind of falls into the same bucket for me as people abusing Complex instances as 2D coordinates

[13:02] <tadzik> Euclidean space can be pretty Complex

[13:03] <timotimo> masak: how would you design an API like rotor's?

[13:04] *** yqt joined
[13:05] <masak> timotimo: I wish I had an excellent answer for that prepared

[13:05] <timotimo> that's okay, you can point out something's bad without having a better suggestion at the ready, IMO

[13:05] <masak> yes, but in a way I don't like doing that

[13:05] <Ven`>  .oO( clearly a RotorBeanFactoryFactory is the answer )

[13:06] <masak> I think what I feel I'm missing is a little more clarity in terms of named arguments or something

[13:06] <timotimo> List.rotor(Ratchet.new(2, -1), Ratchet.new(3, -2))

[13:06] <Ven`> if I had a ratchet it'd be yours to have~

[13:07] <masak> timotimo: still doesn't quite answer what those two positionals to Ratchet.new are -- so, same problem

[13:07] <timotimo> .rotor(take => [2, 3], offset => [-1, -1])

[13:08] <masak> now things are wrongly grouped :P

[13:08] * masak .oO( I'm here to complain and chew gum, and I'm all out of gum )

[13:09] <jnthn> I found "2 => -1" as "take 2 items, take 1 step back" quite pleasant :)

[13:09] * Ven` also reads it that way

[13:09] <masak> fair enough

[13:10] <jnthn> I grant it's terse if you don't know that's how to read it

[13:10] <masak> I think it's possible to both find the syntax quite pleasant _once you know it_, and to admit that it's rather unclear by default

[13:10] <timotimo> i like this rotor api more than the previous draft that, i think, just put the numbers as individual positionals

[13:11] <masak> ugh, agreed

[13:11] <masak> but the Pairs here are used neither as hash entries nor as named arguments, just as "useful structure"

[13:11] <masak> cons pairs, essentially ;)

[13:13] <masak> like, if Perl 6 had a `(2, 1)` tuple syntax, we'd use that here

[13:13] <masak> (and that would be a lot less arbitrary)

[13:13] <lizmat> and the difference between a Tuple and a List being ?

[13:14] <Ven`> Fixed size

[13:14] <masak> yeah, guess sp

[13:14] <masak> so*

[13:15] <timotimo> not lazy

[13:15] <lizmat> I mean, supporting a syntax like List.rotor( (2,-1),(3,-2),(4,1) ) would be easily supportable

[13:15] <masak> a Pair has the implied semantics of "key" and "value" which .rotor doesn't care about at all

[13:15] <Ven`> (also the typed version of a tuple would have a type per elem :P)

[13:15] <masak> Ven`: so would a Pair, I guess

[13:15] <Ven`> a Pair is just a 2-elems tuple, methinks

[13:15] <masak> I mean, per .key and .value

[13:16] <jnthn> git cherry-pick mast

[13:16] <jnthn> gah

[13:16] <jnthn> wrong window, then realized and enter instead of backspace :P

[13:16] <Ven`> .oO( spoiler! )

[13:17] <masak> in a Pair, you're allowed to change the .value but not the .key

[13:17] <lizmat> in a Tuple you would not be allowed to change either, in my book  :-)

[13:18] <masak> right

[13:18] <masak> my point is that it's an abuse of Pair in .rotor because Pair means a lot of things that .rotor doesn't use/need/want

[13:20] <masak> ...but, again, I'm not up in arms about this. I'm not revolting, just openly expressing my confusion ;)

[13:21] <jnthn> I guess it's arguably establishing a mapping between the number of steps forward and the number of steps back

[13:21] *** Ven` left
[13:22] *** Ven` joined
[13:22] <jnthn> At least, I'd guess that was the thinking (I didn't design it, but that's how I'd justify such a design :P)

[13:22] <masak> jnthn: a mapping where the keys are non-unique, then... :P

[13:23] <timotimo> even worse, an ordered mapping

[13:23] <Juerd> I've abused => in Perl 5 for many things that were even less pairlike

[13:23] <masak> Juerd: yeah, but... :P

[13:23] <Juerd> system ssh => @args;

[13:23] <masak> Juerd: I heard in Perl 5, the `=>` is pronounced "fat comma" :P

[13:24] <Juerd> Yep. I will probably forever remember it with that tame

[13:24] <Juerd> s/tame/name/

[13:24] <Juerd> Just like $ is "string", because of a$ in basic.

[13:24] <masak> well, yeah

[13:26] <masak> I mean, abuses of types isn't the end of the world either

[13:26] <masak> just, you know, a possible design smell

[13:26] * jnthn suspects the design was more visual thinking than type thinking :)

[13:27] <masak> as a person who evolves macros to hijack the syntax of code to do exotic things, I guess I ought to be more in favor of that kind of thing... :P

[13:27] <jnthn> Natural langauges seem to also do similar hacks, just with sounds rather than visually. :)

[13:28] *** kaare_ joined
[13:28] <masak> specifically, see https://github.com/masak/007/issues/294#issuecomment-392330477

[13:28] <masak> (probably one of the most useful 007 issue comments of late, and well worth exposing to #perl6)

[13:29] <masak> 'macros are for "offsetting computation"'

[13:29] *** skids joined
[13:30] <Ven`> The question asked there is easy to answer: What are objects=>Objects are a poor man's closure!

[13:30] <jnthn> Me: Wait, what on earth happened there where we declined that guys name? Teacher: Oh, his name sounds like a plural word, so we just applied the plural declension rules. :P

[13:31] <jnthn> Makes zero sense in terms of semantics, but sometimes the phonetics win, I gues. :)

[13:31] <masak> Ven`: your colors are showing :P

[13:32] <Ven`> (I (don't know) what (you mean))

[13:32] <masak> :P

[13:32] *** zakharyas joined
[13:32] * masak .oO( Kirkegaard's LISP: everything is an expression of despair )

[13:35] * masak .oO( sorry, your name was plural, so it has been declined )

[13:35] <Ven`> applying a declension rule in french is "decliner" :P.

[13:36] <masak> we're inclined to decline

[13:38] * masak .oO( when the playing field is not even, you're inclined towards Lean methods )

[13:42] *** wamba left
[13:42] <jnthn> .oO( A methodology from Pisa... )

[13:43] <jkramer> Is there a way to get a Capture of the arguments the current sub was called with in order to pass it on to another sub?

[13:44] <jkramer> I basically want something like callwith, but I want to keep the arguments and change the sub/method/object instead :)

[13:45] <jnthn> |c

[13:45] <jnthn> In the signature

[13:45] <jnthn> c will be a Capture

[13:45] <masak> m: sub foo(|c) { say c.^name }; foo(1, 2, 3)

[13:45] <camelia> rakudo-moar 72ccd432a: OUTPUT: ¬´Capture‚ê§¬ª

[13:46] <jkramer> jnthn: Yeah but I still want to use positional and named parameters in the sub :)

[13:46] *** noganex left
[13:47] <jkramer> More like: foo($x, $y, :$z) { say $x; bar(get-capture-somehow); }

[13:47] *** noganex joined
[13:47] <jnthn> No, there's not a way to do that

[13:48] <jnthn> But you can write `sub foo(|c ($x, $y, :$z)) { say $x; bar(|c) }`

[13:48] <jkramer> Ok, thanks :)

[13:48] <jkramer> Oh ok that does the job :)

[13:48] <jnthn> That is, take the caputre and unpack it too

[13:49] <jnthn> The underlying issue here is that various important opts rely on us being able to opt the Capture away

[13:49] <jnthn> We actually look for the use of callsame and friends to know that we can't do it

[13:50] <jnthn> But otherwise, we require it to be made explicit that it's wanted

[13:50] *** curan left
[13:59] *** wamba joined
[14:20] <pmurias> nhttp://blogs.perl.org/users/pawel_murias/2018/07/graalvmtruffle-backend-update.html - truffle backend blog post

[14:21] <lizmat> pmurias: already listed for the weekly  :-)

[14:21] *** Ven` left
[14:30] *** Ven` joined
[15:03] *** turdmonkey joined
[15:05] *** turdmonkey is now known as Bowlslaw

[15:05] <Bowlslaw> Good morning, everyone.

[15:06] <masak> \o

[15:07] *** noganex_ joined
[15:08] *** Khisanth left
[15:10] *** noganex left
[15:13] *** zakharyas left
[15:16] *** zakharyas joined
[15:18] *** jmerelo joined
[15:21] *** Khisanth joined
[15:27] <moritz> o/

[15:27] <jmerelo> moritz: hi!

[15:27] <Ven`> \o

[15:32] *** yqt left
[15:36] *** zakharyas left
[15:39] *** damnlie left
[15:39] *** damnlie joined
[15:40] <Xliff> \o

[15:40] <yoleaux> 09:09Z <jnthn> Xliff: Thanks, it's fixed now :)

[15:42] *** psychoslave joined
[15:42] *** reportable6 joined
[15:45] *** benjikun joined
[15:46] <Xliff> ===SORRY!===

[15:46] <Xliff> Probable version skew in pre-compiled 'site#sources/F726BBCA8E1B0C2F39831AD4BD03281DBAF878F2 (OpenSSL::Bio)' (cause: no object at index 2107)

[15:46] <Xliff> ^ Anyone know what might cause this?

[15:46] *** benjikun2 left
[15:48] *** SHODAN joined
[15:51] <jkramer> Out of curiosity, is there a way to extract the values from a junction and use it as some kind of grep?

[15:51] <jkramer> Probably not

[15:52] *** sno left
[15:53] *** psychoslave left
[15:54] <buggable> New CPAN upload: FindBin-0.1.8.tar.gz by LEMBARK http://modules.perl6.org/dist/FindBin:cpan:LEMBARK

[15:55] *** domidumont left
[15:57] *** zakharyas joined
[15:58] *** zakharyas left
[16:01] *** psychoslave joined
[16:01] *** zakharyas joined
[16:02] <moritz> jkramer: there are workarounds, but it's designed to make it hard, because if you use a junction that way, you're misusing it

[16:03] *** robertle left
[16:03] *** MilkmanDan left
[16:04] <Ven`> There's an item in the FAQ about that, if you *really really* want to.

[16:05] *** MilkmanDan joined
[16:05] <Ven`> I suppose it could be useful for e.g. a testing library...

[16:05] <lizmat> so do we have an official page for the processed results of the perl 6 survey, or just the raw Google data one ?

[16:07] *** scimon left
[16:08] <Ven`> The page https://docs.perl6.org/features links to a "'features' method" which 404s. MMhh

[16:09] <Ven`> Sounds like that page shouldn't even exist..

[16:11] *** psychoslave left
[16:13] *** bwisti joined
[16:20] <Bowlslaw> I'm learning how to implement Perl 6's multi-threaded capabilities by making a web crawler. Can anyone tell me why this version seems to sleep after going through just 1 iteration of the depth? https://gist.github.com/Bowlslaw/fb16404d5cff5b34b5e4d73a23ebde86

[16:20] <Bowlslaw> I've been going over this for a while and I cannot find any reason

[16:20] <Bowlslaw> Maybe the channel isn't closed?

[16:20] <Bowlslaw> IF so, why isn't it iterating the correct depth?

[16:21] <jmerelo> lizmat: not yet. 

[16:21] <jmerelo> lizmat: I should prepare one, I guess.

[16:21] <Bowlslaw> Hmm, actually, it is still going, but it sat for a around 10 mins with no feedback...

[16:22] <Bowlslaw> Wait a minute...

[16:22] <moritz> Bowlslaw: I think you can scrap the react { whenever .. } thingy

[16:23] <moritz> just do

[16:23] <jkramer> moritz: Ven` I don't really need/want to. :) I was just trying to think of a nice way to say "if any of $x, $y or $z equal 5, set them to 10" or something like that

[16:23] <moritz> my $response = $ua.get(url)

[16:23] <jkramer> I guess map will have to do, but it feels wrong to map over 2-3 values in seperate variables :)

[16:24] <moritz> jkramer: for $x, $y, $z { $_ = 10 if $_ == 5 }

[16:24] <moritz> Bowlslaw: and you get parallel execution from having a worker pool

[16:25] <jkramer> moritz: That's even worse than map :D

[16:25] <moritz> Bowlslaw: but there is another problem: you never close the channel

[16:25] <moritz> jkramer: why? I like it :-)

[16:25] <jkramer> m: my $x = 5; my $y = 10; ($x, $y).=map: { $_ == 10 ?? 15 !! $_ }

[16:25] <camelia> rakudo-moar 72ccd432a: ( no output )

[16:25] <jkramer> m: my $x = 5; my $y = 10; ($x, $y).=map: { $_ == 10 ?? 15 !! $_ }; say $x; say $y:

[16:25] <camelia> rakudo-moar 72ccd432a: OUTPUT: ¬´5‚ê§15‚ê§¬ª

[16:26] <jkramer> There's probably even shorter ways

[16:26] <moritz> m: my ($x, $y) = 5, 15; for $x, $y { when 5 { $_ = 10 } }; say [$x, $y]

[16:26] <camelia> rakudo-moar 72ccd432a: OUTPUT: ¬´[10 15]‚ê§¬ª

[16:30] <Bowlslaw> moritz: Hm, yes, I think I can close the channel at the last line of the sub. I aso need to keep track of URLS which have been seen already

[16:31] <moritz> Bowlslaw: which sub?

[16:32] <Bowlslaw> crawl

[16:32] <moritz> but crawl is called for each URL

[16:32] <Bowlslaw> hmmm

[16:33] <moritz> that would close the channel after the first URL has been processed

[16:33] <jnthn> moritz: Thing is, crawling is primarily a concurrent, not a parallel problem.

[16:33] <moritz> jnthn: using something asynchronous like Cro might be a better solution, yes :-)

[16:34] <jnthn> Well yes, that'd get better throughput too in terms of doing async I/O rather than spawning a bunch of worker threads.

[16:34] <Bowlslaw> I still have your example with Cro, jnthn 

[16:34] <moritz> but I think Bowlslaw is trying to learn working with Perl 6's primitives, so I'm trying to explain where this one breaks down

[16:34] <jnthn> But a react-based solution helps solve the termination problem

[16:35] <moritz> which is surprisingly nasty with the channel solution :-)

[16:35] <Xliff> jnthn: Yes. Another Cro convert here, as you well know. 

[16:35] <Xliff> Although I am working on the Client side, atm.

[16:35] <jnthn> moritz: Yes, I know 'cus I tried to write an example with Channel as a comparison while preparing a talk, got it wrong three times and then gave up :P

[16:36] <jnthn> (Was on a bit of a time budget to prepare the talk, of course. :-))

[16:37] <Bowlslaw> jnthn: does Cro have a way to match urls without using a regex? For example, I like DOM::Tiny because I can write `for $dom.find('a[href]') -> $e` and have my links

[16:38] <timotimo>   personally, i'd consider that outside of cro's problem domain

[16:38] <jnthn> Bowlslaw: No, parsing HTML is out of scope for Cro. No reason you can't use DOM::Tiny to do that though, just grab the body

[16:38] <jnthn> I'll maybe re-work it to use that for the next time I do that talk :)

[16:38] <Bowlslaw> cool, thanks

[16:39] *** domidumont joined
[16:39] <Bowlslaw> What is Cro's problem domain? Why is it better than HTTP::UserAgent for a crawler?

[16:39] <Xliff> HTTP::UserAgent is fine, but it has issues. Also, it's not passing its tests. You have to force install.

[16:39] <Xliff> Because that's what I am migrating from. The key to a crawler is you need a proper implementation of the protocol.

[16:40] <Xliff> And HTTP::UserAgent has problems, atm.

[16:40] <Bowlslaw> Yes, I did have to force the install...

[16:40] <Xliff> Don't get me wrong... it works. 

[16:40] <Xliff> However, it's not consistent.

[16:40] <Xliff> And that's exactly what you DON'T want in a crawler.

[16:41] <moritz> Bowlslaw: HTTP::UserAgent is mostly a port of a Perl 5 library; Cro was designed from scratch for Perl 6, and uses Promises and react etc. to full advantage

[16:41] <jnthn> I don't know HTTP::UserAgent's feature set, though for a crawler usually one wants to do the requests concurrently, and many are to the same server so you want persistent connections. I've no idea if HTTP::UserAgent can do those.

[16:41] <moritz> Cro::HTTP that is

[16:41] <jnthn> But my point wasn't so much "use Cro" as "use react" :)

[16:42] <timotimo> cro was designed as a framework to build microservices, and the http client is in big part to communicate with other microservices, among other things with ones you made in cro to be part of your application, i think

[16:42] *** mcmillhj left
[16:42] <timotimo> i'm not involved in the cro design or development, though

[16:42] <timotimo> so take it with a grain of salt

[16:42] <AlexDaniel> jnthn: so in that web crawler example, is there anything preventing it from doing thousands of requests at the same time?

[16:42] <jnthn> AlexDaniel: No; I already mentioned that when I originally posted it :)

[16:43] <timotimo> communicating between microservices in HTML sounds like a bad idea; you'd rather use a data serialization format like json, or messagepack, or something

[16:43] <Xliff> timotimo: HTTP is just used as the communication method

[16:43] <jnthn> AlexDaniel: Though it'd not be too tricky to modify it to throttle, and I'm open to giving Cro's HTTP client a "maximum concurrent connections" setting so people don't have to repeatedly re-solve this problem :)

[16:44] <timotimo> Xliff: i don't think i said anything against that?

[16:46] *** Ven` left
[16:48] *** mcmillhj joined
[16:50] <Bowlslaw> jnthn: Well, I would definitely use that.

[16:50] <Bowlslaw> Does there exist a solution for it currently, though?

[16:53] *** mcmillhj left
[16:54] <Bowlslaw> `Promise.new(scheduler => ThreadPoolScheduler.new(initial_threads => 0, max_threads => 64, uncaught_handler => Callable),

[16:54] <Bowlslaw> status => PromiseStatus::Planned)

[16:54] <Bowlslaw> can't i set max_threads to something less?

[16:55] <jnthn> I'd probably do it by pushing new links into an array, keep a count of in-flight requests, and each time one completes see if we need to start crawling more

[16:56] <jnthn> Gotta go cook/eat; bbl :)

[16:56] <jkramer> moritz: I had something like this in mind :) http://dpaste.com/100PDT3.txt

[16:57] <Bowlslaw> thanks for the help guys

[17:00] *** mcmillhj joined
[17:01] *** zakharyas left
[17:02] <Ulti> naw tux isn't here, he could share in my misery of finding \r\r\n as the line terminator in this CSV

[17:05] *** mcmillhj left
[17:13] *** mcmillhj joined
[17:26] *** rindolf left
[17:26] *** MilkmanDan left
[17:28] *** MilkmanDan joined
[17:33] *** rindolf joined
[17:51] <Bowlslaw> AlexDaniel: I really like your issue on the react/whenever docs, haha

[17:51] <Bowlslaw> I can't agree more.

[17:52] <Bowlslaw> Also, the current examples in the docs for concurrent and async seem somewhat contrived and unrealistic.

[17:52] <Geth> ¬¶ rakudo.org: 5c806a7a55 | (Zoffix Znet)++ | assets/sass/main.scss

[17:52] <Geth> ¬¶ rakudo.org: Add accordion collapse markers

[17:52] <Geth> ¬¶ rakudo.org: 

[17:52] <Geth> ¬¶ rakudo.org: Closes https://github.com/perl6/rakudo.org/issues/5

[17:52] <Geth> ¬¶ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/5c806a7a55

[17:52] <Bowlslaw> It's difficult for me to take that and apply it to something pactical.

[17:52] *** zakharyas joined
[17:52] <Bowlslaw> Especially coming from 0 experience with that type of programming.

[17:56] *** sno joined
[17:58] *** obfusk joined
[17:59] <Geth> ¬¶ rakudo.org: 145883ae7b | (Zoffix Znet)++ | 3 files

[17:59] <Geth> ¬¶ rakudo.org: [REAPP] Add link to posts RSS feed

[17:59] <Geth> ¬¶ rakudo.org: 

[17:59] <Geth> ¬¶ rakudo.org: Fixes https://github.com/perl6/rakudo.org/issues/4

[17:59] <Geth> ¬¶ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/145883ae7b

[18:05] *** wamba left
[18:06] *** zakharyas left
[18:12] *** wamba joined
[18:21] *** lizmat left
[18:27] *** sauvin left
[18:29] *** konsolebox left
[18:38] *** |oLa| left
[18:40] *** zachk joined
[18:40] *** zachk left
[18:40] *** zachk joined
[18:45] *** ilogger2 joined
[18:45] *** ChanServ sets mode: +v ilogger2

[18:56] *** fake_space_whale joined
[18:57] *** Zoffix joined
[18:57] <Zoffix> Anyone on MacOS? What's the equivalent of `sudo apt-get install build-essential git` ? Need it for from-sauce rakudo installation instructions

[18:57] *** lizmat joined
[19:02] *** lizmat left
[19:05] <hobbs> it involves signing a contract in blood to be allowed to install xcode, I believe.

[19:08] <jmerelo> .tell lizmat I have updated the front page of the survey repo with links to all charts https://perl6.github.io/p6survey/

[19:08] <yoleaux> jmerelo: I'll pass your message to lizmat.

[19:08] <moritz> hobbs: I think if you have homebrew installed, it's not so bad; but I have not much experience myself

[19:13] <mcmillhj> Zoffix: xcode-select --install I think 

[19:16] <Zoffix> mcmillhj: xcode-select --install what? I presume here's no build-essential package

[19:17] <hobbs> xcode is basically build-essential :)

[19:29] <mcmillhj> Zoffix: pretty much, the xcode cli has a lot of the core stuff from build-essential. 

[19:29] <mcmillhj> homebrew has everything else

[19:31] <Zoffix> Well, I need something I can write down for users to use.

[19:31] *** Possum joined
[19:32] <Zoffix> The exact commands.

[19:35] <SmokeMachine> Zoffix: `xcode-select --install` is probably what you want...

[19:36] <Zoffix> SmokeMachine: and that installs git?

[19:36] <SmokeMachine> yes

[19:36] <Zoffix> ok

[19:37] <Zoffix> Thanks.

[19:37] <geekosaur> it installs over 2GB of crap, including compilers, git, dtrace toolkit, lots of other stuff

[19:37] <SmokeMachine> you'll have to click in a alert window

[19:37] <geekosaur> actually that one shouldn;t install the gui, I hope

[19:37] <moritz> so about half as much as an "ng init" :-)

[19:39] *** lizmat joined
[19:39] <Zoffix> gesus

[19:40] <Zoffix> and `perl` too? Or is that comes pre-installed with it?

[19:40] <Zoffix> s/it/MacOS/;

[19:41] <geekosaur> it's in the base system

[19:43] <Zoffix> cool

[19:52] <lizmat> B++

[19:52] <Zoffix> B?

[19:52] <lizmat> Belgium

[19:52] <lizmat> (soccer :-)

[19:53] <Zoffix> Ah :)

[19:53] <sena_kun> .seen hankache

[19:53] <yoleaux> I saw hankache 27 Jun 2018 14:14Z in #perl6: <hankache> AlexDaniel thanks, I'll work on them asap

[19:53] <sena_kun> .seen hankache_

[19:53] <yoleaux> I saw hankache_ 17 Feb 2017 19:07Z in #perl6: <hankache_> IOninja ok i'll update it

[19:54] <Juerd> lizmat: Cannot resolve caller postfix:<++>(Int); the following candidates match the type but require mutable arguments: (Mu:D $a is rw) (Int:D $a is rw) ...

[19:55] <lizmat> weird, there are at least 11 candidates active  :-)

[19:55] <Juerd> lizmat: The following do not match for other reasons: ... :D

[19:58] *** kjk joined
[19:58] <Geth> ¬¶ rakudo.org: f172560a84 | (Zoffix Znet)++ | 3 files

[19:58] <Geth> ¬¶ rakudo.org: [REAPP] Improve install instructions for WSL

[19:58] <Geth> ¬¶ rakudo.org: 

[19:58] <Geth> ¬¶ rakudo.org: Couldn't figure out how to work in the `execstack` business

[19:58] <Geth> ¬¶ rakudo.org: while keeping the `--gen-more` configure option, so I split up

[19:58] <Geth> ¬¶ rakudo.org: the instructions to clone/build nqp/MoarVM manually

[19:58] <Geth> ¬¶ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/f172560a84

[20:04] <Geth> ¬¶ rakudo.org: 4dbdd3c8ad | (Zoffix Znet)++ | templates/_from-source-prereqs.html.ep

[20:04] <Geth> ¬¶ rakudo.org: [REAPP] List MacOS stuff in prereqs

[20:04] <Geth> ¬¶ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/4dbdd3c8ad

[20:04] *** Zoffix left
[20:06] <kjk> is there anything I can do about some methods showing up as <anon> in .^methods?  I really want to know their names. If it's just a  chore of filling in the names somewhere in perl6, I'll volunteer it! I just need someone to show me how...

[20:07] *** |oLa| joined
[20:09] *** psychoslave joined
[20:09] *** Zoffix joined
[20:11] <Zoffix> kjk: a lost of the `anon` stuff are the methods from BOOTSTRAP.nqp (you can call .file/.line on the Method objects to find where they are). A wild guess is the names will become proper names if you add them to subs that are being added, like here: /src/Perl6/Metamodel/BOOTSTRAP.nqp

[20:11] <Zoffix> like instead of `sub ($self) {` in `Attribute.HOW.add_method(Attribute, 'has_accessor', nqp::getstaticcode(sub ($self) {`, you'd write `sub has_accessor ($self) {`

[20:12] <Zoffix> I guess I can try if that fixes the problem right now

[20:13] <Zoffix> hm, now that I think of it, that's probably ain't gonna fix anything :)

[20:14] <Zoffix> "Serialization Error: missing static code ref for closure 'has_accessor'" :D

[20:14] <kjk> also it seems those <anon> that are  ForeignCode don't have .file and .line 

[20:19] <Zoffix> m: my $m := Attribute.^methods.head; use nqp; nqp::setcodename(nqp::getattr($m, ForeignCode, '$!do'), 'meows'); dd $m.name

[20:19] <camelia> rakudo-moar 72ccd432a: OUTPUT: ¬´"meows"‚ê§¬ª

[20:19] <kjk> hmm, so it looks like when "add_method" is used to add a method, it's already provided with the name of the method as a string..., in theory, there should be a way to add that information as the method name, right?

[20:19] <Zoffix> m: my $m := Attribute.^methods.head; use nqp; nqp::setcodename(nqp::getattr($m, ForeignCode, '$!do'), 'meows'); Attribute.^methods.head.say

[20:19] <camelia> rakudo-moar 72ccd432a: OUTPUT: ¬´meows‚ê§¬ª

[20:20] <Zoffix> kjk: yeah, maybe try doing something with ^ that inside https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/MethodContainer.nqp#L16-L42 ?

[20:21] *** |oLa| left
[20:25] <kjk> Zoffix: thanks, I'll need to learn nqp first...,  is there a guide on how to get started on hacking perl6 with nqp?

[20:26] <Zoffix> huggable: internals course

[20:26] <huggable> Zoffix, Rakudo/NQP Internals Course: https://github.com/edumentab/rakudo-and-nqp-internals-course#rakudo-and-nqp-internals-workshop

[20:26] <Zoffix> kjk: there's that ^

[20:27] <Zoffix> kjk: there are also a couple tutorials on https://rakudo.party/  Just search the home page for "Core hacking" and should find all the articles

[20:29] <kjk> Zoffix: good stuffs! thanks

[20:34] *** charsbar joined
[20:44] *** pmurias joined
[20:45] *** dct joined
[20:45] <Zoffix> kjk: well, I tried plugin nqp::setcodename but it's not doing the trick. Looks like a lot of these objects are BOOTCode and not ForeignCode when they're passing through .add_method. I tried sticking nqp::hllizefor($code_obj, 'perl6'), but that still didn't help it.  Out of ideas now. You may want to catch jnthn and ask him for some tips :)

[20:45] <Zoffix> \o

[20:45] *** Zoffix left
[20:51] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/07/02/2018-27-surveyed/

[20:52] <sena_kun> lizmat++

[20:59] <sjn> nice!

[20:59] * sjn reads

[21:00] <AlexDaniel> squashable6: next

[21:00] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in 3 days and ‚âà12 hours (2018-07-07 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[21:00] <AlexDaniel> lizmat: oh, forgot to mention that Saturday is squashathon time again

[21:00] <lizmat> AlexDaniel: what is the theme this time ?

[21:01] <AlexDaniel> lizmat: perl6 docs

[21:01] <AlexDaniel> so https://github.com/perl6/doc/issues

[21:04] <lizmat> AlexDaniel: added

[21:04] <AlexDaniel> lizmat: thanks! ‚ô•

[21:06] <El_Che> oh, lizmat 

[21:06] <El_Che> you fell into the reddit trap again :)

[21:06] <El_Che> with the usal suspects

[21:06] <lizmat> what did I do now ?

[21:07] <El_Che> you got into a discussion with chromatic

[21:07] <lizmat> and I apologised and he accepted my apology

[21:07] <El_Che> not "a" discussion, but the same as always :)

[21:07] <lizmat> end of discussion

[21:07] <El_Che> not there yet in the thread

[21:07] <El_Che> skimming

[21:08] *** |oLa| joined
[21:08] <lizmat> it references another thread

[21:09] <AlexDaniel> A citation index is calculated for each module in the Perl6 Ecosystem, numbering 1111 as of 2018-07-01.

[21:09] <AlexDaniel> ( https://finanalyst.github.io/ModuleCitation/ )

[21:09] <AlexDaniel> 1111 modules? :)

[21:10] *** MasterDuke joined
[21:10] <lizmat> it's from a little while ago, afaik

[21:16] *** sauvin joined
[21:33] *** pmurias left
[21:34] *** Zoffix joined
[21:34] <Zoffix> lizmat: FWIW, the Squashathon will be in July, not August :)

[21:35] <Zoffix> and 7ths, noth 6ths

[21:37] <AlexDaniel> also it's -12‚Ä¶+14 so maybe just saying July 7th is enough

[21:39] * Zoffix refers to that period as "Saturday, all timezones" :)

[21:39] <Zoffix> lizmat++ # good weekly. Lots of conf talks!

[21:40] *** Zoffix left
[21:52] *** mcmillhj joined
[21:53] *** raschipi joined
[21:56] *** dct left
[21:57] *** psychoslave left
[22:06] *** mcmillhj left
[22:10] <lizmat> Zoffix: fixed

[22:10] *** stee3 joined
[22:21] *** mcmillhj joined
[22:26] *** mcmillhj left
[22:46] *** |oLa| left
[22:51] *** skids joined
[22:52] *** mcmillhj joined
[22:56] *** mcmillhj left
[23:09] *** mcmillhj joined
[23:13] *** mcmillhj left
[23:16] *** turdmonkey joined
[23:17] *** turdmonkey is now known as Bowlslaw

[23:21] *** benjikun2 joined
[23:32] *** Xliff joined
[23:39] *** mcmillhj joined
[23:40] *** benjikun2 is now known as benjikun

[23:44] *** mcmillhj left
[23:45] <Xliff> I am so glad I use Chromium when I am on Linux. Most reddit links do not work for me.

[23:57] *** mcmillhj joined
