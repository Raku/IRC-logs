[00:06] *** skids left
[00:07] *** skids joined
[00:15] *** tt_ joined
[00:17] *** tt_ left
[00:19] *** von_cheam left
[00:22] *** comborico left
[00:26] *** konsolebox_ left
[00:27] *** konsolebox joined
[00:28] *** pierre joined
[00:32] *** jeromelanteri joined
[00:38] *** pharv joined
[00:42] *** pharv left
[00:54] *** sabayonuser joined
[00:55] *** jeromelanteri left
[01:04] <SmokeMachine> m: { CATCH { default {"HERE"} }; ::("bla") }

[01:04] <camelia> rakudo-moar 7d72387bc: OUTPUT: «No such symbol 'bla'␤  in block <unit> at <tmp> line 1␤␤»

[01:05] <SmokeMachine> should it die?

[01:10] <jnthn> m: try { CATCH { default {"HERE"} }; ::("bla") }

[01:10] <camelia> rakudo-moar 7d72387bc: ( no output )

[01:10] <jnthn> m: { use fatal; CATCH { default {"HERE"} }; ::("bla") }

[01:10] <camelia> rakudo-moar 7d72387bc: ( no output )

[01:11] <jnthn> If you don't use one of those two, the Failure will escape the block (since it's the block's return value) and thus explode in the program mainline, which is not covered

[01:11] <jnthn> (try implies `use fatal` inside of the block it's covering)

[01:12] *** Kaiepi left
[01:14] <SmokeMachine> m: { use fatal; CATCH { default {say "HERE"} }; ::("bla") }

[01:14] <camelia> rakudo-moar 7d72387bc: OUTPUT: «HERE␤»

[01:14] <SmokeMachine> thanks!

[01:15] *** Kaiepi joined
[01:16] *** Xliff_ joined
[01:16] *** Xliff left
[01:20] <skids> you can also sink it if "use fatal" is too much.

[01:20] <skids> { CATCH { default {"HERE".say} }; my $a = 42; my $b; sink $b = ::("\$a"); $b }().perl.say

[01:20] <evalable6> skids, rakudo-moar 7d72387bc: OUTPUT: «42␤»

[01:21] <skids> m: { CATCH { default {"HERE".say} }; my $a = 42; my $b; sink $b = ::("blah"); $b }().perl.say

[01:21] <camelia> rakudo-moar 7d72387bc: OUTPUT: «HERE␤Nil␤»

[01:21] <skids> m: { CATCH { default {"HERE".say} }; my $a = 42; my $b; $b = ::("blah"); $b }().perl.say

[01:21] <camelia> rakudo-moar 7d72387bc: OUTPUT: «Failure.new(exception => X::NoSuchSymbol.new(symbol => "blah"), backtrace => Backtrace.new)␤»

[01:25] *** konsolebox left
[01:27] *** konsolebox joined
[01:43] *** pierre left
[01:44] <buggable> New CPAN upload: HTML-Canvas-0.0.3.tar.gz by WARRINGD https://cpan.metacpan.org/authors/id/W/WA/WARRINGD/Perl6/HTML-Canvas-0.0.3.tar.gz

[01:51] *** sabayonuser left
[01:54] *** kurahaupo_ joined
[01:57] *** kurahaupo left
[01:58] *** _kristian left
[02:14] *** pierre joined
[02:18] *** pierre left
[02:22] *** konsolebox left
[02:25] *** konsolebox joined
[02:33] *** wamba left
[02:40] *** shinobi-cl left
[02:46] *** ilbot3 left
[02:46] *** pharv joined
[02:50] *** pharv left
[02:56] *** ilbot3 joined
[02:58] *** ChanServ sets mode: +v ilbot3

[03:16] *** konsolebox left
[03:17] *** konsolebox joined
[03:17] *** ufobat___ joined
[03:20] *** pierre joined
[03:21] *** ufobat_ left
[03:25] *** pierre left
[03:38] *** pharv joined
[03:42] *** pharv left
[04:28] *** xtreak joined
[04:32] *** xtreak left
[04:43] *** dct_ joined
[04:44] *** circ-user-mVKnC joined
[04:49] *** kurahaupo_ left
[04:49] *** kurahaupo joined
[04:54] *** Cabanossi left
[04:56] *** Cabanossi joined
[05:08] *** konsolebox left
[05:10] *** konsolebox joined
[05:18] *** khw left
[05:23] *** AlexDaniel joined
[05:32] *** pierre joined
[05:37] *** darutoko joined
[05:45] <Kaiepi> m: my $ver := '2.0.0'; my ($maj, $min, $patch) := $ver ~~ /(\d+)\.(\d+)\.(\d+)/; say "$maj $min $patch"

[05:45] <camelia> rakudo-moar 7d72387bc: OUTPUT: «Unexpected named argument '' passed␤  in block <unit> at <tmp> line 1␤␤»

[05:46] *** pharv joined
[05:46] <Kaiepi> m: my $maj := '2.0.0' ~~ /(\d+)\.\d+\.\d+/; say $maj.trim

[05:46] <camelia> rakudo-moar 7d72387bc: OUTPUT: «2.0.0␤»

[05:47] <Kaiepi> wait why am i trying to use a regex when i can just do .split

[05:49] *** Zoffix joined
[05:49] *** releasable6 left
[05:49] <Zoffix> m: dd Version.new: '2.0.0'

[05:49] <camelia> rakudo-moar 7d72387bc: OUTPUT: «v2.0.0␤»

[05:49] *** releasable6 joined
[05:50] <Zoffix> m: dd Version.new('2.0.0').parts

[05:50] <camelia> rakudo-moar 7d72387bc: OUTPUT: «(2, 0, 0)␤»

[05:50] *** pharv left
[05:51] <Zoffix> m: dd '2.0.0'.comb: /\d+/

[05:51] <camelia> rakudo-moar 7d72387bc: OUTPUT: «("2", "0", "0")␤»

[05:55] <Zoffix> m: use nqp; subset VLAN of Int where .so; subset Meows of VLAN; my $param := -> Meows $ where .so {}.signature.params.head; dd [.elems, $_] with nqp::getattr($param, Parameter, '@!post_constraints')

[05:55] <camelia> rakudo-moar 7d72387bc: OUTPUT: «[2, (Meows, -> ;; $_ { #`(Block|64841888) ... })]␤»

[05:56] <Zoffix> Is there a way to get more @!post_constraints? More than 2?

[06:02] <Kaiepi> m: Version.new: 'foo'

[06:02] <camelia> rakudo-moar 7d72387bc: ( no output )

[06:02] <Kaiepi> m: my ($a, $b, $c) := Version.new: 'foo'

[06:02] <camelia> rakudo-moar 7d72387bc: OUTPUT: «Cannot unpack or Capture `vfoo`.␤To create a Capture, add parentheses: \(...)␤If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}␤or missed `:` in signature unpacking? -> &c:(Int) {}␤  in block <unit> …»

[06:03] <Kaiepi> m: my ($a, $b, $c) := dd 'foo'.comb: /\d+/

[06:03] <camelia> rakudo-moar 7d72387bc: OUTPUT: «()␤Too few positionals passed to '<unit>'; expected 3 arguments but got 0␤  in block <unit> at <tmp> line 1␤␤»

[06:04] <Kaiepi> how well does exception handling perform in perl 6?

[06:05] <Zoffix> Don't know what you mean... "well" based on which parameters?

[06:05] <Kaiepi> i mean in node for instance, try/catch makes the entire function it's used in unoptimizable

[06:05] <Kaiepi> last i used it at least

[06:06] <Zoffix> m: my ($a, $b, $c) = Version.new('2.3.42').parts; dd [$a, $b, $c]

[06:06] <camelia> rakudo-moar 7d72387bc: OUTPUT: «[2, 3, 42]␤»

[06:06] <Zoffix> m: my ($a, $b, $c) = '2.3.42'.comb: /\d+/; dd [$a, $b, $c]

[06:06] <camelia> rakudo-moar 7d72387bc: OUTPUT: «["2", "3", "42"]␤»

[06:07] <Zoffix> Kaiepi: that sounds a lot like premature optimization

[06:07] <Zoffix> Worrying about that stuff, I mean.

[06:09] <Kaiepi> it is for what i'm doing atm

[06:10] <Zoffix> premature optimizing? :)

[06:10] <Kaiepi> yeah

[06:10] <Kaiepi> i'm wondering in case i run into some case where i might need to know in the future

[06:14] *** rindolf joined
[06:15] *** dct_ left
[06:26] *** pierre left
[06:31] <Kaiepi> t

[06:38] *** pharv joined
[06:41] *** wamba joined
[06:42] *** pierre joined
[06:43] *** pierre left
[06:43] *** pierre joined
[06:48] *** pierre left
[06:49] *** skids left
[06:54] *** greppable6 left
[06:54] *** greppable6 joined
[06:54] *** ChanServ sets mode: +v greppable6

[06:54] *** pharv left
[06:55] *** pharv joined
[06:59] *** pharv left
[07:02] *** kurahaupo left
[07:03] *** kurahaupo joined
[07:03] *** Zoffix left
[07:06] *** bisectable6 left
[07:06] *** bisectable6 joined
[07:06] *** nativecallable6 left
[07:06] *** ChanServ sets mode: +v bisectable6

[07:06] *** bisectable6 left
[07:06] *** nativecallable6 joined
[07:06] *** ChanServ sets mode: +v nativecallable6

[07:06] *** bisectable6 joined
[07:07] *** darutoko left
[07:17] *** Zoffix joined
[07:18] <Zoffix> .tell tyil you have several bugs in your Appsixt module. Variables inside «» gets split on spaces within their values so, say, spaces in paths will break the path into separate args (`my $source = 'bar ber'.IO; dd «foo {$source.IO.path}»;`): https://gist.github.com/Whateverable/576bc17fe1eb2c081819a4e13e4a7f26

[07:18] <yoleaux> Zoffix: I'll pass your message to tyil.

[07:18] *** Zoffix left
[07:27] *** robertle joined
[07:39] <perlawhirl> hi perlers

[07:40] *** pharv joined
[07:40] <perlawhirl> i been playing around with different combinatoric sequences

[07:41] <perlawhirl> i have an issue with one of my functions that generates the next sequency by modifying positional elements in an Array (or List)

[07:41] <perlawhirl> and the gather/take, when evaluated eagerly, only gives me the last entry

[07:41] <perlawhirl> https://gist.github.com/0racle/6be868d7ef38ca6eb2beef9b24387299

[07:41] <perlawhirl> this is golfed

[07:41] <perlawhirl> but how do i work around this?

[07:42] <perlawhirl> as mentioned, this is golfed... it's the rotating of positional elements (@list[*]) that does it... if i simply did `@list .= rotate` it doesn't happen

[07:44] <AlexDaniel> .tell Zoffix re run, «» and notifying users about their bugs: I feel encouraged by your attempt to work on the issue on case by case basis… Lately I feel like it's easier to give up :) https://irclog.perlgeek.de/perl6/2018-01-24#i_15732558

[07:44] <yoleaux> AlexDaniel: I'll pass your message to Zoffix.

[07:44] <perlawhirl> but in my function i'm reversing a portion of the list (eg. `@list[$k..$n] .= reverse`) and i can't seem to make it work right when consuming the seq eagerly

[07:53] *** someuser joined
[07:54] *** bartolin left
[07:54] *** bartolin joined
[07:55] <AlexDaniel> perlawhirl: this is so weird :D

[07:55] *** Zoffix joined
[07:56] <AlexDaniel> m: sub rots($list is copy) { gather for ^$list { $list[*] .= rotate; take $list; } }; my @l = ^3; say rots(@l).list; say rots(@l).Array;

[07:56] <camelia> rakudo-moar a4f9090e2: OUTPUT: «([1 2 0] [2 0 1] [0 1 2])␤[[0 1 2] [0 1 2] [0 1 2]]␤»

[07:57] <AlexDaniel> that has to be a bug

[07:57] *** pierre joined
[07:58] <AlexDaniel> m: sub rots($list is copy) { gather for ^$list { $list[*] .= rotate; take $list; } }; my @l = <0 1 2>; say rots(@l); say eager rots(@l);

[07:58] <camelia> rakudo-moar a4f9090e2: OUTPUT: «([1 2 0] [2 0 1] [0 1 2])␤([0 1 2] [0 1 2] [0 1 2])␤»

[08:00] <Zoffix> perlawhirl: you're sticking the same Array into all the cells

[08:01] <Zoffix> m: sub rots($list is copy) { gather for ^$list { $list[*] .= rotate; take $list.List; } }; my @l = <0 1 2>; say rots(@l); say eager rots(@l);

[08:01] <camelia> rakudo-moar a4f9090e2: OUTPUT: «((1 2 0) (2 0 1) (0 1 2))␤((1 2 0) (2 0 1) (0 1 2))␤»

[08:02] <Zoffix> m: sub rots($list is copy) { gather for ^$list { $list[*] .= rotate; take $list.clone; } }; my @l = <0 1 2>; say rots(@l); say eager rots(@l);

[08:02] <camelia> rakudo-moar a4f9090e2: OUTPUT: «([1 2 0] [2 0 1] [0 1 2])␤([1 2 0] [2 0 1] [0 1 2])␤»

[08:02] <titsuki> Is this a rakudo bug? REPL cannot handle binding properly: https://github.com/hankache/perl6intro/issues/168

[08:03] <Zoffix> titsuki: looks like it

[08:04] <titsuki> OK. then I'll tell him so...

[08:04] <Zoffix> m: my @a = ^3; my @b; @a.=rotate; @b[0] = @a; @a.=rotate; @b[1] = @a; @a.=rotate; @b[2] = @a; say @b

[08:04] <camelia> rakudo-moar a4f9090e2: OUTPUT: «[[0 1 2] [0 1 2] [0 1 2]]␤»

[08:05] <Zoffix> perlawhirl: ^ this is what you're doing. The difference between the two cases is in the first one each item gets rendered into a string before the next one gets generated

[08:05] *** committable6 left
[08:05] *** committable6 joined
[08:05] <Zoffix> m: my @a = ^3; my @b; @a.=rotate; my $answer = '['; @b[0] = @a; @a.=rotate; $answer ~ @a; @b[1] = @a; @a.=rotate; $answer ~ @a; @b[2] = @a; $answer ~ @a; say "$answer]"

[08:05] <camelia> rakudo-moar a4f9090e2: OUTPUT: «WARNINGS for <tmp>:␤[]␤Useless use of "~" in expression "$answer ~ @a" in sink context (lines 1, 1, 1)␤»

[08:06] <Zoffix> m: my @a = ^3; my @b; @a.=rotate; my $answer = '['; @b[0] = @a; @a.=rotate; $answer ~= @a; @b[1] = @a; @a.=rotate; $answer ~= @a; @b[2] = @a; $answer ~= @a; say "$answer]"

[08:06] <camelia> rakudo-moar a4f9090e2: OUTPUT: «[2 0 10 1 20 1 2]␤»

[08:06] <AlexDaniel> aaaaaaaaaaaaaaaaaaaaaaaaaaaahhhhhh

[08:07] <AlexDaniel> Zoffix++

[08:09] <Zoffix> m: my @a = ^3; my @b; @a.=rotate; @b[0] = @a; my $answer = '[' ~ [email@hidden.address] @a.=rotate; $answer ~= [email@hidden.address] @b[1] = @a; @a.=rotate; @b[2] = @a; $answer ~= [email@hidden.address] say "$answer]"; say @a

[08:09] <camelia> rakudo-moar a4f9090e2: OUTPUT: «[[1, 2, 0],[2, 0, 1],[0, 1, 2]]␤[0 1 2]␤»

[08:09] <Zoffix> m: my @a = ^3; my @b; @a.=rotate; @b[0] = @a; my $answer = '[' ~ [email@hidden.address] @a.=rotate; $answer ~= [email@hidden.address] @b[1] = @a; @a.=rotate; @b[2] = @a; $answer ~= [email@hidden.address] say "$answer]"; say @b

[08:09] <camelia> rakudo-moar a4f9090e2: OUTPUT: «[[1, 2, 0],[2, 0, 1],[0, 1, 2]]␤[[0 1 2] [0 1 2] [0 1 2]]␤»

[08:09] <Zoffix> perlawhirl: ^ like that :)

[08:09] <Zoffix> $answer is the $r and @b is @r

[08:13] <Zoffix> titsuki: beat you to it.

[08:14] <titsuki> Zoffix: Thanks!

[08:21] *** Zoffix left
[08:28] <perlawhirl> Zoffix: I understand why your code does what it does, but don't immediately see why the gather/take acts this way

[08:28] <perlawhirl> just so i understand it, when eagerly evaluating the gather/take, does it do the equivalent of your `@b[n] = @a` until the gather ends, then returns `@b`

[08:29] <perlawhirl> and if that's the case... whats the best way around it, given that i'm generating a sequence by modifying a list in place

[08:33] <perlawhirl> hrm... so a "quick fix" for my actual code is rather than `take @list[^$k]`, I can do `@a = @list[^$k]; take @a.clone`.

[08:33] <perlawhirl> feels a bit messy, but helps illuminate the issue for me

[08:35] <moritz> try @list.head($k)

[08:38] *** Zoffix joined
[08:42] <Zoffix> perlawhirl: no, @b.STORE pulls each of the items from the Seq created by gather/take and sticks into a new element in @b, one at a time. Each time it generates a new element, *all previous elements* of @b are too updated, since they all contain the same object. But by the time you **print** the eager version, the Seq was already fully pulled and all of the cells on @b contain the same @a Array that it's in its

[08:42] <Zoffix> last rotation. In the lazy version, the Seq is pulled **while the Str for printing is made** so despite the same Array being used for everything, by the time it changes on next iteration a Str snapshot of it was already taken

[08:43] <Zoffix> perlawhirl: possibly-helpful articles: https://perl6advent.wordpress.com/2017/12/02/   https://rakudo.party/post/Perl-6-Seqs-Drugs-and-Rock-n-Roll   and   https://rakudo.party/post/Perl-6-Seqs-Drugs-and-Rock-n-Roll--Part-2

[08:45] *** quotable6 left
[08:45] *** quotable6 joined
[08:45] *** ChanServ sets mode: +v quotable6

[08:49] <Zoffix> m: sub rots($list) { ^$list .map: { $list[flat ++$ ..^$list, ^ ++$ ] } }; my @l = ^3; my $r = rots(@l); say $r; my @r = rots(@l); say @r;

[08:49] <camelia> rakudo-moar 235d3f1ce: OUTPUT: «((1 2 0) (2 0 1) (0 1 2))␤[(1 2 0) (2 0 1) (0 1 2)]␤»

[08:50] <perlawhirl> When I ran into the issue the first thing I did was re-read your articles on Seq's :D

[08:51] *** lasse joined
[08:56] <Zoffix> m: sub rots { .rotate, *.rotate … {++$ ≥ $_} with $^list }; my @l = ^3; my $r = rots(@l); say $r; my @r = rots(@l); say @r;

[08:56] <camelia> rakudo-moar 235d3f1ce: OUTPUT: «([1 2 0] [2 0 1] [0 1 2])␤[[1 2 0] [2 0 1] [0 1 2]]␤»

[08:58] <perlawhirl> Thanks Zoffix. Will dig a bit deeper into this after I put the kids to bed.

[08:58] <Zoffix> \o

[08:59] *** Zoffix left
[09:04] *** Zoffix joined
[09:04] <Zoffix> Actually, I got one more:

[09:04] <Zoffix> m: my &rots = { [.=rotate] xx $_ }; my @l = ^3; my $r = rots(@l); say $r; my @r = rots(@l); say @r;

[09:04] <camelia> rakudo-moar 235d3f1ce: OUTPUT: «([1 2 0] [2 0 1] [0 1 2])␤[[1 2 0] [2 0 1] [0 1 2]]␤»

[09:04] <Zoffix> :)

[09:04] <Zoffix> perlawhirl: a lot less messy :)

[09:04] *** Zoffix left
[09:24] *** sena_kun joined
[09:31] *** rodarmor left
[09:32] *** rodarmor joined
[09:34] *** Bucciarati left
[09:34] *** damnlie left
[09:34] *** perlbot left
[09:34] *** kybr left
[09:34] *** avalenn left
[09:34] *** Grauwolf left
[09:34] *** stux|RC-- left
[09:34] *** DarthGandalf left
[09:34] *** Altreus left
[09:34] *** Juerd left
[09:36] *** Bucciarati joined
[09:36] *** damnlie joined
[09:36] *** perlbot joined
[09:36] *** kybr joined
[09:36] *** avalenn joined
[09:36] *** Grauwolf joined
[09:36] *** stux|RC-- joined
[09:36] *** DarthGandalf joined
[09:36] *** Altreus joined
[09:36] *** Juerd joined
[09:36] *** unicodable6 left
[09:36] *** shareable6 left
[09:37] *** shareable6 joined
[09:37] *** unicodable6 joined
[09:37] *** committable6 left
[09:37] *** statisfiable6 left
[09:38] *** bisectable6 left
[09:38] *** benchable6 left
[09:38] *** releasable6 left
[09:39] *** releasable6 joined
[09:51] *** domidumont joined
[09:56] *** domidumont left
[09:57] *** domidumont joined
[09:58] *** stux|RC-- left
[09:58] *** stux|RC-only joined
[10:01] *** pierre left
[10:01] *** pierre joined
[10:20] *** kurahaupo left
[10:29] *** Ven`` joined
[10:34] *** bisectable6 joined
[10:34] *** benchable6 joined
[10:34] *** committable6 joined
[10:35] *** statisfiable6 joined
[10:37] *** ChanServ sets mode: +v statisfiable6

[10:41] *** ufobat___ left
[10:49] *** someuser left
[10:52] <perlawhirl> So... I can't use macros in modules? macro works fine in a standalone script

[10:52] <perlawhirl> but using it inside a function in a module, got "Missing serialize REPR function for REPR MVMContext (BOOTContext)"

[10:53] <perlawhirl> I'm cool with that, given macros are experimental... just confirming this is expected behavior?

[10:56] *** pharv left
[10:56] <AlexDaniel> greppable6: macro

[10:57] <greppable6> AlexDaniel, 2897 lines, 63 modules: https://gist.github.com/4daf1cc8cd6aa24895dc79ba175ba2b5

[10:57] <AlexDaniel> greppable6: macros

[10:58] <greppable6> AlexDaniel, 137 lines, 35 modules: https://gist.github.com/4046709a6ed9751b44ca1b03dd39200d

[10:58] <AlexDaniel> greppable6: use experimental \:macros\;

[10:58] <greppable6> AlexDaniel, 7 lines, 3 modules: https://gist.github.com/c3c9652a784ff1c083810ae66cefe9d3

[10:59] <AlexDaniel> perlawhirl: can't comment on the issue but maybe take a look at these modules as they seem to work

[11:01] *** pierre left
[11:04] *** pharv joined
[11:08] *** pharv left
[11:10] <perlawhirl> thank... one more lil prob i just stumbled on... possibly related to the recent conversion of all subs to multi??

[11:10] <perlawhirl> i have a sub in my module that takes a "Callable", ie: foo($iter, &func = &infix:<+>) { ... }

[11:11] <perlawhirl> in my tests it's failing on 'foo(@data, &max)' and it's complaining that " expected Callable but got Sub+{is-pure}"

[11:12] <perlawhirl> this worked a few days ago, i'm fairly certain

[11:13] *** unicodable6 left
[11:14] <perlawhirl> m: sub foo($bar, &func) { func($bar) }; foo([^3], &max);

[11:14] <camelia> rakudo-moar 235d3f1ce: OUTPUT: «Type check failed in binding to parameter '&func'; expected Callable but got Sub+{is-pure} (Sub+{is-pure}.new)␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:15] <perlawhirl> bisectable6: sub foo($bar, &func) { func($bar) }; foo([^3], &max);

[11:15] <bisectable6> perlawhirl, Bisecting by exit code (old=2015.12 new=235d3f1). Old exit code: 0

[11:15] <bisectable6> perlawhirl, bisect log: https://gist.github.com/66a1b39ae7c4adacf5c3c32be5ebb3df

[11:15] <bisectable6> perlawhirl, (2018-02-20) https://github.com/rakudo/rakudo/commit/55bc053c56bd54717fe39c627a539373aba83013

[11:16] <perlawhirl> yeah, it's the commit that made &max a multi.

[11:23] *** someuser joined
[11:27] <perlawhirl> m: my &máximo = &max;

[11:27] <camelia> rakudo-moar 235d3f1ce: OUTPUT: «Type check failed in assignment to &máximo; expected Callable but got Sub+{is-pure} (Sub+{is-pure}.new)␤  in block <unit> at <tmp> line 1␤␤»

[11:28] <perlawhirl> This seems to be a pretty bad regression

[11:32] <perlawhirl> Additionally, it made it into the compiler release

[11:33] *** someuser left
[11:36] <AlexDaniel> perlawhirl: what release?

[11:37] <AlexDaniel> plz don't give me a heart attack when it's not needed :)

[11:38] <AlexDaniel> c: 2018.02.1,HEAD sub foo($bar, &func) { func($bar) }; foo([^3], &max);

[11:38] <committable6> AlexDaniel, ¦2018.02.1: «» ¦HEAD(235d3f1): «Type check failed in binding to parameter '&func'; expected Callable but got Sub+{is-pure} (Sub+{is-pure}.new)␤  in sub foo at /tmp/lYR8EVamam line 1␤  in block <unit> at /tmp/lYR8EVamam line 1␤␤ «exit code = 1»»

[11:38] <AlexDaniel> 6c: sub foo($bar, &func) { func($bar) }; foo([^3], &max);

[11:38] <committable6> AlexDaniel, https://gist.github.com/57c2cd5d31a99403050f10aacd47e0d2

[11:40] <AlexDaniel> perlawhirl: iirc that regression was somewhat “expected”, which is why we waited for the release to happen before trying to switch stuff to multis :)

[11:41] <AlexDaniel> perlawhirl: but please submit a ticket with this particular case

[11:41] <perlawhirl> What I find odd (or I just don't understand) is I can define my own pure sub, export it from a module, and it doesn't suffer the same issue. It identifies (.WHAT) as a Sub+{is-pure}, but i can assign it to a &callable just fine

[11:41] <perlawhirl> ok.. will submit GH issue

[11:41] <AlexDaniel> thanks!

[11:42] *** SyrupThinker joined
[11:49] *** someuser joined
[12:00] *** pierre joined
[12:04] *** skaji left
[12:04] *** skaji joined
[12:04] *** circ-user-mVKnC left
[12:06] *** someuser left
[12:08] *** circ-user-mVKnC joined
[12:20] *** pharv joined
[12:24] *** pharv left
[12:26] *** Kaiepi left
[12:26] *** Kaiepi joined
[12:28] *** pierre left
[12:42] *** darutoko joined
[12:54] *** isBEKaml joined
[13:05] *** pierre joined
[13:15] *** jeromelanteri joined
[13:20] *** eroux joined
[13:50] <Geth> ¦ doc: a881041297 | (JJ Merelo)++ | doc/Type/Any.pod6

[13:50] <Geth> ¦ doc: Fixes the last "return Any"

[13:50] <Geth> ¦ doc: 

[13:50] <Geth> ¦ doc: By looking at the actual implementation. Revised also other "returns empty list". It actually returns an empty list in many cases, so it's OK. I haven't seen any other remainint, so provisionally closes #1731. If anyone finds a particular description that's wrong, I would rather have an specific open issue for that.

[13:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a881041297

[13:50] <synopsebot> Link: https://doc.perl6.org/type/Any

[13:56] *** jeromelanteri left
[14:04] *** pierre left
[14:08] *** pharv joined
[14:11] *** ribasushi left
[14:14] *** pharv left
[14:15] *** kurahaupo joined
[14:30] *** pierre joined
[15:02] *** bart joined
[15:02] *** bart is now known as Guest72553

[15:02] *** Guest72553 is now known as brrt

[15:04] *** pierre left
[15:07] *** lasse left
[15:36] *** committable6 left
[15:36] *** committable6 joined
[15:39] *** Manifest0 joined
[15:39] *** espadrine left
[15:42] *** pierre joined
[15:47] *** pierre left
[15:48] *** Ven`` left
[15:54] <Manifest0> hi. I think i found a bug on a error message produced by perl6

[15:54] <Manifest0> This is the code: http://paste.opensuse.org/92568701

[15:54] <Manifest0> and this is the error message it produces: http://paste.opensuse.org/33633715

[15:56] <Manifest0> :-)

[15:59] <timotimo> looks like you have a quoted string around it, that sometimes happens

[15:59] <timotimo> i don't see any opening quotes in the paste, though

[15:59] <timotimo> oh, haha

[15:59] <timotimo> no, you have to put a space after "sub"

[15:59] *** dakkar joined
[15:59] <timotimo> otherwise you're calling a sub named &sub and trying to pass $t to it, which is not defined

[16:00] *** brrt left
[16:01] *** brrt joined
[16:02] <timotimo> m: a => sub($t){ say $t }

[16:02] <camelia> rakudo-moar 2a8b17ae9: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$t' is not declared␤at <tmp>:1␤------> 3a => sub(7⏏5$t){ say $t }␤»

[16:02] <timotimo> m: a => sub ($t){ say $t }

[16:02] <camelia> rakudo-moar 2a8b17ae9: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "a => sub ($t){ say $t }" in sink context (line 1)␤»

[16:02] <timotimo> m: say a => sub ($t){ say $t }

[16:02] <camelia> rakudo-moar 2a8b17ae9: OUTPUT: «Unexpected named argument 'a' passed␤  in block <unit> at <tmp> line 1␤␤»

[16:02] <timotimo> m: say (a => sub ($t){ say $t })

[16:02] <camelia> rakudo-moar 2a8b17ae9: OUTPUT: «a => sub ($t) { #`(Sub|41873912) ... }␤»

[16:02] <timotimo> Manifest0: does that help?

[16:02] *** khw joined
[16:03] <timotimo> we can probably detect when you're accidentally calling a sub called "sub" rather than declaring an anonymous sub

[16:04] *** zakharyas joined
[16:12] *** pharv joined
[16:16] *** cdg joined
[16:16] *** pharv left
[16:19] *** brrt left
[16:24] *** zakharyas left
[16:24] *** Kaiepi left
[16:24] *** zakharyas joined
[16:24] *** Kaiepi joined
[16:29] *** jgoff joined
[16:31] *** Kaiepi left
[16:31] *** Kaiepi joined
[16:39] <Manifest0> timotimo: that's it. A space was missing!

[16:39] *** silug left
[16:40] <Manifest0> so without a space is a function call and with is an anonymous call? That's going to be confusing...

[16:41] <Manifest0> That explains the error message

[16:41] <timotimo> aye, just like when you write "if($foo = 10)" that's not an if statement, that's a call to a sub called "if"

[16:42] <timotimo> in that case you don't have the "i thought i was declaring that variable?" situation you had with "sub($t)"

[16:43] *** unicodable6 joined
[16:44] <Manifest0> timotimo: thanks for the explanation :-)

[16:44] <timotimo> no prob

[16:44] *** skids joined
[16:47] <jgoff> Manifest0: It's one of the reasons I use parentheses sparingly.

[16:48] *** jgoff is now known as DrForr

[16:48] *** pharv joined
[16:49] <Manifest0> DrForr: yeah. I guess i'll have to do the same. I just started learning. I still to get experience in p6

[16:50] *** pharv_ joined
[16:53] *** pharv left
[16:54] *** pharv joined
[16:54] *** pharv_ left
[16:56] *** dakkar left
[16:58] *** pharv left
[17:09] *** Kaiepi left
[17:09] *** Kaiepi joined
[17:09] *** troys joined
[17:17] *** cdg left
[17:20] <jdv79> m: use Test;like(IO::Path.new("."),/\./)

[17:20] <camelia> rakudo-moar 2a8b17ae9: OUTPUT: «IO::Path is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at <tmp> line 1␤␤»

[17:20] <jdv79> nice

[17:21] <jdv79> anyway, the docs for Test::like say i coerces so what gives?

[17:21] <jdv79> "Marks a test as passed if the $value, when coerced to a string, matches the $expected-regex. "

[17:21] <jdv79> IO::Path::Str exists

[17:22] <Juerd> Either the documentation or the implementation is wrong

[17:23] <Juerd> It does not coerce. It even handles non-Str separately.

[17:26] <jdv79> i see that.  its not in S24 so i guess its up for  grabs

[17:26] <jdv79> but timotimo - why did you make that change?  the docs look correct before your change

[17:26] <timotimo> i did?

[17:27] <jdv79> https://github.com/rakudo/rakudo/commit/ba3cf4e5b459479b338dffd5a00ff2a07608b595#diff-3ef7087d6aa3112cc0c299c9903bf1c3

[17:27] <jdv79> maybe that should have been more like if it can't stringify then kick?

[17:28] <timotimo> hm, i think the problem you mentioned was in the code before i changed things

[17:28] <timotimo> like the commit message mentions, i had test code like "create an array, then call `like` on the different entries"

[17:28] <timotimo> and it used to bring down the whole test suite if there wasn't an entry at one of the locations

[17:28] <jdv79> it used to be just: $got ~~ $expected

[17:29] <jdv79> which would have wrked 

[17:29] <timotimo> ah, i see

[17:29] <timotimo> feel free to turn it into Str() then

[17:29] <jdv79> ok

[17:31] *** pierre___ joined
[17:32] *** char_var[buffer] joined
[17:35] *** pierre___ left
[17:35] *** ccntrq left
[17:39] *** kaare_ left
[17:39] *** ccntrq joined
[17:46] *** AlexDaniel left
[17:48] *** zakharyas left
[18:03] *** Blackraider joined
[18:06] *** espadrine joined
[18:11] <jdv79> shouldn't 'make t/spec/S24-testing/1-basic.t' work?

[18:11] *** Blackraider left
[18:13] *** Blackraider joined
[18:13] * skids breaks zef while --force-installing zef with it. :-(

[18:31] *** Blackraider left
[18:38] *** darutoko left
[18:46] *** smarty joined
[18:47] <smarty> 3

[18:48] *** eliasr joined
[18:49] *** smarty left
[19:03] *** pharv joined
[19:06] <rindolf> timotimo: here?

[19:07] *** pharv left
[19:17] *** cdg joined
[19:19] <Geth> ¦ doc: 0e59d162a9 | (Will "Coke" Coleda)++ | doc/Type/Hash.pod6

[19:19] <Geth> ¦ doc: fix typos

[19:19] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0e59d162a9

[19:19] <synopsebot> Link: https://doc.perl6.org/type/Hash

[19:21] *** cdg left
[19:26] <Kaiepi> is there something i'm doing wrong here? this is the only method in the class that's crashing for me, even though the native sub it uses works fine https://gist.github.com/Kaiepi/3f837104f6690934aef9bc4499181198

[19:30] *** pierre__ joined
[19:33] <timotimo> rindolf: briefly in between pieces of cooking

[19:33] <timotimo> going to cut some veggies right now, but feel free to ask something

[19:34] <rindolf> timotimo: any luck optimising my program?

[19:35] *** pierre__ left
[19:43] <Kaiepi> never mind, looking at the coredump it's the same problem that's breaking some other native stuff on my system

[19:44] <MasterDuke> rindolf: i asked him the same question yesterday, he had some info https://irclog.perlgeek.de/perl6-dev/2018-02-24#i_15853760

[19:45] <timotimo> rindolf: did you read backscroll?

[19:45] <timotimo> ah, thanks MasterDuke 

[19:45] <timotimo> note, however, that i do get a different result after i made that change :(

[19:45] <timotimo> so clearly some result in the middle passed the 64bit range

[19:45] *** konsolebox left
[19:47] <rindolf> timotimo: was I addressed and online?

[19:50] *** someuser joined
[19:52] <timotimo> possibly not online

[19:54] <moritz> we have public logs

[19:57] *** hoelzro left
[19:57] *** hoelzro joined
[19:58] <MasterDuke> rindolf: you said the equivalent code in perl5 ran much faster?

[19:59] <rindolf> MasterDuke: yes

[19:59] <rindolf> MasterDuke: about 20s here

[19:59] <rindolf> MasterDuke: pypy runs it in under a second

[20:00] *** comborico1611 joined
[20:00] <MasterDuke> hm. wouldn't perl5 also have problems if intermediate values are getting bigger than 64bit?

[20:01] <rindolf> MasterDuke: see https://github.com/shlomif/project-euler/tree/master/project-euler/618

[20:01] <rindolf> MasterDuke: i think so

[20:04] <MasterDuke> huh. i guess they don't get quite big enough to actually break things

[20:05] <El_Che> rindolf: do people use pypy nowadays? Most pythonistas I know don't

[20:06] *** domidumont left
[20:07] <El_Che> and google staying on 2.7 regular python and moving stuff to go instead of 3+pypy... 

[20:08] <rindolf> El_Che: i do for project euler

[20:08] <El_Che> rindolf: if you don't use a lot of libs it's indeed a great candidate

[20:08] <rindolf> MasterDuke: i am getting the same result from pypy3 and from p5

[20:09] <MasterDuke> i think timotimo has contributed to pypy in the past

[20:09] <rindolf> MasterDuke: on a core i3 machine

[20:09] <rindolf> El_Che: yes

[20:10] <timotimo> a tiny bit

[20:10] <timotimo> pypy is fantastic

[20:11] <El_Che> timotimo: does it fix the GIL thing?

[20:12] <El_Che> timotimo: how is it that fast btw? regular python is also C

[20:12] <El_Che> sounds interesting

[20:13] <rindolf> El_Che: pypy has jit and stuff like that

[20:14] <El_Che> a 50x speedup by jit? nice

[20:18] *** lichtkind joined
[20:19] <rindolf> timotimo: El_Che : MasterDuke : bye , gotta reboot

[20:21] *** rindolf left
[20:26] *** rindolf joined
[20:26] *** martinp2 joined
[20:34] <rindolf> hi all

[20:34] *** zakharyas joined
[20:37] *** someuser left
[20:39] <rindolf> timotimo: there are intermediate results as output

[20:42] *** xenotrope joined
[20:45] *** aindilis joined
[20:46] *** zakharyas left
[20:46] *** zakharyas joined
[20:46] *** lichtkind left
[20:47] <MasterDuke> man, a profile shows 231s spent in Int's infix:<%>

[20:55] *** SyrupThinker left
[20:55] <rindolf> MasterDuke: with my program?

[20:59] *** lichtkind joined
[21:00] *** someuser joined
[21:02] *** aindilis left
[21:03] *** aindilis joined
[21:04] <MasterDuke> yeah

[21:06] *** jeromemathias joined
[21:06] <jeromemathias> nice !

[21:10] <MasterDuke> there are 117598512 calls to it...

[21:15] *** hankache joined
[21:15] <rindolf> MasterDuke: ah

[21:16] <hankache> hello #perl6

[21:17] <rindolf> MasterDuke: can you shortcircuit it to int64 if it is within bounds?

[21:17] <rindolf> hankache: hi

[21:17] <hankache> hi rindolf

[21:17] <rindolf> hankache: how are you?

[21:17] <hankache> m: my $a := 3; $a = 4; say $a

[21:17] <camelia> rakudo-moar 2a8b17ae9: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[21:18] <hankache> rindolf: all is well and you?

[21:18] *** zakharyas left
[21:18] <hankache> m: my $a := 3; $a := 4; say $a

[21:18] <camelia> rakudo-moar 2a8b17ae9: OUTPUT: «4␤»

[21:18] <hankache> is this sound? ^^^^

[21:19] <rindolf> hankache: i got some pull-reqs for pysol fc

[21:19] *** Kaiepi left
[21:19] *** Kaiepi joined
[21:20] *** jeromemathias left
[21:21] <hankache> rindolf: nice!

[21:22] <rindolf> hankache: and i worked on some euler problems

[21:24] <buggable> New CPAN upload: CommonMark-0.0.3.tgz by JGOFF https://cpan.metacpan.org/authors/id/J/JG/JGOFF/Perl6/CommonMark-0.0.3.tgz

[21:25] *** Kaiepi left
[21:25] *** Kaiepi joined
[21:28] <timotimo> rindolf: what do you mean "there are intermediate results as output"?

[21:29] *** pierre__ joined
[21:30] <rindolf> timotimo: https://github.com/shlomif/project-euler/blob/master/project-euler/618/euler_618_v1.pl#L574

[21:30] <rindolf> timotimo: oh wait

[21:30] <rindolf> timotimo: seems like it is just for progress

[21:31] <timotimo> yeah, the interesting parts are: how big will $p * $m[$m - $p] get?

[21:31] <Geth> ¦ ecosystem: drforr++ created pull request #386: Add perl6-CommonMark

[21:31] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/386

[21:31] <timotimo> i don't expect it to get past 64bit, tbh

[21:32] <timotimo> the numbers in that array are all modulo'd to $BASE

[21:32] <timotimo> so i don't know where my code goes wrong

[21:32] *** Kaiepi left
[21:32] <rindolf> timotimo: p < 50k and the d < 1e9+7

[21:32] *** Kaiepi joined
[21:33] <timotimo> m: say (50_000 * 1e9).msb

[21:33] <camelia> rakudo-moar 2a8b17ae9: OUTPUT: «No such method 'msb' for invocant of type 'Num'␤  in block <unit> at <tmp> line 1␤␤»

[21:33] <timotimo> m: say (50_000 * 1e9).lsb

[21:33] <camelia> rakudo-moar 2a8b17ae9: OUTPUT: «No such method 'lsb' for invocant of type 'Num'␤  in block <unit> at <tmp> line 1␤␤»

[21:33] <timotimo> oh, must be Int'ed

[21:33] <timotimo> m: say (50_000 * 1e9).Int.msb

[21:33] <camelia> rakudo-moar 2a8b17ae9: OUTPUT: «45␤»

[21:34] <timotimo> that'd get past the 32bit where our big integer math gets around allocating actual big int structures, but not outside of where int64 would be enough

[21:34] *** pierre__ left
[21:34] *** Kaiepi left
[21:34] *** Kaiepi joined
[21:36] *** Kaiepi left
[21:37] *** Kaiepi joined
[21:37] <timotimo> or did i misunderstand?

[21:38] <rindolf> 64-bit is over 1e18

[21:38] <rindolf> m: say 1 << 63

[21:38] <camelia> rakudo-moar 2a8b17ae9: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of << to do left shift; in Perl 6 please use +< or ~<␤at <tmp>:1␤------> 3say 1 <<7⏏5 63␤»

[21:38] <rindolf> m: say 1 +< 63

[21:38] <camelia> rakudo-moar 2a8b17ae9: OUTPUT: «9223372036854775808␤»

[21:42] <Geth> ¦ doc: 55f79aba96 | (Zoffix Znet)++ | doc/Type/IO/CatHandle.pod6

[21:42] <Geth> ¦ doc: Document IO::CatHandle.handles

[21:42] <Geth> ¦ doc: 

[21:42] <Geth> ¦ doc: Closes https://github.com/rakudo/rakudo/issues/1546 R#1546

[21:42] <Geth> ¦ doc: Spec:  https://github.com/perl6/roast/commit/1a89a1e8f3

[21:42] <synopsebot> Link: https://doc.perl6.org/type/IO::CatHandle

[21:42] <Geth> ¦ doc: Impl:  https://github.com/rakudo/rakudo/commit/d5baa036fa

[21:42] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/55f79aba96

[21:42] <synopsebot> R#1546 [closed]: https://github.com/rakudo/rakudo/issues/1546 [IO] Implement IO::CatHandle.handles

[21:43] *** ribasushi joined
[21:44] *** jeromemathias joined
[21:44] <jeromemathias> perl6 c'est de la barre !

[21:58] <rindolf> jeromemathias: hi

[22:11] <MasterDuke> huh, making all variables ints, including the arrays, makes it slower

[22:12] <rindolf> MasterDuke: that sucks

[22:14] <MasterDuke> not by much, but i would have expected some sort of speedup instead

[22:14] *** cdg joined
[22:15] *** martinp2 left
[22:15] <rindolf> MasterDuke: perhaps we can use bit vectors

[22:15] <rindolf> like vec() in p5

[22:17] <timotimo> MasterDuke: that's what i was writing about, though; split the expression with the two array accesses into multiple lines, each assigning into a native int var, then it'll be faster

[22:17] <MasterDuke> wait, this is weird. why does my profile of the unmodified code show 45641 calls to calc_S?

[22:18] <MasterDuke> i just stuck 'int ' before every variable declaration

[22:19] *** cdg left
[22:20] <timotimo> yeah, it looked like that somehow incurs a whole lot of boxing and unboxing or something

[22:21] <MasterDuke> must be, it was still using the Int, Int candidate for infix:<%>

[22:29] <pmurias> if there are precompiled files in a path passed to -I rakudo should also find them?

[22:29] <MasterDuke> and how does postcircumfix:<[ ]> have so much exclusive time when all it does is call AT-POS?

[22:30] <timotimo> fwiw, in the fastest version i had, it was somehow still using the exact same line number for infix:<%> but even with the same number of calls it was significantly faster

[22:30] <timotimo> so .. ?!

[22:32] *** wamba left
[22:37] <pmurias> https://github.com/perl6/roast/blob/master/S10-packages/precompilation.t#L169 - this test is broken as we just don't find the module this way

[22:37] *** comborico1611 left
[22:38] <pmurias> (so if the interning works or not is not even tested)

[22:39] *** sena_kun left
[22:47] *** Rawriful joined
[22:48] *** hankache left
[22:52] *** jeromemathias left
[22:57] *** lichtkind left
[23:06] *** isBEKaml left
[23:06] *** someuser left
[23:15] *** Kaypie joined
[23:15] *** Kaiepi left
[23:17] *** circ-user-mVKnC left
[23:27] *** pmurias left
[23:27] *** Zoffix joined
[23:28] <Zoffix> pmurias, looks like just `'.pm.' ~ $precomp-ext` should be changed to simply `'.pm6'` here https://github.com/perl6/roast/blob/master/S10-packages/precompilation.t#L131  doesn't it?

[23:28] *** pierre joined
[23:29] <Zoffix> oh, nm, there's code that does stuff to it

[23:32] <Zoffix> Filed as S#391

[23:32] <synopsebot> S#391 [open]: https://github.com/perl6/roast/issues/391 Broken todo-ed precomp interning test

[23:33] *** Zoffix left
[23:35] *** rindolf left
[23:46] *** pierre left
[23:52] *** comborico1611 joined
[23:56] <MasterDuke> timotimo: it's definitely using the Int,Int infix:<%> candidate. i added a note() to the native candidate and it's never getting printed

