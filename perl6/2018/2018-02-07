[00:07] *** dct left
[00:07] *** klapperl left
[00:10] *** Rawriful left
[00:11] *** dct joined
[00:11] *** perlpilot left
[00:12] *** AlexDaniel` left
[00:13] *** unclechu left
[00:13] *** mack[m] left
[00:13] *** tadzik left
[00:13] *** Garland_g[m] left
[00:13] *** ilmari[m] left
[00:13] *** Matthew[m] left
[00:13] *** mienaikage left
[00:13] *** CIAvash[m] left
[00:14] *** klapperl joined
[00:14] *** wictory[m] left
[00:15] *** evalable6 left
[00:15] *** evalable6 joined
[00:15] *** reportable6 left
[00:15] *** squashable6 left
[00:15] *** releasable6 left
[00:15] *** johnnymacs left
[00:16] *** bisectable6 left
[00:23] <AlexDaniel> .tell Zoffix I don't use twitter, but occasionally I read your feed. It's great, I love it. Very positive and fun, please keep it going ♥

[00:23] <yoleaux> AlexDaniel: I'll pass your message to Zoffix.

[00:27] *** statisfiable6 left
[00:27] *** greppable6 left
[00:27] *** bloatable6 left
[00:27] *** coverable6 left
[00:27] *** reportable6 joined
[00:27] *** greppable6 joined
[00:27] *** squashable6 joined
[00:27] *** statisfiable6 joined
[00:27] *** ChanServ sets mode: +v statisfiable6

[00:27] *** bloatable6 joined
[00:27] *** ChanServ sets mode: +v bloatable6

[00:27] *** coverable6 joined
[00:39] *** mcmillhj left
[00:39] *** brrt left
[00:41] *** MasterDuke joined
[00:44] *** mienaikage joined
[00:51] *** mcmillhj joined
[00:51] *** cdg_ left
[00:52] *** cdg joined
[00:52] *** skids joined
[00:56] *** mcmillhj left
[00:59] *** mcmillhj joined
[01:04] *** mcmillhj left
[01:05] *** shinobi-cl joined
[01:08] *** aborazmeh joined
[01:08] *** aborazmeh left
[01:08] *** aborazmeh joined
[01:08] *** dct left
[01:12] *** leont left
[01:13] *** bisectable6 joined
[01:13] *** releasable6 joined
[01:15] *** markong left
[01:15] *** mcmillhj joined
[01:21] *** mcmillhj left
[01:24] *** tadzik joined
[01:24] *** CIAvash[m] joined
[01:24] *** unclechu joined
[01:24] *** mack[m] joined
[01:24] *** Matthew[m] joined
[01:24] *** wictory[m] joined
[01:24] *** ilmari[m] joined
[01:24] *** Garland_g[m] joined
[01:24] *** AlexDaniel` joined
[01:31] *** mcmillhj joined
[01:36] *** mcmillhj left
[01:55] *** Wenjie1 joined
[01:56] *** aborazmeh left
[02:03] *** aindilis left
[02:05] *** MasterDuke_ joined
[02:05] *** MasterDuke left
[02:06] *** Zoffix joined
[02:08] *** MasterDuke_ is now known as MasterDuke

[02:10] *** Actualeyes joined
[02:10] <Zoffix> Man, I'm surprised my postfix:<++> optimization actually comes out 25% slower. I'm binding to a temp local var and rewriting the op to prefix:<++>: https://temp.perl6.party/pre.html

[02:11] <Zoffix> At worst, I expected it to be equal.

[02:12] <Zoffix> And here are the Int candidates my bench is hitting. The postfix one defines a lexical var (I'm guessing gets lowered to local) https://github.com/rakudo/rakudo/blob/052a0bbef/src/core/Int.pm#L212-L222

[02:12] <Zoffix> Wonder why it's slower

[02:17] <Geth> ¦ whateverable: 79b158edf1 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[02:17] <Geth> ¦ whateverable: New bot: Notable

[02:17] <Geth> ¦ whateverable: 

[02:17] <Geth> ¦ whateverable: Resolves #285.

[02:17] <Geth> ¦ whateverable: 

[02:17] <Geth> ¦ whateverable: Some usage examples are shown on the wiki:

[02:17] <Geth> ¦ whateverable: https://github.com/perl6/whateverable/wiki/Notable

[02:17] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/79b158edf1

[02:18] *** notable6 joined
[02:18] <MasterDuke> Zoffix: does --profile show anything interesting? or a perf profile?

[02:19] <AlexDaniel> weekly: New bot: Notable https://github.com/perl6/whateverable/wiki/Notable

[02:19] <notable6> AlexDaniel, Noted!

[02:20] <AlexDaniel> welcome our new bot :)

[02:20] <AlexDaniel> not sure if that's going to be super useful, but let's see how it goes

[02:20] <AlexDaniel> notable6: weekly

[02:20] <notable6> AlexDaniel, 1 note: 2018-02-07T02:19:47Z <AlexDaniel>: New bot: Notable https://github.com/perl6/whateverable/wiki/Notable

[02:20] <quotable6> AlexDaniel, OK, working on it! This may take up to three minutes (4506639 messages to process)

[02:21] <AlexDaniel> … quotable… you idiot

[02:21] <geekosaur> heh

[02:21] <Zoffix> notable6: what do you do?

[02:21] <notable6> Zoffix, Noted!

[02:21] <Zoffix> notable6: what do you do?

[02:21] <notable6> Zoffix, Noted!

[02:21] *** quotable6 left
[02:21] <Zoffix> notable6: what

[02:21] <notable6> Zoffix, 2 notes: 2018-02-07T02:21:32Z <Zoffix>: do you do?  ;  2018-02-07T02:21:35Z <Zoffix>: do you do?

[02:21] *** quotable6 joined
[02:21] <Zoffix> mmhhh

[02:21] <AlexDaniel> :D

[02:22] <AlexDaniel> notable6: wiki

[02:22] <notable6> AlexDaniel, https://github.com/perl6/whateverable/wiki/Notable

[02:22] <AlexDaniel> ↑ some examples there

[02:25] <Zoffix> MasterDuke: not really. Though for some reason there are 10000029 calls to infix:<+> in my slower version and 10000019 calls to infix:<+> in the faster version.... why it isn't the same or 10000000 calls... I dunno

[02:26] <Zoffix> m: my $i = 1; my $z; { for ^10000_000 { $z = 1 + $i++ }; say now - ENTER now }

[02:26] <camelia> rakudo-moar 052a0bbef: OUTPUT: «2.1192100␤»

[02:26] <Zoffix> m: my $i = 1; my $z; { for ^10000_000 { $z = 1 + ++$i }; say now - ENTER now }

[02:26] <camelia> rakudo-moar 052a0bbef: OUTPUT: «2.50181834␤»

[02:27] <Zoffix> Even without my optimization business prefix ++ somehow ends up being slower than postfix. dafuq?

[02:29] <Geth> ¦ whateverable/master: 4 commits pushed by (Aleks-Daniel Jakimenko-Aleksejev)++

[02:29] <Geth> ¦ whateverable/master: ee73dcd3fc | Don't fail to gist something if there are empty files

[02:29] <Geth> ¦ whateverable/master: e0d72a635b | Oops, forgot to commit this

[02:29] <Geth> ¦ whateverable/master: 7d2e1fe1cf | Don't overmangle nicknames when testing

[02:29] <Geth> ¦ whateverable/master: 425edc49ed | Quotable, Notable… who cares, right?

[02:29] <Geth> ¦ whateverable/master: review: https://github.com/perl6/whateverable/compare/79b158edf1...425edc49ed

[02:31] <Geth> ¦ whateverable: e000fa2b51 | (Aleks-Daniel Jakimenko-Aleksejev)++ | services/whateverable-all.service

[02:31] <Geth> ¦ whateverable: Autorun notable along with other bots

[02:31] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/e000fa2b51

[02:33] *** mcmillhj joined
[02:33] <Zoffix> gonna comment it out for now then

[02:35] *** saramaebee joined
[02:37] <MasterDuke> m: my $i = 1; my $z; { for ^10000_000 { ++$i; $z = 1 + $i }; say now - ENTER now }

[02:37] <camelia> rakudo-moar 052a0bbef: OUTPUT: «3.9372170␤»

[02:37] *** mcmillhj left
[02:37] <MasterDuke> m: my $i = 1; my $z; { for ^10000_000 { $i++; $z = 1 + $i }; say now - ENTER now }

[02:37] <camelia> rakudo-moar 052a0bbef: OUTPUT: «3.4911480␤»

[02:38] <MasterDuke> and why is ^^^ even slower?

[02:38] <AlexDaniel> m: say <4 8 15 16>

[02:38] <camelia> rakudo-moar 052a0bbef: OUTPUT: «(4 8 15 16)␤»

[02:38] <AlexDaniel> m: put <4 8 15 16>

[02:38] <camelia> rakudo-moar 052a0bbef: OUTPUT: «4 8 15 16␤»

[02:38] <AlexDaniel> saramaebee: ↑

[02:38] <saramaebee> THANKS

[02:39] <saramaebee> that makes my life so much easier

[02:39] * Zoffix saw no question...

[02:39] * Zoffix guesses AlexDaniel is a mind reader...

[02:39] <Zoffix> ZofBot: it's only logical!

[02:39] <ZofBot> Zoffix, But, Joe, you mustn't stand in the way of her marrying the man she's in love with

[02:39] <AlexDaniel> Zoffix: I am a pm reader :D

[02:39] <saramaebee> in PMs ;)

[02:40] <AlexDaniel> no evals in pms so had to move here :)

[02:40] * AlexDaniel wishes he was a mind writer

[02:41] <saramaebee> on the bright side, you've forced me to learn about regex, which is something ive been putting off for months now

[02:42] <Zoffix> MasterDuke: damn yeah :( And my "optimization" makes it 30% slower even in void context

[02:42] <AlexDaniel> saramaebee: forced is a strong word :)

[02:42] <saramaebee> :P

[02:43] <saramaebee> for me to figure out what the hell was going on, i had to. otherwise there's no way i'd be able to use it

[02:43] <MasterDuke> Zoffix: just looked at a profile, { $i++; $z = 1 + $i } has an extra 10000000 sink calls

[02:43] *** mcmillhj joined
[02:43] <Zoffix> Filed as R#1491

[02:43] <synopsebot> R#1491 [open]: https://github.com/rakudo/rakudo/issues/1491 [perf][weird] Non-void $i++ is somehow 13% faster than ++$i

[02:44] <Zoffix> MasterDuke: and yet it comes out faster?

[02:44] <MasterDuke> no, it's slower

[02:44] <Zoffix> Above it's faster

[02:45] <Zoffix> The one I was measuring has same amount of sink calls in both versions; 38

[02:45] <MasterDuke> ? 3.9s for prefix in void vs 2.5 for prefix not in void

[02:46] <MasterDuke> m: my $i = 1; my $z; { for ^10000_000 { ++$i; $z = 1 + $i }; say now - ENTER now }

[02:46] <camelia> rakudo-moar 052a0bbef: OUTPUT: «3.7436773␤»

[02:46] <MasterDuke> m: my $i = 1; my $z; { for ^10000_000 { $z = 1 + ++$i }; say now - ENTER now }

[02:46] <Zoffix> Ah. I was talking about $++ vs ++$

[02:46] <camelia> rakudo-moar 052a0bbef: OUTPUT: «2.4679179␤»

[02:46] <MasterDuke> right, that's the same. postfix in void is faster than prefix in void

[02:46] *** ilbot3 left
[02:47] <Zoffix> s: 42, 'sink', \()

[02:47] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/052a0bbef/src/core/Mu.pm#L13

[02:48] <Zoffix> Wonder how to make those calls not be calls at all

[02:48] *** mcmillhj left
[02:52] <MasterDuke> can the static optimizer see that a call has no body and just remove it?

[02:53] <Zoffix> As far as I know, it can't look at method calls at all.

[02:53] <Zoffix> I could mix in a different Mu.sink at runtime and if it removed the call, the code becomes broken

[02:53] *** ilmari[m] left
[02:54] <shinobi-cl> i'm about to upload a perl6 module, it is a bidimensional array, spreadsheet like, if anyone wants to make a small review or give some advice.. so i can make it more useful for perl6 users....    https://github.com/shinobi/Data-StaticTable/wiki/How-To

[02:54] *** mienaikage left
[02:54] *** wictory[m] left
[02:54] *** Matthew[m] left
[02:55] *** Garland_g[m] left
[02:55] *** CIAvash[m] left
[02:55] *** AlexDaniel` left
[02:55] *** mack[m] left
[02:55] *** tadzik left
[02:55] *** unclechu left
[02:55] <Zoffix> shinobi-cl: META.info file isn't needed. It's an old pre-first-stable-language-release format

[02:55] *** shinobi-cl left
[02:55] *** shinobi-cl joined
[02:56] <Zoffix> shinobi-cl: also, you have source-url as `git://github.com/shinobi/Data-StaticTable.git` on systems without git it won't be installable. It can be better to set it to https://github.com/shinobi/Data-StaticTable.git instead

[02:57] *** bisectable6 left
[02:57] *** releasable6 left
[02:57] *** releasable6 joined
[02:57] *** bisectable6 joined
[02:57] *** evalable6 left
[02:58] *** ilbot3 joined
[02:58] *** ChanServ sets mode: +v ilbot3

[02:58] *** quotable6 left
[02:58] *** MasterDuke left
[02:59] *** mcmillhj joined
[03:00] *** MasterDuke joined
[03:04] *** mcmillhj left
[03:14] *** MasterDuke left
[03:16] *** jeromelanteri joined
[03:19] *** MasterDuke joined
[03:25] *** xtreak joined
[03:27] *** Zoffix left
[03:29] *** mcmillhj joined
[03:30] *** xtreak left
[03:32] *** cdg left
[03:32] *** ufobat_ joined
[03:35] *** ufobat left
[03:55] *** quotable6 joined
[03:55] *** ChanServ sets mode: +v quotable6

[04:03] *** Actualeyes left
[04:12] *** evalable6 joined
[04:16] *** blumsicle joined
[04:26] *** AlexDaniel left
[04:29] *** mcmillhj left
[04:35] *** epony left
[04:38] *** Cabanossi left
[04:38] *** Cabanossi joined
[04:42] *** mcmillhj joined
[04:43] *** MasterDuke left
[04:46] *** mcmillhj left
[04:50] *** xtreak joined
[04:52] *** skids left
[05:15] *** sacomo left
[05:31] *** blumsicle left
[05:31] *** blumsicle joined
[05:35] *** phogg left
[05:38] *** wamba joined
[05:39] *** Actualeyes joined
[05:40] *** AlexDaniel` joined
[05:42] *** phogg joined
[05:42] *** phogg left
[05:42] *** phogg joined
[05:42] *** espadrine_ left
[05:49] *** Matthew[m] joined
[05:50] *** curan joined
[05:53] <ZzZombo> m: my Int:D @a;for <1 2 3> {@a.tail.=new($_)};say @a

[05:53] <camelia> rakudo-moar d4712ab9c: OUTPUT: «Cannot modify an immutable Str (Nil)␤  in block <unit> at <tmp> line 1␤␤»

[05:54] <ZzZombo> m: my Int:D @a;for <1 2 3> {@a[+@a].=new($_)};say @a

[05:54] <camelia> rakudo-moar d4712ab9c: OUTPUT: «You cannot create an instance of this type (Int:D)␤  in block <unit> at <tmp> line 1␤␤»

[05:54] <ZzZombo> ??

[05:55] <ZzZombo> m: my Int @a;for <1 2 3> {@a[+@a].=new($_)};say @a

[05:55] <camelia> rakudo-moar d4712ab9c: OUTPUT: «[1 2 3]␤»

[05:56] *** Garland_g[m] joined
[05:56] *** ufobat_ left
[05:57] <ZzZombo> m: class C {has $.a};my C @a;for <1 2 3> -> $a {@a[+@a].=new(:$a)};say @a

[05:57] <camelia> rakudo-moar d4712ab9c: OUTPUT: «[C.new(a => IntStr.new(1, "1")) C.new(a => IntStr.new(2, "2")) C.new(a => IntStr.new(3, "3"))]␤»

[05:58] <ZzZombo> What, why the `IntStr`s?

[06:03] *** khw left
[06:07] <ZzZombo> m: class A {class B {say PARENT}}

[06:07] <camelia> rakudo-moar d4712ab9c: OUTPUT: «Nil␤»

[06:07] <ZzZombo> m: class A {our $a=1;class B {say $PARENT::a}}

[06:07] <camelia> rakudo-moar d4712ab9c: OUTPUT: «(Any)␤»

[06:07] <ZzZombo> m: class A {our $a=1;class B {say $OUTER::a}}

[06:07] <camelia> rakudo-moar d4712ab9c: OUTPUT: «1␤»

[06:07] <ZzZombo> hm

[06:08] <ZzZombo> m: class A {our $a=1;class B {say OUTER}}

[06:08] <camelia> rakudo-moar d4712ab9c: OUTPUT: «(OUTER)␤»

[06:08] *** unclechu joined
[06:09] <ZzZombo> m: class A {has $.a;class B {say OUTER.^methods}}

[06:09] <camelia> rakudo-moar d4712ab9c: OUTPUT: «No such method 'methods' for invocant of type 'Perl6::Metamodel::ModuleHOW'␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:09] <ZzZombo> m: class A {has $.a;class B {say PARENT.^methods}}

[06:09] <camelia> rakudo-moar d4712ab9c: OUTPUT: «(new Numeric Str sink AT-POS AT-KEY BIND-POS BIND-KEY ASSIGN-POS ASSIGN-KEY STORE push append unshift prepend FALLBACK ords chrs chop chomp iterator Set SetHash Bag BagHash Mix MixHash gist)␤»

[06:10] <ZzZombo> m: class A {has $.a;class B {say PARENT.WHAT}}

[06:10] <camelia> rakudo-moar d4712ab9c: OUTPUT: «Nil␤»

[06:10] <ZzZombo> m: class A {has $.a;class B {say PARENT}}

[06:10] <camelia> rakudo-moar d4712ab9c: OUTPUT: «Nil␤»

[06:10] <ZzZombo> m: class A {has $.a;class B {say PARENT.HOW}}

[06:10] <camelia> rakudo-moar d4712ab9c: OUTPUT: «Perl6::Metamodel::ClassHOW.new␤»

[06:10] <ZzZombo> m: class A {has $.a;class B {say PARENT.methods}}

[06:10] <camelia> rakudo-moar d4712ab9c: OUTPUT: «Nil␤»

[06:10] <ZzZombo> ah derp

[06:10] <ZzZombo> I get it

[06:11] <ZzZombo> m: class A {has $.a;class B {}};say A::B::PARENT

[06:11] <camelia> rakudo-moar d4712ab9c: OUTPUT: «Could not find symbol '&PARENT'␤  in block <unit> at <tmp> line 1␤␤»

[06:14] *** mack[m] joined
[06:16] *** troys left
[06:20] *** CIAvash[m] joined
[06:22] *** xtreak_ joined
[06:22] *** xtreak left
[06:22] *** mienaikage joined
[06:23] *** tadzik joined
[06:23] <Xliff> <ZzZombo> m: my Int:D @a;for <1 2 3> {@a[+@a].=new($_)};say @a

[06:24] <Xliff> ZzZombo: Because < > coerces contents to Str.

[06:24] <Xliff> <ZzZombo> m: my Int:D @a;for (1, 2, 3) {@a[+@a].=new($_)};say @a

[06:24] <Xliff> m: my Int:D @a;for (1, 2, 3) {@a[+@a].=new($_)};say @a

[06:24] <camelia> rakudo-moar d4712ab9c: OUTPUT: «You cannot create an instance of this type (Int:D)␤  in block <unit> at <tmp> line 1␤␤»

[06:24] <Xliff> m: my Int @a;for (1, 2, 3) {@a[+@a].=new($_)};say @a

[06:24] <camelia> rakudo-moar d4712ab9c: OUTPUT: «[1 2 3]␤»

[06:25] *** ilmari[m] joined
[06:25] <Xliff> m: class C {has $.a};my C @a;for (1, 2, 3) -> $a {@a[+@a].=new(:$a)};say @a

[06:25] <camelia> rakudo-moar d4712ab9c: OUTPUT: «[C.new(a => 1) C.new(a => 2) C.new(a => 3)]␤»

[06:25] *** wictory[m] joined
[06:40] *** xtreak_ left
[06:41] *** xtreak joined
[06:48] *** domidumont joined
[06:50] *** eliasr left
[06:51] <ecocode> mmm... say so 4 == (1,2,3,4).any is cool

[06:52] <ecocode> Is there a way to do this :

[06:52] <ecocode> p6: say so (1,2) == ((2,3),(4,3),(1,2)).any

[06:53] <camelia> rakudo-moar d4712ab9c: OUTPUT: «True␤»

[06:53] <ecocode> p6: say so (1,2) == ((2,3),(4,3),(1,3)).any

[06:53] <camelia> rakudo-moar d4712ab9c: OUTPUT: «True␤»

[06:53] <ecocode> hmmm... always returns True

[06:53] <ecocode> can this be done ?

[06:55] *** domidumont left
[06:55] *** domidumont joined
[07:00] *** saramaebee left
[07:04] <moritz> ecocode: == is numeric comparison, and (1, 2) == (2, 3) compares two lists numerically

[07:04] <moritz> which means, compares them by the number of elements

[07:04] <moritz> m: say (1, 2) eqv (1, 2)

[07:04] <camelia> rakudo-moar d4712ab9c: OUTPUT: «True␤»

[07:04] <moritz> m: say (1, 2) eqv (1, 3)

[07:04] <camelia> rakudo-moar d4712ab9c: OUTPUT: «False␤»

[07:05] <moritz> m: say (1, 2) eqv ((1, 2), (3, 4)).any

[07:05] <camelia> rakudo-moar d4712ab9c: OUTPUT: «True␤False␤»

[07:05] <moritz> m: say so (1, 2) eqv ((1, 2), (3, 4)).any

[07:05] <camelia> rakudo-moar d4712ab9c: OUTPUT: «True␤»

[07:05] <moritz> m: say so (1, 2) eqv ((1, 5), (3, 4)).any

[07:05] <camelia> rakudo-moar d4712ab9c: OUTPUT: «False␤»

[07:05] <moritz> ecocode: ^^ this seems to do what you want

[07:08] *** domidumont left
[07:10] *** xtreak left
[07:10] *** xtreak joined
[07:12] *** shinobi-cl left
[07:12] *** xtreak left
[07:12] *** xtreak_ joined
[07:17] <ecocode> yeah !

[07:17] <ecocode> awesome stuff

[07:26] *** blumsicle left
[07:27] *** blumsicle joined
[07:29] *** darutoko joined
[07:30] *** domidumont joined
[07:36] *** rindolf joined
[07:39] *** abraxxa joined
[07:44] <lookatme> m: say (1, 3) == (3, 4)

[07:44] <camelia> rakudo-moar d4712ab9c: OUTPUT: «True␤»

[07:44] <lookatme> m: say (1, 3) eqv (3, 4)

[07:44] <camelia> rakudo-moar d4712ab9c: OUTPUT: «False␤»

[07:44] <lookatme> m: say (1, 3) eq (3, 4)

[07:44] <camelia> rakudo-moar d4712ab9c: OUTPUT: «False␤»

[07:55] *** lowbro joined
[07:55] *** lowbro left
[07:55] *** lowbro joined
[08:03] *** someuser joined
[08:13] *** konsolebox left
[08:15] *** konsolebox joined
[08:18] <lookatme> How do I forward declared a class which inside a module ?

[08:19] <ZzZombo> How can I distinguish two multi candidates based on a values of named parameter? Like one variant should be called for `True` values, the other for `False`.

[08:19] <lookatme> m: class Foo::Bar { };   module Foo { class Bar { } };

[08:19] <camelia> rakudo-moar d4712ab9c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol 'Bar'␤at <tmp>:1␤------> 3s Foo::Bar { };   module Foo { class Bar7⏏5 { } };␤    expecting any of:␤        generic role␤»

[08:19] <ZzZombo> m: class C {...}

[08:19] <camelia> rakudo-moar d4712ab9c: OUTPUT: «The following packages were stubbed but not defined:␤    C␤»

[08:19] <lookatme> m: class Foo::Bar { ... };   module Foo { class Bar { } };

[08:19] <camelia> rakudo-moar d4712ab9c: ( no output )

[08:20] <lookatme> m: class Foo::Block { ... };   module Foo { class Block { } };

[08:20] <camelia> rakudo-moar d4712ab9c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol 'Block'␤at <tmp>:1␤------> 3lock { ... };   module Foo { class Block7⏏5 { } };␤    expecting any of:␤        generic role␤»

[08:20] <lookatme> :)

[08:22] <lookatme> m: multi sub f(:$abc where :!so) { say "False"; }  multi sub f(:$abc where :so) { say "False"; };  f

[08:22] <camelia> rakudo-moar d4712ab9c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3sub f(:$abc where :!so) { say "False"; }7⏏5  multi sub f(:$abc where :so) { say "Fa␤    expecting any of:␤       …»

[08:22] <lookatme> m: multi sub f(:$abc where :!so) { say "False"; };  multi sub f(:$abc where :so) { say "False"; };  f

[08:22] <camelia> rakudo-moar d4712ab9c: OUTPUT: «False␤»

[08:22] <lookatme> m: multi sub f(:$abc where :!so) { say "False"; };  multi sub f(:$abc where :so) { say "False"; };  f(:abc)

[08:22] <camelia> rakudo-moar d4712ab9c: OUTPUT: «False␤»

[08:22] <ZzZombo> m: class C {...};class C{}

[08:22] <camelia> rakudo-moar d4712ab9c: ( no output )

[08:23] <lookatme> m: multi sub f(:$abc where :!so) { say "False"; };  multi sub f(:$abc where :so) { say "True"; };  f(:abc)

[08:23] <camelia> rakudo-moar d4712ab9c: OUTPUT: «True␤»

[08:26] *** Pilu joined
[08:26] *** Pilu_ joined
[08:28] <ZzZombo> m: multi x(:a where !!1){1};multi x(:a where !1){0};say x :a

[08:28] <camelia> rakudo-moar d4712ab9c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3multi x(:7⏏5a where !!1){1};multi x(:a where !1){0};␤»

[08:28] <ZzZombo> m: multi x(:$a where !!1){1};multi x(:$a where !1){0};say x :a

[08:28] <camelia> rakudo-moar d4712ab9c: OUTPUT: «1␤»

[08:37] *** konsolebox left
[08:39] *** konsolebox joined
[08:40] *** xtreak_ left
[08:41] *** xtreak joined
[08:41] *** Wenjie1 left
[08:42] *** someuser left
[08:45] *** xtreak left
[09:00] *** scimon joined
[09:00] *** ufobat joined
[09:02] <ecocode> awesome:

[09:02] <ecocode> p6: say so (4,3,5).sort eqv (5,3,4).sort

[09:02] <camelia> rakudo-moar d4712ab9c: OUTPUT: «True␤»

[09:02] *** wamba left
[09:05] *** leont joined
[09:10] *** konsolebox left
[09:10] *** konsolebox joined
[09:14] *** zakharyas joined
[09:21] *** dakkar joined
[09:24] *** konsolebox left
[09:26] *** konsolebox joined
[09:30] <ZzZombo> m: say ?<a b d c> [>>] <a b c d>

[09:30] <camelia> rakudo-moar d4712ab9c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in bracketed infix; couldn't find final ']' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3say ?<a b d c> [>>7⏏5] <a b c d>␤    expecting any of:␤    …»

[09:30] <ZzZombo> m: say ?<a b d c> [>] <a b c d>

[09:30] <camelia> rakudo-moar d4712ab9c: OUTPUT: «False␤»

[09:31] *** xtreak joined
[09:46] *** Lynx_ joined
[09:51] *** TEttinger left
[10:02] *** wamba joined
[10:08] *** leont left
[10:10] *** Actualeyes left
[10:32] *** Zoffix joined
[10:34] <ZzZombo> m: multi x(True :$a){1};multi x(False :$a){0};say x :a

[10:34] <camelia> rakudo-moar d4712ab9c: OUTPUT: «Potential difficulties:␤    Literal values in signatures are smartmatched against and smartmatch with `True` will always succeed. Use the `where` clause instead.␤    at <tmp>:1␤    ------> 3multi x(True7⏏5 :$a){1};multi x(False :$a){0};say …»

[10:34] <ZzZombo> m: multi x(:$a where ?*){1};multi x(:$a where !?*){0};say x :a

[10:34] <camelia> rakudo-moar d4712ab9c: OUTPUT: «1␤»

[10:35] <ZzZombo> m: multi x(:$a where ?*){1};multi x(:$a where !?*){0};say x :a<1>

[10:35] <camelia> rakudo-moar d4712ab9c: OUTPUT: «1␤»

[10:35] <ZzZombo> m: multi x(Bool:D :$a where ?*){1};multi x(Bool:D :$a where !?*){0};say x :a<1>

[10:35] <camelia> rakudo-moar d4712ab9c: OUTPUT: «Cannot resolve caller x(:a(1)); none of these signatures match:␤    (Bool:D :$a where { ... })␤    (Bool:D :$a where { ... })␤  in block <unit> at <tmp> line 1␤␤»

[10:35] <ZzZombo> m: multi x(Bool:D :$a where ?*){1};multi x(Bool:D :$a where !?*){0};say x :a(!0)

[10:35] <camelia> rakudo-moar d4712ab9c: OUTPUT: «1␤»

[10:36] <jnthn> :a and :!a are a => True and a => False respectively

[10:36] <jnthn> Also, ! boolifies, so where !* is sufficient

[10:36] *** wamba left
[10:38] <Zoffix> ZzZombo: Int:D is a DefiniteHOW object, hence the error you were getting. I think it can be made to DWIMM. I opened R#1493

[10:38] <synopsebot> R#1493 [open]: https://github.com/rakudo/rakudo/issues/1493 .= call on DefiniteHOW tries to create an instance of DefiniteHOW

[10:39] <Zoffix> ZzZombo: as for IntStr, it's from the `< ... >` angle brackets. They create allomorphs for anything that looks like numbers. You can hyper it like `<42 5>».Numeric` to force Numeric portion only and I think there was a shorter way to do that too

[10:39] <jnthn> m: my Int:D $a; say $a.^name

[10:39] <camelia> rakudo-moar d4712ab9c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable definition of type Int:D requires an initializer␤at <tmp>:1␤------> 3my Int:D $a7⏏5; say $a.^name␤    expecting any of:␤        constraint␤»

[10:40] <jnthn> grr :)

[10:40] <jnthn> m: my Int:D $a = Nil; say $a.^name

[10:40] <camelia> rakudo-moar d4712ab9c: OUTPUT: «Type check failed in assignment to $a; expected type Int:D cannot be itself (perhaps Nil was assigned to a :D which had no default?)␤  in block <unit> at <tmp> line 1␤␤»

[10:40] <Zoffix> m: my Int:D $a = 42; say $a.^name

[10:40] <camelia> rakudo-moar d4712ab9c: OUTPUT: «Int␤»

[10:40] <jnthn> Yeah but

[10:40] <jnthn> That doesn't tell you what was in there in the first place :P

[10:40] <jnthn> The point I was going to try and make was that the type constraint of a Scalar and its default value don't need to be the same

[10:41] <Zoffix> Ah

[10:41] <jnthn> So an Int:D decl should probably make the constraint be Int:D and the default value be Int

[10:41] <jnthn> Because the latter is what is used for the .= call

[10:41] <jnthn> This is the same mechanism by which every Scalar without a type has a type constraint of Mu, but a default value of Any

[10:45] *** stmuk_ joined
[10:46] *** stmuk left
[10:53] *** aindilis joined
[10:57] *** zakharyas left
[11:02] *** someuser joined
[11:04] *** Alikzus left
[11:05] <Zoffix> m: my Int:D @a; say @a[^10]; say @a[10] .= new: 42

[11:05] <camelia> rakudo-moar 2847e509d: OUTPUT: «((Int:D) (Int:D) (Int:D) (Int:D) (Int:D) (Int:D) (Int:D) (Int:D) (Int:D) (Int:D))␤You cannot create an instance of this type (Int:D)␤  in block <unit> at <tmp> line 1␤␤»

[11:06] <Zoffix> would these be plain Ints?

[11:07] *** Alikzus joined
[11:09] *** domidumont left
[11:12] <tyil> Zoffix: is there a way to ignore other nicks/hostmasks in IRC::Client yet? There's another bot in my channel, and I'd like my bot to ignore it

[11:12] <tyil> I can add an issue for it if not

[11:13] <Zoffix> tyil: it's job for a plugin IMO. Here's how I do it in ZofBot: https://github.com/zoffixznet/perl6-ZofBot/blob/master/lib/ZofBot/Plugin/IgnoreList.pm6

[11:14] <Zoffix> This portion in particular: https://github.com/zoffixznet/perl6-ZofBot/blob/master/lib/ZofBot/Plugin/IgnoreList.pm6#L7-L15

[11:14] <Zoffix> An early plugin that matches messages from Ignored users with empty action body so the messages just get consumed and never get to any other plugins

[11:15] <tyil> oh, that's pretty neat tbh

[11:15] <tyil> thanks

[11:20] <jnthn> Zoffix: Yes, I'd expect so

[11:21] <jnthn> Zoffix: With luck it'll fall out of the same fix for Scalar, since the Mu/Any distinction applies to Array/Hash too

[11:21] *** zakharyas joined
[11:22] <Zoffix> There were different places to stick the fix in for Array/Hash

[11:23] <jnthn> ah, ok. Maybe time for some factoring out?

[11:24] <Zoffix> I stuck a "is a definite how? then use .^base_type" over here: https://github.com/rakudo/rakudo/blob/master/src/Perl6/World.nqp#L1733 and for hashes it goes here: https://github.com/rakudo/rakudo/blob/master/src/Perl6/World.nqp#L1692 and for arrays here: https://github.com/rakudo/rakudo/blob/master/src/Perl6/World.nqp#L1625

[11:25] <Zoffix> seeing some failing spectests, so I guess that ain't the right fix :)

[11:25] <Zoffix> Gotta go now, but will try again in the evening

[11:25] <Zoffix> This was the patch I tried: https://gist.github.com/zoffixznet/e92154b8107eac6bc154866f54cebb87

[11:37] *** lowbro left
[11:39] *** Zoffix left
[11:42] <timotimo> m: .perl.say for +«<42 5>

[11:42] <camelia> rakudo-moar 2847e509d: OUTPUT: «42␤5␤»

[11:42] <timotimo> m: .perl.say for <42 5>

[11:42] <camelia> rakudo-moar 2847e509d: OUTPUT: «IntStr.new(42, "42")␤IntStr.new(5, "5")␤»

[11:42] <timotimo> that's probably the shorter way zoffix was remembering

[11:42] *** markong joined
[11:57] *** wamba joined
[11:58] *** zakharyas left
[11:59] *** MasterDuke joined
[12:04] *** zakharyas joined
[12:05] *** aindilis left
[12:05] *** aindilis` joined
[12:09] *** zakharyas left
[12:09] *** zakharyas joined
[12:14] *** Alikzus left
[12:15] *** cpage joined
[12:17] *** saramaebee joined
[12:24] *** shinobi-cl joined
[12:30] *** gregf_ joined
[12:32] *** cdg joined
[12:34] *** xtreak left
[12:36] *** mcmillhj joined
[12:37] *** cdg left
[12:37] *** konsolebox left
[12:38] <ZzZombo> Regarding `:D` constraint, I'm quite surprised there are spec tests that are actually designed this way. Makes little sense to me.

[12:39] *** konsolebox joined
[12:45] *** wamba left
[12:52] *** konsolebox left
[12:54] *** konsolebox joined
[12:55] *** domidumont joined
[12:59] *** domidumont left
[13:00] *** domidumont joined
[13:00] *** eliasr joined
[13:06] *** shinobi-cl left
[13:06] *** wamba joined
[13:12] *** mcmillhj left
[13:25] *** blumsicle left
[13:29] *** ChoHag joined
[13:48] <Geth> ¦ doc: c0c7922e76 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/grammars.pod6

[13:48] <Geth> ¦ doc: make actions a type object per the doc explanation

[13:48] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c0c7922e76

[13:48] <synopsebot> Link: https://doc.perl6.org/language/grammars

[13:55] *** SqrtNegInf joined
[13:55] *** SqrtNegInf left
[14:04] *** Zoffix joined
[14:04] <Zoffix> ZzZombo: well, it's how they say: hindsight's 20/20

[14:09] *** sena_kun joined
[14:10] *** mcmillhj joined
[14:11] *** cdg joined
[14:11] *** xtreak joined
[14:12] *** cdg left
[14:12] *** cdg joined
[14:12] *** cdg left
[14:13] *** cdg joined
[14:16] *** mcmillhj left
[14:17] <El_Che> jnthn: does cro have a built-in log middleware or is it bake-your-own?

[14:19] *** mcmillhj joined
[14:20] *** colomon left
[14:20] *** cdg_ joined
[14:20] *** colomon joined
[14:23] *** mcmillhj left
[14:24] *** cdg left
[14:25] *** Zoffix left
[14:28] *** pmurias joined
[14:29] <ZzZombo> m: my Str $a is default('') where {state $c=0;if $c {$_~~Str:D} else {$c=True}};$a=2

[14:29] <camelia> rakudo-moar 2847e509d: OUTPUT: «Type check failed in assignment to $a; expected <anon> but got Int (2)␤  in block <unit> at <tmp> line 1␤␤»

[14:29] <ZzZombo> m: my Str $a is default('') where {state $c=0;if $c {$_~~Str:D} else {$c=True}};$a=''

[14:29] <camelia> rakudo-moar 2847e509d: ( no output )

[14:29] <ZzZombo> m: my Str $a is default('') where {state $c=0;if $c {$_ ne ''} else {$c=True}};$a=''

[14:30] <camelia> rakudo-moar 2847e509d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Type check failed in assignment to $a; expected <anon> but got Str ("")␤at <tmp>:1␤»

[14:30] <ZzZombo> m: my Str $a is default('') where {state $c=0;if $c {$_ ne ''} else {$c=True}};$a='1'

[14:30] <camelia> rakudo-moar 2847e509d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Type check failed in assignment to $a; expected <anon> but got Str ("")␤at <tmp>:1␤»

[14:30] <ZzZombo> m: my Str $a is default('') where {say state $c=0;if $c {$_ ne ''} else {$c=True}};$a='1'

[14:30] <camelia> rakudo-moar 2847e509d: OUTPUT: «0␤5===SORRY!5=== Error while compiling <tmp>␤Type check failed in assignment to $a; expected <anon> but got Str ("")␤at <tmp>:1␤True␤»

[14:35] *** mcmillhj joined
[14:40] *** mcmillhj left
[14:44] *** saramaebee left
[14:46] *** wamba left
[14:51] *** mcmillhj joined
[14:54] *** Alikzus joined
[14:56] *** mcmillhj left
[14:58] *** mcmillhj joined
[14:59] *** curan left
[15:03] *** wamba joined
[15:07] *** mcmillhj left
[15:11] *** ufobat left
[15:12] *** ufobat joined
[15:18] *** AlexDaniel joined
[15:18] *** mcmillhj joined
[15:22] <Geth> ¦ doc: 4e28117206 | (Zoffix Znet)++ | doc/Language/grammars.pod6

[15:22] <Geth> ¦ doc: Documnet <sym> speshul token

[15:22] <Geth> ¦ doc: 

[15:22] <Geth> ¦ doc: Closes  #1676

[15:22] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4e28117206

[15:22] <synopsebot> Link: https://doc.perl6.org/language/grammars

[15:24] *** mcmillhj left
[15:24] *** mcmillhj joined
[15:29] <ZzZombo> m: my Str $a is default('') where {say $_,state $c=0;if $c {$_ ne ''} else {$c=True}};$a='1'

[15:29] <camelia> rakudo-moar 4219f8ccf: OUTPUT: «0␤5===SORRY!5=== Error while compiling <tmp>␤Type check failed in assignment to $a; expected <anon> but got Str ("")␤at <tmp>:1␤True␤»

[15:29] *** mcmillhj left
[15:30] <ZzZombo> m: my Str $a is default('') where {say($_,state $c=0);if $c {$_ ne ''} else {$c=True}};$a='1'

[15:30] <camelia> rakudo-moar 4219f8ccf: OUTPUT: «0␤5===SORRY!5=== Error while compiling <tmp>␤Type check failed in assignment to $a; expected <anon> but got Str ("")␤at <tmp>:1␤True␤»

[15:30] <ZzZombo> wtf

[15:31] <ZzZombo> m: my Str $a is default('') where {.say;say state $c=0;if $c {$_ ne ''} else {$c=True}};$a='1'

[15:31] <camelia> rakudo-moar 4219f8ccf: OUTPUT: «␤5===SORRY!5=== Error while compiling <tmp>␤Type check failed in assignment to $a; expected <anon> but got Str ("")␤at <tmp>:1␤0␤␤True␤»

[15:31] *** skids joined
[15:32] <ZzZombo> m: my Str $a is default('') where {.say;say state $c=0;do if $c {$_ ne ''} else {$c=True}};$a='1'

[15:32] <camelia> rakudo-moar eac39b924: OUTPUT: «␤5===SORRY!5=== Error while compiling <tmp>␤Type check failed in assignment to $a; expected <anon> but got Str ("")␤at <tmp>:1␤0␤␤True␤»

[15:34] <ZzZombo> m: my Str $a is default('') where {state $c=0;say "V: $_,C=$c";do if $c {$_ ne ''} else {$c=True}};$a='1'

[15:34] <camelia> rakudo-moar eac39b924: OUTPUT: «V: ,C=0␤5===SORRY!5=== Error while compiling <tmp>␤Type check failed in assignment to $a; expected <anon> but got Str ("")␤at <tmp>:1␤V: ,C=True␤»

[15:38] *** Zoffix joined
[15:38] <Zoffix> ZzZombo: note that `where` clauses come with a caveat that side-effects are not supported. If you try to have them (like `state` variables), you get to keep all the pieces.

[15:40] *** mcmillhj joined
[15:41] <Zoffix> There are also some bugs with `state` vars: RT#131542 RT#130257 RT#129817 RT#102994

[15:41] <synopsebot> RT#131542 [new]: https://rt.perl.org/Ticket/Display.html?id=131542 [BUG] `state` variables unset if multi candidate uses named params

[15:41] <synopsebot> RT#130257 [new]: https://rt.perl.org/Ticket/Display.html?id=130257 [BUG] state variable not initialized in some multi subs

[15:41] <synopsebot> RT#129817 [new]: https://rt.perl.org/Ticket/Display.html?id=129817 (De)serialization of state variables is not implemented.

[15:41] <synopsebot> RT#102994 [open]: https://rt.perl.org/Ticket/Display.html?id=102994 [BUG] State variables are never initialized if the first call of the containing block does not reach them

[15:44] <ZzZombo> I want some kind of a value like Nil but the one that will not violate the defined constraint, actually. What I was doing was rather to mess around.

[15:45] *** mcmillhj left
[15:46] <Zoffix> m: my $true-nil := Nil.Mu::new; say $true-nil ~~ Mu:D; my $foo is default(42) = 100; $foo = $true-nil; say $foo

[15:46] <camelia> rakudo-moar eac39b924: OUTPUT: «True␤42␤»

[15:46] <ZzZombo> So I could say `has Str:D $!name=<the value>` and if the user doesn't supply it, an attempt to do anything but the most basic things like calling `.Bool` on it will cause an exception.

[15:47] <ZzZombo> And then, I'd like to allow this value being set only once, but that's optional.

[15:47] <ZzZombo> I see that can't be done easily.

[15:49] <Zoffix> m: class Foo { has Any $.name is default(Failure.new: "no good") where Str:D|Failure; method z { $!name.uc } }.new(:name<Zoffix>).z.say

[15:49] <camelia> rakudo-moar eac39b924: OUTPUT: «ZOFFIX␤»

[15:50] <Zoffix> m: class Foo { has Any $.name is default(Failure.new: "no good") where Str:D|Failure; method z { $!name.uc } }.new().z.say

[15:50] <camelia> rakudo-moar eac39b924: OUTPUT: «===SORRY!===␤no good␤»

[15:52] <Zoffix> m: class Foo { my class Bar is Mu { method FALLBACK (|) { die "no good" } }; has Mu $.name where Str:D|Bar = Bar; method z { $!name.uc } }.new(:name<zoffix>).z.say

[15:52] <camelia> rakudo-moar eac39b924: OUTPUT: «ZOFFIX␤»

[15:52] <Zoffix> m: class Foo { my class Bar is Mu { method FALLBACK (|) { die "no good" } }; has Mu $.name where Str:D|Bar = Bar; method z { $!name.uc } }.new().z.say

[15:52] <camelia> rakudo-moar eac39b924: OUTPUT: «no good␤  in method FALLBACK at <tmp> line 1␤  in method z at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:53] <ZzZombo> the bug with junctions and `is default` was already fixed in perl6 camelia uses?

[15:53] <Zoffix> Dunno, what was the bug?

[15:53] <ZzZombo> where it would crash?

[15:53] *** domidumont left
[15:53] *** domidumont joined
[15:54] <Zoffix> m: class { has $.z is default(1) where 1|2 }.new.z.say

[15:54] <camelia> rakudo-moar eac39b924: OUTPUT: «1␤»

[15:54] <Zoffix> R#1465 and yeah it's fixed now

[15:54] <synopsebot> R#1465 [closed]: https://github.com/rakudo/rakudo/issues/1465 `where` clause in attributes doesn't get thunked right when `is default` is used

[15:54] <Zoffix> c: 2018.01 class { has $.z is default(1) where 1|2 }.new.z.say

[15:54] <committable6> Zoffix, ¦2018.01: «04===SORRY!04=== Error while compiling /tmp/3WxipbNQbh␤Cannot invoke this object (REPR: Null; VMNull)␤at /tmp/3WxipbNQbh:1␤ «exit code = 1»»

[15:55] <Zoffix> c: 2018.01 class { has $.z is default(1) where {$_ ~~ 1|2} }.new.z.say

[15:55] <committable6> Zoffix, ¦2018.01: «1␤»

[15:55] <Zoffix> ^ and you can use this workaround on older compilers ^

[15:57] *** mcmillhj joined
[15:57] <Geth> ¦ doc: 7b27d94731 | (Zoffix Znet)++ | doc/Type/Signature.pod6

[15:57] <Geth> ¦ doc: Move side-effects in where clauses higher up

[15:57] <Geth> ¦ doc: 

[15:57] <Geth> ¦ doc: - So it's more visible

[15:57] <Geth> ¦ doc: - Also mention code may run more times than strictly needed

[15:57] <synopsebot> Link: https://doc.perl6.org/type/Signature

[15:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7b27d94731

[15:58] * Zoffix &

[15:58] *** Zoffix left
[16:02] *** mcmillhj left
[16:02] *** mcmillhj joined
[16:05] *** natrys joined
[16:05] *** natrys is now known as ImranKhan

[16:05] *** domidumont left
[16:08] *** mcmillhj left
[16:08] *** troys joined
[16:08] <jnthn> El_Che: There's a simple built-in one (the one that's set up in a `cro stub`'d HTTP application)

[16:11] <tyil> .tell zoffix not sure if I mentioned this to you already, but IRC::Client::Plugin::UrlTitle install correctly again, and the scriptkitties/perl6:latest docker container's zef should Just Work as well now

[16:11] <yoleaux> tyil: I'll pass your message to zoffix.

[16:12] <El_Che> jnthn: I did that, but it seems I missed it. I'll have a look

[16:12] <El_Che> (seems to have created 2 classes, Routes and Services)

[16:17] *** khw joined
[16:18] *** mcmillhj joined
[16:19] <jnthn> To be fair, I'm guessing that the react/redux template (if you used it) also does it, but didn't actually check

[16:27] *** markong left
[16:28] *** markong joined
[16:32] <El_Che> no, I used the https one, failed to get ssl running and switch to the http template and worry about ssl later

[16:32] <El_Che> :)

[16:32] <El_Che> train

[16:32] <El_Che> bbl

[16:40] *** wamba left
[16:54] *** cdg joined
[16:56] <pmurias> hmm, any ideas how to translate a Perl 6 regexes that matches a literal to a JS one efficently?

[16:57] <pmurias> when emitting code for let's say /'foo'/ I can't just treat it as /foo/ on the js side because I have to avoid composing characters

[16:58] *** cdg_ left
[16:59] *** cdg left
[17:01] *** cdg joined
[17:02] *** cdg left
[17:02] *** aindilis` left
[17:02] *** cdg joined
[17:03] *** cdg_ joined
[17:03] *** aindilis` joined
[17:06] *** cdg left
[17:07] *** ChoHag left
[17:13] *** someuser left
[17:14] *** nebuchadnezzar left
[17:16] *** wamba joined
[17:23] *** scimon left
[17:23] *** khisanth_ left
[17:28] *** aindilis` left
[17:37] *** khisanth_ joined
[17:38] *** dakkar left
[17:45] *** MC8 joined
[17:46] *** ImranKhan left
[17:47] *** nebuchadnezzar joined
[17:48] *** scott_ joined
[17:50] *** mcmillhj left
[17:50] <Geth> ¦ doc: 517692317e | (Will "Coke" Coleda)++ | xt/words.pws

[17:50] <Geth> ¦ doc: learn new word

[17:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/517692317e

[17:51] *** domidumont joined
[18:02] *** mcmillhj joined
[18:05] *** zakharyas left
[18:06] *** zakharyas joined
[18:07] *** mcmillhj left
[18:18] *** mcmillhj joined
[18:23] *** mcmillhj left
[18:27] *** xtreak left
[18:27] *** darutoko left
[18:33] *** zakharyas left
[18:34] *** mcmillhj joined
[18:35] <mienaikage> Is it possible to create a relative symlink with the .symlink method? I can't seem to find a way to get CWD out of it.

[18:35] <mienaikage> Well, not without specifying something else starting with / at least

[18:36] *** Zoffix joined
[18:37] <Zoffix> mienaikage: no, it absolutes both paths currently. You could open an Issue to request that feature to be available: https://github.com/rakudo/rakudo/issues/new

[18:39] <mienaikage> Gotcha, thanks. I may do that once I get home!

[18:40] <Zoffix> m: with '/tmp/2018-02-07'.IO.mkdir { .add("bar").mkdir.add("meow").spurt: "abc"; &*chdir(.add("foo").mkdir); use nqp; nqp::symlink("../bar/meow", "z"); "z".IO.slurp.say }

[18:40] <camelia> rakudo-moar eac39b924: OUTPUT: «Failed to symlink file: file already exists␤  in block <unit> at <tmp> line 1␤␤»

[18:40] <Zoffix> m: with '/tmp/2018-02-07'.IO.mkdir { .add("bar").mkdir.add("meow").spurt: "abc"; &*chdir(.add("foo").mkdir); use nqp; "../bar/meow".IO.unlink; nqp::symlink("../bar/meow", "z"); "z".IO.slurp.say }

[18:40] <camelia> rakudo-moar eac39b924: OUTPUT: «Failed to symlink file: file already exists␤  in block <unit> at <tmp> line 1␤␤»

[18:41] *** mcmillhj left
[18:41] <Zoffix> well, it worked the first time I did it :)

[18:41] <Zoffix> m: with '/tmp/2018-02-07'.IO.mkdir { .add("bar").mkdir.add("meow").spurt: "abc"; &*chdir(.add("foo").mkdir); use nqp; "../bar/meow".IO.unlink; nqp::symlink("../bar/meow", "z"); "z".IO.slurp.say }

[18:41] <camelia> rakudo-moar eac39b924: OUTPUT: «Failed to symlink file: file already exists␤  in block <unit> at <tmp> line 1␤␤»

[18:41] <Zoffix> m: with '/tmp/2018-02-07'.IO.mkdir { .add("bar").mkdir.add("meow").spurt: "abc"; &*chdir(.add("foo").mkdir); use nqp; "z".IO.unlink; nqp::symlink("../bar/meow", "z"); "z".IO.slurp.say }

[18:41] <camelia> rakudo-moar eac39b924: OUTPUT: «abc␤»

[18:42] <Zoffix> so it should be failry easy to add it.

[18:42] <Zoffix> :o  I mean fairly

[18:45] <Zoffix> mienaikage: I opened it as R#1497

[18:45] <synopsebot> R#1497 [open]: https://github.com/rakudo/rakudo/issues/1497 [LHF] Make it possible for IO::Path.symlink to make relative links

[18:48] *** someuser joined
[18:48] <TimToady> in the meantime, there's always NativeCall

[18:49] <TimToady> though arguably that's more antisocial than nqp :)

[18:49] <Zoffix> :)

[18:51] *** mcmillhj joined
[18:53] *** xenotrope left
[18:55] *** xenotrope joined
[18:55] <Zoffix> maybe it ain't that LHF... looks like nqp::symlink makes the relative symlink relative to &*chdir, but .relative on IO::Path would be relative to $*CWD

[18:56] * TimToady heads out to chop down trees on the back .04

[18:56] *** mcmillhj left
[18:59] *** eliasr left
[19:01] *** mcmillhj joined
[19:02] * [Coke] settles in for the great storm. 

[19:06] *** mcmillhj left
[19:08] *** mcmillhj joined
[19:12] *** comborico1611 joined
[19:13] *** mcmillhj left
[19:14] *** mcmillhj joined
[19:19] *** mcmillhj left
[19:20] *** setty1 joined
[19:23] *** someuser left
[19:25] *** cdg joined
[19:29] *** cdg_ left
[19:30] *** wamba left
[19:30] *** mcmillhj joined
[19:30] *** cdg left
[19:30] *** wamba joined
[19:35] *** mcmillhj left
[19:37] *** Noob6969 joined
[19:42] *** Noob6969 left
[19:46] *** mcmillhj joined
[19:50] *** mcmillhj left
[20:02] *** mcmillhj joined
[20:05] *** leont joined
[20:06] *** zeddy_k joined
[20:07] *** mcmillhj left
[20:09] *** TEttinger joined
[20:15] *** domidumont left
[20:18] *** mcmillhj joined
[20:18] *** zakharyas joined
[20:21] *** vike left
[20:24] *** mcmillhj left
[20:31] *** vike joined
[20:36] *** cdg joined
[20:36] *** cdg left
[20:36] *** cdg joined
[20:37] <tbrowder> hi #perl6

[20:40] <tbrowder> i'm having problems with a grammar for what i think is a fairly common type of input data file: key/data pairs with comments, blank lines, and empty data fields allowed. i just filed doc GH issue #1759 with an example of the type of input i'm talking about.

[20:42] <tbrowder> the current example in https://docs.perl6.org/language/grammars.pod6 is almost the desired format, but it doesn't have the looser format i described in the issue.

[20:43] *** someuser joined
[20:47] *** mcmillhj joined
[20:49] *** evalable6 left
[20:49] *** evalable6 joined
[20:52] *** mcmillhj left
[20:53] *** squashable6 left
[20:54] *** squashable6 joined
[21:01] *** f3ew left
[21:02] *** f3ew joined
[21:03] *** mcmillhj joined
[21:11] *** mcmillhj left
[21:12] *** Zoffix left
[21:17] *** mcmillhj joined
[21:22] *** mcmillhj left
[21:26] *** Manifest0 joined
[21:28] *** mcmillhj joined
[21:30] *** Manifest0 left
[21:33] *** mcmillhj left
[21:36] *** TEttinger left
[21:39] *** mcmillhj joined
[21:44] *** mcmillhj left
[21:50] *** mcmillhj joined
[21:53] *** Manifest0 joined
[21:54] *** mcmillhj left
[21:57] *** sena_kun left
[22:01] *** mcmillhj joined
[22:08] *** mcmillhj left
[22:09] <tbrowder> i va

[22:10] <tbrowder> i can put my prog in a gist if anyone is willing to assist fixing it.

[22:10] <Geth> ¦ whateverable: 99c81ceadf | (Aleks-Daniel Jakimenko-Aleksejev)++ | 4 files

[22:10] <Geth> ¦ whateverable: Better handling of config files

[22:10] <Geth> ¦ whateverable: 

[22:10] <Geth> ¦ whateverable: This way git wouldn't want you to commit it by default.

[22:10] <Geth> ¦ whateverable: 

[22:10] <Geth> ¦ whateverable: Related issue: #122

[22:10] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/99c81ceadf

[22:14] *** MasterDuke left
[22:16] <Voldenet> tbrowder: I can help you, but I'm not very fluent with grammars

[22:18] <Voldenet> this works http://ix.io/Frv

[22:18] *** setty1 left
[22:19] <Voldenet> oh,     return unless $match<pair>; is redundant

[22:20] <tbrowder> Voldenet: thanks so much. i will try it and see what i did wrong. 

[22:20] *** MasterDuke joined
[22:21] <Voldenet> thoguh I'm unsure if that's the best solution, negative lookaheads don't look like a good idea

[22:22] <tbrowder> n

[22:22] *** someuser left
[22:22] *** mcmillhj joined
[22:22] <tbrowder> ok, but a working solution is a start!

[22:22] <Voldenet> :)

[22:23] <Voldenet> I'm not sure how to express "this token can contain spaces but shouldn't end with them"

[22:23] <Voldenet> but parser can't do that without going to the end of spaces space and validating that there's nothing ahead

[22:23] <tbrowder> then we can optimize!

[22:24] <Voldenet> oh, and it can be made better further, the value-identifier could contain = character

[22:26] <tbrowder> i’ll be back later...thanks again! (also have to go take a look at moritz’s book)

[22:27] *** mcmillhj left
[22:28] *** rindolf left
[22:32] *** zakharyas left
[22:42] *** mcmillhj joined
[22:47] *** mcmillhj left
[22:49] <Geth> ¦ doc/coke/build: 7e008c3570 | (Will "Coke" Coleda)++ | Makefile

[22:49] <Geth> ¦ doc/coke/build: clean precompiled directory

[22:49] <Geth> ¦ doc/coke/build: review: https://github.com/perl6/doc/commit/7e008c3570

[22:50] *** softmoth joined
[22:51] *** espadrine_ joined
[22:57] *** mcmillhj joined
[23:01] *** mcmillhj left
[23:03] *** wamba left
[23:06] <Geth> ¦ doc: 2389c706b9 | (Will "Coke" Coleda)++ | util/missing-types.p6

[23:06] <Geth> ¦ doc: Track filename change from years ago

[23:06] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/2389c706b9

[23:08] *** mcmillhj joined
[23:10] *** mniip left
[23:13] *** cdg left
[23:13] *** mniip joined
[23:13] *** cdg joined
[23:15] *** mcmillhj left
[23:17] *** pmurias left
[23:23] *** travis-ci joined
[23:23] <travis-ci> Doc build passed. Will "Coke" Coleda 'clean precompiled directory'

[23:23] <travis-ci> https://travis-ci.org/perl6/doc/builds/338746801 https://github.com/perl6/doc/commit/7e008c357018

[23:23] *** travis-ci left
[23:23] *** zeddy_k left
[23:25] *** softmoth left
[23:25] *** softmoth joined
[23:27] *** cdg left
[23:32] *** hythm left
[23:32] <tbrowder> Voldenet:  i've been doing something stupid all along.  i'll explain when i fix it.

[23:40] *** traxex2 left
[23:45] *** hythm joined
[23:49] *** cdg joined
[23:52] <buggable> New CPAN upload: Math-Curves-0.0.1.tar.gz by SAMGWISE https://cpan.metacpan.org/authors/id/S/SA/SAMGWISE/Perl6/Math-Curves-0.0.1.tar.gz

[23:53] *** comborico1611 left
[23:59] *** Pilu left
[23:59] *** Pilu_ left
