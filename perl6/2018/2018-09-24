[00:00] <AlexDaniel> buggable: eco

[00:00] <buggable> AlexDaniel, Out of 1214 Ecosystem dists, 0 have warnings, 14 have errors, and 0 have no tags in META file. See https://modules.perl6.org/update.log for details

[00:00] <AlexDaniel> it can have 1214 dependencies

[00:00] <AlexDaniel> :)

[00:00] <timotimo> isn't the docs package one of those 1214?

[00:00] <timotimo> so wouldn't it technically be 1213?

[00:00] <AlexDaniel> what if you make a package that depends on itself?

[00:01] <timotimo> didn't someone just test something similar to that the other day?

[00:02] <AlexDaniel> can I add that to the ecosystem or will I get executed?

[00:02] <timotimo> depends, is the +x bit set on you?

[00:02] <AlexDaniel> no.

[00:02] <AlexDaniel> I think it's illegal to set it

[00:03] <timotimo> it's legal in the united states in some parts

[00:03] <timotimo> but there is a process that you have to go through to become eligible

[00:03] <timotimo> it's quite a hassle

[00:03] <timotimo> hopefully they'll make it illegal soon, too

[00:06] <timotimo> that might have been in slightly poor taste :\

[00:08] *** dims0 joined
[00:08] *** dims0 left
[00:14] <Geth> ¦ ecosystem: 93e9a67655 | (Aleks-Daniel Jakimenko-Aleksejev)++ | META.list

[00:14] <Geth> ¦ ecosystem: Add Foo::Dependencies::Self

[00:14] <Geth> ¦ ecosystem: 

[00:14] <Geth> ¦ ecosystem: Please remove it from the list if it starts causing issues.

[00:14] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/93e9a67655

[00:15] <AlexDaniel> timotimo: :)

[00:15] <timotimo> but does it do anything?

[00:15] <AlexDaniel> it depends

[00:16] <timotimo> oooh i see what you did there

[00:16] <AlexDaniel> maybe I should also put it into build-depends and test-depends

[00:17] <timotimo> i hope you don't build an unhealthy dependency upon it

[00:17] <timotimo> will they do regular tests in your workplace for this kind of thing?

[00:18] <AlexDaniel> I primarily want this for the toaster upgrade I was working on

[00:19] <AlexDaniel> as it handles dependencies by itself

[00:19] <AlexDaniel> or doesn't handle, because IIRC it should fail on something like this

[00:20] <Geth> ¦ doc/normalized-ZDRs: f3f02d3e22 | (Zoffix Znet)++ | doc/Type/Rational.pod6

[00:20] <Geth> ¦ doc/normalized-ZDRs: Document Rational.floor/.ceiling

[00:20] <Geth> ¦ doc/normalized-ZDRs: 

[00:20] <Geth> ¦ doc/normalized-ZDRs: They differ from Real's in that they can `fail`

[00:20] <Geth> ¦ doc/normalized-ZDRs: POV for failing: https://github.com/rakudo/rakudo/commit/6d70346cbf

[00:20] <Geth> ¦ doc/normalized-ZDRs: Propspec for failing: https://github.com/perl6/roast/commit/17761c2e48

[00:20] <Geth> ¦ doc/normalized-ZDRs: review: https://github.com/perl6/doc/commit/f3f02d3e22

[00:20] <AlexDaniel> I was surprised to see that the whole ecosystem has no crazy stuff like this

[00:20] <timotimo> our community members are just a tiny bit too tame

[00:20] *** beeman left
[00:23] *** MasterDuke joined
[00:23] *** p6bannerbot sets mode: +v MasterDuke

[00:24] *** MasterDuke left
[00:24] *** MasterDuke joined
[00:24] *** herbert.freenode.net sets mode: +v MasterDuke

[00:24] *** p6bannerbot sets mode: +v MasterDuke

[00:24] <cheese_cake__> its been almost 40 minutes and zef is still downloading dependancies?

[00:24] <cheese_cake__> is this normal

[00:24] <timotimo> that doesn't sound entirely correct

[00:24] <timotimo> can you tell us what versions are involved on your system?

[00:25] <AlexDaniel> cheese_cake__: is there any output?

[00:25] <timotimo> like perl6 --version and zef list --installed zef

[00:25] *** leont left
[00:25] <cheese_cake__> just upgraded both before this

[00:25] <timotimo> is that how you get the zef version?

[00:25] <timotimo> it is not

[00:25] <cheese_cake__> zef list --installed zef prints nothing

[00:25] <timotimo> instead, you | grep zef

[00:26] <cheese_cake__> im installing the deps for the docs, its stuck on this ===> Testing: LWP::Simple:ver<0.104>:auth<github:perl6>

[00:28] <cheese_cake__> also, is there a way to pause my program for a bit before returning 0?

[00:28] <cheese_cake__> at least, I assume the MAIN process returns 0 be default

[00:28] <timotimo> you can just "sleep 1" for example

[00:29] <Geth> ¦ doc/normalized-ZDRs: 3a2570a52c | (Zoffix Znet)++ | doc/Type/Rational.pod6

[00:29] <Geth> ¦ doc/normalized-ZDRs: Document Rational.new normalizes ZDRs

[00:29] <Geth> ¦ doc/normalized-ZDRs: review: https://github.com/perl6/doc/commit/3a2570a52c

[00:29] <Geth> ¦ doc/normalized-ZDRs: ff26374e88 | (Zoffix Znet)++ | doc/Language/numerics.pod6

[00:29] <Geth> ¦ doc/normalized-ZDRs: Make Numerics guide mention ZDR normaltion

[00:29] <Geth> ¦ doc/normalized-ZDRs: review: https://github.com/perl6/doc/commit/ff26374e88

[00:30] *** beeman joined
[00:30] *** p6bannerbot sets mode: +v beeman

[00:30] *** itaipu left
[00:31] <Geth> ¦ doc/normalized-ZDRs: 8222bcd850 | (Zoffix Znet)++ | doc/Language/numerics.pod6

[00:31] <Geth> ¦ doc/normalized-ZDRs: Reword IEEE adherence in Numerics guide

[00:31] <Geth> ¦ doc/normalized-ZDRs: 

[00:31] <Geth> ¦ doc/normalized-ZDRs: The fixing of infix:</> was defered until 6.e

[00:31] <Geth> ¦ doc/normalized-ZDRs: review: https://github.com/perl6/doc/commit/8222bcd850

[00:31] <cheese_cake__> thanks tmotimo

[00:31] <Geth> ¦ ecosystem: a476937a14 | (Aleks-Daniel Jakimenko-Aleksejev)++ | META.list

[00:31] <Geth> ¦ ecosystem: Add Foo::Dependencies::A-on-B & B-on-A

[00:31] <Geth> ¦ ecosystem: 

[00:31] <Geth> ¦ ecosystem: Please remove these if they cause issues.

[00:31] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/a476937a14

[00:31] *** geekosaur joined
[00:32] <cheese_cake__> is that a github bot ^

[00:32] <AlexDaniel> yes

[00:32] <Geth> ¦ doc: zoffixznet++ created pull request #2327: Normalized ZDRs

[00:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2327

[00:32] <Geth> ¦ doc/master: 5 commits pushed by (Zoffix Znet)++

[00:32] <Geth> ¦ doc/master: f3f02d3e22 | Document Rational.floor/.ceiling

[00:32] <Geth> ¦ doc/master: 3a2570a52c | Document Rational.new normalizes ZDRs

[00:32] <Geth> ¦ doc/master: ff26374e88 | Make Numerics guide mention ZDR normaltion

[00:32] <Geth> ¦ doc/master: 8222bcd850 | Reword IEEE adherence in Numerics guide

[00:32] <Geth> ¦ doc/master: 3b1fc2f201 | Merge pull request #2327 from perl6/normalized-ZDRs

[00:32] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/ef3187a9705e...3b1fc2f20135

[00:32] *** p6bannerbot sets mode: +v geekosaur

[00:33] <cheese_cake__> perl6 is compiled, right? 

[00:35] *** Zoffix joined
[00:35] *** p6bannerbot sets mode: +v Zoffix

[00:35] <timotimo> multiple kinds of compiled, but not all of them

[00:35] <SmokeMachine> Hi guys! I am working on a project called Red ORM, and I think I have the first small working example of what Im thinking for its API. I'd like to know what do you guys think about that...

[00:35] *** Zoffix left
[00:35] <timotimo> when you run your script, it will get compiled to bytecode (for example MoarVM Bytecode if you're using perl6 on moarvm, which you most likely are)

[00:35] <SmokeMachine> https://www.irccloud.com/pastebin/Ur4na2yM/

[00:35] <timotimo> and modules you load will be precompiled, also to moarvm bytecode, and stored in a precomp folder on disk

[00:36] <timotimo> at run time, if you're on an x86_64 system and didn't disable it, moarvm will JIT compile often-used code to machine code

[00:36] *** buggable left
[00:36] *** buggable joined
[00:36] *** ChanServ sets mode: +v buggable

[00:37] *** p6bannerbot sets mode: +v buggable

[00:38] *** Zoffix joined
[00:38] *** p6bannerbot sets mode: +v Zoffix

[00:38] <Zoffix> SmokeMachine: the metamethods are kinda weird. What's the reasoning for them, as opposed to normal methods?

[00:39] <Zoffix> SmokeMachine: also, what does `$*RED-DB` do?

[00:39] <Zoffix> Like, what happens if I have two models with two different databases in code next to each other (e.g. copying data from one database to another). How would that look like??

[00:39] <Zoffix> (P.S.: dynamic variable access is fairly slow)

[00:43] <Zoffix> also how come .^create instead of .^insert

[00:43] <timotimo> i haven't looked, but perhaps it only gets inserted at a later point with a different method call?

[00:44] <Zoffix> I don't care what it does under the hood. As a user, I'd be constantly doing `.^insert... ah crap BACKSPACE BACKSPACE.. .^create`

[00:44] <Zoffix> The `.^` is a lot more annoying to type than just `.`

[00:45] <timotimo> you have those extra keys on your keyboard :) :)

[00:45] <Zoffix> They're all taken :)

[00:46] <AlexDaniel> you have all those modifiers on your keyboard… :)

[00:46] <timotimo> i still want to have foot pedals

[00:46] *** hamhu3 left
[00:46] <AlexDaniel> timotimo: I tried, didn't work for me. But that's perhaps because I prefer to move around a lot

[00:47] <timotimo> oh, really?

[00:47] <timotimo> can you give me some more details?

[00:47] <AlexDaniel> on what pedals to buy, or what?

[00:47] <timotimo> for example

[00:47] <Zoffix> SmokeMachine: I like how chained greps end up being a `where` tho not sure how it manages to figure out that that's what the greps do. I imagine typing those two greps as a single one works equally well?

[00:48] <SmokeMachine> Zoffix: if you want to copy data from a database to another, you can `my $RED-DB = database "SQLite", database => "1"; my $rs= Boa.^all; $RED-DB = database "SQLite", database => "2"; $rs.save` but its not working yet...

[00:48] <SmokeMachine> Zoffix: yes

[00:48] <Zoffix> cool

[00:49] <Zoffix> Well, god speed with the project! Can't wait to use the result.

[00:49] * Zoffix g2g

[00:49] *** Zoffix left
[00:49] <timotimo> i'd obviously like the pedals to be cheap, but not suck, and they ought to be easily reconfigurable, though surely i can tell udev or evdev or whatever "hey, um, these keys are actually those keys, k?" and that'll work out fine

[00:49] <timotimo> and they must be press/release rather than single-trigger

[00:49] *** cheese_cake__ left
[00:50] <AlexDaniel> timotimo: well, it feels like building one yourself is the best choice, but I'm not sure. I bought the cheapest ones from ebay, which was a mistake kind of like. They're made with infared sensors, or something like that (don't remember the details now), so you get no tactile feedback whatsoever and it sucks. I did replace that with micro switches, so they no longer suck and in fact are pretty good

[00:50] <timotimo> i'm actually mildly interested in analog switches, too

[00:50] <AlexDaniel> they software also sucked, but I think nowadays people found a way to reconfigure them from linux with open source software

[00:51] <AlexDaniel> but that isn't that important IMO, as you won't be changing it all the time (probably)

[00:52] <SmokeMachine> .tell Zoffix the reason to use meta methods is I don’t want to add methods to model “namespace”

[00:52] <yoleaux> SmokeMachine: I'll pass your message to Zoffix.

[00:52] <timotimo> https://thumbs.static-thomann.de/thumb/bdbmagic/pics/bdb/408490/11882221_800.jpg - something like this could be pretty cool, but ...

[00:52] <AlexDaniel> timotimo: analog? What for?

[00:53] <timotimo> for one if i had two of them i could use my feet instead of hands to mouse around the screen when my RSI's bad again

[00:53] <timotimo> that thing? it sells for 140 euros

[00:53] <timotimo> so ... :|

[00:54] <timotimo> i'll hopefully also get a new chair, too ... which there's one i've got my eye on that costs just a bit less than this thing

[00:54] <AlexDaniel> yeah, which is why I'm saying you should make one yourself :)

[00:56] <timotimo> i'm not yet any good at building stuff

[00:57] <timotimo> oh, i was meaning to try putting my usb joystick on the floor and using it with my feet

[00:57] <timotimo> most of it is probably no use, but if i can at least hit one button on each side of the base and somewhat reliably move the stick, that could count for something

[00:57] <AlexDaniel> actually… is there any software that'd snap on gtk buttons or something like that?

[00:58] <timotimo> snap on, as in slow down the cursor when it's on a button?

[00:58] <AlexDaniel> something like that, yeah

[00:59] <timotimo> SmokeMachine: cool, you're using that same site i used for my recent perl6 tweet for the screenshot

[00:59] <timotimo> though it'd be nice if you also linked to a plain text version so that vision-impaired people can read it, too

[01:01] <AlexDaniel> as for building stuff, I can help. In fact it's likely I'd be making something like this anyway for my streaming setup

[01:01] <timotimo> i've been hoping to one day do streaming for what feels like 10 years now, lol

[01:03] <timotimo> i do already have a decent microphone!

[01:03] <Esca> is there any reason perl6 would be a bad idea to use on a raspberry to drive a dot matrix thing?

[01:04] <Esca> i know it's probably not the most suitable but i have an assignment and i figured i may as well have fun with it

[01:04] <timotimo> it takes a hell of a time to compile it on a raspberry pi, and it won't give you the jit compiler (because we currently only have one for x86_64) but other than that it should work

[01:04] <AlexDaniel> Esca: I'd say it's possible, though keep in mind that it will run without JIT on an already slow rpi

[01:04] *** andy`5 joined
[01:04] *** andy`5 left
[01:05] <timotimo> lemme quickly link you something

[01:05] <AlexDaniel> you don't have to compile it though, can install directly from debian repos

[01:05] <AlexDaniel> though you'd need to add debian unstable repo for that

[01:05] <SmokeMachine> timotimo: that makes sense! I’ll do that next time!

[01:06] <timotimo> hum. i'm looking for a tweet and i can't seem to find it right now?

[01:07] <Esca> no JIT meaning I have to compile then run, like a normal compiled language?

[01:07] <Esca> hm

[01:07] <Esca> shouldn't be a problem i think

[01:07] <AlexDaniel> no, just means that it will be slower

[01:07] <timotimo> Esca: https://twitter.com/zoffix/status/1003726969396236288

[01:07] <timotimo> yeah, no difference in usage

[01:07] <timotimo> just in run speed

[01:09] *** fake_space_whale left
[01:09] <Esca> the dot matrix does have to blink really fast to give the illusion of being on

[01:09] <Esca> but i'll give it a shot

[01:09] <Esca> thanks

[01:10] <timotimo> you may want to build a low-level part in C that does the heavy-duty high-frequency stuff, and control it from perl6 to do stuff like animation or font rendering

[01:11] *** sphrak5 joined
[01:11] *** sphrak5 left
[01:12] <Geth> ¦ doc: 9d2706f7b3 | (Will "Coke" Coleda)++ | doc/Type/Signature.pod6

[01:12] <Geth> ¦ doc: whitespace

[01:12] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9d2706f7b3

[01:12] <synopsebot> Link: https://doc.perl6.org/type/Signature

[01:13] *** cheese_cake__ joined
[01:14] <AlexDaniel> controlling a dot matrix display from RPi is a challenge by itself

[01:14] *** molaf left
[01:14] *** p6bannerbot sets mode: +v cheese_cake__

[01:14] <AlexDaniel> so dunno if it's a good idea

[01:14] <timotimo> is it a rpi2 or 3?

[01:14] <AlexDaniel> from https://github.com/hzeller/rpi-rgb-led-matrix

[01:14] <AlexDaniel> “If you see some regular flickering, make sure that there is no other process running on the system that could cause that. For instance, it is known that merely running top creates a faint flicker every second it updates”

[01:14] <timotimo> not that i actually know the specs well enough

[01:14] <Esca> 3

[01:15] <timotimo> that does sound bad

[01:15] <Esca> it's a very small dot matrix

[01:15] <Esca> 5x7

[01:15] <timotimo> especially since if you don't write your perl6 very cautiously, it could be that the garbage collector pauses trash performance every now and then

[01:16] <AlexDaniel> “Also, the output quality is susceptible to other heavy tasks running on that computer - there might be changes in the overall brigthness when this affects the referesh rate.”

[01:16] <AlexDaniel> :)

[01:16] <timotimo> well, doing PWM with bit-banging isn't fun anyway

[01:18] <AlexDaniel> if I had to do it I'd much rather let a microcontroller handle that stuff

[01:18] <cheese_cake__> could someone help me with makign a desktop file for my program?

[01:18] <cheese_cake__> i want the myprogram:some_stuff protocol to be registered to call my program, but i'm having a bit of difficulty

[01:18] <AlexDaniel> (any cheap arduino will do I think)

[01:19] <SmokeMachine> I forgot it... how do I set an operator as tight as another operator?

[01:20] <timotimo> cheese_cake__: are you following any kind of guide?

[01:21] <SmokeMachine> I found it! thanks! equiv

[01:21] <timotimo> AlexDaniel: what kind of streaming are you interested in doing?

[01:22] <cheese_cake__> timotimo: yes, but it doesnt seem to be working

[01:22] <AlexDaniel> timotimo: it's IT-unrelated

[01:23] <AlexDaniel> :S ok that sounded weird

[01:23] <timotimo> that's fine. maybe it's a gardening stream or something :)

[01:23] <AlexDaniel> timotimo: it's sports. Sports.

[01:23] *** aborazmeh joined
[01:23] *** aborazmeh left
[01:23] *** aborazmeh joined
[01:23] *** p6bannerbot sets mode: +v aborazmeh

[01:24] <timotimo> cheese_cake__: i'm actually going to bed right now, but it'd probably help if you posted the link to the guide you're following and maybe a precise description of the misbehaviour you're seeing

[01:24] *** p6bannerbot sets mode: +v aborazmeh

[01:24] <timotimo> oh, now that's interesting

[01:25] <timotimo> the bannerbot saw two joins and gave +v for the same nickname twice

[01:25] <AlexDaniel> timotimo: I mean, currently it's very basic, but once I add all the transitions and everything I'm pretty sure I won't have enough hands to do all that

[01:25] <cheese_cake__> sorry I got it working

[01:25] <cheese_cake__> I needed to update the desktop database, that is all

[01:25] <timotimo> aah

[01:25] <timotimo> AlexDaniel: there's a product that has like a 4x4 matrix of little oled screen buttons, it only costs like a bazillion megadollars

[01:26] <AlexDaniel> timotimo: and there's a camera that must be controlled constantly, so definitely some pedals can help

[01:26] <AlexDaniel> or an AI to pan & tilt the camera, that can work too :)

[01:26] *** molaf joined
[01:27] <timotimo> https://www.elgato.com/en/gaming/stream-deck - i lied, it's 5x3

[01:27] <[Coke]> zef verison is zef info zef (ugh, why does this try to make a network connection?)

[01:27] *** p6bannerbot sets mode: +v molaf

[01:28] *** ZzZombo left
[01:29] *** zakharyas joined
[01:30] *** p6bannerbot sets mode: +v zakharyas

[01:30] <timotimo> i wonder what kind of price you'd have to pay to build your own stream deck like device

[01:30] <timotimo> since we're in the "build it yourself" headspace anyway

[01:31] <timotimo> welp, i really ought to catch some sleep

[01:31] <timotimo> seeya!

[01:32] <AlexDaniel> good night o/

[01:40] *** Bucciarati left
[01:40] *** Bucciarati joined
[01:41] *** p6bannerbot sets mode: +v Bucciarati

[01:42] <AlexDaniel> timotimo: the price is a lot of time :)

[01:42] <SmokeMachine> .tell Zoffix just the precedence isn't working yet... https://www.irccloud.com/pastebin/tAK446K1/

[01:42] <yoleaux> SmokeMachine: I'll pass your message to Zoffix.

[01:45] <cheese_cake__> what does this mean? You can't adverb $variable

[01:47] <geekosaur> [Coke], I'd suspect ti's reprotingnot the runningversion btu the package version that can be installd

[01:48] <geekosaur> cheese_cake__, sounds like you did :$foo where that's not allowed

[02:02] *** graphene left
[02:03] *** graphene joined
[02:04] *** p6bannerbot sets mode: +v graphene

[02:06] <cheese_cake__> geekosaur: i missed a comma lol

[02:16] <buggable> New CPAN upload: Cro-RPC-JSON-v0.0.3.tar.gz by VRURG http://modules.perl6.org/dist/Cro::RPC::JSON:cpan:VRURG

[02:20] *** ZzZombo joined
[02:20] *** p6bannerbot sets mode: +v ZzZombo

[02:20] <cheese_cake__> perl is fun!

[02:26] <cheese_cake__> does perl 6 have a de-facto gui library?

[02:31] *** cheese_cake__ left
[02:31] *** cheese_cake__ joined
[02:32] *** p6bannerbot sets mode: +v cheese_cake__

[02:43] *** aborazmeh left
[02:52] *** graphene left
[02:53] *** graphene joined
[02:54] *** p6bannerbot sets mode: +v graphene

[02:58] *** cheese_cake__ left
[03:42] *** graphene left
[03:43] *** graphene joined
[03:44] *** p6bannerbot sets mode: +v graphene

[04:15] *** vinay_ joined
[04:15] *** p6bannerbot sets mode: +v vinay_

[04:16] *** vinay_ left
[04:24] *** bpalmer left
[04:37] <SmokeMachine> `.^create` means: `my $obj = Bla.new: |%pars; $obj.^save: :insert; return $obj`

[04:44] *** lizmat left
[04:54] *** curan joined
[04:54] *** p6bannerbot sets mode: +v curan

[04:58] *** lizmat joined
[04:58] *** p6bannerbot sets mode: +v lizmat

[04:59] *** graphene left
[05:00] *** graphene joined
[05:01] *** p6bannerbot sets mode: +v graphene

[05:02] *** lizmat left
[05:06] *** ufobat joined
[05:07] *** p6bannerbot sets mode: +v ufobat

[05:15] *** graphene left
[05:16] *** graphene joined
[05:17] *** p6bannerbot sets mode: +v graphene

[05:25] *** jmerelo joined
[05:26] *** p6bannerbot sets mode: +v jmerelo

[05:27] *** molaf left
[05:37] *** sena_kun joined
[05:37] *** p6bannerbot sets mode: +v sena_kun

[05:39] *** xinming left
[05:39] *** xinming joined
[05:39] *** Celelibi left
[05:40] *** p6bannerbot sets mode: +v xinming

[06:13] *** sno left
[06:19] *** robertle joined
[06:20] *** p6bannerbot sets mode: +v robertle

[06:29] *** grondilu_ joined
[06:29] *** domidumont joined
[06:30] *** p6bannerbot sets mode: +v grondilu_

[06:30] <Geth> ¦ doc: a886210e62 | (JJ Merelo)++ | doc/Language/list.pod6

[06:30] <Geth> ¦ doc: Expands the "fixed size array" section

[06:30] <Geth> ¦ doc: 

[06:30] <Geth> ¦ doc: Indexing it also as shaped arrays, expanding a bit the examples, and

[06:30] <Geth> ¦ doc: adding the changes in 2018.09. Closes #2326

[06:30] <synopsebot> Link: https://doc.perl6.org/language/list

[06:30] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a886210e62

[06:30] *** jmerelo left
[06:30] *** p6bannerbot sets mode: +v domidumont

[06:32] *** grondilu left
[06:34] *** erana_ left
[06:38] *** graphene left
[06:39] *** graphene joined
[06:40] *** p6bannerbot sets mode: +v graphene

[06:51] *** Esca left
[06:52] *** danger8926 joined
[06:52] *** danger8926 left
[07:06] *** Actualeyes left
[07:07] *** abraxxa joined
[07:08] *** p6bannerbot sets mode: +v abraxxa

[07:16] *** finanalyst joined
[07:17] *** p6bannerbot sets mode: +v finanalyst

[07:18] *** Summertime left
[07:19] *** Summertime joined
[07:19] *** p6bannerbot sets mode: +v Summertime

[07:21] <finanalyst> good time of day. Trying to set up perl6 on a hosted server. Configure.pl ends OK. During make, reaches the 'takes long time' part, Stage start ok. But at stage parse, I get MoarVM panic Memory allocation failed; count not allocated xxx bytes. The xxx is different three times I tried, eg., 15840, then 48, then 1024

[07:21] *** acksys joined
[07:21] *** acksys left
[07:22] <finanalyst> I will probably need to ask hoster support, but some idea about the problem would help.

[07:24] <moritz> it means you don't have enough RAM to compile rakudo

[07:28] <finanalyst> so why is it different each time?

[07:32] <moritz> this is just speculation, but either the multithreadedness introduces some non-determinism

[07:32] <moritz> or maybe the memory usage by other processes on the machine varies over time, leading to rakudo dying sooner or later

[07:34] <finanalyst> Seems to me it's probably multi-user problem since I am using a virtual server. I'm writing to support staff. It's possible that I can use a snap package. 

[07:46] *** dakkar joined
[07:47] *** p6bannerbot sets mode: +v dakkar

[07:47] <jast> virtual server soltuions sometimes give you some extra memory temporarily... but "multi-user problems" typically refers to other processes within the same virtual server, e.g. init, syslog, mail, ...

[07:49] *** scimon joined
[07:49] *** p6bannerbot sets mode: +v scimon

[07:50] <El_Che> finanalyst: what OS do you run?

[07:50] <El_Che> finanalyst: do you have root to install packages?

[07:51] *** erana_ joined
[07:51] *** p6bannerbot sets mode: +v erana_

[07:52] <masak> finanalyst: hi! long time no see \o

[08:03] *** robertle left
[08:05] *** robertle joined
[08:06] *** p6bannerbot sets mode: +v robertle

[08:23] *** robertle_ joined
[08:23] *** lizmat joined
[08:23] *** p6bannerbot sets mode: +v lizmat

[08:23] *** p6bannerbot sets mode: +v robertle_

[08:24] *** robertle1 joined
[08:24] *** p6bannerbot sets mode: +v robertle1

[08:24] *** robertle left
[08:25] *** Ven` joined
[08:25] *** p6bannerbot sets mode: +v Ven`

[08:33] *** domidumont left
[08:34] *** domidumont joined
[08:35] *** p6bannerbot sets mode: +v domidumont

[08:36] *** Xliff_ joined
[08:37] *** p6bannerbot sets mode: +v Xliff_

[08:38] *** Xliff left
[08:40] *** ball_ joined
[08:40] *** p6bannerbot sets mode: +v ball_

[08:42] *** ball_ left
[08:49] *** graphene left
[08:51] *** graphene joined
[08:51] *** p6bannerbot sets mode: +v graphene

[08:57] <ZzZombo> m: class A { has $.foo = slack { ... } }

[08:57] <camelia> rakudo-moar 75cf8be72: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    slack used at line 1␤␤»

[09:03] <lizmat> ZzZombo: use Object::Delayed

[09:03] <lizmat> available at a local CPAN mirrot  :-)

[09:03] <lizmat> *mirrir

[09:03] <lizmat> argh  

[09:03] <lizmat> *mirror

[09:03] * lizmat should get another cuppa tea

[09:11] *** rindolf joined
[09:12] *** pmurias joined
[09:12] *** p6bannerbot sets mode: +v pmurias

[09:12] *** p6bannerbot sets mode: +v rindolf

[09:12] <pmurias> hi

[09:12] *** zakharyas left
[09:30] *** sotona joined
[09:30] *** p6bannerbot sets mode: +v sotona

[09:34] *** sotona left
[09:41] *** Nightcinder14 joined
[09:41] *** Nightcinder14 left
[09:45] *** ExtraCrispy left
[09:52] <masak> hi, pmurias 

[09:52] <masak> lizmat: clearly, a "CPAN mirrot" is where you'd go to download Parrot back in the day :)

[09:52] <masak> whereas "mirrir" sounds like Tolkien Elvish for some reason

[09:53] *** thundergnat left
[09:53] <lizmat> .oO( its good to be amongst mellons )

[09:57] * masak .oO( "I was carrying a melon" -- Dirty Dancing )

[09:59] *** gregf_ joined
[09:59] *** p6bannerbot sets mode: +v gregf_

[10:04] *** andrzejku left
[10:05] *** HaraldJoerg joined
[10:06] *** p6bannerbot sets mode: +v HaraldJoerg

[10:09] <tyil> is there an easy way to split up a string into a list of strings, each 5 characters long?

[10:10] <sena_kun> m: say '12345123451234512345'.comb(5).map(*.join)

[10:10] <camelia> rakudo-moar 75cf8be72: OUTPUT: «(12345 12345 12345 12345)␤»

[10:10] <sena_kun> m: say '123451234512345123451234'.comb(5).map(*.join)

[10:10] <camelia> rakudo-moar 75cf8be72: OUTPUT: «(12345 12345 12345 12345 1234)␤»

[10:10] <tyil> neat

[10:10] <tyil> thanks :>

[10:10] <sena_kun> m: say '123451234512345123451234'.comb(5).>>join

[10:10] <camelia> rakudo-moar 75cf8be72: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing dot on method call␤at <tmp>:1␤------> 3ay '123451234512345123451234'.comb(5).>>7⏏5join␤    expecting any of:␤        postfix␤»

[10:10] <sena_kun> ouch. :S

[10:11] <sena_kun> cannot do something better locally, as my rakudo is broken now. :S

[10:11] <tyil> I was trying it with a regex (/. ** 5/) but that seemed to drop the final part

[10:11] <tyil> but with a simple number it works as expected

[10:11] <sena_kun> I believe regex will be more costly.

[10:11] <tyil> that for sure

[10:11] <lizmat> m: dd '12345123451234512345'.comb(5)

[10:11] <camelia> rakudo-moar 75cf8be72: OUTPUT: «("12345", "12345", "12345", "12345").Seq␤»

[10:12] <lizmat> not sure why you would need the .join ?

[10:12] <sena_kun> hm...

[10:12] <sena_kun> m: say '123451234512345123451234'.comb(5)

[10:12] <camelia> rakudo-moar 75cf8be72: OUTPUT: «(12345 12345 12345 12345 1234)␤»

[10:12] <sena_kun> wow, indeed.

[10:12] <sena_kun> lizmat++

[10:13] *** ZzZombo left
[10:13] <sena_kun> that was not a nice thinko. :S

[10:14] *** Ven` left
[10:15] *** finanalyst left
[10:43] *** gregf_ left
[10:43] *** ExtraCrispy joined
[10:44] *** p6bannerbot sets mode: +v ExtraCrispy

[10:46] *** leont joined
[10:47] *** p6bannerbot sets mode: +v leont

[10:48] <masak> m: dd '12345123451234512345'.comb(/ . ** 1..5 /)

[10:48] <camelia> rakudo-moar 75cf8be72: OUTPUT: «("12345", "12345", "12345", "12345").Seq␤»

[10:49] <masak> I guess it's nice and dwimmy that 5 gives the same as that regex above...

[10:50] <masak> ...but I can't help thinking that it'd been more consistent if 1..5 (the range) gave that result, and a sole 5 dropped the final 4-group, just like the corresponding regex does

[10:56] <lizmat> if you feel that strongly about it, then by all means, make an issue for it

[10:56] <lizmat> the code changes would be minimal

[10:57] <masak> dunno about "feel that strongly" :)

[10:57] <masak> we probably have bigger inconsistencies to fry

[10:59] <lizmat> perhaps add a :partial named param that is True for compatibility reasons ?

[11:00] <masak> I would consider that worse than the current state

[11:00] <masak> but you're right that the change would break backwards compatibility, and that might be reason enough not to make it

[11:00] <lizmat> afaik, the current behaviour exists since before Christmas

[11:01] <lizmat> so it'd definitely 6.c behaviour

[11:01] <masak> I wonder if the ecosystem depends on the current behavior somewhere

[11:04] <pmurias> the docs mention that a integer value to comb behaves as rx/. ** {$matcher}/

[11:06] <moritz> I know I've used that behavior in my own code

[11:06] <moritz> (though probably darkpan, not public anywhere)

[11:08] <masak> pmurias: so implementation/docs are inconsistent? I wonder if there are any tests?

[11:12] <moritz> m: say 'abc'.comb(2)

[11:12] <camelia> rakudo-moar 75cf8be72: OUTPUT: «(ab c)␤»

[11:24] *** ZzZombo joined
[11:24] *** p6bannerbot sets mode: +v ZzZombo

[11:32] <pmurias> masak: yes they are inconsistent

[11:32] <pmurias> masak: the only test I found is

[11:32] <pmurias> m: say 1337.comb(2)

[11:32] <camelia> rakudo-moar 75cf8be72: OUTPUT: «(13 37)␤»

[11:32] <masak> haha

[11:32] <masak> then, in a sense, it's not a breaking change to fix this

[11:33] <masak> since the test suite *is* the specification

[11:33] <masak> I knew I would have use for that some day!

[11:33] * masak hopes he is not a little mind of which foolish consistency is the hobgoblin

[11:38] *** pmurias left
[11:39] *** pmurias joined
[11:39] *** p6bannerbot sets mode: +v pmurias

[11:40] *** Roamer` joined
[11:41] *** p6bannerbot sets mode: +v Roamer`

[11:41] *** Ven` joined
[11:42] *** p6bannerbot sets mode: +v Ven`

[11:42] <pmurias> masak: it's a breaking change in regards to our "de facto specification"

[11:43] <masak> yes. question is (a) how much of ecosystem/darkpan that affects, and (b) what our policy is around such changes.

[11:44] <masak> I'm fine with the policy being "we prefer stability to consistency" -- in a way, that's a responsible stance when you have users

[11:45] <lizmat> looks like the mention of being the same as . ** N was documented May 2018

[11:51] <pmurias> is the . ** N semantics more useful than the . ** 1..N semantics

[11:52] <masak> to me, it feels like the kind of thing where no matter which one you choose, you need to think through what semantics you want

[11:52] <masak> (and this was not clear to whoever wrote that test)

[11:53] <lizmat> m: dd "abcdefghij".comb( / . 3. .. 7/ )

[11:53] <camelia> rakudo-moar 75cf8be72: OUTPUT: «().Seq␤»

[11:53] <lizmat> m: dd "abcdefghij".comb( / . 3 .. 7/ )

[11:53] <camelia> rakudo-moar 75cf8be72: OUTPUT: «().Seq␤»

[11:53] <lizmat> huh?

[11:53] <jast> **

[11:53] <masak> missing **

[11:54] <lizmat> ah, duh

[11:54] <lizmat> m: dd "abcdefghij".comb( / . ** 3 .. 7/ )

[11:54] <camelia> rakudo-moar 75cf8be72: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Spaces not allowed in bare range.␤at <tmp>:1␤------> 3dd "abcdefghij".comb( / . ** 3 ..7⏏5 7/ )␤»

[11:54] <lizmat> m: dd "abcdefghij".comb( / . ** 3..7/ )

[11:54] <camelia> rakudo-moar 75cf8be72: OUTPUT: «("abcdefg", "hij").Seq␤»

[11:54] <lizmat> m: dd "abcdefghij".comb( / . ** 4..7/ )

[11:54] <camelia> rakudo-moar 75cf8be72: OUTPUT: «("abcdefg",).Seq␤»

[11:55] <pmurias> masak: the test was added after adding the .comb to Cool not after the Int variant of Comb was implemented

[11:55] <masak> ok, hm

[11:55] <lizmat> m: dd "abcdefghij".comb( / . ** 0..7 / )  # also interesting

[11:55] <camelia> rakudo-moar 75cf8be72: OUTPUT: «("abcdefg", "hij", "").Seq␤»

[11:55] * pmurias misses the old test-to-"spec" connecting smartlinks

[11:56] <masak> pmurias: those were the days :)

[11:56] <masak> but that broke already during the Pugs/au era, I remember

[11:57] <pmurias> masak: the passing/failing integration failed first

[11:57] <masak> right

[11:57] * lizmat notices that no issue has been made yet

[11:59] *** Zoffix joined
[11:59] *** p6bannerbot sets mode: +v Zoffix

[12:00] <Zoffix> masak: I think all of the "consistency" stuff (at least for stuff that isn't obscure) should be tagged with "consistency" label and all of it taken care of in one fell swoop, rather than rushing to modify stuff as soon as we think something's inconsistent

[12:01] <Zoffix> masak: that's a lesson learned from GitHub changing little bit here and there for 2 years now, and it looks like shit now and all of that changing is annoying. I don't want our users thinking we're changing everything all the time from under them

[12:02] <masak> Zoffix: I hear you.

[12:02] <masak> Zoffix: ...we just need to consider whether the cure is better than the disease in this case, or worse :)

[12:02] * masak .oO( introducing Perl 6 3000 ) :P

[12:03] <Zoffix> masak: also, I'm -1 on that change because: (a) it's already the way it is and I'm also fairly sure I have code that uses that pattern; (b) because old code will still work, but will now give wrong results; (c) because now users will have a potential to intro a bug where they write `5` instead of `1..5` without realizing they're losing the end; and (d) it's still inconsistent with the way .rotor works. The

[12:03] <Zoffix> .rotor doesn't take a range, it takes :partial adverb

[12:05] <Zoffix> Some of the other inconsistencies we have https://temp.perl6.party/inconsistencies.txt https://github.com/rakudo/rakudo/issues?q=is%3Aopen+is%3Aissue+label%3Aconsistency

[12:05] <lizmat> hence my suggestion for :partial

[12:05] <Zoffix> It's quite a bit, which is why IMO we shouldn't be doing them all piece-meal

[12:05] <lizmat> defaulting to True for compatubiity

[12:05] <Zoffix> lizmat: so it'd be the same argument, but defaulting to the opposite of what .rotor does? I fail to see how that improves things.

[12:06] <lizmat> it would be compatible  :-)

[12:06] <Zoffix> heh

[12:07] <masak> lizmat: introducing an adverb which defaults to True automatically has a -1 starting score, design-wise

[12:07] * Zoffix &

[12:07] *** Zoffix left
[12:07] <lizmat> masak: I agree, just listing options

[12:08] <masak> and making it backwards-compatible but *inconsistent with .rotor* means we'd be fixing one inconsistency but introducing another... :)

[12:13] *** graphene left
[12:15] *** graphene joined
[12:15] *** p6bannerbot sets mode: +v graphene

[12:23] *** zakharyas joined
[12:23] *** p6bannerbot sets mode: +v zakharyas

[12:26] *** josePhoenix27 joined
[12:27] *** p6bannerbot sets mode: +v josePhoenix27

[12:30] *** josePhoenix27 left
[12:44] <AlexDaniel> masak: yeah, the policy is “don't break modules and other stuff, please” :)

[12:45] <AlexDaniel> if you look at the past few releases, we've been trying to do that even if modules depended on buggy/incorrect behavior

[12:46] <AlexDaniel> masak: but you should open a ticket for sure

[12:50] <AlexDaniel> so changing this (if we decide to change it) will have to go through a deprecation cycle, I think

[12:50] <pmurias> the docs need to be fixed even if we are keeping the semantics

[12:50] <pmurias> AlexDaniel: you can you deprecate that change?

[12:51] *** Ven` left
[12:51] <lizmat> masak: feelings about *adding* the Str.comb(Range) candidate ?

[12:52] *** leont left
[12:52] *** mcmillhj joined
[12:52] *** Ven` joined
[12:53] *** p6bannerbot sets mode: +v mcmillhj

[12:53] *** p6bannerbot sets mode: +v Ven`

[12:53] *** hamhu3 joined
[12:54] *** p6bannerbot sets mode: +v hamhu3

[12:55] <AlexDaniel> pmurias: yes, why not?

[12:56] <AlexDaniel> well, maybe not, but why :)

[12:56] <pmurias> because the change is going from $str.comb(5) to $str.comb(5)

[12:59] <pmurias> AlexDaniel: we can deprecate stuff that will be removed, I don't know how to deprecate things that will work slightly differently

[12:59] <AlexDaniel> yes, but, for example, we can start making it give a warning in v6.d, then forbid it in v6.e, and then reintroduce it in v6.f

[13:00] <AlexDaniel> but technically I have no idea how to do that because quantifiers are parsed in nqp, right?

[13:00] <pmurias> thought about such a scheme but it doesn't seem sane at all

[13:01] <pmurias> AlexDaniel: the dicussion is about a multi taking an Integer instead of an regex

[13:01] * AlexDaniel rereads

[13:05] <pmurias> lizmat: re adding a Str.comb(Range) the question is if it would be used commonly enough that $str.comb(/. ** {$range}) is not good enough

[13:06] <AlexDaniel> greppable6: comb\(\d\)

[13:06] <greppable6> AlexDaniel, 2 lines, 2 modules: https://gist.github.com/140d38ec6c8eae319a67af5a6c989fc0

[13:06] <AlexDaniel> greppable6: comb\(\d+\)

[13:06] <greppable6> AlexDaniel, 2 lines, 2 modules: https://gist.github.com/4ce4398138924fcbe41f15fbb2845ac1

[13:06] <AlexDaniel> greppable6: comb: \d+

[13:06] <greppable6> AlexDaniel, 1 line, 1 module: https://gist.github.com/64a79cbfef1d158f5d6e818ec53afd3b

[13:07] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/09/24/2018-39-less-than-two/

[13:07] <AlexDaniel> pmurias: I see. Sry just woke up :)

[13:07] *** zakharyas left
[13:08] <AlexDaniel> pmurias: anyway we shouldn't just change the behavior in place without any kind of a generated warning, so it may be insane but another option is not really an option, IMO

[13:08] <AlexDaniel> but also we'd hit R#1289 again, right?

[13:08] <synopsebot> R#1289 [open]: https://github.com/rakudo/rakudo/issues/1289 [6.e] Implement a Way to Know Caller's Language

[13:11] <lizmat> pmurias: except that ("foo" x 100).comb(3) is about 15x faster than ("foo" x 100).comb( / . ** 3 / )

[13:12] *** sno joined
[13:13] *** p6bannerbot sets mode: +v sno

[13:13] <AlexDaniel> lizmat: then we should optimize / . ** 3 / into 3 :)

[13:15] <lizmat> and with the current implementation, that would change the semantics (which is why this all got started)

[13:16] <jast> that's a very, very specific optimization... :)

[13:17] *** sno left
[13:17] <lizmat> pretty sure Perl 5 has many of those special cases optimized in different code paths

[13:18] <AlexDaniel> right ** 1..3 into 3… :S

[13:19] <jast> it's . ** (something) specifically... the same optimization wouldn't apply to foo ** (something)

[13:22] *** Hummer120074 joined
[13:22] *** Hummer120074 left
[13:28] *** avar left
[13:28] *** avar joined
[13:28] *** avar left
[13:28] *** avar joined
[13:28] *** p6bannerbot sets mode: +v avar

[13:29] *** p6bannerbot sets mode: +v avar

[13:31] *** titsuki joined
[13:32] *** regreg joined
[13:32] *** p6bannerbot sets mode: +v titsuki

[13:33] *** p6bannerbot sets mode: +v regreg

[13:33] *** mcmillhj left
[13:35] *** noganex left
[13:39] *** mcmillhj joined
[13:40] *** p6bannerbot sets mode: +v mcmillhj

[13:55] *** HaraldJoerg1 joined
[13:55] *** p6bannerbot sets mode: +v HaraldJoerg1

[13:56] *** HaraldJoerg left
[14:08] *** ajr joined
[14:08] *** p6bannerbot sets mode: +v ajr

[14:08] *** ajr is now known as Guest99536

[14:10] *** curan left
[14:10] *** DoctorD9018 joined
[14:10] *** DoctorD9018 left
[14:10] *** HaraldJoerg1 is now known as HaraldJoerg

[14:12] *** mcmillhj_ joined
[14:12] <Guest99536> I want a job to run (in *nix) if there is no program on $PATH with a particular name, (e.g. foob). In P5, 'die unless system("which foob") ' works. What's the best P6 equivalent?

[14:13] *** mcmillhj_ left
[14:15] *** mcmillhj left
[14:15] <scimon> die unless QX("which foob") ?

[14:15] <Guest99536> Actually, it's "which foob 2>/dev/null", because the error messages are irrelevant

[14:17] <jnthn-nomsg> die unless run("which", "bash", :!out)

[14:17] <jnthn-nomsg> The :!out suppresses stdout

[14:20] <Guest99536> @jnthn-nomsg Should that be run("which foob", &c? 

[14:20] <AlexDaniel> no, because it doesn't go through shell

[14:20] *** kurahaupo left
[14:20] *** kurahaupo joined
[14:20] <jnthn-nomsg> What AlexDaniel said :)

[14:21] *** p6bannerbot sets mode: +v kurahaupo

[14:21] <jnthn-nomsg> There's also a shell, but run gets the shorter name and is encouraged more, 'cus it's the safer thing

[14:22] *** Ven` left
[14:23] <Guest99536> 1. How does it know it's "foob" I'm trying to find, and 2. what has set $PATH there?

[14:24] <jast> the example was for bash, not foob. adjust accordingly.

[14:24] <jast> and, well, PATH almost always comes from the environment of the parent process

[14:25] <AlexDaniel> which you can also change by passing :env

[14:26] <tyil> Guest99536: any objection to a module? https://github.com/azawawi/perl6-file-which

[14:27] <Guest99536> (to set the context, I've a P6 script I want to fail if an executable foob exists on $PATH, and continue on its merry way if it doesn't. If there's a more elegant way to do that, Ipray tell. 

[14:28] *** modews joined
[14:28] *** modews left
[14:28] <tyil> use File::Which; which("foob") and die("found foob");

[14:29] <tyil> or `use File::Which; die("found foob") unless which("foob");

[14:29] <jast> and here's how to golf it without spawning processes:

[14:29] <jast> m: say "yay" if %*ENV<PATH>.split(':')>>.IO>>.add('bash')>>.e.any

[14:29] <camelia> rakudo-moar 75cf8be72: OUTPUT: «yay␤»

[14:30] <Guest99536> @tyil thanks, that looks very promising.

[14:31] <jast> my golfed version doesn't work on windows btw ;)

[14:32] <Guest99536> Neither do I. :-)*

[14:32] <Guest99536> bye

[14:33] <tyil> good luck with your code :)

[14:33] <Guest99536> exit

[14:33] <jast> well, I'm not terribly familiar with Perl6, just found a portable version that is shorter, too

[14:34] <jast> m: say "yay" if $*SPEC.path>>.IO>>.add('bash')>>.e.any

[14:34] <camelia> rakudo-moar 75cf8be72: OUTPUT: «yay␤»

[14:34] <jast> still golfy, of course

[14:35] *** Ven` joined
[14:35] *** p6bannerbot sets mode: +v Ven`

[14:38] *** Guest99536 left
[14:46] *** Possum joined
[14:46] *** p6bannerbot sets mode: +v Possum

[14:47] *** domidumont left
[14:48] *** leont joined
[14:49] *** p6bannerbot sets mode: +v leont

[14:50] *** megagarbage joined
[14:50] *** megagarbage left
[14:59] *** itaipu joined
[15:00] *** p6bannerbot sets mode: +v itaipu

[15:07] *** Alina-malina5 joined
[15:07] *** Alina-malina5 left
[15:10] *** titsuki left
[15:15] *** noganex joined
[15:16] *** p6bannerbot sets mode: +v noganex

[15:17] *** dakkar left
[15:25] *** fake_space_whale joined
[15:26] *** domidumont joined
[15:26] *** p6bannerbot sets mode: +v fake_space_whale

[15:26] *** p6bannerbot sets mode: +v domidumont

[15:28] *** domidumont1 joined
[15:29] *** p6bannerbot sets mode: +v domidumont1

[15:30] <scimon> Just to check for some notes on a talk. When v6.d is released will it be backwards compatible with v6.c? 

[15:30] *** domidumont left
[15:31] <lizmat> v6.d is a definition

[15:31] <lizmat> if you have a rakudo compiler that supports v6.d, then if you use "use v6.c" it should be just like v6.c

[15:31] <scimon> That's what I figured.

[15:31] <lizmat> is my understanding of how this will work

[15:32] <diakopter> *boggles*

[15:32] <lizmat> so: in short, the answer is yes

[15:32] <scimon> :)

[15:32] <El_Che> or better, we hope so

[15:32] <scimon> Current plan is to give a talk at LPM next month on using Perl6 for command line scripts. 

[15:33] <lizmat> scimon: cool!

[15:33] *** mcmillhj joined
[15:33] <El_Che> scimon: I was thinking of the same thing

[15:33] <El_Che> had a blog post about that that never got published

[15:34] <El_Che> drop the url if streamed or recorded

[15:34] *** p6bannerbot sets mode: +v mcmillhj

[15:34] <scimon> Will do. 

[15:37] <El_Che> I moved my zfs snapshotting setup from overcomplicated shell to perl6

[15:37] <El_Che> happy about it

[15:42] *** Ohelig joined
[15:42] *** Ohelig left
[15:59] *** Lengsdorfer20 joined
[15:59] *** Lengsdorfer20 left
[16:16] *** Xliff_ left
[16:18] *** robertle1 left
[16:18] *** robertle_ left
[16:25] *** imcsk8 left
[16:29] <Geth> ¦ marketing: 73a3bbf662 | (Zoffix Znet)++ | 17 files

[16:29] <Geth> ¦ marketing: Add Atomics 6.d Teaser / ID 1537803105

[16:29] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/73a3bbf662

[16:29] *** Zoffix joined
[16:29] *** p6bannerbot sets mode: +v Zoffix

[16:30] <El_Che> scimon: is that the London Perl Workshop? (I read it was postponed)

[16:31] <lizmat> 24 nov

[16:31] <scimon> This is the Perl Mongers Meetup. 

[16:31] <scimon> I'm going to do something at LPW too. Working out what. 

[16:31] <lizmat> Zoffix: should that show on https://marketing.perl6.org ?

[16:32] <El_Che> scimon: cool to witness the enthousiasm you jumped with into p6

[16:32] <Zoffix> lizmat: I think so. Prolly in ~5-10 minutes when cron picks it up

[16:33] <scimon> It's a great language. And if there's one thing I can do it's enthusiasm. 

[16:33] *** imcsk8 joined
[16:33] <scimon> Signing off.

[16:33] *** scimon left
[16:33] <El_Che> scimon: cool attitude

[16:34] *** p6bannerbot sets mode: +v imcsk8

[16:37] <Zoffix> hm, for some reason didn't take it automagically. had to manually restart the app

[16:38] <Zoffix> damn, colour's messed up :S

[16:39] *** fake_space_whale left
[16:39] <Zoffix> eh, so be it

[16:43] <Geth> ¦ marketing: 19470c15c6 | (Zoffix Znet)++ | 7 files

[16:43] <Geth> ¦ marketing: Fix bg colorshift on Atomics teaser

[16:43] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/19470c15c6

[16:46] <Zoffix> In Perl 6 6.d you're now able to harness the Power of The Atom! Thread-safe atomic operations on a new atomicint type! https://marketing.perl6.org/id/1537803105/pdf_digital

[16:48] *** Kaiepi joined
[16:49] *** p6bannerbot sets mode: +v Kaiepi

[16:49] <leont> That syntax will surprise people

[16:49] <Zoffix> We don't mind.

[16:50] *** Zoffix left
[16:51] <leont> Not sure I understand the reson for it, can't that translation be made by the compiler?

[16:52] <timotimo> what translation?

[16:52] <tyil> leont: there's a function using only ascii characters that one can use instead

[16:52] <tyil> (I'm not particularly fond of the atom emoji in the atomic operations tbh)

[16:52] <leont> The thing is declared as an atomicint, a ++ on it should clearly be an atomic++

[16:53] <tyil> that would make more sense to me as well

[16:53] <timotimo> if you're passing an int that's not compatible with atomic operators and you just ++ it, there won't be an error, though

[16:54] <timotimo> it'll just silently do a non-atomic ++

[16:54] <tyil> we have all these objects that do the right thing in other situations

[16:54] <timotimo> we also don't concatenate strings when you + them

[16:54] <timotimo> even though "the variables you're passing are clearly strings"

[16:55] <timotimo> also, i think it's useful for atomic operations to stand out

[16:55] <lizmat> timotimo: wasn't "atomicint" just about the size of the int ?

[16:55] <leont> Concatenation is a fundamentally a different thing. Atomic operations aren't fundamentally different from their non-atomic siblings.

[16:55] <timotimo> yes

[16:57] *** HaraldJoerg left
[16:57] *** HaraldJoerg joined
[16:58] *** p6bannerbot sets mode: +v HaraldJoerg

[16:59] <timotimo> yes to atomicint being "only" about the size of an int

[17:00] <timotimo> i do think we can differentiate between int64 and atomicint, though

[17:05] *** Zoffix joined
[17:05] *** p6bannerbot sets mode: +v Zoffix

[17:06] *** imcsk8 left
[17:06] <Zoffix> leont: you'd have to unspace `atomic++` from the variable each time then

[17:06] <Zoffix> So the "clearly should be" is clearly not clearly.

[17:06] <leont> Zoffix: that's not quite what I meant

[17:07] <Zoffix> leont: what did you mean?

[17:08] <leont> That I see no reason for «atomicint $foo; ++$foo» not to DWIM

[17:08] *** imcsk8 joined
[17:08] <Zoffix> leont: ah, that regular ++ would be automagically an atomic++. Well, automic ++ is more expensive. If you're not doing it across threads, you're just wasting valuable resources doing useless labour

[17:09] *** p6bannerbot sets mode: +v imcsk8

[17:09] <Zoffix> m: my atomicint $x; {for ^2000_000 { $x⚛++ }; say now - ENTER now}

[17:09] <camelia> rakudo-moar 2bdf2b35a: OUTPUT: «0.5193665␤»

[17:09] <Zoffix> m: my atomicint $x; {for ^2000_000 { $x++ }; say now - ENTER now}

[17:09] <camelia> rakudo-moar 2bdf2b35a: OUTPUT: «0.2631085␤»

[17:09] <leont> Then don't use an atomicint?

[17:10] <SmokeMachine> Zoffix: but, that way, wouldnt be better to create a way to not atomic increment on atomicint but let the ++ be atomic?

[17:10] <Zoffix> leont: but I'm not writing a single line of code with it. 

[17:10] <Zoffix> SmokeMachine: I don't understand what you mean.

[17:11] <Zoffix> leont: I mean, I have threaded writes and non-threaded ones. 

[17:11] <SmokeMachine> atomicint $a; $a++ #`{atomic}; $a.not-atomic-increment #`{not atomic}

[17:11] <leont> You've just proved you dan do 2 million of them in a few tens of a second

[17:11] <leont> *can

[17:11] <leont> I think it's more than silly to worry about that performance

[17:12] <SmokeMachine> atomicint $a; $a++; $a.not-atomic-increment # the first would be atomic and the last (with another name) wouldnt

[17:12] <leont> If that's you're performance bottleneck, you probably should be using C or (heaven forbid) Fortran

[17:12] <leont> *your

[17:12] * [Coke] wears half of a larry costume to work today.

[17:12] <Zoffix> SmokeMachine: there aren't any methods on native types.

[17:13] <SmokeMachine> $a nonatomic++, or something else

[17:13] <Zoffix> SmokeMachine: that's a syntax error

[17:13] <Zoffix> You'd need an unspace.

[17:14] <Zoffix> And we're back at fancy unicode symbols or subs, and so we're back where we started, except now we also have an inconsistency in operators

[17:15] <Zoffix> Do any of you even used these ops?

[17:16] <Zoffix> *ever

[17:16] <Zoffix> People live to moan and complain about everything the can, but I doubt any of these problems you're throwing out are real.

[17:16] <Zoffix> s/live/love/;

[17:16] <leont> I have used them in other languages

[17:17] <Zoffix> m: multi postfix:<♥> (atomicint $x) { say "here" }; multi postfix:<♥> (int $x) { say "there" }; my int $x; $x♥

[17:17] <camelia> rakudo-moar 2bdf2b35a: OUTPUT: «Ambiguous call to 'postfix:<♥>(Int)'; these signatures all match:␤:(atomicint $x)␤:(int $x)␤  in block <unit> at <tmp> line 1␤␤»

[17:17] <Zoffix> Looks like with the current way it's implemented, you can't differentiate between an atomicint and normal one

[17:18] <leont> That's surprising

[17:18] <Zoffix> You can't differentiate between, say, int32 and int64 either

[17:19] <leont> Then I don't understand how they're implemented.

[17:20] <leont> Is that an implementation artifact or language design?

[17:20] <Zoffix> I think it's by-design that they are the same weight in dispatch

[17:20] <Zoffix> m: say int64 ~~ int32

[17:20] <camelia> rakudo-moar 2bdf2b35a: OUTPUT: «False␤»

[17:20] <Zoffix> m: say int64 ~~ int64

[17:20] <camelia> rakudo-moar 2bdf2b35a: OUTPUT: «True␤»

[17:21] <SmokeMachine> that's a good reason...

[17:21] <Zoffix> m: multi postfix:<♥> ($x where atomicint) { say "here" }; multi postfix:<♥> ($x where int) { say "there" }; my int $x; my atomicint $y; $x♥; $y♥

[17:21] <camelia> rakudo-moar 2bdf2b35a: OUTPUT: «Cannot resolve caller postfix:<♥>(0); none of these signatures match:␤    ($x where { ... })␤    ($x where { ... })␤  in block <unit> at <tmp> line 1␤␤»

[17:21] <Zoffix> weird

[17:21] <Zoffix> m: my int64 $x; say $x ~~ int64

[17:21] <camelia> rakudo-moar 2bdf2b35a: OUTPUT: «False␤»

[17:21] <SmokeMachine> m: say atomicint ~~ int

[17:21] <camelia> rakudo-moar 2bdf2b35a: OUTPUT: «False␤»

[17:22] <Zoffix> s: &infix:<~~>, \(atomicint, int)

[17:22] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/2bdf2b35a/src/core/Mu.pm6#L950

[17:22] <Zoffix> s: int, 'ACCEPTS', \(atomicint)

[17:22] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/2bdf2b35a/src/core/Any.pm6#L20

[17:22] *** sno joined
[17:23] *** p6bannerbot sets mode: +v sno

[17:23] *** domidumont1 left
[17:23] <leont> I guess boxing is messing this up :-/

[17:24] <tadzik> hmm

[17:24] <tadzik> m: for 1..3 Z=> [4, 5, 6] -> $x { say $x.WHAT } # no surprise here

[17:24] <camelia> rakudo-moar 2bdf2b35a: OUTPUT: «(Pair)␤(Pair)␤(Pair)␤»

[17:24] <Zoffix> Even if I try an nqp op, it's still giving those results

[17:24] <tadzik> m: for 1..3 Z=> [4, 5, 6] -> $k, $v { say $k } # but this surprises me

[17:24] <camelia> rakudo-moar 2bdf2b35a: OUTPUT: «1 => 4␤Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[17:24] <tadzik> was pair unpacking like that never a thing?

[17:25] <leont> m: my int $x; {for ^2000_000 { $x++ }; say now - ENTER now}

[17:25] <camelia> rakudo-moar 2bdf2b35a: OUTPUT: «0.26520674␤»

[17:25] <leont> m: my Int $x; {for ^2000_000 { $x++ }; say now - ENTER now}

[17:25] <camelia> rakudo-moar 2bdf2b35a: OUTPUT: «0.15650947␤»

[17:26] <Zoffix> R#2316

[17:26] <synopsebot> R#2316 [open]: https://github.com/rakudo/rakudo/issues/2316 [question] Confusing typecheck results with native types

[17:26] <Zoffix> releases: for 1..3 Z=> [4, 5, 6] -> $k, $v { say $k }

[17:27] <committable6> Zoffix, ¦releases (33 commits): «1 => 4␤Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at /tmp/enqtxSPOFL line 1␤␤ «exit code = 1»»

[17:27] <tadzik> I take that as a yes :)

[17:27] <tadzik> hrm

[17:27] <Zoffix> m: for 1..3 Z=> [4, 5, 6] -> (:$key, :$value) { say $key }

[17:27] <camelia> rakudo-moar 2bdf2b35a: OUTPUT: «1␤2␤3␤»

[17:28] <tadzik> aha! :) Thanks Zoffix 

[17:28] <Zoffix> tadzik: you can see how stuff unpacks by looking at their .Capture method

[17:28] <leont> If one maps int/atomicint to a special container type, then the performance characteristics and the explicit ⚛ operators suddenly do make sense

[17:28] <leont> *mentally maps

[17:29] <Zoffix> s: &postfix:<++>, \(my int $x)

[17:29] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/2bdf2b35a/src/core/Int.pm6#L246

[17:29] <SmokeMachine> m: for 1..3 Z [4, 5, 6] -> [$k, $v] { say $k }

[17:29] <camelia> rakudo-moar 2bdf2b35a: OUTPUT: «1␤2␤3␤»

[17:30] <Zoffix> Added that one as a comment on R#1491 https://github.com/rakudo/rakudo/issues/1491#issuecomment-424058269

[17:30] <synopsebot> R#1491 [open]: https://github.com/rakudo/rakudo/issues/1491 [perf][weird] Non-void $i++ is somehow 13% faster than ++$i

[17:33] <Zoffix> .oO( for 1..3 Z=> [4, 5, 6] { say [ $(:key, $(:value ] } )

[17:33] <Zoffix> trigils for explicit signature unpacking unpacking :P

[17:35] *** Zoffix left
[17:38] *** patrickb joined
[17:39] *** p6bannerbot sets mode: +v patrickb

[17:40] <leont> Also, why isn't there an atomic uint?

[17:40] <leont> I would expect that to be more commonly needed

[17:41] *** Xliff joined
[17:42] *** Ven` left
[17:42] *** p6bannerbot sets mode: +v Xliff

[17:42] *** pecastro joined
[17:43] *** p6bannerbot sets mode: +v pecastro

[17:44] *** molaf joined
[17:44] *** p6bannerbot sets mode: +v molaf

[17:47] *** domidumont joined
[17:48] *** p6bannerbot sets mode: +v domidumont

[17:56] *** mahafyi joined
[17:57] <leont> Is there any helper function to automatically turn a string into an IntStr/RatStr/NumStr if appropriate?

[17:57] *** p6bannerbot sets mode: +v mahafyi

[17:57] <Xliff> m: 14.IntStr.say

[17:57] <camelia> rakudo-moar b537ce2e5: OUTPUT: «No such method 'IntStr' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[17:57] <timotimo> m: val(14).^name.say

[17:57] <camelia> rakudo-moar b537ce2e5: OUTPUT: «Value of type Int uselessly passed to val()␤Int␤  in block <unit> at <tmp> line 1␤»

[17:57] <leont> The *if appropriate* is the tricky bit

[17:57] <Xliff> m: 14.Str.^name

[17:57] <camelia> rakudo-moar b537ce2e5: ( no output )

[17:57] <Xliff> m: 14.Str.^name.say

[17:57] <camelia> rakudo-moar b537ce2e5: OUTPUT: «Str␤»

[17:57] <timotimo> m: val("14").^name.say

[17:57] <camelia> rakudo-moar b537ce2e5: OUTPUT: «IntStr␤»

[17:57] <geekosaur> leont, Ithk your'e thnkingabout it wrong. atomicint *is* what youre thinking of

[17:58] <Xliff> m: val("1/10").^name.say

[17:58] <camelia> rakudo-moar b537ce2e5: OUTPUT: «RatStr␤»

[17:58] <leont> timotimo: thanks :-)

[17:58] <geekosaur> "atomic" might conceivably be a role, btu then you hae to figure out how to make it abstract when it necessarilyneeds to be concrete to be useful

[17:58] <geekosaur> or even to exist for that matter

[17:58] <timotimo> you can't apply roles to native integers :S

[17:59] <geekosaur> that woudl do it, yes

[17:59] <leont> «is atomic» would be awesome, but yeah I can see how that would be problematic

[17:59] <geekosaur> so you need a type to get this at all.

[18:00] <leont> geekosaur: I'm not sure where you think I disagree with you

[18:00] <leont> m: val("½").^name.say # is this deliberate?

[18:00] <camelia> rakudo-moar b537ce2e5: OUTPUT: «Str␤»

[18:01] <timotimo> that doesn't seem right

[18:01] <timotimo> m: say < ½ >.^name

[18:01] <camelia> rakudo-moar b537ce2e5: OUTPUT: «Str␤»

[18:01] <geekosaur> the qyestion 'is there an atomic uint' implies that atoncint isn't it

[18:01] <timotimo> m: say ½.^name

[18:01] <camelia> rakudo-moar b537ce2e5: OUTPUT: «Rat␤»

[18:01] <geekosaur> *atomicint

[18:02] <geekosaur> (note that at machine level, unsigned is not a type; it is what operations you use)

[18:02] <leont> Possibly I'm thinking to much as a C/C++ programmer

[18:02] <geekosaur> whichis why nqp has a bunch of confusions in that area, beause it sometimes doesn't propagate the intent that it be intrpeted as signed vs. unsigned and has to guess as a result

[18:04] <timotimo> it often turns things to num and back for no reason, too

[18:04] <tony-o> .

[18:05] <tony-o> i missed something and can't scroll back far enough :-/

[18:06] <geekosaur> I think: 2018 Sep 22 21:45:47 <AlexDaniel>	tony-o, timotimo: so what's the plan with JSON::Fast?

[18:09] <timotimo> i've got no problem with grabbing JSON::Fast and putting it in R::I

[18:09] *** sotona joined
[18:09] *** p6bannerbot sets mode: +v sotona

[18:21] *** Zoffix joined
[18:21] *** p6bannerbot sets mode: +v Zoffix

[18:21] <Zoffix> leont: yes, val doing that for No chars is on-purpose. Use unival to get its numeric value

[18:22] <Zoffix> tony-o: we got logs: http://colabti.org/irclogger/irclogger_log/perl6?date=2018-09-24#l911

[18:25] *** sauvin left
[18:27] <Geth> ¦ doc: d6dde6955a | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Str.pod6

[18:27] <Geth> ¦ doc: Fix bad URL

[18:27] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d6dde6955a

[18:27] <synopsebot> Link: https://doc.perl6.org/type/Str

[18:30] *** Celelibi joined
[18:31] *** vaibhavsagar13 joined
[18:31] *** vaibhavsagar13 left
[18:31] *** p6bannerbot sets mode: +v Celelibi

[18:33] <leont> I've been thinking a bit more about atomicint

[18:33] <leont> I'm not seeing the point of the type when we also have the explicit operators/functions (and vice-versa)

[18:35] <Zoffix> The type guarantees there'll always be an int sized suitably for atomic operations.

[18:35] <Zoffix> Finally found the commit with BDFL's ruling for No chars in val: https://github.com/rakudo/rakudo/commit/e28305c

[18:37] <Geth> ¦ doc: 66e23ab477 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Str.pod6

[18:37] <Geth> ¦ doc: Document Str.Numeric uses &val semantics

[18:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/66e23ab477

[18:37] <synopsebot> Link: https://doc.perl6.org/type/Str

[18:38] <leont> And how would an int not be appropriately sized?

[18:38] <Geth> ¦ doc: 7f8ac85a19 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Str.pod6

[18:38] <Geth> ¦ doc: Document &val does not convert No/Nl chars by design

[18:38] <Geth> ¦ doc: 

[18:38] <Geth> ¦ doc: http://colabti.org/irclogger/irclogger_log/perl6?date=2016-07-04#l931

[18:38] <Geth> ¦ doc: https://github.com/rakudo/rakudo/commit/e28305cc99b969b9592b9d6606ec5b6d25995a90

[18:38] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7f8ac85a19

[18:39] <lizmat> m: my in8 $a   # improperly sized for atomic actions

[18:39] <camelia> rakudo-moar b537ce2e5: OUTPUT: «5===SORRY!5===␤Type 'in8' is not declared. Did you mean 'int'?␤at <tmp>:1␤------> 3my in87⏏5 $a   # improperly sized for atomic acti␤Malformed my␤at <tmp>:1␤------> 3my7⏏5 in8 $a   # improperly sized for atomic ␤␤»

[18:39] <lizmat> m: my int8 $a   # improperly sized for atomic actions

[18:39] <camelia> rakudo-moar b537ce2e5: ( no output )

[18:39] <lizmat> .oO( I need a new keyboard )

[18:39] <Zoffix> leont: on MoarVM, on 32bit boxes `int` is still 64bit, but atomicint should be 32bit

[18:40] <Zoffix> m: say atomicint.Range

[18:40] <camelia> rakudo-moar b537ce2e5: OUTPUT: «-Inf^..^Inf␤»

[18:40] <Zoffix> dat a bug eh?

[18:40] <Zoffix> s: Int, 'Range', \()

[18:40] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/b537ce2e5/src/core/Int.pm6#L196

[18:40] <leont> I see

[18:40] <lizmat> Zoffix: an oversight, I would say

[18:41] <Zoffix> R#2317

[18:41] <synopsebot> R#2317 [open]: https://github.com/rakudo/rakudo/issues/2317 atomicint.Range lies

[18:43] <Zoffix> Yeah, `my atomicint $x; $x = 2**31; say $x` is -2147483648 on my 32-bit box, but 2147483648 on 64-bit

[18:44] <Zoffix> Uh, which is another bug. Assignment is ment to throw not overflow

[18:44] <leont> What else should it do?

[18:44] <tobs> m: multi sub postfix:<(atomic++)> (atomicint \x) { x⚛++ }; my atomicint $x = 42; say $x(atomic++); say $x

[18:44] <camelia> rakudo-moar b537ce2e5: OUTPUT: «Cannot resolve caller postfix:<⚛++>(Int); none of these signatures match:␤    (atomicint $target is rw --> atomicint)␤  in sub postfix:<(atomic++)> at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:45] <lizmat> Zoffix: native int are *not* supposed to throw on overflow/underflow

[18:46] <Zoffix> lizmat: they throw if you assign too large a value, but overflow if you mutate it into overflow (like $x++)

[18:46] *** realrokka_ joined
[18:46] <Zoffix> m: my int $x = 2**65

[18:46] <camelia> rakudo-moar b537ce2e5: OUTPUT: «Cannot unbox 66 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[18:46] *** realrokka_ left
[18:46] <lizmat> m: my atomicint $x = 2**65

[18:46] <camelia> rakudo-moar b537ce2e5: OUTPUT: «Cannot unbox 66 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[18:46] <Zoffix> m: my int $x = 2**63; $x += 2**64; dd $x

[18:46] <camelia> rakudo-moar b537ce2e5: OUTPUT: «Cannot unbox 64 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[18:46] <Zoffix> m: my int $x = 2**63-1; $x += 2**62; dd $x

[18:46] <camelia> rakudo-moar b537ce2e5: OUTPUT: «Cannot unbox 64 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[18:46] <Zoffix> Maybe += is treated as assignment

[18:47] <Zoffix> Looks like throwage happens only when you go over 64 bit — regardless of the type used

[18:47] <Zoffix> m: my int8 $x = 500

[18:47] <camelia> rakudo-moar b537ce2e5: ( no output )

[18:47] <Zoffix> m: my int8 $x = 2**64

[18:47] <camelia> rakudo-moar b537ce2e5: OUTPUT: «Cannot unbox 65 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[18:48] <Zoffix> And same for atomicint. Throws over 64bit, but overflows on my 32bit box if it's over 32bit but still under 64bit

[18:48] <diakopter> sounds like atomicint is using the 32bit atomic instructions

[18:50] *** sotona left
[18:51] <Zoffix> R#2318

[18:51] <synopsebot> R#2318 [open]: https://github.com/rakudo/rakudo/issues/2318 Size doesn't matter for native assignment when deciding to throw

[18:52] <Zoffix> There's also RT#127409

[18:52] *** AlexDaniel left
[18:52] <synopsebot> RT#127409 [new]: https://rt.perl.org/Ticket/Display.html?id=127409 [BUG] Inconsistencies and Bugs in Native Types Behaviours

[18:52] *** AlexDaniel joined
[18:52] *** p6bannerbot sets mode: +v AlexDaniel

[18:53] <El_Che> The irony of unicode operators is that a unicode symbol probably can most aptly express what I feel (🤔)

[18:53] <Zoffix> u:  

[18:53] <unicodable6> Zoffix, U+0020 SPACE [Zs] ( )

[18:53] <Zoffix> The irony of unicode operators is that despite being a proponent of them, my terminal doesn't render a lot of stuff :)

[18:54] <El_Che> hehe

[18:54] *** Zoffix left
[18:55] <tobs> m: multi sub postfix:<(atomic++)> (atomicint $x is rw) { $x⚛++ }; my atomicint $x = 42; say $x(atomic++); say $x  # aha!

[18:55] <camelia> rakudo-moar b537ce2e5: OUTPUT: «42␤43␤»

[18:56] <tobs> it's cool that even postfix operators can use parens

[18:57] <tobs> until the variable is sigilless

[18:59] <tony-o> zoffix++

[19:00] <tony-o> AlexDaniel: i'm under the impression someone else is doing the work.  i think lizmat merged in a change to blead that should speed up _some_ parsing

[19:01] <lizmat> I did so twice and rolled it back twice  :-(

[19:01] <tony-o> i don't mind merging in json::fast though if lizmat timotimo are on board and want me to do that

[19:01] <lizmat> the problem was that ":some parsing" went ok, but it didn't reliably see when it should not attempt the fast path

[19:01] <tony-o> ah

[19:02] <lizmat> e.g [ "a",{ foo => bar }] became [{foo => bar}]

[19:02] <tony-o> do you want me to have a crack at putting the json::fast code in rakudo ?

[19:02] <tony-o> uggg

[19:06] *** sotona joined
[19:06] *** p6bannerbot sets mode: +v sotona

[19:07] *** AndyCap15 joined
[19:07] *** AndyCap15 left
[19:08] *** domidumont left
[19:15] *** sotona left
[19:16] *** [particle] left
[19:26] *** [particle] joined
[19:27] *** p6bannerbot sets mode: +v [particle]

[19:31] *** [particle] left
[19:32] *** [particle] joined
[19:33] *** p6bannerbot sets mode: +v [particle]

[19:34] *** regreg left
[19:35] *** sotona joined
[19:36] *** p6bannerbot sets mode: +v sotona

[19:41] *** rindolf left
[19:42] *** rindolf joined
[19:42] *** p6bannerbot sets mode: +v rindolf

[19:43] *** [particle] left
[19:44] *** [particle] joined
[19:45] *** p6bannerbot sets mode: +v [particle]

[19:49] *** graphene left
[19:50] *** graphene joined
[19:51] *** p6bannerbot sets mode: +v graphene

[19:54] *** MasterDuke left
[19:55] *** itaipu left
[19:57] *** lichtkind joined
[19:57] *** p6bannerbot sets mode: +v lichtkind

[19:59] *** [particle] left
[19:59] <markk_> /w/w 4

[20:02] *** [particle] joined
[20:03] *** p6bannerbot sets mode: +v [particle]

[20:03] *** cpage_ joined
[20:04] *** p6bannerbot sets mode: +v cpage_

[20:06] *** cpage left
[20:06] *** cpage_ is now known as cpage

[20:06] *** [particle] left
[20:14] <AlexDaniel> tony-o: yes! I do :)

[20:14] <AlexDaniel> weekly: In Perl 6 6.d you're now able to harness the Power of The Atom! Thread-safe atomic operations on a new atomicint type! https://marketing.perl6.org/id/1537803105/pdf_digital

[20:14] <notable6> AlexDaniel, Noted!

[20:17] *** [particle] joined
[20:18] *** p6bannerbot sets mode: +v [particle]

[20:22] <japhb> tony-o: Yes please!  :-)

[20:23] *** Superman joined
[20:23] *** Superman left
[20:33] *** patrickb left
[20:38] *** sena_kun left
[20:42] *** sotona left
[20:55] *** mst is now known as mSt

[20:56] *** mSt is now known as mst

[20:56] *** sotona joined
[20:57] *** p6bannerbot sets mode: +v sotona

[21:15] *** pmurias left
[21:15] *** mcmillhj left
[21:16] <rindolf> is the new release out yet?

[21:18] <lizmat> yes

[21:20] <japhb> rindolf: And some post-release branches merged, FWIW.

[21:21] <rindolf> japhb: lizmat : i see - nice

[21:22] <lizmat> still waiting for the first post merge test-t

[21:22] <lizmat> I'm betting on 1.8 (down from 1.971)

[21:23] <rindolf> the p6 repos seem green on my https://travis-ci.org/dashboard

[21:24] *** ChanServ sets mode: +o mst

[21:24] * mst wants to monitor the +z traffic

[21:24] <mst> don't mind me

[21:33] * geekosaur is not sure if that's a strong stomach or masochism >.>

[21:35] <timotimo> i'm also monitoring the +z traffic

[21:35] <timotimo> i hope newcomers don't see the big scary @ in front of my name and think it means anything

[21:35] <timotimo> also, i'm not quite sure how i got to get the @, maybe by complaining about spam a lot?

[21:37] *** Byteflux20 joined
[21:38] *** Byteflux20 left
[21:40] *** mcmillhj joined
[21:41] *** p6bannerbot sets mode: +v mcmillhj

[21:42] *** sotona left
[21:46] *** mcmillhj left
[21:47] <tony-o> lizmat: you have any objection?

[21:49] *** MasterDuke joined
[21:49] *** p6bannerbot sets mode: +v MasterDuke

[21:49] *** MasterDuke left
[21:49] *** MasterDuke joined
[21:49] *** herbert.freenode.net sets mode: +v MasterDuke

[21:49] *** p6bannerbot sets mode: +v MasterDuke

[21:49] *** [particle] left
[21:50] <xinming> Anyone here would tells me how can I trouble shooting tmux freeze?

[21:50] <xinming> it doesn't response to anything

[21:50] *** [particle] joined
[21:50] <xinming> oops, ignore me, wrong channel.

[21:51] *** p6bannerbot sets mode: +v [particle]

[21:53] <timotimo> xinming: maybe it's the ctrl-s/ctrl-q thing?

[21:53] <xinming> Nope

[21:53] <xinming> even I re-connect, and use tmux at, the tmux at command freeze

[21:56] *** mcmillhj joined
[21:56] <lizmat> tony-o: please go ahead (assuming we're talking about JSON::Fast)

[21:57] *** p6bannerbot sets mode: +v mcmillhj

[21:57] *** [particle] left
[21:58] *** [particle] joined
[21:58] <timotimo> xinming: it's a long shot, but are the running tmux server and freshly started tmux client of different versions? because of a system update in between?

[21:58] *** p6bannerbot sets mode: +v [particle]

[21:59] <xinming> Nope, tmux is the same version

[22:00] *** mcmillhj left
[22:01] <timotimo> that's basically all i can come up with :|

[22:03] *** Paul-S28 joined
[22:03] *** Paul-S28 left
[22:04] <lizmat> sleep&

[22:04] <timotimo> gnite lizmat 

[22:04] *** [particle] left
[22:04] <xinming> night. :-)

[22:04] <xinming> sleep&

[22:05] *** [particle] joined
[22:05] *** graphene left
[22:05] *** p6bannerbot sets mode: +v [particle]

[22:06] *** graphene joined
[22:07] *** p6bannerbot sets mode: +v graphene

[22:09] *** mcmillhj joined
[22:10] *** p6bannerbot sets mode: +v mcmillhj

[22:14] *** mcmillhj left
[22:21] *** mcmillhj joined
[22:22] *** p6bannerbot sets mode: +v mcmillhj

[22:24] *** pecastro left
[22:26] *** mcmillhj left
[22:37] *** mcmillhj joined
[22:38] *** p6bannerbot sets mode: +v mcmillhj

[22:41] <Geth> ¦ doc: 238e9084e3 | (Zoffix Znet)++ | doc/Language/nativetypes.pod6

[22:41] <Geth> ¦ doc: Clarify int is not exactly equivalent to Int

[22:41] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/238e9084e3

[22:41] <synopsebot> Link: https://doc.perl6.org/language/nativetypes

[22:41] *** mcmillhj left
[22:45] <Geth> ¦ doc: ffde7cbbc9 | (Zoffix Znet)++ | doc/Language/nativetypes.pod6

[22:45] <Geth> ¦ doc: Clarify dispatch won't pick up native sizes

[22:45] <Geth> ¦ doc: 

[22:45] <Geth> ¦ doc: This and the already-existing prose around this section

[22:45] <Geth> ¦ doc: close R#2316 https://github.com/rakudo/rakudo/issues/2316

[22:45] <synopsebot> Link: https://doc.perl6.org/language/nativetypes

[22:45] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ffde7cbbc9

[22:45] <synopsebot> R#2316 [open]: https://github.com/rakudo/rakudo/issues/2316 [question] Confusing typecheck results with native types

[22:46] <Geth> ¦ whateverable: 4c41fa1f17 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[22:46] <Geth> ¦ whateverable: Handle multiple bisect candidates in Bisection.pm6

[22:46] <Geth> ¦ whateverable: 

[22:46] <Geth> ¦ whateverable: Because this logic will be needed everywhere.

[22:46] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/4c41fa1f17

[22:49] *** mcmillhj joined
[23:08] *** ilogger2 joined
[23:08] *** ChanServ sets mode: +v ilogger2

[23:08] *** p6bannerbot sets mode: +v lookatme_q

[23:08] *** p6bannerbot sets mode: +v salva

[23:09] *** p6bannerbot sets mode: +v tadzik

[23:09] *** p6bannerbot sets mode: +v ilogger2

[23:14] *** mcmillhj joined
[23:15] *** p6bannerbot sets mode: +v mcmillhj

[23:19] *** leedo joined
[23:20] *** p6bannerbot sets mode: +v leedo

[23:31] *** sotona joined
[23:32] *** p6bannerbot sets mode: +v sotona

[23:35] *** sotona left
[23:45] *** kaare_ joined
[23:46] *** p6bannerbot sets mode: +v kaare_

[23:48] *** mcmillhj left
