[00:05] <benjikun> welp, nvm I figured out a hacky way

[00:07] *** chartractegg joined
[00:07] *** chartractegg left
[00:25] *** snef joined
[00:30] *** snef left
[00:52] *** markoong left
[00:52] *** markoong joined
[00:57] *** markoong left
[01:04] *** molaf left
[01:07] <Xliff> Has anyone developed a way to pad a CStruct with a certain number of bytes?

[01:14] *** fascinum joined
[01:17] *** molaf joined
[01:59] *** kurahaupo left
[02:01] *** zachk left
[02:03] *** molaf left
[02:16] *** molaf joined
[02:26] *** snef joined
[02:30] *** snef left
[02:35] *** psychoslave joined
[02:38] *** araraloren joined
[02:47] *** kjk joined
[02:48] <kjk> p6: &substr.package

[02:48] <camelia> rakudo-moar 64394152c: ( no output )

[02:48] <kjk> In the REPL, it says: No such method 'WHERE' for invocant of type 'GLOBAL'

[02:48] *** skids joined
[02:49] <kjk> shouldn't it return the GLOBAL package?

[02:50] *** lichtkind left
[02:50] *** uzl joined
[02:51] <araraloren> m: say ::.keys;

[02:51] <camelia> rakudo-moar 64394152c: OUTPUT: «($?PACKAGE $=pod EXPORT $! ::?PACKAGE $_ !UNIT_MARKER $=finish GLOBALish $¢ $/)␤»

[02:52] <geekosaur> looks like a bug in the REPL, it works with perl6 -e

[02:52] <geekosaur> oh, this might be the change to try to find/print docs?

[02:53] <geekosaur> which IIRC is what .WHERE is for

[02:53] <kjk> should I open a bug in rakudo?

[02:53] <geekosaur> rakudobug it, I think

[02:53] <kjk> ok

[02:59] <uzl> Hello to all!

[02:59] <uzl> How would the class Journey in this example (https://docs.perl6.org/language/objects#Methods) would look like as class module?

[02:59] <uzl> Let's say that it's located in the directory lib/Module/Journey.pm6

[03:00] <uzl> I could do something like unit class Module::Journey; but how do I define the attributes?

[03:01] <Xliff> m: use NativeCall; class A { has uint64 $.aa; }; my $a = A.new(); ($a.aa ~~ uint64).say

[03:01] <camelia> rakudo-moar 64394152c: OUTPUT: «False␤»

[03:01] <Xliff> m: use NativeCall; class A { has uint64 $.aa; }; my $a = A.new(); ($a.aa ~~ uint64).say; $a.aa.^name;

[03:01] <camelia> rakudo-moar 64394152c: OUTPUT: «False␤»

[03:01] <Xliff> m: use NativeCall; class A { has uint64 $.aa; }; my $a = A.new(); ($a.aa ~~ uint64).say; $a.aa.^name.say;

[03:01] <camelia> rakudo-moar 64394152c: OUTPUT: «False␤Int␤»

[03:01] <Xliff> m: use NativeCall; class A { has uint64 $.aa; }; my $a = A.new(); ($a.aa ~~ Int).say; $a.aa.^name.say;

[03:01] <camelia> rakudo-moar 64394152c: OUTPUT: «True␤Int␤»

[03:03] <geekosaur> uzl: unit module Foo; has .aa = False; # etc.

[03:03] <geekosaur> or whatever

[03:04] *** hami joined
[03:05] <uzl> geekosaur: What about unit class Foo? In which cases do I use it instead of unit module Foo?

[03:05] <geekosaur> when you want the whole file to be the module or class

[03:05] <geekosaur> then you can pretennd the whole file is wrapped in the braces

[03:06] <geekosaur> (which is what "unit" means. and you'll get an error if it's not the first declaration in the file)

[03:06] <geekosaur> you can use that with package (rarely usefiul in p6), module, and class

[03:06] <geekosaur> less useful with class since you often want more than just the class in a file

[03:06] <Xliff> m: use NativeCall; class A { has uint64 $.aa; has OpaquePointer $.bleah; }; my $a = A.new(); eval<\$a.bleah>

[03:06] <camelia> rakudo-moar 64394152c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    eval used at line 1. Did you mean 'EVAL', 'val'?␤␤»

[03:07] <Xliff> m: use NativeCall; class A { has uint64 $.aa; has OpaquePointer $.bleah; }; my $a = A.new(); eval { "\$a.bleah" }

[03:07] <camelia> rakudo-moar 64394152c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    eval used at line 1. Did you mean 'EVAL', 'val'?␤␤»

[03:07] <Xliff> m: use NativeCall; class A { has uint64 $.aa; has OpaquePointer $.bleah; }; my $a = A.new(); eval({ "\$a.bleah" })

[03:07] <camelia> rakudo-moar 64394152c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    eval used at line 1. Did you mean 'EVAL', 'val'?␤␤»

[03:07] <geekosaur> it's uppercase no matteer what

[03:07] <Xliff> m: use NativeCall; class A { has uint64 $.aa; has OpaquePointer $.bleah; }; my $a = A.new(); EVAL { "\$a.bleah" }

[03:07] <camelia> rakudo-moar 64394152c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤EVAL is a very dangerous function!!! (use the MONKEY-SEE-NO-EVAL pragma to override this error,␤but only if you're VERY sure your data contains no injection attacks)␤at <tmp>:1␤------> 3}; my $a …»

[03:07] <geekosaur> it also requires MONKEY-SEE-NO-EVAL no matter what

[03:07] <uzl> geekosaur: So always use unit module if I have just a class in the whole file?

[03:07] <geekosaur> uzl, er. you do understand the difference between a module and a class?

[03:08] <Xliff> OK. I know I've asked this before, but how do I call a method of an object where the method name is stored in a string?

[03:08] <uzl> geekosaur: you caught me. I'm not sure!

[03:08] <Xliff> m: use NativeCall; class A { has uint64 $.aa; has OpaquePointer $.bleah; }; my $a = A.new(); $a."&bleah"

[03:08] <camelia> rakudo-moar 64394152c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Quoted method name requires parenthesized arguments. If you meant to concatenate two strings, use '~'.␤at <tmp>:1␤------> 3$.bleah; }; my $a = A.new(); $a."&bleah"7⏏5<EOL>␤»

[03:08] <geekosaur> m: my $x = 'substr'; my $s = 'foobar'; say $s.$x(3)

[03:08] <camelia> rakudo-moar 64394152c: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[03:08] <geekosaur> m: my $x = 'substr'; my $s = 'foobar'; say $s.::($x)(3)

[03:08] <camelia> rakudo-moar 64394152c: OUTPUT: «===SORRY!===␤cannot stringify this␤»

[03:09] <geekosaur> whoops

[03:09] <geekosaur> methods are harder, I forget that one

[03:09] <Xliff> m: use NativeCall; class A { has uint64 $.aa; has OpaquePointer $.bleah; }; my $a = A.new(); $n = "bleah"; $a.$n

[03:09] <camelia> rakudo-moar 64394152c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$n' is not declared␤at <tmp>:1␤------> 3quePointer $.bleah; }; my $a = A.new(); 7⏏5$n = "bleah"; $a.$n␤»

[03:09] *** hami left
[03:09] <geekosaur> uzl, a module si a namespace in which you can put variables, packages, subs, etc.

[03:09] <geekosaur> also classes

[03:10] <geekosaur> a class is a user-defined type with behavior. most modules will declare one or more classes within them.

[03:10] <uzl> geekosaur: oh, thanks!

[03:11] <geekosaur> you should be able to poke aroun d the ecosystem and see how people declare modules.

[03:11] *** mahafyi joined
[03:11] <Xliff> geekosaur: Do the docs give that example, anywhere?

[03:11] <geekosaur> "unit class" is really only useful if you for some reason put one class per file in a local project. usually you define modules/"libraries" and don't stick classes in their own files, because it becomes annoying

[03:12] <uzl> geekosaur: I was looking at JSON::Tiny and trying to emulate it but still having some problems.

[03:12] <geekosaur> https://docs.perl6.org/language/modules

[03:12] <uzl> geekosaur: That makes same.

[03:13] <geekosaur> https://docs.perl6.org/language/module-packages

[03:13] <geekosaur> and I apparently have to reboot my router. sih

[03:13] <uzl> geekosaur: I'm reading it but it's somewhat dense (at least for me).

[03:14] *** Zoffix joined
[03:14] <Zoffix> m: my $x = 'substr'; my $s = 'foobar'; say $s."$x"(3)

[03:14] <camelia> rakudo-moar 64394152c: OUTPUT: «bar␤»

[03:15] <Zoffix> You need to stuff everything into a string and parens are mandatory

[03:15] <Zoffix> uzl: you can use `unit class`

[03:16] *** uzl_ joined
[03:16] *** uzl left
[03:16] <Zoffix> It's really the same as `class { ... }` except you get to save an indent level and a set of curlies

[03:17] *** uzl_ is now known as uzl

[03:18] <Zoffix> kjk: you like want to stick a `.^name` at the end to get the name of the string with the name of the thing rather than the thing itself

[03:19] <kjk> Zoffix: I'm actually interested in the thing itself! I'm trying various way to introspect objects from REPL

[03:22] <Zoffix> kjk: ok, in that case you do have it. REPL just craps out when it's trying to figure out if more input is needed

[03:22] <Zoffix> (it = the thing itself)

[03:26] <kjk> Proc.WHO.HOW

[03:26] <kjk> p6: Proc.WHO.HOW

[03:26] <camelia> rakudo-moar 64394152c: ( no output )

[03:27] <kjk> says: No such method 'WHERE' for invocant of type 'Perl6::Metamodel::ClassHOW+{<anon>}'

[03:27] <kjk> works with perl6 -e though. I guess it's a similar issue with &substr.package

[03:27] <araraloren> Do they create a default module if we setup a new file such as `lib/Foo.pm6` ?

[03:27] <geekosaur> yes

[03:28] <geekosaur> araraloren, no

[03:28] <Zoffix> kjk: yeah, I'm about to fix that

[03:28] <geekosaur> if you don't specify, it goes into the current module (usually MAIN)

[03:28] <araraloren> because I can `use Foo` in other file though the Foo.pm6 is empty

[03:28] <geekosaur> (I think)

[03:28] <geekosaur> hm, UNIT, whatever that is at the time

[03:28] <kjk> Zoffix: cool, thanks

[03:31] <araraloren> so I know they do two step `need; import` when we using `use` import a module

[03:31] <araraloren> what is `need` do ?

[03:31] <araraloren> and what about the `import` ?

[03:33] <Zoffix> araraloren: AFAIK need actually loads the… file… with the stuff and `import` brings exportable symbols into current lexical scope. So if you do `need Test;` you can use `&Test::EXPORT::DEFAULT::ok()` but not just `ok()`, but if you also do `import` then `ok` will be in current scope

[03:33] <Zoffix> m: need Test; Test::EXPORT::DEFAULT::ok(42)

[03:33] <camelia> rakudo-moar 64394152c: OUTPUT: «ok 1 - ␤»

[03:33] *** Xliff left
[03:33] <Zoffix> m: need Test; Test::EXPORT::DEFAULT::ok(42); ok 100

[03:33] <camelia> rakudo-moar 64394152c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    ok used at line 1␤␤»

[03:33] <Zoffix> m: need Test; import Test; Test::EXPORT::DEFAULT::ok(42); ok 100

[03:33] <camelia> rakudo-moar 64394152c: OUTPUT: «ok 1 - ␤ok 2 - ␤»

[03:33] <araraloren> oh

[03:34] <araraloren> intersting

[03:35] <Zoffix> araraloren: and yeah, `use Foo` just loads the file. It can be empty. And it can even contain `our` stuff in top scope that'll end up in UNIT... Like, if you stick `our sub foo { say "meow" }` into lib/Foo.pm6 and do `perl6 -Ilib -MFoo -e 'foo' it'll actually work, despite you never exporting that sub explicitly

[03:35] <araraloren> Zoffix thanks, so clear

[03:36] <araraloren> so we just load the file (compunit?), not find something `unit module XXX` in some pm6 file 

[03:37] <Zoffix> And IIRC if you have a META6.json file or it's an installed module and in `provides` you have `"Foo" : "lib/Bar.pm6"` then you can do `use Foo` and it'll load lib/Bar.pm6

[03:37] <araraloren> okay

[03:37] <Zoffix> I think it looks for the file or whatever meta6.json lists... Dunno the details

[03:38] <araraloren> hmm, thanks

[03:40] <kjk> given an object, how do you tell if it's a kind of package? check .HOW.WHAT ~~ ClassHOW|ModuleHOW|PackageHOW|ParametricRoleGroupHOW ?

[03:41] <Zoffix> benjikun: never used that module, but you could use `state $foo` or an anon state variable:

[03:41] <Zoffix> m: for ^10 { state $x = 0; say $x++; say $++ }

[03:41] <camelia> rakudo-moar 64394152c: OUTPUT: «0␤0␤1␤1␤2␤2␤3␤3␤4␤4␤5␤5␤6␤6␤7␤7␤8␤8␤9␤9␤»

[03:42] <araraloren> kjk may be help : https://docs.perl6.org/language/syntax#index-entry-declarator_unit-declarator_module-declarator_package-Package%2C_Module%2C_Class%2C_Role%2C_and_Grammar_declaration

[03:43] <araraloren> m: package foo { }; say foo ~~ package;

[03:43] <camelia> rakudo-moar 64394152c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Whitespace required after keyword 'package'␤at <tmp>:1␤------> 3package foo { }; say foo ~~ package7⏏5;␤»

[03:43] *** psychoslave left
[03:45] <geekosaur> m: package foo {}; say foo ~~ Package'

[03:45] <camelia> rakudo-moar 64394152c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3package foo {}; say foo ~~ Package7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤      …»

[03:45] <geekosaur> oops

[03:45] <geekosaur> m: package foo {}; say foo ~~ Package;

[03:45] <camelia> rakudo-moar 64394152c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Package used at line 1␤␤»

[03:45] <geekosaur> bleh.

[03:45] <geekosaur> m: package foo {}; say foo ~~ Stash;

[03:45] <camelia> rakudo-moar 64394152c: OUTPUT: «False␤»

[03:46] <geekosaur> m: package foo {}; say foo ~~ PseudoStash;

[03:46] <camelia> rakudo-moar 64394152c: OUTPUT: «False␤»

[03:46] <geekosaur> m: package foo {}; dd foo

[03:46] <camelia> rakudo-moar 64394152c: OUTPUT: «foo␤»

[03:46] <kjk> also how do you get a hold of a meta class other than calling .HOW ? I can't just say ClassHOW, doesn't work in the REPL

[03:46] <geekosaur> m: package foo {}; say foo.^name

[03:46] <camelia> rakudo-moar 64394152c: OUTPUT: «foo␤»

[03:46] <Zoffix> m: package foo {}; say foo.HOW ~~ Metamodel::PackageHOW

[03:46] <camelia> rakudo-moar 64394152c: OUTPUT: «True␤»

[03:46] <geekosaur> it's giving you short names

[03:46] *** uzl left
[03:46] <geekosaur> they're all in Metamodel::

[03:47] <kjk> uh ic..., usually in the REPL it's mentioned with an additional Perl6:: at the front, which doesn't work either

[03:48] <geekosaur> right, Metamodel:: is the documented name and in rakudo is an alias to its private one which has the Perl6:: in front

[03:48] <geekosaur> but it should accept it with the full qualification, modulo that error you keep getting

[03:48] <geekosaur> (.WHERE)

[03:48] <Zoffix> m: say [.^name, $_ ~~ Metamodel::PackageHOW, $_ ~~ Metamodel::ClassHOW, $_ ~~ Metamodel::ModuleHow, $_ ~~ Metamodel::ParametricRoleGroupHOW, $_ ~~ Metamodel::ParametricRoleHOW] for Int, package {}, IO, role {}

[03:48] <camelia> rakudo-moar 64394152c: OUTPUT: «Could not find symbol '&ModuleHow'␤  in block <unit> at <tmp> line 1␤␤»

[03:49] <Zoffix> m: say [.^name, $_ ~~ Metamodel::PackageHOW, $_ ~~ Metamodel::ClassHOW, $_ ~~ Metamodel::ModuleHOW, $_ ~~ Metamodel::ParametricRoleGroupHOW, $_ ~~ Metamodel::ParametricRoleHOW] for Int, package {}, IO, role {}

[03:49] <camelia> rakudo-moar 64394152c: OUTPUT: «[Int False False False False False]␤[<anon> False False False False False]␤[IO False False False False False]␤[<anon|1> False False False False False]␤»

[03:49] <Zoffix> :(

[03:49] <Zoffix> ah

[03:49] <Zoffix> m: say [.^name, .HOW ~~ Metamodel::PackageHOW, .HOW ~~ Metamodel::ClassHOW, .HOW ~~ Metamodel::ModuleHOW, .HOW ~~ Metamodel::ParametricRoleGroupHOW, .HOW ~~ Metamodel::ParametricRoleHOW] for Int, package {}, IO, role {}

[03:49] <camelia> rakudo-moar 64394152c: OUTPUT: «[Int False True False False False]␤[<anon> True False False False False]␤[IO False False False True False]␤[<anon|1> False False False False True]␤»

[03:50] <kjk> hmm, it's hard! lol.. 

[03:53] <Zoffix> m: sub prefix:<♥> { $::OUTER::_.HOW ~~ ::("Metamodel::$($^a)HOW") }; say [.^name, ♥'Package', ♥'Class', ♥'Module', ♥'ParametricRoleGroup', ♥'ParametricRole'] for Int, package {}, IO, role {}

[03:53] <camelia> rakudo-moar 64394152c: OUTPUT: «[Int False True False False False]␤[<anon> False True False False False]␤[IO False True False False False]␤[<anon|1> False True False False False]␤»

[03:53] <Zoffix> tehe

[03:54] <araraloren> haha

[04:02] <Zoffix> > &say.package

[04:02] <Zoffix> (low-level object `GLOBAL`)

[04:02] <Zoffix> kjk: how's what?

[04:02] <Zoffix> kjk: *how's that?

[04:19] <Zoffix> Shipped into post-release branch

[04:19] *** Zoffix left
[04:19] <kjk> Zoffix: nice, thanks for the quick fix!

[04:25] *** snef joined
[04:27] *** wamba left
[04:28] *** n1ge joined
[04:54] *** xtreak joined
[04:55] *** snef left
[05:00] *** skids left
[05:00] <kjk> Zoffix: for testing if an object is a package, does this implementation make sense? https://gist.github.com/kjkuan/1ddef6d35940a3daf68d54ef4a5eb628

[05:11] *** sauvin joined
[05:31] *** fascinum left
[05:32] *** fascinum joined
[05:43] *** sarna joined
[05:44] <sarna> .hug Zoffix

[05:44] * huggable hugs Zoffix

[05:44] *** lainon left
[05:44] <sarna> I've just read your blog post :)

[06:44] *** evalable6 left
[06:44] *** evalable6 joined
[06:46] *** |oLa| joined
[06:48] *** kaare_ left
[06:50] <u-ou> .hug ilbelkyr

[06:50] * huggable hugs ilbelkyr

[07:03] *** kaare_ joined
[07:42] *** mahafyi left
[07:50] *** rindolf joined
[07:50] *** sarna_ joined
[07:51] <sarna_> hey guys, what could be the reason for my MAIN sub not working when I `perl6 foo.pm6`?

[07:52] <sarna_> I have a `unit class App::Foo;` at the top of my file, could that be the reason

[07:53] <El_Che> yes

[07:53] <sarna_> do I have to remove it? or tweak it?

[07:55] <sarna_> ah, alright, I found a blog post. thank :)

[07:57] *** kaare_ left
[07:57] *** xtreak left
[08:03] *** benjikun2 joined
[08:04] *** benjikun left
[08:09] *** kaare_ joined
[08:09] *** HaraldJoerg joined
[08:10] *** mahafyi joined
[08:11] <sarna_> when should I use Local as the top-level namespace?

[08:11] *** darutoko joined
[08:14] <El_Che> main is something for your script, commonly

[08:15] <El_Che> (or you need to initialize the object)

[08:15] *** xtreak joined
[08:17] <sarna_> El_Che: yeah, I had to create a file in bin/ :)

[08:17] <sarna_> it's pretty confusing at first

[08:18] <sarna_> or maybe it's just me

[08:18] *** lalitmee joined
[08:26] *** wamba joined
[08:28] *** hythm_ joined
[08:40] *** AlexDani` is now known as AlexDaniel

[08:47] *** xtreak left
[08:55] *** hythm_ left
[08:56] <araraloren> sarna_ MAIN in your App::Foo, is App::Foo::MAIN, not ::MAIN

[08:56] *** sarna_ left
[08:57] *** sarna_ joined
[08:59] <sarna_> docs.perl6.org is offline :(

[09:00] <gfldex> sarna_: if you ‚is export‘ the main and run the script with ‚perl6 -I. -Mfoo‘ it will work

[09:02] <sarna_> gfldex: neat, thank you

[09:10] <gfldex> sarna_: one-page version of the docs: https://gist.github.com/gfldex/5a5f7898d4e2ea83cc0480d0653c220a

[09:12] <sarna_> gfldex: thanks again! :D

[09:14] *** Woodi joined
[09:16] <moritz> FYI I'm rebooting www.p6c.org, it became unreachable

[09:17] *** grumblr joined
[09:18] *** lalitmee left
[09:20] *** grumble left
[09:20] *** grumblr is now known as grumble

[09:33] *** sarna left
[09:43] <ecocode> hello.. how is perl6 on jvm?  is it working/stable?

[09:45] *** kurahaupo joined
[09:45] <AlexDaniel> generally, it is working

[09:46] <AlexDaniel> in my opinion it is somewhat incomplete, but you mileage may vary

[09:48] <sarna_> hey, how can I fix `Preceding context expects a term, but found infix == instead.`? I have a `given` after an `if`

[09:49] <sarna_> (I wanted to use `given` as a switch/case but I guess it doesn't work that way)

[09:54] <AlexDaniel> sarna_: can you show some code? I'm struggling to recreate this

[09:59] *** eliasr joined
[10:00] <sarna_> AlexDaniel: a sec, I'll try to dumb it down

[10:03] <sarna_> oof, I can't isolate it

[10:05] <sarna_> AlexDaniel: https://p.teknik.io/HhJRk

[10:05] <sarna_> it's really ugly but

[10:06] <araraloren> if do given

[10:06] <araraloren> would be work

[10:06] <AlexDaniel> sarna_: if $c_column == $column {

[10:06] <AlexDaniel> sarna_: missing sigils

[10:06] <araraloren> you miss sigil $

[10:07] <sarna_> AlexDaniel: oh! it tripped me up for the third  time today

[10:07] <sarna_> yay perl

[10:07] <sarna_> :D

[10:07] <sarna_> thank you

[10:07] <araraloren> and the given is in if block, not after if

[10:07] <AlexDaniel> sarna_: can you create a ticket for that?

[10:07] <sarna_> AlexDaniel: LTA?

[10:08] <AlexDaniel> I am not sure if it's possible, but maybe it could've said “did you mean $c_column ?”

[10:08] <araraloren> the error message ?

[10:08] <AlexDaniel> yes

[10:08] <sarna_> AlexDaniel: alright, will do in a sec :)

[10:08] <araraloren> yeah, it should guess what you want 

[10:08] <AlexDaniel> I think it should be possible to check if there's a variable with that name, and if so print something extra

[10:11] *** fascinum left
[10:17] *** Marcool joined
[10:19] *** Marcool left
[10:24] <sarna_> AlexDaniel: done :)

[10:25] <sarna_> tell me if the format is correct, the default seemed a little.. clunky

[10:30] <sarna_> my code still yells at me :( "expression needs parens to avoid gobbling block"

[10:31] <sarna_> oops, it was because I put a `=>` after a `when` :')

[10:36] *** MasterDuke left
[11:26] *** n1ge left
[11:28] *** ExtraCrispy left
[11:31] *** markoong joined
[11:33] *** MasterDuke joined
[11:33] *** mahafyi left
[11:44] *** Khisanth left
[11:47] *** ufobat_ joined
[11:51] *** mahafyi joined
[11:52] *** llfourn left
[11:57] *** Khisanth joined
[11:59] *** MasterDuke left
[12:12] *** wamba left
[12:12] *** wamba joined
[12:15] *** itaylor57 joined
[12:20] *** hami joined
[12:20] *** llfourn joined
[12:25] *** wamba left
[12:27] *** hami left
[12:30] *** molaf left
[12:33] *** rabbit_ left
[12:33] *** lizmat joined
[12:46] *** molaf joined
[12:57] *** n1ge joined
[12:57] *** sarna_ left
[13:04] *** MasterDuke joined
[13:12] *** molaf left
[13:12] *** MilkmanDan left
[13:13] *** MilkmanDan joined
[13:18] *** benjikun joined
[13:20] *** benjikun2 left
[13:20] <hoelzro> good news sarna, El_Che: I managed to reproduce that issue!

[13:20] <hoelzro> I'll be digging into what's going on with that

[13:20] <El_Che> hoelzro+++

[13:20] <El_Che> wow

[13:36] <hoelzro> El_Che: thanks for all your help yesterday!

[13:39] <AlexDaniel> what issue btw? Is that something I should know about?

[13:39] <El_Che> AlexDaniel: Linenoise is broken on some installations

[13:39] <El_Che> on different OSes

[13:39] <AlexDaniel> is that new?

[13:40] <El_Che> I am happy hoelzro is fixing this because Readline is also broken en recent distributions

[13:40] <El_Che> (everything using libreadline 7)

[13:40] <El_Che> AlexDaniel: newish

[13:40] <hoelzro> AlexDaniel: it's at least 2 months old; it's related to different rakudo and Linenoise installation paths

[13:42] *** subroot left
[13:43] *** n1ge left
[13:58] *** domidumont joined
[14:02] *** domidumont left
[14:03] *** domidumont joined
[14:20] *** n1ge joined
[14:21] *** n1ge left
[14:22] *** n1ge joined
[14:25] *** MasterDuke left
[14:25] *** xtreak joined
[14:32] *** MasterDuke joined
[14:44] *** mahafyi left
[14:49] *** mahafyi joined
[14:54] *** mahafyi left
[14:55] *** sarna joined
[15:14] *** kjk left
[15:15] *** kjk joined
[15:20] *** sjoshi joined
[15:35] *** itaipu joined
[15:37] *** kurahaupo_ joined
[15:37] *** kurahaupo_ left
[15:38] *** kurahaupo_ joined
[15:40] *** kurahaupo left
[15:47] *** perlpilot joined
[15:52] *** ExtraCrispy joined
[15:54] *** kurahaupo_ is now known as kurahaupo

[15:57] <tbrowder_> o/ good day #perl6

[15:59] <tbrowder_> any emacs users have a menu that displays unicode code points and corresponding symbol?

[16:16] *** dha joined
[16:16] *** fascinum joined
[16:21] *** uzl joined
[16:22] *** dha left
[16:27] *** Zoffix joined
[16:28] <kjk> how does scope work in the REPL or where/which package can I find the things I just defined?

[16:29] <kjk> p6: my $var = 123; say GLOBAL::.keys

[16:29] <camelia> rakudo-moar a7bd0bdc9: OUTPUT: «()␤»

[16:29] <kjk> p6: our $var = 123; say GLOBAL::.keys

[16:29] <camelia> rakudo-moar a7bd0bdc9: OUTPUT: «($var)␤»

[16:30] <geekosaur> "my" is never in a package

[16:30] <geekosaur> it hsould be in the lexpad

[16:30] *** dha joined
[16:31] *** perlpilot left
[16:31] <kjk> geekosaur: gotcha. In this case, how would I show the my variable in the lexpad from the REPL?

[16:31] <Zoffix> m: my $x; say MY::.keys

[16:31] <camelia> rakudo-moar a7bd0bdc9: OUTPUT: «(::?PACKAGE $/ $=finish $¢ $?PACKAGE EXPORT $_ !UNIT_MARKER $! $=pod GLOBALish $x)␤»

[16:32] *** sjoshi left
[16:32] <Zoffix> kjk: doesn't show up in REPL presumably because REPL is a hack

[16:33] *** sjoshi joined
[16:33] <kjk> Zoffix: oh ic, that's why. Where in perl6 source can I see how REPL is implemented?

[16:33] <geekosaur> REPL starts a new local/lexical scope for each line, iirc. it's going to be painful (and nonportable, as behavior may change in the future)

[16:34] *** dha left
[16:34] <kjk> so basically it just keeps nesting lexical scopes for each line?

[16:35] <kjk> that would make sense, I guess that's  why I can "redefine" things in the REPL ?

[16:35] <kjk> I mean things that are lexical

[16:36] <uzl> Do class attributes needs to declared with the twigil $.? What about class attributes that are constants?

[16:36] <geekosaur> uzl, the actual twigil for attributes is $!

[16:36] <geekosaur> $. "autodeclares" accessors for you

[16:37] <Zoffix> kjk: right here: https://github.com/rakudo/rakudo/blob/master/src/core/REPL.pm6

[16:37] *** sarna_ joined
[16:37] <kjk> thank you Zoffix

[16:38] <kjk> btw, this is how I check if something is like a package: https://gist.github.com/kjkuan/1ddef6d35940a3daf68d54ef4a5eb628

[16:38] <kjk> does it make sense?

[16:38] <Zoffix> kjk: with the eval part done here: https://github.com/rakudo/rakudo/blob/master/src/core/REPL.pm6#L333-L357

[16:38] <Zoffix> It saves "context" and then restores it or something

[16:39] <Zoffix> And some things currently don't work (like declaring custom ops and IIRC native-typed variables have some problems too)

[16:39] *** fascinum left
[16:39] <Zoffix> So basically, if you're playing around with the language, especially with the package stuff, you probably better off using a proper script, rather than doing it in REPL

[16:40] <uzl> geekosaur: I'm trying to declare a class attribute (which is done with my or our) but if I do it with $! (instead of $.), I get this error: Cannot use ! twigil on 'my' variable 

[16:40] <AlexDaniel> Any OpenBSD users here? There's a claim on R#1867 that t/spec/S10-packages/precompilation.rakudo.moar is failing, which I really doubt, but would be nice to double check.

[16:40] <synopsebot_> R#1867 [open]: https://github.com/rakudo/rakudo/issues/1867 [severe][⚠ blocker ⚠] Test failures on FreeBSD

[16:40] <Zoffix> kjk: not an expert in that area, but one thing I see you may want to improve is `!$object.defined` you likely meant `!$object.DEFINITE` there (i.e. type objects only)

[16:40] <geekosaur> yes, that's expected. you don't want a twigil for "my", it's lexical scope not an "attribute"

[16:42] <uzl> geekosaur: So how do I declare the class attribute? With our and as a regular variable?

[16:43] <kjk> Zoffix: oh, ok, thanks, TIL

[16:44] <Zoffix> uzl: that's because $! is a private attribute, but for class attributes, there's nothing to be private to, so you can only have public attributes

[16:46] *** uzl_ joined
[16:46] *** dha joined
[16:46] *** uzl_ left
[16:46] <kjk> so..., what's something that's .defined but not .DEFINITE ? or maybe the other way around

[16:46] *** itaipu left
[16:46] *** uzl left
[16:47] <Zoffix> m: say [.DEFINITE, .defined] with Failure.new

[16:47] <camelia> rakudo-moar a7bd0bdc9: ( no output )

[16:47] <lizmat> kjk: any class can create a "define" method and assign its own meaning to it

[16:47] <Zoffix> m: say [.DEFINITE, .defined] without Failure.new

[16:47] <camelia> rakudo-moar a7bd0bdc9: OUTPUT: «[True False]␤»

[16:47] <Zoffix> kjk: ^

[16:47] <lizmat> as Zoffix just pointed out: Failure.defined has special semantics

[16:48] <kjk> oh I see, thank you

[16:48] <Zoffix> LP6 update just came in: final ebook update shipped and "Three months is a conservative estimate for the time between I turn in the book to the day it shows up in the mail from pre-orders."

[16:48] <Zoffix> So looks like my estimate that the upcoming Star is the Star the book readers will read is correct

[16:48] *** uzl joined
[16:49] *** dha left
[16:50] <Zoffix> (estimate in https://rakudo.party/post/A-Call-To-Action--Polish-Perl-6-First-Steps-Experience I meant)

[16:51] <kjk> so when I declare a type with :D  is it checking for .defined or .DEFINITE ?

[16:52] <Zoffix> kjk: .DEFINITE

[16:52] <Zoffix> m: say Failure.new ~~ Mu:D

[16:52] <camelia> rakudo-moar a7bd0bdc9: OUTPUT: «True␤»

[16:52] *** molaf joined
[16:53] <kjk> Zoffix: gotcha, thanks

[16:54] <lizmat> m: sub a(Failure:D) { }; my $f = Failure.new(X::AdHoc.new); a $f; dd $f.defined

[16:54] <camelia> rakudo-moar a7bd0bdc9: OUTPUT: «Bool::False␤»

[16:54] <lizmat> m: sub a(Failure:D) { say "DEFINITE" }; my $f = Failure.new(X::AdHoc.new); a $f; dd $f.defined

[16:54] <camelia> rakudo-moar a7bd0bdc9: OUTPUT: «DEFINITE␤Bool::False␤»

[16:56] <kjk> right. An instance of Failure is DEFINITE but not defined

[16:58] <kjk> so basically, .DEFINITE is like an is-instance check. but an instance can be defined(default) or undefined depends on how it's implemented. 

[16:59] <Zoffix> right

[17:00] *** nebuchadnezzar joined
[17:01] *** dha joined
[17:03] *** sjoshi left
[17:04] <sarna_> is there a shortcut for `bar(foo => ($foo - 1))` if `foo` is a named argument?

[17:04] <sarna_> `:$foo - 1` doesn't work for some reason

[17:04] <Zoffix> sarna_: no, other than bar(:foo($foo-1))

[17:05] <sarna_> D:

[17:05] <sarna_> thanks

[17:05] <Zoffix> sarna_: 'cause that means `Pair.new('foo', $foo) - 1`

[17:05] <sarna_> Zoffix: I'm asking because my lines are exceeding the 72 character line and it makes me anxious

[17:05] *** dha left
[17:07] <Zoffix> sarna_: use multiple lines

[17:08] <sarna_> Zoffix: each parameter on separate line?

[17:08] <Zoffix> sarna_: doesn't have to be *each*, just fill the line and then continue on a new line

[17:09] <sarna_> Zoffix: hmm, I'll try :)

[17:16] <Zoffix> Just finished my local coding meetup. No one even heard of Perl 6 when I mentioned it. Was a nice surprise as I was kinda bracing for the "Perl is linenoise" reaction :)

[17:20] <kjk> is there something that's true  but not .defined in perl6? I guess that would be confusing

[17:20] <geekosaur> you could make one but it seems like a bad idea

[17:21] <MasterDuke> Zoffix: it's not a language specific meetup?

[17:22] <lizmat> m: my $a = 1 but False; say "foo" if $a

[17:22] <camelia> rakudo-moar a7bd0bdc9: ( no output )

[17:22] <Zoffix> MasterDuke: no, just general "coding" meetup

[17:23] <MasterDuke> cool

[17:24] <kjk> lizmat: right, but that's still .defined

[17:24] <lizmat> m: my $a = Any but True; say "true" if $a; say $a.defined

[17:24] <camelia> rakudo-moar a7bd0bdc9: OUTPUT: «true␤False␤»

[17:25] <lizmat> Perl 6 gives you enough rope to shoot yourself in the foot and drown yourself

[17:25] <kjk> lol

[17:26] <geekosaur> m: class Weird { method defined { False }; method Bool { True }; }; my $x = Weird.new; say $x.defined; say so $x

[17:26] <camelia> rakudo-moar a7bd0bdc9: OUTPUT: «False␤True␤»

[17:30] *** stee joined
[17:32] *** stee3 left
[17:34] *** ExtraCrispy left
[17:39] *** sarna_ left
[17:43] *** ExtraCrispy joined
[18:08] <kjk> Any is Mu, Any is the default base class, and also the default type of paramenters and variables. When would you use Mu instead of Any?

[18:09] <geekosaur> when you need direct access to Junctions instead of having them autothread

[18:09] <lizmat> If you want to have something that doesn't autothread wrt Junctions

[18:10] <kjk> interesting

[18:10] <lizmat> m: sub foo($a) { dd $a }; foo 1|2|3

[18:10] <camelia> rakudo-moar a7bd0bdc9: OUTPUT: «Int $a = 1␤Int $a = 2␤Int $a = 3␤»

[18:11] <lizmat> m: sub foo(Mu $a) { dd $a }; foo 1|2|3

[18:11] <camelia> rakudo-moar a7bd0bdc9: OUTPUT: «Junction $a = any(1, 2, 3)␤»

[18:11] <lizmat> the latter didn't auth-thread

[18:11] <lizmat> *auto

[18:12] <kjk> lizmat: ic, thanks for the example!

[18:16] *** Zoffix left
[18:19] <ingy> tinita: hi

[18:20] <tinita> hi

[18:20] <ingy> m: sub foo($a) { dd $a }; foo 1|2|3

[18:20] <camelia> rakudo-moar b34d5231e: OUTPUT: «Int $a = 1␤Int $a = 2␤Int $a = 3␤»

[18:20] <ingy> tinita: do you see the NL unicode chars

[18:20] <ingy> in that output?

[18:21] <tinita> ingy: yeah, I can see them in my IRC window in irssi, but for some reason not in a terminal without irssi

[18:21] <ingy> huh

[18:21] <ingy> I might need a TESTML_NO_FANCY_UNICODE setting...

[18:22] <tinita> actually, it's not irssi, but I have no idea

[18:22] <tinita> in one tmux I can see it, in the other I can't

[18:22] *** rindolf left
[18:22] <ingy> does perl6 use things like ␤ in error messages? (besides irc bots...)

[18:24] <tinita> ingy: might be a urxvt thing, in xterm I see it

[18:24] <timotimo> i think the nl symbol thing is purely from ircbot

[18:24] <ingy> marklemonware?

[18:24] *** Zoffix joined
[18:25] <tinita> yeah

[18:25] <Zoffix> The ␤ is just the bot converting "\n" to and from ␤

[18:25] *** psychoslave_ joined
[18:25] <Zoffix> It's not used in the compiler itself anywhere.

[18:25] <ingy> I use ␤ in TestML for label string interpoaltion that has newlines

[18:26] <tinita> or maybe it's my font setting

[18:26] <ingy> "Test the {*foo} == {*bar}": *foo == *bar

[18:28] *** |oLa| left
[18:29] <ingy> testml-perl -e '"Test that {Got} == {Want}": "foo\nbar\n" == "foo\nbar\n"'

[18:29] <ingy> ok 1 - Test that foo␤bar␤ == foo␤bar␤

[18:29] <ingy> the friend I'm visiting had problems viewing that as well

[18:30] <ingy> maybe it should be opt-in

[18:30] <tinita> yeah, that sounds like a good idea. or at least opt-out

[18:31] <ingy> nod

[18:32] *** rindolf joined
[18:35] *** raschipi joined
[18:37] <Zoffix> .seen DrForr

[18:37] <yoleaux> I saw DrForr 13 Apr 2018 14:25Z in #perl6: <DrForr> My head isn't in that space right now otherwise I'd look for possible examples...

[18:37] <Zoffix> .ask DrFoor a long shot, but is there a version of your ML talk with working sound by any chance? https://www.youtube.com/watch?v=GI9DmIbNXrM

[18:37] <yoleaux> Zoffix: I'll pass your message to DrFoor.

[18:37] <geekosaur> who's DrFoor? :p

[18:38] <Zoffix> .ask DrForr a long shot, but is there a version of your ML talk with working sound by any chance? https://www.youtube.com/watch?v=GI9DmIbNXrM

[18:38] <yoleaux> Zoffix: I'll pass your message to DrForr.

[18:38] <Zoffix> Thanks :)

[18:38] *** psychoslave_ left
[18:39] <DrFoor> .

[18:39] <yoleaux> 18:37Z <Zoffix> DrFoor: a long shot, but is there a version of your ML talk with working sound by any chance? https://www.youtube.com/watch?v=GI9DmIbNXrM

[18:39] <ingy> They Call Me Dr Foo o/~

[18:39] <geekosaur> Mr. Hyde?

[18:42] <ingy> to the tune of Dr Love...

[18:43] *** domidumont left
[18:47] *** xtreak left
[18:49] *** susmus joined
[18:51] <b2gills> the camelia bot uses ␤ instead of newlines because the newline character ends an irc message

[18:52] <ingy> b2gills: well it could use '\n'

[18:52] <ingy> but that would couse confusion with literal '\n'

[18:52] <ingy> I really like the ␤

[18:52] <b2gills> m: # comment␤ print "not a comment\n"

[18:52] *** uzl left
[18:52] <camelia> rakudo-moar b34d5231e: OUTPUT: «not a comment␤»

[18:53] <ingy> oic

[18:53] <ingy> neat

[18:54] <ingy> testml -e supports multiple -e lines, and they keep indentation. also 2 or more spaces after a ; are kept (for indentation).

[18:55] <ingy> so:  testml -e '=>' -e '  1 == 1'    same as: testml -e '=>;  1 == 1'

[18:55] <ingy> people naturally want to put one space after a ;

[18:56] <ingy> but not 2 spaces, so that can mean indentation.

[19:05] *** zakharyas joined
[19:10] *** zakharyas left
[19:11] *** zakharyas joined
[19:39] *** darutoko left
[19:45] *** Zoffix left
[19:46] *** sjoshi joined
[19:53] *** benjikun2 joined
[19:57] *** benjikun left
[20:04] *** wamba joined
[20:06] *** mahafyi joined
[20:22] *** sjoshi left
[20:30] *** jmerelo joined
[20:45] *** imcsk8 left
[20:47] <jmerelo> squashable6: status

[20:47] <squashable6> jmerelo, Next SQUASHathon in 19 days and ≈13 hours (2018-07-07 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[20:47] <El_Che> releasable6: status

[20:47] <releasable6> El_Che, Next release will happen when it's ready. 2 blockers. 87 out of 91 commits logged

[20:47] <releasable6> El_Che, Details: https://gist.github.com/b4a452650b48be61247cdc8660735050

[20:48] <sarna> woo

[20:51] *** Kaiepi joined
[20:52] <Kaiepi> m: my $range = [1,1,*+*...*]; for 1..10 { say $range[$_] }

[20:52] <camelia> rakudo-moar b34d5231e: OUTPUT: «1␤2␤3␤5␤8␤13␤21␤34␤55␤89␤»

[20:52] <Kaiepi> m: my $range = [1,1,*+*...*]; for 1..1000 { say $range[$_] }

[20:52] <camelia> rakudo-moar b34d5231e: OUTPUT: «1␤2␤3␤5␤8␤13␤21␤34␤55␤89␤144␤233␤377␤610␤987␤1597␤2584␤4181␤6765␤10946␤17711␤28657␤46368␤75025␤121393␤196418␤317811␤514229␤832040␤1346269␤2178309␤3524578␤5702887␤9227465␤14930352␤24…»

[20:52] <Kaiepi> m: my $range = [1,1,*+*...*]; for 1..10000 { say $range[$_] }

[20:52] <camelia> rakudo-moar b34d5231e: OUTPUT: «1␤2␤3␤5␤8␤13␤21␤34␤55␤89␤144␤233␤377␤610␤987␤1597␤2584␤4181␤6765␤10946␤17711␤28657␤46368␤75025␤121393␤196418␤317811␤514229␤832040␤1346269␤2178309␤3524578␤5702887␤9227465␤14930352␤24…»

[20:52] <Kaiepi> weird i run out of memory on my system when i try that

[20:53] <sarna> maybe it's lazy here?

[20:54] <Kaiepi> ok it doesn't when i try that again

[20:54] <jmerelo> Kaiepi: different amount of memory, maybe.

[20:55] <jmerelo> Kaiepi: more free memory?

[20:55] *** jmerelo left
[20:55] <Kaiepi> openbsd limits the amount of memory processes can use depending on how /etc/login.conf is configure

[20:56] *** mahafyi left
[20:56] <Kaiepi> s/configure/configured

[20:56] *** imcsk8 joined
[20:57] <Kaiepi> it's weird that it killed moarvm when i first tried it though

[20:58] <Kaiepi> it was using 1.5GB of memory

[21:00] <Kaiepi> can't reproduce

[21:02] *** raschipi left
[21:06] *** HaraldJoerg1 joined
[21:07] *** HaraldJoerg left
[21:08] <Kaiepi> unrelated but anyone have any tips on how i can improve this grammar? https://hastebin.com/parimarowi.tex

[21:08] <Kaiepi> i don't want to have to check for every single type of negotiation

[21:09] *** raschipi joined
[21:11] <Kaiepi> also why does <-[ \x[80] ... \x[FF] ]> but not <[ \x[00] ... \x[7f] >?

[21:12] <Kaiepi> *<[ \x[00] ... \x[7F] ]>

[21:15] <geekosaur> suspect that first doesnt do what you intend either, unless you're forcing a single-byte encoding elsewhere

[21:17] <Kaiepi> what do you mean?

[21:18] <Kaiepi> the string i'm passing to the grammar is encoded in latin1

[21:31] *** HaraldJoerg1 is now known as HaraldJoerg

[21:31] *** mahafyi joined
[21:35] *** zakharyas left
[21:40] *** Luneburg joined
[21:45] *** raschipi left
[21:46] <Luneburg> I'm having some trouble with Project Euler problem 11

[21:46] <Luneburg> The code looks good, but it isn't producing the right solution

[21:47] <timotimo> can you paste the code on some pasting website? if you use one like glot.io we can immediately run the code on-line, too

[21:51] <Luneburg> timotimo: I used 0bin: https://0bin.net/paste/5SnxRUyMXpoUaXqX#3hQ06sEMfHUwTKY3jcKzFunkvgrIYz9yC-NFXPF5dXS

[21:52] *** todd joined
[21:52] <timotimo> did you know that split takes an array of needles to split by? :D

[21:53] <timotimo> i think your code may accidentally wrap around the right edge

[21:53] <Luneburg> timotimo: What do you mean?

[21:53] <todd> Hi All, on https://docs.perl6.org/language/control#for, I am not find a C style loop.  I am looking for something like `for i=1 to 10 by 2`

[21:53] <timotimo> m: "hello how are,you today,thanks,i'm,fine how about,you".split([" ", ","]).perl.say

[21:53] <camelia> rakudo-moar b34d5231e: OUTPUT: «("hello", "how", "are", "you", "today", "thanks", "i'm", "fine", "how", "about", "you").Seq␤»

[21:54] <timotimo> todd: c-style for is called "loop" in perl6

[21:54] <timotimo> but what you can use for your example instead is the ... operator

[21:55] <timotimo> m: for 1, 3 ... 10 { .say }

[21:55] <camelia> rakudo-moar b34d5231e: OUTPUT: «1␤3␤5␤7␤9␤»

[21:55] <timotimo> todd: ^

[21:55] <todd> No wonder I couldn't find it.  Thank you!

[21:56] <todd> testing

[21:56] <timotimo> Luneburg: consider what happens when your $i is at the end of the first line, it'll just keep increasing $i to look for the next value, but in doing so it will skip out of the right edge and into the left on the next line

[21:57] <Luneburg> timotimo: Ah, I did notice that, but I don't think that should impact the result

[21:58] <timotimo> you could output $i and which direction it was whenever you update $greatest-sum

[21:59] <timotimo> i think that'd let us see if that happens or not

[22:00] <timotimo> i just executed it on my machine as well and it looks like the code is gladly accessing past the end of the array, too

[22:00] <timotimo> that's what the "use of uninitialized value of type Any in numeric context" message means

[22:01] <todd> what am I doing wrong?  `perl6 -e 'my @x=<a b c d e f>; loop (my $=2; $<4: $I++){say "@x[$Index]";}'`

[22:01] <todd> Whitespace required before < operator at -e:1 ------> p (my $=2; $<4: $I++){say "@x[$Index]";}⏏<EOL>     expecting any of:         term

[22:01] <Luneburg> timotimo: Ah, okay. But would that affect the final output value? I mean, it's going to multiple (Any) by a few numbers, but the product of that should not be greater than previous multiplications, since less than four numbers are being multipled together (ignoring the any)

[22:02] <timotimo> todd: i think you forgot to give the loop variable a proper name

[22:02] <timotimo> right, it'd end up being 0 for those undefined values

[22:03] <timotimo> todd: otherwise it is exactly what it says, there would have to be a whitespace before the < operator. but you don't want to use just $ there, that's not helpful

[22:04] <todd> fix a bunch of booboo,  now it works: # perl6 -e 'my @x=<a b c d e f>; loop (my $I=2; $I < 4; $I++){say "@x[$I]";}' c d

[22:04] <todd> Thank you!

[22:04] <b2gills> Kaiepi: [1,1,*+*...*] keeps all of the previous values in memory. You probably want a one-shot sequence instead.

[22:05] <timotimo> the thing is that $blah<foo> is syntax for a key lookup in $blah, but $ by itself is also a valid name for a variable - a special kind, but still

[22:05] <Luneburg> timotimo: Thanks for the help, I'll edit the code and see if it works. 

[22:06] <timotimo> so $< will be parsed as accessing something hash-like and when it hits the end of the file it realizes "oh you didn't actually mean for all this to be the key to look up!" and tells you that a whitespace in front of the < would probably have made things right

[22:07] <b2gills> todd: that is better written as `for @x[2..^4] { say ~$_ ; }`

[22:10] <todd> The part of the array to be accessed wil be calculated.  

[22:11] *** HaraldJoerg left
[22:12] <todd> perl6 -e 'my @x=<a b c d e f>; my $i=2; my $j=4; for @x[$i..^$j]{say "$_";}' ===SORRY!=== Error while compiling -e Missing block (whitespace needed before curlies taken as a hash subscript?) at -e:1 ------> i=2; my $j=4; for @x[$i..^$j]{say "$_";}⏏<EOL>

[22:13] <todd> fix it: # perl6 -e 'my @x=<a b c d e f>; my $i=2; my $j=4; for @x[$i..^$j] {say "$_";}' c d

[22:14] <todd> Thank you!

[22:14] <b2gills> Also why not use `put` so you don't have to stringify it

[22:16] <todd> wat the put to me?

[22:16] <b2gills> `say "$_"` === `say ~$_` === `put $_` === `$_.put` === `.put`

[22:17] <kjk> say  I have a mysub that returns a sequence of Pairs, and I want to do:  for mysub() -> $x, $y { ... }.   how do I actually unpack the pairs into $x and $y there?

[22:17] <b2gills> -> Pair ( :key($x), :value($y) ) {…}

[22:17] *** AlexDani` joined
[22:18] <b2gills> or just `-> ( :key($x), :value($y) ) {…}`

[22:18] <b2gills> If you don't care about it being $x and $y `-> ( :$key, :$value ) {…}`

[22:19] <kjk> b2gills: nice! thank you

[22:19] *** Luneburg left
[22:19] *** AlexDaniel left
[22:20] *** AlexDani` is now known as AlexDaniel

[22:22] <Kaiepi> <b2gills> Kaiepi: [1,1,*+*...*] keeps all of the previous values in memory. You probably want a one-shot sequence instead.

[22:22] <Kaiepi> what's a one shot sequence?

[22:22] <b2gills> 1,1,*+*...*

[22:23] <Kaiepi> is that different from [1,1,*+*...*]?

[22:23] <b2gills> m: my $seq = 1,1,*+*...*; for $seq[1..1000] { say $_ }

[22:23] <camelia> rakudo-moar b34d5231e: OUTPUT: «Potential difficulties:␤    Useless use of ... in sink context␤    at <tmp>:1␤    ------> 3my $seq = 1,1,*+*...7⏏5*; for $seq[1..1000] { say $_ }␤MoarVM panic: Memory allocation failed; could not allocate 24 bytes␤»

[22:24] <evalable6> b2gills, rakudo-moar b34d5231e: OUTPUT: «(signal SIGKILL) Potential difficulties:␤    Useless use of ... in sink context␤    at /tmp/43f5_sTK6E:1␤    ------> 031,1,*+*...08⏏04*␤»

[22:26] <b2gills> m: my $seq = (1,1,*+*...*); for $seq[1..1000] { say $_ }

[22:26] <camelia> rakudo-moar b34d5231e: OUTPUT: «1␤2␤3␤5␤8␤13␤21␤34␤55␤89␤144␤233␤377␤610␤987␤1597␤2584␤4181␤6765␤10946␤17711␤28657␤46368␤75025␤121393␤196418␤317811␤514229␤832040␤1346269␤2178309␤3524578␤5702887␤9227465␤14930352␤24…»

[22:27] <b2gills> It needed () to parse it the expected way. It was parsing as `(my $seq = 1),1,*+*...*;`

[22:27] <b2gills> Is there a reason you are skipping the first value?

[22:27] <b2gills> m: my $seq = (1,1,*+*...*); for $seq.head(1000) { say $_ }

[22:27] <camelia> rakudo-moar b34d5231e: OUTPUT: «1␤1␤2␤3␤5␤8␤13␤21␤34␤55␤89␤144␤233␤377␤610␤987␤1597␤2584␤4181␤6765␤10946␤17711␤28657␤46368␤75025␤121393␤196418␤317811␤514229␤832040␤1346269␤2178309␤3524578␤5702887␤9227465␤14930352…»

[22:28] <b2gills> m: my $seq = (1,1,*+*...*); say $seq.^name

[22:28] <camelia> rakudo-moar b34d5231e: OUTPUT: «Seq␤»

[22:28] <b2gills> m: my $range = [1,1,*+*...*]; say $range.^name

[22:28] <camelia> rakudo-moar b34d5231e: OUTPUT: «Array␤»

[22:30] <Kaiepi> so i should be using () instead of []?

[22:31] <b2gills> Kaiepi: basically `1,1,*+*...*` creates a sequence (which starts off being one-shot). Putting [] around it turns it into an Array, which is never one-shot. In this case something is needed to cause it to parse the way you want, and the only thing () does is change the way things are parsed.

[22:31] <Kaiepi> ahhh

[22:31] <Kaiepi> ok that makes sense

[22:31] <Kaiepi> thanks

[22:32] <Kaiepi> are seqs lazy?

[22:32] <b2gills> sequences are lazy if they are expected to be lazy

[22:33] <timotimo> 001246      todd ? perl6 -e 'my @x=<a b c d e f>; my $i=2; my $j=4; for @x[$i..^$j]{say "$_";}'

[22:33] <b2gills> (1,1,*+*...*) is lazy. (1,1,*+*...8) is not lazy. (1,1,*+*...9) is not lazy, and never terminates

[22:33] <timotimo> oops, sorry about that

[22:33] <timotimo> misclicked

[22:35] *** rindolf left
[22:35] *** dct joined
[22:36] <b2gills> Kaiepi: Sequences don't generate values until asked. If it looks to be an infinite sequence it will be lazy. Sequences can always be marked as lazy by calling .lazy.

[22:37] <b2gills> m: say (1,1,*+*...8).elems; # < doesn't error out␤ say (1,1,*+*...8).lazy.elems

[22:37] <camelia> rakudo-moar b34d5231e: OUTPUT: «6␤Cannot .elems a lazy list␤  in block <unit> at <tmp> line 2␤␤»

[22:37] <geekosaur> heh

[22:45] *** todd left
[22:50] *** perlpilot joined
[22:59] *** pecastro left
[23:01] <Kaiepi> ah

[23:02] *** mahafyi left
[23:06] *** pecastro joined
[23:06] *** zachk joined
[23:06] *** zachk left
[23:06] *** zachk joined
[23:07] *** dataangel joined
[23:09] *** Zoffix joined
[23:09] <Zoffix> m: use Test; constant  @iias6 = do { %(:foo, :bar) }; is-deeply @iias6.sort, (:foo, :bar).sort, 'def, statement (value)'; 

[23:09] <camelia> rakudo-moar b34d5231e: OUTPUT: «ok 1 - def, statement (value)␤»

[23:09] <Zoffix> m: use Test; constant  @iias6 = do { %(:foo, :bar) }; is-deeply @iias6.sort, (:foo, :bar).sort, 'def, statement (value)'; ok ::('@iias6')

[23:09] <camelia> rakudo-moar b34d5231e: OUTPUT: «ok 1 - def, statement (value)␤The iterator of this Seq is already in use/consumed by another Seq␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in sub proclaim at /home/camelia/rakudo-m-in…»

[23:09] <Zoffix> What Seq? 

[23:10] <Zoffix> oh gee

[23:10] <Zoffix> m: use Test; constant  @iias6 = do { %(:foo, :bar) }; dd @iias6

[23:10] <camelia> rakudo-moar b34d5231e: OUTPUT: «(:foo, :bar).Seq␤»

[23:10] <Zoffix> k

[23:10] *** Zoffix left
[23:11] *** Zoffix joined
[23:12] *** dct left
[23:15] *** Zoffix left
[23:21] *** Zoffix joined
[23:40] *** llfourn left
[23:41] *** wamba left
[23:44] *** sauvin_ joined
[23:44] *** sauvin left
[23:53] <kjk> p6: sub s(-->Pair) { asdf => 123 if False }; s

[23:53] <camelia> rakudo-moar b34d5231e: OUTPUT: «Type check failed for return value; expected Pair but got Slip (Empty)␤  in sub s at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:54] <kjk> is that expected?

[23:56] <kjk> p6: sub s(-->Pair) { asdf => 123 if False; Nil }; s

[23:56] <camelia> rakudo-moar b34d5231e: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "asdf => 123 " in sink context (line 1)␤»

[23:56] <Zoffix> kjk: yeah, an `if` without an `else` returns `Empty` if the condition is false

[23:56] *** hami joined
[23:57] <Zoffix> m: sub (*@args) { say @args }( (42 if True), (100 if False), (<meows> with 42), (<foos> without 42))

[23:57] <camelia> rakudo-moar b34d5231e: OUTPUT: «[42 meows]␤»

[23:57] <Zoffix> let's you write stuff like this

[23:57] <Zoffix> And also the way to conditionally "ninja-in" named params

[23:58] <kjk> interesting, thanks for the explanation, Zoffix. 

[23:58] <Zoffix> m: my $foo; sub (:$foo = 'teh default') { dd $foo }( :$foo ) # If you do just this, the default doesn't get applied even tho `$foo` ain't got a proper value

[23:58] <camelia> rakudo-moar b34d5231e: OUTPUT: «Any $foo = Any␤»

[23:58] <Zoffix> m: my $foo; sub (:$foo = 'teh default') { dd $foo }( |(:$foo with $foo) ) # But this works

[23:58] <camelia> rakudo-moar b34d5231e: OUTPUT: «Str $foo = "teh default"␤»

[23:58] *** entonian joined
[23:59] <Zoffix> |(:) <-- looks like a ninja, hence "ninja a named arg" :)

[23:59] <Zoffix> m: my $foo = 42; sub (:$foo = 'teh default') { dd $foo }( |(:$foo with $foo) ) # But this works

[23:59] <camelia> rakudo-moar b34d5231e: OUTPUT: «Int $foo = 42␤»

