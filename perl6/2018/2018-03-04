[00:01] <squashable6> 🍕 JJ++ wrote a comment on “Vow not documented”: https://github.com/perl6/doc/issues/588#issuecomment-370189825

[00:21] *** Xliff joined
[00:21] <Xliff> o

[00:21] <Xliff> \o, even

[00:27] *** comborico1611 left
[00:29] *** greppable6 joined
[00:36] <timotimo> º

[00:58] *** mniip left
[01:00] *** mingdao joined
[01:15] *** jimav left
[01:20] *** pierre_ joined
[01:25] *** konsolebox left
[01:25] *** konsolebox joined
[01:30] *** konsolebox left
[01:32] *** konsolebox joined
[01:43] *** pierre_ left
[01:56] *** konsolebox left
[01:57] *** konsolebox joined
[02:06] *** quester joined
[02:06] *** quester left
[02:06] *** quester joined
[02:20] *** Rawriful left
[02:23] <cfa> ah, looks like zoffix fixed the .contains issue

[02:26] *** konsolebox left
[02:29] *** konsolebox joined
[02:34] *** rindolf joined
[02:35] *** Xliff left
[02:36] *** konsolebox left
[02:37] *** konsolebox joined
[02:43] *** regina joined
[02:43] *** kaare_ left
[02:44] *** ilbot3 left
[02:56] *** ilbot3 joined
[02:56] *** ChanServ sets mode: +v ilbot3

[03:02] *** konsolebox left
[03:03] *** konsolebox joined
[03:08] *** kaare_ joined
[03:14] *** kurahaupo left
[03:15] *** konsolebox left
[03:22] *** konsolebox joined
[03:26] *** konsolebox left
[03:26] <rouking> Zoffix: grant proposal looks great. I'm excited to see FatRats for high-precision literals. What are some examples of constants' behaviour being poorly defined?

[03:28] *** konsolebox joined
[03:30] <rouking> Nevermind, I see.

[03:36] *** pharv joined
[03:47] *** ufobat___ joined
[03:50] *** ufobat_ left
[04:06] *** wamba joined
[04:10] *** konsolebox left
[04:11] *** konsolebox joined
[04:16] *** kurahaupo joined
[04:18] *** konsolebox left
[04:19] *** konsolebox joined
[04:19] <ZzZombo> Aw dammit, grammar blocks my progress again! https://github.com/rakudo/rakudo/blob/52176c3c79b29008b568d194dd2f11d8e9e08bae/src/Perl6/Grammar.nqp#L2367 explicitly forbids anything other than roles to be parameterizable.

[04:19] <ZzZombo> Why oh why??

[04:20] <ZzZombo> and since there is also no `COMPOSE` for `EXPORTHOW`, I'm not gonna fiddle with the stock roles.

[04:21] <ZzZombo> A separate declarator was my safe bet until this moment.

[04:22] *** martinp2 joined
[04:22] *** Actualeyes joined
[04:30] <ZzZombo> m: dd $*W

[04:30] <camelia> rakudo-moar e9cff7954: OUTPUT: «&CORE::infix:<orelse>(Failure.new(exception => X::Dynamic::NotFound.new(name => "\$*W"), backtrace => Backtrace.new), *.self)␤»

[04:30] <ZzZombo> m: say $*W

[04:30] <camelia> rakudo-moar e9cff7954: OUTPUT: «Dynamic variable $*W not found␤  in block <unit> at <tmp> line 1␤␤»

[04:30] <ZzZombo> yeah, why the &CORE::infix:<orelse>?

[04:31] *** konsolebox left
[04:33] *** konsolebox joined
[04:35] *** martinp2 left
[04:42] *** konsolebox left
[04:43] *** konsolebox joined
[04:48] *** konsolebox left
[04:50] *** konsolebox joined
[04:58] *** kurahaupo_ joined
[04:58] *** regina left
[05:00] *** kurahaupo left
[05:05] *** khw left
[05:09] *** kurahaupo_ left
[05:10] *** kurahaupo joined
[05:11] *** pharv left
[05:12] *** pharv joined
[05:17] *** pharv left
[05:23] *** shinobi-cl left
[05:42] *** jeromelanteri joined
[05:46] *** tt left
[05:47] *** Xliff joined
[05:47] *** jeromelanteri left
[05:49] *** tt joined
[05:52] *** quester left
[05:55] *** pierre_ joined
[06:22] *** perlbot left
[06:22] *** simcop2387 left
[06:26] *** simcop2387 joined
[06:26] *** simcop2387 left
[06:26] *** simcop2387 joined
[06:27] *** perlbot joined
[06:28] *** perlbot left
[06:28] *** simcop2387 left
[06:37] *** simcop2387 joined
[06:40] *** perlbot joined
[06:42] *** entonian joined
[06:48] *** entonian left
[07:07] *** darutoko joined
[07:08] *** BenGoldberg left
[07:08] *** leah2 left
[07:08] *** ufobat___ left
[07:15] *** ufobat___ joined
[07:25] *** leah2 joined
[07:29] *** wamba left
[07:37] <Geth> ¦ doc: finanalyst++ created pull request #1811: c function tutorial added

[07:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/1811

[07:37] <squashable6> 🍕 finanalyst++ opened pull request “c function tutorial added”: https://github.com/perl6/doc/pull/1811

[07:37] <squashable6> 🍕🍕🍕  First contribution by finanalyst++! ♥

[07:56] <masak> finanalyst++ # nice to see you again!

[08:07] *** wamba joined
[08:30] *** AlexDaniel joined
[08:34] <AlexDaniel> squashable6: status

[08:34] <squashable6> AlexDaniel, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈3 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[08:34] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/ff8860ce8033abcbd13c416fb34de1e4

[08:36] <AlexDaniel> huggable: doc build

[08:36] <huggable> AlexDaniel, nothing found

[08:37] <AlexDaniel> what was the link for the build log

[08:37] <AlexDaniel> huggable: doc build :is: https://docs.perl6.org/build-log/

[08:37] <huggable> AlexDaniel, Added doc build as https://docs.perl6.org/build-log/

[08:37] <AlexDaniel> This type cannot unbox to a native string: P6opaque, Failure

[08:37] <AlexDaniel> https://docs.perl6.org/build-log/build-2018-03-03T23:15+00:00.log

[08:37] <AlexDaniel> uh?

[08:38] <AlexDaniel> it's using old rakudo version so that is not an issue

[08:38] <AlexDaniel> like, it's not a rakudo bug

[08:43] <AlexDaniel> can it be because of https://github.com/perl6/doc/commit/d468b66bd01ed4f9e82ee5130bff0e0d8346541e

[08:48] <squashable6> 🍕 AlexDaniel++ wrote a comment on “c function tutorial added”: https://github.com/perl6/doc/pull/1811#issuecomment-370212347

[08:49] <squashable6> 🍕 AlexDaniel++ wrote a comment on “c function tutorial added”: https://github.com/perl6/doc/pull/1811#issuecomment-370212425

[08:50] <Geth> ¦ doc: 83ddea53ec | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Language/nativecall.pod6

[08:50] <synopsebot> Link: https://doc.perl6.org/language/nativecall

[08:50] <Geth> ¦ doc: c function tutorial added

[08:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/83ddea53ec

[08:50] <Geth> ¦ doc: 4c543c4fa1 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | doc/Language/nativecall.pod6

[08:50] <Geth> ¦ doc: Merge pull request #1811 from finanalyst/master

[08:50] <squashable6> 🍕 AlexDaniel++ merged pull request “c function tutorial added”: https://github.com/perl6/doc/pull/1811

[08:50] <Geth> ¦ doc: 

[08:50] <Geth> ¦ doc: c function tutorial added

[08:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4c543c4fa1

[08:59] <squashable6> 🍕 AlexDaniel++ wrote a comment on “RAKUDO_ specific environ…”: https://github.com/perl6/doc/issues/990#issuecomment-370212954

[08:59] <squashable6> 🍕 AlexDaniel++ closed issue “RAKUDO_ specific environ…”: https://github.com/perl6/doc/issues/990

[09:01] *** sena_kun joined
[09:02] <squashable6> 🍕 AlexDaniel++ opened issue “Doc build is broken”: https://github.com/perl6/doc/issues/1812

[09:02] <squashable6> 🍕 AlexDaniel++ labeled issue “Doc build is broken”: https://github.com/perl6/doc/issues/1812

[09:02] <squashable6> 🍕 AlexDaniel++ edited issue “Doc build is broken”: https://github.com/perl6/doc/issues/1812

[09:03] <squashable6> 🍕 AlexDaniel++ edited issue “Doc build is broken”: https://github.com/perl6/doc/issues/1812

[09:04] <AlexDaniel> [Coke]: help?

[09:04] <AlexDaniel> I can probably revert the change and it'll fix itself, maybe

[09:04] <AlexDaniel> but why is it happening at all?

[09:05] *** Xliff left
[09:06] <squashable6> 🍕 AlexDaniel++ wrote a comment on “say vs put vs dd”: https://github.com/perl6/doc/issues/1802#issuecomment-370213389

[09:06] <squashable6> 🍕 AlexDaniel++ closed issue “say vs put vs dd”: https://github.com/perl6/doc/issues/1802

[09:08] *** trnh joined
[09:10] *** Xliff joined
[09:28] *** noganex left
[09:32] <Geth> ¦ doc: 9b60680b1c | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Language/faq.pod6

[09:32] <synopsebot> Link: https://doc.perl6.org/language/faq

[09:32] <Geth> ¦ doc: Circular dependencies (FAQ)

[09:32] <Geth> ¦ doc: 

[09:32] <Geth> ¦ doc: Resolves #1419.

[09:32] <Geth> ¦ doc: 

[09:32] <Geth> ¦ doc: I sorta stiched together various thoughts from the IRC discussion. Not

[09:32] <squashable6> 🍕 AlexDaniel++ closed issue “Circular dependencies (FAQ?)”: https://github.com/perl6/doc/issues/1419

[09:32] <Geth> ¦ doc: sure if any of this is making sense, please review and change

[09:32] <Geth> ¦ doc: accordingly.

[09:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9b60680b1c

[09:34] *** noganex joined
[09:40] *** noganex left
[09:48] *** trnh left
[09:53] *** trnh joined
[09:55] *** espadrine joined
[09:59] *** trnh left
[10:04] *** noganex joined
[10:07] *** trnh joined
[10:08] <Geth> ¦ doc: 562ae50469 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Type/Cool.pod6

[10:08] <Geth> ¦ doc: Explain what “grapheme” is, give more examples

[10:08] <Geth> ¦ doc: 

[10:08] <Geth> ¦ doc: Resolves #1403, or so I think. Another page where this can be

[10:08] <Geth> ¦ doc: explained is language/unicode, but I think most users will wonder what

[10:08] <synopsebot> Link: https://doc.perl6.org/type/Cool

[10:08] <Geth> ¦ doc: graphemes are when stumbling upon the description of `chars`. Maybe it

[10:08] <Geth> ¦ doc: can be simply copied over to language/unicode.

[10:08] <squashable6> 🍕 AlexDaniel++ closed issue “grapheme is not searchable”: https://github.com/perl6/doc/issues/1403

[10:08] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/562ae50469

[10:08] <AlexDaniel> .tell samcv plz review https://github.com/perl6/doc/commit/562ae50469

[10:08] <yoleaux> AlexDaniel: I'll pass your message to samcv.

[10:09] <samcv> AlexDaniel: looking

[10:09] <yoleaux> 10:08Z <AlexDaniel> samcv: plz review https://github.com/perl6/doc/commit/562ae50469

[10:10] <samcv> AlexDaniel: I think you make it too complex in the first paragraph. It would make more sense if you explain how graphemes are user visible characters

[10:10] <samcv> because going into Prepend Extend etc most people are going to be like: "what am i reading. all i wanted to know is what graphemes are"

[10:11] <samcv> so it should be written (at least the first paragraph), assuming the reader has no clue what graphemes are

[10:12] <samcv> or even just add one or two sentences before the more technical unicode stuff. but I think most people will understand user visible characters rather than codepoints can be different but may not understand extend/prepend and what that means

[10:12] <TEttinger> what's a character, like pikachu?

[10:13] <samcv> TEttinger: not yet anyway. or ever i guess. since Unicode doesn't allow trademarked things

[10:14] <TEttinger> trademarks expire eventually

[10:14] <TEttinger> in the postapocalyptic unicode emoji wasteland... there are only branded emoji

[10:15] *** pmurias joined
[10:16] <Geth> ¦ doc: c0159cac65 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Type/Cool.pod6

[10:16] <Geth> ¦ doc: Extend the description of graphemes

[10:16] <Geth> ¦ doc: 

[10:16] <Geth> ¦ doc: Adds a ramp to make the techincal details more approachable. samcv++

[10:16] <Geth> ¦ doc: 

[10:16] <Geth> ¦ doc: Discussion: https://irclog.perlgeek.de/perl6/2018-03-04#i_15882036

[10:16] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c0159cac65

[10:16] <AlexDaniel> TEttinger: trademarks potentially last forever :P

[10:16] <pmurias> the new lobster emoji seems like a fine substitute for the pikachu character: https://www.xkcd.com/1953/

[10:17] <AlexDaniel> unlike patents and copyright that have somewhat… “reasonable”… time limits

[10:17] <AlexDaniel> samcv: I don't know if that helps ↑

[10:22] <samcv> AlexDaniel: much better. maybe not perfect but I feel much better now :)

[10:32] <AlexDaniel> squashable6: status

[10:32] <squashable6> AlexDaniel, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈1 hour. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[10:32] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/54b7cb7b685e033641878868f39eb67f

[10:33] *** trnh left
[10:42] *** pharv joined
[10:42] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Reduce travis test time”: https://github.com/perl6/doc/issues/1765#issuecomment-370218906

[10:43] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Next perl6/doc squashath…”: https://github.com/perl6/doc/issues/1778#issuecomment-370218959

[10:43] <squashable6> 🍕 AlexDaniel++ closed issue “Next perl6/doc squashath…”: https://github.com/perl6/doc/issues/1778

[10:44] <squashable6> 🍕 AlexDaniel++ labeled issue “How to document rakudo bugs?”: https://github.com/perl6/doc/issues/1486

[10:45] <squashable6> 🍕 AlexDaniel++ wrote a comment on “How to document rakudo bugs?”: https://github.com/perl6/doc/issues/1486#issuecomment-370219078

[10:46] *** JJ joined
[10:47] *** pharv left
[10:53] <AlexDaniel> squashable6: status

[10:53] <squashable6> AlexDaniel, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈1 hour. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[10:53] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/30a9bb8976769236d324a18e3734b81c

[10:53] *** pharv joined
[10:56] *** quotable6 left
[10:56] <JJ> I'm going to keep working on broken links. There are literally thousands of them. Any help will be appreciated

[10:56] *** quotable6 joined
[10:57] <moritz> if there are thousands of broken links, then it stands to reason that some link generation in the HTML generator is broken

[10:57] <JJ> I'm working from the top of the file down, if someone wants to pitch in, please do it from the bottom up. Or just warn. Anyone wants some clues on how to to proceed, ping me. I'm @jjmerelo in Telegram

[10:57] <AlexDaniel> there are not many 404-s though

[10:58] <AlexDaniel> and these are the actual broken links, everything else is poor html generation

[10:58] <AlexDaniel> which **really** needs some fixing

[10:58] <AlexDaniel> like, some hero to fix it :)

[10:58] <JJ> @moritz @alexdaniel I'm working on the 404s. However, some 200 are also kinda broken since they point to fragments and might have some underlying problem.

[10:58] <JJ> Like they point to a section that has disappeared and so on. Anyway, 404s are priorities.

[10:59] <AlexDaniel> squashable6: status

[10:59] <squashable6> AlexDaniel, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈1 hour. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[10:59] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/5620b5044f158c436df6daba84e44d46

[10:59] <JJ> @AlexDaniel a whole posse of heroes, probably :-)

[11:00] <AlexDaniel> moritz: by any chance do you have any clue on how we can unbreak the doc build on docs.perl6.org ?

[11:00] <AlexDaniel> moritz: https://github.com/perl6/doc/issues/1812

[11:01] <AlexDaniel> CI is very green, locally it's fine

[11:02] <AlexDaniel> samcv: someone assigned you on https://github.com/perl6/doc/issues/1517

[11:02] <AlexDaniel> samcv: can you please either fix it or unassign yourself?

[11:02] <moritz> https://docs.perl6.org/build-log/build-2018-03-04T10:20+00:00.log

[11:03] <moritz> AlexDaniel: should I try installing a newer rakudo?

[11:03] <AlexDaniel> moritz: it shouldn't matter, but that won't hurt

[11:03] <moritz> This is Rakudo version 2017.11-78-g1dbf5f589 built on MoarVM version 2017.11-27-gfac29990

[11:03] <AlexDaniel> it feels like it needs a make clean or something… not sure

[11:03] <moritz> I'll try that first

[11:03] <samcv> AlexDaniel: thanks i'll look. there must be a page github has to show you things you are assigned to? i should probably find it

[11:04] <AlexDaniel> samcv: https://github.com/issues/assigned

[11:05] <squashable6> 🍕 samcv++ wrote a comment on “Document unicode normalization”: https://github.com/perl6/doc/issues/1517#issuecomment-370220151

[11:05] <squashable6> 🍕🍕🍕  First contribution by samcv++! ♥

[11:05] <samcv> i have to go to bed now, but I left a comment, if you can reply. thanks AlexDaniel :)

[11:05] <samcv> i'll work on it tomorrow when i wake up

[11:06] <JJ> I don't get what's wrong with this  L<LEAVE|/language/phasers#LEAVE>? Why does it get turned into https://docs.perl6.org/type/$SOLIDUSphasers?

[11:09] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Document unicode normalization”: https://github.com/perl6/doc/issues/1517#issuecomment-370220408

[11:09] *** kaare__ joined
[11:09] *** kaare_ left
[11:11] <Geth> ¦ doc: 79866964d8 | (JJ Merelo)++ | doc/Type/Any.pod6

[11:11] <synopsebot> Link: https://doc.perl6.org/type/Any

[11:11] <Geth> ¦ doc: More fixes refs #561

[11:11] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/79866964d8

[11:16] <JJ> Since some paragraphs are actually included in many different pages, there are actually not so many 404s. I think this should be done at the repo document level, not at the website level. Maybe add some test?

[11:17] *** kaare_ joined
[11:17] *** kaare__ left
[11:18] <AlexDaniel> JJ: like https://github.com/perl6/doc/issues/1433 ?

[11:19] <AlexDaniel> although I'm not sure how it works

[11:19] <AlexDaniel> JJ: fwiw there's also a “debug” mode on the website, but I don't know if it works

[11:20] <AlexDaniel> JJ: if you scroll to the bottom of any page it says "[Debug: off]"

[11:20] <JJ> @alexdaniel right. And I commented on it. Sorry, I've been all night (or a short TZ-jumping version of it) on a flight, I don't have all my wits about me

[11:21] <JJ> @AlexDaniel every 404 is a different issue... Plus I just realized the link to the doc at the top might be outdated. 

[11:21] <AlexDaniel> click on that and it'll turn it on, IIRC it checks for broken links

[11:22] <JJ> @AlexDaniel gotta do that for every different page, right?

[11:22] <AlexDaniel> JJ: no, just turn it on once and it'll stay on

[11:22] <AlexDaniel> for example, if you go to https://docs.perl6.org/language/5to6-perlfunc

[11:22] <AlexDaniel> it says:

[11:22] <AlexDaniel> Broken link: 404 for https://docs.perl6.org/type/printf found. Please report at irc.freenode.net#perl6

[11:24] <AlexDaniel> hm… it no longer says that for me

[11:24] <AlexDaniel> anyway, it kinda works! :)

[11:24] <Geth> ¦ doc: b81387c281 | (JJ Merelo)++ | doc/Language/operators.pod6

[11:24] <synopsebot> Link: https://doc.perl6.org/language/operators

[11:24] <Geth> ¦ doc: StrDistance is not actually documented refs #691

[11:24] <Geth> ¦ doc: 

[11:24] <Geth> ¦ doc: But eliminates broken link #561

[11:24] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b81387c281

[11:26] <JJ> @AlexDaniel to find out the broken links I'm using this checklink -b -D 25 -q doc.perl6.org | tee "$(date '+%F')" That's not so big a deal... Problem is broken links keep being added and every one poses a different problem, like last one.

[11:26] <AlexDaniel> yea

[11:30] <squashable6> 🍕 JJ++ opened issue “X::Attribute::Required is not documented”: https://github.com/perl6/doc/issues/1813

[11:34] <AlexDaniel> moritz: o! It worked!

[11:34] <AlexDaniel> moritz: thank you very much!

[11:34] <Geth> ¦ doc: baf0c72dc0 | (JJ Merelo)++ | doc/Type/Signature.pod6

[11:34] <synopsebot> Link: https://doc.perl6.org/type/Signature

[11:34] <Geth> ¦ doc: Adds link to ACCEPTS.

[11:34] <Geth> ¦ doc: 

[11:34] <Geth> ¦ doc: Refs #561

[11:34] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/baf0c72dc0

[11:35] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Doc build is broken”: https://github.com/perl6/doc/issues/1812#issuecomment-370221965

[11:35] <squashable6> 🍕 AlexDaniel++ closed issue “Doc build is broken”: https://github.com/perl6/doc/issues/1812

[11:36] <AlexDaniel> JJ: fwiw broken link to TWEAK here: https://docs.perl6.org/language/traps#BUILD_prevents_automatic_attribute_initialization_from_constructor_arguments

[11:37] *** pierre_ left
[11:38] <JJ> @AlexDaniel thanks, I'll try that next...

[11:39] <AlexDaniel> hm I don't know if 👩‍👧‍👦🏿 is a reasonable example

[11:39] *** kaare_ left
[11:39] <AlexDaniel> huggable: clog

[11:39] <huggable> AlexDaniel, nothing found

[11:39] <AlexDaniel> huggable: log

[11:39] <huggable> AlexDaniel, Comes out 2.41x faster than core .log10 and can handle Ints larger than 1.8e308: https://gist.github.com/zoffixznet/2539e8bebe9c5e19ab38ca43e173fe8f

[11:39] <AlexDaniel> huggable: irc log

[11:39] <huggable> AlexDaniel, nothing found

[11:39] <AlexDaniel> huggable: irclog

[11:39] <huggable> AlexDaniel, nothing found

[11:40] *** kaare_ joined
[11:40] *** pmurias left
[11:41] <AlexDaniel> chromium renders all characters separately… which is totally broken

[11:41] <AlexDaniel> and firefox renders white family with a skin tone modifier separately

[11:42] <AlexDaniel> I guess there's no point in having an example that can't be rendered by anything?

[11:43] <AlexDaniel> it's still 1 character according to perl 6 though…

[11:43] <AlexDaniel> (re https://docs.perl6.org/type/Cool#index-entry-Grapheme )

[11:44] *** pharv left
[11:44] <AlexDaniel> I think <pre> tag breaks proper rendering of characters

[11:44] <Geth> ¦ doc: 1d3a0f3840 | (JJ Merelo)++ | doc/Language/concurrency.pod6

[11:44] <synopsebot> Link: https://doc.perl6.org/language/concurrency

[11:44] <Geth> ¦ doc: That Vow is defined in the example

[11:44] <Geth> ¦ doc: 

[11:44] <Geth> ¦ doc: Refs #561

[11:44] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1d3a0f3840

[11:44] <Geth> ¦ doc: b385e85a23 | (JJ Merelo)++ | doc/Language/traps.pod6

[11:44] <synopsebot> Link: https://doc.perl6.org/language/traps

[11:44] <Geth> ¦ doc: Adds link to TWEAK

[11:45] <Geth> ¦ doc: 

[11:45] *** pharv joined
[11:45] <Geth> ¦ doc: Refs #561 Reported by @AlexDaniel

[11:45] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b385e85a23

[11:46] <JJ> squashable6: status

[11:46] <squashable6> JJ, 🍕🍕 SQUASHathon is in progress! The end of the event is in 13 minutes. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[11:46] <squashable6> JJ, Log and stats: https://gist.github.com/b085dfb99c0e4c083243dcff6c195b9a

[11:46] <JJ> OK; one more link to go

[11:46] *** konsolebox left
[11:47] *** pmurias joined
[11:48] <squashable6> 🍕 AlexDaniel++ labeled issue “Convert static site to dynamic site”: https://github.com/perl6/doc/issues/1246

[11:49] *** pharv left
[11:51] <squashable6> 🍕 JJ++ opened issue “Thread::Instrument::Usag…”: https://github.com/perl6/doc/issues/1814

[11:52] *** konsolebox joined
[11:52] <moritz> AlexDaniel: doc build seems to be fixed

[11:53] <AlexDaniel> I know! already closed the issue! :) thank you

[11:53] <moritz> yay, old-fashioned me is still good for something :)

[11:53] <moritz> you're welcome

[11:57] <Geth> ¦ doc: 5289381371 | (JJ Merelo)++ | doc/Language/glossary.pod6

[11:57] <synopsebot> Link: https://doc.perl6.org/language/glossary

[11:57] <Geth> ¦ doc: Routine not syntax refs #561

[11:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5289381371

[11:57] <Geth> ¦ doc: 15f03be788 | (JJ Merelo)++ | doc/Type/Lock.pod6

[11:57] <Geth> ¦ doc: URL had moved refs #561

[11:57] <synopsebot> Link: https://doc.perl6.org/type/Lock

[11:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/15f03be788

[11:57] <Geth> ¦ doc: 8f782921dc | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Type/IO/Handle.pod6

[11:57] <synopsebot> Link: https://doc.perl6.org/type/IO::Handle

[11:57] <squashable6> 🍕 AlexDaniel++ closed issue “Unclosed handles on exit”: https://github.com/perl6/doc/issues/1561

[11:57] <Geth> ¦ doc: Correct note about file handles

[11:57] <Geth> ¦ doc: 

[11:57] <Geth> ¦ doc: Resolves #1561.

[11:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8f782921dc

[11:58] <JJ> squashable6: status

[11:58] <squashable6> JJ, 🍕🍕 SQUASHathon is in progress! The end of the event is in 1 minute. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[11:58] <squashable6> JJ, Log and stats: https://gist.github.com/028a3c756d157090ba2f5a69bba00194

[12:01] <Geth> ¦ doc: c1865ccea3 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Type/IO/Handle.pod6

[12:01] <Geth> ¦ doc: Make the note clearer

[12:01] <Geth> ¦ doc: 

[12:01] <Geth> ¦ doc: Otherwise people might think that closing anything is not needed at all.

[12:01] <Geth> ¦ doc: Issue #1561.

[12:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c1865ccea3

[12:01] <AlexDaniel> squashable6: status

[12:01] <squashable6> AlexDaniel, Next SQUASHathon in 32 days and ≈21 hours (2018-04-07 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[12:01] <AlexDaniel> squashable6: log 2018-03-03

[12:01] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/7fe03d8bcf694750ea9cd630afa7650c

[12:02] <JJ> OK, people, I'm off now. Will continue working on broken links in the next few days... First on the test, probably.

[12:03] <AlexDaniel> JJ: thanks! See you ;)

[12:04] <JJ> Thanks to you all! It's been a pleasure (in a weird kind of way). Cheers!

[12:08] <AlexDaniel> I find it amazing that 17 people touched the doc during the squashathon

[12:08] *** trnh joined
[12:08] <AlexDaniel> yes obviously only a few of them were actually closing tickets and committing, but 17 people is a lot IMO

[12:08] *** JJ left
[12:10] <AlexDaniel> lol and I need some English lessons to work on the doc repo properly :P

[12:21] <Geth> ¦ doc: 1ffc90ee81 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Language/faq.pod6

[12:21] <synopsebot> Link: https://doc.perl6.org/language/faq

[12:21] <Geth> ¦ doc: Another solution for circular dependencies

[12:21] <Geth> ¦ doc: 

[12:21] <Geth> ¦ doc: Discussion: https://irclog.perlgeek.de/perl6-dev/2018-03-04#i_15882396

[12:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1ffc90ee81

[12:29] <DrForr> Yow. Like the new moules.perl6.org dist/ directory look

[12:30] <DrForr> *modules

[12:35] *** Actualeyes left
[12:40] *** eliasr joined
[12:46] *** natrys joined
[12:50] <DrForr> There's a slight difference between cpan-upload's .pause and App::Mi6's .pause format - 'username' vs 'user' in App::Mi6.

[12:52] <tbrowder> .tell AlexDaniel your English is as good as most native-English speakers whose articles I read online these days, and better than many!

[12:52] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[12:53] <DrForr> Or maybe something else is broken, as using neither 'user' nor 'username' for the entry seem to work. I'll poke around.

[12:54] *** ufobat_ joined
[12:57] *** ufobat___ left
[13:21] *** pierre_ joined
[13:22] *** Kaiepi left
[13:35] *** shinobi-cl joined
[13:42] *** aborazmeh joined
[13:42] *** aborazmeh left
[13:42] *** aborazmeh joined
[13:44] <Ulti> m: say +lines().grep(/the/)

[13:44] <yoleaux> 22 Feb 2018 23:47Z <Zoffix> Ulti: you have a PR unbreaking module listing: https://github.com/MattOates/Stats/pull/6

[13:44] <camelia> rakudo-moar e9cff7954: OUTPUT: «0␤»

[13:45] <Ulti> m: say +lines().race.grep(/the/)

[13:45] <camelia> rakudo-moar e9cff7954: OUTPUT: «A worker in a parallel iteration (hyper or race) initiated here:␤  in block <unit> at <tmp> line 1␤␤Died at:␤    No such method '!cursor_start' for invocant of type 'Str'␤␤»

[13:45] <Ulti> ^ whats this about

[14:03] <moritz> looks like left-over debugging code, plus a bug

[14:05] *** aborazmeh left
[14:10] *** konsolebox left
[14:11] *** konsolebox joined
[14:19] <timotimo> i don't think that's left-over, that looks like a deliberate helpful thing

[14:20] <timotimo> m: say +lines().race.grep(/the/); CATCH { .perl.say }

[14:20] <camelia> rakudo-moar e9cff7954: OUTPUT: «X::Method::NotFound+{X::HyperRace::Died}.new(start-backtrace => Backtrace.new, invocant => "»Wann treffen wir drei wieder zusamm?«", method => "!cursor_start", typename => "Str", private => Bool::False)␤A worker in a parallel iteration (hyper or r…»

[14:20] <timotimo> m: say +lines().race.grep(/the/); CATCH { default { .perl.say } }

[14:20] <camelia> rakudo-moar e9cff7954: OUTPUT: «X::Method::NotFound+{X::HyperRace::Died}.new(start-backtrace => Backtrace.new, invocant => "»Wann treffen wir drei wieder zusamm?«", method => "!cursor_start", typename => "Str", private => Bool::False)␤»

[14:20] <timotimo> as you can see it's a proper exception

[14:21] *** konsolebox left
[14:23] *** konsolebox joined
[14:29] <timotimo> or do you mean why does that explode?

[14:29] <timotimo> cursor_start is supposed to be called on the regex, not on the string, right?

[14:31] <MasterDuke> it dies in this loop https://github.com/rakudo/rakudo/blob/master/src/core/Rakudo/Internals/HyperRaceSharedImpl.pm6#L41-L44 at line 43

[14:32] <timotimo> m: /foo/("hello")

[14:32] <camelia> rakudo-moar e9cff7954: OUTPUT: «No such method '!cursor_start' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[14:32] <timotimo> right, it's not supposed to call the matcher if it's a regex

[14:34] <timotimo> who wants to fix it? :)

[14:45] *** Actualeyes joined
[14:57] *** trnh left
[15:02] <rindolf> timotimo: hi, sup?

[15:02] <rindolf> MasterDuke: hi

[15:03] <MasterDuke> hey

[15:03] *** trnh joined
[15:04] <rindolf> MasterDuke: sup?

[15:04] <timotimo> yo rindolf 

[15:05] <rindolf> did you get to the bottom of the wrong result problem?

[15:05] <timotimo> i didn't investigate further, sorry :(

[15:07] <MasterDuke> rindolf: i'm trying to figure out how make native array accesses use native candidates

[15:08] *** zakharyas joined
[15:08] *** pierre_ left
[15:09] <rindolf> timotimo: ah

[15:09] *** kaare__ joined
[15:09] <rindolf> timotimo: where is the offending code?

[15:09] *** pierre_ joined
[15:09] *** kaare_ left
[15:09] <MasterDuke> that would (almost) mean you could just stick an 'int' in front of your variables and reduce the runtime to a quarter

[15:10] *** zakharyas left
[15:10] <rindolf> MasterDuke: gl, and thanks

[15:11] *** zakharyas joined
[15:11] <MasterDuke> np, hopefully it'll help other code also

[15:14] *** pierre_ left
[15:18] *** Kaiepi joined
[15:18] *** kaare__ left
[15:22] *** trnh left
[15:24] *** trnh joined
[15:24] <buggable> New CPAN upload: CommonMark-0.0.5.tar.gz by JGOFF https://cpan.metacpan.org/authors/id/J/JG/JGOFF/Perl6/CommonMark-0.0.5.tar.gz

[15:25] *** kaare__ joined
[15:25] *** xtreak joined
[15:34] *** trnh left
[15:37] *** trnh joined
[15:40] *** sharksoft joined
[15:41] <rindolf> timotimo: where is the offending code?

[15:41] *** skids joined
[15:41] <rindolf> timotimo: i'd like to debug it

[15:41] <timotimo> gotta find it in the irclog

[15:42] *** trnh left
[15:42] <timotimo> ok, gotta edit it again i think?

[15:44] <rindolf> timotimo: ah

[15:44] *** sharksoft left
[15:45] *** sharksoft joined
[15:46] <timotimo> oh i need to get primesieve again

[15:47] <rindolf> timotimo: i wrote a version wo needing primesieve

[15:47] *** jimav_ left
[15:47] <timotimo> i don't have that any more :D

[15:48] <rindolf> timotimo: ah

[15:49] <rindolf> timotimo: see https://paste.debian.net/1013068/

[15:50] <timotimo> um, huh

[15:50] <timotimo> i don't see the improper output any more

[15:51] <timotimo> 4181 0

[15:52] <timotimo> ret = 5468808766 ; 468808766

[15:52] <timotimo> is this correct for the last two lines of output?

[15:52] <timotimo> for 2..19

[15:53] <rindolf> timotimo: let me see

[15:54] <timotimo> https://gist.github.com/timo/c6f33191957d56cec1b3c7978b50de7e

[15:55] <rindolf> ret = 5468808766 ; 468808766

[15:58] *** khw joined
[15:59] *** trnh joined
[15:59] *** sharksoft left
[16:03] *** trnh left
[16:05] *** zakharyas left
[16:07] <rindolf> timotimo: you used ./primesieve which tripped me

[16:07] <timotimo> oh, right

[16:07] <timotimo> i just extracted it next to the script in /tmp

[16:10] *** zakharyas joined
[16:12] <cfa> morning all

[16:13] <cfa> so, silly question: i gather type smiley :D stands for definite (as in .DEFINITE); what does :U stand for?

[16:13] <moritz> undefined

[16:13] <cfa> is there a corresponding method?

[16:13] <cfa> or is it just !foo.DEFINITE?

[16:14] <cfa> (also, why definite/undefined rather than definite/indefinite or some such?)

[16:16] *** Kaiepi left
[16:18] <jdv79> anyone have a good snippet to wait for all new entries on a channel or timeout?

[16:20] <timotimo> cfa: you have a point, especially since you can give your types a custom "defined" method, but that's not what gets checked for :D or :U

[16:21] <cfa> also, while i'm asking dumb questions, here's a small documentation proposal: i think it could be made clearer that slicing adverbs on hashes etc. are defined on the operators themselves---i remember reading through the docs a while back and wondering where this magical :exists came from.

[16:21] *** regina joined
[16:22] <cfa> (knowing it's just an argument to the postcircumfix:<{ }> multi makes things way clearer)

[16:22] <cfa> timotimo: yeah. tbh i would've expected Str:D and Str:I (for indefinite)

[16:22] <timotimo> yeah, adverbs are kind of a funny syntactical feature

[16:23] <timotimo> the way it attaches to operators in expressions

[16:23] <cfa> yeah

[16:23] <cfa> but understanding that's what's happening clears some confusion up

[16:23] <cfa> like, the hash docs say: "Beware of the relatively loose precedence of operator adverbs, which may require you to add parentheses in compound expressions:"

[16:23] <cfa> but the idea that :exists is actually part of %hash<key> isn't necessarily clear

[16:24] <jdv79> mine is something like await Promise.anyof(Promise.in(10),start {...await $c...}) but that inner await seems to allow the outer to unblock...or someting

[16:24] <cfa> timotimo: but ofc, maybe it _is_ clear and i'm just slow :)

[16:25] <timotimo> the information is split very far apart i'd say

[16:25] <cfa> yeah

[16:25] <cfa> er, assuming that's re: docs

[16:26] <timotimo> yes

[16:27] <timotimo> the part about the individual slicing adverbs probably want to mention the connection to the operators themselves

[16:27] <cfa> that'd get my vote, yes

[16:28] <cfa> like, i answered this qn by grepping/acking src/core, which isn't ideal

[16:28] <timotimo> true

[16:28] <cfa> i'm speaking as a perennial p6 beginner here fwiw

[16:28] <timotimo> your perspective is very valuable

[16:29] <timotimo> and not in the "you are a valued customer" sense

[16:29] <cfa> i have another (p5) thing that i think could possible be made clearer too if that's of interest

[16:29] <cfa> though this one may have been discussed to death already

[16:30] <timotimo> i can't speak to p5 matters, i've written like 20 lines in total in my life :)

[16:31] <cfa> :)

[16:33] <cfa> well, i might as well mention here

[16:33] <cfa> https://docs.perl6.org/language/regexes

[16:33] <cfa> i think it'd be worth cautioning that a naive `my ($foo, $bar) = 'abcd' ~~ /(a) .* (b)/` won't do what p5 folks expect

[16:33] <cfa> since that pattern is super common in perl 5

[16:34] <cfa> and then advising on whether to use .list or switch to named captures

[16:34] <cfa> i get the impression that the latter are the p6 preference

[16:36] <timotimo> you can also write @("abcd" ~~ /(a) .* (b)/)

[16:36] <cfa> didn't consider that

[16:36] <cfa> but great; all this would be useful to clarify

[16:36] <cfa> (the @( ... ) example isn't on that page either)

[16:37] <cfa> tbh one of my big surprises coming from p5 was the massive change to matching

[16:37] <timotimo> yup, it was drastically redesigned

[16:37] <cfa> and that p5 example i gave above is pervasive (match, assign groups to declared scalars in list context)

[16:38] <cfa> tbh i still don't know whether i should be using .list / your @() example or $<foo>, $<bar>

[16:38] <timotimo> it's basically equivalent

[16:38] <cfa> the latter seems a bit more idiomatic though?

[16:39] <cfa> i find ().list pretty ugly

[16:39] <cfa> because it seems to say: we've given you a match object but now you need to do something else to get your groups bound

[16:39] <cfa> vs. just having them bound for immediate use

[16:39] <timotimo> doesn't destructuring also work here?

[16:40] <cfa> you tell me! i'm the ignoramus

[16:40] <jdv79> nevermind.  silent exception.

[16:40] <timotimo> my ($foo, $bar) := 'abcd' ~~ /(a) .* (b)/; say "foo is $foo"; say "bar is $bar";

[16:40] <timotimo> m: my ($foo, $bar) := 'abcd' ~~ /(a) .* (b)/; say "foo is $foo"; say "bar is $bar";

[16:40] <camelia> rakudo-moar e9cff7954: OUTPUT: «Unexpected named argument '' passed␤  in block <unit> at <tmp> line 1␤␤»

[16:40] <timotimo> oops :)

[16:40] <cfa> np

[16:40] <timotimo> well, that's not how

[16:40] <cfa> but yeah, all these questions could be answered on that regex doc i think?

[16:40] <timotimo> m: ('abcd' ~~ /(a) .* (b)/).Capture.say

[16:40] <camelia> rakudo-moar e9cff7954: OUTPUT: «｢ab｣␤ 0 => ｢a｣␤ 1 => ｢b｣␤»

[16:41] <timotimo> m: ('abcd' ~~ /(a) .* (b)/).Capture.perl.say

[16:41] <camelia> rakudo-moar e9cff7954: OUTPUT: «Match.new(list => (Match.new(list => (), made => Any, pos => 1, hash => Map.new(()), orig => "abcd", from => 0), Match.new(list => (), made => Any, pos => 2, hash => Map.new(()), orig => "abcd", from => 1)), made => Any, pos => 2, hash => Map.new(("" …»

[16:41] <cfa> like, i'd imagine you don't want every page of docs to be about changes from p5

[16:41] <cfa> but still

[16:41] <timotimo> well, we do have learn-p6-from-p5 documents

[16:41] <cfa> yeah

[16:41] <cfa> so maybe the regex page could give further advice on how to do capturing idiomatically

[16:42] <cfa> and the from p5 page could clarify some of this stuff

[16:42] <cfa> i also ran into an issue with an early p6 test where i used a Str param in the signature and tried to pass a match group in

[16:43] <cfa> (though ~ resolved it, it was still a surprise)

[16:43] <cfa> sorry all, i'm just dumping stuff i've run into

[16:43] <timotimo> you can use coercive parameters for this purpose :)

[16:43] <sena_kun> m: https://gist.github.com/Altai-man/b5b71a7418590b4ac7ac58979d93f171

[16:44] <camelia> rakudo-moar e9cff7954: OUTPUT: «0␤1␤Promise.new(scheduler => ThreadPoolScheduler.new(initial_threads => 0, max_threads => 64, uncaught_handler => Callable), status => PromiseStatus::Planned)␤too bad␤»

[16:44] <cfa> timotimo: eg?

[16:44] <sena_kun> Looks like a bug to me, isn't it? The promise should be Kept there.

[16:44] *** SyrupThinker joined
[16:44] <timotimo> m: sub test(Str() $thingie) { say "here's the thing: $thingie; $thingie.perl()" }; test("hello" ~~ /.../)

[16:44] <camelia> rakudo-moar e9cff7954: OUTPUT: «here's the thing: hel; "hel"␤»

[16:45] <cfa> timotimo: hunh; guess i need to look that up

[16:47] <timotimo> sena_kun: it could be the closed thing only sets itself to true once you've received the last piece?

[16:47] <timotimo> m: my $c = Channel.new; $c.send(1); $c.send(2); $c.close; say $c.closed.status; .say for $c.List; say $c.closed.status

[16:47] <camelia> rakudo-moar e9cff7954: OUTPUT: «Planned␤1␤2␤Kept␤»

[16:48] <timotimo> sena_kun: ^- this will be the reason

[16:48] <sena_kun> timotimo, closed returns a promise, but it isn't kept on `close` call for some reason(if I understood you correctly).

[16:48] <sena_kun> ah.

[16:48] <timotimo> correct, it gets kept once the last item has been received on the other end

[16:50] <sena_kun> timotimo, thanks.

[16:51] <sena_kun> jdv79, I think you may want something like https://gist.github.com/Altai-man/b5b71a7418590b4ac7ac58979d93f171

[16:52] <sena_kun> dunno if it's any better though

[16:52] <timotimo> i do believe we have something in the ecosystem for cancellable promises or something

[16:52] <timotimo> buggable: eco Cancel

[16:52] <buggable> timotimo, Nothing found

[17:14] <rindolf> timotimo:  it seems to yield the correct result now (even for 2..24) but it is still very slow

[17:23] *** noreem joined
[17:27] <cfa> another documentation issue: nothing for 'unit' in the search dropdown

[17:28] <cfa> (this should probably lead to language/modules.) i'm also not sure whether 'unit sub MAIN' is documented anywhere

[17:31] *** cognominal joined
[17:37] *** xtreak left
[17:46] *** cdg joined
[17:50] <titsuki> m: class A {}; grammar B is A { }; say B ~~ Grammar

[17:50] <camelia> rakudo-moar e9cff7954: OUTPUT: «False␤»

[17:51] <titsuki> is this a bug?

[17:55] <moritz> I think I submitted it as a bug years ago :-)

[17:55] <titsuki> moritz: Thanks! I see.

[18:04] *** zakharyas left
[18:06] *** zakharyas joined
[18:07] *** cdg left
[18:07] *** cdg joined
[18:08] <Ulti> can someone explain to me why the ecosystem is moving to CPAN and I assume requires PAUSE?

[18:09] <Ulti> given how awful my experience has been with that system historically and right this second trying to recover my ancient account

[18:10] <Ulti> I have worked with Perl 5 for 15 years and not once put something on CPAN, that Perl 6 made it incredibly nice to author modules was a reason I produced any

[18:11] <moritz> the reason is mostly that github isn't a CDN, so we shouldn't try to scale while relying on github

[18:11] <moritz> and given that Perl already has a module distribution system, why not use it?

[18:11] <moritz> and maybe we didn't know about your awful experience...

[18:11] *** cdg left
[18:13] <Ulti> dunno just feels odd I can entirely agree the way its done at the moment with the github registry is really bad

[18:24] *** zakharyas left
[18:25] *** zakharyas joined
[18:33] *** domidumont joined
[18:38] *** natrys left
[18:38] *** lizmat joined
[18:48] *** domidumont left
[18:49] <Geth> ¦ doc: b92cf18ab0 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/HomePage.pod6

[18:49] <Geth> ¦ doc: Replaced dated reference to speculations with roast

[18:49] <Geth> ¦ doc: 

[18:49] <Geth> ¦ doc: Closes https://github.com/perl6/doc/issues/1817

[18:49] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b92cf18ab0

[18:49] *** Zoffix joined
[18:49] <Zoffix> cfa: it'd be more helpful if you reported problems with documentation in the repository instead: https://github.com/perl6/doc

[18:50] <Zoffix> cfa: if you're interested, we can get you a commit bit, so you could fix the problems too.

[18:51] <Zoffix> Ulti: I wouldn't call it "moving". Rather we have two ecosystems: CPAN (paused based) and p6c (gitlab and github based)

[18:51] *** natrys joined
[18:52] *** zakharyas left
[18:52] <Zoffix> Ulti: and I suggest using some command line utility to upload to PAUSE (App::Mi6 can do it), which significantly ameliorates the awfulness of dealing with PAUSE.

[18:53] * Zoffix authors 200+ CPAN modules and all that was involved is running `dzil release` command once

[18:54] *** zakharyas joined
[18:57] <Zoffix> cfa: I'd say the idiomatic equivalent of P5's `my ($foo, $bar) = 'abcd' ~~ /(a) .* (b)/` would often be using named captures instead: `'abcd' ~~ /$<foo>=a .* $<bar>=d/;`

[18:57] <Zoffix> m: 'abcd' ~~ /$<foo>=a .* $<bar>=d/;  say $<foo bar>

[18:57] <camelia> rakudo-moar 5e462e125: OUTPUT: «(｢a｣ ｢d｣)␤»

[18:57] <Zoffix> m: 'abcd' ~~ /$<foo>=a .* $<bar>=d/;  say ~«$<foo bar>

[18:57] <camelia> rakudo-moar 5e462e125: OUTPUT: «(a d)␤»

[18:58] <Zoffix> cfa: or .comb

[18:58] <Zoffix> m: say "as2134dsad r3w45w3rwrfe 3245".comb: /\d+/

[18:58] <camelia> rakudo-moar 5e462e125: OUTPUT: «(2134 3 45 3 3245)␤»

[18:58] <Ulti> isnt actually creating a PAUSE account a human limited process though?

[18:58] <Ulti> or has that changed

[18:59] <Zoffix> Yeah, I think that's still handled by a human.

[19:02] *** darutoko left
[19:05] <Zoffix> ZzZombo: "yeah, why the &CORE::infix:<orelse>?". Because that's what .perl of a handled Failure object is. The `handled` attribute is not publicly twirlable, so the orelse call (that calls .defined) is used to set .handled to True

[19:05] *** sharksoft joined
[19:08] <Zoffix> s: &dd

[19:08] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/fb882d498/src/core/Any.pm6#L586

[19:09] <cfa> Zoffix: thanks

[19:10] <cfa> Zoffix: i guess the difference there is that $/ will get clobbered but the subsequent match, so you need to assign $<foo> and $<bar> to (say) $foo and $bar 

[19:10] <cfa> but the => by the

[19:10] <cfa> or rather, by a

[19:11] <Zoffix> ZzZombo: looks like that `try` in &dd causes all Failures to get handled. Gonna commit a fix shortly

[19:11] <cfa> and noted re: suggestions for doc fixes; i guess i'm just discussing stuff here in case i'm stupidly missing stuff already documented rather than spamming the doc repo with issues

[19:11] <Zoffix> cfa: yeah, that's one of the issues.

[19:14] <Zoffix> m: my ($foo, $bar) := ~«'abcd'.match: /(.)..(.)/; dd [$foo, $bar]

[19:14] <camelia> rakudo-moar 5e462e125: OUTPUT: «["a", "d"]␤»

[19:14] <cfa> i'll admit that's a bit cryptic

[19:15] <Zoffix> :D

[19:15] <Zoffix> « is a hyper operator and it's hypering prefix ~, which stringifies stuff. 

[19:15] <Zoffix> m: my ($foo, $bar) = 'abcd'.match: /(.)..(.)/; say [$foo, $bar]

[19:15] <camelia> rakudo-moar 5e462e125: OUTPUT: «[｢abcd｣␤ 0 => ｢a｣␤ 1 => ｢d｣ (Any)]␤»

[19:16] <Zoffix> m: my ($foo, $bar) = .list with 'abcd'.match: /(.)..(.)/; say [$foo, $bar]

[19:16] <camelia> rakudo-moar 5e462e125: OUTPUT: «[｢a｣ ｢d｣]␤»

[19:19] <cfa> i guess this is okay too

[19:19] <cfa> m: ('abcd' ~~ /(a) .* (d)/).map: ~*

[19:19] <camelia> rakudo-moar 5e462e125: ( no output )

[19:19] <cfa> hunh

[19:19] <Zoffix> m: say ('abcd' ~~ /(a) .* (d)/).map: ~*

[19:19] <camelia> rakudo-moar 5e462e125: OUTPUT: «(a d)␤»

[19:20] <cfa> oh, camelia won't display the return value?

[19:20] <cfa> m: True

[19:20] <camelia> rakudo-moar 5e462e125: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant value True in sink context (line 1)␤»

[19:20] <Zoffix> Right

[19:20] <cfa> derp

[19:20] <cfa> other than conciseness, is ~<< preferable to .map: ~* here?

[19:21] <cfa> (to be honest i find both obfuscate the match a little)

[19:21] * Zoffix doesn't see reasons other that conciseness

[19:22] *** noreem left
[19:22] <Zoffix> In this particular case, I mean. The » and .map aren't equivalent: https://docs.perl6.org/language/traps#Using_%C2%BB_and_map_interchangeably

[19:23] * cfa nods

[19:23] <Zoffix> m: my ($foo, $bar) = m/(.)..(.)/».Str with 'abcd'; say [$foo, $bar]

[19:23] <camelia> rakudo-moar 5e462e125: OUTPUT: «[a d]␤»

[19:24] <cfa> cute

[19:24] <Zoffix> m: -> $ (Str() $foo, Str() $bar) { say [$foo, $bar] }('abcd' ~~ /(.)..(.)/)

[19:24] <camelia> rakudo-moar 5e462e125: OUTPUT: «Unexpected named argument '' passed in sub-signature␤  in block <unit> at <tmp> line 1␤␤»

[19:24] <cfa> it'd be nice to have an adverb that handles this i guess

[19:24] <Zoffix> gah

[19:25] <Zoffix> c: 2017.02 -> $ (Str() $foo, Str() $bar) { say [$foo, $bar] }('abcd' ~~ /(.)..(.)/)

[19:25] <committable6> Zoffix, ¦2017.02: «Unexpected named argument '' passed in sub-signature␤  in block <unit> at /tmp/jAEASjSpD4 line 1␤␤ «exit code = 1»»

[19:25] <cfa> gah to my crappy suggestion or the output?

[19:25] <Zoffix> The output. I didn't expect a nameless named arg :)

[19:25] <cfa> ha ha

[19:25] <Zoffix> But I'm not a fan of adding an adverb either :} 

[19:25] <cfa> ah, i figured

[19:44] <cfa> Zoffix: filed two doc tickets

[19:46] <Zoffix> cfa: sent you an invite to perl6 GitHub org. You can accept it on https://github.com/perl6/  That gives you commit bit to most of our repos, include docs repo, so you can commit whatever fixes you can directly

[19:46] <cfa> wow, thanks

[19:52] *** comborico1611 joined
[19:53] *** buggable left
[19:53] *** buggable joined
[19:53] *** ChanServ sets mode: +v buggable

[19:54] *** mniip joined
[19:58] *** sharksoft left
[19:58] *** buggable left
[19:59] *** buggable joined
[19:59] *** ChanServ sets mode: +v buggable

[20:11] <Zoffix> e: dd $*W

[20:11] <evalable6> Zoffix, rakudo-moar b5100d6a2: OUTPUT: «Failure.new(exception => X::Dynamic::NotFound.new(name => "\$*W"), backtrace => Backtrace.new)␤»

[20:11] <Zoffix> ZzZombo: fixed ^. Also, the $*W is available only in compile time (and it's not a user-supported object, so if you use it, stuff may break without notice)

[20:11] <Zoffix> e: BEGIN dd $*W

[20:11] <evalable6> Zoffix, rakudo-moar b5100d6a2: OUTPUT: «(Perl6::World without .perl method)␤»

[20:12] *** Zoffix left
[20:19] *** zakharyas left
[20:25] *** regina left
[20:26] *** Kaiepi joined
[20:31] *** cognominal left
[20:35] *** pmurias_ joined
[20:35] *** pmurias left
[20:35] *** pmurias_ is now known as pmurias

[20:35] *** freeberz_ left
[20:37] <pmurias> how much does Rakudo support deploying apps/scripts on windows?

[20:37] *** freeberz joined
[20:38] *** cognominal joined
[20:40] *** vike left
[20:40] <Geth> ¦ whateverable: cee3f5cfee | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable.pm6

[20:40] <Geth> ¦ whateverable: Print $*PID when testing

[20:40] <Geth> ¦ whateverable: 

[20:40] <Geth> ¦ whateverable: So that you can attach gdb and other stuff to it.

[20:40] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/cee3f5cfee

[20:42] *** cog_ joined
[20:43] *** cognominal left
[20:44] <MasterDuke> buggable: eco wix

[20:44] <buggable> MasterDuke, App::InstallerMaker::WiX 'Tool to make basic WiX installers for Perl 6 apps, bundling MoarVM/Rakudo.': https://github.com/jnthn/p6-app-installermaker-wix

[20:45] *** rindolf left
[20:45] <MasterDuke> pmurias: ^^^ 

[20:49] *** cdg joined
[20:50] *** pmurias left
[20:53] *** cdg left
[20:56] *** rindolf joined
[21:00] *** stmuk joined
[21:00] *** vike joined
[21:01] *** stmuk_ left
[21:04] *** buggable left
[21:12] *** wamba left
[21:21] *** pmurias joined
[21:23] <Geth> ¦ whateverable: 6d369380f3 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable.pm6

[21:23] <Geth> ¦ whateverable: Time out later if we're downloading builds

[21:23] <Geth> ¦ whateverable: 

[21:23] <Geth> ¦ whateverable: Most tests have a timeout, and some of these tests need tens of rakudo

[21:23] <Geth> ¦ whateverable: builds (which we have to download if we're running locally). With this

[21:23] <Geth> ¦ whateverable: change it will ask the test suite to wait some extra time which is

[21:23] <Geth> ¦ whateverable: roughly equal to the amount of time we spend on fetching the builds.

[21:23] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/6d369380f3

[21:29] *** Kaiepi left
[21:30] *** Kaiepi joined
[21:36] <pmurias> MasterDuke: thanks

[22:04] *** SyrupThinker left
[22:08] <rindolf> timotimo: here?

[22:08] <rindolf> timeless: your new program generates the right results

[22:08] <rindolf> timeless: sorry

[22:13] *** robertle left
[22:18] *** khw left
[22:20] *** natrys left
[22:21] *** AlexDaniel left
[22:22] <timotimo> i'm here

[22:26] *** lookatme left
[22:26] *** lookatme joined
[22:29] <MasterDuke> rindolf: fwiw, this https://gist.github.com/MasterDuke17/cb74d9a8a09633794158e48e136a91f7 is the version i was working on (i cut out the primes just to make pasting it easier)

[22:30] <MasterDuke> if RT #128655 is fixed it should take around 275s

[22:30] <synopsebot> RT#128655 [open]: https://rt.perl.org/Ticket/Display.html?id=128655 [OPTIMIZER] Mixup in candidates through optimizer

[22:32] <rindolf> MasterDuke: ah

[22:32] <MasterDuke> and if somebody figures out that native array access optimization, you won't need to do the `my int $a = @d[$m]; my int $b = @d[$m-$p]` business

[22:39] *** sharksoft joined
[22:42] *** comborico1611 left
[22:52] *** sharksoft left
[22:52] <timotimo> eh. i'd like to see how many visitors i get for my blog, but it doesn't seem like ghost has something for that built-in

[22:52] <timotimo> and i'm not sure if i should put google analytics in

[22:53] <thowe> what's your blog URL?

[22:53] <timotimo> wakelift.de

[22:54] <timotimo> piwik aka matomo might be good?

[22:58] *** buggable joined
[22:58] *** ChanServ sets mode: +v buggable

[23:01] *** Zoffix joined
[23:01] <Zoffix> rindolf: so what's this mystery program of yours that everyone seems to be optimizing? What's the full source code?

[23:02] <timotimo> i think it's a project euler solution?

[23:03] <rindolf> Zoffix: wait a sec

[23:03] *** sena_kun left
[23:04] <rindolf> Zoffix: see https://github.com/shlomif/project-euler/tree/master/project-euler/618 and https://projecteuler.net/problem=618

[23:05] <Zoffix> rindolf: I only see P5 and Python versions...

[23:05] <rindolf> Zoffix: i have a p6 version too

[23:05] <Zoffix> rindolf: well, that's what I was asking about.

[23:06] <rindolf> Zoffix: see https://gist.github.com/timo/c6f33191957d56cec1b3c7978b50de7e

[23:07] *** cdg joined
[23:08] <Zoffix> m: use QAST:from<NQP>; BEGIN $*W.compile_time_evaluate: $, QAST::Op.new: :op<callmethod>, :name<new>, QAST::WVal.new(:value(Buf)), QAST::Op.new: :op<bitand_i>,  QAST::IVal.new(:value(10)), QAST::IVal.new: :value(255) }

[23:08] <camelia> rakudo-moar b5100d6a2: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a BEGIN␤at <tmp>:1␤Exception details:␤  Type check failed in initializing element #0 to Buf; expected uint8 but got Int (10)␤    in code  at <tmp> line 1…»

[23:08] <Zoffix> Doesn't look like RT#128655 got much to do with the actual ops candidates

[23:08] <synopsebot> RT#128655 [open]: https://rt.perl.org/Ticket/Display.html?id=128655 [OPTIMIZER] Mixup in candidates through optimizer

[23:09] * Zoffix gonna play around with it a bit

[23:09] *** Zoffix left
[23:10] <Geth> ¦ perl6-examples: 6e7a4b07ed | (Shlomi Fish)++ | categories/euler/prob618-shlomif-timotimo.p6

[23:10] <Geth> ¦ perl6-examples: Add functional, but slow solution to E618.

[23:10] <Geth> ¦ perl6-examples: 

[23:10] <Geth> ¦ perl6-examples: Based on

[23:10] <Geth> ¦ perl6-examples: https://github.com/shlomif/project-euler/tree/master/project-euler/618 .

[23:10] <Geth> ¦ perl6-examples: review: https://github.com/perl6/perl6-examples/commit/6e7a4b07ed

[23:11] <MasterDuke> Zoffix: lines 41 and 48

[23:12] *** cdg left
[23:13] *** Zoffix joined
[23:13] <Zoffix> MasterDuke: what's that? The ops in the last gist?

[23:14] <MasterDuke> when i first made all the variables ints it didn't get any faster, because there is only an Int,Int candidate for the bit-ops (and the array accesses in the math expressions also make things Int)

[23:14] <MasterDuke> yeah

[23:15] <MasterDuke> i uncommented the int,int versions of the bit-ops in Int.pm6, rebuilt rakudo, pulled those array accesses out into their own int variables and it took one fourth the time

[23:16] <Zoffix> neat

[23:18] *** konsolebox left
[23:19] *** konsolebox joined
[23:22] <MasterDuke> i got the correct results, but then i did try running a spectest and there were failures, so there's definitely still something up with those ops

[23:23] <timotimo> but of course ublock origin blocks piwik/matomo by default %)

[23:24] <timotimo> https://wakelift.de/2018/03/05/delays-and-delights/  -  my first TPF grant report post is up now

[23:25] <Zoffix> \o/

[23:25] <timotimo> notable6: help

[23:25] <notable6> timotimo, Like this: notable6: weekly rakudo is now 10x faster # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Notable

[23:25] <timotimo> notable6: weekly timo's first tpf grant report blog post https://wakelift.de/2018/03/05/delays-and-delights/

[23:25] <notable6> timotimo, Noted!

[23:26] <Zoffix> timotimo++

[23:34] <Zoffix> m: use nqp; Buf.new: nqp::bitand_i(10, 10)

[23:34] <camelia> rakudo-moar b5100d6a2: OUTPUT: «Type check failed in initializing element #0 to Buf; expected uint8 but got Int (10)␤  in block <unit> at <tmp> line 1␤␤»

[23:34] <Zoffix> m: use nqp; Buf.new: nqp::hllize(nqp::bitand_i(10, 10))

[23:34] <camelia> rakudo-moar b5100d6a2: ( no output )

[23:34] <Zoffix> m: use nqp; dd Buf.new: nqp::hllize(nqp::bitand_i(10, 10))

[23:34] <camelia> rakudo-moar b5100d6a2: OUTPUT: «Buf.new(10)␤»

[23:36] *** pmurias left
[23:36] <Zoffix> Wonder if I should stick that into Buf or as a more general solution 

[23:38] <Zoffix> guess Buf, for now. It reaches out into List's guts to get this explosion, so I guess there's less chance a lost of stuff is similarly affected

[23:42] <Zoffix> .oO( how the hell did @Zoffix[2017] think the bug was in the dispatcher :S )

[23:42] *** |oLa|2 left
[23:59] <Zoffix> MasterDuke: were the test failures you got in t/spec/S03-operators/bit. ?

