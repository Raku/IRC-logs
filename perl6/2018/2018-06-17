[00:00] *** Xliff joined
[00:00] <Xliff> m: "class GObject" ~~ /

[00:00] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´5===SORRY!5===‚ê§Regex not terminated.‚ê§at <tmp>:1‚ê§------> 3"class GObject" ~~ /7‚èè5<EOL>‚ê§Regex not terminated.‚ê§at <tmp>:1‚ê§------> 3"class GObject" ~~ /7‚èè5<EOL>‚ê§Unable to parse regex; couldn't find final '/'‚ê§at <tmp>:1‚ê§--‚Ä¶¬ª

[00:01] <Xliff> m: my rule c { 'class' \w+ }; "class GObject" ~~ /<c>/; $/.gist.say 

[00:01] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´ÔΩ¢class GObjectÔΩ£‚ê§ c => ÔΩ¢class GObjectÔΩ£‚ê§¬ª

[00:01] <Xliff> m: my rule c { 'class' [\w+]* % '::' }; "class GObject" ~~ /<c>/; $/.gist.say 

[00:01] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´ÔΩ¢class GObjectÔΩ£‚ê§ c => ÔΩ¢class GObjectÔΩ£‚ê§¬ª

[00:01] <Xliff> m: my rule c { 'class' [\w+]* % '::' }; "class GObject::A::C" ~~ /<c>/; $/.gist.say 

[00:01] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´ÔΩ¢class GObject::A::CÔΩ£‚ê§ c => ÔΩ¢class GObject::A::CÔΩ£‚ê§¬ª

[00:04] *** entonian left
[00:05] *** hami left
[00:06] <kjk> Zoffix: I see. thanks

[00:20] <kjk> hmm, maybe that (False or Empty is returned for the cases not covered by a conditional construct) should be added to the traps section in the doc?

[00:20] <Xliff> If I have a rule definition, and I do _not_ want the auto whitespace behavior to work for a time, is there a way I can block that?

[00:20] <Zoffix> ¬Ø\_(„ÉÑ)_/¬Ø   you got the commit bit to the docs repo, right?

[00:21] <timotimo> Xliff: yes, you can use :!s for that or :!sigspace

[00:21] <Zoffix> Xliff: it's :!s 

[00:24] *** sarna left
[00:26] <Xliff> And would ":s" be enough to turn sigspace back on?

[00:26] <timotimo> yes

[00:26] <Xliff> That doesn't seem to be working.

[00:26] <timotimo> can you demonstrate?

[00:27] <timotimo> i'm not tip top on my sigspace, i tend to not use it at all to be honest

[00:27] <Zoffix> Xliff: scope the :!s

[00:27] <Zoffix> m: say "a b c def g e h" ~~ /:s a b c [:!s "d" "e" "f" ] g e h/

[00:27] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´ÔΩ¢a b c def g e hÔΩ£‚ê§¬ª

[00:35] *** markoong left
[00:37] *** rindolf joined
[00:46] *** zachk left
[01:06] *** SCHAPiE joined
[01:08] *** Kaiepi left
[01:09] *** ufobat_ left
[01:12] *** atweiden-air joined
[01:14] <atweiden-air> in attempting to parameterize roles, i'm wondering about something

[01:15] <atweiden-air> why is this ok: http://ix.io/1dBA

[01:15] <atweiden-air> but this is not ok: http://ix.io/1dBB

[01:15] <atweiden-air> and is this the expected behavior?

[01:25] *** llfourn joined
[01:28] *** sauvin_ is now known as sauvin

[01:34] <Zoffix> atweiden-air: mostly guessing here: but in the working version, the `T` is known to be a type capture so it's resolved to proper type later on. In the non-working version, you're using a variable which at compile time is a `Mu`, so it's trying to find a `Mu` parametarized variant and it ain't present

[01:36] <Zoffix> Adding `[Mu]` variants of those roles makes it work and BEGIN-dumping `$type` shows it to be `Mu`. If you BEGIN-dump the `T`, it dumps as some low-level object without `.perl`, which probaby what makes the thing tick

[01:37] *** cowens joined
[01:43] <atweiden-air> 10-4 zoffix

[01:45] *** Kaiepi joined
[01:52] *** Xliff left
[01:53] *** Xliff joined
[02:02] *** molaf left
[02:03] <kjk> is there a way to reload a module from the REPL?

[02:06] * Zoffix doubts

[02:09] <b2gills> maybe EVALFILE

[02:12] *** atweiden-air left
[02:14] *** molaf joined
[02:28] *** eliasr left
[02:39] <Zoffix> Comments on http://news.perlfoundation.org get lost.

[02:39] <Zoffix> I recall someone saying their comment on my grant was lost and now I made a comment on http://news.perlfoundation.org/2018/06/grant-proposal-introduction-to.html#comments before there were any comments, but it didn't show up when 2 comments became visible and now there are 3 comments, but mine's missing

[02:40] <Zoffix> .tell [Coke] FYI it appears TPF's grant commenting page is losing some comments and it's been happening for possibly ~3m http://colabti.org/irclogger/irclogger_log/perl6?date=2018-06-17#l54

[02:40] <yoleaux> Zoffix: I'll pass your message to [Coke].

[02:42] *** Kaiepi left
[02:46] *** perlpilot left
[03:08] *** Zoffix left
[03:17] *** Kaiepi joined
[03:30] *** Sgeo joined
[03:31] *** xtreak joined
[03:33] *** Sgeo__ left
[03:35] *** Kaiepi left
[03:36] *** Kaiepi joined
[03:51] <MasterDuke> yeah, i commented on a proposal (i've forgotten which one exactly) and it never showed up

[04:12] *** xtreak left
[04:32] *** ZofBot joined
[04:32] *** ChanServ sets mode: +v ZofBot

[04:33] *** xtreak joined
[04:39] *** ZofBot left
[04:39] *** ZofBot joined
[04:39] *** ChanServ sets mode: +v ZofBot

[04:54] *** Zoffix joined
[05:07] <Zoffix> m: hyper for ^$*TOLERANCE { try ÔΩ¢constant $*Z = <z>ÔΩ£.EVAL;  try say substr ~$!, (^‚àû .grep: *.is-prime)[chars(~$!)/$*THREAD.id] and last }

[05:07] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´moron‚ê§¬ª

[05:07] <Zoffix> :o

[05:07] <Zoffix> ^_^

[05:15] *** kurahaupo left
[05:15] *** kurahaupo_ joined
[05:18] *** benjikun2 is now known as benjikun

[05:18] <benjikun> https://imgur.com/a/8b0qiy7

[05:23] <Zoffix> no face? :)

[05:24] <benjikun> not sure how to make one look natural

[05:24] <Zoffix> I like the colours. Could try one of regular camelias with them for Alt-Variants https://github.com/perl6/marketing/tree/master/LOGOs/Camelia/Alt-Variants

[05:25] <benjikun> I'll give it a go, one minute

[05:25] <ingy> is the `perl6` binary installed as a name not containing /perl/?

[05:26] <ingy> ie I don't see `rakudo` in my PATH as an alias

[05:26] <Zoffix> ingy: it's not really a binary. Just a shell script for calling something like: exec /home/zoffix/R/install/bin/moar  --execname="$0" --libpath="." --libpath="blib" --libpath="/home/zoffix/R/install/share/nqp/lib" --libpath="/home/zoffix/R/install/share/nqp/lib" /home/zoffix/R/rakudo/perl6.moarvm --nqp-lib=blib "$@"

[05:26] <Zoffix> ingy: ah, no, no "rakudo" aliases.

[05:27] <ingy> that's a shame :)

[05:27] * Zoffix points to https://github.com/rakudo/rakudo/issues/new

[05:27] <Zoffix> :)

[05:28] <ingy> check this out: https://gist.github.com/ingydotnet/041f2746fd3bf3d7333ccba32c7adeec

[05:29] <ingy> I can run testml (or any other language) with perl5 or prove

[05:29] <ingy> as long as the $bin-name !~~ /perl/

[05:29] <Zoffix> heh

[05:30] <ingy> so you could write test.t with '#!/usr/bin/env p6'

[05:30] <ingy> and then just 'prove t/*.t'

[05:31] <ingy> no --exec

[05:31] <ingy> that's exactly why testml has a testml-pl5 and testml-pl6 aliases

[05:31] <Zoffix> `zef test` is shorter :)

[05:32] <ingy> https://github.com/testml-lang/testml/tree/master/bin

[05:32] <ingy> but prove is everywhere

[05:33] <ingy> and I can have a t/ suite with perl6, perl5, bash tests whatevr

[05:33] <ingy> can zef handle that?

[05:34] <Zoffix> no idea

[05:34] <ingy> I've bee doing that for years: https://github.com/ingydotnet/json-bash/tree/master/test

[05:34] <ingy> prove test  # bash tap tests

[05:37] <ingy> when people see a t/ dir in anything perl they think `prove` not `zef`, a million to one

[05:38] <kent\n> if you go down that line of logic, you're gonna find that same group of people who think 'perl' means "perl 5"

[05:39] <kent\n> expecting perl5 tools to work with perl6 would be the anomalous expectation

[05:40] <ingy> perhaps, but expecting prove to work anywhere is probably a lot more common tha ever having heard of zef

[05:40] <ingy> and prove is already everywhere that perl is

[05:41] <kent\n> if you're working with a perl6 project ... expecting to not have a perl6 installation would be ... strange.

[05:41] <ingy> all I'm saying is that if perl6 installed an alias p6 and people wrote their .t tests with it

[05:41] <ingy> then prove (and zef) works

[05:42] <ingy> yeah but I never heard of zef until a week ago nor did I know it ran tests until 5 minutes ago

[05:42] <Zoffix> :D

[05:42] <ingy> and it will be replaced by zzz in a year

[05:43] <ingy> way easier to type

[05:43] <ingy> ;)

[05:43] <kent\n> its only the recommended package mangler for perl6, so *shrug* ( eg: its akin to not knowing about the 'cpan' tool )

[05:44] <kent\n> https://perl6.org/getting-started/ # documented here

[05:45] <benjikun> Zoffix: added some more variants https://imgur.com/a/8b0qiy7

[05:45] *** Kaiepi left
[05:46] <ingy> I guess I'll have to patch zef to run foo.t with '#!/usr/bin/env testml-pl6' content

[05:51] <Zoffix> benjikun: needs a face :) Right now it looks as much a flower as a butterfly

[05:52] <ingy> or antenae

[05:54] <benjikun> Zoffix: I like how actual butterfly heads look but I don't think I can recreate that much lol

[05:54] <benjikun> https://1d59b73swr1f1swu2v451xcx-wpengine.netdna-ssl.com/wp-content/uploads/strategy/36c34a8aaa1965360f5a6e1eb274ce5d/800pxhelioconius_sp_richard_bartz.jpg

[05:54] <benjikun> like that

[05:56] <ingy> I just cloned [email@hidden.address] and ran `zef test` and it barfed

[05:57] <ingy> PERL6LIB=lib prove -lv --exec=perl6 t  # worked

[05:58] <ingy> anywho...

[05:59] <ingy> I should zzzleep

[05:59] <ingy> yapc is tomorrow

[06:01] <benjikun> you're going to that?

[06:01] <benjikun> wish I could

[06:03] <ingy> I wish you could too!

[06:04] <benjikun> :)

[06:06] *** psychoslave_ joined
[06:09] *** xtreak left
[06:11] *** xtreak joined
[06:22] *** psychoslave_ left
[06:46] *** hythm_ joined
[07:02] <Xliff> What is the best way to convert Int to int32?

[07:07] *** wamba joined
[07:11] *** darutoko joined
[07:17] <moritz> my Int $x = 12345; my int32 $y = $x

[07:17] <moritz> m: my Int $x = 12345; my int32 $y = $x; say $y

[07:17] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´12345‚ê§¬ª

[07:25] *** Xliff left
[07:26] *** domidumont joined
[07:33] *** domidumont left
[07:33] *** domidumont joined
[07:34] *** sarna joined
[07:37] *** hythm_ left
[07:39] <Geth> ¬¶ doc: Kaiepi++ created pull request #2103: Fix p6doc build errors

[07:39] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2103

[07:49] <sarna> hi o/

[07:57] *** wamba left
[08:00] *** xtreak left
[08:15] <Geth> ¬¶ doc: f5cb4f034f | (Christian Bartolom√§us)++ (committed using GitHub Web editor) | doc/Language/concurrency.pod6

[08:15] <Geth> ¬¶ doc: Use different case for value and method name

[08:15] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/f5cb4f034f

[08:15] <synopsebot_> Link: https://doc.perl6.org/language/concurrency

[08:25] *** kurahaupo joined
[08:28] *** kurahaupo_ left
[08:28] *** sarna_ joined
[08:50] *** dct joined
[08:57] <sarna_> m: my %foo = %(<1 2 3> => "foo"); %foo<<1 2 3>>

[08:57] <camelia> rakudo-moar b34d5231e: ( no output )

[08:58] <sarna_> m: my %foo = %(<1 2 3> => "foo"); say %foo<<1 2 3>>

[08:58] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´((Any) (Any) (Any))‚ê§¬ª

[08:58] <sarna_> what's going on guys D:

[08:58] *** Xliff joined
[08:58] <sarna_> one can't create hashes with lists as keys?

[08:58] *** Xliff left
[08:59] *** Xliff joined
[09:02] *** domidumont left
[09:03] <tobs> sarna_: class Hash: Mapping from strings to itemized values

[09:04] <sarna_> tobs: ah well, thank you

[09:04] <tobs> m: my Hash[Int,List] $h .= new; $h{$[1,2,3,4]} = 5; say $h.keys

[09:04] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´([1 2 3 4])‚ê§¬ª

[09:04] <tobs> sarna_: see also https://docs.perl6.org/language/hashmap#Non-string_keys_(object_hash)

[09:05] <sarna_> tobs: thanks _/\_

[09:16] *** eliasr joined
[09:24] *** ufobat_ joined
[09:31] <sarna_> `Invocant of method 'AT-KEY' must be an object instance of type 'Hash[Hash,Str]', not a type object of type 'Hash[Hash,Str]'.  Did you forget a '.new'?`

[09:31] <sarna_> what could this error mean? I'm taking a hash as an argument to a function, and the error points at when I get values from it

[09:40] <moritz> sarna_: it seems you have passed a type object and not an actual hash to it

[09:40] <moritz> sarna_: try printing out %yourhash.defined

[09:40] *** dct left
[09:41] <sarna_> moritz: it gives me a True

[09:41] <moritz> sarna_: is this a nested hash access, by chance?

[09:42] <sarna_> moritz: precisely

[09:42] <moritz> sarna_: then try at the second level too

[09:42] <AlexDaniel> benjikun: soo‚Ä¶ will you commit these to https://github.com/perl6/marketing/tree/master/LOGOs/Camelia/Alt-Variants ? Or if not, can we have an .svg with a specified license? :)

[09:42] <sarna_> moritz: oh! I know where I goofed up, thank you :)

[09:42] <AlexDaniel> I feel like these could be useful in some contexts

[09:48] *** jmerelo joined
[09:49] <sarna_> m: my Hash[Hash, Str] %hash = %(foo => %(bar => "baz"))

[09:49] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´Type check failed in assignment to %hash; expected Hash[Hash,Str] but got Hash (${:bar("baz")})‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:49] <sarna_> what's wrong here?

[09:49] <moritz> sarna_: one level of hash is implied by the % sigil

[09:49] <sarna_> moritz: %%?

[09:50] <moritz> I see no %% anywhere

[09:50] <sarna_> moritz: I mean, should I write %% to indicate two levels of hashes

[09:50] <moritz> no

[09:50] <jmerelo> m: my Hash[Hash, Str] %hash := %(foo => %(bar => "baz"))

[09:50] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´Type check failed in binding; expected Associative[Hash[Hash,Str]] but got Hash (${:foo(${:bar("baz")})})‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:51] <moritz> also, the %( ... ) constructs returns just a Hash, not a Hash[ your types here]

[09:51] <sarna_> oh darn

[09:51] <sarna_> I have to .= new and push?

[09:51] <moritz> m: my Str %h =  my Hash[Str] % = (a => 'b')

[09:51] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´Type check failed in assignment to %; expected Hash[Str] but got Str ("b")‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:52] <moritz> m: my Str %h =  my Hash[Str] % = %(a => 'b')

[09:52] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´Type check failed in assignment to %; expected Hash[Str] but got Str ("b")‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:52] <jmerelo> m: my Hash %hash{Str} := %(foo => %(bar => "baz"))

[09:52] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´Type check failed in binding; expected Associative[Hash,Str] but got Hash (${:foo(${:bar("baz")})})‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:52] <moritz> m: my Str %h =  Hash[Str].new(a => 'b')

[09:52] <camelia> rakudo-moar b34d5231e: ( no output )

[09:52] <jmerelo> m: my Hash %hash{Hash} := %(foo => %(bar => "baz"))

[09:52] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´Type check failed in binding; expected Associative[Hash,Hash] but got Hash (${:foo(${:bar("baz")})})‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:53] <moritz> m: my Str %h :=  Hash[Str].new(a => 'b')

[09:53] <camelia> rakudo-moar b34d5231e: ( no output )

[09:53] <moritz> m: my Hash[Str] %h :=  Hash[Hash[Str]].new(a => %( c => 'b'))

[09:53] <camelia> rakudo-moar b34d5231e: ( no output )

[09:53] <moritz> sarna_: ^^ this is an example of a two-level typed hash and how to initialize it

[09:54] <sarna_> thank you moritz!

[09:54] <sarna_> .hug moritz

[09:54] * huggable hugs moritz

[09:55] <moritz> my pleasure :-)

[10:04] <El_Che> .slap moritz around a bit with a big mstrout

[10:04] <El_Che> the bot is broken :)

[10:05] <sarna_> Oo

[10:08] * moritz hugs El_Che 

[10:08] <El_Che> .slap .slap .slap

[10:08] <El_Che> to late

[10:08] * El_Che hygs back

[10:08] * El_Che hugs back

[10:09] *** markoong joined
[10:11] <moritz> slapping and hugging, sounds kinky :)

[10:11] <El_Che> hehe

[10:15] <jmerelo> moritz: and concurrent in a thread-safe way.

[10:22] *** wamba joined
[10:29] *** sena_kun joined
[10:34] *** sarna left
[10:37] <sarna_> I have the weirdest bug now :(

[10:38] <sarna_> I have an empty hash, and I have an if condition that checks if stuff in this hash is defined

[10:38] <sarna_> the hash is empty, but %h<foo>.defined returns True

[10:39] <sarna_> `say %h.kv` prints `()`

[10:47] <AlexDaniel> what about %h<foo>:exists ? :)

[10:48] <sarna_> AlexDaniel: "No such method 'exists' for invocant of type 'List'"

[10:49] <sarna_> oh wait, it interprets it as a list

[10:49] <sarna_> I know what's happening

[10:49] <sarna_> or do I

[10:49] <sarna_> I don't, nvm

[10:50] <AlexDaniel> sarna_: alright, code?

[10:52] <sarna_> AlexDaniel: well, it's 100 lines, and I couldn't isolate it. it's a CLI Connect Four clone

[10:52] <AlexDaniel> maybe `dd %h` ?

[10:53] <jmerelo> sarna_: you might have used := instead of = to define the hash and it's been bound to a list. Could that be?

[10:53] <sarna_> AlexDaniel: Hash %cands = {}

[10:53] <jmerelo> sarna_: ah, that's a trap

[10:54] <sarna_> Oo

[10:54] <jmerelo> sarna_: https://docs.perl6.org/language/traps#Block_vs._Hash_slice_ambiguity

[10:54] <jmerelo> No, wait, not that.

[10:55] <jmerelo> sarna_: but basically, that's the thing. {} is a block. use %() for an empty hash

[10:55] * jmerelo seems to remember that was documented somewhere

[10:55] <sarna_> jmerelo: I'm creating it with .= new

[10:56] <sarna_> I've changed it to = %() now and it behaves in the same way

[10:57] <jmerelo> sarna_: you can probably isolate that particular code. If you can't, do as above, use dd or %cands.^name, %cands.keys, and so on...

[10:58] <sarna_> jmerelo: https://p.teknik.io/bU0Go

[10:58] <sarna_> oh I forgot to delete my debug prints

[10:58] * sarna_ blushes

[10:58] <Geth> ¬¶ doc: caae9bab66 | (JJ Merelo)++ | 2 files

[10:58] <Geth> ¬¶ doc: Changes and reflows identifier introduction

[10:58] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/caae9bab66

[10:58] <Geth> ¬¶ doc: 7becfc7ac3 | (JJ Merelo)++ | doc/Language/syntax.pod6

[10:58] <Geth> ¬¶ doc: Adds documentation on extended syntax

[10:58] <synopsebot_> Link: https://doc.perl6.org/language/syntax

[10:58] <Geth> ¬¶ doc: 

[10:58] <Geth> ¬¶ doc: It was used in examples, but not really mentioned. Closes #2101.

[10:58] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/7becfc7ac3

[10:59] <jmerelo> sarna_: what does dd %cands print?

[11:00] <sarna_> jmerelo: Hash %cands = {}

[11:00] <sarna_> it's empty, and it should be empty

[11:00] <sarna_> it's just that .defined shouldn't return True

[11:01] <sarna_> nor shouldn't it be interpreted as a List

[11:03] *** MDtox joined
[11:06] *** MDtox left
[11:09] <jmerelo> m: my Hash %cands = %(); say %cands.^name; say %cands{'foo'}:exists

[11:09] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´Hash[Hash]‚ê§False‚ê§¬ª

[11:09] <sarna_> why doesn't it exist?

[11:09] <jmerelo> m: my Hash %cands = {}; say %cands.^name; say %cands{'foo'}:exists

[11:09] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of hash composer on right side of hash assignment; did you mean := instead?‚ê§    at <tmp>:1‚ê§    ------> 3my Hash %cands = {}7‚èè5; say %cands.^name; say %cands{'foo'}:ex‚ê§Hash[Hash]‚ê§False‚ê§¬ª

[11:09] <sarna_> oh sorry I misread

[11:10] <jmerelo> m: my %cands = %(); say %cands.^name; say %cands{'foo'}:exists

[11:10] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´Hash‚ê§False‚ê§¬ª

[11:12] <sarna_> You can't adverb &infix:<&&> --> f $x ‚â† 1 && %cands{($x-1 ~ $y-1)}:exists‚èè 

[11:15] <sarna_> well, I had to convert `&&` into `and`

[11:15] <sarna_> weird

[11:18] <sarna_> ahh and

[11:18] <sarna_> m: my %h = %(foo => 2); %h<'f' ~ 'oo'>

[11:18] <camelia> rakudo-moar b34d5231e: ( no output )

[11:18] <sarna_> m: my %h = %(foo => 2); say %h<'f' ~ 'oo'>

[11:18] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´((Any) (Any) (Any))‚ê§¬ª

[11:19] <sarna_> that's my problem

[11:19] <jmerelo> m: m: my %h = %(foo => 2); %h<'f' ~ 'oo'>

[11:19] <camelia> rakudo-moar b34d5231e: ( no output )

[11:20] <jmerelo> m: m: my %h = %(foo => 2); %h<'f' ~ 'oo'>; say %h.keys

[11:20] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´(foo)‚ê§¬ª

[11:20] <jmerelo> m: m: my %h = %(foo => 2); %h<'f' ~ 'oo'>; say %h.keys; say %h<foo>:exists

[11:20] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´(foo)‚ê§True‚ê§¬ª

[11:20] <sarna_> rakudo interprets <'f' ~ 'oo'> as a three element list I think

[11:20] <sarna_> m: say <'f' ~ 'oo'>

[11:20] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´('f' ~ 'oo')‚ê§¬ª

[11:21] <jmerelo> sarna_: <> put quotes around whatever you do

[11:21] <sarna_> jmerelo: lisp in a perl

[11:22] <jmerelo> m: say <'f' ~ 'oo'> == ['f','~','oo'].join("")

[11:22] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5f~oo' (indicated by ‚èè)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:22] <jmerelo> m: say <'f' ~ 'oo'> eq ['f','~','oo'].join("")

[11:22] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´False‚ê§¬ª

[11:22] <jmerelo> m: say  ['f','~','oo'].join("")

[11:22] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´f~oo‚ê§¬ª

[11:22] <jmerelo> m: say  <f ~ oo>.join("")

[11:22] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´f~oo‚ê§¬ª

[11:22] <jmerelo> m: say <'f' ~ 'oo'> eqv ['f','~','oo'].join("")

[11:22] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´False‚ê§¬ª

[11:23] <jmerelo> Um, whatever

[11:23] <sarna_> jmerelo: anyway, thanks for helping me out :) the thing I had to do was to use {} instead of <>

[11:23] <jmerelo> sarna_: good luck :-)

[11:23] <sarna_> jmerelo: same to you!

[11:27] *** jmerelo left
[11:27] <tobs> m: <'f' ~ 'oo'> eqv ["'f'","~","'oo'"].List

[11:27] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "eqv" in expression "<'f' ~ 'oo'> eqv [\"'f'\",\"~\",\"'oo'\"].List" in sink context (line 1)‚ê§¬ª

[11:27] <tobs> m: say <'f' ~ 'oo'> eqv ["'f'","~","'oo'"].List

[11:27] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´True‚ê§¬ª

[11:32] <sarna_> :)

[11:37] *** sarna_ left
[11:42] *** Schepeers left
[11:46] *** sarna joined
[11:48] *** benjikun2 joined
[11:50] *** benjikun left
[11:51] *** Schepeers joined
[12:05] *** jeromelanteri joined
[12:06] <jeromelanteri> with spacemacs, perl6 layers installation failed (test failed): http://develop.spacemacs.org/layers/+lang/perl6/README.html

[12:06] <jeromelanteri> if someone who use emacs / spacemacs know what i can do for understand more why it failed and eventualy how to fix this...

[12:08] *** hami joined
[12:19] *** xtreak joined
[12:23] *** hami left
[12:24] <AlexDaniel> jeromelanteri: what's the error?

[12:25] <jeromelanteri> AlexDaniel, from spacemacs, i added "perl6" as layer, then SPC f e R and i can only see TEST FAILED (the questions are: how to see more error / how to know why ? and How to eventually fix this ?)

[12:28] <AlexDaniel> hm maybe it's time to try spacemacs again for me‚Ä¶

[12:28] <AlexDaniel> let me restart emacs realquick :)

[12:28] *** AlexDaniel left
[12:28] <jeromelanteri> thank you

[12:31] <AlexDaniel``> I guess that'll take some time to install‚Ä¶ :)

[12:31] <AlexDaniel``> jeromelanteri: while I'm doing that, I can say that emacs with perl6-mode works fine by itself

[12:32] <AlexDaniel``> I think spacemacs should show a list of failed tests somewhere

[12:32] <AlexDaniel``> but quick googling didn't show up any good results

[12:33] <jeromelanteri> AlexDaniel``, perl6-mode seems to works yes... i'm a newbie on emacs/spacemacs (usually i use vim). SO it should have a key combinaison for see some more rrors from test failed...

[12:33] *** domidumont joined
[12:33] <jeromelanteri> yes, duckducking doesn't show any answer on this request to...

[12:33] *** AlexDaniel joined
[12:34] <AlexDaniel> hello from spacemacs! :)

[12:36] <AlexDaniel``> maybe I should consider trying spacemacs for real now‚Ä¶ especially given that there's a perl6 layer

[12:37] <AlexDaniel``> ok I see a failing test in perl6

[12:39] <AlexDaniel``> it's really cool that it comes with tests now

[12:39] <AlexDaniel``> I don't remember that a few years ago when I tried it

[12:40] <sarna> the vim plugin is v nice too

[12:40] <sarna> I use it with neovim

[12:40] <sarna> vscode plugin is broken

[12:40] * sarna doesn't know if it's any relevant

[12:43] <AlexDaniel> jeromelanteri: I guess I'm also a noob in this question, so maybe we should go to #spacemacs if that's a thing

[12:44] <AlexDaniel``> Ah it's not, but they have gitter IIRC

[12:51] <AlexDaniel> OK I asked a question there, let's see how it goes‚Ä¶

[12:53] *** wamba left
[12:53] *** wamba joined
[12:55] <jeromelanteri> thank you again to try to help me with that

[13:01] <AlexDaniel> hmm, looks like my message from over the Matrix bridge got lost, ok I'll send it again natively‚Ä¶

[13:08] *** kurahaupo left
[13:08] *** kurahaupo_ joined
[13:16] <hoelzro> o/ #perl6

[13:17] <hoelzro> so, I figured out that Linenoise resources issue

[13:18] <hoelzro> if you look here: https://github.com/rakudo/rakudo/blob/b34d5231ee1b9a135585078d087422deca7f1c59/src/core/CompUnit/RepositoryRegistry.pm6#L194

[13:18] <hoelzro> $home ('/home/rob/.perl6' for me) is used as the lookup key for $repos, but the actual key is something like 'inst#/home/rob/.perl6' rather than '/home/rob/.perl6'

[13:19] <hoelzro> when I changed that line to my $repo := nqp::atkey($repos, 'inst#' ~ $home), the Linenoise issue went away

[13:19] <hoelzro> but that change feels a little fragile - if someone more familiar with that code sees this, could they vet that idea or at least propose an alternative?

[13:20] <hoelzro> in the meantime, maybe I'll file an issue/make a PR

[13:21] <hoelzro> interestingly enough, https://github.com/rakudo/rakudo/blob/b34d5231ee1b9a135585078d087422deca7f1c59/src/core/CompUnit/RepositoryRegistry.pm6#L99 looks like it's starting to compensate for this issue?

[13:21] <hoelzro> El_Che, sarna: you two might be interested in ^

[13:21] <hoelzro> I have to walk my dog and prepare for a party I'm throwing, but I'll write up my findings in that Linenoise issue

[13:24] <AlexDaniel> hoelzro: maybe also a rakudo ticket is needed

[13:31] <hoelzro> AlexDaniel: yeah, I'll write that up too

[13:37] <sarna> hoelzro: sweet, thanks for investigating :) and have fun at the party!

[13:38] *** itaipu joined
[13:38] *** dct joined
[13:47] <AlexDaniel> jeromelanteri: I think I see something

[13:50] <AlexDaniel> jeromelanteri: oh yeah I think I figured it out!

[13:50] <AlexDaniel> let me restart to try that out‚Ä¶

[13:51] *** AlexDaniel left
[13:51] *** ChoHag left
[13:52] <AlexDaniel``> so as far as I can see this is what happens

[13:52] <AlexDaniel``> there's `master` and `develop` braches

[13:52] *** ChoHag joined
[13:53] <AlexDaniel``> I guess `master` is stable but it's a little bit old

[13:53] <AlexDaniel``> there are no perl5 or perl6 layers in master

[13:53] <AlexDaniel``> so you'll have to go to .emacs.d/ directory and do `git checkout develop`

[13:54] *** dct left
[13:55] <AlexDaniel``> it says ‚ÄúVERSION 0.300 IS ALMOST OUT!‚Äù so I guess this issue will go away soon

[13:56] *** AlexDaniel joined
[13:57] <AlexDaniel> jeromelanteri: yeah! That works!

[13:58] <AlexDaniel> sarna: it seems like the default configuration in spacemacs is a bit more advanced

[13:58] <AlexDaniel> sarna: e.g. it automatically highlights lines with syntax errors

[13:59] <AlexDaniel> I guess the only missing thing is moar debugger :)

[14:03] <jeromelanteri> AlexDaniel, it works for you ? what are you doing for this perl6 layer to work with spacemacs ?

[14:04] <hoelzro> rakudobugs are on GitHub, not RT now - right?

[14:04] <AlexDaniel``> hoelzro: yes, unless you have some problem with GH

[14:04] <AlexDaniel``> hoelzro: RT tickets are also looked at

[14:04] <hoelzro> I don't in particular - just checking :)

[14:04] <AlexDaniel``> jeromelanteri: as I said a few messages above

[14:05] <jeromelanteri> ho yes, sorry, just read it now...

[14:05] <AlexDaniel``> jeromelanteri: perl6 layer will be included in the upcoming version of spacemacs, so that issue will go away once it is released‚Ä¶ but for now you'll have to switch to `develop` branch

[14:05] <AlexDaniel``> interestingly perl5 layer is in the same situation :)

[14:06] <jeromelanteri> AlexDaniel``, very good, that's fine there with develop branch

[14:07] <jeromelanteri> thank you very much

[14:10] *** AlexDaniel left
[14:10] <sarna> AlexDaniel: o, I'll have to try it out

[14:12] *** aindilis left
[14:19] *** fatguy joined
[14:20] *** jeromelanteri left
[14:24] *** aindilis joined
[14:26] *** HaraldJoerg joined
[14:27] *** kjk left
[14:27] *** kjk joined
[14:29] <kjk> given a sub, is there a way to check if it's a proto?

[14:29] <timotimo> m: proto sub test() {*}; say &test.^methods

[14:29] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´(package <anon> candidates soft <anon> <anon> <anon> cando <anon> yada <anon> wrap onlystar perl <anon> <anon> unwrap multi <anon> <anon> <anon> <anon> leave <anon> <anon> <anon> <anon> BUILDALL of <anon> set_why returns has-phasers <anon> <anon> perl‚Ä¶¬ª

[14:30] <timotimo> m: proto sub test() {*}; say &test.^methods.grep(*.name ne "<anon">)

[14:30] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing required term after infix‚ê§at <tmp>:1‚ê§------> 3y &test.^methods.grep(*.name ne "<anon">7‚èè5)‚ê§    expecting any of:‚ê§        prefix‚ê§        term‚ê§¬ª

[14:30] <timotimo> m: proto sub test() {*}; say &test.^methods.grep(*.name ne "<anon>")

[14:30] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´(package unwrap leave cando wrap soft multi candidates yada perl onlystar BUILDALL set_why returns WHY phasers pos has-phasers has-phaser fire_phasers perl of fire_if_phasers add_phaser BUILDALL assuming static_id prec outer count ACCEPTS returns new ‚Ä¶¬ª

[14:30] <timotimo> m: sub test() {*}; say &test.^methods.grep(*.name ne "<anon>")

[14:30] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´(yada soft onlystar cando wrap unwrap multi leave perl package candidates BUILDALL phasers has-phasers fire_phasers WHY returns has-phaser of add_phaser set_why pos fire_if_phasers perl BUILDALL count Capture ACCEPTS static_id outer returns prec Str s‚Ä¶¬ª

[14:31] <timotimo> m: proto sub meep() {*}; multi sub moop() {}; say &meep.^methods.grep(*.name ne "<anon>").Set (-) &moop.^methods.grep(*.name ne "<anon>").Set

[14:31] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´set()‚ê§¬ª

[14:31] <timotimo> well, at least multis and protos have the same methods

[14:31] <timotimo> m: proto sub meep() {*}; sub moop() {}; say &meep.^methods.grep(*.name ne "<anon>").Set (-) &moop.^methods.grep(*.name ne "<anon>").Set

[14:31] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´set()‚ê§¬ª

[14:31] <timotimo> if the proto only has the * in it, then the onlystar method would give you true

[14:32] <timotimo> oh, of course, when you have "multi sub foo" then &foo will refer to the auto-generated proto (or the one that already existed in an outer-er scope)

[14:36] *** benjikun2 left
[14:36] *** zakharyas joined
[14:37] <kjk> timotimo: thanks, I'll think about it more

[14:38] *** araraloren left
[14:39] *** araraloren joined
[14:39] *** lizmat left
[14:40] <timotimo> m: proto sub meep() {*}; sub moop() {}; say &meep.^methods.grep(*.name ne "<anon>").Set (-) &moop.candidates[0].^methods.grep(*.name ne "<anon>").Set

[14:40] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´set()‚ê§¬ª

[14:40] *** sno left
[14:41] <kjk> looks like the auto-generated proto has onlystar, but if I declare a proto myself it doesn't

[14:44] <kjk> and what does onlystar mean?

[14:44] *** sno joined
[14:47] <timotimo> basically "the proto does nothing other than call the appropriate candidate"

[14:48] <timotimo> except of course limit what signatures are allowed

[14:48] *** lizmat joined
[14:49] *** fatguy left
[14:52] <kjk> is there a built-in way to add meta info to objects in perl6

[14:53] *** lizmat left
[14:53] *** lizmat joined
[14:57] *** sno left
[15:02] <kjk> ok, it looks like if I declare a proto myself, I *have to* put only the * in its body (hmm, so that's what onlystar means?) otherwise, its multis won't work

[15:02] <timotimo> you should either have the whole body be {*}, or have a {*} somewhere in it

[15:02] *** xtreak left
[15:03] <timotimo> m: proto sub doIt(|) { say "doing it"; {*} }; multi sub doIt(Str) { say "string" }; multi sub doIt(Int) { say "int" }; doIt("hi"); doIt(99)

[15:03] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´doing it‚ê§string‚ê§doing it‚ê§int‚ê§¬ª

[15:03] <timotimo> m: proto sub doIt(|) { say "doing it"; }; multi sub doIt(Str) { say "string" }; multi sub doIt(Int) { say "int" }; doIt("hi"); doIt(99)

[15:03] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´doing it‚ê§doing it‚ê§¬ª

[15:03] <kjk> timotimo: I see. So, * is like telling it to dispatch to its multis

[15:03] <timotimo> yeah, that's how i think of it

[15:12] <kjk> p6: proto p(|) { say "ppppp"; {*} };  multi p(Int $i) { $i }; p(123)

[15:12] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´ppppp‚ê§¬ª

[15:12] <kjk> 123 was not returned...

[15:14] <kjk> p6: proto p(|) { say "ppppp"; return {*} };  multi p(Int $i) { $i }; p(123)

[15:14] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´ppppp‚ê§¬ª

[15:14] <kjk> p6: proto p(|) { say "ppppp"; return {*} };  multi p(Int $i) { return $i }; p(123)

[15:14] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´ppppp‚ê§¬ª

[15:15] <kjk> p6: proto p(| --> Any) { say "ppppp"; return {*} };  multi p(Int $i --> Int) { return $i }; p(123)

[15:15] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´ppppp‚ê§¬ª

[15:15] <kjk> :( how to make it work

[15:18] *** skids joined
[15:19] <tobs> kjk: ENOSAY

[15:19] <geekosaur> ^ remember the bot doesn't automatically "say" results

[15:21] <kjk> it also doesn't return 123 in the REPL

[15:22] <kjk> gotta go, will check when I get back.

[15:22] *** xtreak joined
[15:22] *** aindilis left
[15:23] <tobs> m: proto p(|) { say "ppppp"; {*} };  multi p(Int $i) { $i }; p(123).say

[15:23] <camelia> rakudo-moar b34d5231e: OUTPUT: ¬´ppppp‚ê§123‚ê§¬ª

[15:27] *** aindilis joined
[15:32] *** aindilis left
[15:33] *** dct joined
[15:33] *** zakharyas left
[15:35] *** zakharyas joined
[15:36] *** zakharyas left
[15:37] *** zakharyas joined
[15:41] *** dct left
[15:44] *** dha joined
[15:52] *** xtreak left
[15:54] *** MasterDuke left
[15:54] *** sno joined
[15:58] *** kurahaupo_ left
[15:58] *** kurahaupo joined
[16:02] *** MasterDuke joined
[16:13] *** AlexDaniel joined
[16:29] *** zakharyas left
[16:29] *** frobisher joined
[16:32] *** dha left
[16:36] <kjk> alright, yeah it works, it's only that if a sub prints something in addition to returning a result, the repl or the bot doesn't show the returned result.

[16:42] <geekosaur> not never shows them. repl‚Ä¶ is trickier

[16:44] *** xtreak joined
[16:47] *** frobisher left
[16:48] *** AlexDaniel left
[16:48] *** sena_kun left
[16:48] *** AlexDaniel joined
[16:48] *** sena_kun joined
[16:55] <timotimo> if you output something, it says "ah, you're probably not interested in the return value, then"

[16:56] <timotimo> especially so that you don't get a "True" after every line that has a "say" in it

[17:02] *** MasterDuke left
[17:04] *** xtreak left
[17:08] *** frobisher joined
[17:08] <Zoffix> kjk: protos return True for is_dispatcher

[17:09] <Zoffix> m: sub bar {}; multi foo {}; .is_dispatcher.say for &bar, &foo, &foo.candidates.head

[17:09] <camelia> rakudo-moar 5a6ff4073: OUTPUT: ¬´False‚ê§True‚ê§False‚ê§¬ª

[17:09] *** zakharyas joined
[17:10] <Zoffix> and yeah, that's what onlystar meanas

[17:11] *** MasterDuke joined
[17:27] <Zoffix> sarna: just use curlies instead of angle brackets if you don't want autoquoting: my %h = %(foo => 2); say %h{'f' ~ 'oo'}

[17:30] <Zoffix> sarna: and I didn't look at your code, but I'm guessing you used angle brackets instead of curlies with ^ that and that caused it to be a 3-item list, which is a slice, so it was returning a 3-el list of Any typeobjects, and you were calling .defined on it (and it is)

[17:39] *** dct joined
[17:39] *** araraloren left
[17:45] *** frobisher is now known as dha

[17:50] *** Schepeers left
[17:59] *** itaipu left
[18:00] *** itaipu joined
[18:06] *** sarna left
[18:10] *** sarna joined
[18:10] <sarna> Zoffix: yes, precisely

[18:11] <sarna> Zoffix: I thought foo<bar> was the syntax for getting stuff out of hashes

[18:11] <El_Che> < > means auto quotiong

[18:11] <El_Che> %hash{$var} is with interpolation

[18:12] <Zoffix> sarna: foo<bar> is shorthand for foo{val 'bar'}

[18:12] <timotimo> tbh, i wouldn't call that interpolation

[18:12] <El_Che> %hash<var> is the same %hash{'var"}

[18:12] <El_Che> ' ''

[18:12] <El_Che> ' '

[18:12] <Zoffix> Not the same. `< >` creates allomorphs, `' '` doesn't

[18:12] <sarna> what does `val` mean?

[18:13] <Zoffix> m: my %h := :{ <42> => "forty two" }; say %h{'42'}; say %h<42>

[18:13] <camelia> rakudo-moar 5a6ff4073: OUTPUT: ¬´(Any)‚ê§forty two‚ê§¬ª

[18:13] <Zoffix> sarna: it's a function call https://docs.perl6.org/routine/val.html

[18:13] <Zoffix> hmm

[18:13] <Zoffix> m: dd val '42 foo'

[18:13] <camelia> rakudo-moar 5a6ff4073: OUTPUT: ¬´"42 foo"‚ê§¬ª

[18:13] <Zoffix> Ah, right

[18:14] <sarna> oh

[18:14] <Zoffix> sarna: correction, it's `val 'bar'` only up to a point. `< >` breaks on whitespace to make lists, so it'd be like `foo{'bar'.words¬ª.&val}`  tho I don't know if .words and <> use the same rules for whitespace breaking

[18:15] <Zoffix> m: dd val '42'

[18:15] <camelia> rakudo-moar 5a6ff4073: OUTPUT: ¬´IntStr.new(42, "42")‚ê§¬ª

[18:15] <sarna> Zoffix: I see, thank you

[18:15] <Zoffix> sarna: the < ... > is documented here: https://docs.perl6.org/language/quoting#Word_quoting:_%3C_%3E

[18:16] <Geth> ¬¶ doc: 85acff619a | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/quoting.pod6

[18:16] <Geth> ¬¶ doc: Fix wrong tense of the word

[18:16] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/85acff619a

[18:16] <synopsebot_> Link: https://doc.perl6.org/language/quoting

[18:18] *** dct left
[18:20] <sarna> and the last thing - why :{} ?

[18:21] <Zoffix> sarna: {} is a Hash with Str keys. :{} is an object hash with Any keys

[18:21] <Zoffix> m: dd :{}

[18:21] <camelia> rakudo-moar 5a6ff4073: OUTPUT: ¬´:{}‚ê§¬ª

[18:21] <Zoffix> um

[18:22] <sarna> Zoffix: makes sense, thanks!

[18:22] <sarna> .hug Zoffix

[18:22] * huggable hugs Zoffix

[18:22] <Zoffix> m: dd :{}.^name

[18:22] <camelia> rakudo-moar 5a6ff4073: OUTPUT: ¬´"Hash[Mu,Any]"‚ê§¬ª

[18:24] <Zoffix> .of gives you parametarization of values, which one is the one for keys, I forget?

[18:24] <Zoffix> .keyof

[18:24] <Zoffix> m: say [.of, .keyof] for {}, :{}, (my Str %h), (my %{DateTime}), (my Int %h{Date})

[18:24] <camelia> rakudo-moar 5a6ff4073: OUTPUT: ¬´Potential difficulties:‚ê§    Redeclaration of symbol '%h'‚ê§    at <tmp>:1‚ê§    ------> 3 %h), (my %{DateTime}), (my Int %h{Date}7‚èè5)‚ê§[(Mu) (Str(Any))]‚ê§[(Mu) (Any)]‚ê§[(Int) (Date)]‚ê§[(Any) (DateTime)]‚ê§[(Int) (Date)]‚ê§¬ª

[18:25] <Zoffix> m: say [.of, .keyof] for {}, :{}, (my Str %h), (my %h3{DateTime}), (my Int %h2{Date})

[18:25] <camelia> rakudo-moar 5a6ff4073: OUTPUT: ¬´[(Mu) (Str(Any))]‚ê§[(Mu) (Any)]‚ê§[(Str) (Str(Any))]‚ê§[(Any) (DateTime)]‚ê§[(Int) (Date)]‚ê§¬ª

[18:25] <sarna> :^)

[18:25] <kjk> Zoffix: thanks for the is_dispatcher tip, that's exactly what I want

[18:27] <kjk> it works, but I don't see the is_dispatcher method listed for Sub or its ancestors though...

[18:28] <Zoffix> prolly one of those <anon>s

[18:29] <kjk> ic, so does that mean it's considered an internal method?

[18:29] <Zoffix> Not really, it's just added really early and I guess the way it's added makes it nameless.

[18:30] <Zoffix> Wonder if simply giving this sub the name here would make the method have a name: https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/BOOTSTRAP.nqp#L1861

[18:31] <kjk> interesting

[18:31] *** domidumont left
[18:32] *** Schepeers joined
[18:35] *** dha left
[18:46] *** psychoslave_ joined
[18:50] <El_Che> AlexDaniel: it would be great if hoelzro++ PR would be added to the new release

[18:51] <El_Che> I suspect that many people will end up with an install without Linenoise *and* Readline instead

[18:51] <AlexDaniel> El_Che: I'm ok with that

[18:51] <El_Che> great to hear

[18:51] <AlexDaniel> won't merge right away in case someone has comments

[18:51] <AlexDaniel> but you can consider it to be in :)

[18:53] *** psychoslave_ left
[18:55] *** dwarring joined
[18:58] <hoelzro> I should add it passes all tests - but unless things have changed around CURLIs and such, I wouldn't mind nine's input

[18:58] <hoelzro> (dunno if nine is still the authority on that stuff)

[19:04] <Zoffix> pretty much. ugexe too

[19:06] <hoelzro> oh, thanks Zoffix - good point

[19:07] *** darutoko left
[19:07] *** Schepeers left
[19:08] *** Schepeers joined
[19:09] *** itaipu left
[19:10] <Zoffix> .ask TimToady my bot is asking whether you had the time to think more about HyperWhatevers. Original discussion: http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-02-07#l48

[19:10] <yoleaux> Zoffix: I'll pass your message to TimToady.

[19:13] *** espadrine joined
[19:15] *** sena_kun left
[19:21] <zostay> @lizmat: thx so much for the class, but just wanted to let you know I may not return this afternoon due to wanting to work on my talk a bit more

[19:24] <Zoffix> zostay: FWIW, at least my IRC client doesn't highlight for @nick. You should use the nick by itself, without any symbols.

[19:25] <Zoffix> lizmat: ^ you got a message there for you

[19:25] <Zoffix> like that :)

[19:30] *** zakharyas left
[19:31] <Zoffix> e: use Test; class Ber::Meow {}; my \ClassDefs := ÔΩ¢my role Foo::Bar2[::T] {}; my class Ber::Meow2 {}; ÔΩ£; throws-like ClassDefs ~ ÔΩ¢my Foo::Bar2[Ber::Meow2] constant mts7 = 42ÔΩ£, X::TypeCheck; EVAL ClassDefs ~ ÔΩ¢our Foo::Bar2[Ber::Meow2] constant ots7 = 42ÔΩ£;

[19:31] <evalable6> Zoffix, rakudo-moar 8921cea95: OUTPUT: ¬´(exit code 1)     1..2‚ê§    not ok 1 - 'my role Foo::Bar2[::T] {}; my class Ber::Meow2 {}; ‚Ä¶¬ª

[19:31] <evalable6> Zoffix, Full output: https://gist.github.com/6abe100358c862114e4ae499686cffe7

[19:32] <Zoffix> "Redeclaration of symbol 'Ber::Meow2'" .... what is it smoking? It's not redeclared...

[19:35] <moritz> it's not?

[19:35] *** dct joined
[19:35] <Zoffix> moritz: I don't see where...

[19:36] <moritz> m: { class Ber::Meow2 {} }; { class Ber::Meow2 }

[19:36] <camelia> rakudo-moar 8921cea95: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Redeclaration of symbol 'Ber::Meow2'‚ê§at <tmp>:1‚ê§------> 3ass Ber::Meow2 {} }; { class Ber::Meow2 7‚èè5}‚ê§    expecting any of:‚ê§        generic role‚ê§¬ª

[19:36] <Zoffix> moritz: but I'm using Str throws-like

[19:36] <Zoffix> e: use Test; throws-like 'my class Foo {}; die', X::AdHoc; throws-like 'my class Foo {}; die', X::AdHoc

[19:36] <evalable6> Zoffix, rakudo-moar 8921cea95: OUTPUT: ¬´    1..2‚ê§    ok 1 - 'my class Foo {}; die' died‚ê§    ok 2 - right exception type (X::AdHoc)‚Ä¶¬ª

[19:36] <evalable6> Zoffix, Full output: https://gist.github.com/9e01d0c675e8be0f28cb50b3fe42712f

[19:37] <moritz> m: { class Ber::Meow2 {} }; { my class Ber::Meow2 }

[19:37] <camelia> rakudo-moar 8921cea95: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Redeclaration of symbol 'Ber::Meow2'‚ê§at <tmp>:1‚ê§------> 3 Ber::Meow2 {} }; { my class Ber::Meow2 7‚èè5}‚ê§    expecting any of:‚ê§        generic role‚ê§¬ª

[19:38] <moritz> Zoffix: I think "my" and ::-joined class names don't mix well

[19:38] <moritz> everythiing that contains :: is global pretty much by definition

[19:38] <Zoffix> m: { my class Ber::Meow2 {} }; { my class Ber::Meow2 {} }

[19:38] <camelia> rakudo-moar 8921cea95: ( no output )

[19:39] <Zoffix> hm, I see `throws-like` uses EVAL $code, context => CALLER::CALLER::CALLER::CALLER::;

[19:39] <moritz> how does that work? with two my's?

[19:40] <Zoffix> moritz: I don't know

[19:40] <Zoffix> m: { my class Ber::Meow2 { method z { say "first" } }.z }; { my class Ber::Meow2 { method z { say "second" } }.z }

[19:40] <camelia> rakudo-moar 8921cea95: OUTPUT: ¬´first‚ê§second‚ê§¬ª

[19:40] <geekosaur> I would assume that means the first one doesn't leak out of its scope. In the earlier one, it's visible outside of its scope and so the later my conflicts

[19:41] <geekosaur> which might mean some thought needed as to if and/or how a local redeclaration should shadow an existing outer-scope name

[19:42] <Zoffix> ohhhh

[19:42] <Zoffix> Now I get it

[19:42] <Zoffix> m: class Ber::Whatever {}; { my class Ber::Meow2 {} }; { my class Ber::Meow2 {} }

[19:42] <camelia> rakudo-moar 8921cea95: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Redeclaration of symbol 'Ber::Meow2'‚ê§at <tmp>:1‚ê§------> 3s Ber::Meow2 {} }; { my class Ber::Meow27‚èè5 {} }‚ê§    expecting any of:‚ê§        generic role‚ê§¬ª

[19:42] <geekosaur> hm

[19:42] <geekosaur> maybe not

[19:42] <Zoffix> If package your `my` is being sticked into exists already then it remains and conflics with the other one or something

[19:42] <geekosaur> but then I have no idea what :: means in a local name

[19:42] <geekosaur> er, a lexical name

[19:43] * Zoffix neither

[19:43] <geekosaur> lexically scoped

[19:43] <geekosaur> and yes, package / namespace leakage is still a thing

[19:44] <geekosaur> hm, actually that seems even weirder because if it's following normal namespacing rules, the first one would ne Ber::Whatever::Ber::Meow2 and you'd need to start it with :: to avoid

[19:45] <geekosaur> iirc

[19:45] <geekosaur> "my" kinda weird the whole thing

[19:46] *** aindilis joined
[19:48] *** raschipi joined
[19:50] <zostay> Blah, I didn't mean to at the @... Meh

[19:51] <geekosaur> muscle memory? :p

[19:53] <zostay> More or less

[20:01] *** dct left
[20:25] *** ufobat_ left
[20:29] *** kalkin- joined
[20:29] <kalkin-> hi

[20:30] <kalkin-> How can I wrap a C function which receives variadic arguments with Nativecall?

[20:30] <kalkin-> i.e man 3 sd_journal_print

[20:33] <geekosaur> you can't, basically

[20:33] <geekosaur> nor by any other way that doesn;t go through an actiual C compiler

[20:34] <geekosaur> stdarg / varargs is ‚Ä¶ difficult

[20:36] <kalkin-> geekosaur: thanks

[20:41] <moritz> you could emulate the sprintf-style part in Perl 6

[20:41] <moritz> and only pass a single string to the underlying C function

[20:43] <geekosaur> you still have to deal with the calling convention being different

[20:43] <geekosaur> and yes, it is different

[20:46] *** sarna left
[20:47] <raschipi> I find it very strange that C needs hacks to pass arguments in variadic functions, since the data structure used is a stack... Like, why? How can it be difficult to put more items in a stack...

[20:48] <geekosaur> because C can decide to pass in registers

[20:48] <geekosaur> and x86-64 often does so

[20:48] <geekosaur> so there's some other thing you need to know about for that platform to tell it which args are in registers. and may differ between windows, linux, etc.

[20:48] <geekosaur> C hasn't been K&R C for several decades

[20:49] <raschipi> Right, but as soon as it runs out of registers, it puts the remaining arguments on the stack, why does it have problems putting more in there?

[20:51] <raschipi> I'm sure there's a good explanation, I just don't know what it is.

[20:51] <geekosaur> because you can have an ABI that says "fixed in regs, var on stack" and now you have to know the declaration to know how to lay them iyt

[20:51] <geekosaur> out

[20:51] <geekosaur> which NativeCall does not and can not know, by design

[20:52] <geekosaur> it knows a symbol name in a shared object

[20:52] *** rindolf left
[20:53] <raschipi> Right, instead of using a generic way of determining which args are there, each function knows how to determine which ones are it's arguments.

[20:54] *** n1ge left
[20:54] <geekosaur> so how is NativeCall guessing this?

[20:54] *** robertle left
[20:54] <kalkin-> Hmm somehow i cant define a multi functions which wrap native functions

[20:54] <kalkin-> Getting this error: Cannot invoke object with invocation handler in this context

[20:55] <kalkin-> I defined the following two functions:

[20:55] <kalkin-> multi sd_journal_send(Str $arg1) returns int32 is native(LIBSD-BUS) is export {*} multi sd_journal_send(Str $arg1, Str $arg2) returns int32 is native(LIBSD-BUS) is export {*}

[20:56] <geekosaur> that makes sense to me. is it native or not?

[20:56] <geekosaur> "multi" means it's got perl6 infrastructure. "is native" means it's a symbol in a shared object somewhere

[20:57] <kalkin-> geekosaur: so? I don't see why I shouldn't be able to declare two perl6 functions with same name and different Signatures which use the same shared object? What am I missing?

[20:57] <geekosaur> ...that it's not about the shared object, it's about "is native"

[20:58] <geekosaur> "is native" means completely raw

[20:58] <geekosaur> it means you do not get multi, or types that don't map to native C types, or anything else yo uexpect from perl 6

[20:58] <geekosaur> you have told eperl 6 that it is a C function, not a perl 6 function

[20:59] <geekosaur> if you ewant perl 6 functions, write perl 6 wrappers for the raw C functions

[21:00] <geekosaur> perhaps it's clearer this way: multiple dispatch knows how to call perl 6 functions, not C functions

[21:00] <kalkin-> geekosaur: I see thanks for the explanation.

[21:01] <raschipi> Always a good idea to write wrappers. Realy easy to write wrappers with NativeCall, and what's the point of using Perl6 if you're actually writing C instead?

[21:04] <geekosaur> I am actually less than fond of nativecall, tbh. it's trying to be clever. so you get this, you get the varargs issue, you get struct passing/returning even worse than the varargs thing, etc.

[21:04] <kalkin-> I really need a good way of faking variadic arguments. Currently the only sollution I come up with, would be generate functions with an argument suffix, and wrap them with a perl6 function foo_variadic, which counts the provided arguments and picks the right fooN function

[21:04] *** Zoffix left
[21:05] <geekosaur> even that's not guaranteed

[21:05] <geekosaur> if you decide you have to do it that way, test on as many plkatforms as possible

[21:05] <geekosaur> C does *not* promise varargs acts like fixed args

[21:06] <kalkin-> the issue is that systemd journal functions all work with variadic arguments. It's not only about printf like behaviour, each own argument is an own field in the log entry

[21:07] <kalkin-> There is a variant of the send function which receives a const struct iovec, but now i have to figure out how this works *sigh* :)

[21:08] <raschipi> One possible solution is to write a C wrapper.

[21:08] <geekosaur> that won't work either unless it's a pointer. you *will* get core dumps if you try to force it

[21:09] <geekosaur> but everyone knows that it's still 1978 and the C compiler is obviously really simple, as is parameter passing

[21:10] *** perlpilot joined
[21:10] <kalkin-> I could write a c wrapper which expects a const char ** (i think this is what a string array is called in C land?) and an array length. My C wrapper could convert(?) the array to a variadic call, i guess??

[21:11] <kalkin-> But can I compile a C library when installing a perl6 package with zef?

[21:20] <moritz> yes

[21:21] <moritz> other modules do that too, for example Inline::Perl5

[21:29] <raschipi> How can you know if cc wil be available in the target?

[21:36] *** comborico1611 joined
[21:37] *** dha joined
[21:38] <kalkin-> thanks guys for all the help and good night

[21:39] *** kalkin- left
[22:06] *** Kaiepi joined
[22:07] *** comborico1611 left
[22:08] *** dha left
[22:12] *** Khisanth left
[22:14] *** Kaiepi left
[22:15] *** Kaiepi joined
[22:25] <timotimo> geekosaur: i'm a bit confused by your explanations on "is native"

[22:26] <geekosaur> afaik it's a thin wrapper with no "handles" so you can't do normal p6 things with it

[22:26] <geekosaur> deliberately so it'll not introduce extra overhead

[22:27] <timotimo> i don't have a better explanation, but i don't think it's that

[22:27] *** Khisanth joined
[22:27] *** perlpilot left
[22:27] <timotimo> i do believe you used to be able to mix multi and "is native"

[22:27] <timotimo> you'll have to use "is symbol" though

[22:28] <timotimo> oh, but that was meant to be variadic, so that's actually fine

[22:31] <timotimo> anyway, with an "is native" routine, you do get a real Routine object, it just has its $!do set to a freshly compiled piece of code

[22:32] <timotimo> but there's still some perl6-level stuff in between the routine itself and the C function

[22:34] <timotimo> bisectable6: use NativeCall; proto sub printf(|){*}; multi sub printf(Str $fmt, int32 $arg) is native(Str) { }; multi sub printf(Str $fmt, Str $arg) is native(Str) { }; printf("%s is my dog", "hi");

[22:34] <bisectable6> timotimo, On both starting points (old=2015.12 new=61878c3) the exit code is 1 and the output is identical as well

[22:34] <bisectable6> timotimo, Output on both points: ¬´Cannot invoke object with invocation handler in this context‚ê§  in sub printf at /tmp/_anBgjLnK9 line 1‚ê§  in block <unit> at /tmp/_anBgjLnK9 line 1‚ê§‚ê§¬ª

[22:34] <timotimo> huh, has it really always been this way?

[22:34] <timotimo> m: say &printf

[22:34] <camelia> rakudo-moar 61878c3e0: OUTPUT: ¬´sub printf ($, | is raw) { #`(Sub|41528584) ... }‚ê§¬ª

[22:34] <timotimo> oh, could that be a problem here?

[22:35] <timotimo> bisectable6: use NativeCall; proto sub cprintf(|){*}; multi sub printf(Str $fmt, int32 $arg) is native(Str) is symbol("printf") { }; multi sub cprintf(Str $fmt, Str $arg) is native(Str) is symbol("printf") { }; cprintf("%s is my dog", "hi");

[22:35] <bisectable6> timotimo, On both starting points (old=2015.12 new=61878c3) the exit code is 1 and the output is identical as well

[22:35] <bisectable6> timotimo, Output on both points: ¬´Cannot invoke object with invocation handler in this context‚ê§  in sub cprintf at /tmp/OsshHDaGAR line 1‚ê§  in block <unit> at /tmp/OsshHDaGAR line 1‚ê§‚ê§¬ª

[22:35] <timotimo> i seem to be misremembering, huh.

[22:36] <timotimo> it should be possible to make multi and native work together

[22:47] *** Xliff left
[22:50] *** Sgeo_ joined
[22:51] *** Sgeo left
[22:53] <Kaiepi> m: my $c = IO::Socket::INET.new(:host<telehack.com>, :port(23), :encoding<latin1>); my $fd = $c.native-descriptor; $c.close; dd $fd

[22:53] <camelia> rakudo-moar 61878c3e0: OUTPUT: ¬´IO::Socket::INET is disallowed in restricted setting‚ê§  in sub restricted at src/RESTRICTED.setting line 1‚ê§  in method new at src/RESTRICTED.setting line 32‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:53] <Kaiepi> p6: my $c = IO::Socket::INET.new(:host<telehack.com>, :port(23), :encoding<latin1>); my $fd = $c.native-descriptor; $c.close; dd $fd

[22:53] <camelia> rakudo-moar 61878c3e0: OUTPUT: ¬´IO::Socket::INET is disallowed in restricted setting‚ê§  in sub restricted at src/RESTRICTED.setting line 1‚ê§  in method new at src/RESTRICTED.setting line 32‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:55] <buggable> New CPAN upload: IP-Random-0.0.1.tar.gz by JMASLAK https://cpan.metacpan.org/authors/id/J/JM/JMASLAK/Perl6/IP-Random-0.0.1.tar.gz

[22:58] <Kaiepi> m: my $c = IO::Socket::INET.new(:host<localhost>, :port(23), :encoding<latin1>); my $fd = $c.native-descriptor; $c.close; say $fd

[22:58] <camelia> rakudo-moar 61878c3e0: OUTPUT: ¬´IO::Socket::INET is disallowed in restricted setting‚ê§  in sub restricted at src/RESTRICTED.setting line 1‚ê§  in method new at src/RESTRICTED.setting line 32‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:58] <Kaiepi> damn

[22:58] *** subroot joined
[23:02] *** Sgeo joined
[23:03] *** lembark joined
[23:03] <lembark> Q: How can I compile/configure Rakudo to ignore my home directory for modules?

[23:04] <lembark> e.g., I *dont'* want to have anyone search ~/.perl6.

[23:04] *** Sgeo_ left
[23:04] <lembark> Looking at perl Configure.pl --help doesn't show any to configure the P6-ish equivalent to @INC.

[23:04] <lembark> thanks

[23:05] *** HaraldJoerg left
[23:07] <raschipi> lembark: A good start: https://docs.perl6.org/language/5to6-perlvar#index-entry-%40INC_%28Perl%C2%A05%29

[23:12] *** Mark04 joined
[23:12] <Mark04> Hi all, any idea how I might debug this: "MoarVM panic: Internal error: Unwound entire stack and missed handler"

[23:13] <Mark04> I'm trying to write a LibCurl based script to update Cloudflare DNS records

[23:16] <Mark04> It was working ok on my mac0S machine, and copied over to an archlinuxarm box it's not so happy

[23:17] <MasterDuke> Kaiepi: fyi, you can use "restricted" things with evalable, committable, etc

[23:17] <Geth> ¬¶ doc/post-release-2018.06: 086d7c11bd | (Zoffix Znet)++ | doc/Language/terms.pod6

[23:17] <Geth> ¬¶ doc/post-release-2018.06: [CaR Grant] Rewrite section on constants

[23:17] <Geth> ¬¶ doc/post-release-2018.06: 

[23:17] <Geth> ¬¶ doc/post-release-2018.06: - Document newly-available auto-coercion

[23:17] <Geth> ¬¶ doc/post-release-2018.06: - Document newly-enforceable type constraints

[23:17] <Geth> ¬¶ doc/post-release-2018.06: - Document ability to use := op and backslashed sigilless names

[23:17] <Geth> ¬¶ doc/post-release-2018.06: - Document anonymous constants

[23:17] <Geth> ¬¶ doc/post-release-2018.06: - Get rid of overly elaborate scoping prose. That belongs to

[23:17] <Geth> ¬¶ doc/post-release-2018.06:     the section on scoping.

[23:17] <Geth> ¬¶ doc/post-release-2018.06: review: https://github.com/perl6/doc/commit/086d7c11bd

[23:19] *** Xliff joined
[23:19] *** Xliff left
[23:19] *** Xliff joined
[23:20] *** Zoffix joined
[23:20] <Zoffix> Mark04: adding --ll-exception command line flag to perl6 sometimes gives you extra bits of info

[23:21] <Zoffix> e: my $c = IO::Socket::INET.new(:host<localhost>, :port(23), :encoding<latin1>); my $fd = $c.native-descriptor; $c.close; say $fd

[23:21] <evalable6> Zoffix, rakudo-moar 61878c3e0: OUTPUT: ¬´(exit code 1) Could not connect socket: Connection refused‚ê§  in block <unit> at /tmp/WDQX84a67R line 1‚ê§‚ê§¬ª

[23:21] <Zoffix> e: my $c = IO::Socket::INET.new(:host<irc.freenode.net>, :6667port, :encoding<latin1>); my $fd = $c.native-descriptor; $c.close; say $fd

[23:21] <evalable6> Zoffix, rakudo-moar 61878c3e0: OUTPUT: ¬´-1‚ê§¬ª

[23:22] *** espadrine left
[23:23] *** Sgeo_ joined
[23:23] <Zoffix> Mark04: it might be a bug in Rakudo or MoarVM... You could try running with MVM_SPESH_DISABLE=1 set  (that's one of the things you can disable; `moar --help` lists 'em all)

[23:25] <Zoffix> lembark: I don't think ~/.perl6 is *searched* for modules by default. It's just a place where installed modules reside

[23:25] <Zoffix> lembark: like, in their precompiled form

[23:27] *** Sgeo left
[23:27] <Zoffix> e: for $*REPO.repo-chain { say [.^name, .Str] }

[23:27] <evalable6> Zoffix, rakudo-moar 61878c3e0: OUTPUT: ¬´[CompUnit::Repository::FileSystem /home/bisectable/git/whateverable/sandbox/lib]‚ê§[CompUnit‚Ä¶¬ª

[23:27] <evalable6> Zoffix, Full output: https://gist.github.com/048b7277cd0783427ace3a45430d8965

[23:28] <Zoffix> Those are CUR::Installation and Perl 5's @INC equivalent would be CUR::FileSystem

[23:29] *** lizmat left
[23:29] <Mark04> Zoffix: nothing more in this case :(

[23:30] <Mark04> Zoffix: and the MVM_SPESH_DISABLE=1 doesn't seem to change anything‚Ä¶

[23:31] <Zoffix> :(

[23:31] <Mark04> the script is litteraly two LibCurl::HTTP gets and a put‚Ä¶ There's a JSON object in the middle and that's about all

[23:31] <Zoffix> Mark04: oh, can you pastebin it?

[23:32] <Zoffix> Mark04: also, what's your perl6 version?

[23:32] <Mark04> Zoffix: sure yeah

[23:32] *** zgana joined
[23:32] <Mark04> Zoffix: perl6 --version

[23:32] <Mark04> This is Rakudo version 2018.05 built on MoarVM version 2018.05

[23:32] <Mark04> implementing Perl 6.c.

[23:34] <Mark04> Zoffix: https://pastebin.com/peJSAbcV

[23:36] * Zoffix installs prereqs

[23:37] <zgana> hello perl6 people. i'm new

[23:37] <Zoffix> eco: LibCurl::HTTP

[23:37] <buggable> Zoffix, Nothing found

[23:38] <Zoffix> Hm, weird. It's not on modules.perl6.org :/ even though it does show up in the build log

[23:38] <Zoffix> zgana: \o

[23:38] <Zoffix> .hug zgana 

[23:38] * huggable hugs zgana 

[23:38] <Zoffix> eco: LibCurl

[23:38] <buggable> Zoffix, LibCurl 'Perl6 bindings for LibCurl': https://github.com/CurtTilmes/perl6-libcurl 1 other matching results: https://modules.perl6.org/s/

[23:38] <Zoffix> Ah.. Right, the site just sucks

[23:41] <zgana> i'm very interested in the perl6 jupyter kernel, i guess this is the currently leading one? https://github.com/bduggan/p6-jupyter-kernel

[23:41] <Zoffix> zgana: I think so

[23:42] <Zoffix> Mark04: just tells me `Couldn't connect to server`. Doesn't crash. CloudFare doesn't have some sort of testing API login/pass, does it?

[23:43] <Mark04> Zoffix: I wonder if the answer could be in some shared object on the machine where it's crashing‚Ä¶ I just ran a Pacman (arch package manager) update a short while ago, definitely since I installed rakudo things have been updated (kernel, gcc I think, etc‚Ä¶)

[23:43] <Mark04> Zoffix: really not sure about the Cloudflare API

[23:45] <zgana> is there a preferred plotting API?  the jupyter kernel examples include some with SVG::Plot, but it looks... not on par with, say, matplotlib

[23:46] *** lizmat joined
[23:47] <Zoffix> zgana: not really sure, but for things not being on par with stuff, I wouldn't be surprised. Our first language release was just 2 years ago, so everything's new and much of the modules aren't polished :)

[23:47] <Zoffix> zgana: there's also Inline::Python that lets you use Python's modules. Never tried it, but maybe it'll be useful.

[23:48] <Zoffix> eco: Inline::Python

[23:48] <buggable> Zoffix, Inline::Python 'Use Python code and libraries in a Perl 6 program': http://modules.perl6.org/dist/Inline::Python:github:github:niner

[23:48] <lembark> Perl5-toPerl6 shows how @INC works -- or doesn't -- in Perl6.

[23:48] <lembark> Q: Is it possible to configure Perl6 tyo *not* search $HOME for modules?

[23:49] <lembark> i.e., perl6 should not look in ~/.perl6.

[23:50] <Zoffix> lembark: what do you mean by "search for modules"?

[23:50] <Zoffix> lembark: like, search for Foo.pm6 files or something?

[23:52] <Zoffix> Mark04: dunno, got the API key and looks like it's making some requests without crashing.

[23:52] <lembark> Looking at the list of repo's that Perl6 is initlailzed with:

[23:52] <lembark> > .say for $*REPO.repo-chain; file#/home/lembark/sandbox/Perl6/Modules/FindBin/lib inst#/home/lembark/.perl6 inst#/opt/perl6/share/perl6/site inst#/opt/perl6/share/perl6/vendor inst#/opt/perl6/share/perl6 ap# nqp# perl5#

[23:52] <lembark> Notice the "inst#/home/lembark/.perl6".

[23:52] <lembark> I want that permenantly removed from Perl6.

[23:52] <Zoffix> Mark04: maybe try reinstalling some modules? Like   zef uninstall LibCurl::HTTP; zef install LibCurl::HTTP;

[23:53] <lembark> Put it another way, if I enter "use Foobar;", perl6 should not make the attempt of checking ~/.perl6 to find the module.

[23:55] <Zoffix> lembark: you installed your perl6 with rakudo star?

[23:56] <Mark04> Zoffix: I tryed that too no change :(

[23:56] <Mark04> Zoffix: I'm re-installing rakudo right now will see if that changes anything (might seem a long shot but hey, nothing to lose)

[23:57] <Zoffix> lembark: FWIW, if another user runs the script, it'll be their home directory in that list, not yours.

[23:57] <MasterDuke> zgana: the whateverable bots use SVG::Plot now, but previously successfully used Chart::Gnuplot with Inline::Perl5

[23:58] <Mark04> Zoffix: thanks a lot for taking the time to go get a key and all, that's very helpful of you! 

[23:59] <Zoffix> \o/

