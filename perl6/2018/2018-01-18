[00:03] <jferrero> or xperl7

[00:04] *** pecastro left
[00:04] *** dct left
[00:06] *** levex joined
[00:06] *** levex is now known as Guest6493

[00:15] *** pmurias left
[00:25] *** markong left
[00:33] *** mempko joined
[00:33] *** benjisomething joined
[00:34] <benjisomething> Is there a better way for updating rakudo perl6 than just deleting my old directory and cloning the newer updated one (and proceeding to reconfiguring/building)

[00:34] <benjisomething> I'm not a fan of using rakudobrew

[00:36] <lookatme> of course, there are some pre-build package on the github

[00:37] <benjisomething> where can I get those from?

[00:38] <lookatme> If you are using Linux, here you go: https://github.com/nxadm/rakudo-pkg

[00:39] *** imcsk8 left
[00:43] <benjisomething> I get this "/opt/rakudo-pkg/bin/perl6: 2: exec: /opt/rakudo-pkg/bin/moar: not found"

[00:43] *** jberger left
[00:44] <benjisomething> yet after checking, both of the binaries are there

[00:45] <lookatme> have you update your PATH ?

[00:46] <lookatme> or other things of PATH about Perl6

[00:46] <benjisomething> yeah, I did

[00:46] <benjisomething> export PATH=$PATH:/root/.perl6/bin:/opt/rakudo-pkg/bin

[00:47] *** psch joined
[00:51] <benjisomething> :\

[00:53] <lookatme> :) I don't know

[00:53] <kraih> leont: super efficient message passing between processes and nodes, what the erlang vm is famous for

[00:53] <benjisomething> oh wow, I made a dumb error

[00:53] <kraih> if rakudo could actually replicate that it would open up a very interesting niche

[00:54] <benjisomething> I just had the wrong architecture

[00:54] <benjisomething> fixed now :)

[00:54] <lookatme> yeah, if you have done a fresh installation it should be work

[00:54] *** espadrine left
[00:55] <lookatme> without any other setting except zef

[00:55] <lookatme> also and the PATH

[00:55] *** aborazmeh joined
[00:55] *** aborazmeh left
[00:55] *** aborazmeh joined
[00:55] *** AlexDaniel joined
[00:58] <Geth> ¦ perl6-most-wanted: 4fa96a646a | (Zoffix Znet)++ (committed using GitHub Web editor) | most-wanted/modules.md

[00:58] <Geth> ¦ perl6-most-wanted: Change CGI::Session to Data::Session

[00:58] <Geth> ¦ perl6-most-wanted: 

[00:58] <Geth> ¦ perl6-most-wanted: https://irclog.perlgeek.de/perl6-dev/2018-01-18#i_15703491

[00:58] <Geth> ¦ perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/4fa96a646a

[01:02] <Geth> ¦ perl6-most-wanted: ed52b5256f | (Zoffix Znet)++ (committed using GitHub Web editor) | most-wanted/modules.md

[01:02] <Geth> ¦ perl6-most-wanted: Add back CGI::Session::Auth

[01:02] <Geth> ¦ perl6-most-wanted: 

[01:02] <Geth> ¦ perl6-most-wanted: https://irclog.perlgeek.de/perl6-dev/2018-01-18#i_15703573

[01:02] <Geth> ¦ perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/ed52b5256f

[01:05] <benjisomething> how would I remove all of certain types of characters from an array of strings

[01:05] <benjisomething> what would be the most efficient way

[01:06] *** imcsk8 joined
[01:06] <lookatme> for ex ?

[01:07] <benjisomething> ?

[01:08] <timotimo> what kind of "types" are we talking about?

[01:09] <lookatme> I mean can you show some example ?

[01:09] <timotimo> if it's a unicode property, you can use uniprop (be aware that it operates on the first character)

[01:09] <timotimo> m: say uniprop "h"

[01:09] <camelia> rakudo-moar a1fd0b732: OUTPUT: «Ll␤»

[01:10] <benjisomething> any characters in a character array/string

[01:10] <lookatme> m: say uniprop "h1"

[01:10] <camelia> rakudo-moar a1fd0b732: OUTPUT: «Ll␤»

[01:10] <benjisomething> will be special characters like "'/\$-=,.

[01:10] <lookatme> m: say uniprop "h-"

[01:10] <camelia> rakudo-moar a1fd0b732: OUTPUT: «Ll␤»

[01:10] <timotimo> oh, you have an array of characters and you want to use that to filter out some stuff?

[01:10] <benjisomething> yeah

[01:10] <timotimo> i believe we just recently had a stackoverflow q/a for that

[01:12] <timotimo> https://stackoverflow.com/questions/47329099/filtering-an-array-with-many-keys-of-same-length-in-perl-6 - not quite what you wanted

[01:12] <benjisomething> why doesn't $filtered .= trans($ignore.comb X=> ''); work

[01:13] <timotimo> i think for the trans you want you'd have to have a pair of two arrays?

[01:13] <benjisomething> hm

[01:14] <benjisomething> wait, I think it works for everything except for `'` and `"`

[01:15] <timotimo> m: my $source = "hello how are you"; my $ignore = "abcdefgh"; say $source.trans($ignore => "")

[01:15] <camelia> rakudo-moar a1fd0b732: OUTPUT: «llo ow r you␤»

[01:15] <timotimo> benjisomething: this seems to work fine

[01:15] <benjisomething> OH I know why

[01:15] <benjisomething> There are separate characters for `“` and `"`

[01:15] <benjisomething> woops, yeah this works

[01:16] <psch> this reminds me that tr/// and .trans both feel weird with :d

[01:17] *** unicodable6 left
[01:17] *** quotable6 left
[01:17] *** unicodable6 joined
[01:17] <geekosaur> "“”

[01:17] <geekosaur> 3 of them

[01:17] *** quotable6 joined
[01:17] *** ChanServ sets mode: +v quotable6

[01:18] <timotimo> not to forget the „ that german has

[01:18] <geekosaur> yeh

[01:18] <geekosaur> and single quote versions

[01:19] <timotimo> yeah, ‚‘’

[01:19] <timotimo> .u ,‚

[01:19] <yoleaux> U+002C COMMA [Po] (,)

[01:19] <yoleaux> U+201A SINGLE LOW-9 QUOTATION MARK [Ps] (‚)

[01:19] <Xliff> timotimo: Yes, that was the first thing I looked at. I don't think there are UI elements in it yet.

[01:19] <timotimo> can you tell them apart with your font? i can't

[01:19] <timotimo> Xliff: it's true :(

[01:20] <geekosaur> barely

[01:20] <Xliff> timotimo: I would like to do that, but I need something quick and dirty for another project I am working on.

[01:20] <benjisomething> can I check for newlines just by using contains "\n"?

[01:20] <psch> m: $_ = "foo"; say tr:d/o/o/ # ISTR :d should ignore the replacement..?

[01:20] <camelia> rakudo-moar a1fd0b732: OUTPUT: «StrDistance.new(before => "foo", after => "foo")␤»

[01:20] <Xliff> Maybe fork Curses::UI for Terminal::Print?

[01:20] <timotimo> m: say "foo\r\n".contains("\n")

[01:20] <camelia> rakudo-moar a1fd0b732: OUTPUT: «False␤»

[01:20] <timotimo> m: say "foo\r\n".contains("\r\n")

[01:20] <camelia> rakudo-moar a1fd0b732: OUTPUT: «True␤»

[01:21] <timotimo> benjisomething: you cannot

[01:21] <benjisomething> thanks, lol

[01:21] <benjisomething> isn't \r\n the carriage thing for windows?

[01:22] <psch> m: say so "foo\r\n" ~~ /\n/

[01:22] <camelia> rakudo-moar a1fd0b732: OUTPUT: «True␤»

[01:22] <psch> heh

[01:22] <psch> m: say so "foo\r\n" ~~ /o\n/

[01:22] <camelia> rakudo-moar a1fd0b732: OUTPUT: «True␤»

[01:22] <psch> *that* was my point :x

[01:23] <benjisomething> still isn't finding newlines for some reason

[01:23] <benjisomething> ;-;

[01:25] <lookatme> m: say "foo\r\n".codes

[01:25] <camelia> rakudo-moar a1fd0b732: OUTPUT: «5␤»

[01:25] <benjisomething> what does `.codes` do

[01:26] <psch> returns the number of unicode codepoints

[01:26] <psch> says https://docs.perl6.org/routine/codes at least :)

[01:26] <benjisomething> mm

[01:27] <b2gills> \r\n gets turned into a synthetic

[01:27] <TimToady> m: say "foo\r\n".chars

[01:27] <camelia> rakudo-moar a1fd0b732: OUTPUT: «4␤»

[01:27] <benjisomething> timotimo: Your example screenshots for http://modules.perl6.org/dist/SDL2::Raw:cpan:TIMOTIMO aren't there anymore

[01:27] <geekosaur> perl 6 normally works in terms of "graphemes" (things that *look* like a character). some of these require combining codepoints, so a single Perl 6 "character" may be represented by more than one codepoint

[01:28] <psch> m: say "foo\r\n" ~~ /o\xd/

[01:28] <camelia> rakudo-moar a1fd0b732: OUTPUT: «Nil␤»

[01:28] <TimToady> and note that \n is special in regex, and matches any common newline sequence

[01:29] <psch> m: say so "\r" ~~ /\n/

[01:29] <camelia> rakudo-moar : OUTPUT: «Cannot allocate memory»

[01:29] <psch> uh

[01:29] <TimToady> coolio!

[01:29] <benjisomething> So how do I find all newlines lol

[01:29] <TimToady> a very bug

[01:29] <b2gills> m: say so "\r" ~~ /\n/

[01:29] <camelia> rakudo-moar a1fd0b732: OUTPUT: «True␤»

[01:30] <TimToady> was there anything different?  or did we just see a resource failure?

[01:30] <benjisomething> doesn't look different at all

[01:30] <benjisomething> I tried it a few time on my machine and it returns true every time

[01:31] <timotimo> benjisomething: damn, i'm not sure how to make those links proper

[01:31] <timotimo> http://modules.perl6.org/dist/SDL2::Raw:cpan:TIMOTIMO/  - if you use this URL, i.e. with a / at the end, you can click the links in the readme

[01:31] <benjisomething> Hey timo

[01:32] <benjisomething> I've made a few raytracers, and I've tried gd/cairo/sdl

[01:32] <benjisomething> What do you think is optimal for raytracers?

[01:32] <b2gills> m: (1..9000).grep({.chr ~~ /\n/}).map: *.uniname.say # all characters that /\n/ matches

[01:32] <camelia> rakudo-moar a1fd0b732: OUTPUT: «<control-000A>␤<control-000B>␤<control-000C>␤<control-000D>␤<control-0085>␤LINE SEPARATOR␤PARAGRAPH SEPARATOR␤»

[01:32] <benjisomething> I'd say probably something that just outputs a simple bitmap

[01:32] <timotimo> you can get a bitmap on the screen somewhat easily with SDL2. cairo is probably a bit too much, because you can't get a window to display stuff with unless you also use gtk or something similar

[01:32] <timotimo> and i think gd also won't open a window for you

[01:33] <benjisomething> I tried to make a library for exporting bitmaps from direct pixel colors in julia

[01:33] <benjisomething> but it was a hassle

[01:33] <benjisomething> which do you think is the fastest?

[01:33] <benjisomething> I always have to thread my raytracers like crazy for them to do it in a timely manner

[01:33] <timotimo> see the white noise example, it shows how you can access an array of pixel data to show something on the screen

[01:33] <benjisomething> alright, ty

[01:34] <timotimo> it uses the RGB332 pixelformat so every byte is one pixel and it still has color

[01:34] <timotimo> but you can choose something bigger (if you adjust the pitch calculation as commented out)

[01:35] <timotimo> like ARGB8888

[01:35] <benjisomething> is RGB332 standard 1-255 color

[01:36] <timotimo> i don't think so, no

[01:36] <benjisomething> hm

[01:37] <benjisomething> oh, 8-bit has a max of 256 colors?

[01:38] <benjisomething> I think once you get to 16-bit it goes up to 65535 or whatever that number is

[01:38] <benjisomething> which is the R1-255 G1-255 B1-255

[01:38] <timotimo> yup, that's correct

[01:39] <timotimo> er, no, wait

[01:39] <geekosaur> generally, yes. but RGB332 means 3 bits for the red channel, 3 for green, 2 for blue. usually you want to use 24 or 32 bit color so you get 0-255 for each color channel (and optionally 0-255 for transparency)

[01:39] <benjisomething> ah, yeah, that's what I was thinking

[01:39] <benjisomething> hm

[01:39] <benjisomething> I could make a sweet terminal raytracer that outputs to ncurses lol

[01:42] <benjisomething> timotimo: Can you easily save an sdl surface/screen/whatever to a png/bmp

[01:42] <benjisomething> I seem to remember you could with png

[01:42] <timotimo> probably just need to bind this function: http://wiki.libsdl.org/SDL_SaveBMP

[01:43] <benjisomething> is that already included in SDL2::Raw?

[01:45] <timotimo> don't think so, but it's trivial to add

[01:46] <timotimo> though actually

[01:46] <timotimo> what you have there is a texture, but you need a surface for that. so you'll also need a conversion function

[01:46] <benjisomething> ;-;

[01:46] <benjisomething> sounds annoying

[01:47] <timotimo> and there's a CreateTextureFromSurface, but i don't see one for the other way around

[01:47] <timotimo> fret not, though. you can CreateSurfaceFrom raw pixel data

[01:47] <timotimo> http://wiki.libsdl.org/SDL_CreateRGBSurfaceFrom

[01:47] <benjisomething> is there any simple library that can output pixel data to bitmaps?

[01:47] <benjisomething> that would be pretty good 

[01:47] <timotimo> there's a library that outputs pngs that are not compressed

[01:47] <benjisomething> ooh

[01:47] <benjisomething> I wonder how speedy that could be

[01:48] <timotimo> https://github.com/cygx/p6-image-png-inflated

[01:48] <benjisomething> do you think it could work well with raytracers?

[01:49] <timotimo> probably. without SDL you probably won't have live preview, but you can just copy image data to a file every few seconds and just refresh that in your image viewer

[01:49] <benjisomething> hmm, that could be cool

[01:49] <benjisomething> and then I could even piece together png frames with ffmpeg

[01:49] <timotimo> sure

[01:49] <benjisomething> you have a blog right?

[01:49] <benjisomething> I think i asked you months ago

[01:49] <benjisomething> under a different username lol

[01:50] <timotimo> i used to blog the perl6weekly, but liz does that almost exclusively since almost a year

[01:50] <benjisomething> ah, so no personal blog then I guess

[01:50] <timotimo> i don't have a personal blog or something, but i'll set one up in at least a month or two

[01:50] <benjisomething> I see

[01:51] <timotimo> the png inflated module is probably not performance-tuned yet, but you can copy the pixel data and save them to disk on a thread with start { ... }

[01:52] <timotimo> gotta go to bed now, seeya and good luck!

[01:52] <benjisomething> night night

[01:52] <timotimo> https://github.com/raydiak/pray - if you want to, you can take inspiration from Pray, another perl6 ray tracer. it's not been touched in a long time, though, so might not work right away without some minor changes

[01:55] *** Matthew[m] left
[01:56] *** Juerd joined
[01:56] *** salva joined
[01:56] *** robinsmidsrod joined
[01:56] *** Altreus joined
[01:56] *** dustinm` joined
[01:56] *** BuildTheRobots joined
[01:56] *** mienaikage joined
[01:57] *** evalable6 left
[01:57] *** coverable6 left
[01:57] *** rgrau left
[01:57] *** committable6 left
[01:58] *** Matthew[m] joined
[01:58] *** unicodable6 left
[02:00] *** rgrau joined
[02:17] <benjisomething> Can someone dumb this down for me `blob8.new(^256 .flatmap: { $_ xx 3, 255 });`

[02:18] <psch> m: say ^256 .flatmap: { $_ xx 3, 255 }

[02:18] <camelia> rakudo-moar a1fd0b732: OUTPUT: «(0 0 0 255 1 1 1 255 2 2 2 255 3 3 3 255 4 4 4 255 5 5 5 255 6 6 6 255 7 7 7 255 8 8 8 255 9 9 9 255 10 10 10 255 11 11 11 255 12 12 12 255 13 13 13 255 14 14 14 255 15 15 15 255 16 16 16 255 17 17 17 255 18 18 18 255 19 19 19 255 20 20 20 255 21 21 2…»

[02:18] <AlexDaniel> m: say "foo\r\n" ~~ /o\xd/

[02:18] <camelia> rakudo-moar a1fd0b732: OUTPUT: «Nil␤»

[02:18] <psch> benjisomething: looks like "all greys in RGBA" to me

[02:18] <AlexDaniel> m: say "foo\r\n" ~~ /o\xd/

[02:18] <camelia> rakudo-moar a1fd0b732: OUTPUT: «Nil␤»

[02:19] <psch> m: say ^256 .map: { $_ xx 3, 255 }

[02:19] <camelia> rakudo-moar a1fd0b732: OUTPUT: «(((0 0 0) 255) ((1 1 1) 255) ((2 2 2) 255) ((3 3 3) 255) ((4 4 4) 255) ((5 5 5) 255) ((6 6 6) 255) ((7 7 7) 255) ((8 8 8) 255) ((9 9 9) 255) ((10 10 10) 255) ((11 11 11) 255) ((12 12 12) 255) ((13 13 13) 255) ((14 14 14) 255) ((15 15 15) 255) ((16 16 …»

[02:19] <AlexDaniel> yea it's .map(…).flat I think

[02:19] <psch> ah, both sides flat 

[02:20] <AlexDaniel> flatmap discussion: https://rt.perl.org/Ticket/Display.html?id=130520

[02:20] <psch> AlexDaniel++

[02:21] <geekosaur> there is one other cleverness in there, the space before the .flatmap makes flatmap method be called on the Range object produced by ^256 instead of on 256. (I'm not actually fond of that particular precedence hack.)

[02:22] <psch> yeah, i'm a bit iffy about the precedence change for <methodop> with a magic invisible unspace

[02:23] <psch> i think we already had that before i ducked out though and i didn't complain enough then probably so eh :)

[02:23] <geekosaur> I thought it wasn't a change, just a "clever" use of what already existed

[02:24] <geekosaur> but I strongly prefer readable over "clever", so magic spaces annoy me a bit

[02:25] <psch> m: say ^256\ .flatmap: $_

[02:25] <camelia> rakudo-moar a1fd0b732: OUTPUT: «Cannot resolve caller flatmap(Int: Any); none of these signatures match:␤    ($: &block, :$label, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[02:25] <psch> m: say ^256\ .flatmap: { $_ }

[02:25] <camelia> rakudo-moar a1fd0b732: OUTPUT: «^1␤»

[02:25] <psch> m: say ^256 \ .flatmap: { $_ }

[02:25] <camelia> rakudo-moar a1fd0b732: OUTPUT: «(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86…»

[02:25] <psch> m: say ^256.flatmap: { $_ }

[02:25] <camelia> rakudo-moar a1fd0b732: OUTPUT: «Potential difficulties:␤    Precedence of ^ is looser than method call; please parenthesize␤    at <tmp>:1␤    ------> 3say ^2567⏏5.flatmap: { $_ }␤^1␤»

[02:25] <AlexDaniel> m: !

[02:25] <camelia> rakudo-moar a1fd0b732: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Prefix ! requires an argument, but no valid term found␤at <tmp>:1␤------> 3!7⏏5<EOL>␤    expecting any of:␤        prefix␤»

[02:26] <benjisomething> I much prefer readable over clever

[02:26] <benjisomething> but then again, I'm not great at reading any perl6 lol

[02:26] *** cdg left
[02:27] <psch> geekosaur: i think we got "space before <methodop> changes its precedence" something like two years ago or so?  ISTR the reason being method chaining with line breaks..?

[02:27] <geekosaur> hm, possibly

[02:27] <psch> can't find a relevant seeming commint right now though

[02:28] <geekosaur> I thought that was done differently

[02:28] <psch> m: "foo" . say

[02:28] <camelia> rakudo-moar a1fd0b732: OUTPUT: «foo␤»

[02:28] <geekosaur> actually I thought that was not precedence, it was a straight-up syntax error before

[02:28] *** cdg joined
[02:29] <geekosaur> . for method call didn't accept *any* whitespace

[02:29] <geekosaur> you had to use unspace to split it over a line before that

[02:33] *** cdg left
[02:33] *** cdg joined
[02:37] *** mempko left
[02:37] *** cdg left
[02:44] <AlexDaniel> I guess unspace works better anyway?

[02:44] <AlexDaniel> because you will not run into precedence differences

[02:46] *** ilbot3 left
[02:48] <psch> geekosaur: there was the perl5-ism warning i think?

[02:49] <psch> m: say "foo" . "bar" # this one

[02:49] <camelia> rakudo-moar a1fd0b732: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of . to concatenate strings; in Perl 6 please use ~␤at <tmp>:1␤------> 3say "foo" .7⏏5 "bar" # this one␤»

[02:50] <psch> geekosaur: but yes, i think it is actually two <methodop>s instead of one with multiple precedences

[02:51] <psch> geekosaur: so you're right, it was added :)

[02:51] <geekosaur> it's worse than that. iirc foo.bar is parsed differently to start with (the . is not an operator)

[02:51] <geekosaur> but that wasn't the change, it was always that way (one parsed directly, the other an operator)

[02:56] *** ilbot3 joined
[02:56] *** ChanServ sets mode: +v ilbot3

[02:56] *** jeromelanteri joined
[03:05] *** ponbiki left
[03:18] *** eliasr left
[03:21] *** troys_ is now known as troys

[03:30] *** sjn left
[03:30] *** kst left
[03:30] *** tinita left
[03:30] *** mspo joined
[03:30] *** domm joined
[03:30] *** kst joined
[03:30] *** sjn joined
[03:31] *** clkao joined
[03:31] *** olinkl joined
[03:32] *** jhill_ joined
[03:32] *** rgrau left
[03:33] *** squashable6 left
[03:33] *** bloatable6 left
[03:33] *** squashable6 joined
[03:35] *** jdv79 joined
[03:35] *** tinita joined
[03:35] <mspo> u: a

[03:37] *** rgrau joined
[03:37] *** Actualey` left
[03:46] *** Kaiepi left
[03:47] *** Kaiepi joined
[03:57] *** bloatable6 joined
[03:58] *** unicodable6 joined
[03:58] <AlexDaniel> u: a

[03:58] <unicodable6> AlexDaniel, U+000A <control-000A> [Cc] (control character)

[03:58] <unicodable6> AlexDaniel, U+001A <control-001A> [Cc] (control character)

[03:58] <unicodable6> AlexDaniel, Cowardly refusing to gist more than 5000 lines

[03:58] <AlexDaniel> mspo: heh well, that seems to be “a” :)

[04:02] <mspo> u: 

[04:02] <unicodable6> mspo, Found nothing!

[04:03] *** jcallen left
[04:11] *** astj_ left
[04:11] *** astj joined
[04:13] *** astj left
[04:13] *** astj joined
[04:14] *** mtj_ joined
[04:20] *** jcallen joined
[04:34] *** Cabanossi left
[04:34] *** dj_goku left
[04:37] *** Cabanossi joined
[04:42] *** benjisomething left
[04:43] *** troys is now known as troys_

[04:44] *** vichib joined
[04:48] <vichib> is there tk bindings for perl6?

[04:56] <stmuk> vichib: I think people tend to use GTK today

[05:07] *** khw left
[05:25] *** aborazmeh left
[05:27] *** cdg joined
[05:29] *** wamba joined
[05:32] *** cdg left
[05:38] *** bulat_ joined
[05:39] *** mempko joined
[05:39] <bulat_> Hi.

[05:39] <bulat_> How do I print to stderr using say?

[05:39] <bulat_> Thansk.

[05:40] <b2gills> m: { my $*OUT = $*ERR; say 'foo' }

[05:40] <camelia> rakudo-moar 14c28cae4: OUTPUT: «foo␤»

[05:40] <b2gills> or just use `note` instead of `say`

[05:40] <AlexDaniel> m: $*ERR.say: 42

[05:40] <camelia> rakudo-moar 14c28cae4: OUTPUT: «42␤»

[05:44] <bulat_> @AlexDaniel, how do I pass multiple args to $*ERR?

[05:45] <AlexDaniel> not entirely sure what you mean by that

[05:45] <AlexDaniel> if you want to call say with multiple arguments, then sure you can do it

[05:45] <AlexDaniel> m: $*ERR.say: 42, 50, 80

[05:45] <camelia> rakudo-moar 14c28cae4: OUTPUT: «425080␤»

[05:46] <bulat_> Why isn't it possible to call $*ERR.say 42, 50, 80;

[05:46] <bulat_> I tried, it errs.

[05:46] <AlexDaniel> because that's a method call

[05:46] <AlexDaniel> ideally you'd write it as

[05:46] <AlexDaniel> m: $*ERR.say(42, 50, 80)

[05:46] <camelia> rakudo-moar 14c28cae4: OUTPUT: «425080␤»

[05:46] <AlexDaniel> but I like fancy stuff [and don't like parens]  so I use : instead ☺

[05:47] <bulat_> So usual "say" is ordinary function?

[05:47] <AlexDaniel> yes

[05:47] <bulat_> Thank you.

[05:48] *** imcsk8 left
[05:48] <AlexDaniel> bulat_: fwiw, if you want to use something similar in a function form, then just use `note` as suggested above

[05:48] <AlexDaniel> m: note 42, 50, 80

[05:48] <camelia> rakudo-moar 14c28cae4: OUTPUT: «425080␤»

[05:48] <AlexDaniel> it's identical to say except that it prints to $*ERR

[05:50] *** squashable6 left
[05:50] *** statisfiable6 left
[05:50] *** player joined
[05:50] *** committable6 joined
[05:50] *** squashable6 joined
[05:50] *** statisfiable6 joined
[05:50] *** ChanServ sets mode: +v statisfiable6

[06:02] <moritz> m: $*ERR.say: 42, 50, 80

[06:02] <camelia> rakudo-moar 14c28cae4: OUTPUT: «425080␤»

[06:07] <player> Why say so 'a b c' ~~ m:s/a     b     c/ gives true?

[06:09] *** nige joined
[06:10] <nige> just wanted to pop in to make a suggestion - regarding Perl 5 and Perl 6

[06:10] <yoleaux> 17 Dec 2017 21:50Z <b2gills> nige: There is no entry for any version of Perl other than 1.0 https://en.wikipedia.org/wiki/Timeline_of_programming_languages

[06:11] *** Zoffix joined
[06:11] <nige> ^ - thanks b2gills I think lizmat++ sorted that

[06:12] <Zoffix> player: because `:s` makes whitespace significant, not literal. The whitespace after atoms in regex becomes a <.ws> call that can match a bunch of whitespace. It's like using `rule` instead of `token` inside grammars.

[06:13] <nige> I quite like the way the Apache foundation handles its branding

[06:14] <Zoffix> Relevant docs: https://docs.perl6.org/syntax/:sigspace https://docs.perl6.org/language/grammars#index-entry-ws-ws

[06:14] <nige> "Apache" used to be a web server - but it's now much more than that

[06:14] <nige> there are over 150 flourishing subprojects associated with the Apache master brand: Apache Hadoop, Apache Hive etc

[06:15] <nige> is it time to free all the butterflies? ;-)

[06:15] <nige> the suggestion is is that Perl becomes a master brand - similar to the Apache foundation

[06:16] <nige> I think we need three distinctive runtime brand names

[06:17] <nige> "perl" the runtime for legacy Perl 5 code

[06:17] <nige> and two new runtime names - one for Perl 5 and one for Perl 6

[06:17] <nige> for the next releases of these respective languages

[06:19] <nige> each subcommunity could shortlist some names and submit them to Larry - to choose a name for each

[06:20] <nige> both languages are free to flourish - with their own distinctive brands and sub-cultures

[06:20] <Zoffix> bulat_: $*ERR is just a variable (a dynamic one). It simply contains an IO::Handle object that's open to STDERR. `$*ERR.say: 1, 2, 3;` (by default) is like `my $handle = open :w, IO::Special.new: '<STDERR>'; $handle.say: 1, 2, 3`;   Although in most circumstances you can omit parentheses on subroutine calls (and can write `say 1, 2, 3`) they're required on method calls, so `$*ERR.say 1, 2, 3` was erroring out

[06:20] <Zoffix> for you because you missed the parentheses. And as others mentioned, you can use `:` instead of parentheses for trailing method calls and just write `$*ERR.say: 1, 2, 3`. (or just `note 1, 2, 3`, since it uses $*ERR under the hood)

[06:21] *** darutoko joined
[06:21] <nige> while at the same time being part of the Perl family and its culture and history

[06:21] <Zoffix> nige: wasn't that already tried in Perl 5 land in the form of "Pumpkin Perl" and wasn't wildly successful?

[06:21] <nige> HTH - just wanted to share this idea

[06:22] <nige> I remember hearing about that - I wonder it might help if both languages rebrand at the same time

[06:23] <nige> - I'm really just referring to the runtime name at this point

[06:24] <Zoffix> nige: in the perfect world, perhaps. The Perl 6 rebranding discussion is very difficult. I imagine it'd be much much larger for Perl 5. And to do both at the same time seems to be the sum of both

[06:25] <nige> I think "Perl" as a brand has outgrown it's association with a particular runtime - like Apache outgrew it's initial project

[06:25] <Zoffix> nige: that kinda complicates the process, because in Perl 6 land the runtime already has a different brand: "Rakudo". It's the language name that's the issue

[06:25] <nige> Yes - I hear your Zoffix - I know this is a BIG ask

[06:26] <nige> when I run perl6 at the command line I use "perl6" not rakudo at the moment

[06:27] <nige> it's what people type in for the runtime - that I think need separate branding

[06:27] <Zoffix> I type "6" at the command line when I use Rakudo.

[06:28] <nige> would be difficult to trade mark that ;-)

[06:28] <nige> 666 is already taken for one

[06:30] <nige> like all good brands - honesty is important

[06:30] <nige> "Perl" is more than perl and it's more than perl6

[06:31] <Zoffix> And what is it?

[06:31] <nige> it should become the master brand - because honestly that's what it is IMHO

[06:32] <nige> similar to Apache - it's the master brand for lots of subprojects - it's a natural progression of the brand

[06:32] <nige> TMTOTMTI

[06:32] <nige> There's More Than One Trademark To It ;-)

[06:33] * Zoffix cues in relevant remarks from TimToady and goes back to hacking on guts: https://www.youtube.com/watch?time_continue=4885&v=E5t8qaAGw9w

[06:33] *** Zoffix left
[06:33] *** domidumont joined
[06:38] *** domidumont left
[06:39] <nige> thanks for the link - it sounds like TimToady++ is open to marketing "Perl" under different names - or have I misunderstood?

[06:39] *** domidumont joined
[06:47] *** parv joined
[06:50] <AlexDaniel> nige: that's my understanding also

[06:54] <nige> TimToady++ also made the point there - that deep down he sees it as all Perl - which I think points to "Perl" as the master brand

[06:55] *** lowbro joined
[06:55] *** lowbro left
[06:55] *** lowbro joined
[06:56] <nige> now we *just* need some distinctive marketing names (aka brand names) for the respective runtimes commands - so there is no collision at the command-line

[07:01] <nige> IMHO - three runtime names are required: "perl" for legacy Perl 5 and a completely new name for the perl5 runtime command going into the future and a new name for perl6 

[07:02] *** hoelzro left
[07:05] <nige> I can almost hear a collective groan ^ at the suggestion above - it doesn't have to be painful - and could reinvigorate each subculture/project

[07:07] <El_Che> morgen

[07:08] <El_Che> did we all have a good night rest?

[07:08] <El_Che> (or afternoon nap :) )

[07:16] <El_Che> Zoffix: Perl 6 could take the high road and rename it self without expecting Perl 5 to rename it self

[07:20] <El_Che> as I see it, Perl 6 can pull off being a "new" language, historical Perl can. Also Perl 5 can benefit from the positive Perl association (backwards compatible, installed everywhere, ducktape), while Perl 6 does not (and is damaged by the undeserved bad rep that some people have of perl 5)

[07:21] <El_Che> if the 2 lang narrative does not hold, I don't see the point of 2 langs with the name Perl in it

[07:24] <El_Che> (and now I'll stop annoying people)

[07:30] *** melezhik left
[07:30] <nige> El_Che I think it's fair to say that the status quo is annoying people - we may need to invest some positive energy in getting to a good place

[07:31] <El_Che> nige: the fragile status quo seem to be gone yesterday

[07:34] <El_Che> (not that the status quo was a desirable state)

[07:35] <El_Che> the new status quo (nothing changed with the langs) now with people with pitchforks it's maybe an opportunity for both langauges

[07:35] <El_Che> I hope it could be, at least

[07:36] *** rindolf joined
[07:38] *** parv left
[07:38] *** parv joined
[07:39] <TEttinger> perl, pearl, purl

[07:39] <moritz> PRL!

[07:39] <TEttinger> hehe PRRRL

[07:40] *** mspo left
[07:40] <TEttinger> praline is a nice thing to name after

[07:40] <TEttinger> I can't remember exactly what it is but I like it in ice cream (is it candied pecans?)

[07:41] <TEttinger> was perl initially an acronym?

[07:41] <TEttinger> PHP is that weird recursive acronym now

[07:42] <TEttinger> Parlance might be interesting, a term for a sorta personal section of a language

[07:43] <El_Che> TEttinger: Praline is a small stuffed chocolate

[07:43] <TEttinger> also, lance, everybody likes medieval weapons

[07:43] *** zakharyas joined
[07:44] <El_Che> TEttinger: I am pretty sure moritz would agree with "Lenz"

[07:44] <TEttinger> Internet Experler

[07:44] <TEttinger> Internet Experler 5.5

[07:44] <TEttinger> "worst of all worlds"

[07:44] <El_Che> Machine Learning Big Data Microservice Container-based runtime

[07:45] <TEttinger> ExaNanoNeuralScale

[07:46] <TEttinger> why Lenz?

[07:48] <TEttinger> something butterfly themed... Monarch, Luna, Clearwing

[07:48] <El_Che> It's a famous Perl 6 book author

[07:49] <moritz> nah, don't go naming stuff after me before I'm dead

[07:49] <TEttinger> Luna is too close to Lua

[07:49] <El_Che> moritz: if it would solve our situation it may be considered...

[07:49] *** zakharyas left
[07:49] <moritz> after I'm dead, I no longer care, and you can do as you want :)

[07:50] <TEttinger> Nectar (butterflies love it)

[07:50] *** zakharyas joined
[07:50] <El_Che> moritz: the solution may be hastened :)

[07:50] <TEttinger> you don't have to be dead to not care

[07:51] <TEttinger> you could get hooked on drugs stronger than perl 6

[07:53] *** wamba left
[07:55] <moritz> somehow I don't approve of the direction your thoughts are going :-)

[07:56] <TEttinger> you could binge-watch every show on netflix

[07:58] <TEttinger> after 10 seasons of various "Real Housewives of $SOMEWHERE_RICH", you probably wouldn't care about anything

[07:59] <moritz> doesn't sound appealing to somebody who writes programming books in his free time :-)

[08:00] *** domidumont left
[08:03] *** aindilis left
[08:03] *** aindilis joined
[08:07] <player> How to change working dir?

[08:07] <moritz> player: typically you run  indir "some directory", { code that runs in that directory }

[08:09] <moritz> https://docs.perl6.org/routine/indir

[08:10] <player> It says  NOTE: that this routine does NOT alter the process's current directory (see &*chdir)

[08:10] <player> It seems that indir doesn't change working dire, only variable.

[08:11] *** parv left
[08:15] <player> Only code in closure sees change PWD

[08:15] *** parv joined
[08:15] <player> after indir finishes, working dir is the same as it was before calling indir

[08:16] *** hobbs joined
[08:16] *** hobbs left
[08:16] *** hobbs joined
[08:20] <moritz> player: but if you use code inside of indir that uses the working directory (like accessing files, launching external processes etc.) they use the changed directory

[08:21] <moritz> player: so the question is really: why do you want to change directory?

[08:25] *** troys_ is now known as troys

[08:26] *** Actualeyes joined
[08:26] *** stux|RC-- left
[08:27] *** troys left
[08:27] *** stux|RC joined
[08:31] <moritz> the problem with chdir is that it's process-global, and not limited to the current thread

[08:31] <moritz> and so you should try to avoid it

[08:36] <player> @moritz, I want to change to other directory, and execute git commands there.

[08:37] <parv> bagh!

[08:37] <geekosaur> as moritz said, it handles that

[08:38] <geekosaur> there's also things like the JVM backend becoming confused if you change directory to where it can't find its jars etc., so chdir is emulated

[08:38] <player> Yes, but after indir, the program is still in old working directory.

[08:38] <player> And not the new one.

[08:38] <geekosaur> the *interpreter core* is

[08:38] <geekosaur> your code will behave as if it is tin the new directory

[08:39] <geekosaur> what are you doing that would not accept this? trying to do syscalls manually? (there's a proper way to do that as well)

[08:40] <geekosaur> ...in fact there shouldn't be a way to escape the abstraction, aside from badly written NativeCall. your program should not see a difference

[08:40] <geekosaur> if you absolutely believe you must micromanage everything, never write in anything but assembly language

[08:41] <player> I want to be in cloned git repository after given section.

[08:41] <player> https://hastebin.com/unilepoqog.pl

[08:42] <geekosaur> ok, abstraction goes over your head.

[08:42] *** scimon joined
[08:43] <scimon> Morning all. I hope everyone is feeling happy. 

[08:44] *** scimon left
[08:45] <player> @scimon, hi.

[08:45] <player> @geekosaur, so what should I do?

[08:46] <geekosaur> aapparently, stick to languages tht don;t do abstraction

[08:46] <player> Returning back to my old working directory restricts my program seriously.

[08:46] <player> Oh

[08:46] <geekosaur> why is there a difference between "the runtime makes sure things happen in the correct directory" and "the program always forcibly changes directory even if that breaks the jvm or another thread"

[08:47] <geekosaur> how do you ever program in other languages that happily do the latter?

[08:47] *** abraxxa joined
[08:47] <geekosaur> (yes, this *is* a common source of errors. people don;t get the difference between thread and process attributes.)

[08:49] <geekosaur> (...at some point I need to write up the haskell version of that faq, in fact. I end up fielding it often enough on irc...)

[08:49] *** scimon joined
[08:49] <scimon> And then I got a kernel patch.

[08:49] <player> You mean every thread has its own working dir?

[08:49] <geekosaur> and, sorry, I am more than a bit grumpy. kidmney stone and the drugs aren't helping in *any* sense

[08:49] *** wamba joined
[08:49] <scimon> So.... I had a thought last night while I looked at the chat logs after going to bed. 

[08:50] <geekosaur> player, perl 6 acts like it; that's why it's not *actually* changing dir unless it must. no other language does

[08:50] <scimon> geekosaur: sorry to here that :(

[08:50] <geekosaur> point big that you can act like every thread has its own directory and it will Just Work

[08:50] <geekosaur> *being

[08:50] <scimon> Anyhoo. I thought of a name, because we love the "Why not change the name" just call Perl 6 (drumroll) V6

[08:51] <player> Thanks.

[08:51] <scimon> V stands for V (definitely not Version) Just V.

[08:52] <parv> scimon, "V" as in "V for V just V", oui?

[08:53] <scimon> Perl can have a version 6 major release if they like. V6 versions use base 36 and the first stable one was 'c' (so after v6.z we go to v6.10) 

[08:53] <scimon> Oui :)

[08:55] <scimon> Just a random thought. I'm still trying to work out why there's so many Perl devs who are so angry about it. I mean I was working with 5.6 in my first job (so I didn't have to go through the 4 -> 5 release) but I've been working with perl for years now.

[08:56] <scimon> (Maybe that's it though. I have generally been working with it not being too involved with the community. For all it's talk it has not always been easy to get into.)

[08:56] <stmuk> I think the perl 5 devs are blaming perl 6 for the decrease in popularity of perl 5. Even although Perl 6 exists exactly as a solution to this problem as predicated in 2000

[08:57] <El_Che> scimon: if the name it's chaged, keeping the version is a terrible idea (for perl6 and perl5)

[08:57] <moritz> player: but the indir *around* the code calling git

[08:57] <stmuk> I don't think changing the names of anything will make any difference whatever

[08:57] <scimon> But the 6 (in v6) isn't the version. It's just part of the name. Like the ++ in C++

[08:57] <El_Che> scimon: if you're explaining the name because it's ambigous, you're doing it wrong :)

[08:58] <El_Che> stmuk: I honestly think it will

[08:58] <stmuk> the Naming Discussion is a complete waste of time

[08:58] <scimon> I mostly thought of it so all the scripts thyat say use v6; at the top don't need cahnged ;)

[08:58] <El_Che> stmuk: I can't count the numbers of people I have met that won't try Perl 6 because it's Perl

[08:59] <El_Che> stmuk: and the number of people that think Perl5 is dead because it's stuck to a major version

[08:59] <El_Che> stmuk: experiences are subjective, some people have different experiences, but this is what I've met so far

[08:59] <scimon> (As I say, I've been coding in Perl for 15+ years, and I've been having the arguments with management for much of the later time. It's not Perl6 that have hit Perl5's popularity it's node and Java nad python (not in that order)

[09:00] <scimon> Problem is majot version changes are hard. Heck python 2 -> 3 is still causing issues.

[09:00] <El_Che> scimon: people here know that :)

[09:02] <scimon> Anyway. I don't really care about the name. *Because* I don't care I'd be fine with changing it.

[09:03] <scimon> I'd rather work on selling the language on it's strengths and making useful libraries for people to use.

[09:03] <El_Che> scimon: the name is hurting Perl 5 more than Perl 6. I really see the argument there that Perl 5 people make

[09:03] <El_Che> scimon: it hurts Perl 6 too (a lot), but that's Perl 6's decision

[09:04] <stmuk> it seems impossible to have any serious discussion about the future of perl 5 and 6 without the same tired arguments coming up time and time again

[09:04] <El_Che> stmuk: why do you think it's that?

[09:04] <El_Che> stmuk: because nothing is ever solved

[09:05] <El_Che> stmuk: the 2 langs narrative offered a truce for some time. 

[09:06] <El_Che> stmuk: it had the advantage of setting the naming discussion on the side for some time

[09:06] <stmuk> there is much bitterness in some parts of the community (look at p5p)

[09:06] <stmuk> I'm sticking to "sister"

[09:06] <El_Che> stmuk: bitterness, true

[09:06] <El_Che> but that's often the other side of the coin of love

[09:07] <stmuk> the idea of bring back "v5" is sadly lost in the noise

[09:07] <El_Che> stmuk: it was a fragile compromise at best...

[09:08] <stmuk> I guess its the "official line" still being on the perl6.org website

[09:08] <stmuk> although people can express their own opinions

[09:08] <El_Che> it is, as long as we don't sound as comical ali :)

[09:11] <DrForr> Larry has to allow a new name; until then the discussion is somewhat moot, but needs to go on so that the important player (note the lack of plural there) knows it's a proble.

[09:11] *** lookatme left
[09:11] <El_Che> Larry can change his mind

[09:11] <stmuk> maybe a slang of perl 1 "use v1" would be a starting point called "munie" or something :)

[09:11] <El_Che> thinking that the discussion/frustration will go away until then is quite optimistic

[09:12] <El_Che> the sister narrative was very fragile, but the best compromise so far. If it's not supported anymore, a new solution will be needed.

[09:13] <El_Che> Civil war while sharing the same name is Monty Python humour

[09:20] *** cdg joined
[09:22] *** domidumont joined
[09:23] *** dakkar joined
[09:23] <kraih> change the name to Python 6 :p

[09:24] *** cdg_ joined
[09:24] *** wamba left
[09:24] <scimon> It's a thought.

[09:25] <scimon> ;)

[09:25] <El_Che> kraih: you troll :)

[09:25] *** cdg left
[09:25] <TEttinger> there's a grain of truth there

[09:25] <El_Che> kraih: you could port Mojo to Perl 6 so people could say "Perl5 lost its mojo"

[09:26] <scimon> I guess because I've basically spent a lot of time not involved in this, I don't have the scars from the earleir attempts (I tried to get involved a few times but could never get my head around how to run it) I am still optimistic.

[09:26] <scimon> I feel that comment may not go down weel.

[09:26] <scimon> *well

[09:27] <TEttinger> if perl6 is really so different from perl5, why not name it something completely without bias, like COBOL_6

[09:27] <El_Che> which one? yours? my joke?

[09:27] <TEttinger> python's a start, we can go worse

[09:28] <huf> call it north perl

[09:28] <scimon> Well kraih seemed a bit negative last night. 

[09:28] <TEttinger> NBRE, Nothin' But Regular Expressions

[09:28] <scimon> I feel he was burnt in the past. Which sucks. 

[09:28] <TEttinger> Sigilicious

[09:28] *** cdg_ left
[09:29] *** Aceeri_ joined
[09:29] <TEttinger> sig.ilicio.us

[09:29] <scimon> Like I say, I'm an optimist. This is the first time in years I've really felt like I've found a language that works with my brain (which possibly says something about my brain) I've always liked Perl5 but I've possibly spent too much time dealing with scary scary scary codebases.

[09:32] *** wamba joined
[09:32] <scimon> Has to be said I'm mostly  focussed on the "Making a useful set of libraries for Perl6" part of the equation. 

[09:33] <scimon> And if some of them look a lot like Perl5 libs making it easier for people to start using them. Great.

[09:42] *** pmurias joined
[09:46] <pmurias> El_Che: re sister languages narrative, there is nothing for Perl 6 to gain in opposing Perl 5, and currently things like Python are more of a Perl 5 "replacement" than Perl 6

[09:47] *** Kaiepi left
[09:48] *** Kaiepi joined
[09:49] <lizmat> afk for a few hours&

[09:52] *** bulat_ left
[09:52] *** player left
[09:53] <kraih> the sentiment i hear most often in the Perl 5 community today is hope for Perl 6 to just fade into obscurity

[09:53] <kraih> that's a change from yesterday's "just rename Perl 6 and let both languages prosper"

[09:54] <jast> hey, renaming it to Python was my idea :/

[09:56] *** kraih left
[09:57] *** ponbiki joined
[09:59] *** pmurias left
[10:14] *** markong joined
[10:22] *** wamba left
[10:24] <DrForr> The forerunner was '6lang' last time I bothered to check; just use that and roll with it.

[10:25] <El_Che> not a fan of it, but better than what we have now

[10:26] *** TEttinger left
[10:28] *** pmurias joined
[10:29] <moritz> 6lang can't convince me

[10:30] <stmuk> I thought liz's post was about "v5" and not renaming! :)

[10:30] <El_Che> stmuk: wasn't the working title "let's open this can of worms"? :)

[10:31] <stmuk> apparently!

[10:32] <stmuk> wasn't the "v5" support removed from rakudo anyway?

[10:36] *** wamba joined
[10:36] <stmuk>  

[10:36] <stmuk> https://rt.perl.org/Public/Bug/Display.html?id=130834

[10:37] <DrForr> Well, we have 'use v6;' so the version syntax is still available. I think that got set aside in order to get something out the proverbial door.

[10:37] <stmuk> that rt was probably an error in hindsight

[10:38] <El_Che> hindsight? sir, do you have some time to talk about handsight? :P

[10:38] <El_Che> by now, we need doctor who

[10:39] <DrForr> I'm sure she'd set this straight.

[10:40] <stmuk> by pointlessly running around and spouting a lot of dull techno babble?

[10:40] <El_Che> stmuk: I haven't watched the episodes with the new dr yet, but it sounds you're not a big fan

[10:41] <DrForr> I don't think they've been released yet. I saw the regeneration teaser last week or so, that's been it so far.

[10:41] <stmuk> I grew up with the 70s ones and quite liked some of the shows from a decade or so ago but the recent ones have been as dull as ditchwater

[10:41] <El_Che> there is a christmas special waiting on my disk

[10:42] <El_Che> stmuk: they should rename the show

[10:42] * El_Che : mic drop

[10:42] <El_Che> :)

[10:42] <jast> doctor what

[10:42] <El_Che> doctor .WHAT

[10:44] <stmuk> Nurse Who :P

[10:44] * geekosaur hasn't been so fond of the reborn series either. then again, it's also not the movie.

[10:45] <geekosaur> which was more Doctor WAT

[10:46] <stmuk> I like Blink and Talons of Weng Chiang (although I was 11)

[10:48] <El_Che> I have no history with the old series, pretty fond of the reboot (as it's the only one I really know, except an old episode left and right)

[10:48] *** wamba left
[10:49] *** wamba joined
[10:57] *** domidumont left
[11:05] *** domidumont joined
[11:05] *** parv left
[11:07] *** aborazmeh joined
[11:07] *** aborazmeh left
[11:07] *** aborazmeh joined
[11:10] *** cdg joined
[11:14] *** cdg left
[11:23] <scimon> Old enough to remember watching the old shows (Tom Baker onwards) as a kid. Really wish they could have givne Peter Capaldi some better scripts. I am hopefully for the new series.

[11:24] <scimon> (And when is the Doctor going to learn to regenerate outside? Sheesh)

[11:24] <El_Che> didn't he run out of regeneration tokens?

[11:30] <geekosaur> wasn't 10 given a new set?

[11:30] <El_Che> maybe it's not really a bearer token

[11:30] <El_Che> and he can just renew it

[11:35] <scimon> So yeah, he ran out of regens. Then River song gave him all of hers... or the time lords gave him some at Trensalor... or something. Then he became Peter "I'm a bit moody and dark" Capaldi.... 

[11:35] <scimon> (I like stories sorry)

[11:36] <El_Che> scimon: good thing your getting marries. No way you're picking someone up with that story :)

[11:36] * geekosaur never got to see those eps

[11:36] <geekosaur> wondering if he's more like 2, or 6

[11:36] <scimon> She thinks I'm cute and smart. I try really hard to not disabuse her of these crazy notions.

[11:37] <El_Che> food

[11:37] <El_Che> scimon: haha. congratz btw

[11:37] <scimon> Cheers. 

[11:39] *** stmuk_ joined
[11:41] *** stmuk left
[11:41] <DrForr> scimon: Wasn't Baker's outside at the Jodrell Bank telescope?

[11:41] <scimon> Yup, he fell of it.

[11:42] <scimon> *off

[11:52] *** aborazmeh left
[12:08] *** wamba left
[12:10] <geekosaur> there's also the Troughton edge case

[12:10] <geekosaur> (outside the TARDIS at least)

[12:12] *** pmurias left
[12:12] *** pmurias joined
[12:14] *** zakharyas left
[12:18] *** Aceeri_ left
[12:26] <Altreus> is that the one in the film

[12:26] <Altreus> that we cunningly ignore unless required

[12:26] <Altreus> not the new film, the old one

[12:27] <DrForr> I thought that was Colin Baker -> Paul McGann? Though I'll admit to be somewhat out of the loop.

[12:28] <Altreus> Anyway I thought the TARDIS was instrumental in the regeneration nonsense

[12:28] <Altreus> and that's why he always regenerates inside it

[12:28] <Altreus> I say he

[12:28] <Altreus> they :P

[12:28] *** vichib left
[12:29] <scimon> Dalek Invasion Earth? Peter Cushing wasn't it?

[12:29] <scimon> Paul McGann was after the little chap... not Tom Baker...

[12:30] <scimon> No no. I think nowadays he regens inside so the huge light show can explode the tardis so they have an excuse to redecorate.

[12:31] *** stmuk joined
[12:31] *** jeromelanteri left
[12:31] <Altreus> Well you do have to keep your obsolete disguise fashionable

[12:33] <geekosaur> Altreus, when the Time Lords forced him to regenerate and trapped him on Earth (2ns -> 3rd Doctor)

[12:33] <geekosaur> although I am not recalling that sequence and never did manage to see the actual episode so it might have happened in the TARDIS

[12:33] *** stmuk_ left
[12:37] <DrForr> There are plenty of regeneration supercuts, and that one'll be fairly early on :)

[12:41] <scimon> :) Righto. 20 mins before my internal perl6 coding dojo. 

[12:42] <DrForr> Must hear how you arranged this at some time...

[12:43] *** eliasr joined
[12:46] *** pilne left
[12:46] *** Zoffix joined
[12:48] <Ulti> just read some of the back log... anyone who's livlihood is so fragile that Perl 5 not being selected by managers utterly affects their ability to live, need to *strongly* reconsider how they are thinking about their career as a programmer regardless of the status of Perl

[12:48] <Ulti> I think this is really the major issue there are "Perl 5 guys" left in Perl 5 in a condensed state and its a very strange state of a community

[12:49] <Ulti> I love Perl 6 but this year I've been doing 100% Python for work, the two years before that it was Perl 5 with a bit of JS

[12:50] <Ulti> at no point have I been unemployed waiting for Perl 6 to be something Im interested in or want to program in

[12:53] <DrForr> Most of my runs of unemployment have been waiting for companies to finish the (rather protracted, in my case) hiring process.

[12:53] <stmuk> I haven't seen any arguments in the backlog or on reddit which were new or different to the ones I've been hearing for years

[12:53] <Ulti> the period of time that P5 had a super strong hold on large scale commerical products was almost twenty years past and it was a short period of time.... its not like Perl ever had Java or C level usage and commercial mindset

[12:53] <stmuk> it seems any mention of perl 6 to the wider community just triggers "renamers"

[12:54] <Ulti> if you want software jobs for the rest of your life pick up a book on Java or C++

[12:54] <Ulti> Perl is a tool to use for the rest of your life that makes life immensely enjoyable and easy

[12:55] <Ulti> stmuk: yeah and the name I think probably did matter, if you changed it now it would make a lot of people happy... and then deeply unhappy

[12:55] <Zoffix> El_Che: the "high road"? As far as I'm concerned we're still on schedule to create a marketing alias for the name with 6.d release, as was always planned. People who yell the loudest about naming discussions being pointless and renames unachievable expect everything to change overnight, as soon as Proposal Name #13232 is announced by someone.

[12:56] <Ulti> which is probably why it should happen, so that the community can move past it

[12:57] <El_Che> Zoffix: glad to hear

[12:59] <El_Che> Zoffix: however, an alias does not help Perl 5

[13:00] <stmuk> liz's post wasn't about renaming I'm not sure why we allowed the agenda to be changed

[13:00] <El_Che> Zoffix: so it's not a solution for all the Perl community (which we assume it exists)

[13:00] <El_Che> stmuk: because the issue wasn't resolved and a sneeze would have teared it open again

[13:01] <stmuk> a vocal minority of perl 5 people hate perl 6 and you won't be able to make them happy

[13:02] <El_Che> true

[13:02] <El_Che> but it's not them I care about

[13:02] *** wander joined
[13:02] <El_Che> the malaise can not be reduce to that group

[13:03] <stmuk> you can call perl 6 Flibbertigibbet and people will still be angry

[13:03] <El_Che> Perl 5 and 6 *do* have a problem. Liz proposed her solution.

[13:03] <jast> what exactly is the goal with renaming, anyway? I'm still not really sure

[13:03] <Zoffix> El_Che: it does help. It's an opportunity for the renamers camp to prove the current name is as detrimental and the new name is as beneficial as they claim. If the hypothesis is true, the alias will naturally become the One True Name for the language through its mere use.

[13:03] <El_Che> Not everyone agrees with the solution, but most acknowledge there is a problem

[13:05] <El_Che> Zoffix: I see the plan. But it's still very Perl 6 centric: "we liberate the name only when whe are sure we benefit, otherwise screw you" could be an interpretation

[13:05] <lizmat> FWIW, I haven't heard anything new in the comments so far

[13:06] <DrForr> It'll be interesting to see what the undercurrents are at FOSDEM.

[13:06] <lizmat> only reaction on p5p by Zefram: https://www.nntp.perl.org/group/perl.perl5.porters/2018/01/msg248848.html

[13:06] <El_Che> lizmat: because it's the same discussion that has never gone away

[13:06] <El_Che> lizmat: bad timing for FOSDEM, though

[13:06] <Ulti> P5 and 6 having a unified runtime with full deep interop would be kind of amazing, especially if XS to some extent could be auto shimmed to NativeCall style stuff

[13:07] <stmuk> El_Che: it's nothing new and will probably be forgotten by FOSDEM

[13:07] <Zoffix> El_Che: I only care about Perl 6 as far as renaming goes. It's purely a way to market Perl 6 more efficiently rather than some concession to the Perl 5 camp.

[13:07] <lizmat> Ulti: I'm not saying that that will happen, I'm saying it *may* happen

[13:07] <stmuk> virtualsue will have Camelia soap bars at FOSDEM :)

[13:07] <lizmat> Ulti: but we need the CPAN Butterfly Plan first

[13:07] <El_Che> Zoffix: I disagree there. I am closer to lizmat's POV on that part: we're still a Perl community (or I want it to be like that)

[13:08] <pmurias> lizmat: why is the CPAN Butterfly Plan a requirement?

[13:08] <El_Che> Zoffix: therefor I want solutions than favour all the community

[13:08] <lizmat> because it would need to be done for a Butterfly Perl 5 Project

[13:08] <Ulti> lizmat: yeah it could the existing v5 is a good blob of evidence its possible

[13:08] <lizmat> even if you *would* create a Perl 5 runtime as a slang, you would still need oodles of modules that live in Perl 5 core and on CPAN

[13:09] <El_Che> Zoffix: would you be happy with Perl 5 jumping to 7 and make perl 6 looks like yesterdays news? Win-win for Perl 5.

[13:09] <El_Che> Zoffix: that's not the road we want to walk

[13:09] <DrForr> Triple-life modules now, 5 core, 5 CPAN and 6 CPAN :)

[13:09] <jast> do it like the browsers, bump version to 40 or something

[13:10] <stmuk> maybe try an easier language as a slang first perl 1 or something like was tried with Punie and parrot

[13:10] *** noganex left
[13:10] <DrForr> Drop the 5 and go the Java route :)

[13:10] <jast> Perl EE? :)

[13:10] <lizmat> stmuk: I see a different approach between use v5 and BP5P:

[13:10] <El_Che> Perl 6 could be the new JavaScript

[13:11] <lizmat> v5 tried to create a full fascimile of Perl 5 from the start

[13:11] <lizmat> with the entire Perl 5 test-suite

[13:11] <Zoffix> El_Che: I don't believe the existence of Perl 6 is Perl 5's biggest problem. There's a reason Perl 6 was started in the first place. They're now trying to implement more and more of Perl 6's features (signatures, smartmatch, `when` semantics) but without causing incompatibility breakage that Perl 6 accepted as inevitable and their users are freaking out (

[13:11] <Zoffix> https://www.nntp.perl.org/group/perl.perl5.porters/2017/12/msg248369.html ). Perl 6 is just their boogeyman IMO

[13:11] <pmurias> lizmat: some of the XS-using internals exposing modules would need to be adapted in some way for Butterfly Perl 5, but things like DBI wouldn't

[13:11] *** noganex joined
[13:11] <lizmat> I see BP5P as more of a "make baby Perl 5 work and take it from there" approch

[13:12] <jast> is there any initial work in that direction yet?

[13:12] <lizmat> pmurias: why wouldn't DBU need to be adapted / migrated ?

[13:12] <stmuk> perl 6 is certainly the perl 5 scapegoat 

[13:12] <El_Che> Zoffix: of course you're right. But it's *not* a purely --or even-- technical discussion

[13:12] <stmuk> I thought the original "v5" slang approach a good one

[13:13] <stmuk> https://perl6advent.wordpress.com/2013/12/16/day-16-slangs/

[13:13] <Zoffix> El_Che: I might be happy if they rename to Perl 7, yeah. It'd give the Perl 6's language alias more desirability. But it'd be totally stupid for Perl 5 to be renamed to Perl 7 **right now** as they don't have anything nice to offer to justify a major release.

[13:13] <jast> as someone who has used perl 5 a lot and who isn't heavily invested in either language, I see that p5 has kept many of its quirks (syntactical and otherwise) and languages in the same genre have left theirs behind (and many new languages have appeared)... and if anything has caused a decline in p5's popularity, it's probably that

[13:13] <pmurias> lizmat: I forgot the DBI drivers have XS parts, but stuff like DBIx::Class could be just loaded by Butterfly Perl 5

[13:14] <stmuk> froggs had over 4000 perl 5 tests passing

[13:14] <lizmat> pmurias: indeed

[13:15] <Zoffix> stmuk: yeah, but which Perl 5 does "use v5" enable?

[13:15] <lizmat> stmuk: but use v5 was about also supporting all of the "difficult" perl 5 code, the code that typically lives inside modules

[13:15] <lizmat> CPAN modules

[13:15] <pmurias> it's interesting to see that TruffleRuby on the JVM just run the Ruby XS equivalent on the JVM using their LLVM-on-JVM implementation

[13:16] <stmuk> Zoffix: not sure what you mean

[13:16] <El_Che> Zoffix: agreed 

[13:16] <lizmat> afk for 30 mins or so&

[13:18] <Zoffix> stmuk: there are differences in Perl 5 versions. If I write `use v5;` what version gets loaded?

[13:20] <DrForr> 'use v5 :ver<22>' :)

[13:20] <pmurias> Zoffix: emulating the behavior of a latest Perl 5 without a version declaration seems best

[13:21] <stmuk> Zoffix: an arbitary recent one with attempts to catch up every few releases

[13:22] <stmuk> its a moving target (although slow moving target) 

[13:22] <Zoffix> Doesn't that defeat the purpose of porting [old] modules to Perl 6?

[13:22] *** zakharyas joined
[13:23] <Zoffix> i.e. if I use a module that hasn't been updated for latest smartmatch changes, `use v5` will crap out on it and I have no options left. With Inline::Perl5, I can just lock my application to a specific version of Perl 5

[13:23] <Zoffix> (and yes, I know those changes were reverted now, but the point stands)

[13:23] <pmurias> Zoffix: Perl 5 is assumed to be back compatible

[13:24] <El_Che> pmurias: you missed the smartmatch discussion :)

[13:24] <Zoffix> pmurias: But that's not reality.

[13:25] <Zoffix> And another point to it: we currently do have a portion of what you propose implemented: :P5 regex modifier. It's poorly tested, buggy, and last I saw seemed to miss some features going back as far as 5.10. Considering this small part of the language doesn't have enough maintainers, is it reasonable a slang for the entire language has more viability?

[13:25] * Zoffix has to go do @things

[13:25] <Zoffix> \o

[13:25] *** Zoffix left
[13:31] <stmuk> running perl 5 under perl 6 is clearly desirable (and has always been a stated aim) but I doubt its currently practical (at least until speed issues and much else is fixed)

[13:33] *** wamba joined
[13:36] <AlexDaniel> I see everyone has a lot of energy today. You guys should check these out: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22

[13:36] * AlexDaniel is struggling with cold

[13:37] * DrForr has been struggling with backache :/

[13:38] * El_Che has been struggling with this Perl 5 & 6 thing

[13:40] <AlexDaniel> not saying that 5/6 thing is not important, just saying that some help with the blockers will… help :)

[13:55] *** cdg joined
[13:56] *** wamba left
[14:13] *** bisectable6 left
[14:14] *** bisectable6 joined
[14:17] *** mspo joined
[14:19] *** natrys joined
[14:19] *** nige left
[14:19] <scimon> DrForr: It's mostly on my lunch break :) 50% increase in attendee's this week (up to 3!) Took our new dev through some of the ways Perl5 and 6 differ as he'd never done any :)

[14:20] <b2gills> [backlogging] As for re-branding, either both projects should re-brand at the exact same time or they should keep the identities they have and push forward together. I'm tired of seeing the bickering happen between my two favorite languages.

[14:21] <scimon> AlexDaniel: I don't think my Perl6 fu is strong enough yet. And my nqp fu is worse.

[14:21] <AlexDaniel> strong enough for what?

[14:22] <scimon> Well looking at the open issues.

[14:29] *** efg left
[14:30] <lizmat> commute to Niederrhein.PM meeting&

[14:30] *** lizmat left
[14:31] *** lizmat joined
[14:31] *** lizmat left
[14:39] *** releasable6 left
[14:39] *** greppable6 left
[14:39] *** releasable6 joined
[14:39] *** greppable6 joined
[14:39] *** ChanServ sets mode: +v greppable6

[14:43] *** pmurias left
[14:49] *** pmurias joined
[14:52] *** zakharyas left
[14:53] *** zakharyas joined
[14:57] *** zakharyas left
[14:57] *** zakharyas joined
[14:59] *** nige joined
[15:23] *** bart__ joined
[15:28] <scimon> (Coding dojo included a small detour into how to playing Magic the Gathering and why I wrote a perl6 script to handle card interactions)

[15:31] *** lowbro left
[15:38] *** vike1 joined
[15:38] *** vike left
[15:39] *** pmurias left
[15:41] *** bart__ is now known as brrt

[15:51] *** ilbot3 left
[15:52] *** ilbot3 joined
[15:52] *** ChanServ sets mode: +v ilbot3

[16:01] *** wamba joined
[16:02] *** cdg left
[16:02] *** cdg joined
[16:03] *** notbenh left
[16:05] *** zakharyas left
[16:05] *** zakharyas1 joined
[16:12] *** mempko left
[16:12] *** brrt left
[16:17] <scimon> I've got it! 玑 6 Or TLFKAP6 

[16:18] <scimon> If it worked for Prince....

[16:19] *** MilkmanDan joined
[16:29] <timotimo> prinsix

[16:34] <scimon> Actually the more I think about it 玑 (or Ji) is a nice name.

[16:34] <scimon> Ok jī to be correct. 

[16:35] <jast> a.k.a. ungoogleable

[16:36] <scimon> Because A) it's unicode! Yay! B) no mention of 6 so everyone who is complaining we stole the 6 can be quiet and C) it means irregularly shaped pearl which is fun. 

[16:36] <scimon> And.... it's ungoogleable .

[16:36] <scimon> Sheesh everyone's got some kind of issue. ;)

[16:36] <jast> I was thinking... if Perl is taken, how about Dimond ;)

[16:43] <scimon> You mean 🔹

[16:43] <scimon> :D

[16:44] <scimon> On vague serious having a unicode variant of the name would be kinda awesome..... I think I need more sleep.

[16:44] <jast> no, that's a diamond

[16:44] <jast> there is... 🦋

[16:45] <jast> none of these render in my IRC client, but I think that's right

[16:45] <scimon> Di🔹mond

[16:45] <scimon> So yours didn't for me but the small blue diamond did.

[16:45] <jast> spoiler: it's a butterfly

[16:45] <scimon> Oooooo

[16:45] <jast> not *the* butterfly, but close enough

[16:46] <jast> (vaguely unrelated side note, my problem with Camelia is that I always think Kademlia)

[16:46] <scimon> Di⨝ ond

[16:50] <ilmari> ruby has already taken 💎

[16:52] <scimon> See!!! 

[16:56] <jast> no, ruby has taken something which apparently doesn't have a unicode code point yet :)

[16:56] *** cdg_ joined
[17:00] *** cdg left
[17:06] *** troys joined
[17:06] *** cdg_ left
[17:07] <El_Che> yeah, that's what you want, picking a new referring to project seens as stalled from the outside (perl5 and ruby)

[17:09] *** cpage joined
[17:11] *** cpage_ left
[17:11] <El_Che> rakudo is a great name, worry about non-existing implimentations later. It's pretty clear there is only one working implementation and that no new ones are coming until it picks up

[17:12] <El_Che> (it about picking a crappy name (6lang, psix, etc) when you have a perfect one already that's recognized)

[17:14] *** hoelzro joined
[17:16] <El_Che> I would so buy a rakudo tshirt, hopefully with a dragon on it :)

[17:21] *** domidumont left
[17:23] *** benchable6 left
[17:23] *** coverable6 joined
[17:23] *** benchable6 joined
[17:24] *** khw joined
[17:27] *** scimon left
[17:27] *** abraxxa left
[17:32] <tbrowder> off topic: which parent has a child’s wedding coming up?

[17:34] <tony-o> both parents, most likely

[17:40] <tbrowder> er, only one is here i think...anyhow, i created some things for my daughter’s wedding in raw postscript such as the wedding service program and a souvenir postcard.   i will be happy to share the PS files which can easily be modified to suit the upcoming event.

[17:41] <tbrowder> email me at [email@hidden.address] if interested.

[17:42] *** dakkar left
[17:42] <perigrin> tony-o: I would suspect *all four* parents 

[17:42] *** sena_kun joined
[17:47] <sena_kun> m: role A[::Ret] { method a(--> Ret) { Ret.new } }; class B{}; class C does A[B] {}; say C.a;

[17:47] <camelia> rakudo-moar 14c28cae4: OUTPUT: «Died with X::TypeCheck::Return␤  in method a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:47] <sena_kun> it totally looks like a bug to me.

[17:47] <sena_kun> where should I file the issue(if it's a bug after all), on github or RT?

[17:47] <tony-o> perigrin: if it was children's, maybe

[17:47] <jnthn> Looks to me also. Rakudo bug tracker

[17:48] <jnthn> (the GitHub one is probably easiest)

[17:48] <sena_kun> ok, github one then~

[17:48] <tony-o> but a child is only half of the wedding, and has only 2 (at least biologically) parents

[17:48] * [Coke] stares at tony-o & perigrin.

[17:48] <perigrin> right but he didn't specify which child ... and for each set of soon-to-be-inlaws it's only one *child* from their perspective

[17:49] <tony-o> if that's the case they still wouldn't consider the parents of the other child

[17:49] <perigrin> so grep { $_->child->wedding_date <= soon() } @parents ... would return 4 instances ... no?

[17:49] *** lizmat joined
[17:50] <tony-o> $_->child->parents would be only 2 ..

[17:50] <perigrin> right

[17:50] <tony-o> tbrowder: we're at an impasse

[17:50] <tony-o> it's 2|4

[17:51] <perigrin> well ... modern marriage customs

[17:51] <tony-o> that's a good point

[17:51] <perigrin> it's >0 with some kind of a normal distribution

[17:51] <mst> grep { any($_->children)->wedding_date <= soon() } @parents ?

[17:51] *** natrys left
[17:51] <tbrowder> ok, cut to the chase: the offer stands regardless of slang errors!

[17:52] <mst> though you'd presumably want to reduce the @parents to @families fi- no that won't work if there's been a divorce and remarriage

[17:52] <mst> has to be @relationships I guess or something

[17:53] <tony-o> do step-parents stick around for the children after divorce?

[17:54] <perigrin> well I was thinking @parents was just grep { $_->has_children } @people ... and then we'd sort it from there

[17:54] *** khw left
[17:54] <mst> in less dysfunctional families one would expect both parents to attend the kid's wedding even if they're in other relationships by that point

[17:55] *** setty1 joined
[17:55] *** domidumont joined
[17:56] <tony-o> there's a lot to sort out

[17:56] <perigrin> @people.grep({ .has_children }).grep({ any(.children).wedding_date <= soon() }) ... with apologize because I don't *actually* know Perl6

[17:56] <perigrin> apologies

[17:56] <perigrin> mst: trog had all three of his parents there

[17:57] * geekosaur considers trying that around CMU. or MIT.

[17:57] <perigrin> as did I actually at mine

[17:57] * geekosaur doesn't think he wants to work out the sufficiently general form >.>

[17:57] <tony-o> perigrin++

[17:57] *** troys is now known as troys_

[17:58] <gfldex> `any(.children».wedding-date)` looks better to me

[17:58] <perigrin> tbrowder: suffice to say for some kind of probably gausian distribution around 2-4 ... the offer stands.

[18:01] *** zakharyas1 left
[18:04] *** zakharyas joined
[18:05] *** khw joined
[18:06] <[Coke]> doc site question: we have some stuff we manage with 'make' and some stuff we manage inside of the giant htmlify; What's the current thought on going all-make vs. all p6? (I tend to prefer Make because it's a common, shared, horrible thing which I already understand, but I get that this is a great project for us to eat our own dogfood.

[18:06] <[Coke]> (even if we have to figure out what that looks like first)

[18:08] <gfldex> [Coke]: make is tricky on Windows (I do like make too tho)

[18:08] <ilmari> strawberry perl ships make

[18:09] <gfldex> if we acutally want to move away from all external deps (what is very well possible) then there is good reason to start early

[18:09] <[Coke]> we can make something that works with nmake or gmake (or other make)

[18:09] <gfldex> i didn't write there is no make on Windows. It's just full of traps.

[18:09] <[Coke]> yup.

[18:10] <gfldex> I'm pretty sure we could turn the Makefile we have into a .p6 without much work

[18:11] <[Coke]> having said it out loud, I think p6 is probably a better way to go. I'll start poking around in a branch.

[18:12] <gfldex> [Coke]++

[18:12] <mspo> mv Makefile Makefile.p6

[18:12] <mspo> what could go wrong?

[18:13] * gfldex .oO( In Perl 6 we make our own luck! )

[18:20] * [Coke] sees he had a "makefile" branch from ages past that can probably die.

[18:21] *** imcsk8 joined
[18:21] <Geth> ¦ perl6-lwp-simple: wbiker++ created pull request #24: HTML header names with mixed case fix

[18:21] <Geth> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/pull/24

[18:21] *** wander left
[18:23] *** cdg joined
[18:27] *** cdg left
[18:27] *** cdg joined
[18:30] *** sjoshi joined
[18:32] *** troys_ is now known as troys

[18:32] *** noganex left
[18:33] *** noganex joined
[18:34] *** darutoko left
[18:37] <Geth> ¦ perl6-lwp-simple: eb43079ba4 | Wolf++ (committed by Zoffix Znet) | 2 files

[18:37] <Geth> ¦ perl6-lwp-simple: HTML header names with mixed case fix (#24)

[18:37] <Geth> ¦ perl6-lwp-simple: 

[18:37] <Geth> ¦ perl6-lwp-simple: * Transform HTML header names to lowercase before looking for location or charset

[18:37] <Geth> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/eb43079ba4

[18:40] *** reportable6 left
[18:41] *** nativecallable6 left
[18:41] *** reportable6 joined
[18:41] *** nativecallable6 joined
[18:41] *** Scimon joined
[18:43] *** cdg left
[18:44] *** cdg joined
[18:50] *** ryn1x joined
[18:51] *** sjoshi left
[18:53] *** zakharyas left
[18:53] *** Kaiepi left
[18:53] *** _Kaiepi joined
[18:56] <ryn1x> Is there a built in way to read from a Buf while advancing a pointer through it? Eg. I want to read 20 bytes from a Buf, and then the next time I want to read 4 bytes starting from where I left off at byte 20 and so on. The closest I can find is .subbuf and then keeping track of $from manually.

[18:56] <yoleaux> 31 Dec 2017 12:47 MST <TimToady> ryn1x: we don't do Lisp-style cons lists by default because the head/tail model is bad for parallel processing of lists, so we keep them at a higher abstraction level; however, you can make tail-sharing lists if you like by using => for cons (it's even right associative for that reason)

[18:58] *** _Kaiepi left
[19:00] *** Kaiepi joined
[19:04] *** Zoffix joined
[19:04] <Zoffix> ryn1x: you could make use of lower-level Iterator interface

[19:04] <Zoffix> m: my $b := Buf.new(1..100).iterator; say $b.pull-one xx 10; say $b.pull-one xx 20;

[19:04] <camelia> rakudo-moar 14c28cae4: OUTPUT: «(1 2 3 4 5 6 7 8 9 10)␤(11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30)␤»

[19:07] * TimToady bets subbuf is faster as the batches get larger though

[19:07] <TimToady> might even be faster for batchsize of 1...

[19:09] <Zoffix> m: my $b := Buf.new(1..100); say $b.splice: 0, 10; say $b.splice: 0, 20;

[19:09] <camelia> rakudo-moar 14c28cae4: OUTPUT: «Buf:0x<01 02 03 04 05 06 07 08 09 0a>␤Buf:0x<0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e>␤»

[19:09] <Zoffix> ryn1x: brainfart... .splice is better than what I originally suggested

[19:10] <rindolf> hi all

[19:10] <rindolf> sup?

[19:11] <TimToady> Zoffix: assuming you don't mind destroying the buffer, of course

[19:12] * Zoffix nods

[19:12] <TimToady> hmm, curious

[19:12] <TimToady> m: my $b := Buf.new(1..100); say subbuf-rw($b,0,10) = Buf.new() for 1..2

[19:12] <camelia> rakudo-moar 14c28cae4: OUTPUT: «Buf:0x<01 02 03 04 05 06 07 08 09 0a>␤Buf:0x<0b 0c 0d 0e 0f 10 11 12 13 14>␤»

[19:12] <TimToady> that works too, I guess, but splice is more better anyway

[19:15] *** noganex left
[19:16] *** noganex joined
[19:17] *** Ven`` joined
[19:19] <ryn1x> Thanks Zoffix and TimToady ! Going to try those out now.

[19:20] <TimToady> m: my $b := Buf.new(1..100); say $b.rotor(10).perl

[19:20] <camelia> rakudo-moar 14c28cae4: OUTPUT: «((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (11, 12, 13, 14, 15, 16, 17, 18, 19, 20), (21, 22, 23, 24, 25, 26, 27, 28, 29, 30), (31, 32, 33, 34, 35, 36, 37, 38, 39, 40), (41, 42, 43, 44, 45, 46, 47, 48, 49, 50), (51, 52, 53, 54, 55, 56, 57, 58, 59, 60), (61, 62…»

[19:20] <TimToady> or that

[19:21] <TimToady> m: my $b := Buf.new(1..100); say $b.rotor(1,2,4...*).perl

[19:21] <camelia> rakudo-moar 14c28cae4: OUTPUT: «((1,), (2, 3), (4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14, 15), (16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31), (32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,…»

[19:24] <TimToady> m: my $b := Buf.new(1..20); say $b.rotor(1,2,4...*,:partial).perl   # oopsie

[19:24] <camelia> rakudo-moar 14c28cae4: OUTPUT: «((1,), (2, 3), (4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14, 15)).Seq␤»

[19:24] <TimToady> m: my $b := Buf.new(1..20); say $b.rotor((1,2,4...*),:partial).perl

[19:24] <camelia> rakudo-moar 14c28cae4: OUTPUT: «((1,), (2, 3), (4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14, 15), (16, 17, 18, 19, 20)).Seq␤»

[19:24] <TimToady> m: my $b := Buf.new(1..20); say $b.rotor(1,2,4...*):partial.perl

[19:24] <camelia> rakudo-moar 14c28cae4: OUTPUT: «((1,), (2, 3), (4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14, 15), (16, 17, 18, 19, 20)).Seq␤»

[19:25] <TimToady> .oO(TYL...)

[19:26] <TimToady> m: my $b := Buf.new(1..20); say $b.rotor(1,2,4...*) :partial.perl

[19:26] <camelia> rakudo-moar 14c28cae4: OUTPUT: «((1,), (2, 3), (4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14, 15), (16, 17, 18, 19, 20)).Seq␤»

[19:26] <Zoffix> :o

[19:27] <TimToady> m: my $b := Buf.new(1..20); say $b.rotor(1,2,4...*) :partial .perl

[19:27] <camelia> rakudo-moar 14c28cae4: OUTPUT: «((1,), (2, 3), (4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14, 15), (16, 17, 18, 19, 20)).Seq␤»

[19:27] <TimToady> probably parsing that way

[19:29] * TimToady has wondered whether for 6.d we should special-case the adverbs placed directly after a postfix/postcircumfix (without intervening space) to always apply to that operator regardless of precedence

[19:30] <TimToady> since that's usually what people intend

[19:31] <TimToady> and I doubt there's much code out there that relies on the adverb leaping a postfix to find a prefix or infix yet

[19:33] <TimToady> we could probably detect any such now and warn "this will require whitespace before the adverb in the future"

[19:33] <Zoffix> m: my %h = <a b>; say !%h<a>:exists

[19:33] <camelia> rakudo-moar 14c28cae4: OUTPUT: «Unexpected named argument 'exists' passed␤  in block <unit> at <tmp> line 1␤␤»

[19:33] <Zoffix> So that this would DWIM?

[19:34] <TimToady> yes

[19:34] *** someuser left
[19:34] <TimToady> and .rotor():partial would also continue to work since method calls are officiallly postfixes

[19:36] *** vichib joined
[19:36] <TimToady> if that looks weird, consider how STD would allow you to switch from parentheses to colon-form in midstream:

[19:36] <TimToady> m: $*OUT.say(1,2,3): 4,5,6

[19:36] <camelia> rakudo-moar 14c28cae4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3$*OUT.say(1,2,3):7⏏5 4,5,6␤    expecting any of:␤        colon pair␤»

[19:39] <Zoffix> Opened this as R#1418

[19:39] <synopsebot> R#1418 [open]: https://github.com/rakudo/rakudo/issues/1418 [RFC] Special-case the adverbs placed directly after a postfix/postcircumfix

[19:41] *** lichtkind joined
[19:44] <lichtkind> does anyone know the nickname of pierre vigier? thanks

[19:46] *** someuser joined
[19:47] <ryn1x> is there a naming convention for subroutines that mutate their arguments?

[19:47] <mst> prefix the name with 'footgun-'

[19:49] <ryn1x> ha

[19:50] <TimToady> just pick a suitable destructive verb: clobberate($x)

[19:51] <lizmat> ryn1x: many use the "set_" prefix

[19:51] <lizmat> this meme is actually used in some of Perl 6 bootstrap internals

[19:52] <TimToady> with methods, you can use .=foo to indicate $x = $x.foo

[19:52] *** Ed__ joined
[19:53] <TimToady> m: my @a = <a b c>; @a.=rotate; say @a

[19:53] <camelia> rakudo-moar 14c28cae4: OUTPUT: «[b c a]␤»

[19:53] <ryn1x> great suggestions. thanks.

[19:53] <lizmat> m: my $b := { ... }; $b.^set_name("Foo"); dd $b.^name

[19:53] <camelia> rakudo-moar 14c28cae4: OUTPUT: «"Foo"␤»

[19:53] *** khw left
[19:54] *** cdg left
[19:54] <lizmat> m: my $b := { ... }; $b.set_name("Foo"); dd $b.name  # less damaging  :-)

[19:54] <camelia> rakudo-moar 14c28cae4: OUTPUT: «"Foo"␤»

[19:56] *** zakharyas joined
[19:56] *** Ven` joined
[19:57] <lizmat> decommute&

[19:57] *** lizmat left
[19:58] <ryn1x> lizmat: I've been meaning to ask you if you ever recieved the thank you post card I sent? I very thankful for the stuffed Camelia, books, stickers, and pins you sent me a while back! I am now using Perl6 everyday at work (at a US National Laboratory) and as a part time CS student.

[19:59] <Zoffix> \o/

[19:59] *** domidumont left
[20:01] <masak> ryn1x: awesome!

[20:01] <masak> and lizmat++

[20:04] <Ed__> Hi, just installed Perl6 2017.06 on Raspberry Pi, so far working. Unfortunately perl6-debug-m test.pl6 leads to: “Could not find Debugger::UI::CommandLine at line 1 in” followed by several directories...I’m grateful for anz hint...

[20:05] *** lichtkind left
[20:05] <DrForr> Ed__ - it's a separate module, you'll need to install it, ideally using 'zef install Debugger::UI::CommandLine'

[20:06] *** khw joined
[20:07] <ryn1x> .tell lizmat ^

[20:07] <yoleaux> ryn1x: I'll pass your message to lizmat.

[20:07] <Ed__> ...Thanks, I thought I did that already, but will check again!

[20:08] <DrForr> If you think you've already installed it, try checking for CommandLine.pm on the paths it listed, maybe it failed to install.

[20:09] <Zoffix> Ed__: the debugger is busted in 2017.06. It was fixed in 2017.07

[20:10] <Zoffix> The fix FWIW: https://github.com/rakudo/rakudo/commit/6d4691fb

[20:12] *** Ed__ left
[20:12] *** Ven` left
[20:12] *** Ven` joined
[20:16] *** Ed__ joined
[20:17] <Zoffix> Ed__: don't know if you received last message before you disconnected, but debugger is broken on 2017.06. You need 2017.07 or later or to apply this patch manually: https://github.com/rakudo/rakudo/commit/6d4691fb

[20:18] *** troys is now known as troys_

[20:19] <Ed__> !Thanks Zoffix

[20:20] <Ed__> ...will have a look at it! Thanks so much!!

[20:24] *** Ed__ left
[20:25] *** Zoffix left
[20:30] *** TEttinger joined
[20:39] *** pilne joined
[20:48] *** dudebbn__ left
[20:51] *** evalable6 joined
[20:51] *** ChanServ sets mode: +v evalable6

[20:54] <mspo> TimToady: clobbernate(x) sounds more fun

[20:58] *** comborico1611 joined
[21:02] <comborico1611> Any Emacs users present?  I installed company-web from melpa.  I then  enabled it, but I see no results.  I'm not sure how to locate the package settings in Emacs.

[21:14] *** Ven` left
[21:15] *** Ven` joined
[21:19] *** setty1 left
[21:26] <comborico1611> There must be some setting overriding the package . . . O Emacs . . .

[21:29] *** dj_goku joined
[21:29] <sena_kun> comborico1611, did you look at https://github.com/osv/company-web#setup?

[21:30] <sena_kun> of course, you need to `eval-buffer` your .emacs after setting appropriate configuration(or just restart emacs, but for what reason)

[21:35] *** combo joined
[21:36] <comborico1611> sena_kun: I read it, but I dont' know how to access Emacs Config.

[21:39] *** troys_ is now known as troys

[21:39] <sena_kun> comborico1611, why not just `.emacs` file in your home directory? My question may be rude, but did you read up some tutorials if you're a beginner with emacs? E.g. https://www.masteringemacs.org/article/beginners-guide-to-emacs is a good start.

[21:41] <comborico1611> I'll try that.  Thank you!  I read the manual in Emacs itself.  I then watched some videos.  I also read Linux User's Guide, which covered Emacs, but I don't think Greenfield covered this.

[21:41] <comborico1611> I did browse that link you posted just yesterday.

[21:41] <comborico1611> Wondering if it was a good book.  For some reason I kept thinking its author was the creator of Emacs.  

[21:42] <sena_kun> well, M-x tutorial is very good for basic hotkeys, but it doesn't cover a lot of things. The blog post which link I've posted here covers package management, basic configuration and explain things like buffers, modes, etc.

[21:42] <comborico1611> sena_kun: I tried C-f ~/.emacs   Nothing came up but a new file (blank file)

[21:43] <sena_kun> because you did not create your config(yet). :)

[21:43] <comborico1611> Okay.  I'll go back to it with more intent.

[21:43] <comborico1611> Thank you for the help!

[21:43] <sena_kun> it's raw, there are no pre-built configs for you or something like that.

[21:43] <sena_kun> np

[21:44] <sena_kun> s/explain/explains/

[21:45] *** Scimon left
[21:51] <comborico1611> Hmm?  /explain?

[21:51] *** zakharyas left
[21:51] *** espadrine joined
[21:52] <mspo> I'd like to use emacs but don't know if I could not-vi

[21:53] <sena_kun> just a silly grammar mistake I do every time when I debug things at night and talk to people in English at the same time. :/

[21:53] <El_Che> mspo: does your family been known to have genetics (evolution or manufactured) that allows for 12 fingers?

[21:53] <comborico1611> Haha!

[21:53] *** khw left
[21:54] <mspo> El_Che: that explains my inability to emacs

[21:54] <sena_kun> >inability to emacs

[21:54] <sena_kun> sounds like a serious illness.

[21:54] <sena_kun> "Oh God, call M-x doctor, quickly!"

[21:55] <gfldex> we call it "differently gifted"

[21:58] <comborico1611> sena_kun: Do you have any recommendations for Emacs books / articles ?

[21:58] <timotimo> FWIW you can make up for 2 missing extra fingers by having two foot switches

[21:59] <comborico1611> Haha.  Like a piano!

[21:59] <timotimo> that's probably also a good idea just in general

[21:59] <timotimo> alternatively, 10 foot switches like an organ

[21:59] <timotimo> well, organs probably have more than 10?

[21:59] <comborico1611> I have no idea.  I do recall seeing some paddles down there.

[22:00] <sena_kun> I bet it'd be much slower than this caps right under your pinky though. If you're not a black metal drummer or something.

[22:00] <mspo> I'm mostly concerned about my wrists

[22:00] <mspo> but when I looked at vimscript I thought "maybe emacs isn't that bad"

[22:00] <timotimo> haha

[22:00] <timotimo> yeah, vimscript isn't a very pleasant language

[22:02] <sena_kun> comborico1611, about books: I dunno, to be honest. It was not yesterday as I started with it, but from what I can recall: default emacs tutorial + some articles(I think the one I posted is good enough). Then goes some googling like "How to make your emacs shine". And a lot of time to discover "must have" plugins, installing it, etc.

[22:02] <timotimo> sena_kun: any thoughts on spacemacs?

[22:02] <timotimo> oh. my. god.

[22:02] <sena_kun> Getting used to hotkeys is like 2 weeks iirc, but after that you literally cannot use arrows. I have emacs keys for navigation in firefox and other things, just because... Hmm.

[22:03] <timotimo> weechat allows you to grab lines you inputted in any buffer back with ctrl + up arrow

[22:03] <timotimo> this changes *everything*

[22:03] <sena_kun> timotimo, I tried it like 3 or something years ago, but it's too big. I have my own set of features I need(some modes, some preferences) plus I don't want any "fancy" stuff they have.

[22:04] <comborico1611> sena_kun:  Thanks!

[22:04] <timotimo> right

[22:04] <comborico1611> I'm off to supper or a little more study.  Bye, guys!

[22:05] <sena_kun> my .emacs is like ~200loc and I feel this is more than enough. Though I don't use features like auto-complete, etc. Default $language-mode is ok.

[22:05] *** comborico1611 left
[22:05] <sena_kun> comborico1611, also see https://github.com/emacs-tw/awesome-emacs

[22:05] *** combo left
[22:05] <sena_kun> ugh.

[22:05] <sena_kun> .tell comborico1611 also see https://github.com/emacs-tw/awesome-emacs

[22:05] <yoleaux> sena_kun: I'll pass your message to comborico1611.

[22:05] *** khw joined
[22:06] *** combo joined
[22:07] <combo> sena_kun:  Alright!  Thanks.  I hate reading from Github, though.  Always seems confusing.  I'm more of a book guy than a README guy.  Hence my problem learning this stuff.

[22:07] <combo> (this is combo1611, by the way.)  Bye, guys!

[22:07] *** combo left
[22:08] <sena_kun> well, I tried to read Stallman's book, but... I saw things I didn't want to know about, like registers and some features nobody remembers about for last 10 years or something. :)

[22:11] *** troys is now known as troys_

[22:11] *** mempko joined
[22:18] *** wamba left
[22:25] *** pmurias joined
[22:38] *** ryn1x left
[22:39] *** rindolf left
[22:39] <a3f> How does an array of Ints type look like in a sub parameter list? I want to type my MAIN sub.

[22:41] <moritz> sub f(Int @a) { ... }

[22:42] <moritz> but, that won't work for MAIN

[22:42] <moritz> because that signatures says the caller needs to pass in an Array[Int]

[22:42] <jnthn> @a where .all.isa(Int) may well do it

[22:42] <moritz> not just an array where all elements happen to be Ints

[22:45] <a3f> Aha. So is there an alternative syntax? jnthn Doesn't work for me. I get the usage message

[22:45] <a3f> or just ask for Str and split it up myself?

[22:46] <timotimo> it doesn't work because you get IntStr objects

[22:46] <timotimo> they don't .isa(Int)

[22:47] <jnthn> Really?

[22:47] <jnthn> m: say IntStr.isa(Int)

[22:47] <camelia> rakudo-moar 90246e652: OUTPUT: «True␤»

[22:47] <timotimo> m: say <123>.isa(Int)

[22:47] <camelia> rakudo-moar 90246e652: OUTPUT: «True␤»

[22:47] <timotimo> oh, huh?

[22:47] <jnthn> IntStr multiply inherits from Int and Str iirc

[22:47] <timotimo> m: [IntStr.new(1, "1"), IntStr.new(2, "2"), IntStr.new(3, "3")].all.isa(Int).say

[22:47] <camelia> rakudo-moar 90246e652: OUTPUT: «False␤»

[22:47] <timotimo> m: IntStr.new(3, "3").all.isa(Int).say

[22:47] <camelia> rakudo-moar 90246e652: OUTPUT: «False␤»

[22:47] <gfldex> m: sub s(@a where .all ~~ Int){ say 'here' }; s([1,2,3])

[22:47] <camelia> rakudo-moar 90246e652: OUTPUT: «here␤»

[22:47] <timotimo> m: IntStr.new(3, "3").isa(Int).say

[22:47] <camelia> rakudo-moar 90246e652: OUTPUT: «True␤»

[22:48] <timotimo> another problem is that MAIN will only let you use positional arrays like that if you make them slurpy

[22:48] <jnthn> Oh...of course

[22:48] <a3f> I am fine by slurping all elements into the single array. I just want to make sure all arguments are Ints

[22:48] <timotimo> oh, jnthn, it'll .isa on the Junction, rather than distributing

[22:48] <gfldex> m: sub s(*@a where .all ~~ Int){ say 'here' }; s(1,2,3)

[22:48] <camelia> rakudo-moar 90246e652: OUTPUT: «here␤»

[22:49] <jnthn> Oh, .isa doesn't distribute over the junction

[22:49] <jnthn> haha

[22:49] <jnthn> m: sub s(*@a where .all ~~ Int){ say 'here' }; s(<1>,<2>,<3>)

[22:49] <camelia> rakudo-moar 90246e652: OUTPUT: «here␤»

[22:49] <timotimo> that's why that works, then

[22:49] <jnthn> Yeah, what gfldex++ suggested is the way to go

[22:50] <a3f> Ye, that works. Thanks all. How's the * in front of the @a called?

[22:51] <timotimo> i just say "slurpy parameter"

[22:51] <jnthn> Slurpy. Because it slurps up all available arguments

[22:51] <timotimo> there's multiple kinds of slurpy for positionals, too

[22:52] <gfldex> there are quite a few nice examples for MAIN signatures in this book: https://github.com/kyclark/metagenomics-book/tree/master/perl6/main

[22:53] <a3f> gfldex Thanks. looks helpful.

[22:53] <El_Che> MAIN is pretty awsome

[22:55] <El_Che> thx to lizmat we also have this beauty: my $*MAIN-ALLOW-NAMED-ANYWHERE = True;

[22:55] <El_Che> This will allow to pass named parameters anywhere instead on the non-unixy way of only at the beginning

[22:56] <El_Che> so you can do stuff like ./prog action --param1=foo --param2=bar

[22:56] *** sena_kun left
[22:57] *** lizmat joined
[22:58] *** traxex_ joined
[22:59] <tadzik> aww yiss

[23:00] *** s0me0n3-unkn0wn left
[23:01] *** traxex left
[23:05] *** Zoffix joined
[23:05] *** cdg joined
[23:06] <Zoffix> jnthn: what's the criteria for choosing which ops to mark in this commit? R#1413 is fixed by marking `return_o` with :useshll... Wonder which other ones might need it https://github.com/MoarVM/MoarVM/commit/db706bb7dfa68bd025d823e3871222bf3b4afb59

[23:06] <synopsebot> R#1413 [open]: https://github.com/rakudo/rakudo/issues/1413 [regression][⚠ blocker ⚠] Weird issue with `zef install`

[23:07] <El_Che> lizmat: 118 comments on reddit. Pretty impressive

[23:08] <lizmat> yeah  :-)

[23:08] <yoleaux> 20:07Z <ryn1x> lizmat: ^

[23:10] <jnthn> Zoffix: Ah, darn

[23:10] <jnthn> If we mark that op :usehll the entire reason for introducing it becomes pointless

[23:10] <Zoffix> :(

[23:10] *** preaction joined
[23:11] <jnthn> Could you note your findings on the ticket?

[23:11] <Zoffix> Sure

[23:11] <Zoffix> I got "golf" too (it's a giant enum)

[23:11] <jnthn> I think maybe we can do an analysis for return_o and the invokee in inlince.c

[23:11] <jnthn> gah, inline.c

[23:12] <jnthn> Like, invoke_o + return_o = ok to inline even if cross-HLL, but otherwise don't do it

[23:12] *** s0me0n3-unkn0wn joined
[23:12] *** sunnavy joined
[23:12] <jnthn> In the long run we can go one better than that

[23:13] <jnthn> If you fancy trying that, feel free, otherwise I should have some time tomorrow to have a look

[23:13] <Zoffix> I'll leave it to you. I don't know this area of the codebase and just bruteforced the location of the bug :)

[23:13] <jnthn> That's still very helpful :)

[23:14] <jnthn> The opt in question made every closure clone around 15% cheaper, so I'm quite keen to fix it up properly :)

[23:14] <Zoffix> :)

[23:15] <jnthn> They're still a bit pricey, alas

[23:17] <Zoffix> Commented

[23:17] * Zoffix &

[23:17] *** Zoffix left
[23:26] *** khisanth_ left
[23:34] *** troys_ is now known as troys

[23:40] <Xliff> 118 comments on reddit? Where?

[23:41] <El_Che> Xliff: https://www.reddit.com/r/perl/comments/7r1b33/an_open_letter_to_the_perl_community

[23:41] *** cdg left
[23:41] <El_Che> 124 by now, it seems lizmat is still awake :)

[23:41] <lizmat> yeah  :-)

[23:42] <Xliff> Thanks, El_Che 

[23:43] *** Ven` left
[23:43] <El_Che> is it me or is reddit awful to track new comments? I set it on "new" and search for " minute"

[23:46] *** khisanth_ joined
[23:48] <Xliff> "Please stop hurting Perl 5. Your project will never be widely adopted and keeping the same name is hurting real workhorse."

[23:48] <Xliff>  /o\

[23:49] <lizmat> yeah, stuff like that

[23:54] *** khw left
[23:54] <Xliff> Can you run a compiled Perl6 package without perl6? 

[23:54] <Xliff> Ala: Running the moarvm code directly from moarvm.

[23:55] <timotimo> regular perl6 modules won't do that on their own i don't think

[23:56] <lizmat> Xliff: you still need the Perl 6 boostrap

[23:56] <lizmat> *bootstrap

[23:57] <Xliff> OK. I am trying to think of a way users can bypass stage parse. Consider a frozen codebase that doesn't need to be parsed, and can just run the precompiled code.

