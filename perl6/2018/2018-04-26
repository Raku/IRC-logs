[00:01] *** comborico1611 left
[00:01] *** mcmillhj left
[00:02] *** dct left
[00:04] <Zoffix> yeah, reproed the problem..

[00:08] *** w_richard_w joined
[00:09] * Zoffix golfs it a little

[00:10] *** Luna521 left
[00:15] <Zoffix> huh

[00:15] <Zoffix> oh

[00:18] *** w_richard_w left
[00:20] *** w_richard_w joined
[00:21] *** rindolf left
[00:22] <Zoffix> kt_: I golfed it down and filed a bug report R#1775

[00:22] <synopsebot> R#1775 [open]: https://github.com/rakudo/rakudo/issues/1775 [ASYNC] Crash in .Supply.tap + .print on an IO::Socket::Async 

[00:22] <Zoffix> Don't know much about it, but looks like it's a problem in rakudo. A race conditon somewhere or something.

[00:28] *** vcv_ left
[00:39] *** AlexDaniel left
[00:49] *** Actualeyes left
[00:52] *** PufferBot joined
[00:52] *** PufferBot left
[01:03] *** mcmillhj joined
[01:10] *** MasterDuke left
[01:12] *** MasterDuke joined
[01:19] *** aborazmeh joined
[01:19] *** aborazmeh left
[01:19] *** aborazmeh joined
[01:19] <kt_> Zoffix: thanks!

[01:45] *** ilbot3 left
[01:46] *** FROGGS_ joined
[01:50] *** FROGGS left
[01:56] *** ilbot3 joined
[01:56] *** ChanServ sets mode: +v ilbot3

[02:06] *** Actualeyes joined
[02:07] *** cpage_ joined
[02:09] *** skids left
[02:11] *** joy__ joined
[02:11] *** [Coke]_ joined
[02:11] *** gfldex_ joined
[02:12] *** perlbot_ joined
[02:12] *** raydiak_ joined
[02:12] *** _notbenh joined
[02:12] *** speedChicken_ joined
[02:12] *** samebchase1 joined
[02:12] *** joy_ left
[02:12] *** cpage left
[02:13] *** aeruder_ left
[02:13] *** notbenh left
[02:13] *** albongo left
[02:13] *** speedChicken left
[02:13] *** raydiak left
[02:13] *** unclechu left
[02:13] *** gfldex left
[02:13] *** alpha6 left
[02:13] *** Voldenet left
[02:13] *** cgfbee left
[02:13] *** cpage_ is now known as cpage

[02:13] *** _notbenh is now known as notbenh

[02:13] *** joy__ is now known as joy_

[02:13] *** perlbot_ is now known as perlbot

[02:13] *** alpha6 joined
[02:13] *** albongooo___ joined
[02:13] *** hobbs joined
[02:13] *** hobbs left
[02:13] *** hobbs joined
[02:13] *** aeruder joined
[02:14] *** cgfbee joined
[02:14] *** simcop2387 joined
[02:14] *** Voldenet joined
[02:14] *** Voldenet left
[02:14] *** Voldenet joined
[02:15] *** yoleaux left
[02:16] *** tadzik left
[02:16] *** Garland_g[m] left
[02:16] *** wictory[m] left
[02:16] *** mienaikage left
[02:16] *** CIAvash[m] left
[02:16] *** ilmari[m] left
[02:16] *** mack[m] left
[02:16] *** mirlur[m] left
[02:17] *** elcaro[m] left
[02:17] *** AlexDaniel` left
[02:17] *** Matthew[m] left
[02:18] *** benchable6 left
[02:18] *** releasable6 left
[02:18] *** evalable6 left
[02:19] *** benchable6 joined
[02:19] *** squashable6 left
[02:19] *** coverable6 left
[02:23] *** aborazmeh left
[02:41] *** mcmillhj left
[02:41] *** ufobat___ joined
[02:45] *** ufobat_ left
[03:05] *** Actualeyes left
[03:09] *** mcmillhj joined
[03:17] *** coverable6 joined
[03:17] *** evalable6 joined
[03:17] *** releasable6 joined
[03:17] *** statisfiable6 joined
[03:27] *** eliasr left
[03:45] *** mcmillhj left
[03:46] *** xinming_ left
[03:48] *** xinming joined
[04:00] *** jcallen_ is now known as jcallen

[04:14] *** yoleaux joined
[04:14] *** ChanServ sets mode: +v yoleaux

[04:22] *** abraxxa left
[04:44] *** khw left
[04:52] *** khw joined
[04:53] *** aindilis left
[05:01] *** khw left
[05:05] *** jmerelo joined
[05:10] *** sauvin joined
[05:45] <jmerelo> Hi y'all

[05:47] <jmerelo> The perl6 tag in StackOverflow just reached 400 followers. https://stackoverflow.com/questions/tagged/perl6

[05:48] <moritz> \o/

[05:53] *** domidumont joined
[05:55] <jmerelo> Also, 5 questions in the last 24 hours. That's a record as far as I remember.

[05:59] *** domidumont left
[06:00] *** domidumont joined
[06:02] <Geth> ¦ doc: JJ self-assigned Specify what we mean by private attributes https://github.com/perl6/doc/issues/1965

[06:09] <Geth> ¦ perl6-pod-to-bigpage: 2bd4a5705e | (JJ Merelo)++ | 2 files

[06:09] <Geth> ¦ perl6-pod-to-bigpage: Adds configuration for anchors in headers

[06:09] <Geth> ¦ perl6-pod-to-bigpage: 

[06:09] <Geth> ¦ perl6-pod-to-bigpage: And inserts only if configured that way. Also tests it.

[06:09] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/commit/2bd4a5705e

[06:09] <Geth> ¦ perl6-pod-to-bigpage: 2fa627ddf0 | (JJ Merelo)++ | 2 files

[06:09] <Geth> ¦ perl6-pod-to-bigpage: Eliminates anchors for X closes #21

[06:09] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/commit/2fa627ddf0

[06:09] <Geth> ¦ perl6-pod-to-bigpage: 2a65374a53 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | 2 files

[06:10] <Geth> ¦ perl6-pod-to-bigpage: Merge pull request #22 from JJ/master

[06:10] <Geth> ¦ perl6-pod-to-bigpage: 

[06:10] <Geth> ¦ perl6-pod-to-bigpage: Eliminates anchors for indexed terms

[06:10] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/commit/2a65374a53

[06:12] *** sena_kun joined
[06:36] *** FROGGS_ left
[06:38] *** robertle joined
[06:50] *** abraxxa joined
[06:53] *** w_richard_w left
[06:54] *** kurahaupo_ joined
[06:57] *** kurahaupo left
[07:00] <Geth> ¦ perl6-pod-to-bigpage: da467b8c63 | (JJ Merelo)++ | 2 files

[07:00] <Geth> ¦ perl6-pod-to-bigpage: Bumps up version

[07:00] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/commit/da467b8c63

[07:05] *** abraxxa left
[07:05] <Geth> ¦ doc: cf3bc07124 | (JJ Merelo)++ | 2 files

[07:05] <Geth> ¦ doc: Updating Pod::To::OneBigPage version and triggering rebuild

[07:05] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/cf3bc07124

[07:09] *** darutoko joined
[07:09] *** andrzejku joined
[07:13] *** andrzejku_ joined
[07:16] *** andrzejku left
[07:20] *** abraxxa joined
[07:25] *** rindolf joined
[07:25] <Geth> ¦ doc: 09a29f9d99 | (JJ Merelo)++ | util/trigger-rebuild.txt

[07:25] <Geth> ¦ doc: Trying to trigger rebuild again

[07:25] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/09a29f9d99

[07:27] <El_Che> trigger^1

[07:27] <El_Che> trigger^2

[07:27] <jmerelo> El_Che: yep, it's not working...

[07:28] <jmerelo> Or maybe it took too long https://docs.perl6.org/build-log/build-2018-04-26T07:10+00:00.log

[07:29] <jmerelo> Anyway, I don't see it updating the modules...

[07:29] <El_Che> jmerelo: i will probably move a repo to de perl6 org. Do you have any idea if/how travis and dockerhub automation work? is that part still linked to your account on those services or it uses a perl6 org account?

[07:31] *** parv joined
[07:31] <jmerelo> It's linked to any account with write privileges in the repo, I think.

[07:32] *** sena_kun left
[07:32] <jmerelo> You will notified of errors occurring with your pushes, you'll still see all repos in which you have write premission. I see all perl6/ repos in Travis.

[07:32] <El_Che> true

[07:33] <El_Che> travis is straightfw

[07:33] <El_Che> d

[07:33] <El_Che> but dockerhub does not had a direct link for automated builds

[07:33] *** dakkar joined
[07:37] <jmerelo> You can just say which repo you will use, right?

[07:40] <El_Che> yes, but it will create an img on your personal repo

[07:41] <El_Che> that's a fairly ok scenario. I wonder what happens when you need encryption keys, even encrypted

[07:41] <El_Che> travis encrypt them for you personal username

[07:41] *** scimon joined
[07:42] <El_Che> will those secret be decryptable? Can those be echoes (the probably are)?

[07:42] <jmerelo> El_Che: it does not work with PRs, and probably not with other usernames.

[07:43] <jmerelo> El_Che: no, it does not echo by default encrypted variables and no variable can be used in PRs. They've got that pretty much covered.

[07:43] <El_Che> the canary repo I am working on does need travis and dockerhub integration (it's linked to my username), but no extra keys needed

[07:43] <El_Che> that would be different if you need to upload stuff to bintray

[07:44] <El_Che> jmerelo: are you sure? your app need the unencrypted value

[07:44] <El_Che> write the value to a file, put it in the package and you have the secret

[07:44] <El_Che> (it's a shared repo, after all)

[07:45] <jmerelo> El_Che: no problem if you're doing it yourself. yes problem in PRs or if someone else does it.

[07:45] <El_Che> yes, that's the issue

[07:46] <jmerelo> El_Che: then you're probably better off keeping it in your own private repo. It can still be used from perl6 repos, I guess.

[07:47] *** zakharyas joined
[07:50] <El_Che> yes, only real lost is that nog everyone can rerun the build in travis

[07:50] *** andrzejku joined
[07:51] <El_Che> I'll look into it

[07:53] *** andrzejku_ left
[08:13] *** zakharyas left
[08:15] *** zakharyas joined
[08:25] *** natrys joined
[08:46] *** tadzik joined
[08:48] *** darutoko left
[08:52] *** ilmari[m] joined
[08:52] *** Matthew[m] joined
[08:52] *** unclechu joined
[08:52] *** AlexDaniel` joined
[08:52] *** elcaro[m] joined
[08:52] *** CIAvash[m] joined
[08:52] *** wictory[m] joined
[08:52] *** Garland_g[m] joined
[08:52] *** mack[m] joined
[08:52] *** mirlur[m] joined
[08:52] *** mienaikage joined
[08:55] <donpdonp> ive got a Supplier that is creating Socket::Async. after a while of creating these, it throws "Unhandled exception in code scheduled on thread 14"

[08:56] <donpdonp> except im not sure how to get any extra info, like a stack trace

[08:56] *** kurahaupo_ left
[08:59] *** abraxxa left
[09:00] *** TEttinger left
[09:01] <lookatme> try handle it in CATCH block ?

[09:02] *** abraxxa joined
[09:02] <donpdonp> yes except im not sure where its happening

[09:03] <donpdonp> and i figured the default exception handler would show a stacktrace?

[09:04] <donpdonp> example: Unhandled exception in code scheduled on thread 46

[09:04] <donpdonp> Too few positionals passed; expected 6 arguments but got 2

[09:05] <donpdonp> that err is a clue but i cannot find a 6 param function anywhere and i figure the stack trace has to be available somewhere

[09:07] *** eliasr joined
[09:09] <donpdonp> ive tried adding extra CATCH {default} blocks. ive tried removing all CATCH blocks hoping the default handler would be informative. the error msg remains the same :O

[09:13] *** imcsk8 left
[09:13] *** imcsk8 joined
[09:33] *** imcsk8_ joined
[09:34] *** markong joined
[09:38] *** unclechu left
[09:38] *** mack[m] left
[09:39] *** imcsk8 left
[09:39] *** hobbs left
[09:39] *** hobbs joined
[09:39] *** hobbs left
[09:39] *** hobbs joined
[09:39] *** Matthew[m] left
[09:39] *** elcaro[m] left
[09:39] *** mirlur[m] left
[09:39] *** wictory[m] left
[09:39] *** Garland_g[m] left
[09:39] *** mienaikage left
[09:39] *** CIAvash[m] left
[09:39] *** ilmari[m] left
[09:39] *** tadzik left
[09:39] *** AlexDaniel` left
[09:41] *** statisfiable6 left
[09:41] *** releasable6 left
[09:41] *** releasable6 joined
[09:41] *** statisfiable6 joined
[09:42] *** evalable6 left
[09:55] *** darutoko joined
[10:14] *** domidumont left
[10:16] *** Matthew[m] joined
[10:22] *** araraloren joined
[10:24] *** AlexDaniel joined
[10:28] *** roguelazer left
[10:31] <scimon> This sounds like a great case for putting a Stackoverflow question with some example code together :) 

[10:35] <Geth> ¦ doc: fluca1978 self-assigned Specify what we mean by private attributes https://github.com/perl6/doc/issues/1965

[10:36] *** roguelazer joined
[10:36] *** FROGGS joined
[10:40] *** markong left
[10:41] *** BPC joined
[10:41] *** BPC left
[10:42] *** araraloren_ joined
[10:44] *** parv left
[10:47] *** araraloren left
[10:49] *** Tison joined
[10:54] <Zoffix> .tell jjmerelo "<jmerelo> │ Anyway, I don't see it updating the modules..." Recall I said 3 days ago ( https://irclog.perlgeek.de/perl6/2018-04-23#i_16081026 ) there's auto-module update system in place as it's using system-wide install of perl6. You need to ping one of the admins https://github.com/perl6/infrastructure-doc/blob/master/hosts/hack.p6c.org.pod#administration to log in and update the needed

[10:54] <yoleaux> Zoffix: I'll pass your message to jjmerelo.

[10:54] <Zoffix> module: https://github.com/perl6/infrastructure-doc/blob/master/hosts/hack.p6c.org.pod#rakudobrew

[10:54] <Zoffix> .tell jjmerelo module: https://github.com/perl6/infrastructure-doc/blob/master/hosts/hack.p6c.org.pod#rakudobrew

[10:54] <yoleaux> Zoffix: I'll pass your message to jjmerelo.

[10:55] <jmerelo> Zoffix: I'm right here... So please reload the modules all over again.

[10:57] <Geth> ¦ doc: b98605938c | (Zoffix Znet)++ (committed using GitHub Web editor) | util/trigger-rebuild.txt

[10:57] <Geth> ¦ doc: Update trigger-rebuild.txt

[10:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b98605938c

[10:57] <Zoffix> jmerelo: done

[10:57] <Zoffix> Oh, I had two "j" when tab compl;eteing

[10:58] <Zoffix> jmerelo: well, by done I meant Pod to big page is now at <0.3.1>. Does any other module need updating

[10:58] *** Zoffix is now known as jjmerelo

[10:58] *** jjmerelo is now known as Zoffix

[10:58] <jmerelo> Zoffix: Thanks.

[10:58] <Zoffix> jmerelo: FYI: "yoleaux │ 20 Apr 2018 19:02Z <timotimo> jjmerelo: punt is a legit verb btw"

[10:59] <jmerelo> Zoffix: I know. I changed that back in the SO question.

[10:59] <timotimo> i wonder how zoffix got reminded of this

[11:00] <Zoffix> ./msg yoleaux .ping

[11:00] <jmerelo> El_Che: which, BTW, still has no answer.. https://stackoverflow.com/questions/49943078/whats-an-additional-tie-breaker-for-perl-6-longest-token-matching

[11:00] *** markong joined
[11:00] <lizmat> I think that's more of a TimToady question  :-)

[11:00] <Zoffix> timotimo: and in case you have server messages disabled: "Zoffix │ Oh, I had two "j" when tab compl;eteing" "You are now known as jjmerelo" "You are now known as Zoffix"

[11:02] <timotimo> he already saw that, though?

[11:02] <timotimo> like, we discussed it at length

[11:09] <Zoffix> I guess he saw it by reading chatlogs. You sent it to the wrong nick.

[11:10] <timotimo> i know, i told him about that

[11:11] *** zakharyas left
[11:12] <Zoffix> Then I guess mystery solved? :)

[11:12] *** tadzik joined
[11:13] *** AlexDaniel` joined
[11:13] *** wictory[m] joined
[11:13] *** mack[m] joined
[11:13] *** CIAvash[m] joined
[11:13] *** ilmari[m] joined
[11:13] *** mirlur[m] joined
[11:13] *** unclechu joined
[11:13] *** Garland_g[m] joined
[11:13] *** mienaikage joined
[11:13] *** elcaro[m] joined
[11:14] <timotimo> i suppose so

[11:16] <buggable> New CPAN upload: P5built-ins-0.0.9.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5built-ins-0.0.9.tar.gz

[11:16] <lizmat> .oO( one should also update dependencies :-(  )

[11:28] <Tison> m: say " " if False;

[11:28] <camelia> rakudo-moar 29b092c94: ( no output )

[11:29] <Tison> m: say "matched" if 42 ~~ /"{everything}"/; # OUTPUT: «matched␤»

[11:29] <camelia> rakudo-moar 29b092c94: OUTPUT: «Resource temporarily unavailable»

[11:29] <AlexDaniel> m: say "matched" if 42 ~~ /"{everything}"/; # OUTPUT: «matched␤»

[11:29] <camelia> rakudo-moar 29b092c94: OUTPUT: «MoarVM panic: Could not spawn thread: errorcode -11␤»

[11:29] <AlexDaniel> m: say "matched" if 42 ~~ /"{everything}"/; # OUTPUT: «matched␤»

[11:29] <camelia> rakudo-moar 29b092c94: OUTPUT: «MoarVM panic: Could not spawn thread: errorcode -11␤»

[11:29] <AlexDaniel> e: say "matched" if 42 ~~ /"{everything}"/; # OUTPUT: «matched␤»

[11:31] *** evalable6 joined
[11:31] <AlexDaniel> e: say "matched" if 42 ~~ /"{everything}"/; # OUTPUT: «matched␤»

[11:31] <evalable6> AlexDaniel, rakudo-moar 29b092c94: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/h2czzrLLSL␤Bogus statement␤at /tmp/h2czzrLLSL:2␤------> 03<BOL>08⏏04»␤    expecting any of:␤        prefix␤        term␤»

[11:31] <AlexDaniel> e: say "matched" if 42 ~~ /"{everything}"/;

[11:31] <evalable6> AlexDaniel, rakudo-moar 29b092c94: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/NkWz4ufvSo␤Undeclared routine:␤    everything used at line 1␤␤»

[11:32] <AlexDaniel> I'm not sure what's going on with camelia

[11:32] <lizmat> m: say "matched" if 42 ~~ /"{everything}"/

[11:32] <camelia> rakudo-moar 29b092c94: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    everything used at line 1␤␤»

[11:32] <AlexDaniel> m: say "matched" if 42 ~~ /"{everything}"/; # OUTPUT: «matched␤»

[11:32] <camelia> rakudo-moar 29b092c94: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus statement␤at <tmp>:2␤------> 3<BOL>7⏏5»␤    expecting any of:␤        prefix␤        term␤»

[11:32] <lizmat> that's what I get

[11:32] <AlexDaniel> oh okay

[11:32] <lizmat> m: say "matched" if 42 ~~ /"{everything}"/

[11:32] <camelia> rakudo-moar 29b092c94: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    everything used at line 1␤␤»

[11:33] <lizmat> m: say "matched" if 42 ~~ /"{everything}"/;

[11:33] <camelia> rakudo-moar 29b092c94: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    everything used at line 1␤␤»

[11:33] <lizmat> m: say "matched" if 42 ~~ /"{everything}"/;  # OUTPUT: «matched␤»

[11:33] <camelia> rakudo-moar 29b092c94: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus statement␤at <tmp>:2␤------> 3<BOL>7⏏5»␤    expecting any of:␤        prefix␤        term␤»

[11:33] <lizmat> whee

[11:33] <Zoffix> weird

[11:33] <lizmat> something gets parsed after the # ?

[11:33] <Zoffix> Oh, "matched" was a comment :)

[11:33] <Zoffix> I thought it was printed

[11:33] <lizmat> nope

[11:34] <Zoffix> lizmat: there's "n\l" char that camelia translates

[11:34] <Zoffix> so the » is on a new line by itself

[11:34] <lizmat> m: say "matched" if 42 ~~ /"{everything}"/;  # OUTPUT: «matched

[11:34] <camelia> rakudo-moar 29b092c94: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    everything used at line 1␤␤»

[11:34] <lizmat> yup

[11:34] <lizmat> Zoffix++

[11:34] <Zoffix> Check out this magic trick!

[11:34] <Zoffix> m: say 2e-324 < 5e-324

[11:34] <camelia> rakudo-moar 29b092c94: OUTPUT: «True␤»

[11:34] <Zoffix> ^_^

[11:34] <Zoffix> (not a bug :P)

[11:34] <Zoffix> oh wait

[11:35] <lizmat> that's sound pretty ordinary :-)

[11:35] <Geth> ¦ doc: eeef11cce3 | 陈梓立++ | doc/Language/regexes.pod6

[11:35] <Geth> ¦ doc: Improve section Literals of Regex

[11:35] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/eeef11cce3

[11:35] <synopsebot> Link: https://doc.perl6.org/language/regexes

[11:35] <Zoffix> m: say 6e-324 == 5e-324

[11:35] <camelia> rakudo-moar 29b092c94: OUTPUT: «True␤»

[11:36] <Zoffix> m: say 5e-324

[11:36] <camelia> rakudo-moar 29b092c94: OUTPUT: «5e-324␤»

[11:36] <buggable> New CPAN upload: P5chdir-0.0.2.tar.gz by ELIZABETH http://modules.perl6.org/dist/P5chdir:cpan:ELIZABETH

[11:36] <Zoffix> This is actually where we do better than Perl 5 now :) It prints 4.94065645841247e-324 :)

[11:37] <lizmat> :-)

[11:37] <lizmat> Zoffix++  # caring for the little ones  :-)

[11:37] *** mscha joined
[11:37] <Zoffix> lol

[11:37] <timotimo> can they fix that, though? or would that cause trouble for existing user code?

[11:38] <AlexDaniel> similar ecosystem fallout as we had I'd expect?

[11:41] <Zoffix> There is a ticket and last I saw they were discussing how Ruby et al manage to do it.

[11:43] <Zoffix> And how I found out about Dragon4 algo and how I then found Grisu3

[11:43] <Zoffix> (and I commented our commits fixing this stuff on that ticket, so presumably Perl 5 will eventually print 5e-324 there too)

[11:43] * Zoffix &

[11:43] *** Zoffix left
[11:47] *** domidumont joined
[11:47] *** joy_ left
[11:50] *** joy_ joined
[11:50] <Geth> ¦ doc: fb373d734a | (JJ Merelo)++ | doc/Type/IO.pod6

[11:50] <Geth> ¦ doc: Add default values for shells

[11:50] <Geth> ¦ doc: 

[11:50] <Geth> ¦ doc: Taken from @timo's response. Closes #1974.

[11:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fb373d734a

[11:50] <synopsebot> Link: https://doc.perl6.org/type/IO

[11:50] <Geth> ¦ doc: 591a589dac | (JJ Merelo)++ | doc/Type/Proc.pod6

[11:50] <Geth> ¦ doc: Adds link to other  definition. Ref #1964

[11:50] <synopsebot> Link: https://doc.perl6.org/type/Proc

[11:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/591a589dac

[11:51] *** domidumont1 joined
[11:52] *** meme joined
[11:52] *** meme left
[11:53] <Geth> ¦ doc: f1730a9788 | (JJ Merelo)++ | doc/Type/IO.pod6

[11:53] <Geth> ¦ doc: Rephrasing sentence on shells. Closes #1964

[11:53] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f1730a9788

[11:55] *** domidumont left
[11:59] <Geth> ¦ doc: 622a0aa415 | (Elizabeth Mattijsen)++ | doc/Language/5to6-perlfunc.pod6

[11:59] <Geth> ¦ doc: Some more precise feedback on P5 -> P6 for functions

[11:59] <Geth> ¦ doc: 

[11:59] <Geth> ¦ doc: - mention in some cases that the argumentless version is not supported

[11:59] <Geth> ¦ doc: - mention in some cases that there is a module in the ecosystem

[11:59] <synopsebot> Link: https://doc.perl6.org/language/5to6-perlfunc

[11:59] <Geth> ¦ doc: - got to eof()

[11:59] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/622a0aa415

[12:00] <lizmat> afk again&

[12:04] *** domidumont joined
[12:07] *** domidumont1 left
[12:23] <jkramer> lizmat: Who are ports like P5chdir aimed for, when P6 has chdir builtin already? Are there people who'd actually rather use a module like that than changing their code to use IO.chdir?

[12:25] <jkramer> BTW I went through the top dependencies list from yesterday and a huge lot of the most-used modules are kinda obselete in P6 anyway, since they're builtin/available in the standard library - which is pretty awesome for P6 I think :)

[12:28] <jkramer> I think I might try to implement Term::ReadKey in P6 since its there seems to be demand for it and playing with term controls might be interesting as it probably requires native stuff

[12:28] <jkramer> That or Archive::Tar

[12:29] *** kurahaupo joined
[12:30] <Herby_> o/

[12:31] <timotimo> the idea is that users can just continue with their p5 knowledge, and move over p5 code with as little hassle as possible

[12:33] <El_Che> what is the stance of small applications in the ecosystem? In Go there are zillions of lib in github that are a go get away. Do we want growth through quantity of a more select approach?

[12:34] <El_Che> I asked becasue I wrote a small app yesterday that looks for newer version of software and nudge (by email, rest of whatever) the user

[12:35] <El_Che> should that kind of stuff live in github or be part of the ecosystem (it's a generic Module + cmd line app that uses it)

[12:37] <AlexDaniel> buggable: eco App

[12:37] <buggable> AlexDaniel, Found 68 results: Bailador, Bailador, App::Mi6, Web, Electron. See https://modules.perl6.org/s/App

[12:37] <AlexDaniel> buggable: eco App::

[12:37] <buggable> AlexDaniel, Found 35 results: App::Mi6, App::GPTrixie, Web::App::MVC, App::InstallerMaker::WiX, App::Pray. See https://modules.perl6.org/s/App%3A%3A

[12:37] <AlexDaniel> El_Che: ↑

[12:38] <AlexDaniel> El_Che: so yes, preferably in the ecosystem. This way it'll also be tested when we run toaster

[12:38] <El_Che> AlexDaniel: I tend to write apps where the core functionality is in a Module that be reused and a cmd line app that handles cli and config

[12:39] <El_Che> ok, I'll clean it up and upload it

[12:39] <araraloren_> :) I have some app in the ecosystem

[12:39] <AlexDaniel> El_Che: right hmm… Does it mean that it has to be two modules? I actually don't know

[12:39] <araraloren_> grep: FindSource

[12:39] <greppable6> araraloren_, 5 lines, 3 modules: https://gist.github.com/569e2eb02e6e363264acf19f1dd25e2b

[12:39] <El_Che> I have an evil plan to write more perl6 stuff for smallish things at $work so I can ask for a license for Coma :)

[12:40] <El_Che> AlexDaniel: I think it should be a module that delivers a default app implementation

[12:40] <AlexDaniel> El_Che: okay yea, that should work

[12:40] <El_Che> AlexDaniel: this approach works well in go, like in https://github.com/nxadm/ldifdiff I have a cmd dir with the implementation

[12:41] <El_Che> only the cmd versions in its dependencies, while the lib doesn't

[12:42] *** kurahaupo left
[12:42] *** kurahaupo joined
[12:45] <jmerelo> El_Che: evil plans are the best

[12:52] *** kurahaupo left
[12:52] *** kurahaupo joined
[12:52] *** athenot joined
[12:53] <Geth> ¦ doc: c64c3a1bd2 | 陈梓立++ | doc/Language/regexes.pod6

[12:53] <Geth> ¦ doc: Rearrange sections of Regex

[12:53] <Geth> ¦ doc: 

[12:53] <Geth> ¦ doc: Separate Wildcards and character classes into two section,

[12:53] <Geth> ¦ doc: also rearrange some subsection to improve readability.

[12:53] <synopsebot> Link: https://doc.perl6.org/language/regexes

[12:53] <Geth> ¦ doc: 

[12:53] <Geth> ¦ doc: Improve some examples and typesetting.

[12:53] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c64c3a1bd2

[12:56] *** mcmillhj joined
[12:57] *** kt_ left
[13:01] *** domidumont1 joined
[13:02] *** domidumont left
[13:04] <Tison> Regex document mixed use 'anchor' and 'assertion', are they really the same thing?

[13:04] *** kurahaupo left
[13:04] <Tison> https://docs.perl6.org/language/regexes#Anchors

[13:04] *** kurahaupo joined
[13:04] *** zakharyas joined
[13:05] <araraloren_> no

[13:05] <araraloren_> IMO :)

[13:06] <Geth> ¦ doc: 8964acd63e | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/5to6-perlfunc.pod6

[13:06] <Geth> ¦ doc: Mention &*chdir in p5-6 chdir docs

[13:06] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8964acd63e

[13:06] <synopsebot> Link: https://doc.perl6.org/language/5to6-perlfunc

[13:07] <Tison> .ask moritz Regex document mixed use 'anchor' and 'assertion', are they really the same thing?

[13:07] <yoleaux> Tison: I'll pass your message to moritz.

[13:07] <moritz> Tison: good question

[13:07] <yoleaux> 13:07Z <Tison> moritz: Regex document mixed use 'anchor' and 'assertion', are they really the same thing?

[13:07] <jmerelo> timotimo: Most assertions are anchors. Some are not

[13:08] <moritz> I *think* that ... what jmerelo said

[13:08] <jmerelo> So probably they should go in different sections

[13:09] <jnthn> Hm, I'd had it as anchors being things like $ and ^ and friends, while assertions are things using the <foo> syntax

[13:11] <jmerelo> jnthn: right. And they are now in the same "Anchors" section, like Tison has noticed.

[13:12] <jmerelo> As you see above, there's been a recent rearrangement...

[13:12] <Tison> ok..let me think of it..

[13:14] <Geth> ¦ doc: dbd7cf231f | (JJ Merelo)++ | doc/Language/grammars.pod6

[13:14] <Geth> ¦ doc: Puts token and rule back into the index

[13:14] <Geth> ¦ doc: 

[13:14] <Geth> ¦ doc: Closes #1967

[13:14] <Geth> ¦ doc: 

[13:14] <synopsebot> Link: https://doc.perl6.org/language/grammars

[13:14] <Geth> ¦ doc: Also refs #1912 because regex was repeated.

[13:14] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/dbd7cf231f

[13:14] *** jmerelo left
[13:14] *** Zoffix joined
[13:15] <Zoffix> jkramer: it's part of the The Butterfly Perl 5 Project: https://www.perl.com/article/an-open-letter-to-the-perl-community/  makes porting Perl 5 modules easier, since you can just stick one of those modules and get Perl 5's behaviour for those routines.

[13:17] <lizmat> actually CPAN Butterfly Plan, a precursor to the Butterfly Perl 5 Project

[13:18] <lizmat> really afk&

[13:18] *** kurahaupo left
[13:18] *** scimon left
[13:19] *** scimon joined
[13:20] *** luffysenpai joined
[13:20] *** comborico1611 joined
[13:20] <Zoffix> Ah, right, CPAN Butterfly I meant

[13:22] <luffysenpai> Here from the perl6 site, how do I get started?

[13:22] *** kurahaupo joined
[13:22] <Zoffix> luffysenpai: do you know any programming languages already?

[13:22] <luffysenpai> Python, C, C++, Java

[13:23] <Zoffix> luffysenpai: you could try LearnXinY site: https://learnxinyminutes.com/docs/perl6/ We also have a Python -> Perl 6 in a nutshell doc: https://docs.perl6.org/language/py-nutshell

[13:24] <luffysenpai> Doing a graduate course in computer engineering, will this help?

[13:24] <Zoffix> luffysenpai: there's also http://perl6intro.com/ books (some are free) https://perl6book.com/ and you can check the "For newcomers" section on https://perl6.org/resources/

[13:24] <Zoffix> No idea. Haven't done any computer engineering courses.

[13:24] *** titsuki_ left
[13:25] <Zoffix> It'd help in a sense that you learn another language. And Perl 6 is also multi-paradigm so you learn a bunch of... paradigms

[13:25] <Zoffix> Plus Perl 6 is a lexically mutable language, which is a really fancy thing as I understand it

[13:26] *** [Coke]_ is now known as [Coke]

[13:27] <Zoffix> m: { sub infix:<♥> { say $^a + $^b }; say 2 ♥ 42; #`(look! a ♥ operator here!) }; try 'say 2 ♥ 42'; say $!.^name; #`(but not here anymore)

[13:27] <camelia> rakudo-moar 29b092c94: OUTPUT: «WARNINGS for <tmp>:␤44␤True␤Any␤Useless use of constant string "say 2 ♥ 42" in sink context (line 1)␤»

[13:27] <Zoffix> m: { sub infix:<♥> { say $^a + $^b }; say 2 ♥ 42; #`(look! a ♥ operator here!) }; try 'say 2 ♥ 42'.EVAL; say $!.^name; #`(but not here anymore)

[13:27] <camelia> rakudo-moar 29b092c94: OUTPUT: «44␤True␤X::Syntax::Confused␤»

[13:27] <luffysenpai> I'm supposed to be learning simple perl scripts to be implemented via cmd tomorrow in an exam, and thse links you've provided already help a bunch!

[13:27] <Juerd> luffysenpai: Note that if it's homework, it might be about Perl 5 instead of Perl 6

[13:28] <Zoffix> luffysenpai: uh.. are you sure the exam is about Perl 6 and not Perl (as in Perl 5)? They're different languages; like C vs C++

[13:28] <luffysenpai> I'm looking forward to learning, at what point doI begin to contribue though?

[13:28] <luffysenpai> It's about perl 5 but I'm interested in perl 6, so this is extra-curricular for me

[13:29] <Zoffix> luffysenpai: you can contribute right away. A lot of people start off with the docs, since as a newcomer it's a lot easier for you to see what needs to be improved. There's also a bunch of open Issues: https://github.com/perl6/doc/issues

[13:29] <luffysenpai> I'm already making comparisons between 5 and 6

[13:30] *** vike left
[13:33] *** athenot_ joined
[13:34] *** athenot left
[13:35] *** vike joined
[13:35] <luffysenpai> Thank you @Zoffix!

[13:35] <Zoffix> Any time.

[13:36] *** Tison left
[13:37] *** vcv_ joined
[13:37] *** kurahaupo left
[13:37] *** kurahaupo joined
[13:39] *** skids joined
[13:39] <kurahaupo> Zoffix: did you intend « say say 2+42 »

[13:39] <Zoffix> nay, just one say

[13:40] <araraloren_> m: { sub infix:<♥> { $^a + $^b }; say 2 ♥ 42

[13:40] <camelia> rakudo-moar 29b092c94: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3 sub infix:<♥> { $^a + $^b }; say 2 ♥ 427⏏5<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        …»

[13:40] <araraloren_> m: sub infix:<♥> { $^a + $^b }; say 2 ♥ 42

[13:40] <camelia> rakudo-moar 29b092c94: OUTPUT: «44␤»

[13:40] <Zoffix> Also, that example is bogus, 'cause that sub won't be seen in the EVAL even if it were in scope.

[13:40] <kurahaupo> Yay!

[13:41] <Zoffix> huh.. wonder if it's a bug actually.

[13:41] <Zoffix> Ah no

[13:42] <Zoffix> m: sub say(|) { put "no say for you!" }; try q|say 2 ♥ 42|.EVAL; say $!.^name;

[13:42] <camelia> rakudo-moar 29b092c94: OUTPUT: «no say for you!␤»

[13:42] <Zoffix> (got confused by this, but the "no say for you" is coming from the say that says the name)

[13:42] <Zoffix> oh and I wasn't meant to use ♥ in the eval /o\

[13:43] <Zoffix> m: sub put(|) { say "no say for you!" }; try q|put 42|.EVAL; say $!.^name;

[13:43] <camelia> rakudo-moar 29b092c94: OUTPUT: «no say for you!␤Any␤»

[13:43] <Zoffix> So EVAL does see lexical changes. But it doesn't see language mutations? I guess that's normal

[13:44] *** Kaiepi left
[13:44] *** Kaiepi joined
[13:45] *** domidumont joined
[13:47] *** Tison joined
[13:48] <AlexDaniel> haha https://docs.perl6.org/language/5to6-perlfunc#chdir

[13:48] *** kurahaupo left
[13:48] <tadzik> :

[13:48] <tadzik> :o

[13:49] *** domidumont1 left
[13:49] *** kurahaupo joined
[13:49] <Geth> ¦ doc: 53e0604615 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/5to6-perlfunc.pod6

[13:49] <Geth> ¦ doc: Fix pod error in chdir

[13:49] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/53e0604615

[13:49] <synopsebot> Link: https://doc.perl6.org/language/5to6-perlfunc

[13:50] <Zoffix> .ask TimToady are language mutations supposed to propagate to EVAL (e.g. sub infix:<♥> { say $^a + $^b }; 'say 2 ♥ 42'.EVAL) ? I see &EVAL tries to find LANG, but dumping it even at begin time seems to always show Nil: https://github.com/rakudo/rakudo/blob/29b092c94/src/core/ForeignCode.pm6#L54-L66

[13:50] <yoleaux> Zoffix: I'll pass your message to TimToady.

[13:55] <comborico1611> I'm trying to figure out what this simple example is doing: https://hastebin.com/bituxeyuza.pl

[13:55] <Zoffix> comborico1611: it fails to compile because variable is not defined :P

[13:56] <comborico1611> Yeah, I don't think it is runable.  But the author is trying to teach something from it, but I don't get it.

[13:57] <Zoffix> comborico1611: but basically @array is a thing that holds a bunch of things and each of the things it holds is numbered (called an index) and you can store or retrieve those things by using @array[$index]. And for cases when you want to store/retrieve more than one thing at the same time, there's "array slice" syntax, where you give more than one index at the same time, e.g. @array[0, 2];. In that example, the

[13:57] <Zoffix> more than one index is stored in another array @keys. And then you assign more than one thing by doing @array[@keys] = @lettters; So the first item in @letters will go to index 0 and second item in @letters will go to index 2

[13:58] <Zoffix> m: my @keys = <0 2>; my @letters = 'a'…'z'; (my @array)[@keys] = @letters; dd @array

[13:58] <camelia> rakudo-moar 29b092c94: OUTPUT: «Array @array = ["a", Any, "b"]␤»

[13:58] <Zoffix> m: my @keys = <0 2>; my @letters = 'a'…'z'; my @array = ^5; @a[@keys] = @letters; dd @array

[13:58] <camelia> rakudo-moar 29b092c94: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@a' is not declared␤at <tmp>:1␤------> 3 my @letters = 'a'…'z'; my @array = ^5; 7⏏5@a[@keys] = @letters; dd @array␤»

[13:58] <Zoffix> m: my @keys = <0 2>; my @letters = 'a'…'z'; my @array = ^5; @array[@keys] = @letters; dd @array

[13:58] <camelia> rakudo-moar 29b092c94: OUTPUT: «Array @array = ["a", 1, "b", 3, 4]␤»

[13:59] <Zoffix> m: my @keys = <0 2>; my @letters = 'a'…'z'; my @array = ^5; @array[@keys] = 'a'…'z'; dd @array

[13:59] <camelia> rakudo-moar 29b092c94: OUTPUT: «Array @array = ["a", 1, "b", 3, 4]␤»

[13:59] <Zoffix> m: my @keys = <0 2>; my @letters = 'a'…'z'; my @array = ^5; @array[^10] = 'a'…'z'; dd @array

[13:59] <camelia> rakudo-moar 29b092c94: OUTPUT: «Array @array = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]␤»

[13:59] *** kurahaupo left
[14:00] <Zoffix> m: my @keys = <0 2>; (my @array)[$@keys] = 'a'…'z'; dd @array # a curveball :P

[14:00] <camelia> rakudo-moar 29b092c94: OUTPUT: «Array @array = [Any, Any, ("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z").Seq]␤»

[14:00] *** kurahaupo joined
[14:01] <Zoffix> Well, you should ignore the last one for now, comborico1611 :)

[14:01] <comborico1611> Zoffix: I see.  Yes that is it.  "slicing"  Very good.  thanks!

[14:02] <comborico1611> err "array slice syntax"

[14:02] <Zoffix> "slicing" is also a decent term :)

[14:02] <Zoffix> Works with hashes too

[14:02] <comborico1611> Eh I like the formal one.

[14:03] <Zoffix> m: my @keys = <foo bar ber>; (my %h){@keys} = ^10; dd %h

[14:03] <camelia> rakudo-moar 29b092c94: OUTPUT: «Hash %h = {:bar(1), :ber(2), :foo(0)}␤»

[14:03] <Zoffix> m: (my %h)<foo bar ber> = ^10; dd %h

[14:03] <camelia> rakudo-moar 29b092c94: OUTPUT: «Hash %h = {:bar(1), :ber(2), :foo(0)}␤»

[14:05] <Zoffix> m: my @keys = <foo bar ber>; (my %h is BagHash){@keys} = ^10; dd %h

[14:05] <camelia> rakudo-moar 29b092c94: OUTPUT: «("bar","ber"=>2).BagHash␤»

[14:05] *** Zoffix left
[14:09] *** pilne left
[14:09] *** kurahaupo left
[14:10] *** kurahaupo joined
[14:13] *** kurahaupo left
[14:13] *** kurahaupo joined
[14:14] *** wamba joined
[14:15] *** ced_ joined
[14:18] *** hythm joined
[14:23] *** squashable6 joined
[14:24] <Geth> ¦ doc: 58ff646a6a | 陈梓立++ | doc/Language/regexes.pod6

[14:24] <Geth> ¦ doc: Rearrange sections of regex/anchors

[14:24] <Geth> ¦ doc: 

[14:24] <Geth> ¦ doc: Separate anchors into two sections, Anchors and

[14:24] <Geth> ¦ doc: Zero-Width Assertions. Since they are not quite

[14:24] <synopsebot> Link: https://doc.perl6.org/language/regexes

[14:24] <Geth> ¦ doc: the same concept.

[14:24] <Geth> ¦ doc: 

[14:24] <Geth> ¦ doc: Also do some improvements and introduce a summary

[14:24] <Geth> ¦ doc: table of anchors.

[14:24] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/58ff646a6a

[14:28] *** athenot joined
[14:32] *** mscha left
[14:32] *** athenot_ left
[14:34] *** hythm left
[14:35] <Geth> ¦ doc: 8902a9ec3e | (Will "Coke" Coleda)++ | doc/Language/5to6-perlfunc.pod6

[14:35] <Geth> ¦ doc: whitespace

[14:35] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8902a9ec3e

[14:35] <Geth> ¦ doc: 0cf11f4872 | (Will "Coke" Coleda)++ | 2 files

[14:35] <Geth> ¦ doc: learn new words

[14:35] <synopsebot> Link: https://doc.perl6.org/language/5to6-perlfunc

[14:35] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0cf11f4872

[14:37] <jkramer> https://gist.github.com/jkramer/c47495d8e31da2e1eb3c5f525889d994

[14:38] <jkramer> Any ideas about the $*IN.getc bit? I don't know what it does internally that would cause that

[14:40] <jkramer> Ah it's probably about encoding.

[14:41] <Juerd> https://juerd.nl/i/a99062b2aee0fd69baaf163255b3a730.png  # one-time error. I have not been able to reproduce it at all.

[14:42] <jkramer> Hmm but in binary mode .getc throws X::IO::BinaryMode :D

[14:42] <jkramer> ascii encoding works.

[14:43] *** ced_ left
[14:44] <mcmillhj> Is there a better way to flatten multiple Range objects into a single list than: ('0' .. '9', 'a' .. 'z', 'A' .. 'Z').flatmap({ .flat }) or is this a generally accepted approach ?

[14:45] <araraloren_> m: say  ('0' .. '9', 'a' .. 'z', 'A' .. 'Z')

[14:45] <camelia> rakudo-moar 29b092c94: OUTPUT: «("0".."9" "a".."z" "A".."Z")␤»

[14:45] <araraloren_> m: .say for ('0' .. '9', 'a' .. 'z', 'A' .. 'Z')

[14:45] <camelia> rakudo-moar 29b092c94: OUTPUT: «"0".."9"␤"a".."z"␤"A".."Z"␤»

[14:45] <araraloren_> m: .say for ('0' ... '9', 'a' ... 'z', 'A' ... 'Z')

[14:45] <camelia> rakudo-moar 29b092c94: OUTPUT: «0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤a␤b␤c␤d␤e␤f␤g␤h␤i␤j␤k␤l␤m␤n␤o␤p␤q␤r␤s␤t␤u␤v␤w␤x␤y␤z␤A␤B␤C␤D␤E␤F␤G␤H␤I␤J␤K␤L␤M␤N␤O␤P␤Q␤R␤S␤T␤U␤V␤W␤X␤Y␤Z␤»

[14:46] <jnthn> m: dd ('0' .. '9', 'a' .. 'z', 'A' .. 'Z').flat

[14:46] <camelia> rakudo-moar 29b092c94: OUTPUT: «("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", …»

[14:46] <mcmillhj> jnthn: what does `dd` do ? 

[14:46] <araraloren_> dump ?

[14:46] <jnthn> Dump

[14:47] <jnthn> To show the result

[14:47] <jnthn> A single .flat seems to do what you want without the map, though.

[14:47] <mcmillhj> oh ok, I didn't realize I could use .flat directly on the List of Ranges

[14:48] <Geth> ¦ doc: 010f8eb9c8 | 陈梓立++ | doc/Language/regexes.pod6

[14:48] <Geth> ¦ doc: Fix X<> tag for render

[14:48] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/010f8eb9c8

[14:48] <synopsebot> Link: https://doc.perl6.org/language/regexes

[14:49] <mcmillhj> jnthn: thanks

[14:50] *** ChoHag joined
[14:51] *** kt_ joined
[14:55] *** Zoffix joined
[14:56] *** troys joined
[14:56] <Zoffix> jkramer: documentation often describes all such behaviours. See the documentation for getc routine, in particular the "Waiting for potential combiners" section: https://docs.perl6.org/routine/getc.html#(IO::Handle)_routine_getc

[14:58] *** ChoHag left
[14:59] <jkramer> Zoffix: Yup, found it

[14:59] <jkramer> It works if I set the encoding to ascii first

[14:59] *** Tison left
[15:00] <Zoffix> jkramer: I'd guess that cause a crash for any non-ascii chars

[15:00] *** ChoHag joined
[15:01] <jkramer> Zoffix: True

[15:01] <Zoffix> m: '漢'.decode.encode: 'ascii'

[15:01] <camelia> rakudo-moar 29b092c94: OUTPUT: «No such method 'decode' for invocant of type 'Str'. Did you mean 'encode'?␤  in block <unit> at <tmp> line 1␤␤»

[15:01] <Zoffix> m: '漢'.encode.decode: 'ascii'

[15:01] <camelia> rakudo-moar 29b092c94: OUTPUT: «Can not decode a utf-8 buffer as if it were ascii␤  in block <unit> at <tmp> line 1␤␤»

[15:01] <Zoffix> m: Buf.new('漢'.encode).decode: 'ascii'

[15:01] <camelia> rakudo-moar 29b092c94: OUTPUT: «Will not decode invalid ASCII (code point > 127 found)␤  in block <unit> at <tmp> line 1␤␤»

[15:02] <jkramer> I'm not too proficient with UTF-8 encoding, but shouldn't it .getc return instantly for characters like 'e' as they're not combiners?

[15:02] <Zoffix> jkramer: a combiner may follow "e" to turn it into "é"

[15:02] <Zoffix> m: say "e" ~ "\x[308]"

[15:02] <camelia> rakudo-moar 29b092c94: OUTPUT: «ë␤»

[15:02] <Zoffix> m: say ("e" ~ "\x[308]").chars

[15:02] <camelia> rakudo-moar 29b092c94: OUTPUT: «1␤»

[15:02] <jkramer> Ah

[15:03] <jkramer> I assumed non-ascii chars in UTF-8 always have a leading special code, not an ascii character and a trailing modifier

[15:03] *** dustinm` left
[15:05] <jkramer> Hmm, now I don't know what to do. I tempted to use getchar() but then again users might expect it to work with multibyte/non-ascii characters

[15:08] <jkramer> But then again it's read-key, not read-char :)

[15:11] <timotimo> multibyte is also for things like arrow keys

[15:11] <chansen_> Zoffix: How do you instruct Rakudo that you want to distingue between a sequence of logical characters (grapheme clusters) and a sequence of code points?

[15:12] <Zoffix> m: say ("e" ~ "\x[308]").codes

[15:12] <camelia> rakudo-moar 29b092c94: OUTPUT: «1␤»

[15:12] <Zoffix> no idea

[15:12] * Zoffix is a Unicode n00b

[15:12] <timotimo> we don't yet have a "just decode this unicode" mode, we always do normalization at the moment

[15:14] <chansen_> That is a flaw in the design IMHO, there should be a distinction between a sequence of logical characters (grapheme clusters) and a sequence code points.

[15:14] <timotimo> you can get at the code points easily

[15:14] <timotimo> but they'll always have gone through normalization

[15:14] <timotimo> but yeah, NYI, i'd also like us to have that feature

[15:16] *** domidumont left
[15:16] <Zoffix> m: [.codes, .chars].say with "\c[woman juggling: dark skin tone]"

[15:16] <camelia> rakudo-moar 29b092c94: OUTPUT: «[5 1]␤»

[15:16] *** dustinm` joined
[15:17] *** araraloren_ left
[15:18] *** athenot left
[15:23] <Geth> ¦ doc: 263299f667 | 陈梓立++ (committed using GitHub Web editor) | util/trigger-rebuild.txt

[15:23] <Geth> ¦ doc: Update trigger-rebuild.txt

[15:23] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/263299f667

[15:25] <mcmillhj> Is there a paste site for this channel?

[15:27] <Zoffix> mcmillhj: most people just use https://gist.github.com/

[15:28] *** jmerelo joined
[15:28] <mcmillhj> Zoffix: gotcha, I'll make a gist. I have a question about sharing type constraints

[15:28] <mcmillhj> https://gist.github.com/mcmillhj/6447e9a051576cdd5adb61db0f848dba

[15:28] <jkramer> I found an awkward hack for returning ascii chars instantly but supporting multi-byte UTF-8 chars at the same time. :) https://gist.github.com/jkramer/c47495d8e31da2e1eb3c5f525889d994

[15:29] <jmerelo> mcmillhj: you can also try StackOverflow...

[15:29] <jkramer> It basically reads the input as single bytes and appends them to a buffer. As soon as Buf.decode works without an exception, it returns that as result

[15:30] <mcmillhj> jmerelo: I can post it there if you all want to have some sort of record of the question, I just couldn't see from the docs how to apply a signature to multiple parameters across several functions 

[15:31] <jmerelo> mcmillhj: yep, we would appreciate that. It's easier also for newcomers.

[15:31] <chansen_> jkramer: ouch, that's an ugly hack ;)

[15:31] <Zoffix> m: subset LimitB of Int where Int 2 ≤ * ≤ 62; sub a(LimitB $x) { say "a $x" }; sub b(LimitB $y) { say "b $y" }; a 42; b 50;

[15:31] <camelia> rakudo-moar 29b092c94: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3subset LimitB of Int where Int7⏏5 2 ≤ * ≤ 62; sub a(LimitB $x) { say "a $␤    expecting any of:␤        infix␤        infix stopper␤        p…»

[15:31] <Zoffix> m: subset LimitB of Int where 2 ≤ * ≤ 62; sub a(LimitB $x) { say "a $x" }; sub b(LimitB $y) { say "b $y" }; a 42; b 50;

[15:31] <camelia> rakudo-moar 29b092c94: OUTPUT: «a 42␤b 50␤»

[15:31] <jkramer> chansen_: I know but it works surprisingly well :D

[15:31] <Zoffix> mcmillhj: ^ you can define a subset. Also, as you can see, you can chain the comparators

[15:31] <jmerelo> mcmillhj: and if there are doc problems or missing features present, please make a doc issue go with that :-) (Although if you mention it in StackOverflow, I usually do that myself)

[15:32] * Zoffix has no idea where they are documented...

[15:32] <mcmillhj> oh interesting, so that is a new type instead of a signature applied to multiple parameters

[15:32] <mcmillhj> it's possible I was thinking of the problem incorrectly and that is why it wasn't in the docs

[15:32] <Zoffix> mcmillhj: pretty much

[15:33] <mcmillhj> I was looking here: https://docs.perl6.org/type/Signature

[15:33] <Zoffix> You can't instantiate it or anything, but you can typecheck against it

[15:34] <jmerelo> mcmillhj: you can check out this article by Zoffix https://perl6advent.wordpress.com/2016/12/08/how-to-make-use-and-abuse-perl-6-subsets/

[15:34] <Zoffix> mcmillhj: found a bit of docs here: https://docs.perl6.org/language/typesystem#subset

[15:35] <jmerelo> mcmillhj: but yep, that would be an excellent question for StackOverflow. 

[15:35] * Zoffix gulps at that article

[15:35] <mcmillhj> I'll ask it there as well so there is a record and include both answers

[15:35] <jmerelo> Zoffix: subsets are not in the index, though... 

[15:35] <Zoffix> Maybe it's because of the indexing issue tho. or was that fixed/

[15:35] <mcmillhj> I was specifically thinking about sharing this somehow: my $sig = :(Int $a where $a >= 2 && $a <= 62);

[15:35] <mcmillhj> not sure if that is possible

[15:35] <jmerelo> Zoffix: we haven't even figured it out.

[15:36] <chansen_> jkramer: Hopefully this will be rectified, there are three levels of layers in Unicode: code units, code points and logical characters.

[15:36] *** wamba left
[15:36] <jmerelo> mcmillhj: you can't declare signatures and then use them for declaring routines, unfortunately

[15:36] <Zoffix> mcmillhj: share how? Isn't that what subset would do? You're constraining by Int and a custom codeblock in both cases

[15:37] <mcmillhj> jmerelo: okay, that is where I got lost then :)

[15:37] <mcmillhj> Zoffix: I totally agree that the subset seems like the correct way about this, but looking at the Signature docs I saw that definition and (incorrectly) thought there would be a way to share it. 

[15:37] *** luffysenpai left
[15:37] <jmerelo> mcmillhj: mee too: https://stackoverflow.com/questions/48801383/can-you-actually-use-declared-signatures-in-a-subroutine-declaration and https://stackoverflow.com/questions/41531393/can-i-use-a-standalone-signature-as-a-signature-in-perl-6

[15:38] <mcmillhj> well, that will teach me to not google more first :\

[15:38] <Zoffix> m: my $sig = :(Int $a where $a >= 2 && $a <= 62); sub a(|c) { c ~~ $sig ?? (say "in") !! die "Wrong params" }; a 42

[15:38] <camelia> rakudo-moar 29b092c94: OUTPUT: «in␤»

[15:38] <Zoffix> m: my $sig = :(Int $a where $a >= 2 && $a <= 62); sub a(|c) { c ~~ $sig ?? (say "in") !! die "Wrong params" }; a 70

[15:38] <camelia> rakudo-moar 29b092c94: OUTPUT: «Wrong params␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:38] <Zoffix> haha :)

[15:38] <mcmillhj> I'll still add this question though, I think it has way separate from that question 

[15:38] <mcmillhj> s/way/value/

[15:39] <Zoffix> m: my $sig = :(Int $a where $a >= 2 && $a <= 62); sub a(|c where $sig) { say "in" }; a 70

[15:39] <camelia> rakudo-moar 29b092c94: OUTPUT: «Constraint type check failed in binding to parameter 'c'; expected anonymous constraint to be met but got Capture (\(70))␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:39] <jmerelo> mcmillhj: thanks!

[15:39] <Zoffix> m: my $sig = :(Int $a where $a >= 2 && $a <= 62); sub a(|c where $sig) { say "in" }; a 40

[15:39] <camelia> rakudo-moar 29b092c94: OUTPUT: «in␤»

[15:39] <Zoffix> m: my $sig = :(Int $a where $a >= 2 && $a <= 62); multi a(|c where $sig) { say "in" }; multi a(|) { say "wrong args, bruh" }; a 40

[15:39] <camelia> rakudo-moar 29b092c94: OUTPUT: «in␤»

[15:39] <Zoffix> m: my $sig = :(Int $a where $a >= 2 && $a <= 62); multi a(|c where $sig) { say "in" }; multi a(|) { say "wrong args, bruh" }; a 100

[15:39] <camelia> rakudo-moar 29b092c94: OUTPUT: «wrong args, bruh␤»

[15:41] <Zoffix> m: multi a($) is pure { say "in" }; $ = a 50; INIT say "meow"

[15:41] <camelia> rakudo-moar 29b092c94: OUTPUT: «meow␤in␤»

[15:42] <Zoffix> That's a very easy way to lose your opt....

[15:42] <Zoffix> (`pure` ain't on the proto, so it don't get folded)

[15:44] *** ced_ joined
[15:45] <ced_> join

[15:45] *** ChoHag left
[15:46] <ced_> Hi everybody.

[15:46] <ced_> Could someone help me with following I try to use the perl6-debug-m it works and I can poke around in the code. What I'm missing is the Term::Readline functionality arrow up down CTRL-K etc.... I've installed readline with zef and it seems I was succesfull. If there is a place where I could read me through what is the url? Google did not have a clue

[15:46] <timotimo> ced_: the easiest way to get readline into a program is to use rlwrap, i heavily recommend that

[15:47] <timotimo> you would just use "rlwrap your-command blah" on the terminal

[15:47] <timotimo> i.e. "rlwrap perl6-debug-m -e 'say q/hi/'"

[15:48] <ced_> thks I'll have a try

[15:49] <jmerelo> ced_: Can you also post that question in StackOverflow? To gather more answers and/or give it more visibility. Thanks!

[15:51] <timotimo> how about we go through every paragraph of the docs and turn it into a potential stackoverflow question and find someone in the community to post it ...

[15:52] <jmerelo> timotimo: and then we use the answers to modify the documentation which then raises new questions...

[15:53] *** ced_ left
[15:54] <timotimo> for no good reason, the idea to ask everybody who has a question to also post to stackoverflow, kind of irks me

[15:54] <jmerelo> timotimo: you probably have a good reason in that I'm being quite repetitive. I think I've said it like 3 times today.

[15:55] <jmerelo> I know it can be annoying. It's not totally unintended, though. 

[15:57] *** khw joined
[15:57] <jmerelo> But so far there are 641 questions tagged Perl6 in stackoverflow. 640 of them are by brian d foy.

[15:58] <jmerelo> Just kiddin', but if he weren't asking questions, there would be like 80 less. 

[15:59] <jmerelo> This IRC channel and Twitter are amazing for getting your questions answered knowledgeably, amiably and fast.

[15:59] <jmerelo> However, it's not the best thing for indexing those questions and answers. Somebody looking for perl6-debug-m is highly unlikely to arrive to the 300th line in an IRC day log.

[16:01] <jmerelo> There's like half a dozen of problems solved in this IRC channel a day. That's around 5 more than are solved in StackOverflow on a daily basis. And that's 5 questions and amazng answers that will be lost, like teardrops in the rain.

[16:02] <jmerelo> So, timotimo, sorry for the rant, but I'm likely do the "stackoverflow it" all over again...

[16:04] *** aindilis joined
[16:04] *** kaare_ left
[16:04] <timotimo> fair enough

[16:11] *** scimon left
[16:19] *** shlomif joined
[16:21] *** rindolf left
[16:24] <Zoffix> jmerelo: yeah, do it. It's mildly annoying and not everyone will post questions (or answers), but there's a long term benefit of having lots of P6 on SO

[16:25] <Zoffix> Break out of the echo chamber :)

[16:26] *** shlomif is now known as rindolf

[16:26] <Zoffix> I'm guessing new ones show up on SO's homepage too? https://stackoverflow.com/   That's even better for visibility.

[16:27] <jmerelo> Zoffix: that's correct. I also try to tag questions with things such as "functional" so "oop" so that we get geeks from that area interested too :-)

[16:28] <Zoffix> jmerelo++

[16:33] *** robertle left
[16:33] *** dakkar left
[16:38] <comborico1611>  What does auto-quoted mean? my %hash = foo => "bar", # keys get auto-quoted

[16:38] *** albongooo___ left
[16:39] <AlexDaniel> comborico1611: meaning that you don't have to write my %hash = 'foo' => "bar"

[16:39] <AlexDaniel> but you can

[16:39] <comborico1611> What is the shorthand version?

[16:39] *** albongo joined
[16:39] <Zoffix> huggable: colonpair

[16:39] <huggable> Zoffix, All the shortcuts of colonpairs: https://twitter.com/zoffix/status/839807414211854337

[16:39] *** athenot joined
[16:39] <Zoffix> comborico1611: ^ prolly any of those variants

[16:40] <Zoffix> huggable: colonpair :is: The majority of the shortcuts of colonpairs: https://twitter.com/zoffix/status/839807414211854337

[16:40] <huggable> Zoffix, Added colonpair as The majority of the shortcuts of colonpairs: https://twitter.com/zoffix/status/839807414211854337

[16:40] <abraxxa> Zoffix: typo in your twitter: stings that look like numbers

[16:41] <Zoffix> too late now. :)

[16:41] <comborico1611> Ahh!  I get it.  'foo' compare with foo.  thanks!

[16:44] *** luffysenpai joined
[16:44] *** zakharyas left
[16:48] *** zakharyas joined
[16:48] *** Zoffix left
[16:49] *** jmerelo left
[16:49] *** domidumont joined
[16:53] *** luffysenpai left
[16:55] <comborico1611> So far I'm enjoying the LearnXinYminutes of Perl6

[16:59] <comborico1611> Wanting to confirm this simple subroutine tutorial has an error: https://hastebin.com/soraletuzi.pl

[17:00] *** zakharyas left
[17:01] *** zakharyas joined
[17:01] <colomon> comborico1611: is the issue what with-optional (with no parens) returns?

[17:02] *** Zoffix joined
[17:02] <comborico1611> colomon: the string is returning on all three sub calls.

[17:02] <comborico1611> Which isn't want the author's comments say will happen.

[17:02] <colomon> the string is returned on NONE of the calls

[17:02] <Zoffix> comborico1611: no, there's no error. The first call is the same as the rest.

[17:02] <colomon> the return values are   (Any)  (Any)   1

[17:03] <Zoffix> comborico1611: the string is *printed* by the routine. The routine returns the argument you give it. And that argument defaults to Any type object if you don't give it an argument (which is the case in both the first and second calls)

[17:03] <Zoffix> s/same as the rest/same as the second/;

[17:03] <colomon> as given the code doesn’t do anything with the return value of the function

[17:04] <colomon> I added “say” to each of the last three lines so I’d know what it was doing.

[17:05] <Zoffix> m: sub z ($arg?) { $arg }; dd z; dd z(); dd z 42;

[17:05] <camelia> rakudo-moar 29b092c94: OUTPUT: «Any $arg = Any␤Any $arg = Any␤Int $arg = 42␤»

[17:05] <Zoffix> comborico1611: ^ a bit clearer example that actually dumps the return value

[17:05] <comborico1611> colomon: Yes, the "say" trick helps.  I'm not sure what this all means, but I get the string + Any etc

[17:05] <Zoffix> m: sub z ($arg = Int) { $arg }; say z; say z(); say z 42;

[17:05] <camelia> rakudo-moar 29b092c94: OUTPUT: «(Int)␤(Int)␤42␤»

[17:06] <colomon> comborico1611: no, the function call PRINTS the string (that’s what say does) and then returns $arg.

[17:06] <Zoffix> ^ and here a different default was given, so that's what's returned when no args are given

[17:06] *** Zoffix left
[17:09] <comborico1611> Alright.  I think I'm back on track now.

[17:09] <comborico1611> Thanks!

[17:15] <colomon> it would have been clearer to use dd (like Zoffix++ did back there a few lines) instead of say for the results of the calls to with-optional, at it would help visually distinguish what is being printed by say in the function from what is returned.

[17:23] *** robertle joined
[17:36] *** comborico1611 left
[17:45] *** zakharyas left
[17:47] *** jast left
[17:49] *** jast joined
[17:53] *** avalenn joined
[18:05] *** espadrine_ joined
[18:07] *** natrys left
[18:21] <mcmillhj> How do I indicate that I want an Array of Arrays? I notice that this appears to get flattened `my @queue = (('a', 'b'));` however if start with two elements no flattening occurs: `my @queue = (('a', 'b'), ('c', 'd'));`

[18:21] *** kaare_ joined
[18:22] *** andrzejk_ joined
[18:24] <AlexDaniel> m: my @queue = (('a', 'b'));; dd @queue

[18:24] <camelia> rakudo-moar 29b092c94: OUTPUT: «Array @queue = ["a", "b"]␤»

[18:24] <AlexDaniel> m: my @queue = (('a', 'b'),); dd @queue

[18:24] <camelia> rakudo-moar 29b092c94: OUTPUT: «Array @queue = [("a", "b"),]␤»

[18:24] <AlexDaniel> mcmillhj: basically you need a comma in there if you have only one element

[18:25] <mcmillhj> oh interesting, thanks 

[18:27] <AlexDaniel> mcmillhj: the docs explain it like this: “(1); # This is not a List, just a 1 in parentheses”

[18:27] <AlexDaniel> mcmillhj: https://docs.perl6.org/language/list#Literal_Lists

[18:30] *** sauvin left
[18:32] *** domidumont left
[18:33] <mcmillhj> AlexDaniel: thanks

[18:35] *** [particle]1 left
[18:37] *** kaare_ left
[18:37] *** darutoko left
[18:38] *** kaare_ joined
[18:42] *** jmerelo joined
[18:43] <jmerelo> hi

[18:56] *** zachk joined
[18:56] *** zachk left
[18:56] *** zachk joined
[18:59] *** jmerelo left
[19:00] *** pecastro left
[19:03] *** andrzejk_ left
[19:06] *** andrzejk_ joined
[19:07] *** lalitmee joined
[19:07] *** lalitmee left
[19:08] *** lalitmee joined
[19:08] *** lalitmee left
[19:10] *** zakharyas joined
[19:11] <mcmillhj> I can't seem to figure out what this means: `Type check failed in binding to parameter '@seq'; expected Positional[Array] but got Array ($[1, 8])`

[19:12] <mcmillhj> I have a subroutine that accepts an Array: `sub search(Array @seq where *.elems == 2) { ... }` and I am pretty sure I am passing an Array to it via `search([1, 8]);`

[19:13] <AlexDaniel> mcmillhj: well, @seq by itself will take an array just fine

[19:13] <AlexDaniel> mcmillhj: you're asking for an array of arrays actually

[19:13] <mcmillhj> AlexDaniel: ugh, I keep forgetting that

[19:14] <mcmillhj> AlexDaniel: thanks ;) 

[19:14] *** rickyracky joined
[19:14] *** rickyracky left
[19:15] <AlexDaniel> alternatively you can do something like this:

[19:15] <AlexDaniel> m: sub search(Array $a where *.elems == 2) { say ‘ok’ }; search [1, 2]'

[19:15] <camelia> rakudo-moar 29b092c94: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3.elems == 2) { say ‘ok’ }; search [1, 2]7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement en…»

[19:15] <AlexDaniel> m: sub search(Array $a where *.elems == 2) { say ‘ok’ }; search [1, 2]

[19:15] <camelia> rakudo-moar 29b092c94: OUTPUT: «ok␤»

[19:16] <mcmillhj> yeah, I just keep getting confused because the type signature and the sigil 

[19:28] *** [particle] joined
[19:29] *** raynold joined
[19:40] *** kt_ left
[19:53] <mcmillhj> Is it possible to use an Array as a key in a Hash? I read through this section in the docs: https://docs.perl6.org/type/Hash#Non-string_keys_(object_hash) which sort of implies this would work. I can't get it to work when trying however: https://gist.github.com/mcmillhj/e2200a93f61b1514a93b2be811b20cac

[19:59] <tobs> mcmillhj: looks like it's slicing the hash instead. I don't know if you can tell it not to.

[20:02] <tobs> m: my %h{Array}; %h.push: %{[1,2] => [3,4]}; %h.perl.say # :-/

[20:02] <camelia> rakudo-moar 29b092c94: OUTPUT: «Type check failed in binding to parameter 'key'; expected Array but got Str ("1 2")␤  in block <unit> at <tmp> line 1␤␤»

[20:02] <tobs> m: my %h{Array}; %h.push: :{[1,2] => [3,4]}; %h.perl.say

[20:02] <camelia> rakudo-moar 29b092c94: OUTPUT: «(my Any %{Array} = ([1, 2]) => $[3, 4])␤»

[20:05] <mcmillhj> ooh interesting 

[20:06] *** TEttinger joined
[20:09] *** mcmillhj left
[20:12] *** mmoc joined
[20:12] *** mmoc left
[20:12] <tobs> m: class A {}; my %h{A}; %h{A.new, A.new} = 42, 52; say %h.elems # seems to be fine if your keys don't slice

[20:12] <camelia> rakudo-moar 29b092c94: OUTPUT: «2␤»

[20:13] *** mephinet left
[20:15] *** comborico1611 joined
[20:17] *** pecastro joined
[20:26] *** FROGGS left
[20:29] *** zakharyas left
[20:31] *** Zoffix joined
[20:34] *** andrzejk_ left
[20:34] <comborico1611> Is / (a || b) c /  ... the same as... / [a || b] c /

[20:34] <comborico1611> ?

[20:34] <Zoffix> .tell mcmillhj You can use Arrays for hash keys, but it's likely to be pain, since they're not value types (so you'd have to use the same Array object to do the lookup, not one that just has the same values). Also, you need to place it into a Scalar container to tell the compiler you want to treat it as one item (the key) instead of a list of keys. Lastly, by default hashes stringigfy keys, so you'll need to

[20:34] <yoleaux> Zoffix: I'll pass your message to mcmillhj.

[20:34] <Zoffix> use object hashes: m: my @a = <a b c>; (my %h{Array}){$@a} = 42; %h{$@a}.say

[20:34] <Zoffix> .tell mcmillhj use object hashes: m: my @a = <a b c>; (my %h{Array}){$@a} = 42; %h{$@a}.say

[20:34] <yoleaux> Zoffix: I'll pass your message to mcmillhj.

[20:35] <Zoffix> comborico1611: it matches the same thing, but the first one captures the (a || b) into a positional capture

[20:35] <Zoffix> m: "ac" ~~ /(a || b) c/; $0

[20:35] <camelia> rakudo-moar 29b092c94: ( no output )

[20:35] <comborico1611> I see.  Thanks!

[20:35] <Zoffix> m: "ac" ~~ /(a || b) c/; say $0

[20:35] <camelia> rakudo-moar 29b092c94: OUTPUT: «｢a｣␤»

[20:35] <Zoffix> m: "ac" ~~ /[a || b] c/; say $0

[20:35] <camelia> rakudo-moar 29b092c94: OUTPUT: «Nil␤»

[20:37] *** andrzejk_ joined
[20:41] *** andrzejk_ left
[20:42] *** rindolf left
[20:46] *** Philip___ joined
[20:47] *** Philip___ left
[20:49] *** rindolf joined
[20:51] *** comborico1611 left
[20:59] <Kaiepi> does perl6 have an event loop?

[21:01] <moritz> rakudo uses moarvm, and moarvm uses libuv, which has an event loop

[21:01] *** kurahaupo_ joined
[21:02] *** kurahaupo left
[21:02] <Kaiepi> i mean more like node's event loop

[21:02] *** kurahaupo_ left
[21:02] <Kaiepi> in the runtime

[21:02] <moritz> but the design documents and the test suit don't enforce one at the language layer

[21:02] *** kurahaupo joined
[21:02] <moritz> in the rakudo-on-moarvm implementation, there is an event loop, yes

[21:03] <Kaiepi> so no?

[21:03] <moritz> moarvm is the runtime

[21:04] <moritz> it really depends on what you want to know

[21:07] <Kaiepi> oh

[21:07] *** KotH left
[21:08] <Kaiepi> what does moar's event loop handle?

[21:08] *** KotH joined
[21:08] *** andrzejk_ joined
[21:08] *** andrzejk_ left
[21:09] <Kaiepi> node's handles timeouts, process.nexttick, promises, libuv stuff mainly

[21:10] *** mephinet joined
[21:10] *** kaare_ left
[21:11] *** rindolf left
[21:11] <moritz> I'm not sure; others are much more qualified to answer that :-)

[21:17] *** mcmillhj joined
[21:22] <lizmat> .

[21:22] *** mcmillhj left
[21:27] *** |oLa| joined
[21:27] *** skids left
[21:32] *** jast left
[21:33] *** mcmillhj joined
[21:34] *** jast joined
[21:35] *** pmurias joined
[21:38] *** mcmillhj left
[21:41] <zostay> a quick grep of MoarVM reveals that the libuv event loop is referenced in a lot of different places: timers, io, ipc, signals... each thread appears to get it's own event loop

[21:43] *** Zoffix left
[21:46] <buggable> New CPAN upload: P5fileno-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5fileno-0.0.1.tar.gz

[21:49] *** mcmillhj joined
[21:54] <AlexDaniel> oh wow

[21:54] <AlexDaniel> Kaiepi++

[21:54] <AlexDaniel> ah no

[21:54] <AlexDaniel> that's not a pull request!!!

[21:54] <AlexDaniel> that's just a ticket :D

[21:54] *** mcmillhj left
[21:55] *** pilne joined
[21:55] <Kaiepi> which ticket?

[21:56] *** kurahaupo_ joined
[21:57] <Kaiepi> AlexDaniel, 

[21:57] <AlexDaniel> D#1968

[21:57] <synopsebot> D#1968 [open]: https://github.com/perl6/doc/issues/1968 Adding a Perl 6 from Node.js - Nutshell page

[21:57] <Kaiepi> ah

[21:58] <Kaiepi> thanks

[21:59] *** kurahaupo left
[21:59] *** wamba joined
[22:01] *** kurahaupo_ left
[22:02] *** kurahaupo joined
[22:05] *** mcmillhj joined
[22:09] <Herby_> o/

[22:10] *** mcmillhj left
[22:11] *** MasterDuke left
[22:15] <zostay> Kaiepi++ I was just thinking that would be nice to have... but didn't make a ticket. ;)

[22:16] *** kurahaupo left
[22:17] *** dct joined
[22:17] *** kurahaupo joined
[22:17] <Kaiepi> looks like i'm doing pretty well today

[22:19] *** mcmillhj joined
[22:20] <jnthn> Kaiepi: MoarVM runs an event loop internally using libuv, but that's very much implementation detail.

[22:21] *** pmurias left
[22:21] <Kaiepi> ah

[22:21] <Kaiepi> so it's not the same type of dela as node's

[22:22] <jnthn> No. By design. :-)

[22:23] <jnthn> Everything is exposed in terms of Promise (single async value) and Supply (stream of async values).

[22:23] *** mcmillhj left
[22:26] <Kaiepi> good because node's event loop is hell

[22:27] <Kaiepi> especially when you get into combining promisese and timeouts and process.nextTick

[22:27] <Kaiepi> s/promisese/promises

[22:29] *** kurahaupo left
[22:29] *** kurahaupo joined
[22:31] *** mcmillhj joined
[22:41] *** mcmillhj left
[22:41] *** kurahaupo left
[22:42] *** kurahaupo joined
[22:43] *** |oLa| left
[22:46] *** mcmillhj joined
[22:47] *** espadrine_ left
[22:51] *** mcmillhj left
[22:53] *** wamba left
[22:53] *** kurahaupo left
[22:56] *** mcmillhj joined
[22:58] *** MasterDuke joined
[22:59] *** kurahaupo joined
[22:59] *** mcmillhj_ joined
[23:04] *** mcmillhj_ left
[23:08] *** dct left
[23:13] *** mcmillhj_ joined
[23:13] *** kurahaupo left
[23:14] *** kurahaupo joined
[23:14] *** SCHAPiE left
[23:16] *** epony left
[23:16] *** zachk left
[23:17] *** mcmillhj_ left
[23:18] *** skids joined
[23:27] *** kurahaupo left
[23:27] *** kurahaupo joined
[23:28] *** vcv_ left
[23:32] *** SCHAPiE joined
[23:32] *** mcmillhj_ joined
[23:37] *** mcmillhj_ left
[23:38] *** sno left
[23:42] *** kurahaupo left
[23:42] *** kurahaupo joined
[23:48] *** mcmillhj_ joined
[23:53] *** mcmillhj_ left
[23:57] *** kurahaupo left
[23:57] *** kurahaupo joined
[23:59] *** mcmillhj_ joined
