[00:01] *** mcmillhj left
[00:12] *** mcmillhj joined
[00:15] *** cdg left
[00:17] *** mcmillhj left
[00:22] *** konsolebox left
[00:24] *** uberbaud left
[00:26] *** mcmillhj joined
[00:28] *** konsolebox joined
[00:30] *** mcmillhj left
[00:38] *** Kaiepi joined
[00:42] *** pierre__ joined
[00:44] *** mcmillhj joined
[00:48] *** mcmillhj left
[00:59] *** MasterDuke left
[01:01] *** MasterDuke joined
[01:04] <SmokeMachine> does this make any sense to someone? when I compile the rakudo, the perl6 bin works, but only on the first time... after that it doesn't work anymore...

[01:04] <SmokeMachine> https://www.irccloud.com/pastebin/nCaAmU7e/

[01:05] <SmokeMachine> I mean with this code...

[01:05] <SmokeMachine> I did change the usage-name

[01:06] <SmokeMachine> im trying to remove my changes and try again...

[01:07] <SmokeMachine> yes... it works...

[01:08] *** konsolebox left
[01:09] *** stmuk joined
[01:09] *** pierre__ left
[01:10] *** pierre__ joined
[01:10] *** konsolebox joined
[01:11] *** stmuk_ left
[01:11] *** Rawriful left
[01:15] *** pierre__ left
[01:15] *** mcmillhj joined
[01:20] *** mcmillhj left
[01:21] *** aborazmeh joined
[01:21] *** aborazmeh left
[01:21] *** aborazmeh joined
[01:30] *** aborazmeh left
[01:31] *** markong left
[01:31] *** mcmillhj joined
[01:33] *** shinobi-cl joined
[01:36] *** mcmillhj left
[01:36] *** cdg joined
[01:41] *** cdg left
[01:43] *** mcmillhj joined
[01:47] *** mcmillhj left
[01:49] <SmokeMachine> i can't get it

[01:51] *** mcmillhj joined
[01:54] *** wamba left
[01:55] *** konsolebox left
[01:56] *** konsolebox joined
[02:04] *** colomon_ joined
[02:06] *** colomon left
[02:06] *** colomon_ is now known as colomon

[02:12] *** pierre__ joined
[02:16] *** mcmillhj left
[02:16] *** pierre__ left
[02:17] <Xliff> SmokeMachine: What can't you get?

[02:19] *** mcmillhj joined
[02:19] <SmokeMachine> Xliff: the problem I was getting... but it seems its something with my environment... I cloned rakudo with the zscript, made the same change and that worked...

[02:27] *** aborazmeh joined
[02:27] *** aborazmeh left
[02:27] *** aborazmeh joined
[02:27] <ZzZombo> Hm... apparently it's easy enough to do what I want...

[02:27] <ZzZombo> m: use nqp;class A {has $.a='asd'};say nqp::getattr(nqp::decont(my $a=A.new),A,'$!a')=1;say $a

[02:27] <camelia> rakudo-moar 1c894e418: OUTPUT: «1␤A.new(a => 1)␤»

[02:28] <ZzZombo> m: use nqp;class A {has Str:D $.a where *.trim.chars='asd'};say nqp::getattr(nqp::decont(my $a=A.new),A,'$!a')='';say $a

[02:28] <camelia> rakudo-moar 1c894e418: OUTPUT: «Type check failed in assignment to $!a; expected <anon> but got Str ("")␤  in block <unit> at <tmp> line 1␤␤»

[02:29] <ZzZombo> m: use nqp;class A {has Str:D $.a where *.trim.chars='asd'};say nqp::getattr(nqp::decont(my $a=A.new),A,'$!a')='qwe';say $a

[02:29] <camelia> rakudo-moar 1c894e418: OUTPUT: «qwe␤A.new(a => "qwe")␤»

[02:29] <ZzZombo> Good thing I didn't start on writing any workarounds before I go this brilliant idea.

[02:29] <ZzZombo> got*

[02:30] *** mcmillhj left
[02:31] *** Zoffix joined
[02:32] <Zoffix> ZzZombo: note that nqp is not meant for end-users. There's absolutely no support for it and its behaviour can change without warning.

[02:32] *** aborazmeh left
[02:32] <Xliff> has Str:D $.a where *.trim.chars='asd

[02:33] <Xliff> I keep having problems reading this ^^

[02:33] *** mcmillhj joined
[02:33] <Xliff> I would expect that would be a subtype only allowing strings ending in 'asd'.

[02:33] <Xliff> But that's not what appears to be the case.

[02:33] <Zoffix> Xliff: `='asd'` portion is the default value

[02:34] <Juerd> Why is undefine not available as a method?

[02:34] <ZzZombo> Yea, but do I have a choice?

[02:35] <ZzZombo> Zoffix ^

[02:35] <Xliff> ZzZombo: What are you really trying to accomplish?

[02:35] <Zoffix> ZzZombo: don't know. What were you trying to do?

[02:35] <Xliff> m: class A {has Str:D $.a = 'a'}; say A.new.a

[02:35] <camelia> rakudo-moar 7793f420e: OUTPUT: «a␤»

[02:35] <Xliff> m: class A {has Str:D $.a = 'asd'}; say A.new.a

[02:35] <camelia> rakudo-moar 7793f420e: OUTPUT: «asd␤»

[02:35] <Xliff> Why the need for nqp?

[02:36] <ZzZombo> I need to generate a setter to an attribute (well, all of them), and this gets in the way:

[02:36] <ZzZombo> [23:31:16] <ZzZombo> Why does this work?

[02:36] <ZzZombo> [23:31:17] <ZzZombo> m: class C {has Str:D $.a='1'};my $a=C.new;$a.^attributes[0].set_value($a,False);say $a

[02:36] <Xliff> Ooh.

[02:36] <Xliff> Check the Proxy object.

[02:36] <Xliff> Allows you to create setter methods.

[02:37] <Xliff> And getter methods too.

[02:37] <Zoffix> ZzZombo: I don't see the connection between your nqp code and the tweaking of attriute values via MOP

[02:37] <Zoffix> m: class A {has Str:D $.a is rw = 'a'}; say A.new.a = False

[02:37] <camelia> rakudo-moar 7793f420e: OUTPUT: «Type check failed in assignment to $!a; expected Str:D but got Bool (Bool::False)␤  in block <unit> at <tmp> line 1␤␤»

[02:37] <SmokeMachine> m: class A {has Str:D $.a where *.trim.chars is rw ='asd'}; my A $a .= new; $a.a ='qwe';say $a

[02:37] <camelia> rakudo-moar 7793f420e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3lass A {has Str:D $.a where *.trim.chars7⏏5 is rw ='asd'}; my A $a .= new; $a.a ='q␤    expecting any of:␤        constraint␤        infix␤      …»

[02:38] <Zoffix> `is rw` goes before post constraints

[02:38] <Zoffix> Juerd: IMO the better question is why we have &undefine

[02:39] <Zoffix> Awful name for what it actually does

[02:39] <Xliff> Yeah, well "is rw" is a shortcut, Proxy lets you establish custom coding when setting the attribute.

[02:39] <Zoffix> eco: Proxee

[02:39] <buggable> Zoffix, Proxee 'A more usable Proxy with bells': https://github.com/zoffixznet/perl6-Proxee

[02:39] <Xliff> Hooo

[02:39] <ZzZombo> Zoffix, what do you mean? How can my method change the attribute's value other than 1) MOP, 2) NQP? If I do it via 1, it doesn't respect any constraints.

[02:39] <SmokeMachine> m: class A {has Str:D $.a is rw where *.trim.chars ='asd'}; my A $a .= new; $a.a ='qwe';say $a

[02:39] <camelia> rakudo-moar 7793f420e: OUTPUT: «A.new(a => "qwe")␤»

[02:39] *** mcmillhj left
[02:40] <Juerd> Zoffix: Agreed!

[02:40] <Juerd> Zoffix: In the 2 use cases I came up with thus far, I use "is default", and I find myself wanting to write $foo.reset

[02:40] <Zoffix> ZzZombo: are you trying to change private attributes on the object that doesn't trust your tweaking code?

[02:41] <Juerd> $foo = Nil to get $foo back to its default value feels utterly wrong, and so does the term "undefine", given that my default value is definitely defined.

[02:41] <ZzZombo> heh, it's a class I'm composing.

[02:41] <ZzZombo> So even if it doesn't trust me, what can it really do?

[02:42] <Xliff> Zoffix++ # Proxee

[02:42] <Juerd> Zoffix: In fact, I wanted to use this in some Perl 6 demo code before an audience, but now I'll just leave it out. It's too confusing and would need a lot of explaining.

[02:43] <ZzZombo> I don't care about proxies, given they can't solve anything in this case.

[02:43] <Juerd> Also, undefine doesn't seem to be documented, even!

[02:43] <Juerd> (Does this mean we can get rid of it? :P)

[02:44] <Zoffix> It's part of 6.c language

[02:44] <Xliff> ZzZombo: I'm still not clear on what "this case" really is! :p

[02:44] <Juerd> Zoffix: Are you sure? I'm struggling to find references to its specification

[02:44] <Xliff> ZzZombo: Do you have a pastebin or gist so I can see things in context?

[02:44] <Juerd> I only learned about undefine by trying undef

[02:44] <Zoffix> 2018.01.121 zoffix@VirtualBox~/R/rakudo/t/spec (master)$ G 'undefine' | wc -l

[02:44] <Zoffix> 407

[02:45] <Zoffix> Some are false positives, but tons of undefine usage

[02:45] *** ilbot3 left
[02:45] <ZzZombo> I'm composing a class, as in, I have created a custom metaclass out of ClassHOW, and I need custom setters for its attributes to do what derived classes supposed to do.

[02:46] * Juerd clones roast

[02:46] <Zoffix> m: class C {has Str:D $.a ="1" };my $a = C.new; $a.^attributes.head.container = 42;

[02:46] <camelia> rakudo-moar 7793f420e: OUTPUT: «Type check failed in assignment to $!a; expected Str:D but got Int (42)␤  in block <unit> at <tmp> line 1␤␤»

[02:46] <Zoffix> ZzZombo: looks like ^ that could give you a way to test whether a value can go in, before using .^set_value

[02:46] <Zoffix> Not ideal, but IMO better than nqp

[02:47] <Juerd> 1;0 juerd@cxien:~/tmp/roast master$ ack undefine | wc -l

[02:47] <Juerd> 246

[02:47] <Juerd> 1;0 juerd@cxien:~/tmp/roast master$ ack 'undefine(?!d)' | wc -l

[02:47] <Juerd> 80

[02:47] <Juerd> Heh.

[02:47] <ZzZombo> And if it doesn't throw, will it have any effect?

[02:47] <Zoffix> s: do { class C {has Str:D $.a ="1" };my $a = C.new; $a.^attributes.head }, 'container', \()

[02:47] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/300f2f743/src/core/Attribute.pm#L144

[02:48] <Zoffix> No idea.

[02:48] <Zoffix> Not familiar with that part of codebase

[02:48] <Zoffix> m: class C {has Str:D $.a ="1" };my $a = C.new; $a.^attributes.head.container.clone = 42;

[02:48] <camelia> rakudo-moar 7793f420e: OUTPUT: «Cannot modify an immutable Str:D ((Str:D))␤  in block <unit> at <tmp> line 1␤␤»

[02:48] <Zoffix> -_-

[02:49] <Zoffix> m: class C {has Str:D $.a ="1" };my $a = C.new; $a.^attributes.head.container ~~ 42;

[02:49] <camelia> rakudo-moar 7793f420e: ( no output )

[02:49] <Zoffix> m: class C {has Str:D $.a ="1" };my $a = C.new; say $a.^attributes.head.container ~~ 42;

[02:49] <camelia> rakudo-moar 7793f420e: OUTPUT: «False␤»

[02:49] <Zoffix> m: class C {has Str:D $.a ="1" };my $a = C.new; say $a.^attributes.head.container ~~ "x";

[02:49] <camelia> rakudo-moar 7793f420e: OUTPUT: «False␤»

[02:49] <Zoffix> *shrug*

[02:49] * Zoffix &

[02:49] *** Zoffix left
[02:52] <ZzZombo> It changes the return value of subsequent class to `container`, whether this is/may be undesired I want to know.

[02:52] <SmokeMachine> m: class C {has Str:D $.a ="1" };my $a = C.new; say “x” ~~ $a.^attributes.head.container # Zoffix

[02:52] <camelia> rakudo-moar 07748c499: OUTPUT: «True␤»

[02:53] <SmokeMachine> 00:51 <SmokeMachine> m: class C {has Str:D $.a ="1" };my $a = C.new; say 42 ~~ $a.^attributes.head.container

[02:53] <SmokeMachine> m: class C {has Str:D $.a ="1" };my $a = C.new; say 42 ~~ $a.^attributes.head.container

[02:53] <camelia> rakudo-moar 07748c499: OUTPUT: «False␤»

[02:55] *** stmuk_ joined
[02:57] *** ilbot3 joined
[02:57] *** ChanServ sets mode: +v ilbot3

[02:57] *** stmuk left
[02:58] <ZzZombo> O_o

[02:58] <ZzZombo> m: my $a=Proxy.new(STORE=>sub (|c) {say c},FETCH=>sub (|c) {say c})

[02:58] <ZzZombo> m: my $a=Proxy.new(STORE=>sub{},FETCH=>sub{})

[02:58] <camelia> rakudo-moar 07748c499: OUTPUT: «(timeout)»

[02:58] <camelia> rakudo-moar 07748c499: OUTPUT: «Too many positionals passed; expected 0 arguments but got 1␤  in sub  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[02:59] <ZzZombo> Why the heck?

[03:02] <SmokeMachine> m: class C {has Str:D $.a ="1" }; my $a = C.new; sub change-value($obj, $name, $val) {my $attr = $a.^attributes.first(*.name.ends-with: “!$name”); $attr.set_value($obj, $val) if $val ~~ $attr.container}; change-value $a, “a”, “x”; say $a

[03:02] <camelia> rakudo-moar 07748c499: OUTPUT: «C.new(a => "x")␤»

[03:03] <ZzZombo> m: class C {has Str:D $.a where *.chars>2="asd" }; my $a = C.new; sub change-value($obj, $name, $val) {my $attr = $a.^attributes.first(*.name.ends-with: “$!name”); $attr.set_value($obj, $val) if $val ~~ $attr.container}; change-value $a, “a”, “x”; say $a

[03:03] <camelia> rakudo-moar 07748c499: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable $!name used where no 'self' is available␤at <tmp>:1␤------> 3tributes.first(*.name.ends-with: “$!name7⏏5”); $attr.set_value($obj, $val) if $val ␤»

[03:04] <ZzZombo> m: class C {has Str:D $.a where *.chars>2="asd" }; my $a = C.new; sub change-value($obj, $name, $val) {my $attr = $a.^attributes.first(*.name.ends-with: “\$!name”); $attr.set_value($obj, $val) if $val ~~ $attr.container}; change-value $a, “a”, “x”; say $a

[03:04] <camelia> rakudo-moar 07748c499: OUTPUT: «No such method 'container' for invocant of type 'Any'␤  in sub change-value at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:05] *** ufobat___ joined
[03:05] <ZzZombo> m: class C {has Str:D $.a where *.chars>2="asd" }; my $a = C.new; sub change-value($obj, $name, $val) {my $attr = $a.^attributes[0]; $attr.set_value($obj, $val) if $val ~~ $attr.container}; change-value $a, “a”, “x”; say $a

[03:05] <camelia> rakudo-moar 07748c499: OUTPUT: «C.new(a => "asd")␤»

[03:05] *** cdg joined
[03:05] <SmokeMachine> m: my $a:=Proxy.new(STORE=>method (|c) {say c},FETCH=>method {42}); $a = 13; say $a

[03:05] <camelia> rakudo-moar 07748c499: OUTPUT: «\(13)␤42␤»

[03:06] <ZzZombo> m: class C {has Str:D $.a where *.chars>2="asd" }; my $a = C.new; sub change-value($obj, $name, $val) {my $attr = $a.^attributes.first(*.name.ends-with: “!$name”); $attr.set_value($obj, $val) if $val ~~ $attr.container}; change-value $a, “a”, “xxx”; say $a

[03:06] <camelia> rakudo-moar 07748c499: OUTPUT: «C.new(a => "xxx")␤»

[03:06] <ZzZombo> m: class C {has Str:D $.a where *.chars>2="asd" }; my $a = C.new; sub change-value($obj, $name, $val) {my $attr = $a.^attributes.first(*.name.ends-with: “!$name”); $attr.set_value($obj, $val) if $val ~~ $attr.container}; change-value $a, “a”, “xx”; say $a

[03:06] <camelia> rakudo-moar 07748c499: OUTPUT: «C.new(a => "asd")␤»

[03:07] <SmokeMachine> 01:02 <SmokeMachine> m: class C {has Str:D $.a ="1" }; my $a = C.new; sub change-value($obj, $name, $val) {my $attr = $a.^attributes.first(*.name.ends-with: “!$name”); $attr.set_value($obj, $val) if $val ~~ $attr.container}; change-value $a, “a”, 42; say $a

[03:07] <ZzZombo> Seems like a better way to do it, thanks.

[03:07] <SmokeMachine> m: class C {has Str:D $.a ="1" }; my $a = C.new; sub change-value($obj, $name, $val) {my $attr = $a.^attributes.first(*.name.ends-with: “!$name”); $attr.set_value($obj, $val) if $val ~~ $attr.container}; change-value $a, “a”, 42; say $a

[03:07] <camelia> rakudo-moar 07748c499: OUTPUT: «C.new(a => "1")␤»

[03:08] *** ufobat_ left
[03:10] *** cdg left
[03:11] <ZzZombo> This shouldn't be like that:

[03:11] <ZzZombo> m: my $a=Proxy.new(STORE=>sub (|c) {say c},FETCH=>sub (|c) {42})

[03:11] <camelia> rakudo-moar 07748c499: ( no output )

[03:11] <ZzZombo> m: my $a=Proxy.new(STORE=>sub (|c) {say c},FETCH=>sub (|c) {say |c})

[03:11] <camelia> rakudo-moar 07748c499: OUTPUT: «(timeout)»

[03:12] <SmokeMachine> m: class C {has Str:D $.a ="1" }; my $a = C.new; sub change-value($obj, $name, $val) {my $attr = $a.^attributes.first(*.name.ends-with: “!$name”); $attr.set_value($obj, $val) if $attr.container = $val}; change-value $a, “a”, 42; say $a

[03:12] <camelia> rakudo-moar 07748c499: OUTPUT: «Type check failed in assignment to $!a; expected Str:D but got Int (42)␤  in sub change-value at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:12] <SmokeMachine> ZzZombo: maybe this one is better☝️

[03:13] *** konsolebox left
[03:13] <SmokeMachine> m: my $a=Proxy.new(STORE=> method (|c) {say c},FETCH=> method (|c) {say |c})

[03:13] <camelia> rakudo-moar 07748c499: OUTPUT: «␤»

[03:14] *** AlexDaniel left
[03:14] *** konsolebox joined
[03:14] <SmokeMachine> 01:13 <SmokeMachine> m: my $a:=Proxy.new(STORE=> method (|c) {say c},FETCH=> method (|c) {say |c}); $a = 42; say $a

[03:15] <SmokeMachine> m: my $a:=Proxy.new(STORE=> method (|c) {say c},FETCH=> method (|c) {say |c}); $a = 42; say $a

[03:15] <camelia> rakudo-moar 07748c499: OUTPUT: «\(42)␤␤␤␤␤␤␤␤␤␤␤␤␤␤True␤»

[03:15] <SmokeMachine> m: my $a:=Proxy.new(STORE=> method (|c) {say c},FETCH=> method (|c) {say c}); $a = 42; say $a

[03:15] <camelia> rakudo-moar 07748c499: OUTPUT: «\(42)␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤True␤»

[03:16] <SmokeMachine> I don’t know why the fetch was called so many times...

[03:17] <SmokeMachine> m: my $a:=Proxy.new(STORE=> method (|c) {say c},FETCH=> method (\a: |c) {say c}); $a = 42; say $a

[03:17] <camelia> rakudo-moar 07748c499: OUTPUT: «\(42)␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤True␤»

[03:17] <SmokeMachine> m: my $a:=Proxy.new(STORE=> method (\a: |c) {say c},FETCH=> method (\a: |c) {say c}); $a = 42; say $a

[03:17] <camelia> rakudo-moar 07748c499: OUTPUT: «\(42)␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤True␤»

[03:18] <SmokeMachine> m: my $a:=Proxy.new(STORE=> method (\a is raw: |c) {say c},FETCH=> method (\a is raw: |c) {say c}); $a = 42; say $a

[03:18] <camelia> rakudo-moar 07748c499: OUTPUT: «\(42)␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤True␤»

[03:25] *** konsolebox left
[03:27] *** konsolebox joined
[03:27] *** pierre__ joined
[03:35] *** bloatable6 left
[03:35] *** bloatable6 joined
[03:35] *** ChanServ sets mode: +v bloatable6

[03:57] *** eliasr left
[04:03] *** mcmillhj joined
[04:08] *** mcmillhj left
[04:11] *** khw left
[04:11] *** mcmillhj joined
[04:13] *** Cabanossi left
[04:14] *** Cabanossi joined
[04:16] *** mcmillhj left
[04:19] *** shinobi-cl left
[04:23] *** konsolebox left
[04:25] *** konsolebox joined
[04:31] *** pierre__ left
[04:33] *** mcmillhj joined
[04:37] *** mcmillhj left
[04:39] *** Kaiepi left
[04:40] *** mcmillhj joined
[04:42] *** stmuk joined
[04:45] *** stmuk_ left
[04:45] *** mcmillhj left
[04:49] *** konsolebox left
[04:50] *** dj_goku joined
[04:50] *** konsolebox joined
[04:51] *** someuser joined
[04:58] *** konsolebox left
[04:58] *** skids left
[04:59] *** konsolebox joined
[05:04] *** aborazmeh joined
[05:04] *** aborazmeh left
[05:04] *** aborazmeh joined
[05:06] *** khisanth_ left
[05:06] *** konsolebox left
[05:08] *** konsolebox joined
[05:10] *** mcmillhj joined
[05:13] *** konsolebox left
[05:13] *** cdg joined
[05:14] *** konsolebox joined
[05:14] *** mcmillhj left
[05:17] *** mcmillhj joined
[05:18] *** cdg left
[05:19] *** khisanth_ joined
[05:21] *** jstevens left
[05:25] *** mcmillhj left
[05:38] *** konsolebox left
[05:39] *** konsolebox joined
[05:41] *** mcmillhj joined
[05:45] *** someuser left
[05:46] *** mcmillhj left
[05:49] *** konsolebox left
[05:50] *** konsolebox joined
[05:55] *** aborazmeh left
[05:57] *** shinobi-cl joined
[06:00] *** konsolebox left
[06:01] *** konsolebox joined
[06:08] *** konsolebox left
[06:10] *** konsolebox joined
[06:15] *** konsolebox left
[06:16] *** konsolebox joined
[06:21] *** konsolebox left
[06:21] *** konsolebox joined
[06:35] *** Kaiepi joined
[06:37] *** konsolebox left
[06:39] *** konsolebox joined
[06:44] *** konsolebox left
[06:46] *** konsolebox joined
[06:49] *** troys left
[06:57] *** konsolebox left
[07:03] *** konsolebox joined
[07:04] *** Lynx_ left
[07:12] *** konsolebox left
[07:15] *** konsolebox joined
[07:16] *** Lynx_ joined
[07:17] *** mcmillhj joined
[07:22] *** pierre__ joined
[07:22] *** mcmillhj left
[07:23] *** shinobi-cl left
[07:33] *** shinobi-cl joined
[07:38] <perlawhirl> bisectable6: say [0 ^... 10]

[07:38] <bisectable6> perlawhirl, On both starting points (old=2015.12 new=311ef07) the exit code is 1 and the output is identical as well

[07:38] <bisectable6> perlawhirl, Output on both points: «04===SORRY!04=== Error while compiling /tmp/NF5wNgS5hJ␤Unsupported use of . to concatenate strings; in Perl 6 please use ~␤at /tmp/NF5wNgS5hJ:1␤------> 03say [0 ^...08⏏04 10]␤»

[07:50] <Xliff> SmokeMachine: You're in an endless loop. In FETCH you call say which then needs to FETCH, which calls say again, which needs to FETCH....

[07:51] *** eroux left
[07:53] <Xliff> m: my $a := Proxy.new(STORE=> method (\a is raw: |c) {say c},FETCH=> method (\a is raw: |c) {say c}); $a = 42;

[07:53] <camelia> rakudo-moar 311ef07fd: OUTPUT: «\(42)␤»

[07:53] <Xliff> ^^ No extra calls to fetch.

[07:53] <Xliff> m: my $a := Proxy.new(STORE=> method (\a is raw: |c) {say c},FETCH=> method (\a is raw: |c) {say c}); $a = 42; $a;

[07:53] <camelia> rakudo-moar 311ef07fd: OUTPUT: «WARNINGS for <tmp>:␤\(42)␤Useless use of $a in sink context (line 1)␤»

[07:54] <Xliff> Hrm.

[07:54] <Xliff> If something is doine, then it's not a "Useless" use, is it?

[07:54] <Xliff> s/doine/done/

[07:55] <geekosaur> just mentioning $a like that is not considered "something is done"

[07:55] <Xliff> m: $a = -> { say "Something"; }; $a;

[07:55] <camelia> rakudo-moar 311ef07fd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared␤at <tmp>:1␤------> 3<BOL>7⏏5$a = -> { say "Something"; }; $a;␤»

[07:56] <Xliff> m: my $a = -> { say "Something"; }; $a;

[07:56] <camelia> rakudo-moar 311ef07fd: OUTPUT: «WARNINGS for <tmp>:␤Useless use of $a in sink context (line 1)␤»

[07:56] <Xliff> So it's a syntax thing.

[07:56] <Xliff> m: my $a = -> { say "Something"; }; $a();

[07:56] <camelia> rakudo-moar 311ef07fd: OUTPUT: «Something␤»

[07:57] <Xliff> geekosaur: In a meta language like Perl6, I'd almost consider that LTA, because something is being done, even if the lexer can't see it.

[07:57] <Xliff> But that's a harder thing to catch.

[07:58] <Xliff> Because this causes problems:

[07:58] <Xliff> m: my $a := Proxy.new(STORE=> method (\a is raw: |c) {say c},FETCH=> method (\a is raw: |c) {say c}); $a = 42; say $a;

[07:58] <camelia> rakudo-moar 311ef07fd: OUTPUT: «\(42)␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤\()␤True␤»

[07:58] <Xliff> ^^

[07:59] <Xliff> m: my $a := Proxy.new(STORE=> method (\a is raw: |c) {say c},FETCH=> method (\a is raw: |c) {say c}); $a = 42; $a.say;

[07:59] <camelia> rakudo-moar 311ef07fd: OUTPUT: «\(42)␤\()␤\()␤\()␤True␤»

[07:59] <Xliff> Odd that there are less repetitions in that codepath.

[07:59] <Xliff> But not surprising.

[08:00] <Xliff> m: my $a := Proxy.new(STORE=> method (\a is raw: |c) {say c},FETCH=> method (\a is raw: |c) {say c}); $a = 42; (my $b = $a).say;

[08:00] <camelia> rakudo-moar 311ef07fd: OUTPUT: «\(42)␤\()␤True␤»

[08:01] <Xliff> m: my $a := Proxy.new(STORE=> method (\a is raw: |c) {say c},FETCH=> method (\a is raw: |c) {say c}); $a = 42; (my $b = $a);

[08:01] <camelia> rakudo-moar 311ef07fd: OUTPUT: «\(42)␤\()␤»

[08:01] <Xliff> geekosaur: ^^ That is the output I'd expect from the sink version.

[08:01] <Xliff> But that works around the lexical issues.

[08:02] <geekosaur> Xliff, if retrieving a value has a side effect other than jsut retrieving the value, Id imagine more than just a sink warning is due. Optimizers are free to assume you didn;t launch missiles in the process....

[08:02] <Xliff> Hehehe.

[08:02] <geekosaur> not that Proxy is currently optimized, but I think that is intended at some point

[08:02] <Xliff> No one expects a FISH in the middle of the night.

[08:03] <Xliff> (That's a webcomic joke for anyone familiar with Otter's work)

[08:03] *** konsolebox left
[08:03] <ZzZombo> Why oh why

[08:03] <ZzZombo> m: role R[] {};class C is R[] {};

[08:03] <camelia> rakudo-moar 311ef07fd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot resolve caller trait_mod:<is>(C, R, Array); none of these signatures match:␤    (Mu:U $child, Mu:U $parent)␤    (Mu:U $child, :$DEPRECATED!)␤    (Mu:U $type, :$rw!)␤    (Mu:U $type, :$nat…»

[08:03] <ZzZombo> m: role R[] {};class C does R[] {};

[08:03] <camelia> rakudo-moar 311ef07fd: ( no output )

[08:04] <Xliff> ZzZombo: Classes DO roles.

[08:04] <Xliff> That took me a long time to figure out.

[08:04] <Xliff> m: role R[] {}; role RB[] is R {}; class A does RB;

[08:04] <camelia> rakudo-moar 311ef07fd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Too late for unit-scoped class definition;␤Please use the block form.␤at <tmp>:1␤------> 3 {}; role RB[] is R {}; class A does RB;7⏏5<EOL>␤»

[08:05] <Xliff> m: role R[] {}; role RB[] is R {}; class A does RB {};

[08:05] <camelia> rakudo-moar 311ef07fd: ( no output )

[08:05] <geekosaur> one could argue that it should pun the role into a class there, but one could counter-argue that the magic is getting a bit too thick at that point

[08:05] <ZzZombo> Yes, I expected auto punning here.

[08:05] <Xliff> geekosaur++ # Too much magic is not a good thing.

[08:06] <geekosaur> specificaly I'd be wary of something assuming that you could subsequently treat it as a role, when you punned it into a class and it's no longer role-like

[08:06] <geekosaur> too many chances for confusion

[08:06] <Xliff> However I've never heard of "pun" being used in a Perl context. When (and how) did that enter the lexicon?

[08:07] <Xliff> "pin" I could understand....

[08:08] <TEttinger> I've also heard pun as a verb in other languages

[08:09] *** konsolebox joined
[08:10] <geekosaur> https://docs.perl6.org/language/objects#Automatic_Role_Punning

[08:12] *** pmurias joined
[08:12] <geekosaur> I had thought it went back to the speculations, but I didn't notice it there in a quick look

[08:13] <ZzZombo> p6: class A {};constant B=class :: is A[] {};

[08:13] <camelia> rakudo-moar 311ef07fd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot resolve caller trait_mod:<is>(<anon|69121440>, A, Array); none of these signatures match:␤    (Mu:U $child, Mu:U $parent)␤    (Mu:U $child, :$DEPRECATED!)␤    (Mu:U $type, :$rw!)␤    (Mu:…»

[08:13] <ZzZombo> e: class A {};constant B=class :: is A[] {};

[08:13] <evalable6> ZzZombo, rakudo-moar 311ef07fd: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/DL04gpvPQ2␤Cannot …»

[08:13] <evalable6> ZzZombo, Full output: https://gist.github.com/4c6504dba51720ac2c1fd64a3fd35caa

[08:14] <geekosaur> oh, it's in S12 instead of S14. figures

[08:14] <geekosaur> http://design.perl6.org/S12.html#Autovivifying_objects

[08:15] <geekosaur> (plus a reference to it earlier in the same file. it's about as organized as I am >.> )

[08:15] <Xliff> LOL

[08:16] <Xliff> geekosaur++ # Docs reference.

[08:17] <Xliff> But why punning?

[08:17] <geekosaur> (in another window I'm editing a text file that I kinda stream-of-consciousness-ed together. It's got all sorts of weird forward and backward references, that I'm trying to clean up)

[08:18] <Xliff> I mean, a role as an autovivifying class reminds someone of wordplay that tickes the funny bone? >.>

[08:18] <geekosaur> of wordplay, period. doesn't have to be funny, necessarily

[08:18] <teatime> geekosaur: just get Tarantino on-board with it, and make a feature out of it.

[08:19] <Xliff> geekosaur: As in ... haha my role is now a temporary class. Got-ya!

[08:19] <Xliff> And puns must be punny! It's a rule.

[08:19] <geekosaur> (for example, the Bible is full of wordplay --- intended to make it easier to remember, not to be jokes.)

[08:19] <Xliff> But those aren't called puns, are they?

[08:20] <geekosaur> sometimes

[08:20] <Xliff> Geez. Someone just had to go and become punitancal. :P

[08:20] <geekosaur> there's a common usage, and a technical one

[08:20] <Xliff> Please don't force me to keep punning.

[08:20] <geekosaur> (linguistics, to be specific)

[08:20] <Xliff> I will pun out.

[08:21] <geekosaur> (but I'll leave the obvious rejoinder there to someone else...)

[08:21] <Xliff> And it will get messy before the pun ends.

[08:21] <Xliff> geekosaur: Hoo! I see your punning trap.

[08:21] <Xliff> And I will not .... oh... w8. :P

[08:22] <geekosaur> anyway, in a computer language context, a pun is a bit more controlled than C-style automatic casting

[08:23] <geekosaur> but its still using something in an "unexpected" way

[08:23] <Xliff> So is referring to a NULL punter.

[08:23] * teatime groans audibly.

[08:24] <Xliff> I said it was going to get messy.

[08:24] <Xliff> You thought I was puntending?

[08:24] * geekosaur punts...

[08:25] *** darutoko joined
[08:26] *** rindolf joined
[08:27] <Xliff> I still think that "pin" would be a better term in this case.

[08:27] <Xliff> Because "pinning" a role into a class via .new makes more sense, and is less likely to be interpreted as something punintended.

[08:27] * Xliff flees.

[08:28] *** Lynx_ left
[08:29] *** mcmillhj joined
[08:29] <Geth> ¦ doc: 7cd9320474 | (JJ Merelo)++ | 3 files

[08:29] <Geth> ¦ doc: Eliminates file that has been moved to the Rakudo wiki

[08:29] <Geth> ¦ doc: 

[08:29] <Geth> ¦ doc: And works with links to it pointing them to a reasonable place. Refs #949

[08:29] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7cd9320474

[08:29] <Geth> ¦ doc: ac8bfd9611 | (JJ Merelo)++ | doc/Programs/01-debugging.pod6

[08:29] <Geth> ¦ doc: Revising referring files

[08:29] <Geth> ¦ doc: 

[08:29] *** Ven`` joined
[08:29] <Geth> ¦ doc: And checking that everything is OK after searching for the file in the

[08:29] <Geth> ¦ doc: repo, so this closes #494

[08:29] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ac8bfd9611

[08:32] <Geth> ¦ doc: 0c678b4b23 | (JJ Merelo)++ | doc/Programs/02-reading-docs.pod6

[08:32] <Geth> ¦ doc: Minor changes

[08:32] <Geth> ¦ doc: 

[08:32] <Geth> ¦ doc: Basically to make a commit that closes #949 since I typed the wrong

[08:32] <Geth> ¦ doc: issue number before.

[08:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0c678b4b23

[08:33] <geekosaur> to me, "pin" implies that from that point on, it'd always be a class. But the role is still there and usable as such; the punned class is a one-off.

[08:33] *** mcmillhj left
[08:35] <Xliff> So pins are commitment and puns are just a one night stand?

[08:35] <Xliff> I can almost see that... 

[08:35] <geekosaur> it's the old joke about ham and eggs

[08:35] *** mcmillhj joined
[08:36] <geekosaur> the chicken/pun was involved; the pig/pin was committed

[08:36] *** Lynx_ joined
[08:36] <Xliff> Now I can groan.

[08:36] <teatime> gentlemen, it's far too early for this.

[08:37] <Xliff> teatime: Or waaaay too late?

[08:37] <teatime> indeed, you know me well.

[08:37] <Xliff> :D

[08:37] <Xliff> Of course, it is the same for me, you know.

[08:37] <teatime> Of course.

[08:38] *** Ven`` left
[08:38] <Xliff> This is what happens when you slip into insomniac territory and cannot leave.

[08:38] <teatime> I spent about 20 hours trying to meditate on the nature of Supply's

[08:38] *** Ven`` joined
[08:38] <Xliff> Ahh...

[08:39] <teatime> can't shake this nagging feeling that there's a level of grok'ing these concurrency concepts that I am brushing up against but not finding the right materials to point me toward the light

[08:39] <Xliff> teatime: A Supply to react, is but another Promise to be kept....

[08:39] <Xliff> (someone please stop me...)

[08:39] <teatime> haha

[08:40] <Xliff> Actually...

[08:40] <Xliff> "A Supply that react, is but another Promise to be kept...." # More accurate.

[08:40] *** mcmillhj left
[08:40] <Xliff> s/react/reacts/

[08:40] <teatime> Lua is an odd bird of a language, to me.

[08:40] <Xliff> And on that note.... it's time to sleep.

[08:41] <teatime> I wouldn't have expected to like it, given its common uses etc., and I def. wouldn't have expected the code people share in it to be as readable and enjoyable as it often is.

[08:41] <teatime> I can't really explain why, but it's feels like a kind of anti-javascript.

[08:42] <teatime> it could easily have the same kind of *ugh* ecosystem as nodejs, it seems to me

[08:42] <teatime> yet does not.

[08:42] <teatime> (many of those 20 hours were spent reading Lua-centric docs and examples of concurrency stuff.)

[08:42] *** mcmillhj joined
[08:42] <Xliff> teatime++: You are a better man than I.

[08:43] <teatime> alas, it didn't help much if at all.

[08:43] <Xliff> I tried Lua while not in the proper mindset to get it. Have not gone back, yet.

[08:43] <Xliff> I don't understand why it is the go-to gaming script language.

[08:43] <teatime> I suppose only because it is small and light and extremely easy to embed

[08:43] <teatime> i.e. that was a design goal

[08:43] <Xliff> Easy to embed, perhaps?

[08:43] <Xliff> LOL! Jinx!

[08:44] <Xliff> Those are good reasons, though.

[08:44] * Xliff &

[08:44] <teatime> it's got some superficial weirdness, but the syntax is not very complex

[08:44] <teatime> if you find the practical need, I think you should revisit it w/o fear

[08:47] *** mcmillhj left
[08:50] *** mcmillhj joined
[08:52] <Geth> ¦ doc: b3f8233fa8 | (JJ Merelo)++ | doc/Language/pod.pod6

[08:52] <Geth> ¦ doc: Including a definition for `defn`

[08:52] <Geth> ¦ doc: 

[08:52] <Geth> ¦ doc: In fact, its only use in this documentation is commented out, and a

[08:52] <Geth> ¦ doc: real use was in the file that was removed in #949. Anyway, it's used

[08:52] <synopsebot> Link: https://doc.perl6.org/language/pod

[08:52] <Geth> ¦ doc: throughout the documentation and I think it's fine to include just

[08:52] <Geth> ¦ doc: this little definition. Refs #1763.

[08:52] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b3f8233fa8

[08:54] *** wamba joined
[08:57] *** markong joined
[08:57] *** travis-ci joined
[08:57] <travis-ci> Doc build passed. JJ Merelo 'Revising referring files

[08:57] <travis-ci> https://travis-ci.org/perl6/doc/builds/339785535 https://github.com/perl6/doc/compare/02ed65ecf28c...ac8bfd961141

[08:57] *** travis-ci left
[08:58] *** mcmillhj left
[09:01] *** travis-ci joined
[09:01] <travis-ci> Doc build passed. JJ Merelo 'Minor changes

[09:01] <travis-ci> https://travis-ci.org/perl6/doc/builds/339786050 https://github.com/perl6/doc/compare/ac8bfd961141...0c678b4b2341

[09:01] *** travis-ci left
[09:06] *** someuser joined
[09:09] *** leont left
[09:13] *** cdg joined
[09:17] <Geth> ¦ doc: 58ade6326b | (JJ Merelo)++ | 2 files

[09:17] <Geth> ¦ doc: defn included in POD6 documentation

[09:17] <Geth> ¦ doc: 

[09:17] <Geth> ¦ doc: I see now why it wasn't included, since it's not actually rendered

[09:17] <Geth> ¦ doc: using definition lists. That's maybe a NYI feature somewhere upstream,

[09:17] <Geth> ¦ doc: might fix it too. Anyway, closes #1763.

[09:17] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/58ade6326b

[09:18] *** cdg left
[09:21] *** setty1 joined
[09:22] *** travis-ci joined
[09:22] <travis-ci> Doc build passed. JJ Merelo 'Including a definition for `defn`

[09:22] <travis-ci> https://travis-ci.org/perl6/doc/builds/339788766 https://github.com/perl6/doc/compare/0c678b4b2341...b3f8233fa8b1

[09:22] *** travis-ci left
[09:24] *** pierre__ left
[09:36] *** TEttinger left
[09:44] *** pmurias left
[09:46] *** pmurias joined
[09:48] <ZzZombo> s: trait_mod:<is>, (Mu:U $child, Mu:U $parent)

[09:48] <SourceBaby> ZzZombo, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤Two terms in a row␤at -e:6␤------>     put sourcery( trait_mod:<is>, (Mu:U<HERE> $child, Mu:U $parent) )[1];␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        statement modifier loop␤

[09:50] <ZzZombo> s: trait_mod:<is>, \(Mu:U $child, Mu:U $parent)

[09:50] <SourceBaby> ZzZombo, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤Two terms in a row␤at -e:6␤------>     put sourcery( trait_mod:<is>, \(Mu:U<HERE> $child, Mu:U $parent) )[1];␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        statement modifier loop␤

[09:51] <ZzZombo> s: &trait_mod:<is>, \(Mu:U $child, Mu:U $parent)

[09:51] <SourceBaby> ZzZombo, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤Two terms in a row␤at -e:6␤------>    put sourcery( &trait_mod:<is>, \(Mu:U<HERE> $child, Mu:U $parent) )[1];␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        statement modifier loop␤

[09:51] <ZzZombo> m: &trait_mod:<is>.cando(\(Mu:U $child, Mu:U $parent))

[09:51] <camelia> rakudo-moar 311ef07fd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3&trait_mod:<is>.cando(\(Mu:U7⏏5 $child, Mu:U $parent))␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        …»

[09:52] <ZzZombo> m: &trait_mod<is>.cando(:(Mu:U $child, Mu:U $parent))

[09:52] <camelia> rakudo-moar 311ef07fd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    trait_mod used at line 1␤␤»

[09:52] *** llfourn left
[09:52] <ZzZombo> m: &trait_mod:<is>.cando(:(Mu:U $child, Mu:U $parent))

[09:52] <camelia> rakudo-moar 311ef07fd: OUTPUT: «Type check failed in binding to parameter '$c'; expected Capture but got Signature (:(Mu:U $child, Mu:U $...)␤  in block <unit> at <tmp> line 1␤␤»

[09:53] <ZzZombo> m: &trait_mod:<is>.cando(|\(Mu:U $child, Mu:U $parent))

[09:53] <camelia> rakudo-moar 311ef07fd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3&trait_mod:<is>.cando(|\(Mu:U7⏏5 $child, Mu:U $parent))␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤       …»

[09:53] <ZzZombo> m: my \c=\(Mu:U $child, Mu:U $parent);&trait_mod:<is>.cando(|c)

[09:53] <camelia> rakudo-moar 311ef07fd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my \c=\(Mu:U7⏏5 $child, Mu:U $parent);&trait_mod:<is>.c␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤       …»

[09:53] <ZzZombo> wtf

[09:54] *** setty1 left
[09:55] *** setty1 joined
[09:56] *** llfourn joined
[09:57] <ZzZombo> m: &trait_mod:<is>.cando(\(Mu:U,Mu:U))

[09:57] <camelia> rakudo-moar 311ef07fd: ( no output )

[09:58] <ZzZombo> s: trait_mod:<is>, \(Mu:U,Mu:U)

[09:58] <SourceBaby> ZzZombo, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤Calling trait_mod:<is>() will never work with any of these multi signatures:␤    (Mu:U $child, Mu:U $parent) ␤    (Mu:U $child, :$DEPRECATED!) ␤    (Mu:U $type, :$rw!) ␤    (Mu:U $type, :$nativesize!) ␤    (Mu:U $type, :$ctype!) ␤    (Mu:U $type, :$unsigned!) ␤    (Mu:U $type, :$hidden!) ␤    (Mu:U $type, Mu :$array_type!) ␤    (Mu:U $type, *%fail) ␤

[09:58] <ZzZombo> s: &trait_mod:<is>, \(Mu:U,Mu:U)

[09:58] <SourceBaby> ZzZombo, Sauce is at https://github.com/rakudo/rakudo/blob/311ef07fd/src/core/traits.pm#L14

[10:02] *** stmuk_ joined
[10:04] *** stmuk left
[10:08] *** domidumont joined
[10:09] *** jeromelanteri left
[10:12] *** domidumont left
[10:13] *** domidumont joined
[10:23] *** domidumont left
[10:24] *** pierre__ joined
[10:29] *** pierre__ left
[10:32] *** trnh joined
[10:38] *** stmuk joined
[10:39] *** zeddy_k joined
[10:39] *** stmuk_ left
[10:41] <Geth> ¦ doc: 0213908498 | (JJ Merelo)++ | doc/Type/Str.pod6

[10:41] <Geth> ¦ doc: Test changing to routine

[10:41] <Geth> ¦ doc: 

[10:41] <Geth> ¦ doc: To see if anything breaks. Refs #683

[10:41] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0213908498

[10:41] <synopsebot> Link: https://doc.perl6.org/type/Str

[10:47] *** trnh is now known as dct_

[10:51] *** shinobi-cl left
[10:52] *** ufobat___ left
[11:00] *** mcmillhj joined
[11:04] *** mcmillhj left
[11:11] *** mcmillhj joined
[11:15] *** mcmillhj left
[11:23] <ZzZombo> When MOP `new_type` is called?

[11:25] *** mcmillhj joined
[11:25] <pmurias> m: say &OUR::access_lexical_a().perl;{my $a = 42; our sub access_lexical_a() {$a}}

[11:25] <camelia> rakudo-moar 311ef07fd: OUTPUT: «Any␤»

[11:25] <pmurias> do we have a use for that behavior ^^

[11:26] <ZzZombo> What behavior exactly?

[11:26] *** zeddy_k left
[11:27] *** zeddy_k joined
[11:29] *** Ven`` left
[11:29] <Geth> ¦ doc: ddd6b24a65 | (JJ Merelo)++ | doc/Type/Str.pod6

[11:29] <Geth> ¦ doc: Changes `sub` to `routine`

[11:29] <Geth> ¦ doc: 

[11:29] <Geth> ¦ doc: Actually, methods and subroutines are usually listed under

[11:29] <Geth> ¦ doc: "methods", however 'routine' and not 'sub' is normally used

[11:29] <synopsebot> Link: https://doc.perl6.org/type/Str

[11:29] <Geth> ¦ doc: there. This is not peculiar to this file, there are `sub`s elsewhere

[11:29] <Geth> ¦ doc: in the documentation; however, they will need their very own issue,

[11:29] <Geth> ¦ doc: because this closes #683

[11:29] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ddd6b24a65

[11:30] *** mcmillhj left
[11:32] *** mcmillhj joined
[11:39] *** mcmillhj left
[11:43] <pmurias> ZzZombo: being able to access variables that don't exist yet

[11:43] *** konsolebox left
[11:46] *** konsolebox joined
[11:49] *** eliasr joined
[11:54] *** Rawriful joined
[11:58] <ZzZombo> That's wrong perception.

[12:00] *** konsolebox left
[12:01] *** konsolebox joined
[12:05] *** dct_ left
[12:06] *** pierre__ joined
[12:07] <Geth> ¦ doc: a90adc268c | (JJ Merelo)++ | doc/Language/about.pod6

[12:07] <Geth> ¦ doc: Changed real infix to imaginary one

[12:07] <Geth> ¦ doc: 

[12:07] <Geth> ¦ doc: This kind of solves #1394, creating in its turn a broken link, but at

[12:07] <Geth> ¦ doc: least it should show the actual documentation for the Z infix.

[12:07] <Geth> ¦ doc: 

[12:07] <synopsebot> Link: https://doc.perl6.org/language/about

[12:07] <Geth> ¦ doc: Closes #1394 if everything goes well.

[12:07] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a90adc268c

[12:11] *** mcmillhj joined
[12:16] *** dct_ joined
[12:16] *** mcmillhj left
[12:18] *** pierre__ left
[12:19] *** mcmillhj joined
[12:24] *** mcmillhj left
[12:24] *** mcmillhj joined
[12:28] * DrForr_ notes jjmerelo++ is on fire today.

[12:29] *** noganex left
[12:30] *** mcmillhj left
[12:31] <El_Che> hi DrForr_ 

[12:31] <El_Che> I like the new _ thing :)

[12:31] <DrForr_> o/

[12:31] *** DrForr_ is now known as DrForr

[12:32] <ZzZombo> Can I make Perl accept `const` as constant declarator?

[12:32] <DrForr> On occasion I get the mental image of a piece of stray toilet paper.

[12:32] <yoleaux> 31 Jan 2018 23:55Z <comborico1611> DrForr: Have you heard of this book: Coders at Work: Reflections on the Craft of Programming ?

[12:32] *** mcmillhj joined
[12:32] <El_Che> DrForr: lol

[12:33] *** someuser left
[12:33] *** konsolebox left
[12:33] <El_Che> DrForr: I see it more as a unicode problem: DrForrö or something :)

[12:34] <DrForr> .tell comborico1611 I have a copy, but it's in storage, I believe.

[12:34] <yoleaux> DrForr: I'll pass your message to comborico1611.

[12:35] *** konsolebox joined
[12:37] *** mcmillhj left
[12:37] * DrForr gives up on X11.

[12:38] <El_Che> wayland?

[12:38] <DrForr> No, I'm using a VM and running full-screen X11 eats up too much RAM.

[12:39] * teatime breathes a sigh of relief.

[12:39] <El_Che> did you installed the tools/addons?

[12:40] <El_Che> I run a win7 VM on linux and without the guest edition and enabling 2d/3d support + 256mb memory is sluggish

[12:40] <El_Che> aka, it runs the graphical stuff on the gpu

[12:40] *** mcmillhj joined
[12:41] <El_Che> in the past, before I formatted my work machine and instelled linux, I had a company win 7 with a ubuntu VM. Same, needed the additions + max video memoru for 3D settings and it was fine

[12:42] <DrForr> I had guest additions installed, had to in order to get the seamless bit to run.

[12:42] <El_Che> I formatted the thing because with a desktop vm you can use around half of your ram, and I was spending all my time in the vm anywaus

[12:42] <El_Che> DrForr: did you change the 2d/3D setting and adapted video memory?

[12:42] <El_Che> once you also enable 3D Virtualbox lets you go up to 256MB (from 128)

[12:43] <DrForr> Hrm, I'll have to look.

[12:43] <El_Che> vmware allows you to even give more video ram to the VM

[12:43] <El_Che> I had a license, but I got fed up stuggeling with every OS update and went back to virtualbox

[12:43] <DrForr> Good grief.

[12:44] <DrForr> That... could be an issue.

[12:44] <El_Che> (the times I patched their vmware tools, I lost count)

[12:44] <El_Che> (it a perl script :) )

[12:44] <DrForr> I know, I also know one of the people that wrote them :)

[12:44] <El_Che> :)

[12:44] *** mcmillhj left
[12:45] * DrForr gooses RAM up from (eep) 16Mb to 128 and enables 3D...

[12:46] <El_Che> then go to 256

[12:46] <DrForr> 128 was max. It's an early Win10... I gave up a bit of RAM for the touchscreen, though that didn't last nearly as long as I'd hoped.

[12:47] *** pierre__ joined
[12:53] <DrForr> Switching desktops feels smoother.

[12:55] *** dct_ left
[12:56] *** konsolebox left
[12:56] *** konsolebox joined
[12:57] *** pierre__ left
[13:06] *** someuser joined
[13:11] <caa51h> Hi. I'm learning perl6.

[13:11] *** quotable6 left
[13:11] *** quotable6 joined
[13:12] <DrForr> Well, you came to the right place :)

[13:12] <caa51h> Can I use the hyper operator with lambda expression?

[13:12] <caa51h> DrForr: cool thank you

[13:13] <El_Che> ahaha, you're not loosing time

[13:13] <DrForr> m: my @x=1,2,4; say[{$^a*$^b}] @x;

[13:13] <camelia> rakudo-moar ac87ea2ac: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Use of non-subscript brackets after "say" where postfix is expected; please use whitespace before any arguments␤at <tmp>:1␤------> 3my @x=1,2,4; say7⏏5[{$^a*$^b}] @x;␤    expecting any of:…»

[13:13] <SmokeMachine> m: sub MAIN($*v) {}

[13:13] <camelia> rakudo-moar ac87ea2ac: OUTPUT: «Usage:␤  <tmp> <v> ␤»

[13:13] <SmokeMachine> :)

[13:13] *** pierre__ joined
[13:15] <DrForr> That was me just playing with an idea; I'd think there should be a way.

[13:15] <SmokeMachine> m: say class :: {has $!a; method bla($!a) {}}.^find_method(“bla”).signature.params.[1].usage-name

[13:15] <camelia> rakudo-moar ac87ea2ac: OUTPUT: «a␤»

[13:15] <SmokeMachine> :)

[13:15] <caa51h> oh I get it.

[13:15] <caa51h> m: say <0 1 2 3 4>>>.&(-> $x { $x %% 2 })

[13:15] <camelia> rakudo-moar ac87ea2ac: OUTPUT: «(True False True False True)␤»

[13:16] <jnthn> m: say (1, 2, 3) >>[&(-> $a, $b { "$a x $b" })]<< (4, 5, 6)

[13:16] <camelia> rakudo-moar ac87ea2ac: OUTPUT: «(1 x 4 2 x 5 3 x 6)␤»

[13:16] <yoleaux> 04:26Z <Zoffix> jnthn: Any tips for what could be causing `if 42 -> *@a { say @a.perl }` to never set `@a`? It works fine with `with 42 -> *@a { say @a.perl }` and the QAST of the two are basically identical (the `if` one is inside a Want, but other than that and the `if`vs`with` ops, the same)

[13:16] <jnthn> Like that for infix

[13:17] <jnthn> .tell Zoffix Perhaps an issue of the compiler (I think down in the QAST -> MAST stage) using .arity to make the decision, and that is 0 on such a block

[13:17] <yoleaux> jnthn: I'll pass your message to Zoffix.

[13:24] <El_Che> are there any perl5/6 projects participating in the GSoC?

[13:25] <DrForr> I think TPF gave up on submitting to GSoC a few years ago..

[13:26] <sjn> why?

[13:28] <DrForr> Getting denied 3 or 4 years in a row, I imagine.

[13:28] <El_Che> DrForr: perl6 is newish :)

[13:28] <El_Che> wasn't out 3y ago :)

[13:34] <El_Che> I thought about it because e.g. JJ is in academia

[13:34] <Geth> ¦ perl6.org: 1f63e45b32 | (Steve Mynott)++ | source/downloads/index.html

[13:34] <Geth> ¦ perl6.org: recommend updating zef shipped in Rakudo Star 2018.01

[13:34] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/1f63e45b32

[13:36] <stmuk> is ZzZombo zoffix I lose track?

[13:37] <El_Che> no

[13:37] <DrForr> I think you'd have to talk to TPF people directly. My memory is that last time there weren't enough GSoC students interested in Perl to cross the submission threshol.

[13:37] <caa51h> m: say (1, 2, 3) >>[[[&(-> $a, $b { "$a x $b" })]]]>> 'a'

[13:37] <camelia> rakudo-moar ac87ea2ac: OUTPUT: «(1 x a 2 x a 3 x a)␤»

[13:37] <caa51h> Why can I have any number of [ and ]?

[13:40] <stmuk> can anyone but zoffix drive p6lert?

[13:40] <stmuk> I wanted a message about updating zef similar to the one I just added to the website

[13:41] <DrForr> I would *hope* that TPF would be willing to submit GSoC projects for either Perl; I would suspect it comes down to nobody submtting..

[13:41] <DrForr> Er, "nobody presenting projects..."

[13:43] <El_Che> a new language with an old name will not create hype, so I get the TPF people

[13:45] <ZzZombo> m: class A {method ^parameterize(\SELF, |c){SELF.new(|c)}};class B is A[:a(1)] {}

[13:45] <camelia> rakudo-moar ac87ea2ac: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot resolve caller trait_mod:<is>(B, A, Array); none of these signatures match:␤    (Mu:U $child, Mu:U $parent)␤    (Mu:U $child, :$DEPRECATED!)␤    (Mu:U $type, :$rw!)␤    (Mu:U $type, :$nat…»

[13:45] <DrForr> But Python2 -> Python3 is massive hype?...

[13:45] <ZzZombo> What the horse?

[13:45] <MasterDuke> m: my @a = [[[1]]]; dd @a

[13:45] <camelia> rakudo-moar ac87ea2ac: OUTPUT: «Array @a = [1]␤»

[13:46] <MasterDuke> m: my @a = [[[1,],],]; dd @a

[13:46] <camelia> rakudo-moar ac87ea2ac: OUTPUT: «Array @a = [[[1],],]␤»

[13:46] *** lucs left
[13:46] <MasterDuke> caa51h: without the `,`, single things get collapsed

[13:47] <MasterDuke> (i feel that's a terrible explanation, but am not thinking quickly this morning)

[13:48] <El_Che> DrForr: that the other famous foot shooting incident in FOSS :)

[13:48] <caa51h> MasterDuke: cool. why make this design decision?

[13:48] <El_Che> DrForr: python has been picked up in a lot universities to learn programming, hence the situation is different in this case

[13:49] <caa51h> oh, so there are some deep meaning. # a terrible explanation

[13:49] * teatime announces (expecting little interest/relevence to y'all, but just in case I'm wrong) his intention to volunteer w/ the Debian Rakudo packaging team.

[13:49] <El_Che> teatime++

[13:50] <DrForr> Mmhmm. And it may be something to do with Google doing a lot of work with Python, and now Go...

[13:50] <caa51h> so maybe someday I will understand the true meaning of [[[1]]] by reading more docs

[13:50] <El_Che> I got a mail to maintain rakudo in fedora, but I declined to lack of time :( 

[13:50] <MasterDuke> caa51h: pretty sure i've known why in the past, but it's not coming to me

[13:50] <DrForr> teatime++

[13:51] <MasterDuke> caa51h: i recommend asking jnthn, Zoffix, lizmat, timotimo, TimToady 

[13:51] *** someuser left
[13:51] <MasterDuke> or does anyone else around have an answer?

[13:52] <caa51h> MasterDuke: thank you. you're very kind.

[13:52] *** pierre__ left
[13:53] *** Zoffix joined
[13:54] <MasterDuke> it's related to https://docs.perl6.org/type/Signature#index-entry-%2B_%28Single_Argument_Rule_Slurpy%29 and the subsequently linked https://docs.perl6.org/language/functions#Slurpy_Conventions

[13:54] <Zoffix> stmuk: ATM I'm the only one with keys to p6lert, but if you got a stable IRC host mask, I can add you to list of admins

[13:55] <stmuk> Zoffix: I'd rather not have the responsibility :)

[13:55] <Zoffix> stmuk: OK, well give me the message and I send it

[13:57] <stmuk> "Users of Rakudo Star 2018 are recommended to update zef via "zef install zef".  Newer versions of zef include a work around for an apparent Rakudo bug which shows itself in zef being unable to update mirrors sometimes."

[13:58] <caa51h> > All candidates are currently installed␤No reason to proceed. Use --force-install to continue anyway

[14:00] *** pierre__ joined
[14:01] <Zoffix> Yeah, I get the same. Even with `zef update; zef --/cached install zef`

[14:01] <stmuk> I didn't get that message with a fresh Rakudo Star 2018.01 install

[14:01] <Zoffix> zef info zef shows I got `0.2.0`, but I see there's 0.2.2 in repo https://github.com/ugexe/zef/blob/master/META6.json#L4

[14:02] <stmuk> Also see https://github.com/ugexe/zef/issues/229

[14:03] <stmuk> maybe "rm -rf ~/.zef ~/.perl6 && zef install --force-install zef" would be more defensive

[14:04] <Zoffix> `zef --force install zef` (without any rm's) did the trick for me. 

[14:04] <stmuk> you could add that flag .. although zef itself will warn if its needed

[14:04] <Zoffix> p6lert: add severity:low Users of Rakudo Star 2018 are recommended to update zef via "zef --force install zef". Newer versions of zef include a work around for an apparent Rakudo bug which shows itself in zef being unable to update mirrors sometimes.

[14:04] <p6lert> Zoffix, Added alert ID 3: https://alerts.perl6.org/alert/3

[14:05] <Zoffix> p6lert: update 3 severity:low Users of Rakudo Star 2018.01 are recommended to update zef via "zef --force install zef". Newer versions of zef include a work around for an apparent Rakudo bug which shows itself in zef being unable to update mirrors sometimes.

[14:05] <p6lert> Zoffix, Updated alert ID 3: https://alerts.perl6.org/alert/3

[14:05] <stmuk> thanks

[14:05] <Zoffix> (changed `2018` to `2018.01`)

[14:05] <Zoffix> It'll take ~10m for it to get live on alerts home page and to get tweeted (the delay is so we could edit the alert before it gets tweeted if we need to)

[14:05] <stmuk> you missed a dash from the zef flag

[14:06] <Zoffix> stmuk: which dash? I see two `--force`

[14:06] <stmuk> oh --force works

[14:07] <Zoffix> Ah, `--force` is a general force option, `--force-install` is an install-only force option. And above it's not dash missing, it's `--force` flag + `install` command

[14:07] <stmuk> I wish zef had full docs (inline pod6?) rather than me having to go to the github page each time

[14:08] <stmuk> does github render pod6 yet? I forget

[14:08] <Zoffix> No

[14:09] <Zoffix> Still open as D#167

[14:09] <synopsebot> D#167 [open]: https://github.com/perl6/doc/issues/167 [build][external] GitHub Pod Parsing

[14:09] <Zoffix> "You're certainly more than welcome to perform a PR with tests, and update the .travis.yml file so that our CI test suite verifies that Perl6 documentation is being generated."

[14:09] *** wamba left
[14:09] <Zoffix> But I don't think GitHub realized that to parse POD6, they'd need to have a fully-functional Perl 6 compiler installed and that parsing pod can execute arbitrary code

[14:10] *** noganex joined
[14:11] <Zoffix> or that it's quite expensive to parse POD6 with current compiler (compared to say Perl 5's pod, which looks like it's generated on the fly when you visit a page and gets updated as soon as you make changes to source)

[14:16] <Zoffix> k, alert got shipped https://twitter.com/p6lert

[14:16] * Zoffix &

[14:16] *** Zoffix left
[14:19] <caa51h> Is szabgab here? Part 1, 1.5, 2 and 6 are dead. # https://szabgab.com/perl6.html#screencast

[14:19] *** pierre__ left
[14:19] <stmuk> caa51h: I think he has a cron starting things as a workaround .. maybe wait a bit

[14:20] <caa51h> stmuk: ok

[14:21] *** pierre__ joined
[14:25] <MasterDuke> anybody here know anything about OpenSSL::SSL::SSL_read() ?

[14:39] *** Ven`` joined
[14:39] *** pierre__ left
[14:40] *** pierre__ joined
[14:42] <El_Che> stmuk: how did the flatpack experiment go, btw? Was it accepted upstread as a base layer for other fatpacked soft?

[14:45] <El_Che> stmuk: I see that snap is a lot less desktop oriented (and Ubuntu is pushing it aggressively the last few months)

[14:52] <caa51h> it's cool to have a subset of an existing type. perl6++

[14:53] *** AlexDaniel joined
[14:59] <tbrowder> AlexDaniel: is there anything wrong with my nqp PR #401?

[14:59] <AlexDaniel> NQP#401

[14:59] <synopsebot> NQP#401 [open]: https://github.com/perl6/nqp/pull/401 improve pod panic msg

[15:01] <AlexDaniel> tbrowder: I don't think so

[15:02] <AlexDaniel> I just woke up to a pagefull of notifications :) JJ++

[15:05] *** konsolebox left
[15:05] <AlexDaniel> tbrowder: how do I reproduce it?

[15:05] *** rightfold left
[15:06] <tbrowder> hm, i think i have a test that goes with it....hold on, it’s been so long

[15:07] <AlexDaniel> m: #=foo␤=cut

[15:07] <camelia> rakudo-moar f559c6d8b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix = instead.␤Did you make a mistake in Pod syntax?␤at <tmp>:2␤------> 3=cut7⏏5<EOL>␤»

[15:07] *** konsolebox joined
[15:07] <AlexDaniel> that's not it…

[15:11] <ZzZombo> m: class A {method ^parameterize(\SELF, |c){SELF.new(|c)}};class B is A[:a(1)] {}

[15:11] <camelia> rakudo-moar f559c6d8b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot resolve caller trait_mod:<is>(B, A, Array); none of these signatures match:␤    (Mu:U $child, Mu:U $parent)␤    (Mu:U $child, :$DEPRECATED!)␤    (Mu:U $type, :$rw!)␤    (Mu:U $type, :$nat…»

[15:11] <ZzZombo> Why?

[15:12] *** itaylor57 left
[15:12] <ZzZombo> m: class A {method ^parameterize(\SELF, |c){SELF.new(|c)}};class B is A [:a(1)] {}

[15:12] <camelia> rakudo-moar f559c6d8b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse class definition␤at <tmp>:1␤------> 3e(\SELF, |c){SELF.new(|c)}};class B is A7⏏5 [:a(1)] {}␤»

[15:15] *** shinobi-cl joined
[15:19] <AlexDaniel> s: &emit

[15:19] <SourceBaby> AlexDaniel, Sauce is at https://github.com/rakudo/rakudo/blob/f559c6d8b/src/core/control.pm#L159

[15:21] <tbrowder> m: =pod \n=cut

[15:21] <camelia> rakudo-moar f559c6d8b: ( no output )

[15:23] *** skids joined
[15:24] <tbrowder> AlexDaniel: now i remember, i had a test that used perl 5 since i needed to write a file and eval it with shell but Zoffix shot it down. i haven’t been able to use the asynch replacement for nqp::shell successfully, thus no test yet exists for the panic.

[15:25] *** lizmat left
[15:26] <tbrowder> i also got hung up trying to write a file but that’s no longer a show-stopper.  forget about the pr for now. thanks.

[15:27] <AlexDaniel> :)

[15:34] <SmokeMachine> m: say ^10 .unique: * %% 2

[15:34] <camelia> rakudo-moar f559c6d8b: OUTPUT: «Cannot resolve caller unique(Range: WhateverCode); none of these signatures match:␤    ($: *%_)␤    ($: :&as!, :&with!, *%_)␤    ($: :&as!, *%_)␤    ($: :&with!, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[15:34] <SmokeMachine> m: say <1 2 3 4 5 6 7 8 9>.unique: * %% 2

[15:34] <camelia> rakudo-moar f559c6d8b: OUTPUT: «Cannot resolve caller unique(List: WhateverCode); none of these signatures match:␤    ($: *%_)␤    ($: :&as!, :&with!, *%_)␤    ($: :&as!, *%_)␤    ($: :&with!, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[15:34] <SmokeMachine> m: say ^10 .unique: :as{ * %% 2 }

[15:34] <camelia> rakudo-moar f559c6d8b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed double closure; WhateverCode is already a closure without curlies, so either remove the curlies or use valid parameter syntax instead of *␤at <tmp>:1␤------> 3say ^10 .unique: :as{ * %% 2…»

[15:35] <SmokeMachine> m: say ^10 .unique: :as{$_ %% 2}

[15:35] <camelia> rakudo-moar f559c6d8b: OUTPUT: «(0 1)␤»

[15:36] <MasterDuke> m: say ^10 .unique: :as(* %% 2)

[15:36] <camelia> rakudo-moar f559c6d8b: OUTPUT: «(0 1)␤»

[15:36] <SmokeMachine> is it always true that unique will get the first values that &as answer the same value?

[15:37] <SmokeMachine> m: say ^10 .reverse.unique: :as{$_ %% 2}

[15:37] <camelia> rakudo-moar f559c6d8b: OUTPUT: «(9 8)␤»

[15:37] *** itaylor57 joined
[15:47] *** itaylor57 left
[15:57] *** pierre__ left
[15:58] *** itaylor57 joined
[16:06] *** Ven`` left
[16:06] *** Ven`` joined
[16:07] *** Ven`` left
[16:13] *** konsolebox left
[16:13] *** konsolebox joined
[16:18] *** Ven`` joined
[16:19] *** wamba joined
[16:29] *** khw joined
[16:37] *** lalitmee joined
[16:38] *** benjikun joined
[16:38] <benjikun> Anyone have any idea how to fix this? https://gist.github.com/anonymous/dfe9337227ff7842785180f4a198a990

[16:39] <benjikun> "Too many open files"

[16:41] <benjikun> I thought doing *.IO would close the file after retrieving the data, does it not?

[16:43] *** Zoffix joined
[16:44] <Zoffix> benjikun: it does. Are you running many versions of &scan at the same time perhaps?

[16:44] <benjikun> I'm using this to run the sub every 1200 seconds: `Supply.interval(1200).tap: { scan(); }

[16:46] <Zoffix> benjikun: what's your compiler's version? perl6 -vv

[16:46] <Zoffix>  I mean perl6 -v

[16:46] <benjikun> `This is Rakudo version 2017.12 built on MoarVM version 2017.12 implementing Perl 6.c.`

[16:47] <Zoffix> oh lol

[16:47] <Zoffix> I see now :)

[16:47] <benjikun> Is that version too old?

[16:47] <Zoffix> benjikun: it does close the files, but only if you consume the entire .lines Seq

[16:47] <Zoffix> Which you never do, so it sits and waits for you to eat all the lines

[16:48] <benjikun> Oh, interesting

[16:48] <benjikun> Should I just `my $lines = "posts/$i.html".IO.lines;`, or is there a more efficient way of doing things

[16:50] *** mcmillhj joined
[16:51] <AlexDaniel> I guess you'll have to .open and .close it explicitly?

[16:51] <AlexDaniel> but also, that's a rakudo bug I'd say…

[16:52] <Zoffix> benjikun: that won't consume the Seq either.  with "posts/$i.html".IO.lines { @titles[$latest - $i] = .head; .sink }

[16:53] <Zoffix> benjikun: or with "posts/$i.html".IO.open { @titles[$latest - $i] = .get; .close }

[16:53] <Zoffix> AlexDaniel: it isn't

[16:54] <Zoffix> or "posts/$i.html".IO.lines andthen @titles[$latest - $i] = .head andthen .sink

[16:54] <Zoffix> oh wait

[16:54] <AlexDaniel> Zoffix: why not? It leaves the file open when I won't be able to read from it anymore.

[16:55] *** R0b0t1 left
[16:55] <Zoffix> benjikun: there's limit arg to lines. Just change .lines[0] to .lines: 1

[16:56] <benjikun> What do you mean by "limit arg to lines"

[16:56] <Zoffix> AlexDaniel: because it doesn't know what you've done with that Seq.

[16:56] *** mcmillhj left
[16:56] <AlexDaniel> Zoffix: sure, but then it will be garbage collected at some point, no?

[16:56] <Zoffix> AlexDaniel: yes, and then it'll be closed.

[16:56] *** mcmillhj joined
[16:56] <Zoffix> benjikun: the .lines method takes an argument. Second paragraph here: https://docs.perl6.org/routine/lines#(IO::Handle)_routine_lines

[16:57] <Zoffix> benjikun: change `@titles[$latest - $i] = "posts/$i.html".IO.lines[0]; ` to `@titles[$latest - $i] = "posts/$i.html".IO.lines: 1; 

[16:57] <benjikun> ah, I think I understand

[16:57] <benjikun> thanks for the help

[16:57] <AlexDaniel> oh, so if you stick a force_gc into that thing it starts “wörking”?

[16:57] <Zoffix> or @titles[$latest - $i] = "posts/$i.html".IO.lines(1) in more familiar spelling

[16:58] <Zoffix> AlexDaniel: yeah. That's why .lines got $limit implemented. The original solution to this problem was making .lines slurp the entire file at once. I think that was around March 2017 and then in IO Grant it was reverted and $limit was added

[17:00] *** lalit joined
[17:00] <Zoffix> This was it I think https://github.com/rakudo/rakudo/blob/master/docs/archive/2017-IO-Grant--Action-Plan.md#changes-to-behaviour-of-lines-words-split-comb-issue-for-discussion

[17:00] <Zoffix> Except for `:$leave-open` stuff, which was turned down

[17:01] *** mcmillhj left
[17:02] *** lalitmee left
[17:02] <AlexDaniel> Zoffix: I see. Thanks

[17:03] <AlexDaniel> maybe that's some language/traps material

[17:04] *** benjikun left
[17:04] <SmokeMachine> do you guys think this is the right usage in this case? https://www.irccloud.com/pastebin/2qDpbah0/

[17:05] <Zoffix> *shrug* The docs for .lines do say "NOTE: the lines are read lazily, so ensure the returned Seq is either fully reified or is no longer needed when you close the handle or attempt to use any other methods that change the file position."

[17:06] <Zoffix> That's for IO::Handle.lines and for IO::Path.lines it says "NOTE: the lines are ready lazily and the handle used under the hood won't get closed until the returned Seq is fully reified, so ensure it is, or you'll be leaking open file handles. (TIP: use the $limit argument)"

[17:06] <AlexDaniel> that's pretty good I guess

[17:06] <SmokeMachine> https://www.irccloud.com/pastebin/2EncEfke/

[17:07] <Zoffix> It's also mentioned in the IO Guide: https://docs.perl6.org/language/io-guide#Reading_from_files

[17:07] <AlexDaniel> Zoffix++

[17:08] <Zoffix> SmokeMachine: does it even work? The call that sets :$*v in the proto can't ever get to the candidates that use $*v but don't take a :$v arg

[17:08] <Zoffix> m: proto z (:$*v) {*}; multi z { dd $*v }; z :42v

[17:08] <camelia> rakudo-moar f559c6d8b: OUTPUT: «Unexpected named argument 'v' passed␤  in sub z at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:09] <Zoffix> m: proto z (:$*v) {*}; multi z (|) { dd $*v }; z :42v; # need this

[17:09] <camelia> rakudo-moar f559c6d8b: OUTPUT: «Int $*v = 42␤»

[17:09] <Zoffix> m: proto z (:$*v) {*}; multi z (*%) { dd $*v }; z :42v; # or this

[17:09] <camelia> rakudo-moar f559c6d8b: OUTPUT: «Int $*v = 42␤»

[17:09] *** R0b0t1 joined
[17:09] <Zoffix> m: proto z (:$*v) {*}; multi z (:$v) { dd $*v }; z :42v; # or this, but then messing around with dynamics is kinda pointless

[17:09] <camelia> rakudo-moar f559c6d8b: OUTPUT: «Int $*v = 42␤»

[17:09] <SmokeMachine> Zoffix: https://www.irccloud.com/pastebin/m6F0VBsR/

[17:10] *** mcmillhj joined
[17:10] <Zoffix> SmokeMachine: what I meant that in this candidate `multi MAIN($a, $b)    {say $*v, $a, $b}`, $*v would always be an Any type object, because it's impossible for it to get set from the proto. If it were set in the proto, that candidate would not be able to take it

[17:11] *** lalitmee joined
[17:11] <Zoffix> Try `-v=42 foo bar`

[17:12] <SmokeMachine> Zoffix: https://www.irccloud.com/pastebin/flKm9nZK/

[17:12] <Zoffix> Exactly.

[17:12] <SmokeMachine> Zoffix: yes, but is the usage right?

[17:13] <Zoffix> Ah

[17:13] *** pmurias left
[17:13] *** pmurias joined
[17:13] *** lalit left
[17:14] *** cdg joined
[17:14] <Zoffix> SmokeMachine: no, it's wrong. It lists ` -e '...' [-v=<Any>] <a> <b> `. If you ignore the `'...'` bit, that's exactly the args you gave it. Yet it can't accept it

[17:15] <Zoffix> SmokeMachine: basically someone (maybe me) told you yesterday that it was a bug that stuff from proto wasn't listed in the usage... and I think it's possible it shouldn't be listed.

[17:15] *** mcmillhj left
[17:15] <SmokeMachine> :(

[17:16] <Zoffix> It kinda gets complicated. `proto z (:$*v) {*}; multi z (|) { dd $*v };` means usage `[-v=<Any>]` only. `proto z (:$*v, |) {*}; multi z () { dd $*v };` means no valid canidates

[17:17] <Zoffix> Actually, no, last one can work with no args. But the `-v` from the proto never should be shown in usage, because no candidate can take it

[17:18] *** lalit joined
[17:18] <Zoffix> So it's possible it's best to leave this complexity out and let people who want to have proto MAIN write their own $*USAGE

[17:18] <SmokeMachine> Zoffix: and if the usage says this, or something like that... https://www.irccloud.com/pastebin/tC05K7pI/

[17:19] <Zoffix> SmokeMachine: what does "Global parameters" mean?

[17:19] <Zoffix> They're not quite global, are they, since only one candidate can take them. And in my last example above, no candidate can take it

[17:19] *** lalitmee left
[17:20] <Zoffix> SmokeMachine: also, the usage still lists `'...'` from the proto, which doesn't apply to any candidate

[17:20] <Zoffix> Personally, I'd just leave it alone and ignore the args from proto. The usecase is too small for the maintenance burden.

[17:20] * Zoffix &

[17:21] *** Zoffix left
[17:21] *** aindilis left
[17:21] <SmokeMachine> Zoffix: I was meaning something like: proto params

[17:24] *** mcmillhj joined
[17:25] *** lalit left
[17:28] <SmokeMachine> any other opinion about that?

[17:28] <SmokeMachine> jnthn: ?

[17:29] *** konsolebox left
[17:30] *** konsolebox joined
[17:30] *** mcmillhj left
[17:32] *** lizmat joined
[17:32] *** mcmillhj joined
[17:34] *** imcsk8 left
[17:35] *** imcsk8 joined
[17:37] *** skids left
[17:37] *** pecastro left
[17:42] *** mcmillhj left
[17:48] *** pecastro joined
[17:53] *** travis-ci joined
[17:53] <travis-ci> Doc build errored. JJ Merelo 'Testing with whateverable'

[17:53] <travis-ci> https://travis-ci.org/JJ/doc/builds/339903131 https://github.com/JJ/doc/compare/d9485954e9c7...97daef5751d2

[17:53] *** travis-ci left
[17:57] *** mcmillhj joined
[17:57] *** pierre__ joined
[17:58] *** travis-ci joined
[17:58] <travis-ci> Doc build errored. JJ Merelo 'Testing with sudo'

[17:58] <travis-ci> https://travis-ci.org/JJ/doc/builds/339903928 https://github.com/JJ/doc/compare/97daef5751d2...552d2d3f5c68

[17:58] *** travis-ci left
[18:00] *** dct_ joined
[18:01] *** mcmillhj left
[18:02] *** pierre__ left
[18:07] *** awwaiid left
[18:11] *** isBEKaml joined
[18:12] *** mcmillhj joined
[18:16] *** travis-ci joined
[18:16] <travis-ci> Doc build failed. JJ Merelo 'Test with travis'

[18:16] <travis-ci> https://travis-ci.org/JJ/doc/builds/339908047 https://github.com/JJ/doc/compare/552d2d3f5c68...5769f0a1c2c4

[18:16] *** travis-ci left
[18:17] *** mcmillhj left
[18:18] *** isBEKaml left
[18:24] *** mcmillhj joined
[18:29] *** mcmillhj left
[18:32] *** dct_ left
[18:36] *** mcmillhj joined
[18:41] *** mcmillhj left
[18:47] *** travis-ci joined
[18:47] <travis-ci> Doc build failed. JJ Merelo 'Tests with SSL'

[18:47] <travis-ci> https://travis-ci.org/JJ/doc/builds/339914458 https://github.com/JJ/doc/compare/5769f0a1c2c4...078867f0adf0

[18:47] *** travis-ci left
[18:48] *** mcmillhj joined
[18:49] *** travis-ci joined
[18:49] <travis-ci> Doc build errored. JJ Merelo 'YAML syntax gets in the way...'

[18:49] <travis-ci> https://travis-ci.org/JJ/doc/builds/339915428 https://github.com/JJ/doc/compare/078867f0adf0...b3f36978b46b

[18:49] *** travis-ci left
[18:51] <AlexDaniel> weekly: 8000th commit https://github.com/perl6/doc

[18:51] <notable6> AlexDaniel, Noted!

[18:53] *** darutoko left
[18:53] *** mcmillhj left
[18:54] *** travis-ci joined
[18:54] <travis-ci> Doc build errored. JJ Merelo 'Putting stuff properly'

[18:54] <travis-ci> https://travis-ci.org/JJ/doc/builds/339916014 https://github.com/JJ/doc/compare/b3f36978b46b...779751908240

[18:54] *** travis-ci left
[18:55] *** notable6 left
[18:55] *** notable6 joined
[18:56] *** dct_ joined
[19:01] *** mcmillhj joined
[19:01] <Geth> ¦ doc: 1b62109e13 | (Zoffix Znet)++ (committed using GitHub Web editor) | .travis.yml

[19:01] <Geth> ¦ doc: Tell travis to fetch libssl-dev

[19:01] <Geth> ¦ doc: 

[19:01] <Geth> ¦ doc: Looks like OpenSSL is now in prereqs

[19:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1b62109e13

[19:03] *** Zoffix joined
[19:04] <Geth> ¦ doc: b1b107f867 | (Zoffix Znet)++ | .travis.yml

[19:04] <Geth> ¦ doc: Revert "Tell travis to fetch libssl-dev"

[19:04] <Geth> ¦ doc: 

[19:04] <Geth> ¦ doc: This reverts commit 1b62109e13fd0bb6f8cf0667d4cfac3ed6dfc32b.

[19:04] <Geth> ¦ doc: 

[19:04] <Geth> ¦ doc: Never mind... Travis was reporting failures for a *fork* in our chat.

[19:04] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b1b107f867

[19:05] <Zoffix> That's kinda lame that travis bot reports failures for forks.

[19:05] <AlexDaniel> hehe

[19:06] *** mcmillhj left
[19:16] <geekosaur> yes, it's a known wart. with a workaround where you store the IRC information in an encrypted form based on the project, so it won't match in a fork and reporting fails

[19:17] <geekosaur> (really, how's it going to know? it trusts the .travis.yml)

[19:18] <moritz> well, it could ask github through the API if a project is a fork

[19:19] <moritz> and don't report, unless explicitly overrideen

[19:19] <moritz> *overridden

[19:20] *** mcmillhj joined
[19:22] <Geth> ¦ whateverable: 319716d8f0 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[19:22] <Geth> ¦ whateverable: New bot: Shareable

[19:22] <Geth> ¦ whateverable: 

[19:22] <Geth> ¦ whateverable: Basically, it makes every build publicly available.

[19:22] <Geth> ¦ whateverable: The bot itself simply dumps links to https://whateverable.6lang.org/.

[19:22] <Geth> ¦ whateverable: 

[19:22] <Geth> ¦ whateverable: The code can be improved a bit but that's for later. Right now we're

[19:22] <Geth> ¦ whateverable: just testing the concept.

[19:22] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/319716d8f0

[19:22] <Geth> ¦ whateverable: c8d1db6ec8 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[19:22] <Geth> ¦ whateverable: ⚠ Make all bots runnable locally (this is so cool!)

[19:22] <Geth> ¦ whateverable: 

[19:22] <Geth> ¦ whateverable: Previously if you wanted to run bisectable or some other bot locally

[19:22] <Geth> ¦ whateverable: you had to build tens (if not thousands) of rakudo versions to get

[19:22] <Geth> ¦ whateverable: something useful out of it. Now whenever it stumbles upon a missing

[19:22] <Geth> ¦ whateverable: build it will attempt to pull it from the main server. If you're on

[19:22] <Geth> ¦ whateverable: linux x86_64, this means that the bots you start are no worse than the

[19:22] <Geth> ¦ whateverable: <…commit message has 11 more lines…>

[19:22] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/c8d1db6ec8

[19:23] <Zoffix> :o

[19:24] <Zoffix> On a related note, JJMerelo wanted to do previous versions of rakudo as docker images: https://www.facebook.com/groups/perl6/permalink/2037431926523156/

[19:25] <AlexDaniel> on the same note, they also attempted to use whateverable for that: https://github.com/perl6/doc/issues/1765#issuecomment-364680210

[19:26] <AlexDaniel> without much success, because… ubuntu 14.04?? Seriously?

[19:26] *** mcmillhj left
[19:27] *** SCHAPiE left
[19:27] *** dct_ left
[19:27] <Geth> ¦ whateverable: 64cbc09b6a | (Aleks-Daniel Jakimenko-Aleksejev)++ | services/whateverable-all.service

[19:27] <Geth> ¦ whateverable: Start Shareable along with other bots

[19:27] <Geth> ¦ whateverable: 

[19:27] <Geth> ¦ whateverable: Forgot to do that in 319716d8f006f0af474700a57319aa457724b2f1.

[19:27] <Geth> ¦ whateverable: See also: #122

[19:27] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/64cbc09b6a

[19:27] <MasterDuke> i thought there was a way to get a newer ubuntu in travis?

[19:28] <AlexDaniel> how?

[19:28] <El_Che> no, you can't

[19:28] <MasterDuke> dunno, istr samcv doing it for something

[19:28] <El_Che> however, I work around that by using docker

[19:28] <samcv> istr?

[19:28] <moritz> "i seem to recall"

[19:28] <El_Che> https://github.com/nxadm/rakudo-pkg/blob/master/.travis.yml

[19:29] <samcv> well you can get a newer ubuntu. but i think we already had the latest ubuntu? at least maybe on some repos

[19:29] *** shareable joined
[19:29] <AlexDaniel> shareable: HEAD

[19:29] <shareable> AlexDaniel, https://whateverable.6lang.org/HEAD

[19:29] <AlexDaniel> wrong nickname…

[19:29] <Zoffix> samcv: FWIW one of your commits broke Windows build: https://github.com/rakudo/rakudo/issues/1511  I tried looking at it, but couldn't figure out if the files with `:` in their names were auto generated or not

[19:30] <samcv> ohh

[19:30] <samcv> ok i can see how that could happen

[19:30] <samcv> ::)

[19:30] <Geth> ¦ whateverable: e3df1090a4 | (Aleks-Daniel Jakimenko-Aleksejev)++ | bin/Shareable.p6

[19:30] <Geth> ¦ whateverable: Oops, wrong nickname

[19:30] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/e3df1090a4

[19:30] *** shareable left
[19:30] *** shareable6 joined
[19:30] *** ChanServ sets mode: +v shareable6

[19:30] <AlexDaniel> shareable6: 2015.12^

[19:30] <shareable6> AlexDaniel, https://whateverable.6lang.org/2015.12^

[19:31] <AlexDaniel> well… that's not a proper link

[19:31] *** SCHAPiE joined
[19:31] <AlexDaniel> obviously needs a bit more work, but I'm happy with it anyway :)

[19:31] <MasterDuke> but it works

[19:31] <AlexDaniel> yea, it does

[19:33] <MasterDuke> btw, i'm trying to --profile downloading just a single build with the HTTP::UserAgent version of your leak-some-memory.p6 script. it creates a 14m profile that even the qt viewer can't open

[19:34] <AlexDaniel> MasterDuke: what about Cro version?

[19:34] <AlexDaniel> because it does leak as well

[19:34] <AlexDaniel> but with a smaller memory footprint

[19:34] <MasterDuke> there may be some inefficiencies in HTTP::UA or its dependencies, just guessing

[19:35] <AlexDaniel> weekly: 500th commit in https://github.com/perl6/whateverable, two new bots: https://github.com/perl6/whateverable/wiki/Notable https://github.com/perl6/whateverable/wiki/Shareable

[19:35] <notable6> AlexDaniel, Noted!

[19:35] <MasterDuke> it's such a drastic difference between the Cro and HTTP::UA versions that i'm not sure it would be the same cause

[19:36] <samcv> i am going to commit a change to fix the windows build in a few minutes

[19:37] <AlexDaniel> shareable6: help

[19:37] <shareable6> AlexDaniel, Like this: shareable6: f583f22 # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Shareable

[19:37] <AlexDaniel> shareable6: f583f22

[19:37] <shareable6> AlexDaniel, https://whateverable.6lang.org/f583f22

[19:38] *** mcmillhj joined
[19:41] *** aindilis joined
[19:42] *** TEttinger joined
[19:43] *** mcmillhj left
[19:45] *** natrys joined
[19:47] *** Zoffix left
[19:48] <AlexDaniel> shareable6: help

[19:48] <shareable6> AlexDaniel, Like this: shareable6: f583f22 # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Shareable

[19:48] <AlexDaniel> ↑ some help here

[19:48] *** mcmillhj joined
[19:49] <AlexDaniel> but I know that perhaps this is not super useful for most people right now

[19:49] *** zeddy_k left
[19:52] <AlexDaniel> fwiw moarvm builds are also available: https://whateverable.6lang.org/HEAD?arch=linux-x86_64&type=moarvm

[19:52] <AlexDaniel> though not sure why anybody would need that given that moarvm can be compiled really fast

[19:55] *** Abeer joined
[19:55] *** R0b0t1 left
[19:56] *** Abeer left
[19:57] *** mcmillhj left
[20:01] *** mcmillhj joined
[20:06] *** mcmillhj left
[20:16] *** mcmillhj joined
[20:20] *** mcmillhj left
[20:24] *** eserte left
[20:25] *** dct_ joined
[20:28] *** mcmillhj joined
[20:32] *** troys joined
[20:32] *** Ven`` left
[20:33] *** mcmillhj left
[20:41] *** natrys left
[20:42] *** mcmillhj joined
[20:47] *** mcmillhj left
[20:49] *** cdg left
[20:54] *** pmurias left
[20:55] *** pmurias joined
[20:56] *** natrys joined
[20:56] *** mcmillhj joined
[21:00] *** shinobi-cl left
[21:01] *** mcmillhj left
[21:06] *** natrys left
[21:24] *** a3f left
[21:29] *** greppable6 left
[21:30] *** Ven`` joined
[21:30] *** quotable6 left
[21:33] *** releasable6 left
[21:34] *** jstevens joined
[21:37] *** bloatable6 left
[21:37] *** peteretep left
[21:37] *** skaji left
[21:37] *** leah2 left
[21:37] *** squashable6 left
[21:37] *** Ulti left
[21:37] *** reportable6 left
[21:37] *** wictory[m] left
[21:37] *** tadzik left
[21:37] *** AlexDaniel` left
[21:37] *** mempko left
[21:37] *** tbrowder left
[21:37] *** xi- left
[21:37] *** mrsolo left
[21:37] *** lumimies left
[21:37] *** parisba left
[21:37] *** committable6 left
[21:37] *** obra left
[21:37] *** g- left
[21:37] *** setty1 left
[21:37] *** vike left
[21:37] *** sacomo left
[21:37] *** Grauwolf left
[21:37] *** stux|RC-- left
[21:37] *** zacts left
[21:37] *** DarthGandalf left
[21:37] *** Altreus left
[21:37] *** Juerd left
[21:37] *** SmokeMachine left
[21:37] *** avalenn left
[21:37] *** [Coke] left
[21:37] *** samebchase left
[21:37] *** mtj_ left
[21:37] *** ecocode left
[21:37] *** ilmari left
[21:37] *** clkao left
[21:37] *** roguelazer left
[21:37] *** alpha6 left
[21:37] *** webstrand left
[21:37] *** esh left
[21:37] *** jeek left
[21:37] *** sivoais left
[21:37] *** TeamBlast left
[21:37] *** zostay left
[21:37] *** mienaikage left
[21:37] *** klapperl left
[21:37] *** nativecallable6 left
[21:37] *** breinbaas left
[21:37] *** riatre left
[21:37] *** cpup left
[21:37] *** Voldenet left
[21:37] *** labster left
[21:37] *** Praise left
[21:37] *** SCHAPiE left
[21:37] *** khw left
[21:37] *** rindolf left
[21:37] *** emeric left
[21:37] *** simcop2387 left
[21:37] *** Xliff left
[21:37] *** tyil left
[21:37] *** tobs left
[21:37] *** dct_ left
[21:37] *** cpage left
[21:37] *** BuildTheRobots left
[21:37] *** jnap_ left
[21:37] *** nekomune left
[21:37] *** ilmari[m] left
[21:37] *** smash left
[21:37] *** nightfrog left
[21:37] *** jsimonet left
[21:37] *** agwind left
[21:37] *** shareable6 left
[21:37] *** Rawriful left
[21:37] *** mithaldu_ left
[21:37] *** SourceBaby left
[21:37] *** p6lert left
[21:37] *** synopsebot left
[21:37] *** Geth left
[21:37] *** dalek left
[21:37] *** Matthew[m] left
[21:37] *** salva left
[21:37] *** zoosha left
[21:37] *** grumble left
[21:37] *** huggable left
[21:37] *** markong left
[21:37] *** khisanth_ left
[21:37] *** sergot left
[21:37] *** espadrine_ left
[21:37] *** kipd left
[21:37] *** telex left
[21:37] *** pnu__ left
[21:37] *** pochi left
[21:37] *** El_Che left
[21:37] *** joy left
[21:37] *** ponbiki left
[21:37] *** kent\n left
[21:37] *** unicodable6 left
[21:37] *** hoelzro left
[21:37] *** buggable left
[21:37] *** ZofBot left
[21:37] *** gabiruh_ left
[21:37] *** integral left
[21:37] *** leedo left
[21:37] *** silug left
[21:37] *** imcsk8 left
[21:37] *** wamba left
[21:38] *** mack[m] left
[21:38] *** unclechu left
[21:38] *** phogg left
[21:38] *** PotatoGim left
[21:38] *** KotH left
[21:38] *** robinsmidsrod left
[21:38] *** andrewalker left
[21:38] *** jstevens left
[21:38] *** scott left
[21:38] *** coverable6 left
[21:38] *** f3ew left
[21:38] *** mingdao left
[21:38] *** benchable6 left
[21:38] *** geekosaur left
[21:38] *** aeruder left
[21:38] *** tomaw left
[21:38] *** MasterDuke left
[21:38] *** Guest14511 left
[21:38] *** xenotrope left
[21:38] *** caa51h left
[21:38] *** hythm left
[21:38] *** notbenh left
[21:38] *** cgfbee left
[21:38] *** mspo left
[21:38] *** TimToady left
[21:38] *** Mithaldu left
[21:38] *** musca left
[21:38] *** eater left
[21:38] *** troys left
[21:38] *** TEttinger left
[21:38] *** lizmat left
[21:38] *** itaylor57 left
[21:38] *** noganex left
[21:38] *** Lynx_ left
[21:38] *** ambs left
[21:38] *** teatime left
[21:38] *** nebuchadnezzar left
[21:38] *** a3r0 left
[21:38] *** erdic left
[21:38] *** rgrau left
[21:38] *** tinita left
[21:38] *** TreyHarris left
[21:38] *** mst left
[21:38] *** atta left
[21:38] *** saorge left
[21:38] *** jnthn left
[21:38] *** Alikzus left
[21:38] *** mniip left
[21:38] *** samcv left
[21:38] *** japhb left
[21:38] *** dustinm` left
[21:38] *** dogbert2_ left
[21:38] *** b2gills left
[21:38] *** MilkmanDan left
[21:38] *** jast left
[21:38] *** ribasushi left
[21:38] *** timotimo left
[21:38] *** hobbs left
[21:38] *** john_parr left
[21:38] *** sjn left
[21:38] *** S007 left
[21:38] *** stux|RC left
[21:38] *** dg left
[21:38] *** bhm left
[21:38] *** aindilis left
[21:38] *** dj_goku left
[21:38] *** colomon left
[21:38] *** gfldex left
[21:38] *** dogbert17 left
[21:38] *** [ptc] left
[21:38] *** camelia left
[21:38] *** pierrot left
[21:38] *** wmoxam left
[21:38] *** rjbs left
[21:38] *** protium left
[21:38] *** eythian left
[21:38] *** konsolebox left
[21:38] *** giraffe left
[21:38] *** sunnavy left
[21:38] *** preaction left
[21:38] *** Guest17694 left
[21:38] *** john51 left
[21:38] *** SHODAN left
[21:38] *** MC8 left
[21:38] *** jkramer left
[21:38] *** _kristian left
[21:38] *** moritz left
[21:38] *** AlexDaniel left
[21:38] *** Cabanossi left
[21:38] *** iviv left
[21:38] *** notbenh_ left
[21:38] *** jhill_ left
[21:38] *** domm left
[21:38] *** Spot__ left
[21:38] *** literal left
[21:38] *** daxim left
[21:38] *** japanoise left
[21:38] *** jjore left
[21:38] *** cono left
[21:38] *** albongo left
[21:38] *** ccakes left
[21:38] *** m0ltar left
[21:38] *** ilbot3 left
[21:38] *** s0me0n3-unkn0wn left
[21:38] *** DrForr left
[21:38] *** kaare_ left
[21:38] *** ccntrq left
[21:38] *** sftp left
[21:38] *** kst left
[21:38] *** perigrin left
[21:38] *** bonsaikitten left
[21:38] *** xxpor_ left
[21:38] *** Ven`` left
[21:38] *** pmurias left
[21:38] *** notable6 left
[21:38] *** pecastro left
[21:38] *** statisfiable6 left
[21:38] *** evalable6 left
[21:38] *** bisectable6 left
[21:38] *** nine left
[21:38] *** yoleaux left
[21:38] *** cxreg left
[21:38] *** broquaint left
[21:38] *** ab5tract_ left
[21:38] *** jcallen left
[21:38] *** jdv79 left
[21:38] *** [particle] left
[21:38] *** Possum left
[21:38] *** go|dfish left
[21:38] *** Phil21 left
[21:46] *** committable6 joined
[21:46] *** reportable6 joined
[21:46] *** bisectable6 joined
[21:46] *** releasable6 joined
[21:46] *** bloatable6 joined
[21:46] *** verne.freenode.net sets mode: +vvvv reportable6 bisectable6 releasable6 bloatable6

[21:46] *** quotable6 joined
[21:46] *** coverable6 joined
[21:46] *** notable6 joined
[21:46] *** a3f joined
[21:46] *** Ven`` joined
[21:46] *** andrewalker joined
[21:46] *** robinsmidsrod joined
[21:46] *** KotH joined
[21:46] *** PotatoGim joined
[21:46] *** phogg joined
[21:46] *** mack[m] joined
[21:46] *** wamba joined
[21:46] *** imcsk8 joined
[21:46] *** pmurias joined
[21:46] *** troys joined
[21:46] *** dct_ joined
[21:46] *** TEttinger joined
[21:46] *** aindilis joined
[21:46] *** SCHAPiE joined
[21:46] *** pecastro joined
[21:46] *** lizmat joined
[21:46] *** konsolebox joined
[21:46] *** khw joined
[21:46] *** itaylor57 joined
[21:46] *** AlexDaniel joined
[21:46] *** noganex joined
[21:46] *** Rawriful joined
[21:46] *** setty1 joined
[21:46] *** markong joined
[21:46] *** Lynx_ joined
[21:46] *** rindolf joined
[21:46] *** khisanth_ joined
[21:46] *** dj_goku joined
[21:46] *** Cabanossi joined
[21:46] *** ilbot3 joined
[21:46] *** verne.freenode.net sets mode: +vvvv quotable6 coverable6 notable6 ilbot3

[21:46] *** colomon joined
[21:46] *** MasterDuke joined
[21:46] *** zostay joined
[21:46] *** sergot joined
[21:46] *** ambs joined
[21:46] *** espadrine_ joined
[21:46] *** peteretep joined
[21:46] *** xenotrope joined
[21:46] *** scott joined
[21:46] *** caa51h joined
[21:46] *** Guest14511 joined
[21:46] *** s0me0n3-unkn0wn joined
[21:46] *** saorge joined
[21:46] *** skaji joined
[21:46] *** giraffe joined
[21:46] *** iviv joined
[21:46] *** vike joined
[21:46] *** notbenh_ joined
[21:46] *** kipd joined
[21:46] *** cpage joined
[21:46] *** BuildTheRobots joined
[21:46] *** mithaldu_ joined
[21:46] *** SmokeMachine joined
[21:46] *** telex joined
[21:46] *** leah2 joined
[21:46] *** jnthn joined
[21:46] *** sacomo joined
[21:46] *** teatime joined
[21:46] *** SourceBaby joined
[21:46] *** synopsebot joined
[21:46] *** p6lert joined
[21:46] *** Geth joined
[21:46] *** dalek joined
[21:46] *** verne.freenode.net sets mode: +vvvv SourceBaby synopsebot Geth dalek

[21:46] *** gfldex joined
[21:46] *** Ulti joined
[21:46] *** Alikzus joined
[21:46] *** pnu__ joined
[21:46] *** jnap_ joined
[21:46] *** nekomune joined
[21:46] *** hythm joined
[21:46] *** mniip joined
[21:46] *** f3ew joined
[21:46] *** nebuchadnezzar joined
[21:46] *** MC8 joined
[21:46] *** wictory[m] joined
[21:46] *** ilmari[m] joined
[21:46] *** tadzik joined
[21:46] *** mienaikage joined
[21:46] *** Matthew[m] joined
[21:46] *** AlexDaniel` joined
[21:46] *** klapperl joined
[21:46] *** samcv joined
[21:46] *** mempko joined
[21:46] *** japhb joined
[21:46] *** tbrowder joined
[21:46] *** mingdao joined
[21:46] *** xi- joined
[21:46] *** mrsolo joined
[21:46] *** lumimies joined
[21:46] *** parisba joined
[21:46] *** a3r0 joined
[21:46] *** obra joined
[21:46] *** avalenn joined
[21:46] *** g- joined
[21:46] *** dustinm` joined
[21:46] *** dogbert17 joined
[21:46] *** sunnavy joined
[21:46] *** pochi joined
[21:46] *** El_Che joined
[21:46] *** [Coke] joined
[21:46] *** Grauwolf joined
[21:46] *** samebchase joined
[21:46] *** [ptc] joined
[21:46] *** dogbert2_ joined
[21:46] *** joy joined
[21:46] *** ponbiki joined
[21:46] *** smash joined
[21:46] *** DrForr joined
[21:46] *** kent\n joined
[21:46] *** stux|RC-- joined
[21:46] *** b2gills joined
[21:46] *** MilkmanDan joined
[21:46] *** zacts joined
[21:46] *** mtj_ joined
[21:46] *** preaction joined
[21:46] *** hoelzro joined
[21:46] *** emeric joined
[21:46] *** jast joined
[21:46] *** buggable joined
[21:46] *** ZofBot joined
[21:46] *** notbenh joined
[21:46] *** geekosaur joined
[21:46] *** ribasushi joined
[21:46] *** ecocode joined
[21:46] *** Guest17694 joined
[21:46] *** breinbaas joined
[21:46] *** timotimo joined
[21:46] *** ilmari joined
[21:46] *** clkao joined
[21:46] *** verne.freenode.net sets mode: +vv buggable ZofBot

[21:46] *** roguelazer joined
[21:46] *** john51 joined
[21:46] *** hobbs joined
[21:46] *** john_parr joined
[21:46] *** alpha6 joined
[21:46] *** nightfrog joined
[21:46] *** simcop2387 joined
[21:46] *** riatre joined
[21:46] *** webstrand joined
[21:46] *** camelia joined
[21:46] *** nine joined
[21:46] *** cpup joined
[21:46] *** cgfbee joined
[21:46] *** pierrot joined
[21:46] *** Juerd joined
[21:46] *** Altreus joined
[21:46] *** DarthGandalf joined
[21:46] *** Voldenet joined
[21:46] *** labster joined
[21:46] *** esh joined
[21:46] *** moritz joined
[21:46] *** jeek joined
[21:46] *** sivoais joined
[21:46] *** TeamBlast joined
[21:46] *** mspo joined
[21:46] *** jsimonet joined
[21:46] *** Praise joined
[21:46] *** Xliff joined
[21:46] *** kaare_ joined
[21:46] *** tyil joined
[21:46] *** tobs joined
[21:46] *** erdic joined
[21:46] *** ccntrq joined
[21:46] *** jjore joined
[21:46] *** cono joined
[21:46] *** agwind joined
[21:46] *** sjn joined
[21:46] *** TimToady joined
[21:46] *** cxreg joined
[21:46] *** sftp joined
[21:46] *** broquaint joined
[21:46] *** ab5tract_ joined
[21:46] *** S007 joined
[21:46] *** stux|RC joined
[21:46] *** dg joined
[21:46] *** gabiruh_ joined
[21:46] *** SHODAN joined
[21:46] *** verne.freenode.net sets mode: +v camelia

[21:46] *** kst joined
[21:46] *** integral joined
[21:46] *** wmoxam joined
[21:46] *** jcallen joined
[21:46] *** rgrau joined
[21:46] *** tinita joined
[21:46] *** jdv79 joined
[21:46] *** jhill_ joined
[21:46] *** domm joined
[21:46] *** salva joined
[21:46] *** perigrin joined
[21:46] *** leedo joined
[21:46] *** Phil21 joined
[21:46] *** rjbs joined
[21:46] *** bhm joined
[21:46] *** aeruder joined
[21:46] *** Mithaldu joined
[21:46] *** zoosha joined
[21:46] *** grumble joined
[21:46] *** musca joined
[21:46] *** huggable joined
[21:46] *** silug joined
[21:46] *** TreyHarris joined
[21:46] *** protium joined
[21:46] *** mst joined
[21:46] *** eater joined
[21:46] *** Spot__ joined
[21:46] *** jkramer joined
[21:46] *** literal joined
[21:46] *** [particle] joined
[21:46] *** daxim joined
[21:46] *** japanoise joined
[21:46] *** atta joined
[21:46] *** eythian joined
[21:46] *** tomaw joined
[21:46] *** Possum joined
[21:46] *** albongo joined
[21:46] *** shadowpaste joined
[21:46] *** bartolin joined
[21:46] *** spider-mario joined
[21:46] *** titsuki joined
[21:46] *** timeless joined
[21:46] *** profan joined
[21:46] *** damnlie joined
[21:46] *** mephinet joined
[21:46] *** dpk joined
[21:46] *** ilbelkyr joined
[21:46] *** verne.freenode.net sets mode: +v huggable

[21:46] *** Bucciarati joined
[21:46] *** cosimo_ joined
[21:46] *** Celelibi joined
[21:46] *** cibs joined
[21:46] *** Kaffe joined
[21:46] *** jferrero joined
[21:46] *** huf joined
[21:46] *** APic joined
[21:46] *** daemon joined
[21:46] *** Faster-Fanboi joined
[21:46] *** raydiak__ joined
[21:46] *** freeze joined
[21:46] *** ggherdov joined
[21:46] *** rodarmor joined
[21:46] *** chansen_ joined
[21:46] *** avar joined
[21:46] *** BooK_ joined
[21:46] *** kshannon joined
[21:46] *** afresh1 joined
[21:46] *** tailgate joined
[21:46] *** charsbar joined
[21:46] *** perlawhirl joined
[21:46] *** krunen joined
[21:46] *** bonsaikitten joined
[21:46] *** _kristian joined
[21:46] *** go|dfish joined
[21:46] *** ccakes joined
[21:46] *** xxpor_ joined
[21:46] *** m0ltar joined
[21:46] *** hcit joined
[21:46] *** Gothmog_ joined
[21:46] *** diegok joined
[21:46] *** hahainternet joined
[21:46] *** pm5 joined
[21:46] *** jantore joined
[21:46] *** mienaikage left
[21:46] *** mcmillhj joined
[21:46] *** pmurias left
[21:46] *** evalable6 joined
[21:46] *** unicodable6 joined
[21:46] *** ChanServ sets mode: +v unicodable6

[21:46] *** ilmari[m] left
[21:46] *** Matthew[m] left
[21:46] *** ZzZombo left
[21:46] *** CIAvash[m] left
[21:46] *** Garland_g[m] left
[21:46] *** perlbot left
[21:46] *** statisfiable6 joined
[21:46] *** ChanServ sets mode: +v statisfiable6

[21:46] *** R0b0t1 joined
[21:46] *** mack[m] left
[21:46] *** ZzZombo joined
[21:46] *** wictory[m] left
[21:46] *** tadzik left
[21:46] *** AlexDaniel` left
[21:47] *** perlbot joined
[21:48] *** squashable6 joined
[21:48] *** benchable6 joined
[21:50] *** greppable6 joined
[21:50] *** ChanServ sets mode: +v greppable6

[21:50] *** nativecallable6 joined
[21:50] *** shareable6 joined
[21:52] *** R0b0t1 left
[21:53] *** R0b0t1 joined
[21:58] *** R0b0t1 left
[22:12] *** char_var[buffer] joined
[22:14] *** R0b0t1 joined
[22:26] *** Ven`` left
[22:27] *** mcmillhj left
[22:32] *** pmurias joined
[22:35] *** aindilis left
[22:36] *** aindilis joined
[22:38] *** mcmillhj joined
[22:43] *** mcmillhj left
[22:45] *** Ven`` joined
[22:46] *** leah2 left
[22:57] *** mcmillhj joined
[22:57] *** leah2 joined
[23:03] *** mcmillhj left
[23:05] *** tadzik joined
[23:17] *** mcmillhj joined
[23:17] *** setty1 left
[23:18] *** pmurias left
[23:20] *** rindolf left
[23:21] *** Ven`` left
[23:21] *** benjikun joined
[23:22] *** mcmillhj left
[23:22] <benjikun> What other languages do you guys primarily use?

[23:23] <benjikun> I'm suspecting perl5 & C the most

[23:28] <AlexDaniel> … SystemVerilog

[23:28] <AlexDaniel> .oO( vague question gets a nonsensical answer )

[23:29] <AlexDaniel> benjikun: OK, actually most of my programming needs are satisfied by perl6

[23:29] <AlexDaniel> so if I'm using something else then it usually means that this project was started some time ago and was using something else in the first place

[23:30] <AlexDaniel> aaaand… yeah

[23:31] <jnthn> It musta been nearly 15 years since I wrote something in Verilog. Fun to program in something where the default is "everything happens at once". :)

[23:32] *** mcmillhj joined
[23:37] *** mcmillhj left
[23:39] <AlexDaniel> jnthn: oh no! Verilog and “program” almost in one sentence! Now someone will have to come to say that it's a hardware *description* language :)

[23:39] <AlexDaniel> .oO( – but testbenches? – Testbenches are irrelevant! )

[23:42] *** mcmillhj joined
[23:43] *** yoleaux joined
[23:43] *** ChanServ sets mode: +v yoleaux

[23:46] *** Matthew[m] joined
[23:46] *** mack[m] joined
[23:46] *** AlexDaniel` joined
[23:46] *** wictory[m] joined
[23:46] *** unclechu joined
[23:46] *** ilmari[m] joined
[23:46] *** CIAvash[m] joined
[23:46] *** Garland_g[m] joined
[23:46] *** mienaikage joined
[23:47] *** mcmillhj left
[23:51] <benjikun> AlexDaniel: How do you feel about C++17?

[23:53] <AlexDaniel> benjikun: my use of c++ is accidental, so I don't have any opinion on that

[23:55] *** mcmillhj joined
[23:55] <benjikun> I haven't used C/C++ in a long while, but I'm thinking about heading back and using C++17

[23:58] *** benjikun left
