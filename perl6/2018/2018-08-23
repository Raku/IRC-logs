[00:03] *** enheh joined
[00:03] *** p6bannerbot sets mode: +v enheh

[00:26] *** protium left
[00:27] *** protium joined
[00:27] *** p6bannerbot sets mode: +v protium

[00:46] *** sotona joined
[00:47] *** p6bannerbot sets mode: +v sotona

[00:50] *** squashable6 joined
[00:50] *** cognominal-p6 joined
[00:50] *** p6bannerbot sets mode: +v squashable6

[00:51] *** p6bannerbot sets mode: +v cognominal-p6

[01:00] *** lizmat joined
[01:01] *** p6bannerbot sets mode: +v lizmat

[01:03] *** Ven` joined
[01:04] *** p6bannerbot sets mode: +v Ven`

[01:04] *** sftp left
[01:06] *** aindilis left
[01:07] *** aindilis joined
[01:07] *** p6bannerbot sets mode: +v aindilis

[01:08] *** Ven` left
[01:10] *** lizmat left
[01:14] *** enheh left
[01:14] *** cognominal-p6 left
[01:16] *** sotona left
[01:37] <jdv79> wow, my bench for perf got worse

[01:37] <timotimo> that's the one with the matchers? even worse? :( :(

[01:38] <jdv79> the one with the a lot of regex "eval"

[01:38] <timotimo> ok, i'm thinking of the right one

[01:38] <timotimo> do you have a rough number for how much worse, and since what previous measurement?

[01:39] <timotimo> hm, i think we actually had a gist that had the complete code in it for benchmarking

[01:40] <jdv79> hmm.  interesting.  i had a rakudo from a few days ago and it was running about 4.5s.  then i just installed head and it was 6.5s for a few runs a little bit ago.  but i just tried it now and its back down to 4.5s

[01:40] <jdv79> idk.  yay not worse...

[01:41] <jdv79> nevermind then

[01:41] <timotimo> phew!

[01:41] <Garland_g[m]> Maybe it had to recompile the code with the new version?

[01:41] <timotimo> still, thanks for checking in regularly

[01:41] *** lunaaa joined
[01:42] <jdv79> where's the precomp files these days?

[01:42] <timotimo> Garland_g[m]: "for a few runs" suggests that's not it; perhaps the computer was thermal-throttled, or there was more I/O than usual, or too much pressure on RAM or anything really

[01:42] <Garland_g[m]> Ah. I missed the "for a few runs"

[01:42] <jdv79> yeah.  i didn't check into system state at the time.

[01:44] <timotimo> i've been trying to improve performance for things ever since i joined the perl6 project and let me tell you, measurements can frustrate the heck out of you :)

[01:45] <jdv79> what's holding back eval?  everything?

[01:46] *** lunaaa left
[01:52] *** molaf_ left
[01:53] <timotimo> it's hard for me to say

[01:53] <timotimo> i know that spesh has a whole lot of work to do because with so many evals, large parts of the compiler that are normally only called three or four times are now hot enough to be considered for speshing

[01:54] <timotimo> and if the code that gets generated also gets hot enough while running the matchers against the data, those will also get specialization

[01:54] <timotimo> now i lost my train of thought

[02:02] *** saki joined
[02:02] *** saki left
[02:05] *** molaf_ joined
[02:06] *** p6bannerbot sets mode: +v molaf_

[02:06] *** spycrab0 left
[02:10] *** saki joined
[02:10] *** saki left
[02:22] *** john_parr_ joined
[02:23] *** caa51h joined
[02:23] *** p6bannerbot sets mode: +v john_parr_

[02:24] *** p6bannerbot sets mode: +v caa51h

[02:24] *** ufobat___ joined
[02:25] *** cxreg2 joined
[02:25] *** p6bannerbot sets mode: +v ufobat___

[02:26] *** p6bannerbot sets mode: +v cxreg2

[02:27] *** hobbified joined
[02:28] *** charsbar_ joined
[02:28] *** ufobat_ left
[02:28] *** p6bannerbot sets mode: +v hobbified

[02:29] *** p6bannerbot sets mode: +v charsbar_

[02:29] *** saki joined
[02:29] *** mirlur[m] left
[02:29] *** Garland_g[m] left
[02:29] *** MitarashiDango[m left
[02:29] *** wictory[m] left
[02:29] *** cxreg left
[02:29] *** AlexDaniel-old[m left
[02:29] *** AlexDaniel` left
[02:29] *** charsbar left
[02:29] *** timotimo left
[02:29] *** reu left
[02:29] *** mempko left
[02:29] *** john_parr left
[02:29] *** spacedbat left
[02:29] *** hobbs left
[02:29] *** charsbar_ is now known as charsbar

[02:29] *** john_parr_ is now known as john_parr

[02:30] *** p6bannerbot sets mode: +v saki

[02:33] *** atweiden-air left
[02:34] *** sotona joined
[02:35] *** p6bannerbot sets mode: +v sotona

[02:35] *** wictory[m] joined
[02:35] *** p6bannerbot sets mode: +v wictory[m]

[02:36] *** AlexDaniel-old[m joined
[02:36] *** spacedbat joined
[02:36] *** p6bannerbot sets mode: +v AlexDaniel-old[m

[02:36] *** reu joined
[02:36] *** p6bannerbot sets mode: +v reu

[02:36] *** p6bannerbot sets mode: +v spacedbat

[02:36] *** mirlur[m] joined
[02:37] *** p6bannerbot sets mode: +v mirlur[m]

[02:37] *** timotimo joined
[02:37] *** p6bannerbot sets mode: +v timotimo

[02:37] *** mempko joined
[02:37] *** Garland_g[m] joined
[02:37] *** p6bannerbot sets mode: +v Garland_g[m]

[02:37] *** MitarashiDango[m joined
[02:37] *** p6bannerbot sets mode: +v MitarashiDango[m

[02:37] *** p6bannerbot sets mode: +v mempko

[02:38] *** AlexDaniel` joined
[02:38] *** p6bannerbot sets mode: +v AlexDaniel`

[02:39] *** kent\n joined
[02:39] *** p6bannerbot sets mode: +v kent\n

[02:40] *** aindilis left
[02:41] *** aindilis joined
[02:42] *** p6bannerbot sets mode: +v aindilis

[02:42] <buggable> New CPAN upload: AttrX-Mooish-v0.3.0.tar.gz by VRURG http://modules.perl6.org/dist/AttrX::Mooish:cpan:VRURG

[03:03] *** Ven` joined
[03:04] *** p6bannerbot sets mode: +v Ven`

[03:05] *** inbioz joined
[03:06] *** p6bannerbot sets mode: +v inbioz

[03:08] *** sotona left
[03:08] *** Ven` left
[03:40] *** itaipu left
[04:01] *** Moyst26 joined
[04:01] *** Moyst26 left
[04:03] *** Ven` joined
[04:03] *** p6bannerbot sets mode: +v Ven`

[04:07] *** Ven` left
[04:10] *** cognominal-p6 joined
[04:11] *** p6bannerbot sets mode: +v cognominal-p6

[04:14] *** dmaestro left
[04:16] *** cpup joined
[04:16] *** p6bannerbot sets mode: +v cpup

[04:20] *** cognominal-p6 left
[04:20] *** cognominal-p6 joined
[04:21] *** p6bannerbot sets mode: +v cognominal-p6

[04:25] *** sotona joined
[04:26] *** p6bannerbot sets mode: +v sotona

[04:34] *** cognominal-p6 left
[04:35] *** inbioz left
[04:41] *** kerframil left
[04:53] *** curan joined
[04:53] *** p6bannerbot sets mode: +v curan

[04:57] *** troys left
[04:58] *** sotona left
[05:01] *** cpup left
[05:04] *** [particle]1 joined
[05:05] *** p6bannerbot sets mode: +v [particle]1

[05:05] *** [particle] left
[05:07] *** infernix14 joined
[05:07] *** infernix14 left
[05:12] *** vrurg left
[05:20] *** sauvin joined
[05:20] *** p6bannerbot sets mode: +v sauvin

[05:21] *** hihi joined
[05:21] *** p6bannerbot sets mode: +v hihi

[05:25] *** hihi left
[05:27] *** DarthGandalf left
[05:27] *** DarthGandalf joined
[05:27] *** p6bannerbot sets mode: +v DarthGandalf

[05:30] *** cpup joined
[05:31] <rindolf> hi all

[05:31] *** p6bannerbot sets mode: +v cpup

[05:45] <masak> \o

[05:46] *** [particle] joined
[05:47] *** p6bannerbot sets mode: +v [particle]

[05:48] *** [particle]1 left
[05:51] *** [particle]1 joined
[05:51] *** [particle] left
[05:51] *** p6bannerbot sets mode: +v [particle]1

[05:53] <lookatme_q> o/ rindolf 

[05:55] <rindolf> masak: sup?

[05:55] <rindolf> lookatme_q: hi

[06:02] *** [particle]1 left
[06:05] *** inbioz joined
[06:05] *** saki left
[06:05] *** p6bannerbot sets mode: +v inbioz

[06:06] *** saki joined
[06:07] *** p6bannerbot sets mode: +v saki

[06:09] <lookatme_q> :)

[06:14] *** Summertime left
[06:16] *** Summertime joined
[06:16] *** p6bannerbot sets mode: +v Summertime

[06:17] <xinming_> m: sub t (*, $var) { $var.say; };   t('a', "Hello");

[06:17] <camelia> rakudo-moar 0979b7756: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3sub t (*7⏏5, $var) { $var.say; };   t('a', "Hello")␤»

[06:18] <xinming_> m: sub t ($, $var) { $var.say; };   t('a', "Hello");

[06:18] <camelia> rakudo-moar 0979b7756: OUTPUT: «Hello␤»

[06:18] <xinming_> m: sub t ($, $var) { $var.say; };   t(*, "Hello");

[06:18] <camelia> rakudo-moar 0979b7756: OUTPUT: «Hello␤»

[06:18] <xinming_> for the sub part, is the use of $ right here?

[06:18] <xinming_> I mean use it as a placeholder

[06:18] <xinming_> m: sub t ($, $var) { $var.say; };   t(*, *, "Hello");

[06:18] <camelia> rakudo-moar 0979b7756: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling t(Whatever, Whatever, Str) will never work with declared signature ($, $var)␤at <tmp>:1␤------> 3sub t ($, $var) { $var.say; };   7⏏5t(*, *, "Hello");␤»

[06:19] <xinming_> m: sub t ($, $, $var) { $var.say; };   t(*, *, "Hello");

[06:19] <camelia> rakudo-moar 0979b7756: OUTPUT: «Hello␤»

[06:20] *** ufobat___ left
[06:21] *** [particle] joined
[06:22] *** p6bannerbot sets mode: +v [particle]

[06:32] *** [particle]1 joined
[06:33] *** p6bannerbot sets mode: +v [particle]1

[06:34] *** [particle] left
[06:36] *** TreyHarris left
[06:39] *** TreyHarris joined
[06:39] *** p6bannerbot sets mode: +v TreyHarris

[06:50] *** imcsk8 left
[06:52] *** jcarty joined
[06:53] *** p6bannerbot sets mode: +v jcarty

[06:55] *** MasterDuke left
[06:58] *** imcsk8 joined
[06:58] *** p6bannerbot sets mode: +v imcsk8

[07:06] *** TreyHarris left
[07:07] *** fake_space_whale left
[07:07] *** ufobat joined
[07:08] *** p6bannerbot sets mode: +v ufobat

[07:11] *** TreyHarris joined
[07:11] *** p6bannerbot sets mode: +v TreyHarris

[07:17] <xinming_> m: sub t(:good) { "Good".say; };   t(:good);

[07:18] <camelia> rakudo-moar 0979b7756: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3sub t(:7⏏5good) { "Good".say; };   t(:good);␤»

[07:18] <xinming_> m: multi sub t(:good) { "Good".say; };   t(:good);

[07:18] <camelia> rakudo-moar 0979b7756: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3multi sub t(:7⏏5good) { "Good".say; };   t(:good);␤»

[07:18] <Geth> ¦ doc: aaa34a8788 | (JJ Merelo)++ | 2 files

[07:18] <Geth> ¦ doc: Clarifies time for constants, closes #2279

[07:18] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/aaa34a8788

[07:18] <xinming_> m: sub t(:$good) { "Good".say; };   t(:good);

[07:18] <camelia> rakudo-moar 0979b7756: OUTPUT: «Good␤»

[07:18] <xinming_> m: multi sub t(:$good) { "Good".say; };    t(:good);

[07:18] <camelia> rakudo-moar 0979b7756: OUTPUT: «Good␤»

[07:19] <xinming_> m: multi sub t(:$good) { "Good".say; }; multi sub t(:!$good) { "Not good".say };   t(:good);

[07:19] <camelia> rakudo-moar 0979b7756: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3t(:$good) { "Good".say; }; multi sub t(:7⏏5!$good) { "Not good".say };   t(:good);␤»

[07:19] <xinming_> m: multi sub t(:$good) { "Good".say; }; multi sub t(:!good) { "Not good".say };   t(:!good);

[07:19] <camelia> rakudo-moar 0979b7756: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3t(:$good) { "Good".say; }; multi sub t(:7⏏5!good) { "Not good".say };   t(:!good);␤»

[07:19] <xinming_> m: multi sub t(:$good) { "Good".say; }; multi sub t(:!$good) { "Not good".say };   t(:!good);

[07:19] <camelia> rakudo-moar 0979b7756: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3t(:$good) { "Good".say; }; multi sub t(:7⏏5!$good) { "Not good".say };   t(:!good);␤»

[07:19] <xinming_> m: multi sub t(:$good) { "Good".say; }; multi sub t(!:$good) { "Not good".say };   t(:!good);

[07:19] <camelia> rakudo-moar 0979b7756: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3 t(:$good) { "Good".say; }; multi sub t(7⏏5!:$good) { "Not good".say };   t(:!good)␤»

[07:19] <xinming_> hmm, any idea how I can make this work? :-)

[07:20] <xinming_> m: multi sub t(:$good) { "Good".say; }; multi sub t(:$good where { False }) { "Not good".say };   t(:!good);

[07:20] <camelia> rakudo-moar 0979b7756: OUTPUT: «Good␤»

[07:20] <xinming_> m: multi sub t(:$good) { "Good".say; }; multi sub t(:$good where { $_ ~~ False }) { "Not good".say };   t(:!good);

[07:20] <camelia> rakudo-moar 0979b7756: OUTPUT: «Potential difficulties:␤    Smartmatch against False always fails; if you mean to test the topic for truthiness, use :!so or *.not or !* instead␤    at <tmp>:1␤    ------> 3ay; }; multi sub t(:$good where { $_ ~~ 7⏏5False }) { "Not good".sa…»

[07:20] <xinming_> m: multi sub t(:$good) { "Good".say; }; multi sub t(:$good where { not so $_ }) { "Not good".say };   t(:!good);

[07:20] <camelia> rakudo-moar 0979b7756: OUTPUT: «Good␤»

[07:21] <xinming_> m: multi sub t(:$good where { so $_ }) { "Good".say; }; multi sub t(:$good where { not so $_ }) { "Not good".say };   t(:!good);

[07:21] <camelia> rakudo-moar 0979b7756: OUTPUT: «Not good␤»

[07:21] <xinming_> m: multi sub t(:$good) { "Good".say; }; multi sub t(:$good where { not so $_ }) { "Not good".say };   t(:good);

[07:21] <camelia> rakudo-moar 0979b7756: OUTPUT: «Good␤»

[07:21] <xinming_> For my example, Is there a easier way to write signatures?

[07:30] *** cognominal-p6 joined
[07:30] *** p6bannerbot sets mode: +v cognominal-p6

[07:36] *** cognominal-p6 left
[07:36] *** cognominal-p6 joined
[07:37] *** p6bannerbot sets mode: +v cognominal-p6

[07:40] <lookatme_q> m: multi sub t(:$good!) { "Good".say; }; multi sub t(:$good) { "Not good".say };   t(:good);

[07:40] <camelia> rakudo-moar 0979b7756: OUTPUT: «Good␤»

[07:40] <lookatme_q> m: multi sub t(:$good!) { "Good".say; }; multi sub t(:$good) { "Not good".say };   t();

[07:40] <camelia> rakudo-moar 0979b7756: OUTPUT: «Not good␤»

[07:40] <lookatme_q> xinming_, how about this way ? ^^

[07:41] <lookatme_q> m: multi sub t(:$good!) { "Good".say; }; multi sub t() { "Not good".say };   t();

[07:41] <camelia> rakudo-moar 0979b7756: OUTPUT: «Not good␤»

[07:41] <lookatme_q> m: multi sub t(:$good!) { "Good".say; }; multi sub t() { "Not good".say };   t(good => False);

[07:41] <camelia> rakudo-moar 0979b7756: OUTPUT: «Good␤»

[07:41] <lookatme_q> hmm, seems like not what you want

[07:44] <lookatme_q> m: multi sub t(:$good where :so) { "Good".say; }; multi sub t($good where :!so) { "Not good".say };   t(good => False);

[07:44] <camelia> rakudo-moar 0979b7756: OUTPUT: «Cannot resolve caller t(:!good); none of these signatures match:␤    (:$good where { ... })␤    ($good where { ... })␤  in block <unit> at <tmp> line 1␤␤»

[07:44] <lookatme_q> m: multi sub t(:$good where :so) { "Good".say; }; multi sub t(:$good where :!so) { "Not good".say };   t(good => False);

[07:44] <camelia> rakudo-moar 0979b7756: OUTPUT: «Not good␤»

[07:44] <lookatme_q> xinming_, Find it, I am using this way ^^

[07:44] <lookatme_q> m: multi sub t(:$good where :so) { "Good".say; }; multi sub t(:$good where :!so) { "Not good".say };   t(:good);

[07:44] <camelia> rakudo-moar 0979b7756: OUTPUT: «Good␤»

[07:44] <lookatme_q> m: multi sub t(:$good where :so) { "Good".say; }; multi sub t(:$good where :!so) { "Not good".say };   t();

[07:44] <camelia> rakudo-moar 0979b7756: OUTPUT: «Not good␤»

[07:46] <xinming_> what is the whole idea behind the  where :so?

[07:46] <xinming_> !$good where { so => $_ }?

[07:47] <xinming_> $good where { so => $_ }?

[07:47] <lookatme_q> xinming_, I forget it now :)

[07:47] <xinming_> I mean, Why :so worked like this. :-)

[07:47] *** scimon joined
[07:48] <lookatme_q> xinming_, wait me try to find it in documents

[07:48] <xinming_> Ok, THanks. :-)

[07:48] *** p6bannerbot sets mode: +v scimon

[07:49] <lookatme_q> m: multi sub t(:$good where .so) { "Good".say; }; multi sub t(:$good where !.so) { "Not good".say };   t();

[07:49] <camelia> rakudo-moar 0979b7756: OUTPUT: «Not good␤»

[07:49] *** domidumont joined
[07:50] <lookatme_q> And xinming_, this way it's easy to understand

[07:50] *** p6bannerbot sets mode: +v domidumont

[07:51] <xinming_> lookatme_q: I can undersstand this

[07:51] <xinming_> something like  where .so =   *.so

[07:51] <xinming_> But why :so worked?

[07:52] <CIAvash[m]> xinming_: https://docs.perl6.org/routine/ACCEPTS#(Pair)_method_ACCEPTS

[07:52] <xinming_> Thanks

[07:53] <lookatme_q> m: multi sub t(:$good where so) { "Good".say; }; multi sub t(:$good where !so) { "Not good".say };   t();

[07:53] <camelia> rakudo-moar 0979b7756: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Prefix so requires an argument, but no valid term found␤at <tmp>:1␤------> 3multi sub t(:$good where so7⏏5) { "Good".say; }; multi sub t(:$good wh␤    expecting any of:␤        prefix␤»

[07:53] <lookatme_q> m: multi sub t(:$good where so) { "Good".say; }; t();

[07:53] <camelia> rakudo-moar 0979b7756: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Prefix so requires an argument, but no valid term found␤at <tmp>:1␤------> 3multi sub t(:$good where so7⏏5) { "Good".say; }; t();␤    expecting any of:␤        prefix␤»

[07:54] <lookatme_q> xinming_, I using it in my module, I am not remember where I found it :)

[07:54] <xinming_>  m: multi sub t(:$good where .so) { "Good".say; }; multi sub t(:$good where !.so) { "Not good".say };   t();

[07:54] <camelia> rakudo-moar 0979b7756: OUTPUT: «Not good␤»

[07:54] <xinming_>  m: multi sub t(:$good where .so) { "Good".say; }; multi sub t(:$good where !.so) { "Not good".say };   t(:good);

[07:54] <camelia> rakudo-moar 0979b7756: OUTPUT: «Good␤»

[07:54] <xinming_>  m: multi sub t(:$good where .so) { "Good".say; }; multi sub t(:$good where !.so) { "Not good".say };   t(:!good);

[07:54] <camelia> rakudo-moar 0979b7756: OUTPUT: «Not good␤»

[07:54] *** cognominal-p6 left
[07:54] <lookatme_q> this way is easy to understand and writing 

[07:55] *** molaf_ left
[07:55] <xinming_> .so is easier to understand, But  :so is also understandable

[07:55] <xinming_> after read the doc

[07:55] <xinming_> I think perl6 will spend my lifetime to learn it.

[08:01] *** zakharyas joined
[08:02] *** p6bannerbot sets mode: +v zakharyas

[08:07] *** araujo joined
[08:07] *** araujo left
[08:07] *** araujo joined
[08:07] *** p6bannerbot sets mode: +v araujo

[08:08] *** p6bannerbot sets mode: +v araujo

[08:10] *** saki left
[08:10] <lookatme_q> xinming_, haha yeah, Perl 6 is so many things like Perl does

[08:11] *** saki joined
[08:12] *** domidumont left
[08:12] *** p6bannerbot sets mode: +v saki

[08:18] *** molaf_ joined
[08:18] *** p6bannerbot sets mode: +v molaf_

[08:23] *** saki left
[08:34] *** Guest34655 joined
[08:34] *** Guest34655 left
[08:36] *** molaf_ left
[08:36] *** molaf joined
[08:37] *** p6bannerbot sets mode: +v molaf

[08:44] *** lizmat joined
[08:45] *** p6bannerbot sets mode: +v lizmat

[08:47] *** molaf left
[09:01] *** lizmat left
[09:08] *** lizmat joined
[09:09] *** p6bannerbot sets mode: +v lizmat

[09:17] *** DarthGandalf left
[09:20] *** DarthGandalf joined
[09:20] *** p6bannerbot sets mode: +v DarthGandalf

[09:21] <lizmat> .tell AlexDaniel fixed the QuantHash tests in 6.c-errata

[09:21] <yoleaux> lizmat: I'll pass your message to AlexDaniel.

[09:22] <AlexDaniel> .

[09:22] <yoleaux> 09:21Z <lizmat> AlexDaniel: fixed the QuantHash tests in 6.c-errata

[09:22] <AlexDaniel> just in time, woke up 10 mins ago :)

[09:22] <lizmat> :-)

[09:23] *** angelds joined
[09:24] *** p6bannerbot sets mode: +v angelds

[09:26] *** angelds left
[09:27] *** angelds joined
[09:28] *** p6bannerbot sets mode: +v angelds

[09:36] *** lizmat_ joined
[09:37] *** p6bannerbot sets mode: +v lizmat_

[09:39] *** lizmat left
[09:47] *** stmuk joined
[09:48] *** p6bannerbot sets mode: +v stmuk

[09:50] *** stmuk_ left
[09:53] *** r0bby4 joined
[09:54] *** Ven` joined
[09:55] *** p6bannerbot sets mode: +v Ven`

[09:56] *** r0bby4 left
[10:01] *** sarna joined
[10:03] *** sarna left
[10:03] *** sarna joined
[10:04] *** p6bannerbot sets mode: +v sarna

[10:04] <sarna> hey, bannerbot broke

[10:05] <sarna> it didn't tell me not to send messages :^(

[10:08] <nine> timotimo: not...yet, no. I've never written a Python extension module. Also I feel like I'm already neglecting Inline::Python

[10:10] *** spycrab0 joined
[10:10] *** p6bannerbot sets mode: +v spycrab0

[10:10] *** domidumont joined
[10:11] *** p6bannerbot sets mode: +v domidumont

[10:17] *** lizmat_ is now known as lizmat

[10:26] <xinming_> for samewith,  Do we need to also pass the  self as the first arg to it?

[10:31] <lizmat> no.  The whole point is that it will call the same method with the same invocant, but with different parameters

[10:36] <xinming_> Thanks, got it

[10:37] <xinming_> so, we need self when we call with nextcallee

[10:37] *** sarna left
[10:50] *** cognominal-p6 joined
[10:50] *** cognominal-p6 left
[10:50] *** cognominal-p6 joined
[10:50] *** p6bannerbot sets mode: +v cognominal-p6

[10:51] *** p6bannerbot sets mode: +v cognominal-p6

[10:51] *** sotona joined
[10:52] *** p6bannerbot sets mode: +v sotona

[10:56] *** sotona left
[10:58] <lizmat> xinming_: don't think so, according to https://docs.perl6.org/routine/nextcallee

[10:58] <jnthn> I suspect you would have to pass it explicitly to nextcallee, since that gives you the code object of the next thing that would be called

[10:58] <lizmat> hmmm... or maybe so

[10:59] <jnthn> well, not to nextcallee, but to the thing that nextcallee returns to you

[10:59] <lizmat> perhaps a doc issue would be in order here

[11:00] <xinming_> yea, I do mean, with the sub returned by nextcallee, We need to pass self to it.

[11:00] <xinming_> thanks

[11:00] <xinming_> I'm still testing something

[11:00] <xinming_> trying something

[11:07] *** undersightable6 joined
[11:07] *** p6bannerbot sets mode: +v undersightable6

[11:08] <xinming_> http://termbin.com/7ukx

[11:09] <xinming_> m: http://termbin.com/7ukx

[11:09] <camelia> rakudo-moar ea387a12a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3http:7⏏5//termbin.com/7ukx␤    expecting any of:␤        colon pair␤»

[11:09] <xinming_> I think bot should be able to eval the content via url. :>

[11:09] <xinming_> BTW, focus to the question, Is this a bug?

[11:09] <xinming_> it should match the "third", But actually, it match the first one.

[11:10] <xinming_> I think, the third arg :!good hides the $good anyway.

[11:10] <lizmat> xinming_: also try changing the order of the candidates

[11:14] *** cognominal-p6 left
[11:18] *** sena_kun joined
[11:18] *** p6bannerbot sets mode: +v sena_kun

[11:19] *** inbioz left
[11:23] *** zakharyas left
[11:25] <xinming_> Ok~~~ change the order worked,

[11:25] <xinming_> seems we'll have to make the "default" last.

[11:26] <xinming_> lizmat: Do you think wether there is a better version for my example instead of chaning the order of multi methods?

[11:26] *** enheh joined
[11:26] *** p6bannerbot sets mode: +v enheh

[11:28] <lizmat> the way I understand MMD is that all "where" clauses are tie-breaking, so the first one that matches, will fire

[11:29] *** cognominal-p6 joined
[11:30] *** p6bannerbot sets mode: +v cognominal-p6

[11:31] *** Ven` left
[11:35] <lizmat> sightseeing&

[11:38] *** abraxxa1 left
[11:38] *** lizmat left
[11:38] *** abraxxa joined
[11:39] *** p6bannerbot sets mode: +v abraxxa

[11:43] *** pmurias joined
[11:44] *** p6bannerbot sets mode: +v pmurias

[11:45] *** cognominal-p6 left
[11:46] *** cognominal-p6 joined
[11:46] *** p6bannerbot sets mode: +v cognominal-p6

[11:56] *** abraxxa left
[11:57] *** abraxxa joined
[11:58] *** p6bannerbot sets mode: +v abraxxa

[12:00] <scimon> So if an attribute has a type like Positional[Int] is there an easy way to get the Int

[12:01] *** vike left
[12:01] *** cognominal-p6 left
[12:02] <jnthn> m: say Positional[Int].^role_arguments[0]

[12:02] <camelia> rakudo-moar ea387a12a: OUTPUT: «(Int)␤»

[12:03] <scimon> Cheers :)

[12:05] *** markong joined
[12:05] *** markong left
[12:05] *** markong joined
[12:06] *** wbn left
[12:06] <scimon> (I'm extending Trait::Env so you can have Array attributes because the more I look at it the more I think it's going to be useful with Docker)

[12:06] *** p6bannerbot sets mode: +v markong

[12:06] *** Luneburg joined
[12:06] *** p6bannerbot sets mode: +v Luneburg

[12:07] <Luneburg> p6: return True if "0291" ~~ /a*/;

[12:07] <camelia> rakudo-moar ea387a12a: OUTPUT: «Attempt to return outside of any Routine␤  in block <unit> at <tmp> line 1␤␤»

[12:07] *** markong is now known as markoong

[12:07] <jnthn> Ah, it'll split the env var on some delimiter?

[12:08] <Luneburg> return "Match" if "0291" ~~ /a*/;

[12:08] <Luneburg> p6: say "Match" if "0291" ~~ /a*/;

[12:08] <camelia> rakudo-moar ea387a12a: OUTPUT: «Match␤»

[12:08] <Luneburg> Why does that match?

[12:09] <AlexDaniel> because it matched zero a's

[12:09] <AlexDaniel> p6: say "Match" if "0291" ~~ /a+/;

[12:09] <camelia> rakudo-moar ea387a12a: ( no output )

[12:09] <AlexDaniel> or

[12:09] <AlexDaniel> p6: say "Match" if "0291" ~~ /^a*$/;

[12:09] <camelia> rakudo-moar ea387a12a: ( no output )

[12:10] <scimon> So if I say has @.name is env it will look for all %*ENV keys that match ^NAME.*$ order them lexically and put the values in the array.

[12:10] <Luneburg> Ah, that makes sense. Thanks

[12:10] <jnthn> scimon: Oh...that's an interesting convention :)

[12:10] <scimon> Well. I figure I can allow for others. But it'll do for me.

[12:10] <jnthn> :)

[12:11] <scimon> Plus I have other plans for a hash version.

[12:11] <scimon> Trying to work around the limitations of ENV to make setting up Docker config super easy. Plus I'm just enjoy noddling around with Traits.

[12:16] *** Ven` joined
[12:17] *** p6bannerbot sets mode: +v Ven`

[12:19] *** vike joined
[12:20] *** p6bannerbot sets mode: +v vike

[12:34] *** angelds left
[12:45] *** zakharyas joined
[12:45] *** p6bannerbot sets mode: +v zakharyas

[12:47] *** aborazmeh joined
[12:47] *** aborazmeh left
[12:47] *** aborazmeh joined
[12:47] *** p6bannerbot sets mode: +v aborazmeh

[12:48] *** p6bannerbot sets mode: +v aborazmeh

[13:05] *** inbioz joined
[13:06] *** p6bannerbot sets mode: +v inbioz

[13:18] *** vrurg joined
[13:19] *** p6bannerbot sets mode: +v vrurg

[13:19] *** aborazmeh left
[13:28] *** benjikun joined
[13:29] *** p6bannerbot sets mode: +v benjikun

[13:31] *** scimon left
[13:31] *** scimon joined
[13:32] *** p6bannerbot sets mode: +v scimon

[13:32] <scimon> Right. Best I get back to work. Trait::Env doing more stuff.

[13:35] *** Ven` left
[13:42] <buggable> New CPAN upload: Trait-Env-0.2.0.tar.gz by SCIMON http://modules.perl6.org/dist/Trait::Env:cpan:SCIMON

[13:46] *** itaipu joined
[13:47] *** p6bannerbot sets mode: +v itaipu

[13:59] *** uzl joined
[14:00] *** p6bannerbot sets mode: +v uzl

[14:02] <uzl> Good morning, #perl6. I'm failing to conceptualize the following line:  

[14:02] <yoleaux> 22 Aug 2018 20:02Z <b2gills> uzl: https://tio.run/##Tc5PC4JAEAXw@36KhyisIBIeuoTRqYMQHQo6iMlUiuL@kV0hLPrstkFhh4HHbx7D9JURy2mSI4IGKQIO70RKVdgb2Q6Nh3SNvIjgZa0QyLSqZtoaUh122jxoxgMZwrGV9ksIV4wFTdxVo2UAUqeSeg48weGXkZv4rs3NIoxrQQNeCH9Fq83AXdE/U54UuMrexcsn/pV@1/wyX7jF7CM2orVD4h6ILY2otZmFsWl6Aw

[14:02] <uzl> "Within methods, $.origin works the same as self.origin, however the colon-syntax for method arguments is only supported for method calls using self, not the shortcut."

[14:02] <uzl> doc: https://docs.perl6.org/language/objects#self

[14:03] <uzl> m: 

[14:03] <uzl> class A { method origin(:$number) { $number }; method get-originA { self.origin(number => 5) }; method get-originB { $.origin(:number(5)) } }; my $x = A.new(); say $x.get-originA(), " ", $x.get-originB();

[14:03] <evalable6> uzl, rakudo-moar ea387a12a: OUTPUT: «5 5␤»

[14:05] *** Ven` joined
[14:05] <uzl> I wonder why I am able to $.origin with colon-syntax inside the get-originB method. That sentence in the doc says it isn't supported with the shortcut to self.method()

[14:05] *** p6bannerbot sets mode: +v Ven`

[14:06] <jnthn> I think it means you can't do `$.foo: $arg`

[14:10] <uzl> jnthn: I haven't seen that form before. I'd appreciate if you could provide me with a short example. ;)

[14:12] <jnthn> m: $*OUT.say: 'hello'

[14:12] <camelia> rakudo-moar ea387a12a: OUTPUT: «hello␤»

[14:12] <jnthn> It's especially useful with cases like

[14:12] <jnthn> $lock.protect: { ...code... }

[14:13] <jnthn> Because then you don't have to worry about putting a closing ) after the }

[14:14] <uzl> Yeah, I've seen it been used with map, sort, etc. I just didn't realize it was the same thing. Thanks!

[14:16] *** curan left
[14:17] <uzl> .tell b2gills Thanks! I just noticed there was an example in the doc all this time. I'll have to pay more attention when reading the doc :).

[14:17] <yoleaux> uzl: I'll pass your message to b2gills.

[14:25] <uzl> class A { method origin($number) { $number }; method get-originA { self.origin: 5 }; method get-originB { $.origin: 5 }; my $x = A.new(); say $x.get-originA(), " ", $x.get-originB();

[14:26] *** kerframil joined
[14:26] *** p6bannerbot sets mode: +v kerframil

[14:30] *** Hor|zon left
[14:31] *** kerframil left
[14:33] <uzl> m: class A { method origin($number) { $number }; method get-originA { self.origin: 5  } }; A.new.get-originA();

[14:33] <camelia> rakudo-moar ea387a12a: ( no output )

[14:33] <uzl> m: class A { method origin($number) { $number }; method get-originA { self.origin: 5  } }; say A.new.get-originA();

[14:33] <camelia> rakudo-moar ea387a12a: OUTPUT: «5␤»

[14:33] <uzl> m: class A { method origin(:$number) { $number }; method get-originA { self.origin: number => 5  } }; say A.new.get-originA();

[14:33] <camelia> rakudo-moar ea387a12a: OUTPUT: «5␤»

[14:33] <uzl> m: class A { method origin(:$number) { $number }; method get-originA { self.origin: :number(5)  } }; say A.new.get-originA();

[14:33] <camelia> rakudo-moar ea387a12a: OUTPUT: «5␤»

[14:41] *** Luneburg left
[14:41] *** uzl left
[14:43] *** saki joined
[14:43] *** saki left
[14:48] *** HaraldJoerg joined
[14:48] *** skids joined
[14:49] *** p6bannerbot sets mode: +v HaraldJoerg

[14:49] *** p6bannerbot sets mode: +v skids

[14:50] *** saki joined
[14:50] *** saki left
[14:52] <SmokeMachine> m: class A { method origin(:$number) { $number }; method get-originA { self.origin: :5number  } }; say A.new.get-originA();

[14:52] <camelia> rakudo-moar ea387a12a: OUTPUT: «5␤»

[14:57] *** saki joined
[14:57] *** saki left
[14:57] *** cognominal-p6 joined
[14:58] *** p6bannerbot sets mode: +v cognominal-p6

[14:58] *** cognominal-p6 left
[14:59] *** cognominal-p6 joined
[14:59] *** inbioz left
[15:00] *** p6bannerbot sets mode: +v cognominal-p6

[15:00] *** saki joined
[15:01] *** p6bannerbot sets mode: +v saki

[15:03] *** fake_space_whale joined
[15:04] *** tonyO_O joined
[15:04] *** p6bannerbot sets mode: +v tonyO_O

[15:04] *** p6bannerbot sets mode: +v fake_space_whale

[15:04] *** jcarty left
[15:05] *** inbioz joined
[15:06] *** p6bannerbot sets mode: +v inbioz

[15:12] *** Ven` left
[15:13] *** troys joined
[15:13] *** pmurias left
[15:14] *** p6bannerbot sets mode: +v troys

[15:14] *** pmurias joined
[15:15] *** p6bannerbot sets mode: +v pmurias

[15:16] *** inbioz left
[15:22] *** cognominal-p6 left
[15:27] *** saki left
[15:29] *** skyton joined
[15:29] *** p6bannerbot sets mode: +v skyton

[15:31] *** saki joined
[15:32] *** saki left
[15:34] *** saki joined
[15:34] *** p6bannerbot sets mode: +v saki

[15:38] *** Ven` joined
[15:39] *** inbioz joined
[15:39] *** p6bannerbot sets mode: +v Ven`

[15:39] *** spycrab0 left
[15:39] *** p6bannerbot sets mode: +v inbioz

[15:40] *** inbioz left
[15:41] *** inbioz joined
[15:41] *** p6bannerbot sets mode: +v inbioz

[15:43] *** araraloren joined
[15:43] *** p6bannerbot sets mode: +v araraloren

[15:44] *** tonyO_O left
[15:47] *** inbioz_ joined
[15:48] *** p6bannerbot sets mode: +v inbioz_

[15:49] *** araraloren left
[15:50] *** inbioz left
[15:56] *** cgfbee left
[15:59] <scimon> Waiting on code review. Added :sep to Trait::Env now you can say `has @.path is env(:sep<:>)` and it's work :)

[15:59] <scimon> it'll even

[16:00] *** saki left
[16:02] <buggable> New CPAN upload: Trait-Env-0.2.1.tar.gz by SCIMON http://modules.perl6.org/dist/Trait::Env:cpan:SCIMON

[16:02] <TimToady> "env" is one of those overloaded words comp sci is full of...

[16:08] <scimon> Yeah... well I can change it. is from-env could work? 

[16:09] <jnthn> is env-var might be clearer :)

[16:09] <benjikun> I don't mind `env` in itself, but ^ this seems nicer

[16:09] <jnthn> otoh, we call it %*ENV in Perl 6, `env` is somewhat guessible

[16:09] <jnthn> Nice module idea, btw. :)

[16:09] <scimon> Right now I just like the idea of being able to easily specify a bunch of things come from the Environment for my docker files. Plus I'm having fun getting my head around Traits and how they tie into stuff.

[16:10] * jnthn could imagine using that now and then

[16:10] <scimon> Well it *was* your's :)

[16:10] <jnthn> oh!

[16:10] <jnthn> I forgot...hah :)

[16:10] <benjikun> lol

[16:10] <scimon> Plus I nicked some stuff from lizmat for make exportable traits.

[16:10] <scimon> making even.

[16:11] *** skyton left
[16:11] <scimon> I think I want for env *because* it's called %*ENV 

[16:11] <benjikun> understandable

[16:11] <scimon> Of course the nice thing with versioned modules if I *do* decide to change the name people can just pin the old one.

[16:12] *** cgfbee joined
[16:12] <TimToady> I guess the thing that bugged me was more that it was unclear on shallow inspection how :sep<:> relates to actual environment variables

[16:12] *** p6bannerbot sets mode: +v cgfbee

[16:12] <TimToady> so I wasn't sure env related to ENV

[16:13] <TimToady> but I guess if you actually learn the language, it becomes more understandable :)

[16:13] <scimon> I think I picked it because the PATH variable tends to be ':' seperated. I'm thinking I may allow :seperator<:> as well.

[16:13] <scimon> I am trying :)

[16:14] <TimToady> I meant, me learning the language of 'is env' :)

[16:14] <scimon> Ah :D

[16:14] <TimToady> I have no qualm about using "env" if it really does relate to ENV

[16:14] <scimon> Again. I'm basing it partly off what I'm using. 

[16:15] <TimToady> the non-ENV-looking :sep just made me think it wasn't

[16:15] <scimon> Well there's other bits `has $.path is env` would just put the PATH variable into the string. 

[16:16] <scimon> I'm trying to give it some good docs too. I really hate coming to a module and the docs don't exist. 

[16:17] <skids> FWIW I was talking to a fellow old-school coder about Perl6; one of the things he balked at was hyphens in identifiers.  I've never liked them, and personally I think they should be used sparingly.

[16:17] <benjikun> skids: I've heard other perl6-ers love them for some reason

[16:17] <jnthn> .oO( Did you mean old_school coder? )

[16:17] <scimon> I love them :) but I like mixing things up.

[16:18] <scimon> oldSchool maybe?

[16:18] <skids> jnthn: haha.

[16:18] <benjikun> We had some discussion about hyphens vs _ vs likeThis at some other point previously

[16:18] <TimToady> hyphens are really easy to get used to, if you don't have an ax to grind already :)

[16:19] <jnthn> skids: Was it a gut reaction, or more an "won't there be confusion with infix:<->" reaction?

[16:19] <TimToady> yes, there was quite a lengthy discussion in the backlog

[16:19] <scimon> The one thing I'm doing is converting them to _ when mapping attribute name to ENV var (as well as going upper case) to match the general standards for this.

[16:19] <skids> jnthn: paraphrasing "yeah I know parsing technology has caught up... but, please no."

[16:20] <benjikun> Another language, Nim actually makes `someFunction` do the same thing as `some_function` regardless of what it was defined as

[16:20] <scimon> Anyway I have a dumb love of * * * being a valid language construct. I'm hardly going to complain about - 

[16:20] <TimToady> probably from someone who was raised in the age where you had to leave all spaces out to fit into memory :)

[16:21] <TimToady> as was I, but I got over it

[16:21] <skids> (Underscores can be overused as well... both can lead to shirking the process of pondering whether there's an appropriately huffmanized alternative.)

[16:21] *** sftp joined
[16:21] *** p6bannerbot sets mode: +v sftp

[16:22] <scimon> I spend too much time dealing with Python devs. My Perl 5|6 code tends to be interspersed with spaces where they would wince.

[16:22] <TimToady> anyway, Perl 6 very intentionally encourages people to put spaces around most binary operators

[16:23] *** st_elmo joined
[16:23] <benjikun> if it works, it works heh

[16:23] <scimon> Side note. Is there any plans for making it easier to export traits? The trick I nicked of lizmat works but it's a bit of a cludge. 

[16:24] <TimToady> so we grudgingly allow $i-1 to be an expression, not a COBOL-style variable

[16:24] *** p6bannerbot sets mode: +v st_elmo

[16:25] <skids> Meh, extra spaces never bothered me.  Heck, I tend to put superstitious parens whenever the precedence gets too far above newbie level just for clarity

[16:25] <TimToady> exporting all sorts of stuff will probably get easier when we get more macro stuff going

[16:25] <scimon> :)

[16:25] *** sarna joined
[16:26] <jnthn> scimon: Hm, you can't just mark the trait_mod with `is export`?

[16:26] *** p6bannerbot sets mode: +v sarna

[16:26] <sarna> what's the p6y version of this regex: /\b\w/ ?

[16:27] <TimToady> /«/

[16:27] <sarna> oh my.

[16:27] <TimToady> or /<</

[16:27] <scimon> jnthn: I'm afraid not. 

[16:27] <TimToady> it's like \< in other re

[16:27] <TimToady> but \< is against Perl policy

[16:28] <sarna> thanks :^)

[16:28] <TimToady> scimon: I'd consider that a bug, really

[16:29] <TimToady> failure to export a syntax category, more or less

[16:29] <jnthn> scimon: Odd, I'm sure I've got code doing so...

[16:29] *** imcsk8 left
[16:31] *** cgfbee left
[16:31] <scimon> I think it's to do with it not correctly handling exported traits and others so you can chain is exported-trait is rw 

[16:32] <scimon> I'll try it again. I have to head off now.

[16:33] *** fake_space_whale left
[16:37] *** imcsk8 joined
[16:37] *** cgfbee joined
[16:38] *** p6bannerbot sets mode: +v imcsk8

[16:38] *** scimon left
[16:38] *** p6bannerbot sets mode: +v cgfbee

[16:47] *** sarna left
[16:54] *** inbioz_ left
[16:56] *** japhb left
[17:00] *** spycrab0 joined
[17:00] *** p6bannerbot sets mode: +v spycrab0

[17:02] *** zakharyas left
[17:05] *** zakharyas joined
[17:05] *** p6bannerbot sets mode: +v zakharyas

[17:08] *** japhb joined
[17:09] *** p6bannerbot sets mode: +v japhb

[17:17] *** cognominal-p6 joined
[17:17] *** p6bannerbot sets mode: +v cognominal-p6

[17:19] *** Luneburg joined
[17:19] *** p6bannerbot sets mode: +v Luneburg

[17:28] *** Luneburg left
[17:31] *** cognominal-p6 left
[17:31] *** cognominal-p6 joined
[17:32] *** p6bannerbot sets mode: +v cognominal-p6

[17:34] *** wbn joined
[17:34] *** p6bannerbot sets mode: +v wbn

[17:42] *** lex_ joined
[17:43] *** p6bannerbot sets mode: +v lex_

[17:43] *** cognominal-p6 left
[17:43] *** sotona joined
[17:44] <lex_> Why does this >>> say "27.36.1.255 FAIL > 77 999.569.22.40".match(/ \d ** 1..3 <?{ $/ < 256}> /, :global); splits the numbers larger than 256 into two numbers?

[17:44] *** p6bannerbot sets mode: +v sotona

[17:45] <lex_> Output :  (｢27｣ ｢36｣ ｢1｣ ｢255｣ ｢77｣ ｢99｣ ｢9｣ ｢56｣ ｢9｣ ｢22｣ ｢40｣)

[17:45] *** Ven` left
[17:47] <TimToady> because of backtracking

[17:47] <TimToady> either use :r or put « » around the "word"

[17:48] *** sotona left
[17:48] <TimToady> well, :r might not work given .match is "backtracking forward" the start position

[17:49] <TimToady> if you're looking for well-formed IP addresses though, you probably want to fail the whole thing if any of the components are > 255

[17:50] <lex_> Yes

[17:50] <lex_> Greater than 22

[17:50] <lex_> 255

[17:50] <lex_> I was going to do a range.  I have run out of time.  brb

[17:52] <TimToady> m: say "27.36.1.255 FAIL > 77 999.569.22.40".match(/ ( « \d+ » ) ** 4 % '.' <?{ $0.all < 256}> /, :global);

[17:52] <camelia> rakudo-moar ea387a12a: OUTPUT: «(｢27.36.1.255｣␤ 0 => ｢27｣␤ 0 => ｢36｣␤ 0 => ｢1｣␤ 0 => ｢255｣)␤»

[17:55] *** lex_ left
[17:58] *** imcsk8_ joined
[17:59] *** p6bannerbot sets mode: +v imcsk8_

[18:00] *** imcsk8 left
[18:10] *** xinming_ is now known as xinming

[18:13] *** leah2 left
[18:29] *** sauvin left
[18:29] *** leah2 joined
[18:30] *** p6bannerbot sets mode: +v leah2

[18:35] *** simcop2387 is now known as perldoc

[18:35] *** perldoc is now known as simcop2387

[18:41] *** Ven` joined
[18:41] *** p6bannerbot sets mode: +v Ven`

[18:44] <rindolf> hi all

[18:46] *** Ven` left
[18:49] *** lizmat joined
[18:49] *** p6bannerbot sets mode: +v lizmat

[18:53] *** rfold joined
[18:53] *** p6bannerbot sets mode: +v rfold

[18:54] <benjikun> rindolf: howdy

[18:54] *** zakharyas left
[18:55] *** cjkinni left
[18:56] *** cjkinni joined
[18:57] *** p6bannerbot sets mode: +v cjkinni

[18:57] *** jast left
[18:58] *** jast joined
[18:58] *** p6bannerbot sets mode: +v jast

[19:00] *** enheh left
[19:02] *** cjkinni left
[19:03] *** cjkinni joined
[19:04] *** p6bannerbot sets mode: +v cjkinni

[19:06] *** cjkinni left
[19:06] *** maettu_ left
[19:06] *** cjkinni joined
[19:07] *** p6bannerbot sets mode: +v cjkinni

[19:14] *** lizmat left
[19:15] *** aindilis left
[19:15] <masak> rindolf: greetings, earthling

[19:16] <rindolf> masak: sup?

[19:16] <benjikun> lol

[19:18] *** kerframil joined
[19:18] *** p6bannerbot sets mode: +v kerframil

[19:22] *** troys left
[19:25] *** domidumont left
[19:37] <tyil> heh

[19:37] <tyil> does anyone know why Niecza on wikipedia redirects to Perl 6?

[19:37] <tyil> https://en.wikipedia.org/w/index.php?title=Niecza&redirect=no

[19:38] <benjikun> https://github.com/sorear/niecza

[19:39] <benjikun> Guess someone set it to a long time ago

[19:40] <masak> rindolf: busy. looking forward to being less so.

[19:40] <masak> rindolf: et tu?

[19:41] <rindolf> masak: refactoring some gnumake code

[19:41] <tyil> benjikun: heh, interesting

[19:41] *** Ven` joined
[19:42] *** p6bannerbot sets mode: +v Ven`

[19:43] <masak> today I realized Slip() is a wee bit more powerful than JS's array spread

[19:43] <masak> because the latter is syntactic, and can only occur inside array literals

[19:43] <masak> whereas the former is first-class and can be passed around

[19:45] <masak> m: say [1, 2, 3].map(-> $e { Slip(["$e$e", "$e $e"]) }).perl

[19:45] <camelia> rakudo-moar ea387a12a: OUTPUT: «("11", "1 1", "22", "2 2", "33", "3 3").Seq␤»

[19:46] <masak> AFAIU, the Slip "deploys" when it gets placed in the resulting Seq

[19:46] *** Ven` left
[19:49] *** spycrab0 left
[20:10] *** st_elmo left
[20:15] *** cjkinni left
[20:15] *** cjkinni joined
[20:16] *** p6bannerbot sets mode: +v cjkinni

[20:28] *** lizmat joined
[20:29] *** p6bannerbot sets mode: +v lizmat

[20:36] *** scimon joined
[20:36] *** p6bannerbot sets mode: +v scimon

[20:39] *** cognominal-p6 joined
[20:39] *** p6bannerbot sets mode: +v cognominal-p6

[20:42] *** MasterDuke joined
[20:42] *** p6bannerbot sets mode: +v MasterDuke

[20:42] *** MasterDuke left
[20:42] *** MasterDuke joined
[20:42] *** herbert.freenode.net sets mode: +v MasterDuke

[20:42] *** p6bannerbot sets mode: +v MasterDuke

[20:42] *** Ven` joined
[20:43] *** p6bannerbot sets mode: +v Ven`

[20:44] *** ufobat left
[20:47] *** rfold left
[20:47] *** Ven` left
[20:47] *** cognominal-p6 left
[20:47] *** cognominal-p6 joined
[20:47] <scimon> So yeah... is export on the traits seems to work fine . Hmmmm

[20:48] *** p6bannerbot sets mode: +v cognominal-p6

[20:57] *** scimon left
[21:02] *** cognominal-p6 left
[21:05] *** DarthGandalf left
[21:07] *** koto joined
[21:07] *** ms78210 joined
[21:08] *** p6bannerbot sets mode: +v koto

[21:09] *** ms78210 left
[21:10] *** sena_kun left
[21:13] *** skids left
[21:21] *** DarthGandalf joined
[21:21] *** p6bannerbot sets mode: +v DarthGandalf

[21:34] *** pk_ joined
[21:34] *** p6bannerbot sets mode: +v pk_

[21:35] <pk_> HELP perl6

[21:35] <pk_> Is there a support for TK in Perl6?

[21:36] <El_Che> I only see gtk modules

[21:37] <pk_> thank you ...

[21:38] *** Some-body_ joined
[21:38] *** p6bannerbot sets mode: +v Some-body_

[21:39] *** DarthGandalf left
[21:39] *** Some-body_ is now known as DarthGandalf

[21:40] *** pk_ left
[21:43] *** Ven` joined
[21:44] *** p6bannerbot sets mode: +v Ven`

[21:48] *** Ven` left
[22:02] *** lizmat left
[22:04] *** lizmat joined
[22:05] *** p6bannerbot sets mode: +v lizmat

[22:08] *** lizmat left
[22:29] *** lizmat joined
[22:30] *** p6bannerbot sets mode: +v lizmat

[22:36] *** epony left
[22:40] *** koto left
[22:40] *** sena_kun joined
[22:41] *** p6bannerbot sets mode: +v sena_kun

[22:41] *** sena_kun left
[22:43] *** pmurias left
[22:44] *** Ven` joined
[22:45] *** p6bannerbot sets mode: +v Ven`

[22:49] *** Ven` left
[22:56] <vrurg> "Missing serialize REPR function for REPR VMIter (BOOTIter)" - what could it be??

[22:57] <timotimo> some object that landed in precompilation kept an iterator around but we don't support precompiling them (yet?)

[22:58] <vrurg> Heh, it doesn't make my life easier. Ok, thanks!

[23:00] <timotimo> something you started iterating over, but have not finished?

[23:01] *** Ven` joined
[23:02] *** p6bannerbot sets mode: +v Ven`

[23:02] <vrurg> There is no my modules in the stack trace. Though it gives me some idea...

[23:02] <vrurg> timotimo: Thanks! 

[23:03] *** pk_ joined
[23:03] *** p6bannerbot sets mode: +v pk_

[23:03] <pk_> I am trying to include inline:perl5 module like below

[23:03] <pk_> perl6 -I Inline-Perl5-master/lib

[23:04] <timotimo> Inline::Perl5 relies on a compilation step during installation, so if you're not installing it with zef, it will probably not work

[23:04] <pk_> and then at prompt use Inline::Perl5;

[23:05] <pk_> ===SORRY!=== Error while compiling /u/kprabha/Inline-Perl5-master/lib/Inline/Perl5/Interpreter.pm6 (Inline::Perl5::Interpreter) An exception occurred while evaluating a constant at /u/kprabha/Inline-Perl5-master/lib/Inline/Perl5/Interpreter.pm6 (Inline::Perl5::Interpreter):12 Exception details:   ===SORRY!=== Error while compiling    Cannot locate native library '/u/kprabha/Inline-Perl5-master/resources/libraries/libp5helper.so': /u/kprab

[23:05] <timotimo> that's the result of compiling what it compiles during installation

[23:05] *** Ven` left
[23:05] <timotimo> the p5helper library

[23:05] <pk_> could you let me know how to install it properly?

[23:08] *** lizmat left
[23:08] <timotimo> "zef install Inline::Perl5"; can you tell us your perl6 --version, too?

[23:10] <pk_> Rakudo Star version 2018.06 built on MoarVM version 2018.06

[23:11] <pk_> I do not have zef ... I use centos

[23:11] <timotimo> did you install rakudo star from centos' provided packages?

[23:11] <pk_> I usually download modules, build and use it ...

[23:11] <pk_> yes

[23:12] <timotimo> OK, you can git clone https://github.com/ugexe/zef

[23:12] *** pmurias joined
[23:12] *** rindolf left
[23:12] <timotimo> it has a readme file that explains how to install it, but it's basically "perl6 -I lib bin/zef install ." or something similar

[23:12] <timotimo> you may also have to include a specific path in your $PATH for "zef" to become available without the full path

[23:12] *** p6bannerbot sets mode: +v pmurias

[23:13] <pk_> sure ... I will try that

[23:27] *** pmurias left
[23:32] *** spycrab0 joined
[23:32] *** p6bannerbot sets mode: +v spycrab0

[23:33] *** pmurias joined
[23:34] *** p6bannerbot sets mode: +v pmurias

[23:34] <pk_> zef install Inline::Perl5 giving below error 

[23:34] <pk_> ===> Searching for: Inline::Perl5 ===> Updating cpan mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan1.json !!!> Failed to update cpan mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan1.json ===> Updating cpan mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan.json !!!> Failed to update cpan mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/mas

[23:44] *** aindilis joined
[23:44] *** p6bannerbot sets mode: +v aindilis

[23:46] <AlexDaniel> pk_: hmm, could it be an issue with ipv6 or something like that?

[23:47] *** fijidrummerboii1 joined
[23:47] *** p6bannerbot sets mode: +v fijidrummerboii1

[23:47] *** pmurias left
[23:48] *** fijidrummerboii1 left
[23:49] <pk_> +AlexDaniel : Not getting how to fix that ... any ideas?

[23:52] <AlexDaniel> pk_: can you access these URLs via your browser?

[23:52] <AlexDaniel> pk_: for example https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan1.json

[23:52] <AlexDaniel> pk_: by any chance, is github blocked in your country?

[23:54] <pk_> I can access the link ... I don't think it is blocked

[23:54] <jnthn> Proxy perhaps? Not sure how zef handles that off hand.

[23:59] *** cognominal-p6 joined
