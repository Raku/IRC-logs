[00:00] *** p6bannerbot sets mode: +v aborazmeh

[00:00] *** stux|wor- joined
[00:00] *** stux|wor- left
[00:00] *** lizmat joined
[00:00] *** p6bannerbot sets mode: +v lizmat

[00:05] *** lizmat left
[00:09] *** |aaron24 joined
[00:09] *** |aaron24 left
[00:19] *** lichtkind left
[00:21] *** vrurg joined
[00:22] *** p6bannerbot sets mode: +v vrurg

[00:24] *** Herby_ left
[00:31] *** powerdan25 joined
[00:31] *** powerdan25 left
[00:40] *** aborazmeh left
[00:49] *** leont left
[01:08] *** kurahaupo left
[01:09] *** kurahaupo joined
[01:10] *** p6bannerbot sets mode: +v kurahaupo

[01:23] *** biberao13 joined
[01:23] *** biberao13 left
[01:50] *** goiken2 joined
[01:51] *** goiken2 left
[01:58] *** w_richard_w joined
[01:58] *** p6bannerbot sets mode: +v w_richard_w

[02:04] *** Wobni joined
[02:04] *** p6bannerbot sets mode: +v Wobni

[02:09] *** epony left
[02:09] *** w_richard_w left
[02:11] *** Wobni left
[02:26] *** natorious20 joined
[02:26] *** natorious20 left
[02:39] *** kazlock joined
[02:39] *** kazlock left
[02:41] *** beeman joined
[02:41] *** p6bannerbot sets mode: +v beeman

[02:48] *** w_richard_w joined
[02:48] *** p6bannerbot sets mode: +v w_richard_w

[02:53] <ccc> m: role Foo {has &op(::?CLASS:D, ::?CLASS:D --> ::?CLASS:D);}

[02:53] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤The () shape syntax in routine declarations is reserved (maybe use :() to declare a longname?)␤at <tmp>:1␤------> 3op(::?CLASS:D, ::?CLASS:D --> ::?CLASS:D7⏏5);}␤»

[02:53] <ccc> m: role Foo {has &op:(::?CLASS:D, ::?CLASS:D --> ::?CLASS:D);}

[02:53] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤You can't adverb has &op␤at <tmp>:1␤------> 3:(::?CLASS:D, ::?CLASS:D --> ::?CLASS:D)7⏏5;}␤»

[02:53] <ccc> so what's the syntax to constrain a callable attribute to have a particular signature?

[02:57] <ccc> m: role Foo {has &.op:(::?CLASS:D, ::?CLASS:D --> ::?CLASS:D);}

[02:57] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤You can't adverb has &.op␤at <tmp>:1␤------> 3:(::?CLASS:D, ::?CLASS:D --> ::?CLASS:D)7⏏5;}␤»

[02:58] <ccc> m: role Foo {has &.op(::?CLASS:D, ::?CLASS:D --> ::?CLASS:D);}

[02:58] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤You can't adverb ::?CLASS␤at <tmp>:1␤------> 3role Foo {has &.op(::?CLASS:D7⏏5, ::?CLASS:D --> ::?CLASS:D);}␤    expecting any of:␤        pair value␤»

[03:00] <ccc> m: role Foo {has :(::?CLASS:D, ::?CLASS:D --> ::?CLASS:D) &.op}

[03:00] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed has␤at <tmp>:1␤------> 3role Foo {has7⏏5 :(::?CLASS:D, ::?CLASS:D --> ::?CLASS:D␤»

[03:01] <ccc> m: my &op:(Int, Int --> Int)

[03:01] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤You can't adverb &op␤at <tmp>:1␤------> 3my &op:(Int, Int --> Int)7⏏5<EOL>␤»

[03:01] <ccc> m: my &op(Int, Int --> Int)

[03:01] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤The () shape syntax in routine declarations is reserved (maybe use :() to declare a longname?)␤at <tmp>:1␤------> 3my &op(Int, Int --> Int7⏏5)␤»

[03:03] *** jrewing joined
[03:03] *** p6bannerbot sets mode: +v jrewing

[03:04] <ccc> m: my &op(Int, Int --> Int)

[03:04] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤The () shape syntax in routine declarations is reserved (maybe use :() to declare a longname?)␤at <tmp>:1␤------> 3my &op(Int, Int --> Int7⏏5)␤»

[03:04] <ccc> m: my &op:(Int, Int --> Int)

[03:04] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤You can't adverb &op␤at <tmp>:1␤------> 3my &op:(Int, Int --> Int)7⏏5<EOL>␤»

[03:05] <ccc> What's the syntax to constraint the signature of a Callable variable or class attribute?

[03:09] *** jrewing left
[03:10] *** w_richard_w left
[03:11] *** ExEs47 joined
[03:11] *** ExEs47 left
[03:13] *** ccc left
[03:15] *** kurahaupo left
[03:16] *** kurahaupo joined
[03:17] *** p6bannerbot sets mode: +v kurahaupo

[03:31] *** huff3r25 joined
[03:33] *** huff3r25 left
[03:37] *** Zoffix joined
[03:37] *** p6bannerbot sets mode: +v Zoffix

[03:38] <Zoffix> .tell ccc list binding with Capture on RHS. m: my (&op:(Int, Int --> Int)) := \(sub (Int, Int --> Int) {})        It's possible there's a simpler way, but I'm hitting a weird potential bug on.

[03:38] <yoleaux> Zoffix: I'll pass your message to ccc.

[03:38] *** Zoffix left
[03:45] *** rindolf joined
[03:46] *** p6bannerbot sets mode: +v rindolf

[03:49] <Geth> ¦ doc: 74cf14d539 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Blob.pod6

[03:49] <Geth> ¦ doc: Align Blob.gist with latest propspec

[03:49] <Geth> ¦ doc: 

[03:49] <Geth> ¦ doc: POV: https://github.com/rakudo/rakudo/commit/cc2fcc9af2

[03:49] <Geth> ¦ doc: Propspec: https://github.com/perl6/roast/commit/cef30fef7e2c358fe405

[03:49] <synopsebot> Link: https://doc.perl6.org/type/Blob

[03:49] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/74cf14d539

[04:00] <Xliff_> \o

[04:00] <Xliff_> Is there any way to log the parsing process when running perl6?

[04:13] *** Herby joined
[04:14] *** p6bannerbot sets mode: +v Herby

[04:21] *** araraloren_ joined
[04:22] *** p6bannerbot sets mode: +v araraloren_

[04:51] *** epony joined
[04:51] *** p6bannerbot sets mode: +v epony

[04:55] *** Herby left
[05:16] *** avar left
[05:16] *** avar joined
[05:16] *** avar left
[05:16] *** avar joined
[05:16] *** p6bannerbot sets mode: +v avar

[05:17] *** p6bannerbot sets mode: +v avar

[05:27] *** fake_space_whale left
[05:48] *** avar left
[05:48] *** avar joined
[05:48] *** avar left
[05:48] *** avar joined
[05:48] *** p6bannerbot sets mode: +v avar

[05:49] *** p6bannerbot sets mode: +v avar

[05:59] *** saymonz joined
[06:00] *** p6bannerbot sets mode: +v saymonz

[06:06] *** saymonz left
[06:09] <Xliff_> \o/

[06:09] <Xliff_> I can get widget info out of GtkBuilder! :D

[06:40] *** jmerelo joined
[06:41] *** p6bannerbot sets mode: +v jmerelo

[06:47] *** kensanata joined
[06:47] *** p6bannerbot sets mode: +v kensanata

[06:54] *** miruoy0 joined
[06:54] *** miruoy0 left
[07:12] <kensanata> Is there a more idiomatic way of writing [ map { id => $_ }, @pages ] if I need [{id=>a}, {id=>b}, ...]? AlexDaniel at one point suggested X=> but I can't get that to work.

[07:24] *** g3ntoo17 joined
[07:24] *** g3ntoo17 left
[07:25] <timotimo>  

[07:25] <timotimo> m: my @pages = <a b c d e>; say "id" X=> @pages

[07:25] <camelia> rakudo-moar f1ee08dcc: OUTPUT: «(id => a id => b id => c id => d id => e)␤»

[07:26] <timotimo> try this, please

[07:30] <kensanata> timotimo: Thanks. When I try it in my code, it seems that I only get id => e, the last element. Actual code right now: %context<pages> = "id" X=> @pages; -- I guess the assignment changes something?

[07:31] <timotimo> ah

[07:31] <kensanata> Or maybe I'm just getting the first one? Let me check.

[07:31] <timotimo> yes, you'll want to put the RHS in parenthesis

[07:32] *** quester left
[07:32] <kensanata> Hm, that appears to make no difference.

[07:32] <timotimo> let's see

[07:33] <timotimo> m: my %context; my @pages = <a b c d e>; %context<pages> = ("id" X=> @pages); say %context.perl

[07:33] <camelia> rakudo-moar f1ee08dcc: OUTPUT: «{:pages($((:id("a"), :id("b"), :id("c"), :id("d"), :id("e")).Seq))}␤»

[07:33] <timotimo> ah, you wanted an array of them, too

[07:33] <timotimo> especially since a .Seq will only let you iterate across it once

[07:33] <timotimo> m: my %context; my @pages = <a b c d e>; %context<pages> = ["id" X=> @pages]; say %context.perl

[07:33] <camelia> rakudo-moar f1ee08dcc: OUTPUT: «{:pages($[:id("a"), :id("b"), :id("c"), :id("d"), :id("e")])}␤»

[07:33] <timotimo> m: my %context; my @pages = <a b c d e>; %context<pages> = ["id" X=> @pages]<>; say %context.perl

[07:33] <camelia> rakudo-moar f1ee08dcc: OUTPUT: «{:pages($[:id("a"), :id("b"), :id("c"), :id("d"), :id("e")])}␤»

[07:33] <timotimo> not sure if you can get rid of the scalar container around it

[07:36] <kensanata> I'm not sure whether I actually need an array. The %context stuff is going to get used for Template::Mustache.

[07:37] <timotimo> you'll surely want to at least .cache the Seq

[07:37] *** sena_kun joined
[07:38] *** p6bannerbot sets mode: +v sena_kun

[07:39] <kensanata> I don't know about the internals of Template::Mustache. But if you're saying that the result would be brittle, then I do want an array. I don't know much about the differences between lists, arrays, and sequences. Normally it just works. :)

[07:39] <timotimo> you can think of a sequence like an iterator, except the sequence actually contains an iterator inside of it

[07:40] <timotimo> that means at least that after you've gone through the sequence once it'll not work any mor

[07:41] <kensanata> I see.

[07:41] <jmerelo> kensanata: and Arrays are immutable, while lists are not.

[07:41] <timotimo> you got it reversed, jmerelo 

[07:42] <jmerelo> timotimo: I was afraid so.

[07:42] <jmerelo> timotimo: I always do. Thanks for pointing it out.

[07:43] <kensanata> Well, I come at this from Emacs Lisp and Java, and there arrays and lists are very different. In Perl I often get the feeling that they are interchangeable until they're not. And I never know when it's going to hit me.

[07:43] <kensanata> I still can't reproduce my problem in a small file. Perhaps that would help me avoid the same problem in the future.

[07:44] <kensanata> m: my @pages = <a b c d e>; my %h; %h<x> = ("id" X=> @pages); say %h<x>; say %h<x>;

[07:44] <camelia> rakudo-moar f1ee08dcc: OUTPUT: «(id => a id => b id => c id => d id => e)␤(id => a id => b id => c id => d id => e)␤»

[07:44] <kensanata> So this looks good and yet it doesn't work in my real code. What do I need to change to reproduce the problem?

[07:45] <timotimo> you're still getting only one result?

[07:46] <kensanata> No, %context<pages> = ["id" X=> @pages] works.

[07:46] <kensanata> I'm just trying to improve my understanding, now. :)

[07:47] <araraloren_> o|

[07:47] <timotimo> o_

[07:48] <Geth> ¦ doc/master: 5 commits pushed by (JJ Merelo)++

[07:48] <Geth> ¦ doc/master: 36f35f9a12 | Reflows and fixes grammar and formatting

[07:48] <Geth> ¦ doc/master: 7e83c32a7a | Adapts definition of `words` to the one in the source.

[07:48] <Geth> ¦ doc/master: 40921d4bfa | Changing the definition of words

[07:48] <Geth> ¦ doc/master: c5aab4d1b1 | Some reformatting and reflow

[07:48] <Geth> ¦ doc/master: 0402d2cdd2 | Reformats and reflows

[07:48] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/74cf14d539a3...0402d2cdd213

[07:49] <jmerelo> kensanata: maybe you can post a gist, or simply point out to the repo. If it works differently with big files, it might be a bug. 

[07:57] <buggable> New CPAN upload: Getopt-Advance-1.1.0.tar.gz by ALOREN http://modules.perl6.org/dist/Getopt::Advance:cpan:ALOREN

[08:08] *** domidumont joined
[08:09] *** p6bannerbot sets mode: +v domidumont

[08:11] <Xliff_> \o/

[08:11] <Xliff_> :D

[08:11] <Xliff_> =D

[08:11] <Xliff_> \o\ /o/ \o\ /o/

[08:12] <Xliff_> Self contained glade and Perl6 code!

[08:12] <Xliff_> https://github.com/Xliff/p6-GtkPlus/blob/master/t/40-builder.t

[08:13] <timotimo> ooh not bad

[08:15] <tadzik> wow!

[08:18] *** dogbert2 joined
[08:18] <Xliff_> timotimo: Yeah. I plan on making your Cairo package a dependency. Just need to get to the point where I can start working on GDK

[08:18] *** marmor joined
[08:18] *** p6bannerbot sets mode: +v dogbert2

[08:19] <timotimo> i see you have a script that generates code

[08:19] <timotimo> maybe it'd be cool to have that in cairo, too

[08:19] <Xliff_> Also self contained styles: https://github.com/Xliff/p6-GtkPlus/blob/master/t/30-widget.css

[08:19] <timotimo> if it even applies?

[08:19] *** p6bannerbot sets mode: +v marmor

[08:19] <Xliff_> :>

[08:20] <Xliff_> Yes. It's just a skeleton generator. Get's me close without having to go through the drudgery.

[08:20] <timotimo> oh, OK

[08:21] *** dogbert2_ left
[08:22] <Xliff_> Still need to find a way to insure control codes aren't applied when I extract data from $=pod

[08:22] <Xliff_> But it works. 

[08:22] <jmerelo> Xliff_: cool! Great job!

[08:23] <timotimo> there's Pod::To::Text, maybe it could be made to have a really-only-text output mode

[08:23] <timotimo> until then, Pod::Walker maybe?

[08:23] <Xliff_> I'll look into it when I run into a burning bridge.

[08:23] <jmerelo> timotimo: that's sorely missing. Most Pod navigation is made pretty ad-hoc

[08:23] <Xliff_> I've gone through so many rounds of refactoring it's not funny.

[08:24] <timotimo> :S

[08:24] <Xliff_> timotimo: You mean Pod::TreeWalker?

[08:24] <timotimo> that must be the one

[08:24] <Xliff_> https://github.com/houseabsolute/perl6-Pod-TreeWalker

[08:25] <jmerelo> timotimo, Xliff_ : I didn't know that one... 

[08:25] *** graphene left
[08:25] <jmerelo> Thanks

[08:26] *** graphene joined
[08:27] *** p6bannerbot sets mode: +v graphene

[08:27] <Xliff_> timotimo: Yeah, that looks like it will help. Kinda like dropping a kiloton bomb to kill a roach, though.

[08:27] <timotimo> *shrug* :)

[08:28] <Xliff_> :) :s

[08:28] <timotimo> you're using perl6 already :D

[08:28] <Xliff_> LOL

[08:28] <Xliff_> Good point.

[08:28] <Xliff_> It's suddenly disturbing to relize the yield isn't as important as the ease with which you can put things together. :P

[08:31] <Xliff_> The tricky part is figuring out how to replace the actual text.

[08:31] <Xliff_> Think something like this:

[08:32] <Xliff_> "<property name="Label">OK</property>"

[08:33] <Xliff_> So it's going to be more than just grabbing the text contents. For now. I guess I can always run a regex to lower case any characters that appear before a '<'

[08:34] <timotimo> maybe you can use the verbatim tag around the whole thing, but ... meh

[08:34] <Xliff_> Was thinking that, but ... I agree. meh

[08:35] <Xliff_> Implementing a verbatim pod block might be easier.

[08:35] <timotimo> or using a heredoc instead of pod

[08:35] * Xliff_ shudders.

[08:35] <timotimo> if you put the heredoc into a sub, you can use it before you define it

[08:35] <Xliff_> Ooh! Good point.

[08:36] <Xliff_> I think I will make it so you can specify alternative methods for both.

[08:37] <Xliff_> Oh! YUP!

[08:37] <Xliff_> I already wrote that mechanism. :D

[08:37] <timotimo> :D

[08:38] <Xliff_> my $a = GTK::Application.new( :ui($ui), :style($style) );

[08:42] *** zxcvz left
[08:46] *** kensanata left
[09:14] *** andrzejku joined
[09:15] *** p6bannerbot sets mode: +v andrzejku

[09:20] <Xliff_> LOL! Added a statusbar, but can't do it through glade. Changes should be available at the same link.

[09:25] <timotimo> or you could interpret the control codes and turn them back into what their text would have been %)

[09:25] <timotimo> er, i was scrolled up still

[09:27] <Xliff_> timotimo: LOL! I think I'm cool with using pod unless there's a conflict.

[09:27] <Xliff_> :)

[09:28] <Xliff_> And now I've also checked that you can add to a glade generated UI, after the fact! :D

[09:28] <timotimo> have you considered using .WHY to store glade data? :P

[09:28] <Xliff_> ?!?

[09:28] <Xliff_> How would I do that?

[09:28] <timotimo> well, putting the stuff into a declarator comment

[09:28] <timotimo> m: say "gimme a newline"

[09:28] <camelia> rakudo-moar 56f76ed35: OUTPUT: «gimme a newline␤»

[09:28] <Xliff_> Ooh! That's an idea.

[09:28] <Xliff_> Will look into that as an idea for Dialog code.

[09:29] <timotimo> m: #| test␤sub do-it() { gimme-my-text }; sub gimme-my-text { say callframe(1).routine.WHY }; do-it

[09:29] <camelia> rakudo-moar 56f76ed35: OUTPUT: «No such method 'routine' for invocant of type 'CallFrame'␤  in sub gimme-my-text at <tmp> line 2␤  in sub do-it at <tmp> line 2␤  in block <unit> at <tmp> line 2␤␤»

[09:29] <timotimo> m: #| test␤sub do-it() { gimme-my-text }; sub gimme-my-text { say callframe(1).code.WHY }; do-it

[09:29] <camelia> rakudo-moar 56f76ed35: OUTPUT: «test␤»

[09:29] <Xliff_> LOL

[09:30] <Xliff_> Can it do post and pre?

[09:30] <timotimo> i do believe post and pre will just be combined for you by rakudo

[09:31] <Xliff_> m: #! test\n

[09:31] <camelia> rakudo-moar 56f76ed35: ( no output )

[09:32] <Xliff_> Hrm. I forget how to insert newlines in IRC>

[09:33] <Xliff_> m: #| test; sub whee { say "Whee!" }; #= tester

[09:33] <camelia> rakudo-moar 56f76ed35: ( no output )

[09:33] <Xliff_> m: #| test; sub whee { say "Whee!" }; #= tester; say &whee.WHY.leading;

[09:33] <camelia> rakudo-moar 56f76ed35: ( no output )

[09:33] <Xliff_> m: #| test; sub whee { say "Whee!" }; #= tester; whee;

[09:33] <camelia> rakudo-moar 56f76ed35: ( no output )

[09:34] <timotimo> forgot a ne wline

[09:34] <Xliff_> Yeah. I don't know if this client can do it.

[09:34] <timotimo> hold on

[09:34] <timotimo> m: #| test; ␤ sub whee { say "Whee!" }; #= tester; ␤␤ whee;

[09:34] <camelia> rakudo-moar 56f76ed35: OUTPUT: «Whee!␤»

[09:34] <timotimo> m: #| test; ␤ sub whee { say "Whee!" }; #= tester; ␤␤ say &whee.WHY.leading;

[09:34] <camelia> rakudo-moar 56f76ed35: OUTPUT: «test;␤»

[09:34] <timotimo> m: #| test; ␤ sub whee { say "Whee!" }; #= tester; ␤␤ say &whee.WHY.trailing;

[09:34] <camelia> rakudo-moar 56f76ed35: OUTPUT: «tester;␤»

[09:35] <Xliff_> Yeah. That's what I was looking for.

[09:35] <Xliff_> That might be useful! :)

[09:35] <timotimo> cool

[09:35] <Xliff_> Hope that works for class definitions, too.

[09:35] <timotimo> ought to

[09:37] *** zxcvz joined
[09:37] *** p6bannerbot sets mode: +v zxcvz

[09:39] *** graphene left
[09:40] *** graphene joined
[09:41] *** p6bannerbot sets mode: +v graphene

[09:50] *** SkyHawk joined
[09:55] *** SkyHawk left
[10:01] <Geth> ¦ doc: jonbeebe++ created pull request #2343: Fixed links to :r, :w, and :x

[10:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2343

[10:02] *** epony left
[10:05] <Geth> ¦ doc: ef1d282327 | (Jonathan Beebe)++ (committed using GitHub Web editor) | doc/Type/IO.pod6

[10:05] <Geth> ¦ doc: Fixed links to :r, :w, and :x

[10:05] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ef1d282327

[10:05] <Geth> ¦ doc: ac22b65682 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Type/IO.pod6

[10:05] <Geth> ¦ doc: Merge pull request #2343 from jonbeebe/patch-1

[10:05] <synopsebot> Link: https://doc.perl6.org/type/IO

[10:05] <Geth> ¦ doc: 

[10:05] <Geth> ¦ doc: Fixed links to :r, :w, and :x:

[10:05] <Geth> ¦ doc: Well spotted. Thanks.

[10:05] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ac22b65682

[10:05] *** debfx0 joined
[10:05] *** p6bannerbot sets mode: +v debfx0

[10:07] *** epony joined
[10:07] *** p6bannerbot sets mode: +v epony

[10:08] *** debfx0 left
[10:16] <Geth> ¦ doc: a3be58359f | (JJ Merelo)++ | 2 files

[10:16] <Geth> ¦ doc: Adds example to join

[10:16] <Geth> ¦ doc: 

[10:16] <Geth> ¦ doc: Which closes #2344. Also clarifies what is meant by "immutable" in the

[10:16] <Geth> ¦ doc: definition of Str.

[10:16] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a3be58359f

[10:19] *** walterve23 joined
[10:19] *** walterve23 left
[10:24] *** marmor left
[10:30] *** broquaint joined
[10:31] *** p6bannerbot sets mode: +v broquaint

[10:41] *** xinming joined
[10:42] *** p6bannerbot sets mode: +v xinming

[10:44] *** xinming_ left
[10:49] *** sena_kun left
[11:04] <Geth> ¦ doc: 44a72d783f | (JJ Merelo)++ | doc/Type/List.pod6

[11:04] <Geth> ¦ doc: Adds another example showing flattening slurpiness

[11:04] <Geth> ¦ doc: 

[11:04] <Geth> ¦ doc: As suggested by @ciavash. Refs #2344

[11:04] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/44a72d783f

[11:04] <synopsebot> Link: https://doc.perl6.org/type/List

[11:05] *** b2gills joined
[11:06] *** p6bannerbot sets mode: +v b2gills

[11:08] *** julius25 joined
[11:08] *** julius25 left
[11:14] *** jtopian26 joined
[11:14] *** p6bannerbot sets mode: +v jtopian26

[11:15] *** jtopian26 left
[11:20] *** ExtraCrispy joined
[11:21] *** p6bannerbot sets mode: +v ExtraCrispy

[11:21] *** shakygator6 joined
[11:22] *** p6bannerbot sets mode: +v shakygator6

[11:25] *** shakygator6 left
[11:29] *** Eugene19 joined
[11:30] *** Eugene19 left
[11:31] *** vike1 left
[11:32] *** jmerelo left
[11:56] *** andrzejku left
[12:08] *** zxcvz_ joined
[12:09] *** p6bannerbot sets mode: +v zxcvz_

[12:09] *** zxcvz left
[12:09] *** zxcvz_ is now known as zxcvz

[12:14] *** damaxi joined
[12:15] *** vike1 joined
[12:15] *** p6bannerbot sets mode: +v damaxi

[12:15] *** p6bannerbot sets mode: +v vike1

[12:17] *** lizmat joined
[12:17] *** p6bannerbot sets mode: +v lizmat

[12:19] *** kurahaupo left
[12:19] *** kurahaupo joined
[12:20] *** kurahaupo left
[12:20] *** kurahaupo joined
[12:21] *** p6bannerbot sets mode: +v kurahaupo

[12:29] *** vike1 left
[12:30] *** kensanata joined
[12:30] *** p6bannerbot sets mode: +v kensanata

[12:35] <kensanata> Sometimes I wonder whether I've made the right decision picking Template::Mustache instead of Template::Mojo. What do other people use, and why? 

[12:37] *** jvoisin19 joined
[12:39] *** jvoisin19 left
[12:41] *** zxcvz left
[12:45] *** raatiniemi joined
[12:46] *** raatiniemi left
[12:48] <timotimo> my current web application does its UI with React.js and just serves static files and json data ;)

[12:48] *** ccc joined
[12:49] *** p6bannerbot sets mode: +v ccc

[12:49] *** leont joined
[12:49] <ccc> m: my &f:(Int, Int --> Int)

[12:49] <yoleaux> 03:38Z <Zoffix> ccc: list binding with Capture on RHS. m: my (&op:(Int, Int --> Int)) := \(sub (Int, Int --> Int) {})        It's possible there's a simpler way, but I'm hitting a weird potential bug on.

[12:49] <yoleaux> 03:41Z <Zoffix> ccc: for attributes, it'd probably be `where .signature ~~ :(…)`, but it's currently throwing a weird error R#2336 https://github.com/rakudo/rakudo/issues/2336

[12:49] <camelia> rakudo-moar 56f76ed35: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤You can't adverb &f␤at <tmp>:1␤------> 3my &f:(Int, Int --> Int)7⏏5<EOL>␤»

[12:49] <synopsebot> R#2336 [open]: https://github.com/rakudo/rakudo/issues/2336 Weird error with subsetting Callable variables

[12:49] *** p6bannerbot sets mode: +v leont

[12:50] <ccc> What's the syntax for constraining the signature of a callable variable/attribute ?

[12:50] <kensanata> timotimo: Heh. :)

[12:51] <ccc> m: my (&op:(Int, Int --> Int))

[12:51] <camelia> rakudo-moar 56f76ed35: ( no output )

[12:52] <ccc> m: my (&op:(Int, Int --> Int)) = sub (Int $a, Int $b --> Int) {$a + $b}; say op(3,2)

[12:52] <camelia> rakudo-moar 56f76ed35: OUTPUT: «No such method 'signature' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[12:52] *** MasterDuke left
[12:56] <ccc> m: sub f(Int $a, Int $b --> Int) {$a + $b}; my (&op:(Int, Int --> Int) = &f; say op(3,2)

[12:56] <camelia> rakudo-moar 56f76ed35: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Invalid typename 'say' in parameter declaration.␤at <tmp>:1␤------> 3b}; my (&op:(Int, Int --> Int) = &f; say7⏏5 op(3,2)␤»

[12:56] <ccc> m: sub f(Int $a, Int $b --> Int) {$a + $b}; my (&op:(Int, Int --> Int)) = &f; say op(3,2)

[12:56] <camelia> rakudo-moar 56f76ed35: OUTPUT: «No such method 'signature' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[12:57] <ccc> Even in C I can constrain the signature of a function pointer. Why is it so darn hard in perl6?

[12:58] <ccc> So far, I can't tell if it's even possible.

[13:02] *** fake_space_whale joined
[13:03] *** p6bannerbot sets mode: +v fake_space_whale

[13:05] *** araraloren__ joined
[13:06] *** p6bannerbot sets mode: +v araraloren__

[13:09] *** araraloren_ left
[13:09] *** pmurias joined
[13:09] *** p6bannerbot sets mode: +v pmurias

[13:10] <pmurias> Zoffix: what do you think about splitting some of the docs pages about complex topics into a tutorial and reference parts?

[13:11] <lizmat> weekly: https://6guts.wordpress.com/2018/09/29/eliminating-unrequired-guards/

[13:11] <notable6> lizmat, Noted!

[13:11] <ccc> Is it possible to constrain the signature of a callable variable or attribute?

[13:12] <ccc> If so, how?

[13:17] <ccc> m: sub foo (&c:(Int, Int -->Int)) {say c(3,2)}; foo(&div)

[13:17] <camelia> rakudo-moar 56f76ed35: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    div used at line 1. Did you mean 'dir', 'die'?␤␤»

[13:17] *** kradalby joined
[13:17] *** kradalby left
[13:17] <lizmat> ccc: something like:

[13:18] <lizmat> m: subset IntSub of Sub where *.name.starts-with("internal-"); my IntSub $foo = sub internal-bar { }; my IntSub $bar = { }

[13:18] <camelia> rakudo-moar 56f76ed35: OUTPUT: «Type check failed in assignment to $bar; expected IntSub but got Hash (${})␤  in block <unit> at <tmp> line 1␤␤»

[13:18] <lizmat> m: subset IntSub of Sub where *.name.starts-with("internal-"); my IntSub $foo = sub internal-bar { }; my IntSub $bar = sub bar { }

[13:18] <camelia> rakudo-moar 56f76ed35: OUTPUT: «Type check failed in assignment to $bar; expected IntSub but got Sub (sub bar { #`(Sub|4891...)␤  in block <unit> at <tmp> line 1␤␤»

[13:18] <timotimo> camelia: the div operator's actual name is either &infix:<div> or shorter &[div]

[13:18] <timotimo> oops

[13:18] <timotimo> ccc: ^

[13:19] *** Daedbffe4 joined
[13:19] *** Daedbffe4 left
[13:19] <ccc> m: sub foo (&c:(Int, Int -->Int)) {say c(3,2)}; foo(&[div])

[13:19] <camelia> rakudo-moar 56f76ed35: OUTPUT: «Constraint type check failed in binding to parameter '&c'; expected anonymous constraint to be met but got Sub+{is-pure}+{Precedence} (proto sub infix:<div>...)␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[13:19] <lizmat> I guess I misunderstood the question

[13:19] <ccc> lizmat: no I was checking something else

[13:20] <ccc> Is it even possible to constrain a callable variable's signature, and if so how?

[13:20] <timotimo> it should

[13:20] <ccc> None of the modules installed seem to do it (by grepping for /my \&\w+/)

[13:20] <timotimo> if not with that syntax, you should at least be able to put Callable[foo, bar] in front

[13:21] <timotimo> greppable6: my Callable

[13:21] <greppable6> timotimo, 6 lines, 1 module: https://gist.github.com/5d505c1b7ba0aafdb63219127d929dca

[13:21] <timotimo> yeah

[13:22] <ccc> timotimo: okay I want a callable that takes 2 Ints and returns an Int in a variable. How do I say it?

[13:24] <pmurias> m: say &infix:<div>.signature

[13:24] <camelia> rakudo-moar 56f76ed35: OUTPUT: «($, $, *%)␤»

[13:25] <pmurias> ccc: ^^ a lot of the builtins have different signatures then you might expect, as they are extendable multi methods

[13:26] <timotimo> OK, it seems like Callable[...] only really takes the return type as argument

[13:26] <ccc> I want to do something like "my &op(Int, Int -->Int)" (the intuitive way to do it)

[13:27] <ccc> I tried subsetting without success

[13:28] <ccc> m: subset Op of Callable where .signature ~~ :(Int, Int --> Int); my Op &foo = sub (Int $a, Int $b --> Int) {$a + $b}

[13:28] <camelia> rakudo-moar 56f76ed35: OUTPUT: «Type check failed in assignment to &foo; expected Callable[Op] but got Sub+{Callable[Int]} (sub (Int $a, Int $b -...)␤  in block <unit> at <tmp> line 1␤␤»

[13:29] *** ZzZombo left
[13:30] *** ZzZombo joined
[13:30] *** p6bannerbot sets mode: +v ZzZombo

[13:30] <timotimo> you've got it double

[13:30] <timotimo> & already means callable

[13:30] <timotimo> my Op &foo asks for a callable that returns a sub that fits Op

[13:30] <ccc> timotimo: then what sigil do I use?

[13:30] <timotimo> you need "my &foo is Callable" or "my Callable $foo"

[13:31] <timotimo> i'll be afk for a bit

[13:31] <ccc> m: subset Op of Callable where .signature ~~ :(Int, Int --> Int); my Op $foo = sub (Int $a, Int $b --> Int) {$a + $b}

[13:31] <camelia> rakudo-moar bda8c1eae: ( no output )

[13:32] <ccc> timotimo: How do I call a scalar callable

[13:33] <jnthn> $foo()

[13:33] <ccc> m: subset Op of Callable where .signature ~~ :(Int, Int --> Int); my Op $foo = sub (Int $a, Int $b --> Int) {$a + $b}; say $foo(3,2)

[13:33] <camelia> rakudo-moar bda8c1eae: OUTPUT: «5␤»

[13:33] <ccc> Yay!!

[13:34] <ccc> I better write that down somewhere it's not in the perl6 docs that I could find and I'll never remember it.

[13:35] <ccc> m: subset Op of Callable where .signature ~~ :(Int, Int --> Int); my Op $foo = sub (Int $a, Int $b --> Int) {$a div $b}; say $foo(3,2)

[13:35] <camelia> rakudo-moar bda8c1eae: OUTPUT: «1␤»

[13:36] *** sostenuto15 joined
[13:36] <ccc> m: subset Op of Callable where .signature ~~ :(Int, Int --> Int); my Op $foo = sub (Int $a, Int $b --> Int) {$a / $b}; say $foo(3,2)

[13:36] <camelia> rakudo-moar bda8c1eae: OUTPUT: «Type check failed for return value; expected Int but got Rat (1.5)␤  in sub  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[13:36] *** sostenuto15 left
[13:37] <ccc> m: subset Op of Callable where .signature ~~ :(Int, Int --> Int); my Op $foo = sub (Int $a, Int $b --> Int) {max($a,$b)}; say $foo(3,2)

[13:37] <camelia> rakudo-moar bda8c1eae: OUTPUT: «3␤»

[13:37] <ccc> m: subset Op of Callable where .signature ~~ :(Int, Int --> Int); my Op $foo = sub (Num $a, Int $b --> Int) {max($a,$b)}; say $foo(3,2)

[13:37] <camelia> rakudo-moar bda8c1eae: OUTPUT: «Type check failed in assignment to $foo; expected Op but got Sub+{Callable[Int]} (sub (Num $a, Int $b -...)␤  in block <unit> at <tmp> line 1␤␤»

[13:40] <ccc> If I were going to update the perl6 docs to mention this, where should it be Callable, Signature, ...?

[13:41] *** kensanata left
[13:48] *** robertle left
[13:49] *** Tyrantelf18 joined
[13:49] *** p6bannerbot sets mode: +v Tyrantelf18

[13:51] *** Tyrantelf18 left
[13:53] *** aborazmeh joined
[13:53] *** aborazmeh left
[13:53] *** aborazmeh joined
[13:53] *** p6bannerbot sets mode: +v aborazmeh

[13:54] *** p6bannerbot sets mode: +v aborazmeh

[13:55] *** robertle joined
[13:56] *** p6bannerbot sets mode: +v robertle

[13:57] *** molaf joined
[13:57] *** p6bannerbot sets mode: +v molaf

[13:58] *** ZzZombo_ joined
[13:58] *** p6bannerbot sets mode: +v ZzZombo_

[14:00] *** graphene left
[14:00] *** aborazmeh left
[14:00] *** woolfy joined
[14:01] *** p6bannerbot sets mode: +v woolfy

[14:01] *** ZzZombo left
[14:01] *** ZzZombo_ is now known as ZzZombo

[14:01] *** graphene joined
[14:02] <woolfy> If anyone needs a picture of stuffed toy Camelia (or crocheted Camelia), go see my Flickr album: https://www.flickr.com/photos/wendyga/albums/72157673975955358

[14:02] *** p6bannerbot sets mode: +v graphene

[14:02] <woolfy> Or pictures of some Perl-swag: https://www.flickr.com/photos/wendyga/albums/72157671244380607

[14:09] *** vike1 joined
[14:10] *** p6bannerbot sets mode: +v vike1

[14:12] *** Voldenet left
[14:17] *** Voldenet joined
[14:17] *** Voldenet left
[14:17] *** Voldenet joined
[14:17] *** p6bannerbot sets mode: +v Voldenet

[14:18] *** p6bannerbot sets mode: +v Voldenet

[14:21] *** HaraldJoerg joined
[14:22] *** p6bannerbot sets mode: +v HaraldJoerg

[14:39] *** wintrmute13 joined
[14:39] *** wintrmute13 left
[14:43] *** pecastro joined
[14:43] *** p6bannerbot sets mode: +v pecastro

[14:47] *** titsuki joined
[14:48] *** p6bannerbot sets mode: +v titsuki

[14:52] <CIAvash> I could not find any tests in roast for something like `join '|', <a b c>, 'd', 'e', 'f'`. Currently it flattens everything because `*@values` is used in the signature. If it's supposed to work like the join method maybe it shoud be `+@values`?

[14:54] *** gilben3 joined
[14:54] *** gilben3 left
[14:55] *** woolfy left
[14:57] <buggable> New CPAN upload: AccountableBagHash-0.0.2.tar.gz by ELIZABETH http://modules.perl6.org/dist/AccountableBagHash:cpan:ELIZABETH

[15:00] *** MilkmanDan left
[15:00] *** MilkmanDan joined
[15:00] *** p6bannerbot sets mode: +v MilkmanDan

[15:04] *** HaraldJoerg1 joined
[15:05] *** p6bannerbot sets mode: +v HaraldJoerg1

[15:08] *** HaraldJoerg left
[15:12] *** graphene left
[15:13] *** graphene joined
[15:14] *** p6bannerbot sets mode: +v graphene

[15:20] *** nibble_zero5 joined
[15:20] *** p6bannerbot sets mode: +v nibble_zero5

[15:25] <rindolf> hi all

[15:26] *** molaf left
[15:26] <timotimo> ohai

[15:26] *** HaraldJoerg1 is now known as HaraldJoerg

[15:26] *** nibble_zero5 left
[15:44] <pmurias> CIAvash: if you really want to check if roasts depends on something change it and run roast

[15:44] *** zxcvz joined
[15:44] *** minikdo joined
[15:44] *** p6bannerbot sets mode: +v zxcvz

[15:50] *** minikdo left
[16:04] *** SharmaJiKaBeta26 joined
[16:05] *** jmerelo joined
[16:05] *** Guest68333 joined
[16:05] *** rfold joined
[16:05] *** p6bannerbot sets mode: +v jmerelo

[16:06] *** p6bannerbot sets mode: +v rfold

[16:06] *** kensanata joined
[16:06] *** p6bannerbot sets mode: +v kensanata

[16:06] *** SharmaJiKaBeta26 left
[16:08] *** Guest68333 left
[16:15] *** araraloren__ left
[16:19] *** coincoin1693 joined
[16:19] *** coincoin1693 left
[16:19] *** AlexDaniel left
[16:20] *** AlexDaniel joined
[16:20] *** p6bannerbot sets mode: +v AlexDaniel

[16:24] *** AlexDaniel left
[16:24] *** AlexDaniel joined
[16:24] *** p6bannerbot sets mode: +v AlexDaniel

[16:24] *** void1 left
[16:24] *** AlexDaniel left
[16:25] *** lizmat left
[16:26] *** kyaputen22 joined
[16:26] *** kyaputen22 left
[16:26] <xinming> m: my @a = (0.125, 0.25, 0.375 ... *); @a[8].say;

[16:26] <camelia> rakudo-moar 4e8740c80: OUTPUT: «1.125␤»

[16:27] <xinming> Is it possible to use the  (0.125, 0.25, 0.375)  kind of syntax to generate a list with specified length?

[16:27] <xinming> Let's say, I want @a = (.... );  But with @a[99] elements available, the @a[100] returns Any

[16:31] <moritz_> m: my @a = (0.125, 0.25, 0.375 ... *).head(100)

[16:31] <camelia> rakudo-moar 4e8740c80: ( no output )

[16:31] <moritz_> m: my @a = (0.125, 0.25, 0.375 ... *).head(100); say @a[99]; say @a[100]

[16:31] <camelia> rakudo-moar 4e8740c80: OUTPUT: «12.5␤(Any)␤»

[16:31] <moritz_> xinming: like this?

[16:31] <xinming> Thanks, the .head(..) is what I what.

[16:32] <xinming> Still need time to get used to the "method" thing in perl6.

[16:38] *** basil1x9 joined
[16:39] *** basil1x9 left
[16:41] *** graphene left
[16:42] *** graphene joined
[16:43] *** p6bannerbot sets mode: +v graphene

[16:43] *** jh1 joined
[16:43] *** p6bannerbot sets mode: +v jh1

[16:44] *** ccc left
[16:44] *** jh1 left
[16:45] *** MasterDuke joined
[16:45] *** p6bannerbot sets mode: +v MasterDuke

[16:45] *** MasterDuke left
[16:45] *** MasterDuke joined
[16:45] *** herbert.freenode.net sets mode: +v MasterDuke

[16:45] *** p6bannerbot sets mode: +v MasterDuke

[16:49] <kensanata> I'm writing some Cro tests and I'd really like some XPath or Mojolicious-like CSS accessors. What would you suggest I do?

[16:50] <kensanata> I guess I'm going to install XML::XPath because I don't know what the other thing is even called. :)

[16:52] <kensanata> Hm. DOM::Tiny could be the thing I need!

[17:34] *** ppv15 joined
[17:34] *** p6bannerbot sets mode: +v ppv15

[17:39] *** ppv15 left
[17:48] *** kdavyd10 joined
[17:48] *** kdavyd10 left
[17:51] *** ilbelkyr_ is now known as ilbelkyr

[17:51] *** kensanata left
[17:51] *** damaxi left
[17:52] *** lizmat joined
[17:52] *** p6bannerbot sets mode: +v lizmat

[18:01] *** john_parr joined
[18:01] *** p6bannerbot sets mode: +v john_parr

[18:05] *** graphene left
[18:05] *** damaxi joined
[18:06] *** p6bannerbot sets mode: +v damaxi

[18:06] *** graphene joined
[18:07] *** p6bannerbot sets mode: +v graphene

[18:23] *** molaf joined
[18:23] *** p6bannerbot sets mode: +v molaf

[18:37] *** Guest54668 left
[18:37] *** damaxi left
[18:38] *** giraffe joined
[18:38] *** p6bannerbot sets mode: +v giraffe

[18:38] *** giraffe is now known as Guest82400

[18:50] *** padv16 joined
[18:51] *** john_parr left
[18:51] *** padv16 left
[18:52] *** domidumont left
[19:01] *** jmerelo left
[19:03] *** itaipu joined
[19:04] *** p6bannerbot sets mode: +v itaipu

[19:20] *** damaxi joined
[19:21] *** p6bannerbot sets mode: +v damaxi

[19:24] <pmurias> stackoverflow-- # I can't comment on a post referencing the graal backend because I don't have enough brownie points :(

[19:24] <lizmat> pmurias: perhaps I could do it for you ?

[19:28] *** WestCoastHotDog joined
[19:28] *** WestCoastHotDog left
[19:29] <pmurias> in https://stackoverflow.com/questions/52469440/is-it-possible-for-perl-6-to-work-online, re "which can in turn target JS", As far as I'm aware there are no plans for Graal to target JS, there are vague plan for it to target webassembly (ones it matures and gains extra features) but I'm not aware of an actual effort. 

[19:30] *** rfold left
[19:35] *** DHE15 joined
[19:35] *** DHE15 left
[19:38] <pmurias> lizmat: would be great, I don't think I'll collect those brownie points any time soon ;)

[19:39] *** rindolf left
[19:43] <lizmat> pmurias: added

[19:53] <pmurias> lizmat: thank you

[19:53] * pmurias wishes that Graal/Truffle could actually emit javascript as the truffle backend is a lot more fun ;)

[20:00] *** zxcvz left
[20:01] *** rindolf joined
[20:01] *** molaf left
[20:01] *** p6bannerbot sets mode: +v rindolf

[20:05] <leont> 5 upvotes is all you need to comment :-)

[20:07] *** Celelibi_ is now known as Celelibi

[20:11] <leont> Also, if you need someone with high reputation privileges (e.g. to protect a question) I can help out with that sort of thing. Not that I'm expecting that to happen soon

[20:14] *** kenvandine25 joined
[20:14] *** kenvandine25 left
[20:17] *** vike1 left
[20:17] *** Sgeo_ joined
[20:18] *** p6bannerbot sets mode: +v Sgeo_

[20:19] *** Sgeo left
[20:22] *** cognominal-p6 left
[20:26] *** vike1 joined
[20:27] *** p6bannerbot sets mode: +v vike1

[20:28] *** pmurias left
[20:32] *** cognominal-p6 joined
[20:32] *** p6bannerbot sets mode: +v cognominal-p6

[20:35] *** damaxi left
[20:43] *** robertle left
[20:45] *** akkad29 joined
[20:46] *** p6bannerbot sets mode: +v akkad29

[20:47] *** akkad29 left
[20:55] *** vike1 left
[20:55] *** cognominal-p6 left
[20:56] *** cognominal-p6 joined
[20:56] *** p6bannerbot sets mode: +v cognominal-p6

[20:57] *** AlexDaniel joined
[20:57] *** p6bannerbot sets mode: +v AlexDaniel

[21:06] *** vike joined
[21:07] *** p6bannerbot sets mode: +v vike

[21:11] *** quester joined
[21:11] *** p6bannerbot sets mode: +v quester

[21:17] <buggable> New CPAN upload: App-Tasks-0.0.4.tar.gz by JMASLAK http://modules.perl6.org/dist/App::Tasks:cpan:JMASLAK

[21:17] *** eggiar joined
[21:18] *** rindolf left
[21:18] *** p6bannerbot sets mode: +v eggiar

[21:19] <eggiar> mm

[21:21] <eggiar> I didn't find someone here

[21:21] <timotimo> greetings eggiar 

[21:22] *** chimera3________ joined
[21:22] *** chimera3________ left
[21:25] <eggiar> can you tell me how to use this :v

[21:31] *** damjan18 joined
[21:31] *** damjan18 left
[21:31] *** quester left
[21:34] <eggiar> hmm

[21:35] *** b2gills left
[21:38] *** kybr left
[21:42] *** kodapa26 joined
[21:42] *** kodapa26 left
[21:47] <timotimo> oh sorry

[21:48] <timotimo> i was reading some stuff off the side and didn't look back

[21:48] <timotimo> eggiar: what in particular do you need help with?

[21:52] *** b2gills joined
[21:53] *** p6bannerbot sets mode: +v b2gills

[21:54] <AlexDaniel> re sin with rats and “I didn’t manage to program my way around this, but perhaps some of you know a solution?”, sure, any way to generate sin digits will do

[21:54] <AlexDaniel> maybe it's a good idea for a module

[21:54] <AlexDaniel> and maybe for benchmarks also

[21:55] *** TheOnlyBouncer12 joined
[21:56] <AlexDaniel> though I guess continued fraction approach will explode in denominator, but there has to be a better way :)

[21:56] *** eggiar left
[21:56] *** p6bannerbot sets mode: +v TheOnlyBouncer12

[21:56] <AlexDaniel> (this is about https://medium.com/@jcoterhals/perl-6-small-stuff-11-can-perl-6-pass-the-numberphile-calculator-test-dc8da055cfc4 )

[21:56] <timotimo> after a given point fall back to interpolation? :P

[21:58] <AlexDaniel> interpolation?

[21:58] <AlexDaniel> I understand it was a joke but I don't get it :)

[22:00] <timotimo> well, it doesn't give you real precision

[22:01] *** TheOnlyBouncer12 left
[22:06] *** HaraldJoerg left
[22:19] *** b2gills left
[22:52] <Xliff_> If I have the arguments to a sub in an array, what's the easiest way to convert that array to something acceptable by positional arguments?

[22:52] <Xliff_> I thought @a.list would work, but it doesn't seem to be.

[22:53] <Xliff_> m: sub a($b, $c) { say $b; $say $c; }; my @a(1, 2); a(@a.list);

[22:53] <camelia> rakudo-moar 479348f31: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$say' is not declared. Did you mean '&say'?␤at <tmp>:1␤------> 3sub a($b, $c) { say $b; 7⏏5$say $c; }; my @a(1, 2); a(@a.list);␤»

[22:53] <Xliff_> m: sub a($b, $c) { say $b; say $c; }; my @a(1, 2); a(@a.list);

[22:53] <camelia> rakudo-moar 479348f31: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤The () shape syntax in array declarations is reserved␤at <tmp>:1␤------> 3($b, $c) { say $b; say $c; }; my @a(1, 27⏏5); a(@a.list);␤    expecting any of:␤        constraint␤        forma…»

[22:53] <Xliff_> m: sub a($b, $c) { say $b; say $c; }; my @a(1, 2); a(@a.List);

[22:53] <camelia> rakudo-moar 479348f31: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤The () shape syntax in array declarations is reserved␤at <tmp>:1␤------> 3($b, $c) { say $b; say $c; }; my @a(1, 27⏏5); a(@a.List);␤    expecting any of:␤        constraint␤        forma…»

[22:53] <Xliff_> m: sub a($b, $c) { say $b; say $c; }; my @a(1, 2); &a(@a.list);

[22:53] <camelia> rakudo-moar 479348f31: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤The () shape syntax in array declarations is reserved␤at <tmp>:1␤------> 3($b, $c) { say $b; say $c; }; my @a(1, 27⏏5); &a(@a.list);␤    expecting any of:␤        constraint␤        form…»

[22:53] <Xliff_> m: sub a($b, $c) { say $b; say $c; }; my @a=(1, 2); &a(@a.list);

[22:53] <camelia> rakudo-moar 479348f31: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[22:54] <Xliff_> m: sub a($b, $c) { say $b; say $c; }; my @a(1, 2); &a(@a.Seq);

[22:54] <camelia> rakudo-moar 479348f31: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤The () shape syntax in array declarations is reserved␤at <tmp>:1␤------> 3($b, $c) { say $b; say $c; }; my @a(1, 27⏏5); &a(@a.Seq);␤    expecting any of:␤        constraint␤        forma…»

[22:54] <Xliff_> m: sub a($b, $c) { say $b; say $c; }; my @a(1, 2); &a(@a);

[22:54] <camelia> rakudo-moar 479348f31: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤The () shape syntax in array declarations is reserved␤at <tmp>:1␤------> 3($b, $c) { say $b; say $c; }; my @a(1, 27⏏5); &a(@a);␤    expecting any of:␤        constraint␤        formal pa…»

[22:54] <Xliff_> m: sub a($b, $c) { say $b; say $c; }; my @a(1, 2); &a(@a.flat);

[22:54] <camelia> rakudo-moar 479348f31: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤The () shape syntax in array declarations is reserved␤at <tmp>:1␤------> 3($b, $c) { say $b; say $c; }; my @a(1, 27⏏5); &a(@a.flat);␤    expecting any of:␤        constraint␤        form…»

[22:54] *** pecastro left
[22:58] *** b2gills joined
[22:59] <xinming> What module is recommend to write http server in perl6?

[22:59] *** p6bannerbot sets mode: +v b2gills

[22:59] <xinming> http::server::async seems no update for a year. Is it still maintained?

[22:59] <timotimo> cro will take you very far, i'm sure

[22:59] <timotimo> Xliff_: you need to *@a for it to become positionals

[23:00] <timotimo> and you apparently got an earlier line back that was missing the = before my @a and (1, 2)

[23:00] <xinming> I do use cro, But needs something really light weight. :-)

[23:01] <xinming> No need to be big in my case.

[23:01] *** john_parr joined
[23:01] *** p6bannerbot sets mode: +v john_parr

[23:03] <Xliff_> m: sub a($b, $c) { say $b; say $c; }; my @a=(1, 2); &a(*@a);

[23:03] <camelia> rakudo-moar 479348f31: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3 { say $b; say $c; }; my @a=(1, 2); &a(*7⏏5@a);␤    expecting a…»

[23:04] <Xliff_> OK, so the change has to be in the signature.

[23:04] <Xliff_> For some reason I thought I could convert the array to a list and do it that way.

[23:06] <timotimo> sorry!

[23:06] <timotimo> i told you completely the wrong thing

[23:06] <timotimo> you actually need |@a

[23:06] <timotimo> m: sub a($b, $c) { say $b; say $c; }; my @a=(1, 2); &a(|@a);

[23:06] <camelia> rakudo-moar 479348f31: OUTPUT: «1␤2␤»

[23:15] *** wiliz14 joined
[23:20] *** wiliz14 left
[23:22] *** Bucciarati left
[23:22] *** Bucciarati joined
[23:23] *** p6bannerbot sets mode: +v Bucciarati

[23:27] <timotimo> Xliff_: ^

[23:29] *** Guest31449 joined
[23:29] *** Guest31449 left
[23:32] *** avar left
[23:32] *** avar joined
[23:32] *** avar left
[23:32] *** avar joined
[23:32] *** p6bannerbot sets mode: +v avar

[23:33] *** p6bannerbot sets mode: +v avar

[23:49] *** graphene left
[23:50] *** graphene joined
[23:51] *** p6bannerbot sets mode: +v graphene

[23:52] *** Guest69528 joined
[23:53] *** p6bannerbot sets mode: +v Guest69528

[23:55] *** Guest69528 left
[23:59] *** THE_GFR|H joined
[23:59] *** THE_GFR|H left
