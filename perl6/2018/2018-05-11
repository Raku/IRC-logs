[00:02] *** mcmillhj joined
[00:02] *** w_richard_w joined
[00:06] *** mcmillhj left
[00:06] *** labster joined
[00:14] *** mcmillhj joined
[00:20] *** mcmillhj left
[00:30] <lookatme> mr_ron, I think it's like a method need invocation 

[00:31] <lookatme> m: grammar G { token A is export {"a"}; }; import G; say &A.signature

[00:31] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´(G: *%_)‚ê§¬ª

[00:31] <lookatme> `my`  and `our` not need that obviously

[00:33] <mr_ron> m: grammar G { our token A is export {"a"}; }; import G; say &A.signature

[00:33] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´(Mu: *%_)‚ê§¬ª

[00:34] *** markong left
[00:34] <mr_ron> lookatme: not obviously for me.  Are you saying that `my` and `our` mean that `A` is no longer a method?

[00:34] <lookatme> yeah, mr_ron it is

[00:35] *** Xx_ZareZare_xX joined
[00:36] *** epony joined
[00:36] <mr_ron> sorry - still confused - 'it is no longer a method with my/our' - correct?

[00:37] <TimToady> it does not participate in the grammar as if it were a method

[00:37] <yoleaux> 10 May 2018 20:47Z <Zoffix> TimToady: did you still want for œÄ, œÑ, and ùëí constants to be MidRats (Rat/FatRat allomorphs)? https://irclog.perlgeek.de/perl6-dev/2018-03-05#i_15887340  Kinda think it's pointless unless we also implement all the trig functions that support Rationals otherwise we're just adding overhead of coercing them to Num.

[00:37] <yoleaux> 10 May 2018 20:48Z <Zoffix> TimToady: plus also Complex with Rational components to make cool stuff like Euler's identity give "right" results :)

[00:37] <mr_ron> OK - thanks

[00:38] *** Xx_ZareZare_xX left
[00:38] <TimToady> but I suspect the method form is attaching some lexer info to the routine that is interfering with use as an export

[00:39] <TimToady> or maybe it's looking for the corresponding action routine

[00:43] *** comborico1611_ left
[00:44] <mr_ron> m: class C { our $a is export = 3 }; import C; say $a

[00:44] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´3‚ê§¬ª

[00:44] <mr_ron> m: class C { my $a is export = 3 }; import C; say $a

[00:44] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Can't apply trait 'is export' on a my scoped variable. Only our scoped variables are supported.‚ê§at <tmp>:1‚ê§------> 3class C { my $a is export7‚èè5 = 3 }; import C; say $a‚ê§    expecting any of:‚Ä¶¬ª

[00:45] <mr_ron> m: class C { my token A is export { 'a' } }; import C; say 'a' ~~ /<A>/;

[00:45] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´ÔΩ¢aÔΩ£‚ê§ A => ÔΩ¢aÔΩ£‚ê§¬ª

[00:45] <mr_ron> m: class C { our token A is export { 'a' } }; import C; say 'a' ~~ /<A>/;

[00:45] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´ÔΩ¢aÔΩ£‚ê§ A => ÔΩ¢aÔΩ£‚ê§¬ª

[00:46] <lookatme> Anyway it's weird using the my/our before token/rule

[00:46] *** mcmillhj joined
[00:47] <mr_ron> lookatme: there are good uses to exporting rules

[00:47] *** espadrine left
[00:48] <lookatme> mr_ron, Is there some document point out this usage ?

[00:49] <mr_ron> you can't export a my scoped variable but you can export a my scoped token - that looks odd

[00:49] <lookatme> m: class C { my method A is export { } }

[00:49] <camelia> rakudo-moar febcb9177: ( no output )

[00:50] <lookatme> Maybe they not check that

[00:50] <mr_ron> exporting a method is documented someplace

[00:51] *** AlexDaniel left
[00:51] <lookatme> m: grammar G { token A is export {"a"}; }; say G.subparse("a", rule("A"));

[00:51] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    rule used at line 1‚ê§‚ê§¬ª

[00:51] <lookatme> m: grammar G { token A is export {"a"}; }; say G.subparse("a", :rule("A"));

[00:51] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´ÔΩ¢aÔΩ£‚ê§¬ª

[00:51] <lookatme> have you consider the subparse ?

[00:51] *** mcmillhj left
[00:51] <lookatme> mr_ron, It's better than export something is my, I think

[00:54] <mr_ron> lookatme: thanks for the input but there may be a useful variant of CPAN Regexp::Common or similar use case where I think export makes more sense

[00:54] <lookatme> mr_ron, welcome

[01:00] <mr_ron> exporting methods documented here - `close` towards end: https://perl6advent.wordpress.com/2009/12/12/day-12-modules-and-exporting/

[01:00] *** w_richard_w left
[01:03] *** mcmillhj joined
[01:06] *** telex left
[01:08] *** telex joined
[01:08] *** mcmillhj left
[01:13] *** w_richard_w joined
[01:17] *** Merfont joined
[01:17] *** Kaypie left
[01:19] *** mcmillhj joined
[01:19] *** Merfont left
[01:21] *** Kaiepi joined
[01:24] *** mcmillhj left
[01:31] *** unicodable6 joined
[01:32] *** zare joined
[01:35] *** zare left
[01:37] *** ryn1x left
[01:37] *** molaf left
[01:38] *** mcmillhj joined
[01:39] *** ryn1x joined
[01:43] *** mcmillhj left
[01:49] *** ilbot3 left
[01:50] *** molaf joined
[01:52] *** mcmillhj joined
[01:53] *** mr_ron left
[01:56] *** ilbot3 joined
[01:56] *** ChanServ sets mode: +v ilbot3

[01:57] *** mcmillhj left
[01:59] *** silug left
[02:01] *** zakharyas joined
[02:02] *** itaipu joined
[02:09] *** mcmillhj joined
[02:10] *** silug joined
[02:13] *** mcmillhj left
[02:21] *** pilne left
[02:22] *** zachk left
[02:26] *** melezhik joined
[02:30] *** mcmillhj joined
[02:34] *** mniip left
[02:35] *** mcmillhj left
[02:36] *** ufobat_ joined
[02:37] *** mniip joined
[02:38] *** Todd joined
[02:38] <Todd> Is there a way to tell `perl6 -c xxx` to stay within the pl6 in question and leave the pm6's alone?

[02:39] *** ufobat left
[02:45] *** mcmillhj joined
[02:50] *** mcmillhj left
[02:54] <Todd> never mind.  I don't want to talk about it

[03:02] *** Todd left
[03:07] *** committable6 joined
[03:08] *** itaipu left
[03:14] *** eliasr left
[03:16] *** khw left
[03:17] *** molaf left
[03:19] *** mcmillhj joined
[03:24] *** mcmillhj left
[03:36] *** mcmillhj joined
[03:40] *** mcmillhj left
[03:54] *** wamba joined
[03:59] *** statisfiable6 joined
[03:59] <geekosaur> dammit, I lost the brown paper bag jpg

[04:05] *** ewilhelm joined
[04:10] *** mcmillhj joined
[04:10] *** Todd joined
[04:12] <Todd> This is perl5:   `$dir_entry =~ /.*?(\d{1,4}\D\d{1,4}\D\d{1,4}).*${Extension}/;`     P6 doesn't like the `{1,4}`.  How do I change it over to P6?   

[04:15] *** mcmillhj left
[04:15] <Todd> I just caught the ${ and changed it to {$, but that was another problem

[04:17] <geekosaur> \d ** 1..4

[04:19] <geekosaur> (\d**1..4 \D \d**1..4 \D \d**1..4)

[04:20] <Todd> Thank you!

[04:26] *** lizmat_ left
[04:28] *** BenGoldberg left
[04:32] *** Kaiepi left
[04:33] *** Kaiepi joined
[04:34] *** ewilhelm left
[04:39] *** lizmat joined
[04:41] *** lizmat left
[04:44] *** Todd left
[04:45] *** skids left
[04:57] *** mcmillhj joined
[05:01] *** mcmillhj left
[05:07] <moritz> (\d ** 1..4) ** 3 % \D

[05:10] <geekosaur> even better, yes

[05:10] *** lizmat joined
[05:10] <geekosaur> (but I can already smell neurons sizzling :p )

[05:13] *** jmerelo joined
[05:16] *** mcmillhj joined
[05:20] *** mcmillhj left
[05:23] *** sauvin joined
[05:26] *** lizmat left
[05:32] <jmerelo> Somebody in the mailing list has mentioned that this documentation is not helpful https://docs.perl6.org/language/regexes#Lookahead_Assertions Can you put on your beginner glasses and check it?

[05:39] *** lizmat joined
[05:39] *** wamba left
[05:44] *** mcmillhj joined
[05:49] *** mcmillhj left
[05:59] *** windyhouse joined
[05:59] *** wamba joined
[06:01] <moritz> it doesn't really explain what's different to just writing the regex

[06:02] <jmerelo> moritz: or provide examples for that... 

[06:02] *** mcmillhj joined
[06:04] <jmerelo> moritz: something around these lines https://www.regular-expressions.info/lookaround.html

[06:05] <jmerelo> p6: say "foobar" ~~ / foo <?before bar> (bar)/

[06:05] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´ÔΩ¢foobarÔΩ£‚ê§ 0 => ÔΩ¢barÔΩ£‚ê§¬ª

[06:05] *** espadrine joined
[06:06] <jmerelo> To be fair, that's explained right before https://docs.perl6.org/language/regexes#Zero-Width_Assertions

[06:06] *** windyhouse left
[06:06] <moritz> still, a more practical example wouldn't hurt

[06:07] <jmerelo> moritz: I'll issue that. Thanks!

[06:07] <moritz> for example "replace all numbers that are followed by a unit"

[06:07] *** mcmillhj left
[06:10] *** raynold left
[06:16] *** mcmillhj joined
[06:17] *** vivus-ignis joined
[06:21] *** mcmillhj left
[06:26] *** espadrine left
[06:28] *** mcmillhj joined
[06:30] *** jmerelo left
[06:32] *** mcmillhj left
[06:36] *** vivus-ignis is now known as ignis__away

[06:38] *** abraxxa joined
[06:38] *** ignis__away is now known as vivus-ignis

[06:45] *** robertle joined
[06:46] *** mcmillhj joined
[06:51] *** mcmillhj left
[06:52] *** Ven`` joined
[06:52] <Voldenet> lookahead and lookbehind assertions can be used to parse xml with regex ;)

[06:54] <Geth> ¬¶ doc: 895f932dec | (Moritz Lenz)++ | doc/Language/regexes.pod6

[06:54] <synopsebot> Link: https://doc.perl6.org/language/regexes

[06:54] <Geth> ¬¶ doc: Add somewhat practical regex look-ahead example

[06:54] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/895f932dec

[06:55] *** vivus-ignis is now known as ignis__away

[06:56] <geekosaur> that sounds like ossa and pelion

[06:58] *** ignis__away is now known as vivus-ignis

[07:06] *** mcmillhj joined
[07:10] *** mcmillhj left
[07:11] *** jmerelo joined
[07:14] *** Ven`` left
[07:14] *** Ven`` joined
[07:16] *** Ven` joined
[07:16] *** Ven`` left
[07:18] *** windyhouse joined
[07:18] <masak> Voldenet: you might be right about that, but it feels to me like some sort of rule recursion is what's needed (like in a pushdown automaton)

[07:18] <masak> in the end because XML elements can contain other XML elements, ad infinitum or thereabouts

[07:19] <Voldenet> masak: they actually can't

[07:19] <Voldenet> can't be used to parse a regex

[07:19] <Voldenet> ugh

[07:19] <Voldenet> regexes can't be used to parse an xml

[07:19] <masak> of course, at this point we should define terms, otherwise further discussion will just be confusing

[07:20] <masak> how about this: "regular expression" is the Kleene-star CS thing that CS talks about

[07:20] <masak> "regex" is the thing in Perl 5 and Perl 6 and lots of other languages, which often embraces-and-extends regular expressions so that they are no longer the CS thing that CS talks about

[07:21] <masak> I'd say with this definition, regular expressions definitely can't parse XML, but regexes definitely can in many languages, Perl 5 and Perl 6 among them

[07:23] <masak> that is, the thrust of something like https://swtch.com/~rsc/regexp/regexp1.html is that modern languages have abandoned something elegant (regular expressions) in favor of something slower much less theoretically appealing (regexes), in the name of features and pragmatism

[07:23] <Voldenet> in perl 5.10*

[07:24] <masak> granted.

[07:24] <masak> I dunno, I don't think much about older Perl 5 versions ;)

[07:25] *** rindolf joined
[07:26] <Voldenet> I'm just nitpicking, don't mind me

[07:26] *** jmerelo left
[07:27] *** jmerelo joined
[07:30] <masak> anyway, my original point still stands: regular expressions can't parse XML because XML's structure is recursive/inductive -- but if you "upgrade" your FSM to a pushdown automaton, you can parse XML with it

[07:30] <masak> dunno if there's a name corresponding to a pushdown automaton, but if there is it ought to be something like "stack-based regular expressions" :)

[07:31] *** raynold joined
[07:31] <Voldenet> True, I've remember writing something to check if xml is balanced before actually doing anything else with it

[07:31] *** windyhouse left
[07:32] *** Ven` left
[07:32] *** Ven`` joined
[07:33] *** Ven`` left
[07:33] *** Ven` joined
[07:33] <Voldenet> so I'd guess a lot of things could be done using that approach, nobody would like the complexity of such regexes though

[07:33] *** mcmillhj joined
[07:34] <masak> it's the usual tradeoff: you make your DSL more powerful/complex, it also ends up being less analyzable/manipulable

[07:34] <masak> until finally it reaches sentience and lunges out the window, screaming "Turing equivalence!" as it runs for the hills

[07:35] *** rightfold left
[07:36] *** darutoko joined
[07:37] <masak> Voldenet: also, your "check if xml is balanced" reminded me of this thing: https://gist.github.com/masak/5129165

[07:37] <masak> (I spent some time on this channel being obsessed with the balanced-bracket problem)

[07:38] *** Ven` left
[07:38] *** mcmillhj left
[07:39] <Voldenet> Wow, I like comments more than I like the code. :)

[07:41] <masak> I remember TimToady wrote a solution too

[07:48] *** mcmillhj joined
[07:50] <masak> hey, I just noticed https://rosettacode.org/wiki/Balanced_brackets#Parsing_with_a_grammar is not correct

[07:50] <masak> it wrongly rejects '[][]'

[07:51] <masak> (the other three solutions don't seem to make this mistake)

[07:52] <buggable> New CPAN upload: P5getpriority-0.0.3.tar.gz by ELIZABETH http://modules.perl6.org/dist/P5getpriority:cpan:ELIZABETH

[07:53] *** mcmillhj left
[07:53] *** Ven`` joined
[07:53] *** Ven`` left
[07:55] <El_Che> jmerelo: a candidate for SO tag: nativecall

[07:55] <El_Che> it's a very specific subset, and there seems to be quite a lot of questions about it

[07:59] *** Ven`` joined
[08:00] <El_Che> ah it exists already

[08:01] * El_Che shuts up

[08:01] *** lizmat left
[08:01] *** athenot_ joined
[08:02] *** athenot left
[08:11] *** vivus-ignis is now known as ignis__away

[08:21] *** mcmillhj joined
[08:21] *** ignis__away is now known as vivus-ignis

[08:22] *** HaraldJoerg joined
[08:26] *** mcmillhj left
[08:26] <TEttinger> masak: apparently .NET regexes are pushdown automata

[08:27] <masak> oh, in what sense?

[08:27] <TEttinger> they have a stack of matches they accrue and can push and pop from it

[08:27] <TEttinger> meant for matching xml

[08:27] <masak> I mean, I'm pretty sure they also do things like capture groups and backreferences

[08:27] <masak> which are things that disqualify PCRE and others from being regular expressions

[08:28] <TEttinger> yeah, since pushdown automata are a step above regular expressions

[08:29] <masak> my point is that as soon as the "bells and whistles" are added, it doesn't make sense to call the things _either_ regular expressions _or_ pushdown automata

[08:29] <TEttinger> https://en.wikipedia.org/wiki/Pushdown_automaton calls it a stack automaton

[08:32] <TEttinger> https://en.wikipedia.org/wiki/Template:Formal_languages_and_grammars

[08:32] <TEttinger> wow there's a lot here

[08:32] <masak> :)

[08:34] <masak> I don't think we're in disagreement, by the way: (a) pushdown automata/stack automata can parse XML, (b) because of the extra features, the things in Perl 5/Perl 6/C# are not finite-state machines or automata

[08:37] *** joe34 joined
[08:37] <TEttinger> http://blog.stevenlevithan.com/archives/balancing-groups

[08:38] <TEttinger> hm

[08:38] <TEttinger> I don't know what would make C# not some form of automaton

[08:38] <TEttinger> since IIRC a turing machine is a kind of automaton

[08:39] <TEttinger> there's just different levels of power

[08:39] *** jsimonet left
[08:40] *** jsimonet joined
[08:40] <TEttinger> perl 6 I think supports parsers as well as regexps? so there's some hazy confusion there

[08:42] <masak> TEttinger: all implementations of regular expressions in mainstream languages add things like \1 backreferences, which make them no longer "pure" regular expressions

[08:42] <TEttinger> yeah, since they can then parse more than a regular language

[08:42] *** mcmillhj joined
[08:43] <masak> yes, exactly

[08:43] <TEttinger> regexps+

[08:43] <masak> it's easy to make the case that adding features makes something more powerful

[08:44] <masak> but there's also a counter-case to be made where adding things makes it no longer the original thing

[08:44] <TEttinger> regexps with spicy flavor

[08:44] <TEttinger> nacho cheese regexps

[08:44] *** joe34 left
[08:44] <masak> notably since a lot of nice properties have been proven about regular expressions. when you add bells and whistles, those nice properties go out the window.

[08:44] <TEttinger> mmm

[08:45] <TEttinger> i hope the partial derivative regex people are getting somewhere

[08:46] <TEttinger> brzozowski method

[08:47] *** ChoHag left
[08:48] *** mcmillhj left
[08:56] *** Kaffe joined
[08:56] *** mcmillhj joined
[08:58] *** ChoHag joined
[09:01] *** mcmillhj left
[09:02] *** athenot_ left
[09:07] *** lalitmee joined
[09:14] *** dct joined
[09:15] *** ChoHag left
[09:27] *** w_richard_w left
[09:30] *** Ven`` left
[09:31] *** wamba left
[09:34] *** noganex left
[09:34] *** athenot joined
[09:35] *** dct left
[09:37] *** rindolf left
[09:38] *** dct joined
[09:39] *** rindolf joined
[09:39] *** aborazmeh joined
[09:40] *** aborazmeh left
[09:40] *** aborazmeh joined
[09:47] *** noganex joined
[09:48] *** zakharyas left
[09:48] *** theovdh joined
[09:50] <theovdh> I am getting loads of "Cannot resolve caller protect(Lock: Block); none of these signatures match:     (Lock:D $: &code, *%_)" when installing rakudo2018.4 on my ubuntu16.04.

[09:51] <theovdh> is that anything to worry about?

[09:54] <El_Che> theovdh: I haven't seen it. How did you install? (there is also a dot release 2018.04.1)

[09:55] <theovdh> I followed the exact instructions on the rakudo site literally.

[09:55] <jnthn> That looks...very broken o.O

[09:55] *** aborazmeh left
[09:56] *** dct left
[09:56] <theovdh> jnthn: and El_Che: noetheless I get "Rakudo Star has been built and installed successfully."

[09:56] <El_Che> theovdh: do you get the errors when building rakudo? when running perl6? when running a specific program?

[09:57] <theovdh> El_Che: running"make install"

[09:57] <El_Che> theovdh: I provide ubuntu 16.04 packages. You could see if they also have the same problem on your system: https://github.com/nxadm/rakudo-pkg

[09:57] <El_Che> the build logs are on travis and I don't get any errors when building on Ubuntu 16.04

[09:58] <El_Che> theovdh: If you just want the pkg instead of the repo for a quick test, it's here: https://github.com/nxadm/rakudo-pkg/releases

[09:59] <El_Che> if my pkg is also broken, it would be a rakudo bug. If it isn't, a bug should be opened for Rakudo Star

[10:00] <El_Che> (I use the 18.04 pkg personally, but every pkg is built on a container of the exact os-release and installed on it)

[10:01] <El_Che> mm, i need to remove the prerelease (it was a docker hub test)

[10:01] <theovdh> El_Che: it could not be a stupid little thing like having to "sudo", could it? Meanwhile i try your pkg

[10:03] <El_Che> theovdh: I haven't built Rakudo Star in a long time. I would expect the build to die earlier if it could not write

[10:03] <El_Che> actually it would die on de ./Configure.pl part if you passed the --gen-moar parameter

[10:03] <theovdh> El_Che: that is what I would expect too. 

[10:04] <El_Che> the Star maintainer stmuk is often on the channel, if he this maybe he'll recognize the error

[10:05] <theovdh> El_Che: I am a *nix noob so probably messing up here, but when I install your package perl -v tells me I am still on 2018.01. 

[10:05] <El_Che> /opt/rakudo-pkg/bin/perl6 -v

[10:06] <El_Che> run /opt/rakudo-pkg/bin/add-perl6-to-path to add it to your path

[10:06] <El_Che> so you can use "perl6" without the full path

[10:06] <El_Che> but for the test it does not matter

[10:09] <El_Che> ok, but now perl6 made your computer explode :)

[10:09] <theovdh> El_Che: Boooooom, Just kidding. But it still tells me its on 2018.01

[10:10] *** brabo joined
[10:10] <El_Che> "/opt/rakudo-pkg/bin/perl6 -v" tells you 2018.01?

[10:11] <El_Che> if you don't set the PATH, you need the complete path with the command

[10:11] <theovdh> El_Che: no, sorry. it says 2018.04.01. 

[10:11] <El_Che> that's the one

[10:11] *** ChoHag joined
[10:11] *** brabo left
[10:12] <El_Che> /opt/rakudo-pkg/bin/perl6 your_script.p6

[10:12] <El_Che> if you cant to use that perl6 to run a script

[10:12] <El_Che> read the README for instructions about PATH and zef as a user

[10:13] <El_Che> bbl

[10:14] <theovdh> El_Che: will do. NB there is no .\COnfigure.pl in the description at https://rakudo.org/files/star/source

[10:20] *** vivus-ignis is now known as ignis__away

[10:23] *** darutoko left
[10:25] <El_Che> "perl Configure.pl --backend=moar --gen-moar"

[10:28] <theovdh> El_Che: Oh yes. I overlooked it. But I had applied it in the appropriate order the first time.

[10:32] <donpdonp> intuition fail: my $c = {host: "host"};  $c.host => No such method 'host'. $c['host'] => Cannot convert string to number

[10:34] <moritz> bad javascript, no cookie :)

[10:39] *** ignis__away is now known as vivus-ignis

[10:42] <donpdonp> my $c = host => "foo"; $c{"host"} => "foo" #tricksy

[10:44] <moritz> Pair, not tricksy :)

[10:54] *** wamba joined
[11:09] *** Ven`` joined
[11:10] <Ven``> pmurias: just wanted to say, the idea of a truffle backend sounds absolutely amazing

[11:13] *** eliasr joined
[11:14] *** markong joined
[11:14] *** abraxxa left
[11:18] *** lalitmee left
[11:31] *** itaipu joined
[11:43] *** jmerelo left
[11:45] *** sena_kun joined
[11:46] *** xinming_ left
[11:46] *** xinming joined
[11:47] <theovdh> El_Che: and jnthn: retried make install after cleaning up my $PATH. Removing paths to older rakudos (2018.1) did the trick.

[11:48] <theovdh>  ... but will continue to use the 2018.04.01 package

[12:00] *** Ven`` left
[12:03] <Ulti> win 4

[12:03] <Ulti> noooooo

[12:03] <Ulti> why is it always in here I screw up

[12:04] <moritz> because all others have thrown you out already? :D

[12:05] <masak> ouch -- harsh :P

[12:05] *** Ven`` joined
[12:07] * moritz hopes that Ulti takes no offense, because it really was meant only as a joke

[12:11] *** vivus-ignis is now known as ignis__away

[12:15] *** Ven`` left
[12:15] *** emeric left
[12:19] *** Ven`` joined
[12:20] *** raynold left
[12:23] *** jmerelo joined
[12:24] <Ulti> maybe you're all just more comfortable with failure >:P

[12:24] <Ulti> #nooffense

[12:26] *** ignis__away is now known as vivus-ignis

[12:27] <El_Che> theovdh: there is a repo so you get updates automatically

[12:27] <El_Che> theovdh: good to hear that a make clean would have probably have worked and that's not a Star bug!

[12:30] *** darutoko joined
[12:31] *** grumble left
[12:31] *** grumble joined
[12:38] <Geth> ¬¶ doc: ebc0276fcf | (Will "Coke" Coleda)++ | xt/words.pws

[12:38] <Geth> ¬¶ doc: learn new word

[12:38] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/ebc0276fcf

[12:38] <Geth> ¬¶ doc: 53b5986bdb | (Will "Coke" Coleda)++ | doc/Language/regexes.pod6

[12:38] <Geth> ¬¶ doc: whitespace

[12:38] <synopsebot> Link: https://doc.perl6.org/language/regexes

[12:38] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/53b5986bdb

[12:39] <masak> Ulti: dunno about being _comfortable_ with failure, but being able to recover from failure is pretty central to the success rate of any enterprise except the most trivial :)

[12:39] *** mcmillhj joined
[12:39] *** Ven`` left
[12:39] *** mcmillhj left
[12:39] <Ulti> yeah I agree, but being comfortable with it is more about the rate of it happening hence the *burn*

[12:40] <Ulti> failure is one of those odd words, people who have a problem with it have essentially a different meaning to everyone else

[12:41] *** scobra joined
[12:42] <scobra> hello, wondering if there is any documentation on the --optimize flag?

[12:42] *** mcmillhj joined
[12:44] <jmerelo> scobra: I've looked up in the doc repo, and there is apparently none. 

[12:44] *** Ven`` joined
[12:44] <jmerelo> scobra: any issue will be welcome and addressed ASAP

[12:45] <scobra> no issue, was just considering if there are flags to disable assertions, or perhaps target PRE/POST phasers to increase runtime speed

[12:46] <jmerelo> scobra: well, this is what the Synopsis says... http://design.perl6.org/S19.html#Options_and_Values

[12:47] <jmerelo> scobra: nothing about optimization and/or phasers...

[12:47] <jmerelo> scobra: there's this on running from the command line https://github.com/rakudo/rakudo/wiki/Running-rakudo-from-the-command-line

[12:48] <jmerelo> scobra: not much there either...

[12:48] <scobra> hmm, alright

[12:50] <jmerelo> scobra: StackOverflow, as always, might be of help.

[12:50] <jmerelo> scobra: but I take note and will try to add some info...

[12:51] <scobra> I'm digging around in rakudo to have a look

[12:51] <scobra> it's not critical for me, I've come from python whose -O disables assert an so on, so was more curious than anything

[12:52] <jmerelo> scobra: whatever you find, feel free to share :-)

[12:52] <scobra> sure thing

[12:54] *** jmerelo left
[12:56] <mcmillhj> is there a way to parameterize return type constraints, i.e. not only does f() return an Array but an Array of Str? 

[12:58] <cono> Array[Str]

[12:59] <masak> m: sub foo(--> Array[Str]) { return ["a", "b"] }; say foo()

[12:59] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´Type check failed for return value; expected Array[Str] but got Array ($["a", "b"])‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:59] <masak> mcmillhj: for the above reason, I wouldn't recommend doing that

[12:59] <mcmillhj> masak: yeah, that is what I encountered when I tried Array[Str] and thus came here to ask about it 

[12:59] <masak> m: sub foo(--> Array[Str]) { return Array[Str].new(["a", "b"]) }; say foo()

[12:59] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´[a b]‚ê§¬ª

[13:00] <masak> ^ this works, for which I'm almost completely sure lizmat++ deserves praise somehow

[13:00] <mcmillhj> I just had to update the type signature of the array I was returning to match. thanks masak 

[13:00] <masak> mcmillhj: but the situation with typed containers in Perl 6 is a little bit sad, essentially because the types are nominal, but people have structural expectations

[13:00] <masak> or, at least I do :)

[13:01] <masak> "structural" as in "if it's an Array and it's full of Str values, then it's an Array[Str]"

[13:01] <masak> fun fact: I was kvetching about this even before I knew about TypeScript

[13:01] <mcmillhj> yeah, I had expected the same thing. I wouldn't think I would need both my Str @array; and also --> Array[Str] to make it work 

[13:01] <masak> right, exactly

[13:02] <masak> but that's what a nominal type system gives you

[13:03] <masak> m: sub foo(--> Array[Str]) { my Str @array; @array.push("a", "b"); return @array }; say foo()

[13:03] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´[a b]‚ê§¬ª

[13:03] <masak> that apparently works, too

[13:08] <masak> m: sub foo(--> Array[Str]) { }; say foo()

[13:08] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´Nil‚ê§¬ª

[13:08] <masak> m: sub foo(--> Array[Str]) { return }; say foo()

[13:08] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´Nil‚ê§¬ª

[13:08] <masak> m: say Nil ~~ Array[Str]

[13:08] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´False‚ê§¬ª

[13:08] * masak .oO( all types are special, but some types are more special than others )

[13:08] <timotimo> at some point maybe we'll have sub test(--> Str @foo) { @foo = 1, 2, 3 }

[13:09] <timotimo> yeah, Failure and Nil go through any return typecheck

[13:10] <masak> timotimo: what do you mean your `sub test` would do? typefail? coerce?

[13:10] *** AlexDaniel joined
[13:12] *** Herby_ joined
[13:12] <Herby_> \o

[13:13] <masak> ahoy, Herby_ o/

[13:15] <timotimo> the @foo inside the sub would already be an Array[Str]

[13:15] <timotimo> so you wouldn't have to declare it again, DRY and so on

[13:15] <masak> right, but then you go and assign Ints to it...

[13:15] <masak> ...maybe that wasn't part of your point? :)

[13:15] <timotimo> oh, haha

[13:16] <timotimo> yes, it wasn't

[13:16] <timotimo> i wasn't wearing my glasses or something :P

[13:16] <masak> clearly you are in the target group for this kind of typechecking :P :P :P

[13:16] *** domidumont joined
[13:17] * masak .oO( "ahem. and here we see the use of this new feature, ladies and butterflies" )

[13:18] <mcmillhj> m: my %dictionary = (a => <b c d>, e => <f g h>); for %dictionary<a> -> $letter { say $letter; }

[13:18] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´(b c d)‚ê§¬ª

[13:19] <mcmillhj> ^ how come this doesn't iterate over %dictionary<a>? 

[13:19] *** wamba left
[13:19] <masak> m: my %dictionary = (a => <b c d>, e => <f g h>); for %dictionary<a> -> $letter { say $letter.^name; }

[13:19] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´List‚ê§¬ª

[13:20] <masak> m: my %dictionary = (a => <b c d>, e => <f g h>); for @(%dictionary<a>) -> $letter { say $letter }

[13:20] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´b‚ê§c‚ê§d‚ê§¬ª

[13:20] <jnthn> Because values of a Hash are Scalar containers (and thus items)

[13:20] <mcmillhj> oh interesting, I thought for some reason that dereferencing was no longer required 

[13:20] <masak> m: my %dictionary = (a => <b c d>, e => <f g h>); for @%dictionary<a> -> $letter { say $letter }

[13:20] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´Type Seq does not support associative indexing.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:20] <mcmillhj> I am very used to @{ $dictionary{a} } however. 

[13:21] <masak> mcmillhj: it wasn't always required, IIRC. changed with the Big List Refactor.

[13:21] <masak> (or was it "Grand List Refactor". probably was.)

[13:21] <jnthn> Method calls and indexing operators automatically dereference

[13:22] <[Coke]> masak: hard to remember, it was a BLR.

[13:22] <jnthn> m: my %dictionary = (a => <b c d>, e => <f g h>); for %dictionary<a><> -> $letter { say $letter }

[13:22] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´b‚ê§c‚ê§d‚ê§¬ª

[13:22] <mcmillhj> jnthn: hash lookups don't count as indexing? 

[13:23] <jnthn> Yes, that's why you can write `%dictionary<a>[0]` and it doesn't matter if %dictionary<a> has a Scalar container there or not, it'll work

[13:23] *** domidumont left
[13:23] <jnthn> I tend to prefer the trailing <> over wrapping the whole thing up in @(...), but timtowtdi :)

[13:24] *** domidumont joined
[13:30] *** abraxxa joined
[13:31] *** domidumont left
[13:35] *** abraxxa left
[13:46] *** skids joined
[13:51] *** abraxxa joined
[13:53] *** abraxxa left
[14:01] *** atweiden-air joined
[14:02] <atweiden-air> question about ENTER phasers

[14:02] <atweiden-air> why does ENTER fire twice and LEAVE fire once here: http://ix.io/1a2E

[14:02] <atweiden-air> it seems the only way to prevent this behavior is to not use ENTER, but i don't get why that is

[14:10] *** vivus-ignis is now known as ignis__away

[14:10] *** ignis__away is now known as vivus-ignis

[14:11] *** epony left
[14:11] *** epony joined
[14:13] *** Zoffix joined
[14:14] <Zoffix> atweiden-air: you can prevent the behaviour by wrapping the body of the proto into another block so only when THAT is entered that the phasers get triggered

[14:15] *** lucasb joined
[14:16] *** kurahaupo left
[14:17] <atweiden-air> Zoffix: cool, works

[14:17] <atweiden-air> but curious why ENTER is firing twice, but LEAVE only once?

[14:17] <El_Che> atweiden-air: we're the Hotel California of the programming languages

[14:17] <Zoffix> Not sure yet. Still playing with the code.

[14:18] <atweiden-air> lol

[14:22] <Zoffix> releases: class { method z { ENTER say "[ENTER]"; say "In the method"; } }.z;

[14:22] <committable6> Zoffix, ¬¶releases (29 commits): ¬´[ENTER]‚ê§[ENTER]‚ê§In the method‚ê§¬ª

[14:26] <Zoffix> atweiden-air: looks like a bug. In QAST I see two calls to ENTER inserted.

[14:26] *** lalitmee joined
[14:27] *** lalitmee left
[14:27] *** lalitmee joined
[14:28] <Zoffix> .oO( this sort of thing initial set of tests for a feature can easily find and eliminate -_- )

[14:29] *** lalitmee left
[14:29] *** lalitmee joined
[14:30] <Zoffix> Filed as R#1815

[14:30] <synopsebot> R#1815 [open]: https://github.com/rakudo/rakudo/issues/1815 ENTER fires twice in some(?) methods

[14:34] <Ulti> are there any docs/tutes anywhere for creating binary wrapping modules? specifically where you want to bundle and build the shared library too?

[14:35] <Ulti> from the couple of modules I've looked at they all roll their own a bit on how things work... this looks like the most advanced for finding libs already installed at least https://github.com/perl6/gtk-simple/blob/master/lib/GTK/Simple/NativeLib.pm6

[14:36] <jnthn> Ulti: Hm, I think LibraryMake perhaps

[14:36] <jnthn> Pretty sure the native SHA1 module uses that

[14:36] <Ulti> yeah for the building the library I've got https://github.com/retupmoca/P6-LibraryMake down on the list of things

[14:36] <Ulti> ahh ok cool I will take a look

[14:37] <Ulti> I guess another question is does zef assume a recursive clone?

[14:38] <lucasb> m: ENTER { 42 }

[14:38] <camelia> rakudo-moar febcb9177: ( no output )

[14:38] <lucasb> m: LEAVE { 42 }

[14:38] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant integer 42 in sink context (line 1)‚ê§¬ª

[14:38] <lucasb> ^^ maybe other phasers differs with regard to useless use warnings?

[14:39] <jnthn> lucasb: Some phasers keep their results around, others not. ENTER is one of the ones that lets you do stuff like `say now - ENTER now`

[14:40] <jnthn> So I suspect it's a question of `LEAVE` knowing its value is always sunk, and `ENTER` not knowing so immediately

[14:42] <lucasb> understood, thanks

[14:44] *** domidumont joined
[14:44] *** khw joined
[14:48] *** Zoffix left
[14:54] *** vivus-ignis is now known as ignis__away

[14:54] *** mcmillhj left
[14:57] *** molaf joined
[14:58] *** ignis__away is now known as vivus-ignis

[15:02] *** araraloren joined
[15:03] *** kurahaupo joined
[15:05] *** lalitmee left
[15:08] *** mcmillhj joined
[15:12] *** mcmillhj left
[15:14] *** Ven`` left
[15:14] *** lalitmee joined
[15:17] *** araraloren left
[15:17] *** araraloren joined
[15:17] *** robertle left
[15:18] *** Sgeo_ joined
[15:20] *** Sgeo__ left
[15:24] *** mcmillhj joined
[15:24] *** mcmillhj left
[15:26] *** vivus-ignis is now known as ignis__away

[15:27] *** scobra left
[15:31] <perlawhirl> quick question... given $foo is a Scalar List... is there any semantic difference between `for $foo[]` and `for $foo<>`

[15:32] *** ignis__away is now known as vivus-ignis

[15:36] *** jmerelo joined
[15:36] *** mcmillhj joined
[15:36] <Ulti> im sort of surprised $foo<> even works without error

[15:37] <Ulti> given the moment you put some kind of index in there it will asplode

[15:38] *** cgfbee left
[15:39] *** atweiden-air left
[15:40] <lucasb> I was surprised too. Even $foo{} works

[15:41] <lucasb> seems like everything can be zen-sliced

[15:41] <lucasb> m: say 42[], 'oh'{}

[15:41] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´42oh‚ê§¬ª

[15:42] *** vivus-ignis is now known as ignis__away

[15:43] <Voldenet> I prefer not doing for $foo[] but @$foo instead

[15:43] <Ulti> the issue is the type you might expect doesnt come out the other end

[15:43] <Voldenet> more perlish

[15:43] <Ulti> dunno thats too close to the Perl 5 for my liking

[15:44] <lucasb> "returns the subscripted object itself" it's documented 

[15:44] <Voldenet> I consider perl5 pretty perlish ;D

[15:45] * kurahaupo survived Perl4

[15:46] *** jmerelo left
[15:46] *** cgfbee joined
[15:47] <Voldenet> perl4 wasn't as far from perl5 as perl6 though

[15:51] <donpdonp> moritz: so what *is* $c, given  my $c = {host: "host"};

[15:52] <jnthn> m: my $c = {host: "host"}; say $c()

[15:52] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´host‚ê§¬ª

[15:52] <mcmillhj> Where should initialization things be put in a class in Perl6? i.e. I have an attribute that is passed in called $.filename, a private attribute %!dictionary that is populated by calling create-dictionary($.filename). Where should I put such initialization?

[15:53] <jnthn> It's a closure with a labelled statement host: that returns a string.

[15:53] <jnthn> Thus calling the closure returns the string.

[15:53] <donpdonp> hmm. o^O. i'll have to look into labeled statements

[15:53] <jnthn> A label is used in things like nested loops to say which one to break out of

[15:54] <donpdonp> so its really nothing at al like a js object literal, it just happened to look like one

[15:54] <jnthn> I hadn't noticed before this this is a fun little trap for anyone who writes a JavaScript literal in Perl 6 :)

[15:54] <Geth> ¬¶ doc: 360e50fc15 | (Will "Coke" Coleda)++ | doc/Language/classtut.pod6

[15:54] <synopsebot> Link: https://doc.perl6.org/language/classtut

[15:54] <Geth> ¬¶ doc: fix typo

[15:54] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/360e50fc15

[15:54] <Geth> ¬¶ doc: be46025756 | (Will "Coke" Coleda)++ | xt/words.pws

[15:54] <Geth> ¬¶ doc: learn new words

[15:54] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/be46025756

[15:54] <donpdonp> jhthn++

[15:54] <jnthn> No, it's valid syntax that means something entirely different :)

[15:55] <jnthn> m: my $c = { foo: 1, bar: 2 }

[15:55] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Confused‚ê§at <tmp>:1‚ê§------> 3my $c = { foo: 1, bar:7‚èè5 2 }‚ê§    expecting any of:‚ê§        colon pair‚ê§¬ª

[15:55] <jnthn> Note that it's also a syntax error if there's more than one element, however

[15:55] *** ignis__away is now known as vivus-ignis

[15:56] <timotimo> fun, Nim has a for 1 .. 2 and for 1 ..< 2 syntax

[15:56] <donpdonp> m: my $c = a => "a", b => "b"

[15:56] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "b => \"b\"" in sink context (lines 1, 1)‚ê§¬ª

[15:57] <timotimo> https://narimiran.github.io/2018/05/10/python-numpy-nim.html - someone want to try to rewrite this for perl6, and maybe mostly-nqp perl6 (or straight-up nqp) to see how well we do?

[15:58] <donpdonp> what type of thing is the unquoted ab in my $c = ab => "z"; $c{"ab"} => "z"

[15:58] * timotimo AFK again

[15:59] <moritz> donpdonp: a string

[15:59] <donpdonp> o^O

[15:59] <moritz> it's the => that automatically quotes it

[16:01] *** lucasb left
[16:01] <donpdonp> perl6 certainly retains the 'there's more than one way to do it' motto. my $d = :a<b>, :c<d> => (a => b c => d)

[16:04] <donpdonp> m: my $e = sub {}; my $d = :a<b>, :b(1), :c(e)

[16:04] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of ":c(e)" in sink context (lines 1, 1)‚ê§Useless use of ":b(1)" in sink context (lines 1, 1)‚ê§¬ª

[16:06] *** vivus-ignis is now known as ignis__away

[16:07] <donpdonp> is camelia out of date? 2018.04.1 returns (a => b b => 1 c => 2.718281828459045)

[16:07] <donpdonp> where i was going to ask where the 2.71... came from

[16:07] <moritz> e?

[16:07] <moritz> m: say e

[16:07] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´2.718281828459045‚ê§¬ª

[16:07] <moritz> the camelia version is 2018.04.1-70-gfebcb91

[16:08] <moritz> Euler's number etc.

[16:11] <donpdonp> lol! i get it.

[16:11] *** Sgeo_ left
[16:12] <donpdonp> i would not have guessed any global namespace single letter vars would be defined

[16:12] *** Sgeo_ joined
[16:12] <donpdonp> m: say i

[16:12] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´0+1i‚ê§¬ª

[16:14] *** ignis__away is now known as vivus-ignis

[16:15] <jnthn> m: say œÄ

[16:15] <camelia> rakudo-moar febcb9177: OUTPUT: ¬´3.141592653589793‚ê§¬ª

[16:15] <jnthn> They're constants rather than variables, though

[16:15] <moritz> donpdonp: it's not so bad, because variables are not in the same namespace (through the sigils)

[16:17] <donpdonp> ah i see.

[16:20] *** mcmillhj left
[16:34] *** domidumont left
[16:36] *** mcmillhj joined
[16:41] *** mcmillhj left
[16:42] *** vivus-ignis is now known as ignis__away

[16:50] *** lizmat joined
[16:55] *** pilne joined
[16:57] *** mcmillhj joined
[16:58] *** mcmillhj left
[16:58] *** ignis__away is now known as vivus-ignis

[16:58] *** lizmat left
[17:00] *** ExtraCrispy joined
[17:00] *** lizmat joined
[17:01] *** araraloren left
[17:02] *** mcmillhj joined
[17:08] *** andrzejku left
[17:14] *** lasse_ joined
[17:19] <lasse_> Hi I'm trying to compile star 2018.04 on openSUSE tumbleweed. It starts to loop last, message I see is " testing LWP". any suggestion what Im doing wrong?

[17:22] *** gregf_ joined
[17:22] *** Zoffix joined
[17:23] <Zoffix> lasse_: is the "testing LWP" repeating? Can you pastebin the full output?

[17:24] <Zoffix> lasse_: also, if you don't wanna bother debugging it, you could install an openSUSE package and then just install only the modules you need instead of whatever comes with Rakudo Star https://nxadm.github.io/rakudo-pkg/

[17:24] <Zoffix> (the compiler-only package)

[17:25] *** vivus-ignis is now known as ignis__away

[17:26] *** ignis__away is now known as vivus-ignis

[17:29] *** itaipu left
[17:30] <lasse_> ===> Testing: LWP::Simple:ver<0.101>:auth<Cosimo Streppone>

[17:30] <lasse_> after that nothing more

[17:32] <lasse_> yes I can try tomorrow. now I have to finish for the day

[17:32] <Zoffix> lasse_: OK. If you can, report the problem so people could take a closer look at it: https://github.com/rakudo/star/

[17:32] <lasse_> try to install the openSUSE package that is

[17:33] <lasse_> yes i report tomorrow

[17:33] *** xinming_ joined
[17:33] <Zoffix> Thanks.

[17:33] *** lookatme left
[17:34] *** lookatme joined
[17:36] *** xinming left
[17:36] *** Zoffix left
[17:41] *** st_elmo joined
[17:44] <Ulti> mcmillhj: you might want to check out https://docs.perl6.org/language/objects#Object_Construction

[17:44] <Ulti> submethod BUILD is the main thing you want to check out

[17:45] *** itaipu joined
[17:52] *** vivus-ignis left
[17:56] *** greppable6 joined
[17:57] *** vivus-ignis joined
[17:57] *** espadrine joined
[18:00] <mcmillhj> Ulti: I figured it out eventually :) I was looking at the Classes and Objects doc and eventually found the one you linked

[18:00] *** lasse_ left
[18:02] <buggable> New CPAN upload: FanFou-0.0.1.tar.gz by FANFAN https://cpan.metacpan.org/authors/id/F/FA/FANFAN/Perl6/FanFou-0.0.1.tar.gz

[18:12] *** itaipu left
[18:12] <Geth> ¬¶ ecosystem: ohmycloud++ created pull request #395: Add FanFou to ecosystem

[18:12] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/pull/395

[18:13] *** wamba joined
[18:23] *** sauvin left
[18:27] <Geth> ¬¶ ecosystem: c7824a64d5 | ohmycloud++ (committed by Zoffix Znet) | META.list

[18:27] <Geth> ¬¶ ecosystem: Add FanFou to ecosystem (#395)

[18:27] <Geth> ¬¶ ecosystem: 

[18:27] <Geth> ¬¶ ecosystem: Add a module called FanFou to ecosystem

[18:27] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/c7824a64d5

[18:31] *** vivus-ignis is now known as ignis__away

[18:36] *** redhands joined
[18:36] *** ignis__away is now known as vivus-ignis

[18:41] *** robertle joined
[18:47] *** itaipu joined
[18:52] *** zachk joined
[18:52] *** ExtraCrispy left
[18:56] *** mcmillhj left
[18:59] *** lalitmee left
[19:00] *** lalitmee joined
[19:01] *** vivus-ignis is now known as ignis__away

[19:01] <stmuk> lasse_: I think one of the new test sites for LWP::Simple is unreliable

[19:03] *** lalitmee left
[19:03] *** lalitmee joined
[19:05] <rindolf> hi all

[19:05] <stmuk> you could try running with NO_NETWORK_TESTING=1

[19:06] *** mcmillhj joined
[19:06] <stmuk> if fact star probably should and will do this

[19:08] *** lalitmee left
[19:09] *** lalitmee joined
[19:10] *** zachk left
[19:10] *** zachk joined
[19:13] *** lalitmee left
[19:13] *** lalitmee joined
[19:14] *** mcmillhj left
[19:15] *** darutoko left
[19:18] *** ignis__away is now known as vivus-ignis

[19:21] *** lalitmee left
[19:21] *** lalitmee joined
[19:25] *** lalitmee left
[19:25] *** mcmillhj joined
[19:25] *** lalitmee joined
[19:27] *** st_elmo left
[19:30] *** lalitmee left
[19:30] *** lalitmee joined
[19:31] *** lalitmee left
[19:31] *** lalitmee joined
[19:33] *** lalitmee left
[19:50] *** athenot left
[19:52] *** vivus-ignis is now known as ignis__away

[19:53] *** nolan_ joined
[19:54] <nolan_> P E R L

[19:57] <nolan_> is there anybody out there ?

[19:58] <skids> o/

[19:58] <nolan_> o

[19:59] <nolan_> does anyone use perl6 ?

[19:59] <moritz> no, we just all pretend to

[19:59] <nolan_> sweet

[19:59] <nolan_> what type of applications and such do you all pretend to write ?

[20:00] <nolan_> i am an aspiring young perl5 man. been thinking on getting into perl6 but im still trying to figure out how/where i'd use it

[20:00] <moritz> mostly command line scripts, occasional small web services

[20:00] <moritz> mostly when the grammars are useful

[20:01] <nolan_> oh really? why grammar in particular?

[20:02] <masak> I try to use Perl 6 in as many new ways as possible

[20:02] <nolan_> i work at a cPanel based webhosting company

[20:02] <nolan_> so we use perl5 all the time

[20:02] <avuserow> I'm almost done writing a password manager in perl6 and a small CLI music player that I use daily.

[20:03] <nolan_> it made me sad today cuz i do a do a bunch of datamining across our server farm

[20:03] <nolan_> and apparently we only have 1291 users with custom perl modules installed via cpanel

[20:04] <nolan_> made me start to wonder if perl was really dying

[20:05] <nolan_> i like perl5 cuz it comes default with most linux distros

[20:05] <stmuk> perl never really solved the shared hosting problem as well as php did TBH

[20:05] <moritz> nolan_: because the grammars are really awesome for parsing test

[20:06] <nolan_> what type of parsing capabilities does perl6 have?

[20:06] <nolan_> i love PCRE in perl5

[20:06] <nolan_> but not sure i'd parse grammar with PCRE

[20:06] <nolan_> so im guessing perl6 has something newer?

[20:07] *** ignis__away is now known as vivus-ignis

[20:07] <stmuk> PCRE is an external perl 5 regexp like library not directly perl 5

[20:08] <nolan_> also, what is the compatibility of perl6 like?

[20:08] <nolan_> like how portable is it

[20:08] <stmuk> perl 6 grammars are not only more powerful but probably more readable than perl 5 regexps

[20:09] <nolan_> ohh grammars is the name of the thing

[20:09] <stmuk> https://docs.perl6.org/language/grammar_tutorial

[20:10] <nolan_> grammars look cool

[20:10] <nolan_> do any other languages have similar capabilities?

[20:11] <nolan_> the more i read about it the more exciting it is

[20:12] <nolan_> i used to search PHP files with regular expressions

[20:12] <nolan_> it got really uglyl

[20:12] <nolan_> stuff like this:

[20:12] <nolan_> m%\Q$function\E(?>\s++|//.*+(?=[\r\n])|/\*[\s\S]*?\*/|#.*+(?=[\r\n]))*+(?P<parentheses>\((?>(?>\\.|<<<(?>\x22|\x27)?+([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*+)(?>\x22|\x27)?+(?=[\r\n])[\s\S]*?^\g{-1};|/(?!\*|/)|//.*+(?=[\r\n])|/\*[\s\S]*?\*/|\x22(?>(?>\\.)++|[^\x22\\]++)*?\x22|\*(?!/)|\x27(?>(?>\\.)++|[^\x27\\]++)*?\x27|\[(?>(?>\\.)++|[^]\\]++)*?\]|#.*+(?=[\r\n])|[^()])++|(?&parentheses))*\))%gm

[20:14] <nolan_> but yeah im not sure i've seen something similar to grammars in other languages. is this exclusively a perl6 thing?

[20:14] <[Coke]> Until someone steals it.

[20:15] *** mcmillhj left
[20:16] <El_Che> Every artist is a cannibal, every poet is a thief

[20:16] <nolan_> cool stuff. how portable is perl6 ?

[20:16] <nolan_> what systems does it run on? etc

[20:17] <nolan_> one of the things i liked about perl5 was as long as you stayed out of a cryptic shorthands or experimental syntaxes, it's largely as portable as a shell script

[20:18] <stmuk> all three common systems 

[20:18] <nolan_> windows, linux, mac ?

[20:19] <stmuk> yes and most modern UNIX like systems

[20:19] <El_Che> potentially everywhere where libuv runs

[20:19] <El_Che> some people have built is succesfully on the bsds and solaris

[20:20] *** mcmillhj joined
[20:20] <nolan_> well cool

[20:20] <[Coke]> porters welcome of course. (wonder if we had any guidelines for porters)

[20:20] <stmuk> actually I was just looking at https://github.com/libuv/libuv/issues/983 and wondering if anyone had tried AIX :)

[20:21] <nolan_> the grammars would probably come in handy for automated malware detection

[20:23] <nolan_> what do all of you guys do for work?

[20:24] *** mcmillhj left
[20:24] <stmuk> I would guess the usual perlish mixture of sys admin and programming

[20:25] <[Coke]> AIX. "That's a name I've not heard in a long time"

[20:25] *** vivus-ignis is now known as ignis__away

[20:26] <El_Che> [Coke]: We have an AIX team whois main app run on a Linux appliance: )

[20:26] <El_Che> :)

[20:26] <nolan_> yawl are a bunch of nerds

[20:26] <nolan_> loljk

[20:26] <El_Che> i see ljk and I think of vim

[20:27] <nolan_> yeah, we're nerds. confirmed.

[20:28] <[Coke]> last time I worked on AIX, I was also working on xenix, and was using Perl 4

[20:28] <[Coke]> (nerds) Thank you, that's the nicest thing anyone's said to me all day!

[20:28] <nolan_> lol

[20:28] <nolan_> perl4 sounds like dark ages

[20:29] <stmuk> if El_Che knows AIX people maybe he should be the AIX porter? ;)

[20:29] <nolan_> when was perl4's release date?

[20:30] <El_Che> last time I worked with AIX I went to a 2 week holiday in Amsterdam. A manager wanted that everyone could be on call for aix (I was mainly working with Solaris). We explained him that it didn't work like that, but he didn't want to listen. I had a lot of fun in IBM/Amsterdam :)

[20:30] <El_Che> :)

[20:30] <El_Che> it was btw next the building where the last YAPC::EU was held

[20:30] <stmuk>  Larry   4.000          1991-Mar-21

[20:31] <nolan_> yikes. i wasn't even born yet

[20:31] <El_Che> old geeks

[20:31] *** sena_kun left
[20:32] *** ignis__away is now known as vivus-ignis

[20:34] *** nolan_ left
[20:35] *** mcmillhj joined
[20:39] <stmuk> http://www.polarhome.com/ appears to have low cost AIX shell accounts if anyone is braver than me

[20:40] *** mcmillhj left
[20:46] *** noganex left
[20:48] *** comborico1611 joined
[20:53] *** vivus-ignis is now known as ignis__away

[20:55] *** mcmillhj joined
[20:59] *** mcmillhj left
[21:00] *** lancew joined
[21:05] *** ignis__away is now known as vivus-ignis

[21:10] *** mcmillhj joined
[21:19] *** mcmillhj left
[21:25] *** vivus-ignis is now known as ignis__away

[21:25] *** ignis__away is now known as vivus-ignis

[21:26] *** skids left
[21:30] *** noganex joined
[21:30] *** wamba left
[21:31] *** vivus-ignis left
[21:40] *** robertle left
[21:41] <timotimo> Ulti: could you recommend TWEAK rather than BUILD? :)

[21:52] *** mcmillhj joined
[21:57] *** mcmillhj left
[22:00] *** theovdh left
[22:01] *** vike1 left
[22:02] *** vike1 joined
[22:08] *** espadrine left
[22:09] *** mcmillhj joined
[22:14] *** mcmillhj left
[22:22] *** lancew left
[22:25] *** redhands left
[22:25] *** mcmillhj joined
[22:29] *** mcmillhj left
[22:47] *** rindolf left
[22:54] *** mcmillhj joined
[22:59] *** mcmillhj left
[23:10] *** itaipu left
[23:20] *** mcmillhj joined
[23:25] *** mcmillhj left
[23:30] *** skids joined
[23:47] *** zachk left
[23:54] *** comborico1611 left
