[00:07] *** rindolf left
[00:09] *** w_richard_w joined
[00:09] *** SqrtNegI_ left
[00:10] *** p6bannerbot sets mode: +v w_richard_w

[00:10] *** w_richard_w left
[00:14] *** lizmat left
[00:40] *** vike left
[00:43] *** vike joined
[00:43] *** p6bannerbot sets mode: +v vike

[00:49] *** Actualeyes joined
[00:50] *** p6bannerbot sets mode: +v Actualeyes

[01:12] *** leont left
[01:30] *** cognominal-p6 joined
[01:30] *** p6bannerbot sets mode: +v cognominal-p6

[01:34] *** cognominal-p6 left
[01:34] *** cognominal-p6 joined
[01:35] *** p6bannerbot sets mode: +v cognominal-p6

[01:51] *** lizmat joined
[01:51] *** p6bannerbot sets mode: +v lizmat

[01:53] *** cognominal-p6 left
[01:57] *** nebuchadnezzar left
[01:57] *** nebuchadnezzar joined
[01:58] *** p6bannerbot sets mode: +v nebuchadnezzar

[02:01] *** ryn1x joined
[02:02] *** p6bannerbot sets mode: +v ryn1x

[02:05] <Xliff> SmokeMachine: If you find one, please let me know. I'm in the US. We're in the same boat. :(

[02:06] <Xliff> I've lived with mine for almost 2 years, and am hoping saner heads win the next election.

[02:06] <Xliff> This week's Doctor Who had a pretty funny riff on the Trum type.

[02:08] <moony> I seem to remember someone telling me about some issue with the composekey that occur. Now i can't get the compose key to function right sometimes in GTK apps. Anyone know the solution?

[02:09] <Xliff> moony: Try this...

[02:09] <Xliff> One sec

[02:10] *** molaf left
[02:11] *** finanalyst joined
[02:11] <Xliff> moony: Prefix the app you want with this and see if it works: GTK_IM_MODULE=xim

[02:12] *** p6bannerbot sets mode: +v finanalyst

[02:17] <moony> ⬚⬚⬚. Works. Thanks

[02:17] <moony> ⚛!

[02:19] *** canw joined
[02:20] *** p6bannerbot sets mode: +v canw

[02:22] *** canw left
[02:23] *** molaf joined
[02:23] *** [particle]1 left
[02:23] *** p6bannerbot sets mode: +v molaf

[02:24] *** [particle] joined
[02:24] <Xliff> moony: :)

[02:25] *** p6bannerbot sets mode: +v [particle]

[02:28] <ryn1x> Is there a more concise way to write this?:    with $chan.poll { if $_ { print $_ } }

[02:29] <Juerd> if $chan.poll -> $x { print $x }

[02:30] <ryn1x> ah that works. thanks!

[02:31] <ryn1x> I was trying this:    if $chan.poll{ print $_ }

[02:31] <Juerd> "if" doesn't set the topic like "with" does

[02:32] <Juerd> You could do so explicitly: if $chan.poll -> $_ { print $_ }

[02:33] <Juerd> Or, when using print as a method: if $chan.poll -> $_ { .print }

[02:33] <Juerd> But personally I prefer setting a variable with a meaningful name. I used $x in this example because I don't know what kind of thing your channel would provide.

[02:35] <Juerd> Also note that if $chan.poll{ print $_ } is missing whitespace after "poll", turning {} into a postcircumfix operator instead of if's block. 

[02:35] <ryn1x> ah yeah... that was just a transcrption error. it is working in the real code.

[02:35] <ryn1x> with a space

[02:38] <ryn1x> I am trying to figure out IPC with a python program using stdin and stdout. I have the Supply from the Proc::Async being tapped to a channel. Not sure if this is a good idea though... Playing around with reading and reacting to what is in the channel now...

[02:42] *** avar left
[02:42] *** avar joined
[02:42] *** p6bannerbot sets mode: +v avar

[02:43] *** nebuchadnezzar left
[02:43] *** [particle]1 joined
[02:43] *** [particle] left
[02:44] *** p6bannerbot sets mode: +v [particle]1

[02:44] <AlexDaniel> in a regex, how can I match a string returned from a block? <{ }> almost works but it EVALs (which I don't need), and $() doesn't work because I can't access already matched parts like $<foo>

[02:45] <AlexDaniel> m: my $x = ‘o’; say ‘oo’ ~~ /$<foo>=‘o’ <{ $<foo> }>/

[02:45] <camelia> rakudo-moar 266af373d: OUTPUT: «｢oo｣␤ foo => ｢o｣␤»

[02:45] <AlexDaniel> I need this but without <{ }>

[02:47] *** [particle] joined
[02:47] *** [particle]1 left
[02:48] *** p6bannerbot sets mode: +v [particle]

[02:55] *** marmay left
[02:56] *** marmay joined
[02:56] *** ellipsis left
[02:56] *** Bucciarati left
[02:56] *** p6bannerbot sets mode: +v marmay

[02:58] <SmokeMachine> m: my $x = ‘o’; say ‘oo’ ~~ /$<foo>=‘o’ $<foo>/ # AlexDaniel ?

[02:58] <camelia> rakudo-moar 266af373d: OUTPUT: «｢oo｣␤ foo => ｢o｣␤»

[02:59] <AlexDaniel> SmokeMachine: I need a code block

[02:59] <AlexDaniel> or, well, I want a code block :)

[02:59] <AlexDaniel> there's probably a way to do without but I'd much rather not

[03:07] <ryn1x> I made a gist of a minimum working example of how I am trying to do some IPC. I have not done this before or learned about it at university/work yet... can somone tell me if this at all an appropriate approach? https://gist.github.com/ryn1x/2eb896216a42a9a95590f34bfcbd8d7f

[03:15] *** dotdotdot joined
[03:16] *** p6bannerbot sets mode: +v dotdotdot

[03:17] *** MasterDuke left
[03:27] *** Bucciarati joined
[03:27] *** p6bannerbot sets mode: +v Bucciarati

[03:33] *** ufobat_ joined
[03:34] *** p6bannerbot sets mode: +v ufobat_

[03:36] *** ufobat left
[03:37] <AlexDaniel> ryn1x: what about the big example here: https://docs.perl6.org/type/Proc::Async

[03:39] <AlexDaniel> ryn1x: most parts of that example you probably don't need, so it will end up being shorter

[03:39] <AlexDaniel> ryn1x: but react/whenever is what you want to use, IMO

[03:40] <AlexDaniel> that way you can easily avoid infinite loops like the one in your example

[03:43] *** fake_space_whale left
[03:45] <ryn1x> AlexDaniel: thanks. not sure why I haven't played with that example yet... I was skipping around the docs looking for what I thought I needed and missed it... I haven't used react/whenever yet... looks cool

[03:58] <ryn1x> Is there any reason to choose    $proc.put: 'command'    or    $proc.write: "command\n".encode    ? Does binary vs UTF-8 matter for ipc to a program expecting commands via stdin?

[03:59] *** Bucciarati left
[03:59] *** avar left
[03:59] *** Bucciarati joined
[03:59] *** avar joined
[03:59] *** avar left
[03:59] *** avar joined
[03:59] *** p6bannerbot sets mode: +v avar

[04:00] *** p6bannerbot sets mode: +v Bucciarati

[04:00] *** p6bannerbot sets mode: +v avar

[04:06] <Xliff> 70,000 lines!! 

[04:06] <Xliff> https://github.com/Xliff/p6-GtkPlus/commit/8eec2b388d27bc9073ea4bd15ec15f617bfcc9a4

[04:07] <Xliff> ryn1x: react/whenever is an interesting construct. I've just recently started with it, myself. Using Proc::Async, as well.

[04:15] <Xliff> AlexDaniel: That example formed the basis of the process monitor I am using to monitor my builds.

[04:15] <Xliff> https://github.com/Xliff/p6-GtkPlus/commit/8eec2b388d27bc9073ea4bd15ec15f617bfcc9a4

[04:16] <Xliff> Er... not that link

[04:16] <Xliff> https://github.com/Xliff/p6-GtkPlus/blob/master/scripts/p6-process-monitor.pl6

[04:16] <AlexDaniel> ryn1x: it depends on what kind of data you are sending

[04:16] <AlexDaniel> if it's text then probably no need to use :bin

[04:17] <ryn1x> AlexDaniel: ok, that's what I figued, just saw an example somewhere using write and then encode so wasn't sure what I was missing

[04:18] <AlexDaniel> Xliff: I'm glad that people find that example useful. In my eyes it is way too complicated, but I don't know any easy way to simplify it

[04:19] <Xliff> Well, there were a few traps I ran into, mostly due to my still-limited understanding of react/whenever.

[04:20] <Xliff> For example, react is blocking, so it took me a minute to determine my $*SCHEDULER call needed to be BEFORE, not AFTER the block.

[04:20] <Xliff> Would react/whenever work inside a Promise? 

[04:22] <AlexDaniel> what do you mean? Inside a promise?

[04:24] <Xliff> my $proc = Proc::Async.new: :r, <my command here>; my $prom = start { react { whenever this { }; whenever that { }; whenever $proc.start { } };

[04:24] <Xliff> I wouldn't want to "await $prom" because the whole point is to make the react/whenever non-blocking

[04:25] <Xliff> Or am I missing something?

[04:25] <AlexDaniel> sure, that will work just fine

[04:26] <Xliff> Cool! Thanks.

[04:27] <ryn1x> AlexDaniel: Xliff: Ok.. so this react/whenever construct is interesting and I have it working, but if I wanted to leave a react block, do some other stuff, and come back to control my Proc::Async that is still running later, it seems that is not possible?

[04:27] <Xliff> ryn1x: Heh. That's kinda touching on what I was just talking about.

[04:28] <AlexDaniel> ryn1x: can't you just add another `whenever` to do the stuff you need?

[04:29] <Xliff> ryn1x: Are you trying to run code periodically?

[04:31] <Xliff> ryn1x: If you have code written, that would help a lot. :)

[04:31] <ryn1x> I want to control another program (the async process) and then leave it running because it has a lot of start-up over head.... go do a bunch of unrelated things ... come back to controlling the async process.

[04:32] <ryn1x> But playing with react/whenever it seems like I need to wrap my entire program in the react block which seems wrong...

[04:33] <Xliff> I would say: whenever $proc.start { my $promise = start { # do unrelated things here }; }

[04:33] <AlexDaniel> Xliff: but that means that the proc has finished

[04:33] <Xliff> Oh.

[04:34] <Xliff> Well see! I am still learning. :P

[04:34] <Xliff> Heh :)

[04:34] <Xliff> Then: my $promise = start { # do unrelated things here }; }; react { ... }

[04:34] <AlexDaniel> ryn1x: I guess you'd need a `start` block somewhere. Either `start react { … }` or start your bunch of unrelated things before going into react

[04:36] <ryn1x> Is the proc killed when you call done() to exit the block?

[04:37] <Xliff> The proc should have exited before that happens.

[04:37] <Xliff> To exit the proc, you should use $proc.kill.

[04:38] <AlexDaniel> I'm actually not sure

[04:39] *** marmay left
[04:39] *** AlexDaniel left
[04:40] *** AlexDaniel joined
[04:40] *** p6bannerbot sets mode: +v AlexDaniel

[04:41] *** marmay joined
[04:41] <ryn1x> AlexDaniel: Is there an example of `start react { ... }` somewhere? Not sure how to form that... I have been making my Async::Proc object than calling .start on it...

[04:41] *** p6bannerbot sets mode: +v marmay

[04:42] <ryn1x> Proc::Async*

[04:42] <ryn1x> s/than/then/

[04:42] <AlexDaniel> m: start react { whenever Promise.in(2) { say ‘we are reacting to things!’ } }; say ‘we are here’; sleep 3; say ‘byeeeeeeee’

[04:42] <camelia> rakudo-moar 266af373d: OUTPUT: «we are here␤we are reacting to things!␤byeeeeeeee␤»

[04:42] <AlexDaniel> ryn1x: ↑

[04:43] <AlexDaniel> and note that you can still communicate with channels or anything else you need

[04:43] <AlexDaniel> m: my $c = Channel.new; start react { whenever Promise.in(2) { say ‘we are reacting to things!’ }; whenever $c { say “we got $_” } }; say ‘we are here’; $c.send: 42; sleep 3; say ‘byeeeeeeee’

[04:43] <camelia> rakudo-moar 266af373d: OUTPUT: «we are here␤we got 42␤we are reacting to things!␤byeeeeeeee␤»

[04:47] <ryn1x> AlexDaniel: That looks really close to what I need... I just need to be able to send commands to the process whenever.... Is it possible to and execute the `start react {...}` and still `$proc.put: "command"` from outside the react block somehow?

[04:48] <AlexDaniel> ryn1x: I'm pretty sure you can $proc.put from anywhere you want

[04:49] <ryn1x> AlexDaniel: Ok cool. This was really helpful. Thanks!

[04:50] *** cognominal-p6 joined
[04:50] *** cognominal-p6 left
[04:50] *** cognominal-p6 joined
[04:50] *** p6bannerbot sets mode: +v cognominal-p6

[04:51] *** p6bannerbot sets mode: +v cognominal-p6

[04:55] *** cog joined
[04:56] *** p6bannerbot sets mode: +v cog

[04:57] *** cognominal-p6 left
[04:59] *** nige_ joined
[05:00] *** p6bannerbot sets mode: +v nige_

[05:05] *** nige_ left
[05:13] *** cog left
[05:20] <ryn1x> AlexDaniel: https://gist.github.com/ryn1x/c313e63bd927a7e0309e2c6fe4a154e6

[05:20] * ryn1x thinks react/whenever is super cool

[05:22] <AlexDaniel> ryn1x: instead of `whenever $proc.Supply.lines` I think you can do just `whenever $proc`

[05:22] <AlexDaniel> ah

[05:22] <AlexDaniel> actually

[05:22] <AlexDaniel> `whenever $proc.lines` ?

[05:22] <AlexDaniel> ↑ that's the one, I think

[05:23] <ryn1x> Ok. I'll play with that tomorrow. Time to go to sleep now. Thanks again.

[05:23] <AlexDaniel> ryn1x: instead of `until $isready {};`

[05:23] <AlexDaniel> use `await $proc.ready`

[05:24] <AlexDaniel> because that won't eat cpu needlessly

[05:24] <finanalyst> Hi. How do I get an enum value from a string? I have enum Status <ok nok fine>, I have from a json %h<status>='nok'. How do I turn this to a value of Status?

[05:24] <AlexDaniel> otherwise, yeah

[05:25] <ryn1x> AlexDaniel: 👍

[05:29] *** ryn1x left
[05:29] <AlexDaniel> m: enum Status <ok nok fine>; dd Status(Status.^enum_values{‘nok’})

[05:29] <camelia> rakudo-moar 266af373d: OUTPUT: «Status::nok␤»

[05:29] <AlexDaniel> finanalyst: there must be a better way…

[05:30] * AlexDaniel goes to bed

[05:33] *** troys left
[05:59] *** curan joined
[05:59] *** p6bannerbot sets mode: +v curan

[06:01] <Xliff> m: class A { method b { say ::?CLASS.name }; }; class B does A { }; say B.new.b

[06:01] <camelia> rakudo-moar 266af373d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤A is not composable, so B cannot compose it␤at <tmp>:1␤»

[06:02] <Xliff> m: class A { method b { say ::?CLASS.name }; }; class B is A { }; say B.new.b

[06:02] <camelia> rakudo-moar 266af373d: OUTPUT: «No such method 'name' for invocant of type 'A'. Did you mean any of these?␤    none␤    note␤    take␤␤  in method b at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:02] <Xliff> m: class A { method b { say ::?CLASS.^name }; }; class B is A { }; say B.new.b

[06:02] <camelia> rakudo-moar 266af373d: OUTPUT: «A␤True␤»

[06:16] *** jmerelo joined
[06:16] *** p6bannerbot sets mode: +v jmerelo

[06:22] *** marmay left
[06:29] <Geth> ¦ doc: c6cb7929d0 | (JJ Merelo)++ | doc/Type/Cool.pod6

[06:29] <Geth> ¦ doc: Changes internal to external links, closes #2411

[06:29] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c6cb7929d0

[06:29] <synopsebot> Link: https://doc.perl6.org/type/Cool

[06:51] *** Actualeyes left
[07:00] *** random_yanek left
[07:16] *** isBEKaml joined
[07:16] *** p6bannerbot sets mode: +v isBEKaml

[07:22] *** finanalyst left
[07:27] *** isBEKaml left
[07:32] *** domidumont joined
[07:32] *** p6bannerbot sets mode: +v domidumont

[07:33] *** noganex left
[07:34] *** noganex joined
[07:35] *** p6bannerbot sets mode: +v noganex

[07:35] *** jmerelo left
[07:41] *** abraxxa joined
[07:42] *** p6bannerbot sets mode: +v abraxxa

[07:44] *** telex left
[07:46] *** telex joined
[07:47] *** p6bannerbot sets mode: +v telex

[08:09] *** cog joined
[08:10] *** p6bannerbot sets mode: +v cog

[08:23] *** cog left
[08:24] *** cog joined
[08:24] *** zakharyas joined
[08:25] *** p6bannerbot sets mode: +v cog

[08:25] *** p6bannerbot sets mode: +v zakharyas

[08:28] *** nebuchadnezzar joined
[08:28] *** p6bannerbot sets mode: +v nebuchadnezzar

[08:29] *** rindolf joined
[08:30] *** p6bannerbot sets mode: +v rindolf

[08:33] *** cog left
[08:43] *** cog joined
[08:44] *** p6bannerbot sets mode: +v cog

[08:45] *** cog left
[08:45] *** cog joined
[08:46] *** p6bannerbot sets mode: +v cog

[09:02] *** Ven` joined
[09:03] *** p6bannerbot sets mode: +v Ven`

[09:38] *** pmurias joined
[09:38] *** p6bannerbot sets mode: +v pmurias

[09:45] *** pecastro joined
[09:45] *** p6bannerbot sets mode: +v pecastro

[09:47] *** shortguy joined
[09:47] *** p6bannerbot sets mode: +v shortguy

[09:48] <shortguy> https://docs.perl6.org/language/syntax#Extended_identifiers Can anyone tell me how the "short name" mentioned in this bit of documentation works? Google isn't turning up much

[09:50] *** noganex_ joined
[09:51] *** p6bannerbot sets mode: +v noganex_

[09:53] <lizmat> shortguy: "Dog:auth<Somebody>:ver<2.0>" is the long name, "Dog" is the short name

[09:53] <lizmat> does that help?

[09:53] *** noganex left
[09:54] <shortguy> Oh, I think I understand it now, that isn't really what I want 

[09:55] <shortguy> I thought it was a solution for this: https://stackoverflow.com/questions/33029439/importing-a-moduleclass-and-referring-to-it-by-its-short-name?rq=1 which it isn't really, the solution to that stackoverflow question also doesn't feel all that elegant 

[09:57] <lizmat> shortguy: the library in question *could* also export a `User`, effectively doing under the hood what the answer suggested

[09:59] <xinming> What is the differences between my $a =  %(a => 1) and {a => 1}?

[09:59] <xinming> my $a = %(a => 1);  my $b = { a => 1 };   Are they the same?

[10:00] <shortguy> lizmat: Is there a way to "rename" the required package? So one could do use Cat but reference it in their script in another way

[10:01] <shortguy> That would allow me to do use Garbage::Users::User but refer to the class as User

[10:01] <xinming> Got it, %() is recommended to be used for creating hash,  { } is for creating blocks

[10:02] <lizmat> shortguy: the answer to the SO question: my constant User = Garbage::Users::User

[10:02] <lizmat> there is some speculation about adding a "as" parameter to use statements, if I recall correctly

[10:02] <lizmat> but that has not been implemented afaik

[10:04] *** cog left
[10:07] *** robertle joined
[10:08] *** p6bannerbot sets mode: +v robertle

[10:11] *** pmurias left
[10:17] *** pmurias joined
[10:17] *** p6bannerbot sets mode: +v pmurias

[10:18] <shortguy> lizmat: Thanks for answering my questions :)

[10:18] *** shortguy left
[10:19] <lizmat> m: use Test as Bar   # yeah NYI

[10:19] <camelia> rakudo-moar 266af373d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Bar used at line 1. Did you mean 'Bag'?␤Undeclared routine:␤    as used at line 1␤␤»

[10:47] *** zashi joined
[10:47] *** p6bannerbot sets mode: +v zashi

[10:59] *** pmurias left
[11:03] <zashi> hi

[11:03] <zashi> I'm trying to parse command line arguments via MAIN and pass that to a second perl app that will parse it the same. The main app is only a redirector to the other apps. Example "rep init file.c" will exec rep p6 which will exec rep-init p6 as "rep-init file.c" (sort of git behavior). The first main is multi MAIN($action, Bool :v=False, *@args). The problem is that after using :named-anywhere, any unknown flag is thrown as error and not

[11:03] <zashi> Example: "rep -v init file.x" and "rep init -v file.x" also works as expected, but "rep -v init file.x -unknown" does not.. I would like any unrecognized flag to be slurped in order to be transmitted to the second app to have a chance to be recognized later by the second app.

[11:04] *** sena_kun joined
[11:04] *** pmurias joined
[11:04] *** p6bannerbot sets mode: +v pmurias

[11:04] *** p6bannerbot sets mode: +v sena_kun

[11:05] *** Zoffix joined
[11:05] *** p6bannerbot sets mode: +v Zoffix

[11:05] <Zoffix> zashi: try `|args` instead of `*@args`

[11:06] <Zoffix> `*args` slurps only positionals, `|args` is a Capture that captures both positional and named

[11:06] <Zoffix> huggable: Capture

[11:06] <huggable> Zoffix, Argument list suitable for passing to a Signature: https://docs.perl6.org/type/Capture  

[11:06] <zashi> ok, will try, thank you

[11:07] <Zoffix> doesn't look like it works

[11:13] <zashi> I might be a total noob but it doesn't seem to work (ps yes I am noob anyway even if it would had worked)

[11:15] *** Spot__ left
[11:15] *** Spot__ joined
[11:15] *** p6bannerbot sets mode: +v Spot__

[11:15] <zashi> multi MAIN($action, Bool :v(:$verbose) = False, |args) but still fails with "rep -v init aaaa -unk"

[11:15] *** mrsolo_ left
[11:16] *** oodani left
[11:16] *** Geth left
[11:16] *** leah2 left
[11:16] *** undersightable6 left
[11:16] *** reu left
[11:16] *** ZDFD joined
[11:16] *** p6bannerbot sets mode: +v ZDFD

[11:16] *** undersightable6 joined
[11:16] *** Geth joined
[11:16] *** ChanServ sets mode: +v undersightable6

[11:16] *** ChanServ sets mode: +v Geth

[11:16] <zashi> well it does not fail, it prints the usage.

[11:17] *** SourceBaby left
[11:17] *** hoelzro left
[11:17] *** Zoffix left
[11:17] *** Zoffix joined
[11:17] *** p6bannerbot sets mode: +v Zoffix

[11:17] *** p6bannerbot sets mode: +v undersightable6

[11:17] *** p6bannerbot sets mode: +v Geth

[11:17] *** patrickb joined
[11:17] *** p6bannerbot sets mode: +v patrickb

[11:17] *** spacebat1 left
[11:17] *** jcallen left
[11:17] *** geekosaur left
[11:17] <Zoffix> zashi: yeah, looks like a limitation. Filed as R#2445

[11:17] <synopsebot> R#2445 [open]: https://github.com/rakudo/rakudo/issues/2445 Captures in sub MAIN params don't capture named args

[11:17] <Zoffix> zashi: ok, Plan B:   in addition to `*@args`, add `*%named-args`

[11:17] *** jcallen_ joined
[11:17] *** p6bannerbot sets mode: +v jcallen_

[11:18] <Zoffix> zashi: That'll capture both: positionals to @args and named to %named-args

[11:18] *** mrsolo_ joined
[11:18] *** p6bannerbot sets mode: +v mrsolo_

[11:18] *** ZDFD left
[11:18] *** hoelzro joined
[11:19] *** p6bannerbot sets mode: +v hoelzro

[11:19] <zashi> works like a charm

[11:19] <zashi> :D thank you guys

[11:20] *** Mithaldu left
[11:22] <tyil> zashi: doing things like `multi MAIN ("init", Bool :$v = False, *@args)` is also possible, that might save you the redirecting altogether (assuming you're doing it mostly to seperate functionality into seperate modules/files)

[11:22] *** pmurias left
[11:22] *** oodani joined
[11:22] <tyil> then you can just add more multi MAIN definitions, and change the "init" to any other string

[11:22] *** reu joined
[11:22] *** p6bannerbot sets mode: +v reu

[11:23] *** p6bannerbot sets mode: +v oodani

[11:23] *** Mithaldu joined
[11:24] *** p6bannerbot sets mode: +v Mithaldu

[11:26] *** pmurias joined
[11:26] *** p6bannerbot sets mode: +v pmurias

[11:27] *** pmurias left
[11:29] *** AlexDaniel left
[11:29] *** AlexDaniel joined
[11:29] *** p6bannerbot sets mode: +v AlexDaniel

[11:30] *** spacebat1 joined
[11:31] *** Zoffix left
[11:31] *** p6bannerbot sets mode: +v spacebat1

[11:31] *** leah2 joined
[11:32] *** geekosaur joined
[11:32] *** p6bannerbot sets mode: +v leah2

[11:32] *** p6bannerbot sets mode: +v geekosaur

[11:33] *** domidumont left
[11:33] <zashi> tyil: well, I don't know all the subcommands because users should be encouraged to create other subcommands as rep-commands somewhere in path and each subcommand could have other parameters unkown to me at this time. So the way I will do it is any known parameters (generic) are to be processed and passed to the subcommand p6 but any unknown one needs to be passed as is to the subcommand and the subcommand will decide if it's known or n

[11:35] *** patrickb left
[11:35] *** Ven` left
[11:35] <zashi> and the communication between the main p6 and subcommands p6 is by running it as a command because now it's a p6 but a user might decide he wants a specific subcommand to be done in another language, sort of like linux philosophy

[11:36] <zashi> but thanks for the idea, I hope I understood it correctly

[11:42] *** vike1 joined
[11:42] *** vike left
[11:42] *** p6bannerbot sets mode: +v vike1

[11:50] *** dakkar joined
[11:51] *** p6bannerbot sets mode: +v dakkar

[12:00] *** JesseChan joined
[12:00] *** p6bannerbot sets mode: +v JesseChan

[12:03] *** kensanata joined
[12:03] *** p6bannerbot sets mode: +v kensanata

[12:15] *** leont joined
[12:16] *** p6bannerbot sets mode: +v leont

[12:17] *** pmurias joined
[12:17] *** p6bannerbot sets mode: +v pmurias

[12:18] *** Ven` joined
[12:18] *** p6bannerbot sets mode: +v Ven`

[12:25] *** pmurias left
[12:29] *** leont left
[12:35] *** pmurias joined
[12:35] *** p6bannerbot sets mode: +v pmurias

[12:40] *** zakharyas left
[12:50] *** raydiak_ left
[12:50] *** raydiak_ joined
[12:50] *** agentzh left
[12:51] *** p6bannerbot sets mode: +v raydiak_

[12:52] *** agentzh joined
[12:52] *** p6bannerbot sets mode: +v agentzh

[13:00] *** cog joined
[13:01] *** p6bannerbot sets mode: +v cog

[13:09] * lizmat wonders if El_Che is already working on 2018.10 packages

[13:12] *** webstrand left
[13:13] *** webstrand joined
[13:14] *** p6bannerbot sets mode: +v webstrand

[13:17] *** domidumont joined
[13:18] *** p6bannerbot sets mode: +v domidumont

[13:23] <El_Che> is it out?

[13:23] <El_Che> releasable6: status

[13:23] <releasable6> El_Che, Next release in ≈19 days and ≈5 hours. 0 blockers. 0 out of 21 commits logged

[13:23] <releasable6> El_Che, Details: https://gist.github.com/abaf6489b2f258105f32684a4e5b0208

[13:24] <El_Che> ah nice

[13:24] <El_Che> will kick travis then

[13:24] *** cog left
[13:24] <lizmat> El_Che: cool!

[13:27] *** JesseChan left
[13:27] *** pmurias left
[13:28] <El_Che> lizmat: running as we speak. If ok, I'll rerun it tagged to release packages as well

[13:29] <lizmat> El_Che++

[13:29] * lizmat can mention it in the P6W then  :)

[13:29] <El_Che> yeah, it should be ready by then

[13:29] <El_Che> it's a good extra canary for the release

[13:29] <El_Che> it runs 18 builds of rakudo

[13:30] *** antononcube joined
[13:30] *** p6bannerbot sets mode: +v antononcube

[13:30] <lizmat> afk for a bit&

[13:30] <El_Che> lizmat: greetings to Woolfie

[13:34] *** antononcube left
[13:36] <SmokeMachine> m: enum Status <ok nok fine>; dd Status::<nok> # finalyst

[13:36] <camelia> rakudo-moar 266af373d: OUTPUT: «Status::nok␤»

[13:41] <SmokeMachine> lizmat: will `use Test as Bar` be implemented?

[13:48] *** SqrtNegInf joined
[13:49] *** p6bannerbot sets mode: +v SqrtNegInf

[13:52] <tyil> one can only hope

[14:00] <moritz> one can also patch :-)

[14:07] <SmokeMachine> I mean: is that specified?

[14:11] *** zakharyas joined
[14:11] *** p6bannerbot sets mode: +v zakharyas

[14:12] <lizmat> I sorta remember speccing it in S11...  but can't find it atm

[14:17] <moritz> iirc it was 'use Bar :from<Test>;' or something like that

[14:19] <lizmat> :from<> is used to indicate language

[14:19] <lizmat> :from<perl5>

[14:19] <moritz> then it seems I've confused the two

[14:19] <timotimo> btw do we have a mechanism for distinguishing which Inline:: module to use for a given language if there's multiple?

[14:20] <timotimo> i imagine a "use lib" line could be used for that

[14:20] <lizmat> m: use Foo:from<Perl6>:name<Test>   # sorta expected that to work

[14:20] <camelia> rakudo-moar 266af373d: OUTPUT: «===SORRY!===␤Could not find Foo at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-2/share/perl6␤    CompUnit::Repo…»

[14:20] <timotimo> wouldn't you use Test:name<Foo>?

[14:21] <timotimo> m: use Test:name<Foo>; say ::.keys

[14:21] <camelia> rakudo-moar 266af373d: OUTPUT: «($=finish &is-approx ::?PACKAGE $¢ $! $/ &nok &skip-rest &done-testing &pass &eval-lives-ok &does-ok &use-ok &subtest GLOBALish &fails-like &eval-dies-ok EXPORT &throws-like &unlike $_ &can-ok !UNIT_MARKER $=pod &bail-out &cmp-ok &skip $?PACKAGE &is …»

[14:21] <timotimo> m: use Test:name<Foo>; say Foo::.keys

[14:21] <camelia> rakudo-moar 266af373d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Foo used at line 1␤␤»

[14:21] <timotimo> nope.

[14:21] <El_Che> ttps://gist.github.com/nxadm/2996a607b59084b94d8d10322acb6ce0 <-- flipflop fail test

[14:21] <El_Che> https://gist.github.com/nxadm/2996a607b59084b94d8d10322acb6ce0 <-- flipflop fail test

[14:21] <timotimo> it's not what i think it was

[14:21] <El_Che> do we keep track of known flip flop fails?

[14:21] <timotimo> yeah

[14:21] <timotimo> we tend to write "ZOFFLOP" in chat for them

[14:40] *** Bucciarati left
[14:41] *** avar left
[14:45] *** Bucciarati joined
[14:45] *** avar joined
[14:45] *** avar left
[14:45] *** avar joined
[14:45] *** p6bannerbot sets mode: +v avar

[14:46] *** p6bannerbot sets mode: +v Bucciarati

[14:46] *** p6bannerbot sets mode: +v avar

[14:55] *** dakkar left
[14:57] <AlexDaniel> El_Che: it used to work like this: https://gist.github.com/Whateverable/20546e30a6d33a518b60232e9845eda1

[14:58] <AlexDaniel> but then our clog was shut down, and quotable6 doesn't know how to use colabti…

[14:58] *** xinming_ joined
[14:59] *** p6bannerbot sets mode: +v xinming_

[15:00] *** dakkar joined
[15:01] *** p6bannerbot sets mode: +v dakkar

[15:02] *** xinming left
[15:03] *** molaf left
[15:04] *** pmurias joined
[15:04] *** p6bannerbot sets mode: +v pmurias

[15:04] *** curan left
[15:08] *** fake_space_whale joined
[15:08] *** p6bannerbot sets mode: +v fake_space_whale

[15:09] <Geth> ¦ doc: uzluisf++ created pull request #2426: whitespace and text reflow

[15:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2426

[15:10] <Geth> ¦ doc: 89ed86f8cb | (Luis F. Uceta)++ | CONTRIBUTING.md

[15:10] <Geth> ¦ doc: whitespace and text reflow

[15:10] <Geth> ¦ doc: 

[15:10] <Geth> ¦ doc: documention -> documentation

[15:10] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/89ed86f8cb

[15:10] <Geth> ¦ doc: 317f469a6d | (Luis F. Uceta)++ (committed using GitHub Web editor) | CONTRIBUTING.md

[15:10] <Geth> ¦ doc: Merge pull request #2426 from uzluisf/master

[15:10] <Geth> ¦ doc: 

[15:10] <Geth> ¦ doc: whitespace and text reflow

[15:10] <Geth> ¦ doc: 

[15:10] <Geth> ¦ doc: documention -> documentation

[15:10] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/317f469a6d

[15:11] *** random_yanek joined
[15:12] *** p6bannerbot sets mode: +v random_yanek

[15:15] *** evalable6 left
[15:15] *** evalable6 joined
[15:15] *** ChanServ sets mode: +v evalable6

[15:16] *** p6bannerbot sets mode: +v evalable6

[15:16] *** releasable6 left
[15:16] *** tyil[m]1 left
[15:16] *** tyil[m]1 joined
[15:16] *** p6bannerbot sets mode: +v tyil[m]1

[15:16] *** MitarashiDango[m left
[15:16] *** releasable6 joined
[15:16] *** ChanServ sets mode: +v releasable6

[15:16] *** troys joined
[15:16] *** ynoom joined
[15:16] *** p6bannerbot sets mode: +v ynoom

[15:16] *** Ven` left
[15:17] <moritz> the nightly cron update of perl6-all-modules has worked

[15:17] *** p6bannerbot sets mode: +v releasable6

[15:17] *** p6bannerbot sets mode: +v troys

[15:17] *** MitarashiDango[m joined
[15:17] *** p6bannerbot sets mode: +v MitarashiDango[m

[15:18] *** cog joined
[15:19] *** p6bannerbot sets mode: +v cog

[15:20] *** leont joined
[15:21] *** p6bannerbot sets mode: +v leont

[15:24] *** cog left
[15:24] *** cog joined
[15:25] *** p6bannerbot sets mode: +v cog

[15:31] *** pmurias left
[15:32] <El_Che> AlexDaniel, lizmat: new pkgs up: https://github.com/nxadm/rakudo-pkg/releases/tag/v2018.10

[15:36] <AlexDaniel> moritz: awesome!

[15:37] *** pmurias joined
[15:37] *** p6bannerbot sets mode: +v pmurias

[15:37] *** moony_ joined
[15:37] *** p6bannerbot sets mode: +v moony_

[15:39] *** ynoom left
[15:39] <lizmat> El_Che++

[15:42] *** moony_ left
[15:42] <AlexDaniel> El_Che: cool!

[15:50] *** wbn left
[15:52] *** wbn joined
[15:52] *** p6bannerbot sets mode: +v wbn

[15:55] <lizmat> hmmm... looks like we don't have any proper documentation as to what "use v6.c" and "use v6.d" actually do / mean

[15:55] * lizmat hopes for some quick PDD

[15:56] <lizmat> (Perl6Weekly Driven Development)

[16:09] *** molaf joined
[16:10] *** p6bannerbot sets mode: +v molaf

[16:10] *** pmurias left
[16:11] *** Guest13389 left
[16:16] *** ryn1x joined
[16:16] *** pmurias joined
[16:16] *** p6bannerbot sets mode: +v pmurias

[16:16] *** roguelazer joined
[16:17] *** p6bannerbot sets mode: +v ryn1x

[16:17] *** p6bannerbot sets mode: +v roguelazer

[16:19] *** zakharyas left
[16:25] *** fake_space_whale left
[16:25] *** Guest13389 joined
[16:26] *** p6bannerbot sets mode: +v Guest13389

[16:27] <ryn1x> Do you guys thing porting Graphics::TIFF from perl5 to perl6 would be difficult? The source code looks pretty short... I think I would just need to learn how to wrap a C library with NativeCall? https://metacpan.org/pod/release/RATCLIFFE/Graphics-TIFF-6/lib/Graphics/TIFF.pm

[16:28] <hahainternet> ryn1x: i'm only passing through, but extremely simple

[16:30] <ryn1x> I just need to figure out how the Perl5 xsloader code convertes to NativeCall I think... they both perform similar functions right? Access to C libraries... Haven't used either and I don't know Perl5 so this make take more time in reading/researching than coding.

[16:31] <hahainternet> i don't think you want to waste your time learning XS or how to translate

[16:32] <hahainternet> consider just using nativecall directly and attempting to manipulate a test file w/tifflib or whatever directyly

[16:32] <hahainternet> i am not an authority though, just giving you my perspective

[16:33] <ryn1x> Ok. That sounds like a good idea. I start with reading up on NativeCall.

[16:33] <leont> That's rather outdated XS too -_-

[16:34] <leont> I know little about NativeCall, and more than I should about XS. I'm not sure how one would do all those constants with NC. Calling most functions should be trivial though

[16:36] <ryn1x> Hmm.... Are you saying I might have to redefine all the constants and their values in regular perl6 code because native call can't use the ones defined by the c library like xs (apparantly) can?

[16:41] <geekosaur> nativecall and xs are very different things

[16:42] *** cog left
[16:43] *** moony_ joined
[16:43] *** p6bannerbot sets mode: +v moony_

[16:43] <lizmat> ryn1x: it is my understanding that NativeCall is mostly runtime

[16:44] <lizmat> so it won't be able to "see" constants, unless they're also public symbols

[16:44] <ryn1x> hmm ok.. 

[16:44] <lizmat> and I may also be talking pretty much nonsense here (with regards to public symbols)

[16:45] <ryn1x> so NativeCall is still what I would want if I need to start from stratch to provide perl6 bindings to the C libtiff library though?

[16:47] <ryn1x> I have to eventually run this code on a windows machine so it seems really weird to do the alternative and inline::perl5 to then call a c library... especially since windows has to have stawberry perl installed separately

[16:49] <sena_kun> Yes, it is likely what you want. As far as I know, you can use NativaCall on windows too, though it might be a bit more tricky to ship your .dll file than on unix-like.

[16:50] <sena_kun> As in nice gnu/linux if necessary .so library is already installed in some default location, you don't need to do anything to use it with NativeCall.

[16:51] <ryn1x> Story of my life... I get everything working on our Linux/macOS machines and then have to struggle on windows.

[16:52] <ryn1x> Although I just got WSL running... playing around with that... 

[16:52] <sena_kun> Absence of sane "/lib" on Windows is not something to be fixed by this community. If it can be fixed.

[16:54] <sena_kun> but that's another question. anyway, I just wanted to write that docs for NativeCall is what you want. You can look at someone's library using NativeCall to get some ideas about that, also don't hesitate to ask questions if there will be any tricky places.

[16:54] <sena_kun> s/using/that uses/

[16:56] *** ryn1x left
[17:00] <jnthn> Quite a few modules ship/install their own binary on Windows

[17:01] *** moony_ left
[17:03] *** kensanata left
[17:06] *** rindolf left
[17:06] <Geth> ¦ perl6.org: 79aaa00db3 | (Zoffix Znet)++ | source/about/index.html

[17:06] <Geth> ¦ perl6.org: Only a Sith deals in absolutes

[17:06] <Geth> ¦ perl6.org: 

[17:06] <Geth> ¦ perl6.org: Irrelevant of its veracity, we don't need to have this on the site.

[17:06] <Geth> ¦ perl6.org: (saw people reference that phrase when dissing our "marketing")

[17:06] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/79aaa00db3

[17:11] *** domidumont left
[17:22] *** dakkar left
[17:23] *** gregf_ joined
[17:23] *** p6bannerbot sets mode: +v gregf_

[17:26] *** zakharyas joined
[17:26] *** ExtraCrispy left
[17:27] *** p6bannerbot sets mode: +v zakharyas

[17:27] *** ExtraCrispy joined
[17:27] *** p6bannerbot sets mode: +v ExtraCrispy

[17:37] <Altreus> anyone know whether anyone is working on LDAP?

[17:38] <Altreus> bagsy not it

[17:38] <El_Che> whatdoyamean

[17:38] <El_Che> modules? product?

[17:38] <El_Che> client? server?

[17:39] <Altreus> some sort of module/s yeah

[17:39] <El_Che> Net::LDAP

[17:39] <Altreus> ... I mean I was thinking client

[17:39] <Altreus> but server

[17:39] <Altreus> interesting idea

[17:39] <Altreus> it's done?

[17:39] <El_Che> A perl ldap server?

[17:40] <moritz> btw python'3 ldap3 seems to be pretty good

[17:40] <Altreus> https://modules.perl6.org/search/?q=ldap

[17:40] <El_Che> (openldap has a perl backend by the way)

[17:40] <moritz> if you plan to do some ldap stuff, I'd recommend looking at it for inspiration

[17:40] <Altreus> we wanted to use it for auth in a cro system but I really don't get on with LDAP myself

[17:41] <El_Che> Altreus: I tried a little, but didn't have the time for something usefull

[17:41] <El_Che> I played with libldap and nc

[17:41] <Altreus> it seems liek a large undertaking

[17:41] <El_Che> but it's a lot of work

[17:42] <El_Che> indeed

[17:42] <El_Che> libldap has many opaque datatypes

[17:42] <Altreus> and logic

[17:43] <El_Che> Also, NC and versioning is a pain

[17:45] <El_Che> some time ago I wanted to write a small project in perl6 or go, but ended writing it in perl 5 because of the lack of good ldap libs

[17:49] <El_Che> So, yes, it's a bad combination of needed and not easy to implement

[17:50] *** cog joined
[17:50] <El_Che> And alternative is puttying somethink like a rest proxy in front of your ldap

[17:51] *** domidumont joined
[17:51] *** p6bannerbot sets mode: +v cog

[17:52] *** p6bannerbot sets mode: +v domidumont

[17:53] *** ryn1x joined
[17:54] *** p6bannerbot sets mode: +v ryn1x

[18:02] <AlexDaniel> .tell kensanata how is it going? I wanna switch something to oddmuse6 and I wonder if that'd be a good idea any time soon

[18:02] <yoleaux> AlexDaniel: I'll pass your message to kensanata.

[18:03] *** robertle left
[18:06] <Xliff> \o

[18:06] *** zakharyas left
[18:06] *** zxcvz joined
[18:07] *** p6bannerbot sets mode: +v zxcvz

[18:18] *** cog left
[18:18] *** cog joined
[18:19] *** p6bannerbot sets mode: +v cog

[18:20] <AlexDaniel> o/

[18:27] *** cog left
[18:45] *** rindolf joined
[18:46] *** rindolf left
[18:47] *** ExtraCrispy left
[18:47] *** rindolf joined
[18:48] *** p6bannerbot sets mode: +v rindolf

[18:51] *** graphene joined
[18:51] *** patrickb joined
[18:51] *** p6bannerbot sets mode: +v graphene

[18:52] *** p6bannerbot sets mode: +v patrickb

[18:53] *** ryn1x left
[18:58] <El_Che> My computer just told me there was an update of the "Rakudo Perl 6 runtime" :)

[18:58] <El_Che> It  means the repo is working fine

[19:03] <Altreus> I did think of just having a RESTful microservice for LDAP creds

[19:04] <El_Che> Or go the oauth/openid-connect/saml route with a ldap backend

[19:04] <El_Che> is the way to go as you don't have to handle secrets

[19:05] <El_Che> (but it's something on the org level)

[19:05] <El_Che> (as it needs work and admin care)

[19:11] <El_Che> Altreus: I have been thinking of a rest service for ldap as well, but because we have a saml infrastructure (and since shortly openid-connect one), the hasn't been enough reason to do the work

[19:12] <rindolf> Altreus: hi

[19:12] *** AlexDaniel left
[19:12] *** AlexDaniel joined
[19:12] *** p6bannerbot sets mode: +v AlexDaniel

[19:13] *** graphene left
[19:15] *** graphene joined
[19:15] *** p6bannerbot sets mode: +v graphene

[19:21] <Altreus> hi rindolf

[19:22] <rindolf> Altreus: sup?

[19:22] <Altreus> yeah we need to support our existing LDAP infrastructure

[19:22] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/10/29/2018-44-diwali-approaching/

[19:23] <Altreus> rindolf: just working from home all evening since I took so much time out of my day

[19:23] <rindolf> Altreus: ah

[19:23] <Altreus> not really tracking my time though :\ I should be

[19:25] * leont has actually attended a Diwali celebration 2 years ago :-)

[19:26] <rindolf> lizmat: thanks

[19:27] <rindolf> Altreus: how is Dee doing?

[19:29] <AlexDaniel> “Note for the curious: this is the last release of the Rakudo compiler that implements version 6.c of Perl 6 by default.”

[19:29] * AlexDaniel sheds a tear

[19:30] * lizmat hugs AlexDaniel 

[19:30] <AlexDaniel> :)

[19:31] <El_Che> lizmat: calling AIX legacy is not nice

[19:31] <El_Che> I would change that

[19:32] <rindolf> Altreus: I successfully finished a paid project.

[19:32] <Altreus> rindolf: Dee left a long time ago

[19:32] <rindolf> Altreus: ah

[19:32] <Altreus> rindolf: an enjoyable project?

[19:32] <lizmat> El_Che: changed

[19:32] <rindolf> Altreus: yes

[19:33] <Altreus> great :)

[19:33] <rindolf> Altreus: i also released Freecell Solver 5.0.0

[19:33] <AlexDaniel> lizmat: fyi, Blin is also Bisectable on drugs. It's possible to use it on a single module to see which rakudo commit introduced a regression. Also here are some preliminary results for 6.c→6.d transition: https://gist.github.com/AlexDaniel/3296f8cbc5dcc9ca55272114f25d5087

[19:34] <El_Che> lizmat: good call :)

[19:35] <El_Che> it's not because we tease the aix guys during the workday with Linux, that we need to do it in the weekly. Certainly now that IBM bought Red Hat (crap).

[19:37] <Geth> ¦ doc: a318b8d717 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/faq.pod6

[19:37] <Geth> ¦ doc: Update to exact date on 6.d release FAQ

[19:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a318b8d717

[19:37] <synopsebot> Link: https://doc.perl6.org/language/faq

[19:37] <lizmat> AlexDaniel: reworded the entry a bit

[19:38] <AlexDaniel> cool, thanks!

[19:39] *** xinming_ is now known as xinming

[19:41] *** domidumont left
[19:46] *** graphene left
[19:55] <El_Che> AlexDaniel: kudos for the release

[19:55] <AlexDaniel> \o/

[19:56] <AlexDaniel> El_Che: hehe more fun ahead

[19:56] *** ryn1x joined
[19:56] *** kensanata joined
[19:56] *** p6bannerbot sets mode: +v kensanata

[19:56] <El_Che> AlexDaniel: always

[19:57] *** p6bannerbot sets mode: +v ryn1x

[20:09] *** cog joined
[20:10] *** p6bannerbot sets mode: +v cog

[20:12] *** MilkmanDan left
[20:13] *** rindolf left
[20:14] *** roguelazer left
[20:16] *** MilkmanDan joined
[20:16] *** p6bannerbot sets mode: +v MilkmanDan

[20:23] *** jc_atikon joined
[20:23] *** rindolf joined
[20:24] *** jc_atikon left
[20:24] *** p6bannerbot sets mode: +v rindolf

[20:27] *** jc_denton1 joined
[20:27] *** p6bannerbot sets mode: +v jc_denton1

[20:33] <ufobat_> cro question, basic authentication, there is a middleware that does help for checking for the authorization

[20:33] <ufobat_> but

[20:33] <ufobat_> it is only working on top of the request

[20:34] <ufobat_> when if i want to modifiy the respose if someone is not logged in correctly?

[20:34] <ufobat_> do i need to write a own middleware based on Cro::HTTP::Middleware::Pair?

[20:34] <ufobat_> or did I not understand something correctly

[20:34] *** cog left
[20:40] <ryn1x> Got a couple liftiff functions working with NativeCall, but what to I do with variadic functions like: `int TIFFGetField(TIFF* tif, uint32 tag, ...);`

[20:41] <ryn1x> sub TIFFGetField(TIFF, uint32, WHAT GOES HERE? ) is native('tiff') { * }

[20:42] <El_Che> will slurpy work?

[20:42] <El_Che> https://docs.perl6.org/type/Signature#Slurpy_(A.K.A._variadic)_parameters?

[20:42] <ryn1x> Im trying that `|`, but havent found something that works yet..

[20:43] <El_Che> *@

[20:43] <El_Che> ?

[20:43] <ryn1x> oh... maybe I was doing it wrong. * not |

[20:43] <El_Che> probably it won't work, but who knows

[20:43] <El_Che> (probably some people on this channel :) )

[20:44] <jc_denton1> Hello,

[20:44] <jc_denton1> I'm working on a small project using IO::Socket::Async. I'm trying write some tests to make sure I'm handling a connection loss properly but my intial atempts didn't go as planned. I thought using a QUIT phaser would work but that didn't give any response in the tests I tried closing the supply but that isn't giving the results I was hoping for. Can someone point me in the right direction on how to handle a connection loss with IO::Socket

[20:44] <jc_denton1> ::Async?

[20:47] <ryn1x> El_Che: *@ does not work... get the error: Too many positionals passed; expected 2 arguments but got 3

[20:49] <El_Che> yeah, expected something like that :(

[20:50] <ryn1x> suprised it isnt mentioned in the nativetypes doc page ... it seems to be used all over c libraries

[20:56] *** cog joined
[20:56] <El_Che> ryn1x: here are some pointers: https://stackoverflow.com/questions/49586031/how-to-handle-varargs-with-nativecall

[20:56] *** p6bannerbot sets mode: +v cog

[20:56] <El_Che> no solution though

[20:59] <tobs> ryn1x: I remember this discussion https://colabti.org/irclogger/irclogger_log/perl6?date=2018-06-17#l683

[20:59] <tobs> iirc, the outlook was bad, 5 months ago

[21:00] <El_Che> good memory

[21:00] <tobs> I'm afraid the best suggestion was to supply a small C library with your module which wraps the variadic function and provides something non-variadic interface for your NativeCall

[21:01] <ryn1x> tobs: thanks

[21:01] <El_Che> yeah, that would work, but it gets us closer to XS territory

[21:06] *** |oLa| joined
[21:06] *** p6bannerbot sets mode: +v |oLa|

[21:07] *** cog left
[21:08] *** cog joined
[21:08] *** p6bannerbot sets mode: +v cog

[21:10] *** |oLa| left
[21:15] *** kensanata left
[21:15] *** marmor joined
[21:16] *** p6bannerbot sets mode: +v marmor

[21:19] *** rindolf left
[21:20] *** pmurias left
[21:23] *** rindolf joined
[21:23] *** p6bannerbot sets mode: +v rindolf

[21:26] *** pmurias joined
[21:26] *** p6bannerbot sets mode: +v pmurias

[21:29] *** zxcvz left
[21:35] <jc_denton1> sorry to ask again. Can someone point me in the right direction with my IO::Socket problem please?

[21:37] *** random_yanek left
[21:43] *** scotticles joined
[21:43] *** p6bannerbot sets mode: +v scotticles

[21:47] <ryn1x> Maybe I wont write a module using NativeCall just yet... pointer stuff is getting weird. Not sure how to handle a function that takes a pointer as it's last argument for it's "return value".

[21:48] <AlexDaniel> jc_denton1: I don't know how to answer your question, but maybe consider asking the same question on stackoverflow?

[21:49] *** random_yanek joined
[21:50] *** p6bannerbot sets mode: +v random_yanek

[21:53] *** ryn1x left
[21:55] *** moony left
[21:55] *** moony joined
[21:55] *** p6bannerbot sets mode: +v moony

[21:58] *** ryn1x joined
[21:59] *** p6bannerbot sets mode: +v ryn1x

[22:00] *** lizmat left
[22:00] *** marmor left
[22:03] <Xliff> m: 1.WHAT.say

[22:03] <camelia> rakudo-moar 266af373d: OUTPUT: «(Int)␤»

[22:03] <Xliff> How can I get that to just say "Int"

[22:03] <Xliff> m: 1.^name.say

[22:03] <camelia> rakudo-moar 266af373d: OUTPUT: «Int␤»

[22:03] <Xliff> OK. Well, there's this situation.

[22:04] <Xliff> class A::B::C {}; my $abc = A::B::C.new; $abc.^WHAT.say

[22:04] <Xliff> m:class A::B::C {}; my $abc = A::B::C.new; $abc.^WHAT.say

[22:04] <evalable6> Xliff, rakudo-moar 3995e4235: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/nZDO0LFmHt␤Cannot …»

[22:04] <evalable6> Xliff, Full output: https://gist.github.com/410b5792dc38d662f5de82b547da2a61

[22:04] <Xliff> m: class A::B::C {}; my $abc = A::B::C.new; $abc.^WHAT.say

[22:04] <camelia> rakudo-moar 266af373d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use .^ on a non-identifier method call␤at <tmp>:1␤------> 3:C {}; my $abc = A::B::C.new; $abc.^WHAT7⏏5.say␤    expecting any of:␤        method arguments␤»

[22:04] <Xliff> m: class A::B::C {}; my $abc = A::B::C.new; $abc.WHAT.say

[22:04] <camelia> rakudo-moar 266af373d: OUTPUT: «(C)␤»

[22:04] <Xliff> m: class A::B::C {}; my $abc = A::B::C.new; $abc.WHAT.say; $abc.^name.say

[22:04] <camelia> rakudo-moar 266af373d: OUTPUT: «(C)␤A::B::C␤»

[22:04] <jc_denton1> AlexDaniel: I'll try asking on there as well thanks.

[22:05] <Xliff> m: class A::B::C {}; my $abc = A::B::C.new; $abc.WHAT.say; $abc.^name.say; $abc.WHAT.Str.say

[22:05] <camelia> rakudo-moar 266af373d: OUTPUT: «(C)␤Use of uninitialized value of type A::B::C in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤A::B::C␤␤  in block <unit> at <tmp> line 1␤»

[22:34] *** pmurias left
[22:38] <Geth> ¦ doc: chsanch++ created pull request #2427: Fix example for Pod::Block::Named. Fixes #2425

[22:38] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2427

[22:39] *** [Coke]_ is now known as [Coke]

[22:42] *** sena_kun left
[22:42] <moony> i kinda wanna write a MUD in perl 6, now that i've gotten the hang of things

[22:42] *** ryn1x left
[22:43] <moony> yet my horrible work ethic means i'll likely never get past the "take input from telnet" stage 🤔 

[22:43] <[Coke]> docs folk, testing a change to xt/examples-compilation that lets you mark a test as requiring its own file for testing; so the majority go through the EVAL path we have, but you can mark problematic ones like those containing "unit" or "is export" as requiring a separate file to run them in. (lets me get xtest passing again)

[22:57] *** scotticles left
[23:10] *** lizmat joined
[23:10] *** p6bannerbot sets mode: +v lizmat

[23:15] *** pecastro left
[23:16] *** patrickb left
[23:20] <Geth> ¦ doc: f8a479f358 | Coke++ | 2 files

[23:20] <Geth> ¦ doc: Allow some tests to compile-check solo.

[23:20] <Geth> ¦ doc: 

[23:20] <Geth> ¦ doc: Allows us to test items that might interfere with other

[23:20] <Geth> ¦ doc: tests when run in a giant EVAL'd environment.

[23:20] <Geth> ¦ doc: 

[23:20] <Geth> ¦ doc: (E.g. having multiple exports of the same name that are

[23:20] <Geth> ¦ doc: only conflicting across multiple files)

[23:20] <Geth> ¦ doc: 

[23:20] <Geth> ¦ doc: solo implies that don't have to wrap the code in

[23:20] <Geth> ¦ doc: anything.

[23:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f8a479f358

[23:20] <Geth> ¦ doc: d67bcde51c | Coke++ | doc/Language/modules.pod6

[23:20] <synopsebot> Link: https://doc.perl6.org/language/modules

[23:20] <Geth> ¦ doc: export test name conflicts with another file

[23:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d67bcde51c

[23:20] <Geth> ¦ doc: d2daaa6138 | Coke++ | 4 files

[23:20] <Geth> ¦ doc: run unit tests

[23:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d2daaa6138

[23:20] *** jc_denton1 left
[23:52] *** nuclearsandwich joined
[23:52] *** p6bannerbot sets mode: +v nuclearsandwich

