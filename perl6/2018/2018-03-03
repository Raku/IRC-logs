[00:03] *** buggable joined
[00:03] *** ChanServ sets mode: +v buggable

[00:03] <buggable> New CPAN upload: App-Platform-0.3.tar.gz by KAJI https://cpan.metacpan.org/authors/id/K/KA/KAJI/Perl6/App-Platform-0.3.tar.gz

[00:04] <buggable> New CPAN upload: Net-LibIDN2-0.0.1.tar.gz by KAIEPI https://cpan.metacpan.org/authors/id/K/KA/KAIEPI/Perl6/Net-LibIDN2-0.0.1.tar.gz

[00:04] <buggable> New CPAN upload: Concurrent-Stack-1.0.tar.gz by JNTHN https://cpan.metacpan.org/authors/id/J/JN/JNTHN/Perl6/Concurrent-Stack-1.0.tar.gz

[00:04] <buggable> New CPAN upload: JSON-Fast-0.9.11.tar.gz by TIMOTIMO https://cpan.metacpan.org/authors/id/T/TI/TIMOTIMO/Perl6/JSON-Fast-0.9.11.tar.gz

[00:04] *** evalable6 left
[00:04] *** evalable6 joined
[00:04] *** ChanServ sets mode: +v evalable6

[00:04] *** cog__ left
[00:04] *** shinobi-cl joined
[00:09] *** pharv joined
[00:14] *** pharv left
[00:27] *** rouking joined
[00:28] <rouking> Is there any nice way of grouping the elements of a list? i.e. I have a list of 100 elements and I want to take 10 at a time to create a 2D array

[00:28] <rouking> s/i.e./e.g.

[00:29] <MasterDuke> rouking: look into rotor

[00:29] <rouking> Ah, thanks

[00:30] <MasterDuke> m: .say for (^10).rotor(3)

[00:30] <camelia> rakudo-moar 440fceacc: OUTPUT: «(0 1 2)␤(3 4 5)␤(6 7 8)␤»

[00:30] <rouking> I knew there was an easy way

[00:30] <rouking> I totally glossed over rotor

[01:09] *** skids joined
[01:18] *** konsolebox left
[01:20] *** konsolebox joined
[01:22] *** unicodable6 left
[01:22] *** unicodable6 joined
[01:22] *** ChanServ sets mode: +v unicodable6

[01:34] *** martinp2 joined
[01:37] *** vike left
[01:38] <gfldex> m: sub s(*@a){}; say &s.arity

[01:38] <camelia> rakudo-moar 440fceacc: OUTPUT: «0␤»

[01:52] *** pharv joined
[01:53] *** konsolebox left
[01:53] *** konsolebox joined
[01:57] *** pharv left
[01:58] *** konsolebox left
[01:59] *** konsolebox joined
[02:01] *** dct_ joined
[02:03] <shinobi-cl> hi all.... so, the idea of the perl method is to have an EVALuable expression, representing the object so it can be serialized... right?

[02:03] <yoleaux> 27 Feb 2018 10:59Z <timotimo> shinobi-cl: pause is the favoured way to get them up on modules.perl6.org, but the old way remains: to put an URL that points to your META6.json into the META.list on https://github.com/perl6/ecosystem - that will mean installing your module will pull whatever commit is current on the master branch, though. cpan lets you have proper versions instead

[02:03] <yoleaux> 27 Feb 2018 11:05Z <Zoffix> shinobi-cl: You can use App::Mi6 module instead to upload

[02:14] *** Zoffix joined
[02:14] <Zoffix> shinobi-cl: right. With the exception of non-serializable objects (like, code blocks, or IO::Handles)

[02:18] <shinobi-cl> i happen to have an class which objects can not actually be serializable. it's functionality depends on other object, so the only way to serialize it properly is to include the other object in it.

[02:19] <shinobi-cl> so, in thhat case, should i have a perl method retutning Nil? no perl method at all?

[02:19] <Zoffix> All types inherit a .perl from Mu. Why not serialize the other object too?

[02:20] <Zoffix> m: class Foo { has $.meow }; class Bar { has $.foo = Foo.new: :42meow }; say Bar.new.perl

[02:20] <camelia> rakudo-moar 440fceacc: OUTPUT: «Bar.new(foo => Foo.new(meow => 42))␤»

[02:20] <Zoffix> You could die if your object isn't serializeable

[02:20] <Zoffix> m: (1…*).perl

[02:20] <camelia> rakudo-moar 440fceacc: OUTPUT: «Cannot .elems a lazy list␤  in block <unit> at <tmp> line 1␤␤»

[02:23] <shinobi-cl> mmmm i guess it makes sense to serialize the external object too. Since the idea in serializing is to be able to recreate the object completely.

[02:24] <shinobi-cl> even if the external object might be many times bigger than the actual object being serialized

[02:44] *** cfa joined
[02:45] <cfa> evening all

[02:45] *** ilbot3 left
[02:46] <Zoffix> \o

[02:46] <cfa> a couple of questions: (i) is tilde expansion still not provided in a builtin function or IO::Path method?

[02:46] <cfa> and (ii) is .path missing from the Cool docs intentionally, or is that just an oversight?

[02:47] <Zoffix> cfa: (i) tilde expansion won't be provided ever. (ii) wasn't even aware that was implemented. If it's not part of 6.c spec, it'll be removed

[02:48] <Zoffix> s: 42, 'path', \()

[02:48] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/440fceacc/src/core/Cool.pm6#L212

[02:48] <cfa> Zoffix: i typo'd that in the repl and was surprised to get a path back

[02:48] <cfa> re: tilde expansion, what's the reasoning? it's not very dwimmy to omit it

[02:49] <cfa> i understand not wanting to implement whole slew of globbing functionality but this seems fairly common to the point of being an expectation

[02:49] <Zoffix> C:\Users\zoffi>cd ~

[02:49] <Zoffix> The system cannot find the path specified.

[02:50] *** pharv joined
[02:50] <cfa> what does p5 do with: perl -E 'say glob "~/"'

[02:50] <cfa> (on windows)

[02:51] <Zoffix> C:\Temp>perl -E "say glob '~/'"

[02:51] <Zoffix> C:\Users\zoffi/

[02:51] <cfa> ah, so ~ is hardcoded to mean $*HOME?

[02:51] <cfa> er, sorry to mix languages there

[02:52] <Zoffix> Probably. But also filenames with tildes work and "~" doesn't mean "home" on Windows, so that's the reasoning for not doing any magical shell expansion; just as "-".IO will lose its special meaning in 6.d

[02:53] <Zoffix> C:\Temp>perl6 -e "say '~.txt'.IO.slurp"

[02:53] <Zoffix> testing

[02:53] <cfa> that much makes sense

[02:53] <cfa> but hopefully you take my point re: dwim

[02:53] <cfa> i'm sure this has been discussed to death already though

[02:54] *** dct_ left
[02:54] <Zoffix> Well yeah, and if you want expansion, juse use $*HOME

[02:54] <Zoffix> C:\Temp>perl6 -e "$*HOME andthen .add('.perl6').dir.elems.say"

[02:54] <Zoffix> 3

[02:54] <cfa> yeah

[02:55] <cfa> the trouble is: ./foo.p6 --param=~/bar

[02:55] <cfa> then needs to be processed in my script

[02:55] *** pharv left
[02:56] <cfa> and by processed i mean with a user defined sub rather than a simple builtin like p5's glob

[02:57] *** ilbot3 joined
[02:57] *** ChanServ sets mode: +v ilbot3

[02:57] *** cdg joined
[02:58] <Zoffix> You can't really use glob for that.

[02:58] <Zoffix> $ perl -E 'say glob shift' "~/foo bar"

[02:58] <Zoffix> /home/zoffix/foobar

[02:58] <Zoffix> $ perl -E 'use File::Glob qw/bsd_glob/; say bsd_glob shift' "~/foo bar"

[02:58] <Zoffix> /home/zoffix/foo bar

[02:59] <Zoffix> Too bad `--param ~/bar` isn't accepted by `sub MAIN`. Otherwise, the shell would've just expanded it

[02:59] *** epony left
[02:59] <cfa> yeah, it's the = that's making this problematic

[02:59] <cfa> and i take your point re: lazy (!) use of glob

[03:00] *** cog__ joined
[03:01] *** mcmillhj joined
[03:02] *** cdg left
[03:04] *** natrys joined
[03:06] *** mcmillhj left
[03:11] <Zoffix> .tell AlexDaniel tossed unspecced/undocumented/unloved Cool.path. I'm assuming no one's using it, but your call on whether we should push it through deprecation period: https://github.com/rakudo/rakudo/commit/b212fc5e20  (same goes for Range.clone-with-op that was nuked earlier today, I guess)

[03:11] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[03:12] *** martinp2 left
[03:18] *** epony joined
[03:37] <Zoffix> gd

[03:38] <Zoffix> oops. This ain't my terminal

[03:38] *** mcmillhj joined
[03:42] *** mcmillhj left
[03:46] *** ufobat___ joined
[03:47] *** Rawriful left
[03:49] *** ufobat_ left
[03:53] *** ZzZombo joined
[04:03] *** mcmillhj joined
[04:07] <ZzZombo> How can I make a parametrizable class declarator, like `custom-declarator A[foo=123] {...}`?

[04:07] <cfa> Zoffix: hey, just did a fresh install of zef

[04:07] <ZzZombo> What does make roles parametrizable?

[04:07] <cfa> ===> Testing: zef:ver<0.2.3>:auth<github:ugexe>

[04:07] <cfa> No such method 'path' for invocant of type 'Str'. Did you mean any of these?

[04:07] <cfa> so, it's relying on Cool.path

[04:08] *** mcmillhj left
[04:14] <Zoffix> cfa: are you sure you're fresh-installing on latest Rakudo?

[04:14] <Zoffix> ===> Testing [OK] for zef:ver<0.2.3>:auth<github:ugexe>

[04:14] <Zoffix> ===> Installing: zef:ver<0.2.3>:auth<github:ugexe>

[04:14] <cfa> hmm, i thought i was installing against HEAD, yeah

[04:14] <Zoffix> cfa: ok, lemme check if I am

[04:14] <Zoffix> (I'm using zscript, but I think it uses my build, not system perl6)

[04:15] <cfa> pretty sure i'm on the latest as zef's trying to take the .path of Str

[04:15] <cfa> which is now missing

[04:17] <Zoffix> m: $*PERL6.compiler.version.say; Str.^lookup("path").say

[04:17] <camelia> rakudo-moar b212fc5e2: OUTPUT: «Dynamic variable $*PERL6 not found␤  in block <unit> at <tmp> line 1␤␤»

[04:17] <Zoffix> m: $*PERL.compiler.version.say; Str.^lookup("path").say

[04:17] <camelia> rakudo-moar b212fc5e2: OUTPUT: «v2018.02.1.105.gb.212.fc.5.e.2␤(Mu)␤»

[04:20] *** wamba joined
[04:21] <Zoffix> right, reproed

[04:23] <cfa> https://github.com/ugexe/zef/blob/master/lib/Zef/Client.pm6#L362 for example

[04:23] *** mcmillhj joined
[04:23] *** [particle] joined
[04:23] *** [particle]1 left
[04:24] <Zoffix> .dist has $.path attribute tho

[04:24] <cfa> ah okay

[04:24] <Zoffix> looks to be this: lib/Zef/Service/Shell/git.pm6:151:        my $checkout = ($uri.path // '').match(/\@(.*)[\/|\@|\?|\#]?/)[0];

[04:28] *** mcmillhj left
[04:29] <cfa> and 146

[04:37] *** natrys left
[04:38] <Geth> ¦ doc: 4fbafe2578 | (Zoffix Znet)++ | doc/Type/Cool.pod6

[04:38] <synopsebot> Link: https://doc.perl6.org/type/Cool

[04:38] <Geth> ¦ doc: Document unspecced Cool.path

[04:38] <Geth> ¦ doc: 

[04:38] <Geth> ¦ doc: It's unspecced and never will be, but there's some use of it in the

[04:38] <Geth> ¦ doc: wild, so document it together with message that it's deprecated and users

[04:38] <Geth> ¦ doc: should use .IO instead (.IO has slightly different behaviour in that

[04:38] <Geth> ¦ doc: Cool:U returns an IO::Path:U, rather than stringifying and then blowing

[04:38] <Geth> ¦ doc: up when trying to make an empty IO::Path).

[04:38] <Geth> ¦ doc: 

[04:38] <Geth> ¦ doc: Listed for deprecation in 6.d-prep in

[04:38] <Geth> ¦ doc: https://github.com/perl6/6.d-prep/commit/87d4fbacde

[04:38] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4fbafe2578

[04:39] <Zoffix> cfa: thanks. Reverted in https://github.com/rakudo/rakudo/commit/76eff07dd6 and marked a TODO for deprecation of it in in 6.d in https://github.com/perl6/6.d-prep/commit/87d4fbacde

[04:39] *** galactus6x joined
[04:39] <Zoffix> .tell AlexDaniel nm, turned out zef was using Cool.path. Gonna do deprecation in 6.d and removal in 6.e instead; even though it ain't in any spec. https://irclog.perlgeek.de/perl6/2018-03-03#i_15879089

[04:39] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[04:40] *** Mithaldu left
[04:40] *** mcmillhj joined
[04:40] <galactus6x> Hi folks! 

[04:40] <Zoffix> \o

[04:40] *** bhm left
[04:40] *** bhm joined
[04:40] <galactus6x> I have a question that may sound dumb but I tried to google it and got nowhere. 

[04:40] *** Mithaldu joined
[04:40] <Zoffix> Cool. We love dumb questions.

[04:41] <galactus6x> Okee Dokee...

[04:41] <Zoffix> :)

[04:42] <galactus6x> Well, I have both Rakudo Perl6 and Perl 5.24 on my computers.  When I try to use the line use V6; it gives an error that I have Perl 5.24 and this is perl6 or something like that. I want to know how to be sure I am coding with perl6. 

[04:43] <galactus6x> When I start the REPL in perl6 it uses perl6. But when I write a script I am not so sure then. I use Geany.

[04:44] <cfa> Zoffix: ta

[04:44] *** mcmillhj left
[04:45] <Zoffix> galactus6x: yeah, that's what `use v6` line is for, to show the error like "Perl v6.0.0 required--this is only v5.26.1, stopped at -e line 1"; so that gets you covered if you accidentally run Perl 6 code with `perl`. Going the other way, you should use `use strict; use warnings;` (or `use strictures 2`) all your Perl 5 scripts and neither `warnings` no `strictures` pragmas exists (and I'm unaware of the

[04:45] <Zoffix> modules with those names), so you'd get an error there too

[04:46] <Zoffix> you could also alias perl6 to something different. like just `6` or `rakudo` and run scripts with `6 -e 'say 42'` for example. Will be less likely you'll confuse the names and type the wrong one by accident

[04:48] <galactus6x> Wow. Thanks. I think I just don't need that v6 line if I am sure I want perl6. 

[04:48] <Zoffix> Correct.

[04:50] *** konsolebox left
[04:50] *** mcmillhj joined
[04:51] *** pharv joined
[04:51] <galactus6x> You guys are great. Glad I stuck with Perl. 

[04:51] <galactus6x> have a great weekend! 

[04:52] <Zoffix> You too!

[04:52] *** konsolebox joined
[04:55] *** mcmillhj left
[04:55] *** pharv left
[04:55] <shinobi-cl> hi all

[04:56] <shinobi-cl> how can i make this work? 

[04:56] <shinobi-cl> m: subset Pos of Int where * >= 1; sub test(Array[Pos] @list) { @list.perl }; say test( [1,2,3] );

[04:56] <camelia> rakudo-moar 76eff07dd: OUTPUT: «Type check failed in binding to parameter '@list'; expected Positional[Array[Pos]] but got Array ($[1, 2, 3])␤  in sub test at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[04:56] *** galactus6x left
[04:56] <shinobi-cl> m: subset Pos of Int where * >= 1; sub test(Pos $x) { $x.perl }; say test(1);

[04:56] <camelia> rakudo-moar 76eff07dd: OUTPUT: «1␤»

[04:56] <Zoffix> m: subset Pos of Int where * ≥ 1; sub test(Array[Pos] @list) { @list.perl }; say test Array[Pos].new: 1,2,3;

[04:56] <camelia> rakudo-moar 76eff07dd: OUTPUT: «Type check failed in binding to parameter '@list'; expected Positional[Array[Pos]] but got Array[Pos] (Array[Pos].new(1, 2, 3))␤  in sub test at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[04:57] <Zoffix> m: subset Pos of Int where * ≥ 1; sub test(Array[Pos] @list) { @list.perl }; say test Array[Array[Pos]].new: 1,2,3;

[04:57] <camelia> rakudo-moar 76eff07dd: OUTPUT: «Type check failed in assignment to ; expected Array[Pos] but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[04:57] <Zoffix> m: subset Pos of Int where * ≥ 1; sub test(Array[Pos] @list) { @list.perl }; say test Array[Array[Pos]].new: Array[Pos].new: 1,2,3;

[04:57] <camelia> rakudo-moar 76eff07dd: OUTPUT: «Type check failed in assignment to ; expected Array[Pos] but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[04:57] <Zoffix> beh

[04:57] <shinobi-cl> the idea is not using this part :)        ->             Array[Pos].new:

[04:57] <Zoffix> shinobi-cl: well, let's step back. What are you trying to accept as a parameter?

[04:57] <shinobi-cl> m: subset Pos of Int where * >= 1; sub test(Pos $x) { $x.perl }; say test(1);     

[04:57] <camelia> rakudo-moar 76eff07dd: OUTPUT: «1␤»

[04:58] <shinobi-cl> this works, because 1 is accepted by the type Pos

[04:58] <shinobi-cl> m: subset Pos of Int where * >= 1; sub test(Array[Pos] @list) { @list.perl }; say test( [1,2,3] );

[04:58] <camelia> rakudo-moar 76eff07dd: OUTPUT: «Type check failed in binding to parameter '@list'; expected Positional[Array[Pos]] but got Array ($[1, 2, 3])␤  in sub test at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[04:58] <Zoffix> m: subset Pos of Int where * ≥ 1; sub test(@list where .all ~~ Pos) { @list.perl }; say test [1, 2, 3]

[04:58] <camelia> rakudo-moar 76eff07dd: OUTPUT: «[1, 2, 3]␤»

[04:58] <shinobi-cl> the elements here all comply with type Pos

[04:58] *** travis-ci joined
[04:58] <travis-ci> Doc build passed. Zoffix Znet 'Document unspecced Cool.path

[04:58] <travis-ci> https://travis-ci.org/perl6/doc/builds/348543882 https://github.com/perl6/doc/compare/2edc06200129...4fbafe2578aa

[04:58] *** travis-ci left
[04:59] <shinobi-cl> ahh that was the syntax i was looking for... thanks Zoffix++ :)

[04:59] <Zoffix> shinobi-cl: ^ that then. `Array[Pos] @list` means "Array parameterized with Array parametarized with Pos" and there's some bugs with that IIRC

[04:59] <Zoffix> (well, probably, there's something about subsets)

[04:59] *** skids left
[05:00] <shinobi-cl> m: subset Pos of Int where * ≥ 1; sub test(@list where {all(*) ~~ Pos}) { @list.perl }; say test [1, 2, 3]

[05:00] <camelia> rakudo-moar 76eff07dd: OUTPUT: «Constraint type check failed in binding to parameter '@list'; expected anonymous constraint to be met but got Array ($[1, 2, 3])␤  in sub test at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[05:00] <shinobi-cl> that was the syntax i was trying...

[05:01] <Zoffix> m: subset Pos of Int where * ≥ 1; sub test(@list where *.all ~~ Pos) { @list.perl }; say test [1, 2, 3]

[05:01] <camelia> rakudo-moar 76eff07dd: OUTPUT: «Constraint type check failed in binding to parameter '@list'; expected anonymous constraint to be met but got Array ($[1, 2, 3])␤  in sub test at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[05:01] <Zoffix> uh-oh

[05:02] <Zoffix> m: say *.all ~~ Int

[05:02] <camelia> rakudo-moar 76eff07dd: OUTPUT: «False␤»

[05:02] <Zoffix> Ah, ok, it doesn't close over it

[05:03] <Zoffix> But if it did, that'd be the syntax. You don't use the whatever star and a block together, as the whatever star make a closure already. Also, you can't just pass it alone as args `all(*)`; when it's by itself, that's just a Whatever object, not a WhateverCode closure.

[05:04] <Zoffix> And lastly, `where` thunks, so you can often (but not always) omit both the WhateverStar and the block.

[05:04] *** mcmillhj joined
[05:04] <Zoffix> (the "Tip" section at the bottom of this section shows the subtle difference in the thunks: https://docs.perl6.org/type/Signature#Type_Constraints )

[05:08] <Zoffix> Don't see the Issue for the bug in constraints of iterables in variables vs. params.. Forget what it was called

[05:09] *** mcmillhj left
[05:09] <Zoffix> Probably R#1414

[05:09] <synopsebot> R#1414 [open]: https://github.com/rakudo/rakudo/issues/1414 Class attribute constraints applied on elements of array attribute, not the attribute itself

[05:13] <ZzZombo> Zoffix, can you help me too, the question was posted above?

[05:13] *** cdg joined
[05:15] <Zoffix> ZzZombo: I don't know the answer. I think one of the meta classes handles parameterization https://github.com/rakudo/rakudo/tree/master/src/Perl6/Metamodel  maybe ParametricRoleHOW.nqp https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/ParametricRoleGroupHOW.nqp or ParametricRoleHOW.nqp https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/ParametricRoleHOW.nqp   I think the way it

[05:15] <Zoffix> works is when you define a role you get a ParametricGroupHOW which functions like a dispatcher for specific roles (like a dispatcher for routines dispatches for multies)

[05:15] <Zoffix> m: my role Foo {}; Foo.HOW.^name.say

[05:15] <camelia> rakudo-moar 76eff07dd: OUTPUT: «Perl6::Metamodel::ParametricRoleGroupHOW␤»

[05:16] <Zoffix> m: my role Foo {}; Foo.^candidates.map(*.^name).say

[05:16] <camelia> rakudo-moar 76eff07dd: OUTPUT: «(Foo)␤»

[05:16] <Zoffix> m: my role Foo {}; Foo.^candidates.map(*.HOW.^name).say

[05:16] <camelia> rakudo-moar 76eff07dd: OUTPUT: «Cannot resolve caller map(List: Str); none of these signatures match:␤    ($: Hash \h, *%_)␤    (\SELF: &block;; :$label, :$item, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[05:16] <ZzZombo> Okay, I'll take a look.

[05:16] <Zoffix> m: my role Foo {}; Foo.^candidates.map({.HOW.^name}).say

[05:16] <camelia> rakudo-moar 76eff07dd: OUTPUT: «(Perl6::Metamodel::ParametricRoleHOW)␤»

[05:17] *** konsolebox left
[05:18] *** cdg left
[05:18] *** konsolebox joined
[05:19] *** chakli joined
[05:19] *** khw left
[05:21] *** mcmillhj joined
[05:24] *** chakli left
[05:26] <shinobi-cl> m: subset Pos of Int where * >= 1; sub test1(Array[Pos] $list) { say "test1"; }; sub test2(@list where .all ~~ Pos) { say "test2"; }; my Pos @list = (1..1000).eager; { test1(@list); say "== test1 : $(now - ENTER now) secs. =="; }; { test2(@list); say "== test1 : $(now - ENTER now) secs. =="; }

[05:26] <ZzZombo> What is an "archetype" in the metaclasses?

[05:26] <camelia> rakudo-moar 76eff07dd: OUTPUT: «test1␤== test1 : 0.00176882 secs. ==␤test2␤== test1 : 0.02749649 secs. ==␤»

[05:26] *** mcmillhj left
[05:27] <shinobi-cl> m: subset Pos of Int where * >= 1; sub test1(Array[Pos] $list) { say "test1"; }; sub test2(@list where .all ~~ Pos) { say "test2"; }; my Pos @list = (1,2,3).eager; { test1(@list); say "== test1 : $(now - ENTER now) secs. =="; }; { test2(@list); say "== test1 : $(now - ENTER now) secs. =="; }

[05:27] <camelia> rakudo-moar 76eff07dd: OUTPUT: «test1␤== test1 : 0.0015581 secs. ==␤test2␤== test1 : 0.00063560 secs. ==␤»

[05:28] <shinobi-cl> i guess that is better to be more "rigid" in the types when using large sets. test2 seems more convenient to write but it has to check every element each time.

[05:28] *** eliasr left
[05:29] <ZzZombo> Well, the first one does that too, actually.

[05:30] <Zoffix> shinobi-cl: no point in `.eager` call there. Assignment to @ sigils is "mostly-eager"; so it'll be eager, unless the thing is marked as .is-lazy (which mostly happens on infinite things).

[05:32] <ZzZombo> m: dd role {}.^body_block()

[05:32] <camelia> rakudo-moar 76eff07dd: OUTPUT: «sub (::$?CLASS ::::?CLASS Mu $) { #`(Sub|54740296) ... }␤»

[05:32] <ZzZombo> what's this?

[05:33] *** mcmillhj joined
[05:35] *** shinobi-cl left
[05:36] *** chakli joined
[05:37] <chakli> what would the equivalent of https://gist.github.com/willurd/5720255 in perl6?

[05:37] *** mcmillhj left
[05:39] <Zoffix> heh, good question

[05:39] <Zoffix> The listed commands there are hardly equivalent to each other :)

[05:41] <chakli> ok *similar :)

[05:41] <chakli> i hardly know any of those languages to notice they are not equivalent

[05:44] <Zoffix> chakli: I don't have Bailador installed so it's untested, but based on docs, it'd be something like `perl6 -MBailador -e 'static-dir /(.+)/ => "."; baile;'`

[05:44] <Zoffix> It's this module: https://github.com/Bailador/Bailador

[05:45] *** mcmillhj joined
[05:45] <Zoffix> Also, I'm not familiar with it, but there might be some Cro one-liner as well ( project's website: http://mi.cro.services/ )

[05:47] <chakli> ok, nothing built in like python i suppose

[05:47] <chakli> btw is there a list of core modules like perl had?

[05:49] *** mcmillhj left
[05:50] <Zoffix> chakli: right, nothing built in; only plain async and non-async sockets. Depends on what you define as "core". Our end-user facing releases are shipped as Rakudo Star distribution and those modules are these: https://github.com/rakudo/star/tree/master/modules I see it includes "HTTP::Easy" module; there's no shiny one-liner, but some server is available:

[05:50] *** shinobi-cl joined
[05:50] <Zoffix> https://github.com/supernovus/perl6-http-easy/tree/8742272c4913e6e05895f90c96262cd0c37772d1#example but many users use the compiler releases directly, in which case the "core" has only a couple of modules, like Test and NativeCall (full list: http://modules.perl6.org/search/?q=from%3Acore )

[05:52] <Zoffix> chakli: installed Bailador and tested that one-liner. It serves on port 3000 by default and doesn't offer a listing (but files do get served, if you type the names to them)

[05:54] <Zoffix> This one-liner does show a non-navigable root-dir file listing: perl6 -MBailador -e 'get "/" => { join "<br>", dir.map: {“<a href="/$_">$_\</a>”} }; static-dir /(.+)/ => "."; baile'

[05:55] <Zoffix> I don't use that stuff.... for all I know there might be a plugin you just load and get a browseable listing

[05:59] <chakli> ok :) thanks

[06:04] *** kaare_ left
[06:24] <chakli> Does anyone know if there a https server by any chance? I cant figure out if HTTP::Easy supports it.

[06:26] <Zoffix> It probably doesn't, seeing as it doesn't have neither blocking nor async IO::Socket::SSL in prereqs. Cro does list HTTPS server in the list of its features tho (last sliding panel on the home page): http://mi.cro.services/

[06:32] <chakli> yeah 2 slides do say https

[06:33] *** mcmillhj joined
[06:37] *** chakli left
[06:37] <ZzZombo> m: Proxy.new(:FETCH(method(){},method($value){$value.say}))=123;

[06:37] <camelia> rakudo-moar a918028e0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$value' is not declared. Did you mean '&values'?␤at <tmp>:1␤------> 3Proxy.new(:FETCH(method(){},method(7⏏5$value){$value.say}))=123;␤»

[06:37] *** mcmillhj left
[06:38] <ZzZombo> what???

[06:38] *** kaare_ joined
[06:40] <timotimo> ZzZombo: put a space after method

[06:40] <yoleaux> 02:06Z <MasterDuke> timotimo: my perf report shows 80% spent in MVM_profile_instrumented_mark_data

[06:41] <timotimo> ZzZombo: you're spelling out a call to a sub called method

[06:41] <timotimo> m: sub method { say "ohai" }; method($_){}

[06:41] <camelia> rakudo-moar a918028e0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling method(Mu) will never work with declared signature ()␤at <tmp>:1␤------> 3sub method { say "ohai" }; 7⏏5method($_){}␤»

[06:41] <timotimo> m: sub method(|) { say "ohai" }; method($_){}

[06:41] <camelia> rakudo-moar a918028e0: OUTPUT: «ohai␤»

[06:42] <ZzZombo> Well, shouldn't it first complain about undeclared identifier?

[06:42] <ZzZombo> 'method' I mean

[06:43] <timotimo> no, you can post-declare subs

[06:43] <timotimo> m: method(1234); sub method($_) { say "hi $_" }

[06:43] <camelia> rakudo-moar a918028e0: OUTPUT: «hi 1234␤»

[06:43] *** troys left
[06:46] *** kaare__ joined
[06:48] *** kaare_ left
[06:49] *** mcmillhj joined
[06:51] <Zoffix> Also, you don't have to use methods

[06:51] <Zoffix> m: Proxy.new(:FETCH{;},:STORE(->$,$v {$v.say}))=123;

[06:51] <camelia> rakudo-moar a918028e0: OUTPUT: «123␤»

[06:51] <Zoffix> eco: Proxee

[06:51] <buggable> Zoffix, Proxee 'A more usable Proxy with bells': https://github.com/zoffixznet/perl6-Proxee

[06:52] <timotimo> using a method for proxies can lead to trouble

[06:52] <Zoffix> Like what?

[06:53] <timotimo> m: class Test { has $.x; has $.y; has $.z; has $.xx; has $.xy; has $.xz; has $.a; method proxit is rw { Proxy.new(fetch => method ($) { say $!a; $!a }, store => method ($, $) { say "stored" }) } }; Test.new(a => 99).proxit.say

[06:53] <camelia> rakudo-moar a918028e0: OUTPUT: «Required named parameter 'FETCH' not passed␤  in method proxit at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:53] <timotimo> m: class Test { has $.x; has $.y; has $.z; has $.xx; has $.xy; has $.xz; has $.a; method proxit is rw { Proxy.new(FETCH => method ($) { say $!a; $!a }, STORE => method ($, $) { say "stored" }) } }; Test.new(a => 99).proxit.say

[06:53] <camelia> rakudo-moar a918028e0: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in method <anon> at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:53] *** mcmillhj left
[06:54] <timotimo> m: class Test { has $.x; has $.y; has $.z; has $.xx; has $.xy; has $.xz; has $.a; method proxit is rw { Proxy.new(FETCH => method (|) { say $!a; $!a }, STORE => method (|) { say "stored" }) } }; Test.new(a => 99).proxit.say

[06:54] <camelia> rakudo-moar a918028e0: OUTPUT: «P6opaque: no such attribute '$!a' on type Test in a Proxy when trying to get a value␤  in method <anon> at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:54] <Zoffix> Ah. OK :)

[06:55] <timotimo> the code inside believes it's compiling for a Test, but it's being invoked with a self of type Test

[06:55] <timotimo> er

[06:55] <timotimo> of type Proxy

[06:55] <timotimo> so it's trying to get Proxy's $!a, which doesn't exist

[06:55] <timotimo> at some point i think this segfaulted?

[06:56] <timotimo> committable: releases class Test { has $.x; has $.y; has $.z; has $.xx; has $.xy; has $.xz; has $.a; method proxit is rw { Proxy.new(FETCH => method (|) { say $!a; $!a }, STORE => method (|) { say "stored" }) } }; Test.new(a => 99).proxit.say

[06:56] <committable6> timotimo, https://gist.github.com/3ec1c51f33b5794776cee6a682c86292

[06:57] *** wamba left
[06:57] <timotimo> yeah, from 2015.12 through 2016.08.1 it segfaulted

[07:03] *** AlexDaniel joined
[07:07] *** mcmillhj joined
[07:11] *** mcmillhj left
[07:23] *** mcmillhj joined
[07:25] *** darutoko joined
[07:29] *** mcmillhj left
[07:33] *** aindilis left
[07:34] *** dct_ joined
[07:39] *** Actualeyes left
[07:42] *** mcmillhj joined
[07:47] *** mcmillhj left
[07:55] *** dct_ left
[07:55] *** mcmillhj joined
[07:57] *** greppable6 left
[07:59] *** mcmillhj left
[08:03] *** dct_ joined
[08:04] *** wamba joined
[08:09] <ZzZombo> I'm confused, do I need `is raw` on sigilles parameter?

[08:10] <timotimo> no, sigilless implies "is raw"

[08:13] <ZzZombo> Well, Zoffix's code at https://github.com/zoffixznet/perl6-Proxee/blob/master/lib/Proxee.pm6#L43 has that combination.

[08:14] <timotimo> could be documentational

[08:17] *** robertle joined
[08:23] <buggable> New CPAN upload: JSON-Hjson-0.0.1.tar.gz by AKIYM https://cpan.metacpan.org/authors/id/A/AK/AKIYM/Perl6/JSON-Hjson-0.0.1.tar.gz

[08:25] *** rindolf joined
[08:26] *** mcmillhj joined
[08:28] *** dct_ left
[08:31] *** mcmillhj left
[08:32] *** sena_kun joined
[08:40] *** mcmillhj joined
[08:41] *** wamba left
[08:44] *** mcmillhj left
[08:46] *** wamba joined
[08:47] *** wamba1 joined
[08:50] *** wamba left
[08:52] *** pharv joined
[08:56] *** pharv left
[09:04] *** wamba1 left
[09:09] *** aindilis joined
[09:13] *** cdg joined
[09:18] *** cdg left
[09:20] *** espadrine left
[09:24] *** mcmillhj joined
[09:28] *** |oLa| joined
[09:29] <ZzZombo> When will zef's "No such method 'subst' for invocant of type 'Any'" be fixed?

[09:29] *** mcmillhj left
[09:34] <moritz> ZzZombo: which issue is that, on github?

[09:35] <ZzZombo> https://github.com/ugexe/zef/issues/213

[09:35] <timotimo> well, someone seems to think it's fixed already

[09:35] <moritz> right, so nobody will work on it

[09:36] <moritz> if the problem resurfaced again, with a current version of zef, you should open a new issue, possibly referencing the old one

[09:40] *** shinobi-cl left
[09:49] <ZzZombo> huh, why is it so? Does not it just fall into the `\(Mu:U,Mu:U)` candidate, does it? Or an Attribute-specific one is needed perhaps, like there is one for Variable.

[09:49] <ZzZombo> m: role R {};class A {has $.a is R}

[09:49] <camelia> rakudo-moar a918028e0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤is trait on $-sigil variable not yet implemented. Sorry.␤Did you mean: my R $a?␤at <tmp>:1␤------> 3role R {};class A {has $.a is R7⏏5}␤    expecting any of:␤        constraint␤»

[09:49] <ZzZombo> Either way, seems like a strange omission.

[09:50] <timotimo> i feel like i missed a line or two in between that?

[09:50] <ZzZombo> No?

[09:50] <timotimo> oh, the sentence refered to the next line

[09:50] <ZzZombo> Ah, yea.

[09:50] <timotimo> it wouldn't use Mu:U because Attribute objects used there are instances, not type objects

[09:51] <ZzZombo> Good catch.

[09:51] <timotimo> s: &trait_mod:<is>, \(Attribute.new, Rational)

[09:51] <SourceBaby> timotimo, Something's wrong: ␤ERR: Required named parameter 'name' not passed␤  in block <unit> at -e line 6␤␤

[09:52] <timotimo> s: '&trait_mod:<is>', \(Attribute.new, Rational)

[09:52] <SourceBaby> timotimo, Something's wrong: ␤ERR: Required named parameter 'name' not passed␤  in block <unit> at -e line 6␤␤

[09:52] <timotimo> oh, the constructor for the attribute

[09:52] <timotimo> s: '&trait_mod:<is>', \(Rat.^attributes[0], Rational)

[09:52] <SourceBaby> timotimo, Something's wrong: ␤ERR: Cannot resolve caller sourcery(Str, Capture); none of these signatures match:␤    ($thing, Str:D $method, Capture $c)␤    ($thing, Str:D $method)␤    (&code)␤    (&code, Capture $c)␤  in block <unit> at -e line 6␤␤

[09:52] <timotimo> s: &trait_mod:<is>, \(Rat.^attributes[0], Rational)

[09:52] <SourceBaby> timotimo, Sauce is at https://github.com/rakudo/rakudo/blob/a918028e0/src/core/traits.pm6#L76

[09:53] <timotimo> looks like it actually gets its exception thrown right in the parser before trait_mod:<is> is even called to figure out if it's implemented or not

[09:56] *** dct_ joined
[10:01] *** travis-ci joined
[10:01] <travis-ci> Doc build passed. Aleks-Daniel Jakimenko-Aleksejev 'Mention fancy unicode variables in STYLEGUIDE

[10:01] <travis-ci> https://travis-ci.org/perl6/doc/builds/348396073 https://github.com/perl6/doc/compare/718294c54fa1...2edc06200129

[10:01] *** travis-ci left
[10:02] <ZzZombo> Can that be changed? Why block something like that this hard? On the grammar level even.

[10:03] *** travis-ci joined
[10:03] <travis-ci> Doc build passed. Zoffix Znet 'Use prettier ASCII art for file trees

[10:03] <travis-ci> https://travis-ci.org/perl6/doc/builds/348376519 https://github.com/perl6/doc/compare/990adfde1ec4...a0451bd3cedd

[10:03] *** travis-ci left
[10:03] <timotimo> do you expect it to be the same as putting the typen ame in front?

[10:04] <ZzZombo> Sorry, what?

[10:04] <timotimo> do you expect "has Foo $.a" to mean the same thing as "has $.a is Foo"?

[10:04] <ZzZombo> no

[10:04] <timotimo> OK

[10:04] <ZzZombo> is should be applied straight to the Attribute, like everywhere else.

[10:05] <timotimo> well, it's trivial to unblock it from the grammar once the underlying feature is implemented

[10:05] <timotimo> though we probably do want to check if the user has maybe defined or imported a custom trait_mod:<is> for this feature

[10:05] <timotimo> and not explode in that case

[10:06] <timotimo> and fwiw since trait mods are already run at parse time anyway, we could implement the throwing in a multi candidate for that as well

[10:07] <ZzZombo> Yea, it surprised me it doesn't do that already.

[10:08] <ZzZombo> And decided to explode even.

[10:08] <ZzZombo> Oh well, a blocker in sight until that is out of the way.

[10:09] *** wamba joined
[10:15] *** wamba left
[10:19] <timotimo> what are you going to use it for?

[10:21] *** clkao left
[10:21] *** chansen_ left
[10:21] *** chansen_ joined
[10:21] *** clkao joined
[10:21] *** timeless left
[10:22] *** timeless joined
[10:23] *** pierre_ joined
[10:24] *** aindilis left
[10:28] <ZzZombo> To apply a role to attributes, as there is no any other easy way to modify them.

[10:29] <timotimo> oh!

[10:29] <timotimo> but "is Typename" already means something else

[10:29] <timotimo> at least i believe so

[10:29] <ZzZombo> What?

[10:30] <timotimo> i think it works a lot like "my @foo is CustomArrayClass = 1, 2, 3"

[10:30] <timotimo> "is supposed to", that is

[10:31] <timotimo> i don't find anything in the spec tests nor in the design docs, though

[10:32] *** epony left
[10:33] *** mirlur[m]1 joined
[10:34] *** Mithaldu` joined
[10:36] <timotimo> the tests in S02-types/of-type.t are only for % and @ sigiled attributes, and the design doc verbiage seems to only refer to "my" variables

[10:37] *** Mithaldu left
[10:37] *** Mithaldu` is now known as Mithaldu

[10:37] *** mirlur[m] left
[10:37] <timotimo> anyway, i'd expect that to generalize to attributes as well

[10:38] *** ilmari[m] left
[10:39] *** ilmari[m] joined
[10:39] *** yoleaux left
[10:40] *** yoleaux joined
[10:40] *** ChanServ sets mode: +v yoleaux

[10:53] *** wamba joined
[10:53] *** pharv joined
[10:57] <timotimo> cd ~/perl6/rakudo/; echo "rakudo commit"; git show -s; echo; cd ../nqp/; echo "nqp commits since last bump"; git lg (cat ../rakudo/tools/build/NQP_REVISION)..; echo; cd ../moarvm/; echo "moar commits since last bump"; git lg (cat ../nqp/tools/build/MOAR_REVISION)..;

[10:58] *** pharv left
[10:58] <timotimo> ^- (fish syntax) shows the current commit in rakudo and all commits since last bump in both nqp and moar

[11:05] <squashable6> 🍕 AlexDaniel++ wrote a comment on “｢StrDistance｣ not documented”: https://github.com/perl6/doc/issues/691#issuecomment-370139130

[11:06] *** SHODAN left
[11:08] *** SHODAN joined
[11:18] *** SHODAN left
[11:20] *** SHODAN joined
[11:28] *** SHODAN left
[11:29] <ZzZombo> I can still work around that by defining my own `trait_mod:<is>` to mix the role into the attribute. I just need that block to be removed.

[11:36] *** SHODAN joined
[11:44] <squashable6> 🍕 ZzZombo++ wrote a comment on “Is the matching magic really nondeterministic?”: https://github.com/perl6/doc/issues/1790#issuecomment-370141332

[11:44] <squashable6> 🍕🍕🍕  First contribution by ZzZombo++! ♥

[11:44] <ZzZombo> Shhh

[11:53] *** xtreak joined
[12:03] * timotimo restarts more travis builds

[12:04] <timotimo> nobody must know of my JSON::Fast ~bug

[12:15] <squashable6> 🍕 AlexDaniel++ edited issue “Lots of broken links, in…”: https://github.com/perl6/doc/issues/561

[12:17] *** kaare__ is now known as kaare_

[12:18] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Lots of broken links, in…”: https://github.com/perl6/doc/issues/561#issuecomment-370143442

[12:19] *** epony joined
[12:23] *** travis-ci joined
[12:23] <travis-ci> Doc build passed. Aleks-Daniel Jakimenko-Aleksejev '.pm → .pm6

[12:23] <travis-ci> https://travis-ci.org/perl6/doc/builds/348353896 https://github.com/perl6/doc/compare/51585b9ddebd...d468b66bd01e

[12:23] *** travis-ci left
[12:23] *** travis-ci joined
[12:23] <travis-ci> Doc build passed. Zoffix Znet 'Revert "Document Range.clone-with-op."

[12:23] <travis-ci> https://travis-ci.org/perl6/doc/builds/348356336 https://github.com/perl6/doc/compare/d468b66bd01e...990adfde1ec4

[12:23] *** travis-ci left
[12:25] *** buggable left
[12:28] *** espadrine joined
[12:33] *** SyrupThinker joined
[12:59] *** telex left
[13:00] *** telex joined
[13:09] *** yqt joined
[13:29] *** shinobi-cl joined
[13:38] *** greppable6 joined
[13:47] *** vike joined
[14:05] *** shinobi-cl left
[14:26] *** khisanth_ left
[14:27] *** |oLa|1 joined
[14:28] *** |oLa|2 joined
[14:28] *** |oLa| left
[14:29] *** shinobi-cl joined
[14:30] *** JJ_ joined
[14:31] *** |oLa|1 left
[14:33] <JJ_> Hi there. Just checking in to see if I can be of help in the monthly SQUASHathon. I'm in Bogotá right now, and flying this evening in the redeye to Madrid, but I can work on something on the flight or tomorrow at home :-) Do assign me some issue if

[14:34] *** wamba left
[14:39] *** khisanth_ joined
[14:44] *** xtreak left
[14:51] *** vike left
[14:57] *** skids joined
[14:57] *** shinobi-cl left
[14:59] *** shinobi-cl joined
[15:00] *** natrys joined
[15:02] <timotimo> JJ_: your message got cut off after "do assign me some issue if"

[15:03] <ZzZombo> what a cliffhanger, I'm all intrigued

[15:04] *** shinobi-cl left
[15:04] <Geth> ¦ doc: 1b723a26bc | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/objects.pod6

[15:04] <Geth> ¦ doc: reference an example of use at the point TWEAK is referenced in a search

[15:04] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1b723a26bc

[15:04] <synopsebot> Link: https://doc.perl6.org/language/objects

[15:04] <squashable6> 🍕🍕🍕  First contribution by tbrowder++! ♥

[15:08] <ZzZombo> ===> Building: Inline::Perl5:ver<0.31>:auth<github:niner>

[15:08] <ZzZombo> The spawned command 'make' exited unsuccessfully (exit code: 127)

[15:08] <ZzZombo>   in method build at /home/boss/.zef/store/Inline-Perl5-0.31.tar.gz/Inline-Perl5-0.31/Build.pm line 21

[15:08] <ZzZombo>   in block <unit> at -e line 1

[15:08] <ZzZombo> ===> Building [OK] for Inline::Perl5:ver<0.31>:auth<github:niner>

[15:08] <ZzZombo> huh, why it completed successfully?

[15:08] <squashable6> 🍕 tbrowder++ wrote a comment on “add an example of TWEAK”: https://github.com/perl6/doc/issues/1796#issuecomment-370154207

[15:08] <squashable6> 🍕 tbrowder++ closed issue “add an example of TWEAK”: https://github.com/perl6/doc/issues/1796

[15:09] <ZzZombo> ...aaaand it failed down the line in a dependency, for this same reason.

[15:11] *** konsolebox left
[15:12] <JJ_> @timotimo not much after that. Assign me some issue if you think I can be of help.

[15:15] <timotimo> there's a crapton to choose from :|

[15:15] <timotimo> any specific kind you're interested in?

[15:15] *** ufobat_ joined
[15:16] <squashable6> 🍕 JJ++ wrote a comment on “｢StrDistance｣ not documented”: https://github.com/perl6/doc/issues/691#issuecomment-370154763

[15:16] <ZzZombo> Playing around with Perl and Ubuntu in general under WSL. Thinking about switching over to Unix in near future.

[15:17] <timotimo> for the time being, VM is probably good enough?

[15:17] <MasterDuke> random thought. we have a couple 'Perl 6 from *' documents, would a 'from Javascript' be useful?

[15:17] <Geth> ¦ ecosystem: 6537451d9d | (Bahtiar `kalkin-` Gadimov)++ | META.list

[15:17] <Geth> ¦ ecosystem: Update Ddt to v0.4.3

[15:17] <Geth> ¦ ecosystem: 

[15:17] <Geth> ¦ ecosystem: - [X] I **agree** to the usage of the META file as listed [here](https://github.com/perl6/ecosystem#legal).

[15:17] <Geth> ¦ ecosystem: - [X] I have a license field listed in my META file that is one of https://spdx.org/licenses

[15:17] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/6537451d9d

[15:17] <Geth> ¦ ecosystem: 55aa68264c | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | META.list

[15:17] <Geth> ¦ ecosystem: Merge pull request #387 from kalkin/master

[15:17] <Geth> ¦ ecosystem: 

[15:17] *** ufobat___ left
[15:17] <Geth> ¦ ecosystem: Update Ddt to v0.4.3

[15:18] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/55aa68264c

[15:18] *** konsolebox joined
[15:19] <MasterDuke> i feel like there might be a lot of people who have a lot of experience with JS, but not so much with other languages

[15:19] <squashable6> 🍕 JJ++ wrote a comment on “Lots of broken links, in…”: https://github.com/perl6/doc/issues/561#issuecomment-370154995

[15:21] *** shinobi-cl joined
[15:25] *** ufobat___ joined
[15:26] *** JJ_ left
[15:27] *** ufobat_ left
[15:27] *** shinobi-cl left
[15:30] *** konsolebox left
[15:37] *** konsolebox joined
[15:46] <squashable6> 🍕 AlexDaniel++ edited issue “Lots of broken links, in…”: https://github.com/perl6/doc/issues/561

[15:46] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Lots of broken links, in…”: https://github.com/perl6/doc/issues/561#issuecomment-370157120

[15:50] *** trnh joined
[15:52] *** shinobi-cl joined
[15:52] *** ufobat_ joined
[15:53] <ZzZombo> Can I run some code without any messages leaking into the console?

[15:54] <timotimo> what comment systems for websites (blogs in particular) can people tolerate?

[15:54] <timotimo> ZzZombo: there's "quietly" for warnings, there's reassignign $*OUT and $*ERR for anything else

[15:54] *** dct_ left
[15:54] *** ufobat___ left
[15:54] <ZzZombo> Disqus. Everything else I have blocked in my anti-ad-tracker-etc-and-so-ons

[15:56] <ZzZombo> That's disregarding something built-in into the site rather than reusing thirdparty solutions, like Youtube comments, etc.

[15:58] *** thowe joined
[15:58] *** aindilis joined
[15:59] <ZzZombo> Uh, was that a success? A failure?

[16:00] <ZzZombo> ===> Installing: Inline::Perl5:ver<0.31>:auth<github:niner> Use of Nil in string context

[16:00] <ZzZombo>   in block  at home#sources/31AF5F9B0A3AD1CDE64740B73E8F2B3B03FB2380 (Inline::Perl5) line 25"

[16:00] <moritz> I blocked Disqus

[16:00] <moritz> way too many 3rd-party scripts

[16:03] <shinobi-cl> m: my @a =<hola como te va>; say grep {rx/a/}, @a, :k:v;

[16:03] <camelia> rakudo-moar a918028e0: OUTPUT: «(0 3)␤»

[16:03] <shinobi-cl> m: my @a =<hola como te va>; say grep {rx/a/}, @a, :v:k;

[16:03] <camelia> rakudo-moar a918028e0: OUTPUT: «(hola va)␤»

[16:04] <shinobi-cl> how does this magic work? how can grep knows that :v or :k was the first one to be defined in the parameter list?

[16:04] <shinobi-cl> m: my @a =<hola como te va>; say grep {rx/a/}, @a, :v:kv:p:k;

[16:04] <camelia> rakudo-moar a918028e0: OUTPUT: «(hola va)␤»

[16:05] *** skids left
[16:06] <ZzZombo> `grep` certainly doesn't, but the multi dispatcher do.

[16:06] *** kaare_ left
[16:06] *** kaare_ joined
[16:08] <timotimo> m: sub test(*%f) { .say for %f }; test :k:v; test :v:k;

[16:08] <camelia> rakudo-moar a918028e0: OUTPUT: «k => True␤v => True␤k => True␤v => True␤»

[16:09] <AlexDaniel> .oO( Disqust )

[16:09] <yoleaux> 03:11Z <Zoffix> AlexDaniel: tossed unspecced/undocumented/unloved Cool.path. I'm assuming no one's using it, but your call on whether we should push it through deprecation period: https://github.com/rakudo/rakudo/commit/b212fc5e20  (same goes for Range.clone-with-op that was nuked earlier today, I guess)

[16:09] <yoleaux> 04:39Z <Zoffix> AlexDaniel: nm, turned out zef was using Cool.path. Gonna do deprecation in 6.d and removal in 6.e instead; even though it ain't in any spec. https://irclog.perlgeek.de/perl6/2018-03-03#i_15879089

[16:10] <AlexDaniel> Zoffix++, thanks

[16:10] <shinobi-cl> m: my @a =<hola como te va>; say grep {rx/a/}, @a, :fake-flag;

[16:10] <camelia> rakudo-moar a918028e0: OUTPUT: «Unexpected adverb 'fake-flag' passed to grep on List␤  in block <unit> at <tmp> line 1␤␤»

[16:10] *** pierre_ left
[16:13] *** kaare_ left
[16:13] <Zoffix> eco: IO::MiddleMan

[16:13] <Zoffix> Buggable is really unhappy with the updated rakudo

[16:13] <Zoffix> Just keeps looping on "Attempting to connect to server; connection closed"

[16:14] *** buggable joined
[16:14] *** ChanServ sets mode: +v buggable

[16:14] <Zoffix> and maybe updated modules; updated since 2017.09 or so

[16:14] <Zoffix> eco: IO::MiddleMan

[16:14] <buggable> Zoffix, IO::MiddleMan 'hijack, capture, or mute writes to an IO::Handle': https://github.com/zoffixznet/perl6-IO-MiddleMan

[16:14] <Zoffix> ZzZombo: ^ you could use that module to prevent messages. And that `is raw` in Proxee might've just been a leftover from when a non-sigiless param was first used

[16:15] *** kaare_ joined
[16:20] *** pmurias joined
[16:20] *** kaare_ left
[16:25] *** giraffe joined
[16:27] <Zoffix> m: use nqp; my int $a = 10; dd nqp::isint($a)

[16:27] <camelia> rakudo-moar a918028e0: OUTPUT: «0␤»

[16:27] <Zoffix> how come it ain't?

[16:28] *** kaare_ joined
[16:28] <jnthn> Because Perl 6 int boxes into P6opaque

[16:28] <yoleaux> 06:24Z <Zoffix> jnthn: a proposal for some tweaks to Rationals to fix a number of bugs and the race condition, if you wanted to review: https://github.com/rakudo/rakudo/blob/master/docs/archive/2018-03-04--Polishing-Rationals.md

[16:28] <Zoffix> Ah. Thanks.

[16:28] <jnthn> Well, into Int, which as the P6opaque repr

[16:28] <jnthn> And that op looks if the repr is P6int, which NQP's rather simpler object mode uses

[16:29] <Zoffix> ^ I'm also adding "Fix bugs with uint64 denominators and Make Rat denominators uint64 for minor perf gain and try to maximize gain with some nqp::p6div ops that'd compile down to nqp::div_i if both operands are native ints, or to nqp::div_I otherwise)

[16:29] <Zoffix> "

[16:29] <Zoffix> to the proposal I mean

[16:29] <jnthn> Hm, interesting

[16:30] <jnthn> I'd have not entirely expected it to be a win

[16:30] <MasterDuke> wouldn't uints have to be fixed in MoarVM first?

[16:31] <jnthn> In that to use the _I ops we'd need to box it

[16:31] <Zoffix> Yeah, that was my first assumption too, but bench I just evaled in #perl6-dev shows a minor gain

[16:31] *** pmurias left
[16:31] <Zoffix> MasterDuke: s/Fix bugs with uint64 denominators/Fix bugs with uint64 attributes/

[16:33] *** Sgeo left
[16:33] <MasterDuke> heh, a significantly harder task...

[16:34] *** Sgeo joined
[16:34] *** trnh left
[16:35] *** kaare__ joined
[16:35] <Zoffix> ZofBot: We choose to fix uint64 attributes in this decade and do the other things, not because they are easy, but because they are hard;

[16:35] <ZofBot> Zoffix, There’s a British Rail sign on the other end

[16:36] *** kaare_ left
[16:44] <jnthn> Heh, so ZofBot thinks it'll be expensive to fix and probably delayed? :)

[16:46] <Zoffix> :)

[16:46] *** domidumont joined
[16:53] <tbrowder> anyone want to talk about Test::is-deeply? i need some advice

[16:53] <Zoffix> tbrowder: Sure.

[16:55] <tbrowder> Bailador uses lots of is-deeply tests for http responses and we get a lot of failures due to whitespace differences.  a :ws adverb to is-deeply to compare string values more loosely would be very handy.

[16:57] <tbrowder> the main culprit is see is pairs where the value is a string; html canonicalization would help, too, but i'm not sure that would be so easy for the test author.

[16:57] <Zoffix> You mean adding that to Test.pm6? is-deeply has little to do with strings, so adding that adverb to core routine would make little sense.

[16:57] <tbrowder> s/is see/i see/

[16:58] <Zoffix> Just write a helper test module for Bailador and use its routines. Why is it `is-deeply` and not `is-request` or something along those lines?

[16:58] <tbrowder> well, i see is-deeply comparing strings

[16:59] <Zoffix> It compares equivalence of objects. It's basically `cmp-ok $foo, &[eqv], $bar` with the exception that it caches Seqs and treats them as Lists

[16:59] *** domidumont left
[16:59] <tbrowder> i don't know, i'm just trying to sort out failures. not aware of is-response, that may be the answer.

[17:00] <Zoffix> tbrowder: "not aware of is-response". I'm not saying that it exists, I'm saying that it's often useful to write helper test routines to perform tests. So if you're testing so many HTTP responses that you want to add any adverbs, just write a helper `is-response` routine for testing those responses instead

[17:01] <tbrowder> gotcha

[17:01] *** pmurias joined
[17:01] <Zoffix> tbrowder: for example, here's the use of a custom "test-iter-opt" routine that tests optimizations on iterators: https://github.com/perl6/roast/blob/master/MISC/bug-coverage.t#L14 and here's its definition: https://github.com/perl6/roast/blob/master/packages/Test/Util.pm#L23-L54

[17:01] <tbrowder> maybe looking at jnthn's Cro tests will be helpful, too

[17:02] <Zoffix> Notice how you can wrap a bunch of tests into a single `subtest`. So in the interface you have just 1 test routine that adds 1 test to the plan, but it can actually perform as many tests as needed.

[17:03] <Zoffix> Write anough useful test routines like that and you could also release them as a test module to the ecosystem

[17:03] *** xtreak joined
[17:03] *** Rawriful joined
[17:03] <Zoffix> This is a handy P5 module; would be nice to have an equivalent in P6: https://metacpan.org/pod/Test::Deep

[17:04] <tbrowder> thanks, good ideas, as usual

[17:04] *** BenGoldberg joined
[17:04] <Zoffix> (like a routine for testing only some keys/values in hashes, letting others match regexes or be arbitrary data)

[17:06] *** TEttinger left
[17:07] *** TEttinger joined
[17:11] *** pmurias left
[17:14] <buggable> New CPAN upload: Concurrent-Queue-1.0.tar.gz by JNTHN https://cpan.metacpan.org/authors/id/J/JN/JNTHN/Perl6/Concurrent-Queue-1.0.tar.gz

[17:16] <squashable6> 🍕 AlexDaniel++ closed issue “Document how to use ｢run…”: https://github.com/perl6/doc/issues/1745

[17:16] <Geth> ¦ doc: 28a9f13261 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[17:16] <Geth> ¦ doc: Document how to use run with <>

[17:16] <Geth> ¦ doc: 

[17:16] <Geth> ¦ doc: Also slightly discourage «», and add a separate section to traps about

[17:16] <Geth> ¦ doc: «». It is somewhat copypasted but that's ok, as having a separate

[17:16] <Geth> ¦ doc: section in traps raises awareness without requiring to read all of the

[17:16] <Geth> ¦ doc: docs.

[17:16] <Geth> ¦ doc: 

[17:17] <Geth> ¦ doc: Resolves #1745 and makes me happy.

[17:17] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/28a9f13261

[17:19] *** vike joined
[17:20] <Zoffix> "Note that C<--> is required to make it work for…" makes me think I always have to include `--` when using `run` with filenames.

[17:20] <Geth> ¦ doc: 069a3c1478 | (Jan-Olof Hendig)++ | doc/Type/Any.pod6

[17:20] <Geth> ¦ doc: Fixed broken link

[17:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/069a3c1478

[17:20] <synopsebot> Link: https://doc.perl6.org/type/Any

[17:20] <squashable6> 🍕🍕🍕  First contribution by dogbert17++! ♥

[17:20] <AlexDaniel> Zoffix: that's correct

[17:21] <Zoffix> AlexDaniel: why is it correct?

[17:21] <timotimo> Zoffix: there's a validation format that has a perl6 impl

[17:22] <timotimo> LIVR

[17:22] <AlexDaniel> you don't see it that often because most shell scripts are written using stackoverflow-driven development

[17:23] <AlexDaniel> Zoffix: well because filenames sometimes do start with dashes, and in most cases you do intend your software to work with any valid file or path

[17:24] <AlexDaniel> you can get away with it sometimes, and maybe even practically every time, but yes you'll have to always include -- to make your code fully correct

[17:25] <AlexDaniel> and for me it took quite some time to accept it, yeah…

[17:26] <Zoffix> AlexDaniel: but you're making an assumption about "your software". The `--` is part of how that software processes its arguments, not part of &run, so implying that &run always needs it is incorrect.

[17:26] <Zoffix> $ echo -e "foo\nbar\nber" > --my-file

[17:26] <Zoffix> $ perl6 -e 'run «./my-app --my-file»'

[17:26] <Zoffix> File --my-file has 3 lines of content

[17:26] <AlexDaniel> Zoffix: that's correct, yes, in fact some software does not support it

[17:27] <Zoffix> my software above would've crashed if it followed your advice.

[17:27] <Zoffix> $ perl6 -e 'run «./my-app -- --my-file»'

[17:27] <AlexDaniel> Zoffix: so how can we clarify it?

[17:27] <Zoffix> Failed to open file /tmp/tmp.SPsvjwwGph/--: No such file or directory

[17:27] <AlexDaniel> Zoffix: it already links to BashPitfalls page where it is explained in more detail

[17:28] <AlexDaniel> Zoffix: I now see your point that it makes it feel like it's related to `run`, okay

[17:28] <Zoffix> Dunno, "Note: many common programs expect C<--> passed to disambiguate between command-line arguments and filenames that begin with hyphens. L<link to bashpitfalls>

[17:28] <Zoffix> "

[17:28] <rouking> Quotes might work?

[17:29] <AlexDaniel> rouking: no

[17:29] <AlexDaniel> not for leading - at least

[17:29] <rouking> hmm

[17:29] <Zoffix> Dunno, "Note: many common programs, like C<touch> above, expect C<--> passed to disambiguate between command-line arguments and filenames that begin with hyphens. L<link to bashpitfalls>"

[17:30] <Zoffix> C:\Temp>notepad --my-file.txt  # works just fine too

[17:31] <Zoffix> hah, and "notepad -- --my-file.txt" creates a file called "-- --my-file.txt"

[17:31] *** xtreak left
[17:31] <rouking> The only way I can see is for the flag parser to have knowledge of where a file is expected

[17:32] <Zoffix> Even if you pass it as `perl6 -e "run <<notepad -- --bar.txt>>"`

[17:32] <Geth> ¦ doc: eaa9f77514 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[17:32] <Geth> ¦ doc: Make a note about -- more clear

[17:32] <Geth> ¦ doc: 

[17:32] <Geth> ¦ doc: See https://irclog.perlgeek.de/perl6/2018-03-03#i_15880599

[17:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/eaa9f77514

[17:32] <Zoffix> AlexDaniel++

[17:33] <AlexDaniel> Zoffix: you think it helped? It feels like it can be expanded a bit more

[17:33] <Zoffix> vOv

[17:35] <rouking> In an ideal world, people wouldn't be naming files starting with dashes

[17:35] <Zoffix> :D

[17:36] <rouking> (waiting for someone to come up with a surprisingly compelling reason to start a filename with a dash)

[17:36] <AlexDaniel> in an ideal world people would be naming files in all kinds of ways so that bugs were fixed faster :)

[17:37] <cfa> ufobat_: ping

[17:38] <AlexDaniel> rouking: well if you don't like files starting with a dash, then you probably also wouldn't like “*” as a filename! :)

[17:39] <rouking> That's at least a bit easier to deal with, since * is just a shell thing

[17:39] <Geth> ¦ doc: 2e90e913e6 | (Jan-Olof Hendig)++ | doc/Type/Any.pod6

[17:39] <Geth> ¦ doc: Fix a number of broken/incorrect links

[17:39] <synopsebot> Link: https://doc.perl6.org/type/Any

[17:39] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/2e90e913e6

[17:40] <AlexDaniel> rouking: but `run` is complicated and `shell` just works! https://github.com/perl6/doc/issues/1745#issuecomment-360052326

[17:41] *** wamba joined
[17:42] <AlexDaniel> rouking: I mean, well… that's the reality until we implement julia-like things for running stuff

[17:43] <rouking> Not familiar with Julia. What does it do?

[17:43] <AlexDaniel> https://docs.julialang.org/en/stable/manual/running-external-programs/#Pipelines-1

[17:44] <Zoffix> That looks fairly trivial to implement, innit? Like you already can bind-stdout from one Proc::Async to another or whatever

[17:44] *** cdg joined
[17:44] <rouking> Yeah, seems like we can almost do that now

[17:44] <ZzZombo> "I ran into a problem while trying to set up Linenoise: Must specify something as a path: did you mean '.' for the current directory?"

[17:45] <ZzZombo> Any help?

[17:45] <ZzZombo> That's from the REPL.

[17:45] <Zoffix> That error is from this:

[17:45] <Zoffix> m: "".IO

[17:45] <camelia> rakudo-moar a918028e0: OUTPUT: «Must specify something as a path: did you mean '.' for the current directory?␤  in block <unit> at <tmp> line 1␤␤»

[17:45] <Zoffix> So something is empty and it's trying to use it as a path. Maybe your $HOME isn't set?

[17:46] <Zoffix> ZzZombo: also, what version of perl6 are you on?

[17:46] <AlexDaniel> Zoffix: that's not too difficult, but maybe some things should be thought through (like what if one of the commands in the pipeline fails?)

[17:46] <Zoffix> I faintly recall fixing a problem like that

[17:46] <Zoffix> (the repl crash I mean)

[17:47] <ZzZombo> `$HOME` is set. "This is Rakudo version 2018.02.1 built on MoarVM version 2018.02 implementing Perl 6.c."

[17:48] <AlexDaniel> Zoffix: and there are other things like `sort $file` doing quoting correctly in Julia

[17:48] <timotimo> maybe $*HOME isn't set for some reason?

[17:48] <ZzZombo> it's set

[17:48] <AlexDaniel> well there's no quoting actually, it's just splitting it correctly

[17:48] <rouking> In that case, I personally would like a Failure that has information about which command failed, the exit code, and any STDERR output

[17:48] <Zoffix> ZzZombo: add --ll-exception command line flag. What's the output?

[17:49] <Zoffix> $ perl6 --ll-exception

[17:49] <timotimo> "any stderr output" is not so simple, by default the file descriptor that gets passed to the child program is the same your script has

[17:49] <ZzZombo> What do you mean? It's REPL, there is no exception.

[17:49] <timotimo> you can't reliably capture the output unless you want to manually pass-through data, which can mess up ordering and timing and all that fun stuff

[17:50] <rouking> Hmm, perhaps just the former two, then :)

[17:50] <Zoffix> ZzZombo: just run perl6 --ll-exception

[17:50] <ZzZombo> well, I did, nothing new.

[17:51] <Zoffix> OK

[17:52] <Zoffix> (I'm reproing it locally now; 1 sec)

[17:53] <AlexDaniel> Zoffix: GH#1586

[17:53] <synopsebot> GH#1586 [open]: https://github.com/rakudo/rakudo/issues/1586 [RFC] Easy way to pipe Procs

[17:54] <Zoffix> ZzZombo: what about RAKUDO_HIST=foo.txt perl6

[17:54] <Zoffix> Does that still show the same message?

[17:55] <ZzZombo> What do you mean?

[17:56] <Zoffix> I mean try setting RAKUDO_HIST env var to a filename in some writable location

[17:57] <ZzZombo> Still the same.

[18:01] <Zoffix> No idea then. The message is comming from here: https://github.com/rakudo/rakudo/blob/master/src/core/REPL.pm6#L185

[18:01] <Zoffix> If I could repro it, recompile rakudo and make that message show full backtrace to where the error came from and look in there

[18:01] <Zoffix> *I'd recompile...

[18:02] * Zoffix &

[18:02] *** Zoffix left
[18:02] *** comborico1611 joined
[18:03] *** kaare_ joined
[18:04] *** kaare__ left
[18:04] *** pochi left
[18:25] *** vcv joined
[18:30] *** cdg left
[18:30] *** cdg joined
[18:35] *** cdg left
[18:35] *** pmurias joined
[18:41] *** pmurias left
[18:42] *** zakharyas joined
[18:42] *** cfa left
[18:43] <squashable6> 🍕 AlexDaniel++ closed issue “What is a trap and what isn't?”: https://github.com/perl6/doc/issues/1523

[18:43] <squashable6> 🍕 AlexDaniel++ wrote a comment on “What is a trap and what isn't?”: https://github.com/perl6/doc/issues/1523#issuecomment-370170188

[18:45] *** vcv left
[18:46] *** zakharyas left
[18:47] *** zakharyas joined
[18:51] *** zakharyas left
[18:52] *** zakharyas joined
[18:55] *** zakharyas left
[18:55] *** zakharyas joined
[18:58] *** darutoko left
[19:03] *** zakharyas1 joined
[19:04] *** zakharyas left
[19:04] *** zakharyas1 left
[19:05] *** wamba left
[19:07] *** zakharyas joined
[19:10] *** zakharyas left
[19:17] *** zakharyas joined
[19:30] <Geth> ¦ doc: b6a4f58396 | (Steve Mynott)++ | doc/Type/Cool.pod6

[19:30] <synopsebot> Link: https://doc.perl6.org/type/Cool

[19:30] <Geth> ¦ doc: correct typo and grammar

[19:30] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b6a4f58396

[19:30] <squashable6> 🍕🍕🍕  First contribution by stmuk++! ♥

[19:33] *** khw joined
[19:34] *** vcv joined
[20:02] <Geth> ¦ ecosystem: shinobi++ created pull request #388: Data::StaticTable added.

[20:02] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/388

[20:06] <Geth> ¦ ecosystem: da05119a59 | shinobi++ (committed by Zoffix Znet) | META.list

[20:06] <Geth> ¦ ecosystem: Update META.list (#388)

[20:06] <Geth> ¦ ecosystem: 

[20:06] <Geth> ¦ ecosystem: Data::StaticTable class: https://github.com/shinobi/Data-StaticTable.git

[20:06] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/da05119a59

[20:10] *** vcv left
[20:13] <squashable6> 🍕 JJ++ wrote a comment on “Lots of broken links, in…”: https://github.com/perl6/doc/issues/561#issuecomment-370176424

[20:29] <squashable6> 🍕 AlexDaniel++ wrote a comment on “doc $¢”: https://github.com/perl6/doc/issues/1262#issuecomment-370177384

[20:29] <squashable6> 🍕 AlexDaniel++ closed issue “doc $¢”: https://github.com/perl6/doc/issues/1262

[20:29] <AlexDaniel> any Ruby programmers here?

[20:31] <APic> Is that a Trick-Question?

[20:34] <AlexDaniel> no

[20:34] <AlexDaniel> there's a Ruby-related issue that can be tackled: https://github.com/perl6/doc/issues/1247

[20:35] <APic> Good.

[20:39] *** Zoffix joined
[20:40] <Zoffix> I plan to submit a TPF grant proposal "Perl 6: Performance and Bugfixing of Rationals and Constraints on Constants". The draft is available at https://temp.perl6.party/Constant-Rat-TPF-Grant.html Let me know your comments.

[20:43] <squashable6> 🍕 AlexDaniel++ wrote a comment on “internet searches are un…”: https://github.com/perl6/doc/issues/1205#issuecomment-370178345

[20:44] <AlexDaniel> “Amount Requested: USD 1,499” what a bargain

[20:58] *** rindolf left
[21:07] <squashable6> 🍕 AlexDaniel++ wrote a comment on “use File::Temp, not .pick”: https://github.com/perl6/doc/issues/1062#issuecomment-370179910

[21:13] <squashable6> 🍕 AlexDaniel++ wrote a comment on “(call|next)(with”: https://github.com/perl6/doc/issues/976#issuecomment-370180258

[21:13] <squashable6> 🍕 AlexDaniel++ closed issue “(call|next)(with”: https://github.com/perl6/doc/issues/976

[21:14] <squashable6> 🍕 AlexDaniel++ wrote a comment on “xt/aspell.t - aspell issue”: https://github.com/perl6/doc/issues/975#issuecomment-370180342

[21:21] *** natrys left
[21:22] <squashable6> 🍕 AlexDaniel++ closed issue “internet searches are un…”: https://github.com/perl6/doc/issues/1205

[21:22] <squashable6> 🍕 AlexDaniel++ wrote a comment on “internet searches are un…”: https://github.com/perl6/doc/issues/1205#issuecomment-370180819

[21:25] *** SyrupThinker left
[21:26] *** jimav joined
[21:30] <jimav> Hi, I'm trying to figure out the significance of the examples of list vs. item assignment in https://docs.perl6.org/language/variables#Item_and_List_Assignment ...

[21:31] <jimav> It has these examples:  my $num; my @array = $num = 42,"str";        # item assignment: uses expression  my ($num, @array); @array = $num = 42,"str"; # list assignment  But the results are exactly the same.   Are the docs talking about the inner "$num= 42" or the outer "@array = ..." when they say "list" or "item" assignment?

[21:31] <jimav> oops, paste didn't work very well there...

[21:31] <jimav> my $num; my @array = $num = 42,"str";        # item assignment: uses expression

[21:31] <jimav> my ($num, @array); @array = $num = 42,"str"; # list assignment

[21:31] <jimav> The results are exactly identical.   Hos is "item assignment" being used in the first example?

[21:32] <jimav> Which assignment are the comments referring to (assignment to @array or $num)?  

[21:36] <Geth> ¦ doc: c9537ba848 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Language/glossary.pod6

[21:36] <synopsebot> Link: https://doc.perl6.org/language/glossary

[21:36] <Geth> ¦ doc: Fix the link to “Backtracking”

[21:36] <Geth> ¦ doc: 

[21:36] <Geth> ¦ doc: Resolves #628.

[21:36] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c9537ba848

[21:36] <squashable6> 🍕 AlexDaniel++ closed issue ““Backtracking” is not defined in the glossary”: https://github.com/perl6/doc/issues/628

[21:36] <squashable6> 🍕 AlexDaniel++ wrote a comment on ““Backtracking” is not defined in the glossary”: https://github.com/perl6/doc/issues/628#issuecomment-370181772

[21:39] *** TreyHarris left
[21:41] *** jimav left
[21:41] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Partial Build [Possibly due to parallelization]”: https://github.com/perl6/doc/issues/664#issuecomment-370182018

[21:43] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Vow not documented”: https://github.com/perl6/doc/issues/588#issuecomment-370182191

[21:43] <squashable6> 🍕 AlexDaniel++ closed issue “Vow not documented”: https://github.com/perl6/doc/issues/588

[21:44] *** jimav joined
[21:44] *** greppable6 left
[21:45] <squashable6> 🍕 AlexDaniel++ wrote a comment on “lazy, eager, hyper, race…”: https://github.com/perl6/doc/issues/534#issuecomment-370182298

[21:45] <jimav> Is there a way to paste multiple lines into chat without folding (either keeping the newlines as newlines, or with each line appearing as a separate row)?

[21:47] <AlexDaniel> jimav: yes, you can use https://gist.github.com/ or any other paste service really

[21:47] <AlexDaniel> and the bot will even run the snippet when provided with a link

[21:50] <jimav> Thanks.  I've never used a paste service.  How does it work?   Having typed something into https://gist.github.com/ how can I get it pasted into a particular chat? (sorry for newbie q)

[21:51] <AlexDaniel> just click "create public gist" and paste the URL here

[21:52] <jimav> https://gist.github.com/jimav/727c5c30aa52de77a7fa1a624b815587

[21:52] <jimav> Hmm.  That didn't paste the content, just the url...

[21:53] *** TreyHarris joined
[21:55] <timotimo> yes, we have to click the url

[21:55] <squashable6> 🍕 AlexDaniel++ closed issue “A PDF version of the documentation”: https://github.com/perl6/doc/issues/722

[21:55] *** zakharyas left
[21:55] <timotimo> this is normal :)

[21:55] <squashable6> 🍕 AlexDaniel++ wrote a comment on “A PDF version of the documentation”: https://github.com/perl6/doc/issues/722#issuecomment-370182905

[21:56] * AlexDaniel goes for a little nap

[21:57] <jimav> AlexDaniel: Ok, thanks

[21:58] <jimav> Sorry, meant timotimo

[22:01] *** AlexDaniel left
[22:19] *** jimav_ joined
[22:21] <jimav> https://docs.perl6.org/language/packages#Names mentions "numeric names" giving $42 as an example ...

[22:22] <jimav> Where are numeric names allowed?

[22:23] <Zoffix> jimav: regex captures

[22:23] <Zoffix> m: "foo" ~~ /(.)(.)/; say [$0, $1]

[22:23] <camelia> rakudo-moar 207313be5: OUTPUT: «[｢f｣ ｢o｣]␤»

[22:27] <jimav_> Ah, okay.

[22:28] <Zoffix> jimav: that "Item and List Assignment" section is making my head spin. Feels like it's trying to answer all the questions no one asked. I'd suggest ignoring it.

[22:30] <jimav_> Zoffix: How did you cause your response (to my $42 question) to appear?  I often see the "m:" prefix before code, and +camelia is a bot, I assume

[22:31] <timotimo> correct

[22:32] <timotimo> we have multiple eval bots for perl 6 code, one of them is camelia, who reacts to "m:" among other things

[22:32] <timotimo> camelia can also grab source code from some paste service websites

[22:32] <jimav_> m: say 42;

[22:32] <camelia> rakudo-moar 207313be5: OUTPUT: «42␤»

[22:32] <jimav_> Nice.

[22:32] <squashable6> 🍕 zoffixznet++ opened issue “"Item and List Assignment" section is dense”: https://github.com/perl6/doc/issues/1810

[22:34] <jimav_> How to make camelia grab source from a paste service? (I'll RTFM if you you point to the M)

[22:34] <timotimo> just m: http://blah blah/

[22:34] <Zoffix> m: sub term:<¯\_(ツ)_/¯> { say '¯\_(ツ)_/¯' };              ¯\_(ツ)_/¯

[22:34] <camelia> rakudo-moar 207313be5: OUTPUT: «¯\_(ツ)_/¯␤»

[22:34] <timotimo> you made that line up on purpose? :)

[22:34] <Zoffix> m: https://gist.github.com/zoffixznet/edfff3c98cfb11d28d758917c096e1da

[22:34] <camelia> rakudo-moar 207313be5: OUTPUT: «¯\_(ツ)_/¯␤»

[22:35] <squashable6> 🍕 coke++ wrote a comment on “xt/aspell.t - aspell issue”: https://github.com/perl6/doc/issues/975#issuecomment-370185460

[22:40] *** Kaiepi joined
[22:40] *** yqt left
[22:50] <Geth> ¦ doc: 362b4cf1a6 | (JJ Merelo)++ | doc/Language/faq.pod6

[22:50] <synopsebot> Link: https://doc.perl6.org/language/faq

[22:50] <Geth> ¦ doc: .perl → perl refs #561

[22:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/362b4cf1a6

[22:50] <Geth> ¦ doc: 5a8cf251e3 | (JJ Merelo)++ | doc/Language/faq.pod6

[22:50] <Geth> ¦ doc: classtut → /language/classtut refs #561

[22:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5a8cf251e3

[22:51] *** mingdao left
[22:57] *** Zoffix left
[23:05] *** cfa joined
[23:11] <Geth> ¦ doc: 9ee2a4c75c | (JJ Merelo)++ | 4 files

[23:11] <Geth> ¦ doc: Fixing links to $*CWD

[23:11] <Geth> ¦ doc: 

[23:11] <Geth> ¦ doc: Paragraphs seem to be copied from each other. Refs #561

[23:11] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9ee2a4c75c

[23:11] <Geth> ¦ doc: 9e5d8e6bb5 | (JJ Merelo)++ | doc/Language/variables.pod6

[23:11] <synopsebot> Link: https://doc.perl6.org/language/variables

[23:11] <Geth> ¦ doc: Fixes link to Sub

[23:11] <Geth> ¦ doc: 

[23:11] <Geth> ¦ doc: And gets ready to board and stuff. Refs #561

[23:11] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9e5d8e6bb5

[23:11] <cfa> hm, i think commit [207313] has borked the repl (.specification.contains)

[23:12] <cfa> ===SORRY!===

[23:12] <cfa> No such method 'contains' for invocant of type 'CompUnit::DependencySpecification'

[23:12] *** konsolebox left
[23:13] <timotimo> hm, i'd say it needs a .Str in the middle

[23:13] <timotimo> the ~~ against regex would have coerced it to Str before

[23:13] *** konsolebox joined
[23:15] <squashable6> 🍕 jimav++ wrote a comment on “"Item and List Assignment" section is dense”: https://github.com/perl6/doc/issues/1810#issuecomment-370187559

[23:15] <squashable6> 🍕🍕🍕  First contribution by jimav++! ♥

[23:16] <cfa> jimav: seen https://perl6advent.wordpress.com/2011/12/16/where-have-all-the-references-gone/ ?

[23:18] <squashable6> 🍕 jimav++ wrote a comment on “"Item and List Assignment" section is dense”: https://github.com/perl6/doc/issues/1810#issuecomment-370187731

[23:21] *** sena_kun left
[23:35] *** cog__ left
[23:35] *** cognominal joined
[23:40] *** mingdao joined
[23:45] *** mingdao left
[23:46] *** cognominal left
[23:53] *** espadrine left
