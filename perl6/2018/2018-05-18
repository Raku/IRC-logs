[00:00] <lucasb> some builtins use "proto f($)", and this emits this error with Mu

[00:00] <lucasb> m: quielty say Mu.Numeric   # I can't call this

[00:00] <camelia> rakudo-moar 8ccda1890: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    quielty used at line 1‚ê§‚ê§¬ª

[00:01] <lucasb> m: quietly say Mu.Numeric   # I *can* call this

[00:01] <camelia> rakudo-moar 8ccda1890: OUTPUT: ¬´0‚ê§¬ª

[00:01] <lucasb> m: +Mu  # but can't call this

[00:01] <camelia> rakudo-moar 8ccda1890: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "+" in expression "+Mu" in sink context (line 1)‚ê§Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[00:03] *** comborico1611 left
[00:03] *** kurahaupo_ joined
[00:03] <lucasb> My point is... if builtin protos used the signature "proto foo(Mu) {*}", then one would get the nice message "Cannot resolve..."

[00:04] <lucasb> but since it uses "proto foo($) {*}", the ugly error "Type check failed in binding to parameter" happens

[00:04] *** espadrine_ left
[00:05] <geekosaur> do note that Mu has slightly special semantics there

[00:05] <MasterDuke> i think using Mu would throw things off with juctions

[00:05] <geekosaur> ^

[00:05] <geekosaur> basically if you explciitly declare something as Mu then ti suppresses autothreading junctions

[00:06] <lucasb> ah, right, I was expecting Junction interaction trouble 

[00:06] <timotimo> i would say it the other way around

[00:06] <MasterDuke> m: multi f($a) { say $a }; f("a"|"b")

[00:06] <camelia> rakudo-moar 8ccda1890: OUTPUT: ¬´a‚ê§b‚ê§¬ª

[00:06] *** kurahaupo left
[00:06] <MasterDuke> m: multi f(Mu $a) { say $a }; f("a"|"b")

[00:06] <camelia> rakudo-moar 8ccda1890: OUTPUT: ¬´any(a, b)‚ê§¬ª

[00:07] <timotimo> the fact that everything takes Any by default, not Mu, means that we get autothreading when binding fails because a non-Mu-or-Junction typed argument is responsible for bind failure

[00:07] <timotimo> well, parameters

[00:08] *** mcmillhj joined
[00:08] <geekosaur> yeh, but that's not the useful version when talking about Mu for general typechecking purposes

[00:09] <geekosaur> i.e. to get a better error message

[00:12] *** mcmillhj left
[00:13] *** w_richard_w joined
[00:15] <lucasb> m: proto f(|) {}; multi f($x) { say "<$x>" }; f(1|2|3)

[00:15] <camelia> rakudo-moar 8ccda1890: ( no output )

[00:15] <lucasb> m: proto f(|) {*}; multi f($x) { say "<$x>" }; f(1|2|3)  # ok, gets autothreading

[00:15] <camelia> rakudo-moar 8ccda1890: OUTPUT: ¬´<1>‚ê§<2>‚ê§<3>‚ê§¬ª

[00:16] <lucasb> m: proto f(|) {*}; multi f($x) { say "<$x>" }; f(Mu)  # and also gets nice "Cannot resolve..." message

[00:16] <camelia> rakudo-moar 8ccda1890: OUTPUT: ¬´Cannot resolve caller f(Mu); none of these signatures match:‚ê§    ($x)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[00:17] <MasterDuke> thundergnat: fyi, i'm pretty sure you don't need the .Str's on the numbers in Rational.Str

[00:18] <MasterDuke> m: use nqp; my int $a = 12342334423; my $b; for ^100_000 { $b = nqp::chars($a.Str) }; say $b; say now - INIT now

[00:18] <camelia> rakudo-moar 8ccda1890: OUTPUT: ¬´11‚ê§0.682129‚ê§¬ª

[00:18] <MasterDuke> m: use nqp; my int $a = 12342334423; my $b; for ^100_000 { $b = nqp::chars($a) }; say $b; say now - INIT now

[00:18] <camelia> rakudo-moar 8ccda1890: OUTPUT: ¬´11‚ê§0.04109253‚ê§¬ª

[00:18] *** zachk left
[00:19] <thundergnat> MasterDuke: You may be right, I just followed syntax I saw elsewhere as I have no clue what I am g=doing when it comes to nqp

[00:19] <thundergnat> And it looks like it may be worthwhile dropping it.

[00:20] *** lichtkind left
[00:20] <MasterDuke> i think i'm to blame. pretty sure i gave you a thrown-together example that had that

[00:21] <thundergnat> I'll fix the pull request.

[00:21] *** skids joined
[00:21] <lucasb> quietly say (Mu ~ Mu).perl  # ""

[00:21] <lucasb> quietly say (Mu + Mu).perl  # Type check failed in binding to parameter

[00:21] <evalable6> lucasb, rakudo-moar 8ccda1890: OUTPUT: ¬´""‚ê§¬ª

[00:21] *** mcmillhj joined
[00:22] <lucasb> proto sub infix:<~>(|) {*}

[00:22] <lucasb> proto sub infix:<+>($?, $?) is pure {*}

[00:23] *** raschipi_ joined
[00:23] <lucasb> ^^ the protos overly specify their arguments, that's why infix:<~> is more permissive than infix:<+>, right?

[00:23] <lucasb> so my concrete question is: shouldn't builtin multis have more relaxed proto signatures?

[00:24] <lucasb> s/multis/protos/

[00:24] *** raschipi left
[00:25] *** raschipi_ is now known as raschipi

[00:25] *** mcmillhj left
[00:29] *** lucasb left
[00:32] *** pseudonym_ joined
[00:37] *** pseudonym_ left
[00:37] *** mcmillhj joined
[00:39] *** [particle] joined
[00:40] <thundergnat> MasterDuke: Hmm. If I remove the .Str in the nqp::chars() ops, I get test failures. Won't even pass sanity tests, let alone spec tests.

[00:40] <MasterDuke> huh

[00:41] <thundergnat> I put them back in and it passes again. Looks like they might be necessary.

[00:42] *** Zoffix left
[00:42] *** mcmillhj left
[00:43] <thundergnat> Probably because I can't guarantee that the numbers will be ints, in fact it is likely that they could be Ints so I can't constrain them.

[00:43] <MasterDuke> heh, was just thinking the same thing

[00:43] <lookatme> :) morning

[00:44] *** mcmillhj_ left
[00:44] <MasterDuke> thundergnat: what about using a prefix ~ ?

[00:44] <thundergnat> I'll give it a try.

[00:54] *** mcmillhj joined
[00:55] <MasterDuke> thundergnat: so far the only i've found faster than .Str is `nqp::tostr_I(nqp::decont($a))`, and that only by a tiny bit

[00:56] <MasterDuke> which is pretty much what Int.Str is anyway

[00:57] <thundergnat> I got a little sidetracked, I was setting up some testing scripts and found some Rat that aren't returning strings I expected. I trying to figure out if my parameters are wrong or my expectations.

[00:58] <thundergnat> Long story short: don't merge that PR yet...

[00:59] *** mcmillhj left
[01:05] *** markong left
[01:14] *** MasterDuke_ joined
[01:17] *** MasterDuke left
[01:22] *** mcmillhj joined
[01:27] *** mcmillhj left
[01:30] *** mcmillhj joined
[01:45] *** ilbot3 left
[01:54] <lookatme> Hi

[01:56] *** ilbot3 joined
[01:56] *** ChanServ sets mode: +v ilbot3

[01:59] <raschipi> hello

[02:00] <lookatme> If I have a C function like this `void write_arg(int *arg) { }`, how do we create a Pointer point to something of Perl 6 

[02:02] <lookatme> I just know this way ` my $a := CArray[int32].new; $a[0] = 1; my $arg = nativecast(Pointer[int32], $a)`

[02:02] <lookatme> wonder if there has any other convenient way to do it ?

[02:03] <raschipi> No idea, sory, never used it. You should try stackoverflow.com, people usually answer very quick there.

[02:03] <lookatme> m: use NativeCall; my $a := CArray[int32].new; $a[0] = 1; my $arg = nativecast(Pointer[int32], $a); dd $arg;

[02:03] <camelia> rakudo-moar 5c7f7295f: OUTPUT: ¬´NativeCall::Types::Pointer[int32] $arg = NativeCall::Types::Pointer[int32].new(98213776)‚ê§¬ª

[02:03] <lookatme> I think this question is `quick` enough :-)

[02:07] *** leah2 left
[02:07] <lookatme> and .. seems like I forget my SO account and password :(

[02:09] *** zakharyas joined
[02:10] *** leah2 joined
[02:10] *** itaipu left
[02:17] *** mcmillhj_ joined
[02:17] *** mcmillhj left
[02:20] *** epony left
[02:22] *** mcmillhj_ left
[02:27] *** raschipi left
[02:43] *** pilne left
[02:44] *** melezhik left
[02:46] *** ufobat_ joined
[02:50] *** ufobat left
[02:55] *** aindilis left
[03:01] *** aindilis joined
[03:01] *** mcmillhj joined
[03:06] *** mcmillhj left
[03:09] <ktown> Zoffix: nice plate I will watch for you on the QEW

[03:13] *** atroxaper joined
[03:14] *** kurahaupo_ is now known as kurahaupo

[03:35] *** mcmillhj joined
[03:38] *** xinming left
[03:39] *** mcmillhj left
[03:40] *** xinming joined
[03:55] *** epony joined
[03:58] *** mcmillhj joined
[04:02] *** mcmillhj left
[04:09] *** molaf joined
[04:12] *** mcmillhj joined
[04:17] *** mcmillhj left
[04:17] *** w_richard_w left
[04:17] *** w_richard_w joined
[04:18] *** molaf left
[04:35] *** xinming left
[04:36] *** xinming joined
[04:37] *** mahafyi joined
[04:38] *** eliasr left
[04:42] *** mcmillhj joined
[04:46] *** mcmillhj left
[04:50] *** curan joined
[04:53] *** w_richard_w left
[04:55] *** mcmillhj joined
[05:00] *** mcmillhj left
[05:02] *** xtreak joined
[05:02] *** lindylex joined
[05:04] *** dustinm` left
[05:06] <Geth> ¬¶ doc: cb8229ba6e | (brian d foy)++ (committed using GitHub Web editor) | doc/Type/Str.pod6

[05:06] <synopsebot> Link: https://doc.perl6.org/type/Str

[05:06] <Geth> ¬¶ doc: Fix a pod directive in .comb

[05:06] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/cb8229ba6e

[05:06] <Geth> ¬¶ doc: 98ed216de3 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | doc/Type/Str.pod6

[05:06] <Geth> ¬¶ doc: Merge pull request #2029 from briandfoy/patch-1

[05:06] <Geth> ¬¶ doc: 

[05:06] <Geth> ¬¶ doc: Fix a pod directive in .comb

[05:06] <Geth> ¬¶ doc: Thanks!

[05:06] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/98ed216de3

[05:09] *** wamba joined
[05:10] <lindylex> Hello all.  I am trying to pass a value to a methid of a class and not sure why it is not working https://pastebin.com/NuigWFdd 

[05:12] <moritz> lindylex: :$myValue declares a named parameter, so you have pass it as myValue => 42

[05:12] <moritz> lindylex: if you don't want it to be named, remove the leading :

[05:12] *** wamba left
[05:12] *** shareable6 left
[05:12] <moritz> DoComputations.addValue( :myValue(12) )

[05:12] <moritz> or

[05:12] <moritz> DoComputations.addValue: :myValue(12);

[05:12] <moritz> or

[05:13] <moritz> DoComputations.addValue: myValue => 12

[05:13] <lindylex> ok one sec let me see if I get what you are saying.  I do not want it as a named.  That was my initial plan.

[05:14] *** wamba joined
[05:16] <moritz> then  method addValue($myValue) { ... }

[05:16] <moritz> and

[05:16] <moritz> DoComputations.addValue(42)

[05:16] *** HaraldJoerg joined
[05:16] *** dustinm` joined
[05:16] <lindylex> I get this as the error : https://pastebin.com/X4ACdyth

[05:17] <lindylex> moritz : thanks I got it to work.  I though I did this at first.

[05:18] <lindylex> It look liked the way I have done it in other languages but for some reason I could not see the error.  Thanks the way you shared work.  As I said I though I tried that first.

[05:21] *** vivus-ignis joined
[05:22] *** espadrine_ joined
[05:27] *** mcmillhj joined
[05:32] *** mcmillhj left
[05:33] *** sauvin joined
[05:35] *** vivus-ignis is now known as ignis__away

[05:38] *** w_richard_w joined
[05:39] *** ignis__away is now known as vivus-ignis

[05:45] *** mcmillhj joined
[05:50] *** mcmillhj left
[05:51] *** jmerelo joined
[05:54] <moritz> my pleasure

[05:59] <jmerelo> moritz: we have stackoverflow-synchronized :-)

[06:00] <Geth> ¬¶ doc: ecfcf1d8dc | (JJ Merelo)++ | doc/Language/objects.pod6

[06:00] <synopsebot> Link: https://doc.perl6.org/language/objects

[06:00] <Geth> ¬¶ doc: Adds the transitive property to ^roles

[06:00] <Geth> ¬¶ doc: 

[06:00] <Geth> ¬¶ doc: Seen in https://stackoverflow.com/questions/50402115/how-can-i-discover-all-the-roles-a-perl-6-type-does

[06:00] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/ecfcf1d8dc

[06:01] *** vivus-ignis is now known as ignis__away

[06:08] *** AlexDaniel left
[06:08] *** ignis__away is now known as vivus-ignis

[06:09] *** shareable6 joined
[06:09] *** ChanServ sets mode: +v shareable6

[06:10] *** vivus-ignis left
[06:12] *** mahafyi_ joined
[06:13] *** mahafyi left
[06:13] *** mahafyi_ is now known as mahafyi

[06:16] *** epony left
[06:16] *** epony joined
[06:17] *** mcmillhj joined
[06:18] *** domidumont joined
[06:18] *** epony left
[06:18] *** epony joined
[06:20] *** robertle joined
[06:21] *** mcmillhj left
[06:23] <El_Che> do lines on errors refering the the hashed names of precompiled libs, mean something?

[06:23] <El_Che> ===> Installing: Linenoise:ver<0.1.1>:auth<Rob Hoelz>

[06:24] <El_Che> Use of Nil in string context

[06:24] <El_Che>   in block  at home#sources/0BDF8C54D33921FEA066491D8D13C96A7CB144B9 (Linenoise) line 15

[06:24] <El_Che> If I want to debug the error, do I know on which pm to look and what line?

[06:24] *** domidumont left
[06:25] <El_Che> and if the errors is someone elses, the is no way to have a look in my own installation, I guess? :(

[06:25] *** domidumont joined
[06:26] <El_Che> I hope perl6 is one day fast enough that it doesn't need that indirection

[06:26] *** wamba left
[06:29] *** mahafyi left
[06:30] *** lindylex left
[06:30] *** jmerelo left
[06:30] *** mcmillhj joined
[06:32] *** shareable6 left
[06:34] *** mcmillhj left
[06:35] *** abraxxa left
[06:35] *** abraxxa joined
[06:37] *** espadrine_ left
[06:38] *** rindolf joined
[06:44] *** imcsk8 left
[06:46] *** skids left
[06:47] *** psychoslave joined
[06:51] *** imcsk8 joined
[07:01] *** mcmillhj joined
[07:01] *** wamba joined
[07:06] *** mcmillhj left
[07:19] <perlawhirl> El_Che: You can look for the file by that name. Alternatively, just look at the source of Linenoise.pm6 on github and check line 15

[07:19] <perlawhirl> which is: my constant LIBLINENOISE = %?RESOURCES<libraries/linenoise>.Str;

[07:19] <perlawhirl> i'm guessing it can't find the linenoise lib on your machine?

[07:20] *** curan left
[07:21] *** curan joined
[07:22] <perlawhirl> tbh, if you're installing it for the REPL, use Readline if possible, as it has better unicode support

[07:25] *** darutoko joined
[07:27] *** softmoth left
[07:29] *** xtreak left
[07:29] *** shareable6 joined
[07:32] *** xtreak joined
[07:32] *** mcmillhj joined
[07:37] *** mcmillhj left
[07:46] *** xtreak left
[07:48] *** jmerelo joined
[07:51] *** isBEKaml joined
[07:52] <isBEKaml> OHHAI, is there a rakudo build failure at the moment? I find that I cannot build rakudo on HEAD over some failure in CORE.setting

[07:52] <isBEKaml> Stage mast       : Arg count 0 doesn't equal required operand count 1 for op 'getrusage'

[07:52] <isBEKaml> Is this known? 

[07:54] <jmerelo> isBEKaml: environment and versions?

[07:55] <jmerelo> isBEKaml: it's probably better anyway if you file a rakudo issue...

[07:56] *** xtreak joined
[08:00] *** xtreak left
[08:00] *** xtreak joined
[08:02] *** athenot_ joined
[08:03] *** athenot left
[08:07] *** mcmillhj joined
[08:12] *** mcmillhj left
[08:13] *** lizmat joined
[08:21] *** SteffanW joined
[08:25] *** xtreak left
[08:36] *** llfourn left
[08:39] *** TEttinger left
[08:40] *** mcmillhj joined
[08:41] *** sauvin left
[08:41] *** sauvin joined
[08:43] *** sauvin left
[08:43] *** sauvin joined
[08:43] *** sauvin left
[08:45] *** mcmillhj left
[08:45] *** sauvin joined
[08:45] *** sauvin left
[08:45] <isBEKaml> jmerelo: Thanks, the build was on the latest HEAD on rakudo git

[08:45] <isBEKaml>  git rev-parse HEAD

[08:45] <isBEKaml> 4fca9474362f3362603ea79dd35fa0c7d3a1ef8d

[08:46] <isBEKaml> uname gives me this: Linux azazel 4.4.118 #2 SMP Sun Feb 25 14:30:46 CST 2018 x86_64 Intel(R) Core(TM) i3 CPU       M 380  @ 2.53GHz GenuineIntel GNU/Linux

[08:46] *** sauvin joined
[08:46] <isBEKaml> It's probably something else if you have travis CI nightly builds working fine - Will look into it some more before filing a bug

[08:46] *** sauvin left
[08:53] *** xtreak joined
[09:04] *** wamba left
[09:09] *** zakharyas left
[09:24] *** mcmillhj joined
[09:29] *** mcmillhj left
[09:38] *** mcmillhj joined
[09:43] *** mcmillhj left
[09:53] *** w_richard_w left
[10:02] *** mcmillhj joined
[10:06] *** scimon joined
[10:07] *** mcmillhj left
[10:15] *** enheh left
[10:20] *** wamba joined
[10:22] <Geth> ¬¶ doc/master: 7 commits pushed by (Luca Ferrari)++

[10:22] <Geth> ¬¶ doc/master: 0dd7ee63fb | Add more example to the multi dispatch method section.

[10:22] <Geth> ¬¶ doc/master: 496e56ab79 | Rewritten example of multi method dispatch.

[10:22] <Geth> ¬¶ doc/master: 718a8cf16d | Improve multi method documentation: arity and type of arguments.

[10:22] <Geth> ¬¶ doc/master: e8db5c9100 | Improve multi method documentation: named parameters.

[10:22] <Geth> ¬¶ doc/master: da173e5797 | Reword method in subs.

[10:22] <Geth> ¬¶ doc/master: a0e58c1e37 | Move a paragraph about named parameters in multi sub documentation.

[10:22] <Geth> ¬¶ doc/master: 788a44b3b4 | Minor reword of multi method documentation

[10:22] <Geth> ¬¶ doc/master: review: https://github.com/perl6/doc/compare/ecfcf1d8dcdb...788a44b3b461

[10:26] *** psychoslave left
[10:26] *** psychoslave joined
[10:29] *** eliasr joined
[10:30] *** markong joined
[10:30] *** psychoslave left
[10:31] *** psychoslave joined
[10:31] *** FROGGS joined
[10:35] *** aindilis left
[10:36] *** w_richard_w joined
[10:45] <MasterDuke_> isBEKaml: that commit is from october 2017, which is right around when the default branch was switched from nom to master

[11:02] *** mcmillhj joined
[11:04] <isBEKaml> MasterDuke_: perfect, thanks for that. I totally missed that the branch was switched over and was still on nom

[11:07] *** mcmillhj left
[11:07] <MasterDuke_> np

[11:11] *** w_richard_w left
[11:14] *** curan left
[11:19] *** Beginner joined
[11:23] *** wamba left
[11:25] <El_Che> perlawhirl: yes, both Linenoise and Readline are broken on recent distros. I filed a bug report on both (and create an installeble fork for Readline that installs on dists using readline 7)

[11:25] <El_Che> (1 line pathc)

[11:27] *** athenot_ left
[11:30] *** Beginner left
[11:32] *** aindilis joined
[11:40] *** itaipu joined
[11:40] *** ExtraCrispy joined
[11:52] <Geth> ¬¶ doc: 98449d0c5e | (Elizabeth Mattijsen)++ | doc/Language/5to6-nutshell.pod6

[11:52] <synopsebot> Link: https://doc.perl6.org/language/5to6-nutshell

[11:52] <Geth> ¬¶ doc: Mention Slang::Tuxic if you want foo ("bar") to work

[11:52] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/98449d0c5e

[11:54] <robertle> does anyone have a quality example of a module documented by pod6?

[11:57] <Geth> ¬¶ doc: 1d80fac5e8 | (Elizabeth Mattijsen)++ | doc/Language/5to6-nutshell.pod6

[11:57] <Geth> ¬¶ doc: Spaces *are* allowed around infix:<.> nowadays

[11:57] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/1d80fac5e8

[11:57] *** enheh joined
[11:58] *** shareable6 left
[12:00] *** xtreak left
[12:05] *** jmerelo left
[12:09] *** atroxaper left
[12:11] *** abraxxa left
[12:12] *** athenot joined
[12:20] *** rindolf left
[12:25] *** rindolf joined
[12:41] *** mcmillhj joined
[12:42] <buggable> New CPAN upload: P5ref-0.0.4.tar.gz by ELIZABETH http://modules.perl6.org/dist/P5ref:cpan:ELIZABETH

[12:43] <robertle> wq

[12:43] *** robertle left
[12:46] *** kurahaupo left
[12:47] *** kurahaupo joined
[12:55] *** shareable6 joined
[12:57] *** lucasb joined
[12:58] *** AlexDaniel joined
[13:08] *** robertle joined
[13:09] *** shareable6 left
[13:28] *** isBEKaml left
[13:38] *** mahafyi joined
[13:39] *** molaf joined
[13:56] *** kiop joined
[13:57] *** ChoHag joined
[14:01] *** scimon left
[14:01] *** scimon joined
[14:01] *** ufobat_ left
[14:05] *** shareable6 joined
[14:05] *** ChanServ sets mode: +v shareable6

[14:21] *** raynold left
[14:21] *** FROGGS left
[14:25] *** SteffanW left
[14:25] *** skids joined
[14:30] *** stmuk_ joined
[14:31] *** stmuk left
[14:34] <jkramer> Is there a way to create a range with whatever like this, but working:

[14:34] <jkramer> m: my @foo = <foo bar baz>; say @foo.keys.map(*..@foo.elems)

[14:34] <camelia> rakudo-moar be35160d5: OUTPUT: ¬´Cannot resolve caller map(Seq: Range); none of these signatures match:‚ê§    ($: Hash \h, *%_)‚ê§    (\SELF: &block;; :$label, :$item, *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:35] <jkramer> So it does this, just with whatever:

[14:35] <jkramer> m:  my @foo = <foo bar baz>; say @foo.keys.map({$_..@foo.elems})

[14:35] <camelia> rakudo-moar be35160d5: OUTPUT: ¬´(0..3 1..3 2..3)‚ê§¬ª

[14:36] <Herby_> o/

[14:40] *** Zoffix joined
[14:40] <Zoffix> jkramer: when whatever star is a term on it's own, it's just a Whatever object, not a closure.

[14:41] <Zoffix> So you're simply creating a Range object there, with Whatever as the starting end point

[14:41] <Zoffix> m: my @foo = <foo bar baz>; say @foo.keys.map: *.self .. +@foo

[14:41] <camelia> rakudo-moar be35160d5: OUTPUT: ¬´(0..3 1..3 2..3)‚ê§¬ª

[14:41] <Zoffix> And here, you get a closure, 'cause it's not a term by itself.

[14:42] <Zoffix> AFAIK the ops that get curried over and those that aren't aren't documented yet. It's D#2017 

[14:42] <synopsebot> D#2017 [open]: https://github.com/perl6/doc/issues/2017 [docs] Docs on Whatever curry could be clearer / don't cover everything

[14:42] <jkramer> Zoffix: Ah, thanks!

[14:42] <Zoffix> m: my @foo = <foo bar baz>; say @foo.keys.map: +* .. +@foo # shorter

[14:42] <camelia> rakudo-moar be35160d5: OUTPUT: ¬´(0..3 1..3 2..3)‚ê§¬ª

[14:43] <jkramer> Oh even better :)

[14:44] <Zoffix> m: my @foo = <foo bar baz>; say @foo.keys¬ª.&[..](+@foo)

[14:44] <camelia> rakudo-moar be35160d5: OUTPUT: ¬´(0..3 1..3 2..3)‚ê§¬ª

[14:46] <Zoffix> m: my @foo = <foo bar baz>; say 0..+@foo, {.min+1 .. +@foo} ‚Ä¶^ *.min ‚â• @foo

[14:46] <camelia> rakudo-moar be35160d5: OUTPUT: ¬´(0..3 1..3 2..3)‚ê§¬ª

[14:46] *** molaf left
[14:46] <Zoffix> m: my @foo = <foo bar baz>; say ^@foo ¬´..¬ª +@foo

[14:46] <camelia> rakudo-moar be35160d5: OUTPUT: ¬´(0..3 1..3 2..3)‚ê§¬ª

[14:46] <Zoffix> That's the shortest one :)

[14:48] <Zoffix> m: say ^$_ ¬´..¬ª +$_ with <foo bar baz>

[14:48] <camelia> rakudo-moar be35160d5: OUTPUT: ¬´(0..3 1..3 2..3)‚ê§¬ª

[14:51] <Herby_> Is there a release date for the Comma IDE yet?  I see on their website they are aiming for this month

[14:52] <Zoffix> "It's ready when it's ready"

[14:52] <Herby_> gotcha

[14:52] *** scimon left
[14:53] <Herby_> Zoffix: I saw an article of yours from last year where you were talking about writing Rakudo books

[14:53] <Zoffix> Well, I just made that up. I've not heard of any release dates.

[14:53] <Herby_> is that still on the horizon?

[14:53] *** scimon joined
[14:55] <Zoffix> Herby_: yeah, I still plan to write something and have already produced some content that will be in the book in some form. It's kind'f a negative result of my quitting drinking: I no longer write as much :)

[14:56] *** scimon left
[14:57] <Zoffix> Herby_: and I might deviate from the 3..5 books I originally planned and instead write a book that dispells the myth of Perl 6 being "very big" and stuff. 'cause IMO it really is a myth caused by us providing tools in core, rather than in some 3rd party library.

[14:58] *** domidumont left
[14:58] <Zoffix> I mean. It will teach Perl 6, with the goal to teach it just as any other "not big" language, rather than "holy shit, there's 50 ways of doing this and here they all are. Learn them STAT"

[14:59] <Herby_> Yeah, I think that would be good

[15:00] *** athenot left
[15:00] *** psychoslave left
[15:01] *** athenot joined
[15:20] *** robertle left
[15:30] <timotimo> https://www.vim.org/vim-8.1-released.php   o_O

[15:30] *** jmerelo joined
[15:34] *** isBEKaml joined
[15:37] <geekosaur> nvi has had that for how long now? *eyeroll*

[15:38] <timotimo> emacs has had this for at least 30 years i'm sure

[15:38] <geekosaur> wasn;t even going to touch that one. vim is more or less the definition of emacs envy

[15:38] * [Coke] calls Zoffix's plates with NYS KHAAAAAN

[15:38] <timotimo> isn't it good that a fork of the thing is prototyping stuff and that's coming back to the original for the benefit of everybody?

[15:47] *** kybr joined
[15:47] *** kurahaupo left
[15:48] <mst> I've never really understood why you'd want a terminal in your editor rather than using a terminal manager of some sort to launch one of each

[15:48] *** kurahaupo joined
[15:49] <isBEKaml> Hmm, the terminal in IntelliJ is much more tolerable than the bare cmd

[15:51] <isBEKaml> But sure, I won't need a terminal in an editor when I'm on Linux

[15:51] <geekosaur> if you're on windows, cmd window is fairly lane

[15:51] <geekosaur> lame

[15:51] *** softmoth joined
[15:51] <geekosaur> a terminal integrated into your editor/IDE/whatever and with smart editing features derived therefrom is a win

[15:51] *** Herby_ left
[15:52] <geekosaur> conversely it's kinda painful to make an xterm or other terminal emulator *really* behave like your editor, beyond simple line editiing

[15:52] *** Herby_ joined
[15:52] *** ChoHag left
[15:53] <Zoffix> [Coke]: that reference is lost on me. Something about StarTrek? :)

[16:00] *** aindilis left
[16:01] <Herby_> https://gist.github.com/sylints/52081eb2f20ddc14e85d8ba8d9ad7b4b

[16:01] <Herby_> maybe I'm half asleep but I'm not sure why this is not working

[16:01] <Herby_> I zef installed Concurrent::Trie

[16:01] <Herby_> but when I run that script, i'm being told it cant find Concurrent::Trie

[16:05] *** aindilis joined
[16:05] <El_Che> Zoffix: I don't thing it's a myth

[16:05] <El_Che> think

[16:07] <Zoffix> Then after I write my book, you can write yours :P

[16:08] <Zoffix> "Perl 6 is pretty damn huge"

[16:08] <El_Che> a small language, that is not very expressive, like go you'll pick in a few days. The included libraries (http, encryption, etc) you'll pick up by reading the doc, they don't add expressive power

[16:08] <jmerelo> Zoffix: And hairy. 

[16:08] <El_Che> it's the same as a class you wrote yourself

[16:09] <El_Che> in perl 6 you have all these little shortcuts

[16:09] <jmerelo> Herby_: it looks pretty OK as long as Concurrent::Trie is installed. If you've switched versions, that might be it...

[16:09] <El_Che> sometimes with small differences

[16:09] <El_Che> e.g. on how you write a pair

[16:09] <Herby_> jmerelo: I haven't switched anything that I'm aware of. I just installed the Trie module

[16:09] <El_Che> you need to know all 6 (?) ways to read someone elses code

[16:10] <El_Che> once you paid the price, the expressivity is something you don't want to give up

[16:10] <jmerelo> Herby_: maybe not... perl6 -M Concurrent::Trie -e "my $trie = Concurrent::Trie.new;" returns the same thing...

[16:12] <Zoffix> El_Che: there's more in sizes than "small language" and "big language". I never said Perl 6 was a small language and your comparison with Go is unfair.

[16:12] <jmerelo> Herby_: it does not work... jnthn , you there?

[16:12] <El_Che> why? it's an extreme example

[16:12] <Zoffix> El_Che: and you're making the same mistake Zefram did in his talk where he trashes Perl 6 for being too big. Your Go docs won't cover the dozens of libraries you'd be using to get similar features to what's provided by core Perl 6. Just because you know Go the language doesn't mean you automatically know all those libraries.

[16:13] <jmerelo> Herby_: there's something weird here: https://github.com/JJ/p6-concurrent-trie/blob/master/META6.json#L10

[16:13] <jmerelo> (already forked and working on it...)

[16:13] <Zoffix> El_Che: if the myth is "Perl 6 is very big" you can't dispell the myth by saying "It's not very small"

[16:13] <Herby_> jmerelo: I just spotted that too. thanks for taking a look at it

[16:13] <jnthn> jmerelo: Yes, what's up?

[16:13] *** Kaiepi left
[16:13] <Zoffix> jnthn: s/dispell/prove/;

[16:14] <Zoffix> s/jnthn//;

[16:14] <El_Che> I don't see big as a problem

[16:14] <jmerelo> jnthn: check out Herby_'s code above.

[16:14] <Herby_> https://gist.github.com/sylints/52081eb2f20ddc14e85d8ba8d9ad7b4b

[16:14] <Zoffix> El_Che: what is this conversation about exactly?

[16:14] <El_Che> it's not about libraries

[16:14] <jnthn> jmerelo: Ah, yeah, the META.json looksbusted :)

[16:14] <El_Che> (sorry bad train wifi)

[16:14] <El_Che> (cell wifi)

[16:14] <El_Che> Zoffix: that I don't understand why you say Perl 6 is not big

[16:15] <El_Che> perl5 is also big in has less expressivity

[16:15] <jmerelo> jnthn: If you don't have time to work on it now, just let me know. Thanks!

[16:15] <El_Che> nothing wrong with big languages, it's a choice the language designer makes

[16:15] *** Zoffix left
[16:17] *** telex left
[16:17] <jnthn> jmerelo: Fixed the META6.json

[16:17] <jmerelo> jnthn++

[16:18] <jnthn> Can't remember if it's distributed by CPAN or by GitHub

[16:18] <geekosaur> El_Che, there's an argument that "big" means "stuff wired into core" as opposed to "stuff bundled with"

[16:18] *** telex joined
[16:18] *** ChoHag joined
[16:18] <timotimo> jnthn: it's on cpan

[16:18] <geekosaur> we bundle a bunch of stuff, but avoid hardwiring things into e.g. the parser

[16:18] *** raschipi joined
[16:18] <geekosaur> p6 isn;t big language, it's big batteries included

[16:19] <timotimo> jnthn: before you upload the next version, maybe consider adding some tags to the meta6json? :)

[16:19] <timotimo> Algorithm::Trie::libdatrie for example has tags "text" and "trie"

[16:20] <timotimo> and something for "threadsafe" or something

[16:21] <El_Che> geekosaur: yes, but by big I also understand expressivity. You need to understand different ways to do the same thing (something where no libs are needed in perl6 or other languages)

[16:21] <El_Che> I gave the pair example

[16:21] <geekosaur> I don;t think fo that as big

[16:21] <El_Che> you can like it or hate, but you need to deal with it when you read someone else code

[16:21] <geekosaur> I mean, by that standard Tcl is enormous

[16:21] <El_Che> do you push to an array as a method or function?

[16:21] <El_Che> etc

[16:22] <El_Che> geekosaur: perl6 is not the only big language. perl5 is also big in my book

[16:22] <geekosaur> it's flexible. we flex it a bit. this isn't so much big, as youung: provide the pieces, let the community decide what it wants

[16:22] <geekosaur> then deprecate unused ones later

[16:23] <El_Che> I don't see big as bad

[16:23] <geekosaur> otherwise youre casting  Python "Guido decides how you code"

[16:23] <geekosaur> p5 I see as big because there's so much hardcoded unix not just in the ecosystem but in the parser. which is why it's always been a mess on windows

[16:24] <El_Che> I am not proposing to make of perl6 a small language

[16:24] <Herby_> jmerelo and jnthn: thanks for the quick fix :)

[16:24] <geekosaur> but it soulds like your real disagreement is ytou think we should be python There Is Only One Way, Follow Guido

[16:24] <geekosaur> and, no.

[16:24] <jmerelo> Herby_: a pleasure. :-)

[16:24] <geekosaur> provide the tools, let the community decide which ones it wants to use, deprecate or module the rest

[16:24] <El_Che> python is not my cup of tea

[16:25] <geekosaur> but you don;t like multiple ways to do things?

[16:25] <El_Che> I don't mind that

[16:25] <El_Che> (but in the pair case is too much)

[16:25] <geekosaur> or at least you have yourself convinced this is a permanent problem instead of a necessary growing pain

[16:25] <El_Che> you're missing my argument

[16:26] <El_Che> I am not saying that big or small is better

[16:26] <El_Che> I am saying that some languages are small and some are big because they were ceonceived that way

[16:27] <El_Che> and in my eyes, perl 6 was conceived as a big languages, very expressive, lots of batteries

[16:27] <El_Che> that's why I like perl 6, but I know there is a price to pay for that when you learn the language

[16:28] *** stmuk joined
[16:28] <El_Che> the other extreme, go, that I also like I use, you pick it up really quick but you pay the price later when you're repeating yourself all over the place

[16:28] <geekosaur> I‚Ä¶ you have an odd notion of designed

[16:29] <geekosaur> you consider the core and the periphery to be inseperable, apparently

[16:29] *** stmuk_ left
[16:29] <El_Che> having several ways to create hashes, pairs, etc seems core to me

[16:29] <geekosaur> we have the potential for lots of pluggables, we toss a decent selection oinb. this is your bug

[16:29] <geekosaur> er, your big

[16:30] <El_Che> yes, indeed

[16:30] *** comborico1611 joined
[16:30] <geekosaur> I'm not so sure of that, the core provides one mechanism, you can think foi the rest as slangs/"preprocessors"

[16:30] <Geth> ¬¶ doc: b18bddba29 | (JJ Merelo)++ | doc/Language/contexts.pod6

[16:30] <synopsebot> Link: https://doc.perl6.org/language/contexts

[16:30] <Geth> ¬¶ doc: Adds @zoffix's example to sink context

[16:30] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/b18bddba29

[16:31] <geekosaur> my idea of "multiple eways to make a pair" includes "they aren;t the same type"

[16:31] <geekosaur> which is not true of p6

[16:31] <geekosaur> outer syntax is flexible and extensible

[16:32] <geekosaur> (it is in a sense true of python, which is one of the things I dislike about it: lists and tuples are almost but not quite the same thing)

[16:32] <El_Che> it certainly is, but once out of the bag, I don't see things changing. Only truly broken things will be changed. 

[16:32] <HaraldJoerg> To add: Having several ways to quote stuff, all in the core: 'foo' or q!foo! Q:q!foo! or Q:single (foo) ... I doubt that any of those will be deprecated

[16:32] <geekosaur> I am rapidly landing on "agree to disagree, if you truly are bothered by this, there are other languages"

[16:33] <El_Che> you miss my point: I am not bothered at all

[16:33] <El_Che> I am just saying Perl 6 is big

[16:33] <El_Che> and big is not a bad thing

[16:34] <HaraldJoerg> I am with El_Che that things like this will make reading other people's code difficult to read

[16:34] <El_Che> it's what it is, you win some, you lose some

[16:34] <geekosaur> also if things are designed to be orthogonal,"big" in one dimension is small in another

[16:34] <El_Che> many of us are perl 5 programmers

[16:34] <El_Che> we know how much expressiveness we get

[16:34] <El_Che> and we know we need to be careful not to be too smart and make the code unreadable

[16:34] <geekosaur> and my problem with :difficult to read" is there's an example of trying to simplify that away

[16:34] <geekosaur> it's called java

[16:35] <geekosaur> and it led to massive boilerplate. this is easier?

[16:35] <El_Che> it depends

[16:35] <El_Che> for the poor sod writing the code no

[16:35] <El_Che> for the manager looking for cheap people that can pick it up fast? sure

[16:35] <El_Che> it's in the eye of the beholder

[16:36] <geekosaur> for me reading it, I'm swimming in a pig pool looking for the diamond that fell into it

[16:36] <El_Che> fix that

[16:36] <geekosaur> I did. I use languages that don't drown me in noise

[16:36] <geekosaur> you think 4 levels of factory to make up for lack of expressiveness is a readability win, you can have it

[16:37] <raschipi> Is Python smaller or bigger than Perl 6 in your view, El_Che?

[16:37] <El_Che> geekosaur: for the record I never go to love python and did java in the past (but not anymore)

[16:37] <El_Che> raschipi: I don't know enough python to answer that

[16:37] <raschipi> And Java?

[16:38] <El_Che> when I did java (6) I found it a small lang with a big stdlib

[16:38] <El_Che> I stick with perl5, 6 and go nowadays

[16:39] <El_Che> I didn't find Java complex, but recently I helped a collegaue debug Java Spring code

[16:39] <El_Che> omg, complexity overdose

[16:44] <raschipi> It's like Perl5 lacking parameters, which is extra syntax in Perl 6. It's harder to understand functions in Perl 5 because you need to know how things are being done.

[16:45] <El_Che> true

[16:45] *** stee3 joined
[16:46] <raschipi> Pushing things from syntax or core to a standard library or to the programmer doesn't make them any smaller.

[16:46] <El_Che> but in this specific case it's concentrated notation that eliminates a lot of boilerplat

[16:46] <El_Che> e

[16:47] <El_Che> raschipi: that's not what happens in other languages

[16:47] <El_Che> you don't look in the stdlib or third party to have different ways to defines hashes/map in go or java

[16:47] <raschipi> Size here being the amount of stuff you need to hold in your head to understand the language.

[16:48] <El_Che> you will look for a replacement for the builtin cmd handler in go because it's crap

[16:48] <jnthn> timotimo:Good point, added some

[16:49] *** stee left
[16:49] <comborico1611> raschipi: That is a good definition of "size" in regard to programming.

[16:49] <El_Che> raschipi: yyou liberate space in your head by the things that are builtin and feel natural

[16:50] <El_Che> you loose space for the extra things you need to know but you won't use because it's not your style

[16:50] <El_Che> e,g, :1st in my case

[16:50] <comborico1611> El_Che: Good point.

[16:50] *** kiop left
[16:51] <geekosaur> problem there is you do use them, when they are natural: adverbs

[16:51] <geekosaur> and having them be the same mechanic underneath is a win

[16:51] <El_Che> geekosaur: I understand lot of people love it

[16:52] <El_Che> more power to them

[16:52] <El_Che> so I learnt it for when I read code

[16:52] <jnthn> Herby_ jmerelo New version just uploaded to CPAN. Hope that helps. :)

[16:52] <raschipi> Exactly, :1st isn't a floating construct, it's used in, for example, m:i/a  b  c/

[16:53] <raschipi> Try to do that using i => True syntax.

[16:53] <El_Che> sure, that make sense

[16:54] <El_Che> for a regular hash, less so

[16:54] <El_Che> :42foo, :43bar

[16:54] * jnthn afk

[16:54] <raschipi> It's just made as a general construct.

[16:54] <El_Che> I understand that

[16:55] <El_Che> so, you need to understand all the general constructs that can be used in a lot of places

[16:55] <raschipi> m: my sub func (:$no) {say "NO!" if  $no }; func():no

[16:55] <camelia> rakudo-moar 073a7f50f: OUTPUT: ¬´NO!‚ê§¬ª

[16:55] <raschipi> Better than having to understand special contructs.

[16:56] <El_Che> raschipi: I use it i signatures

[16:56] <geekosaur> ^ so it's better to have magic syntax that works only here and nowhere else?

[16:56] <MasterDuke_> huh, i haven't seen that before

[16:56] *** MasterDuke_ is now known as MasterDuke

[16:56] <El_Che> :$var felt more natural to me than :42var

[16:57] <El_Che> train almost there. 

[16:57] <El_Che> my point is not that they are bad or too many

[16:58] <El_Che> only that there is extra complexity

[16:58] <El_Che> you need to know them

[16:58] <El_Che> you can't not ignore them

[16:58] <El_Che> and that makes it "big"

[16:58] <Geth> ¬¶ doc: adc5f09c12 | (JJ Merelo)++ | doc/Language/traps.pod6

[16:58] <synopsebot> Link: https://doc.perl6.org/language/traps

[16:58] <Geth> ¬¶ doc: Adds documentation on map "sinkage"

[16:58] <Geth> ¬¶ doc: 

[16:58] <Geth> ¬¶ doc: This closes #1718 but see my comment.

[16:58] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/adc5f09c12

[16:58] <Herby_> jnthn: thanks!

[16:58] <El_Che> got to go

[16:58] <El_Che> thx for the info

[16:59] <El_Che> interesting discussion

[16:59] <El_Che> (and I am the guy explaining perl6 at work, figure that :) )

[17:01] *** andrzejku left
[17:02] <raschipi> There's no problem at all with not understanding all of Perl6. There's no one that understands all of it anyway. Not even Larry.

[17:02] <comborico1611> El_Che: I think that is fair conclusion.

[17:02] <buggable> New CPAN upload: Concurrent-Trie-1.1.tar.gz by JNTHN http://modules.perl6.org/dist/Concurrent::Trie:cpan:JNTHN

[17:02] *** shareable6 left
[17:04] <jmerelo> jnthn: sure it does. Thanks!

[17:05] *** ufobat_ joined
[17:06] *** g- left
[17:06] <Geth> ¬¶ doc: 3e05b4165c | (JJ Merelo)++ | doc/Language/traps.pod6

[17:06] <Geth> ¬¶ doc: Correcting POD thanks to @AlexDaniel for pointing it out

[17:06] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/3e05b4165c

[17:11] *** Ven`` joined
[17:11] <geekosaur> I would say that reusing stuff that way is precisely what contains the complexity, and thinking p6 is "big" is missing the compaction from that reuse. which ‚Ä¶ yes, entitely possible, but also entirely missing the point of p6's design

[17:11] *** Ven`` left
[17:11] <geekosaur> so thinking that makes p6 big is not understanding p6

[17:12] *** g- joined
[17:15] <Geth> ¬¶ doc: 97bf51cfe2 | (JJ Merelo)++ | 2 files

[17:15] <Geth> ¬¶ doc: Adding some documentation

[17:15] <Geth> ¬¶ doc: 

[17:15] <Geth> ¬¶ doc: Reviewing if the merging indicated in #1822 is possible, but well, it

[17:15] <Geth> ¬¶ doc: is not, because they target a different set of files. It might still

[17:15] <Geth> ¬¶ doc: be interesting to unify all these tests, and create a set of

[17:15] <Geth> ¬¶ doc: extensions as well as regexes or tests they should meet. But not for

[17:15] <Geth> ¬¶ doc: the time being.

[17:15] <Geth> ¬¶ doc: So it closes #1822.

[17:15] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/97bf51cfe2

[17:25] *** Zoffix joined
[17:26] *** Zoffix left
[17:31] *** domidumont joined
[17:34] *** skids left
[17:38] <Geth> ¬¶ doc: 8a00bc15bc | (JJ Merelo)++ | htmlify.p6

[17:38] <Geth> ¬¶ doc: Adds a CATCH to catch possible htmlify.p6 errors

[17:38] <Geth> ¬¶ doc: 

[17:38] <Geth> ¬¶ doc: This would close #1932, and also refs #1823, which might or might not

[17:38] <Geth> ¬¶ doc: be done eventually.

[17:38] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/8a00bc15bc

[17:41] *** espadrine_ joined
[17:54] <Geth> ¬¶ doc: a9ea5277dc | (JJ Merelo)++ | htmlify.p6

[17:54] <Geth> ¬¶ doc: Changed disambiguation files to surround the name with ¬´¬ª

[17:54] <Geth> ¬¶ doc: 

[17:54] <Geth> ¬¶ doc: This would close #2030, although I'm not sure what disambiguation

[17:54] <Geth> ¬¶ doc: files are for, since they appear not to be linked from anywhere...

[17:54] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/a9ea5277dc

[17:56] <Geth> ¬¶ doc: JJ self-assigned Which phasers are compatible with "will trait"? https://github.com/perl6/doc/issues/1553

[18:00] *** shareable6 joined
[18:04] <Geth> ¬¶ doc: fdeaa1e0a2 | (JJ Merelo)++ | doc/Language/phasers.pod6

[18:04] <synopsebot> Link: https://doc.perl6.org/language/phasers

[18:04] <Geth> ¬¶ doc: Included a few more details on will

[18:04] <Geth> ¬¶ doc: 

[18:04] <Geth> ¬¶ doc: Looking mainly at the roast test:

[18:04] <Geth> ¬¶ doc: https://github.com/perl6/roast/blob/fca87f2030d5cab6fc8460e5b195aecd9b7765b2/S04-declarations/will.t

[18:04] <Geth> ¬¶ doc: 

[18:04] <Geth> ¬¶ doc: Some not implemented here, but at least an example of those phasers

[18:04] <Geth> ¬¶ doc: excluded could be added. Not sure the issue is current, anyway, since

[18:04] <Geth> ¬¶ doc: it said which phasers could be used this way. Closes #1553 anyway.

[18:04] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/fdeaa1e0a2

[18:07] <Geth> ¬¶ doc: 6027c8a5c9 | (JJ Merelo)++ | doc/Language/concurrency.pod6

[18:07] <synopsebot> Link: https://doc.perl6.org/language/concurrency

[18:07] <Geth> ¬¶ doc: Explains you shouldn't use last in whenever

[18:07] <Geth> ¬¶ doc: 

[18:07] <Geth> ¬¶ doc: That would close #1551. Please reopen if you don't feel happy about it.

[18:07] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/6027c8a5c9

[18:10] *** mcmillhj left
[18:10] *** khaled joined
[18:10] <khaled> hi

[18:11] *** Kaiepi joined
[18:12] <moritz> ho

[18:13] <jmerelo> huh?

[18:14] *** mcmillhj joined
[18:14] <Geth> ¬¶ doc: b876c85fc7 | (JJ Merelo)++ | doc/Language/contexts.pod6

[18:14] <synopsebot> Link: https://doc.perl6.org/language/contexts

[18:14] <Geth> ¬¶ doc: Adds indexing for sinking

[18:14] <Geth> ¬¶ doc: 

[18:14] <Geth> ¬¶ doc: Which had already been documented in #732. Closes #1309.

[18:14] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/b876c85fc7

[18:16] <moritz> ha!

[18:16] <jmerelo> he++

[18:16] * jmerelo loling all by himself.

[18:18] * jmerelo closing shop for today.

[18:19] *** jmerelo left
[18:24] *** MasterDuke_ joined
[18:26] *** MasterDuke left
[18:27] *** khaled left
[18:29] <Geth> ¬¶ doc: ElenaMerelo++ created pull request #2031: Minor changes

[18:29] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2031

[18:30] *** MasterDuke_ is now known as MasterDuke

[18:31] *** mahafyi left
[18:34] *** pilne joined
[18:34] *** isBEKaml left
[18:36] *** shareable6 left
[18:39] *** mspo joined
[18:39] <mspo> moritz: hey saw your name on pt-table-sync release notes

[18:42] <moritz> mspo: oh, there's a new release? that's great :-)

[18:42] <moritz> mspo: I just contributed a small patch that $work needed

[18:42] <mspo> moritz: I (unfortunately) end up using pt-table-sync every now and then :)

[18:43] <mspo> moritz: specifically on hosts with different binlog formats, even

[18:44] <moritz> mspo: does this help you then? or are using it with one of the sync options that needs identical binlog formats?

[18:45] <mspo> moritz: I don't know I didn't look at the patch :)

[18:45] <mspo> but probably

[18:51] *** sjoshi joined
[18:51] *** darutoko left
[18:55] *** skids joined
[18:57] *** aindilis left
[18:58] *** aindilis joined
[19:00] *** stmuk_ joined
[19:01] *** aindilis left
[19:01] *** psychoslave joined
[19:04] *** stmuk left
[19:09] *** mcmillhj left
[19:09] *** domidumont left
[19:12] *** ChoHag left
[19:14] *** robertle joined
[19:17] *** dct joined
[19:18] *** aindilis joined
[19:18] *** ChoHag joined
[19:20] *** mcmillhj joined
[19:21] *** mspo left
[19:25] *** raschipi left
[19:28] *** mcmillhj left
[19:32] *** Tison joined
[19:32] *** wamba joined
[19:32] *** shareable6 joined
[19:33] *** sjoshi left
[19:33] <Tison> .

[19:33] *** cognominal joined
[19:39] *** mcmillhj joined
[19:39] *** Tison left
[19:43] *** zachk joined
[19:43] *** mcmillhj left
[19:48] *** pmurias joined
[19:51] *** mcmillhj joined
[19:52] <buggable> New CPAN upload: P5__DATA__-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5__DATA__-0.0.1.tar.gz

[19:54] <lizmat> FROGGS++   # helping out

[19:54] <lizmat> sjn: ^^^

[19:55] *** athenot left
[19:55] *** mcmillhj left
[20:00] *** cognominal left
[20:02] *** mcmillhj joined
[20:05] *** isBEKaml joined
[20:06] *** cozachk joined
[20:06] *** zachk left
[20:07] *** cozachk is now known as zachk

[20:07] *** zachk left
[20:07] *** zachk joined
[20:08] *** rindolf left
[20:09] *** andrzejku joined
[20:12] *** Herby_ left
[20:13] *** rindolf joined
[20:14] *** andrzejku_ joined
[20:16] *** andrzejku left
[20:19] *** andrzejku_ left
[20:22] <buggable> New CPAN upload: perl6-cache-async-0.1.2.tar.gz by ROBERTLE https://cpan.metacpan.org/authors/id/R/RO/ROBERTLE/Perl6/perl6-cache-async-0.1.2.tar.gz

[20:27] *** Herby_ joined
[20:27] *** isBEKaml left
[20:27] *** mcmillhj left
[20:27] *** |oLa| joined
[20:32] *** psychoslave left
[20:35] *** mcmillhj joined
[20:35] *** mcmillhj left
[20:43] *** mcmillhj joined
[20:48] *** mcmillhj left
[20:51] *** itaipu left
[20:54] *** slayergames joined
[20:56] *** softmoth left
[21:03] <Juerd> https://polyfloyd.net/post/compile-time-prevention-of-sql-injections/  # Does Perl 6 have a type or other parameter constraint that only allows compile time string literals?

[21:04] *** mcmillhj joined
[21:05] *** HaraldJoerg left
[21:09] *** mcmillhj left
[21:09] *** espadrine_ left
[21:10] <lizmat> Juerd: I came up with: sub a(Str:D \item where -> \value { value.VAR.^name ne "Scalar" } ) { }; a "foo"

[21:11] <Juerd> It'll take me a while to parse that :)

[21:11] <lizmat> Juerd: or with nqp: sub a(Str:D \item where -> \value { use nqp; !nqp::iscont(value) } ) { }; a my $ = "foo"

[21:12] <lizmat> basically, alias the parameter and see if it is a container or not

[21:12] <lizmat> if it's not, then it's a literal value

[21:12] *** athenot joined
[21:12] <Juerd> But that wouldn't block "WHERE foo = $foo"

[21:13] <Juerd> The goal is to reject anything that had anything interpolated or concatenated

[21:14] <lizmat> well, then you would have to do something at compile time

[21:14] <lizmat> hmmm....  no, I wouldn't know of a way just yet the

[21:14] <lizmat> n

[21:21] *** TEttinger joined
[21:21] *** espadrine_ joined
[21:22] <slayergames> how does Iterator not extend Mu?

[21:22] <masak> m: say Iterator ~~ Mu

[21:22] <camelia> rakudo-moar 7bde26fc3: OUTPUT: ¬´True‚ê§¬ª

[21:23] <slayergames> oh

[21:23] <slayergames> it doesn't say so in the docs

[21:23] <slayergames> is ~~ also "extends check" besides being regex matching?

[21:26] *** mcmillhj joined
[21:26] <MasterDuke> slayergames: it's "smartmatching", it does a lot

[21:28] *** slayergames left
[21:30] *** mcmillhj left
[21:32] <buggable> New CPAN upload: P5defined-0.0.2.tar.gz by ELIZABETH http://modules.perl6.org/dist/P5defined:cpan:ELIZABETH

[21:32] *** mcmillhj joined
[21:35] *** mcmillhj_ joined
[21:37] *** mcmillhj left
[21:37] *** softmoth joined
[21:47] *** mcmillhj joined
[21:52] *** mcmillhj left
[21:56] *** Khisanth left
[22:00] <comborico1611> I'm hearing rumors that emacs 26 might be coming out this weekend.

[22:03] <El_Che> Too late, the new vim is already out

[22:03] <El_Che> yesterday actuanlly

[22:04] *** mcmillhj joined
[22:05] <comborico1611> heh

[22:06] <El_Che> it's like when you have two messianic religions and one of them already welcomed they mesiah the day before :)

[22:09] *** mcmillhj left
[22:10] <geekosaur> but neither one accepts the other's messiah, so.

[22:10] <geekosaur> (meanwhile, they;re off having the rapture and the rest of us can get some work done :p )

[22:10] <El_Che> haha

[22:12] *** Khisanth joined
[22:16] *** slayergames joined
[22:16] <slayergames> how can you have a range with step?

[22:19] *** SCHAPiE left
[22:19] *** obra joined
[22:20] *** mcmillhj joined
[22:20] <lucasb> I don't think you can. But you can have a sequence with your desired step

[22:21] <lucasb> m: say .min, .min+3 ... .max given 1..10

[22:21] <camelia> rakudo-moar b15af2c9d: OUTPUT: ¬´(1 4 7 10)‚ê§¬ª

[22:21] <lucasb> hopefully someone else will have a better example

[22:22] *** robertle left
[22:23] <El_Che> m: (2,4 ... 20).say

[22:23] <camelia> rakudo-moar b15af2c9d: OUTPUT: ¬´(2 4 6 8 10 12 14 16 18 20)‚ê§¬ª

[22:24] *** mcmillhj left
[22:25] *** mcmillhj_ left
[22:25] *** SCHAPiE joined
[22:26] <Herby_> squashable6: help

[22:26] <squashable6> Herby_, Available commands: status, log, quiet, loud # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Squashable

[22:26] <Herby_> squashable: status

[22:26] <squashable6> Herby_, Next SQUASHathon in 13 days and ‚âà11 hours (2018-06-02 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[22:26] <Herby_> squashable6: log

[22:26] <squashable6> Herby_, Nothing there yet

[22:27] <AlexDaniel> Herby_: maybe I can help? What are you searching for?

[22:27] <Herby_> AlexDaniel: o/

[22:27] <Herby_> I was looking through the whateverable issues: #314

[22:27] <Herby_> was trying to see what exactly wasn't working

[22:31] *** mcmillhj joined
[22:34] <AlexDaniel> Herby_: Ah, 314

[22:34] <AlexDaniel> didn't know there was a ticket

[22:34] <AlexDaniel> it was fixed in https://github.com/perl6/whateverable/commit/031cf5de521ba1002ab7379bedc6b432213de194

[22:36] *** softmoth left
[22:36] *** wamba left
[22:36] <Herby_> awesome. one ticket down :)

[22:36] *** mcmillhj left
[22:37] <AlexDaniel> Herby_: still needs tests I think, but Squashable has no tests at all right now

[22:38] <AlexDaniel> not sure if it's worth it

[22:39] *** ufobat_ left
[22:51] *** obra left
[22:53] <slayergames> what is the benefit of using special sigils for arrays? (@)

[22:55] <El_Che> Each sigil, therefore, carries a set of useful default behaviors for data that is to be considered a single item ($), something to index in to positionally (@), something to index in to with a key (%), and something that can be called (&).

[22:55] <El_Che> (from jnthn answer on SO)

[22:55] <El_Che> Syntactic disambiguation (you can call a variable whatever you want, even if there happens to be a keyword with that name)

[22:55] <El_Che> Readability (the data in the program stands out thanks to the sigil)

[22:55] *** Zoffix joined
[22:56] <Zoffix> slayergames: this article explains it well: https://perl6advent.wordpress.com/2017/12/02/

[22:56] <El_Che> slayergames: https://stackoverflow.com/questions/50399784/is-there-a-purpose-or-benefit-in-prohibiting-sigilless-variables-from-rebinding (the fist answer, ignore the binding part)

[22:56] <AlexDaniel> there are some good points on https://docs.perl6.org/language/faq#Why_sigils?_Couldn't_you_do_without_them? but I actually expected it to provide more detailed justifications

[22:56] *** cognominal joined
[22:58] *** mcmillhj joined
[22:59] *** athenot_ joined
[22:59] *** athenot left
[23:01] <Herby_> Looking at the performance section: https://docs.perl6.org/language/performance

[23:01] <Herby_> MasterDuke++ for recently updating it

[23:01] <Herby_> It reads that code that gets JIT'd is a good thing

[23:02] <Herby_> is there anything out there that speaks to what kind of code/structure etc... you want to aim for in an effort to have the VM jit it?

[23:02] <Herby_> not sure if that makes sense

[23:02] *** pmurias left
[23:03] *** mcmillhj left
[23:03] *** athenot joined
[23:04] *** athenot_ left
[23:04] *** llfourn joined
[23:05] *** Khisanth left
[23:05] <MasterDuke> hm, that's a good question

[23:05] <MasterDuke> but i think the jit has pretty good coverage now, so most things do end up getting jitted

[23:07] <Herby_> gotcha

[23:08] *** lucasb left
[23:09] *** wamba joined
[23:10] *** mcmillhj joined
[23:10] *** cognominal left
[23:11] *** cognominal joined
[23:11] <MasterDuke> but there probably could be some suggestions there. like breaking a large routine with branching it based on the types of its arguments into smaller multis

[23:11] <Zoffix> slayergames: as for your earlier question. A Range object doesn't have any steps, only end points and info on whether either of them is excluded. If you meant you want a sequence of numbers for A to B, increasing by an arbitrary number of steps, you can use the sequence operator `‚Ä¶`. But if you do have a Range object and you want to iterate while skipping some items, you could use the .toggle method or .kv +

[23:11] <Zoffix> grep(indeces you want) + map(value)

[23:13] <MasterDuke> hm, could you use .rotor for that also?

[23:13] <Zoffix> Actually, .toggle is kinda sucky and long

[23:14] <Zoffix> m: say (1..20).toggle: {++$ %% 2} xx *

[23:14] <camelia> rakudo-moar ec0422e75: OUTPUT: ¬´(3 6 9 12 15 18)‚ê§¬ª

[23:14] <AlexDaniel> m: say (2..50)[0,2‚Ä¶‚àû]

[23:14] <camelia> rakudo-moar ec0422e75: OUTPUT: ¬´(2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50)‚ê§¬ª

[23:14] <Zoffix> I was hoping this would `state` the anon var, but it's a separate block each time

[23:14] <Zoffix> [] caches

[23:14] <Zoffix> m: say (1..20).toggle: * %% 2 xx *

[23:14] <camelia> rakudo-moar ec0422e75: OUTPUT: ¬´(2 4 6 8 10 12 14 16 18 20)‚ê§¬ª

[23:15] <AlexDaniel> sorry, caches what?

[23:15] *** mcmillhj left
[23:15] <Zoffix> m: say (1..20).pairs.grep(*.key !%% 2)¬ª.value

[23:15] <camelia> rakudo-moar ec0422e75: OUTPUT: ¬´(2 4 6 8 10 12 14 16 18 20)‚ê§¬ª

[23:15] <Zoffix> AlexDaniel: nm

[23:18] *** Khisanth joined
[23:18] <MasterDuke> m: say (1..20).rotor(1 => 1).flat

[23:18] <camelia> rakudo-moar ec0422e75: OUTPUT: ¬´(1 3 5 7 9 11 13 15 17 19)‚ê§¬ª

[23:18] <Zoffix> cool

[23:20] *** cognominal left
[23:22] *** slayergames left
[23:22] *** markong left
[23:24] *** athenot left
[23:25] *** athenot_ joined
[23:27] *** mcmillhj joined
[23:30] *** rindolf left
[23:30] *** Zoffix left
[23:32] *** mcmillhj left
[23:33] *** athenot joined
[23:33] *** athenot_ left
[23:38] *** athenot left
[23:39] *** cognominal joined
[23:45] *** espadrine_ left
[23:46] *** mcmillhj joined
[23:48] *** cognominal left
[23:49] *** cognominal joined
[23:50] *** zachk left
[23:50] *** mcmillhj left
[23:56] *** shareable6 left
