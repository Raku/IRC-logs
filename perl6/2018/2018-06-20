[00:04] *** rindolf left
[00:36] *** zachk left
[01:06] *** perlawhirl joined
[01:07] *** giraffe joined
[01:07] *** giraffe is now known as Guest33711

[01:16] *** markoong left
[01:22] *** molaf left
[01:34] *** molaf joined
[01:45] *** ryn1x joined
[01:54] <ryn1x> Just learned about Comma IDE. This is great! Became a supporter today and already wrote some code and pushed an update with it at work!

[02:08] *** lizmat joined
[02:14] *** woolfy joined
[02:14] <woolfy> I apologize for making fun of you not wanting to be touched.  I had too much to drink and I was fooling around too much.  And I indeed have a problem with being physical.  I should not do that.  Sorry.

[02:16] *** woolfy left
[02:23] *** woolfy joined
[02:23] <woolfy> My text was written in the wrong window.  I am really stupid today.  Sorry.

[02:24] *** ChoHag_ joined
[02:25] * lizmat hugs woolfy 

[02:26] *** woolfy left
[02:27] *** ChoHag left
[02:38] *** [particle]1 joined
[02:40] *** [particle] left
[02:44] *** [particle] joined
[02:46] *** [particle]1 left
[02:46] *** [particle]1 joined
[02:48] *** [particle] left
[02:50] *** [particle] joined
[02:52] *** [particle]1 left
[02:56] *** [particle] left
[02:57] *** [particle] joined
[03:04] *** [particle] left
[03:05] *** [particle] joined
[03:10] *** [particle] left
[03:26] *** sauvin joined
[03:43] *** Xliff left
[03:45] *** cowens joined
[03:45] *** mrsolo joined
[03:46] *** ZzZombo joined
[03:48] *** jhill__ left
[03:49] *** pnu__ left
[03:49] *** cowens left
[03:50] *** tbrowder_ left
[03:50] *** BuildTheRobots left
[03:50] *** Spot_ left
[03:50] *** mrsolo left
[03:50] <ZzZombo> m: print 'asd'.succ

[03:50] <camelia> rakudo-moar 304239d7a: OUTPUT: «ase»

[03:50] *** ZzZombo left
[03:51] *** caasih left
[03:51] *** chansen_ left
[03:51] *** skaji left
[03:51] *** SmokeMachine left
[04:10] <lizmat> m: say "HAL".comb.map(*.succ).join

[04:10] <camelia> rakudo-moar 304239d7a: OUTPUT: «IBM␤»

[04:16] *** [particle] joined
[04:19] *** molaf left
[04:21] *** [particle] left
[04:22] <lizmat> m: say "HAL".comb>>.succ.join  # golfed

[04:22] <camelia> rakudo-moar 304239d7a: OUTPUT: «IBM␤»

[04:29] *** molaf joined
[04:37] *** [particle] joined
[04:48] *** curan joined
[04:51] *** Schepeers joined
[04:57] *** HaraldJoerg joined
[05:03] *** Schepeers left
[05:04] *** Schepeers joined
[05:06] <El_Che> morning

[05:07] <El_Che> releasable6: status

[05:07] <releasable6> El_Che, Next release will happen when it's ready. R6 is down, GitHub is down. At least 0 blockers. Changelog for this release was not started yet

[05:08] <El_Che> github is down? Bad Microsoft :)

[05:08] <El_Che> (false alarm)

[05:11] *** ufobat_ joined
[05:24] *** zostay joined
[05:25] *** Spot_ joined
[05:25] *** mithaldu_ joined
[05:26] *** timeless joined
[05:27] *** olinkl joined
[05:29] *** molaf left
[05:30] *** kipd joined
[05:31] *** BuildTheRobots joined
[05:32] *** u-ou joined
[05:33] *** chansen_ joined
[05:36] *** SmokeMachine joined
[05:44] *** xtreak joined
[05:53] *** rodarmor joined
[05:56] *** timeless left
[05:57] *** kipd left
[05:57] *** Spot_ left
[05:57] *** chansen_ left
[05:57] *** zostay left
[05:58] *** BuildTheRobots left
[05:58] *** rodarmor left
[05:58] *** SmokeMachine left
[05:58] *** u-ou left
[05:59] *** olinkl left
[05:59] *** mithaldu_ left
[06:12] *** Xliff joined
[06:12] *** Xliff left
[06:12] *** Xliff joined
[06:15] *** domidumont joined
[06:15] *** cowens joined
[06:17] *** espadrine left
[06:19] *** mrsolo joined
[06:19] *** rodarmor joined
[06:19] *** zostay joined
[06:19] *** iviv joined
[06:20] *** mithaldu_ joined
[06:20] *** wamba joined
[06:20] *** rodarmor left
[06:20] *** pnu__ joined
[06:21] *** timeless joined
[06:21] *** domidumont left
[06:21] *** rodarmor joined
[06:21] *** caasih joined
[06:21] *** tbrowder_ joined
[06:21] *** domidumont joined
[06:21] *** PotatoGim joined
[06:21] *** Spot_ joined
[06:21] *** chansen_ joined
[06:21] *** olinkl joined
[06:21] *** SmokeMachine joined
[06:21] *** BuildTheRobots joined
[06:21] *** skaji joined
[06:21] *** Spot_ left
[06:21] *** Spot_ joined
[06:21] *** chansen_ left
[06:21] *** chansen_ joined
[06:21] *** BuildTheRobots left
[06:21] *** BuildTheRobots joined
[06:21] *** olinkl left
[06:21] *** olinkl joined
[06:22] *** SmokeMachine left
[06:22] *** SmokeMachine joined
[06:22] *** skaji left
[06:22] *** skaji joined
[06:22] *** timeless left
[06:22] *** rodarmor left
[06:22] *** BuildTheRobots left
[06:23] *** peteretep joined
[06:23] *** xtreak_ joined
[06:23] *** rodarmor joined
[06:23] *** u-ou joined
[06:24] *** nine joined
[06:24] *** kipd joined
[06:24] *** BuildTheRobots joined
[06:24] *** timeless joined
[06:25] *** girst joined
[06:25] *** BuildTheRobots left
[06:26] *** xtreak left
[06:26] *** BuildTheRobots joined
[06:33] *** skids left
[06:47] *** sno left
[06:50] *** robertle joined
[06:55] *** jhill__ joined
[06:55] *** scott joined
[06:55] *** Actualeyes joined
[06:56] <masak> m: class C { has $.foo; }; my $c = C.new(:foo("OH HAI")); my $attr = "foo"; say $c."$attr"()

[06:56] <camelia> rakudo-moar 304239d7a: OUTPUT: «OH HAI␤»

[06:58] *** |oLa| joined
[06:59] *** domidumont left
[07:08] *** xtreak joined
[07:11] *** xtreak_ left
[07:15] *** sena_kun joined
[07:16] *** domidumont joined
[07:19] <masak> I should learn to pick `token` by default in my grammars, not `regex`; `token` is usually what i want

[07:28] <El_Che> masak: you know you want token...

[07:30] <masak> I think it was quietfanatic who said that "token" is a bit of a misnomer here. in Perl 6 it means "regex but without the implicit backtracking". everywhere else it means "smallest lexical unit above individual characters"

[07:31] <masak> but I guess there is a fair amount of overlap, and I'm not sure what else I would call "token" :)

[07:33] *** jmerelo joined
[07:34] *** sno joined
[07:38] <jmerelo> Hi

[07:39] *** hami joined
[07:41] *** wamba left
[07:41] <El_Che> sregex ?

[07:41] <El_Che> straight-regex, simple regex

[07:43] <jmerelo> El_Che: no idea. Where did you see that?

[07:43] <El_Che> jmerelo: is an answer/proposal for masak's remark:

[07:43] <El_Che>                misnomer here. in Perl 6 it means "regex but without the 

[07:43] <El_Che>                implicit backtracking". everywhere else it means "smallest 

[07:43] <El_Che>                lexical unit above individual characters"

[07:43] <El_Che> 09:31 < masak> but I guess there is a fair amount of overlap, and I'm not sure 

[07:43] <El_Che>                what else I would call "token" :)

[07:43] <El_Che> he has a good point

[07:45] <El_Che> ok, the pasting was worst than I expected. Sorry for that

[07:46] *** hami left
[07:47] *** w_richard_w joined
[07:51] *** w_richard_w left
[07:53] <jast> I'd call it a "forward regex" but that's too long for making a decent keyword out of

[07:53] <jast> I think 'token' is Good Enough(tm)

[07:53] <masak> yes, not proposing a change here

[07:53] <jast> yeah

[07:53] <masak> just noting that we have sort of hijacked the word for a different concept

[07:54] <masak> partly, I guess, because the alternative would've been something like "sregex" :P

[07:54] <jast> well, not *entirely*. this is what lexers/tokenizers usually work with...

[07:54] *** scimon joined
[07:54] <masak> it's true that a tokenizer also wouldn't do backtracking, at least not in all but the rarest of cases

[07:55] <masak> but tokenizers don't have a monopoly on not doing backtracking

[07:55] <masak> which is my point. the connection between "ratcheting semantics" and "token" is very tenuous

[07:55] <jast> sure... I mean it's named by its primary intended use, I guess, which seems fairt

[07:55] <jast> especially since it's part of the whole grammar/parser thing in perl6

[07:56] *** darutoko joined
[07:56] <masak> oh, that's the second thing. I'm using `token` for *far* more things than just what a tokenizer would do

[07:56] <masak> since it's (supposed to be) my default

[07:56] *** zakharyas joined
[07:56] <jast> your fault, then, for not using it the way its name suggests ;-)

[07:57] *** damnlie left
[07:57] <masak> I would argue it's the *name's* fault, for not meaning what it means in the rest of the parser world

[07:57] <jast> it's such a shame we do everything in python here at work. I'd love to be able to use more perl6 things...

[07:58] <jast> I'm quite sure I have a lot of use cases for ratcheting, too

[07:58] <masak> as long as one recognizes that it's not *really* about tokenization, the term `token` seems quite appropriate :P

[07:58] <avalenn> I look for an easy way to get information from Link HTTP Headers as specified in RFC5988.

[07:58] <masak> jast: guess we'll have to implement Perl 6 grammars in Python :)

[07:58] <jast> guess we'll have to implement Perl 6 in Python :)

[07:59] <avalenn> Is there any existing module to do that ? I tried to build a new grammar based on IETF::RFC_Grammars::URI but I have not enough fluidity and time to do it correctly.

[08:00] *** damnlie joined
[08:02] *** sno left
[08:07] *** wamba joined
[08:09] *** dakkar joined
[08:11] *** zakharyas left
[08:12] *** zakharyas joined
[08:13] *** xtreak left
[08:14] *** cedbdn joined
[08:14] <cedbdn> morning folks

[08:15] <jmerelo> cedbdn: hi

[08:15] <cedbdn> I do get a Segmentationfault when playing around with DB::Pg

[08:15] <jmerelo> avalenn: not as far as I know. 

[08:16] <jmerelo> cedbdn: that's bad... I guess it's the last version of everything, right?

[08:17] <cedbdn> I did get run it with perl6-valgrind-m but I do get stuck not using it regurarly

[08:17] <cedbdn> Ah versions I have a look

[08:18] *** Xliff left
[08:19] <cedbdn> perl6 -v This is Rakudo Star version 2018.01 built on MoarVM version 2018.01 implementing Perl 6.c.

[08:19] <cedbdn> and DB::Pg instaled it yesterday

[08:21] <jmerelo> cedbdn: you might be better off with 2018.04, which is also a "star" release. However, the problem might be somewhere else.

[08:21] <jmerelo> cedbdn: I have seen reports of segfaults when there's some problem with a socket, but I don't know if that's the case.

[08:22] <cedbdn> ok i'll switch to 2018.04 and tell you what is happening till then have a nice time

[08:22] <jmerelo> cedbdn: segfaults are tricky things, and if you get it consistently, it might be better to create an issue in the module you are using (if after isolating the problem that's the case)

[08:22] <jmerelo> cedbdn: good luck :-)

[08:23] *** yoleaux joined
[08:23] *** ChanServ sets mode: +v yoleaux

[08:24] <jmerelo> .tell yoleaux hi

[08:24] <yoleaux> jmerelo: Thanks for the message.

[08:46] *** xtreak joined
[08:49] *** rindolf joined
[08:59] *** sno joined
[09:03] *** Xliff joined
[09:03] *** zakharyas left
[09:04] *** zakharyas joined
[09:48] *** ChoHag joined
[09:50] *** ChoHag_ left
[09:56] *** sno left
[10:00] *** rindolf left
[10:03] *** domidumont left
[10:03] *** rindolf joined
[10:04] *** Hor|zon_ joined
[10:04] *** zakharyas left
[10:10] *** zakharyas joined
[10:12] <cedbdn> <jmerelo>

[10:13] <cedbdn> <jmerelo> Thanks for the tip upgraded everything works now thks

[10:13] *** sarna joined
[10:19] *** [particle] left
[10:21] *** sarna left
[10:21] *** sarna joined
[10:24] *** [particle] joined
[10:27] *** sarna left
[10:29] *** sarna joined
[10:30] *** xtreak left
[10:47] *** sno joined
[10:48] *** releasable6 left
[10:49] *** releasable6 joined
[10:53] *** markoong joined
[10:53] *** sarna left
[10:59] *** zakharyas left
[11:04] <jmerelo> cedbdn: great to hear that :-)

[11:04] <jmerelo> releasable6: status

[11:04] <releasable6> jmerelo, Next release will happen when it's ready. 0 blockers. 87 out of 122 commits logged

[11:04] <releasable6> jmerelo, Details: https://gist.github.com/b496752da884adf88c94502fc7299da8

[11:11] *** cedbdn left
[11:16] *** sno left
[11:18] *** xtreak joined
[11:30] *** sno joined
[11:30] *** AlexDaniel joined
[11:40] *** xtreak left
[11:42] <Geth> ¦ doc: 264a20ae3a | (JJ Merelo)++ | lib/Pod/Htmlify.pm6

[11:42] <Geth> ¦ doc: Adds .html to URLs that include .

[11:42] <Geth> ¦ doc: 

[11:42] <Geth> ¦ doc: This closes #2109 but in fact fixes all other .(.+) URLs that didn't work either. In fact this issue was known for some time, but was afraid to get into it because #1823. Anyway, this is a patch and there might be a better way of doing it, but that's how it's been addressed so far.

[11:42] <Geth> ¦ doc: 

[11:42] <Geth> ¦ doc: Please test it extensively, might break something else somewhere...

[11:42] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/264a20ae3a

[11:42] <Geth> ¦ doc: fb3988b6e4 | (JJ Merelo)++ | lib/Pod/Htmlify.pm6

[11:42] <Geth> ¦ doc: Eliminates debug code

[11:42] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fb3988b6e4

[11:42] *** jmerelo left
[11:43] *** wamba left
[11:46] *** xtreak joined
[11:49] *** HaraldJoerg left
[11:51] *** domidumont joined
[11:52] *** HaraldJoerg joined
[11:56] *** sno left
[11:57] *** sno joined
[12:09] *** zakharyas joined
[12:12] *** kjk left
[12:14] *** sno left
[12:17] *** sno joined
[12:33] *** raschipi joined
[12:46] *** Xliff_ joined
[12:48] *** n1ge left
[12:56] *** markoong left
[12:57] *** n1ge joined
[12:58] *** markoong joined
[12:59] *** xtreak left
[13:10] *** benjikun left
[13:12] *** zakharyas left
[13:14] *** zakharyas joined
[13:24] *** curan left
[13:27] *** gabiruh joined
[13:28] *** gabiruh left
[13:30] *** gabiruh joined
[13:32] *** Hor|zon_ left
[13:32] *** Hor|zon_ joined
[13:32] <Geth> ¦ doc: dmaestro++ created pull request #2110: Fix links to NativeCall

[13:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2110

[13:33] *** Schepeers left
[13:36] *** Hor|zon_ is now known as Hor|zon

[13:39] *** zakharyas left
[13:40] *** zakharyas joined
[13:42] *** gabiruh left
[13:43] *** gabiruh joined
[13:52] *** skids joined
[13:54] *** sno left
[13:56] *** sno joined
[14:09] *** wamba joined
[14:18] *** sno left
[14:21] *** sno joined
[14:25] *** Luneburg joined
[14:25] <Luneburg> I'm still having trouble with project euler problem 11

[14:26] <raschipi> Luneburg: link?

[14:27] <raschipi> This one: https://projecteuler.net/problem=11 ?

[14:28] <Luneburg> raschipi: Yup, that's the one :p

[14:28] <raschipi> What problem do you have?

[14:28] <Luneburg> raschipi: I get the wrong solution for it, but my approach seems correct

[14:29] <timotimo> did you output what position and direction it takes the result from?

[14:29] <timotimo> that should allow you to debug easier

[14:31] <Luneburg> timotimo: No, but I could do something where the programs records the four values it multiplied to make the product. Would that help?

[14:34] <raschipi> Luneburg: That's what he suggested.

[14:34] *** domidumont1 joined
[14:37] *** domidumont left
[14:38] <timotimo> that won't make it very easy to find where that was, though. but it'd be a start

[14:39] <raschipi> I see, it should record the positions, not just the values. But having the values you'll have to look up on the table where they came from.

[14:40] <timotimo> yeah

[14:40] <timotimo> that can be difficult to spot in that big grid

[14:44] *** lucasb joined
[14:44] *** webstrand left
[14:45] *** webstrand joined
[14:47] *** webstrand left
[14:53] <lucasb> I solved it this way: make a big list of all rows, cols and diagonals. Grep those with more than 4 elems. Map each list to lists of consecutive 4-elems and reduce this list with "*" to get the product, then get the max from the final list :)

[14:53] *** Zoffix joined
[14:54] <lucasb> no need to keep track of the original position (unless you want to debug)

[15:01] <Geth> ¦ doc: 7725e2ee55 | dmaestro++ (committed using GitHub Web editor) | doc/Language/nativetypes.pod6

[15:01] <Geth> ¦ doc: Fix links to NativeCall

[15:01] <Geth> ¦ doc: 

[15:01] <Geth> ¦ doc: There is currently no /type/NativeCall page, everything seems to be in /language/nativecall

[15:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7725e2ee55

[15:01] <synopsebot_> Link: https://doc.perl6.org/language/nativetypes

[15:01] <Geth> ¦ doc: cffe50e3db | dmaestro++ (committed using GitHub Web editor) | doc/Language/nativetypes.pod6

[15:01] <Geth> ¦ doc: Merge pull request #2110 from dmaestro/dmaestro-fix-nativecall-links

[15:01] <Geth> ¦ doc: 

[15:01] <Geth> ¦ doc: Fix links to NativeCall

[15:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/cffe50e3db

[15:05] *** zakharyas left
[15:06] *** zakharyas joined
[15:08] *** zakharyas left
[15:08] *** gregf_ left
[15:09] *** xtreak joined
[15:10] *** zakharyas joined
[15:11] *** zakharyas left
[15:12] *** zakharyas joined
[15:12] *** benjikun joined
[15:12] *** zakharyas left
[15:13] *** zakharyas joined
[15:13] *** webstrand joined
[15:13] *** zakharyas left
[15:14] *** kurahaupo joined
[15:14] *** sno left
[15:16] <Zoffix> Luneburg: what's the right answer?

[15:17] *** robertle left
[15:17] <Zoffix> I got 70600674 with diagonally right-up, at x 12 and y 6

[15:17] *** domidumont1 left
[15:18] <Luneburg> Zoffix: That's the right answer

[15:18] <Zoffix> \o/

[15:18] <Luneburg> Zoffix: ;)

[15:18] <Luneburg> I also realized where I went wrong

[15:19] <Zoffix> Here's my version: https://gist.github.com/zoffixznet/b9b7a2e1cfc811cc5d89a3ac71e6be14

[15:19] <Luneburg> I was checking to the side, down, and right-diagonal, but not left-diagonal

[15:19] *** wamba left
[15:19] <Luneburg> Zoffix: Interesting way of doing it, by the way

[15:26] <Luneburg> Zoffix: Can you explain how your solution works, please? 

[15:30] *** sno joined
[15:30] <Zoffix> Luneburg: the .sums-at method takes an X and Y location on the grid and makes a Map where keys are locations and values are the products (just now noticed the method is mis-named). The locations are `gather`/`take`n conditionally, where the condition checks if this direction is possible. For example, you can't have a `left` direction if `x` is less than 3, because then there ain't 4 available numbers in that

[15:31] <Zoffix> direction. The rest of the conditionals work the same way: checking whether that particular direction has 4 numbers available for this particular X and Y. Then `largest-sum` (which should be `largest-product`) loops through all available cells asking for a list of products for each direction and the inner-most loop in that method loops through all directions, marking the cell/direction as having the largest

[15:31] <Zoffix> product, if its product is larger than the largest seen so far

[15:31] <Zoffix> @!cells is a 2-dimentional shaped array with first dimention being X and second dimention being Y

[15:33] <Zoffix> `[*] map {@!cells[.head; .tail]}, ((x…x-3) Z (y…y-3)))` <-- in this construct, I'm using meta reduce product `[*]` that's like putting `*` between each element in the list and the list is produced from mapping a list of locations into values in @!cells and list of locations is made by zippin (`Z`, which is same as `Z,`), the list of X locations with list of Y locations, so that result is a list of lists

[15:33] <Zoffix> with each inner list being a 2-element list with X and Y location, which I get with .head (x) and .tail (y) methods inside the map's Callable.

[15:33] <Zoffix> I think that covers everything. Is there anything else I should explain?

[15:34] <Luneburg> Zoffix: I might need a moment to digest that :)

[15:36] *** Schepeers joined
[15:40] <geekosaur> sometimes the mailing list and cargo-cult shell "knowledge" hurts my brain. "piping to a file"?

[15:43] *** zakharyas joined
[15:43] <El_Che> cargo cult is fun and they have cookies

[15:44] <El_Che> (at least if you give consent)

[15:45] <Luneburg> El_Che: ( ͡° ͜ʖ ͡°)

[15:54] *** robertle joined
[15:55] *** perlpilot joined
[16:00] *** gabiruh left
[16:01] *** zakharyas left
[16:03] *** molaf joined
[16:04] *** domidumont joined
[16:08] *** [Sno] joined
[16:10] *** sno left
[16:12] *** Luneburg left
[16:14] *** Zoffix left
[16:17] <stmuk> https://www.youtube.com/user/yapcna/videos

[16:17] <stmuk> perl 6 content already up!

[16:18] *** [Sno] left
[16:18] *** zakharyas joined
[16:18] *** hami joined
[16:29] *** scimon left
[16:30] *** xtreak left
[16:31] *** dakkar left
[16:33] *** hami left
[16:35] *** [particle]1 joined
[16:36] *** jmerelo_ joined
[16:37] *** [particle] left
[16:48] *** jmerelo_ left
[16:50] *** gabiruh joined
[16:56] *** jmerelo joined
[17:01] *** zakharyas left
[17:01] *** zakharyas joined
[17:04] <tony-o_> almost have libexpat parsing xml with nativecall

[17:04] <tony-o_> oops, meant for pm

[17:06] *** domidumont left
[17:10] *** zakharyas left
[17:11] *** zakharyas joined
[17:13] *** zakharyas left
[17:16] <jkramer> Any suggestions for golfing this further? :) https://www.reddit.com/r/dailyprogrammer/comments/8sjcl0/20180620_challenge_364_intermediate_the_ducci/e0zx8qp/

[17:18] *** zakharyas joined
[17:21] <jkramer> I'm not entirely sure if the none(@all) can be used like that by itself or if I should add ? to make it a bool or even none(@all) == 0

[17:21] <jkramer> Err, @tup not @all

[17:21] <timotimo> the or will booleanify it

[17:21] <jkramer> The solution works though :)

[17:22] <jkramer> Yeah that was my guess

[17:22] <jkramer> But I thought there was a tiny chance it would turn into none(@tup[0] or ..., @tip[1] or ... and so on :)

[17:23] <timotimo> that anonymous hash state variable is neat

[17:23] <jkramer> Yup, I'm actually quite satisfied that I found a place to use it :)

[17:24] <jkramer> Read about it in the docs recently and couldn't think of a good use, but turns out it's perfect for places where you'd use a %seen hash usually

[17:27] *** jmerelo left
[17:31] <tony-o_> m: https://gist.github.com/tony-o/f074064e9f0564ebc27d8e3414e807fc

[17:31] <camelia> rakudo-moar a167e6cca: ( no output )

[17:31] <tony-o_> oops, jkramer ^

[17:32] *** lucasb left
[17:32] <tony-o_> doesn't have fancy gather/take but seems to work

[17:33] *** domidumont joined
[17:33] <raschipi> tony-o_: How are you testing for repeating sequences?

[17:34] <tony-o_> it doesn't, i just condensed what jkramer had

[17:34] <tony-o_> (without the (%){~@tup}++ bit because i missed that)

[17:36] <jkramer> It's also not printing the initial tuple

[17:36] <tony-o_> distracted trying to track down a problem between nativecall and moarvm parsing utf8

[17:36] <jkramer> :)

[17:37] <raschipi> It's a good golf, though.

[17:37] <jkramer> True :)

[17:37] <tony-o_> this is much harder now that rakudo cleans up after itself :-p

[17:37] <jkramer> I like the challenges in that sub, yesterday's was similarly fun for golfing

[17:38] <jkramer> https://www.reddit.com/r/dailyprogrammer/comments/8s0cy1/20180618_challenge_364_easy_create_a_dice_roller/

[17:38] *** espadrine joined
[17:39] <jkramer> Managed to bring that down to one line: https://www.reddit.com/r/dailyprogrammer/comments/8s0cy1/20180618_challenge_364_easy_create_a_dice_roller/e0vji2c/

[17:40] <tony-o_> you seem to be one of the few that worries about code size

[17:40] <jkramer> I just love P6 for being so golfable while still remaining very readable (IMO) <3

[17:40] <tony-o_> one guy wrote JS classes

[17:41] <raschipi> I like the C ones where they have to implement their own hashes.

[17:41] <jkramer> Ha, yeah. I think some people there just do the opposite and try to make it as complicated as possible, just for fun. Like the guy who wrote a yacc parser for that challenge. There's also one guy who does the challenges on some texas instruments calculator

[17:42] *** sena_kun left
[17:45] <jkramer> Calling it a day, say y'all tomorrow o/

[18:00] *** comborico1611 joined
[18:01] *** zakharyas left
[18:02] *** Xliff left
[18:07] *** webstrand left
[18:09] *** webstrand joined
[18:10] <[Coke]> So, if I fire off 300 Proc::Async jobs, how likely is it that I'm going to make the scheduler unhappy? Should I try to throttle the jobs instead of starting them ASAP?

[18:11] <lizmat> [Coke]: start them asap: you will never start more than the maximum number of thhreads

[18:11] <lizmat> (aka 32 by default I recall)

[18:11] <lizmat> all of the other jobs will be queued until there's a thread ready to handle them

[18:12] <tony-o_> m: $*SCHEDULER.max_threads.say;

[18:12] <camelia> rakudo-moar a167e6cca: OUTPUT: «64␤»

[18:13] *** benjikun2 joined
[18:14] <timotimo> it also depends on how much is coming in and how expensive your processing is

[18:15] <timotimo> if you're not handling stdout and stderr at all, you can easily handle 100_000 Proc::Async on just one thread

[18:15] <tony-o_> lizmat: it used to happen that if you filled all of the threads on the scheduler with work that it'd hang MAIN and stop processing - does that no longer happen?

[18:15] <timotimo> (your OS might not be as happy, though)

[18:16] <timotimo> MAIN should never hang because of what the Thread Pool Scheduler does

[18:16] <lizmat> tony-o_: that got fixed by the work jnthn did on types of jobs

[18:16] <timotimo> only when you're "await"ing something in MAIN that isn't being processed should that be possible

[18:17] <lizmat> tony-o_: now that we have a scheduler thread running, I don't think you can kill it tyhat way anymore

[18:17] <lizmat> *that

[18:17] <timotimo> by kill you mean hang?

[18:17] *** benjikun left
[18:17] <lizmat> yes, sorry

[18:17] <tony-o_> my man!

[18:17] <lizmat> *make it hang

[18:17] <timotimo> just making sure

[18:18] <El_Che> d ruth had to leave I see in twitter? :(

[18:18] <timotimo> you may want to also "use v6.d.PREVIEW" so that using "await" may throw your task back into the queue so that perhaps another thread may pick it up

[18:18] <lizmat> El_Che: yeah, having a 10x as large conference going on at the same time in SLC, makes it extra difficult to get a proper room for her

[18:18] <timotimo> i.e. you can't rely on being on the same thread after await as before, but you don't have to care often. mostly just with nativecall situations, but then you can build your own $*AWAITER to not switch threads any more

[18:18] <tony-o_> trying to track down a flapping `Malformed UTF-8 at line %u col %u` for libexpat 

[18:19] <lizmat> and when then you find out the hotel lied about accessibility of the room, you simply cannot stay anywhere else :-(

[18:19] <tony-o_> that's pretty rad

[18:19] <tony-o_> that comment was meant for timotimo, not for inaccessible rooms

[18:20] <timotimo> what the heck was the hotel thinking? :\

[18:20] <El_Che> lizmat: wow. Sad

[18:21] <[Coke]> Wonder if there's any way we can get that sorted out ahead of time: have the conference organizers have a temp old on an accessible room on site.

[18:24] *** sauvin left
[18:26] <tony-o_> is that at yapc?

[18:26] <[Coke]> tpc, aye

[18:27] <AlexDaniel> WHY PAGINATE EVERY 30 ROWS DAMMIT

[18:27] <AlexDaniel> github, why… https://github.com/rakudo/rakudo/labels

[18:27] <AlexDaniel> I was ctrl+f-ing for something in frustration only to realize it's on page 2

[18:28] <AlexDaniel> would have never expected that something simple like a list of labels would even need pagination

[18:28] <Geth> ¦ doc/coke/manifesto: 32b51f7a78 | (Will "Coke" Coleda)++ | xt/duplicates.t

[18:28] <Geth> ¦ doc/coke/manifesto: Go all in on Promises.

[18:28] <Geth> ¦ doc/coke/manifesto: 

[18:28] <Geth> ¦ doc/coke/manifesto: "Don't worry about it" - let the scheduler handle overscheduling.

[18:28] <Geth> ¦ doc/coke/manifesto: 

[18:28] <Geth> ¦ doc/coke/manifesto: Also thread the non-proc version.

[18:28] <Geth> ¦ doc/coke/manifesto: review: https://github.com/perl6/doc/commit/32b51f7a78

[18:30] <tony-o_> i can ask some ziprecruiter people if they can swap rooms, what specifically should i ask?

[18:31] <[Coke]> I think it might be too late for her at this point.

[18:33] *** jrra left
[18:34] <lizmat> tony-o_: Ruth has already returned home :-(

[18:34] *** jrra joined
[18:35] <El_Che> yesterday's tweet: https://twitter.com/GeekRuthie/status/1008859107510513664

[18:35] <El_Che> she says she's heading home

[18:36] <tony-o_> boogie.

[18:40] <El_Che> [Coke]: your talk is online!

[18:44] <raschipi> gimme link

[18:44] <El_Che> https://www.youtube.com/watch?v=moaGidO3eA4&t=0s&list=PLA9_Hq3zhoFx1inHPmwmbXrPcI8cc0fyO&index=23

[18:44] <El_Che> I see lizmat's back :)

[18:46] <raschipi> El_Che++ [Coke]++

[18:47] <El_Che> [Coke]: [Coke] I know where you work now :)

[18:47] <El_Che> (I hate managed laptops)

[18:47] <tony-o_> excellent product placement 

[18:48] *** zachk joined
[18:48] *** zachk left
[18:48] *** zachk joined
[19:03] *** raynold joined
[19:04] <El_Che> lizmat: are you giving a talk about your p5 project?

[19:07] <raschipi> [Coke]: MAIN doesn't run first, it runs last :-p

[19:08] <raschipi> m: say 'a'; sub MAIN {say 'b'}

[19:08] <camelia> rakudo-moar a167e6cca: OUTPUT: «a␤b␤»

[19:08] <raschipi> m: say 'a'; sub MAIN {say 'b'}; say 'c';

[19:08] <camelia> rakudo-moar a167e6cca: OUTPUT: «a␤c␤b␤»

[19:10] *** domidumont left
[19:14] *** lizmat left
[19:23] *** wamba joined
[19:23] *** lizmat joined
[19:24] <lizmat> El_Che: in about an hour: the state of the CPAN Butterfly Plan

[19:24] <El_Che> looking forward to it (with some delay :) )

[19:25] *** darutoko left
[19:33] <lizmat> there is a live feed I believe

[19:34] <lizmat> 	https://www.youtube.com/channel/UC7y4qaRSb5w2O8cCHOsKZDw

[19:35] *** benjikun2 is now known as benjikun

[19:36] *** Zoffix joined
[19:38] <El_Che> doesn't look like a life feed

[19:39] <[Coke]> raschipi: fair. Thanks!

[19:42] <lizmat> El_Che: I guess you're right, but it looks like it already has this morning's presentations

[19:42] <lizmat> so you won't have to wait long

[19:42] <tony-o_> anyone have some clues to where to start looking for the Str <-> utf8 marshalling happens in nativecall/moarvm?  i have a test that fails randomly, i know what's happening in moarvm but can't seem to find where that transition happens in NC..

[19:43] <[Coke]> jnthn++

[19:43] <Zoffix> How can I tell whether a routine has been inlined or not?

[19:43] <timotimo> Zoffix: either in the profiler or in the spesh log

[19:43] <timotimo> which shall i explain first? ;)

[19:43] <Zoffix> timotimo: where in the profiler?

[19:43] <timotimo> you need to explore to the spot you're interested in in the call graph

[19:44] <Zoffix> It just shows me NaN

[19:44] <timotimo> d'oh, yes, it does that sometimes

[19:44] <timotimo> then maybe we'll try the spesh log

[19:45] <timotimo> you'll be looking for a line "Inlining graph" followed by "Spesh of 'your-routine-name' .*"

[19:45] <timotimo> then scroll up to "Before:" to see what it's being inlined into

[19:47] <Zoffix> timotimo: will it be "Spesh of 'your-routine-name' .*" right *after* line with Inlining graph? Or is Inlining graph more like a header for a bunch of stuff?

[19:48] <Zoffix> There's only one occurence of Inlining graph and there ain't my routine under it

[19:48] <timotimo> it'll print Inlining graph for each one

[19:48] <timotimo> oh, only a single one in the whole log? ok, maybe it's a microbenchmark?

[19:49] <timotimo> the basic structure of that particular part is "Before:" with a full dump of the before bytecode, then for everything that gets inlined a "Inlining graph" with another dump, and an "After:" with a full dump of the result 

[19:49] <[Coke]> p5 has detection of version control conflict markers, we should steal that. :)

[19:49] <timotimo> m: <<<<<<<<<<<

[19:49] <camelia> rakudo-moar a167e6cca: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in shell-quote words; couldn't find final '>>' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3<<<<<<<<<<<7⏏5<EOL>␤    expecting any of:␤        shell-…»

[19:49] <timotimo> heh.

[19:49] <Zoffix> this is the speshlog https://temp.perl6.party/foo.txt and this is the profile https://temp.perl6.party/foo.html  trying to see if DYNAMIC is being inlined

[19:50] <Zoffix> and the code is perl6 -e 'class Foo { method a() { self.d }; method b() { self.c }; method c() { self.d }; method d() { my int $x; my $z; my $y := $*Y; while $x++ < 3_000_00 { $z := $*Y + $*Y } } }; { my $*Y = 42; Foo.new.a }'

[19:51] <timotimo> i see that it's logging DYNAMIC successfully a couple of times, so it should be at least trying, but perhaps DYNAMIC is too big to be inlined

[19:51] <Zoffix> it's this big: https://github.com/rakudo/rakudo/blob/a167e6cca926389caaf7348f8faa9a436d10cfe4/src/core/stubs.pm6#L33-L58

[19:52] <timotimo> the size in bytecode is the interesting part, and i see it's 704 bytes big

[19:52] <Zoffix> And what started this hunt is noticing that caching dynamic lookup in nqp gives a 25% win, while in rakudo it gives a 4x win: https://github.com/rakudo/rakudo/commit/1dea303424fa25d2ed0df338281deeb3ebea6181#commitcomment-29438749

[19:52] <Zoffix> And in QAST I see DYNAMIC is a callstatic call, so I was wondering if it's being inlined by spesh

[19:52] <timotimo> the max inline size is 384 bytes

[19:54] <timotimo> so spesh would leave this one alone

[19:54] <Zoffix> timotimo: how did you find the size?

[19:54] <timotimo> after the "Facts" section

[19:54] <Zoffix> timotimo: are you using anything special to view that file? Some viewer or something?

[19:55] <timotimo> no, just vim and less

[19:55] <timotimo> i wanted to build a viewer a few times

[19:55] <timotimo> the files tend to be multiple tens of megabytes, though, so maybe not yet in perl6.

[19:55] *** rindolf left
[19:57] <Zoffix> wonder if shoving this branch into a separate sub would help anything: https://github.com/rakudo/rakudo/blob/a167e6cca926389caaf7348f8faa9a436d10cfe4/src/core/stubs.pm6#L36-L58

[19:57] *** rindolf joined
[19:57] <timotimo> buh, i need to set up that thing that lets me have private shortlinks for urls from irc ...

[19:58] <timotimo> hm, we generate calls to DYNAMIC already when we see $*FOO, right?

[19:58] <Zoffix> |84h try to opt DYNAMIC http://colabti.org/irclogger/irclogger_log/perl6?date=2018-06-20#l614

[19:58] <ZofBot> Zoffix, Will remind you on 2018-06-24T03:58:50.538536-04:00 about try to opt DYNAMIC http://colabti.org/irclogger/irclogger_log/perl6?date=2018-06-20#l614

[19:58] <timotimo> are you proposing to generate an ifnull(getlexdyn(name), DYNAMIC(name)) instead?

[19:59] *** dha joined
[19:59] <timotimo> that sounds like a good idea to me

[19:59] <Zoffix> timotimo: yeah $*FOO gens as Op (callstatic &DYNAMIC)

[19:59] *** ufobat_ left
[19:59] <Zoffix> timotimo: oh, that's even better

[19:59] <timotimo> i wonder how often relatively that would trigger

[19:59] <Zoffix> gonna try that next time I got a few minutes of time

[20:00] * Zoffix &

[20:00] *** Zoffix left
[20:01] <[Coke]> do we have a file lock?

[20:01] <timotimo> i believe we do

[20:02] <[Coke]> (want to be able to safely do a thing to a file in multiple running scripts)

[20:02] <timotimo> IO::Handle seems to have a lock method

[20:06] <timotimo> Util: can you explain the nazi ghost tank slide to me?

[20:07] *** stee joined
[20:24] *** wamba left
[20:25] *** wamba joined
[20:33] <[Coke]> liz just shared a slide showing she's the #2 committer to rakudo.... I'm number 10? That's not possible, is it?

[20:34] <tony-o_> commit count wise it certainly appears that way

[20:35] <[Coke]> O_o;

[20:35] <[Coke]> Must be from my time as RM.

[20:35] <moritz> ... and from old parrot times, imported into the rakudo repo

[20:35] <[Coke]> AlexDaniel++ and Zoffix++ for making that not my problem! :)

[20:35] *** sno joined
[20:36] <tony-o_> moritz is last if you go by the line ++s less the --s 

[20:36] <[Coke]> moritz++ ahh

[20:36] <moritz> wat, I have around 3.2k commits in that repo...

[20:36] <AlexDaniel> [Coke]: is there a video of these slides btw?

[20:36] <AlexDaniel> I mean, of that talk

[20:36] <tony-o_> he's at -13k (which really only speaks to him making others' code more efficient)

[20:37] <moritz> well, I deleted the parrot backend code :-)

[20:37] <tony-o_> moritz: just going by your contrib (++ 32k -- 46k)

[20:37] <tony-o_> ah, ugexe niner and i were all laughing at zef's commit base at PTS

[20:37] *** robertle left
[20:38] <timotimo> why was that?

[20:39] <tony-o_> when we started zef i contributed some 6k lines to the original path and ugexe slowly perl-ized my code so he built up a deficit of thousands of lines 

[20:39] <timotimo> :D

[20:40] <timotimo> AlexDaniel: is the whole recording just coke rather than the slides? :(

[20:40] <tony-o_> nativecall: 1, me: 0 for today

[20:40] <nativecallable6> tony-o_, https://gist.github.com/f6eb1c97e33fc8422e81c6c469358554

[20:40] <timotimo> :D

[20:41] <tony-o_> insult on top of injury nativecallable6 

[20:41] <timotimo> ok, phew, they zoom out at some point

[20:41] <raschipi> timotimo: Coke isn't that ugly.

[20:42] <timotimo> yes, you are absolutely right

[20:42] <timotimo> i'd even say coke is good-looking

[20:42] <AlexDaniel> that's true

[20:43] <timotimo> it would just have been a waste of perfectly good slides to not show them at all

[20:52] *** comborico1611 left
[21:00] *** lizmat left
[21:01] <[Coke]> I skimmed the talk. there were a LOT of close ups!

[21:01] <[Coke]> I have a google doc of the slides. need to PDF it and cram it somewhere.

[21:04] *** dha left
[21:04] *** skids left
[21:11] *** subroot joined
[21:11] *** subr joined
[21:12] *** subr left
[21:14] *** dha joined
[21:15] *** wamba left
[21:15] *** wamba joined
[21:16] *** raschipi left
[21:29] *** lizmat joined
[21:29] *** [particle]1 left
[21:29] *** [particle] joined
[21:32] *** [particle] left
[21:32] *** [particle]1 joined
[21:32] *** dha left
[21:33] *** benjikun2 joined
[21:35] *** benjikun left
[21:43] *** dha joined
[21:43] <El_Che> [Coke], lizmat: so, hopefully no civil war was started today ;)

[21:43] <lizmat> no  :-)

[21:44] <El_Che> \o/

[21:44] <[Coke]> she was very diplomatic!

[21:57] <perlpilot> [Coke], Watching your promises talk right now.  The last 10 minutes of could have used some microphones in the audience.  :)

[22:00] *** rindolf left
[22:02] <El_Che> [Coke]: your computer admins sucks. Glad you could continue with the talk

[22:02] <[Coke]> sorry. :|

[22:02] <[Coke]> El_Che: didn't help that there was a puddle on the podium when I started.

[22:02] <[Coke]> guessing that was part of it.

[22:03] <El_Che> oh

[22:03] <[Coke]> perlpilot; I'll try to go through and add a comment there describing the questions.

[22:03] <[Coke]> m: fail "very interesting"

[22:03] <camelia> rakudo-moar a167e6cca: OUTPUT: «very interesting␤  in block <unit> at <tmp> line 1␤␤»

[22:07] *** HaraldJoerg left
[22:09] *** MasterDuke joined
[22:15] *** gabiruh left
[22:16] *** espadrine left
[22:22] *** Kaiepi joined
[22:24] *** skids joined
[22:26] *** MasterDuke left
[22:27] *** xtreak joined
[22:34] <Kaiepi> m: grammar Foo { token TOP { <bar> }; proto token bar {*}; token bar:baz<qux> { <baz> } }; say Foo.parse('qux')

[22:34] <camelia> rakudo-moar a167e6cca: OUTPUT: «No such method 'baz' for invocant of type 'Foo'. Did you mean 'bar'?␤  in regex bar:baz<qux> at <tmp> line 1␤  in regex bar at <tmp> line 1␤  in regex TOP at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[22:35] <Kaiepi> are there any other tags besides :sym you can use with tokens?

[22:39] *** xtreak left
[22:46] *** Zoffix joined
[22:46] <Zoffix> Kaiepi: it's not just tokents, it's all the symbols and other than a few reserved names, you can go nuts with what names you make

[22:47] <Zoffix> m: my $var:super<awesome>:and<totally amazing> = 42; say $var:super<awesome>:and<totally amazing>

[22:47] <camelia> rakudo-moar a167e6cca: OUTPUT: «42␤»

[22:48] <Zoffix> m: grammar Foo { token TOP { <bar> }; proto token bar {*}; token bar:baz<qux> { 'qux' } }; say Foo.parse('qux')

[22:48] <camelia> rakudo-moar a167e6cca: OUTPUT: «｢qux｣␤ bar => ｢qux｣␤»

[22:48] <Zoffix> Ah, yeah, for special token `<sym>` you mean. Yeah, only sym works there

[22:52] *** perlpilot left
[22:56] *** gabiruh joined
[22:57] <Kaiepi> ah

[22:57] <Kaiepi> what reserved names are there?

[22:58] <Zoffix> Trying the DYNAMIC opt right now. This alone makes it 17% faster for normal lookup and 13% faster for in-promise lookup: https://gist.github.com/zoffixznet/bbc4158b7ef905f743efe33d95fcbfce

[22:58] <Zoffix> And I got the one that gens the getlexdyn portion directly without a sub and preliminary measurement showed that to be 45% faster

[22:59] <Zoffix> it's kinda spaghettified tho, especially since a few things in grammar/actions expect special structure of the &DYNAMIC call to get to the name...

[23:00] <Zoffix> Kaiepi: the empty name and the "sym"

[23:01] <Zoffix> "<TimToady> and the whole mechanism is not something we want to encourage abuse of, until we know what other keys we might want to reserve in the future"

[23:01] <Zoffix> http://colabti.org/irclogger/irclogger_log/perl6?date=2017-01-25#l1076

[23:04] *** gabiruh left
[23:04] *** wamba left
[23:07] *** MasterDuke joined
[23:08] <MasterDuke> Zoffix: notice any speed difference building rakudo?

[23:09] <[Coke]> what is the difference between IO.modified and IO.changed? 

[23:10] <Zoffix> didn't look at the numbers. Also my in-promise measurement is wrong. I accidentally had the var inside the promise. The real difference is it made 25% **slower**

[23:10] <MasterDuke> whoops

[23:10] <Zoffix> Which at least now makes sense :)

[23:10] <Zoffix> But I have the second method and there the promise one should stay the same spee

[23:13] <Kaiepi> m: enum TelnetCommand ( 'IAC' => 0xFF.chr ); say IAC ~~ my token { <-[ <{IAC}> ]> }

[23:13] <camelia> rakudo-moar a167e6cca: OUTPUT: «｢ÿ｣␤»

[23:14] <Kaiepi> how do i write this so it doesn't match IAC?

[23:15] <MasterDuke> El_Che: anything more to do for https://github.com/nxadm/rakudo-pkg/pull/40 ?

[23:15] <jnthn> <!before "{IAC}">

[23:16] <Kaiepi> i want it to match the character as long as it isn't IAC though 

[23:16] <jnthn> Stick a . after it

[23:17] <Kaiepi> m: constant IAC = 0xFF.chr; say IAC ~~ my token { <!<{IAC}>> . }

[23:17] <camelia> rakudo-moar a167e6cca: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter < (must be quoted to match literally)␤at <tmp>:1␤------> 3IAC = 0xFF.chr; say IAC ~~ my token { <!7⏏5<{IAC}>> . }␤Unrecognized regex metacharacter ! (must be quoted to match literally)…»

[23:17] <Kaiepi> m: constant IAC = 0xFF.chr; say IAC ~~ my token { <!{IAC}> . }

[23:17] <camelia> rakudo-moar a167e6cca: OUTPUT: «Nil␤»

[23:17] <Geth> ¦ doc: 587aa2ad0a | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/IO/Path.pod6

[23:17] <Geth> ¦ doc: Clarify difference between changed and modified

[23:17] <Geth> ¦ doc: 

[23:17] <Geth> ¦ doc: Refs:

[23:17] <Geth> ¦ doc: [1] https://unix.stackexchange.com/a/2465

[23:17] <synopsebot_> Link: https://doc.perl6.org/type/IO::Path

[23:17] <Geth> ¦ doc: [2] https://arstechnica.com/civis/viewtopic.php?t=583045

[23:17] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/587aa2ad0a

[23:17] <Kaiepi> m: constant IAC = 0xFF.chr; say "\xFE" ~~ my token { <!{IAC}> . }

[23:17] <camelia> rakudo-moar a167e6cca: OUTPUT: «Nil␤»

[23:18] <Kaiepi> m: constant IAC = 0xFF.chr; say "\xFE" ~~ my token { <!before {IAC}> . }

[23:18] <camelia> rakudo-moar a167e6cca: OUTPUT: «Nil␤»

[23:18] <Kaiepi> m: constant IAC = 0xFF.chr; say "\xFE" ~~ my token { . <!before {IAC}> }

[23:18] <camelia> rakudo-moar a167e6cca: OUTPUT: «Nil␤»

[23:18] <Zoffix> [Coke]: .modified is "st_mtime" and .changed is "st_ctime" in this paragraph: "The field st_mtime is changed by file modifications, e.g. by mknod(2), truncate(2), utime(2) and write(2) (of more than zero bytes). Moreover, st_mtime of a directory is changed by the creation or deletion of files in that directory. The st_mtime field is not changed for changes in owner, group, hard link count, or mode."  "The

[23:18] <Zoffix> field st_ctime is changed by writing or by setting inode information (i.e., owner, group, link count, mode, etc.)."

[23:18] <jnthn> Missing quotes

[23:18] <Kaiepi> oh

[23:19] <jnthn> Otherwise it's just a code block that is evaluated for...well, no reason really. We maybe should have a sink context warning on that

[23:21] * Zoffix adds that as item to R#1571

[23:21] <synopsebot_> R#1571 [open]: https://github.com/rakudo/rakudo/issues/1571 Flaws in implied sinkage / `&unwanted` helper

[23:23] *** subroot left
[23:31] *** gabiruh joined
[23:31] <Kaiepi> m: constant IAC = 0xFF.chr; say "{IAC}{IAC}abc" ~~ my token { [ <{IAC}> <?{IAC}> | <!before <{IAC}>> . ]+ }

[23:31] <camelia> rakudo-moar a167e6cca: OUTPUT: «｢ÿÿabc｣␤»

[23:31] <Kaiepi> how do i make it so the match is "\xFFabc" instead of "\xFF\xFFabc"?

[23:34] <Kaiepi> never mind worked it out

[23:34] <Kaiepi> m: constant IAC = 0xFF.chr; say "{IAC}{IAC}abc" ~~ my token { <( [ <( <{IAC}> )> <?{IAC}> | <!before <{IAC}>> <( . )> ]+ )> }

[23:34] <camelia> rakudo-moar a167e6cca: OUTPUT: «｢c｣␤»

[23:34] <Kaiepi> m: constant IAC = 0xFF.chr; say "{IAC}{IAC}abc" ~~ my token { <( [ <( <{IAC}> )> <?{IAC}> | <!before <{IAC}>> . ]+ )> }

[23:34] <camelia> rakudo-moar a167e6cca: OUTPUT: «｢ÿabc｣␤»

[23:35] <Zoffix> m: constant IAC = 0xFF.chr; say "{IAC}{IAC}abc" ~~ my token { [ <{IAC}> <?{IAC}> | <!before <{IAC}>> . <!after <{IAC}>> ]+ }

[23:35] <camelia> rakudo-moar a167e6cca: OUTPUT: «｢ÿÿabc｣␤»

[23:35] <Zoffix> nm

[23:46] <Zoffix> oh snap... it's not 45%, it's 5.1x faster and in-promise one is coming out 2%-9% faster, but it should be the same as before, really, based on the understanding of the code

[23:46] <Zoffix> ZofBot: ready my medal!

[23:46] <Zoffix> m: say $*x; my $*x = 42;

[23:46] <camelia> rakudo-moar a167e6cca: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Illegal post-declaration of dynamic variable '$*x';␤earlier access must be written as CALLERS::<$*x>␤if that's what you meant␤at <tmp>:1␤------> 3say $*x; my $*x7⏏5 = 42;␤    expecting a…»

[23:46] <Zoffix> This doesn't error out any more tho. Just need to fix it up :)

[23:50] <timotimo> does this make every usage of say a noticable bit faster?

[23:51] <Zoffix> maybe

[23:51] <timotimo> i'd like that, that'd be a good improvement that most people would probably feel

[23:51] <Zoffix> just thinking it might get drowned out by the stuff `say` has to do

[23:52] *** lizmat left
[23:52] *** raschipi joined
[23:55] <timotimo> time perl6 -e '(print ".") xx 1_000_000' > /dev/null   → 0:03.18elapsed

[23:55] <timotimo> time perl6 -e 'my $o = $*OUT; ($o.print(".")) xx 1_000_000' > /dev/null   → 0:01.45elapsed

[23:56] <Zoffix> it's... slower :(

[23:56] *** TimToady joined
[23:56] <timotimo> your change made it slower?

[23:56] <Zoffix> yeah

[23:56] *** dha left
[23:56] <timotimo> hmm.

[23:56] <timotimo> it's possible that making the code for $*foo bigger makes something very important too big to be inlined

[23:57] <Zoffix> 0m3.419s before vs. 0m3.930s now

[23:57] <Zoffix> Is there a better version of nqp::getlexreldyn(nqp::ctx, '$*MEOWS') ? 'cause that's what I had to do because nqp::getlexdyn starts with caller's context

[23:58] <timotimo> doesn't look like there's another way

[23:58] <Zoffix> What affects the size of bytecode; do variable names count?

[23:59] <timotimo> no

[23:59] <timotimo> hm, it could very well be that nqp::ctx forces the frames to go from the stack to the heap, that's less efficient.

