[00:01] <sena_kun> tbrowder, ping?

[00:01] <tbrowder> yo?

[00:02] <sena_kun> I am not sure if I can help you, but are you on `Perl 6 Advent Calender` tab in `My Sites` tab on wordpress, right?

[00:02] <tbrowder> ya caught me finger-fumbling again!

[00:02] <tbrowder> yes, i‚Äôm on that site

[00:03] <sena_kun> Then you can select `Blog Posts` and there is a switch, `Me | Everyone`, if you choose second one, it will show posts of others.

[00:03] <sena_kun> And you can edit those, I think.

[00:04] <sena_kun> I don't know if editor rights are needed or anything, because I can see those pages too, not sure if I have any rights given.

[00:05] <sena_kun> but, disregarding that, the thing I would really like to see is to know how can one set a posting time exactly at first minute of midnight. Day 13 has `01:01` set for me, Day 3 - `02:01`.

[00:06] <tbrowder> ok, i‚Äôve seen that, and used it for a list. at the moment i don‚Äôt want to edit any post, i want to ensure the scheduling sysem works and shows the correct date/time format. as an example, jjmerelo‚Äôs day 2 post is showing as day 1, and the scheduler format may have contributed to that

[00:06] <sena_kun> oooh

[00:06] *** leont left
[00:07] <sena_kun> well, I think you can edit scheduled time too, but, unfortunately, I don't have a clue on how scheduling works in wordpress. :(

[00:07] <tbrowder> you should be able to modify the schedule and do an update, but i think you have to click the update button twice

[00:08] <sena_kun> oh, by the way, for me it is already Day 2 for 2 hours.

[00:08] <sena_kun> and I see `Day 2` post

[00:10] <tbrowder> i‚Äôm working on improving the instructions but life is intervening. i hope we can get authors to fix formattng after the fact if necessary and update. the preview in wp is not 100% in my experience.

[00:10] <tbrowder> erg!

[00:11] <tbrowder> make sure you update schedule so date is correct first, then set time dials to 00 01

[00:11] <sena_kun> well, anyway, I still have a full post to write from scratch, heh. ok, I guess it is a sleeping time for me. o/

[00:12] <sena_kun> >make sure you update schedule so date is correct first, then set time dials to 00 01

[00:12] <sena_kun> oh, thanks, did exactly so. \o/

[00:12] *** sena_kun left
[00:12] <tbrowder> and on the p6 site, not your own

[00:15] *** qiqi joined
[00:15] <Geth> ¬¶ doc: 6f3282af62 | Coke++ | doc/Type/Cool.pod6

[00:15] <Geth> ¬¶ doc: space after comma

[00:15] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/6f3282af62

[00:15] <Geth> ¬¶ doc: 52e407d003 | Coke++ | util/manage-page-order.p6

[00:15] <Geth> ¬¶ doc: spaces, not tabs

[00:15] <synopsebot_> Link: https://doc.perl6.org/type/Cool

[00:15] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/52e407d003

[00:15] <squashable6> üçïüçïüçï  First contribution by coke++! ‚ô•

[00:15] *** p6bannerbot sets mode: +v qiqi

[00:37] *** kensanata left
[00:43] *** qiqi left
[00:48] *** kurahaupo joined
[00:49] *** p6bannerbot sets mode: +v kurahaupo

[00:58] *** kurahaupo left
[00:59] *** kurahaupo joined
[01:00] *** p6bannerbot sets mode: +v kurahaupo

[01:00] *** pecastro left
[01:02] *** Hotkeys joined
[01:02] *** p6bannerbot sets mode: +v Hotkeys

[01:07] *** kurahaupo_ joined
[01:07] *** kurahaupo left
[01:08] *** p6bannerbot sets mode: +v kurahaupo_

[01:09] <atweiden-air> has anyone got 2018.11 to compile on macos?

[01:11] <SmokeMachine> .tell pmurias you should try MemoizedDOM... :)

[01:11] <yoleaux> SmokeMachine: I'll pass your message to pmurias.

[01:14] *** daemon joined
[01:14] *** p6bannerbot sets mode: +v daemon

[01:14] *** aindilis left
[01:16] *** lizmat left
[01:19] *** kurahaupo_ left
[01:20] *** kurahaupo joined
[01:21] *** p6bannerbot sets mode: +v kurahaupo

[01:26] <vrurg> atweiden-air: I did a couple of minutes ago.

[01:32] *** kurahaupo left
[01:37] <vrurg> 2018.11 is amazingly fast on startup...

[01:38] <mornfall> is it?

[01:38] <mornfall> i'm intrigued

[01:40] * vrurg got used to startup times at ~1-1.5sec

[01:41] <vrurg> But now it just happens. Instantly.

[01:41] <mornfall> can i have that?

[01:41] <mornfall> i don't quite believe you, but i'm willing to try

[01:42] <mornfall> vrurg: which version did you use before?

[01:44] <vrurg> I'm migrating from release to relase with rakudobrew. So, the last one was 2018.10.

[01:44] <mornfall> okay i'm building moar 2018.11

[01:44] <mornfall> rakudo is next

[01:45] <vrurg> mornfall: I guess some extra module recompilation has been avoided somewhere in the startup chain. I was always wondering why is it slow when the only thing changed, say, is a test script.

[01:52] * vrurg takes his words back.

[01:53] <vrurg> Don't know what it was but now timing doesn't display any speed up. 

[01:53] <vrurg> Looks like a conincidence of a couple of factors which led to the wrong impression.

[01:55] <mornfall> yeah, it seemed rather implausible :p

[01:55] <mornfall> at least i have proper checkouts of the tools or something

[01:55] *** coet left
[01:56] <mornfall> too bad i have no idea how to make pull requests

[01:56] <mornfall> without going crasy, anyway

[01:56] <mornfall> crazy*

[01:58] <vrurg> mornfall: are you serious? It'd not a big deal with github. Just fork a repository, branch, work ‚Äì and let github form and submit the request.

[01:58] <vrurg> It's*

[01:58] <mornfall> yeah, sounds like a good way to go crazy to me :p

[01:59] <mornfall> i have a 2 line patch which took maybe 10 minutes to pin down including finding the right part of rakudo (VM.pm6 fwiw)

[02:00] <mornfall> and i didn't have to use the mouse to do it either... github makes me sad :\

[02:01] <vrurg> With two lines I wouldn't even bother and just send a patch.

[02:04] *** tmtvl left
[02:07] <mornfall> okay i found 'hub' which appears to make github less insane

[02:17] *** irdr left
[02:18] <atweiden-air> vrurg: interesting. rakudobrew crashes for me during compilation http://ix.io/1v36

[02:18] <atweiden-air> have also tried homebrew, similar error there

[02:18] <vrurg> atweiden-air: Have you upgraded the system recently? XCode?

[02:18] *** irdr joined
[02:19] *** p6bannerbot sets mode: +v irdr

[02:20] <vrurg> Looks like you need to recompile all 3rd party libs ‚Äì for the sake of reliability.

[02:21] <atweiden-air> vrurg: i did just recently upgrade llvm from 6.0.0 to 7.0.0 via homebrew

[02:21] <atweiden-air> wasn't aware there was an option to recompile 3rd party libs in rakudobrew

[02:22] *** araraloren joined
[02:22] *** p6bannerbot sets mode: +v araraloren

[02:24] <vrurg> atweiden-air: That's not about rakudobrew. In your output it complains about libsha1, libatomicops, libuv ‚Äì all seems to be coming from a directory 3rdparty which neither rakudobrew nor rakudo itself has.

[02:25] <vrurg> I use MacPorts, but could guess that 3rdparty is where homebrew installs stuff.

[02:25] <atweiden-air> vrurg: that log is from rakudobrew

[02:25] <atweiden-air> afaik rakudobrew pulls those deps down itself

[02:26] <atweiden-air> btw this is moarvm failing to compile, not rakudo

[02:27] *** graphene left
[02:29] *** graphene joined
[02:30] *** p6bannerbot sets mode: +v graphene

[02:30] <vrurg> Could a llvm bug then... I'm not even sure what rakudobrew is using to compile on my system. Though I have llvm40 installed.

[02:32] *** molaf left
[02:36] <mornfall> cool, i think i can live with 'hub pull-request' (unless it dies with a mysterious error message because you forgot to push into your fork, anyway)

[02:40] *** ChoHag_ left
[02:44] <vrurg> atweiden-air: I gave llvm 7.0 a chance, and then another one, and it worked for me both times. Can you try building an older version? Say 2018.10? I would suspect it will fail too.

[02:44] *** molaf joined
[02:45] *** p6bannerbot sets mode: +v molaf

[02:48] *** mephinet joined
[02:48] *** p6bannerbot sets mode: +v mephinet

[02:49] *** reu joined
[02:49] *** p6bannerbot sets mode: +v reu

[02:53] *** graphene left
[02:54] *** graphene joined
[02:55] *** p6bannerbot sets mode: +v graphene

[02:56] *** ChoHag joined
[02:56] *** p6bannerbot sets mode: +v ChoHag

[02:59] *** kurahaupo_ joined
[03:00] *** p6bannerbot sets mode: +v kurahaupo_

[03:05] *** zacts joined
[03:05] *** p6bannerbot sets mode: +v zacts

[03:11] *** ferreira joined
[03:12] *** p6bannerbot sets mode: +v ferreira

[03:16] <atweiden-air> vrurg: indeed 2018.10 compilation fails as well

[03:19] <vrurg> There're outdated versions of libraries lurking somewhere. Try checking out if your XCode is the latest too. I would try total upgrade and recompile. Check if there is something in the environment left behind (some custom settings for specific compiles).

[03:20] * vrurg wonders why llvm complains about libs in moarvm build dir only? That's weird.

[03:20] <atweiden-air> will try a reboot ....

[03:22] <vrurg> Oh, first of all: rm -rf ~/.rakudobrew/moarvm-2018.11 

[03:22] <atweiden-air> yes, i do that each time

[03:22] *** ChoHag left
[03:26] *** atweiden-air left
[03:39] *** zapwai left
[03:59] *** ChoHag joined
[04:00] *** p6bannerbot sets mode: +v ChoHag

[04:00] *** kurahaupo joined
[04:01] *** p6bannerbot sets mode: +v kurahaupo

[04:03] *** kurahaupo_ left
[04:04] *** zacts left
[04:10] *** kurahaupo left
[04:10] *** kurahaupo joined
[04:11] *** p6bannerbot sets mode: +v kurahaupo

[04:11] *** Sgeo_ joined
[04:12] *** p6bannerbot sets mode: +v Sgeo_

[04:14] *** Sgeo left
[04:15] *** kerframil left
[04:21] *** kurahaupo left
[04:21] *** kurahaupo joined
[04:21] *** graphene left
[04:22] *** p6bannerbot sets mode: +v kurahaupo

[04:23] *** graphene joined
[04:23] *** p6bannerbot sets mode: +v graphene

[04:24] *** Sgeo_ left
[04:28] *** ChoHag left
[04:28] *** cibs joined
[04:29] *** p6bannerbot sets mode: +v cibs

[04:34] *** qiqi joined
[04:34] *** kurahaupo left
[04:34] *** kurahaupo joined
[04:34] *** p6bannerbot sets mode: +v qiqi

[04:35] *** p6bannerbot sets mode: +v kurahaupo

[04:44] *** qiqi left
[04:45] *** kurahaupo left
[04:45] *** kurahaupo joined
[04:46] *** p6bannerbot sets mode: +v kurahaupo

[04:46] *** Sgeo joined
[04:47] *** p6bannerbot sets mode: +v Sgeo

[04:50] *** Cabanossi left
[04:51] *** Cabanoss- joined
[04:51] *** qiqi joined
[04:52] *** p6bannerbot sets mode: +v Cabanoss-

[04:52] *** p6bannerbot sets mode: +v qiqi

[04:55] *** kurahaupo left
[04:56] *** kurahaupo joined
[04:57] *** p6bannerbot sets mode: +v kurahaupo

[05:00] *** araraloren left
[05:06] <Geth> ¬¶ doc: 9900c9a188 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Programs/03-environment-variables.pod6

[05:06] <Geth> ¬¶ doc: Update 03-environment-variables.pod6

[05:06] <Geth> ¬¶ doc: 

[05:06] <Geth> ¬¶ doc: Change FormatCode F to C, since F is not usefully implemented. C<> changes the markup

[05:06] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9900c9a188

[05:06] <squashable6> üçïüçïüçï  First contribution by finanalyst++! ‚ô•

[05:06] *** kurahaupo left
[05:07] *** kurahaupo joined
[05:08] *** p6bannerbot sets mode: +v kurahaupo

[05:18] *** qiqi left
[05:22] *** kurahaupo left
[05:22] *** kurahaupo joined
[05:23] *** p6bannerbot sets mode: +v kurahaupo

[05:31] *** qiqi joined
[05:32] *** p6bannerbot sets mode: +v qiqi

[05:37] *** kurahaupo left
[05:37] *** kurahaupo joined
[05:38] *** p6bannerbot sets mode: +v kurahaupo

[05:41] *** kurahaupo left
[05:42] *** qiqi left
[06:04] *** ChoHag joined
[06:05] *** p6bannerbot sets mode: +v ChoHag

[06:06] *** benjikun left
[06:13] *** benjikun joined
[06:14] *** p6bannerbot sets mode: +v benjikun

[06:25] *** kurahaupo joined
[06:26] *** p6bannerbot sets mode: +v kurahaupo

[06:35] *** kurahaupo left
[06:36] *** kurahaupo joined
[06:36] *** p6bannerbot sets mode: +v kurahaupo

[06:44] *** graphene left
[06:45] *** kurahaupo left
[06:46] *** graphene joined
[06:46] *** kurahaupo joined
[06:46] *** p6bannerbot sets mode: +v graphene

[06:46] *** p6bannerbot sets mode: +v kurahaupo

[06:56] *** kurahaupo left
[06:56] *** andrzejku_ joined
[06:57] *** kurahaupo joined
[06:57] *** p6bannerbot sets mode: +v andrzejku_

[06:58] *** p6bannerbot sets mode: +v kurahaupo

[07:07] *** kurahaupo left
[07:07] *** kurahaupo joined
[07:08] *** p6bannerbot sets mode: +v kurahaupo

[07:18] *** kurahaupo left
[07:18] *** kurahaupo joined
[07:19] *** p6bannerbot sets mode: +v kurahaupo

[07:28] *** kurahaupo left
[07:28] *** graphene left
[07:29] *** kurahaupo joined
[07:30] *** graphene joined
[07:30] *** p6bannerbot sets mode: +v kurahaupo

[07:30] *** p6bannerbot sets mode: +v graphene

[07:34] *** qiqi joined
[07:35] *** p6bannerbot sets mode: +v qiqi

[07:40] *** kurahaupo left
[07:41] *** kurahaupo joined
[07:42] *** p6bannerbot sets mode: +v kurahaupo

[07:43] *** Sgeo left
[07:45] *** Sgeo joined
[07:46] *** p6bannerbot sets mode: +v Sgeo

[07:52] *** kurahaupo left
[07:53] *** kurahaupo joined
[07:53] *** p6bannerbot sets mode: +v kurahaupo

[08:03] *** kurahaupo left
[08:04] *** kurahaupo joined
[08:04] *** p6bannerbot sets mode: +v kurahaupo

[08:16] *** kurahaupo left
[08:16] *** kurahaupo joined
[08:17] *** p6bannerbot sets mode: +v kurahaupo

[08:21] <Geth> ¬¶ doc: 81df0c33c6 | (JJ Merelo)++ | doc/Language/exceptions.pod6

[08:21] <Geth> ¬¶ doc: Revise and explain examples

[08:21] <Geth> ¬¶ doc: 

[08:21] <synopsebot_> Link: https://doc.perl6.org/language/exceptions

[08:21] <Geth> ¬¶ doc: Closes #2468 after most of the work has been done by @uzluisf

[08:21] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/81df0c33c6

[08:21] <squashable6> üçï JJ++ closed issue ‚ÄúExceptions: `try` block ‚Ä¶‚Äù: https://github.com/perl6/doc/issues/2468

[08:21] *** jjmerelo joined
[08:21] *** p6bannerbot sets mode: +v jjmerelo

[08:26] *** kurahaupo left
[08:30] *** gurmble joined
[08:30] *** p6bannerbot sets mode: +v gurmble

[08:31] *** kurahaupo joined
[08:32] *** rindolf joined
[08:32] *** p6bannerbot sets mode: +v kurahaupo

[08:33] *** p6bannerbot sets mode: +v rindolf

[08:44] *** qiqi left
[09:06] *** Aceeri_ left
[09:09] *** Manifest0 left
[09:10] *** Manifest0 joined
[09:11] *** p6bannerbot sets mode: +v Manifest0

[09:16] *** rindolf left
[09:21] *** qiqi joined
[09:21] *** p6bannerbot sets mode: +v qiqi

[09:39] *** yqt joined
[09:40] *** p6bannerbot sets mode: +v yqt

[09:43] *** rindolf joined
[09:43] *** p6bannerbot sets mode: +v rindolf

[09:52] *** qiqi left
[09:53] *** hami joined
[09:53] *** p6bannerbot sets mode: +v hami

[09:57] *** hami left
[10:15] *** rindolf left
[10:19] *** jjmerelo left
[10:33] *** rindolf joined
[10:33] *** p6bannerbot sets mode: +v rindolf

[10:40] *** qiqi joined
[10:41] *** p6bannerbot sets mode: +v qiqi

[10:43] *** kensanata joined
[10:43] *** p6bannerbot sets mode: +v kensanata

[10:51] *** qiqi left
[10:55] *** lizmat joined
[10:55] *** p6bannerbot sets mode: +v lizmat

[10:56] *** coet joined
[10:56] *** p6bannerbot sets mode: +v coet

[11:03] *** rindolf left
[11:07] *** wbn_ left
[11:07] *** wbn joined
[11:08] *** p6bannerbot sets mode: +v wbn

[11:11] *** rindolf joined
[11:11] *** sno left
[11:12] *** pecastro joined
[11:12] *** p6bannerbot sets mode: +v rindolf

[11:13] *** p6bannerbot sets mode: +v pecastro

[11:19] *** qiqi joined
[11:19] *** p6bannerbot sets mode: +v qiqi

[11:31] *** sena_kun joined
[11:31] *** p6bannerbot sets mode: +v sena_kun

[11:32] *** lichtkind left
[11:40] *** robertle joined
[11:40] *** p6bannerbot sets mode: +v robertle

[11:44] *** lichtkind joined
[11:45] *** p6bannerbot sets mode: +v lichtkind

[11:45] *** ExtraCrispy left
[11:47] *** qiqi left
[11:52] *** qiqi joined
[11:53] *** p6bannerbot sets mode: +v qiqi

[12:09] <scott> what's a nice way to do this kind of thing, where `cycle` makes an infinite lazy list?

[12:09] <scott> take 10 (cycle [1,2,3]) == [1,2,3,1,2,3,1,2,3,1]

[12:10] <Summertime> [1,2,3] xx *

[12:10] <scott> i found `|$x xx *` mentioned on a blog but it seems rather obscure

[12:10] <timotimo> m: (|[1, 2, 3] xx *)[^10]

[12:10] <camelia> rakudo-moar 38bc682b0: ( no output )

[12:10] <timotimo> m: (|[1, 2, 3] xx *)[^10].perl.say

[12:10] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´(1, 2, 3, 1, 2, 3, 1, 2, 3, 1)‚ê§¬ª

[12:10] <timotimo> m: flat([1, 2, 3] xx *)[^10].perl.say

[12:10] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´(1, 2, 3, 1, 2, 3, 1, 2, 3, 1)‚ê§¬ª

[12:10] <Summertime> oh right yeah needs the slip

[12:10] <timotimo> no need for the |, you can use flat instead

[12:11] <Summertime> but my character count!

[12:11] <timotimo> well ... :)

[12:11] *** dogbert17 joined
[12:11] <Summertime> I wouldn't consider xx obscure, it is on the operators page of the documentation n' all

[12:11] <Summertime> although a fair ways down

[12:12] <timotimo> i think the obscure thing is having to combine three things

[12:12] <timotimo> ?

[12:12] <scott> i mean, |, xx, and * all interacting for what could be .cycle

[12:12] *** p6bannerbot sets mode: +v dogbert17

[12:12] <Summertime> ah, yeah in that case

[12:14] <mornfall> 'xx *' does seem to come up somewhat often

[12:16] *** lizmat left
[12:16] <Summertime> it could make more sense performance-wise to have something for containers seperate from xx too? since xx also re-evaluates the left side multiple times right?

[12:16] <timotimo> we already optimize that when the value is static

[12:16] <Summertime> m: (rand xx 10).say

[12:16] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´(0.058144186329716185 0.9723508447993349 0.3466275522323401 0.7530386225477884 0.28545861665026184 0.45543396888796783 0.7284208845806376 0.5768109343578602 0.28018795980570455 0.622501207127057)‚ê§¬ª

[12:16] <Summertime> ah oki

[12:16] *** ufobat_ joined
[12:17] <timotimo> m: my @foo = [1, 2, 3] xx 5; @foo[2][0] = "hello"; say @foo

[12:17] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´[[1 2 3] [1 2 3] [hello 2 3] [1 2 3] [1 2 3]]‚ê§¬ª

[12:17] <timotimo> ^- it clones the value each time instead of evaluating a piece of code

[12:17] *** p6bannerbot sets mode: +v ufobat_

[12:19] <Summertime> well, argument for compositing of so many things for something so simple, in python I think the equivilent is chain.from_iterable(repeat([1,2,3])), chain == flat, repeat(list,n) == xx, the concepts are portable across languages ^.^

[12:20] <Summertime> only thing different is default n value, instead of *

[12:21] <Summertime> oh there is a cycle function there... foot in mouth I suppose (and need to go fix yesterday's AoC answer ;-;)

[12:22] <scott> you may have guessed, but i'm also doing AoC stuff :P

[12:23] <scott> i started this year practicing Julia, but got fed up when i repeatedly realized it would be a Perl 6 one-liner, so i'm switching to practicing p6 =)

[12:24] <lucasb> hehe, me too was doing aoc day 1

[12:25] <lucasb> I wanted that "|(lines¬ª.Int) xx *" somehow to create the cycled list, but doesn't work 

[12:25] <lucasb> for 2 reasons: bug with lines() and thunk xx :)

[12:26] <Summertime> hypers and slips don't always interact quite nicely

[12:26] <lucasb> I should try with "A xx B :!thunked"

[12:27] <Summertime> I was aiming to do all of AoC in p6 this year, but at least in fedora's perl6 package, I get an event loop error for my day1part2 answer... still too lazy to build perl6 to make sure its not my distro's package's fault ;-;

[12:27] <timotimo> what version do they ship at the moment?

[12:27] <Juerd> What is AoC?

[12:27] <scott> Juerd: https://adventofcode.com/

[12:27] <moritz> Advent of Code?

[12:27] <yoleaux> 1 Dec 2018 23:44Z <tbrowder> moritz: ^^^

[12:27] <Juerd> Thanks

[12:28] *** MasterDuke joined
[12:28] *** p6bannerbot sets mode: +v MasterDuke

[12:28] *** MasterDuke left
[12:28] *** MasterDuke joined
[12:28] *** herbert.freenode.net sets mode: +v MasterDuke

[12:28] *** p6bannerbot sets mode: +v MasterDuke

[12:28] <Summertime> This is Rakudo version 2018.04 built on MoarVM version 2018.04.1 / implementing Perl 6.c.

[12:29] <mornfall> Summertime: building rakudo star is pretty easy, turns out :P

[12:29] <MasterDuke> Summertime: i don't know what's involved, but using the whateverable bots you can set standard input and such which you can't do with camelia

[12:30] <MasterDuke> *what's involved in your code

[12:30] <AlexDaniel`> evalable: stdin foo bar

[12:30] <evalable6> AlexDaniel`, STDIN is set to ¬´foo bar¬ª

[12:30] <MasterDuke> or yeah, building rakudo isn't all that complicated

[12:30] <Summertime> I can replicate without any specific input, and its a fairly super-common case (adding to a container in a loop)

[12:31] <Summertime> so I'm guessing fedora package issue

[12:31] <timotimo> weird. what does that error actually look like?

[12:31] <timotimo> oh

[12:31] <timotimo> the "fd > stderr" assertion thing?

[12:31] <Summertime> ye

[12:32] <Summertime> in uv

[12:32] <timotimo> a backtrace or something would be nice :S

[12:33] <MasterDuke> huggable: debs

[12:33] <huggable> MasterDuke, CentOS, Debian, Fedora and Ubuntu Rakudo packages: https://github.com/nxadm/rakudo-pkg/releases

[12:33] <mornfall> sounds like someone closed a fd

[12:33] <mornfall> that assertion doesn't seem to make any sense

[12:33] <MasterDuke> Summertime: also, you can find packages for the newest releases there ^^^

[12:34] <mornfall> (on the surface, that looks more like a bug in libuv than in moar or rakudo)

[12:34] <Summertime> moar: src/unix/core.c:539: uv__close: Assertion `fd > STDERR_FILENO' failed.

[12:34] <Summertime> Aborted (core dumped)

[12:34] <Summertime> with --ll-exception

[12:34] <mornfall> Summertime: you need to gdb into the core and ask for 'bt'

[12:35] <mornfall> but it's perfectly legal to close stdin/stdout/stderr and following open() will just return one of those

[12:36] <mornfall> (just like if you close stdin, the next open will return 0... some people mistakenly treat that as an error)

[12:36] *** domidumont joined
[12:36] <MasterDuke> Summertime: perl6-gdb-m

[12:37] *** p6bannerbot sets mode: +v domidumont

[12:37] <Summertime> give moment, trying to remember the smallest reproducable

[12:39] <mornfall> https://github.com/Samsung/iotjs/issues/1246

[12:39] *** kensanata left
[12:39] <mornfall> (basically what i said above -- this will trip up if you ever close one of stdin/stdout/stderr)

[12:40] <mornfall> why is your libuv compiled with assertions enabled is a different mystery entirely

[12:40] <Summertime> mornfall, I think you might be too smart for your own good, it does only happen when a probably-closing action is done on stdin ($*ARGFILES.lines specifically in my case)

[12:40] <Summertime> thanks for solving that part for me

[12:40] <Summertime> -for your own good, + just super smart

[12:41] *** coet left
[12:43] <Summertime> $*IN.close; my @x; loop { @x.push(0) };

[12:43] <Summertime> probably could get reproducer smaller but

[12:44] <Summertime> and I don't have gdb installed atm, and a bit tired to learn how to fight with gdb, I'll look into that tomorrow (along with compiling rakudo)

[12:45] <Summertime> and I can compile it its just... non portable binaries ;-; I wanna be able to move them and their related files around, but the paths are hardcoded in

[12:48] <Summertime> MasterDuke: I think I came across that before, but didn't realise that the package-building was set up to not require trust, so I'll definitely look into that now that I know that, thanks!

[12:49] <SmokeMachine> .tell pmurias Any idea of why Im getting this error? https://www.irccloud.com/pastebin/4DYflois/

[12:49] <yoleaux> SmokeMachine: I'll pass your message to pmurias.

[12:49] <mornfall> Summertime: what you want is to get libuv that's not a debug build

[12:50] <mornfall> Summertime: are you sure you didn't build libuv yourself at some point, overriding the system/packaged one?

[12:50] <mornfall> oooh nevermind

[12:50] <mornfall> moarvm ships a copy of libuv /o\

[12:51] <Summertime> if moarvm isn't forcing it on, and if fedora isn't doing some wacky splitting out dependencies stuff that I'm mistakenly overriding, I'll file a downstream bug tomorrow

[12:53] <mornfall> Summertime: i think moarvm defaults to using its own, and perhaps the fact it uses a debug build is a bug (which may have been fixed since)

[12:53] <mornfall> Summertime: fedora people probably want to pass --has-libuv to ./Configure.pl in moarvm

[12:58] <mornfall> at first sight, it seems that libuv gets the same cflags as the rest of moarvm, so perhaps your moarvm is a debug build too (which would possibly make it abysmally slow :p)

[13:02] <mornfall> timotimo: running with --profile on This is Rakudo version 2018.11 built on MoarVM version 2018.11 gives me Unhandled exception in code scheduled on thread 4 Invocant of method 'CALL-ME' must be a type object of type 'List', not an object instance of type 'List'.

[13:02] <mornfall> (code runs okay without --profile)

[13:03] <Summertime> they do pull out libuv as a seperate package, which p6 depends on (at least package-wise), I do find that p6 runs slower than I would expect though...

[13:03] <Summertime> I'm too tired for this headache, I'm just going to install new packages and hope that solves everything

[13:04] <mornfall> well, it's not super fast even in an optimized build, so that might mean nothing

[13:05] <Summertime> feels pretty snippy when using any batchy kinda stuff, its just for-loops and appendy mutations seem to go ultraslow

[13:08] <tbrowder> .tell jjmerelo i've edited your day 2 post a bit: adjusted the date/time published (p6 wp is on UTC, so you use the exact date an time of 00:01 which displays in the summary as 12:01 AM); also, removed the duplicate title and closed up some of the extra newlines inside obvious paras. you may want to tweak the content by hand some more. i would like you to completely update day 2 content later following the procedures i'm

[13:08] <tbrowder> updating in perl6/advent (when i  finish them later today). BTW, i haven't seen you use cuddled elses before!!

[13:08] <yoleaux> tbrowder: I'll pass your message to jjmerelo.

[13:11] <mornfall> timotimo: (but fwiw, the profile now renders okay with moarperf, so there's some good news too)

[13:11] *** lizmat joined
[13:11] *** p6bannerbot sets mode: +v lizmat

[13:15] *** MasterDuke left
[13:16] <Summertime> yep, works absolutely fine with packages from that repo, so its fedora's packages I need to go start a fite with

[13:44] *** andymcd joined
[13:44] *** p6bannerbot sets mode: +v andymcd

[13:45] *** andymcd left
[13:48] <lucasb> m: say (1,2,2,3,3,3).categorize({$_})

[13:48] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´{1 => [1], 2 => [2 2], 3 => [3 3 3]}‚ê§¬ª

[13:48] <lucasb> m: say (1,2,2,3,3,3).categorize(*)

[13:48] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´Doesn't make sense to categorize with itself‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:51] <SmokeMachine> m: say (1,2,2,3,3,3).categorize(*.self)

[13:51] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´{1 => [1], 2 => [2 2], 3 => [3 3 3]}‚ê§¬ª

[13:51] <lucasb> .oO( https://i.imgur.com/X87ww3a.jpg )

[13:52] <lucasb> ^^ with regard "Doesn't make sense" :-)

[14:00] <tbrowder> imho wordpress is a terrible platform for our advent articles. i just looked at perladvent.org and its basic look is good and could be dressed up for us. i‚Äôll bet it‚Äôs lots easier to use and maintain than what we have (which is beautiful for sure‚Äîwhen the formatting is right).

[14:01] *** ufobat_ left
[14:08] *** pmurias joined
[14:08] *** p6bannerbot sets mode: +v pmurias

[14:09] <pmurias> SmokeMachine: hi

[14:09] <yoleaux> 01:11Z <SmokeMachine> pmurias: you should try MemoizedDOM... :)

[14:09] <yoleaux> 12:49Z <SmokeMachine> pmurias: Any idea of why Im getting this error? https://www.irccloud.com/pastebin/4DYflois/

[14:10] <pmurias> SmokeMachine: maybe if I could have a look at what you are compiling I would have a better idea

[14:14] <lucasb> I share tbrowder opinion with regard wordpress

[14:14] *** pmurias left
[14:14] <lucasb> I never did any post in my life, but I guess wordpress doesn't give much freedom in contrast with a self-hosted static html solution

[14:15] *** pmurias joined
[14:15] *** p6bannerbot sets mode: +v pmurias

[14:16] <lucasb> I admire the perl5 advent. I think they organize their event in a private mailing list. I don't think it's a bad idea to borrow their ideas for next year. Hosting things in perl6.github.io/advent

[14:19] <SmokeMachine> pmurias: it‚Äôs the same code as in the 6pad but in different files...

[14:19] <tbrowder> we obviously have good web design people here‚Äîthe docs pages look pretty nice to me. should be able to have somthing similar for advent. author submits md file named yyyy-mm-dd and site tiols take care of md2html and scheduling at the right time!

[14:19] <SmokeMachine> pmurias: sorry, I‚Äôm not with my Mac now...

[14:19] <tbrowder> s/tiols/tools/

[14:21] <tbrowder> author can then update via webeditor as needed.

[14:21] <SmokeMachine> pmurias: https://perl6.github.io/6pad/#ada3d7e0a4251c13e7b73a426a97039f

[14:22] <tbrowder> comments and notifications are nice to have but i don‚Äôt know how that would work except maybe via github webhooks

[14:23] <pmurias> SmokeMachine: I'll add into onto my pile of stuff to investigate/fix

[14:27] <SmokeMachine> pmurias: could it be because I‚Äôm trying to use use and different files?

[14:27] <tbrowder> one example of a wordpress irritant to me: the title is used as a key to a post. thus some articles wind up with double titles because there is a separate, special title block in the wp editor which has to be filled and sometimes the title in the html content is not removed by the author.

[14:28] <pmurias> SmokeMachine: I have to try running it myself, I haven't seen that exact error before

[14:28] <tbrowder> (must lower blood pressure...)

[14:29] *** qiqi left
[14:30] *** tmtvl joined
[14:31] *** p6bannerbot sets mode: +v tmtvl

[14:33] *** Woodi joined
[14:33] *** masak joined
[14:33] <sena_kun> m: enum <one>; say one.HOW; given one { when Int && $_.HOW ~~ Metamodel::ClassHOW { say "Bad"; }; when Int && $_.HOW ~~ Metamodel::EnumHOW { say "Good" } }

[14:33] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´Perl6::Metamodel::EnumHOW.new‚ê§Bad‚ê§¬ª

[14:34] *** masak is now known as Guest98771

[14:34] *** p6bannerbot sets mode: +v Woodi

[14:34] *** p6bannerbot sets mode: +v Guest98771

[14:34] <sena_kun> is it just me or a second part(which checks if it's an Int or an enum) gets ignored?

[14:35] <sena_kun> m: enum <one>; if one ~~ Int && one.HOW ~~ Metamodel::ClassHOW { say "Bad" } elsif one ~~ Int && one.HOW ~~ Metamodel::EnumHOW { say "Good" }

[14:35] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´Good‚ê§¬ª

[14:36] *** kybr joined
[14:36] *** p6bannerbot sets mode: +v kybr

[14:39] *** caa51h joined
[14:40] <tobs> m: enum <one>; say one.HOW; given one { when $_ ~~ Int && .HOW ~~ Metamodel::ClassHOW { say "Bad"; }; when $_ ~~ Int && .HOW ~~ Metamodel::EnumHOW { say "Good" } } # sena_kun 

[14:40] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´Perl6::Metamodel::EnumHOW.new‚ê§Good‚ê§¬ª

[14:40] *** p6bannerbot sets mode: +v caa51h

[14:40] <SmokeMachine> pmurias: if any news, please let me know...

[14:42] <sena_kun> tobs, thanks. is explicit $_ usage sets topic for `.HOW` to be called on?

[14:43] <tobs> sena_kun: given sets $_, and .HOW is (always) just shorthand for $_.HOW

[14:43] <sena_kun> tobs, if $_ is set by given and .HOW is called on it, why my condition fail then?

[14:43] <tobs> I think you using "Int && some-bool" above is what creates the problem. Did you mean "$_ ~~ Int && some-bool"?

[14:44] <sena_kun> I did, but shouldn't `when Int` be equivalent to `when $_ ~~ Int`, ah, hmm, no.

[14:44] <sena_kun> it likely shouldn't.

[14:44] *** pmurias left
[14:44] <tobs> it should, but I think it's different when you use && too

[14:44] <sena_kun> yeah, that might be it.

[14:45] <sena_kun> anyway, thanks!

[14:45] *** pmurias joined
[14:45] *** p6bannerbot sets mode: +v pmurias

[14:47] *** pmurias left
[14:51] *** pmurias joined
[14:51] *** p6bannerbot sets mode: +v pmurias

[15:02] *** clarkema joined
[15:02] *** p6bannerbot sets mode: +v clarkema

[15:03] <clarkema> Hi all

[15:04] <clarkema> Suppose I have two lists of equal length, one of values and one which is a 'mask', containing just True or False.  What's the best way to get a new list, containing only the values from the first list where the corresponding position in the 'mask' list is True?

[15:04] <clarkema> I've been playing around with a grep, trying to get the index of the first list and compare with that slot in the mask list, but that doesn't feel right

[15:06] <lucasb> m: say ((1,2,3) Z=> (True,False,True)).grep(*.value)¬ª.key

[15:06] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´(1 3)‚ê§¬ª

[15:06] <lucasb> there must be some better way :)

[15:08] <sena_kun> that have to be about right, I think

[15:08] <clarkema> lucasb: interesting idea!

[15:09] *** coet joined
[15:09] *** p6bannerbot sets mode: +v coet

[15:10] <sena_kun> m: my @mask = True, False, True; my @a = do gather { for <a b c>.kv -> $i, $v { take $v if @mask[$i] } }; say @a;

[15:10] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´[a c]‚ê§¬ª

[15:10] <clarkema> is there a way to get the index in a grep?

[15:10] <sena_kun> doesn't create a zipped list just to throw things away.

[15:13] <lucasb> m: my @mask = True,False,True; say ({ $^x if @mask[$^i] } for <a b c>.kv)  # based on sena_kun's

[15:13] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´(a c)‚ê§¬ª

[15:16] <clarkema> There really _is_ MTOWTDI

[15:18] <tobs> m: my @values = 1,2,3; my @mask = True, False, True; say @values[@mask.grep(*.so, :k)]

[15:18] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´(1 3)‚ê§¬ª

[15:19] <clarkema> AoC is such a good source of interesting questions

[15:27] *** zakharyas joined
[15:27] *** p6bannerbot sets mode: +v zakharyas

[15:35] <SmokeMachine> m: say ((1,2,3) Z=> (True,False,True)).Set

[15:35] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´set(1 3)‚ê§¬ª

[15:36] <clarkema> In this particular case I need the order to be preserved -- they're going to get stitched back together into a string

[15:37] <lucasb> day 2?

[15:38] <clarkema> yup

[15:44] <lucasb> ah, the "find the two strings that differ in exactly 1 character" part? let me think :)

[15:44] *** coet left
[15:44] *** coet|CAD joined
[15:44] *** p6bannerbot sets mode: +v coet|CAD

[15:44] *** coet|CAD left
[15:44] <clarkema> Yup, fine them and then report the answer, which is the string without the differenting character

[15:45] <clarkema> hence the mask idea ;)

[15:45] <clarkema> I mean you can just do it using grep over a zip of pairs, but I wanted to try playing around

[15:45] *** coet joined
[15:45] *** p6bannerbot sets mode: +v coet

[15:45] *** coet left
[15:47] *** coet joined
[15:47] *** p6bannerbot sets mode: +v coet

[15:47] *** coet left
[15:48] *** coet joined
[15:48] *** p6bannerbot sets mode: +v coet

[15:48] <SmokeMachine> m: my &a := {$^a if $^b}; say flat <a b c> Z[&a] (True, False,True)

[15:48] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´(a c)‚ê§¬ª

[15:50] <tobs> SmokeMachine: That was on the tip of my tongue :)

[15:52] <clarkema> SmokeMachine: nice!

[15:53] *** rindolf left
[15:55] *** carl^ joined
[15:56] *** carl^ left
[15:56] *** rindolf joined
[15:57] *** p6bannerbot sets mode: +v rindolf

[15:58] *** rindolf left
[16:00] *** rindolf joined
[16:00] *** p6bannerbot sets mode: +v rindolf

[16:01] <tobs> I haven't read the task, but finding strings which differ in exactly one character sounds like a job for the one junction

[16:02] <tobs> m: my @strings = "abcd", "abde", "abce", "1bce", "123d"; say ([X] @strings xx 2).grep: -> ($s, $t) { one [Zne] ($s, $t)¬ª.comb }

[16:02] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´((abcd abce) (abde abce) (abce abcd) (abce abde) (abce 1bce) (1bce abce))‚ê§¬ª

[16:03] <tobs> alas, I get each pair twice, effectively because *I* don't care about ordering but X does

[16:06] *** jmerelo joined
[16:07] *** p6bannerbot sets mode: +v jmerelo

[16:07] <jmerelo> squashable6: status

[16:07] <squashable6> jmerelo, The date for the next SQUASHathon is not set

[16:07] <jmerelo> Right

[16:08] <lucasb> m: { say ($^a, $^b) if ($^a.comb Z $^b.comb).flat.grep({ $^x !eq $^y }) == 1 } for ($_ X $_ given <ab ac jk xy>).flat

[16:08] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´(ab ac)‚ê§(ac ab)‚ê§¬ª

[16:08] <lucasb> ^^ me too get double pairs

[16:15] *** pmurias left
[16:15] *** noyb joined
[16:15] *** pmurias joined
[16:15] *** p6bannerbot sets mode: +v pmurias

[16:15] *** noyb left
[16:19] <Xliff> m: say <ab>.comb Z <ac>.comb

[16:19] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´((a a) (b c))‚ê§¬ª

[16:19] *** xinming_ joined
[16:19] <tbrowder>  .ask moritz how do you feel about adding a new top-livel tab on perl6.org for Advent? that would be a convenient place to move from Wordpress. then we could mark it WIP until it is satisfatory‚Äîhopefully in time for next year.

[16:19] <lucasb> private leaderboard in aoc? hey let's create one for we #perl6 :-)

[16:19] <Xliff> m: say <ab>.comb X <ac>.comb

[16:19] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´((a a) (a c) (b a) (b c))‚ê§¬ª

[16:20] <lucasb> my rank position is over 10k, hehe

[16:20] *** p6bannerbot sets mode: +v xinming_

[16:20] <Xliff> m: say <ac>.comb X <jk>.comb

[16:20] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´((a j) (a k) (c j) (c k))‚ê§¬ª

[16:20] <tbrowder> we could use the theming and all you use now on wp

[16:20] <clarkema> Yeah, I ignore the global board

[16:21] <clarkema> it's a waste of time on the UK/EU timezone -- I'm certainly not getting up at 5am on a Sunday to compete ;)

[16:21] <lucasb> 169430-b1c331b2  <-- code

[16:21] <lucasb> clarkema: yeah, me too :-)

[16:22] *** xinming left
[16:23] <lucasb> nice, clarkema! I'm anonymous user. I just created a throwaway reddit account for this :)

[16:24] *** pmurias left
[16:25] <jmerelo> tbrowder: do you mean using perl6.org itself? I kind of like wordpress.com, if not for anything else, for the convenience...

[16:25] <clarkema> lucasb: i do like the idea of a #perl6 board, and using it to trigger discussion

[16:26] <moritz> tbrowder: do we have a toolchain for a blog-like thing on perl6.org?

[16:26] *** pmurias joined
[16:26] *** p6bannerbot sets mode: +v pmurias

[16:27] *** jmerelo left
[16:27] *** jmerelo joined
[16:28] *** p6bannerbot sets mode: +v jmerelo

[16:29] <sena_kun> m: Any ~~ (10 => 'ten')

[16:29] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´No such method '10' for invocant of type 'Any'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:29] <sena_kun> is this a bug?

[16:30] <jmerelo> m: say (10 => 'ten').^name

[16:30] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´Pair‚ê§¬ª

[16:30] <jmerelo> sena_kun: definitely a weirdness

[16:30] <sena_kun> I see. I wonder if it is worth a ticket.

[16:31] <jmerelo> sena_kun: ~~ is equivalent to "ACCEPTS"

[16:31] *** MilkmanDan joined
[16:31] *** p6bannerbot sets mode: +v MilkmanDan

[16:31] <jmerelo> m: say Any.ACCEPTS( (10=>ten))

[16:31] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    ten used at line 1. Did you mean 'tan'?‚ê§‚ê§¬ª

[16:31] <jmerelo> m: say Any.ACCEPTS( (10=>ten))

[16:31] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    ten used at line 1. Did you mean 'tan'?‚ê§‚ê§¬ª

[16:31] <jmerelo> m: say Any.ACCEPTS( (10=>"ten"))

[16:31] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´True‚ê§¬ª

[16:31] <jmerelo> m: say Any ~~ (10=>"ten")

[16:31] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´No such method '10' for invocant of type 'Any'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:31] <lucasb> it's the other way around, Pair.ACCEPTS

[16:31] <jmerelo> m: say Any ~~ 10=>"ten"

[16:31] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´False => ten‚ê§¬ª

[16:32] <jmerelo> m: say (10=>"ten").ACCEPTS( Any )

[16:32] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´No such method '10' for invocant of type 'Any'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:32] <jmerelo> Precedence rules?

[16:32] <lucasb> sena_kun: I would say it's worth an issue, yes. It's calling Pair.key on the subject, right?

[16:33] <lucasb> x ~~ (foo=>10);  # it's calling x.foo, why?

[16:34] <sena_kun> Dunno. Just stumbled upon this, no more. Worse for me is that my design has turned out to be a mess, which is... not good. :)

[16:34] <sena_kun> creating a ticket...

[16:34] <jmerelo> sena_kun++

[16:40] <tobs> m: say "/tmp" ~~ :e

[16:40] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´No such method 'e' for invocant of type 'Str'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:40] <tobs> m: say "/tmp".IO ~~ :e

[16:40] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´True‚ê§¬ª

[16:40] <tobs> That behaviour for pairs at least supports this syntax

[16:40] <lucasb> ah, that was the intention, thanks for the reminder :-)

[16:42] <lucasb> This use of P6 pairs it's what other languages have a Symbol data type for (I think)

[16:43] <lucasb> well, expect that symbols are unique across the process and pairs don't

[16:43] <lucasb> *except

[16:43] <clarkema> yeah, they're definitely not the same as lisp-y symbols

[16:43] <tobs> m: say "/tmp".IO ~~ :e & :!d

[16:43] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´False‚ê§¬ª

[16:44] <clarkema> I do wish they were available in p6

[16:44] <tobs> it's kinda cute

[16:49] <Ulti> is there some big thing Im missing on why Str can't be Positional? just wrote some ugly looking .comb / .substr / .join code and can't think of something nicer looking

[16:50] <Ulti> it feels like I could shim that functionality in using substr, just wondering if/why that would be bad?

[16:51] *** lizmat left
[16:52] <jmerelo> Ulti: I suspect it's got something to do with Unicode. But I guess it's simply because it's better to consider a string a single thing.

[16:52] <Ulti> yeah I just checked the docs Uni actually does do Positional

[16:53] <Ulti> but you can kind of manipulate a Str in a similar way, Im just wondering if it really matters that underneath you're hiding things like bytes

[16:53] <Ulti> Str is quite explicit in numerical things being grapheme level

[16:53] <Ulti> I guess someone might want to remove a combining character or something so it gets unintuitive quickly 

[16:54] <timotimo> Ulti: there's a module in the ecosystem for python-ish strings, but i think it makes most code explode

[16:58] <Ulti> orly why would code explode

[16:58] <timotimo> because code in the core setting doesn't expect strings to behave like that :D

[16:58] <Ulti> I guess for blah where blah on a string suddenly iterates characters is a big assumption change

[16:59] <Ulti> but then most of the string like types are actually positional if you look at the type map

[16:59] <Ulti> just make a type called String instead of Str :D

[16:59] <timotimo> well, i guess :)

[17:00] <Ulti> give it some nicer methods for common string tasks... feels like a fun module waiting to happen

[17:00] <timotimo> make a sub that does comb/map/join all in one step and call it as a method syntactically?

[17:00] <Ulti> you mean as an operator rather than the positional interface

[17:01] <timotimo> yeah

[17:01] <Ulti> yeah thats a nice solution to not break the world

[17:01] <timotimo> m: sub smap(Str $a, Code $c) { $a.comb.map($c).join("") }; "hello".&smap(*.succ.uc).say

[17:01] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´IFMMP‚ê§¬ª

[17:03] *** clarkema left
[17:03] <Ulti> feels super expensive though

[17:03] <Ulti> unless that is heavily optimised away

[17:03] <Ulti> to just point into the middle of a string :/

[17:03] <Ulti> you really want to go through substr

[17:04] <Ulti> which I assume does the pointer thing but knows how to jump around at a grapheme level rather than a byte level

[17:05] <timotimo> yeah, strings aren't a byte-level thing

[17:05] <Ulti> this is what I was doing anyway, plus it links to a fun advent puzzle https://gist.github.com/MattOates/fa3a306e4e057d6d133cf8445bae1aed

[17:07] <lucasb> Ulti: wanna join the leaderboard? the code is 169430-b1c331b2

[17:07] *** Manifest0 left
[17:07] *** Manifest0 joined
[17:07] <Ulti> oh cool, thanks

[17:08] *** p6bannerbot sets mode: +v Manifest0

[17:09] <Ulti> Im not sure I understand the scoring system

[17:09] <Ulti> given everyone there has done all the tasks?

[17:09] <lucasb> it's by time... since the task was published

[17:10] <Ulti> oh that sucks

[17:10] <Ulti> I only started today about half an hour ago

[17:12] <tbrowder> moritz: i don‚Äôt know about existing tooling for blogs...i was thinking of rolling our own. but i can look into some systems.

[17:12] <Ulti> 5am is a bit early for me

[17:13] <lucasb> Ulti: yeah, me too. I won't mess with my sleep just for this. :) The board is just for we #perl6 players have fun

[17:14] <tbrowder> jjmerelo: my complaint about wordpress involves the editing...not very consistent imho. fyi, your post originally posted on day 1 with a dup title,

[17:15] *** kensanata joined
[17:15] *** p6bannerbot sets mode: +v kensanata

[17:16] <jmerelo> tbrowder: it did delete some stuff when I copy-pasted for no reason. But I'm wary about having to maintain yet another resource. Plus wordpress is network, and we might get some traffic out of that

[17:17] <jmerelo> tbrowder: I noticed about the day. Maybe it's on PST or something, I don't know. I didn't notice the dup title, but I did have to do quite a bit of editing.

[17:17] <jmerelo> tbrowder: I'm OK with moving, as long as it does not involve a lot of maintenance and does have goodies like comments

[17:18] *** lizmat joined
[17:18] *** p6bannerbot sets mode: +v lizmat

[17:19] <tbrowder> ok, i‚Äôm just imagining at the moment. if wordpress had an api so we could better control consistency that would work.

[17:21] <tbrowder> aha, it does have a rest api interface! p6 to the rescue!

[17:22] <mornfall> i don't know, wouldn't it be better to just not use wordpress? :p

[17:22] <mornfall> (i know, not a good time)

[17:23] *** SqrtNegInf joined
[17:24] *** p6bannerbot sets mode: +v SqrtNegInf

[17:24] *** pmurias left
[17:25] <Altreus> Seems like Slang::Piersing breaks things like self!handle-message

[17:26] <Altreus> "Two terms ina a row"

[17:26] <Altreus> but spelled right

[17:26] *** coet left
[17:26] <Altreus> Useful as it is to have ! as part of a method name it does not seem to be 100% functional just yet

[17:27] <tbrowder> the wordpress site we have looks beautiful. the main problem imho is humans using an editing interface that is not very friendly so individual authors discover (or not) various ways to publish. api tools could help smooth that out.

[17:28] <moritz> do we have a real problem? Or was an author inconvenienced a bit?

[17:32] <jmerelo> tbrowder++

[17:33] <tbrowder> well, i‚Äôm probably the biggest klutz here, but the current process is a bit confusing.

[17:33] <jmerelo> tbrowder: I also tried to change the CSS so that level-2 headers don't look smaller that regular text. I just couldn't.

[17:33] <jmerelo> tbrowder: I mean, it's LTA in many aspects. But it's low maintenance, which is ideal with the current level of human resources...

[17:34] <mornfall> as far as 'beautiful' is concerned, the preformatted blocks suffer from a) too little horizontal space (they often have scrollbars) and b) inconsistent font size (source code is a lot smaller than non-source-code)

[17:35] *** pmurias joined
[17:35] *** p6bannerbot sets mode: +v pmurias

[17:35] <mornfall> of course the picture of code in the middle of the second day really stands out too :\

[17:35] <jmerelo> mornfall: that was a screenshot... No better way to get that. it's the output of Data::Dump

[17:36] <jmerelo> jmerelo: suggestions are welcome

[17:36] <mornfall> can't you just copy&paste it into a code block?

[17:36] <jmerelo> mornfall: you can't copypaste terminal colors.

[17:37] <lucasb> ah, ansi2html hehe

[17:37] <mornfall> which is good, because they are completely inconsistent with the syntax highlighter :p

[17:37] <timotimo> jmerelo: actually, you can, with the right terminal

[17:37] <mornfall> (which would just dtrt, most likely?)

[17:37] <jmerelo> timotimo: maybe, but I actually wanted to illustrate the actual terminal output... 

[17:37] <timotimo> hum. i wonder if i did it right or not

[17:38] <tbrowder> i think we could use zoffix‚Äôs acme module as a start and add appriopriate code to take an authors‚Äô md file as a commit to the per6/advent and automatically htmlify it and publish it on time. the author would always be able to edit the source and changes would be auto pushed to wp

[17:38] <jmerelo> mornfall: it need not be consistent, far as I can see. It's just a different thing.

[17:38] <jmerelo> tbrowder: please tell me that you're talking about next year

[17:39] <lucasb> ^^ agreed, any changes are for next year :-)

[17:40] <tbrowder> yes, NEXT year

[17:40] <lucasb> IMO, an author is expected to deliver a well formated markdown file, just that. Use Jekyll (or Uzu) in perl6/advent repo, and publish in GitHub pages

[17:40] <mornfall> well, tbrowder said the site looked beautiful... unfortunately i can't agree with that

[17:40] <mornfall> but let's leave it at that

[17:41] <mornfall> timotimo: did you get that message about --profile crashing in 2018.11? (in backlog)

[17:41] <timotimo> yeah

[17:41] <timotimo> :(

[17:41] <tbrowder> if the source is formatted right, AND it is entered into wp editor right, anf IF it‚Äôs scheduled to be published correctly.

[17:41] <jmerelo> mornfall: we can hand-code h2 and code's CSS, but that's that...

[17:41] <Altreus> looks like I can't use extended identifiers on methods either, or am I doing it wrong?

[17:41] <Altreus> oops didn't mean to press enter

[17:41] <Altreus> oh wait I might be

[17:42] <Altreus> If I hadn't pressed enter I would now delete the message :P

[17:42] <tbrowder> relying on each author to hand code html, css, etc, is asking for trouble

[17:42] <mornfall> timotimo: i guess i can open an issue... though it doesn't seem to crash reliably (presumably depends on the script)

[17:43] <mornfall> damn it also doesn't crash anymore with the same script

[17:43] <timotimo> ah, unreliable crashes are no fun; it's perhaps possible to make it more reliable by setting MVM_SPESH_BLOCKING=1 in the environment

[17:44] <tbrowder> moritz: can you dup the current p6 wp site so we can have a sandbox site?

[17:44] *** pmurias left
[17:44] <timotimo> that most strongly helps in multithreaded programs, but spesh itself is on its own thread already

[17:44] <Altreus> https://github.com/shuppet/p6-api-discord/commit/963df72eb3e015bbc55141119e5c62e2c4571f94

[17:44] <Altreus> "missing block" method pin‚èè:!p {

[17:45] <mornfall> timotimo: clearly a race condition is involved (which is unfortunate) ... i can also no longer reproduce

[17:45] <timotimo> what

[17:45] <jmerelo> tbrowder: we can export it to anything we want, but let's please not do this right now. Let's focus on spreading the word on current posts, helping them, reviewing them, and so on. 

[17:45] <jmerelo> tbrowder: some of them are scheduled aleady, reviewing them would help.

[17:46] <mornfall> i might have rebuilt moarvm in the meantime, with system libuv, which could throw off timing...

[17:46] <tbrowder> for sure, it‚Äôs just the time though to look ahead at the same time

[17:48] *** vrurg left
[17:48] *** molaf left
[17:48] <mornfall> timotimo: but hey, the overview page is pretty... one thing i don't understand though is whether JIT-compiled implies specialized (it certainly looks that way from that page)

[17:49] *** vrurg joined
[17:49] *** p6bannerbot sets mode: +v vrurg

[17:50] *** pmurias joined
[17:50] *** p6bannerbot sets mode: +v pmurias

[17:51] <timotimo> ah, i ought to make that clearer, probably

[17:51] <timotimo> the jit runs as a post-specialization step; if a frame doesn't get a specialized version of itself built, it won't be jitted either

[17:57] <mornfall> a completely off topic remark, i think the inliner needs to be a lot more aggressive than it is :p says here it eliminated about 3M frames, on top of 6M that happened

[17:57] *** molaf joined
[17:57] <mornfall> inlining happens in spesh too?

[17:58] *** p6bannerbot sets mode: +v molaf

[17:58] <mornfall> (also, do the frames entered etc. include profiling instrumentation? the numbers look awfully high for what the code does)

[17:58] <mornfall> (how about the initial compile, is that included?)

[18:00] *** pmurias left
[18:01] <lucasb> tbrowder: just showing, in case you think it's worth following their example: https://github.com/perladvent/Perl-Advent , http://cfp.perladvent.org/

[18:04] *** graphene left
[18:05] <tbrowder> lucasb: thanks, i was looking for that source!

[18:05] <jmerelo> lucasb: they use pull requests just as tbrowder is suggesting... People can comment and do stuff with it.

[18:06] *** graphene joined
[18:06] <jmerelo> I mean, in general, I don't think WP is the best. But I would rather take that starting in January to have it ready by September or so

[18:06] <jmerelo> It would make a good Google Summer of Code project, for instance.

[18:06] *** p6bannerbot sets mode: +v graphene

[18:07] <jmerelo> Besides, we are using LTA highlighting. Uploading stuff to gists and scraping the result is such a hack. (nice hack, but hack). We would be better off using the best highlighting available.

[18:07] <jmerelo> Which for the time being is the one used in Atom and in perl6/doc

[18:12] <xinming_> How can we get the list of "things" matches for $/ object?

[18:12] *** kensanata left
[18:12] <xinming_> something like,   $/<abc>   $/<xyz>    <--- How can we returns  abc and xyz  as hash?

[18:13] <sena_kun> `$/.Hash`? A very wild guess, don't think it'll work out though.

[18:14] <tobs> m: my $match = "abc" ~~ /<alnum>/; say $match.Hash

[18:14] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´{alnum => ÔΩ¢aÔΩ£}‚ê§¬ª

[18:14] <tobs> m: my $match = "abc" ~~ /<alnum>+/; say $match.Hash # :)

[18:14] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´{alnum => [ÔΩ¢aÔΩ£ ÔΩ¢bÔΩ£ ÔΩ¢cÔΩ£]}‚ê§¬ª

[18:14] <xinming_> Got it, Thanks.

[18:14] <xinming_> perl6 rocks

[18:15] <tbrowder> if we go the p5 route i think we need a github user named ‚Äúperl6advent‚Äù i tried to do that earlier today but i wasn‚Äôt accepted because my email name was recognized. i don‚Äôt know if we can get that as a group somehow.

[18:15] <jmerelo> tbrowder: we probably have emails (individual or colective) from other domains

[18:16] *** vrurg left
[18:17] <xinming_> another confusion, my %h = (:a<a>, :b<b>);    call-sub |%h;   <--- This will make  %h pairs into named arg,  How can we force the keys of this hash as "array"? But also expanded the hash?

[18:18] <moritz> tbrowder: you are using gmail, right? you can always use [email@hidden.address]
[18:18] <moritz> it's delivered to your normal inbox, but most services don't recognize that it's a separate address

[18:18] <tbrowder> ref the p5 example, they seem to be a bit more strict than we have been, but that‚Äôs not all bad (iff you have a large enough body of interested authors).

[18:18] <moritz> tbrowder: but the proper way is probably to create a github org

[18:18] <tbrowder> ok, thanks.

[18:22] *** yqt left
[18:26] <jmerelo> tbrowder: they also started _quite_ early.

[18:26] <jmerelo> Just las week we had almost half the schedule empty

[18:26] *** graphene left
[18:27] <tbrowder> ok, i have a github group ‚Äúperl6advent‚Äù started and i sent out a few invites that i could find github names for

[18:27] <tbrowder> if you want an invite i need yr github name

[18:28] *** graphene joined
[18:28] <tbrowder> i noticed mark fowler did all the 2018 articles

[18:28] <tbrowder> er, 2017

[18:28] *** p6bannerbot sets mode: +v graphene

[18:32] *** pmurias joined
[18:32] *** p6bannerbot sets mode: +v pmurias

[18:33] *** pmurias left
[18:36] *** Guest98771 is now known as masak

[18:38] <masak> it took years, but I've now identified an *awesome* use for an adverb \o/

[18:38] <masak> maybe *the* use

[18:38] <masak> unfortunately, it's part of a future advent post, so I can't show you yet ;)

[18:40] <lucasb> advance us some tips about it!

[18:41] <Geth> ¬¶ gtk-simple: da2dbb3c20 | faraco++ | examples/18-cairo-draw-handler.pl6

[18:41] <Geth> ¬¶ gtk-simple: add Cairo install instruction (for zef)

[18:41] <Geth> ¬¶ gtk-simple: review: https://github.com/perl6/gtk-simple/commit/da2dbb3c20

[18:46] <masak> lucasb: nah :)

[18:47] <masak> m: say rand x 3

[18:47] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´0.215863582456106370.215863582456106370.21586358245610637‚ê§¬ª

[18:47] <masak> how come xx is thunky but x isn't? :)

[18:47] <jmerelo> masak: no spoilers!

[18:48] * masak .oO( "no spoilers!" said the racecar driver )

[18:48] <mornfall> masak: to keep you on your toes

[18:49] <masak> mornfall: dang it! :)

[19:03] *** Manifest0 left
[19:04] *** Manifest0 joined
[19:05] *** p6bannerbot sets mode: +v Manifest0

[19:07] *** uzl joined
[19:07] *** p6bannerbot sets mode: +v uzl

[19:09] <uzl> .tell jmerelo Great article, JJ! And it was really fun to read.

[19:09] <yoleaux> uzl: I'll pass your message to jmerelo.

[19:10] <uzl> .tell jmerelo By the way, shouldn't "That sign [ #| ] ties it to the code behind the comment..." be "That sign ties it to the code after the comment..."?

[19:10] <yoleaux> uzl: I'll pass your message to jmerelo.

[19:11] <jmerelo> uzl: thanks!

[19:11] <yoleaux> 19:09Z <uzl> jmerelo: Great article, JJ! And it was really fun to read.

[19:11] <yoleaux> 19:10Z <uzl> jmerelo: By the way, shouldn't "That sign [ #| ] ties it to the code behind the comment..." be "That sign ties it to the code after the comment..."?

[19:11] <jmerelo> uzl: Probably. Let me check.

[19:13] <jmerelo> uzl: fixed. Thanks!

[19:13] <uzl> jmerelo: No problem. ;)!

[19:14] <jmerelo> We're getting a good amount of attention, BTW: https://www.flickr.com/photos/atalaya/46098721372/in/dateposted/

[19:14] <jmerelo> Hey, Slashdot!

[19:15] <jmerelo> Anyway, it would be great if you spread the word every single day.

[19:16] <mornfall> is there a repo with the posts (in progress)?

[19:16] * jmerelo clickbaits yesterday's post, an interesting take on porting stuff from Perl 5 to 6 https://perl6advent.wordpress.com/2018/12/01/day-1-porting-vigilance-integrating-perl-6-with-standard-tools/

[19:16] <jmerelo> mornfall: afraid not.

[19:16] <jmerelo> They are in drafts in the WP site.

[19:16] <tobs> it's an advent calendar after all

[19:17] *** andrzejku_ left
[19:17] <mornfall> if it was in a repo, i'd send patches for typos but can't do the work in a browser

[19:17] <jmerelo> mornfall: pretty much everyone is here (including YT, today's author). Grateful for everything you send.

[19:19] <mornfall> the problem is that copy-editing is most efficiently done by, well, copy-editing in place and sending diffs or pull requests or whatever... it's super inefficient to say things like "Were they letter to Santa?" should be "Were they letters to Santa?"

[19:19] <uzl> jmerelo: I have a question regarding Pod. I've stated it here: https://gist.github.com/uzluisf/fe0c282ce3321908e6c03bcce2d92e3f

[19:21] <masak> so, wait... `say` uses .gist on objects, but string interpolation uses .Str -- was it always like that, or did that change recently?

[19:21] <jmerelo> masak: probably. Don't remember any recent change to the documentation

[19:21] *** lizmat left
[19:21] <jmerelo> uzl: will check it out, but StackOverflow is probably a better venue for that

[19:22] <masak> when I write custom classes, which one am I expected to define, typically? can I safely let the other defer to the first?

[19:23] *** avalenn joined
[19:23] *** p6bannerbot sets mode: +v avalenn

[19:25] <uzl> jmerelo: Thanks. I'll try to do that later.

[19:26] *** andrzejku_ joined
[19:27] *** p6bannerbot sets mode: +v andrzejku_

[19:30] *** uzl left
[19:34] *** sno joined
[19:34] *** p6bannerbot sets mode: +v sno

[19:36] *** pmurias joined
[19:36] *** p6bannerbot sets mode: +v pmurias

[19:39] *** pmurias left
[19:40] *** someuser_ left
[19:41] <lucasb> I think that most languages only have 2 methods, the usually overrideable "to string" method, and one dump/inspect/"repr" method that returns a evaluable string

[19:41] <lucasb> that's .Str and .perl, I think

[19:42] *** someuser joined
[19:42] <lucasb> .gist was meant for "humans" (in the REPL) ? For not output a huge list... just the first 100 elements

[19:42] <lucasb> I think it's funny that the method is called ".perl"

[19:42] *** kensanata joined
[19:42] *** p6bannerbot sets mode: +v kensanata

[19:42] *** p6bannerbot sets mode: +v someuser

[19:43] <andrzejku_> after updating moarvm I have a problem: p6captureouters second arg must be MVMCode

[19:43] <lucasb> if I create a Perl-like language, should I named the method ".foolang" ? :-)

[19:44] *** domidumont left
[19:44] <andrzejku_> ahh sorry

[19:44] <andrzejku_> I know the cause

[19:48] *** lizmat joined
[19:48] *** p6bannerbot sets mode: +v lizmat

[19:50] *** pmurias joined
[19:50] *** p6bannerbot sets mode: +v pmurias

[19:52] *** pmurias left
[19:55] *** jmerelo left
[19:55] <timotimo> andrzejku_: did you rebuild rakudo?

[19:55] <andrzejku_> timotimo: now yes and it is working :)

[19:57] <timotimo> good

[20:11] *** zakharyas left
[20:14] *** coet joined
[20:14] *** p6bannerbot sets mode: +v coet

[20:22] *** ufobat joined
[20:23] *** p6bannerbot sets mode: +v ufobat

[20:25] *** robertle left
[20:28] *** sacomo joined
[20:28] *** p6bannerbot sets mode: +v sacomo

[20:35] <ufobat> m: sub foo($bar) { say $bar}; say &foo.signature ~~ :(Str)

[20:35] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´False‚ê§¬ª

[20:36] <ufobat> this doesn't match, but how could i check whether a Code is callable with a parameter without trying it in EVAL?

[20:37] <timotimo> m: sub foo($bar) { say $bar }; (1).Capture ~~ foo.signature

[20:37] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Calling foo() will never work with declared signature ($bar)‚ê§at <tmp>:1‚ê§------> 3 foo($bar) { say $bar }; (1).Capture ~~ 7‚èè5foo.signature‚ê§¬ª

[20:37] <timotimo> m: sub foo($bar) { say $bar }; (1).Capture ~~ &foo.signature

[20:37] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´Cannot unpack or Capture `1`.‚ê§To create a Capture, add parentheses: \(...)‚ê§If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}‚ê§or missed `:` in signature unpacking? -> &c:(Int) {}‚ê§  in block <unit> at ‚Ä¶¬ª

[20:37] <timotimo> m: sub foo($bar) { say $bar }; \(1) ~~ &foo.signature

[20:37] <camelia> rakudo-moar 38bc682b0: ( no output )

[20:38] <timotimo> m: sub foo($bar) { say $bar }; say \(1) ~~ &foo.signature

[20:38] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´True‚ê§¬ª

[20:38] <timotimo> m: sub foo($bar) { say $bar }; say \() ~~ &foo.signature

[20:38] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´False‚ê§¬ª

[20:38] <timotimo> m: sub foo($bar) { say $bar }; say \(1, 2, 3) ~~ &foo.signature

[20:38] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´False‚ê§¬ª

[20:39] <ufobat> hm

[20:39] <ufobat> let me try :)

[20:40] <andrzejku_> what do you think is rust a good language in perl6 users opinion?

[20:44] <ufobat> timotimo, thank you! works perfectly

[20:45] <mornfall> good language for what, andrzejku_?

[20:45] <mornfall> it'll surely give you a lot faster code than raku

[20:45] <andrzejku_> that I know

[20:45] <mornfall> it's also a lot more pain to write

[20:46] <mornfall> so choose your poison, i suppose?

[20:47] <andrzejku_> mornfall: maybe yes maybe no

[20:48] <andrzejku_> mornfall: I wonder know  why business choice that language

[20:52] <ufobat> i like rust a lot :)

[20:54] <ufobat> imho rust has a few concepts that are not easy to undersand when you're just familiar with perl6. If you're familiar with them it is not harder to write. It is just different

[20:59] *** kensanata left
[21:03] *** pmurias joined
[21:03] *** p6bannerbot sets mode: +v pmurias

[21:10] <Voldenet> I like how rust tries to understand lifetimes, but I don't really like the syntax for it

[21:11] *** AlexDaniel joined
[21:11] *** p6bannerbot sets mode: +v AlexDaniel

[21:12] <AlexDaniel> .

[21:13] <Kaiepi> m: sub term:sym<Ôæ†> { say 'evil!' }; Ôæ†

[21:13] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´evil!‚ê§¬ª

[21:15] <Kaiepi> m: sub term:sym<‚ÄÆ> { say "if two astronauts were on the moon and one bashed the other's head in with a rock would that be fucked up or what" {; ‚ÄÆ

[21:15] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unexpected block in infix position (missing statement control word before the expression?)‚ê§at <tmp>:1‚ê§------> 3 a rock would that be fucked up or what"7‚èè5 {; ‚ÄÆ‚ê§    expecting any of:‚ê§    ‚Ä¶¬ª

[21:15] <Kaiepi> m: sub term:sym<‚ÄÆ> { say "if two astronauts were on the moon and one bashed the other's head in with a rock would that be fucked up or what" }; ‚ÄÆ

[21:15] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´if two astronauts were on the moon and one bashed the other's head in with a rock would that be fucked up or what‚ê§¬ª

[21:18] <masak> don't they do psychological evaluations in astronaut school?

[21:18] *** andrzejku_ left
[21:19] <Kaiepi> idk probably

[21:23] <masak> Voldenet: ooc, what don't you like about the lifetimes syntax?

[21:23] <masak> (and do the recent improvements help, do you think?)

[21:27] <Kaiepi> rust is still tier 3 on openbsd grr

[21:31] <Kaiepi> i might still try it out anyways though seems like a neat language

[21:31] <Kaiepi> not sure what i want to write with it though

[21:33] <lucasb> hey, what's is this unicodey trick to flip everything?

[21:33] <mornfall> Voldenet: lifetimes are *hard* and deciding lifetimes statically limits what you can express in your language

[21:33] <mornfall> Voldenet: it doesn't matter how clever you get or how much you refine the syntax and the heuristics

[21:33] <Kaiepi> U+202E lucasb

[21:34] <lucasb> m: say "foobar\x[202E]foobar"

[21:34] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´foobar‚ÄÆfoobar‚ê§¬ª

[21:34] <mornfall> (unless you give up mutable state... in that case, it becomes a lot easier, but this is not what rust does)

[21:34] <lucasb> ah, thanks Kaiepi!

[21:36] <lucasb> m: class { multi method m(1) {}; method gist { "\x[202E]" } }.m

[21:36] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´Cannot resolve caller m(‚ÄÆ: ); none of these signatures match:‚ê§    (<anon|1>: Int $ where { ... }, *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:36] <lucasb> :D

[21:37] *** Hotkeys left
[21:48] *** yqt joined
[21:49] *** p6bannerbot sets mode: +v yqt

[21:53] *** kybr left
[21:53] *** leont joined
[21:54] *** p6bannerbot sets mode: +v leont

[21:55] *** ufobat left
[21:56] *** kybr joined
[21:57] *** p6bannerbot sets mode: +v kybr

[21:57] *** pmurias left
[21:59] *** pmurias joined
[21:59] *** p6bannerbot sets mode: +v pmurias

[22:01] *** rindolf left
[22:05] *** dct joined
[22:05] *** p6bannerbot sets mode: +v dct

[22:10] <masak> mornfall: "static types are *hard* and deciding types statically limits what you can express in your language" -- just as true. doesn't mean static types are a bad idea.

[22:12] <mornfall> masak: static types are much more natural than static lifetime arguments

[22:13] <mornfall> masak: lifetime is a property of executions, type is a property of locations

[22:13] <masak> not sure I agree with that offhand

[22:13] <SmokeMachine> pmurias: the parcel solution isn't working either for MemoizedDOM: :(

[22:14] <SmokeMachine> pmurias: https://usercontent.irccloud-cdn.com/file/3SKi8TRY/Captura%20de%20Tela%202018-12-02%20a%CC%80s%2020.12.07.png https://usercontent.irccloud-cdn.com/file/b6b4bmXv/Captura%20de%20Tela%202018-12-02%20a%CC%80s%2020.12.40.png

[22:14] <mornfall> masak: do you know LTL, or some other temporal formalism for specifying behaviours?

[22:14] <masak> mornfall: I've seen them but not used them.

[22:15] <masak> mornfall: here's my thinking: in dynamically typed languages such as Perl 5/6 or JavaScript, the developer does some kind of "informal type reasoning" about their code. things like "this is a Str, so I can call .chars on it"

[22:16] <mornfall> masak: you could argue that lifetimes are more like typing a heap, instead of typing just named variables

[22:16] <mornfall> masak: most languages give up on that right off the bat :p

[22:16] <SmokeMachine> pmurias: https://gist.github.com/FCO/f38fa33d2aea5268f409f785fdcf1aae

[22:16] <masak> mornfall: in a manually heap-managed language like C++, the developer does a similar kind of informal reasoning about lifetimes: "this object just fulfilled its purpose, so I can free it. oh, and here too."

[22:17] <mornfall> masak: yes, that's all fine -- but in C or C++, you either stick to simple lifetime idioms, or you implement reference counting

[22:17] <masak> mornfall: I think I agree with the straightforward facts that (a) we're more comfortable as a community with static types than with explicit lifetimes, and (b) we've been doing the former longer :)

[22:18] <mornfall> masak: to some degree, modern C++ tries to do a lot of safety improvements for the not-so-simple lifetime situations with unique_ptr and friends (with no runtime overhead)

[22:18] <masak> *nod*

[22:18] <masak> we're basically in violent agreement so far

[22:18] <mornfall> *but* unique_ptr is a bloody mess to use correctly :p

[22:19] <mornfall> and that's the simplest case, really -- one unique owner

[22:19] <masak> I'll take your word for it

[22:19] <leont> unique_ptr isn't all that messy IME

[22:19] <mornfall> anything that smells of a mutable closure is going to be completely out of scope

[22:19] <leont> But having to use move semantics is extra mental payload

[22:20] <mornfall> leont: if you only have that one unique_ptr, it's not messy, but it *usually* happens that you need to lend out a raw pointer to someone

[22:20] <masak> leont: maybe you were lucky and no-one else was using it while you were :P

[22:20] <mornfall> leont: which is why rust has a borrows checker, to make that safe (in C++, it's very much unsafe to do that)

[22:21] <leont> Yeah, rust definitely does this better. Note to self: allocate time for learning (more) rust

[22:21] <mornfall> in C++, your only choice is to rewrite everything with shared_ptr as soon as you need to, well, share that resource

[22:21] <mornfall> but of course you immediately go into GC land

[22:21] <mornfall> (assuming you want to retain static safety)

[22:22] <leont> No, rewriting everything to shared_ptr will quickly lead to circular references, and it's usually not necessary

[22:22] <leont> You do need to plan ahead your ownership

[22:22] <mornfall> leont: if you had unique_ptr at start, there absolutely will not be circular references

[22:22] <mornfall> leont: there can be exactly one unique_ptr to any object (which is why it's called unique)

[22:22] <masak> "plan ahead your ownership" sounds exactly like the kind of implicit lifetime/ownership reasoning I'm talking about

[22:23] <masak> experienced C++ programmers do it by rote anyway. Rust just forces you to do it, and checks your mistakes

[22:23] <mornfall> leont: if all you have is unique_ptr, you can never have shared mutable state

[22:23] <masak> well, "just"

[22:24] <mornfall> and you could of course argue that shared mutable state is bad (which it is) but it also is about the only way to write code that runs quickly on existing hardware

[22:24] <mornfall> getting rid of shared mutable state is not the answer, because you risk paying more penalty than what you saved by not having a GC

[22:24] *** pmurias left
[22:24] <leont> masak: I'm not disagreeing with that.

[22:24] <mornfall> and GC wins hands down for usability, every time

[22:25] <leont> But not on a lot of performance metrics, or on predictability.

[22:25] *** aindilis joined
[22:25] *** pmurias joined
[22:25] *** p6bannerbot sets mode: +v pmurias

[22:25] <mornfall> yes, *but* GC tech has gotten a lot better since the 60s ;-)

[22:25] <masak> Rust could be described as having a "static GC" ;)

[22:26] <mornfall> that's an oxymoron

[22:26] *** p6bannerbot sets mode: +v aindilis

[22:26] <mornfall> unless you call 'automatic variables' in C also 'static GC' i guess

[22:27] <mornfall> what rust has is an extension of lexically-bound lifetime

[22:27] <mornfall> which is still static, but more powerful than just having a stack

[22:28] <mornfall> one thing that can be arguably made easier in a static-lifetime program is hunting down memory leaks

[22:28] <mornfall> but i have no data to support that, it's a wild guess

[22:29] <mornfall> memory leaks in haskell can be a real pain in the backside, and that's a language that doesn't even have mutable state (most of the time, anyway)

[22:29] <Voldenet> masak: fundamentally the problem with rust lifetime syntax is that /it just doesn't read well/ - I'm sure one could get used to it with experience though

[22:29] <mornfall> (and as i mentioned above, without mutable state, lifetime is a lot easier in principle, though you often pull back all the complexity to make it run faster)

[22:30] <Voldenet> mornfall: lifetimes aren't hard, they must be statically described in all languages

[22:30] <Voldenet> btw

[22:30] <mornfall> Voldenet: that's nonsense

[22:30] <mornfall> do you perhaps mean scope?

[22:31] <Voldenet> hm, I'm not sure now, if the former makes sense then I probably used this vocabulary wrong

[22:32] <mornfall> scope is related to names... lifetime is related to values

[22:33] <Voldenet> For example C doesn't force you to define static lifetimes

[22:33] <Voldenet> except... it does

[22:33] <mornfall> it's perfectly plausible that a value outlives its name (e.g. when you return x; ... 'x' disappears, but the value that lived in 'x' survives)

[22:33] <mornfall> Voldenet: you have malloc/free in C... you can have as dynamic a lifetime as you please

[22:33] <Voldenet> Okay, so where does the value disappear, then?

[22:33] <pmurias> SmokeMachine: I'll dedicate tommorow to getting that to work

[22:34] <mornfall> conventionally, when it is no longer reachable from the root set

[22:34] <SmokeMachine> pmurias: please, let me know if I can help!

[22:34] <mornfall> (that's when its lifetime ends)

[22:34] <mornfall> but if you destroy it explicitly (e.g. via free()), then that's when it's gone

[22:34] <masak> that's a very GC view of lifetime :)

[22:35] <mornfall> masak: not only GC -- stack variables work that way too (only you don't think of it that way perhaps)

[22:35] <Voldenet> in fact, you can implement gc in rust

[22:35] <mornfall> Voldenet: something something reimplementing common lisp :p

[22:35] <mornfall> you can write any language in any other language, that's not the point

[22:35] <masak> mornfall: uhm. isn't it more like, stack variables don't work that way at all? :)

[22:36] <masak> or more like, with stack variables, the scope completely coincides with the lifetime

[22:36] <mornfall> masak: yes, but they become dead when they fall out of the root set, which happens to include such variables directly :p

[22:37] <masak> your point seems to fall under "correct but contrived"... :)

[22:37] <mornfall> but to ensure safety of a program, memory re-use should always coincide with the lifetime end in the 'GC view' as you put it

[22:38] <mornfall> if you re-use memory to which pointers exist, it'll be really hard to ensure that those pointers are never used by the program incorrectly

[22:38] <masak> right, and failure to do that results in either (a) use-after-free or (b) memory leaks, depending on which way they don't coincide

[22:38] <mornfall> yes, use-after-free is by far worse of the two :)

[22:39] <mornfall> so basically, GC is 'correct' and 'static lifetime' is a static (over)approximation of what GC would do

[22:39] <masak> good discussion. I'm still kind of fond of the phrase "static GC" (and I didn't coin it, Steve Klabnik did) :)

[22:39] <masak> 'night

[22:40] <mornfall> so i guess perl6 has static dynamic types :p

[22:40] <mornfall> (i still think it's a stupid term)

[22:42] <mornfall> more obviously so with 'static dynamic types' which is why i guess it's called 'gradual typing' instead :-)

[22:43] <pmurias> SmokeMachine: I'll get some sleep and I'll think what we need to make rakudo.js more user friendly (I have mostly focues on getting test to pass thus far)

[22:43] <SmokeMachine> pmurias: good night! thanks!

[22:44] <mornfall> (anyway, type-system-like declarative annotations are the wrong approach, but i'll need maybe another decade to do it right :p both for advanced static types that are borderline proof systems, but also for lifetimes)

[22:46] <pmurias> mornfall: re 'gradual typing' Perl 6 has mostly type assertions

[22:48] <SmokeMachine> could any one, please, take a look at my post draft to see if its getting ok? my english isn't very good, so I need some help...

[22:48] <SmokeMachine> it's the "A Red Secret Santa"

[22:49] <pmurias> SmokeMachine: link?

[22:50] <SmokeMachine> pmurias: it's on the wordpress... Ill copy it to a gist...

[22:51] <Voldenet> mornfall: declarative type systems are clearer in describing intent - I almost always use them in perl6, because usage is a lot easier afterwards

[22:51] <SmokeMachine> pmurias: could you see if it's visible? https://perl6advent.wordpress.com/?p=7148&preview=true

[22:51] <SmokeMachine> no, it isnt

[22:53] <tbrowder> SmokeMachine: it‚Äôs visible‚Äîbrief glance look good...

[22:56] <mornfall> pmurias: well, there's a degree of static type checking, at least it seems like there is to me? i'm still very much new to the language

[22:56] <timotimo> m: sub test-it(Str $foo) { }; test-it(1)

[22:56] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Calling test-it(Int) will never work with declared signature (Str $foo)‚ê§at <tmp>:1‚ê§------> 3sub test-it(Str $foo) { }; 7‚èè5test-it(1)‚ê§¬ª

[22:56] <timotimo> but you can't have static type checking with method calls, as they are dynamic

[22:56] <tbrowder> it‚Äôs showing 2 dec so make sure and schedule it properly for 3 dec at 00:01

[22:57] <SmokeMachine> tbrowder: thanks! :)

[22:57] <SmokeMachine> pmurias: https://gist.github.com/FCO/d3dd6dfe7de354a404f35bd1ab65cd91

[22:57] <Voldenet> m: sub test-it(Str $foo) { }; my $x = 1; test-it($x)

[22:57] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´Type check failed in binding to parameter '$foo'; expected Str but got Int (1)‚ê§  in sub test-it at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:59] <Voldenet> Dynamic types fail at runtime instead at compile time, which is why declaring types everywhere helps

[22:59] <Voldenet> m: sub test-it(Str $foo) { }; my Int $x = 1; test-it($x)

[22:59] <camelia> rakudo-moar 38bc682b0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Calling test-it(Int) will never work with declared signature (Str $foo)‚ê§at <tmp>:1‚ê§------> 3b test-it(Str $foo) { }; my Int $x = 1; 7‚èè5test-it($x)‚ê§¬ª

[23:00] <SmokeMachine> I hope my perl6 is better than my English...

[23:01] *** graphene left
[23:03] *** graphene joined
[23:03] *** p6bannerbot sets mode: +v graphene

[23:05] <ryn1x> What can I set $*OUT to if I just want to ignore output and have it not print to the screen? Like using 1>/dev/null.

[23:05] <yoleaux> 10 Nov 2018 21:47 MST <AlexDaniel> ryn1x: no, it's not implemented as linked lists, but potentially it can be depending on the compiler or backend. See also https://github.com/perl6/doc/issues/1726

[23:08] <Voldenet> ryn1x: you've suggested the soluton already

[23:08] <Voldenet> $*OUT = open :w, "/dev/null";

[23:08] <Voldenet> (I'm not sure if that's the best solution, but it's something)

[23:10] <ryn1x> I was thinking I want something the doesn't reach outside of perl... but though maybe there was something built in so I dont dave to create a class with a print method that does nothing...

[23:10] <ryn1x> s/though/thought

[23:11] <Voldenet> hmm, $*OUT = class { multi method print(Str $s) { } }.new

[23:12] <ryn1x> That works

[23:13] <ryn1x> works without multi too

[23:14] <Voldenet> Though it might not be proper way to do it

[23:14] <Voldenet> https://docs.perl6.org/type/IO::Handle#Creating_Custom_Handles

[23:14] <pmurias> SmokeMachine: https://gist.github.com/pmurias/ed73ad5dabb746b98a4e15277a728a3a did some quick fixes

[23:14] <mornfall> Voldenet: no, they are not -- they are good for describing simple facts, like 'this is an integer' ... not so much for describing complicated things like 'the result of this function is a valid index into the array it got as its argument'

[23:16] <ryn1x> thanks Voldenet

[23:16] <pmurias> SmokeMachine: when is the pos scheduled?

[23:17] <SmokeMachine> pmurias: thank you very much!! 21st

[23:21] <pmurias> sleep for real&

[23:21] <SmokeMachine> pmurias: good night

[23:21] *** pmurias left
[23:27] *** yqt left
[23:27] <Voldenet> mornfall: I agree - the best way would be to describe validation, which in best case would fail at compile time

[23:29] *** kurahaupo_ joined
[23:30] *** p6bannerbot sets mode: +v kurahaupo_

[23:32] *** TreyHarris joined
[23:32] *** p6bannerbot sets mode: +v TreyHarris

[23:32] *** kurahaupo left
[23:33] *** kurahaupo_ left
[23:36] *** dct left
[23:39] *** kurahaupo joined
[23:39] *** pecastro left
[23:40] *** p6bannerbot sets mode: +v kurahaupo

[23:40] <Voldenet> mornfall: in fact, there is a language that allows you do such things https://godbolt.org/z/PD0Q7h

[23:41] <Voldenet> but with this approach, comple times can get obnoxiously high

[23:42] <mornfall> Voldenet: I would know :P

[23:44] <sena_kun> re describing complicated things in types <- I don't know a thing on topic or about what you folks are talking, but: dependent types, LiquidHaskell, Idris and friends should come to the rescue. Whatever are those any good is another question though.

[23:45] <mornfall> sena_kun: i was basically bashing those :-)

[23:45] <sena_kun> ah

[23:47] <sena_kun> well, very lazily read some parts of the log with a lot of distractions, so my comments likely would be not good at all. :)

[23:53] *** marcoonroad joined
[23:53] *** p6bannerbot sets mode: +v marcoonroad

[23:57] *** vrurg joined
[23:58] *** p6bannerbot sets mode: +v vrurg

[23:58] <marcoonroad> hi, folks. is there any code coverage library available for perl 6? such technique is often implemented with instrumentation / ast-rewrite (complex) or by the means of reflection (slower sometimes)... i'm just wish to test how much tests i'm doing. i know that code coverage is far from the better approach, and that fuzzy / property tests are more useful by covering the data space instead the code space... thx in advance o/

[23:58] *** w_richard_w joined
[23:59] *** p6bannerbot sets mode: +v w_richard_w

