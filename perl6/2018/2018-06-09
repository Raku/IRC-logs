[00:10] *** mcmillhj joined
[00:14] *** mcmillhj left
[00:27] *** mcmillhj joined
[00:27] *** nnunley joined
[00:32] *** mcmillhj left
[00:37] *** dct left
[00:42] *** raschipi joined
[00:51] *** pmmmm joined
[00:55] *** kurahaupo_ joined
[00:55] *** kurahaupo_ left
[00:56] *** kurahaupo_ joined
[00:56] *** kurahaupo left
[00:57] *** kurahaupo_ is now known as kurahaupo

[00:57] *** markoong left
[00:57] *** mcmillhj joined
[00:58] *** nnunley left
[01:03] *** mcmillhj left
[01:12] <pmmmm> Quick question. How do I create an empty sequence? I am trying to flatmap every element in a directory where every element maps to sequence of many element or one element or zero element.

[01:14] <MasterDuke> pmmmm: Seq.new doesn't work?

[01:20] <raschipi> m: .say for Seq.new

[01:20] <camelia> rakudo-moar c5d14062a: OUTPUT: ¬´Too few positionals passed; expected 2 arguments but got 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[01:23] <raschipi> MasterDuke: No

[01:33] *** japhb left
[01:41] <timotimo> why not ().Seq?

[01:41] <timotimo> or "lol" xx 0

[01:41] <timotimo> m: say ("lol" xx 0).^name

[01:41] <camelia> rakudo-moar c5d14062a: OUTPUT: ¬´Seq‚ê§¬ª

[01:42] <timotimo> m: say ().Seq.^name

[01:42] <camelia> rakudo-moar c5d14062a: OUTPUT: ¬´Seq‚ê§¬ª

[01:43] *** mcmillhj joined
[01:46] *** Kaiepi joined
[01:47] <pmmmm> timotimo: Thanks. That indeed works.

[01:48] *** mcmillhj left
[01:49] <timotimo> put some very intricate and complicated expression in front of the xx to make it extra funny when the reader gets the joke

[01:51] *** molaf left
[01:56] <timotimo> 'night

[01:56] <pmmmm> timotimo: goodnight and thanks again.

[01:59] *** nnunley joined
[02:04] *** molaf joined
[02:06] *** comborico1611 left
[02:13] *** mcmillhj joined
[02:18] *** mcmillhj left
[02:32] *** Kaiepi left
[02:33] *** Kaiepi joined
[02:48] *** raschipi left
[02:52] *** kurahaupo left
[02:57] *** mcmillhj joined
[02:57] *** Tison left
[02:59] *** lizmat left
[03:02] *** mcmillhj left
[03:12] *** mcmillhj joined
[03:16] *** mcmillhj left
[03:19] *** kurahaupo joined
[03:41] *** mcmillhj joined
[03:46] *** mcmillhj left
[04:11] *** psychoslave joined
[04:11] *** Xliff joined
[04:11] <Xliff> \o

[04:13] <Xliff> Anyone read -> https://www.wired.com/story/microsoft-github-code-moderation/

[04:14] *** psychoslave left
[04:14] *** psychoslave joined
[04:15] <Xliff> That bothers me, greatly.

[04:22] *** mahafyi joined
[04:23] *** espadrine left
[04:23] *** Xliff left
[04:31] *** mcmillhj joined
[04:36] *** mcmillhj left
[04:57] *** mcmillhj joined
[05:02] *** mcmillhj left
[05:03] *** uzl joined
[05:08] <uzl> .tell hythm_  class A { has $.letter }; class B { has A @.objs }; my %h; %h<vowels>.push(A.new(letter => $_)) for <a e i o u>; my $b = B.new(objs => |%h<vowels>);

[05:08] <yoleaux> uzl: I'll pass your message to hythm_.

[05:08] *** mcmillhj joined
[05:09] *** sauvin joined
[05:10] <uzl> p6: class A { has $.letter }; class B { has A @.objs }; my %h; %h<vowels>.push(A.new(letter => $_)) for <a e i o u>; my $b = B.new(objs => |%h<vowels>);

[05:10] <camelia> rakudo-moar c5d14062a: ( no output )

[05:10] <uzl> p6: class A { has $.letter }; class B { has A @.objs }; my %h; %h<vowels>.push(A.new(letter => $_)) for <a e i o u>; my $b = B.new(objs => |%h<vowels>); say $b;

[05:10] <camelia> rakudo-moar c5d14062a: OUTPUT: ¬´B.new(objs => Array[A].new(A.new(letter => "a"), A.new(letter => "e"), A.new(letter => "i"), A.new(letter => "o"), A.new(letter => "u")))‚ê§¬ª

[05:11] *** uzl left
[05:13] *** mcmillhj left
[05:27] *** u-ou joined
[05:29] *** xtreak joined
[05:34] *** mcmillhj joined
[05:37] *** Sgeo_ joined
[05:39] *** Sgeo left
[05:39] *** mcmillhj left
[06:00] *** Geth left
[06:01] *** dalek joined
[06:01] *** ChanServ sets mode: +v dalek

[06:01] *** Geth joined
[06:01] *** ChanServ sets mode: +v Geth

[06:01] *** p6lert joined
[06:01] *** synopsebot_ joined
[06:01] *** ChanServ sets mode: +v synopsebot_

[06:04] *** mcmillhj joined
[06:09] *** mcmillhj left
[06:21] *** espadrine joined
[06:37] *** obfusk joined
[06:39] *** mahafyi left
[06:41] *** mcmillhj joined
[06:45] *** mcmillhj left
[06:53] *** mcmillhj joined
[06:58] *** mcmillhj left
[07:06] *** lizmat joined
[07:11] *** darutoko joined
[07:13] *** musca` left
[07:14] *** skids left
[07:15] *** mcmillhj joined
[07:17] *** jmerelo joined
[07:20] *** mcmillhj left
[07:21] *** kurahaupo left
[07:21] *** sena_kun joined
[07:45] *** musca joined
[07:46] *** xtreak left
[07:48] *** xtreak joined
[07:50] *** xtreak left
[07:51] *** xtreak joined
[07:55] *** xtreak left
[07:59] *** mcmillhj joined
[08:04] *** mcmillhj left
[08:18] *** robertle joined
[08:28] *** wamba joined
[08:29] *** mcmillhj joined
[08:33] *** mcmillhj left
[08:36] *** rindolf joined
[08:37] *** xtreak joined
[08:45] *** mcmillhj joined
[08:52] *** mcmillhj left
[08:59] *** robertle left
[09:00] *** kurahaupo joined
[09:08] *** psychoslave left
[09:14] <buggable> New CPAN upload: Inline-Perl5-0.34.tar.gz by NINE http://modules.perl6.org/dist/Inline::Perl5:cpan:NINE

[09:40] <jmerelo> Role and traits are conceptually the same thing; however, they have different keywords and work differently in Perl 6. Would it be correct to say that traits are added at compile time, roles at runtime?

[09:40] *** lizmat left
[09:41] <moritz> NO

[09:41] <El_Che> are they the same thing?

[09:41] <moritz> sorry, capslock, didn't meant to shout :-)

[09:41] <moritz> roles are an OO feature

[09:41] <moritz> traits are a language modification hooks

[09:42] <moritz> traits often use roles as mixins to modify behavior, but that doesn't need to be the case

[09:42] <jmerelo> traits are language modification hooks... because they work at runtime.

[09:42] <jmerelo> sorry, compile time.

[09:43] <moritz> yes, but roles are also often used at compile time

[09:43] <moritz> class Rat does Rational[int64, Int] { ... } # role used at compile time

[09:43] <jmerelo> Roles _can_ be used at compile time, but traits are _always_ used at compile time.

[09:44] <moritz> you can also call traits at run time

[09:44] <jmerelo> Hum.

[09:44] <jmerelo> Example?

[09:45] <moritz> m: class A { }; class B { }; trait_mod:<is>(B, A); # not sure if that works

[09:45] <camelia> rakudo-moar c940a0ed0: OUTPUT: ¬´Parents cannot be added to class 'B'after it has been composed‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:45] <moritz> m: my $f = sub () { 42 }; trait_mod:<returns>($f, Int)

[09:45] <camelia> rakudo-moar c940a0ed0: ( no output )

[09:46] <moritz> I've post-declared the return type of $f with a run-time call to the "returns" trait

[09:46] <jmerelo> hum.

[09:47] <moritz> and if you write something framework-like, it's not that uncommon

[09:48] <jmerelo> OK. Let's see this: Roles access the `self` variable, while traits can access only the public API of the object they are mixed in.

[09:48] <moritz> why are you trying to list differences that don't capture the essence?

[09:49] <moritz> roles are a way to structure classes and objects

[09:49] <moritz> traits are hooks that the compiler calls for you

[09:49] *** lizmat joined
[09:49] <jmerelo> I'm trying go put the essence into an easy-to-understand single sentence.

[09:49] <moritz> (note that some other programming languages use the word "traits" for our roles; that's a potential source of confusion)

[09:50] <jmerelo> our roles _are_ traits conceptually. And traits are also traits.

[09:50] <jmerelo> Or both are mixins.

[09:51] <moritz> if you phrase it that way, you're confusing everybody :-)

[09:51] <jmerelo> I don't want to phrase it that way.

[09:52] <jmerelo> "Perl 6 roles are traits that are structurally part of classes (and objects), while Perl 6 traits are hooks that the compiler calls for you"

[09:53] <jmerelo> "Perl 6 roles are traits that are structurally part of classes (and objects), while Perl 6 traits are hooks that the compiler calls for you. However, they are conceptually mixins, also called traits in other languages"

[09:53] <moritz> Perl 6 roles are a mechanism for code reuse, and thus for structuring classes and objects. Some other languages call them "traits".

[09:54] <moritz> Perl 6 traits, however, are hooks that the compiler calls for you.

[09:55] <jmerelo> traits can also be used for code reuse.

[09:55] <moritz> well, if you try, you can make things more confusing

[09:55] <moritz> traits are mostly useful for defining concise APIs

[09:55] <moritz> and sure, that has some implications for code reuse

[09:56] <jmerelo> The problem is mixing in one single adversative sentence use (on one hand) and concept (in the other hand)

[09:56] <jmerelo> Roles are used for this, while traits are that.

[09:57] <moritz> why do you even try to describe both in a single sentence?

[09:57] <jmerelo> Roles are structure, while traits are... Hum. 

[09:57] <jmerelo> moritz: well, to avoid confusion, and make clear when one should use one or the other. Make a precise use case for any of them.

[09:58] <jmerelo> Roles can't change internal representation, while traits can. 

[09:59] <jmerelo> Roles can access self, while traits in principle only receive the public interface of the object.

[10:00] <jmerelo> That would be two sentences, but I believe both are true. Two sentences is less awesome than a single one, but build up to a good use case. 

[10:02] <jmerelo> Also, "is" applies a trait to an object in compile time, while "does" can be used at compile or runtime.

[10:02] <jmerelo> Three sentences. 

[10:02] <moritz> jmerelo: but who confuses roles and traits in the first place?

[10:03] <jmerelo> moritz: Mr Newt B. Ye

[10:04] <jmerelo> moritz: It's for the (all new) traits page in the documentation.

[10:05] <moritz> jmerelo: be careful, there's an infix:<does> operator and a "does" trait

[10:05] <moritz> the operator runs at runtime, the trait at compile time

[10:06] <jmerelo> moritz: OK, let's start all over again.

[10:07] <jmerelo> moritz: looking at this https://stackoverflow.com/questions/925609/mixins-vs-traits, would you say that roles are mixins, and traits are, unsurprisingly, traits?

[10:11] <moritz> jmerelo: I'd say that Perl 6 roles have aspects of traits (explicit conflict resolution, flattened), but unlike traditional CS traits, the can contain state

[10:11] <moritz> I don't see any relation between a Perl 6 trait and a CS trait

[10:12] <jmerelo> moritz: So roles are mixins and (from some point of view) traits, and traits are... what?

[10:12] <moritz> jmerelo: trait are compiler hooks

[10:12] <moritz> ... as I've been saying for the last half hour

[10:13] <jmerelo> moritz: OK. Thanks for your patience.

[10:14] <jmerelo> moritz: I was trying to reconcile the fact that they are called "traits" seeing how that concept applied to them. And also to roles...

[10:15] <moritz> jmerelo: afaict, the naming of p6 traits comes more from natural language than from CS

[10:16] <moritz> you define some properties (aka traits) of an object that way, for example the return type of a function, the parents of a class etc

[10:17] <jmerelo> moritz: it would have been less confusing to call it properties or features. But one has to work with what's already there...

[10:20] <moritz> many programmers associated "properties" with our "attributes"

[10:20] <moritz> naming is not easy :(

[10:21] *** jeromelanteri joined
[10:21] <jmerelo> moritz: we should have invented a new word. "trooks"

[10:21] <jmerelo> "wraits", as in "hook" and "traits"

[10:21] <moritz> don't give TimToady any ideas :)

[10:21] <jmerelo> I'll change it everywhere in Rakudo and make a pull request.

[10:22] <moritz> (and the people who write trooks will be called trookers, right?)

[10:22] <jmerelo> moritz: anyway, it's been really helpful. I'll put the conversation, as is, in the documentation :-)

[10:22] <jmerelo> moritz: I mean, _you_ have been really helpful.

[10:23] <jmerelo> moritz: I would so *love* that :-)

[10:23] <jmerelo> And then we'll sing the song "Minnie the trooker" https://www.youtube.com/watch?v=8mq4UT4VnbE

[10:24] <moritz> :)

[10:36] *** damaxi joined
[10:37] <damaxi> araraloren: Hi!:)

[10:39] <araraloren>   hi

[10:41] *** dogbert2 left
[10:43] <araraloren>  what's going on  damaxi 

[10:49] <El_Che> discussions about roles and traints: https://pbs.twimg.com/media/DfPbUBOXUAA-YOl.jpg

[10:50] *** dogbert2 joined
[10:50] <jeromelanteri> someone use spacemacs for dev perl6 codes ?

[10:51] <jeromelanteri> (hello)

[10:53] <El_Che> a merelo anagram?

[10:53] <moritz> neearly, missing an e :-)

[10:53] <moritz> jeromelanteri: not me; I use down-to-earth vim :D

[10:54] <El_Che> jinetea merelo

[10:54] <El_Che> jeromelanteri: there are some emacs users here. Stick around

[10:54] <jmerelo> El_Che: that would be me...

[10:55] <jeromelanteri> moritz, i use vim to usually, but i'm trying to start to use emacs and specificaly spacemacs. layer for perl6 seems to failed, maybe there is something good for perl6 to use with spacemacs ?

[10:55] <jmerelo> I mean, I use plain old emacs

[10:55] <El_Che> space emacs is like emacs on drugs?

[10:55] <El_Che> how is that different?

[10:56] <jeromelanteri> bah i'm an emacs beginner... but i can see that spacemacs embed directly most of packages i need (and more)... for example vim keys bindings with evil

[10:56] <jeromelanteri> spacemacs should be a kind of emacs for newbie with special leader key and facilities...

[10:57] <jeromelanteri> the idea is to not loose to much time to learn emacs also.

[10:58] <El_Che> it probably has the same perl6 setup as regular emacs, I presume

[10:58] <jmerelo> if it's basically emacs there's a perl6 mode you can use.

[10:59] *** markoong joined
[10:59] <jeromelanteri> yes, i see perl6-mode and also perl6 layer... perl6 layer test failed for spacemacs (so i presume maybe also for just emacs)

[10:59] <jmerelo> El_Che: jmerelo is unanagrammable

[10:59] <jmerelo> moritz: I'm realizing there's then a confusion throughout all the documentation.

[11:00] <jmerelo> (maybe more, but at least this one)

[11:02] <El_Che> m: say 'jemerelo'.split('').permutations

[11:02] <camelia> rakudo-moar c940a0ed0: OUTPUT: ¬´(( j e m e r e l o ) ( j e m e r e l  o) ( j e m e r e o l ) ( j e m e r e o  l) ( j e m e r e  l o) ( j e m e r e  o l) ( j e m e r l e o ) ( j e m e r l e  o) ( j e m e r l o e ) ( j e m e r l o  e) ( j e m e r l  e o) ( j e m e r l  o e) ( j e m e ‚Ä¶¬ª

[11:02] <El_Che> I like jemere√≥l

[11:03] <jmerelo> m: say 'jmerelo'.split('').permutations

[11:03] <camelia> rakudo-moar c940a0ed0: OUTPUT: ¬´(( j m e r e l o ) ( j m e r e l  o) ( j m e r e o l ) ( j m e r e o  l) ( j m e r e  l o) ( j m e r e  o l) ( j m e r l e o ) ( j m e r l e  o) ( j m e r l o e ) ( j m e r l o  e) ( j m e r l  e o) ( j m e r l  o e) ( j m e r o e l ) ( j m e r o e  l‚Ä¶¬ª

[11:04] <jmerelo> It's badly unagrammable, then.

[11:05] <moritz> m: say 'jmerelo'.split('').perl

[11:05] <camelia> rakudo-moar c940a0ed0: OUTPUT: ¬´("", "j", "m", "e", "r", "e", "l", "o", "").Seq‚ê§¬ª

[11:05] <moritz> if you use .comb instead, you get fewer bogus/redundant permutations

[11:05] <El_Che> m: say 'jemerelo'.split('').comb

[11:05] <camelia> rakudo-moar c940a0ed0: OUTPUT: ¬´(  j   e   m   e   r   e   l   o  )‚ê§¬ª

[11:05] <moritz> m: say 'jmerelo.comb.permutations.map(*.join)

[11:05] <camelia> rakudo-moar c940a0ed0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> 3y 'jmerelo.comb.permutations.map(*.join)7‚èè5<EOL>‚ê§    expecting ‚Ä¶¬ª

[11:05] <moritz> m: say 'jmerelo'.comb.permutations.map(*.join)

[11:05] <camelia> rakudo-moar c940a0ed0: OUTPUT: ¬´(jmerelo jmereol jmerleo jmerloe jmeroel jmerole jmeerlo jmeerol jmeelro jmeelor jmeeorl jmeeolr jmelreo jmelroe jmelero jmeleor jmelore jmeloer jmeorel jmeorle jmeoerl jmeoelr jmeolre jmeoler jmreelo jmreeol jmreleo jmreloe jmreoel jmreole jmreelo jm‚Ä¶¬ª

[11:06] <El_Che> nice!

[11:07] <jmerelo> jmeleor could be a Lord of the Rings character

[11:07] <jmerelo> Anyway

[11:07] <jmerelo> moritz: most documentation is wrong, I was saying, regarding traits.

[11:08] <jmerelo> The talk about the "is rw" trait, or things like that

[11:08] <jmerelo> but the trait is actually "is", "does" or "will".

[11:08] <jmerelo> "is rw" is an instantiation of the trait.

[11:08] <jmerelo> right?

[11:09] <jmerelo> in general, only "is" is referred to as "trait". "does", "will" ... are just stuff.

[11:09] <moritz> not 100% sure on this nor

[11:10] <moritz> nor about how much value this extra precision actually gives us

[11:10] <jmerelo> moritz: not sure about how it's reflected in the documentation or not sure about what should be properly called a trait?

[11:11] <jmerelo> For instance "does" is a trait, but documentation directs us to the definition of "roles". "does" has only one multi, which does what it does (no pun intended), but it can do so much more...

[11:12] <jmerelo> If you define a proto, I guess you can define as many roles as you want. I mean, differentiating between traits and trait instances gives us some insigh on actual use cases.

[11:13] <jmerelo> Besides, it gives us a hint on how traits should be best used. You can define trait_mod:<is> any way you want on new types, but we should give some advice or best practice on how best to use it.

[11:13] <jmerelo> When to use "does" instead of "is", for instance.

[11:14] *** wamba left
[11:14] *** wamba joined
[11:18] <perlawhi1l> hi perlers

[11:19] <jmerelo> hi

[11:19] <araraloren> hi

[11:19] <perlawhi1l> i think i got a bug here

[11:19] <perlawhi1l> my %hash = :zero(0), :one(1); say so %hash<zero>:exists; say 'zero' ‚àà %hash; 

[11:19] <evalable6> perlawhi1l, rakudo-moar c940a0ed0: OUTPUT: ¬´True‚ê§False‚ê§¬ª

[11:19] <perlawhi1l> looks like it's booling the value, which is 0, resulting in False

[11:19] <perlawhi1l> for ‚àà

[11:19] <jmerelo> m: my %hash = :zero(0), :one(1); say so %hash<zero>:exists; say 'zero' ‚àà %hash.keys;

[11:19] <camelia> rakudo-moar c940a0ed0: OUTPUT: ¬´True‚ê§True‚ê§¬ª

[11:19] <araraloren> my %hash = :zero(2), :one(1); say so %hash<zero>:exists; say 'zero' ‚àà %hash;

[11:19] <evalable6> araraloren, rakudo-moar c940a0ed0: OUTPUT: ¬´True‚ê§True‚ê§¬ª

[11:20] <jmerelo> m: my %hash = :zero(0), :one(1); say so %hash<zero>:exists; say 'zero' ‚àà %hash.kv;

[11:20] <camelia> rakudo-moar c940a0ed0: OUTPUT: ¬´True‚ê§True‚ê§¬ª

[11:20] <jmerelo> m: my %hash = :zero(0), :one(1); say so %hash<zero>:exists; say 'zero' ‚àà %hash.values;

[11:20] <camelia> rakudo-moar c940a0ed0: OUTPUT: ¬´True‚ê§False‚ê§¬ª

[11:20] <jmerelo> There you go

[11:20] <jmerelo> m: my %hash = :zero(0), :one(1); say set(%hash); say so %hash<zero>:exists; say 'zero' ‚àà %hash.values;

[11:20] <camelia> rakudo-moar c940a0ed0: OUTPUT: ¬´set(one => 1 zero => 0)‚ê§True‚ê§False‚ê§¬ª

[11:20] <jmerelo> m: my %hash = :zero(0), :one(1); say set(%hash); say so %hash<zero>:exists; say 'zero' ‚àà set(%hash);

[11:20] <camelia> rakudo-moar c940a0ed0: OUTPUT: ¬´set(one => 1 zero => 0)‚ê§True‚ê§False‚ê§¬ª

[11:21] <jmerelo> ‚àà is coercing a hash to a set, and that's the result.

[11:21] <jmerelo> m: my %hash = :zero(0), :one(1); say set(%hash).perl; say so %hash<zero>:exists; say 'zero' ‚àà set(%hash);

[11:21] <camelia> rakudo-moar c940a0ed0: OUTPUT: ¬´(:one(1),:zero(0)).Set‚ê§True‚ê§False‚ê§¬ª

[11:22] <jmerelo> m: my %hash = :zero(1), :one(1); say set(%hash).perl; say so %hash<zero>:exists; say 'zero' ‚àà set(%hash);

[11:22] <camelia> rakudo-moar c940a0ed0: OUTPUT: ¬´(:one(1),:zero(1)).Set‚ê§True‚ê§False‚ê§¬ª

[11:22] <jmerelo> m: my %hash = :zero(1), :one(1); say set(%hash).perl.elems; say so %hash<zero>:exists; say 'zero' ‚àà set(%hash);

[11:22] <camelia> rakudo-moar c940a0ed0: OUTPUT: ¬´1‚ê§True‚ê§False‚ê§¬ª

[11:23] <jmerelo> Hum, it's a junction.

[11:23] <perlawhi1l> bisectable6: my %hash = :zero(0), :one(1); say 'zero' ‚àà %hash;

[11:23] <bisectable6> perlawhi1l, On both starting points (old=2015.12 new=c940a0e) the exit code is 0 and the output is identical as well

[11:23] <bisectable6> perlawhi1l, Output on both points: ¬´False‚ê§¬ª

[11:24] <perlawhi1l> ok

[11:25] <tobs> fwiw, that behaviour makes more sense if you think of Set as a special type of Bag :-)

[11:25] <perlawhi1l> yeah... just seems odd that 'one' ‚àà %hash is true, but 'zero' ‚àà is false

[11:26] <perlawhi1l> i guess the rule is, don't use setops to test hash membership :D

[11:26] <perlawhi1l> that's what :exists is for

[11:26] <jmerelo> perlawhi1l: looks fair 

[11:30] <perlawhi1l> the "hash coerces to set" doesn't hold water if you try 'one' ‚àà set(%hash), which is fault, because that creates a set of pairs

[11:30] <perlawhi1l> instead i presume it's doing %hash.Set

[11:30] <perlawhi1l> my %hash = :zero(0), :one(1); say %hash.Set

[11:30] <evalable6> perlawhi1l, rakudo-moar c940a0ed0: OUTPUT: ¬´set(one)‚ê§¬ª

[11:30] <perlawhi1l> which makes that set... hence 'one' ‚àà %hash is true

[11:30] <jmerelo> perlawhi1l: that's what I call coercing to Set.

[11:31] <perlawhi1l> yes :D

[11:31] <perlawhi1l> I agree

[11:32] <perlawhi1l> I am tired... i meant... based on your notes above... it's not creating a set from the hash (ie. set(%hash)), but instead coercing.

[11:32] <perlawhi1l> ok, all is understood now

[11:32] <jmerelo> perlawhi1l: :-)

[11:32] *** jeromelanteri left
[11:34] *** SourceBaby joined
[11:34] *** ChanServ sets mode: +v SourceBaby

[11:39] *** Zoffix joined
[11:40] <Zoffix> More accurately, `zero` doesn't make it to the created Set, because it's false. So you end up with a Set that only has `one` and you're then trying to test if it has `zero` in it.

[11:41] <Zoffix> You could test membership of keys instead:

[11:41] <Zoffix> m: my %hash = :zero(0), :one(1); dd say 'zero' ‚àà keys %hash

[11:41] <camelia> rakudo-moar c940a0ed0: OUTPUT: ¬´True‚ê§Bool::True‚ê§¬ª

[11:43] <perlawhi1l> yeah, figured that... i just incorrectly assumed ‚àà on a hash would check the keys... but a hash with numeric values does not a QuantHash make

[11:53] <jmerelo> perlawhi1l: in fact, that behavior is documented: https://docs.perl6.org/type/Set#Creating_Set_objects

[11:56] <Geth> ¬¶ doc: 39fe1e46e6 | (JJ Merelo)++ | doc/Language/traits.pod6

[11:56] <Geth> ¬¶ doc: Restructures the traits page

[11:56] <Geth> ¬¶ doc: 

[11:56] <Geth> ¬¶ doc: With a better definition given by @moritz Also restructures. Refs #1957

[11:56] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/39fe1e46e6

[11:56] <synopsebot_> Link: https://doc.perl6.org/language/traits

[11:56] <Geth> ¬¶ doc: 02669a0be4 | (JJ Merelo)++ | doc/Type/List.pod6

[11:56] <Geth> ¬¶ doc: Documents list ‚Üí on the list side, closes #1245

[11:56] <synopsebot_> Link: https://doc.perl6.org/type/List

[11:56] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/02669a0be4

[12:13] *** Zoffix left
[12:15] *** jmerelo left
[12:15] *** mahafyi joined
[12:16] *** Util joined
[12:18] *** xtreak left
[12:22] *** zakharyas joined
[12:26] *** psychoslave joined
[12:33] *** robertle joined
[12:36] <moritz> jnthn: re your last blog post, any reason not to use (|) as the signature in discard-and-nil? I thought that was faster than (*@, *%)

[12:39] <jnthn> moritz: It's NQP code, and NQP doesn't have |.

[12:39] <moritz> jnthn: ah, but it's less costly as the Perl 6 slurpy

[12:39] <moritz> no objections then :-)

[12:40] <jnthn> Yeah, NQP also doesn't wrap the two up in a higher level object, or have any concept of flattening, so its *@foo is more like Perl 6 **@foo except lower level :)

[12:40] *** zakharyas left
[12:45] *** araraloren left
[12:46] *** araraloren joined
[12:46] <moritz> also, from reading the blog post, it looks like a pretty cool mechanism

[12:46] <moritz> considering that those spesh plugins are just a few lines each

[12:53] *** domidumont joined
[13:00] *** domidumont left
[13:01] *** domidumont joined
[13:03] <Juerd> jnthn: It's interesting that Bool.pick is faster than rand > .5 :)

[13:04] <jdv79> is there a web irc log alternative?  that's one of the only ways i know what's going on:(

[13:05] <moritz> jdv79: there's a link in the topic

[13:06] *** domidumont left
[13:07] <jnthn> Juerd: It probably avoids that coercion that I mentioned :) It's also prettier. Should probably have used that :)

[13:08] <Juerd> jnthn: Nah, this is a better comparison to the other rand call, for which I don't think a prettier option is available

[13:08] <Juerd> Maybe Bag.pick, though

[13:10] <Juerd> Why does rand not return a Rat anyway? :D

[13:20] *** xiaomiao joined
[13:24] *** espadrine left
[13:25] *** xiaomiao left
[13:30] *** xiaomiao joined
[13:40] <damaxi> araraloren: fine

[13:40] <araraloren> okay :)

[14:09] *** MasterDuke left
[14:09] *** MasterDuke joined
[14:11] <mahafyi> good day all! I asked a question here : https://stackoverflow.com/questions/50775130/say-in-for-loop-with-a-last-when-condition-in-perl6

[14:12] <timotimo> mahafyi: the problem is that you can't combine prefix-for and postfix-for in one line like that

[14:12] <timotimo> it's either something like

[14:12] <timotimo> m: say "hi $_" for <a b c d>

[14:12] <camelia> rakudo-moar cbb5ee5f9: OUTPUT: ¬´hi a‚ê§hi b‚ê§hi c‚ê§hi d‚ê§¬ª

[14:12] <timotimo> or something like

[14:12] <timotimo> m: for <a b c d> { last when "c"; say "hi $_" }

[14:12] <camelia> rakudo-moar cbb5ee5f9: OUTPUT: ¬´hi a‚ê§hi b‚ê§¬ª

[14:13] <timotimo> does that help?

[14:13] <mahafyi> timiotimo: oh ok thanks. There isn't any problem really, just wanted to see if it can be done like that...

[14:13] <mahafyi> yes it is fine

[14:14] <timotimo> the $i thing can be done "for you", too, with the .kv method

[14:14] <timotimo> m: for <a b c d>.kv -> $k, $v { say "k is $k, v is $v. yay!" }

[14:14] <camelia> rakudo-moar cbb5ee5f9: OUTPUT: ¬´k is 0, v is a. yay!‚ê§k is 1, v is b. yay!‚ê§k is 2, v is c. yay!‚ê§k is 3, v is d. yay!‚ê§¬ª

[14:15] <mahafyi> last unless $_ is needed else it goes into an infinite loop

[14:16] <timotimo> you're getting input from a user? if so, they will have to ctrl-d for the .lines() iterator to exit

[14:16] <mahafyi> i posted on stackoverflow, per jmerelo idea yday, that questions there can offer some SEO and help others down the line maybe

[14:17] <mahafyi> timotimo : no it is input from another program. I use it to capture default system variables passed by asterisk pbx daemon to an AGI script.

[14:22] <timotimo> hm, i wouldn't expect an infinite loop under that condition

[14:25] <mahafyi> i followed the perl5 asterisk adi module. I was not getting an <<RX in the asterisk log at all if i use slurp or if i do not use the -> last when "" condition , plus the telephony channels does not execute the next statement which means the program never exited. I see it running in output of 'ps -ef ' also.

[14:28] <mahafyi> in fact, i am thinking of tring to make a change to use whenever and then log the stdin string to text. as of now i can only look for any output in asterisk log / debug.

[14:28] <mahafyi> log to a file i meant

[14:30] *** espadrine joined
[14:35] *** mcmillhj joined
[14:42] *** mcmillhj left
[14:44] *** AlexDani` joined
[14:44] *** mahafyi_ joined
[14:45] *** AlexDaniel left
[14:48] *** mcmillhj joined
[14:49] *** mahafyi left
[14:49] *** mahafyi_ is now known as mahafyi

[14:49] *** AlexDani` is now known as AlexDaniel

[14:53] *** mcmillhj left
[15:06] *** mahafyi left
[15:23] *** skids joined
[15:24] *** mcmillhj joined
[15:29] *** mcmillhj left
[15:32] *** wamba left
[15:39] *** domidumont joined
[15:44] *** mcmillhj joined
[15:47] *** Tison joined
[15:47] <Tison> \o

[15:48] <timotimo> o/

[15:48] *** mcmillhj left
[15:55] *** Tison left
[15:57] *** psychoslave left
[16:03] *** [particle] left
[16:04] *** dakkar joined
[16:04] *** [particle] joined
[16:08] *** labster left
[16:17] *** mcmillhj joined
[16:22] *** mcmillhj left
[16:26] *** raschipi joined
[16:31] *** mcmillhj joined
[16:40] *** zakharyas joined
[16:45] *** mcmillhj left
[16:46] *** mcmillhj joined
[16:48] *** jmerelo joined
[16:51] *** mcmillhj left
[16:56] *** Khisanth left
[16:58] *** zakharyas left
[16:59] *** zakharyas joined
[17:09] *** musca left
[17:11] *** Khisanth joined
[17:12] *** mcmillhj joined
[17:16] *** mcmillhj left
[17:17] <Geth> ¬¶ doc: 2cd9fd07d9 | (JJ Merelo)++ | doc/Language/traits.pod6

[17:17] <synopsebot_> Link: https://doc.perl6.org/language/traits

[17:17] <Geth> ¬¶ doc: Reorganizes and adds info on ¬´is¬ª for classes. Refs #1957

[17:17] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/2cd9fd07d9

[17:23] *** imcsk8 left
[17:23] *** musca joined
[17:25] *** mcmillhj joined
[17:30] *** mcmillhj left
[17:30] *** imcsk8 joined
[17:48] *** atweiden-air joined
[17:54] *** jmerelo left
[18:01] *** mcmillhj joined
[18:02] *** diego_k joined
[18:02] *** bartolin_ joined
[18:02] *** Guest556371 joined
[18:02] *** jsimonet1 joined
[18:04] *** espadrine left
[18:04] *** Guest49045 left
[18:04] *** espadrine joined
[18:04] *** camelia joined
[18:04] *** mst__ joined
[18:04] *** mst__ is now known as mst

[18:04] *** avalenn joined
[18:04] *** mst left
[18:04] *** mst joined
[18:05] *** mcmillhj left
[18:05] *** ChanServ sets mode: +v camelia

[18:06] *** giraffe joined
[18:06] *** kurahaupo left
[18:06] *** giraffe is now known as Guest75834

[18:07] *** Guest556371 left
[18:16] *** mcmillhj joined
[18:21] *** mcmillhj left
[18:31] *** mcmillhj joined
[18:35] *** zakharyas left
[18:35] *** skids left
[18:36] *** mcmillhj left
[18:37] *** zakharyas joined
[18:38] *** zakharyas left
[18:40] *** zakharyas joined
[18:54] *** mcmillhj joined
[18:58] *** mcmillhj left
[19:02] *** wamba joined
[19:05] *** mcmillhj joined
[19:09] *** mcmillhj left
[19:10] *** zakharyas left
[19:10] *** zakharyas1 joined
[19:12] *** zakharyas joined
[19:14] *** zakharyas2 joined
[19:14] *** zakharyas1 left
[19:17] *** zakharyas left
[19:19] *** domidumont left
[19:20] *** dct joined
[19:23] *** zakharyas2 left
[19:27] *** lizmat left
[19:32] *** zakharyas joined
[19:32] *** darutoko left
[19:34] *** mcmillhj joined
[19:37] *** zakharyas left
[19:38] *** zakharyas joined
[19:38] *** mcmillhj left
[19:45] *** mcmillhj joined
[19:49] *** lizmat joined
[19:50] *** mcmillhj left
[20:14] *** atweiden-air left
[20:17] *** mcmillhj joined
[20:22] *** mcmillhj left
[20:29] *** mirlur[m] joined
[20:29] *** dakkar left
[20:30] *** Kaiepi left
[20:30] *** Kaiepi joined
[20:39] *** mcmillhj joined
[20:41] *** raschipi left
[20:44] *** mcmillhj left
[20:44] *** hythm_ joined
[20:45] <hythm_> p6: class C { has $!a; has $!b; submethod BUILD(:$!a =  qx<hostname>, :$!b  = False,) { } }; my $c    = C.new; say $c; C.new

[20:45] <yoleaux> 05:08Z <uzl> hythm_: class A { has $.letter }; class B { has A @.objs }; my %h; %h<vowels>.push(A.new(letter => $_)) for <a e i o u>; my $b = B.new(objs => |%h<vowels>);

[20:45] <camelia> rakudo-moar cbb5ee5f9: OUTPUT: ¬´qx, qqx is disallowed in restricted setting‚ê§  in sub restricted at src/RESTRICTED.setting line 1‚ê§  in sub QX at src/RESTRICTED.setting line 11‚ê§  in submethod BUILD at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:46] <MasterDuke> e: class C { has $!a; has $!b; submethod BUILD(:$!a =  qx<hostname>, :$!b  = False,) { } }; my $c    = C.new; say $c; C.new

[20:46] <evalable6> MasterDuke, rakudo-moar cbb5ee5f9: OUTPUT: ¬´C.new‚ê§¬ª

[20:46] <hythm_> the above code works fine, but if added "chomp" on front of qx<hostname> it gives misleading error,.. 

[20:46] <hythm_> # class C { has $!a; has $!b; submethod BUILD(:$!a =  chomp qx<hostname>, :$!b  = False,) { } }; my $c    = C.new; say $c; # this errors out

[20:47] <hythm_> e: class C { has $!a; has $!b; submethod BUILD(:$!a =  chomp qx<hostname>, :$!b  = False,) { } }; my $c    = C.new; say $c;

[20:47] <evalable6> hythm_, rakudo-moar cbb5ee5f9: OUTPUT: ¬´(exit code 1) Cannot modify an immutable Pair (b => (Any))‚ê§  in submethod BUILD at /tmp/C4TuNnFHsH line 1‚ê§  in block <unit> at /tmp/C4TuNnFHsH line 1‚ê§‚ê§¬ª

[20:50] <MasterDuke> hythm_: can you use TWEAK instead of BUILD? does that change anything?

[20:50] <b2gills> e: class C { has $!a; has $!b; submethod BUILD(:$!a, :$!b  = False,) { $!a //= chomp qx<hostname> } }; my $c    = C.new; say $c;

[20:50] <evalable6> b2gills, rakudo-moar cbb5ee5f9: OUTPUT: ¬´C.new‚ê§¬ª

[20:51] <hythm_> MasterDuke TWEAK gives same error

[20:53] <b2gills> I don't know why you are using private attributes.

[20:53] <b2gills> e: class C { has $.a = chomp qx<hostname>; has $.b = False; }; my $c    = C.new; say $c;

[20:53] <evalable6> b2gills, rakudo-moar cbb5ee5f9: OUTPUT: ¬´C.new(a => "superserver", b => Bool::False)‚ê§¬ª

[20:54] *** damaxi left
[20:56] <b2gills> e: class C { has $!a; has $!b; submethod BUILD(:$!a =  chomp(qx<hostname>), :$!b  = False,) { } }; my $c    = C.new; say $c;

[20:56] <evalable6> b2gills, rakudo-moar ec5e51c8b: OUTPUT: ¬´C.new‚ê§¬ª

[20:57] <b2gills> hythm_:  The problem you were facing is that all of `qx<hostname>, :$!b  = False,` were arguments to chomp

[20:58] <hythm_> ah, makes sense now. Thanks b2gills. 

[21:13] *** comborico1611 joined
[21:18] *** sena_kun left
[21:19] *** rindolf left
[21:19] *** CIAvash[m] joined
[21:19] *** AlexDaniel`` joined
[21:19] *** unclechu joined
[21:19] *** lance_w[m] joined
[21:19] *** wictory[m] joined
[21:19] *** ilmari[m] joined
[21:19] *** Matthew[m] joined
[21:19] *** Garland_g[m] joined
[21:19] *** mienaikage joined
[21:21] *** dct left
[21:23] *** dct joined
[21:28] *** Kaiepi left
[21:28] *** Kaiepi joined
[21:28] *** mcmillhj joined
[21:30] *** Some-body_ joined
[21:31] *** Some-body_ is now known as DarthGandalf

[21:33] *** mcmillhj left
[21:44] <masak> maybe it's time to reach outside of the echo chamber about Perl 6 no longer running on the Parrot VM: https://news.ycombinator.com/item?id=17275038

[21:44] <masak> (apologies to anyone who still runs Perl 6 on Parrot on a daily basis.)

[21:44] <El_Che> in production

[21:48] *** mcmillhj joined
[21:53] *** mcmillhj left
[21:58] *** kurahaupo joined
[22:01] *** mcmillhj joined
[22:04] *** zakharyas left
[22:05] *** mcmillhj left
[22:09] *** dct left
[22:19] *** |oLa| left
[22:23] <AlexDaniel> c: 2014.01 say 42

[22:24] <committable6> AlexDaniel, ¬¶2014.01: ¬´42‚ê§¬ª

[22:24] <AlexDaniel> fwiw that's the first working rakudo on moar ‚Üë

[22:30] <AlexDaniel> I was able to build it fairly recently, but I think it no longer works on systems where perl5 is too new

[22:31] *** mcmillhj joined
[22:36] *** mcmillhj left
[22:54] *** hythm_ left
[23:02] *** mcmillhj joined
[23:03] *** obarb joined
[23:03] *** obarb is now known as mrmeseeks

[23:03] *** mrmeseeks left
[23:06] *** mcmillhj left
[23:09] *** molaf left
[23:17] *** mcmillhj joined
[23:21] *** markoong left
[23:22] *** markoong joined
[23:22] *** mcmillhj left
[23:25] *** molaf joined
[23:44] *** mcmillhj joined
[23:46] *** robertle left
[23:49] *** mcmillhj left
[23:52] *** pecastro joined
[23:57] *** mcmillhj joined
