[00:06] *** raschipi joined
[00:25] *** Actualeyes left
[00:35] *** markong left
[00:45] <ingy> I'm setting up travis for a multilang project and using perl6 as an addon, but it doesn't install zef

[00:45] <ingy> I see this works: https://github.com/perl6-community-modules/p6-test-builder/blob/master/.travis.yml

[00:45] <ingy> but mine fails: https://github.com/testml-lang/testml/blob/travis/.travis.yml#L12

[00:46] <timotimo> not sure what the perl6 apt package gets you on those ubuntu versions the yhave

[00:46] <ingy> sudo: zef: command not found    https://travis-ci.org/testml-lang/testml/builds/382958845

[00:46] <timotimo> potentially a version far too old to run zef

[00:47] <ingy> right, so open to suggestions :)

[00:47] <raschipi> You need to manually install it. Those comands in the first one aren't using zef, they are installing it.

[00:47] <timotimo> Get:21 http://us-central1.gce.archive.ubuntu.com/ubuntu trusty/universe amd64 rakudo amd64 2013.12-1 [2,448 kB]

[00:47] <timotimo> yeah, no.

[00:47] <timotimo> huggable: deb

[00:47] <huggable> timotimo, Alpine, CentOS, Debian, Fedora, OpenSUSE and Ubuntu Rakudo packages: https://github.com/nxadm/rakudo-pkg#rakudo-pkg

[00:47] <timotimo> ingy: there's an apt repository there

[00:47] <ingy> ok

[00:50] *** lain0n joined
[00:53] <ingy> timotimo: is that supposed to install perl6 and zef bins?

[00:53] <ingy> zef still not found

[00:53] <timotimo> there's more info about that topic in the readme of that repository

[00:53] <timotimo> there's a command you need to run

[00:54] *** HaraldJoerg left
[00:54] *** lain0n left
[00:55] <ingy> I see

[00:57] *** stmuk_ joined
[00:59] *** stmuk left
[01:01] <ingy> there's a travis section: https://github.com/nxadm/rakudo-pkg#using-rakudo-pkg-on-travis

[01:01] <ingy> hopefully that just works, testing now

[01:04] *** raschipi left
[01:08] *** kurahaupo_ joined
[01:12] <ingy> it's not

[01:12] *** enheh left
[01:12] <ingy> trying one more thing

[01:12] *** enheh joined
[01:12] *** kurahaupo left
[01:13] <timotimo> looks like ou forgot the important part

[01:13] <timotimo> oh, huh?

[01:13] *** wamba left
[01:13] <ingy> what's that?

[01:13] <timotimo> no, that should really have been everything

[01:13] <timotimo> i misremembered the install-zef-as-user shell script

[01:14] <ingy> do I need that?

[01:14] <timotimo> no

[01:14] <timotimo> ah

[01:14] <timotimo> of course

[01:14] <timotimo> sudo won't take the PATH from your environment

[01:14] <timotimo> so it won't find zef when you sudo it

[01:15] <timotimo> however, it tells you to "zef install" rather than "sudo zef install" in the rakudo-pkg readme

[01:15] <timotimo> it'd surely be good to have an explicit mention of that there

[01:15] <timotimo> in the readme of rakudo-pkg i mean

[01:15] <timotimo> until then, just leave out the sudo for zef and perl6 invocations and i think that should make things work

[01:15] <ingy> aye

[01:19] <timotimo> well, that looks better

[01:20] <ingy> one error at a time!

[01:21] <timotimo> rome wasn't continuously integrated from day one

[01:21] <ingy> that's how we'll fix the world!

[01:21] <ingy> :D

[01:22] *** aindilis joined
[01:23] <ingy> timotimo: since the testml-compiler is JS and JS is one of the runtime langs I made this interactive demo site https://testml-lang.github.io/testml/?type=example&name=math&view=tap

[01:23] <ingy> it has all the testml and testml-compiler and yaml-test-suite tests built-in

[01:24] <ingy> and totally interactive

[01:25] <ingy> and the location url permalinks any state you choose

[01:25] *** mcmillhj joined
[01:25] <timotimo> i don't know coffeescript :)

[01:26] <timotimo> other than that it looks neat

[01:26] <ingy> coffeescript is the most straightforward syntax of any lang I have come in contact with

[01:27] <ingy> it just js minus a ton of syntax :)

[01:27] <ingy> https://testml-lang.github.io/testml/?type=example&name=import&view=mocha is pretty cool

[01:27] *** MasterDuke joined
[01:29] <ingy> I had to make the compiler API take an Import callback to do imports in the brower

[01:30] <ingy> p6 tests all work except haven't seen this before: https://travis-ci.org/testml-lang/testml/builds/382969421#L787

[01:31] <ingy> don't get that locally :\

[01:33] <timotimo> m: sub it-fails { fail "oh no" }; my $a = it-fails; use nqp; for ^100 { nqp::force_gc }

[01:33] <camelia> rakudo-moar 27e8dab9f: ( no output )

[01:33] <timotimo> er, of course

[01:33] <timotimo> m: sub it-fails { fail "oh no" }; my $a = it-fails; $a = Nil; use nqp; for ^100 { nqp::force_gc }

[01:33] <camelia> rakudo-moar 27e8dab9f: ( no output )

[01:33] <timotimo> ...

[01:33] <timotimo> not helpful

[01:34] <timotimo> oh, i really need to go, sorry; that looks like it comes from the periphery of run-time loading of modules

[01:35] <ingy> thanks for your help!

[01:47] *** ilbot3 left
[01:50] *** notostraca is now known as TEttinger

[01:57] *** ilbot3 joined
[01:57] *** ChanServ sets mode: +v ilbot3

[01:58] *** Qwerasd joined
[01:59] *** mcmillhj left
[02:00] <ingy> timotimo: ironically I didn't get those p6 warns on a subsequent run

[02:01] <ingy> P6 CAN HAZ GHOZTZ!!!

[02:03] *** Qwerasd left
[02:05] *** comborico1611 left
[02:32] *** Qwerasd_ joined
[02:43] *** ChoHag left
[02:50] *** pilne left
[02:53] *** aborazmeh joined
[02:53] *** aborazmeh left
[02:53] *** aborazmeh joined
[02:58] *** ChoHag joined
[03:24] *** kurahaupo_ is now known as kurahaupo

[03:26] *** Qwerasd_ left
[03:29] <ingy> does perl6 look for Foo.pm6 before Foo.pm?

[03:29] *** ChoHag left
[03:31] <MasterDuke> looks like yeah

[03:32] *** molaf joined
[03:33] <MasterDuke> https://github.com/rakudo/rakudo/blob/master/src/core/CompUnit/Repository/FileSystem.pm6#L9 and https://github.com/rakudo/rakudo/blob/master/src/core/CompUnit/Repository/FileSystem.pm6#L45-L49

[03:36] <ktown> raschipi: https://github.com/ktown007/perl6-terminal-asciisketch

[03:38] <ingy> MasterDuke: thx

[03:39] <MasterDuke> np

[03:51] *** xtreak joined
[03:53] *** mcmillhj joined
[03:53] <ingy> timotimo: got it all working: https://travis-ci.org/testml-lang/testml/builds/383004625  (Passing 5 languages including perl6)

[03:55] *** Qwerasd joined
[04:00] *** MasterDuke left
[04:01] *** eliasr left
[04:05] *** n0tjack joined
[04:08] *** Qwerasd_ joined
[04:08] *** Qwerasd_ left
[04:09] *** Qwerasd_ joined
[04:12] *** Qwerasd left
[04:12] *** Qwerasd_ left
[04:12] *** Qwerasd joined
[04:26] <Qwerasd> How do I add a catch for errors in a thread so I can get a stacktrace?

[04:26] *** psychoslave joined
[04:26] <Qwerasd> An error is occurring but all it says is "No exception handler located for catch" and then a stacktrace that points to a bunch of internals

[04:30] *** mcmillhj left
[04:34] <ktown> Qwerasd: try --ll-exception

[04:34] <Qwerasd> I wrapped it in a try/catch and found the error.

[04:36] *** n0tjack left
[04:37] *** aborazmeh left
[04:40] *** curan joined
[04:41] *** molaf left
[04:45] *** Actualeyes joined
[05:05] *** jmerelo joined
[05:06] *** n0tjack joined
[05:08] *** Qwerasd left
[05:10] *** sauvin joined
[05:15] *** Qwerasd joined
[05:18] <Geth> ¦ doc: 8cd8ed0dfc | (JJ Merelo)++ | doc/Language/5to6-nutshell.pod6

[05:18] <Geth> ¦ doc: Finish rewriting of ref/deref section closes #1081

[05:18] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8cd8ed0dfc

[05:18] <synopsebot> Link: https://doc.perl6.org/language/5to6-nutshell

[05:20] *** sno left
[05:21] *** xtreak left
[05:24] *** xtreak joined
[05:24] *** shareable6 left
[05:25] <Geth> ¦ doc: 8a90a8f9ed | (JJ Merelo)++ | doc/Language/operators.pod6

[05:25] <Geth> ¦ doc: Reviews relationship between ~~ and ACCEPTS.

[05:25] <Geth> ¦ doc: 

[05:25] <Geth> ¦ doc: Right now there is only a short definition in the first, and a pointer

[05:25] <Geth> ¦ doc: to the last. It's nice to have the docs for ~~, since it's a single

[05:25] <synopsebot> Link: https://doc.perl6.org/language/operators

[05:25] <Geth> ¦ doc: point of entry; `ACCEPTS` page is generated from many pages. So I

[05:25] <Geth> ¦ doc: would say it's better to close #1913, since it's not indexed and looks

[05:25] <Geth> ¦ doc: like a sufficiently good reference.

[05:25] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8a90a8f9ed

[05:39] *** skids left
[05:45] <Geth> ¦ doc: a82a2d89f3 | (JJ Merelo)++ | assets/sass/style.scss

[05:45] <Geth> ¦ doc: Makes no-toc body wider closes #2000

[05:45] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a82a2d89f3

[05:50] *** Qwerasd left
[05:52] *** n0tjack left
[05:53] *** psychoslave left
[05:57] *** wamba joined
[06:07] *** john_parr left
[06:20] *** ChoHag joined
[06:20] *** shareable6 joined
[06:29] <Geth> ¦ doc: JJ self-unassigned Roadmap for our language/ docs https://github.com/perl6/doc/issues/114

[06:29] <Geth> ¦ doc: JJ self-assigned Roadmap for our language/ docs https://github.com/perl6/doc/issues/114

[06:29] <jmerelo> That was done only to draw your attention towards The 1000 Days Old Issue.

[06:30] *** sno joined
[06:32] *** darutoko joined
[06:40] <Geth> ¦ doc: 8fa48b4573 | (JJ Merelo)++ | 2 files

[06:40] <Geth> ¦ doc: Adds data structures

[06:40] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8fa48b4573

[06:40] <Geth> ¦ doc: 001cbdd9ad | (JJ Merelo)++ | doc/Language/structures.pod6

[06:40] <Geth> ¦ doc: Laying out the general structure

[06:40] <synopsebot> Link: https://doc.perl6.org/language/structures

[06:40] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/001cbdd9ad

[06:40] <Geth> ¦ doc: a553b88e95 | (JJ Merelo)++ | doc/Language/structures.pod6

[06:40] <Geth> ¦ doc: Inserts TBD

[06:40] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a553b88e95

[06:42] *** wamba left
[06:47] <Geth> ¦ doc: 1def611870 | (JJ Merelo)++ | doc/Language/iterating.pod6

[06:47] <Geth> ¦ doc: Creates the iterating language page

[06:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1def611870

[06:47] <Geth> ¦ doc: bba739df25 | (JJ Merelo)++ | doc/Language/iterating.pod6

[06:47] <synopsebot> Link: https://doc.perl6.org/language/iterating

[06:47] <Geth> ¦ doc: Refines general structure

[06:47] <Geth> ¦ doc: 

[06:47] <Geth> ¦ doc: This (and the previous commits) refer to #114. This one takes a hint

[06:47] <Geth> ¦ doc: from https://perl6advent.wordpress.com/2009/12/07/day-7-looping-for-fun-and-profit/

[06:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/bba739df25

[06:51] *** robertle_ joined
[06:52] *** shareable6 left
[06:57] *** domidumont joined
[07:01] *** psychoslave joined
[07:03] *** domidumont left
[07:03] *** dominix joined
[07:04] *** domidumont joined
[07:13] *** domidumont left
[07:26] *** john_parr joined
[07:28] <dominix> do domeone know of a permutation method of a list ?

[07:28] <dominix> something inspired by https://docstore.mik.ua/orelly/perl4/cook/ch04_21.htm

[07:29] <lookatme> m: (1, 2, 3).permutation.say

[07:29] <camelia> rakudo-moar 27e8dab9f: OUTPUT: «No such method 'permutation' for invocant of type 'List'. Did you mean 'permutations'?␤  in block <unit> at <tmp> line 1␤␤»

[07:29] <lookatme> m: (1, 2, 3).permutations.say

[07:29] <camelia> rakudo-moar 27e8dab9f: OUTPUT: «((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1))␤»

[07:29] <lookatme> dominix, permutation is a built-in method 

[07:31] <dominix> nice, thanks, I am amazed everytime I look at this langage

[07:32] <lookatme> welcome :)

[07:32] *** wamba joined
[07:34] <jmerelo> On overriding method calls and creating your very own NYI exception https://stackoverflow.com/questions/50503564/overriding-method-call-operator-or-some-other-way-to-catch-method-name-resolutio

[07:35] <lookatme> dominix, anyway, if you can, implement that permutation algorithm in Perl 6 is a good practice

[07:41] *** ChoHag_ joined
[07:41] *** ChoHag left
[07:44] <lizmat> jmerelo: answered  :-)

[07:44] <yoleaux> 23 May 2018 12:56Z <brrt> lizmat: can you do a bechmark with moarvm branch 'jit-stack-walker'

[07:44] *** xtreak left
[07:46] *** araujo left
[07:47] *** xtreak joined
[07:47] <jmerelo> lizmat: you're amazing. Thanks!

[07:47] *** xtreak left
[07:48] *** shareable6 joined
[07:48] *** ChanServ sets mode: +v shareable6

[07:48] *** HaraldJoerg joined
[07:52] <Geth> ¦ doc: b7245599c3 | (JJ Merelo)++ | doc/Language/nativetypes.pod6

[07:52] <Geth> ¦ doc: Creates native types page refs #114

[07:52] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b7245599c3

[07:52] <Geth> ¦ doc: 74a0051dd2 | (JJ Merelo)++ | 2 files

[07:52] <Geth> ¦ doc: Drafts general structure of nativetypes page

[07:52] <synopsebot> Link: https://doc.perl6.org/language/nativetypes

[07:52] <Geth> ¦ doc: 

[07:52] <Geth> ¦ doc: And improves a bit the other data structures page. Refs #114, but also #2051

[07:52] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/74a0051dd2

[07:52] <Geth> ¦ doc: 8e6753b138 | (JJ Merelo)++ | doc/Type/X/NYI.pod6

[07:52] <synopsebot> Link: https://doc.perl6.org/type/X::NYI

[07:52] <Geth> ¦ doc: Documents X::NYI constructor and methods

[07:52] <Geth> ¦ doc: 

[07:52] <Geth> ¦ doc: Closes #2052

[07:52] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8e6753b138

[08:01] <Geth> ¦ doc: 79fb35e76e | (JJ Merelo)++ | assets/sass/style.scss

[08:01] <Geth> ¦ doc: Disables max-width for no-toc pages closes #2000

[08:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/79fb35e76e

[08:06] *** shareable6 left
[08:08] *** scimon joined
[08:28] *** domidumont joined
[08:31] <Geth> ¦ doc: cce30bc145 | (JJ Merelo)++ | doc/Language/hashmap.pod6

[08:31] <Geth> ¦ doc: Creates hashmap page refs #114

[08:31] <Geth> ¦ doc: 

[08:31] <Geth> ¦ doc: Also refs #1682, which will be the fallback issue when #114 is closed.

[08:31] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/cce30bc145

[08:31] <synopsebot> Link: https://doc.perl6.org/language/hashmap

[08:31] <Geth> ¦ doc: 07bd8264bb | (JJ Merelo)++ | doc/Language/system.pod6

[08:31] <Geth> ¦ doc: Stub for system page

[08:31] <synopsebot> Link: https://doc.perl6.org/language/system

[08:31] <Geth> ¦ doc: 

[08:31] <Geth> ¦ doc: With

[08:31] <Geth> ¦ doc: https://stackoverflow.com/questions/29547490/how-can-i-run-external-programs-using-perl-6-e-g-like-system-in-perl-5

[08:31] <Geth> ¦ doc: that could be very helpful. Refs #114

[08:31] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/07bd8264bb

[08:31] <Geth> ¦ doc: 4f146f5d50 | (JJ Merelo)++ | assets/sass/style.scss

[08:31] <Geth> ¦ doc: Not so !important, closes #2000

[08:31] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4f146f5d50

[08:31] <Geth> ¦ doc: a88d50da61 | (JJ Merelo)++ | doc/Language/math.pod6

[08:31] <Geth> ¦ doc: Creates last of the pages for #114, on math

[08:31] <Geth> ¦ doc: 

[08:31] <Geth> ¦ doc: Now let's do what needs TBD

[08:31] <synopsebot> Link: https://doc.perl6.org/language/math

[08:31] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a88d50da61

[08:37] *** xtreak joined
[08:41] *** HaraldJoerg left
[08:46] <jmerelo> briandfoy wants us to update the answer to this question in SO https://stackoverflow.com/questions/2666428/what-is-the-current-state-of-perl-6

[08:47] <jmerelo> I would do it, but I still have to unlock the "Answer something without being voted down by briandfoy" badge. :-)

[08:48] *** eliasr joined
[08:48] <donpdonp> first comment: read planet6! curl: (6) Could not resolve host: planetsix.perlfoundation.org. doh!

[08:59] *** dominix left
[08:59] *** rindolf joined
[09:01] <jmerelo> donpdonp: you can probably edit the answers too... 

[09:01] <jmerelo> donpdonp: although I wonder if the best course of action would not be to just close it and make a 2018 edition of same...

[09:02] *** shareable6 joined
[09:02] *** ChanServ sets mode: +v shareable6

[09:06] *** enheh_ joined
[09:06] *** enheh left
[09:06] *** dpk left
[09:06] *** camelia left
[09:07] *** cpage_ joined
[09:07] *** bartolin left
[09:07] *** Bucciarati left
[09:07] *** S007 left
[09:08] *** nine left
[09:08] *** avar left
[09:08] *** obfusk left
[09:08] *** yoleaux left
[09:08] *** xiaomiao left
[09:08] *** esh left
[09:09] *** cpage left
[09:09] *** cpage_ is now known as cpage

[09:10] *** w_richard_w left
[09:13] *** xiaomiao joined
[09:13] *** dpk joined
[09:14] *** grumble left
[09:15] *** Grauwolf joined
[09:16] *** bartolin joined
[09:16] *** obfusk joined
[09:17] *** domm joined
[09:17] *** S007 joined
[09:23] *** Zoffix joined
[09:23] <Zoffix> m: sub it-fails { my $z = Failure.new; Nil }; use nqp; for ^100 { it-fails;  }; nqp::force_gc; sleep 1

[09:23] <evalable6> Zoffix, rakudo-moar 472f6e484: OUTPUT: «WARNING: unhandled Failure detected in DESTROY. If you meant to ignore it, you can mark it as handled by calling .Bool, .so, .not, or .defined methods. The Failure was:␤Failed␤  in block <unit> at /tmp/266xO6t_wU line 1␤␤»

[09:25] <Zoffix> ingy: ^ normally you get those when an unhandled Failure object gets GCed ('cause often that's an indication your program ignores some failure mode accidentally). Though in your case it looks like it might be R#1515

[09:25] <synopsebot> R#1515 [open]: https://github.com/rakudo/rakudo/issues/1515 Erroneous unhandled failures for runtime module loading

[09:26] <Zoffix> Qwerasd, you don't need to wrap into `try` and can just stick a CATCH { default { .... } } at the outer most scope of a threaded block 

[09:27] <Summertime> pardon me for saying, but thanks for making? the perl6 alerts site btw, its something that every language should have

[09:27] <Zoffix> Thanks. Glad someone finds it useful.

[09:30] *** esh joined
[09:30] *** torbjorn left
[09:35] *** literal joined
[09:36] *** avar joined
[09:36] *** avar left
[09:36] *** avar joined
[09:41] *** grumble joined
[09:44] <AlexDaniel> Summertime: speaking of which, do you expect alerts to posted before the release or after? For example, 2018.05 will come with this change:

[09:44] <AlexDaniel> m: say %<a 1 b 2 c 3>.keys

[09:44] <evalable6> AlexDaniel, rakudo-moar 472f6e484: OUTPUT: «Use of Nil in string context␤()␤  in block <unit> at /tmp/8NHUWY7um5 line 1␤Use of Nil in string context␤  in block <unit> at /tmp/8NHUWY7um5 line 1␤Use of Nil in string context␤  in block <unit> at /tmp/8NHUWY7um5 line 1␤»

[09:44] <AlexDaniel> m: say (%<a 1 b 2 c 3>).keys

[09:44] <evalable6> AlexDaniel, rakudo-moar 472f6e484: OUTPUT: «Use of Nil in string context␤()␤  in block <unit> at /tmp/qcnRS3Mp5H line 1␤Use of Nil in string context␤  in block <unit> at /tmp/qcnRS3Mp5H line 1␤Use of Nil in string context␤  in block <unit> at /tmp/qcnRS3Mp5H line 1␤»

[09:44] <AlexDaniel> gah…

[09:44] <AlexDaniel> not that

[09:44] <Summertime> :thinking:

[09:45] <Summertime> I think, don't make a promise

[09:45] <AlexDaniel> m: say %(<a 1 b 2 c 3>).keys

[09:45] <evalable6> AlexDaniel, rakudo-moar 472f6e484: OUTPUT: «(b a c)␤»

[09:45] <AlexDaniel> m: say %(<a 1 b 2 c 3>).keys

[09:45] <evalable6> AlexDaniel, rakudo-moar 472f6e484: OUTPUT: «(c a b)␤»

[09:45] <AlexDaniel> ↑ this is now random

[09:45] <AlexDaniel> the order I mean

[09:45] *** wamba left
[09:45] <AlexDaniel> IMO that's alert-worthy, just to make it easier for people

[09:46] <Summertime> there are some things which are going to be obvious to alert about, some things are going to be someone coming in with their project on fire (because why not run latest without testing!) and you'll go "oh that should of been alerted too"

[09:46] <AlexDaniel> if I post the alert now, it's somewhat useless as you'd need to build blead rakudo to test it out…

[09:46] <AlexDaniel> if I post after the release, then someone can say that we could've alerted earlier, so why didn't we

[09:47] <Summertime> but an alert now will also act as an appetizer!

[09:48] <Summertime> it seems silly to wait for news to go through all the blogs like hash randomizing has done now, and then have an alert pop up, so I'd say as soon as you think of it would be best

[09:48] *** broquaint joined
[09:48] *** Bucciarati joined
[09:51] <Summertime> as long as its searchable by version affected, it shouldn't be a problem, updating a project -> go to alerts -> search for $upgrading-from <= $alert-version <= $upgrading-to, would probably be the most common use

[09:56] <Summertime> hmm, the alerts api documentation page seems to be outputting blank though, might be my browser though

[09:59] <AlexDaniel> Summertime: I don't think it's documentation

[09:59] <AlexDaniel> but: https://alerts.perl6.org/api/v1/all

[10:02] <Summertime> hmm, I wonder how much of a pain it would be to hook that up with twilio or something

[10:04] *** grumblr joined
[10:11] *** markong joined
[10:12] <Zoffix> looks like documentation page gives a 500

[10:13] <Zoffix> Type check failed in binding to parameter '$raw'; expected Str but got WhateverCode ({ ... })

[10:13] <Zoffix>   in sub escape-html at /home/p6lert/rakudo/install/share/perl6/site/sources/3925AABD73F7CAF1F00A31AD4FD3D188A496C03E (HTML::Escape) line 4

[10:14] *** grumble left
[10:14] *** grumblr is now known as grumble

[10:16] <Zoffix> ah, it's from the time when I messed up currying

[10:16] <Zoffix> *upgrades rakudo for p6lert service*

[10:16] <Zoffix> c: 2018.03 sub foo (Str $x){ dd $x }; (*.[0].Str.&foo)([42])

[10:16] <committable6> Zoffix, ¦2018.03: «Type check failed in binding to parameter '$x'; expected Str but got WhateverCode ({ ... })␤  in sub foo at /tmp/9IRR65HhZv line 1␤  in block <unit> at /tmp/9IRR65HhZv line 1␤␤ «exit code = 1»»

[10:18] *** p6lert left
[10:21] *** nine joined
[10:22] *** camelia joined
[10:24] *** ChanServ sets mode: +v camelia

[10:28] *** p6lert joined
[10:32] <Zoffix> p6lert: help

[10:32] <p6lert> Zoffix, https://github.com/perl6/alerts P6lert commands: [insta]?add ALERT, update ID ALERT, delete ID; ALERT format: ['severity:'\S+]? ['affects:['<-[\]]>+']']? ALERT_TEXT

[10:32] <Zoffix> Summertime: it's working now: https://alerts.perl6.org/api

[10:32] <Summertime> \o/

[10:32] <lizmat> afk for a few hours&

[10:33] <Zoffix> Summertime: as for hooking up stuff... Well, the code's here: https://github.com/perl6/alerts

[10:34] *** zakharyas joined
[10:37] *** Zoffix left
[11:02] <jmerelo> Another question in SO, about declaration and assignment of variables https://stackoverflow.com/questions/50507696/declaration-and-assignment-of-variables-silently-dropping-of-assigned-values

[11:03] <jmerelo> I've been doing several tests on the #whateverable channel about this, just in case you wan to check them out.

[11:04] *** yoleaux joined
[11:04] *** ChanServ sets mode: +v yoleaux

[11:06] *** Actualeyes left
[11:09] <Geth> ¦ doc: 29f856f7d4 | (JJ Merelo)++ | doc/Language/math.pod6

[11:09] <Geth> ¦ doc: Adds set algebra laws

[11:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/29f856f7d4

[11:09] <Geth> ¦ doc: 717f9bda19 | (JJ Merelo)++ | 2 files

[11:09] <Geth> ¦ doc: Adds set algebra to the Math page

[11:09] <synopsebot> Link: https://doc.perl6.org/language/math

[11:09] <Geth> ¦ doc: 

[11:09] <Geth> ¦ doc: Which might or might not be what someone 1000 days ago had in mind,

[11:09] <Geth> ¦ doc: but it's at least what I would like to find if I go looking for math

[11:09] <Geth> ¦ doc: stuff in Perl 6. This refs #114, but still a lot TBD.

[11:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/717f9bda19

[11:18] *** domidumont left
[11:20] *** raynold left
[11:20] *** domidumont joined
[11:24] *** wamba joined
[11:26] *** ChoHag_ left
[11:26] *** ChoHag joined
[11:38] *** itaipu joined
[11:42] *** wamba left
[11:44] *** n0tjack joined
[12:01] *** mahafyi joined
[12:12] *** raschipi joined
[12:12] *** lalitmee joined
[12:14] *** xtreak left
[12:18] *** stmuk joined
[12:19] *** raschipi left
[12:19] *** domidumont1 joined
[12:20] *** n0tjack left
[12:20] *** stmuk_ left
[12:22] *** domidumont left
[12:24] *** wamba joined
[12:28] *** jferrero joined
[12:29] *** raschipi joined
[12:34] *** scimon left
[12:34] *** scimon joined
[12:35] <Geth> ¦ doc: 4be7e50cb0 | (Luca Ferrari)++ | doc/Type/Junction.pod6

[12:35] <Geth> ¦ doc: Introduce junction infix ~ example.

[12:35] <Geth> ¦ doc: 

[12:35] <Geth> ¦ doc: See issue #2053

[12:35] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4be7e50cb0

[12:35] <synopsebot> Link: https://doc.perl6.org/type/Junction

[12:41] *** shareable6 left
[12:43] *** domidumont joined
[12:44] *** enheh_ left
[12:45] *** enheh_ joined
[12:45] *** domidumont1 left
[12:46] *** scimon left
[12:46] *** scimon joined
[12:46] *** robertle left
[12:49] *** torbjorn joined
[12:53] *** robertle joined
[12:54] *** pmurias joined
[12:57] *** scimon left
[13:01] *** HaraldJoerg joined
[13:05] *** MilkmanDan left
[13:05] *** athenot joined
[13:06] *** MilkmanDan joined
[13:10] *** lizmat left
[13:12] *** enheh__ joined
[13:13] *** jmerelo left
[13:14] *** enheh_ left
[13:15] *** Actualeyes joined
[13:24] <mahafyi> Hello. I am trying to do this -> https://pastebin.com/VN2wviF8 with File::Find. Can someone tell what eagerly vs lazily create list means please?

[13:24] <moritz> mahafyi: a lazy list is one that is created as you consume it

[13:24] *** Actualeyes left
[13:25] <moritz> mahafyi: and an eager list is one that is created fully even before you start to use it

[13:25] *** lizmat joined
[13:25] <mahafyi> moritz : thanks.

[13:31] *** skids joined
[13:33] *** itaipu_ joined
[13:35] *** lucasb joined
[13:36] *** lalitmee left
[13:36] *** shareable6 joined
[13:36] *** molaf joined
[13:37] *** itaipu left
[13:37] *** curan left
[13:38] *** skids left
[13:39] <mahafyi> i simply cannot understand lazy list, lol. Can't get how it works at all..anyways, what i am looking at first is: (see earlier pastebin) if i need to use multiple regexes in the File::Find arg 'name', is it possible at all

[13:41] <raschipi> mahafyi: Can't it be a regex with an alternation?

[13:41] <mahafyi> i guess in this specific case, i can think like this: can we ouse an OR condition in regex (probably, it is not the correct way to epxress the question)

[13:41] <mahafyi> raschipi, thanks, i guess i have the term to google for now, lol 

[13:41] <raschipi> alternation means OR

[13:42] <raschipi> Just another way to say what you said right after me.

[13:42] <raschipi> Can't you use multiple File::Find instances?

[13:42] *** itaipu_ left
[13:43] *** itaipu joined
[13:43] <mahafyi> yes, thats what i have in a pseudocode now, run it twice one after another

[13:44] <raschipi> Then put the two lists togheter.

[13:44] <mahafyi> it may not be needed, i just need to concatenate all the files in each list into two separate files, one for each list

[13:46] <mahafyi> each file will have headers, what is the equivalent of sed,  in order to do -> (I need to delete the header lines - along with the carriage return)

[13:46] <raschipi> You could also try to give it a junction, something like (/regex1/, /regex2/).any

[13:47] <raschipi> or  /regex1/|/regex2/

[13:48] <mahafyi> in which case, i will need to recurse the list elements with a IF condition i guess

[13:54] <mahafyi> there is such a tremendous knowledge base inside any one thing! its very dense, if that is the correct word. I guess one can eventually reach a point when the thing needed will come like a reflex. but now its reading 90% working 10% lol.

[13:54] <timotimo> i'd rather read a thousand lines of documentation and write one line of code than reading just one line of documentation and have to write a thousand lines of code for the same result :D

[13:57] <mahafyi> sure, i cannot remember which , i will find it, i wrote some several dozen lines for a rosetta code problem, and find a one liner in answer,

[13:57] <timotimo> yeah, especially when it comes to not having to write out loops, perl6 is very strong

[13:57] <timotimo> not as strong as languages like APL or J, though

[13:57] *** MilkmanDan left
[13:58] <mahafyi> good to know. I have never heard of APL or J until now...

[13:59] *** MilkmanDan joined
[14:07] *** eater left
[14:11] <benjikun> J is a weird language

[14:11] <benjikun> I looked at it years ago

[14:12] <benjikun> interesting for sure

[14:13] <benjikun> Pretty crazy with what you can do with one line of J

[14:16] <raschipi> very terse, moreso than APL, despite using multiple symbols

[14:20] <benjikun> terse?

[14:21] <moritz> compact

[14:21] <moritz> short programs

[14:22] *** rindolf left
[14:22] *** eater joined
[14:22] <benjikun> ah

[14:22] <benjikun> yeah

[14:26] *** itaipu_ joined
[14:28] *** stmuk_ joined
[14:29] *** stmuk left
[14:29] *** itaipu left
[14:31] *** domidumont1 joined
[14:34] *** domidumont left
[14:35] *** lucasb left
[14:37] *** domidumont1 left
[14:39] *** domidumont joined
[14:44] *** rindolf joined
[14:47] <mahafyi> what do i do for: find and delete all lines that matches a regex, but ignore the first. do i need to recurse the whole file or is there a better way to do ? the file may be over a million lines.

[14:48] <raschipi> Are you doing it with a loop?

[14:48] *** lucasb joined
[14:49] <mahafyi> i havent yet written ? i am planning what to write before i write. Lets say two csv files with headers are concatanated, i need to delete the header lines after.

[14:49] <raschipi> m: for ^10 {once next; .say}

[14:49] <camelia> rakudo-moar 8a62e5e08: OUTPUT: «1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[14:49] <mahafyi> so , i can go thru in a looop, line by line, or i can do something like, what i'd do with sed from command line.

[14:50] <raschipi> either are possible

[14:50] <timotimo> don't forget you'll likely have to output the first line back so it doesn't disappear

[14:50] <mahafyi> timotimo, right, delete all the headers, except the first..

[14:51] <raschipi> m: (^10).tail(*-1).say

[14:51] <camelia> rakudo-moar 8a62e5e08: OUTPUT: «(1 2 3 4 5 6 7 8 9)␤»

[14:51] <raschipi> tail(*-1) skips the first item in a list.

[14:52] <mahafyi> which means each line in the file has to be in a list? 

[14:52] <timotimo> m: <foo bor baz quux boot shoot bleep>.grep({ not $++ or /o/ }).say

[14:52] <camelia> rakudo-moar 154d98551: OUTPUT: «(foo bor boot shoot)␤»

[14:52] <timotimo> m: <foo bor baz quux boot shoot bleep>.grep({ not $++ or /<-[o]>/ }).say

[14:52] <camelia> rakudo-moar 154d98551: OUTPUT: «(foo bor baz quux boot shoot bleep)␤»

[14:52] <timotimo> hold on ..

[14:52] <timotimo> m: <foo bor baz quux boot shoot bleep>.grep({ not $++ or m/<-[o]>/ }).say

[14:52] <camelia> rakudo-moar 154d98551: OUTPUT: «(foo bor baz quux boot shoot bleep)␤»

[14:52] <timotimo> m: <foo bor baz quux boot shoot bleep>.grep({ (not $++) || m/<-[o]>/ }).say

[14:52] <camelia> rakudo-moar 154d98551: OUTPUT: «(foo bor baz quux boot shoot bleep)␤»

[14:52] <timotimo> ah, of course

[14:53] <timotimo> m: <foo bor baz quux boot shoot bleep>.grep({ (not $++) || !m/o/ }).say

[14:53] <camelia> rakudo-moar 154d98551: OUTPUT: «(foo baz quux bleep)␤»

[14:53] <timotimo> ^- remove all entries that have an o in them, except the very first

[14:54] <timotimo> demorgan's law lets you make it less strange

[14:54] <mahafyi> timotimo : ok great. 

[14:54] <timotimo> m: <foo bor baz quux boot shoot bleep>.grep({ not ($++ && m/o/) }).say

[14:54] <camelia> rakudo-moar 154d98551: OUTPUT: «(foo baz quux bleep)␤»

[14:54] <timotimo> but you'll probably want map, not grep

[14:54] <timotimo> i.e. do changes to lines, not just throw lines out

[14:55] <timotimo> m: <foo bor baz quux boot shoot bleep>.map({ $++ ?? S/o/AAAAA/ !! $_ }).say

[14:55] <camelia> rakudo-moar 154d98551: OUTPUT: «(foo bAAAAAr baz quux bAAAAAot shAAAAAot bleep)␤»

[14:55] <timotimo> replace the first o with AAAAA except if it's the very first line

[14:55] <timotimo> well, entry, not line. you'll have to do line-splitting yourself

[14:56] <raschipi> .lines isn't enough?

[14:56] <timotimo> it is enough

[14:57] <timotimo> i just meant my code doesn't do anything regarding lines

[14:57] <timotimo> it relies on the list that comes in to already be whatever you need

[14:57] <raschipi> right

[14:57] <mahafyi> wow, ok let me go thru this

[14:57] <timotimo> $++ is just a cute little trick for "false one time, then true every other itme"

[14:59] <timotimo> or you can split the list up front into "first element" and "all other elements" and only .map on the "all other elements" list

[14:59] <timotimo> but that's probably also awkward

[15:00] *** enheh__ left
[15:00] <mahafyi> I suppose we can use sed from inside a program?

[15:00] *** enheh__ joined
[15:01] <timotimo> you can if you want to

[15:02] <lucasb> m: for \(1,2,3,:a,:b).item { .say }  # why?

[15:02] <camelia> rakudo-moar 154d98551: OUTPUT: «1␤2␤3␤»

[15:04] <tbrowder_>  question: why are backticks used in markdown and other text files? are they re

[15:05] <lucasb> it's code markup

[15:06] <tbrowder_> are they treated differently than single right quotes?

[15:06] <timotimo> yes, they are

[15:06] <tbrowder_> what is their effect in, say, markdown?

[15:07] <tbrowder_> i understand the effect in shell...

[15:08] <timotimo> markdown turns `foo` into <code>foo</code> or something like that

[15:08] <tbrowder_> treatment in pod 6, perl 6?

[15:08] <raschipi> in markdow it renders the text in monospace font and also keeps spaces intact (markdown usually supresses multiple spcaes)

[15:08] <tbrowder_> ah, right, i forgot, thinking of three backticks for a code block

[15:09] *** zakharyas left
[15:09] <timotimo> m: say `foo bar`

[15:09] <camelia> rakudo-moar 154d98551: OUTPUT: «5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 3say7⏏5 `foo bar`␤Bogus postfix␤at <tmp>:1␤------> 3say 7⏏5`foo bar`␤    expecting any of:␤        infix␤        infix stopper␤        postfi…»

[15:10] *** skids joined
[15:10] <timotimo> perl6 doesn't let you use ` as quoting without q

[15:10] <tbrowder_> ok, keeping multiple spaces in md

[15:10] <timotimo> m: q`backticks are cool`

[15:10] <camelia> rakudo-moar 154d98551: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant string "backticks are cool" in sink context (line 1)␤»

[15:10] <timotimo> m: say q`backticks are cool`

[15:10] <camelia> rakudo-moar 154d98551: OUTPUT: «backticks are cool␤»

[15:10] <timotimo> m: say "foo bar" ~~ s:g`o`i`

[15:10] <camelia> rakudo-moar 154d98551: OUTPUT: «Cannot modify an immutable Str (foo bar)␤  in block <unit> at <tmp> line 1␤␤»

[15:10] <timotimo> m: say "foo bar" ~~ S:g`o`i`

[15:10] <camelia> rakudo-moar 154d98551: OUTPUT: «Potential difficulties:␤    Smartmatch with S/// is not useful. You can use given instead: S/// given $foo␤    at <tmp>:1␤    ------> 3say "foo bar" ~~ 7⏏5S:g`o`i`␤False␤»

[15:10] <timotimo> i'm no good at example code today

[15:11] <timotimo> m: $_ = "foo bar"; s:g`o`i`; .say

[15:11] <camelia> rakudo-moar 154d98551: OUTPUT: «fii bar␤»

[15:11] <tbrowder_> they may be cool, but: xtra typing and backticks are hard to use on typical apple virutual keyboards

[15:12] <tbrowder_> s/virutual/virtual/

[15:13] <tbrowder_> timotimo: thnx

[15:14] <tbrowder_> raschipi: thnx

[15:20] *** domidumont left
[15:20] *** wamba left
[15:23] <raschipi> lucasb: why did you add an .item there?

[15:24] <raschipi> m: .say for \(1,2,3,:a,:b)

[15:24] <camelia> rakudo-moar 154d98551: OUTPUT: «1␤2␤3␤»

[15:25] <timotimo> m: .say for $(\(1,2,3,:a,:b))

[15:25] <camelia> rakudo-moar 154d98551: OUTPUT: «1␤2␤3␤»

[15:25] <timotimo> m: .say for (my $ = \(1,2,3,:a,:b))

[15:25] <camelia> rakudo-moar 154d98551: OUTPUT: «\(1, 2, 3, :a, :b)␤»

[15:25] <lucasb> to show that even with a .item it gets iterated over, while (1,2,3).item and [1,2,3].item doesn't

[15:26] <raschipi> m: .say for $(1,2,3)

[15:26] <camelia> rakudo-moar 154d98551: OUTPUT: «(1 2 3)␤»

[15:26] <raschipi> I see. It is indeed strange.

[15:26] <lucasb> raschipi: thanks for agreeing :)

[15:26] <raschipi> m: .say for $(\(1,2,3))

[15:26] <camelia> rakudo-moar 154d98551: OUTPUT: «1␤2␤3␤»

[15:27] *** robertle_ left
[15:30] <raschipi> m: .say for \(1,2,3),

[15:30] <camelia> rakudo-moar 154d98551: OUTPUT: «\(1, 2, 3)␤»

[15:31] <raschipi> m: .say for \(1,2,3, :a, :b),

[15:31] <camelia> rakudo-moar 154d98551: OUTPUT: «\(1, 2, 3, :a, :b)␤»

[15:39] *** jmerelo joined
[15:44] *** enheh_ joined
[15:46] *** rindolf left
[15:46] *** enheh__ left
[15:47] *** athenot left
[15:54] *** rindolf joined
[15:54] *** Zoffix joined
[15:55] <Zoffix> lucasb: that's 'cause () and [] are already Iterable, but \() ain't, so it gets made into an Iterable by calling .list, which returns positionals from the capture in non-conted List

[15:56] <Zoffix> m: .say for (\(1, 2, 3) but Iterable)

[15:56] <camelia> rakudo-moar 154d98551: OUTPUT: «1␤2␤3␤»

[15:56] <Zoffix> m: .say for $(\(1, 2, 3) but Iterable)

[15:56] <camelia> rakudo-moar 154d98551: OUTPUT: «Capture+{Iterable}.new(list => (1, 2, 3,))␤»

[15:56] <lucasb> ok. but .item alone wasn't supposed to make it itemized?

[15:58] <Zoffix> lucasb: it did. But a Capture, even an itemized one, isn't an Iterable

[15:58] *** psychoslave left
[16:00] <lucasb> m: class C { method list { 1,2,3 } }; for C.item { .say }

[16:00] <camelia> rakudo-moar 154d98551: OUTPUT: «1␤2␤3␤»

[16:00] * lucasb is confused

[16:01] <timotimo> s: (1, 2, 3), "item", \()

[16:01] <SourceBaby> timotimo, Sauce is at https://github.com/rakudo/rakudo/blob/154d98551/src/core/Iterable.pm6#L16

[16:01] <timotimo> so the default implementation literally just creates a Scalar and puts the object on it, and returns the scalar

[16:01] <raschipi> So it's the Iterable role that interacts with the $() and for receives something different then?

[16:02] <Zoffix> I think it's the Iterable role that makes `for` decide how to loop over it

[16:02] <Zoffix> s: \(), 'map', \(*.say)

[16:02] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/154d98551/src/core/Any-iterable-methods.pm6#L17

[16:02] <lucasb> for the record, things changed here:

[16:02] <lucasb> c: 71160596,71160596^ for \(1,2,3,:a,:b).item { .say }

[16:02] <committable6> lucasb, ¦7116059: «1␤2␤3␤» ¦71160596^: «\(1, 2, 3, :a, :b)␤»

[16:02] <lucasb> https://github.com/rakudo/rakudo/commit/7116059675fa742312ee995f8ff00d64399c883c

[16:03] <lucasb> (well, for the Capture thing)

[16:03] <Zoffix> lucasb: you're calling "item" BEFORE giving `for` a non-Iterable thing.

[16:04] <lucasb> not the general class C { method list {...} } case

[16:04] <Zoffix> It doesn't have any effect on what happens after `for` converts your thing to an Iterable thing

[16:05] *** troys joined
[16:05] <lucasb> ok, I'll get it after a while :)

[16:06] <lucasb> I just think is strange that 'for' tries to make a non-Iterable thing into a Iterable a thing, while (1,2,3).item and [1,2,3].item are really iterable things and 'for' treats as itemized

[16:07] <Zoffix> You put bunch of oranges into a box. Then you put them into a bag and hand it to me, saying "here, eat this". It doesn't look like food, so I have to open up both the bag and the box to get to the oranges and by that time they're not in any boxes, so I eat them one by one.

[16:07] <Geth> ¦ doc: 09767255d5 | (JJ Merelo)++ | doc/Type/Junction.pod6

[16:07] <Geth> ¦ doc: Moving @fluca1978's explanation to a method subsection

[16:07] <Geth> ¦ doc: 

[16:07] <Geth> ¦ doc: So that it can be indexed properly. Also added other two multis that

[16:07] <Geth> ¦ doc: use ~ in a rather more natural way. Closes #2053.

[16:07] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/09767255d5

[16:07] <synopsebot> Link: https://doc.perl6.org/type/Junction

[16:08] *** sno left
[16:08] <Zoffix> With (1, 2, 3).item.... You take a bunch of oranges and put them in a cake and hand it to me, saying "here, eat this". It looks like food, so I eat it without having to get to individual oranges.

[16:10] <Zoffix> s: \(), 'map', \(*.so, :item)

[16:10] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/154d98551/src/core/Any-iterable-methods.pm6#L17

[16:10] <lucasb> Ok, so when someone says they eat a box of chocolates, the haven't literally eated a box :D

[16:10] <lucasb> j/k

[16:10] <lucasb> thanks Zoffix for the patience. I'll eventually get it

[16:15] <Zoffix> oh, whoops replied in the wrong channel

[16:15] <Zoffix> Zoffix │ lucasb: actually my explanation was likely inaccurate

[16:15] <Zoffix> Zoffix │ Looking at p6for desugar, it don't care about Iterable at all: https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L561-L578 

[16:15] <Zoffix> Zoffix │ But, Iterable provides the `.item` method that shoves things into container:

[16:15] <Zoffix> Zoffix │ While \Mu's version is a no-op: https://github.com/rakudo/rakudo/blob/154d98551/src/core/Mu.pm6#L574

[16:15] <Zoffix> m: .say for $ = \(1, 2, 3)

[16:15] <camelia> rakudo-moar 154d98551: OUTPUT: «\(1, 2, 3)␤»

[16:16] <Zoffix> At least now I know I'm good at making shit up in a way that makes sense :D

[16:18] <Zoffix> Ah, now I what I confused it with. It's nodemap/deepmap that care about iterables: https://github.com/rakudo/rakudo/blob/master/src/core/Rakudo/Internals.pm6#L1500

[16:20] *** mahafyi left
[16:22] *** andrzejku joined
[16:24] *** andrzejku_ left
[16:26] *** andrzejku_ joined
[16:29] *** andrzejku left
[16:34] <Zoffix> R#1862

[16:34] <synopsebot> R#1862 [open]: https://github.com/rakudo/rakudo/issues/1862 [@LARRY] Some objects don't .item'ize even though they probably should

[16:34] <Zoffix> lucasb: ^ FYI

[16:39] <raschipi> "zoffixznet opened this Issue 17 seconds from now"

[16:39] <raschipi> Zoffix: can I lend your time-travel machine/device?

[16:39] <Zoffix> I must now kill you. You know too much.

[16:41] <raschipi> I would already be dead if you were to actually kill me.

[16:43] <lucasb> Zoffix++ thanks for the issue

[16:46] <Zoffix> And R#1863 for a potential fix

[16:46] <synopsebot> R#1863 [open]: https://github.com/rakudo/rakudo/pull/1863 Always containerize stuff when asked to with .item

[16:49] *** athenot joined
[16:58] *** pilne joined
[17:01] *** xinming joined
[17:02] *** wamba joined
[17:04] *** xinming_ left
[17:05] *** APic left
[17:05] *** Zoffix left
[17:09] *** ExtraCrispy left
[17:12] *** mempko joined
[17:17] *** domidumont joined
[17:18] <jmerelo> m: my @phis = (2.FatRat, 1 + 1 / * ... *); my @otherphi = (1 - @phis[200], 1 + 1 / * ... *); say @otherphi[^10, |(20, 30 ... 100)]

[17:18] <camelia> rakudo-moar 154d98551: OUTPUT: «((-0.61803398874989484820458683436563811772030918 -0.61803398874989484820458683436563811772030918 -0.61803398874989484820458683436563811772030918 -0.61803398874989484820458683436563811772030918 -0.61803398874989484820458683436563811772030918 -0.618033…»

[17:23] <raschipi> m: say Φ, φ

[17:23] <camelia> rakudo-moar 154d98551: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    Φ used at line 1␤    φ used at line 1␤␤»

[17:28] <jmerelo> m: say $c.^name, " → ", $c for π, τ, e;

[17:28] <camelia> rakudo-moar 154d98551: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$c' is not declared␤at <tmp>:1␤------> 3say 7⏏5$c.^name, " → ", $c for π, τ, e;␤»

[17:28] <jmerelo> m: say .^name, " → ", $_ for π, τ, e;

[17:28] <camelia> rakudo-moar 154d98551: OUTPUT: «Num → 3.141592653589793␤Num → 6.283185307179586␤Num → 2.718281828459045␤»

[17:29] <raschipi> m: my @phis = (2.FatRat, 1 + 1 / * ... *); my @otherphi = (1 - @phis[200], 1 + 1 / * ... *); say @otherphi[1000] # I was talking to timotimo the other day about this. We watched the video that explains why this happens.

[17:29] <camelia> rakudo-moar 154d98551: OUTPUT: «1.6180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911374847540880753868917521266338622235369317931800607667263544333890865959␤»

[17:29] <jmerelo> m: say $_, " → ", $_<> for <π τ e>;

[17:29] <camelia> rakudo-moar 154d98551: OUTPUT: «π → π␤τ → τ␤e → e␤»

[17:30] <jmerelo> m: say $_, " → ", $_.item for <π τ e>;

[17:30] <camelia> rakudo-moar 154d98551: OUTPUT: «π → π␤τ → τ␤e → e␤»

[17:30] <jmerelo> m: say $_, " → ", $_.Num for <π τ e>;

[17:30] <camelia> rakudo-moar 154d98551: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5π' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[17:31] *** athenot_ joined
[17:31] *** athenot left
[17:33] <buggable> New CPAN upload: master.zip by KTOWN https://cpan.metacpan.org/authors/id/K/KT/KTOWN/Perl6/master.zip

[17:36] <raschipi> m: my @phis = (2.FatRat, 1 + 1 / * ... *); my @otherphi = (1 - @phis[200], 1 + 1 / * ... *); say @otherphi[0]; say @otherphi.first( * > 0 )

[17:36] <camelia> rakudo-moar 154d98551: OUTPUT: «-0.61803398874989484820458683436563811772030918␤Attempt to divide 1 by zero using div␤  in block <unit> at <tmp> line 1␤␤»

[17:37] <raschipi> Why does 'first( * > 0 )' atempts a div 0 ?

[17:38] <timotimo> it's probably just eagerifying a Failure from somewhere in there

[17:38] <moritz> raschipi: it's likely some Rat internal code that uses div

[17:38] <raschipi> m: my @phis = (2.FatRat, 1 + 1 / * ... *); my @otherphi = (1 - @phis[200], 1 + 1 / * ... *); say @otherphi[1000] # But this one works

[17:38] <camelia> rakudo-moar 154d98551: OUTPUT: «1.6180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911374847540880753868917521266338622235369317931800607667263544333890865959␤»

[17:38] *** Luneburg joined
[17:38] <timotimo> s: &infix:«>», \(<1/2>, 0)

[17:38] <SourceBaby> timotimo, Sauce is at https://github.com/rakudo/rakudo/blob/154d98551/src/core/Rat.pm6#L261

[17:39] <timotimo> m: my @phis = (2.FatRat, 1 + 1 / * ... *); my @otherphi = (1 - @phis[200], 1 + 1 /

[17:39] <camelia> rakudo-moar 154d98551: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3 my @otherphi = (1 - @phis[200], 1 + 1 /7⏏5<EOL>␤    expecting any of:␤        prefix␤        term␤»

[17:39] <timotimo> derp

[17:39] <timotimo> m: my @phis = (2.FatRat, 1 + 1 / * ... *); my @otherphi = (1 - @phis[200], 1 + 1 / * ... *); for @otherphi { say $_ > 0; CATCH { say $_.perl } }

[17:40] <camelia> rakudo-moar 154d98551: OUTPUT: «(timeout)False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤False␤Fa…»

[17:40] <timotimo> m: my @phis = (2.FatRat, 1 + 1 / * ... *); my @otherphi = (1 - @phis[200], 1 + 1 / * ... *); for @otherphi.head(1000) { .say if $_ > 0; CATCH { say $_.perl } }

[17:40] <camelia> rakudo-moar 154d98551: OUTPUT: «X::Numeric::DivideByZero.new(using => "div", details => Any, numerator => 1)␤Attempt to divide 1 by zero using div␤  in block <unit> at <tmp> line 1␤␤»

[17:40] <Luneburg> "False"

[17:40] <timotimo> m: my @phis = (2.FatRat, 1 + 1 / * ... *); my @otherphi = (1 - @phis[200], 1 + 1 / * ... *); for @otherphi.head(1000) -> $val { $val.say if $val > 0; CATCH { say $val.perl } }

[17:40] <camelia> rakudo-moar 154d98551: OUTPUT: «FatRat.new(1, 0)␤Attempt to divide 1 by zero using div␤  in block <unit> at <tmp> line 1␤␤»

[17:40] <timotimo> well, yeah

[17:40] <timotimo> m: my @phis = (2.FatRat, 1 + 1 / * ... *); my @otherphi = (1 - @phis[200], 1 + 1 / * ... *); for @otherphi.head(1000).kv -> $idx, $val { $val.say if $val > 0; CATCH { say $idx; say $val.perl } }

[17:40] <camelia> rakudo-moar 154d98551: OUTPUT: «202␤Attempt to divide 1 by zero using div␤  in block <unit> at <tmp> line 1␤␤FatRat.new(1, 0)␤»

[17:41] <Luneburg> Guys, could someone take a quick look at my code? I'm having a problem and I'm not sure why

[17:41] <timotimo> m: my @phis = (2.FatRat, 1 + 1 / * ... *); my @otherphi = (1 - @phis[200], 1 + 1 / * ... *); say @otherphi[200..210]>>.perl

[17:41] <camelia> rakudo-moar 154d98551: OUTPUT: «(FatRat.new(-1, 1) FatRat.new(0, 1) FatRat.new(1, 0) FatRat.new(1, 1) FatRat.new(2, 1) FatRat.new(3, 2) FatRat.new(5, 3) FatRat.new(8, 5) FatRat.new(13, 8) FatRat.new(21, 13) FatRat.new(34, 21))␤»

[17:41] <timotimo> Luneburg: sure

[17:42] <Luneburg> timotimo: Cool :D I'll put it in a pastebin

[17:42] *** lucasb left
[17:42] <timotimo> m: my @phis = (2.FatRat, 1 + 1 / * ... *); my @otherphi = (1 - @phis[200], 1 + 1 / * ... *); say @otherphi[190..205]>>.perl

[17:42] <camelia> rakudo-moar 154d98551: OUTPUT: «(FatRat.new(-89, 144) FatRat.new(-55, 89) FatRat.new(-34, 55) FatRat.new(-21, 34) FatRat.new(-13, 21) FatRat.new(-8, 13) FatRat.new(-5, 8) FatRat.new(-3, 5) FatRat.new(-2, 3) FatRat.new(-1, 2) FatRat.new(-1, 1) FatRat.new(0, 1) FatRat.new(1, 0) FatRat…»

[17:43] <timotimo> m: say -1 + 1 / (-1)

[17:43] <camelia> rakudo-moar 154d98551: OUTPUT: «-2␤»

[17:43] <timotimo> m: say 1 + 1 / (-1)

[17:43] <camelia> rakudo-moar 154d98551: OUTPUT: «0␤»

[17:43] <timotimo> oh, 0/1 is fine, the 1/0 is the wrong one

[17:43] <timotimo> um, yeah

[17:43] <timotimo> it literally does divide 1 by 0 in that series

[17:44] <Geth> ¦ doc: f6577ddf39 | (JJ Merelo)++ | doc/Language/math.pod6

[17:44] <Geth> ¦ doc: Adds arithmetic section, refs #114

[17:44] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f6577ddf39

[17:44] <Geth> ¦ doc: 4b9d5882e8 | (JJ Merelo)++ | doc/Language/math.pod6

[17:44] <Geth> ¦ doc: Adds section on sequences refs #114

[17:44] <synopsebot> Link: https://doc.perl6.org/language/math

[17:44] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4b9d5882e8

[17:44] <Geth> ¦ doc: f4a5417f7c | (JJ Merelo)++ | 2 files

[17:44] <Geth> ¦ doc: Finishes the first version of the math page

[17:44] <Geth> ¦ doc: 

[17:44] <Geth> ¦ doc: This refers to #114. Will check this page now and move on to the

[17:44] <Geth> ¦ doc: next. If think it can be improved, please open a different issue for

[17:44] <Geth> ¦ doc: that.

[17:44] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f4a5417f7c

[17:44] <timotimo> raschipi: you see that?

[17:44] <raschipi> Yep, thanks

[17:45] <Luneburg> timotimo: https://0bin.net/paste/UGTs+Zm8lYuvstjn#XYo2qzJeyp70dFFn42rw24x7dJyPvXC3WkngqfOzFfR

[17:45] <raschipi> m: my @phis = (2.FatRat, 1 + 1 / * ... *); my @otherphi = (1 - @phis[200], 1 + 1 / * ... *); say @otherphi[204]

[17:45] <camelia> rakudo-moar 154d98551: OUTPUT: «2␤»

[17:46] <Luneburg> The problem is that "A" moves left no matter if I press "a" or "d"

[17:47] <timotimo> yup

[17:47] <timotimo> the = in your if statements is not what you want

[17:47] <timotimo> there's two reasons: = is assignment, not comparison

[17:48] <timotimo> but if you just replace it with ==, you'll notice that == is actually numerical comparison, rather than string comparison

[17:48] <timotimo> you'll want to use the eq operator instead of == or = there, then it should work

[17:48] <Luneburg> timotimo: Thanks!

[17:50] *** shareable6 left
[17:59] <Geth> ¦ doc: 06ff027b45 | (JJ Merelo)++ | doc/Language/math.pod6

[17:59] <Geth> ¦ doc: Eliminates dangling =item

[17:59] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/06ff027b45

[17:59] <synopsebot> Link: https://doc.perl6.org/language/math

[18:03] <ingy> Zoffix: any way to work around R#1515?

[18:03] <synopsebot> R#1515 [open]: https://github.com/rakudo/rakudo/issues/1515 Erroneous unhandled failures for runtime module loading

[18:04] <enheh_> Hello, I'm having difficulty installing rakudo-star-2018.04.  It hangs after printing the line:

[18:04] <enheh_> ===> Testing: LWP::Simple:ver<0.101>:auth<Cosimo Streppone>

[18:06] <enheh_> A little investigation found that it's hanging in t/get-unsized.t.  It seems it never gets past the line:

[18:06] <enheh_> my $server := IO::Socket::INET.new: :listen, :localhost<localhost>, :0localport;

[18:07] <jmerelo> enheh_: platform?

[18:07] <enheh_> Mac

[18:07] <enheh_> version 10.6 (yes, it's quite old!)

[18:07] <jmerelo> enheh_: could the port it's using be already occupied? 

[18:08] <jmerelo> enheh_: or some firewall getting in the way?

[18:08] <enheh_> I don't know.  How can I find out?

[18:08] <enheh_> As for the firewall, no.

[18:09] <jmerelo> enheh_: I would use lsof in Linux, but I don't know about Mac. Check first what is the value of the :0localport it's using.

[18:09] *** Zoffix joined
[18:10] <timotimo> if the port were already in use it'd throw an exception i believe

[18:10] <timotimo> but :0localport just uses any free port, right?

[18:10] <jmerelo> timotimo: probably... Then, firewall?

[18:10] <Zoffix> enheh_: I saw someone else say tests were hanging on MacOS in that module, with suspect new tests being to blame. I suggest you report the problem https://github.com/perl6/perl6-lwp-simple/issues and then just skip the tests during installation:    zef --/test install LWP::Simple

[18:11] <enheh_> Yes, this get-unsized.t has entirely new contents since 2018.01

[18:12] <Zoffix> oh, I wrote that one.. :S

[18:12] <enheh_> Okay, I'll do that.  Thanks!

[18:12] <mst> found the problem!

[18:12] <Zoffix> :)

[18:12] * jmerelo waits anxiously for mst to reveal the problem.

[18:13] <Zoffix> ingy: only thing I can think of is a sledge hammer: Failure.^lookup("DESTROY").wrap: -> | {}    This affects the entire program tho

[18:13] <Zoffix> jmerelo: you missed the joke :)

[18:14] <Zoffix> ingy: and what that does is wrap Failure.DESTROY method into an empty callable, so anytime it gets called it'd be a NOOP. The default one just emits that warning tho, so you're not missing any critical functionality by doing so. 

[18:15] <jmerelo> Zoffix: I did. Some explanation, please?

[18:15] *** APic joined
[18:15] <ingy> Zoffix: I have a workaround I think but it is failing

[18:15] <ingy> I'll gist it

[18:15] <Zoffix> jmerelo: <Zoffix> oh, I wrote that one.. :S  <mst> found the problem!

[18:16] <jmerelo> Zoffix: :-)

[18:16] <Zoffix> enheh_: what version of perl6 are you on?

[18:17] <enheh_> Trying to install rakudo star 2018.04

[18:17] <Zoffix> ah

[18:18] <ingy> Zoffix: this is my failing workaround: https://gist.github.com/ingydotnet/85ed90bbb17c89387f5c9e5c7d5a6d91

[18:18] <Zoffix> You can probably just delete that test file. I dunno if there's an option to skip module tests  in rakudo star

[18:18] <ingy> I'm sure it's a noob error

[18:19] <enheh_> Okay, that can work too.

[18:20] <ingy> ie what's wrong with this syntax: `require Foo; my $foo = Foo.new;`

[18:22] <Zoffix> It's wrong if Foo is not a class

[18:22] <Zoffix> m: require Test; Test.new

[18:22] <camelia> rakudo-moar 154d98551: OUTPUT: «You cannot create an instance of this type (Test)␤  in block <unit> at <tmp> line 1␤␤»

[18:23] <ingy> Zoffix: it's a unit class

[18:23] <Zoffix> What's the code?

[18:23] <ingy> unit class TestMLBridge is TestML::Bridge;

[18:24] <ingy> https://github.com/testml-lang/testml/blob/master/test/TestMLBridge.pm6

[18:24] <Zoffix> Also, require returns the thing it required, so you could write `(require ::(%*ENV<TESTML_BRIDGE>)).new`

[18:24] <ingy> thanks

[18:26] <Zoffix> hm, yeah, I reproed the same problem now

[18:26] *** chrom_ joined
[18:26] <Zoffix> uh

[18:26] <ingy> so it's a bug?

[18:26] *** sauvin left
[18:27] <Zoffix> ah, nm, I was looking at p5 file in that dir

[18:27] <ingy> :P

[18:27] <ingy> fwiw this works in my code: $!bridge = (require TestMLBridge).new;

[18:28] <ingy> and R#1515 is not triggered in 10 runs :)

[18:28] <synopsebot> R#1515 [open]: https://github.com/rakudo/rakudo/issues/1515 Erroneous unhandled failures for runtime module loading

[18:28] <ingy> so I'm good for now. thanks

[18:31] <chrom_> hey guys, a short question: are ther any issues regarding promises and  shell commands with qqx{}?  I am reading a list of urls and would like to check http headers (using lynx with qqw{}) in a parallel way. So if there sone hints to give .. it would be very nice :) 

[18:32] <ingy> Zoffix: well actually, just using `$!bridge = (require ::(%*ENV<TESTML_BRIDGE>)).new;` fixes the 1515 problem too. so no the workaround isn't needed.

[18:33] <Zoffix> ingy: and the other one, yeah, I think it's a bug. My understanding is the `package` version installed by `require` is supposed to be replaced by the class

[18:33] <Zoffix> e: BEGIN 'sandbox/Foo.pm6'.IO.spurt: 'unit class Foo;'; use lib <sandbox>; require Foo; say Foo.HOW.^name

[18:33] <evalable6> Zoffix, rakudo-moar 154d98551: OUTPUT: «Perl6::Metamodel::PackageHOW␤»

[18:33] <Zoffix> but it ain't and looks like it behaved like this for ages.

[18:33] *** rindolf left
[18:34] <ingy> leave it to ingy...

[18:34] *** sno joined
[18:35] <Zoffix> Filed as R#1865

[18:35] <synopsebot> R#1865 [open]: https://github.com/rakudo/rakudo/issues/1865 require Foo; does not replace `package` with proper class

[18:35] <Zoffix> Or maybe runtime is too late for it to replace it.

[18:38] *** chrom_ left
[18:39] <Zoffix> enheh_: are you still around? What does `say $*DISTRO.name` print on MacOS? I'm gonna skip that test and file an Issue

[18:40] <enheh_> Okay, one moment...

[18:41] <enheh_> It says "macosx"

[18:41] <Zoffix> Thanks.

[18:42] <enheh_> I was working on filing an issue.  If you are filing one, should I stop then?

[18:43] <Zoffix> enheh_: I just filed one. You could add any additional info to it, if you have it: https://github.com/perl6/perl6-lwp-simple/issues/28

[18:44] <Zoffix> Like operating system details, etc. I know the release manager of Rakudo Star tested it on MacOS and did not have any hangs, so it's not all MacOSes where the issue exists.

[18:44] <enheh_> Okay.  Zoffix++

[18:44] <enheh_> I'll do that.  :)

[18:45] <Geth> ¦ perl6-lwp-simple: 3e34aae1f5 | (Zoffix Znet)++ | 2 files

[18:45] <Geth> ¦ perl6-lwp-simple: Temp-fudge new test file on MacOS

[18:45] <Geth> ¦ perl6-lwp-simple: 

[18:45] <Geth> ¦ perl6-lwp-simple: Fudge while https://github.com/perl6/perl6-lwp-simple/issues/28

[18:45] <Geth> ¦ perl6-lwp-simple: is being resolved

[18:45] <Geth> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/3e34aae1f5

[18:46] *** shareable6 joined
[18:47] <raschipi> "Temp". That means it will stay more than features.

[18:48] <Geth> ¦ perl6-lwp-simple: f1257d6d75 | (Zoffix Znet)++ | 2 files

[18:48] <Geth> ¦ perl6-lwp-simple: Fix incorrect argument to `plan`

[18:48] <Geth> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/f1257d6d75

[18:49] <Zoffix> With that attitude, sure it will :)

[18:55] <raschipi> Well, you can just go forward and take a quick look anyway.

[18:57] <Zoffix> raschipi: at what?

[18:57] <Zoffix> I don't got an MacOS

[19:00] *** jmerelo left
[19:03] *** Zoffix left
[19:04] <raschipi> Because you have a time machine, you can take a peek.

[19:05] *** darutoko left
[19:14] *** domidumont left
[19:24] *** xi- left
[19:24] *** rodarmor left
[19:25] *** rodarmor joined
[19:26] *** pmmmm joined
[19:29] *** lucasb joined
[19:30] <lucasb> Zoffix: what does "for 'x' ~~ /./ { say 'yes' }" says in your Mu-item-cont-R1862 branch?

[19:33] *** Zoffix joined
[19:33] *** psychoslave joined
[19:33] <Zoffix> lucasb: I don't have that VM powered on, but I can tell it doesn't affect that code

[19:33] *** FROGGS joined
[19:34] *** Possum is now known as Guest60857

[19:34] *** jcallen_ is now known as Guest12958

[19:34] *** Altreus is now known as Guest9472

[19:34] *** Success is now known as Guest3243

[19:34] *** DarthGandalf is now known as Guest14918

[19:34] *** ilbelkyr is now known as Guest97370

[19:34] <Luneburg> What was that?

[19:34] <Zoffix> m: my $m := 'x' ~~ /./; use nqp; dd nqp::iscont($m)

[19:34] <camelia> rakudo-moar 154d98551: OUTPUT: «0␤»

[19:34] *** xi- joined
[19:34] *** rindolf joined
[19:35] <lucasb> Zoffix: ah ok

[19:36] <Zoffix> m: Mu.^lookup("item").wrap: my method () is raw { $ = self }; for <x> ~~ /./ { say <yes> }

[19:36] <camelia> rakudo-moar 154d98551: ( no output )

[19:36] <Zoffix> m: Mu.^lookup("item").wrap: my method () is raw { $ = self }; for $(<x> ~~ /./) { say <yes> }

[19:36] <camelia> rakudo-moar 154d98551: OUTPUT: «yes␤»

[19:36] *** shareable6 left
[19:36] *** squashable6 left
[19:36] *** statisfiable6 left
[19:36] *** benchable6 left
[19:36] *** unicodable6 left
[19:36] *** coverable6 left
[19:36] *** releasable6 left
[19:36] *** greppable6 left
[19:37] <Zoffix> Luneburg: maintenance + issues after it. "There are ongoing issues with services that are being looked into"

[19:37] <Zoffix> And I guess after maintenance users need to login to nickserv again and those people didn't so it booted them off the nick

[19:38] *** Guest97370 is now known as ilbelkyr

[19:39] <lucasb> m: for $('x' ~~ /./) { say 'yes' }

[19:39] <camelia> rakudo-moar 154d98551: ( no output )

[19:39] <lucasb> m: for ('x' ~~ /./).item { say 'yes' }

[19:39] <camelia> rakudo-moar 154d98551: ( no output )

[19:40] <Zoffix> $( ) codegens to .item

[19:40] *** dct joined
[19:53] *** espadrine_ joined
[19:56] *** FROGGS left
[20:03] *** itaipu_ left
[20:07] *** perlbot left
[20:07] *** perlbot joined
[20:13] *** itaipu joined
[20:23] <[Coke]> m: use Test; check-name

[20:23] <camelia> rakudo-moar 154d98551: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    check-name used at line 1␤␤»

[20:25] *** athenot_ left
[20:26] *** athenot joined
[20:29] *** pecastro left
[20:30] <Geth> ¦ doc: coke assigned to JJ Issue xt/examples-compilation.t fails. https://github.com/perl6/doc/issues/2055

[20:31] <Geth> ¦ doc: fe7a86fd47 | (Will "Coke" Coleda)++ | 2 files

[20:31] <Geth> ¦ doc: whitespace

[20:31] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fe7a86fd47

[20:31] <Geth> ¦ doc: ff9bc968c3 | (Will "Coke" Coleda)++ | doc/Language/math.pod6

[20:31] <Geth> ¦ doc: Fix POD link

[20:31] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ff9bc968c3

[20:31] <Geth> ¦ doc: 34aabd3013 | (Will "Coke" Coleda)++ | xt/code.pws

[20:31] <synopsebot> Link: https://doc.perl6.org/language/math

[20:31] <Geth> ¦ doc: learn new word

[20:31] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/34aabd3013

[20:32] *** psychoslave left
[20:34] *** releasable6 joined
[20:34] *** ChanServ sets mode: +v releasable6

[20:34] *** greppable6 joined
[20:34] *** ChanServ sets mode: +v greppable6

[20:34] *** coverable6 joined
[20:34] *** benchable6 joined
[20:34] *** unicodable6 joined
[20:34] *** ChanServ sets mode: +v unicodable6

[20:34] *** statisfiable6 joined
[20:41] *** undersightable6 left
[20:41] *** squashable6 joined
[20:41] *** ChanServ sets mode: +v squashable6

[20:42] *** greppable6 left
[20:43] *** undersightable6 joined
[20:43] *** ChanServ sets mode: +v undersightable6

[20:43] *** releasable6 left
[20:43] *** greppable6 joined
[20:43] *** releasable6 joined
[20:43] *** ChanServ sets mode: +v releasable6

[20:43] *** undersightable6 left
[20:44] *** undersightable6 joined
[20:46] <Geth> ¦ whateverable/master: 4 commits pushed by (Aleks-Daniel Jakimenko-Aleksejev)++

[20:46] <Geth> ¦ whateverable/master: a927030a06 | Support point releases

[20:46] <Geth> ¦ whateverable/master: ababe47198 | Check MoarVM page on Wikipedia

[20:46] <Geth> ¦ whateverable/master: 517679e4be | Highlight error as an error

[20:46] <Geth> ¦ whateverable/master: e8d6ff47fb | Turn missing file Warnings into Errors

[20:46] <Geth> ¦ whateverable/master: review: https://github.com/perl6/whateverable/compare/031cf5de521b...e8d6ff47fb72

[20:46] <AlexDaniel> lucasb: ↑ :)

[20:50] *** mrsolo left
[20:50] *** mrsolo joined
[20:51] *** bisectable6 left
[20:52] *** bisectable6 joined
[20:52] *** ChanServ sets mode: +v bisectable6

[20:54] <lizmat> hmmm.. looks like there are only 7 seats left in https://perlconference.us/tpc-2018-slc/session/making-your-perl-5-modules-work-in-rakudo-perl-6/

[20:54] <yoleaux> 16:28Z <Zoffix> lizmat: I recall like half a year ago you asking why QuantHash objects aren't Iterable. Did you ever figure it out? I notice lack of Iterable makes them get .item from Mu, which is a no-op, and thus you can't iterate over, say, a set as a single item: `dd $_ for $(set <a b c>); # OUTPUT: «:b␤:a␤:c␤»`

[20:54] <Geth> ¦ whateverable: bcad26d746 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable.pm6

[20:54] <Geth> ¦ whateverable: Ignore irc notices instead of replying

[20:54] <Geth> ¦ whateverable: 

[20:54] <Geth> ¦ whateverable: Otherwise bots unnecessarily reply to global notices.

[20:54] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/bcad26d746

[20:57] <Zoffix> lizmat: FWIW, I came to think QuantHash doing Iterable to be likely undesirable since I've sent that message

[20:58] <Zoffix> m: -> *@stuff { dd @stuff }(set <a b c>)

[20:58] <camelia> rakudo-moar 154d98551: OUTPUT: «[("c","b","a").Set]␤»

[20:58] <Zoffix> m: -> *@stuff { dd @stuff }((set <a b c>) does Iterable)

[20:58] <camelia> rakudo-moar 154d98551: OUTPUT: «[:c, :b, :a]␤»

[20:58] <lizmat> Zoffix: yeah, read the github thread  :-)

[20:58] <Zoffix> Ah, k :)

[21:03] <raschipi> Which thread? I looked back on the channel but can't find the link anymore...

[21:04] *** Sgeo__ joined
[21:04] <lucasb> R#1862 R#1863

[21:04] <synopsebot> R#1862 [open]: https://github.com/rakudo/rakudo/issues/1862 [@LARRY] Some objects don't .item'ize even though they probably should

[21:04] <synopsebot> R#1863 [open]: https://github.com/rakudo/rakudo/pull/1863 Always containerize stuff when asked to with .item

[21:05] *** AlexDaniel left
[21:05] *** AlexDaniel joined
[21:06] *** Sgeo_ left
[21:12] *** raschipi left
[21:16] *** Kaiepi left
[21:20] *** Kaiepi joined
[21:20] *** Luneburg left
[21:34] *** robertle left
[21:34] *** comborico1611 joined
[21:38] *** shareable6 joined
[21:46] *** espadrine_ left
[21:59] *** rindolf left
[22:11] <tbrowder_> m: my $n=0x2000;say $n.chr

[22:11] <camelia> rakudo-moar 89a4cf0d9: OUTPUT: « ␤»

[22:13] <tbrowder_> m: my $n=0x2000;my $m=$n.chr;my $n2=$m.ord;say $n==$n2

[22:13] <camelia> rakudo-moar 89a4cf0d9: OUTPUT: «False␤»

[22:15] <tbrowder_> m: my $n=0x2002:my $m=n.chr:my $n2=$m.ord;say $n==$n2

[22:15] <camelia> rakudo-moar 89a4cf0d9: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤You can't adverb 0x2002␤at <tmp>:1␤------> 3my $n=0x2002:my7⏏5 $m=n.chr:my $n2=$m.ord;say $n==$n2␤    expecting any of:␤        pair value␤»

[22:16] *** n0tjack joined
[22:17] <tbrowder_> m: my $n=0x2002;my $m=$n.chr;my $n2=$m.ord;say $n==$n2

[22:17] <camelia> rakudo-moar 89a4cf0d9: OUTPUT: «True␤»

[22:18] <tbrowder_> a bug??! ^^^\

[22:22] <AlexDaniel> m: say 0x2002.uniname

[22:22] <camelia> rakudo-moar 89a4cf0d9: OUTPUT: «EN SPACE␤»

[22:22] <lucasb> 0x2002.chr.ord == 0x2002  <-- seems a resoanable expectation

[22:22] <AlexDaniel> m: say 0x2000.uniname

[22:22] <camelia> rakudo-moar 89a4cf0d9: OUTPUT: «EN QUAD␤»

[22:22] <AlexDaniel> m: say 0x2000.chr.uniname.say

[22:22] <camelia> rakudo-moar 89a4cf0d9: OUTPUT: «EN SPACE␤True␤»

[22:22] <tbrowder_> i’ve been working on some pod tests with space chars and found this possible bug when testing roundtripping hex ints. ints 0x2000 and 0x2001 don’t round trip, but i may be doing something wrong. the two hex ints are supposed to be unicode space chars

[22:23] <AlexDaniel> tbrowder_: looks like normalization to me?

[22:23] <lucasb> ah, sorry, misread

[22:24] <AlexDaniel> propdump: 0x2000 0x2002

[22:24] <unicodable6> AlexDaniel, https://gist.github.com/d67b0c59b8b11bdcc757d8d26d18435f

[22:24] <tbrowder_> hm, maybe

[22:29] <tbrowder_> propdumping...

[22:30] <tbrowder_> m: 0x2000.uniprops

[22:30] <camelia> rakudo-moar 89a4cf0d9: OUTPUT: «Cannot resolve caller uniprops(Int); none of these signatures match:␤    (Str:D $str, Stringy:D $propname = "General_Category")␤  in block <unit> at <tmp> line 1␤␤»

[22:31] <AlexDaniel> tbrowder_: that's not what it's for

[22:31] <AlexDaniel> m: say ‘hel∞lo’.uniprops

[22:31] <camelia> rakudo-moar 89a4cf0d9: OUTPUT: «(Ll Ll Ll Sm Ll Ll)␤»

[22:31] <tbrowder_> m: 0x2000.chr.uniprops

[22:31] <camelia> rakudo-moar 89a4cf0d9: ( no output )

[22:33] <tbrowder_> m: say 0x2000.chr.uniprops

[22:33] <camelia> rakudo-moar 89a4cf0d9: OUTPUT: «(Zs)␤»

[22:33] *** kurahaupo left
[22:33] <tbrowder_> m: say 0x2001.chr.uniprops

[22:33] <camelia> rakudo-moar 89a4cf0d9: OUTPUT: «(Zs)␤»

[22:34] *** kurahaupo joined
[22:35] <tbrowder_> m: say 0x2002.chr.uniprops

[22:35] <camelia> rakudo-moar 89a4cf0d9: OUTPUT: «(Zs)␤»

[22:41] *** pmurias left
[22:44] *** Kaiepi left
[22:44] *** Kaiepi joined
[22:45] <tbrowder_> jnth confirmed those are two of the singleton normalization chars

[22:55] *** Herby_ joined
[22:55] <Herby_> o/

[22:55] *** n0tjack left
[22:58] *** _28_ria joined
[23:00] *** dct left
[23:00] *** skids left
[23:01] *** Rich_Morin joined
[23:03] *** HaraldJoerg left
[23:04] <lucasb> m: say <1/2>.base(10,*)

[23:04] <camelia> rakudo-moar 89a4cf0d9: OUTPUT: «0.5␤»

[23:04] <lucasb> m: say <1/3>.base(10,*)

[23:04] <camelia> rakudo-moar 89a4cf0d9: OUTPUT: «(timeout)»

[23:04] <Rich_Morin> I'm getting a time out on http://www.perlfoundation.org - anyone know wazzup?

[23:07] *** itaipu left
[23:07] <Geth> ¦ whateverable: 5ca2ac89f4 | (Aleks-Daniel Jakimenko-Aleksejev)++ | bin/Undersightable.p6

[23:07] <Geth> ¦ whateverable: Add perlfoundation.org to the list of checked urls

[23:07] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/5ca2ac89f4

[23:09] *** Herby_ left
[23:10] *** n0tjack joined
[23:26] *** n0tjack left
[23:31] *** lucasb left
[23:45] *** epony left
[23:46] *** epony joined
[23:46] *** kurahaupo left
[23:47] *** kurahaupo joined
[23:55] *** Sgeo_ joined
[23:57] *** Sgeo__ left
[23:59] *** stmuk joined
