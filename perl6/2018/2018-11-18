[00:13] <Xliff> m: my $a = Any + 1; say $a

[00:13] <camelia> rakudo-moar 50f2207bb: OUTPUT: «Use of uninitialized value of type Any in numeric context␤1␤  in block <unit> at <tmp> line 1␤»

[00:18] *** MasterDuke joined
[00:18] *** p6bannerbot sets mode: +v MasterDuke

[00:18] *** MasterDuke left
[00:18] *** MasterDuke joined
[00:18] *** herbert.freenode.net sets mode: +v MasterDuke

[00:18] *** p6bannerbot sets mode: +v MasterDuke

[00:28] *** pecastro left
[00:37] <buggable> New CPAN upload: CroX-HTTP-FallbackPassthru-0.1.tar.gz by HANENKAMP https://cpan.metacpan.org/authors/id/H/HA/HANENKAMP/Perl6/CroX-HTTP-FallbackPassthru-0.1.tar.gz

[00:41] *** movl joined
[00:42] *** p6bannerbot sets mode: +v movl

[01:24] *** SourceBaby left
[01:28] *** lichtkind left
[01:37] *** cydf left
[02:13] <Xliff> m: class A { has $.a = rand() }; my $a = (A.new xx 2); say $a.gist

[02:13] <camelia> rakudo-moar 50f2207bb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of rand(); in Perl 6 please use rand␤at <tmp>:1␤------> 3class A { has $.a = rand7⏏5() }; my $a = (A.new xx 2); say $a.gist␤»

[02:14] <Xliff> m: class A { has $.a = rand }; my $a = (A.new xx 2); say $a.gist

[02:14] <camelia> rakudo-moar 50f2207bb: OUTPUT: «(A.new(a => 0.16441350714980596e0) A.new(a => 0.16372031521031205e0))␤»

[02:37] *** evalable6 left
[02:39] *** evalable6 joined
[02:39] *** ChanServ sets mode: +v evalable6

[02:39] *** p6bannerbot sets mode: +v evalable6

[02:44] *** doufu300 joined
[02:44] *** p6bannerbot sets mode: +v doufu300

[02:57] *** doufu300 left
[03:02] *** kurahaupo_ joined
[03:03] *** p6bannerbot sets mode: +v kurahaupo_

[03:06] *** kurahaupo left
[03:10] *** leont left
[03:18] *** Bird|otherbox4 joined
[03:18] *** Bird|otherbox4 left
[03:47] <buggable> New CPAN upload: App-Tasks-0.0.11.tar.gz by JMASLAK http://modules.perl6.org/dist/App::Tasks:cpan:JMASLAK

[03:53] <SmokeMachine> timotimo, mst: Now Red's columns, by default, are NOT NULL... you can change it with column's `is column{ :nullable }` or to change de default behaviour for every column of a model, use the model's `is nullable`

[04:07] *** Cabanossi left
[04:08] *** Cabanossi joined
[04:09] *** p6bannerbot sets mode: +v Cabanossi

[04:46] *** ferreira left
[04:47] *** ferreira joined
[04:48] *** p6bannerbot sets mode: +v ferreira

[05:23] *** warriors left
[05:37] *** irdr left
[05:40] *** irdr joined
[05:41] *** p6bannerbot sets mode: +v irdr

[06:21] *** benjikun left
[06:30] *** kurahaupo_ left
[06:30] *** kurahaupo joined
[06:31] *** p6bannerbot sets mode: +v kurahaupo

[07:15] *** jmerelo joined
[07:16] *** p6bannerbot sets mode: +v jmerelo

[07:32] *** hamhu3_ joined
[07:33] *** p6bannerbot sets mode: +v hamhu3_

[07:36] *** hamhu3 left
[07:38] *** domidumont joined
[07:39] *** p6bannerbot sets mode: +v domidumont

[07:42] *** lizmat left
[07:53] *** caa51h left
[07:53] *** kdr22 left
[07:53] *** xinming left
[07:53] *** kdr22 joined
[07:53] *** xinming joined
[07:54] *** p6bannerbot sets mode: +v kdr22

[07:54] *** p6bannerbot sets mode: +v xinming

[07:55] *** caa51h joined
[07:55] *** p6bannerbot sets mode: +v caa51h

[08:33] *** cydf joined
[08:34] *** p6bannerbot sets mode: +v cydf

[08:48] *** domidumont left
[09:11] *** |oLa| left
[09:18] *** rindolf joined
[09:19] *** p6bannerbot sets mode: +v rindolf

[09:29] *** Dino joined
[09:29] *** p6bannerbot sets mode: +v Dino

[09:29] *** Dino is now known as Guest97597

[09:32] *** sena_kun joined
[09:33] *** p6bannerbot sets mode: +v sena_kun

[09:44] *** Guest97597 left
[09:46] *** cydf left
[10:06] *** robertle left
[10:09] *** avar left
[10:09] *** avar joined
[10:09] *** avar left
[10:09] *** avar joined
[10:09] *** p6bannerbot sets mode: +v avar

[10:10] *** p6bannerbot sets mode: +v avar

[10:10] *** domidumont joined
[10:11] *** p6bannerbot sets mode: +v domidumont

[10:29] *** dalek joined
[10:29] *** ChanServ sets mode: +v dalek

[10:29] *** p6lert left
[10:29] *** sergot left
[10:29] *** synopsebot_ joined
[10:29] *** Geth joined
[10:29] *** ChanServ sets mode: +v synopsebot_

[10:29] *** ChanServ sets mode: +v Geth

[10:29] *** p6lert joined
[10:29] *** synopsebot left
[10:29] *** p6bannerbot sets mode: +v dalek

[10:30] *** p6bannerbot sets mode: +v synopsebot_

[10:30] *** p6bannerbot sets mode: +v Geth

[10:30] *** p6bannerbot sets mode: +v p6lert

[10:33] <Xliff> m: use NativeCall; class A does repr('CStruct') { has uint64 $.a }; say A ~~ Pointer;

[10:33] <camelia> rakudo-moar 50f2207bb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Invalid typename 'repr'. Did you mean 'REPL'?␤at <tmp>:1␤------> 3use NativeCall; class A does repr7⏏5('CStruct') { has uint64 $.a }; say A ~~␤»

[10:33] <Xliff> m: use NativeCall; class A is repr('CStruct') { has uint64 $.a }; say A ~~ Pointer;

[10:33] <camelia> rakudo-moar 50f2207bb: OUTPUT: «False␤»

[10:33] <Xliff> m: use NativeCall; class A is repr('CPointer') { }; say A ~~ Pointer;

[10:33] <camelia> rakudo-moar 50f2207bb: OUTPUT: «False␤»

[10:33] <Xliff> m: use NativeCall; class A is repr('CPointer') { }; say A ~~ CPointer;

[10:33] <camelia> rakudo-moar 50f2207bb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    CPointer used at line 1. Did you mean 'Pointer'?␤␤»

[10:34] <Xliff> Does anyone know how to pull the repr out of a class definition? I am primarily only interested in CStruct and CPointer;

[10:39] <Xliff> m: use NativeCall; class A is repr('CPointer') { }; say A ~~ NativeCall::Types::Pointer;

[10:39] <camelia> rakudo-moar 50f2207bb: OUTPUT: «False␤»

[10:40] <Xliff> m: use NativeCall; class A is repr('CPointer') { }; say A.REPR

[10:40] <camelia> rakudo-moar 50f2207bb: OUTPUT: «CPointer␤»

[10:40] <Xliff> m: use NativeCall; class A is repr('CPointer') { }; say A.REPR eq 'CPointer'

[10:40] <camelia> rakudo-moar 50f2207bb: OUTPUT: «True␤»

[10:40] <Xliff> m: use NativeCall; class A is repr('CStruct') { }; say A.REPR eq 'CPointer'

[10:40] <camelia> rakudo-moar 50f2207bb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Class A has no attributes, which is illegal with the CStruct representation.␤at <tmp>:1␤»

[10:41] <Xliff> m: use NativeCall; class A is repr('CStruct') { has uint64 $.a }; say A.REPR eq 'CPointer'

[10:41] <camelia> rakudo-moar 50f2207bb: OUTPUT: «False␤»

[10:41] <Xliff> m: use NativeCall; class A is repr('CStruct') { }; say A.REPR eq 'CStruct'

[10:41] <camelia> rakudo-moar 50f2207bb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Class A has no attributes, which is illegal with the CStruct representation.␤at <tmp>:1␤»

[10:41] <Xliff> m: use NativeCall; class A is repr('CStruct') { has uint64 $.a }; say A.REPR eq 'CStruct'

[10:41] <camelia> rakudo-moar 50f2207bb: OUTPUT: «True␤»

[10:41] <Xliff> Well! That will work!

[10:41] <Xliff> :>

[10:47] *** |oLa| joined
[10:48] *** p6bannerbot sets mode: +v |oLa|

[10:53] <Xliff> m: use NativeCall; class A is repr('CStruct') { has uint64 $.a }; say A.new.REPR

[10:53] <camelia> rakudo-moar 50f2207bb: OUTPUT: «CStruct␤»

[10:56] <Xliff> m: say Any.^name

[10:56] <camelia> rakudo-moar 50f2207bb: OUTPUT: «Any␤»

[10:56] <Xliff> m: say Mu.^name

[10:56] <camelia> rakudo-moar 50f2207bb: OUTPUT: «Mu␤»

[11:09] *** yqt joined
[11:09] *** p6bannerbot sets mode: +v yqt

[11:14] *** molaf joined
[11:14] *** p6bannerbot sets mode: +v molaf

[11:26] <Geth> ¦ doc: dc30eee82e | (JJ Merelo)++ | doc/Type/Rational.pod6

[11:26] <Geth> ¦ doc: Fixes arithmetic error and adds examples closes #2463

[11:26] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/dc30eee82e

[11:26] <synopsebot_> Link: https://doc.perl6.org/type/Rational

[11:29] *** kurahaupo left
[11:30] *** kurahaupo joined
[11:31] *** p6bannerbot sets mode: +v kurahaupo

[11:39] *** lizmat joined
[11:39] *** p6bannerbot sets mode: +v lizmat

[11:41] *** cydf joined
[11:42] *** p6bannerbot sets mode: +v cydf

[12:19] *** leont joined
[12:20] *** p6bannerbot sets mode: +v leont

[12:27] *** kurahaupo left
[12:27] *** kurahaupo joined
[12:27] *** kurahaupo left
[12:28] *** kurahaupo joined
[12:28] *** p6bannerbot sets mode: +v kurahaupo

[12:33] *** pecastro joined
[12:34] *** p6bannerbot sets mode: +v pecastro

[12:38] *** pecastro left
[12:49] *** marmor joined
[12:50] *** p6bannerbot sets mode: +v marmor

[12:50] *** pecastro joined
[12:51] *** p6bannerbot sets mode: +v pecastro

[13:00] *** pmurias joined
[13:00] *** p6bannerbot sets mode: +v pmurias

[13:03] *** kurahaupo left
[13:04] *** kurahaupo joined
[13:04] *** p6bannerbot sets mode: +v kurahaupo

[13:21] *** kurahaupo left
[13:21] *** kurahaupo joined
[13:22] *** p6bannerbot sets mode: +v kurahaupo

[13:26] *** MasterDuke left
[13:29] *** jmerelo left
[13:41] <SmokeMachine> .tell timotimo https://colabti.org/irclogger/irclogger_log/perl6?date=2018-11-18#l34

[13:41] <yoleaux> SmokeMachine: I'll pass your message to timotimo.

[13:43] <timotimo> SmokeMachine: fantastic!

[13:43] <yoleaux> 13:41Z <SmokeMachine> timotimo: https://colabti.org/irclogger/irclogger_log/perl6?date=2018-11-18#l34

[14:06] *** dogbert2_ left
[14:09] *** patrickb joined
[14:10] *** p6bannerbot sets mode: +v patrickb

[14:15] <Geth> ¦ mu: efe5cc112c | timo++ (committed using GitHub Web editor) | misc/perl6advent-2018/schedule

[14:15] <Geth> ¦ mu: claim a slot in the advent calendar

[14:15] <Geth> ¦ mu: review: https://github.com/perl6/mu/commit/efe5cc112c

[14:32] *** Xliff_ joined
[14:33] *** p6bannerbot sets mode: +v Xliff_

[14:35] *** Xliff left
[14:35] *** Xliff_ left
[14:36] *** Xliff_ joined
[14:36] *** p6bannerbot sets mode: +v Xliff_

[14:50] *** |oLa| left
[14:51] *** zakharyas joined
[14:52] *** p6bannerbot sets mode: +v zakharyas

[14:58] *** movl left
[15:00] *** movl joined
[15:00] *** p6bannerbot sets mode: +v movl

[15:00] *** testguest joined
[15:00] *** p6bannerbot sets mode: +v testguest

[15:02] *** lizmat left
[15:02] *** testguest left
[15:06] *** Kaiepi left
[15:06] *** zakharyas left
[15:07] *** Kaiepi joined
[15:07] *** zakharyas joined
[15:07] *** p6bannerbot sets mode: +v Kaiepi

[15:08] *** p6bannerbot sets mode: +v zakharyas

[15:10] *** xinming_ joined
[15:10] *** p6bannerbot sets mode: +v xinming_

[15:12] *** |oLa| joined
[15:13] *** p6bannerbot sets mode: +v |oLa|

[15:13] *** xinming left
[15:14] *** lizmat joined
[15:14] *** p6bannerbot sets mode: +v lizmat

[15:16] * leont might take a slot on the advent calendar, that also depends if a certain bug gets fixed before that time

[15:18] *** lizmat left
[15:20] *** marmor left
[15:21] *** patrickz joined
[15:21] <sena_kun> m: multi trait_mod:<is>(Attribute $attr, :$def) { #`( magic here ) }; class A { has $.a is def(5); }; say A.new;

[15:21] <camelia> rakudo-moar 50f2207bb: OUTPUT: «A.new(a => Any)␤»

[15:22] *** p6bannerbot sets mode: +v patrickz

[15:22] <sena_kun> so I want to know, how can I apply one another trait in my custom one? If I have my magic done, I'd like to do like `$attr is default($def)`, but that's banned for obvious reasons.

[15:23] <sena_kun> docs say that: "As such compiler hooks, they are defined in compile time, although they can be used in runtime", but it is not really clear if I can do what I want to.

[15:23] <sena_kun> another option would be to just `has $.a is def(5) is default5)`, but that's not too nice.

[15:24] *** Skarsnik joined
[15:25] *** p6bannerbot sets mode: +v Skarsnik

[15:25] *** patrickb left
[15:25] <Skarsnik> Hello

[15:25] <sena_kun> o/

[15:27] <timotimo> o/

[15:27] <timotimo> yo Skarsnik, wanna take part in the advent calendar this year? :)

[15:28] <Skarsnik> I was actually on my way to start my experiment with binary and grammar xD

[15:28] <timotimo> i could swear there was a way to get from a commit view on github to the file at that version

[15:28] <timotimo> could have sworn*

[15:30] <SmokeMachine> timotimo: :)

[15:30] *** zakharyas left
[15:31] *** zakharyas joined
[15:32] *** p6bannerbot sets mode: +v zakharyas

[15:34] <leont> sena_kun: I would guess you can just call «trait_mod:<is>($attr, :default(5))» in your own trait

[15:39] <sena_kun> m: multi trait_mod:<is>(Attribute $attr, :$def) { $attr«trait_mod:<is>($attr, :default(5))» }; class A { has $.a is def(5); }; say A.new

[15:39] <camelia> rakudo-moar 50f2207bb: OUTPUT: «A.new(a => Any)␤»

[15:40] <sena_kun> hmm, I am impressed this syntax exists, but it seems to me that the trait still isn't applied, hmmm.

[15:40] <timotimo> that's not syntax, that's just the full name of the subroutine :)

[15:40] <leont> The «» were quotes, they shouldn't be in the code :-)

[15:40] <sena_kun> ah

[15:40] <sena_kun> no, stop

[15:40] <sena_kun> ah

[15:40] <leont> m: multi trait_mod:<is>(Attribute $attr, :$def) { trait_mod:<is>($attr, :default(5)) }; class A { has $.a is def(5); }; say A.new

[15:40] <camelia> rakudo-moar 50f2207bb: OUTPUT: «A.new(a => 5)␤»

[15:41] <sena_kun> m: multi trait_mod:<is>(Attribute $attr, :$def) { trait_mod:<is>($attr, :default(5)) }; class A { has $.a is def(5); }; say A.new

[15:41] <camelia> rakudo-moar 50f2207bb: OUTPUT: «A.new(a => 5)␤»

[15:41] <sena_kun> \o/

[15:41] <sena_kun> leont, thanks a lot!

[15:41] <leont> YW

[15:55] *** jmerelo joined
[15:55] *** p6bannerbot sets mode: +v jmerelo

[15:56] <Skarsnik> hm matching on bit value in grammar look tricky x)

[16:00] <Skarsnik> I am streaming my attempt if people are curious https://www.twitch.tv/skarsnikus x)

[16:06] *** molaf left
[16:06] *** colomon joined
[16:06] *** marmor joined
[16:07] *** p6bannerbot sets mode: +v colomon

[16:07] *** zakharyas left
[16:07] *** p6bannerbot sets mode: +v marmor

[16:09] <timotimo> hell yeah p6 live coding

[16:11] *** marmor left
[16:18] *** colomon left
[16:20] <timotimo> m: my int @foo; for ^4 { @foo = (1024.rand.Int) xx 5; say @foo; }

[16:20] <camelia> rakudo-moar 50f2207bb: OUTPUT: «[997 901 925 720 459]␤[997 901 925 720 459 359 738 863 857 720]␤[997 901 925 720 459 359 738 863 857 720 334 233 952 424 688]␤[997 901 925 720 459 359 738 863 857 720 334 233 952 424 688 10 982 788 514 595]␤»

[16:20] <timotimo> ??!?

[16:20] <timotimo> that's not right at all!

[16:20] <timotimo> bisectable: my int @foo; for ^4 { @foo = (1024.rand.Int) xx 5; say @foo; }

[16:20] <bisectable6> timotimo, Bisecting by output (old=2015.12 new=50f2207) because on both starting points the exit code is 0

[16:21] <bisectable6> timotimo, bisect log: https://gist.github.com/cc5c67f880dd7369ccb37997ec00688d

[16:21] <bisectable6> timotimo, (2015-12-25) https://github.com/rakudo/rakudo/commit/07fecb52eb1fd07397659f19a5cf36dc61f84053

[16:21] <bisectable6> timotimo, The result looks a bit unrealistic, doesn't it? Most probably the output is different on every commit (e.g. ｢bisect: say rand｣)

[16:21] <timotimo> m)

[16:21] <timotimo> of course 

[16:21] <timotimo> bisectable: srand(0); my int @foo; for ^4 { @foo = (1024.rand.Int) xx 5; say @foo; }

[16:21] <bisectable6> timotimo, Bisecting by output (old=2015.12 new=50f2207) because on both starting points the exit code is 0

[16:21] <bisectable6> timotimo, bisect log: https://gist.github.com/fec75e964515a59c42adeed159ce8394

[16:21] <bisectable6> timotimo, (2018-04-09) https://github.com/rakudo/rakudo/commit/72473bd0ad0677558d64895c31075c4215ddbcf1

[16:22] <timotimo> c: 2862990  srand(0); my int @foo; for ^4 { @foo = (1024.rand.Int) xx 5; say @foo; }

[16:22] <committable6> timotimo, ¦2862990: «800 631 977 808 124␤846 987 763 1004 476␤347 870 677 834 804␤297 138 725 963 440␤»

[16:22] <timotimo> m: my @foo; for ^4 { @foo = (1024.rand.Int) xx 5; say @foo; }

[16:22] <camelia> rakudo-moar 50f2207bb: OUTPUT: «[875 114 500 356 57]␤[942 1016 674 217 265]␤[723 969 847 921 275]␤[818 412 754 126 246]␤»

[16:24] <Skarsnik> hm Grammar still can't work on byte level?

[16:24] <timotimo> if you read in your data as latin1 it can

[16:25] <timotimo> it's a hack, but it does work

[16:32] *** kensanata joined
[16:32] *** p6bannerbot sets mode: +v kensanata

[16:32] <kensanata> p6: use JSON::Fast; my @hashes = from-json '[{"a": 1, "b": 2}, {"a": 3, "b": 4}]'; for @hashes -> %hash { say %hash<a> }

[16:32] <camelia> rakudo-moar 50f2207bb: OUTPUT: «===SORRY!===␤Could not find JSON::Fast at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-1/share/perl6␤    CompUni…»

[16:32] <kensanata> Oops.

[16:32] <timotimo> you're probably getting bitten by containerization

[16:33] <timotimo> so you'll want to for @hashes<> -> %hash

[16:34] <b2gills> Skarsnik: token data ($length) {

[16:34] <kensanata> timotimo: I still get "Type check failed in binding to parameter '%hash'; expected Associative but got Array", so perhaps that's another problem I just haven't run into.

[16:35] <timotimo> ah, yes

[16:35] <timotimo> it'll have stored the result of from-json as the first element inside @hashes

[16:35] <timotimo> so you'll also need to <> or .List on the result of from-json

[16:35] <kensanata> timotimo: That's what it looks like. Interesting.

[16:35] <timotimo> i want to change all that in JSON::Fast version 2

[16:35] <kensanata> Would it make more sense to use JSON::Tiny?

[16:36] *** ufobat___ joined
[16:37] <kensanata> For now, I'll append a .List to from-json. That fixed it for me!

[16:37] *** p6bannerbot sets mode: +v ufobat___

[16:38] <timotimo> i was meaning for JSON::Fast to be a drop-in replacement for JSON::Tiny, so if the results differ between the two it'd actually go against my initial idea

[16:38] <kensanata> timotimo: I verified that JSON::Tiny has the same feature. :)

[16:38] <timotimo> "feature" :)

[16:38] <kensanata> 😇

[16:52] *** zakharyas joined
[16:53] *** p6bannerbot sets mode: +v zakharyas

[17:04] *** ryn1x left
[17:05] *** phogg left
[17:05] <kensanata> Given a loop like the one above, how could I parallelize my testing? Complete code here: https://github.com/kensanata/text-markdown-common/blob/master/t/automatic.t – basically I have a for @tests -> %test { ... } loop and know that they are all independent of each other and I'd like to keep the CPU as busy as I can for these tests. Or I guess tell me why this is a bad idea?

[17:05] *** zakharyas left
[17:05] *** zakharyas joined
[17:06] *** p6bannerbot sets mode: +v zakharyas

[17:06] <kensanata> Alternatively, a pointer to a suitable section in the Perl 6 Deep Dive book will do as well. :)

[17:08] <kensanata> I guess I could create a test file for every test section and just let 'prove' handle it for me.

[17:08] *** zakharyas left
[17:09] <kensanata> The chapter on junctions makes me think I should be able to turn @tests into one big junction and then somehow it would all magically work...

[17:09] *** zakharyas joined
[17:09] <timotimo> you'll literally just "hyper for @tests.hyper(:batch(1)) -> %test { ... }"

[17:10] <timotimo> i think the default Test implementation is not threadsafe

[17:10] <kensanata> Ah. I guess that means farming it out to multiple files...

[17:10] <timotimo> so you'd want probably want to .map instead of hyper-for, and then afterwards go through the results and use "ok" on it

[17:10] *** p6bannerbot sets mode: +v zakharyas

[17:10] <timotimo> no need for that :)

[17:11] <kensanata> We'll see how well that works when tests are failing. :)

[17:12] <timotimo> :)

[17:13] *** TeamBlast left
[17:13] <timotimo> you can also just protect the invocation of "is" or "ok" with a shared lock, but be extra careful that you actually calculate what should be passed to it beforehand

[17:14] <timotimo> but using hyper and going through the result afterwards makes sure things are in the right order

[17:14] <AlexDaniel> leont: which bug?

[17:15] *** TeamBlast joined
[17:15] <leont> rakudo#2379

[17:15] <synopsebot_> RAKUDO#2379 [open]: https://github.com/rakudo/rakudo/issues/2379 Loop variable in BEGIN block becomes a VMNull

[17:15] *** p6bannerbot sets mode: +v TeamBlast

[17:17] <buggable> New CPAN upload: App-Tasks-0.0.12.tar.gz by JMASLAK http://modules.perl6.org/dist/App::Tasks:cpan:JMASLAK

[17:18] <AlexDaniel> timotimo: did you ticket it?

[17:18] *** phogg joined
[17:18] *** phogg left
[17:18] *** phogg joined
[17:18] *** p6bannerbot sets mode: +v phogg

[17:18] <AlexDaniel> this one I mean:

[17:18] <AlexDaniel> c: 72473bd0^,72473bd0,HEAD srand(0); my int @foo; for ^4 { @foo = (1024.rand.Int) xx 5; say @foo; }

[17:18] <committable6> AlexDaniel, https://gist.github.com/a3b468b7df7c1767ba8a318a6af9a8e5

[17:18] *** p6bannerbot sets mode: +v phogg

[17:21] *** ryn1x joined
[17:22] *** p6bannerbot sets mode: +v ryn1x

[17:28] *** lizmat joined
[17:28] *** p6bannerbot sets mode: +v lizmat

[17:32] <timotimo> no, but i fixed it

[17:33] <timotimo> i didn't make spectest yet, though

[17:37] *** lichtkind joined
[17:37] *** p6bannerbot sets mode: +v lichtkind

[17:50] *** dct joined
[17:50] *** p6bannerbot sets mode: +v dct

[17:52] *** molaf joined
[17:53] *** p6bannerbot sets mode: +v molaf

[18:01] <Geth> ¦ doc: uzluisf++ created pull request #2464: Wording and text reflow

[18:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2464

[18:01] <Geth> ¦ doc: 91c70d4271 | (Luis F. Uceta)++ | doc/Language/containers.pod6

[18:01] <Geth> ¦ doc: Wording and text reflow

[18:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/91c70d4271

[18:01] <Geth> ¦ doc: f151a39e04 | (Luis F. Uceta)++ (committed using GitHub Web editor) | doc/Language/containers.pod6

[18:01] <Geth> ¦ doc: Merge pull request #2464 from uzluisf/master

[18:01] <synopsebot_> Link: https://doc.perl6.org/language/containers

[18:01] <Geth> ¦ doc: 

[18:01] <Geth> ¦ doc: Wording and text reflow

[18:02] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f151a39e04

[18:04] *** zakharyas left
[18:09] *** jmerelo left
[18:13] *** ryn1x left
[18:18] <AlexDaniel> .in 7d check if timotimo wrote a spectest for that thing that we don't even remember now

[18:18] <yoleaux> AlexDaniel: I'll remind you on 25 Nov 2018 18:18Z

[18:18] *** ryn1x joined
[18:18] *** p6bannerbot sets mode: +v ryn1x

[18:20] *** ryn1x left
[18:31] <Skarsnik> hm, is there a shorter syntax for enum A{]; sub foo($piko where $piko = A1 | A2) ($piko is not needed)

[18:33] *** hamhu3 joined
[18:34] *** p6bannerbot sets mode: +v hamhu3

[18:34] *** p6noob joined
[18:34] *** p6bannerbot sets mode: +v p6noob

[18:35] *** hamhu3_ left
[18:38] <p6noob> Hi there, trying to make a Class that does Positional role indexing based on a Point.  But Perl6 seems to always want to coerce to an Int first.

[18:39] <p6noob> https://paste.ee/p/VcRYs  Any battering with a clue stick, welcome.

[18:43] <Skarsnik> hm probably because AT-POS always expect a Int?

[18:43] <p6noob> Skarsnik, that's what it looks like.  Is that a reasonable limitation though?

[18:43] *** daxim left
[18:44] <Skarsnik> This look weird ::?CLASS:D: Point $index xD

[18:44] <Skarsnik> does it work with just Point $index

[18:44] <Skarsnik> in the AT-POS and EXIST-AT?

[18:46] <p6noob> Skarsnik: that is just the notation to force the type constraint of only being called from an instantiated object.

[18:46] <p6noob> it works the same without that

[18:47] <Skarsnik> ok, it seems it does not call the right multi method

[18:47] <sena_kun> I am not an expert, but isn't `Positional` is a role with parameters? I somewhat remember something like this, let me search for some code...

[18:47] <Skarsnik> or maybe [] does not just translate to AT-EXIST/AT-POS

[18:47] <p6noob> Skarsnik: yeah, works the same even if I drop "multi"

[18:48] <p6noob> sena_kun: oh cool. thx

[18:50] *** daxim joined
[18:50] *** p6bannerbot sets mode: +v daxim

[18:50] <Skarsnik> m: my $foo = buf8.new(0); $foo.append("foo".decode("latin1"));

[18:50] <camelia> rakudo-moar 0d5a81324: OUTPUT: «No such method 'decode' for invocant of type 'Str'. Did you mean 'encode'?␤  in block <unit> at <tmp> line 1␤␤»

[18:51] <Skarsnik> m: my $foo = buf8.new(0); $foo.append("foo".encode("latin1"));

[18:51] <camelia> rakudo-moar 0d5a81324: ( no output )

[18:51] <kensanata> I have the beginning of a parser here: https://github.com/kensanata/text-markdown-common/blob/master/lib/Text/Markdown/Common.pm6 and a simple test here: https://github.com/kensanata/text-markdown-common/blob/master/t/simple.t and the test result is that I get (Str) instead of '<p>foo</p>' which makes sense. But where do I specify what parse should return? In the TOP action somehow?

[18:51] <sena_kun> no, it seems I am wrong. it was about `Associative[Foo, Foo]` and for `Positional` it is only `Positional[Foo]` is seems, which denotes a value type.

[18:52] <sena_kun> p6noob, what if you define an operator `[ ]` that works with `Point` and your class?

[18:53] <p6noob> sena_kun:  Ah, okay I thought that was what the Positional role did for you.  Let me lookup on how to define that and i'll give it a try.  thanks for the idea.

[18:53] <Skarsnik> hm

[18:54] <Skarsnik> Cannot resolve caller append(Buf[uint8]: Blob[uint8]); none of these signatures match: <snip> (Buf:D $: Blob:D $buf, *%_) this sig should work?

[18:55] <sena_kun> p6noob, give me one more second...

[18:55] <sena_kun> m: class A { has @.a = <Rize Sharo Chiya>; }; class Point { has $.index = 1; }; multi postcircumfix:<[ ]>(A $x, Point $p) { $x.a[$p.index] }; my $a = A.new; say $a[Point.new];

[18:55] <camelia> rakudo-moar 0d5a81324: OUTPUT: «Sharo␤»

[18:56] <sena_kun> something like this will allow you to have postcircumfix subscription without implementing `Positional`, but that's kind of cheating if you ask me. :)

[18:57] <sena_kun> and it depends on whether you just want indexing with `[ ]` or something more from Positional, like `for A.new -> $items` and such.

[18:57] <p6noob> sena_kun, let me give that a go.  This class already implements positional for Int and  Int;Int   indexing... was just trying to add convenience ability for a point.

[18:58] <sena_kun> if it's just to make code neater/shorter, I think an op will do.

[18:58] <sena_kun> in its body you can get some indexes, turn those into Int if necessary and use your already implemented subscription.

[18:58] <Skarsnik> m: my buf8 $foo; $foo.append("foo".encode("latin1"));

[18:58] <camelia> rakudo-moar 0d5a81324: OUTPUT: «Cannot resolve caller append(Buf[uint8]: Blob[uint8]); none of these signatures match:␤    (Buf:D: int $got, *%_)␤    (Buf:D: Int:D $got, *%_)␤    (Buf:D: Mu:D $got, *%_)␤    (Buf:D: Blob:D $buf, *%_)␤    (Buf:D: int @values, *%_)␤    (Buf…»

[18:59] <Skarsnik> !bug

[18:59] <Skarsnik> !rt

[18:59] <Skarsnik> what is the mail to send directly bug repport? xD

[18:59] <sena_kun> Skarsnik, nowadays we use github issues.

[18:59] <sena_kun> Skarsnik, https://github.com/rakudo/rakudo/issues <-

[19:00] <sena_kun> Skarsnik, also, I am not really sure if it's a bug.

[19:00] <sena_kun> I mean, your `buf8` is not initialized, just typed.

[19:00] <sena_kun> m: my buf8 $foo = buf8.new; say $foo.append("foo".encode("latin1"));

[19:00] <camelia> rakudo-moar 0d5a81324: OUTPUT: «Buf[uint8]:0x<66 6F 6F>␤»

[19:01] <Skarsnik> the bug is that it should show thet buf is U

[19:01] <sena_kun> ah

[19:01] <Skarsnik> so you don't search forever why it does not match one of the signature ^^

[19:01] <sena_kun> then please fill one. :)

[19:01] * sena_kun .oO ( my wisdom is still so shallow )

[19:24] <p6noob> sena_kun: is there something similar to multi postcircumfix:<[ ]>(A $x, Point $p) {}  for assignment..   to make   $class[$point] = $val   work?

[19:25] <sena_kun> I haven't tried it myself, but something says to me that `=` is actually just your average operator.

[19:25] <sena_kun> let me check...

[19:25] <sena_kun> it'd be `infix`...

[19:26] <sena_kun> p6noob, https://docs.perl6.org/language/operators#infix_= <- yup

[19:26] <p6noob> sena_kun: hmmm, I didn't think = was the issue there, need to noodle on that a bit

[19:28] <sena_kun> p6noob, hmm, it depends on what `$class[$point]` returns, actually.

[19:29] <sena_kun> so yes, `=` does not seem like an issue to me.

[19:30] <b2gills> p6noob: multi postcircumfix:<[ ]>(A $x, Point $p) is rw {}

[19:32] <sena_kun> m: class A { has @.a = <A B C>; }; class Point { has $.index = 1; }; multi postcircumfix:<[ ]>(A $x, Point $p) is rw { $x.a[$p.index] }; my $a = A.new; $a[Point.new] = 'A';

[19:32] <camelia> rakudo-moar f1fa5adff: OUTPUT: «No such method 'Int' for invocant of type 'Point'␤  in block <unit> at <tmp> line 1␤␤»

[19:38] <p6noob> b2gills: that makes a lot of sense...   

[19:38] <p6noob> sena_kun:   that's the same error I keep getting :-)

[19:39] *** thothamon joined
[19:39] <sena_kun> well, then I can't help with this one. :/

[19:39] <p6noob> sena_kun: you've already been a help. Thank you

[19:39] *** p6bannerbot sets mode: +v thothamon

[19:40] <sena_kun> p6noob, the pleasure was all mine. :)

[19:41] *** |oLa| left
[19:42] <b2gills> m: class A { has @.a = <A B C>; }; class Point { has $.index = 1; }; multi postcircumfix:<[ ]>(A $x, Point $p, $?) is rw { $x.a[$p.index] }; my $a = A.new; $a[Point.new] = 'A'; dd $a

[19:42] <camelia> rakudo-moar f1fa5adff: OUTPUT: «A $a = A.new(a => ["A", "B", "C"])␤»

[19:42] <b2gills> For some reason sometimes &postcircumfix:<[ ]> gets called with a third argument

[19:44] <sena_kun> p6noob, ^

[19:48] <p6noob> m: class A { has @.a is rw = <A B C>; }; class Point { has $.index = 1; }; multi postcircumfix:<[ ]>(A $x, Point $p, $?) is rw { $x.a[$p.index] }; my $a = A.new; $a[Point.new] = "Z"; dd $a 

[19:48] <camelia> rakudo-moar f1fa5adff: OUTPUT: «A $a = A.new(a => ["A", "B", "C"])␤»

[19:49] *** dct left
[19:49] <p6noob> b2gills:  that has to be the answer on how to make it work... but it seems "Z" still isn't actually being assigned

[19:50] <thothamon> Hey all, what are the best options, either now or on the horizon, for transpiling Perl6 to JavaScript in the browser? I.e. attempting to use Perl6 as a browser front-end language. I'd read about perlito and I see that nqp has a JS backend. Are these the best options?

[19:51] <El_Che> thothamon: ping pmurias 

[19:51] <sena_kun> and now there is something I don't really get with Perl 6 type system...

[19:51] <thothamon> Thanks El_Che

[19:51] <sena_kun> m: class A { has Str @.a; }; my @a; @a.push('a'); A.new(|{a => @a});

[19:51] <camelia> rakudo-moar f1fa5adff: OUTPUT: «Type check failed in assignment to @!a; expected Str but got Array ($["a"])␤  in block <unit> at <tmp> line 1␤␤»

[19:51] <sena_kun> m: class A { has Str @.a; }; my $a; $a.push('a'); A.new(|{a => $a})

[19:51] <camelia> rakudo-moar f1fa5adff: OUTPUT: «Type check failed in assignment to @!a; expected Str but got Array ($["a"])␤  in block <unit> at <tmp> line 1␤␤»

[19:51] <El_Che> thothamon: https://github.com/rakudo/rakudo/tree/js

[19:52] <b2gills> m: class A { has Str @.a; }; my Str @a; @a.push('a'); A.new(|{a => @a});

[19:52] <camelia> rakudo-moar f1fa5adff: OUTPUT: «Type check failed in assignment to @!a; expected Str but got Array[Str] (Array[Str].new("a"))␤  in block <unit> at <tmp> line 1␤␤»

[19:52] <sena_kun> given I can't(likely) change such type restrictions, how can I make it work? Given I cannot type `@a` because I don't know exact type yet.

[19:52] <El_Che> thothamon: here are some blogposts about it by pmurias: http://blogs.perl.org/users/pawel_murias/. There are some talks online as well

[19:53] <thothamon> Ah thanks El_Che, I hadn't seen those

[19:53] <sena_kun> I meant `my @a` lexical variable -> I cannot type that, as type is still unknown.

[19:54] <p6noob> b2gills: it's passing the assignment value as the third parameter !   

[19:56] <kensanata> Grammar student here... looking at this grammar https://github.com/kensanata/text-markdown-common/blob/master/lib/Text/Markdown/Common.pm6#L73, say ~Text::Markdown::Common::Grammar.parse('foo', :actions(Text::Markdown::Common::ToHtml.new)); gives me "foo" instead of "<p>foo</p>". Any ideas?

[19:56] <pmurias> thothamon: rakudo has a js backend ;)

[19:57] <thothamon> Hey pmurias! Was just about to message you :-)

[19:57] *** patrickz left
[20:00] <b2gills> p6noob: That seems to be specific to that postcircumfix, most don't work that way

[20:00] <pmurias> the backend itself handles a lot of Perl 6 (like 80% of roast test files) but for it's drawbacks the generated code is large (it doesn't do tree shaking) and it's yet optimized

[20:00] <b2gills> m: class A { has @.a = <A B C>; }; class Point { has $.index = 1; }; multi postcircumfix:<< .M M. >>(A:D $x, Point:D $p) is rw { $x.a[$p.index] }; my $a = A.new; $a..M Point.new M. = 'Z'; dd $a

[20:00] <camelia> rakudo-moar f1fa5adff: OUTPUT: «A $a = A.new(a => ["A", "Z", "C"])␤»

[20:01] <pmurias> thothamon: if you have any question I'll gladly answer those

[20:02] <thothamon> Hey pmurias, I tried to PM you but maybe I don't have the hang of this

[20:02] <p6noob> b2gills: sena_kun:   multi postcircumfix:<[ ]>(Pixels $i, Point $p, $v?) is rw { my $a := $i[$p.y;$p.x]; $a = $v if $v.defined; return-rw $a };

[20:02] <p6noob> b2gills: is what I had just hacked together and seemed to work... but i'll take a look at what you just posted.

[20:02] <pmurias> thothamon: you need to have your nick registered in freenode to msgs people

[20:02] <pmurias> * msg

[20:03] <thothamon> Oh!

[20:03] <thothamon> OK

[20:03] <thothamon> I was saying I was looking at the page that says to contact you about the perl6 js backend. It looks like nqp is the thing that actually translates to JS

[20:03] <pmurias> there was an mass attack of spammers abusing internet of things devices that caused some restrictions :(

[20:04] <thothamon> No problem, I can get that taken care of

[20:04] <pmurias> thothamon: QAST is translated to JS

[20:04] <thothamon> Is QAST the full perl6 AST?

[20:04] <b2gills> p6noob: I think it is a bug. Just go with what you have and if the bug gets fixed your code should still work.

[20:04] <pmurias> both NQP and Perl 6 get translated to QAST

[20:04] *** domidumont left
[20:04] <thothamon> I see. Cool! So a regular perl6 file should translate too.

[20:04] <p6noob> b2gills: if i understood the bug i'd be happy to make a bug report.

[20:04] <pmurias> thothamon: yes

[20:05] <pmurias> https://perl6.github.io/6pad/ - allows you to test it in your browser

[20:05] <p6noob> b2gills: as it is i don't really understand what i've written, was just copying from you and sena_kun 

[20:05] <pmurias> it's chrome only but I have a workaround for a missing Firefox feature in the work

[20:06] <thothamon> pmurias: Perhaps running the output through Babel will make it more compatible with other browsers

[20:07] <pmurias> BigInt support is still WIP in firefox

[20:08] <thothamon> I see. What about perl regexes? Do those work cleanly or do you need to do something like use a JS regex?

[20:08] <pmurias> I have mostly switched to using a https://github.com/GoogleChromeLabs/jsbi workaround but it needs a bug fixed (there is a PR underway)

[20:08] <pmurias> thothamon: they get compiled to JS code

[20:08] <thothamon> So they're clean, out of the box? That's very cool

[20:09] <thothamon> I know there's a JSX slang out there, the raduko JS compiler plus that might be a quick way to enable a React app

[20:10] <thothamon> Maybe a quick example app would prove the concept.

[20:10] <thothamon> And also illustrate any ongoing pain points.

[20:10] <b2gills> p6noob: I'm saying that &postcircumfix:<[ ]> is different in that it takes 3 arguments. It shouldn't be different.

[20:10] <pmurias> thothamon: that was my plan behind creating the JSX slang

[20:10] <pmurias> ;)

[20:11] <thothamon> Oh you created that!

[20:11] <thothamon> haha

[20:11] <pmurias> there are two

[20:11] <thothamon> So you are a few (dozen) steps ahead of me :-)

[20:11] <pmurias> https://github.com/pmurias/p6-jsx

[20:12] <pmurias> thothamon: but I plan to get round to that next week (or kind of like that, no hard promises)

[20:12] <thothamon> Yeah, cool, I appreciate you are a very busy guy ;-)

[20:13] <thothamon> Mind if I take a crack at it? If I can't do it, at least I'll have some questions other people trying the same will probably have

[20:14] <thothamon> Maybe just a super simple counter all

[20:14] <thothamon> app

[20:14] <pmurias> thothamon: sure

[20:15] <pmurias> thothamon: I'll release a new rakudo.js to npm that actually supports loading modules in the browser (not only under node.js)

[20:15] <El_Che> pmurias: what's the size of the java script you end up for a hello world app?

[20:15] <thothamon> Ah nice...yeah I guess we'll need to lead react at least to create the component

[20:15] <thothamon> load react

[20:15] <pmurias> El_Che: you mean javascript?

[20:16] <El_Che> pmurias: yes, the result of the compile

[20:16] <pmurias> El_Che: the CORE setting is the big thing

[20:16] <b2gills> My guess:  MASSIVE

[20:17] <El_Che> (just thiking on the likes of wasm on go, where you end up with a 10mb download)

[20:17] <thothamon> Yeah right now I'd be delighted if it works at all, even if performance is terrible and size is horrible

[20:17] <pmurias> El_Che: 75M unminified and uncompressed :(

[20:18] <pmurias> for rakudo+CORE that's included in a hello world

[20:18] <El_Che> pmurias: it will load as fast as gmail then, no worries :)

[20:18] <thothamon> hahah

[20:19] <pmurias> thothamon: the modules that we need to load is for JSX

[20:19] <pmurias> thothamon: react can be loaded as a regular javascript ;)

[20:19] <thothamon> Oh I thought you might have been referring to some kind of perl6/JS interop issue or something

[20:20] <pmurias> thothamon: https://perl6.github.io/6pad/#4ee170f8043efe4802c8e6fb55d6a187 - example of perl6/JS interop

[20:21] <pmurias> thothamon: I have been working on rakudo.js in node.js most of the time (because it's more convenient)

[20:21] <thothamon> Yeah I understand that

[20:22] <thothamon> Just a convenient first target

[20:22] <pmurias> thothamon: I have fairly recently started working on the few things that are done differently in the browser

[20:22] <pmurias> thothamon: yep, it even uses the same JS VM ;)

[20:22] <thothamon> What is your goal? Are you going to try to address all the browser differences? 

[20:23] <thothamon> Go for a least-common-denominator? Or emit rational JS code and let something else transliterate?

[20:24] <pmurias> for now I want to target the onest that are the vast majority of the market (chrome+firefox)

[20:25] *** sacomo left
[20:25] <pmurias> I count chrome derivatives such as Opera as chrome

[20:25] <pmurias> and deal with others one rakudo.js is production ready and it's actually needed

[20:25] <thothamon> Makes sense. Mobile might be a next step (iOS/Safari and Mobile Chrome)

[20:25] *** sacomo joined
[20:26] *** p6bannerbot sets mode: +v sacomo

[20:26] <thothamon> Probably no effort to address older versions of FF/Chrome unless there's a crying need for it

[20:26] <thothamon> And no effort for IE, which is being phased out by MS

[20:26] <thothamon> In fact I think already deprecated by MS

[20:27] <pmurias> FF/Chrome autoupdate

[20:27] <pmurias> FireFox support will come next week

[20:28] <thothamon> Then there's Edge, which is better than IE but can still be a pain

[20:28] <pmurias> thothamon: if you want to play around with rakudo.js 6pad is recomended because it avoids the whole reload huge CORE/rakudo part for now

[20:29] <thothamon> OK, cool. Yeah that's pretty nice. Have your example running now

[20:32] <pmurias> thothamon: if you need something for 6pad tell me

[20:33] <pmurias> btw. it's a stolen from https://dartpad.dartlang.org/

[20:33] <AlexDaniel> .in 6.5d nevermind the next reminder

[20:33] <yoleaux> AlexDaniel: I'll remind you on 25 Nov 2018 08:33Z

[20:39] *** yqt left
[20:39] <pmurias> thothamon: for react 6pad likely needs to retrigger <script> tags (as innerHTML doesn't run those) https://github.com/dart-lang/dart-pad/blob/master/web/scripts/frame.html#L42

[20:40] <pmurias> thothamon: 6pad lives at https://github.com/perl6/6pad

[20:41] <pmurias> the code behind is simple at the moment (bit primitive even ;) https://github.com/perl6/6pad/blob/master/main.js

[20:41] <pmurias> thothamon: I'm not fully awake enough to fix it atm

[20:48] <sena_kun> m: sub a { my @a; @a.push(1); @a }; my %params = a-result => a(); %params.perl.say

[20:48] <camelia> rakudo-moar f1fa5adff: OUTPUT: «{:a-result($[1])}␤»

[20:49] <sena_kun> how should I change my code to get `{:a-result([1])}` instead(i.e. not wrap a @ into $)?

[20:51] <pmurias> thothamon: if you need anything I'll be around tommorow (and I backlog the irc log)

[20:51] *** kensanata left
[20:52] <pmurias> sleep&

[20:52] *** pmurias left
[20:57] *** ZZZzz_ joined
[20:57] *** p6bannerbot sets mode: +v ZZZzz_

[20:57] *** ZZZzz_ left
[21:03] *** beeman left
[21:08] *** beeman joined
[21:08] *** p6bannerbot sets mode: +v beeman

[21:18] *** Kaiepi left
[21:18] *** ZZZzz_ joined
[21:18] *** p6bannerbot sets mode: +v ZZZzz_

[21:34] *** lucasb joined
[21:34] *** p6bannerbot sets mode: +v lucasb

[21:35] <lucasb> how do you create method/sub aliases? like in P5 "*foo = \&bar"

[21:38] *** Kaiepi joined
[21:39] *** p6bannerbot sets mode: +v Kaiepi

[21:39] <sena_kun> if I am understanding you correctly, for subs:

[21:39] <sena_kun> m: sub a { 1.say }; my &b = &a; &b();

[21:39] <camelia> rakudo-moar 2e5be5b8e: OUTPUT: «1␤»

[21:39] <sena_kun> for methods it's possible with MOP, but that is a cheating and I should feel bad because of it:

[21:40] <sena_kun> m: class A { sub a { 2.say } }; my &b = A.^methods[0]; &b;

[21:40] <camelia> rakudo-moar 2e5be5b8e: OUTPUT: «WARNINGS for <tmp>:␤Useless use of &b in sink context (line 1)␤»

[21:40] <sena_kun> m: class A { sub a { 2.say } }; my &b = A.^methods[0]; &b();

[21:40] <camelia> rakudo-moar 2e5be5b8e: OUTPUT: «Cannot invoke this object (REPR: Uninstantiable; Callable)␤  in block <unit> at <tmp> line 1␤␤»

[21:40] <sena_kun> hmm...

[21:40] <jnthn> A sub is not a method

[21:40] <sena_kun> yes

[21:40] <sena_kun> you need a self

[21:41] <jnthn> Needs to be `method` inside the class

[21:41] <sena_kun> but, well, anyway I am sure there is a better way to do that.

[21:41] <jnthn> That's why A.^methods is empty

[21:41] <sena_kun> ah, that's a thinko of mine. :)

[21:41] <sena_kun> m: class A { method a { 2.say } }; my &b = A.^methods[0]; &b(A.new);

[21:41] <camelia> rakudo-moar 2e5be5b8e: OUTPUT: «2␤»

[21:42] <jnthn> m: class A { method m() { 2.say }; BEGIN A.^add_method('m2', A.^lookup('m'); }; A.m; A.m2; # perhaps this was wanted

[21:42] <camelia> rakudo-moar 2e5be5b8e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3GIN A.^add_method('m2', A.^lookup('m'); 7⏏5}; A.m; A.m2; # perhaps…»

[21:42] <jnthn> m: class A { method m() { 2.say }; BEGIN A.^add_method('m2', A.^lookup('m')); }; A.m; A.m2; # perhaps this was wanted

[21:42] <camelia> rakudo-moar 2e5be5b8e: OUTPUT: «2␤2␤»

[21:42] <lucasb> yes, that's what I wanted, thanks

[21:42] *** Sound joined
[21:42] *** p6bannerbot sets mode: +v Sound

[21:43] <lucasb> you showed the method alias. is there any way for subs?

[21:43] <jnthn> Just assignment `my &b = &a`

[21:43] <lucasb> "my &b = &a" is a lexical var, works, but not totally equivalent to "*foo = \&bar"

[21:44] <jnthn> I forget exactly what *foo is?

[21:45] <lucasb> a type glob

[21:45] <jnthn> Yes, I remember the name, not the semantics. I'm not sure Perl 6 has an equivalent.

[21:46] <jnthn> In Perl 6, a `sub` decl is my-scoped by default, and really is installed as a lexical, though. The only significant thing is that it's done at compile time.

[21:47] <lucasb> ah, I think like this works:

[21:47] <lucasb> m: module Foo { our sub foo { 42 }; our &bar = &foo }; say Foo::bar

[21:47] <camelia> rakudo-moar 2e5be5b8e: OUTPUT: «42␤»

[21:47] <lucasb> sorry for not being specific :)

[21:47] <jnthn> Ah, right, package scoped subs. :)

[21:47] <lucasb> ok, sub & method aliases. thanks sena_kun and jnthn 

[21:47] * jnthn nearly never uses those :)

[21:48] <sena_kun> jnthn, can you help me with `@` sigil semantics right now?

[21:49] <sena_kun> just in case

[21:49] <jnthn> sena_kun: Use binding in the first place, or use .Map to turn the Hash (with the containers) into a Map (without)

[21:50] <lucasb> In Ruby, "BEGIN Klass.^add_method('foo', Klass.^lookup('bar')" is spelled "alias foo bar"

[21:50] <lucasb> can't we get something shorter in P6 too? :)

[21:50] <sena_kun> can I with a Map instantiate an object with `.new(|@foo)`?

[21:50] <sena_kun> let's try it out...

[21:51] <jnthn> lucasb: Just factor it out into a trait if doing it a lot.

[21:51] <jnthn> lucasb: Then you can write `method foo() is aka('bar') { }` or however you want it

[21:51] <lucasb> jnthn: ok. I'll see how to do that. thanks

[21:53] <jnthn> sena_kun: Oh, I might not have read your question right :)

[21:53] <sena_kun> jnthn, well, Map might be the answer.

[21:54] <jnthn> Oh, no, I did. Map is the answer :)

[21:54] <sena_kun> and there is A B problem, because I want something more deeper, but tried to make it less complex. :)

[21:54] <sena_kun> I'll try with Map approach anyway...

[21:54] <sena_kun> s/more//

[21:56] <sena_kun> hmm, no, I still can't instantiate a class. :S

[21:56] *** rindolf left
[21:59] *** benjikun joined
[21:59] *** Sound left
[21:59] *** p6bannerbot sets mode: +v benjikun

[22:02] <sena_kun> m: class A { has Str @.p; }; sub a { sub in { my @a; @a.push: 'a'; @a }; my %params; %params<p> = in; %params; }; A.new(|a)

[22:02] <camelia> rakudo-moar 2e5be5b8e: OUTPUT: «Type check failed in assignment to @!p; expected Str but got Array ($["a"])␤  in block <unit> at <tmp> line 1␤␤»

[22:03] <sena_kun> m: class A { has Str @.p; }; sub a { sub in { my @a; @a.push: \'a\'; @a }; my @params; @params.push: \'p\'; @params.push: in(); @params.Map; }; say A.new(|a)

[22:03] <camelia> rakudo-moar 2e5be5b8e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)␤at <tmp>:1␤------> 3ush: in(); @params.Map; }; say A.new(|a)7⏏5<EOL>␤    expecting …»

[22:04] <sena_kun> m: class A { has Str @.p; }; sub a { sub in { my @a; @a.push: 'a'; @a }; my @params; @params.push: 'p'; @params.push: in(); @params.Map; }; say A.new(|a)

[22:04] <camelia> rakudo-moar 2e5be5b8e: OUTPUT: «A.new(p => Array[Str].new("a"))␤»

[22:04] <sena_kun> \o/

[22:04] <sena_kun> now it's the question why my real code does not work in a similar way...

[22:06] <sena_kun> oh, I've used `%params` in another place. the case is solved. jnthn++

[22:06] <jnthn> :)

[22:09] <Xliff_> \o

[22:14] *** pecastro left
[22:16] <lucasb> jnthn: ok. I'll see how to do that. thanks

[22:16] <lucasb> oops, sorry. up arrow

[22:16] <timotimo> ISTR we already had something like "is aka", but what do i know :)

[22:17] <lucasb> yeah! I found Method::Also by lizmat on the ecosystem

[22:17] <timotimo> cool

[22:17] <lizmat> timotimo: is aka was reverted as it was deemed not sufficiently useful

[22:21] <lucasb> my multi sub trait_mod:<is>(Method:D \m, :$aka!) { m.package.^add_method($_.Str, m) for @$aka }

[22:22] <timotimo> OK

[22:22] <lucasb> I'll copy this line into my module 

[22:26] <Xliff_> lucasb: I'd use Method::Also, rather than that line.

[22:26] <Xliff_> I was using aka as well, but recently made the change.

[22:29] <lucasb> I'm playing with a pseudo-pair object https://gist.github.com/lucasbuchala/9617c11fe86fa85f5f0fb76e288d02e8

[22:30] <lucasb> not sure every details works yet. didn't tested yet :)

[22:33] *** hamhu3_ joined
[22:33] *** Bucciarati left
[22:33] *** p6bannerbot sets mode: +v hamhu3_

[22:35] *** hamhu3 left
[22:45] *** Bucciarati joined
[22:46] *** p6bannerbot sets mode: +v Bucciarati

[22:54] *** lucasb left
[22:59] *** Skarsnik left
[23:27] *** sena_kun left
