[00:01] *** [particle] joined
[00:01] *** p6bannerbot sets mode: +v [particle]

[00:04] *** mcmillhj joined
[00:04] *** p6bannerbot sets mode: +v mcmillhj

[00:05] *** [particle] left
[00:07] *** lichtkind joined
[00:08] *** isviridov_away22 joined
[00:08] *** isviridov_away22 left
[00:08] *** p6bannerbot sets mode: +v lichtkind

[00:09] *** mcmillhj left
[00:19] *** mcmillhj joined
[00:20] *** p6bannerbot sets mode: +v mcmillhj

[00:24] *** mcmillhj left
[00:24] <Herby_> My googling is failing me a bit.

[00:25] <Herby_> Is there a simple way of getting P6 on the Raspberry Pi 3?

[00:35] *** [particle] joined
[00:36] <Herby_> disregard, looks like I can use nxadm's Debian 8 package

[00:36] *** p6bannerbot sets mode: +v [particle]

[00:39] *** mcmillhj joined
[00:40] *** p6bannerbot sets mode: +v mcmillhj

[00:40] *** [particle] left
[00:44] *** mcmillhj left
[00:51] *** entonian joined
[00:52] *** p6bannerbot sets mode: +v entonian

[00:53] *** entonian left
[00:59] *** estan_ joined
[00:59] *** estan_ left
[01:08] *** mcmillhj joined
[01:09] *** p6bannerbot sets mode: +v mcmillhj

[01:09] *** molaf left
[01:12] *** mcmillhj left
[01:18] *** [particle] joined
[01:18] *** p6bannerbot sets mode: +v [particle]

[01:20] *** lichtkind left
[01:21] *** molaf joined
[01:21] *** [particle]1 joined
[01:22] *** p6bannerbot sets mode: +v molaf

[01:22] *** p6bannerbot sets mode: +v [particle]1

[01:22] *** [particle] left
[01:26] *** mcmillhj joined
[01:27] *** p6bannerbot sets mode: +v mcmillhj

[01:27] *** [particle]1 left
[01:28] *** Zoffix joined
[01:28] *** p6bannerbot sets mode: +v Zoffix

[01:28] <Zoffix> Herby_: FWIW, you can also build from scratch: https://github.com/zoffixznet/perl6.party/blob/master/post/Perl6-On-Raspberry-Pi--Hacking-Bluetooth-Media-Player.md#build-rakudo-perl-6

[01:30] <Herby_> Zoffix: awesome, i was looking for a guide like that.  Thanks!

[01:31] *** mcmillhj left
[01:32] *** lichtkind joined
[01:33] *** p6bannerbot sets mode: +v lichtkind

[01:35] <vrurg> I wonder: if an attribute from a parent class needs to be set at object initialization stage how could it be done? Neither $.parent-attr nor $!parent-attr are not available in TWEAK...

[01:36] <Zoffix> how come $.parent-attr not available?

[01:37] <vrurg> m: class Foo { has $.attr; }; class Bar is Foo { submethod TWEAK { $.attr = "YES" } }; Bar.new;

[01:37] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Virtual method call $.attr may not be used on partially constructed object (maybe you mean $!attr for direct attribute access here?)␤at <tmp>:1␤------> 3ss Bar is Foo { submethod TWEAK { $.attr7…»

[01:37] *** [particle] joined
[01:37] <Zoffix> try self.attr instead

[01:37] <vrurg> No method error

[01:37] <geekosaur> that's telling you the truth. the attribute exists, the iplicit etter and seter don't yet so $.x doesn't work

[01:37] *** p6bannerbot sets mode: +v [particle]

[01:38] <vrurg> m: class Foo { has $.attr; }; class Bar is Foo { submethod TWEAK { self.attr = "YES" } }; Bar.new;

[01:38] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «Cannot modify an immutable Any ((Any))␤  in submethod TWEAK at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[01:38] <vrurg> m: class Foo { has $.attr is rw; }; class Bar is Foo { submethod TWEAK { $.attr = "YES" } }; Bar.new;

[01:38] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Virtual method call $.attr may not be used on partially constructed object (maybe you mean $!attr for direct attribute access here?)␤at <tmp>:1␤------> 3ss Bar is Foo { submethod TWEAK { $.attr7…»

[01:38] <vrurg> m: class Foo { has $.attr is rw; }; class Bar is Foo { submethod TWEAK { self.attr = "YES" } }; Bar.new;

[01:38] <camelia> rakudo-moar 5f3579eb0: ( no output )

[01:39] <vrurg> Ok, self works... I need more investigation on what's going on in my code. Thanks!

[01:39] <Zoffix> R#2152

[01:39] <synopsebot> R#2152 [open]: https://github.com/rakudo/rakudo/issues/2152 Using `%.foo` in places throws, but changing it to `self.foo` works

[01:40] <vrurg> m: class Foo { has $.attr is rw; }; class Bar is Foo { submethod TWEAK { self.attr = "YES" } }; say Bar.new.attr;

[01:40] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «YES␤»

[01:43] <vrurg> Zoffix: Doe it mean I shall expect that at some point (sigil).attr notation will work eventually?

[01:43] *** mcmillhj joined
[01:44] *** p6bannerbot sets mode: +v mcmillhj

[01:48] *** mcmillhj left
[01:50] *** AlexDaniel left
[01:56] *** w_richard_w joined
[01:57] *** mcmillhj joined
[01:57] *** p6bannerbot sets mode: +v w_richard_w

[01:57] *** p6bannerbot sets mode: +v mcmillhj

[02:01] *** mcmillhj left
[02:04] <Zoffix> vrurg: I'm not an expert in that area and don't know for sure, but just logically thinking about it: if we can make `self.foo` work, surely we can make `$.foo` work as well

[02:04] * Zoffix &

[02:04] *** Zoffix left
[02:05] *** w_richard_w left
[02:10] *** mcmillhj joined
[02:11] *** p6bannerbot sets mode: +v mcmillhj

[02:15] *** mcmillhj left
[02:37] *** Herby__ joined
[02:38] *** p6bannerbot sets mode: +v Herby__

[02:39] <Herby__> Found this repo on Algorithms, figured I'd try my hand with some Perl 6 solutions

[02:39] <Herby__> https://github.com/TheAlgorithms

[02:39] <Herby__> Here is my first pass at Bubble Sort: https://tio.run/##VY5NCoMwFITXySke1IWlTzGmPxRReg@xoBAhYDAkcSHFs6ex1UJhYJjhYxgtzHD1/gC9NNZB65xQenWwUulBQDd1XTA7GkepmuHRGtPOUELNkeEF73jGHBlDlmfIOd6QNwWl/WjgubEvStaYQZpC/O1SMQhlIQF2hKSCSK4Qkf02X0eygWoPcSRP7Nh8EPIDEPa@/AcxzIULhCw0aKFUT24jCu/f

[02:39] <Herby__> It appears to yield correct results but it is squawking a bunch of warnings at me

[02:39] <Herby__> where am I going wrong?

[02:40] *** mcmillhj joined
[02:40] *** p6bannerbot sets mode: +v mcmillhj

[02:44] *** w_richard_w joined
[02:44] *** p6bannerbot sets mode: +v w_richard_w

[02:44] *** mcmillhj left
[02:45] *** w_richard_w left
[02:46] <MasterDuke> Herby__: you're going to far. your range goes to @array.elems - 1, but then you add 1 when indexing

[02:46] <geekosaur> you're comparing the last element against the next position which is empty

[02:47] <geekosaur> that

[02:47] <MasterDuke> likewise

[02:48] <Herby__> hmm

[02:54] *** mcmillhj joined
[02:55] *** p6bannerbot sets mode: +v mcmillhj

[02:59] *** mcmillhj left
[03:04] *** vike1 joined
[03:05] *** p6bannerbot sets mode: +v vike1

[03:10] <Herby__> Fixed it: https://tio.run/##VY5NCoMwFITXySke1IWlTzGmPxRReg@xoBAhYDAkcSHFs6ex1UJhYJjhYxgtzHD1/gC9NNZB65xQenWwUulBQDd1XTA7GkepmuHRGtPOUELNkeEF73jGHBlDlmfIOd6QNwWl/WjgubEvStaYQZpC/O1SMQhlIYH8CEkFkVwhIvttvo5kA9Ue4kie2LH5IOQHIOx9@Q9imAsXCFlo0EKpntxGFN6/AQ

[03:10] <Herby__> Here's the P6 version on Rosetta code: https://rosettacode.org/wiki/Sorting_algorithms/Bubble_sort#Perl_6

[03:18] *** w_richard_w joined
[03:19] *** p6bannerbot sets mode: +v w_richard_w

[03:23] *** mcmillhj joined
[03:24] *** p6bannerbot sets mode: +v mcmillhj

[03:26] *** w_richard_w left
[03:26] *** fake_space_whale joined
[03:27] *** p6bannerbot sets mode: +v fake_space_whale

[03:28] *** mcmillhj left
[03:30] *** lizmat left
[03:32] *** Herby__ left
[03:34] *** mcmillhj joined
[03:35] *** p6bannerbot sets mode: +v mcmillhj

[03:39] *** mcmillhj left
[03:51] *** mcmillhj joined
[03:52] *** p6bannerbot sets mode: +v mcmillhj

[03:56] *** mcmillhj left
[04:09] *** regreg_ joined
[04:10] *** mcmillhj joined
[04:10] *** p6bannerbot sets mode: +v regreg_

[04:11] *** p6bannerbot sets mode: +v mcmillhj

[04:15] *** mcmillhj left
[04:17] *** MasterDuke left
[04:41] *** mcmillhj joined
[04:42] *** p6bannerbot sets mode: +v mcmillhj

[04:46] *** mcmillhj left
[05:00] *** mcmillhj joined
[05:01] *** p6bannerbot sets mode: +v mcmillhj

[05:04] *** epony left
[05:05] *** mcmillhj left
[05:07] *** vrurg left
[05:08] *** araraloren joined
[05:09] *** p6bannerbot sets mode: +v araraloren

[05:09] *** snkcld joined
[05:11] *** snkcld left
[05:13] <araraloren> o/

[05:17] <buggable> New CPAN upload: Getopt-Advance-1.0.7.tar.gz by ALOREN http://modules.perl6.org/dist/Getopt::Advance:cpan:ALOREN

[05:18] *** Sgeo left
[05:18] *** graphene left
[05:19] *** Sgeo joined
[05:19] *** graphene joined
[05:19] *** p6bannerbot sets mode: +v Sgeo

[05:20] *** p6bannerbot sets mode: +v graphene

[05:27] *** mcmillhj joined
[05:28] *** p6bannerbot sets mode: +v mcmillhj

[05:30] *** fake_space_whale left
[05:33] *** mcmillhj left
[05:40] *** graphene left
[05:41] *** graphene joined
[05:42] *** p6bannerbot sets mode: +v graphene

[05:43] *** araraloren left
[05:44] *** araraloren joined
[05:45] *** p6bannerbot sets mode: +v araraloren

[05:45] *** araraloren left
[05:45] *** araraloren joined
[05:46] *** p6bannerbot sets mode: +v araraloren

[05:46] *** mcmillhj joined
[05:47] *** p6bannerbot sets mode: +v mcmillhj

[05:50] *** molaf left
[05:50] *** kurahaupo left
[05:51] *** mcmillhj left
[05:51] *** kurahaupo joined
[05:52] *** p6bannerbot sets mode: +v kurahaupo

[05:55] *** regreg_ left
[05:56] *** regreg_ joined
[05:57] *** p6bannerbot sets mode: +v regreg_

[05:59] *** Griwes25 joined
[05:59] *** Griwes25 left
[06:08] *** regreg_ left
[06:16] *** epony joined
[06:16] *** p6bannerbot sets mode: +v epony

[06:24] *** troys left
[06:24] *** mcmillhj joined
[06:25] *** p6bannerbot sets mode: +v mcmillhj

[06:29] *** mcmillhj left
[06:32] *** antoniomika joined
[06:32] *** molaf joined
[06:33] *** p6bannerbot sets mode: +v molaf

[06:35] *** |oLa| joined
[06:36] *** p6bannerbot sets mode: +v |oLa|

[06:39] *** antoniomika left
[06:40] *** jushi17 joined
[06:40] *** jushi17 left
[06:42] *** mcmillhj joined
[06:43] *** p6bannerbot sets mode: +v mcmillhj

[06:46] *** kurahaupo left
[06:46] *** kurahaupo joined
[06:47] *** mcmillhj left
[06:47] *** p6bannerbot sets mode: +v kurahaupo

[06:54] *** jmerelo joined
[06:54] *** p6bannerbot sets mode: +v jmerelo

[07:02] *** hami joined
[07:02] *** p6bannerbot sets mode: +v hami

[07:12] *** hami left
[07:18] *** mcmillhj joined
[07:18] *** araraloren_ joined
[07:19] *** p6bannerbot sets mode: +v mcmillhj

[07:19] *** p6bannerbot sets mode: +v araraloren_

[07:20] *** araraloren left
[07:21] *** molaf left
[07:22] *** mcmillhj left
[07:24] *** DarthGandalf joined
[07:24] *** p6bannerbot sets mode: +v DarthGandalf

[07:27] *** lizmat joined
[07:27] *** p6bannerbot sets mode: +v lizmat

[07:35] *** mcmillhj joined
[07:36] *** p6bannerbot sets mode: +v mcmillhj

[07:39] *** zakharyas joined
[07:39] *** mcmillhj left
[07:39] *** p6bannerbot sets mode: +v zakharyas

[07:52] *** hotswaphdd joined
[07:57] *** zakharyas left
[07:59] *** hotswaphdd left
[08:01] *** mcmillhj joined
[08:02] *** p6bannerbot sets mode: +v mcmillhj

[08:04] *** |oLa| left
[08:06] *** mcmillhj left
[08:11] <Geth> ¦ doc: e178989095 | (JJ Merelo)++ | doc/Language/glossary.pod6

[08:11] <Geth> ¦ doc: Moves anchors above and fixes hash links refs #1303

[08:11] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e178989095

[08:11] <synopsebot> Link: https://doc.perl6.org/language/glossary

[08:15] *** mcmillhj joined
[08:15] *** p6bannerbot sets mode: +v mcmillhj

[08:20] *** mcmillhj left
[08:34] *** domidumont joined
[08:34] <CIAvash[m]> .tell kephra_lk look at the last two examples on https://docs.perl6.org/routine/cross

[08:34] <yoleaux> CIAvash[m]: I'll pass your message to kephra_lk.

[08:35] *** p6bannerbot sets mode: +v domidumont

[08:36] *** |oLa| joined
[08:36] *** p6bannerbot sets mode: +v |oLa|

[08:40] *** sena_kun joined
[08:40] *** p6bannerbot sets mode: +v sena_kun

[08:44] *** rindolf joined
[08:44] *** p6bannerbot sets mode: +v rindolf

[08:47] *** mcmillhj joined
[08:48] *** p6bannerbot sets mode: +v mcmillhj

[08:52] *** mcmillhj left
[08:56] *** ambs joined
[08:56] *** p6bannerbot sets mode: +v ambs

[08:58] *** SCHAPiE joined
[08:58] *** p6bannerbot sets mode: +v SCHAPiE

[09:00] *** mcmillhj joined
[09:00] *** p6bannerbot sets mode: +v mcmillhj

[09:04] *** mcmillhj left
[09:09] *** pecastro joined
[09:09] *** p6bannerbot sets mode: +v pecastro

[09:27] *** mcmillhj joined
[09:28] *** p6bannerbot sets mode: +v mcmillhj

[09:32] *** mcmillhj left
[09:50] *** t0d0r joined
[09:50] *** t0d0r left
[09:55] *** robertle joined
[09:55] *** p6bannerbot sets mode: +v robertle

[10:37] <buggable> New CPAN upload: AccountableBagHash-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/AccountableBagHash-0.0.1.tar.gz

[10:42] *** Voldenet joined
[10:42] *** Voldenet left
[10:42] *** Voldenet joined
[10:42] *** p6bannerbot sets mode: +v Voldenet

[10:42] *** graphene left
[10:42] *** p6bannerbot sets mode: +v Voldenet

[10:44] *** graphene joined
[10:44] *** p6bannerbot sets mode: +v graphene

[10:45] *** pjs2 joined
[10:45] *** pjs2 left
[10:48] *** Xliff_ joined
[10:48] *** dogbert2_ joined
[10:49] *** reppie joined
[10:49] *** p6bannerbot sets mode: +v Xliff_

[10:49] *** p6bannerbot sets mode: +v dogbert2_

[10:49] *** [particle]1 joined
[10:49] *** p6bannerbot sets mode: +v reppie

[10:49] *** Gruber joined
[10:50] *** p6bannerbot sets mode: +v [particle]1

[10:50] *** p6bannerbot sets mode: +v Gruber

[10:50] *** stux|RC-- joined
[10:51] *** markk joined
[10:51] *** [ptc]_ joined
[10:51] *** TimToady_ joined
[10:51] *** jjmerelo joined
[10:51] *** p6bannerbot sets mode: +v stux|RC--

[10:52] *** p6bannerbot sets mode: +v markk

[10:52] *** p6bannerbot sets mode: +v [ptc]_

[10:52] *** p6bannerbot sets mode: +v TimToady_

[10:52] *** p6bannerbot sets mode: +v jjmerelo

[10:52] *** profan joined
[10:52] *** moritz_ joined
[10:53] *** cibs_ joined
[10:53] *** jeek_ joined
[10:53] *** ilbelkyr_ joined
[10:53] *** p6bannerbot sets mode: +v ilbelkyr_

[10:53] *** Celelibi_ joined
[10:53] *** p6bannerbot sets mode: +v profan

[10:53] *** p6bannerbot sets mode: +v moritz_

[10:53] *** avarab joined
[10:53] *** avarab left
[10:53] *** avarab joined
[10:53] *** smash_ joined
[10:53] *** kybr_ joined
[10:53] *** p6bannerbot sets mode: +v avarab

[10:53] *** Syrup joined
[10:53] *** xinming_ joined
[10:53] *** p6bannerbot sets mode: +v cibs_

[10:54] *** p6bannerbot sets mode: +v jeek_

[10:54] *** rahogaboom joined
[10:54] *** p6bannerbot sets mode: +v rahogaboom

[10:54] *** p6bannerbot sets mode: +v Celelibi_

[10:54] *** p6bannerbot sets mode: +v avarab

[10:54] *** p6bannerbot sets mode: +v smash_

[10:54] *** p6bannerbot sets mode: +v kybr_

[10:54] *** diego_k joined
[10:54] *** p6bannerbot sets mode: +v Syrup

[10:54] *** p6bannerbot sets mode: +v xinming_

[10:55] *** p6bannerbot sets mode: +v diego_k

[10:56] *** kurahaupo left
[10:56] *** jmerelo left
[10:56] *** [particle] left
[10:56] *** cibs left
[10:56] *** Xliff left
[10:56] *** avar left
[10:56] *** xinming left
[10:56] *** SqrtNegInf left
[10:57] *** avuserow joined
[10:57] *** ccntrq joined
[10:58] *** p6bannerbot sets mode: +v avuserow

[10:58] *** p6bannerbot sets mode: +v ccntrq

[10:58] *** mniip joined
[10:58] *** p6bannerbot sets mode: +v mniip

[10:59] *** CIAvash[m] joined
[10:59] *** p6bannerbot sets mode: +v CIAvash[m]

[11:00] *** Voldenet left
[11:00] *** kurahaupo joined
[11:01] *** Voldenet joined
[11:01] *** Voldenet left
[11:01] *** Voldenet joined
[11:01] *** p6bannerbot sets mode: +v Voldenet

[11:01] *** p6bannerbot sets mode: +v kurahaupo

[11:01] *** p6bannerbot sets mode: +v Voldenet

[11:04] *** CIAvash[m] is now known as CIAvash

[11:18] *** Guest86691 joined
[11:19] *** p6bannerbot sets mode: +v Guest86691

[11:22] *** Guest86691 left
[11:25] *** Syrup left
[11:29] *** SyrupThinker joined
[11:30] *** p6bannerbot sets mode: +v SyrupThinker

[11:33] *** lizmat left
[11:36] *** Zoffix joined
[11:36] *** p6bannerbot sets mode: +v Zoffix

[11:36] <Zoffix> m: say '123' ~~ / :my $a=2; <{ '$a' }> /

[11:36] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «｢2｣␤»

[11:36] <Zoffix> Is this meant to work like that? I'm surprised the variable gets interpreted like that. I would've thought it'd match just as plain string '$a'

[11:41] <sena_kun> well, isn't it `<{}>` which gives you interpolation?

[11:41] <sena_kun> it's described at https://docs.perl6.org/language/regexes.html#Regex_interpolation

[11:41] *** jjmerelo left
[11:41] <sena_kun> >Note that the first two syntax interpolate the string lexically, while <$pattern> and <{$pattern.method}> causes implicit EVAL, which is a known trap.

[11:42] <Zoffix> ok. thanks.

[11:42] *** Zoffix left
[11:42] <Geth> ¦ doc: threadless-screw++ created pull request #2336: Rewrite of Syntax-Identifier section

[11:42] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2336

[11:43] <sena_kun> well, the question may be "aren't `''` quotes should imply "return a plain string here"", but `EVAL '$a'` gives you '5'.

[11:44] <sena_kun> and I guess in case of `<{ $a }>` those quotes are implied, but in `<{ '$a' }>` those are explicit.

[11:44] <sena_kun> just my guess though. :)

[11:50] <tobs> m: say '123' ~~ / :my $a=2; <{ ｢'$a'｣ }> /

[11:50] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «Nil␤»

[11:52] <sena_kun> m: say '123' ~~ / :my $a=2; <{ ｢$a｣ }> /

[11:52] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «｢2｣␤»

[12:11] *** pmurias joined
[12:11] *** p6bannerbot sets mode: +v pmurias

[12:11] <pmurias> do we have documentation how list flattening works?

[12:12] <pmurias> https://docs.perl6.org/language/list - isn't good at all

[12:17] <pmurias> it contains bits of info and examples but it doesn't contain an actuall description how things work

[12:18] *** vike1 left
[12:19] *** rahogaboom left
[12:21] <Geth> ¦ doc: f41418bf0f | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Lock/Async.pod6

[12:21] <Geth> ¦ doc: Make right/wrong examples more similar

[12:21] <Geth> ¦ doc: 

[12:21] <Geth> ¦ doc: To ensure the reader doesn't assume the wrongness comes

[12:21] <Geth> ¦ doc: from lack of variable use.

[12:21] <synopsebot> Link: https://doc.perl6.org/type/Lock::Async

[12:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f41418bf0f

[12:32] *** pmurias left
[12:33] *** pmurias joined
[12:33] *** p6bannerbot sets mode: +v pmurias

[12:38] <Geth> ¦ doc: 89bc20da78 | (Paweł Murias)++ | doc/Type/Str.pod6

[12:38] <Geth> ¦ doc: Fix description of Str.comb($integer)

[12:38] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/89bc20da78

[12:38] <synopsebot> Link: https://doc.perl6.org/type/Str

[12:39] *** Trixis2 joined
[12:39] *** Trixis2 left
[12:47] <buggable> New CPAN upload: Getopt-Advance-1.0.8.tar.gz by ALOREN http://modules.perl6.org/dist/Getopt::Advance:cpan:ALOREN

[13:00] *** andrzejku joined
[13:00] *** p6bannerbot sets mode: +v andrzejku

[13:01] *** ExtraCrispy left
[13:01] *** node80814 joined
[13:01] *** node80814 left
[13:04] *** moser25 joined
[13:04] *** moser25 left
[13:04] *** avarab left
[13:05] *** Bucciarati left
[13:07] *** avar joined
[13:07] *** avar left
[13:07] *** avar joined
[13:07] *** p6bannerbot sets mode: +v avar

[13:07] *** Bucciarati joined
[13:07] *** p6bannerbot sets mode: +v avar

[13:07] *** p6bannerbot sets mode: +v Bucciarati

[13:13] *** MasterDuke joined
[13:13] *** p6bannerbot sets mode: +v MasterDuke

[13:13] *** MasterDuke left
[13:13] *** MasterDuke joined
[13:13] *** herbert.freenode.net sets mode: +v MasterDuke

[13:13] *** p6bannerbot sets mode: +v MasterDuke

[13:14] *** pmurias left
[13:14] *** pmurias joined
[13:14] *** p6bannerbot sets mode: +v pmurias

[13:15] *** aborazmeh joined
[13:15] *** aborazmeh left
[13:15] *** aborazmeh joined
[13:15] *** p6bannerbot sets mode: +v aborazmeh

[13:16] *** p6bannerbot sets mode: +v aborazmeh

[13:17] *** pmurias left
[13:19] *** pmurias joined
[13:19] *** p6bannerbot sets mode: +v pmurias

[13:26] *** pokk14 joined
[13:26] *** pokk14 left
[13:28] *** camelia joined
[13:29] *** p6bannerbot sets mode: +v camelia

[13:30] *** mlen4 joined
[13:30] *** p6bannerbot sets mode: +v mlen4

[13:36] *** Fritz joined
[13:36] *** p6bannerbot sets mode: +v Fritz

[13:40] *** regreg joined
[13:41] *** p6bannerbot sets mode: +v regreg

[13:41] *** mlen4 left
[13:41] *** SqrtNegInf joined
[13:42] *** p6bannerbot sets mode: +v SqrtNegInf

[13:42] <Fritz> Hi

[13:43] <Fritz> This works:        DBIish.connect('Pg', :host<localhost>, :database<agrammon_dev>, :user<postgres>);

[13:43] <Fritz> This doesn't:  my $db-info = (:host<localhost>, :database<agrammon_dev>, :user<postgres>); DBIish.connect('Pg', $db-info);

[13:43] <Fritz> What am I doing wrong?

[13:45] <sena_kun> connect('Pg', |%$db-info);

[13:45] <sena_kun> and better:

[13:45] <Fritz> This is the error message: Too many positionals passed; expected 2 arguments but got 3

[13:45] <sena_kun> my %db-info = host => 'localhost', database => 'foo', user => 'foo';

[13:45] <sena_kun> give me a second...

[13:47] <sena_kun> m: sub f($a, :$b, :$c) { say $a + $b + $b }; my %params = b => 1, c => 2; say f(1, |%params);

[13:47] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «3␤True␤»

[13:47] <sena_kun> of course, way to create a hash isn't important here.

[13:47] <sena_kun> m: sub f($a, :$b, :$c) { say $a + $b + $b }; my %params = :1b, :2c; say f(1, |%params);

[13:47] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «3␤True␤»

[13:48] <Fritz> Ok. So I guess flattening the hash makes it the same list of parameters.

[13:48] <sena_kun> m: sub f($a, :$b, :$c) { say $a + $b + $b }; my %params = :b(1), :c(2); say f(1, |%params);

[13:48] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «3␤True␤»

[13:48] <sena_kun> Fritz, yes, about that. :)

[13:48] <sena_kun> m: sub f($a, :$b, :$c) { say $a + $b + $b }; my $params = :b(1), :c(2); say f(1, |%$params);

[13:48] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «WARNINGS for <tmp>:␤3␤True␤Useless use of ":c(2)" in sink context (lines 1, 1)␤»

[13:48] <Fritz> Thanks very much!

[13:49] <sena_kun> you are welcome!

[13:49] <Fritz> May I ask another one?

[13:49] <sena_kun> sure

[13:50] <Fritz> This fails: require DBIish; DBIish.connect(); with No such method 'connect' for invocant of type 'DBIish'

[13:51] <Fritz> It works (obviously) with    use DBIish;

[13:51] <moritz_> empty connect() works?

[13:52] *** regreg left
[13:52] <Fritz> No. Undeclared routine: connect used at line 181

[13:53] <Fritz> And DBIish::connect  gives   Could not find symbol '&connect'

[13:54] <Fritz> I looked at https://docs.perl6.org/language/modules#require but don't get it.

[13:55] <Fritz> I am trying to use either DB::Pg (if on Linux) or DBIish (if on MacOSX). I works if I just  use DB::Pg; use DBIish;  but that seems both silly and dangerous ...

[13:57] <sena_kun> well, I think that when you do `require DBIish`, you have a package under this name in scope(opposite to having a class under this name in scope). and now I need to remember how to get what you want...

[13:59] <sena_kun> m: use DBIIsh;

[13:59] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «===SORRY!===␤Could not find DBIIsh at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-2/share/perl6␤    CompUnit::R…»

[13:59] <sena_kun> m: use DBIish;

[13:59] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «===SORRY!===␤Could not find DBIish at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-2/share/perl6␤    CompUnit::R…»

[13:59] <sena_kun> star: use DBIish;

[13:59] <Fritz> Ah ... as I am doing this inside a if then else, I guess I could get away with just doing a use XY; inside the if and else blocks?

[14:00] <camelia> star-m 2017.07: ( no output )

[14:00] <sena_kun> star: use DBIish; say DBIish.HOW;

[14:00] <camelia> star-m 2017.07: OUTPUT: «Perl6::Metamodel::ClassHOW.new␤»

[14:00] <sena_kun> star: require DBIish; say DBIish.HOW;

[14:00] <camelia> star-m 2017.07: OUTPUT: «Perl6::Metamodel::PackageHOW.new␤»

[14:01] <sena_kun> Fritz, not sure about that, to be honest.

[14:03] <Fritz> According to https://docs.perl6.org/language/modules#Lexical_module_loading this should do what I want: my $db; if true { use DBIish; $db = DBIish.connect() } else { use DB::Pg; $db = DB::Pg.... }

[14:04] <Fritz> Ok, thanks. I will try that. Seems to be working for the moment.

[14:05] <timotimo> the "use" is at compile time in this code

[14:06] <timotimo> so even though one is in the "then" and one in the "else" branch, both will be run

[14:06] <timotimo> and if either is missing, compilation will fail

[14:06] <Fritz> Ah, stupid me, you are right.

[14:06] <timotimo> https://rakudo.org/post/lexical-require-upgrade-info - this should help

[14:06] <Fritz> Thats why I wanted to require in the first place ...

[14:06] <timotimo> correct

[14:17] *** erana_ left
[14:17] <araraloren_> what about the `use :if`

[14:17] <Fritz> Timo, the link you provides is basically the same info as in https://docs.perl6.org/language/modules#require ... I just cant' figure out what instead of DBIish.connect() I have to use.

[14:17] <timotimo> oh

[14:18] <timotimo> probably ::('DBIish').connect()

[14:18] <timotimo> actually

[14:19] *** pmurias left
[14:21] <timotimo> it depends on how your code looks, but if you have like: my $connection; unless (try require DBIish) === Nil { $connection = (require DBIish).connect(...) }; without $connection { my $driver = (try require DB::Pg); unless $driver === Nil { $connection = $driver.connect(...) } }; without $connection { exit note "please install either DBIish or DB::Pg" }

[14:21] <timotimo> that ought to work

[14:23] <Fritz> This require DBIish; my $db = ::('DBIish').connect('Pg', :user<postgres>, :host<localhost>, :database<agrammon_dev>); gives No such method 'connect' for invocant of type 'DBIish'

[14:24] <Fritz> I know I should add the try stuff, but that would be next.

[14:24] <sena_kun> star: 'require DBIish; ::("DBIish").connect

[14:24] <camelia> star-m 2017.07: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" ␤at <tmp>:1␤------> 3'require DBIish; ::("DBIish").connect7⏏5<EOL>␤    expecting any of:␤        single quotes␤        term␤»

[14:24] <sena_kun> star: 'require DBIish; try ::("DBIish").connect

[14:24] <camelia> star-m 2017.07: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" ␤at <tmp>:1␤------> 3require DBIish; try ::("DBIish").connect7⏏5<EOL>␤    expecting any of:␤        single quotes␤        te…»

[14:25] <sena_kun> star: 'require DBIish; say ::("DBIish").connect

[14:25] <camelia> star-m 2017.07: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" ␤at <tmp>:1␤------> 3require DBIish; say ::("DBIish").connect7⏏5<EOL>␤    expecting any of:␤        single quotes␤        te…»

[14:25] <sena_kun> star: require DBIish; ::("DBIish").connect

[14:25] <camelia> star-m 2017.07: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in method connect at /home/camelia/star-2017.07/share/perl6/site/sources/F18EA8A0FD337C840672427703CC68FA0720FEDF (DBIish) line 29␤  in block <unit> at <tmp> line 1␤␤»

[14:25] <sena_kun> oops

[14:25] <sena_kun> my bad

[14:26] <Fritz> SORRY ... looking at the wrong line (I had a second connect() attempt not commented out.

[14:26] <timotimo> aah, that makes sense

[14:26] <araraloren_> star: say try require DBIish;

[14:26] <camelia> star-m 2017.07: OUTPUT: «(DBIish)␤»

[14:26] <timotimo> yeah, that kind of thing happens to me all the time, too :)

[14:26] <araraloren_> m: say try require DBIish;

[14:26] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «Nil␤»

[14:26] <araraloren_> star: say require DBIish;

[14:26] <camelia> star-m 2017.07: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    DBIish used at line 1␤Undeclared routine:␤    require used at line 1␤␤»

[14:27] <Fritz> So: require DBIish; my $db = ::('DBIish').connect('Pg', :user<postgres>, :host<localhost>, :database<agrammon_dev>);  works fine.

[14:27] <Fritz> Thanks everyone!

[14:27] <timotimo> \o/

[14:27] <araraloren_> o////////

[14:27] <araraloren_> oh

[14:28] *** aborazmeh left
[14:28] <timotimo> that looks painful

[14:30] *** pmurias joined
[14:30] *** p6bannerbot sets mode: +v pmurias

[14:35] <Geth> ¦ doc: sarna++ created pull request #2338: Fix a link

[14:35] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2338

[14:36] <Geth> ¦ doc: 21cc40d03b | sarna++ | doc/Type/IO.pod6

[14:36] <Geth> ¦ doc: Fix a link

[14:36] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/21cc40d03b

[14:36] <Geth> ¦ doc: 5a1c928b0a | (Bartosz Janus)++ (committed using GitHub Web editor) | doc/Type/IO.pod6

[14:36] <Geth> ¦ doc: Merge pull request #2338 from sarna/master

[14:36] <synopsebot> Link: https://doc.perl6.org/type/IO

[14:36] <Geth> ¦ doc: 

[14:36] <Geth> ¦ doc: Fix a link

[14:36] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5a1c928b0a

[14:37] *** ThatDamnRanga15 joined
[14:40] *** OleChees17 joined
[14:40] *** pmurias left
[14:40] *** p6bannerbot sets mode: +v OleChees17

[14:41] *** pmurias joined
[14:41] *** p6bannerbot sets mode: +v pmurias

[14:42] *** ThatDamnRanga15 left
[14:43] *** OleChees17 left
[14:44] *** pmurias left
[14:48] *** aborazmeh joined
[14:48] *** aborazmeh left
[14:48] *** aborazmeh joined
[14:48] *** p6bannerbot sets mode: +v aborazmeh

[14:49] *** p6bannerbot sets mode: +v aborazmeh

[14:49] *** pmurias joined
[14:49] *** p6bannerbot sets mode: +v pmurias

[14:49] *** Fritz left
[14:54] *** pmurias left
[14:56] *** pmurias joined
[14:56] *** p6bannerbot sets mode: +v pmurias

[14:58] *** pmurias left
[14:58] *** plat_8 joined
[14:59] *** p6bannerbot sets mode: +v plat_8

[15:00] *** plat_8 left
[15:00] *** Ven`` joined
[15:01] *** p6bannerbot sets mode: +v Ven``

[15:03] *** aborazmeh left
[15:07] *** MilkmanDan left
[15:08] *** MilkmanDan joined
[15:08] *** p6bannerbot sets mode: +v MilkmanDan

[15:11] *** ndurchx joined
[15:11] *** ndurchx left
[15:11] *** reppie is now known as x[LGWs4x4i]uG2N0

[15:12] *** fake_space_whale joined
[15:13] *** p6bannerbot sets mode: +v fake_space_whale

[15:14] *** pmurias joined
[15:14] *** p6bannerbot sets mode: +v pmurias

[15:23] *** MilkmanDan left
[15:23] <pmurias> is there a tool to show me where a method on something is defined?

[15:24] *** TimToady_ is now known as TimToady

[15:27] *** MilkmanDan joined
[15:27] *** p6bannerbot sets mode: +v MilkmanDan

[15:27] <timotimo> yup

[15:27] <timotimo> s: Str, "comb", \()

[15:27] <SourceBaby> timotimo, Sauce is at https://github.com/rakudo/rakudo/blob/5f3579eb0/src/core/Cool.pm6#L197

[15:28] *** thowe left
[15:30] *** Ven`` left
[15:31] *** Ven`` joined
[15:31] *** lichtkind left
[15:32] *** p6bannerbot sets mode: +v Ven``

[15:32] <pmurias> s: help

[15:32] <SourceBaby> pmurias, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤Undeclared routine:␤    help used at line 6␤␤

[15:33] *** Guest61881 joined
[15:33] <pmurias> s: Seq, 'unique'

[15:33] <SourceBaby> pmurias, Something's wrong: ␤ERR: Type check failed in binding to parameter '&code'; expected Callable but got Method+{is-nodal} (Method+{is-nodal}.new)␤  in sub do-sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 45␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 36␤  in block <unit> at -e li

[15:33] *** Guest61881 left
[15:34] <pmurias> s: Seq, 'unique', \()

[15:34] <SourceBaby> pmurias, Sauce is at https://github.com/rakudo/rakudo/blob/5f3579eb0/src/core/Any-iterable-methods.pm6#L1571

[15:39] *** Kaiepi left
[15:41] <xinming_> m: my %a = (:a(1..5), :b[1..5]);  %a<a>.perl.say; %a<b>.perl.say;

[15:41] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «1..5␤$[1, 2, 3, 4, 5]␤»

[15:41] <xinming_> m: my %a = (:a(1..5) :b[1..5]);  %a<a>.perl.say; %a<b>.perl.say;

[15:41] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «1..5␤1..5␤»

[15:41] <xinming_> Anyone here would clarify this for me? why there are the differences between them?

[15:41] <xinming_> the (:a(1..5), :b[1..5])    vs (:a(1..5)  :b[1..5]);

[15:46] *** pmurias left
[15:46] *** rharper22 joined
[15:47] *** p6bannerbot sets mode: +v rharper22

[15:48] <xinming_> m: %a = (:a<a b c> :c<a b c>);

[15:48] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '%a' is not declared␤at <tmp>:1␤------> 3<BOL>7⏏5%a = (:a<a b c> :c<a b c>);␤»

[15:48] <xinming_> m: my %a = (:a<a b c> :c<a b c>);

[15:48] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «===SORRY!===␤cannot stringify this␤»

[15:48] <xinming_> m: my %a = :a<a b c> :c<a b c>;

[15:48] <camelia> rakudo-moar 5f3579eb0: ( no output )

[15:48] <xinming_> m: my %a = :a<a b c> :c<a b c>; %a.perl.say;

[15:48] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «{:a($("a", "b", "c"))}␤»

[15:48] <xinming_> m: my %a = (:a<a b c> :c<a b c>); %a.perl.say;

[15:48] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «===SORRY!===␤cannot stringify this␤»

[15:48] <xinming_> Is this a bug?   (:a<a b c>  :c<a b c>).perl.say;

[15:48] <xinming_> m: (:a<a b c>  :c<a b c>).perl.say;

[15:48] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «===SORRY!===␤cannot stringify this␤»

[15:49] <geekosaur> known bug and it has nothing to do with .perl

[15:53] *** jmerelo joined
[15:54] *** p6bannerbot sets mode: +v jmerelo

[15:54] *** rharper22 left
[15:56] *** Gamah5 joined
[15:57] <geekosaur> mm, I know we've seen this one but not spotting it. it may be in rt instead of github. basically two consecutive colonpairs gets misparsed

[15:58] <geekosaur> the "SORRY!" means it's blowing up in the compile phase, not runtime

[16:01] <xinming_> Got it, thanks.

[16:03] *** Gamah5 left
[16:09] *** pmurias joined
[16:09] *** p6bannerbot sets mode: +v pmurias

[16:10] <pmurias> https://github.com/perl6/doc/issues/2339 - new docs issue, is it clear enough?

[16:12] *** fedux_ joined
[16:12] *** fedux_ left
[16:14] *** Ven`` left
[16:15] *** ccc joined
[16:16] *** p6bannerbot sets mode: +v ccc

[16:18] <pmurias> in general the docs seem to be confused if something is reference documentation or an introduction

[16:18] <pmurias> I'm not sure how fix that

[16:20] <pmurias> example: in https://docs.perl6.org/language/functions we alude that routines have several forms but we mention only the two most notable forms

[16:21] <xinming_> pmurias: thanks, I'll check them.

[16:23] *** pmurias left
[16:23] *** araraloren_ left
[16:23] <ccc> m: my @a=[^4];-> (Int :@lst) {say @lst}(@a)

[16:23] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «Type check failed in binding to parameter '@lst'; expected Positional[Int] but got Array ($[])␤  in block <unit> at <tmp> line 1␤␤»

[16:24] <jmerelo> m: my @a=[^4];-> (Int :@lst) {say @lst}(|@a)

[16:24] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «Cannot unpack or Capture `0`.␤To create a Capture, add parentheses: \(...)␤If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}␤or missed `:` in signature unpacking? -> &c:(Int) {}␤  in block <unit> at …»

[16:25] <jmerelo> my @a=[^4];-> (Int :@lst) {say @lst}( lst => @a)

[16:25] <ccc> Why does the array get itemized?

[16:25] <jmerelo> m: my @a=[^4];-> (Int :@lst) {say @lst}( lst => @a)

[16:25] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «Too few positionals passed to '<anon>'; expected 1 argument but got 0␤  in block <unit> at <tmp> line 1␤␤»

[16:25] <timotimo> m: my @a = [^4]; say @a.perl

[16:25] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «[0, 1, 2, 3]␤»

[16:26] <ccc> timotimo: Doesn't have the needed Positional[Int] constraint

[16:26] <timotimo> i think the problem is that you're not passing the array

[16:26] <timotimo> and its default value is just Array

[16:26] <jmerelo> m: my @a=[^4];-> (Int @lst) {say @lst}( @a)

[16:26] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «Type check failed in binding to parameter '@lst'; expected Positional[Int] but got Int (0)␤  in block <unit> at <tmp> line 1␤␤»

[16:26] <timotimo> oh, oyu're trying to unpack it

[16:26] <timotimo> m: my Int @a = [^4]; -> Int @lst { say @lst.perl }(@a)

[16:26] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «Array[Int].new(0, 1, 2, 3)␤»

[16:26] <jmerelo> m: my @a:=[^4];-> (Int @lst) {say @lst}( @a)

[16:26] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «Type check failed in binding to parameter '@lst'; expected Positional[Int] but got Int (0)␤  in block <unit> at <tmp> line 1␤␤»

[16:27] <timotimo> the reason why you get 0 instead of Positional[Int] there is that you're telling the signature to unpack the first argument and find an array in its first slot

[16:27] <timotimo> like this:

[16:27] <jmerelo> timotimo: thanks!

[16:27] <timotimo> m: my &foo = -> ($a, $b) { say "a is $a and b is $b" }; foo([1,2])

[16:27] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «a is 1 and b is 2␤»

[16:28] <ccc> I'm sending ONE argument the array INTO one argument and array. Why isn't it doing the expected thing?

[16:29] <ccc> edit -- I'm sending ONE argument the array INTO one argument, an array.

[16:29] <jmerelo> ccc: to be precise, you're sending a Positional into another Positional. 

[16:30] <ccc> yes

[16:30] <ccc> Array is shorter to say than Positional

[16:30] <timotimo> which exact code are we talking about now, ccc?

[16:30] <ccc>  m: my @a=[^4];-> (Int :@lst) {say @lst}(@a)

[16:30] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «Type check failed in binding to parameter '@lst'; expected Positional[Int] but got Array ($[])␤  in block <unit> at <tmp> line 1␤␤»

[16:31] <jmerelo> ccc: not exactly the same, though. In this case the problem is the type. 

[16:31] <timotimo> why do you have the colon there, and why do you have parenthesis around it?

[16:31] <jmerelo> m: my Int @a=[^4];-> (Int :@lst) {say @lst}(@a) 

[16:31] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «Type check failed in binding to parameter '@lst'; expected Positional[Int] but got Array ($[])␤  in block <unit> at <tmp> line 1␤␤»

[16:31] <jmerelo> m: my Int @a=[^4];-> (Int @lst) {say @lst}(@a) 

[16:31] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «Type check failed in binding to parameter '@lst'; expected Positional[Int] but got Int (0)␤  in block <unit> at <tmp> line 1␤␤»

[16:31] <timotimo> m: sub test(Int :@a) {}()

[16:31] <camelia> rakudo-moar 5f3579eb0: ( no output )

[16:31] <jmerelo> m: my Int @a=[^4];-> Int @lst {say @lst}(@a) 

[16:31] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «[0 1 2 3]␤»

[16:31] <ccc> Ah - I have a named parameter! Confusing error message.

[16:32] <jmerelo> The parenthesis is doing the itemization... 

[16:32] <ccc>  m: my @a=[^4];-> (Int :@lst) {say @lst}(:lst(@a))

[16:32] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «Too few positionals passed to '<anon>'; expected 1 argument but got 0␤  in block <unit> at <tmp> line 1␤␤»

[16:32] <jmerelo> m: my  @a=[^4];-> @lst {say @lst}(@a) 

[16:32] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «[0 1 2 3]␤»

[16:32] <ccc> jmerelo: I NEED it to be type constrained

[16:33] <timotimo> m: -> Int @test { say "@test is good" }([^4])

[16:33] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «Type check failed in binding to parameter '@test'; expected Positional[Int] but got Array ($[0, 1, 2, 3])␤  in block <unit> at <tmp> line 1␤␤»

[16:33] <timotimo> m: -> Int @test { say "@test is good" }(my Int @ = [^4])

[16:33] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «@test is good␤»

[16:33] <jmerelo> ccc: just take the first form. The thing is eliminating the parentheses. 

[16:33] <timotimo> m: -> Int @test { say "@test is good" }(Array[Int].new(^4))

[16:33] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «@test is good␤»

[16:33] <timotimo> m: -> Int @test { say "@test[] is good" }(Array[Int].new(^4))

[16:33] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «0 1 2 3 is good␤»

[16:33] <timotimo> m: -> Int @test { say [email@hidden.address] is good" }(Array[Int].new(^4))

[16:33] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «Array[Int].new(0, 1, 2, 3) is good␤»

[16:33] *** pmurias joined
[16:33] *** p6bannerbot sets mode: +v pmurias

[16:34] <jmerelo> Hi, pmurias . You've probably seen my answer to your issue in perl6/doc, right?

[16:35] <ccc> In the code I'm working on the type constraint is on a method.

[16:36] <ccc> timotimo: Can you make that work with sub (Int :@a) ...

[16:37] <timotimo> m: sub do-it(Int @test) { say [email@hidden.address] is good" }; do-it(Array[Int].new(^4))

[16:37] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «Array[Int].new(0, 1, 2, 3) is good␤»

[16:38] <ccc>  m: my @a=[^4];-> (Int @lst) {say @lst}(@a))

[16:38] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unexpected closing bracket␤at <tmp>:1␤------> 3my @a=[^4];-> (Int @lst) {say @lst}(@a)7⏏5)␤»

[16:38] *** Trieste24 joined
[16:38] <timotimo> you're missing a very important point here

[16:38] <timotimo> the parenthesis you're using there have a meaning that you do not want

[16:39] *** p6bannerbot sets mode: +v Trieste24

[16:39] <ccc> m: mya @a=[^4];sub (Int @a) {say @a}(@a)

[16:39] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@a' is not declared␤at <tmp>:1␤------> 3mya 7⏏5@a=[^4];sub (Int @a) {say @a}(@a)␤»

[16:39] <ccc> m: my @a=[^4];sub (Int @a) {say @a}(@a)

[16:39] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «Type check failed in binding to parameter '@a'; expected Positional[Int] but got Array ($[0, 1, 2, 3])␤  in sub  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:39] <timotimo> well, you need to pass an Array-Of-Int, not just an array that happens to have ints in it at that moment

[16:40] <ccc> I still don't understand what's wrong with the above.

[16:40] <timotimo> the last one?

[16:40] <ccc> yes

[16:40] <timotimo> m: my Int @a=[^4];sub (Int @a) {say @a}(@a)

[16:40] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «[0 1 2 3]␤»

[16:40] <timotimo> this is how you make it work

[16:41] *** titsuki left
[16:41] <ccc> So user's of my class have to use put the darn thing in a variable?

[16:42] <timotimo> no

[16:42] <timotimo> m: sub (Int @a) {say @a}(Array[Int].new(1, 2, 3, 4))

[16:42] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «[1 2 3 4]␤»

[16:42] <ccc> I'm passing an array of int

[16:42] <timotimo> no variable needed

[16:42] <timotimo> alternatively, you perhaps want this instead:

[16:43] <timotimo> m: sub do-it(@a where .all ~~ Int) {say @a} do-it([1, 2, 3, 4]); do-it([1, 2, "foo"])

[16:43] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3sub do-it(@a where .all ~~ Int) {say @a}7⏏5 do-it([1, 2, 3, 4]); do-it([1, 2, "foo"␤    expecting any of:␤       …»

[16:43] <timotimo> m: sub do-it(@a where .all ~~ Int) {say @a}; do-it([1, 2, 3, 4]); do-it([1, 2, "foo"])

[16:43] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «[1 2 3 4]␤Constraint type check failed in binding to parameter '@a'; expected anonymous constraint to be met but got Array ($[1, 2, "foo"])␤  in sub do-it at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:43] *** Trieste24 left
[16:44] <ccc> m: my @a=[^4];sub (@a where .all ~~ Int) {say @a}(@a)

[16:44] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «[0 1 2 3]␤»

[16:46] <ccc> Ok, so the lesson is that the parameter unpacking doesn't descend into the container to check Positional[Foo], the sub or method has to do it itself?

[16:46] <timotimo> types in perl6 are nominal, which means the name of the type is what counts

[16:47] <timotimo> except it's not a name as in "string", but as in parameterized roles and such

[16:48] <ccc> Well that makes Array[Foo] much less useful as part of an API. If used, it's a traps for users.

[16:48] <timotimo> m: sub do-the-slow-thing(@a where .all ~~ Int) { my $i = 0; while $i < @a.end { say @a[$i]; sleep 0.1 } }; my @haha = 1, 2, 3, 4, 5, 6, 7, 8; start { do-the-slow-thing(@haha); }; sleep 0.2; @haha[7] = "LOL";

[16:48] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «1␤1␤»

[16:49] <timotimo> m: sub do-the-slow-thing(@a where .all ~~ Int) { my $i = 0; while $i < @a.end { say @a[$i]; sleep 0.1 } }; my @haha = 1, 2, 3, 4, 5, 6, 7, 8; my $are-you-finished = start { do-the-slow-thing(@haha); }; sleep 0.2; @haha[7] = "LOL"; await $are-you-finished

[16:49] <timotimo> i forgot to $i++

[16:49] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «(timeout)1␤»

[16:49] <timotimo> m: sub do-the-slow-thing(@a where .all ~~ Int) { my $i = 0; while $i < @a.end { say @a[$i++]; sleep 0.1 } }; my @haha = 1, 2, 3, 4, 5, 6, 7, 8; my $are-you-finished = start { do-the-slow-thing(@haha); }; sleep 0.2; @haha[7] = "LOL"; await $are-you-finished

[16:49] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «1␤2␤3␤4␤5␤6␤7␤»

[16:49] <timotimo> oh?

[16:49] <timotimo> m: sub do-the-slow-thing(@a where .all ~~ Int) { my $i = 0; while $i < @a.end { say @a[$i++]; sleep 0.1 } }; my @haha = 1, 2, 3, 4, 5, 6, 7, 8; my $are-you-finished = start { do-the-slow-thing(@haha); }; sleep 0.1; @haha[5] = "LOL"; await $are-you-finished

[16:49] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «1␤2␤3␤4␤5␤LOL␤7␤»

[16:49] <timotimo> nice array of ints you have there

[16:50] <timotimo> would be a shame if someone put a LOL in it

[16:50] <pmurias> jmerelo: I'm looking at the answer...

[16:51] <timotimo> how would you like sub test(Int @foo) to behave?

[16:53] <ccc> Look if you're expecting a container to contain nothing but type Foo, SOMETHING has to check it. We're just sweeping the difficulty to the caller if he has to do Array[Foo].new.

[16:53] <timotimo> either that or you use the "where" or a named subset that has the check within it

[16:54] <timotimo> https://github.com/zoffixznet/perl6-Subset-Helper - perhaps this is also interesting to you

[16:55] <ccc> Yes I've played around with subset already.

[16:56] <timotimo> if you want to, you can invert the responsibilities and have your library call a user-provided function and pass the container they want the user to fill

[16:56] <ccc> If I'm designing an API for a module, I believe it's my duty to take care of the tedious little gotchas. It shouldn't be dumped on the user of the module.

[16:56] <timotimo> right, which it won't be if you use subsets, right?

[16:56] <timotimo> that was worded kind of poorly

[16:57] <timotimo> the "tell don't ask" principle, or something

[16:57] <timotimo> which is also good for multithreaded stuff, because it's easier to not mess up data accesses

[16:59] <timotimo> i wish i remembered what talk it was from, jnthn had mentioned that in one place; probably the "8 ways to do concurrent programming" one? in the section about actors and monitors?

[16:59] <jnthn> Thanks for multi-dispatch, it's entirely possible to have an API that both efficiently handles Array[Int] (e.g. O(1) check) *and* has a candidate that delegates to that doing the O(n) check.

[16:59] <yoleaux> 12:15Z <Zoffix> jnthn: RE https://github.com/perl6/roast/commit/8b5e39093   Do you think there's some similarity between Lock::Async.lock/.unlock and IO::Handle.lock/.unlock? Because in that commit we spec Lock::Async.unlock to throw if not locked, but IO::Handle.unlock silently does nothing. Was wondering if this asymetry is acceptable.

[16:59] <jnthn> oops, *thanks *to* multi dispatch

[16:59] <timotimo> wow, that was a *fast* response to me mentioning you

[17:00] <jnthn> hah, was just glancing the converstaion :)

[17:00] <timotimo> convertion station?

[17:00] <jnthn> *conversation :P

[17:01] <jnthn> Yes, there's a mention of tell don't ask in that talk; also there's probably at least as much on it in my Objects ∩ Concurrency talk :)

[17:01] <pmurias> jmerelo: I didn't even notice that flattening was described in more detail in the List class documentation

[17:01] <timotimo> then that's potentially the better one

[17:02] <timotimo> i should ingest more talks about design in that kind of space, surely

[17:02] <jmerelo> pmurias: there's almost always the two parts: a detailed method-by-method documentation, and then a tutorial. Anyway, if you find something missing, please reformulate. Or if it's not clear enough that flattening was described there with more detail.

[17:03] <pmurias> "except when they are not itemized or they are the single argument to an operation such as append:" seems unclear what operations flatten

[17:05] *** bluezinc21 joined
[17:05] *** bluezinc21 left
[17:05] <jmerelo> pmurias: please clarify that in the issue, if you don't mind.

[17:05] <jnthn> .tell Zoffix Both Lock and Lock::Async will complain about unlock while not held (difference being that Lock::Async isn't recursive). Both of those are in-process locks. File locks are just calling some OS-provided API; I'm guessing it doesn't error out, or we ignore the error. So we'd have to try to track it ourselves, though I don't know if we can without making a new gotcha. Needs exploring some more.

[17:05] <yoleaux> jnthn: I'll pass your message to Zoffix.

[17:06] <pmurias> jmerelo: how should I reference particular unclear sentences? 

[17:06] <pmurias> quote them?

[17:06] <jmerelo> pmurias: yep, that would help. 

[17:07] *** AlexDaniel joined
[17:07] *** p6bannerbot sets mode: +v AlexDaniel

[17:08] <pmurias> jmerelo: doing the split between tutorial and reference documention purely in the way that method references are reference material and other pages are tutorial does seem to have problems

[17:08] *** shareable6 joined
[17:08] *** ChanServ sets mode: +v shareable6

[17:08] *** bloatable6 joined
[17:08] *** greppable6 joined
[17:08] *** ChanServ sets mode: +v greppable6

[17:09] *** p6bannerbot sets mode: +v shareable6

[17:09] <pmurias> the per type pages seem to be gathering cookbook style hints and the tutorial pages are sometimes growing long lists of exhaustive variants of things

[17:09] *** p6bannerbot sets mode: +v bloatable6

[17:09] <jmerelo> pmurias: it certainly does. Sometimes methods include several examples, and, well, "tutorialize" as long as there's not a lot of other concepts in there.

[17:09] *** p6bannerbot sets mode: +v greppable6

[17:10] <jmerelo> pmurias: that's the style of some of the doccers, yes. I mean, style is not uniform. 

[17:10] <jmerelo> pmurias: that means that reference is sometimes too much tutorialish and tutorials too much referenceish. 

[17:11] *** graphene left
[17:11] <jmerelo> pmurias: but changing to another kind of structure would be huge, and given current resources, simply will not be done. So we have to make do improving what we can, given current organization.

[17:12] *** graphene joined
[17:13] *** p6bannerbot sets mode: +v graphene

[17:19] <pmurias> jmerelo: splitting up some pages into reference documentation and tutorial could be done on invidual basis

[17:20] <pmurias> it's not something that requires some kind of huge one time investment

[17:25] <jmerelo> pmurias: as long as we know which ones we should split, that's correct. 

[17:29] *** khisanth_ left
[17:43] *** khisanth_ joined
[17:44] *** p6bannerbot sets mode: +v khisanth_

[17:55] *** dogsec24 joined
[17:55] *** dogsec24 left
[17:55] *** statisfiable6 joined
[17:56] *** p6bannerbot sets mode: +v statisfiable6

[17:58] *** andrzejku left
[17:58] *** jemershaw16 joined
[17:59] *** p6bannerbot sets mode: +v jemershaw16

[18:03] *** AlexDaniel left
[18:04] *** AlexDaniel joined
[18:04] *** p6bannerbot sets mode: +v AlexDaniel

[18:06] *** jemershaw16 left
[18:06] *** pmurias left
[18:10] *** pmurias joined
[18:10] *** p6bannerbot sets mode: +v pmurias

[18:15] *** Gruber is now known as Grrrr

[18:20] *** jmerelo left
[18:25] *** Kaiepi joined
[18:26] *** p6bannerbot sets mode: +v Kaiepi

[18:28] *** Kaiepi left
[18:29] *** Kaiepi joined
[18:30] *** p6bannerbot sets mode: +v Kaiepi

[18:34] *** Kaiepi left
[18:41] *** Kaiepi joined
[18:41] *** pmurias left
[18:42] *** p6bannerbot sets mode: +v Kaiepi

[18:42] *** pmurias joined
[18:42] *** p6bannerbot sets mode: +v pmurias

[18:46] <mst> https://glot.io/snippets/f59gs0jd0d

[18:46] <mst> does rakudo not try and spot things like that given the type info available?

[18:47] *** petercommand joined
[18:47] *** p6bannerbot sets mode: +v petercommand

[18:51] <masak> mst: not yet, no

[18:51] <mst> ah

[18:52] <masak> there's plenty of low-hanging fruit there that doesn't happen at compile time

[18:53] <masak> not sure your case is the lowest-hanging, since it seems to rely on propagation of type information along the execution flow... but still, static typechecking has a long way to go in Rakudo

[18:53] <masak> I'm not aware that the spec says much about static typechecking one way or another

[18:59] *** domidumont left
[19:04] *** zxcvz joined
[19:05] *** p6bannerbot sets mode: +v zxcvz

[19:05] *** pmurias left
[19:07] *** pmurias joined
[19:07] *** p6bannerbot sets mode: +v pmurias

[19:19] *** damaxi joined
[19:20] *** p6bannerbot sets mode: +v damaxi

[19:23] *** wac16 joined
[19:24] *** p6bannerbot sets mode: +v wac16

[19:29] *** wac16 left
[19:36] *** pmurias left
[19:37] *** pmurias joined
[19:37] *** p6bannerbot sets mode: +v pmurias

[19:38] *** pmurias left
[19:42] *** pmurias joined
[19:42] *** p6bannerbot sets mode: +v pmurias

[19:45] <jnthn> masak: I think successive versions of the spec (that is, test suite) will gradually add more things as being detected at compile time; the introduction of such things needs to happen at langauge version boundaries, though.

[19:46] <jnthn> masak: It's fair to say that hasn't been a particular focus so far, though.

[19:51] *** pmurias left
[19:53] *** zuzabrik joined
[19:53] *** zuzabrik left
[19:54] *** kurahaupo left
[19:55] *** kurahaupo joined
[19:55] *** vike1 joined
[19:55] *** p6bannerbot sets mode: +v kurahaupo

[19:56] *** p6bannerbot sets mode: +v vike1

[19:56] *** pmurias joined
[19:56] *** p6bannerbot sets mode: +v pmurias

[19:58] <pmurias> masak: re static type checking, a big problem with that is that you can either disallow programs or allowed type errors at runtime

[19:58] <pmurias> * disallow valid programs

[19:58] <masak> jnthn: apologies, my use of "the spec" is archaic. I meant the synopses.

[19:59] <masak> pmurias: would it be so bad to disallow mst's example program at compile time instead of failing at run time?

[19:59] <masak> pmurias: I don't think I see your point about a big problem

[20:00] <jnthn> pmurias: We may indeed make some programs fail by detecting problems they never concretely run into at runtime, yes, thus my comment about why extra checks want to come in at language version bumps.

[20:01] <masak> oh right, true

[20:01] <pmurias> masak: I mean you can either add a static type system *or* catch some type errors in an adhoc manner

[20:01] <masak> agree it makes sense to turn on such strictures either behind a pragma, or at version boundaries

[20:02] <jnthn> I don't really understand the statement "add a static type system". Perl 6 *has* a type system. We don't currently perform many possible analyses that it makes possible.

[20:03] <jnthn> (Compile time analyses, to be clear)

[20:03] *** pmurias left
[20:03] <jnthn> But rather defer all enforcement until runtime. Bringing forward the point that we detect problems isn't adding a static type system, it's just better exploiting the one we have.

[20:04] *** kurahaupo left
[20:04] *** kurahaupo joined
[20:05] <masak> it is a good point though that an improved static type system might start flagging up things that never actually caused problems in a working program

[20:05] *** p6bannerbot sets mode: +v kurahaupo

[20:06] <jnthn> Indeed.

[20:07] * hahainternet would ♥ to see improved static typing

[20:07] <jnthn> Ah well, something to take some steps on for 6.e :)

[20:10] *** pmurias joined
[20:10] *** p6bannerbot sets mode: +v pmurias

[20:13] <pmurias> jnthn: by adding a static type system I mean in the sense we could have a TypeScript like TypedPerl6 slang that would enforce type safety at compile time

[20:13] <pmurias> jnthn: as opposed to the compiler catching obvious runtime errors at compile time

[20:14] <jnthn> pmurias: That could happen *too*, but there's already bags of scope for doing more in core.

[20:14] <jnthn> pmurias: With the type system we already have in the langauge.

[20:14] <jnthn> Of course, I've no objections to somebody working on a slang like you describe also. :)

[20:15] <diakopter> jnthn: typo "thanks to these change."

[20:15] <jnthn> Where?

[20:16] <jnthn> oh, I found it

[20:16] <pmurias> is changing the type hierarchy at runtime disallowed in Perl 6?

[20:17] <jnthn> In the default MOP, we don't really allow for that. Nobody has terribly missed it. :)

[20:18] * jnthn afk for a bit

[20:18] <jnthn> diakopter: Fixed, thanks

[20:21] * pmurias has think if that would allow any crazy optimizations for the js backend :)

[20:28] <Xliff_> What's the latest release of rakudo?

[20:29] <El_Che> 09

[20:33] *** damaxi left
[20:43] *** pecastro left
[20:47] *** pecastro joined
[20:48] *** p6bannerbot sets mode: +v pecastro

[20:50] *** kurahaupo left
[20:51] *** kurahaupo joined
[20:51] <Xliff_> Does anyone know why this error would come up in stage parse?

[20:51] <Xliff_> Cannot look up attributes in a GTK::RadioToolButton type objec

[20:52] *** p6bannerbot sets mode: +v kurahaupo

[20:54] <timotimo> Xliff_: does it point to anywhere specific if you use --ll-exception?

[20:54] <Xliff_> Will check

[20:58] <Xliff_> Yes, but even with that location, the error makes no sense.

[21:11] <Xliff_> Found it. The problem was using ::?CLASS.name in the DEPRECATED trait message.

[21:26] *** zonum9 joined
[21:26] *** zonum9 left
[21:26] <timotimo> ah, instead of .^name?

[21:27] <timotimo> and for some reason the class also had a "name" method?

[21:28] <Xliff_> Yeah. Belonging to the top-level superclass.

[21:29] <Xliff_> So does ::?CLASS just replace the current class type object?

[21:29] <Xliff_> I thought it was a meta object.

[21:30] *** lichtkind joined
[21:31] <timotimo> you mean represent?

[21:31] <timotimo> i do believe you get the type object from it

[21:31] *** p6bannerbot sets mode: +v lichtkind

[21:37] *** leont joined
[21:37] *** p6bannerbot sets mode: +v leont

[21:43] *** fcbsd19 joined
[21:43] *** p6bannerbot sets mode: +v fcbsd19

[21:46] *** kybr_ left
[21:46] *** kybr joined
[21:47] *** p6bannerbot sets mode: +v kybr

[21:48] *** fcbsd19 left
[21:50] *** quester joined
[21:50] *** p6bannerbot sets mode: +v quester

[21:56] <geekosaur> m: dd ::?CLASS

[21:56] <camelia> rakudo-moar 5f3579eb0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤No such symbol '::?CLASS'␤at <tmp>:1␤------> 3dd ::?CLASS7⏏5<EOL>␤»

[21:56] <geekosaur> guess that follows

[22:02] *** panicbit joined
[22:03] *** p6bannerbot sets mode: +v panicbit

[22:08] *** pmurias left
[22:12] *** sena_kun left
[22:47] *** Graypup_ joined
[22:47] *** Graypup_ left
[22:53] *** kensanata joined
[22:53] *** p6bannerbot sets mode: +v kensanata

[23:16] *** pecastro left
[23:23] *** rindolf left
[23:25] *** sclv8 joined
[23:26] *** p6bannerbot sets mode: +v sclv8

[23:30] *** sclv8 left
[23:34] *** zampa8 joined
[23:34] *** zampa8 left
[23:51] *** kensanata left
[23:53] *** graphene left
[23:54] *** mfa29810 joined
[23:55] *** graphene joined
[23:55] *** p6bannerbot sets mode: +v graphene

[23:57] *** mfa29810 left
[23:59] *** aborazmeh joined
[23:59] *** aborazmeh left
[23:59] *** aborazmeh joined
[23:59] *** p6bannerbot sets mode: +v aborazmeh

