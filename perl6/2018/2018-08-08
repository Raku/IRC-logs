[00:09] *** w_richard_w joined
[00:09] *** p6bannerbot sets mode: +v w_richard_w

[00:19] *** [particle] left
[00:20] <Kaiepi> glad i started scripting writing boilerplate because this would've been hell to type manually https://hastebin.com/cekusifolo.cpp

[00:20] *** [particle] joined
[00:20] *** p6bannerbot sets mode: +v [particle]

[00:21] <buggable> New CPAN upload: AttrX-Mooish-v0.0.1.tar.gz by VRURG https://cpan.metacpan.org/authors/id/V/VR/VRURG/Perl6/AttrX-Mooish-v0.0.1.tar.gz

[00:24] *** Sgeo_ left
[00:29] *** [particle]1 joined
[00:30] *** [particle] left
[00:30] *** p6bannerbot sets mode: +v [particle]1

[00:34] *** [particle]1 left
[00:35] *** [particle] joined
[00:35] *** p6bannerbot sets mode: +v [particle]

[00:40] <lookatme_q> :)

[00:41] <buggable> New CPAN upload: AttrX-Mooish-v0.0.2.tar.gz by VRURG https://cpan.metacpan.org/authors/id/V/VR/VRURG/Perl6/AttrX-Mooish-v0.0.2.tar.gz

[00:43] <Kaiepi> m: use nqp; my $size = 1; my native sa_family_t is nativesize(nqp::unbox_i($size)) is Int is unsigned { }

[00:43] <camelia> rakudo-moar 677f23fb3: OUTPUT: «===SORRY!===␤Cannot unbox a type object (Any) to an int.␤»

[00:43] <Kaiepi> m: use nqp; my Int $size = 1; my native sa_family_t is nativesize(nqp::unbox_i($size)) is Int is unsigned { }

[00:43] <camelia> rakudo-moar 677f23fb3: OUTPUT: «===SORRY!===␤Cannot unbox a type object (Int) to an int.␤»

[00:43] <Kaiepi> m: use nqp; my Int $size = 1; my native sa_family_t is nativesize(nqp::box_i($size)) is Int is unsigned { }

[00:43] <camelia> rakudo-moar 677f23fb3: OUTPUT: «===SORRY!===␤Arg count 1 doesn't equal required operand count 3 for op 'box_i'␤»

[00:43] <timotimo> you need a compile-time-known value in the trait

[00:43] <Kaiepi> fuck

[00:44] <timotimo> or use the MOP to build it up

[00:44] <Kaiepi> would it work if i handled it in a BEGIN block?

[00:44] <timotimo> as long as the int $size is in there as well

[00:44] <timotimo> how come you don't know the size at compile time?

[00:45] <Kaiepi> because what i'm trying to do is define some native types for sa_family_t, socklen_t, etc. based off a nativecall function that returns a struct containing the size of the type and whether or not it's unsigned

[00:46] <Kaiepi> i might be able to do that at compile time though

[00:47] <timotimo> yes, you definitely can

[00:49] *** [particle] left
[00:52] *** Sgeo joined
[00:53] *** p6bannerbot sets mode: +v Sgeo

[00:55] *** lex joined
[00:56] *** [particle] joined
[00:56] *** p6bannerbot sets mode: +v lex

[00:57] *** p6bannerbot sets mode: +v [particle]

[01:00] <lookatme_q> looks like great, that's better than the subset

[01:01] *** lex is now known as lindylex

[01:02] *** [particle] left
[01:04] *** [particle] joined
[01:05] *** p6bannerbot sets mode: +v [particle]

[01:10] *** lindylex left
[01:14] *** benjikun left
[01:19] <Kaiepi> timotimo, when i try to run this, it tells me i can't look up attributes in a Native::Socket::const_info class https://hastebin.com/upiyukapax.pl

[01:21] <Kaiepi> m: BEGIN { my \size = 4; my native foo is Int is nativesize(size) is unsigned { } }

[01:21] <camelia> rakudo-moar 677f23fb3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤'foo' cannot inherit from 'nativesize' because it is unknown.␤at <tmp>:1␤»

[01:21] <Kaiepi> m: use NativeCall; BEGIN { my \size = 4; my native foo is Int is nativesize(size) is unsigned { } }

[01:21] <camelia> rakudo-moar 677f23fb3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤'foo' cannot inherit from 'nativesize' because it is unknown.␤at <tmp>:1␤»

[01:22] <Kaiepi> m: BEGIN { use NativeCall; my \size = 4; my native foo is Int is nativesize(size) is unsigned { } }

[01:22] <camelia> rakudo-moar 677f23fb3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤'foo' cannot inherit from 'nativesize' because it is unknown.␤at <tmp>:1␤»

[01:22] <Kaiepi> hm

[01:23] <geekosaur> one issue here that might or might not be related to *this* error: the name size exists at compile time, but its value isn't until runtime. but needs to be compiletime to be used in a trait

[01:23] <geekosaur> BEGIN my \size = 4;

[01:28] <timotimo> or just "constant size = 4"

[01:31] <Kaiepi> m: BEGIN { use NativeCall; constant size = 4; my native foo is Int is nativesize(size) is unsigned { } }

[01:31] <camelia> rakudo-moar 677f23fb3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤P6opaque: missing attribute protocol in compose of foo␤at <tmp>:1␤»

[01:32] <Kaiepi> m: BEGIN { use NativeCall; constant int size = 4; my native foo is Int is nativesize(size) is unsigned { } }

[01:32] <camelia> rakudo-moar 677f23fb3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing initializer on constant declaration␤at <tmp>:1␤------> 3BEGIN { use NativeCall; constant int7⏏5 size = 4; my native foo is Int is nativ␤»

[01:32] <Kaiepi> m: BEGIN { use NativeCall; constant Int size = 4; my native foo is Int is nativesize(size) is unsigned { } }

[01:32] <camelia> rakudo-moar 677f23fb3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing initializer on constant declaration␤at <tmp>:1␤------> 3BEGIN { use NativeCall; constant Int7⏏5 size = 4; my native foo is Int is nativ␤»

[01:33] <Kaiepi> m: constant size = 4; BEGIN { my native foo is Int is nativesize(size) is unsigned { } }

[01:33] <camelia> rakudo-moar 677f23fb3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤P6opaque: missing attribute protocol in compose of foo␤at <tmp>:1␤»

[01:34] <timotimo> "native" isn't supposed to be used by users

[01:35] <Kaiepi> oh

[01:36] <Kaiepi> this is my latest attempt without native, but it segfaults https://hastebin.com/rahevihude.rb

[01:37] <timotimo> you know that CStruct will do a pointer dereference, right?

[01:40] <Kaiepi> wdym? like making the c for __socklen_t__ return a pointer to a struct wouldn't require changing the sub to return Pointer[const_info]?

[01:40] <timotimo> correct

[01:40] <Kaiepi> i'll see if that fixes this

[01:40] <timotimo> returning a struct from a c function isn't specced clearly

[01:40] <timotimo> we actually had windows crashes because we were trying to use a struct value returned from a function

[01:42] *** molaf left
[01:47] *** Kaiepi left
[01:50] *** astj left
[01:52] *** Kaiepi joined
[01:53] *** p6bannerbot sets mode: +v Kaiepi

[01:53] <Kaiepi> timotimo, i changed it to pass the struct to the c function instead of having the c function initialize it and it works now

[01:53] <timotimo> that's a good idea

[01:53] <timotimo> that makes memory ownership handling simpler, too

[01:54] <Kaiepi> thanks for the help

[01:54] <timotimo> YW

[01:54] *** molaf joined
[01:55] *** p6bannerbot sets mode: +v molaf

[02:11] *** RubioTerra joined
[02:11] *** p6bannerbot sets mode: +v RubioTerra

[02:11] <RubioTerra> Hello

[02:12] <RubioTerra> This little program steadly consumes memory: 'use Inline::Perl5; use Mojo::DOM:from<Perl5>; Mojo::DOM.new("<html><body><h1>Hey!</h1></body></html>") for ^1_000_000;'

[02:12] *** eliasr left
[02:12] <RubioTerra> Shouldn't it gc the objects

[02:12] <RubioTerra> ?

[02:19] <timotimo> i don't know how exactly Inline::Perl5 handles memory, but yeah, it should

[02:24] <RubioTerra> Yes, I suspect it has something to do with Inline::Perl5

[02:33] *** dwarring left
[02:46] *** RubioTerra left
[02:50] *** ptx013 joined
[02:51] *** p6bannerbot sets mode: +v ptx013

[02:55] *** ptx013 left
[02:58] *** uzl joined
[02:59] *** p6bannerbot sets mode: +v uzl

[02:59] <uzl> m: my $x = set(set(0,1), set(10,11), set(12, 13), set(14, 15), set(16, 17), set(18, 19), set(2, 3), set(4, 5), set(6, 7), set(8, 9))

[02:59] <yoleaux> 31 Jul 2018 21:26Z <MasterDuke> uzl: i would probably say "prepending : to each variable", since it comes before the variable name

[02:59] <camelia> rakudo-moar 677f23fb3: ( no output )

[02:59] <yoleaux> 31 Jul 2018 21:32Z <MasterDuke> uzl: also, you have '$surname' in the aliases example signature, but use '$last-name' in the body of the routine

[02:59] <yoleaux> 31 Jul 2018 21:33Z <MasterDuke> uzl: oh, and you say two kinds of aliases, but both of your list items are numbered 1

[03:04] <uzl> .tell MasterDuke You're right! It should be 'prepending' given that it comes before the variable. I couldn't get the numbered list right so I went with bullet points instead. Overall, great catch. Thanks!

[03:04] <yoleaux> uzl: I'll pass your message to MasterDuke.

[03:04] <uzl> m: my $x = set(set(0,1), set(10,11), set(12, 13), set(14, 15), set(16, 17), set(18, 19), set(2, 3), set(4, 5), set(6, 7), set(8, 9))

[03:04] <camelia> rakudo-moar 677f23fb3: ( no output )

[03:05] <uzl> m: my $x = set(set(0,1), set(10,11), set(12, 13), set(14, 15), set(16, 17), set(18, 19), set(2, 3), set(4, 5), set(6, 7), set(8, 9)); my $y = map { sort($^a+1, $^b+1).join('/') }, $x.Str.comb(/\d+/); sat $y;

[03:05] <camelia> rakudo-moar 677f23fb3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    sat used at line 1. Did you mean 'set', 'say'?␤␤»

[03:05] <uzl> m: my $x = set(set(0,1), set(10,11), set(12, 13), set(14, 15), set(16, 17), set(18, 19), set(2, 3), set(4, 5), set(6, 7), set(8, 9)); my $y = map { sort($^a+1, $^b+1).join('/') }, $x.Str.comb(/\d+/); say $y;

[03:05] <camelia> rakudo-moar 677f23fb3: OUTPUT: «(7/8 1/2 5/6 19/20 15/16 13/14 3/4 9/10 17/18 11/12)␤»

[03:05] <uzl> m: my $x = set(set(0,1), set(10,11), set(12, 13), set(14, 15), set(16, 17), set(18, 19), set(2, 3), set(4, 5), set(6, 7), set(8, 9)); my $y = map { sort($^a+1, $^b+1).join('/') }, $x.Str.comb(/\d+/); say $y.sort;

[03:05] <camelia> rakudo-moar 677f23fb3: OUTPUT: «(1/2 11/12 13/14 15/16 17/18 19/20 3/4 5/6 7/8 9/10)␤»

[03:06] <MasterDuke> uzl: since it looks like i didn't say it in the .tells, good article

[03:06] <yoleaux> 03:04Z <uzl> MasterDuke: You're right! It should be 'prepending' given that it comes before the variable. I couldn't get the numbered list right so I went with bullet points instead. Overall, great catch. Thanks!

[03:09] <uzl> Thank you very much, MasterDuke! It's all thanks to #perl6. Everyone here is very helpful!

[03:09] <uzl> m: my $x = set(set(0,1), set(10,11), set(12, 13), set(14, 15), set(16, 17), set(18, 19), set(2, 3), set(4, 5), set(6, 7), set(8, 9)); my $y = map { sort($^a+1, $^b+1).join('/') }, $x.Str.comb(/\d+/); say $y.sort;

[03:09] <camelia> rakudo-moar 677f23fb3: OUTPUT: «(1/2 11/12 13/14 15/16 17/18 19/20 3/4 5/6 7/8 9/10)␤»

[03:11] <uzl> m: my $x = set(set(0,1), set(10,11), set(12, 13), set(14, 15), set(16, 17), set(18, 19), set(2, 3), set(4, 5), set(6, 7), set(8, 9)); my $y = map { sort($^a+1, $^b+1).join('/') }, $x.Str.comb(/\d+/); say $y.sort.join(' ');

[03:11] <camelia> rakudo-moar 677f23fb3: OUTPUT: «1/2 11/12 13/14 15/16 17/18 19/20 3/4 5/6 7/8 9/10␤»

[03:11] <uzl> How would I get something like this => '1/2 3/4 5/6 7/8 9/10 11/12 13/14 15/16 17/18 19/20' for $y?

[03:18] <MasterDuke> m: my $x = set(set(0,1), set(10,11), set(12, 13), set(14, 15), set(16, 17), set(18, 19), set(2, 3), set(4, 5), set(6, 7), set(8, 9)); my $y = map { sort($^a+1, $^b+1).join('/') }, $x.Str.comb(/\d+/); say $y.sort)+*).join(' ');

[03:18] <camelia> rakudo-moar 677f23fb3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unexpected closing bracket␤at <tmp>:1␤------> 3('/') }, $x.Str.comb(/\d+/); say $y.sort7⏏5)+*).join(' ');␤»

[03:19] <MasterDuke> m: my $x = set(set(0,1), set(10,11), set(12, 13), set(14, 15), set(16, 17), set(18, 19), set(2, 3), set(4, 5), set(6, 7), set(8, 9)); my $y = map { sort($^a+1, $^b+1).join('/') }, $x.Str.comb(/\d+/); say $y.sort(+*).join(' ');

[03:19] <camelia> rakudo-moar 677f23fb3: OUTPUT: «1/2 3/4 5/6 7/8 9/10 11/12 13/14 15/16 17/18 19/20␤»

[03:21] <zostay> m: my $x = (1..20).rotor(2).map(*.Set); $x.say; # will save some typing, btw

[03:21] <camelia> rakudo-moar 677f23fb3: OUTPUT: «(set(1 2) set(3 4) set(5 6) set(7 8) set(10 9) set(11 12) set(13 14) set(15 16) set(17 18) set(19 20))␤»

[03:22] *** Waggie28 joined
[03:22] *** Waggie28 left
[03:22] <uzl> MasterDuke: That was straightforward. What's the '+*' doing here?

[03:24] <MasterDuke> uzl: doing a numeric sort. you were sorting strings, so it defaulted to string sort, and the string "11" comes before the string "2"

[03:25] <uzl> That makes sense. Thanks!

[03:45] *** Kaiepi left
[03:47] *** uzl left
[03:50] *** molaf left
[03:51] *** mno joined
[03:51] *** p6bannerbot sets mode: +v mno

[03:52] *** mno left
[04:01] *** benjikun joined
[04:02] *** p6bannerbot sets mode: +v benjikun

[04:05] *** aborazmeh joined
[04:05] *** aborazmeh left
[04:05] *** aborazmeh joined
[04:05] *** p6bannerbot sets mode: +v aborazmeh

[04:05] *** p6bannerbot sets mode: +v aborazmeh

[04:06] *** lex joined
[04:06] *** p6bannerbot sets mode: +v lex

[04:12] *** lex left
[04:38] *** w_richard_w left
[04:45] *** Shinobi joined
[04:45] *** Shinobi left
[04:47] *** curan joined
[04:47] *** p6bannerbot sets mode: +v curan

[04:49] *** OGF6 joined
[04:50] *** OGF6 left
[04:58] *** thurin8 joined
[04:59] *** p6bannerbot sets mode: +v thurin8

[04:59] *** thurin8 left
[05:00] *** CIAvash joined
[05:01] *** p6bannerbot sets mode: +v CIAvash

[05:02] *** vrurg left
[05:05] *** vrurg joined
[05:05] *** p6bannerbot sets mode: +v vrurg

[05:05] *** Khisanth left
[05:06] *** vrurg left
[05:12] *** FROGGS_ joined
[05:12] *** p6bannerbot sets mode: +v FROGGS_

[05:13] *** vrurg joined
[05:14] *** p6bannerbot sets mode: +v vrurg

[05:18] *** Khisanth joined
[05:19] *** p6bannerbot sets mode: +v Khisanth

[05:31] *** sauvin joined
[05:31] *** p6bannerbot sets mode: +v sauvin

[05:41] *** vrurg left
[05:42] *** Kaiepi joined
[05:42] *** p6bannerbot sets mode: +v Kaiepi

[05:43] *** vrurg joined
[05:43] *** p6bannerbot sets mode: +v vrurg

[05:46] *** rindolf joined
[05:47] *** p6bannerbot sets mode: +v rindolf

[05:52] *** [particle]1 joined
[05:53] *** [particle] left
[05:53] *** p6bannerbot sets mode: +v [particle]1

[05:55] *** benjikun left
[05:55] *** lindylex joined
[05:56] *** p6bannerbot sets mode: +v lindylex

[05:58] <lindylex> I al trying to match all the words in a string that start with a vowel.  I though this would work.  I created a character class and the used word bound ending with a blank space.   This is what I tried :  say "Match all the words of a string starting with a lowercase vowel :: ".match(/ <[aeiou]><|w><|w>\s /, :global); 

[06:13] *** lichtkind left
[06:14] *** espadrine joined
[06:15] *** p6bannerbot sets mode: +v espadrine

[06:22] *** espadrine left
[06:25] *** shareable6 joined
[06:25] *** p6bannerbot sets mode: +v shareable6

[06:26] *** lichtkind joined
[06:26] *** p6bannerbot sets mode: +v lichtkind

[06:32] <tyil> .tell benjikun can I get access to the questionaire so I can see if I can help out in one way or another

[06:32] <yoleaux> tyil: I'll pass your message to benjikun.

[06:32] <yoleaux> 7 Aug 2018 21:16Z <benjikun> tyil: Yeah, I am. :)

[06:36] *** Summertime left
[06:39] *** Summertime joined
[06:39] *** p6bannerbot sets mode: +v Summertime

[06:41] *** robertle joined
[06:42] *** p6bannerbot sets mode: +v robertle

[06:42] *** aindilis left
[06:50] *** jmerelo joined
[06:50] *** p6bannerbot sets mode: +v jmerelo

[06:50] *** vrurg left
[06:56] *** Kaiepi left
[06:57] *** spycrab0 left
[06:57] *** Kaiepi joined
[06:57] *** p6bannerbot sets mode: +v Kaiepi

[07:00] <CIAvash> m: say "Match all the words of a string starting with a lowercase vowel :: ".match(/ <|w><[aeiou]>\w* /, :g);

[07:00] <camelia> rakudo-moar 677f23fb3: OUTPUT: «(｢all｣ ｢of｣ ｢a｣ ｢a｣)␤»

[07:01] <lindylex> CIAvash : I found two ways to do this.  ONE :  say "Match all the words of a string starting with a lowercase vowel amen :: ".match(/ <|w><[aeiou]>\w*<|w> /, :global); 

[07:01] <lindylex> TWO : say "Match all the words of a string starting with a lowercase vowel amen :: ".match(/ << <[aeiou]>\w* >> /, :global);

[07:01] <CIAvash> m: say "Match all the words of a string starting with a lowercase vowel :: ".words.grep: *.starts-with: any <a e i o u>;

[07:01] <camelia> rakudo-moar 677f23fb3: OUTPUT: «(all of a a)␤»

[07:02] <lindylex> CIAvash : that is cool

[07:04] <lindylex> Interesting no need for the closing word boundary.  It terminates because there is a blank space after the atom.

[07:07] <lindylex> Nite and thanks

[07:08] *** lindylex left
[07:09] *** khronosschoty1 joined
[07:09] *** p6bannerbot sets mode: +v khronosschoty1

[07:10] *** khronosschoty1 left
[07:13] *** hph^ joined
[07:14] *** p6bannerbot sets mode: +v hph^

[07:14] *** scimon joined
[07:15] *** p6bannerbot sets mode: +v scimon

[07:24] *** aborazmeh left
[07:33] *** El_Che_ is now known as El_Che

[07:56] *** sftp left
[07:56] *** sftp joined
[07:56] *** p6bannerbot sets mode: +v sftp

[08:02] *** zakharyas joined
[08:02] *** p6bannerbot sets mode: +v zakharyas

[08:04] *** dogbert11 left
[08:07] *** Ven` joined
[08:07] *** p6bannerbot sets mode: +v Ven`

[08:10] *** AlexDaniel left
[08:16] *** janus18 joined
[08:17] *** p6bannerbot sets mode: +v janus18

[08:17] *** dakkar joined
[08:18] *** p6bannerbot sets mode: +v dakkar

[08:21] *** samebchase joined
[08:22] *** p6bannerbot sets mode: +v samebchase

[08:22] *** janus18 left
[08:26] *** lutki_ joined
[08:26] *** lutki_ left
[08:30] *** Ven` left
[08:31] *** Ven` joined
[08:31] *** p6bannerbot sets mode: +v Ven`

[08:32] *** aindilis joined
[08:33] *** p6bannerbot sets mode: +v aindilis

[08:44] *** aindilis left
[08:44] *** aindilis` joined
[08:45] *** p6bannerbot sets mode: +v aindilis`

[08:56] *** l0de4 joined
[08:57] *** p6bannerbot sets mode: +v l0de4

[08:58] *** l0de4 left
[08:59] *** sins- joined
[09:00] *** sins- left
[09:00] *** obserd joined
[09:00] *** c1nil left
[09:00] *** c1nil joined
[09:00] *** p6bannerbot sets mode: +v obserd

[09:01] *** p6bannerbot sets mode: +v c1nil

[09:02] *** obserd left
[09:07] *** kerframil left
[09:10] <Geth> ¦ doc: cd318ffa3b | (JJ Merelo)++ | doc/Language/operators.pod6

[09:10] <synopsebot> Link: https://doc.perl6.org/language/operators

[09:10] <Geth> ¦ doc: Rewrites example and text to avoid repetition

[09:10] <Geth> ¦ doc: 

[09:10] <Geth> ¦ doc: This fixes #2237, but also refers to #1924. It's always better to have

[09:10] <Geth> ¦ doc: two valid examples, than to have a single one.

[09:10] <Geth> ¦ doc: 

[09:10] <Geth> ¦ doc: Another alternative is, of course, to eliminate indexing of one of

[09:10] <Geth> ¦ doc: them, but this is probably better.

[09:10] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/cd318ffa3b

[09:11] *** lizmat joined
[09:12] *** p6bannerbot sets mode: +v lizmat

[09:12] *** lizmat_ joined
[09:13] *** p6bannerbot sets mode: +v lizmat_

[09:14] *** lizmat__ joined
[09:15] *** p6bannerbot sets mode: +v lizmat__

[09:16] *** lizmat left
[09:16] *** dp37 joined
[09:16] *** dp37 left
[09:16] *** lizmat_ left
[09:17] *** lizmat joined
[09:17] *** p6bannerbot sets mode: +v lizmat

[09:18] *** lizmat__ left
[09:19] *** xinming left
[09:25] *** xinming joined
[09:26] *** p6bannerbot sets mode: +v xinming

[09:27] *** sena_kun joined
[09:28] *** p6bannerbot sets mode: +v sena_kun

[09:29] *** pmurias joined
[09:29] *** p6bannerbot sets mode: +v pmurias

[09:35] *** b2gills left
[09:37] *** Kaiepi left
[09:38] *** sena_kun left
[09:38] *** b2gills joined
[09:39] *** p6bannerbot sets mode: +v b2gills

[09:39] *** sena_kun joined
[09:40] *** p6bannerbot sets mode: +v sena_kun

[09:45] *** lichtkind left
[09:58] *** DarthGandalf left
[09:59] *** jmerelo left
[10:20] *** Ven` left
[10:34] *** HeinzBoettjer joined
[10:35] *** p6bannerbot sets mode: +v HeinzBoettjer

[10:35] *** HeinzBoettjer left
[10:42] *** [particle] joined
[10:42] *** badpixel10 joined
[10:43] *** badpixel10 left
[10:43] *** p6bannerbot sets mode: +v [particle]

[10:44] *** [particle]1 left
[10:44] *** Zx36 joined
[10:44] *** p6bannerbot sets mode: +v Zx36

[10:45] *** Zx36 left
[10:48] *** Kaiepi joined
[10:49] *** p6bannerbot sets mode: +v Kaiepi

[10:49] <Kaiepi> m: my List ($a, $b) = ((1,2), (3,4)); say $a, ' ', $b

[10:49] <camelia> rakudo-moar d021af232: OUTPUT: «(1 2) (3 4)␤»

[10:49] <Kaiepi> m: my List (@a, @b) = ((1,2), (3,4)); say $a, ' ', $b

[10:49] <camelia> rakudo-moar d021af232: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared. Did you mean '@a'?␤at <tmp>:1␤------> 3my List (@a, @b) = ((1,2), (3,4)); say 7⏏5$a, ' ', $b␤»

[10:49] <Kaiepi> m: my List (@a, @b) = ((1,2), (3,4)); say @a, ' ', @b

[10:50] <camelia> rakudo-moar d021af232: OUTPUT: «[(1 2) (3 4)] []␤»

[10:50] <Kaiepi> m: my Int (@a, @b) = ((1,2), (3,4)); say @a, ' ', @b

[10:50] <camelia> rakudo-moar d021af232: OUTPUT: «Type check failed in assignment to @a; expected Int but got List ($(1, 2))␤  in block <unit> at <tmp> line 1␤␤»

[10:50] <Kaiepi> why does this happen with @?

[10:51] <jnthn> Because @ in a list assignment swallows up all the things

[10:52] *** zakharyas left
[10:54] <Kaiepi> oh

[11:01] *** [particle] left
[11:02] *** statisfiable6 joined
[11:02] *** p6bannerbot sets mode: +v statisfiable6

[11:03] *** [particle] joined
[11:04] *** p6bannerbot sets mode: +v [particle]

[11:15] *** blackberry9900 joined
[11:16] *** p6bannerbot sets mode: +v blackberry9900

[11:17] *** [particle]1 joined
[11:17] *** Ven` joined
[11:17] *** [particle] left
[11:17] *** p6bannerbot sets mode: +v [particle]1

[11:18] *** p6bannerbot sets mode: +v Ven`

[11:21] *** lizmat left
[11:22] *** Ven` left
[11:24] *** blackberry9900 left
[11:25] *** blackberry9900 joined
[11:25] *** p6bannerbot sets mode: +v blackberry9900

[11:29] *** [particle]1 left
[11:35] *** lizmat joined
[11:35] *** p6bannerbot sets mode: +v lizmat

[11:43] <lizmat> weekly: https://www.facebook.com/groups/perl6/permalink/2162685877331093/

[11:43] <notable6> lizmat, Noted!

[11:57] *** aindilis` left
[11:58] *** [particle] joined
[11:58] *** p6bannerbot sets mode: +v [particle]

[12:01] *** lizmat left
[12:03] *** lizmat joined
[12:04] *** p6bannerbot sets mode: +v lizmat

[12:05] *** jmerelo joined
[12:06] *** astj joined
[12:06] *** p6bannerbot sets mode: +v jmerelo

[12:07] *** p6bannerbot sets mode: +v astj

[12:09] *** blackberry9900 left
[12:11] *** FROGGS_ left
[12:11] *** FROGGS_ joined
[12:12] *** p6bannerbot sets mode: +v FROGGS_

[12:14] *** FROGGS_ left
[12:14] *** FROGGS_ joined
[12:15] *** p6bannerbot sets mode: +v FROGGS_

[12:20] <Geth> ¦ doc: 90ca7aff21 | thundergnat++ (committed using GitHub Web editor) | doc/Language/operators.pod6

[12:20] <synopsebot> Link: https://doc.perl6.org/language/operators

[12:20] <Geth> ¦ doc: Fix minor typo

[12:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/90ca7aff21

[12:20] *** Ven` joined
[12:21] *** p6bannerbot sets mode: +v Ven`

[12:27] *** zakharyas joined
[12:28] *** p6bannerbot sets mode: +v zakharyas

[12:39] <Geth> ¦ doc: JJ self-assigned Undocumented :translate-nl option to Str.encode https://github.com/perl6/doc/issues/1233

[12:44] *** jmerelo left
[12:47] *** eponym joined
[12:47] *** p6bannerbot sets mode: +v eponym

[12:50] *** epony left
[13:00] *** astj left
[13:11] *** lichtkind joined
[13:11] *** p6bannerbot sets mode: +v lichtkind

[13:12] <lichtkind> how do i create type object of self made class ?

[13:15] <masak> m: class SelfMade {}; say SelfMade # <--- type object

[13:15] <camelia> rakudo-moar 12bd328b8: OUTPUT: «(SelfMade)␤»

[13:16] *** vrurg joined
[13:16] *** p6bannerbot sets mode: +v vrurg

[13:21] *** Hoosilon25 joined
[13:21] *** Hoosilon25 left
[13:24] <lichtkind> hej masak o/

[13:24] <lichtkind> that not what i asked but i got it  :)

[13:25] <masak> I disagree -- that is what you asked ;)

[13:26] <lichtkind> yes and  it was right i just was few steps ahead, my error was elsewhere

[13:26] * masak .oO( who are you to come here and tell me what you actually meant ) :P

[13:26] <lichtkind> see you in schottland?

[13:26] <masak> unfortunately I must schkip that conf :/

[13:27] <lichtkind> ah

[13:27] <lichtkind> but its near you

[13:27] *** w_richard_w joined
[13:27] <masak> I can't travel so easily what with a young kid and all

[13:27] <masak> I hope to be able to join GPW in 2019

[13:28] <lichtkind> no to be clear it is what I asked for but I was focussed on my mistakes and there were two and elsewhere

[13:28] *** alexghacker left
[13:28] *** p6bannerbot sets mode: +v w_richard_w

[13:29] <masak> masak's advice is provided as-is; we take not responsibility for how it's used, and for possible interactions with mistakes elsewhere; breaking the seal means voiding the warranty, which didn't properly exist in the first place

[13:29] *** kaare_ joined
[13:30] <lichtkind> haha

[13:30] *** p6bannerbot sets mode: +v kaare_

[13:30] <lichtkind> masak, but im glad to hear you have family

[13:31] <masak> yes, and it's a nice family

[13:32] *** molaf joined
[13:33] *** p6bannerbot sets mode: +v molaf

[13:34] *** scimon left
[13:35] *** scimon joined
[13:35] *** p6bannerbot sets mode: +v scimon

[13:35] *** alexghacker joined
[13:36] *** p6bannerbot sets mode: +v alexghacker

[13:42] *** aborazmeh joined
[13:42] *** aborazmeh left
[13:42] *** aborazmeh joined
[13:42] *** p6bannerbot sets mode: +v aborazmeh

[13:43] *** p6bannerbot sets mode: +v aborazmeh

[13:53] <SmokeMachine> is there a way to add methods on a specific array type? I mean: `Array[MyClass].my-custom-method`

[13:54] <AlexDaniel`> mmm, plush camelia is so cute

[13:58] *** curan left
[14:01] <masak> AlexDaniel`: _and_ fire-proof!

[14:04] <SmokeMachine> is there possible to specialise a Positional[MyClass], I mean: every time some one uses `my MyClass @bla` it gets a custom class. something like: `class Positional[MyClass] does Positional {...}`(probably it could not be a class)

[14:06] *** CIAvash left
[14:06] *** mww113 joined
[14:07] *** p6bannerbot sets mode: +v mww113

[14:07] *** mww113 left
[14:10] *** aborazmeh left
[14:11] <SmokeMachine> m: class C {}; role Array[C] does Positional {}; dd my C @bla;

[14:11] <camelia> rakudo-moar 934c3f9d2: OUTPUT: «===SORRY!===␤No appropriate parametric role variant available for 'Array'␤»

[14:11] <lizmat> SmokeMachine: create a different class and use the syntax "my @bla is YourClass"

[14:12] <lizmat> you would have to supply your own .STORE then though

[14:14] <SmokeMachine> lizmat: thanks!

[14:16] *** skids joined
[14:17] *** p6bannerbot sets mode: +v skids

[14:18] *** jeromelanteri joined
[14:18] *** p6bannerbot sets mode: +v jeromelanteri

[14:20] *** atk10 joined
[14:21] *** p6bannerbot sets mode: +v atk10

[14:21] *** atk10 left
[14:22] *** FROGGS_ left
[14:23] *** FROGGS_ joined
[14:24] *** p6bannerbot sets mode: +v FROGGS_

[14:24] <SmokeMachine> but `Defaults on compound attribute types not yet implemented`... :(

[14:25] *** jeromelanteri left
[14:28] *** eponym is now known as epony

[14:31] <SmokeMachine> m: class A { method to-many { class Bla does Positional[A] {}.new } }; class C { has A @.a = .of.to-many }; say C.new.a

[14:31] <camelia> rakudo-moar eee771417: OUTPUT: «Type check failed in assignment to @!a; expected A but got A::Bla (A::Bla.new)␤  in block <unit> at <tmp> line 1␤␤»

[14:32] <SmokeMachine> is there any way to do something like that? ^^

[14:38] *** rorx19 joined
[14:39] *** p6bannerbot sets mode: +v rorx19

[14:41] *** rorx19 left
[14:42] *** FROGGS_ left
[14:43] *** FROGGS_ joined
[14:43] *** p6bannerbot sets mode: +v FROGGS_

[14:44] *** Roamer` joined
[14:44] *** p6bannerbot sets mode: +v Roamer`

[14:48] *** sauvin left
[14:49] <masak> I have non-zero exit statuses in 4 spectest files. been a while since I had that, IIRC.

[14:55] *** nebuchadnezzar left
[14:55] *** FROGGS_ left
[14:55] <Roamer`> hi, I've got something that I'm not sure is a bug or me not completely understanding the implications of having a sub with no parameters; it happens on both 2018.05 and 2018.06 (right now I have no other versions to test with)

[14:55] <Roamer`> m: use v6.c; sub version() { return "1.1" }; say @*ARGS ?? version!! "nah"

[14:55] <camelia> rakudo-moar fc865a9a0: OUTPUT: «nah␤»

[14:55] *** FROGGS_ joined
[14:55] <Roamer`> m: use v6.c; sub version() { return "1.1" }; say @*ARGS ?? version !! "nah"

[14:55] <camelia> rakudo-moar fc865a9a0: OUTPUT: «Non ast passed to WANTED: NQPMu␤5===SORRY!5=== Error while compiling <tmp>␤Your !! was gobbled by the expression in the middle; please parenthesize␤at <tmp>:1␤------> 3return "1.1" }; say @*ARGS ?? version !!7⏏5 "nah"␤    expecting…»

[14:56] <Roamer`> the only difference is the space before the "!!"

[14:56] *** p6bannerbot sets mode: +v FROGGS_

[14:56] <Roamer`> and, yes, if I parenthesize the version call, it works

[14:56] <timotimo> i'd assume that's from version!!0 not being valid

[14:56] <Roamer`> m: use v6.c; sub version() { return "1.1" }; say @*ARGS ?? (version) !! "nah"

[14:56] <camelia> rakudo-moar fc865a9a0: OUTPUT: «nah␤»

[14:56] <timotimo> so it's clear there that it's not double prefix ! there

[14:57] <timotimo> 6c: sub version() { return "1.1" }; say @*ARGS ?? version!! "nah"

[14:57] <timotimo> 6c: sub version() { return "1.1" }; say @*ARGS ?? version !! "nah"

[14:57] <committable6> timotimo, ¦6c (31 commits): «nah␤»

[14:58] <committable6> timotimo, https://gist.github.com/a6badcb70528d3d4e5a7627f12ecc602

[14:58] <timotimo> it's been the same ever since 2016.01

[14:58] <timotimo> the internal error at the start, "non ast passed to wanted", should definitely go

[14:59] <Roamer`> timotimo, so you're saying I should file a bug and let people fight it out in the bug discussion what exactly should be done about it? :)

[15:00] <timotimo> that sounds like a good plan to me

[15:00] <Roamer`> thanks :)

[15:00] *** sauvin joined
[15:00] *** p6bannerbot sets mode: +v sauvin

[15:00] <timotimo> you can put a link to irc or copy-paste the text for easy availability of the info i just added using the bots

[15:01] <Roamer`> thanks, will do

[15:01] <buggable> New CPAN upload: Digest-BubbleBabble-0.0.2.tar.gz by KAIEPI https://cpan.metacpan.org/authors/id/K/KA/KAIEPI/Perl6/Digest-BubbleBabble-0.0.2.tar.gz

[15:01] <timotimo> thanks :)

[15:16] *** kerframil joined
[15:16] *** p6bannerbot sets mode: +v kerframil

[15:21] *** Ven` left
[15:21] *** AlexDaniel joined
[15:22] *** AlexDaniel left
[15:22] *** AlexDaniel joined
[15:22] *** p6bannerbot sets mode: +v AlexDaniel

[15:22] *** p6bannerbot sets mode: +v AlexDaniel

[15:23] *** Ven` joined
[15:24] *** p6bannerbot sets mode: +v Ven`

[15:29] *** jmerelo joined
[15:30] *** p6bannerbot sets mode: +v jmerelo

[15:30] <jmerelo> releasable6: status

[15:30] <releasable6> jmerelo, Next release in ≈10 days and ≈3 hours. 4 blockers. 81 out of 367 commits logged (⚠ 9 warnings)

[15:30] <releasable6> jmerelo, Details: https://gist.github.com/453dd7517ba4b257e43121270d964f08

[15:34] *** araraloren joined
[15:35] *** p6bannerbot sets mode: +v araraloren

[15:35] <araraloren> m: my $s = supply { say "called foo"; emit 42; }; react { whenever $s { say $_; }; wheneever $s { say $_; } };

[15:35] <camelia> rakudo-moar 7f1e41dd3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unexpected block in infix position (missing statement control word before the expression?)␤at <tmp>:1␤------> 3 { whenever $s { say $_; }; wheneever $s7⏏5 { say $_; } };␤    expecting any of…»

[15:35] <araraloren> m: my $s = supply { say "called foo"; emit 42; }; react { whenever $s { say $_; }; whenever $s { say $_; } };

[15:35] <camelia> rakudo-moar 7f1e41dd3: OUTPUT: «called foo␤called foo␤42␤42␤»

[15:36] <araraloren> so, the supply will execute twice when I tap it twice ?

[15:37] <jmerelo> araraloren: that seems to be the case, yes.

[15:37] <timotimo> yes, the supply block's body will be called for every time it's tapped

[15:37] <timotimo> use .share on the supply to get another supply that can be tapped any number of times without re-executing the original block

[15:38] <araraloren> How can I have multi tapped but execute once ?

[15:38] <araraloren> okay

[15:38] <jmerelo> araraloren: it's not "executed", it's "sent" to "subscribers", but pretty much that's how it works.

[15:38] <araraloren> :/ but it executed 

[15:38] <timotimo> jmerelo: no, araraloren is correct

[15:38] <araraloren> m: my $s = supply { say "called foo"; emit 42; }; $s.=shared; react { whenever $s { say $_; }; whenever $s { say $_; } };

[15:38] <camelia> rakudo-moar 7f1e41dd3: OUTPUT: «No such method 'shared' for invocant of type 'Supply'. Did you mean 'share'?␤  in block <unit> at <tmp> line 1␤␤»

[15:39] <araraloren> m: my $s = supply { say "called foo"; emit 42; }; $s.=share; react { whenever $s { say $_; }; whenever $s { say $_; } };

[15:39] <timotimo> oh?

[15:39] <camelia> rakudo-moar 7f1e41dd3: OUTPUT: «(timeout)called foo␤»

[15:39] <araraloren> what happened

[15:39] <timotimo> dunno

[15:39] <araraloren> m: my $s = supply { say "called foo"; emit 42; }; $s.=share;

[15:39] <camelia> rakudo-moar 7f1e41dd3: OUTPUT: «called foo␤»

[15:40] <araraloren> m: my $s = (supply { say "called foo"; emit 42; }).share; 

[15:40] <camelia> rakudo-moar 7f1e41dd3: OUTPUT: «called foo␤»

[15:40] <timotimo> oh, i know

[15:40] <timotimo> the 42 got emitted before any of the taps were made

[15:41] <timotimo> m: my $s = Supply.interval(0.1).share; sleep 0.6; my $t = $s.tap({ .say }); sleep 3; $t.close

[15:41] <camelia> rakudo-moar 7f1e41dd3: OUTPUT: «6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤22␤23␤24␤25␤26␤27␤28␤29␤30␤31␤32␤33␤34␤35␤»

[15:41] <timotimo> as you can see you miss the first few values

[15:41] <araraloren> m: my $s = (supply { say "called foo"; emit 42; }).share; react { whenever $s { say $_; }; whenever $s { say $_; } };

[15:42] <araraloren> seems like it can't work in this way

[15:42] <camelia> rakudo-moar 7f1e41dd3: OUTPUT: «(timeout)called foo␤»

[15:42] <timotimo> it times out because the supply is never closed it seems like

[15:42] <jnthn> Correct

[15:42] <timotimo> i mean, share perhaps doesn't forward the close from $s

[15:42] <jnthn> Thing is, how can it know that you're ready?

[15:42] <araraloren> how to share a supply which return from a function

[15:42] <timotimo> yeah

[15:43] <araraloren> I create a sub return a supply

[15:43] <araraloren> I want multi subscribes can receive the data emited

[15:43] <timotimo> make it possible to tell the source of the supply itself when it's okay to start?

[15:44] <araraloren> m: my $s = sub { supply { say "called foo"; emit 42; } }(); react { whenever $s { say $_; }; whenever $s { say $_; } };

[15:44] <camelia> rakudo-moar 7f1e41dd3: OUTPUT: «called foo␤called foo␤42␤42␤»

[15:44] <araraloren> It's like above ^

[15:44] <araraloren> but it called twice, so that's mess up my code

[15:44] <jnthn> Pass in a Promise to the sub and make it not start emitting any values until that is kept, then keep it after all the `whenever`s are set up

[15:47] <araraloren> But that's can not solve the problem, the Supply still execute twice ?

[15:47] <timotimo> shouldn't

[15:47] <timotimo> let me code it up

[15:47] <araraloren> okay, thanks

[15:49] <timotimo> m: sub make-it(Promise $start-it) { supply { say "called"; await $start-it; say "started"; emit 42 } }; my $p = Promise.new; my $shared = make-it($p); react { whenever $shared { say "one $_" }; whenever $shared { say "two $_" }; say "set up whenevers"; $p.keep(1); say "kept the promise" };

[15:49] <camelia> rakudo-moar 7f1e41dd3: OUTPUT: «called␤called␤set up whenevers␤kept the promise␤started␤one 42␤started␤two 42␤»

[15:49] <timotimo> oh?

[15:50] <jnthn> You forgot to call .share? :)

[15:50] <timotimo> m)

[15:50] <timotimo> yes i did

[15:50] *** robertle left
[15:50] <timotimo> m: sub make-it(Promise $start-it) { supply { say "called"; await $start-it; say "started"; emit 42 } }; my $p = Promise.new; my $shared = make-it($p).share; react { whenever $shared { say "one $_" }; whenever $shared { say "two $_" }; say "set up whenevers"; $p.keep(1); say "kept the promise" };

[15:50] <camelia> rakudo-moar 7f1e41dd3: OUTPUT: «(timeout)called␤»

[15:50] <timotimo> i think it's a bug that .share sets up a supply that doesn't .done when the source supply is .done

[15:50] <timotimo> oh, ok

[15:50] <araraloren> I think it's something wrong with the share

[15:50] *** aindilis joined
[15:50] <timotimo> it immediately waits forever for the await

[15:51] <timotimo> maybe?

[15:51] <jnthn> sub ($start) { supply whenever $start { emit 42 } }

[15:51] <jnthn> Something like that

[15:51] <timotimo> omg could my ssh session stop lagging

[15:51] *** p6bannerbot sets mode: +v aindilis

[15:51] <timotimo> m: sub make-it(Promise $start-it) { supply { say "called"; whenever $start-it { say "started"; emit 42 } } }; my $p = Promise.new; my $shared = make-it($p).share; react { whenever $shared { say "one $_" }; whenever $shared { say "two $_" }; say "set up whenevers"; $p.keep(1); say "kept the promise" };

[15:51] <camelia> rakudo-moar 7f1e41dd3: OUTPUT: «called␤set up whenevers␤kept the promise␤started␤one 42␤two 42␤»

[15:51] <timotimo> there it is

[15:51] <timotimo> thanks jnthn 

[15:52] <araraloren> okay, jnthn++

[15:52] <jnthn> We could also try to have a ref-counting version of share but notice that this doesn't actually save you from data loss in this case either

[15:53] <araraloren> though the code looks like a little ugly :)

[15:53] <araraloren> I will have a try

[15:58] *** Sgeo_ joined
[15:59] *** spycrab0 joined
[15:59] *** p6bannerbot sets mode: +v spycrab0

[15:59] *** jwheare21 joined
[15:59] *** p6bannerbot sets mode: +v Sgeo_

[15:59] *** p6bannerbot sets mode: +v jwheare21

[16:00] *** jwheare21 left
[16:00] *** Sgeo left
[16:07] *** tktech10 joined
[16:07] *** tktech10 left
[16:11] <buggable> New CPAN upload: Attribute-Predicate-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Attribute-Predicate-0.0.1.tar.gz

[16:12] *** robertle joined
[16:12] *** p6bannerbot sets mode: +v robertle

[16:17] <araraloren> Seems like the code works now, but need refactor, thanks #perl6 :)

[16:17] *** araraloren left
[16:18] *** molaf left
[16:22] *** GigabytePro21 joined
[16:23] *** p6bannerbot sets mode: +v GigabytePro21

[16:23] *** TreyHarris left
[16:24] *** GigabytePro21 left
[16:26] *** Ven` left
[16:32] *** scimon left
[16:32] *** dakkar left
[16:32] *** tadzik joined
[16:33] *** p6bannerbot sets mode: +v tadzik

[16:36] *** nebuchad` joined
[16:36] *** lizmat left
[16:37] *** p6bannerbot sets mode: +v nebuchad`

[16:37] *** TreyHarris joined
[16:37] *** p6bannerbot sets mode: +v TreyHarris

[16:37] *** dogbert17 joined
[16:38] *** p6bannerbot sets mode: +v dogbert17

[16:39] *** nebuchad` is now known as nebuchadnezzar

[16:40] *** kerframil left
[16:49] *** w_richard_w left
[16:52] *** FROGGS_ left
[16:52] *** FROGGS_ joined
[16:53] *** p6bannerbot sets mode: +v FROGGS_

[17:17] *** jmerelo left
[17:18] *** hami joined
[17:18] *** p6bannerbot sets mode: +v hami

[17:19] *** Sgeo_ left
[17:19] *** Sgeo joined
[17:20] *** p6bannerbot sets mode: +v Sgeo

[17:21] <Juerd> Does Perl 6 have a way to guarantee overwriting or free()ing a string? Like SecureString in .NET

[17:21] <Juerd> This is for passwords, private keys, etc.

[17:21] *** hami left
[17:23] *** deetwelve5 joined
[17:24] *** deetwelve5 left
[17:30] *** Lord_of_Life16 joined
[17:31] *** p6bannerbot sets mode: +v Lord_of_Life16

[17:35] *** molaf joined
[17:35] *** Lord_of_Life16 left
[17:36] *** p6bannerbot sets mode: +v molaf

[17:36] *** borsin5 joined
[17:36] *** borsin5 left
[17:39] <timotimo> i don't think it does, no

[17:46] <b2gills> A secure string would need support from the VM, as the garbage collector copies data around.

[17:46] <timotimo> actually, the string data isn't on the managed heap

[17:47] <timotimo> a string carries around a malloced piece of data containing the string's content, unless it's a stranded string, in which case it links to multiple string objects

[17:47] <timotimo> but if the string exists in the source code or otherwise gets into the precompilation, it'll also be in the .moarvm file, which gets mmapped, as well as the decoded string heap (which is "just" string objects, so see above for the malloced data storage)

[17:54] *** zakharyas left
[18:05] *** tomaw joined
[18:05] *** p6bannerbot sets mode: +v tomaw

[18:15] *** brand012 joined
[18:15] *** brand012 left
[18:17] *** AlexDaniel left
[18:24] <pmurias> Juerd: no, it's would need support on the VM level (or be implemented using NativeCall)

[18:26] *** johnjohn101 joined
[18:26] *** p6bannerbot sets mode: +v johnjohn101

[18:27] *** sauvin left
[18:37] *** FROGGS_ left
[18:37] *** FROGGS_ joined
[18:38] *** p6bannerbot sets mode: +v FROGGS_

[18:51] *** Woodi left
[19:06] <Juerd> Thanks

[19:06] <johnjohn101> hi perl6 people

[19:14] <pmurias> johnjohn101: hi

[19:15] <johnjohn101> haven't heard much from perl 6 land

[19:17] *** molaf left
[19:18] *** skids left
[19:21] <Juerd> johnjohn101: What would you like to hear?

[19:21] <Juerd> johnjohn101: Maybe https://p6weekly.wordpress.com/ has what you're looking for? :)

[19:22] <johnjohn101> ok thanks

[19:22] *** lex joined
[19:22] <johnjohn101> i just want to know if it's getting faster 

[19:22] <Juerd> It is

[19:22] *** p6bannerbot sets mode: +v lex

[19:23] *** TreyHarris left
[19:23] <robertle> is

[19:23] <robertle> there such a thing as slowly getting faster? ;)

[19:24] <johnjohn101> well no....

[19:24] <moritz> it's slowly getting faster.

[19:24] <johnjohn101> i'm going to have to try it again.  been a year.

[19:24] *** lex is now known as lindylex

[19:26] <Xliff> $ perl6 -Ilib t/01-widget.t 

[19:26] <Xliff> Failed to register: Timeout was reached

[19:26] <Xliff> ^^ Anyone know what that means?

[19:27] *** eponym joined
[19:27] *** p6bannerbot sets mode: +v eponym

[19:28] *** NeddySeagoon27 joined
[19:29] *** p6bannerbot sets mode: +v NeddySeagoon27

[19:30] *** epony left
[19:33] *** NeddySeagoon27 left
[19:33] *** FROGGS_ left
[19:33] *** FROGGS_ joined
[19:34] *** p6bannerbot sets mode: +v FROGGS_

[19:37] *** TreyHarris joined
[19:37] *** p6bannerbot sets mode: +v TreyHarris

[19:40] <Xliff> Anyone know why perl6 is doing this?

[19:40] *** [particle] left
[19:40] <Xliff> $ perl6 -Ilib t/01-widget.t 

[19:40] <Xliff> Failed to register: Timeout was reached

[19:41] <Xliff> I was working with NativeCall code when it happened, but now... no matter what I do on this piece of codfe, this is all I get.

[19:41] <Xliff> I have rm'd the .precomp dirs. No changed.

[19:41] <Xliff> Rakudobrewed and no change. 

[19:42] <Xliff> If someone has an idea on what it could be, please just drop me a PM or send a message through yoleaux

[19:42] *** [particle] joined
[19:43] *** p6bannerbot sets mode: +v [particle]

[20:20] *** submain joined
[20:21] *** p6bannerbot sets mode: +v submain

[20:21] * moritz doesn't even know what repo Xliff's question relates to

[20:24] *** submain left
[20:27] *** lizmat joined
[20:27] *** p6bannerbot sets mode: +v lizmat

[20:31] *** hph^ left
[20:31] <Xliff> moritz: It's my own project, but I've never seen that error before.

[20:32] <Xliff> And it doesn't seem to go away for that script, even though I've reverted the changes.

[20:32] <Xliff> If you want to know the exact piece of code, here you go:>

[20:33] <Xliff> https://github.com/Xliff/p6-GtkPlus/blob/f70ddffd4d24ca2b664fb3709a4c2afcde9f5a16/t/01-widget.t#L53

[20:34] <Xliff> Just out of curiosity, why doesn't an (Int) signature map naturally to (uint32)?

[20:34] <Xliff> Or (uint64)?

[20:34] <sena_kun> Xliff, it doesn't seem like a Perl 6-specific error.

[20:34] <Xliff> ?

[20:35] <sena_kun> see e.g. https://gitlab.gnome.org/GNOME/gnome-control-center/issues/30

[20:35] <Xliff> Is that GTK throwing that error>

[20:35] <sena_kun> seems so, yeah.

[20:35] <sena_kun> of course, I have no clue why.

[20:35] <sena_kun> :)

[20:35] <sena_kun> but still, it isn't rakudo/nativecall/moarvm or whatever in this area, judging by google responses.

[20:36] <Xliff> 'kk

[20:36] <sena_kun> but 150 results are not very... nice.

[20:36] <sena_kun> Xliff, did you try reboot?

[20:37] <Xliff> Hum. No.

[20:37] <sena_kun> some people write it may(should) help to restore the state.

[20:37] <Xliff> Doing that now. Got bless VMs.

[20:37] <Xliff> s/Got/God/

[20:37] *** Zoffix joined
[20:38] *** p6bannerbot sets mode: +v Zoffix

[20:38] <Xliff> OK. I will let you know how that works.

[20:38] <Xliff> Thanks!

[20:38] <sena_kun> np

[20:38] *** rindolf left
[20:39] <sena_kun> https://bbs.archlinux.org/viewtopic.php?id=233715 <- may be a relevant thread.

[20:39] <Zoffix> johnjohn101: FWIW, I doubt you'll see anything groundbreaking, compared to last year, other than some specific examples. A bunch of work in the last year involved getting in place pieces that will make it easier for us to optimize stuff (like new JIT that took more than a year to develop), but don't exactly offer perf improvements immediatelly yet.

[20:39] <Zoffix> johnjohn101: try in another year :D

[20:48] <Zoffix> c: 2017.06,HEAD my $x = <1/3>; my $y = $x**600000; say (now - ENTER now), " seconds"

[20:48] <committable6> Zoffix, ¦2017.06: «7.29975270 seconds␤» ¦HEAD(74ea72e): «0.01227456 seconds␤»

[20:49] *** molaf joined
[20:49] *** [particle] left
[20:50] *** p6bannerbot sets mode: +v molaf

[20:50] <Zoffix> one of the specific examples, but other stuff got slower

[20:50] <Zoffix> c: 2017.06,HEAD my $x = <1/3>; $x += $x for ^2000_00; say now - ENTER now

[20:50] <committable6> Zoffix, ¦2017.06: «0.97538701␤» ¦HEAD(74ea72e): «7.521223␤»

[20:51] <Zoffix> Like this ^ and not everythign has been mopped up after that change (though the plus itself won't get back to old speeds)

[20:51] <Zoffix> Well, eventually it might, but not due to mopping up :)

[20:52] <lizmat> weekly: https://medium.com/@jcoterhals/perl-6-small-stuff-5-gather-around-its-time-to-get-lazy-but-why-da20fdb18a3b

[20:52] <notable6> lizmat, Noted!

[20:58] *** hph^ joined
[20:58] *** hph^ left
[20:59] *** hph^ joined
[20:59] *** hph^ left
[20:59] *** Zoffix left
[20:59] *** hph^ joined
[20:59] *** hph^ left
[21:00] *** hph^ joined
[21:00] *** hph^ left
[21:00] *** hph^ joined
[21:00] *** hph^ left
[21:00] *** hph^ joined
[21:00] *** hph^ left
[21:01] *** pmurias left
[21:03] *** Zoffix joined
[21:03] *** p6bannerbot sets mode: +v Zoffix

[21:04] *** pmurias joined
[21:04] *** p6bannerbot sets mode: +v pmurias

[21:05] <Zoffix> masak: can you try again on head and file any failures you get? I had some floppers when first fix for R#2158, but now it's been good.

[21:05] <synopsebot> R#2158 [closed]: https://github.com/rakudo/rakudo/issues/2158 [SEGV][regression][tests committed][⚠ blocker ⚠] :enc<utf8-c8> on Proc drops content / SEGVs

[21:09] *** johnjohn101 left
[21:09] *** supercool25 joined
[21:10] *** supercool25 left
[21:10] *** johnjohn101 joined
[21:11] *** p6bannerbot sets mode: +v johnjohn101

[21:12] *** Bkid27 joined
[21:12] *** Bkid27 left
[21:14] *** Zoffix left
[21:17] *** kerframil joined
[21:17] *** p6bannerbot sets mode: +v kerframil

[21:20] *** pmurias left
[21:21] *** Death91620 joined
[21:22] *** p6bannerbot sets mode: +v Death91620

[21:23] *** Death91620 left
[21:26] *** PityDaFool joined
[21:26] *** PityDaFool is now known as Guest50244

[21:27] *** p6bannerbot sets mode: +v Guest50244

[21:31] *** Guest50244 left
[21:37] *** lindylex left
[21:41] <buggable> New CPAN upload: Method-Also-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Method-Also-0.0.1.tar.gz

[21:48] *** kybr joined
[21:48] *** p6bannerbot sets mode: +v kybr

[21:49] *** johnjohn101 left
[21:52] <masak> Zoffix: trying again

[21:56] *** pmurias joined
[21:57] *** p6bannerbot sets mode: +v pmurias

[21:59] *** pmurias left
[22:01] *** pmurias joined
[22:01] *** benjikun joined
[22:02] *** p6bannerbot sets mode: +v pmurias

[22:02] *** p6bannerbot sets mode: +v benjikun

[22:07] <benjikun> pmurias: are you still working on perl6 with graalvm compatibility

[22:07] <yoleaux> 06:32Z <tyil> benjikun: can I get access to the questionaire so I can see if I can help out in one way or another

[22:07] *** molaf left
[22:08] <benjikun> .tell tyil Yeah, I'll add you as a collaborator. What's your email?

[22:08] <yoleaux> benjikun: I'll pass your message to tyil.

[22:11] <MasterDuke> benjikun: yeah, i've done some easy work, pmurias has done the complicated stuff

[22:12] <MasterDuke> https://github.com/perl6/nqp/tree/truffle

[22:15] <benjikun> I see, sweet

[22:21] *** pmurias left
[22:23] *** pmurias joined
[22:24] *** p6bannerbot sets mode: +v pmurias

[22:24] *** pmurias left
[22:31] *** a3f_ left
[22:31] *** a3f joined
[22:31] *** a3f left
[22:31] *** a3f joined
[22:31] *** p6bannerbot sets mode: +v a3f

[22:32] *** p6bannerbot sets mode: +v a3f

[22:48] *** [particle] joined
[22:48] *** p6bannerbot sets mode: +v [particle]

[22:52] *** robertle left
[22:55] *** PotatoGim_ joined
[22:55] *** p6bannerbot sets mode: +v PotatoGim_

[22:57] *** blocked10 joined
[22:58] *** jdv79_ joined
[22:58] *** steven2 joined
[22:58] *** Hor|zon_ joined
[22:58] *** p6bannerbot sets mode: +v blocked10

[22:58] *** ponbiki_ joined
[22:58] *** blocked10 left
[22:58] *** p6bannerbot sets mode: +v jdv79_

[22:58] *** p6bannerbot sets mode: +v steven2

[22:58] *** p6bannerbot sets mode: +v Hor|zon_

[22:59] *** p6bannerbot sets mode: +v ponbiki_

[23:01] *** MilkmanD1n joined
[23:01] *** p6bannerbot sets mode: +v MilkmanD1n

[23:02] *** lizmat left
[23:02] *** MilkmanDan left
[23:02] *** abraxxa left
[23:02] *** jdv79 left
[23:02] *** nuclearsandwich left
[23:02] *** Hor|zon left
[23:02] *** go|dfish left
[23:02] *** PotatoGim left
[23:02] *** PotatoGim_ is now known as PotatoGim

[23:04] *** reportable6 left
[23:04] *** yoleaux left
[23:04] *** perlawhirl joined
[23:05] *** reportable6 joined
[23:05] *** perigrin joined
[23:05] *** p6bannerbot sets mode: +v perlawhirl

[23:05] *** p6bannerbot sets mode: +v reportable6

[23:05] *** nativecallable6 left
[23:05] *** benchable6 left
[23:06] *** p6bannerbot sets mode: +v perigrin

[23:06] *** statisfiable6 left
[23:06] *** bisectable6 left
[23:06] *** shareable6 left
[23:07] *** shareable6 joined
[23:07] *** p6bannerbot sets mode: +v shareable6

[23:10] *** kerframil left
[23:11] *** go|dfish joined
[23:11] *** p6bannerbot sets mode: +v go|dfish

[23:12] *** abraxxa joined
[23:13] *** p6bannerbot sets mode: +v abraxxa

[23:16] *** sena_kun left
[23:19] *** JoseyWales joined
[23:20] *** p6bannerbot sets mode: +v JoseyWales

[23:23] *** benjikun left
[23:30] <SmokeMachine> how can I "export" a dynamically created type? 

[23:34] <SmokeMachine> m: sub bla { my \Type = Metamodel::ClassHOW.new_type(); 42 }; say bla; say Type

[23:34] <camelia> rakudo-moar fa73bb48d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Type used at line 1␤␤»

[23:36] <geekosaur> the usual way? "our", or return it and assign the result

[23:37] <geekosaur> you weren;t expecting a rumtime generated type to somehow rewrite the compiler to know about it?

[23:37] <SmokeMachine> m: sub bla { our \Type = Metamodel::ClassHOW.new_type(); 42 }; say bla; say Type

[23:37] <camelia> rakudo-moar fa73bb48d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤our scoped term definitions (only 'my' is supported at the moment) not yet implemented. Sorry.␤at <tmp>:1␤------> 3sub bla { our \Type7⏏5 = Metamodel::ClassHOW.new_type(); 42 };␤    expectin…»

[23:37] <jnthn> Also note that the type vs. routine distinction is a compile time decision, so you'd have to construct the type at compile time at the very least.

[23:37] <jnthn> The typical way to do these things is the construct them in a sub EXPORT and export them into the scope of the thing that does a `use` of the module, or similar.

[23:38] <jnthn> *is to

[23:38] <SmokeMachine> I have a `class MetamodelX::Model is Metamodel::ClassHOW` that creates the type you wrote and its ResultSet (another type)... there are no way to access its ResultSet?

[23:40] <SmokeMachine> but if I do it at the EXPORT sub I'll cannot use the `model` that wasn't exported yet...

[23:40] <jnthn> Yeah, I don't know the full context of what you're trying to do :)

[23:40] <jnthn> But metamodel stuff does run at compile time at least

[23:41] <SmokeMachine> jnthn: I have am trying to do this work:

[23:41] <jnthn> One way would be to install the ResultSet type in the package of the type created by the custom meta-object

[23:42] <SmokeMachine> but B::ResultSet is created by the model's `compose` https://www.irccloud.com/pastebin/LcxpKfce/

[23:44] <SmokeMachine> jnthn: sorry, I didn't get it... how could I do that?

[23:45] <jnthn> SmokeMachine: You got the meta-object code handy so I can explain it in terms of the code you have?

[23:45] <jnthn> but effectively, if you have like method compose($obj) { ... } then somewhere in there you'd do $obj.WHO<ResultSet> = ...the-type...;

[23:46] <SmokeMachine> jnthn: a little big... (im sorry) https://www.irccloud.com/pastebin/L65rpi0b/

[23:48] <jnthn> Ah, OK, so like what I said but you take \type in the compose method, so it's type.WHO<ResultSet> = ...

[23:49] <jnthn> Call bla in place of the ... and arrange for it to return the type it makes

[23:49] <jnthn> Should work out well

[23:51] <SmokeMachine> jnthn: that worked!!!

[23:51] <SmokeMachine> thank you very much!

[23:52] <jnthn> :)

[23:56] <SmokeMachine> jnthn: there is something wrong... :(

[23:56] <SmokeMachine> https://www.irccloud.com/pastebin/gejB2EdA/

[23:57] <SmokeMachine> it thinks that `B::ResultSet.new(filter => Red::F...` isn't a `B::ResultSet`

[23:57] <jnthn> Intersting...

[23:57] <jnthn> Maybe := instead of =

[23:57] <jnthn> Sleep time for me...'night

[23:58] <SmokeMachine> the same... :(

[23:58] *** MilkmanD1n is now known as MilkmanDan

[23:58] <SmokeMachine> thank you!

[23:58] <jnthn> OK, then not sure, and too tired to think much more about it now :)

[23:58] <jnthn> Good luck!

[23:58] <jnthn> o/

[23:58] <SmokeMachine> thanks!

