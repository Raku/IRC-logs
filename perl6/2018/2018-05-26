[00:03] *** shareable6 joined
[00:05] *** comborico1611 left
[00:09] *** vike joined
[00:45] *** margeas left
[01:12] *** raschipi left
[01:27] *** Xliff joined
[01:27] <Xliff> \o

[01:27] <yoleaux> 13 May 2018 11:55Z <Zoffix> Xliff: flatmap is slated for removal in 6.e, with deprecation in 6.d, so what it should do is moot. But with other routines, we generally don't add a Whatever or argless candidate unless the default is very clear. We aren't Perl 5.

[01:27] <yoleaux> 13 May 2018 12:41Z <Zoffix> Xliff: P.S.: the no-op map would be `{$_}`, not `*.self`, as the latter will blow up any unhandled Failures.

[01:27] <Xliff> Zoffix++

[01:28] <Xliff> I'm bored. Will p6 for cookies.

[01:28] *** molaf joined
[01:29] <Xliff> Figgers. It's FRYday.

[01:50] *** Kaiepi left
[01:52] *** Kaiepi joined
[01:55] *** dominix joined
[01:56] <dominix> hi proficient perl6 gurus

[01:56] <dominix> I would like to be able to use commnd line ARGS the same way as in perl5

[01:56] *** ilbot3 joined
[01:56] *** ChanServ sets mode: +v ilbot3

[01:56] <dominix> but that does works

[01:56] *** fascinum joined
[01:57] <dominix> perl6 permute.p6 ralu

[01:57] <dominix> arlu

[01:57] <dominix> ural

[01:57] <dominix> ...

[01:57] <dominix> echo ralu | perl6 permute.p6

[01:57] <dominix> nothing

[01:58] <dominix> #! env perl6 -n for @*ARGS -> $a {  	for $a.comb.permutations { 		$_.join.say 	} }

[01:59] <Juerd> Could you share the equivalent Perl 5 construct? Because I can't think of anything that takes either a string (not filename) from @ARGV or STDIN

[02:00] <Juerd> There's the magic ARGV filehandle, that's used with <> or readline ARGV, but that takes filenames on the command line, and returns the lines from the file(s)

[02:03] <Juerd> The equivalent of 'ARGV' is '$*ARGFILES', the equivalent of '<>' is just 'get' (which is short for get($*ARGFILES) or $*ARGFILES.get)

[02:04] <Juerd> Or actually, <<>>, the secure and saner version of <>.

[02:10] *** llfourn joined
[02:14] *** fascinum left
[02:20] <Xliff> Aaand... more minor additions to my SQL parser.

[02:20] * Xliff drops mic.

[02:34] <dominix> does it work even if ARGS are not files ? 

[02:40] *** Zoffix joined
[02:41] <Zoffix> dominix: yeah, $*ARGFILES is just an IO::CatHandle and it can work with any collection of IO::Handle or IO::Pipe objects

[02:42] <Zoffix> So I just built rakudo on Raspberri Pi B+. I was kinda expecting this to take several hours based on descriptions of people saying that it takes ages, but it actually got done in 25 minutes.

[02:45] *** n0tjack joined
[02:49] <dominix> ARGFILE try to open a file on a command line, but I want to just use the name provided on the command line

[02:50] <Zoffix> dominix: use how?

[02:50] <dominix>         for @*ARGS -> $a {                 for $a.comb.permutations {                         $_.join.say                 }

[02:51] <Zoffix> dominix: OK. So that works, right?

[02:51] <dominix> it works if I call perl6 permute.p6 tru lol

[02:52] <Zoffix> dominix: so what's the problem?

[02:52] <dominix> but it doesn't if I cal echo tru lol |perl6 permute.p6

[02:52] <dominix> I want both possibility

[02:53] <Zoffix> dominix: and what happens in `echo tru lol |perl6 permute.p6 true lol` case?

[02:53] <dominix> I ended with if @*ARGS { ...} else { for $*ARGFILES.lines -> $a ...

[02:53] <dominix> but it is not nice

[02:54] <Zoffix> You can write it as `for @*ARGS || $*ARGFILES.lines -> $a { ... }`

[02:54] <geekosaur> most things optimize the files-or-stdin case, not the argstrings-or-stdin case

[02:55] <Zoffix> You can write it as `for @*ARGS || lines() -> $a { ... }`

[02:55] <lucs> echo tru lol | xargs perl6 permute.p6  # Maybe?

[02:55] *** Sgeo_ left
[02:55] <dominix> this doesnt work # echo one two three |perl6 -e 'say $_ for reverse @*ARGS'

[02:56] <Zoffix> dominix: that's because you're confusing STDIN and command line arguments

[02:56] <dominix> this doesnt work # echo one two three |perl6 -e 'say $_ for reverse @*ARGFILES'

[02:56] <Zoffix> dominix: that's because it's $*ARGFILES, not @*ARGFILES

[02:57] <dominix> perl6 -e '.say for $*ARGFILES.lines;' ral lar arl

[02:57] <dominix> this produce error

[02:57] <Zoffix> dominix: that's because you're telling it to open `ral lar arl` as files

[02:57] <dominix> Failed to open file /home/dominix/src/perl6/ral: No such file or directory

[02:58] <Zoffix> dominix: echo one two three |perl6 -e 'say $_ for reverse @*ARGS || words'

[02:58] <Zoffix> @*ARGS are command line arguments, $*ARGFILES takes them and opens them as files or uses $*IN if they're not specified. 

[02:59] <dominix> ok, do do I proceed to get the name provided on command line with both "echo name| perl 6  prog" and "perl6 prog name"  

[02:59] *** Sgeo joined
[02:59] <dominix> how

[02:59] <Zoffix> dominix: echo one two three |perl6 -e 'say $_ for reverse @*ARGS || words'

[03:00] <dominix> nice

[03:00] <Zoffix> dominix: or `lines` instead of `words` or some more complex parsing, depending on how you want STDIN to be processed

[03:00] <dominix> $*ARGFILES was just a wrong use of this

[03:00] <Zoffix> Yup

[03:01] *** Khisanth joined
[03:18] *** mcmillhj joined
[03:18] *** Sgeo_ joined
[03:19] *** n0tjack left
[03:21] *** Sgeo left
[03:25] *** mcmillhj left
[03:25] *** mcmillhj joined
[03:29] <dominix> thanks Zoffix:

[03:37] *** Sgeo joined
[03:37] *** Sgeo_ left
[03:38] *** Sgeo_ joined
[03:38] *** mcmillhj left
[03:41] <Zoffix> Any time.

[03:42] *** Sgeo left
[03:57] *** Schepeers joined
[03:57] *** sauvin joined
[04:02] <Xliff> Use of uninitialized value $repo-id of type Any in string context.

[04:02] <Xliff> Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.

[04:02] <Xliff> ??

[04:02] <Xliff> That was during compile.

[04:12] *** xi- joined
[04:13] <Xliff> Why am I getting this when I am trying to use a Grammar => "Too many positionals passed; expected 1 argument but got 2"

[04:13] <Xliff> Please note, this is the Grammar, not the Action class.

[04:17] *** araraloren joined
[04:55] <Xliff> Hello. Is anyone around?

[05:14] *** sena_kun joined
[05:18] *** wamba joined
[05:20] *** araraloren left
[05:21] *** araraloren joined
[05:25] *** mcmillhj joined
[05:30] *** Kaiepi left
[05:30] *** Kaiepi joined
[05:30] *** mcmillhj left
[05:40] *** mcmillhj joined
[05:41] *** kurahaupo joined
[05:44] *** ChoHag joined
[05:44] *** mcmillhj left
[05:50] <Summertime> is there much mechanism to create your own repl, in the standard library?

[05:51] *** ChoHag left
[06:06] *** mcmillhj joined
[06:07] *** BenGoldberg joined
[06:11] *** mcmillhj left
[06:12] *** BenGoldberg left
[06:19] *** mcmillhj joined
[06:22] *** wamba left
[06:22] *** espadrine_ joined
[06:23] *** jmerelo joined
[06:23] *** mcmillhj left
[06:30] <araraloren> Xliff hi

[06:31] <araraloren> Summertime REPL ? I have a module maybe help you, not in stdlib

[06:33] <Xliff> araraloren: Hi!

[06:33] <Xliff> araraloren: Do you have any experience with Grammars?

[06:33] <araraloren> yeah, a little

[06:33] <Xliff> If not, if you have a problem you want another pair of eyes on, then let me know.

[06:33] <Xliff> \o/

[06:34] <Xliff> araraloren: Do you know why I am getting the following error when trying to use a token in a rule?

[06:34] <Xliff> "Too many positionals passed; expected 1 argument but got 2

[06:34] <Xliff> "

[06:34] <jmerelo> Xliff: Can we see the code?

[06:34] <araraloren> Xliff in my memory, maybe the token name

[06:35] <Xliff> Key thing here. I am trying to use one grammar as a subclass of another.

[06:35] <araraloren> Xliff I face that problem serval times

[06:35] <araraloren> but you better post your code here

[06:35] <araraloren> or gist

[06:35] <jmerelo> Xliff: or post it to StackOverflow _and_ also here.

[06:35] <Xliff> jmerelo: https://github.com/Xliff/perl6-Parser-Sql/blob/master/lib/Parser/SQL/Grammar/DDLGrammar.pm6#L1090

[06:36] <Xliff> The <CREATE> triggers the errors, but it is a method of Tokens, so it should inherit, right?

[06:36] <araraloren> wow, a huage file

[06:36] <jmerelo> Xliff: oh, wow

[06:37] <jmerelo> araraloren: I see like 10 different rules/tokens there. Every time you do |, you might want to create a separate token

[06:37] <jmerelo> Xliff: what's the whole error?

[06:38] <araraloren> Can I get the error run your project ?

[06:38] <jmerelo> Xliff: there's also Grammar::Debugger and Grammar::Tracer. It will help you showing what's going on there...

[06:38] <Xliff> If you want to check out the error, clone the project.

[06:39] <Xliff> Then run the following from the cloned directory:

[06:39] <Xliff>  perl6 -Ilib scripts/grammarTest.pl6

[06:39] <Xliff> jmerelo: Already ahead of you. See ^^

[06:40] <Xliff> jmerelo: I am trying not to have too many one-off tokens.

[06:40] <jmerelo> Xliff: that leads to too many difficult to debug errors

[06:40] <Xliff> I'm beginning to wonder if that's the problem I am running into. However, that's just a guess.

[06:40] <Xliff> jmerelo: This is an SQL parser. I am expecting difficult.

[06:41] <Xliff> What I am not expecting, are misleading errors.

[06:41] <Xliff> It is saying it is getting 2 positionals, however... to my knowledge... tokens and rules don't TAKE any unless you specify it in the sig.

[06:42] <Xliff> So.... token CREATE { 'CREATE' } should just match 'CREATE'

[06:42] <jmerelo> Xliff: token and rules are just routines

[06:42] <Xliff> I know

[06:43] <Xliff> Which is why this is so frustrating.

[06:43] <Xliff> I am hoping this is not some under-the-hood thing...

[06:43] <Xliff> But I am thinking the inherited tokens are breaking.

[06:43] <jmerelo> Xliff: I have cloned your repo. However, it does not have a META6.json file so I can't install dependencies easily

[06:43] <Xliff> No. It really doesn't have any.

[06:44] <Xliff> This is NOT ready-to-distribute code in ANY way.

[06:44] <Xliff> jmerelo: If you would like to send a PR for a META6.json, I'd really appreciate it.

[06:44] <araraloren> Xliff I figure out, it's the token name problem

[06:44] <jmerelo> XLiff: It does. Grammar::Tracer. If it's not maybe it's better if you don't tell people to clone it in order to see the error. Just post the error.

[06:44] <araraloren> you better change CREATE to something other

[06:45] <araraloren> the token name

[06:45] <Xliff> *headdesk*

[06:45] <Xliff> Are you kidding me?

[06:45] <Xliff> Reserved word conflict?

[06:45] <araraloren> yeah, I think it is

[06:46] <araraloren> I already told you, I face this problem serval times

[06:46] <Xliff> Thank you!

[06:46] <araraloren> It's not any syntax error obviously

[06:46] * Xliff bearhugs araraloren!

[06:46] <Xliff> Now I need to see why the match still fails.

[06:46] <araraloren> yeah, good luck

[06:47] <Xliff> Yeah. Grammar::Tracer isn't much help, here.

[06:49] <araraloren> I think this trap should documents in `traps`

[06:49] <araraloren> jmerelo do you know where I can report this trap ?

[06:50] <jmerelo> araraloren: maybe perl6/doc and rakudo/rakudo, both

[06:50] <jmerelo> perl6/doc for the trap, rakudo/rakudo for issuing a meaningful error 

[06:51] <araraloren> ok

[06:52] <Xliff> Hmmm... why aren't Grammar::Tracer or Grammar::Debugger working?

[06:52] <araraloren> IDK, not know that module

[06:52] <araraloren> I am using `use trace` for debug sometimes

[06:53] <Xliff> OK. You've been a big help nonetheless.

[06:54] *** mcmillhj joined
[06:57] <jmerelo> Xliff: I'm changing CREATE to CREATE and that fixes the initial error. But there are others...

[06:57] <jmerelo> Xliff: No such method 'table_ident' for invocant of type 'DDLGrammar'

[06:58] <jmerelo> Xliff: Grammar::Tracer does not work because it does not really start to parse anything. The error prevents it from starting to work.

[06:58] <jmerelo> Sorry, that above was CREATE → KREATE

[06:58] *** mcmillhj left
[07:02] <Xliff> I've fixed the error and Grammar::Trace is never invoked.

[07:02] <Xliff> You need to move table_ident to line 638.

[07:02] <Xliff> That will fix that error.

[07:07] <jmerelo> araraloren: thanks

[07:08] <araraloren> welcome :)

[07:10] <Xliff> OK. Got Grammar::Tracer to finally fire. (cursed lexicals)

[07:10] <Xliff> Only to get yet another weird error.

[07:10] <Xliff> I don't want to commit changes because it breaks everything, but....

[07:11] *** parv joined
[07:15] <Xliff> OK, I've updated git. If you all can figure out the problem now, I will owe you massive amounts of BEER!

[07:15] <Xliff> But for now, I am going to wind it down. Thank you both for your help.

[07:18] <jmerelo> Xliff: you should try and create proper tests for every part of the grammar. Unit tests really help debug this kind of problems.

[07:19] * Xliff *cries*

[07:19] <Xliff> Do you know how many tests I would need to write?

[07:19] <Xliff> *sigh*

[07:20] <jmerelo> Xliff: right now it's failing in if_not_exists. It's probably due to backtracking, because the previous token is probably gobbling up what if_not_exists needs

[07:20] *** mcmillhj joined
[07:20] <Xliff> No. That's SUPPOSED to happen.

[07:20] <jmerelo> Xliff: 10 minutes writing a test saves you 10 hours debugging 

[07:20] <Xliff> (well, that's true. :P)

[07:20] <Xliff> But it is not failing in if_not_exists.

[07:21] <Xliff> Look at the create statement being tested. It's not there. That fail is SUPPOSED to happen, but it is not supposed to kill the entire rule.

[07:21] <Xliff> Because it is OPTIONAL

[07:21] <Xliff> What bothers me is the VMNull error.

[07:21] <Xliff> (But yes, I will start writing unit tests for tokens.)

[07:22] <jmerelo> Xliff: that's because it's not doing backtraking

[07:22] <jmerelo> It does not find if, should backtrack, it's not doing it, it fails...

[07:24] *** mcmillhj left
[07:25] <jmerelo> Xliff: you can also use regexes in grammars, which will really backtrack. But also, as said above, using smaller and unit-tested token and rules (and regexes) might help you find those errors.

[07:26] *** rindolf joined
[07:29] <Xliff> jmerelo: So that should be regex and not rule... but that will make everything sllooooow

[07:29] <jmerelo> Xliff: you want it fast or you want it good?

[07:29] <Xliff> (and yes, you've won on unit testing... help me write them!!!!)

[07:29] <Xliff> LOL

[07:29] <Xliff> jmerelo WINS!

[07:30] <Xliff> Now. Start with Tokens.pm6! =)

[07:30] <jmerelo> Xliff: tell you want. You help me solve #114 issue and a few more in perl6/doc and I'll help you write those tests...

[07:30] <Xliff> "Cannot invoke this object (REPR: Null; VMNull)" <--- but that still bothers me.

[07:30] <jmerelo> (I meant tell you what)

[07:31] <jmerelo> Xliff: yep, sometimes error messages are less than awesome... It's telling you there's an object it's using a Null representation, and it's gone all the way down to the virtual machine

[07:31] <Xliff> Yes. I know that. :P :>

[07:31] <Xliff> It shouldn't be there.

[07:32] *** psychoslave joined
[07:32] <Xliff> jmerelo: You don't ask for much, do you.

[07:32] <Xliff> #114 is an entire book.

[07:33] <jmerelo> Xliff: ;-)

[07:33] <jmerelo> jmerelo: You might understand why I don't want to get involved in other things. But you start to write tests and I can help you if you bump into problems.

[07:33] <Xliff> k

[07:34] <Xliff> But I am reading. Will see if I can help anywhere.

[07:34] <Xliff> Probably tomorrow.

[07:34] <jmerelo> Xliff: you might want to create them automatically, from every token, for instance.

[07:34] <jmerelo> Xliff: great. Thanks!

[07:34] <Xliff> Xliff needs sleep...badly!

[07:34] <jmerelo> Xliff: you do that. Take care :-)

[07:34] <Xliff> jmerelo: You read my mind. This means MOP

[07:36] <araraloren> :) afternoon here

[07:36] <Xliff> jmerelo: Are you using this as a task list?

[07:36] <Xliff> https://github.com/perl6/doc/issues/114#issuecomment-327243953

[07:36] <Xliff> Structures, Iterating, Data Structures and Hashmaps?

[07:36] <jmerelo> Xliff: right, pretty much

[07:37] <jmerelo> I'm now working on hashmaps. The rest has been outlined, but is still TBD.

[07:37] <Xliff> Iterating is going to be interesting.

[07:37] <araraloren> great!

[07:37] *** andrzejku joined
[07:37] <Xliff> Poke me tomorrow. I will be on later. And let's talk about how Iterators should be described.

[07:38] <jmerelo> Xliff: OK

[07:38] <Xliff> :)

[07:38] <jmerelo> araraloren: where are you? It's morning here in sunny Granada, Spain.

[07:38] <araraloren> here is China

[07:38] <Xliff> jmerelo: Spain. Now I'm jealous.

[07:38] *** mcmillhj joined
[07:38] <araraloren> andrzejku what's going on ?

[07:38] *** Xliff is now known as Xliff_Zzzzzzz__X

[07:39] *** Xliff_Zzzzzzz__X is now known as Xliff_Zzzzzzz___

[07:39] <andrzejku> araraloren: fine :)

[07:39] *** Xliff_Zzzzzzz___ is now known as Xliff_Zzzz___X_X

[07:39] <andrzejku> araraloren: what are you doing today?

[07:40] <araraloren> oh, do some working for my customer, fix some issue of my module

[07:40] <andrzejku> araraloren: for Perl6?

[07:40] <andrzejku> :D

[07:40] <araraloren> andrzejku you are working the Compile ?

[07:40] <araraloren> yeah, Perl 6

[07:40] <andrzejku> araraloren: not anymore

[07:41] <araraloren> andrzejku some spider script 

[07:41] <andrzejku> araraloren: nice

[07:42] <andrzejku> araraloren: I am working currently at my work with C and somehow started to dislike C++ :P

[07:42] <araraloren> they use that for grab data from some library

[07:42] <andrzejku> araraloren: how they react that you want to do that in Perl6?

[07:42] *** mcmillhj left
[07:43] *** rindolf left
[07:43] <araraloren> they not care about what language using in most case

[07:43] <andrzejku> :)

[07:44] <araraloren> and they have interest to Perl 6, using Perl 6 would better than Python

[07:44] <araraloren> they want learn Perl 6 too

[07:44] <andrzejku> araraloren: they really good news

[07:44] <andrzejku> is it China customer?

[07:44] <araraloren> yeah

[07:45] <andrzejku> nice

[07:45] <araraloren> When using Perl 6 you are learning it

[07:45] <araraloren> and you would find issue to help them improve the language 

[07:46] <araraloren> It's enough

[07:46] <andrzejku> araraloren: ya I know it

[07:46] <araraloren> I think 

[07:46] <andrzejku> I think in China it is much more easier for work then here

[07:46] <araraloren> honest, I am not have much ability to do great things

[07:47] <andrzejku> we have only some very popular languages here

[07:47] <araraloren> andrzejku, maybe haha

[07:47] <araraloren> Java is popular here, I am using C for working, and Perl 6 for my own 

[07:48] <andrzejku> araraloren: hah thats nearly as me

[07:48] <araraloren> they are like Java/PHP/Go/JavaScript

[07:48] <araraloren> and also Python

[07:48] <andrzejku> araraloren: I have C90 at work, C++ but very few and Perl 6 as a hobby from time to time

[07:49] *** robertle joined
[07:49] <araraloren> oh, great!

[07:49] <andrzejku> araraloren: last time I have done some exercises with Rust

[07:49] <araraloren> I think Rust is a little suck

[07:49] <andrzejku> araraloren: and it looks a little bit easier then C++ and baremetal language

[07:50] <andrzejku> araraloren: it's extremly safety, you have to remmember some rules there like ownership

[07:50] <andrzejku> but it really looks modern and clear for me

[07:51] <araraloren> hmm

[07:51] <andrzejku> comparing to C of course

[07:51] <araraloren> I have been learned Rust

[07:51] <araraloren> andrzejku what about Go

[07:52] <andrzejku> araraloren: I am trying to not touch corporate languages as they are too dangerous

[07:52] <araraloren> how popular in your working place

[07:52] <andrzejku> araraloren: what do you mean?

[07:52] <araraloren> I mean golang, how popular in your working place

[07:52] <araraloren> city

[07:52] <andrzejku> araraloren: at all

[07:53] <andrzejku> araraloren: in my company there are only C/C++,Python(testing),Java and probably Javascript

[07:53] <araraloren> oh

[07:53] <andrzejku> but you can find a few Golang jobs

[07:54] <araraloren> yeah, here is similar

[07:54] <andrzejku> however here is a complete desert for Perl/Perl6 and Rust

[07:54] <araraloren> yeah, here too

[07:55] <araraloren> Somebody learn Rust, but not any company using it

[07:55] <andrzejku> araraloren: ya I said we should set our own company =D

[07:56] <araraloren> yeah

[07:56] <andrzejku> araraloren: I was reading even articles about flat structure in company

[07:56] <andrzejku> so we can save money for managers :D

[07:56] <araraloren> haha

[07:56] <andrzejku> araraloren: it looks like it is possible

[07:57] <araraloren> what ?

[07:57] <andrzejku> company without management

[07:57] <andrzejku> kind of self organized

[07:57] <araraloren> haha

[07:58] <andrzejku> I am talking here about really large companies

[07:58] <araraloren> oh, that's hard to imagine

[07:59] <andrzejku> I read that it already exist somewhere in US

[07:59] *** mcmillhj joined
[08:00] <araraloren> not got it

[08:01] *** rindolf joined
[08:02] *** dominix left
[08:04] *** mcmillhj left
[08:08] <Geth> ¦ doc: 08864e4493 | (JJ Merelo)++ | doc/Language/classtut.pod6

[08:08] <Geth> ¦ doc: Adds indexing for ! as prefix for private methods

[08:08] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/08864e4493

[08:08] <Geth> ¦ doc: 38b9e761eb | (JJ Merelo)++ | doc/Language/classtut.pod6

[08:08] <Geth> ¦ doc: Adds indexing for ! as prefix for private methods without errors

[08:08] <synopsebot> Link: https://doc.perl6.org/language/classtut

[08:08] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/38b9e761eb

[08:12] *** shareable6 left
[08:25] *** domidumont joined
[08:31] *** domidumont left
[08:32] *** domidumont joined
[08:32] *** psychoslave left
[08:45] *** parv left
[08:47] <Geth> ¦ doc: 55831467a4 | (JJ Merelo)++ | 2 files

[08:47] <Geth> ¦ doc: Updates Associative, closes #2062

[08:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/55831467a4

[08:47] *** MilkmanDan joined
[08:52] *** mcmillhj joined
[08:57] *** mcmillhj left
[08:58] *** DarthGandalf joined
[08:59] *** espadrine_ left
[09:04] *** mcmillhj joined
[09:08] *** shareable6 joined
[09:08] *** mcmillhj left
[09:15] *** HaraldJoerg joined
[09:16] *** mcmillhj joined
[09:21] *** darutoko joined
[09:21] *** mcmillhj left
[09:28] *** eliasr joined
[09:47] *** mcmillhj joined
[09:51] *** mcmillhj left
[10:16] *** mcmillhj joined
[10:16] <Geth> ¦ doc: 162efc4ffe | (JJ Merelo)++ | 2 files

[10:16] <Geth> ¦ doc: Improves even more Associative refs #2062

[10:16] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/162efc4ffe

[10:20] *** mcmillhj left
[10:21] <Geth> ¦ doc: 630ecc724a | (JJ Merelo)++ | doc/Language/hashmap.pod6

[10:21] <Geth> ¦ doc: Completed hashmap page

[10:21] <Geth> ¦ doc: 

[10:21] <Geth> ¦ doc: This closes #1682. Also advances towards the end of #114, which seems

[10:21] <Geth> ¦ doc: closer and closer.

[10:21] <synopsebot> Link: https://doc.perl6.org/language/hashmap

[10:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/630ecc724a

[10:24] *** telex joined
[10:27] *** shareable6 left
[10:31] *** kurahaupo left
[10:32] *** kurahaupo joined
[10:34] <El_Che> new updated rakudo 2018.05 packages (and repos): https://nxadm.github.io/rakudo-pkg/ https://github.com/nxadm/rakudo-pkg/releases

[10:34] <jmerelo> El_Che++

[10:35] <El_Che> my ubuntu had it when apt-get update'ing it :)

[10:35] *** mcmillhj joined
[10:38] <El_Che> notable6: weekly new updated rakudo 2018.05 packages (and repos): https://nxadm.github.io/rakudo-pkg/ https://github.com/nxadm/rakudo-pkg/releases

[10:38] <notable6> El_Che, Noted!

[10:40] *** mcmillhj left
[10:41] *** AlexDaniel joined
[10:57] *** espadrine_ joined
[11:06] *** mcmillhj joined
[11:11] *** mcmillhj left
[11:28] <Geth> ¦ doc: 7c9c259eaf | (JJ Merelo)++ | doc/Language/hashmap.pod6

[11:28] <Geth> ¦ doc: Clarifies redefinition of hash funcs refs #1682

[11:28] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7c9c259eaf

[11:28] <synopsebot> Link: https://doc.perl6.org/language/hashmap

[11:33] <tbrowder_>  ref unicode code points: is there any way in p6 to get any alias names for them?

[11:34] <jmerelo> tbrowder_: you mean get from the number to the name? Or aliases to the name

[11:36] <tbrowder_> i can go from number to uniname (the official name) but i would like to see the alias names such as for the :C (control) property chars.

[11:39] *** jmerelo left
[11:40] <tyil> is there an easy way to convert the character "1" to the name of the character, in this case "one"?

[11:40] <tyil> I was thinking there's surely some unicode property that calls it a "one", but I'm not well versed in unicode magic

[11:41] *** mcmillhj joined
[11:45] *** enheh joined
[11:46] <lizmat> m: say "1".uniname  # tyil 

[11:46] <camelia> rakudo-moar 6663a6d45: OUTPUT: «DIGIT ONE␤»

[11:46] <tyil> neat

[11:46] <tyil> thanks lizmat 

[11:47] *** mcmillhj left
[11:47] <tyil> now to make it more interesting, would it be doable with "10" -> "ten" as well?

[11:47] <tyil> m: say "10".uniname

[11:47] <camelia> rakudo-moar 6663a6d45: OUTPUT: «DIGIT ONE␤»

[11:48] *** molaf left
[11:51] *** margeas joined
[11:54] <lizmat> m: m: say "10".uninames

[11:54] <camelia> rakudo-moar 6663a6d45: OUTPUT: «(DIGIT ONE DIGIT ZERO)␤»

[11:54] <lizmat> m: dd "10".uninames

[11:54] <camelia> rakudo-moar 6663a6d45: OUTPUT: «("DIGIT ONE", "DIGIT ZERO").Seq␤»

[11:55] *** Zoffix left
[12:08] *** eliasr left
[12:15] *** mcmillhj joined
[12:18] *** pmurias joined
[12:20] *** mcmillhj left
[12:24] *** markong joined
[12:25] *** margeas left
[12:28] *** Kaiepi left
[12:29] *** Kaiepi joined
[12:31] *** mcmillhj joined
[12:35] *** mcmillhj left
[12:47] *** psychoslave joined
[13:04] *** mcmillhj joined
[13:07] *** benjikun joined
[13:08] *** mcmillhj left
[13:13] <Geth> ¦ doc: 41da79c870 | (Elizabeth Mattijsen)++ | doc/Language/5to6-perlfunc.pod6

[13:13] <Geth> ¦ doc: Better/More links to ecosystem modules

[13:13] <Geth> ¦ doc: 

[13:13] <Geth> ¦ doc: - many of them did not have a link yet

[13:13] <Geth> ¦ doc: - some others did not have a reference to the ecosystem at all

[13:13] <synopsebot> Link: https://doc.perl6.org/language/5to6-perlfunc

[13:13] <Geth> ¦ doc: - some minor rewording

[13:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/41da79c870

[13:27] *** markong left
[13:28] *** margeas joined
[13:34] *** molaf joined
[13:34] *** mcmillhj joined
[13:38] *** mcmillhj left
[13:43] *** MasterDuke left
[13:47] *** markong joined
[13:48] *** margeas left
[13:53] <Geth> ¦ doc: 956dc7f089 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/5to6-perlfunc.pod6

[13:53] <Geth> ¦ doc: Use HTTPS URLs wherever available

[13:53] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/956dc7f089

[13:53] <synopsebot> Link: https://doc.perl6.org/language/5to6-perlfunc

[13:54] <lizmat> Zoffix++

[13:56] *** markong left
[13:57] *** margeas joined
[14:04] *** margeas left
[14:04] *** markong joined
[14:11] *** molaf left
[14:12] *** Luneburg joined
[14:20] *** mcmillhj joined
[14:25] *** mcmillhj left
[14:28] *** kaare_ joined
[14:33] *** mcmillhj joined
[14:37] *** mcmillhj left
[14:41] *** psychoslave left
[14:43] <Luneburg> Is there an easy way to replace one letter (e.g. all "A") with another (e.g. "D") in a string?

[14:43] <Luneburg> I mean all instances of that one letter

[14:44] <timotimo> yup, you probably want the .trans method

[14:44] <timotimo> or the tr/// operator

[14:44] *** MasterDuke joined
[14:44] *** eliasr joined
[14:45] <Luneburg> timotimo: Thanks :D

[14:45] *** mcmillhj joined
[14:50] *** Luneburg left
[14:57] *** n0tjack joined
[14:58] *** n0tjack left
[15:07] *** mcmillhj_ joined
[15:14] *** mcmillhj_ left
[15:18] *** Sgeo_ left
[15:18] *** Sgeo_ joined
[15:19] *** mcmillhj_ joined
[15:26] *** mcmillhj_ left
[15:30] *** p6steve joined
[15:37] *** wamba joined
[15:42] *** p6steve left
[15:44] *** natrys joined
[15:48] *** mcmillhj left
[16:10] *** jmerelo joined
[16:17] *** araraloren left
[16:24] <Geth> ¦ doc: bfbb0c1bde | (JJ Merelo)++ | doc/Language/typesystem.pod6

[16:24] <Geth> ¦ doc: Minor reorganization of sectioning

[16:24] <Geth> ¦ doc: 

[16:24] <Geth> ¦ doc: Upgraded a level 4 section to level 3, since it was the only one and

[16:24] <Geth> ¦ doc: there was no more text. Refs #2063.

[16:24] <synopsebot> Link: https://doc.perl6.org/language/typesystem

[16:24] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/bfbb0c1bde

[16:24] *** skids joined
[16:34] *** Sgeo_ left
[16:35] *** Sgeo_ joined
[16:39] <Geth> ¦ doc: 9dbf1ef52f | (JJ Merelo)++ | doc/Type/Attribute.pod6

[16:39] <Geth> ¦ doc: Minor changes and reflow; clarifies example

[16:39] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9dbf1ef52f

[16:39] <synopsebot> Link: https://doc.perl6.org/type/Attribute

[16:59] *** mcmillhj joined
[17:01] *** Zoffix joined
[17:02] <Zoffix> ZofBot: did the robot invasion begin?

[17:02] <Zoffix> Man, this building's alarm system is holding me hostage :}

[17:04] <Zoffix> m: say (DateTime.new("2018-05-28T08:03:18.627107-04:00") - DateTime.now.in-timezone(-4*60))/60/60

[17:04] <camelia> rakudo-moar 704b893c6: OUTPUT: «42.981730015866326␤»

[17:05] <Zoffix> I guess I can go on a 42-hour perl 6 hacking marathon until I'm rescued....

[17:10] <moritz> sound like taustation private shuttle repair times :)

[17:13] <Geth> ¦ doc: 32e87c4ac8 | 陈梓立++ (committed using GitHub Web editor) | README.zh.md

[17:13] <Geth> ¦ doc: Sync

[17:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/32e87c4ac8

[17:16] * jmerelo dials for having pizza sent to Zoffix

[17:18] <timotimo> i'm not sure if zoffix can receive pizza if the security system isn't letting him out, though?

[17:19] *** shareable6 joined
[17:21] <Xliff_Zzzz___X_X> \o

[17:21] *** Xliff_Zzzz___X_X is now known as Xliff

[17:21] <Xliff> Is ModuleHOW documented anywhere?

[17:22] <Zoffix> I got rescued :P

[17:23] <El_Che> hi

[17:23] <timotimo> yay

[17:23] <moritz> o/

[17:26] <Xliff> OK, lets try a different tack. How can I get a list of subs in a module? Is that possible through the metamodel?

[17:26] <Xliff> I'm still debating whether this should be a module or a class.

[17:27] <Zoffix> m: use Test; say Test::.keys

[17:27] <camelia> rakudo-moar 704b893c6: OUTPUT: «(EXPORT &output &todo_output &failure_output)␤»

[17:27] <Zoffix> m: use Test; say Test::EXPORT::.keys'

[17:27] <camelia> rakudo-moar 704b893c6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3use Test; say Test::EXPORT::.keys7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤       …»

[17:27] <Zoffix> m: use Test; say Test::EXPORT::.keys

[17:27] <camelia> rakudo-moar 704b893c6: OUTPUT: «(DEFAULT ALL)␤»

[17:27] <Zoffix> m: use Test; say Test::EXPORT::DEFAULT::.keys

[17:27] <camelia> rakudo-moar 704b893c6: OUTPUT: «(&is &can-ok &is-approx &flunk &fails-like &dies-ok &plan &nok &eval-dies-ok &subtest &does-ok &diag &cmp-ok &skip-rest &skip &lives-ok &is_approx &done-testing &use-ok &ok &like &isa-ok &eval-lives-ok &bail-out &MONKEY-SEE-NO-EVAL &unlike &todo &pass…»

[17:28] <Zoffix> Xliff: so the first one is the `our` stuff that isn't necessarily exported, but you can use it like `Test::todo_output`. The second one lists available export tags, and last one shows the symboles exported by a tag (the "DEFAULT" one in the eval above)

[17:28] <timotimo> instead of using the metamodel, you just use the package interface, i.o.w. the .WHO of the thing

[17:29] <Xliff> Ah. Metamodel is then for classes.

[17:33] *** mcmillhj left
[17:34] <Geth> ¦ doc: 7ed2b2fc95 | (JJ Merelo)++ | doc/Language/functions.pod6

[17:34] <Geth> ¦ doc: Some reflow and example addition

[17:34] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7ed2b2fc95

[17:34] <Geth> ¦ doc: 8a10fbd34e | (JJ Merelo)++ | 2 files

[17:34] <Geth> ¦ doc: Adds rule/token/regex name trap closes #2061

[17:34] <synopsebot> Link: https://doc.perl6.org/language/functions

[17:34] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8a10fbd34e

[17:38] *** stmuk joined
[17:39] <Geth> ¦ doc: 6b90a78600 | (JJ Merelo)++ | doc/Language/traps.pod6

[17:39] <Geth> ¦ doc: REflow and clarification

[17:39] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6b90a78600

[17:39] <synopsebot> Link: https://doc.perl6.org/language/traps

[17:40] *** stmuk_ left
[17:41] <Xliff> m: my token d { \d+ }; say "102342" ~~ /<d>/

[17:41] <camelia> rakudo-moar 704b893c6: OUTPUT: «｢102342｣␤ d => ｢102342｣␤»

[17:41] <Xliff> Is there a way I can make "<d>" dynamic?

[17:42] <Xliff> m: my token d { \d+ }; my $d = 'd'; say "102342" ~~ /<$d>/

[17:42] <camelia> rakudo-moar 704b893c6: OUTPUT: «Nil␤»

[17:42] <timotimo> m: my token d { \d+ }; my $d = 'd'; say "102342" ~~ /<"<$d>">/

[17:42] <camelia> rakudo-moar 704b893c6: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter < (must be quoted to match literally)␤at <tmp>:1␤------> 3{ \d+ }; my $d = 'd'; say "102342" ~~ /<7⏏5"<$d>">/␤Unrecognized regex metacharacter " (must be quoted to match literally)␤at…»

[17:42] <timotimo> m: my token d { \d+ }; my $d = 'd'; say "102342" ~~ /<{"<$d>"}>/

[17:42] <camelia> rakudo-moar 704b893c6: OUTPUT: «｢102342｣␤»

[17:42] <timotimo> there we go

[17:42] <Xliff> LOL!

[17:43] <timotimo> alternatively

[17:43] <Xliff> But I note that $/<d> isn't there anymore

[17:43] <timotimo> m: my token d { \d+ }; my $d = 'd'; say "102342" ~~ ::($d)

[17:43] <camelia> rakudo-moar 704b893c6: OUTPUT: «False␤»

[17:43] <timotimo> m: my token d { \d+ }; my $d = '&d'; say "102342" ~~ ::($d)

[17:43] <camelia> rakudo-moar 704b893c6: OUTPUT: «｢102342｣␤»

[17:43] <timotimo> there we go

[17:43] <Xliff> OK. I like that better. timotimo++

[17:46] *** shareable6 left
[17:49] <jmerelo> Xliff: your question this morning has caused this issue: https://github.com/perl6/doc/issues/2061, this new next in the documentation https://docs.perl6.org/language/traps#Using_certain_names_for_rules/token/regexes and now this question in StackOverflow https://stackoverflow.com/questions/50545534/whats-the-meta-object-rule-for-naming-grammar-rules

[17:50] <jmerelo> Xliff: so thanks, I guess. 

[17:52] <jmerelo>  my $d = token { \d+ }; say "102342" ~~ $d

[17:52] <evalable6> jmerelo, rakudo-moar 704b893c6: OUTPUT: «｢102342｣␤»

[17:53] <jmerelo> m: my token d { \d+ }; my $d = &d; say "102342" ~~ $d

[17:53] <camelia> rakudo-moar 704b893c6: OUTPUT: «｢102342｣␤»

[17:58] *** Zoffix left
[18:00] <Xliff> jmerelo: You are really trying to make me feel bad, aren't you? Hey! Look! I'm writing UNIT TESTS!

[18:00] <Xliff> And yes. I help vit docs.

[18:00] *** kurahaupo_ joined
[18:00] *** kurahaupo_ left
[18:01] *** Kaiepi left
[18:01] <jmerelo> Xliff: not really, quite the opposite. Using perl and raising questions is how documentation (and Perl 6 itself) can be improved.

[18:01] *** kurahaupo_ joined
[18:01] *** Kaiepi joined
[18:01] <Xliff> m: my token COALESCE { 'COALESCE' }; say "COALESCE" ~~ <COALESCE>

[18:01] <camelia> rakudo-moar 704b893c6: OUTPUT: «True␤»

[18:01] <jmerelo> Xliff: it's been a bit of work for a sunny spring Saturday, but it's all for the greater good :-)

[18:01] <Xliff> Humph!

[18:02] <Xliff> That didn't work when I was trying to use it before.

[18:02] <jmerelo> Xliff++ to helping with docs :-)

[18:03] *** kurahaupo left
[18:03] <Xliff> m: my token CLOSE { 'CLOSE' }; say "CLOSE" ~~ <CLOSE>

[18:03] <camelia> rakudo-moar 704b893c6: OUTPUT: «True␤»

[18:03] <Xliff> I wonder if that is because I am trying to export token CLOSE

[18:03] <jmerelo> Xliff: I really am not sure about what constitutes "the list". That is why I asked the question in SO

[18:03] <Xliff> I know.

[18:03] <moritz> m: say "CLOSE" ~~ <CLOSE>

[18:03] <camelia> rakudo-moar 704b893c6: OUTPUT: «True␤»

[18:03] <jmerelo> Xliff: it's not the same if you define it independently or inside a grammar

[18:04] <moritz> no regex involved

[18:04] <jmerelo> m: grammar g { token TOP { <CLOSE> }; token CLOSE { 'defined' } }; say g.parse('defined')

[18:04] <camelia> rakudo-moar 704b893c6: OUTPUT: «｢defined｣␤ CLOSE => ｢defined｣␤»

[18:04] <jmerelo> m: grammar g { token TOP { <TWEAK> }; token TWEAK { 'defined' } }; say g.parse('defined')

[18:04] <camelia> rakudo-moar 704b893c6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot find method 'match': no method cache and no .^find_method␤at <tmp>:1␤»

[18:05] <Xliff> m: say "COALESCE" ~~ <COALESCE>

[18:05] <camelia> rakudo-moar 704b893c6: OUTPUT: «True␤»

[18:05] <Xliff> our token COALESCE is export          { 'COALESCE' }

[18:05] <jmerelo> m: token TWEAK { 'defined' } }; say 'defined' ~~ <TWEAK>

[18:05] <camelia> rakudo-moar 704b893c6: OUTPUT: «5===SORRY!5===␤Unexpected closing bracket␤at <tmp>:1␤------> 3token TWEAK { 'defined' } 7⏏5}; say 'defined' ~~ <TWEAK>␤Other potential difficulties:␤    Useless declaration of a has-scoped method in mainline (did you mean 'my token…»

[18:05] <Xliff> ^^ This will break my autogenerated test.

[18:05] <jmerelo> m: token TWEAK { 'defined' } ; say 'defined' ~~ <TWEAK>

[18:05] <camelia> rakudo-moar 704b893c6: OUTPUT: «Potential difficulties:␤    Useless declaration of a has-scoped method in mainline (did you mean 'my token TWEAK'?)␤    at <tmp>:1␤    ------> 3token 7⏏5TWEAK { 'defined' } ; say 'defined' ~~ <␤False␤»

[18:05] <Xliff> our token _COALESCE is export          { 'COALESCE' }

[18:05] <Xliff> ^^ This won't.

[18:05] <jmerelo> m: my token TWEAK { 'defined' } ; say 'defined' ~~ <TWEAK>

[18:05] <camelia> rakudo-moar 704b893c6: OUTPUT: «False␤»

[18:06] <jmerelo> OK, whatever. But no error.

[18:06] <Xliff> So the more I think about it, I might have to make my tokens a class.

[18:06] <jmerelo> Xliff: ... or a role.

[18:07] <jmerelo> Xliff: a bit on that I wrote some time ago https://dev.to/jj/role-ing-on-the-grammars-1bd5

[18:09] <Xliff> jmerelo++ -- Yeah, a role would work too.

[18:09] <Xliff> However for Grammar::Tracer, it needs to be lexically scoped for it to show.

[18:09] <Xliff> But as a mixin, it might work better.

[18:10] <Xliff> m: "CLOSE" ::("CLOSE")

[18:10] <camelia> rakudo-moar 704b893c6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3"CLOSE" :7⏏5:("CLOSE")␤    expecting any of:␤        colon pair␤»

[18:10] <Xliff> m: "CLOSE" ~~ ::("CLOSE")

[18:10] <camelia> rakudo-moar 704b893c6: ( no output )

[18:10] <Xliff> m: "CLOSE" ~~ <CLOSE>

[18:10] <camelia> rakudo-moar 704b893c6: ( no output )

[18:10] <Xliff> m: say "CLOSE" ~~ <CLOSE>

[18:10] <camelia> rakudo-moar 704b893c6: OUTPUT: «True␤»

[18:10] <Xliff> m: my token COALESCE { 'COALESCE' }; say "COALESCE" ~~ ::(COALESCE)

[18:10] <camelia> rakudo-moar 704b893c6: OUTPUT: «Too few positionals passed; expected 1 argument but got 0␤  in regex COALESCE at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:11] <Xliff> m: my token COALESCE { 'COALESCE' }; my $c = 'COALESCE'; say "COALESCE" ~~ ::($c)

[18:11] <camelia> rakudo-moar 704b893c6: OUTPUT: «False␤»

[18:11] <Xliff> m: my token COALESCE { 'COALESCE' }; my $c = 'COALESCE'; say $c ~~ ::($c)

[18:11] <camelia> rakudo-moar 704b893c6: OUTPUT: «False␤»

[18:12] <Xliff> m: my token CLOSE { 'CLOSE' }; my $c = 'CLOSE'; say $c ~~ ::($c)

[18:12] <camelia> rakudo-moar 704b893c6: OUTPUT: «False␤»

[18:13] <Xliff> m: my token CLOSE { 'CLOSE' }; my $c = '&CLOSE'; "CLOSE" ~~ ::($c)

[18:13] <camelia> rakudo-moar 704b893c6: ( no output )

[18:13] <Xliff> m: my token CLOSE { 'CLOSE' }; my $c = '&CLOSE'; say "CLOSE" ~~ ::($c)

[18:13] <camelia> rakudo-moar 704b893c6: OUTPUT: «｢CLOSE｣␤»

[18:13] <Xliff> OK. I think I see what is going on.

[18:14] <jmerelo> m: my token CLOSE { 'CLOSE' }; my $c = &CLOSE; say "CLOSE" ~~ $c

[18:14] <camelia> rakudo-moar 704b893c6: OUTPUT: «｢CLOSE｣␤»

[18:15] <jmerelo> m: my $c = token { 'CLOSE' }; say "CLOSE" ~~ $c

[18:15] <camelia> rakudo-moar 704b893c6: OUTPUT: «｢CLOSE｣␤»

[18:15] <jmerelo> Xliff: (see above)

[18:18] <Xliff> Yeah. I found it.

[18:18] <Xliff> Was forgetting to leave the "&" in front of the token name.

[18:19] <Xliff> jmerelo: https://github.com/Xliff/perl6-Parser-Sql/blob/master/t/01-tokens.t

[18:19] <Xliff> Checks all the symbols defined in Tokens.pm6

[18:19] <Xliff> I still have to do the lower case rules by hand.

[18:20] <jmerelo> Xliff: great!

[18:20] <Xliff> Now... docs...

[18:22] *** cognominal joined
[18:25] <jmerelo> Xliff: greater! :-)

[18:35] *** molaf joined
[18:35] *** darutoko left
[18:39] <cognominal> hi, is/how is this possible to dynamically define a new term with is parsed ?

[18:44] <moritz> I don't think "is parsed" is implemented

[18:44] <moritz> what's your use case?

[18:46] *** raschipi joined
[18:47] <cognominal> say I want a morphology, that is syntax at the word/term level to create literals, like for a date

[18:47] <cognominal> we have that for operators, terms are the logical next step.

[18:48] <cognominal> I don't see parsed trait indeed.

[18:48] <Geth> ¦ doc: c8cedca66c | (JJ Merelo)++ | 3 files

[18:48] <Geth> ¦ doc: Fixes typos

[18:48] <Geth> ¦ doc: 

[18:48] <Geth> ¦ doc: And improves docs of aspell.t trying to deal with #975

[18:48] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c8cedca66c

[18:51] *** lucasb joined
[18:54] <Xliff> What would be sufficient coverage for "Data Types" in the perl documentation?

[18:55] <Xliff> Int, int, IntStr, Rat, FatRat, Num, NumStr, Numeric, String, Cool are givens

[18:55] <Xliff> But what about Array, Hash, Iterator, Match and that sort?

[18:56] <Xliff> Ideally that page would be just an introductory page for each Class, correct?

[18:56] <El_Che>  some languages speak of primitives and composites

[18:56] <Xliff> So...

[18:57] <El_Che> Array and co could be in an composite page

[18:57] <jmerelo> Xliff: That language is about native data types, that is, types that are native to the compiler and architecture

[18:58] <Xliff> Int, int, IntStr, Rational, Rat, RatStr, FatRat, Num, NumStr, Numeric, String, Cool, Hash, and Array?

[18:58] <jmerelo> Xliff: there are a few of them referenced in this issue https://github.com/perl6/doc/issues/1512

[18:59] <jmerelo> Xliff: It's rather about int32, uint8, stuff like that. Most types are https://docs.perl6.org/language/nativecall#Passing_and_Returning_Values , but maybe it's not complete.

[19:00] <Xliff> OK. Well, I will wait until you have a chance to email me, then.

[19:00] <Xliff> I need food.

[19:01] *** comborico1611 joined
[19:01] *** molaf left
[19:03] *** skids left
[19:11] *** domidumont left
[19:14] <jmerelo> Xliff: I don't think I have your email, but you can make any comment on the issue...

[19:16] *** pilne joined
[19:16] <Geth> ¦ doc: 6a69c0bb01 | (JJ Merelo)++ | 2 files

[19:16] <Geth> ¦ doc: Eliminates confusing characters for aspell

[19:16] <Geth> ¦ doc: 

[19:16] <Geth> ¦ doc: This fixes #975. Added some awk code that substitutes \ and |. Also

[19:16] <Geth> ¦ doc: eliminated "ull" and "ffix" from skiplist to test that it effectively

[19:16] <Geth> ¦ doc: works.

[19:16] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6a69c0bb01

[19:17] <jmerelo> And another three-figure, 18 month old issue, biting the dust. Not the easiest ones, these critters...

[19:18] <Xliff> jmerelo: I sent it in a PM

[19:18] <Xliff> jmerelo++

[19:21] <raschipi> There would be no glory in it if it was easy.

[19:24] <jmerelo> raschipi: :-) Of course. 

[19:25] <jmerelo> There are now only 20ish 3-figure (or ~ 2 year old) issues in the repo...

[19:26] <jmerelo> And most of them are either NOTSPECCED or External or wishlist. Meaning: well... 

[19:26] <jmerelo> But this one is mainly about web design https://github.com/perl6/doc/issues/650

[19:26] <jmerelo> Should be easy to fix for those familiar with web design...

[19:29] <jmerelo> jmerelo: Real Madrid just scored (if yells and cries on the top floor don't lie), so I'm AFK and going to the couch. See you tomorrow!

[19:29] *** jmerelo left
[19:33] *** eliasr left
[19:43] <geekosaur> "welp"

[19:53] <buggable> New CPAN upload: Time-localtime-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Time-localtime-0.0.1.tar.gz

[19:56] *** kaare_ left
[20:08] <Kaiepi> i can't reset my PAUSE password

[20:11] *** ChoHag joined
[20:15] *** DarthGandalf left
[20:23] <buggable> New CPAN upload: Time-gmtime-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Time-gmtime-0.0.1.tar.gz

[20:23] <buggable> New CPAN upload: P5localtime-0.0.4.tar.gz by ELIZABETH http://modules.perl6.org/dist/P5localtime:cpan:ELIZABETH

[20:25] *** wamba left
[20:28] *** Zoffix joined
[20:28] <Zoffix> Kaiepi: why not?

[20:30] <Zoffix> Kaiepi: did you use this form with your userid? https://pause.perl.org/pause/query?ACTION=mailpw    And did you get the email with reset instructions?

[20:33] <Zoffix> Kaiepi: and did you fix the apparently-broken reset URL before visiting it? It shouldn't contain any spaces (the one I got had one and I can't just click it)

[20:33] <buggable> New CPAN upload: Time-gmtime-0.0.2.tar.gz by ELIZABETH http://modules.perl6.org/dist/Time::gmtime:cpan:ELIZABETH

[20:33] <buggable> New CPAN upload: Time-localtime-0.0.2.tar.gz by ELIZABETH http://modules.perl6.org/dist/Time::localtime:cpan:ELIZABETH

[20:33] *** natrys left
[20:35] *** andrzejku left
[20:40] * lizmat hears jmerelo yelling on the couch

[20:43] *** |oLa| joined
[20:45] <Zoffix> .oO( Did you see that ludicrous display last night? )

[20:47] <Zoffix> Kaiepi: anyway, if you're still having issues after removing space from PAUSE password reset URL in your email, talk to mst. He's listed as one of PAUSE admins and can likely help you reset your PAUSE account password

[20:47] *** Zoffix left
[20:49] *** rindolf left
[20:59] <tbrowder_> \o

[21:01] <tbrowder_> can anyone think of a need for space chars in pod, other than the newline, that are in the \v character class?

[21:03] <tbrowder_> i want to restrict pod such that you will get an exception (or at least  a warning) if such a char is found in pod.

[21:06] *** DarthGandalf joined
[21:08] *** sena_kun left
[21:11] *** shareable6 joined
[21:14] <raschipi> m: (^0x10FFFF)>>.chr.grep(/\v/)>>.uninames.say

[21:14] <camelia> rakudo-moar 01a373649: OUTPUT: «((<control-000A>) (<control-000B>) (<control-000C>) (<control-000D>) (<control-0085>) (LINE SEPARATOR) (PARAGRAPH SEPARATOR))␤»

[21:16] <raschipi> Most of them will be used by operating systems to represent new-lines...

[21:23] <geekosaur> some things are historical… but that means you occasionally find one of us old fuddy-duddies using them out of habit. like form feeds

[21:24] <geekosaur> (I don't, for the record. never developed that habit)

[21:24] *** stmuk_ joined
[21:26] *** stmuk left
[21:27] *** cognominal left
[21:30] <lucasb> yes, form feed delimited "pages" of text :)

[21:31] <lucasb> some tools use this convention

[21:32] *** |oLa| left
[21:33] <raschipi> Yes, but the question is, would they be found in POD6?

[21:33] *** |oLa| joined
[21:34] *** |oLa| left
[21:34] <raschipi> If it's written in Windows, one would expect \r\n as line endings, instead of just \n

[21:37] *** mst joined
[21:41] <tbrowder_>  raschipi: wouldn’t p6 magically read that as \n?

[21:42] <tbrowder_> and your point about pod6 text is spot on.

[21:47] *** mr_ron joined
[21:49] *** cognominal joined
[21:49] <raschipi> What happens if someone tries to execute something that's not UTF-8 as Perl6?

[21:50] <mr_ron> m: say so "1" ~~ /<:ascii-:alpha>/ # nothing to see yet but wait ...

[21:50] <camelia> rakudo-moar 01a373649: OUTPUT: «True␤»

[21:51] <mr_ron> m: say so "1" ~~ /<:ascii&:alpha>/ # docs seem to say this should work - scroll up a bit from https://docs.perl6.org/language/regexes#Enumerated_Character_Classes_and_Ranges

[21:51] <camelia> rakudo-moar 01a373649: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in metachar:sym<assert>; couldn't find final '>' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3say so "1" ~~ /<:ascii7⏏5&:alpha>/ # docs seem to say this …»

[21:51] <mr_ron> m: say so "a" ~~ /<:ascii&:alpha>/

[21:51] <camelia> rakudo-moar 01a373649: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in metachar:sym<assert>; couldn't find final '>' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3say so "a" ~~ /<:ascii7⏏5&:alpha>/␤    expecting any of:…»

[21:52] <mr_ron> anyone have example for character set/property intersection

[21:53] <timotimo> raschipi: it'll complain about invalid utf8, unless they set the --encoding (or something) commandline flag

[21:55] <raschipi> m: say so "a" ~~ /<:ascii>&<:alpha>/

[21:55] <camelia> rakudo-moar 01a373649: OUTPUT: «True␤»

[21:56] <raschipi> tbrowder_: Right, Perl 6 converts everything. I just wasn't sure it would do the same for the text of the program besides the data.

[21:57] *** |oLa| joined
[21:57] <mr_ron> raschipi: that looks like conjunction but I have to think a bit - maybe it gets me to same result

[21:58] <geekosaur> looks like conjunction but I bet something is thinking it sees embedded p6 code

[21:58] <geekosaur> we've had that kind of confusion pop up before

[21:59] <raschipi> The docs show what mr_ron tried...

[22:01] <mr_ron> raschipi: I didn't see char set / property intersection or union with '|" in roast ... just '+' union and '-' difference ... possible doc issue?

[22:03] <buggable> New CPAN upload: DirHandle-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/DirHandle-0.0.1.tar.gz

[22:05] <mr_ron> m: my $latin-chars = [~] chr(0)..chr(0xFF); say $latin-chars.comb(/<alnum>&<:ascii>/).join # sort of - I haven't played with conjunction that much

[22:05] <camelia> rakudo-moar 01a373649: OUTPUT: «0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz␤»

[22:11] *** |oLa| left
[22:15] <raschipi> Is there a Unicode property that includes all symbols that can be used in identifiers? ID_Continue doesn't include ' or -.

[22:16] <tbrowder_> raschipi: good point, so we probably need to include \r, or at least allow it in the right context.

[22:16] <geekosaur> raschipi, no because what that means varies too much

[22:16] <geekosaur> and if it's to be perl specific, it probablyu should not pretend to be a *unicode* property

[22:16] <tbrowder_> i guess mac os brings its own baggage...

[22:19] <raschipi> geekosaur: I'm asking for the Unicode one, ID_Continue + Annex #31/Table 3/3a

[22:19] <raschipi> classic mac os is supported?

[22:19] *** Xliff_ joined
[22:20] <geekosaur> raschipi, no, but os x still retains some backward compatibility shims and every so often you run into ported things that still use \r

[22:20] <geekosaur> and, er, apple events still have a lot of old mac os-isms

[22:21] <geekosaur> because removing them breaks pretty much anything that uses apple events to talk to e.g. finder

[22:22] <geekosaur> some ways os x has worse backward compatibility baggage than windows does

[22:22] <geekosaur> especially since mcirosoft ripped a lot of the back compat baggage out in 8.0/8.1

[22:23] <mr_ron> m: my token posix_alnum { <+alnum - [_]> &<:ascii> }; my $latin-chars = [~] chr(0)..chr(0xFF); say $latin-chars.comb(/<posix_alnum>/).join

[22:23] <camelia> rakudo-moar 01a373649: OUTPUT: «0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz␤»

[22:23] *** Xliff left
[22:24] <mr_ron> I was looking for a way to do posix alnum and conjunction didn't occur to me as a solution but it looks like it works.  If anyone happens to know of something better I am interested ...

[22:24] <Xliff_> If I want to match a string with a '.' delimiter and not match strings with anything else, what is the best way to do that.

[22:24] <Xliff_> ??

[22:25] <Xliff_> Because "table.field" is fine, but "table:field" is not, but everything I've written will still match "table"

[22:25] <MasterDuke> raschipi: there's no property, but there is the <ident> class

[22:25] <Xliff_> There is a pre-defined <ident> character class?!?

[22:26] *** HaraldJoerg left
[22:26] <MasterDuke> https://docs.perl6.org/language/regexes#Predefined_Character_Classes

[22:30] <raschipi> m: (^127)>>.chr.grep(/<ident>/).say

[22:30] <camelia> rakudo-moar 01a373649: OUTPUT: «(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z _ a b c d e f g h i j k l m n o p q r s t u v w x y z)␤»

[22:30] <raschipi> No ' or -

[22:35] *** ChoHag left
[22:37] <geekosaur> Xliff_, I think you need to provide more information

[22:37] <timotimo> <ident> isn't a character class

[22:37] <Xliff_> say "identifier.ident" ~~ / <ident>* % ':' /

[22:37] <evalable6> Xliff_, rakudo-moar 01a373649: OUTPUT: «｢identifier｣␤ ident => ｢identifier｣␤»

[22:37] <tbrowder_> it looks to me like, regardless of os environment, because the text could have been generated in another os, we would need to alwas consider at least all three forms of \r, \n, and \r\n.  And what about a mangled line ending? my head hurts...

[22:37] <timotimo> m: say "hello'you" ~~ /<ident>/

[22:37] <camelia> rakudo-moar 01a373649: OUTPUT: «｢hello｣␤ ident => ｢hello｣␤»

[22:38] <timotimo> m: say "hello'you" ~~ /<identifier>/

[22:38] <camelia> rakudo-moar 01a373649: OUTPUT: «No such method 'identifier' for invocant of type 'Match'␤  in block <unit> at <tmp> line 1␤␤»

[22:38] <timotimo> mh, fair enough

[22:38] <geekosaur> I can think of a number of things that will do what you said, but most of them don't seem to fit in to likely uses of that

[22:38] <timotimo> but see, <ident> matches a whole word

[22:38] <Xliff_> Note that still matches even though the delimiter is supposed to be ':'

[22:38] <timotimo> m: say "1hello2you3" ~~ /<identifier>/

[22:38] <camelia> rakudo-moar 01a373649: OUTPUT: «No such method 'identifier' for invocant of type 'Match'␤  in block <unit> at <tmp> line 1␤␤»

[22:38] <timotimo> m: say "1hello2you3" ~~ /<ident>/

[22:38] <camelia> rakudo-moar 01a373649: OUTPUT: «｢hello2you3｣␤ ident => ｢hello2you3｣␤»

[22:38] <timotimo> also, it matches numbers but not at the start

[22:39] <Xliff_> And that

[22:39] <Xliff_> is because it will always want to match the first <ident>

[22:39] <Xliff_> Which is correct.

[22:39] <geekosaur> you may need to think in larger chunks

[22:39] <Xliff_> But I want that to not match, and I need a more complex regex to detect that, apparently

[22:40] <Xliff_> geekosaur: You may be right.

[22:40] <geekosaur> or, what exactly do you want to do here?

[22:40] <geekosaur> it may be as simple as anchoring the regex

[22:40] <Xliff_> That's what I thought too.

[22:40] <Xliff_> OK.

[22:40] <Xliff_> namespace.table.field 

[22:40] <Xliff_> ^^ That is the proper way to look at it.

[22:41] <Xliff_> namespace:table:field <-- should throw an error

[22:41] <Xliff_> Or even namespace,table,field.

[22:41] <Xliff_> Basically any separator that isn't "." should throw an error

[22:41] <geekosaur> m: my $x = 'foo.bar:baz'; say $x ~~ /^ <ident>* % '.' $/

[22:41] <camelia> rakudo-moar 01a373649: OUTPUT: «Nil␤»

[22:42] <geekosaur> m: my $x = 'foo.bar.baz'; say $x ~~ /^ <ident>* % '.' $/

[22:42] <camelia> rakudo-moar 01a373649: OUTPUT: «｢foo.bar.baz｣␤ ident => ｢foo｣␤ ident => ｢bar｣␤ ident => ｢baz｣␤»

[22:42] <geekosaur> but I don'tknow if $x is always that or if you mean space delimited things or ???

[22:42] *** BenGoldberg joined
[22:42] <geekosaur> in which case you likely want a grammar that word splits and then tests 'words' against that anchored pattern

[22:43] <Xliff_> Anchoring that way wouldn't work, since that could appear in something like: "2 = foo.bar.baz"

[22:43] <geekosaur> which is what I mean by higher level

[22:43] <geekosaur> you want  agrammar, not just a single regex

[22:43] <Xliff_> This is in a grammar.

[22:43] <Xliff_> I want this in a rule, but I am begining to think I need a regex

[22:43] <geekosaur> then you stop at the colon and let the caller see the colon and throw if it's invalid there

[22:44] <Xliff_> Or maybe I want a rule instead of a token.\

[22:44] <geekosaur> er, invoking ruleregex/whatever

[22:45] <Xliff_> geekosaur: How would I do that, can you show me an example where the invoking rule handles something like that?

[22:45] <geekosaur> it's what you get automatically in that case. if it sees foo:bar it parses foo, and returns it; and then the continuation of the invoking rule/regex/whatever starts *at the colon*

[22:45] <geekosaur> and if the colon is invalid there the match fails

[22:46] <geekosaur> this is if you do token fieldname { <ident>* % '.' }

[22:46] <geekosaur> or equivalent for whatever in place of <ident>

[22:47] <geekosaur> the colon is the next thing whatever invokes <fieldname> will try to match after

[22:47] <geekosaur> if it's not valid there, the match fails at that point

[22:48] *** espadrine_ left
[22:49] <Geth> ¦ doc: 9dc9ae4e14 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[22:49] <Geth> ¦ doc: ensure Mac OS is mentioned

[22:49] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9dc9ae4e14

[22:49] <synopsebot> Link: https://doc.perl6.org/language/regexes

[22:56] *** sauvin left
[23:06] <Kaiepi> zoffix: i did, and i get an error page when i visit the url sent in the email without spaces

[23:09] *** |oLa| joined
[23:10] *** |oLa| left
[23:39] <Xliff_> Would "token keywords { <KEY1> | <KEY2>| ... | <KEYn> }" be better written as a rule or a regex?

[23:40] <timotimo> i'd say regex

[23:40] <timotimo> or token

[23:40] <timotimo> not rule because you probably don't want sigspace in there

[23:46] <Xliff_> why token since if <KEY1> fails, won't the whole token fail?

[23:47] <timotimo> that's not how backtracking works :)

[23:47] <Xliff_> Ah.

[23:47] <timotimo> also, if these KEY1 through n are like literal strings (more exactly: declarative) it won't even try to match the ones that won't match

[23:47] <timotimo> because Longest Token Matching is magic

[23:47] *** stmuk joined
[23:48] *** Zoffix joined
[23:48] <Zoffix> Kaiepi: you should contact the admins.

[23:49] *** stmuk_ left
[23:51] *** aindilis joined
[23:53] <Zoffix> Kaiepi: with your KAIEPI username. Like rjbs mst avar BinGOs They're even in this channel. And I'm guessing ether and like more of admins are in #perl  Going by this page: https://pause.perl.org/pause/query?ACTION=who_pumpkin

[23:53] <Zoffix> And tell them the reset password page gives an error

[23:54] <Zoffix> .oO( PAUSE could use a "Contact us" page )

[23:54] <timotimo> is pause ready for gdpr yet?

[23:55] <Zoffix> I don't know, but I'm really getting sick of spam about it.

[23:55] <Zoffix> s/it/gdpr/;

[23:56] <Zoffix> timotimo: and looks like yes: http://blogs.perl.org/users/neilb/2018/05/pause-privacy-policy.html

[23:56] <Zoffix> "There are some github GDPR issues still open, which we'll be working on over the coming weeks and months."

[23:57] <Zoffix> Kaiepi: oh, found contact email: [email@hidden.address]  Just shoot an email there explaining your issues

