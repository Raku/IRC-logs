[00:00] *** mempko joined
[00:03] *** n9l left
[00:04] *** konsolebox joined
[00:11] *** perlbot left
[00:12] *** pierrot left
[00:12] *** pierrot joined
[00:13] *** perlbot joined
[00:17] *** Nanjizal left
[00:26] *** rindolf left
[00:34] *** FonzieGonzalez joined
[00:46] *** yoleaux joined
[00:46] *** ChanServ sets mode: +v yoleaux

[01:00] *** cdg_ joined
[01:04] *** cdg left
[01:05] *** cdg_ left
[01:06] *** markong left
[01:07] *** astj joined
[01:14] *** FonzieGonzalez left
[01:15] *** itaipu joined
[01:19] *** comborico1611 joined
[01:19] *** DoverMo joined
[01:24] *** aborazmeh joined
[01:24] *** aborazmeh left
[01:24] *** aborazmeh joined
[01:25] *** espadrine left
[01:37] *** comborico1611 left
[01:47] *** troys is now known as troys_

[01:50] <Geth> ¦ doc/master: 4 commits pushed by (Will "Coke" Coleda)++

[01:50] <Geth> ¦ doc/master: 0092b533c3 | fix typos

[01:50] <Geth> ¦ doc/master: a4b84dfe8e | learn word

[01:50] <Geth> ¦ doc/master: 2cee6ff4da | whitespace

[01:50] <Geth> ¦ doc/master: b72dd74101 | use word to avoid spellcheck

[01:50] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/9e66f47c20...b72dd74101

[01:51] *** itaipu left
[01:53] *** bayprogrammer joined
[01:55] *** bayprogrammer left
[01:55] *** bayprogrammer joined
[02:06] *** bayprogrammer left
[02:11] *** eliasr left
[02:14] *** jeromelanteri joined
[02:14] <AlexDaniel> oops, messed up my buffer and accidentally did ``git clone http://reddit.com/``

[02:15] <AlexDaniel> I believe my computer needs to be detoxificated now

[02:18] <geekosaur> if that actually did anything other than error out, that's ... scary

[02:25] <Geth> ¦ doc/post-release: 52 commits pushed by (Aleks-Daniel Jakimenko-Aleksejev)++, (Luca Ferrari)++, (Will "Coke" Coleda)++, (Zoffix Znet)++, (Alex Chen)++, (JJ Merelo)++, (Jan-Olof Hendig)++, (Marcel Timmerman)++, (Itsuki Toyota)++, (Wenzel P. P. Peppmeyer)++

[02:25] <Geth> ¦ doc/post-release: review: https://github.com/perl6/doc/compare/3f25ea5589...5541be5df9

[02:28] <DoverMo> can we make perl6 linux or unix style toolchains?

[02:29] <DoverMo> like the perl5 ones

[02:29] *** bwisti left
[02:30] <mspo> ?

[02:31] *** DoverMo left
[02:45] *** travis-ci joined
[02:45] <travis-ci> Doc build failed. Zoffix Znet 'Merge branch 'master' into post-release'

[02:45] <travis-ci> https://travis-ci.org/perl6/doc/builds/332109318 https://github.com/perl6/doc/compare/3f25ea558935...5541be5df966

[02:45] *** travis-ci left
[02:45] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[02:47] *** ilbot3 left
[02:56] *** ilbot3 joined
[02:56] *** ChanServ sets mode: +v ilbot3

[03:09] *** yoleaux left
[03:09] *** yoleaux joined
[03:09] *** ChanServ sets mode: +v yoleaux

[03:12] *** Nanjizal joined
[03:18] *** cdg joined
[03:49] *** ufobat_ joined
[03:49] *** lookatme joined
[03:52] *** ufobat left
[03:57] *** cdg left
[03:59] *** cdg joined
[04:00] *** softmoth joined
[04:02] *** Nanjizal left
[04:03] *** shinobi-cl joined
[04:04] *** cdg left
[04:06] *** shinobi-cl left
[04:06] *** shinobi-cl joined
[04:07] *** softmoth left
[04:07] *** softmoth joined
[04:08] *** shinobi-cl left
[04:10] *** shinobi-cl joined
[04:11] *** shinobi-cl left
[04:12] *** shinobi-cl joined
[04:16] *** softmoth left
[04:24] *** piojo left
[04:32] *** Cabanossi left
[04:32] *** Cabanossi joined
[04:37] *** epony left
[04:50] *** epony joined
[04:54] *** nativecallable6 joined
[04:54] *** ChanServ sets mode: +v nativecallable6

[04:58] *** piojo joined
[04:59] *** piojo1 joined
[04:59] *** piojo left
[05:00] *** cdg joined
[05:05] *** cdg left
[05:14] *** traxex left
[05:14] *** epony left
[05:19] *** epony joined
[05:21] *** aborazmeh left
[05:32] <shinobi-cl> hi all :) I got this problem: I have this array: (1,2,3,10,11,12). I want to create two from this list, grouping consecutive sets

[05:32] <shinobi-cl> myfunc(1,2,3,10,11,12) returns (1,2,3),(10,11,12)

[05:34] <shinobi-cl> the list is always made from positive integers

[05:34] <shinobi-cl> made of*

[05:40] <lookatme> m: say (1,2,3,10,11,12).rotor(3); # you mean this ?

[05:40] <camelia> rakudo-moar 0a1641e94: OUTPUT: «((1 2 3) (10 11 12))␤»

[05:41] <shinobi-cl> well... almost

[05:41] <shinobi-cl> m: say (1,2,3,4,10,11,12).rotor(3);

[05:41] <camelia> rakudo-moar 0a1641e94: OUTPUT: «((1 2 3) (4 10 11))␤»

[05:41] *** Actualey` joined
[05:41] <shinobi-cl> m: my @a = (1,2,3,10,11,12); my $low = @a.min; my $high = @a.max; my @cutter = ($low .. $high); say @a <</>> @cutter;

[05:41] <camelia> rakudo-moar 0a1641e94: OUTPUT: «[1 1 1 2.5 2.2 2 0.142857 0.25 0.333333 1 1 1]␤»

[05:43] <shinobi-cl>  the idea is to identify the "gaps", in this case, when <> 1, and cut there until we find the other "1"s... or something like this

[05:43] *** Actualeyes left
[05:47] <shinobi-cl> of course i could do it just googling (or stackoverflowing? :) ) or taking examples from other languages, but maybe perl6 has a cooler way to do it :)

[05:49] *** aborazmeh joined
[05:49] *** aborazmeh left
[05:49] *** aborazmeh joined
[05:50] *** statisfiable6 left
[05:50] *** statisfiable6 joined
[05:50] *** ChanServ sets mode: +v statisfiable6

[05:53] *** stmuk_ left
[05:56] *** aborazmeh left
[06:01] *** cdg joined
[06:02] *** khw left
[06:05] *** stmuk_ joined
[06:05] *** geospeck joined
[06:06] *** cdg left
[06:06] *** geospeck left
[06:13] <lookatme> shinobi-cl, so you want find the continuous digits sequence not equal 1 ?

[06:13] <shinobi-cl> m: my @a = (1,2,3,10,11,12,14,16,17,18); my $i = 1; my $last = shift @a; my %sets; push %sets{$i}, $last; for @a -> $v { if ($v != $last + 1) { $i++;  }; $last = $v; push %sets{$i}, $v;}; say %sets.perl;

[06:13] <camelia> rakudo-moar 0a1641e94: OUTPUT: «{"1" => $[1, 2, 3], "2" => $[10, 11, 12], "3" => $[14], "4" => $[16, 17, 18]}␤»

[06:14] <shinobi-cl> this, but more perl6-ish :)

[06:15] <shinobi-cl> not necessarily in a hash, it could be (1,2,3),(10,11,12),(14),(16,17,18). I dont really need the hash keys, just identify "blocks" of contiguous integers

[06:16] <lookatme> oh I see

[06:27] *** klapperl left
[06:27] *** klapperl joined
[06:30] <lookatme> not have any good idea shinobi-cl 

[06:33] <shinobi-cl> i think the rotor you mentioned might be the solution.... I'm looking into that now

[06:42] *** epony left
[06:42] <shinobi-cl> m: say (1,2,4,5).rotor(2 => -1);

[06:42] <camelia> rakudo-moar 0a1641e94: OUTPUT: «((1 2) (2 4) (4 5))␤»

[06:49] *** ChoHag left
[06:56] *** ChoHag joined
[06:58] *** troys_ is now known as troys

[07:02] <lookatme> shinobi-cl, but the rotor is not flexible

[07:02] *** yangzq50 joined
[07:03] <shinobi-cl> m: my %block; my Int $i = 1; (1,2,4,5,6,7,9,11,12,13).rotor(2 => -1).map: { push %block{$i}, $_[0]; ($_[1]  == $_[0] + 1) ?? push %block{$i}, $_[1] !! $i++ }; say %block.perl;

[07:03] <camelia> rakudo-moar 0a1641e94: OUTPUT: «{"1" => $[1, 2, 2], "2" => $[4, 5, 5, 6, 6, 7, 7], "3" => $[9], "4" => $[11, 12, 12, 13]}␤»

[07:03] *** ilmari[m] left
[07:03] <shinobi-cl> i think i'm getting close :)

[07:03] <lookatme> I don't think its better than the usual way 

[07:03] <lookatme> Hmm, that's a better way to iterate the elements

[07:09] <lookatme> m: my %block; my Int $i = 1; (1,2,4,5,6,7,9,11,12,13).rotor(2 => -1).map: { %block{ ($_[1]  == $_[0] + 1) ?? $i !! $i++ }.push($_[0]) }; say %block.perl;

[07:09] <camelia> rakudo-moar 0a1641e94: OUTPUT: «{"1" => $[1, 2], "2" => $[4, 5, 6, 7], "3" => $[9], "4" => $[11, 12]}␤»

[07:09] <Xliff_> Missing 13

[07:09] <Xliff_> m: my %block; my Int $i = 1; (1,2,4,5,6,7,9,11,12,13).rotor(2 => -1, :partial).map: { %block{ ($_[1]  == $_[0] + 1) ?? $i !! $i++ }.push($_[0]) }; say %block.perl;

[07:09] <camelia> rakudo-moar 0a1641e94: OUTPUT: «Use of Nil in numeric context␤{"1" => $[1, 2], "2" => $[4, 5, 6, 7], "3" => $[9], "4" => $[11, 12, 13]}␤  in block  at <tmp> line 1␤»

[07:10] <lookatme> :) yeah, should add the adv

[07:10] <lookatme> I mean the named argument

[07:10] *** ilmari[m] joined
[07:11] <Xliff_> m: my %block; my Int $i = 1; (1,2,4,5,6,7,9,11,12,13).rotor(2 => -1, :partial).map: { %block{ ($_[1]  == $_[0] + 1) ?? $i !! $i++ }.push($_[0]) }; 

[07:11] <camelia> rakudo-moar 0a1641e94: OUTPUT: «Use of Nil in numeric context␤  in block  at <tmp> line 1␤»

[07:11] *** yoleaux left
[07:17] *** troys left
[07:32] *** lowbro joined
[07:32] *** lowbro left
[07:32] *** lowbro joined
[07:38] *** abraxxa joined
[07:39] *** tyil left
[07:42] *** tyil joined
[07:44] <shinobi-cl> m: my %K; my Int $i = 1; (1,3,4,5,6,7,9,11,12,13).rotor(2 => -1).map: { my ($a,$b)=@_;  push %K{$i}, $a;  $i++ if ($a+1 != $b); LAST {push %K{$i}, $b} }; say %K.perl;

[07:44] <camelia> rakudo-moar 0a1641e94: OUTPUT: «{"1" => $[1], "2" => $[3, 4, 5, 6, 7], "3" => $[9], "4" => $[11, 12, 13]}␤»

[07:44] <shinobi-cl> m: my %K; my Int $i = 1; (1,2,4,5,6,7,9,11,12,13).rotor(2 => -1).map: { my ($a,$b)=@_;  push %K{$i}, $a;  $i++ if ($a+1 != $b); LAST {push %K{$i}, $b} }; say %K.perl;

[07:44] <camelia> rakudo-moar 0a1641e94: OUTPUT: «{"1" => $[1, 2], "2" => $[4, 5, 6, 7], "3" => $[9], "4" => $[11, 12, 13]}␤»

[07:45] <shinobi-cl> niiiiice, phasers are great :)

[07:45] *** wamba joined
[07:45] *** broquaint left
[07:46] <shinobi-cl> thanks lookatme++ for suggesting the rotor method

[07:47] <lookatme> YW shinobi-cl 

[07:47] *** piojo1 left
[07:48] <lookatme> But I think it's not elegant than the normal way :)

[08:07] *** shinobi-cl left
[08:09] *** piojo joined
[08:11] *** darutoko joined
[08:13] *** kuerbis joined
[08:14] <kuerbis> m: my @a = <a b c d>; @a.say; my $t = @a[0..2]; $t[0] = 'Z'; @a.say;

[08:14] <camelia> rakudo-moar 0a1641e94: OUTPUT: «[a b c d]␤[Z b c d]␤»

[08:14] <kuerbis> Hello, is my interpretation of this code right: "my $t = @a[0..2];" does not copying, not creating a new list?

[08:15] *** raschipi joined
[08:15] *** jast joined
[08:17] *** rindolf joined
[08:22] <moritz> m: my @a = 0..10: say @a[0..2].^name

[08:22] <camelia> rakudo-moar 0a1641e94: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3my @a = 0..10:7⏏5 say @a[0..2].^name␤    expecting any of:␤        colon pair␤»

[08:22] <moritz> m: my @a = 0..10; say @a[0..2].^name

[08:22] <camelia> rakudo-moar 0a1641e94: OUTPUT: «List␤»

[08:22] <moritz> kuerbis: looks like it creates a new list to me

[08:23] <kuerbis> thx!

[08:24] *** cdg joined
[08:28] *** dakkar joined
[08:28] <nine> moritz: I finally did it! http://niner.name/blog/production_on_perl_6/index.html

[08:29] *** cdg left
[08:29] <moritz> nine: nice, thanks!

[08:42] *** dorothyw is now known as johnnymacs

[08:43] * lizmat clickbaits and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/01/22/2018-04-its-time-for-optimism/

[08:43] <lizmat> eh

[08:43] * lizmat clickbaits https://p6weekly.wordpress.com/2018/01/22/2018-04-its-time-for-optimism/

[08:43] <lizmat> :-)

[08:48] *** Guest10951 is now known as masak

[09:06] *** sena_kun joined
[09:11] *** yoleaux joined
[09:11] *** ChanServ sets mode: +v yoleaux

[09:12] <buggable> New CPAN upload: Sparrowform-0.0.4.tar.gz by MELEZHIK https://cpan.metacpan.org/authors/id/M/ME/MELEZHIK/Perl6/Sparrowform-0.0.4.tar.gz

[09:12] *** wamba left
[09:13] *** lookatme left
[09:18] *** kuerbis left
[09:18] <El_Che> nine: are we compiling perl6 in production? I have something as well

[09:21] *** piojo1 joined
[09:21] <lizmat> El_Che: yes, hoping to make it a section in the P6W now  :-)

[09:22] <buggable> New CPAN upload: Sys-Hostname-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Sys-Hostname-0.0.2.tar.gz

[09:23] <El_Che> cool

[09:24] *** piojo left
[09:29] *** keyking joined
[09:31] *** keyking left
[09:33] *** keyking joined
[09:34] *** bioexpress joined
[09:35] <bioexpress> m: my Str $a = 'x'; $a .= sprintf( '%d', 20 ); say $a;

[09:35] <camelia> rakudo-moar ee901cf3f: OUTPUT: «Your printf-style directives specify 0 arguments, but 2 arguments were supplied␤␤»

[09:36] <bioexpress> The error message didn't help me a  lot  to find the error.

[09:43] <lizmat> bioexpress: please file an issue then, we don't like LTA errors  :-)

[09:44] <lizmat> afk for a few hours&

[09:48] *** raschipi left
[09:50] *** lowbro left
[09:51] <El_Che> releasable6: status

[09:51] <releasable6> El_Che, Next release will happen when it's ready. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Unknown changelog format

[09:51] *** natrys joined
[09:52] <bioexpress> lizmat: where is the right place to file an issue?

[09:53] <moritz> bioexpress: https://github.com/rakudo/rakudo/issues

[09:59] *** wamba joined
[10:00] *** keyking left
[10:01] *** keyking joined
[10:04] <bioexpress> https://github.com/rakudo/rakudo/issues/1437

[10:08] *** bioexpress left
[10:11] *** TEttinger left
[10:13] <melezhik> I need to run a series of system commands one by one asyncronously and to be able fetch, keep track of stdout/stder from those commands

[10:14] <melezhik> how can I do this?

[10:14] <jnthn> Just in terms of builtins: Proc::Async. I think there's a module (something like Proc::Q) that may help also

[10:14] <El_Che> wouldn't channels be useful?

[10:15] <jnthn> Not obviously :)

[10:15] <El_Che> he's using perl6, so obviously is a relative thing :)

[10:15] *** domidumont joined
[10:15] <jnthn> I mean, I've done lots of async process juggling in Perl 6 and nearly never reached for a Channel :)

[10:16] <El_Che> jnthn: that said, you're an async man

[10:16] <El_Che> :)

[10:17] *** itaipu joined
[10:20] *** domidumont left
[10:23] *** domidumont joined
[10:24] *** pmurias joined
[10:24] *** eliasr joined
[10:24] <melezhik> jnthn, El_Che - thanks guys, will try Proc:Q first ))

[10:29] *** domidumont left
[10:35] *** pmurias left
[10:38] <AlexDaniel> El_Che: that status message didn't tell much I think :)

[10:39] <AlexDaniel> m: my $s = "1"; dd uniprop($s,"White_Space")

[10:39] <camelia> rakudo-moar 8bd9fd3f8: OUTPUT: «Bool::True␤»

[10:39] *** zakharyas joined
[10:39] <AlexDaniel> El_Che: ↑ this is not a blocker in rakudo terms, but I think samcv decided to look at it before the release

[10:39] <El_Che> AlexDaniel: it tells me "there is some stuff left and right that need fixing first. Come again later" :)

[10:40] <samcv> AlexDaniel: yeah i fixed it locally and should do the release tomorrow. and i fixed <:space> for real

[10:40] <samcv> which is pretty nice as well

[10:41] <El_Che> samcv++

[10:41] *** releasable6 left
[10:41] <samcv> AlexDaniel: thanks for bringing that to my attention by the way

[10:41] <El_Che> releasable6 can't take it any longer

[10:41] *** benchable6 left
[10:41] *** bisectable6 left
[10:42] *** benchable6 joined
[10:42] *** bisectable6 joined
[10:42] *** ChanServ sets mode: +v bisectable6

[10:42] <moritz> .oO( we're not gonna take it )

[10:42] *** coverable6 joined
[10:42] *** ChanServ sets mode: +v coverable6

[10:43] <AlexDaniel> except that everyone came back except releasable6 xD

[10:43] *** releasable6 joined
[10:44] *** releasable6 left
[10:44] *** pmurias joined
[10:44] *** releasable6 joined
[10:44] *** ChanServ sets mode: +v releasable6

[10:44] <AlexDaniel> releasable6: status

[10:44] <releasable6> AlexDaniel, Next release There is some stuff left and that needs fixing first, come again later. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Unknown changelog format

[10:44] <AlexDaniel> aaaaaaahhhh… that's not going to work

[10:45] <pmurias> do we support negate not-zerowidth literals?

[10:45] *** releasable6 left
[10:45] *** releasable6 joined
[10:45] *** ChanServ sets mode: +v releasable6

[10:51] *** domidumont joined
[10:57] *** lizmat left
[11:02] <AlexDaniel> pmurias: probably <-[n]> <-[o]> <-[t]>

[11:02] <AlexDaniel> not that I know of at least. That's if I understood the question correctly

[11:03] <jnthn> No, there's no negated literal syntax

[11:03] <jnthn> Though if you need it it's available as <!before 'foo'> ...

[11:04] <jnthn> (And if we ever got such a syntax, it's probably just compile into that too)

[11:04] *** mahafyi joined
[11:05] *** yoleaux left
[11:06] *** yoleaux joined
[11:06] *** ChanServ sets mode: +v yoleaux

[11:08] *** cdg joined
[11:09] *** keyking left
[11:10] <samcv> pmurias: i fixed the <:space> text btw. you (i think it may be you) fudged it for js. well it's not puhed it. i will push tomorrow

[11:12] *** cdg left
[11:27] *** lizmat joined
[11:36] *** faraco joined
[11:52] <moritz> 11:45 < pmurias> do we support negate not-zerowidth literals?

[11:53] *** yangzq50 left
[11:53] <moritz> the question is always what people actually *want* when they want to negate a regex, or a literal

[11:53] <moritz> *any* string that isn't the literal? any string that doesn't start with the literal?

[11:53] <moritz> any string that doesn't contain the literal?

[11:54] <moritz> any string where no character matches the literal (but a zero-width string would match that too)?

[11:55] <jnthn> True :)

[11:55] <jnthn> I guess all of those are more clearly written with things we already do have :)

[11:56] <jkramer> Is the order of pairs in hashes/bags/... still randomized like in P5?

[11:57] <moritz> potentially, yes

[12:06] *** clarkema joined
[12:06] <faraco> https://docs.perl6.org/type/Hash#Looping_over_hash_keys_and_values

[12:10] <lizmat> and the weekly is on HN again: https://news.ycombinator.com/item?id=16211864

[12:12] <lizmat> and of course none of the comments go about the actual post

[12:13] *** domidumont left
[12:13] *** lizmat left
[12:13] *** lizmat joined
[12:14] <stmuk_> https://lobste.rs/ may be more friendly

[12:14] <El_Che> lizmat: I am kind of puzzled by the people that moved to python. The last years I have mostly seen people moving away from it

[12:14] <El_Che> (maybe it's just the devops world)

[12:15] <tadzik> El_Che: this lobsters thing looks nice :)

[12:17] <piojo1> m: say (bag 'a').pick(1);

[12:17] <camelia> rakudo-moar 8bd9fd3f8: OUTPUT: «P6opaque: get_boxed_ref could not unbox for the representation '20' of type Scalar␤  in block <unit> at <tmp> line 1␤␤»

[12:17] <piojo1> m: say (bag 'a').pick;

[12:17] <camelia> rakudo-moar 8bd9fd3f8: OUTPUT: «a␤»

[12:17] <piojo1> am I doing something crazy, or is Rakudo?

[12:18] <lizmat> piojo1: looks like a bug

[12:18] <piojo1> lizmat: thanks. I'll report it.

[12:19] *** itaipu left
[12:21] <lizmat> m: dd (bag "a").pick(1)   # also seems related to .gist

[12:21] <camelia> rakudo-moar 8bd9fd3f8: OUTPUT: «("a",).Seq␤»

[12:22] <lizmat> m: (bag "a").pick(1).gist

[12:22] <camelia> rakudo-moar 8bd9fd3f8: OUTPUT: «P6opaque: get_boxed_ref could not unbox for the representation '20' of type Scalar␤  in block <unit> at <tmp> line 1␤␤»

[12:22] *** domidumont joined
[12:23] *** markong joined
[12:24] <El_Che> m: say (bag 'a', 'b').pick(3)

[12:24] <camelia> rakudo-moar 8bd9fd3f8: OUTPUT: «(b a)␤»

[12:24] <El_Che> m: say (bag 'a', 'b').pick(2)

[12:24] <camelia> rakudo-moar 8bd9fd3f8: OUTPUT: «P6opaque: get_boxed_ref could not unbox for the representation '20' of type Scalar␤  in block <unit> at <tmp> line 1␤␤»

[12:24] <El_Che> one off error?

[12:24] <masak> whoa :)

[12:25] <timotimo> moar should be able to give you the representation name instead of the id here

[12:25] <lizmat> m: (bag <a b c d e>).pick(1).gist

[12:25] <camelia> rakudo-moar 8bd9fd3f8: OUTPUT: «P6opaque: get_boxed_ref could not unbox for the representation '20' of type Scalar␤  in block <unit> at <tmp> line 1␤␤»

[12:25] *** Nanjizal joined
[12:25] <lizmat> it's Seq.gist complaining I think

[12:26] <lizmat> m: (bag <a b c d e>).pick(1).cache[0]

[12:26] <camelia> rakudo-moar 8bd9fd3f8: OUTPUT: «P6opaque: get_boxed_ref could not unbox for the representation '20' of type Scalar␤  in block <unit> at <tmp> line 1␤␤»

[12:27] *** itaipu joined
[12:28] <timotimo> um, that works locally

[12:30] <lizmat> representation 20, what is that ?

[12:30] <timotimo> bisectable6: (bag <a b c d e>).pick(1).cache[0]

[12:30] <bisectable6> timotimo, Bisecting by exit code (old=2015.12 new=8bd9fd3). Old exit code: 0

[12:30] *** cdg joined
[12:30] <bisectable6> timotimo, bisect log: https://gist.github.com/227613b2654c80d4291b1132fe34b16c

[12:30] <bisectable6> timotimo, (2017-07-22) https://github.com/rakudo/rakudo/commit/752a32656b68ed98448c17d327c86905f8bd8592

[12:31] <timotimo> 76:#define MVM_REPR_ID_P6bigint                20

[12:32] <timotimo> that's reprid 20

[12:33] *** faraco left
[12:34] <timotimo> ok, with all the right versions i get that error, too

[12:34] <timotimo> so maybe bumping nqp and moar would help

[12:35] *** cdg left
[12:36] <timotimo> so, the explosion happens in Baggy.pm in the pull-one method. since it's trying to get a bigint from something, and the only bigint op in there is nqp::sub_I($!todo, 1, Int), i'd assume that $!todo wasn't initialized properly?

[12:36] <lizmat> hmmm looks like there's a decont missing somewhere ?

[12:36] <lizmat> yeah, investigating that

[12:36] *** Nanjizal left
[12:36] *** reportable6 left
[12:36] <timotimo> hm, you need to decont that, huh?

[12:36] <timotimo> maybe

[12:37] *** reportable6 joined
[12:37] *** ChanServ sets mode: +v reportable6

[12:41] <timotimo> doesn't explain why it doesn't explode with newer nqp&moar :)

[12:42] *** Nanjizal joined
[12:49] *** player joined
[12:50] <piojo1> Is there any reason Mix doesn't support .pick, or is it that nobody had time to implement it yet?

[12:50] <player> Hi. What's the analogue of break <label> in Perl 6? 'last' seems to exit from the innermost loop

[12:50] <piojo1> player: there's a label example here: https://docs.perl6.org/language/control#LABELs

[12:50] <timotimo> i think we do have last + label

[12:51] <pmurias> El_Che:  what are they moving towards?

[12:51] <piojo1> m: say (a => 0.97, b => 0.03).Mix.pick;

[12:51] <camelia> rakudo-moar 8bd9fd3f8: OUTPUT: «.pick is not supported on a Mix␤  in block <unit> at <tmp> line 1␤␤»

[12:51] <timotimo> piojo1: it's because mix supports non-integral weights, and pick is supposed to remove an item it picked from the mix

[12:52] <piojo1> timotimo: I think that's .grab, not .pick

[12:52] <timotimo> no, grab is pick but also modifies the original object

[12:52] <timotimo> m: <a a a b c>.pick(10).say

[12:52] <camelia> rakudo-moar 8bd9fd3f8: OUTPUT: «(a a b c a)␤»

[12:52] <timotimo> you see how i ask for 10, but only get 5?

[12:53] <piojo1> timotimo: ahh, thanks. I should have been using .roll for what I wanted

[12:54] <timotimo> the error message on the mix should probably point that out

[12:54] <Geth> ¦ doc: fdbf475805 | (Luca Ferrari)++ | doc/Language/operators.pod6

[12:54] <Geth> ¦ doc: Add infix minmax documentation to operators.

[12:54] <Geth> ¦ doc: 

[12:54] <Geth> ¦ doc: Tested on Rakudo version 2017.11 built on MoarVM version 2017.11

[12:54] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fdbf475805

[12:54] <synopsebot> Link: https://doc.perl6.org/language/operators

[12:54] <Geth> ¦ doc: 6736c6511a | (Luca Ferrari)++ | doc/Language/operators.pod6

[12:54] <Geth> ¦ doc: Improve minmax: example with same values.

[12:54] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6736c6511a

[12:54] <Geth> ¦ doc: d1b0571701 | (Luca Ferrari)++ | doc/Language/operators.pod6

[12:54] <Geth> ¦ doc: minmax documentation: list and hash.

[12:54] <Geth> ¦ doc: 

[12:54] <Geth> ¦ doc: Close #1734

[12:54] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d1b0571701

[12:55] *** pmurias left
[12:56] *** pmurias joined
[12:57] <El_Che> pmurias: go, js

[12:58] <El_Che> pmurias: even java (spring)

[12:59] *** stmuk joined
[13:00] *** scimon joined
[13:00] <scimon> (Turns out my attempt to not read this was failing dismally. So I figured I might as well log in again). Hi.

[13:00] *** stmuk_ left
[13:01] <lizmat> scimon o/

[13:01] <El_Che> pmurias: I am under the impression that Python got a firm foot in science (although at a course I followed they stressed that you'll end up writing a lot of C) and related fields. While it seemed to be losing web developement en devop stuff (microservices and the like)

[13:01] <El_Che> scimon: welcome back

[13:02] <scimon> I'm seeing a lot of places still using python for web dev but node is getting a large mind share.

[13:02] <scimon> (Frankly I think that's weird because it's a horrible language for a lot of back end stuff. Async DB interaction is just a pain IMO)

[13:03] <El_Che> scimon: it's still there (as is Ruby), buy my very-personal-impression is a trend

[13:03] <El_Che> scimon: we have big python people at $work contemplating leaving python and move to php7 for web stuff

[13:03] <El_Che> scimon: grain of salt of course, anecdotical at best

[13:04] <scimon> I think a plus point at the moment is the rise of devops and containers. Where you have teams being able to pick their own tools that they have to support things can change.

[13:04] <scimon> php7? 

[13:04] <scimon> Urgggh.

[13:04] <El_Che> it's also the impression I get at FOSDEM. Ruby is bleeding badly, Python seem to be over the top

[13:04] <El_Che> scimon: php7 got a lot of stuff right (according to them)

[13:05] <scimon> Ah well. I am possibly guilty of reacting to PHP that way many people react to Perl.

[13:05] <scimon> 3 years doing PHP development is enough for me.

[13:06] <El_Che> it seems to have becomed fast

[13:06] <El_Che> if so, cheers for the php devs

[13:06] <scimon> Well done them.

[13:06] <scimon> I might even take a look. 

[13:06] <lizmat> https://github.com/rakudo/rakudo/commit/7361fe2b6d  # piojo1 

[13:06] <El_Che> I had a look last week on how to containerized their projects

[13:12] <piojo1> thanks lizmat! I confess I don't understand the cause, so I can't offer an opinion on the "magic" :)

[13:13] *** Zoffix joined
[13:14] <Zoffix> Looking at the fix and the crash, the magic is that add_I doesn't auto-decont

[13:14] <Zoffix> m: my $x = 42; use nqp; say nqp::add_I(2, $x, Int)

[13:14] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «P6opaque: get_boxed_ref could not unbox for the representation '20' of type Scalar␤  in block <unit> at <tmp> line 1␤␤»

[13:14] <Zoffix> m: my $x := 42; use nqp; say nqp::add_I(2, $x, Int)

[13:14] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «44␤»

[13:15] <jnthn> None of the _I things to

[13:15] <jnthn> *do

[13:16] <lizmat> so I wonder why we didn't spot this earlier

[13:16] <lizmat> anyhows, fixed now

[13:16] <jnthn> Is there a test added to cover it also?

[13:16] <Zoffix> jkramer: as far as the language is concerned: yes hashes/maps/setties/baggies/mixies are randomized, but .say/.print/.perl output them in sorted order.

[13:16] <lizmat> jnthn: not yet afaik

[13:17] <Zoffix> jkramer: there's still a ticket for the latter part RT#131244

[13:17] <synopsebot> RT#131244 [new]: https://rt.perl.org/Ticket/Display.html?id=131244 Baggy/Setty .Str/.gist/.perl needs to guarantee order, like Map/Hash do

[13:22] <buggable> New CPAN upload: Sparrowform-0.0.5.tar.gz by MELEZHIK https://cpan.metacpan.org/authors/id/M/ME/MELEZHIK/Perl6/Sparrowform-0.0.5.tar.gz

[13:27] <piojo1> are there any tests for mix/bag/set? I couldn't find any when grepping around rakudo/t

[13:28] *** broquaint joined
[13:28] <lizmat> ls t/spec/*/bag*

[13:28] <lizmat> ls t/spec/*/mix*

[13:28] <lizmat> ls t/spec/*/set*

[13:29] * Zoffix uses `tree -f | grep -i SOME_TERM`

[13:30] <piojo1> lizmat: in which repository?

[13:30] <Zoffix> and if that fails  `grep -FIRn SOME_TERM`

[13:30] <Zoffix> piojo1: https://github.com/perl6/roast/

[13:30] <piojo1> Zoffix: ahh, thanks

[13:30] <moritz> ack -i some_term

[13:30] <Zoffix> piojo1: if you run `make spectest` in rakudo's checkout, it'll automatically clone roast into t/spec

[13:30] <piojo1> I just discovered ag. It's a little faster than ack :)

[13:31] <Zoffix> piojo1: and after you write the test, you can check that it runs with `t/fudgeandrun t/spec/blah/blah/test.t`

[13:32] <piojo1> thanks!

[13:33] *** mempko left
[13:33] <Zoffix> (there's also ZScript where you can run `z t blah/blah/test.t`)

[13:34] <Zoffix> huggable: zscript

[13:34] <huggable> Zoffix, Helper script for Rakudo Perl 6 core development: https://github.com/zoffixznet/z

[13:34] <El_Che> lizmat: the fosdem thing, is that tomorrow (when irc is faster than searching your mailbox)?

[13:34] <lizmat> yes

[13:36] <El_Che> ok, making arrangements, thx

[13:37] <timotimo> help, p6weekly keeps putting my twitter handle in messages it pre-makes when you hit the "share via twitter" button

[13:40] <lizmat> ??

[13:43] <timotimo> https://twitter.com/ApopheozRu/status/955770173444775936

[13:44] <Zoffix> lol

[13:45] <moritz> timotimo: maybe that's configured somewhere in that wordpress instance?

[13:45] <moritz> if so, maybe lizmat can help

[13:46] <lizmat> eh... I have no idea :)

[13:46] <timotimo> i already disconnected my accounts from the "sharing" page in the wordpress site settings

[13:46] <Zoffix> timotimo: based on this, if this is the plugin you use, you'd just remove the username here: https://cdn-images-1.medium.com/max/1600/0*cukE0GDlB47Iw2fx.jpg ?

[13:47] <timotimo> i don't have that entry in my settings drowdpon

[13:47] <timotimo> aha!

[13:48] <timotimo> there's a "sharing" entry there where i put the twitter username at some point

[13:48] <timotimo> so should i put in a different username?

[13:49] <Zoffix> @perl6org ?

[13:49] <timotimo> that was my first thought, too

[13:50] <timotimo> oh, wow. the views are *way* up today

[13:50] <timotimo> 3k views by 2.5k visitors

[13:50] <El_Che> impressive

[13:51] <moritz> no objections against using @perl6org there

[13:53] <timotimo> the stats for 2018-01-22 through 2018-01-28 are currently at 3.3k views, 2.6k visitors. the periods before that were around 1k views, 500 visitors. the last peak was 2017-08-21 through 2017-08-27 with 5.5k views by 4.2k visitors

[13:53] <El_Che> reddit?

[13:54] <timotimo> 2k referred by hacker news, 76 by twitter, 65 from search engines, 50 from hckrnews.com and 30 from reddit

[13:54] <timotimo> for the current post

[13:55] <El_Che> maybe hn's popularity is worth investing time replying there, but those kind of discussions look tiring

[13:56] <lizmat> yeah, I guess I'm going to have me a login after all

[13:56] <El_Che> be careful not to get burnt out

[13:56] <Zoffix> Heh :) I briefly looked at the comments; looks like the majority are by the marketing and branding experts telling core devs to give up :)

[13:57] <El_Che> lizmat: I got a reddit login since yesterday :)

[13:57] <lizmat> yeah, the irony wasn't lost on me  :-)

[13:58] *** aborazmeh joined
[13:58] *** aborazmeh left
[13:58] *** aborazmeh joined
[13:59] *** stmuk_ joined
[14:00] *** yoleaux left
[14:00] *** yoleaux joined
[14:00] *** ChanServ sets mode: +v yoleaux

[14:00] *** telex left
[14:01] *** telex joined
[14:02] *** stmuk left
[14:02] *** cdg joined
[14:03] <jnthn> Heh, so first it was "Perl 6 is vaporware", then it was "Perl 6 still isn't released yet", and now it's "can't you just give up?" Dammit, even naysayers ain't what they used to be. :P

[14:04] <Zoffix> :)

[14:07] *** itaipu left
[14:07] *** cdg left
[14:07] *** jeromelanteri left
[14:10] *** cdg joined
[14:11] <moritz> now they are "time to recognize that the cost is sunk"

[14:12] <lizmat> Hacker News telling me: You're posting too fast. Please slow down. Thanks 

[14:12] <El_Che> you see, perl 6 may not be fast yet, bit its core devs are!

[14:13] <Zoffix> :)

[14:13] <Zoffix> lizmat++ # responding to people

[14:13] * Zoffix &

[14:13] *** Zoffix left
[14:14] *** itaipu joined
[14:14] <piojo1> lizmat: I PR'd a test. I couldn't manage to run it with "fudgeandrun", so I ran it as "perl6 t/.../whatever.t". I'm not sure if that's wrong, but I'm on Windows, so I'm used to things not working.

[14:15] <lizmat> piojo1: thanks

[14:15] <lizmat> (shouldn't we see a notice of that PR here ?)

[14:15] <piojo1> that's what I thought!

[14:15] <piojo1> maybe it needs to wait for tests to run

[14:17] <piojo1> oh, Zoffix merged it really fast!

[14:17] <piojo1> Thanks :)

[14:24] <timotimo> oh, we're still putting stuff into master?

[14:24] <timotimo> it's too late for the udp datagram class, though, i'm sure

[14:24] <[Coke]> timotimo: on roast? yes?

[14:24] <yoleaux> 21 Jan 2018 11:18Z <tbrowder> [Coke]: I sent the CLA via snail mail (USPS) to the address on the form.

[14:24] <El_Che> timotimo: if you don't tell, I won't either

[14:24] <timotimo> haha

[14:25] <timotimo> [Coke]: there was a fix to rakudo/master on top of the roast commit

[14:25] *** Zoffix joined
[14:25] *** geospeck joined
[14:26] <Zoffix> piojo1: yeah I merged; the notifications for roast/rakudo/nqp/MoarVM repos are only in #perl6-dev

[14:27] <Zoffix> -1 on merging datagram stuff right now. Let the release happen. It's already $n days late :|

[14:27] <timotimo> right

[14:27] <timotimo> after all, i'm not happy with the API yet

[14:27] <timotimo> and haven't written a single test, nor even ran the spectest we already have ;)

[14:29] <piojo1> Time to go. Thanks for the tips about testing :)

[14:29] *** piojo1 left
[14:30] <player> Where are modules installed by Zef are stored? Someone suggested .perl6, but I didn't find modules in it.

[14:30] <timotimo> you can ask zef to "locate" a module for you

[14:31] <Zoffix> player: https://irclog.perlgeek.de/perl6/2018-01-20#i_15714393

[14:31] *** Zoffix left
[14:32] <buggable> New CPAN upload: P5caller-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5caller-0.0.1.tar.gz

[14:32] <jnthn> zef locate Some::Module::Name

[14:32] <player> I'm sorry, Zoffix, I didn't notice your post last time.

[14:33] <jkramer> Hmm I ran into a problem here. I need to append lots of elements to an already huge array. I'd like to just $a.append($b), but .append wants a slip or whatever it's called, not an array. If I do $a.append(|$b) however, P6 dies with "Too many arguments in flattening array."

[14:33] <jnthn> What is $b?

[14:33] <jkramer> Do I need to push each element individually?

[14:33] <jkramer> $b is an Array

[14:33] *** yoleaux left
[14:34] *** yoleaux joined
[14:34] *** ChanServ sets mode: +v yoleaux

[14:34] <jnthn> @$b

[14:34] <timotimo> m: my $a = [1, 2, 3]; my $b = [9, 9, 9, 9, 9, 9]; $a.append($b); say $a

[14:34] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «[1 2 3 [9 9 9 9 9 9]]␤»

[14:34] <timotimo> m: my $a = [1, 2, 3]; my $b = [9, 9, 9, 9, 9, 9]; $a.append($b.list); say $a

[14:34] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «[1 2 3 9 9 9 9 9 9]␤»

[14:34] <timotimo> right

[14:34] <jnthn> Things are generally neater if using the @ sigil for arrays :)

[14:34] <player> Zoffix, and where precompiled modules are installed?

[14:34] <timotimo> m: my $a = [1, 2, 3]; my $b = |[9, 9, 9, 9, 9, 9] xx 100000; $a.append($b.list); say $a

[14:34] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «[1 2 3 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 ...]␤»

[14:36] <jkramer> Weird, what does @ change? Doesn't it just add a type-constraint to Array or List or something?

[14:37] <timotimo> in this case it just puts .list at the end

[14:37] <timotimo> much like $@foo will be @foo.item

[14:38] *** sena_kun left
[14:38] *** Zoffix joined
[14:38] <Zoffix> player: why? What are you trying to accomplish?

[14:38] <Zoffix> jkramer: your arrays is conted, so it gets treated as one item. See https://perl6advent.wordpress.com/2017/12/02/#theoneandonly

[14:39] *** sena_kun joined
[14:40] *** domidumont left
[14:41] *** domidumont joined
[14:42] <buggable> New CPAN upload: Sparrowform-0.0.6.tar.gz by MELEZHIK https://cpan.metacpan.org/authors/id/M/ME/MELEZHIK/Perl6/Sparrowform-0.0.6.tar.gz

[14:43] *** sena_kun left
[14:44] <jkramer> Zoffix: Yeah I know, I was just wondering why Array.append wouldn't accept another Array as argument :)

[14:44] <Zoffix> player: `zef locate` gives you SHA id of the distro, with full path to the source file. The binary precomp file is in adjacent directory with the same SHA id: https://gist.github.com/zoffixznet/f0083decd62ccff9c73881a8717e792e

[14:44] <Zoffix> m: my @a; @a.append: [<a b c>]; dd @a

[14:44] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «Array @a = ["a", "b", "c"]␤»

[14:44] <Zoffix> jkramer: it does accept it.

[14:44] <Zoffix> m: my @a; @a.append: $[<a b c>]; dd @a

[14:45] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «Array @a = [["a", "b", "c"],]␤»

[14:45] <Zoffix> ^ there you're saying "Append one item, an Array object". Not "append items in this array"

[14:46] <Zoffix> "Eat a bag of apples" vs. "bring me a bag of apples". In the former, you're acting on the contents, in the latter you're acting on the single item: the container of other items

[14:48] *** smash joined
[14:49] <Zoffix> m: my @a; my $b = [<a b c>]; @a.append: $b; @a.append: @$b; @a.append: $b.cache; @a.append: $b.list; @a.append: $b<>; @a.append: $b.self;  dd @a

[14:49] *** domidumont1 joined
[14:49] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «Array @a = [["a", "b", "c"], "a", "b", "c", "a", "b", "c", "a", "b", "c", "a", "b", "c", "a", "b", "c"]␤»

[14:49] <Zoffix> And ^ there are various ways of remove it from the scalar container, so that its contents are worked on rather than the array itself, as a single item

[14:49] <jkramer> Hmm I see

[14:50] <jkramer> It does make some sense :)

[14:50] *** domidumont left
[14:51] <titsuki> .seen krunen

[14:51] <yoleaux> I saw krunen 9 Jan 2016 16:24Z in #perl6: <krunen> [Coke]: (re moving Rakudo release tags) I thought I only said it was talked about at some point, but confused discussion happened. Sorry.

[14:52] *** raschipi joined
[14:53] <[Coke]> O_o;

[14:54] <Zoffix> That was the Great Moved Tag rumor during 2015 Christmas. That our release was so crap we supposedly had to move the tag.

[14:55] <Zoffix> ZofBot: good times!

[14:55] <ZofBot> Zoffix, Haven't seen it crash at all here

[14:55] <[Coke]> Yah, i was there. :)

[14:55] <Zoffix> :)

[14:55] <[Coke]> I still have no idea how that got started.

[14:57] *** geospeck left
[14:57] *** aborazmeh left
[14:59] *** ChoHag left
[15:00] *** Zoffix left
[15:06] *** ChoHag joined
[15:11] <moritz> I had to move a tag once, because I had mixed up some numbers. But that was years before the 2015 Christmas release

[15:12] <jkramer> Is there something nicer/shorter than this for take a range from an array without knowing if it's withing its bounds? $foo[4..^96].grep(*.defined)

[15:12] <buggable> New CPAN upload: P5lcfirst-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5lcfirst-0.0.1.tar.gz

[15:13] <jkramer> I just want the elements in that range that exist, not a bunch of undefined values. But grepping the result seems inefficient

[15:13] *** zakharyas left
[15:13] *** zakharyas joined
[15:14] <[Coke]> note that you can have an undefined value in an interior position as well.

[15:15] <moritz> $foo.tail(-4).head(96-4) # something along those lines?

[15:15] <moritz> module inevitable off-by-one errors

[15:15] <moritz> m: say <a b c d e f>.tail(-2)

[15:15] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «()␤»

[15:15] <moritz> m: say <a b c d e f>.tail(2)

[15:15] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «(e f)␤»

[15:16] <moritz> m: say <a b c d e f>.head(4)

[15:16] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «(a b c d)␤»

[15:16] <jkramer> m: <foo bar baz>.tail(-1).say

[15:16] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «()␤»

[15:16] <moritz> $foo.head(96).tail(96-4)

[15:16] <jkramer> moritz: from the tail docs: Returns an empty Seq if NUMBER <= 0

[15:16] <moritz> jkramer: yes, I mixed them up. $foo.head(96).tail(96-4) might work

[15:17] <jkramer> Ah right

[15:17] <lizmat> m: my @a; @a[4] = 42; dd @a[]:v  # sorta expected that to give (42,)

[15:17] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «(Any, Any, Any, Any, 42)␤»

[15:17] <lizmat> m: my @a; @a[4] = 42; dd @a[]:k  # it does with :k

[15:17] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «(4,)␤»

[15:17] <lizmat> hmmm

[15:18] *** zakharyas left
[15:19] <[Coke]> m: my $foo = 1..10; given $foo { say $_[min(4,$_.elems)..min(96,$_.elems)]}

[15:19] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «(5 6 7 8 9 10 Nil)␤»

[15:19] <[Coke]> m: my $foo = 1..10; given $foo { say $_[min(4,$_.elems-1)..min(96,$_.elems-1)]}

[15:19] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «(5 6 7 8 9 10)␤»

[15:19] *** Nanjizal left
[15:20] <[Coke]> m: my $foo = 1..10; given $foo.elems -1 { say $foo[min(4,$_)..min(96,$_)]}

[15:20] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «(5 6 7 8 9 10)␤»

[15:20] *** stmuk joined
[15:20] <[Coke]> ^^ might be able to golf that.

[15:20] <[Coke]> (and also fix the first endpoint. :)

[15:22] *** stmuk_ left
[15:26] <[Coke]> m: my $foo = 1..10; given ($foo.elems-1) { say $foo[min(4,$_)..min(96,$_)]}

[15:26] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «(5 6 7 8 9 10)␤»

[15:26] <[Coke]> (oh, wait, that is right. :)

[15:26] *** khisanth_ left
[15:32] <buggable> New CPAN upload: P5ucfirst-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5ucfirst-0.0.1.tar.gz

[15:37] *** geospeck joined
[15:38] *** geospeck left
[15:39] *** khisanth_ joined
[15:46] *** obfusk joined
[15:49] *** yoleaux left
[15:50] *** yoleaux joined
[15:50] *** ChanServ sets mode: +v yoleaux

[15:52] *** Ven`` joined
[15:52] <Ven``> .u А

[15:52] <yoleaux> U+0410 CYRILLIC CAPITAL LETTER A [Lu] (А)

[15:54] <Ven``> .u а

[15:54] <yoleaux> U+0430 CYRILLIC SMALL LETTER A [Ll] (а)

[15:56] *** raschipi left
[15:56] *** khw joined
[15:57] <jnthn> m: my $vаr = 42; say $var # :D

[15:57] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$var' is not declared. Did you mean any of these?␤    &VAR␤    $vаr␤␤at <tmp>:1␤------> 3my $vаr = 42; say 7⏏5$var # :D␤»

[15:57] *** dakkar left
[15:58] <Ven``> jnthn: freenode's webchat font actually distinguishes them quite well

[15:58] <ilmari> does perl6 have the notion of script runs?

[15:58] <ilmari> https://metacpan.org/pod/release/ABIGAIL/perl-5.27.8/pod/perlre.pod#Script-Runs

[15:58] <Ven``> .oO( Just kidding, Perl 6 is broken, we should all go home )

[15:58] *** dakkar joined
[15:58] <moritz> ilmari: I don't think so

[16:01] <jkramer> m: 'lolololol' ~~ ^Inf

[16:01] <camelia> rakudo-moar 7361fe2b6: ( no output )

[16:01] <jkramer> m: say 'lolololol' ~~ ^Inf

[16:01] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «True␤»

[16:02] <jkramer> m: say ^100 ~~ ^50

[16:02] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «False␤»

[16:02] <jkramer> m: say 'lolololol' ~~ ^1000

[16:02] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «False␤»

[16:03] *** epony joined
[16:03] <jkramer> m: say False ~~ ^Inf

[16:03] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «True␤»

[16:04] <jkramer> Is this a bug? Any smartmatch against ^Inf seems to be True

[16:04] *** Zoffix joined
[16:04] <Zoffix> m: say "lolololol" after 0 && "lolololol" before Inf

[16:04] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «True␤»

[16:05] <AlexDaniel> m: say ∞ ~~ ^Inf

[16:05] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «False␤»

[16:05] <Zoffix> m: say "z" after 0 && "z" before Inf

[16:05] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «True␤»

[16:05] *** wamba left
[16:06] <timotimo> everything is less than Inf. even a dog.

[16:06] <Zoffix> m: say "" ~~ ^Inf

[16:06] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «False␤»

[16:06] <Zoffix> jkramer: ^ not everything :) But yeah, every string is "before" Inf, so that'd match a lot of stuff

[16:07] <jkramer> Shouldn't it just crash? :)

[16:08] <Zoffix> jkramer: smartmatch never crashes

[16:08] <jkramer> Hmm true I guess that's the point of it :)

[16:09] <Zoffix> lizmat: BTW we already have like 1010 modules. I just looked at the build log and 12 have JSON errors in their META files so they're likely not on the site (PRs sent)

[16:09] *** st_elmo joined
[16:10] <jkramer> From the smartmatch docs: Any         Range     in stringy range        X.min le $_ le X.max

[16:10] <jkramer> But:

[16:10] <jkramer> m: say (^Inf).min le 'lololol' and 'lololol' le (^Inf).max

[16:10] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «WARNINGS for <tmp>:␤True␤Useless use of "le" in expression "'lololol' le (^Inf).max" in sink context (line 1)␤»

[16:10] <jkramer> What

[16:10] <Zoffix> m: 'lolololol' ~~ 1010101011..Inf

[16:10] <camelia> rakudo-moar 7361fe2b6: ( no output )

[16:10] <Zoffix> m: say 'lolololol' ~~ 1010101011..Inf

[16:10] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «True␤»

[16:10] <jkramer> That doesn't happen locally o_O

[16:10] <Zoffix> jkramer: precedence of `and` is lower than arguments to `say`

[16:10] <jkramer> m: say ((^Inf).min le 'lololol' and 'lololol' le (^Inf).max)

[16:10] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «False␤»

[16:10] <jkramer> Ah

[16:10] <jkramer> Yeah I didn't use say in the repl :)

[16:11] <jkramer> Anyway the smartmatch definition from the docs seems to disagree with the implementation

[16:11] <Zoffix> jkramer: on which page is it on?

[16:11] <jkramer> http://design.perl6.org/S03.html#Smart_matching

[16:12] <Zoffix> jkramer: that's not documentation. That's historical, archived speculations

[16:12] <jkramer> Oh

[16:12] <timotimo> look at the big red bar it has at the top

[16:12] <Zoffix> jkramer: https://docs.perl6.org/ is the documentation and for smartmatch, you'd mostly look at the docs for the "ACCEPTS" method for the RHS's type (tho I see that seems to be missing for Range type)

[16:14] <jkramer> An up-to-date table like on the other site would be nice

[16:16] * Zoffix imagines it'd be huge

[16:16] *** cdg left
[16:17] <Zoffix> jkramer: actually, almost-table already exists: https://docs.perl6.org/routine/ACCEPTS.html :)

[16:18] <jkramer> Zoffix: Yeah but as you said, it's incomplete :)

[16:18] <Geth> ¦ doc: 0797ea6d4c | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/List.pod6

[16:18] <Geth> ¦ doc: Remove rogue pod element

[16:18] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0797ea6d4c

[16:18] <synopsebot> Link: https://doc.perl6.org/type/List

[16:22] <Geth> ¦ doc: 0048029c68 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Numeric.pod6

[16:22] <Geth> ¦ doc: More precise desc. for Numeric.ACCEPTS

[16:22] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0048029c68

[16:22] <synopsebot> Link: https://doc.perl6.org/type/Numeric

[16:23] *** yoleaux left
[16:23] *** yoleaux joined
[16:23] *** ChanServ sets mode: +v yoleaux

[16:26] <player> Zoffix, Actually I want to build new instance of compiler and make sure that installed modules don't class with modules of another instance

[16:28] <Zoffix> player: rakudobrew does precisely that; lets you have multiple versions of the compiler with own sets of modules (but don't know if you can have multiple instances of same version): https://github.com/tadzik/rakudobrew

[16:29] <Zoffix> player: zef also has `--install-to` option you can use to tell it to install module to specific location (it might be possible to stick that into zef's config file)

[16:30] <Zoffix> --install-to=inst#/some/path    # yes `inst#` bit is part of it

[16:30] <Zoffix> m: say 42 ~~ (*); say (*) ~~ 42

[16:30] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «True␤{ ... }␤»

[16:30] <Zoffix> m: say 42 ~~ (*); say ((*)) ~~ 42

[16:30] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «True␤False␤»

[16:30] *** troys joined
[16:30] *** clarkema left
[16:30] <Zoffix> How come only one set of parens is needed on RHS to avoid curry, but on LHS two sets are needed?

[16:32] <Geth> ¦ doc: 7babb3dbcc | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Whatever.pod6

[16:32] <Geth> ¦ doc: Expand Whatever.ACCEPTS

[16:32] <Geth> ¦ doc: 

[16:32] <Geth> ¦ doc: - Document :U candidate

[16:32] <Geth> ¦ doc: - Include examples

[16:32] <synopsebot> Link: https://doc.perl6.org/type/Whatever

[16:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7babb3dbcc

[16:33] <ilmari> moritz: I think it might have been Karl Williamson who came up with the idea (and then implemented it for perl 5). feel free to steal it for perl 6 ;)

[16:34] <jkramer> m: my $ = 'oops typo'

[16:34] <camelia> rakudo-moar 7361fe2b6: ( no output )

[16:34] <jkramer> m_ my $ = 'lol'; say $

[16:35] <Zoffix> jkramer: $ is an anon state var

[16:35] <Zoffix> m: say $++ while ++$ < 3

[16:35] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «0␤1␤»

[16:36] <jkramer> Huh

[16:36] <Zoffix> no idea where they're documented...

[16:36] <moritz> ilmari: I'm thinking about a 6ish way to design it. If we had <scriptrun>, we could combine it with other regexes easily as <scriptrun> & <other regex>

[16:37] <moritz> because we already have the & operator

[16:37] <ilmari> moritz: and that requries the two regexes to match the same part of the string?

[16:38] <moritz> ilmari: correct

[16:38] <ilmari> that is a very neat way of combining them (but I don't want to think about backtracking)

[16:39] <moritz> it's matched with the NFA, at least if <other regex> is declarative

[16:40] <Zoffix> jkramer: found it: https://docs.perl6.org/syntax/state#The_$_Variable

[16:40] <jkramer> Zoffix: Thanks!

[16:43] <Geth> ¦ doc: e1a6ab5f73 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/variables.pod6

[16:43] <Geth> ¦ doc: Add more index terms for anon state vars

[16:43] <Geth> ¦ doc: 

[16:43] <Geth> ¦ doc: Closes #1742

[16:43] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e1a6ab5f73

[16:43] <synopsebot> Link: https://doc.perl6.org/language/variables

[16:43] <player> Zoffix, where precompiled modules are installed by default? If I have only one instance of compiler?

[16:43] <Zoffix> player: if you run zef locate SomeModule it'll tell you

[16:44] <Zoffix> $ zef locate Test

[16:44] <Zoffix> ===> From Distribution: CORE:ver<6.c>:auth<perl>:api<>

[16:44] <Zoffix> Test => /home/zoffix/rakudo/install/share/perl6/sources/C712FE6969F786C9380D643DF17E85D06868219E

[16:44] <Zoffix> I have rakudo build in ~/rakudo and ^that's where it installs them. Yours might be different

[16:46] * Zoffix &

[16:46] *** Zoffix left
[16:48] *** mempko joined
[16:55] *** abraxxa left
[16:58] *** wamba joined
[17:00] *** domidumont1 left
[17:11] *** lolo78 joined
[17:11] *** lolo78 left
[17:17] *** Ven`` left
[17:17] *** cdg joined
[17:20] *** scimon left
[17:22] *** cdg left
[17:24] *** mempko left
[17:26] *** clarkema joined
[17:27] *** domidumont joined
[17:29] <stmuk> https://twitter.com/matz_translated <=- there is auto translated perl6 comment, unfortunately (or maybe fortunately) it's unclear what it means

[17:29] <jkramer> Can I put operators in a variable as some kind of curried function? Similar to `let x = (*)` in Haskell for example?

[17:29] *** troys is now known as troys_

[17:31] <geekosaur> m: my &op = &[+]; say op(2, 3)

[17:31] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «5␤»

[17:32] <jkramer> geekosaur: Sweet, thanks!

[17:33] <DrForr> There's a more official way to do that as well; I think it's mentioned as *like* curry in the docs, but not quite the same.

[17:33] *** telex left
[17:35] *** yoleaux left
[17:35] *** yoleaux joined
[17:35] *** ChanServ sets mode: +v yoleaux

[17:36] <timotimo> &[+] is syntactic sugar for &infix:<+>, which is the proper, full name of the operator

[17:36] *** telex joined
[17:40] *** gregf_ left
[17:43] *** evalable6 left
[17:43] *** evalable6 joined
[17:44] *** dakkar left
[17:45] <jkramer> m: say (0, 1, * + * ...^ * > 100)

[17:45] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «(0 1 1 2 3 5 8 13 21 34 55 89)␤»

[17:45] <jkramer> What is this, some kind of haskell-like list comprehension?

[17:45] <jkramer> Is it documented somewhere? :)

[17:45] <timotimo> it's the sequence operator, and it's beautiful

[17:46] <timotimo> https://docs.perl6.org/language/operators#index-entry-sequence_operator - for some reason putting "..." in the search doesn't find it

[17:46] <jkramer> Yup that's exactly what I tried. :) Thanks :)

[17:46] *** natrys left
[17:48] <DrForr> Egads. I'm trying to install react + a grid layout, and *these* people give us grief over installation?...

[17:48] *** Zoffix joined
[17:49] <Zoffix> The like curry thing is "assuming" method

[17:49] <Zoffix> m: my &add-five = &[+].assuming: 5; say add-five 42

[17:49] <camelia> rakudo-moar 7361fe2b6: OUTPUT: «47␤»

[17:52] <Zoffix> weird; search index is listed as `X<|...,operators>X<|...^,operators>X<|…,operators>X<|…^,operators>`, yet only unicode forms turn up

[17:52] <DrForr> .assuming, yes, that's what I had in mind.

[17:54] <Zoffix> Filed as D#1743

[17:54] <synopsebot> D#1743 [open]: https://github.com/perl6/doc/issues/1743 Glitch with search and `...` op

[17:58] *** troys_ is now known as troys

[17:59] *** Nanjizal joined
[18:06] *** clarkema left
[18:09] *** Zoffix left
[18:09] *** cdg joined
[18:09] *** setty1 joined
[18:14] <jkramer> When an object has an attribute that holds a Sub, how do I call it? $foo.attribute($arg) calls the getter apparently, not the Sub

[18:14] *** preaction left
[18:15] *** cdg left
[18:16] <jkramer> Ah got it. $foo.attribute.(...)

[18:17] *** mempko joined
[18:26] <timotimo> yeah, another . or ().($args)

[18:32] <buggable> New CPAN upload: Inline-Perl5-0.30.tar.gz by NINE https://cpan.metacpan.org/authors/id/N/NI/NINE/Perl6/Inline-Perl5-0.30.tar.gz

[18:34] <player> When 2018.01 will be released?

[18:35] <El_Che> soon

[18:35] <El_Che> any time

[18:36] <player> Isn't there fixed schedule or plan?

[18:36] <El_Che> yes, it should be out, but the core devs are doing some last minute fixing

[18:42] <AlexDaniel> well, the minute is extended enough to make sure the release is great :)

[18:43] <AlexDaniel> player: if you're looking for rakudo star, then it usually comes out a bit later than the rakudo release

[18:44] *** darutoko left
[18:45] *** yoleaux left
[18:45] *** yoleaux joined
[18:45] *** ChanServ sets mode: +v yoleaux

[18:50] *** Zoffix joined
[18:51] <Zoffix> Maybe we should try out a new system? A week before release MoarVM/nqp/rakudo/roast get `pre-release` branch created and tests get run on it + users get invited to test it out. All the devs continue working on master and nothing but critical bug fixes get into `pre-release` branch.

[18:52] <Zoffix> I'm using post-release branch and it's slightly annoying because Issues don't auto-close and you need to pull regularly to avoid conflicts. I also see some devs still commit fixes to master. And really, a small last minute fix could bring in a huge bug with it.

[18:53] <El_Che> Zoffix: I could love RC tars, that way I could use a branch of rakudo-pkg as a canary

[18:53] <[Coke]> FWIW, I'd be happy with something more closely resembling gitflow, yes. (maybe have the branch be release-2018.05 if we don't want to reuse the branch name.)

[18:53] <El_Che> as it tests several Linux distro's (cfr the 2017.12 bug)

[18:53] <[Coke]> and we could lock down who can commit to the release branch via github.

[18:53] <[Coke]> (down to the release manager by default)

[18:53] <player> AlexDaniel, I mean compiler releases that is released every month

[18:54] <AlexDaniel> player: we will release rakudo this month, yes :)

[18:55] <Zoffix> Boom: we reached a milestone. 1002 modules in ecosystem: http://modules.perl6.org/search/?q=

[18:55] <lizmat> whee!

[18:55] <AlexDaniel> Zoffix: something like this, yeah maybe. There's a little issue is that releases will be branched out

[18:56] <AlexDaniel> which is not necessarily a problem, just something to keep in mind

[18:56] <AlexDaniel> gitflow is an overkill though

[18:56] *** cdg joined
[19:00] *** zakharyas joined
[19:01] <Zoffix> It'd just be handy for users across 4 repos to not care (i.e. not worry about pushing something too soon) when release happens. Especially since two of those repos are in general "perl6" group with lots of users having push access.

[19:02] <Zoffix> + PRs won't be forgotten about ("oh can't merge now because too close to release. I'll merge later"... *forgotten*)

[19:04] <Zoffix> And release manager would have full control over which bugs are considered critical and are allowed to be cherry-picked after the large part of testing happened already

[19:08] <AlexDaniel> stmuk: insert obligatory complaint about the lack of lts branches here :)

[19:08] <Zoffix> :)

[19:09] <AlexDaniel> stmuk: but actually pinging you so that maybe you have some ideas on the matter

[19:09] *** mempko left
[19:10] *** troys is now known as troys_

[19:12] *** Kaiepi joined
[19:13] * stmuk blinks

[19:16] *** stmuk_ joined
[19:17] <stmuk_> I prefer the term MTS (Medium Term Support) anyway

[19:17] <stmuk_> promises less :)

[19:18] *** stmuk left
[19:19] <El_Che> stmuk_: don't promise, it's implied :)

[19:21] *** zakharyas left
[19:21] <AlexDaniel> .oO( “short term support” because let's be realistic about the alternative )

[19:21] *** zakharyas joined
[19:21] *** |oLa| joined
[19:22] *** comborico1611 joined
[19:24] <stmuk_> Best Of Effort MTS for the Enterprise

[19:29] *** ChoHag left
[19:33] <comborico1611> Feels like a Friday, no?

[19:34] <Zoffix> Nope :)

[19:35] *** mempko joined
[19:36] *** yoleaux left
[19:36] *** quotable6 left
[19:36] *** yoleaux joined
[19:36] *** ChanServ sets mode: +v yoleaux

[19:36] *** quotable6 joined
[19:39] *** Nanjizal left
[19:40] <comborico1611> I read some crap about Microsoft today.

[19:41] <comborico1611> Well, it's actually some bs slick marketing by Microsoft.

[19:47] *** clarkema joined
[19:47] *** Zoffix left
[19:48] *** itaipu left
[19:51] <player> I want to execute few external commands sequentially even if some of them fails, however straightforward(run 'false'; run 'message') doesn't print 'message'

[19:52] <player> run 'false'; run 'echo', 'msg'

[19:54] *** ChoHag joined
[19:55] *** Kaiepi left
[19:55] <geekosaur> capture and use the result of "run" instead of letting it be sunk

[19:55] *** Kaiepi joined
[19:56] <geekosaur> if the command fails, default sink will trip the Failure. if you capture and test the result then it will not throw

[19:56] *** itaipu joined
[19:58] *** Kaiepi left
[20:01] *** cdg left
[20:02] *** Kaiepi joined
[20:03] *** Nanjizal joined
[20:04] *** clarkema_ joined
[20:04] *** clarkema_ left
[20:05] *** clarkema left
[20:06] *** mahafyi left
[20:06] *** itaipu left
[20:09] *** TeamBlast left
[20:10] *** TeamBlast joined
[20:11] *** Zoffix joined
[20:11] <Zoffix> FWIW, there's no Failure in this case. Only the Proc object and Proc with non-zero .exitcode throws when sunk.

[20:11] <Zoffix> player: just do:   |run 'false'; |run «echo msg»;

[20:13] <Zoffix> (`|` in this context is a slip operator that will just call .Slip and wrap your Proc into a Slip (which is a List) and List.sink is a no-op and Proc won't get sunk and won't explode)

[20:19] *** Ven`` joined
[20:21] *** zakharyas left
[20:21] *** yoleaux left
[20:21] *** yoleaux joined
[20:21] *** ChanServ sets mode: +v yoleaux

[20:24] <player> Thanks, Zoffix.

[20:25] <player> It's better than using $ = run ...

[20:26] <geekosaur> does that ensure sequentiality though?

[20:26] * geekosaur does not recall

[20:28] <Zoffix> Good point

[20:29] <Zoffix> player: my bad don't use that.

[20:29] *** konsolebox left
[20:30] <mst> if it's a slip followed by a semicolon, surely the semicolon ensure sequentiality?

[20:30] <Zoffix> player: generally, I'd imagine the normal way to do it would be to just write `so run «...»` but per R#1406 that warns currently annoyingly

[20:30] <synopsebot> R#1406 [open]: https://github.com/rakudo/rakudo/issues/1406 Warning about non-useless use of `so`

[20:31] <Zoffix> mst: a Proc is a Proc::Async behind the scenes that fakes being sync. And if you don't capture its output, the syncing points are .so/.Bool/.sink/.exitcode methods

[20:31] * Zoffix tries to verify

[20:32] <mst> ah. so maybe |run('false').so ?

[20:32] <Zoffix> No need for | in that case. The mere .so is enough. parentheses are gross tho :P

[20:33] <Zoffix> This runs sequentially tho: |run «perl6 -e "sleep 1; say q|meow|"»; |run «perl6 -e "say q|foo|"»; sleep 3

[20:33] <Zoffix> s: Proc, 'so', \()

[20:33] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/7361fe2b6/src/core/Mu.pm#L106

[20:33] <Zoffix> s: Proc.new, 'so', \()

[20:33] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/7361fe2b6/src/core/Mu.pm#L106

[20:33] <Zoffix> :(

[20:34] <Zoffix> Ahhh

[20:34] <Zoffix> player: nevermind, it's safe to use. If you don't capture anything it waits for end.

[20:34] <Zoffix> "self!wait-for-finish unless $!out || $!err || $!in;"

[20:35] <Zoffix> though you could use run('...').so to be really safe :}

[20:35] *** konsolebox joined
[20:37] *** comborico1611 left
[20:37] <Geth> ¦ doc: 38ed8fbc7f | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/IO.pod6

[20:37] <Geth> ¦ doc: Expand `run` section

[20:37] <Geth> ¦ doc: 

[20:37] <Geth> ¦ doc: - Show how nice «...» is with `run`

[20:37] <Geth> ¦ doc: - Include info that sunk procs explode and how to deal with it

[20:37] <synopsebot> Link: https://doc.perl6.org/type/IO

[20:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/38ed8fbc7f

[20:42] <Zoffix> e: sub prefix:<⛵> { my $ = @_; Nil }; ⛵run 'false'

[20:42] <evalable6> Zoffix, rakudo-moar 7361fe2b6: OUTPUT: «»

[20:42] <Zoffix> e: sub prefix:<⛵> { my $ = @_; Nil }; ⛵run 'false'; ⛵run «echo "Tis good"»

[20:42] <evalable6> Zoffix, rakudo-moar 7361fe2b6: OUTPUT: «Tis good␤»

[20:43] <Zoffix> git commit; git push; (to generate some publicity for "ZOMG! They got Unicode operatorz!" :))

[20:44] <Zoffix> e: sub prefix:<⛵> (|) {}; ⛵run 'false'; ⛵run «echo "Tis good"» # overthinking it :)

[20:44] <evalable6> Zoffix, rakudo-moar 7361fe2b6: OUTPUT: «Tis good␤»

[20:45] *** comborico1611 joined
[20:46] <comborico1611> Anyone ever heard of Vagrant server?

[20:47] <Zoffix> I heard the name, but no idea what that is.

[20:48] <DrForr> I've used it before, but quite a while back. Basically the same idea as Docker, IIRC.

[20:49] <comborico1611> The author of this PHP book is using it.  I'm new to the scene, if you catch my jive.  I just don't want to be uber-hacked.

[20:49] <comborico1611> pwned-hacked, we would call it.

[20:49] <comborico1611> Not to be confused with phone hacked.

[20:50] <comborico1611> Thanks, DrForr.  I just needed some reassuranace. 

[20:50] *** Zoffix left
[20:51] <DrForr> Most of the cracking these days is supposed to be defended against as 'docker image stop; docker image delete ; docker image create...

[20:52] <El_Che> whut?

[20:54] <DrForr> Or not. Feel free to ignore me ; I'm staring at React code.

[20:54] <El_Che> comborico1611: vagrant was the shit before docker arrived

[20:54] <El_Che> now it's more of an abstraction for vm's 

[20:54] <AlexDaniel> fwiw « » is not nice with run, it's basically a jump from the shell hell to, erm, exactly the same but just on perl 6 level

[20:55] <comborico1611> El_Che: Yeah, I'm using it in a vm.

[20:55] <comborico1611> I don't actually see the VM, though.  I guess it's there. Haha.

[20:55] <El_Che> comborico1611: our spectre and meltdown friends should make it easier nowadays to steal info from outside the vm

[20:55] <comborico1611> I was expecting a graphical VM.  It's Virtual Box.

[20:55] <El_Che> although it's hard

[20:56] <AlexDaniel> demonstrating it in the docs without any precautions is just harmful, and even more so if the example has just two arguments

[20:56] <El_Che> comborico1611: what I would do is recreating the environment with virtualbox or docker myself

[20:56] <El_Che> self and you learn also the lower layers

[20:56] <El_Che> full-stack sticker for your laptop and stuff :)

[21:00] *** espadrine joined
[21:01] *** player left
[21:01] *** yoleaux left
[21:01] *** yoleaux joined
[21:01] *** ChanServ sets mode: +v yoleaux

[21:05] <Geth> ¦ doc: a8b908539d | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Type/IO.pod6

[21:05] <Geth> ¦ doc: We'd rather not advice «» to those who may not know enough

[21:05] <Geth> ¦ doc: 

[21:05] <Geth> ¦ doc: «» is basically a jump from the shell hell to exactly the same but

[21:05] <Geth> ¦ doc: on perl 6 level. Those who want to do it may do it, but if we really

[21:05] <synopsebot> Link: https://doc.perl6.org/type/IO

[21:05] <Geth> ¦ doc: want to document this, then it needs to come with a warning and a

[21:05] <Geth> ¦ doc: blurb on what this may lead to.

[21:05] <Geth> ¦ doc: 

[21:05] <Geth> ¦ doc: Also, in that particular example there are just two arguments so

[21:05] <Geth> ¦ doc: using «» is not really justified.

[21:05] <Geth> ¦ doc: 

[21:05] <Geth> ¦ doc: Half-reverts 38ed8fbc7f1005db4cea683bb8dad3324da196ac.

[21:05] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a8b908539d

[21:08] *** Zoffix joined
[21:08] <Zoffix> AlexDaniel: what's "shell hell"?

[21:09] <AlexDaniel> «rm $file»

[21:09] <Zoffix> AlexDaniel: that doesn't tell me anything

[21:10] <AlexDaniel> so you forget to put quotes and then things go bad

[21:11] *** Zoffix left
[21:11] <AlexDaniel> Zoffix: like? if the file has spaces, then it's split into two arguments

[21:11] <AlexDaniel> and so you delete wrong stuff

[21:12] <AlexDaniel> I think you already understand that, not exactly sure what kind of justification you're expecting from me

[21:12] <El_Che> $file="" #init; ...; «rm -rf $file/»

[21:12] *** rindolf left
[21:12] <AlexDaniel> the essential issue in shells is that the “default” behavior is doing something that you don't want most of the time

[21:13] <AlexDaniel> and then perl 6 came along and brought that “awesome” behavior in «»

[21:13] <AlexDaniel> well it's better because you don't have to use «» of course, and so I personally don't

[21:13] *** st_elmo left
[21:14] <AlexDaniel> except in code golf maybe :)

[21:14] *** st_elmo joined
[21:15] <AlexDaniel> I'm not against documenting it, just not in that form

[21:15] <AlexDaniel> like “You can also use «» but be aware that «» splits stuff by whitespace which may result in problems that you typically have in shells, …” and then some examples

[21:15] <AlexDaniel> well, something like that

[21:18] <AlexDaniel> and I care about it that much because almost in any shell script out there you'll find issues like this

[21:19] <jnthn> AlexDaniel: I guess you're aware of this, but the <<...>> form are called shell quotes :)

[21:19] <AlexDaniel> and I recall reporting at least one serious security issue in an open-source project

[21:19] <AlexDaniel> yea, am aware

[21:20] <AlexDaniel> .oO( but post-modern shells don't do that! )

[21:20] <jnthn> I very rarely find myself using them, tbh

[21:21] <jnthn> One of those "nice to have now and then" things

[21:21] <AlexDaniel> IIRC fish shell has a different understanding of things, and does not need quotes while operating properly

[21:21] <jnthn> But not a form I'd emphasize or default to, especially in the docs

[21:22] *** ChoHag left
[21:25] <tyil> should we add Perl 6 to this list: https://en.wikipedia.org/wiki/Comparison_of_multi-paradigm_programming_languages

[21:26] <gfldex> tyil: more propaganda is always better :)

[21:30] <AlexDaniel> by the way, fwiw

[21:30] <AlexDaniel> it's not enough to put quotes in run «rm "$file"» to make it actually work

[21:31] <AlexDaniel> well, on perl 6 yes, enough. But for rm itself you need -- also

[21:31] *** stmuk joined
[21:31] <AlexDaniel> level

[21:32] <tyil> gfldex: on which repo would an issue for this be most suited?

[21:33] <AlexDaniel> (so run «rm -- "$file"», which yea is arguably easier to read than ‘rm’, ‘--’, $file)

[21:33] *** stmuk_ left
[21:34] <moritz> run <rm -->, $file

[21:35] <AlexDaniel> I guess we have a winner :)

[21:35] <AlexDaniel> moritz: I never thought about that.

[21:35] <AlexDaniel> moritz++

[21:35] *** yoleaux left
[21:36] *** yoleaux joined
[21:36] *** ChanServ sets mode: +v yoleaux

[21:37] <AlexDaniel> but maybe it doesn't work like that?

[21:37] <AlexDaniel> need | in front of <> I think

[21:37] <AlexDaniel> run |<rm -->, $file

[21:38] <gfldex> tyil: https://github.com/perl6/marketing

[21:38] <AlexDaniel> gfldex: we shouldn't view wikipedia as a marketing platform

[21:38] *** mempko left
[21:38] <AlexDaniel> even though it factually is :)

[21:38] <tyil> I was thinking of mu

[21:39] <tyil> since I couldnt find anything else that had a fitting description

[21:39] <gfldex> AlexDaniel: that we are to humble to marketing might the the reason why we are shit at it

[21:40] *** yoleaux left
[21:40] *** yoleaux joined
[21:40] *** ChanServ sets mode: +v yoleaux

[21:40] * AlexDaniel runs to bed quickly so that he stops telling people what they should not do

[21:41] <AlexDaniel> I think it's a doc issue

[21:42] <AlexDaniel> we can doc the relevant parts, and maybe that'll be usable as a source for wikipedia purposes

[21:44] *** ChoHag joined
[21:45] *** preaction joined
[21:49] *** trnh joined
[21:51] *** cdg joined
[21:52] *** mempko joined
[21:53] <tyil> that  sounds pretty valid

[21:54] *** Ven`` left
[21:56] *** Ven`` joined
[21:56] *** troys_ is now known as troys

[21:58] *** Nanjizal left
[22:01] <DrForr> Well, that was rather unfun but I've got React and the react-grid-layout module playing with Cro.

[22:01] <[Coke]> DrForr: that still sounds funner than $dayjob. :)

[22:03] <DrForr> I have *got* to fix irssi's nick higlight color, I can't make out yellow-on-white.

[22:04] *** cdg_ joined
[22:04] * [Coke] is just black & white here. :)

[22:05] *** mempko left
[22:07] *** cdg left
[22:08] *** Ven`` left
[22:11] *** Ven`` joined
[22:11] *** lostinfog joined
[22:11] *** lostinfog left
[22:11] *** comborico1611 left
[22:20] <DrForr> Incidentally grid layouts don't appear to nest, unless I've done something horribly wrong, which *is* remotely possible.

[22:20] *** setty1 left
[22:22] *** squashable6 left
[22:22] *** unicodable6 left
[22:22] *** committable6 left
[22:22] *** bloatable6 left
[22:22] *** squashable6 joined
[22:22] *** trnh left
[22:22] *** unicodable6 joined
[22:22] *** committable6 joined
[22:22] *** ChanServ sets mode: +v committable6

[22:22] *** bloatable6 joined
[22:26] <El_Che> DrForr: it's not irssi, but your terminal colour layout

[22:28] <DrForr> Oooh, in fact it *really* doesn't want you nesting grids, as my most recent CLI invocation 'killall -9 firefox' can attest to.

[22:29] <DrForr> That was fun. G'night.

[22:31] *** trnh joined
[22:34] *** st_elmo left
[22:37] *** geraud joined
[22:40] *** notostraca joined
[22:45] *** stmuk_ joined
[22:45] *** ChoHag left
[22:46] *** notostraca is now known as TEttinger

[22:47] *** stmuk left
[22:53] *** Ven`` left
[22:57] *** ChoHag joined
[22:59] *** Ven`` joined
[23:05] *** itaipu joined
[23:08] *** domidumont left
[23:08] *** Ven`` left
[23:09] *** domidumont joined
[23:09] *** greppable6 left
[23:09] *** greppable6 joined
[23:09] *** ChanServ sets mode: +v greppable6

[23:11] *** Ven`` joined
[23:16] <timotimo> DrForr: if it's css grids you can definitely nest them

[23:16] *** mempko joined
[23:16] <timotimo> css grids being the new awesome sauce

[23:18] *** comborico1611 joined
[23:22] <buggable> New CPAN upload: Net-IP-Lite-Perl6-1.0.0.tar.gz by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Net-IP-Lite-Perl6-1.0.0.tar.gz

[23:22] <buggable> New CPAN upload: Net-IP-Lite-Perl6-1.0.0.zip by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Net-IP-Lite-Perl6-1.0.0.zip

[23:22] <buggable> New CPAN upload: Geo-Ellipsoid-Perl6-1.0.0.tar.gz by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Geo-Ellipsoid-Perl6-1.0.0.tar.gz

[23:23] *** Ven`` left
[23:23] *** Ven` joined
[23:24] *** pmurias left
[23:34] <MasterDuke> when does it come back around to doing everything with HTML tables again?

[23:35] *** traxex joined
[23:46] *** ChoHag left
[23:46] *** sftp left
[23:47] *** ChoHag joined
[23:47] *** yoleaux left
[23:48] *** yoleaux joined
[23:48] *** ChanServ sets mode: +v yoleaux

[23:48] *** sftp joined
[23:49] *** comborico1611 left
