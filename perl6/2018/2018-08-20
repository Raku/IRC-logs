[00:00] <timotimo> oh

[00:00] <timotimo> m: constant Color = do { my enum Color <Red Green Blue>; Color }; say Red

[00:00] <camelia> rakudo-moar fd6f512be: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Red used at line 1␤␤»

[00:00] <timotimo> m: constant Color = do { my enum Color <Red Green Blue>; Color }; say Color::Red

[00:00] <camelia> rakudo-moar fd6f512be: OUTPUT: «Red␤»

[00:00] <timotimo> is "our" scoped by default

[00:00] <Garland_g[m]> Ah. That makes sense.

[00:03] <Garland_g[m]> Thanks. I have a couple enums with exactly the same key inside, and the "our" scoping was causing compilation errors.

[00:04] <timotimo> the same question was on the channel the other day, unfortunately i forgot the one important word from the Right Answer™ ;)

[00:19] <Garland_g[m]> Hmm... I'm still getting the "A symbol <symbolname> has already been exported" error. I'll be back in a bit.

[00:19] <Garland_g[m]> For two different enums that happen to have the same key name.

[00:20] <timotimo> they'll probably have to get their own blocks

[00:20] <timotimo> m: constant Color = do { my enum Color <Red Green Blue>; Color }; constant FinalFantasyCharacter = do { my enum FFC <Cloud Lightning Red>; FFC }; say Color::Red; say FinalFantasyCharacter::Red;

[00:20] <camelia> rakudo-moar fd6f512be: OUTPUT: «Red␤Red␤»

[00:20] <timotimo> m: constant Color = do { my enum Color <Red Green Blue>; Color }; constant FinalFantasyCharacter = do { my enum FFC <Cloud Lightning Red>; FFC }; say Red;

[00:20] <camelia> rakudo-moar fd6f512be: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Red used at line 1␤␤»

[00:21] *** sotona joined
[00:47] *** committable6 left
[00:47] *** committable6 joined
[00:52] *** committable6 left
[00:52] *** committable6 joined
[00:52] *** ChanServ sets mode: +v committable6

[00:55] *** bisectable6 left
[00:55] *** bisectable6 joined
[00:55] *** ChanServ sets mode: +v bisectable6

[00:55] *** evalable6 left
[00:55] *** evalable6 joined
[00:55] *** sotona left
[00:56] *** ChanServ sets mode: +o p6bannerbot

[00:56] *** p6bannerbot sets mode: +v evalable6

[00:58] <AlexDaniel> if there's anyone on this channel who cannot talk, just rejoin

[00:58] <AlexDaniel> our bot was unable to give +v properly

[00:59] <Garland_g[m]> I figured out my error. I need to export the constants, not the internal enums. And if I use Mymodule::Color as the enum name, I get to call them the same way both inside and outside the file, which is really nice.

[00:59] <Garland_g[m]> Thanks!

[01:00] *** ChanServ sets mode: +vv stmuk_ lizmat

[01:01] *** ChanServ sets mode: +vvvv undersightable6 squashable6 benchable6 reportable6

[01:01] *** ChanServ sets mode: +v releasable6

[01:03] *** ChanServ sets mode: +v p6lert_

[01:16] *** molaf left
[01:26] <[Coke]> .

[01:29] *** molaf joined
[01:30] *** p6bannerbot sets mode: +v molaf

[01:46] *** Actualeyes left
[01:58] <SmokeMachine> hi! Could some one, please, give me an opinion? im writing an ORM and Id like to know what do you guys think about the way Im thinking to create to describe relationships. Im pretty happy with the `Scalar` (to 1 relationship) and `Positional`(to many relationship) ways... but I have some doubts about the `Associative` (many to many relationships) one. could some one give me an opinion, please?

[01:58] <SmokeMachine> https://github.com/FCO/Red/issues/17

[02:08] *** Guest17046 joined
[02:08] *** p6bannerbot sets mode: +v Guest17046

[02:09] *** Guest17046 left
[02:10] *** fryst24 joined
[02:11] *** p6bannerbot sets mode: +v fryst24

[02:13] *** fryst24 left
[02:13] *** sotona joined
[02:14] *** p6bannerbot sets mode: +v sotona

[02:15] *** lookatme_q joined
[02:15] *** p6bannerbot sets mode: +v lookatme_q

[02:18] *** node9 joined
[02:18] *** p6bannerbot sets mode: +v node9

[02:21] *** node9 left
[02:23] *** promote14 joined
[02:24] *** p6bannerbot sets mode: +v promote14

[02:25] *** Deusdeorum joined
[02:25] *** Deusdeorum left
[02:27] *** itaipu left
[02:30] *** promote14 left
[02:34] *** ZzZombo joined
[02:34] *** p6bannerbot sets mode: +v ZzZombo

[02:37] *** itaipu joined
[02:37] *** p6bannerbot sets mode: +v itaipu

[02:46] *** weaksauce29 joined
[02:46] *** p6bannerbot sets mode: +v weaksauce29

[02:46] *** sotona left
[02:48] *** weaksauce29 left
[03:17] *** Ceber joined
[03:18] *** p6bannerbot sets mode: +v Ceber

[03:20] *** Ceber left
[03:29] *** dustinm` joined
[03:30] *** p6bannerbot sets mode: +v dustinm`

[03:33] *** itaipu left
[03:51] *** lichtkind joined
[03:51] *** ryn1x joined
[03:52] *** p6bannerbot sets mode: +v lichtkind

[03:52] *** p6bannerbot sets mode: +v ryn1x

[03:59] *** spycrab0 left
[04:04] *** sotona joined
[04:04] <lichtkind> does  anyone know how to make a circumfix op | | work?

[04:04] <lichtkind> i tried everything i could come up with

[04:05] *** p6bannerbot sets mode: +v sotona

[04:12] *** ryn1x left
[04:23] *** molaf left
[04:26] <lookatme_q> lichtkind, maybe because | is a special infix

[04:36] *** sotona left
[05:05] *** MikeSpears15 joined
[05:06] *** MikeSpears15 left
[05:12] *** vrurg left
[05:15] *** vrurg joined
[05:15] *** p6bannerbot sets mode: +v vrurg

[05:37] *** Guest81764 joined
[05:37] *** p6bannerbot sets mode: +v Guest81764

[05:39] *** Guest81764 left
[05:50] <moritz> m: sub circumfix:<| |>($a) { say "|$a|" }; |a|

[05:50] <camelia> rakudo-moar 5ee9afaea: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3 circumfix:<| |>($a) { say "|$a|" }; |a|7⏏5<EOL>␤    expecting any of:␤        prefix␤        term␤»

[05:51] <moritz> lichtkind: | is already a prefix operator, and the parser cannot chose prefix:| vs. circumfix:| without backtracking

[05:51] *** Actualeyes joined
[05:51] <moritz> m: sub circumfix:<§ §>($a) { say "|$a|" }; §a§

[05:51] <camelia> rakudo-moar 5ee9afaea: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»

[05:51] <moritz> m: sub circumfix:<§ §>($a) { say "|$a|" }; §4§

[05:51] <camelia> rakudo-moar 5ee9afaea: OUTPUT: «|4|␤»

[05:52] *** p6bannerbot sets mode: +v Actualeyes

[05:55] *** sotona joined
[05:55] *** p6bannerbot sets mode: +v sotona

[06:02] *** Kaiepi left
[06:04] <lucs> 0

[06:11] *** vrurg left
[06:16] *** dominix joined
[06:16] *** p6bannerbot sets mode: +v dominix

[06:25] *** fake_space_whale left
[06:28] *** jargan is now known as jast

[06:28] *** janus25 joined
[06:28] *** sotona left
[06:29] *** janus25 left
[06:34] *** MasterDuke left
[06:35] *** abraxxa joined
[06:36] *** p6bannerbot sets mode: +v abraxxa

[06:56] *** rindolf joined
[06:57] *** p6bannerbot sets mode: +v rindolf

[07:00] *** |oLa| left
[07:08] *** jmerelo joined
[07:09] *** p6bannerbot sets mode: +v jmerelo

[07:09] <jmerelo> Hi!

[07:11] <dominix> hi J

[07:15] *** |oLa| joined
[07:16] <jmerelo> Hi, dominix

[07:16] *** p6bannerbot sets mode: +v |oLa|

[07:20] *** zakharyas joined
[07:20] *** p6bannerbot sets mode: +v zakharyas

[07:39] *** dominix left
[07:46] <El_Che> the discussion on perlmonks and reddit of ovid's talk on the future of Perl 5 is weird. I am almost happy no one has mentioned Perl 6.

[07:47] <jmerelo> El_Che: I'll have to check it out. He mentioned 3 or 4 things that should go into Perl 5 to make it a bit better. Those things are already in Perl 6. So it's like, Perl 5 can be better by becoming even more like Perl 6

[07:48] <El_Che> yes, that's the subtext I get without havibng seen the talk

[07:48] <jmerelo> El_Che: it was gradual typing, signatures, a minimal class system... Don't remember the next, but I was listening to him and thinking "Now he's gonna say that by having this it's become Perl 6"

[07:49] <El_Che> a faster perl 6 with more modules, essentially

[07:50] <lookatme_q> :)

[07:50] <jmerelo> El_Che: well, the thing is that he did mention that Perl 6 is going to become eventually faster than Perl 5. There's the potential there in the MoarVM

[07:52] <El_Che> yes, indeed

[07:58] *** araujo joined
[07:58] *** araujo left
[07:58] *** araujo joined
[07:58] *** p6bannerbot sets mode: +v araujo

[07:59] *** Libre joined
[07:59] *** p6bannerbot sets mode: +v araujo

[07:59] *** p6bannerbot sets mode: +v Libre

[08:07] *** Libre left
[08:08] *** RikcreaInfo joined
[08:08] *** p6bannerbot sets mode: +v RikcreaInfo

[08:21] <masak> El_Che: I noticed the sentence that said that Perl has no energy, no sense of direction, no long-term strategy. that's exactly why Perl 6 got started once many years ago.

[08:21] <jmerelo> masak++

[08:22] *** pmurias joined
[08:23] *** p6bannerbot sets mode: +v pmurias

[08:23] * masak has power fantasies about the Perl 5 community going "oh noes Perl is dying, we should've done something about this years ago" and Perl 6 jumping out and going "ta-daa!"

[08:24] <jmerelo> masak: Well, as Larry Wall says, "We love Perl for what it is"

[08:27] <jmerelo> Also, Perl is Perl

[08:29] *** andrewalker joined
[08:30] *** p6bannerbot sets mode: +v andrewalker

[08:32] *** ZzZombo left
[08:33] <El_Che> masak: some pschycologist would argue that it's a repressed fear of the Perl5 people saying: "ah, that's why were dying" :)

[08:34] *** ZzZombo joined
[08:34] *** p6bannerbot sets mode: +v ZzZombo

[08:36] <jast> the good thing about being a psychologist is that these types of arguments are untestable :)

[08:36] <El_Che> :)

[08:38] <jast> my favourite in that direction is evolutionary psychology (the idea that much of our day-to-day behaviour evolved a long time ago). it's unprovable but easy to talk about at length.

[08:54] <lizmat> weekly: https://lancewicks.com/2018/08/18/the-european-perl-conference-in-glasgow-tpcig-yapceu2018-aka-yapceu2018/

[08:54] <notable6> lizmat, Noted!

[08:55] <lizmat> weekly: http://blogs.perl.org/users/mohammad_s_anwar/2018/08/the-perl-conference-in-glasgow---report.html

[08:55] <notable6> lizmat, Noted!

[08:55] <lizmat> weekly: https://perlmonks.org/?node_id=1220578

[08:55] <notable6> lizmat, Noted!

[08:55] * lizmat is going to be afk until much later today

[09:00] *** lizmat left
[09:09] <masak> lizmat: thanks for the weekly! I wish I were there in Glasgow!

[09:09] <masak> also, did lizmat just imply she's been up all night and will sleep through the day? :P

[09:13] *** ZzZombo left
[09:13] *** ZzZombo joined
[09:13] *** p6bannerbot sets mode: +v ZzZombo

[09:14] *** pmurias left
[09:15] *** Ven` joined
[09:16] *** p6bannerbot sets mode: +v Ven`

[09:17] *** scimon joined
[09:18] *** p6bannerbot sets mode: +v scimon

[09:18] *** pmurias joined
[09:19] *** p6bannerbot sets mode: +v pmurias

[09:24] <scimon> Morning all. 

[09:24] <yoleaux> 16 Aug 2018 13:58Z <b2gills> scimon: where clauses can be a statement that is smartmatched automatically (watching livestream) `subset IntOrRat of Numeric where Int|Rat`

[09:24] <yoleaux> 16 Aug 2018 13:59Z <timotimo> scimon: i think you had a test for /Hello world/ and expected it to match "Hello world", but whitespace in perl6 regex aren't significant; i think rakudo is supposed to warn about that, though?

[09:24] <yoleaux> 16 Aug 2018 14:00Z <timotimo> scimon: sorry, that was actually meant for lancew

[09:25] <scimon> b2gills: Thanks 

[09:27] <scimon> jnthn: I was thinking of grabbing your StackOverflow answer re environment traits and nicking some of Liz's code from Hash::LRU to make a new module version of it. 

[09:28] *** abraxxa left
[09:29] <jnthn> scimon: Feel free :)

[09:29] <yoleaux> 01:55Z <AlexDaniel> jnthn: any pre-golf thoughts on R#2231 ?

[09:29] <synopsebot_> R#2231 [open]: https://github.com/rakudo/rakudo/issues/2231 [SEGV][regression][⚠ blocker ⚠] SEGV in Audio::Sndfile

[09:29] <jnthn> .tell AlexDaniel The ticket doesn't have a stack trace, which I'd need to give any useful pre-golf thoughts :)

[09:29] <yoleaux> jnthn: I'll pass your message to AlexDaniel.

[09:31] <lichtkind> moritz thank you i thought about that stuff too and was not quite sure since @ ist also a prefix context op and in fact you can use it build a cricumfix or do I moss something?

[09:32] *** abraxxa joined
[09:32] *** abraxxa left
[09:32] <AlexDaniel> .

[09:32] <yoleaux> 09:29Z <jnthn> AlexDaniel: The ticket doesn't have a stack trace, which I'd need to give any useful pre-golf thoughts :)

[09:32] <AlexDaniel> jnthn: :)

[09:33] *** abraxxa joined
[09:34] *** p6bannerbot sets mode: +v abraxxa

[09:38] <moritz> lichtkind: @ is not a prefix op I know

[09:39] <moritz> I know @ as a sigil (which is parsed as part of a term) and I know @( ... ) as a circumfix operator

[09:44] *** RikcreaInfo left
[09:47] *** lichtkind_ joined
[09:48] *** p6bannerbot sets mode: +v lichtkind_

[09:49] *** lichtkind left
[09:55] <lichtkind_> moritz, yes I just checked but it once was an context op at least around 2005-6 ish

[09:57] *** lichtkind_ is now known as lichtkind

[10:01] *** spycrab0 joined
[10:01] *** p6bannerbot sets mode: +v spycrab0

[10:05] *** [particle] left
[10:16] *** pmurias left
[10:17] *** pmurias joined
[10:18] *** p6bannerbot sets mode: +v pmurias

[10:25] *** [particle] joined
[10:25] <pmurias> masak: it's an interesting questing if Perl 6 got fast and was picking up steam would it help or hinder the Perl 5 language

[10:25] *** p6bannerbot sets mode: +v [particle]

[10:26] *** lookatme_q left
[10:26] *** lookatme_q joined
[10:27] *** p6bannerbot sets mode: +v lookatme_q

[10:29] *** [particle] left
[10:40] *** xiaomiao left
[10:41] *** xiaomiao joined
[10:41] *** p6bannerbot sets mode: +v xiaomiao

[10:44] <stmuk_> I don't think perl 5 v perl 6 is a zero sum game 

[10:45] <stmuk_> I also think if ever there is another implemention of perl 5 other than the current it's likely to be written in perl 6

[10:45] <stmuk_> perl 6 is a potential solution to perl 5's problems. Perl 6 hasn't caused them.

[10:48] *** ZzZombo left
[10:49] <jmerelo> stmuk_++

[10:49] <jmerelo> squashable6: status

[10:49] <squashable6> jmerelo, Next SQUASHathon in 10 days and ≈23 hours (2018-09-01 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[10:53] *** [particle] joined
[10:54] *** p6bannerbot sets mode: +v [particle]

[10:56] *** jcarty joined
[10:56] <scimon> My favourite bit of Ovid's talk on the future of Perl was the laughter at the question "What would I like to see added to Perl6". 

[10:56] *** p6bannerbot sets mode: +v jcarty

[10:59] *** Ven` left
[11:01] *** Ven` joined
[11:01] *** p6bannerbot sets mode: +v Ven`

[11:04] <stmuk_> personally I've always wanted more features removed from languages than added :) (not the perl way I know)

[11:05] <jmerelo> scimon: right. Perl 6 has got everythin _and_ the kitchen sink. Or the kitchen sink context, as it were.

[11:05] *** [particle] left
[11:05] <jmerelo> But Perl 6 is not going to happen by itself. Still a lot of work to do. For instance, in the documentation :-)

[11:13] <scimon> On that note do we have a ticker about adding more documentation for react { whenever {} } blocks? 

[11:15] *** nine_ is now known as nine

[11:15] *** zakharyas left
[11:18] * scimon lunches

[11:23] *** Ven` left
[11:25] *** sergot joined
[11:25] *** [particle] joined
[11:26] *** p6bannerbot sets mode: +v sergot

[11:26] *** p6bannerbot sets mode: +v [particle]

[11:32] <pmurias> re features to add, having a real gradual type system would be cool (OTOH it's likely it would be best to have it on CPAN so you could choose the static type system)

[11:39] *** pmurias left
[11:39] *** pmurias joined
[11:40] *** p6bannerbot sets mode: +v pmurias

[11:42] <scimon> pmurias: How do you mean? I thought the current type system was pretty impressive. What's it missing?

[11:45] *** Ven` joined
[11:46] *** p6bannerbot sets mode: +v Ven`

[11:47] <pmurias> scimon: the current "type system" is mostly runtime assertions

[11:47] <pmurias> scimon: in a proper gradual type system once you but your types everywhere you get static type checking at compile time

[11:50] <pmurias> scimon: the gradual type system are called that way because you can gradually convert your dynamically type program into a statically typed one

[11:53] *** itaipu joined
[11:53] *** p6bannerbot sets mode: +v itaipu

[11:59] <jmerelo> scimon: yep, there's a ticket. Let me find it for you

[12:00] <jmerelo> scimon: it literally says "What the hell is react/whenever" https://github.com/perl6/doc/issues/2135

[12:10] <lichtkind> jmerelo, greetings was insightful to meet you in person, hope we get soemthing done

[12:12] <jmerelo> lichtkind: likewise. :-) 

[12:14] <lichtkind> jmerelo, i would like have something like that but most of it you already have so just a similar index page to the according bits http://tablets.perl6.org/appendix-b-grouped.html

[12:16] <jmerelo> lichtkind: I had no idea that existed. Is it generated from elsewhere, or written from scratch?

[12:18] *** pmurias left
[12:19] *** pmurias joined
[12:20] *** p6bannerbot sets mode: +v pmurias

[12:21] <lichtkind> jmerelo, by my own hands :)

[12:21] <jmerelo> lichtkind++ that's a lot of work. It's hosted in some repo?

[12:22] *** abraxxa left
[12:22] <lichtkind> jmerelo, i wroe it 2005-2009 in our german perl forum wiki which is currently down

[12:23] *** domidumont joined
[12:24] *** abraxxa joined
[12:24] *** p6bannerbot sets mode: +v domidumont

[12:24] *** p6bannerbot sets mode: +v abraxxa

[12:24] <lichtkind> jmerelo, https://github.com/perl6/tablets

[12:27] *** JP_ joined
[12:27] *** p6bannerbot sets mode: +v JP_

[12:29] <JP_> Hi, I’d like to lear more about perl6

[12:29] <lichtkind> just released Math::Matrix 0.25

[12:29] <Ulti> JP you came to the right place :D

[12:30] <JP_> And how can I start?

[12:30] <Ulti> JP_ https://perl6intro.com/ is a good first place and in many langs

[12:30] <lichtkind> JP_, that covered good at perl6.org

[12:31] <lichtkind> or that

[12:31] *** domidumont left
[12:32] *** domidumont joined
[12:32] <Ulti> yeah and the other offical docs location to get started rather than just reference on built in objects is https://docs.perl6.org/language.html

[12:33] *** p6bannerbot sets mode: +v domidumont

[12:33] *** Ven` left
[12:34] <Ulti> JP_: if you dont want to go to the effort of installing Perl 6 yet there are a couple of places you can run example code, one such service can be found here https://glot.io/new/perl6

[12:35] *** pmurias left
[12:37] <Geth> ¦ Pod-To-HTML: JJ++ created pull request #44: Tries to fix a problem with URLs that started with ?

[12:37] <Geth> ¦ Pod-To-HTML: review: https://github.com/perl6/Pod-To-HTML/pull/44

[12:37] *** pmurias joined
[12:37] *** JP_ left
[12:37] *** psychoslave joined
[12:37] *** p6bannerbot sets mode: +v pmurias

[12:38] *** Ven` joined
[12:38] *** p6bannerbot sets mode: +v psychoslave

[12:39] *** p6bannerbot sets mode: +v Ven`

[12:42] *** psychoslave left
[12:45] <jmerelo> lichtkind: wow, 3 year old. We will need to do stuff about that...

[12:46] <lichtkind> jmerelo, but my goals was to port the good parts into docs since i dont have the time to make this as full time work

[12:46] <lichtkind> jmerelo, and than eventually adandon them

[12:47] <jmerelo> lichtkind: that might not be trivial... 

[12:47] <lichtkind> sure

[12:48] *** sotona joined
[12:48] <jmerelo> lichtkind: and what kind of markup is it using?

[12:48] *** Kaiepi joined
[12:48] *** psychoslave joined
[12:48] <lichtkind> markdown

[12:48] <lichtkind> conversion was painful

[12:48] *** p6bannerbot sets mode: +v sotona

[12:49] *** p6bannerbot sets mode: +v Kaiepi

[12:49] *** p6bannerbot sets mode: +v psychoslave

[12:49] <jmerelo> lichtkind: there's going to be some impedance with the rest of the documentation, which is in Pod 6. I would say it's better to keep it separate for the time being...

[12:49] *** Ven` left
[12:49] <jmerelo> lichtkind: in fact, for the foreseeable future. 

[12:49] * jmerelo goes afk for lunch now...

[12:49] *** jmerelo left
[12:53] *** sotona left
[12:59] *** zakharyas joined
[13:00] *** p6bannerbot sets mode: +v zakharyas

[13:02] *** Ven` joined
[13:03] *** p6bannerbot sets mode: +v Ven`

[13:04] *** Ven` left
[13:15] *** Luneburg joined
[13:15] *** p6bannerbot sets mode: +v Luneburg

[13:16] <Luneburg> Is there any way to remove a specific character from a sequence (i.e. "a") without knowing where it is in the sequence?

[13:17] <moritz> yes, with grep

[13:17] <Luneburg> moritz: Ah, I remember now. Thanks.

[13:17] *** Luneburg left
[13:17] <moritz> m: my \new_seq = ('a' ... *).grep(none('a')); say new_seq.head(10)

[13:17] *** Ven` joined
[13:17] <camelia> rakudo-moar f965e26aa: OUTPUT: «(b c d e f g h i j k)␤»

[13:17] <moritz> m: my \new_seq = ('a' ... *).grep(none('f')); say new_seq.head(10)

[13:17] <camelia> rakudo-moar f965e26aa: OUTPUT: «(a b c d e g h i j k)␤»

[13:18] *** p6bannerbot sets mode: +v Ven`

[13:18] *** vrurg joined
[13:19] *** p6bannerbot sets mode: +v vrurg

[13:20] *** skids joined
[13:21] *** p6bannerbot sets mode: +v skids

[13:29] *** sena_kun joined
[13:30] *** p6bannerbot sets mode: +v sena_kun

[13:31] <SmokeMachine> sorry, Im not trying to spam, just sending it again when there's more people logged in

[13:31] <SmokeMachine> hi! Could some one, please, give me an opinion? im writing an ORM and Id like to know what do you guys think about the way Im thinking to create to describe relationships. Im pretty happy with the `Scalar` (to 1 relationship) and `Positional`(to many relationship) ways... but I have some doubts about the `Associative` (many to many relationships) one. could some one give me an opinion, please?

[13:31] <SmokeMachine> 22:58 https://github.com/FCO/Red/issues/17

[13:32] *** domidumont left
[13:37] *** marcusramberg left
[13:37] *** marcusramberg joined
[13:38] *** p6bannerbot sets mode: +v marcusramberg

[13:40] *** domidumont joined
[13:41] *** p6bannerbot sets mode: +v domidumont

[13:48] *** lgtaube left
[13:49] <SmokeMachine> moritz: I had answered your comment

[13:49] *** lgtaube joined
[13:49] <SmokeMachine> moritz: (thanks for the help!)

[13:50] *** p6bannerbot sets mode: +v lgtaube

[13:50] *** Ven` left
[13:56] <moritz> SmokeMachine: somehow this is all too much magic for my taste

[13:57] <SmokeMachine> :(

[13:58] <SmokeMachine> moritz: is there a way to do that you would prefer?

[13:58] <moritz> SmokeMachine: as I mentioned before, I like the way that SQLAlchemy does it

[13:59] <moritz> you declare an attribute/column to be a foreign key

[13:59] *** Ven` joined
[14:00] <moritz> and then you add a second attribute that is the relationship, and if there is more than one foreign key that maps to the relationship type, you have to specify which one you refer to

[14:00] *** p6bannerbot sets mode: +v Ven`

[14:01] <moritz> and in the relationship constructor, you can add extra arguments for non-default relationship types (for example uselist=False for a 1:1 relationship that is modeled as a foreign key)

[14:01] *** psychoslave left
[14:02] <moritz> the problem with callbacks tend to be: what do you do when you don't have an instance?

[14:03] <moritz> for example, you want to generate the DDL for your classes. What instance of your types can you pass in to discover the foreign key relationships?

[14:03] <moritz> those callbacks give you max flexilibity and min introspectability

[14:05] <moritz> I guess Track.cd-id (called on the type object) could return a Column object with enough meta data

[14:05] *** jcarty left
[14:05] <moritz> but then all the callbacks need to work with both instance and type objects, which is not obvious to the user

[14:07] *** domidumont left
[14:12] <SmokeMachine> moritz: it already does... attributes column (as `has $.bla is column`, and `has $.ble is referencing{ Bli.something }`) are Red::AttrColumn and it adds a method on its undefined class that returns the column description. Thats how i can do something like `Question.where: .answer == 42`

[14:16] <SmokeMachine> moritz: when I call `.cd-id` on an object, it returns the value of the cd-id

[14:29] <pmurias> SmokeMachine: what do the callback give you?

[14:29] <scimon> Currently I'm working with SQAlchemy and DBIC and muchly prefer DBIC. Mainly because it's easier to have it make SQL requests I'm expecting.

[14:29] <scimon> (Good luck BTW)

[14:29] <SmokeMachine> pmurias: the column that should be used

[14:30] <SmokeMachine> scimon: thanks! :)

[14:31] <SmokeMachine> pmurias: and that need to be a Block because the column can not be defined yet...

[14:33] <pmurias> so a method will retain a column value when called on an objects and some more general 'column called this' on a type object?

[14:34] <SmokeMachine> pmurias: not a column value, but a column representation...

[14:35] <SmokeMachine> pmurias: this: https://github.com/FCO/Red/blob/master/lib/Red/Column.pm6

[14:36] <SmokeMachine> pmurias: I think I didn't get it... :(

[15:04] <SmokeMachine> pmurias: yes, that's it! the value on a object and the column description on type object! that's it!

[15:05] <SmokeMachine> but on the callback it's always called on a type object...

[15:06] <SmokeMachine> if I need to get the value, I get it from the column descriptor and the instance of the object...

[15:07] *** fake_space_whale joined
[15:07] <SmokeMachine> like here: https://github.com/FCO/Red/blob/master/lib/Red/AttrRelationship.pm6#L11

[15:08] <SmokeMachine> and here: https://github.com/FCO/Red/blob/master/lib/Red/AttrRelationship.pm6#L16

[15:08] *** p6bannerbot sets mode: +v fake_space_whale

[15:22] *** abraxxa1 joined
[15:22] *** spider-mario left
[15:23] *** p6bannerbot sets mode: +v abraxxa1

[15:24] *** abraxxa left
[15:42] <Ulti> I like the idea of column ORMness shadowing just plain class style representations with plain values

[15:42] <Ulti> also I am pro maximum magic and syntactic sugar, so long as there is always an escape hatch

[15:43] <Ulti> the escape hatch doesn't have to be necessarily pretty but does need to be relatively guessable or discoverable, SQLAlchemy is actually awful for this, just today I was trying to work out how to inject plain SQL into the select part of a query

[15:45] <Ulti> fairly sure its not really possible, instead you can create an ORM like query from a statement but its a full query and finalised all you can do is annotate over the top the model/column annotation to what is returned so that it can be combined with other ORM queries in sub selects etc

[15:45] <Ulti> which would do what I want, but really all I wanted to do was specify a single nugget of SQL for a single column clause in the select

[15:46] <Ulti> from what I can see at the moment there isn't much around more arbitrary queries in Re

[15:46] <Ulti> *Red

[15:46] <Ulti> outside of the direct ORM relationships

[15:46] *** jast left
[15:50] *** jast joined
[15:51] *** p6bannerbot sets mode: +v jast

[15:51] <Ulti> btw SmokeMachine have you seen Pony in Python?

[15:51] <Ulti> https://ponyorm.com/

[15:52] <Ulti> Perl 6 definitely has the power to go a step further for nice syntax on queries

[15:54] <SmokeMachine> Util: yes, I did

[15:54] <SmokeMachine> Util: Ill take another look

[15:55] *** ExtraCrispy joined
[15:55] <Ulti> its kind of crazy what the dev has to do to get that in Python https://stackoverflow.com/questions/16115713/how-pony-orm-does-its-tricks/16118756#16118756

[15:56] *** p6bannerbot sets mode: +v ExtraCrispy

[15:57] <Ulti> a query slang is something I'd be super interested in working on, I really like the SQL one we already have in the ecosystem

[16:08] *** zakharyas left
[16:10] *** molaf joined
[16:10] *** p6bannerbot sets mode: +v molaf

[16:11] <SmokeMachine> Util: looking at the first page of pony, I think some day it will be possible to do that query with Red using a code like this one: `Customer.all.grep({ .orders.sum > 1000 })`

[16:11] <SmokeMachine> Util: but its far from that currently...

[16:12] *** xinming_ left
[16:12] *** xinming joined
[16:13] *** p6bannerbot sets mode: +v xinming

[16:14] <Ulti> plus you'd want to use where and subsets right :D

[16:14] *** pmurias left
[16:16] <SmokeMachine> Util: do you think it's a good way to go?

[16:20] <SmokeMachine> sorry: `Customer.all.grep({ .orders.price.sum > 1000 })`

[16:22] <buggable> New CPAN upload: Trait-Env-0.0.1.tar.gz by SCIMON https://cpan.metacpan.org/authors/id/S/SC/SCIMON/Perl6/Trait-Env-0.0.1.tar.gz

[16:22] <scimon> So I've been totally hard at work today.

[16:24] *** jmerelo joined
[16:25] *** p6bannerbot sets mode: +v jmerelo

[16:31] <scimon> And I'm off. Later folks.

[16:31] *** scimon left
[16:40] <Ulti> SmokeMachine the dream: subset PayingCustomer of Customer where *.orders.sum > 1000;

[16:40] <Ulti> a nice way to define views at least :)

[16:41] <SmokeMachine> That’s a great idea!

[16:41] <Ulti> especially if you can have relationships on them

[16:43] <SmokeMachine> Util: I was planning `Customer.alias(PayingCustomer, :on{ .orders.price.sum > 1000 })

[16:43] <SmokeMachine> But subset makes much more sense

[16:44] *** domidumont joined
[16:45] *** p6bannerbot sets mode: +v domidumont

[16:46] *** domidumont left
[16:47] <Ulti> I've never actually checked what subsets produce

[16:48] *** domidumont joined
[16:49] <Ulti> I assume its full subclass with the where function wrapping the constructor and type object comparisson stuff 

[16:49] *** p6bannerbot sets mode: +v domidumont

[16:49] *** sabayonuser joined
[16:49] *** sabayonuser is now known as Hexaferrum

[16:50] *** p6bannerbot sets mode: +v Hexaferrum

[16:50] *** Hexaferrum is now known as epsilonphase

[16:55] <Geth> ¦ doc: e3c4294708 | (JJ Merelo)++ | htmlify.p6

[16:55] <Geth> ¦ doc: Adding more info in htmlify to try and find error in #2270

[16:55] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e3c4294708

[16:55] <Geth> ¦ doc: 984ad94dc6 | (JJ Merelo)++ | doc/Type/Routine.pod6

[16:55] <Geth> ¦ doc: Adds a simple note on the behavior of is pure on multis

[16:55] <synopsebot_> Link: https://doc.perl6.org/type/Routine

[16:55] <Geth> ¦ doc: 

[16:56] <Geth> ¦ doc: Basically specifying that this could change in the future, if

[16:56] <Geth> ¦ doc: rakudo/rakudo#2215 is solved. This solves #2215

[16:56] <synopsebot_> RAKUDO#2215 [closed]: https://github.com/rakudo/rakudo/issues/2215 [regression][testneeded] Blob.subbuf regression since 2018.06

[16:56] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/984ad94dc6

[16:57] <jmerelo> Er, I mean 2127. Sorry. Will edit.

[17:00] * jmerelo realizes you can't edit commits. Well, you can, but once they're pushed they can cause a lot of trouble. Anyway.

[17:01] *** Ven` left
[17:05] *** domidumont left
[17:09] <epsilonphase> Hi, I've been reading about perl6 for a while now, and I

[17:09] <epsilonphase> ... Sorry.... In any case, I was wondering how things are turning out with the macro system?

[17:39] <jmerelo> epsilonphase: I think it's still not there.

[17:40] <sena_kun> epsilonphase, you can look at https://github.com/masak/007/ for some, I believe, work in progress on topic.

[17:40] <jmerelo> epsilonphase: I'm checking out the next version, and I don't see anything planned. You can still use it with "use experimental"

[17:45] <epsilonphase> That's what I had suspected. Thanks for confirming it.

[17:50] *** gfldex left
[17:53] <Ulti> epsilonphase: this level of macro exists https://perl6advent.wordpress.com/2012/12/23/day-23-macros/

[17:53] <Ulti> if you do: use experimental :macros;

[17:54] <Ulti> epsilonphase out of curiosity what makes you specifically interested in macros?

[17:55] <epsilonphase> I've had an interest in lisp for quite a while, but, the prefix order is less readable than postfix or infix, at least, by my eyes.

[17:55] <epsilonphase> Also compile time magic is really neat.

[17:56] <Ulti> well you get a lot of that through other means in Perl 6 than the feature called "macros" specifically

[17:56] <Ulti> like slangs let you do a lot

[17:58] *** Ven` joined
[17:58] <Ulti> you can essentially grab the compiler mid doing something and take over for some defined context and then hand back

[17:58] *** p6bannerbot sets mode: +v Ven`

[17:58] *** Khisanth left
[18:00] <Ulti> epsilonphase: this might interest you https://github.com/tony-o/perl6-slang-sql

[18:02] <masak> epsilonphase: hi! I am an automated response system that triggered on the word "macros". how may I help you?

[18:03] *** Ven` left
[18:03] <Ulti> >:3

[18:04] <epsilonphase> Masak: I was wondering if you'd show up :D I'd read some of your blog posts before coming on. Ulti: That's really neat too.

[18:05] <masak> epsilonphase: I think the 10-word summary is "I'm pleased at how 007 keeps informing Perl 6 macros"

[18:05] <masak> of course, given that it all happens on the side so far, it's also a little bit obscured

[18:05] <masak> but being able to iterate on a smaller language has helped a lot

[18:06] <epsilonphase> I was taken aback when I saw how much it looks like it's also turning into a more or less fully fledged language. Or, rather, I read your intention as that.

[18:07] <masak> yeah... it's a bit of a surprise to me too

[18:08] <masak> it's already the case that 007 has the fullest implementation of Perl 6 macros to date

[18:10] <masak> basically, fleshing them out more means cheating less and less with the language

[18:11] *** Khisanth joined
[18:12] *** p6bannerbot sets mode: +v Khisanth

[18:13] <epsilonphase> It's funny how that happens huh? Though.... I'm not sure I see how you operate on the QTrees in 007 in the docs yet.

[18:13] <masak> I'm willing to explain if you feel you have the time and patience

[18:15] <epsilonphase> Sure.

[18:16] <masak> simplest case: `moo("something")`, where `moo` is a macro

[18:16] <epsilonphase> Alright.

[18:16] <masak> it looks like a normal sub call, but it's a macro call

[18:17] <epsilonphase> Lisp would've been out of luck otherwise.

[18:17] <masak> a sub call would invoke during runtime; the macro call invokes sometime during compile time, sometimes as early as right after the `)`

[18:19] <epsilonphase> Alright, I think I follow.

[18:19] <masak> in the sub case, the argument is the Str "something"; in the macro case, the argument is the Q::Literal::Str with the value "something"

[18:20] <epsilonphase> Okay, so it passes the tokens/syntactic constructs between the ( and )?

[18:22] <masak> yes; basically an argumentlist is a comma-separated list of expr; it passes each expr Qtree as an argument

[18:23] <masak> similarly, on the other end, a sub returns a regular value but a macro returns a Qtree. that Qtree gets put back into the program in lieu of the macro call

[18:23] <masak> it's what happens, for example, in examples/name.007

[18:25] <masak> in all of the above, we've not mentioned hygiene. but it's of course there all the time.

[18:25] <epsilonphase> Oh, so, implemented completely, if you had a troublesome area of code doing something silly, could you have it do something like add printing of line numbers between each contained expression?

[18:27] <masak> yes, that sounds within the realm of the possible. given something like Perl 6's $?LINE variable

[18:27] <masak> lately though I've been thinking more about constructions like `amb` and `each`. and syntactic junctions. :)

[18:28] <epsilonphase> That sounds like it would definitely simplify the construction of such a macro? Though, I think I know what each does, but what does amb do?

[18:29] <masak> the second-simplest case of a macro invocation is when the macro is an operator. so something like `x == "start" ff x == "end"`, where infix:<ff> is a macro

[18:29] <masak> oh, `amb` is, hold on, let me link you

[18:30] <masak> https://github.com/masak/007/issues/13

[18:30] *** andrzejku_ joined
[18:30] <masak> (note the issue isn't really agreed with itself exactly how the syntax should be)

[18:30] *** p6bannerbot sets mode: +v andrzejku_

[18:30] <epsilonphase> That first example kinda reminds me of goal seeking from Prolog.That'd be terrifyingly powerful.

[18:31] *** sauvin left
[18:31] *** [particle] left
[18:31] <masak> aye

[18:31] <jmerelo> My take on TPCIG https://dev.to/jj/perl-is-perl-46cm

[18:31] <masak> it's made slightly more concrete with https://github.com/masak/007/issues/349#issuecomment-408550689 which is more recent

[18:32] *** [particle] joined
[18:33] *** p6bannerbot sets mode: +v [particle]

[18:33] *** andrzejku left
[18:33] *** andrzejku_ is now known as andrzejku

[18:33] <epsilonphase> Though, if we could get back to where you were going, (the infix macro), is that going to be kinda like how Haskell handles infix operators?

[18:34] <SmokeMachine> masak: do you think someday will macros make it possible to override `&&` and `||`?

[18:35] <masak> SmokeMachine: yes, I hope so.

[18:36] <SmokeMachine> masak: :)

[18:36] <masak> SmokeMachine: I mean, from a 007 perspective, `&&` and `||` are (built-in) macro infixes

[18:37] <masak> pmichaud++ was doubtful at one point where the whole circularity loop would close wrt booleans, conditionals, and those operators. wow, that must be sometime around 2011.

[18:37] <masak> I think at this point I have a fairly good answer to that.

[18:40] <masak> I'd define `&&` and `||` in terms of `if`. and then `if` in terms of a lower-level control flow API that told the code generator how to write GOTOs.

[18:42] <masak> epsilonphase: how does Haskell handle infix operators? I'm not sure I know enough about that. I've seen them declared sometimes -- the precedence level is a number...?

[18:44] <masak> epsilonphase: maybe https://gist.github.com/masak/010ba2ab93a5632c1667155339ffd05b#custom-operators is a good intro to how 007 thinks of operators

[18:44] <epsilonphase> (Honestly that's not part of them that I understand), but I was referring more to the passing of the arguments to either side being translated into sequential args. $v1 <ack!> $v2 is just <ack!>($v1,$v2)

[18:45] <masak> aha. well, then, in that case, yes. :)

[18:46] <masak> somewhat unrelatedly, I'm (very slowly) coming around to the notion of things like infix:<+> delegating to an .add method on the *left* operand -- something Perl 6 doesn't do but a lot of other languages do

[18:47] <masak> Perl 6 is very CLOS-y in that it prefers multisubs for that

[18:48] *** sotona joined
[18:48] *** p6bannerbot sets mode: +v sotona

[18:49] <epsilonphase> I don't mind that, but it does throw a lot of established OO techniques through a hoop

[18:50] <masak> I think I was slightly swayed by http://lambda-the-ultimate.org/node/5509 which is a good read

[18:52] <masak> epsilonphase: anyway, skipping ahead: the unwritten parts of that guide have sections like "The Q hierarchy", "Quasi blocks", "Macros" -- I've now described up to here -- "Stateful macros", "Closures in macros", "Macros that parse", "Contextual macros", "Evaluating expressions", "Interacting with control flow", and "Parsers and slangs"

[18:53] <masak> so far I've enjoyed fleshing out the first part of the guide, the language/user part

[18:53] <masak> I think I'm going to enjoy just as much fleshing out the second part, the macros/parsers part

[18:56] *** pmurias joined
[18:56] <epsilonphase> Macro closures sound like a nifty feature, though a little thought and I suddenly wonder whether or not compile time object orientation makes any sense at all.

[18:56] *** p6bannerbot sets mode: +v pmurias

[18:57] *** lgtaube left
[19:00] <masak> I think the most powerful example of a macro closure to date is https://github.com/masak/007/issues/176#issuecomment-240849038

[19:01] <masak> that `op.identifier` there finds the `infix:<+>` (or whatever) that was the identifier behind the `+` parsed out of a `[+]`

[19:01] <masak> and yes, it'd find the _right_ `infix:<+>`, the one that was defined in that scope where it parses

[19:05] <SmokeMachine> masak: about the `is parsed` how do I tell to the macro what should be used as each argument?

[19:05] *** eiro joined
[19:06] *** p6bannerbot sets mode: +v eiro

[19:07] <masak> SmokeMachine: I'm very vague on the details of that one. it needs to be implemented and tried out in practice.

[19:07] <masak> SmokeMachine: for a long time it was "magically turn each named match in the regex into an argument to the macro invocation"

[19:08] <masak> SmokeMachine: now I'm leaning towards "if the macro has an `is parsed`, then there's an extra `match` parameter", which is more boring and a bit less reachable, but also maybe more predictable

[19:08] <SmokeMachine> hum... thanks

[19:08] *** hami joined
[19:08] *** p6bannerbot sets mode: +v hami

[19:08] <epsilonphase> So... the idea is that macro Term:reduce introduces a multimacro(?) which is resolved at compile time specifically for static invocations where the arguments are fixed in advance, then recursively applies the macro to each argument, turning [+] 1 2 3 4 into 1+2+3+4?

[19:09] <masak> there's also a bit of a design hole (in 007) where the actions are in Perl 6.

[19:09] <masak> epsilonphase: modulo syntax, yes.

[19:09] <timotimo> masak: have you ever tried some of the microbenchmarks we sometimes pass around for perl6? do you know if you reach nqp levels of speed with a little care?

[19:09] <masak> epsilonphase: in 007, it'd be spelled `[+](1, 2, 3, 4)`; the macro comes across as a term with a value that's a function

[19:09] <eiro> ok people: i have the give away from the french consulate of edimburgh. i'll be home tomorrow :)

[19:10] <masak> timotimo: not nearly reaching any kinds of speed. 007 is dog slow :)

[19:10] <masak> timotimo: heh, I/we are still *interpreting* the AST! o.O

[19:10] <timotimo> oh, oops :)

[19:11] <eiro> (for the ones who don't know the story: i lost my id card at the airport after tpcig, stuck in scotland) 

[19:11] <eiro> (there are much worse places to be stuck in: scotland is great)

[19:12] <timotimo> still lots of trouble, whew :(

[19:12] <masak> eiro: hugs and good luck

[19:12] <eiro> masak, everything is fine now: i can go home tomorrow

[19:13] <eiro> masak, i lost my password but saw the /query. reply by mail

[19:14] <masak> oki

[19:14] <moritz> eeks, and glad to know it's turining out OK

[19:14] <moritz> hope you didn't miss too much at home

[19:15] <jmerelo> eiro: congrats!

[19:15] <masak> epsilonphase: the main takeaway is that the `+` inside the `[+]` is not just "the built-in infix:<+>", but it's whatever infix:<+> you have active when you're parsing that `[+]`. and that's a macro closure.

[19:17] <masak> I recently found how the Dylan Reference Manual describes all this, and I love it

[19:17] <masak> "This substitution preserves the meanings of names. In other words, each name inserted into the expansion from the macro call refers to the same binding that it referred to in the call, and each name inserted into the expansion from the macro definition refers to the same binding that it referred to in the definition."

[19:17] <masak> "the meanings of names" is a _much_ better term than anything I've used so far

[19:17] *** jmerelo left
[19:18] <masak> source: https://opendylan.org/books/drm/Macros_Syntax

[19:18] <epsilonphase> That's pretty neat. Dylan's on my list of languages I'd like to try out.

[19:18] <masak> yeah, same.

[19:18] *** maettu joined
[19:19] <masak> if I understand correctly, Dylan was first created with Lisp/sexpr syntax, but later it was decided that it should have more Algol-ish syntax

[19:19] *** p6bannerbot sets mode: +v maettu

[19:20] <epsilonphase> Ot

[19:20] <epsilonphase> It is lisp in pascal, from what I've heard.

[19:29] *** [particle] left
[19:30] *** [particle] joined
[19:30] *** gfldex joined
[19:31] *** p6bannerbot sets mode: +v [particle]

[19:31] *** p6bannerbot sets mode: +v gfldex

[19:34] *** jast left
[19:37] *** jast joined
[19:38] *** p6bannerbot sets mode: +v jast

[19:39] *** hami left
[19:43] *** lizmat joined
[19:44] *** p6bannerbot sets mode: +v lizmat

[19:46] *** kerframil joined
[19:46] *** p6bannerbot sets mode: +v kerframil

[19:47] *** kerframil left
[19:53] *** [Coke]_ joined
[19:53] *** [Coke]_ left
[19:53] *** [Coke]_ joined
[19:53] *** p6bannerbot sets mode: +v [Coke]_

[19:54] *** p6bannerbot sets mode: +v [Coke]_

[19:54] *** lizmat_ joined
[19:55] *** p6bannerbot sets mode: +v lizmat_

[19:55] *** m0ltar left
[19:55] *** a3r0 left
[19:55] *** [Coke] left
[19:55] *** lizmat left
[19:55] *** a3r0 joined
[19:55] *** Avi joined
[19:55] *** p6bannerbot sets mode: +v Avi

[19:56] *** m0ltar joined
[19:56] *** p6bannerbot sets mode: +v a3r0

[19:56] *** Avi is now known as Guest23430

[19:56] <Guest23430> help

[19:56] *** p6bannerbot sets mode: +v m0ltar

[19:57] <timotimo> hello avi

[19:57] <timotimo> what can we do for you today?

[19:57] <Guest23430> just checking out the irc

[19:57] *** benchable6 left
[19:57] *** releasable6 left
[19:57] *** bloatable6 left
[19:58] *** bloatable6 joined
[19:58] *** releasable6 joined
[19:58] *** benchable6 joined
[19:58] <timotimo> cool. we got lots of fun irc bots to play with, and many friendly people

[19:58] *** undersightable6 left
[19:58] <timotimo> m: say "he" ~ "l" x 2 ~ "o"

[19:58] <camelia> rakudo-moar f965e26aa: OUTPUT: «hello␤»

[19:58] <Guest23430> where is the baseline Rakudo star documentation stored?

[19:58] *** squashable6 left
[19:58] *** reportable6 left
[19:58] *** p6bannerbot sets mode: +v bloatable6

[19:58] *** p6bannerbot sets mode: +v releasable6

[19:59] *** p6bannerbot sets mode: +v benchable6

[19:59] <timotimo> https://github.com/perl6/doc/ - i think you mean this?

[20:00] <Guest23430> thank-you!

[20:00] <timotimo> no problem!

[20:00] <timotimo> every page on docs.perl6.org also has a direct link to the source file at the bottom i think

[20:03] *** [particle] left
[20:04] <masak> Guest23430: hello avi

[20:04] <masak> Guest23430: enjoy #perl6 :)

[20:05] *** [particle] joined
[20:06] *** p6bannerbot sets mode: +v [particle]

[20:07] <timotimo> dinnertime! TTYL

[20:08] *** mephinet left
[20:09] *** grumble left
[20:09] *** gurmble joined
[20:09] *** p6bannerbot sets mode: +v gurmble

[20:09] *** gurmble is now known as grumble

[20:10] *** mephinet joined
[20:10] *** p6bannerbot sets mode: +v mephinet

[20:22] *** [particle]1 joined
[20:23] *** p6bannerbot sets mode: +v [particle]1

[20:23] *** [particle] left
[20:25] *** lizmat joined
[20:25] *** p6bannerbot sets mode: +v lizmat

[20:26] * lizmat waves from Tyndrum

[20:26] <yoleaux> 15:03Z <brrt> lizmat: we are seeing travis CI problems on OS X, and I don't have OS X, so maybe you could have a look?

[20:26] <lizmat> (switched to 4G as the hotel Wifi is apparently over satellite and very latent)

[20:27] <lizmat> .tell brrt if this is about t/spec/S32-io/file-tests.t, then yes it fails on MacOS

[20:27] <yoleaux> lizmat: I'll pass your message to brrt.

[20:28] *** lizmat_ left
[20:28] *** kerframil joined
[20:28] *** p6bannerbot sets mode: +v kerframil

[20:30] *** molaf_ joined
[20:30] *** molaf left
[20:30] <lizmat> weekly: https://dev.to/jj/perl-is-perl-46cm

[20:30] <notable6> lizmat, Noted!

[20:30] *** p6bannerbot sets mode: +v molaf_

[20:31] *** fake_space_whale left
[20:35] <lizmat> weekly: https://dev.to/scimon/my-first-perl-conference-2j6d

[20:35] <notable6> lizmat, Noted!

[20:42] *** lgtaube joined
[20:43] *** p6bannerbot sets mode: +v lgtaube

[20:43] *** pmurias left
[20:55] *** reportable6 joined
[20:55] *** undersightable6 joined
[20:55] *** squashable6 joined
[20:56] *** p6bannerbot sets mode: +v reportable6

[20:56] *** p6bannerbot sets mode: +v undersightable6

[20:56] *** p6bannerbot sets mode: +v squashable6

[21:02] *** skids left
[21:03] *** MasterDuke joined
[21:03] *** p6bannerbot sets mode: +v MasterDuke

[21:04] *** MasterDuke left
[21:04] *** MasterDuke joined
[21:04] *** herbert.freenode.net sets mode: +v MasterDuke

[21:04] *** p6bannerbot sets mode: +v MasterDuke

[21:23] <lizmat> notable6: weekly

[21:23] <notable6> lizmat, 11 notes: https://gist.github.com/fcd6ead769ea84b4033116c240c09843

[21:30] *** itaipu left
[22:07] *** kerframil left
[22:14] *** koto joined
[22:15] *** koto left
[22:15] *** koto joined
[22:16] *** p6bannerbot sets mode: +v koto

[22:17] *** sena_kun left
[22:23] *** koto is now known as sena_kun

[22:38] *** Ven` joined
[22:39] *** p6bannerbot sets mode: +v Ven`

[22:46] *** sotona left
[22:47] *** sotona joined
[22:48] *** p6bannerbot sets mode: +v sotona

[22:51] *** uzl joined
[22:52] *** sotona left
[22:52] *** p6bannerbot sets mode: +v uzl

[22:54] <uzl> Hey, #perl6!

[22:55] <uzl> m: class Foo { method greet() { say self.^name(); } }; say Foo.new.greet();

[22:55] <camelia> rakudo-moar f965e26aa: OUTPUT: «Foo␤True␤»

[22:55] <uzl> m: class Foo { method greet() { say self.^name(); } }; Foo.new.greet();

[22:55] <camelia> rakudo-moar f965e26aa: OUTPUT: «Foo␤»

[22:56] <uzl> m: class Foo { method greet($obj:) { say $obj.^name(); } }; Foo.new.greet();

[22:56] <camelia> rakudo-moar f965e26aa: OUTPUT: «Foo␤»

[22:58] <uzl> Is using a named invocant syntactic sugar to just use self instead? What additional advantages does using a named invocant provide?

[22:58] <uzl> doc => https://docs.perl6.org/language/objects#Class_and_instance_methods

[22:58] *** Ven` left
[23:03] *** |oLa| left
[23:03] <uzl> m: class Foo { method greet(::?CLASS:D $me:) { say $me.^name(); } }; Foo.new.greet();

[23:03] <camelia> rakudo-moar f965e26aa: OUTPUT: «Foo␤»

[23:03] <uzl> m: class Foo { method greet(::?CLASS:D :) { say self.^name(); } }; Foo.new.greet();

[23:03] <camelia> rakudo-moar f965e26aa: OUTPUT: «Foo␤»

[23:05] *** lichtkind left
[23:08] <jnthn> uzl: The only reason I'd do it is to add a :D or :U constraint

[23:08] <jnthn> Oh, or if I wanted an rw invocant

[23:09] <vrurg> AFAIK, there is no way to have a tempdir which would be autoremoved upon existing a scope. Am I right?

[23:19] *** jast left
[23:22] <uzl> jnthn: Great! Yeah, I just wanted to make sure that I wasn't losing some functionality by not having it explicitly defined.

[23:22] <uzl> Thanks!

[23:22] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/08/20/2018-34-a-quick-one-from-tyndrum/

[23:22] <yoleaux> 21:45Z <brrt> lizmat: it's not, it's about the NQP build failure because git

[23:23] <b2gills> vrurg: You could add a LEAVE phaser that deletes the dir.

[23:23] *** jast joined
[23:23] *** p6bannerbot sets mode: +v jast

[23:24] <uzl> lizmat: Wow, that was fast! Feeling better from the cold? It was a cold, right?!

[23:24] <lizmat> yeah...  :-)

[23:24] <vrurg> b2gills: sure I can, but what if it's a couple of locations in the code? What if it's several temps?

[23:25] <vrurg> Would be solvable if its possible to install own LEAVE for a block.

[23:25] <uzl> :-) !

[23:27] *** sena_kun left
[23:27] <b2gills> It may be possible to auto-install a phaser with a macro, but macros are currently experimental.

[23:28] <jnthn> vrurg: Just write some sub with-temp-file(&code) { my $temp-file = ...; code($temp-file); LEAVE unlink $temp-file; } and then use it as with-temp-file -> $file { ... }

[23:30] <vrurg> jnthn: The solution so far, perhaps. Thanks!

[23:31] <timotimo> lizmat++ # weekly is good

[23:31] * lizmat goes off to try to find the (small) bed she's going to sleep in tonight

[23:34] *** lizmat left
[23:50] *** uzl left
[23:58] *** sotona joined
[23:58] *** p6bannerbot sets mode: +v sotona

