[00:01] *** mcmillhj left
[00:02] <timotimo> what i like to do is have a channel where i send a specific number of permits and when i want to do something that consumes a resource i receive from the channel and when that part of code is done it sends on the channel

[00:03] <timotimo> actually, it might be better to "await" the channel, because that can suspend the task back to the thread pool i assume

[00:05] <guifa> Hmm, I'll look into trying that.  Although ultimately all this is just trying out different features.  As long as my project runs, multi or single threaded, my dissertation advisor will be happy haha

[00:06] <Geth> ¬¶ doc/car-grant-midrat: f644d9dd66 | (Zoffix Znet)++ | doc/Language/numerics.pod6

[00:06] <Geth> ¬¶ doc/car-grant-midrat: Start writing Numerics guide

[00:06] <Geth> ¬¶ doc/car-grant-midrat: review: https://github.com/perl6/doc/commit/f644d9dd66

[00:07] *** mcmillhj joined
[00:12] *** mcmillhj left
[00:17] *** Herby_ joined
[00:18] <Herby_> how do I convert a number into a character? for example, getting the ascii value of 126

[00:19] <Herby_> my googlefu is failing

[00:20] *** kurahaupo_ joined
[00:20] *** vcv_ left
[00:22] <Herby_> "42".char

[00:22] <Herby_> m: 42.char

[00:22] <camelia> rakudo-moar 24a907747: OUTPUT: ¬´No such method 'char' for invocant of type 'Int'. Did you mean any of these?‚ê§    can‚ê§    chars‚ê§    chop‚ê§    chr‚ê§‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[00:23] *** kurahaupo left
[00:25] <guifa> .ord

[00:25] *** mcmillhj joined
[00:25] <Herby_> m: 42.ord

[00:25] <camelia> rakudo-moar 24a907747: ( no output )

[00:25] <Herby_> m: say 42.ord

[00:25] <camelia> rakudo-moar 24a907747: OUTPUT: ¬´52‚ê§¬ª

[00:26] <guifa> err, wait, wrong direction

[00:26] <guifa> chr is what you want

[00:27] <Herby_> m: say 42.chr

[00:27] <guifa> p6: say 42.chr

[00:27] <camelia> rakudo-moar 24a907747: OUTPUT: ¬´*‚ê§¬ª

[00:27] <camelia> rakudo-moar 24a907747: OUTPUT: ¬´*‚ê§¬ª

[00:27] <Herby_> thanks :)

[00:28] <Herby_> was reading this reddit thread on brute forcing hello world: https://www.reddit.com/r/ProgrammerHumor/comments/8fdyf0/i_heard_were_brute_forcing_hello_world_now/

[00:28] <Herby_> was going to try a p6 solution

[00:29] *** camelia left
[00:30] *** camelia joined
[00:30] *** mcmillhj left
[00:31] *** ChanServ sets mode: +v camelia

[00:32] *** w_richard_w joined
[00:33] *** guifa left
[00:34] *** kurahaupo_ left
[00:35] *** kurahaupo joined
[00:41] <Herby_> ta da! https://gist.github.com/sylints/0fd150aaa7689279d83a30c85f8f56e5

[00:44] *** thowe joined
[00:44] <thowe> Hi, Perl6.  Tell me things that will make me happy.

[00:44] <MasterDuke> Herby_: fwiw, rakudo doesn't lift the @target_array.elems out of the loop, so it's being called for every iteration. elems is pretty fast, so it frequently doesn't matter, but good to know

[00:44] <Herby_> thowe: I just brute-forced hello world

[00:44] <Herby_> MasterDuke: I didn't know that.  Thanks!

[00:45] <thowe> OK, cool.  I didn't know Hello World required much in the way of force, but you do you.

[00:45] *** mcmillhj joined
[00:45] <Herby_> MasterDuke: would it be overly complicated to somehow multi-thread it? so one thread starts at the beginning, the other thread starts at the end, and they meet in the middle?

[00:45] <Herby_> maybe threading isn't the right term. those concepts are pretty foreign to me

[00:46] *** kurahaupo left
[00:46] *** kurahaupo joined
[00:48] <Voldenet> afair not many interpreters/compilers optimize that case when you call .length, .elems, .count or similar, because they assume mutability of the collection

[00:48] <MasterDuke> you'd have to be careful since it (generally) isn't safe to write to an array from multiple threads, but yeah, you could do that

[00:50] *** mcmillhj left
[00:50] <MasterDuke> Voldenet: true. however, i don't think rakudo lifts any sort of sub/method call out

[00:53] <MasterDuke> but i think it's just that the optimization hasn't been implemented yet, not that the language precludes it

[00:59] *** kurahaupo left
[00:59] *** kurahaupo joined
[01:02] <Voldenet> huh, I've tried my luck in implementing bruteforce hello world

[01:03] <Voldenet> but it doesn't work

[01:03] <Voldenet> my @a = "Hello world".comb; my $b = @a.elems; loop { my @c = (^$b).map({ "Helowrd ".comb.roll }); @c.join("").print; sleep(.001); "\r".print; return if @c eq @a }

[01:03] <Voldenet> I'm not sure why

[01:03] <Voldenet> ;>

[01:03] <Voldenet> oh, I should've put the `print "\r"` after return

[01:05] <Herby_> first glance i didnt understand your Helowrd :)

[01:05] *** mcmillhj joined
[01:05] <Voldenet> my @a = "Hello world".comb; my $b = @a.elems; loop { my @c = (^$b).map({ "Helowrd ".comb.roll }); @c.join("").print; last if @c eq @a; "\r".print }

[01:05] <Voldenet> now it works*

[01:06] <Voldenet> *if your computer is lucky

[01:06] <Herby_> m: my @a = "Hello world".comb; my $b = @a.elems; loop { my @c = (^$b).map({ "Helowrd ".comb.roll }); @c.join("").print; last if @c eq @a; "\r".print }

[01:06] <Voldenet> I guess the bot isn't too lucky. ;D

[01:06] <camelia> rakudo-moar 24a907747: OUTPUT: ¬´(timeout)Hw  w wHe w

[01:06] <Herby_> camelia isnt feeling well today

[01:06] *** AlexDaniel left
[01:08] <Voldenet> I could've just given him the 32..126 chrs, but it would probably take ages

[01:08] <Herby_> your code is still chugging along on my computer :)

[01:09] *** markong left
[01:09] *** kurahaupo left
[01:10] *** mcmillhj left
[01:10] *** kurahaupo joined
[01:10] <Voldenet> theoretically this should take forever

[01:10] <Voldenet> ;D

[01:17] <Voldenet> my @a = "Hello world".comb.Array; my $b = @a.elems; my @al = @a.unique.Array; my @c = @a.map({""}); loop { @c .= map({ @al.roll }); @c.join("").print; last if @c eq @a; "\r".print }

[01:17] <Voldenet> this should run more ops/sec

[01:17] <Voldenet> and it would probably be even faster if I just dropped the map

[01:17] <Herby_> can you work some parallel/async/concurrency magic on it?

[01:18] <Voldenet> Hm, I am not sure if it's worth it

[01:21] <timotimo> you mean just put .race in one place and suddenly it's super fast? ;)

[01:21] <Herby_> timotimo: exactly!

[01:23] *** kurahaupo left
[01:23] *** mcmillhj joined
[01:23] *** kurahaupo joined
[01:27] <Voldenet> huh...

[01:28] <Voldenet> there's a performance difference between "for ^$b { ... }" and "... for ^$b"

[01:28] *** mcmillhj left
[01:28] <Voldenet> http://ix.io/18Uh

[01:28] <Voldenet> The sample code when I can benchmark it

[01:29] <timotimo> right, one has a lexical scope of its own and that is harder to optimize

[01:30] <Voldenet> meh, I guess it depends on the state of the cpu

[01:30] <Voldenet> it's equally fast now

[01:35] *** kurahaupo left
[01:36] *** kurahaupo joined
[01:39] *** mcmillhj joined
[01:42] *** FROGGS_ joined
[01:45] *** mcmillhj left
[01:46] *** FROGGS left
[01:46] *** ilbot3 left
[01:50] *** zachk left
[01:50] *** kurahaupo left
[01:51] *** kurahaupo joined
[01:56] *** ilbot3 joined
[01:56] *** ChanServ sets mode: +v ilbot3

[01:59] *** mcmillhj joined
[02:04] *** mcmillhj left
[02:05] *** kurahaupo left
[02:06] *** kurahaupo joined
[02:07] *** mcmillhj joined
[02:07] *** spacedbat joined
[02:08] <spacedbat> I'm writing a perl6 repl mode for emacs, and I'd like it to print a version banner when it starts up

[02:09] <spacedbat> currently it just prints "To exit type 'exit' or '^D'"

[02:09] *** mcmillhj_ joined
[02:09] *** mcmillhj_ left
[02:09] *** mcmillhj_ joined
[02:10] <timotimo> if you want you can start up the perl6 with -MMyReplStartupStuff

[02:11] <spacedbat> that leads to my question - how do I get the version, build and other parameters that perl5 has in the Config module?

[02:11] <timotimo> you mean perl6?

[02:11] <spacedbat> well, I know how to get them in perl5

[02:11] <timotimo> oh

[02:11] <spacedbat> not in perl6

[02:11] <timotimo> i only read half the sentence

[02:12] <timotimo> m: say $*PERL; say $*VM

[02:12] <camelia> rakudo-moar 24a907747: OUTPUT: ¬´Perl 6 (6.c)‚ê§moar (2018.04.34.g.25.f.165.ad.7)‚ê§¬ª

[02:12] <timotimo> m: say $*PERL.perl; say $*VM.perl

[02:12] <camelia> rakudo-moar 24a907747: OUTPUT: ¬´Perl.new(compiler => Compiler.new(id => "FF60E53B83E216DE11280A60669EBE56B93D633B", release => "", codename => "", name => "rakudo", auth => "The Perl Foundation", version => v2018.04.21.g.24.a.907747, signature => Blob, desc => Str), name => "Perl 6"‚Ä¶¬ª

[02:12] <spacedbat> sweet, that'll do the trick

[02:14] <spacedbat> thanks

[02:14] <timotimo> yw

[02:14] *** mcmillhj_ left
[02:16] *** kurahaupo left
[02:16] *** kurahaupo joined
[02:22] <spacedbat> VM.version

[02:22] <spacedbat> hah wrong window

[02:23] *** mcmillhj_ joined
[02:26] *** kurahaupo left
[02:27] *** kurahaupo joined
[02:28] *** mcmillhj_ left
[02:34] *** mcmillhj left
[02:37] *** mcmillhj joined
[02:37] *** kurahaupo left
[02:37] *** kurahaupo joined
[02:41] *** mcmillhj left
[02:47] *** wamba joined
[02:47] *** mcmillhj joined
[02:49] *** kurahaupo left
[02:49] *** kurahaupo joined
[02:52] *** mcmillhj left
[03:01] *** kurahaupo left
[03:01] *** kurahaupo joined
[03:01] *** mcmillhj joined
[03:06] *** mcmillhj left
[03:13] *** kurahaupo left
[03:14] *** kurahaupo joined
[03:16] *** eliasr left
[03:18] *** kurahaupo left
[03:18] *** mcmillhj joined
[03:21] *** stan7 left
[03:23] *** mcmillhj left
[03:27] *** athenot joined
[03:29] *** Tison joined
[03:30] *** athenot_ joined
[03:32] *** athenot left
[03:32] *** Herby__ joined
[03:33] <spacedbat> my next question: is there a way to run some code supplied on the command line, say via the -e flag, and lastly evaluate an expression to start the REPL?

[03:38] *** mcmillhj joined
[03:39] *** Zoffix joined
[03:40] <spacedbat> any ideas how to start the repl from within a perl6 program, as though perl6 was run without arguments?

[03:41] <Zoffix> Kinda, but it involves using unsupported code

[03:41] <spacedbat> ah - what I'm aiming to do is print a banner when my emacs perl6 repl starts

[03:42] <Zoffix> perl6 -e 'say "Look, ma! A banner!\n\n"; use nqp; nqp::getcomp("perl6").interactive'

[03:42] <spacedbat> timotimo suggested using -M but that would involve creating a file which complicates things a bit - ideally I'd be able to supply the banner as a -e one liner and go on to the repl

[03:42] <spacedbat> ok, and nqp::getcomp is unsupported/likely to change?

[03:43] <Zoffix> It is unsupported. It might change, dunno

[03:43] *** mcmillhj left
[03:43] <spacedbat> right... I've read some of your stuff online, I want to thank you for your works Zoffix 

[03:44] <Zoffix> :)

[03:46] <spacedbat> ok that works a treat - I might support customizing the initialization of the repl so if the needed incantation changes it will be easy for users to adapt

[03:47] <Zoffix> spacedbat: or maybe this works too: perl6 -e 'say "A banner\n"; run $*EXECUTABLE'

[03:47] <Zoffix> a perl-within-perl

[03:47] <Zoffix> more exactly:   perl6 -e 'say "A banner\n"; my $ = run $*EXECUTABLE'

[03:48] <Zoffix> (the second version doesn't sink the Proc so if someone types exit(42) in REPL there's no "The spawned process exited unsuccessfully" message

[03:48] <Zoffix> )

[03:52] *** mcmillhj joined
[03:53] <spacedbat> right, I was doing the $*EXECUTABLE trick before but to get the banner by passing it -v

[03:53] <spacedbat> however the banner then appeared later than I wanted it to

[03:54] <spacedbat> thanks for the tip

[03:54] <spacedbat> does perl6 have an equivalent of exec (replace current process?)

[03:54] <Zoffix> nope

[03:55] *** mcmillhj_ joined
[03:55] <spacedbat> maybe there's a posix lib, or I guess I could just nativecall it

[03:55] <Zoffix> As for appearing later. Hmm, maybe try setting $*OUT.out-buffer: False; before printing the banner. If you're not running with a tty STDOUT, it'll be buffered. 

[03:56] <Zoffix> "by passing it -v" what does that mean?

[03:56] <spacedbat> by later I mean, it printed To exit type 'exit' or '^D' first

[03:56] <spacedbat> then the banner

[03:57] <spacedbat> I was doing this first thing after the repl started: say run($*EXECUTABLE.Str, '-v', :out).out.slurp-rest

[03:58] <spacedbat> I'm an old hand at perl5 but a bit rusty, much less familiar with perl6

[03:58] *** wamba left
[03:58] <Zoffix> Seems to print fine when you pass the code in -e https://gist.github.com/zoffixznet/665f492ed8d8eac8da546847bc9fa47d

[03:58] <Zoffix> There's also a switch to have a silent repl

[03:59] <spacedbat> yes I noticed that, but I want this to be interactive

[03:59] <spacedbat> I like the run $*EXECUTABLE trick, but I'd rather not spawn an extra process that lingers

[04:00] *** mcmillhj_ left
[04:00] <spacedbat> there's a few things for me to try now, cheers

[04:00] <Kaiepi> node has a repl module to allow people to do this

[04:02] <spacedbat> I noticed there is a REPL trait - seen a gist where someone made a custom repl

[04:04] <Zoffix> That might've been mine from awhile back when we had to workaround a bug that made it into the release

[04:04] <spacedbat> this was it: https://gist.github.com/regnarg/3b98a0b5f3348de8886bacc1bb0da3ff

[04:05] *** mcmillhj left
[04:05] <Zoffix> Ah

[04:05] <Zoffix> Well, it's using the same nqp::getcomp('perl6'); I showed above

[04:05] <spacedbat> yes

[04:06] <spacedbat> I don't need all that extra stuff, would like this to be vanilla perl6 repl with a banner to start with

[04:06] <spacedbat> I'm going to contribute it to the perl6-mode for emacs

[04:10] *** mcmillhj joined
[04:15] *** mcmillhj left
[04:22] *** mcmillhj joined
[04:23] <Herby__> are there any tutorials floating about on the "Whatever" operator?

[04:23] <Herby__> other than the official docs

[04:24] <Zoffix> Haven't read it, but there's this article: https://perl6advent.wordpress.com/2017/12/11/all-the-stars-of-perl-6/

[04:24] *** khw left
[04:25] <Herby__> great, thanks

[04:27] *** mcmillhj left
[04:31] *** Tison left
[04:34] <Geth> ¬¶ doc: 9c0ca74e52 | ÈôàÊ¢ìÁ´ã++ (committed using GitHub Web editor) | META6.json

[04:34] <Geth> ¬¶ doc: Update META6.json

[04:34] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9c0ca74e52

[04:37] *** ParsonsNose left
[04:39] *** athenot_ left
[04:41] *** MasterDuke left
[04:41] *** mcmillhj joined
[04:46] *** mcmillhj left
[04:59] *** mcmillhj joined
[05:01] *** andrzejk_ joined
[05:04] *** mcmillhj left
[05:15] *** entonian joined
[05:15] *** skids left
[05:17] *** mcmillhj joined
[05:20] *** entonian left
[05:22] *** mcmillhj left
[05:29] *** mcmillhj joined
[05:33] *** mcmillhj left
[05:35] *** andrzejk_ left
[05:35] *** Herby__ left
[05:38] *** Util left
[05:38] *** Util joined
[05:40] *** sauvin joined
[05:45] *** irco left
[05:54] *** mcmillhj joined
[05:56] *** BenGoldberg left
[05:58] <Zoffix> How to get nqp::stringify op in HLL? It looks like it's added but it ain't available: https://github.com/perl6/nqp/blob/master/src/vm/moar/NQP/Ops.nqp#L95

[05:58] <Zoffix> nqp: say(nqp::stringify("42"))

[05:58] <camelia> nqp-moarvm: OUTPUT: ¬´42‚ê§¬ª

[05:58] <Zoffix> m: use nqp; say(nqp::stringify("42"))

[05:58] <camelia> rakudo-moar 24a907747: OUTPUT: ¬´===SORRY!===‚ê§No registered operation handler for 'stringify'‚ê§¬ª

[05:59] *** robertle left
[05:59] *** mcmillhj left
[06:01] *** AlexDaniel joined
[06:08] *** darutoko joined
[06:12] *** mcmillhj joined
[06:12] *** todd joined
[06:12] <todd> hi all.  A mystery.  This works: $ClipStr ~~ s:global/"\t"/"\n"/;     for split( "\n", $ClipStr ) -> $Line {

[06:13] <todd> but this does not: for split( "\t", $ClipStr ) -> $Line {

[06:13] <todd> or this for split( ord(9), $ClipStr ) -> $Line {

[06:14] <Zoffix> What happens when it doesn't work?

[06:16] *** mcmillhj left
[06:18] <todd> The whole $ClipStr gets transfered into only one $Line

[06:19] <Zoffix> m: my $ClipStr = "foo\tbar"; for split("\t", $ClipStr) -> $line { dd $line } 

[06:19] <camelia> rakudo-moar 24a907747: OUTPUT: ¬´Str $line = "foo"‚ê§Str $line = "bar"‚ê§¬ª

[06:19] <Zoffix> What's the actual code you're using?

[06:20] <todd> I forgot the name of that clipboard routing I can copy it onto the web

[06:21] <todd> paste something or other

[06:22] <Zoffix> I'm guessing you aren't actually using split the way you showed above and instead you stored the return value into a variable first which containerized it. Either bind it ($x := split) or decont it (for $x<>)

[06:22] <Zoffix> huggable: decont

[06:22] <huggable> Zoffix, Article on containers and decont: https://perl6advent.wordpress.com/2017/12/02/#theoneandonly

[06:24] *** AlexDaniel left
[06:24] <todd> remembered: vpaste.net   http://vpaste.net/VHsUU

[06:25] <Zoffix> todd: use "\t"

[06:25] <Zoffix> m: dd ord 9

[06:25] <camelia> rakudo-moar 24a907747: OUTPUT: ¬´57‚ê§¬ª

[06:25] <Zoffix> That just gives you the ord for character "9"

[06:26] <todd> \t did not work either

[06:26] <Zoffix> It's just "\t" without any ord(). Is that what you used?

[06:28] <todd> for split( "\t", $ClipStr ) -> $Line { do something }

[06:28] <todd> It did not split the string

[06:28] <Zoffix> Add `dd $ClipStr` before the loop.  What does it print?

[06:31] *** robertle joined
[06:31] <todd> no.  just one long line

[06:32] <Zoffix> But what is it?

[06:32] <Zoffix> What's the output?

[06:35] <todd> whatever I copyu into the secondary clipboard as one long line, unless I to a s:g/"\t"/|\n"/ on it change the tabs to new line and then split on new lines

[06:35] *** Zoffix left
[06:35] *** jmerelo joined
[06:35] <Geth> ¬¶ doc: 70eb782934 | ÈôàÊ¢ìÁ´ã++ (committed using GitHub Web editor) | META6.json

[06:35] <Geth> ¬¶ doc: Revert add IO::Socket::SSL

[06:35] <Geth> ¬¶ doc: 

[06:35] <Geth> ¬¶ doc: Misunderstand the error message from https://travis-ci.org/perl6/doc/jobs/372312669 .

[06:35] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/70eb782934

[06:36] <todd> I know it is a tab because of this proofing statement: for split( "", $ClipStr ) -> $Char { say "$Char = <", ord( $Char ), ">"  };

[06:42] <todd> oh, you know what.  I have othjer fish to fry.  My ReadSecondardClipboard is removing the new line between lines, so I am go to forget about this for the moment

[06:47] <Geth> ¬¶ perl6-lwp-simple: JJ self-assigned IO::Socket::SSL required for running tests https://github.com/perl6/perl6-lwp-simple/issues/9

[06:51] <Geth> ¬¶ perl6-lwp-simple: ed0fd62843 | (JJ Merelo)++ | 2 files

[06:51] <Geth> ¬¶ perl6-lwp-simple: Factors out URL and tests in first place refs #9

[06:51] <Geth> ¬¶ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/ed0fd62843

[06:51] <Geth> ¬¶ perl6-lwp-simple: 5e3f100440 | (JJ Merelo)++ | 3 files

[06:51] <Geth> ¬¶ perl6-lwp-simple: Refactos code with new URL refs #9

[06:51] <Geth> ¬¶ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/5e3f100440

[06:51] <Geth> ¬¶ perl6-lwp-simple: 28f07586f3 | (JJ Merelo)++ | META6.json

[06:51] <Geth> ¬¶ perl6-lwp-simple: Bumps up version closes #9

[06:52] <Geth> ¬¶ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/28f07586f3

[06:56] <jmerelo> I really don't know why we have to wait for 30 minutes for rakudo to compile in the "official" travis version.

[06:56] *** mcmillhj joined
[06:59] *** parv joined
[07:01] *** mcmillhj left
[07:04] *** domidumont joined
[07:04] <Geth> ¬¶ doc: 5b9515d2af | (JJ Merelo)++ | META6.json

[07:04] <Geth> ¬¶ doc: Bumps up dep version to avoid errors

[07:04] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/5b9515d2af

[07:09] <Geth> ¬¶ doc: 53583e5ffd | (JJ Merelo)++ | META6.json

[07:09] <Geth> ¬¶ doc: Fixes JSON error

[07:09] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/53583e5ffd

[07:11] *** domidumont left
[07:12] *** domidumont joined
[07:13] *** mcmillhj joined
[07:13] *** kurahaupo joined
[07:17] *** mcmillhj left
[07:21] *** sena_kun joined
[07:23] *** wamba joined
[07:24] *** mcmillhj joined
[07:28] *** todd left
[07:29] *** mcmillhj left
[07:36] <buggable> New CPAN upload: P5sleep-0.0.5.tar.gz by ELIZABETH http://modules.perl6.org/dist/P5sleep:cpan:ELIZABETH

[07:36] *** mcmillhj joined
[07:36] *** lizmat left
[07:38] *** lizmat joined
[07:40] *** Kaiepi left
[07:41] *** mcmillhj left
[07:43] *** troys left
[07:47] *** mcmillhj joined
[07:49] *** Kaiepi joined
[07:51] *** mcmillhj left
[07:51] *** Kaiepi left
[07:52] *** Kaiepi joined
[07:56] *** Guest43854 joined
[07:58] *** kurahaupo left
[08:01] <Geth> ¬¶ doc: f9ea5db422 | (JJ Merelo)++ | META6.json

[08:01] <Geth> ¬¶ doc: Bumps up Pod::To::HTML version too

[08:01] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/f9ea5db422

[08:01] <Geth> ¬¶ doc: 561cfd1afc | (JJ Merelo)++ | META6.json

[08:01] <Geth> ¬¶ doc: Fixes JSON error

[08:01] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/561cfd1afc

[08:03] *** domidumont left
[08:15] <AlexDaniel`> huggable: stars

[08:15] <huggable> AlexDaniel`, https://perl6advent.wordpress.com/2017/12/11/all-the-stars-of-perl-6/

[08:15] <AlexDaniel`> huggable: colons

[08:15] <huggable> AlexDaniel`, https://thelackthereof.org/Perl6_Colons

[08:17] *** espadrine_ left
[08:20] *** rindolf joined
[08:23] *** wamba left
[08:26] *** mcmillhj joined
[08:26] <Geth> ¬¶ doc: 5394d4248d | (JJ Merelo)++ | 4 files

[08:26] <Geth> ¬¶ doc: Eliminates duplicate reference for 'is defined'

[08:26] <Geth> ¬¶ doc: 

[08:26] <Geth> ¬¶ doc: And along with it, probably the "Trait" category of the search

[08:26] <Geth> ¬¶ doc: part. Closes #1514

[08:26] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/5394d4248d

[08:26] <Geth> ¬¶ doc: cd254920e7 | (JJ Merelo)++ | doc/Type/Mu.pod6

[08:26] <synopsebot> Link: https://doc.perl6.org/type/Mu

[08:26] <Geth> ¬¶ doc: Minor typographic changes but closes #1800

[08:26] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/cd254920e7

[08:27] <jmerelo> Thank to Zoffix closing cascade yesterday mainly, the number of open issues is below 270 for the first time since I remember... https://github.com/perl6/doc/issues

[08:27] <jmerelo> Do enjoy the moment for an instant before I insert another issue and crank it back to 270

[08:30] <lizmat> jmerelo: on that thought: I just found out that we don't document which methods the Positional and Associative roles are providing

[08:30] <jmerelo> lizmat: well, issue that. All moments of joy are ephemeral

[08:31] *** mcmillhj left
[08:31] <lizmat> hehe... will do

[08:32] *** robertle left
[08:35] *** andrzejk_ joined
[08:40] *** mcmillhj joined
[08:42] *** Todd joined
[08:43] <Todd> Is there a way to remove the last character with the subsitute command s/ ?  A replacement for    $Clipboard = chop( $Clipboard );

[08:46] *** mcmillhj left
[08:46] <jmerelo> Todd: does it have to be with s/?

[08:47] <Todd> No.  I wanted to put in my read me files as how to do it both ways

[08:47] <Todd> chop does word fine

[08:47] <Todd> work

[08:48] <jmerelo> p6: say "last character is out √æ".chop

[08:48] <camelia> rakudo-moar 24a907747: OUTPUT: ¬´last character is out ‚ê§¬ª

[08:48] <jmerelo> Todd: Can you please post it to to Stackoverflow?

[08:48] <Todd> Stackoverflow?

[08:50] <Todd> `√æ".chop` is still chop.  I am looking for a   perl6 -e 'my $x="a b c d "; $x ~~ s///; say "<$x>";'

[08:51] <jmerelo> Todd: yep, I always ask people to also post the question to StackOverflow so that it can be searched afterwards, and also get more answers.

[08:52] <jmerelo> p6: my $x="a b c d "; $x ~~ s///; say "<$x>";

[08:52] <camelia> rakudo-moar 24a907747: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Null regex not allowed‚ê§at <tmp>:1‚ê§------> 3my $x="a b c d "; $x ~~ s/7‚èè5//; say "<$x>";‚ê§¬ª

[08:52] <jmerelo> p6: my $x="a b c d "; $x ~~ s/ $//; say "<$x>";

[08:52] <camelia> rakudo-moar 24a907747: OUTPUT: ¬´<a b c d >‚ê§¬ª

[08:52] <jmerelo> p6: my $x="a b c d "; $x ~~ s/\ $//; say "<$x>";

[08:52] <camelia> rakudo-moar 24a907747: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§No unspace allowed in regex; if you meant to match the literal character, please enclose in single quotes (' ') or use a backslashed form like \x20‚ê§at <tmp>:1‚ê§------> 3my $x="a b c d "; $x ~~ s/\ ‚Ä¶¬ª

[08:52] <jmerelo> p6: my $x="a b c d "; $x ~~ s/' '$//; say "<$x>";

[08:52] <camelia> rakudo-moar 24a907747: OUTPUT: ¬´<a b c d>‚ê§¬ª

[08:52] *** wamba joined
[08:53] <Todd> $ perl6 -e 'my $x="a b c d "; $x ~~ s/" "$//; say "<$x>";' <a b c d>

[08:53] <Todd> Perfect!  Thank you!

[08:53] <Todd> What does the $ do?

[08:55] <jmerelo>  Todd $ matches the end of the string

[08:55] *** mcmillhj joined
[08:56] <jmerelo> Todd: now please if you have a minute post it too in StackOverflow. The logs of this IRC channel are not search-engine friendly for people looking for answers. Thanks!

[08:58] <Geth> ¬¶ doc: b8c697d31e | (Elizabeth Mattijsen)++ | doc/Language/5to6-perlfunc.pod6

[08:58] <Geth> ¬¶ doc: Added some more P5 -> P6 wisdom

[08:58] <Geth> ¬¶ doc: 

[08:58] <Geth> ¬¶ doc: - got to sleep

[08:58] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/b8c697d31e

[08:58] <Geth> ¬¶ doc: d779c58b7c | (Elizabeth Mattijsen)++ | doc/Language/5to6-perlfunc.pod6

[08:58] <Geth> ¬¶ doc: Some more Perl 5 -> 6 tweaks

[08:58] <synopsebot> Link: https://doc.perl6.org/language/5to6-perlfunc

[08:58] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/d779c58b7c

[08:58] <Todd> I absolutely adore the folks over on [email@hidden.address]  Is that list searchable?

[08:58] <Geth> ¬¶ doc: 5a656e4f9c | (JJ Merelo)++ | doc/Language/operators.pod6

[08:58] <Geth> ¬¶ doc: Adds ‚Åá ‚Äº to the index

[08:58] <Geth> ¬¶ doc: 

[08:58] <Geth> ¬¶ doc: And rephrases a bit the doc. Basically I was checking to close #1851,

[08:58] <Geth> ¬¶ doc: and I don't like to close without an actual change. So...

[08:58] <synopsebot> Link: https://doc.perl6.org/language/operators

[08:59] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/5a656e4f9c

[08:59] <jmerelo> Todd: yep. It's a bit better than these logs for searching, but still worse than StackOverflow. Moreover, *everyone* searches SO first.

[09:00] *** ufobat joined
[09:00] *** mcmillhj left
[09:00] <Todd> Actually it is searchable.  I just found a bunch of stuff.  I will put my notes over on [email@hidden.address]  Any reason to duplicate on Stack Overflow?

[09:03] *** mcmillhj joined
[09:03] <ufobat> lizmat, i've started with sereal :)

[09:03] <lizmat> ++ufobat  # way cool!

[09:03] <lizmat> lemme know when you have something in a repo  :)

[09:05] <ufobat> it's on github already. but i just started like 45min ago

[09:05] <ufobat> https://github.com/ufobat/p6-Sereal

[09:07] *** mcmillhj left
[09:07] <lizmat> ufobat: cool, am about to be afk for most of the rest of the day, so will look at it later  :-)

[09:09] <Todd> Sorry on the Stackoverflow.  They are too gosh awful nosey.  I am not giving them my personal information

[09:10] *** TEttinger left
[09:12] <Todd> Got around the nosey questions.  I will see if I can post

[09:16] <buggable> New CPAN upload: P5built-ins-0.0.10.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5built-ins-0.0.10.tar.gz

[09:16] *** FROGGS_ is now known as FROGGS

[09:17] <Todd> https://stackoverflow.com/questions/50074865/tip-perl6-how-to-remove-the-last-character-in-a-string

[09:17] <Todd> I posted a lot more over on the mailing list

[09:17] *** Guest43854 left
[09:19] <jmerelo> Todd: Thanks!

[09:21] <jmerelo> Todd: you can send those too, once you've signed. A bit of advice: post just the question, and leave some time for people to answer it. You can then answer it yourself if you want, and accept it. If you post question & answer it could be flagged as a not-question

[09:23] *** pmurias joined
[09:28] <Todd> I will probably get flagged

[09:30] <jmerelo> Todd: you can still edit it. Say something like "This is the answer that was suggested. Is there some easier way of doing that?"

[09:31] *** andrzejk_ left
[09:33] *** w_richard_w left
[09:35] <lizmat> commute&

[09:35] *** lizmat left
[09:39] <Todd> I did as you suggest

[09:45] *** domidumont joined
[09:45] <jmerelo> p6: my $x="a b c d "; say $x.chop

[09:45] <camelia> rakudo-moar 24a907747: OUTPUT: ¬´a b c d‚ê§¬ª

[09:46] <jmerelo> Todd: done a bit of editing. SO people are rather picky with questions. 

[09:47] <jmerelo> Todd: please note also that chop in Perl 5 returns the character that has been removed; it returns the string with the character removed in Perl 6. 

[09:47] *** lizmat joined
[09:49] <Todd> interesting.  I still have a few things in perl 5, but am transitioining over.

[09:49] <Todd> Calling it a night

[09:49] *** Todd left
[09:59] *** eliasr joined
[10:05] *** andrzejk_ joined
[10:06] <buggable> New CPAN upload: P5shift-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5shift-0.0.1.tar.gz

[10:11] *** andrzejk_ left
[10:15] <Geth> ¬¶ doc: 4818aa3e7e | (Elizabeth Mattijsen)++ | doc/Language/5to6-perlfunc.pod6

[10:15] <Geth> ¬¶ doc: Explain P5 -> P6 difference for shift/unshift better

[10:15] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/4818aa3e7e

[10:15] <synopsebot> Link: https://doc.perl6.org/language/5to6-perlfunc

[10:18] *** wamba left
[10:22] *** espadrine_ joined
[10:23] *** espadrine_ is now known as espadrine

[10:24] *** markong joined
[10:28] <jmerelo> Problems with compile-time exceptions, in StackOverflow https://stackoverflow.com/questions/50075490/printing-compile-time-exception-types

[10:34] <lizmat> masak: ^^^

[10:39] <timotimo> committable6: releases use experimental :macros; macro a { 'foo' }; say a;

[10:39] <committable6> timotimo, https://gist.github.com/2779b46a772f8d78b0d695fa8488399a

[10:40] <timotimo> AlexDaniel`: oh no, whateverable is very unhappy!

[10:41] <timotimo> AlexDaniel`: maybe the filesystem had an oops?

[10:41] *** Guest18 joined
[10:43] <timotimo> or just filled up

[10:45] *** parv left
[10:51] *** Guest18 left
[10:53] *** andrzejk_ joined
[10:53] *** andrzejk_ left
[10:53] *** andrzej__ joined
[10:55] *** andrzejk_ joined
[10:55] *** andrzej__ left
[10:55] *** Guest18 joined
[10:56] <buggable> New CPAN upload: P5shift-0.0.2.tar.gz by ELIZABETH http://modules.perl6.org/dist/P5shift:cpan:ELIZABETH

[10:57] *** andrzej__ joined
[10:57] *** andrzejk_ left
[10:58] *** lasse_ joined
[10:58] *** lizmat left
[11:02] *** andrzej__ left
[11:06] <buggable> New CPAN upload: P5push-0.0.2.tar.gz by ELIZABETH http://modules.perl6.org/dist/P5push:cpan:ELIZABETH

[11:07] <timotimo> huh, i can "touch testfile" just fine

[11:15] *** jmerelo left
[11:40] *** stmuk_ joined
[11:42] *** stmuk left
[11:45] <AlexDaniel`> timotimo: the filesystem is fine actually

[11:45] <AlexDaniel`> timotimo: it is intentionally read-only

[11:46] <AlexDaniel`> c: releases chdir ‚Äòsandbox‚Äô; run <perl6 -e>, ÔΩ¢use experimental :macros; macro a { 'foo' }; say a;ÔΩ£

[11:46] <AlexDaniel`> let's try this‚Ä¶

[11:46] <AlexDaniel`> it should start in sandbox/ by default, but atm it doesn't

[11:46] <committable6> AlexDaniel`, https://gist.github.com/950390469d33c76a49a2c9b8fe7aea0c

[11:47] <AlexDaniel`> what the‚Ä¶

[11:47] <AlexDaniel`> 6c: say 42

[11:47] <committable6> AlexDaniel`, ¬¶6c (29 commits): ¬´42‚ê§¬ª

[11:47] <AlexDaniel`> so why is it even trying to write there

[11:48] <AlexDaniel`> c: releases chdir ‚Äòsandbox‚Äô; run <perl6 -e>, ÔΩ¢use experimental :macros; macro a { 'foo' }; say a;ÔΩ£

[11:49] <committable6> AlexDaniel`, https://gist.github.com/354e79e4a4f49aec4b2f7c6fae151e7a

[11:50] <AlexDaniel`> c: releases run :cwd(‚Äòsandbox/‚Äô), <perl6 -e>, ÔΩ¢use experimental :macros; macro a { 'foo' }; say a;ÔΩ£

[11:50] <committable6> AlexDaniel`, https://gist.github.com/30ca826007ae9c7e0f1766a2b219f9e9

[11:51] <AlexDaniel`> timotimo: I don't get it. I don't know why it attempts to write there

[11:53] <AlexDaniel`> c: releases run :cwd(‚Äòsandbox/‚Äô), <perl6 -e>, ÔΩ¢say 42ÔΩ£

[11:54] <committable6> AlexDaniel`, ¬¶releases (29 commits): ¬´42‚ê§¬ª

[12:04] *** titsuki joined
[12:08] *** lizmat joined
[12:09] *** kaare_ left
[12:22] <timotimo> perhaps stracing will help, but it won't show you what part of the program is causing a given system call, just in what order they happen

[12:36] <Geth> ¬¶ doc: 7bc35a6f3e | (Jan-Olof Hendig)++ | doc/Type/List.pod6

[12:36] <Geth> ¬¶ doc: Fixed incorrect example output

[12:36] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/7bc35a6f3e

[12:36] <synopsebot> Link: https://doc.perl6.org/type/List

[12:37] <sena_kun> m: say [-] 10;

[12:37] <camelia> rakudo-moar 0d216befb: OUTPUT: ¬´10‚ê§¬ª

[12:38] <sena_kun> huh, is that a recent change? 2018.03 gives me `-10`.

[12:38] *** timotimo left
[12:38] <dogbert17> sena_kun: https://github.com/rakudo/rakudo/commit/edbbc442629a8504d4ae380dcc54a4a38c647171

[12:38] *** timotimo joined
[12:39] <sena_kun> dogbert17, thanks!

[12:41] *** noganex left
[12:43] *** DataLinkDroid left
[12:44] *** vike left
[12:46] *** vike joined
[12:47] <El_Che> lo

[13:09] *** MasterDuke joined
[13:15] <Geth> ¬¶ doc: 80c1bc1ea5 | (Luca Ferrari)++ | doc/Type/IO/Socket/INET.pod6

[13:15] <Geth> ¬¶ doc: C<> on host name and port.

[13:15] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/80c1bc1ea5

[13:15] <Geth> ¬¶ doc: cf6d90476d | (Luca Ferrari)++ | doc/Type/IO/Socket/INET.pod6

[13:15] <Geth> ¬¶ doc: Align server socket params to avoid long lines.

[13:15] <synopsebot> Link: https://doc.perl6.org/type/IO::Socket::INET

[13:15] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/cf6d90476d

[13:15] <Geth> ¬¶ doc: 2d484ca0ce | (Luca Ferrari)++ | doc/Type/IO/Socket/INET.pod6

[13:15] <Geth> ¬¶ doc: Align parameters in socket client example, avoid long lines.

[13:15] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/2d484ca0ce

[13:16] *** andrzejk_ joined
[13:16] <buggable> New CPAN upload: P5push-0.0.3.tar.gz by ELIZABETH http://modules.perl6.org/dist/P5push:cpan:ELIZABETH

[13:16] *** andrzejk_ left
[13:16] <buggable> New CPAN upload: P5shift-0.0.3.tar.gz by ELIZABETH http://modules.perl6.org/dist/P5shift:cpan:ELIZABETH

[13:16] *** andrzejk_ joined
[13:18] *** wamba joined
[13:18] *** andrzejk_ left
[13:19] *** andrzejk_ joined
[13:23] *** andrzejk_ left
[13:24] *** Guest18 left
[13:27] *** domidumont left
[13:37] *** kurahaupo joined
[13:43] *** rindolf left
[13:44] *** rindolf joined
[13:53] <Geth> ¬¶ doc: 917aff0957 | cfa++ | doc/Language/5to6-perlfunc.pod6

[13:53] <Geth> ¬¶ doc: nbsp

[13:53] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/917aff0957

[13:53] <synopsebot> Link: https://doc.perl6.org/language/5to6-perlfunc

[14:00] <Geth> ¬¶ doc: 733175d7e2 | cfa++ | 2 files

[14:00] <Geth> ¬¶ doc: spelling

[14:00] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/733175d7e2

[14:10] *** noganex joined
[14:15] <donpdonp> c.pm6: use A::B::D; package A::B { class C is D {} }; d.pm6: package A::B { class D {}}

[14:15] <donpdonp> is there a way to say 'use D' in c.pm6, perhaps inside the package {}

[14:15] <donpdonp> to make the use line shorter...

[14:16] <donpdonp> ive tried a few things but havent found a way to use partial package paths...

[14:22] * El_Che is interested in the answer

[14:25] *** robertle joined
[14:29] *** comborico1611 joined
[14:30] <thowe> I seem to recall a module or method to do exactly that in Perl5, but don't remember it.  I've seen mst do it in code.

[14:31] <timotimo> use always refers to compunits

[14:31] <timotimo> i.e. "use FooBar" can give you a "BleepBloop" if that's what's in the file that has that name

[14:38] <El_Che> you'll loose namespacing that way

[14:39] <El_Che> you want to keep namespacing, you just want a short way to reference in the consuming class

[14:40] <timotimo> i'm not sure i understand

[14:43] <Herby_> o/

[14:43] <El_Che> timotimo: import graphics.*; Circle myCircle = new Circle();

[14:44] <timotimo> right

[14:45] <Geth> ¬¶ doc: cee043457e | cfa++ | doc/Language/5to6-perlfunc.pod6

[14:45] <Geth> ¬¶ doc: examples compilation

[14:45] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/cee043457e

[14:45] <synopsebot> Link: https://doc.perl6.org/language/5to6-perlfunc

[14:45] <El_Che> or in go, that has a flat namespace: import "github.com/nxadm/ldifdiff" ... output, err = ldifdiff.DiffFromFiles(params.Source, params.Target, params.IgnoreAttr)

[14:45] *** lizmat left
[14:47] *** lizmat joined
[14:56] *** khw joined
[14:58] *** Zoffix joined
[14:58] <Zoffix> nqp: use nqp; say(nqp::numify("42.42e0"))

[14:58] <camelia> nqp-moarvm: OUTPUT: ¬´42.42‚ê§¬ª

[14:58] <Zoffix> m: use nqp; say(nqp::numify("42.42e0"))

[14:58] <camelia> rakudo-moar 0d216befb: OUTPUT: ¬´===SORRY!===‚ê§No registered operation handler for 'numify'‚ê§¬ª

[14:58] <Zoffix> How can I enable that op in HLL?

[14:59] <AlexDaniel`> timotimo: oh, I  know

[14:59] <AlexDaniel`> Will fix once i'm back home

[15:00] <thowe> so, I almost hate to ask, but there seemed to be some debate recently...  Should I put "use v6.c;" at the top of my script?

[15:00] <timotimo> you can also put v6.d.PREVIEW if you're using "await" a bunch

[15:00] <timotimo> and you're okay with code migrating between threads

[15:01] <thowe> SInce I don't grok what you just said, I won't.

[15:05] <Zoffix> thowe: it depends on your needs. `use v6.c` says "I want language version 6.c". So when new language features come out‚Äîlike the stuff timotimo mentioned‚Äîyour program won't have them available. This may be what you want, since you wrote the program for that specific language version, but you may also wish to always use the latest language version (which is what lack of `use v...` would use). Some people

[15:05] <Zoffix> also put it in to get more helpful errors if you accidentally run your perl6 script with perl compiler, but IME I found little use in that advice.

[15:07] <Zoffix> Answer to my question: https://gist.github.com/zoffixznet/1dd32f55e3a47da77ef08e7b04bbd014

[15:07] <yoleaux> 15:06Z <pmurias> Zoffix: I'll look into it

[15:07] *** Zoffix left
[15:12] *** andrzejk_ joined
[15:13] *** lizmat left
[15:15] *** domidumont joined
[15:18] *** zakharyas joined
[15:20] *** zakharyas left
[15:21] *** zakharyas joined
[15:24] *** lasse_ left
[15:27] *** lizmat joined
[15:32] *** lizmat left
[15:32] *** andrzejk_ left
[15:38] *** Kaiepi left
[15:41] *** Kaiepi joined
[15:42] *** andrzej__ joined
[15:42] <ufobat> m: use Test; lives-ok { X::NYI.new.throw(feature => 'foo')}

[15:42] <camelia> rakudo-moar 0d216befb: OUTPUT: ¬´not ok 1 - ‚ê§# Failed test at <tmp> line 1‚ê§Use of uninitialized value of type Any in string context.‚ê§Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.‚ê§  in sub _diag at /home/camelia/rakudo-m-inst-1/shar‚Ä¶¬ª

[15:43] *** andrze___ joined
[15:43] <ufobat> m: use Test; lives-ok { X::NYI.new(feature => 'foo').new()}

[15:43] <camelia> rakudo-moar 0d216befb: OUTPUT: ¬´ok 1 - ‚ê§¬ª

[15:43] <ufobat> i know that in my first example it was wrong, but the error is strange, isnt it?

[15:44] <ufobat> m: use Test; lives-ok { X::NYI.new(feature => 'foo').throw()}

[15:44] <camelia> rakudo-moar 0d216befb: OUTPUT: ¬´not ok 1 - ‚ê§# Failed test at <tmp> line 1‚ê§# foo not yet implemented. Sorry.‚ê§¬ª

[15:45] <ufobat> m: X::NYI.new.throw(feature => 'foo')

[15:45] <camelia> rakudo-moar 0d216befb: OUTPUT: ¬´ not yet implemented. Sorry.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:45] *** andrz____ joined
[15:46] *** andrzej__ left
[15:47] *** andrze___ left
[15:50] *** AlexDaniel joined
[15:53] *** rouking joined
[15:54] <rouking> How do I pass a pair to a sub without it being interpreted as a named argument?

[15:54] <timotimo> either put quotes around the key, or put parethesis around the pair

[15:54] *** Zoffix joined
[15:54] *** andrz____ left
[15:55] <Zoffix> m: -> $x { dd $x }( :42foo.Pair } # another way

[15:55] <camelia> rakudo-moar 0d216befb: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> 3-> $x { dd $x }( :42foo.Pair 7‚èè5} # another way‚ê§¬ª

[15:55] <Zoffix> m: -> $x { dd $x }( :42foo.Pair ) # another way

[15:55] <camelia> rakudo-moar 0d216befb: OUTPUT: ¬´Pair $x = :foo(42)‚ê§¬ª

[15:55] *** andrzejk_ joined
[15:55] <Zoffix> ufobat: that's not an error, that's a warning

[15:56] <Zoffix> ufobat: the diagnostics of the failed test print the stringified exception, and since you never set the feature argument, it's stringifying an undefined value, resulting in a warning

[15:56] <rouking> thanks

[15:56] <ufobat> ah!

[15:58] <Zoffix> m: { dd @_ }( :42foo.Pair, (:70bar), "meows" => 2, 4 R=> "key", Pair.new("some-key", 42) )

[15:58] <camelia> rakudo-moar 0d216befb: OUTPUT: ¬´[:foo(42), :bar(70), :meows(2), :key(4), :some-key(42)]‚ê§¬ª

[15:58] <timotimo> so many ways

[15:58] <ufobat> i am not sure, but i'd say thats wrong to not handle the undefined value manually. because in the end the warning about the stringification is not helpful

[15:59] <Zoffix> ufobat: fix it: https://github.com/rakudo/rakudo/blob/master/src/core/Exception.pm6#L781-L785

[15:59] *** pilne left
[16:00] <Zoffix> just this even https://github.com/rakudo/rakudo/blob/master/src/core/Exception.pm6#L785

[16:00] *** andrzejk_ left
[16:00] <ufobat> what about has $.feature is required?

[16:00] <Zoffix> s/"$.feature not yet implemented. Sorry."/"{$.feature andthen "$_ not" orelse "Not"} yet implemented. Sorry."/

[16:01] * ufobat is going to dinner first ;-) 

[16:01] <ufobat> wine and g(r)eek food!

[16:01] <Zoffix> To me, makes more sense to make it optional, where the message doesn't mention any features if none were provided.

[16:01] *** committable6 left
[16:02] <ufobat> if you dont fix it i'll send a PR tomorrow or monday

[16:02] *** committable6 joined
[16:02] <AlexDaniel> c: releases chdir ‚Äòsandbox‚Äô; run <perl6 -e>, ÔΩ¢use experimental :macros; macro a { 'foo' }; say a;ÔΩ£

[16:02] <AlexDaniel> c: use experimental :macros; macro a { 'foo' }; say a;

[16:02] <AlexDaniel> c: releases use experimental :macros; macro a { 'foo' }; say a;

[16:03] <committable6> AlexDaniel, ¬¶use: ¬´Cannot find this revision (did you mean ‚Äúall‚Äù?)¬ª

[16:03] <committable6> AlexDaniel, https://gist.github.com/b85f9b6475d21ff14e4efec046f8ea03

[16:03] <committable6> AlexDaniel, ¬¶releases (29 commits): ¬´===SORRY!===‚ê§Too few positionals passed; expected 3 arguments but got 2‚ê§ ¬´exit code = 1¬ª¬ª

[16:03] *** bisectable6 left
[16:03] *** andrzejk_ joined
[16:03] *** bisectable6 joined
[16:04] <AlexDaniel> timotimo: ‚Üë there

[16:04] <AlexDaniel> fixed

[16:04] <AlexDaniel> thanks

[16:06] <Geth> ¬¶ whateverable: 92c5c28f40 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable.pm6

[16:06] <Geth> ¬¶ whateverable: Reset PERL6LIB when running snippets

[16:06] <Geth> ¬¶ whateverable: 

[16:06] <Geth> ¬¶ whateverable: Otherwise it attempts to write in read-only paths.

[16:06] <Geth> ¬¶ whateverable: review: https://github.com/perl6/whateverable/commit/92c5c28f40

[16:07] *** ufobat left
[16:08] *** andrzejk_ left
[16:10] *** jmerelo joined
[16:12] *** andrzejk_ joined
[16:12] <jmerelo> p6: say True ‚Åá "Yay" ‚Äº "Nay"

[16:12] <camelia> rakudo-moar 0d216befb: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Confused‚ê§at <tmp>:1‚ê§------> 3say True7‚èè5 ‚Åá "Yay" ‚Äº "Nay"‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚ê§        statement modif‚Ä¶¬ª

[16:12] <comborico1611> does "say subroutine_name" just return the last value of the sub?

[16:13] <timotimo> say always just returns True, but calling a sub will return the last value if there isn't a "return" statement or a return thing in the signature

[16:13] <Zoffix> jmerelo: those existed briefly, but were eventually reverted

[16:14] <jmerelo> Zoffix: I was stuck in that brief period, apparently.

[16:14] <comborico1611> Hmm.

[16:15] <AlexDaniel> https://github.com/rakudo/rakudo/pull/1029

[16:15] <AlexDaniel> c: ed971df say True ‚Åá "Yay" ‚Äº "Nay"

[16:15] <committable6> AlexDaniel, ¬¶ed971df: ¬´Yay‚ê§¬ª

[16:16] *** andrzejk_ left
[16:16] <Zoffix> comborico1611: I notice you frequently confuse "return" and "output"/"print". A "return" is the 'result' of the sub. It's some value you can store in a variable, pass to another sub, discard, or print. To "print" or "output" is to (often) display that value on the screen. So in your code `say subroutine_name` there are two sub calls (one is calling `subroutine_name` and one is calling `say`). The return value

[16:16] <Zoffix> of `subroutine_name` is passed to the call of `say`. The `say` call outputs/prints that value to "standard output". Then the `say` call also returns a value; its return value is always `True` and in your case you discard that return value.

[16:17] <comborico1611> I see.

[16:17] <comborico1611> Thanks!

[16:19] <Geth> ¬¶ doc: d5518b7283 | (JJ Merelo)++ | doc/Language/operators.pod6

[16:19] <Geth> ¬¶ doc: Changes indexing to conditional operator

[16:19] <Geth> ¬¶ doc: 

[16:19] <Geth> ¬¶ doc: And closes #1851 for the third time. This must have been like the most

[16:19] <Geth> ¬¶ doc: closed issue, ever.

[16:19] <synopsebot> Link: https://doc.perl6.org/language/operators

[16:19] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/d5518b7283

[16:26] *** andrzejk_ joined
[16:26] *** wamba left
[16:33] <jmerelo> Luckily, after the last change by Zoffix, htmlify is kinda faster. Not a great deal, but before you could go, prepare tea, bake the scones, and come back and still see htmlify.p6 printing dots

[16:35] *** andrzejk_ left
[16:35] *** wamba joined
[16:36] *** sauvin_ joined
[16:36] *** sauvin left
[16:37] <Geth> ¬¶ doc: 2adf40d13a | (JJ Merelo)++ | doc/Language/operators.pod6

[16:37] <Geth> ¬¶ doc: Changes again indexing of ??!! operator

[16:37] <Geth> ¬¶ doc: 

[16:37] <Geth> ¬¶ doc: It's now indexed as `infix`. This would be the 4th time we close #1851. Will this be the last one?

[16:37] <Geth> ¬¶ doc: Who knows...

[16:37] <synopsebot> Link: https://doc.perl6.org/language/operators

[16:37] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/2adf40d13a

[16:38] *** sauvin_ is now known as sauvin

[16:40] *** andrzejk_ joined
[16:44] *** andrzejk_ left
[16:50] <comborico1611> Zoffix: So what is going here? https://hastebin.com/eyomujorid.pl

[16:50] <comborico1611> say's return of 1 is it's output, not its return, correct?

[16:52] <timotimo> with-optional(1) should return 1 even if there's no say in front

[16:54] *** HaraldJoerg joined
[16:54] <Zoffix> comborico1611: https://gist.github.com/zoffixznet/f1f8057c58dc728d1597e877dd277a9f

[16:56] <jmerelo> comborico1611, Zoffix : you know what I'm gonna say, so...

[16:56] <Geth> ¬¶ doc: 9fc190d17b | (Luca Ferrari)++ | doc/Type/IO/Socket/INET.pod6

[16:56] <Geth> ¬¶ doc: Remove use v6.c from IO::Socket::INET examples.

[16:56] <Geth> ¬¶ doc: 

[16:56] <Geth> ¬¶ doc: Do we really need to include the version in such simple examples?

[16:56] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9fc190d17b

[16:56] <synopsebot> Link: https://doc.perl6.org/type/IO::Socket::INET

[16:56] <Zoffix> jmerelo: what?

[16:57] *** andrzejk_ joined
[16:57] <jmerelo> Zoffix: stackoverflow it! :-)

[16:58] <comborico1611> jmerelo: Ahh.  Good idea!  My first stackoverflow didn't go that well, so I'm reluctant to post more on there.

[16:58] <timotimo> that's a weird thing to stackoverflow

[16:58] <comborico1611> Zoffix: Let's do this again on stackoverflow.  I'll post link soon.

[16:59] <Zoffix> comborico1611: I don't use stackoverflow.

[16:59] <comborico1611> timotimo: Some guy was like, "this isn't a overflow question" or somethign benign like that.

[16:59] <comborico1611> Zoffix: I see.  Why?

[16:59] <jmerelo> comborico1611: yep, I know about that one. Tried to save it, but... usually, "this is slow" questions are not well received. 

[16:59] <comborico1611> (sorry if one of you guys is that guy. lol)

[17:00] <jmerelo> comborico1611: you have to make questions feel like questions. Like "is there some way to speed up this? I really need it for this and that"

[17:00] <jmerelo> Or "I want to run this interpreter real fast. Is there some way to do that without compiling the whole thing?"

[17:00] <comborico1611> jmerelo: I see.  The question is important because the topic is really "finished build" and building from scratch, which I'm sure has little coverage.

[17:01] <Zoffix> comborico1611: I don't like its gamefication of human interactions. 

[17:01] <timotimo> if i remember correctly, there was barely any detail in the question text as well

[17:01] <timotimo> i can't seem to find it any more

[17:01] <comborico1611> Zoffix: Fair enough.  I'm very suspcious if the site myself, seeing that it has top SEO status, and in league with other powerful forums (ask ubuntu etc.)

[17:02] *** andrzejk_ left
[17:02] <jmerelo> comborico1611: it really is, but you need to be a bit careful on how you compose the question. 

[17:02] <comborico1611> timotimo: Yeah, that's because I didn't understand what ws going on.

[17:02] <jmerelo> comborico1611: askubuntu all belong to the same StackExchange network. 

[17:02] <comborico1611> Yeah,  I'm suspicous of powerful entities.

[17:02] <timotimo> do you have a link to the question again?

[17:02] <comborico1611> I'll have to login and find it.

[17:03] <timotimo> or what is your username?

[17:03] <jmerelo> timotimo: here you go https://stackoverflow.com/questions/49948677/perl6-rakudo-star-why-does-it-take-so-long-to-install

[17:03] <timotimo> thanks

[17:03] <comborico1611> timotimo: https://stackoverflow.com/questions/49948677/perl6-rakudo-star-why-does-it-take-so-long-to-install

[17:04] <comborico1611> Oop

[17:04] <timotimo> the question doesn't look like a typical stackoverflow question, but that's to be expected from someone using stackoverflow for the first time

[17:05] <stmuk_>  

[17:05] <timotimo> for example, putting your name and date into the main text seems strange to me

[17:05] <comborico1611> I'm defy conventions.

[17:05] <comborico1611> I defy*

[17:05] <comborico1611> I hate things without dates.  So I add my own to make sure.

[17:06] <timotimo> OK, stackoverflow does have an edit log, too, though

[17:06] <comborico1611> stack will just need to get use to my style :)

[17:06] <comborico1611> (I'll consider not putting that on there)

[17:06] <stmuk_> comborico1611: is that on linux? 32 bit or 64 bit? How much physical memory or swap? Whats the CPU?

[17:07] <comborico1611> 64, 2 gigs physical 2 swap, cpu.. hold on.

[17:07] <comborico1611> Correction 1.9 gigs of ram

[17:08] <comborico1611> dual-core 2.3 ghz

[17:08] <comborico1611> pentium

[17:08] <comborico1611> ubuntu 14

[17:09] <Zoffix> comborico1611: but also, what's "so long"?

[17:09] <stmuk_> does it slow down at a particular point?

[17:09] <Geth> ¬¶ doc: c8835e78aa | (JJ Merelo)++ | doc/Type/X/TypeCheck/Splice.pod6

[17:09] <Geth> ¬¶ doc: Fixes description of exception

[17:09] <Geth> ¬¶ doc: 

[17:09] <Geth> ¬¶ doc: Closes #833

[17:09] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/c8835e78aa

[17:09] <synopsebot> Link: https://doc.perl6.org/type/X::TypeCheck::Splice

[17:09] <comborico1611> The whole system becomes to slow to use.

[17:10] <stmuk_> is it swapping? 

[17:10] *** HaraldJoerg1 joined
[17:10] <timotimo> yeah, you're running out of ram most likely

[17:10] <timotimo> er

[17:10] <timotimo> yes

[17:10] <comborico1611> stmuk_: I don't know how to determine that.

[17:10] <jmerelo> comborico1611: use top or htop

[17:10] *** sena_kun left
[17:10] <timotimo> or "free -m"

[17:10] <Zoffix> (nm, I see " it takes about 25-30 minutes")

[17:11] *** HaraldJoerg left
[17:11] <Zoffix> comborico1611: are you running `make rakudo-test` or `make rakudo-spectest` as part of the installation process?

[17:11] <comborico1611> Zoffix: No, I learned from first installation that test is far too long

[17:11] *** sena_kun joined
[17:11] <comborico1611> takes far too long*

[17:11] <jmerelo> comborico1611: anyway, the point is that you should try and reformulate the StackOverflow question in several different ways. First, you could ask if there is a fast way of having it running, or compiling it so that it takes less, or finally ask if you can find out, via shell commands, what makes it so slow and so do something to fix it.

[17:12] <stmuk_> its not really a stackoverflow question .. it sounds like something specific to your system (probably just lack of RAM+swap)

[17:13] <Zoffix> m: say 250/60

[17:13] <camelia> rakudo-moar 305c1d6c8: OUTPUT: ¬´4.166667‚ê§¬ª

[17:13] <stmuk_> you could try adding a temporary swap file while compiling

[17:13] <comborico1611> I thought stackoverflow was for asking general questions about computing.  I didnt know there was a culture thing to it.

[17:13] <timotimo> fwiw, we could totally check if "free" exists on the system, try to parse its output, and warn if available ram is quite tight

[17:13] <jmerelo> We're 3 issues short of 1000 issues closed :-)

[17:13] <Zoffix> FWIW on my 32-bit (so no jit) 2-core debian with 8GB RAM, installation takes ages, but not so long as 25-30. Maybe in 10-15 minutes tops

[17:13] <timotimo> comborico1611: places and communities that call themselves "neutral" or "free of culture/bias/..." are usually the opposite of that

[17:13] <jmerelo> comborico1611: there's a culture to everything. There's a culture to this IRC channel. There's a culture to perl6/doc issues. There's a culture to tests.

[17:13] <stmuk_> what does "swapon" say?

[17:13] <jmerelo> there's a culture to culture.

[17:14] <comborico1611> Anyways, I'm off to lunch.  I decided not to post the question on Stack.  Too much drama.

[17:15] <timotimo> sorry i'm being so negative :|

[17:15] *** AlexDaniel left
[17:15] <comborico1611> Maybe in time I'll figure out what's stackable and what's not.

[17:15] <stmuk_> comborico1611: type "swapon"

[17:15] <jmerelo> comborico1611: I would really appreciate if you did it. By doing so you will help other users. 

[17:15] <comborico1611> timotimo: Not a big deal. I just dn't want to walk on egg shells trying to formulate a question that is suitable.

[17:16] <comborico1611> swapon :-)

[17:17] <stmuk_> actually the "free" command is more likely to exist

[17:17] <comborico1611> (I have it on my tab to look at later.)

[17:17] <comborico1611> -comborico 28 April 2018

[17:17] <stmuk_> what does the swap line in free say?

[17:17] <jmerelo> comborico1611: just post it here as soon as you do it there, and we can help you improve it if it needs improvement. Anyway, you're bound to get it right sooner or later.

[17:18] <comborico1611> jmerelo: I'll consider it.

[17:18] <Zoffix> (FWIW my earlier FWIW was for install of plain rakudo; dunno how long it takes star to install all the modules)

[17:18] <comborico1611> Thanks!

[17:18] *** comborico1611 left
[17:18] <Zoffix> AlexDaniel`!

[17:18] <Zoffix> :)

[17:18] <Zoffix> I fixed the numificator bug

[17:19] <stmuk_> Zoffix: its not that long

[17:20] <stmuk_> usually the delay is compiling interp (especially on old versions of clang) or compiling the setting (which warns about being slow before it does it)

[17:21] <Zoffix> AlexDaniel`: oh, but it relies on that MoarVM fix. So I guess we'll need a MoarVM point release too üò¨

[17:22] <stmuk_> this sounds like a specific environment issues (probably slow disk and swapping) to me

[17:22] <timotimo> personally, i've had a good time with zram

[17:23] <stmuk_> I've found zram good on slow 2GB systems 

[17:23] <timotimo> i have a 4gb system that is so much more usable. actually, usable at all only because of it. though i haven't compared it with disk-based swap; there's only an ssd in there, too.

[17:25] <stmuk_> I'm quite liking manjaro on desktops (after years of debian/ubuntu)

[17:26] <Zoffix> haha

[17:26] <timotimo> i've been on fedora for a couple of years now

[17:26] <Zoffix> Bodhi Linux FTW

[17:26] <timotimo> i wanted to have a closer look at solus and elementary, but didn't get around to it yet

[17:27] <stmuk_> I always quite liked E17

[17:27] <timotimo> is e17 in one of these mentioned distros?

[17:28] <stmuk_> I think bodhi uses it in some form?

[17:28] *** sjoshi joined
[17:29] <Zoffix> Yeah, it's called Moksha. Basically a fork of E17 after Bodhi's lead dev didn't like the direction E17 guys were going in

[17:29] <timotimo> oh, their desktop system is a spiritual successor more or less

[17:29] *** lizmat joined
[17:30] <timotimo> the EFL always looked appealing to me from afar, i never actually did anything with any of their libraries

[17:30] <timotimo> BBL

[17:32] *** sjoshi left
[17:44] <jmerelo> Zoffix: looks cool https://www.bodhilinux.com/

[17:48] <El_Che> debian upgrade went south on my 2gb 2008 ultra laptop, I may try one of the bsds :)

[17:48] <El_Che> (I just use it a browser + termianl)

[17:57] <timotimo> i use a bsd to hold my weechat and to this day i don't get the vertical or horizontal bars in chat windows :<

[18:15] <Kaiepi> is it a good idea to put submodules in resources/ ?

[18:15] *** Kaiepi left
[18:15] *** Kaiepi joined
[18:16] <Kaiepi> is it a good idea to put submodules in resources/ ?

[18:18] <timotimo> hm, does git put a .git into the folder where a submodule is checked out, or does it live in the host's .git folder?

[18:19] <Kaiepi> it makes a .git file instead of a folder

[18:19] <timotimo> oh, cool

[18:19] <timotimo> then it shouldn't be too bad

[18:20] <timotimo> having a whole lot of files in there would have been bad for performance

[18:21] <timotimo> if you really like pain, try using -I/home/your-home/ to see what i mean

[18:21] <Kaiepi> er

[18:21] <Kaiepi> there will be a lot of files, the submodule's rakduo

[18:21] <Kaiepi> s/rakduo/rakudo/

[18:22] <timotimo> oh!

[18:24] <Kaiepi> what i'm really trying to do is make it possible to run the binary for the module anywhere i want, since i can't rely on relative paths

[18:26] <Kaiepi> the only relative path i have is src/rakudo, which i chdir to

[18:26] <timotimo> have you tried

[18:26] <timotimo> m: say $*EXECUTABLE

[18:26] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´"./rakudo-m-inst/bin/perl6-m".IO‚ê§¬ª

[18:26] <timotimo> oh, that's relative, too

[18:27] <timotimo> it's absolute on my system

[18:27] <Zoffix> huggable: use FindBin

[18:27] <huggable> Zoffix, nothing found

[18:27] <Zoffix> huggable: FindBin

[18:27] <huggable> Zoffix, use lib $*PROGRAM.sibling: '../lib'; # finds lib/ for scripts in bin/ or t/

[18:28] <Zoffix> (so you'd adjust `../lib` to end up at the path you want that binary to load

[18:28] <Zoffix> )

[18:28] <Geth> ¬¶ doc: 65c285c814 | (Luca Ferrari)++ | doc/Type/IO/Socket/INET.pod6

[18:28] <Geth> ¬¶ doc: Place a try catch block in the socket example.

[18:28] <Geth> ¬¶ doc: 

[18:28] <Geth> ¬¶ doc: As for issue #1963 it seems that without the try-catch the loop can crash

[18:28] <Geth> ¬¶ doc: the server if the client does wait (sleep) or do something strange with the

[18:28] <synopsebot> Link: https://doc.perl6.org/type/IO::Socket::INET

[18:28] <Geth> ¬¶ doc: incoming data.

[18:28] <Geth> ¬¶ doc: Seems to me a flushing problem.

[18:28] <Geth> ¬¶ doc: 

[18:28] <Geth> ¬¶ doc: Tested on moar 2018.04.

[18:28] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/65c285c814

[18:28] <Geth> ¬¶ doc: 4ebcfc1501 | (Luca Ferrari)++ | doc/Type/X/TypeCheck/Splice.pod6

[18:28] <synopsebot> Link: https://doc.perl6.org/type/X::TypeCheck::Splice

[18:28] <Geth> ¬¶ doc: Merge branch 'master' of github.com:perl6/doc

[18:28] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/4ebcfc1501

[18:28] *** zakharyas left
[18:29] <Kaiepi> the bin file's in  /home/morfent/.perl6/share/perl6/site/resources/EE3D9CE7067342F9D26B532AB9C8BD94E5ABAD8D

[18:29] <Kaiepi> zef locate src/rakudo gives nothing

[18:31] <Kaiepi> maybe there's something i can do at compile time

[18:32] <timotimo> yeah, resources aren't a thing locate would find i don't think

[18:32] <Zoffix> Ah, then yeah, you'd need to put it in resources. AFAIK you can't assume with installed modules that files are even files (they could all be installed as blobs in a database, for example)

[18:32] <Zoffix> it = the stuff you want the script to find

[18:39] <Kaiepi> i'll give it a shot and see what happen

[18:39] <Kaiepi> s

[18:43] <Kaiepi> ===> Install [FAIL] for RakudoBot:ver<0.0.1>: 'resources/rakudo' is a directory, cannot do '.open' on a directory

[18:47] <jmerelo> These are perl6/doc issues by date, inclusing state ‚Üí https://github.com/JJ/TPF-Grant/blob/master/illos/date-issue-state.png

[18:48] *** AlexDaniel joined
[18:48] <jmerelo> It's curious to see the gap at the beginning of 2016. And the huge number of issues in summer 2017

[18:49] <jmerelo> Month with the highest number of outstanding issues is February, but second one is that same summer '17

[18:53] *** rindolf left
[18:54] *** jmerelo left
[18:55] *** rindolf joined
[18:58] <Kaiepi> m: PROCESS::<RAKUDO_PATH> = '../src/rakudo'.IO; say $*RAKUDO_PATH

[18:58] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´Dynamic variable $*RAKUDO_PATH not found‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:59] *** darutoko left
[18:59] <Zoffix> Missing sigil

[18:59] <Zoffix> m: PROCESS::<$RAKUDO_PATH> = '../src/rakudo'.IO; say $*RAKUDO_PATH

[18:59] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´"../src/rakudo".IO‚ê§¬ª

[18:59] <Kaiepi> oh

[19:00] *** domidumont left
[19:01] <Kaiepi> i think if i throw that in a BEGIN phaser that'll work

[19:05] *** andrzejk_ joined
[19:09] *** andrzejk_ left
[19:09] <Kaiepi> ...nope, variable's undefined outside the block

[19:11] *** dct joined
[19:14] *** shlomif joined
[19:14] *** andrzejk_ joined
[19:15] *** rindolf left
[19:16] <Zoffix> Kaiepi: "that'll work"... "that" is what?

[19:17] *** HaraldJoerg joined
[19:17] <Kaiepi> being able to chdir to the path from another module without having to run the package's binary from within its dir

[19:17] *** HaraldJoerg1 left
[19:18] *** shlomif is now known as rindolf

[19:18] *** andrzejk_ left
[19:19] *** khisanth__ left
[19:22] *** andrzejk_ joined
[19:25] *** siigl joined
[19:25] *** siigl left
[19:26] *** siigl joined
[19:26] *** andrzejk_ left
[19:27] *** TEttinger joined
[19:27] *** siigl left
[19:29] *** siigl joined
[19:29] *** siigl left
[19:30] *** andrzejk_ joined
[19:31] *** siigl joined
[19:31] *** siigl left
[19:32] *** dct left
[19:37] *** ryn1x joined
[19:37] *** stmuk joined
[19:38] <ryn1x> .

[19:40] *** stmuk_ left
[19:42] <Kaiepi> never mind, that won't work

[19:43] *** pmurias left
[19:44] *** dct joined
[19:45] <Zoffix> Kaiepi: and the $*PROGRAM.sibling approach isn't suitable?

[19:48] *** khisanth__ joined
[19:48] <Kaiepi> nope

[19:48] <Kaiepi> "/home/morfent/.perl6/share/perl6/site/bin/../src/rakudo".IO

[19:48] *** andrzejk_ left
[19:50] <Zoffix> too bad

[19:52] *** andrzejk_ joined
[19:59] *** zachk joined
[19:59] *** zachk left
[19:59] *** zachk joined
[20:00] *** andrzejk_ left
[20:05] *** andrzejk_ joined
[20:11] *** Kaiepi left
[20:14] *** andrzejk_ left
[20:21] *** andrzejk_ joined
[20:22] *** andrzej__ joined
[20:24] *** andrzej__ left
[20:26] *** andrzejk_ left
[20:40] *** andrzejk_ joined
[20:42] *** andrzejk_ left
[20:47] *** andrzejk_ joined
[20:48] *** ryn1x left
[20:50] *** HaraldJoerg1 joined
[20:51] *** HaraldJoerg left
[20:51] *** andrzejk_ left
[20:53] *** pilne joined
[20:53] *** andrzejk_ joined
[20:54] *** andrzejk_ left
[21:01] *** andrzejk_ joined
[21:10] *** wamba left
[21:12] *** ryn1x joined
[21:15] *** ryn1x left
[21:20] *** rngoodn joined
[21:20] *** rngoodn left
[21:24] *** ryn1x joined
[21:26] *** Kaiepi joined
[21:28] *** andrzejk_ left
[21:49] *** andrzejk_ joined
[21:51] *** ryn1x left
[21:53] *** Zoffix left
[22:01] *** HaraldJoerg1 left
[22:05] *** mr_ron joined
[22:10] <mr_ron> Just commented on a facebook post in my news feed that might make some positive press for p6.  Someone might want to post on Perl6 FB group.  https://www.facebook.com/triplebyte/posts/2037629753164267

[22:11] <timotimo> i'm not sure it's a good look to post advertisements for companies on a public-seeming social media page of ours

[22:12] <timotimo> then again, i never faced books, so i don't know what is normal over there

[22:12] <El_Che> not readable without a facebook account, btw

[22:12] <timotimo> oh, wait, i'm not seeing what they were talking about?

[22:13] <El_Che> I only see a picture

[22:14] <El_Che> then I huge joing the borg login screen

[22:14] <mr_ron> m: say so (100+1.0/3)-100==1.0/3

[22:14] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´True‚ê§¬ª

[22:17] <mr_ron> It wouldn't hurt to like my comment ... just a thought.

[22:17] <mr_ron> s/comment/facebook comment about perl 6/

[22:20] <El_Che> mr_ron: can not even read it ;)

[22:20] <MasterDuke> mr_ron: done

[22:24] *** dct left
[22:26] *** sena_kun left
[22:35] <tobs> The last two lines on this page seem broken: https://docs.perl6.org/syntax/our

[22:35] <tobs> (small stuff like that doesn't need an issue on github, right?)

[22:39] <lizmat> tobs: please do  :-)

[22:39] <tobs> o7

[22:41] *** Kaiepi left
[22:44] *** Kaiepi joined
[22:46] *** nooninm joined
[22:46] <buggable> New CPAN upload: P5opendir-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5opendir-0.0.1.tar.gz

[22:46] <nooninm> Hello.  I do not understand why the second 'say' line below is not saying '1'.

[22:46] <nooninm> The first line says 'ab' because we matched the word chars 'ab'.

[22:47] <nooninm> To me, the second 'say' should say 1 because 'ab' is one element.

[22:47] <nooninm> What am I missing?

[22:47] <nooninm> > say  ~$/ if "ab cd" ~~ /\w+/;

[22:47] <nooninm> ab

[22:47] <nooninm> > say  ~$/.elems if "ab cd" ~~ /\w+/;

[22:47] <nooninm> 0

[22:47] <nooninm> Thanks

[22:51] <lizmat> m: dd $/ if "ab cd" ~~ /\w+/;

[22:51] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´Match $/ = Match.new(list => (), hash => Map.new(()), pos => 2, made => Any, from => 0, orig => "ab cd")‚ê§¬ª

[22:51] <lizmat> m: say $/ if "ab cd" ~~ /\w+/;

[22:51] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´ÔΩ¢abÔΩ£‚ê§¬ª

[22:51] <lizmat> m: say $/.elems if "ab cd" ~~ /\w+/;

[22:51] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´0‚ê§¬ª

[22:52] <lizmat> hmmm

[22:52] <tobs> m: say $/.elems if "ab cd" ~~ /(\w)+/

[22:52] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´1‚ê§¬ª

[22:52] <tobs> the whole match doesn't count as a capture anymore, I think?

[22:52] <nooninm> I did not use a capture

[22:52] <lizmat> I'm wondering whether calling .elems on a Match object makes sense at all

[22:53] <tobs> oh, I thought elems would count the captures

[22:53] *** andrzejk_ left
[22:53] <nooninm> This is an example from Think Perl

[22:54] <lizmat> :-(   # must have missed that then  :-(

[22:54] <nooninm> Page 115, 3/4 down the page

[22:54] <nooninm> say "Word count = ", $/.elems if "I have a dream" ~~ m:g/ \w+/;

[22:54] <evalable6> nooninm, rakudo-moar 40d887c8e: OUTPUT: ¬´Word count = 4‚ê§¬ª

[22:54] <nooninm> The above is the real line.

[22:55] <nooninm> I wanted to know what wouldhappen if I took out the m:g

[22:55] <lizmat> m: 	say "Word count = ", $/.elems if "I have a dream" ~~ m:g/ \w+/;

[22:55] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´Word count = 4‚ê§¬ª

[22:55] <nooninm> say "Word count = ", $/.elems if "I have a dream" ~~ / \w+/;

[22:55] <evalable6> nooninm, rakudo-moar 40d887c8e: OUTPUT: ¬´Word count = 0‚ê§¬ª

[22:55] <nooninm> See, it puts out 0 instead of 1

[22:55] *** dct joined
[22:57] <nooninm> The 'I' should match, giving us one element.

[22:58] <lizmat> .elems on a capture is defined as the number of positional captures

[22:58] <lizmat> without the :g you don't have positional captures, just "the" capture

[22:58] <nooninm> I don't know what a positional capture is.

[22:59] <nooninm> The string "positional capture" does not appear in the book.

[22:59] <lizmat> "foo" ~~ m/(o)/; dd $/.elems

[22:59] <evalable6> lizmat, rakudo-moar 40d887c8e: OUTPUT: ¬´1‚ê§¬ª

[22:59] <lizmat> also known as $0 in this case

[22:59] <lizmat> "foo" ~~ m/(o)/; dd $0

[22:59] <evalable6> lizmat, rakudo-moar 40d887c8e: OUTPUT: ¬´Match.new(list => (), hash => Map.new(()), orig => "foo", from => 1, pos => 2, made => Any)‚ê§¬ª

[23:00] <lizmat> "foo" ~~ m/(o)/; dd ~$0

[23:00] <evalable6> lizmat, rakudo-moar 40d887c8e: OUTPUT: ¬´"o"‚ê§¬ª

[23:00] *** Kaiepi left
[23:01] *** Kaiepi joined
[23:01] <nooninm> What is that 'dd'?

[23:01] <lizmat> nooninm: (positional) captures as opposed to named captures

[23:01] <lizmat> dd is the tiny data dumper, so small, it lost it t

[23:02] <lizmat> it's a debugging tool in rakudo

[23:02] <nooninm> The 'I' then is in the zeroeth position?  Is that what it means?

[23:02] <lizmat> it's basically "note foo.perl" with some bells and whistles

[23:02] <nooninm> I mean, the captured 'I' is the zeroeth thing captured, if zeroeth is a word.

[23:03] <nooninm> Is that what you mean?

[23:03] <lizmat> yes, and they would be available as $0, $1, $2 and $3 as well

[23:03] <nooninm> Okay, that makes sense.

[23:03] <nooninm> thanks, guys

[23:03] <nooninm> gals

[23:03] <lizmat> m: say "Word count = ", (@$/).elems if "I have a dream" ~~ m:g/ \w+/; dd ~$0, ~$1, ~$2, ~$3

[23:03] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´Word count = 4‚ê§"I"‚ê§"have"‚ê§"a"‚ê§"dream"‚ê§¬ª

[23:04] <lizmat> m: say "Word count = ", (@$/).elems if "I have a dream" ~~ m/ \w+/; dd ~$0, ~$1, ~$2, ~$3  # without :g

[23:04] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´Word count = 0‚ê§Use of Nil in string context‚ê§  in block <unit> at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in block <unit> at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in block <unit> at <tmp> line 1‚ê§Use of Nil in string context‚ê§  ‚Ä¶¬ª

[23:05] <lizmat> nooninm: you're welcome

[23:05] <nooninm> I tried it.  It printed out a nil for each element matched

[23:05] <nooninm> Bye

[23:05] *** nooninm left
[23:06] *** nooninm joined
[23:06] *** nooninm left
[23:18] *** rindolf left
[23:21] *** dct left
[23:28] *** comborico1611 joined
[23:30] *** nooninm joined
[23:30] <nooninm> I am going to put <crlf> at the end of each line.  Hope it works.

[23:30] <nooninm> This still is not making sense.<crlf> Page 115 of Think Perl, 3/4 down the page.<crlf> <crlf> say "Word count = ", $/.elems if "I have a dream" ~~ m:g/ \w+/;<crlf> Word count = 4<crlf> <crlf> The '4' is the number of elements.  That is, the number of words.<crlf> So now if I merely take out the m:g, I should get just a single match,<crlf> that being for the word 'I', resulting in a total of 1 elements.<crlf> But I don't.  I get a '0' 

[23:30] <nooninm> No, it did not.  I'll have to paste each line, one at a time.  

[23:30] <nooninm> No, it did not.  I'll have to paste each line, one at a time.  

[23:31] <nooninm> This still is not making sense. Page 115 of Think Perl, 3/4 down the page.

[23:31] <nooninm> say "Word count = ", $/.elems if "I have a dream" ~~ m:g/ \w+/;

[23:31] <evalable6> nooninm, rakudo-moar 40d887c8e: OUTPUT: ¬´Word count = 4‚ê§¬ª

[23:31] <nooninm> Word count = 4

[23:31] <nooninm> Wait ... 8 more lines to paste

[23:31] <nooninm> The '4' is the number of elements.  That is, the number of words.

[23:31] <nooninm> So now if I merely take out the m:g, I should get just a single match,

[23:32] <nooninm> that being for the word 'I', resulting in a total of 1 elements.

[23:32] <nooninm> But I don't.  I get a '0' instead, as though nothing got matched.

[23:32] <nooninm> Can someone explain this again?

[23:32] <nooninm> say "Word count = ", $/.elems if "I have a dream" ~~ / \w+/;

[23:32] <evalable6> nooninm, rakudo-moar 40d887c8e: OUTPUT: ¬´Word count = 0‚ê§¬ª

[23:32] <nooninm> Word count = 0

[23:32] <nooninm> Okay, so there is my question.

[23:33] <nooninm> Why is there not at least 1 match (and hence element) without the :g?

[23:33] <jnthn> m: "I have a dream" ~~ m:g/ \w+/; say $/.WHAT

[23:33] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´(List)‚ê§¬ª

[23:33] <jnthn> m: "I have a dream" ~~ m/ \w+/; say $/.WHAT

[23:33] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´(Match)‚ê§¬ª

[23:34] <jnthn> With :g $/ is set to a List of Match objects, so .elems means "how many things are in that list"

[23:34] <jnthn> Whereas without :g $/ is set to the one Match that happened. .elems on that is talking about the number of things captured within that Match.

[23:35] <nooninm> But I am not capturing anything with the :g or without the :g.

[23:36] <nooninm> So with the :g I get '4', with no capturing

[23:38] <nooninm> There should still be 1 thing matched.  \w+ should match the first I

[23:38] <jnthn> Yes, the :g means that $/ contains a list of all the things matched, whereas without :g it contains the matched thing.

[23:38] <jnthn> It did match it

[23:38] <jnthn> m: "I have a dream" ~~ m/ \w+/; say $/.Str

[23:38] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´I‚ê§¬ª

[23:39] <comborico1611> nooninm: Let me go upstairs and get my copy of the book.  I was just reviewing this last week.

[23:39] <nooninm> If it matched it, there is 1 element.

[23:39] <nooninm> Okay

[23:39] <jnthn> Without :g there is not a List, just the one thing that was matched

[23:40] <nooninm> Are you saying that elems works only on a list, and that elems on something that is not a list will return 0?

[23:42] <jnthn> I'm saying that elems on an individual Match means how many things it captured

[23:42] <jnthn> m: "I have a dream" ~~ m:g/ (\w) \w+/; say $/[1]

[23:42] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´ÔΩ¢dreamÔΩ£‚ê§ 0 => ÔΩ¢dÔΩ£‚ê§¬ª

[23:43] <jnthn> m: "I have a dream" ~~ m:g/ (\w) \w+/; say $/.elems; say $/[1].elems

[23:43] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´2‚ê§1‚ê§¬ª

[23:43] <jnthn> And without the :g

[23:44] <jnthn> m: "I have a dream" ~~ m/ (\w) \w+/; say $/.elems

[23:44] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´1‚ê§¬ª

[23:44] <jnthn> m: "I have a dream" ~~ m/ (\w) \w+/; say $/[0]

[23:44] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´ÔΩ¢hÔΩ£‚ê§¬ª

[23:44] <jnthn> Well, that's boring since it's just a one letter word

[23:44] <jnthn> m: "We have a dream" ~~ m/ (\w) \w+/; say $/[0]

[23:44] <camelia> rakudo-moar 40d887c8e: OUTPUT: ¬´ÔΩ¢WÔΩ£‚ê§¬ª

[23:44] <comborico1611> nooninm: What page?  115 didn't seem to be right.

[23:45] <comborico1611> (warning: I'm a massive newbie.)

[23:45] <nooninm> I have 115

[23:45] <nooninm> 1st Edition, Version 0.5.0  May 2017

[23:45] <comborico1611> Same

[23:46] <comborico1611> p.115 3/4 down... my $fruit = "banana";

[23:46] <nooninm> Counting the first however many Roman Numeral pages, it is page 135 of 431

[23:46] <comborico1611> K

[23:46] <nooninm> Your page 115 is my page 104

[23:47] <nooninm> Try down 11 pages

[23:47] <nooninm> Just before 7.7.8 Exercises on Regexes

[23:47] <comborico1611> I see it.

[23:48] <nooninm> BTW: jnthn, you are cheating by having () doing the capturing

[23:48] <nooninm> Read: smile

[23:48] <comborico1611> I have a note.

[23:48] <comborico1611> Elems used but not taught until p.156

[23:48] *** markong left
[23:48] <nooninm> Okay.  I am taking up your time.  I will hold off until I get that far.

[23:49] <comborico1611> I'm like you.  I must understand each thign that enters the code.

[23:49] <comborico1611> Let me review what you've written to jnth and see if I can get you an answer.

[23:50] <MasterDuke> jnthn: i see how that makes sense (Match.elems returning the number of captures), but it does sort of conflict with how almost anything else not Positional/Associative will just give 1 for .elems (e.g., Int.elems, IO::Path.elems)

[23:51] <nooninm> I just found where the book says "The elems function or method returns the number of elements of an array".

[23:51] <nooninm> Therefore it might not make sense for elems to be used at all with something that is not an array.

[23:52] <nooninm> I just used it because when reading this kind of book I tend to make changes just to see what happens.

[23:52] <nooninm> The book did not try to do it without the :g.  I did.  Just me.

[23:54] <comborico1611> nooninm: I have another note.  "m", as in the m:, is called Regex Match Operator.

[23:54] <comborico1611> just fyi.

[23:54] <nooninm> ok

[23:54] <comborico1611> I'm needing to review this because I'm not remember squat. lol

[23:55] <nooninm> With the new elems knowledge I think I'll just sign off.  I'll remember it is just for arrays.

[23:55] <comborico1611> Fair enough.  

[23:55] <comborico1611> Hey!

[23:55] <comborico1611> Check out perl6intro.com

[23:55] <comborico1611> I am finding it VERY useful.

[23:56] <nooninm> Okay.  I can do that in parallel.  I am retired, and this is how I am putzing

[23:56] <comborico1611> Very good!  You're a smart one, I'm sure.

[23:56] <nooninm> Thakns..  Bye

[23:56] <comborico1611> Bye now!

[23:56] *** nooninm left
