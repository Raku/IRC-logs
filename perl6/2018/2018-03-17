[00:00] <timotimo> if it isn't, i definitely should put it in the repo

[00:00] <timotimo> :o they're not in the repo

[00:01] <cfa> tut tut

[00:01] *** markong left
[00:08] *** sena_kun left
[00:11] <buggable> New CPAN upload: App-Mi6-0.1.5.tar.gz by SKAJI https://cpan.metacpan.org/authors/id/S/SK/SKAJI/Perl6/App-Mi6-0.1.5.tar.gz

[00:12] *** rindolf joined
[00:15] *** mcmillhj joined
[00:16] *** pharv left
[00:19] *** mcmillhj left
[00:21] <timotimo> i probably didn't upload it "officially" because the code is kind of messy :D

[00:21] <Geth> ¦ doc: d1c8d8ad7f | cfa++ | 19 files

[00:21] <Geth> ¦ doc: Remove leading indentation from (some) pod code blocks.

[00:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d1c8d8ad7f

[00:21] <Geth> ¦ doc: 03b0c0ef35 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | 19 files

[00:21] <Geth> ¦ doc: Merge pull request #1848 from cfa/indentation

[00:21] <Geth> ¦ doc: 

[00:21] <Geth> ¦ doc: Remove leading indentation from (some) pod code blocks.

[00:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/03b0c0ef35

[00:26] <cfa> AlexDaniel: ta

[00:29] <timotimo> what does "tut tut" mean?

[00:31] *** pierre joined
[00:31] <cfa> https://en.oxforddictionaries.com/definition/us/tut-tut

[00:31] <cfa> (i was teasing)

[00:31] <timotimo> oh, so a bit like "tsk tsk"?

[00:32] <cfa> in this context, yeah

[00:32] <cfa> 'tut tut' always strikes me as a little ridiculous

[00:33] *** skids joined
[00:33] *** mcmillhj joined
[00:38] *** mcmillhj left
[00:41] *** wamba left
[00:42] *** pierre left
[00:43] *** pierre joined
[00:45] *** mcmillhj joined
[00:47] *** pharv joined
[00:48] *** pierre left
[00:50] *** mcmillhj left
[00:51] *** pharv left
[00:56] *** mcmillhj joined
[00:56] *** aindilis joined
[01:01] *** mcmillhj left
[01:06] <timotimo> put in a fast path that's about 30% faster that's utilised about 40% of the time, yay

[01:07] <timotimo> but i didn't measure how much it costs to decide between the two

[01:12] *** araraloren_ joined
[01:13] *** mcmillhj joined
[01:18] *** mcmillhj left
[01:21] <Geth> ¦ doc: f5697a75d9 | cfa++ | doc/Language/rb-nutshell.pod6

[01:21] <Geth> ¦ doc: Fix Ruby nutshell markup.

[01:21] <synopsebot> Link: https://doc.perl6.org/language/rb-nutshell

[01:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f5697a75d9

[01:23] <cfa> timotimo: nice!

[01:31] *** mcmillhj joined
[01:35] *** kalkin-- joined
[01:36] *** mcmillhj left
[01:36] <timotimo> "Cannot find method 'List': no method cache and no .^find_method", i wonder if i managed to break it by doing something dangerous, or if there's just a terrible bug waiting to eat someone

[01:37] <timotimo> m: use nqp; my num @foo; for ^10 { @foo.push(nqp::time_n() - nqp::time_n()) }; say @foo.sort.List

[01:37] <camelia> rakudo-moar 34889bebc: OUTPUT: «(0 0 0 0 0 0 0 0 0 0)␤»

[01:38] <timotimo> m: use nqp; my num @foo; for ^10 { @foo.push(nqp::time_n() - nqp::time_n()) }; say ([+] @foo) / @foo.elems; say @foo.sort.List

[01:38] <camelia> rakudo-moar 34889bebc: OUTPUT: «-2.38418579101563e-08␤(-2.38418579101562e-07 0 0 0 0 0 0 0 0 0)␤»

[01:38] *** kalkin--- left
[01:38] *** eckhardt left
[01:38] <timotimo> m: use nqp; my num @foo; for ^10 { my num $start = nqp::time_n(); @foo.sort; @foo.push(nqp::time_n() - $start) }; say ([+] @foo) / @foo.elems; say @foo.sort.List

[01:38] <camelia> rakudo-moar 34889bebc: OUTPUT: «3.07798385620117e-05␤(4.05311584472656e-06 4.52995300292969e-06 6.43730163574219e-06 8.10623168945312e-06 9.05990600585938e-06 9.29832458496094e-06 1.00135803222656e-05 1.45435333251953e-05 1.50203704833984e-05 0.000226736068725586)␤»

[01:39] *** eckhardt joined
[01:39] <timotimo> m: use NativeCall; use nqp; my num @foo; for ^10 { my num $start = nqp::time_n(); @foo.sort; @foo.push(nqp::time_n() - $start) }; say ([+] @foo) / @foo.elems; say @foo.sort.List

[01:39] <camelia> rakudo-moar 34889bebc: OUTPUT: «1.55448913574219e-05␤(2.62260437011719e-06 3.33786010742188e-06 5.7220458984375e-06 8.58306884765625e-06 9.05990600585938e-06 1.00135803222656e-05 1.00135803222656e-05 1.04904174804688e-05 1.45435333251953e-05 8.10623168945312e-05)␤»

[01:43] <timotimo> maybe tomorrow i'll go through the work of narrowing down the code a bunch

[01:43] *** mcmillhj joined
[01:45] <timotimo> m: use NativeCall; use nqp; my $pdbuf = CArray[int64].new(0); nativecast(Pointer[int64], $pdbuf); my num @foo; for ^10 { my num $start = nqp::time_n(); @foo.sort; @foo.push(nqp::time_n() - $start) }; say ([+] @foo) / @foo.elems; say @foo.sort.List

[01:45] <camelia> rakudo-moar 34889bebc: OUTPUT: «1.35183334350586e-05␤(2.86102294921875e-06 2.86102294921875e-06 5.48362731933594e-06 7.86781311035156e-06 8.10623168945312e-06 8.34465026855469e-06 9.29832458496094e-06 1.00135803222656e-05 1.38282775878906e-05 6.65187835693359e-05)␤»

[01:46] *** rindolf left
[01:46] <timotimo> it depends on how many rounds the loop does

[01:48] *** mcmillhj left
[01:48] <Geth> ¦ doc: 27c592351a | cfa++ | doc/Language/rb-nutshell.pod6

[01:48] <Geth> ¦ doc: ...and unindent those fixed =for blocks.

[01:48] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/27c592351a

[01:48] <synopsebot> Link: https://doc.perl6.org/language/rb-nutshell

[01:52] <timotimo> m: my num @times; for ^100 { @times.push(1e-10) }; my @otimes = @times.sort.List;

[01:52] <camelia> rakudo-moar 34889bebc: OUTPUT: «Cannot find method 'List': no method cache and no .^find_method␤  in block <unit> at <tmp> line 1␤␤»

[01:52] <timotimo> m: my num @times; for ^100 { @times.push(1e-10) }; my @otimes = @times.sort.list;

[01:52] <camelia> rakudo-moar 34889bebc: OUTPUT: «Cannot find method 'list': no method cache and no .^find_method␤  in block <unit> at <tmp> line 1␤␤»

[01:52] <timotimo> m: my num @times; for ^100 { @times.push(1e-10) }; @times.sort.^methods.say;

[01:52] <camelia> rakudo-moar 34889bebc: OUTPUT: «{}␤»

[01:52] <timotimo> m: my num @times; for ^100 { @times.push(1e-10) }; @times.sort.WHAT.say;

[01:52] <camelia> rakudo-moar 34889bebc: OUTPUT: «Cannot find method 'say': no method cache and no .^find_method␤  in block <unit> at <tmp> line 1␤␤»

[01:53] <timotimo> m: my num @times; for ^100 { @times.push(1e-10) }; my Mu $thing = @times.sort; $thing.WHAT.say;

[01:53] <camelia> rakudo-moar 34889bebc: OUTPUT: «Cannot find method 'say': no method cache and no .^find_method␤  in block <unit> at <tmp> line 1␤␤»

[01:53] <timotimo> m: my num @times; for ^100 { @times.push(1e-10) }; my Mu $thing = @times.sort; $thing.^name.say;

[01:53] <camelia> rakudo-moar 34889bebc: OUTPUT: «BOOTNumArray␤»

[01:53] <timotimo> is it just that sorting a num array gives a too low-level array back?

[01:53] <timotimo> bisectable6: my num @times; for ^100 { @times.push(1e-10) }; my Mu $thing = @times.sort.List;

[01:53] <bisectable6> timotimo, Bisecting by exit code (old=2015.12 new=34889be). Old exit code: 0

[01:53] <bisectable6> timotimo, bisect log: https://gist.github.com/9c3d0149f47e12e1fbf9d60b1d21e9d6

[01:53] <bisectable6> timotimo, (2017-04-09) https://github.com/rakudo/rakudo/commit/5cc5050139ecc729e497c403e2387f356ce0c253

[01:54] <AlexDaniel> 6c: my num @times; for ^100 { @times.push(1e-10) }; my Mu $thing = @times.sort.List;

[01:54] <committable6> AlexDaniel, https://gist.github.com/81d85596ed7d4287fb226fc0622184b9

[01:55] <timotimo> 6c: my int @times; for ^100 { @times.push(99) }; my Mu $thing = @times.sort.List;

[01:55] <committable6> timotimo, https://gist.github.com/62de7134ed3b74673ef7dd8e150d858d

[01:55] <timotimo> m: my int @times; say @times.List

[01:55] <camelia> rakudo-moar 34889bebc: OUTPUT: «()␤»

[01:56] <cfa> m: say (my num @times = 1e-10 xx 100).sort.List

[01:56] <timotimo> 6c: my int @times; for ^100 { @times.push(99) }; say @times.sort.^name;

[01:56] <camelia> rakudo-moar 34889bebc: OUTPUT: «Cannot find method 'List': no method cache and no .^find_method␤  in block <unit> at <tmp> line 1␤␤»

[01:56] <cfa> m: say (my num @times = 1e-10 xx 10).sort.List

[01:56] <camelia> rakudo-moar 34889bebc: OUTPUT: «(1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10)␤»

[01:56] <committable6> timotimo, https://gist.github.com/d45eaa4d1c1fe5a99896f229ccd6370f

[01:56] <cfa> m: say (my num @times = 1e-10 xx 50).sort.List

[01:56] <camelia> rakudo-moar 34889bebc: OUTPUT: «(1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-1…»

[01:56] <cfa> hunh

[01:56] *** mcmillhj joined
[01:56] <cfa> so

[01:57] <cfa> m: (my num @times = 1e-10 xx 10).sort

[01:57] <camelia> rakudo-moar 34889bebc: ( no output )

[01:57] <cfa> m: (my num @times = 1e-10 xx 100).sort

[01:57] <camelia> rakudo-moar 34889bebc: ( no output )

[01:57] <cfa> oh, that fails here

[01:57] <cfa> m: say (my num @times = 1e-10 xx 100).sort

[01:57] <camelia> rakudo-moar 34889bebc: OUTPUT: «Cannot find method 'gist': no method cache and no .^find_method␤  in block <unit> at <tmp> line 1␤␤»

[01:57] <timotimo> you have to call some method on it

[01:57] <cfa> there

[01:57] <timotimo> yeah,

[01:57] <timotimo> impressive that this has been hidden for so long

[01:58] <cfa> m: (my num @times = 1e-10 xx 64).sort.say

[01:58] <camelia> rakudo-moar 34889bebc: OUTPUT: «1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10…»

[01:58] <cfa> m: (my num @times = 1e-10 xx 65).sort.say  # boom

[01:58] <camelia> rakudo-moar 34889bebc: OUTPUT: «Cannot find method 'say': no method cache and no .^find_method␤  in block <unit> at <tmp> line 1␤␤»

[01:58] <timotimo> right

[01:58] <timotimo> i know what this is

[01:58] <timotimo> you see, the sort function has an $A and a $B

[01:58] <timotimo> the $A uses the existing object - well, really a clone of it

[01:58] <timotimo> er, i mean

[01:59] <timotimo> it's initialized to be that

[01:59] <timotimo> but $B is the result of an nqp::list_n (for num, or nqp::list_i for int, etc)

[01:59] <timotimo> $A has the type we want, for example numarray, but $B will be BOOTNumArray, a much lower-level type

[01:59] <timotimo> and the mergesort algorithm swaps $A and $B back and forth, depending on how many runs it does

[02:00] <timotimo> so if you have the right number of slots in your array, you'll end up with $B, which stands for Boom

[02:00] <timotimo> cfa: wanna do a little contribution? because i should go to bed ASAP :)

[02:00] <cfa> i can file if that's what you mean, sure

[02:01] <timotimo> i suggest you try to replace the nqp::list_* in the initialization of $B with nqp::clone(sortable) and find out if that fixes things, and then you can write tests in roast for this bug

[02:01] <timotimo> well, perhaps write the tests first, then fix things

[02:01] <cfa> (my num @ = 1e-10 xx 64).sort  vs.  (my num @ = 1e-10 xx 65).sort  seems the simplest demonstration

[02:01] *** mcmillhj left
[02:01] <timotimo> not sure how "strong" the test should be; perhaps it should just compare the .WHAT of the object you call .sort on with the one you get back for different sizes of list?

[02:03] <timotimo> m: my num @things; my %results; for ^256 { @things.push(1e-2); %results{@things.sort.^name}.push($_) }; .say for %results

[02:03] <camelia> rakudo-moar 34889bebc: OUTPUT: «array[num] => [2 3 8 9 10 11 12 13 14 15 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 15…»

[02:03] <timotimo> m: my num @things; my %results; for ^128 { @things.push(1e-2); %results{@things.sort.^name}.push($_) }; .say for %results

[02:03] <camelia> rakudo-moar 34889bebc: OUTPUT: «array[num] => [2 3 8 9 10 11 12 13 14 15 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63]␤BOOTNumArray => [4 5 6 7 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 64 65 66 67 68 69 70 71 72 73 74 75 76…»

[02:03] <timotimo> fun.

[02:04] <timotimo> cfa: if it's cool with you, you can prepare a rakudo patch and pull-request, too :)

[02:04] <timotimo> seeya!

[02:04] <cfa> ha ha

[02:07] <timotimo> if it's too much for you right now, don't worry, i can do it tomorrow, too

[02:07] <cfa> yeah, don't think i can get to it tonight either, sorry

[02:07] *** cdg joined
[02:07] <cfa> but i appreciate your offer

[02:08] <timotimo> all right, i'll drop into bed :)

[02:08] <cfa> sleep well

[02:10] *** eckhardt left
[02:11] *** mcmillhj joined
[02:12] *** cdg left
[02:15] *** mcmillhj left
[02:45] <Geth> ¦ rakudo.org: c833860b0d | (Zoffix Znet)++ | 2 files

[02:45] <Geth> ¦ rakudo.org: Implement Compiler Only 3rd-P packages download page

[02:45] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/c833860b0d

[02:45] *** ilbot3 left
[02:50] *** mcmillhj joined
[02:53] *** FROGGS_ joined
[02:55] *** ilbot3 joined
[02:55] *** ChanServ sets mode: +v ilbot3

[02:55] *** mcmillhj left
[02:56] *** nebuchadnezzar left
[02:56] *** nebuchadnezzar joined
[02:57] *** FROGGS left
[03:02] *** cdg joined
[03:03] *** mcmillhj joined
[03:07] *** cdg left
[03:08] *** mcmillhj left
[03:15] *** espadrine left
[03:17] *** pharv joined
[03:20] *** pierre joined
[03:21] *** mcmillhj joined
[03:21] *** pharv left
[03:25] *** mcmillhj left
[03:26] <Geth> ¦ rakudo.org: d9d4b1099f | (Zoffix Znet)++ | 2 files

[03:26] <Geth> ¦ rakudo.org: Go by-the-book on component alignment

[03:26] <Geth> ¦ rakudo.org: 

[03:26] <Geth> ¦ rakudo.org: Fixes subpages, but home page needs more work.

[03:26] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/d9d4b1099f

[03:34] *** cdg joined
[03:37] *** mcmillhj joined
[03:39] *** cdg left
[03:42] *** mcmillhj left
[03:46] *** ufobat___ joined
[03:47] *** khw left
[03:49] *** ufobat_ left
[03:57] *** mcmillhj joined
[03:59] <Geth> ¦ rakudo.org: df5abbe3c9 | (Zoffix Znet)++ | post/lexical-module-loading.md

[03:59] <Geth> ¦ rakudo.org: Remove clashing syntax highlights

[03:59] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/df5abbe3c9

[03:59] <Geth> ¦ rakudo.org: 922e51d1a8 | (Zoffix Znet)++ | 5 files

[03:59] <Geth> ¦ rakudo.org: Improve styles on posts pages

[03:59] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/922e51d1a8

[04:02] *** mcmillhj left
[04:12] *** araraloren_ left
[04:12] *** araraloren_ joined
[04:15] *** mcmillhj joined
[04:15] *** todd joined
[04:16] *** wamba joined
[04:18] <todd> I am trying to convert a p5 program over to p6.  I have absolutely had it with the bizare subroutine declarations in p5.  Is there a way to convert `printf "%-28.28s", "unrecognized status";` into p6 but put the result into a string instead of printing it?

[04:19] *** mcmillhj left
[04:22] <Geth> ¦ rakudo.org: 4d5cc8303b | (Zoffix Znet)++ | assets/sass/main.scss

[04:22] <Geth> ¦ rakudo.org: Fix alignment on home

[04:22] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/4d5cc8303b

[04:23] *** Zoffix joined
[04:23] <Zoffix> todd: yeah, just add an "s". The routine is "sprintf"

[04:24] <Zoffix> m: my $s := sprintf "%-28.28s", "unrecognized status"; say "I totally did not print the $s.chars()-char string `$s`"

[04:24] <camelia> rakudo-moar 34889bebc: OUTPUT: «I totally did not print the 28-char string `unrecognized status         `␤»

[04:25] <skids> m: "unrecognized status".fmt("%-28.28s").say # or that

[04:25] <camelia> rakudo-moar 34889bebc: OUTPUT: «unrecognized status         ␤»

[04:25] *** Zoffix left
[04:26] <todd> how would I go to a string?

[04:27] <todd> just found the sprintf from Zoffix

[04:27] <skids> It only printed that because of the .say.

[04:27] <Geth> ¦ rakudo.org: ae6ac5452e | (Zoffix Znet)++ | lib/Perl6Org/Binaries.pm

[04:27] <Geth> ¦ rakudo.org: Remove left over debug code

[04:27] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/ae6ac5452e

[04:27] <todd> what does the "m:" mean in Zoffix's replies?

[04:28] <skids> It's telling the evalbot to run rakudo-moar

[04:28] <skids> m == moar

[04:28] *** mcmillhj joined
[04:28] <skids> a.k.a. moarvm.

[04:28] <todd> okay is "moar" a p6 command or his name?

[04:29] <skids> It's the built-for-rakudo VM.  As opposed to say rakudo-jvm.

[04:29] <todd> okay

[04:30] <todd> I had though it was the m/(xxx)/

[04:30] <Geth> ¦ rakudo.org: 1fa169739c | (Zoffix Znet)++ | 2 files

[04:30] <Geth> ¦ rakudo.org: Hide easter egg better

[04:30] <Geth> ¦ rakudo.org: 

[04:30] <Geth> ¦ rakudo.org: Win64 Chrome stupidly flashes all the things 100% opaque on page load

[04:30] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/1fa169739c

[04:31] <Geth> ¦ rakudo.org: 7eef2abe9e | (Zoffix Znet)++ | 2 files

[04:31] <Geth> ¦ rakudo.org: Alt fix for easter

[04:31] <Geth> ¦ rakudo.org: 

[04:31] <Geth> ¦ rakudo.org: Fix jump on load

[04:31] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/7eef2abe9e

[04:32] <todd> Thank you!

[04:33] *** mcmillhj left
[04:41] *** mcmillhj joined
[04:46] *** mcmillhj left
[04:47] *** cog_ joined
[04:48] *** cognominal left
[04:52] *** aindilis left
[04:53] *** aindilis joined
[04:54] *** speedChicken joined
[04:58] *** araraloren_ left
[04:58] *** araraloren_ joined
[04:59] *** pierre left
[05:00] *** pierre joined
[05:02] *** mcmillhj joined
[05:05] *** pierre left
[05:06] *** mcmillhj left
[05:14] <todd> How do I get the name of the subroutine I am in?  In P5 this was `( caller(0) )[3]`

[05:14] <araraloren_> m: sub f() { put &?ROUTINE; }; f

[05:14] <camelia> rakudo-moar 34889bebc: OUTPUT: «Sub object coerced to string (please use .gist or .perl to do that)␤f␤  in sub f at <tmp> line 1␤»

[05:14] <araraloren_> m: sub f() { put &?ROUTINE.gist; }; f

[05:14] <camelia> rakudo-moar 34889bebc: OUTPUT: «sub f () { #`(Sub|62594920) ... }␤»

[05:14] <todd> Thank you!

[05:15] <araraloren_> :)

[05:17] *** mcmillhj joined
[05:17] *** pharv joined
[05:22] *** pharv left
[05:22] *** mcmillhj left
[05:24] <todd> Oh boy do I not understand.    http://vpaste.net/EZQk4

[05:26] <araraloren_> m: http://vpaste.net/EZQk4

[05:26] <camelia> rakudo-moar 34889bebc: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3http:7⏏5//vpaste.net/EZQk4␤    expecting any of:␤        colon pair␤»

[05:28] <todd> take out line one if you are using Windows

[05:28] <araraloren_> m: https://paste.ubuntu.com/p/6tMXh3hhQx/

[05:28] <camelia> rakudo-moar 34889bebc: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3https:7⏏5//paste.ubuntu.com/p/6tMXh3hhQx/␤    expecting any of:␤        colon pair␤»

[05:29] <araraloren_> seems like there something wrong with camelia :)

[05:30] <araraloren_> I think

[05:30] <araraloren_> the code is correctly, on my notebook

[05:30] *** sauvin_ joined
[05:31] *** mcmillhj joined
[05:32] <araraloren_> todd so what do you mean ? the `not understand`

[05:35] <todd> A better example: http://vpaste.net/8bh5k    The first part is what baffles me `sub f () { #`(Sub|46578536) ... }`.  The second part works

[05:35] *** sauvin_ is now known as bocaneri

[05:36] *** mcmillhj left
[05:37] <araraloren_> m: http://vpaste.net/8bh5k 

[05:37] <camelia> rakudo-moar 34889bebc: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3http:7⏏5//vpaste.net/8bh5k␤    expecting any of:␤        colon pair␤»

[05:37] *** eliasr left
[05:38] <todd> camelia, plase qutoe the line that the error is on

[05:40] <araraloren_> what output do you expected  ?

[05:41] <araraloren_> you print the .gist on &?ROUTINE in f, so it return True

[05:41] <todd> "abc"  the name of the subrouitine.  I did get it to work, but I don't understand `sub f() { put &?ROUTINE; }; f`

[05:43] *** psychoslave joined
[05:46] <araraloren_> sorry, I am not get you :) . If you wonder why it output that format

[05:46] *** skids left
[05:47] <araraloren_> m: sub f() { put &?ROUTINE.perl; }; f

[05:47] <camelia> rakudo-moar 34889bebc: OUTPUT: «sub f () { #`(Sub|66404184) ... }␤»

[05:47] <araraloren_> The document not document the .gist .perl of Routine class

[05:48] <todd> `sub f () { #`(Sub|50396008) ... }`  is what I don't understand.  Bu since I got it to work otherwise, I guess I don't have to understand.

[05:49] <araraloren_> todd , https://docs.perl6.org/routine/gist#class_Mu

[05:50] <araraloren_> .gist just a respresentation of the routine

[05:51] *** mcmillhj joined
[05:51] <araraloren_> m: sub f() { put &?ROUTINE.name; }; f

[05:51] <camelia> rakudo-moar 34889bebc: OUTPUT: «f␤»

[05:51] <araraloren_> todd you can get the routine name from .name

[05:52] <araraloren_> the routine is a instance of https://docs.perl6.org/type/Routine

[05:53] <todd> thank you .  I wrote it down in my notes

[05:53] <araraloren_> m: sub f() { given &?ROUTINE { put .name; put .package; put .candidates; } }; f

[05:53] <camelia> rakudo-moar 34889bebc: OUTPUT: «f␤Use of uninitialized value of type GLOBAL in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤␤f␤  in block  at <tmp> line 1␤Sub object coerced to string (please use .gist or .per…»

[05:53] <araraloren_> m: sub f() { given &?ROUTINE { put .name; put .package; } }; f

[05:53] <camelia> rakudo-moar 34889bebc: OUTPUT: «f␤Use of uninitialized value of type GLOBAL in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤␤  in block  at <tmp> line 1␤»

[05:53] <todd> no clue why it is doing that.  :'(

[05:56] *** mcmillhj left
[05:56] <araraloren_> todd .gist should return the code as string `sub f() { put &?ROUTINE.perl; }`, but they not implement it currently 

[05:56] <araraloren_> IMO :)

[05:57] <araraloren_> m: sub f() { put &?ROUTINE.perl; put &?ROUTINE.WHICH; }; f

[05:57] <camelia> rakudo-moar 34889bebc: OUTPUT: «sub f () { #`(Sub|49504152) ... }␤Sub|49504152␤»

[05:57] <araraloren_> so they print the `ID` of the sub 

[06:00] <todd> Is the ID the same as the subs's name?  or some kind of address?

[06:00] *** cdg joined
[06:01] <araraloren_> m: module A { our sub f() { }; }; module B { out sub f() { }; }; say A.&f

[06:01] <camelia> rakudo-moar 34889bebc: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    f used at line 1␤    out used at line 1. Did you mean 'put'?␤␤»

[06:02] *** mcmillhj joined
[06:03] <araraloren_> m: module A { our sub f() { }; }; module B { our sub f() { }; }; say &A::f.name; say &B::f.name; say &A::f.WHICH; say &B::f.WHICH;

[06:03] <camelia> rakudo-moar 34889bebc: OUTPUT: «f␤f␤Sub|81695968␤Sub|81696120␤»

[06:04] <araraloren_> https://docs.perl6.org/syntax/WHICH

[06:04] *** cdg left
[06:04] <todd> Guys  Remember I am a beginner!

[06:05] <araraloren_> so it is a  identification of an object :)

[06:05] <araraloren_> not same as the name of routine

[06:05] <araraloren_> every object has different `ID`

[06:06] *** mcmillhj left
[06:07] <araraloren_> todd oh, I know it now :)

[06:09] <todd> Apparently the name if the routine is something different that the ID and now I understand.   Thank you!

[06:09] *** cdg joined
[06:10] <araraloren_> YW

[06:13] <todd> converting 6282 line of p5 code to p6 is a pain in the ...  But the weird sub declarations of p5 are killing me.

[06:13] *** cdg left
[06:14] <araraloren_> :) that's really hard 

[06:14] <araraloren_> good luck :)

[06:18] <todd> I am enjoying dumping pointers to complex variables (%@ etc.) and using actual names.  I live and die in Top down and I can not have my subs declarations so stinking weird.  It is killing me trying to maintain it.  So, I am finally pulling the plug on it and going to P6.  I am using a Hig Level language for a reason.  One if them is to not have to pass pointers (references) around

[06:18] *** mcmillhj joined
[06:18] *** broquaint joined
[06:18] *** Altreus joined
[06:20] <araraloren_> todd perl5 has many things not perfect :)

[06:21] <araraloren_> actually p5 not have a real type system :)

[06:21] <araraloren_> or maybe the static type system :)

[06:22] <araraloren_> I am from c/c++, I like the static type system

[06:23] *** mcmillhj left
[06:28] <todd> I did Modula2 25 years ago.  Perl is a real shift, but perfect for what I do now.  I ADORE P6's sub declarations.  P5's is a nightmare

[06:29] *** psychoslave left
[06:29] *** vike joined
[06:31] *** mcmillhj joined
[06:35] *** psychoslave joined
[06:36] *** mcmillhj left
[06:36] <araraloren_> Modula2 ? don't know that language 

[06:36] <todd> It was the follow to Pascal

[06:37] <araraloren_> I have to do some cook :) I am hungry now 

[06:37] <araraloren_> oh I see

[06:38] <todd> I am busy modifying a ton of sub call with address in them to use "return"

[06:39] <araraloren_> oh, maybe someday can use a automate tools convert p5 to p6 :) haha

[06:47] *** mcmillhj joined
[06:48] <todd> There is one out there, but it is ten times easier to do by hand.  So `$I += 1` on the haha

[06:51] *** mcmillhj left
[07:00] *** mcmillhj joined
[07:02] *** nige left
[07:06] *** mcmillhj left
[07:18] *** pharv joined
[07:20] *** darutoko joined
[07:20] *** domidumont joined
[07:22] *** pharv left
[07:27] *** aindilis` joined
[07:27] *** aindilis left
[07:27] *** psychoslave left
[07:28] *** domidumont left
[07:28] *** speedChicken left
[07:28] *** domidumont joined
[07:32] *** cog_ left
[07:33] *** cognominal joined
[07:34] *** giraffe joined
[07:36] *** speedChicken joined
[07:39] <todd> Now what am I doing wrong?  I can't get past reading :out.  http://vpaste.net/5vSAL

[07:40] <todd> `curl -L http://www.gbis.com -o eraseme.html` works fine from the command line

[07:42] <todd> I can get this to work if I take out the :err from run

[07:44] <todd> I am following this: https://docs.perl6.org/routine/run

[07:46] <FROGGS_> what if you remove that first :close?

[07:46] <todd> will try

[07:47] <todd> no change

[07:47] <FROGGS_> I'm tryying now too

[07:49] <FROGGS_> weird

[07:49] <FROGGS_> it works for me if you swap err and out

[07:49] <FROGGS_> in line 13 and 17 I mean

[07:50] <todd> testing

[07:51] <FROGGS_> btw, you're assigning to $RtnStr twice, but that's of course not the issue

[07:52] <todd> Say that.  I have all the reading of err commented out

[07:56] <todd> If I remove :err from, the run line, it works with both `-o -` and `-o eraseme.html`

[07:56] <todd> I correct the $RtnStr, it is still commented out

[07:57] <FROGGS_> in your paste, $RtnStr = $proc.err.slurp(:close); is not commented

[07:58] <FROGGS_> I believe the reading of .out blocks because in your paste it does not print anything to :out

[07:58] <FROGGS_> but it always prints to :err, perhaps that's why it helps reading from .err first

[07:58] <araraloren_> oh, this, I think you waiting curl close the stdout handle 

[07:59] <FROGGS_> it doesnt read from stdin

[07:59] <FROGGS_> because :in is not supplied

[07:59] <FROGGS_> so that filehandle should not be open in the first place

[07:59] <todd> Who do I do that?

[07:59] <todd> Who do I fix?

[08:01] <FROGGS_> todd: can you try that? https://gist.github.com/FROGGS/b69f403ee538698ad3bea7b5faebfae4

[08:01] <todd> testing

[08:02] *** cdg joined
[08:04] <todd> That worked.  What did I do wrong?

[08:04] <FROGGS_> you read from out first, that that yields nothing

[08:04] <FROGGS_> though I am not sure it should block there

[08:05] <araraloren_> If I call proc.status it is working fine

[08:05] <araraloren_> before reading the stdhout

[08:05] <FROGGS_> aven stranger, no?

[08:06] <FROGGS_> even*

[08:06] *** cdg left
[08:06] <todd> So, I should have read :err first.   Hmmmmm.  Would you guys correct `https://docs.perl6.org/routine/run ` to show reading :err first?

[08:06] <araraloren_> :) I don't think we should read error first 

[08:07] <araraloren_> there may be something wrong

[08:07] <FROGGS_> I too think this is a rakudo or moarvm bug

[08:09] <todd> Well, at least I know I am not going out of my mind.  Thank you guys!

[08:10] <araraloren_> add say `$proc.status;` before "say "reading :out";"

[08:10] <araraloren_> todd try it

[08:10] <araraloren_> say $proc.status

[08:11] *** trnh joined
[08:11] *** cdg joined
[08:12] <araraloren_> m: https://gist.github.com/araraloren/f573ac04073108317bae3f3803c7038e

[08:12] <camelia> rakudo-moar 34889bebc: OUTPUT: «run is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub run at src/RESTRICTED.setting line 14␤  in block <unit> at <tmp> line 11␤␤»

[08:12] <araraloren_> :(

[08:12] <todd> that worked.  Is something amiss in perl 6?

[08:12] *** markong joined
[08:13] <araraloren_> no, maybe there is a bug

[08:14] <araraloren_> anyway, you can access .status first avoid this problem

[08:16] *** cdg left
[08:16] <todd> done!

[08:19] <todd> Is there a way to group comment out a section of code?  I have been using #`{ terminalted with }, but this falls apart if the code I am commenting out has a } in it

[08:19] <araraloren_> #`()

[08:19] <todd> testing

[08:20] <araraloren_> you can use any brackets

[08:20] <araraloren_> https://docs.perl6.org/language/syntax#Multi-line_/_embedded_comments

[08:20] <araraloren_> #`[]

[08:20] <todd> the code has ) in it too (lots of subs)

[08:21] <araraloren_> Perl6 is still Perl

[08:21] *** khisanth__ left
[08:21] <araraloren_> m: #`< this is a comment >  print 123;

[08:21] <camelia> rakudo-moar 34889bebc: OUTPUT: «123»

[08:21] <todd> If you listen to the GROUCHES on the Perl5 mailing list, it is Java.

[08:22] <araraloren_> haha

[08:22] <todd> `=begin comment`  Is "comment" anything I want?  

[08:22] <araraloren_> IDK pod

[08:22] <araraloren_> seems like it is

[08:24] *** wamba left
[08:25] <todd> Well Perl6 is more like Perl5 FIXED.  The sub declarations in p5 are a nightmare

[08:26] <FROGGS_> well, it is okay with signatures in P5 these days

[08:26] <araraloren_> Perl6 is support Perl5's sub decaleration

[08:26] <FROGGS_> signatures and postderef makes P5 quite awesome again

[08:26] <araraloren_> yeah :)

[08:26] <FROGGS_> or postfixderef or what it is called

[08:27] * FROGGS_ hacks Mojolicious at $work using 5.24, and enjoys it very much

[08:27] <FROGGS_> my coworker has to write ABAP in SAP, and this is a nightmare, believe me

[08:31] <todd> I live and die by Top Down.  It is imparative that the subs be easily understandable at a glance.

[08:32] *** cognominal left
[08:32] <todd> I wrote a really sweet pm6 to interface with curl to send eMail and to download webpages and files.  Would you guys like it?  It would make a really sweet module

[08:35] *** khisanth__ joined
[08:40] <ufobat___> what is the difference between OpaquePointer and Pointer in NativeCall, or where is it documented?

[08:43] *** domidumont left
[08:43] <araraloren_> todd yeah, if you have good idea, you should make it to a module 

[08:44] <araraloren_> ufobat___ I think OpaquePointer is something internal

[08:44] <todd> I don't know how to do that officially.  The pm6 work for me.

[08:44] <araraloren_> the document has some about how to make a module

[08:44] <araraloren_> and there are many module you can refer

[08:45] <araraloren_> https://docs.perl6.org/language/modules.html

[08:45] <araraloren_> But actually I don't know module of Perl6 well

[08:45] <titsuki_> ufobat__: I added it in the past: https://docs.perl6.org/language/faq#What's_the_difference_between_Pointer_and_OpaquePointer?

[08:46] <araraloren_> titsuki_ awesome

[08:46] <todd> oh no.  I already have it made.  I was wanting to share it, if you guys were interested.

[08:47] <araraloren_> yeah, that's what the document talk about

[08:50] <todd> I see it now: https://docs.perl6.org/language/modules.html#Upload_your_Module_to_CPAN

[08:50] <todd> Thank you!

[08:50] *** ufobat___ is now known as ufobat

[08:50] *** espadrine joined
[08:51] <ufobat> araraloren_, so i just use "Pointer", :)

[08:52] <Kaiepi> i had no idea i could use Buf with NativeCall for Str pointers until earlier today

[08:53] <Kaiepi> particularly with strings i want to allocate before passing to a native function https://hastebin.com/zufudupumu.pl

[08:55] <araraloren_> Kaiepi then you should use CArray

[08:55] <araraloren_> https://github.com/bduggan/p6-digest-sha1-native/blob/master/lib/Digest/SHA1/Native.pm6#L16

[08:58] <Kaiepi> i was using a CArray[uint8] before, but it was segfaulting unless i was defining it like my CArray[uint8] $output .= new: (0,0...*)[0..^$outputlen] then creating another Buf to pass to Net::LibIDN::StringPrep.ucs4_to_utf8

[09:01] <Kaiepi> *CArray[uint32]

[09:01] <Kaiepi> nah i was right the first time

[09:03] <Kaiepi> note to self: try not to program in the middle of the night

[09:04] <araraloren_> haha

[09:04] *** pmurias joined
[09:04] <araraloren_> what is punycode_encode /

[09:04] <araraloren_> ？

[09:06] <Kaiepi> it's from https://www.gnu.org/software/libidn/

[09:06] <Kaiepi> i'm planning on porting Net::DNS to perl6, but i need to port its dependencies over first

[09:08] <araraloren_> what is allocate ?

[09:08] <araraloren_> seems like buf8 should work

[09:08] <araraloren_> oh I know it

[09:11] <Kaiepi> punycode_encode seems to depend on the output buffer already being allocated before it gets passed, so using CArray[uint8].new alone doesn't work

[09:12] <araraloren_> The example module I give you is do the right things

[09:14] <Kaiepi> $output isn't a 0 terminated array when it gets passed to the function, though

[09:15] <Kaiepi> from libidn's documentation it can be if i make $outputlen -1 though

[09:16] <Kaiepi> *$inputlen

[09:16] <Kaiepi> like i said i should think this over once i get some sleep lol

[09:17] <araraloren_> yeah, night :)_

[09:19] *** pharv joined
[09:24] *** pharv left
[09:26] *** rindolf joined
[09:30] *** sena_kun joined
[09:32] *** aborazmeh joined
[09:32] *** aborazmeh left
[09:32] *** aborazmeh joined
[09:32] *** cdg joined
[09:37] *** cdg left
[09:38] *** Alikzus joined
[09:38] *** rindolf left
[09:42] *** kalkin-- left
[09:43] *** cdg joined
[09:47] *** cdg left
[09:50] *** labster joined
[09:50] *** rindolf joined
[09:57] <El_Che> wow, lots of activity on the night of my timezone. Good tonsee that!

[10:22] <ufobat> .tell sergot I need your help for my PR. I dont know what I am doing, but I need to set the &verfiy-callback

[10:22] <yoleaux> ufobat: I'll pass your message to sergot.

[10:49] *** cognominal joined
[10:50] *** todd left
[10:56] *** Tykling-24800 joined
[10:56] *** Tykling-24800 left
[10:58] <titsuki_> m: my $p = start { sleep 10; 10 }; say await Promise.anyof(Promise.in(0),$p).then: { $p.result };

[10:59] <camelia> rakudo-moar 34889bebc: OUTPUT: «10␤»

[11:06] *** psychoslave joined
[11:13] *** aborazmeh left
[11:19] *** psychoslave left
[11:32] <titsuki_> m: https://gist.github.com/titsuki/17e748a5f934258b900036aa7fddfe2e

[11:32] <camelia> rakudo-moar 34889bebc: OUTPUT: «Proc::Async is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at <tmp> line 1␤␤»

[11:33] <titsuki_> oh...

[11:39] *** wamba joined
[11:42] <Geth> ¦ Pod-To-HTML: JJ++ created pull request #34: Adds support for classes in Tables

[11:42] <Geth> ¦ Pod-To-HTML: review: https://github.com/perl6/Pod-To-HTML/pull/34

[11:45] *** dogbert17 joined
[11:46] *** rurban joined
[11:53] <araraloren_> hi

[11:57] *** rurban left
[12:00] <moritz> ho

[12:06] <pmurias> m: say 1e+23 * 6.0221409e0 == 60221409e+23

[12:06] <camelia> rakudo-moar 34889bebc: OUTPUT: «False␤»

[12:07] <pmurias> m: say 1e+23 * 6.0221409e0

[12:07] <camelia> rakudo-moar 34889bebc: OUTPUT: «6.0221409e+23␤»

[12:07] <pmurias> ^^ this seems like a bug doesn't it?

[12:07] *** domidumont joined
[12:08] <El_Che> m: say 1e+23 * 6.0221409e0 == 6.0221409e+23

[12:08] <camelia> rakudo-moar 34889bebc: OUTPUT: «True␤»

[12:09] *** pmurias left
[12:10] *** vike left
[12:10] *** cog_ joined
[12:13] *** cognominal left
[12:17] *** pharv joined
[12:18] *** lookatme left
[12:19] *** lookatme joined
[12:22] *** pharv left
[12:27] *** andrzejku joined
[12:33] *** psychoslave joined
[12:37] *** cognominal joined
[12:37] *** cog_ left
[12:40] *** cog_ joined
[12:41] *** cognominal left
[12:47] *** cog_ left
[12:49] *** cog_ joined
[12:50] *** vike joined
[12:51] *** aborazmeh joined
[12:51] *** aborazmeh left
[12:51] *** aborazmeh joined
[12:52] *** psychoslave left
[13:01] <timotimo> Kaiepi: we do already have an implementation of punycode in the ecosystem, i believe

[13:02] <timotimo> Kaiepi: https://github.com/FROGGS/p6-IDNA-Punycode

[13:15] *** pierre joined
[13:19] <Kaiepi> timotimo, this is more or less to keep compatibility with p5's Net::LibiDN library

[13:22] <timotimo> OK

[13:23] *** vike left
[13:23] <Kaiepi> IDNA::Punycode::encode_punycode is equivalent to what Net::LibIDN::to_ascii_8z will be

[13:25] <Kaiepi> *Net::LibIDN.to_ascii_8z

[13:28] *** Unavowed joined
[13:28] *** araraloren_ left
[13:28] *** araraloren_ joined
[13:28] <Unavowed> Is it possible to emit a Failure from a Supplier::Preserving?  Calling $s.emit(fail("message")); seems to hang

[13:31] <timotimo> the call to fail would fail out of the routine you're calling fail in

[13:31] <timotimo> what you'll want to use is probably just Failure.new

[13:34] <Unavowed> that makes sense, thanks

[13:36] *** ChoHag left
[13:40] *** araraloren_ left
[13:40] <Unavowed> something seems wrong still - depending on how I consume the Supply output I can sometimes see the Failure but the .emit() call doesn't return

[13:40] *** araraloren_ joined
[13:40] <Unavowed> https://pastebin.com/w987kmun

[13:41] <Unavowed> this works for /bin/true but hangs for /bin/false

[13:41] *** xinming left
[13:41] *** pierre left
[13:41] <Unavowed> I want to asynchronously forward the stdout lines from a process but appending a Failure object if the process had a non-zero exit code

[13:41] *** xinming joined
[13:43] <timotimo> you're not awaiting the start block; maybe it died with an exception on its own

[13:43] <timotimo> then the .list call on the supply would wait forever for the supplier to be done

[13:44] <timotimo> for this kind of code, it's worthwhile to have a supply block instead of a start + a Supplier, because it handles failure and exceptions and such for you

[13:45] *** SyrupThinker joined
[13:45] <Unavowed> i see

[13:46] <tbrowder_> timotimo: useful info for concurrency noobs, thnx

[13:46] *** aborazmeh left
[13:47] <tbrowder_> the docs need a good concurrency tutorial i think

[13:47] <timotimo> the way a supply block actually runs could be a bit strange if you think of it as "replacement for start"

[13:48] <timotimo> m: my $sup = supply { say "the supply block is run"; emit 1; say "emitted one" }; $sup.tap({ .say }); $sup.tap({ say "second tap $_" });

[13:48] <camelia> rakudo-moar 3e8ee9911: OUTPUT: «the supply block is run␤1␤emitted one␤the supply block is run␤second tap 1␤emitted one␤»

[13:48] <timotimo> as you can see the body of the supply block is run twice. that's because it runs every time it gets tapped

[13:49] <timotimo> m: my $sup = supply { say "the supply block is run"; emit 1; say "emitted one" }; say "after the supply block definition"; my $sharedsup = $sup.share; say "set up a shared sup"; $sharedsup.tap({ .say }); $sharedsup.tap({ say "second tap $_" }); say "finished";

[13:49] <camelia> rakudo-moar 3e8ee9911: OUTPUT: «after the supply block definition␤the supply block is run␤emitted one␤set up a shared sup␤finished␤»

[13:49] <timotimo> ^- and supply blocks aren't "preserving" so to speak

[13:50] <timotimo> m: my $sup = supply { say "spply block runs"; whenever Promise.in(1) { say "time's up!"; emit 1; say "emitted one" } }; say "after the supply block definition"; my $sharedsup = $sup.share; say "set up a shared sup"; $sharedsup.tap({ .say }); $sharedsup.tap({ say "second tap $_" }); say "finished"; react whenever $sharedsup { say "react whenever" }; say "script over"

[13:50] <camelia> rakudo-moar 3e8ee9911: OUTPUT: «after the supply block definition␤spply block runs␤set up a shared sup␤finished␤time's up!␤1␤second tap 1␤react whenever␤emitted one␤script over␤»

[13:51] <timotimo> ^- i hope this isn't too confusing

[13:51] <tbrowder_> i’m wrestling with zoffix’s Proc::Q, it leaves orphan procs. i am experimenting with changes with  it now but won’t be able to check results for some hours.

[13:53] *** cog__ joined
[13:53] <Unavowed> hmm, that doesn't seem to fit my use case - I only want to tap into the Proc::Async .stdout once

[13:54] <Unavowed> so far I got the code to work with a supply block for /bin/false and /bin/true but if there is any output from the process then I get a nice and long perl6 stack trace

[13:54] <Unavowed> https://pastebin.com/rkteSrpe

[13:55] *** Kaiepi left
[13:56] *** cog_ left
[13:56] <timotimo> yes, you'll want to subscribe to the stdout.lines with a "whenever" block

[13:57] <timotimo> and likely use whenever instead of await for the $proc-async.start as well

[13:57] *** |oLa| joined
[14:01] *** mr_ron left
[14:04] <timotimo> m: say (my num @times = 1e-10 xx 65).sort.List

[14:04] <camelia> rakudo-moar 3e8ee9911: OUTPUT: «Cannot find method 'List': no method cache and no .^find_method␤  in block <unit> at <tmp> line 1␤␤»

[14:04] <timotimo> ^- this fixed locally

[14:07] <cfa> timotimo: nice one

[14:07] <Unavowed> https://pastebin.com/9gmNHXiM - this works nicely for /bin/true and /bin/ls but hangs for /bin/false

[14:12] *** pierre joined
[14:14] <AlexDaniel> araraloren_: camelia knows nothing about arbitrary URLs, only github/gitlab/bitbucket are supported

[14:15] <AlexDaniel> araraloren_: but you can use evalable6 for the same purpose with any link

[14:15] <AlexDaniel> e: http://vpaste.net/EZQk4

[14:15] <evalable6> AlexDaniel, Successfully fetched the code from the provided URL.

[14:15] <evalable6> AlexDaniel, rakudo-moar 3e8ee9911: OUTPUT: «sub f () { #`(Sub|94645469442832) ... }␤This subroutine is called True␤»

[14:15] <araraloren_> oh AlexDaniel thanks

[14:16] *** pierre left
[14:20] *** andrzejku left
[14:22] *** espadrine left
[14:36] *** SyrupThinker left
[14:36] *** mr_ron joined
[14:40] *** lalitmee joined
[14:41] *** pierre joined
[14:43] *** comborico1611 joined
[14:47] *** dmaestro joined
[14:50] *** SyrupThinker joined
[14:54] *** andrzejku joined
[14:57] *** Sgeo__ joined
[14:59] *** andrzejku left
[14:59] *** Sgeo_ left
[15:02] <cfa> m: say (my num @times = 1e-10 xx 65).sort.List

[15:02] <camelia> rakudo-moar 511bec0a2: OUTPUT: «(1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-1…»

[15:02] <cfa> neat

[15:06] <El_Che> releasable6: status

[15:06] <releasable6> El_Che, Next release in ≈3 hours. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Changelog for this release was not started yet

[15:06] <releasable6> El_Che, Details: https://gist.github.com/b9c269e953f4e8abd237332a3f626f43

[15:07] *** andrzejku joined
[15:11] *** andrzejku left
[15:11] *** epony left
[15:23] *** mr_ron left
[15:23] <cfa> so, in the language docs we have '5to6-nutshell' with subtitle 'Perl 5 to Perl 6, in a nutshell: How do I do what I used to do?

[15:23] <cfa> any objections to retitling this 'Perl 5 to Perl 6 - Nutshell' with subtitle 'How do I do what I used to do?'

[15:23] <cfa> that would bring it in line with the haskell, python, ruby docs

[15:24] <Geth> ¦ ecosystem: fe3e6d8379 | loren++ (committed using GitHub Web editor) | META.list

[15:24] <Geth> ¦ ecosystem: add App::FindSource

[15:24] <Geth> ¦ ecosystem: 

[15:24] <Geth> ¦ ecosystem: search your source file with perl6 :)

[15:24] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/fe3e6d8379

[15:24] <cfa> same applies for the other 5to6 docs

[15:24] <araraloren_> :) I upload the findsource script to ecosystem now 

[15:25] <El_Che> cfa: the expression is "in a nutshell"

[15:25] <stmuk> cfa: "in a nutshell" was used by O'Reilly in their book titles and is familiar to people

[15:25] <El_Che> isolating nutshell is kind of weird for me

[15:26] <cfa> agreed

[15:26] <cfa> i can modify the other titles

[15:27] <cfa> (see https://docs.perl6.org/language.html, take a look at how haskell/python/ruby are listed)

[15:28] <cfa> but my question is whether there're objections to titling these pages, or whether the existing slug titles are preferable

[15:28] <El_Che> "Perl 5 to Perl 6 guide - overview

[15:31] <AlexDaniel> cfa: +1 for consistency with other docs

[15:31] <cfa> i'll push something in a se

[15:31] <cfa> sec

[15:34] <Geth> ¦ doc: c49337be58 | cfa++ | 5 files

[15:34] <Geth> ¦ doc: Title the 5to6-* language pages.

[15:34] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c49337be58

[15:34] <cfa> AlexDaniel: if you're rather '- Nutshell' for consistency please edit :)

[15:34] <cfa> you'd*

[15:35] <cfa> i went with El_Che's suggestion

[15:35] <AlexDaniel> okay that didn't make it consistent :D

[15:36] <cfa> indeed

[15:36] <stmuk> the file still says "nutshell" in it (and that will be visible from "p6doc -l")

[15:36] <cfa> that doesn't strike me as problematic

[15:37] <stmuk> it would still odd to me to do "p6doc foo" and not see the text foo in the result at all

[15:37] <stmuk> s/still/seem

[15:37] <cfa> it's in the subtitle, but okay

[15:38] <cfa> https://docs.perl6.org/language/haskell-to-p6

[15:39] <cfa> that's titled '- Nutshell' but it's not in the filename fyi

[15:39] *** epony joined
[15:39] <stmuk> hahaha

[15:40] <cfa> let's wait for https://docs.perl6.org, see what everyone thinks?

[15:41] <cfa> (or, wait for https://docs.perl6.org to reflect the change)

[15:41] <cfa> sigh. s/or/er

[15:42] <timotimo> you know, i still think it'd be really cool if we had something like a _branches/ for docs.perl6.org where we'd build the site for non-master branches of the docs repo

[15:42] <timotimo> though maybe it'd be wiser to have a subdomain-based approach instead

[15:44] <stmuk> I wish we just thought of the source doc pod6 and the website as more different with the website just one possible view of the docs

[15:45] <stmuk> ie. p6doc and website generation code in different repos

[15:46] <cfa> stmuk: https://github.com/perl6/doc/issues/729 (somewhat related)

[15:47] <stmuk> cfa: I was puzzled by that. Generate pod6 from what? Surely pod6 should be our source docs format

[15:48] *** thowe joined
[15:50] *** ChoHag joined
[15:51] <cfa> i think the request is to assemble all cross references etc. first

[15:51] <cfa> then generate html

[15:51] <cfa> i'm going by [Coke]'s reading

[15:53] <El_Che> maybe not to popular, but I would hate if the html was limited by the pod6 source. I was surprised my self, but I only use the doc site to look things up, not used the pod once. I am pretty sure that this is the case for people younger than me

[15:53] <cfa> p6doc is quite slow on my machine

[15:54] <El_Che> I am also under the impression that everyone loves markdown, and pod is something obscure for most people

[15:54] <cfa> so i find browsing the docs more pleasant in the browser

[15:54] <El_Che> I hate when I have to read pod files on guthub

[15:54] <El_Che> github

[15:54] <moritz> El_Che: my impression as well

[15:54] <El_Che> (although guthub is not bad, I should register that)

[15:55] <stmuk> I'm not arguing against websites in general but in flavour of other ways of viewing the pod6 (including possible new websites)

[15:55] <stmuk> ^ favour

[15:55] *** Kaiepi joined
[15:55] <El_Che> I think the pod story is something from when perl 6 was supposed to replace 5

[15:56] <El_Che> stmuk: the question if the process is pod centered (e.g. how to document modules) or we can generate pod too

[15:56] <cfa> i don't think pod is really a barrier to doc contribution

[15:57] <stmuk> are you proposing moving all existing documentation from pod6 to markdown?

[15:57] <cfa> okay, the retitled 5to6 pages are live

[15:57] <cfa> lmk whether you'd prefer some retitling

[15:57] <cfa> (you plural)

[15:58] <El_Che> stmuk: I wouldn't migrate anything for now. Just decide on future guidelines, e.g. for modules authors

[15:58] <El_Che> atm module documentation is a mess

[15:59] *** araraloren_ left
[15:59] <stmuk> the typical module uses a README.md which isn't installed by zef

[15:59] *** araraloren_ joined
[15:59] <El_Che> met quite a few with pod in the code somewhere in lib

[16:00] <El_Che> about, zef, for me that's a feature

[16:00] <stmuk> I'm not even a fan of either pod or pod6 but I still think that ultimately perl6 documentation should be written in that form and the HTML generated from it (and allow other websites to be generated)

[16:01] <stmuk> but that strongly coupling one website HTML with the source pod6 is a mistake

[16:01] <cfa> the only thing that i dislike about pod is forgetting =back and =cut

[16:01] <cfa> which i do all the time

[16:01] <stmuk> El_Che: I think there isn't a spec for how docs are installed ... there was some talk of it as a "resource" in the past

[16:02] *** andrzejku joined
[16:05] *** ChoHag left
[16:05] *** ChoHag joined
[16:08] *** FROGGS_ left
[16:09] *** cog__ left
[16:10] *** cognominal joined
[16:11] <Geth> ¦ rakudo.org: 8b9c1d06d8 | (Zoffix Znet)++ | 2 files

[16:11] <Geth> ¦ rakudo.org: Extract build prereqs to a separate template fragment

[16:11] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/8b9c1d06d8

[16:13] <thowe> is DB::Pg something that can be installed with zef?

[16:16] <stmuk> thowe: you probably want DBIish

[16:17] *** cog_ joined
[16:17] <thowe> or, if I use rakudobrew, where should I put DB:Pg repo?

[16:17] <thowe> mm, no, I want to try DB:Pg I think

[16:18] *** pierre left
[16:18] <thowe> Looks more like Mojo.

[16:18] *** cognominal left
[16:19] <stmuk> oh from NASA!

[16:20] *** comborico1611 left
[16:20] <thowe> I've never quite figured out where to put perl6 libs yet...  Don't know what equiv of PERL%LIB is

[16:20] <thowe> er PERL5LIB

[16:20] *** espadrine joined
[16:21] *** releasable6 left
[16:21] *** releasable6 joined
[16:22] <El_Che> thowe: PERL6LIB

[16:22] <El_Che> -I does also work

[16:22] <El_Che> pretty much the same was as in Perl 5

[16:22] <thowe> Cool, that's new since TPC 2016 then

[16:22] <Geth> ¦ rakudo.org: 05510a36c0 | (Zoffix Znet)++ | templates/files-star-source.html.ep

[16:22] <Geth> ¦ rakudo.org: Make from sauce instructions always build latest

[16:22] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/05510a36c0

[16:24] <El_Che> zef works differently as cpan though. Eg if run from a global install it will install it globally (like cpan). But if run from a local install it will install stuff in ~/.perl6

[16:24] <thowe> how do I tell what the path is now?

[16:25] <El_Che> zef gets them at install time

[16:25] <thowe> er, no, just for perl6

[16:26] <thowe> is there a special array or something?

[16:26] *** araraloren_ left
[16:26] <thowe> If I grab PG:Db from github, where should I put it?

[16:26] <thowe> maybe that's a more concise qustion

[16:27] <stmuk> you use zef to install it and its precompiled

[16:27] <El_Che> https://docs.perl6.org/language/modules#Finding_Modules

[16:27] <thowe> zef didn't seem to like it

[16:27] <thowe> cool

[16:27] <El_Che> "It is up to the module installer to know where compunit expects modules to be placed. There will be a location provided by the distribution and in the current home directory"

[16:28] <cfa> thowe: you can echo $PERL6LIB from a shell to see whether it's set, or take a look at $*REPO (though that's not really the same as p5's @INC)

[16:28] <stmuk> -I and PERL6LIB are intended for local dev of your own modules and have a syntax including a "inst#" type path

[16:28] <cfa> m: $*REPO.say

[16:28] <camelia> rakudo-moar 511bec0a2: OUTPUT: «inst#/home/camelia/.perl6␤»

[16:29] <El_Che> in my packages, if zef is run as root from /opt/rakudo-pkg/bin/zef it will install the modules in /opt/rakudo-pkg. If ~/.perl6/bin/zef is run, it will install them in ~/.perl6. The perl6 command will find the modules automatically

[16:29] <Geth> ¦ rakudo.org: e5a642a315 | (Zoffix Znet)++ | templates/files-star-source.html.ep

[16:29] <Geth> ¦ rakudo.org: Fix latest sauce URL

[16:29] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/e5a642a315

[16:30] <Geth> ¦ rakudo.org: aa3985ac3d | (Zoffix Znet)++ | templates/files-star-source.html.ep

[16:30] <Geth> ¦ rakudo.org: Fix typo

[16:30] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/aa3985ac3d

[16:30] <cfa> m: .say for $*REPO.repo-chain

[16:30] <camelia> rakudo-moar 511bec0a2: OUTPUT: «inst#/home/camelia/.perl6␤inst#/home/camelia/rakudo-m-inst-2/share/perl6/site␤inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor␤inst#/home/camelia/rakudo-m-inst-2/share/perl6␤CompUnit::Repository::AbsolutePath.new(next-repo => CompUnit::Re…»

[16:31] <cfa> thowe: btw, the path separator for PERL6LIB is comma, not colon

[16:32] <cfa> PERL6LIB=/foo/bar,/baz/qux  not  PERL6LIB=/foo/bar:/baz/qux

[16:33] <El_Che> because we're weird

[16:33] <thowe> cfa: ah, thanks!

[16:33] <stmuk> "zef install DB::Pg" looks like it would work for me if I installed libuuid.so and maybe some more 

[16:34] *** andrzejku left
[16:34] <thowe> use DP:Pg , yes?

[16:34] <moritz> needs two :

[16:34] <thowe> ah

[16:35] <thowe> I shoul dhave known that

[16:36] *** a3r0_ left
[16:37] *** lichtkind left
[16:39] <Geth> ¦ rakudo.org: 77bf62528a | (Zoffix Znet)++ | 3 files

[16:39] <Geth> ¦ rakudo.org: Add rakudo sauce only install instructions

[16:39] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/77bf62528a

[16:40] *** mr_ron joined
[16:41] <thowe> now if I could just figure out how to set a username and password for the db...

[16:43] <cfa> .new takes a :conninfo pair

[16:43] <Geth> ¦ rakudo.org: 568e8c5442 | (Zoffix Znet)++ | 6 files

[16:43] <Geth> ¦ rakudo.org: Make "need help" para fade in after 5s

[16:43] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/568e8c5442

[16:44] <cfa> https://www.postgresql.org/docs/10/static/libpq-connect.html#LIBPQ-CONNSTRING

[16:44] <cfa> so i think you want DB::Pg.new(conninfo => 'postgresql://[user[:password]@][netloc][:port][,...][/dbname][?param1=value1&...]')

[16:44] *** vike joined
[16:44] <cfa> where that string needs to satisfy your connection requirements (i pasted it from the postgresql page linked above)

[16:45] <cfa> so something like  DB::Pg.new(conninfo => 'postgresql://user:secret@localhost')

[16:46] <thowe> so, I have the lib dir that has DB in it in perl6lib.  That is being looked at, but when I use DB::Pg; it says it can't find it.  tried perl6lib and perl6lib/lib  

[16:46] <thowe> Could not find DB::Pg at line 1 in:   /home/tim/perl6lib etc...

[16:47] *** sena_kun left
[16:47] <thowe> when i set it to the lib dir:  Could not find epoll at line 1 in:  /home/tim/perl6lib/lib

[16:47] <thowe> also seems to look in .perl6

[16:49] <stmuk> it will be a lot easier to use zef to install DB::Pg

[16:49] <thowe> I have no doubt, but then I wouldn't learn anything here...

[16:50] <Geth> ¦ rakudo.org: 90dc7cb0db | (Zoffix Znet)++ | 3 files

[16:50] <Geth> ¦ rakudo.org: Add crumbs to compiler-only pages

[16:50] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/90dc7cb0db

[16:51] <stmuk> you will have to install all the deps as well including LibUUID, epoll

[16:51] *** cognominal joined
[16:52] <thowe> ah, so .../lib/" is correct and epoll is a dependancy.

[16:53] *** cog_ left
[16:56] <thowe> LibUUID fails tests... :(

[16:57] <stmuk> is the shared object I refered to above install?

[16:58] <thowe> libuuid.so <- that?

[16:58] <stmuk> yes

[16:58] <thowe> good question...

[17:00] <thowe> I have uuid installed, but apparently that doesn't provide this lib...

[17:00] *** rindolf left
[17:01] <thowe> I think I need uuid-dev maybe

[17:02] <thowe> \o/  thanks stmuk

[17:03] *** rindolf joined
[17:05] <stmuk> good luck!

[17:08] <thowe> API appears to have changed since the reddit port...

[17:11] <thowe> well, queries work...  Man I am glad to have a REPL

[17:12] <thowe> I wrote my first Perl6 script!  Fist pump!

[17:14] *** SyrupThinker left
[17:17] *** SyrupThinker joined
[17:20] *** cog_ joined
[17:20] *** cognominal left
[17:28] *** eliasr joined
[17:28] *** andrzejku joined
[17:29] *** mr_ron left
[17:30] *** mr_ron joined
[17:32] *** andrzejku left
[17:47] *** natrys joined
[18:07] *** rindolf left
[18:17] *** trnh left
[18:17] *** natrys left
[18:17] *** natrys joined
[18:26] *** natrys left
[18:28] *** natrys joined
[18:34] *** mr_ron left
[18:47] *** mr_ron joined
[18:49] *** |oLa| left
[19:01] *** rindolf joined
[19:02] *** darutoko left
[19:07] *** trnh joined
[19:09] <Geth> ¦ rakudo.org: d7848ca546 | (Zoffix Znet)++ | lib/RakudoOrg/Posts.pm

[19:09] <Geth> ¦ rakudo.org: Flushify <ol>s in blog posts

[19:09] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/d7848ca546

[19:10] *** hankache joined
[19:11] <hankache> hello #perl6

[19:12] <moritz> \o hankache 

[19:12] <thowe> hi

[19:14] *** Zoffix joined
[19:14] <Zoffix> Is use.perl.org still a thing? There's a bunch of URLs on rakudo.org referencing stuff like http://use.perl.org/~pmichaud/journal/39411 but those links timeout now.

[19:15] <moritz> I think it worked a few days ago

[19:17] <Zoffix> ok, then I'll check in a few days

[19:18] <El_Che> moritz: really? I though it was dead for a long time

[19:18] <El_Che> not confusing it with blogs?

[19:20] <cfa> it's still documented in 5.26.1's docs

[19:20] <cfa> "It no longer accepts updates, but you can still use the site to read old entries and comments."

[19:25] <El_Che> http://web.archive.org/web/20170815070214/http://use.perl.org:80/use.perl.org/

[19:25] <El_Che> it was frozen in 2010, maybe they pulled the plug

[19:25] <moritz> El_Che: oh, maybe i'm confusing things, yes

[19:26] <El_Che> the last poll on it was "What I like most about perl 5.10"

[19:27] <El_Che> I am happy it wasn't "will you upload once version 6 is out?" :)

[19:27] <masak> confirming it was frozen back then. that's when I got my own domain for my blog.

[19:28] <masak> El_Che: "upload", as in ascend to a digital state of being? :P

[19:28] <El_Che> masak: it was 2010, we thought everything was possible :)

[19:29] <El_Che> on the mirror, a rakudo release based on parrot is announced

[19:29] <cfa> hmm

[19:29] <masak> ah yes, Parrot

[19:29] *** Zoffix left
[19:30] <masak> register-based, CPS-based, async IO

[19:30] <El_Che> 1 vm to rule them all

[19:31] <masak> nothing wrong with the idea as such

[19:31] <El_Che> The following people contributed to this release: Solomon Foster, Moritz Lenz, Jonathan Worthington, Martin Berends, chromatic, Carl Masak, snarkyboojum, Stefan O'Rear, Reini Urban, Jonathan Scott Duff, takadonet, Christoph Otto, isBEKaml, ash_, bubaflub, Jimmy Zhuo, Peter Lobsinger and Patrick Abi Salloum 

[19:31] <El_Che> masak: you're a survivor

[19:31] <El_Che> :)

[19:31] * masak misses sorear

[19:32] * moritz too

[19:32] <moritz> wander what ey are up to, hm?

[19:32] <El_Che> nietzca guy?

[19:32] <masak> probably being wildly brilliant in some organization somewhere

[19:33] <masak> El_Che: "niecza", yes

[19:33] * masak is to blame for the name

[19:33] * moritz blames masak

[19:34] <masak> there was a Czech music video which had been subtitled hilariously in Swedish... :)

[19:34] <masak> ...and sorear asked me "what should I name my Perl 6 implementation?"

[19:34] <masak> so I told him to name it "niecza", as a contraction of the name of that song

[19:34] <El_Che> masak: you doomed him

[19:35] <El_Che> he wrote the implementation alone?

[19:35] <masak> largely

[19:35] <El_Che> wow

[19:35] <masak> I remember colomon++ helping him a bit

[19:35] * geekosaur has encountered evidence of sorear in multiple contexts. tends to do something for a bit and then move on

[19:35] <masak> but yes, he is the closest we've had to reaching au++ levels of "hare" productivity

[19:36] <masak> there was a time just before or during the ng refactor when niecza was clearly better than rakudo in a number of ways

[19:36] * geekosaur remembers that

[19:37] <El_Che> the moving on from parrot left a lot of scars. Niecza seem to just have vanished

[19:37] <thowe> github last updated in 2014

[19:37] <thowe> Jan, 2014

[19:38] <masak> El_Che: I seem to remember sorear saying something to the effect that ng had made niecza obsolete

[19:38] <moritz> El_Che: Stefan found out that he preferred writing software that end users used directly

[19:38] <Geth> ¦ doc: de1ae72470 | (Zoffix Znet)++ | xt/duplicates.t

[19:38] <Geth> ¦ doc: Exclude false positives on stuff like `C C<Str>`

[19:38] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/de1ae72470

[19:38] *** lizmat left
[19:38] <El_Che> yet, he's working on the opensource sparc implementation it seem

[19:38] <El_Che> s

[19:39] <Geth> ¦ doc: ff6469986a | (Zoffix Znet)++ | 4 files

[19:39] <Geth> ¦ doc: s:g/Perl )>\d/Perl /

[19:39] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ff6469986a

[19:41] *** trnh is now known as dct

[19:41] *** lizmat joined
[19:44] <Geth> ¦ doc: 589bdcdb7a | (Zoffix Znet)++ | doc/Language/glossary.pod6

[19:44] <synopsebot> Link: https://doc.perl6.org/language/glossary

[19:44] <Geth> ¦ doc: Use less-proper English

[19:44] <Geth> ¦ doc: 

[19:44] <Geth> ¦ doc: - To not trigger "space after comma" test

[19:44] <Geth> ¦ doc: - Also looks prettier

[19:44] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/589bdcdb7a

[19:44] <Geth> ¦ doc: 07416ef2ae | (Zoffix Znet)++ | 2 files

[19:45] <Geth> ¦ doc: Make xtest passs

[19:45] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/07416ef2ae

[19:45] *** natrys left
[19:46] <Geth> ¦ doc/post-release-2018.03: 14 commits pushed by (Will "Coke" Coleda)++, cfa++, (Tom Browder)++, (Aleks-Daniel Jakimenko-Aleksejev)++, (Zoffix Znet)++

[19:46] <Geth> ¦ doc/post-release-2018.03: review: https://github.com/perl6/doc/compare/73602ade2339...8bede1c3cad9

[19:46] *** domidumont left
[19:47] *** natrys joined
[19:47] *** dct left
[19:52] *** dct joined
[19:54] *** mr_ron left
[19:56] *** andrzejku joined
[19:57] *** comborico1611 joined
[19:57] *** neilb joined
[19:57] *** Zoffix joined
[19:58] <Zoffix> moritz: does www.p6c.org have IPv6 address? I'm preparing all the info pmichaud will need for moving rakudo.org

[20:01] *** andrzejku left
[20:03] *** cfa left
[20:03] <Zoffix> nm, got it https://github.com/perl6/infrastructure-doc/blob/master/hosts/www.p6c.org.pod#network

[20:03] *** Zoffix left
[20:04] *** dct left
[20:08] <moritz> Zoffix, I can bind an IPv6 address specifically for rakudo.org to the interface

[20:10] *** dct joined
[20:14] *** andrzejku joined
[20:15] <moritz> .tell Zoffix just added 2001:780:101:ff00::80:A as an IPv6 address for rakudo.org to www.p6c.org

[20:15] <yoleaux> moritz: I'll pass your message to Zoffix.

[20:24] *** lalitmee left
[20:24] <Geth> ¦ infrastructure-doc: 2caf0df4b5 | (Zoffix Znet)++ (committed using GitHub Web editor) | hosts/www.p6c.org.pod

[20:24] <Geth> ¦ infrastructure-doc: List rakudo.org's IPv6 address

[20:24] <Geth> ¦ infrastructure-doc: 

[20:24] <Geth> ¦ infrastructure-doc: https://irclog.perlgeek.de/perl6/2018-03-17#i_15933803

[20:24] <Geth> ¦ infrastructure-doc: review: https://github.com/perl6/infrastructure-doc/commit/2caf0df4b5

[20:25] *** pierre joined
[20:26] *** mr_ron joined
[20:27] *** dct left
[20:29] <thowe> My "Perl 6 Fundamentals" book arrived via Royal Mail!  Royal!

[20:30] *** pierre left
[20:31] <thowe> God save the queen!

[20:32] * moritz hums the Anthem

[20:33] <El_Che> The Sex Pistols' version, I hope

[20:33] <thowe> My favorite TV shows are all British.  I watch Edwardian Farm and the others like that over and over again like a maniac.

[20:33] <thowe> God save Peter Ginn!

[20:34] <thowe> I wish they would put those on Netflix.

[20:35] <thowe> The Grammars book is bigger than the Fundamentals book

[20:37] <moritz> can confirm :-)

[20:38] <thowe> gotta get a pencil out and do this sudoku puzzle

[20:39] *** rindolf left
[20:40] <thowe> so, please correct me if I am wrong, but "context" isn't a thing in Perl6, right?

[20:41] <El_Che> thowe: that depends on the context 

[20:41] *** pierre joined
[20:41] <thowe> that's a paddlin...  :|

[20:41] <moritz> thowe: in Perl 6, context is more of a standard library feature than a language feature

[20:41] <Geth> ¦ rakudo.org: 2a318262d1 | (Zoffix Znet)++ | 53 files

[20:41] <Geth> ¦ rakudo.org: Copy 100% of blog posts from old rakudo.org

[20:41] <Geth> ¦ rakudo.org: 

[20:41] <Geth> ¦ rakudo.org: May as well keep the old ones for historical reasons

[20:41] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/2a318262d1

[20:41] <moritz> in perl 5, a function knows which context (scalar/list/void) it's called in

[20:42] <thowe> so, I see this gather take structure thingy...  It it correct to say gather returns an array or a list?

[20:42] <moritz> in perl 6, a function just returns an object, and that object might know what to in a string or in a numeric context

[20:42] <moritz> so basically the context decision is delayed

[20:42] <moritz> thowe: a sequence actually, but close enough

[20:45] <thowe> Sweet baby zombie Jesus...  I'm gonna have fun at work again.

[20:45] *** pierre left
[20:47] <Geth> ¦ rakudo.org: c12600fd1d | (Zoffix Znet)++ | 3 files

[20:47] <Geth> ¦ rakudo.org: Hide posts older than 1.5y under "Archived Posts" button

[20:47] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/c12600fd1d

[20:48] *** dct joined
[20:50] <thowe> Perl6 is an interesting mix of the familiar and comfortable and the WTF and weird.

[20:50] *** eliasr left
[20:52] <thowe> and I mean that in an appreciative and fun way.  It's "charming" one might say.

[20:53] *** kaare__ joined
[20:55] *** comborico1611 left
[20:55] <moritz> so you say it's "charming", not charming :-)

[20:55] <El_Che> thowe programming Perl 6: https://pbs.twimg.com/media/DYhB5FZX4AUKf3N.jpg <-- he looks happy

[20:55] <moritz> (ignore me, i'm just trolling)

[20:56] *** FROGGS joined
[20:56] <thowe> looks like he grasping for air

[20:56] <thowe> gasping

[20:57] <El_Che> that depends on the context :)

[20:59] <thowe> I'll rephrase:  Perl6 is an charming mix of the familiar and comfortable and the WTF and weird.

[20:59] *** MasterDuke joined
[21:02] <thowe> s/an/a/

[21:16] <Geth> ¦ rakudo.org/downloads-logger: 4b2df2a879 | (Zoffix Znet)++ | 5 files

[21:16] <Geth> ¦ rakudo.org/downloads-logger: Stash downloads logger

[21:16] <Geth> ¦ rakudo.org/downloads-logger: 

[21:16] <Geth> ¦ rakudo.org/downloads-logger: Started of as a good idea, but since we list commands to install from

[21:16] <Geth> ¦ rakudo.org/downloads-logger: 3rd party packages right on the pages, we've no good way of knowing

[21:16] <Geth> ¦ rakudo.org/downloads-logger: whether or not a user actually simply installed something by running

[21:16] <Geth> ¦ rakudo.org/downloads-logger: "docker pull rakudo-star", which would make the logged data

[21:16] <Geth> ¦ rakudo.org/downloads-logger: participation-biased AF, so there's little point in logging it.

[21:16] <Geth> ¦ rakudo.org/downloads-logger: review: https://github.com/perl6/rakudo.org/commit/4b2df2a879

[21:16] <moritz> m: say 42

[21:16] <camelia> rakudo-moar b75d9b1e1: OUTPUT: «42␤»

[21:18] <mst> thowe: note that there's mnore than one perl5 implementation of gather/take, albeit they're not quite as cool as the real thing

[21:20] <moritz> one of them from me :-)

[21:23] <thowe> mst, dude.  Long time no chat.  How are you?

[21:24] <mst> not bad

[21:25] *** mr_ron left
[21:26] *** dct left
[21:26] <El_Che> mst: that sounds as not good

[21:27] <El_Che> hopefully it's just the lack of intonation (of shouting) of irc

[21:27] *** natrys left
[21:27] *** natrys joined
[21:27] *** wamba left
[21:27] <mst> it's an english-ism - 'not bad' / 'not so bad' is kinda like 'yeah, alright'

[21:28] <TEttinger> similar to lagom in svenska, right?

[21:28] *** teun_ joined
[21:29] *** wamba joined
[21:29] <El_Che> mst: yeah, I know it, same as in Dutch

[21:29] <TEttinger> probably lots of languages have some word for "not great, but at least it isn't bad"

[21:29] *** hankache left
[21:29] <TEttinger> El_Che: "nat baad", maybe?

[21:30] <TEttinger> :)

[21:30] <mst> El_Che: I periodically get 'that sounds as not good' non-ironically from USians

[21:30] <El_Che> wel, in dutch "not bad" with the right tone means "great"

[21:30] <TEttinger> it's kinda funny how close dutch and english can be sometimes, and how not at others

[21:30] * mst blames the rebellious colonials and their fear of the letter 'u'

[21:30] <FROGGS> El_Che: same in german

[21:31] <mst> El_Che: definitely 'not bad at all' means 'great'

[21:31] <TEttinger> similar to "nothing wrong with that"

[21:31] <El_Che> TEttinger: read 'The Canterbury Tales"

[21:31] *** teun_ left
[21:31] <TEttinger> heh, wasn't that old english or middle english?

[21:31] <El_Che> I am under the impression that knowing dutch is more helpful than modern English 

[21:32] <TEttinger> for reading the canterbury tales, you mean?

[21:32] <El_Che> in general, but yes :)

[21:32] <TEttinger> I bet that makes sense. some languages change less than others for weird reasons, like Icelandic is almost the same as Old Norse, just with newer vocabulary

[21:33] <TEttinger> they use letters like eth and thorn that haven't been used except by them and the Vikings

[21:34] <TEttinger> meanwhile Mongolian has changed tremendously since the language spoken by Genghis Khan, in about the same time frame

[21:35] <TEttinger> from what I understand if someone spoke Old Mongol in Ulaan Bataar today, they would be unintelligible. probably similar with Old English and modern UK or US english

[21:35] *** epony left
[21:36] *** MasterDuke left
[21:37] <El_Che> TEttinger: I read quite a lot of early 17th century spanish, dutch and french

[21:38] <El_Che> only Spanish looks like it was written yesterday (with some minor spelling changes)

[21:38] <TEttinger> wow, that's neat

[21:38] <TEttinger> french uses some ligatures way less, like the "oe" is one letter in "oeil" for eye

[21:39] <El_Che> and the interesting part was that a lot of expressions that are unknown in Spain and popular in Latin America (and are thus received as typical latinamerican) are in fact spanish

[21:39] <TEttinger> but the "oe" ligature isn't usually on keyboards

[21:39] <TEttinger> wow

[21:39] <El_Che> lot of them were used by the king in his letters

[21:39] <El_Che> expression that nowadays are considered lower class

[21:39] <El_Che> in Latin America

[21:39] <El_Che> and non exisitant in Spain

[21:39] <El_Che> complete mindfuck

[21:39] <TEttinger> funny how that happens

[21:40] <TEttinger> and "..." comes from portugal apparently

[21:40] <El_Che> isn't it a perl 6 thing?

[21:40] <TEttinger> they found some incredibly old merchant document that has an odd form of ..., like vertically

[21:41] <TEttinger> which I wouldn't be surprised if P6 could handle vertical splats

[21:41] *** MasterDuke joined
[21:42] *** wamba left
[21:44] <TEttinger> ah, it was @ not ... https://en.wikipedia.org/wiki/At_sign#History

[21:46] <TEttinger> apenstaartje

[21:49] *** mr_ron joined
[21:58] <Geth> ¦ rakudo.org: c9abc2d5e2 | (Zoffix Znet)++ | assets/sass/main.scss

[21:58] <Geth> ¦ rakudo.org: Implement print sheet

[21:58] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/c9abc2d5e2

[22:03] *** natrys left
[22:14] <AlexDaniel> Can anybody recommend me some cool terminal emulator? Final Term looked promising but it is abandoned, Upterm is using Electron so not an option for me, Terminator is no longer a thing it seems, Terminology is probably not what I'm looking for also (but it looks kinda ok), st is obviously not what I need because that shit is broken (at least last time I looked at it). Currently I'm using urvxt

[22:15] *** comborico1611 joined
[22:16] <El_Che> AlexDaniel: I am happy with Gnome-Terminal. Am I a bad person?

[22:16] <AlexDaniel> El_Che: I don't know, haven't tried that

[22:16] <MasterDuke> AlexDaniel: https://github.com/Swordfish90/cool-retro-term

[22:17] <AlexDaniel> but generally I like developer-oriented tools, so hoping to find something to resemble that… I know it sounds funny if we're talking about terminal emulators

[22:18] *** pierre joined
[22:18] <AlexDaniel> for example in file managers there's this range from “this thing can't open a terminal cd-ed to the current path” to “omg I can assign a keyboard shortcut to any button!”

[22:20] <AlexDaniel> so my set of tools goes kinda like this: i3, spacefm, nomacs, urvxt… You see, it doesn't really fit there, definitely there must be something better than just urvxt?

[22:23] <AlexDaniel> MasterDuke: I've seen that, yes… but I'm looking for something practical I think

[22:23] <mst> possibly http://www.leonerd.org.uk/code/pangoterm/ ?

[22:23] *** pierre left
[22:23] *** evalable6 left
[22:23] *** evalable6 joined
[22:25] <MasterDuke> AlexDaniel: yeah, i don't use it regularly, but it's fun to show off

[22:25] *** kybr joined
[22:27] <AlexDaniel> heh, this is interesting: http://xiki.org/screencasts/

[22:30] *** comborico1611 left
[22:31] <MasterDuke> ah, i'd see that a while ago. remindes me of TermKit https://github.com/unconed/TermKit

[22:32] <El_Che> what does a terminal have to do except non sucking at rendering text?

[22:33] *** andrzejku left
[22:33] <AlexDaniel> near-infinite history would be nice, clickable urls and file paths

[22:33] <El_Che> collegues that use windows use terminals on steroids like MobaXTerm

[22:33] <AlexDaniel> supporting unicode properly (at least not breaking up when pasting emojis)

[22:33] <El_Che> on my linux machine, I just need ctl+alt+t to open the terminal

[22:34] <El_Che> gnome-terminal has clickable urls and infinite buffer

[22:34] <El_Che> unicode looks ok to me

[22:34] <El_Che> let me check paths

[22:35] <TEttinger> I usse cmder on windows

[22:35] <El_Che> it doesn't do much with paths (but I don't know what's supposed to do)

[22:36] <AlexDaniel> El_Che: a dropdown with options sounds reasonable

[22:36] <AlexDaniel> El_Che: maybe take a look at Final Term for some inspiration :)

[22:36] <El_Che> for urls you get "open link" and "copy link address"

[22:36] <AlexDaniel> hmm

[22:37] <El_Che> nothing for path

[22:37] <El_Che> but that's more of a bash thing in my workflow

[22:37] <AlexDaniel> right

[22:38] <El_Che> xfce-terminal was kind of OK

[22:38] <MasterDuke> i like konsole just fine

[22:39] <El_Che> https://en.wikipedia.org/wiki/Tilda_(software)

[22:39] <El_Che> this sounds leet

[22:45] <japhb> El_Che: Re: gnome-terminal paths: If you are in a terminal and cd to ~/foo/bar/baz and then hit the shortcut to start a new terminal, it will spawn the new shell with CWD=~/foo/bar/baz.

[22:46] <japhb> I use that all the time to go into a working tree and open several terminals there.

[22:46] <El_Che> japhb: yes, that's something I find pretty useful

[22:46] <El_Che> same here

[23:03] *** SyrupThinker left
[23:12] *** Zoffix joined
[23:12] <Zoffix> AlexDaniel: what did you use to check for bad links on the docs site?

[23:17] <Zoffix> moritz: how is SSL setup on docs.perl6.org? I'm getting SSl warnings from link checker: https://gist.github.com/zoffixznet/2070938336b3d5273aeb6f1db5ae6af9   says doesn't match "alerts.perl6.org"... Maybe I messed stuff up? IIRC I've used certbot to setup alerts.perl6.org cert

[23:24] *** epony joined
[23:24] <Zoffix> ZofBot: nobody knows... 

[23:24] <ZofBot> Zoffix, [freebsd] Build failed. See the output at http://fpaste.scsys.co.uk/575932

[23:24] <yoleaux> 16 Mar 2018 22:32Z <samcv> ZofBot: no it isn't current

[23:25] <thowe> I assume I can create an array of hash much the same way as in perl5?

[23:26] <AlexDaniel> Zoffix: checklink -b -D 25 -q doc.perl6.org | tee "$(date '+%F')"

[23:26] <El_Che> thowe: yes

[23:26] *** ZofBot joined
[23:26] *** ChanServ sets mode: +v ZofBot

[23:26] <AlexDaniel> a depth of 25 may be too deep for your purpose fwiw

[23:27] <El_Che> although you can skip the reference syntax

[23:27] <thowe> El_Che, Oh?

[23:27] <Geth> ¦ rakudo.org: 4260d5779b | (Zoffix Znet)++ | 2 files

[23:27] <Geth> ¦ rakudo.org: Add exception pages

[23:27] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/4260d5779b

[23:27] <Zoffix> AlexDaniel: thanks.

[23:29] <Zoffix> thowe: there ain't no references in Perl 6; we got containers instead https://perl6advent.wordpress.com/2017/12/02/

[23:30] <Zoffix> Well, not instead, but similar to

[23:30] <thowe> Zoffix, thanks!

[23:31] <El_Che> m: my @a = { a => 1, b => 1}, {a => 2, b => 2}; say @a[0]{"a"}

[23:31] <camelia> rakudo-moar b75d9b1e1: OUTPUT: «1␤»

[23:32] <El_Che> ^-- thowe 

[23:32] <El_Che> m: my @a = { a => 1, b => 1}, {a => 2, b => 2}; say @a[0]<a>

[23:32] <camelia> rakudo-moar b75d9b1e1: OUTPUT: «1␤»

[23:32] <El_Che> maybe more ideomatic

[23:33] <El_Che> m: my @a = { a => 1, b => 1}, {a => 2, b => 2}; my %h = @a[1]; say %h<b>

[23:33] <camelia> rakudo-moar b75d9b1e1: OUTPUT: «2␤»

[23:33] <El_Che> you don't have to dereference

[23:33] <thowe> \o/

[23:34] <thowe> My Ruby-loving compatriot will like that

[23:35] <El_Che> he'll dislike the ';' though

[23:35] <thowe> That sonofagun has been trying to rewrite my invoice processor for months and failing to understand the details.  I'll have this sunnybeach whipped up in a week.

[23:36] <El_Che> ubris, the privilege of gods!

[23:37] <thowe> Don't need to confuse things with an integer math lib, and DateTime is built in.  I'll smash this sucker.

[23:37] <Zoffix> m: my @a = %(:1a, :1b), %(:2a, :2b) andthen my %h := @a.tail andthen say %h<b>

[23:37] <camelia> rakudo-moar b75d9b1e1: OUTPUT: «2␤»

[23:37] <El_Che> showoff :)

[23:37] <Zoffix> :)

[23:37] <thowe> OK, let's not hurt my head

[23:38] <thowe> I haven't figured out what these :things are yet.

[23:38] <Zoffix> huggable: colonpair

[23:38] <huggable> Zoffix, All the shortcuts of colonpairs: https://twitter.com/zoffix/status/839807414211854337

[23:38] <Zoffix> thowe: ^ colonpairs. There's a billion shortcuts for them, because they're very commonb

[23:38] <El_Che> thowe: be careful or Zoffix will throw some urf8 into the mix

[23:39] <Zoffix> m: sub term:<¯\_(ツ)_/¯> { say "what head hurt?" };       ¯\_(ツ)_/¯

[23:39] <camelia> rakudo-moar b75d9b1e1: OUTPUT: «what head hurt?␤»

[23:39] <El_Che> :)

[23:41] <thowe> I'm writing this in ruby-ish baby Perl6 so that my billing person doesn't have a sad.

[23:41] <thowe> and because that will be the extent of my power for a while

[23:41] <El_Che> thowe: throw some concurrency in the mix, that seems to impress ruby people

[23:42] <thowe> Well, the actual calculator may become a higher order function generator thingy...

[23:43] <thowe> But that's just because I had fun learning what those were from Damian Conway.

[23:44] <El_Che> perl 6 kept the foot-in-your-foot-by-writing-code-noone-understands feature of perl 5. So use with moderation

[23:44] <thowe> I attended a class a couple of years ago on a whim.  I didn't get to stick around for the whole thing because I had to fly home, but it was worth it.

[23:44] <AlexDaniel> MasterDuke: Termite is perhaps something to consider if you're using vim?

[23:44] <thowe> The Perl6 folks I met in Orlando were very nice and fun.

[23:49] <AlexDaniel> “Uses OpenGL for rendering, offloads rendering to the GPU for lower system load and buttery smooth scrolling. Uses threaded rendering to minimize input latency.”

[23:50] <AlexDaniel> something you don't expect to read about a terminal emulator ↑ :)

[23:51] <El_Che> ↑: it mines monero when not in focus

[23:52] <AlexDaniel> CPU usage: kitty 6 - 8%, gnome-terminal 15 - 17%

[23:53] <AlexDaniel> if anything is mining coins, then it's gnome-terminal :)

[23:53] <AlexDaniel> ah

[23:53] <AlexDaniel> sorry, CPU usage!

[23:53] <El_Che> gnome-shell is pretty crappy cpu wise

[23:53] <AlexDaniel> of course it wouldn't use CPU for that

[23:54] <El_Che> it uses some cpu to throw you off track :)

[23:55] <AlexDaniel> El_Che: “what does a terminal have to do except non sucking at rendering text?” what about this: “Allows you to open the scrollback buffer in a separate window using arbitrary programs of your choice. This is useful for browsing the history comfortably in a pager or editor.”

[23:57] <El_Che> sounds useful when using screen and wanting to scroll (crap shortcuts :) )

[23:58] *** khw joined
