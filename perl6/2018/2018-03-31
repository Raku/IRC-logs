[00:01] *** kurahaupo joined
[00:03] *** chartractegg joined
[00:15] *** kurahaupo left
[00:15] *** chartractegg left
[00:16] *** kurahaupo joined
[00:30] *** kurahaupo left
[00:31] *** kurahaupo joined
[00:34] *** st_elmo joined
[00:34] *** st_elmo left
[00:41] *** kurahaupo left
[00:42] *** kurahaupo joined
[00:52] *** kurahaupo left
[00:53] *** kurahaupo joined
[01:02] *** wamba left
[01:07] *** kurahaupo left
[01:09] *** kurahaupo joined
[01:16] *** pierre_ joined
[01:21] *** kurahaupo left
[01:21] *** pierre_ left
[01:21] *** kurahaupo joined
[01:21] <buggable> New CPAN upload: Net-LibIDN-0.0.2.tar.gz by KAIEPI https://cpan.metacpan.org/authors/id/K/KA/KAIEPI/Perl6/Net-LibIDN-0.0.2.tar.gz

[01:21] <buggable> New CPAN upload: Net-LibIDN2-0.0.3.tar.gz by KAIEPI https://cpan.metacpan.org/authors/id/K/KA/KAIEPI/Perl6/Net-LibIDN2-0.0.3.tar.gz

[01:28] *** FROGGS_ left
[01:33] *** kurahaupo left
[01:34] *** kurahaupo joined
[01:40] *** cdg joined
[01:41] *** FROGGS_ joined
[01:44] *** mcmillhj joined
[01:45] *** cdg left
[01:45] *** agwind left
[01:46] *** kurahaupo left
[01:46] *** ilbot3 left
[01:46] *** kurahaupo joined
[01:49] *** mcmillhj left
[01:57] *** ilbot3 joined
[01:57] *** ChanServ sets mode: +v ilbot3

[02:01] *** kurahaupo left
[02:01] *** kurahaupo joined
[02:06] <Kaiepi> how do you get cpan modules to link to your github account

[02:12] *** kurahaupo left
[02:12] *** kurahaupo joined
[02:15] <Kaiepi> i have my authors and git linked in META6.json, but cpan still doesn't link to my github

[02:22] *** kurahaupo left
[02:24] *** kurahaupo joined
[02:38] *** kurahaupo left
[02:38] *** kurahaupo joined
[02:44] *** Sgeo joined
[02:46] *** Sgeo__ left
[02:49] *** kurahaupo left
[02:50] *** kurahaupo joined
[02:59] *** eliasr left
[02:59] *** kybr left
[03:01] *** kybr joined
[03:02] *** kurahaupo left
[03:02] *** kurahaupo joined
[03:08] *** sauvin joined
[03:13] *** kurahaupo left
[03:16] *** pierre joined
[03:19] *** kurahaupo joined
[03:20] *** pierre left
[03:27] *** pharv left
[03:34] *** kurahaupo left
[03:34] *** kurahaupo joined
[03:39] *** cdg joined
[03:43] *** cdg left
[03:44] *** mcmillhj joined
[03:49] *** kurahaupo left
[03:49] *** kurahaupo joined
[03:49] *** mcmillhj left
[04:04] *** kurahaupo left
[04:05] *** kurahaupo joined
[04:18] *** kurahaupo left
[04:20] *** kurahaupo joined
[04:24] *** araraloren joined
[04:26] <araraloren> good noon :)

[04:28] *** entonian joined
[04:33] *** kurahaupo left
[04:34] *** kurahaupo joined
[04:34] *** entonian left
[04:42] *** khw left
[04:43] <Kaiepi> evening

[04:44] *** kurahaupo left
[04:44] *** kurahaupo joined
[04:48] *** athenot_ joined
[04:48] *** athenot left
[04:54] *** troys left
[04:59] *** kurahaupo left
[04:59] *** kurahaupo joined
[05:00] *** [particle]1 joined
[05:01] *** cdg joined
[05:01] *** [particle] left
[05:05] *** cdg left
[05:14] *** kurahaupo left
[05:14] *** kurahaupo joined
[05:18] *** wamba joined
[05:22] *** [particle]1 left
[05:26] *** kurahaupo left
[05:27] *** kurahaupo joined
[05:27] *** araraloren left
[05:27] *** araraloren joined
[05:30] *** [particle] joined
[05:34] *** raschipi joined
[05:35] *** skids left
[05:38] *** [particle]1 joined
[05:39] *** kurahaupo left
[05:40] *** [particle] left
[05:40] *** kurahaupo joined
[05:40] *** [particle] joined
[05:43] *** [particle]1 left
[05:46] *** [particle]1 joined
[05:46] *** [particle] left
[05:48] *** AlexDaniel left
[05:52] *** kurahaupo left
[05:52] *** kurahaupo joined
[05:53] *** raschipi left
[06:00] *** wamba left
[06:03] *** kurahaupo left
[06:03] *** kurahaupo joined
[06:11] *** sena_kun joined
[06:15] *** kurahaupo left
[06:16] *** kurahaupo joined
[06:26] *** kurahaupo left
[06:27] *** kurahaupo joined
[06:42] *** kurahaupo left
[06:42] *** kurahaupo joined
[06:57] *** kurahaupo left
[06:58] *** jmerelo joined
[06:58] *** kurahaupo joined
[06:59] <jmerelo> Good morning all

[07:00] *** pierre joined
[07:06] *** domidumont joined
[07:12] *** domidumont left
[07:13] *** domidumont joined
[07:13] *** kurahaupo left
[07:14] *** kurahaupo joined
[07:16] <Geth> ¬¶ perl6-pod-to-bigpage: JJ++ created pull request #10: Eliminates link to non-existing css

[07:16] <Geth> ¬¶ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/pull/10

[07:27] *** darutoko joined
[07:28] *** kurahaupo left
[07:41] *** alpha6 left
[07:41] *** alpha6 joined
[07:45] *** mcmillhj joined
[07:47] <jmerelo> mcmillhj: hi!

[07:49] *** mcmillhj left
[07:57] <El_Che> jmerelo: morning

[08:05] *** rindolf joined
[08:14] *** domidumont left
[08:18] *** domidumont joined
[08:31] *** cdg joined
[08:32] <jmerelo> 4 perl6 questions yesterday in StackOverflow. That's really a record...

[08:32] <El_Che> nice

[08:34] <jmerelo> Please drop by https://stackoverflow.com/questions/tagged/perl6 from time to time and give SO juice to questions and/or answers, to encourage them. Also answer to clarify or help in any way you can. 

[08:34] <El_Che> stackoverflow

[08:34] <El_Che> it must been years since I logged in

[08:35] *** cdg left
[08:36] <Kaiepi> i like helping out whenever i can

[08:36] <El_Che> I suspect I've used deffirent aliases

[08:37] <El_Che> the one I can find has some posts in 2009 and 2011 :)

[08:37] <jmerelo> Kaiepi: great :-)

[08:37] <El_Che> lol

[08:38] <El_Che> I am in the top 10% for perl

[08:38] <El_Che> that means that stackoverflow for perl is not very active

[08:38] <Kaiepi> i used it for a bit a few years ago but switched aliases when i wanted to move in a different direction for programming

[08:38] <Kaiepi> which is why my github's pretty small

[08:39] <jmerelo> El_Che: unfortunately, it's not, but there's a good dozen questions every day. Perl6 gets binary questions: one or none per day. Probably yesterday was the day with the most questions.

[08:39] <El_Che> I had lots of solaris code that I even didn't bother to see if it worked on Linux

[08:39] <El_Che> no point in putting that online

[08:39] <jmerelo> Most questions are knowledgeably answered, anyway. But I'd like to see how it scales up. Good SO presence is essential for a healthy community (and to be noticed)

[08:39] <El_Che> jmerelo: I'll try to participate on SO more then

[08:41] <Kaiepi> it'd be worth it to be able to pick up some things along the way

[08:42] <El_Che> (musings: I am writing something in MS Office in a VM for reasons, and I must say the thesaurus is damn handy compared to LIbreOffice)

[08:42] <jmerelo> El_Che: you must not say that.

[08:42] <jmerelo> El_Che: you *want* to say that.

[08:43] <jmerelo> El_Che: I've mostly stopped using either. Either Google Docs for online collaboration, or emacs and markdown.

[08:43] <El_Che> I wrote my previous thesis on OpenOffice

[08:43] <El_Che> (LibreOffice wasn't forked yet)

[08:43] <Kaiepi> vim, latex when i want stuff to look presentable

[08:43] <jmerelo> El_Che: I used WordPerfect for nine, 1994 vintage...

[08:43] <El_Che> and the previous one before that, in Star Office

[08:44] <El_Che> I lived through history :)

[08:44] <jmerelo> s/nine/mine/

[08:44] <El_Che> jmerelo: yes, I started my first thesis on Word Perfect

[08:44] <El_Che> But it had an annoying bug

[08:44] <El_Che> "√©" crashed the thing

[08:44] <El_Che> then I tried MS word

[08:44] <El_Che> and 50+ pages crashed the thing

[08:45] <Kaiepi> i used to use indesign since word pissed me off so much

[08:45] <El_Che> I think wordperfect for DOS was my first editor

[08:45] <jmerelo> El_Che: yep. I remember setting it to auto-save every minute or so.

[08:46] <El_Che> at work, I am aggressively pushing for MD for technical documentation

[08:46] <El_Che> some people wanted MS word and MS foundation

[08:46] <El_Che> for a interteam group focussed on devops

[08:46] <El_Che> you should have heard me laugh :)

[08:47] <El_Che> we decided to document our stuff in git + md, and the guy that has/want to interact with management can transcribe to whatever he wants :)

[08:48] <El_Che> yesterday I missed Perl's TT and Ruby's erb for the first time in my life

[08:48] <El_Che> Golang's templating is awful

[08:49] <El_Che> thanks to puppet I got pretty fluent in Ruby's erb

[08:49] <El_Che> (removing puppet from out setup, hence the move)

[08:50] <jmerelo> El_Che: :-)

[08:53] *** Guest28836 joined
[08:53] <Guest28836> is it possible to get the name of a variable?

[08:54] <araraloren> yeah

[08:54] <araraloren> m: my $x = 10; say $x.VAR.name;

[08:54] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´$x‚ê§¬ª

[08:56] <Guest28836> for $x in [$a,$b,$c] {$x.VAR.name} # but get the a/b/c instead of x

[08:57] <araraloren> m: for $x in [$a,$b,$c] {say $x.VAR.name}

[08:57] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$x' is not declared‚ê§at <tmp>:1‚ê§------> 3for 7‚èè5$x in [$a,$b,$c] {say $x.VAR.name}‚ê§¬ª

[08:57] <araraloren> m: for [$a,$b,$c] -> $x {say $x.VAR.name}

[08:57] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$a' is not declared‚ê§at <tmp>:1‚ê§------> 3for [7‚èè5$a,$b,$c] -> $x {say $x.VAR.name}‚ê§¬ª

[08:58] <araraloren> m: my ($a, $b, $c); for [$a,$b,$c] -> $x {say $x.VAR.name}

[08:58] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´$x‚ê§$x‚ê§$x‚ê§¬ª

[08:58] <araraloren> that's impossible , get a b c

[08:58] *** |oLa| joined
[08:58] <araraloren> m: my ($a, $b, $c); for [$a,$b,$c] -> \x {say x.VAR.name}

[08:58] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´<element>‚ê§<element>‚ê§<element>‚ê§¬ª

[09:01] <lizmat> m: my ($a, $b, $c); for $a,$b,$c -> \x {say x.VAR.name} # don't put them in an array

[09:01] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´$a‚ê§$b‚ê§$c‚ê§¬ª

[09:02] <lizmat> m: my ($a, $b, $c); for $a,$b,$c -> $x {say x.VAR.name} # -> $x re-containerizes, so you see the name of the new container

[09:02] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    x used at line 1‚ê§‚ê§¬ª

[09:02] <lizmat> m: my ($a, $b, $c); for $a,$b,$c -> $x {say $x.VAR.name} # -> $x re-containerizes, so you see the name of the new container

[09:02] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´$x‚ê§$x‚ê§$x‚ê§¬ª

[09:02] <araraloren> m: my ($a, $b, $c); for [$a,$b,$c] <-> \x {x = 20;}

[09:02] <camelia> rakudo-moar ac5cf2bb0: ( no output )

[09:02] <araraloren> m: my ($a, $b, $c); for [$a,$b,$c] <-> \x {x = 20;}; say $a;

[09:02] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´(Any)‚ê§¬ª

[09:02] <Guest28836> what about my($a,$b,$c);[$a,$b,$c].fmt($_.VAR.name ~ ": $_", "\n")

[09:03] <lizmat> m: my ($a, $b, $c); for $a,$b,$c <-> \x {x = 20;}; say $a;

[09:03] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´20‚ê§¬ª

[09:03] <araraloren> m: my ($a, $b, $c); for ($a,$b,$c) <-> \x {x = 20;}; say $a;

[09:03] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´20‚ê§¬ª

[09:03] <lizmat> araraloren: you don't need the parens

[09:03] <araraloren> List seems like ok ? so the Array also has some way like re-containerize ?

[09:04] <lizmat> m: my ($a, $b, $c); for $a,$b,$c -> \x {x = 20;}; say $a;  # nor do you need the <-> if you alias

[09:04] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´20‚ê§¬ª

[09:04] <lizmat> m: my ($a, $b, $c); for $a,$b,$c -> $x {$x = 20;}; say $a   # you do need it if you re-containerize

[09:04] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´Cannot assign to a readonly variable ($x) or a value‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:04] <lizmat> m: my ($a, $b, $c); for $a,$b,$c <-> $x {$x = 20;}; say $a   # you do need it if you re-containerize

[09:04] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´20‚ê§¬ª

[09:11] <araraloren> m: my ($a, $b, $c); my @x := ($a, $b, $c); for @x <-> \x {x = 20;}; say $a;

[09:11] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´20‚ê§¬ª

[09:12] <araraloren> m: my ($a, $b, $c); my @x := ($a, $b, $c); for @x <-> \x {say x.VAR.name; }; 

[09:12] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´$a‚ê§$b‚ê§$c‚ê§¬ª

[09:23] <El_Che> AlexDaniel`, Zoffix: idea for your bots. Post new perl6 question in SO to the channel

[09:24] <Guest28836> how do you format a float to have leading zeros? 3.3.fmt($x) # 03.30

[09:25] <El_Che> Guest28836: https://docs.perl6.org/routine/sprintf

[09:25] <Guest28836> that doesn't have leading zeros

[09:27] <Guest28836> m: 3.3.fmt('%.2f')

[09:27] <camelia> rakudo-moar ac5cf2bb0: ( no output )

[09:27] <Guest28836> m: 3.3.fmt('%.2f').say

[09:27] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´3.30‚ê§¬ª

[09:27] <Guest28836> m: 3.3.fmt('%2.2f').say

[09:27] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´3.30‚ê§¬ª

[09:28] *** pierre left
[09:29] *** pierre joined
[09:31] *** pierre left
[09:37] <Guest28836> m: my $x=3.3;Str(Int($x).fmt('%.2d')) ~ ($x%1).fmt('%.2f').substr(1)

[09:37] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "~" in expression "(Int($x).fmt('%.2d')) ~ ($x%1).fmt('%.2f').substr(1)" in sink context (line 1)‚ê§¬ª

[09:38] <Guest28836> m: my $x=3.3;say Str(Int($x).fmt('%.2d')) ~ ($x%1).fmt('%.2f').substr(1)

[09:38] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´03.30‚ê§¬ª

[09:46] *** aindilis left
[09:51] *** lalitmee joined
[09:54] *** frithnanth joined
[09:54] <titsuki_> m: sprintf("%05.2f",3.3).say

[09:54] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´03.30‚ê§¬ª

[09:55] <titsuki_> m: 3.3.fmt("%05.2f").say

[09:55] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´03.30‚ê§¬ª

[09:56] <titsuki_> both fmt and sprintf can make 03.30

[09:57] <jmerelo> For those active in StackOverflow, there are a few unanswered Perl6 questions in the queue https://stackoverflow.com/unanswered/tagged/perl6 The one on singletons is still interesting.

[10:00] <frithnanth> Hello, I'm trying to install Font::FreeType, but it fails during testing. I wanted to report a bug, but apparently the module is not hosted on github, instead there's a note telling to contact the developers through the #perl6 IRC channel

[10:00] <frithnanth> The error message is here: https://pastebin.com/raw/jybfifVA

[10:01] <jmerelo> frithnanth: author seems to be p6-pdf, as per the header. And the repo seems to be here https://github.com/p6-pdf/Font-FreeType-p6

[10:02] <timotimo> ther's nobody here called p6-pdf, though

[10:02] <timotimo> .seen dwarring

[10:02] <yoleaux> I saw dwarring 1 Jun 2017 21:48Z in #perl6: <dwarring> tbrowder: got it thanks!

[10:02] <timotimo> well, that's been a long time

[10:03] <timotimo> that repo does allow issues, though

[10:03] <jmerelo> timotimo: right, that's an organization, sorry. 

[10:04] *** avalenn left
[10:04] *** markong joined
[10:06] <timotimo> no prob

[10:08] <frithnanth> jmerelo: thanks

[10:08] *** Guest28836 left
[10:11] <jmerelo> frithnanth: no problem. Good luck.

[10:13] *** frithnanth left
[10:14] *** pierre joined
[10:18] *** frithnanth joined
[10:18] *** pierre left
[10:38] *** cdg joined
[10:43] *** cdg left
[10:44] *** vike joined
[10:44] <jmerelo> p6: my $start = now; say (<0 1>.roll xx 100000).sum; say now - $start; $start = now; say (Bool.roll xx 100000).sum; say now - $start;

[10:45] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´50191‚ê§0.3386439‚ê§50143‚ê§0.1431063‚ê§¬ª

[10:45] <jmerelo> Why is it much faster to generate and sum Bools than Ints?

[10:47] <jmerelo> p6: my $start = now; const zeroone = <0 1>; say (zeroone.roll xx 100000).sum; say now - $start; $start = now; say (Bool.roll xx 100000).sum; say now - $start;

[10:47] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Preceding context expects a term, but found infix = instead.‚ê§Did you make a mistake in Pod syntax?‚ê§at <tmp>:1‚ê§------> 3my $start = now; const zeroone =7‚èè5 <0 1>; say (zeroone.roll xx 100000).‚Ä¶¬ª

[10:47] <jmerelo> p6: my $start = now; constant zeroone = <0 1>; say (zeroone.roll xx 100000).sum; say now - $start; $start = now; say (Bool.roll xx 100000).sum; say now - $start;

[10:47] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´49830‚ê§0.3080233‚ê§49915‚ê§0.0921131‚ê§¬ª

[10:47] <jmerelo> Even slower...

[10:48] <jmerelo> p6: my $start = now; my $zeroone := <0 1>; say ($zeroone.roll xx 100000).sum; say now - $start; $start = now; say (Bool.roll xx 100000).sum; say now - $start;

[10:48] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´49982‚ê§0.28330960‚ê§50127‚ê§0.1403370‚ê§¬ª

[10:49] <jmerelo> p6: my $start = now; my $zeroone := (0,1); say ($zeroone.roll xx 100000).sum; say now - $start; $start = now; say (Bool.roll xx 100000).sum; say now - $start;

[10:49] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´50442‚ê§0.2558326‚ê§49917‚ê§0.1427861‚ê§¬ª

[10:49] <jmerelo> p6: my $start = now; my @zeroone := (0,1); say (@zeroone.roll xx 100000).sum; say now - $start; $start = now; say (Bool.roll xx 100000).sum; say now - $start;

[10:49] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´49995‚ê§0.3317698‚ê§49882‚ê§0.141525‚ê§¬ª

[10:50] <jmerelo> p6: my $start = now; say ((0,1).roll xx 100000).sum; say now - $start; $start = now; say (Bool.roll xx 100000).sum; say now - $start;

[10:50] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´50398‚ê§0.2622463‚ê§49749‚ê§0.13946825‚ê§¬ª

[10:50] <jmerelo> p6: my $start = now; say ((1,0).roll xx 100000).sum; say now - $start; $start = now; say (Bool.roll xx 100000).sum; say now - $start;

[10:50] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´49986‚ê§0.32676728‚ê§49964‚ê§0.14559766‚ê§¬ª

[10:50] <jmerelo> p6: my $start = now; say ((1,2).roll xx 100000).sum; say now - $start; $start = now; say (Bool.roll xx 100000).sum; say now - $start;

[10:50] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´150219‚ê§0.2608219‚ê§49980‚ê§0.1412020‚ê§¬ª

[10:51] <jmerelo> p6: my $start = now; say ((True,False).roll xx 100000).sum; say now - $start; $start = now; say (Bool.roll xx 100000).sum; say now - $start;

[10:51] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´50032‚ê§0.4048176‚ê§49841‚ê§0.1446197‚ê§¬ª

[10:52] <jmerelo> p6: my $start = now; my subset ZeroOne of Int where $_ = 0|1; say (ZeroOne.roll xx 100000).sum; say now - $start; $start = now; say (Bool.roll xx 100000).sum; say now - $start;

[10:52] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´Invocant of method 'Bridge' must be an object instance of type 'Int', not a type object of type 'ZeroOne'.  Did you forget a '.new'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[10:57] <jmerelo> p6: my $start = now; say ((0..1).roll xx 100000).sum; say now - $start; $start = now; say (Bool.roll xx 100000).sum; say now - $start;

[10:57] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´49949‚ê§0.278208‚ê§50128‚ê§0.114807‚ê§¬ª

[11:00] <lizmat> jmerelo: please make it a perf issue  :-)

[11:01] <jmerelo> lizmat: not sure if it's an issue or just the way it is... I'm surprised, that's all.

[11:02] <lizmat> without a ticket it will fall through the cracks  :-)

[11:02] <jmerelo> p6: my $start = now; my enum ZeroOne =<0 1>; say (ZeroOne.roll xx 100000).sum; say now - $start; $start = now; say (Bool.roll xx 100000).sum; say now - $start;

[11:02] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§An enum must supply an expression using <>, ¬´¬ª, or ()‚ê§at <tmp>:1‚ê§------> 3my $start = now; my enum ZeroOne7‚èè5 =<0 1>; say (ZeroOne.roll xx 100000).su‚ê§¬ª

[11:02] <jmerelo> lizmat: OK

[11:07] <jmerelo> p6: my $start = now; say ( (0..1).roll xx 100000); say now - $start; $start = now; say (Bool.roll xx 100000); say now - $start;

[11:07] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´(1 0 0 0 1 0 0 1 1 0 0 1 1 1 0 1 0 0 0 0 1 1 1 0 0 1 0 0 1 0 0 1 1 0 1 0 1 1 1 0 0 1 1 1 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 0 1 1 1 0 0 0 0 1 1 1 1 1 0 0 0 0 1 1 0 0 1 1 0 1 0 1 0 1 0 1 1 1 0 0 0 0 0 0 1 1 ...)‚ê§0.1881399‚ê§(False True True True True True‚Ä¶¬ª

[11:07] *** lalitmee left
[11:07] <jmerelo> p6: my $start = now; my $foo= ( (0..1).roll xx 500000); say now - $start; $start = now; my $bar = (Bool.roll xx 500000); say now - $start;

[11:07] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´0.847878‚ê§0.28053366‚ê§¬ª

[11:09] <jmerelo> p6: my $start = now; say ( (0..1).roll xx 100000).sum; say now - $start; $start = now; say (Bool.roll xx 100000).sum; say now - $start;

[11:09] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´50196‚ê§0.23688404‚ê§50295‚ê§0.14079907‚ê§¬ª

[11:09] <jmerelo> p6: my $start = now; say ( (0..1).roll xx 500000).sum; say now - $start; $start = now; say (Bool.roll xx 500000).sum; say now - $start;

[11:09] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´249997‚ê§1.0334842‚ê§250247‚ê§0.55719284‚ê§¬ª

[11:10] <timotimo> you perhaps want to have a private chat with camelia?

[11:11] <jmerelo> timotimo: :-) I'm done now.

[11:12] <timotimo> i'd bet Bool.roll is an optimized implementation

[11:13] <jmerelo> Looks like it https://github.com/rakudo/rakudo/blob/98e575de00db42101d4879e43fe740a34791c418/src/core/Bool.pm6#L23

[11:13] <timotimo> do you know about SourceBaby?

[11:13] <timotimo> s: Bool, 'roll', \(99)

[11:13] <SourceBaby> timotimo, Sauce is at https://github.com/rakudo/rakudo/blob/ac5cf2bb0/src/core/Bool.pm6#L32

[11:13] <jmerelo> timotimo: wow. No, I didn't know.

[11:13] <timotimo> interesting.

[11:15] <timotimo> ah, you were calling it with xx

[11:16] <timotimo> benchable6: compare HEAD say sum Bool.roll xx 500000; ||| say sum Bool.roll(500000)

[11:16] <benchable6> timotimo, starting to benchmark the 1 given commit

[11:16] <benchable6> timotimo, ¬¶HEAD: ¬´Benchmark: ‚ê§¬´timed out after 10 seconds¬ª¬ª

[11:16] <timotimo> haha

[11:16] <timotimo> benchable6: compare HEAD say sum Bool.roll xx 100000; ||| say sum Bool.roll(100000)

[11:16] <benchable6> timotimo, starting to benchmark the 1 given commit

[11:16] <benchable6> timotimo, https://gist.github.com/8d36dd8f2c497a1f8ec9d43d18078eab

[11:16] <timotimo> wowza

[11:16] <timotimo> that's incredible

[11:17] <timotimo> how can it be almost 10x faster to use xx?

[11:17] <timotimo> clearly we should just replace the implementation of Bool.roll(Bool:U: Int) to use xx instead of self.^enum_value_list.roll

[11:17] <lizmat> because xx is optimized better than Bool.roll(N) ?

[11:18] <timotimo> m: say Bool.^enum_value_list.^name

[11:18] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´List‚ê§¬ª

[11:18] <timotimo> Bool.roll(N) directly invokes List.roll

[11:19] *** pierre joined
[11:19] <jmerelo> Range seems to be computing the number of elements on the fly https://github.com/rakudo/rakudo/blob/98e575de00db42101d4879e43fe740a34791c418/src/core/Bool.pm6#L23

[11:19] <timotimo> i wonde rabout subclassability of Bool

[11:19] <timotimo> that seems to be the wrong url

[11:21] <timotimo> benchable6: compare HEAD say sum (0..1).roll(100_000) ||| say sum (0..1).roll xx 100_000

[11:21] <benchable6> timotimo, starting to benchmark the 1 given commit

[11:21] <benchable6> timotimo, https://gist.github.com/2d26d115d587cb0ba762031cbe6750b0

[11:22] <jmerelo> timotimo: right

[11:22] <timotimo> it is very worth using the roll($n) form here

[11:22] <jmerelo> timotimo: I meant this one https://github.com/rakudo/rakudo/blob/a7ed20975cd2fcd95f38596ae93572e1f2baf3b3/src/core/Range.pm6#L511

[11:23] <jmerelo> timotimo: hum

[11:23] *** pierre left
[11:23] <timotimo> greppable6: Bool\.(roll|pick)

[11:24] <greppable6> timotimo, 36 lines, 7 modules: https://gist.github.com/f72b60a28a2b2403ff388cb54ec53d2a

[11:26] <jmerelo> timotimo: right. Much faster, still way slower than Bool.

[11:26] *** FROGGS_ is now known as FROGGS

[11:30] <jmerelo> He

[11:30] <jmerelo> compare HEAD say sum (0..1).roll(100_000) ||| say so Bool.roll xx 100_000

[11:30] <timotimo> you typo'd sum in the second half

[11:31] *** lalitmee joined
[11:31] <timotimo> and you need to address this bot

[11:31] <timotimo> bench: compare HEAD say sum (0..1).roll(100_000) ||| say sum Bool.roll xx 100_000

[11:31] <benchable6> timotimo, starting to benchmark the 1 given commit

[11:31] <benchable6> timotimo, https://gist.github.com/7537f1227802f07c8a3b09754fd92c7a

[11:31] <jmerelo> bench: compare HEAD say sum (0..1).roll(100_000) ||| say sum so Bool.roll xx 100_000

[11:31] <benchable6> jmerelo, starting to benchmark the 1 given commit

[11:32] <benchable6> jmerelo, https://gist.github.com/fb3e9d86f05cd75a4f08d1c93538ad5b

[11:32] <jmerelo> he

[11:32] <timotimo> huh, i would have expected a difference of about 100_000x faster for the second one

[11:33] <jmerelo> Wait, not that

[11:33] <jmerelo> bench: compare HEAD say sum (0..1).roll(100_000) ||| say sum Bool.roll.Int xx 100_000

[11:33] <benchable6> jmerelo, starting to benchmark the 1 given commit

[11:33] <benchable6> jmerelo, https://gist.github.com/d598df67eaced4ec028723921388cb97

[11:33] <jmerelo> Exactly the opposite

[11:34] <jmerelo> hum

[11:34] <jmerelo> bench: compare HEAD say (0..1).roll(100_000) ||| say Bool.roll.Int xx 100_000

[11:34] <benchable6> jmerelo, starting to benchmark the 1 given commit

[11:34] <benchable6> jmerelo, https://gist.github.com/d7e83b3b2d257dc705951e0e2265bf90

[11:35] <jmerelo> bench: compare HEAD say (0..1).roll(100_000) ||| say +Bool.roll xx 100_000

[11:35] <benchable6> jmerelo, starting to benchmark the 1 given commit

[11:35] <benchable6> jmerelo, https://gist.github.com/efe962d984c990892ca4e8774101df9b

[11:36] <jmerelo> So, not winning much...

[11:36] <timotimo> saying the resulting list also takes a while

[11:39] *** xtreak joined
[11:41] <jmerelo> timotimo: but that would be pretty much the same for both. 

[11:42] <timotimo> fair enough, but it can still skew the factor

[11:42] <timotimo> if for example saying the list took 100x as long as creating the list, the factor difference would be nearly 0

[11:42] <timotimo> well, 1

[11:43] <jmerelo> bench: compare HEAD  (0..1).roll(100_000) |||  +Bool.roll xx 100_000

[11:43] <benchable6> jmerelo, starting to benchmark the 1 given commit

[11:43] <benchable6> jmerelo, https://gist.github.com/b6fc4c93755439d2a70276b68617df24

[11:43] <timotimo> heh.

[11:43] <jmerelo> bench: compare HEAD  (0..1).roll(100_000) |||  Bool.roll xx 100_000

[11:43] <benchable6> jmerelo, starting to benchmark the 1 given commit

[11:43] <benchable6> jmerelo, https://gist.github.com/9a1b5ecef679fda24cfd9356339f4517

[11:44] <timotimo> the first one doesn't do anything at all

[11:44] <jmerelo> bench: compare HEAD my  @√æ = (0..1).roll(100_000) ||| my @√æ = Bool.roll xx 100_000

[11:44] <benchable6> jmerelo, starting to benchmark the 1 given commit

[11:44] <benchable6> jmerelo, https://gist.github.com/fd4d7cd09df5c6e6d587ca71a9fbd33a

[11:44] <jmerelo> timotimo: but it does so very fast

[11:44] <timotimo> not as fast as doing actually absolutely nothing

[11:45] <timotimo> bench: compare HEAD  (0..1).roll(100_000) |||  Nil

[11:45] <benchable6> timotimo, starting to benchmark the 1 given commit

[11:45] <benchable6> timotimo, https://gist.github.com/22a57229dc70e3d11ef8cd3694b6520b

[11:45] <jmerelo> timotimo: we should strive to optimize doing absolutely nothing :-)

[11:45] <timotimo> we've been optimizing doing almost nothing for a while

[11:46] <jmerelo> timotimo: :-)

[11:46] <jmerelo> bench: compare HEAD my  @√æ = (0..1).roll(100_000) ||| my @√æ = +Bool.roll xx 100_000

[11:46] <benchable6> jmerelo, starting to benchmark the 1 given commit

[11:46] <benchable6> jmerelo, https://gist.github.com/b1335c72ed01084052fcb1956d5137df

[11:47] <jmerelo> timotimo: Am I understanding this correctly? Is the second form slightly faster than the first?

[11:47] <timotimo> yes

[11:47] <jmerelo> timotimo: yay!

[11:48] <jmerelo> bench: compare HEAD my    (0..1).roll(100_000) ||| my @√æ = +Bool.roll xx 100_000

[11:48] <benchable6> jmerelo, starting to benchmark the 1 given commit

[11:48] <benchable6> jmerelo, https://gist.github.com/49b4f1f8369493fe92e31ce606855000

[11:48] *** frithnanth left
[11:48] <jmerelo> bench: compare HEAD say (0..1).roll(100_000).sum ||| say  (+Bool.roll xx 100_000).sum

[11:48] <benchable6> jmerelo, starting to benchmark the 1 given commit

[11:48] <benchable6> jmerelo, https://gist.github.com/54f4c1012925df02aaa6f7cb4e9c16cb

[11:49] <jmerelo> bench: compare HEAD say (0..1).roll(100_000).sum ||| say  (+Bool.roll xx 100_000).sum

[11:49] <benchable6> jmerelo, starting to benchmark the 1 given commit

[11:49] <benchable6> jmerelo, https://gist.github.com/41813ad41bba813ed7426c22c003710a

[11:50] <jmerelo> timotimo: sum is slower???

[11:52] <timotimo> i'm sorry, slower than what?

[11:52] <timotimo> fwiw, if you .sum the result, you don't have to +Bool.roll, since sum will intify for you, it'd just be extra intifying work

[11:53] <jmerelo> summing the generated array is slower for the intified bools than for the actual ints

[11:54] <jmerelo> timotimo: yep, but intifying should make the sum slower by almost half.  Anyway, I guess that's not really important. 

[11:56] <jmerelo> timotimo: surprising anyway since they should be the self same type of thing. And it's consistently so...

[11:57] <jmerelo> bench: compare HEAD say (0..1).roll(100_000).sum ||| say  +(0..1).roll(100_000).grep( so * )

[11:57] <benchable6> jmerelo, starting to benchmark the 1 given commit

[11:58] <benchable6> jmerelo, https://gist.github.com/1005566ecca425deaf9fbb510b8b6982

[11:59] <jmerelo> bench: compare HEAD say (0..1).roll(100_000).sum ||| say  +(0..1).roll(100_000)

[11:59] <benchable6> jmerelo, starting to benchmark the 1 given commit

[11:59] <benchable6> jmerelo, https://gist.github.com/ee9bc2c580f12f675d673514550232a5

[11:59] <jmerelo> bench: compare HEAD say (0..1).roll(100_000).sum ||| say  +(0..1).roll(100_000).grep

[11:59] <benchable6> jmerelo, starting to benchmark the 1 given commit

[11:59] <benchable6> jmerelo, https://gist.github.com/08485555766b077d908d85a22e793bca

[11:59] <jmerelo> bench: compare HEAD say (0..1).roll(100_000).sum ||| say  +(0..1).roll(100_000).grep( * )

[11:59] <benchable6> jmerelo, starting to benchmark the 1 given commit

[11:59] <benchable6> jmerelo, https://gist.github.com/7a529bb6174171f5acd338612a9839b6

[12:00] <jmerelo> OK, sum is always faster.

[12:00] <timotimo> the result is wrong

[12:01] <timotimo> m: say  +(0..1).roll(100_000).grep( *.so )

[12:01] <camelia> rakudo-moar ac5cf2bb0: OUTPUT: ¬´49539‚ê§¬ª

[12:01] <jmerelo> timotimo: that, too...

[12:01] <timotimo> this is how you need to spell it

[12:01] <jmerelo> bench: compare HEAD say (0..1).roll(100_000).sum ||| say  +(0..1).roll(100_000).grep( *.so )

[12:01] <benchable6> jmerelo, starting to benchmark the 1 given commit

[12:01] <benchable6> jmerelo, https://gist.github.com/8755e4e59322ed41e06c3397b65b0feb

[12:02] <timotimo> i'm not sure if a count-only is involved there

[12:02] <timotimo> coverable6: say  +(0..1).roll(100_000).grep( *.so )

[12:02] <coverable6> timotimo, Seems like you forgot to specify a revision (will use ‚ÄúHEAD‚Äù instead of ‚Äúsay‚Äù)

[12:02] <timotimo> coverable6: HEAD say  +(0..1).roll(100_000).grep( *.so )

[12:02] <jmerelo> timotimo: that's what I want to do...

[12:02] <coverable6> timotimo, https://gist.github.com/22b48beec6e5affd5bb45bb00fa377bd

[12:03] <coverable6> timotimo, https://gist.github.com/b7a5d6b95c83a55bb681d029e1db373c

[12:04] <timotimo> can't really see much in there %)

[12:05] <jmerelo> timotimo: not really

[12:05] <timotimo> what is what you want to do?

[12:06] <jmerelo> timotimo: count ones

[12:07] <timotimo> count-only is about giving the number of elements in a list without generating the list at all

[12:07] <timotimo> only works for iterators of course

[12:07] <timotimo> bench: compare HEAD say  +(0..1).roll(100_000).grep( * ) ||| say  (0..1).roll(100_000).grep( * ).elems

[12:07] <benchable6> timotimo, starting to benchmark the 1 given commit

[12:07] <benchable6> timotimo, https://gist.github.com/6e756d0598304e9a8e97d59ce0957ffa

[12:07] <timotimo> ok, that's about the same, as expected

[12:08] <timotimo> oh, that's the wrong grep

[12:08] <timotimo> bench: compare HEAD say  +(0..1).roll(100_000).grep( *.so ) ||| say  (0..1).roll(100_000).grep( *.so ).elems

[12:08] <benchable6> timotimo, starting to benchmark the 1 given commit

[12:08] <benchable6> timotimo, https://gist.github.com/4f91560ccd8dcdeb5acbfe4272919186

[12:08] <jmerelo> hum

[12:08] <timotimo> cool

[12:08] <timotimo> well, not cool per se. the first one is faster, and i don't really know why?

[12:09] <timotimo> bench: compare HEAD say  +(0..1).roll(100_000).grep( *.so ) ||| bench: compare HEAD say  +(0..1).roll(100_000).race.grep( *.so )

[12:09] <benchable6> timotimo, starting to benchmark the 1 given commit

[12:09] <benchable6> timotimo, ¬¶HEAD: ¬´04===SORRY!04=== Error while compiling /tmp/TLvUdrLQBr‚ê§Undeclared name:‚ê§    HEAD used at line 1‚ê§Undeclared routine:‚ê§    compare used at line 1‚ê§‚ê§¬ª

[12:09] <timotimo> bench: compare HEAD say  +(0..1).roll(100_000).grep( *.so ) ||| say  +(0..1).roll(100_000).race.grep( *.so )

[12:09] <benchable6> timotimo, starting to benchmark the 1 given commit

[12:09] <benchable6> timotimo, https://gist.github.com/b6e937debc456d797e1b974b22b84e4d

[12:09] <jmerelo> timotimo: why race?

[12:09] <timotimo> because parallelism

[12:09] <timotimo> is rather a bit too slow, though

[12:10] <timotimo> kind of natural, given it just calls .so on each element, which is very cheap

[12:10] <timotimo> compared to managing workers and such

[12:10] <jmerelo> timotimo: same as hyper?

[12:10] <timotimo> bench: compare HEAD say  +(0..1).roll(100_000).race.grep( *.so ) ||| say  +(0..1).roll(100_000).race(:20_000batch).grep( *.so )

[12:10] <benchable6> timotimo, starting to benchmark the 1 given commit

[12:10] <benchable6> timotimo, https://gist.github.com/dea3aadd440e955c52fefc2e75cc8a98

[12:10] *** athenot_ left
[12:10] <timotimo> yes, race is hyper but it doesn't guarantee things come out in the same order as they came in

[12:11] <jmerelo> timotimo: which we don't really care...

[12:11] <timotimo> yup

[12:11] <timotimo> bench: compare HEAD say  +(0..1).roll(100_000).race.grep( *.so ) ||| say  +(0..1).roll(100_000).race(:50_000batch,:2degree).grep( *.so )

[12:11] <benchable6> timotimo, starting to benchmark the 1 given commit

[12:11] <benchable6> timotimo, https://gist.github.com/9804a74997b7ae183b721315f46f71c5

[12:11] <timotimo> mhm

[12:12] <timotimo> i'll go sit in the sun for a little bit :)

[12:13] <jmerelo> timotimo: you do that. Thanks!

[12:15] <dogbert17> jmerelo: hi, are you by any chance the author of the module Algorithm::Evolutionary::Simple ?

[12:16] <jmerelo> dogbert17: guilty as charged

[12:16] <dogbert17> jmerelo: have you seen this problem before: https://gist.github.com/dogbert17/a49bf69512b8eb8625a26cdcbe611827

[12:17] <jmerelo> dogbert17: no. Hum. Can you please create an issue?

[12:18] <dogbert17> jmerelo: sure

[12:18] *** pierre joined
[12:21] <timotimo> looks like it's trying to open an actual file called *

[12:21] <timotimo> and not finding one

[12:21] <jmerelo> timotimo: I'm checking it out. It's an error in the META6.json. 

[12:24] <dogbert17> jmerelo: reported as https://github.com/JJ/p6-algorithm-evolutionary-simple/issues

[12:24] <dogbert17> hmm, the link above should end with /issues/2

[12:25] <jmerelo> dogbert17: don't worry, I got it in the mail. It's fixed now. I'm going to upload it now to CPAN. Thanks a lot, and let me know if I can help you any way with that :-)

[12:25] <dogbert17> this has to be the fastest fix ever, thx

[12:26] <jmerelo> dogbert17: it was an easy one :-)

[12:27] <dogbert17> I was going to take a look at https://github.com/MoarVM/MoarVM/issues/822

[12:28] <jmerelo> dogbert17: that would be great, although I have no problem with the newest one. I do have a segfault problem with one of the examples, but I think it's mainly due to not closing threads correctly.

[12:30] <jmerelo> Off to lunch with family. See you!

[12:30] *** jmerelo left
[12:31] <buggable> New CPAN upload: Algorithm-Evolutionary-Simple-0.0.3.tar.gz by JMERELO https://cpan.metacpan.org/authors/id/J/JM/JMERELO/Perl6/Algorithm-Evolutionary-Simple-0.0.3.tar.gz

[12:33] <Geth> ¬¶ ecosystem: a2143fda66 | (Itsuki Toyota)++ (committed using GitHub Web editor) | META.list

[12:33] <Geth> ¬¶ ecosystem: p6-Algorithm-AhoCorasick was moved to CPAN

[12:33] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/a2143fda66

[12:35] <titsuki_> bench: compare HEAD class A { has $.payload; method instance { state $instance = self.bless; }; method modify($a) { $!payload = $a; }; submethod new{!!!} }; A.instance for ^1000000; ||| class A { my $instance; has $.payload; method instance { unless $instance.defined { $instance = self.bless; }; $instance }; method modify($a) { $!payload = $a; }; submethod new{!!!} }; A.instance for ^1000000;

[12:35] <benchable6> titsuki_, starting to benchmark the 1 given commit

[12:35] <benchable6> titsuki_, https://gist.github.com/b72d12ad7b8a193007d041c95650d6de

[12:36] <titsuki_> bench: compare HEAD my class A { has $.payload; method instance { state $instance = self.bless; }; method modify($a) { $!payload = $a; }; submethod new{!!!} }; A.instance for ^1000000; ||| my class A { my $instance; has $.payload; method instance { unless $instance.defined { $instance = self.bless; }; $instance }; method modify($a) { $!payload = $a; }; submethod new{!!!} }; A.instance for ^1000000;

[12:36] <benchable6> titsuki_, starting to benchmark the 1 given commit

[12:36] <benchable6> titsuki_, https://gist.github.com/0f9553ea25bb4b6af4f721733de3061e

[12:40] *** pierre left
[12:41] <buggable> New CPAN upload: Algorithm-AhoCorasick-0.0.8.tar.gz by TITSUKI https://cpan.metacpan.org/authors/id/T/TI/TITSUKI/Perl6/Algorithm-AhoCorasick-0.0.8.tar.gz

[12:49] *** lalitmee left
[12:50] *** eroux joined
[12:57] <titsuki_> say Ê•ΩÂúü" ~~ /<:letter+:number+[_]>+/

[12:57] <titsuki_> m: say Ê•ΩÂúü" ~~ /<:letter+:number+[_]>+/

[12:57] <camelia> rakudo-moar 768cf9f29: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3say Ê•ΩÂúü7‚èè5" ~~ /<:letter+:number+[_]>+/‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚ê§  ‚Ä¶¬ª

[12:57] <titsuki_> m: say "Ê•ΩÂúü" ~~ /<:letter+:number+[_]>+/

[12:57] <camelia> rakudo-moar 768cf9f29: OUTPUT: ¬´ÔΩ¢Ê•ΩÂúüÔΩ£‚ê§¬ª

[12:58] <titsuki_> Does anyone know what ":" does in this case?

[12:59] *** dalek left
[12:59] <titsuki_> The first "Identifier" example seems incorrect to me: https://docs.perl6.org/type/Grammar

[12:59] <MasterDuke> titsuki_: it's pair syntax

[12:59] <MasterDuke> https://docs.perl6.org/language/regexes#Unicode_properties

[12:59] *** p6lert left
[12:59] <titsuki_> MasterDuke: Thanks!!!

[13:00] <MasterDuke> np

[13:00] *** Util left
[13:01] <Ulti> jnthn++ for Concurrent::Trie since I just went looking for a Trie implementation :D

[13:02] *** espadrine left
[13:03] <Ulti> want to compile a regex of all the P6 keywords something like this m(a(x|p|tch)|in) from a trie to build a nano language file since someone asked for one ealier

[13:06] <titsuki_>  m: say "Ê•ΩÂúü" ~~ /<:alpha>+/

[13:06] <camelia> rakudo-moar 768cf9f29: OUTPUT: ¬´ÔΩ¢Ê•ΩÂúüÔΩ£‚ê§¬ª

[13:07] <titsuki_> Is "Ê•ΩÂúü" alphabetic character? I'm confused...

[13:08] *** eroux left
[13:08] <MasterDuke> u: Ê•ΩÂúü

[13:08] <unicodable6> MasterDuke, U+697D <CJK Ideograph-697D> [Lo] (Ê•Ω)

[13:08] <unicodable6> MasterDuke, U+571F <CJK Ideograph-571F> [Lo] (Âúü)

[13:09] <MasterDuke> unidump: Ê•ΩÂúü

[13:10] <unicodable6> MasterDuke, https://gist.github.com/7e4a703cf4e0547409ebf2b64057ed89

[13:10] <MasterDuke> titsuki_: ^^^, looks like yes

[13:11] <titsuki_> MasterDuke: oh, I'm very surprised.

[13:16] *** synopsebot left
[13:23] <titsuki_> I understand that; we can read it from left to right and it is letter, so it is alphabetic.

[13:28] *** xtreak left
[13:30] *** comborico1611 joined
[13:31] <titsuki_> m: say "û†Ä" ~~ /<:alpha>+/ # right-to-left one can be alphabetic, so my understanding is incorrect...

[13:31] <camelia> rakudo-moar 768cf9f29: OUTPUT: ¬´ÔΩ¢û†ÄÔΩ£‚ê§¬ª

[13:33] *** MilkmanDan left
[13:34] *** MilkmanDan joined
[13:47] *** |oLa| left
[13:47] *** khw joined
[13:56] *** cdg joined
[13:57] *** cdg left
[13:57] *** cdg joined
[13:57] *** espadrine joined
[13:59] *** AlexDaniel joined
[14:00] *** MilkmanDan left
[14:01] *** MilkmanDan joined
[14:04] <Geth> ¬¶ doc: titsuki++ created pull request #1888: Fix Identifiers exmple

[14:04] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/1888

[14:04] <Geth> ¬¶ doc: 373f72bb25 | (Itsuki Toyota)++ | doc/Type/Grammar.pod6

[14:04] <Geth> ¬¶ doc: Fix Identifiers exmple

[14:04] <Geth> ¬¶ doc: 

[14:04] <Geth> ¬¶ doc: The previous one calls pre-defined tokens (See: https://docs.perl6.org/language/regexes#Unicode_properties) not user-defined one.

[14:04] <Geth> ¬¶ doc: That is confusing since this example defines unused tokens as if it used.

[14:04] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/373f72bb25

[14:04] <Geth> ¬¶ doc: 9d20f27dbf | (Itsuki Toyota)++ (committed using GitHub Web editor) | doc/Type/Grammar.pod6

[14:04] <Geth> ¬¶ doc: Merge pull request #1888 from titsuki/fix-grammar

[14:04] <Geth> ¬¶ doc: 

[14:04] <Geth> ¬¶ doc: Fix Identifiers exmple

[14:04] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9d20f27dbf

[14:07] *** eliasr joined
[14:15] *** MilkmanDan left
[14:16] *** MilkmanDan joined
[14:20] *** comborico1611 left
[14:26] <Geth> ¬¶ doc: 0126740628 | cfa++ | 2 files

[14:26] <Geth> ¬¶ doc: Add a couple of code words, nbsp fix.

[14:26] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/0126740628

[14:28] *** cfa joined
[14:28] <cfa> morning all

[14:28] <cfa> releasable6: status

[14:28] <releasable6> cfa, Next release in 21 days and ‚âà4 hours. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Changelog for this release was not started yet

[14:28] <releasable6> cfa, Details: https://gist.github.com/e68b9dc987ff939f1e91e1a6eb56402a

[14:37] *** MasterDuke left
[14:42] <AlexDaniel> squashable6: next

[14:42] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in 5 days and ‚âà19 hours (2018-04-07 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[14:48] *** Sgeo_ joined
[14:50] *** Sgeo left
[14:58] *** undersightable6 joined
[15:02] *** zakharyas joined
[15:07] *** SourceBaby left
[15:07] *** sergot left
[15:07] *** dalek joined
[15:07] *** ChanServ sets mode: +v dalek

[15:07] *** Geth left
[15:07] *** p6lert joined
[15:07] *** synopsebot joined
[15:07] *** Geth_ joined
[15:07] *** ChanServ sets mode: +v synopsebot

[15:07] *** ChanServ sets mode: +v Geth_

[15:16] *** comborico1611 joined
[15:17] *** herby_ joined
[15:17] <herby_> o/

[15:20] *** abraxxa joined
[15:22] *** jmerelo joined
[15:25] *** abraxxa left
[15:29] <dogbert17> hello herby

[15:29] <dogbert17> jmerelo: are you back

[15:29] <jmerelo> dogbert17: yep

[15:30] <dogbert17> I'm not having much luck with v0.0.3

[15:30] <dogbert17> ===> Install [FAIL] for Algorithm::Evolutionary::Simple:ver<0.0.3>:auth<github:JJ>: Failed to open file /home/dogbert/.zef/store/Algorithm-Evolutionary-Simple-0.0.3.tar.gz/Algorithm-Evolutionary-Simple-0.0.3/resources/examples/*: No such file or directory

[15:30] <jmerelo> Sorry to hear that

[15:31] <jmerelo> I guess you can just clone the repo. That should work...

[15:31] <jmerelo> But I'll check that again.

[15:31] <dogbert17> thx, perhaps something wasn't commited

[15:31] <jmerelo> I'm using mi6 and it looks like it does less things automatically than I thought it did...

[15:32] <jmerelo> hum

[15:32] <jmerelo> No, it's a META.json bug. 

[15:34] <dogbert17> uh oh

[15:35] *** Kaiepi left
[15:35] *** Kaypie joined
[15:37] <jmerelo> I mean, it's my fault, I simply thought that META.json would understand globs. It does not, so it's trying to extract the '

[15:38] <jmerelo> *' file from the tar. I have uploaded a new version, it should be ready in a little while.

[15:38] <jmerelo> dogbert17: thanks again

[15:38] <dogbert17> cool, many thanks

[15:38] <jmerelo> dogbert17: Thanks to you. Let me now if there's any problem with this new one...

[15:39] *** abraxxa joined
[15:40] <dogbert17> jmerelo: will do, thx again

[15:41] <buggable> New CPAN upload: Algorithm-Evolutionary-Simple-0.0.3.1.tar.gz by JMERELO https://cpan.metacpan.org/authors/id/J/JM/JMERELO/Perl6/Algorithm-Evolutionary-Simple-0.0.3.1.tar.gz

[15:51] *** araraloren left
[16:02] *** abraxxa left
[16:08] *** wamba joined
[16:09] *** cfa left
[16:23] *** pierre joined
[16:32] *** dct joined
[16:35] *** cognominal left
[16:35] *** natrys joined
[16:36] *** cognominal joined
[16:36] *** comborico1611 left
[16:44] *** sergot joined
[16:51] *** cdg left
[16:52] *** cdg joined
[16:56] *** cdg left
[17:04] *** zakharyas left
[17:09] *** darutoko left
[17:09] *** darutoko joined
[17:11] <jmerelo> compare HEAD  (^16).pick(2).sort x 10000 ||| (^16).roll(2).sort x 10000

[17:11] <jmerelo> bench: compare HEAD  (^16).pick(2).sort x 10000 ||| (^16).roll(2).sort x 10000

[17:11] <benchable6> jmerelo, starting to benchmark the 1 given commit

[17:11] <benchable6> jmerelo, https://gist.github.com/d42684ba13b4c54d1b5d6c0eee7816f3

[17:11] *** shadowpaste left
[17:13] <AlexDaniel> jmerelo: did you mean xx ?

[17:13] <jmerelo> bench: compare HEAD  (my $one = 16.rand.Int; my $two = (16-$one).rand.Int)  xx 10000 ||| (^16).roll(2).sort xx 10000

[17:13] <benchable6> jmerelo, starting to benchmark the 1 given commit

[17:13] <benchable6> jmerelo, https://gist.github.com/0970899f8a510eabd7029d4fec24fa75

[17:13] <jmerelo> AlexDaniel: right

[17:13] <jmerelo> bench: compare HEAD  (^16).pick(2).sort xx 10000 ||| (^16).roll(2).sort xx 10000

[17:13] <benchable6> jmerelo, starting to benchmark the 1 given commit

[17:14] <benchable6> jmerelo, https://gist.github.com/2396cdfda9e8a6dc7c7b87a29ac38084

[17:14] <jmerelo> bench: compare HEAD  (my $one = 16.rand.Int; my $two = (16-$one).rand.Int)  xx 50000 ||| (^16).pick(2).sort xx 50000

[17:14] <benchable6> jmerelo, starting to benchmark the 1 given commit

[17:14] <benchable6> jmerelo, ¬¶HEAD: ¬´Benchmark: ‚ê§¬´timed out after 10 seconds¬ª¬ª

[17:15] <AlexDaniel> xD

[17:15] *** shadowpaste joined
[17:15] <AlexDaniel> fwiw benchable6 really needs some love

[17:15] <AlexDaniel> bench: compare HEAD  (my $one = 16.rand.Int; my $two = (16-$one).rand.Int)  xx 25000 ||| (^16).pick(2).sort xx 25000

[17:15] <benchable6> AlexDaniel, starting to benchmark the 1 given commit

[17:15] <benchable6> AlexDaniel, https://gist.github.com/cc73341d08f572b67ba7430ad601ce81

[17:15] <jmerelo> bench: compare HEAD  my $len = 64; (my $one = $len.rand.Int; my $two = ($len-$one).rand.Int)  xx 25000 ||| (^$len).pick(2).sort xx 25000

[17:15] <benchable6> jmerelo, starting to benchmark the 1 given commit

[17:15] <benchable6> jmerelo, ¬¶HEAD: ¬´04===SORRY!04=== Error while compiling /tmp/V5MBZ_mIJK‚ê§Variable '$len' is not declared‚ê§at /tmp/V5MBZ_mIJK:1‚ê§------> 03.rand.Int)  xx 25000  } ,1‚êâ => sub {  (^08‚èè04$len).pick(2).sort xx 25000 } ; my $b = ‚ê§¬ª

[17:16] <AlexDaniel> oh actually these two snippets were a bit different

[17:16] <jmerelo> bench: compare HEAD  (my $one = 64.rand.Int; my $two = (64-$one).rand.Int)  xx 25000 ||| (^64).pick(2).sort xx 25000

[17:16] <benchable6> jmerelo, starting to benchmark the 1 given commit

[17:16] <benchable6> jmerelo, https://gist.github.com/8aeab0492da0fa472b0941704ead29b5

[17:16] <AlexDaniel> jmerelo: by the way, there's #whateverable channel specifically for bot abuse :)

[17:17] *** pierre left
[17:17] <jmerelo> AlexDaniel: never go to bed withouth learning a new thing...

[17:18] <jmerelo> AlexDaniel: I'm benchmarking this thing https://github.com/JJ/perl6eo/blob/master/xover.p6

[17:19] <jmerelo> But it's unbelievably slow. Slower than the slowest language I've checked so far. xover is an operation that is done in evolutionary algorithms pretty routinely.

[17:19] <jmerelo> I have tried to speed up every single bit: the random generation of the crossover point, the copying from one "chromosome" to another. Still very slow. 

[17:20] <jmerelo> It's almost 100 times as slow as Perl, for instance, and scaling is much better for Perl.

[17:20] <AlexDaniel> jmerelo: I can play with it, but note that tickets like this work pretty well: https://github.com/rakudo/rakudo/issues/1667

[17:21] <AlexDaniel> (sometimes)

[17:21] <AlexDaniel> especially if you have something to compare with

[17:22] <AlexDaniel> like the same thing written in ruby or python or whatever

[17:22] *** dct left
[17:25] *** pierre joined
[17:26] *** dct joined
[17:30] *** pierre left
[17:31] <jmerelo> AlexDaniel: Done. I've added a test in C++, which is actually one of the slowest. Octave, for instance, does not degrade with size. Perl is much faster than C++

[17:32] *** zakharyas joined
[17:33] <jmerelo> BTW, someone take a look at https://github.com/perl6/perl6-pod-to-bigpage/pull/10 I can accept it, but I don't want to break anything there... There are a bunch of improvements, addressing the issues I've included there.

[17:34] <jmerelo> There are two main improvements re: docs there. One, add a page title to the big-xhtml page, second, eliminate a link to a non-existent CSS file.

[17:34] <AlexDaniel> maybe wait for a response from @gfldex :)

[17:35] <jmerelo> AlexDaniel: OK

[17:35] <AlexDaniel> jmerelo: FWIW it would be better if you included some scripting language in your benchmark

[17:36] <AlexDaniel> because trying to get it as fast as C++ version is difficult

[17:36] <AlexDaniel> the timing I mean

[17:38] *** pierre joined
[17:39] *** dct left
[17:41] <jmerelo> AlexDaniel: in this case, C++ is quite slow. Perl is ten times as fast.

[17:41] <AlexDaniel> compare it to perl5 then!

[17:41] <AlexDaniel> xD

[17:42] <AlexDaniel> heh

[17:42] <AlexDaniel> either way comparing to c++ is not very convincing :)

[17:42] <jmerelo> AlexDaniel: Slowest in this benchmark is Perl6, followed by Scala, then C++

[17:42] *** xinming joined
[17:42] *** dct joined
[17:43] <jmerelo> AlexDaniel: Perl, PHP, fastest

[17:44] *** bwisti joined
[17:45] <jmerelo> AlexDaniel: uploaded data to GitHub and @-ed you... Point is, anyway, if there's a way to make it faster. I'll try strings now.

[17:45] *** xinming_ left
[17:47] *** zakharyas left
[17:50] *** dct left
[17:51] <jmerelo> AlexDaniel: Using strings is even slower...

[17:53] *** dct joined
[17:53] <AlexDaniel> jmerelo: so there's no perl5-bitvector?

[17:55] <jmerelo> AlexDaniel: There's no "bit" there, no explicit true or false. 

[17:56] <AlexDaniel> but you can do it with ints right?

[17:56] <jmerelo> AlexDaniel: yep, or strings. Strings are more convenient, and I seem to remember they are fasters.

[17:56] <jmerelo> s/fasters/faster/

[18:12] <timotimo> jmerelo: how does performance change when you use .skip($start).head($this-len) instead of the [$a..$b] form?

[18:13] <timotimo> also, any reason your chromosome 1, 2, and x arrays aren't native int arrays?

[18:15] <timotimo> i can try it myself i guess

[18:17] *** dct left
[18:18] <timotimo> it's noticably faster, but not like a breakthrough

[18:18] <timotimo> with skip/head i mean

[18:19] <jmerelo> timotimo: I'll have to try both those things. Thanks

[18:20] <jmerelo> I'm writing this paper for a workshop. Anyone wants to join, just make whatever modification and add him/herself as author https://github.com/JJ/2016-ea-languages-wcci/blob/master/ea-perls.Rnw

[18:20] <jmerelo> I do open science, so all and everyone are welcome.

[18:20] <jmerelo> But I'm leaving now. See you!

[18:20] <timotimo> making them native makes it loads slower

[18:20] <timotimo> both kinds

[18:20] *** jmerelo left
[18:30] *** Kaypie left
[18:31] *** darutoko left
[18:34] *** [Sno] joined
[18:45] *** domidumont left
[19:03] *** cdg joined
[19:27] *** wamba left
[19:33] *** irco joined
[19:46] *** natrys left
[19:46] *** natrys joined
[19:55] *** spider-mario left
[19:57] *** spider-mario joined
[19:59] *** ctilmes joined
[20:04] *** ctilmes left
[20:04] *** captain-adequate joined
[20:09] *** aindilis joined
[20:10] *** dct joined
[20:14] *** khisanth_ left
[20:23] <Altreus> hello p6 pals

[20:23] <Altreus> Can someone point me to why one might call a method with : instead of ()?

[20:27] <AlexDaniel> Altreus: simply if you don't like ()

[20:28] <AlexDaniel> a.b(c.d(‚Ä¶)) vs a.b: c.d: ‚Ä¶

[20:28] <AlexDaniel> depending on the situation the version without parens may be easier to read

[20:28] <Altreus> oh ok

[20:28] <Altreus> it seems random here https://github.com/maros/oarm-p6/blob/master/lib/Oarm.pm6#L21

[20:29] <AlexDaniel> yeah, inconsistent

[20:29] <AlexDaniel> Altreus: basically, you can also call subs with () or without

[20:29] <AlexDaniel> same deal

[20:30] <AlexDaniel> foo(bar(‚Ä¶)) vs foo bar ‚Ä¶

[20:31] <Altreus> that seems varied!

[20:32] <Altreus> I didn't know I could omit all of it ü§î

[20:34] *** dct left
[20:36] <masak> I find I use the colon very rarely in that case

[20:36] <masak> I also don't use the "indirect object" colon

[20:36] <masak> but that's just me; YMMV

[20:37] <masak> the first kind of colon is kind of like the `$` in Haskell: it can reduce the need for parentheses buildup, thereby also lessening the pressure to keep a "mental stack" of things

[20:37] *** khisanth_ joined
[20:39] <El_Che> let's explain perl 6 sugar complexity by pointing to haskell. Good plan :)

[20:41] <masak> actually, syntactically, Haskell is quite OK

[20:42] <lizmat> m: say "foo"   # say() is a sub like any other  :-)

[20:42] <camelia> rakudo-moar dc1a3f5a3: OUTPUT: ¬´foo‚ê§¬ª

[20:42] <masak> and the definition of `$` in the Haskell setting is beautiful too:

[20:42] <masak> f $ g = f g

[20:42] <masak> that's... poetry :)

[20:43] <masak> (the missing piece of that puzzle is that in Haskell, function application binds tigher than operators)

[20:45] *** natrys left
[20:46] *** eliasr left
[20:56] <masak> Altreus: I think the interesting point for a language designer is that you can have subcall listops (`say "foo"`, like Perl 5 and Perl 6) or the ability to refer to subs without calling them (like Python and JavaScript), but you can't have both

[20:57] <jnthn> fwiw, I mostly use the : form of method calls when I follow it with a bloc

[20:57] <jnthn> *block

[20:57] <jnthn> $lock.protect: { ...lots of lines here... }

[20:58] <jnthn> It saves a ) *and* a ; in this case :)

[20:58] <Altreus> that looks smart

[20:58] <El_Che> that's indeed nice

[20:58] <Altreus> balancing closing parens that are only surrounding braces in perl5 is a minor pain indeed

[20:59] <El_Che> very declarative

[20:59] <Altreus> masak: yes, that makes sense. I do separate those languages into those buckets, mentally

[21:00] <masak> one of the intended uses of "statement macros" is to eliminate that colon so that user-declared statements with xblocks can be on an equal footing with built-in statements with xblocks

[21:00] *** Kaiepi joined
[21:11] <buggable> New CPAN upload: PDF-Class-0.1.2.tar.gz by WARRINGD https://cpan.metacpan.org/authors/id/W/WA/WARRINGD/Perl6/PDF-Class-0.1.2.tar.gz

[21:22] *** robertle_ left
[21:27] *** dct joined
[21:27] <Altreus> sorry to bug so much but can someone weigh in on whether this method is strictly necessary, or is it entirely to allow for the translation of hash keys in the end user code to oarm_* names of the member vars in the HOW class?

[21:28] <Altreus> https://github.com/maros/oarm-p6/blob/master/lib/Oarm/Table.pm6#L170

[21:29] *** sena_kun left
[21:29] <Altreus> In fact, does anyone have more examples of code that fiddles with the HOW so I can sort of cross-reference them and gain more insight?

[21:33] *** dct left
[21:39] <timotimo> huh, why does it call .STR on the $1; i don't think that would work?

[21:40] <timotimo> Altreus: it looks like it just goes through all attributes the class has and assigns values from the %def hash into it. if some attribute is required but doesn't have an entry in the %def hash, it'll complain, and if something remains in %def by the end it will also complain

[22:00] *** rindolf left
[22:04] *** Sgeo joined
[22:05] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/03/31/2018-14-singularity-released/

[22:07] *** Sgeo_ left
[22:18] <El_Che> lizmat: you're evil :)

[22:18] <lizmat> *blush*  :-)

[22:20] <AlexDaniel> this one is early :)

[22:20] *** gtodd joined
[22:20] <El_Che> AlexDaniel: not in our part of the world :)

[22:20] <lizmat> yeah, I think it's too obvious that Array.grab and fails-like are mere fabrications  :-)

[22:21] <AlexDaniel> El_Che: I mean compared to previous weeklies

[22:21] <gtodd> https://stackoverflow.com/a/49475649/2019415  <-- Jonathan's suggested solution doesn't work for me

[22:21] <timotimo> gtodd: are oyu using the REPL?

[22:22] <gtodd> ohoh ... could be unicode cutg and paste thingies too

[22:22] <timotimo> m: constant \term:<‚ä§> = True; say ‚ä§; # True

[22:22] <camelia> rakudo-moar dc1a3f5a3: OUTPUT: ¬´True‚ê§¬ª

[22:22] <gtodd> timotimo: yes ... but all on one line

[22:22] <timotimo> ah!

[22:22] <timotimo> well, the REPL is very bad at defining stuff

[22:22] <gtodd> m: say "‚ä§" ~~ /<.ident>/'; # Nil

[22:22] <camelia> rakudo-moar dc1a3f5a3: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3say "‚ä§" ~~ /<.ident>/7‚èè5'; # Nil‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚ê§        st‚Ä¶¬ª

[22:22] <timotimo> i think putting a grammar-changing definition and its usage on one line does work?

[22:22] <timotimo> that's a ' too many

[22:23] <lizmat> El_Che: it's also on FaceBook now: https://www.facebook.com/groups/perl6/permalink/2068635906736091/

[22:23] <gtodd> didn't compile as a script either ... possibie unicode char crap

[22:23] <timotimo> Edits must be at least 6 characters; is there something else to improve in this post?

[22:23] <timotimo> ...

[22:24] <gtodd> m: constant \term:<‚ä§> = True;say "‚ä§" ~~ /<.ident>/';

[22:24] <camelia> rakudo-moar dc1a3f5a3: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3t \term:<‚ä§> = True;say "‚ä§" ~~ /<.ident>/7‚èè5';‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement e‚Ä¶¬ª

[22:24] <timotimo> oh, you misunderstand

[22:24] <timotimo> defining the constant will not change what the ident rule matches

[22:24] <AlexDaniel> .tell MasterDuke fwiw https://github.com/perl6/atom-language-perl6/issues/66

[22:24] <yoleaux> AlexDaniel: I'll pass your message to MasterDuke.

[22:24] * lizmat gets some sleep

[22:24] <gtodd> timotimo: oops :-) that was not in the test I did locally :-D

[22:25] <timotimo> the first piece of code is just to show that the T character you have there is not valid as an identifier

[22:25] <gtodd> m: constant \term:<‚ä§> = True; say "‚ä§" ~~ /<.ident>/;

[22:25] <camelia> rakudo-moar dc1a3f5a3: OUTPUT: ¬´Nil‚ê§¬ª

[22:25] <timotimo> because the <ident> rule you get for your own grammars just matches what perl6 uses to decide what is valid

[22:25] <gtodd> ah ok

[22:26] <gtodd> m: constant \term:<‚ä§> = True; say ‚ä§ ;

[22:26] <camelia> rakudo-moar dc1a3f5a3: OUTPUT: ¬´True‚ê§¬ª

[22:29] <AlexDaniel> April Squashathon in 2023 is going to be on April 1st

[22:31] <AlexDaniel> and we missed one in 2017

[22:31] <gtodd> timotimo: actually it seems to be the "False" term  ‚ä• that breaks things ...

[22:31] <gtodd> don't know why ... oh well 

[22:33] <gtodd> make the multi subs in the example and then do: 

[22:33] <gtodd> constant \term:<‚ä§> = True;

[22:33] <gtodd> constant \term:<‚ä•> = False;

[22:33] <gtodd> say ((‚üÇ ‚áí ¬¨(‚üÇ ‚à® ‚ä§)) ‚àß (‚üÇ ‚à® ‚ä§));

[22:33] <gtodd> for the bork! :-)

[22:34] <gtodd> say ((False ‚áí ¬¨(False ‚à® ‚ä§)) ‚àß (False ‚à® ‚ä§)); # works fine though ... so I don't know

[22:34] <Altreus> Surely there's an easier way of taking a hash and assigning it to class attributes

[22:34] <Altreus> :\

[22:35] <timotimo> there is

[22:35] <timotimo> making a custom "new" method that passes an altered hash to self.bless ought to do it

[22:35] <timotimo> though you'd still want to iterate over the attributes the class has, instead of just putting aorm_ in front of every hash entry's key

[22:36] <Altreus> I do observe that these are being assigned to class variables

[22:36] <Altreus> Is that why you can't do something simple akin to a constructor?

[22:36] <timotimo> oh, they are?

[22:36] <timotimo> gtodd: i copypasted the reverse-T symbol from the definition line into the usage line and now it works :|

[22:37] <gtodd> ahah

[22:37] <timotimo> m: say "‚üÇ".&uniname

[22:37] <camelia> rakudo-moar dc1a3f5a3: OUTPUT: ¬´PERPENDICULAR‚ê§¬ª

[22:37] <timotimo> m: say "‚ä•".&uniname

[22:37] <camelia> rakudo-moar dc1a3f5a3: OUTPUT: ¬´UP TACK‚ê§¬ª

[22:38] <timotimo> that's utterly fantastic

[22:38] <gtodd> jeez

[22:38] <gtodd> I wish I had better eyesight :-D

[22:39] <gtodd> I guess .uniname will help 

[22:39] <gtodd> errm .&uniname  ... hmrrrm

[22:39] <timotimo> there isn't a single difference in the font my terminal uses

[22:40] <timotimo> "blah".&foo is just short for foo "blah"

[22:42] *** Kaypie joined
[22:42] *** Kaiepi left
[22:43] *** comborico1611 joined
[22:49] *** khw left
[22:51] <Altreus> have I misunderstood? None of those HOW things in that Oarm code actually constructe an object does it? It just messes about with the metaclass of any class that invokes it through the trait mod, right?

[22:51] <Altreus> So that TableHOW has two class attributes and that oarm_init_table just sets them

[22:53] <timotimo> i might have misread, let me at the code again ...

[22:54] <timotimo> oh, wait, i didn't even see the code with the trait_mod

[22:56] *** Kaypie left
[22:56] <timotimo> i'm not actually sure the code is really sane

[22:56] <timotimo> m: class Foobar {}; class Barbaz {}; say Foobar.HOW.WHERE; say Barbaz.HOW.WHERE;

[22:56] <camelia> rakudo-moar dc1a3f5a3: OUTPUT: ¬´139997404411096‚ê§139997404473512‚ê§¬ª

[22:57] <timotimo> oh, ok, they really are different instances

[22:57] *** Kaypie joined
[22:57] <timotimo> ah, yes, it really does add class attributes

[23:00] <Altreus> Am I looking at a thing worth learning from? :D

[23:01] <timotimo> oh, it's a fine thing, i just hadn't read it right the first time

[23:01] <timotimo> i have a module that creates a new class at run-time, but it doesn't change HOWs around

[23:01] <timotimo> it just uses a regular HOW

[23:02] <Altreus> is that on the internet somewhere too? :)

[23:02] <timotimo> oh, of course

[23:02] <timotimo> buggable: eco ADT

[23:02] <buggable> timotimo, ADT 'Algebraic Data Types inspired by Haskell.': https://github.com/timo/ADT

[23:05] <Altreus> thanks very much :)

[23:05] <Altreus> I'm going to bed now

[23:05] <timotimo> YW

[23:05] <timotimo> good night!

[23:05] <Altreus> night :)

[23:16] *** ZofBot joined
[23:16] *** ChanServ sets mode: +v ZofBot

[23:18] *** markong left
[23:19] *** cognominal left
[23:22] *** cdg left
[23:27] *** [Sno] left
[23:34] *** SourceBaby joined
[23:34] *** ChanServ sets mode: +v SourceBaby

[23:37] *** dct joined
[23:50] *** dct left
[23:53] *** dct joined
[23:56] *** [Sno] joined
