[00:03] *** mcmillhj left
[00:11] *** MasterDuke left
[00:13] *** mcmillhj joined
[00:18] *** rouking left
[00:18] *** mcmillhj left
[00:20] *** benjikun2 is now known as benjikun

[00:27] *** mcmillhj joined
[00:32] *** mcmillhj left
[00:34] *** Bowlslaw left
[00:50] *** fake_space_whale joined
[00:51] *** MasterDuke joined
[00:54] *** quester joined
[00:54] *** quester left
[00:54] *** quester joined
[01:00] *** mcmillhj joined
[01:02] *** zachk left
[01:06] *** mcmillhj left
[01:09] *** _Xliff_ left
[01:10] <quester> p6: say $*PERL.compiler.version

[01:10] <camelia> rakudo-moar 3cbf25e0f: OUTPUT: «v2018.06.44.g.3.cbf.25.e.0.f␤»

[01:17] *** quester left
[01:21] *** mcmillhj joined
[01:23] *** markoong left
[01:26] *** mcmillhj left
[01:27] *** fake_space_whale left
[01:34] *** MilkmanDan left
[01:35] <lucs> m: say 49.sqrt ~~ Int # How do I get this to be True?

[01:35] <camelia> rakudo-moar 3cbf25e0f: OUTPUT: «False␤»

[01:35] *** MilkmanDan joined
[01:36] <AlexDaniel> m: say say 49.sqrt.narrow

[01:36] <camelia> rakudo-moar 3cbf25e0f: OUTPUT: «7␤True␤»

[01:36] <AlexDaniel> m: say 49.sqrt.narrow

[01:36] <camelia> rakudo-moar 3cbf25e0f: OUTPUT: «7␤»

[01:36] <AlexDaniel> m: dd 49.sqrt.narrow

[01:36] <camelia> rakudo-moar 3cbf25e0f: OUTPUT: «7␤»

[01:36] <AlexDaniel> m: dd 50.sqrt.narrow

[01:36] <camelia> rakudo-moar 3cbf25e0f: OUTPUT: «7.0710678118654755e0␤»

[01:36] <AlexDaniel> lucs: I don't know if that's a good solution

[01:37] <AlexDaniel> “Returns the number converted to the narrowest type that can hold it without loss of precision.”

[01:37] <AlexDaniel> maybe for some square roots it's not going to work

[01:38] *** quester joined
[01:38] <lucs> For my needs, it will do fine (smallish numbers).

[01:38] <lucs> Thanks.

[01:41] *** epony left
[01:42] *** silug joined
[01:43] *** quester left
[01:46] *** gabiruh left
[01:49] *** quester joined
[01:53] *** kybr left
[01:55] *** mcmillhj joined
[02:01] *** MasterDuke left
[02:01] *** kybr joined
[02:01] *** mcmillhj left
[02:17] *** MasterDuke joined
[02:28] *** turdmonkey joined
[02:28] *** turdmonkey is now known as Bowlslaw

[02:31] <Bowlslaw> Hi peoples

[02:33] <benjikun> Bowlslaw: hi again

[02:35] *** silug left
[02:38] *** mcmillhj joined
[02:42] *** quester left
[02:42] <Bowlslaw> how's it goin benjikun?

[02:42] *** quester joined
[02:43] <benjikun> Bowlslaw: going alright

[02:43] *** quester is now known as Guest49701

[02:43] *** mcmillhj left
[02:43] *** Guest49701 left
[02:44] <Bowlslaw> how come I can't do a hash of arrays?

[02:45] <perlpilot> Bowlslaw, I dunno ... why can't you do a hash of arrays?  ;)

[02:45] <Bowlslaw> my %hash = nums => [1..5], letters => ['a'..'e']

[02:46] <perlpilot> I don't see anything wrong with that.

[02:46] <Bowlslaw> ok well

[02:46] <Bowlslaw> when i try

[02:46] *** silug joined
[02:46] <Bowlslaw> say %hash{numbers} it gives me an "operator not found" error

[02:46] <Bowlslaw> but when I say %hash[0] it prints everything

[02:47] <perlpilot> you want %hash<numbers>  or %hash{'numbers'}

[02:47] <Bowlslaw> o

[02:47] <Bowlslaw> OH YEAH

[02:47] <Bowlslaw> perl 6 uses <>...

[02:48] <Bowlslaw> everything works as expected now. i'm not retarded

[02:48] <Bowlslaw> (well maybe a little)

[02:48] *** quester_ joined
[02:51] *** perlpilot left
[02:54] *** perlpilot joined
[02:54] *** mcmillhj joined
[02:58] *** quester_ left
[02:58] *** mcmillhj left
[02:59] *** quester_ joined
[03:02] * perlpilot just discovered CArray.allocate

[03:02] <perlpilot> (whoever implemented .allocate)++

[03:04] *** quester_ left
[03:05] *** quester joined
[03:09] <perlpilot> though I'm currently getting a floating point exception when I try to use it (which is weird)

[03:09] *** gabiruh joined
[03:13] *** psychoslave joined
[03:14] *** kybr left
[03:17] *** psychoslave left
[03:18] <Bowlslaw> is it beneficial to put a 'race for' inside of a react block?

[03:19] *** mcmillhj joined
[03:24] *** mcmillhj left
[03:27] <perlpilot> Bowlslaw, I'm going to go with "no" because the question doesn't quite make enough sense to me.  :-)

[03:28] <Bowlslaw> lol

[03:34] *** AlexDaniel left
[03:34] *** AlexDaniel joined
[03:36] *** mcmillhj joined
[03:38] *** epony joined
[03:41] *** mcmillhj left
[03:44] *** vike1 left
[03:51] *** psychoslave joined
[03:56] *** psychoslave left
[04:03] *** rindolf joined
[04:05] *** wamba joined
[04:06] *** kaare_ joined
[04:09] *** rindolf left
[04:10] *** mcmillhj joined
[04:15] *** mcmillhj left
[04:17] *** labster left
[04:17] *** AlexDaniel left
[04:17] <Juerd> lucs: Are you sure you want a type check there? How about "$foo %% 1"?

[04:17] *** AlexDaniel joined
[04:21] *** mcmillhj joined
[04:22] <lucs> Juerd: Ha, nice. Yeah, I wouldn't have thought of that.

[04:26] *** Bowlslaw left
[04:30] *** mcmillhj left
[04:33] *** psychoslave joined
[04:51] *** mcmillhj joined
[04:55] *** eliasr left
[04:56] *** mcmillhj left
[04:58] *** perlpilot left
[05:11] *** wamba left
[05:18] *** sauvin joined
[05:19] *** psychoslave left
[05:24] *** mcmillhj joined
[05:29] *** mcmillhj left
[05:32] *** psychoslave joined
[05:37] *** kaare_ left
[05:40] *** psychoslave left
[05:40] *** kaare_ joined
[05:52] *** psychoslave joined
[05:56] *** psychoslave left
[06:00] *** psychoslave joined
[06:13] *** mcmillhj joined
[06:18] *** mcmillhj left
[06:23] *** Garland_g[m] left
[06:23] *** CIAvash[m] left
[06:23] *** lance_w[m] left
[06:23] *** Matthew[m] left
[06:23] *** mienaikage left
[06:23] *** AlexDaniel`` left
[06:23] *** mirlur[m] left
[06:23] *** wictory[m] left
[06:23] *** AlexDaniel` left
[06:23] *** EuAndreh[m] left
[06:23] *** unclechu left
[06:24] *** ilmari[m] left
[06:26] *** benchable6 left
[06:26] *** greppable6 left
[06:26] *** squashable6 left
[06:26] *** bisectable6 left
[06:26] *** releasable6 left
[06:26] *** releasable6 joined
[06:26] *** squashable6 joined
[06:26] *** greppable6 joined
[06:26] *** bisectable6 joined
[06:26] *** benchable6 joined
[06:31] *** lizmat left
[06:31] *** mcmillhj joined
[06:36] *** mcmillhj left
[06:42] *** psychoslave left
[06:54] *** mcmillhj joined
[06:54] *** lizmat joined
[06:59] *** mcmillhj left
[07:05] *** MasterDuke left
[07:32] *** mienaikage joined
[07:34] *** mcmillhj joined
[07:35] *** quester left
[07:35] *** stmuk_ joined
[07:35] *** psychoslave joined
[07:35] *** jmerelo joined
[07:39] *** mcmillhj left
[07:54] *** domidumont joined
[07:55] <jmerelo> Maybe someone is interested in contributing to this issue https://github.com/perl6/doc/issues/2133

[07:55] *** psychoslave left
[08:01] *** domidumont left
[08:02] *** domidumont joined
[08:02] *** |oLa| joined
[08:03] *** |oLa| left
[08:05] *** ChoHag left
[08:09] *** mcmillhj joined
[08:14] *** mcmillhj left
[08:20] *** rindolf joined
[08:22] *** AlexDaniel`` joined
[08:22] *** AlexDaniel` joined
[08:22] *** unclechu joined
[08:22] *** mirlur[m] joined
[08:22] *** wictory[m] joined
[08:22] *** Matthew[m] joined
[08:22] *** lance_w[m] joined
[08:22] *** EuAndreh[m] joined
[08:22] *** ilmari[m] joined
[08:22] *** CIAvash[m] joined
[08:23] *** Garland_g[m] joined
[08:31] <Geth> ¦ doc: 23e56e3548 | (JJ Merelo)++ | doc/Language/syntax.pod6

[08:31] <Geth> ¦ doc: Adds indirect invocation to syntax

[08:31] <Geth> ¦ doc: 

[08:31] <Geth> ¦ doc: And also adds preamble to example, instead of skipping test. Closes #2131

[08:31] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/23e56e3548

[08:31] <synopsebot> Link: https://doc.perl6.org/language/syntax

[08:31] <Geth> ¦ doc: aa35ae1453 | (JJ Merelo)++ | doc/Language/syntax.pod6

[08:31] <Geth> ¦ doc: Fixes compilation error in preamble

[08:31] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/aa35ae1453

[08:31] <Geth> ¦ doc: 45d68ff5d6 | (JJ Merelo)++ | doc/Type/Any.pod6

[08:31] <synopsebot> Link: https://doc.perl6.org/type/Any

[08:32] <Geth> ¦ doc: Revising Any.skip and Any.batch

[08:32] <Geth> ¦ doc: 

[08:32] <Geth> ¦ doc: In fact, they were done already. I have only added some

[08:32] <Geth> ¦ doc: clarification. This closes #1195

[08:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/45d68ff5d6

[08:40] *** mikejw joined
[08:41] <mikejw> how can I escape a dollar sign in a qqx command?

[08:41] <lizmat> \$

[08:41] <mikejw> hmm

[08:42] <lizmat> do you need to interpolate other $foo in the string?

[08:42] <lizmat> if not, you could do:

[08:43] <lizmat> qqx:!s/ ... /

[08:43] <lizmat> the :!s indicating that no scalar interpolation should take place

[08:43] <mikejw> but I do want to use a variable as well

[08:44] <lizmat> alternative: {'$'}

[08:44] <mikejw> the command is  -> aws s3 ls s3://bucketname/$name | awk '{ print \$4 }'

[08:45] <lizmat> my $column = '$4'; -> aws s3 ls s3://bucketname/$name | awk '{ print $column }'

[08:45] <mikejw> ah thanks :)

[08:50] <jmerelo> lizmat: I have added stuff to R#1941. Maybe it's clearer now what I mean. Baseline is: some documentation is better than no documentation.

[08:50] <synopsebot> R#1941 [open]: https://github.com/rakudo/rakudo/issues/1941 Document Rakudo-specific classes to support Perl 6 documentation

[08:51] <lizmat> jmerelo: specifically about Rakudo::Iterator, what are you missing in its internal documentation ?

[08:52] <jmerelo> lizmat: you mean, besides the comments? 

[08:52] <lizmat> yes

[08:53] <jmerelo> lizmat: that one is better documented with comments than others, but a Pod would really help. I had to wade through the source to find its implementation, and then I saw it was huge. 

[08:54] <jmerelo> lizmat: a simple list of methods would have been helpful, in a Pod, for instance.

[08:55] <jmerelo> lizmat: but that one is just an example. This all started with this https://github.com/rakudo/rakudo/blob/98e575de00db42101d4879e43fe740a34791c418/src/core/CompUnit/Repository/Spec.pm6

[08:55] *** mcmillhj joined
[08:55] <mikejw> still struggling here

[08:55] <lizmat> FWIW, I'm slightly worried that providing a pod like that would be like a menu for people to choose from, which in the case of Perl 5 / perlguts

[08:55] <mikejw> '$4' is stored in $column is evaluated to 'True'

[08:56] <jmerelo> lizmat: you mean you are afraid that people would use in their own perl6 programs, creating a nightmare

[08:56] <lizmat> led to the situation where nothing can be changed in the internals because 

[08:56] <lizmat> yes

[08:56] <lizmat> mikejw: ??

[08:56] <jmerelo> lizmat: but people are going to do that anyway. And a bit of documentation would help the documentors.

[08:57] <lizmat> m: my $a = q/$4/; say qq/$a/   # mikejw 

[08:57] <camelia> rakudo-moar ddf496c72: OUTPUT: «$4␤»

[08:57] <lizmat> jmerelo: why would that help the documentors?

[08:58] <jmerelo> lizmat: check out the code https://github.com/rakudo/rakudo/blob/98e575de00db42101d4879e43fe740a34791c418/src/core/CompUnit/Repository/Spec.pm6

[08:59] <lizmat> yes, that could use quite some internal comments, I agree  :-)

[08:59] <jmerelo> lizmat: I mean, internal comments are documentation, some documentation is better than no documentation, and pod documentation is better than simple comments

[08:59] *** mcmillhj left
[09:00] <lizmat> well, this is more an issue for @LARRY I think

[09:01] <lizmat> I'll gladly write pod for the stuff that I've mostly done if we agree on that being a good idea

[09:01] <jmerelo> lizmat++

[09:13] *** mcmillhj joined
[09:18] *** mcmillhj left
[09:20] *** ChoHag joined
[09:23] <mikejw> I've just remembered you need to use the list 'modifier' when using qqx and capturing an array.  I can't remember where I've used it before

[09:24] <mikejw> qqx//.list ?

[09:25] *** damnlie joined
[09:28] <lizmat> I think qqx returns a Str with the complete output, so that would be .lines then # mikejw 

[09:28] <mikejw> ahh awesome that's it :)

[09:29] <lizmat> or .words if you're interested in words (separated by whitespace)

[09:29] <lizmat> or .comb( /\d+/ ) if you're interested in numbers  :-)

[09:30] <El_Che> lizmat: now you're showing off :)

[09:30] <lizmat> or whatever regex or grammar you want to run on it  :-)

[09:30] <lizmat> guess I am..  :-)

[09:33] <mikejw> thanks my dudes

[09:34] *** mcmillhj joined
[09:36] <lizmat> mikejw: and dudettes I presume?

[09:36] <mikejw> of course

[09:36] <lizmat> :-)

[09:39] *** mcmillhj left
[09:43] *** psychoslave joined
[09:44] <jmerelo> notable6: Perl 6 survey results in a repo: https://github.com/perl6/p6survey

[09:44] <notable6> jmerelo, Noted!

[09:45] <lizmat> jmerelo: I wish some normalization could have been done

[09:45] <lizmat> e.g. with most wanted feauture

[09:46] <lizmat> *feature

[09:46] <lizmat> it is basically only 2: faster and JVM

[09:46] <lizmat> ok, and Macros

[09:46] *** rindolf left
[09:46] <lizmat> so 3

[09:47] <lizmat> ah, it scrolls: ok, sorry, more than 3, but still, some normalization would have been nice

[09:47] <lizmat> perhaps for the next time  :-)

[09:48] *** psychoslave left
[09:48] *** psychoslave joined
[09:52] *** mcmillhj joined
[09:56] *** mcmillhj left
[09:56] *** rindolf joined
[10:01] <jmerelo> lizmat: those are the raw questions; we can process them now as we want. That question was free form, so that's just expected.

[10:12] *** psychoslave left
[10:14] *** pmurias joined
[10:14] *** mikejw left
[10:14] <pmurias> lizmat: so it seems faster performance on truffle is the dream feature according to the survey ;)

[10:16] <lizmat> pmurias: looking forward to a blog post I can mention in the P6W  :-)

[10:26] *** mcmillhj joined
[10:31] *** mcmillhj left
[10:34] <El_Che> pmurias: you are amalgaming responses into one. I am pretty sure that many people that answer "faster" don't want to run the jvm

[10:38] *** mcmillhj joined
[10:42] *** eliasr joined
[10:43] *** mcmillhj left
[10:53] *** MasterDuke joined
[10:56] <jmerelo> lizmat: 56 out of the 220 answers mention speed in one form or other. I've created a script and uploaded it to the repo.

[10:57] <lizmat> almost 25%  wow

[10:57] <lizmat> just over 25% even   :-)

[11:04] <jmerelo> lizmat: I might have missed some, or there could be false positives. Check out the script, just in case.

[11:04] <jmerelo> lizmat: maybe it would be better to create a tag could after normalizing to lowercase. I don't know. Any suggestion is welcome.

[11:04] <lizmat> jmerelo: am right in the middle of something, and about to have visitors, so will look at it (much) later today / tomorrow

[11:04] <jmerelo> lizmat: have fun.

[11:07] <lizmat> jmerelo: thank you!

[11:09] *** mcmillhj joined
[11:09] <pmurias> El_Che: I assume most people don't care significanttttly what they are running on

[11:13] *** psychoslave joined
[11:13] *** markoong joined
[11:14] *** mcmillhj left
[11:27] *** jmerelo left
[11:30] *** mcmillhj joined
[11:34] *** mcmillhj left
[11:45] <Juerd> Regarding speed, a simple benchmark shows that multi sub x(5) { ... } is consistently approx. 10% slower than multi sub x ($ where * == 5) { ... } both for positive and negative matches; this was unexpected.

[11:50] *** domidumont left
[11:50] *** vike1 joined
[11:51] <timotimo> m: multi sub x(5) { say "yup" }; x("5")

[11:51] <camelia> rakudo-moar ddf496c72: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling x(Str) will never work with any of these multi signatures:␤    (Int $ where { ... })␤at <tmp>:1␤------> 3multi sub x(5) { say "yup" }; 7⏏5x("5")␤»

[11:52] <timotimo> m: multi sub x($ where * == 5) { say "yup" }; x("5")

[11:52] <camelia> rakudo-moar ddf496c72: OUTPUT: «yup␤»

[11:52] <timotimo> a slight semantic difference

[11:53] <Juerd> timotimo: Oh, but it's still faster with Int $ where * == 5  :)

[11:55] <lizmat> could it be that the (5) means where * ~~ 5, rather than where * == 5 ?

[11:55] <lizmat> maybe Int could use its own .ACCEPTS ?

[11:56] <timotimo> i'd assume that's where the difference comes from

[11:56] <Juerd> lizmat: Perhaps, but where 5 and where * ~~ 5 are significantly slower.

[11:56] <lizmat> anything visible with --profile ?

[11:56] <timotimo> hm, didn't zoffix build an optimization recently?

[11:57] <Juerd> I have to go, sorry

[12:00] *** mcmillhj joined
[12:04] *** mcmillhj left
[12:10] * lizmat has to go too

[12:10] <lizmat> &

[12:27] <MasterDuke> both of those cases spend a lot of time in bind_one_param, which isn't jitted

[12:27] <timotimo> well, that's the slow path binder anyway, which is Just Bad

[12:28] <MasterDuke> and the literal case spends a lot of time in ACCEPTS (src/core/Numeric.pm6:11), which the where case doesn't have at all

[12:29] <MasterDuke> bind_one_param might just be because my benchmark code is bad

[12:29] <MasterDuke> m: multi sub foo(5) { "five" }; multi sub foo($a) { "not five" }; my $a; for ^500_000 { $a = foo($_ % 6) }; say $a; say now - INIT now

[12:30] <camelia> rakudo-moar ddf496c72: OUTPUT: «not five␤6.19927022␤»

[12:30] <MasterDuke> m: multi sub foo(Int $ where * == 5) { "five" }; multi sub foo($a) { "not five" }; my $a; for ^500_000 { $a = foo($_ % 6) }; say $a; say now - INIT now

[12:30] <camelia> rakudo-moar ddf496c72: OUTPUT: «not five␤6.28544211␤»

[12:30] <MasterDuke> that's what i ran. got a bigger difference between them though

[12:31] <MasterDuke> literal was 1s slower

[12:47] *** benjikun2 joined
[12:50] *** benjikun left
[12:50] *** SCHAPiE joined
[12:50] *** Zoffix joined
[12:52] <Zoffix> Could it be you're just measuring a very fast operation, but you're still using `INIT` and so get a lot of noise in your measurements?

[12:53] <Zoffix> If I look at ASTs, the (5) case is just a type check and an `iseq_i` op, while the other two cases involve a whatevercode clone invocation and a check against its .ACCEPTS

[12:54] <Zoffix> and inside that whatevercode there's even a callstatic of == op

[12:55] <MasterDuke> could be

[12:57] <MasterDuke> the profiles do look pretty similar (when sorted by exclusive time). except for the addition of ACCEPTS in the literal case, which is its 5th most expensive routine

[12:58] <Zoffix> In the literal case?

[12:58] <Zoffix> It shouldn't be there

[12:58] <MasterDuke> called for every iteration of the for

[13:00] <Zoffix> |1d check what's going on with `where 5` opt: http://colabti.org/irclogger/irclogger_log/perl6?date=2018-06-30#l363

[13:00] <ZofBot> Zoffix, Will remind you on 2018-07-01T09:00:40.807044-04:00 about check what's going on with `where 5` opt: http://colabti.org/irclogger/irclogger_log/perl6?date=2018-06-30#l363

[13:00] * Zoffix gets ready to go to the non-lang specific coding meeting

[13:01] *** llfourn joined
[13:01] <Zoffix> Gonna hack a GTK app in Perl 6 :)

[13:01] *** Zoffix left
[13:01] *** mcmillhj joined
[13:02] <MasterDuke> nice

[13:08] *** mcmillhj left
[13:13] *** Zoffix joined
[13:14] <Zoffix> For some reason my 2-week old install of rakudo/zef can't find JSON::Tiny, while homebox finds it.

[13:15] <Zoffix> And laptop install says there are 0 modules in cpan

[13:15] <moritz> zef update?

[13:16] <Zoffix> moritz: yeah, from zef update

[13:16] <Zoffix> And there are zero in the file it fetches: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan1.json

[13:17] <Zoffix> and doing zef --/cached install JSON::Tiny on home box fails to find it too now

[13:17] <Zoffix> wr found the weakest link in cpan ecosystem? :)

[13:17] <Zoffix> we found the weakest link in cpan ecosystem? :)

[13:18] <Zoffix> does cpanm talk to local cpan mirror directly?

[13:19] *** mcmillhj joined
[13:20] *** smls joined
[13:22] <Zoffix> eco: from:cpan

[13:22] <buggable> Zoffix, Found 279 results: Bailador, zef, Inline::Perl5, JSON::Tiny, App::Mi6. See https://modules.perl6.org/s/from%3Acpan

[13:23] *** mcmillhj left
[13:24] <smls> When writing a Test::* module with additional test function, is it possible to implement them using `pass` and `flunk` from the Test module, but refer to the *caller*'s line numbers in the diagnostics output?

[13:25] <timotimo> try "is hidden-from-backtrace" perhaps?

[13:25] <Zoffix> installed JSON::Tiny via direct link to repo taken from modules.perl6.org and filed https://github.com/ugexe/zef/issues/258

[13:25] <Zoffix> crap GTK::Simple is failing install now -_-

[13:26] <Zoffix> "libgtk-3-0 is already the newest version" but GTK::Simple's tests say it can't find the lib

[13:27] *** sena_kun joined
[13:27] <Zoffix> it says "libgtk-3.so" tho, not "libgtk-3-0"

[13:28] <Zoffix> same with libglib-2.0. I got libglib2.0-0

[13:28] <MasterDuke> doesn't nativecall need the name to be exactly the same or something like that?

[13:29] <MasterDuke> maybe add a symlink as a workaround?

[13:30] <Zoffix> From /lib/x86_64-linux-gnu/libglib-2.0.so.0 to /lib/x86_64-linux-gnu/libglib-2.0.so ?

[13:30] <smls> timotimo: Doesn't work.backtrace

[13:30] <Zoffix> smls: no, there's no way ATM

[13:31] <Zoffix> smls: is there some Test::Builder module in ecosystem?

[13:31] <Zoffix> eco: Test::Builder

[13:31] <buggable> Zoffix, Test::Builder 'Flexible framework for building TAP test libraries': http://modules.perl6.org/dist/Test::Builder:github:Kevin%20Polulak

[13:32] *** MilkmanDan left
[13:33] <Zoffix> Never used it, but maybe that can help?

[13:34] *** MilkmanDan joined
[13:35] *** mcmillhj joined
[13:37] <Zoffix> Here's how Test.pm6 figures out what line to report: https://github.com/rakudo/rakudo/blob/master/lib/Test.pm6#L715-L720

[13:37] <Zoffix> Maybe we should have something better and user-useable?

[13:39] <moritz> also, "until !" better written as "while"

[13:40] *** mcmillhj left
[13:40] <moritz> will try to simplify that when my build finishes

[13:41] <Zoffix> Filed R#1998

[13:41] <synopsebot> R#1998 [open]: https://github.com/rakudo/rakudo/issues/1998 No way to use Test.pm6 routines in userland Test libraries

[13:44] <Zoffix> MasterDuke++ `ln`ing the three libraries from lib.so.0 to lib.so worked

[13:48] *** psychoslave left
[13:49] <MasterDuke> doesn't Skarsnik have a rakudo PR open that attempts to do something with library version numbers?

[13:50] *** mcmillhj joined
[13:52] *** turdmonkey joined
[13:52] *** turdmonkey is now known as Bowlslaw

[13:54] <Bowlslaw> good morning

[13:54] *** mcmillhj left
[13:55] <Bowlslaw> I just discovered the ascii -> unicoe converter for perl6-vim

[13:55] <Bowlslaw> never used unicode in my code before..

[14:11] <Bowlslaw> my $λ = "this is lambda";

[14:15] <Bowlslaw> wow, it even does the whole greek alpha with the range operator

[14:17] *** mcmillhj joined
[14:21] *** markoong left
[14:22] *** mcmillhj left
[14:22] *** markong joined
[14:26] <sena_kun> junction is a unique thing to Perl 6, isn't it? At least under this name, as I cannot google similar thing in some other (not obscure one) language.

[14:32] <Bowlslaw> sena_kun: I haven't seen anything like it elsewhere, either, but I am a newb

[14:33] <Bowlslaw> oh, cool! Reading "The Algorithm Design Manual" is coming in handy in my web crawler. I'm trying to implement a depth limit to my crawler, and it looks like I will need to apply "Iterative Deepening depth-first search"

[14:35] <timotimo> it could be enough to just turn the URLs into a list or hash of "url" and "current depth" and when you're getting all the links from the page at one url, just push all links you've found with the "current depth + 1"

[14:35] <timotimo> and only actually get the page if the current depth is below a certain threshold

[14:36] <Bowlslaw> hmmm

[14:36] <Bowlslaw> as it is now, I collect all of the links from the page and push them into an array

[14:37] <Bowlslaw> so maybe...

[14:37] <Bowlslaw> %links = 'url1' => $depth, 'url2' => $depth

[14:37] <Bowlslaw> something like that?

[14:38] <timotimo> that'll have the added effect that the same url won't be in there more than once

[14:39] <Bowlslaw> I call .unique to ensure that

[14:42] <Bowlslaw> I think your idea is great

[14:42] <Bowlslaw> thanks

[14:42] <Bowlslaw> less code ;p

[14:55] *** mcmillhj joined
[14:57] <Bowlslaw> Are there any important differences between my-sub($var) and my-sub: $var ?

[14:58] <sena_kun> absence of parens? :)

[14:59] *** lizmat left
[14:59] <Bowlslaw> parens lives matter

[15:00] *** mcmillhj left
[15:02] <timotimo> you can't my-sub: $var, though. only with methods

[15:02] <timotimo> m: say: "hi"

[15:02] <camelia> rakudo-moar 64bdb3dd7: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant string "hi" in sink context (line 1)␤»

[15:02] <timotimo> that's not a call, that's a label

[15:04] <Bowlslaw> oo

[15:04] <El_Che> it sounds like a foo fighters song

[15:04] <Bowlslaw> so there isn't really a difference between parens and colon for method calls?

[15:05] *** smls left
[15:05] <timotimo> well, the precedence differs, of course

[15:08] *** fascinum joined
[15:08] <Bowlslaw> timotimo: thanks for your help, your hash suggestion was a great solution

[15:09] <Bowlslaw> also very perly ;p

[15:09] <Bowlslaw> autovivification ftw

[15:09] <Bowlslaw> What do you guys think about unicode and portability?

[15:10] <Bowlslaw> As in, what if you use a bunch of unicode symbols in your code, and then you or someone else, doesn't have proper uniode support?

[15:10] *** psychoslave joined
[15:12] <El_Che> Bowlslaw: the code will run, editing is something else

[15:12] <Geth> ¦ gtk-simple: fe417e5b82 | (Zoffix Znet)++ (committed using GitHub Web editor) | README.md

[15:12] <Geth> ¦ gtk-simple: Remove `use v6.c` from SYNOPSIS

[15:12] <Geth> ¦ gtk-simple: 

[15:12] <Geth> ¦ gtk-simple: When 6.d comes out this would be outdated and we might forget to remove it

[15:12] <Geth> ¦ gtk-simple: review: https://github.com/perl6/gtk-simple/commit/fe417e5b82

[15:13] *** mcmillhj joined
[15:13] <Bowlslaw> El_Che: so the code will still run, but the rendering of the unicode symbols will be funky?

[15:14] <Zoffix> Bowlslaw: it might, yeah

[15:14] <El_Che> yes, I expect that

[15:14] <El_Che> you're not force to use utf8 only charsij your output, though

[15:14] <El_Che> d

[15:15] <Bowlslaw> the code points would be read properly by Rakudo, is my guess

[15:15] <Zoffix> TIL this works 

[15:16] <Zoffix> m: class Foo { has $.a; has $.b; method new(|) {}; }; Foo.new: my $a = 42.abs, my $b = 50.abs; say [$a, $b]

[15:16] <camelia> rakudo-moar 64bdb3dd7: OUTPUT: «[42 50]␤»

[15:16] *** MasterDuke left
[15:16] <Zoffix> I thought parens would be required around first `my`

[15:16] <Bowlslaw> lol what in the world is that

[15:17] <Zoffix> m: class Foo { has $.a; has $.b; method new(|c) { dd c }; }; Foo.new: my $a = 42.abs, my $b = 50.abs; say [$a, $b]

[15:17] <camelia> rakudo-moar 64bdb3dd7: OUTPUT: «\(42, 50)␤[42 50]␤»

[15:17] <Zoffix> m: class Foo { has $.a; has $.b; method new(|c) { dd c }; }; Foo.new: (my $a = 42.abs), my $b = 50.abs; say [$a, $b]

[15:17] <camelia> rakudo-moar 64bdb3dd7: OUTPUT: «\(42, 50)␤[42 50]␤»

[15:17] <Zoffix> hm...

[15:17] <Zoffix> m: class Foo { has $.a; has $.b; method new(|c) { dd c }; }; Foo.new: my $a := 42.abs, my $b := 50.abs; say [$a, $b]

[15:17] <camelia> rakudo-moar 64bdb3dd7: OUTPUT: «\((42, 50))␤[(42 50) 50]␤»

[15:18] <Zoffix> m: class Foo { has $.a; has $.b; method new(|c) { dd c }; }; Foo.new: (my $a := 42.abs), my $b := 50.abs; say [$a, $b]

[15:18] <camelia> rakudo-moar 64bdb3dd7: OUTPUT: «\(42, 50)␤[42 50]␤»

[15:18] *** benjikun joined
[15:18] <Zoffix> Ahh... They are required, but only if you're binding :)

[15:18] <Zoffix> Cool.

[15:18] *** mcmillhj left
[15:20] *** benjikun2 left
[15:22] <Geth> ¦ gtk-simple: a35fc1b870 | (Zoffix Znet)++ (committed using GitHub Web editor) | README.md

[15:22] <Geth> ¦ gtk-simple: Use a clearer word

[15:22] <Geth> ¦ gtk-simple: review: https://github.com/perl6/gtk-simple/commit/a35fc1b870

[15:22] *** Zoffix left
[15:24] *** mcmillhj joined
[15:25] <Geth> ¦ gtk-simple: 197de0350e | (Zoffix Znet)++ (committed using GitHub Web editor) | examples/01-hello-world.pl6

[15:25] <Geth> ¦ gtk-simple: Fix casing in method names in docs

[15:25] <Geth> ¦ gtk-simple: review: https://github.com/perl6/gtk-simple/commit/197de0350e

[15:27] *** Bowlslaw left
[15:27] <AlexDaniel> squashable6: next

[15:27] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 5 days and ≈18 hours (2018-07-07 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:29] *** mcmillhj left
[15:32] *** psychoslave left
[15:33] *** Zoffix joined
[15:35] *** araraloren joined
[15:35] <Zoffix> Any idea how to get a GTK app to work with react/whenever instead of .tap'ing all the buttons? I'm having issue with getting this to exit. The app just freezes when I press "Exit": https://gist.github.com/zoffixznet/78914f5253e0dac19eef5418074315bf

[15:35] *** fascinum left
[15:35] <Zoffix> Even tho the "hello" button works fine"

[15:35] *** xtreak joined
[15:36] *** stee joined
[15:37] <Zoffix> Hm, this works: https://gist.github.com/zoffixznet/78914f5253e0dac19eef5418074315bf

[15:37] <Zoffix> tho a bit uggo, but meh

[15:38] <Zoffix> I guess I can just stick the react block into start

[15:39] *** mcmillhj joined
[15:43] *** mcmillhj left
[15:46] *** domidumont joined
[15:49] *** gabiruh left
[15:54] *** domidumont left
[15:55] *** mcmillhj joined
[15:58] *** araraloren left
[15:59] *** araraloren joined
[15:59] <Geth> ¦ gtk-simple: 8036249751 | (Zoffix Znet)++ (committed using GitHub Web editor) | examples/02-toggles.pl6

[15:59] <Geth> ¦ gtk-simple: We don't require unspace here anymore

[15:59] <Geth> ¦ gtk-simple: review: https://github.com/perl6/gtk-simple/commit/8036249751

[15:59] *** mcmillhj left
[15:59] *** gabiruh joined
[16:02] *** psychoslave joined
[16:05] *** jmerelo joined
[16:06] <Geth> ¦ doc: 0752731914 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Language/traps.pod6

[16:06] <Geth> ¦ doc: Another solution for `run «…»` trap

[16:06] <Geth> ¦ doc: 

[16:06] <Geth> ¦ doc: And some clarified comments.

[16:06] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0752731914

[16:06] <synopsebot> Link: https://doc.perl6.org/language/traps

[16:06] *** turdmonkey joined
[16:07] <jmerelo> Hi

[16:07] <sena_kun> o/

[16:07] <araraloren> night here o/

[16:08] *** turdmonkey is now known as Bowlslaw

[16:08] <Zoffix> \o

[16:08] <jmerelo> Afternoon here in hot Granada, Spain

[16:09] <araraloren> Seems like everywhere is so hot :)

[16:09] <Zoffix> Same here in hot Canada :)

[16:09] <Zoffix> +46C

[16:09] <Zoffix> "feels like" +46C

[16:09] <jmerelo> Zoffix: :-)

[16:09] <AlexDaniel> 😮

[16:10] <araraloren> can not imagine 

[16:10] <Zoffix> Yeah, my igloo is melting :P

[16:10] <AlexDaniel> araraloren: 14°C here, not hot at all

[16:10] <AlexDaniel> araraloren: Estonia

[16:11] <jmerelo> AlexDaniel: Wow.

[16:11] <araraloren> here night is not hot, 23°C

[16:12] <jmerelo> You know one question missing in the survey? Country

[16:12] *** mcmillhj joined
[16:12] <jmerelo> I have the impression that we folks in Europe are not too abundant. Mornings in the chat channel are really quiet.

[16:13] <huf> Zoffix: is that the real temperature or is it really humid?

[16:14] <Zoffix> Says "+32C 'feels like +44C', humidity 63%"

[16:14] <huf> ugh

[16:14] <huf> though i dunno what they base the feels like on

[16:14] <araraloren> here is Tsingtao/QingDao 

[16:14] <huf> 63 isnt *that* high. but 32C is hot enough

[16:15] *** Bowlslaw left
[16:15] *** wamba joined
[16:16] *** psychoslave left
[16:17] *** mcmillhj left
[16:17] <sena_kun> jmerelo, in my little experience, many coders just tend to wake up relatively "late". :) Personally, I don't know any folk who wakes up before 10.

[16:18] <Zoffix> benjikun: is https://github.com/perl6/p6survey/ the final results or is there a better-viewable version coming along? That CSV file is hard to read. 

[16:19] <jmerelo> sena_kun: that could be, but still. It's always more lively in the afternoon than in the morning. And there's basically noone early in the morning, European time. El_Che, timotimo, moritz, lizmat, that's it.

[16:20] <jmerelo> Zoffix: check this out https://docs.google.com/forms/d/19qSBpGWWc9RNruxPWySHkmy3tppaqeqUNGfZpHhdsMs/viewanalytics

[16:20] <Zoffix> jmerelo: is that the final URL for result?

[16:20] <jmerelo> Zoffix: I would say so, yes. 

[16:20] <Zoffix> jmerelo: as in, if I make that URL into perl6.org/survey/2018.06-results is that fine?

[16:21] <jmerelo> Zoffix: right.

[16:21] <Zoffix> jmerelo: oh, and is the survey done now or are we still waiting for results.

[16:21] <jmerelo> Zoffix: it's not going to change; and the answers are not going to change either

[16:21] <jmerelo> Zoffix: no, it's closed.

[16:21] <Zoffix> cool

[16:22] <Geth> ¦ perl6.org: dbd5604bea | (Zoffix Znet)++ (committed using GitHub Web editor) | source/.htaccess

[16:22] <Geth> ¦ perl6.org: Add short URL for 2018.06 p6 survet results

[16:22] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/dbd5604bea

[16:25] <Zoffix> Pretty cool that a quarter of Perl 6 users haven't used Perl 5... "extensively"

[16:26] *** psychoslave joined
[16:26] <jmerelo> Zoffix: Yep, but that's still too little, I guess.

[16:27] <jmerelo> I think that the bulk of the community should come from outside the Perl community. 

[16:28] <jmerelo> Zoffix: this is the first survey, right?

[16:28] <araraloren> do we have next season, I am miss that survey :)

[16:28] <Zoffix> jmerelo: dunno

[16:28] <jmerelo> araraloren: I think the intention of benjikun is to run it once every quarter or so.

[16:29] <Zoffix> 10% have used P6 in the past but not any more. Interesting that they still were aware of the existence of this survey

[16:29] <jmerelo> Zoffix: maybe they just hang out because of the community :-)

[16:29] <araraloren> oh

[16:29] *** psychoslave left
[16:30] <AlexDaniel> age distribution seems to be ok :)

[16:30] <Zoffix> 23% haven't used zef? shocking

[16:30] *** psychoslave joined
[16:30] <jmerelo> Zoffix: maybe they used panda :-)

[16:30] <AlexDaniel> a bit too little on <18 side maybe

[16:30] <Zoffix> AlexDaniel: pretty surprised to see so many people over 70 

[16:31] <AlexDaniel> over 60 you mean

[16:31] <Zoffix> I mean over 60

[16:31] <Zoffix> Makes me feel very young :P

[16:31] <jmerelo> Zoffix: not really. If you think about the middle age of the Perl community from where most come from...

[16:32] <Zoffix> So about 35% already use Perl 6 for work, a lot higher than I expected

[16:32] <jmerelo> Zoffix: I would have to do some cross-question analysis.

[16:32] * jmerelo thinks about creating a Sankey diagram.

[16:32] <Zoffix> And only a quarter use Rakudo Star

[16:33] <Zoffix> 20% say they "cloned the repo"... Wonder if that means they always use whatever happend to be HEAD...

[16:34] <AlexDaniel> yes but also 9.2% + 13.3% for third-party and distro packages, that's very nice I think

[16:35] *** fake_space_whale joined
[16:35] <AlexDaniel> so a lot of people using proper releases, even if not rakudo star

[16:37] *** psychoslave left
[16:37] <AlexDaniel> so people want better speed and performance

[16:37] <Zoffix> dunno if stmuk still plans to quit doing Rakudo Stars at the end of the year, but if that's still the plan, maybe we should kill Star entirely, if it's just 25%.

[16:38] <Zoffix> Yeah, the amount of speed/perf responses is a lot larger than I anticipated.

[16:38] <Zoffix> Would be nice to know speed of *what* part of the language

[16:38] <AlexDaniel> “Grammar Optimization” “Faster Grammars” :)

[16:38] <AlexDaniel> most people probably want general speedups

[16:39] *** fascinum joined
[16:40] <AlexDaniel> “Stability and performance.” “performance/stability” – at least some people mentioned stability

[16:40] <AlexDaniel> “Rename Perl 6 to Rakudo!!” “Keep the Perl 6 name.” :D

[16:40] <Zoffix> Also listed as favourite feature, so yeah, looks like optimizing grammars should be high on our priority list. Especially since it'll help that awful 80s compile time after each change :)

[16:47] <AlexDaniel> Zoffix: R#1999 maybe?

[16:47] <synopsebot> R#1999 [open]: https://github.com/rakudo/rakudo/issues/1999 [meta][regex][severe] Roadmap for Regex/Grammar optimizations

[16:47] <AlexDaniel> damn 1 away from 2000

[16:47] <AlexDaniel> weekly: 2000 tickets/PRs on github

[16:47] <notable6> AlexDaniel, Noted!

[16:47] <AlexDaniel> weekly: (in rakudo repo)

[16:47] <notable6> AlexDaniel, Noted!

[16:48] <Zoffix> :)

[16:48] <jmerelo> AlexDaniel: hey, you got the D#2000 ticket and didn't "note" it! And this is not even 2000, it's 1999! 

[16:48] <synopsebot> D#2000 [closed]: https://github.com/perl6/doc/issues/2000 [site] Content of pages without ToC appears on the left side

[16:49] * jmerelo jealous

[16:49] *** fascinum left
[16:49] <AlexDaniel> weekly: Also ≈one month ago we hit 2000 tickets/PRs on https://github.com/perl6/doc

[16:49] <notable6> AlexDaniel, Noted!

[16:49] <AlexDaniel> jmerelo: didn't notice :)

[16:50] <jmerelo> AlexDaniel: yay!!!

[16:50] <El_Che> lots of rakudobrew

[16:50] <Zoffix> yeah, too much :)

[16:52] <AlexDaniel> is RT down?…

[16:53] <Zoffix> I think perl.org is down. Like our CPAN dist fetcher is down

[16:54] <stmuk_> well more people are using star at 25.7% than the monthly debs etc at 9.2%

[16:55] <stmuk_> so I'd hope someone picks up R* after 2018.10

[16:55] <stmuk_> the worrying stat was 13.3% distro packages :)

[16:55] <Zoffix> :D

[16:55] <AlexDaniel> why worrying?

[16:56] <Zoffix> They're likely outdated

[16:56] <Zoffix> s/likely/might be/;

[16:56] <AlexDaniel> not really, actually

[16:56] <stmuk_> yeah you will get people asking for support for 3 year old versions

[16:57] <El_Che> stmuk_: I am not surprised. Most distros have old packages and rakudo star is still the official way to run rakudo

[16:57] <AlexDaniel> so debian stretch users have 2016.12, testing is 2018.05 and unstable is 2018.06

[16:57] <El_Che> everything else is many clicks away and explicitly non-official

[16:57] <AlexDaniel> and I think there's nothing bad about that at all

[16:57] <Zoffix> I got 2013.12.1 rakudo in the repos on my current laptop :P

[16:58] <Zoffix> 2016.12 is ancient IMO

[16:58] <araraloren> I got old rakudo too

[16:58] <El_Che> distro packages will go way up as time passes and rakud stabilizes

[16:58] <stmuk_> I was surprised by the number using windows 22.4% compared with Mac 25.6%

[16:59] <araraloren> good night :)

[16:59] <El_Che> stmuk_: why are you thinking of passing R* to someone elses, it looks like you're doing a good job

[16:59] <AlexDaniel> fedora is even fresher: http://rpms.remirepo.net/rpmphp/zoom.php?rpm=rakudo

[16:59] <araraloren> go to sleep now

[16:59] <AlexDaniel> (if that's the right link)

[16:59] *** araraloren left
[16:59] *** Zoffix left
[16:59] <AlexDaniel> I think the situation with distro packages is very good, and definitely not worrying

[17:00] <El_Che> AlexDaniel: I run the most recent ubuntu on my laptop, but servers are work run the latest centos and that's means OOOOOLD

[17:00] <jmerelo> I don't have the privs to publish this in the web, but here's the sankey diagram for agegroup vs perl use

[17:00] <jmerelo> https://github.com/perl6/p6survey

[17:01] <AlexDaniel> El_Che: yeah but what's the rakudo version in the last stable centos?

[17:01] <El_Che> none

[17:01] <AlexDaniel> ok, so no problem

[17:01] <AlexDaniel> :)

[17:01] <El_Che> AlexDaniel: it is, most people won't find the repos and there is no way in hell admin will compile rakudo on production

[17:01] <El_Che> AlexDaniel: it's a huge problem

[17:02] <El_Che> admins

[17:02] <AlexDaniel> El_Che: not in this context. We were talking about how using distro packages is “worrying”, based on survey results that a lot of people *do* use distro packages

[17:02] <El_Che> and by the time rakudo makes it to the repos it will be an old release that probably won't even work with zef

[17:02] <stmuk_> El_Che: I've been doing it for ages and it probably fresh blood

[17:03] <stmuk_> ^ needs

[17:03] <AlexDaniel> El_Che: yes, I'm not saying that it is not an issue, just not in this context :)

[17:03] <jmerelo> Here you go the Sankey diagram for age group vs. perl use https://github.com/perl6/p6survey/blob/master/illos/sankey-agegroup-vs-perluse-June-2018.png

[17:03] <AlexDaniel> jmerelo: some labels would make a huge difference :)

[17:04] <jmerelo> Gist of it is all users over 40 are prior Perl users.

[17:04] <stmuk_> I'll probably asking for a R* guy after Oct (or earlier if anyone reading this is interested)

[17:04] <jmerelo> AlexDaniel: right is age group, right is prior perl user.

[17:05] <jmerelo> I'll see if I can do better.

[17:05] <AlexDaniel> jmerelo: I understand, but people looking at the graph on twitter or wherever it gets reposted won't

[17:05] <El_Che> stmuk_: good luck. It's difficult finding replacements in FOSS

[17:05] <AlexDaniel> jmerelo: it's a really nice graph by the way :)

[17:05] <jmerelo> AlexDaniel: man, it's R. It can probably be done, but it's never easy...

[17:05] <AlexDaniel> stmuk_: thank you for your work ♥

[17:06] <jmerelo> AlexDaniel: It's nicer and interactive if published, but I don't have admin privs in that repo.

[17:06] <AlexDaniel> jmerelo: you sure? ;) ;) ;)

[17:07] <jmerelo> AlexDaniel: Ah! Some magic has happened! I can do it now! It's the Camelia, the fairy godmother, listening to my wishes :-)

[17:07] <El_Che> stmuk_: whatever happens we need to make sure the transistion happens smoothly becasue of the number of people using star

[17:07] <AlexDaniel> camelia++

[17:08] <stmuk_> AlexDaniel: I've not gone yet :)

[17:08] <AlexDaniel> stmuk_: I know, it doesn't stop me from thanking you :)

[17:08] <stmuk_> El_Che: sure

[17:08] <stmuk_> :)

[17:08] *** markong is now known as markoong

[17:08] <El_Che> stmuk_: after the holidays you'll have full batteries again and continue the stewardship :)

[17:08] <jmerelo> AlexDaniel: and here you go https://perl6.github.io/p6survey/html/sankey-agegroup-vs-perluse.html

[17:09] *** jast joined
[17:09] <AlexDaniel> jmerelo: STILL NO LABELS!!!!!

[17:09] <jmerelo> AlexDaniel: still trying to find out how to label the two parts... 

[17:09] <AlexDaniel> :)

[17:09] <AlexDaniel> jmerelo: wait you can publish html just like that??

[17:09] <AlexDaniel> I didn't know that

[17:10] <jmerelo> I mean, it's not trivial. Columns are generated automatically. I'll have to hack something...

[17:10] * AlexDaniel never wondered how github.io stuff worked

[17:10] <jmerelo> AlexDaniel: right. Just tell it to publish the master branch; you can also do it in a directory or a gh-pages branch.

[17:10] <El_Che> I use a /docs directory

[17:11] <El_Che> a github pages branches is just to weird

[17:11] <jmerelo> El_Che: that's what was used for a long time...

[17:17] <jmerelo> AlexDaniel: check now https://perl6.github.io/p6survey/html/sankey-agegroup-vs-perluse.html

[17:17] <jmerelo> It's lost the colors, I don't know why...

[17:17] <AlexDaniel> jmerelo: you mean “Perl 5 user”?

[17:17] <jmerelo> Er

[17:18] <AlexDaniel> jmerelo: right side is no longer sorted

[17:18] *** domidumont joined
[17:19] <jmerelo> AlexDaniel: I think it was just by chance... I've generated it again

[17:20] <jmerelo> The script can generate crossing between any two columns you want. I'm taking requests.

[17:20] <AlexDaniel> jmerelo: it's hard to read if not sorted

[17:21] <jmerelo> AlexDaniel: you won't happen to work in academia?

[17:21] <AlexDaniel> jmerelo: 😈

[17:24] *** ChoHag left
[17:27] <jmerelo> AlexDaniel: luckily, it could be solved on the Perl 6 side.

[17:33] *** ChoHag joined
[17:34] <AlexDaniel> jmerelo: what about matching“How long have you been using Perl 6?” and “Have you ever experienced issues with using your Perl 6 programs with newer Rakudo versions?” in a similar way?

[17:38] <jmerelo> AlexDaniel: let's see

[17:44] <jmerelo> AlexDaniel: here you go https://perl6.github.io/p6survey/html/sankey-perl6use-vs-issues.html

[17:45] <AlexDaniel> jmerelo: left side is not sorted!!!

[17:45] <jmerelo> AlexDaniel: it's randomly sorted :-)

[17:46] <jmerelo> AlexDaniel: check out the code. If there's a number, I sort it numerically. If there's not, well, tough luck.

[17:46] <AlexDaniel> m: say ‘jmerelo’.comb.pick(*).join

[17:46] <camelia> rakudo-moar 64bdb3dd7: OUTPUT: «erljome␤»

[17:46] <AlexDaniel> erljome: alright!

[17:47] <jmerelo> Point is, you have to do it by hand. Not trivial.

[17:48] <jmerelo> AlexDaniel: still, there's some information you can obtain, right? For instance, most people using for less than a year have had no issue.

[17:48] <jmerelo> AlexDaniel: no one less than a month has had an issue.

[17:48] <jmerelo> Most people not using it anymore is _not_ because they had an issue.

[17:51] *** wamba left
[17:51] *** wamba joined
[17:55] <AlexDaniel> yeah

[18:03] <jmerelo> AlexDaniel: this one is interesting https://perl6.github.io/p6survey/html/sankey-perl6use-vs-docscore.html

[18:04] <jmerelo> AlexDaniel: most people who give a low score have stopped using it.

[18:13] <thowe> how many respondents?

[18:13] *** xtreak left
[18:13] *** Possum joined
[18:14] <thowe> I think it's interesting that almost half have been using less than a year.

[18:14] <jmerelo> tobs: 220

[18:17] *** domidumont left
[18:18] <sena_kun> Can anyone please re-phrase "It (constructor) can be used to create objects by providing it with arguments" line from introduction? I am not sure what the intended meaning is.

[18:21] *** fake_space_whale left
[18:22] <sena_kun> Seems like a much more simple line is just "It takes arguments and creates an object".

[18:24] <AlexDaniel> yes, that sounds clearer to me, but maybe change “it” to “constructor”

[18:24] <sena_kun> Thanks for confirmation. Well, "it" or "constructor" does not really matter, as I am not messing with English version. :)

[18:27] <jmerelo> sena_kun: can you please open an issue?

[18:29] <sena_kun> jmerelo, for perl6intro repo? Not sure if needed(though likely is). The bad thing is that things get old quickly if you have a bunch of translations around. But I am considering it now, I also see minor style issues.

[18:29] <jmerelo> sena_kun: I thought that was for perl6/doc. But yes, you can create issues for that too.

[18:31] <sena_kun> jmerelo, too much docs detected! :)

[18:32] <jmerelo> sena_kun: perl6/doc is rather a reference. I mean, wherever you found the error, it will help if you create an issue to fix it :-)

[18:32] *** psychoslave joined
[18:35] <sena_kun> jmerelo, agreed. I used to work with doc repo some years ago(huh, checked now and I am even ranked 16th as contributor), yet have other Perl6 things to work with now. :S But, of course, I won't refuse to open an issue when needed.

[18:36] *** Possum left
[18:36] *** Possum joined
[18:37] *** llfourn left
[18:41] *** llfourn joined
[18:54] <jmerelo> sena_kun: thanks! 

[18:54] <jmerelo> sena_kun: and come back to perl6/doc. We need you!

[18:58] <jmerelo> sena_kun: you are also one of the authors with the most files modified https://github.com/JJ/TPF-Grant/blob/7e971bd786e024ec74dc1bcc1ba3106390412c6b/data/author-files.csv

[18:58] <jmerelo> sena_kun: and the one with the highest entropy https://github.com/JJ/TPF-Grant/blob/7e971bd786e024ec74dc1bcc1ba3106390412c6b/data/author-entropy.csv

[18:59] *** psychoslave left
[19:00] *** HaraldJoerg joined
[19:00] *** stee left
[19:05] <sena_kun> jmerelo, Comma needs me too. :)

[19:06] *** Possum left
[19:06] <jmerelo> sena_kun: of course :-). And we all need Comma.

[19:08] <sena_kun> as for files: the thing is that I cannot decently contribute as my English is not native enough plus I don't know much about internals to write docs. Yes-yes, I know about "Not the one who knows better, but the one who is willing to do", yet still. So I concentrated mainly on issues like "grep/sed all http links to https and check the result" or "unify a big bunch of files", basically a large amount of style edit-centered work. Hence the 

[19:08] <sena_kun> files and entropy.

[19:08] <sena_kun> afk. o/

[19:09] <jmerelo> sena_kun: where did you see that sentence? I'm using it in my presentation

[19:09] <sena_kun> jmerelo, what sentence? About constructor?

[19:09] <jmerelo> sena_kun: I mean "not the one who knows better, but the one who's willing"

[19:09] <sena_kun> Ah. It was from your comment, so obviously from you. :)

[19:10] <jmerelo> sena_kun: he

[19:10] <jmerelo> I thought you had picked it up from somewhere else, and I inadvertently did it too. i wanted to quote it properly.

[19:11] <jmerelo> sena_kun: but your explanation of entropy makes sense.

[19:11] <jmerelo> Going AFK now. Dinner!

[19:11] <jmerelo> See you

[19:12] *** jmerelo left
[19:13] *** Zoffix joined
[19:14] *** Possum joined
[19:15] <Zoffix> jmerelo, but… all but one people who no longer use it have rated the docs as above average. Where are you seeing any correlation between docs quality and people stopping using it?

[19:16] <Zoffix> I don't see any correlation at all in that pairing.

[19:17] *** MasterDuke joined
[19:18] <Zoffix> *all but 3

[19:19] *** wamba left
[19:19] <Zoffix> And IMO the Issues with Perl 6 question is tainted and can't be used. It wasn't clear enough. I imagine a whole bunch of pre-Christmas adopters filled one of the "yes" options even if breakage was pre-stable-release.

[19:28] *** stee joined
[19:29] *** zakharyas joined
[19:30] *** reisinge joined
[19:44] *** zachk joined
[19:44] *** zachk left
[19:44] *** zachk joined
[19:44] *** reisinge left
[20:21] *** Xliff joined
[20:21] <Xliff> \w

[20:22] <Xliff> Err... 

[20:22] <Xliff> \i

[20:22] <Xliff> Whatevs.

[20:22] *** Zoffix left
[20:22] <Xliff> Has anyone gotten Inline::Perl5 to install undfer Rakudo Star?

[20:24] *** fake_space_whale joined
[20:25] *** louisono joined
[20:46] *** Xliff_ joined
[20:46] *** louisono left
[20:49] *** Xliff_ left
[20:50] *** Xliff left
[21:02] *** pmurias left
[21:07] *** MasterDuke left
[21:10] *** lizmat joined
[21:30] *** kaare_ left
[21:39] *** gabiruh left
[21:43] <zostay> Yes, I was using it for the first time just this week and it just worked for what I needed.

[22:10] *** rindolf left
[22:15] *** gabiruh joined
[22:29] *** zakharyas left
[22:48] *** sena_kun left
[22:53] *** gabiruh left
[23:04] <tbrowder_> i enjoyed taking the survey, but it didn’t allow going back so i fumbled some answers. 

[23:05] <tbrowder_> also, imo, some answer choices begged for an “other” or additional detail.

[23:07] <El_Che> tbrowder_: it was a good kickstart

[23:07] <tbrowder_> anyone using 2018.06 having any pod problems? p6 seems to be evaluating code inside a pod block which is a bit disconcerting.

[23:08] <tbrowder_> El_Che: you are correct! i’m not knocking it, just saying...

[23:08] <El_Che> tbrowder_: I know, I am just stating the obvious :)

[23:08] <AlexDaniel> yeah, next one should be better :)

[23:10] <tbrowder_> ref pod: i regularly use =begin comment/=end comment blocks to cut out code and haven’t noticed errors from them with p6 before.

[23:11] <AlexDaniel> m: https://gist.github.com/AlexDaniel/fb0880ac8e0c5e9fca817dbd0f4ee919

[23:11] <camelia> rakudo-moar 64bdb3dd7: ( no output )

[23:11] <AlexDaniel> 6c: https://gist.github.com/AlexDaniel/fb0880ac8e0c5e9fca817dbd0f4ee919

[23:11] <committable6> AlexDaniel, ¦6c (31 commits): «»

[23:12] <AlexDaniel> tbrowder_: ↑ so what's the issue exactly?

[23:16] <benjikun> .tell Zoffix Sorry, was asleep. Yeah this round's survey is complete, I was going to create charts for each question, but I think the google form results will do fine for now.

[23:16] <yoleaux> benjikun: I'll pass your message to Zoffix.

[23:17] <El_Che> benjikun: coordinate with jmerelo, he seemed to be working an graphs as well

[23:18] <benjikun> I saw the one he was making for GitHub contributions, we could certainly make some custom ones together for the survey results as well

[23:19] <AlexDaniel> weekly: 300 people in perl6 org on github: https://github.com/orgs/perl6/people

[23:19] <notable6> AlexDaniel, Noted!

[23:20] <AlexDaniel> wekkly: (hm, maybe not all of them are visible publicly, so possibly it's not noteworthy)

[23:21] <AlexDaniel> hello?

[23:21] <AlexDaniel> ha

[23:21] <AlexDaniel> weekly: (hm, maybe not all of them are visible publicly, so possibly it's not noteworthy)

[23:21] <notable6> AlexDaniel, Noted!

[23:21] <El_Che> lol

[23:22] <tbrowder_> AlexDaniel: i need to golf the problem and do a little more checking, but i’m getting errors like undeclared vars from code inside =begin/=end comment blocks.

[23:23] <AlexDaniel> tbrowder_: sounds like you have an unclosed quote " somewhere before =begin

[23:23] <AlexDaniel> or maybe /

[23:24] <tbrowder_> could be, but, if that’s the case, maybe LTA error msg

[23:24] <AlexDaniel> oh yeah: RT#75592 [LTA] Long running unclosed quotes trigger unhelpful message 

[23:25] <tbrowder_> and granted, it was pretty rough code ahead of the pod

[23:26] *** HaraldJoerg left
[23:27] *** synopsebot left
[23:35] *** raschipi joined
[23:42] *** benjikun2 joined
[23:46] *** benjikun left
