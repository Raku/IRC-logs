[00:01] *** mcmillhj left
[00:05] *** ufobat left
[00:08] <DracoChartin> Anyone know if someone is working on a data frames package like pandas for python or like dplyr from R but for perl6?

[00:08] *** margeas left
[00:13] *** mcmillhj joined
[00:17] *** mcmillhj left
[00:22] *** pierre_ joined
[00:24] *** mcmillhj joined
[00:26] *** DracoChartin left
[00:29] *** mcmillhj left
[00:29] *** rindolf left
[00:37] *** pierre_ left
[00:38] *** mcmillhj joined
[00:38] *** pierre_ joined
[00:41] *** [particle]1 joined
[00:43] *** mcmillhj left
[00:44] *** pharv left
[00:45] *** TimToady_ joined
[00:46] *** syntaxman joined
[00:46] *** sjn_ joined
[00:46] *** gfldex_ joined
[00:46] *** bartolin_ joined
[00:46] *** [ptc]_ joined
[00:46] *** masak_ joined
[00:46] *** cibs_ joined
[00:50] *** tomaw_ joined
[00:50] *** ccntrq- joined
[00:51] *** tomaw left
[00:51] *** syntaxma1 left
[00:51] *** sjn left
[00:51] *** [particle] left
[00:51] *** TimToady left
[00:51] *** APic left
[00:51] *** giraffe left
[00:51] *** ccntrq left
[00:51] *** bartolin left
[00:51] *** masak left
[00:51] *** gfldex left
[00:51] *** [ptc] left
[00:51] *** cibs left
[00:51] *** BooK_ left
[00:52] *** giraffe joined
[00:52] *** pharv joined
[00:53] *** coverable6 left
[00:53] *** bloatable6 left
[00:53] *** bloatable6 joined
[00:53] *** coverable6 joined
[00:54] *** ccntrq- left
[00:54] *** committable6 left
[00:55] *** ccntrq joined
[00:56] *** radiopc214 joined
[00:57] *** pharv left
[00:58] *** APic joined
[00:59] <radiopc214> Is there a maximum time for promises? I'm trying to use a promise that is 3 hours long, but it seems to max out at 2 hours

[01:02] *** Zoffix joined
[01:02] *** Zoffix left
[01:06] *** Zoffix joined
[01:07] <Zoffix> radiopc214: nope. Over here I use a month-long Promise: https://github.com/zoffixznet/perl6-buggable/blob/master/lib/Buggable/Plugin/Win.pm6#L63

[01:08] <Zoffix> radiopc214: how do you determine that it maxes out at 2hr?

[01:09] *** mcmillhj joined
[01:12] <radiopc214> I'm using it to record audio and the amount of time I choose to record in minutes can be anything like 170min (which is what I'm trying to do) but whenever the recording process actually begins, it defaults to saying 120min only

[01:12] <radiopc214> Even 121min goes down to 120min

[01:13] *** espadrine_ left
[01:13] <Zoffix> Hard to say why it'd do that without seeing the code.

[01:14] *** mcmillhj left
[01:14] *** pierre_ left
[01:15] *** FROGGS_ joined
[01:16] *** radiopc214_ joined
[01:17] *** radiopc214 left
[01:18] *** pierre_ joined
[01:19] *** FROGGS left
[01:21] <Geth> ¬¶ ecosystem: 3458179560 | (Fernando Correa de Oliveira)++ (committed using GitHub Web editor) | META.list

[01:21] <Geth> ¬¶ ecosystem: Add SupplyTimeWindow to the ecosystem

[01:21] <Geth> ¬¶ ecosystem: 

[01:21] <Geth> ¬¶ ecosystem: See it at https://github.com/FCO/SupplyTimeWindow

[01:21] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/3458179560

[01:23] *** radiopc214_ left
[01:27] *** Zoffix left
[01:28] *** mcmillhj joined
[01:33] *** mcmillhj left
[01:41] *** mcmillhj joined
[01:45] *** mcmillhj left
[01:45] *** ilbot3 left
[01:51] *** committable6 joined
[01:56] *** ilbot3 joined
[01:56] *** ChanServ sets mode: +v ilbot3

[02:00] *** mcmillhj joined
[02:04] *** mcmillhj left
[02:13] *** pierre_ left
[02:17] *** mcmillhj joined
[02:17] *** lizmat left
[02:18] *** pierre_ joined
[02:22] *** mcmillhj left
[02:23] *** pierre_ left
[02:32] *** mcmillhj joined
[02:36] *** pierre_ joined
[02:37] *** mcmillhj left
[02:41] *** pierre_ left
[02:43] *** mcmillhj joined
[02:48] *** mcmillhj left
[02:51] <Kaiepi> is is repr('CPointer') only meant to be used for stuff internally or is there anything useful you can do with it for nativecall stuff?

[02:55] *** Zoffix joined
[02:56] <Zoffix> Kaiepi: don't know much about NativeCall, but CPointer is mentioned in the docs, maybe they explain what it's for: https://docs.perl6.org/language/nativecall#Basic_use_of_Pointers

[02:57] *** mcmillhj joined
[02:57] <Kaiepi> oh, i didn't notice the example for it there

[02:58] *** pierre_ joined
[03:01] *** mcmillhj left
[03:04] *** adu joined
[03:23] <Kaiepi> sweet, is repr('CPointer') is going to simplify writing Editline's bindings a fuckton https://hastebin.com/ifizipazar.pl

[03:24] <Zoffix> \o/

[03:25] *** eliasr left
[03:27] *** mcmillhj joined
[03:32] *** mcmillhj left
[03:45] *** skids left
[03:47] *** adu left
[03:47] *** Herby_ left
[03:48] *** dj_goku joined
[03:49] <AlexDaniel> squashable6: next

[03:49] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in 1 day and ‚âà6 hours (2018-04-07 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[03:52] *** Guest18_ left
[03:54] *** adu joined
[03:54] *** Guest18 joined
[04:01] * Zoffix really wishes for .parent attribute on QAST::Node -_-

[04:01] *** mcmillhj joined
[04:01] <Zoffix> Or at least a .replace method

[04:03] *** wamba joined
[04:04] *** Guest18 left
[04:05] *** mcmillhj left
[04:13] <Kaiepi> next squashable looks like something i'll be able to participate in

[04:13] <Kaiepi> i'm not so great at writing documentation, but tests i can write fairly well since i like to try to break stuff

[04:14] <AlexDaniel> \o/

[04:14] <AlexDaniel> sounds great

[04:15] *** mcmillhj joined
[04:20] *** mcmillhj left
[04:21] *** Zoffix left
[04:28] *** pierre_ left
[04:30] *** AlexDaniel left
[04:33] *** mcmillhj joined
[04:33] *** Guest18 joined
[04:35] *** pierre_ joined
[04:37] *** mcmillhj left
[04:37] <Kaiepi> took a little while to figure out, but i worked out a way to deal with struct pointers without explicitly needing to use .deref with it constantly https://hastebin.com/owokoniqed.rb

[04:40] *** pierre_ left
[04:41] *** kurahaupo_ joined
[04:43] *** kurahaupo left
[04:43] *** mcmillhj joined
[04:48] *** mcmillhj left
[04:53] *** pierre_ joined
[04:54] *** kurahaupo_ left
[04:57] *** pierre_ left
[05:00] *** sena_kun joined
[05:03] *** mcmillhj joined
[05:08] *** mcmillhj left
[05:12] *** wamba left
[05:15] *** Sgeo__ left
[05:16] *** domidumont joined
[05:22] *** domidumont left
[05:23] *** domidumont joined
[05:27] *** pharv joined
[05:32] *** pharv left
[05:36] *** mcmillhj joined
[05:37] *** pierre_ joined
[05:41] *** mcmillhj left
[05:53] *** mcmillhj joined
[05:55] *** wamba joined
[05:56] *** pierre_ left
[05:57] *** darutoko joined
[05:58] *** pierre_ joined
[05:58] *** Guest18 left
[05:59] *** pierre_ left
[05:59] *** mcmillhj left
[06:04] *** pierre__ joined
[06:04] *** lizmat joined
[06:09] *** pierre__ left
[06:13] *** mcmillhj joined
[06:14] *** pierre_ joined
[06:18] *** mcmillhj left
[06:19] *** pierre_ left
[06:23] *** mcmillhj joined
[06:26] *** domidumont left
[06:29] *** mcmillhj left
[06:32] *** pierre__ joined
[06:34] *** mcmillhj joined
[06:37] *** Sgeo joined
[06:37] *** pierre__ left
[06:39] *** mcmillhj left
[06:43] *** robertle joined
[06:45] *** ufobat joined
[06:49] *** domidumont joined
[06:50] *** pierre joined
[06:50] *** mcmillhj joined
[06:52] <stmuk> .

[06:53] <stmuk> El_Che: fine! My jokes seemed to down well I just need to port a version to perl 6 now :)

[06:54] *** sena_kun left
[06:55] *** mcmillhj left
[06:55] *** pierre left
[07:01] *** mcmillhj joined
[07:05] *** mcmillhj left
[07:07] *** ufobat left
[07:09] *** pierre joined
[07:14] *** pierre left
[07:15] *** mcmillhj joined
[07:17] *** zakharyas joined
[07:19] *** pierre joined
[07:20] *** mcmillhj left
[07:23] *** adu left
[07:24] *** pierre left
[07:27] *** mcmillhj joined
[07:28] *** pierre joined
[07:28] *** pharv joined
[07:28] *** lizmat left
[07:31] *** sjn_ is now known as sjn

[07:32] *** mcmillhj left
[07:32] *** pharv left
[07:36] *** kurahaupo joined
[07:42] *** dakkar joined
[07:43] *** mcmillhj joined
[07:47] *** mcmillhj left
[07:48] *** lizmat joined
[07:52] *** araraloren joined
[07:52] <araraloren> Hi

[07:53] <araraloren> Is there a way ignore decode error ?

[07:54] <moritz> there's the utf8-c8 encoding that can handle invalid UTF-8

[07:54] *** mcmillhj joined
[07:54] <araraloren> oh, i will try

[07:59] *** mcmillhj left
[08:03] *** athenot left
[08:05] *** mcmillhj joined
[08:07] *** TimToady_ is now known as TimToady

[08:18] *** ilogger2 joined
[08:18] *** ChanServ sets mode: +v ilogger2

[08:21] *** camelia joined
[08:24] *** mirlur[m] joined
[08:24] *** mcmillhj joined
[08:26] *** mspo joined
[08:27] *** b2gills left
[08:27] *** camelia left
[08:27] *** notable6 left
[08:28] *** notable6 joined
[08:28] *** ChanServ sets mode: +v notable6

[08:28] *** b2gills joined
[08:28] *** syntaxman joined
[08:28] *** sergot joined
[08:29] *** camelia joined
[08:29] *** mcmillhj left
[08:30] *** ChanServ sets mode: +v camelia

[08:32] *** kurahaupo joined
[08:35] *** tadzik joined
[08:35] *** integral joined
[08:35] *** integral left
[08:35] *** integral joined
[08:36] *** Matthew[m] joined
[08:36] *** unclechu joined
[08:43] *** mcmillhj joined
[08:47] *** wamba joined
[08:47] *** mcmillhj left
[09:00] *** mcmillhj joined
[09:04] *** mcmillhj left
[09:05] *** zakharyas joined
[09:10] *** lizmat joined
[09:17] *** mcmillhj joined
[09:22] *** lizmat left
[09:22] *** mcmillhj left
[09:29] *** lizmat joined
[09:29] *** mcmillhj joined
[09:29] *** pharv joined
[09:32] *** AlexDaniel joined
[09:32] *** lizmat left
[09:33] *** lizmat joined
[09:33] *** pharv left
[09:33] *** mcmillhj left
[09:44] *** mcmillhj joined
[09:45] *** lalitmee joined
[09:49] *** mcmillhj left
[09:50] *** ufobat joined
[09:55] *** rindolf joined
[09:58] *** mcmillhj joined
[10:03] *** mcmillhj left
[10:12] *** margeas joined
[10:14] *** mcmillhj joined
[10:14] *** yoleaux joined
[10:14] *** ChanServ sets mode: +v yoleaux

[10:15] *** lizmat left
[10:18] *** mcmillhj left
[10:22] *** pierre joined
[10:27] *** lizmat joined
[10:32] *** mcmillhj joined
[10:35] *** araraloren_ joined
[10:37] *** mcmillhj left
[10:37] *** wamba left
[10:44] <buggable> New CPAN upload: XML-XPath-0.9.1.tar.gz by UFOBAT https://cpan.metacpan.org/authors/id/U/UF/UFOBAT/Perl6/XML-XPath-0.9.1.tar.gz

[10:49] *** mcmillhj joined
[10:53] *** eliasr joined
[10:57] *** mcmillhj left
[10:57] *** ufobat left
[10:57] *** wamba joined
[11:01] *** zakharyas left
[11:04] *** zakharyas joined
[11:07] *** lizmat left
[11:11] *** tt joined
[11:14] *** pmurias joined
[11:15] <pmurias> .tell Zoffix 8.737675311215749e+198, div_In on the js backends does the work on bignums rather then by dividing doubles

[11:15] <yoleaux> 4 Apr 2018 17:39Z <Zoffix> pmurias: what does `say 8.737675311215749e+198` print on the JS backend? I can't get MoarVM's nqp::div_In to avoid drift and I'm coming to the conclusion that current approach of converting to doubles first ain't gonna cut it and we need to divide using big decimals. That's how JVM does it and it gives right answers.

[11:15] <yoleaux> pmurias: I'll pass your message to Zoffix.

[11:25] *** pierre left
[11:25] *** pierre joined
[11:30] *** pharv joined
[11:30] *** pierre left
[11:35] *** pharv left
[11:38] *** kybr left
[11:40] *** sena_kun joined
[11:48] *** wamba left
[11:49] *** ufobat joined
[11:52] *** zakharyas left
[12:02] *** ufobat left
[12:13] <damnlie> heyo if you are interested to come to NLPW this year please register on a website: www.perlworkshop.nl

[12:14] *** lizmat joined
[12:15] *** margeas left
[12:15] *** margeas joined
[12:15] *** wamba joined
[12:17] *** wamba left
[12:25] *** mcmillhj joined
[12:32] *** kybr joined
[12:36] *** Kaiepi joined
[12:47] *** ufobat joined
[12:49] *** Guest18 joined
[12:51] *** daxim joined
[12:52] *** rindolf left
[12:53] *** Guest18 left
[12:59] *** athenot joined
[13:02] *** pierre__ joined
[13:06] *** wamba joined
[13:10] *** zakharyas joined
[13:15] *** rindolf joined
[13:15] *** vcv joined
[13:27] *** vcv left
[13:28] *** vcv joined
[13:30] *** Kaiepi left
[13:33] *** lizmat left
[13:33] *** Kaiepi joined
[13:39] *** mcmillhj left
[13:46] *** khw joined
[13:55] *** skids joined
[13:58] *** athenot left
[14:02] *** lalitmee left
[14:02] *** lalitmee joined
[14:03] *** zakharyas left
[14:04] *** zakharyas joined
[14:05] *** mcmillhj joined
[14:06] *** zakharyas left
[14:09] *** vcv left
[14:10] *** mcmillhj left
[14:10] *** ufobat left
[14:10] *** lizmat joined
[14:12] *** lizmat left
[14:13] *** kybr left
[14:14] *** mcmillhj joined
[14:16] *** zakharyas joined
[14:17] *** lizmat joined
[14:22] *** vcv joined
[14:23] *** Bowlslaw joined
[14:25] *** athenot_ joined
[14:28] *** athenot_ left
[14:30] *** athenot_ joined
[14:46] *** pierre__ left
[14:51] *** athenot_ left
[14:54] *** ufobat joined
[14:58] *** lizmat left
[15:03] *** lizmat joined
[15:04] *** sena_kun left
[15:05] *** zakharyas left
[15:05] *** lalitmee left
[15:09] *** athenot joined
[15:09] *** lizmat left
[15:13] *** pierrot_ is now known as pierrot

[15:13] *** pierrot left
[15:13] *** pierrot joined
[15:14] *** lizmat joined
[15:17] *** lizmat left
[15:24] *** lizmat joined
[15:24] *** ufobat left
[15:30] *** mcmillhj left
[15:31] *** wamba left
[15:36] <AlexDaniel> squashable6: next

[15:36] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in ‚âà18 hours (2018-04-07 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:39] *** Zoffix joined
[15:39] *** zakharyas joined
[15:42] <Zoffix> nqp: my $o := QAST::Op.new: my $kid := QAST::SVal.new: :value<foo>; for @($o) { say($_.HOW.name: $_) }

[15:42] <camelia> nqp-moarvm: OUTPUT: ¬´QAST::SVal‚ê§¬ª

[15:42] <Zoffix> Is there some hackish magic to get access to $o if all you got is $kid?

[15:43] <Zoffix> Don't want to add the overhead of stuffing parents into kids for all the nodes and also there're these cases where one thing has more than one parent:

[15:44] <Zoffix> nqp: my $kid := QAST::SVal.new: :value<foo>; my $o := QAST::Op.new: $kid, QAST::Stmts.new: $kid; for @($o) { say($_.HOW.name: $_) }

[15:44] <camelia> nqp-moarvm: OUTPUT: ¬´QAST::SVal‚ê§QAST::Stmts‚ê§¬ª

[15:44] <tony-o> mst: i'm not sure about how dbix is written but it seems to me that the decoupling of data and querying can be done by extracting the sql generating bits from the ORM calls

[15:44] <tony-o> not sure if that would be a headache in dbix ^

[15:45] *** Kaiepi left
[15:45] *** Kaiepi joined
[15:45] <mst> tony-o: (1) there's no such thing as dbix (2) actually, no, that isn't nearly enough, we've already got that.

[15:46] <mst> what you need is an object layer atop a relational layer atop an SQL generating layer

[15:46] <mst> "column names and relationships" live in the middle layer

[15:47] *** kybr joined
[15:56] *** mcmillhj joined
[15:58] <jnthn> tony-o: I'm not really a good person to review/comment on ORM things (I see mst is doing that, so yay :)), but glad to see progress on it. :-) I do notice that :model<Customer> means we're doing things with strings where maybe types would be nicer, but I guess circularities make for some fun there

[15:58] *** radiopc214 joined
[16:00] <timotimo> jnthn: i hope it was okay to say edument sponsored the remote debugger work; i thought you might want to have that mentioned, but i forgot to ask :S

[16:00] <jnthn> timotimo: Yeah, it's fine to say that. I mean, it's public knowledge. :-)

[16:01] <timotimo> true

[16:01] <timotimo> i started the talk on modules.perl6.org and ended it on screenshots from the commaide website :)

[16:01] <jnthn> :)

[16:01] <timotimo> before the talk i thought i should point out that you can use the debugger remote library to attach a program to itself :D

[16:01] <jnthn> Live demos? :)

[16:01] <timotimo> yup

[16:01] <jnthn> lol

[16:01] <jnthn> That's beautiful

[16:01] *** mcmillhj left
[16:02] <jnthn> Did you actually use the debugger to debug itself while developing it? :D

[16:02] <timotimo> not yet

[16:02] <Bowlslaw> lol

[16:03] <timotimo> i'll probably use a second instance of the debugger shell to debug the first one, though

[16:03] <timotimo> it'd be very easy to accidentally "suspend" without args and deadlock the thing

[16:03] <tony-o> jnthn: it also accepts types at the moment, i use a string because it means i don't need to 'use <whatever>' first

[16:03] <jnthn> ooh, yes

[16:13] *** mcmillhj joined
[16:15] *** lizmat left
[16:15] <tony-o> mst what do you mean there is not such thing as dbix?

[16:16] <mst> tony-o: DBIx is the namespace on CPAN for DBI extensions, of which there are hundreds (at least)

[16:17] *** mcmillhj left
[16:18] <tony-o> that's what i thought, just wanted to be sure

[16:19] *** rouking joined
[16:20] *** AlexDaniel left
[16:20] <rouking> Do you folks know of anyone actively working on Qt5 bindings for p6? I'd write them myself if Qt was in C, but it's C++ and I'd rather not dive into that

[16:21] <rouking> I found a repo on github, but it seems empty

[16:23] *** mcmillhj joined
[16:30] <radiopc214> Is there any reason my code won't begin promises longer than 2 hours? My code's at https://pastebin.com/2BMiKCh0 with the important pieces between 227-232 and the promise actually being made between 286-297

[16:30] <radiopc214> I've been boggling my mind for days without any luck

[16:32] *** dogbert17 joined
[16:39] <Zoffix> radiopc214: I see one error on line 104. You're awaiting Proc::Async object rather than the Promise returned from the .start method.

[16:39] <Zoffix> e: my $p := Proc::Async.new: "cal"; $p.start; await $p

[16:39] <evalable6> Zoffix, rakudo-moar 7faf431fa: OUTPUT: ¬´(exit code 1)      April 2018       ‚ê§Su Mo Tu We Th Fr Sa  ‚ê§ 1  2  3  4 _‚êà _‚êà5  6  7  ‚ê§ 8 ‚Ä¶¬ª

[16:39] <evalable6> Zoffix, Full output: https://gist.github.com/141abb57f939ca1ddf15781236e5c7a3

[16:41] <radiopc214> Duly noted, Zoffix!

[16:41] *** Ven joined
[16:41] <Ven> o/

[16:41] <yoleaux> 20 Dec 2017 02:53Z <Zoffix> Ven: your post was still listed as a draft, 3hr past midnight. Based on https://irclog.perlgeek.de/perl6/2017-12-19#i_15600534 I assumed that was a mistake and published the post. I hope it was ready üòì

[16:41] <Ven> oh, yeah...

[16:41] *** Ven is now known as Ven``

[16:41] <Ven``> I forget.

[16:44] <Zoffix> Also, `my $is-failed = $journal.out.slurp.contains('Driver is not running'); $journal.out.close; return !$is-failed;` can be written as `not $journal.out.slurp(:close).contains: 'Driver is not running'`

[16:45] <Zoffix> .slurp/.lines take :close param that close the handle for you when the content is consumed

[16:46] *** athenot left
[16:46] *** robertle joined
[16:46] *** athenot joined
[16:47] <Zoffix> same as with a bunch of other methods; you can just call the method on the object returned from `run`; no need for any variables https://gist.github.com/zoffixznet/5cdde8fdd3d06c3c9cdaee3b210cb567

[16:48] <Zoffix> radiopc214: so what's the problem again? You say it won't *start* promises longer than 2 hours? Is there some error message?

[16:48] *** pharv joined
[16:48] *** zakharyas left
[16:49] *** bibi joined
[16:49] *** bibi left
[16:49] <radiopc214> Zoffix: It starts the promise, but the maximum time is always 2 hours. There are some cases where I want it to be 3 hours or even 2 hours and 1 minute, but it always does only 2 hours

[16:54] <Zoffix> radiopc214: and what sort of messages do you get in SysLog? I see there's code for killing stuff after a certain time...

[16:57] *** pierre joined
[17:02] <Zoffix> radiopc214: also, is $time accurately decoded? Reading the spec ( http://opensoundcontrol.org/node/3/#timetags ) it says time tags are absolute seconds since Jan 1, 1900, stored in 64-bit int, with seconds in the first 32bits, yet the way that variable is used is as if the $time was a relative time.

[17:02] *** araraloren_ left
[17:02] *** pierre left
[17:03] <Zoffix> I guess there's no way for me to somehow run that code locally and reproduce the problem?

[17:03] <Zoffix> (and would I have to wait 2hr before seeing whether fix worked?)

[17:04] *** espadrine_ joined
[17:08] <radiopc214> Zoffix: The code is unfortunately reliant on several services I use, making it hard to run it locally on other devices

[17:08] <Zoffix> figured

[17:09] <radiopc214> Zoffix: As well, the error reported doesn't happen after two hours, but at the beginning. I just did some more testing, and the service accepts up to 126 minutes for the recording time

[17:10] *** Ven`` left
[17:10] <Zoffix> radiopc214: what does the error say?

[17:11] <radiopc214> I'm putting together a pastebin that shows the error

[17:15] <radiopc214> Zoffix: The error is at https://pastebin.com/QZJRVKSd

[17:19] <Zoffix> radiopc214: that error says your `my Str $path = @message.shift;` on line 169/170 is getting an `Any` not a `Str`

[17:22] *** domidumont joined
[17:23] <radiopc214> Zoffix: Yes and with recordings under 126 minutes $path seems to be getting a Str and not just a spew of what I assume is nonsense

[17:24] <radiopc214> I suppose perhaps $time is being misinterpreted and results in an overflow of data, causing subsequent data to become corrupted

[17:24] <Zoffix> There's also a warning "Character(s) in 'N' format wrapped in unpack"

[17:24] <Zoffix> Yeah, probably.

[17:25] <Zoffix> m: say now - Date.new('1900-01-01').DateTime.Instant

[17:25] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´3731937981.792310‚ê§¬ª

[17:26] <Zoffix> m: say 3731937981.log: 2

[17:26] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´31.79727786502931‚ê§¬ª

[17:27] *** wamba joined
[17:27] <Zoffix> "The first 32 bits specify the number of seconds since midnight on January 1, 1900" ... but... that's almost full :/

[17:28] <Zoffix> m: say (Date.new('1900-01-01').DateTime.Instant + 2¬≥¬≤).DateTime

[17:28] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´2036-02-07T06:27:49Z‚ê§¬ª

[17:28] <Zoffix> oh, nm

[17:29] *** zakharyas joined
[17:29] <Zoffix> radiopc214: are you able to dump two $datagram s? One working and one that contains the problem?

[17:31] <Kaiepi> ? https://hastebin.com/eruricawun.pas

[17:31] <Kaiepi> shouldn't Editline be able to be constructed when the module's required after Editline::Tokenizer?

[17:32] <Zoffix> Kaiepi: and it works fine in normal script not in repl, does it?

[17:33] <Kaiepi> lemme check

[17:34] <Kaiepi> yeah, it works in scripts

[17:34] <Zoffix> yeah, a bunch of compile-time things don't work in REPL (yet) like RT#131900

[17:35] <synopsebot> RT#131900 [open]: https://rt.perl.org/Ticket/Display.html?id=131900 [REPL] REPL loses custom operators

[17:38] <Zoffix> Filed as R#1690

[17:38] <synopsebot> R#1690 [open]: https://github.com/rakudo/rakudo/issues/1690 [REPL] REPL messes up namespaces when Foo is `use`d after Foo::Bar

[17:47] *** Sgeo joined
[17:51] <radiopc214> Zoffix: The $datagram dump (for both successful and unsuccessful) is at https://pastebin.com/t1Uf6z1B

[17:51] <radiopc214> It seems like the data doesn't get passed at all during an unsuccessful run

[18:05] <Zoffix> yeah, not really sure what determines when IO::Socket::Async.Supply decides to emit data...

[18:05] *** Kaiepi left
[18:06] <radiopc214> Zoffix: Entirely fair. I'll log off and see if I can find some more info. Thanks for all the help!

[18:07] <Zoffix> No problem.

[18:07] *** radiopc214 left
[18:08] <Bowlslaw> is there a way to view this in vim? like a 'man' command or something?: https://github.com/Tux/CSV/blob/master/lib/Text/CSV.pod6

[18:08] *** Kaiepi joined
[18:08] *** pierre_ joined
[18:09] <El_Che> Bowlslaw: first google link (not tried it myself): https://github.com/c9s/pod-reader.vim

[18:09] *** vcv left
[18:10] <Zoffix> that looks to be for Perl 5's pod

[18:11] <Bowlslaw> yeah i have the perl 5 one

[18:11] <[Coke]> perl6 --doc ../path/to/pod.6

[18:12] <[Coke]> should perl6 --doc ignore the =for elvis directive at the end?

[18:12] <[Coke]> (it's rendering it today)

[18:13] <[Coke]> ... is that really all pod6 in that file?

[18:13] *** pierre_ left
[18:13] <Zoffix> p6doc doesn't show docs of modules, does it?

[18:14] <[Coke]> (I see a lot of =over, e.g.)

[18:15] <Zoffix> $ p6doc Text::CSV                                                                                                                                                                                              

[18:16] <Zoffix> No Pod found in /home/zoffix/rakudo/install/share/perl6/site/sources/5D1F6B1BE93CAF75E747AF0222CA78BCD8A5CD40

[18:16] <Zoffix> mkay

[18:16] <Zoffix> Looks like it does, but not if pod is ina separate file

[18:16] <[Coke]> bin/p6doc DOM::Tiny works here.

[18:16] *** Kaiepi left
[18:16] <Bowlslaw> :O

[18:18] *** Zoffix left
[18:18] *** Kaiepi joined
[18:19] *** vcv joined
[18:22] *** Kaiepi left
[18:22] *** Kaiepi joined
[18:43] *** zakharyas left
[18:49] *** Kaiepi left
[18:50] *** Kaiepi joined
[18:59] *** MilkmanDan joined
[19:03] *** domidumont left
[19:05] *** Aceeri_ joined
[19:16] *** pierre_ joined
[19:21] *** pierre_ left
[19:39] *** mwhisenhunt joined
[19:41] *** captain-adequate joined
[19:42] *** captain-adequate left
[19:43] *** captain-adequate joined
[19:54] *** zakharyas joined
[19:59] *** rjbs joined
[20:02] *** Kaiepi left
[20:03] *** Kaiepi joined
[20:05] *** Kaiepi left
[20:06] *** Kaiepi joined
[20:16] *** mcmillhj left
[20:19] <Bowlslaw> for¬†%vowels.sort(*.key)>>.kv¬†->¬†($vowel,¬†$index)¬†{ ... }

[20:19] <Bowlslaw> that is some crazy syntax >_>

[20:20] <Bowlslaw> i guess it's no less strange that perl 5's hash sorting

[20:21] <El_Che> you mean the >> ?

[20:23] <Bowlslaw> i know that operator; it applies whatever is before it to everything, right?

[20:23] *** zakharyas left
[20:25] *** epony joined
[20:27] *** mcmillhj joined
[20:29] *** pierre_ joined
[20:30] *** lizmat joined
[20:32] *** mcmillhj left
[20:34] *** pierre_ left
[20:40] *** mcmillhj joined
[20:46] *** mcmillhj left
[20:46] *** vcv left
[20:49] <FROGGS_> Bowlslaw: $my-array.foo() calls a method foo on the array object, $my-array>>.foo() calls method foo on every element of the array

[20:50] <FROGGS_> so, it like a map or a loop or 'each' in other languages

[20:51] *** mcmillhj joined
[20:51] <Bowlslaw> yes

[20:53] <FROGGS_> I prefer >>.foo (or even ¬ª.foo) over .map(...) because you've got one parentheses less to remember to close

[20:53] <FROGGS_> which is handy not only in one liners

[20:55] <El_Che> nice

[20:55] <Bowlslaw> i like fancy operators symbols too ;_;

[20:55] <FROGGS_> hehe

[20:56] <Bowlslaw> why ¬ª. ??

[20:56] <Bowlslaw> what the...

[20:56] <Bowlslaw> 2fancy4me

[20:56] <FROGGS_> well, it is there in your character map... unused... probably lonely and sad :D

[20:56] <Bowlslaw> indeed, it is sad, and lonely, and unused

[20:57] <Bowlslaw> just looks so weird in code

[20:57] <Bowlslaw> the unicode support in perl 6 is really cool, but just...strange for me to use haha

[20:57] <FROGGS_> that's what I think when looking at xml

[20:57] <Bowlslaw> yay xml configuration files

[20:57] <Bowlslaw> they make me so happy 

[20:58] <FROGGS_> you've got the choice... you dont have to use ¬ª

[20:58] <FROGGS_> hehe, yeah

[20:58] *** mcmillhj left
[20:58] <El_Che> Bowlslaw: you just need a new keyboard, like this one https://media0.giphy.com/media/l2Jeja1WW50EQJVQI/giphy.gif

[20:58] <Bowlslaw> I do like JSON tho

[20:58] <FROGGS_> json is awesome

[20:58] <Bowlslaw> El_Che: LOL

[20:59] <FROGGS_> but I wonder when json5 actually arrives...

[20:59] <Bowlslaw> do we really need anything new in JSON ?

[20:59] *** mcmillhj joined
[20:59] <FROGGS_> comments?

[20:59] <FROGGS_> trailing commans

[20:59] <FROGGS_> I just need these two

[21:00] <Bowlslaw> hmmm

[21:00] <El_Che> FROGGS_: you're describing yaml

[21:00] *** wamba left
[21:00] *** tt left
[21:01] <FROGGS_> nah, yaml is a bit overkill to me

[21:01] <Bowlslaw> euughhh yaml...

[21:01] <FROGGS_> it is too much dwim, so I sometimes do not know what I'll get

[21:01] <Bowlslaw> whitespace...

[21:01] <El_Che> I seem to do all my configs in yaml

[21:02] <El_Che> whenever I have to do json or xml configs I feel unloved

[21:02] <FROGGS_> and that's the first step: being not sure what to get, then loosing trust, then avoiding it

[21:03] <FROGGS_> I enjoy json pretty much

[21:03] <Bowlslaw> json is bestson

[21:03] <FROGGS_> :D

[21:03] *** skids left
[21:03] <FROGGS_> that actually fits to Homer J. Simpson...

[21:04] <FROGGS_> (because of the one episode where he finds out what his middle name is)

[21:04] *** b2gills left
[21:04] <Bowlslaw> hahahha

[21:05] <FROGGS_> probably the most funny moment in entire movie history :P

[21:08] *** rindolf left
[21:10] *** Zoffix joined
[21:12] <Zoffix> Bowlslaw: but note that ¬ª. is *not* the same as .map. It's a compiler hint that it can autothread and it also cares about nodality of the method you're calling. 

[21:12] <Zoffix> m: dd (<a b c>, (42, (50, 100)))¬ª.uc

[21:12] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´($("A", "B", "C"), $("42", $("50", "100")))‚ê§¬ª

[21:12] <Zoffix> m: dd (<a b c>, (42, (50, 100))).map: *.uc

[21:12] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´("A B C", "42 50 100").Seq‚ê§¬ª

[21:14] <Bowlslaw> hmmm

[21:14] *** mcmillhj left
[21:15] <Bowlslaw> cool

[21:16] <Zoffix> You can also just unpack the pairs, without going into kv

[21:16] <Zoffix> m: my %vowels = "the cat is a dog".comb.Bag; for %vowels.sort(*.key)>>.kv -> ($vowel, $index) { dd [$vowel, $index] }

[21:16] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´[" ", 4]‚ê§["a", 2]‚ê§["c", 1]‚ê§["d", 1]‚ê§["e", 1]‚ê§["g", 1]‚ê§["h", 1]‚ê§["i", 1]‚ê§["o", 1]‚ê§["s", 1]‚ê§["t", 2]‚ê§¬ª

[21:16] <Zoffix> m: my %vowels = "the cat is a dog".comb.Bag; for %vowels.sort: *.key -> (:key($vowel), :value($index)) { dd [$vowel, $index] }

[21:16] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´[" ", 4]‚ê§["a", 2]‚ê§["c", 1]‚ê§["d", 1]‚ê§["e", 1]‚ê§["g", 1]‚ê§["h", 1]‚ê§["i", 1]‚ê§["o", 1]‚ê§["s", 1]‚ê§["t", 2]‚ê§¬ª

[21:17] <Zoffix> m: my %vowels = "the cat is a dog".comb.Bag; for %vowels.sort: *.key { dd [$:key, $:value] }

[21:17] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´Too many positionals passed; expected 0 arguments but got 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:17] <Zoffix> ah, right. 

[21:17] <Zoffix> m: my %vowels = "the cat is a dog".comb.Bag; for %vowels.sort: *.key { {dd [$:key, $:value]}(|$_) }

[21:17] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´Required named parameter 'key' not passed‚ê§  in block  at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:18] <Zoffix> m: my %vowels = "the cat is a dog".comb.Bag; for %vowels.sort: *.key { {dd [$:key, $:value]}(|.Capture) }

[21:18] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´[" ", 4]‚ê§["a", 2]‚ê§["c", 1]‚ê§["d", 1]‚ê§["e", 1]‚ê§["g", 1]‚ê§["h", 1]‚ê§["i", 1]‚ê§["o", 1]‚ê§["s", 1]‚ê§["t", 2]‚ê§¬ª

[21:18] <Zoffix> m: my %vowels = "the cat is a dog".comb.Bag; for %vowels.sort: *.key { {dd [.key, .value] }

[21:18] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3owels.sort: *.key { {dd [.key, .value] }7‚èè5<EOL>‚ê§    expecting any of:‚ê§        postfix‚ê§        statement end‚ê§¬ª

[21:18] <Zoffix> m: my %vowels = "the cat is a dog".comb.Bag; for %vowels.sort: *.key { dd [.key, .value] }

[21:18] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´[" ", 4]‚ê§["a", 2]‚ê§["c", 1]‚ê§["d", 1]‚ê§["e", 1]‚ê§["g", 1]‚ê§["h", 1]‚ê§["i", 1]‚ê§["o", 1]‚ê§["s", 1]‚ê§["t", 2]‚ê§¬ª

[21:19] <Bowlslaw> i think the first way is clearer

[21:19] <Bowlslaw> what is sort(*.key) ?

[21:19] <Bowlslaw> sort accepts arguments?

[21:19] <Zoffix> Yeah, tells it how to sort.

[21:19] *** b2gills joined
[21:20] <Zoffix> And *.key is a lambda that takes 1 arg (each of the things being sorted) and calls method .key on it

[21:20] <Bowlslaw> ahhh a lambda

[21:20] <Bowlslaw> cool

[21:20] <Zoffix> m: say (* * * * * * *)(2, 3, 4, 5)

[21:20] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´120‚ê§¬ª

[21:20] <Bowlslaw> why do many stars?

[21:20] <Zoffix> m: say (* √ó * √ó * √ó *)(2, 3, 4, 5) # same thing with other symbol for multiplication ops

[21:20] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´120‚ê§¬ª

[21:21] <Zoffix> Same thing: a lambda, but this one takes 4 args. 

[21:21] <Zoffix> Each star (that's a term) is a placeholder for the arg. And in the first example it knows which one is a placeholder and which one is multiplication because almost everywhere Perl 6 expects a term to be followed by an operator to be followed by a term

[21:22] <Zoffix> that lamda's called WhateverCode and those stars are called Whatever

[21:22] <tobs> m: say (* * * ** *)(2,3,4)

[21:22] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´162‚ê§¬ª

[21:22] <tobs> why is it so smart ( ‚Ä¢·∑Ñ‚åì‚Ä¢·∑Ö ) 

[21:23] <Zoffix> There's also hyperwhatever that's like a normal whatever code mapped over a list

[21:23] <Zoffix> m: say (**¬≤)(^10)

[21:23] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´(0 1 4 9 16 25 36 49 64 81)‚ê§¬ª

[21:24] <Bowlslaw> LOL

[21:24] <Zoffix> tobs: cause it expects a term to be followed by an operator: so you get 1st* = term; 2nd* = op (multiplication); 3rd* = term; now it expects an op, and ** is it, and then it expects a term, so 4th* is the Whatever representing the last arg

[21:25] <b2gills> You don't need to use `*.key` in `.sort`, it will sort by key and then value by default

[21:25] <Zoffix> neat

[21:25] *** mcmillhj joined
[21:27] <Bowlslaw> ah cool, wonder why they have that in the example

[21:27] <Zoffix> Who?

[21:28] <Bowlslaw> https://docs.perl6.org/type/Hash#Looping_over_hash_keys_and_values

[21:29] <Zoffix> Guess the author of that part of the docs didn't know of the default sort

[21:29] <Zoffix> It's not even documented that that's its behaviour

[21:29] <Bowlslaw> I think it's better to be explicity when first learning, but the default sort is pretty common-sense

[21:30] <Zoffix> s: %(), 'sort', \()

[21:30] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/7faf431fa/src/core/Map.pm6#L79

[21:30] <Zoffix> b2gills: are you sure it sorts by value too? Glancing at that code, looks like only the key

[21:30] *** mcmillhj left
[21:31] <El_Che> Bowlslaw: can you create a ticket with the remark? JJMerelo is working on the docs and he appreciates issues like that

[21:31] <Zoffix> Oh, you can't have more than one key that are the same, dugh

[21:31] <Bowlslaw> I changed it in my code and i have the exact same result

[21:32] <Bowlslaw> El_Che: sure, i'd be happy to. Should I mention the default behaviour of sort and how it's not mentioned in the doc...?

[21:32] <Zoffix> m: (:42a, :100a, :10a, :50a, :60a).sort.say

[21:32] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´(a => 10 a => 42 a => 50 a => 60 a => 100)‚ê§¬ª

[21:32] <Zoffix> neat

[21:32] <El_Che> pretty much a copy paste of the conversation will do, I think :)

[21:32] <Bowlslaw> haha ok, where should I do this?

[21:33] <Zoffix> Bowlslaw: https://github.com/perl6/doc/issues

[21:33] <Zoffix> Bowlslaw: we also have IRC log you can just link to: https://irclog.perlgeek.de/perl6/2018-04-05#i_16010857

[21:33] <Zoffix> Look a magic trick!

[21:33] <Zoffix> m: (:42a, :100a, :10a, :50a, :60a).Capture.sort.say

[21:33] <camelia> rakudo-moar 7faf431fa: OUTPUT: ¬´()‚ê§¬ª

[21:33] <Zoffix> I made all those pairs disappear \o./

[21:34] <Zoffix> ZofBot: there's nothing up my sleeves!

[21:34] <ZofBot> Zoffix, 06 cusr 206

[21:35] <Bowlslaw> cool

[21:35] <Bowlslaw> that was my first contribution to an open source project >_>

[21:35] <El_Che> \o/

[21:35] <Zoffix> \o/

[21:36] <Bowlslaw> need...more...

[21:36] <El_Che> Bowlslaw: https://pbs.twimg.com/media/DaDAHRpX4AAX2Ch.jpg:large

[21:36] *** Phil21 joined
[21:37] <Zoffix> Oh

[21:37] <Bowlslaw> LOL

[21:40] <Zoffix> Bowlslaw: need more you say? There are a couple of "good first issue" labels: https://github.com/perl6/doc/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22

[21:40] <Zoffix> Also, we gonna have squashathon in a few hours

[21:40] <Zoffix> squashable6: next

[21:40] <squashable6> Zoffix, ‚ö†üçï Next SQUASHathon in ‚âà12 hours (2018-04-07 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[21:40] <Bowlslaw> cool, thanks

[21:41] *** mcmillhj joined
[21:42] *** rindolf joined
[21:42] <Bowlslaw> what of "TPF Grant" ?

[21:43] <Bowlslaw> "Hash documentation needs to be updated to strongly prefer %( ) method of creating Hash's¬†#1380"

[21:43] <Bowlslaw> I just saw that when reading the Hash docs

[21:43] <Bowlslaw> NOTE:¬†Hashes can also be constructed with¬†{ }. It is recommended to use the¬†%()¬†hash constructor, as braces are reserved for creating¬†Block¬†objects and therefore braces only create Hash objects in specific circumstances.

[21:43] <Bowlslaw> in "Hash Assignment"

[21:44] <geekosaur> if your tpf grant question was about newcomer tasks, those ... aren't

[21:44] <Zoffix> Bowlslaw: TPF = The Perl Foundation. JJMerello is currently doing a grant with them. And I guess these are the issue they marked to be sure to do. You could ping them and ask if it's OK to do those issues or if those are tagged for solely for them to do

[21:44] <geekosaur> those are awaiting funding for someone to put in a lot of work

[21:44] <geekosaur> oh, taken by one, ok

[21:45] *** Aceeri_ left
[21:45] * Zoffix looks sideways at that note.

[21:45] *** pierre_ joined
[21:46] <Zoffix> I rather it encouraged people to learn the rules of when the stuff gets turned into blocks and when into hashes rather than type extra stuff out of paranoia

[21:47] <Bowlslaw> should i close the issue i made?

[21:47] *** mcmillhj left
[21:47] <Zoffix> Bowlslaw: I guess, yeah. I didn't read the Any.sort doc closely enough before claiming it wasn't documented. Sorry :(

[21:48] * Bowlslaw weeps bitterly

[21:48] <El_Che> I get the make it easy for Perl 5 programmers (I am one), but when the "backwards" compatility has negative effects, it's good to discourage it (or remove it). It's not like perl5 code will run out of the box because of the {}

[21:49] <Zoffix> I don't see it as easy for Perl 5 programmers. I see it as easy for me.

[21:49] <Zoffix> It's easier to type {} than to type %()

[21:49] <El_Che> Zoffix: you used to be one :)

[21:49] <Zoffix> It's easier to type :foo{ } than to type :foo(%())

[21:50] *** pierre_ left
[21:50] <Zoffix> Looks better too

[21:50] * Zoffix crawls back into #perl6-dev to fight QAST monsters

[21:50] *** Zoffix left
[21:51] <Bowlslaw> %() 

[21:51] <Bowlslaw> looks like cookie monster

[21:51] <El_Che> haha

[21:51] <timotimo> hey, you know what i haven't had on my laptop for a while?

[21:51] <Bowlslaw> https://www.chimpstickers.com/en/store/sticker-library/cookie-monster/

[21:51] <geekosaur> free disk spacE?

[21:51] <lizmat> a cat ?

[21:52] <timotimo> nope, a bottle of nice still water

[21:52] <timotimo> not to worry, it's a thinkpad, after all

[21:53] *** pharv left
[21:53] <timotimo> oh crap

[21:53] <timotimo> i had thunderbird open while i was wiping the water off my keyboard

[21:56] *** pharv joined
[21:58] *** mcmillhj joined
[21:59] *** Cleverson joined
[22:00] *** rindolf left
[22:01] *** cj joined
[22:01] <cj> TimToady: /join #python

[22:01] <cj> oops.

[22:01] <cj> sorry for the noise.  :-)

[22:01] <Bowlslaw> PYTHON!?

[22:01] * Bowlslaw explodes

[22:02] <timotimo> Bowlslaw: NO LOL

[22:02] <cj> TimToady: I was just talking/thinking about you this morning while talking to my ladyfriend, Andi.

[22:02] <El_Che> TIOWTDI

[22:02] <cj> El_Che: from #python

[22:02] <cj> 14:58 < Yhg1s> BPL: you can use super incorrectly primarily because there was no way to ensure you were using it correctly or not.

[22:03] <cj> 14:58 < _habnabit> which is true of most things in python, which is unfortunate

[22:03] <cj> 14:59 < cj> s/python/programming/ for greater selection

[22:03] <cj> 15:01 < _habnabit> cj, some languages try a lot harder than python

[22:03] <cj> so I guess they're coming around?

[22:04] <cj> I didn't actually intend to tell TimToady to /join #python.  I wanted to make sure I was spelling his name correctly using tab complete, and then I forgot to meta-backspace before my next irssi command

[22:04] <timotimo> that was rather funny, though :D

[22:04] <cj> I have to say it was in fact!

[22:04] <timotimo> Bowlslaw: there is an explanation to "NO LOL", which is that the python channel has (or used to have) "NO ROSETTACODE, NO LOL" in the topic

[22:04] <timotimo> maybe not in all caps

[22:05] <Bowlslaw> lol

[22:05] *** mcmillhj left
[22:06] *** pharv left
[22:07] *** pharv joined
[22:07] <Cleverson> Hi all, the perl6 REPL on Windows doesn't display correctly some accented letters belonging to Brazilian Portuguese, my language. Thus, words like "acentuaÙèøΩxE7ÙèøΩxE3o" causes a "malformed UTF8" error. I assume I should pass the "--encoding" option to perl6, but I can't figure out how to spell the possible modes as in "--encoding=mode". For example, the code page on my Windows command prompt is 850, but perl6 --encoding=850 doesn't work, is

[22:08] <timotimo> Cleverson: sorry, the message was cut off after "doesn't work, is"

[22:10] <Cleverson> isn't valid. Any hint please?

[22:10] <Bowlslaw> That reminds me: does Perl 6 have repl functionality like Haskell? With Haskell, I can load my current file into the repl and use all of my current file's symbols, tab completion, etc

[22:10] <timotimo> Bowlslaw: i'm just wildly guessing here, but perhaps running chcp 65001 in the cmd.exe before running perl6 will help?

[22:11] <timotimo> er, addressed the wrong person, that was for you, Cleverson 

[22:11] <timotimo> anyway, Bowlslaw, it should be enough to "use MyModule" (maybe you have to "use lib '.'" first to have it search your local directory)

[22:12] *** mcmillhj joined
[22:13] <Bowlslaw> xd

[22:13] *** pmurias left
[22:14] <Ulti> Cleverson: that's usually a property of the terminal you are using rather than Perl 6

[22:14] *** Kaiepi left
[22:15] *** Kaiepi joined
[22:15] <timotimo> i'd like to point outt that the REPL is sadly rather unreliable and can have rather interesting bugs

[22:15] <timotimo> so it's usually better to write your programs in an editor that has a "run my code immediately" key binding

[22:16] <Cleverson> timotimo: Hi, chcp 65001 changed the codepage, but now, typing accented letters on the keyboard simply doesn't enter them, i.e. they don't display, neither while typing nor as the say command result.

[22:16] *** pharv left
[22:17] *** pharv joined
[22:17] <timotimo> oh crap :(

[22:17] *** mcmillhj left
[22:18] <timotimo> well, to be fair, having utf8 everywhere on linux is also a new phenomenon. i can remember when i was still a teenager it could be tricky to get it right

[22:18] <Cleverson> timotimo: OK, I can do it, just would like to use the REPL as I'm quite learning the language itself...

[22:18] <El_Che> timotimo: your definition of new is pretty flexible :)

[22:20] <timotimo> El_Che: OK, maybe linux has had it for at least 10 years now, but my irc lives on this OpenBSD system and i'm still not seeing the separating line between nicknames and text in weechat. it's still a column of "?" symbols

[22:20] <timotimo> and the line between read and unread messages is a row of ????????????

[22:21] <El_Che> really? wow

[22:21] <El_Che> irssi has some utf8 settings that must be enabled, maybe it's also the case for weechat?

[22:21] <timotimo> it's surely at least 80% my fault for not knowing anything about it

[22:22] <timotimo> but it's surprising that i'd have to even lift a finger to get utf8

[22:22] <timotimo> the rest of weechat seems to do utf8 just fine, i.e. if someone pastes some wacky unicode characters in chat i can see them

[22:22] <El_Che> my experience with the bsds (long time ago) was lifting a lot of vingers :)

[22:23] <Bowlslaw> https://www.cvedetails.com/vulnerability-list/vendor_id-1229/Irssi.html

[22:24] *** mcmillhj joined
[22:25] <El_Che> Bowlslaw: it's over midnight here. You want to keep me awake all night

[22:28] <Cleverson> Still on my encoding issue, just for information, a compiled plain "hello world" in c, as well as Python 2.7, have the same problem too, but Python 3.6 and Ruby 2.4 don't, so I assume it can definitely be fixed in perl6.

[22:31] <Bowlslaw> lol

[22:33] *** mcmillhj left
[22:39] *** pharv left
[22:40] <Bowlslaw> does anyone have experience with loading a csv file into a sql database?

[22:41] <timotimo> some sql command lines actually let you directly load csv, i think

[22:41] *** skids joined
[22:41] *** pharv joined
[22:41] <Bowlslaw> :O

[22:41] <timotimo> COPY zip_codes FROM '/path/to/csv/ZIP_CODES.txt' WITH (FORMAT csv);

[22:41] <timotimo> that's postgresql

[22:41] <Bowlslaw> waaaaaaaaaat

[22:42] <timotimo> you'd be surprised, SQL is probably at least 100x more powerful than you might have dreamed!

[22:42] <Bowlslaw> so it seems

[22:42] *** TEttinger joined
[22:42] <Bowlslaw> i've only been a professional dev for 4 months now and I learn new stuff about SQL almost every day

[22:43] <timotimo> it's a lovely and magical journey <3

[22:43] *** Cleverson left
[22:44] <Bowlslaw> wow

[22:44] <Bowlslaw> that saves me from a lot of coding

[22:44] <Bowlslaw> and puts the focus on the important part; generating the reports ;)

[22:44] <Bowlslaw> don't you just love abstraction sometimes

[22:45] *** TEttinger left
[22:45] *** TEttinger joined
[22:45] <El_Che> Bowlslaw: you'll call your first born eSQ√®Le if it's a girl

[22:46] <timotimo> i'd say the knowledge of COPY requires at least a drop of blood to be spilled, maybe even part of a finger being sacrificed

[22:46] <Bowlslaw> El_Che: lol...what?

[22:47] <El_Che> you need to pay your dues for sql

[22:47] <El_Che> the knowledge does not come free

[22:48] <timotimo> Bowlslaw: you may think this practice is kind of medieval, but remember that sql was invented in the 6th century before christ

[22:48] *** pharv left
[22:48] *** pharv joined
[22:48] <timotimo> El_Che: it'll be past 1am soon, we should both find some sleep

[22:48] <El_Che> good idea :)

[22:48] * El_Che off

[22:50] <timotimo> Edgar F. Codd: A Relational Model of Data for Large Shared Data Banks. Communications of the ACM, 13(6):377‚Äì387, 1970.

[22:50] <timotimo> ^- not sure if you could say "this is where SQL started", but i think it's fairly close

[22:50] * Bowlslaw begins ritual of somming larry wall

[22:50] * Bowlslaw grips ceremonial dagger and slices palm of hand

[22:50] <timotimo> i saw larry wall today. it was kind of weird; someone picked him up and waved him about

[22:51] <timotimo> https://www.flickr.com/photos/hobbified/668680956 ‚Üê it was actually this larry wall

[22:53] *** robertle left
[23:26] *** Herby_ joined
[23:26] <Herby_> o/

[23:27] *** araraloren_ joined
[23:31] *** mcmillhj joined
[23:33] <rouking> Do you folks know of anyone actively working on Qt5 bindings for p6? I'd write them myself if Qt was in C, but it's C++ and I'd rather not dive into that

[23:33] *** dct joined
[23:36] *** mcmillhj left
[23:37] <MasterDuke> rouking: not aware of anybody. would be very happy to see it happen though

[23:40] *** Bowlslaw left
[23:41] <b2gills> rouking: It might be easier to see if there are C bindings for Qt, and make a Perl 6 binding for that.

[23:43] *** mcmillhj joined
[23:52] *** mcmillhj left
[23:59] *** pierre_ joined
