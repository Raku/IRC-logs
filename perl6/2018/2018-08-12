[00:00] *** lizmat joined
[00:00] *** p6bannerbot sets mode: +v lizmat

[00:09] *** MasterDuke left
[00:09] *** lizmat left
[00:34] *** TriangleSausage joined
[00:34] *** p6bannerbot sets mode: +v TriangleSausage

[00:35] *** SCHAPiE joined
[00:35] *** p6bannerbot sets mode: +v SCHAPiE

[00:36] *** TriangleSausage left
[00:47] *** timotimo left
[00:47] *** Zoffix joined
[00:47] *** p6bannerbot sets mode: +v Zoffix

[00:47] *** Zoffix left
[00:49] *** timo joined
[00:49] *** p6bannerbot sets mode: +v timo

[00:49] *** timo is now known as timotimo

[00:57] <benjikun> howdy timotimo

[00:57] <timotimo> howdy

[01:06] *** x[LGWs4x4i]uG2N0 left
[01:10] *** x[LGWs4x4i]uG2N0 joined
[01:10] *** p6bannerbot sets mode: +v x[LGWs4x4i]uG2N0

[01:52] *** MasterDuke joined
[01:52] *** p6bannerbot sets mode: +v MasterDuke

[01:52] *** MasterDuke left
[01:52] *** MasterDuke joined
[01:52] *** herbert.freenode.net sets mode: +v MasterDuke

[01:52] *** p6bannerbot sets mode: +v MasterDuke

[01:53] *** Ven` joined
[01:54] *** p6bannerbot sets mode: +v Ven`

[01:57] *** Ven` left
[02:06] *** aborazmeh joined
[02:06] *** aborazmeh left
[02:06] *** aborazmeh joined
[02:06] *** p6bannerbot sets mode: +v aborazmeh

[02:06] *** Kaiepi left
[02:06] *** Kaiepi joined
[02:06] *** p6bannerbot sets mode: +v aborazmeh

[02:07] *** p6bannerbot sets mode: +v Kaiepi

[02:37] *** spycrab0 joined
[02:37] *** p6bannerbot sets mode: +v spycrab0

[02:44] *** araraloren_ joined
[02:44] *** p6bannerbot sets mode: +v araraloren_

[02:53] *** w_richard_w joined
[02:54] *** p6bannerbot sets mode: +v w_richard_w

[03:08] *** Grimnir14 joined
[03:09] *** Grimnir14 left
[03:20] *** quester joined
[03:20] *** p6bannerbot sets mode: +v quester

[03:43] *** benjikun left
[03:52] *** Gizmokid20057 joined
[03:52] *** Gizmokid20057 left
[03:54] *** Ven` joined
[03:54] *** p6bannerbot sets mode: +v Ven`

[03:58] *** Ven` left
[03:59] *** matsuzine joined
[03:59] *** p6bannerbot sets mode: +v matsuzine

[04:08] *** matsuzine left
[04:09] *** kaare_ joined
[04:10] *** p6bannerbot sets mode: +v kaare_

[04:46] *** SakiTW joined
[04:46] *** p6bannerbot sets mode: +v SakiTW

[04:47] *** SakiTW left
[04:52] *** sandy joined
[04:52] *** p6bannerbot sets mode: +v sandy

[04:56] *** sandy left
[04:58] *** matsu joined
[04:59] *** p6bannerbot sets mode: +v matsu

[05:06] *** spycrab0 left
[05:14] <xinming> How do we call the same sub or method with arg modified?

[05:19] <geekosaur> manually, unless you are doing dispatching and want to try the next candidate which is callwith or nextwith. to call the exact same sub again there is no mechanism.

[05:24] *** aborazmeh left
[05:33] *** giraffe left
[05:46] <xinming> thanks

[05:47] <xinming> m: my @a = ('a' .. 'c'); my @b = (1 .. 3); my @c = @a x @b; @c.perl.say;

[05:47] <camelia> rakudo-moar 229fa2c1f: OUTPUT: «["a b ca b ca b c"]␤»

[05:47] <xinming> In perl6, There is a op to combine @a and @b, what that op is called?  so the output will be something like,    [a 1

[05:48] <xinming> In perl6, There is a op to combine @a and @b, what that op is called?  so the output will be something like,    [a 1], [a 2], [a 3], [b 1], [b 2], [b 3]...

[05:48] <xinming> not zip

[05:48] <xinming> m: my @a = ('a' .. 'c'); my @b = (1 .. 3); my @c = @a zip @b; @c.perl.say;

[05:48] <camelia> rakudo-moar 229fa2c1f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3a' .. 'c'); my @b = (1 .. 3); my @c = @a7⏏5 zip @b; @c.perl.say;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤    …»

[05:48] <xinming> m: my @a = ('a' .. 'c'); my @b = (1 .. 3); my @c = @a y @b; @c.perl.say;

[05:48] <camelia> rakudo-moar 229fa2c1f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3a' .. 'c'); my @b = (1 .. 3); my @c = @a7⏏5 y @b; @c.perl.say;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤      …»

[05:48] <xinming> m: my @a = ('a' .. 'c'); my @b = (1 .. 3); my @c = @a Z @b; @c.perl.say;

[05:48] <camelia> rakudo-moar 229fa2c1f: OUTPUT: «[("a", 1), ("b", 2), ("c", 3)]␤»

[05:49] <xinming> m: my @a = ('a' .. 'c'); my @b = (1 .. 3); my @c = @a X @b; @c.perl.say;

[05:49] <camelia> rakudo-moar 229fa2c1f: OUTPUT: «[("a", 1), ("a", 2), ("a", 3), ("b", 1), ("b", 2), ("b", 3), ("c", 1), ("c", 2), ("c", 3)]␤»

[05:49] <xinming> This is what I want.

[05:49] <xinming> I use the x which is wrong

[05:54] *** Ven` joined
[05:55] *** p6bannerbot sets mode: +v Ven`

[05:59] *** Ven` left
[06:00] *** araraloren_ left
[06:01] *** Guest14872 joined
[06:01] *** p6bannerbot sets mode: +v Guest14872

[06:05] *** araraloren joined
[06:06] *** p6bannerbot sets mode: +v araraloren

[06:25] *** spycrab0 joined
[06:25] *** p6bannerbot sets mode: +v spycrab0

[06:36] *** quester left
[06:39] *** molaf joined
[06:39] *** p6bannerbot sets mode: +v molaf

[07:02] *** rindolf joined
[07:03] *** p6bannerbot sets mode: +v rindolf

[07:06] *** ExeciN27 joined
[07:06] *** p6bannerbot sets mode: +v ExeciN27

[07:07] *** ExeciN27 left
[07:09] *** w_richard_w left
[07:16] *** espadrine joined
[07:17] *** p6bannerbot sets mode: +v espadrine

[07:25] *** robertle joined
[07:26] *** p6bannerbot sets mode: +v robertle

[07:54] *** lizmat joined
[07:54] *** p6bannerbot sets mode: +v lizmat

[07:54] *** Ven` joined
[07:55] *** p6bannerbot sets mode: +v Ven`

[07:59] *** Ven` left
[08:06] *** grumble left
[08:07] *** grumble joined
[08:07] *** p6bannerbot sets mode: +v grumble

[08:12] <Geth> ¦ doc: 318d8a89df | (JJ Merelo)++ | doc/Language/101-basics.pod6

[08:12] <synopsebot> Link: https://doc.perl6.org/language/101-basics

[08:12] <Geth> ¦ doc: Deletes last reference to Perl 5

[08:12] <Geth> ¦ doc: 

[08:12] <Geth> ¦ doc: I have actually left the reference when talking about `use v6`. In

[08:12] <Geth> ¦ doc: fact, it happens to me from time to time, and there's no way to

[08:12] <Geth> ¦ doc: explain what it does other than referencing this.

[08:12] <Geth> ¦ doc: 

[08:12] <Geth> ¦ doc: I agree with @stmuk that it shouldn't be moved. It serves its purpose,

[08:12] <Geth> ¦ doc: which is to serve as an introduction *for anyone*, not for Perl 5

[08:12] <Geth> ¦ doc: users now that all those references have been eliminated. This closes #2191

[08:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/318d8a89df

[08:26] *** bananas0 joined
[08:27] *** p6bannerbot sets mode: +v bananas0

[08:28] *** bananas0 left
[08:36] *** spycrab0 left
[09:10] *** abraxxa left
[09:12] *** cpage left
[09:18] *** Tison joined
[09:18] *** p6bannerbot sets mode: +v Tison

[09:21] <Tison> xinming: @array x <rhs> would numify the rhs and repeat @array +<rhs> times

[09:21] <Tison> X is cross meta op IIRC

[09:21] <Tison> https://docs.perl6.org/language/operators#index-entry-X_%28cross_metaoperator%29

[09:39] *** molaf left
[09:44] *** tomaw17 joined
[09:45] *** p6bannerbot sets mode: +v tomaw17

[09:46] *** tomaw17 left
[09:55] *** Ven` joined
[09:56] *** p6bannerbot sets mode: +v Ven`

[09:59] *** Ven` left
[10:01] *** sarna-web joined
[10:01] *** p6bannerbot sets mode: +v sarna-web

[10:02] <sarna-web> m: for 1..3 -> $n {.say}

[10:02] <camelia> rakudo-moar e5568aa50: OUTPUT: «(Any)␤(Any)␤(Any)␤»

[10:02] <sarna-web> why doesn't it say "1 2 3"?

[10:04] *** kaare__ joined
[10:04] *** kaare_ left
[10:04] *** p6bannerbot sets mode: +v kaare__

[10:07] <sarna-web> also, this is weird

[10:08] <sarna-web> m: for '1'..'9' -> $n {say $n}

[10:08] <camelia> rakudo-moar e5568aa50: OUTPUT: «1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[10:08] <sarna-web> m: for '1'..'10' -> $n {say $n}

[10:08] <camelia> rakudo-moar e5568aa50: OUTPUT: «1␤»

[10:08] <sarna-web> :D

[10:11] <lizmat> m: say "2" cmp "10"   # indeed

[10:11] <camelia> rakudo-moar e5568aa50: OUTPUT: «More␤»

[10:13] <Geth> ¦ Pod-To-HTML/master: 6 commits pushed by (Armand Halbert)++, (Jonathan Stowe)++

[10:13] <Geth> ¦ Pod-To-HTML/master: 8c73436815 | Added definition lists

[10:13] <Geth> ¦ Pod-To-HTML/master: 418db9942a | Merge branch '15' of git://github.com/ahalbert/Pod-To-HTML into ahalbert-15

[10:13] <Geth> ¦ Pod-To-HTML/master: e47ae81dfa | Spread out the tests a bit

[10:13] <Geth> ¦ Pod-To-HTML/master: 48fe6399fc | Make bew node2html for Defn

[10:13] <Geth> ¦ Pod-To-HTML/master: 4df59551ce | Add rudimentary test for defn

[10:13] <Geth> ¦ Pod-To-HTML/master: 326838cd26 | Up version

[10:13] <Geth> ¦ Pod-To-HTML/master: review: https://github.com/perl6/Pod-To-HTML/compare/f4e0b89b4813...326838cd26be

[10:13] <sarna-web> m: for '00'..'99' -> $n {say $n}

[10:13] <camelia> rakudo-moar e5568aa50: OUTPUT: «00␤01␤02␤03␤04␤05␤06␤07␤08␤09␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤22␤23␤24␤25␤26␤27␤28␤29␤30␤31␤32␤33␤34␤35␤36␤37␤38␤39␤40␤41␤42␤43␤44␤45␤46␤47␤48␤49␤5…»

[10:13] <sarna-web> oh, that works :^)

[10:19] <lizmat> m: for '000'..'99' -> $n {say $n}   # this doesn't  :-)

[10:19] <camelia> rakudo-moar e5568aa50: OUTPUT: «000␤»

[10:24] *** astj joined
[10:25] *** p6bannerbot sets mode: +v astj

[10:27] <xinming> m: class A { multi method t (Str $s) { $s.say;  }; multi method t (Hash %h) { nextwith (to-json %) } }; A.new.t({})

[10:27] <camelia> rakudo-moar e5568aa50: OUTPUT: «Cannot resolve caller t(A: Hash); none of these signatures match:␤    (A: Str $s, *%_)␤    (A: Hash %h, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[10:27] <xinming> How can we do nextwith on the method?

[10:28] <xinming> m: class A { multi method t (Str $s) { $s.say;  }; multi method t (Hash %h) { nextwith to-json({}) } }; A.new.t({})

[10:28] <camelia> rakudo-moar e5568aa50: OUTPUT: «Cannot resolve caller t(A: Hash); none of these signatures match:␤    (A: Str $s, *%_)␤    (A: Hash %h, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[10:28] <xinming> m: class A { multi method t (Hash %h) { nextwith to-json({}) };  multi method t (Str $s) { $s.say; }; }; A.new.t({})

[10:28] <camelia> rakudo-moar e5568aa50: OUTPUT: «Cannot resolve caller t(A: Hash); none of these signatures match:␤    (A: Hash %h, *%_)␤    (A: Str $s, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[10:28] <xinming> m: class A { multi method t (%h) { nextwith to-json({}) };  multi method t (Str $s) { $s.say; }; }; A.new.t({})

[10:28] <camelia> rakudo-moar e5568aa50: ( no output )

[10:29] <xinming> m: class A { multi method t (Hash $x) { nextwith to-json($x) };  multi method t (Str $s) { $s.say; }; }; A.new.t({})

[10:29] <camelia> rakudo-moar e5568aa50: ( no output )

[10:29] <xinming> m: class A { multi method t (Hash $x) { nextwith to-json($x) };  multi method t (Str $s) { $s.say; }; }; A.new.t("{abc}")

[10:29] <camelia> rakudo-moar e5568aa50: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    abc used at line 1. Did you mean 'abs'?␤␤»

[10:29] <xinming> m: class A { multi method t (Hash $x) { nextwith to-json($x) };  multi method t (Str $s) { $s.say; }; }; A.new.t("abc")

[10:29] <camelia> rakudo-moar e5568aa50: OUTPUT: «abc␤»

[10:29] <xinming> m: class A { multi method t (Hash $x) { nextwith to-json($x) };  multi method t (Str $s) { $s.say; }; }; A.new.t(%({}))

[10:29] <camelia> rakudo-moar e5568aa50: ( no output )

[10:29] *** Ven` joined
[10:29] <xinming> m: use JSON::Fast; class A { multi method t (Hash $x) { nextwith to-json($x) };  multi method t (Str $s) { $s.say; }; }; A.new.t({}}

[10:29] <camelia> rakudo-moar e5568aa50: OUTPUT: «===SORRY!===␤Could not find JSON::Fast at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-1/share/perl6␤    CompUni…»

[10:30] *** p6bannerbot sets mode: +v Ven`

[10:30] *** sarna-web left
[10:32] <xinming> nextsame

[10:32] <xinming> not nextwith

[10:32] <xinming> Need a lot of attention to distinuish all the differences between these

[10:41] *** Ven` left
[10:47] *** kerframil left
[11:02] *** Ven` joined
[11:02] *** p6bannerbot sets mode: +v Ven`

[11:13] *** [particle]1 left
[11:14] <xinming> m: ["hello" X [1..5]].perl.say;

[11:14] <camelia> rakudo-moar e5568aa50: OUTPUT: «[("hello", 1), ("hello", 2), ("hello", 3), ("hello", 4), ("hello", 5)]␤»

[11:15] <xinming> m: (["hello" X [1..5]].map: .hash).perl.say;

[11:15] <camelia> rakudo-moar e5568aa50: OUTPUT: «Cannot map a Array to a Hash.␤Did you mean to add a stub ({...}) or did you mean to .classify?␤  in block <unit> at <tmp> line 1␤␤»

[11:15] <xinming> m: (["hello" X [1..5]].map: *.hash).perl.say;

[11:15] <camelia> rakudo-moar e5568aa50: OUTPUT: «({:hello(1)}, {:hello(2)}, {:hello(3)}, {:hello(4)}, {:hello(5)}).Seq␤»

[11:18] *** jjmerelo joined
[11:19] *** p6bannerbot sets mode: +v jjmerelo

[11:20] *** jmerelo left
[11:21] *** astj left
[11:31] *** kaare_ joined
[11:31] <thundergnat> m: ("hello" X=> [1..5]).perl.say;

[11:31] <camelia> rakudo-moar e5568aa50: OUTPUT: «(:hello(1), :hello(2), :hello(3), :hello(4), :hello(5)).Seq␤»

[11:31] *** kaare__ left
[11:31] *** p6bannerbot sets mode: +v kaare_

[11:34] *** astj joined
[11:35] *** p6bannerbot sets mode: +v astj

[11:36] *** lizmat left
[11:42] *** Ven` left
[11:45] *** jjmerelo left
[11:47] *** mscha joined
[11:47] *** p6bannerbot sets mode: +v mscha

[11:48] <mscha> m: my SetHash $foo; for ^250_000 { $foo{$_} = True; }; say now - INIT now;

[11:48] <camelia> rakudo-moar e5568aa50: OUTPUT: «3.2284417␤»

[11:48] <mscha> m: my %foo{Int}; for ^250_000 { %foo{$_} = True; }; say now - INIT now;

[11:48] <camelia> rakudo-moar e5568aa50: OUTPUT: «0.8601462␤»

[11:48] *** EvilRoey15 joined
[11:48] <mscha> m: 'my %foo; for ^250_000 { %foo{$_} = True; }; say now - INIT now;

[11:48] <camelia> rakudo-moar e5568aa50: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)␤at <tmp>:1␤------> 3 %foo{$_} = True; }; say now - INIT now;7⏏5<EOL>␤    expecting …»

[11:48] <mscha> m: my %foo; for ^250_000 { %foo{$_} = True; }; say now - INIT now;

[11:48] <camelia> rakudo-moar e5568aa50: OUTPUT: «0.3908848␤»

[11:48] *** EvilRoey15 left
[11:48] <mscha> Conclusion: using a SetHash is *much* slower than using a regular hash.

[11:49] <mscha> In addition, using a (regular) hash with Int keys is slower than using a hash with default string keys.

[12:07] *** pmurias joined
[12:07] *** p6bannerbot sets mode: +v pmurias

[12:12] *** astj left
[12:13] *** astj joined
[12:14] *** p6bannerbot sets mode: +v astj

[12:16] *** Ven` joined
[12:17] *** p6bannerbot sets mode: +v Ven`

[12:17] *** molaf joined
[12:18] *** [particle] joined
[12:18] *** p6bannerbot sets mode: +v molaf

[12:18] *** p6bannerbot sets mode: +v [particle]

[12:18] *** astj left
[12:28] *** kaare_ left
[12:28] *** sno left
[12:29] *** astj joined
[12:30] *** p6bannerbot sets mode: +v astj

[12:30] *** sno joined
[12:31] *** p6bannerbot sets mode: +v sno

[12:32] *** astj_ joined
[12:33] *** p6bannerbot sets mode: +v astj_

[12:36] *** astj left
[12:36] *** MilkmanDan left
[12:37] *** MilkmanDan joined
[12:37] *** p6bannerbot sets mode: +v MilkmanDan

[12:38] *** astj_ left
[12:42] *** lizmat joined
[12:43] *** p6bannerbot sets mode: +v lizmat

[12:43] *** Tison left
[12:50] *** astj joined
[12:51] *** p6bannerbot sets mode: +v astj

[12:54] *** astj left
[13:11] <xinming> http://termbin.com/qsdk   <--- Anyone here tells me why will this method always ROLLBACK when I use txn-do: ?

[13:12] <xinming> I check the pg log, I found it always call ROLLBACK instead of COMMIT

[13:12] <xinming> Where I do wrong?

[13:12] <xinming> the  True in sink context in LEAVE phasers are just testing.

[13:13] <xinming> the $! returns Nil always.

[13:13] *** spycrab0 joined
[13:13] *** p6bannerbot sets mode: +v spycrab0

[13:13] <xinming> but somehow, the UNDO block is always processed.

[13:23] <xinming> I just now find the problem, maybe this is a bug, or someone can explain this for me?   http://termbin.com/r43u

[13:27] <jnthn> xinming: UNDO and REDO care about the result that the block they're in evaluates to

[13:27] <jnthn> When you return, you throw a control exception, which means you exit the nested block with an undefiend value, which triggers UNDO

[13:28] *** pmurias left
[13:29] <jnthn> Solution: don't write `return`, or put the UNDO/KEEP at the sub level

[13:29] <xinming> Does that mean we can't return "value"?

[13:30] <xinming>  a little confused how the logic is

[13:31] *** pmurias joined
[13:31] <jnthn> Sure, you just need your UNDO/REDO at the level of the sub

[13:31] *** quiz9613 joined
[13:31] <jnthn> Then they'll examine the sub's return value

[13:31] <xinming> http://termbin.com/qsdk   <--- What about this?

[13:32] *** p6bannerbot sets mode: +v pmurias

[13:32] <jnthn> Exactly the same situation, no?

[13:32] *** p6bannerbot sets mode: +v quiz9613

[13:32] *** quiz9613 left
[13:32] <xinming> jnthn: for the return part, I'm thinking how these can be better solved

[13:32] <xinming> the method txn-do

[13:32] <jnthn> Oh, you want the early return

[13:33] <xinming> jnthn: Yes, if we have early return, how this can be fixed?

[13:33] <jnthn> Just remove the second return, and use an implicit return

[13:33] <xinming> If we early return, the KEEP will be executed, and then, we got result commited.

[13:33] <jnthn> So the block has the correct result

[13:33] <jnthn> Or if you don't like that, factor the second part out into another sub

[13:33] *** rorx13 joined
[13:34] *** p6bannerbot sets mode: +v rorx13

[13:35] *** Ven` left
[13:35] *** rorx13 left
[13:36] <xinming> If the LEAVE last statement return False, Will it cause UNDO to be run?

[13:37] <xinming> I found that if i have LEAVE statement in txn-do method, It'll still go to UNDO

[13:43] *** Ven` joined
[13:43] *** p6bannerbot sets mode: +v Ven`

[13:48] *** Ven` left
[13:49] *** Zoffix joined
[13:49] *** p6bannerbot sets mode: +v Zoffix

[13:49] *** kaare_ joined
[13:50] *** p6bannerbot sets mode: +v kaare_

[13:50] *** MilkmanDan left
[13:51] *** MilkmanDan joined
[13:51] *** p6bannerbot sets mode: +v MilkmanDan

[13:53] <Zoffix> PSA: we modified perl6 GitHub org perms a bit. Default org perm was Write and has been reduced to Read. Any new repo now will need you to add `perl6` team to it with write perms, if you want regular members of the or to be able to write to it. The nqp repo has been excluded from the `perl6` default team. To add new committers to `nqp` repo, add them to `nqp` team. If you used to be a contributor to nqp and now

[13:53] <Zoffix> lost your access, ping one of the org admins and we'll be able to add you back

[13:57] <Zoffix> s/of the or to/of the org to/;

[14:01] *** Zoffix left
[14:22] *** zakharyas joined
[14:23] *** p6bannerbot sets mode: +v zakharyas

[14:31] <pochi> "MoarVM panic: Internal error: zeroed target thread ID in work pass"

[14:31] <pochi> what does this mean?

[14:58] <AlexDaniel> pochi: most likely a bug, although it somewhat depends on what you were doing

[15:01] *** Ven` joined
[15:02] *** p6bannerbot sets mode: +v Ven`

[15:04] *** petercommand left
[15:10] *** jmerelo joined
[15:10] *** p6bannerbot sets mode: +v jmerelo

[15:25] *** araraloren left
[15:27] <xinming> m: my %x = ("a", "b"); sub t ( %h) { %h.perl.say }; t ({ |%^C :a("b") });

[15:27] <camelia> rakudo-moar e5568aa50: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of %^C variable␤at <tmp>:1␤------> 3; sub t ( %h) { %h.perl.say }; t ({ |%^C7⏏5 :a("b") });␤»

[15:27] <xinming> m: my %x = ("a", "b"); sub t ( %h) { %h.perl.say }; t ({ |%x, :a("b") });

[15:27] <camelia> rakudo-moar e5568aa50: OUTPUT: «Type check failed in binding to parameter '%h'; expected Associative but got Block (-> ;; $_? is raw { #`...)␤  in sub t at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:28] <xinming> m: my %x = ("a", "b"); sub t ( %h) { %h.perl.say }; t ({ %x, :a("b") });

[15:28] <camelia> rakudo-moar e5568aa50: OUTPUT: «{:a("b")}␤»

[15:28] <xinming> m: my %x = ("x", "y"); sub t ( %h) { %h.perl.say }; t ({ %x, :a("b") });

[15:28] <camelia> rakudo-moar e5568aa50: OUTPUT: «{:a("b"), :x("y")}␤»

[15:29] <xinming> m: sub h () { my %x = ("a", "b") }; sub t ( %h) { %h.perl.say }; t ({ h(), :a("b") });

[15:29] <camelia> rakudo-moar e5568aa50: OUTPUT: «Type check failed in binding to parameter '%h'; expected Associative but got Block (-> ;; $_? is raw { #`...)␤  in sub t at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:29] <xinming> How do we force { } to be a hash in this case?

[15:30] <samcv> AlexDaniel: i'm working on https://github.com/rakudo/rakudo/issues/2198 right now

[15:30] <yoleaux> 10 Aug 2018 18:56Z <AlexDaniel> samcv: GH#2198

[15:30] <synopsebot> GH#2198 [open]: https://github.com/rakudo/rakudo/issues/2198 [UNI][regression] The Regional Indicator Symbols seem to get mangled when flipped sometimes 

[15:30] <AlexDaniel> cool!

[15:30] <xinming> m: sub h () { my %x = ("a", "b"); %x }; sub t ( %h) { %h.perl.say }; t {(h(), :a("b"))};

[15:30] <camelia> rakudo-moar e5568aa50: OUTPUT: «Type check failed in binding to parameter '%h'; expected Associative but got Block (-> ;; $_? is raw { #`...)␤  in sub t at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:32] <jmerelo> samcv++

[15:34] *** Ven` left
[15:36] <xinming> m: sub h () { my %x = ("a", "b"); %x }; sub t ( %h) { %h.perl.say }; t {:a("b"), h};

[15:36] <camelia> rakudo-moar e5568aa50: OUTPUT: «{:a("b")}␤»

[15:36] <xinming> m: sub h () { my %x = ("x", "y"); %x }; sub t ( %h) { %h.perl.say }; t {:a("b"), h};

[15:36] <camelia> rakudo-moar e5568aa50: OUTPUT: «{:a("b"), :x("y")}␤»

[15:37] <xinming> m: sub h () { my %x = ("a", "c", "x", "y"); %x }; sub t ( %h) { %h.perl.say }; t {:a("b"), h};

[15:37] <camelia> rakudo-moar e5568aa50: OUTPUT: «{:a("c"), :x("y")}␤»

[15:37] <xinming> m: sub default () { my %x = ("a", "c", "x", "y"); %x }; sub t ( %h) { %h.perl.say }; t {default, :a("b") };

[15:37] <camelia> rakudo-moar e5568aa50: OUTPUT: «Type check failed in binding to parameter '%h'; expected Associative but got Block (-> ;; $_? is raw { #`...)␤  in sub t at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:37] <xinming> m: sub default () { my %x = ("a", "c", "x", "y"); %x }; sub t ( %h) { %h.perl.say }; t { %(default), :a("b") };

[15:37] <camelia> rakudo-moar e5568aa50: OUTPUT: «Type check failed in binding to parameter '%h'; expected Associative but got Block (-> ;; $_? is raw { #`...)␤  in sub t at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:40] *** xelak joined
[15:40] *** p6bannerbot sets mode: +v xelak

[15:40] <xinming> In my case, is there a way to force the "block" to be hash?

[15:43] <xelak> m: my $p=Proc::Async.new("xxxx"); await $proc.start; CATCH { default {say "caught!"}}

[15:43] <camelia> rakudo-moar e5568aa50: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$proc' is not declared. Did you mean 'Proc'?␤at <tmp>:1␤------> 3my $p=Proc::Async.new("xxxx"); await 7⏏5$proc.start; CATCH { default {say "caugh␤»

[15:43] *** beaver25 joined
[15:43] <xelak> m:  my $p=Proc::Async.new("xxxx"); await $p.start; CATCH { default {say "caught!"}}

[15:43] <camelia> rakudo-moar e5568aa50: OUTPUT: «caught!␤»

[15:43] *** beaver25 left
[15:44] *** jmerelo left
[15:47] <xelak> m: my $p=Proc::Async.new("xxxx"); $p.Supply.act: { .print }; CATCH { default {say "caught!"}}

[15:47] <camelia> rakudo-moar e5568aa50: OUTPUT: «caught!␤»

[15:50] <xelak> m: my $p=Proc::Async.new("xxxx"); $p.Supply.act: { .print }; await $p.start; CATCH { default {say "caught!"}}

[15:50] <camelia> rakudo-moar e5568aa50: OUTPUT: «caught!␤»

[15:51] *** MilkmanDan left
[15:52] *** MilkmanDan joined
[15:52] *** p6bannerbot sets mode: +v MilkmanDan

[15:56] *** Herby joined
[15:57] *** p6bannerbot sets mode: +v Herby

[15:57] <Herby> o/

[15:59] <xelak> m: my $p=Proc::Async.new("/bin/sh echo 42; echo 100 >&2"); $p.Supply.act: { .print }; await $p.start; CATCH { default {say "caught!"}}

[15:59] <camelia> rakudo-moar e5568aa50: OUTPUT: «caught!␤»

[15:59] <xelak> m: my $p=Proc::Async.new("/bin/sh echo 42; echo 100 >&2"); $p.Supply.act: { .print }; await $p.start;

[15:59] <camelia> rakudo-moar e5568aa50: OUTPUT: «Proc::Async is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at <tmp> line 1␤␤»

[15:59] <timotimo> try with p6: instead

[16:00] <xelak> p6: my $p=Proc::Async.new("/bin/sh echo 42; echo 100 >&2"); $p.Supply.act: { .print }; await $p.start;

[16:00] <camelia> rakudo-moar e5568aa50: OUTPUT: «Proc::Async is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at <tmp> line 1␤␤»

[16:00] <AlexDaniel> you mean e: ?

[16:00] <AlexDaniel> e: my $p=Proc::Async.new("/bin/sh echo 42; echo 100 >&2"); $p.Supply.act: { .print }; await $p.start;

[16:00] <evalable6> AlexDaniel, rakudo-moar e5568aa50: OUTPUT: «(exit code 1) Unhandled exception in code scheduled on thread 4␤Cannot invoke this object (REPR: Null; VMNull)␤␤»

[16:01] *** pochi left
[16:01] <xelak> e: my $p=Proc::Async.new("xxxx"); $p.Supply.act: { .print }; await $p.start; CATCH { default {say "caught!"}}

[16:01] <evalable6> xelak, rakudo-moar e5568aa50: OUTPUT: «(exit code 1) Unhandled exception in code scheduled on thread 4␤Cannot invoke this object (REPR: Null; VMNull)␤␤»

[16:02] <xelak> e: my $p=Proc::Async.new("xxxx"); await $p.start; CATCH { default {say "caught!"}}

[16:02] <evalable6> xelak, rakudo-moar e5568aa50: OUTPUT: «caught!␤»

[16:02] <xelak> e: my $p=Proc::Async.new("xxxx"); $p.Supply.act: { .print }; await $p.start; CATCH { default {say "caught!"}}

[16:02] <evalable6> xelak, rakudo-moar e5568aa50: OUTPUT: «(exit code 1) Unhandled exception in code scheduled on thread 4␤Cannot invoke this object (REPR: Null; VMNull)␤␤»

[16:02] <AlexDaniel> well, hmm… the shell example should be like this

[16:03] <AlexDaniel> e: my $p=Proc::Async.new("/bin/sh", "-c", "echo 42; echo 100 >&2"); $p.Supply.act: { .print }; await $p.start

[16:03] <evalable6> AlexDaniel, rakudo-moar e5568aa50: OUTPUT: «42␤100␤»

[16:03] <xelak> But how can I catch the exception?

[16:03] <AlexDaniel> and it dies correctly in this case:

[16:03] <AlexDaniel> m: $p=Proc::Async.new("xxxxxxx"); await $p.start

[16:03] <camelia> rakudo-moar e5568aa50: OUTPUT: «Proc::Async is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at <tmp> line 1␤␤»

[16:03] <AlexDaniel> e: $p=Proc::Async.new("xxxxxxx"); await $p.start

[16:03] <evalable6> AlexDaniel, rakudo-moar e5568aa50: OUTPUT: «(exit code 1) Cannot assign to an immutable value␤  in block <unit> at /tmp/W_zAK07tga line 1␤␤»

[16:03] <AlexDaniel> e: my $p=Proc::Async.new("xxxxxxx"); await $p.start

[16:04] <evalable6> AlexDaniel, rakudo-moar e5568aa50: OUTPUT: «(exit code 1) An operation first awaited:␤  in block <unit> at /tmp/x3QaCgKJXR line 1␤␤Died with the exception:␤    no such file or directory␤␤»

[16:04] <AlexDaniel> ↑ that's correct

[16:04] <xelak> e: $p=Proc::Async.new("xxxxxxx"); await $p.start; CATCH { default {say "caught!"}}

[16:04] <evalable6> xelak, rakudo-moar e5568aa50: OUTPUT: «caught!␤»

[16:04] <AlexDaniel> e: my $p=Proc::Async.new("xxxxxxx"); react { whenever $p.stdout { .print }; whenever $p.start { say "proc finished" } }

[16:04] <evalable6> AlexDaniel, rakudo-moar e5568aa50: OUTPUT: «(exit code 1) An operation first awaited:␤  in block <unit> at /tmp/U37WgiZjPk line 1␤␤Died with the exception:␤    no such file or directory␤      in block <unit> at /tmp/U37WgiZjPk line 1␤␤»

[16:05] <AlexDaniel> this is also fine ↑

[16:05] <xelak> e: $p=Proc::Async.new("xxxxxxx");  $p.Supply.act: { .print }; await $p.start; CATCH { default {say "caught!"}}

[16:05] <evalable6> xelak, rakudo-moar e5568aa50: OUTPUT: «caught!␤»

[16:06] <AlexDaniel> e: my $p=Proc::Async.new("xxxxxxx"); react { whenever $p.stdout { .print }; whenever $p.start { say "proc finished" } }; CATCH { default { say "caught!" } }

[16:06] <evalable6> AlexDaniel, rakudo-moar e5568aa50: OUTPUT: «caught!␤»

[16:06] <AlexDaniel> isn't it a bit weird that the exception is thrown outside the react block?

[16:06] <xelak> e: my $p=Proc::Async.new("xxxx"); $p.Supply.act: { .print }; await $p.start; CATCH { default {say "caught!"}}

[16:06] <evalable6> xelak, rakudo-moar e5568aa50: OUTPUT: «(exit code 1) Unhandled exception in code scheduled on thread 4␤Cannot invoke this object (REPR: Null; VMNull)␤␤»

[16:07] <xelak> e: $p=Proc::Async.new("xxxxxxx");  $p.Supply.act: { .print }; await $p.start; CATCH { default {say "caught!"}}

[16:07] <evalable6> xelak, rakudo-moar e5568aa50: OUTPUT: «caught!␤»

[16:08] <xelak> e: $p=Proc::Async.new("xxxx");  $p.Supply.act: { .print }; await $p.start; CATCH { default {say "caught!"}}

[16:08] <evalable6> xelak, rakudo-moar e5568aa50: OUTPUT: «caught!␤»

[16:10] <jnthn> Hm, that "cannot invoke this object" is a bit odd

[16:10] <Geth> ¦ perl6.org: de50d50978 | (Steve Mynott)++ | source/downloads/index.html

[16:10] <Geth> ¦ perl6.org: mention 2018.06.1 released to fix Windows/Linenoise

[16:10] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/de50d50978

[16:11] <jnthn> e: $p=Proc::Async.new("xxxx");  $p.Supply.act: { .print }; await $p.start; CATCH { default {say "caught!"; sleep 1}}

[16:11] <evalable6> jnthn, rakudo-moar e5568aa50: OUTPUT: «caught!␤»

[16:12] <jnthn> e: $p=Proc::Async.new("xxxx");  $p.stdout.act: { .print }; await $p.start; CATCH { default {say "caught!"; sleep 1}}

[16:12] <evalable6> jnthn, rakudo-moar e5568aa50: OUTPUT: «caught!␤»

[16:12] <xelak> e: my $p=Proc::Async.new("xxxx"); $p.Supply.act: { .print }; await $p.start; CATCH { default {say "caught!"}}

[16:13] <evalable6> xelak, rakudo-moar e5568aa50: OUTPUT: «(exit code 1) Unhandled exception in code scheduled on thread 4␤Cannot invoke this object (REPR: Null; VMNull)␤␤»

[16:14] <xelak> So, what happend here?

[16:15] <jnthn> It's not entirely clear, but --ll-exception makes it look like a null code object was stuffed into the scheduler's queue

[16:16] <samcv> AlexDaniel: fixing some issues with join as well with regional indicators I discovered

[16:20] <xelak> e: my $p=Proc::Async.new("/bin/sh", "-c", "echo '42'; echo '100' >&2"); $proc.Supply.act: { .print }; await $proc.start;

[16:20] <evalable6> xelak, rakudo-moar e5568aa50: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/FTtAXOBXNb␤Variabl…»

[16:20] <evalable6> xelak, Full output: https://gist.github.com/d1d8f3ebe279654b2f78044482ca929e

[16:21] <xelak> my $p=Proc::Async.new("/bin/sh", "-c", "echo '42'; echo '100' >&2"); $p.Supply.act: { .print }; await $p.start;

[16:21] <evalable6> xelak, rakudo-moar e5568aa50: OUTPUT: «42␤100␤»

[16:25] *** Herby left
[16:29] *** breitenj25 joined
[16:29] *** [particle] left
[16:29] *** p6bannerbot sets mode: +v breitenj25

[16:30] *** breitenj25 left
[16:34] *** MasterDuke left
[16:35] *** plutes joined
[16:36] *** p6bannerbot sets mode: +v plutes

[16:36] <plutes> thanks

[16:38] *** scimon joined
[16:39] *** p6bannerbot sets mode: +v scimon

[16:39] <jdv79> why'd i just get "subscribed" to 10 seemingly random "perl6 repos"?

[16:40] *** Ven` joined
[16:41] *** p6bannerbot sets mode: +v Ven`

[16:42] <stmuk> I think there have been admin changes to "perl6" repos

[16:42] <timotimo> access for nqp repos has been shuffled around, so you probably got removed in one step and added in another

[16:43] *** abraxxa joined
[16:44] *** p6bannerbot sets mode: +v abraxxa

[16:44] *** Ven` left
[16:47] *** abraxxa left
[16:51] <xelak> e: for ^10 -> $i {     my $p = Proc::Async.new(<<"$*EXECUTABLE" -e "say 42; note 100">>);     my $s = $p.Supply(:bin);     my $c = $s.Channel;     my $o = IO::Pipe.new(:on-read({(try $c.receive) // buf8}), :on-close({$c.close}));     await $p.start;     say "Failed ($i)" if set($o.lines) !eqv set('42', '100'); }

[16:51] <evalable6> xelak, rakudo-moar e5568aa50: OUTPUT: «»

[16:52] <xelak> e: for ^20 -> $i {     my $p = Proc::Async.new(<<"$*EXECUTABLE" -e "say 42; note 100">>);     my $s = $p.Supply(:bin);     my $c = $s.Channel;     my $o = IO::Pipe.new(:on-read({(try $c.receive) // buf8}), :on-close({$c.close}));     await $p.start;     say "Failed ($i)" if set($o.lines) !eqv set('42', '100'); }

[16:52] <evalable6> xelak, rakudo-moar e5568aa50: OUTPUT: «»

[16:53] <xelak> e: for ^50 -> $i {     my $p = Proc::Async.new(<<"$*EXECUTABLE" -e "say 42; note 100">>);     my $s = $p.Supply(:bin);     my $c = $s.Channel;     my $o = IO::Pipe.new(:on-read({(try $c.receive) // buf8}), :on-close({$c.close}));     await $p.start;     say "Failed ($i)" if set($o.lines) !eqv set('42', '100'); }

[16:53] <evalable6> xelak, rakudo-moar e5568aa50: OUTPUT: «»

[16:53] *** Zoffix joined
[16:53] *** p6bannerbot sets mode: +v Zoffix

[16:53] <Zoffix> .

[16:53] <yoleaux> 16:15Z <stmuk> Zoffix: can you please fix rakudo.org to point to R* source/windows 2018.06.1 (note Mac DMG version unchanged). I don't seem to have access anymore

[16:54] <Zoffix> AlexDaniel: so looks  like a bunch of repos didn't have any teams assigned to them and now people ain't got access to them. Any tips to get perl6 team assigned to all(?) repos (except for nqp)?

[16:56] <Geth> ¦ rakudo.org: 0ad12624a6 | (Zoffix Znet)++ (committed using GitHub Web editor) | templates/files.html.ep

[16:56] <Geth> ¦ rakudo.org: List 2018.06.1 for Windows

[16:56] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/0ad12624a6

[16:57] <Geth> ¦ rakudo.org: 373d08f1f5 | (Zoffix Znet)++ (committed using GitHub Web editor) | templates/files.html.ep

[16:57] <Geth> ¦ rakudo.org: List 2018.06.1 for source

[16:57] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/373d08f1f5

[16:58] <AlexDaniel> Zoffix: there are 69 repos in total and 54 are configured for write access

[16:58] <AlexDaniel> so we just have to configure the remaining 15…

[16:58] <AlexDaniel> how do we find them though :)

[17:00] <xelak> e: for ^100 -> $i { my $p = Proc::Async.new(<<"$*EXECUTABLE" -e "say 42; note 100">>); my $s = $p.Supply(:bin); my $c = $s.Channel; my $o = IO::Pipe.new(:on-read({(try $c.receive) // buf8}), :on-close({$c.close})); await $p.start; say "Failed ($i)" if set($o.lines) !eqv set('42', '100'); }

[17:00] <AlexDaniel> and how much faster would it be to check them one by one, heh…

[17:00] <evalable6> xelak, rakudo-moar e5568aa50: OUTPUT: «(signal SIGHUP) «timed out after 10 seconds»»

[17:00] <xelak> e: for ^50 -> $i { my $p = Proc::Async.new(<<"$*EXECUTABLE" -e "say 42; note 100">>); my $s = $p.Supply(:bin); my $c = $s.Channel; my $o = IO::Pipe.new(:on-read({(try $c.receive) // buf8}), :on-close({$c.close})); await $p.start; say "Failed ($i)" if set($o.lines) !eqv set('42', '100'); }

[17:00] <evalable6> xelak, rakudo-moar e5568aa50: OUTPUT: «»

[17:00] <stmuk> BTW if anyone chocolatey related is here .. the choco star needs bumping too .. (I just tweeted at briandfoy anyway)

[17:02] *** plutes left
[17:02] <timotimo> could bdf have something to do with that?

[17:03] <stmuk> yes its the three at the bottom of https://chocolatey.org/packages/rakudostar

[17:03] <AlexDaniel> Zoffix: ok I'm doing it manually and I'll probably finish in 5 mins

[17:03] <Zoffix> AlexDaniel++ # thanks

[17:04] *** plutes joined
[17:05] *** p6bannerbot sets mode: +v plutes

[17:06] *** pochi joined
[17:07] *** p6bannerbot sets mode: +v pochi

[17:08] <AlexDaniel> dammit, 68 out of 69

[17:08] *** zakharyas left
[17:08] <AlexDaniel> I missed one :D

[17:08] <AlexDaniel> ah, I know which one

[17:09] <AlexDaniel> Zoffix: done, 69 out of 69

[17:09] <Zoffix> sweet

[17:09] <AlexDaniel> I wonder how many email notifications I generated this time

[17:10] <Zoffix> #yolo

[17:10] <AlexDaniel> Zoffix: fwiw https://github.com/rakudo/rakudo/issues/2196#issuecomment-412356255

[17:10] <AlexDaniel> let me know if you can run it

[17:10] *** [particle] joined
[17:10] <AlexDaniel> if not I can do it too of course, but maybe not today

[17:11] *** p6bannerbot sets mode: +v [particle]

[17:11] <Zoffix> AlexDaniel: yeah, I can run it

[17:11] <AlexDaniel> “[GitHub] Subscribed to 7 perl6 repositories” whew

[17:12] <AlexDaniel> it was smart enough not to send 7 emails

[17:12] <AlexDaniel> although it feels like soon I'll get another one about the remaining 8 repos

[17:12] *** plutes left
[17:12] *** MasterDuke joined
[17:12] *** p6bannerbot sets mode: +v MasterDuke

[17:13] *** MasterDuke left
[17:13] *** MasterDuke joined
[17:13] *** herbert.freenode.net sets mode: +v MasterDuke

[17:13] *** p6bannerbot sets mode: +v MasterDuke

[17:13] <Zoffix> MUAHAHA

[17:13] * Zoffix waits for ssh actually to connect

[17:14] <Zoffix> c'mon, don't hold out on me bruh

[17:15] <Zoffix> I'm in :D

[17:16] <Zoffix> AlexDaniel: look what I'm gonna toast on :D https://i.imgur.com/vzdyEap.png

[17:16] <Zoffix> 160 cores 3.8 Terra byte sof RAM

[17:16] <AlexDaniel> Zoffix: omg… so how can I get that? I mean, I think I'm even running out of the initial google cloud bonus…

[17:17] <AlexDaniel> which is a good motivation for me to optimize toaster, right :)

[17:17] *** [particle] left
[17:17] <Zoffix> I dunno, I had to request quota increase to even boot this thing

[17:17] <AlexDaniel> also, I'm thinking about integrating some bisection logic right into toaster

[17:17] <Zoffix> And it's expensive AF... like $17/h or something

[17:17] <AlexDaniel> Zoffix: but they didn't give you any extra free credit?

[17:18] <Zoffix> I already used it up long time ago

[17:18] <Zoffix> Well, it lasts only X months  I think and I already past that point

[17:18] <AlexDaniel> it's my last month I think and I have like 30€ left

[17:24] *** kylese joined
[17:25] *** p6bannerbot sets mode: +v kylese

[17:32] *** petercommand joined
[17:32] *** p6bannerbot sets mode: +v petercommand

[17:37] <Zoffix> uhhh

[17:38] <Zoffix> oh ok, toaster crashed 'cause the disk is just full *phew*

[17:45] *** erasmus20 joined
[17:45] *** erasmus20 left
[17:54] *** quester joined
[17:54] *** p6bannerbot sets mode: +v quester

[17:54] <Geth> ¦ perl6.org: a237d2d5ea | (Steve Mynott)++ | source/downloads/index.html

[17:54] <Geth> ¦ perl6.org: Revert "mention 2018.06.1 released to fix Windows/Linenoise"

[17:54] <Geth> ¦ perl6.org: 

[17:54] <Geth> ¦ perl6.org: This reverts commit de50d50978a7c19aaea2e1e35970dff2dec037e5.

[17:54] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/a237d2d5ea

[17:56] <Geth> ¦ rakudo.org: e399d54ae8 | (Steve Mynott)++ | templates/files.html.ep

[17:56] <Geth> ¦ rakudo.org: Revert "List 2018.06.1 for Windows"

[17:56] <Geth> ¦ rakudo.org: 

[17:56] <Geth> ¦ rakudo.org: This reverts commit 0ad12624a6735e5507b97929a5fcc6409c1b5ba5.

[17:56] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/e399d54ae8

[17:56] <Geth> ¦ rakudo.org: a5b036377d | (Steve Mynott)++ | templates/files.html.ep

[17:56] <Geth> ¦ rakudo.org: Revert "List 2018.06.1 for source"

[17:56] <Geth> ¦ rakudo.org: 

[17:56] <Geth> ¦ rakudo.org: This reverts commit 373d08f1f574c611ab623ade37751dee01cf10be.

[17:56] <Geth> ¦ rakudo.org: review: https://github.com/perl6/rakudo.org/commit/a5b036377d

[18:10] <Zoffix> fuksake "Command terminated by signal 11"

[18:12] <Zoffix> may as well have run it on my 24-core box *eyeroll*

[18:24] <Xliff> Don't you mean 24-thread?

[18:24] <Xliff> :)

[18:25] <Xliff> When did you get THAT beast? I assembled a 20-core machine back in late May

[18:26] *** regreg joined
[18:27] *** p6bannerbot sets mode: +v regreg

[18:27] <Xliff> https://i.imgur.com/vzdyEap.png :-O

[18:28] <Xliff> Zoffy. Share tha luv, bruv! Where can I get access to one of those?

[18:29] <Xliff> m: sub a { say "A" }; &("a");

[18:29] <camelia> rakudo-moar d8d51d0da: ( no output )

[18:29] <Xliff> m: sub a { say "A" }; &{"a"};

[18:29] <camelia> rakudo-moar d8d51d0da: ( no output )

[18:29] <Xliff> m: sub a { say "A" }; &"a";

[18:29] <camelia> rakudo-moar d8d51d0da: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Name must begin with alphabetic character␤at <tmp>:1␤------> 3sub a { say "A" }; &7⏏5"a";␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        stat…»

[18:30] <Xliff> m: sub a { say "A" }; my $a = "a"; &($a)

[18:30] <camelia> rakudo-moar d8d51d0da: ( no output )

[18:30] <Xliff> m: sub a { say "A" }; my $a = "a"; &($a)()

[18:30] <camelia> rakudo-moar d8d51d0da: OUTPUT: «No such method 'CALL-ME' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[18:30] <Xliff> m: sub a { say "A" }; my $a = "a"; &{$a}()

[18:30] <camelia> rakudo-moar d8d51d0da: ( no output )

[18:30] <Xliff> ?!?

[18:30] <Xliff> &::("a")

[18:30] <Xliff> m: sub a { say "A" }; my $a = "a"; &::("a")

[18:30] <camelia> rakudo-moar d8d51d0da: ( no output )

[18:30] <Xliff> m: sub a { say "A" }; my $a = "a"; say &::("a")

[18:30] <camelia> rakudo-moar d8d51d0da: OUTPUT: «&a␤»

[18:31] <Xliff> m: sub a { say "A" }; my $a = "a"; &a;

[18:31] <camelia> rakudo-moar d8d51d0da: OUTPUT: «WARNINGS for <tmp>:␤Useless use of &a in sink context (line 1)␤»

[18:31] <Xliff> m: sub a { say "A" }; my $a = "a"; a;

[18:31] <camelia> rakudo-moar d8d51d0da: OUTPUT: «A␤»

[18:32] *** regreg left
[18:32] <Xliff> m: sub a { say "A" }; my $a = "a"; ::("a")

[18:32] <camelia> rakudo-moar d8d51d0da: OUTPUT: «No such symbol 'a'␤  in block <unit> at <tmp> line 1␤␤»

[18:32] <Xliff> m: sub a { say "A" }; my $a = "a"; ::("&a")

[18:32] <camelia> rakudo-moar d8d51d0da: ( no output )

[18:32] *** regreg joined
[18:32] <Xliff> m: sub a { say "A" }; my $a = "a"; "&a";

[18:32] <camelia> rakudo-moar d8d51d0da: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant string "&a" in sink context (line 1)␤»

[18:32] *** scimon left
[18:33] *** p6bannerbot sets mode: +v regreg

[18:33] <MasterDuke> Xliff: he's using google compute engine (or whatever it's called)

[18:34] <Xliff> Ooo

[18:34] <Xliff> MasterDuke++

[18:34] <Xliff> OK, so if I have $a = "a" and sub a(); how can I call sub a() using $a?

[18:35] <moritz> &::($a)()

[18:35] <Xliff> I could have sworn I tried that.

[18:35] <Xliff> m: sub a { say "A" }; my $a = "a"; &::($a)()

[18:35] <camelia> rakudo-moar d8d51d0da: OUTPUT: «A␤»

[18:35] <Xliff> Oh fizzlesticks.

[18:36] <Zoffix> Xliff: no, 24-core

[18:36] <Zoffix> Xliff: you can get access to Google Compute Engine

[18:36] <regreg> hello, i want to learn a scripting language (but not python), what should i learn? perl5 or perl6?

[18:36] <Zoffix> regreg: perl6

[18:37] <regreg> is perl6 more future-proof?

[18:37] <Zoffix> regreg: yup: https://marketing.perl6.org/id/1531540189/any

[18:37] <regreg> i'm a C programmer if matters

[18:38] <Zoffix> We got NativeCall too. Lets you use C libraries fairly easily: https://docs.perl6.org/language/nativecall

[18:39] <Zoffix> Just had a program running on 160 cores: https://pbs.twimg.com/media/Dkaoat3WwAAjRyM.jpg

[18:39] <Zoffix> Sounds like what a future-proof lang would do to me :)

[18:39] <regreg> i'm interested in a side-project using llvm to write a JIT, or is the default moar perl6 jit good enough and would be a waste of time on my side?

[18:40] <Zoffix> regreg: dunno, I think #moarvm folks would be more capable to answer that.

[18:40] <regreg> i see, there is a moarvm channel

[18:41] <Zoffix> regreg: person named brrt in particular. They're the moarvm JIT expert

[18:41] *** reportable6 left
[18:41] <regreg> i see.. thanks

[18:43] <Ulti> regreg: there are a couple of projects targetting other VMs/langs like graalvm and javascript

[18:44] <regreg> i'm interested into writing a linux kernel replacement in a more productive language even if that means less performance

[18:44] <regreg> so i need a good jit

[18:44] <Zoffix> .tell AlexDaniel well, I tried toasting twice but looks like the 160-core toaster segfaults after some time (toaster itself runs on an older rakudo, not on HEAD). Kinda annoyed with it now and don't wanna re-toast on my 64-core box. Here are the partial results: https://toaster.perl6.party/

[18:44] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[18:44] <AlexDaniel> .

[18:44] <yoleaux> 18:44Z <Zoffix> AlexDaniel: well, I tried toasting twice but looks like the 160-core toaster segfaults after some time (toaster itself runs on an older rakudo, not on HEAD). Kinda annoyed with it now and don't wanna re-toast on my 64-core box. Here are the partial results: https://toaster.perl6.party/

[18:45] <Zoffix> regreg: in that case perl6 might be a bad choice. First stable release was like 2.5 years ago and performance currently ain't that great. Still tons of work to do.

[18:45] <Zoffix> Unless of course you want to help us out make MoarVM faster in the process of writing the linux thing :D 

[18:46] <regreg> Zoffix, is perl6 the hightest level language around? i don't care that much about performance

[18:46] <Zoffix> regreg: no idea. Not really a conosseiur of languages.

[18:46] <regreg> hmm

[18:46] <regreg> i like that perl6 has multimethods

[18:47] <Zoffix> :)

[18:48] <Zoffix> AlexDaniel: maybe partial results ain't useful at all actually, because normally it re-toasts failures once, but in those results it didn't get to that stage

[18:48] <AlexDaniel> Zoffix: I know… I hope I'll get some time next month to make toaster even fancier

[18:48] <AlexDaniel> Zoffix: because, for example, is there really any need to install any module more than once?

[18:49] <Zoffix> mhm

[18:49] <AlexDaniel> that could cut most of the run time, I think

[18:49] <AlexDaniel> I mean, if n-installing is eliminated :)

[18:49] <AlexDaniel> and then, there's https://github.com/perl6/whateverable/wiki/Shareable

[18:50] <AlexDaniel> so we don't necessarily have to build rakudo at all, just take the tar. And if the module fails, take another one… and keep doing until bisected :)

[18:51] <AlexDaniel> also, if that eliminates toaster flops (it should), then we can run tests of each module more than once

[18:51] <AlexDaniel> and give them “flopper” status if we find that

[18:52] <AlexDaniel> but yeah… I'm slightly overloaded with all kinds of project… mmm… I wish somebody else contributed that :)

[18:52] <AlexDaniel> projects*

[18:52] <AlexDaniel> *hint-hint* #perl6 :)

[18:52] <Zoffix> That reminds me

[18:52] *** Zoffix left
[18:53] <AlexDaniel> right

[18:58] <AlexDaniel> also I'd be glad to give away pretty much any project of mine. Squashathons are up for grabs, whateverable too

[18:58] *** HaraldJoerg joined
[18:58] <AlexDaniel> not because I don't want to work on these perl6-related things, it's just because I want to work on *other* perl6-related stuff :)

[18:58] *** p6bannerbot sets mode: +v HaraldJoerg

[19:08] *** Ven` joined
[19:08] *** xelak left
[19:08] *** p6bannerbot sets mode: +v Ven`

[19:10] <lizmat> .

[19:10] *** Khisanth left
[19:12] *** Ven` left
[19:16] *** Hoosilon25 joined
[19:17] *** p6bannerbot sets mode: +v Hoosilon25

[19:17] *** Hoosilon25 left
[19:23] *** Khisanth joined
[19:24] *** p6bannerbot sets mode: +v Khisanth

[19:44] *** Ven` joined
[19:45] *** p6bannerbot sets mode: +v Ven`

[19:49] <xinming> If an @array is iterable, After we use    for @array -> $item { }    Will the @array result be cached the second time we call   for @array -> $item { } ???

[19:49] *** Ven` left
[19:50] <moritz> xinming: yes

[19:50] <moritz> arrays can be lazy, but they store once-evaluated values

[19:51] <moritz> m: my @a = 1, 1, -> $a, $b { my $r = $a + $b; say "calculating $r" } ... *; say @a[5]; say @a[4]

[19:51] <camelia> rakudo-moar d8d51d0da: OUTPUT: «calculating 2␤calculating 2␤calculating 2␤calculating 2␤True␤True␤»

[19:52] <moritz> m: my @a = 1, 1, -> $a, $b { my $r = $a + $b; say "calculating $r";  $r } ... *; say @a[5]; say @a[4]

[19:52] <camelia> rakudo-moar d8d51d0da: OUTPUT: «calculating 2␤calculating 3␤calculating 5␤calculating 8␤8␤5␤»

[19:52] <xinming> Thanks

[19:53] *** Alucard4200 joined
[19:54] *** p6bannerbot sets mode: +v Alucard4200

[19:56] *** robertle left
[19:58] *** Alucard4200 left
[20:04] <xinming> m: (15.4 % 2).perl.say;

[20:04] <camelia> rakudo-moar d8d51d0da: OUTPUT: «1.4␤»

[20:05] <xinming> What is the operator called to return the 14 instead of remainder?

[20:08] *** MilkmanDan left
[20:09] *** MilkmanDan joined
[20:09] *** p6bannerbot sets mode: +v MilkmanDan

[20:10] <jnthn> m: (15.4 div 2).perl.say

[20:10] <camelia> rakudo-moar d8d51d0da: OUTPUT: «Cannot resolve caller infix:<div>(Rat, Int); none of these signatures match:␤    (Int:D \a, Int:D \b)␤    (int $a, int $b --> int)␤  in block <unit> at <tmp> line 1␤␤»

[20:10] <jnthn> oh, wait, not that one :)

[20:10] <jnthn> m: (15.4 / 2).floor.perl.say

[20:10] <camelia> rakudo-moar d8d51d0da: OUTPUT: «7␤»

[20:10] <jnthn> Oh, gah, that isn't it either

[20:10] <jnthn> hah :)

[20:10] * jnthn wonders if there is an operator for that...

[20:11] <tobs> I don't think so, been looking at the table

[20:11] <xinming> There is one IIRC

[20:11] <xinming> because I read the doc a month ago, I have the impression for that, I just forgot

[20:11] <xinming> I'll look again.

[20:12] <timotimo> m: say 15.4.round(2)

[20:12] <camelia> rakudo-moar d8d51d0da: OUTPUT: «16␤»

[20:12] <timotimo> m: say 15.4.floor(2)

[20:12] <camelia> rakudo-moar d8d51d0da: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[20:12] <timotimo> hm, that could conceivably have that parameter

[20:20] *** Ven` joined
[20:21] *** p6bannerbot sets mode: +v Ven`

[20:22] <b2gills> regreg: With the SLang feature, Perl 6 is the superset of all programming languages. (It is not part of the spec yet, but does work in Rakudo)

[20:22] <regreg> b2gills, what does SLang do?

[20:23] <timotimo> basically lets you change or completely replace the parser for a given scope

[20:25] *** espadrine left
[20:25] *** kylese left
[20:26] *** Ven` left
[20:29] <xinming> I know when can have something like,  my @a; my $iter = sub { @a[$++]; };  for @b { my $item = $iter(); ... };

[20:29] <xinming> Is there something better idiom in perl6 for this?

[20:30] <timotimo> you can @a[$++] xx 10

[20:30] <timotimo> m: my @a = <a b c x y z g h i>; .say for @a[$++] xx @a;

[20:30] <camelia> rakudo-moar d8d51d0da: OUTPUT: «a␤b␤c␤x␤y␤z␤g␤h␤i␤»

[20:31] <timotimo> ^- using @a as the RHS of xx will use its length

[20:31] <xinming> I mean the $iter thing

[20:31] <timotimo> but there's also .iterator and .pull-one

[20:31] <xinming> not the xx thing.

[20:31] <xinming> I'll check about .iterator

[20:31] <timotimo> m: my @a = <1 2 3 4 5>; my $iter = @a.iterator; for ^10 { say $iter.pull-one }

[20:31] <camelia> rakudo-moar d8d51d0da: OUTPUT: «1␤2␤3␤4␤5␤␤␤␤␤␤»

[20:31] <jnthn> Maybe see also gather/take

[20:32] <xinming> pull-one is what I want.

[20:33] <b2gills> It seems as if you are trying to do iterators like you would in Python.

[20:33] <xinming> I never used python :-)

[20:34] <xinming> This is how I do something in perl5

[20:34] <timotimo> fwiw, your code also works as you wrote it, doesn't it?

[20:34] <timotimo> you may want to have a make-iter sub that returns that sub you have in your code

[20:34] <timotimo> so that you can "start from the beginning" if you want

[20:35] <xinming> timotimo: I know that'll work, Just try to do it the perl6 way.

[20:35] <jnthn> The Perl 6 ways is almost never to call pull-one yourself :)

[20:36] <timotimo> you can use Seq, either @a.Seq or Seq.from-iterator

[20:36] <jnthn> I can think of like 1 or 2 times in all the (non-core) Perl 6 I've written when it was the best way to do something :)

[20:36] <timotimo> and loop over that

[20:36] <jnthn> Indeed, typically one has a Seq or some other iterable data source and just does a `for` or `map` or one of the numerous other list processing methods

[20:39] <xinming> timotimo: Can you please give an example of @a.Seq?

[20:39] <b2gills> A Seq is just a wrapper around an Iterator

[20:40] <b2gills> m: my @a = 1,2,3,4; for @a.Seq { .say }

[20:40] <camelia> rakudo-moar d8d51d0da: OUTPUT: «1␤2␤3␤4␤»

[20:41] <b2gills> m: my @a = 1,2,3,4; {my \iterator = @a.Seq.iterator; loop {m\ } }

[20:41] <camelia> rakudo-moar d8d51d0da: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Use of a closing delimiter for an opener is reserved␤at <tmp>:1␤------> 3y \iterator = @a.Seq.iterator; loop {m\ 7⏏5} }␤»

[20:42] <b2gills> m: my @a = 1,2,3,4; {my \iterator = @a.Seq.iterator; loop {my  \pulled = iterator.pull-one; last if pulled =:= IterationEnd; pulled.say } }

[20:42] <camelia> rakudo-moar d8d51d0da: OUTPUT: «1␤2␤3␤4␤»

[20:43] <b2gills> I prefer `for @a.Seq { .say }` over that last one, there is a lot less to get wrong

[20:44] <b2gills> Also there is `.grep` and `.map` that works on Seq

[20:44] <jnthn> for @a.Seq { } is just a longer way to write for @a { } though :)

[20:45] <xinming> m: say 15.4.floor(2)

[20:45] <camelia> rakudo-moar d8d51d0da: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[20:45] <xinming> m: say 15.4.floor;

[20:45] <camelia> rakudo-moar d8d51d0da: OUTPUT: «15␤»

[20:45] <timotimo> fwiw

[20:45] <timotimo> m: say (15.4 - 1).round(2)

[20:45] <camelia> rakudo-moar d8d51d0da: OUTPUT: «14␤»

[20:45] <timotimo> ^- that's just like how you can turn round into floor by subtracting 0.5 from anything

[20:46] <xinming> actually, I'm trying to get     15.4 ? 3   return's 15

[20:46] <timotimo> m: say (15.4 - 1.5).round(3)

[20:46] <camelia> rakudo-moar d8d51d0da: OUTPUT: «15␤»

[20:46] <xinming> 15.4 - (15.4 % 3)

[20:46] <xinming> m: 15.4 - (15.4 % 3)

[20:46] <camelia> rakudo-moar d8d51d0da: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "-" in expression "15.4 - (15.4 % 3)" in sink context (line 1)␤»

[20:46] <xinming> m: (15.4 - (15.4 % 3)).say;

[20:47] <camelia> rakudo-moar d8d51d0da: OUTPUT: «15␤»

[20:47] <xinming> m: (15.4 - (15.4 % 2)).say

[20:47] <camelia> rakudo-moar d8d51d0da: OUTPUT: «14␤»

[20:47] <xinming> I'm thinking wether there is op for this.

[20:47] <xinming> :-)

[20:47] <xinming> IIRC, there is one already.

[20:47] <b2gills> m: say pi.round( 0.0001 )

[20:47] <camelia> rakudo-moar d8d51d0da: OUTPUT: «3.1416␤»

[20:49] <b2gills> m: say 15.round(7)

[20:49] <camelia> rakudo-moar d8d51d0da: OUTPUT: «14␤»

[20:55] *** phogg joined
[20:55] *** phogg left
[20:55] *** phogg joined
[20:55] *** p6bannerbot sets mode: +v phogg

[20:55] *** p6bannerbot sets mode: +v phogg

[20:57] *** Ven` joined
[20:57] *** p6bannerbot sets mode: +v Ven`

[21:01] *** Ven` left
[21:08] *** HaraldJoerg left
[21:12] *** kerframil joined
[21:12] *** p6bannerbot sets mode: +v kerframil

[21:15] *** Kaiepi left
[21:15] *** Kaiepi joined
[21:16] *** p6bannerbot sets mode: +v Kaiepi

[21:33] *** Ven` joined
[21:34] *** p6bannerbot sets mode: +v Ven`

[21:38] *** Ven` left
[22:03] *** gurmble joined
[22:03] *** p6bannerbot sets mode: +v gurmble

[22:04] *** grumble left
[22:04] *** gurmble is now known as grumble

[22:09] *** Ven` joined
[22:10] *** p6bannerbot sets mode: +v Ven`

[22:14] *** Ven` left
[22:15] <Xliff> m: my $a = 15.4; say ($a - ($a % 3)).round(3)

[22:15] <camelia> rakudo-moar d8d51d0da: OUTPUT: «15␤»

[22:15] <Xliff> That way you don't need the naked 1.4

[22:15] <Xliff> m: my $a = 16.6; say ($a - ($a % 3)).round(3)

[22:15] <camelia> rakudo-moar d8d51d0da: OUTPUT: «15␤»

[22:15] <Xliff> xinming ^^

[22:16] <Xliff> You can turn that into a sub fairly easily.

[22:17] <Xliff> m: sub infix:<div2> ($a, $b) { ($a - ($a % $b)).round($b) }; (16.6 div2 3).say

[22:17] <camelia> rakudo-moar d8d51d0da: OUTPUT: «15␤»

[22:18] <Summertime> m: say ('x-0'..*)[20]; say ('x0'..*)[20];

[22:18] <camelia> rakudo-moar d8d51d0da: OUTPUT: «x-20␤z0␤»

[22:32] <Geth> ¦ doc: 3859d61375 | Coke++ | doc/Language/101-basics.pod6

[22:32] <synopsebot> Link: https://doc.perl6.org/language/101-basics

[22:32] <Geth> ¦ doc: whitespace

[22:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/3859d61375

[22:46] *** Ven` joined
[22:46] *** p6bannerbot sets mode: +v Ven`

[22:46] *** developers joined
[22:46] *** developers left
[22:49] *** CGML7 joined
[22:50] *** p6bannerbot sets mode: +v CGML7

[22:50] <CGML7> 8,8           0,0       1,1            0,0       8,8             

[22:50] <CGML7> 8,8             0,0    1,1 0,0            1,1 0,0     8,8              

[22:50] <CGML7> 8,8               0,0                   12,12  8,8              

[22:50] <CGML7> 8,8              12,12    0,0                12,12   8,8             

[22:50] *** Ven` left
[22:50] <CGML7> 8,8            12,12      0,0                 12,12        8,8       

[22:50] <CGML7> 8,8          12,12        0,0                12,12           8,8     

[22:50] <CGML7> 8,8       12,12        1,1  12,12  0,0              12,12             8,8    

[22:50] <CGML7> 8,8      12,12        1,1  12,12    0,0           12,12                 8,8  

[22:50] <CGML7> 8,8     12,12                 0,0      12,12                    8,8  

[22:50] <CGML7> 8,8     12,12                 11,11      12,12            1,1   12,12     8,8  

[22:50] <CGML7> 8,8     12,12    1,1 12,12            11,11  0,0 11,11   12,12           1,1   12,12       8,8 

[22:51] <CGML7> 8,8    12,12     1,1  12,12           11,11      12,12           1,1  12,12         

[22:51] <CGML7> 8,8   12,12       1,1 12,12           11,11  0,0 11,11   12,12           1,1 12,12          

[22:51] <CGML7> 8,8   12,12       1,1 12,12           11,11      12,12           1,1  12,12         

[22:51] <CGML7> 1,0 kloeri: and I'm tired of you guys                

[22:51] <CGML7> 1,0 thinking you can ban staff                       

[22:51] <CGML7> 1,0 when we complain about your spam                 

[22:55] <Xliff> m: say ('x0'..*)[^5];

[22:55] <camelia> rakudo-moar d8d51d0da: OUTPUT: «(x0 x1 x2 x3 x4)␤»

[22:55] <Xliff> m: say ('x0'..*)[^14];

[22:55] <camelia> rakudo-moar d8d51d0da: OUTPUT: «(x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 y0 y1 y2 y3)␤»

[22:56] <Xliff> m: say 16.6 div 3

[22:56] <camelia> rakudo-moar d8d51d0da: OUTPUT: «Cannot resolve caller infix:<div>(Rat, Int); none of these signatures match:␤    (Int:D \a, Int:D \b)␤    (int $a, int $b --> int)␤  in block <unit> at <tmp> line 1␤␤»

[22:56] *** CGML7 left
[22:56] <Xliff> m: say (16.6 div 3)

[22:56] <camelia> rakudo-moar d8d51d0da: OUTPUT: «Cannot resolve caller infix:<div>(Rat, Int); none of these signatures match:␤    (Int:D \a, Int:D \b)␤    (int $a, int $b --> int)␤  in block <unit> at <tmp> line 1␤␤»

[22:56] <Xliff> m: say (16.6 / 3)

[22:56] <camelia> rakudo-moar d8d51d0da: OUTPUT: «5.533333␤»

[22:56] <Xliff> m: say (16.6 / 3).floor

[22:56] <camelia> rakudo-moar d8d51d0da: OUTPUT: «5␤»

[22:56] <Xliff> m: say (16.6 % 3)

[22:56] <camelia> rakudo-moar d8d51d0da: OUTPUT: «1.6␤»

[22:57] <Xliff> m: say (16.6 % 3.0)

[22:57] <camelia> rakudo-moar d8d51d0da: OUTPUT: «1.6␤»

[22:57] <Xliff> m: say (16.6 div 3.0)

[22:57] <camelia> rakudo-moar d8d51d0da: OUTPUT: «Cannot resolve caller infix:<div>(Rat, Rat); none of these signatures match:␤    (Int:D \a, Int:D \b)␤    (int $a, int $b --> int)␤  in block <unit> at <tmp> line 1␤␤»

[22:57] *** lizmat_ joined
[22:58] <Xliff> m: say ((16.6).Rat div 3.Rat)

[22:58] <camelia> rakudo-moar d8d51d0da: OUTPUT: «Cannot resolve caller infix:<div>(Rat, Rat); none of these signatures match:␤    (Int:D \a, Int:D \b)␤    (int $a, int $b --> int)␤  in block <unit> at <tmp> line 1␤␤»

[22:58] *** p6bannerbot sets mode: +v lizmat_

[22:58] <Xliff> m: my Rat $a = 16.6; my Rat $b = 3; say ($a div $b)

[22:58] <camelia> rakudo-moar d8d51d0da: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot assign a literal of type Int (3) to a variable of type Rat. You can declare the variable to be of type Real, or try to coerce the value with 3.Rat or Rat(3), or just write the value as 3.0␤at <…»

[22:58] <Xliff> m: my Rat $a = 16.6; my Rat $b = 3.0; say ($a div $b)

[22:58] <camelia> rakudo-moar d8d51d0da: OUTPUT: «Cannot resolve caller infix:<div>(Rat, Rat); none of these signatures match:␤    (Int:D \a, Int:D \b)␤    (int $a, int $b --> int)␤  in block <unit> at <tmp> line 1␤␤»

[22:58] <Xliff> m: say 15 div 3;

[22:58] <camelia> rakudo-moar d8d51d0da: OUTPUT: «5␤»

[22:59] <Xliff> Why doesn't div coerce FP types to Init?

[22:59] <Xliff> s/Init/Int

[23:01] *** lizmat left
[23:22] *** Ven` joined
[23:23] *** p6bannerbot sets mode: +v Ven`

[23:27] *** Ven` left
[23:33] *** benjikun joined
[23:33] *** Kaiepi left
[23:33] *** p6bannerbot sets mode: +v benjikun

[23:38] *** Kaiepi joined
[23:38] *** p6bannerbot sets mode: +v Kaiepi

[23:45] *** Actualeyes left
[23:52] *** ldunn14 joined
[23:52] *** ldunn14 left
[23:58] *** Ven` joined
[23:59] *** p6bannerbot sets mode: +v Ven`

