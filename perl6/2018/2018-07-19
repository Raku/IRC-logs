[00:00] *** huggable joined
[00:00] *** ChanServ sets mode: +v huggable

[00:00] *** fbynite joined
[00:03] *** wamba left
[00:09] <donpdonp> isnt there a way to do "A" * 5 => "AAAAA"

[00:09] <MasterDuke> m: say "A" x 5

[00:09] <camelia> rakudo-moar a847abe52: OUTPUT: «AAAAA␤»

[00:09] <donpdonp> haha thx

[00:10] <MasterDuke> x repeats into a string, xx repeats into a list

[00:10] <donpdonp> m: MIME::Base64.encode("Z")

[00:10] <camelia> rakudo-moar a847abe52: OUTPUT: «Could not find symbol '&Base64'␤  in block <unit> at <tmp> line 1␤␤»

[00:11] <donpdonp> so im seeing some weirdness that I dont know if base64 is supposed to work this way or not

[00:11] <donpdonp> after a certain string length, there are literal newlines in the output

[00:11] <timotimo> yeah i think it tends to do that in some cases

[00:11] <timotimo> but there should be a parameter for that

[00:12] <Juerd> Base64 is specified to have crlf line endings

[00:12] <Juerd> https://2rfc.net/2045#2.1

[00:13] <Juerd> It's MIME, after all.

[00:13] <Juerd> Also, I found this when googling: https://github.com/perl6/Perl6-MIME-Base64/issues/10

[00:13] <Juerd> So apparently it does correctly implement line endings, but the wrong ones :)

[00:13] <donpdonp> ah base64.encode("payload", oneline => True)

[00:15] <donpdonp> im at OSCON in portland oregon and there is a perl group booth

[00:15] <donpdonp> wih perl6 stickers. \o/

[00:16] <donpdonp> and a lanyard tag https://donp.org/i/vnDe.jpg

[00:18] <Kaiepi> one thing i love about perl 6 is it makes programming so easy

[00:18] <Kaiepi> have you ever tried to write ipc between two different languages in node?

[00:19] <Kaiepi> it's callback hell

[00:20] <timotimo> they do have async functions now

[00:21] <Kaiepi> yeah, but not with stuff like Net

[00:22] <Kaiepi> it could be so much better a language if you could use promises and async functions with the net modules

[00:23] <Kaiepi> that being said it still doesn't do concurrency

[00:23] <Kaiepi> well

[00:23] <Kaiepi> it sort of does

[00:23] <Kaiepi> the cluster module's technically multithreaded but it only uses one thread at a time

[00:24] <Kaiepi> the only multithreading in node's libuv related

[00:26] <Geth> Swapped META.info → META6.json in 5 dists in https://github.com/perl6/ecosystem/commit/4cb4da6b8f

[00:27] *** Zoffix joined
[00:27] <Zoffix> donpdonp: FWIW, you can write `oneline => True` as just `:oneline`  There's a whole ton of such shortcuts for colonpairs: https://rakudo.party/post/Perl-6-Colonpairoscopy

[00:28] * donpdonp giggles at Colonpairoscopy

[00:28] <donpdonp> Zoffix: thx.

[00:34] *** markoong left
[00:38] *** lizmat left
[00:40] *** fake_space_whale joined
[00:44] *** Zoffix left
[00:52] *** daxim joined
[00:53] *** Zoffix joined
[00:53] <Zoffix> m: say DateTime.new('2016-12-31T23:00:00-01:00').in-timezone: 0

[00:53] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «2017-01-01T00:00:00Z␤»

[00:53] <Zoffix> This is wrong, innit? It should be 2016-12-31T23:59:60Z

[00:55] <Zoffix> m: say DateTime.new('2016-12-31T23:00:00-01:00').in-timezone: -1

[00:55] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «2016-12-31T23:59:59-00:00␤»

[00:56] <Zoffix> m: say DateTime.new('2016-12-31T23:00:00-01:00') <=> DateTime.new('2017-01-01T00:00:00Z')

[00:56] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «Same␤»

[00:58] *** [particle] left
[01:06] *** raschipi joined
[01:07] *** jameslenz joined
[01:09] *** raschipi left
[01:10] <Zoffix> Is TPF an ISO member? I recall it was a memeber of some org or something... I want a free copy of ISO 8601 and I don't see the free "draft" versions they usually got

[01:11] *** jameslenz left
[01:11] * Zoffix spots https://www.loc.gov/standards/datetime/iso-tc154-wg5_n0039_iso_wd_8601-2_2016-02-16.pdf

[01:16] <Zoffix> don't say nothing about it

[01:20] <Zoffix> Aha: https://www.cl.cam.ac.uk/~mgk25/iso-time.html

[01:20] <Zoffix> "ISO 8601 does not define whether 09:00 refers to the exact end of the ninth hour of the day or the period from 09:00 to 09:01 or anything else."

[01:20] <Zoffix> I take it to mean "anything goes"

[01:22] <tbrowder_> Zoffix: wikipedia has a prettiy detailed entry on iso 8601

[01:23] <Zoffix> Doesn't have any info for my question.

[01:23] <Zoffix> Also unrealiable.

[01:25] <Juerd> What is your question anyway? :)

[01:26] <Zoffix> Oh, I thought I asked it...

[01:26] <Zoffix> Juerd: Is 2016-12-31T23:00:00-01:00 the same date as 2017-01-01T00:00:00Z or is 2016-12-31T23:59:60Z the righter answer?

[01:26] <benjikun> What would you guys think about having a user-help discussion board for Perl6? Something similar to Golang's https://forum.golangbridge.org/

[01:26] * Juerd *hates* the T in iso datetimes :(

[01:26] * Juerd tries to parse visually.

[01:27] <benjikun> It could all be authenticated through GitHub's oauth account integration thingymabob

[01:27] <Zoffix> Juerd: in other words, how does the timezone diff calculated when one timezone has a leapsecond, but the other doesn't, yet

[01:29] <Juerd> Since the other timezone is defined through GMT, I thought it would get 01:59:60 for +0200, etc.

[01:29] <Juerd> I haven't verified this at all, it's an assumption.

[01:30] <Zoffix> m: say DateTime.new('2016-12-31T23:59:60Z').in-timezone: -3600

[01:30] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «2016-12-31T22:59:60-01:00␤»

[01:30] <Zoffix> This gotta be wrong...

[01:30] <Juerd> "On clocks that display local time tied to UTC, the leap second may be inserted at the end of some other hour (or half-hour or quarter-hour), depending on the local time zone." https://en.wikipedia.org/wiki/Leap_second

[01:30] <Juerd> Doesn't sound very wrong then

[01:31] *** MasterDuke left
[01:31] <Zoffix> [citation needed]? :)

[01:32] <Juerd> In this case, the wikipedia article *is* the citation ;)

[01:32] <Zoffix> I mean, I don't see a citation reference for that particular statement in that article

[01:33] <Zoffix> I don't want some Joe's guestimations. I want Real Legit™ references

[01:34] <Juerd> Understood and agreed

[01:34] <Juerd> But I don't have any :)

[01:35] *** kerframil joined
[01:36] <benjikun> "ally, there are some that use half-hour or even quarter-hour offsets (or even some odd offsets)"

[01:36] <benjikun> **Actually,

[01:36] <benjikun> https://www.w3.org/International/wiki/WorkingWithTimeZones

[01:36] <Zoffix> Yey! Win: RFC7164: "Leap seconds do not respect local time and always occur at the end of the UTC day"

[01:36] <Zoffix> ZofBot: now I can eat!

[01:36] *** Zoffix left
[01:37] <benjikun> lol

[01:39] <SmokeMachine> Im thinking of sending a PR to rakudo that adds 4 methods on Any and 4 methods on Seq...

[01:40] <SmokeMachine> to make this possible: https://www.irccloud.com/pastebin/PTrXcS4E/

[01:40] <SmokeMachine> what do you guys think?

[01:41] <Juerd> SmokeMachine: I love it, but why on Any?

[01:41] *** fbynite left
[01:41] <benjikun> I like the individual ideas, but how does adding them on top of eachother like that make sense

[01:42] <SmokeMachine> Juerd: if not on Any, I should do `^10 .Seq.take-while...`

[01:42] <benjikun> `^10.take-while(* < 3)` would be (0, 1, 2), and then ignore-until would be applied to (0, 1, 2), right?

[01:42] <benjikun> weird how you can stack them like that

[01:44] <Juerd> SmokeMachine: Iterable?

[01:45] <SmokeMachine> Juerd: yes, good idea!

[01:46] <Juerd> Also, how can you find out all of the types a value is/does?

[01:47] <benjikun> `(^Inf).take-while(* > 0)`

[01:47] <benjikun> lol

[01:47] <Juerd> benjikun: >=

[01:47] *** vrurg joined
[01:48] <benjikun> both infinity :3

[01:48] <SmokeMachine> https://www.irccloud.com/pastebin/D9BpfrQT

[01:49] <benjikun> Still weird to me how it applies them one after another but don't feed into eachother

[01:49] <SmokeMachine> Juerd: it’s already working...

[01:50] <Juerd> SmokeMachine: I'm not sure what you're responding to now :)

[01:52] <SmokeMachine> Juerd: sorry I had read something and understood something else

[01:57] <timotimo> https://imgur.com/P3x44wy

[01:59] <Juerd> Apart from the shade of blue, that looks very 1994.

[01:59] <timotimo> not older than me, that's very good.

[01:59] <SmokeMachine> But it’s not using nqp... :( I don’t know how fast it is...

[01:59] <Juerd> Are you sure that's a web safe color? :)

[02:00] <timotimo> i'm hoping i can get a design-capable person to look over it

[02:00] <Juerd> https://en.wikipedia.org/wiki/Web_colors#Web-safe_colors  for those fortunate enough not to have experienced this horror.

[02:00] <timotimo> once it's kind of usable

[02:00] <Juerd> timotimo: Simply removing the tiled background does a lot :)

[02:00] <Juerd> Anyhow, what am I looking at?

[02:00] <timotimo> https://www.toptal.com/designers/subtlepatterns/ - will you recommend one? :)

[02:01] *** Sgeo joined
[02:01] <timotimo> it's a part of the new moarvm profiler frontend that i'm developing for a TPF grant

[02:01] <Juerd> I'd recommend using a solid color instead :)

[02:02] <timotimo> there'll be labels for the two graphs; the upper one is how long each gc run took, the lower is how far apart they were

[02:02] <Juerd> Ah!

[02:02] *** molaf left
[02:02] <Juerd> How many variables did you have? I'm amazed a gc run can take as long as 100 ms!

[02:02] <timotimo> i don't actually remember what code that was

[02:04] <timotimo> (the start time lacked the divide-by-1000 part)

[02:05] <timotimo> i think i'll also put reference lines in for the average time

[02:05] <timotimo> and each line gets its own unique combination of 3 emoji that identifies it across all profiles ever taken

[02:06] <timotimo> then mousing over the bars should make a rippling wave effect through the graphs

[02:06] <timotimo> but first i'll go to bed

[02:06] <benjikun> night night timotimo

[02:10] *** leedo joined
[02:13] *** blackberry9900 joined
[02:14] <xi-> I'm having a weird issue with the trim method

[02:14] <xi-> > $path.trim('/');

[02:14] <xi-> Too many positionals passed; expected 1 argument but got 2

[02:14] <xi-> on 2018.04.1

[02:15] *** molaf joined
[02:17] *** BlackBerry9999 joined
[02:18] <lookatme> xi-, $path.trim()

[02:18] <xi-> but I don't want to trim spaces

[02:19] *** blackberry9900 left
[02:20] <lookatme> m: my $path = "/root/foo/"; $path ~~ s{/$}=""; say $path;

[02:20] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «5===SORRY!5===␤Unrecognized regex metacharacter / (must be quoted to match literally)␤at <tmp>:1␤------> 3my $path = "/root/foo/"; $path ~~ s{7⏏5/$}=""; say $path;␤Unrecognized regex metacharacter $ (must be quoted to match literally…»

[02:20] <lookatme> m: my $path = "/root/foo/"; $path ~~ s{"/"$}=""; say $path;

[02:20] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «/root/foo␤»

[02:21] <xi-> m: my $path = '/root/foo/; say $path.trim('/');

[02:21] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)␤at <tmp>:1␤------> 3path = '/root/foo/; say $path.trim('/');7⏏5<EOL>␤    expecting …»

[02:21] <xi-> m: my $path = '/root/foo/'; say $path.trim('/');

[02:21] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[02:22] <lookatme> xi-, the trim not accept additional arguments

[02:22] <xi-> why did I think it did

[02:23] <lookatme> yeah, why do you think it did ?

[02:23] <lookatme> https://docs.perl6.org/type/Str#method_trim

[02:24] <warriors> does $path.subst("/","",:g) do hat u want

[02:24] <warriors> what

[02:25] <xi-> this doese $path ~~ s/^\/(.*)\/$/~$0/

[02:25] <xi-> actually it would if I added a few question marks

[02:25] <lookatme> warriors, he just want remove last /

[02:26] <xi-> no, first and last

[02:26] <Geth> ¦ doc: d8c13a74a5 | (Zoffix Znet)++ | doc/Type/DateTime.pod6

[02:26] <Geth> ¦ doc: Document .in-timezone's behaviour with UTC seconds

[02:26] <Geth> ¦ doc: 

[02:26] <Geth> ¦ doc: Per RFC 7164: https://tools.ietf.org/html/rfc7164#section-3

[02:26] <Geth> ¦ doc: Prop spec: https://github.com/perl6/roast/commit/4f83a57f2037fb73c38bed069ac341f61c4ef13a

[02:26] <synopsebot> Link: https://doc.perl6.org/type/DateTime

[02:26] <Geth> ¦ doc: POV: exited mostly complete in Rakudo for ages, except for a small rounding(?) bug:

[02:26] <Geth> ¦ doc: R#2097 https://github.com/rakudo/rakudo/issues/2097

[02:26] <synopsebot> R#2097 [open]: https://github.com/rakudo/rakudo/issues/2097 [6.d review][easy to resolve][good first issue][tests committed] Cannot parse valid leap-second dates when in weird timezones

[02:26] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d8c13a74a5

[02:27] *** Zoffix joined
[02:28] <Zoffix> xi-: FWIW, if you're working with proper paths, we have IO::Path type that handles all the dirty work for you

[02:28] <Zoffix> (like differentiating between `/` and `/` with combiners on it :))

[02:29] <xi-> they were proper paths before I started manipulating them, I'm trying to extract a hash from the middle of it

[02:30] <Zoffix> ok :)

[02:32] <Zoffix> m: say "/root/foo/".substr: 1, *-1;

[02:32] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «root/foo␤»

[02:32] <Zoffix> m: say "/root/foo/".subst: :g, /^｢/｣|｢/｣$/, '';

[02:32] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «root/foo␤»

[02:34] <Zoffix> m: say "/root/34125wetsdgsdg45e6ywesryf/foo/".IO.parent.basename

[02:34] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «34125wetsdgsdg45e6ywesryf␤»

[02:35] *** fake_space_whale left
[02:36] <Zoffix> SmokeMachine: usually stuff that works on Seqs works on Lists, and is also stuck into Any to facilitate the non-Iterable-stuff-is-a-1-el-list semantics. So sometimes just an Any candidate is enough

[02:36] <Zoffix> SmokeMachine: and .ignore-until is probably better named .skip-until, to match with the .skip method we already have

[02:37] <Zoffix> Other than proliferation of core methods, +1 on that. I like it more than .toggle

[02:39] <Zoffix> SmokeMachine: .take-* might not be a very good name either BTW, because we have .take, which emits a CX::Take control exception, so it'd be weird to have another .take-* method that does something totally different than CX::Take stuff

[02:41] <Zoffix> .oO( .pull-until / .skip-until / .pull-while / .skip-while )

[02:41] <Zoffix> to match with .pull-one on Iterators vOv

[02:41] *** Zoffix left
[02:42] *** itaipu left
[02:58] *** Ven` joined
[03:00] <warriors> IO::Path.new($path).cleanup.Str :)

[03:02] *** Ven` left
[03:04] <warriors> m: IO::Path.new("/root/foo/").cleanup.Str

[03:04] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «IO::Path is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at <tmp> line 1␤␤»

[03:04] <warriors> m: say IO::Path.new("/root/foo/").cleanup.Str

[03:04] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «IO::Path is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at <tmp> line 1␤␤»

[03:06] <warriors> anyway why does IO::Path.new("/root/foo/   ").cleanup.Str ; return /root/foo/ , while IO::Path.new("/root/foo").cleanup.Str  return /root/foo

[03:07] *** jameslenz joined
[03:08] *** Zoffix joined
[03:08] <Zoffix> warriors: .Str on IO::Path just returns the $.path arg you gave it. And those two paths are also equivalent

[03:08] <warriors> yes but the stringification is different

[03:10] <Zoffix> warriors: yes, because you gave different $.path attributes. 

[03:10] <Zoffix> .absolute/.relative methods are the proper way to stringify IO::Path objects, tho I think they don't do anything special with the trailing /

[03:11] <Zoffix> Ah, no they do clean it up :)

[03:11] <Zoffix> *phew* :)

[03:11] <Zoffix> m: .absolute.say for "/tmp/".IO, "/tmp//".IO, "/tmp".IO

[03:11] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «/tmp␤/tmp␤/tmp␤»

[03:12] *** jameslenz left
[03:12] <Zoffix> m: .relative.say for "/tmp/".IO, "/tmp//".IO, "/tmp".IO

[03:12] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «../../tmp␤../../tmp␤../../tmp␤»

[03:13] <Zoffix> (.Str sucks for historical reasons)

[03:14] <SmokeMachine> Zoffix: do you think its better now? https://www.irccloud.com/pastebin/I4t8GSSA/

[03:14] <warriors> they are not equivilant path , IO::Path.new("/root/foo/   ") treats the extra two space as the basename 

[03:14] <warriors> :)

[03:14] <Zoffix> m: .absolute.say for "/tmp/  ".IO, "/tmp//".IO, "/tmp".IO

[03:14] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «/tmp/  ␤/tmp␤/tmp␤»

[03:14] <Zoffix> right, I missed that whitespace in your original message

[03:15] <Zoffix> SmokeMachine: oh no, it's terrible :( while is `.pull-while(/^en0/)` needed?

[03:16] <Zoffix> m: my $x = 42; until ++$x == 45 { say "skipping $x" }

[03:16] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «skipping 43␤skipping 44␤»

[03:16] <Zoffix> SmokeMachine: like, "until" suggests the value that matches wouldn't actually be skipped.

[03:16] <Zoffix> SmokeMachine: ah, OK, now I get it

[03:17] <SmokeMachine> Zoffix: or `.skip-until`do not possible get the /^en0/ line, or I have to get it on `pull-while` too...

[03:17] <SmokeMachine> Zoffix: does that make sense?

[03:17] <Zoffix> SmokeMachine: yeah

[03:17] <SmokeMachine> your answer is better than mine...

[03:17] *** Xliff joined
[03:17] <Xliff> \o

[03:18] <Xliff> substr-rw is described as: method substr-rw($from, $length?) in the docs.

[03:18] <Xliff> What is the default value for $length?

[03:18] <SmokeMachine> Zoffix: This works too https://www.irccloud.com/pastebin/fq5Dnsp1/

[03:18] <Zoffix> Xliff: I'd guess same as .substr; "until the end of str"

[03:19] *** BlackBerry9999 left
[03:19] <Zoffix> SmokeMachine: yeah, but it still sucks in that you have to specify the same condition twice basically

[03:19] <Xliff> m: my $a = "Abc"; $a.substr-rw(2) = 'd'; $a.say

[03:19] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «Abd␤»

[03:19] <Xliff> m: my $a = "Abc"; $a.substr-rw(1) = 'd'; $a.say

[03:19] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «Ad␤»

[03:19] <Xliff> m: my $a = "Abc"; $a.substr-rw(0) = 'd'; $a.say

[03:19] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «d␤»

[03:19] <Xliff> OK. Thanks.

[03:19] <Zoffix> s: ($ = "x"), 'substr-rw'

[03:19] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/b30800c8e/src/core/Cool.pm6#L158

[03:19] <Xliff> That should bve specified in the docs.

[03:19] <Xliff> I'll pop an issue in and fix it.

[03:19] <Zoffix> s: ($ = "x"), 'substr-rw', \(1)

[03:19] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/b30800c8e/src/core/Str.pm6#L2783

[03:20] <Zoffix> Xliff: at least in Rakudo, the default is `Inf`

[03:20] <Zoffix> SmokeMachine: *shrug* maybe 4 methods ain't a good idea after all

[03:21] <SmokeMachine> Zoffix: in my first version `.skip-until` wasn't skipping the last line too (the one that matcher with the condition), so the `.pull-while` didn't need to get it...

[03:21] <Zoffix> SmokeMachine: but I'm not the king of the hill. Ask on the Issue and have devs comment :)

[03:21] * Zoffix goes to bed

[03:21] *** Zoffix left
[03:22] <SmokeMachine> .tell Zoffix I like your opinion... :)

[03:22] <yoleaux> SmokeMachine: I'll pass your message to Zoffix.

[03:22] *** Zoffix joined
[03:23] <Xliff> Issue in... self-assigning.

[03:23] <Geth> ¦ doc: Xliff self-assigned substr-rw is missing an explanation into the default value of $length https://github.com/perl6/doc/issues/2187

[03:24] <Zoffix> Was gonna say a no-arg versions of those methods could skip/pull 1 item and then you could write `.say for lines.skip-until(/^en0/).pull-while.pull-while.pull-while(/^\s+/)` but now that I look at it it kinda looks weird (like a typo basically) and has this non-obvious default in it :)

[03:24] <yoleaux> 03:22Z <SmokeMachine> Zoffix: I like your opinion... :)

[03:24] *** Zoffix left
[03:24] <Xliff> my $t = <BINARY NCHAR>.ROLL; $t.substr-rw( (^$t.chars).roll, 1 ) = 'z'; $t.say

[03:24] <Xliff> m: my $t = <BINARY NCHAR>.ROLL; $t.substr-rw( (^$t.chars).roll, 1 ) = 'z'; $t.say

[03:24] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «No such method 'ROLL' for invocant of type 'List'␤  in block <unit> at <tmp> line 1␤␤»

[03:25] <Xliff> m: my $t = <BINARY NCHAR>.roll; $t.substr-rw( (^$t.chars).roll, 1 ) = 'z'; $t.say

[03:25] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «BINzRY␤»

[03:25] <Xliff> m: my $t = <BINARY NCHAR>.roll; $t.substr-rw( (^$t.chars).roll, 1 ) = 'z'; $t.say

[03:25] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «NCHzR␤»

[03:25] <Xliff> m: my $t = <BINARY NCHAR>.roll; $t.substr-rw( (^$t.chars).roll, 1 ) = 'z'; $t.say

[03:25] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «NCHzR␤»

[03:25] <Xliff> m: my $t = <BINARY NCHAR>.roll; $t.substr-rw( (^$t.chars).roll, 1 ) = 'z'; $t.say

[03:25] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «BINAzY␤»

[03:25] <Xliff> m: my $t = <BINARY NCHAR>.pick; $t.substr-rw( (^$t.chars).pick, 1 ) = 'z'; $t.say

[03:25] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «zINARY␤»

[03:25] <Xliff> m: my $t = <BINARY NCHAR>.pick; $t.substr-rw( (^$t.chars).pick, 1 ) = 'z'; $t.say

[03:25] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «NCHAz␤»

[03:25] <Xliff> m: my $t = <BINARY NCHAR>.pick; $t.substr-rw( (^$t.chars).pick, 1 ) = 'z'; $t.say

[03:25] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «BINAzY␤»

[03:25] <Xliff> m: my $t = <BINARY NCHAR>.pick; $t.substr-rw( (^$t.chars).pick, 1 ) = 'z'; $t.say

[03:25] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «BINzRY␤»

[03:28] *** eliasr left
[03:29] <Xliff> m: my $t = <BINARY NCHAR>.pick; $t.substr-rw( (^$t.chars).pick, 1 ) = ('a'..'z').pick; $t.say

[03:29] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «NeHAR␤»

[03:29] <Xliff> m: my $t = <BINARY NCHAR>.pick; $t.substr-rw( (^$t.chars).pick, 1 ) = ('a'..'z').pick; $t.say

[03:29] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «NCfAR␤»

[03:29] <Xliff> m: my $t = <BINARY NCHAR>.pick; $t.substr-rw( (^$t.chars).pick, 1 ) = ('a'..'z').pick; $t.say

[03:29] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «NCxAR␤»

[03:29] <Xliff> m: my $t = <BINARY NCHAR>.pick; $t.substr-rw( (^$t.chars).pick, 1 ) = ('a'..'z').pick; $t.say

[03:29] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «NCkAR␤»

[03:29] <Xliff> m: my $t = <BINARY NCHAR>.pick; $t.substr-rw( (^$t.chars).pick, 1 ) = ('a'..'z').pick; $t.say

[03:29] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «NCuAR␤»

[03:29] <Xliff> m: my $t = <BINARY NCHAR>.pick; $t.substr-rw( (^$t.chars).pick, 1 ) = ('a'..'z').pick; $t.say

[03:29] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «BIaARY␤»

[03:29] <Xliff> m: my $t = <BINARY NCHAR>.pick; $t.substr-rw( (^$t.chars).pick, 1 ) = ('a'..'z').pick; $t.say

[03:29] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «BIeARY␤»

[03:29] <Xliff> m: my $t = <BINARY NCHAR>.pick; $t.substr-rw( (^$t.chars).pick, 1 ) = ('a'..'z').pick; $t.say

[03:29] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «BINmRY␤»

[03:29] <Xliff> m: my $t = <BINARY NCHAR>.pick; $t.substr-rw( (^$t.chars).pick, 1 ) = ('a'..'z').pick; $t.say

[03:29] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «BeNARY␤»

[03:29] <Xliff> m: my $t = <BINARY NCHAR>.pick; $t.substr-rw( (^$t.chars).pick, 1 ) = ('a'..'z').pick; $t.say

[03:29] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «BINAnY␤»

[03:29] <Xliff> m: my $t = <BINARY NCHAR>.pick; $t.substr-rw( (^$t.chars).pick, 1 ) = ('a'..'z').pick; $t.say

[03:29] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «rCHAR␤»

[03:30] <SmokeMachine> Zoffix https://www.irccloud.com/pastebin/tmY7TsdQ/

[03:32] *** lucs joined
[03:34] *** sauvin joined
[03:37] <SmokeMachine> more methods? `.pull-one`? `.skip-one`?

[03:38] <SmokeMachine> Zoffix: ^^

[03:39] *** molaf left
[03:49] *** subroot joined
[03:53] <SmokeMachine> better yet! `.pull` and `.skip` (this one already exists)

[03:54] <SmokeMachine> `.skip` and `.head`?

[03:58] <warriors> https://www.reddit.com/r/ProgrammingLanguages/comments/5wxz9n/perl_6_junctions_anyone_has_real_examples/ , does rakudo now do parallel junctions 

[04:05] *** pauliesaint joined
[04:14] *** Schepeers left
[04:17] *** Kaiepi left
[04:21] *** subroot left
[04:21] <Xliff> warriors: Not yet, that I know of.

[04:33] <warriors> thanks

[04:40] *** Schepeers joined
[04:40] *** Schepeers left
[04:42] *** Schepeers joined
[04:44] <SmokeMachine> still working on it: https://github.com/FCO/rakudo/commit/64cadb47347026edf86850dca49f9cafaae16f33

[04:49] <warriors> great :)

[04:50] *** curan joined
[04:55] *** Xliff left
[05:02] *** Kaiepi joined
[05:04] *** xtreak joined
[05:06] *** RimRoady joined
[05:07] *** jameslenz joined
[05:07] <RimRoady> p6: say 3

[05:07] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «3␤»

[05:08] *** kerframil left
[05:10] <RimRoady> p6: for(i=0,i<10,i++){say i;}

[05:10] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Whitespace required before < operator␤at <tmp>:1␤------> 3for(i=0,i<10,i++){say i;}7⏏5<EOL>␤    expecting any of:␤        postfix␤»

[05:11] <RimRoady> For(i=0;i<10;i++){say i}

[05:12] *** jameslenz left
[05:13] <RimRoady> p6: for(i=0;i<10;i++){say i}

[05:13] <camelia> rakudo-moar 7d9ca4fa0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Whitespace required before < operator␤at <tmp>:1␤------> 3for(i=0;i<10;i++){say i}7⏏5<EOL>␤    expecting any of:␤        postfix␤»

[05:14] *** RimRoady left
[05:28] *** chansen__ joined
[05:29] *** casdr left
[05:29] *** BuildTheRobots left
[05:29] *** Failure left
[05:29] *** Spot__ joined
[05:29] *** zostay_ joined
[05:29] *** olinkl_ joined
[05:29] *** SmokeMachine_ joined
[05:29] *** success joined
[05:29] *** casdr joined
[05:29] *** Spot_ left
[05:29] *** joy_ left
[05:29] *** Spot__ is now known as Spot_

[05:29] *** rodarmor_ joined
[05:29] *** PotatoGim_ joined
[05:29] *** skaji_ joined
[05:30] *** success is now known as Guest26294

[05:30] *** daxim left
[05:30] *** zostay left
[05:30] *** chansen_ left
[05:30] *** PotatoGim left
[05:30] *** zostay_ is now known as zostay

[05:30] *** chansen__ is now known as chansen_

[05:30] *** timeless_ joined
[05:31] *** leah2 left
[05:31] *** kent\n left
[05:31] *** xi- left
[05:31] *** SmokeMachine left
[05:31] *** timeless left
[05:31] *** rodarmor left
[05:31] *** skaji left
[05:31] *** olinkl left
[05:31] *** SmokeMachine_ is now known as SmokeMachine

[05:31] *** skaji_ is now known as skaji

[05:31] *** olinkl_ is now known as olinkl

[05:31] *** BuildTheRobots joined
[05:32] *** joy_ joined
[05:32] *** BuildTheRobots left
[05:32] *** BuildTheRobots joined
[05:32] *** BuildTheRobots left
[05:32] *** BuildTheRobots joined
[05:32] *** timeless_ is now known as timeless

[05:33] *** statisfiable6 left
[05:33] *** bisectable6 left
[05:33] *** nativecallable6 left
[05:33] *** timeless left
[05:33] *** timeless joined
[05:33] *** statisfiable6 joined
[05:33] *** bisectable6 joined
[05:34] *** DarthGandalf left
[05:34] *** kent\n joined
[05:34] *** xi- joined
[05:34] *** DarthGandalf joined
[05:43] *** daxim joined
[05:47] *** leah2 joined
[05:59] *** Ven` joined
[06:02] *** Some-body_ joined
[06:02] *** DarthGandalf left
[06:03] *** Some-body_ is now known as DarthGandalf

[06:04] *** Ven` left
[06:31] *** nativecallable6 joined
[06:31] *** squashable6 joined
[06:38] *** konsolebox left
[06:41] *** konsolebox joined
[06:42] *** psychoslave joined
[06:47] *** robertle joined
[06:50] *** domidumont joined
[06:50] *** xtreak left
[06:56] *** domidumont left
[06:57] *** domidumont joined
[07:03] *** xtreak joined
[07:08] *** jameslenz joined
[07:10] *** wamba joined
[07:11] *** xtreak left
[07:12] *** jameslenz left
[07:15] *** MilkmanDan left
[07:15] *** MilkmanDan joined
[07:16] *** salasrod joined
[07:17] *** salasrod left
[07:18] *** xtreak joined
[07:21] *** fbynite joined
[07:31] *** psychoslave left
[07:38] *** xtreak left
[07:38] *** HaraldJoerg joined
[07:39] *** dakkar joined
[07:44] *** xtreak joined
[07:46] *** zakharyas joined
[07:48] *** regnarg joined
[07:49] *** regnarg left
[07:49] *** lizmat joined
[07:50] *** scimon joined
[07:53] *** zakharyas left
[07:55] *** zakharyas joined
[08:01] *** dakkar left
[08:01] *** dakkar_ joined
[08:12] *** MilkmanDan left
[08:13] *** MilkmanDan joined
[08:17] *** undersightable6 joined
[08:19] *** fbynite left
[08:21] *** rindolf joined
[08:43] *** Ven` joined
[09:00] *** xtreak left
[09:03] *** dakkar_ left
[09:03] *** dakkar_ joined
[09:03] *** dakkar_ is now known as dakkar

[09:08] *** jameslenz joined
[09:12] *** jameslenz left
[09:26] *** sena_kun joined
[09:30] *** xtreak joined
[09:33] *** pauliesaint left
[09:36] *** paulsaint joined
[09:49] <buggable> New CPAN upload: Archive-Libarchive-0.0.8.tar.gz by FRITH http://modules.perl6.org/dist/Archive::Libarchive:cpan:FRITH

[09:50] *** markoong joined
[09:55] *** pmurias joined
[09:58] *** sarna joined
[09:59] <sarna> I've seen a reference to Paul Graham's essay in p6weekly

[09:59] <sarna> so I though, why won't we ask the guy what he thinks about p6

[10:00] <sarna> so I sent him an email

[10:00] <sarna> he responded!!

[10:01] <sarna> "I don't know anything about specific Perl versions, unfortunately."

[10:01] <sarna> :(

[10:13] *** Ven` left
[10:16] <El_Che> lol

[10:16] <El_Che> :)

[10:17] <El_Che> and the naming quesion hits us again

[10:20] *** dotdotdot joined
[10:26] *** paulsaint left
[10:28] *** Ven` joined
[10:32] *** ExtraCrispy joined
[10:38] <tbrowder_>  hi, #perl6 \o

[10:39] <Ven`> \o

[10:40] <tbrowder_> Ven: hi (can’t make back tic with this keyboard)

[10:41] <Ven`> The backtick is a lie :)

[10:42] <tbrowder_> i just discovered, unless i made a mistake, “copy $file, $dir” throws an error—surprising, and not clear why in docs

[10:42] *** spycrab0 joined
[10:43] *** Zoffix joined
[10:44] <tbrowder_> the dir exists, so the copy should work. where is IO expert Zoffix?

[10:44] <Zoffix> SmokeMachine: .head already exists and .pull-one already exists. It's a method on the Iterator

[10:45] <Zoffix> SmokeMachine: IMO that is starting to smell like Featuritis: https://github.com/perl6/6.d-prep/blob/master/d-docs/New-Features-Policy.md#featuritis

[10:45] *** Celelibi joined
[10:46] <Zoffix> SmokeMachine: i.e. we're presented with one program: .toggle is too complex and we start to dismantle it into now what 6? 8? methods, without having any particular usecase in mind.

[10:46] <Zoffix> s/program/problem/;

[10:49] <Zoffix> tbrowder_: you're asking to copy from name A to name B but it finds it can't use name B, because another filesystem entity already occupies that space, so it throws. It's merely an assumption that you may have meant to copy the file INTO some directory in such cases and the things get even more weird when the INTO thing is actually a dangling symlink

[10:49] <Zoffix> tbrowder_: so be explicit. Also R#2043

[10:49] <synopsebot> R#2043 [open]: https://github.com/rakudo/rakudo/pull/2043 Allow directories as destinations for IO::Path.copy/move.

[10:49] *** Zoffix left
[10:50] *** psychoslave joined
[10:50] <tbrowder_> Zoffix: thanks!

[10:53] <tyil> sarna: poke

[10:56] <tbrowder_> ah, the io file to dir indeed is very complicated and fraught with peril!

[11:04] <sarna> tyil: pong

[11:05] <tyil> hi

[11:06] <tyil> I've been working to make something like http://norvig.com/lispy.html in Perl 6

[11:06] <tyil> I've ditched the approach used in his tutorial for a Grammar based solution

[11:07] <sarna> nice!

[11:07] <jkramer> Is there a way to change :degree and :batch for hyper and race globally? I have a script in which I use them a lot and I wonder if there's a way to avoid having to give arguments to each call

[11:07] <tyil> I've got most of it working by now, just gonna clean up this mess and use some tricks I've just learned from moritz' book 

[11:07] <sarna> that's awesome :D

[11:08] <Ven`> jkramer: write a small wrapper that gets them from $*DEGREE and $*BATCH?

[11:08] *** jameslenz joined
[11:08] <tyil> it's much more fun to make this than I anticipated, and much easier to work with when it's a grammar with actions

[11:08] <Ven`> yeah, grammars tend to do that...

[11:08] <tyil> should be a nice article once I get it in shape

[11:08] *** Zoffix joined
[11:09] <Zoffix> .tell SmokeMachine FYI: https://github.com/rakudo/rakudo/issues/2089#issuecomment-406239925    IMO we don't have *any* usecases for multi-toggle toggle. I wouldn't use some convoluted toggle system for your ipconfig example. I'd just split on the empty line

[11:09] <yoleaux> Zoffix: I'll pass your message to SmokeMachine.

[11:09] <sarna> can't wait to read it :)

[11:09] <jkramer> Ven`: That's what I thought, just wanted to ask in case there's something builtin :) I mean it kinda would make sense to have global variables for that, since often times the number of cores doesn't change during runtime :)

[11:09] <Ven`> fair enough :P

[11:09] *** MilkmanDan left
[11:10] <sarna> tyil: lispy is pretty well-known, I think HN and r/programming are going to be interested :)

[11:10] <tyil> neat :D

[11:11] *** MilkmanDan joined
[11:11] <Zoffix> jkramer: in the future those methods will do more advanced estimation of what's the best degree/batch is: R#1741

[11:11] <synopsebot> R#1741 [open]: https://github.com/rakudo/rakudo/issues/1741 [ASYNC][RFC][perf] RFC: make default $degree in hyper/race depend on number of cores

[11:12] *** jameslenz left
[11:13] *** MasterDuke joined
[11:14] *** Zoffix left
[11:17] <jkramer> ZofBot: Cool!

[11:19] *** psychoslave left
[11:19] <jkramer> I love that you can declare callables like this in P6 <3 my &h = *.hyper(:8degree, :1024batch);

[11:19] <jkramer> And then jus @foo.&h....

[11:24] *** koto joined
[11:24] *** koto left
[11:24] *** koto joined
[11:24] *** koto left
[11:25] <pmurias> El_Che: he would have likely answered "I don't know anything about Camelia, unfortunately" if we did a rename

[11:26] <El_Che> that's way better than I don't know about a specific version

[11:26] *** sena_kun left
[11:26] <El_Che> as is "maybe I could look at this new lang" instead of "meh, a version"

[11:30] *** jeromelanteri joined
[11:30] <pmurias> "meh, a new language I have no use for" isn't that better

[11:31] <dotdotdot> Hi, I'm using grammars that need backtracking. I tried using proto regexes, but that failed (didn't backtrack?), however regex alternation `|` works. Why is that the case? Code: https://framabin.org/p/?a716d7e8a1a1b493#CUvEGWHzq/kmz7dGNcee3egMmUXt0slZbzgIYAYX3EY=

[11:31] <sarna> I think a niche is forming

[11:31] *** zakharyas left
[11:32] <sarna> people need a good dynamic lang

[11:32] <tyil> but do they actually want it as well?

[11:33] <sarna> well, some of the people who were angry with Python went to write Go

[11:33] *** APic joined
[11:33] <tyil> most people are very fond of <their favourite lang>, and dont want to use another lang

[11:33] <sarna> Go isn't ideal, we could reclaim them

[11:33] <sarna> "Camelia - your next favourite programming language"

[11:34] <Ven`> "Camelia - your last favorite programming language" ;-)

[11:34] <sarna> :^)

[11:34] *** psychoslave joined
[11:34] <pmurias> sarna: Go is fast and simple

[11:35] <sarna> pmurias: it's not safe though, and doesn't let you have fun

[11:35] <Ven`> fun? Go is for Adults??? like Google, these people don't have time for fun.

[11:35] <sarna> like, look at this

[11:35] <sarna> m: my $foo = 5;

[11:35] <camelia> rakudo-moar e9e8cd550: ( no output )

[11:35] <sarna> compiles!

[11:35] <sarna> in go it wouldn't :v

[11:36] <Ven`> why not?

[11:36] <sarna> compiler yells at you if you have unused variables/imports

[11:36] <Ven`> ah, that

[11:36] <sarna> they're not compiler warnings, they're errors

[11:36] <sarna> which is.. interesting

[11:37] <Ven`> it's not interesting it's just bad, like Go in general

[11:38] *** kerframil joined
[11:38] <sarna> a lot of people are angry with Go atm. they want a dynamic language with good concurrency support

[11:39] *** squashable6 left
[11:39] <tyil> I wasn't happy with Go

[11:39] <tyil> nor with Rust

[11:39] <tyil> hence I tried Perl 6

[11:39] <tyil> which promises basically everything I want, and so far holds true to its Promise

[11:39] <sarna> Rust is like.. it /should/ feel good, but something feels off, and I don't know what

[11:40] <sarna> tyil: I wish it was faster though

[11:40] <tyil> the syntax doesnt feel nice, nor the docs :(

[11:40] <sarna> but I know we're getting there :D

[11:40] <tyil> more speed would always be better

[11:40] <tyil> but its fast enough for my usecases

[11:40] <sarna> what was your issue with docs?

[11:40] <Ven`> the Rust docs are amazing :o

[11:41] <tyil> which are mostly automating stuff for my own servers

[11:41] <tyil> back when I tried it (years back), the docs felt rather clumsy and not user friendly, took my too much effort to find out what exactly they wanted me to do

[11:41] <sarna> oh

[11:41] <El_Che> pmurias: as in, "maybe someday I'll have a look at, maybe" instead "been there, done that"

[11:41] <Ven`> oh, years back for sure. They've been overhauled multiple times since then.

[11:41] <sarna> now they're really good

[11:42] <Ven`> Rust shines in docs and compiler errors, methinks.

[11:42] <tyil> better compiler errors than perl 6?

[11:42] <Ven`> different kind really.

[11:43] <sarna> I'd say yes

[11:43] <Ven`> https://blog.rust-lang.org/2016/08/10/Shape-of-errors-to-come.html

[11:43] <Ven`> if you're interested.

[11:43] <sarna> they even link you to in-depth explanations

[11:43] <tyil> I am slightly interested tbh

[11:43] <tyil> but I also want to finish this scheme parser :.

[11:43] <Ven`> They took a page from Elm's book, here: http://elm-lang.org/blog/compiler-errors-for-humans

[11:45] *** faraco joined
[11:45] *** faraco left
[11:45] *** faraco joined
[11:46] <tyil> hm, `method procedure:sym{"<"} ($/)` seems to be not accepted

[11:46] <tyil> but I cant do sym<<> either

[11:47] <tyil> how would I get < as the symbol for this method name?

[11:50] <Ven`> m: procedure:sym<< < >> {}

[11:50] <camelia> rakudo-moar e9e8cd550: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    procedure:sym«<» used at line 1␤␤»

[11:50] <Ven`> m: syb procedure:sym<< < >>() {}

[11:50] <camelia> rakudo-moar e9e8cd550: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unexpected block in infix position (missing statement control word before the expression?)␤at <tmp>:1␤------> 3syb procedure:sym<< < >>()7⏏5 {}␤    expecting any of:␤        infix␤      …»

[11:50] <Ven`> m: sub procedure:sym<< < >>() {}

[11:50] <camelia> rakudo-moar e9e8cd550: ( no output )

[11:50] <Ven`> sigh.

[11:55] <MasterDuke> i think you have the use the unicode <<

[11:55] <Ven`> I just demonstrated you didn't :c

[11:55] <MasterDuke> heh, that you did

[11:59] <buggable> New CPAN upload: Hash-Restricted-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Hash-Restricted-0.0.1.tar.gz

[12:02] <pmurias> sarna, Ven`: being an elaborate fun language is explicitly *NOT* a goal of Go

[12:03] <Ven`> I'm sure of that. The explicit goal is to help people not bright enough to write C++. :P

[12:04] <tyil> Ven`: the << < >> works, thanks :D

[12:07] <sarna> pmurias: yup, I know that :) still, if its goal was to be a good language for concurrency, it failed at that

[12:08] <Ven`> what's fan lang?

[12:08] *** wamba left
[12:08] <pmurias> a Perl 6 kinda of subset/spin off compiling to lua

[12:09] *** lizmat left
[12:12] <Ven`> I've never heard of it

[12:12] <pmurias> Ven`: it hasn't been released

[12:13] <Ven`> who works on that?

[12:13] <pmurias> (and no, it's not a backend I'm writing)

[12:13] <Ven`> hahahahaha

[12:13] <pmurias> Ven`: agentzh

[12:14] <MasterDuke> and ingy

[12:14] <pmurias> ingy doesn't work on it anymore, but AFAIK it's an internal OpenResty tool

[12:15] <Ven`> I think ingy is busy with testml :)

[12:16] *** lizmat joined
[12:21] *** lizmat left
[12:21] <Ven`>   > method pass??-compos?? {

[12:21] <Ven`> oh, Perl 6. :-)

[12:24] <SmokeMachine> .tell Zoffix I’ll make a ecosystem module with that...

[12:24] <yoleaux> 11:09Z <Zoffix> SmokeMachine: FYI: https://github.com/rakudo/rakudo/issues/2089#issuecomment-406239925    IMO we don't have *any* usecases for multi-toggle toggle. I wouldn't use some convoluted toggle system for your ipconfig example. I'd just split on the empty line

[12:24] <yoleaux> SmokeMachine: I'll pass your message to Zoffix.

[12:25] *** xtreak left
[12:26] *** jeromelanteri left
[12:28] *** xtreak joined
[12:28] *** xtreak left
[12:35] *** itaipu joined
[12:39] *** jeromelanteri joined
[12:43] <pmurias> El_Che: regardless of what Perl 6 is/will be called I'm not aware of a good marketing hook we have to make people give it a try besides pure curiosity

[12:43] <Ven`> pmurias: like grammars you mean?

[12:44] *** epony joined
[12:44] <faraco> Make JVM a priority I guess?

[12:46] <pmurias> faraco: I'm working on the JVM/GraalVM/Truffle backend today ;)

[12:47] <pmurias> Ven`: grammars would be one possible marketing hook

[12:55] <faraco> pmurias: Nice :D

[12:59] <Ven`> pmurias: I'm soo happy you're working on such a backend, btw. I've been following Graal&Truffle for many years now (since back when I did Ruby...), have seen a few presentations on it, and it's just incredible.

[13:01] *** pauliesaint joined
[13:01] <pmurias> MasterDuke++ has been helping along with it too

[13:02] *** jeromelanteri left
[13:03] <Ven`> MasterDuke++ # for loops and other goodness!

[13:06] *** molaf joined
[13:08] *** jameslenz joined
[13:13] *** jameslenz left
[13:18] *** zakharyas joined
[13:22] *** sno left
[13:23] *** HaraldJoerg left
[13:24] *** sno joined
[13:25] *** konsolebox left
[13:26] *** scimon left
[13:26] *** scimon joined
[13:31] *** sena_kun joined
[13:35] *** konsolebox joined
[13:36] *** Ven` left
[13:37] *** [particle] joined
[13:37] *** warriors joined
[13:39] *** HaraldJoerg joined
[13:42] *** pauliesaint left
[13:42] *** pauliesaint joined
[13:47] *** Ven` joined
[13:48] <titsuki> bisectable: my %dict; say !%dict<a>:exists; say %dict<a>:!exists;

[13:48] <bisectable6> titsuki, Bisecting by output (old=2015.12 new=e9e8cd5) because on both starting points the exit code is 1

[13:48] <bisectable6> titsuki, bisect log: https://gist.github.com/91f657516b75b08b05551855156fb3a3

[13:49] <bisectable6> titsuki, There are 6 candidates for the first “new” revision. See the log for more details

[13:50] *** skids joined
[13:52] *** kerframil left
[13:54] *** raschipi joined
[13:59] <buggable> New CPAN upload: Chart-Gnuplot-0.0.5.tar.gz by TITSUKI http://modules.perl6.org/dist/Chart::Gnuplot:cpan:TITSUKI

[14:05] *** zakharyas left
[14:08] *** curan left
[14:09] <buggable> New CPAN upload: Sparrowdo-VSTS-YAML-Build-0.0.5.tar.gz by MELEZHIK http://modules.perl6.org/dist/Sparrowdo::VSTS::YAML::Build::Assembly::Patch:cpan:MELEZHIK

[14:16] *** zakharyas joined
[14:24] *** spycrab0 left
[14:26] *** pauliesaint left
[14:26] *** pauliesaint joined
[14:30] *** faraco left
[14:48] *** sarna left
[14:52] *** fake_space_whale joined
[14:53] *** fbynite joined
[14:58] *** wamba joined
[15:04] *** zakharyas left
[15:06] *** sno left
[15:06] *** ChoHag joined
[15:07] *** zakharyas joined
[15:08] *** jameslenz joined
[15:10] *** domidumont left
[15:12] *** jameslenz left
[15:19] *** ChoHag left
[15:20] *** Ven` left
[15:24] *** benchable6 joined
[15:24] *** robertle left
[15:31] <pmurias> .tell Zoffix what is Your?

[15:31] <yoleaux> pmurias: I'll pass your message to Zoffix.

[15:31] *** fbynite left
[15:34] *** Hor|zon joined
[15:37] *** ChoHag joined
[15:41] *** zakharyas left
[15:42] *** troys joined
[15:48] *** webstran- joined
[15:48] *** webstrand left
[15:48] *** dylanwh joined
[15:49] *** webstran- is now known as webstrand

[15:51] *** zakharyas joined
[15:58] *** zakharyas left
[16:05] *** Zoffix joined
[16:05] <Zoffix> .

[16:05] <yoleaux> 12:24Z <SmokeMachine> Zoffix: I’ll make a ecosystem module with that...

[16:05] <yoleaux> 15:31Z <pmurias> Zoffix: what is Your?

[16:06] <Zoffix> pmurias: the nearly-minimum compiler that passes the Perl 6 Specification. The only requirement is that it must produce valid TAP output and the number of tests in the TAP must match the number of spectests

[16:07] <Zoffix> And since it passes the spec, it can claim to be a Perl 6 compiler.

[16:07] <Zoffix> But it'll have a bun of stuff like `sub ok(|) { pass }` for example. There's no functionality requirements other than the literal content of the spec.

[16:07] *** zakharyas joined
[16:08] *** diakopter joined
[16:09] <Zoffix> That's as far as its implementation goes, with the purpose of seeing how useless it is after implementing the entire spec. From the front-end, it'll serve as an invitation/education point for people wanting to write Perl 6 compilers and for us to explore whether we have any roadblocks for featuring multiple compilers. 

[16:09] <buggable> New CPAN upload: Sparrowdo-VSTS-YAML-Build-0.0.6.tar.gz by MELEZHIK http://modules.perl6.org/dist/Sparrowdo::VSTS::YAML::Build::Assembly::Patch:cpan:MELEZHIK

[16:09] <Zoffix> So pmichaud's concerns in this comment will be basically addressed: https://github.com/perl6/perl6.org/issues/96#issuecomment-372381163

[16:10] <Zoffix> We will no longer sweep the problem of multi-implementation under the rug, pretending it can't exist, but instead use the Your as the second impl, and in its space Your will invite/educate compiler writers, until we have more than one open source impl

[16:11] <Zoffix> Also, it's not Your, it's Your™ :)

[16:13] *** psychoslave left
[16:14] <Zoffix> s/bun of stuff/bunch of stuff/

[16:16] <raschipi> Zoffix: It should at least be able to run a Hello World program, I think, so that other infrastructure besides roast can be tested. Can they be installed side by side, for example.

[16:17] *** Ven` joined
[16:17] <raschipi> Just cheat with a if /say 'hello world';/ { say 'hello world' };

[16:19] <Zoffix> When I'm done, it'll have a nice page explaining how you can make You™ compiler and implement whatever you want in it ;)

[16:20] <raschipi> You IRC redirection is out?

[16:21] *** Ven` left
[16:26] <Zoffix> raschipi: what?

[16:26] *** dakkar left
[16:29] <Zoffix> X::Syntax::Malformed

[16:29] *** pauliesaint left
[16:29] *** pauliesaint joined
[16:30] <Zoffix> m: class X::Waat is Exception { has $.n; method message { "$n, wat u meen bruh?" } }; die X::Watt.new: n => <raschipi>

[16:30] <camelia> rakudo-moar f9743ad82: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$n' is not declared. Did you mean '$!n'?␤at <tmp>:1␤------> 3 Exception { has $.n; method message { "7⏏5$n, wat u meen bruh?" } }; die X::Watt.n␤»

[16:30] *** pauliesaint left
[16:30] <Zoffix> m: class X::Waat is Exception { has $.n; method message { "$!n, wat u meen bruh?" } }; die X::Watt.new: n => <raschipi>

[16:30] <camelia> rakudo-moar f9743ad82: OUTPUT: «Could not find symbol '&Watt'␤  in block <unit> at <tmp> line 1␤␤»

[16:30] <raschipi> irc.perl6.org looks out

[16:30] <Zoffix> Ah

[16:30] <Zoffix> I don't have access to that box

[16:30] <Zoffix> Well, other than hypervisor for rebooting it

[16:30] <raschipi> It just your domain name, then, ok.

[16:30] *** scimon left
[16:31] <Zoffix> It's not

[16:31] <Zoffix> It's not my domain name

[16:31] <Zoffix> oh, you mean irc.perl6.PARTY

[16:31] <raschipi> Yes, sorry

[16:33] <Zoffix> Yeah, linode died yesterday and it doesn't have autostart

[16:33] *** pauliesaint joined
[16:33] <Zoffix> It's back up now.

[16:34] <raschipi> thanks

[16:35] *** Zoffix left
[16:39] *** pauliesaint left
[16:40] *** pauliesaint joined
[16:43] *** diakopter left
[16:46] *** pauliesaint left
[16:47] *** lizmat joined
[16:47] *** pauliesaint joined
[16:51] *** Ven` joined
[16:52] *** domidumont joined
[16:53] *** lizmat_ joined
[16:53] <donpdonp> with out any 'use JSON::something' statement, to-json is available at the perl6 repl.

[16:54] <donpdonp> which library is that coming from

[16:54] <donpdonp> im pretty sure i came across a json serialization bug

[16:55] *** lizmat left
[16:55] *** lizmat_ left
[16:58] <MasterDuke> donpdonp: there's an internal (to|from)-json, but it's deprecated for normal use

[16:58] <MasterDuke> m: say to-json(1)

[16:58] <camelia> rakudo-moar f9743ad82: OUTPUT: «1␤»

[16:58] <donpdonp> k. i get the same err from json::fast

[16:59] <MasterDuke> ugh, don't remember how to turn on deprecation warnings for camelia

[16:59] <jnthn> Hm, locally it gives me the deprecation warning on using that

[16:59] <MasterDuke> e: say to-json(1)

[16:59] <evalable6> MasterDuke, rakudo-moar f9743ad82: OUTPUT: «1␤Saw 1 occurrence of deprecated code.␤===================================================…»

[16:59] <evalable6> MasterDuke, Full output: https://gist.github.com/b61da0315863a2da5a76527c19f42a97

[16:59] <jnthn> ah, camelia suppresses them

[16:59] <donpdonp> m: my $hash = {a=>"A", b=>"B"}; to-json [$hash]

[16:59] <camelia> rakudo-moar f9743ad82: ( no output )

[16:59] <MasterDuke> donpdonp: then should ping timotimo

[17:00] <donpdonp> i thought there might be a depedency between json::fast and the internal one since they act identical, but maybe thats a coincidence

[17:00] <donpdonp> timotimo: https://gist.github.com/donpdonp/539e49d076a62b3221c4bcff8e406f7c

[17:01] <jnthn> That's not the JSON module, that's because of the single argument rule

[17:01] *** Hor|zon left
[17:01] <jnthn> If the thing placed into a [...] is Iterable then it makes an array from the iteration of that thing

[17:02] <jnthn> Try [{a=>"A", b=>"B"},]

[17:02] <donpdonp> :O well thats confusing. thx

[17:03] <donpdonp> ,] does fix it. 

[17:04] <jnthn> m: dd [1..10] # means things like this work :)

[17:04] <camelia> rakudo-moar f9743ad82: OUTPUT: «[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]␤»

[17:04] <jnthn> Or [@bar.grep(&foo)] and so forth

[17:06] *** pauliesaint left
[17:07] *** diakopter joined
[17:09] *** jameslenz joined
[17:11] *** lizmat joined
[17:11] *** lizmat left
[17:13] <donpdonp> m: my $host = "abc"; "@{$host}"

[17:13] <camelia> rakudo-moar f9743ad82: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of @{$host}; in Perl 6 please use @($host) for hard ref or @::($host) for symbolic ref␤at <tmp>:1␤------> 3my $host = "abc"; "@{$host}7⏏5"␤»

[17:13] *** jameslenz left
[17:14] <donpdonp> is that a bug, or p6 syntax creativity that im not aware of? <grin>

[17:15] <donpdonp> m: my $host = "abc"; "\@{$host}"

[17:15] <camelia> rakudo-moar f9743ad82: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "\\@{$host}" in expression "\\@{$host}" in sink context (line 1)␤»

[17:15] *** Zoffix joined
[17:15] <donpdonp> hmm on my repl I get the expected "@abc"

[17:15] <Zoffix> donpdonp: what's the bug part?

[17:16] <donpdonp> Zoffix: i would expect "@{$host}" to be "@abc" instead of an error

[17:16] <Zoffix> donpdonp: you can use the indirect ref, shown in the error message

[17:16] <Zoffix> indirect lookup

[17:16] <donpdonp> is it saying the {} syntax can change while inside a quoted sting?

[17:16] <geekosaur> they dson'r want a ref, they wannt literal @ followed by expr $host expanded

[17:16] <MasterDuke> donpdonp: the repl automatically prints the last value evaluated, but with the bots you have to explicitly print

[17:16] <geekosaur> but are getting intterpolation on the @ instead

[17:17] <donpdonp> the @ being outside "{}" the subsitution area is whats throwing me off.

[17:17] <Zoffix> Ah

[17:17] <donpdonp> there are more special characters than {} while inside a string?

[17:17] <Zoffix> donpdonp: the {} is the codeblock

[17:17] <geekosaur> yes, things that look lie variables get interpolated

[17:17] <donpdonp> right, which is why im puzzled that @ would create a syntax error outside the codeblock

[17:17] <donpdonp> geekosaur: ah i see

[17:17] <geekosaur> (possibly with postcircumfixes, which means you can call some methoids that way as well)

[17:18] <Zoffix> donpdonp: some of the errors are purposeful breaking of the language on the assumption the user is meant a construct from another language, like I'm guessing Perl 5's constructs

[17:18] <Zoffix> in this case

[17:18] *** sauvin left
[17:19] <Zoffix> R#1356

[17:19] <synopsebot> R#1356 [open]: https://github.com/rakudo/rakudo/issues/1356 [RFC] Let's remove most (if not all) perl5-oriented error messages for variables

[17:19] <kanbas> Heya sorry for asking so many questions, but does anybody know of anywhere I can read up on using threads with collections? I'm trying to use atomic operations with lists and not getting very far

[17:20] <donpdonp> Zoffix: thx.

[17:21] <Zoffix> donpdonp: FWIW, I often find it more helpful to use single quotes, and the \qq[] escape syntax inside of them whenever I need to interpolate a variable or something.

[17:21] <moritz> kanbas: the thread-safe data structures in Perl 6 are Promise (scalars), Channel (list/quues) and Supply (streams for the Observable pattern)

[17:21] <Zoffix> m: my $host = 'abc'; say '@{\qq[$host]}'

[17:21] <camelia> rakudo-moar f9743ad82: OUTPUT: «@{abc}␤»

[17:21] <Zoffix> m: my $host = 'abc'; say '@\qq[$host]'

[17:21] <camelia> rakudo-moar f9743ad82: OUTPUT: «@abc␤»

[17:21] <kanbas> moritz: Okay, cheers

[17:22] * donpdonp looks at that syntax then runs screaming out of the room

[17:22] <donpdonp> m: '\qq[1]' 

[17:22] <camelia> rakudo-moar f9743ad82: ( no output )

[17:22] <donpdonp> m: say '\qq[1]' 

[17:22] <camelia> rakudo-moar f9743ad82: OUTPUT: «1␤»

[17:23] <jnthn> kanbas: The various atomic operators work on Scalar containers, which may be individual elements of an Array, for example, but they don't magically make the Array itself safe.

[17:23] <Zoffix> donpdonp: the longer way to write double quotes is the `qq` quoter: `say qq♥meows♥`.. So the escape is the escape char `\` and the very same `qq` after it to instroduce the `qq`-type interpolation instead of single-quote interpolkation mode

[17:23] <Zoffix> BTW, the indirect syntax in the error doesn't actually work in that case

[17:24] <jnthn> kanbas: There are a copule of lock-free data structures implemented as Perl 6 modules.

[17:24] <kanbas> jnthn: Okie doke, I think I'll look at restructuring things so that I use channels instead of the awkward approach I'm currently using. Years of Java makes some habits harder to break than others it seems

[17:24] <Zoffix> m: my @abc = <foo bar ber>; my $host = "abc"; "@{$host}"

[17:24] <camelia> rakudo-moar f9743ad82: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of @{$host}; in Perl 6 please use @($host) for hard ref or @::($host) for symbolic ref␤at <tmp>:1␤------> 3oo bar ber>; my $host = "abc"; "@{$host}7⏏5"␤»

[17:24] <jnthn> :)

[17:24] <Zoffix> m: my @abc = <foo bar ber>; my $host = "abc"; "@::($host)"

[17:24] <camelia> rakudo-moar f9743ad82: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "@::($host)" in expression "@::($host)" in sink context (line 1)␤»

[17:24] <Zoffix> m: my @abc = <foo bar ber>; my $host = "abc"; say "@::($host)"

[17:24] <camelia> rakudo-moar f9743ad82: OUTPUT: «@::(abc)␤»

[17:24] <Zoffix> m: my @abc = <foo bar ber>; my $host = "abc"; say "@::($host)[]"

[17:24] <camelia> rakudo-moar f9743ad82: OUTPUT: «foo bar ber␤»

[17:24] <Zoffix> mh, I guess it's fine

[17:27] <Zoffix> m: say "yo{" brah{" I herd {"setouq ekil u".comb.reverse.join} so I got"} quotes in your"} quotes"

[17:27] <camelia> rakudo-moar f9743ad82: OUTPUT: «yo brah I herd u like quotes so I got quotes in your quotes␤»

[17:27] <Zoffix> donpdonp: how's this syntax? :)

[17:27] <donpdonp> Zoffix: ha, its understandable because its just one {} mechanism. 

[17:28] <donpdonp> '\qq[]' on the other hand, will haunt my dreams.

[17:28] <TimToady> it's only for occasional use in emergencies

[17:29] <Zoffix> m: "&say("heh, @(<ko revetahw>)».flip()")"

[17:29] <camelia> rakudo-moar f9743ad82: OUTPUT: «heh, ok whatever␤»

[17:31] <moritz> donpdonp: Perl 5's "foo ${\join $x, @blah} bar" haunts my dreams :D

[17:32] * TimToady usuallly sticks to @{[]} because it's slightly less ugly

[17:32] *** Zoffix left
[17:33] <moritz> ... and slightly more confusing, unless you have more than one element to interpolate

[17:33] *** pecastro joined
[17:33] <moritz> ... in which case you need to know what $" is right now, or something?

[17:34] <TimToady> m: my $host = "abc"; say qc[My host is @{$host}.];

[17:34] <camelia> rakudo-moar f9743ad82: OUTPUT: «My host is @abc.␤»

[17:38] *** Amac joined
[17:42] *** Amac left
[17:42] *** Zoffix joined
[17:43] <Zoffix> TimToady: "<TimToady> we might possibly reserve :sym at that point as well" http://colabti.org/irclogger/irclogger_log/perl6?date=2017-01-25#l1076

[17:43] <Zoffix> TimToady: is that just for routines, or should it be reserved on variables too?

[17:44] <Zoffix> $ ./perl6 -e 'use v6.d.PREVIEW; sub meows:sym<z> {}'

[17:44] <Zoffix> ===SORRY!=== Error while compiling -e

[17:44] <Zoffix> The :sym<> colonpair is reserved

[17:44] <Zoffix> But `my $meows:sym<z>` is currently accepted

[17:44] <Zoffix> Also, where's this extended naming stuff documented?

[17:45] * Zoffix cringes at the new "█████████████████████████████████████████" bars on teh docs site :S

[17:45] *** ChoHag left
[17:50] <Zoffix> Looks like this is the place: https://docs.perl6.org/language/syntax#Identifiers

[17:52] *** vrurg left
[17:55] <Zoffix> ZofBot: no one's talking no more. It's just me and you, bud. 

[17:56] <El_Che> Zoffix: are you one of ZofBot's bots?

[17:57] <Zoffix> I'm many of ZofBot's bots.

[17:59] *** MasterDuke left
[18:02] *** domidumont left
[18:03] <Geth> ¦ doc: f054a04606 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/syntax.pod6

[18:03] <Geth> ¦ doc: Document reserved colonpairs on sub names

[18:03] <Geth> ¦ doc: 

[18:03] <Geth> ¦ doc: - Empty key was already reserved for custom ops categories only

[18:03] <Geth> ¦ doc: - As of 6.d `:sym` is also reserved:

[18:03] <synopsebot> Link: https://doc.perl6.org/language/syntax

[18:03] <Geth> ¦ doc:     POV: https://github.com/rakudo/rakudo/commit/a68784a6f6

[18:03] <Geth> ¦ doc:    PropSpec: https://github.com/perl6/roast/commit/de6df3639c

[18:03] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f054a04606

[18:05] <Zoffix> TimToady: I did subs only. If `:sym` needs to be reserved on variables too, ping me. And if it needs to be reserved, what about empty-key colonpairs? (`my $foo:<blah>`) right now they aren't reserved on vars either; on subs they cry about wrong category name

[18:05] *** Zoffix left
[18:12] *** buggable left
[18:13] *** buggable joined
[18:13] *** ChanServ sets mode: +v buggable

[18:13] *** lizmat joined
[18:14] *** diakopter left
[18:15] <TimToady> m: say &foo:<bar>

[18:15] <camelia> rakudo-moar e6d6f2485: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    foo:<bar> used at line 1␤␤»

[18:15] <TimToady> hmm

[18:16] * TimToady tends to prefer informal reservations over formal ones, but that might just be a character flaw

[18:16] *** hythm joined
[18:16] *** Zoffix joined
[18:17] <Zoffix> FWIW, you can make Callable variables with "forbidden" names

[18:17] <Zoffix> m: my &meowfix:sym<bar> = {$^a + $^b}; 2 bar 3

[18:17] <camelia> rakudo-moar e6d6f2485: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my &meowfix:sym<bar> = {$^a + $^b}; 27⏏5 bar 3␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statemen…»

[18:17] <Zoffix> m: my &meowfix:<bar> = {$^a + $^b};

[18:17] <camelia> rakudo-moar e6d6f2485: ( no output )

[18:17] <Zoffix> m: sub meowfix:<bar> {$^a + $^b};

[18:17] <camelia> rakudo-moar e6d6f2485: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot add tokens of category 'meowfix'␤at <tmp>:1␤------> 3sub meowfix:<bar>7⏏5 {$^a + $^b};␤»

[18:17] <Zoffix> e: use v6.d.PREVIEW: sub meowfix:sym<bar> {$^a + $^b};

[18:17] <evalable6> Zoffix, rakudo-moar a5ab50d64: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/h_PDo3Rmxs␤Confused␤at /tmp/h_PDo3Rmxs:1␤------> 03use v6.d.PREVIEW08⏏04: sub meowfix:sym<bar> {$^a + $^b};␤»

[18:18] <Zoffix> e: use v6.d.PREVIEW; sub meowfix:sym<bar> {$^a + $^b};

[18:18] <evalable6> Zoffix, rakudo-moar a5ab50d64: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/iw03l4NncY␤The :sym<> colonpair is reserved␤at /tmp/iw03l4NncY:1␤------> 03use v6.d.PREVIEW; sub meowfix:sym<bar>08⏏04 {$^a + $^b};␤»

[18:18] <Zoffix> e: use v6.d.PREVIEW; my &meowfix:sym<bar> = {$^a + $^b};

[18:18] <evalable6> Zoffix, rakudo-moar a5ab50d64: OUTPUT: «»

[18:20] <TimToady> I suspect anyone demented enough to create meowfix subs is sufficiently imaginative to realize how much trouble they could be getting into :)

[18:20] <Zoffix> :)

[18:20] *** zakharyas left
[18:22] <TimToady> Perl 6 provides plenty of convenient jungle to go out and get eaten in.

[18:22] *** kaiser_ joined
[18:23] *** [particle] left
[18:23] <TimToady> Perl is very far from a language where everything that is not mandatory is forbidden. :)

[18:23] <[Coke]> I thought the bars on titles was inserted and quickly removed; still there? 

[18:23] *** diakopter joined
[18:24] <[Coke]> Perl 6: The Jumanji of languages?

[18:25] <hythm> p6: my $str = ">"; my &code = &infix:<<$str>> # doesn't work, if each statemment in a line by it self it works

[18:25] <camelia> rakudo-moar e6d6f2485: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in code  at <tmp> line 1␤5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:…»

[18:25] *** [particle] joined
[18:25] <Zoffix> [Coke]: they're still on this page: https://docs.perl6.org/language.html

[18:26] <Zoffix> m: my $str = ">"; ␤ my &code = &infix:<<$str>>

[18:26] <camelia> rakudo-moar e6d6f2485: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in code  at <tmp> line 2␤5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:…»

[18:26] <Zoffix> hythm: doesn't look like it works with line byitself either?

[18:26] <Zoffix> m: constant $str = ">";  my &code = &infix:<<$str>>

[18:26] <camelia> rakudo-moar e6d6f2485: ( no output )

[18:26] <Zoffix> m: constant $str = ">";  my &code = &infix:<<$str>>; say code 2, 3

[18:26] <camelia> rakudo-moar e6d6f2485: OUTPUT: «False␤»

[18:26] <Zoffix> m: constant $str = ">";  my &code = &infix:<<$str>>; say code 4, 3

[18:26] <camelia> rakudo-moar e6d6f2485: OUTPUT: «True␤»

[18:27] <hythm> in repl if I wrote my $str = ">" then hit enter, and write second statment it works

[18:27] <[Coke]> Zoffix: weird. wonder if it's intended to make MIGRATION GUIDES a header.

[18:27] <[Coke]> can you open a doc ticket for that? if tb can't fix it, I'll take a shot this weekend.

[18:27] <Zoffix> hythm: that's a quirk of the REPL.

[18:28] <diakopter> [Coke]: more like the Heart of Darkness of languages

[18:28] <[Coke]> Would rather those just ended up as headers. ah, they also have pages that don't need to exist.

[18:28] <[Coke]> DIAKOPTER

[18:28] <[Coke]> long time no see

[18:28] <Zoffix> hythm: or I guess a quirk of the REPL that avoids a bug where variables in «» must be compile-time known when used in stuff like &infix... There was a ticket somewhere for that

[18:28] <diakopter> [Coke]: or Through Gates of Splendor, more like

[18:28] <hythm> Zoffix sure, how to open it? is ther a URL I can go to?

[18:29] <Zoffix> hythm: I meant this is already filed as a bug

[18:29] <Zoffix> hythm: but new bugs are usually filed at https://github.com/rakudo/rakudo/issues/new

[18:29] <hythm> ah  noted

[18:29] <Zoffix> but the bug was filed on RT, I believe. So it'd be somewhere in https://fail.rakudo.party/

[18:30] * diakopter puts away esoteric allusion puns

[18:30] <Zoffix> hythm: found it: RT#127284

[18:30] <synopsebot> RT#127284 [new]: https://rt.perl.org/Ticket/Display.html?id=127284 "&infix:«$var»" interpolation throws spurious compile-time warning

[18:33] <Zoffix> [Coke]: D#2188

[18:33] <synopsebot> D#2188 [open]: https://github.com/perl6/doc/issues/2188 Language page has weird ascii bars

[18:35] <diakopter> [Coke]: LTNS indeed

[18:35] *** Zoffix left
[18:35] <hythm> Is there a way to convert str "<", ">",.. to their respective sub?   soemthing like I was tryiuing to do above  'my $str = "<"; my &code = &infix:<<$str>>'

[18:36] *** ExtraCrispy left
[18:36] <moritz> m: my $op = '<'; say &::("infix:«$op»")

[18:36] <camelia> rakudo-moar a5ab50d64: OUTPUT: «proto sub infix:«<» ($?, $?, *%) {*}␤»

[18:36] <moritz> m: my $op = '<'; say &::("infix:«$op»")(3, 5)

[18:36] <camelia> rakudo-moar a5ab50d64: OUTPUT: «True␤»

[18:36] <moritz> hythm: ^^

[18:36] <hythm> great, thanks

[18:37] *** MasterDuke joined
[18:37] *** kaiser_ left
[18:37] *** kaiser_ joined
[18:42] *** psychoslave joined
[18:42] *** awwaiid joined
[18:43] *** Ven` left
[18:44] *** Ven` joined
[18:45] <kaiser_> Zoffix b2gills and others: A huge thanks for your help yesterday. Much appreciated.

[18:45] <kaiser_> I have tried your version today at work, with and without sprintf (surprisingly, non-sprintf version is only slightly faster), and here's the result:

[18:45] <kaiser_> The initial run is now twice as fast but still takes about 50 seconds. Subsequent runs are also a bit fast than my original version, around 0.36s.

[18:45] <kaiser_> This is on Ubuntu 16.0.4 and Rakudo Star version 2018.01

[18:46] <kaiser_> The fastest version is here: https://gist.github.com/kaisersparpick/289b4a346a02cd1148324729145c36a2

[18:47] <kaiser_> What still seems weird is why the script pauses for around 50 seconds after the first loop.

[18:49] <raschipi> kaiser_: Did you try the command i sent you?

[18:49] *** Ven` left
[18:51] <kaiser_> drop_caches? No, sorry, it was the first thing on my list and totally missed it! Duh! Just realised when I got home. I'll try it tomorrow :)

[18:51] <MasterDuke> kaiser_: what's the input?

[18:52] <kaiser_> This is a simple script that counts lines and words in a Node.js project. The input is a list of oroject root diretories.

[18:52] *** lizmat left
[18:52] <kaiser_> I mean list a number of Node.js projects.

[18:52] <MasterDuke> and it pauses after the first 'count-stuff'?

[18:53] <kaiser_> Oh, I can't type today :( A list of Node.js projects.

[18:53] <kaiser_> It pauses after the first loop, just before printing "Subtotal".

[18:55] <MasterDuke> huh, didn't do it for me

[18:55] <kaiser_> Out of curiosity, I've also written a Python version. It always finishes in cca 0.017s. https://gist.github.com/kaisersparpick/ab1c9ec66070c887e5e7f3e4dcd3bdd6

[18:56] <MasterDuke> kaiser_: are the projects you're running in against available to clone/download somewhere?

[18:57] <kaiser_> Sorry no, they are rather confidential but I'll try to create something similar to test it with, which I will be able to share.

[18:58] <MasterDuke> kaiser_: you could also try stracing it. the -r option will print the time diff between successive calls

[18:58] *** lizmat joined
[18:58] <kaiser_> The Perl 5 version runs fine for me too, on the same machine. So I suspect it must have something to do with my installation on Rakudo?

[18:58] <kaiser_> * of Rakudo

[18:59] <MasterDuke> maybe, but i don't remember hearing of anyone else having a similar problem

[18:59] <diakopter> kaiser_: just create an installation tree for no-one-left-behind

[19:00] <diakopter> kaiser_: or npm-bomb

[19:01] <kaiser_> The node_modules folder is excluded and the other project folders are two level deep at most.

[19:02] <diakopter> (I'm kidding, that would be all 665,000 packages in npm, quite a few TB)

[19:02] <diakopter> oh

[19:02] <kaiser_> :)

[19:03] <kaiser_> Oh just looked at npm-bomb... Neat :)

[19:05] <b2gills> kaiser_: Perl 6 is sufficiently far from the hardware that it is difficult to impossible to correctly guess what approach will be the fastest

[19:07] *** lizmat left
[19:09] *** jameslenz joined
[19:12] <kaiser_> b2gills: I'm perfectly happy with the performance of the subsequent runs and also perfectly happy with any of the suggested improved versions of the code - they're all better than my original :). I'll try and test it on my box at home and if I can't replicate the issue, than it must be something specific to the machine in the office.

[19:13] *** vrurg joined
[19:13] *** jameslenz left
[19:14] <b2gills> kaiser_: Really if you want to speed up the code it might be best to run the profiler, and look at what's taking the longest to run.

[19:14] *** Kaiepi left
[19:15] <kaiser_> Sounds good. How can I do that?

[19:15] <b2gills> perl6 --profile example.p6 file.in

[19:15] <kaiser_> Thx!

[19:15] <b2gills> It generates an html report

[19:19] *** hoelzro joined
[19:32] *** hythm left
[19:32] *** Kaiepi joined
[19:41] *** brrt joined
[19:41] *** pmurias left
[19:41] *** pmurias joined
[19:46] *** dct joined
[20:05] <[Coke]> tbrowder_: btw, please understand I am not attempting to be negative about this stuff; it's just much easier to have opinions on stuff that already exists. Thanks so much for getting things moving on this project!

[20:06] *** brrt left
[20:07] *** brrt joined
[20:11] *** HaraldJoerg left
[20:13] *** psychoslave left
[20:18] *** AlexDaniel joined
[20:26] *** zakharyas joined
[20:27] *** sdo joined
[20:27] <sdo> hello

[20:28] <sdo> do you know a place where I can find info regarding inheritance with Perl 6 and OO

[20:28] <sdo> thanx in advence

[20:29] *** timo2timo joined
[20:30] <raschipi> sdo: https://docs.perl6.org/language/objects#Inheritance

[20:32] *** sdo left
[20:36] *** SCHAPiE left
[20:41] *** brrt left
[20:41] <Geth> ¦ doc: 11d081bd19 | (Aleks-Daniel Jakimenko-Aleksejev)++ | manage-page-order.p6

[20:41] <Geth> ¦ doc: Unbust doc build

[20:41] <Geth> ¦ doc: 

[20:41] <Geth> ¦ doc: Argh. My guess is that the problem is in Pod::To::BigPage as it

[20:41] <Geth> ¦ doc: expects a non-empty subtitle and starts crying if it's empty. That

[20:41] <Geth> ¦ doc: should be fixed properly, but for now I just want to let the docs

[20:41] <Geth> ¦ doc: website rebuild. Also, we should ot have these categories as table

[20:41] <Geth> ¦ doc: rows, but I believe that the work for that is in progress.

[20:41] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/11d081bd19

[20:44] *** SCHAPiE joined
[20:47] *** timo2timo left
[20:55] *** brrt joined
[20:55] *** brrt left
[20:58] *** Ven`` joined
[21:01] <raschipi> Can we have an htmlifarevable that tells us about doc rebuilds?

[21:02] *** skids left
[21:05] *** zakharyas left
[21:05] *** stee3 left
[21:06] *** itaipu left
[21:09] *** jameslenz joined
[21:10] *** raschipi left
[21:12] <AlexDaniel> well, you can just take a look at https://docs.perl6.org/build-log/

[21:13] <El_Che> AlexDaniel: maybe the bots could be melted into one. By now this channel has more bots than Perl 5 OO systems

[21:14] *** sno joined
[21:14] *** jameslenz left
[21:14] *** stee joined
[21:15] <AlexDaniel> El_Che: is it a problem?

[21:16] <AlexDaniel> I mean, there are lots of people in this channel, and just a small % of them are bots. And the problem is …?

[21:16] <AlexDaniel> rejoins are annoying that I agree, but lately these don't happen that often

[21:17] <AlexDaniel> and if I was to change something, I'd rewrite these bots to use Matrix (so that they're always online)

[21:17] <AlexDaniel> instead of IRC directly I mean

[21:21] <geekosaur> El_Che's going a bit botty?

[21:21] <ingy> what time of day is masak around?

[21:21] <AlexDaniel> .seen masak

[21:21] <yoleaux> I saw masak 07:44Z in #moarvm: * masak .oO( Saruman )

[21:22] <ingy> UTC?

[21:23] <AlexDaniel> yes

[21:23] <AlexDaniel> that's actually very early, hmm… (or very late?)

[21:24] <ingy> 14 hours ago

[21:24] <AlexDaniel> ingy: I'd say 18-20 is a better bet

[21:25] <ingy> 18-20?

[21:25] <AlexDaniel> yeah, 18:00 ⌁ 20:00

[21:25] <ingy> he's only here 2 hours a day?

[21:26] <ingy> how efficient!

[21:26] <AlexDaniel> I'm judging by messages like http://colabti.org/irclogger/irclogger_log/perl6?date=2018-07-14#l595

[21:29] *** jast joined
[21:33] <tbrowder_> AlexDaniel: i’m getting close to pushing PR on doc issue #2185, reorg, and the Language pages work fine without a subtitle for the group entries on my local machine. the reorg i hope will help speed up the Language page redo after 2185 is merged.

[21:33] <AlexDaniel> cool

[21:40] <Geth> ¦ doc: tbrowder++ created pull request #2189: Doc reorg

[21:40] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2189

[21:43] <El_Che> AlexDaniel: problem? not at all

[21:49] <AlexDaniel> tbrowder_: cool, left some comments

[21:50] <AlexDaniel> tbrowder_: why are we even trying to have build/ in git?

[21:51] <AlexDaniel> tbrowder_: isn't the whole point of having a build/ directory so that you can wipe it completely at any time and also put it into .gitignore

[21:51] *** lizmat joined
[21:54] <tbrowder_> well, i think travis puked if the build dirs aren’t there—maybe some yml work could help that

[21:57] <AlexDaniel> I don't think there's anything travis-specific going on there

[21:57] <AlexDaniel> try removing the build/ directory locally and see if stuff works

[21:59] *** Grrrr left
[22:00] *** Grrrr joined
[22:00] <tbrowder_> ok (he says, grimacing), you mean push that change to my PR?

[22:01] <tbrowder_> here goes...

[22:02] *** kerframil joined
[22:05] *** duck_tape joined
[22:05] <AlexDaniel> tbrowder_: there are merge conflicts with manage-page-order.p6 but you can ignore that for now

[22:06] <tbrowder_> roger

[22:06] <AlexDaniel> that's because I touched that file trying to fix the doc build…

[22:07] <tbrowder_> i just pushed the deleted build dir, no Makefile change yet

[22:13] *** pmurias left
[22:19] *** pmurias joined
[22:20] <tbrowder_> ok, i obviously haven’t been paying attention. have we bailed out ofntravis completely?

[22:21] <tbrowder_> do i need to learn a brand new config? i’m getting too old for all these changes!

[22:23] <AlexDaniel> tbrowder_: no, travis is still there

[22:24] <AlexDaniel> it did not run for your pull request for some reason, but I don't know why

[22:25] <tbrowder_> shippable doesn’t seem to have a problem with no build dir if i read it right...

[22:38] <DrForr> o/

[22:40] <DrForr> Has the fact that the "Cannot locate native library '..':" error doesn't state a filename/line been reported?

[22:43] *** kaiser_ left
[22:47] *** pmurias left
[22:47] *** pecastro left
[22:53] <AlexDaniel> DrForr: heh just 209 tickets to look through: https://github.com/rakudo/rakudo/issues?q=is%3Aopen+is%3Aissue+label%3ALTA https://fail.rakudo.party/t/LTA

[22:54] <DrForr> I'll have a look, thanks. This is the first yak on the way to getting Cro working again.

[22:55] <AlexDaniel> DrForr: fwiw I don't think it was

[22:55] <AlexDaniel> I also looked at nativecall tickets, nothing there

[22:55] <AlexDaniel> well, I mean, not relevant to that issue

[22:55] <AlexDaniel> s/not/

[22:55] <AlexDaniel> /

[22:55] <DrForr> You don't think it was reported? I'll look first.

[22:56] <AlexDaniel> yea

[22:57] <DrForr> "Not found module" message does not include file - maybe related, but not quite.

[22:58] <DrForr> 'kay, I don't see it. Is the appopriate way still a message to [email@hidden.address]
[22:59] <DrForr> *appropriate

[23:05] <timotimo> there's also the github issue tracker

[23:05] <timotimo> it's slightly favoured over RT

[23:07] *** rindolf left
[23:07] <DrForr> Should I just file in GH?

[23:08] <AlexDaniel> DrForr: yes

[23:08] <AlexDaniel> ↑ that's to your last question :)

[23:09] *** jameslenz joined
[23:09] <DrForr> Thanks. Doing so in a sec.

[23:14] *** wamba left
[23:14] *** koto joined
[23:14] *** jameslenz left
[23:16] *** sena_kun left
[23:22] *** duck_tape left
[23:23] <DrForr> https://github.com/rakudo/rakudo/issues/2101 # If someone could add a 'LTA' label? (I seem unable to, otherwise I would.)

[23:24] <timotimo> done

[23:32] <Geth> ¦ perl6-pod-to-bigpage: 195273a014 | (Tom Browder)++ (committed using GitHub Web editor) | bin/pod2onepage

[23:32] <Geth> ¦ perl6-pod-to-bigpage: reformat to ease understanding code

[23:32] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/commit/195273a014

[23:34] *** diakopter left
[23:37] *** koto left
[23:48] <DrForr> My current thinking is that I'd love to sit down and write a quick wiki in Cro so that there are more real-world applications out there, but it relies on IO::Socket::Async::SSL, and that seems to have the problem I had with Readline, and probably still do in a few regards.

[23:58] *** titsuki_ joined
