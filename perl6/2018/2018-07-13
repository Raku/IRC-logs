[00:07] *** lizmat left
[00:09] *** ChoHag left
[00:09] *** gabiruh left
[00:11] <Geth> ¦ doc: randyl++ created pull request #2171: Google search option

[00:11] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2171

[00:15] <Geth> ¦ doc: 764b0e76cd | (Randy Lauen)++ | template/search_template.js

[00:15] <Geth> ¦ doc: add extra menu item at the bottom for site search

[00:15] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/764b0e76cd

[00:15] <Geth> ¦ doc: 55eeb54412 | (Randy Lauen)++ | 10 files

[00:15] <Geth> ¦ doc: Merge branch 'master' into google-search-option

[00:15] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/55eeb54412

[00:15] <Geth> ¦ doc: 74d38f66a8 | (Zoffix Znet)++ (committed using GitHub Web editor) | template/search_template.js

[00:15] <Geth> ¦ doc: Merge pull request #2171 from randyl/google-search-option

[00:16] <Geth> ¦ doc: 

[00:16] <Geth> ¦ doc: Google search option

[00:16] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/74d38f66a8

[00:21] *** raschipi left
[00:23] <Geth> ¦ doc/dmaestro-correct-temperature-example: 8020bdb666 | dmaestro++ (committed using GitHub Web editor) | doc/Type/Real.pod6

[00:23] <Geth> ¦ doc/dmaestro-correct-temperature-example: Do the correct Fahrenheit to Kelvin conversion.

[00:23] <Geth> ¦ doc/dmaestro-correct-temperature-example: 

[00:23] <Geth> ¦ doc/dmaestro-correct-temperature-example: Fix the Fahrenheit to Kelvin / Celsius factor, and update expected result.

[00:23] <Geth> ¦ doc/dmaestro-correct-temperature-example: review: https://github.com/perl6/doc/commit/8020bdb666

[00:25] <Geth> ¦ doc: dmaestro++ created pull request #2172: Do the correct Fahrenheit to Kelvin conversion.

[00:25] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2172

[00:26] *** raynold left
[00:32] <Geth> ¦ doc: 8020bdb666 | dmaestro++ (committed using GitHub Web editor) | doc/Type/Real.pod6

[00:32] <Geth> ¦ doc: Do the correct Fahrenheit to Kelvin conversion.

[00:32] <Geth> ¦ doc: 

[00:32] <Geth> ¦ doc: Fix the Fahrenheit to Kelvin / Celsius factor, and update expected result.

[00:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8020bdb666

[00:32] <Geth> ¦ doc: b3abae1430 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Real.pod6

[00:32] <Geth> ¦ doc: Merge pull request #2172 from perl6/dmaestro-correct-temperature-example

[00:32] <synopsebot> Link: https://doc.perl6.org/type/Real

[00:32] <Geth> ¦ doc: 

[00:32] <Geth> ¦ doc: Do the correct Fahrenheit to Kelvin conversion.

[00:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b3abae1430

[00:44] *** wamba joined
[00:45] *** MasterDuke left
[00:45] <Geth> ¦ doc: 9fd6df1b96 | dmaestro++ (committed using GitHub Web editor) | doc/Type/Cool.pod6

[00:45] <Geth> ¦ doc: Fix broken linke to 'traps'

[00:45] <Geth> ¦ doc: 

[00:45] <Geth> ¦ doc: Added missing parens to match the section fragment correctly

[00:45] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9fd6df1b96

[00:45] <synopsebot> Link: https://doc.perl6.org/type/Cool

[00:48] *** aborazmeh joined
[00:48] *** aborazmeh left
[00:48] *** aborazmeh joined
[01:03] *** benjikun joined
[01:04] <benjikun> If I'm relying on user input for what I'm using to create a date object, e.g. '2017-08-30' and Date.new($inputtedText)

[01:05] <benjikun> What's the best way to verify that the date could be correctly parsed without exitting and without using a try block

[01:05] <benjikun> should I just CATCH in this case?

[01:05] *** MasterDuke joined
[01:06] *** jameslenz joined
[01:06] <geekosaur> hrm. shouldn't that produce a Failure instead of a hard error?

[01:07] <benjikun> geekosaur: Died for me with the signatures not matching

[01:07] <[Coke]> m: say Date.new('this is crap').WHAT

[01:07] <camelia> rakudo-moar 612d071b8: OUTPUT: «Invalid Date string 'this is crap'; use yyyy-mm-dd instead␤  in block <unit> at <tmp> line 1␤␤»

[01:07] <geekosaur> yes, thatr's what I'm saying

[01:07] <geekosaur> it really oiught to package that in a Failure and let you catch it

[01:07] <[Coke]> m: my $a = try Date.new('this is crap'); say $a.WHAT;

[01:07] <camelia> rakudo-moar 612d071b8: OUTPUT: «(Any)␤»

[01:08] <benjikun> just didn't know if try was the best option for avoiding a crash

[01:08] <geekosaur> currently yes, it looks like

[01:09] *** molaf left
[01:09] <benjikun> mk, ty

[01:09] <geekosaur> or if there's a compatibility issue, maybe a named parameter to switch it to producing a Failure instead of a hard exception

[01:10] *** jameslenz left
[01:21] *** molaf joined
[01:35] *** gabiruh joined
[01:36] *** spycrab0 left
[01:44] *** raynold joined
[01:50] *** markoong left
[01:50] *** fake_space_whale joined
[01:57] *** salasrod joined
[02:02] *** aborazmeh left
[02:25] *** wamba left
[02:27] *** wamba joined
[02:43] <Geth> ¦ doc: ed239210e9 | (Randy Lauen)++ | template/header.html

[02:43] <Geth> ¦ doc: change wording of no-results message to match the new site-search menu item

[02:43] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ed239210e9

[03:06] *** jameslenz joined
[03:11] *** jameslenz left
[03:14] *** gabiruh left
[03:29] *** salasrod left
[03:29] *** kerframil left
[03:32] <Geth> ¦ doc: 7ebdcf6a6d | (JJ Merelo)++ | doc/Language/101-basics.pod6

[03:32] <Geth> ¦ doc: Eliminates intro

[03:32] <Geth> ¦ doc: 

[03:32] <Geth> ¦ doc: Which was probably OK for the book, but the reference to Perl is probably not needed. Since this intro is pretty much complete and adapted to the site, this closes #2145.

[03:32] <Geth> ¦ doc: 

[03:32] <synopsebot> Link: https://doc.perl6.org/language/101-basics

[03:32] <Geth> ¦ doc: It might be interesting to add links to other parts of the documentation, but so far I think it's ready.

[03:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7ebdcf6a6d

[03:40] *** itaipu left
[03:51] <Geth> ¦ doc: kjkuan++ created pull request #2173: Correct and clarify some parts of ruby-to-perl6 nutshell.

[03:51] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2173

[04:00] *** wamba left
[04:01] *** wamba joined
[04:09] <fake_space_whale> Do perl 6 grammars support assigning scores to different parsings of a string like if one was doing natural language processing?

[04:27] *** Ven` joined
[04:29] *** molaf left
[04:32] *** Ven` left
[04:43] *** tokomer joined
[04:50] *** curan joined
[04:57] *** wamba left
[04:59] *** wamba joined
[05:03] <moritz> fake_space_whale: no, they are designed for determinitic parsing

[05:04] <fake_space_whale> thank you

[05:06] *** xtreak joined
[05:07] *** jameslenz joined
[05:08] *** telex joined
[05:11] *** jameslenz left
[05:12] <Geth> ¦ doc: aeb66b4da0 | (Jack Kuan)++ | 2 files

[05:12] <Geth> ¦ doc: Correct and clarify some parts of ruby-to-perl6 nutshell.

[05:12] <Geth> ¦ doc: 

[05:12] <Geth> ¦ doc: Also fixed the Dockerfile so that make docker-htmlify works.

[05:12] <Geth> ¦ doc: Specifically, I made it no longer purge the buildDeps because when

[05:12] <Geth> ¦ doc: npm install in highlights/, it needs build-essentials to compile some

[05:12] <Geth> ¦ doc: native module.

[05:12] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/aeb66b4da0

[05:12] <Geth> ¦ doc: e5ea303291 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | 2 files

[05:12] <Geth> ¦ doc: Merge pull request #2173 from kjkuan/fix-dockerfile-and-rb2p6

[05:12] <Geth> ¦ doc: 

[05:12] <Geth> ¦ doc: Correct and clarify some parts of ruby-to-perl6 nutshell.

[05:12] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e5ea303291

[05:18] *** fake_space_whale left
[05:22] *** xtreak left
[05:23] *** xtreak joined
[05:29] *** nebuchadnezzar joined
[05:34] *** fake_space_whale joined
[05:34] *** robertle left
[06:03] *** fake_space_whale left
[06:05] *** ufobat_ joined
[06:07] *** Tison joined
[06:07] <Tison> m: say $*KERNEL.hostname

[06:07] <camelia> rakudo-moar 612d071b8: OUTPUT: «No such method 'hostname' for invocant of type 'Kernel'␤  in block <unit> at <tmp> line 1␤␤»

[06:08] *** Tison left
[06:11] *** xtreak_ joined
[06:14] *** xtreak left
[06:20] *** troys left
[06:27] <masak> AlexDaniel: I'll try to upgrade my Rakudo and run Yapsi's test suite on it.

[06:27] <yoleaux> 12 Jul 2018 16:01Z <AlexDaniel> masak: can you please take a look at https://github.com/rakudo/rakudo/issues/2057 ?

[06:27] <yoleaux> 12 Jul 2018 16:02Z <AlexDaniel> masak: tests simply say that things did not compile, without any error or other help. I can investigate later, but for now that's all I see

[06:27] <masak> (hi, #perl6)

[06:33] <moritz> \o

[06:37] *** konsolebox left
[06:41] *** konsolebox joined
[06:42] <masak> hm, the error seems path-dependent

[06:43] <Geth> ¦ doc: 0141e994d9 | Coke++ | doc/Language/rb-nutshell.pod6

[06:43] <Geth> ¦ doc: whitespace

[06:43] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0141e994d9

[06:43] <Geth> ¦ doc: 8ad77c01e6 | Coke++ | doc/Language/rb-nutshell.pod6

[06:43] <Geth> ¦ doc: avoid dd, pass xt/examples*

[06:43] <synopsebot> Link: https://doc.perl6.org/language/rb-nutshell

[06:43] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8ad77c01e6

[06:46] *** robertle joined
[06:52] <masak> or rather, the error happens a few iterations into running exactly the same code

[06:52] <masak> seems to happen even at --optimize=0

[07:05] <masak> hm, it also fails a little bit indeterministically

[07:05] <masak> though usually after 4..5 iterations

[07:07] *** jameslenz joined
[07:07] *** xtreak_ left
[07:12] *** jameslenz left
[07:13] <masak> ooh, now I've minimized enough that I get a stacktrace :)

[07:13] <masak> that should simplify things

[07:15] *** eliasr joined
[07:16] <masak> minimizing the code (predictably) pushes up the number of iterations

[07:16] <masak> maybe this is GC-related?

[07:22] <moritz> masak: have you tried setting MVM_SPESH_DISABLE=1

[07:22] <moritz> as an environment variable?

[07:22] *** tokomer left
[07:22] <moritz> --optimize=0 only disables static optimizations

[07:25] <masak> no, haven't tried that

[07:26] <masak> I hypothesize that it'll make the thing go away -- trying :)

[07:26] <masak> ...yep, confirmed

[07:26] <AlexDaniel> it should be a spesh issue

[07:26] <AlexDaniel> yeah

[07:26] <masak> ok, down to 35 lines of code

[07:26] <masak> from about 600

[07:26] <masak> I expect to be able to turn this into a one-liner soonish

[07:27] <AlexDaniel> that sounds awesome, thanks

[07:27] <masak> tangentially, I'm happy Yapsi delivers at least this kind of service nowadays ;)

[07:28] * AlexDaniel still has 8 modules to check… this release is fun :)

[07:28] <AlexDaniel> some releases I don't even have to bisect, but this one is definitely more interesting

[07:33] *** pecastro joined
[07:35] <masak> 18 lines.

[07:36] *** spycrab0 joined
[07:40] *** domidumont joined
[07:41] *** rindolf joined
[07:43] <AlexDaniel> .seen shinobi

[07:43] <yoleaux> I haven't seen shinobi around.

[07:43] <masak> 14 lines.

[07:45] <masak> 8 lines.

[07:46] *** domidumont left
[07:46] <AlexDaniel> well, at least it will be closed with tests :)

[07:47] *** domidumont joined
[07:49] <masak> m: "" ~~ /{ (make 0 for 0) }/ && .say for ^100

[07:49] <camelia> rakudo-moar 612d071b8: OUTPUT: «0␤Cannot bind attributes in a Nil type object␤  in regex  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤22␤23␤24␤25␤26␤27␤28␤2…»

[07:49] <masak> AlexDaniel: got it :)

[07:49] <AlexDaniel> bisect: "" ~~ /{ (make 0 for 0) }/ && .say for ^100

[07:49] <bisectable6> AlexDaniel, Bisecting by exit code (old=2015.12 new=612d071). Old exit code: 0

[07:49] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/ed649b6223c24af74abd09a5b3ff4f71

[07:49] <bisectable6> AlexDaniel, (2018-07-09) https://github.com/rakudo/rakudo/commit/c2446b03fa2341c6708277df8667e6356201cc21

[07:49] <AlexDaniel> yeah, that's the one :)

[07:49] <masak> that's that bump commit again

[07:50] <masak> anyway, I hope that helps

[07:50] <AlexDaniel> masak: leave a comment on the ticket plz

[07:50] <AlexDaniel> with the golf

[07:50] <masak> doing so now.

[07:50] <AlexDaniel> masak: thanks ♥

[07:55] <masak> no worries. I love a good golf.

[07:56] *** sarna joined
[08:02] <masak> someone should write a sticky note and put it on my desk: "when masak says 'it happens after a few iterations, is it the GC?', then it's spesh" :P

[08:15] <masak> is there a way to bisect on MoarVM versions?

[08:15] <masak> I see a lot of spesh work in the latest bump -- it would probably help immensely if we could locate which MoarVM commit caused the failure

[08:16] <masak> s/versions/commits/

[08:32] <Altreus> I see two implementations of lazy. Is either preferred?

[08:47] <moritz> Altreus: which implementations are you talking about?

[08:51] *** aborazmeh joined
[08:51] *** aborazmeh left
[08:51] *** aborazmeh joined
[09:06] *** sena_kun joined
[09:07] *** jameslenz joined
[09:07] <samebchase> I'm writing some introductory code in a file, and running it with `perl6 first.pm`. I want to know how I can leave the REPL running and repeatedly keep "loading" the file there as I make changes. Kinda like "import <filename>" in the Python interpreter.

[09:10] <lookatme> perl6 -I. -Mfirst 

[09:10] <lookatme> samebchase, try this

[09:10] *** sarna left
[09:11] *** jameslenz left
[09:12] <samebchase> lookatme: cool, now how do I reload the file while the REPL is still running. Basically, I want to start the REPL /first/ and then load files into it, as necessary.

[09:12] <samebchase> Is there some kind of reload module command?

[09:12] <lookatme> reload ?? IDK

[09:14] <lookatme> in the REPL, you can also using this sentence `use lib '.'; use first;` load the module

[09:14] <lookatme> but IDK how to reload it

[09:14] <lookatme> off work now :) bye

[09:15] <samebchase> lookatme: thanks so much!

[09:19] *** lizmat joined
[09:47] *** aborazmeh left
[09:56] *** gabiruh joined
[10:01] *** raynold left
[10:06] *** scimon joined
[10:09] *** gabiruh left
[10:11] *** jeromelanteri joined
[10:17] *** w17t joined
[10:17] *** HaraldJoerg joined
[10:42] *** w17t left
[10:48] <AlexDaniel> zostay: any news? :)

[10:53] <Altreus> moritz: There's AttrX::Lazy and Attribute::Lazy

[10:54] <Altreus> secondarily, is lazy on the roadmap for core?

[10:56] *** diego_k joined
[10:57] *** gabiruh joined
[10:57] <AlexDaniel> lazy attributes, interesting

[10:57] <AlexDaniel> Altreus: it's not on the roadmap

[10:58] <jnthn> However, `is cached` on methods *is* something we have in mind, and were considering making the cache per instance.

[10:58] <lizmat> hmmm... wonder of Object::Trampoline could work there

[10:58] <jnthn> For putting off a computation until first needed that seems much more natural. I mean, the storage is an implementation detail in that case.

[10:59] <lizmat> has $.dbh = trampoline { DBIish.connect( ... ) };

[10:59] <Altreus> I saw `is cached` in one of those docs but it had the proviso that the lazy attribute did it if it wasn't provided at constructor time

[11:00] *** w17t joined
[11:05] *** markoong joined
[11:05] *** sarna_ joined
[11:07] *** jameslenz joined
[11:08] *** sarna_ is now known as sarna

[11:12] *** jameslenz left
[11:20] *** jeromelanteri left
[11:29] <jkramer> In a sub that takes some code/callable as argument, can I specify the arity or even signature of that argument?

[11:29] <jkramer> I'm sure I've asked this before, this situation seems very familiar :D

[11:30] <lizmat> &code where *.arity == 1

[11:30] <lizmat> off the top of my head

[11:30] <lizmat> m: say { ... }.arity

[11:30] <camelia> rakudo-moar 3905ac0bc: OUTPUT: «0␤»

[11:31] <lizmat> m: say -> $a { ... }.arity

[11:31] <camelia> rakudo-moar 3905ac0bc: OUTPUT: «1␤»

[11:31] <jkramer> lizmat: That works, thanks!

[11:34] <tyil> Guido is stepping down from his Python role https://www.theregister.co.uk/2018/07/13/python_creator_guido_van_rossum_quits/

[11:35] <lizmat> yeah, it was all over the (Hacker) News yesterday

[11:35] <tyil> wow

[11:35] <tyil> I only just heard it on some obscure irc channel

[11:36] <lizmat> my take: Python is now going through the motions that Perl did in the late 1990

[11:36] <lizmat> 's

[11:36] <tyil> I wasn't using Perl back then, so I don't know what that will entail

[11:39] <lizmat> think flamewars on p5p with 500+ messages a day

[11:39] <tyil> ah

[11:41] <lizmat> I didn't notice that all of that had happened until I was trying to index the p5p mailing list for a search engine

[11:41] <lizmat> and started wondering why things were so slow in indexing on some days

[11:41] <lizmat> (this was 2003)

[11:44] *** mniip left
[11:46] <Juerd> Python got a nice new feature that imho was long overdue, but they paid a very high price :(

[11:46] *** mniip joined
[11:47] <Juerd> (I do think a more generic solution (perhaps like Perl's "do BLOCK") to allow any statement in an expression might have been nicer, but apparently the other thing was controversial enough by itself)

[11:49] <Juerd> "If using a flavour of the month language means that Perl finally crawls away and dies then thats good enough for me."  -- https://forums.theregister.co.uk/forum/1/2018/07/13/python_creator_guido_van_rossum_quits/#c_3565594

[11:50] <Juerd> I wonder what kind of trauma happened to people who are hateful like that.

[11:50] <jkramer> :D

[11:50] *** jeromelanteri joined
[11:51] <timotimo> matt's script archive maybe?

[11:51] <jkramer> I was once asked by some guy if perl was supported by git because it's so old... I didn't know quite what to respond to that.

[11:52] <Juerd> jkramer: My standard reply is "C is older. Works fine."

[11:52] <jkramer> Juerd: Yeah that's the obvious response, I was just wondering too long about whether he was joking or actually an idiot, then the moment was over :)

[11:53] <jkramer> I still don't know to this day.

[11:53] <AlexDaniel> jkramer: organize a git basics workshop and invite them to it

[11:54] <Juerd> "git even works well with pure ascii"

[11:54] <jkramer> I'd rather not. :)

[11:55] <jkramer> Juerd: But HOW?! isn't ASCII too old?

[11:55] <Juerd> jkramer: Compatibility mode, I reckon

[11:56] <jkramer> Juerd: Is that the one where you change linebreaks from \n to \r\n?

[11:56] <Juerd> jkramer: But I tried and it doesn't seem to care about the lack of emoji.

[11:57] <jkramer> Oh jeez, that reminds me of my driving teacher ~10 years ago trying to explain to me how gear changes work with a computer analogy because he know I'm in IT

[11:58] <jkramer> I almost had an accident because I laughed so hard.

[11:59] <jkramer> He was like "you know, when you're at your computer and you have to programs and one of them runs really fast and the other one is very slow... That can't work!! And it's the same with changing from a high gear to lower one at high speed and vice versa"

[11:59] <jkramer> *two

[11:59] <jkramer> "In the end your computer will break!"

[12:00] <lizmat> well, *that* part he got right  :-)

[12:00] <lizmat> that's why we make backups  :-)

[12:00] <jkramer> I don't need backups, I just make sure all programs are running at the same speed.

[12:08] <masak> Juerd: I think besides the fact that it's simply fashionable to hate on Perl, the fact is that the great majority of people who have seen only a little Perl have probably seen very badly written Perl.

[12:09] <masak> put differently, I think it's mostly people who are well-versed/experienced in Perl that also come across Perl code worth emulating in style and structure

[12:10] <Summertime> its hard for outsiders to tell the difference between badly and goodly written perl :u

[12:10] <masak> no, I don't think so, really

[12:10] <tadzik> eh, generally outsiders only recognize syntactic clarity, at bets

[12:10] *** hami joined
[12:11] <tadzik> the complexity itself is usually not skin-deep, syntactic

[12:11] <tadzik> I've seen plenty of awful python even if it looked okay at a glance :)

[12:14] *** hami left
[12:30] <masak> you're saying that language haters are superficial and fail to take a wider context into account...? :P

[12:30] <tadzik> :P

[12:31] <tadzik> shocking :0

[12:31] <masak> sometimes I wonder whether a "programmer's driver's test" could have as a part of it "I know that syntax and semantics are different things"

[12:32] <masak> at least it would under my Malovelent Dictatorship, mwha

[12:32] <masak> Malevolent*

[12:32] <tadzik> masak: I head there's an opening for that recently... ;)

[12:33] <tadzik> just remember to keep a lot of whitespace in your resume

[12:33] <masak> right, because (as we just learned from the above discussion) whitespace is the _only_ distinguishing_ feature of... whatever language it is you're talking about

[12:34] <tadzik> for @sure {}

[12:37] *** Veesh joined
[12:45] <jkramer> m: my $x = 0; say (^10).map: { $x ++ + $++ }

[12:45] <camelia> rakudo-moar 6850a64f8: OUTPUT: «(0 1 2 3 4 5 6 7 8 9)␤»

[12:45] <jkramer> m: my $x = 0; say (^10).map: { $x ++ + $++ }; say $x

[12:45] <camelia> rakudo-moar 6850a64f8: OUTPUT: «(0 1 2 3 4 5 6 7 8 9)␤0␤»

[12:46] <jkramer> Shouldn't this either increase $x or show some warning? What does the standalone ++ do here?

[12:46] *** Veesh left
[12:47] <jnthn> It's not

[12:47] <masak> at a guess, you got three prefix + in a row

[12:47] <jnthn> It'd be an infix + followed by two prefix +s

[12:47] <masak> right, that

[12:47] *** Summertime left
[12:49] <jkramer> And the prefix ++ applies to $? Shouldn't that crash too since $ also has a postfix ++?

[12:49] <masak> jkramer: there's no prefix ++ in your code

[12:49] <jkramer> Didn't you just say there's two prefix +s? :)

[12:49] <masak> only, in order, $x, infix +, prefix +, prefix +, $, postfix +

[12:50] <masak> jkramer: yes, but there's a difference between prefix:<++> and two prefix:<+>

[12:50] *** Summertime joined
[12:50] <jkramer> Oh so the two latter +s are considered single +s, which do what? Force numeric context?

[12:50] <masak> you got the latter because you wrote the plusses apart, with whitespace in between

[12:50] <masak> jkramer: yes, numify

[12:51] <jkramer> m: say + + "15"

[12:51] <camelia> rakudo-moar 6850a64f8: OUTPUT: «15␤»

[12:51] <jkramer> m: say + + + + + + + + + + + + "15"

[12:51] <camelia> rakudo-moar 6850a64f8: OUTPUT: «15␤»

[12:51] <masak> if a warning is merited for anything, it's that you have two operators written together which masquerade as another common operator

[12:51] <jkramer> That doesn't seem right but could be use for fun code obfuscation and ascii art :)

[12:51] <masak> but there's a limit to how much you can protect people from themselves

[12:52] <masak> why doesn't it seem right that you can have many prefixes in a row?

[12:52] <jnthn> m: say ??42

[12:52] <camelia> rakudo-moar 6850a64f8: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Expected a term, but found either infix ?? or redundant prefix ?␤  (to suppress this message, please use a space like ? ?)␤at <tmp>:1␤------> 3say ??7⏏0542␤»

[12:52] <jnthn> hah, bad example :)

[12:52] <jnthn> m: say !!42

[12:52] <camelia> rakudo-moar 6850a64f8: OUTPUT: «True␤»

[12:52] <jnthn> m: say ~~42

[12:52] <camelia> rakudo-moar 6850a64f8: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Expected a term, but found either infix ~~ or redundant prefix ~␤  (to suppress this message, please use a space like ~ ~)␤at <tmp>:1␤------> 3say ~~7⏏0542␤»

[12:52] <masak> the fact that you can do a useful thing in a useless way is not a (strong) argument against the useful thing

[12:52] <jnthn> That's the one I was after :P

[12:52] <jkramer> Well technically yet. I just doesn't look right :)

[12:52] <jkramer> Not complaining though :)

[12:52] <masak> m: say ? ?42

[12:52] <camelia> rakudo-moar 6850a64f8: OUTPUT: «True␤»

[12:53] <jnthn> And yeah, it's a syntactic, not ASTstic, check

[12:53] <jkramer> m: say + ~ + ~ + ~ + ~ + ~ + ~ 15

[12:53] <camelia> rakudo-moar 6850a64f8: OUTPUT: «15␤»

[12:53] * masak .oO( the check is not on the ASTism spectrum )

[12:57] *** curan left
[12:59] *** konsolebox left
[12:59] *** molaf joined
[13:01] *** w17t left
[13:07] *** jameslenz joined
[13:11] *** lizmat left
[13:11] *** reportable6 left
[13:11] *** reportable6 joined
[13:11] *** ChanServ sets mode: +v reportable6

[13:12] <Altreus> Hmm, the docs for Hash don't say whether order is preserved. So a) is it and b) if not, is there one that does?

[13:12] *** jameslenz left
[13:16] <sena_kun> Altreus, it is not.

[13:16] <timotimo> it's even extra-randomized now

[13:18] *** pmurias joined
[13:18] <Altreus> how can I best have an ordered set that I can look up by key? In perl5 we just keep an array and a hash

[13:22] <tobs> Altreus: I recall there's an ArrayHash module

[13:23] <tobs> eco: ArrayHash  # is this how you operate it?

[13:23] <buggable> tobs, Nothing found

[13:24] <Altreus> https://github.com/zostay/perl6-ArrayHash 🤔

[13:25] *** itaipu joined
[13:26] *** lizmat joined
[13:28] <jkramer> I need some help with a presumably simple logic problem, I'm too tired to wrap my head around it. I have a grid of stuff and want to get the anti-diagonals. So far I got this:

[13:28] <jkramer> m: my @grid = [1,2,3], [4,5,6], [7,8,9]; for ^@grid -> $y { my $x = 0; .Seq.say for roundrobin @grid.skip($y).map(*.reverse.skip($x++)) }

[13:28] <camelia> rakudo-moar 6850a64f8: OUTPUT: «(3 5 7)␤(2 4)␤(1)␤(6 8)␤(5 7)␤(4)␤(9)␤(8)␤(7)␤»

[13:30] <jkramer> As you can see it repeats subsequences of diagonals it already found, ie 5,7 from 3,5,7 or 4 from 2,4, 7 from 3,5,7 and 8 from 6,8

[13:32] <jkramer> It should only return 3,5,7, 2,4, 1, 6,8 and 9

[13:33] *** veesh joined
[13:33] <veesh> which perl 5 web framework is bailador most similar to?

[13:33] <timotimo> dancer

[13:33] <veesh> is anyone working on something like mojolicious?

[13:34] <timotimo> i barely know anything about mojolicious; is its main strength async i/o per chance?

[13:34] <jkramer> Yes

[13:34] <timotimo> in that case, perhaps cro fits the bill

[13:35] <jkramer> I'd say Cro is very similar, but I haven't used cro extensively yet for an educated comparison

[13:35] *** aborazmeh joined
[13:35] *** aborazmeh left
[13:35] *** aborazmeh joined
[13:39] *** llfourn left
[13:41] *** llfourn joined
[13:42] *** aborazmeh left
[13:47] <ufobat_> veesh, bailador is not a dancer clone, there are aspects of mojo in it

[13:47] <ufobat_> e.g. Bailador::Command which is like the commands in mojo

[13:48] <ufobat_> have you seen cro as well?

[13:50] *** spycrab0 left
[13:53] *** pmurias left
[14:04] *** fake_space_whale joined
[14:08] <veesh> ufobat not really, i'm evaluating now whether to do my project in perl 5 or 6

[14:08] <veesh> so i'm seeing what there is

[14:08] <veesh> does either framework have its own job queue?

[14:09] <timotimo> perl6 already includes a ThreadPoolScheduler that's basically a job queue, or do you mean something in a different process?

[14:11] <veesh> eh, i mean something that takes care of retrying and stuff

[14:11] <veesh> i need to scrape stuff in the background

[14:11] <ufobat_> with the high level concurrency features of perl6 you might write your code quite differently compared to perl5

[14:12] <veesh> yeah, i'm kinda excited about the concurrency

[14:26] <El_Che> what ufobat_ says

[14:27] *** warriors joined
[14:28] <Altreus> I'm already finding the concurrency features of P6 easy to work with

[14:28] <Altreus> even with the good libraries for P5, P6 has the edge

[14:30] <veesh> is there a dbi in 6 yet?

[14:30] *** troys joined
[14:30] <ufobat_> there is DBIish

[14:31] <veesh> saw that. what backends does it support?

[14:31] <veesh> also, is there an ORM?

[14:31] <El_Che> Altreus: I limit myself to forks on Perl 5

[14:32] <lizmat> El_Che :-)

[14:32] <lizmat> El_Che: is that "use forks"  or "fork()s" ?

[14:33] <El_Che> are your trying to figure if I use your module :)

[14:34] <lizmat> hasn't been mine for a long time  :-),  but yeah

[14:36] <Altreus> I don't allow myself to go as far as forks in perl5 :P

[14:37] <Altreus> veesh: there is one but it seemed very green and I forgot what it was called

[14:37] <Altreus> (because it didn't look usable yet)

[14:40] <sena_kun> https://github.com/tony-o/perl6-db-orm-quicky ?

[14:40] <sena_kun> also https://github.com/tony-o/perl6-koos

[14:42] *** molaf left
[14:45] *** veesh left
[14:57] *** scimon left
[15:07] *** wamba left
[15:08] *** jameslenz joined
[15:09] *** natrys joined
[15:12] *** jameslenz left
[15:17] *** spycrab0 joined
[15:18] *** benjikun2 joined
[15:20] *** benjikun left
[15:25] *** uzl joined
[15:27] <uzl> hello everybody!

[15:28] <uzl> m: (1, 2).Set (<) (1, 2, 3, 4).Set

[15:28] <camelia> rakudo-moar 83b4c8dcf: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "(<)" in expression ".Set (<) (1, 2, 3, 4).Set" in sink context (line 1)␤»

[15:28] <uzl> m: say (1, 2).Set (<) (1, 2, 3, 4).Set

[15:28] <camelia> rakudo-moar 83b4c8dcf: OUTPUT: «True␤»

[15:28] <uzl> m: say (1, 2)

[15:28] <camelia> rakudo-moar 83b4c8dcf: OUTPUT: «(1 2)␤»

[15:29] <uzl> m: say (1, 2).Set

[15:29] <camelia> rakudo-moar 83b4c8dcf: OUTPUT: «set(1 2)␤»

[15:29] <lizmat> m: say (1, 2) (<) (1, 2, 3, 4)

[15:29] <camelia> rakudo-moar 83b4c8dcf: OUTPUT: «True␤»

[15:29] <lizmat> uzl: you don't actually need to coerce to Set if you use set operators

[15:29] <uzl> m: say (1, 2).Set (<) ((1, 2).Set, (3, 4).Set).Set

[15:29] <camelia> rakudo-moar 83b4c8dcf: OUTPUT: «False␤»

[15:29] <lizmat> the set operator will do any necessary coercions for yu

[15:29] <lizmat> *you

[15:29] <uzl> lizmat: Oh, didn't know that!

[15:29] <warriors> DBIX had a great repuation on P5, was it ever ported to Perl6

[15:30] <lizmat> warriors: it's on the list, after DBI I guess  :-)

[15:30] <lizmat> it's mostly Pure Perl, so that's good

[15:30] <uzl> lizmat: does Perl 6 allow nested sets?

[15:30] <lizmat> uzl: yes it does

[15:30] <lizmat> m: dd (1,2,3,(1,2,3).Set).Set

[15:30] <camelia> rakudo-moar 83b4c8dcf: OUTPUT: «Set.new(3,Set.new(3,1,2),2,1)␤»

[15:31] <warriors> what list,  there is a list?

[15:31] <warriors> :)

[15:31] <uzl> Can I use a certain operator to check if a set is an element (or subset) of another one?

[15:31] <warriors> i want that list

[15:31] <lizmat> warriors: a long list

[15:31] <uzl> m: say (1, 2).Set (<) ((1, 2).Set, (3, 4).Set).Set

[15:31] <camelia> rakudo-moar 83b4c8dcf: OUTPUT: «False␤»

[15:31] <warriors> :)

[15:31] <warriors> an ordered list 

[15:31] <lizmat> uzl: that is a correct result

[15:32] <lizmat> uzl: in case you wonder

[15:32] <uzl> lizmat: can you explain why?

[15:32] <lizmat> you're comparing apples and oranges

[15:32] <lizmat> for a subset, all elements on the left need to occur on the right

[15:32] <lizmat> none of them occur on the right in this case

[15:32] *** epony left
[15:33] <lizmat> left Set has 1,2

[15:33] <lizmat> right set has (1,2).Set and (3,4).Set

[15:33] <uzl> How would I be able to check if a set is a subset of another?

[15:33] *** epony joined
[15:33] <uzl> m: say ((1, 2).Set).Set (<) ((1, 2).Set, (3, 4).Set).Set

[15:33] <camelia> rakudo-moar 199d276b2: OUTPUT: «False␤»

[15:34] <lizmat> hmmm... that *should* be true, I think

[15:34] <uzl> lizmat: Oh, I see! Any way to express left as (1, 2).Set

[15:34] <uzl> ?

[15:34] * lizmat does some test

[15:35] *** p6noob joined
[15:36] <lizmat>  no, it is correct

[15:37] <lizmat> m: say ((1, 2).Set,).Set (<) ((1, 2).Set, (3, 4).Set).Set  # add a comma, so that we're not just coercing a .Set to a .Set, which is a noop

[15:37] <camelia> rakudo-moar 199d276b2: OUTPUT: «True␤»

[15:37] <lizmat> uzl: ^^

[15:37] <uzl> lizmat: That's awesome. A little detail there!

[15:37] <uzl> lizmat: Thanks!

[15:37] <lizmat> uzl: yw

[15:41] *** Khisanth left
[15:42] *** domidumont left
[15:43] *** robertle left
[15:44] *** donpdonp left
[15:45] *** ExtraCrispy joined
[15:54] *** Khisanth joined
[16:06] *** sarna left
[16:20] *** _uzl joined
[16:21] *** uzl left
[16:23] *** konsolebox joined
[16:24] *** konsolebox left
[16:24] *** jiah joined
[16:25] *** konsolebox joined
[16:29] *** fake_space_whale left
[16:34] *** atta joined
[16:38] *** japhb joined
[16:58] *** japhb left
[16:59] *** p6noob_ joined
[17:00] *** japhb joined
[17:01] *** p6noob left
[17:08] *** jameslenz joined
[17:10] *** molaf joined
[17:12] *** jameslenz left
[17:19] *** itaipu left
[17:19] *** jiah left
[17:22] *** _uzl left
[17:23] *** p6noob joined
[17:23] *** ydlr joined
[17:24] *** ambs left
[17:24] *** ambs joined
[17:25] *** p6noob_ left
[17:26] *** xtreak joined
[17:40] *** molaf left
[17:43] *** tokomer joined
[17:44] *** skids joined
[17:45] *** wamba joined
[17:47] *** greppable6 left
[17:47] *** greppable6 joined
[17:55] *** domidumont joined
[18:03] *** domidumont left
[18:06] *** mcmillhj joined
[18:06] *** mcmillhj left
[18:09] *** molaf joined
[18:11] *** mcmillhj joined
[18:12] *** chsanch joined
[18:19] <chsanch> Hi!, is there a way to use something a "cpanfile" with zef? or what's the best/recommended way to declare needed modules for a project?

[18:21] <lizmat> in the META6.json

[18:21] <lizmat> https://docs.perl6.org/language/modules#index-entry-META6.json-META6.json

[18:22] *** itaipu joined
[18:23] *** itaipu left
[18:24] <chsanch> @lizmat thanks! 

[18:24] *** eliasr left
[18:25] *** robertle joined
[18:25] <lizmat> chsanch: you might also want to consider several helper modules such as App::Mi6 and App::Assixt

[18:26] <lizmat> http://modules.perl6.org/dist/App::Assixt:cpan:TYIL

[18:26] <lizmat> http://modules.perl6.org/dist/App::Mi6:cpan:SKAJI

[18:27] *** itaipu joined
[18:28] *** itaipu left
[18:32] *** itaipu joined
[18:33] *** itaipu left
[18:35] <chsanch> Yes, I've used App::Assixt before, and it's great. But I was thinking in something more simple, is to install a few dependencies for some scripts ww are using at work

[18:36] <lizmat> you can zef install . (aka, the current dir)

[18:36] <yoleaux> Zoffix: rakudo.org certs expire tomorrow. Did we fix the renewal issue?

[18:36] <lizmat> Expires: Friday, 5 October 2018 at 20:20:26 Central European Summer Time

[18:37] <lizmat> feels like it has been renewed on 5 July for 3 months ?

[18:37] *** itaipu joined
[18:38] *** itaipu left
[18:42] *** itaipu joined
[18:43] *** buggable left
[18:43] *** buggable joined
[18:43] *** ChanServ sets mode: +v buggable

[18:44] *** buggable left
[18:44] *** itaipu left
[18:45] *** buggable joined
[18:45] *** ChanServ sets mode: +v buggable

[18:45] *** buggable left
[18:47] <moritz> it has

[18:47] <moritz> though the renewal is always 90 days, not 3 months

[18:47] *** itaipu joined
[18:47] *** buggable joined
[18:47] *** ChanServ sets mode: +v buggable

[18:48] *** itaipu left
[18:55] *** xtreak left
[18:56] <lizmat> ah, ok, subtle diff

[18:57] *** eponym joined
[18:57] <lizmat> except Jan/Feb/March in non-leap years  :-)

[18:58] *** epony left
[19:04] *** |oLa| left
[19:05] *** buggable left
[19:07] *** buggable joined
[19:07] *** ChanServ sets mode: +v buggable

[19:08] *** buggable left
[19:08] *** jameslenz joined
[19:08] *** buggable joined
[19:08] *** ChanServ sets mode: +v buggable

[19:12] *** buggable left
[19:12] *** buggable joined
[19:12] *** ChanServ sets mode: +v buggable

[19:13] *** jameslenz left
[19:22] <lizmat> https://exercism.io/tracks/perl6

[19:27] *** mcmillhj left
[19:28] *** mcmillhj joined
[19:29] *** Zoffix joined
[19:30] <Zoffix> Is that by DrForr's brother? :) Same last name :)

[19:31] <lizmat> there are more dogs called "fikkie" (as we would say in Dutch)

[19:31] <Zoffix> heh

[19:32] <Zoffix> warriors: don't know what list was meant, but there IS a Most Wanted Modules list :) https://github.com/perl6/perl6-most-wanted/blob/master/most-wanted/modules.md#most-wanted-modules

[19:33] <Zoffix> veesh: there's also DB::Pg that's got a nice interface

[19:33] <Zoffix> eco: DB::Pg

[19:33] <buggable> Zoffix, DB::Pg 'Perl6 bindings for PostgreSQL': http://modules.perl6.org/dist/DB::Pg:cpan:CTILMES

[19:34] <Zoffix> eco: ArrayHash

[19:34] <buggable> Zoffix, ArrayHash 'An array in a hash in an array... like a turducken': https://github.com/zostay/perl6-ArrayHash 1 other matching results: https://modules.perl6.org/s/ArrayHash

[19:35] <Zoffix> tobs: ^ yes, that's how you operate the bot, but don't include random words in your query

[19:35] <tobs> d'oh

[19:40] *** raynold joined
[19:41] *** eponym left
[19:41] <Geth> ¦ doc: c43e925569 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Hash.pod6

[19:41] <Geth> ¦ doc: Use simpler language

[19:41] <Geth> ¦ doc: 

[19:41] <Geth> ¦ doc: "forces" suggests you can't make non-Scalar value,

[19:41] <Geth> ¦ doc: but you can if you bind.

[19:41] <synopsebot> Link: https://doc.perl6.org/type/Hash

[19:41] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c43e925569

[19:48] <Zoffix> .ask samcv are unordered hashes guaranteed by the language spec or is that an implementation detail? D#2174 https://github.com/perl6/doc/issues/2174

[19:48] <yoleaux> Zoffix: I'll pass your message to samcv.

[19:48] <synopsebot> D#2174 [open]: https://github.com/perl6/doc/issues/2174 Need to note unordering-ge for Map/Hash/QuantHash/Bag/Set/Mix/BagHah/SetHashMixHash

[19:49] <Zoffix> Altreus: if docs don't say something, it's often helpful for that something to be filed as an Issue, so it could be added. I filed the hash ordering thing: https://github.com/perl6/doc/issues/2174 

[19:50] *** epony joined
[19:54] <Zoffix> jkramer: there's also .count that's the max arg it takes (so :($, $?) is .arity 1, .count 2). And yeah, you can specify a sig either with `where .signature ~~ :(…)` or through the shortcut form `&foo :($, Int $ --> Num)` 

[19:54] *** p6noob left
[19:59] *** Zoffix left
[20:04] *** tokomer left
[20:14] *** chsanch left
[20:24] *** kerframil joined
[20:27] *** p6noob joined
[20:36] <Altreus> yes oops! I keep forgetting to file issues because I am usually slacking off work when I'm asking questions in here anyway :D

[20:36] <Altreus> so I sort of forget

[20:40] *** koto joined
[20:41] *** koto left
[20:41] *** rindolf left
[20:42] *** jmaslak joined
[20:42] *** sena_kun left
[20:49] *** mcmillhj left
[20:50] *** mcmillhj joined
[20:54] *** mcmillhj left
[21:08] *** mcmillhj joined
[21:08] *** mcmillhj left
[21:08] *** jameslenz joined
[21:12] *** kerframil left
[21:12] *** jameslenz left
[21:18] *** dct_ joined
[21:19] *** Praise joined
[21:19] *** Praise left
[21:19] *** Praise joined
[21:22] <buggable> New CPAN upload: Sys-Hostname-0.0.7.tar.gz by ELIZABETH http://modules.perl6.org/dist/Sys::Hostname:cpan:ELIZABETH

[21:25] *** imcsk8_ joined
[21:25] *** kerframil joined
[21:26] *** dogbert11 joined
[21:27] *** vike left
[21:27] *** vike joined
[21:27] *** subroot joined
[21:28] *** dogbert17 left
[21:28] *** imcsk8 left
[21:29] *** AlexDaniel left
[21:30] *** AlexDaniel joined
[21:32] <buggable> New CPAN upload: P5substr-0.0.4.tar.gz by ELIZABETH http://modules.perl6.org/dist/P5substr:cpan:ELIZABETH

[21:32] <buggable> New CPAN upload: Sparrowdo-VSTS-YAML-Build-0.0.3.tar.gz by MELEZHIK http://modules.perl6.org/dist/Sparrowdo::VSTS::YAML::Build:cpan:MELEZHIK

[21:43] *** mcmillhj joined
[21:45] <raynold> ahh it's a wonderful day

[21:46] *** kerframil left
[21:47] <Juerd> o

[21:47] <Juerd> s/o//

[21:48] *** mcmillhj left
[21:49] <samcv> .tell Zoffix I replied to that. thanks for the heads up

[21:49] <yoleaux> 19:48Z <Zoffix> samcv: are unordered hashes guaranteed by the language spec or is that an implementation detail? D#2174 https://github.com/perl6/doc/issues/2174

[21:49] *** benjikun2 is now known as benjikun

[21:49] <yoleaux> samcv: I'll pass your message to Zoffix.

[21:49] <synopsebot> D#2174 [open]: https://github.com/perl6/doc/issues/2174 Need to note unordering-ge for Map/Hash/QuantHash/Bag/Set/Mix/BagHah/SetHashMixHash

[21:54] *** mcmillhj joined
[21:54] *** raynold left
[21:58] *** kerframil joined
[21:58] *** mcmillhj left
[22:08] *** wamba left
[22:10] *** kerframil left
[22:22] *** ufobat_ left
[22:22] *** HaraldJoerg left
[22:24] *** mcmillhj joined
[22:29] *** mcmillhj left
[22:33] *** robertle left
[22:36] *** benjikun2 joined
[22:40] *** mcmillhj joined
[22:40] *** benjikun left
[22:44] *** mcmillhj left
[22:49] *** dct_ left
[22:59] *** dct_ joined
[23:01] *** p6noob left
[23:05] *** mcmillhj joined
[23:05] *** dct_ left
[23:08] *** jeromelanteri left
[23:08] *** subr joined
[23:09] *** jameslenz joined
[23:10] *** mcmillhj left
[23:10] *** subroot left
[23:11] *** pecastro left
[23:13] *** jameslenz left
[23:25] *** mcmillhj joined
[23:29] *** mcmillhj left
[23:37] *** p6noob joined
[23:42] *** lizmat left
[23:46] *** konsolebox left
[23:53] *** subr left
[23:57] *** natrys left
