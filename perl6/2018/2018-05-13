[00:07] *** athenot joined
[00:12] *** espadrine left
[00:24] *** fascinum left
[00:36] <ZeonPeon> Hi, I'm experiencing a bit of a problem. When using the perl6 repl with Linenoise and trying to tab-complete after a @ sigil the repl segfaults

[00:37] <ZeonPeon> I'm guessing the source of the problem is Linenoise as the repl does not segfault when it is not installed

[00:38] <ZeonPeon> What would be the best method of collecting information to submit a bug?

[00:40] *** athenot left
[00:52] <timotimo> ZeonPeon: have you used gdb before?

[00:53] <ZeonPeon> not really... at all

[00:54] <timotimo> OK, that's not too bad

[00:54] <timotimo> we install a shortcut for you called perl6-gdb-m which launches the script (or REPL) in gdb

[00:54] <timotimo> oh, huh, that's fun

[00:55] <timotimo> ah, no, it should work

[00:55] <ZeonPeon> So would I lanch the repl and replicate the process?

[00:55] <timotimo> yup, when it segfaults, it should drop you into gdb's own shell

[00:56] <ZeonPeon> Is it just plain jane gdb?

[00:57] <timotimo> should be

[00:57] <ZeonPeon> Alright, I'll go and look at some gdb guides then

[00:57] *** markong left
[00:57] <timotimo> well, all you'll really need to do to get some info to get started is:

[00:57] <timotimo> "up" a few times, until the function names look like they are from moarvm (they usually start with MVM)

[00:58] <timotimo> "call MVM_dump_backtrace(tc)" to get a stack trace to figure out how we got where we are

[01:00] <MasterDuke> if you start with "bt" that'll give you a MoarVM level backtrace, with that you can see how many times (if any) you need to "up"

[01:00] <timotimo> i'd personally call that a "C-level backtrace"

[01:00] <timotimo> because since it's probably crashing inside of Linenoise, you'll also have linenoise-related frames in there

[01:01] <MasterDuke> heh, that's what i wrote first, but then i changed it

[01:01] <ZeonPeon> So I'm getting:

[01:01] <MasterDuke> oh good point, i should have left it

[01:01] <timotimo> oh, hold on

[01:01] <ZeonPeon> 0x00007ffff7817d5f in MVM_dump_backtrace () from //usr/lib/moar/libmoar.so

[01:01] <timotimo> please upload text to some pasting service, rather than putting it directly into IRC

[01:01] <ZeonPeon> Sorry, one moment

[01:01] <timotimo> thank you

[01:02] <timotimo> irc is terrible for multi-line text

[01:04] <ZeonPeon> https://pastebin.com/cqBwMFvH

[01:05] <timotimo> hm, i wonder why dump_backtrace also crashed

[01:05] <timotimo> does "print tc" give something vaguely sensible, or something vaguely error-like?

[01:06] <ZeonPeon> it prints one line:

[01:06] <ZeonPeon> $1 = 1.46163213

[01:07] <ZeonPeon> do you want the output of 'bt'?

[01:08] <timotimo> hm, it's not entirely unlikely that it's just barfing there because it lacks debug symbols

[01:08] <timotimo> did you compile your rakudo yourself?

[01:09] <ZeonPeon> no, out of the apt repo of kubuntu 17.10

[01:09] <timotimo> oh, what version does it give you?

[01:10] <ZeonPeon> One moment

[01:11] <ZeonPeon> https://pastebin.com/pVridP0i

[01:11] <MasterDuke> huggable: debs

[01:11] <huggable> MasterDuke, CentOS, Debian, Fedora and Ubuntu Rakudo packages: https://github.com/nxadm/rakudo-pkg/releases

[01:11] <timotimo> i can imagine you're running into a bug that has already been fixed

[01:12] <timotimo> yes, what MasterDuke linked to ought to help you out

[01:12] <ZeonPeon> I've been looking for closed issues relating to it

[01:12] <ZeonPeon> I'm guessing I'll either have to update my distro or compile myself

[01:12] <timotimo> it's also possible that a change to Linenoise has made old versions run into the bug, but nobody has tested older rakudo with up-to-date linenoise and so it wasn't found?

[01:13] <timotimo> you don't have to, did you see the link huggable sent?

[01:13] <ZeonPeon> Man... software b'y

[01:13] <ZeonPeon> Oh, awesome, thanks MasterDuke 

[01:14] <MasterDuke> El_Che++, he's done the actual work

[01:17] <ZeonPeon> What does the apk cover? should I uninstall just rakudo or anything perl6?

[01:17] <timotimo> i didn't check, but i believe it also contains nqp and moarvm, if those are separate packages

[01:17] <timotimo> and it can install zef for you, too, right?

[01:18] <timotimo> https://github.com/nxadm/rakudo-pkg - the readme has a lot of text

[01:18] <ZeonPeon> Yup, so the docs say

[01:18] <timotimo> oh, right, there's also an apt repository

[01:18] <ZeonPeon> I'll just flatten anything perl6 related and then go from there

[01:19] <ZeonPeon> Thank you very much for the help, I appreciate it

[01:19] <timotimo> the perl6 ircers are happy to help :)

[01:24] <ZeonPeon> it seems odd that the rakudo-pkg installs to opt, I'm guessing the maintainer uses mac

[01:25] <timotimo> according to the readme, it's built so it doesn't interfere with distro packages

[01:28] <timotimo> BBL

[01:28] *** fascinum joined
[01:30] *** comborico1611 left
[01:31] <ZeonPeon> Awesome, got it installing

[01:31] <ZeonPeon> Almost broke my install tho

[01:31] <ZeonPeon> accidently put "export PATH=$(PATH):/opt/rakudo-pkg/bin" in my bashrc

[01:32] <ZeonPeon> oops

[01:35] <ZeonPeon> It seems that Linenoise has run into a different problem now

[01:38] <ZeonPeon> c'est la vie

[01:47] *** ilbot3 left
[01:52] *** molaf left
[01:54] *** Sgeo joined
[01:55] *** Sgeo_ left
[01:56] *** ilbot3 joined
[01:56] *** ChanServ sets mode: +v ilbot3

[02:04] *** zachk left
[02:04] *** haxmeister joined
[02:05] *** molaf joined
[02:06] <haxmeister> since when does perl6 sleep on the weekend?

[02:06] <haxmeister> wake up you fine folks!

[02:23] <timotimo> hello haxmeister 

[02:28] <ZeonPeon> What is the perl 6 terminology for a lambda (if it exists)?

[02:29] <haxmeister> anonymous sub?

[02:29] <timotimo> we have pointy blocks which are probably the closest to lambda

[02:29] <timotimo> right, anonymous subs also exist. WhateverCode is another thing

[02:32] <ZeonPeon> Thanks

[02:38] *** eliasr left
[02:38] *** athenot joined
[03:03] *** Sgeo_ joined
[03:04] *** Sgeo left
[03:11] *** athenot left
[03:33] <ktown> m: $,=" ";say 1,2

[03:33] <camelia> rakudo-moar 776ff354c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of $, variable; in Perl 6 please use $*OUT.output_field_separator()␤at <tmp>:1␤------> 3$,7⏏5=" ";say 1,2␤»

[03:35] <ktown> how do I do that?

[03:39] <MasterDuke> bisect: $*OUT.output_field_separator()

[03:39] <bisectable6> MasterDuke, Bisecting by output (old=2015.12 new=776ff35) because on both starting points the exit code is 1

[03:39] <bisectable6> MasterDuke, bisect log: https://gist.github.com/bed5d0a2ae7ecbf65bf7360df4c3abbd

[03:39] <bisectable6> MasterDuke, (2016-09-27) https://github.com/rakudo/rakudo/commit/222d16b0b94911fdedb06ee6ad817d0f14b9c05c

[03:40] <MasterDuke> bisect: old=222d16b0b94911fdedb06ee6ad817d0f14b9c05c $*OUT.output_field_separator()

[03:40] <bisectable6> MasterDuke, On both starting points (old=222d16b new=776ff35) the exit code is 1 and the output is identical as well

[03:40] <bisectable6> MasterDuke, Output on both points: «No such method 'output_field_separator' for invocant of type 'IO::Handle'␤  in block <unit> at /tmp/E3t652d9h0 line 1␤␤»

[03:40] <MasterDuke> committable6: all $*OUT.output_field_separator()

[03:41] <committable6> MasterDuke, https://gist.github.com/d843e88ff53d606322481af4b844e195

[03:42] <AlexDani`> MasterDuke: hm… the system looks fine

[03:42] *** AlexDani` is now known as AlexDaniel

[03:43] <AlexDaniel> (re: “the bots seem slower than usual”)

[03:43] <MasterDuke> ktown: well, apparently not with $*OUT.output_field_separator() anytime recently

[03:43] <AlexDaniel> nothing in swap, cpu not busy

[03:43] <AlexDaniel> MasterDuke: maybe it's because we have so many releases now? :)

[03:43] <MasterDuke> maybe i was just imagining it

[03:43] *** rindolf joined
[03:44] <AlexDaniel> no the bot was definitely much faster two years ago… :)

[03:44] <AlexDaniel> MasterDuke: also, it's probably time to parallelize it

[03:45] <MasterDuke> that message was introduced 5 years ago and hasn't been changed since. https://github.com/rakudo/rakudo/commit/bda446566ac41af280f372c82d390a6f069c4e01

[03:46] <ktown> MasterDuke: i googled, so $, is not implemented?

[03:47] <AlexDaniel> m: say join '--', 1,2

[03:47] <camelia> rakudo-moar 776ff354c: OUTPUT: «1--2␤»

[03:48] <AlexDaniel> m: sub kebab(*@a) { put join '--', @a }; kebab 1,2,3

[03:48] <camelia> rakudo-moar 776ff354c: OUTPUT: «1--2--3␤»

[03:49] <AlexDaniel> ktown: correct, not implemented and given how easy it is to do something like this it probably won't be implemented any time soon

[03:51] <AlexDaniel> ktown: but line separators are there, if that matters

[03:51] <AlexDaniel> m: $*OUT.nl-out = ‘--’; say 42; say 50

[03:51] <camelia> rakudo-moar 776ff354c: OUTPUT: «42--50--»

[03:52] <MasterDuke> anyway, it's really time to go to bed. later...

[03:52] <AlexDaniel> MasterDuke: perhaps that's another good point for https://github.com/rakudo/rakudo/issues/1356 :)

[03:53] <MasterDuke> at the very least that bunch of messages should be validated

[03:57] <AlexDaniel> I'll probably do that tomorrow if nobody beats me to it

[04:01] *** Ben_Goldberg joined
[04:01] *** BenGoldberg left
[04:01] *** Ben_Goldberg is now known as BenGoldberg

[04:05] *** AlexDaniel left
[04:16] *** pilne left
[04:19] *** fascinum left
[04:21] *** xinming_ left
[04:22] *** xinming joined
[04:24] *** parv left
[04:25] *** wamba joined
[04:30] *** ZeonPeon left
[04:45] *** kaare_ joined
[04:55] *** BenGoldberg left
[05:03] *** wamba left
[05:15] *** psychoslave joined
[05:16] *** athenot joined
[05:21] *** khw left
[05:40] *** espadrine joined
[05:47] *** ufobat___ joined
[05:49] *** athenot left
[05:55] *** entonian joined
[05:57] *** entonian left
[06:05] *** fascinum joined
[06:13] *** Herby_ left
[06:24] *** jmerelo joined
[06:38] *** troys joined
[06:44] *** troys left
[06:52] *** speedChicken_ joined
[06:52] *** raynold joined
[06:52] *** raynold left
[06:53] *** raynold joined
[06:57] *** fascinum left
[07:04] <Geth> ¦ doc: JJ self-assigned Make example match output in Proc::Async https://github.com/perl6/doc/issues/2024

[07:05] <Geth> ¦ doc: ba17e5973c | (JJ Merelo)++ | doc/Type/Proc/Async.pod6

[07:05] <synopsebot> Link: https://doc.perl6.org/type/Proc::Async

[07:05] <Geth> ¦ doc: Changes example code to match output closes #2024

[07:05] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ba17e5973c

[07:09] <Geth> ¦ doc: 006fbf34b0 | (JJ Merelo)++ | doc/Language/concurrency.pod6

[07:09] <synopsebot> Link: https://doc.perl6.org/language/concurrency

[07:09] <Geth> ¦ doc: Eliminates accidental markdown refs #2022

[07:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/006fbf34b0

[07:09] <Geth> ¦ doc: 1bb3d100eb | (JJ Merelo)++ | doc/Language/concurrency.pod6

[07:09] <Geth> ¦ doc: Adds more precise definition of concurrency closes #1427

[07:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1bb3d100eb

[07:17] *** lizmat left
[07:23] *** fascinum joined
[07:26] *** darutoko joined
[07:30] *** fascinum left
[07:31] <jmerelo> Another question in SO aimed at improving the documentation https://stackoverflow.com/questions/50313779/reading-from-a-bound-pipe-using-procasync

[07:55] *** speedChi- joined
[07:59] *** fascinum joined
[08:02] *** athenot joined
[08:06] *** fascinum left
[08:15] *** psychoslave left
[08:18] *** speedChi- left
[08:18] *** speedChicken_ left
[08:19] *** speedChicken_ joined
[08:20] *** speedChi- joined
[08:20] *** ufobat___ left
[08:24] *** ufobat___ joined
[08:24] *** ufobat___ is now known as ufobat

[08:24] <ufobat> good morning :)

[08:35] *** fascinum joined
[08:35] *** athenot left
[08:44] *** HaraldJoerg joined
[08:48] <jmerelo> hi!

[09:01] *** fascinum left
[09:01] *** wamba joined
[09:19] *** molaf left
[09:20] *** kurahaupo_ joined
[09:22] *** kurahaupo left
[09:24] *** Xliff joined
[09:29] <jmerelo> greppable6: «=»

[09:29] <greppable6> jmerelo, 4 lines, 1 modules: https://gist.github.com/359aeedcd2ec1e76f8f320280c6563ef

[09:30] <Xliff> \o

[09:33] <jmerelo> p6: my @flat = 1, 2, (3, 4), 5; say @flat

[09:33] <camelia> rakudo-moar 776ff354c: OUTPUT: «[1 2 (3 4) 5]␤»

[09:33] <jmerelo> p6: my @flat = 1, 2, (3, 4), 5; my @another = @flat; say @another

[09:33] <camelia> rakudo-moar 776ff354c: OUTPUT: «[1 2 (3 4) 5]␤»

[09:34] *** athenot joined
[09:35] <jmerelo> m: my ($a, $b, $c); (($a, $b), $c) »=« ((1, 2), 3); say $a, $c; (($a, $b), $c) = ((1, 2), 3); say $a, $c

[09:35] <camelia> rakudo-moar 776ff354c: OUTPUT: «13␤(1 2)(Any)␤»

[09:35] *** molaf joined
[09:37] <jmerelo> m: my ($a, $b, $c); (($a, $b), $c) «=» ((1, 2), 3); say $a, $c; (($a, $b), $c) = ((1, 2), 3); say $a, $c

[09:37] <camelia> rakudo-moar 776ff354c: OUTPUT: «13␤(1 2)(Any)␤»

[09:37] <Xliff> p6: my @flat = 1, 2, (3, 4), 5; say |@flat

[09:37] <camelia> rakudo-moar 776ff354c: OUTPUT: «12(3 4)5␤»

[09:38] <Xliff> p6: my @flat = 1, 2, (3, 4), 5; say @flat.flat()

[09:38] <camelia> rakudo-moar 776ff354c: OUTPUT: «(1 2 (3 4) 5)␤»

[09:38] <Xliff> :/

[09:38] <Xliff> p6: my @flat = 1, 2, (3, 4), 5; say @flat.flat

[09:38] <camelia> rakudo-moar 776ff354c: OUTPUT: «(1 2 (3 4) 5)␤»

[09:39] <Xliff> p6: my @flat = 1, 2, (3, 4), 5; say @flat.map(|*)

[09:39] <camelia> rakudo-moar 776ff354c: OUTPUT: «(1 2 3 4 5)␤»

[09:39] <Xliff> Although both the "|" prefix op and .flat should do the same thing... Hmm.....

[09:41] <Xliff> p6: my @flat = 1, 2, (3, 4), 5; say @flat.flatmap(*)

[09:41] <camelia> rakudo-moar 776ff354c: OUTPUT: «Cannot resolve caller flatmap(Array: Whatever); none of these signatures match:␤    ($: &block, :$label, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[09:42] <Xliff> ^^ That's what I get for reading a 2 year old post.

[09:43] <Geth> ¦ doc: 5564d256b2 | (JJ Merelo)++ | doc/Language/concurrency.pod6

[09:43] <synopsebot> Link: https://doc.perl6.org/language/concurrency

[09:43] <Geth> ¦ doc: Minor changes

[09:43] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5564d256b2

[09:43] <Geth> ¦ doc: 4b9853279e | (JJ Merelo)++ | doc/Language/operators.pod6

[09:43] <Geth> ¦ doc: Adds example with «=»

[09:43] <synopsebot> Link: https://doc.perl6.org/language/operators

[09:43] <Geth> ¦ doc: 

[09:43] <Geth> ¦ doc: Also adds it to the index, along with its alternate form. It's simply

[09:43] <Geth> ¦ doc: the *hyper* version of the assignment operator. Closes #2010.

[09:43] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4b9853279e

[09:43] <jmerelo> Xliff: which one? Can it be corrected?

[09:45] <jmerelo> Is this documentation OK? https://docs.perl6.org/routine/flatmap

[09:45] <jmerelo> m: my @list = ('first1', ('second2', ('third3', 'third4'), 'second5'), 'first6'); say @list.flatmap({.reverse}).perl;

[09:45] <camelia> rakudo-moar 776ff354c: OUTPUT: «("first1", "second5", "third3", "third4", "second2", "first6").Seq␤»

[09:46] <jmerelo> p6: my @flat = 1, 2, (3, 4), 5; say @flat.flatmap( {*} )

[09:46] <camelia> rakudo-moar 776ff354c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤{*} may only appear in proto␤at <tmp>:1␤------> 3 1, 2, (3, 4), 5; say @flat.flatmap( {*}7⏏5 )␤    expecting any of:␤        argument list␤        horizontal whitespace␤        term␤»

[09:46] <jmerelo> p6: my @flat = 1, 2, (3, 4), 5; say @flat.flatmap( { $^þ } )

[09:46] <camelia> rakudo-moar 776ff354c: OUTPUT: «(1 2 (3 4) 5)␤»

[09:47] <jmerelo> p6: my @flat = 1, 2, (3, 4), 5; say @flat.flatmap: *

[09:47] <camelia> rakudo-moar 776ff354c: OUTPUT: «Cannot resolve caller flatmap(Array: Whatever); none of these signatures match:␤    ($: &block, :$label, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[09:47] *** tomaw left
[09:48] <jmerelo> p6: my @flat = (1, 2, (3, 4), 5); say @flat.flatmap( {.reverse} ).perl

[09:48] <camelia> rakudo-moar 776ff354c: OUTPUT: «(1, 2, 4, 3, 5).Seq␤»

[09:48] <jmerelo> p6: my @flat = 1, 2, (3, 4), 5; say @flat.flatmap( {.reverse} ).perl

[09:48] <camelia> rakudo-moar 776ff354c: OUTPUT: «(1, 2, 4, 3, 5).Seq␤»

[09:49] <jmerelo> p6: my @flat = 1, 2, (3, 4), 5; say @flat.flatmap( {.Str} ).perl

[09:49] <camelia> rakudo-moar 776ff354c: OUTPUT: «("1", "2", "3 4", "5").Seq␤»

[09:54] *** ufobat left
[09:55] <El_Che> timotimo: would the readme better be split?

[09:55] *** domidumont joined
[09:57] *** kurahaupo_ left
[10:00] <jmerelo> m: my $a = 2; say  $a, ++$a; 

[10:00] <camelia> rakudo-moar 776ff354c: OUTPUT: «33␤»

[10:00] <jmerelo> m: my $a = 2; say  "$a, {++$a}"; 

[10:00] <camelia> rakudo-moar 776ff354c: OUTPUT: «2, 3␤»

[10:02] *** athenot left
[10:07] <jmerelo> m: my @arr; my ($a, $b) = (1,1); for ^5 { ($a,$b) = ($b, $a+$b); @arr.push: ($a, $b); say @arr };

[10:07] <camelia> rakudo-moar 776ff354c: OUTPUT: «[(1 2)]␤[(2 3) (2 3)]␤[(3 5) (3 5) (3 5)]␤[(5 8) (5 8) (5 8) (5 8)]␤[(8 13) (8 13) (8 13) (8 13) (8 13)]␤»

[10:11] *** robertle left
[10:12] *** robertle joined
[10:13] *** domidumont left
[10:14] *** domidumont joined
[10:18] <jmerelo> m: my @arr; my ($a, $b) = (1,1); for ^5 { ($a,$b) = ($b, $a+$b); @arr.push: ($a.item, $b.item); say @arr };

[10:18] <camelia> rakudo-moar 776ff354c: OUTPUT: «[(1 2)]␤[(2 3) (2 3)]␤[(3 5) (3 5) (3 5)]␤[(5 8) (5 8) (5 8) (5 8)]␤[(8 13) (8 13) (8 13) (8 13) (8 13)]␤»

[10:21] <Geth> ¦ doc: 5ffcfc1c99 | (JJ Merelo)++ | doc/Language/traps.pod6

[10:21] <synopsebot> Link: https://doc.perl6.org/language/traps

[10:21] <Geth> ¦ doc: Less accidental MD, refs #2022

[10:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5ffcfc1c99

[10:21] <Geth> ¦ doc: b33402c5cb | (JJ Merelo)++ | doc/Language/traps.pod6

[10:21] <Geth> ¦ doc: Expands "containers vs values" trap

[10:21] <Geth> ¦ doc: 

[10:21] <Geth> ¦ doc: With reference to the example in the IRC conversation. Avoids

[10:21] <Geth> ¦ doc: referencing decontainerization because it's not documented, created

[10:21] <El_Che> jmerelo: answered in SO instead of here because that's what you like :)

[10:21] <Geth> ¦ doc: issue #2025. Closes #1216.

[10:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b33402c5cb

[10:21] <El_Che> I am pretty sure that people like jnthn and lizmat will come with something cooler :)

[10:23] <jmerelo> El_Che: it's good enough. Thanks!

[10:27] *** Khisanth left
[10:28] *** domidumont left
[10:29] <El_Che> good enough

[10:29] <El_Che> Is that something you write when reviewing papers? :)

[10:30] <jmerelo> El_Che: Never. I'm all for "Revise grammar and spelling" and "make fonts in chart 1 smaller and fonts in chart 2 larger"

[10:30] <El_Che> hehe

[10:39] *** Khisanth joined
[10:44] *** rindolf left
[10:48] <Geth> ¦ doc: e0f8edcbec | (JJ Merelo)++ | doc/Language/concurrency.pod6

[10:48] <synopsebot> Link: https://doc.perl6.org/language/concurrency

[10:48] <Geth> ¦ doc: Rephrases for good, thanks @nxadm, closes #1427

[10:48] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e0f8edcbec

[10:55] *** ExtraCrispy joined
[11:03] *** rindolf joined
[11:03] *** psychoslave joined
[11:09] *** vivus-ignis joined
[11:16] *** pilne joined
[11:24] *** jmerelo left
[11:30] *** psychoslave left
[11:30] *** vivus-ignis is now known as ignis__away

[11:33] *** markong joined
[11:40] *** ignis__away is now known as vivus-ignis

[11:43] <Xliff> p6: my @flat = 1, 2, (3, 4), 5; say @flat.flatmap( {.self} ).perl

[11:43] <camelia> rakudo-moar 776ff354c: OUTPUT: «(1, 2, 3, 4, 5).Seq␤»

[11:43] <Xliff> p6: my @flat = 1, 2, (3, 4), 5; say @flat.flatmap.perl

[11:43] <camelia> rakudo-moar 776ff354c: OUTPUT: «Cannot resolve caller flatmap(Array: ); none of these signatures match:␤    ($: &block, :$label, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[11:43] <Xliff> p6: my @flat = 1, 2, (3, 4), 5; say @flat.flatmap().perl

[11:43] <camelia> rakudo-moar 776ff354c: OUTPUT: «Cannot resolve caller flatmap(Array: ); none of these signatures match:␤    ($: &block, :$label, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[11:44] <Xliff> Ideally, @flat.flatmap should default to @flat.flatmap({.self})

[11:44] <Xliff> AND @flat.flatmap(*) should functionally be the same as ^^

[11:44] <Xliff> Ideally, @flat.flatmap should default to @flat.flatmap({.reverse})

[11:45] <Xliff> OOPS ^^ Scratch that. Was me being lazy

[11:45] <Xliff> The first comment still stands.

[11:45] <Xliff> Ideally, @flat.flatmap should default to @flat.flatmap({.reverse})

[11:45] <Xliff> ?!?

[11:45] <Xliff> p6: my @flat = 1, 2, (3, 4), 5; say @flat.flatmap(*.reverse).perl

[11:45] <camelia> rakudo-moar 776ff354c: OUTPUT: «(1, 2, 4, 3, 5).Seq␤»

[11:45] <Xliff> p6: my @flat = 1, 2, (3, 4), 5; say @flat.flatmap(*).perl

[11:45] <camelia> rakudo-moar 776ff354c: OUTPUT: «Cannot resolve caller flatmap(Array: Whatever); none of these signatures match:␤    ($: &block, :$label, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[11:45] <Xliff> p6: my @flat = 1, 2, (3, 4), 5; say @flat.flatmap(*.self).perl

[11:45] <camelia> rakudo-moar 776ff354c: OUTPUT: «(1, 2, 3, 4, 5).Seq␤»

[11:46] <Xliff> So.... I'm tired. I am going to take a nap, now'

[11:53] *** Zoffix joined
[11:55] <Zoffix> .tell Xliff flatmap is slated for removal in 6.e, with deprecation in 6.d, so what it should do is moot. But with other routines, we generally don't add a Whatever or argless candidate unless the default is very clear. We aren't Perl 5.

[11:55] <yoleaux> Zoffix: I'll pass your message to Xliff.

[11:57] <Geth> ¦ doc/car-grant-midrat: ca141dd73a | (Zoffix Znet)++ | doc/Type/MidRat.pod6

[11:57] <Geth> ¦ doc/car-grant-midrat: [CaR Grant] Document MidRat.Numeric

[11:57] <Geth> ¦ doc/car-grant-midrat: 

[11:57] <Geth> ¦ doc/car-grant-midrat: - It collapses the MidRat into its Rat component, potentially

[11:57] <Geth> ¦ doc/car-grant-midrat:     degrading it to a Num

[11:57] <Geth> ¦ doc/car-grant-midrat: review: https://github.com/perl6/doc/commit/ca141dd73a

[11:57] <Zoffix> Wondering if that ^ is going slightly too far with collapsing a MidRat and .Numeric should just return self (i.e. MidRat)

[11:58] <Zoffix> But then you have `0 + $mr` => Num; `+$mr` => MidRat

[11:58] <Zoffix> And with RatStr `prefix:<+>` does collapse to Numeric component, but with MidRat we got two of them....

[12:01] <Zoffix> `with < 1/22222222222222222222> { .^name.say; .Numeric.^name.say; .Numeric.^name.say }` OUTPUT: «MidRatStr␤MidRat␤Num»

[12:01] <Zoffix> `with < 1/11111111111111111111> { .^name.say; .Numeric.^name.say; .Numeric.^name.say }` OUTPUT: «MidRatStr␤MidRat␤Rat»

[12:02] <Zoffix> err…  s:2nd/'.Numeric.^name.say'/.Numeric.Numeric.^name.say/

[12:03] *** vivus-ignis is now known as ignis__away

[12:08] *** thaarv joined
[12:10] *** athenot joined
[12:12] *** psychoslave joined
[12:13] *** mcmillhj joined
[12:22] *** mcmillhj left
[12:24] *** ZeonPeon joined
[12:26] <timotimo> El_Che: i'm not sure; you mean into "users of the packages" and "users of the repository to make their own packages"?

[12:29] <Geth> ¦ doc/car-grant-midrat: 0b6301d4b6 | (Zoffix Znet)++ | doc/Type/MidRat.pod6

[12:29] <Geth> ¦ doc/car-grant-midrat: [CaR Grant] Document MidRat.Real

[12:29] <Geth> ¦ doc/car-grant-midrat: 

[12:29] <Geth> ¦ doc/car-grant-midrat: Same degradation behaviour as .Numeric

[12:29] <Geth> ¦ doc/car-grant-midrat: review: https://github.com/perl6/doc/commit/0b6301d4b6

[12:29] <Geth> ¦ doc/car-grant-midrat: feaca486ec | (Zoffix Znet)++ | doc/Type/MidRat.pod6

[12:29] <Geth> ¦ doc/car-grant-midrat: Break up overly long lines

[12:29] <Geth> ¦ doc/car-grant-midrat: review: https://github.com/perl6/doc/commit/feaca486ec

[12:30] *** tomaw joined
[12:32] *** psychoslave left
[12:33] *** psychoslave joined
[12:34] *** thaarv left
[12:38] <El_Che> timotimo: yes, keep the readme very basic and have other linked file for more specific uses

[12:41] *** lasse_ joined
[12:41] <Zoffix> .tell Xliff P.S.: the no-op map would be `{$_}`, not `*.self`, as the latter will blow up any unhandled Failures.

[12:41] <yoleaux> Zoffix: I'll pass your message to Xliff.

[12:42] *** athenot left
[12:45] *** zakharyas joined
[12:46] <lasse_> Zoffix:  I tried to install star on opensuse 42.3 no success either with source or precompiled

[12:46] <Zoffix> lasse_: what were the problems?

[12:48] <lasse_> source looped as on tumbleweed. 

[12:48] <Zoffix> lasse_: and prebuilt packages?

[12:48] <El_Che> lasse_: my 42.3 pkg is installerd on 42.3 before it's released

[12:49] <lasse_> for the precompiled an error occured while initializing the sotware repository

[12:49] <El_Che> I don't know if those packages work on tumbleweed

[12:49] <El_Che> ah the repo?

[12:49] <lasse_> i was using 42.3

[12:49] <Zoffix> lasse_: do you have git installed?

[12:50] *** ZeonPeon left
[12:50] <lasse_> if not I can install its a basic opensuse

[12:50] <El_Che> lasse_: let me spin an opensuse container

[12:51] <El_Che> docker hub is slow today :(

[12:52] <Zoffix> lasse_: see of El_Che can fix the problem. If not, I'd suggest removing everything you installed so far, including any paths or env vars you set up. Then just run these commands (you'll need git): https://gist.github.com/zoffixznet/57178a9095d844bc270690e40859b1ab   That will install the compiler and module manager (zef) and set up `update-perl6` bash alias that you can run later to update to latest release of

[12:52] <Zoffix> the compiler. And then you'd just install any modules you need with zef.

[12:56] <thundergnat> Zoffix If you have a moment, I would appreciate you taking a look at my pull request https://github.com/rakudo/rakudo/pull/1822. I think it is worthwhile, but I don't know if it will interfere with you CaR grant work.

[12:56] <El_Che> lasse_: zypper ar -f https://dl.bintray.com/nxadm/rakudo-pkg-rpms/openSUSE/42.3/x86_64 rakudo-pkg

[12:56] <El_Che> lasse_: rust the key

[12:56] <El_Che> lasse_: zypper install rakudo-pkg

[12:56] <Zoffix> lasse_: in fact, maybe the precompiled packages are failing because you set something up for rakudo star? Like paths or env vars or something? Or you ran something with root and it got bad perms on it now. Could run this to nuke any of the previous dirs   rm -fr ~/.zef ~/.perl6

[12:56] <El_Che> lasse_: /opt/rakudo-pkg/bin/perl6 -v : This is Rakudo version 2018.04.1 built on MoarVM version 2018.04.1\nimplementing Perl 6.c.

[12:57] <El_Che> I'll update the opensuse instructions

[12:57] <Zoffix> \o/

[12:57] <El_Che> I wrongly assumed the yum instrcutions would work as is, but they also have a native way

[12:59] <lasse_> I rebooted and now it worked 

[12:59] <lasse_> This is Rakudo version 2018.04.1 built on MoarVM version 2018.04.1

[12:59] <Zoffix> yey

[13:00] <lasse_> I probably screwed up. I often do.

[13:11] *** speedChi- left
[13:11] *** speedChicken_ left
[13:13] *** zakharyas left
[13:16] *** ignis__away is now known as vivus-ignis

[13:19] <Zoffix> .tell thundergnat I thought someone was already reviewing your original PR. Have them merge. It won't interfere with my grant work.

[13:19] <yoleaux> Zoffix: I'll pass your message to thundergnat.

[13:26] <thundergnat> .tell Zoffix MasterDuke++ and tbrowder++ reviewed and critiqued, but they don't have commit bits.

[13:26] <yoleaux> thundergnat: I'll pass your message to Zoffix.

[13:26] <yoleaux> 13:19Z <Zoffix> thundergnat: I thought someone was already reviewing your original PR. Have them merge. It won't interfere with my grant work.

[13:27] <Zoffix> thundergnat: tbrowder_ does

[13:27] <yoleaux> 13:26Z <thundergnat> Zoffix: MasterDuke++ and tbrowder++ reviewed and critiqued, but they don't have commit bits.

[13:27] <Zoffix> And MasterDuke should've signed a CLA ages ago :)

[13:28] <thundergnat> Zoffix Ah. Nevermind then. I'll bother someone else. Cheers. 

[13:31] *** sacomo joined
[13:31] *** bartolin_ left
[13:33] <El_Che> lasse_: updated the instructions, just for you (jk): https://github.com/nxadm/rakudo-pkg#opensuse

[13:35] <MasterDuke> i keep forgetting to print that CLA out...

[13:35] <Zoffix> huggable: cla

[13:35] <huggable> Zoffix, nothing found

[13:35] <Zoffix> huggable: CLA

[13:35] <huggable> Zoffix, http://www.perlfoundation.org/contributor_license_agreement  print it out, sign it, scan it in (resize your scan to 250KB or less). Email to trademark -at- perlfoundation.org (please scan and email if you can, it's so much more efficient)

[13:36] <Zoffix> MasterDuke: do it now. 

[13:39] *** domidumont joined
[13:41] *** athenot joined
[13:44] *** aborazmeh joined
[13:44] *** aborazmeh left
[13:44] *** aborazmeh joined
[13:46] <Zoffix> my FatRat \a := <1/22222222222222222222>; my FatRat \b := <3/22222222222222222222>; say (a + b).^name; # => 'Num'

[13:46] *** domidumont left
[13:47] *** domidumont joined
[13:47] <Zoffix> Damn. Maybe an operation with two MidRats should produce a MidRat, not degrade into a Rat

[13:47] *** bartolin joined
[13:47] <Zoffix> Well, actually the above code would be a Rat, because after reduction result's denominator fits, but it's still not a FatRat and would still be a Num if denom. cannot be reduced.

[13:48] <Zoffix> And maybe a MidRat should not be a FatRat.

[13:49] <Zoffix> Actually, just the latter. Don't make it an allomorph of the two, but just a subclass of Rat.

[13:51] * Zoffix achieves higher level of clarity

[13:52] *** kurahaupo joined
[13:52] <Zoffix> MidRat = just a Rat that supports arbitrary denominators.

[13:53] <Zoffix> And I haven't wrote a single line of actual code :)

[13:53] *** wamba left
[13:53] <MasterDuke> Zoffix: what do you mean by arbitrary? how is that different from a FatRat

[13:53] <timotimo> it's not infectious

[13:54] <timotimo> i.e. combine a rat with it and you'll get a rat again, not a FatRat

[13:54] <MasterDuke> ah

[13:54] <timotimo> Zoffix: if you call .Rat on a MidRat, will you get a Rat or just "self"?

[13:54] <Zoffix> + degradation to Num, just like a Rat. `<0/1> + <1/22222222222222222222>` => Num; `<0/1> + FatRat.new(1, 22222222222222222222)` => FatRat

[13:55] <Zoffix> timotimo: a Rat

[13:55] <timotimo> i mean if MidRat ~~ Rat, then returning MidRat from a MidRat's .Rat should be fine?

[13:56] <Zoffix> So far I plan to make even .Numeric/.Real return a Rat (or degrade to a Num), but don't know if that's going a bit far.

[13:56] *** lucasb joined
[13:56] *** eliasr joined
[13:56] <Zoffix> timotimo: then it's inconsistent with, say, <42>.Int returning an Int and not an IntStr. 

[13:58] <timotimo> that's fair

[13:59] <Zoffix> The goal behind a MidRat is to hold on to higher precision given when we don't know whether we're going to be using high-precision math, but as soon as it's used in some context that lets us know, it goes away. So if I write a Rational literal `my \mr := <1/22222222222222222222>` it's not known whether I'm gonna do high-precision math, but as soon as I write `42 +_mr` we know we aren't dealing with FatRat-type

[13:59] <Zoffix> operations, so we degrade it to a Rat/Num

[13:59] <Zoffix> Well, we do a infix:<+>(Int, Rational) and then reduce, and if the result fits into a Rat, then the answer is a Rat, otherwise, it's a Num. 

[14:02] <Geth> ¦ doc/car-grant-midrat: c0d35c14a8 | (Zoffix Znet)++ | 2 files

[14:02] <Geth> ¦ doc/car-grant-midrat: [CaR Grant] MidRat no longer inherits from FatRat

[14:02] <Geth> ¦ doc/car-grant-midrat: 

[14:02] <Geth> ¦ doc/car-grant-midrat: Reasoning: https://irclog.perlgeek.de/perl6/2018-05-13#i_16160055

[14:02] <Geth> ¦ doc/car-grant-midrat: review: https://github.com/perl6/doc/commit/c0d35c14a8

[14:10] *** aborazmeh left
[14:14] *** athenot left
[14:15] <lucasb> $ perl6 <<< get

[14:15] <lucasb> Failed to stat file descriptor: Bad file descriptor

[14:16] <lucasb> Tried this code with perl5, python3 and ruby, and they all successfully return an eof value

[14:16] <Zoffix> What does '<<<' mean?

[14:16] <lucasb> echo get | perl6 -

[14:16] <Zoffix> ah

[14:16] <Zoffix> $ echo get | perl6 -

[14:16] <Zoffix> MVMArray: Index out of bounds

[14:17] <lucasb> lol, I didn't tried that myself :)

[14:17] <lucasb> was expecting both shell idioms to evaluate to the same behaviour

[14:17] <lucasb> "<<<" is bash syntax (and maybe other shells)

[14:18] <Zoffix> Well, I see the bug. The file descriptor is -1

[14:18] <Zoffix> and it's trying to bind it into forget close array at that index

[14:19] * Zoffix hackety hacks

[14:20] <Zoffix> By which I mean not trying to do the auto-close magic if file descriptor is -1. That sounds sane, right?

[14:20] <lucasb> Dunno :)

[14:21] <lucasb> I was more intrigued by the fact that "<<<" and "echo | ..." differs

[14:23] <Voldenet> but does it really?

[14:23] <Zoffix> lucasb: how did you measure that perl5/python3/ruby returned an eof value?

[14:24] <lucasb> 3 lines pasting, sorry:

[14:24] <lucasb> perl <<< 'print "undef\n" if !defined <STDIN>'

[14:24] <lucasb> python3 <<< 'import sys; print(repr(sys.stdin.readline()))'

[14:24] <lucasb> ruby <<< 'p gets'

[14:25] <Voldenet> in perl you could probably do "if eof STDIN" instead

[14:26] <Zoffix> $ echo 'print fileno STDIN' | perl -

[14:26] <Zoffix> 0

[14:26] <Zoffix> Looks like the real bug is that our native descriptor is -1 in this case.

[14:26] <lucasb> Voldenet: right, that's shorter. thanks

[14:33] <Voldenet> huh, now I wonder why

[14:33] <Voldenet> printf '' | perl -le 'print eof STDIN' -> 1

[14:33] <Voldenet> printf '' | perl6 -e '$*IN.eof.say' -> False

[14:34] <Zoffix> Voldenet: https://docs.perl6.org/routine/eof "On non-seekable handles and handles opened to zero-size files (including special files in /proc/), EOF won't be set until a read operation fails to read any bytes."

[14:34] <Voldenet> Ah, it works differently.

[14:36] *** vivus-ignis left
[14:43] *** AlexDaniel joined
[14:43] <Voldenet> btw, it's interesting how 'echo "get" | perl6 -' fails

[14:44] <Voldenet> but 'echo "get" | perl6 /dev/stdin' works

[14:45] <Zoffix> lucasb: yo, submit a fix for that bug.

[14:46] <Zoffix> lucasb: need to stick ` unless $filename eq '-'` for this .close line: https://github.com/perl6/nqp/blob/master/src/HLL/Compiler.nqp#L415

[14:52] <lucasb> Voldenet: indeed, well noticed

[14:52] <AlexDaniel> MasterDuke: (do it now)++

[14:53] <lucasb> Zoffix: just that, really? ok, I can test and PR that later, if nobody gets to it first. Thanks!

[14:53] <Zoffix> Filed as R#1824

[14:53] <synopsebot> R#1824 [open]: https://github.com/rakudo/rakudo/issues/1824 [IO][LHF] non-interactive REPL mode breaks STDIN

[15:01] *** comborico1611 joined
[15:05] *** ufobat joined
[15:13] *** athenot joined
[15:28] *** psychoslave left
[15:34] *** khw joined
[15:41] *** espadrine left
[15:45] *** skids joined
[15:45] *** athenot left
[15:48] *** jmerelo joined
[15:54] *** HaraldJoerg left
[15:59] <Geth> ¦ doc: 16e9d9d9df | (JJ Merelo)++ | doc/Type/Proc/Async.pod6

[15:59] <synopsebot> Link: https://doc.perl6.org/type/Proc::Async

[15:59] <Geth> ¦ doc: Clarifies methods closes #1901 again

[15:59] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/16e9d9d9df

[16:06] <jmerelo> m: say "[ hey  ]" ~~ /<-[ \] \s ]>+/

[16:06] <camelia> rakudo-moar f72a6a499: OUTPUT: «｢[｣␤»

[16:06] <jmerelo> m: say "[ hey  ]" ~~ /<-[ \] \[ \- \s ]>+/

[16:06] <camelia> rakudo-moar f72a6a499: OUTPUT: «｢hey｣␤»

[16:07] <jmerelo> m: say "[- hey -]" ~~ /<-[ \- \] \[ \- \s  ]>+/

[16:07] <camelia> rakudo-moar f72a6a499: OUTPUT: «｢hey｣␤»

[16:09] <jmerelo> m: say "[- hey -]" ~~ /<-[ \- \] \[ - \s  ]>+/

[16:09] <camelia> rakudo-moar f72a6a499: OUTPUT: «｢hey｣␤»

[16:09] <jmerelo> m: say "[- hey -]" ~~ /<-[ \] \[ - \s  ]>+/

[16:09] <camelia> rakudo-moar f72a6a499: OUTPUT: «｢hey｣␤»

[16:10] <jmerelo> m: say "[- hey -]" ~~ /<-[ \] [ - \s  ]>+/

[16:10] <camelia> rakudo-moar f72a6a499: OUTPUT: «｢hey｣␤»

[16:10] <jmerelo> m: say "[- hey -]" ~~ /<-[ ] [ - \s  ]>+/

[16:10] <camelia> rakudo-moar f72a6a499: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing + or - between character class elements␤at <tmp>:1␤------> 3say "[- hey -]" ~~ /<-[ ]7⏏5 [ - \s  ]>+/␤»

[16:10] <Zoffix> FWIW camelia also takes a /msg

[16:11] <jmerelo> Zoffix: yep, and there's the #Whateverable channel. But by doing it here sometimes I get helpful hints from however is in the channel :-)

[16:11] <jmerelo> Zoffix: thanks anyway 

[16:12] <Geth> ¦ doc: 09b23106b9 | (JJ Merelo)++ | doc/Language/regexes.pod6

[16:12] <synopsebot> Link: https://doc.perl6.org/language/regexes

[16:12] <Geth> ¦ doc: Eliminates accidental MD refs #2022

[16:12] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/09b23106b9

[16:12] <Geth> ¦ doc: 3206fec2a1 | (JJ Merelo)++ | doc/Language/regexes.pod6

[16:12] <Geth> ¦ doc: Adds info on escaping characters closes #1146

[16:12] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/3206fec2a1

[16:12] <Zoffix> You'd get more hints if you asked an actual question.

[16:15] *** Zoffix left
[16:15] <Geth> ¦ doc/car-grant-midrat: 15 commits pushed by (JJ Merelo)++, (Zoffix Znet)++

[16:15] <Geth> ¦ doc/car-grant-midrat: review: https://github.com/perl6/doc/compare/c0d35c14a821...4f76583dd87f

[16:17] *** vivus-ignis joined
[16:18] *** bstahlman joined
[16:20] <bstahlman> Wondering whether there's any sort of readline support for perl 6. The interactive shell feels a bit painful because I'm used to having readline support everywhere in linux - if nothing else, there's rlwrap, but even that doesn't appear to work with perl6.

[16:20] <timotimo> you can install Readline or Linenoise

[16:20] <timotimo> the repl is supposed to tell you that when you start it

[16:21] <moritz> rlwrap works fine for me with rakudo

[16:21] <bstahlman> Ah. I just noticed that some of the emacs-style binding seem to work by default. Perhaps it's just not taking my .inputrc into account?

[16:22] <moritz> that might be possible

[16:22] <timotimo> could be, yeah

[16:22] <bstahlman> You're referring to a p6-specific Readline package, not the normal readline lib?

[16:22] <timotimo> maybe we'd have to call some readline function to have it look at that

[16:22] <timotimo> yes, "zef install Readline" or so

[16:22] <bstahlman> Ah. Ok. Thanks. I'll look into those...

[16:23] <bstahlman> rlwrap isn't working for me with rakudo, but I have the rakudo that comes with Ubuntu 16.04, I think, which appears to be several years old (~2015), so perhaps it's that...

[16:24] <Geth> ¦ doc: 1310d51d78 | (JJ Merelo)++ | doc/Language/phasers.pod6

[16:24] <synopsebot> Link: https://doc.perl6.org/language/phasers

[16:24] <Geth> ¦ doc: Explains success closes #905

[16:24] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1310d51d78

[16:24] <timotimo> haha, yeah, that won't work very well

[16:24] <timotimo> comparatively, i mean

[16:24] <timotimo> especially with the up-to-date readline package

[16:24] <timotimo> and it's probably not able to run zef at all

[16:24] <bstahlman> Rt. Is the best way to build from source, or do people usually add a p6 repo?

[16:24] *** itaipu joined
[16:25] <timotimo> huggable: deb

[16:25] <huggable> timotimo, Alpine, CentOS, Debian, Fedora, OpenSUSE and Ubuntu Rakudo packages: https://github.com/nxadm/rakudo-pkg#rakudo-pkg

[16:25] <jmerelo> bstahlman: depends on what you call "best", but it's a pretty good way :-) El_Che has prepared repos for Ubuntu and other distros

[16:26] <timotimo> that link should help you out

[16:26] <timotimo> oh

[16:26] <timotimo> on the main page of that repo there's also an apt repository that you can feed into your apt

[16:26] <timotimo> huggable: help

[16:26] <huggable> timotimo, nothing found

[16:26] <timotimo> huggable: factoid

[16:26] <huggable> timotimo, nothing found

[16:26] <timotimo> huggable: usage

[16:26] <huggable> timotimo, nothing found

[16:26] <timotimo> ...

[16:27] <timotimo> oh, that link is already the right one

[16:28] <timotimo> i thought it was a link to the releases page of that repo

[16:28] <bstahlman> Great. Thanks. I'll check that out. Incidentally, on the subject of support framework... Has anyone in the p6 community given any thought to what it would take to get p6 support in online tools like HackerRank? Employers use it a lot now, and it's great for developing practical skills in a language. Being able to practice p6 in it would be huge, in my opinion.

[16:30] <timotimo> don't know how they do things, but we have, for example, a jupyter kernel for perl6 that you can use with jupyter notebook for example

[16:30] <jmerelo> May I draw your attention to this issue? https://github.com/perl6/doc/issues/711 It's about bots, such as the huggable huggable above. The list is not up to date. Can someone pick up one, or a few, and update it?

[16:30] <timotimo> if all they need is an evaluation server?

[16:31] <bstahlman> I'm not sure what interface they require, but I could ask around on their site.

[16:31] *** vivus-ignis left
[16:31] <jmerelo> bstahlman: I didn't know about hackerrank. Generally we deal with those issues, like adding support in GitHub or Travis, either in the marketing or some other common repo.

[16:31] <jmerelo> bstahlman: please do. Maybe all it requires is some pull request in some repository. We can do that.

[16:32] <bstahlman> Just thinking it could really help with p6 adoption. For instance, the ability to practice in HackerRank is something I consider when looking for a language to teach my kids.

[16:32] <bstahlman> Great. Thanks. I'll post a question on it and get back with you when I have an answer...

[16:33] <jmerelo> bstahlman: Thanks!

[16:33] <timotimo> https://www.hackerrank.com/environment

[16:33] <timotimo> don't see any link for "where can i request more languages/libraries"

[16:34] <timotimo> they spell Perl "PERL" on that last example page 

[16:35] <timotimo> https://www.hackerrank.com/support/feature - this is perhaps where you'd ask a question like that

[16:36] <timotimo> aha!

[16:36] <timotimo> https://github.com/interviewstreet/languages/blob/master/README.md

[16:36] *** kaare_ left
[16:36] <timotimo> see the "new language request for codechecker" at the bottom

[16:37] *** bstahlman left
[16:38] *** vivus-ignis joined
[16:44] *** athenot joined
[16:45] <timotimo> https://github.com/perl6/user-experience/issues/22

[16:46] *** tomaw left
[16:47] *** tomaw joined
[16:47] *** tomaw left
[16:48] *** espadrine joined
[16:50] *** wamba joined
[16:54] *** cog_ joined
[16:56] *** tomaw joined
[17:11] <El_Che> (I just saw that the telemetry basic test is a flopper, fails once in a while)

[17:12] *** espadrine left
[17:15] *** athenot left
[17:15] *** psychoslave joined
[17:24] *** vivus-ignis is now known as ignis__away

[17:31] *** comborico1611 left
[17:33] *** ignis__away is now known as vivus-ignis

[17:41] *** espadrine joined
[17:45] *** itaipu left
[17:46] *** margeas joined
[17:47] *** markong left
[17:48] *** margeas is now known as markong

[17:49] *** vivus-ignis is now known as ignis__away

[17:56] *** comborico1611 joined
[18:02] *** ignis__away is now known as vivus-ignis

[18:06] <Geth> ¦ doc: 0ab8abbd2e | (JJ Merelo)++ | t/02-pod-valid.t

[18:06] <Geth> ¦ doc: Adds a comment for understanding it better

[18:06] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0ab8abbd2e

[18:06] <Geth> ¦ doc: 350386a909 | (JJ Merelo)++ | t/02-pod-valid.t

[18:06] <Geth> ¦ doc: Clarifies error message

[18:06] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/350386a909

[18:06] <Geth> ¦ doc: 014c7e6795 | (JJ Merelo)++ | 2 files

[18:06] <Geth> ¦ doc: Tests for tests spun off and included

[18:06] <Geth> ¦ doc: 

[18:06] <Geth> ¦ doc: Now it checks not only valid Pod6, but also valid syntax.

[18:06] <Geth> ¦ doc: 

[18:06] <Geth> ¦ doc: This is actually a workaround for #1951. It was a Rakudo error having

[18:06] <Geth> ¦ doc: to do with the setting up of a compunit, which is created when the

[18:06] <Geth> ¦ doc: file is interpreted. It happened, when it did, by the end of the

[18:06] <Geth> ¦ doc: <…commit message has 8 more lines…>

[18:06] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/014c7e6795

[18:10] *** raynold left
[18:12] *** lucasb left
[18:13] *** comborico1611_ joined
[18:13] *** comborico1611 left
[18:14] *** psychoslave left
[18:17] *** athenot joined
[18:19] *** vivus-ignis is now known as ignis__away

[18:23] *** cog_ left
[18:34] *** comborico1611_ left
[18:35] *** comborico1611_ joined
[18:36] *** darutoko left
[18:38] *** ignis__away is now known as vivus-ignis

[18:46] *** psychoslave joined
[18:48] *** athenot left
[18:51] *** kaare_ joined
[18:54] <Geth> ¦ doc: 99cb566e76 | (Will "Coke" Coleda)++ | doc/Language/temporal.pod6

[18:54] <synopsebot> Link: https://doc.perl6.org/language/temporal

[18:54] <Geth> ¦ doc: whitespace

[18:54] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/99cb566e76

[18:57] *** domidumont left
[19:02] *** jmerelo left
[19:30] *** markong left
[19:30] *** margeas joined
[19:38] *** markong joined
[19:38] <MasterDuke> rindolf: ping

[19:38] *** margeas left
[19:39] <rindolf> MasterDuke: hi

[19:39] <MasterDuke> hey. does this code look familiar to you? 'my $N = 2; my @x = FatRat.new(1, 1), -> $x { $x - ($x ** 2 - $N) / (2 * $x) } ... *; my $a = @x[13]; say $a.chars'

[19:40] *** comborico1611 joined
[19:40] *** comborico1611_ left
[19:41] <MasterDuke> back around february someone had some numerical code that was much slower in Perl 6 than Perl 5, Python, etc. the main part that was slow wasn't the number crunching, but the stringification of FatRats

[19:42] <MasterDuke> i did a minor optimization to FatRat shortly after, but thundergnat++ just made it many orders of magnitude faster

[19:43] <MasterDuke> c: 2018.04.1,HEAD my $N = 2; my @x = FatRat.new(1, 1), -> $x { $x - ($x ** 2 - $N) / (2 * $x) } ... *; my $a = @x[13]; say $a.chars; say now - INIT now

[19:43] <committable6> MasterDuke, ¦2018.04.1: «3139␤3.139767␤» ¦HEAD(9b915f0): «3140␤0.0545834␤»

[19:44] <El_Che> wow

[19:46] <MasterDuke> but i can't remember who it was

[19:46] *** athenot joined
[19:49] *** comborico1611_ joined
[19:49] *** comborico1611 left
[19:49] *** comborico1611_ is now known as comborico1611

[19:52] <rindolf> MasterDuke: it doesnt look familiar

[19:52] *** comborico1611 left
[19:53] *** psychoslave left
[19:54] <MasterDuke> hm, let me look back at the chat log for feb...

[19:56] <Voldenet> MasterDuke: it looks faster, but why it's 3139 in the first result and 3140 in the second?

[19:56] <timotimo> c: 2018.04.1,HEAD my $N = 2; my @x = FatRat.new(1, 1), -> $x { $x - ($x ** 2 - $N) / (2 * $x) }... *; my $a = @x[13]; say $a.chars; say $a.substr(*-16); say now - INIT now

[19:56] <committable6> timotimo, ¦2018.04.1: «3139␤1798339810837883␤6.4405407␤» ¦HEAD(9b915f0): «3140␤7983398108378828␤0.0876808␤»

[19:56] <MasterDuke> i think there were some bugs fixed as well

[19:57] <timotimo> it looks like it has one additional digit of accuracy

[19:57] <Voldenet> ah, makes sense

[19:57] <thundergnat> Voldenet: the new optimization returns 1 more decimal place of precision than it use to

[19:58] <El_Che> for free? or would be 1 decimal place less precision be faster?

[19:58] <thundergnat> I could have chopped it off, but it would have slowed it (marginally) for less precision... 

[19:58] <Voldenet> losing performance and precision doesn't sound like a good tradeoff

[19:59] <thundergnat> At least, it would have complicated the algorithm.

[20:00] <El_Che> more precision it is, then :)

[20:00] <El_Che> is it arch dependant? e.g. less in i386?

[20:01] <El_Che> (if so, it should be marked in the doc)

[20:01] <thundergnat> El_Che It _shouldn't_ be dependent. At least, not unless the underlying VM is. 

[20:01] <thundergnat> It's all pretty high level.

[20:02] <timotimo> that would be very weird

[20:02] <El_Che> cool

[20:02] <timotimo> it just uses the integers we provide, i.e. mp_int for big integer and 64bit ints otherwise

[20:02] <MasterDuke> thundergnat: btw, how did you come up with your change? i actually google around looking for faster algorithms and couldn't find anything

[20:03] <thundergnat> Dumb luck? 

[20:03] <thundergnat> I was working with large FatRats and the stringification was killing me.

[20:03] <MasterDuke> heh. well, you write a blog post or something, get the info searchable

[20:04] <thundergnat> I really wanted to return more decimal places of precision for FatRats in general but roast tests them a 6.

[20:04] <thundergnat> m: say FatRat.new(2/3)

[20:04] <camelia> rakudo-moar 9b915f09d: OUTPUT: «Type check failed in binding to parameter 'nu'; expected Int but got Rat (<2/3>)␤  in block <unit> at <tmp> line 1␤␤»

[20:04] <thundergnat> oops

[20:04] <thundergnat> m: say FatRat.new(2,3)

[20:04] <camelia> rakudo-moar 9b915f09d: OUTPUT: «0.666667␤»

[20:05] <thundergnat> I wanted that to return .6666666666666667

[20:05] <MasterDuke> have you checked the 6.c-errata branch of roast? if the tests you're talking about aren't there then we're way more free to change things

[20:05] <MasterDuke> otherwise, i'd suggest proposing it for 6.d

[20:06] <thundergnat> If you are paying the performance penalty for FatRat calculations why not get the benefit?

[20:19] *** athenot left
[20:23] *** lasse_ left
[20:33] *** cog_ joined
[20:33] *** vivus-ignis left
[20:42] *** molaf left
[20:44] *** sunnavy joined
[20:46] *** mscha joined
[20:50] *** margeas joined
[20:51] *** markong left
[20:52] *** comborico1611 joined
[20:58] *** mscha left
[21:06] *** raynold joined
[21:14] *** fascinum joined
[21:15] *** mikejw joined
[21:15] <mikejw> hey guys

[21:16] *** margeas is now known as markong

[21:16] *** cog_ left
[21:16] <mikejw> I'm not sure how much luck I'm going to have but I've been playing around with Terminal::Print and getting confused by $*TERMINAL 

[21:18] <mikejw> it doesn't seem to be used/set in any of the examples

[21:19] <AlexDaniel> grep: \$\*TERMINAL

[21:19] <greppable6> AlexDaniel, 7 lines, 1 modules: https://gist.github.com/7eb4e350fee6a2d9a15602726f19ea03

[21:20] <mikejw> yeah it's the Widget module I was hoping to grok 

[21:21] <geekosaur> looks like something not yet implemented

[21:21] <mikejw> hmm

[21:21] *** cog_ joined
[21:23] <geekosaur> there was some early consideration for working with terminals other than the one currently connected to stdin/stdout, for testing purposes, later set aside

[21:23] <geekosaur> so $*TERMINAL presumably is intended to be whatever the current terminal device is

[21:23] *** vivus-ignis joined
[21:24] <geekosaur> (curses has a similar mechanism, very rarely used)

[21:24] <mikejw> I'm stuck because I can't see how the examples attacks.p6 and rpg-ui.p6 seem to get around it 

[21:24] *** robertle left
[21:25] <mikejw> because they are using the Widget module

[21:27] <geekosaur> if I am reading this correctly, the only thing useful in $*TERMINAL is its grid, which is an in-memory representation of the widget's/window's/screen's contents

[21:28] <geekosaur> or intended contents; there will somewhere be a refresh/update handler that rebuilds the screen grid from what's visible on it and then outputs terminal commands to make it match the screen grid

[21:29] *** vivus-ignis left
[21:35] <mikejw> ah ok so maybe the issue is I'm trying to basically animate something that doesn't exist yet

[21:52] *** fascinum left
[21:54] *** fascinum joined
[22:04] <Ulti> 0.885s for my tests yay

[22:04] *** vike1 left
[22:05] *** vike joined
[22:07] <Ulti> was 0.96s for the advent calendar

[22:15] <thundergnat> Ulti: Out of curiosity, what do your tests test?

[22:16] *** zpc joined
[22:17] *** athenot joined
[22:17] *** cog_ left
[22:18] *** fascinum left
[22:23] <Ulti> https://github.com/MattOates/BioInfo/blob/master/t/sequences.t

[22:24] <Ulti> some basic manipulation and translation of DNA sequences

[22:24] <Ulti> but there is a grammar in there too along with a bunch of bag/hash manipulations

[22:25] <Ulti> basically its a good representative of the sorts of things you do in bioinformatics with sequence data

[22:25] <thundergnat> Heh. I did a double take at first. I actually work with a Matt Oates... but you're not him.

[22:26] <Ulti> just `perl6 -e 'say ""'` takes 0.258s

[22:26] <Ulti> thundergnat: hah oh really??

[22:26] <Ulti> are you sure :P

[22:26] <Ulti> also way to dox me in the logs jeees

[22:27] <thundergnat> Unless you've snuck over to New Jersey, USA 

[22:27] <Ulti> does your friend work as a tattoo artist?

[22:27] <Ulti> thats the main guy ruining my inbox at the moment

[22:27] <thundergnat> Github link doxed you more effectively than I did. ;P

[22:27] <Ulti> Im quite scared what anatomy Im going to get next from some of his female clients

[22:28] <Ulti> thundergnat: true

[22:31] *** lizmat joined
[22:46] *** mikejw left
[22:50] *** athenot left
[22:50] <timotimo> Ulti: i imagine you don't want to change the code to make stuff faster, but

[22:51] <timotimo> map *~*~*, $.sequence.uc.comb is better written as $.sequence.uc.comb(3), IMO

[22:51] <timotimo> hm, though

[22:51] <timotimo> m: say map *~*~*, "hello there".uc.comb(3)

[22:51] <camelia> rakudo-moar 9b915f09d: OUTPUT: «Too few positionals passed; expected 3 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[22:51] <timotimo> right, so it has already been multiple of 3 letters

[22:52] <timotimo> goes from 0.66s to 0.50s on my machine for this change

[23:00] <timotimo> i can even get it a tiny bit faster by replacing .comb(/<-[\*]>+/) with .split("*", :skip-empty), but that part of the code is only responsible for about 1 or 2 percent of total run time anyway

[23:00] <timotimo> oh, fun, 41k deoptimizations in Any-iterable-methods.pm6's line 357

[23:00] <timotimo> 347*

[23:01] <timotimo> that's from IterateOneWithoutPhasers

[23:01] <timotimo> which is the routine that takes 24% exclusive time in total, and only has 44.7k entries anyway

[23:11] <MasterDuke> how does that happen? the first 3k entries were all the same so it made an optimized version then the next 41k entries were all different?

[23:12] <timotimo> not necessarily, but possible i guess?

[23:13] <MasterDuke> any way to do better?

[23:17] <timotimo> let me first find out what exactly is deopting here

[23:20] <timotimo> OK, it's guarding for a staticframe that it had inlined

[23:21] <timotimo> it had inlined the pull-one from Str's comb method

[23:21] <MasterDuke> why is it de-opting?

[23:22] <timotimo> because it's no longer encountering that code

[23:22] <MasterDuke> what is it getting instead?

[23:23] <timotimo> the pull-one from Str's *other* comb method :)

[23:24] <MasterDuke> sibling rivalry rears its ugly head!

[23:24] <timotimo> line 360 is what was inlined, line 401 is the other

[23:26] <timotimo> at least the code already behaved like that before my changes :)

[23:30] *** wamba left
[23:31] *** MasterDuke left
[23:32] *** MasterDuke joined
[23:37] <MasterDuke> Ulti: fwiw, .comb would be faster here https://github.com/MattOates/BioInfo/blob/master/lib/BioInfo/Seq.pm6#L11

[23:38] <MasterDuke> m: my $s = ("a".."z").pick(*).join x 5; my @a; my $t = now; for ^100_000 { @a = $s.split("") }; say @a; say now - $t;

[23:38] <camelia> rakudo-moar 9b915f09d: OUTPUT: «[ m e v g z b h w a p q i u d x k j r l n t f o s c y m e v g z b h w a p q i u d x k j r l n t f o s c y m e v g z b h w a p q i u d x k j r l n t f o s c y m e v g z b h w a p q i u d x k j r l n t ...]␤4.5703216␤»

[23:38] <MasterDuke> m: my $s = ("a".."z").pick(*).join x 5; my @a; my $t = now; for ^100_000 { @a = $s.comb }; say @a; say now - $t;

[23:38] <camelia> rakudo-moar 9b915f09d: OUTPUT: «[e i x g s n t r y h b d m j o l v u k q c z w f a p e i x g s n t r y h b d m j o l v u k q c z w f a p e i x g s n t r y h b d m j o l v u k q c z w f a p e i x g s n t r y h b d m j o l v u k q c z ...]␤4.103915␤»

[23:40] <MasterDuke> also, you might be able to replace $.attribute with $!attribute in a bunch of places, that should be faster also

[23:42] *** ufobat left
[23:46] <timotimo> we can hopefully inline the accessor just fine in those cases, and that allows subclasses to work with these methods, too

[23:46] <timotimo> really it's a question of API design

[23:47] *** athenot joined
[23:57] *** markong left
[23:59] *** w_richard_w joined
[23:59] *** espadrine left
