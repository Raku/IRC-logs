[00:01] *** simpleseeker left
[00:01] *** simpleseeker joined
[00:04] <comborico1611> timotimo: I figured you were older than that.

[00:05] <comborico1611> geekosaur: Heh. Yeah. We're getting older, though!

[00:06] <Geth> ¦ perl6.org: a3b5ca8c0f | (Zoffix Znet)++ (committed using GitHub Web editor) | includes/footer

[00:06] <Geth> ¦ perl6.org: Fix links/description to Specs/Speculations

[00:06] <Geth> ¦ perl6.org: 

[00:06] <Geth> ¦ perl6.org: Fixes https://github.com/perl6/perl6.org/issues/108

[00:06] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/a3b5ca8c0f

[00:06] <Kaiepi> pod6 is different?

[00:06] <Kaiepi> shit i've been treating it like POD

[00:08] *** Rawriful left
[00:09] <timotimo> comborico1611: what birth year would you guess for me?

[00:10] <comborico1611> I have little context-clues.  But I'm assuming you're a little bit older than me, and got onto the computer scene later than myself.  So I'd say your 40 years old.

[00:11] <timotimo> i'm glad you're far off the mark :) :)

[00:11] <timotimo> i'm just 28

[00:12] <timotimo> i mean, being 40 years old isn't a bad thing, it'd just be very sudden for me :D

[00:12] <comborico1611> So I AM older.

[00:13] <comborico1611> And wiser.

[00:13] <comborico1611> Haha.

[00:14] <timotimo> no doubt, i'm lagging behind friends my age in wiseness :|

[00:14] <timotimo> not to say you might only be wiser than me because i'm less wise than i should be, of course

[00:15] *** MasterDuke left
[00:15] <comborico1611> Reading the Holy Bible will give you wisdom.

[00:16] <timotimo> i might start studying sacred texts at some point, but now i'm not patient enough to do right by any of them

[00:16] <comborico1611> I studied religions in my teens and early 20s.

[00:17] <timotimo> any stand-outs?

[00:17] <comborico1611> Stand-outs?

[00:17] <timotimo> any of the religions you studied stood out positively to you, i mean

[00:18] <comborico1611> Jesus Christ is the way, the truth, and the life.

[00:18] <timotimo> (second language english can cause you to say some funny things)

[00:18] <comborico1611> Oh!  Where you from?

[00:18] <timotimo> germany

[00:19] <timotimo> in fact, i'm going to go to bed very soon

[00:19] <timotimo> since it's just past 2am ;)

[00:19] <comborico1611> Alright then.  Good talking with you.  

[00:19] <timotimo> o/

[00:19] <comborico1611> \o

[00:22] <Kaiepi> damn i'm only 21

[00:23] <comborico1611> Heh

[00:25] <comborico1611> What do we call a statement that uses the xx operator, as in (say "bob") xx 3

[00:26] <comborico1611> I'm looking for something equivalent to a for-loop statement, that type of terminology.

[00:26] <comborico1611> Or is it just, "say bob three times"?

[00:31] <Kaiepi> is (say 'bob') a closure?

[00:31] <Kaiepi> wait no, that's a List

[00:33] *** wamba left
[00:33] *** pharv joined
[00:34] <geekosaur> xx is just list replication

[00:34] <Kaiepi> ohh

[00:34] <Kaiepi> p6: dd (say 'bob') xx 3

[00:34] <camelia> rakudo-moar 20ccaccad: OUTPUT: «bob␤(Bool::True, Bool::True, Bool::True).Seq␤bob␤bob␤»

[00:35] <geekosaur> https://docs.perl6.org/language/control#for

[00:37] <Kaiepi> it looks like it's evaluating say 'bob' while multiplying the List

[00:38] *** pharv left
[00:39] <geekosaur> xx thunks, so it behaves in *some* ways like a for loop

[00:39] <comborico1611> Lists?  As in Lisp Lists?

[00:41] <Herby__> o/

[00:41] <comborico1611> I've gotta go.  

[00:41] <comborico1611> \o

[00:41] *** comborico1611 left
[00:52] *** simpleseeker left
[01:00] *** zachk left
[01:06] *** MilkmanDan joined
[01:24] *** vutral|kali left
[01:28] *** Kaiepi left
[01:28] *** Kaiepi joined
[01:31] *** Herby_ joined
[01:36] <Kaiepi> would Array.randomize be a useful feature to have?

[01:45] <Kaiepi> unless it's already a feature i don't know about

[01:47] <tobs> m: say (1..20).sort: { [Less, More].pick }

[01:47] <camelia> rakudo-moar 20ccaccad: OUTPUT: «(1 2 4 7 8 9 10 11 15 16 18 19 20 3 5 6 12 13 14 17)␤»

[01:47] *** ilbot3 left
[01:48] <tobs> not sure if that's uniformly distributed though

[01:48] <Kaiepi> i mean like a knuth shuffle

[01:50] <tobs> m: say set(1..20).pick(*)

[01:50] <camelia> rakudo-moar 20ccaccad: OUTPUT: «(8 10 2 11 14 15 5 3 18 17 19 4 12 13 20 16 9 1 6 7)␤»

[01:50] <tobs> that should be it, no?

[01:52] <Herby_> m: "42".defined;

[01:52] <camelia> rakudo-moar 20ccaccad: ( no output )

[01:52] <Herby_> how I do I return a bool value if a variable is defined?

[01:52] <Kaiepi> yeah that does the trick tobs

[01:52] <Kaiepi> thanks

[01:53] <tobs> Herby_: like you did, but you need to "say" it

[01:53] <Herby_> m: say "42".defined;

[01:53] <camelia> rakudo-moar 20ccaccad: OUTPUT: «True␤»

[01:55] *** ilbot3 joined
[01:55] *** ChanServ sets mode: +v ilbot3

[01:55] <Herby_> tobs: thanks

[01:56] <tobs> Kaiepi: on second thought, a bag would be better for repeated array members

[01:57] <Kaiepi> hmm

[01:57] *** FROGGS_ joined
[01:58] <Kaiepi> how do they differ?

[02:00] <tobs> the set() will swallow duplicated elements

[02:00] <tobs> m: set(1..10, 1..10).pick(*)

[02:00] <camelia> rakudo-moar 20ccaccad: ( no output )

[02:00] <tobs> m: say set(1..10, 1..10).pick(*)

[02:00] <camelia> rakudo-moar 20ccaccad: OUTPUT: «(2 6 10 1 5 3 9 4 7 8)␤»

[02:00] <tobs> m: say bag(1..10, 1..10).pick(*)

[02:00] <camelia> rakudo-moar 20ccaccad: OUTPUT: «(5 2 4 6 10 4 7 3 3 2 8 7 9 9 10 1 6 1 8 5)␤»

[02:01] *** FROGGS left
[02:02] <Kaiepi> ahh

[02:04] *** MasterDuke joined
[02:04] <Kaiepi> i'll need to read more about the different container types

[02:04] <Kaiepi> i know about sets, maps, arrays, seq, but the others not so much

[02:06] <MasterDuke> m: say (^10).pick(*) xx 5

[02:06] <camelia> rakudo-moar 20ccaccad: OUTPUT: «((3 7 2 5 4 1 6 8 9 0) (3 6 4 0 9 5 2 8 7 1) (2 1 4 6 3 8 9 0 7 5) (9 1 7 4 6 3 8 2 0 5) (5 1 7 9 8 4 6 2 0 3))␤»

[02:21] *** eliasr left
[02:35] *** Herby_ left
[02:35] *** Herby_ joined
[02:45] <Herby_> m: my $a = "42".defined; say $a;

[02:45] <camelia> rakudo-moar 20ccaccad: OUTPUT: «True␤»

[02:52] *** aindilis left
[02:57] *** ttkp6 joined
[02:57] *** MasterDuke left
[02:58] <ttkp6> hello perl6 folks!  is there a recommended way to get the current time at high resolution under Rakudo?  something like perl5's Time::HiRes::time

[03:08] *** Zoffix joined
[03:08] <Zoffix> ttkp6: like you just want `now`

[03:09] <Zoffix> m: say now

[03:09] <camelia> rakudo-moar 20ccaccad: OUTPUT: «Instant:1524280177.571063␤»

[03:09] <Zoffix> s/like/likely/;

[03:10] <Zoffix> Kaiepi: it's an already-proposed and trial-implemented feature: https://github.com/rakudo/rakudo/issues/1658

[03:11] <Zoffix> m: my @a = 'a'…'z'; @a.=grab: *; dd @a

[03:11] <camelia> rakudo-moar 20ccaccad: OUTPUT: «Array @a = ["z", "v", "q", "k", "h", "t", "g", "o", "j", "a", "r", "e", "n", "b", "m", "p", "c", "f", "s", "u", "i", "l", "d", "w", "x", "y"]␤»

[03:12] <Kaiepi> is there a simpler way of telling if an array is sorted than @arr.sort ~~ @arr?

[03:13] <Zoffix> nothing comes to mind

[03:13] <ttkp6> Zoffix - thank you :-)

[03:13] <kurahaupo> Kaiepi: that's going to take O(n logn) whereas simply verifying that each element follows the preceding one would be O(n)

[03:14] <Zoffix> oh, right

[03:14] <Zoffix> m: my @a = 'a'…'z'; say [after] @a

[03:14] <camelia> rakudo-moar 20ccaccad: OUTPUT: «False␤»

[03:14] <Zoffix> m: my @a = 'a'…'z'; say [before] @a

[03:14] <camelia> rakudo-moar 20ccaccad: OUTPUT: «True␤»

[03:14] <Zoffix> m: my @a = <a c b>; say [before] @a

[03:14] <camelia> rakudo-moar 20ccaccad: OUTPUT: «False␤»

[03:14] <Zoffix> Kaiepi: ^ that works, I think

[03:14] <ttkp6> nifty

[03:15] <kurahaupo> Zoffix: thanks for reminding me of the syntax

[03:15] * kurahaupo obviously doesn't sound enough time coding P6

[03:16] <Zoffix> m: my @a = <a a a>; say [before] @a

[03:16] <camelia> rakudo-moar 20ccaccad: OUTPUT: «False␤»

[03:17] <Zoffix> Aha, I knew it was a bit more complex than that :)

[03:17] <Zoffix> m: my @a = <a a a>; say [!!after] @a

[03:17] <camelia> rakudo-moar 20ccaccad: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my @a = <a a a>; say [!!after]7⏏5 @a␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        …»

[03:17] <Zoffix> m: my @a = <a a a>; say [!after] @a

[03:17] <camelia> rakudo-moar 20ccaccad: OUTPUT: «True␤»

[03:17] <Zoffix> Kaiepi: that should be it ^

[03:17] <Herby_> I'm trying to use grammar actions, and I'm going astray somewhere

[03:18] <Herby_> where should I start troubleshooting this:  Useless use of "resolution  => PT<resolution>.Str" in sink context (line 71)  

[03:19] <Zoffix> Herby_: that sounds like you got precedence wrong.

[03:19] <Zoffix> What's the full code?

[03:19] <Zoffix> Around that line

[03:20] <Herby_> https://gist.github.com/sylints/1a6c13e0fe459dd0cd5b16988a40202b

[03:21] <Herby_> my $match = PT.parse('Legion.S01E08.720p.HDTV.x264-AVS', actions => PT-actions.new);

[03:22] <Zoffix> m: dd [{:42foo; :70bar;}]

[03:22] <camelia> rakudo-moar 20ccaccad: OUTPUT: «WARNINGS for <tmp>:␤Useless use of ":42foo" in sink context (line 1)␤[-> ;; $_? is raw { #`(Block|59165536) ... }]␤»

[03:22] <Zoffix> Herby_: you've used semicolons instead of commas

[03:23] <Herby_> doh!

[03:24] <Herby_> thanks :)

[03:25] <Kaiepi> sorry i was afk

[03:26] <Kaiepi> what are [!after] and [!before] doing?

[03:28] <Zoffix> Kaiepi: that's reduction, basically `[!after] <a b c>` is the same as putting `!after` between each element of that list, as in `'a' !after 'b' !after 'c'` and `!after` is "not after" and `after` is `cmp == Order::More`;.... so basically that statement checks that each element does not compare to be "after" the next one, which in turn means the array is sorted

[03:29] <Zoffix> I think these are the docs: https://docs.perl6.org/routine/reduce#(List)_routine_reduce

[03:29] <Kaiepi> ah

[03:30] <Kaiepi> i really need to read the docs on reducing

[03:31] <Kaiepi> in node i abuse reduce a lot

[03:36] *** Herby_ left
[03:43] *** pharv joined
[03:48] *** pharv left
[03:59] *** MasterDuke joined
[04:04] *** khw left
[04:14] *** BenGoldberg left
[04:38] *** skids left
[05:03] *** robertle_ joined
[05:20] *** sauvin joined
[05:45] *** pharv joined
[05:50] *** pharv left
[05:50] *** natrys joined
[05:59] *** lizmat joined
[06:01] *** robertle_ left
[06:05] *** noganex left
[06:48] *** |oLa| joined
[06:52] *** wamba joined
[07:06] *** rindolf joined
[07:22] *** jmerelo joined
[07:34] <Geth> ¦ doc: JJ self-assigned A new take on reducing travis test time for perl6/doc https://github.com/perl6/doc/issues/1946

[07:37] *** khisanth__ left
[07:45] *** pharv joined
[07:48] <buggable> New CPAN upload: App-Assixt-0.3.0.tar.gz by TYIL http://modules.perl6.org/dist/App::Assixt:cpan:TYIL

[07:48] <tyil> Herby__: ^ that one should fix your issue

[07:50] *** FROGGS_ left
[07:50] *** pharv left
[07:51] *** khisanth__ joined
[07:56] <El_Che> ah, JJ is already awake :)

[07:58] *** natrys left
[08:07] <jmerelo> El_Che: it's Saturday. I stayed in bed a bit longer :-)

[08:13] <moritz> how dare you :-)

[08:15] <jmerelo> moritz: academia. It's a dog eat dog world. Papers aren't gonna write themselves.

[08:17] <moritz> it's most efficient to write those papers when you're well-rested though

[08:21] *** domidumont joined
[08:21] *** cog_ joined
[08:22] <jmerelo> moritz: so true.

[08:24] *** cognominal left
[08:27] *** domidumont left
[08:27] *** domidumont joined
[08:42] <El_Che> jmerelo: is't AI the last fad? Let's papers write themselves!

[08:42] *** eliasr joined
[08:42] <El_Che> jmerelo: the next step is "paper plagarizing themselves"!

[08:42] <El_Che> full meta :)

[08:43] <El_Che> jmerelo: getting the right ruby, travis and bintray combination for the doc pkgs took some advanced trial and error :)

[08:45] *** darutoko joined
[08:45] *** dd070 joined
[08:45] <dd070> who uses perl6 ?

[08:48] <El_Che> o/

[08:51] <Kaiepi> \o

[08:52] *** domidumont left
[08:56] <jmerelo> El_Che: that's been done, in fact several times :-)

[08:56] <jmerelo> El_Che: great work, thanks!

[08:57] <jmerelo> dd070: most people in this chat room, several companies, at least a couple of universities (mine and El_Che's)... 

[08:59] <dd070> I am interested to know which companies use perl6

[09:06] *** dd070 left
[09:10] <AlexDaniel> jmerelo: how do you use perl 6 exactly by the way? Any actual courses where students are taught perl 6?

[09:14] *** wamba left
[09:15] <jmerelo> AlexDaniel: for research, mainly. Also as example in some cloud computing course

[09:17] <jmerelo> AlexDaniel: For instance, here when explaining Dockerfiles http://jj.github.io/CC/documentos/temas/Contenedores#usando-dockerfiles

[09:17] *** dd070 joined
[09:17] *** ExtraCrispy joined
[09:18] <AlexDaniel> I see

[09:18] <jmerelo> AlexDaniel: this paper on concurrent evolutionary algorithms using perl 6 https://github.com/JJ/evosoft-concurrent-perl6

[09:19] <jmerelo> AlexDaniel: and this other paper on benchmarking evolutionary algorithms and the improvements Perl 6 has had https://github.com/JJ/2016-ea-languages-wcci (you might remember this one, everyone pitched in)

[09:20] <jmerelo> AlexDaniel: as you see, I do open science by default. Everyone is welcome to help and obviously add her signature to the paper, if that helps.

[09:21] <jmerelo> dd070: please check out this answer in Quora https://www.quora.com/Are-any-companies-planning-to-use-Perl-6 Also, Edument is developing a whole range of products with Perl 6 https://edument.se/en/

[09:22] <AlexDaniel> jmerelo: what's .Rnw? looks like normal LaTeX but I guess it's not? Google doesn't give much…

[09:23] <jmerelo> AlexDaniel: it's Latex + R, using a very cool library called knitr. It allows me to embed data processing and visualization in the paper, and not worry about redoing charts when hated reviewer #3 complains about the font or its size.

[09:24] <jmerelo> AlexDaniel: also contributes to the open science part. The experimental data and everything is in the repo, and the R scripts show transparently what's being done with it. 

[09:25] <AlexDaniel> jmerelo: obviously. That's exactly what I'd expect from any paper really

[09:25] <AlexDaniel> jmerelo++

[09:25] <jmerelo> AlexDaniel: check it out, it's very cool https://yihui.name/knitr/ I use it all the time. You update data with new experiments, you only have to rerun

[09:26] <jmerelo> AlexDaniel: unfortunately, it's less popular than you might think among the scientific community. 

[09:26] <AlexDaniel> jmerelo: I know

[09:26] <AlexDaniel> jmerelo: sucks really

[09:28] <jmerelo> AlexDaniel: here are a few papers I wrote analyzing several popular Perl repositories, including Moose and Catalyst https://github.com/JJ/literaturame/tree/master/report Some of them use R Markdown (Rmd), same thing, only simpler.

[09:29] <jmerelo> The bulk of the data processing is done here https://github.com/JJ/literaturame/blob/master/report/analyzing-repos-ECAL17.Rnw#L25. Anyway, R rather sucks for data munging (or I suck at using it). I generally use Perl for massaging the data, or later Perl 6

[09:32] <AlexDaniel> jmerelo: so how does knitr compare to say tikz?

[09:32] <jmerelo> AlexDaniel: isn't tikz actually for graphics? Also, I think what knitr does is to generate tikz code for the charts. Let me see...

[09:36] <jmerelo> jmerelo: yep, knitr uses internally tikz to generate graphics https://yihui.name/knitr/demo/graphics/

[09:39] *** noganex joined
[09:41] *** wamba joined
[09:44] *** dd070 left
[09:46] *** pharv joined
[09:51] *** pharv left
[09:52] <AlexDaniel> jmerelo: ok that's very interesting, thanks

[09:52] <jmerelo> AlexDaniel: my pleasure :-)

[09:53] <jmerelo> AlexDaniel: as said above, fell free to comment/suggest/criticize whatever you find questionable or in need of improvement. 

[10:04] *** domidumont joined
[10:33] *** lizmat left
[10:46] *** pharv joined
[10:51] *** pharv left
[10:55] *** jmerelo left
[11:05] *** wamba left
[11:11] *** natrys joined
[11:11] *** wamba joined
[11:40] *** markong joined
[11:46] *** markong left
[11:56] <Kaiepi> would this be useful to very many people? https://hastebin.com/afukajibok.pl 

[11:56] <Kaiepi> it wraps methods, taking the return value and asynchronously spawning a child process

[12:01] <timotimo> Kaiepi: that could be incompatible with precomp, though; trait mods are run at compile time and i don't think locks can be serialized

[12:02] <Kaiepi> damn

[12:04] <Kaiepi> would it work if the locks were handled outside the trait mods?

[12:06] <Kaiepi> wait why aren't i testing this

[12:08] <timotimo> it doesn't seem like @lines is used anywhere, do you only use it to slurp up any output that happens?

[12:10] <timotimo> oh, also, i recommend using :bin for stdout and stderr so that it won't crash when the program you launch spits out binary "garbage"

[12:18] <Kaiepi> lines was meant to be returned

[12:18] <Kaiepi> since for what i'm writing i use it for logging

[12:20] <Kaiepi> not to console i mean, to irc,which is dealt with separately

[12:20] <timotimo> right

[12:25] <Kaiepi> i think using more fp for this might make it possible to do both

[12:33] *** wamba left
[12:43] <MasterDuke> Kaiepi: also, if you want, you could do .Supply to get stdout and stderr merged together

[12:46] *** markong joined
[12:48] <Kaiepi> ohhh, i didn't know about that

[12:49] <Kaiepi> that's what i'm aiming to do

[12:49] <Kaiepi> thanks

[13:02] *** natrys left
[13:09] *** rindolf left
[13:12] *** hlafarge joined
[13:13] <AlexDaniel> tyil: hello

[13:13] <AlexDaniel> tyil: where's the repository for https://modules.perl6.org/dist/Ops::SI ?

[13:16] *** jeek joined
[13:28] *** hlafarge left
[13:30] *** sena_kun joined
[13:35] <timotimo> https://github.com/scriptkitties/perl6-Ops-SI - AlexDaniel probably this

[13:35] <AlexDaniel> Yeah! OK thanks

[13:36] *** koto joined
[13:37] *** koto left
[13:39] *** sena_kun left
[13:41] <AlexDaniel> actually… I'm not sure how to fix that module

[13:41] <AlexDaniel> m: say 3 × 10¯²⁴

[13:41] <camelia> rakudo-moar 1c6701b92: OUTPUT: «2.9999999999999996e-24␤»

[13:43] <AlexDaniel> ah, I see

[13:43] <AlexDaniel> it's ok

[13:48] <El_Che> releasable6: status

[13:48] <releasable6> El_Che, Next release in ≈5 hours. 2 blockers. 224 out of 249 commits logged

[13:48] <releasable6> El_Che, Details: https://gist.github.com/0cea5dc5b10aed164340dbbaf7fbfaac

[13:49] <tyil> AlexDaniel: the repo given by timotimo is correct

[13:57] *** Juerd left
[13:57] *** Juerd joined
[14:01] *** mingdao joined
[14:01] <AlexDaniel> tyil: cool. I looked at META6.json but the wasn't there. Anyway, can you take a look at its tests? R#1736

[14:01] <synopsebot> R#1736 [open]: https://github.com/rakudo/rakudo/issues/1736 [LHF][⚠ blocker ⚠] Toaster results show several modules' tests rely on buggy Num stringification

[14:01] <AlexDaniel> link*

[14:02] *** mingdao left
[14:02] <AlexDaniel> tyil: I tried this: https://gist.github.com/AlexDaniel/3269c8377b905710129d433182f9780c

[14:02] <AlexDaniel> but it fails one test still

[14:03] <AlexDaniel> m: say 1e-20 ≅ 1.0000000000000001e-21

[14:03] <camelia> rakudo-moar 1c6701b92: OUTPUT: «False␤»

[14:03] *** mingdao joined
[14:13] *** rindolf joined
[14:17] *** epony left
[14:19] *** Kaffe left
[14:28] <buggable> New CPAN upload: Distribution-Builder-MakeFromJSON-0.2.tar.gz by NINE https://cpan.metacpan.org/authors/id/N/NI/NINE/Perl6/Distribution-Builder-MakeFromJSON-0.2.tar.gz

[14:28] *** khw joined
[14:32] *** Kaffe joined
[14:32] *** epony joined
[14:35] *** epony left
[14:35] *** epony joined
[14:48] <buggable> New CPAN upload: App-Mi6-0.1.7.tar.gz by SKAJI http://modules.perl6.org/dist/App::Mi6:cpan:SKAJI

[14:50] <timotimo> AlexDaniel: that's off by 10x, though, isn't it?

[14:51] <AlexDaniel> timotimo: haha looks so

[14:51] <AlexDaniel> haha the test is wrong, was it my mistake?

[14:52] <AlexDaniel> oh wow, it is

[14:52] <AlexDaniel> how did that happen…

[14:52] <AlexDaniel> timotimo++

[14:53] <Kaiepi> oh sweet cpan shows travis build statuses now

[14:55] <Kaiepi> or at least they started to show up on mine

[14:55] *** Sgeo_ joined
[14:58] *** Sgeo__ left
[15:05] *** Kaffe left
[15:12] *** skids joined
[15:32] *** jmerelo joined
[15:33] <Herby__> o/

[15:34] <Herby__> tyil: thanks!

[15:43] *** kybr left
[15:54] <Geth> ¦ doc: e10ff7eef5 | (JJ Merelo)++ | doc/Type/Str.pod6

[15:54] <Geth> ¦ doc: Adds not on return values for sprintf refs #1248

[15:54] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e10ff7eef5

[15:54] <synopsebot> Link: https://doc.perl6.org/type/Str

[16:02] *** wamba joined
[16:11] *** zakharyas joined
[16:13] *** zakharyas left
[16:14] *** zakharyas joined
[16:18] *** skids left
[16:29] *** zakharyas left
[16:30] *** zakharyas joined
[16:35] *** xinming_ left
[16:46] <Geth> ¦ doc: f66e9a0e05 | (JJ Merelo)++ | doc/Type/Str.pod6

[16:46] <Geth> ¦ doc: Retiring NYI marks from Str examples

[16:46] <Geth> ¦ doc: 

[16:46] <Geth> ¦ doc: Some of them have been implemented according to

[16:46] <Geth> ¦ doc: https://github.com/perl6/roast/blob/master/S32-str/sprintf.t

[16:46] <synopsebot> Link: https://doc.perl6.org/type/Str

[16:46] <Geth> ¦ doc: 

[16:46] <Geth> ¦ doc: Also, there should be an easier way of doing this.

[16:46] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f66e9a0e05

[16:49] *** MasterDuke left
[16:51] <tyil> AlexDaniel: bbq is fired up now, I'll look into it Soon™

[16:51] <AlexDaniel> tyil: I think I submitted a pull request already, if I'm not mistaken

[16:52] *** colomon joined
[17:00] <jmerelo> Is there any way to know the plans for implementing NYI things? I'm thinking about all the sprintf flags in this case.

[17:02] <moritz> which plans?

[17:02] <moritz> there is no central intelligence in the Perl 6 projects; people just do what they can and/or like and/or think that it furthers the cause

[17:03] <jmerelo> moritz: I don't know. Something like "we're implementing this flag by 20xx.xx". The Y in NYI implies that they are going to be implemented eventually, right?

[17:03] <Zoffix> jmerelo: not really. It's volunteer based and everyone largely works on whatever they want. There are only a few things in plans, like slurpy dispatch would get cached soonish, native dispatch thing will be fixed. If CaR grant is approved, native attributes, rats, and constants would be fixed, but that's about it as far as plans go

[17:04] <jmerelo> Is there at least a master list of NYI stuff people can draw from?

[17:04] <moritz> jmerelo: is docs/ROADMAP in rakudo

[17:05] <moritz> in a volunteer-driven project, you can either promise release dates or features; it doesn't work to promise both

[17:05] <jmerelo> Let's put it in another way. If I want to be aware of when NYI things are implemented to add that to the documentation (or take out NYI marks), is there a way of doing that other than checking on Roast from time to time?

[17:05] <moritz> yes, you can read the rakudo changelogs when a release comes out

[17:05] <moritz> they tend to be pretty well-maintained

[17:06] <timotimo> have automated tests that change their status when something gets implemented

[17:06] <Zoffix> jmerelo: (master list) not really. There are NYI-tagged tickets on RT but they're outdated and many things I saw in the past aren't planned to be implemented.

[17:06] <Zoffix> jmerelo: well, my hope is the developers who implement those features also document them...

[17:07] <Zoffix> That ROADMAP also looks outdated "Last commit:  Sep 15, 2015"

[17:07] <jmerelo> OK, so I see something like a two-pronged approach. Keep an eye on ChangeLog to check what new things that should be documented are implemented, if you want to check particular features, write tests for them and run for new releases, right?

[17:08] <moritz> cd

[17:08] <moritz> sorry

[17:08] <Zoffix> /home/moritz $

[17:09] * jmerelo laughing at the joke.

[17:09] *** zakharyas left
[17:09] <rindolf> Zoffix: hi

[17:09] <Zoffix> hi

[17:09] *** MasterDuke joined
[17:10] <rindolf> Zoffix: can you give me arecipe for the class-wise add op?

[17:10] <Zoffix> What's a class-wise op?

[17:10] <rindolf> Zoffix: what i asked yesterday

[17:10] <rindolf> field by field

[17:11] <timotimo> didn't he already give you code that does what you want?

[17:11] <Zoffix> rindolf: there was a code example. Check the channel logs

[17:11] <rindolf> Zoffix: ah, which one? there were too many

[17:13] <Zoffix> https://irclog.perlgeek.de/perl6/2018-04-20#i_16071615

[17:13] <jmerelo> releasable6: status

[17:13] <releasable6> jmerelo, Next release in ≈1 hour. 2 blockers. 224 out of 249 commits logged

[17:13] <releasable6> jmerelo, Details: https://gist.github.com/0f9847e449bc1a7ac4bd32c328fa60e6

[17:13] <rindolf> Zoffix: thanks

[17:14] <rindolf> Zoffix: so i need to list every field?

[17:15] <Zoffix> rindolf: I answered all of that yesterday already. Just read that conversation

[17:15] *** robertle_ joined
[17:15] <Zoffix> https://irclog.perlgeek.de/perl6/2018-04-20#i_16071629

[17:15] <Zoffix> https://irclog.perlgeek.de/perl6/2018-04-20#i_16071647

[17:15] <Zoffix> It's a line above you saying "thanks". What were you saying thanks to?

[17:16] * Zoffix &

[17:16] *** Zoffix left
[17:23] <jmerelo> rindolf: and that is why I always ask people to repeat their questions in StackOverflow. Q & As are pretty well organized there, and more people (not present in the chat) can also answer them.

[17:26] *** Rawriful joined
[17:27] <timotimo> jmerelo: i accidentally sent a message to jjmerelo instead of jmerelo

[17:27] <timotimo> just saying that "punt" is a legit verb

[17:28] <jmerelo> timotimo: I have both...

[17:28] <jmerelo> timotimo: was it in that context?

[17:28] <timotimo> the bot will only deliver those when it sees someone with the exact nickname speaks up

[17:28] <timotimo> there was a stackoverflow question where you wanted to edit the text to replace punt with point

[17:29] <timotimo> the description saying you "fixed a typo"

[17:29] <jmerelo> timotimo: right. So was punt better in that context?

[17:29] <timotimo> it fits at least

[17:29] <jmerelo> timotimo: let me see...

[17:30] <jmerelo> timotimo: it means "bet" or "take a long shot". "Punter" is sometimes used for "customer". But let me see...

[17:31] <timotimo> oh?

[17:32] <geekosaur> there's also usage derived from NFL where it means kicking it over to <s>the other team</s> someone else to deal with

[17:34] <jmerelo> timotimo: I can't find it. But whatever you did, that's fine :-)

[17:36] <timotimo> can't find what?

[17:36] <jmerelo> timotimo: the thing I edited... 

[17:36] <timotimo> one of bdf's questions

[17:36] <timotimo> i think it's the one about tie breakers?

[17:38] <Geth> ¦ museum-items: 4f6182e465 | raiph++ (committed using GitHub Web editor) | 2 files

[17:38] <Geth> ¦ museum-items: Rename The-Jon-Orwant-mug-throwing-incident-at-P5P-meeting.md to 07-18-The-Jon-Orwant-mug-throwing-incident-at-P5P-meeting.md

[17:38] <Geth> ¦ museum-items: 

[17:38] <Geth> ¦ museum-items: Prefix date so events list in github in order

[17:38] <Geth> ¦ museum-items: review: https://github.com/perl6/museum-items/commit/4f6182e465

[17:39] <jmerelo> timotimo: You mean "The docs for Perl 6 longest alternation in regexes point to Synopsis 5 "

[17:39] <Geth> ¦ museum-items: f2e803bac1 | raiph++ (committed using GitHub Web editor) | 2 files

[17:39] <Geth> ¦ museum-items: Rename State Of The Onion 2000 introduces Perl 6.md to 07-19-Larry announces Perl 6.md

[17:39] <Geth> ¦ museum-items: review: https://github.com/perl6/museum-items/commit/f2e803bac1

[17:39] <timotimo> yes

[17:40] <jmerelo> timotimo: Yep, it might make sense if we understand it like geekosaur says.

[17:41] <jmerelo> timotimo: but then wouldn't that be "punt on"? Or simply punt? https://english.stackexchange.com/questions/388162/can-to-punt-something-mean-not-to-do-something

[17:43] <timotimo> i've learnt to use it as in "punt to something/someone else" like "refer to"

[17:45] <jmerelo> timotimo: I've restituted it where it belongs. Thanks!

[17:53] *** ExtraCrispy left
[17:59] *** zakharyas joined
[18:08] <Herby__> \t a high

[18:10] <jmerelo> p6: my $i=400; say "\c$i"

[18:10] <camelia> rakudo-moar 1c6701b92: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unrecognized \c character␤at <tmp>:1␤------> 3my $i=400; say "\c7⏏5$i"␤    expecting any of:␤        argument list␤        double quotes␤        term␤»

[18:10] <jmerelo> p6: my $i=400; say "\c"~$i

[18:10] <camelia> rakudo-moar 1c6701b92: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unrecognized \c character␤at <tmp>:1␤------> 3my $i=400; say "\c7⏏5"~$i␤    expecting any of:␤        argument list␤        double quotes␤        term␤»

[18:12] <jmerelo> p6: my $i=400; my $str = qq \c\q["~$i~']'

[18:12] <camelia> rakudo-moar 1c6701b92: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my $i=400; my $str = qq \c\7⏏5q["~$i~']'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤    …»

[18:12] <jmerelo> So this one is pretty hard: https://stackoverflow.com/questions/49958457/string-interpolation-in-perl6

[18:16] <jmerelo> p6: my $i=400; say $i.chr'

[18:16] <camelia> rakudo-moar 1c6701b92: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my $i=400; say $i.chr7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement m…»

[18:17] <jmerelo> p6: my $i=400; say $i.chr

[18:17] <camelia> rakudo-moar 1c6701b92: OUTPUT: «Ɛ␤»

[18:17] <jmerelo> Or maybe not so much...

[18:18] <rindolf> .help send

[18:18] <yoleaux> rindolf: Sorry, no help is available for send.

[18:18] <rindolf> .help tell

[18:18] <yoleaux> Relay a telegram to someone

[18:18] <jmerelo> Maybe add something about that to the documentation? Or to traps? 

[18:19] <rindolf> .tell Zoffix thanks for your help, see https://github.com/shlomif/project-euler/blob/master/project-euler/220/220-v1.p6

[18:19] <yoleaux> rindolf: I'll pass your message to Zoffix.

[18:26] <timotimo> rindolf: you kept the python hashbang in that file

[18:27] <rindolf> timotimo: ah, thanks

[18:30] *** jeek left
[18:30] *** jmerelo left
[18:31] <rindolf> timotimo: updated

[18:31] <rindolf> timotimo: i also want to create an env class

[18:32] <rindolf> timotimo: or at least a closure - hmmm...

[18:34] *** zachk joined
[18:34] *** zachk left
[18:34] *** zachk joined
[18:36] <rindolf> done

[18:37] <rindolf> gotta love lexical scoping

[18:47] *** domidumont left
[18:58] *** darutoko left
[18:58] *** eliasr left
[19:20] *** zakharyas left
[19:58] *** zakharyas joined
[20:03] *** stux|RC-- left
[20:04] *** stux|RC joined
[20:11] *** lichtkind joined
[20:14] <Geth> ¦ doc: 113ab80574 | (Brad Gilbert)++ (committed using GitHub Web editor) | doc/Type/Iterator.pod6

[20:14] <Geth> ¦ doc: Add a useful .pull-one example

[20:14] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/113ab80574

[20:14] <synopsebot> Link: https://doc.perl6.org/type/Iterator

[20:16] *** xinming joined
[20:24] *** domidumont joined
[20:27] *** domidumont left
[20:40] <Geth> ¦ museum-items: 6cc64a3a35 | raiph++ (committed using GitHub Web editor) | 2000/07~mailing-lists.md

[20:40] <Geth> ¦ museum-items: Create 07~mailing-lists.md

[20:40] <Geth> ¦ museum-items: review: https://github.com/perl6/museum-items/commit/6cc64a3a35

[20:41] *** zakharyas left
[21:17] *** Kaiepi left
[21:17] *** Kaiepi joined
[21:23] <Geth> ¦ museum-items: 4e009f364d | raiph++ (committed using GitHub Web editor) | 2000/08~RFCs.md

[21:23] <Geth> ¦ museum-items: Create 08~RFCs.md

[21:23] <Geth> ¦ museum-items: review: https://github.com/perl6/museum-items/commit/4e009f364d

[21:34] <Geth> ¦ museum-items: 29cbe15bb9 | raiph++ (committed using GitHub Web editor) | 2000/07-25-MJD's Report.md

[21:34] <Geth> ¦ museum-items: Create 07-25-MJD's Report.md

[21:34] <Geth> ¦ museum-items: review: https://github.com/perl6/museum-items/commit/29cbe15bb9

[21:48] <buggable> New CPAN upload: Ops-SI-0.1.1.tar.gz by TYIL http://modules.perl6.org/dist/Ops::SI:cpan:TYIL

[21:49] <Geth> ¦ museum-items: 652dc3d647 | raiph++ (committed using GitHub Web editor) | 2000/08-18-"Final release will be ... January 2002".md

[21:49] <Geth> ¦ museum-items: Create 08-18-"Final release will be ... January 2002".md

[21:49] <Geth> ¦ museum-items: review: https://github.com/perl6/museum-items/commit/652dc3d647

[21:50] <Geth> ¦ museum-items: 7d97a188c2 | raiph++ (committed using GitHub Web editor) | 2 files

[21:50] <Geth> ¦ museum-items: Rename 08-18-"Final release will be ... January 2002".md to 08-18-"Final release ... 2002".md

[21:50] <Geth> ¦ museum-items: review: https://github.com/perl6/museum-items/commit/7d97a188c2

[21:54] <Geth> ¦ museum-items: 3a66a53c31 | raiph++ (committed using GitHub Web editor) | 2 files

[21:54] <Geth> ¦ museum-items: Rename April Fool's Parrot.md to 04-01-April Fool's Parrot.md

[21:54] <Geth> ¦ museum-items: review: https://github.com/perl6/museum-items/commit/3a66a53c31

[21:55] *** gfldex joined
[21:57] <Geth> ¦ museum-items: 1dc478a915 | raiph++ (committed using GitHub Web editor) | 2 files

[21:57] <Geth> ¦ museum-items: Rename The Real Parrot.md to 9-10-Real Parrot.md

[21:57] <Geth> ¦ museum-items: review: https://github.com/perl6/museum-items/commit/1dc478a915

[21:57] *** lizmat joined
[21:57] <Geth> ¦ museum-items: abd1b14b5b | raiph++ (committed using GitHub Web editor) | 2 files

[21:57] <Geth> ¦ museum-items: Rename 9-10-Real Parrot.md to 09-10-Real Parrot.md

[21:57] <Geth> ¦ museum-items: review: https://github.com/perl6/museum-items/commit/abd1b14b5b

[22:04] <Geth> ¦ museum-items: d65398e68b | raiph++ (committed using GitHub Web editor) | 2 files

[22:04] <Geth> ¦ museum-items: Rename -Ofun.md to 10-10-Ofun.md

[22:04] <Geth> ¦ museum-items: review: https://github.com/perl6/museum-items/commit/d65398e68b

[22:08] <buggable> New CPAN upload: Distribution-Builder-MakeFromJSON-0.3.tar.gz by NINE http://modules.perl6.org/dist/Distribution::Builder::MakeFromJSON:cpan:NINE

[22:08] <Geth> ¦ museum-items: e57f2c7fa6 | raiph++ (committed using GitHub Web editor) | 2 files

[22:08] <Geth> ¦ museum-items: Rename public logging of Perl 6 irc channels begins.md to 02-26-#perl6 logs.md

[22:08] <Geth> ¦ museum-items: review: https://github.com/perl6/museum-items/commit/e57f2c7fa6

[22:14] <Geth> ¦ museum-items: 7655f73fac | raiph++ (committed using GitHub Web editor) | 2 files

[22:14] <Geth> ¦ museum-items: Update and rename pugs.md to 02-01-Audrey+PUGS.md

[22:14] <Geth> ¦ museum-items: review: https://github.com/perl6/museum-items/commit/7655f73fac

[22:25] *** Keyn joined
[22:40] *** lookatme left
[22:41] *** rindolf left
[22:44] *** lookatme joined
[22:53] *** wamba left
[22:54] *** Keyn left
[22:54] *** avrono joined
[22:55] <avrono> Trying to build from source on ubuntu 17.10 .... getting ===SORRY!=== No suitable MoarVM (moar executable) found using the --prefix (You can get a MoarVM built automatically with --gen-moar.)  Command failed (status 512): /usr/bin/perl Configure.pl --prefix=/opt/rakudo-star-2018.01 --backends=moar --make-install

[22:56] <avrono> any ideas , help appreciated ... 

[22:58] <Kaiepi> where's the install/bin dir in /opt/rakudo-star?

[22:59] <Kaiepi> and what command are you running to install?

[23:00] <avrono> failed on perl Configure.pl --gen-moar --prefix /opt/rakudo-star-2018.01

[23:01] <avrono> as written on https://perl6.org/downloads/

[23:01] <avrono> installing from source

[23:02] <avrono> I could just try the Ubuntu .deb I guess

[23:10] <timotimo> avrono: please be advised that our build system is funky, and you'll require root privileges to use --gen-moar

[23:11] <timotimo> instead of that, however, you can cd into the moarvm folder, Configure.pl with the right --prefix, then make, sudo make install

[23:11] <timotimo> do the same in the nqp folder

[23:11] <timotimo> and finally do the Configure.pl in rakudo's folder without --gen-moar

[23:12] <avrono> Many thanks ... btw ... many years Perl 5 programmer - best way to get started on Perl 6 ?

[23:14] <AlexDaniel> avrono: we have a bunch of Perl5 to Perl 6 guides here: https://docs.perl6.org/language.html

[23:14] <avrono> Many thanks again ... look forward to checking it out !

[23:14] <AlexDaniel> avrono: also if I were you I'd probably start with this first: https://learnxinyminutes.com/docs/perl6/

[23:15] <AlexDaniel> it's a relatively short document and many things you'll know already

[23:15] <avrono> Great minds reading the code now

[23:15] *** mryan_ joined
[23:15] *** mryan left
[23:15] *** mryan_ is now known as mryan

[23:16] <avrono> My fear is 20 years of Perl 5 - old habits

[23:16] <AlexDaniel> avrono: there are some built in error messages designed for these habits :)

[23:16] <AlexDaniel> m: say ‘foo’ . ‘bar’

[23:17] <camelia> rakudo-moar a138dcf50: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of . to concatenate strings; in Perl 6 please use ~␤at <tmp>:1␤------> 3say ‘foo’ .7⏏5 ‘bar’␤»

[23:17] <Kaiepi> i never used perl 5, but i used nodejs for years

[23:17] <Kaiepi> not something i want to touch again

[23:18] <Kaiepi> i'll need to learn perl 5 eventually, but i don't think it'll be something i write very often

[23:21] <AlexDaniel> Kaiepi: oh, you used nodejs for years! Great

[23:21] <AlexDaniel> Kaiepi: what about a Perl 6 from Javascript guide?

[23:21] <AlexDaniel> Kaiepi: to go here as well: https://docs.perl6.org/language.html

[23:22] <AlexDaniel> we have Haskell, Python, Ruby and Perl5 there

[23:22] <AlexDaniel> Kaiepi: but something is missing *wink* *wink* *wink*

[23:23] <Kaiepi> it's pretty different, but in a good way

[23:23] <Kaiepi> type system, lexical/function scoping, the complex event loop don't get in the way of writing

[23:24] <Kaiepi> i could write a nodejs to perl 6 page, but i wanna wait until i know the language better

[23:25] <AlexDaniel> by that time it will be too late! :)

[23:25] *** espadrine_ left
[23:25] <Kaiepi> lol

[23:26] <Kaiepi> i'll check out the other articles and look into writing it

[23:26] <AlexDaniel> thanks

[23:29] <avrono> Not a javascript fan myself , but have used Nodejs since it came out

[23:30] <avrono> I find es6,7,8 unreadable ... async this and that ... 

[23:30] <timotimo> perl6 has await without async …

[23:32] <avrono> whats the current uptake like of Perl6 ... getting any traction ... ?

[23:32] <avrono> I'm a CTO looking into it for new project

[23:32] <Kaiepi> es6 was nowhere near as bad as es5

[23:33] <avrono> that's true ... 

[23:33] <Kaiepi> (function Foo() { this.bar = 1; } return Foo; )()

[23:33] <Kaiepi> intuitive constructors

[23:34] <Kaiepi> async/await are good in theory but they still end up leaving you stuck with promise spaghetti in regular functions

[23:35] <Kaiepi> it's starting to get some traction i think

[23:36] <avrono> It's horrid, I've inherited code written in ES6 - written in a functional way ... almost unreadable

[23:36] <avrono> then Flow type thrown in

[23:37] <avrono> pointless ... wrong language / style mix

[23:37] <Kaiepi> wdym in a functional way

[23:37] <Kaiepi> like full haskell or

[23:37] <avrono> yeah - attempted

[23:37] *** robertle_ left
[23:37] <Kaiepi> jesus

[23:37] <avrono> a mess

[23:38] <avrono> but oddly works somethow

[23:39] <Kaiepi> must be a nightmare to debug

[23:40] <avrono> BTW what IDE do you use for Perl6 ? Atom ?

[23:41] <Kaiepi> vim

[23:41] <Kaiepi> used visual studio code briefly, didn't like it much

[23:42] <avrono> ok, vim works for me too

[23:43] <avrono> thanks for the help - going to crack on and pick some Perl6 up ... looks very comprehensive

[23:45] <Kaiepi> i found parts of it a bit tricky at first, but the really easy parts made up for it well

[23:46] <Kaiepi> mainly the module system, how it does oop, and promises

[23:48] <Kaiepi> their flexibility won me over once i understood it better

[23:51] <avrono> I'll check it out ... looks like there are may ways to code with it

[23:51] <avrono> I do like languages like Golang for simplicity and neatness

[23:51] <avrono> But Perl Regex has always been great

[23:52] *** Zoffix joined
[23:52] <avrono> I need to write a web crawler ... and I hate Python

[23:52] <Zoffix> timotimo: how come that's necessary? "and you'll require root privileges to use --gen-moar"

[23:52] <avrono> so either Perl 5 or Perl 6 :-)

[23:52] <Zoffix> I think I've built over 10,000 rakudos by now and never once needed root ever....

[23:52] <avrono> yeah I just sudo'd it and works fine

[23:52] <Kaiepi> p6: sub trait_mod:<is>(Routine $r, :$cool!) { $r.wrap({ "{callsame} is cool!" }); }; class Language { has Str $.name; method gist(--> Str) is cool { $!name } }; say Language.new(:a('Perl6'))

[23:52] <camelia> rakudo-moar a138dcf50: OUTPUT: «Use of uninitialized value of type Str in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤ is cool!␤  in block  at <tmp> line 1␤»

[23:52] <Kaiepi> shit

[23:53] <Zoffix> p6: sub trait_mod:<is>(Routine $r, :$cool!) { $r.wrap({ "{callsame} is cool!" }); }; class Language { has Str $.name; method gist(--> Str) is cool { $!name } }; say Language.new(:perl6('Perl6'))

[23:53] <camelia> rakudo-moar a138dcf50: OUTPUT: «Use of uninitialized value of type Str in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤ is cool!␤  in block  at <tmp> line 1␤»

[23:53] <Zoffix> p6: sub trait_mod:<is>(Routine $r, :$cool!) { $r.wrap({ "{callsame} is cool!" }); }; class Language { has Str $.name; method gist(--> Str) is cool { $!name } }; say Language.new(:name('Perl6'))

[23:53] <camelia> rakudo-moar a138dcf50: OUTPUT: «Perl6 is cool!␤»

[23:53] <Kaiepi> there we go

[23:54] <Zoffix> huggable: atom ide

[23:54] <huggable> Zoffix, https://github.com/perl6/Atom-as-a-Perl6-IDE  also see Perl-6-tailored CommaIDE: http://commaide.com/

[23:54] <Zoffix> avrono: ^ there are some plugins for Atom. And CommaIDE alpha or beta will be out in May

[23:55] <Kaiepi> vim has some plugins too

[23:57] <Zoffix> avrono: FWIW, these instructions don't need any root, AFAIK: https://rakudo.org/files/star/source  there are also some pre-built packages: https://rakudo.org/files/star/third-party

[23:57] <Kaiepi> i don't use root

[23:57] <Kaiepi> ~/.perl6 is my install dir

[23:58] <tony-o> i think https://github.com/tony-o/perl6-web-scraper still works ..

[23:59] <tony-o> for scraping

