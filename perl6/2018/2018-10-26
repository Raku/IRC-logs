[00:00] *** lizmat joined
[00:00] *** p6bannerbot sets mode: +v lizmat

[00:06] *** cognominal-p6 left
[00:10] *** rindolf left
[00:14] *** leont left
[00:14] *** ryn1x joined
[00:15] *** p6bannerbot sets mode: +v ryn1x

[00:18] *** lizmat left
[00:19] *** ryn1x left
[00:20] *** ryn1x joined
[00:20] *** p6bannerbot sets mode: +v ryn1x

[00:21] *** w_richard_w joined
[00:22] *** p6bannerbot sets mode: +v w_richard_w

[00:30] *** kst joined
[00:30] *** cognominal-p6 joined
[00:30] *** p6bannerbot sets mode: +v kst

[00:31] *** cognominal-p6 left
[00:31] *** cognominal-p6 joined
[00:32] *** p6bannerbot sets mode: +v cognominal-p6

[00:48] *** ryn1x left
[00:51] *** jh001 left
[00:53] *** jh001 joined
[00:54] *** p6bannerbot sets mode: +v jh001

[00:56] *** MasterDuke joined
[00:56] *** p6bannerbot sets mode: +v MasterDuke

[00:56] *** MasterDuke left
[00:56] *** MasterDuke joined
[00:56] *** herbert.freenode.net sets mode: +v MasterDuke

[00:56] *** p6bannerbot sets mode: +v MasterDuke

[00:57] *** mantovani left
[00:57] *** Mithaldu left
[00:58] *** Mithaldu joined
[00:58] *** p6bannerbot sets mode: +v Mithaldu

[00:59] *** mantovani joined
[01:00] *** p6bannerbot sets mode: +v mantovani

[01:02] *** aindilis left
[01:03] *** oodani left
[01:03] *** aindilis joined
[01:03] *** oodani joined
[01:03] *** p6bannerbot sets mode: +v aindilis

[01:04] *** p6bannerbot sets mode: +v oodani

[01:04] *** fake_space_whale joined
[01:05] *** p6bannerbot sets mode: +v fake_space_whale

[01:07] *** Kaiepi left
[01:07] *** Kaiepi joined
[01:08] *** p6bannerbot sets mode: +v Kaiepi

[01:18] *** kerframil left
[01:33] *** Guest13389 left
[01:46] *** Guest13389 joined
[01:47] *** Ven` joined
[01:47] *** p6bannerbot sets mode: +v Guest13389

[01:47] *** p6bannerbot sets mode: +v Ven`

[01:50] *** donaldh left
[01:51] *** donaldh_ joined
[01:51] *** Ven` left
[01:51] *** p6bannerbot sets mode: +v donaldh_

[01:53] *** molaf left
[02:05] *** molaf joined
[02:06] *** p6bannerbot sets mode: +v molaf

[02:10] *** ufobat_ joined
[02:10] *** p6bannerbot sets mode: +v ufobat_

[02:13] *** ufobat left
[02:18] *** w_richard_w left
[02:40] <SmokeMachine> I was reading the post about exportable (http://www.0racle.info/articles/exportation_exploration) and was trying to implement that...

[02:40] <SmokeMachine> and I got an output that I can't understand...

[02:41] <SmokeMachine> my code is: https://gist.github.com/FCO/a61fbbcf0a498f80e04f95419b3325fb

[02:41] <SmokeMachine> m: https://gist.github.com/FCO/a61fbbcf0a498f80e04f95419b3325fb

[02:41] <camelia> rakudo-moar 1ea3ff2fb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix = instead.␤Did you make a mistake in Pod syntax?␤at <tmp>:1␤------> 3Hash[Routine] %funcs =7⏏5 (my Routine %)␤»

[02:42] <SmokeMachine> m: https://gist.github.com/FCO/a61fbbcf0a498f80e04f95419b3325fb

[02:42] <camelia> rakudo-moar 1ea3ff2fb: OUTPUT: «===SORRY!===␤Could not find Bla at line 2 in:␤    /home/camelia␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-1/share/perl6…»

[02:45] <geekosaur> doesn'tt hat type have to be something like Hash{Routine} instead of square brackets?

[02:48] <SmokeMachine> geekosaur: camelia was trying to compile the file with the output...

[02:50] <SmokeMachine> geekosaur: what I can't get is: the %funcs seems to be populated... why the `say "exported-EXPORT: @funcs[]; %funcs<>";` says it isn't?

[02:56] <geekosaur> looks to me like you are producing a reference to a sub that needs a 'my' variable. whose value doesn't exist any more because sub EXPORT has returned

[02:57] <geekosaur> pretty sure it can't close over %funcs just because you returned a reference to a sub object that uses it

[02:59] <geekosaur> probably need either "our", or some other way carry the scope with  exported-EXPORT. possibly use the assuming method to pass it in?

[03:04] <SmokeMachine> geekosaur: that makes sense...

[03:05] <SmokeMachine> geekosaur: thanks!

[03:07] <SmokeMachine> geekosaur: using assuming didn't help... but the error changed...

[03:07] <SmokeMachine> now it dies with:

[03:07] <SmokeMachine> https://www.irccloud.com/pastebin/PAMwEWAB/

[03:07] <SmokeMachine> there's no `$res` on my code

[03:08] <geekosaur> well, that sounds like it at least tried, but wasn't expecting what you did. I had been wondering how it would deal with that, tbh

[03:09] <geekosaur> might have to unroll it into the call since it again doesn't exist. ($res is probably from the hackery 'assuming' does)

[03:12] <geekosaur> yes, it is. and that hackery is …fragile

[03:13] <geekosaur> (it's sprintf-ing an anon sub and EVAL-ing it. ick)

[03:14] <geekosaur> so something went wrong generatingt he anon sub and its internal $res ended up out of scope

[03:15] <geekosaur> might be easier to return an anon sub yourself. 'EXPORT' => sub { exported-EXPORT(%funcs) } # ?

[03:18] <geekosaur> .oO { if you like sausages, politics, or rakudo, don't look at any of them being made }

[03:20] <SmokeMachine> :)

[03:33] <SmokeMachine> it's working!

[03:33] *** MasterDuke left
[03:41] *** sauvin joined
[03:41] *** p6bannerbot sets mode: +v sauvin

[03:55] <SmokeMachine> geekosaur: https://gist.github.com/FCO/18bbbbe640d7f8b83820fcb612ceec3d

[03:56] *** noganex left
[03:56] *** noganex_ joined
[03:57] *** p6bannerbot sets mode: +v noganex_

[03:59] <Xliff> m: use NativeCall; class A is repr('CStruct') { has uint32 $.a }; my Pointer[A] $pa = nativecast(Pointer[A], $a.new); say $pa;

[03:59] <camelia> rakudo-moar 1ea3ff2fb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared␤at <tmp>:1␤------> 3Pointer[A] $pa = nativecast(Pointer[A], 7⏏5$a.new); say $pa;␤»

[03:59] <Xliff> m: use NativeCall; class A is repr('CStruct') { has uint32 $.a }; my Pointer[A] $pa = nativecast(Pointer[A], A.new); say $pa;

[03:59] <camelia> rakudo-moar 1ea3ff2fb: OUTPUT: «NativeCall::Types::Pointer[A]<0x5471150>␤»

[04:00] *** Possum left
[04:00] <Xliff> m: use NativeCall; class A is repr('CStruct') { has uint32 $.a }; my Pointer[A] $pa = nativecast(Pointer[A], A.new(:a = 32); say $pa; $pa.deref.gist.say

[04:00] <camelia> rakudo-moar 1ea3ff2fb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable $pa in declaration to initialize itself␤at <tmp>:1␤------> 3vecast(Pointer[A], A.new(:a = 32); say $7⏏5pa; $pa.deref.gist.say␤    expecting any of:␤        argument lis…»

[04:00] <Xliff> m: use NativeCall; class A is repr('CStruct') { has uint32 $.a }; my Pointer[A] $pa = nativecast(Pointer[A], A.new(:a = 32)); say $pa; $pa.deref.gist.say

[04:00] <camelia> rakudo-moar 1ea3ff2fb: OUTPUT: «Cannot modify an immutable Pair (a => True)␤  in block <unit> at <tmp> line 1␤␤»

[04:00] <Xliff> m: use NativeCall; class A is repr('CStruct') { has uint32 $.a }; my Pointer[A] $pa = nativecast(Pointer[A], A.new(:!a = 32)); say $pa; $pa.deref.gist.say

[04:00] <camelia> rakudo-moar 1ea3ff2fb: OUTPUT: «Cannot modify an immutable Pair (a => False)␤  in block <unit> at <tmp> line 1␤␤»

[04:01] <Xliff> m: use NativeCall; class A is repr('CStruct') { has uint32 $.a = 32 }; my Pointer[A] $pa = nativecast(Pointer[A], A.new); say $pa; $pa.deref.gist.say

[04:01] <camelia> rakudo-moar 1ea3ff2fb: OUTPUT: «NativeCall::Types::Pointer[A]<0x3acae80>␤A.new(a => 32)␤»

[04:38] *** Ven` joined
[04:39] *** p6bannerbot sets mode: +v Ven`

[04:42] *** Ven` left
[04:45] *** Lili joined
[04:45] *** p6bannerbot sets mode: +v Lili

[04:47] *** Lili left
[04:52] *** curan joined
[04:52] *** p6bannerbot sets mode: +v curan

[04:57] *** ChoHag left
[05:02] *** xi- left
[05:02] *** m0ltar left
[05:07] *** m0ltar joined
[05:07] *** Elronnd joined
[05:07] *** xi- joined
[05:07] *** p6bannerbot sets mode: +v m0ltar

[05:08] *** p6bannerbot sets mode: +v Elronnd

[05:08] *** p6bannerbot sets mode: +v xi-

[05:23] *** jmerelo joined
[05:23] *** p6bannerbot sets mode: +v jmerelo

[05:40] *** Ven` joined
[05:41] *** p6bannerbot sets mode: +v Ven`

[05:45] *** Ven` left
[05:46] *** Xliff_ joined
[05:47] *** cbk_ joined
[05:47] *** p6bannerbot sets mode: +v Xliff_

[05:47] *** leedo left
[05:47] *** p6bannerbot sets mode: +v cbk_

[05:48] *** a3f_ joined
[05:49] *** diego_k joined
[05:49] *** p6bannerbot sets mode: +v a3f_

[05:49] *** sauvin_ joined
[05:49] *** p6bannerbot sets mode: +v sauvin_

[05:49] *** p6bannerbot sets mode: +v diego_k

[05:50] *** kentnl joined
[05:50] *** p6bannerbot sets mode: +v kentnl

[05:50] *** oftl_ joined
[05:50] *** syntaxma1 joined
[05:50] *** TimToady_ joined
[05:50] *** mingdao_ joined
[05:50] *** p6bannerbot sets mode: +v mingdao_

[05:50] *** [Coke]_ joined
[05:50] *** [Coke]_ left
[05:50] *** [Coke]_ joined
[05:50] *** p6bannerbot sets mode: +v [Coke]_

[05:51] *** p6bannerbot sets mode: +v oftl_

[05:51] *** p6bannerbot sets mode: +v syntaxma1

[05:51] *** chsanch_ joined
[05:51] *** p6bannerbot sets mode: +v TimToady_

[05:51] *** p6bannerbot sets mode: +v [Coke]_

[05:51] *** p6bannerbot sets mode: +v chsanch_

[05:54] *** kanbas- joined
[05:54] *** exodist_ joined
[05:54] *** Xliff_ left
[05:54] *** Summertime2 joined
[05:54] *** p6bannerbot sets mode: +v Summertime2

[05:55] *** p6bannerbot sets mode: +v kanbas-

[05:55] *** p6bannerbot sets mode: +v exodist_

[05:55] *** giraffe joined
[05:55] *** p6bannerbot sets mode: +v giraffe

[05:55] *** samcv_ joined
[05:55] *** p6bannerbot sets mode: +v samcv_

[05:55] *** sauvin left
[05:55] *** Xliff left
[05:55] *** phogg left
[05:55] *** Spooktober left
[05:55] *** kent\n left
[05:55] *** chsanch left
[05:55] *** mingdao left
[05:55] *** diegok left
[05:55] *** Summertime left
[05:55] *** Guest86558 left
[05:55] *** APic left
[05:55] *** emerson left
[05:55] *** Exodist left
[05:55] *** syntaxman left
[05:55] *** oftl left
[05:55] *** kanbas left
[05:55] *** cbk1090 left
[05:55] *** TimToady left
[05:55] *** camelia left
[05:55] *** SqrtNegInf left
[05:55] *** a3f left
[05:55] *** samcv left
[05:55] *** [Coke] left
[05:55] *** raydiak_ left
[05:55] *** exodist_ is now known as Exodist

[05:56] *** Spooktober joined
[05:56] *** p6bannerbot sets mode: +v Spooktober

[05:58] *** m0ltar left
[05:58] *** Mithaldu left
[06:00] *** m0ltar joined
[06:01] *** p6bannerbot sets mode: +v m0ltar

[06:02] *** Mithaldu joined
[06:02] *** marmay joined
[06:02] *** phogg joined
[06:02] *** p6bannerbot sets mode: +v phogg

[06:02] *** p6bannerbot sets mode: +v Mithaldu

[06:02] *** raydiak_ joined
[06:02] *** p6bannerbot sets mode: +v marmay

[06:03] *** APic joined
[06:03] *** p6bannerbot sets mode: +v raydiak_

[06:03] *** p6bannerbot sets mode: +v APic

[06:06] *** camelia joined
[06:06] *** samcv_ is now known as samcv

[06:06] *** p6bannerbot sets mode: +v camelia

[06:08] *** sauvin_ is now known as Sauvin

[06:13] *** troys left
[06:15] *** chsanch_ left
[06:16] *** chsanch joined
[06:17] *** p6bannerbot sets mode: +v chsanch

[06:26] *** random_yanek joined
[06:26] *** p6bannerbot sets mode: +v random_yanek

[06:28] *** fake_space_whale left
[06:30] *** TimToady_ is now known as TimToady

[06:30] *** TimToady left
[06:30] *** TimToady joined
[06:30] *** livingstone.freenode.net sets mode: +v TimToady

[06:30] *** p6bannerbot sets mode: +v TimToady

[06:33] *** ufobat_ is now known as ufobat

[06:39] *** jmerelo left
[06:43] *** domidumont joined
[06:44] *** p6bannerbot sets mode: +v domidumont

[06:47] *** domidumont left
[06:48] <xinming> Since <> is decont operation, What is [] then?

[06:48] <xinming> [] is still decont op?

[06:48] <xinming> What are the differences between <> and [] ?

[06:53] *** robertle joined
[06:53] *** p6bannerbot sets mode: +v robertle

[07:02] *** domidumont joined
[07:03] *** p6bannerbot sets mode: +v domidumont

[07:09] <moritz> <> is also a quoting construct, and magical in other ways

[07:09] <moritz> m: say <a b>.perl

[07:09] <camelia> rakudo-moar 1ea3ff2fb: OUTPUT: «("a", "b")␤»

[07:09] <moritz> m: say [a b].perl

[07:09] <camelia> rakudo-moar 1ea3ff2fb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    a used at line 1␤    b used at line 1␤␤»

[07:19] *** haukex joined
[07:20] *** p6bannerbot sets mode: +v haukex

[07:33] <xinming> moritz: So, when [] and <> both used in postfix.

[07:33] <xinming> they are the same, right?

[07:34] <xinming> What I mean is, I read https://perl6advent.wordpress.com/2017/12/02/    it says <> is decont operation.

[07:34] <xinming> and I found that  $list[]   can also do "decont" over list.

[07:35] *** rba joined
[07:35] *** p6bannerbot sets mode: +v rba

[07:36] <rba> Where can I find rakudo star windows binaries as zip file? I found only the msi.

[07:47] *** finanalyst joined
[07:48] *** p6bannerbot sets mode: +v finanalyst

[07:48] <chsanch> rba: https://github.com/rakudo/star/releases

[07:50] <moritz> xinming: ah, you mean empty <> and [] as "zen slice". Yes, should both be the same

[07:51] <rba> chsanch: so, the message is, to build it myself?

[07:53] <moritz> rba: I think so, yes :(

[07:53] <moritz> rba: I'm curious, what's your use case of zip over MSI?

[07:54] <chsanch> rba: probably is the best option, not sure why you can't use MSI 

[07:54] <rba> moritz: Sitting in front of enterprise windows, where I'm not allowed to install msi myself.

[07:54] <rba> moritz: So I will install the msi on my private machine and then smuggle the binaries on that system, I guess...

[07:56] <chsanch> rba: https://www.codetwo.com/kb/msi-from-exe/ maybe with 7-Zip (I don't use windows, so not sure if that could work)

[07:58] <finanalyst> good time-of-day. Having a problem with CompUnit::Repository. The repository is providing an old handle even when :since is set. I think this is a bug, but I wanted to check. Pastebin of code and result https://pastebin.com/wtA9a0nP 

[08:00] <moritz> rba: but can you install files to C:\rakudo in your enterprise windows?

[08:00] <rba> chsanch: Tried to unzip it using 7-zip already, yet all the files have filenames like "fil<hex-uniq-id>".

[08:00] <El_Che> moritz: colleagues using Windows use lots of portable apps (because their installations are restricted to sillyness).

[08:00] <moritz> rakudo is not relocatable :(

[08:00] <El_Che> but the not relocatable thing makes this argument moot

[08:01] * El_Che is a Linux rebel at work, with an illegal OS on his laptop :)

[08:02] <rba> moritz: so then I'm lost anyway. I have no rights to write to c:\ 

[08:03] <El_Che> it sounds like we work on the same place or we have the same crappy desktop admins :)

[08:03] <El_Che> rba: you'll need to compile to a directory where you have rw access to

[08:03] <El_Che> typically, something stupid like Document or MyApps

[08:07] *** donaldh_ left
[08:07] *** donaldh joined
[08:08] *** p6bannerbot sets mode: +v donaldh

[08:09] *** lizmat joined
[08:09] *** p6bannerbot sets mode: +v lizmat

[08:10] <rba> El_Che: got it. will first try to find out, from which location I'm allowed to run binaries. Then I will try to build it on my personal notebook and try to relocate the binaries to the companies machine.

[08:10] <El_Che> yes, in the same location

[08:19] *** Spooktober left
[08:20] *** donaldh left
[08:20] *** donaldh_ joined
[08:21] *** p6bannerbot sets mode: +v donaldh_

[08:22] *** Spooktober joined
[08:22] *** p6bannerbot sets mode: +v Spooktober

[08:23] *** vike1 left
[08:24] *** vike joined
[08:25] *** p6bannerbot sets mode: +v vike

[08:32] *** rba_ joined
[08:33] *** p6bannerbot sets mode: +v rba_

[08:34] *** zakharyas joined
[08:34] *** rindolf joined
[08:35] *** rba left
[08:35] *** p6bannerbot sets mode: +v zakharyas

[08:35] *** p6bannerbot sets mode: +v rindolf

[08:35] *** robertle left
[08:37] *** robertle joined
[08:38] *** p6bannerbot sets mode: +v robertle

[08:38] *** noganex joined
[08:39] *** p6bannerbot sets mode: +v noganex

[08:42] *** noganex_ left
[08:54] *** robertle left
[08:56] *** robertle joined
[08:57] *** p6bannerbot sets mode: +v robertle

[09:03] *** sena_kun joined
[09:04] *** p6bannerbot sets mode: +v sena_kun

[09:07] *** pmurias joined
[09:07] *** p6bannerbot sets mode: +v pmurias

[09:28] *** haukex left
[09:30] *** haukex joined
[09:31] *** p6bannerbot sets mode: +v haukex

[09:31] *** pecastro joined
[09:32] *** p6bannerbot sets mode: +v pecastro

[09:39] *** cognominal-p6 left
[09:43] <donaldh_> code golf, building mountains: https://codegolf.stackexchange.com/a/174735/66624

[09:56] *** kst left
[10:14] *** finanalyst left
[10:18] <xinming> moritz: Thanks for the clarification.

[10:19] *** cognominal-p6 joined
[10:20] *** p6bannerbot sets mode: +v cognominal-p6

[10:22] *** cognominal-p6 left
[10:22] *** cognominal-p6 joined
[10:23] *** p6bannerbot sets mode: +v cognominal-p6

[10:31] *** Zoffix joined
[10:31] *** p6bannerbot sets mode: +v Zoffix

[10:34] *** kensanata joined
[10:34] *** p6bannerbot sets mode: +v kensanata

[10:34] <Zoffix> xinming: that article lists <> as decont, simply 'cause it's easy to remember (it looks like a squished box) and unlike `[]` zen slice that's often used to interpolate `@-` vars in strings, the `<>` is seldom used. The reason `<>` or `[]` work as decont is they simply return `self`, so even a `.self` method call will decont.

[10:36] <Zoffix> xinming: also, they're currently not the same. `[]` caches the Seq, while `<>` doesn't. The `[]` was made to cache very recently, and now I'm questioning whether it was right...

[10:36] *** AlexDaniel left
[10:36] * Zoffix will open an Issue, but will default to reverting the caching of `[]`

[10:37] *** leont joined
[10:37] *** p6bannerbot sets mode: +v leont

[10:38] * Zoffix decides to just revert it

[10:38] <Zoffix> (it's 7-days old only)

[10:40] <Zoffix> xinming: oh, and the whole "self" thing works because `self` inside methods is automatically deconted (unless it's a Proxy)

[10:49] <Zoffix> m: sub postfix:<🥡> { $^a<> }; my $s = (1, 2, 3); .say for $s🥡

[10:49] <camelia> rakudo-moar 1ea3ff2fb: OUTPUT: «1␤2␤3␤»

[10:57] <Geth> ¦ doc: d2e99cc0e3 | (Zoffix Znet)++ | doc/Language/subscripts.pod6

[10:57] <Geth> ¦ doc: Fix up ZEN slicing on Seqs

[10:57] <Geth> ¦ doc: 

[10:57] <Geth> ¦ doc: The caching behaviour (R#2383[^1]) was reverted[^2][^3] and

[10:57] <Geth> ¦ doc: non-caching behaviour propspeced[^4]

[10:57] <synopsebot> Link: https://doc.perl6.org/language/subscripts

[10:57] <Geth> ¦ doc: 

[10:57] <synopsebot> R#2383 [closed]: https://github.com/rakudo/rakudo/issues/2383 [consistency][testneeded] .[] doesn't cache a Seq

[10:57] <Geth> ¦ doc: [1] https://github.com/rakudo/rakudo/issues/2383

[10:57] <Geth> ¦ doc: [2] https://github.com/rakudo/rakudo/commit/2efffc2b43

[10:57] <Geth> ¦ doc: [3] https://github.com/perl6/roast/commit/5485affa47

[10:57] <Geth> ¦ doc: [4] https://github.com/perl6/roast/commit/f5f9ce0083

[10:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d2e99cc0e3

[11:04] <Zoffix> .tell AlexDaniel` I merged my post-release branches 'cause I recall you saying we could do whatever on master now, but perhaps you'd like to cherry-pick https://github.com/rakudo/rakudo/commit/2efffc2b43 because original commit ain't on any release. Also, it's possible the original commit introed a memory leak bug in some code that uses `[]` to decont a large Seq

[11:04] <yoleaux> Zoffix: I'll pass your message to AlexDaniel`.

[11:05] <Zoffix> Merci, roboto!

[11:09] *** zakharyas left
[11:13] *** Zoffix left
[11:28] *** rba_ left
[11:37] *** AlexDaniel joined
[11:37] *** p6bannerbot sets mode: +v AlexDaniel

[11:41] <AlexDaniel`> .

[11:41] <yoleaux> 11:04Z <Zoffix> AlexDaniel`: I merged my post-release branches 'cause I recall you saying we could do whatever on master now, but perhaps you'd like to cherry-pick https://github.com/rakudo/rakudo/commit/2efffc2b43 because original commit ain't on any release. Also, it's possible the original commit introed a memory leak bug in some code that uses `[]` to decont a large Seq

[11:46] <El_Che> releasable6: status

[11:46] <releasable6> El_Che, Next release will happen when it's ready. 1 blocker. 492 out of 514 commits logged

[11:46] <releasable6> El_Che, Details: https://gist.github.com/2cdc187e62ef613b85621f60c5ede495

[12:02] *** atroxaper joined
[12:03] *** p6bannerbot sets mode: +v atroxaper

[12:05] *** molaf left
[12:07] <atroxaper> Hello, #perl6 !

[12:09] <kensanata> yo

[12:09] <atroxaper> It's me again :) Yesterday I asked about wrap and signatures (https://stackoverflow.com/questions/52989863/wrong-signature-accepts-after-wrap-sub). Today I have try to find a workaround and found that it is not because wrap but because CALL-ME method; 

[12:09] <atroxaper> sub s(:$arg) {}; say %(:arg(3)) ~~ &s.signature; say &s.^find_method('CALL-ME'); &s does role r { submethod CALL-ME(|) {} }; say %(:arg(3)) ~~ &s.signature; say &s.^find_method('CALL-ME');

[12:09] <evalable6> atroxaper, rakudo-moar 2efffc2b4: OUTPUT: «True␤(Mu)␤False␤CALL-ME␤»

[12:12] <atroxaper> I tried to find CALL-ME method in the compiler code. As I understand the method is 'not real' for most classes. Maybe I'm wrong :)

[12:12] <atroxaper> kensanata: hi ^^

[12:13] *** ryn1x joined
[12:14] *** p6bannerbot sets mode: +v ryn1x

[12:14] *** cognominal-p6 left
[12:15] *** emerson joined
[12:15] *** p6bannerbot sets mode: +v emerson

[12:20] <masak> for the curious: https://www.youtube.com/watch?v=Nv8_hrS5ARY was released today, of a local talk I gave about 007 (51 min)

[12:24] <jkramer> Are there any good modules for parsing html? https://modules.perl6.org/search/?q=html looks a bit sad :(

[12:25] <jkramer> I don't want to do crazy stuff, basically just find a single specific node and get its value

[12:26] <masak> maybe use a Perl 5 module from CPAN?

[12:26] *** pmurias left
[12:26] <jkramer> I wanted to avoid that :)

[12:26] <jkramer> But I guess it's the best bet

[12:26] <masak> pretty sure it is

[12:27] *** pmurias joined
[12:27] *** p6bannerbot sets mode: +v pmurias

[12:27] <masak> I mean, I see the idealistic aspect of wanting to avoid it, but it's probably pragmatic to embrace it ;)

[12:27] <masak> as TimToady would say, it was never about the "or", and always about the "and"

[12:27] * masak .oO( technically "xor"... )

[12:28] *** cognominal-p6 joined
[12:28] <atroxaper> jkramer: I have used https://modules.perl6.org/search/?q=xml+author%3ATimothy+Totten

[12:29] *** p6bannerbot sets mode: +v cognominal-p6

[12:30] *** mingdao_ is now known as mingdao

[12:31] <jkramer> masak: The problem is I want to ship the code to people who might not be familiar with of the perls and even I am running into problems here :) http://dpaste.com/0PY385B

[12:31] *** Zoffix joined
[12:31] *** p6bannerbot sets mode: +v Zoffix

[12:31] <Zoffix> eco: DOM::Tiny

[12:31] <jkramer> *either of the perls

[12:31] <buggable> Zoffix, DOM::Tiny 'Very small, self-sufficient DOM parser manipulator': http://modules.perl6.org/dist/DOM::Tiny:cpan:HANENKAMP

[12:31] <Zoffix> jkramer: use that ^

[12:32] <jkramer> Zoffix: Sweet, exactly what I was looking for :)

[12:32] <masak> well, people seem to be suggesting p6 modules for you :)

[12:32] <jkramer> So I don't need to use Mojo::DOM via Inline::Perl5 \o/

[12:32] <masak> but I also think we have a big job in general of making p5<->p6 integration not just OK, but sometimes encouraged

[12:32] <Zoffix> jkramer: FWIW, it has a huge test suite. May wish to --/test install it

[12:33] <Zoffix> (takes ages to run)

[12:33] <masak> I haven't been around frequently enough to know whether nine++ is still fighting for the good cause, but... I happen to think it's a good idea

[12:33] <jkramer> Thanks for the warning Zoffix :)

[12:34] <lizmat> masak++  # nice presentation

[12:34] <masak> <3

[12:34] <lizmat> also:  99 ... 0 also works nicely (and optimally :-)

[12:35] <masak> that's not Perl 6, though :P

[12:35] <Zoffix> m: .say for 99 ... 0

[12:35] <camelia> rakudo-moar e0633a0de: OUTPUT: «99␤98␤97␤96␤95␤94␤93␤92␤91␤90␤89␤88␤87␤86␤85␤84␤83␤82␤81␤80␤79␤78␤77␤76␤75␤74␤73␤72␤71␤70␤69␤68␤67␤66␤65␤64␤63␤62␤61␤60␤59␤58␤57␤56␤55␤54␤53␤52␤51␤50␤4…»

[12:35] * masak .oO( you think that's air you're breathing? ) :P

[12:36] <lizmat> masak: ah, yes, duh  :-)

[12:36] <masak> lizmat: https://github.com/masak/007/blob/f2b68ee5873622172dad1b2b0970a9ac4627f81b/examples/99-bottles.007

[12:36] <jkramer> Cannot import symbol &to-json from DOM::Tiny, because it already exists in this lexical scope

[12:36] <Zoffix> ah crap

[12:36] <jkramer> Hmpf, the docs don't mention a &to-json in that module. How do I avoid that?

[12:36] <Zoffix> jkramer: yeah, it's already filed as https://github.com/zostay/p6-DOM-Tiny/issues/12

[12:37] <Zoffix> jkramer: IIRC I just stuck DOM::Tiny into a separate file and exported just the DOM::Tiny class from it

[12:37] <jkramer> Can I prevent it from being exported in the 'use' line?

[12:37] <jnthn> Try `need` instead of `use`

[12:38] *** ryn1x left
[12:39] <Zoffix> Yeah, `need` works; jnthn++

[12:39] <jkramer> Yup, that works :)

[12:39] <jkramer> Is need just use without the exports? Never seen that before

[12:39] *** zakharyas joined
[12:39] <Zoffix> Yeah, `use` is `need` + `import`

[12:40] <atroxaper> I add an issue https://github.com/rakudo/rakudo/issues/2430. Please have a look.

[12:40] <jkramer> It's missing in my vim p6 syntax file too :)

[12:40] *** p6bannerbot sets mode: +v zakharyas

[12:42] *** Zoffix left
[12:43] <pmurias> masak: have you seen the java pattern for doing code-generation where you put annotations on a class and a preprocessor (which you write in java) takes those annotations (it also can read the signatures of method etc. of that class) and generates a class that inherits from it

[12:43] <masak> pmurias: I had not.

[12:46] <pmurias> the oracle people tend to use it in their truffle languages (so I have borrowed it for the nqp truffle backend)

[12:47] <masak> ah, I see

[12:47] <masak> in 007 I'd be more tempted to, you know, *transforming code* on the AST level ;)

[12:48] <masak> for example, I think class declarations themselves (with or without annotations) will end up desugaring to MOP calls

[12:48] *** kerframil joined
[12:48] *** p6bannerbot sets mode: +v kerframil

[12:49] *** SqrtNegI_ joined
[12:49] *** nige_ left
[12:49] *** haukex left
[12:49] *** nige_ joined
[12:50] *** p6bannerbot sets mode: +v SqrtNegI_

[12:50] *** p6bannerbot sets mode: +v nige_

[12:51] <pmurias> masak: some of the details of the java scheme like generating code as *strings* are a bit primitive but it's interesting what can be accomplished by little means

[12:53] <pmurias> masak: it's also interesting how they implement regular DSLs in string annotations

[12:54] <pmurias> @Specialization(guards = "b == 2") void doDivPowerTwo(int a, int b) { return a >> 1; }

[12:55] *** cognominal-p6 left
[12:55] *** cognominal-p6 joined
[12:56] *** p6bannerbot sets mode: +v cognominal-p6

[13:00] *** Bucciarati left
[13:00] *** cognominal-p6 left
[13:01] *** leedo joined
[13:01] *** avar left
[13:02] *** Bucciarati joined
[13:02] *** avar joined
[13:02] *** avar left
[13:02] *** avar joined
[13:02] *** p6bannerbot sets mode: +v avar

[13:02] *** p6bannerbot sets mode: +v leedo

[13:02] *** p6bannerbot sets mode: +v Bucciarati

[13:02] *** p6bannerbot sets mode: +v avar

[13:03] <pmurias> what's a SUPER equivalent in Perl 6?

[13:03] <pmurias> $self->SUPER::method_from_parent

[13:04] <jkramer> zostay: Should this already work in DOM::Tiny? $d.at('html > meta > link[ref=canonical]')

[13:04] <jkramer> Seems like the attribute matching isn't working, also tried with "canonical".

[13:05] *** molaf joined
[13:05] <jkramer> This works just fine, so the tag is definitely there: $d.find('html > head > link').first(*.attr<rel> eq 'canonical').attr<href>

[13:05] *** p6bannerbot sets mode: +v molaf

[13:06] <masak> pmurias: you can probably do that exact things by walking up .^mro

[13:07] <masak> pmurias: but a more idiomatic use would maybe be something like nextsame()

[13:07] <masak> depends if you really want to call another method, or the same one

[13:12] <timotimo> you can self.ClassName::methodname()

[13:13] <masak> oh, even for class names?

[13:13] <timotimo> as strings?

[13:13] <timotimo> i haven't tried, actually

[13:13] <masak> m: class C { method foo { say "C" } }; class D is C { method foo { say "D"; self.C::foo() } }; D.new.foo

[13:13] <camelia> rakudo-moar e0633a0de: OUTPUT: «D␤C␤»

[13:13] <masak> looks like

[13:13] <masak> I knew it worked for roles, but not for classes

[13:15] <timotimo> m: class Parent { method dothething() { say "parent does the thing" } }; class Child is Parent { method dothething() { say "child does the thing" }; method parentdo($classname) { self."$classname::dothething"() } }; Child.new.parentdo("Parent")

[13:15] <camelia> rakudo-moar e0633a0de: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in method parentdo at <tmp> line 1␤No such method '' for invocant of type 'Child'. Did you mea…»

[13:15] <timotimo> m: class Parent { method dothething() { say "parent does the thing" } }; class Child is Parent { method dothething() { say "child does the thing" }; method parentdo($classname) { self."{$classname}::dothething"() } }; Child.new.parentdo("Parent")

[13:15] <camelia> rakudo-moar e0633a0de: OUTPUT: «No such method 'Parent::dothething' for invocant of type 'Child'␤  in method parentdo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[13:16] <timotimo> not like that in any case

[13:17] *** kensanata left
[13:18] <jkramer> zostay: Nevermind, I'm stupid and had a typo in the attr name :)

[13:18] <timotimo> to be fair, you can use the right .dispatch method surely

[13:28] <timotimo> masak: i'm watching your talk and i'm wondering, how hard would it be to port over NativeCall and CArray and friends? :)

[13:28] <masak> timotimo: heh

[13:28] <masak> timotimo: I have no idea ;)

[13:29] <timotimo> have you done any performance comparisons between p6, nqp, and 007?

[13:29] <timotimo> surely it's a bit better than nqp when it comes to math, because nqp still goes between int and num and back all the time

[13:29] <masak> the short answer is "007 is ridiculously slow"

[13:30] <masak> to be clear, the current 007 *interprets the AST*

[13:30] <timotimo> oh no

[13:30] <timotimo> oh, i hadn't realized that

[13:30] <masak> and speed hasn't been a priority at all

[13:30] <timotimo> that's sensible

[13:30] <masak> because the goal is to explore macros

[13:32] <masak> what I personally look forward to is to land infix:<ff> (in the short term) and `is parsed` (in the longer term)

[13:32] <buggable> New CPAN upload: JSON-Path-1.2.tar.gz by JNTHN http://modules.perl6.org/dist/JSON::Path:cpan:JNTHN

[13:37] *** mscha joined
[13:37] *** p6bannerbot sets mode: +v mscha

[13:37] <mscha> m: my @foo = rand xx 10; for 0,3...@foo -> $i { say $i }

[13:37] <camelia> rakudo-moar e0633a0de: OUTPUT: «0␤0.8844963464615883␤0.9309241180001215␤0.14702861888670316␤0.7359944433368208␤0.6476432723661951␤0.7295569500991561␤0.12712475380280652␤0.25546723986094133␤0.945500368233164␤»

[13:37] <mscha> What am I doing wrong?

[13:37] <mscha> I expected: 0,3,6,9

[13:38] <mscha> m: my @foo = rand xx 10; for 0,3...@foo.elems -> $i { say $i }

[13:38] <camelia> rakudo-moar e0633a0de: OUTPUT: «0␤3␤6␤9␤»

[13:38] <timotimo> the end point gets smart-matched against

[13:40] <timotimo> i've reached the point in the presentation where you explain interpreterness and such

[13:48] *** curan left
[13:49] *** HaraldJoerg joined
[13:50] *** p6bannerbot sets mode: +v HaraldJoerg

[14:07] *** cognominal-p6 joined
[14:07] *** cognominal-p6 left
[14:07] *** cognominal-p6 joined
[14:08] *** p6bannerbot sets mode: +v cognominal-p6

[14:08] *** p6bannerbot sets mode: +v cognominal-p6

[14:30] <pmurias> masak: is it planned for 007 to explore bigger (more usefull) forms of language extension then macros?

[14:31] *** cognominal-p6 left
[14:32] <jkramer> m: Hash.new(:lol('asd')).say

[14:32] <camelia> rakudo-moar e0633a0de: OUTPUT: «{}␤»

[14:32] <jkramer> What's happening here?

[14:33] <moritz> m: say Hash.new('lol', 'asd')

[14:33] <camelia> rakudo-moar e0633a0de: OUTPUT: «{lol => asd}␤»

[14:33] <moritz> jkramer: Hash.new has a different API than you expect, that's what happens

[14:33] <jkramer> Shouldn't it accept pairs too? According to the docs it should

[14:33] <moritz> m: say {:lol('asd')}

[14:33] <camelia> rakudo-moar e0633a0de: OUTPUT: «{lol => asd}␤»

[14:33] <jkramer> m: Hash.new((:lol('asd'))).say

[14:33] <camelia> rakudo-moar e0633a0de: OUTPUT: «{lol => asd}␤»

[14:33] <moritz> jkramer: what does the tests say?

[14:34] <jkramer> Ah it needs extra parens for some reason

[14:34] <moritz> now you're passing the pair as a positional param

[14:34] <jkramer> Oh that's it, thanks :)

[14:34] *** xinming left
[14:39] *** noganex left
[14:40] *** noganex joined
[14:40] *** xinming joined
[14:41] *** p6bannerbot sets mode: +v noganex

[14:41] *** p6bannerbot sets mode: +v xinming

[14:44] *** lizmat left
[14:46] <donaldh_> There's something amiss with \ char in tr///

[14:47] <donaldh_> m: $_ = '|\^/|'; .say; tr|^\/| |; .say

[14:47] <camelia> rakudo-moar e0633a0de: OUTPUT: «|\^/|␤|\  |␤»

[14:47] <donaldh_> m: $_ = '|\^/|'; .say; tr|^/\| |; .say

[14:47] <camelia> rakudo-moar e0633a0de: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed replacement part; couldn't find final |␤at <tmp>:1␤------> 3$_ = '|\^/|'; .say; tr|^/\| |; .say7⏏5<EOL>␤»

[14:48] <donaldh_> m: $_ = '|\^/|'; .say; tr|^/\\| |; .say

[14:48] <camelia> rakudo-moar e0633a0de: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed replacement part; couldn't find final |␤at <tmp>:1␤------> 3$_ = '|\^/|'; .say; tr|^/\\| |; .say7⏏5<EOL>␤»

[14:48] <jkramer> m: my %h = :foo<123>, :bar<456>, :baz<789>; class A { has $foo; has $baz; has $meep; }; A.new(:meep(123), |(%h<foo baz>:p)).say

[14:48] <camelia> rakudo-moar e0633a0de: OUTPUT: «Default constructor for 'A' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»

[14:48] <jkramer> How can I make that work?

[14:49] <jnthn> |% instead of | probably does it

[14:49] <jkramer> my %h = :foo<123>, :bar<456>, :baz<789>; class A { has $foo; has $baz; has $meep; }; A.new(:meep(123), |%(%h<foo baz>:p)).say

[14:49] <evalable6> jkramer, rakudo-moar e0633a0de: OUTPUT: «A.new␤»

[14:49] <jkramer> \o/ Thanks

[14:51] *** cognominal-p6 joined
[14:52] *** p6bannerbot sets mode: +v cognominal-p6

[14:54] *** troys joined
[14:55] *** mscha left
[14:55] *** p6bannerbot sets mode: +v troys

[14:56] *** cstls joined
[14:57] *** p6bannerbot sets mode: +v cstls

[14:59] *** fake_space_whale joined
[15:00] *** p6bannerbot sets mode: +v fake_space_whale

[15:03] *** aindilis left
[15:04] *** cognominal-p6 left
[15:05] *** cognominal-p6 joined
[15:05] *** domidumont left
[15:05] *** p6bannerbot sets mode: +v cognominal-p6

[15:11] *** noganex_ joined
[15:12] <buggable> New CPAN upload: Zodiac-Chinese-0.0.1.tar.gz by TMTVL https://cpan.metacpan.org/authors/id/T/TM/TMTVL/Perl6/Zodiac-Chinese-0.0.1.tar.gz

[15:12] *** p6bannerbot sets mode: +v noganex_

[15:15] *** itaipu joined
[15:15] *** noganex left
[15:15] *** cstls left
[15:15] *** p6bannerbot sets mode: +v itaipu

[15:21] *** cognominal-p6 left
[15:32] <Geth> ¦ ecosystem: tmtvl++ created pull request #411: Add Zodiac::Chinese (https://github.com/tmtvl/Zodiac-Chinese)

[15:32] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/411

[15:35] *** zakharyas left
[15:35] *** xm-weechat joined
[15:36] *** kerframil left
[15:36] *** p6bannerbot sets mode: +v xm-weechat

[15:38] *** ChoHag joined
[15:39] *** p6bannerbot sets mode: +v ChoHag

[15:40] *** cognominal-p6 joined
[15:41] *** p6bannerbot sets mode: +v cognominal-p6

[15:44] *** cognominal-p6 left
[15:44] *** cognominal-p6 joined
[15:45] *** p6bannerbot sets mode: +v cognominal-p6

[15:48] *** sftp left
[15:50] <sena_kun> m: my $m = Cursor.^methods.grep(*.name eq 'alpha')[0]; say $m.^name; say $m ~~ Method;

[15:50] <camelia> rakudo-moar e0633a0de: OUTPUT: «NQPRoutine␤Died with X::Multi::NoMatch␤  in block <unit> at <tmp> line 1␤␤»

[15:52] <sena_kun> So I see it's not a Method, but cannot match it. Any better solution comes to mind(without literal string comparsion on `^name`)?

[15:52] <buggable> New CPAN upload: DOM-Tiny-0.5.0.tar.gz by HANENKAMP http://modules.perl6.org/dist/DOM::Tiny:cpan:HANENKAMP

[15:53] *** sftp joined
[15:53] *** p6bannerbot sets mode: +v sftp

[15:53] <moritz> m: my $m = Cursor.^methods.grep(*.name eq 'alpha')[0]; say $m.^isa(Method)

[15:53] <camelia> rakudo-moar e0633a0de: OUTPUT: «Died with X::Method::NotFound␤  in block <unit> at <tmp> line 1␤␤»

[15:53] <moritz> ouch

[15:53] <moritz> m: use nqp; my $m = Cursor.^methods.grep(*.name eq 'alpha')[0]; say nqp::istype(nqp::decont($m), Method)

[15:53] *** holyghost left
[15:53] <camelia> rakudo-moar e0633a0de: OUTPUT: «0␤»

[15:54] *** holyghost joined
[15:54] <sena_kun> hmm, I thought it's possible with nqp usage. was not sure if it's possible on user level, but, well, I guess I am deep enough anyway.

[15:54] <sena_kun> thanks, moritz!

[15:54] <moritz> sena_kun: my pleasure

[15:54] <timotimo> well, it's not derived from Method

[15:54] *** p6bannerbot sets mode: +v holyghost

[15:54] <timotimo> you'd have to check against NQPMethod, right?

[15:54] <moritz> timotimo: but the smartmatch dieing is LTA

[15:55] *** robertle left
[15:55] <sena_kun> m: my $m = Cursor.^methods.grep(*.name eq 'alpha')[0]; say $m.^name; say $m ~~ NQPMethod;

[15:55] <camelia> rakudo-moar e0633a0de: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    NQPMethod used at line 1. Did you mean 'Submethod'?␤␤»

[15:55] <sena_kun> m: my $m = Cursor.^methods.grep(*.name eq 'alpha')[0]; say $m.^name; say $m ~~ NQPRoutine;

[15:55] <camelia> rakudo-moar e0633a0de: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    NQPRoutine used at line 1␤␤»

[15:57] *** xm-weechat left
[16:03] *** fake_space_whale left
[16:09] <Geth> ¦ ecosystem: 41d0f35cb1 | (Zoffix Znet)++ (committed using GitHub Web editor) | .travis.yml

[16:09] <Geth> ¦ ecosystem: Install SSL Sock before LWP::Simple

[16:09] <Geth> ¦ ecosystem: 

[16:09] <Geth> ¦ ecosystem: Looks like LWP::S's tests require it now, and that causes travis builds to croak:

[16:09] <Geth> ¦ ecosystem: https://travis-ci.org/perl6/ecosystem/builds/446750151#L1402

[16:09] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/41d0f35cb1

[16:11] *** xinming is now known as xinming-irrsi

[16:18] <Geth> ¦ ecosystem: fb972a3cde | (Tim Van den Langenbergh)++ | META.list

[16:18] <Geth> ¦ ecosystem: Add Zodiac::Chinese (https://github.com/tmtvl/Zodiac-Chinese)

[16:18] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/fb972a3cde

[16:18] <Geth> ¦ ecosystem: 12aeecf3ef | (Tim Van den Langenbergh)++ (committed using GitHub Web editor) | META.list

[16:18] <Geth> ¦ ecosystem: Merge pull request #411 from tmtvl/master

[16:18] <Geth> ¦ ecosystem: 

[16:18] <Geth> ¦ ecosystem: Add Zodiac::Chinese (https://github.com/tmtvl/Zodiac-Chinese)

[16:18] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/12aeecf3ef

[16:30] *** domidumont joined
[16:31] *** p6bannerbot sets mode: +v domidumont

[16:37] *** patrickb joined
[16:37] *** p6bannerbot sets mode: +v patrickb

[16:39] *** azawawi joined
[16:39] *** p6bannerbot sets mode: +v azawawi

[16:39] <azawawi> hi

[16:40] <timotimo> greetings

[16:40] <azawawi> How does one overcome CStruct pass-by-reference restriction without writing extra wrapper C code?

[16:41] <timotimo> you mean like clone it?

[16:41] * azawawi is feeling puzzled

[16:41] <timotimo> i wonder if "is copy" does anything

[16:41] <azawawi> timotimo: im currently working on a libclang wrapper

[16:41] <Geth> ¦ ecosystem/zoffixznet-patch-1: 460bf45c5e | (Zoffix Znet)++ (committed using GitHub Web editor) | README.install-template.md

[16:41] <Geth> ¦ ecosystem/zoffixznet-patch-1: Shorten install instructions

[16:41] <Geth> ¦ ecosystem/zoffixznet-patch-1: review: https://github.com/perl6/ecosystem/commit/460bf45c5e

[16:41] *** andrzejku left
[16:42] <azawawi> timotimo: and was stuck for a while until i found out that restriction in docs / my own previous code :)

[16:42] <Geth> ¦ ecosystem: zoffixznet++ created pull request #412: Shorten install instructions

[16:42] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/412

[16:43] <azawawi> timotimo: the problem is libclang is also parsing cursors to nodes by value to callbacks...

[16:43] <azawawi> parsing=passing

[16:43] *** robertle joined
[16:43] <timotimo> so the problem is that it passes structs to you, but you want to change the data locally, but not change what you got passed?

[16:43] <timotimo> oh

[16:43] <timotimo> it passes structs without a pointer

[16:44] <timotimo> i think only returning structs is problematic

[16:44] *** p6bannerbot sets mode: +v robertle

[16:46] <azawawi> timotimo: true... CStruct objects are passed to native functions by reference and native functions must also return CStruct objects by reference

[16:47] <azawawi> anyways without wrapping CXCursor passing-by-value, I get silent & random segmentation faults.

[16:47] <azawawi> https://github.com/azawawi/scripts/blob/master/test-libclang.p6 # so far

[16:48] <azawawi> once libclang is wrapped, we can traverse the nodes... and basically output nativecall stuff... like bindgen in rust.

[16:50] <azawawi> parse C/C++ headers easily... automate nativecall boilerplate and provide another way besides gptrixie

[16:52] <azawawi> stuck now in the final node traversal (callbacks)

[16:54] *** AlexDaniel left
[16:54] *** domidumont left
[17:02] <Geth> ¦ ecosystem: 4aca12bf96 | (Zoffix Znet)++ (committed using GitHub Web editor) | .travis.yml

[17:02] <Geth> ¦ ecosystem: s/zen/zef/;

[17:02] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/4aca12bf96

[17:05] *** jmerelo joined
[17:06] *** p6bannerbot sets mode: +v jmerelo

[17:07] *** xinming joined
[17:08] *** p6bannerbot sets mode: +v xinming

[17:08] *** marmay left
[17:11] <Geth> ¦ ecosystem/zoffixznet-patch-1: 4aca12bf96 | (Zoffix Znet)++ (committed using GitHub Web editor) | .travis.yml

[17:11] <Geth> ¦ ecosystem/zoffixznet-patch-1: s/zen/zef/;

[17:11] <Geth> ¦ ecosystem/zoffixznet-patch-1: review: https://github.com/perl6/ecosystem/commit/4aca12bf96

[17:11] <Geth> ¦ ecosystem/zoffixznet-patch-1: 2f7529dc12 | (Zoffix Znet)++ | .travis.yml

[17:11] <Geth> ¦ ecosystem/zoffixznet-patch-1: Merge branch 'master' into zoffixznet-patch-1

[17:11] <Geth> ¦ ecosystem/zoffixznet-patch-1: review: https://github.com/perl6/ecosystem/commit/2f7529dc12

[17:23] *** xinming left
[17:25] <Geth> ¦ ecosystem: fb35f0c271 | (Zoffix Znet)++ (committed using GitHub Web editor) | README.install-template.md

[17:25] <Geth> ¦ ecosystem: Shorten install instructions (#412)

[17:25] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/fb35f0c271

[17:28] *** xinming joined
[17:29] *** p6bannerbot sets mode: +v xinming

[17:36] *** azawawi left
[17:53] *** jmerelo left
[17:57] *** azawawi joined
[17:57] *** p6bannerbot sets mode: +v azawawi

[17:57] <azawawi> timotimo: ping :)

[17:59] <azawawi> https://github.com/azawawi/scripts/blob/master/test-libclang.p6 # First libclang AST traversal example is now working... Needed to wrap CStruct

[18:02] <azawawi> two weaknesses of NativeCall so far... CStruct passing and inability to create static native arrays in a simple way

[18:03] <azawawi> https://gist.github.com/azawawi/bd3016869833cac120a3e6e6b798a29c # example output

[18:08] *** itaipu left
[18:18] *** azawawi left
[18:22] *** aindilis joined
[18:23] *** p6bannerbot sets mode: +v aindilis

[18:28] *** kst joined
[18:29] *** p6bannerbot sets mode: +v kst

[18:34] *** AlexDaniel joined
[18:34] *** p6bannerbot sets mode: +v AlexDaniel

[18:46] *** alcymd joined
[18:47] *** p6bannerbot sets mode: +v alcymd

[18:57] <Geth> ¦ doc: 4b15d44eee | Coke++ | doc/Language/subscripts.pod6

[18:57] <Geth> ¦ doc: make example compile

[18:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4b15d44eee

[18:57] <synopsebot> Link: https://doc.perl6.org/language/subscripts

[18:58] *** xinming left
[18:58] *** xinming joined
[18:59] *** p6bannerbot sets mode: +v xinming

[19:01] *** pmurias left
[19:05] *** pmurias joined
[19:05] *** p6bannerbot sets mode: +v pmurias

[19:12] <buggable> New CPAN upload: Libclang-0.0.1.tar.gz by AZAWAWI https://cpan.metacpan.org/authors/id/A/AZ/AZAWAWI/Perl6/Libclang-0.0.1.tar.gz

[19:16] *** lizmat joined
[19:16] *** p6bannerbot sets mode: +v lizmat

[19:32] *** atroxaper left
[19:37] *** alcymd left
[19:38] *** harrison joined
[19:39] *** p6bannerbot sets mode: +v harrison

[19:40] <harrison> m: class Foo { has Str $.a; }; my $f = Foo.new(a => 'aaaah'); say $f;

[19:40] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Foo.new(a => "aaaah")␤»

[19:40] <AlexDaniel> .

[19:40] <yoleaux> 16:35Z <Zoffix> AlexDaniel: just wanted to confirm before I do it: am I safe to bump default lang version in Rakudo to 6.d or should I wait until after release?

[19:41] <AlexDaniel> El_Che: if you're interested, last blocker was resolved

[19:41] <El_Che> AlexDaniel: I am, thank you

[19:41] <AlexDaniel> El_Che: so we're not far away from the release, but it may take a bit still

[19:42] <El_Che> AlexDaniel: great!

[19:43] <El_Che> I added a /etc/profile.d/rakudo-pkg.sh to set the profile, because many Linux newbies don't know how to set the PATH (and don't read the readme :) )

[19:43] <El_Che> I also added a link from the bin of perl6 to rakudo

[19:46] <harrison> m: class Foo { has Str $.@a; } my $f = Foo.new(a => <1 2 3 4>); say $f;

[19:46] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of $. variable; in Perl 6 please use the .kv method on e.g. .lines␤at <tmp>:1␤------> 3class Foo { has Str $.7⏏5@a; } my $f = Foo.new(a => <1 2 3 4>); s␤»

[19:46] <harrison> m: class Foo { has Str @.a; } my $f = Foo.new(a => <1 2 3 4>); say $f;

[19:46] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3class Foo { has Str @.a; }7⏏5 my $f = Foo.new(a => <1 2 3 4>); say $f␤    expecting any of:␤        infix␤     …»

[19:47] <harrison> m: class Foo { has Str @.a; }; my $f = Foo.new(a => <1 2 3 4>); say $f;

[19:47] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Foo.new(a => Array[Str].new(IntStr.new(1, "1"), IntStr.new(2, "2"), IntStr.new(3, "3"), IntStr.new(4, "4")))␤»

[19:47] <harrison> m: class Foo { has Str @.a; }; my $f = Foo.new(a => ('awesome')); say $f;

[19:47] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Foo.new(a => Array[Str].new("awesome"))␤»

[19:48] *** xinming left
[19:48] <tobs> m: class Foo { has Str @.a; }; my $f = Foo.new(a => 'even without parens'); say $f;

[19:48] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Foo.new(a => Array[Str].new("even without parens"))␤»

[19:49] <harrison> m: my @letters = 'a'...'d'; class Foo { has Str @.a; }; my $f = Foo.new(a => @letters); say $f;

[19:49] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Foo.new(a => Array[Str].new("a", "b", "c", "d"))␤»

[19:52] <harrison> Does the existence of precompilation mean that I can dare dream of Perl6 being compiled to bytecode in the future?

[19:57] <timotimo> it is already compiled to bytecode

[19:57] <timotimo> try moar --dump Something.moarvm

[19:57] <timotimo> the CORE.setting.moarvm is a bit gigantic

[19:57] <timotimo> but you'll find enough smaller things :)

[19:58] <harrison> timotimo: Interesting... so like the way one ships Java code... the same will be possible for Perl 6 in the future?

[19:59] <harrison> afaik it is not possible now.

[19:59] <geekosaur> portable precomps are a problem currently, yes

[20:01] <harrison> So I am getting a strange error on This is Rakudo version 2018.09 built on MoarVM version 2018.09... https://pastebin.com/MZ22RsLs

[20:02] <geekosaur> you're nesting ''s

[20:02] <geekosaur> so your "string" 'aaaah' is not quoted

[20:03] <geekosaur> use double quotes or q{} or something

[20:03] <AlexDaniel> syntax highlighting is very helpful there

[20:04] *** xinming-irrsi left
[20:04] <geekosaur> not so helpful here since it's the shell that is doing it and the shell doesn't typically do syntax highlighting

[20:04] <harrison> geekosaur, oh, thanks. *face palm.

[20:05] <AlexDaniel> geekosaur: yeah but on that paste it's accidentally very right

[20:06] *** xinming joined
[20:07] *** p6bannerbot sets mode: +v xinming

[20:07] <harrison> So uh, either I need to get some sleep or I am overlooking something very obvious. So this is the new error: https://pastebin.com/kS1fQgBA

[20:08] <harrison> m: class Foo { has Str $.a; }; my $f = Foo.new(a => 'aaaah'); say $f;

[20:08] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Foo.new(a => "aaaah")␤»

[20:08] <harrison> Huh? It works here.

[20:08] <harrison> *confused

[20:08] <timotimo> i see your problem

[20:08] <timotimo> you are using ""

[20:08] <timotimo> look at the code that perl6 is echoing back at you

[20:09] <timotimo> it sees "my   = Foo.new"

[20:09] <timotimo> that's because your shell doesn't have a $f defined, so it replaces it with the empty string

[20:09] <harrison> timotimo, oh yes. You are right.

[20:09] *** xinming left
[20:10] <timotimo> shells are fun, aren't they :)

[20:10] *** xinming joined
[20:11] *** p6bannerbot sets mode: +v xinming

[20:11] <harrison> timotimo lol. I saw a quote on twitter, attributed to Larry Wall, 'It is easier to port a shell than to port a shell script.'

[20:12] <timotimo> that has a truthish feel to it

[20:13] <geekosaur> go look at the configure scripts autoconf creates sometime. if you dare.

[20:13] <harrison> https://twitter.com/CodeWisdom/status/731504884692992000

[20:13] *** cognominal-p6 left
[20:13] *** cognominal-p6 joined
[20:14] *** p6bannerbot sets mode: +v cognominal-p6

[20:30] *** xinming is now known as xinming-weechat

[20:30] *** harrison left
[20:38] <masak> pmurias: re "bigger forms of language extensions than macros" -- yes, there's a (hazy) vision of being able to build slangs

[20:46] <masak> in 007 terminology, a "lang" is a thing that drives a parser at the top level of a program, and a "slang" is generally a nested language, often with a quasiquote-like exchange of values with its outside

[20:47] *** cognominal-p6 left
[20:47] *** cognominal-p6 joined
[20:48] *** p6bannerbot sets mode: +v cognominal-p6

[20:51] *** xinming-weechat is now known as xinming

[21:02] *** rindolf left
[21:02] *** rindolf joined
[21:03] *** p6bannerbot sets mode: +v rindolf

[21:08] <moony> Perl 6 needs a good way to parse binary data, not just strings. Converting a string to it's binary form to parse it via grammar/regex feels evil.

[21:10] <moony> also, attempting to assign a <( )> capture to a capture variable results in brokenness (Did it by mistake).

[21:11] <timotimo> yeah, that's true. though i don't know what you mean by "<( )> capture"

[21:12] <moony> i.e. $<sillyvariable>=<(.)>

[21:13] *** pmurias left
[21:13] <timotimo> <( is actually a thing in and of itself, and so is )>

[21:13] <moony> oh ok

[21:13] *** comborico1611 joined
[21:13] <timotimo> i tend to think of them as "inside-out lookbehind and lookahead"

[21:14] <timotimo> but effectively they just set the beginning and end of the match to where ever they happen to have matched

[21:14] *** p6bannerbot sets mode: +v comborico1611

[21:14] <timotimo> m: say "hello world" ~~ / <( . l l . )> . <alpha> /;

[21:14] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Potential difficulties:␤    Space is not significant here; please use quotes or :s (:sigspace) modifier (or, to suppress this warning, omit the space, or otherwise change the spacing)␤    at <tmp>:1␤    ------> 3say "hello world" ~~ / <( . l7…»

[21:14] <timotimo> m: say "hello world" ~~ / <( . ll . )> . <alpha> /;

[21:14] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «｢ello｣␤ alpha => ｢w｣␤»

[21:15] <timotimo> look, you can ever have a match that sits outside of the matched text of the whole match

[21:15] <timotimo> even*

[21:15] *** pmurias joined
[21:15] *** p6bannerbot sets mode: +v pmurias

[21:19] *** MasterDuke joined
[21:19] *** p6bannerbot sets mode: +v MasterDuke

[21:19] *** MasterDuke left
[21:19] *** MasterDuke joined
[21:19] *** herbert.freenode.net sets mode: +v MasterDuke

[21:19] *** p6bannerbot sets mode: +v MasterDuke

[21:22] <MasterDuke> moony: jnthn has a proposal somewhere on improving binary parsing in perl 6

[21:23] <timotimo> are you refering to the recent one for getting data from blobs? like "read a 32bit integer" and stuff?

[21:34] <MasterDuke> timotimo: i think so

[21:35] <timotimo> i think they're hoping for something more like grammars, but for bytes

[21:35] <MasterDuke> ah

[21:36] <timotimo> or even pack/unpack

[21:36] <avuserow> I worked on a p6 module inspired by Python's Construct module as Binary::Structured

[21:37] <avuserow> it's a class-based approach for representing binary data

[21:39] <MasterDuke> eco: Binary::Structured

[21:39] <buggable> MasterDuke, Binary::Structured 'Read and write binary formats defined by classes': http://modules.perl6.org/dist/Binary::Structured:github:Adrian%20Kreher

[21:40] *** HaraldJoerg left
[21:52] *** pmurias left
[21:56] <moony> timotimo, i'm talking about grammars for individual bits haha

[21:56] <moony> for reading highly packed data

[22:00] *** patrickb left
[22:05] *** ufobat left
[22:05] *** rindolf left
[22:08] *** rindolf joined
[22:08] *** p6bannerbot sets mode: +v rindolf

[22:19] *** rindolf left
[22:20] *** cognominal-p6 left
[22:29] *** sena_kun left
[22:44] *** wintertot joined
[22:45] *** p6bannerbot sets mode: +v wintertot

[22:46] *** Zoffix joined
[22:46] *** p6bannerbot sets mode: +v Zoffix

[22:47] *** Zoffix left
[22:50] *** d3b left
[22:53] *** pecastro left
[23:02] *** sno left
[23:04] *** sno joined
[23:05] *** p6bannerbot sets mode: +v sno

[23:15] *** Elronnd left
[23:41] *** wintertot left
