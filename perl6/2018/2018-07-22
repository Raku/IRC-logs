[00:00] *** TreyHarris joined
[00:15] *** Sgeo_ joined
[00:16] <Summertime> "illegally post-declared type" when using a grammar in an earlier defined function

[00:17] <Summertime> that implies that some situations would be legal? is there examples of that?

[00:18] *** Sgeo left
[00:19] *** kerframil joined
[00:19] <timotimo> when you stub it?

[00:22] *** goiuy joined
[00:22] <Summertime> ah ok, so, stub, followed by the subroutine, followed by the full type definition?

[00:24] <Summertime> hey neat it works

[00:31] *** goiuy left
[00:33] *** gabiruh left
[00:34] <Summertime> also is there a known reason why grammars don't have .ACCEPTS?

[00:36] *** jeek joined
[00:52] <b2gills> xinming: `:sym<foo>` is special in a regex/token/rule, in that `<sym>` will be the same as `'foo'`.

[00:53] <b2gills> `token asdf:sym<foo> { <sym> }`   works exactly the same as   `token asdf:sym<foo> { 'foo' }`

[00:59] <b2gills> Summertime: Technically a grammar does have an ACCEPTS, but it is from Match/Any/Mu

[00:59] <b2gills> If you can make the case for exactly what you think it should do, go ahead and make it.

[00:59] <b2gills> m: .say for Grammar.can('ACCEPTS').map(*.candidates).flat.map(*.signature)

[00:59] <camelia> rakudo-moar cb2ea9328: OUTPUT: «(Mu:U: \topic, *%_)␤(Mu:U: Mu:U \topic, *%_)␤(Any:D: Mu:D \a, *%_)␤(Any:D: Mu:U, *%_ --> Bool::False)␤(Any:U: \topic, *%_)␤(Match:D: $, *%_)␤(Mu:U: \topic, *%_)␤(Mu:U: Mu:U \topic, *%_)␤(Any:D: Mu:D \a, *%_)␤(Any:D: Mu:U, *%_ --> Boo…»

[01:00] *** jeromelanteri joined
[01:01] <Kaiepi> m: my $p = start { await $p }

[01:01] <camelia> rakudo-moar cb2ea9328: ( no output )

[01:01] <Summertime> I'd be thinking, in my most expected world, `$x ~~ G` would be interchangable with `G.parse: $x`

[01:02] <Kaiepi> weird that throws on my version

[01:02] <Kaiepi> no sane person would write this though

[01:03] <Kaiepi> ok now it's not...?

[01:03] <Kaiepi> never mind then

[01:06] <Kaiepi> oh i was typing %p instead of $p

[01:07] <b2gills> m: .say for Grammar.can('ACCEPTS').map(*.candidates).flat.map(*.signature.params[0].type.^name).unique

[01:07] <camelia> rakudo-moar cb2ea9328: OUTPUT: «Mu␤Any␤Match␤»

[01:08] <Summertime> though playing around with it more, if you want to smartmatch against a grammar, you probably are using the grammar wrong (using it as a regex replacement when its not practical for that)

[01:09] <Summertime> it'd only be useful to call parse without corresponding actions when debugging a grammar, I think

[01:09] <b2gills> Kaiepi: There is no way for that to even progress as the `start` has the vow

[01:09] <Kaiepi> i know, i was screwing around to see if i could break something

[01:11] *** markoong left
[01:11] <b2gills> m: .say for anon grammar Foo { method ACCEPTS (){}}.can('ACCEPTS').map(*.candidates).flat.map(*.signature.params[0].type.^name).unique

[01:11] <camelia> rakudo-moar cb2ea9328: OUTPUT: «Foo␤Mu␤Any␤Match␤»

[01:12] <b2gills> Summertime: Since grammar is almost exactly the same as a class definition, you can always add one yourself

[01:13] <Summertime> ah, that is pretty neat

[01:14] *** nightfrog left
[01:15] <jnthn> `my $p = start { await $p }` is actually racey. It can die if the code in the `start` block runs before the assignment into `$p`.

[01:16] *** warriors joined
[01:17] *** Some-body_ joined
[01:17] *** DarthGandalf left
[01:17] <Kaiepi> neat

[01:17] *** Some-body_ is now known as DarthGandalf

[01:19] *** nightfrog joined
[01:21] *** xtreak joined
[01:22] *** Kaiepi left
[01:28] <Summertime> my token URL { :my token protocol { 'http' | 'https' }; <protocol> } etc etc

[01:28] <Summertime> this seems like a really bad way of not filling up the scope with random names, but it works nicely?

[01:30] *** xtreak left
[01:30] *** uzl joined
[01:30] *** gabiruh joined
[01:33] <uzl> Hello #perl6!

[01:33] <yoleaux> 20 Jul 2018 15:41Z <jmerelo> uzl: it would be better if you gather helpers and assign chapters to each of them (and meta-reviwers too). Have you used any kind of pro translator software, with thesaurus and so on?

[01:36] <uzl> .tell jmerelo That sounds like a good idea but I'm not sure how to gather helpers. That's the main reason why I put it in the open (well, on #perl6) for if anyone is interested.

[01:36] <yoleaux> uzl: I'll pass your message to jmerelo.

[01:37] <uzl> .tell jmerelo  Not I haven't used any professional software. All the translation was done manually, albeit consulting multiple sources such as dictionaries, thesaurus, wikipedia entries, etc.

[01:37] <yoleaux> uzl: I'll pass your message to jmerelo.

[01:38] <warriors> what did i miss 

[01:42] *** epony left
[01:43] *** wamba left
[01:44] *** _uzl joined
[01:44] *** _uzl left
[01:47] *** uzl left
[01:52] *** uzl joined
[01:53] *** gabiruh left
[01:56] *** xtreak joined
[01:56] *** Kaiepi joined
[01:57] <uzl> I'm reading about Perl 6 Pod and looking for a module that uses it extensively for documentation. I'd like to learn more about how I'd use it to document a program.

[01:57] *** uzl left
[02:00] <AlexDaniel> treegrep: .pod6

[02:00] <greppable6> AlexDaniel, https://gist.github.com/a66dff1b91733d81d8df3ac9873603b9

[02:06] *** sauvin left
[02:07] <warriors> good luck

[02:13] *** sauvin joined
[02:18] *** jeromelanteri left
[02:20] <warriors> so perl6 does support nested functions :) why doesnt the docs mention it :) 

[02:20] <warriors> its a need feature

[02:21] <warriors> neat 

[02:26] <benjikun> warriors: Where would you put that?

[02:26] <benjikun> Under https://docs.perl6.org/language/functions ?

[02:27] <benjikun> Seems kind of random to bring up

[02:27] *** konsolebox left
[02:28] <warriors> under blocks and lambdas

[02:30] *** konsolebox joined
[02:31] <Juerd> It does say "By default, subroutines are lexically scoped. That is, sub foo {...} is the same as my sub foo {...} and is only defined within the current scope." which implies they can be nested, but I agree that's obscure if you're looking for the specific feature.

[02:32] <Juerd> warriors: At the bottom of the page there's a link where you can report issues. Would you be willing to report this one?

[02:35] *** jeromelanteri joined
[03:02] <Kaiepi> i have a phobia of nested functions after node

[03:02] <Kaiepi> its garbage collector didn't handle them very well

[03:02] <Zoffix> If you're in Toronto next Thursday (July 26), join the local #Perl Mongers meeting for a double-header #Perl6 talks: "Faster Perl 6 Programs" and "Intro Into Perl 6 Regexes and Grammars". It's free: https://www.meetup.com/Toronto-Perl-Mongers/events/rhsxwpyxkbjc/

[03:03] <Kaiepi> hopefully perl's don't leak like that though, they're pretty useful

[03:07] <Zoffix> notable6: weekly two P6 talks at Toronto Perl Mongers July 26: https://twitter.com/zoffix/status/1020867456020213761

[03:07] <notable6> Zoffix, Noted!

[03:08] <Zoffix> .botsnack

[03:08] <yoleaux> :D

[03:09] <Zoffix> .ask jnthn does spesh do anything interesting with type constraints? What's the answer to the question: "Is there any potential performance benefit to specifying `Int` type constraint instead of just leaving it at Mu/Any?"

[03:09] <yoleaux> Zoffix: I'll pass your message to jnthn.

[03:11] <Kaiepi> m: my %es5-class = sub { sub ES5Class { my $foo = 1; my $bar = 2; my %prototype; { foo => $foo, bar => $bar, prototype => %prototype } }; my %ret = ES5Class(); %ret<prototype><baz> = 3; %ret; }()

[03:11] <camelia> rakudo-moar cb2ea9328: ( no output )

[03:11] <Kaiepi> m: my %es5-class = sub { sub ES5Class { my $foo = 1; my $bar = 2; my %prototype; { foo => $foo, bar => $bar, prototype => %prototype } }; my %ret = ES5Class(); %ret<prototype><baz> = 3; %ret; }(); say %es5-class

[03:11] <camelia> rakudo-moar cb2ea9328: OUTPUT: «{bar => 2, foo => 1, prototype => {baz => 3}}␤»

[03:12] <Kaiepi> pointless with classes but you get the idea

[03:13] <Kaiepi> are IIFEs mentioned in the docs?

[03:13] *** Xliff joined
[03:14] <Xliff> \o

[03:14] <yoleaux> 21 Jul 2018 08:55Z <CIAvash[m]> Xliff: '%' doesn't allow a trailing '.', '%%' does.

[03:14] <yoleaux> 21 Jul 2018 22:24Z <b2gills> Xliff: Was this more of what you were looking for: "aa.bb.cc" ~~ /^ [\w+]+ % '.' $/

[03:14] <Xliff> m: "aa.bb.cc" ~~ /^ [\w+]+ % '.' $/

[03:14] <camelia> rakudo-moar cb2ea9328: ( no output )

[03:14] <Xliff> m: ("aa.bb.cc" ~~ /^ [\w+]+ % '.' $/).say

[03:14] <camelia> rakudo-moar cb2ea9328: OUTPUT: «｢aa.bb.cc｣␤»

[03:14] <Xliff> m: ("aa.bb." ~~ /^ [\w+]+ % '.' $/).say

[03:14] <camelia> rakudo-moar cb2ea9328: OUTPUT: «Nil␤»

[03:15] <Xliff> m: ("aa.bb" ~~ /^ [\w+]+ % '.' $/).say

[03:15] <camelia> rakudo-moar cb2ea9328: OUTPUT: «｢aa.bb｣␤»

[03:15] <Xliff> .tell b2gills Thanks!

[03:15] <yoleaux> Xliff: I'll pass your message to b2gills.

[03:24] <tobs> A small doc issue: it says "`say dice + dice;` can print any number between 1 and 12" in https://docs.perl6.org/language/syntax#Term_term:%3C%3E but you get at least 2 pips from throwing two dice, don't you?

[03:27] <Xliff> tobs: I think you might be right.

[03:27] *** kaare_ joined
[03:28] <Xliff> Minimum value is 2, not 1

[03:28] *** spycrab0 left
[03:29] *** rubio-terra left
[03:30] <tobs> not sure if that's worth an issue though. Maybe someone with a commit bit would take care of it.

[03:30] <Xliff> m: term:<dice> { (1..6).pick }; say dice + dice for ^100;

[03:30] <camelia> rakudo-moar cb2ea9328: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    dice used at line 1. Did you mean 'die'?␤    term:<dice> used at line 1. Did you mean 'term:<time>', 'term:<now>'?␤␤»

[03:30] <Xliff> Oh dear. Looks like that isn't working at all.

[03:30] <Xliff> m: term:<dice> { (1..6).pick }; say dice; say dice + dice for ^100;

[03:30] <camelia> rakudo-moar cb2ea9328: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    dice used at line 1. Did you mean 'die'?␤    term:<dice> used at line 1. Did you mean 'term:<time>', 'term:<now>'?␤␤»

[03:31] <Xliff> m: sub dice { (1..6).pick }; say dice; say dice + dice for ^100;

[03:31] <camelia> rakudo-moar cb2ea9328: OUTPUT: «2␤Too many positionals passed; expected 0 arguments but got 1␤  in sub dice at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:31] <Xliff> m: sub dice() { (1..6).pick }; say dice; say dice + dice for ^100;

[03:31] <camelia> rakudo-moar cb2ea9328: OUTPUT: «2␤Too many positionals passed; expected 0 arguments but got 1␤  in sub dice at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:31] <Xliff> m: sub dice() { (1..6).pick }; say dice; say dice() + dice() for ^100;

[03:31] <camelia> rakudo-moar cb2ea9328: OUTPUT: «3␤7␤3␤7␤7␤10␤8␤8␤9␤7␤9␤6␤6␤4␤4␤9␤7␤8␤7␤6␤7␤7␤3␤10␤2␤6␤10␤7␤7␤8␤10␤4␤8␤12␤8␤7␤6␤7␤12␤9␤10␤8␤3␤7␤6␤11␤7␤10␤10␤5␤5␤4␤5␤11␤7␤9␤8␤7␤7␤7␤…»

[03:32] <Xliff> m: term:<dice> { (1..6).pick }; say dice; say dice() + dice() for ^100;

[03:32] <camelia> rakudo-moar cb2ea9328: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    dice used at line 1. Did you mean 'die'?␤    term:<dice> used at line 1. Did you mean 'term:<time>', 'term:<now>'?␤␤»

[03:32] <Xliff> Yeah. Unless I am doing something wrong, term doesn't work as advertised, anymore

[03:32] <Xliff> Anyone else on who can offer clarification. Y'all know I can be easily conf00sled.

[03:32] <tobs> hum, it works as expected in my rakudo 2018.06

[03:33] <Xliff> Rakudo Star is at 2018.04

[03:33] <Xliff> One sec.

[03:33] <tobs> m: sub term:<dice> { (1..6).pick }; say min((dice + dice) xx 1000)

[03:33] <camelia> rakudo-moar cb2ea9328: OUTPUT: «2␤»

[03:34] <Xliff> Ah! SEE! I forgot the "sub"

[03:34] <tobs> ha!

[03:35] <Summertime> are pick and roll the same in this situation?

[03:35] <tobs> Summertime: I think so

[03:36] <Xliff> OK. After checking 400 iterations, I get a minimum value of 2.

[03:36] <Xliff> tobs: Bug it. It's a minor fix.

[03:36] <tobs> the difference is with vs. without repetition, which doesn't matter for 1 pick

[03:36] <tobs> okiedokie

[03:37] <Xliff> Thanks.

[03:38] <Summertime> ... do terms take a relatively insane time to create?

[03:41] <Summertime> m: sub term:<a>{};sub term:<b>{};sub term:<c>{};sub term:<d>{};sub term:<e>{}

[03:41] <camelia> rakudo-moar cb2ea9328: ( no output )

[03:43] <Summertime> m: say (INIT now) - (BEGIN now); sub term:<a>{};sub term:<b>{};sub term:<c>{};sub term:<d>{};sub term:<e>{}

[03:43] <camelia> rakudo-moar cb2ea9328: OUTPUT: «1.60135126␤»

[03:44] <Summertime> 1.6 seconds @.@

[03:44] <Summertime> m: say (INIT now) - (BEGIN now); sub a{};sub b{};sub c{};sub d{};sub e{}

[03:44] <camelia> rakudo-moar cb2ea9328: OUTPUT: «0.0166396␤»

[03:44] <Xliff> The extra flexibility costs.

[03:45] <Xliff> You don't want to know how badly grammars perform in compilation.

[03:45] <Summertime> thats more than a cost x.x

[03:45] <Summertime> then again its only compilation cost isn't it

[03:46] <Xliff> m: say (INIT now) - (BEGIN now); say a+b+c+d; sub term:<a>{0};sub term:<b>{1};sub term:<c>{2};sub term:<d>{3};sub term:<e>{4}

[03:46] <camelia> rakudo-moar cb2ea9328: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    a used at line 1␤    b used at line 1␤    c used at line 1␤    d used at line 1␤␤»

[03:46] <Xliff> m: sub term:<a>{0};sub term:<b>{1};sub term:<c>{2};sub term:<d>{3};sub term:<e>{4}; say (INIT now) - (BEGIN now); say a+b+c+d; 

[03:46] <camelia> rakudo-moar cb2ea9328: OUTPUT: «0.01353␤6␤»

[03:47] <Xliff> m: say (INIT now) - (BEGIN now); sub term:<a>{0};sub term:<b>{1};sub term:<c>{2};sub term:<d>{3};sub term:<e>{4}; say (INIT now) - (BEGIN now); say a+b+c+d; 

[03:47] <camelia> rakudo-moar cb2ea9328: OUTPUT: «2.0916655␤0.01418341␤6␤»

[03:47] <Xliff> Ye-ouch. Yeah. Compile time cost.

[03:50] <Summertime> hmm, why do the two begins have such vastly different times? shouldn't both run before the main bulk of compiling?

[03:50] <Xliff> m: say (INIT now) - (BEGIN now); sub term:<a>{0};sub term:<b>{1};sub term:<c>{2};sub term:<d>{3};sub term:<e>{4}; sub MAIN { say (INIT now) - (BEGIN now); say a+b+c+d; }

[03:50] <camelia> rakudo-moar cb2ea9328: OUTPUT: «2.01751611␤0.0148402␤6␤»

[03:51] <Xliff> ^^ Implied MAIN

[03:54] <Summertime> yeah but I mean, BEGIN is supposed to be some of the first things touched during compile right? shouldn't scope not matter in that case?

[03:56] <Summertime> 'Runs at compile time, as soon as possible,' -> 'Runs at compile time, as soon as compiled'? the prior wording makes it sound like it gets hoisted as a special case

[04:00] <Xliff> What's the best way to convert an int or num to scientific notation?

[04:01] *** kaare_ left
[04:01] <tobs> m: say pi.fmt("%e") # Xliff

[04:01] <camelia> rakudo-moar cb2ea9328: OUTPUT: «3.141593e+00␤»

[04:01] <tobs> that's one way at least

[04:02] <Xliff> tobs++

[04:04] *** Kaiepi left
[04:11] *** xtreak left
[04:11] <Zoffix> Summertime: Perl 6 does single-pass parsing, so there's no "main bulk" of compiling. The difference between the two BEGINs is how long it takes to mutate the grammar 5 times to mixin those new terms. You can stick terms/custom ops into a module and it'd get precompiled and you won't need to pay for them on each run of the program.

[04:13] <Geth> ¦ doc: 28310695bb | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/phasers.pod6

[04:13] <Geth> ¦ doc: fix bad casing

[04:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/28310695bb

[04:13] <synopsebot> Link: https://doc.perl6.org/language/phasers

[04:13] <Xliff> Zoffix: In the case of / \w+ % '.' /, what's the best way to add a negation to the following:

[04:13] <Xliff> Zoffix: In the case of / \w+ % '.' && '.'$/, what's the best way to add a negation to the following:

[04:13] <Xliff> Zoffix: This is a golf. It's the best way to ask without putting a lot more into the mix that will confuse the issue.

[04:14] <Xliff> But I want to NEGATE the '.'$ part

[04:14] <Summertime> yeah I was just confused as to what the docs meant, also mind-read my next question with the if-modules-would-make-it-cheaper answer

[04:21] <Geth> ¦ doc: 88fff75591 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/phasers.pod6

[04:21] <Geth> ¦ doc: Expand on BEGIN phaser

[04:21] <Geth> ¦ doc: 

[04:21] <Geth> ¦ doc: Be more precise about when it's run and include an example

[04:21] <Geth> ¦ doc: http://colabti.org/irclogger/irclogger_log/perl6?date=2018-07-22#l177

[04:21] <synopsebot> Link: https://doc.perl6.org/language/phasers

[04:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/88fff75591

[04:21] <Zoffix> Xliff: which is what? "not dot that is not at the end"?

[04:22] <Zoffix> What is it meant to match, in plain English?

[04:22] <Xliff> Zoffix: I do NOT want a dot at the end.

[04:22] <Xliff> namespace.table.field

[04:22] <Xliff> but not namespace.table.

[04:22] <Zoffix> <!after '.'> $

[04:22] <Xliff> Of course, to make it more difficult, .table.field is allowed.

[04:22] <Xliff> And is equivalent to table.field

[04:23] <tobs> m: say (1..100).max; say (1,2,3).max(* R/ 1); say (1..100).max(* R/ 1)

[04:23] <camelia> rakudo-moar cb2ea9328: OUTPUT: «100␤Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤1␤»

[04:23] <Zoffix> m: say <namespace.table.field  namespace.table.  .table.field>.grep: /^ \.? <( \w+ % \. <!after \.> $/

[04:23] <camelia> rakudo-moar cb2ea9328: OUTPUT: «()␤»

[04:24] <Xliff> Zoffix++

[04:24] <tobs> m: say (1,2,3).max(* R/ 1)

[04:24] <camelia> rakudo-moar cb2ea9328: OUTPUT: «1␤»

[04:24] <tobs> m: say (1..100).max(* R/ 1)

[04:24] <camelia> rakudo-moar cb2ea9328: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[04:25] <tobs> m: say (1...100).max(* R/ 1)

[04:25] <camelia> rakudo-moar cb2ea9328: OUTPUT: «1␤»

[04:25] <tobs> hmmm, is this correct?

[04:25] <tobs> I mean, the error in the middle, with a Range.

[04:28] <Zoffix> m: for <namespace.table.field  namespace.table.  .table.field> { m/^ \.? <( [\w+ % \.]+ <!after \.> $/ andthen .say }

[04:28] <camelia> rakudo-moar cb2ea9328: OUTPUT: «｢namespace.table.field｣␤｢table.field｣␤»

[04:29] <geekosaur> tobs: https://docs.perl6.org/routine/max#(Range)_method_max

[04:30] <geekosaur> essentially it's an accessor for a Range endpoint, instead of a selector

[04:30] <tobs> m: say (1..100).list.max(* R/ 1)

[04:30] <camelia> rakudo-moar cb2ea9328: OUTPUT: «1␤»

[04:30] <geekosaur> right

[04:30] <tobs> thanks, geekosaur 

[04:31] <Zoffix> s: (1..100), 'max', \()

[04:31] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/cb2ea9328/src/core/Any-iterable-methods.pm6#L1272

[04:31] <Zoffix> weird that lookup points to the method method instead of the ancestor

[04:31] <Zoffix> m: ^6 .^lookup("max").file.say

[04:31] <camelia> rakudo-moar cb2ea9328: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call (only alphabetic methods may be detached)␤at <tmp>:1␤------> 3^6 .7⏏5^lookup("max").file.say␤»

[04:31] <Zoffix> m: (^6).^lookup("max").file.say

[04:31] <camelia> rakudo-moar cb2ea9328: OUTPUT: «SETTING::src/core/Range.pm6␤»

[04:31] <geekosaur> no,m that's just hopw I found it, I think

[04:31] <geekosaur> no, that's just how I found it, I think

[04:32] <Zoffix> looks like just a glitch in the bot; the last eval shows right file

[04:32] <geekosaur> nothing about how it's defined necessarily, just showing how I went looking for it, then copied the link on the result page

[04:32] <geekosaur> oh

[04:32] <geekosaur> you mean the source bot

[04:32] <Zoffix> Yeah

[04:41] *** Xliff left
[04:42] <Summertime> is it possible to use a grammar in a way similar to a regex? (e.g. finding multiple matches against TOP a la m/regex/)

[04:43] <Summertime> or would the best option be to shuffle all my regexes off to a seperate module?

[04:44] *** Kaiepi joined
[04:44] <Kaiepi> m: my $g = my grammar { has $.foo is rw; token TOP { [<a> | <b(1)>] c }; token a { a }; method b(Int $foo) { $!foo = $foo; Match.new } }; $g.parse('c'); say $g.foo

[04:44] <camelia> rakudo-moar cb2ea9328: OUTPUT: «Cannot look up attributes in a <anon|1> type object␤  in method foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[04:44] <Kaiepi> how are attributes in grammars meant to be used?

[04:45] <Kaiepi> oh wait

[04:45] <Kaiepi> m: my $g = my grammar { has $.foo is rw; token TOP { [<a> | <b(1)>] c }; token a { a }; method b(Int $foo) { $!foo = $foo; Match.new } }.new; $g.parse('c'); say $g.foo

[04:45] <camelia> rakudo-moar cb2ea9328: OUTPUT: «(Any)␤»

[04:53] <Zoffix> m: grammar Foo { token TOP { <bar> | \d+ }; token bar { 'bar' } };  say "bar 42 500" ~~ /<Foo::TOP>/

[04:53] <camelia> rakudo-moar cb2ea9328: OUTPUT: «｢bar｣␤ Foo::TOP => ｢bar｣␤  bar => ｢bar｣␤»

[04:53] <Zoffix> m: grammar Foo { token TOP { <bar> | \d+ }; token bar { 'bar' } };  say "bar 42 500" ~~ /<Foo::bar>/

[04:53] <camelia> rakudo-moar cb2ea9328: OUTPUT: «｢bar｣␤ Foo::bar => ｢bar｣␤»

[04:53] <Zoffix> Summertime: ^ is that what you mean?

[04:54] <Zoffix> Kaiepi: `method b(Int $foo) { $!foo = $foo;` can just be written as `method b(Int $!foo) {`

[04:54] <Kaiepi> yeah, it threw when i tried that

[04:54] <Zoffix> m: my $g = my grammar { has $.foo is rw; token TOP { [<a> | <b(1)>] c }; token a { a }; method b(Int $!foo) { Match.new } }.new; $g.parse('c'); say $g.foo

[04:54] <camelia> rakudo-moar cb2ea9328: OUTPUT: «(Any)␤»

[04:55] <Kaiepi> weird

[04:55] <Kaiepi> lemme see which expression i tried that threw

[04:56] <Zoffix> m: grammar Foo { token TOP { <bar> | \d+ }; token bar { 'bar' } };  say "bar 42 500" ~~ /<meows=.Foo::bar>/

[04:56] <camelia> rakudo-moar cb2ea9328: OUTPUT: «｢bar｣␤ meows => ｢bar｣␤»

[04:56] <Zoffix> Summertime: ^ can also rename what the capture captures as like that ^

[04:56] <Kaiepi> my $g = my grammar { has $.foo; token TOP { a <a: 1> }; method a(Int $!foo) {} }.new; $g.parse('a')

[04:56] <Kaiepi> m: my $g = my grammar { has $.foo; token TOP { a <a: 1> }; method a(Int $!foo) {} }.new; $g.parse('a')

[04:56] <camelia> rakudo-moar cb2ea9328: OUTPUT: «Cannot look up attributes in a Nil type object␤  in regex TOP at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[04:57] <Kaiepi> oh wait it's not returning a match

[04:57] <Zoffix> Yeah, I think that's what's making it unhappy

[04:57] <Kaiepi> m: my $g = my grammar { has $.foo; token TOP { a <a: 1> }; method a(Int $!foo) { Match.new } }.new; $g.parse('a')

[04:57] <camelia> rakudo-moar cb2ea9328: ( no output )

[04:58] <Kaiepi> yeah that's it

[04:59] *** Zoffix left
[04:59] <Summertime> Zoffix, exactly what I meant, thanks greatly!

[06:05] *** robertle joined
[06:10] *** phogg left
[06:24] *** jmerelo joined
[06:24] <jmerelo> releasable6: status

[06:24] <yoleaux> 01:36Z <uzl> jmerelo: That sounds like a good idea but I'm not sure how to gather helpers. That's the main reason why I put it in the open (well, on #perl6) for if anyone is interested.

[06:24] <yoleaux> 01:37Z <uzl> jmerelo: Not I haven't used any professional software. All the translation was done manually, albeit consulting multiple sources such as dictionaries, thesaurus, wikipedia entries, etc.

[06:25] <releasable6> jmerelo, Next release will happen when it's ready. 4 blockers. 0 out of 234 commits logged (⚠ 79 warnings)

[06:25] <releasable6> jmerelo, Details: https://gist.github.com/297fec140641a8658ea61e468d163185

[06:27] <jmerelo> .tell uzl for big translations, using some software really helps speed up the process

[06:27] <yoleaux> jmerelo: I'll pass your message to uzl.

[06:28] *** Kaiepi left
[06:29] *** AlexDaniel left
[06:29] *** AlexDaniel joined
[06:30] *** Kaiepi joined
[06:32] <Geth> ¦ doc: 950b22cbaa | (JJ Merelo)++ | doc/Language/syntax.pod6

[06:32] <Geth> ¦ doc: Fixing arithmetics.

[06:32] <Geth> ¦ doc: 

[06:32] <Geth> ¦ doc: And some reflow. Closes #2204, which is absolutely correct. Thanks!

[06:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/950b22cbaa

[06:32] <synopsebot> Link: https://doc.perl6.org/language/syntax

[06:33] *** fake_space_whale left
[06:35] *** Sgeo joined
[06:38] *** Sgeo_ left
[06:46] *** warriors left
[07:04] *** phogg joined
[07:04] *** phogg left
[07:04] *** phogg joined
[07:05] *** phogg left
[07:07] *** phogg joined
[07:07] *** phogg left
[07:07] *** phogg joined
[07:07] *** quester left
[07:30] *** jerome__ joined
[07:34] *** jeromelanteri left
[07:39] *** sena_kun joined
[07:43] *** epony joined
[07:52] *** SteffanW joined
[07:58] *** wamba joined
[08:06] *** SteffanW left
[08:10] *** araraloren joined
[08:10] <xinming> I saw thtat we can do   does to the object,  Is it possible to undo that?  I mean strip the role off the object.

[08:11] <xinming> let me try

[08:11] <masak> xinming: you can use `but` and keep the original

[08:14] <xinming> Thanks...

[08:14] <xinming> Perl6 will be the language lasting for centuries...

[08:14] <xinming> our slogan. :-)

[08:14] <xinming> I understand why people say 'perl cult'...

[08:15] <araraloren> What does the mixin working ? Is it modify the original object or create a new object ?

[08:17] *** pecastro joined
[08:17] <masak> xinming: I don't need it to last for centuries, I just want to be able to run it on my phone :P

[08:18] <masak> araraloren: `does` modifies the original, `but` clones and then modifies the clone

[08:18] <araraloren> masak sweet

[08:19] <araraloren> you mean on android ?

[08:19] <masak> yeah, sure.

[08:19] <masak> heck, if it only worked on Windows Phone, I'd consider buying one

[08:19] <araraloren>  oh, does someone working on that ?

[08:20] <araraloren> porting to android

[08:20] *** psychoslave joined
[08:20] <xinming> You can compile perl6 to js. and run in browswer of your phone. :-)

[08:21] <araraloren> yeah, I see. How about on native of Android ?

[08:22] <masak> m: sub mitosis($s1, $s2) { zip($s1.comb, $s2.comb)>>.pick.join }; say mitosis("masak", "sweet") xx 10

[08:22] <camelia> rakudo-moar cb2ea9328: OUTPUT: «(maeat sweek sweak mwsat mweat maeet maeet saset mweet maset)␤»

[08:22] <masak> sweek!

[08:22] * masak is apparently a bioinformaticist

[08:24] <stmuk> araraloren: I've heard of android ports under debian/libfakeroot (no root needed)

[08:24] <araraloren> oh, stmuk 

[08:25] <masak> I mean, I have Python on my phone, so why not Perl 6

[08:26] <araraloren> Hmm, perl 5 can run on the phone ?

[08:27] <stmuk> I think you can just apt install perl on one of the play store's debians

[08:28] <araraloren> oh

[08:28] <masak> wait, "one of the play store's debians"? o.O

[08:28] <masak> I feel like I walked in on an alternate plot line here

[08:29] <araraloren> yeah, atually I am not understand what he said :(

[08:30] * masak immediately finds "debian noroot" in the app store

[08:33] <stmuk> maybe people favour this one now (not sure)

[08:33] <stmuk> https://play.google.com/store/apps/details?id=com.termux

[08:36] <stmuk> https://termux.com/

[08:37] <stmuk>  Up-to-date versions of Perl, Python, Ruby and Node.js are all available.

[08:50] <masak> ooh

[08:52] <masak> stmuk: ...wow, that works beautifully. thank you.

[08:52] <masak> you've made my day :>

[08:52] <masak> still, I'd also like Perl 6 on there :)

[09:00] <El_Che> masak: https://github.com/termux/termux-packages

[09:01] <El_Che> masak: I guess you'll bump against rakudo not being relocatable

[09:02] <El_Che> it doesn't look like it does a chroot or similar

[09:03] *** benjikun left
[09:05] <stmuk> I think it's roughly like chroot

[09:05] <stmuk> https://proot-me.github.io/ and https://packages.debian.org/sid/libfakeroot

[09:06] <stmuk> I need to try a rakudo build

[09:10] *** xinming_ joined
[09:13] *** xinming left
[09:13] *** HaraldJoerg joined
[09:21] *** spycrab0 joined
[09:30] *** psychoslave left
[09:33] *** skids joined
[09:36] *** jerome__ left
[09:41] *** pmurias joined
[09:50] <jmerelo> Help with this? https://stackoverflow.com/questions/51463535/syntax-of-the-method-of-an-instantiated-object-cant-seem-to-get-it-right

[09:51] *** kaare_ joined
[09:57] *** Zoffix joined
[09:58] <Zoffix> jmerelo: .^lookup

[09:58] <moritz> I'll answer

[09:59] <Zoffix> m: class Foo { has $thing = "baz"; method bar() { say $thing } }; sub quux( Callable $flimflam ) { $flimflam() }; my $foo = Foo.new; quux $foo.^lookup('bar').assuming: $foo;

[09:59] <camelia> rakudo-moar cb2ea9328: OUTPUT: «baz␤»

[09:59] <Zoffix> The .assuming bit is just to stick the invocant as the first arg. 

[10:00] <Zoffix> The .^lookup returns the Method object that you can call, but you need to give it a valid arg to use as an invocant.

[10:01] <Zoffix> There's also .^can that gives a list of methods, walking the MRO

[10:01] <Zoffix> and .cando method that takes a Capture and gives a sorted list of candidates that can handle those args

[10:01] *** lizmat left
[10:02] *** skids left
[10:02] <jmerelo> moritz, zoffix: thanks.

[10:03] <jmerelo> moritz, zoffix: no simpler syntax, right? You simply have to go through the MOP. 

[10:03] <araraloren> I think no simple syntax

[10:03] <Zoffix> Looks fairly simple as is :)

[10:04] *** Ven`` joined
[10:04] <jmerelo> moritz, zoffix: as a workaround I simply defined a pointy block around that... 

[10:04] <moritz> well, in python it's simpler

[10:04] <Zoffix> moritz: what is it in python?

[10:04] <moritz> in python, foo.bar() calls the method, and foo.bar returns the method bound to foo

[10:04] <Zoffix> Ah

[10:04] <araraloren> is python support multi candidates ?

[10:05] * Zoffix rather use the .^lookup and #DeathToParens on regular calls

[10:06] <Zoffix> jmerelo: that sounds good too. It doesn't have to be pointy; {$obj.meth} does the trick too

[10:10] *** ilogger2 joined
[10:10] *** ChanServ sets mode: +v ilogger2

[10:22] <jmerelo> Zoffix: thanks

[10:24] *** rindolf joined
[10:24] <moritz> anything missing from my SO answer?

[10:27] <Zoffix> moritz: yes, the closing parentheses in the first sentence

[10:27] <Zoffix> :)

[10:30] <moritz> fixed, and linkified lookup

[10:47] <jmerelo> And another one: https://stackoverflow.com/questions/51464303/pick-not-supported-on-a-mix

[10:49] <jmerelo> pick is apparently still in Baggy https://github.com/rakudo/rakudo/blob/7629820461d9a9079289c04340bf8cf63a1548ca/src/core/Baggy.pm6

[10:49] *** reportable6 joined
[10:49] *** ChanServ sets mode: +v reportable6

[10:50] <jmerelo> And Mixy does Baggy but does not support pick? https://github.com/rakudo/rakudo/blob/7629820461d9a9079289c04340bf8cf63a1548ca/src/core/Mixy.pm6

[10:51] *** Zoffix joined
[10:51] *** SteffanW joined
[10:52] <Zoffix> jmerelo: that's a bit of a silly SO question, innit? The error is fairly explanatory

[10:53] <jmerelo> Zoffix: yep, but I wonder why. It's implementing that role, but overriding some functions and printing errors. It's more of a documentation question, I guess.

[10:54] <jmerelo> Zoffix: I've rephrased the question.

[10:56] <jmerelo> Zoffix: I mean, by looking at the source I see I should use roll, instead of pick. But It's not clear to me why that's so.

[10:58] <Zoffix> jmerelo: .roll and .pick are different features.

[10:59] <Zoffix> jmerelo: .pick requires removal of probabilities from the original, but you got non-integral weights and there's nothing to remove. It's like picking apples from a bag vs. picking paint from a can of paint.

[11:00] <jmerelo> Zoffix: OK. 

[11:00] <jmerelo> Zoffix: so maybe the Baggy role should be divided into two different roles. Pickable and Rollable. Or just put pick on its very own role.

[11:01] <jmerelo> Zoffix: I'll put an issue in the documentation to fix that.

[11:06] <jmerelo> If you are going to attend TPC in Glasgow, maybe you'd be interested in joining the perl6/doc BoF http://act.perlconference.org/tpc-2018-glasgow/wiki?node=Perl6%20documentation%20BoF

[11:13] <Geth> ¦ doc/mixy-meth: c32b4b35b2 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Mixy.pod6

[11:13] <Geth> ¦ doc/mixy-meth: Document Mixy.pick/.grab/.kxxv

[11:13] <Geth> ¦ doc/mixy-meth: 

[11:13] <Geth> ¦ doc/mixy-meth: Potential fix for D#2205 https://github.com/perl6/doc/issues/2205

[11:13] <Geth> ¦ doc/mixy-meth: pending resolution of https://github.com/rakudo/rakudo/issues/2109

[11:13] <Geth> ¦ doc/mixy-meth: review: https://github.com/perl6/doc/commit/c32b4b35b2

[11:13] <synopsebot> D#2205 [open]: https://github.com/perl6/doc/issues/2205 [docs][update] Document overriden roles in Mixy

[11:15] *** markoong joined
[11:16] <jmerelo> Zoffix++

[11:17] <jmerelo> releasable6: status

[11:17] <releasable6> jmerelo, Next release will happen when it's ready. 4 blockers. 0 out of 234 commits logged (⚠ 79 warnings)

[11:17] <releasable6> jmerelo, Details: https://gist.github.com/fd4aa1d9b697577d035254aa949f1ed6

[11:25] <Zoffix> jmerelo: what's "BoF"?

[11:25] <jmerelo> Zoffix: Birds of a Feather. Kinda workshop-inside-a-conference

[11:26] <Zoffix> ah

[11:26] <jmerelo> Zoffix: will you be attending?

[11:28] <Zoffix> No. I only attend things in Canada within 12-hour driving distance.

[11:29] <jmerelo> Zoffix: Glasgow is definitely not withing that range. Unless you drive jets.

[11:43] *** kaare__ joined
[11:44] *** Zoffix left
[12:12] *** xtreak joined
[12:20] *** Ven`` joined
[12:21] *** xtreak left
[12:27] <tbrowder_> Zoffix: any interest in your area for a p6 gathering of some kind? would the Toronto PM be interested in hosting some kind of thng like the recent NL workshop!

[12:27] <tbrowder_> s/!/?/

[12:28] <tbrowder_>  i keep seeing stats on most p6 people are in NA but where are they?

[12:30] <tbrowder_> i feel like the lone ranger sometimes. util is the closest one to me i know of and he’s about 200+ miles away.

[12:33] <Geth> ¦ doc: mienaikage++ created pull request #2206: Add WinCompose to unicode_entry

[12:33] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2206

[12:44] *** curty joined
[12:47] *** curty left
[12:56] *** gabiruh joined
[13:00] *** rindolf left
[13:00] <ecocode> zef seems to install modules in $HOME/.perl6.  But the structure of that directory is full of unreadable directories.  How can I locate the directory in which a particular module has been installed?

[13:02] *** luffysenpai joined
[13:03] <El_Che> ecocode: that not zef, but rakudo sha1 dirs for precompiled modules

[13:04] <ecocode> well I found zef locate should show the dir but it doesn't

[13:04] <ecocode> zef locate Cro::HTTP

[13:04] <jnthn> Seems to do so for me

[13:04] <ecocode> ===> From Distribution: Cro::HTTP:ver<0.7.6.1>:auth<>:api<>

[13:04] <jnthn> Cro::HTTP is a distribution, not a module

[13:04] <luffysenpai> Hello Zoffix

[13:04] <jnthn> Try `zef locate Cro::HTTP::Auth` for example

[13:04] <ecocode> ah

[13:05] <ecocode> jnthn: works!

[13:05] <ecocode> thx !

[13:05] <ecocode> El_Che: learned something ;)

[13:05] <luffysenpai> Guys the pre-existing modules for the russian txt are down

[13:06] <El_Che> ecocode: I am sure there are pretty good reasons for the SHA1 thing, but not a fan. I am always confused as you are :)

[13:08] <jnthn> ecocode: Also note that while you can use this to look at what the source of an installed module is, you can't expect to edit the source files and have the changes take effect. An installation repository will go for the precompiled bytecode.

[13:08] <jnthn> The source is retained mostly for the purpose of being able to generate updated precompilations upon Rakudo upgrades.

[13:08] <El_Che> ecocode: most of the time I end up nuking ~/.perl6 and reinstall stuff

[13:10] <jnthn> If wanting to tinker with a module, grab a checkout of its source, and then stick -Ipath/to/that/source and that source version will take priority over the installed one.

[13:11] <ecocode> jnthn: ok

[13:12] <ecocode> I wanted to be sure I had the latest source from git repo.

[13:12] <ecocode> so the locate thing was ok for that

[13:13] <ecocode> good to know about the -I priority stuff though

[13:14] *** rindolf joined
[13:16] *** Ven`` left
[13:17] *** konsolebox joined
[13:21] *** kaare__ left
[13:22] *** luffysenpai left
[13:25] <ecocode> El_Che: I'm learning perl6 and cro simultaneously.. it ain't an easy path ;)

[13:26] <Kaiepi> cro looks really neat

[13:26] <ecocode> and I added Koos to the list

[13:27] <Kaiepi> what are you working on?

[13:28] *** gabiruh left
[13:28] <El_Che> ecocode: good choice. I approve :)

[13:28] <pmurias> nqp-truffle now passes 19 nqp test files :)

[13:28] <ecocode> Kaiepi: writing a test app

[13:28] <ecocode> hoping to setup a REST API to my mysql db

[13:29] <El_Che> pmurias: with graalvm being so fast, has your port the potential to be faster than rakudo?

[13:29] <ecocode> then add frontend with probably vuejs

[13:29] <ecocode> but that is far far away

[13:30] <Kaiepi> nice

[13:37] <Geth> ¦ doc: d60553a801 | (Daniel Mita)++ | doc/Language/unicode_entry.pod6

[13:37] <Geth> ¦ doc: Add WinCompose to unicode_entry

[13:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d60553a801

[13:37] <Geth> ¦ doc: ea00aa4e4e | (Daniel Mita)++ | doc/Language/unicode_entry.pod6

[13:37] <Geth> ¦ doc: Remove WinCompose unicode code point paragraph

[13:37] <synopsebot> Link: https://doc.perl6.org/language/unicode_entry

[13:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ea00aa4e4e

[13:37] <Geth> ¦ doc: cd3bb6523a | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | doc/Language/unicode_entry.pod6

[13:37] <Geth> ¦ doc: Merge pull request #2206 from mienaikage/wincompose

[13:37] <Geth> ¦ doc: 

[13:37] <Geth> ¦ doc: Add WinCompose to unicode_entry

[13:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/cd3bb6523a

[13:39] *** jameslenz joined
[13:39] *** mscha joined
[13:39] <pmurias> El_Che: rakudo-truffle being a lot faster then rakudo-moarvm currently is the plan

[13:42] <mscha> m: my $start = now; say await (0..5).map(-> $i { start { say "a$i"; sleep $i/5; say "b$i"; $i } }); say (now - $start).fmt('%.2f'), 's'

[13:42] <camelia> rakudo-moar cb2ea9328: OUTPUT: «a0␤b0␤a1␤a2␤a3␤a4␤a5␤b1␤b2␤b3␤b4␤b5␤(0 1 2 3 4 5)␤1.07s␤»

[13:42] <mscha> m: my $start = now; say await (0..5).map(-> $i { start { slip gather { say "a$i"; sleep $i/5; say "b$i"; take $i } } }); say (now - $start).fmt('%.2f'), 's'

[13:42] <camelia> rakudo-moar cb2ea9328: OUTPUT: «a0␤b0␤a1␤b1␤a2␤b2␤a3␤b3␤a4␤b4␤a5␤b5␤(0 1 2 3 4 5)␤3.01s␤»

[13:42] <Kaiepi> oh, i was wondering what that was about

[13:42] <mscha> Any idea why the second example doesn't run concurrently?

[13:43] <mscha> The `gather` appears to break concurrency.

[13:43] *** xtreak joined
[13:47] *** Ven`` joined
[13:52] *** aborazmeh joined
[13:52] *** aborazmeh left
[13:52] *** aborazmeh joined
[14:01] *** aborazmeh left
[14:03] *** MilkmanDan joined
[14:05] <pmurias> El_Che: performance is hard to make super solid predictions about, as it involves complex systems full of heuristics

[14:10] <El_Che> pmurias: hard core :)

[14:15] <jnthn> mscha: gather is lazy, the Promise evaluates to a lazy thing, and it's evaluated upon the assignment into the array after the `await`

[14:15] <jnthn> mscha: Try putting an "eager" in before the `gather`

[14:25] *** pmurias joined
[14:26] *** rindolf left
[14:27] *** rindolf joined
[14:28] <mscha> m: my $start = now; say await (0..5).map(-> $i { start { slip eager gather { say "a$i"; sleep $i/5; say "b$i"; take $i } } }); say (now - $start).fmt('%.2f'), 's'

[14:28] <camelia> rakudo-moar cb2ea9328: OUTPUT: «a0␤b0␤a1␤a2␤a3␤a4␤a5␤b1␤b2␤b3␤b4␤b5␤(0 1 2 3 4 5)␤1.07s␤»

[14:28] <mscha> jnthn, thanks, clear!

[14:40] <pmurias> El_Che: but the general idea is as Truffle is good at running things that where designed without regards to how they can be optimized it likely will be a good fit for Perl 6

[14:40] <El_Che> pmurias: an universal VM like parrot wanted to be?

[14:41] <pmurias> it's what parrot was intended to be

[14:43] <pmurias> only instead of providing an ill fitting set of ops they give you a toolset to build your own JIT that can be combined efficently with others

[14:46] <moritz> sounds a bit likey pypy

[14:48] <pmurias> moritz: same goal, different implementation

[14:48] *** zakharyas joined
[14:48] <pmurias> plus Truffle/GraalVM is being pushed by a huge corporation planning on grabbing a bunch of markets

[14:50] <moritz> and typically the second project to try something like this can learn something from the first :-)

[14:51] <xinming_> anyone here knows how I can do perlito6 to compile perl6 code to js?

[14:53] <xinming_> I'm in perlito git repo, and in src6, I run perl6 -Ilib util/perlito6.pl

[14:53] *** kaare__ joined
[14:53] <xinming_> It seems missing modules.

[14:56] *** molaf joined
[14:57] <xinming_> ignore me, I got some clues, will try more

[14:58] *** warriors joined
[15:04] *** zakharyas left
[15:09] *** zakharyas joined
[15:09] *** [particle] joined
[15:14] *** [particle] left
[15:16] *** [particle] joined
[15:20] *** xtreak left
[15:21] *** xi- joined
[15:21] *** araraloren_ joined
[15:23] *** MilkmanDan left
[15:23] *** araraloren__ joined
[15:24] *** MilkmanDan joined
[15:26] *** araraloren__ left
[15:26] *** araraloren_ left
[15:30] *** xtreak joined
[15:31] *** xtreak left
[15:42] *** konsolebox left
[15:48] <timotimo> i always use the online version of perlito6 to do it

[15:48] <timotimo> https://fglock.github.io/Perlito/perlito/perlito6.html

[15:48] <timotimo> xinming_: ^

[15:54] *** subroot joined
[15:55] *** Ven`` left
[16:03] <stmuk> .

[16:12] *** fake_space_whale joined
[16:17] <Geth> ¦ doc: 06b068dda4 | (JJ Merelo)++ | doc/Language/functions.pod6

[16:17] <Geth> ¦ doc: Eliminates indentation

[16:17] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/06b068dda4

[16:17] <synopsebot> Link: https://doc.perl6.org/language/functions

[16:19] <xinming_> timotimo: THanks, I just wish to write do some testing on write somecode in perl6 for browser

[16:20] *** fake_space_whale left
[16:24] *** Zoffix joined
[16:24] <Zoffix> luffysenpai, what do you mean? Which modules are down?

[16:24] <yoleaux> 12:16Z <jnthn> Zoffix: In various places, Mu is treated as "don't even type check this", which is why we can use it to pass around non-Perl 6 types (e.g. NQP types, VM-provided objects). So that sounds like a win. But then if we have `sub foo(Int $i) { }` then it spots Int !~~ Iterable and Iterable !~~ Int and then emits code that just deconts any incoming value but does *not* wrap it up in a readonly Scalar. For

[16:24] <yoleaux> 12:18Z <jnthn> Zoffix: So far as spesh goes, it will try to eliminate whatever type checks it can, usually replacing them with much cheaper deopt guards. In some cases, it do one guard of something and then avoid re-checking later, so removing type checks from whole chains of calls.

[16:24] <yoleaux> 12:21Z <jnthn> Zoffix: In summary, you stand to get better memory behavior with declaring the types, and in places where the default would be Any then it's all the same to spesh, so Any has no performance benefit over Int.

[16:24] <Zoffix> Thanks.

[16:34] *** fake_space_whale joined
[16:34] *** andrzejku joined
[16:35] <andrzejku> hi all

[16:36] <Geth> ¦ doc/coke/build: 926c8df9f6 | (Will "Coke" Coleda)++ | 2 files

[16:36] <Geth> ¦ doc/coke/build: add standard progress bar

[16:36] <Geth> ¦ doc/coke/build: review: https://github.com/perl6/doc/commit/926c8df9f6

[16:40] <buggable> New CPAN upload: Chart-Gnuplot-0.0.6.tar.gz by TITSUKI http://modules.perl6.org/dist/Chart::Gnuplot:cpan:TITSUKI

[16:41] <Zoffix> \o

[16:42] *** mscha left
[16:44] <andrzejku> Zoffix: we will copy your doc style

[16:44] <andrzejku> Zoffix: I hope you will be no angry

[16:46] <Kaiepi> qemu has blazing fast speed for testing builds

[16:46] <Kaiepi> Stage parse      : 1481.007

[16:48] <Kaiepi> some time tonight we'll see if there are any issues on netbsd at least

[16:48] <ownTheLibs>  hmmmmm...

[16:48] <ownTheLibs> I did according to the instructions on the rakudo-pkg github page

[16:49] <ownTheLibs>  The repository 'https://dl.bintray.com/nxadm/rakudo-pkg-debs sarah Release' does not have a Release file.

[16:49] <ownTheLibs> N: Data from such a repository can't be authenticated and is therefore potentially dangerous to use.

[16:49] <ownTheLibs> that's the error I get after executing the three lines

[16:50] <ownTheLibs> on Linux Mint, that's Ubu/Debian compatible

[16:51] *** robertle joined
[16:52] <Zoffix> El_Che: ^ are you around?

[16:52] <Zoffix> andrzejku: knock yourself out

[16:52] <mst> andrzejku: just everybody who has to read it

[16:52] * mst runs

[16:53] <andrzejku> Zoffix: what that mean?

[16:53] <mst> andrzejku: hea means "go for it"

[16:53] <andrzejku> mst: ok thnks

[16:53] <mst> andrzejku: and I was just being silly

[16:54] <Zoffix> andrzejku: https://idioms.thefreedictionary.com/knock+yourself+out

[16:59] <Zoffix> ownTheLibs: installs for me on Bodhi Linux, but it's using "trusty Release" for the stuff. Doesn't look like `sarah` is available: https://dl.bintray.com/nxadm/rakudo-pkg-debs/dists/

[16:59] <Zoffix> ownTheLibs: El_Che is the author of those packages. They should be able to make builds for Mint too

[17:00] <Zoffix> ownTheLibs: you could use docker `docker pull rakudo-star` from source: https://rakudo.org/files/star/source

[17:01] <Zoffix> ownTheLibs: that's for Rakudo Star distribution that includes some modules. If you want the compiler-only (slightly newer), the instructions are these: https://rakudo.org/files/rakudo/source

[17:07] *** zakharyas left
[17:09] *** zakharyas joined
[17:10] <ownTheLibs> Zoffix: thanks will look into the docker

[17:11] <ownTheLibs> would need to learn the system first, but anyways

[17:12] <Zoffix> ownTheLibs: I missed some words in that sentence. Should've been "you could use docker `docker pull rakudo-star` or build from source: https://rakudo.org/files/star/source"  

[17:13] <Zoffix> The docker page is this: https://hub.docker.com/_/rakudo-star/   

[17:13] <Zoffix> Don't know docker either. I just build the compiler from source.

[17:13] <El_Che> ownTheLibs: it looks like an error in the instructions

[17:13] <El_Che> ah mint, I see

[17:14] *** noganex joined
[17:14] <El_Che> if it's based on Ubuntu 18.04 "deb https://dl.bintray.com/nxadm/rakudo-pkg-debs bionic main" will work

[17:18] <El_Che> Linux mint was based on 16.04

[17:19] <El_Che> so, you would use "xenial" instead of "bionic"

[17:19] *** Zoffix left
[17:19] <El_Che> https://en.wikipedia.org/wiki/Linux_Mint_version_history

[17:23] <ownTheLibs> aye will try changing that

[17:24] <ownTheLibs> altho I think sarah should work?

[17:24] <El_Che> I am looking at the bintray api if I can create an alias (no way on the ui)

[17:25] <ownTheLibs> now it seems to install it!

[17:28] <El_Che> I should be able to add the mint codenames

[17:29] <ecocode> if I want to add my own methods to a Role roleA from a cpan module, should I create a new roleB which somehow 'does RoleA' ?

[17:32] <El_Che> ownTheLibs: I added build support for mint, will see with the next release of the packages are correctly upgraded to the repo

[17:32] <El_Che> ownTheLibs: for now use the corresponding ubuntu name

[17:32] <El_Che> https://en.wikipedia.org/wiki/Linux_Mint_version_history

[17:37] <xinming_> Is perl6 function concator uses  o  as infix?

[17:37] <xinming_> if so, it's not defined in rakudo. :-)

[17:38] <xinming_> it's defined, I know where the mistake is

[17:39] <ownTheLibs> El_Che: thanks, it was solved by doing s/sarah/xenial/

[17:39] <El_Che> yes, but I changed the upload mechanisch to create sarah and co on the repo

[17:40] <timotimo> "feel free"

[17:40] <timotimo> oh i was scrolled up

[17:40] <El_Che> so in the next releases it should work out of the box

[17:40] <ownTheLibs> nice

[17:42] *** Sgeo_ joined
[17:46] *** SteffanW left
[17:57] <Kaiepi> where can i get a list of flapper tests?

[17:58] <AlexDaniel> Kaiepi: oh… hmm

[17:59] <AlexDaniel> quotable6: ZOFF?LOP

[17:59] <quotable6> AlexDaniel, OK, working on it! This may take up to three minutes (4582161 messages to process)

[18:00] <quotable6> AlexDaniel, 224 messages (2017-04-14⌁2018-04-28): https://gist.github.com/20546e30a6d33a518b60232e9845eda1

[18:00] <Kaiepi> sweet thanks

[18:00] <AlexDaniel> Kaiepi: note that it doesn't include the most recent ones

[18:00] <AlexDaniel> because https://irclog.perlgeek.de/ went down

[18:01] <AlexDaniel> the bot should be tweaked to use http://colabti.org/ instead

[18:01] <AlexDaniel> I guess…

[18:03] <Kaiepi> oh

[18:04] <AlexDaniel> it's a good list anyway

[18:04] *** pioneer42 joined
[18:04] *** zakharyas left
[18:08] *** [particle] left
[18:08] *** [particle] joined
[18:11] *** sivoais joined
[18:11] *** pioneer42 left
[18:12] *** domidumont joined
[18:14] *** pmurias left
[18:18] *** domidumont left
[18:18] *** domidumont joined
[18:19] *** zakharyas joined
[18:20] *** pmurias joined
[18:26] <Kaiepi> timotimo ++ on that io::socket::async commit

[18:27] <Kaiepi> working out how to get the server's fd's without being hacky's been the only thing keeping me from pullreqing

[18:30] <timotimo> <3

[18:31] <timotimo> jmaslak++ for nudging WRT the port thing

[18:32] *** andrzejku left
[18:33] *** spycrab0 joined
[18:38] <timotimo> would be good to know if it actually works right in every conceivable situation

[18:39] <timotimo> i really only tested successful invocations (because it's hard to get a "port already in use" when using port 0)

[18:39] <timotimo> oh, hm, my test code might actually not have been corretc!

[18:40] <El_Che> port 0?

[18:41] <timotimo> seems to work!

[18:41] <timotimo> yup, port 0 asks the OS to give you a random free port to bind to

[18:41] <timotimo> you were already able to use it, but you had no simple way to figure out what port you got

[18:41] <El_Che> really?

[18:41] <timotimo> it's true!

[18:41] <El_Che> something on the OS level or rakudo specific?

[18:42] <timotimo> the problem was rakudo specific

[18:42] <timotimo> required changes in moarvm, nqp (for the java impl) and rakudo (to actually use the info it got)

[18:42] <El_Che> sudo sshd -p 0

[18:42] <El_Che> Bad port number.

[18:43] <timotimo> that's probably sshd refusing to accept 0

[18:43] <timotimo> but when you pass 0 to the bind function at the C level, it'll do what i described

[18:43] <El_Che> interesting

[18:44] <timotimo> i think this also usually happens for the local port when you connect to a server socket

[18:44] <timotimo> i.e. you hardly ever have to worry about what port to use locally for an outgoing connection

[18:44] <El_Che> timotimo: indeed, nc does it

[18:44] <El_Che> nc -l 0

[18:44] <El_Che> TCP *:46515 (LISTEN)

[18:47] *** Sgeo_ left
[18:51] <robertle> reminds me of something else: when binding a port through rakudo, I seem to be able to bind to only an ipv4 or an ipv6 interface, but not to both at the same time like I get with a posix bind()

[18:53] <robertle> so for example listen('localhost', 1234) will bind to ::1 on this machine, and to 127.0.0.1 at work, depending on system configuration. how can I bind to a port, but not to a specific address?

[18:53] <robertle> this would also cause trouble opn multi-address machines independently of ipv4/ipv6...

[19:01] <robertle> well, the

[19:01] <Kaiepi> just binding to ::1 causes trouble on mine

[19:01] <Kaiepi> i have to use 127.0.0.1 instead of localhost

[19:01] <robertle> latter is a bit different, ignore that. but in general it seems strange that you have to supply a hostname

[19:02] <robertle> Kaiepi: I guess if you do that then you cannot connect remotely? with 0.0.0.0 you can connect remotely, but not over ipv6...

[19:04] <Kaiepi> nope, my network doesn't support ipv6

[19:04] *** zakharyas left
[19:04] <Kaiepi> i'm planning on getting a 6to4 tunnel set up though

[19:05] *** zakharyas joined
[19:05] <Geth> ¦ ecosystem: b7900214c4 | (Fernando Correa de Oliveira)++ (committed using GitHub Web editor) | META.list

[19:05] <Geth> ¦ ecosystem: Add SeqSplitter to the ecosystem

[19:05] <Geth> ¦ ecosystem: 

[19:05] <Geth> ¦ ecosystem: Adding https://github.com/FCO/SeqSplitter to the ecosystem

[19:05] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/b7900214c4

[19:05] <robertle> heh, I have the opposite problem: you can't get ipv4 connected (both ways) internet anymore...

[19:10] *** domidumont left
[19:11] *** damaxi joined
[19:19] *** vrurg joined
[19:35] *** Kaiepi joined
[19:42] *** HaraldJoerg1 joined
[19:44] *** plutes joined
[19:47] *** psychoslave joined
[20:04] *** zakharyas left
[20:08] *** dct joined
[20:11] *** dct left
[20:21] *** zakharyas joined
[20:23] *** [Sno] joined
[20:31] *** Kaiepi left
[20:31] *** Kaiepi joined
[20:39] *** psychoslave left
[20:44] <Kaiepi> netbsd's failing a lot of tests in the stresstest so far

[20:44] <Kaiepi> 9 tests and it's around a third of the way through

[20:46] *** cognominal joined
[20:47] *** damaxi left
[20:54] *** zakharyas left
[20:54] *** pmurias left
[20:55] <Kaiepi> 5 not being floppers

[20:58] *** damaxi joined
[21:01] *** brrt joined
[21:01] <brrt> \o #perl6

[21:01] <brrt> what is the correct way to install p6doc

[21:01] <brrt> i'm trying to do this with zef, and I can't

[21:04] *** damaxi left
[21:07] *** MasterDuke joined
[21:11] <warriors> what errors are u getting

[21:15] *** eliasr joined
[21:15] *** cognominal left
[21:16] *** cognominal joined
[21:22] <brrt> lemmesee

[21:23] <brrt> Aborting due to build failure: p6doc:ver<1.001001> (use --force-build to override)

[21:23] <brrt>  

[21:33] <warriors> which Perl6 version do you have

[21:33] <warriors> to cut it short

[21:36] *** molaf left
[21:36] <warriors> i know they p6doc can fail because of some test that depend on perl6 2018 c

[21:36] <warriors> so upgrade to the latest Perl6 2018.c 

[21:36] <warriors> and try again

[21:36] <warriors> :)

[21:37] *** Zoffix joined
[21:37] <Zoffix> brrt: zef update

[21:41] <brrt> i'll try zoffix

[21:42] <brrt> nope, that doesn't work

[21:42] <Zoffix> brrt: what does `zef info p6doc` produce?

[21:43] <Zoffix> brrt: specifically, the version in `- Identity: p6doc:ver<1.002>`

[21:48] <Zoffix> brrt: basically your zef is getting too old a version somehow. `zef update` should've fixed it. You can try `zef --/cached --debug install p6doc` to ensure it's not using something from cache and to get more debug info out. If you don't wanna figure out why it's broken, `zef install https://github.com/perl6/doc.git` will work

[21:57] *** lizmat joined
[21:58] <Zoffix> m: "aa" ~~ /a a/

[21:58] <camelia> rakudo-moar cb2ea9328: OUTPUT: «Potential difficulties:␤    Space is not significant here; please use quotes or :s (:sigspace) modifier (or, to suppress this warning, omit the space, or otherwise change the spacing)␤    at <tmp>:1␤    ------> 3"aa" ~~ /a7⏏5 a/␤»

[21:58] <Zoffix> "or otherwise change the spacing" <--- like what? Changing by adding more spaces doesn't help

[21:58] <brrt> i'll retry without cached

[22:00] <geekosaur> fwiw I've been having the same problem, --/cached doesn't help

[22:03] *** subroot left
[22:07] *** kerframil joined
[22:18] *** robertle left
[22:22] *** brrt left
[22:27] *** konsolebox joined
[22:27] *** Zoffix left
[22:54] <warriors> i also have a weird problem with p6doc, p6doc Str works on windows but not on linux, on linux it doesnt do anything

[22:54] <warriors> weirdness

[22:56] <warriors> actually on linux it tells me no such type 'Str'

[23:07] <geekosaur> it's an error in the docs

[23:08] <geekosaur> I get: ===FATAL: Table 4 has a mixture of visible and invisible column-separator types.

[23:31] *** TreyHarris joined
[23:34] <Geth> ¦ doc: 25b80a9d29 | (Nick Logan)++ (committed using GitHub Web editor) | META6.json

[23:34] <Geth> ¦ doc: Fix version continuity

[23:34] <Geth> ¦ doc: 

[23:34] <Geth> ¦ doc: https://github.com/perl6/doc/commit/5bedf6169d2c83b0ede8a09a03679ddc41441b8f changed the version to a format incompatible with prior versions. See:

[23:34] <Geth> ¦ doc: 

[23:34] <Geth> ¦ doc: $ perl6 -e 'say Version.new("1.001001") cmp Version.new("1.002")'

[23:34] <Geth> ¦ doc: More

[23:34] <Geth> ¦ doc: 

[23:34] <Geth> ¦ doc: <…commit message has 5 more lines…>

[23:34] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/25b80a9d29

[23:39] *** |oLa| joined
[23:40] *** raschipi joined
[23:45] <geekosaur> yey

[23:45] *** fake_space_whale left
[23:55] *** Zoffix joined
[23:55] *** markoong left
[23:56] <Zoffix> gah. I had the thought of doing the comparison, but thought .002  was obviously larger >_<

[23:57] <Zoffix> What is `cc` quote tweak used for? https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp#L5263

[23:57] <Zoffix> It's not in the docs. In code, I can only find it mentioned on the tr///, but trying to use it says it's not allowed

[23:57] <Zoffix> m: tr:c///

[23:57] <camelia> rakudo-moar cb2ea9328: OUTPUT: «No such method 'trans' for invocant of type 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[23:57] <Zoffix> m: $_ = "x"; tr:c///

[23:57] <camelia> rakudo-moar cb2ea9328: ( no output )

[23:57] <Zoffix> m: $_ = "x"; tr:cc///

[23:57] <camelia> rakudo-moar cb2ea9328: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Adverb cc not allowed on transliteration␤at <tmp>:1␤------> 3$_ = "x"; tr:cc///7⏏5<EOL>␤»

