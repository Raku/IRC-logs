[00:03] *** kurahaupo left
[00:04] *** kurahaupo joined
[00:04] *** p6bannerbot sets mode: +v kurahaupo

[00:05] *** sena_kun left
[00:14] *** kurahaupo left
[00:15] *** kurahaupo joined
[00:16] *** p6bannerbot sets mode: +v kurahaupo

[00:17] *** w_richard_w joined
[00:18] *** p6bannerbot sets mode: +v w_richard_w

[00:21] *** john_parr left
[00:23] *** john_parr joined
[00:24] *** p6bannerbot sets mode: +v john_parr

[00:27] *** john_parr_ joined
[00:28] *** p6bannerbot sets mode: +v john_parr_

[00:29] *** john_parr left
[00:29] *** john_parr_ is now known as john_parr

[00:30] *** kurahaupo left
[00:30] <Geth> ¦ mu: 020f0d0524 | (Tom Browder)++ (committed using GitHub Web editor) | misc/perl6advent-2018/schedule

[00:30] <Geth> ¦ mu: add entry

[00:30] <Geth> ¦ mu: review: https://github.com/perl6/mu/commit/020f0d0524

[00:30] *** ferreira left
[00:32] *** Ven`` joined
[00:33] *** p6bannerbot sets mode: +v Ven``

[00:33] *** avar left
[00:34] *** kurahaupo joined
[00:34] *** p6bannerbot sets mode: +v kurahaupo

[00:41] *** avar joined
[00:41] *** avar left
[00:41] *** avar joined
[00:41] *** p6bannerbot sets mode: +v avar

[00:42] *** ferreira joined
[00:42] *** p6bannerbot sets mode: +v avar

[00:42] *** p6bannerbot sets mode: +v ferreira

[00:45] *** kurahaupo left
[00:45] *** kurahaupo joined
[00:46] *** p6bannerbot sets mode: +v kurahaupo

[00:48] *** ferreira left
[00:53] *** w_richard_w left
[01:13] *** Ven`` left
[01:18] *** w_richard_w joined
[01:19] *** p6bannerbot sets mode: +v w_richard_w

[01:25] *** w_richard_w left
[01:48] *** kurahaupo_ joined
[01:48] *** p6bannerbot sets mode: +v kurahaupo_

[01:49] *** ToddAndMargo joined
[01:49] *** p6bannerbot sets mode: +v ToddAndMargo

[01:50] <ToddAndMargo> what am I doing wrong (this time) with this regex?    p6 'my $x="a"~chr(0x0A)~"b"; $x~~s/ chr(0x0A) /Q/; say "$x";'

[01:50] *** kurahaupo left
[01:51] <timotimo> ToddAndMargo: that regex would match the literal text chr0x0A and capture the 0x0A part

[01:51] *** kurahaupo joined
[01:51] <ToddAndMargo> How do I fix?

[01:51] <timotimo> m: my $x="a"~chr(0x0A)~"b"; $x~~s/ "{chr(0x0A)}" /Q/; say "$x"; # one way

[01:51] <camelia> rakudo-moar 10693d16f: OUTPUT: «aQb␤»

[01:52] *** p6bannerbot sets mode: +v kurahaupo

[01:52] <timotimo> m: my $x="a"~chr(0x0A)~"b"; my $weird-char = chr(0x0A); $x~~s/ $weird-char /Q/; say "$x"; # one way

[01:52] <camelia> rakudo-moar 10693d16f: OUTPUT: «aQb␤»

[01:52] *** kurahaupo_ left
[01:52] <ToddAndMargo> I am writing that down.,  Thank, you!

[01:52] <timotimo> another way

[01:52] <timotimo> m: my $x="a"~chr(0x0A)~"b"; my $weird-char = chr(0x0A); $x .= subst($weird-char, "Q"); say "$x"; # yet another way

[01:52] <camelia> rakudo-moar 10693d16f: OUTPUT: «aQb␤»

[01:53] <ToddAndMargo> Writing those down too!

[01:55] *** kurahaupo left
[01:56] <timotimo> m: my $x="a"~chr(0x0A)~"b"; $x~~s/ "\x0A" /Q/; say "$x"; # yet another another way

[01:56] <camelia> rakudo-moar 10693d16f: OUTPUT: «aQb␤»

[01:57] <ToddAndMargo> how about when used with split?   for split "{chr( 0x0A )}", $WebPage -> $Line  {

[01:57] <timotimo> you can get the character like that, yes

[01:57] <timotimo> or with "\x0A", too

[01:58] <ToddAndMargo> source look like    2A 21 0A 20  2A 20   from hexedit.  My split gives me one YUGE line

[02:00] <ToddAndMargo> "0X0A" gives me one YUGE line too

[02:01] <timotimo> did it become part of one grapheme with something else?

[02:02] <timotimo> m: say uniname(0xA); say uniname(0x21); say uniname(0x20);

[02:02] <camelia> rakudo-moar 10693d16f: OUTPUT: «<control-000A>␤EXCLAMATION MARK␤SPACE␤»

[02:02] <timotimo> linefeed, i see

[02:02] <timotimo> m: say ord("\n")

[02:02] <camelia> rakudo-moar 10693d16f: OUTPUT: «10␤»

[02:02] <timotimo> m: say ord("\n").base(16)

[02:02] <camelia> rakudo-moar 10693d16f: OUTPUT: «A␤»

[02:03] <ToddAndMargo> I don't know a grapheme is.  It only looped once.  

[02:03] *** _kristian joined
[02:03] *** p6bannerbot sets mode: +v _kristian

[02:04] <ToddAndMargo> uniname(0xA)  gives one loop

[02:05] <ToddAndMargo> I am getting my data rom a web page, so perl has no idea what \n means

[02:06] <Geth> ¦ doc: uzluisf++ created pull request #2470: Mention the $! variable in the 'try blocks' section

[02:06] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2470

[02:06] <timotimo> oh

[02:06] <timotimo> of course

[02:07] <timotimo> wait, are you talking about s/.../.../ with the yuge line?

[02:09] <ToddAndMargo> need to leave for a few minutes

[02:12] <ToddAndMargo> The web page is hundereds of lines long.  It uses 0x0A as its line delimiter

[02:14] <timotimo> and .lines won't work?

[02:17] <ToddAndMargo> Yee Gads!!  I just figured it out.  Perl is working perfectly.  The line is question is about 1000 characters long.  That is why is seemed like a single loop.  

[02:17] <ToddAndMargo> in question

[02:17] <ToddAndMargo> all is okay now.  Thank you!

[02:17] <timotimo> no prob!

[02:19] <ToddAndMargo> Looking oer the line.  What sloppy programming.  He included a javascript sub in the line and it just rolled over to the next line in mid command

[02:24] <ToddAndMargo> Now I got to go work on Libreoffice's weird Basic language for a customer.  Thank you again!

[02:24] <timotimo> good luck!

[02:31] *** ToddAndMargo left
[02:34] *** leont left
[02:37] *** coet[work] is now known as coet

[02:41] *** molaf left
[02:54] *** molaf joined
[02:54] <Xliff> timotimo++ # Thanks

[02:54] *** p6bannerbot sets mode: +v molaf

[03:13] *** vrurg left
[03:14] *** titsuki left
[03:29] *** ufobat_ joined
[03:30] *** p6bannerbot sets mode: +v ufobat_

[03:33] *** ufobat___ left
[03:35] *** vrurg joined
[03:36] *** p6bannerbot sets mode: +v vrurg

[03:37] *** coet left
[03:55] *** drtata joined
[03:56] *** p6bannerbot sets mode: +v drtata

[03:56] *** drtata left
[04:16] *** avar left
[04:22] *** hamhu3 left
[04:25] *** hamhu3 joined
[04:25] *** rindolf joined
[04:26] *** kurahaupo joined
[04:26] *** p6bannerbot sets mode: +v hamhu3

[04:26] *** p6bannerbot sets mode: +v rindolf

[04:26] *** p6bannerbot sets mode: +v kurahaupo

[04:30] *** holyghost joined
[04:31] *** p6bannerbot sets mode: +v holyghost

[04:59] *** Cabanossi left
[05:00] *** Cabanossi joined
[05:00] *** p6bannerbot sets mode: +v Cabanossi

[05:07] *** tharkun left
[05:15] *** kurahaupo_ joined
[05:16] *** p6bannerbot sets mode: +v kurahaupo_

[05:17] *** kurahaupo left
[05:19] *** tharkun joined
[05:19] *** p6bannerbot sets mode: +v tharkun

[05:23] *** tharkun left
[05:23] *** tharkun joined
[05:23] *** card.freenode.net sets mode: +v tharkun

[05:23] *** p6bannerbot sets mode: +v tharkun

[05:28] *** kurahaupo_ left
[05:31] *** kurahaupo joined
[05:32] *** p6bannerbot sets mode: +v kurahaupo

[05:42] *** kurahaupo left
[05:42] *** avar joined
[05:42] *** avar left
[05:42] *** avar joined
[05:42] *** p6bannerbot sets mode: +v avar

[05:43] *** kurahaupo joined
[05:43] *** p6bannerbot sets mode: +v avar

[05:44] *** p6bannerbot sets mode: +v kurahaupo

[05:53] *** AlexDaniel left
[05:54] *** kurahaupo left
[06:01] *** kurahaupo joined
[06:02] *** p6bannerbot sets mode: +v kurahaupo

[06:13] *** kurahaupo left
[06:14] <holyghost> .tell jmerelo I proposed a file change in the schedule, I was removed the time before, I will work on a Math-Stat advent, the name is "a sample of statistics"

[06:14] <yoleaux> holyghost: I'll pass your message to jmerelo.

[06:14] *** kurahaupo joined
[06:15] *** p6bannerbot sets mode: +v kurahaupo

[06:15] <holyghost> .tell jmerelo I'll work on it this weekend and depose on github for at Dec 11 2018

[06:15] <yoleaux> holyghost: I'll pass your message to jmerelo.

[06:18] *** holyghost left
[06:25] *** kurahaupo left
[06:27] *** kurahaupo joined
[06:28] *** p6bannerbot sets mode: +v kurahaupo

[06:35] *** hankache joined
[06:35] *** p6bannerbot sets mode: +v hankache

[06:38] *** kurahaupo left
[06:39] *** lizmat left
[06:41] *** kurahaupo joined
[06:42] *** p6bannerbot sets mode: +v kurahaupo

[06:50] *** robertle joined
[06:51] *** p6bannerbot sets mode: +v robertle

[06:56] *** kurahaupo left
[07:05] *** kurahaupo joined
[07:05] *** p6bannerbot sets mode: +v kurahaupo

[07:17] *** kurahaupo left
[07:19] *** kurahaupo joined
[07:19] *** p6bannerbot sets mode: +v kurahaupo

[07:21] *** lizmat joined
[07:21] *** p6bannerbot sets mode: +v lizmat

[07:22] *** w_richard_w joined
[07:23] *** p6bannerbot sets mode: +v w_richard_w

[07:32] *** kurahaupo left
[07:39] *** kurahaupo joined
[07:40] *** p6bannerbot sets mode: +v kurahaupo

[07:44] *** kurahaupo_ joined
[07:44] *** p6bannerbot sets mode: +v kurahaupo_

[07:47] *** kurahaupo left
[07:52] *** w_richard_w left
[08:06] *** hankache left
[08:16] *** lizmat left
[08:27] *** hankache joined
[08:28] *** p6bannerbot sets mode: +v hankache

[08:31] <hankache> hello #perl6

[08:31] <yoleaux> 21 Sep 2018 00:16Z <b2gills> hankache: `abs` isn't the only one it catches, but it is specific to a few functions https://github.com/rakudo/rakudo/blob/d59603138820eaf4ee92a12aae5680a6d03da6e8/src/Perl6/Grammar.nqp#L3558-L3565

[08:32] <hankache> m: use MONKEY-SEE-NO-EVAL; my $result = EVAL 'my $a = 3; say $a;'; say $result;

[08:32] <camelia> rakudo-moar 10693d16f: OUTPUT: «3␤True␤»

[08:32] <hankache> Any idea how to store EVAL's result in a variable as a String?

[08:33] <hankache> I would have expected the OUTPUT to be «3␤T» and not «3␤True␤»

[08:34] <hankache> I would have expected the OUTPUT to be «3␤» and not «3␤True␤»

[08:34] <hankache> any idea?

[08:35] <moritz> say return True, even through the EVAL

[08:36] <moritz> *returns

[08:36] <hankache> yes, but is there a way I can achieve what I want?

[08:38] <moritz> what do you want?

[08:40] <hankache> kind of a REPL behaviour. If I type 'my $a = 3; say $a;' in the REPL I get 3

[08:40] <moritz> m: say $*IN.^methods()

[08:40] <camelia> rakudo-moar 10693d16f: OUTPUT: «(TWEAK open out-buffer nl-in close eof EOF READ get getc comb split words lines read readchars seek tell write WRITE opened t lock unlock printf print put print-nl slurp-rest slurp spurt path IO flush encoding DESTROY native-descriptor Method+{is-noda…»

[08:40] <moritz> erm, wrong handle

[08:40] <hankache> I want a way to EVAL this piece of code and store the result "3" in a variable

[08:41] <moritz> hankache: if you compare $*OUT.tell before and after the EVAL, you know if it has produced output

[08:41] <moritz> but the EVAL return True, so you don't have access to the 3 in the caller's code

[08:42] <moritz> and the REPL doesn't offer the 3 anywhere either

[08:42] <moritz> m: my @tells = $*OUT.tell; say "dummy"; @tells.push: $*OUT.tell; say @tells

[08:42] <camelia> rakudo-moar 10693d16f: OUTPUT: «dummy␤[0 6]␤»

[08:44] <hankache> ok thanks alot

[08:44] <Xliff> m: use MONKEY-SEE-NO-EVAL; my $result = EVAL 'my $a = 3; say $a;'; say $result; $a;

[08:44] <camelia> rakudo-moar 10693d16f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared␤at <tmp>:1␤------> 3EVAL 'my $a = 3; say $a;'; say $result; 7⏏5$a;␤»

[08:44] <Xliff> m: use MONKEY-SEE-NO-EVAL; my $result = EVAL 'my $a = 3; say $a; $a'; say $result;

[08:44] <camelia> rakudo-moar 10693d16f: OUTPUT: «3␤3␤»

[08:45] <Xliff> m: use MONKEY-SEE-NO-EVAL; my $result = EVAL 'my $a = 3; $a'; say $result;

[08:45] <camelia> rakudo-moar 10693d16f: OUTPUT: «3␤»

[08:45] <Xliff> ^^ hankache

[08:45] <Xliff> m: use MONKEY-SEE-NO-EVAL; my $result = EVAL 'my $a = 3; say "A = $a"; $a'; say $result;

[08:45] <camelia> rakudo-moar 10693d16f: OUTPUT: «A = 3␤3␤»

[08:45] <Xliff> Since your last command was a "say", you get the True. 

[08:46] <hankache> indeed

[08:46] <Xliff> So if you want a return value, use that as the last expression of the block.

[08:46] <hankache> I was just looking for a way to silence/not show the True

[08:46] <Xliff> s/a return/a different return/

[08:46] <Xliff> Well, that should be it.

[08:48] *** hankache_ joined
[08:48] *** Sound joined
[08:48] *** p6bannerbot sets mode: +v Sound

[08:49] *** p6bannerbot sets mode: +v hankache_

[08:50] *** hankache_ left
[08:51] *** hankache_ joined
[08:51] *** hankache left
[08:51] *** p6bannerbot sets mode: +v hankache_

[08:51] *** hankache_ left
[08:52] *** hankache joined
[08:52] *** p6bannerbot sets mode: +v hankache

[09:06] <hankache> how can one redirect $*OUT to a variable?

[09:09] <tadzik> https://github.com/sergot/IO-Capture-Simple/blob/master/examples/e0.p6 could work

[09:10] <tadzik> https://github.com/sergot/IO-Capture-Simple/blob/master/lib/IO/Capture/Simple.pm#L29 here's how it works

[09:12] <hankache> perfect! thanks

[09:15] *** mattp_ left
[09:24] *** mattp_ joined
[09:25] *** p6bannerbot sets mode: +v mattp_

[09:33] *** Sound left
[09:36] *** hankache_ joined
[09:37] *** p6bannerbot sets mode: +v hankache_

[09:39] *** hankache left
[09:41] *** sena_kun joined
[09:42] *** rindolf left
[09:42] *** p6bannerbot sets mode: +v sena_kun

[09:44] *** kurahaupo_ left
[09:45] *** kurahaupo joined
[09:46] *** p6bannerbot sets mode: +v kurahaupo

[09:47] *** jamesaxl joined
[09:47] *** p6bannerbot sets mode: +v jamesaxl

[09:56] *** kurahaupo_ joined
[09:56] *** kurahaupo left
[09:56] *** p6bannerbot sets mode: +v kurahaupo_

[09:57] *** kurahaupo joined
[09:57] *** hankache_ left
[09:57] *** p6bannerbot sets mode: +v kurahaupo

[10:00] *** kurahaupo_ left
[10:04] *** rindolf joined
[10:05] *** p6bannerbot sets mode: +v rindolf

[10:10] *** jamesaxl left
[10:12] *** jamesaxl joined
[10:13] *** p6bannerbot sets mode: +v jamesaxl

[10:16] *** Xliff left
[10:25] <SmokeMachine> Is anyone here on lpw?

[10:25] <SmokeMachine> There is a live stream on YouTube

[10:26] <SmokeMachine> But that’s not showing anything!

[10:28] <SmokeMachine> https://youtu.be/MUIBoDoG0wE

[10:32] *** Ven`` joined
[10:32] *** p6bannerbot sets mode: +v Ven``

[10:46] *** kurahaupo left
[10:46] *** kurahaupo_ joined
[10:47] *** p6bannerbot sets mode: +v kurahaupo_

[10:49] *** kurahaupo_ is now known as kurahaupo

[10:56] *** pecastro joined
[10:57] *** p6bannerbot sets mode: +v pecastro

[10:58] *** felher joined
[10:59] *** p6bannerbot sets mode: +v felher

[11:02] *** kurahaupo left
[11:02] *** kurahaupo joined
[11:03] *** p6bannerbot sets mode: +v kurahaupo

[11:13] <timotimo> oh no! they don't have an internet connection provided by the venue!

[11:16] *** coet[work] joined
[11:16] *** p6bannerbot sets mode: +v coet[work]

[11:16] *** Ven`` left
[11:18] *** coet[work] is now known as coet

[11:30] *** avar left
[11:31] *** avar joined
[11:31] *** avar left
[11:31] *** avar joined
[11:31] *** p6bannerbot sets mode: +v avar

[11:31] *** p6bannerbot sets mode: +v avar

[11:31] *** lichtkind left
[11:41] *** avar left
[11:41] *** avar joined
[11:41] *** avar left
[11:41] *** avar joined
[11:41] *** p6bannerbot sets mode: +v avar

[11:41] *** avar left
[11:41] *** avar joined
[11:41] *** avar left
[11:41] *** avar joined
[11:41] *** p6bannerbot sets mode: +v avar

[11:42] *** p6bannerbot sets mode: +v avar

[11:45] *** lichtkind joined
[11:46] *** p6bannerbot sets mode: +v lichtkind

[11:54] *** Sound joined
[11:54] *** p6bannerbot sets mode: +v Sound

[12:02] *** irdr left
[12:03] *** irdr joined
[12:04] *** drclaw joined
[12:04] *** p6bannerbot sets mode: +v drclaw

[12:04] *** p6bannerbot sets mode: +v irdr

[12:05] <drclaw> a

[12:05] <timotimo> m: say "a".succ

[12:05] <camelia> rakudo-moar 10693d16f: OUTPUT: «b␤»

[12:07] <drclaw> p6: say 3;

[12:07] <camelia> rakudo-moar 10693d16f: OUTPUT: «3␤»

[12:09] <timotimo> i wonder if having a bot that greets newcomers with a random code snippet would be obnoxious or interesting/fun

[12:12] <drclaw> Random code would  hurt my brain :)

[12:13] <timotimo> i'd hope we'd come up with a good selection of interesting code

[12:13] <timotimo> rather than completely random code generation :D

[12:14] *** marmor joined
[12:15] *** p6bannerbot sets mode: +v marmor

[12:17] <drclaw> using this "list" method on a supply, the docs say "Taps the Supply it is called on, and returns a lazy list...". . However react block doesn't execute.  Calling a "tap" method and building my own list works as expected..

[12:17] <drclaw> trying to read the lines from a Proc::Async ...

[12:19] <drclaw> does the "list" method indeed tap the supply? 

[12:23] *** molaf left
[12:26] <timotimo> can you provide a short example, or your whole code?

[12:27] <timotimo> list on a supply gives you something you can use just like a list, so you wouldn't put that into a react block

[12:27] <timotimo> because the supply block will .Supply on the list again, i believe

[12:32] <drclaw> so starting a external process ($proc) and reading the stdout, wait until the process finishes, as say the list:  my @list=$proc.stdout.lines.list; await $proc.start; say @list;

[12:33] <drclaw> just seems to 'hang'

[12:33] <timotimo> it might iterate the list when assigning it to @list

[12:34] <timotimo> supplies themselves don't add any concurrency, but you'll need concurrency here

[12:34] <timotimo> i think

[12:34] <timotimo> you can coerce the supply to a Channel and the channel to a list

[12:35] <drclaw> however if I explicitly tap:     my @list; $proc.stdout.lines.tap: {@list.push: $_};    and then start the process it runs as I expect

[12:38] <timotimo> by assigning to a $-sigiled var instead of an @-sigiled var, it retains the lazyness properly

[12:38] <timotimo> and doesn't block

[12:53] <jnthn> `.list` on a `Supply` is pretty much saying "I want to turn this async thing into a blocking sync thing"; it's not generally what you'd want to do.

[12:54] <timotimo> interesting, since the docs use "lazy" there, making it sound kind of like a nonblocking thing

[12:54] <timotimo> that should get a little mention in the docs

[12:54] <jnthn> The typical pattern is something like the first thing that is shown in the docs: `my @lines; react { my $proc = Proc::Async.new(...); whenever $proc.stdout.lines { push @lines, $_ }; whenever $proc.start { done } };`

[12:56] *** lizmat joined
[12:56] *** p6bannerbot sets mode: +v lizmat

[12:59] <drclaw> I'm pretty new to perl6 so  thank you for your help

[13:00] <jnthn> Also if you want stdout and stderr lines togehter, then it's just `whenever $proc.Supply.lines { push @lines, $_ }`

[13:13] *** lizmat left
[13:13] *** lizmat_ joined
[13:13] *** p6bannerbot sets mode: +v lizmat_

[13:13] <drclaw> ok must be a chicken an egg problem...

[13:14] <drclaw> obtaining the list as follows blocks : my @list=$proc.stdout.line.list;

[13:16] <drclaw> trying to use await on the promise from $proc.start is also blocking. Maybe the process already finished at this point?...

[13:17] <drclaw> not using await and using the $-sigil variable works. 

[13:17] *** Sound left
[13:18] <drclaw> my $list=$proc.stdout.lines.list;

[13:18] <drclaw> $proc.start;

[13:18] <jnthn> Yes, because array assignment is mostly eager.

[13:18] <drclaw> say $list[0];

[13:19] <drclaw> thanks again everyone for your help

[13:21] <jnthn> Proc::Async is providing an *async* API, and expects to be used in such a way (e.g. with the `react` block as shown earlier). If you don't actually need the async, then consider using `Proc` instead, which has an API intended for synchronous consumption.

[13:21] <SmokeMachine> drclaw: does that work with `my @list := ...`?

[13:22] <jnthn> It's not as flexible as a result, but for simple things it's, well, simpler. :)

[13:28] <drclaw> yes actually, the :=  operator also works

[13:29] <drclaw> works on the @-sigil version  

[13:30] *** ggg joined
[13:30] *** p6bannerbot sets mode: +v ggg

[13:35] *** ggg left
[13:48] *** finanalyst joined
[13:49] *** p6bannerbot sets mode: +v finanalyst

[13:50] *** Poohman joined
[13:51] *** p6bannerbot sets mode: +v Poohman

[13:52] *** khisanth_ left
[13:53] *** marmor left
[13:57] *** lizmat_ is now known as lizmat

[14:05] *** khisanth_ joined
[14:05] *** p6bannerbot sets mode: +v khisanth_

[14:13] *** lizmat left
[14:14] *** drclaw left
[14:19] *** lizmat joined
[14:19] *** p6bannerbot sets mode: +v lizmat

[14:28] *** leont joined
[14:29] *** p6bannerbot sets mode: +v leont

[14:39] *** lizmat left
[14:46] <finanalyst> i just asked a question on StackOverflow about getting a regex out of a string to match it. Would someone please answer it.

[14:47] <finanalyst> basically, I store a regex in a YAML file and slurp it into a hash as a string. But how to I turn it into a regex?

[14:48] <finanalyst> Suppose %h<regex> = '/ ^ <[ a..b, A..B ]> /' how do I match against %h<regex> ?

[14:51] <sena_kun> m: use MONKEY-SEE-NO-EVAL; my $regex = EVAL '/' ~ '.a.' ~ '/'; say 'faf' ~~ $regex;

[14:51] <camelia> rakudo-moar 10693d16f: OUTPUT: «｢faf｣␤»

[14:51] <sena_kun> I am not sure there is a solution without using EVAL though.

[14:53] <sena_kun> m: my $a = '.a.' my $regex = / <$a> /; say 'faf' ~~ $regex;

[14:53] <camelia> rakudo-moar 10693d16f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my $a = '.a.'7⏏5 my $regex = / <$a> /; say 'faf' ~~ $reg␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        stat…»

[14:53] *** finanalyst left
[14:53] <sena_kun> m: my $a = '.a.'; my $regex = / <$a> /; say 'faf' ~~ $regex;

[14:53] <camelia> rakudo-moar 10693d16f: OUTPUT: «｢faf｣␤»

[15:11] <ufobat_> do you know what i am missing

[15:11] <ufobat_> a perl6 docker image with Inline::Perl5

[15:28] *** clarjon10 joined
[15:29] *** clarjon10 left
[15:54] *** uzl joined
[15:55] *** rindolf left
[15:55] *** p6bannerbot sets mode: +v uzl

[15:55] <uzl> Hello! Anybody here?

[15:57] <sena_kun> o/

[15:59] *** rindolf joined
[15:59] *** p6bannerbot sets mode: +v rindolf

[16:00] <uzl> "Java’s language support for helping to enforce immutability is the final modifier. When you

[16:00] <uzl> declare a variable to be final , you are promising to assign it a value only once, either

[16:00] <uzl> in an initializer or in the constructor."

[16:00] <uzl> sena_kun: Is this default on P6 class? If not, what's the equivalent keyword in P6?

[16:02] <sena_kun> uzl, do you mean class meaning of `final` keyword in java, as being impossible to inherit from it? as for final variables, I think it is just `constant $foo = 5`.

[16:03] <sena_kun> I believe `final` is a patch for java absence of `constant/const`-like declaration. in Perl 6 we have it:

[16:03] <uzl> What about inside of a class?

[16:03] <sena_kun> m: constant $foo = 3; say $foo; $foo = 10;

[16:03] <camelia> rakudo-moar 10693d16f: OUTPUT: «3␤Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[16:03] <uzl> Would the absense of `is rw` be the equivalent?

[16:04] <sena_kun> class attributes are still writeable, but from class insides.

[16:05] <sena_kun> meaning of `rw` is a note that not only getter, but also setter is "created" automatically if you write your attribute as `$.a` instead of `$!a`.

[16:05] <sena_kun> like

[16:05] <uzl> What if I want the private attribute to be inmutable inside the class too?

[16:05] <uzl> m: class A { has constant $!attr; }; say A.new(:attr(''));

[16:05] <camelia> rakudo-moar 10693d16f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing initializer on constant declaration␤at <tmp>:1␤------> 3class A { has constant $!attr7⏏5; }; say A.new(:attr(''));␤»

[16:06] <uzl> m: class A { has constant $!attr; }; say A.new();

[16:06] <camelia> rakudo-moar 10693d16f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing initializer on constant declaration␤at <tmp>:1␤------> 3class A { has constant $!attr7⏏5; }; say A.new();␤»

[16:06] <sena_kun> m: class A { has $!a; has $.b; has $.c is rw; }; my $a = A.new; # And here: $!a is for internal use only(from methods), $.b can be accessed from outside, $.c can be both accessed and set from outside.

[16:06] <camelia> rakudo-moar 10693d16f: ( no output )

[16:06] <timotimo> "constant" in perl6 is compile-time-constant

[16:06] <timotimo> so not equivalent to "assign-once" semantics

[16:07] <sena_kun> so the question is how to make an attribute have only single assignment?

[16:08] <sena_kun> and what are means for a class to prohibit its extending, if I understood correctly.

[16:08] <uzl> I guess so? I'm not sure. I am reading Sedgewick's Algorithm but implementing everything in P6.

[16:08] <sena_kun> ah

[16:08] <uzl> so I wanted to see if there was some P6 equivalent.

[16:09] <sena_kun> well, if you are only implementing algorithms, you don't need to translate exact Java semantics here.

[16:10] <sena_kun> it is a one question when it's a design rule or something like that, but I myself rarely use final keyword in Java except for constants(considering I am something of full-time with it).

[16:12] <sena_kun> final keyword is more of a safe net from shooting yourself, but cases when you cannot find a tricky bug because a variale is re-assigned somewhere are, hmm. well, I myself cannot remember last time when it happened.

[16:13] <uzl> you're right. I'm still reading chapter 1 so the examples are pretty straightforward.

[16:13] <sena_kun> so I'd just pretend there is no `final` on variables and classes. Also, making a class `final` is hardly a nice design, as there are cases when you need to dive into some guts and copy-paste stuff(which feels bad!), but that's just me.

[16:14] <sena_kun> on the other hand, two questions raised(how to make a variable die on second assignment and how to make class non-extensible) are ones I don't know answer to. :)

[16:14] <sena_kun> and that'd be interesting to look at.

[16:15] <uzl> Stack Overflow! Not me though.

[16:15] <uzl> where is jmerelo? ;)

[16:18] <uzl> sena_kun: thanks! have a good weekend.

[16:18] *** uzl left
[16:21] *** lizmat joined
[16:21] *** p6bannerbot sets mode: +v lizmat

[16:33] *** lizmat left
[16:55] *** molaf joined
[16:56] *** p6bannerbot sets mode: +v molaf

[16:57] <Poohman> hello all

[16:57] <sena_kun> o/

[16:58] <Poohman> sena_kun: checked the libeay32.dll - i think the dll we have does not have the function

[16:58] <Poohman> i think we have v1.0.2 

[16:58] <Poohman> the newer ones seem to have it

[16:58] <Poohman> im trying to build openssl in windows to get the dll

[16:59] <Poohman> but am having problems with building zlib which is a dependancy

[16:59] <sena_kun> yes, saw that. huh, zlib... I wonder if there are some pre-built ones for windows.

[16:59] <sena_kun> I thought about that yesterday.

[17:00] <sena_kun> https://stackoverflow.com/questions/6534505/how-to-fix-libeay32-dll-was-not-found-error <- in answers here some clues should be about where to find needed .dll.

[17:01] <Poohman> ok ill have a look tomorrow - a bit under the weather tonight

[17:01] <sena_kun> sure.

[17:01] <Poohman> thanks for the help

[17:01] <sena_kun> I'll try to have a look at it today, I think.

[17:04] *** rindolf left
[17:11] *** rindolf joined
[17:12] *** p6bannerbot sets mode: +v rindolf

[17:19] *** jjmerelo joined
[17:19] *** p6bannerbot sets mode: +v jjmerelo

[17:20] <jjmerelo> Hi

[17:20] <sena_kun> jjmerelo, hi there. o/

[17:20] <jjmerelo> I don't know who's around, but this is a little reminder that the deadline for lightning talk in FOSDEM is about to finish

[17:21] <jjmerelo> Just in case you don't know, FOSDEM is a huge open source conference that takes place in Brussels in the first weekend of February

[17:22] <jjmerelo> The deadline for submitting lightning talks finishes today https://fosdem.org/2019/news/2018-08-10-call-for-participation/

[17:23] <jjmerelo> It would be nice to have some Perl 6 presence there, since there's no devroom this year. I've already submitted one, lizmat is also doing it (or has already done it), so please go ahead and submit something!

[17:24] <jjmerelo> It would really help to spread the word and enlarge the community :-). So please do it!

[17:24] <jjmerelo> If it's accepted, it's a great CV boost! Guaranteed!

[17:25] <jjmerelo> But mainly, it will help the community if you spread the word about Perl 6 and to a bit of evangelism.

[17:30] *** jjmerelo left
[17:46] *** zakharyas joined
[17:46] *** p6bannerbot sets mode: +v zakharyas

[17:51] *** Praise- joined
[17:51] *** Praise- left
[17:51] *** Praise- joined
[17:51] *** p6bannerbot sets mode: +v Praise-

[17:51] *** p6bannerbot sets mode: +v Praise-

[17:54] *** Praise- is now known as Praise

[17:57] *** lizmat joined
[17:57] *** p6bannerbot sets mode: +v lizmat

[18:00] *** lizmat left
[18:03] *** hankache joined
[18:04] *** p6bannerbot sets mode: +v hankache

[18:04] <mornfall> hmm, fosdem... haven't been to that one for a while

[18:13] *** hankache left
[18:28] <Poohman> sena_kun: before I hit the sack -I downloaded various precompiled dlls - v1.0.2 versions - o,p, etc until k

[18:28] <Poohman> and tested them, none worked

[18:28] <Poohman> i directly opened the dll in notepad and searched for the function

[18:28] <Poohman> it is not available

[18:29] <sena_kun> hmm, that's sad to know. :S I use LibreSSL myself, not sure what's even recent version of OpenSSL... I'll look into it after $dayjob will be done nicely. :)

[18:29] <Poohman> but SSL_CTX_set_default_verify_paths() is present in ssleay.dll

[18:30] <Poohman> oh sorry to have disturbed you

[18:30] <Poohman> just wanted to let you know that maybe it is ssl-lib instead of gen-lib

[18:30] <Poohman> thanks for the help and bye

[18:37] *** marmor joined
[18:38] *** p6bannerbot sets mode: +v marmor

[19:38] *** unicodable6 left
[19:38] *** nativecallable6 left
[19:38] *** undersightable6 left
[19:38] *** reportable6 left
[19:38] *** releasable6 left
[19:38] *** coverable6 left
[19:38] *** bloatable6 left
[19:38] *** statisfiable6 left
[19:38] *** notable6 left
[19:38] *** bisectable6 left
[19:38] *** quotable6 left
[19:38] *** shareable6 left
[19:38] *** committable6 left
[19:38] *** greppable6 left
[19:38] *** benchable6 left
[19:38] *** evalable6 left
[19:38] *** squashable6 left
[19:39] *** abraxxa joined
[19:39] *** statisfiable6 joined
[19:39] *** ChanServ sets mode: +v statisfiable6

[19:39] *** notable6 joined
[19:39] *** ChanServ sets mode: +v notable6

[19:39] *** abraxxa left
[19:40] *** p6bannerbot sets mode: +v statisfiable6

[19:40] *** squashable6 joined
[19:40] *** ChanServ sets mode: +v squashable6

[19:40] *** p6bannerbot sets mode: +v notable6

[19:40] *** quotable6 joined
[19:40] *** ChanServ sets mode: +v quotable6

[19:40] *** greppable6 joined
[19:40] *** ChanServ sets mode: +v greppable6

[19:40] *** bloatable6 joined
[19:40] *** unicodable6 joined
[19:40] *** ChanServ sets mode: +v unicodable6

[19:41] *** p6bannerbot sets mode: +v squashable6

[19:41] *** p6bannerbot sets mode: +v quotable6

[19:41] *** p6bannerbot sets mode: +v greppable6

[19:41] *** releasable6 joined
[19:41] *** ChanServ sets mode: +v releasable6

[19:41] *** p6bannerbot sets mode: +v bloatable6

[19:41] *** p6bannerbot sets mode: +v unicodable6

[19:42] *** p6bannerbot sets mode: +v releasable6

[19:42] *** coverable6 joined
[19:42] *** undersightable6 joined
[19:42] *** ChanServ sets mode: +v undersightable6

[19:42] *** committable6 joined
[19:42] *** nativecallable6 joined
[19:42] *** ChanServ sets mode: +v nativecallable6

[19:42] *** reportable6 joined
[19:42] *** ChanServ sets mode: +v reportable6

[19:43] *** p6bannerbot sets mode: +v coverable6

[19:43] *** evalable6 joined
[19:43] *** ChanServ sets mode: +v evalable6

[19:43] *** p6bannerbot sets mode: +v undersightable6

[19:43] *** p6bannerbot sets mode: +v committable6

[19:43] *** bisectable6 joined
[19:43] *** benchable6 joined
[19:43] *** ChanServ sets mode: +v benchable6

[19:43] *** p6bannerbot sets mode: +v nativecallable6

[19:43] *** p6bannerbot sets mode: +v reportable6

[19:43] *** shareable6 joined
[19:43] *** ChanServ sets mode: +v shareable6

[19:43] *** p6bannerbot sets mode: +v evalable6

[19:44] *** p6bannerbot sets mode: +v bisectable6

[19:44] *** p6bannerbot sets mode: +v benchable6

[19:44] *** p6bannerbot sets mode: +v shareable6

[20:07] *** kolibrie joined
[20:08] *** p6bannerbot sets mode: +v kolibrie

[20:18] *** marmor left
[20:29] *** sena_kun left
[20:30] *** sena_kun joined
[20:42] *** AlexDaniel joined
[20:42] *** p6bannerbot sets mode: +v AlexDaniel

[20:53] <Altreus> I'm finding that as soon as I make my library work async, slowly everything starts returning a Promise

[20:53] <Altreus> So I wonder whether it is or will be possible to specify what the Promise itself resolves to

[20:53] <Altreus> it would look nicer and be more self-documenting if I had « method send-message returns Promise[Message] » or something like that

[20:55] <Altreus> plus it could say something meaningful if it actually resolves to something else

[21:00] *** lichtkind left
[21:03] *** discoD joined
[21:03] *** p6bannerbot sets mode: +v discoD

[21:08] *** jamesaxl left
[21:24] <jnthn> Altreus: I've also pondered that sometimes. Feel free to submit it as an RFC

[21:29] <leont> Yeah I would like that as well. Then again, my p6 code tends to be rather explicitly typed.

[21:31] <timotimo> it takes all kinds to make a world

[21:32] *** jamesaxl joined
[21:33] *** p6bannerbot sets mode: +v jamesaxl

[21:46] <mornfall> i guess there isn't a markdown parser as a p6 package? (if it did pandoc extensions that'd be even better :p)

[21:46] <mornfall> pandoc is a mess and replacing it could be a good p6 exercise (not in full generality of course, i just need a very small subset of what it does)

[21:48] <jnthn> There's multiple Markdown modules available; worth seeing if one of them does what you need.

[21:50] * mornfall goes looking more carefully (i only found perl5 mods and one very limited perl6 grammar)

[21:52] <mornfall> okay the Text::Markdown modules.perl6..org looks better (even if the insides are not super pretty)

[21:54] <mornfall> hmm, perl6 on openbsd isn't exactly... comprehensive; *goes looking for zef*

[21:57] <discoD> i haven't seen a distro-packaged perl6 worth using yet. 

[21:58] <mornfall> well, the rakudo in ports managed to get me zef installed, so i guess i'll live

[22:01] <mornfall> okay the source code for for Text::Markdown looks a little like it's been encrypted; getting used to p6 is going to take a while :P

[22:03] <discoD> if anyone like riddles, this one is killing me: A native function call, which allocates its own memory, returns a pointer to a cstruct, 'A'. One of A's members is a pointer to another cstruct 'ImAnInstance', which has a member 'MaybeYouForgotDotNew'. How do you access ImAnInstance.MaybeYouForgotDotNew?

[22:04] <discoD> rakudo swears the second struct is a type object, and i can't figure out how to tell it otherwise.

[22:05] <jnthn> A type object is how it'd map a C NULL

[22:11] <discoD> oh ok, i think i know what's going on then. thank you very much

[22:13] <Geth> ¦ doc/master: 4 commits pushed by (Luis F. Uceta)++, (Juan Julián Merelo Guervós)++

[22:13] <Geth> ¦ doc/master: c8b17a85bd | Mention the $! variable in the 'try blocks' section

[22:13] <Geth> ¦ doc/master: f84f624b97 | Clarify a sentence in #2469

[22:13] <Geth> ¦ doc/master: eea7e8d2a0 | Rephrase sentence in the `try blocks` section

[22:13] <Geth> ¦ doc/master: aaf9f053cf | Merge pull request #2470 from uzluisf/master

[22:13] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/e336c414e77d...aaf9f053cf9e

[22:24] <Geth> ¦ mu: 043ad31ffc | (Tom Browder)++ (committed using GitHub Web editor) | README

[22:24] <Geth> ¦ mu: Update README

[22:24] <Geth> ¦ mu: review: https://github.com/perl6/mu/commit/043ad31ffc

[22:24] *** zakharyas left
[22:29] <Geth> ¦ mu: 5476c42970 | (Tom Browder)++ (committed using GitHub Web editor) | misc/perl6advent-2018/schedule

[22:29] <Geth> ¦ mu: update title

[22:29] <Geth> ¦ mu: review: https://github.com/perl6/mu/commit/5476c42970

[22:36] *** kurahaupo left
[22:37] *** kurahaupo joined
[22:38] *** p6bannerbot sets mode: +v kurahaupo

[23:11] *** lizmat joined
[23:11] *** p6bannerbot sets mode: +v lizmat

[23:13] *** vike1 left
[23:19] *** vike1 joined
[23:20] *** p6bannerbot sets mode: +v vike1

[23:24] *** sena_kun left
[23:29] *** bolangi_ left
[23:36] *** bolangi joined
[23:37] *** p6bannerbot sets mode: +v bolangi

[23:42] *** bolangi left
[23:46] *** pecastro left
[23:51] *** rindolf left
[23:52] *** rindolf joined
[23:53] *** p6bannerbot sets mode: +v rindolf

[23:54] *** bolangi joined
[23:55] *** p6bannerbot sets mode: +v bolangi

