[00:00] *** w_richard_w joined
[00:01] *** p6bannerbot sets mode: +v w_richard_w

[00:03] <Pllll> "Zoffix Znet started this discussion again early October 2018" ... That wasn't the start. That was the CONCLUSION to a 6.d release item that was posted MORE THAN A YEAR AGOhttps://github.com/perl6/6.d-prep/commit/0b45a1f1431fcc285a07d43fa9f918906a7e7eb3#diff-b7b1e314614cf326c6e2b6eba1540682 

[00:08] *** Pllll left
[00:09] *** cydf left
[00:13] <vrurg> m: perl6 -e 'class A { method foo ( Int $i ) { "A::foo($i)" } }; class B is A { method foo ( Int $i ) { return callsame ~ "B::foo -> " if $i == 0; callsame ~ "B::foo( $i ) -> " } }; say B.new.foo(1)'

[00:13] <camelia> rakudo-moar fa5215b61: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3perl6 -e7‚èè5 'class A { method foo ( Int $i ) { "A::‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement‚Ä¶¬ª

[00:13] <vrurg> m: class A { method foo ( Int $i ) { "A::foo($i)" } }; class B is A { method foo ( Int $i ) { return callsame ~ "B::foo -> " if $i == 0; callsame ~ "B::foo( $i ) -> " } }; say B.new.foo(1)

[00:13] <camelia> rakudo-moar fa5215b61: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Calling callsame(Str) will never work with declared signature ()‚ê§at <tmp>:1‚ê§------> 3B is A { method foo ( Int $i ) { return 7‚èè5callsame ~ "B::foo -> " if $i == 0; call‚ê§¬ª

[00:13] <vrurg> Could some body explain this error?

[00:15] <vrurg> Swapping callsame with string fixes the problem.

[00:18] *** kurahaupo_ joined
[00:19] *** p6bannerbot sets mode: +v kurahaupo_

[00:20] *** kurahaupo left
[00:30] *** rouking left
[00:40] *** lookatme_q left
[00:41] *** Kaiepi left
[00:43] *** delon_ joined
[00:44] *** delon_ left
[00:56] *** moony left
[00:56] *** moony joined
[00:56] *** p6bannerbot sets mode: +v moony

[01:14] *** kurahaupo_ left
[01:14] <timotimo> vrurg: callsame isn't a term, though maybe it should have been; you need ()

[01:14] *** kurahaupo joined
[01:14] <timotimo> callsame ~ "B::Foo( $i )" is being parsed as callsame(~"B::Foo( $i )");

[01:15] <vrurg> m: class A { method foo ( Int $i ) { "A::foo($i)" } }; class B is A { method foo ( Int $i ) { return callsame() ~ "B::foo -> " if $i == 0; callsame() ~ "B::foo( $i ) -> " } }; say B.new.foo(1)

[01:15] <camelia> rakudo-moar fa5215b61: OUTPUT: ¬´A::foo(1)B::foo( 1 ) -> ‚ê§¬ª

[01:15] *** p6bannerbot sets mode: +v kurahaupo

[01:16] <vrurg> timotimo: documentation defines it as a sub. subs are supposed to be terms, aren't they?

[01:16] *** kurahaupo_ joined
[01:16] <timotimo> no, subs eat up arguments by default, terms don't

[01:17] <timotimo> i wonder if we could pass the info from the parser to the optimizer that there was a balanced number of spaces around the ~ so that the optimizer could point out that perhaps an infix was interpreted as a prefix accidentally

[01:17] *** p6bannerbot sets mode: +v kurahaupo_

[01:17] <vrurg> That would be great.

[01:18] <timotimo> doing that might require touching EXPR

[01:18] * vrurg is always using () with subs; thus forgot about them consuming arguments...

[01:18] *** kurahaupo left
[01:19] <vrurg> timotimo: thanks!

[01:19] <timotimo> NP!

[01:42] *** finanalyst joined
[01:42] *** p6bannerbot sets mode: +v finanalyst

[01:53] *** ryn1x joined
[01:54] *** p6bannerbot sets mode: +v ryn1x

[01:56] *** leont left
[02:11] *** ryn1x left
[02:12] *** kurahaupo_ left
[02:12] *** kurahaupo joined
[02:12] *** ryn1x joined
[02:13] *** p6bannerbot sets mode: +v kurahaupo

[02:13] *** p6bannerbot sets mode: +v ryn1x

[02:14] *** kurahaupo left
[02:16] *** kurahaupo joined
[02:17] *** p6bannerbot sets mode: +v kurahaupo

[02:18] *** ryn1x left
[02:26] <SmokeMachine> timotimo: it's starting to work! https://www.irccloud.com/pastebin/CrAvcoN8/

[02:27] <SmokeMachine> timotimo: Im using control exceptions for that... any better idea?

[02:34] *** ryn1x joined
[02:35] *** p6bannerbot sets mode: +v ryn1x

[02:36] <SmokeMachine> timotimo: a better example https://www.irccloud.com/pastebin/OHw2cHGA/

[02:37] <SmokeMachine> timotimo: now I have to add it to the ast...

[02:41] <timotimo> oh, i didn't even know sqlite3 has type coercers

[02:41] <SmokeMachine> timotimo: that‚Äôs not sql...

[02:41] <timotimo> oh

[02:41] <SmokeMachine> Just gist...

[02:41] <timotimo> OK!

[02:41] <timotimo> it does look promising :)

[02:41] <SmokeMachine> :)

[02:42] <timotimo> will be fun to do it with multiple vars in multiple places

[02:42] <SmokeMachine> Thanks for the idea!

[02:42] <SmokeMachine> That will! But I‚Äôm to far from that yet...

[02:44] <SmokeMachine> timotimo: I haven‚Äôt tried, but I think it‚Äôs already working (just the printing) to ??!!

[02:44] <timotimo> cool

[02:44] <SmokeMachine> So, have a good night! Thanks!

[02:45] <timotimo> seeya!

[02:45] <AlexDaniel> lizmat: oh! t/*/*.t thing was by donaldh, not me! I just merged their PR

[02:45] <AlexDaniel> lizmat: https://github.com/rakudo/rakudo/pull/2454

[02:46] <AlexDaniel> I'm talking about: ‚ÄúAleks-Daniel Jakimenko-Aleksejev made the make t/spec/foo/bar.t rule work again, allowing for selective spectesting of one or more files.‚Äù

[02:47] <timotimo> i can edit the post right now

[02:47] <timotimo> "Donald Hunter" is correct?

[02:47] <AlexDaniel> please do

[02:47] <AlexDaniel> yes

[02:48] <timotimo> updated

[02:49] <AlexDaniel> timotimo++ thank you

[02:49] <timotimo> YW

[02:51] *** noganex_ joined
[02:51] *** noganex left
[02:52] <buggable> New CPAN upload: HTTP-Request-FormData-0.2.tar.gz by HANENKAMP http://modules.perl6.org/dist/HTTP::Request::FormData:cpan:HANENKAMP

[02:52] *** p6bannerbot sets mode: +v noganex_

[02:52] *** molaf left
[02:53] *** Kaiepi joined
[02:54] *** p6bannerbot sets mode: +v Kaiepi

[03:05] *** molaf joined
[03:06] *** p6bannerbot sets mode: +v molaf

[03:12] *** molaf left
[03:15] *** ufobat___ joined
[03:16] *** p6bannerbot sets mode: +v ufobat___

[03:19] *** ufobat_ left
[03:20] *** jast left
[03:22] *** jast joined
[03:22] *** kurahaupo_ joined
[03:23] *** p6bannerbot sets mode: +v jast

[03:23] *** p6bannerbot sets mode: +v kurahaupo_

[03:26] *** kurahaupo left
[03:34] *** delon left
[03:42] *** w_richard_w left
[03:51] *** ryn1x left
[03:51] *** ryn1x joined
[03:52] <buggable> New CPAN upload: Mathx-Stat-0.1.15.tar.gz by HOLYGHOST http://modules.perl6.org/dist/Mathx::Stat:cpan:HOLYGHOST

[03:52] *** p6bannerbot sets mode: +v ryn1x

[03:53] *** nelsonhb joined
[03:54] *** p6bannerbot sets mode: +v nelsonhb

[03:54] *** molaf joined
[03:55] *** p6bannerbot sets mode: +v molaf

[03:56] <holyghost> If someone would like to run the tests of Mathx::Stat ?

[03:58] <holyghost> If it works, the package goes to 0.2 with more code

[04:00] *** nelsonhb left
[04:02] <timotimo> holyghost: you have a typo in DistributionPopulation.pm6

[04:02] <timotimo> that prevents it from working

[04:02] <timotimo> there is a : missing in line 3 where it says "Mathx::Stat:Population"

[04:02] <timotimo> why did you put it up on cpan already?

[04:03] <timotimo> and you're still writing .foo instead of self.foo which makes things Not Work

[04:04] <timotimo> No such method 'length' for invocant of type 'Array'. Did you mean 'elems'?

[04:04] <timotimo>   in method Expectance at /tmp/Mathx-Stat/lib/Mathx/Stat/DistributionPopulation.pm6 (Mathx::Stat::DistributionPopulation) line 19

[04:04] <timotimo> please for the love of all that is holy and ghostly test your code even just a little bit before you put it up on cpan

[04:05] <holyghost> timotimo: I uploaded uncompilable code because I didnt know then it had to go on github first

[04:05] <holyghost> So should I update CPAN then ?

[04:06] <holyghost> I was all wrong with things like .population

[04:07] <holyghost> anyway thx, I'll edit this week

[04:07] <holyghost> I asked Xliff to do a PR

[04:11] *** costamsm1 joined
[04:12] *** p6bannerbot sets mode: +v costamsm1

[04:12] <timotimo> .population is short for $_.population

[04:12] <timotimo> that's fine, but you didn't put anything into $_

[04:13] <timotimo> so it just executes .population on the default value that is in $_, which is just the Any type object

[04:13] <timotimo> which doesn't have a population method, normally

[04:14] *** costamsm1 left
[04:14] <timotimo> if the mathx::stat module was already there, then you could have left it in the state it was and only upload something new once it compiles

[04:16] <holyghost> ok, but I just uploaded, I know now

[04:18] <holyghost> I'll fix later on

[04:18] <holyghost> I thought it was short for a public variable

[04:18] <timotimo> you're using "ok" in the test function again as if it compared two values

[04:18] *** sacomo left
[04:18] <timotimo> no, that requires the sigil in front

[04:18] <holyghost> not $_

[04:18] <timotimo> $.foo is $(self.foo), .foo is $_.foo

[04:19] <holyghost> is

[04:19] *** ryn1x left
[04:19] <timotimo> you probably want something other than is

[04:19] <timotimo> m: use Test; is 1.5, "1.5", "a string and a number are equal enough for 'is'"

[04:19] <camelia> rakudo-moar fa5215b61: OUTPUT: ¬´ok 1 - a string and a number are equal enough for 'is'‚ê§¬ª

[04:20] <timotimo> see, "is" uses stringification to compare stuff

[04:20] <timotimo> so anything that will .Str to the same thing as another thing will result in a passing test

[04:20] <timotimo> you probably want is-deeply, or cmp-ok

[04:20] <timotimo> m: use Test; cmp-ok 1.5, '==', 1.5

[04:20] <camelia> rakudo-moar fa5215b61: OUTPUT: ¬´ok 1 - ‚ê§¬ª

[04:21] <holyghost> ok thx again

[04:21] <timotimo> don't forget about fixing .length, too

[04:21] *** Xliff joined
[04:21] <holyghost> length has been fixed

[04:21] <timotimo> m: my $p = 0.1; loop (my $i = $p; $ < 1.0; $p++) { say "p is $p" }

[04:21] <timotimo> whoops

[04:21] <timotimo> m: my $p = 0.1; loop (my $i = $p; $p < 1.0; $p++) { say "p is $p" }

[04:22] <buggable> New CPAN upload: Mathx-Stat-0.1.16.tar.gz by HOLYGHOST http://modules.perl6.org/dist/Mathx::Stat:cpan:HOLYGHOST

[04:22] *** p6bannerbot sets mode: +v Xliff

[04:22] <camelia> rakudo-moar fa5215b61: OUTPUT: ¬´(timeout)Use of uninitialized value of type Any in numeric context‚ê§p is 0.1‚ê§  in block <unit> at <tmp> line 1‚ê§Use of uninitialized value of type Any in numeric context‚ê§  in block <unit> at <tmp> line 1‚ê§Use of uninitialized value of type Any ‚Ä¶¬ª

[04:22] <camelia> rakudo-moar fa5215b61: OUTPUT: ¬´p is 0.1‚ê§¬ª

[04:22] <timotimo> your loop only does a single iteration

[04:22] <holyghost> Xliff: hi, if you want to PR Mathx-Stat with .population -> $.population fiexes 

[04:22] <timotimo> and $i is created, assigned to, but never used

[04:23] <holyghost> s/fiexes/fixes

[04:24] <Xliff> holyghost: I am a little under the weather to day. Keep making fixes in your repository and I can pick it all up in the same PR.

[04:24] <holyghost> Xliff: ok, there's 2 tests now

[04:24] <Xliff> OK, good!

[04:24] <Xliff> G'night.

[04:25] <holyghost> gn

[04:25] <timotimo> testing only Expectance and Variance on a single Distribution is probably not enough

[04:25] <timotimo> after all, an implementation that just always returns 0.5 would also pass these tests

[04:28] <timotimo> that's the idea behind TDD's prescription to write tests and then implement only barely enough to make the test pass, and nothing more, and then write more tests that actually fail

[04:29] <timotimo> so that you don't accidentally write a very specific test for a very complex implementation and call it finished

[04:29] <timotimo> so if your test is "cmp-ok $pop.Expectance, '==', 0.5" your implementation should be "return 0.5", then you write more tests

[04:30] <timotimo> until it's to your liking and you're certain that the tests actually express everything your code is supposed to do

[04:30] <timotimo> also, test with unexpected values, too

[04:31] <timotimo> what happens if i $pop.add(Nil), what happens if i $pop.add("hello"), what happens if i $pop.add(Inf) or NaN, or 3+5i, ...

[04:31] <holyghost> It's on github/theholyghost2, I didnt update cpan

[04:31] <timotimo> that's good

[04:31] <holyghost> ok then I understood

[04:32] <holyghost> add works fir e.g. genetic algorithms and are 'lossless'

[04:32] <holyghost> s/fir/for

[04:32] <holyghost> It's not fool-proof I mean

[04:33] <holyghost> one test has been fixed

[04:33] <holyghost> $p you mentioned

[04:34] <timotimo> i saw, looks better

[04:34] <holyghost> those 2 tests should work now

[04:34] <timotimo> but i did not test it yet, and i should go to bed very soon

[04:34] <holyghost> ok

[04:34] <holyghost> thx for the help, better you go to sleep than you help me more

[04:35] *** sacomo joined
[04:35] <timotimo> m: my $dist = Mix.new(0.1, 0.2 ... 1.0); say "expectance is { $dist.sum / $dist.elems }"

[04:35] <camelia> rakudo-moar fa5215b61: OUTPUT: ¬´Cannot resolve caller Numeric(Pair: ); none of these signatures match:‚ê§    (Mu:U \v: *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[04:35] *** p6bannerbot sets mode: +v sacomo

[04:36] <timotimo> aha

[04:36] <holyghost> nice

[04:36] <timotimo> m: my $dist = Mix.new(0.1, 0.2 ... 1.0); say "expectance is { $dist.total / $dist.elems }"

[04:36] <camelia> rakudo-moar fa5215b61: OUTPUT: ¬´expectance is 1‚ê§¬ª

[04:36] <timotimo> that doesn't seem right

[04:36] <holyghost> 0.1

[04:36] <timotimo> m: my $dist = Mix.new(0.1, 0.2 ... 1.0); say $dist.perl

[04:36] <camelia> rakudo-moar fa5215b61: OUTPUT: ¬´(0.4=>1,0.9=>1,0.8=>1,0.6=>1,1.0=>1,0.5=>1,0.2=>1,0.3=>1,0.7=>1,0.1=>1).Mix‚ê§¬ª

[04:37] <timotimo> m: my $dist = Mix.new(0.1, 0.2 ... 1.0); say $dist.total

[04:37] <camelia> rakudo-moar fa5215b61: OUTPUT: ¬´10‚ê§¬ª

[04:37] <timotimo> ah

[04:37] <timotimo> that's the total of the weights

[04:38] <holyghost> \/ $sum

[04:38] <timotimo> m: my $dist = Mix.new(0.1, 0.2 ... 1.0); say "expectance is { $dist.keys.sum / $dist.elems }"

[04:38] <camelia> rakudo-moar fa5215b61: OUTPUT: ¬´expectance is 0.55‚ê§¬ª

[04:38] <holyghost> ok damn :-)

[04:39] <timotimo> m: my $dist = Mix.new(0.1, 0.2 ... 1.0); my $exp = $dist.keys.sum / $dist.elems; say "expectance is $exp"; my $var = (($dist.keys >>->> $exp) >>**>> 2) / ($dist.elems - 1); say "variance is $var"

[04:39] <camelia> rakudo-moar fa5215b61: OUTPUT: ¬´expectance is 0.55‚ê§variance is 1.111111‚ê§¬ª

[04:41] <timotimo> oh

[04:42] <timotimo> those .elems must be .total instead, and the keys have to be multiplied by their weights

[04:42] <timotimo> otherwise it only works if you have only one of each

[04:42] <holyghost> fixed Epxectance 0.55

[04:42] <holyghost> s/Epxectance/Expectance

[04:42] *** silug left
[04:43] <holyghost> So DistributionPopulation works, that's the most important thing next to the probability class

[04:44] <holyghost> I cannot use mix as the @.population changes 

[04:44] <timotimo> well, yeah, mixes are associative, @.population requires a positional instead

[04:45] <holyghost> ok

[04:46] <holyghost> I have make Probability.pm6 tests

[04:48] <holyghost> s/have/have to

[04:48] <timotimo> good night!

[04:48] <holyghost> gn!

[04:51] <holyghost> Xliff: do a PR later on today, the only thing you have to do is debug Probability.pm6

[04:53] <holyghost> I have too much trouble to do it on my own

[04:55] *** silug joined
[04:55] <holyghost> Xliff: oh I forgot you are a bit weathered today :-)

[04:56] *** p6bannerbot sets mode: +v silug

[05:13] *** hph^ left
[05:16] *** delon joined
[05:16] <holyghost> Xliff: made some more fixes

[05:17] *** p6bannerbot sets mode: +v delon

[05:29] <holyghost> okm I have a Bayes test now, it's on github

[05:30] <holyghost> s/okm/ok,

[05:42] <holyghost> added conditional probability tests

[05:43] <holyghost> Xliff : I'm done with updating, if you have time this week, go ahead with the PR

[05:54] *** curan joined
[05:54] *** p6bannerbot sets mode: +v curan

[06:08] *** Kaiepi left
[06:16] *** sacomo left
[06:17] *** sacomo joined
[06:17] *** TeamBlast left
[06:17] *** TeamBlast joined
[06:17] *** p6bannerbot sets mode: +v sacomo

[06:18] *** p6bannerbot sets mode: +v TeamBlast

[06:20] *** lizmat left
[06:20] *** troys left
[06:24] *** Kaiepi joined
[06:24] *** molaf left
[06:24] *** p6bannerbot sets mode: +v Kaiepi

[06:28] *** jmerelo joined
[06:29] *** p6bannerbot sets mode: +v jmerelo

[06:29] <jmerelo> Hi

[06:32] *** kurahaupo joined
[06:32] <Kaiepi> o/

[06:32] *** p6bannerbot sets mode: +v kurahaupo

[06:34] *** kurahaupo_ left
[06:45] *** metadude joined
[06:45] *** p6bannerbot sets mode: +v metadude

[06:46] <metadude> Hello

[06:47] *** sauvin joined
[06:47] *** p6bannerbot sets mode: +v sauvin

[06:47] <jmerelo> Hi!

[06:47] <metadude> How are you?

[06:50] <metadude> Was wondering if there was something akin to the slime live coding environment (lisp) for p6.

[06:55] <metadude> Although I have to go right now, I'll check the log tomorrow if anyone left a reply. Maybe could resume the converstation tomorrow. Good night to all!

[06:55] *** metadude left
[06:56] <jmerelo> I'm not sure what that is... If it's an IDE, there's comma

[07:00] *** noganex joined
[07:00] *** p6bannerbot sets mode: +v noganex

[07:03] *** noganex_ left
[07:04] *** vrurg left
[07:04] *** vrurg joined
[07:05] *** p6bannerbot sets mode: +v vrurg

[07:08] *** domidumont joined
[07:09] *** p6bannerbot sets mode: +v domidumont

[07:09] *** andrzejku joined
[07:09] <ufobat___> good morning

[07:09] *** p6bannerbot sets mode: +v andrzejku

[07:14] <jmerelo> Hey

[07:19] <holyghost> jmerelo: I'm tired to work on, but I have 9 tests in github.com/theholyghost2 Mathx::Stat, I'll fixify later

[07:23] <holyghost> I am going to let Xliff loose on it, then put the working module in cpan. Xliff has to debug Probability.pm6

[07:23] <holyghost> The rest should work

[07:26] <holyghost> jmerelo: thx for helping me onto github

[07:36] *** robertle joined
[07:37] *** p6bannerbot sets mode: +v robertle

[07:41] *** dct joined
[07:41] *** p6bannerbot sets mode: +v dct

[07:45] <holyghost> Xliff: I sent you some email, I hope you copeour promises with y

[07:45] <holyghost> Xliff: I sent you some email, I hope you cope with your promises

[07:47] <holyghost> rogue serving :-)

[07:47] *** dct left
[08:04] <jmerelo> holyghost: no prob

[08:09] <holyghost> jmerelo: you're working now ?

[08:09] <holyghost> I mean, you're busy ?

[08:09] <jmerelo> just killing time, but I'm leaving in a minute

[08:10] <holyghost> right

[08:10] <holyghost> So you join early :-) Then go off to work

[08:10] <jmerelo> holyghost: not today, I'm on a personal errand. I usually leave for work around 8:30

[08:10] <holyghost> it's 8:12

[08:10] *** haukex joined
[08:11] <jmerelo> but I have no morning classes on Tuesday and Thursday, so if I have no appointments or meetings I stay at home.

[08:11] *** p6bannerbot sets mode: +v haukex

[08:11] <holyghost> ok

[08:12] <holyghost> Lots of people are younger than me, then they explain me what to work on :-)

[08:12] <holyghost> It's probably the IQ :-)

[08:12] <jmerelo> holyghost: don't know younger. I was born in 65

[08:14] <holyghost> me in 77

[08:14] <jmerelo> so, not younger :-)

[08:14] <holyghost> indeed :-)

[08:14] <holyghost> I thought you were older

[08:14] <holyghost> You're older than Stallman :-)

[08:14] <jmerelo> maybe I look older :-)

[08:15] <holyghost> So when was your first perl 5 version ?

[08:15] <jmerelo> 93

[08:15] <holyghost> me 2000

[08:15] <holyghost> I knew perl in debian in 98

[08:16] <holyghost> didn't program in it except for my Mr. thesis to comply with dat for genetic algorithms/bioinfo

[08:16] <holyghost> s/dat/data

[08:16] <jmerelo> I had a Silicon Graphics Indigo. I probably downloaded and compiled it...

[08:16] <holyghost> coolness

[08:16] <holyghost> I had an Indy and O2

[08:16] <jmerelo> holyghost: you did genetic algorithms? did you publish anything?

[08:17] <holyghost> yes, see springer-verlag, Piet van Remortel

[08:17] <holyghost> NK fitness landscapes

[08:17] <holyghost> that's my Master thesis CS

[08:17] <jmerelo> Wow

[08:18] <holyghost> I invented NKd

[08:18] <jmerelo> I know personally Kauffman, as a matter of fact...

[08:18] <holyghost> by reading my book carefully

[08:18] <jmerelo> This it? https://link.springer.com/chapter/10.1007/3-540-45443-8_11

[08:18] <holyghost> I cannot load because of old SSL

[08:18] <jmerelo> this too? https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-7-43

[08:19] <holyghost> this is it :https://link.springer.com/content/pdf/10.1007/3-540-36553-2_11.pdf

[08:19] <holyghost> don;t know

[08:19] <holyghost> stupid keyboard

[08:19] <holyghost> *don't know

[08:19] <jmerelo> You worked with Bernard Manderick?

[08:19] <holyghost> yes

[08:20] <jmerelo> Wow

[08:20] <holyghost> I entered a Ph. D wth him, but I didn't work enough

[08:20] <holyghost> I got my Ph.D in 2013

[08:20] <holyghost> graduated at Tokyo Uni

[08:20] <holyghost> I didn't become a fellow at the VUB

[08:21] <holyghost> So internationally I have a Ph. D I worked at VUB uni before for pm.org

[08:21] <jmerelo> Also in Biology?

[08:21] <jmerelo> Interesting

[08:21] <holyghost> No SOFT department CS

[08:22] <holyghost> This is why I am into things like agents, I took most classes of AI instead of OOP

[08:22] <holyghost> AI/Adaptive Systems

[08:22] <holyghost> GA

[08:22] *** rindolf joined
[08:22] <jmerelo> Just submitted this paper yesterday to a conference: https://github.com/JJ/2019-concurrent-ea-evostar/

[08:22] <jmerelo> Concurrent evolutionary algorithms in Perl 6

[08:23] <holyghost> sure, so you're a fellow, nice

[08:23] <jmerelo> Code is here: https://github.com/JJ/p6-algorithm-evolutionary-simple/

[08:23] *** p6bannerbot sets mode: +v rindolf

[08:23] <holyghost> my SSL version is too low too look at it

[08:23] <holyghost> on here, on my linux box

[08:23] <jmerelo> Leaving now

[08:23] <jmerelo> Cheers!

[08:24] *** jmerelo left
[08:24] <holyghost> ok thx, CYA

[08:48] *** dakkar joined
[08:49] *** p6bannerbot sets mode: +v dakkar

[08:55] *** lookatme_q joined
[08:56] *** p6bannerbot sets mode: +v lookatme_q

[09:14] *** finanalyst left
[09:20] *** kensanata joined
[09:20] *** p6bannerbot sets mode: +v kensanata

[09:22] *** cydf joined
[09:23] *** p6bannerbot sets mode: +v cydf

[09:36] <masak> moritz, jnthn: thank you for your replies.

[09:37] <masak> I'll try to put my unease into precise words.

[09:37] <masak> grammar rules, on the best of days, leak.

[09:38] <masak> m: sub infix:¬´->¬ª($l, $r) { "$l and $r, baby" }; say "forty" -> "two"; my $x; for 1, 2, 3 -> $x { say $x }

[09:38] <camelia> rakudo-moar fa5215b61: OUTPUT: ¬´forty‚ê§1‚ê§2‚ê§3‚ê§¬ª

[09:39] <masak> I can declare a `->` infix operator, but because `->` is also a *stopper*, it doesn't behave like infixes usually do.

[09:40] <masak> the whole concept of a stopper is because an inner expression rule needs to limit itself because a caller rule needs the reins back.

[09:41] <masak> there's something about all that that's very... non-composable.

[09:42] <masak> I'm a much bigger fan of how quoting is handled. in that case, it feels like things were built up using composable parts.

[09:52] <moritz> masak: the real problem is that the Perl 6 grammar is very... *intricate*, and so extending it requires some knowledge of that intricacy

[09:57] *** haptiK29 joined
[09:57] <masak> I mean, that bit is fine

[09:57] *** p6bannerbot sets mode: +v haptiK29

[09:58] <masak> I'm just sad when "knowledge of that intricacy" means that concerns can't be fully separated and abstractions leak into each other

[09:58] <moritz> but you can structure a grammar to always prefer the stopper, or always prefer the infix, whatever you want

[09:59] <moritz> <infix> || <stopper> or <stopper> || <infix>

[09:59] <masak> not much of a stopper if it defers to the infix :P

[09:59] <masak> that particular problem, I guess, Perl 6 has but not many other languages, because Perl 6 doesn't use parentheses there

[10:00] <masak> so it needs stoppers like '->' and '{'

[10:00] <masak> that's also why you can't use curly braces in destructuring in Perl 6, because '{' is a stopper

[10:00] <masak> in the end, the convenience of no parentheses means things get more "crowded" and you need stoppers

[10:02] <masak> a related one (which is also a WAT when using the language) is that you can put `==>` first on a line, *except* when the previous line ended in a block -- because of the eat_terminator behavior

[10:02] *** haptiK29 left
[10:13] *** kerframil joined
[10:13] *** p6bannerbot sets mode: +v kerframil

[10:16] *** tobs` joined
[10:16] *** p6bannerbot sets mode: +v tobs`

[10:40] *** scimon joined
[10:41] *** p6bannerbot sets mode: +v scimon

[10:45] *** Kaypie joined
[10:45] *** Kaiepi left
[10:46] *** p6bannerbot sets mode: +v Kaypie

[10:55] *** eiro left
[10:56] *** x[LGWs4x4i]uG2N0 left
[10:56] *** holyghost left
[10:57] *** holyghost joined
[10:57] *** zakharyas joined
[10:57] *** p6bannerbot sets mode: +v holyghost

[10:58] *** p6bannerbot sets mode: +v zakharyas

[11:00] *** lizmat joined
[11:00] *** p6bannerbot sets mode: +v lizmat

[11:00] *** haukex left
[11:07] * lizmat clickbaits https://p6weekly.wordpress.com/2018/11/12/2018-45-46-post-diwali/

[11:07] *** ExtraCrispy left
[11:08] *** ExtraCrispy joined
[11:08] *** p6bannerbot sets mode: +v ExtraCrispy

[11:24] <abraxxa> lizmat: the links to the irc logs seem to be off

[11:24] <abraxxa> lizmat: https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-11-03#l241 and https://colabti.org/irclogger/irclogger_log/perl6?date=2018-10-25#l468

[11:24] * lizmat checks

[11:25] <lizmat> WTF

[11:26] <lizmat> looks like the search page of colabti is generating wrong links :-(

[11:28] <lizmat> abraxxa++  # fixed

[11:28] <abraxxa> lizmat: thanks!!!

[11:29] *** leont joined
[11:29] *** p6bannerbot sets mode: +v leont

[11:38] *** Zoffix joined
[11:38] *** p6bannerbot sets mode: +v Zoffix

[11:39] <Zoffix> lizmat: why in the weekly do you say I "started" anything in October 2018, when I was actually finishing it? The 6.d-prep repo had asking Larry to rule on the alias a month before the release since July 2017: https://github.com/perl6/6.d-prep/commit/0b45a1f1431fcc285a07d43fa9f918906a7e7eb3#diff-b7b1e314614cf326c6e2b6eba1540682

[11:39] <yoleaux> 10 Nov 2018 17:32Z <moritz> Zoffix: the TLS cert for perl6.party has expired

[11:41] <lizmat> I think I wrote "started again" ?

[11:41] *** zakharyas left
[11:41] <Zoffix> lizmat: why do you say I did anything "very expediently" when per that TODO item the decision on the alias was planned to be a 6.d deliverable? A fact that was also corroborated by the Perl 6 Pumpkin: https://github.com/perl6/user-experience/issues/33#issuecomment-436809173

[11:42] <Zoffix> lizmat: and what exactly did I omit in "Except that in a lot of cases, ‚ÄúPerl 6‚Äù was simply omitted, effectively making it a rename of ‚ÄúPerl 6‚Äù to ‚ÄúRaku" when I made exactly TWO official uses of the alias: the "Raku Perl 6" on the cover of the release brochure and the addition of "Raku" to the glossary

[11:43] <Zoffix> "This in turn was perceived as an attack on his person by Zoffix Znet"

[11:43] <Zoffix> It's not an attack on Zoffix Znet. It's an attack on truth.

[11:46] <Zoffix> You're exploiting your wide reach to the Perl 6 users to vilify me and push a false narative that I did something evil, when in reality the plans were in place and well-announced since July 2018.

[11:46] *** zakharyas joined
[11:46] *** Zoffix left
[11:46] <lizmat> well, the exploiting can be very easily fixed

[11:46] *** p6bannerbot sets mode: +v zakharyas

[11:47] *** Zoffix joined
[11:47] *** p6bannerbot sets mode: +v Zoffix

[11:47] <Zoffix> *July 2017!

[11:48] *** lizmat left
[11:48] *** lizmat joined
[11:48] *** p6bannerbot sets mode: +v lizmat

[11:50] * lizmat is considering her options

[11:51] *** pecastro joined
[11:51] <jnthn> lizmat: What is 'Except that in a lot of cases, ‚ÄúPerl 6‚Äù was simply omitted, effectively making it a rename of ‚ÄúPerl 6‚Äù to ‚ÄúRaku‚Äù.' referring to, precisely?

[11:51] *** p6bannerbot sets mode: +v pecastro

[11:52] <Zoffix> lizmat: "But people have continued badgering Larry Wall for another name.". I badgered no one. I made PRECISELY ONE direct request to Larry Wall. It was my letter I wrote a month before 6.d release.

[11:52] <lizmat> Zoffix: wrt to badgering: I did not state that it was *you* who was badgering him

[11:53] <lizmat> many people have done that for a long time

[11:53] <Zoffix> lizmat: well, that's the result your articles had. That people think I pestered and annoyed Larry and he couldn't take it anymore and that's why he made Raku.

[11:56] <lizmat> jnthn: one case: https://twitter.com/zoffix/status/1059301282178052096

[11:56] <Zoffix> lizmat: that's my private account. 

[11:57] *** Zoffix left
[11:57] <lizmat> *ALL* of the announcements re Raku / Diwali have been from your personal account

[11:57] <lizmat> how can people see the difference between the official stance and your private interpretation ?

[11:57] *** Zoffix joined
[11:57] *** p6bannerbot sets mode: +v Zoffix

[11:58] <Zoffix> A fair point. That did not occur to me.

[11:59] <Zoffix> An Issue is already opened for that: https://github.com/perl6/user-experience/issues/32

[12:00] <jnthn> Indeed, going forward it would be wise to make sure we *do* have a place that counts as official, to avoid such questions.

[12:01] <leont> Agreed

[12:01] <lizmat> re other cases where "Perl 6" was omitted: I think it was in reactions on reddit, but I may have confused reactions of other people with yours in that respect

[12:08] * lizmat has added edits to the P6W

[12:10] *** leont left
[12:11] <jnthn> I guess caching means they aren't visible yet...

[12:11] <jnthn> lunch, back in a bit

[12:12] <Zoffix> lizmat: FYI: https://twitter.com/zoffix/status/1062315776768704513

[12:13] <lizmat> Zoffix: could you explain to me how you came to "it was clear to me she despised me before" in https://www.reddit.com/r/perl6/comments/9uqsxl/a_warning_to_the_community/e986r73/ ?

[12:14] <lizmat> because I don't, and if I've given that impression, I'd like to be given the possibility to correct that

[12:16] <lizmat> jnthn: updated the post again, should be visible now

[12:21] <Zoffix> lizmat: often when I raise concerns about some change or Issue you just revert the commit or abruptly leave the discussion. I get the impression that as soon as I'm involved you just want to bail out.

[12:23] *** vike1 left
[12:23] <lizmat> well, that could also mean I value your judgment 

[12:24] <lizmat> or that that commit isn't that important to me

[12:24] <lizmat> in the future, I will be more specific as to why I reverted a commit so that it is at least clear whether I disagreed or not

[12:25] <Zoffix> Perhaps, it could be helpful to say "OK, I'm going to revert" before doing the actual revert, so it doesn't seem like the revert was done out of anger or anything like that.

[12:25] <lizmat> so we can prevent the idea that it is something personal

[12:25] <lizmat> indeed

[12:25] <lizmat> although, I must admit to being human

[12:26] <lizmat> so it's quite possible that I have done that in the past

[12:27] <lizmat> but then it was never because it was you who made the call

[12:27] *** nebuchadnezzar left
[12:27] *** nebuchadnezzar joined
[12:27] <Zoffix> Noted.

[12:27] * Zoffix &

[12:27] *** Zoffix left
[12:28] *** p6bannerbot sets mode: +v nebuchadnezzar

[12:29] *** vike1 joined
[12:29] *** p6bannerbot sets mode: +v vike1

[12:30] <lizmat> and if I was angry, I was probably angry at myself because it was pointed out to me that there were downsides to my commit

[12:30] <lizmat> and they made sense

[12:33] <lizmat> FWIW, I think Zoffix and I agree on most points wrt to the future of language we call Perl 6

[12:34] <lizmat> we just don't agree on how to handle the naming of the language

[12:35] <lizmat> also: more generally on reverting my own commits

[12:35] <lizmat> I've learned the hard way that putting things in branches, generally means that they will be ignored

[12:36] *** shareable6 left
[12:36] *** shareable6 joined
[12:36] *** ChanServ sets mode: +v shareable6

[12:36] <lizmat> the Perl 6 community, imo, is too small to have people with time enough to check out any branches

[12:37] *** p6bannerbot sets mode: +v shareable6

[12:37] <lizmat> so I've gotten used to just pushing to master, because *that* will make sure things will get testes

[12:37] <lizmat> *tested

[12:37] <lizmat> by real "bleed" user

[12:37] <lizmat> as was recently shown with my HYPER refactor

[12:38] <lizmat> sometimes, the problems that come up after that, are easily handled, so quickly fixed (see also the HYPER refactor the past week)

[12:38] <lizmat> sometime they show deeper issues, and then the best thing is to revert (at least until after the next release)

[12:39] <lizmat> since Zoffix is one of the more active members, his remarks have caused more reverts of my code than anybody else, I think

[12:39] <lizmat> but he was only the messenger in those

[12:39] <masak> lizmat: the point about branches vs master is a deep one, and the causes/reasons (I think) extend beyond "the Perl 6 community is too small"

[12:40] <masak> lizmat: for a while now I've been curious about "trunk-based development", so-called

[12:40] <masak> not just because "people don't look at branches", but also because "branches are inventory"

[12:41] <masak> (something that costs effort to maintain and keep up-to-date, even when done right)

[12:41] <masak> lizmat: ooc, when you say people don't look at branches, were those branches sometimes or always accompanied by a pull request on github?

[12:43] <lizmat> in my case, never

[12:44] <masak> ok. then I'm almost completely unsurprised they didn't get much attention ;)

[12:44] <lizmat> masak: so you say I should turn everything into pull requests?

[12:44] <lizmat> or that I work in a branch, and then at the end make all the work a single PR ?

[12:45] <masak> no, I'm not being prescriptive currently

[12:45] <masak> but I will say that (to me) a branch is something bordering on private/backup, whereas a PR is a semi-public request for review and comment

[12:46] <lizmat> well, my "newio" branch was pretty public at the time

[12:46] <masak> not saying there aren't exceptions

[12:46] <[ptc]> it's almost like there should be something like an "audit request" as opposed to a "pull request"

[12:46] <masak> heh. specifically, I'm not suggesting that by turning everything into PRs, you will suddenly get massive eyeballs :P

[12:46] <[ptc]> especially for people who have a commit bit

[12:46] <masak> [ptc]: what, in your view, would be the difference?

[12:46] <[ptc]> i.e. some way to say "hey, could someone have a look at this please before I merge?"

[12:47] *** leont joined
[12:47] <[ptc]> masak: well, a pull request (to me) is something that someone without a commit bit can submit

[12:47] *** lucasb joined
[12:47] *** p6bannerbot sets mode: +v leont

[12:48] <masak> lizmat: I fondly remember a consulting thing Edument did for a client two years back. there were three of us. we made ~650 PRs in eight months. (to each other!)

[12:48] <[ptc]> masak: it always seems odd to me to see people submitting PRs who could just submit the code directly

[12:48] <masak> [ptc]: not to me

[12:48] *** p6bannerbot sets mode: +v lucasb

[12:48] <masak> if that's the difference, then I already use PRs like your "audit requests" :)

[12:48] <masak> but you're right that the name is confusing/unfortunate

[12:48] <[ptc]> masak: however, it would be nice to have a way for someone with a commit bit to say, "could you look over what I've done, please?"

[12:48] <masak> I think PRs started out in Github as something external/non-commitbitty

[12:49] <masak> yes, Github has that nowadays. requests for review.

[12:49] <[ptc]> yeah and PRs on GitHub are external, hence the way I think about them

[12:49] <[ptc]> anyway, just my 2c :-)

[12:49] <masak> [ptc]: they're not only external any more.

[12:49] <masak> 007 has 7 open and 91 closed PRs. I think a handful of those are external.

[12:50] <chsanch> At work, we use PR for everything, I think is a good way to work, someone else can review the changes and if see something wrong one can add commits to fix something else before those changes get merged in master

[12:50] <masak> yes, exactly

[12:50] <masak> it's almost as if a main benefit is sharing the work/ownership

[12:51] <[ptc]> but then it can be a hurdle to getting stuff done if one can't just push to master

[12:51] <[ptc]> especially for small teams

[12:51] <masak> I used to think so too

[12:51] <[ptc]> maybe there's a minimum team size?

[12:51] <masak> and then I broke master in like, 10 different ways by skipping the PR/Travis step

[12:51] <[ptc]> it sort of requires more discipline, doesn't it?

[12:52] <masak> nah, it's just a habit ;)

[12:52] <[ptc]> :-)

[12:52] <masak> it's not a *lot* more work to push up a PR and immediately merge it yourself

[12:52] <moritz> I'd say there's a workflow for all requirements

[12:52] <chsanch> Yah, it could be, but sometimes master could get really messed up if someone push something wrong 

[12:52] <lizmat> "	it's not a *lot* more work to push up a PR and immediately merge it yourself"

[12:52] <lizmat> what is the difference with pushing to master with that ^^^

[12:53] <masak> lizmat: Travis. paper trail.

[12:53] <lizmat> Travis I see, paper trail I don't

[12:53] <lizmat> a commit is a paper trail, is it not ?

[12:53] <masak> oh! I use the PR *description* differently than I use commit comments.

[12:53] <masak> the former are a bit more "overview"/goals

[12:54] <[ptc]> doesn't Travis check the push anyway?

[12:54] <lizmat> [ptc]: yes it does

[12:54] <masak> yes, of course. but at that point master is already broken

[12:54] <lizmat> and it takes 1hour+ nowadays to check

[12:54] <masak> which (I hope!) is a non-goal

[12:54] <[ptc]> masak: yes, true

[12:55] <lizmat> fwiw, I (almost) always spectest before committing

[12:55] <lizmat> last week had 2 slipups, I admit, but those were the first in a long time

[12:56] *** dogbert17 joined
[12:56] <masak> lizmat: I'm not here to argue. :) but I want you to know that you're arguing the side of "we don't need checks because there are no slip-ups" :P

[12:56] <lizmat> and for those I plead emotional distress  :-)  (not seriously)

[12:56] *** p6bannerbot sets mode: +v dogbert17

[12:56] <masak> which is... not an argument most software development needs

[12:57] <chsanch> I've learn the hardway to never do push to master directly, mostly when working with more people, or at least limit the access to push commits to master to just the admins. But is just one of the other ways to manage the work flow

[12:57] <lizmat> masak: no, I'm arguing that commits get checked anyway, and fixes can be made quickly

[12:57] <[ptc]> theoretically, the tests should pass before one pushes, but I realise that can be a lofty goal, especially with long-running test suites...

[12:57] <lizmat> and then some things can break *without* Travis / spectest noticing it (as also was shown last week)

[12:57] <lizmat> [ptc]: I consider 6 mins not long runninng

[12:58] <masak> lizmat: ok, fine. it's essentially jnthn's argument too. I disagree, but only on the level of weights/priorities/preferences.

[12:58] <masak> I guess I enjoy catching things *before* merging to master

[12:58] <[ptc]> lizmat: is the spectest only 6 mins long?  In that case, that's ok

[12:58] <lizmat> e.g. (1,2,3).Bag >>+>> 1  is still broken  :-(

[12:58] <[ptc]> lizmat: some people think that 1 minute is long...

[12:59] <lizmat> ok, actually, more like 7.5 minutes I just realize

[12:59] <lizmat> but yeah.. it's a good moment to step away from the keyboard

[12:59] <masak> perfect for making tea

[12:59] <lizmat> before actually committing and pushing

[12:59] <lizmat> indeed

[12:59] <[ptc]> that's not a big deal.  I've heard of people having to wait hours for a full test run to run

[12:59] <lizmat> on my MBP with TEST_JOBS=8 it was 745 seconds last night

[13:00] <masak> again, I'm not prescribing anything. but this discussion made me realize that it's maybe a bit unusual to be using "internal PRs" as much as I do nowadays.

[13:00] <[ptc]> masak: I guess my conceptual issue is that if I can merge a PR into master, why am I creating a PR in the first place?

[13:00] <lizmat> masak: whatever works for you, works for you  :-)

[13:01] <[ptc]> masak: I've seen people do this before: submit a PR and then directly afterwards merge it themselves.  That was... weird to watch

[13:01] <masak> just to be clear, I also belive it raises quality, not least because Travis catches a *lot*

[13:01] <masak> but it's also a platform for discussing/evaluating the change

[13:01] <lucasb> Just making a note of: https://go-review.googlesource.com . I guess not a single commit goes into Go without getting scrutinized. "code review" before commiting always looks like a good idea, no?

[13:02] <lizmat> lucasb: it does, if you have enough eyes

[13:02] <lizmat> I wouldn't have been able to do the amount of work on Rakudo that I did if I had had to wait for scrutinization every time

[13:02] <moritz> I've once had a candidate whose github project was full of such things

[13:02] <moritz> and then they even told me they did code reviews

[13:02] <masak> oh that reminds me: if someone would like to review the top five PRs in https://github.com/masak/007/pulls , I'd be delighted

[13:03] <moritz> and not a single PR contained any code review comments

[13:03] <masak> they've been waiting around for sergot for a while now, but he's been quite busy lately :)

[13:04] <masak> moritz: 007 is like that sometimes. then again, sometimes there is discussion, and valuable comments

[13:04] <lucasb> See? the general feeling looks like "We don't want/need code review" :)

[13:04] <masak> (and then there's The Issue, of which We Do Not Speak...)

[13:04] <masak> lucasb: wait, what? how is that the general feeling? :)

[13:05] <lucasb> I retracted :)

[13:05] <lizmat> FWIW, I welcome code review *always*

[13:05] * masak .oO( git revert! git revert! )

[13:05] <moritz> masak: there's a bit difference between sometimes and always

[13:05] <lizmat> please please please review my code

[13:06] <masak> moritz: aye

[13:06] <masak> moritz: still, I find I make PRs more nowadays, in cases where I would previously just commit to master

[13:06] <masak> moritz: if there are no reviews or comments, I don't consider that a big failure

[13:07] <[ptc]> this is probably one of those grey areas, where it depends upon project and interactions therein

[13:07] <[ptc]> it can reduce project velocity if *all* commits have to be scrutinised first...  Especially on a small team

[13:08] <masak> [ptc]: yes -- but (more)

[13:08] <masak> [ptc]: taking a step back, I think successfull teams also communicate well

[13:08] <masak> I think this is *uncontroversially* true

[13:08] <[ptc]> in my current team we're trying to use pair programming more so that we can improve code quality; both when working together and apart

[13:08] <masak> so it kind of comes down to, if the team is not doing PRs, maybe they're doing something else, some other form of communication?

[13:08] <moritz> at $work, for one component, we have a policy of always triggering code review when one of the base libraries changes

[13:08] <[ptc]> masak: I agree wholeheartedly with that

[13:09] <moritz> but there are so many small subsystems for different tasks that we don't tend to review every commit to each of those

[13:09] <masak> I mean, what changes are (a) super-urgent and need to go on master *now*, but (b) not worth someone's review/second opinion?

[13:10] <moritz> data leaks with an obvious fix

[13:11] <moritz> in which case I'd still do a code review after it went to master, but getting it to production is more important

[13:11] <[ptc]> typos

[13:11] <[ptc]> formatting changes, fixes to bring comments up to date

[13:12] <lizmat> [ptc] I've had cases (in the far past) where a change in comment would bring the program down

[13:12] <lizmat> but yeah, generally that shouldn't happen  :-)

[13:12] <[ptc]> a lot of my commits are really small, so it doesn't make a huge amount of sense for someone else to review them before they go into master

[13:12] <[ptc]> lizmat: in the comment?  wow

[13:13] <[ptc]> lizmat: how did that happen?  I'm intrigued

[13:13] <lizmat> yeah... if I recall correctly, it was a problem in buffering the code, with a newline (CRLF) just across a buffer boundary or not

[13:14] <lizmat> it was literally a 1 char change at the time

[13:14] *** x[LGWs4x4i]uG2N0 joined
[13:14] *** ZofBot joined
[13:14] *** ChanServ sets mode: +v ZofBot

[13:14] *** p6bannerbot sets mode: +v ZofBot

[13:15] <[ptc]> oh dear

[13:15] *** p6bannerbot sets mode: +v x[LGWs4x4i]uG2N0

[13:15] <[ptc]> what language was that in?  That sounds like a Fortran kind of problem

[13:16] * [ptc] remembers being bitten by the 6 character variable name limit in Fortran

[13:18] *** dalek left
[13:18] *** dalek joined
[13:18] *** ChanServ sets mode: +v dalek

[13:19] *** p6bannerbot sets mode: +v dalek

[13:24] <moritz> and fun fact; it was left to the compiler what to do with the extra characters

[13:25] <moritz> some just silently ignored the extra chars, some produced an error, some ignored the limit and used the full name

[13:25] <moritz> silently ignoring the extra chars sounds like a really "sweet" move

[13:28] <lizmat> [ptc]: I think it was an early version of Perl 5, but am definitely not sure

[13:29] <[ptc]> moritz: yeah, that kind of behaviour really confused the hell out of me

[13:29] <[ptc]> especially considering the only programming language I'd learnt before was Matlab...

[13:30] *** rba joined
[13:30] <lizmat> with regards to size of commits: I try to keep them as small and contained as possible, to allow for easier bisecting

[13:30] <lizmat> in that sense, bisectable6 has changed the way I code

[13:31] *** p6bannerbot sets mode: +v rba

[13:33] *** sjoshi joined
[13:34] *** p6bannerbot sets mode: +v sjoshi

[13:36] <lizmat> also: bisectable6 has made me worry less about changes I commit

[13:37] <lizmat> because it usually limits the places to look for fixing an issue so much, that they can be fixed within minutes rather than hours

[13:37] <AlexDaniel> \o/

[13:38] <lizmat> or at least show the cause very quickly (although the short-time fix may mean a revert)

[13:38] <lizmat> s/although/so

[13:40] <AlexDaniel> IIRC we had something similar to the CRLF issue in rakudo some time ago

[13:41] <AlexDaniel> the issue wasn't with comments, it was related to Pro::Async I think

[13:41] <lizmat> in the early 90's I was writing a new "WordPerfect" like editor for a system that used to have an "edlin" type of editor

[13:42] <lizmat> I copied the source buffer code from the old editor

[13:42] <lizmat> and people came to me telling me there was a bug

[13:42] <lizmat> turned out the bug was in the old editor as well (an off-by-one), which then had been in production for 6+ years

[13:43] <lizmat> that's when I learned that you can never assume code is bug free  :-)

[13:49] <AlexDaniel> huggable: bugs :is: <Zoffix> all the bugs are because people don't write tests

[13:49] <huggable> AlexDaniel, Added bugs as <Zoffix> all the bugs are because people don't write tests

[13:49] <AlexDaniel> :)

[13:50] <lizmat> s/don't write/don't write enough/

[13:50] <lizmat> ?

[13:50] <masak> the former, in my experience :P

[13:51] <AlexDaniel> IIRC Zoffix suggests that people should write tests before committing a fix, which we often do other way around

[13:51] <lizmat> masak: so I'm not bad because I do write tests occasionally?    :-)

[13:52] <lizmat> the thing is that I really would like to see other people write tests

[13:52] *** kudzo__ left
[13:53] *** kudzo_ joined
[13:53] <lizmat> but reality is, apart from Zoffix, not a lot of people do

[13:53] <jnthn> I typically have them both locally, then push them around the same time

[13:53] *** p6bannerbot sets mode: +v kudzo_

[13:54] <lizmat> tests are considered to be LHF, right?

[13:54] <lizmat> ready for people to get involved ?

[13:54] <jnthn> Depends. :)

[13:55] <jnthn> For things that are easy to write a test to over, yes. But there's been bugs I've hunted down where writing a clear test case that gets to the heart of the problem was 90% of the work.

[13:56] <jnthn> *to cover

[13:56] *** leont left
[14:01] <AlexDaniel> sometimes those who write a fix can write better tests

[14:02] * AlexDaniel looks at https://github.com/rakudo/rakudo/issues?q=is%3Aopen+is%3Aissue+label%3Atestneeded

[14:02] <AlexDaniel> maybe we need another testneeded squashathon

[14:06] <masak> lizmat: I'm a non-authoritative source, but IME you're way above average in the Perl 6 project, and the Perl 6 project is way above average compared to some average

[14:06] <masak> fwiw, I could be better at writing tests too :)

[14:06] <masak> (they rock) :P

[14:06] <lizmat> .oO( we need more players )

[14:07] *** sena_kun joined
[14:07] *** p6bannerbot sets mode: +v sena_kun

[14:16] <masak> lizmat: ah, the kind of volunteer open source project that needs more contributors :P :P :P

[14:17] <lizmat> doesn't make it less true  :-(

[14:22] * masak .oO( BOOlean! -- it's funny because it's True )

[14:24] <masak> lizmat: I guess it's like in salary negotiations -- one gets a raise based on effort/contribution, not based on need. ;) so the "one causal link back" question to ask is "how can Perl 6 be useful to more prospective contributors?"

[14:25] <masak> and that, for whatever reason, made me think of chromatic.

[14:25] * masak waves to chromatic from the backlog

[14:28] <[ptc]> masak: that pun hurt!

[14:29] <masak> I know! :D

[14:29] <[ptc]> :-D

[14:29] <masak> (you're welcome!)

[14:29] * masak .oO( .so ... )

[14:29] * [ptc] continues giggling and goes back to work

[14:29] <timotimo> keep going and i'll Bool you out of the state-ium

[14:30] <AlexDaniel> releasable6: status

[14:30] <releasable6> AlexDaniel, Next release in ‚âà4 days and ‚âà4 hours. 3 blockers. 0 out of 125 commits logged

[14:30] <releasable6> AlexDaniel, Details: https://gist.github.com/cda5282caa7f95ae9850093de30a84d8

[14:32] <AlexDaniel> speaking of more contributors, help with blockers will be appreciated ‚Üë

[14:32] <AlexDaniel> this one is a bunch of LHFs: https://github.com/rakudo/rakudo/issues/2451

[14:35] *** joy_ left
[14:35] <AlexDaniel> I just made the module names clickable!

[14:36] <timotimo> i'd like names in the list so i can search if any are mine m)

[14:37] <timotimo> i wonder if maybe the console output from blin for the failed tests should be available, too?

[14:39] <AlexDaniel> timotimo: yes, but it's a bit hard to gist it. I will fix that for the next run

[14:40] <timotimo> no prob :)

[14:40] <AlexDaniel> please bear with me, Blin is still very fresh :)

[14:40] <timotimo> blin might never have to do as much work as this release, haha

[14:40] <AlexDaniel> yes :D

[14:41] *** titsuki joined
[14:41] *** p6bannerbot sets mode: +v titsuki

[14:42] <Woodi> hi :)

[14:45] <masak> czesc :)

[14:46] <Woodi> masak: here you have: { return builtin(...) { return Val.new( { for(...) { if(...) { return ... } } return -1; } } }  it's advanced stuff :)    https://github.com/masak/007/pull/416/commits/8036c598d06e08c24948609279c6e760849ecaab

[14:46] <Woodi> masak: dobry ! :)

[14:49] *** MasterDuke left
[15:01] *** zakharyas left
[15:02] *** rba left
[15:03] *** finanalyst joined
[15:03] *** p6bannerbot sets mode: +v finanalyst

[15:05] *** joy_ joined
[15:05] *** holyghost left
[15:05] *** p6bannerbot sets mode: +v joy_

[15:06] *** holyghost joined
[15:06] *** joy_ left
[15:07] *** p6bannerbot sets mode: +v holyghost

[15:14] *** molaf joined
[15:15] *** p6bannerbot sets mode: +v molaf

[15:27] *** curan left
[15:30] *** tmtvl joined
[15:30] *** p6bannerbot sets mode: +v tmtvl

[15:30] *** tmtvl left
[15:31] <tobs`> m: say :p => 1; say ($*PERL,) ¬´=>¬ª (1,); say (:p,) ¬´=>¬ª (1,)

[15:31] <camelia> rakudo-moar fa5215b61: OUTPUT: ¬´(p => True) => 1‚ê§Cannot modify an immutable Pair (Nil => Nil)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§(Perl 6 (6.d) => 1)‚ê§¬ª

[15:31] <tobs`> huh?

[15:32] <tobs`> m: say :p => 1; say (:p,) ¬´=>¬ª (1,)

[15:32] <camelia> rakudo-moar fa5215b61: OUTPUT: ¬´(p => True) => 1‚ê§Cannot modify an immutable Pair (Nil => Nil)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:32] *** joy_ joined
[15:32] *** p6bannerbot sets mode: +v joy_

[15:32] <tobs`> that's different over here in 2018.10

[15:33] <lizmat> bisectable6: old=2018.10 say :p => 1; say ($*PERL,) ¬´=>¬ª (1,); say (:p,) ¬´=>¬ª (1,)

[15:33] <bisectable6> lizmat, Problem with fa5215b commit: Commit exists, but a perl6 executable could not be built for it

[15:34] <lizmat> bisectable6: old=2018.10 new=63ae9dcc5dfae7aa0fb02 say :p => 1; say ($*PERL,) ¬´=>¬ª (1,); say (:p,) ¬´=>¬ª (1,)

[15:34] <bisectable6> lizmat, Bisecting by output (old=2018.10 new=63ae9dc) because on both starting points the exit code is 1

[15:34] <bisectable6> lizmat, bisect log: https://gist.github.com/7a907283265d8cc855bd1f02bd420673

[15:34] <bisectable6> lizmat, (2018-10-27) https://github.com/rakudo/rakudo/commit/46ef0ea08cae96db25c7b5a9543ba696034408c8

[15:34] *** molaf left
[15:35] <lizmat> that's the commit that made 6.d default

[15:35] *** haukex joined
[15:35] * lizmat focuses on the error

[15:35] <[Coke]> (re limiting access to push directly to master) +1 from me on that. I'd love to see automated testing before merges to master

[15:35] *** p6bannerbot sets mode: +v haukex

[15:36] *** tmtvl joined
[15:37] *** p6bannerbot sets mode: +v tmtvl

[15:37] <lizmat> [Coke]: in an ideal world, I would agree

[15:38] <lizmat> but practically, having to wait 70 minutes before you're sorta sure nothing breaks

[15:38] <lizmat> will mean that people will make bigger commits

[15:38] <lizmat> and bigger commits mean worse bisectability

[15:38] *** greppable6 left
[15:39] *** greppable6 joined
[15:39] <tobs`> my question was originally going to be if there's some logic behind "Pair.new(...) => 1" working, but not working when => is hyped. Is the pair maybe swallowed as an adverb?

[15:39] <lizmat> also: Travis has had quite a few false positives  :-(

[15:39] *** greppable6 left
[15:39] *** greppable6 joined
[15:39] *** ChanServ sets mode: +v greppable6

[15:39] <lizmat> tobs`: somehow, it winds up in the Associative / Mu candidate

[15:39] <lizmat> ah, yes, recursing, duh

[15:40] *** undersightable6 left
[15:40] *** releasable6 left
[15:40] *** bisectable6 left
[15:40] *** squashable6 left
[15:40] *** notable6 left
[15:40] *** statisfiable6 left
[15:40] *** bloatable6 left
[15:40] *** p6bannerbot sets mode: +v greppable6

[15:40] *** unicodable6 left
[15:40] *** undersightable6 joined
[15:40] *** releasable6 joined
[15:40] *** benchable6 left
[15:40] *** coverable6 left
[15:40] *** bisectable6 joined
[15:40] *** ChanServ sets mode: +v bisectable6

[15:40] *** quotable6 left
[15:40] *** notable6 joined
[15:40] *** ChanServ sets mode: +v notable6

[15:40] *** squashable6 joined
[15:40] *** ChanServ sets mode: +v squashable6

[15:40] *** committable6 left
[15:40] *** shareable6 left
[15:40] *** notable6 left
[15:40] *** squashable6 left
[15:40] *** bisectable6 left
[15:40] *** greppable6 left
[15:40] *** evalable6 left
[15:40] *** nativecallable6 left
[15:40] *** committable6 joined
[15:40] *** shareable6 joined
[15:40] <lizmat> and the code so far assumes that anything Associative has a .STORE method

[15:41] *** p6bannerbot sets mode: +v undersightable6

[15:41] *** p6bannerbot sets mode: +v releasable6

[15:41] <lizmat> which Pair does not atm

[15:41] *** p6bannerbot sets mode: +v committable6

[15:41] *** p6bannerbot sets mode: +v shareable6

[15:42] <tobs`> too bad. I've been exploiting that pair literals are so short to write down to get dummy objects in my tests.

[15:42] <tobs`> the last instance of pairs being special-cased somewhere I could work around, but maybe it's just not a sustainable approach (or valid reason)

[15:43] *** evalable6 joined
[15:43] *** nativecallable6 joined
[15:43] *** ChanServ sets mode: +v evalable6

[15:43] *** ChanServ sets mode: +v nativecallable6

[15:43] *** greppable6 joined
[15:43] *** ChanServ sets mode: +v greppable6

[15:43] *** notable6 joined
[15:43] *** quotable6 joined
[15:43] *** ChanServ sets mode: +v notable6

[15:43] *** ChanServ sets mode: +v quotable6

[15:43] <tobs`> but I don't want to discourage your attention to it! I can't tell if it's just a WAT or supposed to work.

[15:44] <niko> AlexDaniel: i protected them from Sigyn

[15:44] *** p6bannerbot sets mode: +v evalable6

[15:44] *** p6bannerbot sets mode: +v nativecallable6

[15:44] *** p6bannerbot sets mode: +v greppable6

[15:44] *** p6bannerbot sets mode: +v notable6

[15:44] *** p6bannerbot sets mode: +v quotable6

[15:44] <AlexDaniel> niko: oh! OK thanks!

[15:45] <AlexDaniel> had to cycle them because apparanently after 2+ weeks they were leaking memory

[15:45] <AlexDaniel> apparently*

[15:46] *** bisectable6 joined
[15:47] *** p6bannerbot sets mode: +v bisectable6

[15:50] *** finanalyst left
[16:03] *** haukex left
[16:04] <Summertime> is there a raku domain picked out yet? (and has there been any work on a potential ironically formal website? c: )

[16:06] *** haukex joined
[16:07] *** p6bannerbot sets mode: +v haukex

[16:07] *** haukex left
[16:09] *** zakharyas joined
[16:09] *** p6bannerbot sets mode: +v zakharyas

[16:11] *** molaf joined
[16:11] <Summertime> oh it still hasn't fully settled? uhh, I'll pretend I didn't ask that yet then!

[16:11] *** p6bannerbot sets mode: +v molaf

[16:15] *** cydf left
[16:16] *** robertle left
[16:16] <lizmat> Summertime: I think Zoffix said it right in https://twitter.com/zoffix/status/1062317059449782272

[16:17] *** troys joined
[16:17] *** p6bannerbot sets mode: +v troys

[16:18] <[Coke]> I disagree about worse bisectability. you can do the work in chunks on the PR; you don't have to flatten them on the way in. I think we're at the point where having known good commits on the track for the release is more important than speedy turnaround on commits that haven't been 100% vetted. (I am not implying that anyone in particular isn't vetting their commits). Just coming from a devops perspective; 

[16:18] <[Coke]> if master is (more)

[16:19] <[Coke]> release target, then it should be tested as such.

[16:19] * [Coke] sees he misjudged the length of that send.

[16:20] *** domidumont left
[16:20] <[Coke]> I certainly don't want to make it too hard for devs to get things done, but I think there's things we do between everyone commits to master and no one commits to master.

[16:23] <Summertime> thankyou lizmat! I really should use twitter more

[16:24] <lucasb> I thought it was the other way around: bigger commits leads to fewer commits and this leads to better bisectability?

[16:25] <lizmat> lucasb: ok, so you have a commit with 3K lines changed..  and you know it's introducing the problem

[16:25] <lizmat> does that help finding the problem?

[16:25] <lizmat> suppose we had 30 commits with each 100 lines changed

[16:26] <lizmat> pointing to a commit with 100 lines

[16:26] <AlexDaniel> lucasb: with thousands of commits, bisectable6 will get back to you in like 10 seconds or so

[16:26] <AlexDaniel> so having more commits is not an issue, at all

[16:26] <timotimo> the magic of log2

[16:27] <AlexDaniel> also the magic of whateverable because every build is created ahead of time for every commit

[16:27] <lucasb> hm, ok, thanks for explaning. I had no idea :)

[16:27] <AlexDaniel> more commits is only bad for storage, but lately I'm compressing very aggressively

[16:28] <AlexDaniel> so again not an issue at all

[16:29] *** zakharyas left
[16:29] *** zakharyas joined
[16:30] *** p6bannerbot sets mode: +v zakharyas

[16:30] <AlexDaniel> as for compression and what that means in whateverable, suppose you hit a tagged commit

[16:30] <AlexDaniel> shareable6: 2018.03

[16:30] <shareable6> AlexDaniel, https://whateverable.6lang.org/2018.03

[16:31] <AlexDaniel> you get a single archive with just that build

[16:31] <AlexDaniel> however, if you try something else, like

[16:31] <AlexDaniel> shareable6: 2018.03^

[16:31] <shareable6> AlexDaniel, https://whateverable.6lang.org/2018.03^

[16:31] <AlexDaniel> hmm ok let's try older

[16:31] <AlexDaniel> shareable6: 2016.03^

[16:31] <shareable6> AlexDaniel, https://whateverable.6lang.org/2016.03^

[16:31] <AlexDaniel> now you get .lrz archive

[16:32] <AlexDaniel> that one has a bunch of builds, compressed in long range mode

[16:32] <lucasb> .lz ?

[16:32] <lucasb> ah, lrz, never heard before

[16:32] <AlexDaniel> lucasb: long range zip, https://github.com/ckolivas/lrzip

[16:34] <AlexDaniel> basically, if you take say 10 rakudo builds and compress them together using anything else, you'll get an archive around the same size as if you compressed each build individually

[16:34] *** Kaypie left
[16:34] <AlexDaniel> nowadays zstd has long range mode too, but whateverable started using lrz way before zstd got it

[16:34] *** Kaypie joined
[16:35] *** p6bannerbot sets mode: +v Kaypie

[16:36] <AlexDaniel> the downside is that these are a bit slower, and if you're bisecting locally then you have to download more

[16:36] <AlexDaniel> slower to decompress that is

[16:39] *** [ptc] left
[16:40] *** benchable6 joined
[16:40] <ufobat___> what am i doing wrong, or how is yamlish being used?

[16:40] *** squashable6 joined
[16:40] *** ChanServ sets mode: +v squashable6

[16:40] <ufobat___> > perl6 -Ilib -e 'use YAMLish; my $file = "../voteimproved/restapp/schema.yml";  [$file.IO.e,    load-yaml($file)].perl.say' 

[16:40] <ufobat___> [Bool::True, "../voteimproved/restapp/schema.yml"]

[16:41] *** coverable6 joined
[16:41] *** ChanServ sets mode: +v coverable6

[16:41] <ufobat___> i am expecting my data in the 2nd element of the array

[16:41] *** unicodable6 joined
[16:41] *** ChanServ sets mode: +v unicodable6

[16:41] *** statisfiable6 joined
[16:41] *** bloatable6 joined
[16:41] *** ChanServ sets mode: +v bloatable6

[16:41] <jnthn> I think load-yaml takes a string

[16:41] *** p6bannerbot sets mode: +v benchable6

[16:41] *** p6bannerbot sets mode: +v squashable6

[16:41] *** [ptc] joined
[16:41] <ufobat___> didn't i provide a string?

[16:41] *** p6bannerbot sets mode: +v coverable6

[16:41] *** p6bannerbot sets mode: +v unicodable6

[16:41] *** p6bannerbot sets mode: +v statisfiable6

[16:42] <jnthn> ufobat___: Sorry, to be clear: the string of YAML to parse, not a string containing a file name

[16:42] *** p6bannerbot sets mode: +v bloatable6

[16:42] <ufobat___> ah!

[16:42] *** p6bannerbot sets mode: +v [ptc]

[16:42] <jnthn> And I believe a path is a valid YAML document :)

[16:42] <jnthn> (Just a string literal)

[16:42] <ufobat___> thats tricky :-)

[16:43] <ufobat___> now i get a coudn't parse yaml, thats a step further :-)

[16:43] <ufobat___> thanks!

[16:44] <jnthn> Pretty sure I did the very same mistake a month or so back :)

[16:44] <ufobat___> i am playing aroud with openapi::Model because the swaager editor seems to accept my schema.yml but the cro::openapi::RoutesFromDefinition isnt

[16:44] <ingy> did someone say YAML?

[16:44] <ingy> o/

[16:44] <ufobat___> ingy++

[16:44] <ingy> \o

[16:45] <ingy> TimToady: yaml is also a 4-letter swear word...

[16:46] <jnthn> ufobat___: Yeah, YAMLish has some shortcomings there, unfortunately. I've taken to just feeding the YAML through a YAML -> JSON convertor instead and using that. :)

[16:49] *** zakharyas left
[16:50] <ingy> :)

[16:50] <lizmat> .oO( ingy also has four letter )

[16:50] <lizmat> *s

[16:50] <ingy> liz and wendy averages to two 4 letter words :P

[16:50] <El_Che> that moment you realize you spent an half hour debugging when you just forgot to add a Content-Type to curl when testing manually...

[17:19] *** kerframil left
[17:24] *** webstrand left
[17:25] *** webstrand joined
[17:26] *** tobs` left
[17:26] *** p6bannerbot sets mode: +v webstrand

[17:29] *** scimon left
[17:41] *** Xliff_ joined
[17:42] *** p6bannerbot sets mode: +v Xliff_

[17:44] *** jmerelo joined
[17:44] *** Xliff left
[17:44] *** p6bannerbot sets mode: +v jmerelo

[17:49] *** cydf joined
[17:49] *** cydf left
[17:49] *** cydf joined
[17:50] *** p6bannerbot sets mode: +v cydf

[17:51] *** Celelibi left
[17:57] *** dakkar left
[18:02] <buggable> New CPAN upload: Font-FreeType-0.1.1.tar.gz by WARRINGD http://modules.perl6.org/dist/Font::FreeType:cpan:WARRINGD

[18:13] *** Celelibi joined
[18:14] *** p6bannerbot sets mode: +v Celelibi

[18:19] *** webstrand left
[18:22] *** webstrand joined
[18:22] *** rindolf left
[18:22] *** p6bannerbot sets mode: +v webstrand

[18:27] *** kensanata left
[18:35] *** zakharyas joined
[18:36] *** p6bannerbot sets mode: +v zakharyas

[18:40] *** zakharyas left
[18:40] *** hph^ joined
[18:40] *** zakharyas joined
[18:41] *** hph^ left
[18:41] *** hph^ joined
[18:41] *** p6bannerbot sets mode: +v zakharyas

[18:41] *** hph^ left
[18:42] *** hph^ joined
[18:42] *** hph^ left
[18:43] *** hph^ joined
[18:43] *** hph^ left
[18:43] *** hph^ joined
[18:43] *** hph^ left
[18:44] *** hph^ joined
[18:44] *** hph^ left
[18:49] *** emerson left
[18:52] *** tmtvl left
[18:52] *** emerson joined
[18:52] *** p6bannerbot sets mode: +v emerson

[18:57] *** noganex left
[18:57] <ufobat___> what is our eval bot here?

[18:57] *** noganex joined
[18:57] <ufobat___> perl6 bot

[18:57] <ufobat___> thingy

[18:58] *** p6bannerbot sets mode: +v noganex

[18:58] <ufobat___> noganex, ?!?

[18:58] <noganex> ufobat___: ?

[18:58] <ufobat___> m: use YAMLish; load-yaml("openapi: 3.0.1")

[18:58] <camelia> rakudo-moar d5a751d94: OUTPUT: ¬´===SORRY!===‚ê§Could not find YAMLish at line 1 in:‚ê§    /home/camelia/.perl6‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6/site‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6/vendor‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6‚ê§    CompUnit::‚Ä¶¬ª

[18:59] <ufobat___> noganex r u alive?

[18:59] <noganex> barely

[18:59] *** shlomif joined
[18:59] *** cy_d_fect joined
[19:00] *** shlomif is now known as rindolf

[19:00] <ufobat___> :-(

[19:00] *** p6bannerbot sets mode: +v rindolf

[19:00] *** p6bannerbot sets mode: +v cy_d_fect

[19:01] <ufobat___> ingy, is this yaml? "openapi: 3.0.1" cause yamlish fails to parse it

[19:01] <timotimo> star: use YAMLish;

[19:01] <camelia> star-m 2017.07: OUTPUT: ¬´===SORRY!===‚ê§Could not find YAMLish at line 1 in:‚ê§    /home/camelia/.perl6‚ê§    /home/camelia/star-2017.07/share/perl6/site‚ê§    /home/camelia/star-2017.07/share/perl6/vendor‚ê§    /home/camelia/star-2017.07/share/perl6‚ê§    CompUnit::Repository::Abso‚Ä¶¬ª

[19:02] *** cydf left
[19:04] <tinita> ufobat___: seems yamlish has problems with this kind of string

[19:04] <tinita> ufobat___: it's valid yaml, it should be the strig "3.0.1"

[19:06] <timotimo> YAMLish isn't developed thoroughly, sadly

[19:06] <tinita> you can add quotes around it as a workaround

[19:06] <timotimo> feed it into a more mature yaml parser and ask it to output mostly-looks-like-json yaml for yamlish to eat

[19:07] <tinita> AFAIK leont has started to work on it again recently

[19:07] *** noganex left
[19:08] <timotimo> oh, that's good to hear!

[19:08] <ufobat___> so it makes sense to find the bug?

[19:10] *** ExtraCrispy left
[19:11] *** ExtraCrispy joined
[19:11] *** p6bannerbot sets mode: +v ExtraCrispy

[19:11] <tinita> yeah, you should probably report it

[19:13] *** ryn1x joined
[19:14] *** p6bannerbot sets mode: +v ryn1x

[19:20] *** zakharyas left
[19:25] *** sauvin left
[19:28] *** webstrand left
[19:28] *** webstrand joined
[19:29] *** robertle joined
[19:29] *** p6bannerbot sets mode: +v webstrand

[19:29] *** p6bannerbot sets mode: +v robertle

[19:31] *** Xliff_ is now known as Xliff

[19:42] *** sjoshi left
[19:47] *** rba joined
[19:47] *** p6bannerbot sets mode: +v rba

[19:57] *** ryn1x left
[20:05] *** Kaypie left
[20:05] *** Kaypie joined
[20:06] *** p6bannerbot sets mode: +v Kaypie

[20:08] *** jmerelo left
[20:09] *** lucasb left
[20:16] <ufobat___> timotimo, my yaml bug is fixed in 0.0.5 (i had the 0.0.4 installed on my box)

[20:37] *** lucs left
[20:41] *** Kaypie left
[20:41] *** kensanata joined
[20:41] *** p6bannerbot sets mode: +v kensanata

[20:43] *** Kaiepi joined
[20:44] *** p6bannerbot sets mode: +v Kaiepi

[20:50] *** kerframil joined
[20:50] *** p6bannerbot sets mode: +v kerframil

[20:52] *** leont joined
[20:52] *** p6bannerbot sets mode: +v leont

[20:55] *** Kaiepi left
[20:55] *** Kaiepi joined
[20:56] *** p6bannerbot sets mode: +v Kaiepi

[21:05] <ufobat___> what das <?break> in grammars mean?

[21:09] *** delon left
[21:10] *** kensanata left
[21:13] *** delon joined
[21:14] *** p6bannerbot sets mode: +v delon

[21:16] <masak> m: grammar G { regex TOP { <?break> "break" }; regex break { "break" } }; say ?G.parse("break"); say ?G.parse("bruke")

[21:16] <camelia> rakudo-moar d5a751d94: OUTPUT: ¬´True‚ê§False‚ê§¬ª

[21:16] <masak> m: grammar G { regex TOP { <?before <break>> "break" }; regex break { "break" } }; say ?G.parse("break"); say ?G.parse("bruke")

[21:16] <camelia> rakudo-moar d5a751d94: OUTPUT: ¬´True‚ê§False‚ê§¬ª

[21:16] <masak> ufobat___: I believe those two are equivalent

[21:25] *** kerframil left
[21:25] *** kerframil joined
[21:25] *** p6bannerbot sets mode: +v kerframil

[21:28] *** delon left
[21:30] *** DarthGandalf left
[21:31] *** delon joined
[21:32] *** p6bannerbot sets mode: +v delon

[21:32] *** newbie left
[21:32] *** kerframil left
[21:32] *** kerframil joined
[21:32] *** p6bannerbot sets mode: +v kerframil

[21:33] *** kerframil left
[21:33] *** newbie joined
[21:33] *** p6bannerbot sets mode: +v newbie

[21:34] *** newbie left
[21:35] *** DarthGandalf joined
[21:35] *** p6bannerbot sets mode: +v DarthGandalf

[21:38] *** [ptc] left
[21:39] *** random_yanek left
[21:43] *** [ptc] joined
[21:43] *** p6bannerbot sets mode: +v [ptc]

[21:50] *** random_yanek joined
[21:51] *** p6bannerbot sets mode: +v random_yanek

[21:53] *** sena_kun left
[21:57] *** murkk27 joined
[21:58] *** murkk27 left
[22:06] *** ferreira left
[22:06] *** ferreira joined
[22:07] *** p6bannerbot sets mode: +v ferreira

[22:08] *** AlexDaniel left
[22:08] *** go|dfish left
[22:08] *** AlexDaniel joined
[22:08] *** p6bannerbot sets mode: +v AlexDaniel

[22:09] *** robertle left
[22:10] *** go|dfish joined
[22:10] *** p6bannerbot sets mode: +v go|dfish

[22:13] *** webstrand left
[22:14] *** webstrand joined
[22:14] *** p6bannerbot sets mode: +v webstrand

[22:18] *** rindolf left
[22:18] *** leont left
[22:18] *** dotdotdot left
[22:19] *** pmichaud left
[22:19] *** pmichaud joined
[22:20] *** p6bannerbot sets mode: +v pmichaud

[22:23] *** dotdotdot joined
[22:24] *** p6bannerbot sets mode: +v dotdotdot

[22:26] *** daxim left
[22:28] *** newbie joined
[22:29] *** p6bannerbot sets mode: +v newbie

[22:29] *** newbie left
[22:30] *** newbie joined
[22:31] *** p6bannerbot sets mode: +v newbie

[22:33] *** newbie left
[22:34] *** Sound joined
[22:34] *** p6bannerbot sets mode: +v Sound

[22:36] *** webstrand left
[22:37] *** Xliff_ joined
[22:37] *** webstrand joined
[22:37] *** Xliff_ left
[22:38] *** p6bannerbot sets mode: +v webstrand

[22:40] *** Xliff left
[22:41] *** Xliff joined
[22:42] *** p6bannerbot sets mode: +v Xliff

[22:47] *** Guest96901 left
[22:54] *** cpup left
[22:55] *** success joined
[22:55] *** success is now known as Guest11615

[22:55] *** p6bannerbot sets mode: +v Guest11615

[22:57] *** cpup joined
[22:58] *** p6bannerbot sets mode: +v cpup

[22:59] *** delon left
[23:03] *** daxim joined
[23:03] *** p6bannerbot sets mode: +v daxim

[23:04] *** dct joined
[23:04] *** p6bannerbot sets mode: +v dct

[23:04] *** leont joined
[23:05] *** p6bannerbot sets mode: +v leont

[23:08] *** daxim left
[23:10] *** ExtraCrispy left
[23:11] *** ExtraCrispy joined
[23:11] *** p6bannerbot sets mode: +v ExtraCrispy

[23:14] *** dogbert11 joined
[23:15] *** p6bannerbot sets mode: +v dogbert11

[23:16] <Xliff> m: for ^3 X ^3 -> $x, $y { say "$x,$y" }

[23:16] <camelia> rakudo-moar d5a751d94: OUTPUT: ¬´0 0,0 1‚ê§Too few positionals passed; expected 2 arguments but got 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§0 2,1 0‚ê§1 1,1 2‚ê§2 0,2 1‚ê§¬ª

[23:16] <Xliff> m: for ^3 X ^3 -> ($x, $y) { say "$x,$y" }

[23:16] <camelia> rakudo-moar d5a751d94: OUTPUT: ¬´0,0‚ê§0,1‚ê§0,2‚ê§1,0‚ê§1,1‚ê§1,2‚ê§2,0‚ê§2,1‚ê§2,2‚ê§¬ª

[23:16] *** dogbert17 left
[23:17] <timotimo> m: for flat ^3 X ^3 -> $x, $y { say "$x,$y" }

[23:17] <camelia> rakudo-moar d5a751d94: OUTPUT: ¬´0,0‚ê§0,1‚ê§0,2‚ê§1,0‚ê§1,1‚ê§1,2‚ê§2,0‚ê§2,1‚ê§2,2‚ê§¬ª

[23:17] <Xliff> Yes yes yes. 

[23:17] <Xliff> timotimo+

[23:17] <timotimo> for the benefit of log readers out there

[23:18] <Xliff> Ah.

[23:18] <Xliff> How goes it, tt?

[23:18] <Juerd> Given class Foo { has $foo; has $bar = 2 * $!foo; }, why is $!foo uninitialized when you do Foo.new(foo => 42), and is there another way to initialize an attribute based on a given value of another one?

[23:18] <timotimo> 'tis all right

[23:19] <timotimo> m: class Foo { has $.foo; has $.bar = 2 * $!foo }; Foo.new(foo => 42).perl.say

[23:19] <camelia> rakudo-moar d5a751d94: OUTPUT: ¬´Foo.new(foo => 42, bar => 84)‚ê§¬ª

[23:19] *** Kaypie joined
[23:19] <Juerd> Errrr

[23:19] <timotimo> you forgot the . in the attributes

[23:19] <Juerd> Oh!

[23:19] <Xliff> LOL

[23:19] <Juerd> Thanks.

[23:19] <timotimo> m: class Foo { has $foo; has $bar = 2 * $!foo }; Foo.new(foo => 42).perl.say

[23:19] <camelia> rakudo-moar d5a751d94: OUTPUT: ¬´Use of uninitialized value of type Any in numeric context‚ê§Foo.new‚ê§  in method  at <tmp> line 1‚ê§¬ª

[23:19] * Juerd feels dumb

[23:19] <Xliff> <- Would make that mistake almost every time.

[23:19] <timotimo> without the dot they are private attributes

[23:19] <timotimo> m: class Foo { has $foo; has $bar = 2 * $!foo }; say Foo.^attributes

[23:19] <camelia> rakudo-moar d5a751d94: OUTPUT: ¬´(Mu $!foo Mu $!bar)‚ê§¬ª

[23:19] <timotimo> m: class Foo { has $foo; has $bar = 2 * $!foo }; say Foo.^methods

[23:19] <camelia> rakudo-moar d5a751d94: OUTPUT: ¬´(BUILDALL)‚ê§¬ª

[23:19] *** p6bannerbot sets mode: +v Kaypie

[23:20] *** Kaiepi left
[23:20] <Juerd> This is the same thing that keeps biting me... Providing named values to .new, that don't exist, get ignored :(

[23:20] <timotimo> in that case, let me interest you in

[23:20] <timotimo> buggable: eco Strict

[23:20] <buggable> timotimo, Found 8 results: StrictNamedArguments, HTML::Restrict, ClassX::StrictConstructor, US-ASCII, US-ASCII. See https://modules.perl6.org/s/Strict

[23:20] <timotimo> ClassX::StrictConstructor

[23:20] <Juerd> Thanks, but it's not likely that I'll remember to use that even if I wanted to :)

[23:21] <timotimo> if you could remember to "use strict" in perl5, you can remember to "use ClassX::StrictConstructor" in perl6 ... hm, maybe not

[23:21] <timotimo> though if you have something that stubs new classes for you ...

[23:21] <Juerd> Replacing getting bitten by forgetting one thing by getting bitten by forgetting another thing is not likely to work out :P

[23:21] <timotimo> or a linter that complains if a file contains classes but not StrictConstructor ...

[23:22] <Juerd> Well. There's the thing. As much as I've told people to "use strict" in Perl 5... I do often forget to use it.

[23:22] *** kerframil joined
[23:22] *** p6bannerbot sets mode: +v kerframil

[23:22] <timotimo> mhm

[23:22] <Juerd> Much of my code is written in bash. :)

[23:22] <Xliff> m: class A { method a-b { '42'.say }; }; my $a = A.new; $a.a-b

[23:22] <camelia> rakudo-moar d5a751d94: OUTPUT: ¬´42‚ê§¬ª

[23:22] <Juerd> So no linter or any other fancy building stuff :P

[23:22] <Juerd> https://juerd.nl/i/9933f15a1e442620d946cfa48db9fcc7.png  # like this

[23:22] <timotimo> there is that bash script checker thingie

[23:23] <Juerd> Anyhow, thanks a lot, I now know what I did wrong :)

[23:23] <timotimo> :)

[23:24] *** daxim joined
[23:25] *** p6bannerbot sets mode: +v daxim

[23:30] *** daxim left
[23:33] <Xliff> WARNING: unhandled Failure detected in DESTROY. If you meant to ignore it, you can mark it as handled by calling .Bool, .so, .not, or .defined methods. The Failure was:

[23:33] <Xliff> Index out of range. Is: -1, should be in 0..^Inf

[23:34] <Xliff> ^^ What does that mean on array access?

[23:34] <Xliff> NONE of the index vars are -1

[23:34] <Xliff> Line is:      for @( @!coverage[$y][$x] )

[23:35] *** dct left
[23:35] *** Sound left
[23:36] <timotimo> could be a wrong line number output

[23:36] <timotimo> or it points at the start of the block and means the whole block instead?

[23:36] <Xliff> OK

[23:57] *** emerson left
[23:59] *** daxim joined
[23:59] *** p6bannerbot sets mode: +v daxim

