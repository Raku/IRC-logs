[00:00] *** guifa joined
[00:00] *** p6bannerbot sets mode: +v guifa

[00:11] <SmokeMachine> timotimo: so I think ill merge it...

[00:19] <SmokeMachine> ok?

[00:23] <timotimo> i didn't look very closely

[00:23] <Xliff> What if @stubs is empty?

[00:24] <Xliff> Method previously returns 1, so if @stubs is empty, what would existing code do if it suddenly started getting 0?

[00:24] <Xliff> Not nqp person, but I just took a gander and that's the only thing that stood out.

[00:25] *** rhizon8r left
[00:25] *** rhizon8r joined
[00:25] <Xliff> m: sub a (@a? is rw) { }

[00:25] <camelia> rakudo-moar 2393e5386: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤For parameter '@a', '@' sigil containers don't need 'is rw' to be writable␤Can only use 'is rw' on a scalar ('$' sigil) parameter, not '@a'␤at <tmp>:1␤»

[00:26] *** p6bannerbot sets mode: +v rhizon8r

[00:26] <Xliff> m: sub a (@a?) { }

[00:26] <camelia> rakudo-moar 2393e5386: ( no output )

[00:27] <Xliff> m: sub a ($a) { $a.push: 1; }; @a = <1 2 3>; a(@a); say @a;

[00:27] <camelia> rakudo-moar 2393e5386: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@a' is not declared. Did you mean '&a'?␤at <tmp>:1␤------> 3sub a ($a) { $a.push: 1; }; 7⏏5@a = <1 2 3>; a(@a); say @a;␤»

[00:27] <Xliff> m: sub a ($a) { $a.push: 1; }; my @a = <1 2 3>; a(@a); say @a;

[00:27] <camelia> rakudo-moar 2393e5386: OUTPUT: «[1 2 3 1]␤»

[00:28] <rouking> Say, are user-defined metaoperators around yet?

[00:34] <guifa> I'm guessing the answer to this is a "doesn't exist", but before I go putting any effort into building a homegrown solution... is there a good code formatter for p6 for use in TeX?  I normally use lstlistings but it's set up for p5 and basically thinks everything is an identifier :-)

[00:34] <SmokeMachine> Xliff: the original code wasn't using the return...

[00:35] <Xliff> SmokeMachine: OK! Just asking. :)

[00:35] <SmokeMachine> Xliff: :) just answering! :P

[00:36] <Xliff> Well, FINE! Be that way! :p

[00:36] <Xliff> ^^

[00:36] <SmokeMachine> I did merge... now Ill merge this: https://github.com/perl6/roast/pull/487

[00:50] *** Voldenet left
[00:53] *** MasterDuke joined
[00:53] *** p6bannerbot sets mode: +v MasterDuke

[00:53] *** MasterDuke left
[00:53] *** MasterDuke joined
[00:53] *** herbert.freenode.net sets mode: +v MasterDuke

[00:53] *** p6bannerbot sets mode: +v MasterDuke

[00:54] *** Voldenet joined
[00:54] *** Voldenet left
[00:54] *** Voldenet joined
[00:54] *** p6bannerbot sets mode: +v Voldenet

[00:55] *** p6bannerbot sets mode: +v Voldenet

[01:30] <buggable> New CPAN upload: IP-Addr-v0.0.1.tar.gz by VRURG https://cpan.metacpan.org/authors/id/V/VR/VRURG/Perl6/IP-Addr-v0.0.1.tar.gz

[01:35] *** regreg__ joined
[01:36] *** p6bannerbot sets mode: +v regreg__

[01:46] *** jameslenz joined
[01:47] *** p6bannerbot sets mode: +v jameslenz

[01:51] *** jameslenz left
[01:58] *** cognominal-p6 joined
[01:59] <SmokeMachine> .tell Zoffix I requested you to review https://github.com/rakudo/rakudo/pull/2393

[01:59] <yoleaux> SmokeMachine: I'll pass your message to Zoffix.

[01:59] *** p6bannerbot sets mode: +v cognominal-p6

[02:22] *** cognominal-p6 left
[02:57] *** ryn1x_ joined
[02:58] *** p6bannerbot sets mode: +v ryn1x_

[03:23] *** ryn1x_ is now known as ryn1x

[03:25] <holyghost> eco: Bayes::Learn

[03:25] <buggable> holyghost, Bayes::Learn 'Bayesian Inference based upon ditributions. Minimax': http://modules.perl6.org/dist/Bayes::Learn:cpan:HOLYGHOST

[03:26] <holyghost> eco: Game::Markov

[03:26] <buggable> holyghost, Game::Markov 'Markov Strategy kit for games': http://modules.perl6.org/dist/Game::Markov:cpan:HOLYGHOST

[03:30] *** ryn1x left
[03:31] <buggable> New CPAN upload: App-Tasks-0.0.8.tar.gz by JMASLAK http://modules.perl6.org/dist/App::Tasks:cpan:JMASLAK

[03:34] *** ryn1x joined
[03:34] *** p6bannerbot sets mode: +v ryn1x

[03:47] *** jameslenz joined
[03:48] *** p6bannerbot sets mode: +v jameslenz

[03:51] *** jameslenz left
[03:57] <Geth> ¦ doc: ugexe++ created pull request #2394: Document $*KERNEL.hostname

[03:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2394

[04:02] *** ryn1x left
[04:03] *** xinming left
[04:03] *** MasterDuke left
[04:03] *** xinming joined
[04:04] *** p6bannerbot sets mode: +v xinming

[04:23] <Geth> ¦ doc: eaf115c38c | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Type/Nil.pod6

[04:23] <Geth> ¦ doc: Update Nil.pod6

[04:23] <Geth> ¦ doc: 

[04:23] <Geth> ¦ doc: At first glance, it seems that Nil can be assigned to any container. Extra explanation for hash assignment.

[04:23] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/eaf115c38c

[04:23] <synopsebot> Link: https://doc.perl6.org/type/Nil

[04:41] *** ZzZombo joined
[04:41] *** p6bannerbot sets mode: +v ZzZombo

[04:52] *** ufobat_ joined
[04:52] *** p6bannerbot sets mode: +v ufobat_

[04:58] *** regreg__ left
[05:02] *** sauvin joined
[05:02] *** p6bannerbot sets mode: +v sauvin

[05:03] <ingy> Is this a thing? => http://nigelhamilton.com/perl-branding-proposal.html

[05:09] *** Mithaldu left
[05:10] *** Mithaldu joined
[05:10] *** p6bannerbot sets mode: +v Mithaldu

[05:11] *** ZzZombo left
[05:18] *** ufobat_ left
[05:18] *** cognominal-p6 joined
[05:19] *** p6bannerbot sets mode: +v cognominal-p6

[05:20] *** cognominal-p6 left
[05:20] *** cognominal-p6 joined
[05:21] *** p6bannerbot sets mode: +v cognominal-p6

[05:28] <tobs> ingy: yes, things are moving in this matter, see e.g. https://rakudo.party/post/A-Request-to-Larry-Wall-to-Create-a-Language-Name-Alias-for-Perl-6

[05:29] <ingy> I have one. :)

[05:40] *** hami joined
[05:40] *** p6bannerbot sets mode: +v hami

[05:42] *** cognominal-p6 left
[05:46] *** domidumont joined
[05:47] *** p6bannerbot sets mode: +v domidumont

[05:48] *** jameslenz joined
[05:48] *** domidumont left
[05:48] *** p6bannerbot sets mode: +v jameslenz

[05:52] *** jameslenz left
[05:56] *** guifa left
[06:05] *** domidumont joined
[06:05] *** p6bannerbot sets mode: +v domidumont

[06:22] *** hami left
[06:31] *** robertle_ joined
[06:32] *** p6bannerbot sets mode: +v robertle_

[06:49] *** abraxxa left
[07:01] *** agentzh left
[07:25] <Geth> ¦ doc: 71a6cc07d8 | (Richard Hainsworth)++ (committed using GitHub Web editor) | doc/Type/Test.pod6

[07:25] <Geth> ¦ doc: Update Test.pod6

[07:25] <Geth> ¦ doc: 

[07:25] <Geth> ¦ doc: make 'ok' consistent with other subs

[07:25] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/71a6cc07d8

[07:25] <synopsebot> Link: https://doc.perl6.org/type/Test

[07:32] *** ccntrq left
[07:34] *** ccntrq joined
[07:34] *** p6bannerbot sets mode: +v ccntrq

[07:37] *** troys left
[07:56] *** albertferrico joined
[07:56] *** p6bannerbot sets mode: +v albertferrico

[07:56] <albertferrico> hello everyone!

[07:56] <albertferrico> I hope you are having a good end of the week!

[07:59] *** pecastro joined
[08:00] *** p6bannerbot sets mode: +v pecastro

[08:03] <lookatme_q> albertferrico, hi

[08:10] *** dakkar joined
[08:10] *** p6bannerbot sets mode: +v dakkar

[08:14] <albertferrico> hi lookatme_q

[08:25] *** zakharyas joined
[08:26] *** p6bannerbot sets mode: +v zakharyas

[08:29] *** robertle_ left
[08:32] <albertferrico> guys, I'm developing a web with Bailador and Quicky ORM. How would you manage the sessions, for the login?

[08:36] *** rindolf joined
[08:36] *** p6bannerbot sets mode: +v rindolf

[08:38] *** cognominal-p6 joined
[08:39] *** p6bannerbot sets mode: +v cognominal-p6

[08:40] *** aindilis left
[08:40] *** aindilis` joined
[08:41] *** p6bannerbot sets mode: +v aindilis`

[08:42] *** abraxxa joined
[08:42] *** p6bannerbot sets mode: +v abraxxa

[08:42] <abraxxa> the link to https://nxadm.github.io/rakudo-pkg/CONTRIBUTING.md on https://nxadm.github.io/rakudo-pkg/#contributing is broken

[08:43] <abraxxa> and what do I need to do to get it built for Ubuntu 18.10 too?

[08:48] <abraxxa> found the guide, working on a PR

[08:53] *** aindilis` left
[08:54] *** cognominal-p6 left
[08:55] *** cognominal-p6 joined
[08:55] *** p6bannerbot sets mode: +v cognominal-p6

[08:58] *** abraxxa left
[08:59] *** abraxxa joined
[08:59] *** abraxxa left
[09:00] *** abraxxa joined
[09:01] *** p6bannerbot sets mode: +v abraxxa

[09:05] *** alpha left
[09:06] *** aindilis joined
[09:07] *** p6bannerbot sets mode: +v aindilis

[09:07] <abraxxa> PR sent

[09:32] *** alpha joined
[09:33] *** p6bannerbot sets mode: +v alpha

[09:37] <abraxxa> is nxadm here?

[09:38] *** scimon joined
[09:39] *** p6bannerbot sets mode: +v scimon

[09:40] *** sena_kun joined
[09:41] *** p6bannerbot sets mode: +v sena_kun

[09:42] <abraxxa> the dockerfile seems to be ok but 2018.09 fails a test on Ubuntu 18.10: https://travis-ci.org/nxadm/rakudo-pkg/jobs/443595573

[09:49] *** jameslenz joined
[09:50] *** p6bannerbot sets mode: +v jameslenz

[09:54] *** jameslenz left
[09:58] *** lizmat joined
[09:58] *** p6bannerbot sets mode: +v lizmat

[10:03] *** zakharyas left
[10:05] *** zakharyas joined
[10:06] *** p6bannerbot sets mode: +v zakharyas

[10:11] *** pmurias joined
[10:11] *** p6bannerbot sets mode: +v pmurias

[10:11] <pmurias> Zoffix: re .toggle the example on the doc pageis too complicated

[10:11] <pmurias> s/page is/

[10:12] <pmurias> Zoffix: say (1..15).toggle(* < 5, * > 10, * < 15); from the commit that implemented explains what it does a lot better

[10:12] <pmurias> (I'll fix the doc)

[10:15] <pmurias> do we have a style guide for the doc examples?

[10:15] <pmurias> like if we should use the indirect method call syntax?

[10:21] *** HaraldJoerg joined
[10:21] *** xinming left
[10:22] *** p6bannerbot sets mode: +v HaraldJoerg

[10:22] *** xinming joined
[10:22] <Geth> ¦ doc: d4add06a4b | (Paweł Murias)++ | doc/Type/Any.pod6

[10:22] <Geth> ¦ doc: Put easier to understand example in toggle docs

[10:22] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d4add06a4b

[10:22] <synopsebot> Link: https://doc.perl6.org/type/Any

[10:23] *** p6bannerbot sets mode: +v xinming

[10:27] *** xinming left
[10:27] *** pmurias left
[10:28] *** pmurias joined
[10:28] *** p6bannerbot sets mode: +v pmurias

[10:28] *** xinming joined
[10:29] *** p6bannerbot sets mode: +v xinming

[10:49] *** alpha left
[11:05] *** zakharyas left
[11:09] *** robertle_ joined
[11:10] *** p6bannerbot sets mode: +v robertle_

[11:12] <Geth> ¦ doc: 13f79b946b | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/subscripts.pod6

[11:12] <Geth> ¦ doc: Document Zen slicing a Seq caches it

[11:12] <Geth> ¦ doc: 

[11:12] <Geth> ¦ doc: Propspec: https://github.com/perl6/roast/commit/7d23fbc74c6d8e724f4afca7e294b2b58187594a

[11:12] <Geth> ¦ doc: PoV: https://github.com/rakudo/rakudo/commit/b84b0902c29c0bcda369b4e51fd9f82d20dcdc90

[11:12] <synopsebot> Link: https://doc.perl6.org/language/subscripts

[11:12] <Geth> ¦ doc: Closes https://github.com/rakudo/rakudo/issues/2383 R#2383

[11:12] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/13f79b946b

[11:12] <synopsebot> R#2383 [closed]: https://github.com/rakudo/rakudo/issues/2383 [consistency][testneeded] .[] doesn't cache a Seq

[11:14] *** Zoffix joined
[11:14] *** p6bannerbot sets mode: +v Zoffix

[11:15] <Zoffix> pmurias: the behaviour itself is confusing, IMO not examples. There is a CONTRIBUTING.md docs that mentions some style stuff: https://github.com/perl6/doc/blob/master/CONTRIBUTING.md

[11:16] <Zoffix> pmurias: as in explaining in words why  say (1..15).toggle(:off, * > 2, * < 5, * > 10, * < 15) produces «(3 4 11 12 13 14)␤»

[11:17] <Zoffix> Which people tried to do for over an hour already: http://colabti.org/irclogger/irclogger_log/perl6?date=2018-07-17#l1076

[11:18] *** jbotz joined
[11:19] <Geth> ¦ doc: 5d579efa1c | (Zoffix Znet)++ (committed using GitHub Web editor) | CONTRIBUTING.md

[11:19] <Geth> ¦ doc: Add syntax highlights

[11:19] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5d579efa1c

[11:19] *** p6bannerbot sets mode: +v jbotz

[11:25] <pmurias> what the intended use for toggle? why is it in core?

[11:26] <scimon> complicated list processing?

[11:26] <Zoffix> AlexDaniel: a dist may have many modules in it

[11:26] <Zoffix> (you asked yesterday)

[11:27] <scimon> (Side note London Perl Mongers has a bunch of videos for tech talks https://www.youtube.com/channel/UCiZ6mo3Zd8z6CNm1280s7yg/videos?view=0&sort=dd&flow=grid and the top 3 are about perl6 (Ok two of them are me) so that's cool right?)

[11:30] <Zoffix> yeah

[11:30] <timotimo> that is cool :)

[11:30] <timotimo> also, good job, scimon 

[11:31] <Zoffix> pmurias: IIRC it was a generalization of .skip-until/.skip-while methods

[11:33] <scimon> (I'm checking that list. Hopefully the other talks from last week will be up soon.)

[11:33] *** scimon left
[11:35] *** scimon joined
[11:35] *** p6bannerbot sets mode: +v scimon

[11:36] *** Zoffix left
[11:41] <pmurias> Zoffix: I don't have a good mental model for it besides builts a stage machine

[11:41] <pmurias> the example was completely useless for me

[11:46] <pmurias> also :off can be replace by passing -> $ {False} as first argument to toggle

[11:50] *** jameslenz joined
[11:50] *** p6bannerbot sets mode: +v jameslenz

[11:53] *** Ven`` joined
[11:53] *** abraxxa left
[11:53] *** p6bannerbot sets mode: +v Ven``

[11:54] *** jameslenz left
[12:20] *** Ven`` left
[12:24] *** Ven`` joined
[12:24] *** koto joined
[12:25] *** p6bannerbot sets mode: +v Ven``

[12:25] *** p6bannerbot sets mode: +v koto

[12:26] *** sena_kun left
[12:27] *** koto left
[12:33] *** azawawi joined
[12:33] *** p6bannerbot sets mode: +v azawawi

[12:33] <azawawi> and hi :)

[12:33] <yoleaux> 15 Oct 2018 15:17Z <timotimo> azawawi: looks like a good target for a binding, though i think there's already the start of an sfml binding somewhere? not sure.

[12:34] <azawawi> timotimo: thanks

[12:35] <azawawi> timotimo: Maybe my next crazy project is calling perl6 from gdscript / gdnative and driving godot game engine through perl6 :)

[12:36] * azawawi is working on perl6 lang server document outline (tree view)

[12:38] <azawawi> any idea how to get line number information from perl6 --target=parse output using NQP?

[12:39] *** squashable6 left
[12:39] *** squashable6 joined
[12:40] *** p6bannerbot sets mode: +v squashable6

[12:40] *** HaraldJoerg left
[12:46] *** Ronja joined
[12:47] *** p6bannerbot sets mode: +v Ronja

[12:47] <Ronja> in perl5 I can do something like my @arr = (0) x 15;

[12:48] <Ronja> how does that translate to perl6?

[12:49] <Ronja> perl6 gives me an array with one element that has 15 zeroes

[12:52] <azawawi> m: (0) xx 15

[12:52] <camelia> rakudo-moar 64c32ea18: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 0 in sink context (line 1)␤»

[12:52] <moritz> m: my @arr = 0 xx 15; say @arr

[12:52] <camelia> rakudo-moar 64c32ea18: OUTPUT: «[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]␤»

[12:52] <moritz> Ronja: ^^

[12:52] <azawawi> moritz++

[12:52] <azawawi> Ronja: https://docs.perl6.org/routine/xx

[12:53] <azawawi> moritz: hi

[12:53] <azawawi> moritz: any idea how to get line number information from perl6 --target=parse output using NQP?

[12:54] *** Ven`` left
[12:54] <Ronja> I see, thanks

[12:54] *** Ven`` joined
[12:55] *** p6bannerbot sets mode: +v Ven``

[12:56] *** zakharyas joined
[12:57] *** p6bannerbot sets mode: +v zakharyas

[12:59] *** albertferrico left
[13:00] *** squashable6 left
[13:00] <moritz> azawawi: since the information is not in that output, you cannot get it from the output -- unless I misunderstood your question

[13:01] *** squashable6 joined
[13:01] *** ChanServ sets mode: +v squashable6

[13:01] <azawawi> moritz: im actually now reading Perl6::Parser to understand the NQP stuff

[13:02] *** p6bannerbot sets mode: +v squashable6

[13:02] <azawawi> moritz: --target=parse as it has no useful information for making document outline (location, symbol type)

[13:02] <timotimo> you need to inspect the QAST node's .node attribute, it's a cursor

[13:03] <timotimo> from that you would use the compiler method that gives you a line number for a text position

[13:03] <azawawi> cool

[13:03] <eiro> Ronja, another way to do it is (0,0,...*)[^15]

[13:03] <eiro> more generic way

[13:03] <timotimo> eiro: i'd personally go with (0 xx *)[^15] rather than using ... for that

[13:03] *** squashable6 left
[13:04] *** squashable6 joined
[13:04] *** ChanServ sets mode: +v squashable6

[13:04] <eiro> timotimo, sure... i was just pointing out

[13:04] *** p6bannerbot sets mode: +v squashable6

[13:05] <eiro> timotimo, any reason other than "it looks better"?

[13:05] <timotimo> performance :P

[13:05] <timotimo> not sure how big the difference is

[13:06] <azawawi> moritz: thanks

[13:06] <azawawi> timotimo++

[13:08] <eiro> timotimo, ok :)

[13:10] <timotimo> eiro: the xx version takes less than ¼ as much time

[13:10] <timotimo> 20 seconds vs 3.63 seconds

[13:11] <timotimo> for doing [^15] 50_000 times

[13:11] <xinming> in perl6, a     for @lazy-array -> $item { ... }      <--- If the @lazy-array is so huge. Can we take one and discard remainers?

[13:11] <timotimo> using just 0 xx 15 is much, much faster still

[13:11] <xinming> now, I just meet a problem, Which caused the app to run over 10G ram.

[13:11] <xinming> I believe it's because the @lazy-array is keeping expanding

[13:12] <timotimo> xinming: if you don't assign to an @-sigiled variable, arrays are not cached

[13:12] *** lizmat left
[13:12] <timotimo> eiro: 0 xx 15 does 500_000 instead of 50_000 at 1.4 seconds compared to (0 xx *)[^15] taking 3.6 for 1/10th as much work

[13:12] <xinming> So, something like    for lazy gather call-sub() -> $item { }   

[13:12] <xinming> This will achieve what I want?

[13:12] <eiro> *that* faster :) thanks timotimo 

[13:13] <timotimo> m: my $everything = 0 xx *; my int $i = 0; for @$everything { $i++; $i.say if $i %% 100_000 }

[13:14] <camelia> rakudo-moar 64c32ea18: OUTPUT: «(timeout)100000␤»

[13:14] <timotimo> hm.

[13:16] <timotimo> this one won't grow:

[13:16] <xinming> timotimo: Do you mean, somethine like   I can change     my @a = lazy gather generator();  for @a -> $item { }     to something like    my $a = lazy gather generator(); for $a -> $item { }

[13:16] <timotimo> m: my $everything := 0 xx *; my int $i = 0; for $everything { $i++ }

[13:16] <camelia> rakudo-moar 64c32ea18: OUTPUT: «(timeout)»

[13:16] <timotimo> the := made it work properly; calling .list on it, or using @$foo will cause caching

[13:17] <xinming> Thanks, WIll try

[13:17] *** squashable6 left
[13:17] *** squashable6 joined
[13:18] *** p6bannerbot sets mode: +v squashable6

[13:20] *** Ven`` left
[13:21] *** Ven`` joined
[13:21] *** p6bannerbot sets mode: +v Ven``

[13:23] <SmokeMachine> m: role R { method r {...} }; class C does R { has R $.a handles <r> }

[13:23] <camelia> rakudo-moar 64c32ea18: ( no output )

[13:23] <SmokeMachine> :D

[13:33] *** azawawi left
[13:34] *** Ven`` left
[13:39] <xinming> @lazy-array;  my ($a, $b, @remainder) = @lazy-array;    <--- In this case, How can we keep @remainder as a lazy list also ?

[13:42] <timotimo> m: my $lazy-array := 0 xx *; my ($a, $b) = $lazy-array.shift, $lazy-array.shift;

[13:42] <camelia> rakudo-moar 64c32ea18: OUTPUT: «No such method 'shift' for invocant of type 'Seq'. Did you mean 'unshift'?␤  in block <unit> at <tmp> line 1␤␤»

[13:42] <timotimo> ho-hum.

[13:43] <timotimo> m: my $lazy-array := 0 xx *; my ($a, $b) = $lazy-array.head(2); 

[13:43] <camelia> rakudo-moar 64c32ea18: ( no output )

[13:43] <timotimo> m: my $lazy-array := 0 xx *; my ($a, $b) = $lazy-array.head(2); say $lazy-array.head

[13:43] <camelia> rakudo-moar 64c32ea18: OUTPUT: «The iterator of this Seq is already in use/consumed by another Seq␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[13:43] <timotimo> mhm

[13:44] <jkramer> Doesn't it work right away in your example?

[13:45] <jkramer> m: my $inf = 0 xx *; my ($a, $b, @c) = $inf; say @c.elems

[13:45] <camelia> rakudo-moar 64c32ea18: OUTPUT: «Cannot .elems a lazy list␤  in block <unit> at <tmp> line 1␤␤»

[13:45] <timotimo> m: my ($a, $b); my $input-array := 1 .. *; my $result-array = gather { my $index = 0; for $input-array { $index++; if $index == 1 { $a = $_; next }; if $index == 2 { $b = $_; next }; $_ } };

[13:45] <camelia> rakudo-moar 64c32ea18: OUTPUT: «WARNINGS for <tmp>:␤Useless use of $_ in sink context (line 1)␤»

[13:45] <timotimo> m: my ($a, $b); my $input-array := 1 .. *; my $result-array = gather { my $index = 0; for $input-array { $index++; if $index == 1 { $a = $_; next }; if $index == 2 { $b = $_; next }; take $_ } };

[13:45] <camelia> rakudo-moar 64c32ea18: ( no output )

[13:45] <timotimo> m: my ($a, $b); my $input-array := 1 .. *; my $result-array = gather { my $index = 0; for $input-array { $index++; if $index == 1 { $a = $_; next }; if $index == 2 { $b = $_; next }; take $_ } }; .say for $result-array[^15]

[13:45] <camelia> rakudo-moar 64c32ea18: OUTPUT: «3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤»

[13:45] <timotimo> m: my ($a, $b); my $input-array := 1 .. *; my $result-array = gather { my $index = 0; for $input-array { $index++; if $index == 1 { $a = $_; next }; if $index == 2 { $b = $_; next }; take $_ } }; .say for $result-array[^15]; say $a; say $b

[13:45] <camelia> rakudo-moar 64c32ea18: OUTPUT: «3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤1␤2␤»

[13:45] <timotimo> that's not quite amazing

[13:45] <timotimo> but it's better than nothing

[13:45] <jkramer> What's wrong with the original line?

[13:46] <jkramer> m: my $inf = ^Inf; my ($a, $b, @c) = $inf; say $inf.head(10); say $inf.elems

[13:46] <camelia> rakudo-moar 64c32ea18: OUTPUT: «(0 1 2 3 4 5 6 7 8 9)␤Cannot .elems a lazy list␤  in block <unit> at <tmp> line 1␤␤»

[13:46] <jkramer> Oh

[13:46] <jkramer> m: my $inf = ^Inf; my ($a, $b, @c) = $inf; say $a; say $b

[13:46] <camelia> rakudo-moar 64c32ea18: OUTPUT: «0␤1␤»

[13:47] <jkramer> Why does @c not start at 2?

[13:47] <xinming> m: my $inf = ^Inf; my ($a, $b, @c) = $inf; my ($d, $e, @z) = @c; $d.say; $e.say;

[13:47] <camelia> rakudo-moar 64c32ea18: OUTPUT: «2␤3␤»

[13:47] <xinming> How amazing perl6 is. :-)

[13:47] <timotimo> wow

[13:48] <xinming> m: my $inf = ^Inf; my ($a, $b, $c) = $inf; my ($d, $e, $z) = $c; $d.say; $e.say;

[13:48] <camelia> rakudo-moar 64c32ea18: OUTPUT: «2␤(Any)␤»

[13:48] <xinming> m: my $inf = ^Inf; my ($a, $b, $c) = $inf; my ($d, $e, $z) = @$c; $d.say; $e.say;

[13:48] <camelia> rakudo-moar 64c32ea18: OUTPUT: «2␤(Any)␤»

[13:48] <xinming> m: my $inf = ^Inf; my ($a, $b, $c) = $inf; my ($d, $e, $z) = |$c; $d.say; $e.say;

[13:48] <camelia> rakudo-moar 64c32ea18: OUTPUT: «2␤(Any)␤»

[13:48] <xinming> m: my $inf = ^Inf; my ($a, $b, @c) = $inf; my ($d, $e, $z) = @c; $d.say; $e.say;

[13:48] <camelia> rakudo-moar 64c32ea18: OUTPUT: «2␤3␤»

[13:48] <xinming> I'll try it locally

[13:49] <xinming> Can we also make @c a Inf object here?

[13:50] <jkramer> Ah nevermind, I say $inf.head, not @c.head :)

[13:50] <xinming> As if I we use for @c -> $xxx { }     This is will cause @c be cached

[13:50] *** jameslenz joined
[13:51] *** p6bannerbot sets mode: +v jameslenz

[13:55] *** jameslenz left
[14:00] <xinming> m: my $h = ^Inf; my ($a, $b) = $h;  for $h -> $x { }

[14:00] <camelia> rakudo-moar 64c32ea18: ( no output )

[14:00] *** kysseuu joined
[14:01] *** araraloren joined
[14:02] *** p6bannerbot sets mode: +v araraloren

[14:05] *** kysseuu left
[14:07] *** nanotubevX joined
[14:08] *** p6bannerbot sets mode: +v nanotubevX

[14:12] *** nanotubevX left
[14:20] <buggable> New CPAN upload: AttrX-Mooish-v0.4.12.tar.gz by VRURG http://modules.perl6.org/dist/AttrX::Mooish:cpan:VRURG

[14:23] <xinming> m: my $a := lazy gather { take 1; take 2; take 3; take 5; }; my ($x, $y) = $a; for $a { }

[14:23] <camelia> rakudo-moar 64c32ea18: OUTPUT: «The iterator of this Seq is already in use/consumed by another Seq␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[14:23] <xinming> How can we solve this without using an array?

[14:23] <xinming> Since I don't want to cache the result. to keep mem usage small

[14:27] <xinming> I mean, resetting that is also ok.

[14:29] <araraloren> m: my $a := lazy gather { take 1; take 2; take 3; take 5; }; my ($x, $y) = $a; dd $x;

[14:29] <camelia> rakudo-moar 64c32ea18: OUTPUT: «Int $x = 1␤»

[14:29] <araraloren> m: my $a := lazy gather { take 1; take 2; take 3; take 5; }; my ($x, $y) = $a; dd $a;

[14:29] <camelia> rakudo-moar 64c32ea18: OUTPUT: «The iterator of this Seq is already in use/consumed by another Seq␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[14:32] <Xliff> m: use Nativecall; my uint32 $a = 1; say $a ~~ Bool

[14:32] <camelia> rakudo-moar 64c32ea18: OUTPUT: «===SORRY!===␤Could not find Nativecall at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-1/share/perl6␤    CompUni…»

[14:32] <Xliff> m: use NativeCall; my uint32 $a = 1; say $a ~~ Bool

[14:32] <camelia> rakudo-moar 64c32ea18: OUTPUT: «False␤»

[14:32] <Xliff> m: use NativeCall; my uint32 $a = 1; say $a ~~ (Bool, Int).any

[14:32] <camelia> rakudo-moar 64c32ea18: OUTPUT: «True␤»

[14:33] <Xliff> m: use NativeCall; my uint32 $r = 1; my $a = $r; say $a ~~ (Bool, Int).any

[14:33] <camelia> rakudo-moar 64c32ea18: OUTPUT: «True␤»

[14:33] <araraloren> m: my $a := lazy gather { take 1; take 2; take 3; take 5; }; my ($x, $y, @l) = $a; .say for @l;

[14:33] <camelia> rakudo-moar 64c32ea18: OUTPUT: «3␤5␤»

[14:33] <araraloren> xinming How about this ^^

[14:34] <araraloren> m: say Nil.xxxxxxxxxx;

[14:34] <camelia> rakudo-moar 64c32ea18: OUTPUT: «Nil␤»

[14:34] <araraloren> And what's this ?????

[14:36] <SmokeMachine> m: my $a := lazy gather { take 1; take 2; take 3; take 5; }; my ($x, $y) = $a.cache; for $a { }

[14:36] <camelia> rakudo-moar 64c32ea18: ( no output )

[14:36] <xinming> araraloren: the problem with @l version is, @l will try to cache the values in @l, which consumes a lot of ram if @l is large.

[14:36] <SmokeMachine> m: my $a := lazy gather { take 1; take 2; take 3; take 5; }; my ($x, $y) = $a[]; for $a { }

[14:36] <camelia> rakudo-moar 64c32ea18: ( no output )

[14:37] <xinming> m: my $a := lazy gather { take 1; take 2; take 3; take 5; }; my ($x, $y) = $a[]; for $a { $_.say }

[14:37] <camelia> rakudo-moar 64c32ea18: OUTPUT: «1␤2␤3␤5␤»

[14:37] <araraloren> xinming yes, you are right

[14:37] <xinming> I think the [] is the same as @a version

[14:37] <SmokeMachine> xinming: but it caches too...

[14:37] <araraloren> m: my $a := lazy gather { take 1; take 2; take 3; take 5; }; my ($x, $y) = $a[]; for $a { .say }; for $a {}

[14:37] <camelia> rakudo-moar 64c32ea18: OUTPUT: «1␤2␤3␤5␤»

[14:37] <xinming> yes, I wish a version doesn't do cache.

[14:37] <araraloren> yeah, it cached

[14:37] <SmokeMachine> m: my $a := lazy gather { take 1; take 2; take 3; take 5; }; my ($x, $y) = $a.head: 2; for $a { }

[14:37] <camelia> rakudo-moar 64c32ea18: OUTPUT: «The iterator of this Seq is already in use/consumed by another Seq␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[14:38] <Geth> ¦ doc: chsanch++ created pull request #2396: Add links for needed modules in Rendering Pod section

[14:38] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2396

[14:38] <xinming> For now, I call the generator twice.

[14:39] <SmokeMachine> xinming: you could use SeqSplitter: https://github.com/FCO/SeqSplitter

[14:39] <araraloren> Pull the element manually, maybe

[14:41] <Ronja> say I have an array of booleans and I want to count how many True elements I have. currently this is my code: say (@ovet.map: { .Int }).sum;

[14:41] <Ronja> is that the best way?

[14:42] <jkramer> @ovet.grep(*.so).elems

[14:42] <Ronja> how does that work?

[14:42] <jkramer> Or just @ovet.sum actually :)

[14:43] <Ronja> hmm

[14:43] <jkramer> Bool is an enum with False = 0 and True = 1 so just .sum will do what you want

[14:43] <Ronja> right

[14:43] <Ronja> jkramer: can you explain the .grep(*.so) part?

[14:44] <jkramer> Sure, although it's actually not optimal. *.so is a function that coerces it's argument into a boolean, and grep will return only the ones that evaluate to True, and after that .elems counts the amount of elems that evaluated to True

[14:45] <SmokeMachine> m: say (True, True but 42, False).map({ .Int }).sum

[14:45] <camelia> rakudo-moar 64c32ea18: OUTPUT: «43␤»

[14:45] <jkramer> But since they're already bools that unnecessary

[14:45] <SmokeMachine> m: say (True, True but 42, False).grep(*.so).elems

[14:45] <camelia> rakudo-moar 64c32ea18: OUTPUT: «2␤»

[14:45] <Ronja> jkramer: thanks

[14:45] <jkramer> m: (True, True but 42, False).sum.asy

[14:45] <camelia> rakudo-moar 64c32ea18: OUTPUT: «No such method 'asy' for invocant of type 'Int'. Did you mean 'any'?␤  in block <unit> at <tmp> line 1␤␤»

[14:45] <jkramer> m: (True, True but 42, False).sum.say

[14:45] <camelia> rakudo-moar 64c32ea18: OUTPUT: «2␤»

[14:46] <SmokeMachine> m: (True, True but 42, False)>>Int.sum.say

[14:46] <camelia> rakudo-moar 64c32ea18: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing dot on method call␤at <tmp>:1␤------> 3(True, True but 42, False)>>7⏏5Int.sum.say␤    expecting any of:␤        postfix␤»

[14:47] <SmokeMachine> m: (True, True but 42, False)>>.Int.sum.say

[14:47] <camelia> rakudo-moar 64c32ea18: OUTPUT: «43␤»

[14:49] *** dotdotdot joined
[14:50] *** p6bannerbot sets mode: +v dotdotdot

[15:00] <buggable> New CPAN upload: Cro-RPC-JSON-v0.0.4.tar.gz by VRURG http://modules.perl6.org/dist/Cro::RPC::JSON:cpan:VRURG

[15:04] *** zakharyas left
[15:14] *** zakharyas joined
[15:14] *** p6bannerbot sets mode: +v zakharyas

[15:15] *** zakharyas left
[15:17] *** ExtraCrispy joined
[15:17] *** p6bannerbot sets mode: +v ExtraCrispy

[15:19] *** zakharyas joined
[15:19] *** p6bannerbot sets mode: +v zakharyas

[15:21] *** fake_space_whale joined
[15:21] *** zakharyas left
[15:22] *** p6bannerbot sets mode: +v fake_space_whale

[15:22] *** zakharyas joined
[15:23] *** p6bannerbot sets mode: +v zakharyas

[15:24] *** kensanata joined
[15:24] *** p6bannerbot sets mode: +v kensanata

[15:25] <kensanata> How do you run cro from software like monit? How do I check where the logs go? Just redirecting stdout and stderr?

[15:27] <El_Che> logs is middleware

[15:27] <El_Che> you can decide that yourself

[15:27] <El_Che> monit just need to cli startup script of cro

[15:27] <El_Che> nothing fancy there

[15:28] <kensanata> I'm not sure what middleware means in this context. So redirecting stdout and stderr is fine?

[15:29] <kensanata> I'll try that. Right now I'm using something that looks very ugly: using a nohup perl6 call. 

[15:29] <El_Che> https://cro.services/docs/reference/cro-http-server (check after)

[15:30] <El_Che> here is an example: https://cro.services/docs/intro/spa-with-cro

[15:30] <El_Che> after => [

[15:30] <El_Che>         Cro::HTTP::Log::File.new(logs => $*OUT, errors => $*ERR)

[15:30] <El_Che>     ]

[15:30] <El_Che> send to a file instead

[15:30] <El_Che> bbl

[15:31] *** domidumont left
[15:32] <kensanata> Thanks for that link.

[15:37] *** coverable6 left
[15:38] *** coverable6 joined
[15:38] *** ChanServ sets mode: +v coverable6

[15:38] *** p6bannerbot sets mode: +v coverable6

[15:40] <tbrowder___>  hi folks, need some help with grammars \o/

[15:43] <tbrowder___> given an action method somewhere in the middle of a huge grammar such as rakudo nqp, is it true that the match object passed to it has all the underlying matches attached to it?

[15:44] <moritz> yes

[15:45] *** bwisti joined
[15:45] <tbrowder___> another q: using make in an action method with no argument does what?

[15:45] *** p6bannerbot sets mode: +v bwisti

[15:49] *** domidumont joined
[15:49] <moritz> m: make()

[15:49] <camelia> rakudo-moar 64c32ea18: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling make() will never work with declared signature (Mu \made)␤at <tmp>:1␤------> 3<BOL>7⏏5make()␤»

[15:49] <tbrowder___> bdfoy mentions make attaches an arg to the ast slot, but to what is the ast attached?

[15:49] <moritz> m: '' ~~ /^/; make(); say $/.made

[15:49] <camelia> rakudo-moar 64c32ea18: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling make() will never work with declared signature (Mu \made)␤at <tmp>:1␤------> 3'' ~~ /^/; 7⏏5make(); say $/.made␤»

[15:50] *** p6bannerbot sets mode: +v domidumont

[15:50] <timotimo> it's the ast slot of the currently-in-scope $/

[15:50] <moritz> tbrowder___: return an error, it seems like :-)

[15:50] <timotimo> it's literally syntactic sugar for $/.ast = 1

[15:50] <timotimo> i mean "make 1" is short for "$/.ast = 1"

[15:50] <moritz> m: '' ~~ /^/; make 'foo'; say made

[15:50] <camelia> rakudo-moar 64c32ea18: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    made used at line 1. Did you mean 'make'?␤␤»

[15:50] <moritz> timotimo: tbrowder___ asked about "no argument"

[15:50] <timotimo> m: class NotAMatch { has $.ast is rw }; $/ = NotAMatch.new; make "hello"; dd $/

[15:50] <camelia> rakudo-moar 64c32ea18: OUTPUT: «P6opaque: no such attribute '$!made' on type Match in a NotAMatch when trying to bind a value␤  in block <unit> at <tmp> line 1␤␤»

[15:51] <timotimo> m: class NotAMatch { has $.made is rw }; $/ = NotAMatch.new; make "hello"; dd $/

[15:51] <camelia> rakudo-moar 64c32ea18: OUTPUT: «P6opaque: no such attribute '$!made' on type Match in a NotAMatch when trying to bind a value␤  in block <unit> at <tmp> line 1␤␤»

[15:51] <timotimo> oh, interesting

[15:51] <timotimo> it's being a little cheeky :) :)

[15:51] *** jameslenz joined
[15:51] <tbrowder___> ok, then the in-scope match i assume is the arg to the method and the ast belngs to that name?

[15:52] *** nige left
[15:52] *** p6bannerbot sets mode: +v jameslenz

[15:53] <timotimo> well, it's whatever is in $/

[15:53] <timotimo> and you usually have $/ be the first argument to action methods

[15:53] <tbrowder___> moritz: thanks

[15:53] <timotimo> because the grammar engine passes the $/ from the match as the first argument

[15:54] <tbrowder___> timotimo: in the rakudo nqp grammar i see it always passed explicitly

[15:55] <timotimo> how do you mean?

[15:55] *** robertle_ left
[15:56] <Xliff> m: %h = (a=>1,b=>2); %i = (c=>3,d=>4); %h.append: %i; %h.say

[15:56] <camelia> rakudo-moar 64c32ea18: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '%h' is not declared␤at <tmp>:1␤------> 3<BOL>7⏏5%h = (a=>1,b=>2); %i = (c=>3,d=>4); %h.a␤»

[15:56] <Xliff> m: my %h = (a=>1,b=>2); my %i = (c=>3,d=>4); %h.append: %i; %h.say

[15:56] <camelia> rakudo-moar 64c32ea18: OUTPUT: «{a => 1, b => 2, c => 3, d => 4}␤»

[15:56] <tbrowder___> is there a global $/ accessible to child methods?

[15:56] <moritz> it's explicitly declared as a parameter; the passing happens implicitly

[15:56] <timotimo> perl6 explicitly made $/ not be global

[15:56] *** jameslenz left
[15:57] <moritz> if you need to pass in more context into an action method, that's usually done through dynamic variables

[15:57] *** domidumont left
[15:58] <tbrowder___> ok, i think i see, the grammar matches a token, and, if there is a corresponding method that’s the implicit passing but the method has an explicit $/ as first arg.

[16:00] <tbrowder___> i am using some dynamic vars, but passing other vars from method to pod subs works well, too.

[16:00] <moritz> the grammar matches a token, and if there is a method for the same name in the action method, it calls that, with the match as the first arg

[16:01] <buggable> New CPAN upload: Sparrowdo-0.0.42.tar.gz by MELEZHIK http://modules.perl6.org/dist/Sparrowdo:cpan:MELEZHIK

[16:01] <moritz> it doesn't do any introspection

[16:01] <moritz> if you write an action method that doesn't take an argument, that will cause an error

[16:02] *** zakharyas left
[16:02] <moritz> m: class Actions { method TOP() {} }; grammar A { token TOP { ^$} }; A.parse('', :actions(Actions))

[16:02] <camelia> rakudo-moar 64c32ea18: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in method TOP at <tmp> line 1␤  in regex TOP at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:02] *** zakharyas joined
[16:02] <tbrowder___> ok, thnx

[16:02] *** scimon left
[16:02] <moritz> (the extra argument is the invocant, which is why it complains about 2 and 1, not 1 and 0)

[16:03] *** p6bannerbot sets mode: +v zakharyas

[16:04] *** zakharyas left
[16:05] *** zakharyas joined
[16:06] *** p6bannerbot sets mode: +v zakharyas

[16:06] *** zakharyas left
[16:07] <tbrowder___> i don’t see any arg :-( !!

[16:07] *** zakharyas joined
[16:08] *** p6bannerbot sets mode: +v zakharyas

[16:08] *** dotdotdot left
[16:08] <moritz> that's why it throws the error

[16:08] <moritz> m: class Actions { method TOP($/) {} }; grammar A { token TOP { ^$} }; A.parse('', :actions(Actions))

[16:08] <camelia> rakudo-moar 64c32ea18: ( no output )

[16:08] <moritz> here the $/ is the parameter, hence no error

[16:08] <moritz> m: class Actions { method TOP($my-match) {} }; grammar A { token TOP { ^$} }; A.parse('', :actions(Actions))

[16:09] <camelia> rakudo-moar 64c32ea18: ( no output )

[16:09] <moritz> can call it anything you like :)

[16:10] <Xliff> You can serialize and deserialize .perl output, correct?

[16:10] <Xliff> You would need EVAL to deserialize though, correct?

[16:11] <tbrowder___> ok, i see clearly with the explicit arg, but i’m confused with no arg. where does the 2 come from?

[16:12] *** kensanata left
[16:13] <moritz> tbrowder___: the grammar engine calls $actions.TOP($match)

[16:13] <moritz> tbrowder___: $actions (the invocant) is the first arg, $match the second

[16:13] <moritz> Xliff: there are limits to what .perl can do though

[16:15] <Xliff> moritz: Just a hash definition, but I still need MONKEY-SEE-NO-EVAL, for even basic EVAL usage. Makes it seem wrong, somehow.

[16:15] <tbrowder___> moritz: thnx, that helps, i forget about that implicit invocant thing

[16:16] <moritz> Xliff: maybe use JSON instead?

[16:17] *** dotdotdot joined
[16:17] <Xliff> LOL! Good point.

[16:17] *** p6bannerbot sets mode: +v dotdotdot

[16:18] <tbrowder___> speaking of implicit, is there an implicit value of the .ast on a match object when no make has been executed?

[16:19] *** araraloren left
[16:19] <moritz> easy to find out, no?

[16:20] <moritz> m: '' ~~ /^/ and say $/.made.perl

[16:20] <camelia> rakudo-moar fc5b76aee: OUTPUT: «Nil␤»

[16:21] <tbrowder___> ok, you proved it, thanks. i can test for existence then.

[16:23] <tbrowder___> thanks moritz and timotimo, back to the trenches with more confidence!

[16:24] *** cono joined
[16:25] *** p6bannerbot sets mode: +v cono

[16:25] <cono> m: sub qwe($x) { $x.say }; my $y = (1,2,3).any; $y.say; qwe($y)

[16:25] <camelia> rakudo-moar fc5b76aee: OUTPUT: «any(1, 2, 3)␤1␤2␤3␤»

[16:25] <cono> is there any way to pass junction into sub? instead of calling sub 3 times like in this example?

[16:26] <timotimo> yes, the sub needs to take either Mu or Junction explicitly

[16:26] <timotimo> m: sub qwe(Junction $x) { say "called"; say $x }; qwe(any(1, 2, 3))

[16:26] <camelia> rakudo-moar fc5b76aee: OUTPUT: «called␤any(1, 2, 3)␤»

[16:26] <cono> but if I wanna pass Int sometimes, and sometimes junction ?

[16:27] <timotimo> then use Mu

[16:27] <timotimo> Mu is the superclass of Everything

[16:27] <timotimo> the normal type constraint, however, is Any

[16:28] <cono> ah, got it. thanks!

[16:28] <timotimo> Any and Junction are both derived from Mu, so if you have an Int, it will match Any, but if you have a Junction, it won't, and that triggers the auto-threading that junctions do

[16:29] *** dotdotdot left
[16:29] <cono> ah, so when I write just simple sub q($x) its implicitly any ?

[16:29] *** dotdotdot joined
[16:30] <timotimo> yas

[16:30] *** p6bannerbot sets mode: +v dotdotdot

[16:30] <timotimo> yes*

[16:30] <cono> timotimo++

[16:38] *** dakkar left
[16:38] <Kaiepi> m: subset Foo where * ~~ Int | Junction; my Foo $foo = any(1, 2, 3); say $foo

[16:38] <camelia> rakudo-moar fc5b76aee: OUTPUT: «Type check failed in assignment to $foo; expected Foo but got Junction (any(1, 2, 3))␤  in block <unit> at <tmp> line 1␤␤»

[16:39] <Kaiepi> damn

[16:40] <SmokeMachine> m: subset Foo of Mu where * ~~ Int | Junction; my Foo $foo = any(1, 2, 3); say $foo

[16:40] <camelia> rakudo-moar fc5b76aee: OUTPUT: «any(1, 2, 3)␤»

[16:41] <SmokeMachine> Kaiepi: ^^

[16:42] *** zakharyas left
[16:44] <Kaiepi> ah

[16:44] <SmokeMachine> m: subset Foo where * ~~ Int | Junction; say Foo.^refinee

[16:44] <camelia> rakudo-moar fc5b76aee: OUTPUT: «(Any)␤»

[16:45] <SmokeMachine> m: subset Foo of Mu where * ~~ Int | Junction; say Foo.^refinee

[16:45] <camelia> rakudo-moar fc5b76aee: OUTPUT: «(Mu)␤»

[16:45] <SmokeMachine> m: say any(1,2) ~~ Any 

[16:45] <camelia> rakudo-moar fc5b76aee: OUTPUT: «True␤»

[16:46] <SmokeMachine> m: say any(1,2) ~~ Mu 

[16:46] <camelia> rakudo-moar fc5b76aee: OUTPUT: «True␤»

[16:46] <SmokeMachine> m: say Junction ~~ Any 

[16:46] <camelia> rakudo-moar fc5b76aee: OUTPUT: «False␤»

[16:46] <SmokeMachine> m: say Junction ~~ Mu

[16:46] <camelia> rakudo-moar fc5b76aee: OUTPUT: «True␤»

[16:56] *** noganex_ left
[16:56] *** noganex joined
[16:56] <Xliff> timotimo: I have a grammar question for you, however I will have to gist it. You going to be around?

[16:57] *** p6bannerbot sets mode: +v noganex

[17:04] *** vrurg left
[17:04] *** domidumont joined
[17:05] *** p6bannerbot sets mode: +v domidumont

[17:17] *** |oLa| joined
[17:18] *** p6bannerbot sets mode: +v |oLa|

[17:29] <Xliff> If I have a regex <section> that depends on a regex <stage>*. If there is a failure in <stage>, how can I make it RESTART parsing at the beginning of <section>?

[17:29] <Xliff> I will gist this in a second.

[17:29] *** AlexDani` joined
[17:30] *** p6bannerbot sets mode: +v AlexDani`

[17:31] <timotimo> i'm not sure how you try-catch inside of grammars

[17:33] *** AlexDaniel left
[17:43] *** xinming left
[17:43] *** Kaiepi left
[17:43] *** xinming joined
[17:44] *** Kaiepi joined
[17:44] *** p6bannerbot sets mode: +v xinming

[17:44] *** AlexDani` is now known as AlexDaniel

[17:44] <Xliff> Yeah. I've made progress.

[17:44] *** p6bannerbot sets mode: +v Kaiepi

[17:45] <Xliff> timotimo: I am having problems because the grammar catches the error, but doesn't advance the cursor to the next portion.

[17:45] <Xliff> So it keeps getting the error, and the rest of the file fails out.

[17:48] <timotimo> personally i'd try to force a non-match with <!>, but i don't know how to properly cascade it exactly as far as you want

[17:50] <Xliff> https://gist.github.com/Xliff/12689c655f322126486f36e6fe10496b

[17:50] *** cognominal-p6 left
[17:50] <Xliff> timotimo: Ah! THAT might have been what I am looking for.

[17:51] <Xliff> I could find <?>, but didn't see any mention of <!> in the docs. Of course, I was looking selectively (which implies a bit of frantic)

[17:52] *** jameslenz joined
[17:53] *** p6bannerbot sets mode: +v jameslenz

[17:53] *** zakharyas joined
[17:54] *** p6bannerbot sets mode: +v zakharyas

[17:56] *** jameslenz left
[17:57] <Geth> ¦ doc: 1909220ecc | (Moritz Lenz)++ | doc/Language/regexes.pod6

[17:57] <Geth> ¦ doc: Improve description of <?>

[17:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1909220ecc

[17:57] <synopsebot> Link: https://doc.perl6.org/language/regexes

[17:57] *** rfold joined
[17:57] *** lizmat joined
[17:57] *** p6bannerbot sets mode: +v lizmat

[17:57] *** ryn1x joined
[17:58] *** p6bannerbot sets mode: +v rfold

[17:58] *** troys joined
[17:58] *** p6bannerbot sets mode: +v ryn1x

[17:59] *** p6bannerbot sets mode: +v troys

[18:04] *** zakharyas left
[18:04] <Geth> ¦ doc: 5607305237 | Coke++ | doc/Type/Nil.pod6

[18:04] <Geth> ¦ doc: whitespace

[18:04] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5607305237

[18:04] <Geth> ¦ doc: 86b41f53c4 | Coke++ | doc/Type/Any.pod6

[18:04] <Geth> ¦ doc: Fix code compilation

[18:04] <synopsebot> Link: https://doc.perl6.org/type/Nil

[18:04] <synopsebot> Link: https://doc.perl6.org/type/Any

[18:04] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/86b41f53c4

[18:06] *** sno left
[18:09] *** cognominal-p6 joined
[18:10] *** p6bannerbot sets mode: +v cognominal-p6

[18:11] *** zakharyas joined
[18:11] <Xliff> timotimo: Yup! The match object is not advancing after the error. See updated gist:

[18:11] <Xliff> https://gist.github.com/Xliff/12689c655f322126486f36e6fe10496b

[18:11] *** pmurias left
[18:11] *** xinming left
[18:12] *** p6bannerbot sets mode: +v zakharyas

[18:12] *** pmurias joined
[18:12] *** p6bannerbot sets mode: +v pmurias

[18:15] *** uzl joined
[18:15] *** p6bannerbot sets mode: +v uzl

[18:15] *** pmurias left
[18:18] *** pmurias joined
[18:18] *** p6bannerbot sets mode: +v pmurias

[18:19] *** pmurias left
[18:22] <uzl> .tell Zoffix If you're still accepting alias suggestions, I have the following: Glor (Shortened version of Gloria), Larius and Pyrus (A genus which includes fruits as the pear).

[18:22] <yoleaux> uzl: I'll pass your message to Zoffix.

[18:22] *** xinming joined
[18:23] *** pmurias joined
[18:23] *** p6bannerbot sets mode: +v pmurias

[18:23] *** p6bannerbot sets mode: +v xinming

[18:29] *** Zoffix joined
[18:29] *** p6bannerbot sets mode: +v Zoffix

[18:29] <Zoffix> uzl: no, there won't be any poll anymore.

[18:30] <Zoffix> It was a Plan B, but we got confirmation that Plan A will definitely happen, so there's no point in a poll

[18:30] <AlexDaniel> which is great, I think

[18:30] <Zoffix> http://colabti.org/irclogger/irclogger_log/perl6?date=2018-10-18#l6

[18:30] <Zoffix> Yeah :)

[18:31] <uzl> That sounds great! And here I was exercising my creative mind ;-)

[18:32] <moritz> \o/

[18:36] *** cognominal-p6 left
[18:36] *** cognominal-p6 joined
[18:37] *** p6bannerbot sets mode: +v cognominal-p6

[18:42] *** rfold left
[18:45] <El_Che> uzl: Pyrus is terrible. Too close to Pyrrhus, know for the Pyrrhic victory (even worst in many languages, like Pyrrusoverwinning in Dutch)

[18:46] <SmokeMachine> Is there anyone thinking od write a perl6 module for pulumi?

[18:47] <SmokeMachine> s/od/of/

[18:49] <Zoffix> timotimo: you know a lot about spesh? We got a blocker due to spesh changes and AFAIK jnthn is away https://github.com/rakudo/rakudo/issues/2395#issuecomment-431457419

[18:52] *** bwisti left
[18:52] <uzl> El_Che: Probably too close for its own good. Certainly an unwanted association with P6.

[18:55] <Zoffix> SmokeMachine: FWIW, you can run individual test files with t/fudgeandrun S32-list/seq.t to check they pass before committing

[18:55] *** fake_space_whale left
[18:57] <El_Che> uzl: exactly :)

[18:59] *** noganex_ joined
[18:59] <Zoffix> .tell timotimo you know a lot about spesh? We got a release blocker due to spesh changes and AFAIK jnthn is away https://github.com/rakudo/rakudo/issues/2395#issuecomment-431457419  This PR avoids the issue, but doesn't fix the problem and I've zero idea about the impact of that change: https://github.com/MoarVM/MoarVM/pull/986

[18:59] <yoleaux> Zoffix: I'll pass your message to timotimo.

[18:59] *** Zoffix left
[19:00] *** p6bannerbot sets mode: +v noganex_

[19:00] <Xliff> https://gist.github.com/Xliff/12689c655f322126486f36e6fe10496b

[19:00] <Xliff> halp! ;)

[19:01] *** ryn1x left
[19:03] *** noganex left
[19:03] *** lizmat left
[19:04] *** agentzh joined
[19:04] *** p6bannerbot sets mode: +v agentzh

[19:09] <moritz> Xliff: what's line 66 of that script?

[19:09] *** pmurias left
[19:10] *** AlexDaniel left
[19:10] <Xliff> It's changed since then, but this is the closest one:

[19:10] <Xliff> make $/<stage_type> => $/<num>.Str.Num;

[19:10] <El_Che> releasable6: status

[19:10] <timotimo> zoffix, i'll have a look

[19:10] <yoleaux> 18:59Z <Zoffix> timotimo: you know a lot about spesh? We got a release blocker due to spesh changes and AFAIK jnthn is away https://github.com/rakudo/rakudo/issues/2395#issuecomment-431457419  This PR avoids the issue, but doesn't fix the problem and I've zero idea about the impact of that change: https://github.com/MoarVM/MoarVM/pull/986

[19:10] <releasable6> El_Che, Next release in ≈23 hours. 2 blockers. 87 out of 473 commits logged (⚠ 1 warnings)

[19:10] <releasable6> El_Che, Details: https://gist.github.com/a59a6da1fd8c7560bb340f90f57d4b77

[19:10] <El_Che> a day, good

[19:11] <El_Che> a new ubuntu is out

[19:11] <SmokeMachine> Zoffix: was that broken? I did that

[19:11] <Xliff> moritz: Since stage is run again, I'm not surprised that's Nil. I should probably error check, there.

[19:11] <timotimo> you did what?

[19:11] *** noganex_ left
[19:12] <moritz> Xliff: my guess is that the final newline of the error message isn't parsed

[19:12] <moritz> m: say "a\nb" ~~ /a $$ b/

[19:12] *** holyghost left
[19:12] <camelia> rakudo-moar fc5b76aee: OUTPUT: «Nil␤»

[19:12] *** noganex joined
[19:13] *** gfldex left
[19:13] *** holyghost joined
[19:13] <moritz> Xliff: the $$ is a zero-width match *before* the \n, nothing matches the \n itself

[19:13] *** p6bannerbot sets mode: +v noganex

[19:13] <timotimo> hm, where does Test::Utils live again ...

[19:13] *** zakharyas left
[19:13] *** p6bannerbot sets mode: +v holyghost

[19:13] <moritz> and in the (\s* <num> \s*) branch, the second \s* noms the \n

[19:13] <timotimo> got it

[19:14] <Xliff> moritz: Which rule for the $$? err_msg?

[19:14] *** pmurias joined
[19:14] *** p6bannerbot sets mode: +v pmurias

[19:15] <Xliff> moritz: Well, without that second \s*, regular processing doesn't work

[19:17] <moritz> Xliff: correct, err_msg only matches to the position before the newline

[19:18] <Xliff> \o/

[19:18] <Xliff> Adding a \s* after <err_msg> seems to have done the trick! /headdesk

[19:18] *** gfldex joined
[19:19] *** p6bannerbot sets mode: +v gfldex

[19:21] *** AlexDaniel joined
[19:21] *** p6bannerbot sets mode: +v AlexDaniel

[19:23] * moritz strongly recommends "rule" where appropriate

[19:24] <timotimo> zoffix, i can't reproduce the bug on my machine, but i have an idea what i can try; could you apply a patch locally and try if it changes anything?

[19:28] *** domidumont left
[19:28] <timotimo> zoffix, please try this patch: https://gist.github.com/timo/adbdf5632ddbfd2ef28203a9e33976be

[19:33] *** uzl left
[19:38] *** sno joined
[19:38] *** p6bannerbot sets mode: +v sno

[19:40] *** pmurias left
[19:41] *** pmurias joined
[19:41] *** p6bannerbot sets mode: +v pmurias

[19:46] *** patrickb joined
[19:47] *** p6bannerbot sets mode: +v patrickb

[19:48] *** Zoffix joined
[19:48] *** p6bannerbot sets mode: +v Zoffix

[19:48] <Zoffix> SmokeMachine: plan wasn't updated. Fixed now tho

[19:49] <Zoffix> timotimo: `git apply` said invalid patch. I replicated it manually: https://gist.github.com/zoffixznet/588481170beb657f6727cc95528ddbe2

[19:49] <Zoffix> timotimo: but it didn't fix the issue

[19:53] *** zakharyas joined
[19:53] *** jameslenz joined
[19:53] *** p6bannerbot sets mode: +v zakharyas

[19:54] *** p6bannerbot sets mode: +v jameslenz

[19:58] *** jameslenz left
[19:59] <Zoffix> timotimo: RE reproducing. Do you mean the hang or doubling of the time? I can't repro the hang on my VM either, but the time it takes to run that test file is 10-13s on HEAD vs. 5-6s on 2018.09

[20:00] * Zoffix is away for ~1hr

[20:01] <buggable> New CPAN upload: App-Tasks-0.0.9.tar.gz by JMASLAK http://modules.perl6.org/dist/App::Tasks:cpan:JMASLAK

[20:10] <buggable> New CPAN upload: App-Perl6LangServer-0.1.0.tar.gz by AZAWAWI http://modules.perl6.org/dist/App::Perl6LangServer:cpan:AZAWAWI

[20:12] *** noganex_ joined
[20:13] *** azawawi joined
[20:13] *** p6bannerbot sets mode: +v azawawi

[20:13] *** p6bannerbot sets mode: +v noganex_

[20:13] *** vrurg joined
[20:14] <azawawi> https://pasteboard.co/HJdw2UC.png  # Regex-based outline view is now in App::Perl6LangServer 0.1.1 ... now we can enhance it :)

[20:14] *** p6bannerbot sets mode: +v vrurg

[20:14] <AlexDaniel> that looks awesome

[20:15] <AlexDaniel> or, well, sounds at least :)

[20:15] <azawawi> hehe :)

[20:16] *** noganex left
[20:16] <azawawi> the funny thing we did the same code in Padre before... AST-based is just too much of hassle and hogs the atom ide-perl6

[20:16] <azawawi> i tried perl6 --target=parse ... but no line number information.

[20:16] <SmokeMachine> Zoffix: Im sorry

[20:19] <azawawi> anyhow, we have at least lang server features implemented # see https://github.com/azawawi/app-perl6langserver for status

[20:20] <buggable> New CPAN upload: App-Perl6LangServer-0.1.1.tar.gz by AZAWAWI http://modules.perl6.org/dist/App::Perl6LangServer:cpan:AZAWAWI

[20:22] <azawawi> next is the hover / help api hopefully :)

[20:24] *** azawawi left
[20:31] *** |oLa| left
[20:49] *** zakharyas left
[21:04] *** robertle left
[21:06] *** molaf joined
[21:07] *** p6bannerbot sets mode: +v molaf

[21:12] *** vrurg left
[21:15] *** vrurg joined
[21:16] *** p6bannerbot sets mode: +v vrurg

[21:24] *** cognominal-p6 left
[21:31] <El_Che> AlexDaniel: Add supported for Ubuntu 18.10 and opensuse 15.0 to the canary

[21:37] <Zoffix> timotimo: turns out it doesn't hang on my home box either, it just takes 40s to run vs. 5s on 2018.09

[21:37] <Zoffix> (and patch doesn't fix it)

[21:39] <El_Che> AlexDaniel: s/Add/Added/

[21:46] <Geth> ¦ doc: 54bd58b1fa | (Nick Logan)++ | doc/Type/Kernel.pod6

[21:46] <Geth> ¦ doc: Document $*KERNEL.hostname

[21:46] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/54bd58b1fa

[21:46] <Geth> ¦ doc: 31c64c2e2b | (Nick Logan)++ (committed using GitHub Web editor) | doc/Type/Kernel.pod6

[21:46] <Geth> ¦ doc: Merge pull request #2394 from ugexe/add-kernel-hostname

[21:46] <synopsebot> Link: https://doc.perl6.org/type/Kernel

[21:46] <Geth> ¦ doc: 

[21:46] <Geth> ¦ doc: Document $*KERNEL.hostname

[21:46] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/31c64c2e2b

[21:54] *** jameslenz joined
[21:54] *** p6bannerbot sets mode: +v jameslenz

[21:58] *** cognominal-p6 joined
[21:58] *** Zoffix left
[21:58] *** p6bannerbot sets mode: +v cognominal-p6

[21:59] *** patrickb left
[21:59] *** jameslenz left
[22:06] *** cognominal-p6 left
[22:06] *** cognominal-p6 joined
[22:07] *** p6bannerbot sets mode: +v cognominal-p6

[22:11] <Geth> ¦ doc/revert-2394-add-kernel-hostname: d3799bbd83 | (Nick Logan)++ (committed using GitHub Web editor) | doc/Type/Kernel.pod6

[22:11] <Geth> ¦ doc/revert-2394-add-kernel-hostname: Revert "Document $*KERNEL.hostname"

[22:11] <Geth> ¦ doc/revert-2394-add-kernel-hostname: review: https://github.com/perl6/doc/commit/d3799bbd83

[22:12] <Xliff> Unreleased, as yet.. but coming along...

[22:12] <Xliff> https://gist.github.com/Xliff/03d67a02ca2079cba77e734471c2c4ee

[22:15] <AlexDaniel> El_Che: nice

[22:18] *** HaraldJoerg1 joined
[22:19] *** p6bannerbot sets mode: +v HaraldJoerg1

[22:20] *** pmurias left
[22:37] <timotimo> zoffix, i can't reproduce the time difference either; the whole original test file takes just 3 seconds

[22:41] <AlexDaniel> Zoffix: that was quick, thank you!

[22:42] <Kaiepi> is there a less awkward way i could write this? https://hastebin.com/libecufuso.pl

[22:46] <timotimo> m: my Blob $in = Blob.new(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5); $in.rotor(8, :partial).map({ say .perl })

[22:46] <camelia> rakudo-moar a804ab57f: OUTPUT: «(1, 2, 3, 4, 5, 1, 2, 3)␤(4, 5, 1, 2, 3, 4, 5)␤»

[22:46] <timotimo> m: my Blob $in = Blob.new(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5); $in.rotor(8, :partial).map({ say Buf.new($_).perl })

[22:46] <camelia> rakudo-moar a804ab57f: OUTPUT: «Buf.new(1,2,3,4,5,1,2,3)␤Buf.new(4,5,1,2,3,4,5)␤»

[22:47] <timotimo> m: my Blob $in = Blob.new(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3); $in.rotor(8, :partial).map({ my $res = Buf.new($_); $res[7] = 0; say $res.perl })

[22:47] <camelia> rakudo-moar a804ab57f: OUTPUT: «Buf.new(1,2,3,4,5,1,2,0)␤Buf.new(4,5,1,2,3,0,0,0)␤»

[22:47] *** aindilis left
[22:48] <timotimo> Kaiepi: that gets you rid of the first three lines of the inner loop

[22:48] *** aindilis` joined
[22:49] *** p6bannerbot sets mode: +v aindilis`

[22:51] <Kaiepi> thanks

[22:54] *** HaraldJoerg1 left
[22:55] *** kerframil joined
[22:55] *** p6bannerbot sets mode: +v kerframil

[22:56] <timotimo> Kaiepi: surely you can just return $out.list and then just "flat" the result of the map into the Blob.new constructor

[22:57] *** thundergnat joined
[22:58] <Geth> ¦ doc: c7e2667853 | (Christian Sánchez)++ | doc/Language/pod.pod6

[22:58] <Geth> ¦ doc: Add links for needed modules in Rendering Pod section

[22:58] <Geth> ¦ doc: 

[22:58] <Geth> ¦ doc: Link for Pod::To::HTML = https://github.com/perl6/Pod-To-HTML

[22:58] <Geth> ¦ doc: Link for Pod::To::Markdown = https://github.com/softmoth/perl6-pod-to-markdown

[22:58] <synopsebot> Link: https://doc.perl6.org/language/pod

[22:58] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c7e2667853

[22:58] <Geth> ¦ doc: 4a8baea3c8 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Language/pod.pod6

[22:58] <Geth> ¦ doc: Merge pull request #2396 from chsanch/add-links

[22:58] <Geth> ¦ doc: 

[22:58] <Geth> ¦ doc: Add links for needed modules in Rendering Pod section

[22:58] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4a8baea3c8

[22:58] *** vrurg left
[22:58] *** p6bannerbot sets mode: +v thundergnat

[22:59] <thundergnat> timotimo: Hey, thanks for the SDL2 bindings module. I've been playing around with it and it has been pretty cool.  

[23:00] <thundergnat> Check out  http://rosettacode.org/wiki/Polyspiral#SDL_full_animation if / when you get a chance.

[23:00] <timotimo> yeah, it's lots of fun

[23:01] <thundergnat> I'm rather pleased with how that turned out.

[23:01] <timotimo> is it fast?

[23:02] <thundergnat> Fast enough. I've actually got a (small) sleep in it to allow me to enjoy the changing patterns.

[23:05] <thundergnat> BTW, you were saying earlier on #moarvm that you were looking for a multi-threaded, lots of garbage collection program for testing. Would something like http://rosettacode.org/wiki/Julia_set#Perl_6 work?

[23:05] *** Zoffix joined
[23:05] *** p6bannerbot sets mode: +v Zoffix

[23:06] <Zoffix> timotimo: if I setup a VM for you in ~15m, would you be able to ssh and debug that bug?

[23:06] <timotimo> it surely won't be trivial, but i'd at least be able to have a closer look

[23:08] <Zoffix> timotimo: what's your public key

[23:08] <timotimo> ssh-rsa

[23:08] <timotimo> AAAAB3NzaC1yc2EAAAADAQABAAACAQDGAXUBv9QYkR9A56qa1NwboxnZNGY7Cz4waQBrhYc50691mX06TMGssRQZjmlr9Nu7NAOu9iO2/RzbWp8moJbfH16Gj+TXDBKWo4O4OAUhAcPiNk9/fs5VnHp3jslt1tIVmf8aCugorbVRzrP112Y7VtZdJkDi8LhE+7jOwz7O3Jjx3SJJKRBr2zLiRpozPi62dnEctwRL41/VG1yfLMfWEtuTgWyu6sWebov/kDuRXo8wr53fPm/KwyNmaGvT2sX2NdeJOhjcNJO24tm42OfDmYzaib8wRsDQWDTAMU+/vA8Ugflkv0xIZrkE+DavuS1l3rke45zgDUbGjtZZPFm2K9HmJMq6bt3D2aErZ4Vcv7RNsGWl/E6tTgnLJchEL

[23:08] <timotimo> F2MWGNbTDjLIsYguIrIoboc72NU0ykGH42B2waXCv1UUGqOUk3GORj5HXQ1z7MCHuDWBMuFwRdTJ5tFt9ryS6E9lKNqTpEbTPkA+i1Qgdt4wYPPugDR/G67L4tWK5FmE6h0sVIsuW1l1EMzj5opj8g+iwvjNyZICWOkmNNhOtOiFeUhHg9WtBvwKotNfNe8iV/VGKt7umW1k4MK25KlhtTcg20XPr/oiwGWR/C4bmccKbHZYbvaACcSLeGevnj+oxZycf2OEvgPC0NZW1c1QawIEwAni+wP9BqsYANy2sbfnw==

[23:08] <timotimo> ugh, irc garbled it

[23:08] <timotimo> want it in a different format?

[23:09] <Zoffix> I'll copy it form here https://github.com/timo.keys

[23:09] <Kaiepi> that'd probably work timotimo

[23:09] <timotimo> ah, that's what that is called

[23:09] <timotimo> i tried github.com/timo/keys.pub

[23:11] *** pecastro left
[23:25] *** Bucciarati left
[23:25] *** Bucciarati joined
[23:25] <Zoffix> +5 more mins.. Just installing zscript and then clone and build a rakudo and I'm ready

[23:26] *** p6bannerbot sets mode: +v Bucciarati

[23:30] *** MasterDuke joined
[23:30] *** p6bannerbot sets mode: +v MasterDuke

[23:30] *** MasterDuke left
[23:30] *** MasterDuke joined
[23:30] *** herbert.freenode.net sets mode: +v MasterDuke

[23:30] *** p6bannerbot sets mode: +v MasterDuke

[23:30] *** rindolf left
[23:32] <Zoffix> god this is taking ages :)

[23:34] <Zoffix> at least I can repro the bug

[23:38] <Zoffix> timotimo: ssh [email@hidden.address]   MoarVM sauce is in ~/R/MoarVM/   just type `z m` to rebuild it with zscript after making change. The bug can be reproed in ~/R/rakudo/   with `declutter; time ./perl6 t/spec/S32-io/io-cathandle.rakudo.moar` which takes 21s, while you can see that running 2018.09 with `declutter; time perl6 t/spec/S32-io/io-cathandle.rakudo.moar` takes just 3s

[23:38] <timotimo> OK, so "perl6" is 2018.09 and ./perl6 is the one with the bug

[23:38] <Zoffix> timotimo: note that script is the fudged file and if you make changes to the test file, don't forget to have the fudger rebuild it: `z t S32-io/io-cathandle.t`

[23:38] <Zoffix> timotimo: yeah

[23:39] <timotimo> is this VM on your puter, or is it like a cloud thing?

[23:39] <Zoffix> cloud

[23:39] <timotimo> is declutter necessary every time?

[23:39] <Zoffix> yeah

[23:39] <Zoffix> it nukes precomp files

[23:39] <timotimo> does it remove prec... oh

[23:40] <timotimo> i don't think i did that on my machine

[23:41] <timotimo> perhaps that's how i wasn't able to reproduce it locally

[23:41] <timotimo> which precomp file exactly is important, the one in t/spec/packages?

[23:41] <Zoffix> Not sure

[23:42] <timotimo> locally i had to set a -I to get it to work, but that was probably because i was running the golfed file from /tmp

[23:45] <timotimo> could you be so kind as to install gdb?

[23:46] <Zoffix> timotimo: done

[23:47] <Zoffix> timotimo: doesn't look like there's a sudo password. Just install anything you want. It's a throwaway VM

[23:47] <timotimo> ok, thanks!

[23:48] <timotimo> does zscript have something to get moar configured with --opmitize=0 --debug=3?

[23:48] <Zoffix> timotimo: run z md

[23:49] <timotimo> nice.

[23:49] <timotimo> Z Md.

[23:49] <Zoffix> timotimo: you can manually reconfigure it by setting prefix to ~/R/install 

[23:50] <timotimo> man, i should get zscript for my own machine

[23:50] <Zoffix> ^_^

[23:50] <timotimo> i'd just have to nuke my current ~/perl6

[23:50] <timotimo> well, or just slowly let it die

[23:50] <Zoffix> huggable: zscript

[23:50] <huggable> Zoffix, Helper script for Rakudo Perl 6 core development: https://github.com/zoffixznet/z

[23:54] *** jameslenz joined
[23:55] *** p6bannerbot sets mode: +v jameslenz

[23:57] <Xliff> Zoffix: What's the largest P6 project you are aware of?

[23:57] <Zoffix> Rakudo? :)

[23:57] <Xliff> :)

[23:57] <Xliff> Does around 10m for 336 p6 files sound too long?

[23:58] <Zoffix> No idea. I know it's fairly slow. Rakudo takes 80 seconds to compile; and that's with all the files concatenated together

[23:58] <timotimo> if i finish with the vm, shall i `sudo shutdown` it?

[23:59] <Zoffix> timotimo: yeah

[23:59] <timotimo> oh

[23:59] *** jameslenz left
