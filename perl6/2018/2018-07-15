[00:09] *** gabiruh left
[00:19] *** buggable left
[00:19] *** buggable joined
[00:19] *** ChanServ sets mode: +v buggable

[00:22] *** dj_goku left
[00:44] *** fake_space_whale joined
[00:51] *** gabiruh joined
[00:58] <benjikun> zostay: You online rn?

[01:17] *** stmuk joined
[01:19] *** stmuk_ left
[01:20] *** jameslenz joined
[01:24] *** jameslenz left
[01:33] *** markoong left
[01:45] *** subroot joined
[01:47] *** mcmillhj joined
[01:47] *** subr joined
[01:49] *** subroot left
[01:56] *** mcmillhj left
[02:04] <zostay> benjikun: I am now.

[02:12] *** fake_space_whale left
[02:13] <benjikun> zostay: I'm attempting to use DOM::Tiny to parse this XML file: view-source:https://www.sec.gov/Archives/edgar/data/2488/000000248818000068/amd-20180331.xml

[02:13] <benjikun> but `$dom.find('dei:DocumentFiscalYearFocus')` returns nothing

[02:14] *** Zoffix joined
[02:15] <benjikun> Is there a reason why you can't have colons in the tag name zostay?

[02:15] <benjikun> Or is something else happening

[02:16] <Zoffix> .tell jnthn just an FYI: I created the concept of spec APPENDICES that contain optional tests impls can optionally follow (e.g. overflow exceptions when raising an int to a specific huge power): more info in readme: https://github.com/perl6/roast/tree/master/APPENDICES#perl-6-specification-appendices

[02:16] <yoleaux> Zoffix: I'll pass your message to jnthn.

[02:16] <Zoffix> .tell TimToady just an FYI: I created the concept of spec APPENDICES that contain optional tests impls can optionally follow (e.g. overflow exceptions when raising an int to a specific huge power): more info in readme: https://github.com/perl6/roast/tree/master/APPENDICES#perl-6-specification-appendices

[02:16] <yoleaux> Zoffix: I'll pass your message to TimToady.

[02:18] <Zoffix> benjikun: at least in Mojo::DOM that DOM::Tiny emulates, you need to specify the namespace separately

[02:19] <Zoffix> benjikun: see responses on this post: https://www.reddit.com/r/perl/comments/8jeluc/a_little_help_with_mojodom_please/

[02:19] <Zoffix> Presumablly they'll apply to DOM::Tiny too

[02:19] *** Zoffix left
[02:21] *** Xliff left
[02:22] *** Xliff joined
[02:22] <zostay> yes, it has something to do with the namespace handling... i'm trying to come up with the correct incantation for you

[02:23] <zostay> i've been really busy today and haven't messed with this in a bit so the delay is mostly context switching

[02:23] <benjikun> zostay: Do you put the namespace in square brackets?

[02:24] <benjikun> Ah, it's alright, no need to rush

[02:30] <benjikun> oh, zostay, I just omitted using the namespace entirely and it works fine

[02:33] <zostay> Yes, that will work. I confess that I haven't work with namespaces in DOM::Tiny very much.

[02:33] <zostay> There are tests for them in the (massive) test suite I ported from Mojo::DOM58, but there might be room for improvement here.

[02:33] <zostay> Even if it's not a feature of Mojo::DOM58, it feels like your .find() ought to have worked because XML is allowed to work with colons without namespace support at the very least.

[02:34] <zostay> Whether its feasible to make that change or not, I don't really know at the mo'

[02:34] *** subr left
[02:35] *** subroot joined
[02:38] <zostay> about the best I can come up with matching your original intention is: 

[02:38] <zostay> $dom.find('DocumentFiscalPeriodFocus').grep({ .namespace eq 'http://xbrl.sec.gov/dei/2014-01-31' });

[02:40] *** p6noob left
[02:42] *** araraloren joined
[02:42] *** eliasr left
[02:48] <SmokeMachine> Hi, can someone help me please?

[02:48] <SmokeMachine> Im writing a module

[02:49] <SmokeMachine> and this is working: https://github.com/FCO/EventSource/blob/master/test/test.p6

[02:50] <SmokeMachine> but when I remove the Assinatura class from the `test.p6` file and add a file for it, it gives me this error: 

[02:50] <SmokeMachine> https://www.irccloud.com/pastebin/8XPSBN7T/

[02:51] <SmokeMachine> the error is here: https://github.com/FCO/EventSource/blob/master/EventSource.pm6#L6

[02:52] <SmokeMachine> the callsame can't be executed...

[02:52] <SmokeMachine> if I try to print the `$r` inside of the wrap, it gives the same error...

[02:57] <SmokeMachine> this is what isn't working: https://github.com/FCO/EventSource/blob/not-working/test/Assinatura.pm6

[03:02] <SmokeMachine> with `no precompilation` on EventSource, it works...

[03:03] <SmokeMachine> is it a bug?

[03:03] <SmokeMachine> or what am i doing wrong?

[03:07] *** jeromelanteri joined
[03:07] <TimToady> I don't suppose you had a clock regression at some point that might cause it to think something doesn't need recompiling?

[03:07] <yoleaux> 02:16Z <Zoffix> TimToady: just an FYI: I created the concept of spec APPENDICES that contain optional tests impls can optionally follow (e.g. overflow exceptions when raising an int to a specific huge power): more info in readme: https://github.com/perl6/roast/tree/master/APPENDICES#perl-6-specification-appendices

[03:07] <yoleaux> 02:20Z <Zoffix> TimToady: I mean raising Int, not int https://github.com/perl6/roast/blob/master/APPENDICES/A01-limits/overflow.t

[03:19] *** subroot left
[03:20] *** jameslenz joined
[03:21] *** Zoffix joined
[03:21] <Zoffix> SmokeMachine: it's a known bug: R#127112

[03:21] <Zoffix> There are half-a-dozen other issues with .wrap (various tickets on https://fail.rakudo.party/ )

[03:21] <Zoffix> RT#127112

[03:21] <synopsebot> RT#127112 [open]: https://rt.perl.org/Ticket/Display.html?id=127112 .wrap doesn't work for routines declared in roles

[03:23] <Zoffix> SmokeMachine: what's your perl6 version?

[03:23] *** stmuk_ joined
[03:24] <SmokeMachine> Zoffix: This is Rakudo version 2018.06-148-gf830bf344 built on MoarVM version 2018.06-141-gcae4731e2

[03:24] <Zoffix> m: say $*PERL.compiler.version

[03:24] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´v2018.06.183.gecbf.44.fb.5‚ê§¬ª

[03:24] *** jameslenz left
[03:25] <Zoffix> SmokeMachine: you could try with the last release, if you want. There are some varts on HEAD with invokish stuff, like R#2072

[03:25] <synopsebot> R#2072 [open]: https://github.com/rakudo/rakudo/issues/2072 [‚ö† blocker ‚ö†] Can't build on 32-bit Debian: Cannot invoke this object (REPR: P6opaque; QAST::Block)

[03:25] *** stmuk left
[03:26] *** Sgeo left
[03:26] <Zoffix> SmokeMachine: I see that unlike the case in RT#127112 you're not sticking a wrapped thing into the precomped version but rather just exporting a trait that wraps

[03:26] <synopsebot> RT#127112 [open]: https://rt.perl.org/Ticket/Display.html?id=127112 .wrap doesn't work for routines declared in roles

[03:26] <SmokeMachine> Zoffix: Ill try! thanks!

[03:28] *** Sgeo joined
[03:28] <Zoffix> SmokeMachine: what is `self` meant to be in that method you're wrapping with?

[03:29] <Zoffix> m: 42.^lookup('abs').wrap: my method (|) { dd self }; 42.abs

[03:29] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´42‚ê§¬ª

[03:29] <Zoffix> ah, k, nm

[03:29] <SmokeMachine> Zoffix: The obj who does the EventSource role...

[03:30] <SmokeMachine> s/who/that/

[03:32] <SmokeMachine> Zoffix: still doesn't work with the last version... :(

[03:33] <Zoffix> SmokeMachine: what if you move that trait out of the role?

[03:33] <Zoffix> In my test, if I dump the `self`, it gets the role's typeobject instead of the self of the method itself

[03:33] <SmokeMachine> Zoffix: that was the original version, but Ill try

[03:34] <Zoffix> And if I move it out, it's crashing with "Too few positionals passed; expected at least 1 arguments but got only 0" with just the .wrap call but I've no idea what its problem is

[03:34] <Zoffix> ah, I wrapped with a method, but applied it to a sub, nm

[03:34] <SmokeMachine> Zoffix: same problem...

[03:35] <SmokeMachine> ill leave it outside the role...

[03:37] <Zoffix> m: sub foo {}; &foo.wrap: -> | {}; foo 42

[03:37] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Calling foo(Int) will never work with declared signature ()‚ê§at <tmp>:1‚ê§------> 3sub foo {}; &foo.wrap: -> | {}; 7‚èè5foo 42‚ê§¬ª

[03:37] <Zoffix> m: use soft; sub foo {}; &foo.wrap: -> | {}; foo 42

[03:37] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Calling foo(Int) will never work with declared signature ()‚ê§at <tmp>:1‚ê§------> 3e soft; sub foo {}; &foo.wrap: -> | {}; 7‚èè5foo 42‚ê§¬ª

[03:37] <Zoffix> I expect this to not wrap stuff...

[03:37] <Zoffix> I mean to not complain about signature

[03:37] <Zoffix> m: use soft; sub foo {}; BEGIN &foo.wrap: -> | {}; foo 42

[03:37] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Calling foo(Int) will never work with declared signature ()‚ê§at <tmp>:1‚ê§------> 3; sub foo {}; BEGIN &foo.wrap: -> | {}; 7‚èè5foo 42‚ê§¬ª

[03:38] <Zoffix> Ah, I think it just prevents constant folding but the check for never work needs to also be placed under soft check

[03:40] *** spycrab0 left
[03:41] <Zoffix> R#2074

[03:41] <synopsebot> R#2074 [open]: https://github.com/rakudo/rakudo/issues/2074 [QAST][medium difficulty] erroneous "will never work" sig error on wrapped sub

[03:45] <Zoffix> SmokeMachine: FWIW, can't repro the problem in my small test case on HEAD-ish commit: https://gist.github.com/zoffixznet/c3e7d8cb7ddb68bd8dfd8c23e158d972

[03:46] <Zoffix> SmokeMachine: I think you haveta pass `self` to callsame when wrapping like that with a standalone method

[03:46] <Zoffix> Your version doesn't

[03:46] <Zoffix> Might be the problem that's causing that error

[03:46] * Zoffix &

[03:46] *** Zoffix left
[03:52] <SmokeMachine> .tell Zoffix same for me... but if I split `z.p6` into 2 different files it gives me the same error as my code... https://www.irccloud.com/pastebin/rJL2Gsbu/

[03:52] <yoleaux> SmokeMachine: I'll pass your message to Zoffix.

[03:57] <SmokeMachine> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: { bla } }; sub qqq($a) is bla{say $a} {}; qqq 42 # should it do that? in my mind it should or print 42 or break saying that $a doesn't exist...

[03:57] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´(Mu)‚ê§¬ª

[03:57] *** wamba joined
[04:06] <SmokeMachine> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: { bla } }; sub qqq($a) is bla{callsame; say $a} {}; qqq 42 # but why this works?!

[04:06] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´(Mu)‚ê§¬ª

[04:07] <SmokeMachine> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: { callsame; bla } }; sub qqq($a) is bla{say $a} {13}; qqq 42

[04:07] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´42‚ê§¬ª

[04:07] <SmokeMachine> this ^^

[04:19] <araraloren> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: bla; }; sub qqq($a) is bla{say $a} {}; qqq 42;

[04:19] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´(Mu)‚ê§5===SORRY!5=== Error while compiling <tmp>‚ê§Type check failed in binding to parameter '&wrapper'; expected Callable but got Bool (Bool::True)‚ê§at <tmp>:1‚ê§¬ª

[04:20] <araraloren> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: &bla; }; sub qqq($a) is bla(-> {say $a}) {}; qqq 42;

[04:20] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´Too many positionals passed; expected 0 arguments but got 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[04:20] <araraloren> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: &bla; }; sub qqq($a) is bla {say $a} {}; qqq 42;

[04:20] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Can't use unknown trait 'is bla' in a sub declaration.‚ê§at <tmp>:1‚ê§    expecting any of:‚ê§        rw raw hidden-from-backtrace hidden-from-USAGE pure default‚ê§        DEPRECATED inlinable nodal pre‚Ä¶¬ª

[04:20] <araraloren> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: &bla; }; sub qqq($a) is bla{say $a} {}; qqq 42;

[04:20] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´(Mu)‚ê§¬ª

[04:22] <SmokeMachine> is `$a` only being populated when the "real" `qqq`runs?

[04:26] <SmokeMachine> multi trait_mod:<is>(Routine $r, :&bla!) { my &q = $r.clone; $r.wrap: -> |c { q |c; bla }; }; sub qqq($a) is bla{say $a} {}; qqq 42;

[04:26] <evalable6> SmokeMachine, rakudo-moar ecbf44fb5: OUTPUT: ¬´42‚ê§¬ª

[04:26] <araraloren> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: { bla($^a) }; }; sub qqq($a) is bla{say $^a} {}; qqq 42;

[04:26] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´42‚ê§¬ª

[04:27] <araraloren> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: { bla($^a) }; }; sub qqq($a) is bla{say $a} {}; qqq 42;

[04:27] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´(Mu)‚ê§¬ª

[04:28] <SmokeMachine> multi trait_mod:<is>(Routine $r, :&bla!) { my &q = $r.clone; $r.wrap: -> |c { q "not what I was expecting..."; bla }; }; sub qqq($a) is bla{say $a} {}; qqq 42;

[04:28] <araraloren> not sure what's time of $a populated 

[04:28] <evalable6> SmokeMachine, rakudo-moar ecbf44fb5: OUTPUT: ¬´not what I was expecting...‚ê§¬ª

[04:29] <SmokeMachine> araraloren: I think it's populated when the original (or it's clone) runs...

[04:30] <SmokeMachine> multi trait_mod:<is>(Routine $r, :&bla!) { our &q = $r.clone; $r.wrap: -> |c { bla }; }; sub qqq($a) is bla{q "blablabla"; say $a} {}; qqq 42;

[04:30] <araraloren> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: { bla($^a) }; }; sub qqq($a where { say "check {$^a}"; True }) is bla{say $a} {}; qqq 42;

[04:30] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Placeholder variable $^a may not be used here because the surrounding block takes no signature‚ê§at <tmp>:1‚ê§------> 3; }; sub qqq($a where { say "check {$^a}7‚èè5"; True }) is bla{say $a} {}; qqq 4‚Ä¶¬ª

[04:30] <araraloren> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: { bla($^a) }; }; sub qqq($a where { say "check ", $^a; True }) is bla{say $a} {}; qqq 42;

[04:30] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´(Mu)‚ê§¬ª

[04:31] <SmokeMachine> had I break evalable6 ?

[04:31] <SmokeMachine> m: multi trait_mod:<is>(Routine $r, :&bla!) { our &q = $r.clone; $r.wrap: -> |c { bla }; }; sub qqq($a) is bla{q "blablabla"; say $a} {}; qqq 42;

[04:31] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    q used at line 1‚ê§‚ê§¬ª

[04:31] <araraloren> haha

[04:31] <SmokeMachine> m: my &q; multi trait_mod:<is>(Routine $r, :&bla!) { &q = $r.clone; $r.wrap: -> |c { bla }; }; sub qqq($a) is bla{q "blablabla"; say $a} {}; qqq 42;

[04:31] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´(Mu)‚ê§¬ª

[04:32] <araraloren> the &bla not running ?

[04:33] <SmokeMachine> araraloren: `&bla` is running... the `say` is inside `&bla`

[04:33] <araraloren> oh, it's q :)

[04:33] <SmokeMachine> m: my &q; multi trait_mod:<is>(Routine $r, :&bla!) { &q = $r.clone; $r.wrap: -> |c { bla }; }; sub qqq($a) is bla{q "blablabla"; say "inside bla: $a"} {}; qqq 42;

[04:33] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´Cannot call method 'Stringy' on a null object‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[04:33] <SmokeMachine> m: my &q; multi trait_mod:<is>(Routine $r, :&bla!) { &q = $r.clone; $r.wrap: -> |c { bla }; }; sub qqq($a) is bla{q "blablabla"; say "inside bla: {$a}"} {}; qqq 42;

[04:33] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´Cannot call method 'Stringy' on a null object‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[04:33] <SmokeMachine> m: my &q; multi trait_mod:<is>(Routine $r, :&bla!) { &q = $r.clone; $r.wrap: -> |c { bla }; }; sub qqq($a) is bla{q "blablabla"; say "inside bla: ", $a} {}; qqq 42;

[04:33] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´inside bla: (Mu)‚ê§¬ª

[04:34] <SmokeMachine> m: my &q; multi trait_mod:<is>(Routine $r, :&bla!) { &q = $r.clone; $r.wrap: -> |c { bla }; }; sub qqq($a) is bla{say "q: ", q "blablabla"; say "inside bla: ", $a} {$a}; qqq 42;

[04:34] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´q: blablabla‚ê§inside bla: (Mu)‚ê§¬ª

[04:35] <araraloren> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: { bla($^a) }; }; sub qqq($a where { say "in check ", $^a; True }) is bla{say $a} {}; qqq 42;

[04:35] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´(Mu)‚ê§¬ª

[04:35] <araraloren> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: { bla($^a) }; }; sub qqq($a where { say "in check ", $^a; True }) {}; qqq 42;

[04:35] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´in check 42‚ê§¬ª

[04:35] <araraloren> seems like the is bla break the where sentence

[04:36] <araraloren> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: { bla($^a) }; }; sub qqq($a where { say "in check ", $^a; True }) is bla{say $^a} {}; qqq 42;

[04:36] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´42‚ê§¬ª

[04:36] <SmokeMachine> m: my &q; multi trait_mod:<is>(Routine $r, :&bla!) { say "q: ", &r.clone.("blablabla"); $r.wrap: -> |c { bla }; }; sub qqq($a) is bla{say "inside bla: ", $a} {$a}; qqq 42;

[04:36] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot find method 'Nil' on object of type Str‚ê§at <tmp>:1‚ê§¬ª

[04:37] <SmokeMachine> araraloren: I think you are right

[04:38] <SmokeMachine> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: -> $x where {say "in qqq check ", $^a; True} { bla }; }; sub qqq($a where { say "in bla check ", $^a; True }) is bla{say $^a} {}; qqq 42;

[04:38] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´in qqq check 42‚ê§Too few positionals passed; expected 1 argument but got 0‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[04:38] <SmokeMachine> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: -> $x where {say "in wrap check ", $^a; True} { bla }; }; sub qqq($a where { say "in bla check ", $^a; True }) is bla{say $^a} {}; qqq 42;

[04:38] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´in wrap check 42‚ê§Too few positionals passed; expected 1 argument but got 0‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[04:38] <SmokeMachine> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: -> $x where {say "in wrap check ", $^a; True} { bla }; }; sub qqq($a where { say "in bla check ", $^a; True }) is bla{say $a} {}; qqq 42;

[04:38] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´in wrap check 42‚ê§(Mu)‚ê§¬ª

[04:39] *** araraloren_ joined
[04:39] <araraloren_> that's maybe releated to where $a is Mu :) maybe haha

[04:39] <SmokeMachine> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: -> $x where {say "in wrap check ", $_; True} { bla }; }; sub qqq($a where { say "in bla check ", $_; True }) is bla{say $a} {}; qqq 42;

[04:39] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´in wrap check 42‚ê§(Mu)‚ê§¬ª

[04:40] <SmokeMachine> araraloren_: but it's not using the $a...

[04:40] <araraloren_> yeah

[04:40] <SmokeMachine> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: -> $x where {say "in wrap check ", $_; True} { callsame; bla }; }; sub qqq($a where { say "in bla check ", $_; True }) is bla{say $a} {}; qqq 42;

[04:40] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´in wrap check 42‚ê§in bla check 42‚ê§42‚ê§¬ª

[04:40] <araraloren_> like they dropped the $a :)

[04:40] <SmokeMachine> this one is using $a...

[04:41] <SmokeMachine> wrong name...

[04:41] <SmokeMachine> m: multi trait_mod:<is>(Routine $r, :&bla!) { $r.wrap: -> $x where {say "in wrap check ", $_; True} { callsame; bla }; }; sub qqq($a where { say "in qqq check ", $_; True }) is bla{say $a} {}; qqq 42;

[04:41] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´in wrap check 42‚ê§in qqq check 42‚ê§42‚ê§¬ª

[04:41] *** araraloren left
[04:42] <SmokeMachine> so, it populates $a when qqq runs...

[04:42] <araraloren_> m: sub qqq($a where { say "in qqq check", $_; True }) { sub bla { say  }  }

[04:42] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unsupported use of bare "say"; in Perl 6 please use .say if you meant to call it as a method on $_, or use an explicit invocant or argument, or use &say to refer to the function as a noun‚ê§at <tmp>:1‚Ä¶¬ª

[04:43] <SmokeMachine> m: multi trait_mod:<is>(Routine $r, :&bla!) { my &q = $r.clone; $r.wrap: -> $x where {say "in wrap check ", $_; True} { q $x; bla }; }; sub qqq($a where { say "in qqq check ", $_; True }) is bla{say $a} {}; qqq 42;

[04:43] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´in wrap check 42‚ê§in qqq check 42‚ê§42‚ê§¬ª

[04:43] <SmokeMachine> m: sub qqq($a where { say "in qqq check", $_; True }) { sub bla { .say  }  }

[04:43] <camelia> rakudo-moar ecbf44fb5: ( no output )

[04:44] <SmokeMachine> m: sub qqq($a where { say "in qqq check", $_; True }) { sub bla { .say  }.(42)  }

[04:44] <camelia> rakudo-moar ecbf44fb5: ( no output )

[04:44] <SmokeMachine> m: sub qqq($a where { say "in qqq check", $_; True }) { sub bla { .say  }.($a)  } qqq 42

[04:44] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Strange text after block (missing semicolon or comma?)‚ê§at <tmp>:1‚ê§------> 3 $_; True }) { sub bla { .say  }.($a)  }7‚èè5 qqq 42‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§‚Ä¶¬ª

[04:45] <SmokeMachine> m: sub bla {}.()

[04:45] <camelia> rakudo-moar ecbf44fb5: ( no output )

[04:45] <SmokeMachine> m: sub bla {say 42}.()

[04:45] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´42‚ê§¬ª

[04:45] <araraloren_> m: sub qqq($a where { say "in qqqc", $_; True }) { sub bla { say "in bla", $a; }; once &?ROUTINE.wrap: -> $x where { say "in wrapc", $_; True; } { bla }; }; qqq 42;

[04:45] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´in qqqc42‚ê§No such method 'wrap' for invocant of type 'Code'. Did you mean any of these?‚ê§    Map‚ê§    grep‚ê§    map‚ê§‚ê§  in sub qqq at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[04:45] <SmokeMachine> m: sub bla {.say}.(42)

[04:45] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´Too many positionals passed; expected 0 arguments but got 1‚ê§  in sub bla at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[04:46] <SmokeMachine> m: sub bla {$^a.say}.(42)

[04:46] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´42‚ê§¬ª

[04:47] <SmokeMachine> m: sub bla { .say }; bla 42

[04:47] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Calling bla(Int) will never work with declared signature ()‚ê§at <tmp>:1‚ê§------> 3sub bla { .say }; 7‚èè5bla 42‚ê§¬ª

[04:47] <SmokeMachine> m: sub bla { .say }; ^10 .map: &bla

[04:47] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´Too many positionals passed; expected 0 arguments but got 1‚ê§  in sub bla at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[04:47] <SmokeMachine> Ill go to sleep...

[04:48] <SmokeMachine> araraloren_: have a good night

[04:48] <araraloren_> m: sub qqq($a where { say "in qqqc", $_; True }) { sub bla { say "in bla", $a; }; once { &?ROUTINE.wrap( -> $x where { say "in wrapc", $_; True; } { bla }); }; }; qqq 42; 

[04:48] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´in qqqc42‚ê§¬ª

[04:48] <araraloren_> SmokeMachine :) Here is day, good night

[04:48] <araraloren_> m: sub qqq($a where { say "in qqqc", $_; True }) { sub bla { say "in bla", $a; }; once { &?ROUTINE.wrap( -> $x where { say "in wrapc", $_; True; } { bla }); }; }; qqq 42; qqq 42;

[04:48] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´in qqqc42‚ê§in wrapc42‚ê§in bla42‚ê§¬ª

[04:49] <SmokeMachine> its 1:48 am here... :)

[04:49] <araraloren_> oh, you need go to sleep :)

[04:50] <araraloren_> Hmm, I think the trait `is` is something cause they not capture the $a, or it capture the wrong value 

[05:02] <SmokeMachine> m: say class :: {multi method a(1) {1}; multi method a(1) {2}}.new.*a: 1

[05:02] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´(1)‚ê§¬ª

[05:02] <SmokeMachine> Shouldn‚Äôt it be (1, 2)?

[05:04] <SmokeMachine> m: class A {multi method a(1) {1}}; class B is A {multi method a(1) {2}}.new.*a: 1

[05:04] <camelia> rakudo-moar ecbf44fb5: ( no output )

[05:05] <SmokeMachine> m: class A {multi method a(1) {1}}; say class B is A {multi method a(1) {2}}.new.*a: 1

[05:05] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´(2 1)‚ê§¬ª

[05:13] *** Zoffix joined
[05:14] <Zoffix> SmokeMachine: no, all these method call variations walk the MRO, not the individual candidates

[05:14] <yoleaux> 03:52Z <SmokeMachine> Zoffix: same for me... but if I split `z.p6` into 2 different files it gives me the same error as my code... https://www.irccloud.com/pastebin/rJL2Gsbu/

[05:20] *** jameslenz joined
[05:22] <Zoffix> m: 42.classify: *

[05:22] <camelia> rakudo-moar ecbf44fb5: OUTPUT: ¬´Doesn't make sense to classify with itself‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[05:23] <Zoffix> This is actually a proptest.

[05:23] <Zoffix> Probably another usecase for the spec APPENDICES stuff.

[05:24] <Zoffix> 'cause there was even a call for making `*` on classify do stuff R#1281

[05:24] <synopsebot> R#1281 [closed]: https://github.com/rakudo/rakudo/issues/1281 Argless default for .classify()

[05:25] <Zoffix> dunno how much sense it makes to spec "this doesn't do anything useful" IMO

[05:25] *** jameslenz left
[05:25] * Zoffix moves these to rakudo's suite

[05:25] *** Zoffix left
[06:09] *** lizmat left
[06:13] *** vike left
[06:17] *** domidumont joined
[06:23] *** domidumont left
[06:24] *** domidumont joined
[06:33] *** kybr joined
[06:35] *** vike joined
[06:38] *** konsolebox left
[06:41] *** konsolebox joined
[07:00] *** lizmat joined
[07:19] *** Raybih joined
[07:32] *** pecastro joined
[07:42] *** kerframil left
[07:51] *** parv joined
[08:01] *** jameslenz joined
[08:12] *** jameslenz left
[08:27] *** wamba left
[08:42] *** Khisanth left
[08:47] *** BooK joined
[08:48] *** robertle joined
[08:50] *** sarna joined
[08:50] <sarna> o/

[08:50] <sarna> seems like we can generate Dash docs from HTML https://github.com/technosophos/dashing/blob/master/README.md

[08:51] <sarna> so we can just take docs.perl6.org and shove them into this thing

[08:51] *** domidumont left
[08:56] *** Khisanth joined
[09:01] *** lizmat left
[09:04] *** ufobat_ joined
[09:09] <buggable> New CPAN upload: Image-Libexif-0.0.1.tar.gz by FRITH https://cpan.metacpan.org/authors/id/F/FR/FRITH/Perl6/Image-Libexif-0.0.1.tar.gz

[09:41] *** sena_kun joined
[09:47] *** Schepeers_ joined
[09:50] *** Schepeers left
[10:01] *** HaraldJoerg joined
[10:11] *** lizmat joined
[10:13] *** jameslenz joined
[10:18] *** jameslenz left
[10:19] *** Raybih left
[10:23] *** domidumont joined
[10:27] *** rindolf left
[10:29] *** MasterDuke left
[10:38] *** ufobat_ left
[11:01] <sarna> hey, I have a weird problem with native call

[11:01] <sarna> I'm calling Rust. what exactly? fibonacci, of course

[11:02] <sarna> the weird issue is, even though the return type is u64, in perl fib(93) prints a negative number

[11:02] <sarna> fib(94) is an overflow and panic from Rust

[11:04] *** wamba joined
[11:04] <lizmat> does fib(93) fit in *63* bits ?

[11:05] <lizmat> there is an outstanding issue with native unsigned 64 bit int, that if the 64th bit is set, it becomes negative

[11:06] <lizmat> m: my uint64 $a = 2**63-1; dd $a; ++$a; dd $a

[11:06] <camelia> rakudo-moar 0a32c6212: OUTPUT: ¬´9223372036854775807‚ê§-9223372036854775808‚ê§¬ª

[11:06] <lizmat> sarna: perhaps that is what is happening ?

[11:07] <xq> yeah

[11:07] <xq> fib 93 wont fit into 63 bit

[11:07] <sarna> lizmat: oh yeah, thank you

[11:10] <sarna> isn't this issue-worthy?

[11:14] *** rindolf joined
[11:14] <lizmat> there is an issue for it already afaik

[11:14] <lizmat> probably in old RT land  :-(

[11:16] <sarna> http://news.perlfoundation.org/2018/04/grant-proposal-perl-6-bugfixin.html

[11:22] <sarna> hope it's gonna work out

[11:25] <parv> what would be the solution for a number not fitting in 64 bits: use 65+ bits?

[11:26] *** markoong joined
[11:27] <parv> ... also would there not be a point after which perl6 just throws hands up and return overflow result or error?

[11:32] <lizmat> sarna: sadly it did not: http://blogs.perl.org/users/zoffix_znet/2018/07/cancellation-of-perl-6-constants-and-rationals-grant.html

[11:36] <sarna> lizmat: :(

[11:36] <sarna> parv: perl6's Int is arbitrarily sized, ie it grows as much as you want it to

[11:37] *** ExtraCrispy joined
[11:37] <sarna> if I had to return them from Rust.. probably BigInts as strings

[11:40] <parv> sarna thanks.

[11:49] *** parv left
[11:59] *** MasterDuke joined
[12:08] *** eliasr joined
[12:11] *** aborazmeh joined
[12:11] *** aborazmeh left
[12:11] *** aborazmeh joined
[12:13] *** jameslenz joined
[12:18] *** jameslenz left
[12:19] *** Some-body_ joined
[12:20] *** DarthGandalf left
[12:20] *** Some-body_ is now known as DarthGandalf

[12:38] *** vike left
[12:48] *** araraloren_ left
[13:01] *** leah2 left
[13:04] *** leah2 joined
[13:29] *** xtreak joined
[13:53] *** Sgeo_ joined
[13:54] *** ufobat_ joined
[13:57] *** xinming_ is now known as xinming

[13:57] *** Sgeo left
[13:57] *** User__ joined
[13:58] *** User__ left
[13:59] *** w17t joined
[14:04] *** aborazmeh left
[14:09] <buggable> New CPAN upload: Readline-0.1.4.tar.gz by JGOFF http://modules.perl6.org/dist/Readline:cpan:JGOFF

[14:10] *** sarna left
[14:13] *** jameslenz joined
[14:13] *** subroot joined
[14:15] *** rurban joined
[14:15] *** rurban left
[14:17] *** jameslenz left
[14:18] *** vike joined
[14:20] *** diakopter joined
[14:22] *** w17t left
[14:23] *** w17t joined
[14:25] *** zakharyas joined
[14:27] *** subroot left
[14:31] *** fake_space_whale joined
[14:39] <buggable> New CPAN upload: Tuple-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Tuple-0.0.1.tar.gz

[14:40] *** diakopter left
[14:49] *** xtreak left
[14:57] *** reportable6 left
[14:57] *** jeromelanteri left
[14:57] *** reportable6 joined
[14:57] *** ChanServ sets mode: +v reportable6

[15:05] *** zakharyas left
[15:05] *** zakharyas joined
[15:06] *** zakharyas left
[15:07] *** zakharyas joined
[15:24] <lizmat> https://www.quora.com/What-are-some-features-new-to-Perl-6-that-should-be-adopted-by-other-languages

[15:26] <moritz> grammars!

[15:33] *** gabiruh left
[15:39] <lizmat> weekly: https://www.quora.com/What-are-some-features-new-to-Perl-6-that-should-be-adopted-by-other-languages

[15:39] <notable6> lizmat, Noted!

[15:41] *** salasrod joined
[15:42] *** molaf joined
[15:50] <masak> +1 on grammars

[15:52] <Juerd> Junctions, grammars, gradual typing, named arguments, ^5, too many to mention...

[15:53] *** molaf left
[15:53] <Juerd> I really like the simple syntax improvements for common use cases, such as ^5 and %%

[15:58] <Summertime> I know its not just a perl6 thing, but the Cool plus type coercion based on operator (not on the params of the operator a la js) is nice

[16:04] *** zakharyas left
[16:05] *** zakharyas joined
[16:11] *** benjikun left
[16:12] *** molaf joined
[16:13] *** jameslenz joined
[16:18] *** jameslenz left
[16:19] *** gabiruh joined
[16:22] *** uzl joined
[16:28] *** uzl left
[16:30] *** AlexDaniel left
[16:33] *** AlexDaniel joined
[16:50] *** ChoHag joined
[17:07] *** zakharyas left
[17:17] *** tzo joined
[17:18] *** grumble1 joined
[17:18] *** grumble left
[17:18] *** zakharyas joined
[17:18] *** grumble1 is now known as grumbe

[17:18] *** grumbe is now known as grumble

[17:20] *** x[LGWs4x4i]uG2N0 left
[17:24] *** x[LGWs4x4i]uG2N0 joined
[17:42] *** ChoHag left
[17:48] *** fake_space_whale left
[17:49] <buggable> New CPAN upload: Tuple-0.0.2.tar.gz by ELIZABETH http://modules.perl6.org/dist/Tuple:cpan:ELIZABETH

[17:53] *** salasrod left
[17:54] *** salasrod joined
[18:11] <xinming> what is the right way to do something like    for qw(a b c d) -> $name { self!$name = $/{$name} }     ?

[18:11] <xinming> I got we can't do this in private method

[18:12] <timotimo> if the attributes are public and "is rw", you can use self."$name"() = $/{$name}

[18:12] <timotimo> otherwise i think you will have to go via self.^attributes

[18:14] *** jameslenz joined
[18:18] *** jameslenz left
[18:29] <xinming> timotimo: Thanks, ^attributes  thing is what I'm asking.

[18:37] *** cpage left
[18:38] *** andrzejku joined
[18:38] <andrzejku> hi

[18:38] *** cpage joined
[18:39] *** cpage left
[18:39] *** spycrab0 joined
[18:46] *** cpage joined
[19:01] *** cognominal left
[19:04] *** zakharyas left
[19:05] *** domidumont left
[19:09] *** tzo left
[19:25] *** x[LGWs4x4i]uG2N0 left
[19:27] *** cognominal joined
[19:27] *** cognominal left
[19:27] *** cognominal joined
[19:29] *** rindolf left
[19:30] *** x[LGWs4x4i]uG2N0 joined
[19:37] *** rindolf joined
[19:38] *** salasrod left
[19:39] <xinming> eval: class A { has ($.x is rw, $.y is rw); submethod BUILD () { self.y() = "abc" } }; A.new; 

[19:39] <evalable6> xinming, rakudo-moar 248ee79cf: OUTPUT: ¬´(exit code 1) Cannot modify an immutable Any ((Any))‚ê§  in submethod BUILD at /tmp/XP_rFhJjau line 1‚ê§  in block <unit> at /tmp/XP_rFhJjau line 1‚ê§‚ê§¬ª

[19:39] <xinming> Is this a bug? :-)

[19:39] <xinming> eval: class A { has ($.x is rw); submethod BUILD () { self.y() = "abc" } }; A.new; 

[19:39] <evalable6> xinming, rakudo-moar 248ee79cf: OUTPUT: ¬´(exit code 1) No such method 'y' for invocant of type 'A'. Did you mean 'x'?‚ê§  in submethod BUILD at /tmp/alVEeq5xtq line 1‚ê§  in block <unit> at /tmp/alVEeq5xtq line 1‚ê§‚ê§¬ª

[19:40] <xinming> This version worked fine.

[19:40] <xinming> eval: class A { has ($.x is rw); submethod BUILD () { self.x() = "abc" } }; A.new; 

[19:40] <evalable6> xinming, rakudo-moar 248ee79cf: OUTPUT: ¬´(exit code 1) Cannot modify an immutable Any ((Any))‚ê§  in submethod BUILD at /tmp/9t5he__9sY line 1‚ê§  in block <unit> at /tmp/9t5he__9sY line 1‚ê§‚ê§¬ª

[19:40] <xinming> strange... I made it work once.

[19:43] <MasterDuke> xinming: this is not my area of expertise, but you usually don't want/need BUILD. most use cases should use TWEAK instead

[19:49] *** ufobat_ left
[19:51] *** ufobat_ joined
[19:54] *** Zoffix joined
[19:54] <Zoffix> xinming: you need to use a `has` for each attribute. Don't put parens there

[19:54] <Zoffix> m: class A { has $.x is rw; has $.y is rw; submethod BUILD () { self.y = 42 } }; A.new.y.say

[19:54] <camelia> rakudo-moar 248ee79cf: OUTPUT: ¬´42‚ê§¬ª

[19:54] <Zoffix> (there = around `has` stuff)

[19:55] <Zoffix> m: class A { has ($.x is rw, $.y is rw); submethod BUILD () { dd self.y } }; A.new.y.say

[19:55] <camelia> rakudo-moar 248ee79cf: OUTPUT: ¬´Any‚ê§(Any)‚ê§¬ª

[19:55] <Zoffix> Don't know what it's parsing as, but it's not picking up the `is rw` trait when you write it that way

[19:55] <Zoffix> m: class A { has $.x is rw; has $.y is rw; submethod BUILD () { dd self.y } }; A.new.y.say

[19:55] <camelia> rakudo-moar 248ee79cf: OUTPUT: ¬´Any $!y = Any‚ê§(Any)‚ê§¬ª

[20:00] <Zoffix> Filed as R#2078

[20:00] <synopsebot> R#2078 [open]: https://github.com/rakudo/rakudo/issues/2078 [@LARRY][LTA] LTA behaviour when using parens around `has` stuff

[20:01] *** Zoffix left
[20:01] *** rindolf left
[20:03] <xinming> MasterDuke: Ok, THanks, I don't know there is a TWEAK submethod, my knowledge is abit outdated.

[20:04] <xinming> ZofBot: Thanks, got it. I thought it is the same as my

[20:10] <Geth> ¬¶ doc: 8fe5c51cc3 | (Zoffix Znet)++ | doc/Type/Proc.pod6

[20:10] <Geth> ¬¶ doc: [v6.d REVIEW] Fix up Proc.command

[20:10] <Geth> ¬¶ doc: 

[20:10] <Geth> ¬¶ doc: It returns an immutable List, not a mutable Array

[20:10] <Geth> ¬¶ doc: 

[20:10] <synopsebot> Link: https://doc.perl6.org/type/Proc

[20:10] <Geth> ¬¶ doc: Rakudo   fix up: https://github.com/rakudo/rakudo/commit/925c113433

[20:10] <Geth> ¬¶ doc: Propspec fix up: https://github.com/perl6/roast/commit/d66c1a3349

[20:10] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/8fe5c51cc3

[20:14] *** jameslenz joined
[20:15] *** stee3 joined
[20:18] *** jameslenz left
[20:18] *** stee left
[20:19] *** zakharyas joined
[20:20] *** andrzejku left
[20:23] *** andrzejku joined
[20:24] *** w17t left
[20:35] *** Sgeo__ joined
[20:38] *** Sgeo_ left
[20:39] <buggable> New CPAN upload: Tuple-0.0.3.tar.gz by ELIZABETH http://modules.perl6.org/dist/Tuple:cpan:ELIZABETH

[20:39] <Geth> ¬¶ doc: a1f0ae3e58 | (Elizabeth Mattijsen)++ | doc/Type/Any.pod6

[20:39] <Geth> ¬¶ doc: Be more specific about Any.Hash|hash

[20:39] <Geth> ¬¶ doc: 

[20:39] <Geth> ¬¶ doc: - make clear that .hash returns *something* Associative

[20:39] <Geth> ¬¶ doc: - point to .Hash / .Map if you want mutable / immutable

[20:39] <synopsebot> Link: https://doc.perl6.org/type/Any

[20:39] <Geth> ¬¶ doc: - fix obviously wrong example

[20:39] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/a1f0ae3e58

[20:42] *** andrzejku left
[20:45] *** zakharyas left
[20:50] <xinming> eval: class A { has $!x; has $!y is required; }; A.new(:x(3), :y(4))

[20:50] <evalable6> xinming, rakudo-moar fadc25631: OUTPUT: ¬´(exit code 1) The attribute '$!y' is required, but you did not provide a value for it.‚ê§  in submethod BUILDALL at /tmp/zWjc00mitC line 1‚ê§  in block <unit> at /tmp/zWjc00mitC line 1‚ê§‚ê§¬ª

[20:51] <xinming> hmm

[20:51] <xinming> eval: class A { has $!x; has $y is required; }; A.new(:x(3), :y(4))

[20:51] <evalable6> xinming, rakudo-moar fadc25631: OUTPUT: ¬´(exit code 1) The attribute '$!y' is required, but you did not provide a value for it.‚ê§  in submethod BUILDALL at /tmp/9vrj8lhSWt line 1‚ê§  in block <unit> at /tmp/9vrj8lhSWt line 1‚ê§‚ê§¬ª

[20:51] <xinming> the required attributes not working ATM?

[20:52] <lizmat> has $.y instead of has $y

[20:52] <xinming> eval: class A { has $!x; has $.y is required; }; A.new(:x(3), :y(4))

[20:52] <evalable6> xinming, rakudo-moar fadc25631: OUTPUT: ¬´¬ª

[20:52] <xinming> eval: class A { has $!x; has $!y is required; }; A.new(:x(3), :y(4))

[20:52] <evalable6> xinming, rakudo-moar fadc25631: OUTPUT: ¬´(exit code 1) The attribute '$!y' is required, but you did not provide a value for it.‚ê§  in submethod BUILDALL at /tmp/aBjj6Ug1y_ line 1‚ê§  in block <unit> at /tmp/aBjj6Ug1y_ line 1‚ê§‚ê§¬ª

[20:53] <lizmat> I guess it should warn/die about using "is required" on a private attribute

[20:53] <xinming> lizmat: Yea, that'll be good. :-)

[20:53] <xinming> I'll read doc before the end of the month.

[20:55] <xinming> each time I try perl6, I feel that how such a powerful language human can design and implement. :-)

[20:56] <lizmat> xinming: thank you for keeping trying and asking questions :-)

[21:20] <lizmat> xinming: https://github.com/rakudo/rakudo/commit/1ad34320e0

[21:39] <buggable> New CPAN upload: P6Repl-Helper-0.0.3.tar.gz by KJK http://modules.perl6.org/dist/P6Repl::Helper:cpan:KJK

[21:42] *** stmuk joined
[21:44] *** stmuk_ left
[21:51] *** kerframil joined
[21:55] *** wamba left
[22:06] *** robertle left
[22:08] *** subroot joined
[22:09] *** spycrab0 left
[22:09] <Geth> ¬¶ doc: tbrowder++ created pull request #2177: Phase2

[22:09] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/2177

[22:13] <tbrowder_> .ask AlexDaniel please see my doc PR #2177 which implements Phase 2 of my proposed Language doc handling

[22:13] <yoleaux> tbrowder_: I'll pass your message to AlexDaniel.

[22:14] *** HaraldJoerg left
[22:14] *** jameslenz joined
[22:16] *** pecastro left
[22:19] *** jameslenz left
[22:33] *** Grrrr left
[22:39] *** sena_kun left
[23:02] *** Grrrr joined
[23:09] *** subr joined
[23:12] *** subroot left
[23:35] *** devmikey joined
[23:44] <Geth> ¬¶ DBIish: kjpye++ created pull request #124: Remove unnecessary "is required" from several definitions.

[23:44] <Geth> ¬¶ DBIish: review: https://github.com/perl6/DBIish/pull/124

[23:52] *** devmikey left
[23:56] <Geth> ¬¶ DBIish: 399447b0ac | (Kevin Pye)++ | 6 files

[23:56] <Geth> ¬¶ DBIish: Remove unnecessary "is required" from several definitions.

[23:56] <Geth> ¬¶ DBIish: 

[23:56] <Geth> ¬¶ DBIish: This was causing problems with current rakudo HEAD which disallows

[23:56] <Geth> ¬¶ DBIish: such a condition on private attributes.

[23:56] <Geth> ¬¶ DBIish: review: https://github.com/perl6/DBIish/commit/399447b0ac

[23:56] <Geth> ¬¶ DBIish: 21d0190174 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | 6 files

[23:56] <Geth> ¬¶ DBIish: Merge pull request #124 from kjpye/issue123

[23:57] <Geth> ¬¶ DBIish: 

[23:57] <Geth> ¬¶ DBIish: Remove unnecessary "is required" from several definitions.

[23:57] <Geth> ¬¶ DBIish: review: https://github.com/perl6/DBIish/commit/21d0190174

[23:58] *** jeromelanteri joined
