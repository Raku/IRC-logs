[00:01] *** MasterDuke joined
[00:02] *** zacts joined
[00:04] *** pharv joined
[00:04] *** epony joined
[00:06] *** epony left
[00:06] *** MilkmanDan left
[00:07] *** epony joined
[00:08] *** mcmillhj joined
[00:09] *** MilkmanDan joined
[00:12] *** pharv left
[00:12] *** pharv joined
[00:13] *** mcmillhj left
[00:24] *** AlexDaniel left
[00:25] *** pharv left
[00:25] *** mcmillhj joined
[00:25] *** pharv joined
[00:28] *** comborico1611 joined
[00:30] *** mcmillhj left
[00:30] *** pharv left
[00:40] *** mcmillhj joined
[00:40] *** comborico1611 left
[00:45] *** mcmillhj left
[00:45] *** st_elmo joined
[00:47] *** st_elmo left
[00:53] *** zachk left
[01:11] *** mcmillhj joined
[01:16] *** mcmillhj left
[01:18] *** eliasr left
[01:22] *** mcmillhj joined
[01:26] *** epony left
[01:26] *** pharv joined
[01:27] *** mcmillhj left
[01:31] *** pharv left
[01:37] *** mcmillhj joined
[01:41] *** mcmillhj left
[01:42] *** athenot left
[01:45] *** ilbot3 left
[01:53] *** mcmillhj joined
[01:56] *** ilbot3 joined
[01:56] *** ChanServ sets mode: +v ilbot3

[01:58] *** mcmillhj left
[02:05] *** mcmillhj joined
[02:09] *** mcmillhj left
[02:19] *** mcmillhj joined
[02:24] *** mcmillhj left
[02:32] *** mcmillhj joined
[02:35] *** mniip left
[02:37] *** mniip joined
[02:37] *** mcmillhj left
[02:44] *** athenot joined
[02:51] *** mcmillhj joined
[02:56] *** mcmillhj left
[02:57] *** athenot left
[02:58] *** ufobat_ joined
[03:02] *** ufobat left
[03:10] *** mcmillhj joined
[03:15] *** mcmillhj left
[03:17] <Herby_> I'm writing a toy minigrep program (based off a Rust tutorial)

[03:17] <Herby_> https://gist.github.com/sylints/499dfc5a9d78f63931aec519a7e044e8

[03:17] <Herby_> are there any easy speed-up opportunities that I'm missing?

[03:17] *** Sgeo__ left
[03:19] *** Sgeo joined
[03:21] *** mcmillhj joined
[03:23] <MasterDuke> Herby_: is $query meant to be interpreted as just a plain text string? or as possibly a regex?

[03:23] <Herby_> regex. I'm terrible at naming things

[03:23] <Herby_> just a plain ole text search

[03:25] <MasterDuke> and btw. your printing loop could instead be `for @search-results -> @result { say "@result[]" }`, but that's a personal prefererence thing

[03:26] *** mcmillhj left
[03:26] <Herby_> thanks, i'll tweak that

[03:26] <Herby_> it takes about 9 seconds to go through a 6MB file, looking for 1 word

[03:27] <Herby_> 6MB text file

[03:27] <Herby_> slurping, and $file.IO.lines, both take roughly the same time

[03:28] <MasterDuke> and your searching loop could be `for $contents.IO.lines.kv -> $line-count, $line {`, and then you don't need to explicitly manage $line-count. however, it will start at 0, so you'd need to push `$line-count + 1`

[03:31] *** mcmillhj joined
[03:31] <Herby_> hmmm. getting: Cannot convert string to number: base-10 number must begin with valid digits or '.' in '

[03:32] <MasterDuke> Herby_: .match with a string doesn't treat it as a regex. if you don't need that functionality, .contains will be much faster

[03:33] <Herby_> MasterDuke: holy moly. that's a huge speedup

[03:34] <Herby_> changing it from .match to .contains dropped the time for 9 seconds to 0.4 seconds

[03:34] <Herby_> you're a wizard :)

[03:35] <MasterDuke> yeah, right now Perl 6 regexes are kind of slow

[03:36] *** mcmillhj left
[03:37] <Herby_> MasterDuke: thanks for taking a look and the feedback

[03:38] <MasterDuke> welcome

[03:39] <Herby_> very simple benchmark: using $contents.IO.lines.kv instead of manually handling the line count, doubles the execution time

[03:42] *** mcmillhj joined
[03:42] <MasterDuke> oh, you're also calling .lc twice for every line. you could create a new variable before the loop that gets $query.lc and then use that in the .contains

[03:42] <MasterDuke> (that's unrelated to using .kv)

[03:43] <MasterDuke> and for something like this, .fc is recommended

[03:43] <Herby_> ahhh. i've never heard of .fc

[03:44] <MasterDuke> https://docs.perl6.org/routine/fc it's smarter/better at handling unicode

[03:45] <MasterDuke> and the weird rules for comparing some unicode characters

[03:47] *** mcmillhj left
[03:48] <Herby_> m: my $a = 'TeST'.fc; my $b = 'Test'; say $b.contains($a);

[03:48] <camelia> rakudo-moar affeaa798: OUTPUT: «False␤»

[03:48] <Herby_> bah, disregard

[03:49] <Herby_> dumb question: if I'm using .fc, I'm guessing both strings to have .fc called on them before I compare?

[03:49] <MasterDuke> yeah

[03:49] <Herby_> m: my $a = 'TeST'.fc; my $b.fc = 'Test'; say $b.contains($a);

[03:49] <camelia> rakudo-moar affeaa798: OUTPUT: «No such method 'fc' for invocant of type 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[03:49] <Herby_> m: my $a = 'TeST'.fc; my $b = 'Test'.fc; say $b.contains($a);

[03:49] <camelia> rakudo-moar affeaa798: OUTPUT: «True␤»

[03:49] <Herby_> k

[03:50] <Herby_> well, I started this adventure with my code taking close to 10 seconds to run. With your help, I've gotten it down to 0.2 seconds :)

[03:52] <MasterDuke> cool

[03:53] *** mcmillhj joined
[03:53] <MasterDuke> btw, have you used the built in profiler at all?

[03:54] <Herby_> the one that outputs to a .sql file?

[03:54] <Herby_> from this page? https://docs.perl6.org/language/performance

[03:54] <Herby_> I have not

[03:55] <MasterDuke> it can do html and json also. html is the default, you probaby only need the sql option if the results are too big to open in a browser

[03:56] <MasterDuke> i recommend playing around with it, it can tell you all kinds of useful things

[03:56] <Herby_> wow. just ran it. this is pretty dang cool

[03:58] *** mcmillhj left
[03:58] <Herby_> and surprisingly painless.  Being honest, I avoided the profiler because a quick glance at the documentation made me think it was overwhelming

[03:58] <Herby_> my fault for not looking closer

[04:02] <Herby_> MasterDuke: thanks again for the help. I've learned quite a few new things tonight

[04:02] <Herby_> i'm off to bed

[04:02] <Herby_> o/

[04:02] <MasterDuke> same here. later...

[04:04] *** u-ou left
[04:07] *** u-ou joined
[04:11] *** Sgeo_ joined
[04:12] *** mcmillhj joined
[04:13] *** Sgeo left
[04:17] *** mcmillhj left
[04:22] *** dalek left
[04:27] *** u-ou left
[04:30] *** Util left
[04:46] *** mcmillhj joined
[04:49] *** nephron joined
[04:50] *** nephron left
[04:50] *** nephron joined
[04:50] <nephron> rakudo

[04:51] *** mcmillhj left
[04:51] *** nephron left
[04:58] *** jmerelo joined
[05:04] *** mcmillhj joined
[05:05] *** khw left
[05:09] *** Herby_ left
[05:09] *** mcmillhj left
[05:17] *** sauvin joined
[05:23] <jmerelo> p6: sub foo( Int(Uint) $num ) { say "$num is good";} foo;

[05:23] <camelia> rakudo-moar affeaa798: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in typename; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3sub foo( Int(7⏏5Uint) $num ) { say "$num is good";} foo;␤»

[05:23] <jmerelo> p6: sub foo( Int(UInt) $num ) { say "$num is good";} foo;

[05:23] <camelia> rakudo-moar affeaa798: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3 Int(UInt) $num ) { say "$num is good";}7⏏5 foo;␤    expecting any of:␤        infix␤        infix stopper␤  …»

[05:23] *** mcmillhj joined
[05:24] <jmerelo> p6: sub foo( Int(UInt) $num ) { say "$num is good";} foo(3);

[05:24] <camelia> rakudo-moar affeaa798: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3 Int(UInt) $num ) { say "$num is good";}7⏏5 foo(3);␤    expecting any of:␤        infix␤        infix stopper…»

[05:24] <jmerelo> p6: sub foo( Int(UInt) $num ) { say "$num is good";}; foo(3);

[05:24] <camelia> rakudo-moar affeaa798: OUTPUT: «3 is good␤»

[05:24] <jmerelo> p6: sub foo( Int(Uint) $num ) { say "$num is good";}; foo(3);

[05:24] <camelia> rakudo-moar affeaa798: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in typename; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3sub foo( Int(7⏏5Uint) $num ) { say "$num is good";}; foo␤»

[05:24] <jmerelo> p6: sub foo( Int(whatisthewhat) $num ) { say "$num is good";}; foo(3);

[05:24] <camelia> rakudo-moar affeaa798: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in typename; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3sub foo( Int(7⏏5whatisthewhat) $num ) { say "$num is goo␤»

[05:26] *** pharv joined
[05:28] *** mcmillhj left
[05:31] *** pharv left
[05:32] *** AlexDaniel joined
[05:34] *** Geth left
[05:40] *** Starry joined
[05:40] <Starry> Join

[05:40] *** domidumont joined
[05:40] *** Starry is now known as Guest8992

[05:43] *** mcmillhj joined
[05:45] *** domidumont left
[05:46] *** domidumont joined
[05:48] *** mcmillhj left
[06:00] *** mcmillhj joined
[06:03] <Guest8992> Hello

[06:05] *** mcmillhj left
[06:11] <lookatme> Guest78496, Hello :)

[06:12] <jmerelo> o/

[06:13] *** espadrine_ left
[06:15] *** mcmillhj joined
[06:19] *** mcmillhj left
[06:22] <El_Che> Guest8992: hi

[06:25] *** domidumont left
[06:27] *** domidumont joined
[06:27] *** robertle joined
[06:30] *** mcmillhj joined
[06:31] *** rindolf joined
[06:31] <jmerelo> I've posted this https://github.com/perl6/ecosystem/issues/390 in the Perl ecosystem. I think we should really change the Travis Perl 6 build environment. Thoughts?

[06:35] <El_Che> besides a  es allellujah?

[06:35] <El_Che> (crappy train connection)

[06:35] *** mcmillhj left
[06:37] *** abraxxa joined
[06:45] *** mcmillhj joined
[06:46] <jmerelo> El_Che: I think you have the packages tagged by rakudo star distro, right?

[06:48] <El_Che> I don't know what that means

[06:49] <jmerelo> you have packages for all versions, or many versions of Rakudo Star, right?

[06:49] *** mcmillhj left
[06:50] <jmerelo> .seen hoelzro

[06:50] <yoleaux> I saw hoelzro 15 Mar 2018 20:12Z in #perl6: <hoelzro> I got basic functionality working - I don't remember doing anything with facet search

[06:50] <jmerelo> .seen ugexe

[06:50] <yoleaux> I saw ugexe 23 Nov 2017 15:02Z in #perl6: <ugexe> I’m getting tired of it

[06:50] <jmerelo> .tell hoelzro about this https://github.com/perl6/ecosystem/issues/390

[06:50] <yoleaux> jmerelo: I'll pass your message to hoelzro.

[06:50] <El_Che> jmerelo: I put some remarks on the tickets

[06:50] <El_Che> my train is arriving

[06:51] <El_Che> bbl

[06:51] <El_Che> jmerelo: I have pkgs for all releases from end 2016 onwards of Rakudo

[06:51] <El_Che> no rakudo star

[06:51] <El_Che> from somewhere in 2017 I added zef to the mix

[06:51] <El_Che> packages can be recreated and adapted if needed

[06:52] <jmerelo> El_Che++

[06:56] *** mcmillhj joined
[07:01] *** mcmillhj left
[07:07] <stmuk_> there aren't any (well maybe appimage) rakudo star binary packages

[07:08] *** mcmillhj joined
[07:08] *** wamba joined
[07:12] *** darutoko joined
[07:12] <jmerelo> stmuk_: Yep there are http://rakudo.org/how-to-get-rakudo/

[07:13] <jmerelo> For Linux, you can use nxadm's packages

[07:13] *** mcmillhj left
[07:14] <jmerelo> BTW, I don't get why Mac and Windows get an "official" Rakudo star binary, while you only get extraofficial ones for Linux.

[07:14] <ufobat_> i've got a grammar / regex question: Assuming i have a grammar for something (a rather short thingy) and this string is distributed in a bunch of Strings. What would the best way to scan for those matches

[07:15] <ufobat_> i guess i am looking for something like the perl5 m//g thing

[07:15] <jmerelo> ufobat_: you can use regexes in grammars

[07:15] <ufobat_> but can i use grammars in regexes?

[07:16] <ufobat_> the string is "noise noise noise noise THINGY noise THINGY noise" and my grammar is for THINGY

[07:16] *** andrzejku joined
[07:16] <jmerelo> ufobat_: grammars are bunches of regexes. It's just a matter of putting them together

[07:17] <jmerelo> ufobat_: if you can express the whole internal structure of THINGY and capture it in a regex, I guess you can. But you're probably better of with a rule extracting THINGY and then a set of rules capturing stuff in it

[07:18] <jmerelo> At the end of the day, grammars are regexes on steroids. They allow you to structure the parsing of stuff

[07:19] *** mcmillhj joined
[07:19] <stmuk_> jmerelo: because noone has done it

[07:19] <ufobat_> thats the point why i rather have a grammar for thingy then just a regex. but i am missing the part of how to apply those grammar muliply times on a string with "noise" inbetween the things i am looking for

[07:20] <stmuk_> jmerelo: apart from appimage and docker

[07:21] <jmerelo> stmuk_: well, nxadm has :-)

[07:21] <stmuk_> no

[07:22] <jmerelo> ufobat_: you'll have to include a rule in the grammar to skip noise

[07:22] <stmuk_> he doesn't bundle any modules like star does (although he has a script to install zef)

[07:22] <moritz> ufobat_: you have to use .*? at the start to force scanning

[07:22] <jmerelo> stmuk_: that can easily be done... 

[07:22] <moritz> ufobat_: and then use .subparse instead of .parse to allow a match that doesn't reach the end of the string

[07:22] <stmuk_> jmerelo: no it can't

[07:23] <stmuk_> the root problem is probably DESTDIR support in star

[07:23] <ufobat_> moritz, the '.*?' in the grammar?

[07:23] *** mcmillhj left
[07:24] <moritz> ufobat_: yes, in a regex (not token or rule)

[07:24] <ufobat_> woudn't it make sense to have 2 grammars, one for THINGY and which makes sense to the outer world as well, and a 2nd for parsing my string?

[07:24] <stmuk_> an ideal packaging would probably be star as a metapackage of moar, nqp, rakudo and all the modules as packaging

[07:25] <moritz> ufobat_: no need to go that far; you can have a separate regex that does the scanning, and invoke it with YourGrammar.subparse($string, :rule<scanning_TOP>); or so

[07:25] <moritz> where regex scanning_TOP { .*? <TOP> }

[07:25] <moritz> or so

[07:26] <jmerelo> stmuk_: why is that a problem?

[07:26] <ufobat_> cute!

[07:26] <ufobat_> thanks!

[07:26] <moritz> yw

[07:26] <stmuk_> jmerelo: is what a problem?

[07:26] <jmerelo> stmuk_: anyway, I don't think that's impossible to do... From what I have seen in the perl6/doc stats, there's a good amount of perl6 users that work in Linux

[07:27] <jmerelo> stmuk_: the DESTDIR thing.

[07:27] <stmuk_> because it makes the job of the linux distro packagers harder

[07:28] *** pharv joined
[07:29] <stmuk_> debian are quite advanced with packaging rakudo itself but no modules AFAIK . OpenSUSE has modules packaged (by nine :-) )

[07:29] <jmerelo> stmuk_: not impossible. Point is, you can provide precompiled binaries in many ways possible. Travis does not really care. To the point in this case, I think we should provide binaries for Linux. You can use snap for Ubuntu, for example. 

[07:30] <stmuk_> wow

[07:30] <stmuk_> https://build.opensuse.org/project/show/devel:languages:perl6

[07:30] *** mcmillhj joined
[07:30] <stmuk_> jmerelo: are you talking about rakudo or star?

[07:30] *** scimon joined
[07:31] <stmuk_> cro is on OpenSUSE!

[07:32] *** pharv left
[07:35] *** mcmillhj left
[07:36] <jmerelo> stmuk_: star

[07:36] <jmerelo> BTW, this must be like the meta-est pull request ever https://github.com/perl6/doc/pull/987

[07:36] <jmerelo> jmerelo: plus there's a typo in the comments :-)

[07:41] *** mcmillhj joined
[07:43] *** pmurias joined
[07:43] <pmurias> why do we have a byte type?

[07:44] <notostraca> why do you have an int type?

[07:45] <notostraca> or any numeric type...

[07:45] <pmurias> notostraca: because they are useful?

[07:45] <notostraca> yes...

[07:45] <pmurias> byte is just an alias for uint8

[07:46] *** mcmillhj left
[07:46] <notostraca> C has uint8_t as an alias for (usually) char

[07:46] <notostraca> no one really is concerned about removing char

[07:47] <notostraca> names are important and sometimes byte is most clear

[07:47] <notostraca> byte is clearer than char in C

[07:56] *** mcmillhj joined
[07:58] *** wamba left
[08:00] *** sena_kun joined
[08:00] <El_Che> stmuk_: zef is nowadays part of the package

[08:01] <El_Che> stmuk_: zef "as root", the script is for zef@$HOME

[08:01] <El_Che> not an arrayref :)

[08:01] *** mcmillhj left
[08:03] <stmuk_> El_Che++

[08:03] <El_Che> jmerelo: the thing is that Star and rakudo-pkg's scope is different by designed. Star is a distribution of useful modules, rakudo-pkg wants to be the opposite, just rakudo + zef. I have containers and my regular rakudo usage in mind (I don't like modules installed by default if they are not core)

[08:04] <El_Che> jmerelo: for a lot of beginning users, the modules selection does make sense

[08:05] <stmuk_> I think there is a strong argument for shipping "p6doc" and the pod6 docs as well (although sadly its very tightly coupled with the web site generation code)

[08:05] <El_Che> rakudo not being relocable is kind of an hassle that results in use requiring root/Administrator on all OSes

[08:05] <stmuk_> for me the sweet spot would be zef+p6doc+rakudo

[08:05] <jmerelo> El_Che: point is, this is what we need for Travis

[08:06] <El_Che> I would expect the doc in star, though

[08:06] <El_Che> I was surprised I ended working more with the site

[08:06] <El_Che> instead of locally installed doc

[08:08] <stmuk_> El_Che: I'm thinking if the website is down, someone is on a plane or behind the firewall from hell

[08:09] <stmuk_> I left one job (German bank) after github was blocked

[08:13] *** mcmillhj joined
[08:14] *** dakkar joined
[08:18] *** mcmillhj left
[08:23] *** zakharyas joined
[08:26] *** brrt joined
[08:26] <jmerelo> Some quick stats on the perl6/doc site issues https://github.com/JJ/TPF-Grant/blob/master/data/issues.csv Mainly the stuff I'm interested in: opener, closer, status, time when it was opened and closed, and relationship to the repo. Maybe I should add tags, but for the time being, it's enough.

[08:29] *** mcmillhj joined
[08:33] *** dalek joined
[08:33] *** synopsebot left
[08:33] *** SourceBaby left
[08:33] *** sergot left
[08:33] *** ChanServ sets mode: +v dalek

[08:33] *** Geth joined
[08:33] *** p6lert joined
[08:33] *** ChanServ sets mode: +v Geth

[08:33] *** synopsebot joined
[08:33] *** ChanServ sets mode: +v synopsebot

[08:34] *** mcmillhj left
[08:34] *** SourceBaby joined
[08:34] *** ChanServ sets mode: +v SourceBaby

[08:34] <timotimo> don't forget to also handle (multiple) re-opens

[08:36] <jmerelo> timotimo: I don't think I have that info in the API. Let me check.

[08:36] <Geth> ¦ marketing: f12f5a5bfe | (Zoffix Znet)++ | 4 files

[08:36] <Geth> ¦ marketing: Rearrange colors in "Perfect Rainbow" camelia

[08:36] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/f12f5a5bfe

[08:37] <jmerelo> Anyway, here's the first result. Issue opener hall of fame: https://github.com/JJ/TPF-Grant/blob/master/illos/openers-perl6.png and issue closer hall of fame https://github.com/JJ/TPF-Grant/blob/master/illos/closers-pern6.png

[08:38] <timotimo> what is this pern6 thing i see, is this a new secret project

[08:38] <timotimo> can you angle the text at the bottom a few degrees to make it easier to read? or perhaps have the bars be rows instead of columns?

[08:39] <jmerelo> timotimo: sure. And change the name too :-)

[08:39] <timotimo> how come so many people have a bar that's 0px tall? :o

[08:40] <jmerelo> timotimo: I think it's because it's logarithmic. But I'll have to check

[08:40] *** cog_ joined
[08:41] <Geth> ¦ marketing: 9f4259aa4f | (Zoffix Znet)++ | 8 files

[08:41] <Geth> ¦ marketing: Rev2 of "Perl 6 Resources" card

[08:41] <Geth> ¦ marketing: 

[08:41] <Geth> ¦ marketing: Fixes https://github.com/perl6/marketing/issues/12

[08:41] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/9f4259aa4f

[08:48] *** mcmillhj joined
[08:48] <jmerelo> timotimo: filtered "openers" bars https://github.com/JJ/TPF-Grant/blob/master/illos/openers-perl6.png

[08:52] <pmurias> the whole idea of star seems like a temporary measure, installing modules should aim to be good enough that bundling stuff shouldn't offer a significant benefit

[08:53] *** mcmillhj left
[09:05] *** wamba joined
[09:06] *** mcmillhj joined
[09:06] <stmuk_> pmurias: I don't agree and hope someone else continues with star in 2019

[09:08] *** ismailarilik joined
[09:10] <stmuk_> its also the only way of building a release without git

[09:10] <stmuk_> ok only *easy* way :)

[09:11] *** mcmillhj left
[09:17] <Geth> ¦ marketing: zoffixznet self-assigned “Monthy” typo https://github.com/perl6/marketing/issues/13

[09:18] *** domidumont1 joined
[09:19] *** Bowlslaw left
[09:19] *** benjikun left
[09:19] *** mcmillhj joined
[09:20] <Geth> ¦ marketing: 065b3be182 | (Zoffix Znet)++ | 5 files

[09:20] <Geth> ¦ marketing: Fix typo

[09:20] <Geth> ¦ marketing: 

[09:20] <Geth> ¦ marketing: Fixes https://github.com/perl6/marketing/issues/13

[09:20] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/065b3be182

[09:20] *** benjikun joined
[09:21] *** domidumont left
[09:24] *** mcmillhj left
[09:26] *** rindolf left
[09:27] <jmerelo> After fixing the typo that fixes the explanation on fixing typo, we get today the Monthy Typon. :-) 

[09:28] *** markong joined
[09:29] *** pharv joined
[09:30] *** rindolf joined
[09:31] *** mcmillhj joined
[09:32] <lizmat> .oO( Hakcathon )

[09:33] *** pharv left
[09:37] *** mcmillhj left
[09:43] <Ulti> whoa big speedup on my tests

[09:43] *** zakharyas left
[09:43] <Ulti> down to about 0.8s

[09:43] <Ulti> what happened in the last couple of days

[09:43] <timotimo> what was it before?

[09:44] <timotimo> maybe the native array splice changes did that?

[09:44] <Ulti> 0.9 pushing 1s

[09:44] <Ulti> so probably about 15%

[09:44] <Ulti> given it was sometimes over 1s

[09:44] <Ulti> timotimo: possibly

[09:44] <Ulti> its more likely string and hash with my code

[09:45] <timotimo> oh, samcv++ improved performance of some string operations

[09:45] <samcv> Ulti: what does the test cover?

[09:45] <samcv> also yeah. 4x speedup collapsing strands

[09:48] *** mcmillhj joined
[09:50] *** zakharyas joined
[09:51] *** araujo left
[09:52] *** araujo joined
[09:52] *** araujo left
[09:52] *** araujo joined
[09:52] *** mcmillhj left
[09:54] <Ulti> samcv: https://github.com/MattOates/BioInfo/blob/master/t/sequences.t

[09:56] *** cog_ left
[09:56] <Ulti> this is the main function thats getting called a lot https://github.com/MattOates/BioInfo/blob/master/lib/BioInfo/Seq/Nucleic.pm6#L57

[09:56] <lizmat> Ulti: would you benefit from an int2 datatype, or can your sequences also contain "unknown" values ?

[09:56] <Ulti> hah funny you should say that, yeah 2bit and 3bit formats exist for DNA sequences

[09:56] <Ulti> 3bit is obviously quite annoying given alignment

[09:57] <Ulti> I was considering implementing a string encoding for 2bit

[09:57] <lizmat> yup, probably easier / faster to do 4 bit then actually, unless you have really ginormous sequences

[09:58] <Ulti> well the other advantage is something like the bitap algorithm gets a lot faster with a small bit sized alphabet

[09:58] <Ulti> lots of bioinformatics formats just zip ASCII which I find really annoying given you could just use a better binary representation for most of the compression and then run length encode or something

[09:59] <lizmat> I'm looking at implementing perl 5's vec()

[09:59] <Ulti> which means you could be small and directly operate on the data

[09:59] <Ulti> lizmat: wow I didnt even know about that function in P5 after this many years

[10:00] <lizmat> Ulti: a small dictionary means it automatically uses fewer bits for zipping, does it not?

[10:00] <lizmat> or does it always assume a dictionary of at least 256 >?

[10:00] *** mcmillhj joined
[10:00] <lizmat> Ulti: yeah, like pack() it's one of the hidden gems   :-)

[10:00] <Ulti> in these other formats? they always assume byte characters so it will probably zip down to something not entirely different to run length encoded 2bit format

[10:02] <Ulti> for protein molecules you have a larger alphabet though so if you want something that deals with all sequences you might as well deal in bytes

[10:04] <jmerelo> Ulti: that would be inmensely useful for evolutionary algorithms, if it's fast.

[10:05] *** mcmillhj left
[10:07] *** Guest8992 left
[10:08] *** w_richard_w left
[10:08] <lizmat> well, for it to be fast, native int1, int2 and int4 would have to be supported at VM level

[10:10] <jmerelo> Perl6/doc issue closer, in a logarithmic scale https://github.com/JJ/TPF-Grant/blob/master/illos/closers-perl6-doc.png

[10:12] *** brrt left
[10:13] *** mcmillhj joined
[10:14] <AlexDaniel> jmerelo: what's the first one?

[10:16] <jmerelo> AlexDaniel: I think it's simply those that have not been closed.

[10:16] <jmerelo> thus closer == ""

[10:16] <jmerelo> Let me filter that

[10:16] <AlexDaniel> oh

[10:16] <pmurias> lizmat: the VMs would need to support native arrays of int1, int2, int4 right? native int1 variables don't seem that useful

[10:17] <lizmat> bitmaps can be useful, no ?

[10:18] *** rindolf left
[10:18] <pmurias> lizmat: yes

[10:18] <lizmat> my int1 @a   # bitmap ?

[10:18] *** mcmillhj left
[10:19] <pmurias> lizmat: yes ;)

[10:19] <pmurias> lizmat: I meant that we can store a single bit in my int $bit rather then need special VM support 

[10:20] <lizmat> true, but then you'd need 8x as much memory

[10:20] <jmerelo> AlexDaniel: take a look now https://github.com/JJ/TPF-Grant/blob/master/illos/closers-perl6-doc.png

[10:20] <lizmat> I concede that's not as important now as it was once

[10:21] <lizmat> and from a power point of few, the extra cycles needed to access / change the one bit is probably more than just using bytes

[10:21] <lizmat> but still, it could be useful on memory challenged machines, like Raspberry Pi's and BeagleBoards and the like

[10:21] *** rindolf joined
[10:24] *** mcmillhj joined
[10:29] *** mcmillhj left
[10:30] *** cog_ joined
[10:30] <jmerelo> More data: this is the issue graph https://jj.github.io/TPF-Grant/html/opener-closer-graph/index.html It links "openers" and "closers". Zoom in to see (a little bit) more 

[10:30] <jmerelo> You can also hover over links to see who links to whom.

[10:30] <Ulti> lizmat: are they memory challenged?

[10:31] <lizmat> if you try to run Rakudo on them  :-)

[10:31] <Ulti> hah maybe

[10:31] <Ulti> 1GB is still a lot

[10:32] <lizmat> at the GPW I worked with a BeagleBoard with 512 MB (if I recall correctly)

[10:32] <lizmat> definitely not enough to build Rakudo

[10:32] <tyil> 1gb raspi can build it

[10:33] <Ulti> lizmat: sure but you rarely build on embedded type devices you transpile and throw on a binary

[10:33] <tyil> (though tbf, I think rasbian also adds some swap by default)

[10:33] <lizmat> which is the goal of some people   :-)

[10:34] <Ulti> at least I assume the Debian for ARM isn't actually all compiled on an ARM system

[10:34] *** benjikun left
[10:34] <Ulti> maybe they have a farm of phones or something

[10:36] *** benjikun joined
[10:37] *** mcmillhj joined
[10:41] *** mcmillhj left
[10:46] *** HaraldJoerg joined
[10:51] <pmurias> how do I fudge an entire block instead of just the tests inside it?

[10:52] *** mcmillhj joined
[10:55] <moritz> doesn't #?skip in front of the block work?

[10:56] *** mcmillhj left
[10:58] <pmurias> moritz:     #?rakudo.js skip 1 "uint64 not implemented"

[10:58] <pmurias>     {   

[10:58] <pmurias> moritz: seems to skip only the test

[10:58] <pmurias> assertion but not the test setup

[10:58] <moritz> pmurias: have you looked at the generated fudge file to verify that?

[10:59] *** brrt joined
[11:00] <pmurias> moritz: yes

[11:03] <pmurias> moritz: not nesting the block worked

[11:12] *** khw joined
[11:22] *** cog_ left
[11:23] *** lizmat left
[11:24] *** ismailarilik left
[11:26] *** kurahaupo left
[11:27] *** kurahaupo joined
[11:28] <perlbot> Anonymous pasted a new file at https://f.perlbot.pl/p/b9bshs - 

[11:29] *** zakharyas left
[11:29] *** kurahaupo_ joined
[11:30] *** pharv joined
[11:31] *** kurahaupo left
[11:32] *** lizmat joined
[11:33] *** le_zap joined
[11:35] *** pharv left
[11:37] *** le_zap left
[11:38] *** FROGGS joined
[11:49] *** epony joined
[11:52] *** epony left
[11:52] *** epony joined
[11:55] <AlexDaniel> huggable: try

[11:55] <huggable> AlexDaniel, https://tio.run/#perl6 https://glot.io/new/perl6 https://f.perlbot.pl/#perl6 https://ideone.com/

[11:55] <AlexDaniel> huggable: try :is: https://tio.run/#perl6 https://glot.io/new/perl6 https://f.perlbot.pl/#perl6 https://ideone.com/ https://mybinder.org/v2/gh/bduggan/p6-jupyter-kernel/master?filepath=eg%2Fhello-world.ipynb

[11:55] <huggable> AlexDaniel, Added try as https://tio.run/#perl6 https://glot.io/new/perl6 https://f.perlbot.pl/#perl6 https://ideone.com/ https://mybinder.org/v2/gh/bduggan/p6-jupyter-kernel/master?filepath=eg%2Fhello-world.ipynb

[12:01] *** kurahaupo joined
[12:03] *** kurahaupo_ left
[12:11] *** mcmillhj joined
[12:12] *** rindolf left
[12:15] *** kurahaupo left
[12:15] *** domidumont joined
[12:16] *** mcmillhj left
[12:18] *** domidumont1 left
[12:20] *** rindolf joined
[12:27] *** pharv joined
[12:31] *** zakharyas joined
[12:31] *** pharv left
[12:34] <buggable> New CPAN upload: List-Util-0.0.4.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/List-Util-0.0.4.tar.gz

[12:37] *** jmerelo left
[12:37] <[Coke]> Anyone getting failures on doc builds with "too many open files" after my tempfile change

[12:37] <[Coke]> ?

[12:41] <sena_kun> [Coke], I did not run docs building for a long time, but wanted to note: last time we rolled this change back because of https://github.com/perlpilot/p6-File-Temp/issues/18 and it does not look to me like it is resolved.

[12:42] *** kurahaupo joined
[12:42] *** Util joined
[12:42] <sena_kun> trying it out...

[12:44] <buggable> New CPAN upload: P5-X-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5-X-0.0.2.tar.gz

[12:48] *** mcmillhj joined
[12:54] <buggable> New CPAN upload: P5caller-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5caller-0.0.2.tar.gz

[12:54] <buggable> New CPAN upload: P5chomp-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5chomp-0.0.2.tar.gz

[12:57] <sena_kun> [Coke], reproduced it. `Failed to open file /tmp/Inm8dABs46: Too many open files`

[13:04] <buggable> New CPAN upload: P5chop-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5chop-0.0.2.tar.gz

[13:07] *** Herby_ joined
[13:07] <Herby_> o/

[13:07] *** brrt left
[13:14] <buggable> New CPAN upload: P5chr-0.0.3.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5chr-0.0.3.tar.gz

[13:14] <buggable> New CPAN upload: P5each-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5each-0.0.2.tar.gz

[13:14] <buggable> New CPAN upload: P5fc-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5fc-0.0.2.tar.gz

[13:20] <[Coke]> sena_kun: note that that ticket says that the OP reported it incorrectly.

[13:20] <[Coke]> "So it turns out I was disabling unlinking on the wrong tempfile."

[13:21] <[Coke]> sena_kun: will have a fix shortly.

[13:21] <sena_kun> [Coke], yes, I saw that. Along with "DESTROY submethods are called (if they exist) when an object is garbage-collected.".

[13:21] <sena_kun> [Coke]++

[13:23] <[Coke]> I'm letting the module deal with unlinking, but will close out the unused handle.

[13:24] <buggable> New CPAN upload: P5hex-0.0.3.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5hex-0.0.3.tar.gz

[13:24] <buggable> New CPAN upload: P5index-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5index-0.0.2.tar.gz

[13:24] <buggable> New CPAN upload: P5lc-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5lc-0.0.2.tar.gz

[13:24] <buggable> New CPAN upload: P5lcfirst-0.0.3.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5lcfirst-0.0.3.tar.gz

[13:32] *** test789 joined
[13:34] <buggable> New CPAN upload: P5length-0.0.3.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5length-0.0.3.tar.gz

[13:34] <buggable> New CPAN upload: P5oct-0.0.3.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5oct-0.0.3.tar.gz

[13:34] <buggable> New CPAN upload: P5ord-0.0.3.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5ord-0.0.3.tar.gz

[13:35] *** HaraldJoerg1 joined
[13:36] *** eliasr joined
[13:38] *** HaraldJoerg left
[13:40] *** kurahaupo_ joined
[13:41] *** kurahaupo left
[13:43] <[Coke]> .seen perlpilot

[13:43] <yoleaux> I saw perlpilot 6 Mar 2018 03:34Z in #perl6: <perlpilot> Zoffix: thanks.

[13:44] <[Coke]> .ask perlpilot - any thoughts on a File::Temp option that doesn't bother opening a file handle?

[13:44] <yoleaux> [Coke]: I'll pass your message to perlpilot.

[13:44] *** Zoffix joined
[13:45] <Zoffix> Following up on yesterday's discussion on rakudo.org: I got a reply from pmichaud. The work will be done today/tomorrow.

[13:45] *** mr_ron joined
[13:49] <AlexDaniel> yay

[13:50] <lizmat> Zoffix: *phew*  

[13:50] <lizmat> do you know if there are any plans to move the domain to TPF?

[13:50] *** kurahaupo joined
[13:51] <lizmat> 1. it is about to expire on 18 June, 2. it really should be TPF's and not petdance I would think

[13:51] <Zoffix> lizmat: would be nice.

[13:51] <Zoffix> But I've not discussed ownership with pmichaud and don't recall anything mentioned on the subject

[13:52] *** kurahaupo_ left
[13:52] <lizmat> well, we have still ~ 2 months before someone needs to pay to keep the registration

[13:52] *** kurahaupo_ joined
[13:53] <AlexDaniel> you can transfer it any time you want, the expiration date is irrelevant

[13:54] <lizmat> yes, I know

[13:54] <lizmat> but if nobody acts on the expiration, we'll lose the domain  :-((

[13:54] <buggable> New CPAN upload: P5pack-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5pack-0.0.2.tar.gz

[13:54] <buggable> New CPAN upload: P5quotemeta-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5quotemeta-0.0.2.tar.gz

[13:54] <buggable> New CPAN upload: P5ref-0.0.3.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5ref-0.0.3.tar.gz

[13:54] <buggable> New CPAN upload: P5reverse-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5reverse-0.0.2.tar.gz

[13:54] <FROGGS> what domain is this about?

[13:55] *** wamba left
[13:55] <lizmat> rakudo.org

[13:55] <FROGGS> ohh, that'd be sad

[13:55] *** kurahaupo left
[13:55] <lizmat> indeed

[13:56] <Zoffix> lizmat: why not just package all those modules in a single dist? Installing `P5built-ins` with zef takes nearly 3+ minutes because it callects all the deps. And quotemeta actually fails so after ~2m I had to restart with --force and wait another 2m44s and now it crashed entirely due to some bug when installing P5times ( Arg count 0 doesn't equal required operand count 1 for op 'getrusage' )

[13:57] <tyil> being able to pull in just what you need sounds like a nice benefit as well tho

[13:57] <lizmat> and that's the reason  :)

[13:57] <lizmat> will get to P5times in a mo

[13:57] <Zoffix> You can pull in what you need without spreading everything into a dozen separate dists.

[13:58] <Zoffix> You do that right now already, in P5-builtins

[13:58] <lizmat> also wrt to installing ?

[13:58] <lizmat> I must admit I'm a little bit in two minds about this

[13:59] <tyil> installing dists with deps is always slow in my experience

[13:59] <Zoffix> But does it matter if you have P5lc installed, even if you don't use it?

[13:59] <tyil> I dont see why its only an issue in this particular case

[14:00] <FROGGS> well, I'd prefere to do: use P5stuff <pack ref lc lcfirst ...>; instead of: use P5pack; use P5ref; use P5lc; P5lcfirst ...

[14:00] <FROGGS> or am I wrong?

[14:00] <tyil> I personally consider zef a tool to install what I want

[14:00] <tyil> not something to just install everything that exists

[14:00] <lizmat> FROGGS: but you can: use P5built-ins <pack ref lc lcfirst ... >

[14:01] <tyil> you could argue that having every single module installed is ok if you only use the ones you actually need

[14:01] <Zoffix> FROGGS: that's what you get with `use P5built-ins <pack ref lc>`. Except to do that, you need to install P5pack, P5ref, and P5lc all separately

[14:01] <FROGGS> tyil: sure, but you still install List::Util in P5 because you need one function it exports... or do you rip it in pieces?

[14:01] <lizmat> Zoffix: not seperately, all of the P5modules are dependencies of P5built-ins

[14:01] <FROGGS> Zoffix: I see

[14:01] <tyil> FROGGS: I don't do p5 in daily life

[14:02] <FROGGS> tyil: that translates to other languages... if a dist offers a bunch of helper functions you usually install that dist and import the function you want

[14:02] <ufobat_> why is pack/unpack not in p6 core?

[14:02] <tyil> I generally prefer having different functionalities split into different modules, tho

[14:02] <FROGGS> you usually dont install parts of such a dist

[14:02] <lizmat> ufobat_: a version of it *is*

[14:03] <lizmat> ufobat_: but marked as experimental

[14:03] <Geth> ¦ doc: 003da564a6 | (Will "Coke" Coleda)++ | htmlify.p6

[14:03] <Geth> ¦ doc: Close out unused filehandle so we don't leak.

[14:03] <Geth> ¦ doc: 

[14:03] <Geth> ¦ doc: Part of #1062

[14:03] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/003da564a6

[14:03] <ufobat_> what is its name?

[14:03] <tyil> FROGGS: and that's where you're wrong, I actively change compile-time flags to get rid of certain things in certain programs/libs already

[14:03] <Zoffix> ufobat_: pack/unpack

[14:03] <FROGGS> O.o

[14:03] <ufobat_> hmpf.. ;)

[14:03] <lizmat> tyil: that's not wrong, you just do it differently

[14:04] <FROGGS> tyil: can you give an example?

[14:04] <tyil> FROGGS: I have w3m without image support

[14:04] <tyil> I have PHP without most of the db modules

[14:04] <[Coke]> m: use experimental :pack; pack 'something'

[14:04] <tyil> because I only use psql

[14:04] <camelia> rakudo-moar affeaa798: OUTPUT: «Unrecognized directive 's'␤  in block <unit> at <tmp> line 1␤␤»

[14:04] <tyil> I have firefox compiled without their drm stuff

[14:04] <buggable> New CPAN upload: P5rindex-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5rindex-0.0.2.tar.gz

[14:04] <[Coke]> sena_kun: fixed handle issue

[14:04] <Zoffix> m: use experimental :pack; say (pack "A*", "meows").decode: "utf8"

[14:04] <camelia> rakudo-moar affeaa798: OUTPUT: «meows␤»

[14:04] <lizmat> Zoffix: I think the major problem atm is that installing takes relatively long

[14:04] <sena_kun> [Coke]++

[14:05] * lizmat hopes we can fix that at the PTS

[14:05] <FROGGS> tyil: okay, so this is about only installing feature packs of given software...

[14:05] <tyil> FROGGS: I consider a dist lib

[14:06] <tyil> and I dont want to have one massive lib if I only need one tiny feature

[14:06] <lizmat> Zoffix: meanwhile, I think I'm going to continue with my current approach

[14:06] <tyil> especially if it means the lib is now doing many things

[14:06] <tyil> instead of doing one thing very well

[14:06] <FROGGS> that is a bit like optional dependencies of (meta)-packages/dists that give you extra stuff

[14:06] <lizmat> Zoffix: because: 1. putting all of P5 functions into a single dist will make maint more of a problem

[14:06] <[Coke]> sena_kun: don't karma me, I'm the one that broke it! :)

[14:06] <lizmat> and 2. having a dist with many, many dependencies is a good testcase for zef

[14:06] <tyil> I prefer my libs small and specialized

[14:08] <FROGGS> I guess I agree to some degree

[14:08] <sena_kun> [Coke] updates are nice still. I have not commited to docs for a long time.

[14:08] <Zoffix> lizmat: not IMO. "Perl 5 built-ins" seems a fairly self-contained unit, parts of which are unlikely to contain some exotic dependencies, and which is likely to be used for more than 1 routine. Having it split into dozens of modules is like publishing HTTP::Client, and having HTTP::Client::get, HTTP::Client::post, HTTP::Client::put, HTTP::Client::delete, HTTP::Client::head, all in separate modules.

[14:08] <FROGGS> though it is nice to install Mojolicious in two seconds or so

[14:08] <tyil> with zef?

[14:08] <FROGGS> no, cpanminus, it is a single dist P5 thing

[14:09] <tyil> anything with deps takes longer than "two seconds or so" to install in zef

[14:09] <Zoffix> lizmat: and it's not just upload. Right now installation of P5built-ins crashes wiht "Arg count 0 doesn't equal required operand count 1 for op 'getrusage'"... So where's that error coming from? I'd need to clone a dozen repos to find the offending code. Where do I report the problem? To P5built-in or to some other repo?

[14:09] <Zoffix> etc, etc.

[14:09] <tyil> things without deps as well from my experience

[14:09] <lizmat> Zoffix: I would say that's an issue with zef, really

[14:09] <tyil> cpanm is relatively fast no matter whether it's got a big list of deps in my experience

[14:09] <lizmat> if a dependencies test fails, you need to know which dependency

[14:10] <tyil> I don't think you should compare the very fast cpanm with the currently rather slow zef and then blame it on the modules for installing too slow

[14:10] <Zoffix> lizmat: it says it fails in t/01-basic.t of P5built-ins. But P5built-ins loads a dozen modules.

[14:11] <mst> shipping a heavily-in-development system as a billion tiny modules is basically just a way of saying to users "don't bother even trying to use this"

[14:11] <mst> which is fine, if that's what you're going for

[14:11] <FROGGS> tyil: that's not what I meant... I am just saying that the approach of Mojolicious (do everything in one dist) is not quiet unixy but is handy in situations

[14:11] <mst> but should be documented as "horribly user-unfriendly, avoid unless you're the author"

[14:11] <lizmat> mst: that's *not* what I was going for

[14:11] <mst> lizmat: well, it's apparently what you've achieved

[14:12] <lizmat> "shipping a heavily-in-development system as a billion tiny module"

[14:12] <tyil> FROGGS: saving a couple seconds once is not worth the maintainance trouble and bloat that comes with it in my opinion

[14:12] <lizmat> mst: what do you mean by "shipping a heavily-in-development system as a billion tiny module"

[14:12] <lizmat> what is heavily-in development here ?

[14:13] <FROGGS> tyil: well, on the pro side you dont have dependency version problems ;o)

[14:13] <mst> well, your p5built-ins is sufficiently new I'd assume it's heavily in development and it's evidently far from stable

[14:13] <tyil> FROGGS: instead, the entire module fails completely if there's an issue

[14:13] <mst> and zoffix is right, shipping it as a single monolithic package to begin with would be a much better idea until things calm down

[14:13] <Zoffix> greppable6: getrusage

[14:14] <tyil> I don't think that's a "pro" compared to simply splitting up your modules

[14:14] <greppable6> Zoffix, 5 lines, 2 modules: https://gist.github.com/d2429c75b2fb8ec53410b9293f2d25c0

[14:14] <FROGGS> tyil: and there is a difference between firefox's drm and a list of functions a dist potentially exports... you import the stuff you are interested in, the rest is inactive... not so with most of the "feature packs" of other software models

[14:14] <mst> tyil: mojo is fairly tightly coupled and honestly there's so little of it that in practice it's not an issue

[14:14] <tyil> drm is a "potentially exported function" in firefox

[14:15] <mst> like, it looks like it shouldn't work, for all the reasons you just said

[14:15] <FROGGS> tyil: think of P6-dist installing like software downloading, and function importing as compiling certain featureset

[14:15] <tyil> I dont simple "not use it", I dont have it installed

[14:15] <mst> but meanwhile out in the real world it does

[14:15] <mst> and comparing mojo to DRM is silly

[14:15] <tyil> I'm not saying it doesnt work either, I'm saying I dont prefer it due to all the potential issues you can have with it

[14:16] <tyil> you can surely make it work, like most things in the software world

[14:16] <mst> I'm saying that *for mojolicious* those issues don't exist in practice

[14:16] <tyil> doesnt mean its the best approach

[14:16] <mst> so I don't understand what your claim is

[14:16] <tyil> maybe you should read from the top instead of barging in later and not understanding the topic we're talking about

[14:16] <FROGGS> mst: I brought mojo up btw

[14:17] <mst> tyil: please don't be rude just because I made a specific claim and you wanted to have a meta argument

[14:17] <tyil> I'm "rude" because you're not paying attention, and last time you talked to me you threatened to ban me because I didnt agree with you

[14:17] <mst> FROGGS: I saw. I did, in fact, read from before that point and didn't start talking until I had enough context

[14:17] *** cog_ joined
[14:18] <lizmat> fwiw, I don't agree with mst either

[14:18] <mst> I'm happy to be disagreed with

[14:18] <tyil> you didnt looked like that last time

[14:18] <lizmat> tyil: let's look forward rather than back

[14:18] <FROGGS> well, maybe we should calm down a little

[14:18] <Ulti> mst you should probably never look at npm and Javascript

[14:19] <mst> tyil: possibly I was still annoyed about your being about to upload something to CPAN with a 'perl6-nigger' directory.

[14:19] <FROGGS> I like the unix modell of doing just one thing and that thing well, but to me this is more about functions or executables, and not neccessarily about distributions

[14:19] <FROGGS> I still can decide which part of the dist I am going to use, and the rest is just dead code on my hard disk

[14:20] <tyil> yes, I clearly remember your shortsightedness and calling me a racist with no solid basis, and then applying power abuse to make your claim the only absolute truth

[14:20] <lizmat> *sigh*

[14:20] *** FROGGS_ joined
[14:21] <FROGGS_> and I dont really care if there is code I'm not going to use today for reasons

[14:21] *** cfa joined
[14:21] <mst> tyil: perhaps you could focus on actually responding to the technical claim I was making rather than insulting me

[14:21] <mst> I'm still being polite here several insults in

[14:22] <lizmat> Zoffix: re P5built-ins, and its dependencies: I'm open for alternatives that let people easily just use what they want and would allow for the same maint flexibility

[14:22] <tyil> I'm just politely telling you why I very much dislike you and consider your "claim" as not worth the hassle

[14:23] <tyil> you dont understand my claim that I think libs/modules sholud be small and specialized, literally one of the most common UNIX principles

[14:23] <mst> I do understand that claim, thabnk you.

[14:23] <tyil> then whats your issue?

[14:23] <mst> I believe in that, in general, but am not dogmatic about it, because sometimes tighter coupling is a good idea

[14:23] <FROGGS_> lizmat: isnt it more maintainer friendly to put the dozens function in a single dist and do one release?

[14:24] <tyil> yes, and it is not in the case lizmat/zoffix were talking about (imo)

[14:24] <mst> see also: perl5, which *itself* is a not-small-and-specialized thing

[14:24] <tyil> so again, whats your issue

[14:24] <mst> in this case, what I'm suggesting is that it would be easier to have a bundled set for ease of testing/debugging until things stabilise and then split them up

[14:24] <lizmat> FROGGS_: my point is really that I don't want to be the maintainer of P5built-ins indefinitely

[14:24] *** FROGGS left
[14:25] *** HaraldJoerg1 left
[14:25] <lizmat> I want to provide a source direct accessibility to P5 functionality in Perl 6

[14:25] <lizmat> *of

[14:25] <Zoffix> lizmat: do you care if P5times is broken on rakudos older than v2018.03.89.g.1321917.d.1 ?

[14:25] <FROGGS_> lizmat: well, could be a group of ppl... or do you want to be able to keep some P5functions and other ppl do others?

[14:25] *** HaraldJoerg joined
[14:25] <lizmat> well, that's an interesting question

[14:25] <lizmat> I don't think I care

[14:26] <lizmat> Zoffix: so let's assume the new format

[14:26] *** jmerelo joined
[14:26] <lizmat> FROGGS_: yes, that, so that we can farm out support if need be

[14:26] <Zoffix> ok

[14:26] <mst> tyil: the part I didn't understand was you comparing mojo to DRM, which I still can't see the link

[14:26] <lizmat> Zoffix: thanks

[14:26] <FROGGS_> I would like to know if there are more ppl here in this channel that would like to install only these few P5 functions they need rather installing all of them and only using the wanted ones

[14:26] <Ulti> lizmat with your implementation of ref what about all the positional and associative things that aren't Array or Hash?

[14:27] <tyil> mst: I didnt compare mojo to drm, but whatever

[14:27] <lizmat> Ulti: patches welcome  :-)

[14:27] <Ulti> what happens in P5 actually if you do ref on a tied hash

[14:27] <Ulti> lizmat: hah, its more a philisophical question rather than a critique

[14:28] <lizmat> in my experience, many modules on CPAN use ref() to find out what type of ref they got and act accordingly

[14:28] <Ulti> P5 doesn't have an immutable associative type afaik?

[14:28] <Ulti> so that might shock people

[14:28] <mst> Ulti: you get back 'HASH'

[14:28] <lizmat> there's locked hashes

[14:28] <Zoffix> lizmat: sent a PR fixing the crash: https://github.com/lizmat/P5times/pull/1

[14:28] <Zoffix> c: 3468f6908ba5aaecd3b6168ba4800cde0f7dcfbb~2,HEAD use nqp; constant is-new = $*PERL.compiler.version after v2018.03.89.g.1321917.d.1; is-new ?? nqp::getrusage(my int @usage) !! (my \r := nqp::getrusage)

[14:28] <committable6> Zoffix, ¦3468f6908ba5aaecd3b6168ba4800cde0f7dcfbb~2: «» ¦HEAD(affeaa7): «===SORRY!===␤Arg count 0 doesn't equal required operand count 1 for op 'getrusage'␤ «exit code = 1»»

[14:28] <Ulti> ahh ok so HASH does really kind of mean mappable thing with keys 

[14:28] <mst> if you want to change the behaviour of ref() you need to use http://p3rl.org/UNIVERSAL::ref and a class

[14:29] <Zoffix> lizmat: ^ tried to make it work on old compilers too, but looks like it checks the args to the op even if you don't invoke it

[14:29] <Ulti> scary stuff

[14:29] <Ulti> lizmat: locked hashes?

[14:29] <FROGGS_> Zoffix: aye, arg-count gets checked at compile time

[14:29] <lizmat> Zoffix: yeah, and it does so very late

[14:29] <lizmat> at MAST time, I believe

[14:29] <Zoffix> Ah

[14:29] <lizmat> it's a pain when making such a mistake while compiling the setting

[14:30] <FROGGS_> true

[14:30] <lizmat> or a typo in the nqp::op name

[14:32] <FROGGS_> we're still complaining on a high level though... remember few years ago, when a typo gave you enough time to not just make tee, but to buy it first?

[14:33] <FROGGS_> stage parse took up to 15 minutes on my box...

[14:33] <Zoffix> yikes

[14:33] <FROGGS_> nowadays I can often enough just recompile parts of moarvm in literally seconds and continue testing

[14:33] <tadzik> ooh, I member

[14:33] <FROGGS_> :D

[14:34] <tadzik> when alpha was doing some things that the master did not

[14:34] <Zoffix> Weird. P5quotemeta was failing originally, but now it doesn't

[14:36] <FROGGS_> back to topic, I just believe that a 1:1 relationship between functions and dists is crazy... if the functions were groupable on types it operates on or so one could have best of both worlds

[14:36] <pmurias> don't all the p5builtins serve a different purpose?

[14:36] <Zoffix> oh well

[14:36] *** Zoffix left
[14:37] *** cfa left
[14:40] <lizmat> in any case, these dists have been on CPAN since end of January

[14:41] <lizmat> today I found out that mi6 uses a different (automated) way of handling Changes files

[14:41] <lizmat> so I'm now converting those modules

[14:41] <lizmat> I don't see why it is all of a sudden a problem now, when it is clearly already a problem  for 2.5 months

[14:41] <FROGGS_> ahh, that's why you release so many of them :o)

[14:42] *** Sgeo__ joined
[14:42] <lizmat> so maybe we should have a separate channel for CPAN uploads?  aka "#news" on irc.perl.org ?

[14:42] <jmerelo> timotimo: you were mentioning re-opens of issues, and in fact that's not in the issue API, you have to go to a different, event API https://api.github.com/repos/perl6/doc/issues/1246/events. If I want to use that I'll have to kinda think deeper about storage and stuff.

[14:42] <lizmat> to reduce noise here

[14:42] <FROGGS_> lizmat: I can just say that I wasnt here for a while and I'm sorry if I helped to start a discussion about this

[14:43] <lizmat> no worries

[14:43] <FROGGS_> I dont think this is a problem at all actually, just a inconvenienve for one or the other

[14:43] <jmerelo> lizmat: if it helps having that controlled, fine. If it's going to be the same bunch of people now listening on several channels, well...

[14:43] <lizmat> it's just that I don't like mst just butting in saying something I made is clearly not stable

[14:43] <lizmat> when in fact the problem was caused by a change in MoarVM

[14:44] <lizmat> we would need something like BBC  :-)

[14:44] <FROGGS_> BBC?

[14:44] <lizmat> http://blogs.perl.org/users/atoomic/2018/04/blead-breaks-cpan-aka-bbc.html

[14:44] <FROGGS_> ahh

[14:44] <FROGGS_> true

[14:44] <buggable> New CPAN upload: P5sleep-0.0.4.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5sleep-0.0.4.tar.gz

[14:44] <buggable> New CPAN upload: P5times-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5times-0.0.2.tar.gz

[14:45] *** Sgeo_ left
[14:45] <lizmat> in any case, the number of Perl 5 functions that will be ported is finite

[14:45] <jmerelo> lizmat: it's probably infinite, but we're doing lazy evaluation.

[14:45] <lizmat> and as I said: I think it's also a good test case for zef in the meantime

[14:45] <FROGGS_> .oO( What if that BBC would also involve statistics from darkpans...)

[14:45] <mst> lizmat: my apologies, though my point that "maybe one big dist would be less hassle overall for a while and then you split it up later" I think still stands as a point for *consideration*

[14:46] <jmerelo> lizmat: (just joking)

[14:46] <lizmat> mst: it does

[14:46] <lizmat> meaning: I'm still in two minds about it

[14:47] <lizmat> and now /me is going to get some fresh air cycling&

[14:47] <FROGGS_> lizmat: group functions by topic... ...and be third minded :P

[14:47] <FROGGS_> bbi1h

[14:48] *** FROGGS|m joined
[14:48] *** FROGGS_ left
[14:52] *** esh joined
[14:53] *** adu joined
[14:59] *** Sgeo_ joined
[15:02] *** Sgeo__ left
[15:06] *** wamba joined
[15:17] *** brrt joined
[15:18] *** adu left
[15:18] *** domidumont left
[15:18] *** domidumont1 joined
[15:20] *** domidumont1 left
[15:21] *** athenot joined
[15:22] *** pharv joined
[15:34] <kybr> a while back i happened upon a sort of tutorial/example using perl6 to make a toy language it called "Perl 7". i can't find it now. does anyone know what i'm talking about?

[15:36] *** brrt left
[15:36] <jmerelo> kybr: a bit of more context?

[15:36] <[Coke]> it was zoffix's.

[15:36] <[Coke]> https://github.com/zoffixznet/perl7

[15:37] <kybr> omg. sorry. thank you!

[15:37] <jmerelo> Done in nqp. Cool :-)

[15:38] *** Zoffix joined
[15:39] <Zoffix> kybr: it's actually https://github.com/perl7/perl7/

[15:39] *** kurahaupo joined
[15:40] <Zoffix> kybr: also, it's not using Perl 6. It's using NQP compiler toolkit and there's no user/backcompat support for it.

[15:40] <[Coke]> whoops, sorry about the wrong link.

[15:40] <kybr> user/backcompat support?

[15:41] *** kurahaupo_ left
[15:41] *** cog_ left
[15:42] <Zoffix> kybr: you're not meant to use it. It's for use for rakudo core devs only and its ops can be changed at any time without notice. In fact, just a few lines above, there was a module breakage because someone used NQP in a module: https://irclog.perlgeek.de/perl6/2018-04-11#i_16034505

[15:42] <kybr> i'm not looking to use https://github.com/perl7/perl7/ for anything other than an example of using nqp to make teaching languages.

[15:43] <Zoffix> huggable: internals

[15:43] <huggable> Zoffix, nothing found

[15:43] <Zoffix> huggable: internals course

[15:43] <huggable> Zoffix, Rakudo/NQP Internals Course: https://github.com/edumentab/rakudo-and-nqp-internals-course#rakudo-and-nqp-internals-workshop

[15:43] *** kurahaupo_ joined
[15:43] <kybr> ooooooo. cool. thanks!'

[15:43] <Zoffix> kybr: the perl7/perl7 is based on ^ that course.

[15:43] *** pharv left
[15:43] <Zoffix> (in the course, a "rubyish" language is made)

[15:43] <kybr> got it. that's even better.

[15:44] *** pharv joined
[15:46] *** kurahaupo left
[15:46] *** kurahaupo joined
[15:48] *** kurahaupo_ left
[15:49] *** robertle left
[15:53] <Zoffix> lizmat: "a sudden a problem now". Not really a problem. I tried to install it to test if having a bunch of `use`es is super slow and reported the issues, then everyone piled in. -1 on having separate channel for CPAN reports; we already have too many channels :/

[15:54] *** kurahaupo_ joined
[15:55] *** kurahaupo left
[15:56] *** pharv left
[15:58] *** pharv joined
[15:58] *** kurahaupo joined
[16:01] *** kurahaupo_ left
[16:03] <Zoffix> The bot can be made to pastebin large numbers of simultaneous module uploads: https://github.com/zoffixznet/perl6-buggable/blob/master/lib/Buggable/Plugin/CPANUploads.pm6#L16

[16:03] <Zoffix> though until PERLANCAR starts using Perl 6, I don't think we need it :)

[16:04] *** zakharyas left
[16:04] <Zoffix> 1000 dists https://metacpan.org/author/PERLANCAR  and it might be metacpan's limit, 'cause "CPAN directory" link says there 1469 dists....

[16:16] *** kurahaupo_ joined
[16:16] <jmerelo> Sankey chart for perl6/doc issues. https://jj.github.io/TPF-Grant/html/sankey.html Data here https://github.com/JJ/TPF-Grant/blob/master/data/issue-open-close-graph.json just in case someone wants to play with that.

[16:17] <jmerelo> Columns on the right are "openers", progressively to the left "closers"

[16:17] *** scimon left
[16:18] *** FROGGS joined
[16:19] *** kurahaupo left
[16:20] <jkramer> Huh, interesting. Zooming in that chart seems to be reversed somehow. :)

[16:20] <jmerelo> jkramer: there should be some way of doing that correctly...

[16:20] *** kurahaupo_ left
[16:21] *** Zoffix left
[16:23] <jmerelo> jkramer: but I can't find it. I'm using networkD3, an R library, but you might want to work on the D3.js source directly

[16:24] *** pharv_ joined
[16:25] *** mr_ron left
[16:26] *** cognominal joined
[16:27] *** pharv left
[16:27] <jkramer> jmerelo: Nah, I just tried to zoom in and found it curious :)

[16:27] *** athenot left
[16:28] *** athenot joined
[16:29] *** adu joined
[16:32] *** mcmillhj left
[16:34] *** ChanServ sets mode: +o mst

[16:34] *** mst sets mode: +b $a:tyil

[16:34] *** tyil was kicked by mst (tyil))
[16:35] <[Coke]> ?

[16:35] <mst> on consideration, "words can't be inappropriate in and of themselves and it should be ok because I call my black friends the n- word and they don't mind" is not the sort of behaviour I'm interested in encouraging

[16:36] *** mcmillhj joined
[16:37] <mst> [Coke]: I just spent a couple hours trying to explain the concept of "appropriate behaviour" and got the usual "using the n- word isn't racist and it's uncalled for for somebody to call it racist" and "I'm not being rude, you just can't handle people telling the truth" responses

[16:38] <mst> followed by, after I specifically said "don't pick fights and don't use *ist language and we'll be fine" being told I was just trying to be god emperor and he was putting me on /ignore

[16:39] <[Coke]> ah, figured it was something not in channel. Yup, that sounds about right.

[16:40] *** adu left
[16:42] *** caasih joined
[16:44] *** pharv_ left
[16:44] *** pharv joined
[16:45] *** mcmillhj left
[16:48] *** mr_ron joined
[16:52] *** cognominal left
[17:02] *** robertle joined
[17:04] *** cognominal joined
[17:07] *** adu joined
[17:07] *** imcsk8 left
[17:13] *** natrys joined
[17:14] <buggable> New CPAN upload: ANTLR4-Grammar-0.6.1.tar.gz by JGOFF https://cpan.metacpan.org/authors/id/J/JG/JGOFF/Perl6/ANTLR4-Grammar-0.6.1.tar.gz

[17:19] *** dakkar left
[17:23] *** test789 left
[17:30] *** espadrine_ joined
[17:33] <jmerelo> Again, Sankey diagram with openers and closers in the perl6/doc repo https://jj.github.io/TPF-Grant/html/sankey.html 

[17:33] *** geekosaur joined
[17:34] <jmerelo> To the left are openers, to the right closers. Link from left to right indicates the one on the right closes issues created by the one on the left. 

[17:34] <jmerelo> Of course, one closes one's own issues, and also open issues, so there's that.

[17:35] *** cognominal left
[17:37] <mspo> mst: /r/iamverysmart or /r/im14andthisisdeep ;)

[17:41] *** mcmillhj joined
[17:42] *** imcsk8 joined
[17:46] *** adu left
[17:46] <[Coke]> I'm all for neato graphs, but is there a purpose to this one in particular?

[17:47] <jmerelo> [Coke]: I kinda wanted to see who was closing whom's issues. Also if there was some kind of hierarchy to the closing. 

[17:49] <jmerelo> [Coke]: visualization helps you see the dynamics of a set of data. An overview of what's going on. 

[17:49] <jmerelo> [Coke]: I want to have a general perspective on the site, the actors, and so on. You can't see that by checking the day-to-day grind of opening and closing of issues.

[17:50] <jmerelo> I'm not totally sure it will be useful for anyone else, but it's been useful for me. 

[17:51] *** Zoffix joined
[17:53] <Zoffix> It lacks the time component though. I'm listed as the one who closed most issues, but I don't even remember closing more than a couple. It's probably skewed by something I did in 2016, before I started hacking on rakudo.

[17:53] <Zoffix> And same for many other people.

[17:54] <Zoffix> e.g. gfldex is not even a perl6 org member anymore.

[17:54] <Zoffix> jonathanstowe I've not seen in ages.

[17:55] <jmerelo> Zoffix: I can filter by number of issues and per year, if needed. All scripts are written in perl6 (of course) https://github.com/JJ/TPF-Grant/tree/master/utils, with graphics represented using R

[17:55] *** cognominal joined
[17:55] <jmerelo> There are right now almost 2K issues/PRs. The same can be done per year, a moving windows of 500 issues, just tell me if it's useful for you, I can do it.

[17:56] <Zoffix> `

[17:56] <Zoffix> `my $names = ().SetHash;`...  You can write stuff like `my %names is SetHash`

[17:57] <jmerelo> Zoffix: OK. Of course, any PR will be appreciated.

[17:57] <jmerelo> But I can fix that right now.

[17:59] <jmerelo> ... although it's got some problems, and this is working, so if it's working, why fix it...

[18:00] <Zoffix> Yeah. `my $names = ().SetHash;` isn't wrong. I was just pointing out there's a way to get a `%foo` as a SetHash

[18:00] <jmerelo> (You can issue that and whatever you find and I will work on that)

[18:00] <jmerelo> Zoffix: OK, thanks :-)

[18:18] *** Zoffix left
[18:19] *** simpleseeker joined
[18:21] *** sauvin left
[18:28] *** domidumont joined
[18:40] *** simpleseeker left
[18:41] *** domidumont left
[18:53] *** grumblr joined
[18:53] *** grumble left
[18:54] *** grumblr is now known as grumble

[18:54] *** woolfy joined
[18:55] *** darutoko left
[18:56] *** HaraldJoerg1 joined
[18:56] *** HaraldJoerg left
[18:56] *** jmerelo left
[19:05] *** vcv joined
[19:18] *** brrt joined
[19:20] *** woolfy left
[19:23] <nine> moritz: neither nqp, nor rakudo use timestamps in build ids any longer

[19:24] <Geth> ¦ marketing: 6d8a17c563 | (Zoffix Znet)++ | LOGOs/Camelia/Alt-Variants/Camelia - Recoloured - Perfect Rainbow - Soft-Black.ai

[19:24] <Geth> ¦ marketing: Use CYMK format for blacks

[19:24] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/6d8a17c563

[19:24] <buggable> New CPAN upload: P5study-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5study-0.0.2.tar.gz

[19:24] <buggable> New CPAN upload: P5substr-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5substr-0.0.2.tar.gz

[19:24] <buggable> New CPAN upload: PDF-Class-0.1.5.tar.gz by WARRINGD https://cpan.metacpan.org/authors/id/W/WA/WARRINGD/Perl6/PDF-Class-0.1.5.tar.gz

[19:26] *** pharv left
[19:27] *** pharv joined
[19:28] <Geth> ¦ marketing: 47705968b9 | (Zoffix Znet)++ | 6 files

[19:28] <Geth> ¦ marketing: Fix mismatch of blacks between logo and panel

[19:28] <Geth> ¦ marketing: 

[19:28] <Geth> ¦ marketing: - Use updated logo file

[19:28] <Geth> ¦ marketing: - Use print-quality PDF for digital version

[19:28] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/47705968b9

[19:30] <moritz> nine++

[19:34] <robertle> nine: regarding the timestamps / build ids / dependencies: what's the story around dependencies on moar? I assume it is also safe to rebuild a moar from the same source, and previously built nqp, rakudo and precompiled fiels still work?

[19:35] *** pharv left
[19:36] <lizmat> robertle: it is my understanding that that works

[19:37] <lizmat> and is the reason dev work on MoarVM is faster than work on the settings  :-)

[19:37] *** pharv joined
[19:37] <nine> robertle: yes

[19:39] *** pharv left
[19:39] *** pharv joined
[19:40] <nine> Note that the reproducibility or resilience against rebuilds also extends to packaged Perl 6 modules.

[19:43] <lizmat> nine: the other day I noticed that making a change in src/Perl6/Metamodel/BOOTSTRAP.nqp needed a reconfigure to work

[19:43] <lizmat> this didn't use to be the case afaik

[19:45] <timotimo> bigger changes to moarvm are able to cause rakudo to crash because rakudo does compile "extops" that use moarvm datastructures

[19:46] <nine> lizmat: could be that a few more places in the Makefile need to run gen-version.pl now as that's what hashes the rakudo sources. I'm actually surprised that no issues like that have come up until now.

[19:46] <lizmat> not many people changes stuff in src/Perl6  :-)

[19:47] <nine> I guess a dependency on $(PERL6_MOAR) in $(PERL6_M_MOAR): and $(PERL6_B_MOAR): would do the trick

[19:48] <lizmat> that exceeds my rusty makefile foo  :-)

[19:48] *** aindilis` left
[19:49] *** aindilis joined
[19:51] <nine> or rather the other way round

[19:52] <lizmat> cause and effect, always difficult  :-)

[19:52] <nine> $(PERL6_MOAR) needs to depend on the other two

[19:52] *** FROGGS left
[19:53] <[Coke]> mst: how does one go about becoming an op for a limited set of discussions on freenode?

[19:54] <buggable> New CPAN upload: P5tie-0.0.8.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5tie-0.0.8.tar.gz

[19:54] <buggable> New CPAN upload: Pod-To-HTMLBody-0.0.1.tar.gz by JGOFF https://cpan.metacpan.org/authors/id/J/JG/JGOFF/Perl6/Pod-To-HTMLBody-0.0.1.tar.gz

[19:55] *** FROGGS|m left
[20:04] <buggable> New CPAN upload: P5uc-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5uc-0.0.2.tar.gz

[20:12] *** zachk joined
[20:14] *** zachk left
[20:14] *** zachk joined
[20:16] *** dct joined
[20:17] *** ChanServ sets mode: +o mst

[20:17] *** mst sets mode: -b $a:tyil

[20:17] *** ChanServ sets mode: +o mst

[20:18] *** mst sets mode: -o mst

[20:20] <mst> (he's now given his word to avoid the relevant behaviours rather than continuing to defend them; as such, I see no reason to leave him banned)

[20:21] *** kst` joined
[20:21] *** lumimies_ joined
[20:23] <Geth> ¦ doc: dariusantia++ created pull request #1918: Update exceptions.pod6

[20:23] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/1918

[20:23] *** Kaffe_ joined
[20:24] *** profan_ joined
[20:24] *** Gothmog__ joined
[20:24] *** pmichaud_ joined
[20:24] *** stux|RC-only joined
[20:26] <Geth> ¦ doc: 5a2dedce2d | dariusantia++ (committed using GitHub Web editor) | doc/Language/exceptions.pod6

[20:26] <Geth> ¦ doc: Update exceptions.pod6

[20:26] <Geth> ¦ doc: 

[20:26] <Geth> ¦ doc: Fixed small typo.

[20:26] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5a2dedce2d

[20:26] <synopsebot> Link: https://doc.perl6.org/language/exceptions

[20:26] <Geth> ¦ doc: a10f742e63 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/exceptions.pod6

[20:26] <Geth> ¦ doc: Merge pull request #1918 from dariusantia/patch-1

[20:26] <Geth> ¦ doc: 

[20:26] <Geth> ¦ doc: Update exceptions.pod6

[20:26] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a10f742e63

[20:27] *** tobs_ joined
[20:27] *** CoderPuppy joined
[20:28] *** CIAvash[m] left
[20:29] *** tobs_ is now known as tobs

[20:29] *** Gothmog__ is now known as Gothmog_

[20:29] *** lumimies_ is now known as lumimies

[20:29] *** imcsk8_ joined
[20:30] <samcv> anyone have macos?

[20:30] <samcv> can someone grep -re __MAC_OS_X_VERSION_MAX_ALLOWED /usr/include

[20:30] <samcv> and tell me if it's there, in what file and what it may be set to?

[20:30] <samcv> assuming that's where macos keeps its include files

[20:31] <geekosaur> that's going to lead to pain. it's a fancy macro that can be tweaked by xcode to do backward compatibility builds

[20:31] *** undersightable6 left
[20:32] *** CIAvash[m] joined
[20:32] *** imcsk8 left
[20:32] *** ilmari[m] joined
[20:32] *** wamba left
[20:32] *** evalable6 joined
[20:32] *** coverable6 joined
[20:32] *** Sgeo_ left
[20:33] *** bisectable6 joined
[20:33] *** bloatable6 joined
[20:33] *** Sgeo_ joined
[20:34] *** brrt left
[20:36] *** comborico1611 joined
[20:36] <samcv> geekosaur: do you have macos?

[20:36] <geekosaur> not currently

[20:36] <geekosaur> but the feature test macro stuff is a zoo that xcode depends on

[20:37] <samcv> or i need the header file that includes `getentropy` command

[20:39] <[Coke]> samcv: it's in /usr/include/AvailabilityInternal.h, and mentioned in a comment in /usr/include/Availability.h

[20:40] <samcv> is it set to anything?

[20:40] <samcv> i'm trying to find some define which sets the os x version

[20:40] <[Coke]> (not defined in the former, just referenced)

[20:41] <[Coke]> oh, sorry.

[20:41] <[Coke]> yes. there's an ifndef, define pattern

[20:42] <samcv> does it set it to something like 1010 or similar?

[20:42] <[Coke]> #define __MAC_OS_X_VERSION_MAX_ALLOWED __MAC_10_13_4

[20:42] <[Coke]> but that's in one case. mostly it's checking like: #if __MAC_OS_X_VERSION_MAX_ALLOWED < __MAC_10_12_1

[20:42] <samcv> do you have 10.13.4?

[20:43] <[Coke]> aye

[20:44] <buggable> New CPAN upload: P5ucfirst-0.0.3.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5ucfirst-0.0.3.tar.gz

[20:46] *** kurahaupo joined
[20:52] *** simpleseeker joined
[20:53] <mr_ron> m: https://gist.github.com/ronaldxs/c6fc4545962c015ae659e47bac8c84f3

[20:53] <camelia> rakudo-moar 72c7c5bf4: OUTPUT: «AFAICT none of the cases below should match if it needs to backtrack ...␤------␤(matched word only)␤'a'        backtrack on        '='     need backtrack - no     match: True␤(matched word only)␤'a=b'      backtrack on        '='     need ba…»

[20:54] <buggable> New CPAN upload: Scalar-Util-0.0.3.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Scalar-Util-0.0.3.tar.gz

[20:59] *** natrys left
[21:00] *** simpleseeker left
[21:00] <mr_ron> m: https://gist.github.com/ronaldxs/c6fc4545962c015ae659e47bac8c84f3

[21:00] <camelia> rakudo-moar 72c7c5bf4: OUTPUT: «These should not backtrack and match but do:␤(matched word only)␤True␤after first word␤True␤␤␤AFAICT none of the cases below should match if it needs to backtrack ...␤------␤(matched word only)␤'a'        backtrack on        '='   …»

[21:02] <mr_ron> I think the gist is a new backtracking bug similar to RT #130117 (resolved) and RT #132219 (but different).  Anyone willing to take a look and confirm?

[21:02] <synopsebot> RT#130117 [resolved]: https://rt.perl.org/Ticket/Display.html?id=130117 [TESTNEEDED] [REGEX] Sequential alternation `||` does not respect `:ratchet`

[21:02] <synopsebot> RT#132219 [new]: https://rt.perl.org/Ticket/Display.html?id=132219 [@LARRY] [REGEX] non-ratchet right-hand branch of `||` causes backtracking into the alternation

[21:02] *** mcmillhj left
[21:02] *** mcmillhj joined
[21:03] *** simpleseeker joined
[21:04] <buggable> New CPAN upload: Sub-Name-0.0.5.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Sub-Name-0.0.5.tar.gz

[21:04] <buggable> New CPAN upload: Sub-Util-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Sub-Util-0.0.2.tar.gz

[21:05] *** vcv left
[21:06] *** dct left
[21:08] *** mcmillhj left
[21:10] <ufobat_> why does this work in a Actions class for a Grammar "make (foo => 1, bar => 2).Hash;" but " make (foo => 1, bar => 2)"; says Odd number of elements found where hash initializer expected: Only saw: $(:foo(1), :bar(2))

[21:11] *** simpleseeker left
[21:12] <lizmat> ufobat_: do you want to make a hash?  

[21:12] <mr_ron> m: my token param-x { <[ab]>+ || [ \w+ '=' \w+ ] }; say so 'a=b' ~~ /<param-x>/; # backtracks - think it should not

[21:12] <camelia> rakudo-moar 72c7c5bf4: OUTPUT: «True␤»

[21:12] <mr_ron> m: my token param-y { [ \w+ '=' \w+  ] || <[ab]>+ }; say so 'a' ~~ /<param-y>/; # backtracks - think it should not

[21:12] <camelia> rakudo-moar 72c7c5bf4: OUTPUT: «True␤»

[21:13] <lizmat> ufobat_: looks to me you're trying to make a List with 2 Pairs ?

[21:13] *** webstrand left
[21:14] *** mcmillhj joined
[21:14] <buggable> New CPAN upload: Sys-Hostname-0.0.4.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Sys-Hostname-0.0.4.tar.gz

[21:14] <buggable> New CPAN upload: Tie-Array-0.0.3.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Tie-Array-0.0.3.tar.gz

[21:14] <buggable> New CPAN upload: Tie-Hash-0.0.3.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Tie-Hash-0.0.3.tar.gz

[21:14] <buggable> New CPAN upload: Tie-StdArray-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Tie-StdArray-0.0.2.tar.gz

[21:15] *** webstrand joined
[21:16] <ufobat_> lizmat, yes i am looking for a Hash

[21:16] <ufobat_> i assumed a list of pairs to be a hash, that's probably wrong

[21:16] *** simpleseeker joined
[21:17] *** dct joined
[21:18] <lizmat> Perl6 doesn't auto-flatten a list of Pairs into a Hash

[21:18] <ufobat_> i need to use { } instead of ( ), to much perl5 in my head

[21:18] <lizmat> m: dd (a => 42, b => 666 )

[21:18] <camelia> rakudo-moar 72c7c5bf4: OUTPUT: «(:a(42), :b(666))␤»

[21:18] <lizmat> m: dd %(a => 42, b => 666 )

[21:18] <camelia> rakudo-moar 72c7c5bf4: OUTPUT: «Hash % = {:a(42), :b(666)}␤»

[21:18] <lizmat> well, we're thinking of discouraging { }

[21:19] <lizmat> perhaps better future proof it with %( )

[21:19] <ufobat_> in favor of %( )

[21:19] <lizmat> prefix a %

[21:19] *** simpleseeker left
[21:19] <lizmat> yup

[21:19] <lizmat> but if you want to use { }, then please do  :-)

[21:19] <lizmat> if that makes you feel more at home  :-)

[21:19] *** mcmillhj left
[21:20] <ufobat_> it makes me feel like there is a HashRef ;-)

[21:20] *** sena_kun left
[21:20] <lizmat> well, at some level, that would be true  :-)

[21:20] <ufobat_> why are you thinking of discouranging { }, because i could be a code-block-thinky?

[21:21] <lizmat> well, the heuristics can be confusing

[21:21] <lizmat> m: dd { }

[21:21] <camelia> rakudo-moar 72c7c5bf4: OUTPUT: «Hash % = {}␤»

[21:21] <lizmat> m: dd {  }

[21:21] <camelia> rakudo-moar 72c7c5bf4: OUTPUT: «Hash % = {}␤»

[21:21] <lizmat> m: dd { "a" }

[21:21] <camelia> rakudo-moar 72c7c5bf4: OUTPUT: «-> ;; $_? is raw { #`(Block|68673784) ... }␤»

[21:21] <ufobat_> m: dd { "a", "b" }

[21:21] <camelia> rakudo-moar 72c7c5bf4: OUTPUT: «-> ;; $_? is raw { #`(Block|66718584) ... }␤»

[21:21] <ufobat_> m: dd { "a" => "b" }

[21:21] <camelia> rakudo-moar 72c7c5bf4: OUTPUT: «Hash % = {:a("b")}␤»

[21:21] <ufobat_> yeah

[21:22] <lizmat> m: dd { ("a", "b") }

[21:22] <camelia> rakudo-moar 72c7c5bf4: OUTPUT: «-> ;; $_? is raw { #`(Block|80582456) ... }␤»

[21:22] <ufobat_> i think i'd better get used to %()

[21:22] <lizmat> m: dd { ("a" => "b") }

[21:22] <camelia> rakudo-moar 72c7c5bf4: OUTPUT: «-> ;; $_? is raw { #`(Block|83568840) ... }␤»

[21:22] *** simpleseeker joined
[21:22] <lizmat> yeah, that seems to be the evolving consensus  :-)

[21:22] <ufobat_> so good night :-)

[21:22] <lizmat> good night!

[21:23] * lizmat also calls it a night

[21:24] <samcv> [Coke]: i seem to have succeded in getting that variable to work

[21:24] <buggable> New CPAN upload: Tie-StdHash-0.0.3.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Tie-StdHash-0.0.3.tar.gz

[21:25] *** simpleseeker left
[21:25] <[Coke]> samcv: woot?

[21:25] <[Coke]> let me know if you need me to test something, though it will take me some time to get back to it

[21:25] <samcv> __MAC_OS_X_VERSION_MAX_ALLOWED

[21:26] <samcv> i'm guessing it's something like  __MAC_OS_X_VERSION_MAX_ALLOWED = 101200 10.12.0 if you have that

[21:26] <samcv> from what i see online i think that's right

[21:26] *** mcmillhj joined
[21:28] <mr_ron> samcv: you worked on the RTs.  Do you have a moment to look at my claim on an alternation backtracking bug? (just above)

[21:28] <samcv> mr_ron: yeah

[21:29] *** simpleseeker joined
[21:31] *** simpleseeker left
[21:32] *** mcmillhj left
[21:32] *** simpleseeker joined
[21:35] *** rindolf left
[21:35] *** simpleseeker left
[21:38] *** rindolf joined
[21:42] *** dct left
[21:46] *** simpleseeker joined
[21:46] *** mcmillhj joined
[21:46] <hoelzro> yoleaux: .tell jmerelo I just had a look - what would you like me to do with regards to that?

[21:46] <yoleaux> 06:50Z <jmerelo> hoelzro: about this https://github.com/perl6/ecosystem/issues/390

[21:48] *** simpleseeker left
[21:48] <samcv> https://github.com/github/linguist/pull/3366#issuecomment-380467950 this finally got merged!

[21:49] <samcv> adding pod6 type to github

[21:51] *** mcmillhj left
[21:53] *** natrys joined
[22:00] *** mcmillhj joined
[22:01] *** HaraldJoerg1 left
[22:05] *** mcmillhj left
[22:07] *** pmurias left
[22:07] *** benjikun left
[22:11] *** dct joined
[22:15] *** mcmillhj joined
[22:16] *** ChoHag joined
[22:19] *** mcmillhj left
[22:21] *** dct left
[22:24] *** natrys left
[22:37] *** char_var[buffer] joined
[22:38] *** simpleseeker joined
[22:39] *** woolfy joined
[22:40] *** zachk left
[22:45] *** dct joined
[22:47] *** zachk joined
[22:47] *** zachk left
[22:47] *** zachk joined
[22:48] *** mcmillhj joined
[22:53] *** mcmillhj left
[23:02] *** simpleseeker left
[23:04] *** mcmillhj joined
[23:05] *** dct left
[23:05] *** eveo joined
[23:05] *** eveo is now known as Zoffix

[23:06] *** Zoffix left
[23:06] *** Zoffix joined
[23:09] *** mcmillhj left
[23:13] *** simpleseeker joined
[23:14] <Zoffix> I don't get why indexing this match object fails: https://gist.github.com/zoffixznet/be5d21a6d9f107c827c4ceae6325d85f   I had $el<statement>, it tells me "Cannot find method 'dump' on object of type NQPArray"; I changed it to $el[0], it tells me "Cannot find method 'dump' on object of type NQPMu".. How do I go down into it to get `longname` ?

[23:15] *** simpleseeker left
[23:17] *** simpleseeker joined
[23:18] *** rindolf left
[23:19] *** simpleseeker left
[23:20] <timotimo> yo Zoffix 

[23:20] <timotimo> you still dealing with that?

[23:21] <timotimo> i can give you an impromptu crash-course in moar-remote

[23:21] <Zoffix> What's that?

[23:22] <timotimo> it lets you explore deep into the depths of a given object

[23:22] <timotimo> interactively

[23:22] <timotimo> it's the new remote debugging thing

[23:22] *** simpleseeker joined
[23:23] <Zoffix> Where do I get it from?

[23:23] *** mcmillhj joined
[23:24] <mr_ron> my token param-x { <[ab]>+ || [ \w+ '=' \w+ ] }; say so 'a=b' ~~ /<param-x>/; # backtracks - think it should not

[23:24] <evalable6> mr_ron, rakudo-moar 72c7c5bf4: OUTPUT: «True␤»

[23:24] <mr_ron> one more try - anyone

[23:24] <timotimo> one part is zef install App::MoarVM::Debug

[23:25] <Zoffix> Does it backtrack tho? It matches "a", tries a/b, fails, goes to the second one

[23:25] <Zoffix> m: my token param-x { <[ab]>+ || [ \w+ '=' \w+ ] }; say so 'ab=b' ~~ /<param-x>/;

[23:25] <camelia> rakudo-moar 72c7c5bf4: OUTPUT: «True␤»

[23:25] <Zoffix> ok

[23:25] <timotimo> another is to have a perl6-debugserver-m (or similar) that looks just like perl6-m inside, but after moar it has --debug-port=9999 --debug-suspend (or any port you'd like)

[23:26] *** simpleseeker left
[23:26] <Zoffix> eco: App::MoarVM::Debug

[23:26] <buggable> Zoffix, App::MoarVM::Debug 'A command line interface application for debugging Perl 6 and NQP code using the MoarVM remote debugger.': https://github.com/edumentab/p6-app-moarvm-debug

[23:27] <mr_ron> Zoffix - don't understand, doesn't it fail trying to match '='

[23:27] <mr_ron> then backtrack to next alternative

[23:27] <timotimo> you'd then run your code with perl6-debugserver-m and call moar-remote 9999

[23:27] <Zoffix> mr_ron: no idea. 

[23:27] *** mcmillhj left
[23:28] <timotimo> if you'd like i can continue in #perl6-dev

[23:28] <Zoffix> Why? Isn't the debug thing a public thing for all users?

[23:28] <timotimo> sure

[23:28] <timotimo> just don't want to spam in between other conversations

[23:29] <Zoffix> It's IRC :)

[23:29] <mr_ron> my token param-x {^ [ <[ab]>+ || [ \w+ '=' \w+ ] ] $ }; say so 'a=b' ~~ /<param-x>/; # backtracks - think it should not

[23:29] <evalable6> mr_ron, rakudo-moar 72c7c5bf4: OUTPUT: «False␤»

[23:29] <timotimo> true that

[23:29] <Zoffix> And there are no docs in the module

[23:29] <timotimo> yup!

[23:29] <timotimo> haven't had the time to properly doc yet

[23:29] *** simpleseeker joined
[23:30] <mr_ron> Now I understand ... oops  

[23:31] *** simpleseeker left
[23:32] <Zoffix> hm

[23:32] <Zoffix> timotimo: looks like it's stuck at "===> Searching for: App::MoarVM::Debug"

[23:33] <timotimo> oh?

[23:33] <Zoffix> (it might be my mods to rakudo or Z-Script)

[23:34] <timotimo> you can clone them from git, too, they live under github.com/edument

[23:34] <Zoffix> I've no idea how to install a module to my dev rakudo without Z-Script :/

[23:35] <mr_ron> m: my token param-y { ^ [ [ \w+ {say 'matched first word'} '=' \w+  ] || <[ab]>+ ] $ }; say so 'a' ~~ /<param-y>/; # backtracks - think it should not

[23:35] <camelia> rakudo-moar 72c7c5bf4: OUTPUT: «matched first word␤True␤»

[23:35] <Zoffix> timotimo: so what's next after installing and doing the debug port and stuff?

[23:35] *** simpleseeker joined
[23:35] <timotimo> ah, yes

[23:35] <timotimo> it'll give you a very simple shell

[23:35] <mr_ron> Zoffix - could you please take a look at that last example?

[23:35] <timotimo> you'll want to set a breakpoint for your debug code

[23:36] <timotimo> it'll want to look like "breakpoint "path-to-your-module-as-moarvm-sees-it" 1234 1 1

[23:36] *** simpleseeker left
[23:36] <timotimo> the filename is what moar would also show inside backtraces, so if it's in the setting it'd have the extra syntax we have for that

[23:37] <Zoffix> mr_ron: I don't know much about this stuff, but I think "backtracking" needs to actually go back like at least one char. Above \w+ matches, tries `=`, fails, then goes to match `a` in the alternative and succeeds. At no point it goes backwards

[23:37] <Zoffix> m: my token param-y { ^ [ [ \w+ {say 'matched first word'} '=' \w+  ] || <[ab]>+ ] $ }; say so 'ab' ~~ /<param-y>/;

[23:37] <camelia> rakudo-moar 72c7c5bf4: OUTPUT: «matched first word␤True␤»

[23:37] <Zoffix> mr_ron: ^ tho then I'd expect this to fail.

[23:37] <timotimo> also, i recommend "assume thread 1" so you can ignore passing the thread argument to commands that want it

[23:37] <Zoffix> I don't know if that's a bug or I don't understand it.

[23:38] <Zoffix> timotimo: does it work in rakudo itself? This is from src/Perl6/World.nqp

[23:38] *** simpleseeker joined
[23:38] <timotimo> one second

[23:38] *** simpleseeker left
[23:38] <Zoffix> ===> Install [FAIL] for App::MoarVM::Debug:ver<0.0.1>: ===SORRY!===

[23:38] <Zoffix> Missing serialize REPR function for REPR VMException (BOOTException)

[23:38] <timotimo> :o

[23:38] <Zoffix> :)

[23:38] <timotimo> oh, maybe you'll need to also --/test

[23:39] <Zoffix> Yeah, that's my default. It failed during install stage, not test stage

[23:39] <timotimo> src/Perl6/World.nqp can be passed as the filename verbatim (in quotes)

[23:39] *** pharv left
[23:39] <timotimo> damn :(

[23:39] *** pharv joined
[23:39] <Zoffix> Oh, I guess I can clone it and do -Ilib without installing anything. 

[23:39] <timotimo> aye

[23:39] <timotimo> it has the one dependency

[23:39] <timotimo> well, and Data::MessagePack

[23:41] *** mcmillhj joined
[23:41] <mr_ron> Zoffix: Is your example to backtracking at the '='?  Who might I ask?

[23:41] <timotimo> the next step will be to "resume", which will actually start the script (we asked it to not start with the --debug-suspend option)

[23:41] <Zoffix> mr_ron: I guess moritz or TimToady 

[23:41] <mr_ron> thanks

[23:45] *** mcmillhj left
[23:46] <Zoffix> timotimo: "1234 1 1" what are those numbers?

[23:46] <Zoffix> for breakpoint

[23:46] <timotimo> pay no mind to the 1s after the curtain

[23:46] <timotimo> 1234 would be the line number you're interested in

[23:47] *** simpleseeker joined
[23:48] <Zoffix> Ok, it gave me this: https://gist.github.com/zoffixznet/43ab906358f2239ab3c3bdbaa2ed0da9

[23:48] <timotimo> beautiful, isn't it

[23:48] <Zoffix> Yeah, but how do I figure out how to navigate my thing to get to `<longname>`? :)

[23:48] <timotimo> now we'll want to grab us some lexicals

[23:49] <timotimo> first magic command is "ctxhandle 0", which gives you a handle on the frame with number 0

[23:49] <timotimo> (if you didn't "assume thread 1" you'll have to put a 1 before the 0, though)

[23:50] <timotimo> it'll just give you a number, that's the handle you can pass to the "lexicals" command

[23:50] <Zoffix> "Lexicals of handle 215: empty."

[23:50] <Zoffix> I ran some commands before tho... like `all lexicals` and stuff

[23:50] <timotimo> ah, yeah

[23:50] <timotimo> so with all lexicals, did you see lexicals for frame number 0?

[23:51] <timotimo> worst case the optimizer has gone and turned all the lexicals into locals and ruined all our fun

[23:51] <timotimo> but often you can find the parameters as lexicals further up the stack

[23:51] *** simpleseeker left
[23:52] <timotimo> anyway, once you have an object you're interested in, the command "metadata" will tell you whether it can has positionals, associatives, or attributes

[23:52] <Zoffix> :o

[23:52] <timotimo> and those three are also commands that can introspect into these objects

[23:52] <timotimo> giving you handles again

[23:52] <timotimo> the cycle repeats

[23:53] * Zoffix adds some more variables and recompiles

[23:53] <timotimo> you can also --optimize=off when compiling that particular file

[23:54] <timotimo> gotta go take care of the cat's toilet :)

[23:54] <Zoffix> I don't know how to do that :) I'm a spoiled Z-Script user. All I know how to do is type "z" to recompile :P

[23:55] <Zoffix> (I think it's in Makefile; that's what I edit when running wtf.perl6.party stuff)

[23:59] <timotimo> i tend to just copy-paste the command it outputs and re-run with changes, but makefile should work, too

