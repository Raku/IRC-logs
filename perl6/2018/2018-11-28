[00:12] *** atweiden-air left
[00:16] *** w_richard_w joined
[00:17] *** p6bannerbot sets mode: +v w_richard_w

[00:19] *** Sound left
[00:22] *** w_richard_w left
[00:42] *** pecastro left
[00:52] *** kerframil joined
[00:52] *** p6bannerbot sets mode: +v kerframil

[01:14] *** ryn1x joined
[01:14] *** Sgeo joined
[01:15] *** p6bannerbot sets mode: +v Sgeo

[01:15] *** p6bannerbot sets mode: +v ryn1x

[01:16] *** Sgeo_ left
[01:20] *** hankache joined
[01:21] *** p6bannerbot sets mode: +v hankache

[01:21] <hankache> hello #perl6

[01:22] <lookatme_q> hi hankache 

[01:22] <hankache> hi :)

[01:23] <hankache> .seen stmuk

[01:23] <yoleaux> I saw stmuk 8 Nov 2018 22:20Z in #perl6: <stmuk> I think the meaning of "refrains" has been overloaded!

[01:26] *** MasterDuke joined
[01:26] *** p6bannerbot sets mode: +v MasterDuke

[01:26] *** MasterDuke left
[01:26] *** MasterDuke joined
[01:26] *** herbert.freenode.net sets mode: +v MasterDuke

[01:26] *** p6bannerbot sets mode: +v MasterDuke

[01:44] *** beeman left
[01:56] *** silug joined
[01:57] *** p6bannerbot sets mode: +v silug

[02:07] *** MasterDuke left
[02:12] *** ryn1x left
[02:13] <AlexDaniel> heh, debian unstable is in a very interesting state right now

[02:14] <AlexDaniel> blender segfaults on start, python3-opencv can't even be installed because python is too new or something…

[02:20] *** ZzZombo joined
[02:20] *** p6bannerbot sets mode: +v ZzZombo

[02:44] *** leont left
[02:47] *** kurahaupo joined
[02:47] *** p6bannerbot sets mode: +v kurahaupo

[02:53] *** kurahaupo left
[02:58] *** ryn1x joined
[02:59] *** p6bannerbot sets mode: +v ryn1x

[03:02] *** silug left
[03:13] *** silug joined
[03:14] *** p6bannerbot sets mode: +v silug

[03:33] *** ryn1x left
[03:47] *** kurahaupo joined
[03:48] *** p6bannerbot sets mode: +v kurahaupo

[03:49] *** ryn1x joined
[03:50] *** p6bannerbot sets mode: +v ryn1x

[03:53] *** kurahaupo left
[04:03] <AlexDaniel> what's the right way to use react/whenever with $*IN ?

[04:10] <Woodi> AlexDaniel: unstable is allowed to have packages without deps. just get blender from testing

[04:11] <AlexDaniel> Woodi: not exactly, no… blender installs fine, but segfaults when you attempt to start it

[04:11] <AlexDaniel> IIRC downgrading blender to the version in testing didn't help, it's some dependency that is at fault

[04:11] <AlexDaniel> there's a “resolved” ticket in debian but I have no idea what it means because it's not resolved

[04:12] <Woodi> AlexDaniel: give them few days :)

[04:12] <AlexDaniel> now, if we're talking about python3-opencv, then I cannot get that from testing also

[04:13] <AlexDaniel> because I already have python 3.7 installed

[04:13] <AlexDaniel> so I'd need to downgrade that somehow

[04:13] <AlexDaniel> (it can't be installed because it depends on python ≤3.6)

[04:14] *** Xliff joined
[04:14] <AlexDaniel> I mean, I'm on *unstable*, I understand that, I'm not complaining :)

[04:14] *** p6bannerbot sets mode: +v Xliff

[04:14] <Xliff> \o

[04:14] <Woodi> AlexDaniel: you can 'pin' some version in /etc/apt/preferences

[04:15] <AlexDaniel> yes but I already have it installed…

[04:15] <Xliff> Is there a blog write-up on how to do optional tests?

[04:16] <Woodi> Xliff: 'optional test' ?

[04:17] *** sisar joined
[04:17] *** p6bannerbot sets mode: +v sisar

[04:17] <Xliff> Yes. I'd like to run extra tests if a specific module is present.

[04:21] <Xliff> m: say (try require ::('Color')) ~~ Failure

[04:21] <camelia> rakudo-moar 0d317f277: OUTPUT: «False␤»

[04:21] <Xliff> m: say (try require ::('XXX')) ~~ Failure

[04:21] <camelia> rakudo-moar 0d317f277: OUTPUT: «False␤»

[04:21] <Xliff> m: say (try require ::('XXX')) ~~ Failure)

[04:21] <camelia> rakudo-moar 0d317f277: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unexpected closing bracket␤at <tmp>:1␤------> 3say (try require ::('XXX')) ~~ Failure7⏏5)␤»

[04:22] <Xliff> m: require ::('Color')); say ::('Color') ~~ Failure

[04:22] <camelia> rakudo-moar 0d317f277: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unexpected closing bracket␤at <tmp>:1␤------> 3require ::('Color')7⏏5); say ::('Color') ~~ Failure␤»

[04:22] <Xliff> m: require ::('Color'); say ::('Color') ~~ Failure

[04:22] <camelia> rakudo-moar 0d317f277: OUTPUT: «Could not find Color at line 0 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-2/share/perl6␤    CompUnit::Repository::Absol…»

[04:22] <Xliff> m: tru require ::('Color'); say ::('Color') ~~ Failure

[04:22] <camelia> rakudo-moar 0d317f277: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    require used at line 1␤    tru used at line 1␤␤»

[04:22] <Xliff> m: try require ::('Color'); say ::('Color') ~~ Failure

[04:22] <camelia> rakudo-moar 0d317f277: OUTPUT: «True␤»

[04:23] <Woodi> .t files are in Perl... but you guessed probably...

[04:23] <yoleaux> Woodi: Sorry, I don't know what timezone that is. If in doubt, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for a list of options.

[04:23] <Woodi> m: (try require Foo) === Nil and say "Failed to load Foo!";

[04:23] <camelia> rakudo-moar 0d317f277: OUTPUT: «Failed to load Foo!␤»

[04:24] <Woodi> from : https://docs.perl6.org/language/modules

[04:29] <Geth> ¦ ecosystem: 33f7dc477f | Xliff++ | META.list

[04:29] <Geth> ¦ ecosystem: Add RandomColor to ecosystem

[04:29] <Geth> ¦ ecosystem: 

[04:29] <Geth> ¦ ecosystem: See http://github.com/Xliff/p6-RandomColor

[04:29] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/33f7dc477f

[04:34] *** kurahaupo joined
[04:35] *** p6bannerbot sets mode: +v kurahaupo

[04:36] <holyghost> I have a WAV file parser for 16,24 and 32 bits, tomorrow I'll start on the WAV player IIRC

[04:37] <holyghost> It needs to be debugged though

[04:38] *** hankache left
[04:43] <Xliff> holyghost++

[04:46] *** kerframil left
[04:48] *** kurahaupo left
[04:49] *** kurahaupo joined
[04:50] *** p6bannerbot sets mode: +v kurahaupo

[04:50] *** abraxxa joined
[04:51] *** p6bannerbot sets mode: +v abraxxa

[04:54] *** Cabanoss- joined
[04:54] *** abraxxa left
[04:54] *** p6bannerbot sets mode: +v Cabanoss-

[04:55] *** abraxxa joined
[04:55] *** abraxxa left
[04:56] *** abraxxa joined
[04:57] *** p6bannerbot sets mode: +v abraxxa

[04:59] *** kurahaupo left
[04:59] *** kurahaupo joined
[05:00] *** p6bannerbot sets mode: +v kurahaupo

[05:01] *** abraxxa left
[05:09] *** kurahaupo left
[05:09] *** kurahaupo joined
[05:10] *** p6bannerbot sets mode: +v kurahaupo

[05:12] *** ryn1x left
[05:16] *** abraxxa joined
[05:17] *** p6bannerbot sets mode: +v abraxxa

[05:20] *** kurahaupo left
[05:20] *** kurahaupo joined
[05:21] *** p6bannerbot sets mode: +v kurahaupo

[05:22] *** molaf joined
[05:22] *** p6bannerbot sets mode: +v molaf

[05:31] *** kurahaupo left
[05:36] *** kurahaupo joined
[05:37] *** p6bannerbot sets mode: +v kurahaupo

[05:41] *** kurahaupo left
[05:55] *** nightfrog joined
[05:56] *** p6bannerbot sets mode: +v nightfrog

[06:05] *** lizmat left
[06:08] *** avar left
[06:22] *** molaf left
[06:33] *** sauvin joined
[06:33] *** p6bannerbot sets mode: +v sauvin

[06:36] <Geth> ¦ perl6-lwp-simple: f5699dcba0 | (JJ Merelo)++ | README.md

[06:36] <Geth> ¦ perl6-lwp-simple: Extends README.md

[06:36] <Geth> ¦ perl6-lwp-simple: 

[06:36] <Geth> ¦ perl6-lwp-simple: Also closes #12 since it does not seem to be reproducible now.

[06:36] <Geth> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/f5699dcba0

[06:36] <Geth> ¦ perl6-lwp-simple: 8cd50e71e5 | (JJ Merelo)++ | t/get-w3-redirect.t

[06:36] <Geth> ¦ perl6-lwp-simple: Eliminates comment

[06:36] <Geth> ¦ perl6-lwp-simple: 

[06:36] <Geth> ¦ perl6-lwp-simple: And tests that test page. w3 has been eliminated everywhere, and this

[06:36] <Geth> ¦ perl6-lwp-simple: page keeps working. There's going to be the same problem with any

[06:36] <Geth> ¦ perl6-lwp-simple: other page like eu.httpbin.org, which is used elsewhere, so this

[06:36] <Geth> ¦ perl6-lwp-simple: closes #26

[06:36] <Geth> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/8cd50e71e5

[06:36] *** x08 joined
[06:37] *** x08 left
[06:38] <Geth> ¦ perl6-lwp-simple: a6e0906f72 | (JJ Merelo)++ | t/socket-sanity.t

[06:38] <Geth> ¦ perl6-lwp-simple: Removes unneeded test closes #6

[06:38] <Geth> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/a6e0906f72

[06:47] *** w_richard_w joined
[06:48] *** p6bannerbot sets mode: +v w_richard_w

[06:48] *** w_richard_w left
[06:59] *** jc__ joined
[07:00] *** p6bannerbot sets mode: +v jc__

[07:00] *** kurahaupo joined
[07:01] *** p6bannerbot sets mode: +v kurahaupo

[07:02] <Geth> ¦ perl6-lwp-simple/master: 4 commits pushed by (JJ Merelo)++

[07:02] <Geth> ¦ perl6-lwp-simple/master: c34097bfda | Extends README.md

[07:02] <Geth> ¦ perl6-lwp-simple/master: 3434d2dbf5 | Eliminates comment

[07:02] <Geth> ¦ perl6-lwp-simple/master: 02bbc61afc | Merge branch 'master' of github.com:JJ/perl6-lwp-simple

[07:02] <Geth> ¦ perl6-lwp-simple/master: 59e1912037 | Response case insensitive and tested closes #22

[07:02] <Geth> ¦ perl6-lwp-simple/master: review: https://github.com/perl6/perl6-lwp-simple/compare/a6e0906f72a5...59e191203789

[07:06] *** Kaiepi joined
[07:06] *** p6bannerbot sets mode: +v Kaiepi

[07:07] *** Bucciarati joined
[07:07] *** avar joined
[07:07] *** avar left
[07:07] *** avar joined
[07:07] *** p6bannerbot sets mode: +v avar

[07:08] *** p6bannerbot sets mode: +v Bucciarati

[07:08] *** p6bannerbot sets mode: +v avar

[07:10] <Geth> ¦ perl6-lwp-simple: 566761a157 | (JJ Merelo)++ | t/getstore.t

[07:10] <Geth> ¦ perl6-lwp-simple: Revises #13

[07:10] <Geth> ¦ perl6-lwp-simple: 

[07:10] <Geth> ¦ perl6-lwp-simple: The code has drifted away, so it's impossible to know what exactly

[07:10] <Geth> ¦ perl6-lwp-simple: caused the problem. It might have been some combination of testing

[07:10] <Geth> ¦ perl6-lwp-simple: website and Rakudo changes, but this problem no longer exists, so this

[07:10] <Geth> ¦ perl6-lwp-simple: closes #6.

[07:10] <Geth> ¦ perl6-lwp-simple: 

[07:10] <Geth> ¦ perl6-lwp-simple: Also, now http redirects to https, so eliminates a few tests that

[07:10] <Geth> ¦ perl6-lwp-simple: actually do the same.

[07:10] <Geth> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/566761a157

[07:11] <Geth> ¦ perl6-lwp-simple: 5a57b49cfa | (JJ Merelo)++ | t/getstore.t

[07:11] <Geth> ¦ perl6-lwp-simple: Clarifies tests closes #13

[07:11] <Geth> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/5a57b49cfa

[07:18] *** klapperl_ left
[07:27] *** abraxxa left
[07:28] *** abraxxa joined
[07:29] *** p6bannerbot sets mode: +v abraxxa

[07:33] *** Sound joined
[07:33] *** p6bannerbot sets mode: +v Sound

[07:35] *** klapperl joined
[07:36] *** p6bannerbot sets mode: +v klapperl

[07:49] *** robertle joined
[07:50] *** domidumont joined
[07:50] *** p6bannerbot sets mode: +v robertle

[07:51] *** p6bannerbot sets mode: +v domidumont

[07:58] *** domidumont1 joined
[07:58] *** abraxxa left
[07:59] *** p6bannerbot sets mode: +v domidumont1

[07:59] *** abraxxa joined
[08:00] *** p6bannerbot sets mode: +v abraxxa

[08:01] *** domidumont left
[08:08] *** jeek joined
[08:09] *** p6bannerbot sets mode: +v jeek

[08:15] *** sisar left
[08:17] *** abraxxa left
[08:18] *** robertle left
[08:19] *** abraxxa joined
[08:19] *** robertle joined
[08:20] *** p6bannerbot sets mode: +v abraxxa

[08:20] *** p6bannerbot sets mode: +v robertle

[08:23] *** abraxxa left
[08:25] *** abraxxa joined
[08:26] *** p6bannerbot sets mode: +v abraxxa

[08:30] *** abraxxa left
[08:30] *** Sound left
[08:31] *** abraxxa joined
[08:32] *** p6bannerbot sets mode: +v abraxxa

[08:34] *** kensanata joined
[08:34] *** p6bannerbot sets mode: +v kensanata

[08:36] *** abraxxa left
[08:41] *** |oLa| joined
[08:41] <Geth> ¦ doc: albertferrico++ created pull request #2478: Fix for issue #2476

[08:41] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2478

[08:41] *** p6bannerbot sets mode: +v |oLa|

[08:51] *** abraxxa joined
[08:52] *** p6bannerbot sets mode: +v abraxxa

[08:52] *** |oLa| left
[08:53] *** Sound joined
[08:53] *** p6bannerbot sets mode: +v Sound

[08:54] *** daxim joined
[08:55] *** p6bannerbot sets mode: +v daxim

[08:57] <andrzejku> .seen araraloren

[08:57] <yoleaux> I saw araraloren 21 Nov 2018 13:25Z in #perl6: <araraloren> not araraloren; just clearing the bot

[08:57] <lookatme_q> :)

[08:57] <lookatme_q> andrzejku, what's up ?

[08:57] <andrzejku> oh shit you are here :D

[08:57] <andrzejku> I thought I miss you

[08:57] <andrzejku> that's fine

[08:57] <lookatme_q> haha

[08:58] <lookatme_q> I am off work soon

[08:58] <andrzejku> I just was looking for you, haven't see you for the long long time

[08:58] <lookatme_q> oh, I was a little busy

[08:58] <andrzejku> well me too :D

[08:59] <lookatme_q> Ley

[08:59] <lookatme_q> Let's talk when I am home :)

[08:59] <andrzejku> Ok :)

[08:59] <andrzejku> keep working

[08:59] <lookatme_q> About 1 hours later

[09:00] <andrzejku> I will 2 hours later

[09:00] <andrzejku> for 1 hour I am going for lunch

[09:01] <lookatme_q> okay

[09:02] *** domidumont1 left
[09:04] *** domidumont joined
[09:04] *** p6bannerbot sets mode: +v domidumont

[09:10] *** coet[work] joined
[09:10] *** p6bannerbot sets mode: +v coet[work]

[09:10] *** ferreira joined
[09:11] *** p6bannerbot sets mode: +v ferreira

[09:11] *** zakharyas joined
[09:12] *** p6bannerbot sets mode: +v zakharyas

[09:17] *** sftp left
[09:18] *** sftp joined
[09:18] *** p6bannerbot sets mode: +v sftp

[09:22] <mornfall> hm... regex syntax has changed from p5? :\ i guess there's no equivalent of man perlre either?

[09:22] <mornfall> (how do i do a lookahead?)

[09:24] <jnthn> <?before foo>

[09:24] *** dakkar joined
[09:24] <masak> m: say so "lookahead" ~~ / "look" <?before "ahead"> /; say so "look, a three-headed monkey!" ~~ / "look" <?before "ahead"> /

[09:24] <camelia> rakudo-moar 0d317f277: OUTPUT: «True␤False␤»

[09:25] *** p6bannerbot sets mode: +v dakkar

[09:25] <mornfall> yeah, took me a while to figure out it's literally '?before'

[09:26] *** samcv joined
[09:26] *** p6bannerbot sets mode: +v samcv

[09:26] <Altreus> I have code along the lines of $some-supply.emit(some-function()) and I *think* some-function is dying, but the error is being swallowed

[09:26] <Altreus> I'm not quite sure how to figure out what's happening

[09:26] <Altreus> I do seem to keep accidentally losing errors when dealing with async

[09:26] <Altreus> but normally it's because I don't resolve a promise properly

[09:26] <mornfall> is there a way to get offline docs for p6 (man pages), like it was with p5? i really don't like going to the browser for basic stuff :(

[09:27] <jnthn> Altreus: Are you using supply/react/whenever? Becuase "don't lose errors" is one of the many things they help with :)

[09:27] *** coet[work] left
[09:27] <Altreus> I am using react and whenever, but I create a supply object rather than using supply

[09:27] <Altreus> sec

[09:28] <Altreus> https://github.com/shuppet/p6-api-discord/blob/master/lib/API/Discord.pm6#L173

[09:28] <Altreus> I'm pretty sure I broke inflate-message (specifically, Message::from-json), based on print-debugging

[09:28] <Altreus> but it just sort of does nothing

[09:29] <mornfall> okay this is going to take a while... how is m,stuff, not a regex :(

[09:29] <Altreus> not in this commit, I might add - in my working dir

[09:30] <Altreus> yes I definitely broke it because when I got the syntax right it worked

[09:31] <jnthn> m: say 'blah stuff blah' ~~ m,stuff,

[09:31] <camelia> rakudo-moar 0d317f277: OUTPUT: «｢stuff｣␤»

[09:31] <jnthn> Looks like one to me. But note that m is *immediate* evaluation of the regex against $_

[09:31] *** rindolf joined
[09:32] <mornfall> jnthn: i tried passing m,..., to split and it told me 'Use of uninitialized value of type Any in string context.' (nothing much else)

[09:32] *** p6bannerbot sets mode: +v rindolf

[09:32] <Altreus> > immediate

[09:32] <Altreus> methinks you passed the result of m

[09:33] <mornfall> Altreus: oh, so ~~ changes $_ locally?

[09:33] <mornfall> (before the immediate bit hits, anyway)

[09:33] <jnthn> Yes

[09:34] <mornfall> anyway, rx,..., does what i want

[09:34] <jnthn> YOu'd just pass /stuff/ to `split`

[09:34] <jnthn> Or rx if you want adverbs :)

[09:34] <jnthn> Or a non-/ separator

[09:34] <jnthn> uh, quoter

[09:34] *** robertle left
[09:35] <mornfall> jnthn: i hate / as quotes because it makes matching paths really awkward :p

[09:36] *** ferreira left
[09:36] *** Ven`` joined
[09:36] *** robertle joined
[09:36] *** p6bannerbot sets mode: +v Ven``

[09:37] <jnthn> Ah, yes, if matching paths it does indeed

[09:37] <Altreus> hmm OK I've got an understanding gap

[09:37] *** p6bannerbot sets mode: +v robertle

[09:37] <jnthn> Though at least in Perl 6 regex you can quote them like '/' which looks a bit nicer the the backslash :)

[09:37] <Altreus> [].map(anything) returns ()

[09:38] <Altreus> And then I pass that into a constructor where the object expects an array and I get [()]

[09:39] *** robertle left
[09:39] <Altreus> https://github.com/shuppet/p6-api-discord/blob/getting-stuff/lib/API/Discord/Message.pm6#L176

[09:40] *** kurahaupo left
[09:40] *** Ven`` left
[09:40] *** kurahaupo joined
[09:41] *** p6bannerbot sets mode: +v kurahaupo

[09:43] *** Ven`` joined
[09:43] *** p6bannerbot sets mode: +v Ven``

[09:45] <Altreus> Right, I get a Seq even if the JSON had stuff in it

[09:46] <Altreus> so say the docs

[09:46] <Altreus> What's the right way of making this another array?

[09:47] *** Ven`` left
[09:47] *** Bucciarati left
[09:47] *** avar left
[09:50] *** Mithaldu joined
[09:50] *** robertle joined
[09:51] *** p6bannerbot sets mode: +v Mithaldu

[09:51] *** ChoHag joined
[09:51] *** p6bannerbot sets mode: +v robertle

[09:52] *** p6bannerbot sets mode: +v ChoHag

[09:56] *** Ven`` joined
[09:57] *** p6bannerbot sets mode: +v Ven``

[10:05] *** Bucciarati joined
[10:05] *** avar joined
[10:05] *** avar left
[10:05] *** avar joined
[10:05] *** p6bannerbot sets mode: +v avar

[10:05] *** p6bannerbot sets mode: +v Bucciarati

[10:05] *** p6bannerbot sets mode: +v avar

[10:09] <moritz> add a .Array after the .map call

[10:09] <moritz> it's the map returns a Seq

[10:09] <moritz> m: say ([].map({}).^name

[10:09] <camelia> rakudo-moar 0d317f277: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in parenthesized expression; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3say ([].map({}).^name7⏏5<EOL>␤    expecting any of:…»

[10:09] <moritz> m: say ([].map({})).^name

[10:09] <camelia> rakudo-moar 0d317f277: OUTPUT: «Cannot map a Array to a Hash.␤Did you mean to add a stub ({...}) or did you mean to .classify?␤  in block <unit> at <tmp> line 1␤␤»

[10:09] <moritz> m: say ([].map({;})).^name

[10:09] <camelia> rakudo-moar 0d317f277: OUTPUT: «Seq␤»

[10:12] *** holyghost joined
[10:12] *** Ven`` left
[10:13] *** p6bannerbot sets mode: +v holyghost

[10:13] <moritz> m: say ([].map({;}).Array).^name

[10:13] <camelia> rakudo-moar 0d317f277: OUTPUT: «Array␤»

[10:13] *** tobs` joined
[10:14] *** p6bannerbot sets mode: +v tobs`

[10:14] *** ferreira joined
[10:15] *** p6bannerbot sets mode: +v ferreira

[10:15] <mornfall> okay stupid question... how do i get length of an array? tried scalar, length, size, len in various combinations without success :(

[10:15] <mornfall> or rather, length of a Seq

[10:16] <mornfall> also can anyone point me to some form of downloadable/offline docs? because my internet connection often isn't the best and looking stuff up is really painful on docs.perl6.org

[10:17] <Altreus> lemme try

[10:17] <mornfall> 5to6 just says that 'scalar' is "very" gone

[10:17] *** rindolf left
[10:18] <Altreus> now I have an array with an array in it :s

[10:18] *** someuser left
[10:19] <Altreus> not quite sure why

[10:20] <jnthn> notable6: .elems

[10:20] <notable6> jnthn, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Notable

[10:20] <jnthn> oops

[10:20] <jnthn> mornfall: .elems

[10:20] <jnthn> I think one can install p6doc

[10:21] <Altreus> so when I do this, if %constructor<mentions> contains an array, that array becomes the first element of @.mentions, instead of becoming @.mentions https://github.com/shuppet/p6-api-discord/blob/getting-stuff/lib/API/Discord/Message.pm6#L182

[10:21] <Altreus> not sure I understand why

[10:23] <Altreus> m: class A { @.arr } my $a = A.new(arr => [ 'array' ]); say $a.arr;

[10:23] <camelia> rakudo-moar 0d317f277: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable @.arr used where no 'self' is available␤at <tmp>:1␤------> 3class A { @.arr7⏏5 } my $a = A.new(arr => [ 'array' ]); sa␤    expecting any of:␤        term␤»

[10:23] <Altreus> oops

[10:23] <Altreus> m: class A { has @.arr } my $a = A.new(arr => [ 'array' ]); say $a.arr;

[10:23] <camelia> rakudo-moar 0d317f277: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3class A { has @.arr }7⏏5 my $a = A.new(arr => [ 'array' ]); say ␤    expecting any of:␤        infix␤        in…»

[10:23] <Altreus> m: class A { has @.arr }; my $a = A.new(arr => [ 'array' ]); say $a.arr;

[10:23] <camelia> rakudo-moar 0d317f277: OUTPUT: «[array]␤»

[10:23] <Altreus> m: class A { has @.arr }; my %c = arr => ['adfsdfasdf']; my $a = A.new(|%c); say $a.arr;

[10:23] <camelia> rakudo-moar 0d317f277: OUTPUT: «[[adfsdfasdf]]␤»

[10:24] <Altreus> excuse me

[10:24] <Altreus> this was not expected

[10:25] *** rindolf joined
[10:26] *** p6bannerbot sets mode: +v rindolf

[10:28] *** Ven`` joined
[10:29] *** p6bannerbot sets mode: +v Ven``

[10:29] *** scimon joined
[10:30] *** p6bannerbot sets mode: +v scimon

[10:35] <scimon> Two things. Has anyone used the Redis module recently who can help out on Stackoverflow? https://stackoverflow.com/questions/53495307/perl6-redis-stuck-when-ask-for-output I'm stuck and don't have time to get Redis up and running to test it.

[10:36] <scimon> And I think I might have a topic for at least 1 advent calendar entry. rotor just looks fun... :)

[10:38] *** ferreira left
[10:46] <Altreus> hey we're also failing to use the redis module :D

[10:46] <Altreus> I'll share

[10:48] <mornfall> jnthn: thanks

[10:48] *** ChoHag_ joined
[10:48] *** p6bannerbot sets mode: +v ChoHag_

[10:49] <scimon> I took a look a noticed it's a wee bit stale. Might just be it needs a going over. 

[10:49] *** ChoHag left
[10:49] <Geth> ¦ doc: 1cbbed17fb | Alberto++ (committed by Lucas Buchala) | htmlify.p6

[10:49] <Geth> ¦ doc: Update htmlfy.p6 (#2478)

[10:49] <Geth> ¦ doc: 

[10:49] <Geth> ¦ doc: Making changes suggested in the following issue:

[10:49] <Geth> ¦ doc: https://github.com/perl6/doc/issues/2476

[10:49] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1cbbed17fb

[10:51] <Altreus> scimon: apparently we can't run it because we don't have a liberedis.so

[10:51] <Altreus> But I can't figure out what that is

[10:52] <mornfall> what's the opposite of slurp?

[10:53] <El_Che> spurt

[10:54] <mornfall> oh, spurt perhaps

[10:54] <mornfall> \o/

[10:54] <jnthn> Altreus: There's also a Redis::Async module, and the stuff by its author tends to work nicely, so might also be worth trying instead

[10:55] *** Ven`` left
[10:57] <Altreus> ah!

[10:57] <Altreus> righto

[10:57] <Altreus> oh wait

[10:57] <Altreus> that is what we're using!

[10:58] <Altreus> jnthn: since you're nearby could you cast an eye over my evals in scrollback?

[10:58] *** leont joined
[10:58] <Altreus> not sure if it's me or perl doing it wrong

[10:59] *** p6bannerbot sets mode: +v leont

[10:59] <scimon> jnthn: I'll mention Redis::Async on the SO page.

[11:01] <jnthn> Altreus: It's you. The values of a hash are scalar containers (that is, items)

[11:02] <jnthn> Altreus: Bind instead of assign, or just do |%a.Map when calling .new

[11:04] <Altreus> righto! I still have to fully grok this container concept :)

[11:22] *** lizmat joined
[11:22] *** p6bannerbot sets mode: +v lizmat

[11:24] <Altreus> worked perfectly :o

[11:25] <Altreus> My "first" impressions of Perl6 are that once you know what's happening it's pretty sweet, but there are *way* more traps and pitfalls caused by internal functional decisions that make it to the surface

[11:25] <Altreus> Than perl5

[11:25] <Altreus> this container-vs-value thing tends to bite me, as does the where-did-my-error-go async problem

[11:27] <lizmat> Altreus: care to elaborate on the container-vs-value thing that's biting you ?

[11:27] <Altreus> there's an example above courtesy of the bot

[11:28] <Altreus> A.new(x => [...]) vs A.new(|%hash)

[11:28] <Altreus> You have to do |%hash.Map to get the equivalent

[11:29] <Altreus> I can manage the 5-to-6 transition of %hash to |%hash, but in fact there are two levels of knowledge required to get this right

[11:29] <Altreus> So although I *can* just forget containers exist, I can't do semi-advanced things without them showing up

[11:34] <lizmat> Feels to me you're more getting bitten by flattening behaviour...  but yeah: that's one of the things you have to get used to when coming from Perl 5 where everything is always flattened

[11:49] <lizmat> m:  { our sub foo() { "bar" } }; say foo;

[11:49] <camelia> rakudo-moar 0d317f277: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    foo used at line 1␤␤»

[11:49] <lizmat> moritz masak jnthn TimToady_  ^^^ is it intentional that this doesn't work or not ?

[11:52] <lizmat> m: { our $foo = 42 }; say $foo   # similarly

[11:52] <camelia> rakudo-moar 0d317f277: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$foo' is not declared␤at <tmp>:1␤------> 3{ our $foo = 42 }; say 7⏏5$foo   # similarly␤»

[11:55] *** kurahaupo left
[12:07] <Geth> ¦ doc: c743f2614f | (JJ Merelo)++ | META6.json

[12:07] <Geth> ¦ doc: Eliminates LWP::Simple and IO::Socket::SSL which are not used here. Closes #2472

[12:07] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c743f2614f

[12:10] <lucasb> In '{ our $foo = 42 }', isn't "our $foo" a lexical declaration of a package variable? (In P5 terms :)

[12:11] <lucasb> if it's lexical, I expect it not to be available outside its scope, the block

[12:11] <Altreus> hmm

[12:12] <Altreus> m: class A { has @.arr }; my $array = ['sfasdadf']; my $a = A.new(arr => $array); say $a.arr

[12:12] <camelia> rakudo-moar 0d317f277: OUTPUT: «[[sfasdadf]]␤»

[12:12] <Altreus> ^ this is what I was getting bitten by

[12:12] *** ChoHag_ left
[12:12] <Altreus> m: class A { has @.arr }; my @array = 'sfasdadf'; my $a = A.new(arr => @array); say $a.arr

[12:12] <camelia> rakudo-moar 0d317f277: OUTPUT: «[sfasdadf]␤»

[12:12] <Altreus> it's not so much flattening behaviour as what was being stored in the first place

[12:12] <Altreus> 🤔 what about ...

[12:13] <Altreus> m: class A { has @.arr }; my @array = 'sfasdadf'; my %c = arr => @array; my $a = A.new(|%c); say $a.arr

[12:13] <camelia> rakudo-moar 0d317f277: OUTPUT: «[[sfasdadf]]␤»

[12:13] <Altreus> hum

[12:14] *** ZzZombo left
[12:15] <lizmat> lucasb: the docs on "our" are not very clear on that

[12:15] <lucasb> I just assumed the behavior was similar to P5

[12:15] <lizmat> in any case, it is unexpected behaviour to me

[12:16] <lucasb> I was just thinking about the scalar variable "{ our $foo }"

[12:16] <lizmat> but it is not ?

[12:16] <lucasb> but the our sub, indeed, is a interesting question :-)

[12:16] <lizmat> { our $a = 42 }; say $a   # 42 in Perl 5

[12:16] <lucasb> change $a to something else? :-)

[12:17] <lucasb> { our $A = 42 }; say $A

[12:17] <lucasb> Variable "$A" is not imported at - line 5.

[12:17] <moritz> lizmat: re our foo, I think that's intentional, yes

[12:17] <lizmat> argh

[12:18] *** ChoHag joined
[12:18] <lizmat> { our $foo = 42 }; say $foo   # gives 42 for me with Perl 5 lucasb 

[12:18] *** p6bannerbot sets mode: +v ChoHag

[12:19] <lucasb> ah, under use strict

[12:19] <lucasb> it gives an error :-)

[12:19] <lizmat> { use strict; our $foo = 42 }; say $foo   # Global symbol "$foo" requires explicit package name

[12:19] <lizmat> yeah, funny

[12:20] <lizmat> so at compile time it can't find it, and at runtime it could

[12:20] <lizmat> moritz: what's the rationale ?

[12:22] *** Ven`` joined
[12:22] *** p6bannerbot sets mode: +v Ven``

[12:23] <andrzejku> lookatme_q ping

[12:23] <andrzejku> .ping

[12:23] <yoleaux> There is no ping command; nor can this be construed as a response.

[12:23] <andrzejku> .ping lookatme_q

[12:23] <yoleaux> There is no ping command; nor can this be construed as a response.

[12:26] *** kurahaupo joined
[12:27] *** p6bannerbot sets mode: +v kurahaupo

[12:36] *** sena_kun joined
[12:37] *** p6bannerbot sets mode: +v sena_kun

[12:42] *** zakharyas left
[12:44] <moritz> lizmat: our installs into the lexical and into the package scope simultaneously

[12:44] <moritz> lizmat: so that non-qualified accesses like $foo and &foo only have to look into the lexical scope

[12:45] <moritz> lizmat: and since lexical scopes are immutable at runtime, this allows use to catch missing symbols at compiel time

[12:45] <lizmat> ah, ok, yeah, makes sense # moritz++

[12:45] <sena_kun>  

[12:52] <jnthn> lizmat: Yes, intentional. Lookup of subs, unless they are explicitly qualified of course, is always lexical.

[12:52] <jnthn> ah, I see moritz++ answered too, with more detail :)

[12:52] * jnthn was still in backlog :)

[13:01] <Altreus> is there a shorter way of saying await x, that looks more chainable?

[13:01] <Altreus> (await (await x).y).z is ... um

[13:02] <lizmat> Altreus: maybe Object::Delayed's "catchup" is something for you  :-)

[13:02] <jnthn> x.&await.y.&await.z

[13:02] <Altreus> ketchup? Is that like sugar?

[13:02] <lizmat> https://modules.perl6.org/dist/Object::Delayed

[13:03] <jnthn> But also consider putting a method on `x` that does those

[13:03] <jnthn> OO designs that involve digging deep into things are a refactoring nuisance

[13:03] <lizmat> "The catchup subroutine allows you to transparently run code asynchronously that creates a result value. If the value is used in any and the asychronous code has not finished yet, then it will wait until it is ready so that it can return the result."

[13:03] <Altreus> I can use apostrophes can't I

[13:03] <Altreus> So I could have x and x'

[13:04] * lizmat spots a typo in the pod

[13:04] *** Ven`` left
[13:04] <Altreus> oh slack for lazy properties is nice

[13:04] <Altreus> that's got to be the third or fourth alternative to that I've seen

[13:06] <lizmat> Altreus: in Perl 6 ?  If so, which one?

[13:07] <Altreus> it's been a while since I looked but um

[13:07] <Altreus> I have commented out 'will lazy ...' on one of my properties

[13:08] <Altreus> And that wasn't the first one I came across to do that

[13:08] <Altreus> but I forgot what I found when I looked

[13:08] <lizmat> fwiw, "has $.foo = slack { ... }" works as intended

[13:09] <lizmat> and hopefully expected :-)

[13:13] <Altreus> The reason I forgot is I'm not in a position to bother with lazy stuff yet :)

[13:13] *** Ven`` joined
[13:14] <Altreus> But this seems like a version that Just Works so I'll try it when I do

[13:14] <Altreus> ah looks like I can't end a method name with an apostrophe

[13:14] *** p6bannerbot sets mode: +v Ven``

[13:14] <Altreus> shame, I thought I could use it as prime

[13:17] <Altreus> although...

[13:19] <Altreus> nah, I can't come up with a convention I'm happy with, except to just add more words

[13:19] <Altreus> I really want to use punctuation :P

[13:19] <Altreus> oh

[13:19] <Altreus> I can!

[13:24] <Altreus> I made it $message.channel(:now)

[13:27] <Altreus> I couldn't see a way of doing anything like $message.channel! or $message.channel`

[13:28] <lizmat> there's a slang that allows ! at the end of identifiers

[13:28] <lizmat> https://modules.perl6.org/dist/Slang::Piersing:github:github:FROGGS

[13:29] <lizmat> afk for a few hours&

[13:31] *** kurahaupo left
[13:31] *** kurahaupo joined
[13:32] *** p6bannerbot sets mode: +v kurahaupo

[13:57] *** Xliff left
[14:02] *** clarkema joined
[14:03] *** p6bannerbot sets mode: +v clarkema

[14:04] <Altreus> that's amazing and I love it

[14:05] <Altreus> not convinced it covers my use case so I'd have to test

[14:07] <Altreus> I just realised why I prefer that

[14:07] <Altreus> It's because the methods no longer return Promise

[14:07] <Altreus> they return It Depends

[14:08] *** Ven`` left
[14:12] <Altreus> :O it works

[14:12] <Altreus> When I tried before it got confused by « !. » in « self.channel!.etc() » but it doesn't now

[14:12] *** ChoHag left
[14:15] <Altreus> Slang::Piersing breaks boolean adverbs

[14:16] <Altreus> method pinned-messages($force?) → Variable '$force' is not declared. Did you mean '$force?'?

[14:16] <Altreus> I suppose I don't *need* that ?

[14:16] *** Ven`` joined
[14:16] <timotimo> oh whoops

[14:16] <timotimo> well, you can always make parameters optional by supplying a default value instead

[14:17] <Altreus> I just realised that was supposed to be :$force anyway

[14:17] *** p6bannerbot sets mode: +v Ven``

[14:17] *** xinming joined
[14:17] *** ChoHag joined
[14:18] *** p6bannerbot sets mode: +v xinming

[14:18] *** p6bannerbot sets mode: +v ChoHag

[14:19] *** Xliff joined
[14:19] *** p6bannerbot sets mode: +v Xliff

[14:20] *** xinming_ left
[14:20] <Altreus> Secondarily, you have to use it in consuming code too

[14:20] <Altreus> Makes sense but I was hoping it would bleed over

[14:21] <timotimo> not absolutely necessary

[14:22] <timotimo> you can call the method with quotes

[14:22] <timotimo> $foobar.'hello!'()

[14:25] *** someuser joined
[14:26] *** p6bannerbot sets mode: +v someuser

[14:52] *** ferreira joined
[14:53] *** p6bannerbot sets mode: +v ferreira

[15:01] <Geth> ¦ doc: 0852a84ab4 | Coke++ | xt/braces.t

[15:01] <Geth> ¦ doc: angle brackets is also a thing

[15:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0852a84ab4

[15:01] <Geth> ¦ doc: d201389198 | Coke++ | 3 files

[15:01] <Geth> ¦ doc: prefer non-hyphenated

[15:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d201389198

[15:01] <Geth> ¦ doc: 5f93731c5b | Coke++ | xt/braces.t

[15:01] <Geth> ¦ doc: Find some bracket variants

[15:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5f93731c5b

[15:02] *** ferreira left
[15:02] <Altreus> seems worse :P

[15:05] *** ChoHag_ joined
[15:06] *** p6bannerbot sets mode: +v ChoHag_

[15:07] *** ferreira joined
[15:07] *** p6bannerbot sets mode: +v ferreira

[15:08] *** ChoHag left
[15:09] *** Ven`` left
[15:11] *** beeman joined
[15:11] *** p6bannerbot sets mode: +v beeman

[15:14] *** graphene left
[15:15] *** graphene joined
[15:15] *** lizmat left
[15:16] *** p6bannerbot sets mode: +v graphene

[15:18] *** Ven`` joined
[15:19] *** ufobat joined
[15:19] *** p6bannerbot sets mode: +v Ven``

[15:19] *** p6bannerbot sets mode: +v ufobat

[15:20] <ufobat> p6: say 1

[15:20] <camelia> rakudo-moar defc2c5a4: OUTPUT: «1␤»

[15:20] <ufobat> p6: my %h = gather { take "foo" => 1; take "bar" => 2}; say %h

[15:20] <camelia> rakudo-moar defc2c5a4: OUTPUT: «{bar => 2, foo => 1}␤»

[15:20] <ufobat> this is intentional, right?

[15:20] <ufobat> because https://docs.perl6.org/syntax/gather%20take just talked about arrays

[15:21] <moritz> it's the %h = that turns it into a hash

[15:21] <moritz> the return value from gather/take is still a Seq

[15:21] <ufobat> ah okay

[15:22] <ufobat> i am still unhappy with the documentation because i almost discarded my idea of using gather/take for a hash

[15:28] *** coet[work] joined
[15:28] *** p6bannerbot sets mode: +v coet[work]

[15:30] <Kaiepi> m: my %foo is Map = {a => 1}; say %foo

[15:30] <camelia> rakudo-moar defc2c5a4: OUTPUT: «Map.new((a => 1))␤»

[15:30] <Kaiepi> i had no idea is could be used like that

[15:35] *** alpha joined
[15:36] *** Ven`` left
[15:36] *** p6bannerbot sets mode: +v alpha

[15:36] *** Ven`` joined
[15:37] *** p6bannerbot sets mode: +v Ven``

[15:39] *** zakharyas joined
[15:40] *** p6bannerbot sets mode: +v zakharyas

[15:43] *** ferreira left
[15:48] *** kurahaupo left
[15:50] *** Ven`` left
[15:52] *** titsuki joined
[15:52] *** p6bannerbot sets mode: +v titsuki

[15:57] <Geth> ¦ doc/master: 5 commits pushed by Coke++

[15:57] <Geth> ¦ doc/master: 946e8ae915 | prefer non-hyphenated

[15:57] <Geth> ¦ doc/master: 6e44248d71 | canonicalize whitespace before matching

[15:57] <Geth> ¦ doc/master: 7770a5c94a | {} are curly braces, not brackets.

[15:57] <Geth> ¦ doc/master: 84b072a759 | match only against whole words

[15:57] <Geth> ¦ doc/master: b4276efb50 | clarify some brace/brackets

[15:57] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/5f93731c5b8f...b4276efb50cb

[16:03] *** b2gills joined
[16:04] *** p6bannerbot sets mode: +v b2gills

[16:06] *** b2gills left
[16:09] *** kurahaupo joined
[16:10] *** p6bannerbot sets mode: +v kurahaupo

[16:14] *** jc__ left
[16:18] *** xinming_ joined
[16:19] *** b2gills joined
[16:19] *** p6bannerbot sets mode: +v xinming_

[16:20] *** p6bannerbot sets mode: +v b2gills

[16:21] *** xinming left
[16:21] *** jmerelo joined
[16:22] *** ChoHag_ left
[16:22] *** p6bannerbot sets mode: +v jmerelo

[16:23] *** robertle left
[16:24] <jmerelo> squashable6: status

[16:24] <squashable6> jmerelo, ⚠🍕 Next SQUASHathon in 3 days and ≈17 hours (2018-12-03 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[16:24] <jmerelo> Almost there!

[16:32] <TreyHarris> I'm confused... if I open a handle like `my $h = $f.open;` in a routine, if I include the line `LEAVE try $h.close;` anywhere after that point, then attempts to read the file fail with `Cannot do 'get' on a handle in binary mode`, but if I leave the LEAVE out, everything works fine (except the file doesn't get closed).

[16:33] <moritz> TreyHarris: are you trying to read in the same scope as the LEAVE statement?

[16:34] <TreyHarris> moritz: Yes

[16:34] <jnthn> And you're completing the read in that scope (e.g. not returning .lines, which is lazy)?

[16:34] <TreyHarris> it's `return $h.lines; LEAVE try $h.close;`

[16:34] <moritz> TreyHarris: ah, that explains a lot

[16:35] <moritz> TreyHarris: $h.lines is lazy

[16:35] <moritz> so, you return a lazy list, currently empty

[16:35] <moritz> then you close the file handle

[16:35] <moritz> and then the caller tries to consume the lazy list, and finds the file handle broken

[16:35] <moritz> s/broken/closed/

[16:35] <TreyHarris> moritz: but why binary? If I got an file closed exception, I would have immediately known this was this issue

[16:36] <moritz> TreyHarris: that does look weird

[16:36] <moritz> there are two possible solutions

[16:36] <moritz> one is to return an eager list

[16:36] <moritz> the other is to explictly close after it has been consume, for example

[16:37] <moritz> sub my-lines($filename) { my $f = open $filename; return gather { take $_ for $f.lines(); $f.close } }

[16:37] <Xliff> TreyHarris: "return $h.lines.Array; LEAVE try $h.close;"

[16:38] <Xliff> But it's better to listen to moritz. He knows more. ;)

[16:38] <moritz> TreyHarris: IMHO the misleading error message warrants a bug report though

[16:38] <moritz> Xliff: not at all. What you wrote was my option one, return an eager list

[16:39] <TreyHarris> to do that, though (explicitly close after consume), I must assign to a global or return the handle, right? Or in the above gather { } case, it will only close if I read the last line, correct? If I never read the last line, even if the return goes out of scope, the close won't happen?

[16:40] *** domidumont left
[16:40] <TreyHarris> hm, the docs mention a "will leave trait", but rakudo says "leave not implemented yet, sorry"

[16:40] <moritz> well, if the caller discards the reference to the lazy list, and the GC eventually gets the file handle, it closes it

[16:40] <TreyHarris> (Not sure that would be any different than the LEAVE try $h.close though)

[16:40] *** sena_kun left
[16:41] <TreyHarris> Xliff: I know how to make it eager, but I was under the misimpression that if you returned a lazy, LEAVE didn't phase in until the lazy was exhausted

[16:42] <Xliff> Ah!

[16:42] <moritz> TreyHarris: would not be different, no

[16:42] <TreyHarris> hm, Trait::IO has a 'does auto-close' trait that... is all in NQP land, so I guess I need to try it to see what its behavior is

[16:43] <TreyHarris> Looks to me it would be identical to the gather one though, if I'm reading these nested levels right? https://github.com/zoffixznet/perl6-Trait-IO/blob/master/lib/Trait/IO.pm6

[16:44] *** sena_kun joined
[16:45] *** p6bannerbot sets mode: +v sena_kun

[16:46] <TreyHarris> Is this exception a rakudo bug or a perl6 bug?

[16:46] <ufobat> I've got a yml configuration file which i read with YAMLish, but I am wondering if there is a module that helps me to ensure that all required configuration parameres are actually provided

[16:48] <ufobat> ther is no such thing as "ypath", similar to xpath for xml?

[16:49] <jnthn> ufobat: No, but you can use JSON::Schema if the YAML deserializes into just hashes and arrays

[16:49] <jnthn> ufobat: We're doing that on a $dayjob project for validating YAMLs

[16:50] <jnthn> TreyHarris: the bad close error would be a Rakudo bug

[16:51] <ufobat> ah thank you jnthn 

[16:51] <TreyHarris> jnthn: Okay, thanks. On another note, is it a bug that rakudo-star latest says "v6.c"? I thought I saw an announcement that it was v6.d

[16:52] <moritz> the Star that defaults to v6.d hasn't been released yet, I believe

[16:52] <jnthn> TreyHarris: No, the 6.d language spec has been released, but a compiler supporting it not yet (though probably will be today, but then a Rakudo Star supporting it will be a bit longer)

[16:52] <moritz> we're still looking for a release manager for that

[16:53] <TreyHarris> jnthn: ah-hah, yes... looks like the release notes I saw it in was a PDF for some reason, and my email doesn't search inside PDF's.

[16:54] <jnthn> moritz: I think a couple of folks volunteered :)

[16:57] <clarkema> Speaking of which, I was one of them

[16:57] <clarkema> What's the process?

[16:58] <TreyHarris> Hmm, is the final example in https://docs.perl6.org/routine/dir that is introduced with, "A lazy way to..." actually supposed to be lazy? It doesn't appear to be in rakudo-star 2018.10 at least.

[16:58] <TreyHarris> (Or maybe "a lazy way" was meant metaphorically, in which case the word should probably be changed?)

[16:59] <sena_kun> jmerelo, ping?

[17:01] *** robertle joined
[17:01] *** p6bannerbot sets mode: +v robertle

[17:03] <jmerelo> sena_kun: pong?

[17:03] <sena_kun> jmerelo, \o/

[17:03] <jmerelo> sena_kun: hi :-)

[17:03] <moritz> clarkema: on https://github.com/rakudo/star/issues/124 stmuk posted a link to the release guide

[17:04] <moritz> clarkema: I've also sent you some invitations to github organisations which you should accept, and commented something about SSH public keys

[17:04] <clarkema> moritz: got it -- I'll start having a play around with the process to get famililar with it and get an environment set up

[17:04] <sena_kun> jmerelo, I have two questions, first is about Advent, second one about academia with Perl 6, I think I can, probably, make you a bit happier and ask for some advices, though I wonder if I can PM you now || if it will be comfortable.

[17:04] <b2gills> TreyHarris: use `return $h.lines( :close )` rather than `LEAVE $h.close; return $h.lines()`

[17:04] <moritz> clarkema: if you need shell access to a Linux box for the generic .tar.gz, I can also help you

[17:05] <moritz> sena_kun: if they are general question about p6 Advent, I can also try to answer

[17:05] <clarkema> moritz: thanks -- I should be ok unless I it's something that requires a particular environment or keys etc

[17:05] <clarkema> I've got a pretty hefty linux workstation here

[17:05] <moritz> clarkema: no, just a bog-standard Debian box :)

[17:06] <sena_kun> moritz, well, I think I need to create an account at wordpress to get an ID out of it, then post it.

[17:07] <sena_kun> >all my usual nicknames are already taken, no posts at those accounts

[17:07] <sena_kun> heh

[17:07] <moritz> sena_kun: /msg me your email address (or wordpress.com account name), and I'll send you an invitation

[17:07] <ufobat> jnthn, with JSON::Schema i can write my json-schema in yaml, right? thats funny. like JSON::Schema.new(schema => load-yml($yaml-string))

[17:07] <sena_kun> moritz, ok, thanks!

[17:09] <jnthn> ufobat: Heh, yeah, I guess you can :)

[17:10] <jmerelo> sena_kun: please do that

[17:10] <moritz> ufobat: we use that at $work

[17:10] <moritz> mostly because YAML can be much more concise, and adding comments is so much easier

[17:11] <ufobat> exactly!

[17:11] <jnthn> There's also a JSON::Path module

[17:11] <moritz> sena_kun: oh, maybe by email is easier (moritz.lenz@gmail.com), privmsg get lost on freenode due to anti-spam measures

[17:12] <jmerelo> Just a reminder that there are still a few slots open: https://github.com/perl6/advent/blob/master/perl6advent-2018/schedule

[17:13] <jmerelo> (and that the page has moved to a new repo)

[17:13] <jmerelo> (I'll keep track of both anyway)

[17:13] <jmerelo> (Oh, the previous one has disappeared...)

[17:13] *** abraxxa left
[17:14] *** alpha left
[17:16] <sena_kun> moritz, sent one.

[17:16] <ufobat> p6: with $*DOESNOTEXIST { .say }

[17:16] <camelia> rakudo-moar defc2c5a4: ( no output )

[17:16] <ufobat> p6: with $DOESNOTEXIST { .say }

[17:16] <camelia> rakudo-moar defc2c5a4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$DOESNOTEXIST' is not declared␤at <tmp>:1␤------> 3with 7⏏5$DOESNOTEXIST { .say }␤»

[17:16] <ufobat> p6: say $*DOESNOTEXIST

[17:16] <camelia> rakudo-moar defc2c5a4: OUTPUT: «Dynamic variable $*DOESNOTEXIST not found␤  in block <unit> at <tmp> line 1␤␤»

[17:17] <ufobat> is the first one a bug?

[17:17] <moritz> sena_kun: invitation sent

[17:24] *** Sound left
[17:29] <jnthn> ufobat: I don't see any bug; $*DOESNOTEXIST evaluates to a Failure, which is not .defined

[17:29] <ufobat> ah a failure

[17:30] *** Sound joined
[17:30] *** p6bannerbot sets mode: +v Sound

[17:30] <ufobat> because accidently used the wrong sigil like $*ENV, and with 'with' it's harder to spot my mistake

[17:30] *** Kaiepi left
[17:30] *** scimon left
[17:31] *** Kaiepi joined
[17:31] *** p6bannerbot sets mode: +v Kaiepi

[17:34] *** tobs` left
[17:43] <sena_kun> moritz, an invitation letter was in spam for some reason, but accepted the invitation! Thanks.

[17:44] *** kensanata left
[17:44] <moritz> ufobat: you might want to 'use fatal;'

[17:46] <ufobat> moritz, oh cool. thank you

[17:48] *** graphene left
[17:49] *** graphene joined
[17:50] *** p6bannerbot sets mode: +v graphene

[17:52] *** Sound left
[17:52] <tyil> I'm trying to use Proc::Async, and the big example block of code at the top says I should be able to use .exitcode, but that method doesnt appear in the list of methods in the docs

[17:52] <tyil> it also doesnt seem to appear in Proc::Async.^methods

[17:53] <timotimo> i think it is in the Proc object that you get returned at the end?

[17:53] <tyil> also, can I place a tap on the stdout and get it per-line

[17:53] <timotimo> the stdout supply spits out characters (or bytes) but you can just use .lines on the supply to get a supply that emits lines individually

[17:54] <moritz> timotimo++

[17:54] <tyil> ah, there's a Proc returned by the promise from .start

[17:54] <tyil> I can work with that

[17:54] <tyil> and $async-proc.out.lines.tap?

[17:54] <tyil> stdout*

[17:55] <timotimo> yeah, but i'd always recommend trying to work with react or supply blocks

[17:57] <jnthn> `whenever $async-proc.start { if .exitcode > 0 { note "oh noes" } }

[17:57] <tyil> thanks, I should be able to continue again

[17:57] <tyil> :>

[17:57] * timotimo thumbs up

[18:00] *** jmerelo left
[18:04] *** dakkar left
[18:08] <loops> Why does p6 think this is an error:     sub x() {}; with x { }    and require it to be written as:    sub x() {}; with x() { }

[18:08] <loops> shouldn't the  sub x() ... definition with empty parameter list indicate that no block is expected as a parameter?

[18:09] *** ChoHag joined
[18:10] *** p6bannerbot sets mode: +v ChoHag

[18:10] <jnthn> loops: No, the signature of the sub has no impact on how its arguments are parsed.

[18:11] <loops> jnthn: interesting, thanks.

[18:14] *** kurahaupo left
[18:14] *** kurahaupo_ joined
[18:15] *** p6bannerbot sets mode: +v kurahaupo_

[18:18] *** coet[work] left
[18:27] *** rfold joined
[18:28] *** p6bannerbot sets mode: +v rfold

[18:31] <timotimo> (since subs can be post-declared)

[18:31] <timotimo> (alternatively: in order for subs to be post-declarable)

[18:43] *** haukex joined
[18:44] *** p6bannerbot sets mode: +v haukex

[18:44] <mornfall> what is the preferred way to run programs?

[18:45] <El_Che> mornfall: can you give some context?

[18:46] <mornfall> well, one thing would be running a program and capturing its output... possibly set a timeout; along the lines of p5 IPC::Run

[18:46] <cono> Proc::Async

[18:46] <El_Che> ok, from within your program

[18:48] <El_Che> yes, Proc::Async because of the timeout. For simpler cases there is 'run' and 'shell'

[18:48] *** lizmat joined
[18:48] *** p6bannerbot sets mode: +v lizmat

[18:48] *** haukex left
[18:50] *** Kaypie joined
[18:50] *** Kaiepi left
[18:50] <mornfall> i'll look, thanks (gotta get off train, bbiab)

[18:50] <El_Che> see you!

[18:50] *** p6bannerbot sets mode: +v Kaypie

[18:52] *** kurahaupo_ left
[18:52] *** kurahaupo joined
[18:53] *** p6bannerbot sets mode: +v kurahaupo

[18:55] *** graphene left
[18:56] *** graphene joined
[18:57] *** p6bannerbot sets mode: +v graphene

[19:04] <mornfall> so... http client and a json parser? O:-) i guess i'll have to go to CPAN for those

[19:04] *** ufobat left
[19:06] <tobs> eco: WWW

[19:06] <buggable> tobs, WWW 'No-nonsense, simple HTTPS client with JSON decoder': https://github.com/zoffixznet/perl6-WWW 5 other matching results: https://modules.perl6.org/s/WWW

[19:06] <tobs> mornfall: all-in-one

[19:09] <mornfall> can i somehow fetch docs with zef?

[19:10] <mornfall> (or build)

[19:11] * mornfall tries zef install p6doc

[19:12] <mornfall> but man, zef is super slow :(

[19:13] <mornfall> 19 seconds to 'zef info p6doc'

[19:16] <mornfall> can i ask zef to install p6doc into ~/.perl6? died with Failed to create directory '/usr/local/share/perl6/site/doc' (i installed other things and those worked?)

[19:20] <moritz> you can ask it lots of things... :D

[19:21] *** pecastro joined
[19:21] *** xinming_ left
[19:21] *** p6bannerbot sets mode: +v pecastro

[19:22] *** xinming joined
[19:23] *** kurahaupo left
[19:23] *** kurahaupo joined
[19:23] *** p6bannerbot sets mode: +v xinming

[19:23] *** p6bannerbot sets mode: +v kurahaupo

[19:24] *** sauvin left
[19:26] <mornfall> moritz: any hint on why? googling didn't bring up anything :(

[19:26] <mornfall> or rather, how

[19:26] <mornfall> maybe i need newer rakudo

[19:27] <moritz> don't know

[19:29] <mornfall> well, it did something if i zef install --force p6doc... i have a binary now, but p6doc -l gives me a backtrace :\

[19:35] <mornfall> let's try fetching rakudo star instead, something is obviously wrong with this late-2017 rakudo from ports

[19:39] <lizmat> mornfall: yeah, you want a more recent rakudo for sure!

[19:40] <mornfall> well, i vaguely remember startup time getting a lot better, and there's a noticeable delay now between running a script and something actually happening... that's a little annoying :p

[19:40] <mornfall> btw. is pugs still a thing?

[19:42] *** zakharyas left
[19:43] <sena_kun> no

[20:00] <mornfall> p6doc \o/ it's doing stuff

[20:03] *** Ven`` joined
[20:03] *** p6bannerbot sets mode: +v Ven``

[20:07] <mornfall> but neither JSON::Path nor WWW have any documentation? :\

[20:08] <moritz> there's documentation in the README: https://github.com/jnthn/json-path#readme

[20:08] <mornfall> so zef look?

[20:12] *** Ven`` left
[20:15] <lizmat> .oO( that's what I like about App::Mi6: it creates a README from the pod )

[20:20] *** beeman left
[20:41] *** zakharyas joined
[20:41] *** p6bannerbot sets mode: +v zakharyas

[20:49] *** beeman joined
[20:49] *** p6bannerbot sets mode: +v beeman

[20:52] *** loops left
[20:57] *** molaf joined
[20:58] *** p6bannerbot sets mode: +v molaf

[20:58] *** lichtkind joined
[20:58] *** ryn1x joined
[20:59] *** p6bannerbot sets mode: +v lichtkind

[20:59] *** p6bannerbot sets mode: +v ryn1x

[21:04] *** Ven`` joined
[21:05] *** p6bannerbot sets mode: +v Ven``

[21:08] *** Ven`` left
[21:10] *** ryn1x left
[21:18] *** ChoHag left
[21:18] *** kurahaupo_ joined
[21:19] *** kurahaupo left
[21:19] *** p6bannerbot sets mode: +v kurahaupo_

[21:27] *** robertle left
[21:27] *** graphene left
[21:28] *** graphene joined
[21:29] *** p6bannerbot sets mode: +v graphene

[21:38] *** graphene left
[21:39] *** graphene joined
[21:40] *** p6bannerbot sets mode: +v graphene

[21:46] <[Coke]> m: #`

[21:46] <camelia> rakudo-moar defc2c5a4: ( no output )

[21:47] *** Kaypie left
[21:47] *** Kaypie joined
[21:48] *** p6bannerbot sets mode: +v Kaypie

[21:49] *** Merfont joined
[21:49] *** Kaypie left
[21:50] *** p6bannerbot sets mode: +v Merfont

[21:54] *** kurahaupo_ left
[21:57] *** zakharyas left
[22:10] <SmokeMachine> is there already defined any default to create modules that will run on browser and interact with js?

[22:11] <SmokeMachine> I am thinking of writing one... I am testing on 6pad...

[22:11] <SmokeMachine> Im trying to write a "inline dom"...

[22:11] <SmokeMachine> here is my poc: https://perl6.github.io/6pad/#3d9c7dd4834c4a450bbd599011ab6420

[22:13] *** Cabanoss- left
[22:13] *** Cabanossi joined
[22:14] *** p6bannerbot sets mode: +v Cabanossi

[22:16] *** loops joined
[22:17] *** p6bannerbot sets mode: +v loops

[22:18] *** skav joined
[22:18] *** p6bannerbot sets mode: +v skav

[22:22] *** vrurg joined
[22:23] *** p6bannerbot sets mode: +v vrurg

[22:26] *** skav left
[22:27] *** skav joined
[22:27] *** p6bannerbot sets mode: +v skav

[22:27] *** rindolf left
[22:28] *** lichtkind left
[22:31] *** skav left
[22:44] <Geth> ¦ advent: 0b42e35fb0 | (Tom Browder)++ (committed using GitHub Web editor) | perl6advent-2018/schedule

[22:44] <Geth> ¦ advent: update title

[22:44] <Geth> ¦ advent: review: https://github.com/perl6/advent/commit/0b42e35fb0

[22:48] *** rfold left
[22:51] <AlexDaniel> huggable: advent

[22:51] <huggable> AlexDaniel, Sign up to write an Advent blog post: https://github.com/perl6/mu/blob/master/misc/perl6advent-2018/schedule

[22:53] *** kurahaupo joined
[22:54] *** p6bannerbot sets mode: +v kurahaupo

[23:00] *** kurahaupo left
[23:07] <loops> Is there any way to arrange for an object a callback when it falls out of scope?  DESTROY only gets called on garbage collection.

[23:07] <jnthn> loops: No, but you can write a scope exit handler with LEAVE

[23:08] <loops> Or what is the idiomatic way to release some external resource acquired inside an object when it is created?

[23:10] <loops> jnthn, yeah, was coming to the conclusion that it has to be left in the hands of the caller to manually release the object rather than expecting it to happen automatically.

[23:11] <gfldex> m: my class C { die "I'm still alive!" }; my $c = C.new; { my $d := $c; LEAVE $d.die };

[23:11] <camelia> rakudo-moar defc2c5a4: OUTPUT: «I'm still alive!␤  in block <unit> at <tmp> line 1␤␤»

[23:13] <loops> gfldex: i'm not sure what that is demonstrating.

[23:13] <loops> (sorry, pretty new to P6)

[23:14] <gfldex> loops: objects can't keep track where and how often they are referenced (here with binding via := ).

[23:14] <gfldex> loops: they can't know if they are still needed

[23:15] <loops> gfldex, how is anything garbage collected ever then?

[23:16] <gfldex> because the runtime knows

[23:17] <gfldex> loops: what recource do you want to free?

[23:18] <loops> glfdex, well in this particular case, it's not a big deal, I am just arranging to make sure the terminal is restored to cooked mode from raw

[23:18] *** Sound joined
[23:18] *** p6bannerbot sets mode: +v Sound

[23:18] <gfldex> loops: then an ENTER/LEAVE pair seams fitting

[23:19] <loops> glfdex, yeah for sure.  I was just thinking it could be arranged by the class itself to clean things up when the scope died

[23:19] <loops> rather than having to put a  LEAVE term.clean

[23:20] <loops> but it's not a big deal, was just a curiosity.

[23:22] <Xliff> gfldex: Isn't that die a compile time drop?

[23:22] <gfldex> Xliff: it is :)

[23:22] <Xliff> o_O

[23:22] <Xliff> OK! ;)

[23:23] <Geth> ¦ advent: 47b106ab16 | (Jonathan Worthington)++ (committed using GitHub Web editor) | perl6advent-2018/schedule

[23:23] <Geth> ¦ advent: Claim a spot

[23:23] <Geth> ¦ advent: review: https://github.com/perl6/advent/commit/47b106ab16

[23:24] <gfldex> Xliff: I already stashed it away in my riddles.p6 file :->

[23:24] <Xliff> gfldex: What were you expecting to happen? :)

[23:25] <Xliff> It looks like when class C is compiled, you die. You don't go any further.

[23:25] <Xliff> Compare that, to this:

[23:25] <Xliff> m: my class C { say "OOP!"; method die { say "ERP!" }; }; say "erp!"; my $c = C.new; { say "Hi"; my $d := $c; LEAVE $d.die };

[23:25] <camelia> rakudo-moar defc2c5a4: OUTPUT: «OOP!␤erp!␤Hi␤ERP!␤»

[23:26] <gfldex> Xliff: I was surpries to output anything. My guess was a big NOP.

[23:27] <Xliff> m: my class C { say "OOP!"; method die { say "ERP!" }; }; INIT { say "erp!" }; my $c = C.new; { say "Hi"; my $d := $c; LEAVE $d.die }; 

[23:27] <camelia> rakudo-moar defc2c5a4: OUTPUT: «erp!␤OOP!␤Hi␤ERP!␤»

[23:27] <gfldex> There are quite a few BEGIN-phasers in Perl 6 that are hard to spot. :)

[23:27] <Xliff> m: my class C { say "OOP!"; method die { say "ERP!" }; }; CHECK { say "erp!" }; my $c = C.new; { say "Hi"; my $d := $c; LEAVE $d.die }; 

[23:27] <camelia> rakudo-moar defc2c5a4: OUTPUT: «erp!␤OOP!␤Hi␤ERP!␤»

[23:28] <Xliff> m: my class C { die "ERP!" }; CHECK { say "erp!" }; my $c = C.new; { say "Hi"; my $d := $c; LEAVE $d.die }; 

[23:28] <camelia> rakudo-moar defc2c5a4: OUTPUT: «erp!␤ERP!␤  in block <unit> at <tmp> line 1␤␤»

[23:28] <jnthn> Class bodies run just where they are in the code. Role bodies run when the role is composed.

[23:28] <jnthn> m: say 1; class C { say 2 }; say 3

[23:28] <camelia> rakudo-moar defc2c5a4: OUTPUT: «1␤2␤3␤»

[23:29] <gfldex> Is that doced?

[23:29] <Xliff> jnthn: Assuming they aren't pre-empted by a phaser. ;)

[23:30] <gfldex> Looks like this is a ENODOC.

[23:30] * gfldex files issue

[23:32] <Xliff> Heh! .oO( ENODOC... LOL! )

[23:33] *** pecastro left
[23:34] <jnthn> No idea; role is the only exception to the rule, though. All other packages work as with `class`

[23:35] <jnthn> (Which is because a role is generic)

[23:39] *** Sound left
[23:40] *** kurahaupo joined
[23:41] *** p6bannerbot sets mode: +v kurahaupo

[23:41] <Xliff> jnthn: What would be the best way to implement a generic List?

[23:42] <Xliff> I've always understood generics as being tied to the object? The way Perl6 does Generics it almost sounds like I'd need to implement all of the List functions in the role and use that.

[23:42] <timotimo> roles can supply methods for you, too

[23:43] <Xliff> I know.

[23:43] <Xliff> My problem is that the information I want is tied to the class, not the role.

[23:43] <Xliff> So how can role methods apply to a type attribute?

[23:43] <timotimo> the role can access stuff from the class, though

[23:43] <timotimo> a type attribute?

[23:43] <Xliff> s/type/class/

[23:44] <timotimo> not sure what "apply to" means in this context?

[23:44] <Xliff> Say I haved a CStruct with a pointer in it. I want to be able to extract that as a native type, but I won't know what that is until run-time. How would that work?

[23:45] <Xliff> And yes... there are GLib applications to this. :)

[23:45] *** kurahaupo left
[23:45] <timotimo> you mean you want to have like a MyStruct[int] that will have a few attributes and then a native int attribute?

[23:47] <Xliff> Yeah.

[23:47] *** sena_kun left
[23:47] <timotimo> you'd put that attribute in the role, though i can see why you'd have a problem with that, since attribute order actually matters there

[23:47] <timotimo> so, you can put all attributes in the role

[23:48] <Xliff> For a repr('CStruct') ?

[23:48] <timotimo> i don't think roles have reprs

[23:48] <Xliff> Right, but in this case, MyStruct is currently CStruct

[23:49] <Xliff> Just with a generic Pointer as one of the attributes that can be any native type.

[23:49] <Xliff> Makes getting to the data a little problematic.

[23:49] <timotimo> you can give MyStruct a parameterize method that applies the role for you

[23:50] <Xliff> Got an example?

[23:52] <Xliff> Currently I'm doing this: https://github.com/Xliff/p6-GtkPlus/blob/master/lib/GTK/Compat/GList.pm6#L37

[23:52] <Xliff> But would really like it if I could do this using a parameterized role.

[23:53] <timotimo> m: class MyStruct is repr<CStruct> { method ^parameterize(|c) { say "parameterizing with arguments ", c.perl; } }; MyStruct[int]; MyStruct[uint16];

[23:53] <camelia> rakudo-moar defc2c5a4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Class MyStruct has no attributes, which is illegal with the CStruct representation.␤at <tmp>:1␤»

[23:53] <Xliff> Native type object is specified in new

[23:53] <timotimo> m: class MyStruct is repr<CStruct> { has int $.foo; method ^parameterize(|c) { say "parameterizing with arguments ", c.perl; } }; MyStruct[int]; MyStruct[uint16];

[23:53] <camelia> rakudo-moar defc2c5a4: OUTPUT: «parameterizing with arguments \(MyStruct, int)␤WARNINGS for <tmp>:␤parameterizing with arguments \(MyStruct, uint16)␤Useless use of constant integer MyStruct[uint16] in sink context (line 1)␤Useless use of constant integer MyStruct[int] in sin…»

[23:53] <timotimo> where in the struct is the attribute that can have different native types?

[23:54] <Xliff> $.data

[23:54] *** clarkema left
[23:54] <timotimo> i don't see a $.data there

[23:55] <Xliff> Yeah. Here's the def: https://github.com/Xliff/p6-GtkPlus/blob/master/lib/GTK/Compat/Types.pm6#L112

[23:55] <timotimo> so what you want is actually a GList[int] or GList[num] or something like that?

[23:55] <Xliff> Yeah.

[23:56] <timotimo> that's going to be a bit more difficult, hmm.

[23:56] <Xliff> Heh. Yeah. Tell me about it! :)

[23:57] <timotimo> however, since you're already accessing it via accessors anyway, you can only mix in the accessor via the role

[23:57] <Xliff> Right. That was my initial thought. I ended up just passing the type object in new

[23:57] <timotimo> so mix in something like "role DataOfType[Type] { method data(--> Type) { return nativecast($!data, Pointer[Type]) } }

[23:57] <timotimo> "

[23:58] <Xliff> ....

[23:58] <Xliff>  /o\

[23:58] <Xliff> That makes sense. Thanks!

[23:58] <timotimo> YW :)

[23:59] <Xliff> $.data would then need to be $!data, then.

[23:59] <Xliff> Or can role methods override class methods?

[23:59] <timotimo> they can

