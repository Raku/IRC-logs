[00:00] *** comborico1611 joined
[00:08] <stmuk> potentially useful reddit thread outside the perl group

[00:08] *** Xliff_ left
[00:08] <stmuk> https://www.reddit.com/r/programming/comments/7suzl7/brand_new_language_installer_for_language_that/

[00:10] *** cdg joined
[00:11] <stmuk> considering adding Perl5::Inline installation and get learnperl6.p6 support

[00:12] *** geraud left
[00:12] <Geth> ¦ ecosystem: ac775f3342 | (Aleks-Daniel Jakimenko-Aleksejev)++ | META.list

[00:12] <Geth> ¦ ecosystem: Fix the link (META.info → META6.json)

[00:12] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/ac775f3342

[00:16] <Geth> ¦ ecosystem: 6872c0c834 | (Aleks-Daniel Jakimenko-Aleksejev)++ | META.list

[00:16] <Geth> ¦ ecosystem: Fix more links

[00:16] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/6872c0c834

[00:18] *** trnh left
[00:30] *** markong left
[00:32] *** nativecallable6 joined
[00:32] *** bloatable6 joined
[00:32] *** coverable6 joined
[00:32] *** reportable6 joined
[00:32] *** benchable6 joined
[00:32] *** statisfiable6 joined
[00:34] *** committable6 joined
[00:34] *** bloatable6 left
[00:34] *** statisfiable6 left
[00:35] *** bloatable6 joined
[00:35] *** statisfiable6 joined
[00:35] *** bloatable6 left
[00:35] *** bisectable6 joined
[00:36] <AlexDaniel> e: say 42

[00:36] <AlexDaniel> c: HEAD say 42

[00:36] <committable6> AlexDaniel, ¦HEAD(a2499c9): «42␤»

[00:36] <AlexDaniel> heh, ipv6 connections just don't get through today :)

[00:37] <AlexDaniel> so only half of the bots are up

[00:37] <AlexDaniel> but at least this is working:

[00:37] <AlexDaniel> committable6: uptime

[00:37] <committable6> AlexDaniel, 2 minutes and 34 seconds, 244.320313MiB maxrss. This is Rakudo version 2018.01-29-ga2499c90f built on MoarVM version 2018.01 implementing Perl 6.c.

[00:37] <AlexDaniel> \o/

[00:37] <AlexDaniel> and the memory usage seems to be relatively low

[00:37] <AlexDaniel> maybe the issue is gone

[00:38] <AlexDaniel> committable6: uptime

[00:38] <committable6> AlexDaniel, 3 minutes and 21 seconds, 244.65625MiB maxrss. This is Rakudo version 2018.01-29-ga2499c90f built on MoarVM version 2018.01 implementing Perl 6.c.

[00:38] <AlexDaniel> hmmmmmm…

[00:38] <AlexDaniel> ok maybe not, seems to be growing a little…

[00:38] <AlexDaniel> committable6: uptime

[00:38] <committable6> AlexDaniel, 3 minutes and 44 seconds, 244.796875MiB maxrss. This is Rakudo version 2018.01-29-ga2499c90f built on MoarVM version 2018.01 implementing Perl 6.c.

[00:38] <AlexDaniel> :S

[00:43] <AlexDaniel> bisectable6: say 42

[00:44] <bisectable6> AlexDaniel, On both starting points (old=2015.12 new=a2499c9) the exit code is 0 and the output is identical as well

[00:44] <bisectable6> AlexDaniel, Output on both points: «42␤»

[00:44] <AlexDaniel> committable6: uptime

[00:44] <committable6> AlexDaniel, 9 minutes and 31 seconds, 245.238281MiB maxrss. This is Rakudo version 2018.01-29-ga2499c90f built on MoarVM version 2018.01 implementing Perl 6.c.

[00:44] <AlexDaniel> yea that's not right

[00:44] <AlexDaniel> anyway, goodnight o/

[00:45] <stmuk> nite

[00:45] *** lookatme joined
[01:17] *** aborazmeh joined
[01:17] *** aborazmeh left
[01:17] *** aborazmeh joined
[01:21] *** cdg left
[01:32] *** cdg joined
[01:36] *** cdg left
[01:42] *** cdg joined
[01:48] *** zacts left
[02:00] *** comborico1611 left
[02:06] *** Xliff joined
[02:13] *** eliasr left
[02:13] *** dorothyw is now known as lisbeths

[02:19] *** Merfont left
[02:19] *** Merfont joined
[02:31] *** giraffe joined
[02:33] *** astj joined
[02:44] *** aborazmeh left
[02:46] *** ilbot3 left
[02:51] *** Sgeo left
[02:53] *** itaipu left
[02:56] *** ilbot3 joined
[02:56] *** ChanServ sets mode: +v ilbot3

[02:56] *** Sgeo joined
[03:08] *** ggoebel left
[03:50] *** raiph joined
[03:51] *** khisanth_ left
[04:02] *** KDr2 joined
[04:07] *** khisanth_ joined
[04:18] *** cdg left
[04:19] *** cdg joined
[04:23] *** cdg left
[04:24] *** raiph left
[04:28] *** Cabanossi left
[04:30] *** Cabanossi joined
[04:40] *** cdg joined
[04:45] *** cdg left
[04:52] *** wamba joined
[05:05] *** shinobi-cl joined
[05:05] <shinobi-cl> hi all.....

[05:07] <shinobi-cl> lets say that i have an array with 2 regexes, and i want to use these 2 to match elements in an array... Is there a perl6-ish way to do it (like, in parallel)?

[05:12] *** aindilis left
[05:13] <shinobi-cl> something like this... 

[05:13] <shinobi-cl> m: my Regex @rxs = (rx/3/, rx/2/); say @rxs.perl; my @elems = (1, 2, 3, 10, 11, 12, 13, 21, 22, 23); my @found = grep { rx/3|2/ }, :v, @elems; say @found.perl;

[05:13] <camelia> rakudo-moar a2499c90f: OUTPUT: «Array[Regex].new(rx/3/, rx/2/)␤[2, 3, 12, 13, 21, 22, 23]␤»

[05:13] <shinobi-cl> but written like this: 

[05:13] <shinobi-cl> m: my Regex @rxs = (rx/3/, rx/2/); say @rxs.perl; my @elems = (1, 2, 3, 10, 11, 12, 13, 21, 22, 23); my @found = grep { @rxs }, :v, @elems; say @found.perl;

[05:13] <camelia> rakudo-moar a2499c90f: OUTPUT: «Array[Regex].new(rx/3/, rx/2/)␤[1, 2, 3, 10, 11, 12, 13, 21, 22, 23]␤»

[05:16] <shinobi-cl> nevermind... i was almost obvious now that i think about it....

[05:16] <shinobi-cl> m: my Regex @rxs = (rx/3/, rx/2/); say @rxs.perl; my @elems = (1, 2, 3, 10, 11, 12, 13, 21, 22, 23); my @found = grep { any(@rxs) }, :v, @elems; say @found.perl;

[05:16] <camelia> rakudo-moar a2499c90f: OUTPUT: «Array[Regex].new(rx/3/, rx/2/)␤[2, 3, 12, 13, 21, 22, 23]␤»

[05:18] <Xliff> Yeah, I was about to suggest junctions.

[05:18] <yoleaux> 19 Jan 2018 08:14Z <lizmat> Xliff: no, not as far as I know

[05:19] <Xliff>  m: my Regex @rxs = (rx/3/, rx/2/); say @rxs.perl; my @elems = (1, 2, 3, 10, 11, 12, 13, 21, 22, 23); my @found = @elems.any ~~ @rxs.any; @found.perl.say

[05:19] <camelia> rakudo-moar a2499c90f: OUTPUT: «Array[Regex].new(rx/3/, rx/2/)␤[Bool::True]␤»

[05:20] <Xliff> I think your grep is the right way to go since I only get a boolean return.

[05:21] <Xliff>  m: my Regex @rxs = (rx/3/, rx/2/); say @rxs.perl; my @elems = (1, 2, 3, 10, 11, 12, 13, 21, 22, 23); my @found = @elems.grep { @rxs.any }; @found.perl.say

[05:22] <camelia> rakudo-moar a2499c90f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unexpected block in infix position (missing statement control word before the expression?)␤at <tmp>:1␤------> 0313, 21, 22, 23); my @found = @elems.grep7⏏5 { @rxs.any }; @found.perl.say␤    …»

[05:22] <Xliff>  m: my Regex @rxs = (rx/3/, rx/2/); say @rxs.perl; my @elems = (1, 2, 3, 10, 11, 12, 13, 21, 22, 23); my @found = @elems.grep({ @rxs.any }); @found.perl.say

[05:22] <camelia> rakudo-moar a2499c90f: OUTPUT: «Array[Regex].new(rx/3/, rx/2/)␤[2, 3, 12, 13, 21, 22, 23]␤»

[05:23] <Xliff> Bears benchmarking, but choose your poison. :)

[05:27] *** khw left
[05:35] *** troys left
[05:38] *** BuildTheRobots left
[05:44] *** curan joined
[06:17] *** itaipu joined
[06:17] *** chakli left
[06:23] *** cdg joined
[06:28] *** cdg left
[06:35] *** itaipu left
[06:56] *** mniip left
[06:57] *** wamba left
[06:59] *** darutoko joined
[07:06] *** mniip joined
[07:24] *** cdg joined
[07:27] *** abraxxa joined
[07:29] *** cdg left
[07:45] *** wamba joined
[07:53] *** imcsk8 left
[07:56] *** espadrine left
[08:00] *** Ven`` joined
[08:01] *** domidumont left
[08:10] *** notostraca joined
[08:10] *** domidumont joined
[08:12] *** TEttinger left
[08:15] *** Ven`` left
[08:20] *** Ven`` joined
[08:25] <buggable> New CPAN upload: Sparrowform-0.0.13.tar.gz by MELEZHIK https://cpan.metacpan.org/authors/id/M/ME/MELEZHIK/Perl6/Sparrowform-0.0.13.tar.gz

[08:25] *** cdg joined
[08:30] *** cdg left
[08:33] <lookatme> m: my Regex @rxs = (rx/3/, rx/2/); say @rxs.perl; my @elems = (1, 2, 3, 10, 11, 12, 13, 21, 22, 23); my @found = grep / <@rxs> /, :v, @elems; say @found.perl;

[08:33] <camelia> rakudo-moar a2499c90f: OUTPUT: «Array[Regex].new(rx/3/, rx/2/)␤[2, 3, 12, 13, 21, 22, 23]␤»

[08:36] *** notostraca is now known as TEttinger

[08:49] <psch> m: my Regex @rxs = (rx/3/, rx/2/); say @rxs.perl; my @elems = (1, 2, 3, 10, 11, 12, 13, 21, 22, 23); my @found = @elems ~~ { gather { for @$_ { .take if /<@rxs>/ } }  }; say @found.perl; # /o\

[08:49] <camelia> rakudo-moar a2499c90f: OUTPUT: «Array[Regex].new(rx/3/, rx/2/)␤[2, 3, 12, 13, 21, 22, 23]␤»

[08:50] <psch> in case it has to be smartmatch i suppose

[08:51] *** eliasr joined
[08:53] <AlexDaniel> committable6: uptime

[08:53] <committable6> AlexDaniel, 8 hours, 19 minutes, and 12 seconds, 261.160156MiB maxrss. This is Rakudo version 2018.01-29-ga2499c90f built on MoarVM version 2018.01 implementing Perl 6.c.

[08:53] <AlexDaniel> oh?

[08:54] <AlexDaniel> that feels reasonable

[08:59] *** nativecallable6 left
[08:59] *** committable6 left
[08:59] *** bisectable6 left
[08:59] *** statisfiable6 left
[08:59] *** coverable6 left
[08:59] *** reportable6 left
[08:59] *** benchable6 left
[08:59] *** bloatable6 joined
[08:59] *** greppable6 joined
[08:59] *** quotable6 joined
[08:59] *** nativecallable6 joined
[08:59] *** reportable6 joined
[08:59] *** benchable6 joined
[08:59] *** bisectable6 joined
[08:59] *** statisfiable6 joined
[09:00] *** committable6 joined
[09:04] *** rindolf joined
[09:10] *** evalable6 joined
[09:11] *** evalable6 left
[09:11] *** evalable6 joined
[09:11] *** squashable6 joined
[09:14] *** zakharyas joined
[09:16] <Geth> ¦ whateverable: 92f37f0f5f | (Aleks-Daniel Jakimenko-Aleksejev)++ | services/whateverable@.service

[09:16] <Geth> ¦ whateverable: Update systemd service files

[09:16] <Geth> ¦ whateverable: 

[09:16] <Geth> ¦ whateverable: Feed the config using the new StandardInput=file:… systemd feature.

[09:16] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/92f37f0f5f

[09:16] <Geth> ¦ whateverable: 7f79d1d1d4 | (Aleks-Daniel Jakimenko-Aleksejev)++ | services/whateverable@.service

[09:16] <Geth> ¦ whateverable: Reduce the memory limit

[09:16] <Geth> ¦ whateverable: 

[09:16] <Geth> ¦ whateverable: 3G was a good limit for peak performance, but 3 × (the number of bots)

[09:16] <Geth> ¦ whateverable: does not scale if things are leaking.

[09:16] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/7f79d1d1d4

[09:19] *** nativecallable6 left
[09:19] *** quotable6 left
[09:19] *** reportable6 left
[09:19] *** statisfiable6 left
[09:19] *** greppable6 left
[09:19] *** benchable6 left
[09:19] *** bloatable6 left
[09:19] *** bisectable6 left
[09:19] *** nativecallable6 joined
[09:19] *** ChanServ sets mode: +v nativecallable6

[09:19] *** coverable6 joined
[09:19] *** bloatable6 joined
[09:19] *** quotable6 joined
[09:19] *** committable6 left
[09:19] *** bisectable6 joined
[09:19] *** ChanServ sets mode: +v bisectable6

[09:19] *** reportable6 joined
[09:19] *** releasable6 joined
[09:19] *** greppable6 joined
[09:19] *** benchable6 joined
[09:19] *** ChanServ sets mode: +v benchable6

[09:19] *** statisfiable6 joined
[09:20] *** committable6 joined
[09:20] *** lowbro joined
[09:20] *** lowbro left
[09:20] *** lowbro joined
[09:25] *** cdg joined
[09:30] *** scimon joined
[09:31] *** cdg left
[09:34] *** zakharyas left
[09:37] *** zakharyas joined
[09:55] <buggable> New CPAN upload: Sparrowform-0.0.14.tar.gz by MELEZHIK https://cpan.metacpan.org/authors/id/M/ME/MELEZHIK/Perl6/Sparrowform-0.0.14.tar.gz

[09:57] *** evalable6 left
[09:57] *** evalable6 joined
[09:57] *** ChanServ sets mode: +v evalable6

[09:59] *** chakli joined
[10:04] *** sena_kun joined
[10:09] *** chakli left
[10:09] *** chakli joined
[10:26] *** cdg joined
[10:28] *** Geth left
[10:32] *** cdg left
[10:33] *** Geth joined
[10:34] *** Merfont left
[10:34] *** aindilis joined
[10:38] *** Kaiepi joined
[10:40] <Xliff> .tell AlexDaniel Ran into another issue. It appears that [Z] will truncate according to the interior array of the smallest dimension.

[10:40] <yoleaux> Xliff: I'll pass your message to AlexDaniel.

[10:50] *** Geth left
[10:51] *** Geth joined
[10:57] *** jeromelanteri left
[11:02] <Xliff> .tell AlexDaniel So it now looks like this: https://gist.github.com/Xliff/daae42a5ca02e695ac8710e528fab297

[11:02] <yoleaux> Xliff: I'll pass your message to AlexDaniel.

[11:03] *** Kaiepi left
[11:03] *** chakli left
[11:04] *** chakli joined
[11:08] *** Kaiepi joined
[11:12] <Xliff> m: say so one(True, True)

[11:12] <camelia> rakudo-moar 1ee89b540: OUTPUT: «False␤»

[11:14] *** domidumont left
[11:18] <Xliff> (<A B C>,<D E>,<G>).>>map({ .elems }).max.say

[11:18] <Xliff> m: (<A B C>,<D E>,<G>).>>map({ .elems }).max.say

[11:18] <camelia> rakudo-moar 1ee89b540: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing dot on method call␤at <tmp>:1␤------> 3(<A B C>,<D E>,<G>).>>7⏏5map({ .elems }).max.say␤    expecting any of:␤        postfix␤»

[11:18] <Xliff> m: (<A B C>,<D E>,<G>).>>map({ *.elems }).max.say

[11:18] <camelia> rakudo-moar 1ee89b540: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing dot on method call␤at <tmp>:1␤------> 3(<A B C>,<D E>,<G>).>>7⏏5map({ *.elems }).max.say␤    expecting any of:␤        postfix␤»

[11:18] <Xliff> m: (<A B C>,<D E>,<G>).map({ *.elems }).max.say

[11:18] <camelia> rakudo-moar 1ee89b540: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed double closure; WhateverCode is already a closure without curlies, so either remove the curlies or use valid parameter syntax instead of *␤at <tmp>:1␤------> 3(<A B C>,<D E>,<G>).map({ *.…»

[11:18] <Xliff> m: (<A B C>,<D E>,<G>).map( *.elems ).max.say

[11:18] <camelia> rakudo-moar 1ee89b540: OUTPUT: «3␤»

[11:19] <Xliff> m: (<A B C Z>,<D E>,<G>).map( *.elems ).max.say

[11:19] <camelia> rakudo-moar 1ee89b540: OUTPUT: «4␤»

[11:19] *** chakli left
[11:19] <Xliff> ^^ Is there any way to parallelize that?

[11:19] <sjn> happy b-day, jnthn :)

[11:20] <lizmat> ah, yes, good point sjn!   jnthn++  (yet another year :-)

[11:21] <TEttinger> happy day of instantiation

[11:21] *** astj left
[11:24] *** pecastro joined
[11:25] *** Ven`` left
[11:25] *** astj joined
[11:25] <jnthn> Thanks, folks :-)

[11:28] *** shinobi-cl left
[11:29] <moritz> jnthn++!

[11:34] *** Kaiepi left
[11:34] *** Kaiepi joined
[11:35] *** Kaiepi left
[11:35] *** Kaiepi joined
[11:40] *** chakli joined
[11:48] *** zakharyas left
[11:52] <melezhik> Hi! Any documentation how to handle signals to processed in Perl6?

[11:52] <melezhik> processed => process

[11:52] <tadzik> as in: OS signals?

[11:53] <lizmat> signal(SIGINT).tap

[11:53] <tadzik> https://docs.perl6.org/type/Supply#index-entry-Signal it's here

[11:53] <Xliff> Another happy b-day for jnthn++

[11:53] <melezhik> yeah, OS signals ...

[11:53] <melezhik> will take a look, thanks

[11:53] <teatime> lizmat: damn that's sexy

[11:54] <tadzik> I'm mildly puzzled that you need to do Signal::.keys, and Signals.keys doesn't work. Why's that?

[11:54] <tadzik> ooh, happy birthday jnthn++!

[11:54] <moritz> because Signal is a type object

[11:54] <moritz> but the constants are elements in the namespace

[11:54] <tadzik> ah, makes sense

[11:55] <moritz> though I feel this a very technical explanation

[11:55] <AlexDaniel> melezhik: what about react/whenever example here? https://docs.perl6.org/type/Proc::Async

[11:55] <yoleaux> 10:40Z <Xliff> AlexDaniel: Ran into another issue. It appears that [Z] will truncate according to the interior array of the smallest dimension.

[11:55] <yoleaux> 11:02Z <Xliff> AlexDaniel: So it now looks like this: https://gist.github.com/Xliff/daae42a5ca02e695ac8710e528fab297

[11:56] <AlexDaniel> it should give an idea mayb

[11:56] <melezhik> AlexDaniel, thanks will try that as well

[11:57] <AlexDaniel> Xliff: regarding the truncation to the smallest dimension, have you seen `roundrobin`? https://docs.perl6.org/routine/roundrobin

[12:08] *** evalable6 left
[12:08] *** evalable6 joined
[12:10] *** xi- left
[12:11] *** xi- joined
[12:17] *** shinobi-cl joined
[12:17] *** KDr2 left
[12:17] <AlexDaniel> Xliff: *shrug* Maybe that's unrelated, I was just running by

[12:20] *** Ven`` joined
[12:25] <Xliff> AlexDaniel: Yeah, I saw roundrobin. It doesn't fill in the missing spaces properly.

[12:25] <AlexDaniel> Xliff: a demonstration of all that would be nice

[12:26] <Xliff> Yup. Want to include all that in the RFC

[12:26] <Xliff> Then  submit the finalized gist.

[12:26] <AlexDaniel> cool

[12:26] <Xliff> THEN ask to have it added to the right Role/Class

[12:27] <Xliff> The typing gave me a bit of trouble, sooo...

[12:27] <Xliff> You might have been right about checking for Positional/Iterable

[12:27] <Xliff> Also....

[12:27] <Xliff> m: <g>/^name.say

[12:27] <camelia> rakudo-moar 1ee89b540: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    name used at line 1␤␤»

[12:27] <Xliff> m: <G>.^name.say

[12:27] <camelia> rakudo-moar 1ee89b540: OUTPUT: «Str␤»

[12:27] <Xliff> m: <G>.List.^name.say

[12:27] <camelia> rakudo-moar 1ee89b540: OUTPUT: «List␤»

[12:28] <Xliff> m: <G A>.^name.say

[12:28] <camelia> rakudo-moar 1ee89b540: OUTPUT: «List␤»

[12:28] <Xliff> That little biddy almost gave me a stroke.

[12:30] <AlexDaniel> but that's just the < > notation and it's unrelated to Z

[12:30] <Xliff> y

[12:31] *** wamba left
[12:31] <Xliff> It was a gotcha I didn't expect when writing the tests.

[12:33] <AlexDaniel> Xliff: speaking of strokes: https://github.com/rakudo/rakudo/issues/1409

[12:36] <Xliff> *groan*

[12:38] <Xliff> Come to think about it, I should probably stop running Perl6 on a 32-bit VM. :q

[12:39] <Xliff> m: 'say (roundrobin ((1, 2, 3), (4, 5), (6, 7, 8, 9)))

[12:39] <camelia> rakudo-moar 1ee89b540: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)␤at <tmp>:1␤------> 3robin ((1, 2, 3), (4, 5), (6, 7, 8, 9)))7⏏5<EOL>␤    expecting …»

[12:39] <Xliff> m: say (roundrobin ((1, 2, 3), (4, 5), (6, 7, 8, 9)))

[12:39] <camelia> rakudo-moar 1ee89b540: OUTPUT: «((1 4 6) (2 5 7) (3 8) (9))␤»

[12:39] <Xliff> m: ((1, 2, 3), (4, 5), (6, 7, 8, 9))).roundrobin.say

[12:39] <camelia> rakudo-moar 1ee89b540: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unexpected closing bracket␤at <tmp>:1␤------> 3((1, 2, 3), (4, 5), (6, 7, 8, 9))7⏏5).roundrobin.say␤»

[12:39] <Xliff> m: ((1, 2, 3), (4, 5), (6, 7, 8, 9)).roundrobin.say

[12:39] <camelia> rakudo-moar 1ee89b540: OUTPUT: «No such method 'roundrobin' for invocant of type 'List'␤  in block <unit> at <tmp> line 1␤␤»

[12:39] <Xliff> roundrobin not available in method form?

[12:41] <AlexDaniel> docs says that it's a method

[12:41] <AlexDaniel> so file a bug report plz

[12:44] *** itaipu joined
[12:45] <melezhik> Terminal::Print , which I use define signal handler - https://github.com/ab5tract/Terminal-Print/blob/master/lib/Terminal/Print.pm6#L95-L99

[12:46] <melezhik> which in conflict with my one 

[12:46] <melezhik> is ot ok, to thow "die" in signal handler?

[12:47] <lizmat> well, not sure about that

[12:47] <lizmat> but if you're intention is to leave the process without further ado

[12:48] <lizmat> then "note 'Encountered a SIGINT. Cleaning up the screen and exiting...'; exit"

[12:48] <lizmat> would be faster

[12:49] <melezhik> what do you mean lizmat?

[12:49] <melezhik> I want to have my own signal handler, which does some clean up work ... 

[12:49] <lizmat> that's fine

[12:50] <lizmat> but inside the signal handler, you don't need to "die", you can just "exit" (if the intent is to have an untrappable exception_

[12:50] <lizmat> )

[12:50] <melezhik> now , it seems impossible when I use Terminal::Print

[12:50] <melezhik> or I miss something )))

[12:51] <lizmat> ah, I thought Terminal::Print was yours  :-)

[12:51] <melezhik> probably because of "die" inside Termimal::Print ....

[12:51] <melezhik> not mine

[12:51] <melezhik> )))

[12:51] <lizmat> hmmm... interesting issue  hmmm...

[12:51] <lizmat> well, if you need to do cleanup, you *could* put that in an END block

[12:52] <lizmat> and have the signal handler just set a flag that it needs to do it

[12:52] <lizmat> even on "exit" will all the END handlers be done, and "exit" inside an END block won't actually exit

[12:53] *** Ven`` left
[12:53] <lizmat> but I guess we *do* need signal(SIGINT) supplies to work together somehow

[12:53] <lizmat> ensure that they're *all* run

[12:53] <melezhik> lizmat: END does the trick

[12:53] <melezhik> thanks

[12:54] *** domidumont joined
[12:54] *** torbjorn left
[12:56] <melezhik> "but I guess we *do* need signal(SIGINT) supplies to work together somehow. ensure that they're *all* run" yeah, that's the idea

[12:59] *** Praise- joined
[12:59] *** Praise left
[13:01] <melezhik> lizmat: should we fill a ticket on this?

[13:01] <lizmat> yes, please

[13:01] <melezhik> will do

[13:02] <melezhik> where?

[13:02] <lizmat> rakudo issue, please

[13:02] <melezhik> https://github.com/rakudo/rakudo/issues ?

[13:02] *** shinobi-cl left
[13:02] <lizmat> yup

[13:06] *** torbjorn joined
[13:15] <buggable> New CPAN upload: Sparrowform-0.0.15.tar.gz by MELEZHIK https://cpan.metacpan.org/authors/id/M/ME/MELEZHIK/Perl6/Sparrowform-0.0.15.tar.gz

[13:15] *** Ven`` joined
[13:16] <melezhik> lizmat: please take a look - https://github.com/rakudo/rakudo/issues/1445

[13:16] * lizmat does

[13:16] *** Ven` joined
[13:17] <melezhik> hopefully I have not muddled anything up

[13:17] <melezhik> at least this is how *I* see it

[13:18] *** abraxxa left
[13:19] * lizmat has commented

[13:19] *** astj left
[13:19] *** Ven`` left
[13:27] *** araraloren joined
[13:32] <araraloren> m: class U { constant M = 22; }; say U::M;

[13:32] <camelia> rakudo-moar 1ee89b540: OUTPUT: «22␤»

[13:32] <araraloren> Hi, is it possible add a constant to a class manually, like add class through `Metamodel::ClassHOW` ?

[13:37] <jnthn> Those aren't much to do with the class at all, they're just installed in the package

[13:37] <jnthn> m: class U { BEGIN U::<M> := 22; }; say U::M;

[13:37] <camelia> rakudo-moar 1ee89b540: OUTPUT: «22␤»

[13:40] *** wamba joined
[13:40] <araraloren> oh，is it possible install a constant manually ?

[13:41] <jnthn> I just showed you how

[13:42] * masak .oO( no no -- manually, by blowing bits into the front panel )

[13:42] <jnthn> :P

[13:42] <jnthn> Oh, if you're using the MOP, then it's just $the-type-object.WHO<M> := 22;

[13:43] <araraloren> Hmm, I will try later thanks

[13:43] *** mniip left
[13:43] *** mniip joined
[13:45] *** astj joined
[13:47] *** Ven` left
[13:49] *** astj left
[13:52] *** wamba left
[14:01] *** Ven`` joined
[14:01] <araraloren> m: class C { }; C.WHO<M> := 22; say C::M; # It try to find &M ? 

[14:01] <camelia> rakudo-moar 1ee89b540: OUTPUT: «Could not find symbol '&M'␤  in block <unit> at <tmp> line 1␤␤»

[14:02] <araraloren> m: class C { }; C.WHO<&M> := { 22 }; say C::M; 

[14:02] <camelia> rakudo-moar 1ee89b540: OUTPUT: «22␤»

[14:03] <jnthn> araraloren: BEGIN matters

[14:04] <jnthn> Because the decision of how C::M is compiled happens at compile time

[14:04] *** cdg joined
[14:04] <lizmat> m: class C { }; BEGIN C.WHO<M> := 22; say C::M

[14:04] <camelia> rakudo-moar 1ee89b540: OUTPUT: «22␤»

[14:04] <araraloren> Oh, I see

[14:05] <lizmat> fwiw, I think the error message is LTA

[14:06] <jnthn> It should really be a compiler time error if the symbol isn't there, not a runtime one

[14:06] <jnthn> *compile

[14:06] <jnthn> STD had it that way, and we missed doing that in Rakudo

[14:06] <jnthn> Thankfully, it's a compilation decision, so we can change it in 6.d

[14:07] *** zakharyas joined
[14:08] *** cdg left
[14:08] *** cdg joined
[14:10] *** curan left
[14:16] <[Coke]> stmuk: I kind of agree with mst about that project. Doesn't seem at all constructive.

[14:17] <[Coke]> ... and now I can't remember if it was this window or not.

[14:22] *** Actualeyes joined
[14:31] *** pmurias joined
[14:36] <pmurias> stmuk: re triggering snowflakes on the installer page, mst does have a valid point that doing that without a reason doesn't really make sense as they are a welcome part of the community

[14:41] *** Ven`` left
[14:50] *** Ven`` joined
[14:50] *** astj joined
[14:55] *** astj left
[15:05] *** markong joined
[15:18] *** wamba joined
[15:19] <timotimo> who wants to write a plugin for irclog.perlgeek.de that translates the block diagrams back into actual graphics? %)

[15:21] <AlexDaniel> timotimo: block diagrams?

[15:22] <timotimo> https://twitter.com/zoffix/status/956907058049306624

[15:28] *** troys joined
[15:30] *** Ven`` left
[15:30] *** BuildTheRobots joined
[15:33] *** khw joined
[15:34] *** mr_ron joined
[15:35] <buggable> New CPAN upload: IO-Socket-Async-SSL-0.6.tar.gz by JNTHN https://cpan.metacpan.org/authors/id/J/JN/JNTHN/Perl6/IO-Socket-Async-SSL-0.6.tar.gz

[15:35] <buggable> New CPAN upload: IO-Socket-Async-SSL-0.6.tar.gz by JNTHN https://cpan.metacpan.org/authors/id/J/JN/JNTHN/Perl6/IO-Socket-Async-SSL-0.6.tar.gz

[15:36] <jkramer> To whom it may concern, the WHY link at the very end of this page is broken: https://docs.perl6.org/language/functions

[15:36] *** Ven`` joined
[15:39] *** ChoHag left
[15:40] <Geth> ¦ doc: de361ccf0e | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/functions.pod6

[15:40] <Geth> ¦ doc: Fix broken WHY link

[15:40] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/de361ccf0e

[15:40] <synopsebot> Link: https://doc.perl6.org/language/functions

[15:41] <Geth> ¦ doc: 40bc04dbd3 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/functions.pod6

[15:41] <Geth> ¦ doc: Add missing period

[15:41] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/40bc04dbd3

[15:42] <jkramer> \o/

[16:07] *** committable6 left
[16:07] *** quotable6 left
[16:07] *** releasable6 left
[16:07] *** coverable6 left
[16:07] *** squashable6 left
[16:07] *** nativecallable6 left
[16:07] *** bisectable6 left
[16:07] *** benchable6 left
[16:07] *** evalable6 left
[16:07] *** bloatable6 left
[16:07] *** reportable6 left
[16:07] *** greppable6 left
[16:07] *** statisfiable6 left
[16:08] *** coverable6 joined
[16:08] *** nativecallable6 joined
[16:08] *** quotable6 joined
[16:08] *** ChanServ sets mode: +v coverable6

[16:08] *** ChanServ sets mode: +v nativecallable6

[16:08] *** ChanServ sets mode: +v quotable6

[16:08] *** greppable6 joined
[16:08] *** committable6 joined
[16:08] *** evalable6 joined
[16:08] *** bisectable6 joined
[16:08] *** benchable6 joined
[16:08] *** releasable6 joined
[16:08] *** ChanServ sets mode: +v bisectable6

[16:08] *** ChanServ sets mode: +v benchable6

[16:08] *** ChanServ sets mode: +v releasable6

[16:08] *** reportable6 joined
[16:08] *** bloatable6 joined
[16:08] *** ChanServ sets mode: +v bloatable6

[16:08] *** squashable6 joined
[16:08] *** ChanServ sets mode: +v squashable6

[16:08] *** statisfiable6 joined
[16:08] *** Ven`` left
[16:10] * AlexDaniel slaps whateverables

[16:10] <AlexDaniel> that massive suicide was unnecessary

[16:11] *** pmurias left
[16:12] <El_Che> I woudn't consider mst a snowflake and the alt-right terminology isn't helping anyone. Enough drama around instead, why rekindle the fire?

[16:13] <AlexDaniel> ooooh I know why whateverables did that…

[16:15] *** araraloren left
[16:16] <mspo> snowflakes?

[16:17] <El_Che> mspo: let's ignore for now :)

[16:17] *** pmurias joined
[16:21] <Geth> ¦ whateverable: b5ad361756 | (Aleks-Daniel Jakimenko-Aleksejev)++ | services/whateverable@.service

[16:21] <Geth> ¦ whateverable: Temporarily increase the watchdog timeout

[16:21] <Geth> ¦ whateverable: 

[16:21] <Geth> ¦ whateverable: The way it works is a workaround, see issue #276 for more info.

[16:21] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/b5ad361756

[16:21] <AlexDaniel> ↑ that should prevent the bots from doing that again…

[16:21] <AlexDaniel> as long as somebody says something every 60 minutes :D

[16:22] <teatime> lol

[16:23] <Geth> ¦ whateverable: a6d5df72e8 | (Aleks-Daniel Jakimenko-Aleksejev)++ | services/whateverable@.service

[16:23] <Geth> ¦ whateverable: Mention the ticket id

[16:23] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/a6d5df72e8

[16:26] <AlexDaniel> on any channel by the way

[16:28] *** aindilis` joined
[16:29] *** Ven`` joined
[16:30] <timotimo> so, put a bot into #whateverable that just says something every 30 minutes?

[16:31] * AlexDaniel *sad facepalm*

[16:31] <geekosaur> who watches the watchbots?

[16:32] <AlexDaniel> timotimo: I have phone notifications and things like that for the channel

[16:32] <AlexDaniel> not exactly the best idea but I like the way you think :D

[16:32] *** aindilis left
[16:33] <timotimo> :D

[16:39] <El_Che> timotimo: is that defined?

[16:42] <AlexDaniel> timotimo: we'll know once we run it

[16:42] <timotimo> the what now?

[16:42] <El_Che> :D, :U :)

[16:42] <timotimo> oooh

[16:42] <ilmari> :U looks like a duckface

[16:42] <El_Che> :)

[16:44] <AlexDaniel> Maybe someone should add a proposal for 😃 as an alternative to :D to this page https://github.com/rakudo/rakudo/wiki/save-me-from-texas

[16:44] <El_Che> hehe

[16:44] <jkramer> Or use Ü, it's basically a vertical :D

[16:46] *** Ven`` left
[16:47] *** pmurias left
[16:47] <AlexDaniel> ⸦̈

[16:48] *** domidumont1 joined
[16:48] <AlexDaniel> ⊂̈

[16:48] *** wamba left
[16:48] *** pmurias joined
[16:48] <mspo> AlexDaniel: you could animate those two into a talking mouth

[16:49] *** Sgeo_ joined
[16:49] *** chakli left
[16:49] *** chakli_ joined
[16:50] <jkramer> Next stop: animated gifs as operators and identifiers

[16:51] *** domidumont left
[16:52] *** Sgeo left
[16:52] <b2gills> for |('⸦̈','⊂̈') xx * { print "\r",$_,'    '; sleep ((1..4)X/10).roll }

[16:52] <AlexDaniel> I think all we need is a text editor with animated emojis

[16:52] *** chakli joined
[16:53] <mspo> b2gills: looks great!

[16:54] <jkramer> The first character doesn't work with my terminal, but using ö and Ö looks nice too :)

[16:55] <mspo> jkramer: that would have a nice totoro effect

[16:56] <chakli> m: [[1,2],[2,3],[4,5]].map({ $_.map({say $_;}); })

[16:56] <chakli> p6: [[1,2],[2,3],[4,5]].map({ $_.map({say $_;}); })

[16:56] <camelia> rakudo-moar 6fa1e78f8: ( no output )

[16:56] <jkramer> Now make it take some text as argument and let it scroll through while the Ö is talking :)

[16:57] <jkramer> I would use that as cat/less replacement a few times before I'd get annoyed

[16:57] <chakli> why doesn't that program say anything?

[16:58] <AlexDaniel> m: say WHAT [[1,2],[2,3],[4,5]].map({ $_.map({say $_;}); })

[16:58] <camelia> rakudo-moar 6fa1e78f8: OUTPUT: «(Seq)␤»

[16:58] *** domidumont1 left
[16:58] <jnthn> Because map is lazy, and nothing happens to casue evaluation of the inner Map

[16:58] <pmurias> jkramer: I wouldn't be surprised if unicode starts using animated gifs at some point

[16:58] <AlexDaniel> m: eager [[1,2],[2,3],[4,5]].map({ $_.map({say $_;}); })

[16:58] <camelia> rakudo-moar 6fa1e78f8: ( no output )

[16:58] <AlexDaniel> m: eager [[1,2],[2,3],[4,5]].map({ eager $_.map({say $_;}); })

[16:58] <camelia> rakudo-moar 6fa1e78f8: OUTPUT: «1␤2␤2␤3␤4␤5␤»

[16:58] <jnthn> The otuer one is fine, it's in sink context

[16:59] <jnthn> *outer

[16:59] <b2gills> m: [[1,2],[2,3],[4,5]].map({ $_.map({say $_;}); Nil }); # the inner map wasn't sunk

[16:59] <camelia> rakudo-moar 6fa1e78f8: OUTPUT: «1␤2␤2␤3␤4␤5␤»

[16:59] <AlexDaniel> m: [[1,2],[2,3],[4,5]].map({ eager $_.map({say $_;}); })

[16:59] <camelia> rakudo-moar 6fa1e78f8: OUTPUT: «1␤2␤2␤3␤4␤5␤»

[17:00] <gfldex> m: [[1,2],[2,3],[4,5]]».list».say

[17:00] <camelia> rakudo-moar 6fa1e78f8: OUTPUT: «1␤2␤2␤3␤4␤5␤»

[17:00] <gfldex> this is potentially out of order tho

[17:02] *** mahafyi joined
[17:03] *** domidumont joined
[17:06] <chakli> Thanks got it :)

[17:06] *** setty1 joined
[17:08] <jkramer> Here you go, animated talking cat :) http://dpaste.com/2HMDWFZ

[17:08] <mspo> asciinema it

[17:10] <jkramer> https://asciinema.org/a/PqxkmrE2EVQuuCSrXX44SFpyO

[17:11] *** domidumont left
[17:11] *** zakharyas left
[17:12] <stmuk> jkramer: I get an error "Cannot shift from an empty Array" on termination

[17:18] <jkramer> Huh, I didn't bother to wait for it to finish tbh :D Anyway, it's time for Feierabendbier here so I gotta go, have a nice weekend :)

[17:24] <stmuk> I'll just do a sneaky C-c like the film! :)

[17:26] *** mahafyi_ joined
[17:27] *** scimon left
[17:29] *** mahafyi left
[17:29] *** mahafyi_ is now known as mahafyi

[17:39] *** domidumont joined
[17:53] *** domidumont left
[17:53] *** domidumont joined
[17:53] *** itaipu left
[18:20] *** astj joined
[18:20] <mspo> jkramer: lol

[18:25] *** astj left
[18:30] *** darutoko left
[18:51] *** sena_kun left
[18:58] *** imcsk8 joined
[19:01] *** pecastro left
[19:10] *** cdg left
[19:13] *** Sgeo_ left
[19:13] *** Sgeo_ joined
[19:23] *** domidumont left
[19:24] *** konsolebox left
[19:31] *** konsolebox joined
[19:34] <teatime> are there any programming languages that are more expressive (in the technical sense) than any turing-complete language

[19:34] <teatime> or are all programming languages equally expressive (in the technical sense)

[19:36] *** konsolebox left
[19:36] <mspo> what is the technical definition of expressive?

[19:37] *** konsolebox joined
[19:37] *** espadrine_ joined
[19:37] <teatime> https://en.wikipedia.org/wiki/Expressive_power_(computer_science)

[19:38] *** mcmillhj joined
[19:38] <teatime> my question may not be well-formed.

[19:39] <DrForr> .tell jnthn Purely anecdotal, but cro might be segfaulting on my machine when there's no handler for a given URL.

[19:39] <yoleaux> DrForr: I'll pass your message to jnthn.

[19:39] <geekosaur> expressiveness is not entirely well formed

[19:40] <geekosaur> except in certain limited soituations, e.g. the chomsky hierarchy of grammars

[19:41] *** trnh joined
[19:42] <teatime> hmm.  fair enough I guess.

[19:46] <DrForr> .tell jnthn rebuilding bundle.js might be a trigger as well. That's fair though, lots of content and it *really* should be handled via ye olde reverser proxy.

[19:46] <yoleaux> DrForr: I'll pass your message to jnthn.

[19:53] *** zakharyas joined
[19:55] *** Kaiepi left
[19:56] *** Kaiepi joined
[19:57] *** mcmillhj left
[20:01] *** trnh left
[20:01] *** Kaiepi left
[20:01] *** Kaiepi joined
[20:03] *** pecastro joined
[20:04] *** trnh joined
[20:06] <teatime> geekosaur: so am I right in thinking statements like the following are very loose and not strictly, technically true?  "In any Turing complete language, it is possible to write any computer program, so in a very rigorous sense nearly all programming languages are equally capable."

[20:08] <geekosaur> expressiveness doesnt qiuite mean that

[20:08] <geekosaur> I can write the same program in Haskell or in BASIC or in PHP

[20:09] <geekosaur> which one is it easier / more idiomatic to write it in? that is expressiveness... and it tends to be domain specific

[20:09] <teatime> that is the non-technical meaning of expressive

[20:09] <moritz> also this ignores the fact that some languages offer I/O capabilities that others don't; while QBASIC is turing complete, you can't make arbitrary syscalls with it

[20:09] <geekosaur> but yes, any Turing-complete langauge can express the same programs, and this can be proven

[20:09] <teatime> moritz: that's what I was thinking of

[20:10] <moritz> but that's not what people mean when they talk about expressiveness

[20:10] <teatime> right

[20:10] <moritz> basically it's how many instructions you need to accomplish something

[20:10] <teatime> but nonetheless makes the statement "You can write the same program in any turing-complete programming language" technically false

[20:11] <moritz> well, in computer science, a "program" also has a very narrow definition that doesn't include such I/O stuff

[20:11] <teatime> maybe it should be "algorithm"

[20:11] <moritz> typically you start with a model, like that of an automaton that can read from and write to infinite tapes

[20:12] <moritz> and within that model, you can prove that a touring machine has the same capabilities as lamba calculus, for example

[20:12] *** zakharyas left
[20:14] <teatime> I guess what I was really wondering is, do such facts actually map and retain their truth value, for practical purposes and programming languages.

[20:14] <teatime> which you answered.

[20:14] *** trnh left
[20:15] *** Kaiepi left
[20:15] <buggable> New CPAN upload: P5substr-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5substr-0.0.1.tar.gz

[20:15] *** Kaiepi joined
[20:18] <lizmat> *phew* some weird shit with P5 substr and negative offsets / lengths

[20:25] *** patrickz joined
[20:27] <patrickz> Hey! Is there an easy way to get a rakudo build to take less RAM? I'm currently hitting limits of my server provider...

[20:28] <El_Che> patrickz: use a OS package?

[20:28] <patrickz> It's not a root server...

[20:28] <El_Che> old school :)

[20:29] <El_Che> I would build it locally and restricted to a path eg /$HOME/lib/rakudo and scp the files

[20:29] <lizmat> patrickz: there was some talk about reducing the memory footprint of precompilation the other day, but sadly, that has not materialized

[20:29] <mspo> patrickz: I had to add swap too

[20:29] <El_Che> rakudo is not relocable so home has to be identical on both machines

[20:29] <teatime> I have had excellent luck w/ adding swap

[20:29] <teatime> makes the build possible, but doesn't make it take forever / thrash a lot

[20:30] <mspo> how often will you be building rakudo itself?

[20:30] <El_Che> can you add swap without root?

[20:30] <teatime> no

[20:30] <El_Che> my old unix spirit says noooooooooooooooo

[20:30] <patrickz> Hm. I'm not hitting the machine limits, but quota. So swap is no help. I'll ask them if a one-time build run is ok (and I get a temporary quota relief)...

[20:31] <mspo> oh I see

[20:31] <El_Che> patrickz: my solution is straight forward

[20:32] <patrickz> It's the same machine type, so that's a start :-)

[20:32] <El_Che> to be sure launch a VM/container with the same OS and release

[20:33] <El_Che> however als long they are both amd64/x64 it will work

[20:43] *** dfarrell joined
[20:45] *** pecastro left
[20:46] <dfarrell> hey sixers, I'm writing an article about p5 threads, and I wanted to mention the p6 threading model. Is it still the case that each thread maps 1:1 with an OS thread, and 6.d will introduce an M:N threading model?

[20:47] <gfldex> dfarrell: M:N is in already

[20:47] <dfarrell> gfldex: Do you know what version it was released in?

[20:47] <jnthn> dfarrell: One instance of the Thread class does map directly to an OS thread, so if you need that level of control you can get it.

[20:47] <yoleaux> 19:39Z <DrForr> jnthn: Purely anecdotal, but cro might be segfaulting on my machine when there's no handler for a given URL.

[20:47] <yoleaux> 19:46Z <DrForr> jnthn: rebuilding bundle.js might be a trigger as well. That's fair though, lots of content and it *really* should be handled via ye olde reverser proxy.

[20:49] <jnthn> dfarrell: But using Thread is not typical. Most of the time one would set off code running on a thread using `start`, or set up something to react to events. These are given to a scheduler, which does the M:N thing.

[20:49] <El_Che> dfarrell: perl.com article?

[20:49] <jnthn> So, typical use of Perl 6 involves the M:N model. That's been the case ever since the 6.c release.

[20:50] <dfarrell> El_Che: yah

[20:50] <El_Che> dfarrell++

[20:50] <dfarrell> jnthn: got it

[20:50] <dfarrell> thanks everybody for your input!

[20:51] <jnthn> Effectively, Thread is more a "make the hard things possible" thing than a "make the easy things easy" thing: we provide the primitives for those cases that really need them, but everyday use is in terms of higher level constructs.

[20:51] <jnthn> (About the only time I've used Thread directly is when doing native bindings.)

[20:53] <gfldex> dfarrell: this might be helpful: https://gfldex.wordpress.com/2017/10/22/there-is-more-then-one-way-a-the-same-time/

[20:58] <dfarrell> Gotcha, will take a look

[20:59] <lizmat> dfarrell++

[21:04] *** link joined
[21:04] *** pecastro joined
[21:04] <link> hey

[21:07] *** Zoffix joined
[21:08] <Zoffix> link: \o

[21:09] *** cdg joined
[21:09] <link> where can i find recent speed comparisons between perl6 and perl5 / go / node?

[21:09] <link>  google doesn't turn up anything from 2017/8

[21:09] <Zoffix> Is perl.com really popupar for blogs?

[21:11] *** ChoHag joined
[21:11] *** jpl_ joined
[21:11] <Zoffix> link: not aware of anything comprehensive. If you can find 2015 measurements, we're about 6x faster now, though performance landscape is very uneven: some things might even be faster than perl5 yet others are 60+x slower. How you write stuff can have a huge impact.

[21:14] <lizmat> Zoffix: historically, it has a good SEO value

[21:15] <Zoffix> One such example: original 42x slower than Perl 5; low-level nqp version is 2x faster than perl5; rewritten pure Perl 6 version is just 1.9x slower: https://github.com/rakudo/rakudo/issues/1421

[21:15] <Zoffix> link: ^

[21:16] <link> Zoffix: thanks for the clarification! reading through the issue now

[21:21] *** jpl_ left
[21:21] <Zoffix> lizmat: is it more popular than blogs.perl.org? I currently cross-post rakudo.party articles there.... wonder if I should instead post on perl.com. Unclear how to start posting there though

[21:21] <lizmat> you can only post through dfarrell++  :-)

[21:21] <Zoffix> Ah

[21:22] <Zoffix> I'll pass for now then :)

[21:23] <dfarrell> Yeah we're more of a "media" site for Perl than a host for individuals blogs. I need to revamp our contributing guides to better explain the process

[21:24] <Zoffix> :)

[21:25] <Zoffix> dfarrell: how does "community articles" get populated? Is it only through perly_bot or is there a separate system? I have perly_bot disabled so it doesn't post my stuff on reddit, but I wouldn't mind being listed on community articles

[21:27] <dfarrell> Zoffix: that's right it's through perly bot. Per host I can enable/disable which channel get's posted to, so if you posted on an individual blog, I could stop it from doing that.

[21:28] <Zoffix> dfarrell: thanks. I'll keep that in mind for the furture.

[21:28] <Zoffix> g2g now \o

[21:28] <moritz> o/

[21:28] <Zoffix> *future

[21:28] *** Zoffix left
[21:44] <masak> jnthn++ # https://6guts.wordpress.com/2018/01/26/of-sisters-stacks-and-cpan/

[21:49] <El_Che> very presidential

[21:53] *** trnh joined
[21:58] <moritz> jnthn++ indeed

[21:59] <timotimo> jnthn: "is a meme" -> "as a meme"

[21:59] <masak> El_Che: my faith in presidents of any kind decreases every day. but I do like having fla^Wpumpkings to look up to.

[22:00] * masak .oO( put your leaders in parentheses -- do not rely on the order of presidents! )

[22:00] * masak groans preemptively

[22:00] <timotimo> good post, jnthn++

[22:02] <lizmat> jnthn++  :-)

[22:03] <stmuk> I like the "Rochefort Relationship" :)

[22:10] <dfarrell> Yeah nice metaphor

[22:17] <Xliff> jnthn++: Indeed a good post, and I am hoping you are still having a great b-day.

[22:20] *** cdg_ joined
[22:21] <stmuk> http://pl6anet.org/drop/rakudo-star-2018.01-RC1.tar.gz

[22:21] <stmuk> probably final and released on Sunday night (Euroish time)

[22:22] *** link left
[22:23] *** MasterDuke left
[22:23] *** cdg left
[22:57] *** dfarrell left
[23:00] <jnthn> timotimo: Thanks, seems no matter how many proofreads, there's always some grammaro :-)

[23:05] <buggable> New CPAN upload: P5built-ins-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5built-ins-0.0.1.tar.gz

[23:07] *** setty1 left
[23:10] *** jsimonet left
[23:10] <lizmat> P5built-ins allows you to get all of the P5functions in one fell swoop

[23:13] *** pmurias left
[23:16] *** jsimonet joined
[23:32] *** wamba joined
[23:34] *** trnh left
[23:35] <buggable> New CPAN upload: P5lc-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5lc-0.0.1.tar.gz

[23:35] <jnthn> lizmat: I'm curious, but lazy to look: how is lc different between 5 and 6? :)

[23:36] <lizmat> handling of $_

[23:36] <lizmat> lc() will lc $_

[23:39] <jnthn> Oh

[23:39] <jnthn> Ah, and we declare $_ is dynamic, so you can reach it with CALLEr?

[23:39] <jnthn> *CALLER?

[23:39] <lizmat> yeah

[23:40] <lizmat> now I use CALLERS that apparently doesn't care about is dynamic

[23:40] <jnthn> oops :)

[23:40] <jnthn> We...should really fix that

[23:40] <jnthn> Otherwise it's going to be a total optimization spoiler

[23:41] <lizmat> so you want me to make a ticket of the cases where $_ is not marked dynamic ?

[23:41] <jnthn> We're doing that inconsistently?

[23:41] <lizmat> yup  :-(

[23:41] <jnthn> Yeah, we should look into that. But.

[23:41] <jnthn> We have an issue with dynamic and binding.

[23:41] <lizmat> m: $_ = 42; dd $_.VAR.dynamic

[23:41] <camelia> rakudo-moar 5be174bbe: OUTPUT: «Bool::True␤»

[23:41] <jnthn> (In general)

[23:42] <lizmat> m: with my $ = 42 { dd $_.VAR.dynamic }with my $ = 42 { dd $_.VAR.dynamic }

[23:42] <camelia> rakudo-moar 5be174bbe: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3with my $ = 42 { dd $_.VAR.dynamic }7⏏5with my $ = 42 { dd $_.VAR.dynamic }␤»

[23:42] <lizmat> m: with my $ = 42 { dd $_.VAR.dynamic }

[23:42] <camelia> rakudo-moar 5be174bbe: OUTPUT: «Bool::False␤»

[23:42] <lizmat> one case

[23:43] <jnthn> Hm, that one's...curious

[23:43] <lizmat> m: dd $_.VAR.dynamic with my $ = 42  # probably the same under the hood

[23:43] <camelia> rakudo-moar 5be174bbe: OUTPUT: «Bool::False␤»

[23:43] <jnthn> Surely

[23:43] <jnthn> m: if my $ = 42 { dd $_.VAR.dynamic }

[23:43] <camelia> rakudo-moar 5be174bbe: OUTPUT: «Bool::True␤»

[23:44] <lizmat> m: for my $ = 42 { dd $_.VAR.dynamic }

[23:44] <camelia> rakudo-moar 5be174bbe: OUTPUT: «Bool::False␤»

[23:44] <jnthn> that one doesn't surprise me

[23:44] <lizmat> why?

[23:45] <buggable> New CPAN upload: P5fc-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5fc-0.0.1.tar.gz

[23:45] <buggable> New CPAN upload: P5uc-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5uc-0.0.1.tar.gz

[23:45] <jnthn> m: (my $ = 42).list[0].VAR.WHAT.say

[23:45] <camelia> rakudo-moar 5be174bbe: OUTPUT: «(Scalar)␤»

[23:45] <jnthn> That part I wasn't sure about

[23:45] <jnthn> But otherwise it's because of the problem I mentioned above with binding

[23:45] <lizmat> m: my $a = 42; for $a { dd $_.VAR.dynamic }

[23:45] <camelia> rakudo-moar 5be174bbe: OUTPUT: «Bool::False␤»

[23:46] <jnthn> The with one surprises me because it implies a problem I didn't know we had.

[23:46] <lizmat> well, the other solution would be to special case '$_' in CALLER:

[23:46] <jnthn> The for one is a problem I knew we have.

[23:46] <jnthn> That could be an option, yes

[23:46] <jnthn> Though special cases add up

[23:52] <jnthn> The deep problem here is that we make dynamic a property of containers, rather than of variables, but variables are a compile-time construct and so don't exist at runtime

[23:52] <jnthn> Thus why it's ended up on containers

[23:53] <jnthn> Even if it's the property of the variable

[23:53] <jnthn> If that makes some sense :)

[23:53] <lizmat> yeah, it does, same goes for the name of the container, right?

[23:53] <jnthn> Yeah

[23:54] <lizmat> well, maybe something to fix for 6.d

[23:54] <jnthn> Though that one is less problematic

[23:54] <jnthn> Maybe, though I don't want to put every hard problem on the 6.d wagon. :)

[23:54] <jnthn> I don't immediately know we'd go about addressing the issue.

[23:55] <lizmat> well, I will need a check to find out whether I can use CALLERS or CALLER

[23:55] <lizmat> in the applicable P5 modules

[23:55] <jnthn> I'd settle for a special-case for $_ in CALLER(S) in the meantime, if it means we can close the wider loophole in CALLERS

[23:56] *** eliasr left
[23:56] <lizmat> ok, will look at this probably on Sunday then, unless someone beats me to it  :-)

[23:58] <lizmat> meanwhile I'm going to get some sleep

[23:58] <lizmat> good night!  &

[23:58] <jnthn> 'night o/

[23:59] <stmuk> hmmm over 2100 apparent downloads of R* RC0 .. although why people are downloading on iphone is unclear

