[00:00] <Geth> ¦ p6-sake: AlexDaniel self-assigned Running `sake` without arguments should run task `default` https://github.com/perl6/p6-sake/issues/15

[00:00] <Geth> ¦ p6-sake: AlexDaniel self-assigned Dependency tree visualization with graphviz https://github.com/perl6/p6-sake/issues/14

[00:00] <raschipi> Perl 6 can convert one into the other anyway.

[00:02] <tobs> ToddAndMargo: I can relate, but after some time of using perl, my usage of "unless" in conversational English went up (from zero), too.

[00:03] *** kurahaupo joined
[00:03] <ToddAndMargo> I usually hear "unless" in English as some part of an equivocation, so if I use "not" it is very direct

[00:04] <ToddAndMargo> BUt as with all things Perl, there is always 1001 ways to do anything!

[00:06] <ToddAndMargo> I thought I understood how to find how many arguments where on the command line.  `if @*ARGS.elems > 0 ` throws "Dynamic variable @*ARGV not found"

[00:07] <ToddAndMargo> https://docs.perl6.org/routine/args

[00:07] <jnthn> Looks like you typed @*ARGV instead of @*ARGS

[00:08] <ToddAndMargo> mumble, mumble, mumble

[00:11] <ToddAndMargo> What is wrong with this one:  `&::($RunSpecific)();`   No such symbol ''

[00:11] <ToddAndMargo> I don't see me using any single quotes

[00:13] <geekosaur> it's an empty string, with the single quotes part of the error message to set off the symbol it's looking for?

[00:14] <ToddAndMargo> I just found my typo.  I am testing

[00:15] <geekosaur> hm, actually it says that for any not found symbol, so that may be showing a bug

[00:15] <geekosaur> m: my $RunSpecific = 'glup'; say &::($RunSpecific)();

[00:15] <camelia> rakudo-moar e9351cbaa: OUTPUT: «No such symbol ''␤  in block <unit> at <tmp> line 1␤␤»

[00:15] <geekosaur> m: sub glup { 1 }; my $RunSpecific = 'glup'; say &::($RunSpecific)();

[00:15] <camelia> rakudo-moar e9351cbaa: OUTPUT: «1␤»

[00:17] <ToddAndMargo> `::($RunSpecific)();` is the correct syntax. 

[00:18] * geekosaur rakudobugged the bad error message

[00:18] <ToddAndMargo> I am trying to side step EVAL and run the name of a sub I pick up from the command line.

[00:20] <ToddAndMargo> `::("$RunSpecific")();` throws "No such symbol 'GetAWSCleaner'"    (Get "GetAWSCleaner" was copied and pasted from the sub's name.)

[00:21] <raschipi> You could declare MAIN subs and have literal strings as the first argument, and calling './program subcommand' would call one of those for you.

[00:22] *** Khisanth left
[00:22] <ToddAndMargo> &::($RunSpecific)();   Throws No such symbol ''

[00:22] *** Actualeyes joined
[00:22] <geekosaur> yeh, that's what I reported

[00:23] <geekosaur> that's not you doing it wrong (they should do about the same thing, same as you don;t need to precede sub names with & normally), that's the error message being wrong

[00:23] *** thundergnat left
[00:24] <ToddAndMargo> This is what I am trying to convert from Perl 5: `else { eval "$RunSpecific"; }`  And get around the See No Monkey's pragma.  Any workarounds

[00:25] <geekosaur> m: sub glup { 1 }; my $RunSpecific = '&glup'; say ::($RunSpecific)();

[00:25] <camelia> rakudo-moar e9351cbaa: OUTPUT: «1␤»

[00:26] <ToddAndMargo> `::('&' ~ $RunSpecific)();`   No such symbol '&GetAWSCleaner'     I can't win.  Sniffle!

[00:27] <raschipi> Maybe it's telling you the truth, there's no &GetAWSCleaner. Where is it being defined?

[00:28] <ToddAndMargo> I could have typo'ed it.  Ahhh poop (not my exact word.  I transposed two letters!

[00:29] <ToddAndMargo> Thank you!

[00:32] <ToddAndMargo> Converting from P5, when "index" can't find something, it return "-1".  In p6 is it always a "nil"?

[00:34] <raschipi> Yes

[00:35] <timotimo> "with" and "index" is a good combo

[00:35] <ToddAndMargo> Thank you!  Me got a bunch of corrections to make!

[00:35] <timotimo> with index $bloop, $bleep -> $found-position { say "found $bleep in $bloop at $found-position" } else { say "didn't find it" }

[00:37] <ToddAndMargo> This is what I am converting `if ( index $Rev, "rc" ) > -1  {`  and since I only want to know if "rc" is in the line, me thinks it would be more p6-ish just to ` if m/rc/` instead.  Your thoughts?

[00:37] <timotimo> i prefer .contains

[00:38] <ToddAndMargo> oops `if $Rev ~~ /rc/`

[00:38] <timotimo> if $Rev.contains("rc") { }

[00:38] <ToddAndMargo> even easier!  Thank you!

[00:39] <Geth> ¦ p6-sake: 7a6d1a7853 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Sake.pm6

[00:39] <Geth> ¦ p6-sake: Rename internal make_task to make-task

[00:39] <Geth> ¦ p6-sake: review: https://github.com/perl6/p6-sake/commit/7a6d1a7853

[00:39] <Geth> ¦ p6-sake: 4972a25408 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Sake.pm6

[00:39] <Geth> ¦ p6-sake: Rework `file` sub to allow body to accept a Task

[00:39] <Geth> ¦ p6-sake: 

[00:39] <Geth> ¦ p6-sake: This was an oops in 8102fcb173dd7e67b91d38609ec0a78f49e745ad.

[00:39] <Geth> ¦ p6-sake: review: https://github.com/perl6/p6-sake/commit/4972a25408

[00:40] *** HaraldJoerg left
[00:49] *** Khisanth joined
[00:58] *** hythm_ joined
[01:02] <hythm_> p6: my $ge = ">="; 6 $ge 7    # how can I use $ge here so the statement becomes "6 >= 7"

[01:02] <camelia> rakudo-moar e9351cbaa: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my $ge = ">="; 67⏏5 $ge 7    # how can I use $ge here so th␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤   …»

[01:04] <raschipi> hythm_: Can't.

[01:05] <[Coke]> well, EVAL

[01:05] <hythm_> I tried EVAL, got two terms ina row error

[01:06] <timotimo> m: my $ge = &[>=]; say $ge(6, 7)

[01:06] <camelia> rakudo-moar e9351cbaa: OUTPUT: «False␤»

[01:06] <MasterDuke> m: my $ge = ">="; say "6 $ge 7".EVAL

[01:06] <camelia> rakudo-moar e9351cbaa: OUTPUT: «False␤»

[01:10] <lookatme> what is the &[] mean ?

[01:10] <lookatme> m: say &[==];

[01:10] <camelia> rakudo-moar e9351cbaa: OUTPUT: «sub infix:<==> ($?, $?, *%) { #`(Sub+{is-pure}+{Precedence}|38542992) ... }␤»

[01:10] <lookatme> m: say &[|];

[01:10] <camelia> rakudo-moar e9351cbaa: OUTPUT: «sub infix:<|> (|) { #`(Sub+{is-pure}+{Precedence}|50844144) ... }␤»

[01:11] <lookatme> m: say &[.];

[01:11] <camelia> rakudo-moar e9351cbaa: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3say &[.7⏏5];␤»

[01:11] <timotimo> one way to name an infix operator

[01:11] <lookatme> m: say &[!];

[01:11] <camelia> rakudo-moar e9351cbaa: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Negation metaoperator not followed by valid infix␤at <tmp>:1␤------> 3say &[!7⏏5];␤    expecting any of:␤        argument list␤        infix␤        infix noun␤        infix stopper…»

[01:11] <lookatme> oh

[01:13] *** sno joined
[01:17] <hythm_> I dont think EVAL would help in this case, I created a snippet to help explain what I want to do better: (the issue is in the last multi sub)

[01:17] <hythm_> https://gist.github.com/hythm7/74a5290d5741c306b9dd01708a27d989

[01:18] <timotimo> would it be okay to have my $condition = * => *; instead?

[01:19] *** sno left
[01:19] <timotimo> m: my $condition = ">=; say &infix:["$condition"](5, 6);

[01:19] <camelia> rakudo-moar e9351cbaa: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable $condition in declaration to initialize itself␤at <tmp>:1␤------> 3my $condition = ">=; say &infix:["$7⏏5condition"](5, 6);␤    expecting any of:␤        double quotes…»

[01:19] <timotimo> m: my $condition = ">="; say &infix:["$condition"](5, 6);

[01:19] <camelia> rakudo-moar e9351cbaa: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in code  at <tmp> line 1␤5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:…»

[01:19] <timotimo> ah, of course, that'd have to be begin time

[01:24] <hythm_> I dont understand * => *  looks like a place holder to $condition args, but yeah that would be ok

[01:25] <timotimo> * >= * is equivalent to -> $a, $b { $a >= $b }

[01:25] <timotimo> i.e. it's a piece of code

[01:25] <hythm_> noted

[01:25] <timotimo> we call those "WhateverCode" or refer to it as "whatever currying"

[01:26] <timotimo> whatevercode can be more than just a single operator, and can be between one and as many placeholders as you want

[01:26] <timotimo> so * >= 5 is also a valid WhateverCode

[01:30] *** rindolf left
[01:32] <hythm_> makes sense, Thanks for clarification, I tried a few things with $condition set to * => * but still did not work for me (getting same two terms in a row error), will try more

[01:33] <timotimo> you need to use $condition as if it were a sub

[01:33] <timotimo> i.e. $condition($one, $other)

[01:33] <hythm_> hmm

[01:33] <timotimo> also, i think for versions you might want "before" and "after"?

[01:34] <timotimo> hm, though there's no "before or equal" word i don't think

[01:34] <timotimo> maybe >= is fine

[01:36] <hythm_> ok, will try that. I appreciate the suggestions and help, thank you 

[01:37] <timotimo> you're welcome

[02:04] *** Grrrr joined
[02:06] *** Kaiepi left
[02:06] *** hythm_ left
[02:11] <tbrowder_> in p5 i can have a hash element like “key => \$val” but how do i do that in p6? my goal is to deref the val upon key lookup to see the current value of $val.

[02:14] <raschipi> You want to bind the value instead of asigning it, is that it?

[02:14] <geekosaur> bind the container, sounds like

[02:15] <raschipi> Yeah, the container.

[02:20] <lookatme> m: my %foo; %foo{1} = %{1 => 2, 3 => 4}; %foo{2} := %{5 => 6, 7 => 8}; dd %foo; 

[02:20] <camelia> rakudo-moar e9351cbaa: OUTPUT: «Hash %foo = {"1" => ${"1" => 2, "3" => 4}, "2" => {"5" => 6, "7" => 8}}␤»

[02:20] <lookatme> not much difference, seems like

[02:21] *** kurahaupo_ joined
[02:22] <geekosaur> I think you bind individual elements, rather than assigning Pairs?

[02:23] *** kurahaupo left
[02:23] <geekosaur> m: my %h; my $x = 1; %h<a> = 5; %h<b> := $x; dd %h; $x = 2; dd %h

[02:23] <camelia> rakudo-moar e9351cbaa: OUTPUT: «Hash %h = {:a(5), :b(1)}␤Hash %h = {:a(5), :b(2)}␤»

[02:31] *** Kaiepi joined
[02:37] *** MilkmanDan left
[02:39] *** MilkmanDan joined
[02:45] <ToddAndMargo> How do I do an array consisting of two elements per index?  p6 'my @x; push @x= ["a", "1"]; push @x= ["b", "2"]; say @x;' [b 2]

[02:46] <joya> array of arrays

[02:48] <joya> in that code you gave, only the assignment is meaningful

[02:48] <joya> think of it as: @x = ["a", "1"]; push @x

[02:48] <joya> the push part is not doing anything

[02:49] <joya> i think what you want is more like, @x.push( ["a", "1"] )

[02:49] <joya> then @x.push( [ "b", "2" ] )

[02:50] <ToddAndMargo> checking

[02:50] <joya> the square brackets are the internal arrays -- each one is an element of the array @x

[02:51] <joya> also abbreviated as @x.push: ["a", "1"] 

[02:52] *** tuoneta joined
[02:52] <ToddAndMargo> Thank you.  And I do know better.  Getting a bit tired.   $ p6 'my @x; push @x, ["a", "1"]; push @x,["b", "2"]; say @x;' [[a 1] [b 2]]

[02:53] <joya> 👍

[02:55] *** tuoneta left
[03:02] *** sno joined
[03:12] *** arp34 joined
[03:13] *** sno left
[03:16] *** ToddAndMargo left
[03:29] *** wamba joined
[03:35] *** raschipi left
[03:42] <benjikun> tyil: Sorry about LoneStar not being included, didn't know this was a thing

[03:42] <benjikun> It's a little late to add an option, I'd say, but we'll definitely throw it in on the next survey

[03:56] *** turdmonkey joined
[03:58] <turdmonkey> Hello.

[04:04] *** arp34 left
[04:06] <benjikun> turdmonkey: Howdy

[04:08] <turdmonkey> Does anyone find think it's funny how you can read Perl 6 almost exactly like English?

[04:15] *** lizmat joined
[04:18] <benjikun> turdmonkey: I like it when that's possible

[04:18] <benjikun> it's surely not always with Perl6, but the option is there

[04:18] <turdmonkey> Well yes, not always

[04:18] *** sno joined
[04:19] <benjikun> I know what you mean, though

[04:19] <turdmonkey> Try reading all of those sigils and funny operators out loud haha

[04:19] <turdmonkey> <<+>>

[04:23] *** MasterDuke left
[04:28] <benjikun> This is perhaps a stupid question, and is obvious for all of us

[04:28] <benjikun> but how do newcomers know to use Zef as the tool to install modules

[04:29] <turdmonkey> I got the book, "perl 6 fundamentals" and it said so in the beginning, when setting up the perl 6 environment

[04:30] <benjikun> True, it is mentioned regularly at the beginning of books and beginner's guides

[04:31] <benjikun> Well, it also does explicitly reference zef under the "Modules" page in the docs

[04:31] <turdmonkey> I'm excited for "Learning Perl 6", which will probably demonstrate zef as well

[04:31] <benjikun> Maybe we should put a reference to the modules docs page on the frontpage of modules.perl6.org

[04:32] <benjikun> I'm trying to discover any things newbies might miss

[04:32] <turdmonkey> Pointing newbies toward Rakudo-Star is useful

[04:33] <turdmonkey> And always having a short and quick beginner tutorial that utilizes a cool module that requires zef.

[04:34] <benjikun> Perhaps we could put a link titled "What next?" or some variation on that at the bottom of each of the installation instructions for rakudostar here: https://rakudo.org/files

[04:36] <benjikun> or a link at the bottom that says "Learn more about what's included with Rakudo Star"

[04:38] <benjikun> There's a box similar to that on the downloads page @ perl6.org

[04:49] <turdmonkey> oh man I just discovered GTK::Simple

[04:50] *** curan joined
[04:50] <turdmonkey> pretty much the only thing I don't use perl 5 for is GUI stuff. Not that I do GUI stuff often(hardly ever), but Perl 6 supporting a real, high-quality GUI Framework would be sweet

[04:51] <benjikun> turdmonkey: Were you the one that requested that in the survey?

[04:51] *** skids left
[04:52] <benjikun> I saw that, and I'd agree

[04:52] *** jmerelo joined
[04:53] <benjikun> jmerelo: Welcome back

[04:54] <turdmonkey> benjikun, No, but it's been on my mind for a while now

[04:55] <jmerelo> benjikun: hi. Checking out answers to the survey. Quite a lot!

[04:55] <turdmonkey> What is something perl absolutely excels at? Data munging! What do people love? graphs!

[04:56] <benjikun> jmerelo: Yeah, I'm quite pleased with them

[04:57] <benjikun> turdmonkey: I'm planning on generating some custom charts for the survey questions a little after it appears on P6Weekly, so that everyone gets an opportunity

[04:57] <benjikun> alongside considering a repository for the .csv and chart generators for each round of surveys we do

[05:00] <turdmonkey> I think that a huge area where Perl 6 can shine is data visualization

[05:00] <jmerelo> If you've got the time, please cast your vote in the hash declaration style poll https://github.com/perl6/doc/issues/2117#issuecomment-399742781

[05:04] <El_Che> benjikun: I bundle zef in rakudo-pkg (and a script to install it at home).

[05:05] <El_Che> I think people discover zef soone enough

[05:05] <El_Che> the only danger is them picking als variants like panda, ufo from older posts

[05:05] *** kurahaupo_ left
[05:05] *** kurahaupo joined
[05:05] <El_Che> or start with rakudobrew becasue it sounds like perlbrew

[05:06] *** sno left
[05:07] <turdmonkey> $var.kv, kv is "key/value" method?

[05:07] <benjikun> El_Che: good points, I know people who have done that with panda

[05:08] <jmerelo> turdmonkey: right.

[05:08] <turdmonkey> well that's quite nifty

[05:10] <jmerelo> This question is still unanswered in StackOverflow: list of encodings that Perl6 understands https://stackoverflow.com/questions/41433287/how-can-i-get-a-list-of-encodings-that-perl-6-understands

[05:10] <turdmonkey> How is Perl 6's speed now?

[05:11] <jmerelo> turdmonkey: better ;-)

[05:12] <El_Che> ymmv depending on what you do. Having easy concurrency helps on that area

[05:17] <benjikun> jmerelo: About the hash debate, I'd agree with labster on consistency paralleling defining arrays (i.e. my @a = []; being similar to {})

[05:17] <benjikun> As for why {} is so much slower, can that be improved, or is that option inherently slower than the others

[05:19] *** turdmonkey left
[05:25] <benjikun> too bad there aren't more symbols on most keyboards, ha

[05:29] <El_Che> benjikun: https://i.ytimg.com/vi/FVfiujbGLfM/hqdefault.jpg

[05:29] <benjikun> El_Che: lol

[05:30] <jmerelo> benjikun: it will probably be improved. Did you vote at the poll?

[05:31] <benjikun> jmerelo: Yeah, I did

[05:31] <geekosaur> benjikun, theres a bug open for it already

[05:32] <jmerelo> benjikun: great! I'll leave it open for another 24 hours, and change documentation after that.

[05:34] <jmerelo> There are a bunch of Perl 6 unanswered questions in StackOverflow. You might want to take a look at them https://stackoverflow.com/unanswered/tagged/perl6 In some cases, they give you interesting insight on the working of the language

[05:42] *** kurahaupo left
[05:42] *** kurahaupo joined
[05:43] <El_Che> jmerelo: quite a discussion about hashes :)

[05:44] <jmerelo> El_Che: that's the kind of thing I love about Perl 6 and the community. It's also the kind of issues I hate.

[05:44] <El_Che> herding cats?

[05:45] <jmerelo> El_Che: herding butterflies. 

[05:45] <El_Che> cats are less fragile :)

[05:46] <jmerelo> El_Che: precisely.

[05:47] <El_Che> academics love precise language :)

[05:47] <jmerelo> jmerelo: :-)

[05:48] <El_Che> (and to talk to themselves it seems) :)

[05:48] *** xtreak joined
[05:48] <jmerelo> El_Che: we don't talk to ourselves, we mumble :-)

[05:49] <El_Che> mumblemumblereferenceneededmumble

[05:49] <jmerelo> El_Che: that's wikipedians. Almost, but not quite.

[05:50] <El_Che> <this perl 6 doc is incomplete or has unresolved issues>

[05:52] <jmerelo> El_Che: academics would be quite "You need to compare Perl 6 to every single language in town. The font you are using for code is too small, except when it's too big. You are not mentioning my Very Important Contribution to the realm of languages"

[05:52] <El_Che> lol

[05:52] <El_Che> train arrived

[05:52] <El_Che> bbl

[05:52] <jmerelo> El_Che: have a nice trip

[05:55] *** wamba left
[05:57] *** kurahaupo_ joined
[05:58] *** kurahaupo left
[06:02] *** kurahaupo_ left
[06:11] *** kurahaupo joined
[06:14] *** ufobat_ joined
[06:20] <El_Che> jmerelo: just commute to work :)

[06:23] *** Kaypie joined
[06:23] *** Kaiepi left
[06:26] *** domidumont joined
[06:31] *** domidumont left
[06:32] *** sno joined
[06:32] *** domidumont joined
[06:35] *** hami joined
[06:38] *** jmerelo left
[06:42] *** kurahaupo_ joined
[06:45] *** kurahaupo left
[06:48] *** lookatme left
[07:18] *** hami left
[07:21] *** jeromelanteri joined
[07:22] *** jeromelanteri left
[07:23] *** zakharyas joined
[07:24] *** zakharyas left
[07:27] *** zakharyas joined
[07:28] *** zakharyas left
[07:28] *** zakharyas joined
[07:45] *** darutoko joined
[07:50] *** joya left
[07:51] <tyil> benjikun: dont sweat it

[07:53] *** jmerelo joined
[07:53] <jmerelo> .tell phdphil A lazy list could be infinite. Kind of hard to do combinations on that thing...

[07:53] <yoleaux> jmerelo: I'll pass your message to phdphil.

[08:05] *** dakkar joined
[08:11] *** dogbert17 left
[08:25] *** xtreak left
[08:27] *** zakharyas1 joined
[08:28] *** xtreak joined
[08:29] *** zakharyas left
[08:37] *** wamba joined
[08:39] *** xtreak left
[08:42] *** wamba left
[08:43] *** wamba joined
[08:43] *** pmurias joined
[08:56] <buggable> New CPAN upload: App-Assixt-0.4.0.tar.gz by TYIL http://modules.perl6.org/dist/App::Assixt:cpan:TYIL

[08:56] <tyil> neat

[09:06] *** xtreak joined
[09:09] *** zakharyas1 left
[09:09] *** zakharyas joined
[09:16] <buggable> New CPAN upload: cro-http-0.7.6.tar.gz by JNTHN http://modules.perl6.org/dist/Cro::HTTP:cpan:JNTHN

[09:16] <buggable> New CPAN upload: cro-core-0.7.6.tar.gz by JNTHN http://modules.perl6.org/dist/Cro::Core:cpan:JNTHN

[09:16] <buggable> New CPAN upload: cro-tls-0.7.6.tar.gz by JNTHN http://modules.perl6.org/dist/Cro::TLS:cpan:JNTHN

[09:17] *** HaraldJoerg joined
[09:20] *** domidumont left
[09:24] *** domidumont joined
[09:24] *** n1ge joined
[09:26] <buggable> New CPAN upload: cro-0.7.6.tar.gz by JNTHN http://modules.perl6.org/dist/cro:cpan:JNTHN

[09:26] <buggable> New CPAN upload: cro-websocket-0.7.6.tar.gz by JNTHN http://modules.perl6.org/dist/Cro::WebSocket:cpan:JNTHN

[09:26] <buggable> New CPAN upload: cro-zeromq-0.7.6.tar.gz by JNTHN http://modules.perl6.org/dist/Cro::ZeroMQ:cpan:JNTHN

[09:29] *** Kaypie left
[09:31] *** xtreak left
[09:34] *** haj` joined
[09:36] <buggable> New CPAN upload: Geo-Coordinates-UTM-0.9.0.tar.gz by KJPYE https://cpan.metacpan.org/authors/id/K/KJ/KJPYE/Perl6/Geo-Coordinates-UTM-0.9.0.tar.gz

[09:42] <jmerelo> Wow

[09:43] *** scimon joined
[09:45] *** rindolf joined
[09:46] *** xtreak joined
[09:49] *** Jon__ joined
[09:49] <Jon__> Hello:), i tried to install moose and when i run my perl program i get this error 

[09:49] <Jon__> Can't locate Moose.pm in @INC (you may need to install the Moose module) (@INC contains: /usr/lib/perl5/site_perl /usr/share/perl5/site_perl /usr/lib/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib/perl5/core_perl /usr/share/perl5/core_perl .) at .\test.pl line 6. BEGIN failed--compilation aborted at .\test.pl line 6.

[09:49] <Jon__> Can someoen tell me what i'm doing wrong?

[09:54] *** Jon__ left
[10:02] *** scimon left
[10:03] *** scimon joined
[10:09] *** margeas joined
[10:10] <Ulti> you need to tell your perl where your cpan modules are installed try -I to manually do that on the command line

[10:11] <Ulti> your second marginal error was asking a perl5 question on a perl6 chat, you might have more luck with #perl

[10:11] <Ulti> though there are some p5 people on here too

[10:16] <scimon> Jon__: sounds like you need to install Moose `cpanm Moose` should do the job. But as Ulti says the #perl chat might be a better place to ask.

[10:16] <jnthn> I think they left :)

[10:20] *** benjikun left
[10:23] <scimon> Ah well.

[10:43] *** wamba left
[10:45] *** scimon left
[10:45] *** scimon joined
[10:46] *** Zoffix joined
[10:47] *** wamba joined
[10:50] <Zoffix> benjikun: but you don't define arrays with `my @a = [];` you just write it as `my @a;`. Same with hashes

[10:53] *** sena_kun joined
[10:53] <Zoffix> benjikun: and yeah, {} can be improved. If you write it explicitly as circumfix:<{ }> it becomes fast, so I suspect it's the left over block from when we're trying to guess whether we're making a hash or a block that's to blame. There's another issue where this form of guessing could be implemented better, so I think once that's done the speed loss will resolve itself :)

[10:54] <Zoffix> mmm... the "Recent blog posts" needs fixing: https://perl6.org/

[10:55] <Zoffix> Right now it appears to shows comments from medium.com as new blogs... "Jo Christian Oterhals: Yes, you’re right." "Jo Christian Oterhals: Thanks for the response, Dave."

[10:57] <Zoffix> .tell benjikun you wanted to add links to rakudo.org The sauce is here: https://github.com/perl6/rakudo.org/  The templates are in templates/  Add [REAPP] (including brackets) to commit title to restart the app with your changes

[10:57] <yoleaux> Zoffix: I'll pass your message to benjikun.

[11:02] *** jmerelo left
[11:11] <Geth> ¦ perl6.org: 4c84c5ea2b | (Zoffix Znet)++ | fetch-recent-blog-posts.pl

[11:11] <Geth> ¦ perl6.org: Get rid of comments on medium.com showing up as new blogs

[11:11] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/4c84c5ea2b

[11:20] *** raschipi joined
[11:22] *** zakharyas left
[11:33] *** xtreak left
[11:58] *** scovit joined
[11:59] *** Zoffix left
[12:03] *** lizmat left
[12:19] *** epony left
[12:21] *** kurahaupo_ left
[12:36] <Geth> ¦ perl6.org: e151ad1f3f | (Zoffix Znet)++ (committed using GitHub Web editor) | fetch-recent-blog-posts.pl

[12:36] <Geth> ¦ perl6.org: Explain more how the medium.com comment filter works

[12:36] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/e151ad1f3f

[12:47] *** damnlie left
[12:49] *** p6noob left
[12:49] *** damnlie joined
[12:53] *** mcmillhj joined
[12:53] *** mcmillhj left
[12:58] *** mcmillhj joined
[12:58] *** mcmillhj left
[12:58] *** notable6 left
[12:58] *** notable6 joined
[13:00] *** cosimo joined
[13:03] *** wamba left
[13:03] *** mcmillhj joined
[13:03] *** mahafyi joined
[13:04] <pmurias> the truffle backend now passes t/nqp/001-literals.t :)

[13:07] <moritz> \o/

[13:08] *** kurahaupo joined
[13:09] <jkramer> Would it make sense to add a divmod op to P6 or would that have no advantages over doing mod and div seperately?

[13:12] <stmuk> hmm https://zeroturnaround.com/rebellabs/graal-and-truffle-for-polyglot-languages-on-jvm/ has helped my understanding

[13:15] *** zakharyas joined
[13:17] <pmurias> jkramer: does it offer any benefits rather then as an optimization aid?

[13:19] <jkramer> pmurias: No, but isn't an optimization aid not a good reason for having it? :) I mean I guess div+mod are things that are often needed together and usually in situations where you do math stuff that you'd want to be fast

[13:20] <jkramer> I'm doing some project euler tasks in P6 lately and this is something that I found would be useful on many occasions

[13:22] <pmurias> jkramer: I'm not just not very convinced that it will make things faster

[13:27] <jkramer> pmurias: Yeah that's why I'm asking. I guess rakudo is too high-level to make efficient use of CPU features/side effects

[13:27] *** zakharyas left
[13:28] <raschipi> Doesn't polymod do that?

[13:28] <raschipi> m: say 25.polymod(3).reverse

[13:28] <camelia> rakudo-moar e9351cbaa: OUTPUT: «(8 1)␤»

[13:28] *** zakharyas joined
[13:28] <timotimo> the thing is that when we divide, we already get both the div and mod results, at least from the bigint library

[13:28] <[Coke]> raschipi++

[13:28] <timotimo> we then throw away one of the two, recalculate, and throw away the other

[13:28] <timotimo> at least i think that's what happens

[13:29] * AlexDaniel clickbaits https://docs.google.com/forms/d/e/1FAIpQLSdqrrcxTQWuN1ISAvz3j_XkpCCc2AuQw9uKgAhTivxHBFsweg/viewform

[13:29] <ilmari> m: 37.divmod(5).say()

[13:29] <camelia> rakudo-moar e9351cbaa: OUTPUT: «No such method 'divmod' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[13:29] <ilmari> m: 37.polymod(5).say()

[13:29] <camelia> rakudo-moar e9351cbaa: OUTPUT: «(2 7)␤»

[13:29] <ilmari> isn't divmod just a special case of polymod?

[13:30] <[Coke]> divmod isn't p6, I don't think.

[13:30] <raschipi> Yep, it's the polymod case with a single argument.

[13:30] <jkramer> Well divmod in other languages/libs that are more low-level make use of the fact that the machine opcode for division automatically stored the remainder in an extra register, so it's just one CPU op that does both at once

[13:31] <jkramer> But that's probably not possible in Rakudo

[13:31] <raschipi> jkramer: Why do you say that?

[13:31] <AlexDaniel> m: say expmod(4, 2, 5);

[13:31] <camelia> rakudo-moar e9351cbaa: OUTPUT: «1␤»

[13:31] <ilmari> s: Int, 'polymod'

[13:31] <SourceBaby> ilmari, Sauce is at https://github.com/rakudo/rakudo/blob/e9351cbaa/src/core/Int.pm6#L105

[13:31] <timotimo> the jit's optimizer could probably figure that out

[13:31] <jkramer> raschipi: Well you'd need to do inline assembly with all the downsides :)

[13:31] <timotimo> just gotta implement it ;)

[13:31] *** epony joined
[13:32] *** skids joined
[13:32] <raschipi> jkramer: Rakudo generates assembler for x86_64

[13:32] <jkramer> Oh really? I was not aware of that

[13:32] <ilmari> well, it's really moarvm that does it

[13:32] <ilmari> but yes, some ops are JITed

[13:32] <jkramer> So I can compile P6 to binary?

[13:32] <raschipi> Well, yeah, Moar does it.

[13:33] <raschipi> It compiles it's own bytecode to binary

[13:34] <raschipi> But not all of it, jkramer.

[13:34] <timotimo> we only do JIT compilation, no AOT compilation here.

[13:34] <jkramer> That's pretty neat :)

[13:35] <timotimo> it's also only really a win because we observe the actual execution of the program to figure out what types are common where

[13:35] <pmurias> all the Perl 6 backends (moar, jvm, js and truffle) do JIT compilation btw

[13:35] <timotimo> 6guts.wordpress.com has many posts about our dynamic optimizer, and brrt-to-the-future.blogspot.com has posts about the jit

[13:36] <timotimo> actually

[13:37] <timotimo> jkramer: https://www.youtube.com/watch?v=3umNn1KnlCY - this could be very interesting for you: Jonathan Worthington (‎jnthn‎) - "‎How does deoptimization help us go faster"

[13:39] *** Pheix joined
[13:41] <tbrowder_> g'day, #perl6

[13:41] <raschipi> oi tbrowder_ 

[13:42] <tbrowder_> raschipi: o/

[13:43] *** molaf joined
[13:43] <tbrowder_> i need to bind a variable to a hash key so i can do something in p6 as is done in this gist: https://gist.github.com/tbrowder/e032014c641ff2e3fe542861298e6c16

[13:44] <jkramer> timotimo: Thanks, I'll watch it later, can't have sound right now :)

[13:45] <timotimo> http://jnthn.net/papers/2017-spw-deopt.pdf - this is the slides pdf

[13:47] <raschipi> m: my $b = 3; %h<a> := $b; $b = 4; say %h<a>

[13:47] <camelia> rakudo-moar e9351cbaa: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '%h' is not declared␤at <tmp>:1␤------> 3my $b = 3; 7⏏5%h<a> := $b; $b = 4; say %h<a>␤»

[13:48] <raschipi> m: my $b = 3;my %h; %h<a> := $b; $b = 4; say %h<a>

[13:48] <camelia> rakudo-moar e9351cbaa: OUTPUT: «4␤»

[13:48] *** kurahaupo left
[13:49] *** Pheix2 joined
[13:50] *** Pheix3 joined
[13:50] <raschipi> tbrowder_: Does that solve your problem?

[13:50] *** lizmat joined
[13:52] *** Pheix left
[13:53] <tbrowder_> it does, and i'm a dummy!  i was focused on assigning it inside the original hash definition and didn't consider the direct binding. thnx!

[13:53] *** Pheix2 left
[13:54] *** curan left
[13:54] <tbrowder_> s/original/original total/

[13:54] <ufobat_> did anyone work any further on perl6 and ldap? fyi: https://gist.github.com/FROGGS/bafc8454a14f80a6fddd170048dabf47

[13:57] <raschipi> tbrowder_: geekosaur found the answer when you asked earlier, you must have not seen it. I just repeated it now.

[14:00] <raschipi> It's not obvious at all when trying to translate the Perl 5 code.

[14:00] *** kurahaupo joined
[14:03] <b2gills> I think that if a NQP op for divmod was added, it might make it easier to optimize a div followed by a mod (or the reverse) as the optimization could be done in NQP. (note that this is just a guess)

[14:03] *** zakharyas left
[14:08] <raschipi> polymod is repeated divmod

[14:09] *** turdmonkey joined
[14:10] <turdmonkey> yay perl!

[14:10] <raschipi> heya turdmonkey 

[14:10] <turdmonkey> Hello.

[14:11] *** turdmonkey left
[14:11] *** greppable6 left
[14:12] *** greppable6 joined
[14:16] *** wamba joined
[14:22] <raschipi> Juerd: do you find it amusing or frustrating that everyone disagrees so strongly with your style recommendations?

[14:22] <tbrowder_> geekosaur: thanks for the answer to binding  a var to a hash key!

[14:26] <buggable> New CPAN upload: RDF-Turtle-0.0.1.tar.gz by BDUGGAN http://modules.perl6.org/dist/RDF::Turtle:cpan:BDUGGAN

[14:36] *** wamba left
[14:41] <masak> raschipi: what style recommendations are those?

[14:43] *** wamba joined
[14:43] <raschipi> Use 'hash' instead of '{ }' to create empty hashes in the docs and getting rig of '$' anonymous variables, requiring it to be declred 'state $'.

[14:46] *** turdmonkey joined
[14:51] <b2gills> `$` is actually `(state $)` as `$ = 1` always assigns a `1`. While `state $ = 1` only assigns it the first time through the block.

[14:52] <timotimo> i prefer {} over hash, because {} is a term, whereas hash can take some more stuff after it. if you're not careful, what you intended to be "empty hash" turns into "hash with a bunch of stuff"

[14:52] <turdmonkey> Why is {} confusing with a block? Isn't one of Perl

[14:52] <turdmonkey> Perls greatest strengths context?

[14:52] <Geth> ¦ doc: 77374a0a82 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/traps.pod6

[14:52] <synopsebot> Link: https://doc.perl6.org/language/traps

[14:52] <Geth> ¦ doc: Document interpolation-of-anon-state-vars as a trap

[14:52] <Geth> ¦ doc: 

[14:52] <Geth> ¦ doc: Found 6 or 7 cases of this bug in the ecosystem

[14:52] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/77374a0a82

[14:52] <turdmonkey> You should be able to tell based upon context, yes?

[14:52] <timotimo> in that case it's based on content, not context

[14:53] <turdmonkey> hm

[14:53] <timotimo> if there's any reference to $_ inside the { } it'll be interpreted as a block instead of a hash

[14:53] <timotimo> which can surprise you

[14:53] <timotimo> especially because there's the .foo form which is short for $_.foo

[14:53] <turdmonkey> so if you use $_ inside of {} then you must explicitly declare it a hash?

[14:53] <timotimo> so you can have a $_ in there without seeing the $_

[14:54] <timotimo> in that case you'll have to use %( ) syntax, or a call to "hash" or rename the variable outside of it

[14:54] *** zakharyas joined
[14:54] <raschipi> Well, it's not a problem in practice, you just need to know how to force Perl 6 to do what you mean.

[14:55] *** Zoffix joined
[14:55] <timotimo> aye

[14:55] <timotimo> a type annotation here or there can help, too

[14:55] <timotimo> m: my %foo = { hi => "goodbye", boop => .uc }

[14:55] <camelia> rakudo-moar e9351cbaa: OUTPUT: «Odd number of elements found where hash initializer expected:␤Only saw: -> ;; $_? is raw { #`(Block|86150824) ... }␤  in block <unit> at <tmp> line 1␤␤»

[14:55] <timotimo> or, you know, the % sigil

[14:56] <Zoffix> turdmonkey: more accurately, referring to any **parameters** will make it a block. And $_ is a default parameter in blocks. The path to this error is having stuff like `{ foo => $o.ber }` and then later changing `$o` to be aliased to `$_` in the outer construct, so you go and change the hash to `{ foo => .ber }` but that's now a param, so it becomes a block

[14:56] *** molaf left
[14:57] <Zoffix> And the second error is reducing `{ … some code … }` to just an empty `{}`, but depending on the context that could mean a hash instead, so you have to go back and change that to `{;}`

[14:58] <turdmonkey> lol, wow

[14:58] <Zoffix> :)

[14:58] <Zoffix> I don't know why people keep using initialization to argue against `{}`. You wouldn't use it there! :)

[14:58] <Zoffix> m: my %foo = hi => "goodbye", boop => .uc

[14:58] <camelia> rakudo-moar e9351cbaa: OUTPUT: «No such method 'uc' for invocant of type 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[15:00] <raschipi> Zoffix: because they had their minds warped by computer science?

[15:00] <Zoffix> I suspect it's because they're making up the problems that don't exist instead of reporting actual problems that happened :P

[15:01] <raschipi> Well, it's got to be 'pure' and conform to some theory and all that, so every problem that can be made up must be solved, I think.

[15:01] <Zoffix> Same with state vars. The original argument was that it's hard to search for, which proved false. However, I found ~6 modules in the ecosystem that weren't scoping them correctly

[15:01] <turdmonkey> Zoffix, `boop => .uc` is really $_.uc ?

[15:01] <Zoffix> turdmonkey: yes

[15:01] <turdmonkey> :-O

[15:02] <Zoffix> turdmonkey: same with .[0], .<foo>, and so on

[15:02] <turdmonkey> Cool.

[15:02] <Zoffix> Except for hypering, IIRC `.»lc with <a b c>` wont work

[15:02] <Zoffix> m: dd .»lc with <a b c>

[15:02] <camelia> rakudo-moar e9351cbaa: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call (only alphabetic methods may be detached)␤at <tmp>:1␤------> 3dd .7⏏5»lc with <a b c>␤»

[15:02] <Zoffix> yeah, it really wants a `$_` in there

[15:02] <turdmonkey> How do you use those unicode characters o easily?

[15:03] <Zoffix> turdmonkey: on this computer, I use XCompose, so it's `RWin, >, >` to type »

[15:03] <raschipi> Zoffix types with his mind directly.

[15:03] <turdmonkey> Hahaha, that is so cool

[15:03] <Zoffix> turdmonkey: on my home computer, I have 18 extra keys on the side and have some of them bound to the special chars

[15:03] <turdmonkey> Well, aren't you mister fancy pants.

[15:04] <Zoffix> And if you don't know how to type it, you can just write it as `>>`

[15:04] <turdmonkey> Yes.

[15:04] <Zoffix> m: say <a b c>».lc; say <a b c>>>.lc

[15:04] <camelia> rakudo-moar e9351cbaa: OUTPUT: «(a b c)␤(a b c)␤»

[15:04] <turdmonkey> The 'infinity symbol' = * = Inf ?

[15:04] <Zoffix> m: say <a b c>».uc; say <a b c>>>.uc

[15:04] <camelia> rakudo-moar e9351cbaa: OUTPUT: «(A B C)␤(A B C)␤»

[15:04] <Zoffix> Yeah

[15:04] <turdmonkey> Why are there three ways to represent infinity?

[15:04] <Zoffix> turdmonkey: full list here: https://docs.perl6.org/language/unicode_ascii

[15:05] <Zoffix> turdmonkey: oh, sorry, the `*` is not Inf. It's the "Whatever" object. And in some methods it represents an `Inf`

[15:05] *** comborico1611 joined
[15:05] <Juerd> raschipi: Slightly frustrating, but not because the "recommendations" (they're not really recommendations, more suggestions) aren't followed. I'm mostly frustrated with the things that make Perl 6 hard to learn or work with.

[15:06] <raschipi> Juerd: they don't make it hard, they aren't problems in practice.

[15:06] <Juerd> raschipi: Regarding hashes, 'hash' was never my preference until the other two were deemed too confusing. Although 'hash' is ugly, I think it's better to use something that's consistently safe, than to switch between constructs based on what's safe for specific contents.

[15:06] <Zoffix> m: multi pick-a-number(Whatever:D) { ^100 .rand }; multi pick-a-number(Int \n) { n.rand.Int }; pick-a-number 42; pick-a-number *

[15:06] <camelia> rakudo-moar e9351cbaa: ( no output )

[15:06] <Zoffix> m: multi pick-a-number(Whatever:D) { ^100 .rand }; multi pick-a-number(Int \n) { n.rand.Int }; say pick-a-number 42; say pick-a-number *

[15:06] <camelia> rakudo-moar e9351cbaa: OUTPUT: «30␤11.74417071926397␤»

[15:07] <Juerd> raschipi: Regarding $, it may just be disagreement about whether hidden or hard-to-detect state is bad or not.

[15:07] <Zoffix> turdmonkey: so ^ here, I made "Whatever" mean "100"

[15:07] *** zakharyas left
[15:07] <El_Che> Juerd: I agree with you if the argument is timtowtdi if it make sense and a sane default when doesn't

[15:07] <Juerd> raschipi: But in general, I'm not pessimistic at all. A few of my suggestions have made it into the language, and I don't take the rejections personally :D

[15:08] <raschipi> I don't see how the traditinal $i would make it any different than just $.

[15:08] <Juerd> raschipi: $i can't be used without declaring it.

[15:08] <Juerd> raschipi: $ can

[15:08] <Zoffix> Juerd: but I can declare that state with `my $i` in outer block.

[15:08] <Juerd> Zoffix: Yes.

[15:09] <raschipi> Well, I don't see how 'my $i' makes code any more clear than just '$'.

[15:09] <Zoffix> And you won't find my state at all, where any anon var, I can find relatively easy for the common case, and the rest of the cases could be found with a tool that examines ASTs

[15:09] <Juerd> raschipi: My most insane idea for the language was initially rejected and eventually adopted. So even when I don't get my way, I remain hopeful :DH

[15:09] <Juerd> s/H$//

[15:09] <Zoffix> Juerd: what was the idea? :)

[15:09] <raschipi> Which idea was it?

[15:10] <Juerd> .=

[15:11] <Zoffix> I just find "state is bad" argument a bit vague. Before trying to find all the `$` uses, you'd need to have motivation to do so :)

[15:12] <Zoffix> .= is good. Even tho majority of people seem to struggly with chaining those

[15:12] <Juerd> Zoffix: I'm depending on the community's agreement on the argument, I'm not going to try and change anyone's mind towards it :)

[15:12] <Zoffix> `$x .= foo.bar.ber` for example

[15:12] <Juerd> Zoffix: I don't think one should chain them.

[15:12] <Zoffix> Juerd: no, but the above is meant to be equivalent to `$x = $x.foo.bar.ber`, but it's actually `($x = $x.foo).bar.ber`

[15:13] <Juerd> Zoffix: I'm fine with it being possible, because I do think the language should provide as much rope as needed to hang yourself, but I don't necessarily think all the options should be used in practice.

[15:13] <Zoffix> Juerd: you should write a book. "Perl 6 Best Practices"

[15:13] <Juerd> Zoffix: I might release a short style guide at some point

[15:13] <Juerd> Zoffix: But definitely not within the coming few years

[15:13] <Juerd> afk

[15:14] <Zoffix> Juerd: with argumentations for why "state is bad".

[15:14] <raschipi> Write a module that enforces it too.

[15:14] <Zoffix> And well, explanations for all the other practices.

[15:15] *** Zoffix left
[15:18] *** Pheix3 left
[15:29] *** Tideflat joined
[15:33] *** wamba left
[15:36] <buggable> New CPAN upload: cro-http-0.7.6.1.tar.gz by JNTHN http://modules.perl6.org/dist/Cro::HTTP::Test:cpan:JNTHN

[15:39] *** SHODAN joined
[15:46] <buggable> New CPAN upload: cro-http-0.7.6.1.fix.tar.gz by JNTHN http://modules.perl6.org/dist/Cro::HTTP::Test:cpan:JNTHN

[15:46] <jnthn> Monday... :/

[15:47] *** mcmillhj_ joined
[15:50] *** mcmillhj left
[15:50] *** mcmillhj_ left
[15:50] <Tideflat> What is the recommended way to install zef? I am on Debian and don't seem to have a command named zef in spite of having perl 6 installed, nor is there a packages named perl 6

[15:50] *** dxmxr joined
[15:50] <El_Che> Tideflat: are you using the version in debian itself or a third party package?

[15:53] <Tideflat> I believe the official package though I installed it a while ago and may have forgotten, but my version number exactly matches the version of latest perl6 package from Debian

[15:54] <El_Che> do "which perl6"

[15:54] <Tideflat> The version is 6.c-1

[15:54] <timotimo> what's "perl6 --version" say?

[15:55] <Tideflat> This is Rakudo version 2016.12 built on MoarVM version 2016.12

[15:55] <Tideflat> implementing Perl 6.c.

[15:56] <timotimo> you probably won't be able to install zef on that

[15:56] <timotimo> well, at least not latest zef

[15:56] <Tideflat> ah thanks. So updating to a more recent version of Rakudo outside of the Debian package system would fix that?

[15:57] <El_Che> Tideflat: I provide a repo for debian stable and ubuntu here: https://github.com/nxadm/rakudo-pkg

[15:57] <timotimo> el_che's packages are very good

[15:57] <El_Che> it will not conflict with OS-supplied rakudo

[15:57] <Tideflat> Thank you! I will look into that after I get home from work.

[15:58] <El_Che> (as long you don't start mixing paths, at least)

[15:58] <El_Che> ping if you need help

[15:58] <El_Che> bbl

[16:01] *** vcv_ joined
[16:01] *** vcv_ is now known as vcv

[16:01] <raschipi> El_Che: Do you know if the packages for Debian Stretch work fine on Buster?

[16:01] <vcv> Can any of the bots in here run Perl6 code that uses a third party module?

[16:01] <vcv> like Cro::HTTP::Client

[16:01] *** Tideflat left
[16:02] *** Tideflat joined
[16:02] *** jmerelo joined
[16:02] <timotimo> i believe on the evalable bot you can reach modules from the ecosystem

[16:03] <vcv> p6: use Cro::HTTP::Client; Cro::HTTP::Client.new(:base-uri("https://www.test.com"), :cookie-jar).post("/test")

[16:03] <camelia> rakudo-moar e9351cbaa: OUTPUT: «===SORRY!===␤Could not find Cro::HTTP::Client at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-2/share/perl6␤    …»

[16:03] *** mcmillhj joined
[16:03] <timotimo> you have to add it via "use lib", though

[16:04] <timotimo> it and all of its dependencies, probably

[16:04] *** mcmillhj left
[16:04] <timotimo> i don't know how exactly

[16:04] <vcv> Ok, sounds like an adventure. thanks :)

[16:04] <timotimo> the code required to do it might be too long to fit in one irc message, even

[16:08] *** mcmillhj joined
[16:09] *** mcmillhj left
[16:09] <tony-o_> cro has a lot of deps

[16:09] *** mcmillhj joined
[16:09] <tony-o_> m: use Cro:HTTP::Client;

[16:09] <camelia> rakudo-moar e9351cbaa: OUTPUT: «===SORRY!===␤Could not find Cro at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-2/share/perl6␤    CompUnit::Repo…»

[16:09] <Geth> ¦ doc: 2054d3cc80 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Junction.pod6

[16:09] <Geth> ¦ doc: Reword Junction short-cuircuting portion

[16:09] <Geth> ¦ doc: 

[16:09] <Geth> ¦ doc: Closes https://github.com/perl6/doc/issues/2120 D#2120

[16:09] <Geth> ¦ doc: - Expand short-circuiting behavior to include same type of shortcircuiting as

[16:09] <synopsebot> Link: https://doc.perl6.org/type/Junction

[16:09] <Geth> ¦ doc:     performed in `and`/`or` ops

[16:09] <Geth> ¦ doc: - Document it as possible future language feature per

[16:09] <synopsebot> D#2120 [open]: https://github.com/perl6/doc/issues/2120 Junction short-circuiting clarification

[16:09] <Geth> ¦ doc:     https://github.com/perl6/doc/issues/2120#issuecomment-399996522

[16:09] <Geth> ¦ doc: - Feature proposed in R#1963 https://github.com/rakudo/rakudo/issues/1963

[16:09] <synopsebot> R#1963 [open]: https://github.com/rakudo/rakudo/issues/1963 Make Junctions short-curcuit similar to how `and`/`or` do

[16:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/2054d3cc80

[16:13] <Geth> ¦ doc: e7d26b1c7f | (JJ Merelo)++ | doc/Type/Junction.pod6

[16:13] <Geth> ¦ doc: Minor rephrasing and example compilation fixing

[16:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e7d26b1c7f

[16:14] *** wamba joined
[16:15] *** sno left
[16:15] <turdmonkey> woow

[16:15] <turdmonkey> .pat.say for dir;

[16:15] <turdmonkey> .path.say for dir;

[16:15] <evalable6> turdmonkey, rakudo-moar e9351cbaa: OUTPUT: «irc-backup.tar.gz␤bin␤t␤sandbox␤3rdparty␤.gitmodules␤.gitignore␤CONTRIBUTING.md␤Sakefile␤maintenance␤services␤META6.json␤config-default.json␤lib␤config.json␤junk␤.git␤data␤LICENSE␤stdin␤logs␤README.md␤»

[16:16] <turdmonkey> lol

[16:16] <turdmonkey> .path.say for dir("../");

[16:16] <evalable6> turdmonkey, rakudo-moar e9351cbaa: OUTPUT: «../whateverable␤../bloaty␤../perl6-Toaster␤»

[16:16] <Geth> ¦ doc: b347d5e85b | (JJ Merelo)++ | doc/Language/traps.pod6

[16:16] <synopsebot> Link: https://doc.perl6.org/language/traps

[16:16] <Geth> ¦ doc: Puts comments into the code chunk

[16:16] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b347d5e85b

[16:17] <turdmonkey> .path.say for dir("../../../");

[16:17] <evalable6> turdmonkey, rakudo-moar e9351cbaa: OUTPUT: «../../../nadja␤../../../cheapfood␤../../../yuno␤../../../automata␤../../../mary␤../../../bisectable␤../../../ovh␤../../../alex␤../../../anna␤»

[16:17] <turdmonkey> .path.say for dir("../../../../../../");

[16:17] <evalable6> turdmonkey, rakudo-moar e9351cbaa: OUTPUT: «../../../../../../initrd.img.old␤../../../../../../vmlinuz.old␤../../../../../../bin␤../..…»

[16:17] <evalable6> turdmonkey, Full output: https://gist.github.com/f7321deb6ce586985cdf46eecbe5c572

[16:17] <turdmonkey> .path.say for dir("../../../../../");

[16:17] <evalable6> turdmonkey, rakudo-moar e9351cbaa: OUTPUT: «../../../../../initrd.img.old␤../../../../../vmlinuz.old␤../../../../../bin␤../../../../..…»

[16:17] <evalable6> turdmonkey, Full output: https://gist.github.com/f1fe60babcb780c62a42e09d105d04f5

[16:17] <turdmonkey> sorry if I'm spammin, it's kinda cool

[16:17] <turdmonkey> .path.say for dir("../../../../");

[16:18] <evalable6> turdmonkey, rakudo-moar e9351cbaa: OUTPUT: «../../../../initrd.img.old␤../../../../vmlinuz.old␤../../../../bin␤../../../../etc␤../../.…»

[16:18] <timotimo> you can go into #whateverable, too

[16:18] <evalable6> turdmonkey, Full output: https://gist.github.com/a62895b0671580889c36bbe0fc72f3ce

[16:18] <turdmonkey> is that the channel for playing around?

[16:18] <AlexDaniel> sort of, yeah

[16:19] <jmerelo> Reached 100 answers in the dev survey, but it's good if we have a few more. Check it out: https://docs.google.com/forms/d/e/1FAIpQLSdqrrcxTQWuN1ISAvz3j_XkpCCc2AuQw9uKgAhTivxHBFsweg/viewform

[16:19] <turdmonkey> .path.say for dir("../../../../../etc");

[16:19] <evalable6> turdmonkey, rakudo-moar e9351cbaa: OUTPUT: «../../../../../etc/bindresvport.blacklist␤../../../../../etc/ngircd␤../../../../../etc/ufw…»

[16:19] <evalable6> turdmonkey, Full output: https://gist.github.com/380d04be568cebb3f04abcd9f823c453

[16:19] <AlexDaniel> turdmonkey: even though most of the file system is not writable, there are some writable files that are needed for the bot… I advise not to do crazy stuff :)

[16:19] <turdmonkey> Yeah...can't someone screw up your box?

[16:20] *** domidumont left
[16:20] <AlexDaniel> well, you can screw up the bots, it'd take a bit more effort to screw up the box :)

[16:20] *** donaldh joined
[16:20] *** zakharyas joined
[16:20] <AlexDaniel> like maybe through a kernel vulnerability or something like that

[16:20] *** Zoffix joined
[16:20] <Zoffix> turdmonkey: there's also /msg camelia  that works :)

[16:21] <Zoffix> turdmonkey: there's also a penalty for screwing up the box. You… don't wanna know what it is :O

[16:21] <AlexDaniel> e: spurt ‘isitwritable’, ‘foo’

[16:21] <evalable6> AlexDaniel, rakudo-moar e9351cbaa: OUTPUT: «(exit code 1) Failed to open file /home/bisectable/git/whateverable/isitwritable: Read-only file system␤  in block <unit> at /tmp/7ZB0TMvSS9 line 1␤␤»

[16:21] <AlexDaniel> ↑ you see :)

[16:21] <AlexDaniel> e: slurp ‘config.json’

[16:21] <evalable6> AlexDaniel, rakudo-moar e9351cbaa: OUTPUT: «(exit code 1) Failed to open file /home/bisectable/git/whateverable/config.json: Permission denied␤  in block <unit> at /tmp/E65kMFQxGW line 1␤␤»

[16:22] <AlexDaniel> there are limits for the number of started processes, used memory, and maybe some other stuff I don't remember right now

[16:22] <AlexDaniel> like, /tmp is private for each bot

[16:23] <AlexDaniel> it's definitely not very secure, but it would take some dedicated effort to screw things up :)

[16:23] <Zoffix> m: await IO::Socket::Async.connect('irc.freenode.net', 6667 ).then({given .result {.print("NICK Camelia_\nturdmonkey, don't mess around or else! :P\n"); react {whenever .Supply {}}}})

[16:23] <AlexDaniel> right :)

[16:23] <camelia> rakudo-moar e9351cbaa: OUTPUT: «(timeout)»

[16:23] <Zoffix> hm..

[16:24] <Zoffix> e: await IO::Socket::Async.connect('irc.freenode.net', 6667 ).then({given .result {.print("NICK Camelia_\nturdmonkey, don't mess around or else! :P\n"); react {whenever .Supply {}}}})

[16:24] <timotimo> you need to PRIVMSG

[16:24] <Zoffix> oh, right

[16:24] <evalable6> Zoffix, rakudo-moar e9351cbaa: OUTPUT: «(signal SIGHUP) «timed out after 10 seconds»»

[16:24] <Zoffix> m: await IO::Socket::Async.connect('irc.freenode.net', 6667 ).then({given .result {.print("NICK Camelia_\nPRIVMSG #perl6 turdmonkey, don't mess around or else! :P\n"); react {whenever .Supply {}}}})

[16:24] <Zoffix> Well, now it's not as fun :P

[16:24] <turdmonkey> lol

[16:24] <Zoffix> Missing join

[16:24] <camelia> rakudo-moar e9351cbaa: OUTPUT: «(timeout)»

[16:24] <Zoffix> oh well

[16:24] <timotimo> true, though some channels allow messages without joining IIRC

[16:25] <timotimo> a mode you'd have to set manually, i expect

[16:25] <turdmonkey> AlexDaniel, never underestimate hackers.

[16:25] <AlexDaniel> I remember when this stuff came up when I was searching for regressions by rerunning a lot of m: snippets from irc logs :)

[16:25] <turdmonkey> "Dedicated effort" practically defines them

[16:25] <geekosaur> it's defaulting off recently because of spam attacks from around 6 months ago

[16:26] <AlexDaniel> turdmonkey: correct, but at least we'll be able to observe their dedicated effort publicly :)

[16:26] <AlexDaniel> turdmonkey: at least *ables don't answer on private messages

[16:26] *** Tison joined
[16:27] *** Camelia_ joined
[16:27] <Camelia_> turdmonkey, don't mess around or else! :P

[16:27] <Zoffix> hehe

[16:27] <turdmonkey> hahahahhaa

[16:27] *** Camelia_ left
[16:27] *** dakkar left
[16:28] *** donaldh left
[16:28] <turdmonkey> hmm

[16:28] *** donaldh joined
[16:28] <turdmonkey> that looks suspiciously like an Arch Linux box m i rite

[16:28] <Zoffix> mhm

[16:28] <AlexDaniel> e: say run <uname -a>

[16:28] <evalable6> AlexDaniel, rakudo-moar e9351cbaa: OUTPUT: «Linux superserver 4.9.0-6-amd64 #1 SMP Debian 4.9.82-1+deb9u3 (2018-03-02) x86_64 GNU/Linux␤Proc.new(in => IO::Pipe, out => IO::Pipe, err => IO::Pipe, exitcode => 0, signal => 0, pid => 16931, command => ["uname", "-a"])␤»

[16:29] <turdmonkey> ;-o

[16:29] <Tison> Zoffix, have you ever given a talk/essay about OOP on Perl 6?

[16:30] <Zoffix> m: use NativeCall; sub system (Str) is native {}; system 'uname -a'

[16:30] <camelia> rakudo-moar e9351cbaa: OUTPUT: «Linux camelia 4.4.92-31-default #1 SMP Sun Oct 22 06:56:24 UTC 2017 (1d80e8a) x86_64 x86_64 x86_64 GNU/Linux␤»

[16:30] <turdmonkey> guys, do you have any suggestions for some networking projects in Perl 6, for a relative beginner, some of which use threads?

[16:30] *** dxmxr left
[16:30] <Zoffix> turdmonkey: yeah, fix bugs in IRC::Client :)

[16:30] <turdmonkey> :-O

[16:30] <Zoffix> eco: IRC::Client

[16:30] *** scimon left
[16:30] *** Tideflat left
[16:30] <Zoffix> buggable: yo

[16:30] <buggable> Zoffix, IRC::Client 'Extendable Internet Relay Chat client': https://github.com/zoffixznet/perl6-IRC-Client 6 other matching results: https://modules.perl6.org/s/

[16:30] *** donaldh left
[16:31] *** donaldh joined
[16:31] <Zoffix> turdmonkey: we have a list of most wanted modules: https://github.com/perl6/perl6-most-wanted/blob/master/most-wanted/modules.md#most-wanted-modules

[16:31] <turdmonkey> woah

[16:31] <Zoffix> Tison: nope

[16:31] <turdmonkey> that's a lot

[16:32] <turdmonkey> hmmm

[16:32] <turdmonkey> so does that mean you need an Email::Sender module?

[16:32] *** donaldh left
[16:32] *** donaldh joined
[16:33] <Zoffix> turdmonkey: I'd say it means someone at some point in time added that to the list. Someone else—unaware of it being on the list—might've implemented something. You should check the ecosystem

[16:33] <Zoffix> https://modules.perl6.org/

[16:33] <Zoffix> turdmonkey: also, I think the Perl 6 survey currently going on is asking for what module people want the most. You could wait for results and see

[16:34] <turdmonkey> cool

[16:35] <turdmonkey> I am primarily interested in netowrking since I really need to learn it better

[16:35] <Tison> to construct an object, it jump out a lot of concepts like `new` `BUILD` `bless` `BUILDALL`, hard to clarify relations among them

[16:35] <turdmonkey> I'm learning IO::Socket::INET right now

[16:36] <AlexDaniel> jmerelo: there was no weekly yet, I think that'd give another inflow of answers

[16:36] <jmerelo> Can someone tell me what's wrong with my answer here? https://stackoverflow.com/questions/41433287/how-can-i-get-a-list-of-encodings-that-perl-6-understands/51016808#51016808

[16:36] <raschipi> Tison: You'll usuall just need TWEAK untill you start to really get into it.

[16:37] <Zoffix> I'd say you'll usually need none of them

[16:38] <jmerelo> I have a strong hunch of who's voted it down, and same hunch tells me why, but I really can't see how the answer is unhelfup or not addressing the question. If it does, please say something and I'll happily edit or simply delete it if there's a better answer.

[16:38] <jmerelo> AlexDaniel: but 100 is striking. 

[16:38] <AlexDaniel> jmerelo: ha

[16:39] <Zoffix> jmerelo: it doesn't answer the question: "How to get a list of encodings". You answered only how to see if something's supported if you already have a list

[16:40] <Zoffix> jmerelo: dunno, I'm on bdfoy's shitlist as well and he didn't downvote my answers. Just ignored them and never accepted them. So it's possible your hunch is wrong :)

[16:40] *** raynold joined
[16:40] <jmerelo> Zoffix: it does point to the new code that shows all encodings. But you are right, it does not say so explicitly

[16:41] <turdmonkey> brian d foy?

[16:41] <Zoffix> yeah

[16:41] <turdmonkey> whaaat

[16:41] <turdmonkey> he doesn't like you?

[16:41] <jmerelo> Zoffix: the list is also wrong.

[16:41] <jmerelo> I mean, the link.

[16:41] <Zoffix> jmerelo: I think that'd still just give a list of *rakudo's* encoding. Is there a way to get a list of them from any compliant implementation?

[16:42] <Zoffix> Like some method on Encoding::Registry or something

[16:43] *** brrt joined
[16:44] <jmerelo> Zoffix: I have edited it now. Check out the code. $encodings is a class-scoped variable. I don't see how that could be accessed. Maybe I'm dumb, but I can't see the way.

[16:46] <jmerelo> Zoffix: the block-lexical $encodings get into a class-lexical %lookup. Really can't see how... It does not have any role, or superclass, so that's all there is.

[16:46] <jnthn> Encoding::Registery should probably get a method that fetches all registered encodings. Note that it should make a defensive non-lazy copy to be thread-safe

[16:47] <jmerelo> jnthn: that's what I thought by looking at the code, but I don't know if it's done that way by design or whatever. Right now there does not seem to be a way.

[16:47] <jnthn> No, there's not a way

[16:47] <Zoffix> R#1964

[16:47] <synopsebot> R#1964 [open]: https://github.com/rakudo/rakudo/issues/1964 [RFC] Implement a way to get a list of supported encodings

[16:48] <jmerelo> Zoffix++

[16:48] <jnthn> I added Encoding::Registry in the first place, and just did what was needed to use it in place of what existed before.

[16:48] <jmerelo> jnthn: it was a big improvement, far as I can tell.

[16:49] <jnthn> There's no sense that I didn't think there should be a way to introspect the encodings. I think there should. Just was focused on all the other pieces. :)

[16:49] <jmerelo> jnthn: of course. No problem. 

[16:50] <jmerelo> But you see, digging up unanswered stackoverflow questions brings some joy and improvement to us all (and downvotes to some :-) )

[16:50] *** domidumont joined
[16:51] <jnthn> It's possible we want to add another piece of state to keep track of the actual encodings themselves, since the %lookup has all of the aliases

[16:51] <jnthn> Whereas what a .encodings() method likely wants to return is the Encoding objects themselves

[16:51] <jnthn> From which you can the introspect the name and the aliases

[16:51] <jnthn> *can then

[16:52] *** n1ge left
[16:55] *** Tison left
[16:56] <buggable> New CPAN upload: RDF-Turtle-0.0.2.tar.gz by BDUGGAN http://modules.perl6.org/dist/RDF::Turtle:cpan:BDUGGAN

[16:59] *** zakharyas left
[17:00] *** donaldh left
[17:03] *** Zoffix left
[17:04] *** buggable joined
[17:04] *** ChanServ sets mode: +v buggable

[17:16] <Geth> ¦ whateverable: 04beb801ab | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable.pm6

[17:16] <Geth> ¦ whateverable: Use Bufs and utf8-c8 in get-output

[17:16] <Geth> ¦ whateverable: 

[17:16] <Geth> ¦ whateverable: Otherwise Greppable complains about malformed UTF-8. Maybe a good

[17:16] <Geth> ¦ whateverable: side-effect of this change is that some output will not be normalized.

[17:16] <Geth> ¦ whateverable: 

[17:16] <Geth> ¦ whateverable: See issue #153.

[17:16] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/04beb801ab

[17:16] <turdmonkey> hm, interesting..

[17:17] <turdmonkey> `say $file.absolute;` gives me the absolute path of the file, and `say $file.absolute.path;` looks like it returns not only the absolute path, but also the fact that they are .IO objects?

[17:20] <raschipi> .absolute returns a string and .path returns an IO object

[17:20] <Geth> ¦ doc: 36eee8451a | (JJ Merelo)++ | doc/Type/IO/Path.pod6

[17:20] <Geth> ¦ doc: Index link and symlink as methods/routine

[17:20] <Geth> ¦ doc: 

[17:20] <Geth> ¦ doc: This would close #2121. They are searchable now as routine and

[17:20] <Geth> ¦ doc: methods, with the notation "sub". If this is not address

[17:20] <synopsebot> Link: https://doc.perl6.org/type/IO::Path

[17:20] <Geth> ¦ doc: satisfactorily the OP, feel free to reopen.

[17:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/36eee8451a

[17:20] <Geth> ¦ doc: 62f9619f96 | (JJ Merelo)++ | doc/Type/IO/Path.pod6

[17:20] <Geth> ¦ doc: Changes routine → sub

[17:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/62f9619f96

[17:20] <raschipi> You're looking at their gists, which is a human-recognizable representation of the object

[17:21] <geekosaur> more specifically, "say" invokes the gist method of anything it prints to get a printable representation

[17:23] <turdmonkey> cooool

[17:27] *** natrys joined
[17:29] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/06/25/2018-26-surveying/

[17:29] <raschipi> Yay, lizmat ++

[17:35] <lizmat> decommute&

[17:36] *** lizmat left
[17:36] *** sena_kun left
[17:37] *** sena_kun joined
[17:39] <turdmonkey> I am enjoying learning about perl's concurrency features

[17:40] <turdmonkey> I made my file system printer concurrent wee

[17:40] <jmerelo> turdmonkey: congrats!

[17:40] <turdmonkey> my $channnel - Channel.new();

[17:40] <turdmonkey> =

[17:41] <turdmonkey> ok, now I know what I must do

[17:41] <turdmonkey> Make a concurrent web crawler in perl 

[17:41] *** espadrine joined
[17:41] <turdmonkey> do you guys have any examples of that yet?

[17:42] <turdmonkey> maybe I can contribute

[17:42] <jmerelo> Just a reminder we have a poll going on how to prescribe hash declaration in the docs: https://github.com/perl6/doc/issues/2117#issuecomment-399742781 

[17:42] <jmerelo> I'll leave it running for another 24 hours before closing.

[17:42] <jmerelo> turdmonkey: You mean, as in Mojo::DOM with DOM extraction and the works? To tell you the truth, I still use Mojo::DOM for that...

[17:43] <turdmonkey> I don't know, I haven't looked at that

[17:43] <jmerelo> turdmonkey: but short question is: no, I don't know of any example... Sorry.

[17:43] *** sena_kun left
[17:43] <turdmonkey> No, that's ok.

[17:44] <turdmonkey> I would love to figure it out on my own and then give it to the examples section on the website

[17:44] *** sena_kun joined
[17:44] *** pecastro left
[17:47] *** Zoffix joined
[17:47] *** uzl joined
[17:47] <Zoffix> jmerelo: but we have a Perl 6 implementation of Mojo::DOM already

[17:47] <Zoffix> eco: DOM::Tiny

[17:47] <buggable> Zoffix, DOM::Tiny 'Very small, self-sufficient DOM parser manipulator': https://github.com/zostay/p6-DOM-Tiny 1 other matching results: https://modules.perl6.org/s/DOM%3A%3ATiny

[17:47] <Zoffix> Exactly the same interface

[17:48] <Zoffix> You may want to install with zef --/test; it has a huge and lengthy test suite

[17:49] <jmerelo> Zoffix: ah, that's amazing. I didn't know. Thanks!

[17:51] *** damnlie left
[17:51] *** damnlie joined
[17:51] *** sena_kun left
[17:52] *** sena_kun joined
[17:52] <turdmonkey> I met that guy

[17:53] <turdmonkey> who wrote that

[17:53] <turdmonkey> he was at TPC

[17:53] <turdmonkey> he gave the presentation on perl6 ad the rpi, I think

[17:53] *** kurahaupo left
[17:53] <Zoffix> cool

[17:53] <turdmonkey> yeeeah that's him

[17:53] <turdmonkey> he's cool

[17:53] *** kurahaupo joined
[17:53] <turdmonkey> I may be working for him soon doing network security for ziprecruiter, LOL

[17:56] <uzl> The Spanish translation of Learn X in Y Minutes -- Perl 6 was pushed to the website. It'd greatly benefit from some revision.

[17:56] *** pecastro joined
[17:57] <uzl> link: https://learnxinyminutes.com/docs/es-es/perl6-es/

[17:58] <Zoffix> \o/

[17:59] <turdmonkey> Illegally post-declared type..?

[17:59] <AlexDaniel> that's pretty cool, IIRC there are many responses asking for Spanish docs

[17:59] <AlexDaniel> jmerelo: ↑ :)

[18:00] <Zoffix> turdmonkey: you must declare a type before you use it

[18:00] <Zoffix> m: my Foo $x; class Foo {}

[18:00] <camelia> rakudo-moar e9351cbaa: OUTPUT: «5===SORRY!5===␤Type 'Foo' is not declared␤at <tmp>:1␤------> 3my Foo7⏏5 $x; class Foo {}␤Malformed my␤at <tmp>:1␤------> 3my7⏏5 Foo $x; class Foo {}␤␤»

[18:01] <Zoffix> I forget which one says illegally

[18:01] <Zoffix> But stick def first, or use a stub

[18:01] <Zoffix> m: class Foo {…}; my Foo $x; class Foo {} # the first one is a stub

[18:01] <camelia> rakudo-moar e9351cbaa: ( no output )

[18:03] <Zoffix> lizmat++ # good, and long, weekly

[18:03] <turdmonkey> Zoffix: does this mean that it's a single pass compiler?

[18:03] <Zoffix> turdmonkey: yup

[18:04] <turdmonkey> O really!?

[18:04] <turdmonkey> I figured it was one of those scala-like 23-pass compilers

[18:04] <Zoffix> Yup. It's part of the spec even. You can mutate the language lexically, and unless you execute stuff as you parse, you can't really do it

[18:04] *** Ven`` joined
[18:05] <Zoffix> m: role R {  }; &R

[18:05] <camelia> rakudo-moar e9351cbaa: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Illegally post-declared type:␤    R used at line 1␤␤»

[18:05] <Zoffix> interesting error :/

[18:06] <Zoffix> oh, it's just this:

[18:06] <Zoffix> m: A.new; class A { }

[18:06] <camelia> rakudo-moar e9351cbaa: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Illegally post-declared type:␤    A used at line 1␤␤»

[18:06] <Zoffix> m: class A {…}; A.new; class A { }

[18:06] <camelia> rakudo-moar e9351cbaa: ( no output )

[18:08] *** mcmillhj left
[18:08] *** molaf joined
[18:09] <Zoffix> Filed as R#1965

[18:09] <synopsebot> R#1965 [open]: https://github.com/rakudo/rakudo/issues/1965 [LTA] LTA error when using `&` coercer on a role

[18:11] *** domidumont left
[18:13] <Zoffix> m: BEGIN { $?LANG.refine_slang('MAIN', role { token infix:sym«smaller» { <sym> <O('prec', 'm=', 'assoc', 'left', 'dba', 'chaining', 'iffy', 1, 'diffy', 1, 'pasttype', 'chain')> } } )}; sub infix:<smaller> { $^a < $^b }; say 1 smaller 2 smaller 3

[18:13] <camelia> rakudo-moar e9351cbaa: OUTPUT: «True␤»

[18:14] <Zoffix> m: BEGIN $?LANG.refine_slang('MAIN', role { token apostrophe { <[ - ' \\ ]> } }, role {}); my $foo\bar = 42; say $foo\bar;

[18:14] <camelia> rakudo-moar e9351cbaa: OUTPUT: «42␤»

[18:14] <Zoffix> ^ some examples of mutating the language as you go

[18:14] <turdmonkey> :O

[18:15] <Zoffix> m: sub infix:<♥> { "$^a loves $^b".say }; 42 ♥ 'meows'

[18:15] <camelia> rakudo-moar e9351cbaa: OUTPUT: «42 loves meows␤»

[18:15] <raschipi> And that's doesn't even get into the work being done on macros.

[18:16] <Zoffix> m: sub infix:<¯\(°_o)/¯> { @_.pick }; say 'Coke' ¯\(°_o)/¯ 'Pepsi';

[18:16] <camelia> rakudo-moar e9351cbaa: OUTPUT: «Pepsi␤»

[18:17] <turdmonkey> well that is quite cool

[18:17] <Zoffix> m: sub prefix:<∑> (*@els) { @els.sum };  say ∑ 1, 2, 3, 4;

[18:17] <camelia> rakudo-moar e9351cbaa: OUTPUT: «1234␤»

[18:17] <Zoffix> oh right

[18:17] <turdmonkey> lol

[18:17] <Zoffix> m: sub prefix:<∑> (*@els) is looser(&[,]) { @els.sum };  say ∑ 1, 2, 3, 4;

[18:17] <camelia> rakudo-moar e9351cbaa: OUTPUT: «10␤»

[18:18] <turdmonkey> haha

[18:18] <turdmonkey> that unicode...

[18:19] *** ilogger2 joined
[18:19] *** ChanServ sets mode: +v ilogger2

[18:20] <Zoffix> m: sub infix:<+> (Int $a, Int $b) { $a - $b };  say 2 + 2;

[18:20] <camelia> rakudo-moar e9351cbaa: OUTPUT: «0␤»

[18:20] <Zoffix> And now, for the show's finale! Prepare to be amazed!

[18:20] <raschipi> Now we're getting into the evil side.

[18:20] *** psychoslave joined
[18:20] <Zoffix> m: sub infix:<⁣> { $^a + $^b }; say 2⁣2;

[18:20] <camelia> rakudo-moar e9351cbaa: OUTPUT: «4␤»

[18:21] <Zoffix> magic

[18:21] <Zoffix> :)

[18:21] <raschipi> Doing that for multiplication is more fun.

[18:22] *** mcmillhj joined
[18:23] <raschipi> m: sub infix:<⁣> { $^a * $^b }; sub f(\x) { x³ - 3⁣x² + 2⁣x }; f 4

[18:23] <camelia> rakudo-moar e9351cbaa: ( no output )

[18:23] <raschipi> m: sub infix:<⁣> { $^a * $^b }; sub f(\x) { x³ - 3⁣x² + 2⁣x }; say f 4

[18:23] <camelia> rakudo-moar e9351cbaa: OUTPUT: «3912␤»

[18:24] <Zoffix> u: <⁣>

[18:24] <unicodable6> Zoffix, U+003C LESS-THAN SIGN [Sm] (<)

[18:24] <unicodable6> Zoffix, U+2063 INVISIBLE SEPARATOR [Cf] (control character)

[18:24] <unicodable6> Zoffix, U+003E GREATER-THAN SIGN [Sm] (>)

[18:25] *** ilogger2 joined
[18:25] *** ChanServ sets mode: +v ilogger2

[18:30] *** dct joined
[18:30] *** brrt joined
[18:30] *** sno joined
[18:33] *** mcmillhj joined
[18:43] <Geth> ¦ doc: acc6730ff7 | (Will "Coke" Coleda)++ | doc/Language/traps.pod6

[18:43] <synopsebot> Link: https://doc.perl6.org/language/traps

[18:43] <Geth> ¦ doc: whitespace

[18:43] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/acc6730ff7

[18:55] <El_Che> jmerelo: what's happening :)

[18:55] <jmerelo> El_Che: nothing unexpected. 

[18:56] *** benjikun joined
[18:56] <jmerelo> I'm going AFK right now :-)

[18:56] *** mcmillhj left
[19:01] *** splatt9990 joined
[19:03] *** bwisti joined
[19:05] <turdmonkey> Yes, DOMTiny and HTTPUserAgen are perfect

[19:07] *** benjikun2 joined
[19:09] *** benjikun left
[19:09] *** benjikun2 is now known as benjikun

[19:10] *** _uzl joined
[19:10] <turdmonkey> the MAIN sub is absolutely spectacular

[19:11] *** bwisti left
[19:12] *** _uzl left
[19:13] <moritz> yes, very useful

[19:14] <El_Che> .tell jmerelo if spain keep playing like that I will be force to cheer the other team :)

[19:14] <yoleaux> El_Che: I'll pass your message to jmerelo.

[19:16] <El_Che> turdmonkey: out of the box, mmm, not really

[19:16] <El_Che> turdmonkey: with this: sure! https://docs.perl6.org/language/functions#%*SUB-MAIN-OPTS

[19:16] <El_Che> turdmonkey: https://docs.perl6.org/language/functions#named-anywhere

[19:18] <turdmonkey> oh my

[19:18] <Geth> ¦ ecosystem: nicqrocks++ created pull request #400: Move Git::Wrapper to GitLab

[19:18] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/400

[19:18] *** mcmillhj joined
[19:21] *** brrt left
[19:22] *** bwisti joined
[19:23] *** mcmillhj left
[19:23] *** wamba joined
[19:27] <[Coke]> m: say "🏩".uninames;

[19:27] <camelia> rakudo-moar e9351cbaa: OUTPUT: «(LOVE HOTEL)␤»

[19:27] *** lizmat joined
[19:27] <[Coke]> O_o; . o O (thanks, 🗾)

[19:28] * lizmat waves from SLC

[19:28] <yoleaux> 18:26Z <samcv> lizmat: i was disapointed that it didn't let me choose multiple options for what my most proficient languages

[19:28] <El_Che> samcv: indeed

[19:29] <[Coke]> lizmat: You at the airport? Safe travels!

[19:30] <El_Che> samcv: benjikun did the poll (iirc)

[19:30] <AlexDaniel> samcv: you're not the only one, some people wrote more than one in Other… field

[19:31] <benjikun> yoleaux: Yeah I saw some people on reddit were disappointed about the language question alongside not being able to choose multiple text editors

[19:31] <yoleaux> 10:57Z <Zoffix> benjikun: you wanted to add links to rakudo.org The sauce is here: https://github.com/perl6/rakudo.org/  The templates are in templates/  Add [REAPP] (including brackets) to commit title to restart the app with your changes

[19:31] <benjikun> We'll certainly do that next time

[19:31] <El_Che> benjikun++

[19:32] <AlexDaniel> benjikun: fwiw the unicode question is a bit wrong I think, something to fix for the next time also

[19:32] <benjikun> It's a little crowded with the answer choices

[19:32] <benjikun> but I know why you wanted the data, nevertheless

[19:32] *** mcmillhj joined
[19:33] <benjikun> does seem useful

[19:33] <AlexDaniel> benjikun: it says “No, and I don't want to use unicode characters in my source code” but for some people I'd expect the answer is “Yes I can, but I don't want …”

[19:33] <lizmat> [Coke] yeah, waiting for things to happen

[19:33] <[Coke]> (languages) what's this from?

[19:33] <AlexDaniel> [Coke]: survey

[19:33] <AlexDaniel> “Not including Perl 6, what language are you most proficient in?”

[19:34] <turdmonkey> "In what languages are you most proficient"

[19:34] <[Coke]> AlexDaniel: What survey?

[19:34] <turdmonkey> Anything less than utterly perfect grammar is punishable by DEATH

[19:34] <AlexDaniel> [Coke]: https://docs.google.com/forms/d/e/1FAIpQLSdqrrcxTQWuN1ISAvz3j_XkpCCc2AuQw9uKgAhTivxHBFsweg/viewform

[19:36] <benjikun> [Coke]: We're still taking answers

[19:36] <benjikun> wanted to snatch the people that look at p6weekly

[19:37] *** mcmillhj left
[19:37] <AlexDaniel> [Coke]: btw this was posted on twitter, on reddit, on facebook, and it was mentioned in p6weekly… It was only up for like one day, but it makes me wonder, is there any other social media platform that we forgot? Something that you follow?

[19:38] <Geth> ¦ p6-sake: 5ed74a9da2 | (Tom Browder)++ (committed using GitHub Web editor) | README.md

[19:38] <Geth> ¦ p6-sake: think this word (alike) is the intended one

[19:38] <Geth> ¦ p6-sake: review: https://github.com/perl6/p6-sake/commit/5ed74a9da2

[19:40] <[Coke]> I didn't see it on twitter or FB, and I'm not on reddit.

[19:40] <[Coke]> I haven't gone through this week's weekly yet.

[19:40] <El_Che> facebook is woolfy

[19:43] <[Coke]> where was it posted on twitter?

[19:43] <[Coke]> Perhaps there's another account for me to follow (and never see actual updates from because twitter is a firehose)

[19:43] <El_Che> I saw it in Zoffix feed

[19:43] *** mcmillhj joined
[19:44] <El_Che> [Coke]: https://twitter.com/perl6org

[19:44] <El_Che> (retweeted it)

[19:44] <El_Che> I suspect Zoffix manage that account

[19:44] <moritz> I do, actually

[19:44] <El_Che> I remember now

[19:44] <El_Che> I knew that :)

[19:45] <moritz> though I wouldn't mind handing the password to another person who is willing to help me

[19:45] <moritz> (not that it's very much to do, but having a backup never hurts)

[19:46] <El_Che> feel free to ping me if you need a backup

[19:46] <El_Che> brb, last minutes of match :)

[19:46] <turdmonkey> woah woah

[19:47] <turdmonkey> Moritz as in Moritz Lenz, the guy who wrote Perl 6 Fundamentals and the Regex one?

[19:47] <moritz> turdmonkey: the very same; I take you read at least one of them? :)

[19:47] <turdmonkey> Both.

[19:47] <moritz> nice :-)

[19:47] <turdmonkey> I like how dense they are.

[19:47] <turdmonkey> No fluff.

[19:47] <turdmonkey> Like the K&R C of Perl 6

[19:48] <moritz> I'd a appreciate a rating on amazon, btw :-)

[19:48] <turdmonkey> Of course

[19:48] <moritz> (don't need to write pages of review)

[19:48] *** mcmillhj left
[19:49] <El_Che> ok, jmerelo lost some hair today

[19:49] *** joya joined
[19:52] <[Coke]> jmerelo had hair to lose? <monty python>Luxury!</monty>

[19:53] <Geth> ¦ ecosystem: 10699c899c | Nic++ (committed using GitHub Web editor) | META.list

[19:53] <Geth> ¦ ecosystem: Move Git::Wrapper to GitLab

[19:53] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/10699c899c

[19:53] <Geth> ¦ ecosystem: f1a05ab2f5 | Nic++ (committed using GitHub Web editor) | META.list

[19:53] <Geth> ¦ ecosystem: Merge pull request #400 from nicqrocks/patch-1

[19:53] <Geth> ¦ ecosystem: 

[19:53] <Geth> ¦ ecosystem: Move Git::Wrapper to GitLab

[19:53] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/f1a05ab2f5

[20:01] <pmurias> http://blogs.perl.org/users/pawel_murias/2018/06/the-start-of-the-graalvmtruffle-experiment.html - my new blog post

[20:02] <timotimo> pmurias: is that "with" supposed to be "without"?

[20:02] <El_Che> pmurias: just to late for the weekly :(

[20:03] *** mcmillhj joined
[20:04] <AlexDaniel> not too late! It's at least 6 days earlier!

[20:04] *** raschipi joined
[20:04] <turdmonkey> is "~$url" anything special? the tilde?

[20:05] <turdmonkey> is it the bit negation?

[20:05] <AlexDaniel> it's stringification

[20:05] <AlexDaniel> m: dd ~5

[20:05] <camelia> rakudo-moar e9351cbaa: OUTPUT: «"5"␤»

[20:05] <AlexDaniel> m: dd 5

[20:05] <camelia> rakudo-moar e9351cbaa: OUTPUT: «5␤»

[20:06] <turdmonkey> ahh, that's right, '~' is the "string operator" right?

[20:06] <turdmonkey> it is the Master String

[20:08] *** mcmillhj left
[20:09] <raschipi> It's the string in "String".

[20:11] <turdmonkey> hm, that's pretty cool

[20:12] <lizmat> weekly: http://blogs.perl.org/users/pawel_murias/2018/06/the-start-of-the-graalvmtruffle-experiment.html

[20:12] <notable6> lizmat, Noted!

[20:14] <pmurias> hopefully it will pass a lot more tests by next week :)

[20:17] *** mcmillhj joined
[20:17] <El_Che> pmurias: I like your attitude!

[20:18] <raschipi> Not even unprecendented, it was like that for the javascript backend.

[20:20] *** zachk joined
[20:20] <timotimo> i have a feeling that pmurias might know a thing or two about the javascript backend

[20:20] *** Ven`` joined
[20:21] *** zachk left
[20:22] *** zachk joined
[20:22] <raschipi> I know and I was just going to ask him about it.

[20:23] *** zachk left
[20:23] *** zachk joined
[20:23] <raschipi> pmurias: you plan to run rakudojs just in node.js or in browsers too?

[20:28] <benjikun> raschipi: From one of his previous blog posts: "As part of working on making Rakudo.js run in the browser.."

[20:29] <raschipi> Oh, right. So just the graal interpreter embedded in node.js isn't enough.

[20:36] <pmurias> raschipi: the browser is the vastly more important target for the js backend :)

[20:37] <raschipi> Will the JIT generate asm.js? :p

[20:38] <turdmonkey> I'm trying to use HTTPUserAgent and DOMTiny to get the source from a web page and then extract the links, but I'm getting an odd error

[20:38] <turdmonkey> https://pastebin.com/xtqrVcDL

[20:39] <turdmonkey> "Cannot resolve caller AUTOGEN(DOM::Tiny: HTTP::Response); none of these signatures match:

[20:39] <turdmonkey> (DOM::Tiny:U $: Str:D $html, Bool :$xml is copy, *%_ --> DOM::Tiny:D)

[20:39] <turdmonkey> (DOM::Tiny:D $: Str:D $html, Bool :$xml, *%_ --> DOM::Tiny:D)

[20:39] <turdmonkey> in sub MAIN at dom.p6 line 14

[20:39] <turdmonkey> in block <unit> at dom.p6 line 8

[20:41] <pmurias> raschipi: on which backend?

[20:41] <lizmat> boarding&

[20:41] *** lizmat left
[20:41] <pmurias> raschipi: the graalvm team has some vague plans to maybe run on webassembly once it matures but I don't count on it

[20:42] <geekosaur> turdmonkey, an HTTP::Response will contain the page, but is not only the page text. Possibly stringifying it will do what you want

[20:43] <geekosaur> that is, DOM::Tiny.parse(~$response)

[20:45] *** dcorzine joined
[20:45] <turdmonkey> I see.

[20:46] *** labster joined
[20:47] <turdmonkey> Yay

[20:48] <pmurias> raschipi: the truffle backend is not a replacement for the js one (which is not abandoned)

[20:48] <raschipi> DOM::Tiny could have an AUTOGEN candidate that accepted an HTTP::Response and did the right thingwith it... Gonna implement it tonight, someone thinks that's not a good idea?

[20:48] <turdmonkey> Isn't one of Perl's biggest upsides "DWIM" ?

[20:48] <raschipi> pmurias: I got that, I was just thinking about their relationship.

[20:48] <benjikun> lizmat: airplane?

[20:48] <benjikun> stay safe

[20:49] <raschipi> She's safer while flying than at the airport.

[20:49] <benjikun> true

[20:50] <turdmonkey> raschipi: Can I see how you do it? How are you going to start?

[20:50] <geekosaur> turdmonkey, yes, but someone has to think of it :)

[20:50] <geekosaur> in this case it'd just do what you did: see it got an HTTP::Response ibject and stringify it

[20:51] <geekosaur> then possibly nextwith to pass it to the correct candidate

[20:51] <geekosaur> *see if it

[20:52] <raschipi> It would be very short, something like copying something like this: (Str:D $html, Bool :$xml, *%_ --> DOM::Tiny:D) into (Str( HTTP::Response) $html, Bool :$xml, *%_ --> DOM::Tiny:D) and then calling the already existing function.

[20:52] <raschipi> method, rather

[20:52] *** Zoffix joined
[20:53] <Zoffix> turdmonkey: if all you're trying to do is fetch content, you could take WWW module for a spin instead

[20:53] <raschipi> with nextsame instead of nextwith, I think. Perhaps detect the filetype and fill the :$xml argument automatically.

[20:53] <Zoffix> eco: WWW

[20:53] <buggable> Zoffix, WWW 'No-nonsense, simple HTTPS client with JSON decoder': https://github.com/zoffixznet/perl6-WWW 5 other matching results: https://modules.perl6.org/s/WWW

[20:53] <Zoffix> raschipi: how will you get the right type?

[20:53] <Zoffix> runtime loading?

[20:53] <turdmonkey> Zoffix: I will look into that, too. I want to make a script which will crawl a web page, and then I want to use GTK later on to visualize the data

[20:54] *** mcmillhj left
[20:54] <Zoffix> IMO trying to do that is over-engineering. There's like half a dozen, if not more, of HTTP fetching modules.

[20:54] <Zoffix> (the HTTP::Response thing, not the crawling thing)

[20:55] <turdmonkey> Thanks for pointing me in the right direction. I'm not very familiar with the Perl 6 ecosystem yet

[20:55] <raschipi> What about making HHTP::Response Stringy?

[20:56] <geekosaur> that sounds like more of a win, yes. I think most other uses you;d have for it (e.g. extracting cookies or other HTTP headers) would use method calls --- but doublecheck that first

[20:57] <geekosaur> things could get interesting if it does Positional or Associative, etc.

[20:57] *** n1ge joined
[20:58] <raschipi> Yeah, I would rather not make it THAT interesting of an object...

[20:58] <geekosaur> DWIM, WAT

[20:59] <raschipi> Make it Cool, Stringfy to get the text and numify to get the status code

[21:02] *** Ven`` left
[21:02] *** Ven`` joined
[21:04] <Zoffix> e: constant term:<😎> = Cool; say 42 ~~ 😎; multi is-cool($ where 😎) { say "it's cool, bruh" }; multi is-cool(|) { say "ain't cool" }; is-cool 42; is-cool class UnCool {}

[21:04] <evalable6> Zoffix, rakudo-moar e9351cbaa: OUTPUT: «True␤it's cool, bruh␤ain't cool␤»

[21:05] * Zoffix is disappointed multi is-cool(😎) didn't want to compile

[21:06] <raschipi> Cool

[21:06] <raschipi> Hugs and kisses everyone, my wifeis here I'm going home. Later.

[21:06] *** raschipi left
[21:08] <Zoffix> m: BEGIN $?LANG.refine_slang: 'MAIN', role { token identifier { '😎' | <.ident> [ <.apostrophe> <.ident> ]* } }; constant 😎 = Cool;  multi is-cool( 😎) { say "it's cool, bruh" }; multi is-cool(|) { say "ain't cool" }; is-cool 42; is-cool class UnCool {}

[21:08] <camelia> rakudo-moar e9351cbaa: OUTPUT: «it's cool, bruh␤ain't cool␤»

[21:08] <Zoffix> hahahaaha :D

[21:08] *** wamba left
[21:09] *** mcmillhj joined
[21:11] *** Ven`` left
[21:11] <geekosaur> Cool and the gang?

[21:12] <benjikun> *Kool and the gang

[21:14] *** mcmillhj left
[21:14] *** Zoffix left
[21:15] <geekosaur> yes, that was the joke (riffing on Zoffix's Cool shenanigans)

[21:16] *** margeas joined
[21:17] <turdmonkey> Ah, I see that DOMTiny talks about stringification in the docs now

[21:17] *** smls joined
[21:17] <turdmonkey> If you convert the DOM::Tiny object to a string using Str, ~, or putting it in a string, it will render the markup.

[21:18] <smls> m:  class A { method FLATTENABLE_LIST { () }};  sub a (:$a) { };  a |A.new;

[21:18] <camelia> rakudo-moar e9351cbaa: OUTPUT: «This type (List) does not support elems␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:18] <turdmonkey> Now, to make it concurrent...

[21:18] <smls> ^^ What's that error about?

[21:20] *** Zoffix joined
[21:21] <Zoffix> smls: it wants an NQP list, not a Perl 6 one

[21:21] <smls> Ah.

[21:21] <Zoffix> smls: also, that method is very much secret sauce and it shouldn't be shown to users.

[21:21] <smls> But I'm implementing my own Hash-like type... :P

[21:22] <Zoffix> Use the available public methods. And if those are not enough, file an Issue.

[21:23] <smls> What methods are available to control binding of the type to signatures?

[21:23] <smls> I thought that's what FLATTENABLE_LIST and FLATTENABLE_HASH are for...

[21:23] <Zoffix> Dunno, give me an example?

[21:24] <smls> s/binding/flattening/

[21:25] <smls> like:

[21:25] <smls> m:  sub a (*@a, *%a) { dd @a; dd %a };  a |Hash.new("a" => 42);

[21:25] <camelia> rakudo-moar e9351cbaa: OUTPUT: «[]␤{:a(42)}␤»

[21:26] <smls> If I replace  Hash.new  with  MyHash.new  then what do I need to add to class MyHash to get the same output?

[21:26] <Zoffix> m: class A is Hash { }; sub a { dd @_; dd %_ };  a |A.new("a" => 42);

[21:26] <camelia> rakudo-moar e9351cbaa: OUTPUT: «[]␤{:a(42)}␤»

[21:26] <Zoffix> That's all I know.

[21:28] <smls> Hm... 

[21:28] <timotimo> don't you want to change the .Capture of your class?

[21:28] <smls> timotimo: No, that's separate.

[21:28] <Zoffix> Capture would just affect signature unpacking, not slipping.

[21:29] *** mcmillhj joined
[21:29] <timotimo> OK

[21:29] <Zoffix> m: class A { has $.a; method Capture { \(<meow>, :$!a) }  }; sub a ($ (*@_, *%_)) { dd @_; dd %_ };  a |A.new("a" => 42);

[21:29] <camelia> rakudo-moar e9351cbaa: OUTPUT: «Default constructor for 'A' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»

[21:29] <Zoffix> m: class A { has $.a; method Capture { \(<meow>, :$!a) }  }; sub a ($ (*@_, *%_)) { dd @_; dd %_ };  a |A.new(a => 42);

[21:29] <camelia> rakudo-moar e9351cbaa: OUTPUT: «["meow"]␤{:a(42)}␤»

[21:31] *** splatt9990 left
[21:31] <smls> I wonder to what extend one can override all behavior when subclassing from Hash, and what performance overhead it would have to carry the unused baseclass internals around...

[21:33] <Zoffix> Filed R#1966

[21:33] <synopsebot> R#1966 [open]: https://github.com/rakudo/rakudo/issues/1966 [RFC] Ability to specify how an object flattens in signatures

[21:34] *** mcmillhj left
[21:35] <Zoffix> smls: FWIW, if you go the Hash route, keep it mind it won't init your attribute defaults with its default new

[21:35] <Zoffix> m: class A is Hash { has $.a = 42 }; dd A.new

[21:35] <camelia> rakudo-moar e9351cbaa: OUTPUT: «{}␤»

[21:36] <Zoffix> m: class A is Hash { has $.a = 42; method new {self.bless: |%_} }; dd A.new

[21:36] <camelia> rakudo-moar e9351cbaa: OUTPUT: «{}␤»

[21:36] <Zoffix> um

[21:37] <Zoffix> right, it's got it's own perl too

[21:37] <smls> :P

[21:37] <Zoffix> m: class A is Hash { has $.a = 42; method perl { dd $!a } }; dd A.new.perl

[21:37] <camelia> rakudo-moar e9351cbaa: OUTPUT: «Any $!a = Any␤Nil␤»

[21:38] <Zoffix> m: class A is Hash { has $.a = 42; method new { self.bless: |%_ }; method perl { dd $!a } }; A.new.perl

[21:38] <camelia> rakudo-moar e9351cbaa: OUTPUT: «Int $!a = 42␤»

[21:38] *** sena_kun joined
[21:38] <Zoffix> That's RT#130020

[21:38] <synopsebot> RT#130020 [open]: https://rt.perl.org/Ticket/Display.html?id=130020 [RFC][@LARRY] Create a set of conventions to minimize impact internal changes to user's code

[21:38] * Zoffix &

[21:38] *** Zoffix left
[21:39] <turdmonkey> Is Zoffix in the background now?

[21:39] <smls> Yeah, Perl 6 built-in types don't make it easy to subclass them. I think I once tried it with List but gave up and went the "A does Positional does Iterable" route with a private List attribute instead...

[21:39] <masak> turdmonkey: Zoffix is so in the background, he even logged off! :)

[21:40] <masak> (but yes, "in the background" is what that shorthand means)

[21:40] <AlexDaniel> fg

[21:48] *** mcmillhj joined
[21:51] *** smls left
[21:53] *** mcmillhj left
[22:04] <turdmonkey> hahaaaa

[22:05] <turdmonkey> 12 lines of code(excluding the preable stuff) to make a crawler which prints the data to a file

[22:05] <turdmonkey> preamble*

[22:06] *** evalable6 joined
[22:06] *** ChanServ sets mode: +v evalable6

[22:06] *** quotable6 joined
[22:06] *** ChanServ sets mode: +v quotable6

[22:06] *** reportable6 joined
[22:06] *** notable6 joined
[22:06] *** ChanServ sets mode: +v reportable6

[22:06] *** ChanServ sets mode: +v notable6

[22:06] *** benchable6 joined
[22:06] *** committable6 joined
[22:06] <turdmonkey> Hm, I could save some lines by making it more idiomatic e.g `spurt "linkfile", "$e<a href>";`

[22:06] <turdmonkey> LOL one line...

[22:06] <turdmonkey> wtf..

[22:06] <turdmonkey> perl 6 is cool

[22:10] <AlexDaniel> turdmonkey: well, I can probably give some bonus hints to make it even shorter if you can show the code :)

[22:10] <turdmonkey> for hahaha

[22:11] <turdmonkey> alright, i'll show it the first time I wrote it, which is not very idiomatic.

[22:11] <Juerd> turdmonkey: Care to share the line? :)

[22:12] <turdmonkey> https://pastebin.com/tnv6WGDq

[22:12] <AlexDaniel> hm can't you do my $ua = HTTP::UserAgent.new: :10timeout;

[22:12] <turdmonkey> I can?

[22:13] <AlexDaniel> or any other form that you prefer, HTTP::UserAgent.new(timeout => 10)

[22:13] <turdmonkey> oooo

[22:14] <AlexDaniel> that doesn't work, weird

[22:16] <turdmonkey> hmm

[22:17] <turdmonkey> the first one works

[22:17] <turdmonkey> .new: :10timeout;

[22:17] <AlexDaniel> turdmonkey: it does nothing silently

[22:17] <AlexDaniel> the timeout is still 180

[22:18] <turdmonkey> hahahahaha

[22:18] *** raschipi joined
[22:18] *** mcmillhj joined
[22:19] <turdmonkey> ok, this is a little weird

[22:19] <AlexDaniel> turdmonkey: I created this ticket: https://github.com/sergot/http-useragent/issues/206 :)

[22:20] <turdmonkey> when i run "$fh.print($e<a href>, ':', $e.text, "\n");"

[22:21] <turdmonkey> it prints everything to the file with (Str) in front ((Str) /community/):Community

[22:22] <AlexDaniel> just $e<href> ?

[22:22] <turdmonkey> but when i run "$fh.say($e<a href>, ':', $e.text); it prints everything to the file properly, but I get this error

[22:22] <turdmonkey> "Use of uninitialized value of type Str in string context.

[22:22] <turdmonkey> Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.

[22:22] <AlexDaniel> yeah

[22:22] <turdmonkey> in block  at dom.p6 line 17"

[22:23] <AlexDaniel> turdmonkey: so I'd guess that $e is your <a …> tag already

[22:23] <AlexDaniel> turdmonkey: and it's associative so you can access the attributes with {'href'} or <href>

[22:23] <AlexDaniel> but there's no ‘a’ attribute

[22:23] <AlexDaniel> am I right?

[22:24] *** mcmillhj left
[22:24] *** mcmillhj joined
[22:24] <turdmonkey> Yes, you are correct.

[22:25] <turdmonkey> Thanks.

[22:25] <turdmonkey> Is it just me, or are there a lot of quirks? I tend to assume things are my fault, since I am not familiar with the Perl 6 syntax, but I come across strange errors on a regular basis

[22:26] <turdmonkey> I also haven't learned a new language in a while, so perhaps I am biased.

[22:28] <timotimo> we consider bad error messages a bug, maybe you've got something we can fix?

[22:29] <turdmonkey> Well, I don't know if i's a "bad error message", since it directly told me what was happening.

[22:29] <turdmonkey> I think it was my fault for not being familiar with the module

[22:30] <raschipi> You just need a little more practice to become fluent, it's the same in any other language.

[22:33] <Juerd> There are also actual quirks :)

[22:35] <AlexDaniel> Juerd: btw I'm serious about the style guide :)

[22:35] <Juerd> My memory fails me. What was that again?

[22:35] <AlexDaniel> Juerd: https://github.com/perl6/roast/issues/439#issuecomment-400110713

[22:36] *** mcmillhj left
[22:36] <Juerd> AlexDaniel: I don't have sufficient experience with Perl 6 yet to write such a document. I can comment on specific things.

[22:36] <benjikun> AlexDaniel: https://github.com/sergot/http-useragent/blob/master/lib/HTTP/UserAgent.pm6#L75

[22:37] <AlexDaniel> Juerd: well, I'm expecting others to chime in, so all it needs is just a start :)

[22:37] <benjikun> wouldn't they need timeout included as a BUILD argument to make that an option at declaration

[22:37] <Juerd> But even then, I'm not going to write a list of "consider using <alternative>" because nobody likes to read that. I'm familiar with training and instructing people, and they want to hear "do this, don't do that", and they're intelligent enough to realise that there are always exceptions.

[22:37] <AlexDaniel> benjikun: another option is to remove the BUILD method entirely

[22:37] <Juerd> AlexDaniel: If it's a collaborative effort, we'll just get deadlocked in bikeshedding, I'm sure.

[22:37] <AlexDaniel> benjikun: some initialization can be done in TWEAK

[22:37] <benjikun> ah, true

[22:38] <AlexDaniel> Juerd: I'm more optimistic about this :)

[22:39] <Juerd> AlexDaniel: I'm not; will send a private message with some more details in a minute

[22:41] *** mcmillhj joined
[22:48] <benjikun> Juerd: are you talking just about that issue on GitHub in relation to bikeshedding or work as a whole

[22:53] <benjikun> am I missing part of this conversation

[22:54] <AlexDaniel> greppable6: \<\-\>

[22:54] <greppable6> AlexDaniel, 124 lines, 36 modules: https://gist.github.com/c53627c55a1569076f4ae4bc96c3b4a4

[22:54] <AlexDaniel> wtf where's markdown rendering?

[22:55] <timotimo> any | that weren't escaped properly? or html somehow ended up inside something somewhere?

[22:57] *** sena_kun left
[22:57] <AlexDaniel> timotimo: I clicked `Edit`, then `Save`, and now it's rendering properly:

[22:57] <AlexDaniel> https://gist.github.com/AlexDaniel/dc3ddc5fbc7e98f8a18e0a9e445b38d0

[22:57] <joya> question: is it normal that if you assign an rhs hash value to an lhs hash variable, its keys are stringified?

[22:58] <Juerd> benjikun: Writing a style guide collaboratively would result in an infinite bikeshed.

[22:59] <benjikun> oh, I see

[22:59] <benjikun> yeah that's a possibility

[22:59] <AlexDaniel> joya: yes, I think. You probably want to use binding := and maybe there are some helpful hints on https://docs.perl6.org/language/hashmap#Non-string_keys_(object_hash)

[23:01] <Juerd> benjikun: Write anonymous hashes with {}, says the person who follows the design and knows this was the originally intended way to write them. Write hashes with %(), says the person who got bitten by parsing rules that caused their {} to be interpreted as a block. No, use "hash", I say, because that seems to be the only way to do so reliably -- even though I would have preferred "{}" otherwise, and I

[23:01] <Juerd> personally haven't been bitten by it that much yet. No, just don't write anonymous hashes, just initialize named ones with a list of pairs, I expect someone to comment at some point.

[23:02] <Juerd> With %() I meant %(something), of course, with 'something' being any of the numerous options available.

[23:02] <Juerd> Including whitespace.

[23:02] <benjikun> I know what you mean, perhaps we just need to choose one and stick with it

[23:02] <AlexDaniel> s:g/anonymous/empty/ :)

[23:02] <Juerd> AlexDaniel: Empty and anonymous

[23:02] <benjikun> and force it in docs for newcomers

[23:03] <Juerd> benjikun: That too is controversial. Some (most) appear to want the docs not to stick to any single solution, but instead be sufficiently descriptive of code that's already in the wild.

[23:04] <Juerd> Personally, I don't like "hash", but I value easy teaching and maintainability over other arguments, so for me it's still a clear winner.

[23:04] <benjikun> will inevitably make Perl 6 seem convoluted and tricky to newbies, but expressive and personal to long-timers

[23:05] <benjikun> lots of trade-offs

[23:09] <benjikun> I suppose it all falls on how our docs and first-time resources are setup

[23:13] *** itaylor57 joined
[23:14] *** cpage_ joined
[23:17] *** cpage_ is now known as cpage

[23:20] *** BenGoldberg joined
[23:21] *** skids joined
[23:28] *** subroot joined
[23:36] *** Khisanth joined
[23:39] *** pecastro_ joined
[23:50] *** margeas left
[23:57] <joya> AlexDaniel: 😊

[23:58] <joya> that is strange behaviour, though 

[23:58] <joya> i mean, you wouldn't expect a deep copy of a typed container to erase types

[23:59] *** mcmillhj left
