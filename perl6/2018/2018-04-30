[00:04] *** Zoffix left
[00:05] *** ryn1x left
[00:10] *** entonian joined
[00:11] *** llfourn left
[00:14] *** llfourn joined
[00:14] *** entonian left
[00:26] *** rindolf left
[00:30] *** |oLa|1 left
[00:30] *** |oLa| joined
[00:37] *** [particle] left
[00:37] *** [particle] joined
[00:39] <Geth> ¦ ecosystem: 893ff08fd5 | (Fernando Correa de Oliveira)++ (committed using GitHub Web editor) | META.list

[00:39] <Geth> ¦ ecosystem: Add JSON::Stream to the ecosystem

[00:39] <Geth> ¦ ecosystem: 

[00:39] <Geth> ¦ ecosystem: Add JSON::Stream (https://github.com/FCO/JSON-Stream) to the ecosystem

[00:39] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/893ff08fd5

[00:54] <sauvin> I'll be damned... perl6 actually dumped core.

[00:55] *** mryan joined
[00:55] *** mcmillhj joined
[01:00] *** Kaiepi left
[01:00] *** Kaiepi joined
[01:02] *** markong left
[01:04] *** [particle]1 joined
[01:05] *** [particle] left
[01:07] *** mcmillhj left
[01:11] *** [particle] joined
[01:13] *** [particle]1 left
[01:17] <MasterDuke> sauvin: reproducibly?

[01:18] <sauvin> Finding out.

[01:18] <sauvin> Yes.

[01:19] <sauvin> MasterDuke, error given is: *** Error in `/usr/local/bin/moar': malloc(): memory corruption: 0x00007fe5dc0fea00 ***

[01:19] <MasterDuke> can you post the code that causes it?

[01:20] <sauvin> http://termbin.com/8tn6

[01:20] <sauvin> That's the start of it, that's the end of it, and everything in between. What's on port 5000 is raw log output from my IRC client.

[01:21] <sauvin> It had gone 1525051060  when it barfed.

[01:21] <sauvin> (1525051060 lines of input, that is)

[01:23] <MasterDuke> is it that line in particular? or is it just going that number of lines?

[01:24] <MasterDuke> i.e., can you pull out a specific strings/byte sequence that causes it

[01:25] <sauvin> Probably not. It's live input.

[01:26] <MasterDuke> ah, not saved off anywhere?

[01:27] <TEttinger> I know some clients/fonts have had issue with this string, but I doubt anyone here will have an issue

[01:27] <TEttinger> º¬ucغ-۾׫-rҫ?·/qª^Hʾl*t&๮vٶɴڰݳʬ^H&sĭ7ู£dügֹz¶޺!ණ»ߦ²˿ɽˤѷ­o!௦¼±ලǭٸȸ!tʳ¼ʴҽµʶ&&ɥ)&Ѽ5¢ʡརÿqȿҠҶɵ

[01:28] <sauvin> Let's see if it crashes the code I just posted, TEttinger. Can you do that again, please?

[01:28] <TEttinger> º¬ucغ-۾׫-rҫ?·/qª^Hʾl*t&๮vٶɴڰݳʬ^H&sĭ7ู£dügֹz¶޺!ණ»ߦ²˿ɽˤѷ­o!௦¼±ලǭٸȸ!tʳ¼ʴҽµʶ&&ɥ)&Ѽ5¢ʡརÿqȿҠҶɵ

[01:28] <sauvin> Nope, it's still running.

[01:28] <TEttinger> I'm pretty sure the issue was client side with one client side font

[01:28] <sauvin> What I'm wondering is if I'm smashing a stack or something.

[01:29] <TEttinger> so that is good news for me, your test confirms that it isn't a unicode thing for me

[01:29] <MasterDuke> sauvin: what version of perl6 are you running?

[01:29] <sauvin> This is Rakudo Star version 2018.01 built on MoarVM version 2018.01

[01:29] <sauvin> implementing Perl 6.c.

[01:30] *** DataLinkDroid left
[01:31] <sauvin> TEttinger, that string went through HexChat, got piped out through a socket to an ncat process to which the code I termbinned connects.

[01:32] *** mcmillhj joined
[01:32] <TEttinger> I think I can eke the info I need from the guy who had the problem. we both use the Floe IRC client and Floe has some spotty WPF-based text rendering. that many-language text probably forces a bunch of fonts to be used

[01:32] <TEttinger> I use unifont, which means i never have to switch except for emoji

[01:33] <sauvin> I was just amazed to see core being dumped. I've not seen that in YEARS.

[01:35] <sauvin> Is the code I termbinned stack-intensive or something, do you think?

[01:37] <TEttinger> over 1.5 billion lines..

[01:37] <TEttinger> wow

[01:38] *** FROGGS__ joined
[01:41] *** cog_ joined
[01:41] <sauvin> It's really that many?

[01:42] *** FROGGS_ left
[01:43] <sauvin> 1 525 051 060... guess so.

[01:45] *** cognominal left
[01:46] *** ilbot3 left
[01:55] *** mcmillhj left
[01:55] *** ilbot3 joined
[01:55] *** ChanServ sets mode: +v ilbot3

[02:05] *** mryan left
[02:06] *** ryn1x joined
[02:07] <sauvin> dumped again at 1525052980 lines of input.

[02:08] <MasterDuke> this is different input?

[02:15] <sauvin> Live input, so, yes, but same source.

[02:17] <MasterDuke> what does it's memory use look like? constantly increasing?

[02:18] <sauvin> Running it again and watching htop

[02:20] *** ryn1x left
[02:31] *** aindilis left
[02:35] *** aindilis joined
[02:36] *** mryan joined
[02:36] *** vike left
[02:37] *** ufobat_ joined
[02:40] *** ufobat left
[02:43] *** espadrine left
[02:47] *** ryn1x joined
[02:48] *** ryn1x left
[02:49] *** ryn1x joined
[02:53] *** comborico1611 joined
[02:53] <sauvin> Another thing I'm wondering about, though: how does input jump from just a few thousand to a billion and a half in such a short time? In the past half hour, I've only gotten some 5k lines of input (with CPU% and MEM% staying down to something like one or two percent). A billion and a half is more like a whole day's traffic, so, *something* is confused.

[02:55] <sauvin> Another logging process, one that actually commits the lines to a disk file, has me having only 265038 lines over the past twenty four hours or so.

[02:59] <comborico1611> m: say "I have a dream".words.perl

[02:59] <camelia> rakudo-moar 0de80523c: OUTPUT: «("I", "have", "a", "dream").Seq␤»

[02:59] <comborico1611> m: say "I have a dream".words

[02:59] <camelia> rakudo-moar 0de80523c: OUTPUT: «(I have a dream)␤»

[03:02] *** skids joined
[03:10] *** wamba joined
[03:15] <Geth> ¦ doc: mryan++ created pull request #1978: Clarify 'Bar.pm6' vs 'how to use Bar.pm6'

[03:15] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/1978

[03:17] <sauvin> OK, here's one mystery solved. It wasn't 1.5 billion lines. That was the timestamp field. It's not printing the line number for all the lines, it's sometimes neglecting to print the line number for whole BATCHES of lines.

[03:18] *** comborico1611 left
[03:19] <sauvin> This implies to me the possibility it's not printing all the LINES.

[03:25] *** aindilis left
[03:26] *** aindilis joined
[03:27] <MasterDuke> hm, i don't think you're printing per line, just per "chunk" of input

[03:27] <sauvin> How is defined then a "chunk"? It's *mostly* printing lines of variable size.

[03:29] *** eliasr left
[03:29] <sauvin> Another core dump. This time, at 885 lines, followed by a *crapload* of unnumbered lines.

[03:29] <sauvin> Maybe the input is just coming in too fast?

[03:30] <Geth> ¦ doc: 91a56e8c73 | (Martin Ryan)++ | doc/Language/module-packages.pod6

[03:30] <Geth> ¦ doc: Clarify 'Bar.pm6' vs 'how to use Bar.pm6'

[03:30] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/91a56e8c73

[03:30] <Geth> ¦ doc: d8b020e759 | 陈梓立++ (committed using GitHub Web editor) | doc/Language/module-packages.pod6

[03:30] <Geth> ¦ doc: Merge pull request #1978 from mryan/master

[03:30] <synopsebot> Link: https://doc.perl6.org/language/module-packages

[03:30] <Geth> ¦ doc: 

[03:30] <Geth> ¦ doc: Clarify 'Bar.pm6' vs 'how to use Bar.pm6'

[03:30] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d8b020e759

[03:35] <MasterDuke> sauvin: fwiw, i don't know much about react/promises/Async/etc. might be good to ping timotimo, jnthn, Zoffix

[03:36] <sauvin> Think I'm going to. I don't know perl6 nearly well enough to even guess at what that code is doing, exactly.

[03:43] <MasterDuke> sauvin: you can add a `.lines` to the .Supply and then you'll get line by line printing

[03:46] <MasterDuke> and you said you don't get memory growth? huh, for me, mem use grows really quickly and the OOM killer gets it

[03:47] <sauvin> how are you getting your input?

[03:47] <MasterDuke> `yes | netcat -l -p 5000 127.0.0.1`

[03:49] <MasterDuke> got through 81350 lines (with .lines added onto the .Supply)

[03:49] <sauvin> hm. no, i saw no appreciable rise in memory while i was watching it.

[03:51] <sauvin> adding .lines seems to make it crash faster.

[03:53] <MasterDuke> i need to get some sleep, but could you create an issue here https://github.com/rakudo/rakudo/issues ?

[03:53] <sauvin> this 'malloc(): memory corruption' thing is a bit worrisome.

[03:54] <sauvin> when i finish eating, i'll poke at that.

[03:54] <MasterDuke> AlexDaniel: you'd probably be more help than i ^^^

[03:54] <AlexDaniel> hello :)

[03:55] <sauvin> hey

[03:55] <MasterDuke> sauvin: fwiw, a new rakudo star should be released soon, might help

[03:56] <sauvin> can't remember offhand how i installed this one!

[03:56] <MasterDuke> what os?

[03:56] <sauvin> ubuntu 16.04

[03:56] <MasterDuke> huggable: debs

[03:56] <huggable> MasterDuke, CentOS, Debian, Fedora and Ubuntu Rakudo packages: https://github.com/nxadm/rakudo-pkg/releases

[03:57] <MasterDuke> you can find the monthly compiler releases there

[03:57] <sauvin> tkink i went to a rakudo web site

[03:57] <MasterDuke> but i do really need to go, good luck

[03:58] <sauvin> night!

[04:01] <AlexDaniel> sauvin: I'm trying to follow the discussion, are you still using .Supply(…) instead of .Supply(…).lines ?

[04:02] <AlexDaniel> ah, ok, got to that point :)

[04:02] <AlexDaniel> if it's crashing, that's bad, it shouldn't

[04:03] <AlexDaniel> but there were many (possibly related) fixes during these months

[04:03] <sauvin> Yeah, no idea what's going on. Crashing after a few thousand lines, and not printing all the line numbers for whole batches of lines.

[04:04] <AlexDaniel> sauvin: what if you set MVM_SPESH_DISABLE=1 env variable?

[04:04] <AlexDaniel> it'll make stuff slower, but let's see if it crashes

[04:05] *** wamba left
[04:05] <AlexDaniel> (ok that sounded a bit inaccurate, the env variable is of course MVM_SPESH_DISABLE, set it to 1)

[04:06] <sauvin> Did that, finished eating, running to see what happens. Did away with .lines, using ++$n again.

[04:07] <sauvin> Might be a while. Doesn't seem to be very predictable how long it'll run before it yarks.

[04:09] <AlexDaniel> I would have expected this to print the lines correctly: whenever .Supply(:enc("utf8-c8")).lines -> $v { printf "%d ", ++$n; $v.print; }

[04:09] <AlexDaniel> if it doesn't then maybe there's something weird going on

[04:09] <sauvin> It didn't.

[04:10] <sauvin> There were whole BATCHES of lines printed without line numbers.

[04:12] <sauvin> Where it usually seems to happen is during what I call a '354' event, where hexchat issues a "who ##channel" and a whole listing of user nicks, idents, accounts, servers, gecos and suchlike is returned. Some of those channel listings are over two thousand lines long, and they come down the pipe almost all in the same millisecond.

[04:16] <sauvin> Think I'll launch a second process redirecting stdout to see if I can spot any other patterns.

[04:19] <AlexDaniel> sauvin: yeah, would be great to have a test set for reproducing the issue

[04:19] <AlexDaniel> even if it's a lot of data

[04:19] <sauvin> Oh, it'll be a crapload, but since some of the content is a bit sensitive, thinking some other means of coming up with test data is needed.

[04:20] <AlexDaniel> with a way to reproduce it I'd be able to tell if the problem exists on HEAD, and in seconds we'll know which commit fixed it (or if it's a regression that is not fixed, we'll see what broke it)

[04:20] <sauvin> I was surprised at what MasterDuke said, that just doing a yes | netcat smashed it.

[04:20] <AlexDaniel> oh

[04:20] * AlexDaniel tries it

[04:21] *** skids left
[04:23] <sauvin> I'm not seeing increases in memory usage, which makes me fear it's a stack or queue of some kind being overwhelmed.

[04:25] <sauvin> Another crash. Launching it again, this time with .lines put back in. Wonder if that'll make all the lines number.

[04:27] *** AlexDaniel left
[04:27] *** AlexDaniel joined
[04:28] <AlexDaniel> uh, had to wait for my system to unfreeze :)

[04:31] <cono> looks like a mem leak. It works fine until memory runs out, tried this piece: http://termbin.com/8tn6

[04:31] <cono> memory increases very fast

[04:31] <cono> with `yes | nc -l -p 5000`

[04:32] <sauvin> That's what the error returned suggests to me. Malloc errors aren't something I'd ever had much luck chasing down even while I was still able to code in C.

[04:32] <cono> sauvin: what OS ?

[04:33] <sauvin> Ubuntu 16.04, distro-supplied kernel and libc.

[04:34] <cono> do you have any messages about "OOM" in kernel log?

[04:34] <sauvin> How do I view a kernel log?

[04:35] <sauvin> If it's /var/log/kern.log, no, nothing.

[04:35] <AlexDaniel> this works for reproducing the leak: yes | pv -L 30m | netcat -l -p 5000 127.0.0.1

[04:36] <AlexDaniel> (in a controllable way, 30m for 30 MiB/s

[04:36] <AlexDaniel> )

[04:36] <sauvin> I actually found a legitimate bug? Usually, when crap blows up on me like this, it's because I'm an idiot.

[04:37] <AlexDaniel> sauvin: yes

[04:37] <sauvin> Go me!

[04:37] <sauvin> That's a first for me.

[04:38] <AlexDaniel> oooooooh, interesting…

[04:38] <sauvin> ..?

[04:39] <AlexDaniel> I stop `yes` and the script still keeps going printing lines

[04:39] <AlexDaniel> but the memory usage is no longer growing!

[04:40] <AlexDaniel> so it indeed stuffs the data somewhere before giving the chunks I think

[04:42] <AlexDaniel> sauvin: what's the size of your input?

[04:42] <sauvin> So maybe something is getting stuffed into a tube faster than it can be pushed back out.

[04:42] <AlexDaniel> oh wait, you have live stuff coming in? What's the bitrate? :)

[04:43] <sauvin> AlexDaniel, for what I was doing, there's no actual "size". I have a hexchat script that relays everything it sees in raw IRC format to an ncat "server" that broadcasts it to anything connected to port 5000. It's live input.

[04:43] <AlexDaniel> hmm

[04:44] <sauvin> So, "bitrate" may not be particularly relevant. Sometimes it's half a goddamn novel in just a few seconds, followed by a few minutes of maybe a dozen lines a minute.

[04:44] <AlexDaniel> anyway, please report your findings in a ticket :)

[04:44] <AlexDaniel> sauvin: if that crashes, maybe it's a separate problem

[04:44] <sauvin> At the link that MasterDuke provided?

[04:44] <AlexDaniel> but we'll see

[04:44] <AlexDaniel> huggable: rakudobug

[04:44] <huggable> AlexDaniel, Report bugs on https://github.com/rakudo/rakudo/issues/new    If you don't have access to GitHub, you can email your report to [email@hidden.address] . See also: https://github.com/rakudo/rakudo/wiki/rt-introduction

[04:44] <AlexDaniel> yes

[04:45] <sauvin> Hrm, I may not be able to do the github thing directly. Seems github doesn't like my VPN.

[04:46] <sauvin> Emaling.

[04:46] <sauvin> Erm... emailing.

[04:54] *** khw left
[05:04] <sauvin> Email sense.

[05:04] <sauvin> ERm, sent.

[05:10] <sauvin> Ooo... just sending an email opened a ticket! Cool!

[05:26] *** jmerelo joined
[05:29] *** ChoHag joined
[05:33] <Geth> ¦ doc: d32e413c1f | (JJ Merelo)++ | 7 files

[05:33] <Geth> ¦ doc: Eliminates last dupes, closes #1912

[05:33] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d32e413c1f

[05:39] *** mryan left
[05:41] <Geth> ¦ doc: 7a511affeb | (JJ Merelo)++ | doc/Language/traps.pod6

[05:41] <Geth> ¦ doc: Fixed <> without C, closes #1914

[05:41] <Geth> ¦ doc: 

[05:41] <Geth> ¦ doc: And it's kind of impossible to create a test for this. Maybe

[05:41] <Geth> ¦ doc: eliminating code, but even so there would be many false

[05:41] <Geth> ¦ doc: positives. Done by hand.

[05:41] <synopsebot> Link: https://doc.perl6.org/language/traps

[05:41] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7a511affeb

[05:57] *** mryan joined
[06:16] *** robertle joined
[06:27] *** tim__ joined
[06:27] *** thowe left
[06:33] *** mniip left
[06:33] *** jmerelo left
[06:34] *** sena_kun joined
[06:38] *** mryan left
[06:39] *** abraxxa joined
[06:42] *** markong joined
[06:45] *** mniip joined
[06:48] *** mryan joined
[06:49] *** zymurgy joined
[06:54] *** ChoHag left
[06:55] *** wamba joined
[06:55] *** gfldex left
[06:59] *** darutoko joined
[07:00] *** jmerelo joined
[07:02] *** gfldex joined
[07:23] *** zakharyas joined
[07:31] *** AlexDaniel left
[07:35] *** aindilis left
[07:38] *** domidumont joined
[07:38] *** aindilis joined
[07:42] *** aindilis left
[07:43] *** aindilis joined
[07:43] *** domidumont left
[07:44] *** domidumont joined
[07:45] *** aindilis left
[07:45] <cono> m: role R {has &.c}; class A does R {submethod BUILD(:&c) {&!c := &c}}; A.new

[07:45] <camelia> rakudo-moar a957b712c: OUTPUT: «Type check failed in binding; expected NQPMu but got Callable (Callable)␤  in submethod BUILD at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[07:46] <cono> is there any ideas why it doesn't work /

[07:46] <cono> works with scalars and @arrays

[07:46] *** aindilis joined
[07:47] <cono> m: role R {has &.c}; class A does R {submethod BUILD(:&c) {&!c := &c}}; A.new(c => {"hi".say})

[07:47] <camelia> rakudo-moar a957b712c: OUTPUT: «Type check failed in binding; expected NQPMu but got Block (-> ;; $_? is raw { #`...)␤  in submethod BUILD at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[07:49] <cono> m: role R {has &.b}; class A does R {has &.c; submethod BUILD(:&c) {&!c := &c}}; A.new(c => {"hi".say}).say

[07:49] <camelia> rakudo-moar a957b712c: OUTPUT: «A.new(c => -> ;; $_? is raw { #`(Block|87461744) ... }, b => Callable)␤»

[07:49] <cono> ah, looks like it doesn't work not because of the type, its more about attribute in role or class

[07:53] <cono> changed from := to =. Would be glad if some1 can explain me why := doesn't work for attributes defined in role's

[08:08] *** domidumont left
[08:10] *** domidumont joined
[08:11] <jmerelo>  cono: := binds

[08:11] <jmerelo> = assigns

[08:11] *** abraxxa left
[08:12] <jmerelo> I don't have the whole context. But you know what? Post that question in StackOverflow (whether you get the answer here or not :-) )

[08:12] *** domidumont left
[08:13] *** abraxxa joined
[08:17] *** zakharyas left
[08:18] *** zakharyas joined
[08:21] *** scimon joined
[08:21] <donpdonp> does someone have a short explanation of how 'submethod' is different/needed over 'method'?

[08:24] <cono> donpdonp: submethod not going to be inherited

[08:24] <tobs> donpdonp: submethods are not inherited. I think you'd use them for constructors and such because derived classes are usually constructed differently.

[08:24] <cono> m: class A {method a{}; submethod b{}}; class B is A {}; B.new.b

[08:24] <camelia> rakudo-moar a957b712c: OUTPUT: «No such method 'b' for invocant of type 'B'. Did you mean any of these?␤    a␤    b␤␤  in block <unit> at <tmp> line 1␤␤»

[08:24] <cono> but we still have this method in the error message :)

[08:25] <jmerelo> donpdonp: https://docs.perl6.org/type/Submethod

[08:30] *** smls joined
[08:32] <smls> What could be causing an "equal requires a concrete string, but got null" exception?

[08:35] <moritz> an nqp::iseq_s() that got a null as one argument?

[08:35] <smls> It's a normal Perl 6 script of mine that used to work on older Rakudos, but now reliably fails with that.

[08:36] <lizmat> gist a --ll-exception stack please  :-)

[08:36] <moritz> then a bug report is due

[08:36] <smls> Well, I'm having a hard time golfing it...

[08:37] <smls> The exception points to different line numbers on different runs

[08:37] <smls> but it always seems to be the line number of a subroutine signature, or the line just below one.

[08:37] <lizmat> smls: is 'make test' clean for you ?

[08:38] * lizmat suspects a possible new case of https://github.com/rakudo/rakudo/issues/1783

[08:39] <smls> lizmat: I hadn't run that script in a while, so I don't know how new this issue is.

[08:39] <smls> `make test` in Rakudo's build dir passes.

[08:40] <lizmat> ok, so it's not that then

[08:45] *** Zoffix joined
[08:46] <Zoffix> AlexDaniel`++ samcv++ # thanks for point release; sorry for making those bugs :)

[08:48] <lizmat> weekly: https://deathbyperl6.com/perl-toolchain-summit-2018-meta6-dependency-hello/

[08:48] <notable6> lizmat, Noted!

[08:49] *** sena_kun left
[08:50] *** sena_kun joined
[08:51] *** sena_kun left
[09:03] <stmuk> AlexDaniel++ # making releases

[09:03] <stmuk> Zoffix++ # making stuff

[09:05] <samcv> Zoffix: glad we got it fixed

[09:06] *** rindolf joined
[09:10] *** mryan left
[09:29] <jmerelo> Pointers to the new release?

[09:31] <Zoffix> jmerelo: what specifically are you looking for?

[09:41] <lizmat> afaik stmuk is working on it

[09:42] <stmuk> I think jmerelo may be talking about the core compiler release (but I'm not really sure)

[09:46] <buggable> New CPAN upload: Unix-errno-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Unix-errno-0.0.1.tar.gz

[09:56] <stmuk> Zoffix: maybe p6lert should be taught about 2018.04.1?

[09:57] <Zoffix> AlexDaniel` can put p6lerts if needed. Ask him.

[09:58] <stmuk> .tell AlexDaniel`  maybe p6lert should be taught about 2018.04.1?

[09:58] <yoleaux> stmuk: I'll pass your message to AlexDaniel`.

[10:00] *** mryan joined
[10:01] *** domidumont joined
[10:10] *** Zoffix left
[10:11] *** margeas joined
[10:12] <stmuk> quotable6: ZOFFLOP

[10:12] <quotable6> stmuk, OK, working on it! This may take up to three minutes (4582161 messages to process)

[10:13] <quotable6> stmuk, 220 messages (2017-04-14⌁2018-04-28): https://gist.github.com/b5f4c4375444171314508ac82c21513f

[10:15] *** markong left
[10:23] <stmuk> quotable6: help

[10:23] <quotable6> stmuk, Like this: quotable6: /^ ‘bisect: ’ / # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Quotable

[10:27] <stmuk> isn't there some hideous w10 update due? I may try building on w7

[10:33] *** araraloren joined
[10:38] *** kurahaupo_ joined
[10:38] <stmuk> http://pl6anet.org/drop/rakudo-star-2018.04-RC1.tar.gz

[10:38] <lizmat> stmuk++

[10:40] *** kurahaupo left
[10:42] *** kurahaupo_ left
[10:46] *** kurahaupo joined
[10:51] <smls> lizmat, I posted some stack traces for the "equal requires a concrete string" thing: https://github.com/rakudo/rakudo/issues/1785

[10:52] <smls> I don't think they'll be very useful though, since the innermost location dosn't seem to point to internal Rakudo code

[10:53] *** kurahaupo left
[10:54] <smls> If I can't golf it, maybe a local git bisect of Rakudo is in order...

[10:57] <lizmat> smls: yeah, without further source code availability, this gets a bit hard  :-(

[10:58] <lizmat> also, no idea where that error string comes from

[10:58] <lizmat> can't even reproduce that error atm with nqp, as moritz suggested

[10:59] <lizmat> m: use nqp; nqp::iseq_s("foo",nqp::null_s)  # must be null_s instead of null, so I *can* reproduce it

[10:59] <camelia> rakudo-moar a957b712c: OUTPUT: «equal requires a concrete string, but got null␤  in block <unit> at <tmp> line 1␤␤»

[10:59] <lizmat> afk for an hour or so

[10:59] *** kurahaupo joined
[11:02] *** zakharyas left
[11:11] *** Ven`` joined
[11:26] <buggable> New CPAN upload: CPAN-Uploader-Tiny-0.0.6.tar.gz by SKAJI http://modules.perl6.org/dist/CPAN::Uploader::Tiny:cpan:SKAJI

[11:30] *** jmerelo left
[11:44] *** araraloren left
[11:45] *** araraloren joined
[11:58] *** mryan left
[12:05] *** raynold joined
[12:10] *** araraloren left
[12:11] *** araraloren joined
[12:16] <Geth> ¦ doc: JJ self-assigned unicmp and coll operators don't require "use experiment" https://github.com/perl6/doc/issues/1979

[12:16] *** jmerelo joined
[12:19] *** ufobat_ left
[12:22] *** smls left
[12:27] *** athenot joined
[12:37] *** wamba left
[12:39] *** zakharyas joined
[12:49] *** mcmillhj joined
[12:51] *** wamba joined
[12:54] *** jmerelo left
[12:54] <[Coke]> zoffix, did you end up fixing https://github.com/perl6/doc/issues/1938 ?

[12:54] <yoleaux> 29 Apr 2018 04:30Z <Tison> [Coke]: could you please take a look at this build fail on doc? I just trigger rebuild and it fails unexpectedly.

[12:54] <[Coke]> which build fail?

[12:55] <[Coke]> .seen tison

[12:55] <yoleaux> I saw Tison 29 Apr 2018 04:30Z in #perl6: <Tison> https://travis-ci.org/perl6/doc/builds/372591653?utm_source=github_status&utm_medium=notification

[12:55] <[Coke]> looks like a precomp failure.

[12:58] <Geth> ¦ doc: 7486d2c1cf | (Will "Coke" Coleda)++ | doc/Language/regexes.pod6

[12:58] <Geth> ¦ doc: whitespace

[12:58] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7486d2c1cf

[12:58] <synopsebot> Link: https://doc.perl6.org/language/regexes

[12:58] *** AlexDaniel joined
[13:00] *** athenot left
[13:04] *** athenot joined
[13:06] *** vcv_ joined
[13:08] *** eliasr joined
[13:17] *** Ven`` left
[13:19] *** sena_kun joined
[13:20] <AlexDaniel> Zoffix: as for making bugs, it's completely not your fault in my opinion. You do a lot of changes, so when something goes wrong it's more likely to be you :) The actual issue is that we are unable to detect these bugs reliably, and the issue on i386 is actually my fault because it took just a little bit of communication with El_Che to make sure that similar issues will never happen, so I should've arranged that earlier

[13:21] <AlexDaniel> as for the num hangs, we just need more tests. A lot more tests. Everyone should write tests :)

[13:21] *** kt__ joined
[13:24] <AlexDaniel> ZofBot: but if you introduce a bug, it'd be your fault. As a superior being you should know better.

[13:25] *** wamba left
[13:30] *** AlexDaniel left
[13:30] *** AlexDaniel joined
[13:34] *** athenot left
[13:35] *** athenot joined
[13:36] *** orangebot joined
[13:37] *** skids joined
[13:41] *** ktown joined
[13:41] *** orangebot left
[13:42] *** sauvin left
[13:42] *** kt__ left
[13:45] *** bluebot joined
[13:46] <bluebot> Hello!

[13:46] <AlexDaniel> hello

[13:56] <araraloren> hi

[13:57] *** HaraldJoerg joined
[13:58] *** Ven`` joined
[13:59] *** bluebot left
[14:01] *** pilne left
[14:04] *** khw joined
[14:09] *** mscha joined
[14:19] *** pmurias joined
[14:19] <pmurias> re docs https://docs.perl6.org/language/quoting#Interpolation:_qq - should provide an nice table of escapes

[14:23] <donpdonp> cono, tobs, jmerelo: thx for the responses :)

[14:24] <sjn> o/

[14:25] <sjn> having trouble installing zef from git

[14:26] <sjn> when I run «perl6 -Ilib bin/zef install .» on eb7db9e I get the following error:

[14:26] <sjn> Cannot find method 'run_alt' on object of type NQPArray

[14:27] <sjn> This is Rakudo version 2018.04-32-g0de80523c built on MoarVM version 2018.04-39-gc702f4c66

[14:31] *** Zoffix joined
[14:31] <Zoffix> sjn: are you trying to install Slang::AltTernary ?

[14:32] <Zoffix> sjn: what's eb7db9e ? That doesn't appear to be a rakudo commit

[14:33] <Zoffix> sjn: hm, you're installing zef. But `run_alt` appears only in Slang::AltTernary in the whole ecosystem

[14:33] *** kurahaupo left
[14:33] *** kurahaupo joined
[14:34] * [Coke] wonders if anyone else in the Perl 6 Community is in the relatively small Tax IT community.

[14:34] <stmuk> I pay it :(

[14:35] <jnthn> Zoffix: run_alt is also a method name in QRegex::NFA in NQP

[14:35] <Zoffix> doh

[14:35] <jnthn> I wonder if this relates to the precomp issue?

[14:35] <Zoffix> I grepped rakudo's sauce but didn't grep NQP/MoarVM's

[14:36] <pmurias> [Coke]: what's Tax IT?

[14:36] <Zoffix> sjn: try blowing .precomp folders 

[14:39] <Zoffix> stmuk: uh, http://pl6anet.org/drop/rakudo-star-2018.04-RC1.tar.gz is a 404

[14:39] <Zoffix> Or is it a test to see how many people test RC candidates? :) 

[14:39] <stmuk> Zoffix: yes its being replaced within mins by a RC2 with an updated zef (it would have been secs if not for an unfortunate typo)

[14:40] <Zoffix> Ah

[14:42] <Zoffix> [Coke]: I don't know. I wasn't trying to fix that issue.   "Basically, there are several places in the code where we are assuming something is a Str, when in fact it's a Pod object." ... Yeah, that sounds a lot like the problems I fixed and I did remove the Promise.allof stuff

[14:42] <Zoffix> That stuff is now handled by &textify-guts multies

[14:43] <[Coke]> pmurias: basically, any IT work around filing large (or large numbers) of tax returns (typically corporate)

[14:46] <buggable> New CPAN upload: Unix-errno-0.0.2.tar.gz by ELIZABETH http://modules.perl6.org/dist/Unix::errno:cpan:ELIZABETH

[14:52] *** comborico1611 joined
[14:55] *** mcmillhj left
[14:55] <comborico1611> m: my $string = "yellow submarine"; say ~$0 if $string ~~ / l (.) w .*? rin /

[14:55] <camelia> rakudo-moar a957b712c: OUTPUT: «o␤»

[14:56] *** zakharyas left
[14:56] *** zakharyas joined
[14:57] <comborico1611> m: my $string = "yellow srin"; say ~$0 if $string ~~ / l (.) w .*? rin /

[14:57] <camelia> rakudo-moar a957b712c: OUTPUT: «o␤»

[14:58] <comborico1611> m: my $string = "yellorine"; say ~$0 if $string ~~ / l (.) w .*? rin /

[14:58] <camelia> rakudo-moar a957b712c: ( no output )

[14:58] *** mcmillhj joined
[15:01] <comborico1611> m: my $string = "yellow submarine"; say ~$1 if $string ~~ / l (.) w .*? rin /

[15:01] <camelia> rakudo-moar a957b712c: OUTPUT: «Use of Nil in string context␤␤  in block <unit> at <tmp> line 1␤»

[15:02] <moritz> m: say ~$0 if "yellow submarine" ~~ / l (.) w .*? rin /

[15:02] <camelia> rakudo-moar a957b712c: OUTPUT: «o␤»

[15:02] <timotimo> m: say ~$/ if "yellow submarine" ~~ / l (.) w .*? rin /

[15:02] <camelia> rakudo-moar a957b712c: OUTPUT: «low submarin␤»

[15:02] <stmuk> Zoffix: try now

[15:03] <comborico1611> What does the *? do?  ? i s for zero or once.  * is for zero or more times.

[15:04] <moritz> *? means "zero or more, but as few as possible"

[15:04] <comborico1611> Thanks!

[15:04] <moritz> whereas * means "zero or more, but as many as possible"

[15:05] <comborico1611> Excellent!

[15:05] *** Ven`` left
[15:09] *** zakharyas left
[15:11] *** tim__ left
[15:13] <sjn> Zoffix: eb7db9e is a zef commit

[15:13] <sjn> I'll try deleting the .precomp dir

[15:16] * sjn tried rebuilding rakudo first, that helped (I assume because .precomp dirs are invalid now)

[15:18] *** robertle left
[15:19] *** mscha left
[15:21] <comborico1611> m: say ~$/ if 'abc' ~~ / a.c /

[15:21] <camelia> rakudo-moar a957b712c: OUTPUT: «abc␤»

[15:21] <comborico1611> m: say $/ if 'abc' ~~ / a.c /

[15:21] <camelia> rakudo-moar a957b712c: OUTPUT: «｢abc｣␤»

[15:22] <comborico1611> m: say $/.WHAT if 'abc' ~~ / a.c /

[15:22] <camelia> rakudo-moar a957b712c: OUTPUT: «(Match)␤»

[15:23] *** rindolf left
[15:23] *** nightfrog left
[15:24] *** jmerelo joined
[15:27] *** sena_kun left
[15:30] <comborico1611> m: for 'abc' {say 'yup' if / a.c /

[15:30] <camelia> rakudo-moar a957b712c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3for 'abc' {say 'yup' if / a.c /7⏏5<EOL>␤»

[15:30] <comborico1611> m: for 'abc' {say 'yup' if / a.c / }

[15:30] <camelia> rakudo-moar a957b712c: OUTPUT: «yup␤»

[15:32] <comborico1611> m: say 'yup' if 'abc' / a.c / 

[15:32] <camelia> rakudo-moar a957b712c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3say 'yup' if 'abc' / a.c /7⏏5<EOL>␤    expecting any of:␤        prefix␤        term␤»

[15:32] <comborico1611> Seems strange that the for loop doesn't require ~~

[15:33] <araraloren> It use the $_ match the regex, right ?

[15:33] <comborico1611> Yeah.

[15:33] <araraloren> m: $_ = "abc"; say 'yup' if / a.c /;

[15:33] <camelia> rakudo-moar a957b712c: OUTPUT: «yup␤»

[15:33] *** rindolf joined
[15:34] <comborico1611> But what tells it to match? You know?

[15:35] <araraloren> I remember there is a question about //,  m// and rx// in stackoverflow

[15:35] <comborico1611> m: $_ = 'abc'; say 'yup' if ~~ / a.c/

[15:35] <camelia> rakudo-moar a957b712c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Expected a term, but found either infix ~~ or redundant prefix ~␤  (to suppress this message, please use a space like ~ ~)␤at <tmp>:1␤------> 3$_ = 'abc'; say 'yup' if ~~7⏏5 / a.c/␤»

[15:37] <comborico1611> I'll look for it. Thanks!

[15:37] <mcmillhj> Is there a built-in function that does something similar to all { } @list from Perl5's List::Util?

[15:37] <araraloren> https://docs.perl6.org/language/regexes#index-entry-quote_%2F_%2F-quote_rx-quote_m-Lexical_Conventions

[15:38] <araraloren> comborico1611 there are some comment in the documents

[15:38] <araraloren> :) seems like I am wrong

[15:40] <comborico1611> Thanks!

[15:40] <timotimo> mcmillhj: depending on what's in your block, there's different ways

[15:40] <timotimo> mcmillhj: but you'll probably lik Junctions for this

[15:40] <araraloren> and https://docs.perl6.org/syntax/$_ here mentioned /regex/

[15:40] <araraloren> would work on $_

[15:41] <timotimo> you can get an "all" junction with @list.all and then do stuff with it like method calls, operations, comparisons, and at the end coerce it to bool to do the actual "all true?" thing

[15:42] <timotimo> m: my @words = <hello gold mold build>; say so @words.all.substr(*-2, 1) eq "l"

[15:42] <camelia> rakudo-moar a957b712c: OUTPUT: «True␤»

[15:42] <timotimo> "do all these words have an l as the second-to-last character

[15:42] <timotimo> " for example

[15:42] <timotimo> mcmillhj: does that help?

[15:42] <timotimo> m: my @words = <hello gold mold build>; say @words.all.substr(*-3, 2)

[15:42] <camelia> rakudo-moar a957b712c: OUTPUT: «all(ll, ol, ol, il)␤»

[15:43] <timotimo> ^- helpful to see what's actually in the junction at any point in the calculation

[15:45] <mcmillhj> timotimo: I'll check out junctions, but basically the behavior I was looking for was something like (1, 2, 3).all({ $_ < 5 }); # True (only returns True once). 

[15:45] <mcmillhj> timotimo: I also don't see .all on the List docs, is it defined on a different type ?

[15:46] <timotimo> https://docs.perl6.org/routine/all

[15:46] <timotimo> https://docs.perl6.org/type/Junction - this is more interesting

[15:46] <timotimo> your code would just be "so (1, 2, 3).all < 5"

[15:46] <timotimo> m: say so (1, 2, 3).all < 5; say so (1, 2, 3, 99).all < 5

[15:46] <camelia> rakudo-moar a957b712c: OUTPUT: «True␤False␤»

[15:47] <mcmillhj> That returns more than a single result

[15:47] *** Ven`` joined
[15:47] <timotimo> you need to boolify it with "so"

[15:47] <timotimo> or with if/unless

[15:48] <mcmillhj> oooh, interesting 

[15:48] <mcmillhj> that builds off the Junction concept correcT? 

[15:49] <timotimo> this is exactly junctions :)

[15:50] *** robertle joined
[16:03] <AlexDaniel> robertle: o/

[16:03] <AlexDaniel> robertle: 2018.04.1 is out

[16:03] <jmerelo> AlexDaniel++

[16:04] <Geth> ¦ perl6-pod-to-bigpage: 68df5ecb13 | (JJ Merelo)++ | bin/pod2onepage

[16:04] <Geth> ¦ perl6-pod-to-bigpage: Restored anchors refs #21

[16:04] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/commit/68df5ecb13

[16:05] <robertle> AlexDaniel: I know! and it's golden from my point of view: https://qa.debian.org/developer.php?login=pkg-rakudo-devel@lists.alioth.debian.org

[16:06] <AlexDaniel> whew

[16:06] <robertle> the debian version is pretty much your upstream, but I do apply the patch at the bottom of R#1711 to fix big endian weirdnesses. not sure it's the correct way, but seems to work so far...

[16:06] <synopsebot> R#1711 [open]: https://github.com/rakudo/rakudo/issues/1711 [severe] intermittent "Bytecode validation error at offset 0, instruction 0" on s390x/mips

[16:06] <buggable> New CPAN upload: cro-http-0.7.5.tar.gz by JNTHN http://modules.perl6.org/dist/Cro::HTTP:cpan:JNTHN

[16:06] <buggable> New CPAN upload: cro-core-0.7.5.tar.gz by JNTHN http://modules.perl6.org/dist/Cro::Core:cpan:JNTHN

[16:06] <buggable> New CPAN upload: cro-tls-0.7.5.tar.gz by JNTHN http://modules.perl6.org/dist/Cro::TLS:cpan:JNTHN

[16:06] <robertle> would be fab if someone who knows moar could comment on that patch/problem

[16:06] <buggable> New CPAN upload: cro-websocket-0.7.5.tar.gz by JNTHN http://modules.perl6.org/dist/Cro::WebSocket:cpan:JNTHN

[16:06] <buggable> New CPAN upload: cro-0.7.5.tar.gz by JNTHN http://modules.perl6.org/dist/cro:cpan:JNTHN

[16:06] <buggable> New CPAN upload: cro-zeromq-0.7.5.tar.gz by JNTHN http://modules.perl6.org/dist/Cro::ZeroMQ:cpan:JNTHN

[16:06] <lizmat> whee... new Cro !

[16:07] <Geth> ¦ perl6-pod-to-bigpage: 0d2e0e0c1c | (JJ Merelo)++ | META6.json

[16:07] <Geth> ¦ perl6-pod-to-bigpage: Bumps up version

[16:07] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/commit/0d2e0e0c1c

[16:07] *** sena_kun joined
[16:08] <AlexDaniel> robertle: that sounds wonderful, I'm quite happy with that situation :)

[16:08] <Geth> ¦ doc: JJ self-assigned TOC doesn't work in 1-file docs https://github.com/perl6/doc/issues/1980

[16:08] <AlexDaniel> robertle: some discussion on that patch is on #moarvm right now

[16:10] <jmerelo> jnthn++ 

[16:10] <jmerelo> Yay!

[16:11] <Geth> ¦ doc: 82121ec3a7 | (JJ Merelo)++ | 3 files

[16:11] <Geth> ¦ doc: Restores anchors

[16:11] <Geth> ¦ doc: 

[16:11] <Geth> ¦ doc: Which still causes problems like  perl6/perl6-pod-to-bigpage#21, but

[16:11] <Geth> ¦ doc: closes #1980, which is bigger.

[16:11] <Geth> ¦ doc: 

[16:11] <Geth> ¦ doc: Also triggers rebuild, and bumps up the bigpage version to the one

[16:11] <Geth> ¦ doc: that includes this fix

[16:11] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/82121ec3a7

[16:11] *** st_elmo joined
[16:12] *** jmerelo left
[16:14] <comborico1611> What does it mean on github, you must be on a branch?...When trying to figure PR

[16:15] <comborico1611> Trying to do a PR

[16:16] <buggable> New CPAN upload: Cro-HTTP-Test-0.7.5.tar.gz by JNTHN https://cpan.metacpan.org/authors/id/J/JN/JNTHN/Perl6/Cro-HTTP-Test-0.7.5.tar.gz

[16:16] <timotimo> comborico1611: what URL are you looking at?

[16:19] <lizmat> weekly: http://cro.services/docs/releases#0.7.5

[16:19] <notable6> lizmat, Noted!

[16:20] <timotimo> jnthn: the first mention of Perl 6 has a line break in between, maybe put non-breaking spaces there? :)

[16:20] <timotimo> the release notes for 0.7.5, that is

[16:21] <timotimo> actually, maybe i can commit to that site

[16:24] <comborico1611> m: my $thing = rx/ c..f /; say $thing.WHAT

[16:24] <camelia> rakudo-moar b49731150: OUTPUT: «(Regex)␤»

[16:24] <timotimo> do i really have to put literally &nbsp; in the source for this to work?

[16:25] *** troys joined
[16:25] <comborico1611> timotimo: hmm.  It has my name in the address.  That's probably a clue to the problem.

[16:26] <timotimo> not necessarily

[16:26] *** Ven`` left
[16:27] *** mcmillhj left
[16:27] <comborico1611> It was, though.  Thanks!  I was somehow in my own thing or something.

[16:28] <timotimo> well, you can only really make a pull request starting from a repository that you have write access to

[16:33] *** scimon left
[16:33] *** sauvin joined
[16:34] *** sauvin_ joined
[16:37] *** araraloren left
[16:38] *** sauvin left
[16:39] *** mcmillhj joined
[16:41] <comborico1611> Hmm.  I don't see PR on here this time.

[16:42] <comborico1611> My githib did not like my phone in desktop mode.

[16:42] <Geth> ¦ doc: COMBORICO++ created pull request #1982: '/ /' and 'rx/ /' clarified purpose of use

[16:42] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/1982

[16:44] *** Ven`` joined
[16:45] <comborico1611> Lunch time!

[16:45] *** comborico1611 left
[16:46] *** wamba joined
[17:26] *** st_elmo left
[17:30] *** Ven`` left
[17:31] *** zakharyas joined
[17:39] *** Tison joined
[17:39] <Tison> How to see if a module installed in p6 code?

[17:39] <yoleaux> 29 Apr 2018 11:39Z <AlexDaniel> Tison: you can try `zef rdepends URI`

[17:40] <Tison> k

[17:40] <Tison> what I want to do is something like, `try to load module` or die "..."

[17:41] <timotimo> https://docs.perl6.org/language/modules#require - this might help

[17:42] *** mcmillhj left
[17:47] *** llfourn left
[17:47] <Tison> since it says `(try require Foo) === Nil and say "Failed to load Foo!";`, can we omit the `=== Nil` part?

[17:48] <Tison> (try require Foo) or die "..."

[17:51] <El_Che> releasable6: status

[17:51] <releasable6> El_Che, Next release in ≈19 days and ≈1 hour. 1 blocker. 0 out of 34 commits logged

[17:51] <releasable6> El_Che, Details: https://gist.github.com/b0363ba31d034c842606c7448cdaed96

[17:51] <AlexDaniel> El_Che: it's out!

[17:51] <AlexDaniel> 2018.04.1 that is

[17:51] <El_Che> AlexDaniel++

[17:52] <El_Che> I'll set the wheel in motuon :)

[17:55] *** llfourn joined
[18:01] *** zakharyas left
[18:05] *** Ven`` joined
[18:06] *** hobbified joined
[18:06] *** hobbs left
[18:07] *** natrys joined
[18:15] *** Ven`` left
[18:24] *** sauvin_ left
[18:33] *** mcmillhj joined
[18:33] *** Ven`` joined
[18:35] *** robertle left
[18:40] *** domidumont left
[18:50] <mcmillhj> I am trying to figure out why this junction doesn't function the same a loop with the same logic: https://gist.github.com/mcmillhj/f66fa2bd452bfe74baa958ca0f55068d

[18:50] <mcmillhj> any thoughts? 

[18:51] <lizmat> mcmillhj: what's know() ?

[18:52] <lizmat> and tell() ?

[18:52] <mcmillhj> I'll post the surrounding code, I wasn't sure if that was needed

[18:53] <mcmillhj> lizmat: updated

[18:53] <lizmat> it's correct that @dates is an Array of Lists ?

[18:54] <mcmillhj> Yes, I am using a List as a tuple here. 

[18:55] <mcmillhj> the logic *looks* the same to me, but I am new to the concept of Junctions, and also Perl6 in general 

[18:57] <lizmat> I'm not seeing anything obvious, but I've just had dinner and have not waken up again  :-)

[19:00] <mcmillhj> hmm okay, I'll keep digging in 

[19:06] <El_Che> lizmat: when is the weekly supposed to be out?

[19:06] <lizmat> in about 2 hours, why ?

[19:06] <lizmat> is that enough for your 2018.04 packages

[19:07] <El_Che> I am debuggin a ruby segfault for the i386 ubuntu package creation

[19:07] <El_Che> there are a lot of changes: repos for rpms and debs mainly

[19:08] <El_Che> but also additon of path setting script for newbies and cleanup of doc

[19:08] <El_Che> and ubuntu 18.04 packages

[19:09] <El_Che> there is also a repo for speeding up the doc CI (prcompiled drakudo + modules), but I don't know if it's weekly material

[19:12] <lizmat> perhaps

[19:13] <El_Che> that one with the repo for prerelease testing are more of a CI effort

[19:20] <Geth> ¦ doc: 9b335e3780 | (Luca Ferrari)++ | doc/Type/Bool.pod6

[19:20] <Geth> ¦ doc: Document Bool.ACCEPTS.

[19:20] <Geth> ¦ doc: 

[19:20] <Geth> ¦ doc: See issue #1949

[19:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9b335e3780

[19:20] <Geth> ¦ doc: 3323b8641c | (Luca Ferrari)++ | doc/Type/Bool.pod6

[19:20] <Geth> ¦ doc: Document Bool.ACCEPT.

[19:20] <synopsebot> Link: https://doc.perl6.org/type/Bool

[19:20] <Geth> ¦ doc: 

[19:20] <Geth> ¦ doc: Close #1949

[19:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/3323b8641c

[19:20] <Geth> ¦ doc: b3565363fe | (Luca Ferrari)++ | 36 files

[19:20] <Geth> ¦ doc: Merge branch 'master' of github.com:perl6/doc

[19:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b3565363fe

[19:25] <Geth> ¦ doc: a2b8e57db6 | (Will "Coke" Coleda)++ | doc/Type/Bool.pod6

[19:25] <Geth> ¦ doc: fix typo

[19:25] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a2b8e57db6

[19:40] *** evalable6 left
[19:40] *** evalable6 joined
[19:43] *** retupmoca joined
[19:44] *** zachk joined
[19:44] *** zachk left
[19:44] *** zachk joined
[19:44] *** comborico1611 joined
[19:45] *** darutoko left
[19:45] <El_Che> found it

[19:45] <El_Che> :)

[19:48] <Zoffix> Tison: no, that won't work, because `require` return the package/class for that thing, which is neither true nor is (usually) defined. If you want it to die, then you could just drop the `try` bit and let `require` die.

[19:49] <Tison> ok

[19:55] <TimToady> m: my $p = 2¹⁰⁰; say $p.lsb == $p.msb

[19:55] <camelia> rakudo-moar 8cd70d1ee: OUTPUT: «True␤»

[19:57] <Zoffix> ah :) nice

[19:58] <comborico1611> TimToady: You started in Pascal, right?  I read that subroutines are different from functions in Pascal, wondering why you chose to use sub in Perl instead of fun.

[19:58] <timotimo> no fun allowed

[19:58] <comborico1611> lol

[19:58] <Zoffix> tobs: ^ another way for your power-of-two thing

[19:58] <TimToady> no, I started in a language with GOSUB

[19:59] <comborico1611> And it used the term subroutine? 

[19:59] <TimToady> that's what SUB was short for

[19:59] <comborico1611> Well that solves that mystery.  Thanks!

[19:59] <TimToady> 'sides, subroutines aren't functions in the mathematical sense

[20:00] <TimToady> if I'd gone with Pascal, I'd've used 'proc', not 'fun'

[20:01] <comborico1611> I see.  "subroutine" may have faired better if it dropped the "sub" part.  "subroutine" is a mouth-full compared to function.

[20:01] <TimToady> it's okay to pronounce "sub" as "function" :)

[20:03] *** Ven`` left
[20:03] <comborico1611> I pronounce "methods" as member-functions. :)  I hate that term method.  

[20:04] <comborico1611> These terms such a learning curve for beginners.

[20:04] <Voldenet> imho function implies mathematical semantics (state passed as an input) and subroutine does not

[20:05] * TimToady thinks 'member-function' is about one word too many for a common term

[20:05] *** Zoffix left
[20:06] <TimToady> and that's why we call them "graphemes", not the long phrase the Unicode consortium uses that I can't even remember

[20:07] <comborico1611> I don't like say "sub" instead of "subroutine".  I just find it... too post-modern for me.

[20:07] <El_Che> notable6: weekly: https://github.com/nxadm/rakudo-pkg/releases/tag/v2018.04.1-01

[20:07] <notable6> El_Che, Noted!

[20:08] <comborico1611> I cling to terms that rung true to me and helped me to understand concepts.  Member-function is so much more descriptive than "method".

[20:08] <El_Che> lizmat: ^--- the packages are being built and will appear there, but so you have the release notes

[20:08] <Voldenet> just use every language like java - create em classes and don't use anything but methods ;D

[20:08] <stmuk> . o O ( we probably had a lucky escape in not having colour being part of the syntax like colorforth )

[20:10] *** athenot left
[20:10] <comborico1611> Heh. Weird.  I started to memorize a bunch of names of colors in trying to get my Web Development skills better.  Fuschia. 

[20:11] <comborico1611> AntiqueWhite

[20:11] <comborico1611> Cornsilk

[20:14] <stmuk> puce?

[20:16] <comborico1611> Not an HTML keyword, I believe.

[20:20] *** wamba left
[20:21] *** mingdao left
[20:26] *** mcmillhj left
[20:27] *** khw left
[20:28] *** khw joined
[20:28] *** mingdao joined
[20:28] <comborico1611> Can someone provide an example of "multiline strings -- using anchors ^^ and $$

[20:29] <comborico1611> brb

[20:30] <moritz> m: say "ab\ncdef\geh" ~~ /^^ d \N+ $$ /

[20:30] <camelia> rakudo-moar 8cd70d1ee: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unrecognized backslash sequence: '\g'␤at <tmp>:1␤------> 3say "ab\ncdef\7⏏5geh" ~~ /^^ d \N+ $$ /␤    expecting any of:␤        argument list␤        double quotes␤        term␤»

[20:30] <moritz> m: say "ab\ncdef\ngeh" ~~ /^^ d \N+ $$ /

[20:30] <camelia> rakudo-moar 8cd70d1ee: OUTPUT: «Nil␤»

[20:30] <moritz> m: say "ab\ncdef\ngeh" ~~ /^^ d \N+ \n? $$ /

[20:30] <camelia> rakudo-moar 8cd70d1ee: OUTPUT: «Nil␤»

[20:30] <moritz> m: say "ab\ncdef\ngeh" ~~ /^^ d \N+ /

[20:30] <camelia> rakudo-moar 8cd70d1ee: OUTPUT: «Nil␤»

[20:31] * moritz too tired for regexes

[20:31] <moritz> m: say "ab\ncdef\ngeh" ~~ /^^ d .*? $$ /

[20:31] <camelia> rakudo-moar 8cd70d1ee: OUTPUT: «Nil␤»

[20:31] <moritz> m: say "ab\ncdef\ngeh" ~~ /^^ c .*? $$ /

[20:31] <camelia> rakudo-moar 8cd70d1ee: OUTPUT: «｢cdef｣␤»

[20:31] <moritz> m: say "ab\ncdef\ngeh" ~~ /^^ c \N+ $$ /

[20:31] <camelia> rakudo-moar 8cd70d1ee: OUTPUT: «｢cdef｣␤»

[20:32] <moritz> comborico1611: ^^ this is an example that matches a single logical line starting with c

[20:41] <comborico1611> Yeah, that's a good example. 

[20:41] <comborico1611> Thanks!@

[20:48] *** Rawriful joined
[21:01] *** skids left
[21:04] <comborico1611> I may have just nuked my system... Uninstalling dependencies of Vagrant.  And it's listening my Windows partition...

[21:04] <comborico1611> it's listing

[21:05] <comborico1611> And I'm using the linux partition...

[21:14] *** robertle joined
[21:15] *** comborico1611 left
[21:15] *** imcsk8_ left
[21:16] *** dct left
[21:16] *** imcsk8 joined
[21:16] *** Zoffix joined
[21:16] *** Zoffix left
[21:17] *** sena_kun left
[21:18] *** dct joined
[21:21] *** khisanth__ left
[21:25] *** pilne joined
[21:31] * lizmat wishes comborico1611 strength

[21:33] *** Tison left
[21:34] *** khisanth__ joined
[21:40] *** dct left
[21:43] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/04/30/2018-18-releases-galore/

[21:45] *** dct joined
[21:50] *** robertle left
[21:50] *** jnthn joined
[21:51] *** rindolf left
[21:58] *** raydiak_ is now known as raydiak

[22:07] *** HaraldJoerg left
[22:08] *** margeas left
[22:12] *** comborico1611 joined
[22:17] *** retupmoca left
[22:21] *** dct left
[22:34] *** mcmillhj joined
[22:35] *** retupmoca joined
[22:36] *** retupmoc joined
[22:37] *** pmurias left
[22:39] *** retupmoca left
[22:41] *** raynold left
[22:44] *** FROGGS__ left
[22:53] *** markong joined
[22:54] *** MilkmanDan left
[22:59] *** MilkmanDan joined
[22:59] *** mcmillhj left
[23:01] *** natrys left
[23:03] *** Rawriful left
[23:04] *** Herby_ joined
[23:04] <Herby_> \o

[23:04] <Herby_> everyone++ on the latest release

[23:12] *** retupmoc is now known as retupmoca

[23:12] *** quotable6 left
[23:12] *** notable6 left
[23:12] *** bloatable6 left
[23:12] *** coverable6 left
[23:12] *** benchable6 left
[23:12] *** squashable6 left
[23:12] *** nativecallable6 left
[23:12] *** unicodable6 left
[23:12] *** reportable6 left
[23:12] *** greppable6 left
[23:12] *** evalable6 left
[23:12] *** releasable6 left
[23:12] *** bisectable6 left
[23:12] *** committable6 left
[23:12] *** statisfiable6 left
[23:12] *** shareable6 left
[23:18] *** MilkmanDan left
[23:19] *** MilkmanDan joined
[23:22] *** notable6 joined
[23:22] *** ChanServ sets mode: +v notable6

[23:22] *** bloatable6 joined
[23:22] *** evalable6 joined
[23:22] *** nativecallable6 joined
[23:22] *** benchable6 joined
[23:22] *** ChanServ sets mode: +v benchable6

[23:22] *** committable6 joined
[23:22] *** greppable6 joined
[23:22] *** coverable6 joined
[23:22] *** quotable6 joined
[23:22] *** releasable6 joined
[23:22] *** reportable6 joined
[23:22] *** ChanServ sets mode: +v releasable6

[23:22] *** ChanServ sets mode: +v reportable6

[23:22] *** squashable6 joined
[23:22] *** ChanServ sets mode: +v squashable6

[23:22] *** bisectable6 joined
[23:22] *** ChanServ sets mode: +v bisectable6

[23:22] *** unicodable6 joined
[23:22] *** statisfiable6 joined
[23:26] <retupmoca> I see CPAN has full perl6 support now. Should I start moving my modules from META.list into CPAN?

[23:26] <yoleaux> 23 Feb 2018 18:44Z <japhb> retupmoca: Saw this while `zef install`ing my usual packages: ===> Extraction: Failed to find a META6.json file for JSON::JWT:ver<1.0>:auth<github:retupmoca> -- failure is likely

[23:26] <retupmoca> what's considered "best practice"?

[23:32] *** kurahaupo_ joined
[23:35] *** kurahaupo left
[23:46] *** skids joined
