[00:15] *** markong left
[00:17] <Zoffix> .tell lucasb I'm not the gatekeeper of modules.perl6.org. It's open source. You got commit bit. Write code.

[00:17] <yoleaux> Zoffix: I'll pass your message to lucasb.

[00:18] <Zoffix> |4d make rakudo.org serve static files statically

[00:18] <ZofBot> Zoffix, Will remind you on 2018-05-12T20:18:00.902442-04:00 about make rakudo.org serve static files statically

[00:19] *** APic left
[00:19] *** APic joined
[00:20] <Zoffix> stmuk: I'll make it statically serve files on the weekend (pretty busy before that). Unless someone beats me. Basically these two routes need to do the magic and redirect to static files, I guess and I'm guessing apache's config will need to be tweaked to serve a particular dir without proxying it to rakudo.org app: https://github.com/perl6/rakudo.org/blob/master/app.pl#L82-L103

[00:20] * Zoffix &

[00:20] *** Zoffix left
[00:20] *** Zoffix joined
[00:21] <Zoffix> timotimo: ingy I fixed that Test::Builder issue. I didn't know you were talking about it here.

[00:21] *** Zoffix left
[00:23] *** w_richard_w joined
[00:29] *** mcmillhj joined
[00:34] *** mcmillhj left
[01:03] *** comborico1611 left
[01:05] *** eponym joined
[01:07] *** mcmillhj joined
[01:10] *** eponym left
[01:12] *** windyhouses left
[01:12] *** mcmillhj left
[01:30] *** mcmillhj joined
[01:34] *** mcmillhj left
[01:45] *** ilbot3 left
[01:47] *** uzl joined
[01:47] *** kurahaupo_ joined
[01:48] *** zakharyas joined
[01:49] *** kurahaupo left
[01:51] <uzl> comborico1611: On top of Euler Project , you might want to look at the exercises for Perl 6 on http://exercism.io/languages/perl6/about

[01:56] *** molaf left
[01:57] *** ilbot3 joined
[01:57] *** ChanServ sets mode: +v ilbot3

[02:08] *** molaf joined
[02:11] *** mcmillhj joined
[02:16] *** mcmillhj left
[02:24] *** AlexDaniel left
[02:33] *** ryn1x joined
[02:35] *** Herby__ joined
[02:37] *** krkini is now known as kini

[02:38] *** ufobat___ joined
[02:41] *** mcmillhj joined
[02:42] *** uzl left
[02:42] *** ufobat_ left
[02:45] *** mcmillhj left
[03:03] *** Herby__ left
[03:09] *** rjbs left
[03:22] <perlawhirl> is there a meta-package of all the P5* Butterfly Project modules, so I can zef install them all in one hit

[03:23] *** khw left
[03:27] *** ryn1x left
[03:31] *** pilne left
[03:33] *** mcmillhj joined
[03:37] *** mcmillhj left
[03:42] *** ryn1x joined
[03:52] *** rjbs joined
[04:00] *** ryn1x left
[04:01] *** ryn1x joined
[04:02] *** mcmillhj joined
[04:06] *** mcmillhj left
[04:08] *** MilkmanDan left
[04:09] *** MilkmanDan joined
[04:17] *** eliasr left
[04:18] *** ryn1x left
[04:23] *** molaf left
[04:26] *** skids left
[04:26] *** molaf joined
[04:32] <ingy> is there a way to leave msgs for people here?

[04:34] <ingy> also what is ZofBot?

[04:38] <ingy> timotimo: Test::Builder is failing travis: https://travis-ci.org/perl6-community-modules/p6-test-builder/builds/376619154

[04:41] *** mcmillhj joined
[04:42] *** molaf left
[04:43] *** curan joined
[04:45] <lucs> ingy: ｢.tell whomever The message...｣

[04:46] <lucs> .tell ingy Next time you speak here, you will get this message.

[04:46] *** mcmillhj left
[04:46] <yoleaux> lucs: I'll pass your message to ingy.

[04:46] <ingy> lucs: thx

[04:46] <yoleaux> 04:46Z <lucs> ingy: Next time you speak here, you will get this message.

[04:47] <ingy> :)

[04:54] *** wamba joined
[04:57] *** mcmillhj joined
[05:01] *** jmerelo joined
[05:02] *** mcmillhj left
[05:09] *** zymurgy left
[05:09] *** geekosaur left
[05:11] <jmerelo> p6: my $seq = Date.today, *.earlier(:1day) ... ( *.day-of-week==5 && *.week[1]+1==Date.today.week[1] ).tail ; say $seq;

[05:11] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «Potential difficulties:␤    Useless use of ... in sink context␤    at <tmp>:1␤    ------> 3 $seq = Date.today, *.earlier(:1day) ...7⏏5 ( *.day-of-week==5 && *.week[1]+1==Date␤2018-05-09␤»

[05:14] <ufobat___> .tell timotimo is there still anything i can do to get this free() thing resolved? I'll need to reset the server that produces the response for my rest script soon

[05:14] <yoleaux> ufobat___: I'll pass your message to timotimo.

[05:15] <jmerelo> p6: say Date.today, *.earlier(:1day) ...  *.day-of-week==5; 

[05:15] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «(2018-05-09 2018-05-08 2018-05-07 2018-05-06 2018-05-05 2018-05-04)␤»

[05:18] *** geekosaur joined
[05:19] *** geekosaur left
[05:19] <jmerelo> p6: say Date.new("2018-05-11"), *.earlier(:1day) ...  *.day-of-week==5; 

[05:19] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «(2018-05-11)␤»

[05:19] <jmerelo> p6: say Date.new("2018-05-10"), *.earlier(:1day) ...  *.day-of-week==5; 

[05:19] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «(2018-05-10 2018-05-09 2018-05-08 2018-05-07 2018-05-06 2018-05-05 2018-05-04)␤»

[05:27] *** mcmillhj joined
[05:28] *** geekosaur joined
[05:32] *** mcmillhj left
[05:40] <Geth> ¦ doc: JJ self-assigned p6doc - 'make html' fails https://github.com/perl6/doc/issues/2014

[05:47] *** DataLinkDroid joined
[05:49] *** wamba left
[05:53] *** mcmillhj joined
[05:56] <Geth> ¦ doc: 075ecca867 | (JJ Merelo)++ | README.md

[05:56] <Geth> ¦ doc: Clarifies use of g++, closes #2014

[05:56] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/075ecca867

[05:56] <Geth> ¦ doc: e16b1ad778 | (JJ Merelo)++ | 2 files

[05:56] <Geth> ¦ doc: Clarification of JSON minimal requirements, closes #2013

[05:56] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e16b1ad778

[05:58] *** mcmillhj left
[06:05] *** dylanwh left
[06:07] *** mcmillhj joined
[06:11] <Geth> ¦ doc: a7f3dcdacb | (JJ Merelo)++ | doc/Language/community.pod6

[06:11] <Geth> ¦ doc: Expands community page with #728 suggestions

[06:11] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a7f3dcdacb

[06:11] <synopsebot> Link: https://doc.perl6.org/language/community

[06:12] *** mcmillhj left
[06:17] *** sauvin joined
[06:23] <jmerelo> May I draw your attention to the Glossary page? https://github.com/perl6/doc/issues/728 It's (still) not complete, but there's not much remaining. Maybe you can pick up one of the terms and work on it?

[06:27] <jmerelo> I'm now working my way down from B, and marking on the issue when I get them. Please do the same...

[06:34] <Geth> ¦ doc: 520e3130dd | (JJ Merelo)++ | doc/Language/glossary.pod6

[06:34] <synopsebot> Link: https://doc.perl6.org/language/glossary

[06:34] <Geth> ¦ doc: Adds bytecode and block, refs #728

[06:34] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/520e3130dd

[06:50] *** Kaffe left
[06:51] *** mcmillhj joined
[06:54] *** MilkmanDan left
[06:55] *** mcmillhj left
[06:56] *** MilkmanDan joined
[07:07] *** darutoko joined
[07:10] *** mcmillhj joined
[07:11] *** ufobat___ is now known as ufobat

[07:12] *** grondilu joined
[07:13] <masak> haha, I like how the latest "Perl Weekly" has a link "How long does it take you to learn a new language?", and then the description text is just "2 months for Perl and Mojolicious", as if that's the globally correct answer, and not just someone's arbitrary number. :)

[07:14] <masak> also, I wonder if it was 4 weeks Perl and 4 weeks Mojolicious, or sort of 6 weeks Perl and 2 weeks Mojolicious

[07:14] *** mcmillhj left
[07:17] *** sno left
[07:22] *** rindolf joined
[07:23] <masak> (don't want to be too harsh on Perl Weekly, by the way. it's usually very nice to get on Monday mornings.)

[07:29] <moritz> i share your amusement

[07:30] <masak> it's a little bit like those occasional "Infrequently Asked Question" lists, where deep and troubling questions are frivolously answered in just a few words

[07:31] <masak> Q: How long does it take to learn quantum computing and design your first quantum algorithm? A: Two months.

[07:32] <moritz> you know the classifc C++ FQAs, right? :)

[07:33] <moritz> "frequently questioned answers"

[07:33] <masak> yes, I enjoy those a little bit too much

[07:33] <moritz> an artful piece of trolling

[07:34] <masak> in fact, since I haven't used C++ in decades, such FQAs make up the majority of my C++ knowledge nowadays

[07:36] *** mcmillhj joined
[07:37] <moritz> totally unbiased knowledge :)

[07:38] * masak .oO( alternative FAQs )

[07:39] <ufobat> did you just invent this term?

[07:39] <ufobat> i actually never heared alternative FAQs before :(

[07:40] <ufobat> thats what you find, when you're googling it :( https://www.afd.de/faq-items/

[07:41] <masak> ufobat: it was a riff/paraphrase of Kellyanne Conway's "alternative facts". beyond that, it's not a real term, AFAIK.

[07:41] <ufobat> yeah i know

[07:41] <ufobat> but the pun with the FAQs

[07:41] *** mcmillhj left
[07:41] <masak> I often see "Infrequently Asked Questions" when people want to be cheeky and/or weird.

[07:47] *** mcmillhj joined
[07:52] *** mcmillhj left
[07:58] *** windyhouses joined
[08:03] *** jast left
[08:06] *** imcsk8 left
[08:06] *** jast joined
[08:06] *** dakkar joined
[08:08] *** scimon joined
[08:16] *** sno joined
[08:18] *** mcmillhj joined
[08:19] *** imcsk8 joined
[08:23] *** mcmillhj left
[08:34] *** mcmillhj joined
[08:36] *** wamba joined
[08:38] *** mcmillhj left
[08:49] <lizmat> https://medium.com/@akbgunner4ever/what-is-perl-how-relevant-it-is-and-how-to-get-started-d802e7aba2cd

[08:49] <lizmat> mentions Perl 6, then introduces Perl 5 code without strict  :-(

[08:50] * jmerelo runs off to correct that wrong...

[08:52] <lizmat> please be kind  :-)

[08:52] <donpdonp> Unhandled exception in code scheduled on thread 7; Too few positionals passed; expected 6 arguments but got 2

[08:53] <jmerelo> lizmat: "the child of Python and scripting" C'mon...

[08:53] *** wamba left
[08:53] <donpdonp> how can i handle that better? the docs say the default handler will print a backtrace but those two lines are all i get (there are no try or catch blocks in the code)

[08:53] <lizmat> later he says that that can't be true because Perl is older

[08:53] <donpdonp> also ive tried wrapping the inside of main() with a try{} and/or adding CATCH and nothing changes about the output

[08:53] <lizmat> donpdonp: also if you run with --ll-exception ?

[08:53] * donpdonp tries that

[08:54] <jmerelo> lizmat: so don't say that in the first place... it's like saying that it's like a more complicated Ruby... Ruby got the sigils from Perl.

[08:54] <donpdonp>   in block  at SETTING::src/core/IO/Socket/Async.pm6 line 175

[08:54] <jmerelo> lizmat: also I hate it when people start with the classic hello world program...

[08:54] <donpdonp> lizmat: well there it is. thx 

[08:54] <lizmat> well, I look at it as: any publicity is good publicity  :-)

[08:54] <jmerelo> lizmat: right.

[08:55] <jmerelo> lizmat: he kind of seems allergic to loops. Or map.

[08:55] <donpdonp> hmm all the stack frames are inside src/core

[08:55] <jmerelo> lizmat: or decent indentation.

[08:56] <lizmat> donpdonp: could you gist the stack trace ?

[08:56] <donpdonp> surely the problem starts in my own code

[08:56] <donpdonp> lizmat: https://gist.github.com/donpdonp/c893ddffdee4fd6fd687dbf4ef5246db

[08:59] *** grondilu left
[09:00] *** grondilu joined
[09:00] <donpdonp> lizmat: fyi perl6 --version => 'This is Rakudo version 2018.04.1 built on MoarVM version 2018.04.1'

[09:01] <lizmat> donpdonp: yeah, the line numbers lined up with my version, so thought it'd be recent

[09:02] <lizmat> the  block in question does indeed need 6 params...

[09:02] <lizmat> but I'm not sure where it is getting called, somewhere in the bowels of nqp::asyncconnect, I would think :-(

[09:03] <lizmat> could it be that the connection is broken immediately ?

[09:03] <lizmat> feels to me this warrants a Rakudo issue  

[09:04] <lizmat> feels to me some error condition causes the block to be called with just 2 parameters

[09:05] <donpdonp> nod. i can try to look into it further

[09:05] <lizmat> looking at the code, it seems to not use parameters 3..6 if there was an error

[09:07] <donpdonp> where is the nqp code? i tried looking for '$ ack asyncconnect /home/donp/.rakudobrew/moar-2018.04.1/src/' but it only found the usage inside IO/Socket/Async.pm6

[09:08] *** mcmillhj joined
[09:08] *** Guest43854 joined
[09:08] <lizmat> you probably need to do ack -a

[09:08] <lizmat> anyways, if you not shy of looking at the source

[09:09] <donpdonp> Option '-a' is not valid in ack 2. sigh. grep -r didnt find the definition of asyncconnect either.

[09:09] <lizmat> :-(

[09:11] <donpdonp> oh now im looking in the right place moar-2018.04.1/nqp (not /src)

[09:12] <lizmat> donpdonp: this is getting into above my paycheck land...  I think you should try to golf it down and make an Issue

[09:12] <lizmat> brb

[09:12] *** mcmillhj left
[09:14] * donpdonp gets out the 9-irons

[09:16] *** mcmillhj joined
[09:21] *** mcmillhj left
[09:22] <masak> I have a question about -- dun dun DUN -- parsing

[09:22] <jast> oh noes

[09:22] <masak> in 007, expressions can start with a '{', when they denote an object literal, like '{ a: 7 }'

[09:23] <masak> but statements can also start with a '{', when they denote a solo block: '{ say("OH HAI") }'

[09:23] <jmerelo> :-)

[09:24] <masak> these two syntaxes are "in conflict", because of "expression statements", statements which (only) contain an expression

[09:24] <masak> and so in the 007 parser, the rule statement:expr needs to say "fail if starting with '{'"

[09:25] <masak> now, my question: needing to say that feels inelegant, or more precisely, it feels like a concern about statement blocks "leaking" over into expression statements

[09:25] <masak> is there a way to achieve the same but with better separation of concerns?

[09:26] <jast> what's the structure of your parser, rec desc?

[09:26] <masak> it's a Perl 6 grammar, so... yes

[09:26] <jast> oh, good point :)

[09:26] <masak> (this code has been in the 007 since forever, but I got to thinking about it again because I needed to fix a bug on that line: https://github.com/masak/007/pull/289 )

[09:26] <jast> well, in this class of parser you're going to *have* to cheat somehow

[09:27] <masak> I have the same sort of generally uneasy feeling about "stoppers" like '->', where a lower level in the recdescent needs to keep on the lookout for something from a higher level

[09:28] <masak> that too feels like a leak

[09:29] * masak secretly hopes that moritz++ will pop up and say "just see page X of my book!"

[09:30] <jmerelo> masak: I'm not too good at this (or anything else, for that matter), but wouldn't this be a case for using backtracking? You check out what's inside {}, once you know, go back and use one or the other

[09:31] <jmerelo> Or is there any case where it's impossible to know which is which? So '{a:7}' can _also_ be an expression?

[09:31] <jmerelo> sorry, a statement...

[09:31] *** rindolf left
[09:31] <masak> jmerelo: I suppose, at least in the sense that that's possible to guess.

[09:31] <masak> jmerelo: though note that Perl 5, Perl 6, JavaScript all elected not to guess

[09:31] <masak> I think there's a reason for that :)

[09:32] <masak> hm, correction: Perl 6 actually has some heuristics there

[09:33] <lizmat> yeah, I understand adverb handling is one of these?

[09:33] <masak> jmerelo: in either case, we can assume that I'm not currently considering lookahead/backtracking to be a viable solution, and so my question is more about how, given that, one can write a parser that doesn't have a cheat

[09:34] <masak> lizmat: adverb handling is one of those "creative lying to yourself" affairs, yes

[09:34] <masak> lizmat: but it's completely separate from "is this { ... } a block or an object" handling

[09:35] <masak> jast: why is it the case that you have to cheat somehow in a recdescent parser?

[09:35] <jmerelo> masak: without changing the language, I guess... There are still some ambiguities in Perl 6. {} in some cases can be either an empty block or an empty hash... That's why we prefer people to use %() for hashes.

[09:35] <masak> jmerelo: yes.

[09:36] <masak> jmerelo: one thing I've learned (through osmosis) from TimToady is that backtracking is inadvisable when parsing languages

[09:36] <jmerelo> masak: can't help you. However, might I suggest to take that to StackOverflow? Lots of expert people there in Perl 6 _and_ grammars... :-)

[09:36] <masak> jmerelo: the Perl 6 spec has a very short list of a handful of places where it (very carefully) deviates from this rule-of-thumb

[09:37] <masak> jmerelo: thanks. good idea.

[09:38] <masak> oh, and in fact, at least once 007 has had a very insidious scoping bug that was ultimately rooted in the grammar (wrongly) doing backtracking after having done some side effects during the first/backtracked parse

[09:38] *** zakharyas left
[09:39] <masak> I think that's largely the reason backtracking becomes infeasible in a language like Perl 6: because parsing "changes the language" as you go, and these changes tend to happen right away, and so any backtracking runs into problems with undoing those changes

[09:39] <jmerelo> masak: right...

[09:40] <masak> that's besides the obvious philosophical inelegance with "having to guess" :)

[09:42] <jast> the non-cheating way is to use backtracking (potentially optimized using memoization but that's difficult in recdesc)

[09:44] <jast> it's very much possible in general, though, because you can keep all of the changes to the parser/language as part of the parser state so it gets rolled back when backtracking

[09:44] *** w_richard_w left
[09:45] <jast> but yeah, if you can't backtract you need to keep context in your parser (which is essentially what looking back into a higher level is, though that's slightly more dirty)

[09:45] <jast> a somewhat cleaner way would be for higher levels to pass along flags to lower levels

[09:47] *** DataLinkDroid left
[09:51] *** Guest43854 left
[09:55] <gfldex> m: say [5..7] ~~ [0..12];

[09:55] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «False␤»

[09:55] <gfldex> m: say [5..7].all ~~ [0..12];

[09:55] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «all(False, False, False)␤»

[09:56] <gfldex> do we got an idiom for "one range is within another range"?

[09:57] <gfldex> m: say [3..5] ∈ [1..12];

[09:57] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «False␤»

[09:58] <lizmat> hmmm...interesting use of (elem)

[09:58] <gfldex> m: say [3..5].all ∈ [1..12];

[09:58] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «all(True, True, True)␤»

[09:58] <lizmat> m: say [3..5] (<=) [0..12]

[09:58] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «True␤»

[09:59] <lizmat> m: say [3..15] (<=) [0..12]

[09:59] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «False␤»

[09:59] <lizmat> m: say [3..5] ⊆ [0..12]

[09:59] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «True␤»

[09:59] <lizmat> gfldex: subset seems more applicable to what you want  :-)

[10:00] <gfldex> aye

[10:00] <lizmat> m: say [3,4,5] ⊆ [0..12]  # don't have to be ranges

[10:00] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «True␤»

[10:01] <gfldex> I wonder if the docs should point from /type/Range to Set operators somehow

[10:01] <lizmat> m: say 3..5 ⊆ 0..12 

[10:01] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «True␤»

[10:01] <lizmat> well, perhaps... :)

[10:02] <lizmat> set operators are generally applicable, you don't have to make them all Sets yourself beforehand

[10:02] * gfldex takes notes

[10:02] <lizmat> and if the operation can be done without actually making a Set behind the scenes, it will

[10:03] <lizmat> although I think in this case it actually did  :-(

[10:03] <gfldex> the docs for Set, Bag,… make it sound like the set operators only apply to those types

[10:04] <gfldex> lizmat: Im always happy to help you find spots in Rakudo that would welcome a speedup. :)

[10:05] *** eliasr joined
[10:16] <lizmat> gfldex: https://docs.perl6.org/language/setbagmix#index-entry-Subset_of_operator states:

[10:16] <lizmat> Most of the time, explicitly using Set objects with these infixes is unnecessary. All the infix operators will work on any objects of type Any for its arguments (e.g., List, Array, Mix, etc.) and coerce them to Set where needed.

[10:16] <lizmat> In some cases, if the type of an argument is a Bag, the infix operator will behave in a different but analogous way to the way it would behave with only Set arguments.

[10:17] <gfldex> lizmat: ok, that is solved already

[10:17] <lizmat> I guess the examples could do without the .Set  :-)

[10:21] <lizmat> hmmm... no mention that (>+) is deprecated in favour of (>=)

[10:26] <jmerelo> lizmat: noted. Will issue that.

[10:28] <lizmat> jmerelo++

[10:28] <jmerelo> lizmat: https://github.com/perl6/doc/issues/2016

[10:29] *** rindolf joined
[10:47] *** wamba joined
[10:52] *** Zoffix joined
[10:52] <Zoffix> donpdonp: what's the code that produces that error?

[10:55] *** mikejw joined
[10:55] *** AlexDaniel joined
[10:55] <mikejw> has anyone heard of "Foolish::VCS::Git" ?

[10:56] <mikejw> failed dependency when trying to install this (with zef) https://bitbucket.org/rightfold/module-skeleton

[10:57] <Zoffix> I don't see it in the list of deps..

[10:57] <mikejw> wait the test failure is actually this maybe "# Failed test 'have usable source'

[10:58] <Zoffix> What's the full output? And how did you come across that module, considering it's not in the ecosystem?

[10:58] <mikejw> I guess it means I'm foolishly not using git correctly or something

[10:59] <Zoffix> mikejw: that module appears to be inside that module's `t` dir: https://bitbucket.org/rightfold/module-skeleton/src/2d828604d2fbb42bde0ded7f5d247faef1122b54/t/fixtures/tree/META.info?at=master&fileviewer=file-view-default

[10:59] *** jast left
[10:59] <mikejw> ah ok 

[10:59] *** jast joined
[10:59] <mikejw> thanks

[11:01] <mikejw> hmm so I guess the solution isn't to "manulally" install that

[11:01] <mikejw> *manually

[11:02] <mikejw> end up with the same error pretty much

[11:03] <Zoffix> mikejw: maybe that module isn't working yet? It's not in ecosystem. Try App::Assixt or App::Mi6

[11:03] <Zoffix> eco: App::Assixt

[11:03] <buggable> Zoffix, App::Assixt 'A CLI frontend to Dist::Helper': http://modules.perl6.org/dist/App::Assixt:cpan:TYIL

[11:03] <Zoffix> eco: App::Mi6

[11:03] <buggable> Zoffix, App::Mi6 'minimal authoring tool for Perl6': http://modules.perl6.org/dist/App::Mi6:cpan:SKAJI

[11:03] <mikejw> cool, ok :)

[11:05] *** AlexDani` joined
[11:05] <Zoffix> ingy: ZofBot is my little buddy. He tweets me my IRC mentions and makes pie.

[11:07] *** AlexDaniel left
[11:08] <moritz> ... and converts GCT to UTC :)

[11:09] <Zoffix> yeah that too :)

[11:10] <jast> I thought your time zone was 'Z' :)

[11:10] <moritz> jast: it's the metric time used in https://taustation.space/

[11:11] <Zoffix> |gct 198.31/48:212 GCT

[11:11] <ZofBot> Zoffix, 2018-05-09T11:34:15.857615Z; which is 22 minutes and 34 seconds from now

[11:12] <Zoffix> My jail release time :)

[11:12] <jast> hm, your bot's system time seems to be deviating from mine by a minute or two

[11:13] <jast> yeah, I think mine is wrong, ntp client must be hosed again

[11:15] *** AlexDani` is now known as AlexDaniel

[11:16] *** Zoffix left
[11:19] *** markong joined
[11:20] *** windyhouses left
[11:20] *** windyhouses joined
[11:25] *** Kaiepi left
[11:25] *** Kaiepi joined
[11:27] *** lichtkind left
[11:29] *** wamba left
[11:32] *** atweiden-air joined
[11:37] <atweiden-air> i'm trying to do:

[11:37] <atweiden-air> m: role Hook {*}; role ABC does Hook {*}; my Hook:U @hook = ABC; @hook.say;

[11:37] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «Cannot perform this operation on an uninstantiated definite type␤  in block <unit> at <tmp> line 1␤␤»

[11:37] <atweiden-air> is this the best way?

[11:37] <atweiden-air> m: role Hook {*}; role ABC does Hook {*}; my Mu:U @hook where .^roles.grep(Hook).so = ABC; @hook.say;

[11:37] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «[(ABC)]␤»

[11:37] <atweiden-air> m: role Hook {*}; role ABC does Hook {*}; subset THook of Mu:U where .^roles.grep(Hook).so; my THook @hook = ABC; @hook.say;

[11:37] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «[(ABC)]␤»

[11:40] *** lichtkind joined
[11:43] <timotimo> well, that's weird

[11:43] <yoleaux> 05:14Z <ufobat___> timotimo: is there still anything i can do to get this free() thing resolved? I'll need to reset the server that produces the response for my rest script soon

[11:47] <atweiden-air> m: role Hook {*}; role ABC does Hook {*}; my Hook:U @hook = ABC:U; @hook.say;

[11:47] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «[(ABC:U)]␤»

[11:47] <timotimo> ufobat: it might help if i had access to the script, but i'm really not sure what could be going wrong there; i'll have time very unreliably until monday, so not sure if can help

[11:48] <timotimo> m: role Test { }; my Hook:U @test = Test;

[11:48] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «5===SORRY!5===␤Type 'Hook' is not declared␤at <tmp>:1␤------> 3role Test { }; my Hook:U7⏏5 @test = Test;␤Malformed my␤at <tmp>:1␤------> 3role Test { }; my Hook:U7⏏5 @test = Test;␤    expecting any of:␤        pair valu…»

[11:49] <timotimo> m: role Hook { }; my Hook:U @test = Hook;

[11:49] <camelia> rakudo-moar 16bc0cce9: OUTPUT: «Cannot perform this operation on an uninstantiated definite type␤  in block <unit> at <tmp> line 1␤␤»

[11:49] *** domidumont joined
[11:56] *** domidumont left
[11:57] *** domidumont joined
[11:57] *** epony left
[11:59] *** epony joined
[12:07] *** mikejw left
[12:07] *** pmurias joined
[12:08] <pmurias> what are the mime types for nqp/perl 6 source files?

[12:11] <gfldex> pmurias: i dont't think the IANA was informed about Perl 6 yet

[12:15] <gfldex> pmurias: text/x-perl6 would be a likely candidate

[12:27] *** athenot joined
[12:27] *** molaf joined
[12:28] <ufobat> timotimo, that will produce the same error perl6 -e 'use LibCurl::HTTP; my $url= "https://1.eu.dl.wireshark.org/src/wireshark-2.5.1.tar.xz"; my $http = LibCurl::HTTP.new( :ssl-verifypeer(False), :ssl-verifyhost(False) ); $http.GET($url).setopt(:!failonerror).perform.say'

[12:29] <ufobat> while MVM_JIT_DISABLE=1 perl6 -e 'use LibCurl::HTTP; my $url= "https://1.eu.dl.wireshark.org/src/wireshark-2.5.1.tar.xz"; my $http = LibCurl::HTTP.new( :ssl-verifypeer(False), :ssl-verifyhost(False) ); $http.GET($url).setopt(:!failonerror).perform.say' seems to work

[12:29] *** athenot_ joined
[12:30] <masak> pmurias: are you referring to nqp/perl 6 source files from an HTML document?

[12:30] *** jigsaw joined
[12:31] *** jigsaw left
[12:32] *** athenot left
[12:33] *** atweiden-air left
[12:40] *** mcmillhj joined
[12:41] *** mcmillhj left
[12:43] *** mcmillhj joined
[12:44] *** ufobat left
[12:50] *** lichtkind left
[12:59] *** wamba joined
[13:03] *** FROGGS joined
[13:05] *** molaf left
[13:05] *** curan left
[13:12] *** zori joined
[13:21] *** zori left
[13:27] *** jmerelo left
[13:36] *** skids joined
[13:42] *** dylanwh joined
[13:50] *** lucasb joined
[13:53] <lucasb> .

[13:53] <yoleaux> 00:17Z <Zoffix> lucasb: I'm not the gatekeeper of modules.perl6.org. It's open source. You got commit bit. Write code.

[13:53] <lucasb> Sorry, I didn't mean to be demanding. Instead, consider I was just asking if it is a good idea or not (to add --delete to rsync). If I get a positive answer, then I can certainly edit the code.

[13:54] *** vcv_ joined
[14:15] <mcmillhj> I have now realized that I can condense calls to sort from @pairs.sort({ $^a.key <=> $^b.key }) to @pairs.sort({ .key }). Does the block within sort always have to exist or can it be condensed further? 

[14:15] *** Zoffix joined
[14:16] <timotimo> it can

[14:16] <Zoffix> lucasb: I didn't think it was demanding. My point was you often need to make your own decisions on whether it's a good idea or not and make code changes if you think it is.

[14:16] <timotimo> *.key is short for { .key }

[14:16] <Zoffix> Don't wait for someone to approve all of your ideas. Go do them.

[14:16] <timotimo> so @pairs.sort(*.key) also works

[14:17] <lucasb> Zoffix: nice words, thanks :)

[14:18] <mcmillhj> timotimo: oooh, thanks. I naively tried @pairs.sort(&key)

[14:19] <jast> yeah, that wouldn't know what to call key on

[14:19] <Zoffix> mcmillhj: are those pairs from a hash? If you yes, you can just do %hash.sort and it'll sort by keys

[14:19] <jast> fortunately the 'whatever star' is always there to save the day :)

[14:19] <mcmillhj> Zoffix: they were, but I used .antipairs() to get the inversion

[14:20] <Zoffix> ah

[14:20] <jast> .antipair() still returns Pair objects, so should be the same

[14:20] <mcmillhj> does whatever always expand to a block? i.e. * === { $_ } and *.<method> === { $_.method } ?

[14:20] <jast> the only difference is that pairs compare as keys and then as values if the keys are the same

[14:21] <mcmillhj> jast: yes, but it isn't a hash anymore. I would have to assign it to a hash to then do %h.sort()

[14:21] <Zoffix> mcmillhj: no, * is a Whatever object. Its meaning depends on context and in *.<method> context it gets turned into a WhateverCode

[14:21] <mcmillhj> Zoffix: ah ok, still trying to wrap my head around how most of Perl6 functions. Thanks for the responses.

[14:22] <jast> well if you have a list of antipairs, using sort on that list should be using the Pairs' cmp operator, so that should still do the key-then-value comparison

[14:23] <Zoffix> mcmillhj: when it's a standalone term, it remains a Whatever object. If it's part of an expression, then it gets closed over. There are some additional rules on where the closure ends. Don't know if it's documented somewhere, but in code form they're encoded here: https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L9641-L9665

[14:23] <Zoffix> And you can always add a set of parentheses to demarkate where the closure should end

[14:23] <Zoffix> m: say *.^name ~ "foo"

[14:23] <camelia> rakudo-moar da646aa2e: OUTPUT: «{ ... }␤»

[14:24] <Zoffix> m: say (*.^name) ~ "foo"

[14:24] <camelia> rakudo-moar da646aa2e: OUTPUT: «{ ... }␤»

[14:24] <mcmillhj> jast: oh ok, I misunderstood what you said originally 

[14:24] <Zoffix> m: say ((*.^name))_ ~ "foo"

[14:24] <camelia> rakudo-moar da646aa2e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say ((*.^name))7⏏5_ ~ "foo"␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement…»

[14:24] <Zoffix> m: say ((*.^name)) ~ "foo"

[14:24] <camelia> rakudo-moar da646aa2e: OUTPUT: «WhateverCode object coerced to string (please use .gist or .perl to do that)␤foo␤  in block <unit> at <tmp> line 1␤»

[14:24] <Zoffix> or two set of parens, I guess

[14:26] <Zoffix> Ah, right, you can still do argless sort on a list of pairs. jast++

[14:27] *** molaf joined
[14:48] *** molaf left
[14:52] *** Zoffix left
[14:55] *** abraxxa left
[14:58] *** tt joined
[15:04] *** athenot_ left
[15:05] *** athenot joined
[15:10] *** jmerelo joined
[15:17] <jmerelo> p6: my $bound := 3; $bound = 'þorn'; say $bound

[15:17] <camelia> rakudo-moar da646aa2e: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[15:36] <ingy> what's the best place to start to find out how to release a p6 module?

[15:37] <moritz> ingy: https://docs.perl6.org/language/modules#Distributing_Modules

[15:37] <ingy> moritz: thx

[15:38] <ingy> are people really using cpan/pause?

[15:38] <moritz> there are also App::Mi6 and Ddt that automate some of these steps

[15:39] <moritz> sure, why not?

[15:39] <ingy> where does zef install from?

[15:40] <moritz> cpan and github

[15:41] <ingy> I just meant uploading to pause seems like a pain if you can just push to github

[15:41] <ingy> and was wondering what most people do

[15:41] <moritz> but you don't get releases by pushing to github, and github isn't really meant to be a CDN

[15:41] <moritz> so yes, people do upload to cpan

[15:41] <moritz> though often through command line tools

[15:42] *** kaare_ left
[15:43] *** grondilu left
[15:44] <ingy> you can't do a release by pushing a tag?

[15:44] <pmurias> masak: truffle wants you to specify a mime time for the language you are implementing

[15:45] *** khw joined
[15:46] *** robertle left
[15:47] *** windyhouses left
[15:48] *** windyhouse joined
[15:52] *** Zoffix joined
[15:54] <Zoffix> ingy: some people (like me) release to github only (gitlab is also supported). Technically, yeah, it's fairly trivial to make releases on github. tony-o has a tool that extracts commits with version bumps automatically and makes a map of versions to commits and I could've sworn zef was already using that map, but when I tested recently it weren't. 

[15:54] <jmerelo> ingy: yep, I'm using it for all new modules. You can do whatever, it's no big deal.

[15:56] <ingy> jmerelo: what is it?

[15:56] <jmerelo> ingy: what you get if you upload to CPAN is the METACPAN thing; other than that, well, you know CPAN already.

[15:56] <Zoffix> .ask tony-o recall you had a tool that extracted versions from repos, based on commits to META file? Where is it? Were zef using it in the past (I thought it were)? If not, how come not? Using it would let github dists be versioned, no?

[15:56] <yoleaux> Zoffix: I'll pass your message to tony-o.

[15:56] <jmerelo> ingy: I'm using CPAN. Sorry, answering your first question above.

[15:56] <Zoffix> You don't get the metacpan support from uploading Perl 6 modules to CPAN.

[15:57] <jmerelo> Zoffix: oh? OK, so you don't even get that, so it's just a place for storage of versions that is chared with CPAN.

[15:57] <ingy> for now I'll push to github

[15:58] <Zoffix> jmerelo: well, they're also shown on modules.perl6.org, just like github dists. But they're ignored by metacpan.org and the rest of Perl 5's tooling.

[15:58] <ingy> I use my Acmeist repo layout, same layout for all programming languages, so I'll have to make my own tooling to get it into the p6 style

[15:59] <ingy> speaking of, can intended "releases" to cpan be on a non-master branch?

[16:00] <ingy> ie I want to generate a perl6 branch from master

[16:00] <Zoffix> ingy: you mean releases to the ecosystem? I fairly certain modules.perl6.org doesn't support that but zef might

[16:01] <Zoffix> p6c is the name of our github/gitlab-based ecosystem

[16:01] <ingy> I might have to just generate to a foo-perl6 repo then

[16:01] <ingy> also how can I get https://github.com/perl6-community-modules/testml-pm6 back to ingydotnet? :)

[16:01] * pmurias hates that we still use github for displaying module docs and info, but has too much stuff to work on to volunteer to fix that :(

[16:02] <Zoffix> pmurias: we don't, for CPAN-hosted dists.

[16:03] <Zoffix> ingy: what's your github username?

[16:04] <Zoffix> ingydotnet

[16:04] <ingy> oui

[16:04] <Zoffix> ingy: "ingydotnet/testml-pm6 already exists and You can only transfer a repository from an organization to yourself at this time "

[16:05] <Zoffix> ingy: could just update your fork and swap this META file address in the p6c list: https://github.com/perl6/ecosystem/blob/master/META.list#L105

[16:05] <Zoffix> And then we nuke the perl6-community-modules version

[16:05] <ingy> sec

[16:06] <Zoffix> well, I guess the META file will need to be swapped regardless

[16:06] <Zoffix> pmurias: though highligher for P6 code is crap. Is basically slightly mutilated Perl 5 highligher.

[16:08] <El_Che> ingy: it seems easy to deploy in github based on a tag

[16:09] <Zoffix> El_Che: how do you lock a dep to a tag in your own meta file so zef only installs that particular version?

[16:09] <Zoffix> (that dep being the tagged module in p6c ecosystem)

[16:09] <El_Che> I would put a one line on after_deploy that changes what's needed on the meta file

[16:09] <El_Che> liner

[16:10] <Zoffix> El_Che: what's after_deploy?

[16:10] <El_Che> Zoffix: I am still often puzzled by zef, so I have to look at the detaild

[16:10] <Zoffix> a git hook?

[16:10] <El_Che> a travis stage

[16:11] <El_Che> Zoffix: https://github.com/nxadm/rakudo-pkg/blob/master/.travis.yml#L50

[16:11] <El_Che> See how my deploy only run when an specific tag is submitted:  18-66-DA-44-1B-32

[16:11] <El_Che> oops

[16:11] <El_Che> line 49

[16:12] <El_Che> and after_deploy only run when deploy as run

[16:12] <Zoffix> Don't really follow. If I'm making module Foo that depends on a specific version of module Bar that's in the p6c ecosystem, how do I specify in my meta file that zef needs to install that particular version of Bar and not whatever is on master, which I think is what it currently installs.

[16:13] <El_Che> I am not trying to solve that problem

[16:13] <pmurias> Zoffix: got an example of one with good docs?

[16:14] <El_Che> Zoffix: although I listened carefully to a talk about upcoming go's approach and tried to see if it would match perl6

[16:14] <Zoffix> pmurias: maybe this: http://modules.perl6.org/dist/Inline::Perl5:cpan:NINE

[16:14] <Zoffix> pmurias: though ATM we only support markdowned README for docs

[16:14] *** wamba left
[16:15] <Zoffix> pmurias: there's also modules.zef.pm that I think does something with the display-docs-on-the-site-not-on-github

[16:15] <Zoffix> "Most contrib authors.... Zoffix Znet: 10"

[16:15] <El_Che> Zoffix in your example, I would the version field would be rewritten with (part of) the tag, that's all

[16:15] <Zoffix> eco: author:zoffix

[16:15] <buggable> Zoffix, Found 48 results: Acme::Anguish, Acme::Anguish, IRC::Client, WWW, CoreHackers::Sourcery. See https://modules.perl6.org/s/author%3Azoffix

[16:16] <Zoffix> Looks like modules.zef.pm is severely outdated.

[16:16] <El_Che> Zoffix: how the ecosystem keeps version history is a mystery to me

[16:16] <El_Che> (if it does)

[16:16] <Zoffix> El_Che: I thought it did, but apparently it doesn't. That's what my .tell to tony-o was about.

[16:16] <Zoffix> Well, the github one. The CPAN one does.

[16:17] * Zoffix wants owner perms on ingydotnet

[16:18] <Zoffix> I mean on perl6-community-modules

[16:18] <Zoffix> Can't add other humans to the group.

[16:18] <El_Che> Zoffix: I was talking about this talk: https://www.youtube.com/watch?v=F8nrpe0XWRg

[16:18] <El_Che> it seems go is moving from where we are today (gimme master) to something more sane

[16:19] <Zoffix> ingy: I gotta go, but you can just ping any other people https://github.com/orgs/perl6-community-modules/people and they'll transfer your repo back to you. Or just update your fork and ask someone to nuke the community version (the META file URL in the p6c ecosystem will need to be updated either way).

[16:19] * Zoffix &

[16:19] <Zoffix> El_Che: you should share it with our ecosystem tooling people, maybe it has good ideas. There's #perl6-toolchain channel

[16:19] * Zoffix &

[16:19] *** Zoffix left
[16:25] *** comborico1611 joined
[16:30] *** scimon left
[16:31] *** raynold left
[16:32] *** comborico1611 left
[16:32] *** dakkar left
[16:33] *** comborico1611 joined
[16:47] <Geth> ¦ doc/master: 8 commits pushed by (JJ Merelo)++

[16:47] <Geth> ¦ doc/master: d103939e00 | Adds «opcode» refs #728

[16:47] <Geth> ¦ doc/master: 8b1c8d0856 | Adds «parse tree» refs #728

[16:47] <Geth> ¦ doc/master: d01b10039b | Adds «property» refs #728

[16:47] <Geth> ¦ doc/master: 91a8b2ba62 | Adds «syntax analysis» refs #728

[16:47] <Geth> ¦ doc/master: 660729969a | Adds «type object» refs #728

[16:47] <Geth> ¦ doc/master: d019d85fbd | Adds «value» refs #728

[16:47] <Geth> ¦ doc/master: 3d9ed96b6c | Adds «whitespace» refs #728

[16:47] <Geth> ¦ doc/master: ca10b4d764 | Adds some information on the metamodel :ok_hand:

[16:47] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/520e3130ddb4...ca10b4d764fb

[16:50] *** mcmillhj left
[16:51] *** itaipu joined
[16:52] *** pierrot left
[16:52] *** pierrot joined
[16:52] <Geth> ¦ ecosystem: 54ee850f42 | (Ingy döt Net)++ | META.list

[16:52] <Geth> ¦ ecosystem: TestML maintained by ingydotnet again

[16:52] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/54ee850f42

[16:52] <AlexDaniel> .seen kalkin

[16:52] <yoleaux> I saw kalkin 30 Dec 2016 02:11Z in #perl6: <kalkin> i think it would be nice if some QA standarts would be defined for modules.perl6.org, i.e: version your dependencies, tag your versions

[16:52] <AlexDaniel> oh wow that's a long time

[16:58] <Geth> ¦ doc: eb833443de | (JJ Merelo)++ | doc/Language/regexes.pod6

[16:58] <synopsebot> Link: https://doc.perl6.org/language/regexes

[16:58] <Geth> ¦ doc: Indexed as «unicode character properties» closes 2019

[16:58] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/eb833443de

[16:58] <Geth> ¦ doc: 3b70e35ef5 | (JJ Merelo)++ | doc/Language/regexes.pod6

[16:58] <Geth> ¦ doc: Indexed as «unicode character properties»

[16:58] <Geth> ¦ doc: 

[16:58] <Geth> ¦ doc: Closes #2019

[16:58] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/3b70e35ef5

[17:00] <Geth> ¦ doc: gfldex++ created pull request #2020: hint and and link to set operators from Range

[17:00] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2020

[17:02] *** mcmillhj joined
[17:03] *** pilne joined
[17:16] *** sno left
[17:24] *** wamba joined
[17:39] <Geth> ¦ doc: 684d1a0fd6 | (Wenzel P. P. Peppmeyer)++ (committed using GitHub Web editor) | doc/Type/Range.pod6

[17:39] <synopsebot> Link: https://doc.perl6.org/type/Range

[17:39] <Geth> ¦ doc: hint and and like to set operators from Range

[17:39] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/684d1a0fd6

[17:39] <Geth> ¦ doc: 1da31b13a0 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Type/Range.pod6

[17:39] <Geth> ¦ doc: Merge pull request #2020 from gfldex/patch-13

[17:39] <Geth> ¦ doc: 

[17:39] <Geth> ¦ doc: hint and and link to set operators from Range

[17:39] <Geth> ¦ doc: Please make clarifications requested if possible later on.

[17:39] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1da31b13a0

[17:42] *** AlexDaniel left
[17:42] *** lucasb left
[17:43] <gfldex> jmerelo: please revert that commit. I do not wish to contribute the the docs anymore.

[17:43] <jmerelo> gfldex: I'm really sorry about that. Can you tell me why?

[17:44] <TimToady> m: say 3..5 ~~ 0..12

[17:44] <camelia> rakudo-moar e0ad668e2: OUTPUT: «True␤»

[17:44] <jmerelo> gfldex: I didn't mean any offense with my comment and I apologize if it was perceived in that way.

[17:44] <TimToady> no need for set operations if you just want to test range inclusion

[17:44] <TimToady> m: say 3..5 ~~ 4..12

[17:44] <camelia> rakudo-moar e0ad668e2: OUTPUT: «False␤»

[17:46] <gfldex> jmerelo: It's really bad style to merge a PR that the author has retracted. So please revert that commit.

[17:47] <ingy> Zoffix: this seems to be how you can make a Perl6 module release with a github push: https://github.com/ingydotnet/testml-pm6/blob/master/META6.json#L27

[17:47] <ingy> thanks to AlexDaniel++ for helping me figure it out

[17:48] <jmerelo> gfldex: Once again, apologies if it's my fault that you have done so. I don't mind reverting the commit, or changing it according to TimToady's comments above; but I would like to know what has been the problem.

[17:48] <ingy> ie: any push to master is not a release. only updates to source-url with an accompanying tag

[17:51] <TimToady> .oO(Communication is hard...Let's go do math...)

[17:51] *** ExtraCrispy left
[17:51] <jmerelo> p6: say 3 ~~ [1..12]; say [2..3] ~~ [1..12]; say (5,6,7) ~~ [1..12];

[17:51] <camelia> rakudo-moar e0ad668e2: OUTPUT: «False␤False␤False␤»

[17:52] <jmerelo> p6: say 3 ~~ 1..12; say 2..3 ~~ 1..12; say (5,6,7) ~~ 1..12;

[17:52] <camelia> rakudo-moar e0ad668e2: OUTPUT: «True␤True␤False␤»

[17:52] * ingy waves to TimToady o/

[17:53] <TimToady> jmerelo: last one needs .all, since smartmatching will never assume juncitional logic for you

[17:53] <TimToady> ranges are special though

[17:53] <jmerelo> p6: say (5,6,7).all ~~ 1..12;

[17:53] <camelia> rakudo-moar e0ad668e2: OUTPUT: «all(True, True, True)␤»

[17:53] <jmerelo> TimToady: right. Thanks!

[17:55] <Geth> ¦ doc: 2dac622578 | (JJ Merelo)++ | doc/Type/Range.pod6

[17:55] <synopsebot> Link: https://doc.perl6.org/type/Range

[17:55] <Geth> ¦ doc: Reverting PR

[17:55] <Geth> ¦ doc: 

[17:55] <Geth> ¦ doc: According to [@gfldex

[17:55] <Geth> ¦ doc: wishes](https://irclog.perlgeek.de/perl6/2018-05-09#i_16148066) and

[17:55] <Geth> ¦ doc: following @timtoady advice (further down the IRC log)

[17:55] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/2dac622578

[17:55] *** [particle]1 joined
[17:57] *** [particle]2 joined
[17:57] *** [particle]1 left
[17:57] *** [particle] left
[17:57] *** Zoffix joined
[17:58] <Zoffix> ingy: the only problem is modules.perl6.org would still direct to master. So if you alter the docs from what they were in the release they'll no longer be current.

[17:58] <Zoffix> hmm

[17:59] *** athenot left
[17:59] *** [particle]2 is now known as [particle]

[18:00] <ingy> Zoffix: modules.perl6.org should link to support/source field if present

[18:00] <Zoffix> gfldex: it's also "bad style" to retract your PR for no good reason after a volunteer spent their free time reviewing, thinking about, and commenting on the work you submitted. If you don't like your PR reviews, you always have the option of just taking the commit bit and committing directly.

[18:01] <Zoffix> ingy: yeah

[18:01] <ingy> https://github.com/ingydotnet/testml-pm6/blob/master/META6.json#L25

[18:01] *** athenot joined
[18:01] <ingy> how often does that update?

[18:01] <ingy> the modules.perl6.org stuff

[18:02] <ingy> http://modules.perl6.org/search/?q=TestML

[18:02] <ingy> the cat link still points to https://github.com/perl6-community-modules/testml-pm6

[18:02] <Zoffix> on 20th and 40th minute of the hour cronjob runs and I think takes ~1hr

[18:02] <ingy> :D

[18:02] <ingy> funny

[18:02] * ingy waits

[18:03] <Zoffix> ingy: did you update the URL in the p6c ecosystem list tho?

[18:04] * ingy wonders if it will just work. ie use support/source

[18:04] <ingy> yes

[18:04] <Zoffix> ok

[18:04] <ingy> https://github.com/perl6/ecosystem/commit/54ee850f4261b16e37a107f7543740c847d5732f

[18:05] <ingy> and as you can see, I can use a different branch for that too

[18:06] <ingy> so later on I'll have the canonical sources in https://github.com/ingydotnet/testml-pm6/tree/master/ but the generated perl6 release in https://github.com/ingydotnet/testml-pm6/tree/perl6/ and tagged as perl6-v0.4.6

[18:06] <ingy> Acmeism,FTW!

[18:06] <ingy> ;)

[18:07] <Geth> ¦ modules.perl6.org: d4afb47ab1 | (Zoffix Znet)++ (committed using GitHub Web editor) | lib/ModulesPerl6/DbBuilder/Dist/Source/GitHub.pm

[18:07] <Geth> ¦ modules.perl6.org: [REBUILD] (GitHub) Use support>source URL as repo URL if present

[18:07] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/d4afb47ab1

[18:08] *** bs338 is now known as integral

[18:08] *** [particle] left
[18:08] <Zoffix> oh, it's already being set here https://github.com/perl6/modules.perl6.org/blob/master/lib/ModulesPerl6/DbBuilder/Dist/Source.pm#L78-L81

[18:08] <Zoffix> just in wrong order

[18:09] <jmerelo> htmlify.p6 is failing now in Travis, which uses the binary from whateverable, with this error https://github.com/perl6/doc/issues/1951#issuecomment-387808534

[18:09] *** espadrine joined
[18:09] <ingy> Zoffix: yeah

[18:09] <jmerelo> .tell AlexDaniel there seems to be a problem with the latest binary downloaded from Whateverable https://github.com/perl6/doc/issues/1951#issuecomment-387808534

[18:09] <yoleaux> jmerelo: I'll pass your message to AlexDaniel.

[18:10] <TimToady> p6: say 11..13 ~~ 1..12;

[18:10] <camelia> rakudo-moar e0ad668e2: OUTPUT: «False␤»

[18:10] <Geth> ¦ modules.perl6.org: 9ea8bd7529 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/Source/GitHub.pm

[18:10] <Geth> ¦ modules.perl6.org: Revert "[REBUILD] (GitHub) Use support>source URL as repo URL if present"

[18:10] <Geth> ¦ modules.perl6.org: 

[18:10] <Geth> ¦ modules.perl6.org: This reverts commit d4afb47ab17203292c9e74d51b4d04008f931a54.

[18:10] <Geth> ¦ modules.perl6.org: 

[18:10] <Geth> ¦ modules.perl6.org: Better fix is available to change the Dist::Source class

[18:10] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/9ea8bd7529

[18:10] <TimToady> p6: say (5,6,7..9).all ~~ 1..12;

[18:10] <camelia> rakudo-moar e0ad668e2: OUTPUT: «all(True, True, True)␤»

[18:11] <TimToady> p6: say (5,6,11..13).all ~~ 1..12;

[18:11] <camelia> rakudo-moar e0ad668e2: OUTPUT: «all(True, True, True)␤»

[18:11] <TimToady> something wrong there...

[18:12] <jmerelo> There's never enough Truth

[18:12] <Geth> ¦ modules.perl6.org: f7fdf0b9cf | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/Source.pm

[18:12] <Geth> ¦ modules.perl6.org: [REBUILD] Prefer META-provided source URL for dists

[18:12] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/f7fdf0b9cf

[18:13] <Zoffix> s: 1..12, 'ACCEPTS', \(11.13)

[18:13] *** [particle] joined
[18:13] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/e0ad668e2/src/core/Range.pm6#L429

[18:13] <Zoffix> s: 1..12, 'ACCEPTS', \(11..13)

[18:13] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/e0ad668e2/src/core/Range.pm6#L438

[18:13] <Zoffix> s: 1..12, 'ACCEPTS', \((5,6,11..13).all)

[18:13] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/e0ad668e2/src/core/Range.pm6#L425

[18:13] <gfldex> TimToady: that's what set me on a wrong track :) (also Set operators look smart)

[18:14] <TimToady> problem with set operators is that they have to construct the set, which can be slow

[18:14] *** raynold joined
[18:15] <Zoffix> m: say (11..13) cmp 12

[18:15] <camelia> rakudo-moar e0ad668e2: OUTPUT: «Less␤»

[18:16] <Zoffix> That just treats Range as a number-of-elements don't it?

[18:16] <TimToady> yup

[18:16] <Zoffix> s: &infix:<cmp>, \((11..13), 12)

[18:16] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/e0ad668e2/src/core/Range.pm6#L774

[18:16] <TimToady> maybe

[18:16] <TimToady> m: say (13..14) cmp 12

[18:16] <camelia> rakudo-moar e0ad668e2: OUTPUT: «More␤»

[18:16] <Zoffix> Ah, as (11..13) cmp (12..12)

[18:17] <TimToady> no, it's treating 12 as a list

[18:17] <Zoffix> Which is then compared as a.min cmp b.min || a.excludes-min cmp b.excludes-min || a.max cmp b.max || b.excludes-max cmp a.excludes-max

[18:17] *** [particle] left
[18:18] <TimToady> so the real bug is .ACCEPTS not distributing correctly inside the junction, maybe, since cmp is probably too late

[18:19] <TimToady> some subtle Mu vs Any thing, perhaps

[18:19] <Zoffix> I'm not following the `(topic cmp $!min) > -(!$!excludes-min)` check tho.

[18:20] <Zoffix> like, why is the result of `cmp` is being compared to whether or not we exclude the endpoint

[18:21] <TimToady> presumably it's trying to calculate the difference between 2 ~~ 2..3 vs 2 ~~ 2^..3 or so

[18:22] *** sauvin left
[18:24] <Zoffix> m: say (((11..13) cmp (1..1)) > -1 and ((11..13) cmp (12..12)) < 1)

[18:24] <camelia> rakudo-moar e0ad668e2: OUTPUT: «True␤»

[18:24] *** athenot_ joined
[18:24] <Zoffix> So it's a bogus comparison. This ACCEPTS candidate assumes Range would never go through it, as topic

[18:25] <TimToady> bisect: say (5, 6, 11..13).all ~~ 1..12;

[18:25] <bisectable6> TimToady, On both starting points (old=2015.12 new=e0ad668) the exit code is 0 and the output is identical as well

[18:25] <bisectable6> TimToady, Output on both points: «all(True, True, True)␤»

[18:25] *** athenot left
[18:25] <TimToady> looks like it's a longstanding issue

[18:26] * Zoffix tries just changing Mu to Any as topic and see if it'll thread right

[18:26] <TimToady> is something prematurely optimizing out the Range ~~ Range candidate?

[18:26] <Zoffix> There is a special Range ~~ Range candidate, yeah: https://github.com/rakudo/rakudo/blob/e0ad668e2/src/core/Range.pm6#L438

[18:27] <Zoffix> But the Junction variant goes through the Mu ~~ Range candidate: https://github.com/rakudo/rakudo/blob/e0ad668e2/src/core/Range.pm6#L425

[18:27] *** [particle] joined
[18:27] <Zoffix> um, is .ACCEPT meant to collapse Junctions?

[18:29] <Zoffix> I guess it'd still need to take a Mu anyway.

[18:30] <TimToady> well, Junctions are special as the invocant to ACCEPTS, but args should work normally, or we couldn't write (1,2,3).all ~~ whatever

[18:31] <Geth> ¦ doc: f149663276 | (JJ Merelo)++ | doc/Type/Range.pod6

[18:31] <synopsebot> Link: https://doc.perl6.org/type/Range

[18:31] <Geth> ¦ doc: Eliminates last example, which does not really work that way

[18:31] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f149663276

[18:32] <Zoffix> m: say "4" cmp 4

[18:32] <camelia> rakudo-moar e0ad668e2: OUTPUT: «Same␤»

[18:32] <Zoffix> m: say "4" ~~ 1..11

[18:32] <camelia> rakudo-moar e0ad668e2: OUTPUT: «False␤»

[18:32] <Zoffix> m: say 4 ~~ 1..11

[18:32] <camelia> rakudo-moar e0ad668e2: OUTPUT: «True␤»

[18:33] * Zoffix files an issue instead

[18:34] <TimToady> thanks

[18:34] *** domidumont left
[18:36] <ingy> Zoffix: https://modules.perl6.org/search/?q=TestML is updated now but not pointing to the right place, as you guessed

[18:36] <ingy> can we change that order?

[18:38] <Geth> ¦ modules.perl6.org: lucasbuchala++ created pull request #105: Add --delete option to rsync for CPAN dists

[18:38] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/pull/105

[18:38] <Zoffix> ingy: I already did, but it'll be picked up only on the next build

[18:38] <ingy> :)

[18:38] <Zoffix> (I didn't test it, but I assume it'll change the source to right path)

[18:39] <ingy> the site will be our test

[18:40] *** kaare_ joined
[18:41] *** athenot_ left
[18:41] <Zoffix> Filed as R#1809

[18:41] <synopsebot> R#1809 [open]: https://github.com/rakudo/rakudo/issues/1809 Range.ACCEPTS gets some things wrong

[18:42] *** athenot joined
[18:42] <Geth> ¦ modules.perl6.org: 8874d805f9 | (Lucas Buchala)++ (committed using GitHub Web editor) | lib/ModulesPerl6/DbBuilder.pm

[18:42] <Geth> ¦ modules.perl6.org: Add --delete option to rsync for CPAN dists

[18:42] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/8874d805f9

[18:42] <Geth> ¦ modules.perl6.org: f80f0eed62 | (Zoffix Znet)++ (committed using GitHub Web editor) | lib/ModulesPerl6/DbBuilder.pm

[18:42] <Geth> ¦ modules.perl6.org: Merge pull request #105 from lucasbuchala/patch-1

[18:42] <Geth> ¦ modules.perl6.org: 

[18:42] <Geth> ¦ modules.perl6.org: Add --delete option to rsync for CPAN dists

[18:42] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/f80f0eed62

[18:42] <Geth> ¦ modules.perl6.org: 3012c11974 | (Zoffix Znet)++ (committed using GitHub Web editor) | use-me-for-commit-triggers

[18:42] <Geth> ¦ modules.perl6.org: [REBUILD] it

[18:42] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/3012c11974

[18:44] <Zoffix> ingy: you have the commit bit to modules.perl6.org repo BTW. So feel free to make all the changes :)

[18:44] <Zoffix> The "[REBUILD]" in the commit title just tells to discard some cached info and rebuild all modules. There are a couple more of such triggers: https://github.com/perl6/modules.perl6.org/blob/master/use-me-for-commit-triggers#L7-L12

[18:44] * Zoffix &

[18:44] *** Zoffix left
[18:45] *** [particle] left
[18:47] <jmerelo> Can someone please check https://travis-ci.org/perl6/doc/jobs/376963640?

[18:48] <jmerelo> This is an error in htmlify.p6 with the latest version of the binary in whateverable.

[18:56] *** [particle] joined
[18:59] *** wamba left
[19:06] *** darutoko left
[19:07] *** wamba joined
[19:17] *** athenot left
[19:18] *** athenot joined
[19:20] *** robertle joined
[19:21] *** zachk joined
[19:46] *** sno joined
[19:53] *** itaipu left
[19:54] *** itaipu joined
[19:59] *** HaraldJoerg joined
[20:01] *** oplevunus joined
[20:02] *** jmerelo left
[20:21] *** itaipu left
[20:28] <robertle> if I have a reference to a sub with a constrained return type my $a = sub foo(--> Int) { Nil }, is there a way to programmatically determine the return type?

[20:29] *** zachk left
[20:29] *** zachk joined
[20:30] <masak> m: my $a = sub foo(--> Int) {}; say $a.signature.returns ~~ Int

[20:30] <camelia> rakudo-moar e0ad668e2: OUTPUT: «True␤»

[20:30] <masak> robertle: ^

[20:32] <robertle> awesome, thanks! somehow I went down the $a.^signature and so on...

[20:33] <masak> ah; no, the ^ would give you the signature of $a's type object, not $a ;)

[20:33] *** itaipu joined
[20:45] *** mikejw joined
[20:45] <mikejw> hey guys

[20:45] <timotimo> greetings

[20:45] <mikejw> just wondering if it should be possible to call MoarVM panic: Internal error: invalid thread ID 1946157056 in GC work pass

[20:46] <masak> could you rephrase the question please

[20:46] <mikejw> oops.. sorry

[20:46] <timotimo> it is possible, that output usually follows memory corruption

[20:46] <mikejw> I mean call Proc::Async after calling fork (with NativeCall)

[20:47] <timotimo> oh

[20:47] <timotimo> calling fork with nativecall is usually fatal

[20:47] <timotimo> only the parent process survives

[20:47] <mikejw> hmmm

[20:48] <timotimo> the child will misbehave. either hang or outright crash

[20:48] * lizmat considers NativeCall issuing a warning when trying to call fork()

[20:50] <mikejw> I guess this post must be a bit out of date? http://blogs.perl.org/users/zoffix_znet/2016/05/perl-6-nativecall-look-ma-im-a-c-programmer-1.html

[20:52] <lizmat> yeah, it is with respect to fork()

[20:53] <timotimo> well, technically it doesn't say that you can or should use fork, just that it's "there" (in scare-quotes

[20:53] <timotimo> )b

[20:53] <timotimo> but yeah it should be pointed out that that's a bad idea

[20:53] <lizmat> the article is from before we had spesh running in a background thread

[20:53] <timotimo> even then if you were doing anything with multithreading, like Proc::Async, you'd not be able to use the child process for anything

[20:54] <lizmat> so, if you did not start any async work, you would still be running in a single thread, and fork() would just work

[20:54] <lizmat> since then, Rakudo is *always* multithreaded

[20:54] <lizmat> to make fork() work in such an environment, would require quite a lot of work if it would be possible at all

[20:55] <timotimo> it might at one point be possible to do, with a bunch of changes to moarvm, but even then if the user has nativecalled into something that uses threads by itself internally, that'll also cause misbehaviour in those libraries

[20:56] <mikejw> cool, well sounds like I need to learn about spesh :)

[20:57] *** kaare_ left
[20:58] <timotimo> it's not terribly important for users

[20:58] <mikejw> oh ok

[20:58] <timotimo> it's definitely interesting

[20:58] <timotimo> knowing about it can help you make your code faster

[20:59] <timotimo> 6guts.wordpress.com has many articles that go into details

[21:00] <gfldex> mikejw: here you can learn about spesh https://6guts.wordpress.com/2017/11/05/moarvm-specializer-improvements-part-3-optimizing-code/

[21:04] *** lucasb joined
[21:04] *** AlexDaniel joined
[21:05] <AlexDaniel> .

[21:05] <yoleaux> 18:09Z <jmerelo> AlexDaniel: there seems to be a problem with the latest binary downloaded from Whateverable https://github.com/perl6/doc/issues/1951#issuecomment-387808534

[21:05] <mikejw> timotimo: thanks

[21:07] <AlexDaniel> .tell jmerelo well, that issue in particular is not a problem with Whateverable or how it builds rakudo, but it's rakudo itself that is/was broken on HEAD

[21:07] <yoleaux> AlexDaniel: I'll pass your message to jmerelo.

[21:07] <AlexDaniel> .tell jmerelo so generally if you see something like that you should feel free to file a rakudo bug

[21:07] <yoleaux> AlexDaniel: I'll pass your message to jmerelo.

[21:08] *** mcmillhj left
[21:13] *** mcmillhj joined
[21:15] <lucasb> After adding the --delete option to rsync, cpan dists dropped from 244 to 235. Hopefully all were meant to be excluded anyway.

[21:15] <lucasb> Just saying it here, FYI, in case someone notices any problem

[21:16] *** comborico1611 left
[21:17] *** mcmillhj left
[21:18] *** skids left
[21:18] *** comborico1611 joined
[21:22] *** lucasb left
[21:23] *** comborico1611 left
[21:24] *** dataangel left
[21:30] *** ryn1x joined
[21:30] *** mikejw left
[21:37] *** comborico1611 joined
[21:42] <buggable> New CPAN upload: P5reset-0.0.2.tar.gz by ELIZABETH http://modules.perl6.org/dist/P5reset:cpan:ELIZABETH

[21:42] *** wamba left
[21:46] *** mcmillhj joined
[21:51] *** mcmillhj left
[21:52] <buggable> New CPAN upload: P5built-ins-0.0.20.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5built-ins-0.0.20.tar.gz

[21:53] *** HaraldJoerg left
[21:54] *** robertle left
[21:59] *** mcmillhj joined
[22:04] *** mcmillhj left
[22:17] *** mcmillhj joined
[22:19] *** pmurias left
[22:21] *** mcmillhj left
[22:22] *** lancew joined
[22:22] *** espadrine left
[22:33] *** athenot_ joined
[22:34] *** athenot left
[22:35] *** andrzejku_ left
[22:36] *** andrzejku joined
[22:38] <Herby_> o/

[22:41] <comborico1611> \o

[22:44] *** itaipu left
[22:46] *** Kaiepi left
[22:47] *** Kaiepi joined
[22:49] *** skids joined
[22:54] *** epony left
[22:55] *** epony joined
[22:59] *** FROGGS left
[23:02] *** mcmillhj joined
[23:03] <Geth> ¦ doc/car-grant-midrat: 5bc6ac8c67 | (Zoffix Znet)++ | doc/Language/numerics.pod6

[23:03] <Geth> ¦ doc/car-grant-midrat: [CaR Grant] Document division by zero and zero-denominator rationals

[23:03] <Geth> ¦ doc/car-grant-midrat: review: https://github.com/perl6/doc/commit/5bc6ac8c67

[23:05] <Geth> ¦ doc/car-grant-midrat: 2ef9268858 | (Zoffix Znet)++ | doc/Language/numerics.pod6

[23:05] <Geth> ¦ doc/car-grant-midrat: Fix double negative

[23:05] <Geth> ¦ doc/car-grant-midrat: review: https://github.com/perl6/doc/commit/2ef9268858

[23:05] *** rindolf left
[23:07] *** mcmillhj left
[23:07] *** lancew left
[23:08] *** Herby_ left
[23:17] *** mcmillhj joined
[23:22] *** mcmillhj left
[23:25] *** mcmillhj joined
[23:56] *** mcmillhj_ joined
