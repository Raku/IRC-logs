[00:01] <SmokeMachine> jnthn: thanks!

[00:10] <timotimo> now we just need to introduce meta-meta-methods

[00:12] <jnthn> Already have them :P

[00:12] <jnthn> Though we don't have a .^^foo syntax :P

[00:13] <timotimo> yeah, that's what's missing

[00:17] *** dogbert17 left
[00:17] *** scovit left
[00:19] *** lucasb left
[00:20] *** yqt joined
[00:21] *** p6bannerbot sets mode: +v yqt

[00:22] *** w_richard_w joined
[00:23] *** p6bannerbot sets mode: +v w_richard_w

[00:25] *** Some-body_ joined
[00:25] *** p6bannerbot sets mode: +v Some-body_

[00:27] *** DarthGandalf left
[00:27] *** Some-body_ is now known as DarthGandalf

[00:28] *** i1nfusion left
[00:29] *** i1nfusion joined
[00:30] *** p6bannerbot sets mode: +v i1nfusion

[00:30] *** i1nfusion left
[00:31] *** i1nfusion joined
[00:32] *** p6bannerbot sets mode: +v i1nfusion

[00:32] *** yqt left
[00:34] <SmokeMachine> I think that works well to use meta methods to interact with the database...

[00:50] *** Cabanossi left
[00:51] *** Cabanossi joined
[00:52] *** p6bannerbot sets mode: +v Cabanossi

[00:53] *** perplexity joined
[00:53] *** p6bannerbot sets mode: +v perplexity

[00:57] <ryn1x> Seems like when I use perl6-debug-m with a script that has a MAIN() sub it always start off with a Exception Thrown Died... does this happen for anyone else?

[01:01] <ryn1x> Same with debigging with NativeCall subroutines... I need to hit enter 4 times to move past 3 Exception Thown Died messages... 

[01:01] *** k-man left
[01:02] <ryn1x> but the script runs fine other than that... not sure where the exceptions are coming from... they only show up in the debugger...

[01:02] *** k-man joined
[01:02] *** p6bannerbot sets mode: +v k-man

[01:07] *** daemon is now known as cc0yrp

[01:07] *** cc0yrp is now known as daemon

[01:19] *** molaf joined
[01:19] *** p6bannerbot sets mode: +v molaf

[01:32] *** ryn1x left
[01:33] *** ryn1x joined
[01:33] *** p6bannerbot sets mode: +v ryn1x

[01:41] *** w_richard_w left
[01:52] <SmokeMachine> Had someone tried Red?

[02:01] *** silug left
[02:04] <buggable> New CPAN upload: Graphics-TinyTIFF-0.0.4.tar.gz by RYNIX http://modules.perl6.org/dist/Graphics::TinyTIFF:cpan:RYNIX

[02:07] *** i1nfusion left
[02:08] *** i1nfusion joined
[02:09] *** p6bannerbot sets mode: +v i1nfusion

[02:10] *** molaf left
[02:12] *** silug joined
[02:13] *** p6bannerbot sets mode: +v silug

[02:19] *** ryn1x left
[02:23] *** molaf joined
[02:23] *** ryn1x joined
[02:24] *** p6bannerbot sets mode: +v molaf

[02:24] *** p6bannerbot sets mode: +v ryn1x

[02:24] <ryn1x> m: say ( [1..100].hyper.map({$_+1}) ==  [1..100].race.map({$_+1}) )

[02:24] <camelia> rakudo-moar d998c1eab: OUTPUT: ¬´True‚ê§¬ª

[02:25] <lookatme_q> m: say ( [1..100].hyper.map({$_+1}) eqv  [1..100].race.map({$_+1}) )

[02:25] <camelia> rakudo-moar d998c1eab: OUTPUT: ¬´False‚ê§¬ª

[02:26] <lookatme_q> m: say ( [1..100].hyper.map({$_+1}) [==]  [1..100].race.map({$_+1}) )

[02:26] <camelia> rakudo-moar d998c1eab: OUTPUT: ¬´True‚ê§¬ª

[02:26] <lookatme_q> m: say ( [1..100].hyper.map({$_+1}) >>==<<  [1..100].race.map({$_+1}) )

[02:26] <camelia> rakudo-moar d998c1eab: OUTPUT: ¬´(True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True True ‚Ä¶¬ª

[02:27] <ryn1x> Is "output order" different than the order of the elements in the array? I thought race would return out of order?

[02:28] <ryn1x> or does that mean the values of each element in the array may not be calculated in order?

[02:28] <lookatme_q> It not preserve the order

[02:28] <lookatme_q> It's

[02:29] <ryn1x> But it is preserving the order in the above examples just by luck?

[02:30] <lookatme_q> you mean the == version ?

[02:30] <lookatme_q> I think it is compare the elements number

[02:30] <lookatme_q> You should use eqv

[02:31] <ryn1x> is you example with >>==<< saying true for each element that has the same value in each list?

[02:33] <lookatme_q> yeah, that's strange

[02:34] <ryn1x> m: say [1..100].hyper.map({$_+1}).WHAT; say [1..100].race.map({$_+1}).WHAT;

[02:34] <camelia> rakudo-moar d998c1eab: OUTPUT: ¬´(HyperSeq)‚ê§(RaceSeq)‚ê§¬ª

[02:34] <ryn1x> ^ is that y eqv is false...

[02:34] <ryn1x> but the elements and their order from each seem to match...

[02:36] <ryn1x> I am wondering if race just means you can't count on the value of another element in the array because they are calculated in parallel (out of order), but that does not mean the elements of the list are returned out of order?

[02:38] <lookatme_q> no, the documents is clear about the order : https://docs.perl6.org/routine/race

[02:38] <ryn1x> m: say (1, 9, 6).hyper.map(* + 5);

[02:38] <camelia> rakudo-moar d998c1eab: OUTPUT: ¬´(6 14 11)‚ê§¬ª

[02:38] <ryn1x> m: say (1, 9, 6).race.map(* + 5);

[02:38] <camelia> rakudo-moar d998c1eab: OUTPUT: ¬´(6 14 11)‚ê§¬ª

[02:39] <ryn1x> https://6guts.wordpress.com/2017/03/16/considering-hyperrace-semantics/

[02:39] <ryn1x> ^ yeah so is that article

[02:39] <ryn1x> just weird I have not seen an out of order result yet

[02:41] <lookatme_q> Maybe because the code is so simple ?

[02:47] <lookatme_q> m: say ((^100).race.map({ say $_ + 1 }).list);

[02:47] <camelia> rakudo-moar d998c1eab: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§11‚ê§12‚ê§13‚ê§14‚ê§15‚ê§16‚ê§17‚ê§18‚ê§19‚ê§20‚ê§21‚ê§22‚ê§23‚ê§24‚ê§25‚ê§26‚ê§27‚ê§28‚ê§29‚ê§30‚ê§31‚ê§32‚ê§33‚ê§34‚ê§35‚ê§36‚ê§37‚ê§38‚ê§39‚ê§40‚ê§41‚ê§42‚ê§43‚ê§44‚ê§45‚ê§46‚ê§47‚ê§48‚ê§49‚ê§50‚ê§51‚ê§52‚ê§‚Ä¶¬ª

[02:47] *** khisanth__ left
[02:47] <lookatme_q> m: say ((^100).race.map({ for ^($_ % 4) { sleep 0.01; }; say $_ + 1 }).list);

[02:47] <camelia> rakudo-moar d998c1eab: OUTPUT: ¬´1‚ê§2‚ê§65‚ê§66‚ê§3‚ê§67‚ê§4‚ê§5‚ê§6‚ê§68‚ê§69‚ê§70‚ê§7‚ê§71‚ê§8‚ê§9‚ê§10‚ê§72‚ê§73‚ê§74‚ê§11‚ê§75‚ê§12‚ê§13‚ê§14‚ê§76‚ê§77‚ê§78‚ê§15‚ê§79‚ê§16‚ê§17‚ê§18‚ê§80‚ê§81‚ê§82‚ê§19‚ê§83‚ê§20‚ê§21‚ê§22‚ê§84‚ê§85‚ê§86‚ê§23‚ê§87‚ê§24‚ê§25‚ê§26‚ê§88‚ê§89‚ê§90‚ê§‚Ä¶¬ª

[02:47] <lookatme_q> m: say ((^100).hyper.map({ for ^($_ % 4) { sleep 0.01; }; say $_ + 1 }).list);

[02:47] <camelia> rakudo-moar d998c1eab: OUTPUT: ¬´1‚ê§2‚ê§65‚ê§66‚ê§3‚ê§67‚ê§4‚ê§5‚ê§6‚ê§68‚ê§69‚ê§70‚ê§7‚ê§71‚ê§8‚ê§9‚ê§10‚ê§72‚ê§73‚ê§74‚ê§11‚ê§75‚ê§12‚ê§13‚ê§14‚ê§76‚ê§77‚ê§78‚ê§15‚ê§79‚ê§16‚ê§17‚ê§18‚ê§80‚ê§81‚ê§82‚ê§19‚ê§83‚ê§20‚ê§21‚ê§22‚ê§84‚ê§85‚ê§86‚ê§23‚ê§87‚ê§24‚ê§25‚ê§26‚ê§88‚ê§89‚ê§90‚ê§‚Ä¶¬ª

[02:48] <lookatme_q> m: say ((^100).hyper.map({ for ^($_ % 4) { sleep 0.01; }; $_ + 1 }).list);

[02:48] <camelia> rakudo-moar d998c1eab: OUTPUT: ¬´(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 8‚Ä¶¬ª

[02:48] <lookatme_q> m: say ((^100).race.map({ for ^($_ % 4) { sleep 0.01; }; $_ + 1 }).list);

[02:48] <camelia> rakudo-moar d998c1eab: OUTPUT: ¬´(65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ‚Ä¶¬ª

[02:49] <lookatme_q> ryn1x, ^ example maybe helpful

[02:49] <ryn1x> \o/

[02:50] <ryn1x> I'm guessing the internals have changed since the examples in the docs and blog posts have been written and, like you said, simple examples just come out in order most of the time now

[02:54] <lookatme_q> yeah, that's right!

[02:54] <SmokeMachine> .tell pmurias I‚Äôm getting 404 for 6pad

[02:54] <yoleaux> SmokeMachine: I'll pass your message to pmurias.

[03:00] *** khisanth__ joined
[03:01] *** p6bannerbot sets mode: +v khisanth__

[03:03] *** ryn1x left
[03:31] *** w_richard_w joined
[03:31] *** p6bannerbot sets mode: +v w_richard_w

[03:45] *** zacts joined
[03:45] *** p6bannerbot sets mode: +v zacts

[03:54] *** ferreira left
[04:04] <timotimo> the default batch size for race and hyper are probably too big to actually make a difference here, and with something as quick as $_ + 1 it will barely get to consider a second worker necessary, since the one worker will probably have finished processing the batch before the splitter has created the second batch

[04:06] *** Cabanossi left
[04:06] *** Cabanoss- joined
[04:07] *** p6bannerbot sets mode: +v Cabanoss-

[04:17] *** perplexity left
[04:21] *** AlexDaniel left
[04:22] *** AlexDaniel joined
[04:22] *** p6bannerbot sets mode: +v AlexDaniel

[04:22] *** zacts left
[04:23] *** zacts joined
[04:23] *** p6bannerbot sets mode: +v zacts

[04:42] *** reach_satori left
[04:45] *** molaf left
[05:01] *** [particle]1 joined
[05:02] *** p6bannerbot sets mode: +v [particle]1

[05:02] *** sauvin joined
[05:02] *** p6bannerbot sets mode: +v sauvin

[05:03] *** [particle] left
[05:12] *** reach_satori joined
[05:13] *** p6bannerbot sets mode: +v reach_satori

[05:20] *** kktt joined
[05:21] *** p6bannerbot sets mode: +v kktt

[05:37] *** molaf joined
[05:37] *** p6bannerbot sets mode: +v molaf

[06:20] *** jmerelo joined
[06:21] *** p6bannerbot sets mode: +v jmerelo

[06:23] *** w_richard_w left
[06:27] *** ufobat_ joined
[06:28] *** p6bannerbot sets mode: +v ufobat_

[06:38] <AlexDaniel> El_Che: 2018.12 is out

[06:41] <jmerelo> AlexDaniel: yay!

[06:41] <jmerelo> AlexDaniel++

[06:43] <jmerelo> AlexDaniel: Maybe later on I'll make a pull request that links the commits... I'd like to know the authors is all.

[06:43] <jmerelo> AlexDaniel: for the time being, great job.

[06:44] *** Woodi joined
[06:45] *** p6bannerbot sets mode: +v Woodi

[06:45] *** zacts left
[07:04] *** sno left
[07:05] *** kurahaupo joined
[07:06] *** p6bannerbot sets mode: +v kurahaupo

[07:11] <jmerelo> .seen jnthn

[07:11] <yoleaux> I saw jnthn 00:12Z in #perl6: <jnthn> Though we don't have a .^^foo syntax :P

[07:11] *** HaraldJoerg joined
[07:11] <jmerelo> .tell jnthn how's tomorrow Advent article going?

[07:11] <yoleaux> jmerelo: I'll pass your message to jnthn.

[07:11] <jmerelo> AlexDaniel: and how's the artitle of the day after tomorrow going?

[07:11] *** p6bannerbot sets mode: +v HaraldJoerg

[07:16] *** domidumont joined
[07:17] *** p6bannerbot sets mode: +v domidumont

[07:19] <AlexDaniel`> Will work on it shortly!

[07:26] *** robertle joined
[07:26] *** p6bannerbot sets mode: +v robertle

[07:44] *** irdr left
[07:47] <jmerelo> AlexDaniel`: Great :-)

[07:47] *** jmerelo left
[07:50] *** irdr joined
[07:51] *** p6bannerbot sets mode: +v irdr

[08:00] *** scovit joined
[08:01] *** p6bannerbot sets mode: +v scovit

[08:06] *** dct left
[08:12] *** robertle left
[08:14] *** robertle joined
[08:15] *** p6bannerbot sets mode: +v robertle

[08:16] *** rindolf joined
[08:17] *** p6bannerbot sets mode: +v rindolf

[08:26] *** HarmtH joined
[08:26] *** p6bannerbot sets mode: +v HarmtH

[08:28] *** scovit left
[08:33] *** rindolf left
[08:38] *** robertle left
[08:47] *** sno joined
[08:48] *** p6bannerbot sets mode: +v sno

[08:49] *** rindolf joined
[08:50] *** p6bannerbot sets mode: +v rindolf

[08:54] *** abraxxa joined
[08:55] *** p6bannerbot sets mode: +v abraxxa

[08:58] <ufobat_> yeah i've got my perl6 on windows

[08:58] *** kktt left
[09:03] *** epony joined
[09:03] *** p6bannerbot sets mode: +v epony

[09:28] *** schmjueg joined
[09:28] *** p6bannerbot sets mode: +v schmjueg

[09:28] *** schmjueg left
[09:30] *** schmjueg joined
[09:30] *** p6bannerbot sets mode: +v schmjueg

[09:34] <schmjueg> p6: say 3;

[09:34] <camelia> rakudo-moar fb4e4f0db: OUTPUT: ¬´3‚ê§¬ª

[09:37] *** schmjueg left
[09:39] *** sno left
[10:00] *** domidumont left
[10:01] *** domidumont joined
[10:02] *** domidumont left
[10:03] *** domidumont joined
[10:04] *** regreg left
[10:04] *** p6bannerbot sets mode: +v domidumont

[10:21] <ufobat_> ah on windows perl6 doesn't work in the git-shell, perl6.bat would work. thats because the git-shell is a bash. maybe an alias is going to help me

[10:21] *** domidumont left
[10:25] *** robertle joined
[10:25] *** p6bannerbot sets mode: +v robertle

[10:44] *** chazlever2 joined
[10:45] *** p6bannerbot sets mode: +v chazlever2

[10:48] *** chazlever2 left
[10:49] *** HaraldJoerg1 joined
[10:49] *** HaraldJoerg left
[10:49] *** p6bannerbot sets mode: +v HaraldJoerg1

[10:52] <cono> do I understand this correct, that this: perl6 -e 'say (^100).race(:10batch, :4degree).map({$*THREAD.id.say; $_ ** 2}).list' | sort -u    should show me at least couple of different thread.ids and first line shouldn't be ordered?

[10:54] <masak> nit-picky but curious question: do you feel that :10batch reads better in your code than :batch(10)? or is it simply a "this is shorter, therefore better" kind of thing? ;)

[10:54] <cono> one liner

[10:55] <cono> in my code I usually prefer older style w/ =>

[10:55] <masak> understood

[10:55] <cono> but also like :$degree, this is kind kilelr feature for me

[10:55] <masak> oh, no argument there

[10:56] *** sena_kun joined
[10:56] *** p6bannerbot sets mode: +v sena_kun

[10:58] *** robertle left
[11:01] <jnthn> cono: There probably just ain't enough work in the for it to be bothered spawning a ton of threads.

[11:01] <yoleaux> 07:11Z <jmerelo> jnthn: how's tomorrow Advent article going?

[11:02] <jnthn> Also, when the work is so uniformly sized and small, disordering isn't enormously likely.

[11:05] <cono> jnthn: i've tried biiig numbers, same result )

[11:11] *** i1nfusion left
[11:13] *** i1nfusion joined
[11:14] *** p6bannerbot sets mode: +v i1nfusion

[11:17] <holyghost> ok, I'm on vacation for a few days, merry christmass all !

[11:17] *** holyghost left
[11:22] <jnthn> cono: The problem isn't the size of the range, it's that if the work in the block is so tiny, then the time taking to iterate the range, batch the values up, and send them off for processing takes as long as the processing itself, so by the time the next batch is ready, the last one is already processed by the worker.

[11:25] <cono> ah, got it. so sleep inside the block should give me something?

[11:26] *** lizmat joined
[11:26] *** p6bannerbot sets mode: +v lizmat

[11:35] <jnthn> yeah, `sleep rand` for example gives plenty of IDs :)

[11:53] *** lucasb joined
[11:53] *** p6bannerbot sets mode: +v lucasb

[11:54] <buggable> New CPAN upload: Algorithm-LDA-0.0.7.tar.gz by TITSUKI http://modules.perl6.org/dist/Algorithm::LDA:cpan:TITSUKI

[12:08] *** domidumont joined
[12:09] *** p6bannerbot sets mode: +v domidumont

[12:27] *** tobs` joined
[12:28] *** p6bannerbot sets mode: +v tobs`

[12:30] *** Sgeo left
[12:30] *** Sgeo joined
[12:31] *** p6bannerbot sets mode: +v Sgeo

[12:37] *** |oLa| joined
[12:38] <cono> jnthn: gives me same :( perl6 -e 'say (^10).race(:10batch, :4degree).map({sleep(rand); $*THREAD.id.say; $_ ** 2}).list' | sort -u

[12:38] *** p6bannerbot sets mode: +v |oLa|

[12:39] <cono> also I'm assuming that this code should run around 1 sec: perl6 -e 'say (^10).race(:10batch, :4degree).map({sleep(1); $*THREAD.id.say; $_ ** 2}).list' | sort -u

[12:39] <cono> but it takes 10 sec

[12:39] <lizmat> sleep blocks the thread

[12:39] *** molaf left
[12:44] <cono> lizmat: yeah, and if I ask 4degree, that means that another thread should start look onto next item?

[12:45] <lizmat> :4 degree means that at *most* 4 threads will be working at this at a time

[12:46] <cono> so if 1 blocked, why second one not picking the work?

[12:46] <lizmat> because there's only enough work for 1 thread with :10batch ?

[12:46] *** nelsonhb joined
[12:46] <lizmat> ^10 has 10 elements?

[12:47] *** p6bannerbot sets mode: +v nelsonhb

[12:51] <cono> omg, stupid me :)

[12:51] <cono> thanks for pointing this out

[12:52] <lizmat> cono: np, keep up the good work!

[12:58] *** |oLa| left
[13:06] *** regreg joined
[13:06] *** p6bannerbot sets mode: +v regreg

[13:22] *** salva left
[13:26] *** molaf joined
[13:27] *** p6bannerbot sets mode: +v molaf

[13:43] *** molaf left
[13:53] *** stmuk joined
[13:54] *** p6bannerbot sets mode: +v stmuk

[13:54] *** abraxxa left
[13:55] *** reach_satori left
[13:58] *** stmuk left
[14:02] *** Sgeo left
[14:02] *** Sgeo joined
[14:03] *** nelsonhb left
[14:03] *** p6bannerbot sets mode: +v Sgeo

[14:19] <SmokeMachine> Hi! have someone tried Red? It has a few tests, but Im thinking of publishing it... what do you guys think?

[14:24] *** mowcat left
[14:37] *** kensanata joined
[14:37] *** p6bannerbot sets mode: +v kensanata

[14:41] *** kurahaupo left
[14:46] <tobs`> m: class A { has @.a }; my %data = a => $[1,2,3]; dd A.new: |%data

[14:46] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´A.new(a => [[1, 2, 3],])‚ê§¬ª

[14:47] <tobs`> Can someone help me get the /flat/ contents of %data<a> into the A object?

[14:53] <masak> m: class A { has @.a }; my %data = a => $[1,2,3]; dd A.new: a => |%data<a>

[14:53] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´A.new(a => [1, 2, 3])‚ê§¬ª

[14:53] <tobs`> m: class A { has $.a }; my %data = a => $[1,2,3]; dd A.new: |%data  # would require the tiniest diff, I suppose, but the "wrong" sigil feels weird

[14:53] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´A.new(a => $[1, 2, 3])‚ê§¬ª

[14:54] <tobs`> m: class A { has @.a }; my %data = a => $[1,2,3]; dd A.new: |%data.map({ .key => |.value })

[14:54] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´Default constructor for 'A' only takes named arguments‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:55] <tobs`> masak: does this generalize somehow?

[14:55] <masak> m: class A { has @.a }; my %data = a => $[1,2,3]; dd A.new: |%data.map({ .key => slip(.value) }).hash

[14:55] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´A.new(a => [slip(1, 2, 3),])‚ê§¬ª

[14:55] <masak> hm, guess I went one too far with that one ;)

[14:56] <masak> for the record, I find this kind of dealing with all the list-like data structures in Perl 6 to be very difficult to form an "intuition" for

[14:57] <masak> usually what I have to do is fumble around in the dark for exactly the right set of incantations

[14:57] <tadzik> I only read that line and it sounds like programming

[14:57] <masak> whereas in (say) JavaScript I can usually also reason my way to the right solution, by (e.g.) cancelling [] braces agains ... spreads

[14:57] <masak> against*

[14:57] * tadzik is going through the 3rd vCard Perl module this week

[14:58] <tadzik> having read further, I agree completely

[14:58] <tobs`> I know that record

[14:58] * tobs` sings along

[14:58] <masak> I won't pretend programming in general isn't often like that :)

[14:58] <masak> but I mean this part of Perl 6 in *particular* is that

[14:58] <tadzik> indee

[14:58] <masak> I'm usually a nice person and I don't like to ruffle feathers, but I think this bit of Perl 6 data structures is basically a failed experiment

[14:58] <tadzik> I recently wrote code that just loops through a list with a for because I was tired of figuring out how to make it flaten in the context I wanted or something

[14:59] <masak> I'd rather it be dead simple and easy to reason about than super-powerful and hard to use

[15:01] * moritz agrees

[15:02] <masak> not calling for a big teardown of what's there or anything. I just reserve the right to be a Christmas Grinch over this

[15:02] *** Ven`` joined
[15:03] *** p6bannerbot sets mode: +v Ven``

[15:04] *** HaraldJoerg1 left
[15:05] <jnthn> m: class A { has @.a }; my %data = a => $[1,2,3]; dd A.new: |%data.Map

[15:05] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´A.new(a => [1, 2, 3])‚ê§¬ª

[15:06] <tobs`> jnthn: thanks but why? :-)

[15:07] <jnthn> tobs`: Coercing to a Map drops the itemization that Hash enforces

[15:07] * masak needs to look up what a Map is again :)

[15:07] <jnthn> m: class A { has @.a }; my %data is Map = a => [1,2,3]; dd A.new: |%data

[15:07] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´A.new(a => [1, 2, 3])‚ê§¬ª

[15:07] <jnthn> Or just make it a Map in the first place

[15:08] <tobs`> ah, I see! That's also why the slip object got into the array in one of masak's attempts

[15:08] *** nokdoot joined
[15:08] *** HaraldJoerg joined
[15:09] *** p6bannerbot sets mode: +v nokdoot

[15:09] *** nokdoot left
[15:09] *** p6bannerbot sets mode: +v HaraldJoerg

[15:09] <tobs`> m: class A { has @.a }; my %data = a => $[1,2,3]; dd A.new: |%data.map({ .key => slip(.value) }).hash

[15:09] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´A.new(a => [slip(1, 2, 3),])‚ê§¬ª

[15:09] <tobs`> m: class A { has @.a }; my %data = a => $[1,2,3]; dd A.new: |%data.map({ .key => slip(.value) }).Map

[15:09] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´A.new(a => [1, 2, 3])‚ê§¬ª

[15:10] <tobs`> (of course, slip is not needed now but I think I understand it, jnthn++)

[15:10] *** ryn1x joined
[15:11] *** p6bannerbot sets mode: +v ryn1x

[15:20] *** lookatme_q left
[15:21] *** lookatme_q joined
[15:22] *** p6bannerbot sets mode: +v lookatme_q

[15:31] *** rindolf left
[15:32] *** sno joined
[15:33] *** p6bannerbot sets mode: +v sno

[15:40] *** Ven`` left
[15:44] *** rindolf joined
[15:44] *** p6bannerbot sets mode: +v rindolf

[15:46] <tobs`> m: my $s = 0; { say $start, " vs. ", ENTER $start; do { $start++ }; say $start, " vs. ", ENTER $start }

[15:46] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$start' is not declared‚ê§at <tmp>:1‚ê§------> 3my $s = 0; { say 7‚èè5$start, " vs. ", ENTER $start; do { $sta‚ê§¬ª

[15:46] <tobs`> m: my $start = 0; { say $start, " vs. ", ENTER $start; do { $start++ }; say $start, " vs. ", ENTER $start }

[15:46] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´0 vs. 0‚ê§1 vs. 1‚ê§¬ª

[15:46] <tobs`> m: my $start = 0; { say $start, " vs. ", ENTER $start; $start++; say $start, " vs. ", ENTER $start }

[15:46] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´0 vs. 0‚ê§1 vs. 1‚ê§¬ª

[15:48] <tobs`> hmm, I thought I knew the question I wanted to ask but the second line makes me reconsider

[15:48] <tobs`> and re-read

[15:50] *** molaf joined
[15:51] *** p6bannerbot sets mode: +v molaf

[15:51] *** regreg left
[15:54] <tobs`> m: my $start = 0; { $start++; say $start == ENTER $start }

[15:54] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´True‚ê§¬ª

[15:55] <tobs`> My question is: why is this not false? I expect `ENTER $start` to be the value of $start when the block is entered, i.e. 0.

[15:56] *** andrzejku_ joined
[15:56] *** p6bannerbot sets mode: +v andrzejku_

[16:01] *** reach_satori joined
[16:01] <tobs`> m: my $start = 0; for 1..3 { $start += $_; say $start, "vs.", ENTER $ = $start }

[16:01] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´1vs.0‚ê§3vs.1‚ê§6vs.3‚ê§¬ª

[16:02] *** p6bannerbot sets mode: +v reach_satori

[16:07] <jnthn> ENTER evaluates to the container $start, not the value in it (thus why the $ = works, though another way is `ENTER $start<>`

[16:10] *** reach_satori left
[16:11] <tobs`> quite tricky those containers. thanks, jnthn

[16:14] <ryn1x> I am getting intermittent errors when calling a native sub from a module. If I call the sub once or twice it works, but three or more times and it fails... The sub returns a pointer and I wonder if something is going on with pre-compilation?

[16:16] <ryn1x> The error is something like: This type cannot unbox to a native string: P6opaque, Int in sub TinyTIFFReader_open at /long/path/.precomp/hash-looking-dirs

[16:19] <ryn1x> The code: https://github.com/ryn1x/Graphics-TinyTIFF/blob/master/lib/Graphics/TinyTIFF.pm6#L6-L8

[16:19] <ryn1x> Has anyone experienced somthing similar?

[16:23] <ryn1x> Found the error. Just had to talk it out ha!

[16:23] <ryn1x> My signature has `str is rw`. Just had to remove the is rw.

[16:25] <ryn1x> I put `is rw` because the c++ code showed a pointer, but I missed it was a char* at some point which should just be a str in perl.

[16:30] *** ChoHag left
[16:36] *** Voldenet left
[16:41] *** domidumont left
[16:42] *** lucasb left
[16:43] *** tobs` left
[16:46] *** Voldenet joined
[16:46] *** Voldenet left
[16:46] *** Voldenet joined
[16:46] *** p6bannerbot sets mode: +v Voldenet

[16:47] *** p6bannerbot sets mode: +v Voldenet

[16:54] <buggable> New CPAN upload: Graphics-TinyTIFF-0.0.5.tar.gz by RYNIX http://modules.perl6.org/dist/Graphics::TinyTIFF:cpan:RYNIX

[16:55] *** ryn1x left
[17:00] *** reach_satori joined
[17:01] *** p6bannerbot sets mode: +v reach_satori

[17:04] *** HaraldJoerg left
[17:05] *** i1nfusion left
[17:07] *** i1nfusion joined
[17:08] *** p6bannerbot sets mode: +v i1nfusion

[17:11] *** ferreira joined
[17:12] *** p6bannerbot sets mode: +v ferreira

[17:19] *** i1nfusion left
[17:20] *** ryn1x_ joined
[17:20] *** p6bannerbot sets mode: +v ryn1x_

[17:20] <ryn1x_> m: use NativeCall; my @a = CArray[num32].new(1e0 .. 100e0); say @a[0];

[17:20] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´NativeCall::Types::CArray[num32].new‚ê§¬ª

[17:21] <ryn1x_> use NativeCall; my @b = CArray[num32].new(1e0 .. 100e0); say $b[0]

[17:21] *** i1nfusion joined
[17:21] <ryn1x_> m: use NativeCall; my @b = CArray[num32].new(1e0 .. 100e0); say $b[0]

[17:21] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$b' is not declared. Did you mean '@b'?‚ê§at <tmp>:1‚ê§------> 3 = CArray[num32].new(1e0 .. 100e0); say 7‚èè5$b[0]‚ê§¬ª

[17:21] <ryn1x_> m: use NativeCall; my $b = CArray[num32].new(1e0 .. 100e0); say $b[0];

[17:21] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´1‚ê§¬ª

[17:21] <jnthn> "Post scheduled for Dec 22, 2018 1:00 AM!

[17:21] <jnthn> Yay :)

[17:22] *** p6bannerbot sets mode: +v i1nfusion

[17:22] <jnthn> .tell jmerelo Post is scheduled, with multiple hours to spare, even :)

[17:22] <yoleaux> jnthn: I'll pass your message to jmerelo.

[17:23] *** HaraldJoerg joined
[17:23] <ryn1x_> So assigning a CArray to a positional incorrect? It should be assigned to a scalar?

[17:23] *** p6bannerbot sets mode: +v HaraldJoerg

[17:24] *** ryn1x joined
[17:24] *** p6bannerbot sets mode: +v ryn1x

[17:50] *** Cabanoss- left
[17:52] *** Cabanossi joined
[17:52] *** mowcat joined
[17:52] *** p6bannerbot sets mode: +v Cabanossi

[17:53] *** p6bannerbot sets mode: +v mowcat

[17:53] *** ryn1x left
[18:03] *** i1nfusion left
[18:05] *** i1nfusion joined
[18:06] *** p6bannerbot sets mode: +v i1nfusion

[18:19] *** sauvin left
[18:27] *** ryn1x_ left
[18:45] *** domidumont joined
[18:46] *** p6bannerbot sets mode: +v domidumont

[18:51] *** dogbert17 joined
[18:51] *** p6bannerbot sets mode: +v dogbert17

[18:52] *** HaraldJoerg1 joined
[18:53] *** p6bannerbot sets mode: +v HaraldJoerg1

[18:55] *** HaraldJoerg left
[18:57] *** HaraldJoerg1 left
[19:20] *** i1nfusion left
[19:22] *** i1nfusion joined
[19:23] *** p6bannerbot sets mode: +v i1nfusion

[19:39] *** SoftDed joined
[19:39] *** SoftDed left
[19:50] *** Cabanossi left
[19:52] *** Cabanossi joined
[19:52] *** p6bannerbot sets mode: +v Cabanossi

[20:00] *** regreg joined
[20:00] *** p6bannerbot sets mode: +v regreg

[20:04] *** molaf left
[20:13] *** kurahaupo joined
[20:14] *** p6bannerbot sets mode: +v kurahaupo

[20:25] *** nadim joined
[20:26] *** p6bannerbot sets mode: +v nadim

[20:33] *** robertle joined
[20:33] *** domidumont left
[20:33] *** p6bannerbot sets mode: +v robertle

[20:35] *** nadim left
[20:41] *** nadim joined
[20:42] *** p6bannerbot sets mode: +v nadim

[21:03] <El_Che> weekly: Rakudo Linux packages released.

[21:03] <notable6> El_Che, Noted!

[21:04] <lizmat> El_Che++

[21:04] <timotimo> nice

[21:14] *** HarmtH left
[21:16] *** con joined
[21:16] *** p6bannerbot sets mode: +v con

[21:16] <con> How can I use posix Lgamma in perl6?

[21:17] <timotimo> you should be able to use NativeCall for that relatively easily

[21:17] <con> thanks I'll look that up

[21:30] *** i1nfusion left
[21:32] *** i1nfusion joined
[21:33] *** p6bannerbot sets mode: +v i1nfusion

[21:33] <moritz> m: use NativeCall; sub lgamma(num --> num) is native(Str) {}; say lgamma(3e0)

[21:33] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´Potential difficulties:‚ê§    In 'lgamma' routine declaration - Not an accepted NativeCall type for parameter [1]  : num‚ê§     --> For Numerical type, use the appropriate int32/int64/num64...‚ê§    at <tmp>:1‚ê§    ------> 3use NativeCall; sub lgamm‚Ä¶¬ª

[21:33] <moritz> m: use NativeCall; sub lgamma(num64 --> num64) is native(Str) {}; say lgamma(3e0)

[21:33] <camelia> rakudo-moar 45a945b5b: OUTPUT: ¬´0.6931471805599453‚ê§¬ª

[21:33] <moritz> con: ^^ something like that

[21:34] *** loops left
[21:35] *** scovit joined
[21:36] *** p6bannerbot sets mode: +v scovit

[21:42] *** curious-anon joined
[21:42] *** p6bannerbot sets mode: +v curious-anon

[21:43] *** loops joined
[21:43] *** p6bannerbot sets mode: +v loops

[21:54] *** regreg left
[22:02] *** |oLa| joined
[22:03] *** p6bannerbot sets mode: +v |oLa|

[22:03] *** regreg joined
[22:04] *** p6bannerbot sets mode: +v regreg

[22:06] *** HarmtH joined
[22:07] *** p6bannerbot sets mode: +v HarmtH

[22:09] *** ryn1x joined
[22:09] *** p6bannerbot sets mode: +v ryn1x

[22:10] *** curious-anon left
[22:13] *** ryn1x left
[22:14] <buggable> New CPAN upload: Graphics-TinyTIFF-0.0.6.tar.gz by RYNIX http://modules.perl6.org/dist/Graphics::TinyTIFF:cpan:RYNIX

[22:15] *** kensanata left
[22:23] *** |oLa| left
[22:23] *** con left
[22:44] *** molaf joined
[22:45] *** p6bannerbot sets mode: +v molaf

[22:52] <Xliff> Wow! Compile times in 2018.12 have increased, dramatically!

[22:53] *** kurahaupo left
[22:53] *** kurahaupo joined
[22:54] *** p6bannerbot sets mode: +v kurahaupo

[23:00] <vrurg> Xliff: I hope you don't mean "it compiles longer now"? ;)

[23:04] *** zecke joined
[23:04] *** p6bannerbot sets mode: +v zecke

[23:09] *** scovit left
[23:14] *** HarmtH left
[23:14] *** zecke left
[23:14] <lizmat> Xliff: which compile time are you referring to: the setting, or more general?

[23:16] *** HarmtH joined
[23:16] *** p6bannerbot sets mode: +v HarmtH

[23:19] <Xliff> lizmat/vrurg: Compile times in general.

[23:19] <Xliff> Can you put an SVG in a gist?

[23:21] <Xliff> https://github.com/Xliff/p6-GtkPlus/blob/master/stats/OutputGraph-20181221-0301.svg

[23:23] <Xliff> Unfortunately, tooltips don't show on that version. You'll need to download it and hover to see them.

[23:24] <Xliff> The straight verticals reprents average parse. As you can see, it's significantly higher than all of the others. 

[23:24] <jnthn> Parse, or the whole compile?

[23:24] <Xliff> parse

[23:24] <jnthn> As in, from stagestats?

[23:25] <Xliff> Yes

[23:25] <jnthn> Wow. That's interesting.

[23:25] <jnthn> Especially given I don't recall seeing any particular change in CORE.setting's stage parse (unless it happened in the last couple of days, when I probably didn't do a fresh build)

[23:26] <Xliff> The latest result set is from this morning's release of 2018.12

[23:26] <Xliff> You can see the raw data in that directory.

[23:36] <vrurg> Xliff: do I need anything besides build.sh to try collecting the stats on my system?

[23:37] <AlexDaniel> Xliff: holy shit that graph

[23:37] <AlexDaniel> nice

[23:37] <AlexDaniel> Xliff: what is stats/LastBuildResults-201812-20181221 ?

[23:37] <AlexDaniel> can you put a SHA there instead?

[23:37] <AlexDaniel> because right after the release cur-candidates branch was merged

[23:42] *** sena_kun left
[23:54] *** SCHAPiE left
[23:59] *** SCHAPiE joined
[23:59] *** p6bannerbot sets mode: +v SCHAPiE

