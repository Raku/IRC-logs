[00:00] <buggable> 🎺🎺🎺 It's time for the monthly Accidental /win Lottery 😍😍😍 We have 4 ballots submitted by 4 users! DRUM ROLL PLEASE!...

[00:00] <buggable> And the winning number is 42! Congratulations to lizmat! You win a can of WD40!

[00:01] *** aborazmeh joined
[00:01] *** aborazmeh left
[00:01] *** aborazmeh joined
[00:01] *** p6bannerbot sets mode: +v aborazmeh

[00:02] *** p6bannerbot sets mode: +v aborazmeh

[00:10] *** kaare_ left
[00:16] *** hogepodge29 joined
[00:16] *** peder3 joined
[00:17] *** p6bannerbot sets mode: +v hogepodge29

[00:17] *** p6bannerbot sets mode: +v peder3

[00:20] *** hogepodge29 left
[00:22] *** peder3 left
[01:05] *** sftp left
[01:06] *** lizmat left
[01:15] *** b2gills left
[01:16] <Xliff_> Say I have a perl6 primative value (ie a Str, Num, Int and such). What's the easiest way to get that into pointer form for NativeCall?

[01:27] *** ZzZombo left
[02:05] *** ExtraCrispy left
[02:05] *** aborazmeh left
[02:12] *** ZzZombo joined
[02:12] *** p6bannerbot sets mode: +v ZzZombo

[02:19] *** lindylex joined
[02:20] *** p6bannerbot sets mode: +v lindylex

[02:21] <lindylex> m: say "alongwordbeforeadot." ~~ / \w+ >> <!before '.'>  /;

[02:21] <camelia> rakudo-moar 479348f31: OUTPUT: «Nil␤»

[02:21] <lindylex> say "alongwordbeforeadot." ~~ / \w+ <!before \w> <!before '.'>  /;

[02:21] <evalable6> lindylex, rakudo-moar 479348f31: OUTPUT: «Nil␤»

[02:22] <lindylex> I think I found another bug in the regex.

[02:22] <lindylex> Those two example should have given the output >> alongwordbeforeadot

[02:25] *** Guest93736 joined
[02:25] <Xliff_> m: say "alongwordbeforeadot." ~~ / \w+ <?before '.'>  /;

[02:25] <camelia> rakudo-moar 479348f31: OUTPUT: «｢alongwordbeforeadot｣␤»

[02:26] *** Guest93736 left
[02:26] <Xliff_> m: say "alongwordbeforeadot." ~~ / \w+ >> <?before '.'>  /;

[02:26] <camelia> rakudo-moar 479348f31: OUTPUT: «｢alongwordbeforeadot｣␤»

[02:26] <Xliff_> m: say "alongwordbeforeadot." ~~ / \w+ <!before \w> <?before '.'>  /;

[02:26] <camelia> rakudo-moar 479348f31: OUTPUT: «｢alongwordbeforeadot｣␤»

[02:27] <Xliff_> lindylex: Using <!before...> means NOT before.

[02:27] <lindylex> Ok got it now right the exclamation means not.  

[02:28] <lindylex> Xliff_ : thanls

[02:28] <lindylex> Xliff_ : thanks

[02:39] *** Actualeyes joined
[02:40] *** p6bannerbot sets mode: +v Actualeyes

[02:41] <Xliff_> lindylex: no problem!

[02:51] *** Actualeyes left
[02:53] *** leont left
[03:08] *** aeruder is now known as aeruder__

[03:11] *** vike left
[03:15] *** DeeAitch12 joined
[03:18] *** DeeAitch12 left
[03:32] *** b2gills joined
[03:33] *** p6bannerbot sets mode: +v b2gills

[03:45] *** cibs_ is now known as cibs

[04:09] *** fake_space_whale left
[04:12] *** araraloren joined
[04:13] *** p6bannerbot sets mode: +v araraloren

[04:29] *** jmerelo joined
[04:29] *** p6bannerbot sets mode: +v jmerelo

[04:30] <Xliff_> Does anyone know of a way to watch what the perl6 compiler is doing as it compiles?

[04:30] <Xliff_> Is there a command line switch or environment variable that can be set? I used to know it, but I can't remember what it is.

[04:57] <jmerelo> Xliff_: if there's one, it must be here https://github.com/rakudo/rakudo/wiki/Running-rakudo-from-the-command-line

[05:03] <Xliff_> jmerelo++ # Thanks!

[05:13] <jmerelo> Xliff_: sure :-)

[05:26] *** spacedbat is now known as nullvoid

[05:28] *** MSHughes joined
[05:28] *** nullvoid is now known as ubermonk

[05:29] *** p6bannerbot sets mode: +v MSHughes

[05:30] *** Bucciarati left
[05:30] *** MSHughes left
[05:35] <Geth> ¦ doc: 7f52d31463 | (JJ Merelo)++ | doc/Type/Str.pod6

[05:35] <Geth> ¦ doc: Eliminate implementation details from definition

[05:35] <Geth> ¦ doc: 

[05:35] <Geth> ¦ doc: The signatures in Rakudo do not match those in the documentation:

[05:35] <Geth> ¦ doc: https://github.com/rakudo/rakudo/blob/e54885e5e6d71bb6ab6d7f4eb86fe21dd9aee3de/src/core/Str.pm6#L1700

[05:35] <synopsebot> Link: https://doc.perl6.org/type/Str

[05:35] <Geth> ¦ doc: and the tests in roast

[05:35] <Geth> ¦ doc: https://github.com/perl6/roast/blob/2288d4a3c543d72f822164dad529066ed055a0aa/S32-str/split-simple.t

[05:35] <Geth> ¦ doc: do not test for returning a Seq, so the fact that they actually return

[05:35] <Geth> ¦ doc: a Seq must be considered an implementation detail with no place in the documentation.

[05:35] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7f52d31463

[05:36] *** vrurg left
[05:39] *** Bucciarati joined
[05:40] *** p6bannerbot sets mode: +v Bucciarati

[05:46] <Geth> ¦ doc: c454b70006 | (JJ Merelo)++ | doc/Type/Str.pod6

[05:46] <Geth> ¦ doc: Adapts lines to new definitions, adds examples

[05:46] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c454b70006

[05:46] <synopsebot> Link: https://doc.perl6.org/type/Str

[05:46] *** ubermonk is now known as sbat

[06:02] *** sbat is now known as ubermonk

[06:05] *** htols9 joined
[06:06] *** p6bannerbot sets mode: +v htols9

[06:07] *** htols9 left
[06:10] *** graphene left
[06:11] *** graphene joined
[06:12] *** p6bannerbot sets mode: +v graphene

[06:14] *** br0dy joined
[06:14] *** br0dy left
[06:17] *** MasterDuke left
[06:21] *** Actualeyes joined
[06:21] <jmerelo> .tell AlexDaniel I'm working through this: http://colabti.org/irclogger/irclogger_log/perl6?date=2018-09-28#l722 I guess anouncements will be done only during the Squashathon?

[06:21] <yoleaux> jmerelo: I'll pass your message to AlexDaniel.

[06:22] *** p6bannerbot sets mode: +v Actualeyes

[06:40] *** graphene left
[06:42] *** graphene joined
[06:43] *** p6bannerbot sets mode: +v graphene

[06:44] <Geth> ¦ ecosystem: b810f06e48 | (JJ Merelo)++ | docs/Hacktoberfest.md

[06:44] <Geth> ¦ ecosystem: Adds hacktoberfest intro

[06:44] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/b810f06e48

[06:45] <jmerelo> .tell Alexdaniel I have started a document, will try to finish it this morning with screenshots and all. Please check the draft, linked in the log above this, to see if it's OK

[06:45] <yoleaux> jmerelo: I'll pass your message to Alexdaniel.

[06:47] <buggable> New CPAN upload: Getopt-Advance-1.1.1.tar.gz by ALOREN http://modules.perl6.org/dist/Getopt::Advance:cpan:ALOREN

[06:48] *** Actualeyes left
[06:49] *** Actualeyes joined
[06:49] *** p6bannerbot sets mode: +v Actualeyes

[06:50] *** domidumont joined
[06:51] *** p6bannerbot sets mode: +v domidumont

[06:52] *** avalenn left
[06:59] *** abraxxa joined
[06:59] *** p6bannerbot sets mode: +v abraxxa

[07:00] *** abraxxa left
[07:02] *** abraxxa joined
[07:03] *** p6bannerbot sets mode: +v abraxxa

[07:05] *** jmerelo left
[07:06] *** HaraldJoerg joined
[07:07] *** p6bannerbot sets mode: +v HaraldJoerg

[07:16] *** kini joined
[07:16] *** p6bannerbot sets mode: +v kini

[07:28] *** nikio_ joined
[07:28] *** nikio_ left
[07:28] *** rindolf joined
[07:29] *** p6bannerbot sets mode: +v rindolf

[07:31] *** willer27 joined
[07:32] *** p6bannerbot sets mode: +v willer27

[07:37] *** willer27 left
[07:56] *** pmurias joined
[07:56] *** p6bannerbot sets mode: +v pmurias

[08:06] *** lindylex left
[08:07] *** avar left
[08:07] *** avar joined
[08:07] *** avar left
[08:07] *** avar joined
[08:07] *** p6bannerbot sets mode: +v avar

[08:08] *** p6bannerbot sets mode: +v avar

[08:09] *** lizmat joined
[08:09] *** p6bannerbot sets mode: +v lizmat

[08:12] *** vike joined
[08:12] *** scimon joined
[08:12] *** p6bannerbot sets mode: +v vike

[08:12] *** p6bannerbot sets mode: +v scimon

[08:17] <Xliff_> m: say |<a b c>

[08:17] <camelia> rakudo-moar 479348f31: OUTPUT: «abc␤»

[08:17] <Xliff_> m: say |<a b c>.^name

[08:17] <camelia> rakudo-moar 479348f31: OUTPUT: «List␤»

[08:17] <Xliff_> m: say <a b c>.^name

[08:17] <camelia> rakudo-moar 479348f31: OUTPUT: «List␤»

[08:17] <Xliff_> m: say ('a', 'b', 'c').^name

[08:17] <camelia> rakudo-moar 479348f31: OUTPUT: «List␤»

[08:18] *** dakkar joined
[08:18] *** p6bannerbot sets mode: +v dakkar

[08:21] <geekosaur> m: say (|('a', 'b', 'c')).^name

[08:21] <camelia> rakudo-moar 479348f31: OUTPUT: «Slip␤»

[08:37] <pmurias> which online repl should I plug rakudo.js in?

[08:40] *** vike1 joined
[08:40] *** vike left
[08:40] <ZzZombo> Sorry, what kind of plug you mean?

[08:41] *** p6bannerbot sets mode: +v vike1

[08:43] *** giraffe joined
[08:43] *** p6bannerbot sets mode: +v giraffe

[08:43] *** giraffe is now known as Guest51572

[08:44] *** Guest82400 left
[08:51] <pmurias> ZzZombo: make it run Perl 6 code using rakudo.js

[08:52] <ZzZombo> Did you try `repl.it`? A solid online REPL I'm fond of.

[08:55] <pmurias> is that still open source? the seemed to have moved from a running stuff in the browser model to running code on their servers

[08:56] <ZzZombo> Yes, as far as I recall. I read their news letters, none indicated changing anything, except offering paid "Hacker" plans, but you can still use it for free, and still open.

[08:57] *** AlexDaniel left
[08:58] <pmurias> they changed the model they use stuff for sure

[08:58] <pmurias> they archived their old repo on github and there doesn't seem to be a new one on their github page

[09:07] *** robertle joined
[09:08] *** p6bannerbot sets mode: +v robertle

[09:09] *** pmurias left
[09:09] *** sacomo left
[09:10] *** pmurias joined
[09:10] *** p6bannerbot sets mode: +v pmurias

[09:11] *** pmurias left
[09:17] *** pmurias_ joined
[09:17] *** p6bannerbot sets mode: +v pmurias_

[09:19] *** pmurias_ left
[09:21] *** pmurias joined
[09:21] *** p6bannerbot sets mode: +v pmurias

[09:22] *** pmurias_ joined
[09:22] *** p6bannerbot sets mode: +v pmurias_

[09:22] *** ExtraCrispy joined
[09:23] *** p6bannerbot sets mode: +v ExtraCrispy

[09:24] *** ExtraCrispy left
[09:26] *** AlexDaniel joined
[09:26] *** p6bannerbot sets mode: +v AlexDaniel

[09:26] *** sacomo joined
[09:27] *** p6bannerbot sets mode: +v sacomo

[09:28] <AlexDaniel> .

[09:28] <yoleaux> 06:21Z <jmerelo> AlexDaniel: I'm working through this: http://colabti.org/irclogger/irclogger_log/perl6?date=2018-09-28#l722 I guess anouncements will be done only during the Squashathon?

[09:28] <yoleaux> 06:45Z <jmerelo> AlexDaniel: I have started a document, will try to finish it this morning with screenshots and all. Please check the draft, linked in the log above this, to see if it's OK

[09:28] <AlexDaniel> “above” :)

[09:39] <pmurias> how would copying https://dartpad.dartlang.org/ fit our REPLish needs?

[09:40] <timotimo> you think maybe the ipython notebook could be changed to use an "in-process" kernel?

[09:40] *** samuelkfYM joined
[09:41] *** samuelkfYM left
[09:41] *** Xliff_ left
[09:42] *** the_charlatan joined
[09:42] <pmurias> timotimo: I would have to investigate, I'm not really a REPL kind of person I haven't ever used ipython

[09:42] *** the_charlatan left
[09:42] <timotimo> ipython isn't too reply

[09:42] <timotimo> it's more matlaby

[09:43] *** khisanth_ left
[09:47] *** retr0h[m]Po joined
[09:48] *** ExtraCrispy joined
[09:48] *** pmurias left
[09:48] *** pmurias_ left
[09:48] *** p6bannerbot sets mode: +v retr0h[m]Po

[09:49] *** p6bannerbot sets mode: +v ExtraCrispy

[09:52] *** retr0h[m]Po left
[09:56] *** khisanth_ joined
[09:57] *** p6bannerbot sets mode: +v khisanth_

[09:58] <AlexDaniel> aaaaaaarrrgghhh. Accidentally pressed F5 while I was writing a message in gmail. No, the message is still there, but the whole freaking interface changed. And the message textbox is no longer resizable /o\

[10:00] <AlexDaniel> oh, there's a button to go back to “classic” version, good enough!

[10:01] *** tison joined
[10:02] *** Xliff joined
[10:02] *** ZzZombo left
[10:02] *** p6bannerbot sets mode: +v tison

[10:02] <AlexDaniel> also, seems like it has never been resizable anyway. I guess the newer version just has everything bigger which made me want to resize :)

[10:04] <Ulti> yeah I hate the new GMail interface

[10:06] *** lichtkind joined
[10:07] *** tison left
[10:07] *** p6bannerbot sets mode: +v lichtkind

[10:08] *** pmurias joined
[10:08] *** p6bannerbot sets mode: +v pmurias

[10:08] *** tison joined
[10:09] *** p6bannerbot sets mode: +v tison

[10:09] *** pmurias left
[10:10] *** tison left
[10:10] *** tison joined
[10:10] *** p6bannerbot sets mode: +v tison

[10:11] *** pmurias joined
[10:11] *** p6bannerbot sets mode: +v pmurias

[10:12] <pmurias> timotimo: ipython seems like something that would have a lot more value then you average REPL

[10:12] <timotimo> do you mean ipython or the jupyter notebook?

[10:12] <timotimo> (for some reason i still called it ipython notebook up there, but they renamed it a couple of years ago)

[10:12] <pmurias> isn't it the same thing under different names?

[10:12] <timotimo> jupyter notebooks are big in Science

[10:13] <timotimo> yeah, just a rename, but since there's kernels for billions of languages now, it'd be strange to keep calling it "ipython notebook"

[10:14] *** pmurias_ joined
[10:14] *** p6bannerbot sets mode: +v pmurias_

[10:15] <pmurias> bending it to have it run fully in the browser to squeeze rakudo.js into it seems to be a lot more effort than just cloning dartpad

[10:16] <timotimo> OK

[10:17] <pmurias> putting node.js side rakudo.js seems a lot more doable but it's a different thing

[10:21] *** Xliff left
[10:21] *** Xliff joined
[10:22] *** p6bannerbot sets mode: +v Xliff

[10:22] <Xliff> Oy. I've been trying to chat for minutes and didn't realize I wasn't identified. LOL!

[10:23] <Xliff> Is there a way to check if a Supply has been tapped?

[10:23] <jast> being identified is immaterial for that... everyone gets speaking permissions on a delay after joining

[10:24] <jast> at least that's the way I think it's *supposed* to work...

[10:24] <Xliff> Yeah, well I was on for minutes, and didn't get voice until I identified, and rejoined.

[10:24] <Xliff> Was here @ 6:02 my time, didn't get voice until 6:22

[10:25] <Xliff> At any rate, I've got an issue with 2018.09 that I wasn't experiencing with 2018.08

[10:25] *** Zoffix joined
[10:25] *** p6bannerbot sets mode: +v Zoffix

[10:25] *** testf23 joined
[10:25] <Xliff> Code was previously working, but now I get "Too few positionals passed; expected 1 argument but got 0"

[10:25] *** pmurias left
[10:25] *** pmurias_ left
[10:26] <Zoffix> Xliff: if you keep talking without voice you are assumed to be a bot.

[10:26] <Xliff> Code referred to has this signature: "multi method run (GTK::Application:D: )"

[10:26] *** p6bannerbot sets mode: +v testf23

[10:26] <Xliff> Zoffix. Ah.

[10:26] <jast> how? if you talk without voice no other client can even see that

[10:26] <jast> oh, +z, never mind me

[10:27] *** testf23 left
[10:28] <Xliff> OK. Time to reboot. BBIAS

[10:28] *** Xliff left
[10:28] *** Zoffix left
[10:32] *** leont joined
[10:33] *** p6bannerbot sets mode: +v leont

[10:33] *** Xliff joined
[10:34] *** p6bannerbot sets mode: +v Xliff

[10:37] *** pmurias joined
[10:37] *** p6bannerbot sets mode: +v pmurias

[10:38] *** pmurias_ joined
[10:38] *** p6bannerbot sets mode: +v pmurias_

[10:40] *** itaipu left
[10:45] <Xliff> Looks to be a definite regression or change of behavior with 2018.09

[10:45] <pmurias_> how should our dartpad spin-off/clone be called? RakudoPad/6Pad/Perl6Pad?

[10:47] *** ExtraCrispy left
[10:47] <Xliff> https://gist.github.com/Xliff/5ed649b319a4f28b9d77c41516ad8d7d

[10:47] *** ExtraCrispy joined
[10:47] *** p6bannerbot sets mode: +v ExtraCrispy

[10:47] *** pmurias left
[10:47] *** rindolf left
[10:47] *** ExtraCrispy left
[10:47] *** pmurias_ is now known as pmurias

[10:48] *** ExtraCrispy joined
[10:48] *** p6bannerbot sets mode: +v ExtraCrispy

[10:48] *** caseihzT joined
[10:49] *** caseihzT left
[10:50] *** pmurias left
[10:51] *** pmurias joined
[10:51] *** p6bannerbot sets mode: +v pmurias

[10:52] *** pmurias_ joined
[10:52] *** p6bannerbot sets mode: +v pmurias_

[10:53] <AlexDaniel> Xliff: what is that? Is it a module? I don't see it in the ecosystem

[10:54] <Xliff> AlexDaniel: Isn't in the ecosystem, yet.

[10:54] <AlexDaniel> Xliff: ok, what are the steps to reproduce? (including installation of dependencies and stuff like that)

[10:54] <Xliff> Near as I can tell, it's the $a.run call, and this was JUST working until I rakudobrew'd

[10:55] <Xliff> git clone https://github.com/Xliff/p6-GtkPlus.git

[10:55] <Xliff> cd p6-GtkPlus.git; perl6 -Ilib t/08-textview.t

[10:55] <Xliff> As far as dependencies....

[10:56] <Xliff> A working installation of libgtk3

[10:56] <tison> pmurias: we are going to porting perl6 to dart backend?

[10:57] *** rindolf joined
[10:57] <tison> hmm, maybe just use the js backend, know little about that

[10:57] *** p6bannerbot sets mode: +v rindolf

[11:02] <pmurias> tison: it will be for the js backend

[11:03] <pmurias> tison: I'm just "borrowing" the dart-pad interface to have a "run it in the browser" page for rakudo.js

[11:03] <tison> get it :-)

[11:04] <pmurias> tison: I'm writing too many rakudo backends already, I don't need a third one ;)

[11:06] *** itaipu joined
[11:06] <tison> yes, that's why I am quite a bit surprise :P

[11:07] *** ZzZombo joined
[11:07] *** p6bannerbot sets mode: +v ZzZombo

[11:07] *** p6bannerbot sets mode: +v itaipu

[11:17] <Xliff> AlexDaniel: Looks like I got hit with exactly what Zoffix expected.

[11:17] <Xliff> http://colabti.org/irclogger/irclogger_log/perl6?date=2018-09-28#l792

[11:17] <Xliff> The problem is that his solution didn't work, either.

[11:17] *** pmurias left
[11:17] *** pmurias_ left
[11:18] <AlexDaniel> Xliff: use Data::Dump::Tree; in Builder.pm6

[11:19] <Xliff> Commented out. Checking

[11:19] <Xliff> No change.

[11:20] *** pmurias joined
[11:20] *** p6bannerbot sets mode: +v pmurias

[11:20] <AlexDaniel> Xliff: not saying it's an issue, just pointing out that it's a dependency that probably shouldn't be there :)

[11:20] <Xliff> Oh. Yeah.

[11:20] <Xliff> That was for debugging purposes.

[11:20] <Xliff> It's safe to remove.

[11:21] <Xliff> It looks like overriding method bless() is a no-no in 2018.09

[11:21] *** pmurias_ joined
[11:21] *** p6bannerbot sets mode: +v pmurias_

[11:23] *** aindilis joined
[11:23] *** pmurias_ left
[11:23] *** pmurias left
[11:23] *** p6bannerbot sets mode: +v aindilis

[11:26] <lizmat> Xliff: could you verify that 74ca05f284f2e6668fe7 is not the cause ?

[11:26] <Xliff> lizmat: Sure. One sec.

[11:27] <Xliff> Is there a way to do that through rakudobrew?

[11:27] <lizmat> not that I know of  :-(

[11:27] *** pmurias joined
[11:27] *** p6bannerbot sets mode: +v pmurias

[11:28] <timotimo> i think you literally just "rakudobrew build whatever-sha1-is-the-parent-of-74ca05f284f2e6668fe7"

[11:28] *** pmurias_ joined
[11:28] *** p6bannerbot sets mode: +v pmurias_

[11:29] <tadzik> perhaps `build moar <sha1>`

[11:30] <timotimo> oh

[11:30] <tadzik> probably best to ask the author..

[11:30] <Xliff> Yes

[11:30] <timotimo> perhaps

[11:30] <tadzik> hmmm

[11:30] <timotimo> yeah who is that?

[11:30] <tadzik> I wonder if he knows though...

[11:30] <Xliff> LOL

[11:30] <tadzik> yes, it seems like it's build <impl> <ver> :P

[11:31] <tadzik> impl being moar and ver being the thing passed to git-checkout

[11:31] <Xliff> So the SHA I want is f989b26282f91c0ac2479d0ccd223454306d1bed

[11:32] <Xliff> Rebuilding. :)

[11:32] <tadzik> the top comment in bin/rakudobrew says "# I AM RAKUDOBREW. ALSO POSSIBLY SPARTACUS. OUTLOOK CLOUDY, ASK AGAIN LATER."

[11:32] <tadzik> okay who wrote that

[11:32] <Xliff> Then I go to 74ca05f284f2e6668fe7 and see if things break.

[11:33] <tadzik> https://github.com/tadzik/rakudobrew/issues/56 lol

[11:33] *** ryerkeao joined
[11:33] <tadzik> mst: I'm sorry :D

[11:34] <Xliff> ROFL

[11:34] *** p6bannerbot sets mode: +v ryerkeao

[11:34] *** grondilu joined
[11:34] *** p6bannerbot sets mode: +v grondilu

[11:34] <grondilu> m: say map { .² }, 1..5;

[11:34] <yoleaux> 15 Sep 2018 17:06Z <thundergnat> grondilu: Any chance you could apply the outstanding pull requests to your Modular module? There are Rosetta code tasks that are broken because it won't install.

[11:34] <camelia> rakudo-moar 5c272ee41: OUTPUT: «(1 4 9 16 25)␤»

[11:35] <grondilu> "." can be used instead of "_" in a closure?  TIL

[11:35] *** pmurias left
[11:35] *** pmurias_ left
[11:35] * grondilu learnt about it while reading http://rosettacode.org/wiki/Calculating_the_value_of_e#Perl_6

[11:36] <Xliff> m: say 1.²

[11:36] <camelia> rakudo-moar 5c272ee41: OUTPUT: «1␤»

[11:36] <Xliff> m: say 2.²

[11:36] <camelia> rakudo-moar 5c272ee41: OUTPUT: «4␤»

[11:36] <grondilu> say .²

[11:36] <evalable6> grondilu, rakudo-moar 5c272ee41: OUTPUT: «Use of uninitialized value of type Any in numeric context␤0␤  in block <unit> at /tmp/UbGlvTRPFm line 1␤»

[11:36] <grondilu> m: say .²

[11:36] <camelia> rakudo-moar 5c272ee41: OUTPUT: «Use of uninitialized value of type Any in numeric context␤0␤  in block <unit> at <tmp> line 1␤»

[11:36] <timotimo> m: $_ = 5; say .²

[11:36] <camelia> rakudo-moar 5c272ee41: OUTPUT: «25␤»

[11:36] <Xliff> ^^ That

[11:36] <timotimo> m: $_ = "hi"; .say

[11:36] <camelia> rakudo-moar 5c272ee41: OUTPUT: «hi␤»

[11:37] <grondilu> that's neat anyway

[11:37] <grondilu> "." is only one character shorter than $_ but it looks better

[11:38] <Xliff> m: say map { . + 1 }, 1..5;

[11:38] <camelia> rakudo-moar 5c272ee41: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of . to concatenate strings; in Perl 6 please use ~␤at <tmp>:1␤------> 3say map { .7⏏5 + 1 }, 1..5;␤»

[11:39] <Xliff> m: say map { $_ + 1 }, 1..5;

[11:39] <camelia> rakudo-moar 5c272ee41: OUTPUT: «(2 3 4 5 6)␤»

[11:39] <Xliff> Not quite as usuable as you might think. :/

[11:39] <Xliff> lizmat: Also fails in f989b26282f91c0ac2479d0ccd223454306d1bed

[11:40] *** ryerkeao left
[11:41] <lizmat> then I do not have any further direction for investigation atm

[11:42] <Xliff> Thanks for the help.

[11:42] <Xliff> Still looks like the problem is in overriding method bless.

[11:43] <Xliff> I take out the override and it goes away.

[11:43] <Xliff> The idea is to have code that is only run ONCE per object initialization. Can't do that in BUILD or TWEAK.

[11:43] <Xliff> Coz... subclassing.

[11:44] <masak> pmurias: 6pad! <3

[11:44] <Xliff> Could do it in method new().... if there were only one.

[11:44] <masak> Xliff: wait, BUILD only runs once per object initialization, no?

[11:45] <Xliff> masak: Yes... but subclassing

[11:45] <masak> m: class B { submethod BUILD { say "B's BUILD" } }; class C is B { submethod BUILD { say "C's BUILD" } }; C.new

[11:45] <camelia> rakudo-moar 5c272ee41: OUTPUT: «B's BUILD␤C's BUILD␤»

[11:45] *** pmurias joined
[11:45] *** p6bannerbot sets mode: +v pmurias

[11:45] <Xliff> See?

[11:45] <masak> Xliff: I don't see the problem...?

[11:45] <masak> pmurias: 6pad! <3

[11:45] <Geth> ¦ doc: 891e49386d | (JJ Merelo)++ | doc/Language/packages.pod6

[11:45] <Geth> ¦ doc: Fixing issue raised by @rahogaboom in email list. :+1:

[11:45] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/891e49386d

[11:45] <synopsebot> Link: https://doc.perl6.org/language/packages

[11:45] <Xliff> masak: I do NOT want the code to run more than ONCE. 

[11:46] <masak> Xliff: it... doesn't?

[11:46] <Xliff> Your example runs two instances of BUILD. 

[11:46] <masak> Xliff: the BUILD in B runs once and the BUILD in C runs once.

[11:46] <Xliff> Yes.

[11:46] <masak> that's correct, because my C instance is also a B instance

[11:46] <Xliff> I know.

[11:46] *** saki joined
[11:46] <tadzik> so you want your BUILD to not be a submethod?

[11:46] *** saki left
[11:46] <Xliff> And the code I want to run should happen AFTER all of the BUILD calls are made.

[11:46] *** pmurias_ joined
[11:46] *** p6bannerbot sets mode: +v pmurias_

[11:47] <Xliff> but before bless exits. Hence why I wanted to override bless.

[11:47] <masak> usually when I'm banging my head against the OO system, I take a step back and wonder if I'm doing things in the right way

[11:47] <tadzik> while we're at it, I recently had a feeling that perhaps the P6/Moo(se) OOP syntax encourages bad OO practices

[11:47] <tadzik> I know that it does in me, and life taught me that I'm usually not special :)

[11:47] <masak> tadzik: I'd love to see a longer explanation of that

[11:48] *** saki joined
[11:48] *** saki left
[11:48] <tadzik> masak: ah, take a seat :)

[11:48] <Xliff> masak: Trust me. I took that step back.

[11:48] <masak> tadzik: (will read asynchronously, as I'm currently teaching)

[11:48] <masak> Xliff: ...but still, your conclusion was "I want to override .bless"? :P

[11:49] <Xliff> If I can override new() why not bless()?

[11:49] <Xliff> :P # masak

[11:49] <tadzik> so, it's been a while since my first C++ books taught me that classes are just structs with functions, and nowadays I tend to think of object as the OG OO masters designed them: as entities that *do* things, are only accidentally happen to be data structures sometimes

[11:49] <tadzik> now I can feel smug and intelligent people agree with me so I fell like it's I'm on the right track with these

[11:50] <tadzik> so objects are those things that *do* things, and the things they do also strive to keep the object's state mostly hidden and mostly correct

[11:50] <masak> Xliff: ...because .bless is at a deeper level of the OO system

[11:51] <masak> Xliff: it's not "can't" so much as "probably shouldn't"

[11:51] <tadzik> so that their data-structure properites are merely a useful addition to their core idea, rather than being the core idea itself

[11:51] <tadzik> now, BUILD and bless kind of ties into that, and so is the discussion you're having

[11:51] <masak> tadzik: you're expressing "The Mystical View" of OO, by the way.

[11:51] <Xliff> I agree with "Probably shouldn't" but bless() is just a method, no?

[11:52] <masak> (there's also "The Scandinavian View" and "The Software Engineering View")

[11:52] <Xliff> I don't see anything in the docs saying that "This should not be done"

[11:52] *** squashable6 joined
[11:52] <masak> Xliff: you misunderstand

[11:52] <tison> new/bless/BUILD/TWEAK

[11:52] <tadzik> before TWEAK was a thing I remember having arguments here with TimToady, and at some point implementing a custom AFTERPARTY method into rakudo so that I can do things when the object is being initialized

[11:52] *** aeruder__ left
[11:52] <masak> Xliff: I'm not setting up a challenge. and you're right that the documentation does not discourage you from overriding .bless

[11:53] <tadzik> the reason I wanted to do this was sound in retrospect: objects should care about correctness of their state, and doing that as they're being created is perhaps the most important part of it all

[11:53] *** p6bannerbot sets mode: +v squashable6

[11:53] <squashable6> Webhook for perl6/whateverable is now active! Practicality beats purity.

[11:53] <tison> too many if want to know the whole construct process

[11:53] <masak> Xliff: it's just a matter of common sense -- it's deeper down in the OO system, so all other things equal, you'd be less wont to override it

[11:53] <tadzik> in other words: "constructor" is of upmost importantce in an object, imho

[11:53] <Xliff> m: class B { submethod TWEAK { say "B's TWEAK" } }; class C is B { submethod TWEAK { say "C's TWEAK" } }; C.new

[11:53] <camelia> rakudo-moar 5c272ee41: OUTPUT: «B's TWEAK␤C's TWEAK␤»

[11:53] <tadzik> now the reason why I fought long battles with BUILD, AFTERPARTY and friends is because I didn't want to overload the actual constructor as I should

[11:53] <Xliff> masak: But you still haven't said anything meaning that "I shouldn't be able to"

[11:54] <masak> tadzik: agree insofar as invariants are important

[11:54] <tadzik> but the reason why I didn't want to do that is because it was *easier* that way

[11:54] <Xliff> masak: Just that it should happen rarely.

[11:54] <masak> Xliff: that is what I'm saying

[11:54] <tadzik> one of the selling points of Moose for me back in the day was "you don't have to write a constructor and this stupid bless() thing that confuses you, just declare your attributes"

[11:54] <masak> Xliff: and I'm implying that your mistake *might be* that think you're in a rare situation

[11:54] <Xliff> masak: Note that both BUILD and TWEAK run as expected.

[11:54] <tadzik> Perl 6 does the same, obviously

[11:54] *** kensanata joined
[11:54] *** p6bannerbot sets mode: +v kensanata

[11:55] <Xliff> But I don't want to repeatedly run this code in that manner. And those mechanisms you are touting don't let me do that.

[11:55] <Xliff> In fact, you are saying that Perl6 is FIGHTING me on that.

[11:55] <Xliff> I know what I want to do and I'm trying to find the best way to do it. I understand you may think that I'm NOT in this situation.

[11:55] <tadzik> so the syntax of the language I used made it all very attribute-centric: object creation was pushed aside as something You Shouldn't Need To Do, and the data structures associated with an object has become not only the core part of creating them, but also a defining part of their interface!

[11:55] <Xliff> But after careful analysis.. I AM.

[11:56] *** kbloom joined
[11:56] *** p6bannerbot sets mode: +v kbloom

[11:56] <Xliff> And listen: this used to work!!

[11:56] <Xliff> As recently as 2018.08

[11:56] <tison> tadzik: sound like case object in Scala or data class in Kotlin

[11:56] <tadzik> in a way, `has` and the autogenerated new() has lured me away from proper OO and back into the days of "I am 12 and C++ is just C with classes"

[11:56] <Xliff> So imagine this from the point of view of the end-freaking-user.

[11:56] <Xliff> Working code. No change. Upgrade Perl. Now broken.

[11:57] <tadzik> and it did so sneakily and I only recently realised what I tend to do because of this

[11:57] <AlexDaniel> Xliff: it's a blocker, yes, although I haven't looked at why it happens

[11:57] <Xliff> And the push-back I get when I ask for help is that -- "Uh. You're doing it wrong."

[11:57] <AlexDaniel> Xliff: is there a gist somewher explaining what's going on there?

[11:57] <AlexDaniel> sry I'm busy doing stuff for the squashathon

[11:57] <tison> just stay away from constructor and delegate the initial of attributes to automate, and introduce a "start"/"init

[11:57] <Xliff> And you wonder why people get upset?

[11:57] <tison> " method (LOL

[11:57] <tadzik> declare attributes in my Moo classes so that I can set them in a constructor, but I don't actually need them to exist: I just want the configuration for the proper attribute of the object available so that I can create the attribute I actually need in BUILD

[11:58] <Xliff> AlexDaniel: 

[11:58] <tadzik> which is nuts and I feel ashamed of my actions, but I also feel partially excused: after all, that's what I've been conditioned to do *by the language itself*

[11:59] <Xliff> AlexDaniel: The only one I've written up is here: https://gist.github.com/Xliff/5ed649b319a4f28b9d77c41516ad8d7d

[11:59] <AlexDaniel> Xliff: generally if your code is broken by a change in rakudo, a ticket should be filed, and by default I'll slap a blocker label on that. Now, if there's a good justification why the behavior should be changed, then there is a possibility that it will be rejected. But I'd much rather prefer that rejection to be on the ticket, not in a messy IRC discussion :)

[12:00] <tadzik> by making the proper way inconvenient and advertising the easy, yet not-very-objecty way as the right way to do things, I ended up writing many very silly classes and probably have made my own and others' programming life harder

[12:00] <Xliff> AlexDaniel: I will file that ticket. However, the issue of assistance is the concern.

[12:00] <Xliff> So allow me to quietly blow off some steam.

[12:00] <Xliff> And this discussion is not... that ... messy. :)

[12:01] <tadzik> Xliff: sorry for making it messier with my monologue :P

[12:01] <Xliff> tadzik: Hey. It's an open channel. And I've been following your stuff, too.

[12:01] <tadzik> :)

[12:02] <Xliff> AlexDaniel: Will update gist with an example.

[12:03] *** saki joined
[12:03] *** saki left
[12:03] <tadzik> I'm yet to reach a full conclusion of these thoughts, but what sits at the core of it is this: "has", willingly or not, ends up tying the interface of the constructor to the internal state of the object, introducing tight and unnecessary coupling. Yet people still use it because 1) having constructor arguments with declarative defaults and such is nice and convenient and 2) everyone hates writing your their

[12:03] <tadzik> own new() because they associate bless() with something discouraged and hard to understand

[12:06] <lizmat> And yet another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/10/01/2018-40-lesser-than-two/

[12:06] <tadzik> as a possible way to solve it, perhaps having a separate entity from has would be nice? Something that declares an "input attribute", which the default constructor handles correctly, and *maybe* that "input attribute" sets an actual attribute with itself

[12:07] <tadzik> I'll try to sketch a prototype

[12:07] <Xliff> AlexDaniel: Here's the updated gist. https://gist.github.com/Xliff/5ed649b319a4f28b9d77c41516ad8d7d

[12:09] <AlexDaniel> Xliff: maybe a golf can help also

[12:10] *** ExtraCrispy left
[12:10] <Xliff> AlexDaniel: Yes. And I have trouble writing those. :/

[12:10] <Xliff> Lesse.

[12:12] <AlexDaniel> lizmat: squashathon paragraph does not link to anything squashathon-related, can we please have a link to https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day or even https://github.com/perl6/ecosystem/wiki/SQUASHathon if we want to save an extra click :)

[12:12] <Xliff> And lo and behold, I have one.

[12:14] <Xliff> m: class A { method bless(*%attrinit) { use nqp; my $o = nqp::create(self).BUILDALL(Empty, %attrinit); $o; };  }; say A.new

[12:14] <camelia> rakudo-moar 5c272ee41: OUTPUT: «Too few positionals passed; expected 1 argument but got 0␤  in method bless at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:14] <Xliff> ^^ That didn't error out in 2018.08

[12:14] <AlexDaniel> 6c: class A { method bless(*%attrinit) { use nqp; my $o = nqp::create(self).BUILDALL(Empty, %attrinit); $o; };  }; say A.new

[12:15] <committable6> AlexDaniel, https://gist.github.com/a9066bde66afd2499b65515bc64fb0b5

[12:15] <AlexDaniel> bisect: class A { method bless(*%attrinit) { use nqp; my $o = nqp::create(self).BUILDALL(Empty, %attrinit); $o; };  }; say A.new

[12:15] <bisectable6> AlexDaniel, Bisecting by exit code (old=2015.12 new=5c272ee). Old exit code: 0

[12:15] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/f045ab8c054ed346e1a0b74df6e779f0

[12:15] <bisectable6> AlexDaniel, (2018-09-25) https://github.com/rakudo/rakudo/commit/74ca05f284f2e6668fe77ae9f7518747b787dcf8

[12:16] <Xliff> O_o

[12:16] <Xliff> I tested the one before that and it still failed.

[12:16] <AlexDaniel> bisectable6 is always right

[12:16] <Xliff> LOL

[12:16] <lizmat> hehe...

[12:16] <AlexDaniel> but sometimes the person asking a question is wrong, so let's double check

[12:16] <lizmat> so my guess was also right

[12:16] <Xliff> 2018.09-68-g5c272ee41

[12:16] <AlexDaniel> c: 74ca05f284f^,74ca05f284f class A { method bless(*%attrinit) { use nqp; my $o = nqp::create(self).BUILDALL(Empty, %attrinit); $o; };  }; say A.new

[12:16] <committable6> AlexDaniel, ¦74ca05f284f^: «A.new␤» ¦74ca05f: «Too few positionals passed; expected 1 argument but got 0␤  in method bless at /tmp/xM210PD43T line 1␤  in block <unit> at /tmp/xM210PD43T line 1␤␤ «exit code = 1»»

[12:17] <AlexDaniel> yes, bisectable6 is right :)

[12:17] <lizmat> I think I found the thinko

[12:17] <lizmat> compiling now

[12:18] <pmurias_> tadzik: the input attribute would be syntax sugar to make initializing private attributes from constructor arguments easier?

[12:18] <tadzik> masak: https://gist.github.com/tadzik/37a905d09db571ac02493814a986472f a sketch for an alternative

[12:18] <tadzik> pmurias_: precisely, see the gist above :)

[12:19] <lizmat> Xliff: s/nqp::create(self)/self.CREATE/ and you can get rid of 'use nqp'

[12:19] <lizmat> yup, that's the one

[12:19] <tadzik> pmurias_: my reasoning is: people like declarative attributes-arguments in has, and they don't like writing constructors. Let's give them both while not encouraging bad design

[12:19] <Xliff> Oooh!

[12:20] <lizmat> Xliff: https://github.com/rakudo/rakudo/commit/64137bd21c

[12:20] <pmurias_> tadzik: please don't use a , twigil

[12:21] <Xliff> $,pmurias

[12:21] <timotimo> i like woof

[12:21] <tadzik> I wondered if I even need a twigil, but went with one to keep the pattern :P

[12:21] <timotimo> but yeah, $, sounds like a bad idea :)

[12:21] <Xliff> lizmat: Thank you SO much!

[12:21] <lizmat> Xliff: yw

[12:21] <pmurias_> tadzik: it interferes with the tokenizing parts of my brain

[12:21] *** pmurias left
[12:21] *** cognominal-p6 left
[12:21] <tadzik> and I don't like unicode enough to use a $→ or something

[12:21] *** pmurias_ left
[12:21] *** saki joined
[12:21] <tadzik> oh no, I interfered too much!

[12:22] *** saki left
[12:22] <AlexDaniel> lizmat: any tests coming?

[12:23] *** GHAABL41 joined
[12:23] *** FAASPJB joined
[12:23] <lizmat> AlexDaniel: he... lemme see

[12:25] <leont> tadzik: how about fixing that with a trait?

[12:25] *** statisfiable6 left
[12:25] *** statisfiable6 joined
[12:25] <timotimo> how do you like $᷂ instead of $,?

[12:25] *** statisfiable6 left
[12:26] *** statisfiable6 joined
[12:26] <leont> has $!foo is constructed('bar') or some such? (names are hard)

[12:26] *** p6bannerbot sets mode: +v statisfiable6

[12:26] <AlexDaniel> Xliff: please next time just file a ticket :)

[12:27] <AlexDaniel> you see, now it's fixed, so less motivation to file one. But we need tests… which we almost forgot

[12:27] <AlexDaniel> and then someone will look at the commit and say “whoa, why?” and there's no proper thread for discussion

[12:27] <timotimo> https://gist.github.com/timo/e05f3537fdd9850fa9a68bf25f9bf5cf - a whole bunch of choices for y'all!

[12:28] <Xliff> AlexDaniel: Do you still want me to file a ticket so you can mark fixed?

[12:28] <AlexDaniel> Xliff: depends on whether lizmat writes tests or not

[12:29] <Xliff> Wouldn't that golf work as a test?

[12:29] <timotimo> updated to not put them all into a single column

[12:29] <AlexDaniel> Xliff: yes, it should

[12:29] <AlexDaniel> c: HEAD class A { method bless(*%attrinit) { use nqp; my $o = nqp::create(self).BUILDALL(Empty, %attrinit); $o; };  }; say A.new

[12:29] <committable6> AlexDaniel, ¦HEAD(64137bd): «A.new␤»

[12:29] *** pmurias joined
[12:29] *** p6bannerbot sets mode: +v pmurias

[12:29] <AlexDaniel> Xliff: yes, seems to be working now

[12:29] *** pmurias_ joined
[12:29] *** p6bannerbot sets mode: +v pmurias_

[12:29] *** ExtraCrispy joined
[12:29] *** p6bannerbot sets mode: +v ExtraCrispy

[12:29] <pmurias> tadzik: has $!foo is built(-> :$arg-name {BuildItProperly.new($arg-name)})

[12:29] <timotimo> like, $̦ is already a lot like $, but it doesn't collide with "anonymous scalar, sub call"

[12:30] <Xliff> c: HEAD class A { method bless(*%attrinit) { use nqp; my $o = self.CREATE.BUILDALL(Empty, %attrinit); $o; };  }; say A.new

[12:30] <committable6> Xliff, ¦HEAD(64137bd): «A.new␤»

[12:30] <timotimo> another suggestion

[12:30] <timotimo> $͜ as a replacement for $_

[12:30] <pmurias> tadzik: has $!foo is built(-> :$arg-name! {BuildItProperly.new($arg-name)}) for a required one

[12:30] *** saki joined
[12:30] *** saki left
[12:31] <timotimo> well, maybe $͟ would be a more sensible choice

[12:31] <lizmat> AlexDaniel Xliff added the golf as a test

[12:32] <AlexDaniel> lizmat++ that was quick, thanks!

[12:35] *** mcmillhj joined
[12:35] * Xliff wonders if timotimo needs a hug.

[12:35] <Xliff> timotimo: Please... no unicode this early in the morning. My compose key is threatened!

[12:35] *** p6bannerbot sets mode: +v mcmillhj

[12:35] <Xliff> OK. My gist is updated. masak++, tadzik++, AlexDaniel++ and lizmat+++!

[12:36] <timotimo> i'd actually be amused if we had those in a silly slang module

[12:36] <timotimo> use Syntax::Silly;

[12:37] <Xliff> People would strangle the writer.

[12:37] <timotimo> a slang that allows variables to start not only in a $, but also any $ with any number of combiners

[12:37] *** araraloren left
[12:37] <ilmari> use Syntax::Zalgo;

[12:39] *** cognominal-p6 joined
[12:40] *** p6bannerbot sets mode: +v cognominal-p6

[12:43] <tison> if perl6 toolchain install slang as truffle framework does :-)

[12:44] <tison> then perl6 becomes a polyglot platform 

[12:45] *** pmurias left
[12:46] *** pmurias joined
[12:46] *** p6bannerbot sets mode: +v pmurias

[12:47] <pmurias> tison: you mean if we have a slang that switches parsing to a truffle language?

[12:48] <tison> not *a* slang, but if a user-friendly slang implementation approach

[12:48] <tison> IIRC masak has 007

[12:49] <tison> so maybe we already have it

[12:51] <tison> hmm..what I am concerned maybe a Inline::XXX series

[12:51] *** pmurias_ left
[12:52] *** pmurias_ joined
[12:52] *** p6bannerbot sets mode: +v pmurias_

[12:52] *** void1 joined
[12:52] *** void1 left
[12:55] *** pmurias left
[12:55] *** pmurias_ left
[12:56] *** Xliff_ joined
[12:57] *** cognominal-p6 left
[12:57] *** mahafyi joined
[12:57] *** lizmat_ joined
[12:57] *** p6bannerbot sets mode: +v lizmat_

[12:57] *** cognominal-p6 joined
[12:57] <tadzik> leont, pmurias: I like these

[12:57] *** p6bannerbot sets mode: +v Xliff_

[12:57] *** reppie joined
[12:57] *** p6bannerbot sets mode: +v mahafyi

[12:58] *** p6bannerbot sets mode: +v cognominal-p6

[12:58] *** p6bannerbot sets mode: +v reppie

[12:58] <SmokeMachine> lizmat: hi...

[12:58] *** x[LGWs4x4i]uG2N0 left
[12:58] <tadzik> I think declarative attributes are great, and so is the declarative constructor. "has" was a great idea that combined those, but I think it was taken too far by tying these things together

[12:59] <SmokeMachine> lizmat: sorry, but wrong Fernando on Red development...

[12:59] *** grondilu left
[12:59] <tadzik> timotimo: yeah, I'm surprised it's not a thing already, tbh :) I honestly think unicode is insane, but since we're doing it, while not go Full Instane too? :)

[12:59] <SmokeMachine> lizmat: that was me, Fernando Correa de Oliveira...

[13:00] <tadzik> that would actually fix some problems people have with it. Like violence, unicode becomes a solution rather than a problem if you apply it excessively

[13:00] <SmokeMachine> lizmat_: 👆

[13:00] *** Xliff left
[13:00] *** lizmat left
[13:00] <tadzik> people have been changing unicode gun to a water gun, salad to a vegan salad... that's stupid! That's what combining characters are for

[13:00] <tadzik> SALAD+VEGANISM, GUN+PACIFISM, there

[13:01] <tadzik> (I'm only half-joking btw :P)

[13:01] *** saki joined
[13:01] *** saki left
[13:01] *** grondilu joined
[13:01] *** p6bannerbot sets mode: +v grondilu

[13:02] <moritz_> the other day, I bought a cookie that looked *really* inviting, only to later find out that it tasted like dirt

[13:02] *** lizmat_ left
[13:02] <moritz_> and later sombody told me it was vegan

[13:03] <moritz_> so the next time I bought something in the same shop, I was tempted to ask if it was vegan, and not buy it if the answer was yes

[13:03] <moritz_> (I could resist, and didn't ask then)

[13:04] *** cognominal-p6 left
[13:04] *** lizmat joined
[13:04] *** p6bannerbot sets mode: +v lizmat

[13:05] <tadzik> moritz_: was the next thing also vegan (and awful?)

[13:05] <moritz_> tadzik: no idea if it was vegan, but it was tasty :)

[13:06] <tadzik> ah, that's the best :)

[13:06] <tadzik> I love vegan food sometimes because vegan cooks tend to get really creative and end up making really tasty stuff, rather than taking a piece of meat, some filler, some salad and calling it done

[13:07] <tadzik> but then again once I went to a party, and because one attendee was vegan they made literally everything from beans. Every single meal.

[13:08] <Actualeyes> I consistently feel like vegan plates are missing something.

[13:09] <SmokeMachine> .tell lizmat sorry, but on p6w “Red developments” that was the wrong Fernando, that was me, Fernando Correa de Oliveira...

[13:09] <yoleaux> SmokeMachine: I'll pass your message to lizmat.

[13:09] <tadzik> I really like vegan stuff unless it's trying to imitate non-vegan stuff, then it's just a poor ersatz imho :/

[13:10] *** Kaiepi left
[13:11] *** Kaiepi joined
[13:11] <AlexDaniel> tadzik: I haven't tried the impossible burger, but as far as I can see it imitates very well

[13:12] *** p6bannerbot sets mode: +v Kaiepi

[13:12] <AlexDaniel> is it vegan though?

[13:12] <tadzik> never heard of it, but I think it's similar to what we have here known as Krowarzywa

[13:12] <tadzik> which is a magnificent pun

[13:13] <tadzik> "krowa rzywa" is a typo on "alive cow", and "warzywa" means vegetables :)

[13:13] *** nwang joined
[13:13] <tadzik> never had it either, but iirc it's vegan and actually very good

[13:13] <AlexDaniel> I don't think it's even remotely similar

[13:13] *** p6bannerbot sets mode: +v nwang

[13:14] <Geth> ¦ doc: 435be23287 | (Tzu-Li "tison" Chen)++ (committed using GitHub Web editor) | doc/Language/hashmap.pod6

[13:14] <Geth> ¦ doc: improve "Constraint value types" paragraph

[13:14] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/435be23287

[13:14] <synopsebot> Link: https://doc.perl6.org/language/hashmap

[13:15] <tadzik> I had some vegan bacon once. It wasn't bad, but it definitely wasn't bacon either

[13:16] *** robertle left
[13:17] *** robertle joined
[13:17] *** cognominal-p6 joined
[13:18] *** p6bannerbot sets mode: +v robertle

[13:18] *** p6bannerbot sets mode: +v cognominal-p6

[13:18] *** kaare_ joined
[13:19] *** p6bannerbot sets mode: +v kaare_

[13:20] *** nwang left
[13:21] *** Guest40687 joined
[13:21] *** KingsyOS joined
[13:21] *** cognominal-p6 left
[13:21] *** lizmat left
[13:21] *** Guest40687 left
[13:22] *** cognominal-p6 joined
[13:22] *** p6bannerbot sets mode: +v KingsyOS

[13:22] <timotimo> i personally am looking forward to lab-grown meat being widely available

[13:22] <timotimo> i'll totally be an early adopter

[13:23] *** p6bannerbot sets mode: +v cognominal-p6

[13:23] <tadzik> oh yes

[13:24] *** aeruder joined
[13:24] <timotimo> depending on your particular flavor of veganism, lab-grown meat would also be vegan, i'd claim

[13:24] *** p6bannerbot sets mode: +v aeruder

[13:27] *** knation joined
[13:27] *** p6bannerbot sets mode: +v knation

[13:27] *** pmurias joined
[13:27] *** p6bannerbot sets mode: +v pmurias

[13:27] *** pmurias_ joined
[13:27] *** p6bannerbot sets mode: +v pmurias_

[13:28] *** a3Dman joined
[13:28] *** KingsyOS left
[13:28] *** p6bannerbot sets mode: +v a3Dman

[13:29] *** vrurg joined
[13:29] *** a3Dman left
[13:30] *** p6bannerbot sets mode: +v vrurg

[13:32] *** lizmat joined
[13:32] *** p6bannerbot sets mode: +v lizmat

[13:37] *** Anton-LatukhajX joined
[13:37] <Xliff_> timotimo: lab grown meat? Are we really there?

[13:37] <Xliff_> .oO( vat grown beef?!? )

[13:38] <timotimo> it already exists, but is not publically available, and i'm not sure if it's legal to eat it for some reason? :D

[13:38] *** domidumont left
[13:38] <timotimo> last i read it was missing some texture because it's all just one type of cells, whereas regular meat would have different kinds intermingled

[13:38] <jkramer> Wasn't there some super rich dude who paid a million for eating the first tiny piece of it?

[13:39] <timotimo> could be

[13:39] *** domidumont joined
[13:39] *** p6bannerbot sets mode: +v domidumont

[13:40] <leont> It already exists in labs, and is quite edible from what I've heard, but it's ridiculously expensive

[13:40] <tadzik> if it's merely missing textures then it's perfectly releasable as an early alpha :P

[13:40] <Xliff_> Oh My Ghod. We're really getting....  sorta... closeish

[13:40] <Xliff_> https://www.businessinsider.com/lab-grown-meat-startup-solving-barrier-meat-without-slaughter-meatable-2018-9

[13:41] <Xliff_> tadzik: Actually, textureless food isn't that palatable.

[13:41] <AlexDaniel> “Called Meatable”

[13:41] <AlexDaniel> hmmmmmmm

[13:41] <Xliff_> .oO( Are there 2 l's in palatable? )

[13:41] <timotimo> have they reached the black triangle stage yet?

[13:42] <Xliff_> Black Triangle? Isn't that for ski-ing. Or are you talking "slippery slope?"

[13:42] <timotimo> nah, it's the stage where you can initialize the hardware to get graphics on the screen, but it still looks uninteresting

[13:43] <timotimo> but it represents a far bigger achievement than it suggests from just looking at it

[13:43] <timotimo> and a black triangle is, well, textureless :)

[13:43] <jkramer> Recently I've also seen worm burgers in a supermarket. It's like the future is already here! https://www.nw.de/nachrichten/wirtschaft/22122389_Rewe-verkauft-ersten-Insekten-Burger-Produkt-von-Osnabruecker-Start-up.html

[13:43] *** Anton-LatukhajX left
[13:43] <timotimo> oh!

[13:44] <Xliff_> Worm burgers?

[13:44] <Xliff_> Heh. Not my thing. There's that texture issue, again.

[13:45] <jkramer> Yeah, I think they shockfreeze worms, grind them and use the powder as protein source in some kind of soya burger.

[13:45] <jkramer> They say it tastes and feels like a falafel though. So I wonder: why not eat a falafel?

[13:45] <timotimo> yeah, 60% of the worms, 40% concentrated soy protien

[13:45] <timotimo> or soy protein concentrate

[13:45] <timotimo> or whatever

[13:46] *** jeromelanteri joined
[13:46] <Xliff_> Still though... worms...

[13:46] *** p6bannerbot sets mode: +v jeromelanteri

[13:46] <Xliff_> Next thing you know we'll have the R-burgers.

[13:47] <Xliff_> Roaches and Rats. :P

[13:47] <AlexDaniel> (butterfly burgers?)

[13:48] <jkramer> I think I'd eat worm powder. I just don't want to see the actual worms. :)

[13:48] <timotimo> "novel food", hell yeah

[13:49] <jkramer> Ok I saw the worms. :( https://l7.alamy.com/zooms/bccc8420cc554baa9262a36ec9e71085/freeze-dried-buffalo-worms-for-human-food-cf9c7y.jpg

[13:49] <timotimo> as long as it doesn't move when i thaw it ... :)

[13:49] <timotimo> haha, i won't click that :D

[13:49] <jkramer> :D

[13:50] <timotimo> i hope the next squashathon will actually become a flash-freeze-and-grind-a-thon

[13:51] <jkramer> I imagine other insects like crickets could be pretty tasty though. I've seen them fried and covered in chocolate, I might try that some time. :)

[13:51] <timotimo> i think it was crickets that were used in Snowpiercer

[13:52] <jkramer> Didn't they eat the poor people from the waggons at the end of the train, like Soylent Green?

[13:53] <timotimo> not in the movie at least. there was also a book, i assume?

[13:53] <robertle> comic book

[13:54] <Xliff_> Heh. Soylent Green.

[13:54] <Xliff_> Wonder why Hollywood hasn't gotten around to remaking that.

[13:54] <robertle> but I can't remember anyone being eaten, "just" enslaved and abused

[13:54] <jkramer> In the movie it was protein bars made from cockroches: https://www.quora.com/What-were-the-protein-bars-in-Snowpiercer-made-from

[13:54] <timotimo> oh, it was cockroaches

[13:54] <timotimo> my mistake

[13:54] *** pyrimidine joined
[13:54] <timotimo> they were only shown briefly, in my defense :)

[13:55] *** p6bannerbot sets mode: +v pyrimidine

[13:55] <jkramer> IIRC protein bars made from frozen ground crickets exist in real life though.

[13:56] <jkramer> https://exoprotein.com/

[13:56] <Xliff_> Just as long as I don't know what brand that is.

[13:56] <Xliff_> Ok. good. Not the ones I eat. I can avoid them.

[13:56] <jkramer> There are several brands :)

[13:57] *** void1 joined
[13:57] *** void1 left
[13:57] *** void1 joined
[13:57] *** p6bannerbot sets mode: +v void1

[13:57] <jkramer> But I'm sure it would say it's from crickets on the packaging.

[13:57] <timotimo> d'aaw, rewe has a page about how eating insects is slowly gaining traction, and there's a section for "people who aren't brave enough yet" with food that merely looks like different kinds of insects, and they are really adorable: https://www.rewe.de/ernaehrung/insekten-essen/ (scroll down 3/4th of the way)

[13:58] *** p6bannerbot sets mode: +v void1

[13:58] <jkramer> :D

[13:59] *** aborazmeh joined
[13:59] *** aborazmeh left
[13:59] *** aborazmeh joined
[13:59] *** p6bannerbot sets mode: +v aborazmeh

[13:59] <timotimo> "mini spider pizza", "vegetable caterpillar", "spider cupcakes", "melon frog", "sausage slug on cucumber salad", and "sweet (or cute) fruit turtles"

[13:59] <jkramer> So if I don't want to eat actual insects I can still eat cupcakes with frosting that looks like a spider? I don't think that's the point of eating insects :D

[13:59] *** p6bannerbot sets mode: +v aborazmeh

[14:00] <timotimo> :D

[14:00] <AlexDaniel> can we get this channel back to perl6 support? :D

[14:00] <jkramer> Sorry :D

[14:00] * Xliff_ is with AlexDaniel

[14:01] <Xliff_> You all should move that discussion to #weirdfoodies.

[14:01] <timotimo> sorry about that, i'll shut up

[14:01] <timotimo> actually, i was intending to go afk anyway

[14:01] <jkramer> Yup and I need to get some work done actually :)

[14:01] <Xliff_> .oO( There was an implied smiley in that last message. I swear! )

[14:06] *** molaf joined
[14:06] *** AlexDaniel left
[14:06] *** AlexDaniel joined
[14:06] *** p6bannerbot sets mode: +v AlexDaniel

[14:06] *** p6bannerbot sets mode: +v molaf

[14:08] *** smash_ is now known as smash

[14:13] *** ExtraCrispy left
[14:13] <xinming> m: my %h=(:a, :b, :c); $_ = False for %h<a b>:v; %h.perl.say;

[14:13] <camelia> rakudo-moar 64137bd21: OUTPUT: «{:!a, :!b, :c}␤»

[14:13] <xinming> Is there shortcuts for perl6 to make the   $_ = False for %h<a b>:v   more sweet? :-)

[14:13] *** ExtraCrispy joined
[14:13] *** p6bannerbot sets mode: +v ExtraCrispy

[14:13] <timotimo> yeah

[14:14] <timotimo> m: my %h=(:a, :b, :c); %h<a b>--; say %h.perl

[14:14] <camelia> rakudo-moar 64137bd21: OUTPUT: «Cannot resolve caller postfix:<-->(List); the following candidates␤match the type but require mutable arguments:␤    (Mu:D $a is rw)␤␤The following do not match for other reasons:␤    (Bool:D $a is rw)␤    (Bool:U $a is rw)␤    (Int:D $a…»

[14:14] <timotimo> m: my %h=(:a, :b, :c); %h<a b>>>--; say %h.perl

[14:14] <camelia> rakudo-moar 64137bd21: OUTPUT: «{:!a, :!b, :c}␤»

[14:15] <jkramer> m: my %h=(:a, :b, :c); %h<a b> = False xx *; say %h

[14:15] <camelia> rakudo-moar 64137bd21: OUTPUT: «{a => False, b => False, c => True}␤»

[14:15] <timotimo> m: my %h=(:a, :b, :c); %h<a b> X= False; say %h.perl

[14:15] <camelia> rakudo-moar 64137bd21: OUTPUT: «{:!a, :!b, :c}␤»

[14:15] <lizmat> m: my %h is Set = <a b c>; %h<a b>>>--; dd %h

[14:15] <yoleaux> 13:09Z <SmokeMachine> lizmat: sorry, but on p6w “Red developments” that was the wrong Fernando, that was me, Fernando Correa de Oliveira...

[14:15] <camelia> rakudo-moar 64137bd21: OUTPUT: «Cannot resolve caller postfix:<-->(Bool); the following candidates␤match the type but require mutable arguments:␤    (Mu:D $a is rw)␤    (Int:D $a is rw)␤    (Bool:D $a is rw)␤␤The following do not match for other reasons:␤    (Bool:U $a…»

[14:16] <timotimo> must be SetHash

[14:16] <lizmat> ?

[14:17] <timotimo> in your code, it doesn't work because Set is read-only

[14:17] <lizmat> .tell SmokeMachine fixed, sorry for the confusion

[14:17] <yoleaux> lizmat: I'll pass your message to SmokeMachine.

[14:17] <lizmat> ah duh

[14:17] <lizmat> m: my %h is SetHash = <a b c>; %h<a b>>>--; dd %h

[14:17] <camelia> rakudo-moar 64137bd21: OUTPUT: «SetHash.new("c")␤»

[14:17] <SmokeMachine> .

[14:17] <yoleaux> 14:17Z <lizmat> SmokeMachine: fixed, sorry for the confusion

[14:17] <SmokeMachine> lizmat: no problem! I don't think Fernando is a common name... :)

[14:18] <lizmat> it is for Abba fans :-)

[14:18] <SmokeMachine> :)

[14:18] *** reppie is now known as x[LGWs4x4i]uG2N0

[14:29] *** aborazmeh left
[14:34] <timotimo> i wonder if the comparison of the benchmark where we create the Point and add their .x and .y to a total is disingenuous because of the nature of the optimization ...

[14:34] <lizmat> timotimo: why ?

[14:41] <timotimo> the optimization is that it eliminates the need to allocate an object to hold the two integers

[14:41] <timotimo> at least i think that already landed?

[14:41] <timotimo> i better check my claim before i make it

[14:42] <timotimo> if that opt is yet to land, then ... oh my.

[14:42] <jnthn> No, there's no EA yet

[14:43] <jnthn> You're right that once we have EA and scalar replacement and they're working well, then we'll devestate that benchmark, though :)

[14:43] <timotimo> oh jeez

[14:43] <jnthn> And it's still actually kinda fair, in that there's loads of short-lived objects used for the purpose of abstraction in real programs. Think of Rat and Complex, for example :)

[14:44] <timotimo> true

[14:44] <jnthn> But yes, one'd want a benchmark that keeps the objects around also.

[14:44] <timotimo> the pea that we have, does it only work for num and int attributes, or also for object registers?

[14:44] <jnthn> Note that pea only exists in a very experimental branch :)

[14:44] <jnthn> But I put in support for int/num/str too :)

[14:45] <lizmat> jnthn: re the performance difference between Zoffix's opt and the standard

[14:45] <timotimo> object attributes*

[14:45] <lizmat> perhaps is the "is raw" on the named params the difference ?

[14:46] <lizmat> nope, scratch that

[14:46] <jnthn> :)

[14:46] <jnthn> I'm not sure what it'll be without looking :)

[14:46] <timotimo> the GC is doing well in this benchmark

[14:47] <timotimo> 7.8% of time is spent in the gc, it did 84 collections of 1.76ms on average

[14:47] <lizmat> looks like making the attributes native ints, only helps a bit

[14:48] <timotimo> it also allocates 3x as many Scalar as Point, and it also allocates as many BOOTHash and Hash as Point, and - unsurprisingly - 2x as many Int as Point

[14:48] <timotimo> lizmat: perhaps some unnecessary boxing taking place, or usage of NativeRef

[14:48] <lizmat> and having the custom new with !SET doesn't help at all if the attributes are *not* native ints

[14:48] <lizmat> so it's the combination

[14:49] <lizmat> so perhaps the standard initialization of native attributes is below par

[14:49] *** lindylex joined
[14:50] <timotimo> using native ints gets Scalar down to 1 million allocations

[14:50] *** Hor|zon_ joined
[14:50] *** araraloren joined
[14:50] <timotimo> so 1 mil of Hash, BOOTHash, Scalar, and Point each, and 2 million Ints

[14:50] *** p6bannerbot sets mode: +v lindylex

[14:50] <mst> tadzik: bahahahahahahaha

[14:50] *** p6bannerbot sets mode: +v Hor|zon_

[14:50] *** p6bannerbot sets mode: +v araraloren

[14:51] <mst> tadzik: gotta love mortie's comment on the issue too

[14:51] <timotimo> yes, 2 million Scalars were created in BUILDALL

[14:52] *** Hor|zon_ left
[14:55] *** hami joined
[14:55] *** p6bannerbot sets mode: +v hami

[14:56] <Xliff_> Is there any way to see if a Supply has been tapped?

[14:57] <timotimo> you could give it a promise that gets resolved by the first time the supply block is entered

[14:57] <timotimo> if you're in fact using a supply block, that is

[14:57] <buggable> New CPAN upload: JSON-Schema-0.9.tar.gz by JNTHN http://modules.perl6.org/dist/JSON::Schema:cpan:JNTHN

[14:57] <Xliff_> No. I'm not.

[14:57] <timotimo> OK, that's a bit different then

[14:57] <timotimo> but i'll be afk for a bit first

[14:57] <timotimo> i know about on-close, but not sure of an on-tap

[14:57] <Xliff_> No worries. If you do find something, just PM me... or leave a message on the bot.

[14:58] <timotimo> you can build a supply that does nothing except set a value to "True"

[14:58] <timotimo> and pass on every other value

[14:58] <Xliff_> I guess I could, at that.

[14:58] <Xliff_> But am surprised that wasn't already in there.

[14:59] <Xliff_> However, if it wasn't in the synopses, then it wouldn't make it to implementation. ;)

[14:59] <timotimo> like sub supply-snitch(Supply $other, atomicint $sentinel is rw) { supply { atomic-inc($sentinel); whenever $other { emit $_ } } }

[14:59] <Xliff_> And with that, I nap.

[14:59] <timotimo> good nap!

[15:05] *** hami left
[15:06] *** fake_space_whale joined
[15:06] *** p6bannerbot sets mode: +v fake_space_whale

[15:07] <xinming> jkramer: timotimo Thanks for your versions

[15:17] *** jmerelo joined
[15:18] *** p6bannerbot sets mode: +v jmerelo

[15:21] *** jeromelanteri left
[15:23] <lizmat> jnthn: looks like changing replacing "if existskey / atkey" combo by a ifnull(my \a = atkey) could save about 10% for native attributes

[15:24] *** kensanata left
[15:24] <jnthn> lizmat: ah yes, sounds worthwhile

[15:25] <lizmat> alas, my QAST generating foo seems to have left me atm

[15:25] <lizmat> will look again at it when I get back from some cycling&

[15:27] *** lindylex left
[15:27] *** kybr joined
[15:28] *** p6bannerbot sets mode: +v kybr

[15:33] *** Kaiepi left
[15:34] *** Kaiepi joined
[15:35] *** p6bannerbot sets mode: +v Kaiepi

[15:35] *** AlexDaniel left
[15:35] *** AlexDaniel joined
[15:35] *** p6bannerbot sets mode: +v AlexDaniel

[15:36] *** AlexDaniel left
[15:38] *** graphene left
[15:39] *** graphene joined
[15:40] *** p6bannerbot sets mode: +v graphene

[15:57] *** domidumont left
[16:01] *** pmurias_ left
[16:01] *** pmurias left
[16:01] *** pmurias joined
[16:01] *** p6bannerbot sets mode: +v pmurias

[16:01] *** pmurias_ joined
[16:01] *** p6bannerbot sets mode: +v pmurias_

[16:05] *** lizmat left
[16:10] *** lichtkind left
[16:12] *** Actualeyes left
[16:20] *** zxcvz joined
[16:20] *** p6bannerbot sets mode: +v zxcvz

[16:22] *** kiwi_77 joined
[16:22] *** p6bannerbot sets mode: +v kiwi_77

[16:22] *** cobax left
[16:22] *** kiwi_77 left
[16:22] *** kiwi_41 joined
[16:22] *** p6bannerbot sets mode: +v kiwi_41

[16:24] *** kiwi_41 left
[16:24] *** scimon left
[16:24] *** graphene left
[16:26] *** graphene joined
[16:26] *** p6bannerbot sets mode: +v graphene

[16:27] *** dakkar left
[16:28] *** Actualeyes joined
[16:29] *** p6bannerbot sets mode: +v Actualeyes

[16:30] *** knation left
[16:34] *** zxcvz left
[16:37] *** microcoloneldX joined
[16:38] *** molaf left
[16:43] *** microcoloneldX left
[16:44] *** rindolf left
[16:51] *** rindolf joined
[16:52] *** p6bannerbot sets mode: +v rindolf

[16:52] *** domidumont joined
[16:53] *** p6bannerbot sets mode: +v domidumont

[16:55] *** kbloom left
[16:57] *** natrys joined
[16:57] *** p6bannerbot sets mode: +v natrys

[16:59] *** grondilu left
[17:01] *** araraloren left
[17:02] *** molaf joined
[17:02] *** molaf left
[17:20] *** panicbit left
[17:21] *** patrickb joined
[17:21] *** p6bannerbot sets mode: +v patrickb

[17:27] *** knation joined
[17:27] *** p6bannerbot sets mode: +v knation

[17:44] *** alloholaU joined
[17:44] *** p6bannerbot sets mode: +v alloholaU

[17:45] *** alloholaU left
[17:45] *** pmurias left
[17:45] *** pmurias_ left
[17:47] *** modin joined
[17:51] *** modin left
[18:04] *** kbloom joined
[18:04] *** p6bannerbot sets mode: +v kbloom

[18:13] *** pmurias joined
[18:13] *** p6bannerbot sets mode: +v pmurias

[18:13] *** pmurias_ joined
[18:13] *** p6bannerbot sets mode: +v pmurias_

[18:13] *** mcmillhj left
[18:16] *** mcmillhj joined
[18:17] *** p6bannerbot sets mode: +v mcmillhj

[18:18] *** silvermerelu joined
[18:21] *** sauvin left
[18:22] *** mcmillhj left
[18:22] *** silvermerelu left
[18:24] *** knation left
[18:32] *** lizmat joined
[18:32] *** p6bannerbot sets mode: +v lizmat

[18:32] *** graphene left
[18:33] *** mcmillhj joined
[18:33] *** p6bannerbot sets mode: +v mcmillhj

[18:34] *** graphene joined
[18:34] *** p6bannerbot sets mode: +v graphene

[18:38] *** mcmillhj left
[18:38] *** jmerelo left
[18:41] *** Michael_S joined
[18:41] *** p6bannerbot sets mode: +v Michael_S

[18:41] *** mcmillhj joined
[18:42] *** p6bannerbot sets mode: +v mcmillhj

[18:44] <Michael_S> Hello, I have what I hope is a quick question.  I'm trying to figure out the syntax for a function definition that returns a two item List/array/whatever.   If I omit types, it works fine.  But I'd like to use the type system, and I can't figure out how to get something like "returns (ClassX, ClassY)" past the compiler.

[18:44] *** kurahaupo left
[18:45] *** kurahaupo joined
[18:45] <rindolf> Michael_S: hi

[18:45] <Michael_S> Hello rindolf.

[18:46] *** p6bannerbot sets mode: +v kurahaupo

[18:46] <rindolf> Michael_S: are nt there tuples for that?

[18:47] <El_Che> Michael_S: you want to type each element? Return an object

[18:47] <El_Che> m: sub foo(-->List) { 1,2,3 }; foo()

[18:47] <camelia> rakudo-moar 64137bd21: ( no output )

[18:47] <Michael_S> I could define a custom class to hold the two otherwise unrelated classes I want to return.  But I was hoping to avoid the overhead.  

[18:47] <El_Che> m: sub foo(-->List) { 1,2,3 }; foo().say

[18:47] <camelia> rakudo-moar 64137bd21: OUTPUT: «(1 2 3)␤»

[18:48] <El_Che> only 2? A tuple will do then

[18:48] <Michael_S> Hmm... let me play with it locally, just a minute.

[18:51] <El_Che> it depends on how do you want to type them

[18:52] <Michael_S> Using a List in the signature works.   It's not an important feature, but I was hoping for something like Scala's typed tuples.  In Scala you can do:  def foo(): (Int, String) = { 1, "hello" };  val x = foo();  println(x._1); /* prints numeric 1 */ println(x._2); /*prints numeric 2 */

[18:52] *** domidumont left
[18:52] <Michael_S> Sorry, I got that second part wrong.  x._2 is a string.

[18:54] <Michael_S> And in the same example if I tried to set x._1 to something not numeric or x._2 to something not a String, it's an error.   Not a killer feature by any means, just nice.   Anyway, thanks very much for your help, I appreciate the quick responses.

[18:54] <lizmat> m: subset Foo of List where { .elems == 2 && .[0] ~~ Int && .[1] ~~ Str }; sub a(--> Foo) { "1","foo" }; dd a

[18:54] <camelia> rakudo-moar 64137bd21: OUTPUT: «Type check failed for return value; expected Foo but got List ($("1", "foo"))␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:54] <El_Che> I wonder if a return type can have a where

[18:54] <lizmat> m: subset Foo of List where { .elems == 2 && .[0] ~~ Int && .[1] ~~ Str }; sub a(--> Foo) { 1,"foo" }; dd a

[18:54] <camelia> rakudo-moar 64137bd21: OUTPUT: «(1, "foo")␤»

[18:55] <El_Che> of, by a subset

[18:55] <El_Che> s/of/ok/

[18:55] <El_Che> I was thinkig of this non-working code:

[18:55] <lizmat> m: subset Foo of List where { $_ ~~ (Int,Str) }; sub a(--> Foo) { 1,"foo" }; dd a  # shorter

[18:55] <camelia> rakudo-moar 64137bd21: OUTPUT: «(1, "foo")␤»

[18:55] <El_Che> m: sub foo(-->Pair where .key ~~ Int) { 1,2,3 }; foo()

[18:55] <camelia> rakudo-moar 64137bd21: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot do non-typename cases of type_constraint yet␤at <tmp>:1␤------> 3sub foo(-->Pair where .key ~~ Int7⏏5) { 1,2,3 }; foo()␤»

[18:56] <El_Che> m: subset Foo of List where { $_ ~~ (Str,Int) }; sub a(--> Foo) { 1,"foo" }; dd a

[18:56] <camelia> rakudo-moar 64137bd21: OUTPUT: «Type check failed for return value; expected Foo but got List ($(1, "foo"))␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:56] <El_Che> nice

[18:57] <lizmat> m: subset Foo of List where * ~~ (Int,Str); sub a(--> Foo) { 1,"foo" }; dd a  # shorter with a WhateverCode

[18:57] <camelia> rakudo-moar 64137bd21: OUTPUT: «(1, "foo")␤»

[18:58] <Michael_S> Thanks, very cool.

[19:00] <El_Che> lizmat: should I document your example?

[19:00] <El_Che> it's pretty cool

[19:00] <Michael_S> Next question, and then I'll stop bothering people for today.  I'm writing a script to automate video file encoding.  At the beginning I'm going to setup the Linux cpulimit utility to limit encoder CPU usage, and then when the encode is finished it'll be killed by the script.    I could do that part by hand, but this is one more way for me to explore Perl6.

[19:00] <lizmat> El_Che: sure  :-)

[19:01] <El_Che> lizmat: here? https://docs.perl6.org/language/typesystem#index-entry-subset-subset

[19:01] <lizmat> looks like a good place to me

[19:02] <SmokeMachine> m: subset Foo of List where (Int,Str); sub a(--> Foo) { 1,"foo" }; dd a

[19:02] <camelia> rakudo-moar 64137bd21: OUTPUT: «(1, "foo")␤»

[19:02] <lizmat> SmokeMachine++  # even shorter indeed  :-)

[19:03] <El_Che> damn

[19:03] <Michael_S> So I enter the function that starts a Proc::Async with cpulimit and returns it.  But I don't always want to use cpulimit, if I'm not going to use my machine for a while I don't want it.  But I can't figure out a clean way to tell whether the Proc::Async has been initialized and started.

[19:04] <lizmat> Michael_S: you're not looking for https://docs.perl6.org/type/Proc::Async#method_started are you?

[19:05] <lizmat> or maybe "ready" ?

[19:05] <Michael_S> I could have *sworn* I was getting errors when I used the .started call.  I beat my head against that for twenty minutes.  I just tried it again, and it worked fine.   

[19:08] <Michael_S> My tuple digression there was for returning (Proc::Async, Bool).  But I don't need it, I justed tested again and 'started' worked flawlessly.

[19:09] <Michael_S> Well, I learned some things anyway.  Thanks again to rindolf, El_Che, lizmat, and SmokeMachine for the help.

[19:09] <lizmat> Michael_S: /me learned as well  :-)

[19:09] <rindolf> Michael_S: you're welcome 

[19:13] *** claes-magnus joined
[19:13] *** p6bannerbot sets mode: +v claes-magnus

[19:16] <claes-magnus> hey! my name is claes-magnus; I actually don't know any perl but I like to program and was told by a teacher this was the place. I know some JavaScript but are interested in learning other langs as well... :) 

[19:16] *** Antaresln joined
[19:17] <lizmat> claes-magnus: you might want to have a look at https://greenteapress.com/wp/think-perl-6/ in that case

[19:18] <claes-magnus> lizmat: sure will do! thanks

[19:20] <Geth> ¦ doc: nxadm++ created pull request #2346: Document typing of returns in signature

[19:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2346

[19:20] <Geth> ¦ doc: 0eb8d39ff5 | (Claudio Ramirez)++ | doc/Language/typesystem.pod6

[19:20] <Geth> ¦ doc: Document typing of returns in signature

[19:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0eb8d39ff5

[19:20] <Geth> ¦ doc: e696e37cc3 | nxadm++ (committed using GitHub Web editor) | doc/Language/typesystem.pod6

[19:20] <Geth> ¦ doc: Merge pull request #2346 from nxadm/master

[19:20] <synopsebot> Link: https://doc.perl6.org/language/typesystem

[19:20] <Geth> ¦ doc: 

[19:20] <Geth> ¦ doc: Document typing of returns in signature

[19:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e696e37cc3

[19:23] *** sftp joined
[19:23] *** p6bannerbot sets mode: +v sftp

[19:23] *** mcmillhj left
[19:24] <masak> claes-magnus: \o

[19:24] <masak> (that's a little picture of a person waving) :)

[19:25] *** Antaresln left
[19:26] <claes-magnus> masak: :)

[19:27] *** mcmillhj joined
[19:27] <masak> m: my $name = "claes-magnus"; say ($name.substr($_, 1) for <6 7 4 2 0>).join

[19:27] <camelia> rakudo-moar 64137bd21: OUTPUT: «masac␤»

[19:27] <masak> almost...

[19:28] *** p6bannerbot sets mode: +v mcmillhj

[19:32] <masak> m: for 4..9 -> $n { say "$n is ", ("1" x $n ~~ /^ [(..+?) $0+] $/ ?? "composite" !! "prime") }

[19:32] <camelia> rakudo-moar 64137bd21: OUTPUT: «4 is composite␤5 is prime␤6 is composite␤7 is prime␤8 is composite␤9 is composite␤»

[19:32] <masak> claes-magnus: dunno if you've seen the regex that checks for primality before

[19:33] <claes-magnus> no, can't say I have!

[19:33] <masak> hm, superstitious brackets there...

[19:33] <masak> m: for 4..9 -> $n { say "$n is ", ("1" x $n ~~ /^ (..+?) $0+ $/ ?? "composite" !! "prime") }

[19:33] <camelia> rakudo-moar 64137bd21: OUTPUT: «4 is composite␤5 is prime␤6 is composite␤7 is prime␤8 is composite␤9 is composite␤»

[19:33] *** claes-magnus left
[19:33] *** _claes-magnus joined
[19:34] * lizmat wonders what masak is trying to show

[19:34] *** pecastro joined
[19:34] <masak> lizmat: just showing some Perl 6 regexes :)

[19:34] <masak> the (..+?) means "match one character, and then (frugally) one or more characters"

[19:34] <masak> the $0+ means "one or more of the (..+?) group"

[19:34] *** p6bannerbot sets mode: +v pecastro

[19:35] <El_Che> "so, is this new Perl 6 thing easier to read than Perl 6?"

[19:35] <El_Che> "hallo? Halloooo?"

[19:35] <lizmat> ?

[19:35] <masak> together, those two mean that the regex will backtrack until it finds two factors that make up the number

[19:35] <masak> (or fail, if it's a prime)

[19:41] *** pmurias_ left
[19:41] *** pmurias left
[19:51] *** pmurias joined
[19:51] *** p6bannerbot sets mode: +v pmurias

[19:52] *** pmurias_ joined
[19:52] *** p6bannerbot sets mode: +v pmurias_

[19:55] *** Mava joined
[19:56] *** p6bannerbot sets mode: +v Mava

[19:57] *** Mava left
[19:58] *** _claes-magnus left
[19:59] *** _claes-magnus joined
[20:00] *** p6bannerbot sets mode: +v _claes-magnus

[20:00] *** robooki joined
[20:01] <_claes-magnus> What's the deal with "gives voice to"?

[20:03] <leont> It's against spambots AFAIK

[20:03] *** ExtraCrispy_ joined
[20:03] *** p6bannerbot sets mode: +v ExtraCrispy_

[20:03] *** finlstrmYC joined
[20:04] *** _claes-magnus left
[20:04] *** p6bannerbot sets mode: +v finlstrmYC

[20:04] *** finlstrmYC left
[20:04] *** robooki left
[20:04] <pmurias_> for code mirror syntax highlighting what should I look at?

[20:04] *** mcmillhj left
[20:04] <pmurias_> I found: https://github.com/zoffixznet/perl6.party/tree/master/assets/js/codemirror

[20:05] *** claes-magnus joined
[20:05] *** ExtraCrispy left
[20:06] *** p6bannerbot sets mode: +v claes-magnus

[20:07] *** W4RL0RD__ joined
[20:07] *** p6bannerbot sets mode: +v W4RL0RD__

[20:09] *** ExtraCrispy_ left
[20:11] *** W4RL0RD__ left
[20:14] *** claes-magnus left
[20:52] *** AlexDaniel joined
[20:52] *** p6bannerbot sets mode: +v AlexDaniel

[20:59] *** HaraldJoerg left
[20:59] *** HaraldJoerg joined
[20:59] *** AlexDaniel left
[21:00] *** AlexDaniel joined
[21:00] *** p6bannerbot sets mode: +v HaraldJoerg

[21:01] *** p6bannerbot sets mode: +v AlexDaniel

[21:21] *** Michael_S left
[21:22] *** pmurias_ left
[21:22] *** pmurias left
[21:28] *** AlexDaniel left
[21:29] *** AlexDaniel joined
[21:29] *** p6bannerbot sets mode: +v AlexDaniel

[21:30] *** HaraldJoerg left
[21:31] *** Blacker47 joined
[21:36] *** Blacker47 left
[21:38] *** rindolf left
[21:58] *** rindolf joined
[21:58] *** itaipu left
[21:59] *** p6bannerbot sets mode: +v rindolf

[22:01] <Geth> ¦ doc: MorayJ++ created pull request #2347: Clarify interpolation section

[22:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2347

[22:03] *** happysatIh joined
[22:04] *** p6bannerbot sets mode: +v happysatIh

[22:05] *** happysatIh left
[22:09] *** Ven`` joined
[22:09] *** p6bannerbot sets mode: +v Ven``

[22:09] *** AlexDaniel left
[22:10] *** AlexDaniel joined
[22:10] *** Ven`` left
[22:11] *** p6bannerbot sets mode: +v AlexDaniel

[22:13] *** zahlman joined
[22:13] *** p6bannerbot sets mode: +v zahlman

[22:16] *** zahlman left
[22:16] *** patrickb left
[22:16] <Geth> ¦ doc: 3666b8be66 | MorayJ++ | doc/Language/regexes.pod6

[22:16] <Geth> ¦ doc: Clarify interpolation section

[22:16] <Geth> ¦ doc: 

[22:16] <Geth> ¦ doc: Attempts to clarify regex interpolation by starting with two examples and a simple explanation.

[22:16] <Geth> ¦ doc: 

[22:16] <synopsebot> Link: https://doc.perl6.org/language/regexes

[22:16] <Geth> ¦ doc: Leaving in the more complicated examples should people want more.

[22:16] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/3666b8be66

[22:16] <Geth> ¦ doc: 7a9095c4d5 | MorayJ++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[22:16] <Geth> ¦ doc: Merge pull request #2347 from MorayJ/regex-interpolation

[22:16] <Geth> ¦ doc: 

[22:16] <Geth> ¦ doc: Clarify interpolation section

[22:16] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7a9095c4d5

[22:30] *** natrys left
[22:34] *** rindolf left
[22:49] *** nightfrog left
[22:50] *** nightfrog joined
[22:51] *** p6bannerbot sets mode: +v nightfrog

[22:57] <buggable> New CPAN upload: Terminal-Spinners-1.2.0.tar.gz by RYNIX http://modules.perl6.org/dist/Terminal::Spinners:cpan:RYNIX

[22:57] *** vrurg left
[22:58] *** vrurg joined
[22:59] *** p6bannerbot sets mode: +v vrurg

[23:00] *** Bucciarati left
[23:01] *** vrurg left
[23:02] *** pecastro left
[23:05] *** vrurg joined
[23:06] *** p6bannerbot sets mode: +v vrurg

[23:18] *** lindylex joined
[23:18] *** p6bannerbot sets mode: +v lindylex

[23:36] *** MasterDuke joined
[23:36] *** p6bannerbot sets mode: +v MasterDuke

[23:36] *** MasterDuke left
[23:36] *** MasterDuke joined
[23:36] *** herbert.freenode.net sets mode: +v MasterDuke

[23:36] *** p6bannerbot sets mode: +v MasterDuke

[23:37] <buggable> New CPAN upload: App-Mi6-0.2.0.tar.gz by SKAJI http://modules.perl6.org/dist/App::Mi6:cpan:SKAJI

[23:41] <Geth> ¦ doc: MasterDuke17++ created pull request #2348: Fix some typos

[23:41] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2348

[23:41] <Geth> ¦ doc: ba7cdebfc7 | MasterDuke17++ | doc/Language/typesystem.pod6

[23:41] <Geth> ¦ doc: Fix some typos

[23:41] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ba7cdebfc7

[23:41] <synopsebot> Link: https://doc.perl6.org/language/typesystem

[23:45] *** manchicken joined
[23:46] *** p6bannerbot sets mode: +v manchicken

[23:59] *** graphene left
