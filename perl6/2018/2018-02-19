[00:00] *** Grrrr joined
[00:14] *** Kaiepi joined
[00:17] *** comborico1611 joined
[00:18] <comborico1611> How do you access a program in the REPL?

[00:19] *** comborico joined
[00:20] *** comborico1611 left
[00:22] *** pierre joined
[00:38] *** comborico left
[00:40] <MasterDuke> committable6: what do you mean access a program? load a script that's in a file?

[00:40] <committable6> MasterDuke, ¬¶what: ¬´Cannot find this revision (did you mean ‚ÄúEcht‚Äù?)¬ª

[00:40] <MasterDuke> heh. oops

[00:41] <MasterDuke> tab-complete fail, looks like comborico1611 is gone

[00:43] *** comborico1611 joined
[00:44] <AlexDaniel> MasterDuke: try again?

[00:50] <MasterDuke> comborico1611: what do you mean access a program? load a script that's in a file while you're in the repl?

[00:50] <timotimo> something like EVALFILE?

[00:52] <comborico1611> Masterduke, yes.

[00:53] *** kurahaupo__ left
[00:53] <MasterDuke> then timotimo++'s suggestion is what you want

[00:54] <comborico1611> Oh. I see now that it can be complicated.  Nevermind.  Thank you, though!

[00:56] <comborico1611> I was thinking it was a standard affair.

[01:01] <comborico1611> It's amazing how well my older computer does with this older version of kubuntu, compared to the newer versions.

[01:08] <comborico1611> I wonder why i had to use --no-check-certificate to download rakudo through bash.

[01:21] *** markong left
[01:31] *** ArilPliorine joined
[01:37] *** ArilPliorine left
[01:53] *** konsolebox left
[01:55] *** konsolebox joined
[02:03] *** comborico1611 left
[02:14] *** lelf left
[02:31] *** eroux left
[02:34] *** khw left
[02:44] *** khw joined
[02:45] *** ilbot3 left
[02:56] *** ilbot3 joined
[02:56] *** ChanServ sets mode: +v ilbot3

[02:59] *** cdg joined
[03:04] *** cdg left
[03:06] *** noganex left
[03:11] *** sharksoft left
[03:25] *** ufobat___ joined
[03:25] *** sharksoft joined
[03:28] *** ufobat_ left
[03:28] *** greppable6 left
[03:29] *** greppable6 joined
[03:35] *** sharksoft left
[03:40] *** cdg joined
[03:44] *** cdg left
[03:50] *** eliasr left
[04:03] *** wamba joined
[04:22] *** jeromelanteri joined
[04:29] *** pierre left
[04:36] *** kurahaupo_ joined
[04:37] *** kurahaupo_ is now known as kurahaupo

[04:38] *** kurahaupo left
[04:56] *** baby joined
[05:00] *** baby left
[05:00] *** Cabanossi left
[05:02] *** Cabanossi joined
[05:04] *** wamba left
[05:14] *** pierre joined
[05:16] *** sno left
[05:19] *** pierre left
[05:24] *** pierre joined
[05:27] *** pierre left
[05:27] *** pierre joined
[05:30] *** troys left
[05:35] *** skids left
[05:37] *** vike left
[05:48] *** curan joined
[05:54] *** vike joined
[05:55] *** xenotrope left
[05:57] *** xenotrope joined
[06:04] *** khw left
[06:04] *** cdg joined
[06:05] *** wamba joined
[06:06] *** sno joined
[06:09] *** cdg left
[06:12] *** wamba1 joined
[06:14] *** wamba left
[06:41] *** wamba1 left
[07:00] *** darutoko joined
[07:11] *** rindolf joined
[07:14] *** ufobat___ is now known as ufobat

[07:19] *** bwisti left
[07:24] *** wamba joined
[07:25] *** wamba left
[07:31] *** noganex joined
[07:33] *** wamba joined
[07:38] *** jeromelanteri left
[07:40] *** lowbro joined
[07:40] *** lowbro left
[07:40] *** lowbro joined
[07:51] *** domidumont joined
[07:56] *** domidumont left
[07:57] *** domidumont joined
[08:06] *** abraxxa joined
[08:40] <Geth> ¬¶ doc: 1de9e49efe | (JJ Merelo)++ | doc/Language/subscripts.pod6

[08:40] <Geth> ¬¶ doc: Slice examples expanded.

[08:40] <Geth> ¬¶ doc: 

[08:40] <Geth> ¬¶ doc: Added a bit of verbiage re-explaining the `*` concept as end-of-collection, and added an example that effectively extracts slices starting with the end of the array or counting from the end.

[08:40] <Geth> ¬¶ doc: 

[08:40] <synopsebot> Link: https://doc.perl6.org/language/subscripts

[08:40] <Geth> ¬¶ doc: Hope this closes #1782, if it does not, just let me know.

[08:40] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/1de9e49efe

[08:45] *** abraxxa left
[08:57] *** amalia___ joined
[08:58] *** Exodist left
[09:01] *** Exodist joined
[09:01] *** travis-ci joined
[09:01] <travis-ci> Doc build passed. JJ Merelo 'Slice examples expanded.

[09:01] <travis-ci> https://travis-ci.org/perl6/doc/builds/343267203 https://github.com/perl6/doc/compare/2940fb04e7ad...1de9e49efeb1

[09:01] *** travis-ci left
[09:03] *** abraxxa joined
[09:05] *** dakkar joined
[09:08] *** Exodist left
[09:11] *** Exodist joined
[09:18] *** Exodist left
[09:18] *** zakharyas joined
[09:19] *** gregf_ left
[09:20] *** zakharyas left
[09:21] *** zakharyas joined
[09:21] *** Exodist joined
[09:22] *** cdg joined
[09:24] *** cdg_ joined
[09:26] *** zakharyas left
[09:27] *** cdg left
[09:27] *** zakharyas joined
[09:27] *** abraxxa left
[09:28] *** cdg_ left
[09:32] *** pmurias joined
[09:36] *** zakharyas left
[09:39] *** gregf_ joined
[09:42] *** zakharyas joined
[09:45] *** abraxxa joined
[09:46] *** Kaiepi left
[09:51] *** daxim joined
[10:08] *** natrys joined
[10:14] *** zames2 joined
[10:29] *** dogbert2 left
[10:38] *** kurahaupo joined
[10:39] *** zames2 left
[10:48] *** zames2 joined
[10:48] *** markong joined
[11:06] *** s0me0ne-unkn0wn left
[11:06] *** zakharyas left
[11:08] *** aindilis left
[11:09] *** aindilis` joined
[11:19] *** pierre left
[11:27] *** aindilis` left
[11:28] *** zakharyas joined
[11:39] *** cdg joined
[11:44] *** cdg left
[11:46] *** Kaiepi joined
[12:05] *** zakharyas left
[12:08] *** zames2 left
[12:14] *** zakharyas joined
[12:14] *** parv joined
[12:27] *** natrys left
[12:31] *** sena_kun joined
[12:35] *** parvx joined
[12:36] *** zakharyas left
[12:37] *** parv left
[12:52] *** dogbert2 joined
[12:55] *** japanoise left
[12:55] *** japanoise joined
[12:58] *** pmurias left
[13:10] *** natrys joined
[13:14] *** pierre__ joined
[13:19] *** sharksoft joined
[13:27] *** vcv joined
[13:30] *** sharksoft left
[13:30] *** sharksoft joined
[13:37] *** eliasr joined
[13:37] *** wamba left
[13:48] *** vcv left
[13:53] *** pmurias joined
[13:58] *** domidumont1 joined
[13:58] *** domidumont left
[14:03] *** zames2 joined
[14:03] *** zames2 left
[14:04] *** zames2 joined
[14:04] *** natrys left
[14:06] *** zakharyas joined
[14:08] *** zakharyas left
[14:18] *** zakharyas joined
[14:21] *** troys joined
[14:22] *** curan left
[14:31] *** pierre__ left
[14:34] *** domidumont1 left
[14:35] *** domidumont joined
[14:35] *** parvx left
[14:35] *** zakharyas left
[14:41] *** zakharyas joined
[14:48] *** zakharyas left
[14:48] *** zakharyas joined
[14:50] *** pierre___ joined
[14:50] *** zakharyas left
[14:52] *** skids joined
[14:55] *** pierre___ left
[14:58] *** wamba joined
[15:00] *** wamba left
[15:05] *** zames2 left
[15:25] *** khw joined
[15:39] *** pierre___ joined
[15:42] *** zakharyas joined
[15:43] <moritz> PSA/ad of the day: "Perl 6 Fundamentals" is available as an ebook for USD 9.99 today: https://www.apress.com/us/book/9781484228982

[15:44] *** pierre___ left
[15:45] <moritz> (it's usually around USD 18 on amazon)

[15:46] <timotimo> alternatively, buy individual chapters for just 30 dollars each!

[15:48] <moritz> yes, a weird leftover from selling 200$+ academic books

[15:48] <timotimo> m)

[15:54] *** wamba joined
[15:55] *** Xliff joined
[15:57] *** Xliff__ left
[15:57] *** zacts left
[16:00] *** releasable6 left
[16:00] *** releasable6 joined
[16:04] *** zakharyas left
[16:05] <El_Che> moritz: can you tweet is (so it can be retweeted it)?

[16:05] *** aindilis joined
[16:07] <El_Che> lizmat: ^--- valid until tomorrow included it seems, dunno if useful for the weekly: https://www.apress.com/us/book/9781484228982

[16:07] <timotimo> El_Che: i think you could use our shiny new notable bot?

[16:13] *** natrys joined
[16:14] <Geth> ¬¶ perl6.org: 947c13dcd8 | (Zoffix Znet)++ (committed using GitHub Web editor) | source/downloads/index.html

[16:14] <Geth> ¬¶ perl6.org: Avoid disambiguation page for zef.

[16:14] <Geth> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/947c13dcd8

[16:15] <Geth> ¬¶ perl6.org: 22e795272e | (Zoffix Znet)++ (committed using GitHub Web editor) | includes/footer

[16:15] <Geth> ¬¶ perl6.org: Avoid zef disambiguation page

[16:15] <Geth> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/22e795272e

[16:19] *** buggable joined
[16:19] *** ChanServ sets mode: +v buggable

[16:20] *** huggable left
[16:20] *** buggable left
[16:20] *** ZofBot left
[16:20] *** buggable joined
[16:20] *** ChanServ sets mode: +v buggable

[16:20] *** huggable joined
[16:20] *** ChanServ sets mode: +v huggable

[16:21] *** ZofBot joined
[16:21] *** ChanServ sets mode: +v ZofBot

[16:24] *** athenot joined
[16:30] *** pharv joined
[16:39] *** wamba left
[16:39] *** lowbro left
[16:42] <moritz> El_Che: already retweeted from https://twitter.com/Dhabolt/status/965594633710514177

[16:43] <Geth> ¬¶ doc: 9f96ec655b | (Will "Coke" Coleda)++ | doc/Language/containers.pod6

[16:43] <Geth> ¬¶ doc: remove trailing whitespace

[16:43] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9f96ec655b

[16:43] <Geth> ¬¶ doc: c33b6b221a | (Will "Coke" Coleda)++ | 2 files

[16:43] <Geth> ¬¶ doc: learn new word, fix typo

[16:43] <synopsebot> Link: https://doc.perl6.org/language/containers

[16:43] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/c33b6b221a

[16:44] *** pharv left
[16:44] *** pierre joined
[16:46] *** pharv joined
[16:49] *** pierre left
[16:49] *** committable6 left
[16:49] *** unicodable6 left
[16:49] *** bisectable6 left
[16:49] *** quotable6 left
[16:49] *** shareable6 left
[16:49] *** evalable6 left
[16:49] *** reportable6 left
[16:49] *** benchable6 left
[16:49] *** releasable6 left
[16:49] *** nativecallable6 left
[16:49] *** statisfiable6 left
[16:49] *** greppable6 left
[16:49] *** coverable6 left
[16:49] *** notable6 left
[16:49] *** bloatable6 left
[16:49] *** squashable6 left
[16:50] *** pharv left
[16:50] *** pharv joined
[16:52] *** nativecallable6 joined
[16:52] *** releasable6 joined
[16:52] *** ChanServ sets mode: +v releasable6

[16:52] *** bisectable6 joined
[16:52] *** bloatable6 joined
[16:52] *** ChanServ sets mode: +v bloatable6

[16:52] *** quotable6 joined
[16:52] *** ChanServ sets mode: +v quotable6

[16:52] *** reportable6 joined
[16:52] *** committable6 joined
[16:52] *** coverable6 joined
[16:52] *** ChanServ sets mode: +v coverable6

[16:52] *** notable6 joined
[16:52] *** benchable6 joined
[16:53] *** evalable6 joined
[16:53] *** statisfiable6 joined
[16:53] *** ChanServ sets mode: +v statisfiable6

[16:53] *** unicodable6 joined
[16:53] *** ChanServ sets mode: +v unicodable6

[16:53] *** greppable6 joined
[16:53] *** squashable6 joined
[16:53] *** shareable6 joined
[16:56] *** wamba joined
[16:59] *** wamba left
[17:00] *** wamba1 joined
[17:00] *** wamba joined
[17:01] *** wamba left
[17:03] *** troys left
[17:07] *** troys joined
[17:08] *** wamba1 left
[17:12] *** wamba joined
[17:12] *** domidumont left
[17:13] *** bisectable6 left
[17:13] *** bisectable6 joined
[17:28] *** setty1 joined
[17:35] *** dakkar left
[17:42] *** domidumont joined
[17:45] <sharksoft> why is summing a range absurdly fast?

[17:45] <sharksoft> what does rakudo do that's fancy?

[17:45] <sharksoft> i.e. why does sum(0..1_000_000_000) returns basically instantly?

[17:47] <MasterDuke> sharksoft: Range's sum method knows that if it has integer bounds it can use the formula for the sum

[17:47] <ilmari> s: Range, 'sum'

[17:47] <sena_kun> sharksoft, I am not sure how exactly it's implemented internally, but I can guess it uses the formula, see e.g. http://mathcentral.uregina.ca/qq/database/qq.02.06/jo1.html

[17:47] <SourceBaby> ilmari, Sauce is at https://github.com/rakudo/rakudo/blob/f74890550/src/core/Range.pm#L663

[17:47] <sharksoft> oh that's awesome

[17:47] <sharksoft> thanks!

[17:48] *** lucasb joined
[17:51] <lucasb> would be interesting if the sum of arithmetic and geometric progressions could also be calculated with a formula

[17:51] <lucasb> like 2, 4, 6 ... 100

[17:51] <lucasb> 2, 4, 8, 16 ... 100

[17:52] <lucasb> but IDK if that's possible 

[17:58] *** bdmatatu joined
[18:00] <timotimo> should be

[18:00] <timotimo> lucasb: you mean the sum of those, right?

[18:00] *** pierre joined
[18:01] <timotimo> hm, actually, perhaps the infrastructure isn't in place yet?

[18:01] <timotimo> let's see

[18:02] <timotimo> m: my $thing = (2, 4, 8, 16 ... 128) but role { method sum { say "hi i'm your custom sum implementation"; 100_000 } }; say $thing.sum

[18:02] <camelia> rakudo-moar f74890550: OUTPUT: ¬´hi i'm your custom sum implementation‚ê§100000‚ê§¬ª

[18:02] <timotimo> s: &infix:<...>, \((2, 4, 8), 128)

[18:02] <SourceBaby> timotimo, Sauce is at https://github.com/rakudo/rakudo/blob/f74890550/src/core/operators.pm#L478

[18:03] *** Xliff left
[18:03] <timotimo> OK, so if that wants to give any custom sum impl, it'd have to communicate through Seq.new

[18:04] *** pharv left
[18:04] <timotimo> i mean, the knowledge must pass through the return value of .iterator and the constructor of Seq. or that sub could change

[18:04] <DrForr> o/

[18:04] *** pharv joined
[18:05] *** pierre left
[18:09] <lucasb> timotimo: yes, that's want I meant :)

[18:09] <lucasb> *what

[18:16] *** bart__ joined
[18:16] *** bart__ is now known as brrt

[18:20] <lucasb> I'm pasting 3 lines here (sorry), for explanation purposes:

[18:20] <lucasb> [+] 10, 20 ... 1_000_000        # sum of first N elements

[18:20] <lucasb> (10, 20 ... 1_000_000)[50_000]  # find Nth element

[18:20] <lucasb> +(10, 20 ... 1_000_000)         # how many elements?

[18:21] <lucasb> If I understand correctly, the result of the 3 operations above can be known by a mathematical formula, correct?

[18:22] <lucasb> but since it takes some time to answer, then I guess P6 is adding all those numbers

[18:23] <lucasb> this is for arithmetic progression/sequence, but there's also for geometric...

[18:23] <sharksoft> I (without having looked much at the source) think it's actually creating that sequence, then giving you the value

[18:24] <sharksoft> at least that's the only reason I can think of for why (10, 20 ... 1_000_000).elems would take that long

[18:24] <lucasb> sharksoft: I agree  :)

[18:25] *** brrt left
[18:28] <skids> I don't think anyone has written any optimizer code for such stuff yet.

[18:28] <skids> Might be a fun project.

[18:29] *** kurahaupo_ joined
[18:29] *** comborico1611 joined
[18:29] <sharksoft> I'm certainly interested in doing some more numerical work in P6...It's just so much nicer than Python/NumPy

[18:30] <sharksoft> may dig around a bit and see if I can help out

[18:30] *** Zoffix joined
[18:30] <timotimo> sadly we don't have much multi-dim array features in place :(

[18:30] <sharksoft> yeah I was hoping some of the PDL folks would be interested in porting some of that over

[18:31] *** Xliff joined
[18:31] <Zoffix> Maybe instead of communicating anything through Seq.new, we could add Iterator.sum-only, similar to how we have .count-only/.bool-only, and any Iterator that can compute the sum of the remaining elements (without exhausting the Seq) would return that value

[18:31] *** pharv left
[18:31] <Zoffix> And would clean up impl of [+], 'cause IIRC it just checks if the thing is a Range

[18:31] *** kurahaupo left
[18:32] *** kurahaupo_ is now known as kurahaupo

[18:32] <MasterDuke> Zoffix++ i like that idea

[18:32] *** pharv joined
[18:32] <sharksoft> +1

[18:32] <MasterDuke> now is .product-only going to far though...?

[18:33] *** domidumont left
[18:33] <Zoffix> Ah, [+] just rewrites the call to &sum'

[18:33] <skids> maybe a "reduce-only" that takes the metaop as an argument.

[18:34] <Zoffix> If you gonna give it an op to work with, is there any point for the opt in the first place?

[18:34] *** domidumont joined
[18:34] <skids> Only if you opt based on that op.

[18:34] <Zoffix> But you can't know what op it is.

[18:35] *** darutoko left
[18:36] <Zoffix> m: sub prefix:<[+]> { @_.join: '|' }; say [+] (1, 3 ... 11)

[18:36] <camelia> rakudo-moar f74890550: OUTPUT: ¬´1|3|5|7|9|11‚ê§¬ª

[18:36] <skids> I dunno how things are plumbed, but why couldn't you?

[18:36] <Zoffix> Because it could be a user op. IIRC we don't have any user-land markers for "is from core"

[18:37] * Zoffix looks at how static Optimizer got it implemented

[18:37] <skids> Yeah but you just slow path anything you don't have an implementation for.

[18:38] <skids> Just the point being, introducing a function name for every possible reduction seems a bit less firendly to expansion.

[18:39] <Zoffix> I don't follow. How would you "have an implemention for" anything, based on the op that's given you, if you don't know what that op does?

[18:39] <skids> i.e. you decide to do [+] and [*] then the next guy still has no hook to hang [**] on and has to go through adding that as well.

[18:39] <Zoffix> How would `.reduce-only` know what operation to perform, without iterating over the entire sequence and freeding each value through the op?

[18:39] <Zoffix> s/free/fee/

[18:40] <skids> I would assume the optimizer would look inside the [+], pull out the "infix:[+]" and you do "if $op === &infix:[=]" in reduce-only.

[18:41] <Zoffix> m: sub foo (\op) { dd op =:= &[+] }; foo &[+]; { sub infix:<+> {}; foo &[+] }

[18:41] <camelia> rakudo-moar f74890550: OUTPUT: ¬´Bool::True‚ê§Bool::False‚ê§¬ª

[18:41] <skids> erm &infix:<+>

[18:41] <Zoffix> OK. +1

[18:41] <Zoffix> Oh, crap.

[18:42] *** pharv left
[18:43] <skids> (We do also need to ensure we aren't trying to solve the halting problem too :-)

[18:43] <Zoffix> Well, maybe not crap. But my original idea was the user of the Iterator can just do `can` on the iterator, but now it'll need to `can` + check for some sentinel value from reduce-only that the handler was indeed found

[18:44] <Zoffix> .oO( nqp::can(iter, nqp::concat('reduce-&infix:<+>')) )

[18:44] <Zoffix> Is that too crazy? :)

[18:44] <skids> Unless reduce only tailcalls the normal codegen and so always returns code?

[18:45] <Zoffix> No idea what that means.

[18:45] <timotimo> m: multi sub do-it(&infix:<+>) { say "sum" }; multi sub do-it(&infix:<*>) { say "product" }; do-it &[+]; do-it &[*]; do-it &[**]

[18:45] <camelia> rakudo-moar f74890550: OUTPUT: ¬´Ambiguous call to 'do-it(Sub+{is-pure}+{Precedence})'; these signatures all match:‚ê§:(&infix:<+>)‚ê§:(&infix:<*>)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:45] <timotimo> m: multi sub do-it((&infix:<+>)) { say "sum" }; multi sub do-it((&infix:<*>)) { say "product" }; do-it &[+]; do-it &[*]; do-it &[**]

[18:45] <camelia> rakudo-moar f74890550: OUTPUT: ¬´Cannot unpack or Capture `sub infix:<+> (Mu $?, Mu $?) { #`(Sub+{is-pure}+{Precedence}|55052656) ... }`.‚ê§To create a Capture, add parentheses: \(...)‚ê§If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}‚ê§o‚Ä¶¬ª

[18:45] <timotimo> hm, would have to spell it out i guess?

[18:45] <Zoffix> I'm talking about a public method on Iterator. What [...] does is only a tiny part of where it'd be used.

[18:45] *** pharv joined
[18:46] <timotimo> m: multi sub do-it(&[+]) { say "sum" }; multi sub do-it(&[*]) { say "product" }; do-it &[+]; do-it &[*]; do-it &[**]

[18:46] <camelia> rakudo-moar f74890550: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Prefix + requires an argument, but no valid term found‚ê§at <tmp>:1‚ê§------> 3multi sub do-it(&[+7‚èè5]) { say "sum" }; multi sub do-it(&[*]) ‚ê§    expecting any of:‚ê§        prefix‚ê§¬ª

[18:46] <DrForr> Hrm, 'perl Configure.pl --gen-moar --prefix=...' seems not to generate MoarVM as promised. (first time on this box venturing away from rakudobrew...)

[18:47] <Zoffix> DrForr: did you specify --backends=moar?

[18:47] <Zoffix> huggable: sauce

[18:47] <huggable> Zoffix, Install latest version of Rakudo from source: https://github.com/zoffixznet/r#table-of-contents

[18:47] <timotimo> --gen-moar doesn't imply that? though i thought rakudo's configure only(?) has --gen-nqp

[18:47] <DrForr> No, but that wasn't mentioned on the download page.

[18:48] <DrForr> (not deliberately being dense, I just didn't think I would be playing the canary in the coalmine.)

[18:49] <Zoffix> DrForr: what are you running that command on? Rakudo Star download?

[18:49] <DrForr> 2018.01 downloaded directly from rakudo.perl6.org.

[18:49] <Zoffix> DrForr: Rakudo Star or Rakudo?

[18:49] <El_Che> DrForr: feel free to stick around in #perl6. This is a friendly community

[18:49] * El_Che ducks

[18:51] <DrForr> The exact steps on perl6.org/downloads/ - I was having a problem I thought might be relate to rakudobrew, so I finally decided to move away.

[18:51] <Zoffix> I get "Configuring and building MoarVM ..." as the first line of output with those steps

[18:52] *** pharv left
[18:53] <timotimo> if it already finds a moarvm, it won't build it for you because you already have one

[18:53] <DrForr> As do I. The problem, unsurprisingly, appears to be permissions on the /opt directory, but I'm unused to the configuration step actually changing stuff, which is causing my expectations to be violated.

[18:53] *** pharv joined
[18:54] <timotimo> Please be aware, that this will install MoarVM and NQP into your given --prefix before Configure.pl exits.

[18:54] <DrForr> I.E. I can tell after reading the scrollback what the problem is, but I didn't expect configuration to do more than just configure.

[18:54] <timotimo> ^- in the readme :)

[18:54] <sharksoft> I think I needed sudo to install into opt and got that same error without it

[18:54] <Zoffix> DrForr: fwiw, there's also this option, that is closer to using rakudobrew (as in, it's latest released compiler + zef rather than quarterly-released distro of compiler + zef + modules): https://github.com/zoffixznet/r#table-of-contents

[18:55] <DrForr> I understand that, I'm just stating that it seems to be violating my expectations.

[18:55] <El_Che> DrForr: that's a common complaint

[18:55] <AlexDaniel> El_Che: I'm not sure how I feel about your remarks :)

[18:55] <Zoffix> timotimo: your multi thing doesn't work 'cause `sub do-it(&infix:<+>)` is equivalent to `sub do it (Callable $) {}` with name set to &infix:<+>; it doesn't treat it as a literal to multi-dispatch with

[18:56] <timotimo> i know ;(

[18:56] <El_Che> AlexDaniel: I remember mst having a look at it some time ago

[18:57] <timotimo> aye, it's rather hairy because of the amounts of information that needs to flow from moar through nqp to rakudo

[18:57] <DrForr> sharksoft: Thanks, this by no means is my first rodeo. I'm just reporting what I feel is an install issue.

[18:57] <El_Che> as in "most people expect to be safe until the make install"

[18:58] <timotimo> yeah :(

[19:00] <DrForr> El_Che: Nod, that was pretty much my expectation. If I didn't suspect something and were someone just starting out with the software I might have been frustrated enough to give up at that point.

[19:01] <DrForr> That also means I need to do 'sudo make' to give the installer perms, and that feels wrong.

[19:01] <timotimo> it'd probably be a good idea to output a piece of disclaimer text before and after doing --gen-moar and such

[19:01] <El_Che> DrForr: use my pkgs :)

[19:02] <AlexDaniel> huggable: deb

[19:02] <huggable> AlexDaniel, CentOS, Debian, Fedora and Ubuntu Rakudo packages: https://github.com/nxadm/rakudo-pkg/releases

[19:02] <AlexDaniel> hmm

[19:02] <Zoffix> m: use MONKEY; augment class Seq { method sum { nqp::can($!iter, 'reduce-+') ?? nqp::callmethod($!iter, :name("reduce-+")) !! self.cache.sum } }; say [+] Seq.new(class :: does Iterator { method pull-one {}; method ::('reduce-+') { 42 } }.new); say [+] (1...10)

[19:02] <camelia> rakudo-moar f1b7cc4d9: OUTPUT: ¬´42‚ê§55‚ê§¬ª

[19:02] <El_Che> ah, it's outdated, also Alpine and OpenSUSE nowadays

[19:03] <DrForr> If Ubuntu packages are ready I'll keep that in mind for later. I just thought it was better to report my experiences.

[19:03] <AlexDaniel> huggable: deb is Alpine, CentOS, Debian, Fedora, OpenSUSE and Ubuntu Rakudo packages: https://github.com/nxadm/rakudo-pkg/releases

[19:03] <huggable> AlexDaniel, nothing found

[19:03] <AlexDaniel> huggable: deb :is: Alpine, CentOS, Debian, Fedora, OpenSUSE and Ubuntu Rakudo packages: https://github.com/nxadm/rakudo-pkg/releases

[19:03] <huggable> AlexDaniel, Added deb as Alpine, CentOS, Debian, Fedora, OpenSUSE and Ubuntu Rakudo packages: https://github.com/nxadm/rakudo-pkg/releases

[19:04] <El_Che> DrForr: I am joking. Of course compiling is fine for advanced users like you

[19:05] <DrForr> No offense taken. I"m just saying the principle of least surprise seems to be violated. At least for me, and it may be turning other potential users away.

[19:06] <AlexDaniel> if only we could get zef officially packaged for debian‚Ä¶

[19:06] <DrForr> And this should really be taking place on -dev, not here.

[19:06] <AlexDaniel> that would make rakudo so much more useful

[19:07] <Zoffix> m: use MONKEY; augment class Seq { method sum { nqp::can($!iter, &[+].WHICH) ?? nqp::callmethod($!iter, :name(&[+].WHICH)) !! self.cache.sum } }; say [+] Seq.new(class :: does Iterator { method pull-one {IterationEnd}; method ::(BEGIN &[+].WHICH) { 42 } }.new); say [+] (1...10)

[19:07] <camelia> rakudo-moar f1b7cc4d9: OUTPUT: ¬´42‚ê§55‚ê§¬ª

[19:07] <El_Che> AlexDaniel: does zef break one of Debian's expectations? (reproducible builds?)

[19:07] <Zoffix> hehe, this is awesome.

[19:07] *** pharv left
[19:07] *** pharv joined
[19:08] *** Zoffix left
[19:08] <AlexDaniel> El_Che: I don't know, maybe talk to @dod38fr about that

[19:08] <El_Che> AlexDaniel: thx

[19:08] <AlexDaniel> El_Che: according to https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=867237#10 he plans to package modules and not zef, but I don't know the reasoning

[19:09] <AlexDaniel> .seen dod

[19:09] <yoleaux> I haven't seen dod around.

[19:09] <El_Che> Well, there is a workaround for that like perl5 does: include zef (or a variant) in the core distro?

[19:10] <AlexDaniel> core distro?

[19:10] <El_Che> like cpan is part of perl5

[19:10] <El_Che> zef/$some-installer could be part of rakudo

[19:11] <El_Che> so you get out of the box the possibility to install modules

[19:11] *** Exodist left
[19:11] <El_Che> even if better alternatives (e.g. cpanm) exist

[19:12] <El_Che> $ dpkg -S /usr/bin/cpan -> perl: /usr/bin/cpan

[19:12] *** Exodist joined
[19:13] <El_Che> as "go get" is part of golang, and so on

[19:14] <El_Che> (this is probably more applicable to #rakudo than to #perl6, but you get what I mean)

[19:17] <DrForr> And at this point the 'Stage parse' is definitely stuck. Package ahoy.

[19:17] <El_Che> DrForr: it's probably not stuck, it's takes some time

[19:18] <DrForr> Hrm. I'll nuke and retry, but I do have to get stuff done...

[19:18] <El_Che> DrForr: are you sure it's stuck?

[19:19] <DrForr> Probably was runing for ~10min, quite a bit longer than rakudobrew takes.

[19:20] <DrForr> Not that I'm criticising. I'll restart and head out to get some shopping done.

[19:20] <El_Che> DrForr: yes, a pkg with a docker build (installing all deps en build-essential) takes less on travis, so yes, it sounds stuck

[19:21] *** Xliff left
[19:21] *** espadrine_ joined
[19:21] <DrForr> Back in a few, need to snarf food.

[19:34] <DrForr> Thanks for the confirmation :/

[19:38] <DrForr> package is far far too out-of-date.. 2014.07-4.

[19:40] *** perlbot left
[19:41] *** simcop2387 left
[19:42] *** simcop2387 joined
[19:43] <mspo> I need to learn how to make .debs

[19:44] *** perlbot joined
[19:44] <El_Che> mspo: I use fpm for that

[19:44] <mspo> El_Che: I'd prefer to do things properly

[19:45] <El_Che> mspo: properly is a relative term :)

[19:45] <mspo> well I prefer to not do it at all, but otherwise..

[19:45] <El_Che> mspo: fpm is fine for self contained stuff

[19:46] *** espadrine joined
[19:47] *** sno left
[19:49] *** domidumont left
[19:50] *** espadrine_ left
[19:52] <DrForr> And now I grab the latest Ubuntu in order to actually install docker, as apparently the current VM is stuck between versions that let Docker work.

[19:54] <El_Che> DrForr: I use docker on my home server (Ubuntu 16.04) and at work we use Centos 7 for Docker

[19:54] <El_Che> DrForr: both work fine

[19:54] <El_Che> (I also use docker on Ubuntu 17.10 (laptop) and the latest macos: all without problem)

[19:55] <DrForr> Couldn't download the package on whatever version the current VM uses. No worries; I'm understanding more of the user experience new users have, and empathize deeper.

[19:56] *** espadrine left
[19:56] *** [particle] left
[19:57] <DrForr> 'sokay, moving out of X back to CLI and port-forwarding seems a better way to deal with VirtualBox anyway.

[19:58] <El_Che> DrForr: you know that Docker runs fine on Win10, right?

[19:59] <DrForr> I'm sure it does; I don't need to start learning a new system an hour before bedtime though...

[20:00] <El_Che> DrForr: nothing new. Just install it, and run the regular docker commands in a shell

[20:01] <b2gills> I prefer `reduce:op[ &[+].WHICH ]` over `&[+].WHICH`

[20:01] <b2gills> m: use MONKEY; augment class Seq { method sum { nqp::can($!iter, BEGIN "reduce:op<{&[+].WHICH}>") ?? nqp::callmethod($!iter, :name(BEGIN "reduce:op<{&[+].WHICH}>")) !! self.cache.sum } }; say [+] Seq.new(class :: does Iterator { method pull-one {IterationEnd}; method reduce:op[BEGIN &[+].WHICH] { 42 } }.new); say [+] (1...10)

[20:01] <camelia> rakudo-moar f1b7cc4d9: OUTPUT: ¬´42‚ê§55‚ê§¬ª

[20:01] <DrForr> I'm sure; I just prefer to have a UNIX backdrop available.

[20:01] <El_Che> DrForr: you l33t haxor

[20:05] *** espadrine joined
[20:05] <DrForr> I was a touch surprised when the best name Ernest could come up with for a darknet trade site was "1337 Haxor Warezhouse"... at that point things started to fall apart for me in the book. (Ready Player One)

[20:12] *** dct_ joined
[20:18] *** brrt joined
[20:27] *** bFn joined
[20:30] *** jimav joined
[20:30] *** bFn left
[20:30] <buggable> New CPAN upload: Font-FreeType-0.0.6.tar.gz by WARRINGD https://cpan.metacpan.org/authors/id/W/WA/WARRINGD/Perl6/Font-FreeType-0.0.6.tar.gz

[20:30] <jimav> Hi, Is there a way to see arguments in a backtrace (like in perl5)?

[20:31] *** bFn joined
[20:31] <jimav> sub func($y, $z) { die "bug in a" }; func(22,33);  ... just says func was called without shoing the args (22,33)

[20:33] *** Xliff joined
[20:36] <[Coke]> You can theoretically get more information with perl6 --ll-exception (but not that)

[20:37] <jimav> How can that be enabled from inside the script (e.g. with "use...something")?

[20:37] *** Xliff left
[20:38] <Voldenet> ugh, perl doesn't do that by default, does it?

[20:38] <Voldenet> I believe Carp does print arguments

[20:38] <[Coke]> jimav: can't, as far as I know

[20:39] <[Coke]> I think we'd not want it on by default to avoid logging things that should be confidential

[20:39] <[Coke]> (even if we did do it - log arguments, I mean)

[20:40] <MasterDuke> the arguments are included in some error messages

[20:40] *** Xliff joined
[20:41] <MasterDuke> m: say "abc".Num

[20:41] <camelia> rakudo-moar f1b7cc4d9: OUTPUT: ¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5abc' (indicated by ‚èè)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:41] <Voldenet> jimav: you could write a /debugging/ wrapper though :D

[20:42] <Voldenet> m: sub func($y, $z) { die "bug in a" }; sub d(&code) { return -> |c { CATCH { |c.say }; &code(|c); } }; d(&func)(22,33);

[20:42] <camelia> rakudo-moar f1b7cc4d9: OUTPUT: ¬´\(22, 33)‚ê§bug in a‚ê§  in sub func at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:42] <Voldenet> I bet it could be prettier

[20:43] <Voldenet> Can perl6 decorate its functions, like python?

[20:45] <jimav> Voldenet: That's pretty inconvenient.  What if the args you need to see to debug something come from level 42 in a 57-level call?

[20:46] <jimav> Let me restate that: That wrapper better than just putting in print statements (doesn't pollute output until something croaks)

[20:47] *** dct_ left
[20:48] <jimav> Voldemort: ...but still requires modifying source code and re-creating the crash exactly the same way

[20:49] <jimav> I would like a way to just enable seeing args on every crash backtrace (at the top of the main unit of a particular script)

[20:49] *** Xliff_ joined
[20:49] <Voldenet> ugh, yeah, it's pretty inconvenient like that, I wonder if it's doable

[20:50] *** Xliff left
[20:51] <jimav> Does anyone know what perl6 --ll-exception does internally, and whether that (whatever it is) can be done within a script?

[20:51] <Voldenet> m: multi sub trait_mod:<is>(Routine $r, :$debugged) { $r.wrap( -> |c { CATCH { c.say }; callsame; }) }; sub func ($y, $z) is debugged { die "bug in a" }; func(22,33);

[20:51] <camelia> rakudo-moar f1b7cc4d9: OUTPUT: ¬´\(22, 33)‚ê§bug in a‚ê§  in sub func at <tmp> line 1‚ê§  in block  at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:51] <Voldenet> okay, this is a bit more convenient

[20:51] <Voldenet> you can just append "is debugged" to the method

[20:51] *** Xliff joined
[20:54] <MasterDuke> --ll-exception mostly just doesn't truncate the backtrace at where user code stops (as i understand it)

[20:55] *** Xliff_ left
[20:55] *** Xliff left
[20:56] *** Alikzus joined
[20:57] <moritz> --ll-exception doesn't do any kind of filtering

[20:57] <jimav> MasterDuke: Yea, I just tried it and args are not shown

[20:58] <jimav> Voldenet: Can I add traits to an already-defined sub?  Then I could use your idea without having to modify the source code of the subs of interest

[21:00] *** Xliff joined
[21:07] <comborico1611> Who's ready for a newb question?

[21:10] *** sno joined
[21:10] *** Xliff left
[21:13] *** amalia___ left
[21:15] *** Xliff joined
[21:24] <Voldenet> jimav: I'm not sure, I've just learned that it can be done with traits, so I'm not an expert :P

[21:28] <jimav> Voldenet: Ok, thanks.  I tried various constructs with "augment" but that seems to only work for Classes.

[21:28] <jimav> I've got to go.  Cheers.

[21:28] *** jimav left
[21:29] <[Coke]> comborico1611: just go ahead and ask it.

[21:30] <comborico1611> When you are working with an editor that has autocomplete, are you suppose to just type the closing parens or quotes along with what is already there?  I undersatnd it will replace the autocomplete, but it seems like what's the point?  Why not just not have autocomplete, or am I doing something wrong?

[21:31] <[Coke]> ok, that I cannot help with. :)

[21:32] <comborico1611> Heh.  Autocomplete with parens and quotes seems stupid.

[21:34] <sena_kun> comborico1611, well, the thing is that editor cannot(or, well, doesn't do that properly, at least) "guess" where you want to stop type your arguments to move further. But I still think it's a nice feature, because you have less chances to forgot to close some )))))) in the end.

[21:34] <sena_kun> just an opinion, of course

[21:34] <comborico1611> sena_kun:  I see.

[21:36] <comborico1611> I don't see it hurting, as long as I get use to it.  At the moment, I find it distracting -- I add spaces often.  Example ( stuff here ).

[21:37] <comborico1611> And ( "string" ) is weird because I'm adding spaces next to existing characters.

[21:37] <comborico1611> Thanks for the feedback, though!

[21:37] *** natrys left
[21:37] <Voldenet> autocompleting parens and brackets is a bit annoying

[21:38] <sena_kun> comborico1611, I hope you still can disable autocomplete if you control your text editor. :)

[21:38] *** eserte left
[21:39] <comborico1611> sena_kun:  I'm currently experimenting with a new one (Atom).  I typically use Emacs, but I'm getting frustrated by the complexity.

[21:47] *** Xliff left
[21:47] *** Xliff joined
[21:47] *** wamba left
[21:48] *** bdmatatu left
[21:48] *** comborico1611 left
[21:50] *** brrt left
[22:01] *** epony left
[22:04] *** skids left
[22:12] *** setty1 left
[22:15] *** aindilis left
[22:31] *** comborico1611 joined
[22:31] *** athenot left
[22:51] *** bFn left
[22:53] *** pmurias left
[23:06] *** bFn joined
[23:11] *** sena_kun left
[23:17] <Xliff> If I create an action class for a grammar, will that grammar act on rules, even if those rules are defined in another module?

[23:18] <Xliff> s/that grammar/that action class/

[23:29] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/02/19/2018-08-perl-6ya-giris/

[23:34] <comborico1611> Yay!

[23:35] <TimToady> Xliff: as long as any rules or actions of a given name can be found by ISA relationship, sure

[23:42] <comborico1611> So I was pondering this week about learning Common Lisp.  It was like pulling teeth to get the guys over on the lisp channel to write me up a sample request program.  I can see why now.  It took forever. I took it for granted that it was short in Perl6.

[23:45] <MasterDuke> i looked a little bit a common lisp, but didn't really like it (couldn't really say why exactly), but really like racket (formerly known as PL Scheme)

[23:46] *** skids joined
[23:47] <comborico1611> MasterDuke: Want to see a comparison of the two for a program that converts seconds into years months days hours mins seconds?

[23:50] <MasterDuke> sure

[23:52] <comborico1611> MasterDuke: https://gist.github.com/COMBORICO/7c44386158cb27569c138ad482761b30

[23:55] <MasterDuke> so many lines

[23:56] <comborico1611> It is quite strange.

[23:56] <MasterDuke> fwiw, polymod could be used for an alternate perl 6 version. https://docs.perl6.org/routine/polymod

[23:57] <comborico1611> Hmm.  Thank you!

[23:58] <lucasb> comborico1611: how the forth CL version works? the function evaluates perl syntax given as s-expressions?

