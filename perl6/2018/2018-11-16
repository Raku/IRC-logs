[00:02] *** w_richard_w left
[00:07] *** lizmat joined
[00:07] *** p6bannerbot sets mode: +v lizmat

[00:10] *** Sound left
[00:11] *** random_yanek left
[00:16] *** kurahaupo left
[00:16] *** kurahaupo joined
[00:16] *** kurahaupo left
[00:17] *** kurahaupo joined
[00:17] *** p6bannerbot sets mode: +v kurahaupo

[00:18] *** albongo left
[00:20] *** ryn1x joined
[00:21] *** p6bannerbot sets mode: +v ryn1x

[00:24] *** albongo joined
[00:24] *** p6bannerbot sets mode: +v albongo

[00:33] *** lizmat left
[00:36] *** ryn1x left
[00:37] *** lizmat joined
[00:37] *** p6bannerbot sets mode: +v lizmat

[00:50] *** cydf left
[01:07] *** random_yanek joined
[01:08] *** p6bannerbot sets mode: +v random_yanek

[02:08] *** notable6 left
[02:08] *** benchable6 left
[02:08] *** bloatable6 left
[02:08] *** squashable6 left
[02:08] *** nativecallable6 left
[02:08] *** quotable6 left
[02:08] *** releasable6 left
[02:08] *** statisfiable6 left
[02:08] *** reportable6 left
[02:08] *** committable6 left
[02:08] *** undersightable6 left
[02:08] *** bisectable6 left
[02:08] *** evalable6 left
[02:08] *** greppable6 left
[02:08] *** shareable6 left
[02:08] *** coverable6 left
[02:08] *** unicodable6 left
[02:08] *** nativecallable6 joined
[02:08] *** ChanServ sets mode: +v nativecallable6

[02:08] *** bloatable6 joined
[02:08] *** quotable6 joined
[02:08] *** ChanServ sets mode: +v quotable6

[02:08] *** evalable6 joined
[02:08] *** ChanServ sets mode: +v evalable6

[02:08] *** notable6 joined
[02:08] *** ChanServ sets mode: +v notable6

[02:08] *** coverable6 joined
[02:08] *** ChanServ sets mode: +v coverable6

[02:08] *** greppable6 joined
[02:08] *** ChanServ sets mode: +v greppable6

[02:08] *** unicodable6 joined
[02:08] *** bisectable6 joined
[02:08] *** committable6 joined
[02:08] *** ChanServ sets mode: +v committable6

[02:08] *** benchable6 joined
[02:08] *** ChanServ sets mode: +v benchable6

[02:08] *** reportable6 joined
[02:08] *** releasable6 joined
[02:08] *** ChanServ sets mode: +v reportable6

[02:08] *** ChanServ sets mode: +v releasable6

[02:08] *** undersightable6 joined
[02:08] *** shareable6 joined
[02:08] *** shareable6 left
[02:08] *** undersightable6 left
[02:08] *** unicodable6 left
[02:08] *** bisectable6 left
[02:08] *** bloatable6 left
[02:09] *** p6bannerbot sets mode: +v nativecallable6

[02:09] *** p6bannerbot sets mode: +v quotable6

[02:09] *** p6bannerbot left
[02:09] *** p6bannerbot joined
[02:09] *** ChanServ sets mode: +o p6bannerbot

[02:13] *** lizmat left
[02:37] *** lizmat joined
[02:37] *** p6bannerbot sets mode: +v lizmat

[02:52] *** mattp_ left
[03:01] *** mattp_ joined
[03:02] *** p6bannerbot sets mode: +v mattp_

[03:09] *** bisectable6 joined
[03:09] *** unicodable6 joined
[03:09] *** bloatable6 joined
[03:09] *** p6bannerbot sets mode: +v bisectable6

[03:09] *** p6bannerbot sets mode: +v unicodable6

[03:10] *** p6bannerbot sets mode: +v bloatable6

[03:11] *** undersightable6 joined
[03:11] *** p6bannerbot sets mode: +v undersightable6

[03:11] *** ufobat_ joined
[03:12] *** p6bannerbot sets mode: +v ufobat_

[03:15] *** ufobat___ left
[03:18] *** leont left
[03:20] *** MasterDuke left
[03:22] *** w_richard_w joined
[03:23] *** p6bannerbot sets mode: +v w_richard_w

[03:23] *** w_richard_w left
[03:24] *** w_richard_w joined
[03:24] *** p6bannerbot sets mode: +v w_richard_w

[03:38] *** khisanth_ left
[03:58] *** aindilis left
[04:00] *** aindilis joined
[04:01] *** p6bannerbot sets mode: +v aindilis

[04:01] *** khisanth_ joined
[04:02] *** p6bannerbot sets mode: +v khisanth_

[04:06] *** w_richard_w left
[04:08] *** kurahaupo_ joined
[04:09] *** p6bannerbot sets mode: +v kurahaupo_

[04:10] *** kurahaupo left
[04:26] *** avar left
[04:26] *** Bucciarati left
[04:42] *** molaf joined
[04:43] *** p6bannerbot sets mode: +v molaf

[04:52] *** El_Che left
[04:52] *** Bucciarati joined
[04:52] *** avar joined
[04:52] *** avar left
[04:52] *** avar joined
[04:52] *** p6bannerbot sets mode: +v avar

[04:53] *** warriors joined
[04:53] *** p6bannerbot sets mode: +v warriors

[04:53] *** p6bannerbot sets mode: +v Bucciarati

[04:53] *** p6bannerbot sets mode: +v avar

[04:55] *** kurahaupo_ left
[04:56] *** kurahaupo joined
[04:56] *** molaf left
[04:56] *** p6bannerbot sets mode: +v kurahaupo

[05:17] *** Bucciarati left
[05:18] *** kdr21 joined
[05:19] *** p6bannerbot sets mode: +v kdr21

[05:19] *** Bucciarati joined
[05:20] *** p6bannerbot sets mode: +v Bucciarati

[05:21] *** kdr2 left
[05:53] *** curan joined
[05:53] *** p6bannerbot sets mode: +v curan

[05:55] *** Sgeo joined
[05:56] *** p6bannerbot sets mode: +v Sgeo

[05:56] *** Sgeo_ left
[05:59] *** Xliff left
[06:13] *** statisfiable6 joined
[06:14] *** p6bannerbot sets mode: +v statisfiable6

[06:14] *** jmerelo joined
[06:15] *** p6bannerbot sets mode: +v jmerelo

[06:15] <jmerelo> Just a reminder that we *need* articles for the Perl 6 advent Calendar: https://github.com/perl6/mu/blob/master/misc/perl6advent-2018/schedule

[06:16] <jmerelo> The schedule is virtually empty. So really, really, please, think about some topic and request one day https://github.com/perl6/mu/blob/master/misc/perl6advent-2018/schedule

[06:24] *** sauvin joined
[06:24] *** p6bannerbot sets mode: +v sauvin

[06:29] <holyghost> .tell Xliff I would like to have public_html in my home dir working (e.g. /etc/httpd.rc)

[06:29] <yoleaux> holyghost: I'll pass your message to Xliff.

[06:34] <holyghost> .tell Xliff Then you should point to the $HOME local directories in and html file (index.html) with "serverip/~holyghost" in /var/www/index.tml instead of the default apache page

[06:34] <yoleaux> holyghost: I'll pass your message to Xliff.

[06:37] <holyghost> .tell Xliff If you like, I'll give you a nice index.html file with CSS and everything, so we have a nice main website 

[06:37] <yoleaux> holyghost: I'll pass your message to Xliff.

[06:58] *** kudzo_ left
[07:01] <holyghost> .tell Xliff they should find me on the main website with e.g. in html <a href="/~holyghost/">The Holy Ghost software</a> IIRC 

[07:01] <yoleaux> holyghost: I'll pass your message to Xliff.

[07:15] *** dct joined
[07:15] *** p6bannerbot sets mode: +v dct

[07:18] *** domidumont joined
[07:19] *** p6bannerbot sets mode: +v domidumont

[07:28] *** ZzZombo left
[07:36] *** jmerelo left
[07:50] <Geth> ¬¶ mu: b745ffb483 | (Naoum Hankache)++ (committed using GitHub Web editor) | misc/perl6advent-2018/schedule

[07:50] <Geth> ¬¶ mu: Update schedule

[07:50] <Geth> ¬¶ mu: review: https://github.com/perl6/mu/commit/b745ffb483

[07:58] *** Bucciarati left
[07:58] *** Bucciarati joined
[07:59] *** p6bannerbot sets mode: +v Bucciarati

[08:05] *** Actualey` joined
[08:05] *** p6bannerbot sets mode: +v Actualey`

[08:06] *** Actualeyes left
[08:19] *** warriors left
[08:36] *** agentzh left
[08:37] *** El_Che joined
[08:38] *** p6bannerbot sets mode: +v El_Che

[08:42] <El_Che> That +r freenode thingie is crap. Oh well, my irssi config is 2 channels less

[09:04] <masak> El_Che: is the +r thingie what keeps the spam bots at bay. why is it crap?

[09:04] <masak> s/\./?/

[09:05] *** Actualey` left
[09:14] *** zakharyas joined
[09:14] *** rindolf joined
[09:15] *** p6bannerbot sets mode: +v zakharyas

[09:15] *** p6bannerbot sets mode: +v rindolf

[09:26] <El_Che> because I can't log in

[09:26] <El_Che> coffee time

[09:27] <Altreus> Is there a perl6y way of removing one array of items from another in some magically efficient manner?

[09:31] <moritz> splice

[09:34] *** cydf joined
[09:35] *** p6bannerbot sets mode: +v cydf

[09:44] <Altreus> this appears to remove a range rather than a subset

[09:45] <Altreus> @array.remove(@subset)

[09:45] <Altreus> something like this but that actually exists

[09:46] <moritz> if you want to remove several indexes, it's usually more efficient to keep the others

[09:46] <moritz> @array = @array[@indexes_to_keep]

[09:47] <moritz> my \indexes_to_remove = set(@indexes_to_remove); my @indexes_to_keep = @array.keys.grep(none(indexes_to_remove))

[09:48] *** agentzh joined
[09:48] *** agentzh left
[09:48] *** agentzh joined
[09:48] *** p6bannerbot sets mode: +v agentzh

[09:49] *** p6bannerbot sets mode: +v agentzh

[09:50] *** dogbert11 joined
[09:51] *** p6bannerbot sets mode: +v dogbert11

[09:51] *** reppie joined
[09:51] *** odyniec__ joined
[09:52] *** SCHAPiE left
[09:52] *** p6bannerbot sets mode: +v reppie

[09:52] *** p6bannerbot sets mode: +v odyniec__

[09:53] *** timeless left
[09:53] *** odyniec left
[09:53] <Altreus> OK so basically, figure out which indices they are and invert that set

[09:53] <Altreus> cool :)

[09:53] *** dogbert17 left
[09:53] *** x[LGWs4x4i]uG2N0 left
[09:55] *** reppie is now known as x[LGWs4x4i]uG2N0

[09:55] *** timeless joined
[09:55] *** p6bannerbot sets mode: +v timeless

[09:56] <Geth> ¬¶ mu: 9a5485e3bf | (Ramiro Encinas)++ (committed using GitHub Web editor) | misc/perl6advent-2018/schedule

[09:56] <Geth> ¬¶ mu: Update schedule

[09:56] <Geth> ¬¶ mu: review: https://github.com/perl6/mu/commit/9a5485e3bf

[09:59] *** SCHAPiE joined
[09:59] *** p6bannerbot sets mode: +v SCHAPiE

[10:03] *** nwellnhof joined
[10:03] *** p6bannerbot sets mode: +v nwellnhof

[10:03] <nwellnhof> p6: say (1,2,3; 4,5,6; 7,8,9)[{0,1}]

[10:03] <camelia> rakudo-moar f7007ac0e: OUTPUT: ¬´((1 2 3) (4 5 6))‚ê§¬ª

[10:03] <nwellnhof> p6: say (1,2,3; 4,5,6; 7,8,9)[*;0,1]

[10:03] <camelia> rakudo-moar f7007ac0e: OUTPUT: ¬´(1 2 4 5 7 8)‚ê§¬ª

[10:03] <nwellnhof> p6: say (1,2,3; 4,5,6; 7,8,9)[*;{0,1}]

[10:03] <camelia> rakudo-moar f7007ac0e: OUTPUT: ¬´(3 6 9)‚ê§¬ª

[10:04] <nwellnhof> The last result seems like a bug.

[10:13] <jnthn> m: say {0,1}.elems # This will be numified, I think? So it's like [*;2]

[10:13] <camelia> rakudo-moar f7007ac0e: OUTPUT: ¬´1‚ê§¬ª

[10:14] <jnthn> Oh...it won't 'cus it's a code object

[10:14] <jnthn> It will be passed the target, and then return a list, which will probably then be numified

[10:15] <jnthn> Though I see in the first case we re-dispatch on what the thing returns. Hmm.

[10:15] <jnthn> Yeah, it should be consistent one way or the other.

[10:16] *** sena_kun joined
[10:17] <jnthn> I'd suggest to file an issue.

[10:17] <jnthn> Or patch :)

[10:17] *** p6bannerbot sets mode: +v sena_kun

[10:26] *** Xliff joined
[10:27] *** p6bannerbot sets mode: +v Xliff

[10:27] <Xliff> Anyone awake?

[10:27] <yoleaux> 06:29Z <holyghost> Xliff: I would like to have public_html in my home dir working (e.g. /etc/httpd.rc)

[10:27] <yoleaux> 06:34Z <holyghost> Xliff: Then you should point to the $HOME local directories in and html file (index.html) with "serverip/~holyghost" in /var/www/index.tml instead of the default apache page

[10:27] <yoleaux> 06:37Z <holyghost> Xliff: If you like, I'll give you a nice index.html file with CSS and everything, so we have a nice main website

[10:27] <yoleaux> 07:01Z <holyghost> Xliff: they should find me on the main website with e.g. in html <a href="/~holyghost/">The Holy Ghost software</a> IIRC

[10:27] <Geth> ¬¶ mu: 3c0b3cb9c0 | Altai-man++ (committed using GitHub Web editor) | misc/perl6advent-2018/schedule

[10:27] <Geth> ¬¶ mu: Update schedule

[10:27] <Geth> ¬¶ mu: review: https://github.com/perl6/mu/commit/3c0b3cb9c0

[10:28] <Xliff> .tell holyghost Sorry. This is a git server. I am using it to serve HTTP. If you want that, please get a webhost

[10:28] <yoleaux> Xliff: I'll pass your message to holyghost.

[10:29] <holyghost> Xliff: ok

[10:29] <yoleaux> 10:28Z <Xliff> holyghost: Sorry. This is a git server. I am using it to serve HTTP. If you want that, please get a webhost

[10:30] <holyghost> Xliff: I'll publish in priv git then

[10:30] <Xliff> Yes. Please do.

[10:31] <holyghost> I have to make a script to update my files

[10:32] <holyghost> Anyone, can git be used locally with an ip just as cvs ?

[10:33] <Xliff> Yes. It can. I am out, now. Just priv me if you have questions. 

[10:33] <Xliff> Please... not too many though. It's been a day.

[10:33] <holyghost> ok, take care

[10:51] <Geth> ¬¶ mu: c1607089d0 | (Nigel Hamilton)++ (committed using GitHub Web editor) | misc/perl6advent-2018/schedule

[10:51] <Geth> ¬¶ mu: Provide another topic

[10:51] <Geth> ¬¶ mu: review: https://github.com/perl6/mu/commit/c1607089d0

[10:55] *** nige joined
[10:56] *** p6bannerbot sets mode: +v nige

[10:57] <nige> could someone please point me to the github ticket that we are waiting on Larry to weigh in on - regarding raku?

[11:02] <lizmat> I assume you mean https://github.com/perl6/user-experience/issues/31 ?

[11:03] *** nwellnhof left
[11:10] <nige> thanks lizmat - yes I think that's the one

[11:11] *** titsuki joined
[11:12] *** p6bannerbot sets mode: +v titsuki

[11:13] <Xliff> \o  lizmat and nige

[11:44] *** scimon joined
[11:45] *** p6bannerbot sets mode: +v scimon

[11:51] *** kdr21 left
[11:57] *** molaf joined
[11:58] *** p6bannerbot sets mode: +v molaf

[12:01] *** angelds joined
[12:02] *** p6bannerbot sets mode: +v angelds

[12:07] <buggable> New CPAN upload: Object-Delayed-0.0.4.tar.gz by ELIZABETH http://modules.perl6.org/dist/Object::Delayed:cpan:ELIZABETH

[12:10] *** koto joined
[12:11] *** p6bannerbot sets mode: +v koto

[12:12] *** pecastro joined
[12:13] *** sena_kun left
[12:13] *** p6bannerbot sets mode: +v pecastro

[12:18] *** kdr21 joined
[12:19] *** p6bannerbot sets mode: +v kdr21

[12:21] *** zakame joined
[12:21] *** p6bannerbot sets mode: +v zakame

[12:23] *** zakharyas left
[12:36] *** sno left
[12:38] *** zakame_ joined
[12:38] *** p6bannerbot sets mode: +v zakame_

[12:38] <lizmat> hmmm.... so *where* do we document "start { }" ? 

[12:39] <lizmat> somewhere hidden in the Promise.start docs: This is considered to be such a commonly required pattern that it is also provided as a keyword:

[12:40] *** zakame left
[12:41] <masak> we don't have a list of statement prefixes somewhere?

[12:41] <masak> I saw we have a list of phasers, but this is slightly different

[12:42] <masak> `once` is documented under "Control flow" -- this feels similar

[12:42] <lizmat> ok, I'll add it there

[12:43] <Geth> ¬¶ doc: a7845c0085 | (Elizabeth Mattijsen)++ | doc/Language/concurrency.pod6

[12:43] <Geth> ¬¶ doc: Add mention that only one whenever block runs at a time

[12:43] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/a7845c0085

[12:43] <synopsebot> Link: https://doc.perl6.org/language/concurrency

[12:47] *** angelds left
[12:47] *** lizmat left
[12:48] <ufobat_> !seen sena-kun

[12:49] *** lizmat joined
[12:49] *** p6bannerbot sets mode: +v lizmat

[12:51] *** jcallen left
[12:51] *** jcallen joined
[12:51] *** p6bannerbot sets mode: +v jcallen

[12:58] <timotimo> .seen sena_kun

[12:58] <yoleaux> I saw sena_kun 14 Nov 2018 19:31Z in #perl6: <sena_kun> pmurias, I hope so. Numbers of FF users are decreasing every year, which is sad to see. But, well, disregard that, if you ask me, I'd +1 on polyfill usage.

[12:59] <koto> timotimo, I'm here.

[12:59] *** koto is now known as sena_kun

[12:59] <sena_kun> ufobat_, cro bugs, yes?

[13:00] <ufobat_> openapi::model issues :D

[13:01] <sena_kun> there are ones I know to exist, yes... let's move to #cro if you don't mind and I'm ready to look into things.

[13:03] <ufobat_> aye

[13:06] *** jmerelo joined
[13:07] *** p6bannerbot sets mode: +v jmerelo

[13:11] *** leont joined
[13:11] <timotimo> m: say term:<now>()

[13:11] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´Instant:1542373945.973841‚ê§¬ª

[13:11] <timotimo> m: say term:<now>(:test)

[13:11] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´Unexpected named argument 'test' passed‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:11] *** p6bannerbot sets mode: +v leont

[13:12] <timotimo> &term:<now>.wrap(-> |, :$set-mock-time { state $mock-time; $mock-time = $_ with $set-mock-time; $mock-time // callsame }); say now; term:<now>(set-mock-time => 12345);

[13:12] <timotimo> m: &term:<now>.wrap(-> |, :$set-mock-time { state $mock-time; $mock-time = $_ with $set-mock-time; $mock-time // callsame }); say now; term:<now>(set-mock-time => 12345);

[13:12] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of 'now' in sink context‚ê§    at <tmp>:1‚ê§    ------> 3 now; term:<now>(set-mock-time => 12345)7‚èè5;‚ê§Instant:1542373978.510927‚ê§¬ª

[13:12] <timotimo> ^- hum?

[13:17] <ufobat_> can someone point me out what i need to read in order to understand this: https://github.com/croservices/openapi-model/blob/master/lib/OpenAPI/Model/OpenAPI.pm6#L1148-L1160

[13:17] <ufobat_> the `does Role[ ...quite a lot of code... ]` thingy

[13:17] <ufobat_> it looks like a different kind of inheritance?

[13:18] <timotimo> it puts a value into the role's argument

[13:18] <jnthn> Roles can take parameters

[13:18] <jnthn> m: role R[$v] { method m { $v } }; class C does R[42] { }; C.m

[13:18] <camelia> rakudo-moar 21f11a3f0: ( no output )

[13:18] <jnthn> m: role R[$v] { method m { $v } }; class C does R[42] { }; say C.m

[13:18] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´42‚ê§¬ª

[13:20] <ufobat_> thats basically the same as javas Collection<Type> thingy?

[13:20] <ufobat_> but in more flexible

[13:21] <timotimo> it's similar, but the arguments to roles don't just disappear

[13:21] *** pmurias joined
[13:21] *** p6bannerbot sets mode: +v pmurias

[13:23] <SmokeMachine> m: my %a := :{}; my %b; %b<bla> = 1; %a{%b.clone} = 1; say %a; %b<bla> = 2; %a{%b.clone} = 2; say %a # why is this happening if im cloning b?

[13:23] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´{(bla => 1) => 1}‚ê§{(bla => 2) => 2, (bla => 2) => 1}‚ê§¬ª

[13:23] <ufobat_> maybe it is a stupid question, but when do you use that? I've never needed or used that in my perl5 code

[13:25] <timotimo> SmokeMachine: it's not the same object any more, so it's a different key

[13:25] <SmokeMachine> I was thinking to use `.Map` instead of `.clone` but it stringifies the key...

[13:25] <timotimo> "the" key?

[13:25] <jnthn> ufobat_: When you want to factor something out into a role, but make it configurable in some way.

[13:26] <SmokeMachine> timotimo: yes, that's what I want, but the problem is: `{(bla => 2) => 2, (bla => 2) => 1}` its changing...

[13:26] <timotimo> my %a := :{}; my %b; %b<bla> = 1; %a{%b.Map} = 1; say %a; %b<bla> = 2; %a{%b.Map} = 2; say %a.perl

[13:26] <evalable6> timotimo, rakudo-moar 21f11a3f0: OUTPUT: ¬´{(bla => 1) => 1}‚ê§:{(:bla(1)) => 1, (:bla(2)) => 2}‚ê§¬ª

[13:26] <timotimo> my %a := :{}; my %b; %b<bla> = 1; %a{%b.Map} = 1; say %a.perl; %b<bla> = 2; %a{%b.Map} = 2; say %a.perl

[13:26] <evalable6> timotimo, rakudo-moar 21f11a3f0: OUTPUT: ¬´:{(:bla(1)) => 1}‚ê§:{(:bla(1)) => 1, (:bla(2)) => 2}‚ê§¬ª

[13:26] <SmokeMachine> m: my %bla = :{42 => 1}; say %bla.keys.head.^name; say %bla.Map.keys.head.^name

[13:26] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of hash composer on right side of hash assignment; did you mean := instead?‚ê§    at <tmp>:1‚ê§    ------> 3my %bla = :{42 => 1}7‚èè5; say %bla.keys.head.^name; say %bla.Map‚ê§Str‚ê§Str‚ê§¬ª

[13:26] <timotimo> i don't see it stringify keys

[13:27] <SmokeMachine> m: my %bla := :{42 => 1}; say %bla.keys.head.^name; say %bla.Map.keys.head.^name

[13:27] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´Int‚ê§Str‚ê§¬ª

[13:28] <SmokeMachine> timotimo: ^^

[13:28] <timotimo> oh

[13:28] <timotimo> m: my %bla := :{42 => 1}; say %bla.keys.head.^name; say %bla.Map.^roles

[13:28] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´Int‚ê§((Associative) (Iterable))‚ê§¬ª

[13:28] <timotimo> m: my %bla := :{42 => 1}; say %bla.keys.head.^name; say %bla.Map.^roles[0].^parameters

[13:28] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´Int‚ê§No such method 'parameters' for invocant of type 'Perl6::Metamodel::ParametricRoleGroupHOW'. Did you mean 'parameterize'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:28] <tobs> "A Map is an immutable mapping from string keys to values of arbitrary types."

[13:28] <timotimo> m: my %bla := :{42 => 1}; say %bla.keys.head.^name; say %bla.Map.^roles[0].^params

[13:28] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´Int‚ê§No such method 'params' for invocant of type 'Perl6::Metamodel::ParametricRoleGroupHOW'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:29] <timotimo> m: my %bla := :{42 => 1}; say %bla.keys.head.^name; say %bla.Map.^roles[0].^arguments

[13:29] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´Int‚ê§No such method 'arguments' for invocant of type 'Perl6::Metamodel::ParametricRoleGroupHOW'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:29] <timotimo> ...

[13:29] <timotimo> m: my %bla := :{42 => 1}; say %bla.keys.head.^name; say %bla.Map.^roles[0].arguments

[13:29] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´Int‚ê§No such method 'arguments' for invocant of type 'Associative'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:29] <timotimo> m: my %bla := :{42 => 1}; say %bla.keys.head.^name; say %bla.Map.^roles[0].parameters

[13:29] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´Int‚ê§No such method 'parameters' for invocant of type 'Associative'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:31] <timotimo> m: my %bla := :{42 => 1}; say %bla.keys.head.^name; say %bla.Map.^roles[0].^role_arguments

[13:31] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´Int‚ê§No such method 'role_arguments' for invocant of type 'Perl6::Metamodel::ParametricRoleGroupHOW'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:31] <timotimo> huh.

[13:32] *** sno joined
[13:32] *** p6bannerbot sets mode: +v sno

[13:33] <SmokeMachine> this works, but is there a better solution?

[13:33] <SmokeMachine> m: my %a := :{}; my %b; %b<bla> = 1; %a{%b.kv.map(-> $k, $v { $k.clone => $v })} = 1; say %a; %b<bla> = 2; %a{%b.kv.map(-> $k, $v { $k.clone => $v })} = 2; say %a

[13:33] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´{(bla => 1) => 1}‚ê§{(bla => 1) => 1, (bla => 2) => 2}‚ê§¬ª

[13:34] <SmokeMachine> timotimo: ^^

[13:34] *** sno left
[13:34] <timotimo> it probably shouldn't stringify those keys.

[13:34] <SmokeMachine> tobs: ^^

[13:34] <timotimo> oh

[13:34] <timotimo> Map is supposed to be strings to objects, then?

[13:34] <SmokeMachine> timotimo: but Hash also does...

[13:34] <SmokeMachine> m: my %bla := :{42 => 1}; say %bla.keys.head.^name; say %bla.Hash.keys.head.^name

[13:34] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´Int‚ê§Int‚ê§¬ª

[13:34] <timotimo> well, hash's default role parameters are Str(Any) iirc

[13:34] <tobs> SmokeMachine: I can only imagine that the clone issue has something to do with it making shallow copies...

[13:35] <SmokeMachine> sorry... not Hash on a Hash...

[13:35] *** sno joined
[13:36] *** lizmat left
[13:36] *** p6bannerbot sets mode: +v sno

[13:36] <timotimo> s: :{42 => 1}, 'Hash', \()

[13:36] <SourceBaby> timotimo, Ehhh... I'm too scared to run that code.

[13:36] <SmokeMachine> tobs: yes, that's what I was wandering... that probable would be "fixed" if `.Map` didn't stringily...

[13:36] <timotimo> s: Hash, 'Hash', \()

[13:36] <SourceBaby> timotimo, Sauce is at https://github.com/rakudo/rakudo/blob/21f11a3f0/src/core/Hash.pm6#L8

[13:37] <timotimo> that would explain why .Hash on a Hash doesn't do anything :)

[13:37] <tobs> m: my %a := :{}; my %b; %b<bla> = 1; %a{(my Any %{Any} = %b)} = 1; say %a; %b<bla> = 2; %a{(my Any %{Any} = %b.clone)} = 2; say %a

[13:37] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´{(bla => 1) => 1}‚ê§{(bla => 1) => 1, (bla => 2) => 2}‚ê§¬ª

[13:37] <SmokeMachine> yes, that just returns self...

[13:37] <tobs> %)

[13:38] *** zag joined
[13:38] *** p6bannerbot sets mode: +v zag

[13:38] <tobs> this is what you expected right? (forgot to remove the last .clone)

[13:38] *** zag left
[13:40] <SmokeMachine> m: my %a := :{}; my %b; %b<bla> = 1; %a{my %{Any} = %b.clone} = 1; say %a; %b<bla> = 2; %a{my %{Any} = %b.clone} = 2; say %a

[13:40] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´{(bla => 1) => 1}‚ê§{(bla => 1) => 1, (bla => 2) => 2}‚ê§¬ª

[13:40] <SmokeMachine> m: my %a := :{}; my %b; %b<bla> = 1; %a{my %{Any} = %b} = 1; say %a; %b<bla> = 2; %a{my %{Any} = %b} = 2; say %a

[13:40] <camelia> rakudo-moar 21f11a3f0: OUTPUT: ¬´{(bla => 1) => 1}‚ê§{(bla => 1) => 1, (bla => 2) => 2}‚ê§¬ª

[13:40] <SmokeMachine> tobs: that's it! thanks!

[13:41] <tobs> SmokeMachine: it could look nicer though. (I learned that last week while doing something similar and looking at .perl outputs.)

[13:41] *** sno left
[13:42] *** lizmat joined
[13:42] *** p6bannerbot sets mode: +v lizmat

[13:43] *** sno joined
[13:43] <SmokeMachine> tobs: thanks!

[13:43] *** p6bannerbot sets mode: +v sno

[13:44] <SmokeMachine> timotimo: Now I have to find a way to transfer this into a Red::AST... :P https://www.irccloud.com/pastebin/Cz0Aeet5/

[13:53] *** zakharyas joined
[13:54] *** p6bannerbot sets mode: +v zakharyas

[13:58] <SmokeMachine> timotimo: https://www.irccloud.com/pastebin/jk9eqzHy/

[14:00] <timotimo> i like it

[14:01] <timotimo> would you tunr that right into a piece of the SQL so that stuff that would immediately .next won't appear in the first place, or would that screw with code that actually does something useful before calling .next?

[14:04] *** zakharyas left
[14:07] *** zakharyas joined
[14:08] *** p6bannerbot sets mode: +v zakharyas

[14:08] *** jmerelo left
[14:11] <SmokeMachine> timotimo: the idea is to translate that to sql...

[14:12] <SmokeMachine> do `.map: { next unless .b; .a }` will write the same sql as `.grep({so .b}).map: {.a}`

[14:14] <SmokeMachine> select a from table_name where b is not null and b != 0

[14:15] <SmokeMachine> timotimo: for example...

[14:15] <Altreus> is it kosher to use a promise to sort of signal that something else is happening? I will explain my example

[14:16] <SmokeMachine> timotimo: but it's not on Red master yet... its on a branch...

[14:16] <Altreus> I have a "bulk delete messages" operation on a Channel object. This first sends an API request and, on success, finds those messages in the object's @.messages and removes them. This whole thing happens in a Promise so someone could read @.messages after the method was called but before they are removed from the list

[14:16] <SmokeMachine> timotimo: if some one like to help... (would you?)

[14:17] <Altreus> Would it make sense to hide @.messages behind a Promise, so that I can keep that promise when people are allowed to see the message array?

[14:17] <Altreus> as a sort of lock

[14:17] <Altreus> or can I just straight up lock something and force a blocking operation?

[14:18] <Altreus> I was thinking something like method messages { $!message-lock.then({ @!messages }) }

[14:18] <moritz> there are locks, yes

[14:18] <moritz> https://docs.perl6.org/type/Lock

[14:18] <Altreus> cor

[14:19] <moritz> use them with care :-)

[14:19] <Altreus> ah this recommends higher-level constructs

[14:19] <Altreus> I suspect the promise-lock might be less dangerous

[14:27] *** shareable6 joined
[14:28] *** p6bannerbot sets mode: +v shareable6

[14:28] *** nige_ joined
[14:29] *** nige left
[14:29] *** p6bannerbot sets mode: +v nige_

[14:33] <Geth> ¬¶ doc: 6165d4362a | (Elizabeth Mattijsen)++ | doc/Language/control.pod6

[14:33] <Geth> ¬¶ doc: Add start { } to control flow

[14:33] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/6165d4362a

[14:33] <synopsebot> Link: https://doc.perl6.org/language/control

[14:37] <buggable> New CPAN upload: ModelDB-0.0.3.tar.gz by HANENKAMP https://cpan.metacpan.org/authors/id/H/HA/HANENKAMP/Perl6/ModelDB-0.0.3.tar.gz

[14:37] *** curan left
[14:37] *** reportable6 left
[14:38] *** reportable6 joined
[14:38] *** squashable6 joined
[14:38] *** ChanServ sets mode: +v squashable6

[14:38] *** p6bannerbot sets mode: +v reportable6

[14:38] *** p6bannerbot sets mode: +v squashable6

[14:38] <jnthn> Altreus: Yes, using the Promise there sounds better.

[14:43] *** dhn joined
[14:43] *** p6bannerbot sets mode: +v dhn

[14:45] *** ONDIE joined
[14:46] *** ONDIE left
[14:50] <El_Che> robe pike's diss about Perl: https://youtu.be/RIvL2ONhFBI?t=150

[14:53] <SmokeMachine> timotimo: my "Red::AST optimizer" is not optimising anything yet... but it looks that the `next if` is working... https://www.irccloud.com/pastebin/7oqzHGSQ/

[14:53] <lizmat> .oO( go Rob, go! :-)

[14:54] <SmokeMachine> timotimo: I mean the optimizer will transform `not not X` into `X`

[14:57] *** abraxxa left
[14:57] <Altreus> jnthn: thanks, this means I'm getting the hang of stuff

[14:57] <Altreus> :D

[15:00] *** dhn left
[15:01] *** warriors joined
[15:01] *** p6bannerbot sets mode: +v warriors

[15:06] *** zakharyas left
[15:06] *** molaf left
[15:09] *** zakharyas joined
[15:10] *** p6bannerbot sets mode: +v zakharyas

[15:14] <SmokeMachine> timotimo: https://github.com/FCO/Red/wiki/Better-map-grep

[15:22] *** zakame_ left
[15:25] *** warriors_ joined
[15:25] *** p6bannerbot sets mode: +v warriors_

[15:25] *** warriors_ left
[15:32] <lizmat> SmokeMachine: { next unless .b; .a }  perhaps better written as { .a if .b } ?

[15:53] <SmokeMachine> lizmat: but it won‚Äôt next, right? It will return Nil...

[15:54] <lizmat> m: dd (^10).map: $_ if $_ == 5

[15:54] <camelia> rakudo-moar 9a2c4b447: OUTPUT: ¬´Use of uninitialized value of type Any in numeric context‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª

[15:54] <lizmat> m: dd (^10).map: { $_ if $_ == 5 }

[15:54] <camelia> rakudo-moar 9a2c4b447: OUTPUT: ¬´(5,).Seq‚ê§¬ª

[15:54] <lizmat> map is smarter than that  :-)

[15:54] *** PavelB joined
[15:54] *** p6bannerbot sets mode: +v PavelB

[15:55] <timotimo> it returns Empty, doesn't it?

[15:55] <SmokeMachine> lizmat: thanks!

[15:55] <PavelB> Does perl6 have repl?

[15:55] <SmokeMachine> lizmat: I‚Äôll add that to my code! Thanks!

[15:56] <timotimo> PavelB: yes, just run "perl6" and the repl should greet you

[15:56] <PavelB> :O

[15:56] <timotimo> other than that we have a kernel that can be used with the jupyter notebook, or ipython console

[15:56] <SmokeMachine> m: say ^10 .map: { $_ if %% 2 }

[15:56] <camelia> rakudo-moar 9a2c4b447: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3say ^10 .map: { $_ if %%7‚èè5 2 }‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§¬ª

[15:56] <PavelB> *and* it has line editing

[15:56] <PavelB> woah

[15:57] <SmokeMachine> m: say ^10 .map: { $_ if $_ %% 2 }

[15:57] <camelia> rakudo-moar 9a2c4b447: OUTPUT: ¬´(0 2 4 6 8)‚ê§¬ª

[15:57] <timotimo> it has some very strange behaviours sometimes, though

[15:57] <timotimo> the repl, i mean

[15:57] <timotimo> operators defined on one line aren't available outside that same line, for example

[15:57] <timotimo> and using native lexicals, like "my int $foo" instead of "my Int $foo" can cause strange issues, too

[15:58] <SmokeMachine> m: say { $_ if $_ %% 2 }.(3)

[15:58] <camelia> rakudo-moar 9a2c4b447: OUTPUT: ¬´()‚ê§¬ª

[15:59] <PavelB> So, I'm coming from Perl 5 and I noticed that `say (1, 2, 3)`, `say 1, 2, 3`, and `say [1, 2, 3]` are causing different outputs. What's the difference?

[15:59] <timotimo> the first one you pass a list to say, the second one you pass three arguments, the third one you pass an array

[15:59] <SmokeMachine> m: say { if False {}}.()

[15:59] <camelia> rakudo-moar 9a2c4b447: OUTPUT: ¬´()‚ê§¬ª

[15:59] <SmokeMachine> m: say { do if False {}}.()

[15:59] <camelia> rakudo-moar 9a2c4b447: OUTPUT: ¬´()‚ê§¬ª

[16:00] <PavelB> So perl6 doesn't have the auto-list-splatting thing?

[16:00] <lizmat> PavelB: could you express that in Perl 5 code ?

[16:00] <SmokeMachine> m: say |(1, 2, 3)

[16:00] <camelia> rakudo-moar 9a2c4b447: OUTPUT: ¬´123‚ê§¬ª

[16:01] <timotimo> yeah, arguments are only expanded ("slipped") if you use the | operator

[16:01] <PavelB> Perl 5 has `(1, (2, (3), 4, (5)), 6), 7` as the same thing to `(1, 2, 3, 4, 5, 6, 7)`

[16:01] <timotimo> you can slip an array to pass positional arguments or a hash to pass named arguments

[16:02] <SmokeMachine> PavelB: in perl6 it isn‚Äôt...

[16:02] <lizmat> m: dd ((1, (2, (3), 4, (5)), 6), 7).flat   # PavelB 

[16:02] <camelia> rakudo-moar 9a2c4b447: OUTPUT: ¬´(1, 2, 3, 4, 5, 6, 7).Seq‚ê§¬ª

[16:02] <lizmat> m: say ((1, (2, (3), 4, (5)), 6), 7).flat

[16:02] <camelia> rakudo-moar 9a2c4b447: OUTPUT: ¬´(1 2 3 4 5 6 7)‚ê§¬ª

[16:03] <PavelB> I'm starting to doubt this language is actually similar to Perl 5

[16:03] <lizmat> PavelB: everything in Perl 6 is an object

[16:03] <lizmat> and so are arrays and lists

[16:04] <PavelB> Like, reasonable representations of lists? Wuuuuut?

[16:04] *** zakharyas left
[16:05] <lizmat> PavelB: perhaps this could be of interest to you: https://opensource.com/article/18/8/containers-perl-6

[16:05] <lizmat> </plug>

[16:05] *** zakharyas joined
[16:06] <PavelB> lizmat: So I'm reading that and I'm not sure I'm seeing the purpose of having an @ sigil if you can just stick lists in $scalars and it works fine

[16:06] *** p6bannerbot sets mode: +v zakharyas

[16:08] <lizmat> the @ indicates how you want to look at it

[16:08] <lizmat> m: my $l := 1,2,3,4; for $l { say $_ }

[16:08] <camelia> rakudo-moar 9a2c4b447: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§4‚ê§¬ª

[16:10] <ufobat_> m: my $a = (foo => 1, bar => 2); say $a<foo>

[16:10] <camelia> rakudo-moar 9a2c4b447: OUTPUT: ¬´Type List does not support associative indexing.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:11] <ufobat_> m: my $a = (foo => 1, bar => 2).Hash; say $a<foo>

[16:11] <camelia> rakudo-moar 9a2c4b447: OUTPUT: ¬´1‚ê§¬ª

[16:11] <lizmat> afk&

[16:13] *** molaf joined
[16:13] *** p6bannerbot sets mode: +v molaf

[16:14] <ufobat_> ha :D

[16:20] *** curan joined
[16:20] *** p6bannerbot sets mode: +v curan

[16:22] *** trnh joined
[16:22] *** p6bannerbot sets mode: +v trnh

[16:24] <scimon> Zoffix: Jsut to say. Looking at the Color module. Importing the Color::Operators only added .5 seconds on my machine today :) 

[16:29] *** curan left
[16:30] *** trnh left
[16:31] *** curan joined
[16:31] *** p6bannerbot sets mode: +v curan

[16:32] *** Sgeo_ joined
[16:32] *** molaf left
[16:32] *** p6bannerbot sets mode: +v Sgeo_

[16:34] *** zakharyas left
[16:34] *** Sgeo left
[16:38] *** domidumont left
[16:44] *** kurahaupo left
[16:44] *** kurahaupo joined
[16:45] *** p6bannerbot sets mode: +v kurahaupo

[16:52] *** curan left
[16:55] *** domidumont joined
[16:56] *** p6bannerbot sets mode: +v domidumont

[17:06] *** domidumont left
[17:08] *** Bucciarati left
[17:08] *** avar left
[17:08] *** avar joined
[17:08] *** Bucciarati joined
[17:08] *** avar left
[17:08] *** avar joined
[17:08] *** p6bannerbot sets mode: +v avar

[17:09] <SmokeMachine> lizmat: thanks! https://www.irccloud.com/pastebin/ynCHwfn4/

[17:09] *** p6bannerbot sets mode: +v avar

[17:09] *** p6bannerbot sets mode: +v Bucciarati

[17:16] *** PavelB left
[17:23] *** kerframil joined
[17:23] *** p6bannerbot sets mode: +v kerframil

[17:24] *** scimon left
[17:36] *** robertle left
[18:31] *** Manifest1 joined
[18:31] *** p6bannerbot sets mode: +v Manifest1

[18:34] *** domidumont joined
[18:34] *** p6bannerbot sets mode: +v domidumont

[18:37] *** domidumont left
[18:45] *** dct left
[18:53] *** rindolf left
[18:54] *** ryn1x joined
[18:54] *** p6bannerbot sets mode: +v ryn1x

[18:59] *** leont left
[19:07] *** ryn1x left
[19:14] *** rindolf joined
[19:15] *** p6bannerbot sets mode: +v rindolf

[19:24] *** sauvin left
[19:30] *** Bucciarati left
[19:31] *** Bucciarati joined
[19:31] *** p6bannerbot sets mode: +v Bucciarati

[19:36] *** ferreira left
[19:39] <SmokeMachine> m: say "bla (ble, bli, blo) blu".subst(/"(" ~ ")" (<-[)]>+)/, -> $/ is copy { "( { $0.Str.split(/\s*,\s*/).sort.join(", ") } )" }, :g)

[19:39] <camelia> rakudo-moar dc67ee75b: OUTPUT: ¬´5===SORRY!5===‚ê§Unrecognized regex metacharacter , (must be quoted to match literally)‚ê§at <tmp>:1‚ê§------> 3, -> $/ is copy { "( { $0.Str.split(/\s*7‚èè5,\s*/).sort.join(", ") } )" }, :g)‚ê§Unable to parse regex; couldn't find final '/'‚ê§‚Ä¶¬ª

[19:39] <SmokeMachine> what's wrong here? ^^

[19:42] <sena_kun> SmokeMachine, `,` symbol. If you want to literaly match it, wrap it with `,`. That's a wild guess though based on what I see, I am not a regex wizard.

[19:42] <sena_kun> m: say "bla (ble, bli, blo) blu".subst(/"(" ~ ")" (<-[)]>+)/, -> $/ is copy { "( { $0.Str.split(/\s* ',' \s*/).sort.join(", ") } )" }, :g)

[19:42] <camelia> rakudo-moar dc67ee75b: OUTPUT: ¬´bla ( ble, bli, blo ) blu‚ê§¬ª

[19:42] <sena_kun> SmokeMachine, ^

[19:42] <SmokeMachine> right! thanks sena_kun !

[19:43] <sena_kun> Phew, glad I was able to help. :) .oO ( Though Comma did it ).

[20:11] *** sena_kun left
[20:12] *** rudo joined
[20:12] *** p6bannerbot sets mode: +v rudo

[20:13] *** sena_kun joined
[20:13] *** p6bannerbot sets mode: +v sena_kun

[20:15] *** rindolf left
[20:32] *** rudo left
[20:37] *** rindolf joined
[20:37] *** kst left
[20:37] *** p6bannerbot sets mode: +v rindolf

[20:43] *** molaf joined
[20:44] *** p6bannerbot sets mode: +v molaf

[20:44] *** kst joined
[20:45] *** p6bannerbot sets mode: +v kst

[20:46] *** ferreira joined
[20:47] *** p6bannerbot sets mode: +v ferreira

[20:56] *** patrickb joined
[20:57] *** p6bannerbot sets mode: +v patrickb

[20:57] *** molaf left
[21:01] *** movl joined
[21:01] *** p6bannerbot sets mode: +v movl

[21:19] *** kerframil left
[21:22] *** pmurias left
[21:27] *** pmurias joined
[21:27] *** p6bannerbot sets mode: +v pmurias

[21:32] *** avar left
[21:33] *** avar joined
[21:33] *** avar left
[21:33] *** avar joined
[21:33] *** p6bannerbot sets mode: +v avar

[21:34] *** p6bannerbot sets mode: +v avar

[21:39] *** random_yanek left
[21:51] *** random_yanek joined
[21:51] *** p6bannerbot sets mode: +v random_yanek

[21:58] *** kdr21 left
[21:59] *** kudzo_ joined
[21:59] *** kdr21 joined
[22:00] *** p6bannerbot sets mode: +v kudzo_

[22:00] *** p6bannerbot sets mode: +v kdr21

[22:26] *** molaf joined
[22:27] *** sena_kun left
[22:27] *** p6bannerbot sets mode: +v molaf

[22:46] *** nige joined
[22:47] *** nige left
[22:47] *** nige_ left
[22:49] *** nige joined
[22:50] *** p6bannerbot sets mode: +v nige

[22:52] *** pmurias left
[23:08] *** El_Che left
[23:08] *** El_Che joined
[23:08] *** p6bannerbot sets mode: +v El_Che

[23:15] *** cydf left
[23:16] <Altreus> I have an array of objects that all exist in another array. Is there an efficient way of turning this subset into the indices from the superset?

[23:17] <Altreus> the perl5 way is a nested loop

[23:21] *** [Sno] joined
[23:21] *** p6bannerbot sets mode: +v [Sno]

[23:23] <SmokeMachine> m: my @a = <a e i o u>; my @b = "a" .. "z"; my %b = @b.kv.reverse; say %b{@a} # Altreus: do you mean something like this?

[23:23] <camelia> rakudo-moar 19f0c8427: OUTPUT: ¬´(0 4 8 14 20)‚ê§¬ª

[23:24] *** sno left
[23:26] *** thundergnat joined
[23:26] *** warriors left
[23:26] *** p6bannerbot sets mode: +v thundergnat

[23:27] <jnthn> `my %b = @b.antipairs` will be a bit more efficient

[23:27] <SmokeMachine> jnthn: thanks!

[23:37] *** kensanata joined
[23:37] *** p6bannerbot sets mode: +v kensanata

[23:38] *** patrickb left
[23:38] *** cydf joined
[23:39] *** p6bannerbot sets mode: +v cydf

[23:40] <Altreus> yes except they're objects so I ... I dunno, can I use them as keys?

[23:42] *** oodani left
[23:42] *** oodani joined
[23:43] *** p6bannerbot sets mode: +v oodani

[23:47] <jnthn> Yes, but declare the hash my %b{Any}

[23:49] <Altreus> okay I shall try this

[23:49] <Altreus> dunno how long before I can actually run this code :P

[23:53] *** kensanata left
