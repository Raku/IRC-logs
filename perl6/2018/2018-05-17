[00:00] <TimToady> hypers aren't that smart yet

[00:00] <n00b_> And I can't roll my own hypers yet, right? I know it's on the roadmpa

[00:01] <TimToady> well, it's all written in p6/nqp already, so it's theoretically possible :)

[00:01] *** mcmillhj joined
[00:01] <n00b_> I suppose I could try to roll my own rank operator in nqp, but I wasn't planning on getting my hands that dirty.

[00:02] <TimToady> but the current metaops are a bit hardwired, yes

[00:02] <TimToady> we have the grammatical categories, but the action routines are not going to get auto-written for you, as they are with normal operators

[00:03] <n00b_> One meta-op which I think is worth consideration is rank: op"N expresses that the "natural cell" of op is an array of rank N, and so " breaks up an arrays > N into equal-sized shards of rank N, feeds them to op seriatim, and collects the results into a larger array (just concat)

[00:04] <n00b_> I'm not sure if this needs to be so array-focused as in the APLs; N in Perl6 could just as easily be a Signature

[00:04] <timotimo> hm, a bit like rotor?

[00:05] <TimToady> we can express array shapes in declarations, but nothing is currently gonna do the pattern matching for you

[00:05] <n00b_> secretly, / is just a shorthand for "(natural_cell_of_op, Inf)

[00:05] <n00b_> I don't know rotor, let me check that out.

[00:05] * timotimo heads out

[00:06] <TimToady> rotor is rather more procedural than declarational though

[00:06] *** mcmillhj left
[00:06] <TimToady> and only handles the top dimension like other listops

[00:07] <n00b_> The top is also a useful choice, though I think bottom is more general (because it's easier write top in terms of bottom than vice versa)

[00:07] <TimToady> if we decide the current hypers aren't so useful, we can always tweak the semantics of hyper within a lexical scope too

[00:08] <n00b_> Wouldn't that require the ability to roll one's open hypers?

[00:08] <n00b_> Without getting into nqp and actions, that is.

[00:08] <TimToady> well, you'd have the actions call into other support routines

[00:09] <n00b_> Intuitively, that feels like it might not be sufficient to express the structural walking inversion from topmost to bottommost

[00:09] *** psychoslave left
[00:10] *** Kaiepi left
[00:10] *** Kaiepi joined
[00:11] * TimToady is quite willing for someone smarter than him to do that, as long as it doesn't force mere mortals to understand before they need it :)

[00:14] <n00b_> m: say (1,2,3) X, (4,5,6)

[00:14] <camelia> rakudo-moar b8318b8ed: OUTPUT: «((1 4) (1 5) (1 6) (2 4) (2 5) (2 6) (3 4) (3 5) (3 6))␤»

[00:14] <n00b_> m: say ZX, (1,2,3) xx 2

[00:14] <camelia> rakudo-moar b8318b8ed: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    ZX used at line 1␤␤»

[00:14] <n00b_> How can I create 2 copies of (1,2,3) and zip or insert X, between them?

[00:15] <n00b_> It's a ridiculously expensive but syntactically cheap way to get me closer to the idea I want to express

[00:15] <TimToady> m: say [ZX,] (1,2,3) xx 2

[00:15] <camelia> rakudo-moar b8318b8ed: OUTPUT: «(((1 1)) ((2 2)) ((3 3)))␤»

[00:15] <TimToady> m: say [ZX,] ((1,2,3) xx 2) xx 2

[00:15] <camelia> rakudo-moar b8318b8ed: OUTPUT: «(((1 1) (1 2) (1 3) (2 1) (2 2) (2 3) (3 1) (3 2) (3 3)) ((1 1) (1 2) (1 3) (2 1) (2 2) (2 3) (3 1) (3 2) (3 3)))␤»

[00:15] <n00b_> Oh. I may not even need the Z then.

[00:15] <TimToady> m: say [X,] (1,2,3) xx 2

[00:15] <camelia> rakudo-moar b8318b8ed: OUTPUT: «((1 1) (1 2) (1 3) (2 1) (2 2) (2 3) (3 1) (3 2) (3 3))␤»

[00:15] <n00b_> m: say [X,] (1,2,3) xx 2

[00:15] <camelia> rakudo-moar b8318b8ed: OUTPUT: «((1 1) (1 2) (1 3) (2 1) (2 2) (2 3) (3 1) (3 2) (3 3))␤»

[00:15] <TimToady> "insert" means you want to reduce

[00:16] <n00b_> Thanks, that's a useful distinction

[00:17] *** esh left
[00:17] *** mcmillhj joined
[00:17] <TimToady> the main problem you'll run into there is that reducing on a single list will explode the list instead of treating it scalarly

[00:17] *** mcmillhj_ joined
[00:17] <TimToady> due to the single-arg rule

[00:17] <TimToady> so for some applications you might need a way to disable that rule

[00:18] *** esh joined
[00:19] <n00b_> I'm having the opposite problem.  I want c_d to operator on every pair of lists, but my attempts with [] turn out to feed c_d every pair of scalars.

[00:21] <TimToady> it's a bit like regex matching /.* foo/

[00:22] *** mcmillhj left
[00:22] <TimToady> finding the next-to-last of something is always a bit fraught :)

[00:23] <TimToady> but I can see how it might be powerful

[00:23] <n00b_> Is there some form of boxing I can use to turn (4,5,6) into [4,5,6] in the P5 sense?

[00:23] *** w_richard_w joined
[00:24] <TimToady> you mean, make it an item?

[00:24] <n00b_> yeah

[00:25] <TimToady> m: say $_ * 2 for 1,2,3, $(1,2,3,4)

[00:25] <camelia> rakudo-moar b8318b8ed: OUTPUT: «2␤4␤6␤8␤»

[00:25] <TimToady> like that?

[00:25] <n00b_> Yes, but I want to item-ify each list in a list of lists

[00:25] <n00b_> m: say $$_ for ( (1,2,3) , (4,5,6) )

[00:25] <camelia> rakudo-moar b8318b8ed: OUTPUT: «(1 2 3)␤(4 5 6)␤»

[00:26] <n00b_> m: say ($$_).perl for ( (1,2,3) , (4,5,6) )

[00:26] <camelia> rakudo-moar b8318b8ed: OUTPUT: «$(1, 2, 3)␤$(4, 5, 6)␤»

[00:26] <n00b_> nah, that didn't help

[00:27] <n00b_> what I'm thinking is if I could "box" an array so it looked like a scalar, I might be able to access the second-to-last level with hypers

[00:27] <n00b_> by tricking them into thinking it's the last level

[00:27] <TimToady> mebbe

[00:28] <TimToady> m: say ([$_,]).perl for ( (1,2,3) , (4,5,6) )

[00:28] <camelia> rakudo-moar b8318b8ed: OUTPUT: «[(1, 2, 3),]␤[(4, 5, 6),]␤»

[00:28] <TimToady> or some such

[00:29] <TimToady> anyway, a real [] has scalars inside

[00:29] <TimToady> m: say ($[$_]).perl for ( (1,2,3) , (4,5,6) )

[00:29] <camelia> rakudo-moar b8318b8ed: OUTPUT: «$[1, 2, 3]␤$[4, 5, 6]␤»

[00:29] <TimToady> hmm

[00:29] <TimToady> brane hertz...

[00:29] <n00b_> my brain doesn't have enough hertz

[00:30] <TimToady> 'course one can go all nominal typing with objects, too

[00:31] *** shareable6 joined
[00:31] *** ChanServ sets mode: +v shareable6

[00:31] <n00b_> I'm abusing the language enough as it is, I think adding objects in to force it to confess is a bridge too far

[00:32] <n00b_> I'm not above cheating, but I'm above *icky* cheating.

[00:32] *** comborico1611 left
[00:33] <TimToady> part of the problem here is that we're trying to use scalars as much more than just 0-dimensional arrays :)

[00:34] <TimToady> so we don't have this pure view of dimensionality that you get in aplish languages

[00:35] <n00b_> you have to; having strings be rank 1 vectors in APL is a PITA, a mistake from the 70s we carry around

[00:35] <TimToady> Perl is much more interested in the singular/plural distinction of natural languages

[00:35] <TimToady> so at least we didn't make that mistake :)

[00:36] <n00b_> yes! though I'd like an easy facility to determine what's singular for me, without going all OOP

[00:37] <n00b_> overtyping tempts me even further to overengineering

[00:37] <TimToady> m: say $(1,2,3).WHAT

[00:37] <camelia> rakudo-moar b8318b8ed: OUTPUT: «(List)␤»

[00:37] <TimToady> m: say $(1,2,3).VAR.WHAT

[00:37] <camelia> rakudo-moar b8318b8ed: OUTPUT: «(Scalar)␤»

[00:38] <n00b_> BTW, Ken Iverson shared your view that taking cues from natural languages is critical, but he was too Strunk and White about it

[00:38] <TimToady> omit needless symbols!

[00:39] <n00b_> Sure, I get the $() thing, but it's syntactic, which is limiting

[00:39] <TimToady> the main problem I have with APLish languages is that all the symbols look like each other in terms of weight

[00:39] <n00b_> One bit of syntax APL discarded as limiting was [] for indexing. Took a long time for everyone else to cop to that.

[00:39] *** mcmillhj_ left
[00:39] <TimToady> which is why our metaops look "bigger" than normal ops

[00:40] <n00b_> There's a different mindset in APL. We view the egalitarian nature of symbols as a virtue

[00:40] <TimToady> and we don't mind using larger symbols for larger or less-frequent ideas

[00:40] <TimToady> huffman coding, and all that

[00:40] <n00b_> And that ops not being bigger than functions erases a bias against doing things top-down

[00:41] <n00b_> APL also huffman-codes (no one uses {:: for example), but we have a different view on what (should be) "less frequent"

[00:41] <TimToady> from a natural languages viewpoint, it's a foolish consistency

[00:41] <TimToady> but yeah, the math viewpoint tends to fight linguistics

[00:42] <n00b_> yep

[00:42] <TimToady> natural languages don't actually go in for much orthogonality

[00:43] <TimToady> and the most irregular forms are the commonest ones

[00:43] <TimToady> because that's where you need the extra redundancy

[00:43] <n00b_> John Wilkins, a 17th C philosopher, was an early proponent of trying to reduce argumentation to shuffling symbols, the first in a wave of pitting math against language

[00:44] <n00b_> the whole concept is misguided, but very attractive

[00:44] <TimToady> sure, he's one of the chief villains of The Search for the Perfect Language, by Eco

[00:44] <TimToady> one of my favorite books

[00:45] <n00b_> I'll add it to my list.  I've dipped into some of his work.

[00:46] *** Actualeyes left
[00:48] <n00b_> For now, what's a straightforward way to generate all pairs of lists from a given list of lists?

[00:51] *** mcmillhj joined
[00:51] *** Khisanth left
[00:52] <lookatme> :)

[00:55] *** mcmillhj left
[00:57] <TimToady> m: say (<a b c>, <d e f>, <x y z>).combinations(2)

[00:57] <camelia> rakudo-moar b8318b8ed: OUTPUT: «(((a b c) (d e f)) ((a b c) (x y z)) ((d e f) (x y z)))␤»

[00:59] <n00b_> niiice

[01:01] *** ryn1x joined
[01:06] *** Khisanth joined
[01:08] *** w_richard_w left
[01:08] *** w_richard_w joined
[01:11] *** ryn1x left
[01:12] *** ryn1x joined
[01:13] *** zakharyas joined
[01:17] *** w_richard_w left
[01:20] *** ryn1x left
[01:20] *** mcmillhj joined
[01:21] *** ryn1x joined
[01:25] *** w_richard_w joined
[01:25] *** mcmillhj left
[01:44] *** kurahaupo_ joined
[01:46] *** kurahaupo left
[01:47] *** ilbot3 left
[01:47] * [Coke] yawns

[01:48] <samcv> timotimo: we could add the strings length if we end up with a hash that is 0

[01:48] <samcv> so then we will always have a non-zero hash

[01:49] <samcv> well actually the length plus 1

[01:49] <samcv> though i guess we have to account for it going over 32bit signed int. though wouldn't be an issue when i make the hashes 64bit

[01:53] *** mcmillhj joined
[01:56] *** ilbot3 joined
[01:56] *** ChanServ sets mode: +v ilbot3

[01:58] *** mcmillhj left
[01:58] *** Actualeyes joined
[02:28] *** tomaw left
[02:33] *** tomaw joined
[02:33] *** ufobat_ left
[02:37] *** mcmillhj joined
[02:38] *** pilne left
[02:41] *** mcmillhj left
[02:48] *** ufobat joined
[02:48] *** raschipi joined
[02:56] *** Actualeyes left
[02:57] *** Actualeyes joined
[03:11] *** mcmillhj joined
[03:14] *** n00b_ left
[03:16] *** mcmillhj left
[03:29] *** mcmillhj joined
[03:33] *** raschipi left
[03:34] *** mcmillhj left
[03:55] *** mcmillhj joined
[03:59] *** mcmillhj left
[04:00] *** skids left
[04:01] *** Actualeyes left
[04:02] *** Actualeyes joined
[04:05] *** eliasr left
[04:06] *** Actualeyes left
[04:06] *** zakharyas left
[04:14] *** john_parr left
[04:15] *** zakharyas joined
[04:15] *** john_parr joined
[04:20] *** squashable6 left
[04:20] *** nightfrog left
[04:20] *** squashable6 joined
[04:22] *** aborazmeh joined
[04:22] *** aborazmeh left
[04:22] *** aborazmeh joined
[04:25] *** z0f joined
[04:26] *** mcmillhj joined
[04:28] *** z0f left
[04:30] *** mcmillhj left
[04:40] *** curan joined
[04:56] *** mcmillhj joined
[04:57] *** sergot left
[04:57] *** sergot joined
[05:01] *** mcmillhj left
[05:04] *** w_richard_w left
[05:07] *** jmerelo joined
[05:13] *** numbernine joined
[05:14] *** mcmillhj joined
[05:15] *** w_richard_w joined
[05:18] *** atroxaper joined
[05:18] *** mcmillhj left
[05:19] *** vivus-ignis joined
[05:19] *** vivus-ignis is now known as ignis__away

[05:21] *** Actualeyes joined
[05:23] *** sauvin joined
[05:39] *** ignis__away is now known as vivus-ignis

[05:41] *** mcmillhj joined
[05:46] *** mcmillhj left
[05:55] *** vivus-ignis is now known as ignis__away

[05:55] *** mcmillhj joined
[05:59] <Geth> ¦ doc: 0927fc50aa | (JJ Merelo)++ | doc/Language/traps.pod6

[05:59] <synopsebot> Link: https://doc.perl6.org/language/traps

[05:59] <Geth> ¦ doc: Grammar correction

[05:59] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0927fc50aa

[05:59] <Geth> ¦ doc: fb337f39c3 | (JJ Merelo)++ | doc/Language/traps.pod6

[05:59] <Geth> ¦ doc: Document Nil → Any trap closes #1135

[05:59] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fb337f39c3

[06:00] *** mcmillhj left
[06:00] <Geth> ¦ doc: 92d045bee9 | (JJ Merelo)++ | doc/Language/traps.pod6

[06:00] <Geth> ¦ doc: Document Nil → Any trap closes #1134

[06:00] <Geth> ¦ doc: 

[06:00] <Geth> ¦ doc: Uses also #1135 example to document it.

[06:00] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/92d045bee9

[06:01] *** ignis__away left
[06:06] *** shareable6 left
[06:12] <Geth> ¦ doc: 5e1a7a5ed8 | (JJ Merelo)++ | doc/Type/Seq.pod6

[06:12] <synopsebot> Link: https://doc.perl6.org/type/Seq

[06:12] <Geth> ¦ doc: sink method documented in Seqs. Closes #2028

[06:12] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5e1a7a5ed8

[06:12] *** numbernine left
[06:14] *** AlexDaniel left
[06:14] *** aborazmeh left
[06:16] <lookatme> How can I declare a sub/function type has specify signature ?

[06:16] <jmerelo> lookatme: what do you mean?

[06:16] <lookatme> like C does : typedef int (*intfun_t)(void); intfun_t s; s is a function

[06:17] <jmerelo> lookatme: pretty much in the same way https://docs.perl6.org/syntax/Constraining%20signatures%20of%20Callables

[06:18] <lookatme> Hmm, I am trying to use subset but not working

[06:18] <lookatme> m:　subset WalkCb of Callable where *.signature ~~ :(Int $a); my WalkCb $x = sub (Int $a) { return $a; };

[06:18] <camelia> rakudo-moar b8318b8ed: OUTPUT: «Type check failed in assignment to $x; expected WalkCb but got Sub (sub (Int $a) { #`(Sub...)␤  in block <unit> at <tmp> line 1␤␤»

[06:19] <jmerelo> lookatme: would you mind to post it too in StackOverflow? It's the kind of thing that belongs there too.

[06:20] <jmerelo> m:　subset WalkCb of Callable where *.signature ~~ :(Int $a); my WalkCb $x = sub (Int $b) { return $b; }; 

[06:20] <camelia> rakudo-moar b8318b8ed: OUTPUT: «Type check failed in assignment to $x; expected WalkCb but got Sub (sub (Int $b) { #`(Sub...)␤  in block <unit> at <tmp> line 1␤␤»

[06:20] <jmerelo> m:　subset WalkCb of Callable where *.signature ~~ :(Int $a); my WalkCb $x = -> Int $b { return $b; }; 

[06:20] <camelia> rakudo-moar b8318b8ed: OUTPUT: «Type check failed in assignment to $x; expected WalkCb but got Block (-> Int $b { #`(Block|...)␤  in block <unit> at <tmp> line 1␤␤»

[06:21] <jmerelo> m:　subset WalkCb of Block where *.signature ~~ :(Int $a); my WalkCb $x = -> Int $b { return $b; }; 

[06:21] <camelia> rakudo-moar b8318b8ed: OUTPUT: «Type check failed in assignment to $x; expected WalkCb but got Block (-> Int $b { #`(Block|...)␤  in block <unit> at <tmp> line 1␤␤»

[06:22] <jmerelo> m:　subset WalkCb of Block where *.signature ~~ :(Int $a); my WalkCb $x = WalkCb.new(-> Int $b { return $b; }); 

[06:22] <camelia> rakudo-moar b8318b8ed: OUTPUT: «Default constructor for 'WalkCb' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»

[06:22] <El_Che> I don't think you can declare signatures as a type

[06:23] <lookatme> Do you have any other suggestions ?

[06:23] <lookatme> El_Che, :)

[06:23] <jmerelo> m:　subset WalkCb of Block where *.signature ~~ :(Int $a); my WalkCb $x = (-> Int $b { return $b; }).WalkCb; 

[06:23] <camelia> rakudo-moar b8318b8ed: OUTPUT: «No such method 'WalkCb' for invocant of type 'Block'␤  in block <unit> at <tmp> line 1␤␤»

[06:23] <jmerelo> m:　subset WalkCb of Block where *.signature ~~ :(Int $a); my WalkCb $x = -> Int $b { return $b; }; 

[06:23] <camelia> rakudo-moar b8318b8ed: OUTPUT: «Type check failed in assignment to $x; expected WalkCb but got Block (-> Int $b { #`(Block|...)␤  in block <unit> at <tmp> line 1␤␤»

[06:23] *** domidumont joined
[06:24] <jmerelo> m:　subset WalkCb of Block where *.signature ~~ :(Int $a); my WalkCb $x = -> Int { return $_; }; 

[06:24] <camelia> rakudo-moar b8318b8ed: OUTPUT: «Type check failed in assignment to $x; expected WalkCb but got Block (-> Int $ { #`(Block|5...)␤  in block <unit> at <tmp> line 1␤␤»

[06:24] *** mcmillhj joined
[06:24] <jmerelo> lookatme: definitely StackOverflow

[06:24] <El_Che> there is one already

[06:25] <El_Che> but I can't find it

[06:25] <jmerelo> El_Che: if you mean the one on using signatures as variables, I don't think that one fits here...

[06:25] <lookatme> on the stackoverflow ?

[06:26] <jmerelo> El_Che: you mean this one? https://stackoverflow.com/questions/41531393/can-i-use-a-standalone-signature-as-a-signature-in-perl-6

[06:27] <El_Che> yes

[06:27] <jmerelo> m: my $x = -> Int { return $_; }; say $x.signature

[06:27] <camelia> rakudo-moar b8318b8ed: OUTPUT: «(Int)␤»

[06:28] <jmerelo> m: my $x = -> Int { return $_; }; say $x.signature ~~ Int

[06:28] <camelia> rakudo-moar b8318b8ed: OUTPUT: «False␤»

[06:28] <jmerelo> m: my $x = -> Int { return $_; }; say $x.signature ~~ "Int"

[06:28] <camelia> rakudo-moar b8318b8ed: OUTPUT: «False␤»

[06:28] <jmerelo> m: my $x = -> Int { return $_; }; say $x.signature ~~ :(Int)

[06:28] <camelia> rakudo-moar b8318b8ed: OUTPUT: «True␤»

[06:28] <El_Che> https://stackoverflow.com/questions/44093690/how-to-reuse-a-signature/44097741#44097741

[06:28] <El_Che> dunno is it's applicable

[06:28] <jmerelo> m:　subset WalkCb of Block where *.signature ~~ :(Int); my WalkCb $x = -> Int { return $_; }; 

[06:28] <camelia> rakudo-moar b8318b8ed: OUTPUT: «Type check failed in assignment to $x; expected WalkCb but got Block (-> Int $ { #`(Block|8...)␤  in block <unit> at <tmp> line 1␤␤»

[06:29] *** mcmillhj left
[06:30] *** domidumont left
[06:30] <jmerelo> El_Che: it kinda is, but it implies it should work...

[06:30] <jmerelo> m: my $x = -> Int { return $_; }; say $x.^name

[06:30] <camelia> rakudo-moar b8318b8ed: OUTPUT: «Block␤»

[06:30] <lookatme> Seems like there's no way to do like C does :)

[06:31] *** domidumont joined
[06:31] <jmerelo> lookatme: there is definitely one way. But whoever is around here now does not know the answer... That's why it's better if you post it on StackOverflow, where the most knowledgeable Perl6 people dwell

[06:33] <lookatme> I am not have time to post it on the StackOverflow

[06:33] <jmerelo> lookatme: OK, I'll do it for you then

[06:34] <lookatme> Thanks, and hope you understand me :)

[06:34] *** robertle joined
[06:36] *** mcmillhj joined
[06:36] <El_Che> I don't see in the answer where foo is called

[06:37] <El_Che> ahah , I see it

[06:37] <El_Che> never mind :)

[06:37] <El_Che> if it's a solution, it's ugly

[06:38] <El_Che> if the signatures are the same, make a common sub/method and pass the parameters by a wrapper sub/method?

[06:38] <El_Che> the error would be less obvious for the user, but's it's only one indirection

[06:39] *** darutoko joined
[06:39] <jmerelo> m:　subset WalkCb of Block where *.signature ~~ :(Int $); my WalkCb $x = -> Int { return $_; }; 

[06:39] <camelia> rakudo-moar b8318b8ed: OUTPUT: «Type check failed in assignment to $x; expected WalkCb but got Block (-> Int $ { #`(Block|7...)␤  in block <unit> at <tmp> line 1␤␤»

[06:39] <jmerelo> m:　subset WalkCb of Block where *.signature ~~ :($); my WalkCb $x = -> Int { return $_; }; 

[06:39] <camelia> rakudo-moar b8318b8ed: OUTPUT: «Type check failed in assignment to $x; expected WalkCb but got Block (-> Int $ { #`(Block|7...)␤  in block <unit> at <tmp> line 1␤␤»

[06:40] <jmerelo> m:　subset WalkCb of Block where *.signature ~~ :(Int); my $x = -> Int { return $_; }; say $x.signature; my WalkCb $y = $x;

[06:40] <camelia> rakudo-moar b8318b8ed: OUTPUT: «(Int)␤Type check failed in assignment to $y; expected WalkCb but got Block (-> Int $ { #`(Block|5...)␤  in block <unit> at <tmp> line 1␤␤»

[06:41] <jmerelo> OK, I think I know the answer

[06:41] *** mcmillhj left
[06:41] <jmerelo> m:　subset WalkCb of Block where *.signature ~~ :(Int, -> Int); my $x = -> Int { return $_; }; say $x.signature; my WalkCb $y = $x;

[06:41] <camelia> rakudo-moar b8318b8ed: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> 3b of Block where *.signature ~~ :(Int, -7⏏5> Int); my $x = -> Int { return $_; }; s␤»

[06:41] <jmerelo> m:　subset WalkCb of Block where *.signature ~~ :(Int, --> Int); my $x = -> Int { return $_; }; say $x.signature; my WalkCb $y = $x;

[06:41] <camelia> rakudo-moar b8318b8ed: OUTPUT: «(Int)␤Type check failed in assignment to $y; expected WalkCb but got Block (-> Int $ { #`(Block|7...)␤  in block <unit> at <tmp> line 1␤␤»

[06:42] <jmerelo> m:　subset WalkCb of Block where *.signature ~~ :(Int $a --> Int); my $x = -> Int $a { return $a; }; say $x.signature; 

[06:42] <camelia> rakudo-moar b8318b8ed: OUTPUT: «(Int $a)␤»

[06:43] <jmerelo> No I don't.

[06:43] <jmerelo> m:　subset WalkCb of Block where *.signature ~~ :(Int $a --> Int); my WalkCb $x = -> Int $a { return $a; }; 

[06:43] <camelia> rakudo-moar b8318b8ed: OUTPUT: «Type check failed in assignment to $x; expected WalkCb but got Block (-> Int $a { #`(Block|...)␤  in block <unit> at <tmp> line 1␤␤»

[06:44] <jmerelo> lookatme: Check it out in StackOverflow https://stackoverflow.com/questions/50384890/subsetting-blocks-or-callables-in-general

[06:49] *** mcmillhj joined
[06:51] *** rindolf joined
[06:53] *** abraxxa joined
[06:55] *** mcmillhj left
[06:55] *** Ven`` joined
[06:57] *** kurahaupo joined
[06:58] *** kurahaupo_ left
[06:59] <lookatme> jmerelo, I am not mean **using subset**, it's fine if we have any other way to do it :)

[07:01] *** Ven`` left
[07:01] <lookatme> It's like a function pointer of C, I just thought it's looks easy to do it with subset

[07:01] *** shareable6 joined
[07:02] <jmerelo> lookatme: that's why it's always better if you do it yourself :-) I have edited it, though

[07:03] *** kurahaupo_ joined
[07:03] <lookatme> jmerelo, haha, Never mind  

[07:04] *** kurahaupo left
[07:05] *** mcmillhj joined
[07:06] *** kurahaupo joined
[07:08] *** kurahaupo_ left
[07:09] <Geth> ¦ doc: e295315c72 | (JJ Merelo)++ | doc/Type/List.pod6

[07:09] <synopsebot> Link: https://doc.perl6.org/type/List

[07:09] <Geth> ¦ doc: Aggregates sink, closes #1607

[07:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e295315c72

[07:09] *** mcmillhj left
[07:17] *** Ven`` joined
[07:24] *** wamba joined
[07:30] *** amalia___ joined
[07:34] *** enheh joined
[07:38] *** mcmillhj joined
[07:40] *** ignis__away joined
[07:43] *** ignis__away left
[07:43] *** mcmillhj left
[07:46] *** ignis__away joined
[07:49] <Geth> ¦ doc/master: 5 commits pushed by (JJ Merelo)++

[07:49] <Geth> ¦ doc/master: 48de89f751 | Adds import

[07:49] <Geth> ¦ doc/master: 5116e3c83f | Adds lexing refs #622

[07:49] <Geth> ¦ doc/master: 6254b21270 | Adds sigilless variables refs #622

[07:49] <Geth> ¦ doc/master: fbe1a60687 | Adds token refs #622

[07:49] <Geth> ¦ doc/master: 9acacc810c | Adds variable interpolation

[07:49] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/e295315c7201...9acacc810cae

[07:49] *** scimon joined
[07:52] *** ignis__away is now known as vivus-ignis

[07:52] *** mcmillhj joined
[07:55] *** shareable6 left
[07:57] *** mcmillhj left
[08:06] *** lookatme left
[08:07] *** lookatme joined
[08:07] <jmerelo> squashable6: status

[08:07] <squashable6> jmerelo, Next SQUASHathon in 15 days and ≈1 hour (2018-06-02 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[08:17] *** Ven`` left
[08:20] *** Ven`` joined
[08:20] *** dakkar joined
[08:24] *** mcmillhj joined
[08:26] *** Ven`` left
[08:29] *** mcmillhj left
[08:31] *** Ven`` joined
[08:35] *** Ven`` left
[08:35] <jmerelo> .tell lookatme The solution is here https://stackoverflow.com/questions/50384890/subsetting-blocks-or-callables-in-general/50386481#50386481 (by LizMat)

[08:35] <yoleaux> jmerelo: I'll pass your message to lookatme.

[08:37] <lookatme> .

[08:37] <tyil> weekly: https://www.reddit.com/r/ProgrammingLanguages/comments/8k257l/what_do_you_think_about_perl6/

[08:37] <yoleaux> 08:35Z <jmerelo> lookatme: The solution is here https://stackoverflow.com/questions/50384890/subsetting-blocks-or-callables-in-general/50386481#50386481 (by LizMat)

[08:37] <notable6> tyil, Noted!

[08:37] <lookatme> jmerelo, hmm, I see thanks

[08:39] <lizmat> tyil++

[08:40] <tyil> lizmat: putting it straight into notable6 is easier than poking you every time I see or comment about Perl 6 and then have you do it :p

[08:40] <lookatme> But I wonder is this form should work fine ? `subset WalkCb of Callable where *.signature ~~ :(Int $a); `

[08:40] <lizmat> tyil: yeah, I would suggest other people do this as well, BTW  :-)

[08:40] <lookatme> or this is just a bug

[08:40] <lizmat> lookatme: https://github.com/rakudo/rakudo/issues/1836   # I just opened an issue for it

[08:41] <tyil> lizmat: I'll take make a note of it when I see it happen to tell other people to throw it into notable6 :>

[08:41] <lookatme> oh, I see lizmat 

[08:42] <lizmat> afk for a few hours&

[08:45] <El_Che> lizmat is fast, when I wanted to post something on SO she already did :)

[08:46] *** mcmillhj joined
[08:50] *** shareable6 joined
[08:50] *** ChanServ sets mode: +v shareable6

[08:51] *** mcmillhj left
[08:58] <jmerelo> weekly: https://twitter.com/raiph_mellor/status/996332888504270850 on Perl 6 and type systems.

[08:58] <notable6> jmerelo, Noted!

[09:07] *** vivus-ignis is now known as ignis__away

[09:10] *** ignis__away is now known as vivus-ignis

[09:14] *** pmurias joined
[09:15] <pmurias> to be honest the "gradual" typing of Perl 6 sucks compared to real gradual typing as is more of language weakness than a strength

[09:16] <hahainternet> i can't say i've ever fully understood HM

[09:17] <hahainternet> but strong typing does seem to be the right way to go whenever possible

[09:22] <lookatme> :) I have another question now

[09:22] <lookatme> m: use NativeCall; sub create-pointer(::T $a) is export { my CArray[T] $c = CArray[T].new; $c[0] := T.new(0); nativecast(Pointer[T], $c); }

[09:22] <camelia> rakudo-moar b8318b8ed: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while parameterizing CArray␤at <tmp>:1␤Exception details:␤  Type check failed in binding to parameter '<anon>'; expected Any but got T (?)␤    in method parameterize at /ho…»

[09:23] <lookatme> Is there a better way create a nativecall pointer to something ?

[09:23] <lookatme> seems like CArray can not work with parameter T

[09:23] *** pmurias left
[09:24] <lookatme> I am off work now, have no time talk about it, just post question here

[09:26] *** kurahaupo_ joined
[09:28] *** kurahaupo left
[09:29] *** FROGGS joined
[09:29] <FROGGS> jnthn: should Perl6 be listed here too? http://reactivex.io/languages.html

[09:31] *** kurahaupo joined
[09:32] *** kurahaupo left
[09:33] *** kurahaupo joined
[09:33] *** kurahaupo_ left
[09:41] <jmerelo> lookatme: maybe just use CPointer?

[09:41] <jmerelo> FROGGS: most probably...

[09:42] *** HaraldJoerg joined
[09:53] <jnthn> FROGGS: Probably. We liked it so much we built it in to the language's standard library. :-)

[09:55] <FROGGS> jnthn: that's what I mean... are you goiing to inform them, or shall I?

[09:58] <jnthn> FROGGS: If you're up for it, please do :)

[09:58] * jnthn has a few too many things to do at the moment

[10:00] *** wamba left
[10:00] *** zakharyas left
[10:02] <FROGGS> k

[10:03] *** vivus-ignis is now known as ignis__away

[10:07] *** kurahaupo_ joined
[10:09] *** kurahaupo_ left
[10:10] *** kurahaupo_ joined
[10:12] *** kurahaupo left
[10:13] *** kurahaupo joined
[10:14] *** kurahaupo_ left
[10:20] <lizmat> pmurias: would you care to elaborate on the sucking of gradual typing in Perl 6 ?

[10:22] <jmerelo> lizmat: right. It's not Haskell, but it's good enough and very useful for lots of things.

[10:22] <buggable> New CPAN upload: Desktop-Notify-0.3.0.tar.gz by FRITH http://modules.perl6.org/dist/Desktop::Notify:cpan:FRITH

[10:24] *** nightfrog joined
[10:33] *** markong joined
[10:40] *** xtreak joined
[10:43] <lizmat> m: my constant A = :(Int $);   # probably related to #1836

[10:43] <camelia> rakudo-moar b8318b8ed: OUTPUT: «===SORRY!===␤QAST::Block with cuid 1 has not appeared␤»

[10:43] <lizmat> R #1836

[10:44] <lizmat> GH #1836

[10:44] <lizmat> hmmm

[10:44] <lizmat> https://github.com/rakudo/rakudo/issues/1836

[10:52] *** atroxaper left
[10:57] *** ignis__away is now known as vivus-ignis

[10:57] *** w_richard_w left
[11:03] *** Ven`` joined
[11:07] *** w_richard_w joined
[11:11] *** eliasr joined
[11:12] *** Actualeyes left
[11:22] *** w_richard_w left
[11:40] *** enheh left
[11:52] *** softmoth joined
[11:57] *** ExtraCrispy left
[12:01] *** mcmillhj joined
[12:05] *** raschipi joined
[12:11] *** titsuki_ left
[12:14] *** ExtraCrispy joined
[12:24] <robertle> .seen DrForr

[12:24] <yoleaux> I saw DrForr 13 Apr 2018 14:25Z in #perl6: <DrForr> My head isn't in that space right now otherwise I'd look for possible examples...

[12:29] <El_Che> it's been a while

[12:29] <robertle> yeah, darn

[12:30] <robertle> I need something like TT for perl6, and saw that he has started on that. but don't know what the state is and where things are going...

[12:30] <lizmat> fwiw, he appears to be active on FB

[12:30] <robertle> FB?

[12:30] <lizmat> FaceBook

[12:30] <timotimo> is tt template toolkit?

[12:30] <robertle> ah, that!

[12:30] <robertle> yeah tempalte toolkit

[12:30] <timotimo> in such a case i'd suggest looking at the test suite

[12:31] <robertle> I did! 

[12:31] <robertle> so basically it looks as if the perl 6 version is some way there, but not entirely. probably about 50% of the features I need, less on the arcane ones

[12:32] <timotimo> ah, that sucks i guess

[12:32] <timotimo> time for Inline::Perl5 ;)

[12:32] <robertle> I guess to contribute would be to port more of the tests from the perl5 version and then fix them :)

[12:32] <robertle> but I am just wondering what his thoughts on the thing are. perhaps there is a reason for not going down that route? 

[12:35] *** softmoth left
[12:38] * lizmat suggests lack of tuits

[12:41] <El_Che> lizmat: you could be a house with tuits

[12:42] <lizmat> hehe...

[12:42] <lizmat> but first some time afk&

[12:43] *** lizmat left
[12:50] *** xtreak left
[12:56] *** xtreak joined
[13:00] *** lalitmee joined
[13:00] *** jmerelo left
[13:02] *** lizmat joined
[13:02] *** athenot joined
[13:03] *** vivus-ignis is now known as ignis__away

[13:04] *** ignis__away is now known as vivus-ignis

[13:15] *** lizmat_ joined
[13:16] *** lizmat left
[13:17] *** HaraldJoerg1 joined
[13:18] *** HaraldJoerg left
[13:18] *** mcmillhj_ joined
[13:21] *** itaipu joined
[13:24] *** lizmat_ is now known as lizmat

[13:31] *** Ven`` left
[13:32] *** skids joined
[13:33] *** mcmillhj left
[13:36] *** lucasb joined
[13:40] *** Ven`` joined
[13:41] *** Ven`` left
[13:42] *** softmoth joined
[13:44] *** softmoth left
[13:45] *** softmoth joined
[13:48] *** xtreak left
[13:51] *** kurahaupo left
[13:51] *** kurahaupo_ joined
[13:52] *** mahafyi joined
[14:01] *** FROGGS left
[14:03] *** mcmillhj_ left
[14:04] *** Ven`` joined
[14:04] *** Zoffix joined
[14:04] *** Zoffix left
[14:07] *** mcmillhj joined
[14:09] *** lizmat left
[14:10] *** curan left
[14:11] *** wamba joined
[14:12] *** mcmillhj_ joined
[14:13] *** Ven`` left
[14:15] *** Ven`` joined
[14:19] *** vivus-ignis is now known as ignis__away

[14:20] *** lalitmee left
[14:25] *** ignis__away is now known as vivus-ignis

[14:27] *** shareable6 left
[14:31] *** vivus-ignis left
[14:32] *** molaf joined
[14:34] *** xinming_ left
[14:35] *** xinming joined
[14:37] *** colomon joined
[14:39] *** Actualeyes joined
[14:40] *** kybr left
[14:42] *** Guest66362 joined
[14:47] <ufobat> timotimo, something new regarding my jit error?

[14:49] *** scovit left
[14:59] <MasterDuke> ufobat: you have a one-liner to repro it, right?

[14:59] <ufobat> yap

[15:00] <ufobat> perl6 -e 'use LibCurl::HTTP; my $url= "https://1.eu.dl.wireshark.org/src/wireshark-2.5.1.tar.xz"; my $http = LibCurl::HTTP.new( :ssl-verifypeer(False), :ssl-verifyhost(False) ); $http.GET($url).setopt(:!failonerror).perform.say' 

[15:01] <ufobat> it just happens with "larger" http get requests

[15:04] <MasterDuke> ufobat: which libcurl do you have? apparently i have to choose between openssl, nss, and gnutls

[15:06] *** robertle left
[15:11] <ufobat> installed on my ubuntu is libcurl3, libcurl3-gnutls and libcurl4-oepnssl-dev

[15:16] *** atroxaper joined
[15:17] *** HaraldJoerg joined
[15:17] *** raynold left
[15:18] *** HaraldJoerg1 left
[15:20] <MasterDuke> ufobat: i don't have any fixes, but i created https://github.com/MoarVM/MoarVM/issues/862

[15:22] <ufobat> okay

[15:22] *** Ven`` left
[15:25] *** shareable6 joined
[15:35] *** skids left
[15:37] <mahafyi> hi. I am looking to update rakudo-star-2017.10 to 2018.04? Is there an uninstallation step, or a howto guide for this? I am using debian 9.

[15:39] *** softmoth left
[15:39] *** softmoth joined
[15:39] <mahafyi> is it sufficient to simple install the latest version in a folder and change the $PATH, then delete the older version src folder?

[15:41] <MasterDuke> mahafyi: how did you install 2017.10? from a repo?

[15:42] *** Guest66362 left
[15:42] <mahafyi> MasterDuke : no, i downloaded it and installed 

[15:42] <mahafyi> http://perl6intro.com/#_installing_perl_6

[15:43] <mahafyi> from source

[15:44] <mahafyi> then, i added "/opt/rakudo-star-2017.10/bin:/opt/rakudo-star-2017.10/share/perl6/site/bin" in $PATH

[15:46] <MasterDuke> yeah, what you said earlier should work

[15:46] <MasterDuke> huggable: debs

[15:46] <huggable> MasterDuke, CentOS, Debian, Fedora and Ubuntu Rakudo packages: https://github.com/nxadm/rakudo-pkg/releases

[15:46] <MasterDuke> there're also those ^^^

[15:47] <MasterDuke> and i think 9 actually has a rakudo package (not sure if star) in their repos

[15:51] *** skids joined
[15:53] <mahafyi> thanks

[15:56] *** amalia___ left
[15:56] *** ExtraCrispy left
[15:57] <raschipi> MasterDuke: There's no star in Debian

[15:57] <raschipi> No zef either

[15:58] *** mcmillhj_ left
[15:58] <MasterDuke> ah, thanks

[16:00] *** sno left
[16:02] *** SysPete joined
[16:02] <buggable> New CPAN upload: Test-Declare-0.0.1.tar.gz by DARRENF https://cpan.metacpan.org/authors/id/D/DA/DARRENF/Perl6/Test-Declare-0.0.1.tar.gz

[16:02] *** SysPete left
[16:03] <El_Che> mahafyi: ping me if you have question about the rakudo-pkg repos and packaged

[16:03] <El_Che> if you use debian, centos, fedora, opensuse or ubuntu the easiest way is to use the repos

[16:03] <El_Che> you'll get updates automatically

[16:04] *** softmoth left
[16:04] *** AlexDaniel joined
[16:04] <El_Che> rakudo-pkg has rakudo and zef installed and a few scripts to install zef as a user, set the path and use it in de windows sbsystem for linux

[16:04] *** softmoth joined
[16:06] <El_Che> mahafyi: https://github.com/nxadm/rakudo-pkg#os-repositories

[16:07] <El_Che> in case you want to use rakudo star, get it from the main rakudo page and compile the source

[16:10] <mahafyi> El-Che : thank you

[16:10] *** mahafyi left
[16:10] *** mahafyi joined
[16:13] *** skids left
[16:20] <jkramer> Is there a shorter way of flattening an array of arrays than @x.flatmap(*.flat)?

[16:21] <timotimo> m: my @aoa = <hi bye>, <foo bar>, <a b c>; say @aoa.map(*.Slip).List;

[16:21] <camelia> rakudo-moar 8ccda1890: OUTPUT: «(hi bye foo bar a b c)␤»

[16:21] <timotimo> m: my @aoa = <hi bye>, <foo bar>, <a b c>; say @aoa.map(*.Slip).List.perl;

[16:21] <camelia> rakudo-moar 8ccda1890: OUTPUT: «("hi", "bye", "foo", "bar", "a", "b", "c")␤»

[16:21] <timotimo> m: my @aoa = <hi bye>, <foo bar>, <a b c>; say @aoa.map(*.Slip).perl;

[16:21] <camelia> rakudo-moar 8ccda1890: OUTPUT: «("hi", "bye", "foo", "bar", "a", "b", "c").Seq␤»

[16:21] <timotimo> m: my @aoa = <hi bye>, <foo bar>, <a b c>; say @aoa>>.Slip.perl;

[16:21] <camelia> rakudo-moar 8ccda1890: OUTPUT: «(slip("hi", "bye"), slip("foo", "bar"), slip("a", "b", "c"))␤»

[16:21] <timotimo> OK, the map does the magic

[16:21] <timotimo> m: my @aoa = <hi bye>, <foo bar>, <a b c>; say @aoa>>.Slip.List.perl;

[16:21] <camelia> rakudo-moar 8ccda1890: OUTPUT: «(slip("hi", "bye"), slip("foo", "bar"), slip("a", "b", "c"))␤»

[16:21] <timotimo> yeah, i think the map(*.Slip) is the shortest

[16:22] <timotimo> m: my @aoa = <hi bye>, <foo bar>, <a b c>; say @aoa.map(&slip).perl;

[16:22] <camelia> rakudo-moar 8ccda1890: OUTPUT: «("hi", "bye", "foo", "bar", "a", "b", "c").Seq␤»

[16:22] <timotimo> that's one character shorter

[16:22] <jkramer> :D

[16:23] <jkramer> Nice, thanks

[16:24] <jkramer> m: my @aoa = <hi bye>, <foo bar>, <a b c>; say @aoa.map(|*).perl;

[16:24] <camelia> rakudo-moar 8ccda1890: OUTPUT: «("hi", "bye", "foo", "bar", "a", "b", "c").Seq␤»

[16:24] <jkramer> Saved 3 more chars :)

[16:24] <El_Che> the last one is nice

[16:25] <Geth> ¦ ecosystem: darrenf++ created pull request #396: Add https://github.com/darrenf/p6-test-declare

[16:25] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/396

[16:25] *** raschipi left
[16:26] <timotimo> ah, of course

[16:26] *** skids joined
[16:28] *** domidumont left
[16:30] *** Zoffix joined
[16:30] <Zoffix> m: my @aoa := <hi bye>, <foo bar>, <a b c>; dd @aoa.flat

[16:30] <camelia> rakudo-moar 8ccda1890: OUTPUT: «("hi", "bye", "foo", "bar", "a", "b", "c").Seq␤»

[16:30] <Zoffix> Don't make them arrays in the first place :)

[16:31] <Zoffix> m: my @aoa = <hi bye>, <foo bar>, <a b c>; dd |«@aoa

[16:31] <camelia> rakudo-moar 8ccda1890: OUTPUT: «[("hi", "bye"), ("foo", "bar"), ("a", "b", "c")]␤»

[16:31] <Zoffix> Would've though this'd work

[16:32] *** raschipi joined
[16:33] <Zoffix> m: &prefix:<|> does role { method nodal { }}; my @aoa = <a b c>, <d e f>, <g h i>; dd |«@aoa

[16:33] <camelia> rakudo-moar 8ccda1890: OUTPUT: «(slip("a", "b", "c"), slip("d", "e", "f"), slip("g", "h", "i"))␤»

[16:33] <Zoffix> m: &prefix:<|> does role { method nodal { }}; my @aoa = <a b c>, <d e f>, <g h i>; dd flat |«@aoa

[16:33] <camelia> rakudo-moar 8ccda1890: OUTPUT: «("a", "b", "c", "d", "e", "f", "g", "h", "i").Seq␤»

[16:34] *** scimon left
[16:34] <El_Che> throw a .list somewhere :)

[16:34] <Geth> ¦ ecosystem: 9a9109876c | (Darren Foreman)++ (committed by Zoffix Znet) | META.list

[16:34] <Geth> ¦ ecosystem: Add https://github.com/darrenf/p6-test-declare (#396)

[16:34] <Geth> ¦ ecosystem: 

[16:34] <Geth> ¦ ecosystem: `Test::Declare` is a rudimentary way to express test scenarios in a fairly declarative sense. Assuming I understand the word 'declarative' properly.

[16:34] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/9a9109876c

[16:35] <Zoffix> m: my @aoa = <hi bye>, <foo bar>, <a b c>; dd @aoa».list.flat

[16:35] <camelia> rakudo-moar 8ccda1890: OUTPUT: «("hi", "bye", "foo", "bar", "a", "b", "c").Seq␤»

[16:36] *** wamba left
[16:37] <Zoffix> m: my @aoa = <hi bye>, <foo bar>, <a b c>; dd @aoa»<>.flat

[16:37] <camelia> rakudo-moar 8ccda1890: OUTPUT: «("hi", "bye", "foo", "bar", "a", "b", "c").Seq␤»

[16:37] *** dakkar left
[16:38] <Zoffix> .oO( rocket operator )

[16:39] <TimToady> for a more general but longer solution:

[16:39] <yoleaux> 12:22Z <lizmat> TimToady: opinions about https://github.com/rakudo/rakudo/commit/8ae82a558b ?

[16:39] <TimToady> m: my @aoa = <hi bye>, <foo bar>, <a b c>; say gather @aoa.deepmap(*.take)

[16:39] <camelia> rakudo-moar 8ccda1890: OUTPUT: «(hi bye foo bar a b c)␤»

[16:40] <TimToady> m: my @aoa = <hi bye>, <foo bar>, <a b c>; say gather @aoa».take

[16:40] <camelia> rakudo-moar 8ccda1890: OUTPUT: «(hi bye foo bar a b c)␤»

[16:40] <TimToady> I guess that works too

[16:40] <TimToady> m: my @aoa = <hi bye>, <foo bar>, <a b c>; say (gather @aoa».take).perl

[16:40] <camelia> rakudo-moar 8ccda1890: OUTPUT: «("hi", "bye", "foo", "bar", "a", "b", "c").Seq␤»

[16:42] <Zoffix> TimToady: the .take destroys Pair objects

[16:42] <Zoffix> um

[16:42] <Zoffix> Yeah, Pairs of Hashes

[16:42] <Zoffix> m: my @aoa = <hi bye>, <foo bar>, %(:42foo, :100bar); say (gather @aoa».take).perl

[16:42] <camelia> rakudo-moar 8ccda1890: OUTPUT: «("hi", "bye", "foo", "bar", 100, 42).Seq␤»

[16:43] <Zoffix> m: my @aoa = <hi bye>, <foo bar>, %(:42foo, :100bar); dd @aoa»<>.flat

[16:43] <camelia> rakudo-moar 8ccda1890: OUTPUT: «("hi", "bye", "foo", "bar", :foo(42), :bar(100)).Seq␤»

[16:43] <Zoffix> but the rocket operator does more or less the Right Thing™

[16:45] <Zoffix> (the .take stuff isn't a bug, but a WAT side of the DWIM for hypering stuff over hashes):

[16:45] <Zoffix> m: dd %(:42foo, :100bar)».flip

[16:45] <camelia> rakudo-moar 8ccda1890: OUTPUT: «Hash % = {:bar("001"), :foo("24")}␤»

[16:46] *** raschipi left
[16:49] <Zoffix> m: sub postfix:<🚀> { $^v»<> }; my @aoa = <hi bye>, <foo bar>, %(:42foo, :100bar); dd @aoa🚀.flat

[16:49] <camelia> rakudo-moar 8ccda1890: OUTPUT: «("hi", "bye", "foo", "bar", :bar(100), :foo(42)).Seq␤»

[16:49] <Zoffix> ^_^

[16:50] <El_Che> it doesn't take long for Zoffix to end with emojis

[16:50] <El_Che> he never disappoints :)

[16:50] *** Guest629 joined
[16:50] * TimToady wonders what emotion is indicated by a rocket...

[16:51] *** atroxaper left
[16:52] <TimToady> imminent burnout, perhaps...

[16:54] <Zoffix> excitement

[16:55] <Zoffix> 😺🌟😺🚀😻🖖🚀😸🚀

[16:56] *** softmoth left
[16:56] *** Zoffix left
[16:57] *** softmoth joined
[16:58] *** Guest629 left
[16:58] *** vivus-ignis joined
[16:59] *** softmoth left
[17:00] *** softmoth joined
[17:05] *** domidumont joined
[17:06] *** raynold joined
[17:06] *** raynold left
[17:07] <b2gills> .tell tyil The problem is actually that ~~ doesn't participate in WhateverCode lambdas see: https://stackoverflow.com/a/50395077/1337

[17:07] <yoleaux> b2gills: I'll pass your message to tyil.

[17:07] <b2gills> m: subset WalkCb of Callable where .signature ~~ :(Int $); my WalkCb $x = sub (Int $a) { return $a }; say $x(42)

[17:07] <camelia> rakudo-moar 8ccda1890: OUTPUT: «42␤»

[17:07] *** raynold joined
[17:08] <tyil> b2gills: I am missing context

[17:08] <yoleaux> 17:07Z <b2gills> tyil: The problem is actually that ~~ doesn't participate in WhateverCode lambdas see: https://stackoverflow.com/a/50395077/1337

[17:09] <tyil> b2gills: I don't recall having issues with this

[17:11] *** mcmillhj_ joined
[17:12] <b2gills> m: my &f = *.signature

[17:12] <camelia> rakudo-moar 8ccda1890: ( no output )

[17:12] <b2gills> m: my &f = *.signature ~~ :(;; $); # not a lambda so it fails

[17:12] <camelia> rakudo-moar 8ccda1890: OUTPUT: «Type check failed in assignment to &f; expected Callable but got Bool (Bool::False)␤  in block <unit> at <tmp> line 1␤␤»

[17:14] <b2gills> m: say *.signature ~~ :(;; $ is raw); # not a lambda so it fails

[17:14] <camelia> rakudo-moar 8ccda1890: OUTPUT: «False␤»

[17:17] <b2gills> m: say [*.signature][0].signature ~~ :(;; $ is raw);

[17:17] <camelia> rakudo-moar 8ccda1890: OUTPUT: «True␤»

[17:22] *** mcmillhj_ left
[17:23] *** mahafyi left
[17:27] *** enheh joined
[17:48] *** lichtkind joined
[17:51] *** Zoffix joined
[17:51] <Zoffix> Look what I got in mail: https://i.imgur.com/xT2LSW4.jpg

[17:51] * Zoffix collects a 100 nerd points, reaching a new level

[17:52] *** lucasb left
[17:53] *** vivus-ignis is now known as ignis__away

[17:53] <Juerd> Zoffix: Nice!

[17:55] <Zoffix> :)

[17:58] <TimToady> I hope that's a non-breaking space...

[17:58] <Zoffix> :D

[17:59] <MasterDuke> cool

[18:07] *** cpup joined
[18:09] <El_Che>  Zoffix: Oh, did we forget to tell you about the renamingM

[18:09] <El_Che> M

[18:10] <El_Che> ?

[18:10] <Zoffix> I can always order another set of plates :P

[18:10] <Zoffix> And it's not a rename, it's a creation of alias :)

[18:11] <El_Che> Yeah, everyone know Carlos the Jackal by his real name Ilich Ramírez Sánchez

[18:13] <El_Che> great geeky plates by the way

[18:13] *** [particle] left
[18:13] *** [particle] joined
[18:17] *** pilne joined
[18:19] <TimToady> Our tiobe index might go up if we renamed it "Trump"...

[18:20] *** sauvin left
[18:20] *** ignis__away is now known as vivus-ignis

[18:21] *** comborico1611 joined
[18:21] <El_Che> tiobe index will go up if you rename it BlockChain6

[18:22] <timotimo> TimToady: i imagine if we called it "TV" there'd be loads and loads of "tv programming" searches and results

[18:23] *** wamba joined
[18:25] <El_Che> lol

[18:26] <Zoffix> rofl

[18:26] *** jmerelo joined
[18:31] *** mcmillhj_ joined
[18:31] <jmerelo> O/

[18:31] <Kaiepi> \o

[18:32] *** cpup left
[18:34] *** shareable6 left
[18:34] *** FROGGS joined
[18:35] *** domidumont left
[18:41] *** lizmat joined
[18:48] *** vivus-ignis is now known as ignis__away

[18:58] *** darutoko left
[18:58] <jmerelo> A new question to stackoverflow, just in cae you can help https://stackoverflow.com/questions/50398709/debugging-into-function-calls

[18:59] *** sno joined
[19:09] <Geth> ¦ doc: 27b3eb7044 | (JJ Merelo)++ | doc/Language/contexts.pod6

[19:09] <synopsebot> Link: https://doc.perl6.org/language/contexts

[19:09] <Geth> ¦ doc: Adds indexing for contexts

[19:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/27b3eb7044

[19:10] *** colomon left
[19:20] *** FROGGS left
[19:21] *** ignis__away is now known as vivus-ignis

[19:27] *** jmerelo left
[19:27] *** shareable6 joined
[19:27] *** ChanServ sets mode: +v shareable6

[19:29] *** Guest26896 joined
[19:29] *** Guest26896 left
[19:31] *** aindilis left
[19:31] *** aindilis joined
[19:49] <ingy> can someone tell me how to do a string replace ($x ~~ s///) where rhs is a function?

[19:50] * ingy is glad laziness is a virtue here...

[19:51] <moritz> m: $x = 42; $x ~~ s[\d+] = 2 * $/; say $x

[19:51] <camelia> rakudo-moar 8ccda1890: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$x' is not declared␤at <tmp>:1␤------> 3<BOL>7⏏5$x = 42; $x ~~ s[\d+] = 2 * $/; say $x␤»

[19:51] <moritz> m: my $x = 42; $x ~~ s[\d+] = 2 * $/; say $x

[19:51] <camelia> rakudo-moar 8ccda1890: OUTPUT: «84␤»

[19:51] <moritz> ingy: ^^

[19:51] <Zoffix> m: my $x = 42; say $x.subst: /\d+/, 2 * *

[19:51] <camelia> rakudo-moar 8ccda1890: OUTPUT: «84␤»

[19:51] <ingy> https://docs.perl6.org/routine/subst ?

[19:52] <moritz> using a method when you could have used syntax is a boring cheat :-)

[19:52] <Zoffix> ingy: that's the method form of the op, yeah. The op is also available. Documented here: https://docs.perl6.org/syntax/s$SOLIDUS$SOLIDUS$SOLIDUS

[19:52] <ingy> moritz: can that usage use a set of statements?

[19:53] <Zoffix> ingy: you can use do {}

[19:53] <ingy> cool

[19:53] <ingy> moritz: agreed

[19:53] *** cpup joined
[19:53] <Zoffix> m: my $x = 42; $x ~~ s/\d+/{say "Looks like you want me to work with $0"; $0 × 2}/; say $x 

[19:53] <camelia> rakudo-moar 8ccda1890: OUTPUT: «Use of Nil in string context␤Looks like you want me to work with ␤0␤  in block  at <tmp> line 1␤Use of Nil in numeric context␤  in block  at <tmp> line 1␤»

[19:54] <Zoffix> m: my $x = 42; $x ~~ s/\d+/{say "Looks like you want me to work with $/"; $/ × 2}/; say $x 

[19:54] <camelia> rakudo-moar 8ccda1890: OUTPUT: «Looks like you want me to work with 42␤84␤»

[19:54] *** molaf left
[19:54] <ingy> :)

[19:54] <Zoffix> m: my $x = "42 by 3"; $x ~~ s/(\d+).+(\d+)/{say "Looks like you want me work with $0 and $1"; $0 × $1}/; say $x 

[19:54] <camelia> rakudo-moar 8ccda1890: OUTPUT: «Looks like you want me work with 42 and 3␤126␤»

[20:04] <ingy> how do I match [\-\w] in p6?

[20:07] *** sno left
[20:07] <ingy> ie p5 /[\-\w]/ to p6

[20:08] *** sno joined
[20:09] <rjbs> eval: ("fo-o bar" ~~ /(\w | "-")+/).gist.say

[20:09] <evalable6> rjbs, rakudo-moar 8ccda1890: OUTPUT: «｢fo-o｣␤ 0 => ｢f｣␤ 0 => ｢o｣␤ 0 => ｢-｣␤ 0 => ｢o｣␤»

[20:09] <rjbs> probably there's a better way

[20:11] <ingy> rjbs: thanks. I agree but in a hurry...

[20:12] <ingy> rjbs: do you happen to know how to make it non-capturing?

[20:12] <MasterDuke> [] are non-capturing groups

[20:13] <rjbs> eval: ("fo-o bar" ~~ /[\w|"-"]+/).gist.say

[20:13] <evalable6> rjbs, rakudo-moar 8ccda1890: OUTPUT: «｢fo-o｣␤»

[20:13] <ingy> well that's a mindf**k!

[20:13] <rjbs> MasterDuke: thanks :)

[20:14] *** vivus-ignis is now known as ignis__away

[20:14] <ingy> mostly like regexes except for the rest of the time :)

[20:14] <MasterDuke> m: say "fo-o bar" ~~ /<[-\w]>+/

[20:14] <camelia> rakudo-moar 8ccda1890: OUTPUT: «｢fo-o｣␤»

[20:14] <ingy> MasterDuke: thanks. and thanks for forking my mind

[20:14] <MasterDuke> np

[20:15] *** ignis__away is now known as vivus-ignis

[20:15] *** cpup left
[20:17] <ingy> s:g/// messes up my vim hilighting

[20:17] <ingy> s:g/// #:   fixes it

[20:20] *** [particle] left
[20:23] <lizmat> decommute&

[20:23] *** lizmat left
[20:32] *** mcmillhj_ left
[20:36] *** cpup joined
[20:37] *** lucasb joined
[20:43] <rindolf> ingy: hi, sup?

[20:45] *** cpup left
[20:45] <rindolf> ingy: did you see https://github.com/ingydotnet/spork-pm/issues/1 ?

[20:48] <ingy> rindolf: at my current rate, one of my digital grandchildren will get to that circa 2112 AD

[20:49] <rindolf> ingy: ah :|

[20:54] *** sno left
[21:00] *** kurahaupo_ left
[21:00] *** mcmillhj_ joined
[21:00] *** kurahaupo joined
[21:00] *** softmoth left
[21:05] *** aindilis left
[21:07] <Zoffix> Got my plates registered to may car and attached :)

[21:07] <Zoffix> I now officially own the coolest car in town: https://temp.perl6.party/perl6mobile-1.jpg

[21:07] <Zoffix> :D :D :D

[21:08] <Zoffix> (though I think I'll get better plate frames; these are too thick and get too close to the "♥" and the "6")

[21:08] <AlexDaniel> this is awesome

[21:09] <MasterDuke> i've heard good things about the civic si, do you like it?

[21:09] <Zoffix> I love it

[21:10] <Zoffix> It's standard transmission and got a turbo.

[21:11] <MasterDuke> oh, i thought they were NA. when did they start coming with a turbo?

[21:11] <Zoffix> Looks like since 2017

[21:11] <MasterDuke> i do like turbos though, my car is also standard and has a turbo (a WRX)

[21:11] <Zoffix> (mine's 2018, but no changes from 2017 model)

[21:11] <Zoffix> I like the sucking sound from the turbo when you release the throttle :) 

[21:12] <Zoffix> Or the spinning down sound. Whatever that sound is it's cool :)

[21:12] *** aindilis joined
[21:12] <bartolin> indeed, very nice

[21:15] *** squashable6 left
[21:15] *** reportable6 left
[21:15] *** statisfiable6 left
[21:15] *** unicodable6 left
[21:15] *** nativecallable6 left
[21:15] *** yoleaux left
[21:15] *** yoleaux joined
[21:15] *** ChanServ sets mode: +v yoleaux

[21:15] *** nativecallable6 joined
[21:15] *** unicodable6 joined
[21:15] *** statisfiable6 joined
[21:15] *** reportable6 joined
[21:15] *** squashable6 joined
[21:15] *** committable6 left
[21:16] *** undersightable6 left
[21:17] *** mcmillhj_ left
[21:18] *** mcmillhj left
[21:18] <lucasb> nice ride :)

[21:19] *** mcmillhj joined
[21:22] <tbrowder_> Perl 6 on the town on fancy wheels!

[21:22] *** vivus-ignis left
[21:22] <timotimo> how do we do gaussian distributions in perl6?

[21:23] *** vivus-ignis joined
[21:24] <timotimo> rosettacode has my back

[21:24] *** mcmillhj left
[21:28] *** skids left
[21:28] *** jaush joined
[21:29] *** sno joined
[21:30] *** vivus-ignis left
[21:30] *** jaush left
[21:32] *** thundergnat joined
[21:34] *** espadrine_ joined
[21:34] <thundergnat> Hey, I've been testing Rakudo HEAD against modules to find breakage before the release and I keep getting test failures from HTTP::UserAgent

[21:35] <thundergnat> Has anyone else tried installing that on a recent commit and succeeded?

[21:35] <thundergnat> It _looks_ like it may be hash oder related, but I may just be overly sensitive.

[21:36] <timotimo> did you look at the toaster results from the other day?

[21:37] <thundergnat> gist of the test failure: https://gist.github.com/thundergnat/13f731bc23d77c06909c19661cb6226f

[21:37] <thundergnat> I didn't show up in the toaster run, but that doesn't necessarily mean it was good, just that it didn't fail then.

[21:38] <thundergnat> *It

[21:38] <retupmoca> do non-CPAN module updates get pulled into p6weekly automatically?

[21:38] <retupmoca> thundergnat: looks like https://github.com/sergot/http-useragent/issues/197

[21:39] <thundergnat> retupmoca: Indeed.

[21:39] <thundergnat> Ok, aready noted.

[21:40] <thundergnat> gah. already

[21:44] *** ChoHag joined
[21:46] *** mcmillhj joined
[21:49] *** ChoHag left
[21:51] *** mcmillhj left
[21:52] <comborico1611> What does the 20 in 2018.20 mean on P6Weekly?

[21:52] <comborico1611> 20th week?

[21:56] <thundergnat> Hmm. Looks like the only problem with HTTP::UserAgent is some test routines need to change from is() to is-deeply().

[22:03] *** enheh left
[22:03] <Zoffix> comborico1611: yes

[22:03] *** enheh joined
[22:03] <Zoffix> clear plate frames much better: https://i.imgur.com/Y2AmBYv.jpg

[22:04] <timotimo> i rewrote that gradient descent example where python, numpy, and nim are compared

[22:04] <timotimo> it's not terribly fast

[22:04] <Zoffix> timotimo: how much slower are we?

[22:04] <timotimo> the fastest i could get it so far is 15s for 1000, whereas python does it in 35 seconds (comparing my machine against the blog author's machine, though, so that could be off, too)

[22:05] <timotimo> i'm sure there's a bit more to be gained by cleverly putting nqp ops in there. my first attempt to make the inner loops nqp::while loops made it about 75% slower instead

[22:05] <timotimo> https://gist.github.com/timo/2c0962ddb7e18629fb9237f59c9f1ab0

[22:05] <timotimo> wanna give it a go?

[22:06] <Zoffix> I'm on my phone

[22:06] <Zoffix> timotimo: 15s vs 35? that makes it faster than python

[22:06] <Zoffix> 15m?

[22:06] <timotimo> oh

[22:06] <timotimo> sorry, that's for 1/10th the workload

[22:06] <Zoffix> ah

[22:06] <timotimo> so it'd be 150s vs 35s

[22:07] <Zoffix> m: say 150/35

[22:07] <camelia> rakudo-moar 8ccda1890: OUTPUT: «4.285714␤»

[22:07] <Zoffix> not horribly bad :)

[22:07] <timotimo> the absolutely naive version was almost 2x slower than what i made it with nqp ops

[22:08] <timotimo> so about 8.5x slower

[22:08] <timotimo> could be worse

[22:10] <timotimo> OK, on my machine it's 39.7 seconds

[22:10] <timotimo> so the factor isn't as bad

[22:10] *** rindolf left
[22:11] <timotimo> also, the result seems to be wrong?

[22:11] <thundergnat> seen sergot

[22:11] <thundergnat> .seen sergot

[22:11] <yoleaux> I saw sergot 14 Mar 2018 21:46Z in #perl6: <sergot> ufobat_: ping

[22:12] *** dct joined
[22:13] *** committable6 joined
[22:13] <timotimo> there's a repository with the code in it so you don't have to copypaste the bits together

[22:13] *** undersightable6 joined
[22:13] <timotimo> https://github.com/henryiii/framework_compare/tree/master/lin_regression

[22:14] <timotimo> OK, the code from that library (purepython.py) gives me not only the right results, but also just 30 seconds instead of 35. or maybe that's the difference between py2 and py3?

[22:14] *** mcmillhj joined
[22:15] <timotimo> yup, that's what was wrong

[22:15] <timotimo> maybe it was doing int division somewhere or so

[22:16] <comborico1611> zoffix: Thanks!

[22:20] *** mcmillhj left
[22:22] <comborico1611> Does rakudo.org Debian prereq "libssl-dev" look like "libss1-dev", or is that just me?

[22:28] *** mcmillhj joined
[22:30] <Zoffix> copy-paste it somewhere with different font / or eq it

[22:30] <timotimo> Zoffix: should i look forward to your improvement, or are you leaving this one be? :)

[22:30] <El_Che> comborico1611: what do you mean?

[22:30] <comborico1611> Yeah, I found out it was "L" after command not working, but wanted to say something for folks more newb than myself being confused by that.

[22:31] <El_Che> ah the font?

[22:31] <comborico1611> El_Che:  in "libssl"  the second "L" looks bigger or different on my screen.

[22:31] <comborico1611> Gives the impression of a "1".

[22:31] <timotimo> hm, ligatures?

[22:32] <comborico1611> Are you talking to me?

[22:32] <El_Che> :)

[22:33] *** dct left
[22:33] *** mcmillhj left
[22:33] * comborico1611 is installing Rakudo 2018.04 for the first time, which is his 5th time to install using tar.  So good newb feedback possible.

[22:36] <comborico1611> One thing I didn't understand about the make test for Rakudo... There were some failures on my system, but it didn't seem to matter.

[22:36] <comborico1611> ...previously.

[22:36] <El_Che> some tests are sadly enough floppers

[22:36] <El_Che> they fails once in a while

[22:37] <comborico1611> So it just seems as if the testing is not important.

[22:37] <comborico1611> Does failing some test actually stop the installation?

[22:37] <El_Che> the testing is to make sure everthing is ok

[22:37] <El_Che> it does not change the installation

[22:38] <comborico1611> I see.

[22:38] <comborico1611> Thanks!

[22:38] <El_Che> (my packages always have all tests passing, if one fail, I run the build again. if it keeps falling, I check with the devs)

[22:38] <comborico1611> Interesting!

[22:40] <comborico1611> That's good to know.  I'm just a budding 6er,  so it's not crucial for me.  But now I wish I did the tests -- just to see what the results were.

[22:40] <El_Che> most of the time they are ok

[22:41] <El_Che> there are only a few that a

[22:41] <El_Che> lay fail 1/10 or less

[22:42] <comborico1611> Maybe one day my name will be on one of these lines for the Rakudo installation.  Rakudo 2020 or something. Haha.

[22:43] <El_Che> there are lots of low hanging fruit

[22:43] <comborico1611> Actually, I forgot, its 2018... So 2030.

[22:43] <comborico1611> Interesting!

[22:43] *** mcmillhj joined
[22:44] <El_Che> comborico1611: if you want to see failing tests, have a look at travis builds of rakudo-pkg https://travis-ci.org/nxadm/rakudo-pkg/builds

[22:45] <comborico1611> Installed.  About 20 minutes.

[22:45] <comborico1611> Maybe 15.

[22:46] <comborico1611> Now I need to remember how I get the PATH thing going...  Good thing I've done this recently.

[22:46] <El_Che> export PATH=/the/place/where/you/installed/rakudo/bin:$PATH

[22:47] <comborico1611> Thanks!

[22:47] <comborico1611> I put it in my .profile file...  

[22:47] <comborico1611> I don't know if that's bad, but its the only place I  know where to put it.

[22:49] *** mcmillhj left
[22:49] <El_Che> the .profile is the right place for lots of shells

[22:49] <El_Che> bash, sh, korn, etc

[22:53] <El_Che> in case you forget: https://github.com/nxadm/rakudo-pkg/blob/master/docker/add-perl6-to-path (replace the rakudo-pkg paths with the ones from your installation)

[22:53] *** HaraldJoerg left
[22:54] <Zoffix> timotimo: leaving to be :)

[22:54] <comborico1611> Thanks!  Yup I think I got it going.  I just need to restart the system to see if it took.

[22:55] *** softmoth joined
[22:55] *** raschipi joined
[22:57] <El_Che> comborico1611: source .profile

[22:57] <comborico1611> El_Che: Huh?

[22:57] <comborico1611> is that a bash commnd?

[22:57] <raschipi> yes

[22:58] <raschipi> it's so common there's a shortcut for it: "."

[22:58] <comborico1611> Ahh!  Very good.  (I need to get a book on Bash.)

[22:58] <comborico1611> Ahh again!

[22:58] <comborico1611> ./

[22:59] <comborico1611> Yup!  It is up and running.  

[23:00] <lucasb> type us a "perl6 -v"

[23:01] *** mcmillhj joined
[23:02] <comborico1611> lucasb: This is Rakudo Star version 2018.04.1

[23:02] <El_Che> going to bd

[23:02] <El_Che> bye!

[23:02] <comborico1611> Thanks for help!

[23:03] <comborico1611> Goodnight.

[23:03] <timotimo> oh, rakudo presents itself as actually rakudo star if you've got a star installed?

[23:03] <lucasb> timotimo: I was intrigued by that too

[23:03] <comborico1611> This is Rakudo Star version 2018.04.1 built on MoarVM version 2018.04.1

[23:03] <comborico1611> implementing Perl 6.c.

[23:06] <lucasb> that is strange. does the star distribution patches rakudo sources? :)

[23:06] *** imcsk8 left
[23:06] <lucasb> funny thing is, there isn't a Rakudo Star version 2018.04.1

[23:07] <lucasb> tarball name is rakudo-star-2018.04.tar.gz

[23:07] *** mcmillhj left
[23:08] *** MasterDuke left
[23:09] *** MasterDuke joined
[23:10] <comborico1611> Okay, so what's going on here? https://hastebin.com/ocemufupuv.pl

[23:10] <timotimo> true, that's the rakudo version, which is a little weird

[23:10] <timotimo> comborico1611: In Perl 6, please use "elsif' instead of "else if"

[23:11] <comborico1611> I did use "elseif".

[23:11] <timotimo> there's a bug in there, too

[23:11] <timotimo> it's supposed to say "instead of elseif"

[23:11] *** wamba left
[23:13] *** imcsk8 joined
[23:13] *** zachk joined
[23:13] <timotimo> i see where it went wrong

[23:14] <comborico1611> OHH.  ELSif...  Weird.  Okay.

[23:14] *** zachk left
[23:14] *** zachk joined
[23:23] *** mcmillhj joined
[23:27] *** mcmillhj_ joined
[23:28] *** mcmillhj left
[23:31] *** zachk left
[23:31] *** zachk joined
[23:33] *** aindilis left
[23:34] *** aindilis joined
[23:39] *** mcmillhj joined
[23:40] <MasterDuke> timotimo: for your grad descent code a profile shows lots of time in AT-POS, but that it isn't being inlined. i turned on the inline log and there are three identical entries `Can inline AT-POS (5755) with bytecode size 88 into  (4)`

[23:40] <timotimo> i rewrote the postcircumfix:<[ ]> into AT-POS and it didn't make things faster. in fact, it made it significantly slower instead

[23:42] <MasterDuke> that...doesn't make sense?

[23:42] <timotimo> it can

[23:42] <timotimo> it didn't look like it prevented jitting, which was what i first suspected

[23:42] <timotimo> hm, perhaps time will show that it's wasting lots of time in spesh?

[23:42] <timotimo> i.e. OSR not working like i found in that other case

[23:44] *** mcmillhj left
[23:44] <MasterDuke> 114.87ms in dynamic optimization (unmodified from your gist)

[23:45] <MasterDuke> just turned the AT-POS in to [] and now the log says `can inline AT-POS into postcircumfix:<[]>` and then `can inline postcircumfix:<[]> into `

[23:45] <timotimo> oh, wait, what i had there was already with at-pos? hm.

[23:45] <timotimo> not sure what exactly i saw

[23:47] * comborico1611 enters VIM for the second time in history.  First time was like 17 years ago.  First command :e ~/perl6/caesar-cipher.p6.  Eww ahh -- colorful!

[23:47] <timotimo> :syn off   :)

[23:48] <comborico1611> Have a good evening!

[23:48] <timotimo> same to you

[23:49] <comborico1611> Oh, i will.  Going to feed the chickens soon.  It was so hot today.  It will be nice playing with my dog in a bit.

[23:50] <timotimo> it's nice of you to play with your dog before you feed him to the chickens

[23:50] <timotimo> wait did i misunderstand?

[23:53] <comborico1611> Heh

[23:53] *** labster joined
[23:54] *** mcmillhj joined
[23:57] <lucasb> m: multi f($) {}; f(Mu)  # ok, cannot resolve

[23:57] <camelia> rakudo-moar 8ccda1890: OUTPUT: «Cannot resolve caller f(Mu); none of these signatures match:␤    ($)␤  in block <unit> at <tmp> line 1␤␤»

[23:57] <Geth> ¦ doc: briandfoy++ created pull request #2029: Fix a pod directive in .comb

[23:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2029

[23:59] *** mcmillhj left
[23:59] <lucasb> m: proto f($) {}; multi f($) {}; f(Mu)

[23:59] <camelia> rakudo-moar 8ccda1890: OUTPUT: «Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

