[00:00] *** lizmat left
[00:22] *** jeromelanteri joined
[00:24] *** telex joined
[00:31] <Util> I am speaking on Perl 6 in 14.5 hours. If anyone would like to review, I would welcome your thoughts.

[00:31] <Util> http://hack.p6c.org/~util/secret.pdf

[00:31] <Util> Please don't distribute this version that contains speaker notes.

[00:31] <Util> TIA!

[00:36] <raschipi> Util: did you actually roll a dice?

[00:41] <raschipi> Util: In page 40, it says it's choosing from 20 sides, but it's from 6 sides.

[00:48] <raschipi> Util: On page 95: "We have improved them so much, they extend up into  full parser." Perl5 also extended it's regex engine to be a full parser, it's just the worst thing to actually use.

[00:48] <lucs> How do I declare a var that can hold for example an Int or a Foo?

[00:49] <lookatme> my $bar where * ~~ Int | Foo; ?

[00:49] <lookatme> or using subset 

[00:50] <lucs> Okay, cool. Thanks.

[00:51] *** lindylex joined
[00:51] <raschipi> subset IntorStr of Any where * ~~ Int | Str; my IntorStr $x;

[00:51] <lucs> Neat, thanks.

[00:52] <lucs> Really Cool, eh :)

[00:57] <raschipi> If you are planning on using that in a signature, you can also go with multidispatch

[01:00] *** lindylex left
[01:01] <lucs> raschipi: Yep.

[01:04] <raschipi> multi foo (Int $x) { say "Int"; samewith ~$x }; multi foo (Str $x) { put $x }; foo 3; foo 'a'

[01:04] <evalable6> raschipi, rakudo-moar ff2bc1143: OUTPUT: ¬´Int‚ê§3‚ê§a‚ê§¬ª

[01:04] <raschipi> multi foo (Int $x) { say "Int"; samewith ~$x }; multi foo (Str $x) { put $x }; foo <3>

[01:05] <raschipi> m: multi foo (Int $x) { say "Int"; samewith ~$x }; multi foo (Str $x) { put $x }; foo <3>

[01:05] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´Ambiguous call to 'foo(IntStr)'; these signatures all match:‚ê§:(Int $x)‚ê§:(Str $x)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[01:06] *** Kaiepi joined
[01:06] <raschipi> Or you can add a Numeric method to foo and then cast in the signature, TIMTOADI after all. 

[01:06] *** Kaiepi left
[01:09] *** Kaiepi joined
[01:12] *** benjikun joined
[01:12] <raschipi> Util: "Texas", we don't call them Texas anymore

[01:22] *** Kaypie joined
[01:22] *** Kaiepi left
[01:24] *** benjikun left
[01:24] *** benjikun joined
[01:33] *** Aceeri_ joined
[01:42] <timotimo> Util: it might be you really want to show off sort with a single argument, but you could also .roll(5).sort.tail(3)

[01:42] <timotimo> also, we no longer require the \ at the end of the line to make method calls go in the next line! \o/

[01:45] <Util> raschipi, timotimo: Thanks!

[01:45] <Util> There is some classic blunder related when coders are holding forth on bad code they have inherited.

[01:45] <Util> The "I rolled a die" line is from my (flawed) memory of such a story. 

[01:45] <Util> *I* did not roll, I just made a reference which is perhaps too obscure. I cannot find it on DailyWTF.

[01:45] *** molaf_ joined
[01:45] <timotimo> it's an xkcd actually

[01:45] <timotimo> well, there is an xkcd with that exact thing in it

[01:45] <raschipi> https://xkcd.com/221/

[01:46] <raschipi> Not too obscure since at least two people here knew the exact source...

[01:46] <Util> That may be where I know it from. Woohoo!

[01:48] <Util> (I *did* remember the right integer) :^)

[01:48] <raschipi> Util: The only thing I'm missing from your slides a conclusion. You start with a good introduction, goes into examples and then it just ends.

[01:48] <timotimo> m: .say for "1 2 3 4 5 6 7 8 9 10 11 12".match(:g, / <{ 3 .. 11 }> /)

[01:48] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´ÔΩ¢3ÔΩ£‚ê§ÔΩ¢4ÔΩ£‚ê§ÔΩ¢5ÔΩ£‚ê§ÔΩ¢6ÔΩ£‚ê§ÔΩ¢7ÔΩ£‚ê§ÔΩ¢8ÔΩ£‚ê§ÔΩ¢9ÔΩ£‚ê§ÔΩ¢10ÔΩ£‚ê§ÔΩ¢11ÔΩ£‚ê§¬ª

[01:48] <timotimo> Util: how much better is that for your tokens year, month, and day? :) :)

[01:49] <timotimo> though not sure if it does anything with fancy unicode numbers, but <.digit> also does that, doesn't it?

[01:49] *** jeromelanteri left
[01:49] <timotimo> oh, you want 01 there

[01:50] <timotimo> m: .say for "01 02 03 04 05 06 07 08 09 10 1 2 3 4 5 6 7 8 9 10 11 12".match(:g, / <{ "03" .. "11" }> /)

[01:50] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´ÔΩ¢01ÔΩ£‚ê§ÔΩ¢02ÔΩ£‚ê§ÔΩ¢03ÔΩ£‚ê§ÔΩ¢11ÔΩ£‚ê§ÔΩ¢12ÔΩ£‚ê§¬ª

[01:50] <timotimo> nope.

[01:50] <timotimo> forget i said anything ;)

[01:50] <Util> raschipi: Slides 165-167 are the "reveal" of where I have been going with my narrative.

[01:52] <raschipi> Just need to tie that into the introduction, then. Just conclude the good design leads to a qualitative change on how people program.

[01:52] <timotimo> Util: on page 118, the palindrome one, you can actually omit the parens before the method call if you put a space before the .

[01:52] <timotimo> m: say ^100 .grep({ $_ eq .flip }).elems

[01:52] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´19‚ê§¬ª

[01:52] <Util> timotimo: I looked at matching '01'..'12'. Look at how they have changed it (while I was not looking):

[01:52] <Util> m: say ("01".."12").list;

[01:52] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´(01 02 11 12)‚ê§¬ª

[01:53] <timotimo> m: say flat("01".."09", "10".."12")

[01:53] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´(01 02 03 04 05 06 07 08 09 10 11 12)‚ê§¬ª

[01:54] <timotimo> m: say "01" ... "12"

[01:54] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´(01 02 11 12)‚ê§¬ª

[01:55] <timotimo> ok, ... doesn't do it differently

[01:55] <timotimo> m: say "01", *.succ, ... "12"

[01:55] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´Potential difficulties:‚ê§    Comma found before apparent sequence operator; please remove comma (or put parens around the ... call, or use 'fail' instead of ...)‚ê§    at <tmp>:1‚ê§    ------> 3say "01", *.succ,7‚èè5 ... "12"‚ê§12‚ê§  in block <u‚Ä¶¬ª

[01:55] <timotimo> m: say "01", *.succ ... "12"

[01:55] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´(01 02 03 04 05 06 07 08 09 10 11 12)‚ê§¬ª

[01:56] <Util> timotimo: re:"omit the parens" I am happy to learn that for myself. I will keep that slide as-is, since I am showing off the error.

[01:56] <timotimo> right

[01:57] <timotimo> on 156 the notes say "my guarantee to the compiler that they are equal size", but that sounds like the compiler will blindly trust you; it will actually throw an exception if the sizes mismatch

[01:59] <Util> timotimo: thanks. When I gave the talk last week, I added "it will complain if they are not (of equal size). I will add it to the notes.

[01:59] <timotimo> OK

[01:59] <timotimo> other than that it looks like a good talk

[02:00] <raschipi> It does look like a good talk, we're just bikeshedding the details.

[02:00] <timotimo> i mean even the things we've mentioned aren't dealbreakers at all

[02:02] <Util> raschipi timotimo: You have both given me several points that I intend to adopt.

[02:03] <Util> raschipi: the "tie-in" I will have to think more on. I do see your point.

[02:05] <timotimo> oh, and saying rakudo is written in itself may oversell it a little

[02:07] <raschipi> timotimo: I disagree with you on that. Rakudo is written in Perl6, he didn't go into self-hosting where it gets a little more complicated.

[02:08] <timotimo> but the grammar, actions, world, compiler bits are all nqp?

[02:10] <timotimo> anyway, i'm going to sleep

[02:10] <timotimo> have a good one, and good luck on the pres, Util :)

[02:10] <raschipi> g'night

[02:14] <Util> timotimo, raschipi: Much thanks!

[02:41] *** benjikun left
[02:41] *** benjikun joined
[02:49] *** kjk joined
[02:55] <kjk> I have a sub that takes a regex as an argument and smartmatch(!~~) against it. Is it possible to write my regex argument such that the sub when !~~ $myregex effectively matches the complement of $myregex

[02:59] <raschipi> You want everything not matched by the regex?

[02:59] <kjk> hmm, I think I'm not explaining my question clearly. Basically, I want to move the ! of !~~ into $myregex somehow

[03:00] <geekosaur> not really. that's always been difficult for regex

[03:01] <kjk> yeah, ic. ok thanks anyway

[03:06] <kjk> maybe I'll make my the parameter also accept a callable instead, that way it's not restricted to matching regex.

[03:41] *** lizmat joined
[04:00] *** imcsk8_ joined
[04:03] *** Kaypie left
[04:03] *** Kaypie joined
[04:08] *** molaf_ left
[04:09] *** molaf joined
[04:18] *** molaf left
[04:22] <b2gills> kjk: A Regex is Callable

[04:22] <b2gills> m: sub foo ( &code ) { 'abc' ~~ &code }; say foo /b/; say foo { .contains('b') }

[04:22] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´ÔΩ¢bÔΩ£‚ê§True‚ê§¬ª

[04:24] <Util> kjk: there might be a way using negative lookahead or negative lookbehind. See https://docs.perl6.org/language/regexes#Zero-Width_Assertions

[04:27] *** lookatme joined
[04:30] <kjk> b2gills: yeah, I ended up making the parameter a Mu just so I can also passed in a Junction of Regex, like /abc/|/def/, while preventing autothreading (which calls my sub twice)

[04:32] *** lookatme left
[04:32] *** aindilis joined
[04:35] *** sauvin joined
[04:42] *** Aceeri_ left
[04:49] *** lookatme joined
[04:53] *** xtreak joined
[04:54] *** lookatme_q joined
[04:54] *** lookatme left
[05:01] *** curan joined
[05:12] *** ufobat_ joined
[05:21] *** imcsk8_ left
[05:21] *** imcsk8 joined
[05:25] *** imcsk8 left
[05:26] *** hami joined
[05:27] *** imcsk8 joined
[05:30] *** domidumont joined
[05:36] *** hh__ joined
[05:37] *** domidumont left
[05:37] *** domidumont joined
[05:38] *** kjk left
[05:43] *** wamba joined
[05:43] *** sno joined
[05:47] *** imcsk8 left
[05:48] *** imcsk8 joined
[05:51] *** hh__ left
[05:54] *** hami left
[06:00] *** skids left
[06:03] *** lizmat left
[06:12] *** domidumont left
[06:17] *** Xliff joined
[06:17] <Xliff> \o

[06:17] *** Xliff left
[06:18] *** Xliff joined
[06:42] *** HaraldJoerg joined
[06:45] *** wamba left
[06:52] *** darutoko joined
[07:01] <Geth> ¬¶ doc: 6a1fb167a7 | (Moritz Lenz)++ | doc/Type/IO/Socket/INET.pod6

[07:01] <Geth> ¬¶ doc: Mention where to look for UDP support

[07:01] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/6a1fb167a7

[07:01] <synopsebot_> Link: https://doc.perl6.org/type/IO::Socket::INET

[07:02] *** lookatme_q left
[07:03] *** robertle joined
[07:16] *** cognominal joined
[07:16] *** wamba joined
[07:17] *** jmerelo joined
[07:17] *** lookatme joined
[07:20] *** domidumont joined
[07:24] *** lookatme left
[07:25] *** lookatme joined
[07:27] *** dakkar joined
[07:30] *** ExtraCrispy joined
[07:30] *** lookatme left
[07:38] <Geth> ¬¶ doc: ead8d75e29 | (JJ Merelo)++ | doc/Language/pragmas.pod6

[07:38] <Geth> ¬¶ doc: Adds some `use lib` example

[07:38] <Geth> ¬¶ doc: 

[07:38] <Geth> ¬¶ doc: Which closes #2105. If the OP needs more clarification, please comment or reopen. Thanks for the report.

[07:38] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/ead8d75e29

[07:38] <synopsebot_> Link: https://doc.perl6.org/language/pragmas

[07:39] *** jrra joined
[07:46] *** psychoslave_ joined
[07:47] *** psychoslave_ left
[07:48] *** lookatme joined
[07:48] <moritz> .tell pmurias I just got a security alert from github that nqp/nqp depends on hoek, which has a vulnerability (CVE-2018-3728) in versions < 4.2.1. Can you upgrade please?

[07:48] <yoleaux> moritz: I'll pass your message to pmurias.

[07:51] <jmerelo> moritz: what is hoek? I couldn't find a single reference to it in the repo

[07:52] *** scimon joined
[07:54] <jmerelo> moritz: OK, I see. It's some stuff related to the JS vm, some downstream dependency...

[07:54] <El_Che> hence, pmurias :)

[07:59] *** ExtraCrispy left
[08:00] *** lizmat joined
[08:03] *** ExtraCrispy joined
[08:14] *** pmurias joined
[08:14] *** pmurias left
[08:16] *** xtreak left
[08:41] *** xtreak joined
[08:47] *** pmurias joined
[08:47] *** frankjh joined
[09:06] *** jeromelanteri joined
[09:16] *** jeromelanteri left
[09:17] *** scimon left
[09:22] *** scimon joined
[09:26] *** hankache joined
[09:26] <hankache> hello #perl6

[09:27] *** scimon left
[09:28] <hankache> somewhere on github there was a page that lists various editors and their level of support for Perl 6. Does anyone have the link? I can't remember which repo.

[09:31] <AlexDaniel> hankache: https://github.com/perl6/user-experience/issues/19

[09:32] <hankache> AlexDaniel Thanks

[09:33] *** jeromelanteri joined
[09:40] *** zakharyas joined
[09:54] *** scimon joined
[09:55] *** gregf_ joined
[09:59] *** scimon left
[10:01] <yoleaux> Zoffix: remind moritz to check if perl6.org TLS renewal worked

[10:06] *** ExtraCrispy left
[10:06] *** ExtraCrispy joined
[10:11] *** damnlie joined
[10:12] <moritz> Expires: July 14, 2018

[10:16] *** hankache left
[10:22] *** ExtraCrispy left
[10:24] *** bhm joined
[10:26] *** scimon joined
[10:39] *** jeromelanteri left
[10:41] *** rindolf joined
[10:42] *** committable6 joined
[10:42] *** reportable6 joined
[10:42] *** benchable6 joined
[10:42] *** greppable6 joined
[10:42] *** ChanServ sets mode: +v benchable6

[10:42] *** ChanServ sets mode: +v greppable6

[10:42] *** releasable6 joined
[10:42] *** bloatable6 joined
[10:42] *** ChanServ sets mode: +v bloatable6

[10:42] *** unicodable6 joined
[10:42] *** ChanServ sets mode: +v unicodable6

[10:43] *** evalable6 joined
[10:43] *** notable6 joined
[10:43] *** nativecallable6 joined
[10:43] *** coverable6 joined
[10:43] *** statisfiable6 joined
[10:43] *** ChanServ sets mode: +v statisfiable6

[10:43] *** bisectable6 joined
[10:43] *** squashable6 joined
[10:43] *** quotable6 joined
[10:43] *** ChanServ sets mode: +v quotable6

[10:43] *** shareable6 joined
[10:43] *** scimon left
[10:43] *** undersightable6 joined
[10:43] *** ChanServ sets mode: +v undersightable6

[10:46] <pmurias> jmerelo: hoek is a dependency of a dependency, it sees we had an outdated/vulnerable version of it in the js backends dependenies of dependencies versions list

[10:46] <yoleaux> 07:48Z <moritz> pmurias: I just got a security alert from github that nqp/nqp depends on hoek, which has a vulnerability (CVE-2018-3728) in versions < 4.2.1. Can you upgrade please?

[10:47] *** lizmat left
[10:51] *** jeromelanteri joined
[10:53] *** Zoffix joined
[11:10] *** raschipi joined
[11:17] *** lookatme left
[11:18] *** lookatme joined
[11:27] <Zoffix> lucs: lookatme raschipi instead of `where * ~~ Int | Foo;` use just `where Int | Foo`. The `where` clause already smartmatches so adding a second smartmatch is redundant. Also, the `where Int|Foo` form is actually optimized into two typechecks, whereas the other form would involve invoking a callable each time

[11:28] <raschipi> You're completely right, and I didn't even see it, just copied and pasted it.

[11:32] *** Zoffix left
[11:33] <raschipi> Thanks, Zoffix

[11:33] <ilmari> didn't someone here do a blog post about the overlap between perl5 and perl6 contributors?

[11:35] <Geth> ¬¶ perl6-mode: 0d3df72743 | (Tom Browder)++ (committed using GitHub Web editor) | README.md

[11:36] <Geth> ¬¶ perl6-mode: update capability and plans

[11:36] <Geth> ¬¶ perl6-mode: review: https://github.com/perl6/perl6-mode/commit/0d3df72743

[11:38] *** rindolf left
[11:46] *** xtreak left
[11:46] <Geth> ¬¶ perl6-mode: cf8119a28a | (Tom Browder)++ (committed using GitHub Web editor) | README.md

[11:46] <Geth> ¬¶ perl6-mode: add reference for indentation support

[11:46] <Geth> ¬¶ perl6-mode: review: https://github.com/perl6/perl6-mode/commit/cf8119a28a

[11:49] *** xtreak joined
[11:53] *** rindolf joined
[11:55] *** Xliff left
[11:55] <buggable> New CPAN upload: perl6-cache-async-0.1.3.tar.gz by ROBERTLE https://cpan.metacpan.org/authors/id/R/RO/ROBERTLE/Perl6/perl6-cache-async-0.1.3.tar.gz

[11:59] <Geth> ¬¶ perl6-mode: 4ad9987e25 | (Tom Browder)++ (committed using GitHub Web editor) | perl6-mode.el

[11:59] <Geth> ¬¶ perl6-mode: add TODO note for HEREDOC indentation

[11:59] <Geth> ¬¶ perl6-mode: review: https://github.com/perl6/perl6-mode/commit/4ad9987e25

[12:07] <Geth> ¬¶ perl6-mode: 88de065795 | (Tom Browder)++ (committed using GitHub Web editor) | test/test-smie.p6

[12:07] <Geth> ¬¶ perl6-mode: add test file for HEREDOC indentation

[12:07] <Geth> ¬¶ perl6-mode: review: https://github.com/perl6/perl6-mode/commit/88de065795

[12:09] <tbrowder_> anyone here use emacs and perl6-mode? i‚Äôm going to try to fix HEREDOC indentation and need some user feedback.

[12:09] <AlexDaniel> yes?

[12:10] <AlexDaniel> tbrowder_: btw what's currently the difference between https://github.com/perl6/perl6-mode and https://github.com/hinrik/perl6-mode

[12:11] <AlexDaniel> the one in perl6-mode has more commits I think, but which one is installed for most of the users?

[12:11] <AlexDaniel> hmm http://melpa.milkbox.net/#/perl6-mode

[12:11] <AlexDaniel> I guess perl6/ org one

[12:11] <AlexDaniel> ok

[12:12] <tbrowder_> when you write a HEREDOC chunk do you (1) want emacs to leave everything as is inside the HEREDOC or (2) align any text outside the left column of the ending HERE token?

[12:13] <tbrowder_> to your question, our perl6-mode has diverged from henrik‚Äôs.

[12:14] *** SHODAN left
[12:16] *** jmerelo left
[12:20] <AlexDaniel> tbrowder_: I expect it to do this: https://gist.github.com/AlexDaniel/be1ca3ca19a9867762a14d031ac304a7

[12:21] <El_Che> releasable6: status

[12:21] <releasable6> El_Che, Next release will happen when it's ready. 0 blockers. 87 out of 118 commits logged

[12:21] <releasable6> El_Che, Details: https://gist.github.com/3d03385d54580cfc76a61f8778260527

[12:21] *** scimon joined
[12:21] *** xtreak left
[12:23] <tbrowder_> AlexDaniel: what if your second line of text is indented from the rest?

[12:24] <tbrowder_> Does the current behavior satisfy you?

[12:26] <tbrowder_> I like my indentation preserved, at least from the leading column of the HERE token.

[12:27] <tbrowder_> Later I‚Äôll make a gist showing some examples of what I mean. Maybe we could have a HEREDOC style selector...

[12:33] <masak> m: class C { has $!fn; method new() { my $fn = -> { say "OH HAI" }; return self.bless(:$fn) }; method foo { $!fn() } }; C.new.foo

[12:33] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´Cannot find method 'Any' on object of type List‚ê§  in method foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:33] <masak> surely I'm committing some kind of thinko above -- anyone care to enlighten me?

[12:34] <masak> oh! because you can't initialize private things with .bless, d'oh

[12:34] <masak> we never fixed that, did we? :)

[12:35] <AlexDaniel> tbrowder_: I think it's not just emacs-related, and vim should probably follow the same rules too

[12:35] <masak> m: class C { has $!fn; method new() { my $fn = -> { say "OH HAI" }; return self.bless(:$fn) }; submethod BUILD(:$!fn) {}; method foo { $!fn() } }; C.new.foo

[12:35] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´OH HAI‚ê§¬ª

[12:35] <masak> there we go.

[12:35] <AlexDaniel> as well as other IDEs that can do perl6

[12:36] <raschipi> AlexDaniel: I don't think vim has filetype-specific mechanisms for HERDOCS.

[12:36] *** sena_kun joined
[12:37] <AlexDaniel> raschipi: hmmm really?

[12:51] *** cognominal left
[12:53] *** ChoHag joined
[12:57] <timotimo> Zoffix, have you seen the old page "WITCH"? "what is this character here"? it does basically what you want for the "syntax finder" except it doesn't have a search tool, just a list of clickable links and sub-pages

[12:57] <timotimo> Zoffix, http://www.perlfoundation.org/perl6/index.cgi?witch

[13:01] *** scimon left
[13:01] *** Zoffix joined
[13:02] <Zoffix> timotimo: thanks. No, haven't seen it before. Yeah, it's similar to what I was thinking of.

[13:05] <Geth> ¬¶ doc: 9632a11ef7 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Mu.pod6

[13:05] <Geth> ¬¶ doc: Fix a couple of typos

[13:05] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9632a11ef7

[13:05] <synopsebot_> Link: https://doc.perl6.org/type/Mu

[13:06] *** hankache joined
[13:08] <hankache> .seen lizmat

[13:08] <yoleaux> I saw lizmat 18 Jun 2018 22:26Z in #moarvm: <lizmat> depends how you look at it

[13:08] * Zoffix is struggling to find the "Edit" button on the latest weekly

[13:09] <hankache> hello Zoffix

[13:09] <timotimo> Zoffix: i can see it, it's below all the share buttons and the related posts, where the date and author name are

[13:09] <timotimo> though perhaps you somehow got logged out?

[13:09] <timotimo> i see it on both the main page and the individual post page

[13:09] <Zoffix> timotimo: I don't got enough perms to edit posts by others, I think. I see an edit button only on my own post

[13:10] <timotimo> ah, shall i make an edit for you?

[13:10] <Zoffix> timotimo: but anyway, the link to Perl6intro got HTTPS in it, but there's no HTTPS on the site

[13:10] <Zoffix> timotimo: https://github.com/hankache/perl6intro/issues/185#issuecomment-398390992

[13:10] <Zoffix> in "looking for someone to translate his excellent Introduction "

[13:10] <timotimo> oh, i see

[13:11] <timotimo> updated

[13:11] <Zoffix> timotimo++

[13:11] <hankache> timotimo++

[13:12] <hankache> Zoffix: Altai-man volunteered to do the Russian translation.

[13:12] <Zoffix> cool

[13:12] <timotimo> should we put a note about that in the post?

[13:14] <hankache> timotimo: I don't think that would be necessary

[13:14] <hankache> imho

[13:14] <hankache> timotimo: Can I bother you with one small edit?

[13:14] <timotimo> sure

[13:15] *** kjk joined
[13:16] <hankache> My family name is Hankache. An additional c slipped in the weekly.

[13:16] <timotimo> updated

[13:16] <hankache> timotimo: Thanks a lot

[13:16] *** Zoffix left
[13:18] *** ZzZombo joined
[13:19] *** ZzZombo left
[13:19] *** ZzZombo joined
[13:23] *** cognominal joined
[13:26] *** lizmat joined
[13:35] *** markoong joined
[13:36] *** hankache left
[13:37] *** skids joined
[13:46] *** raschipi left
[13:51] *** Kaypie left
[13:53] *** n1ge joined
[13:55] *** jeromelanteri left
[14:00] *** zakharyas left
[14:04] *** coverable6 left
[14:04] *** benchable6 left
[14:04] *** bisectable6 left
[14:04] *** evalable6 left
[14:04] *** unicodable6 left
[14:04] *** statisfiable6 left
[14:04] *** quotable6 left
[14:04] *** greppable6 left
[14:04] *** bloatable6 left
[14:04] *** notable6 left
[14:04] *** shareable6 left
[14:04] *** squashable6 left
[14:04] *** releasable6 left
[14:04] *** reportable6 left
[14:04] *** undersightable6 left
[14:04] *** committable6 left
[14:04] *** nativecallable6 left
[14:11] *** ZzZombo_ joined
[14:11] <lizmat> .tell hankache I've unslipped a c in the weekly

[14:11] <yoleaux> lizmat: I'll pass your message to hankache.

[14:11] *** webstrand joined
[14:11] *** ZzZombo left
[14:11] *** ZzZombo_ left
[14:11] *** ZzZombo_ joined
[14:12] *** molaf joined
[14:12] *** ZzZombo_ is now known as ZzZombo

[14:14] *** perlpilot joined
[14:14] *** perlpilot left
[14:14] *** ZzZombo_ joined
[14:15] *** ZzZombo__ joined
[14:16] *** ZzZombo_ left
[14:16] *** ZzZombo_ joined
[14:17] <pmurias> moritz: the warning seems to be caused by a dependency of an dependency I'm getting rid of once I merge a branch

[14:17] *** ZzZombo left
[14:18] *** benjikun2 joined
[14:18] <moritz> pmurias: ok; it doesn't seem urgent. Thanks for digging into that.

[14:20] *** ZzZombo__ left
[14:20] *** benjikun left
[14:23] <Geth> ¬¶ doc: f8b777983f | MasterDuke17++ (committed using GitHub Web editor) | doc/Type/Mu.pod6

[14:23] <Geth> ¬¶ doc: Fix typo in bless documentation

[14:23] <Geth> ¬¶ doc: 

[14:23] <Geth> ¬¶ doc: Changes the meaning, but should be correct according to the context.

[14:23] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/f8b777983f

[14:23] <synopsebot_> Link: https://doc.perl6.org/type/Mu

[14:33] *** dogbert17 joined
[14:47] *** scimon joined
[14:58] *** lizmat left
[14:58] <scimon> So I'm debating taking the talk I did at LPM on Perl6 signatures (which as I had 15 minutes only covered parameters types) and expanding it to 45 minutes and going into signatures, types and multi methods in scary details for YAPC in Glasgow. 

[14:58] <scimon> Am I insane?

[14:59] *** ZzZombo_ left
[15:00] <moritz> you are, but you're not the only one

[15:00] <moritz> I considered writing a whole book on the subject :)

[15:02] <scimon> This is true.

[15:03] <scimon> The LPM talk was mostly made by me going through the docs and trying all the different combinations of things in order to catch potential weirdness. 

[15:04] *** jmerelo joined
[15:08] *** nativecallable6 joined
[15:08] *** ChanServ sets mode: +v nativecallable6

[15:08] *** greppable6 joined
[15:08] *** coverable6 joined
[15:08] *** committable6 joined
[15:08] *** bloatable6 joined
[15:08] *** notable6 joined
[15:08] *** quotable6 joined
[15:08] *** ChanServ sets mode: +v coverable6

[15:08] *** ChanServ sets mode: +v committable6

[15:08] *** ChanServ sets mode: +v bloatable6

[15:08] *** ChanServ sets mode: +v notable6

[15:08] *** ChanServ sets mode: +v quotable6

[15:08] *** releasable6 joined
[15:08] *** evalable6 joined
[15:08] *** bisectable6 joined
[15:08] *** ChanServ sets mode: +v bisectable6

[15:08] *** reportable6 joined
[15:10] *** titsuki joined
[15:10] *** lizmat joined
[15:13] *** curan left
[15:19] <scimon> I have submitted my talk. Now to write my talk. ;)

[15:19] *** wamba left
[15:21] *** ExtraCrispy joined
[15:24] *** domidumont left
[15:26] <kjk> what's the recommended way to test (using Test) that a sub produces the expected output to stdout?

[15:27] <timotimo> eco: Capture

[15:27] <buggable> timotimo, Found 3 results: IO::Capture::Simple, Shell::Capture, IO::MiddleMan. See https://modules.perl6.org/s/Capture

[15:27] <timotimo> the first one or the last one can probably help

[15:28] <kjk> gotcha, will look into both, thanks!

[15:29] <timotimo> there may be another package that this search didn't find, i can't quite remember

[15:30] *** uzl joined
[15:37] <CIAvash[m]> https://github.com/zoffixznet/perl6-Test-Output

[15:38] <timotimo> ah, that looks good

[15:38] <timotimo> kjk: ^

[15:38] <kjk> that's perfect! thanks!

[15:44] *** jmerelo left
[15:45] *** Khisanth joined
[16:00] *** wamba joined
[16:07] *** zakharyas joined
[16:09] *** pmurias left
[16:11] *** [particle] joined
[16:18] *** frankjh left
[16:19] *** zakharyas left
[16:20] *** robertle left
[16:21] *** n1ge left
[16:21] *** n1ge joined
[16:24] *** scimon left
[16:25] *** Andrew_ joined
[16:25] <buggable> New CPAN upload: IP-Random-0.0.2.tar.gz by JMASLAK http://modules.perl6.org/dist/IP::Random:cpan:JMASLAK

[16:27] <Andrew_> Hello there, I'm new to perl6 (at this moment I'm lerning :D ) and I would like to know what path should I take for web dev. with perl?

[16:27] <lizmat> Andrew_: you probably want to have a look at Cro

[16:27] <lizmat> https://cro.services

[16:28] <El_Che> Cro is hte way to go atm

[16:28] <timotimo> https://github.com/jnthn/cro-webapp - cro itself doesn't have sugar for templating yet, but this is a work-in-progress that may become part of cro itself for developing web apps specifically

[16:29] <Andrew_> nice, thanks

[16:29] <Andrew_> but i heard something about catalystframework?

[16:29] <timotimo> so you'll want to find a templating engine that you like, if you don't use Cro::WebApp. there shouldn't be any obstacles to just using any templating library you find

[16:29] <timotimo> that's a perl5 framework

[16:30] <Andrew_> hmm

[16:30] <jnthn> I actually have that templating engine running in production already, so it's stable in that sense at least. :-)

[16:30] <timotimo> perl5 and perl6 are quite different, both have different strengths and weaknesses

[16:31] <Andrew_> so which one should i chose?

[16:31] <Andrew_> for web

[16:31] <Andrew_> between perl5 san perl6

[16:32] <timotimo> i guess it depends on what your specific requirements are

[16:33] <timotimo> like, do you expect very high traffic?

[16:33] *** dakkar left
[16:33] <timotimo> how complex is the business logic in your web app going to be?

[16:34] <Andrew_> high trafic and complex business :)) 

[16:34] <timotimo> i should have specified, what's "high" to you?

[16:34] <Andrew_> let me rephrase everything :))

[16:36] <Andrew_> I will start an intern in perl web dev in about 1 month and i wanna prepare a little

[16:36] *** domidumont joined
[16:36] <timotimo> ah, if you're going to be working a job, it's likely that they will employ perl5 rather than perl6

[16:37] <timotimo> i.e. if they have existing code and are not explicitly mentioning perl6, they are likely using perl5

[16:37] <timotimo> learning perl6 can help you become a better programmer, certainly, but since you've got a limited time budget, you should invest that in learning perl5 first, i'd imagine

[16:37] <Andrew_> Catalyst, Dancer2 or Mojolicious 

[16:38] <Andrew_> i found these 

[16:38] <timotimo> TBH, i haven't done any perl5 yet

[16:38] <timotimo> but those three are very popular indeed

[16:38] *** sno left
[16:38] *** webstrand left
[16:38] <Andrew_> well :)) what should i chose?

[16:38] <uzl> Hi, everybody!

[16:38] *** perlpilot joined
[16:39] <timotimo> sorry, i can't help with that decision :(

[16:39] * timotimo AFK

[16:39] <Andrew_> thanks anyway

[16:39] <tadzik> Mojolicius will allow you to write both dancer-style and catalyst-style apps

[16:39] <hoelzro> Andrew_: I really like Mojolicious

[16:39] <timotimo> YW, and good luck with the internship!

[16:39] <hoelzro> (FWIW)

[16:39] *** webstrand joined
[16:39] <tadzik> I'd say it's a good option :)

[16:39] <Andrew_> okey so i should start with that

[16:40] <timotimo> just pray to god their existing code isn't a "web app" based on CGI.pm :)

[16:40] <Andrew_> thank you very much!

[16:40] <Andrew_> :)) i don't know anything about that for now:D

[16:40] <uzl> I'd like to configure the constructor "new" so that it doesn't take any arguments and create a new constructor with a different name. Not sure how to get around it.

[16:41] <timotimo> uzl: a constructor is really just any method that calls bless, either indirectly or directly

[16:42] <timotimo> so put a method new() { say "no" }; method constructor($a, $b) { return self.bless(a => $a, otherattr => $b) }

[16:42] <uzl> timotimo: ok, i'll try that!

[16:43] <uzl> timotimo: I've been reading the docs and I'm not sure in which situations I'd use bless, BUILD, or BUILDALL.

[16:43] <timotimo> you probably won't override BUILDALL more than once in your whole life ;)

[16:44] *** lex joined
[16:44] <timotimo> BUILD is required when you want to access private attributes, because they are not accessible in a regular constructor

[16:44] <timotimo> bless is what you call to actually create an instance, and bless will call BUILDALL, which is responsible for calling the BUILD method of all classes in your hierarchy

[16:45] *** Andrew_ left
[16:45] <uzl> timotimo: for most situations, i should be fine with bless and BUILD, meaning I don't need to touch BUILDALL.

[16:45] <uzl> ?

[16:46] <jnthn> You pretty much never need to touch BUILDALL

[16:46] <lizmat> uzl: or use bless, for that matter

[16:46] <lizmat> just a BUILD method or a TWEAK method is usually enough

[16:47] <timotimo> oh, how could i forget TWEAK

[16:47] <timotimo> TWEAK is almost always better than BUILD, because it doesn't make your default values and such on attributse "go away"

[16:47] <uzl> lizmat: going back to doc to read about TWEAK ;)

[16:48] <uzl> Thank you, guys!

[17:04] *** ExtraCrispy left
[17:09] <Geth> ¬¶ doc: 08a981e4d1 | (Elizabeth Mattijsen)++ | doc/Type/Any.pod6

[17:09] <Geth> ¬¶ doc: Any.toggle was introduced in 2017.12

[17:09] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/08a981e4d1

[17:09] <synopsebot_> Link: https://doc.perl6.org/type/Any

[17:21] <Geth> ¬¶ doc: 89bf0ab968 | (Elizabeth Mattijsen)++ | doc/Language/pragmas.pod6

[17:21] <Geth> ¬¶ doc: Fix typo

[17:21] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/89bf0ab968

[17:21] <synopsebot_> Link: https://doc.perl6.org/language/pragmas

[17:25] <lizmat> Travis complains about whateverable.6lang.org giving a Service Unavailable

[17:25] *** zakharyas joined
[17:28] *** _uzl joined
[17:28] *** uzl left
[17:29] <masak> heredocs are weird.

[17:29] *** |oLa| joined
[17:29] <timotimo> you think? i like 'em a lot

[17:30] <masak> me too :)

[17:30] <masak> doesn't stop them being weird, though

[17:39] <timotimo> Cannot find method 'method_table' on object of type Perl6::Metamodel::CurriedRoleHOW

[17:39] <timotimo>   in method setup at /home/timo/perl6/install/share/perl6/sources/24DD121B5B4774C04A7084827BFAD92199756E03 (NativeCall) line 282

[17:39] <timotimo> am i doing it wrong?

[17:46] <timotimo> could it be that the .? call to calling_convention is the thing that's blowing up?

[17:49] *** zakharyas left
[17:49] <kjk> p6: IterationEnd ~~ Mu 

[17:49] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´Cannot resolve caller ACCEPTS(Mu: ); none of these signatures match:‚ê§    (Mu:U: \topic, *%_)‚ê§    (Mu:U: Mu:U \topic, *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:49] <kjk> is that expected?

[17:50] <kjk> p6: IterationEnd.WHAT

[17:50] <camelia> rakudo-moar ff2bc1143: ( no output )

[17:50] <kjk> p6: IterationEnd.WHAT.say

[17:50] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´(Mu)‚ê§¬ª

[17:51] *** _uzl left
[17:51] <timotimo> yeah, i removed the maybemeth spesh plugin optimization and the error is now about a missing symbol in openssl.so

[17:52] <timotimo> jnthn: do you have an idea what this could be? some bad combination of roles and that spesh plugin?

[17:57] *** zakharyas joined
[18:02] *** Zoffix joined
[18:02] <Zoffix> kjk: no, it's a bug. You could fix it :)

[18:03] *** sarna joined
[18:03] <Zoffix> kjk: oh, wait no, not a bug

[18:04] <Zoffix> kjk: well, a bug

[18:04] <Zoffix> SHRODINGERBUG

[18:07] <kjk> currently I work around it by calling .WHAT first before smart matching

[18:07] <Zoffix> kjk: basically, there's no Mu:D candidate to make junctions thread, buuut, we can have that and still have a Mu:D candidate. You can fix the bug by changing `Any` to `Mu:D` here: https://github.com/rakudo/rakudo/blob/master/src/core/Mu.pm6#L16 and then adding another candidate for junction threading: multi method ACCEPTS(Mu:U: Junction:D \topic) { topic.THEAD: { self.ACCEPTS: $_ } }

[18:08] <timotimo> THEAD?

[18:08] <Zoffix> mhm

[18:08] <Zoffix> it's new-ish

[18:08] *** espadrine joined
[18:08] <Zoffix> m: <a b c>.all.THREAD: { say "zomg it's a $_" }

[18:08] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´zomg it's a a‚ê§zomg it's a b‚ê§zomg it's a c‚ê§¬ª

[18:08] <timotimo> surely that's meant to be THREAD?

[18:08] <Zoffix> ah, right

[18:08] <timotimo> OK

[18:09] <Zoffix> too much HTML :)

[18:09] <timotimo> %)

[18:09] <kjk> let me open the issue in rakudo first

[18:09] <Zoffix> I see we ain't got any Mu:D.ACCEPT candidates either

[18:09] <Zoffix> m: say 42 ~~ Mu.D

[18:09] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´No such method 'D' for invocant of type 'Mu'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:09] <Zoffix> m: say 42 ~~ Mu.new

[18:09] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´Died with X::Multi::NoMatch‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:13] *** benji__ joined
[18:13] <Zoffix> m: class Foo { multi method z (\z) { z.uc }; multi method z (Junction:D \z) { z.THREAD: { self.z: $_ } } }; for ^10000 { Foo.z: rand | 42 | 100; Nil }; say now - ENTER now

[18:13] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´0.1182759‚ê§¬ª

[18:13] *** |oLa| left
[18:13] <Zoffix> m: class Foo { multi method z (\z) { z.uc } }; for ^10000 { Foo.z: rand | 42 | 100; Nil }; say now - ENTER now

[18:13] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´0.37057782‚ê§¬ª

[18:13] <timotimo> oh, i see that the maybemeth spesh plugin was already disabled for the release

[18:14] <Zoffix> weird that threading manually is like 3x faster than using binder's threading, eh?

[18:14] <timotimo> doesn't the junctive fallback have to go through the slow-path binder?

[18:14] <Zoffix> yeah

[18:14] <timotimo> and it has to figure out which argument has to be threaded, and it has to look through all of 'em to find the right one, too

[18:15] <timotimo> whereas i guess THREAD will just always go over the junction for $_?

[18:15] *** diakopter joined
[18:15] <Zoffix> Ah, ok, now I get it

[18:16] <diakopter> m: grammar Flail { token TOP { <TOP> 'w' | 'v' } }; Flail.subparse('vwwwwww').say;

[18:16] <camelia> rakudo-moar ff2bc1143: OUTPUT: ¬´(timeout)¬ª

[18:17] <diakopter> referencing RT bug #132004

[18:17] <Zoffix> RT#132004

[18:17] <synopsebot_> RT#132004 [open]: https://rt.perl.org/Ticket/Display.html?id=132004 [REGEX] Left-recursion causes infinite loop

[18:17] *** benjikun2 left
[18:17] <diakopter> what

[18:17] <diakopter> I just said that

[18:17] <diakopter> oh, the link

[18:19] <diakopter> such left recursion can be dynamically detected and evaded (and still generate appropriate parses); it takes some more bookkeeping and machinations

[18:20] <Zoffix> I thought LTM stopped when the same token was gone into.

[18:22] <jnthn> Zoffix: LTM does, yes, but LTM just picks the branch

[18:23] <Zoffix> Ah

[18:24] *** sauvin left
[18:25] <masak> diakopter: \o

[18:25] <diakopter> awooooga

[18:25] *** Zoffix left
[18:27] *** zachk joined
[18:27] *** zachk left
[18:27] *** zachk joined
[18:30] *** lizmat left
[18:33] *** shareable6 joined
[18:33] *** ChanServ sets mode: +v shareable6

[18:33] <diakopter> shareable6: help

[18:33] <shareable6> diakopter, Like this: shareable6: f583f22 # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Shareable

[18:35] <AlexDaniel> .tell lizmat whoops, yeah. Brought it back up

[18:35] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[18:35] <diakopter> that's quite the bot menagerie

[18:39] *** zakharyas left
[18:41] <AlexDaniel> diakopter: I think some should be slaughtered

[18:41] <diakopter> I like the gptrixie one

[18:41] <AlexDaniel> e.g. nobody is using nativecallable6

[18:41] <diakopter> cull them all

[18:41] <AlexDaniel> hmm‚Ä¶

[18:41] <AlexDaniel> okay‚Ä¶

[18:42] <diakopter> I'm teasing

[18:42] <diakopter> don't listen to me

[18:42] <AlexDaniel> but you're serious about liking nativecallable6, right? :)

[18:42] <diakopter> I mean..

[18:43] <diakopter> I like the name of gptrixie

[18:43] <diakopter> (and i'm impressed by what it does)

[18:43] <sarna> AlexDaniel: what does nativecallable6 do?

[18:44] <diakopter> masak: lol, nativecullable

[18:44] <AlexDaniel> sarna: it's basically a bot that wraps GPTrixie (https://github.com/Skarsnik/gptrixie)

[18:44] <AlexDaniel> nativecallable6: struct s {int a; float b; char c};

[18:44] <nativecallable6> AlexDaniel, https://gist.github.com/82556c65094c005d0fad6f0254b2e2a3

[18:45] <AlexDaniel> BOOOOOOOO

[18:45] <sarna> :(

[18:45] *** nativecallable6 left
[18:45] *** nativecallable6 joined
[18:45] *** ChanServ sets mode: +o diakopter

[18:45] <diakopter> oh look, that still works

[18:45] <AlexDaniel> nativecallable6: struct s {int a; float b; char c};

[18:45] *** diakopter sets mode: -o diakopter

[18:45] <nativecallable6> AlexDaniel, https://gist.github.com/571571c0cc3e3272691fc188567c9474

[18:45] *** sarna left
[18:45] <AlexDaniel> this was working a day ago‚Ä¶

[18:46] <AlexDaniel> here's a better example: https://gist.github.com/Whateverable/dc53310c0a50104d3ea028599341b6c2

[18:47] *** sarna joined
[18:47] *** unicodable6 joined
[18:47] *** ChanServ sets mode: +v unicodable6

[18:47] *** benchable6 joined
[18:47] *** squashable6 joined
[18:47] *** ChanServ sets mode: +v squashable6

[18:47] *** statisfiable6 joined
[18:47] <AlexDaniel> nativecallable6: struct s {int a; float b; char c};

[18:47] *** undersightable6 joined
[18:47] <nativecallable6> AlexDaniel, https://gist.github.com/518aa161af6495228eeac4a7c232575a

[18:48] <AlexDaniel> come on‚Ä¶

[18:48] * AlexDaniel shrugs

[18:50] *** lizmat joined
[18:50] <sarna> DL

[18:50] <sarna> D: *

[18:50] <sarna> we should slaughter it

[18:50] <diakopter> slaughterable6

[18:54] *** darutoko left
[19:01] *** sarna left
[19:08] *** perlpilot left
[19:09] *** HaraldJoerg left
[19:10] *** HaraldJoerg joined
[19:11] *** wamba left
[19:16] *** diakopter left
[19:17] *** molaf left
[19:19] *** lex left
[19:21] *** wamba joined
[19:24] *** domidumont left
[19:29] *** uzl joined
[19:33] <hoelzro> oh yay, I was looking for references to the various bots!

[19:36] <AlexDaniel> hoelzro: another list is here: https://github.com/perl6/doc/issues/711#issuecomment-235414744

[19:36] <hoelzro> thanks!

[19:37] <El_Che> hoelzro: I'll try the fix once rakudo is out, that's why the setup would be identical to my install and more likely to be in the situation to trigger the bug

[19:37] <hoelzro> sounds good!

[19:38] <El_Che> the package upgrades over the existing installation

[19:39] <El_Che> thx in advance

[19:39] <hoelzro> happy to help!

[19:39] <El_Che> happy to see it fixed

[19:39] <hoelzro> thanks again for helping me walk through it

[19:39] <AlexDaniel> El_Che: should I merge the release branch into master now so that the fix is in master also?

[19:40] <El_Che> the fix should be released

[19:41] <El_Che> it's kind of blocking in the sense that it gives a bad impression that the 2 solutions proposed by the repl do not work

[19:41] *** looksee joined
[19:41] <El_Che> thinking on dfoy's book

[19:41] <AlexDaniel> El_Che: so to clarify, the fix was merged into the release branch, so the upcoming release will have it. But it's not on `master`

[19:41] <El_Che> ah ok, is the merging to master blocked by something?

[19:42] *** molaf joined
[19:42] *** sno joined
[19:43] *** looksee left
[19:43] <AlexDaniel> El_Che: not really

[19:43] * AlexDaniel does it

[19:43] <El_Che> hoelzro: my linux pkgs have rakudo + zef. I am considering adding Linenoise or Readline to the mix, so people have a minimal setup. Plus for Linenoise: self contained C lib; minus: dependencies on other Perl 6 dependencies that should be included (there goes the minimal).

[19:44] <El_Che> hoelzro: Plus for Readline: no perl6 module deps; minus: external C dependencies that would result on a dependency for the packages (they have none at the moment)

[19:44] <AlexDaniel> El_Che: done

[19:44] <El_Che> AlexDaniel++

[19:45] <El_Che> I will create minimal docker images, that can easily have a few deps included, but for the pkg I am more conservative

[19:45] <hoelzro> El_Che: tbh, I forget which Perl 6 stuff I rely on for Linenoise =/

[19:45] <hoelzro> I think it's stuff for building the Linenoise lib

[19:46] <El_Che> It looks like it

[19:46] <El_Che> I will look into it more in detail

[19:47] <hoelzro> sounds good

[19:48] <El_Che> the compile it at install time trick is nice :)

[19:48] <El_Che> it works around the problem readline has

[19:48] <hoelzro> well, it helps that Linenoise has a much more liberal license

[19:49] <hoelzro> (actually, I guess it doesn't - readline is GPL, which means the Readline module needs to be too, right?)

[19:49] <El_Che> and is small

[19:49] <hoelzro> yeah - that's why I chose linenoise

[19:49] <El_Che> readline is already installed on most system

[19:49] <El_Che> the trick is that often more versions are installed

[19:50] <El_Che> both versioned and no naked .so

[19:50] <El_Che> to the perl6 bindings break

[19:50] <El_Che> I have a 1 line fix fork that makes it work with libreadline7, but it means older versions are out of luck

[19:51] <uzl> Earlier I asked about object construction and although I read the docs again (and followed the advices), I am still lost.

[19:51] <uzl> The class I have has only private attributes. I'm planning to customize the constructor "new" so it

[19:51] <uzl> doesn't take any arguments. However, when it's called on the class it should return an object with the attributes 

[19:51] <uzl> initialized to some default values. As for the second constructor (let's call it "create"), it should take 

[19:51] <uzl> named parameters and initialize the private attributes.

[19:51] <El_Che> the non versioned perl6 code does not find 5 or 7 (what's on debian and opensuse) and seems to expect 6 (dunno how)

[19:57] <El_Che> uzl: you can pass arguments to new and do stuff with the passed arguments

[19:57] <El_Che> looks way easier, but of course you can do what you write

[19:58] <El_Che> I am pretty sure people mentiones BUILD and TWEAK already

[19:59] <El_Che> I don't see the problem with passing construction data to new

[19:59] <El_Che> you don't have to offer a getter for those things if not needed

[19:59] <geekosaur> the main problem is BUILDALL, I think. your class can't inherit (not even from Any or Mu) if you don;t replicate that in your custom new

[20:00] <geekosaur> iirc; there;s been some changes there

[20:01] <uzl> geekosaur: I won't be subclassing the class.

[20:01] <timotimo> geekosaur: i'm confused by what you're saying. how do youm ean "replicate" in "your custom new"?

[20:02] *** Zoffix joined
[20:02] <Zoffix> uzl: I tend to define private method !CREATE-SELF and bind to privates through it

[20:02] <geekosaur> timotimo, did this change? default new calls BUILDALL which constructs the actual object. including standard object behaviors inherited by BUILDALL calling the new from Any and Mu?

[20:02] <Zoffix> uzl: !SET-SELF rather, but name doesn't matter

[20:02] <geekosaur> I think it's still documented that way

[20:03] <Zoffix> m: class Foo { has $!meow; has $!moo; method new { self.bless }; method !SET-SELF(:$!meow, :$!moo) { self }; method create { self.bless!SET-SELF: |%_ }; method z { dd [$!meow, $!moo] } }; Foo.new.z; Foo.create(:42meow :100moo).z

[20:03] <camelia> rakudo-moar 304239d7a: OUTPUT: ¬´[Any, Any]‚ê§[42, 100]‚ê§¬ª

[20:03] <timotimo> bless calls BUILDALL, the default new calls bless

[20:03] <timotimo> so all you need to do is call bless

[20:03] <uzl> Zoffix: Will take a look at that.

[20:04] <Zoffix> Calling .bless won't save private attrs tho

[20:05] <Zoffix> m: class Foo { has $!z; method new { self.bless: :42z }; method d { dd $!z } }.new.d

[20:05] <camelia> rakudo-moar 304239d7a: OUTPUT: ¬´Any $!z = Any‚ê§¬ª

[20:05] <Zoffix> m: class Foo { has $!z; method !SET-SELF(:$!z) { self }; method new { self.bless!SET-SELF: :42z }; method d { dd $!z } }.new.d

[20:05] <camelia> rakudo-moar 304239d7a: OUTPUT: ¬´Int $!z = 42‚ê§¬ª

[20:05] <Zoffix> s/save/set/;

[20:05] <uzl> El_Che: I could pass construction data to "new" but I want to customize it so that it sets the attributes to some default.

[20:06] <Zoffix> uzl: FWIW, you *are* aware that you can give defaults to attributes right in their definition, right?

[20:06] <Zoffix> m: class Foo { has $.meow = 'foos'; has $.bar = $!meow.uc.flip; }.new.Capture.say

[20:06] <camelia> rakudo-moar 304239d7a: OUTPUT: ¬´\(:bar("SOOF"), :meow("foos"))‚ê§¬ª

[20:07] <Zoffix> uzl: and I didn't follow earlier discussion, so I don't know if it was mentioned already, but there's also submethod TWEAK where you can tweak the attrs

[20:08] <uzl> El_Che: I want the other constructor to show some intent. For example, MyClass.from-keysheet( data => "", etc.); 

[20:08] <Zoffix> m: class Foo { has $.meow = 'foos'; has $.bar; submethod TWEAK { $!bar = $!meow eq "foos" ?? "tis teh foos" !! "something else"} }.new.Capture.say

[20:08] <camelia> rakudo-moar 304239d7a: OUTPUT: ¬´\(:bar("tis teh foos"), :meow("foos"))‚ê§¬ª

[20:08] <Zoffix> m: class Foo { has $.meow = 'foos'; has $.bar; submethod TWEAK { $!bar = $!meow eq "foos" ?? "tis teh foos" !! "something else"} }.new(:42meow).Capture.say

[20:08] <camelia> rakudo-moar 304239d7a: OUTPUT: ¬´\(:bar("something else"), :meow(42))‚ê§¬ª

[20:08] <El_Che> uzl: intent is more for a method, I would say

[20:08] <El_Che> uzl: anyway, perl6 is flexible enough to do whatever you need :)

[20:09] <uzl> Zoffix: i'll have to look more closely to your examples, Zoffix!

[20:09] <Zoffix> m: dd say List.from-iterator: ^10 .iterator

[20:09] <camelia> rakudo-moar 304239d7a: OUTPUT: ¬´(0 1 2 3 4 5 6 7 8 9)‚ê§Bool::True‚ê§¬ª

[20:09] <Zoffix> ^ that one uses a differnt constructor

[20:09] <uzl> Zoffix: Thanks!

[20:09] <Zoffix> s: (), 'from-iterator', \(^1 .iterator)

[20:09] <SourceBaby> Zoffix, Something's wrong: ‚ê§ERR: Could not find candidate that can do \(<anon|19>.new)‚ê§  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 32‚ê§  in block <unit> at -e line 6‚ê§‚ê§

[20:09] <Zoffix> weird

[20:10] <Zoffix> oh, it's that bug with Callable

[20:10] <Zoffix> ah

[20:10] *** lizmat left
[20:10] <Zoffix> s: List, 'from-iterator', \(^1 .iterator)

[20:10] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/ff2bc1143/src/core/List.pm6#L187

[20:11] <Zoffix> hehe, OK nevermind, that one is just nqp code :)

[20:11] <Zoffix> (unsupported for users, so you shouldn't use it in your programs)

[20:12] *** lizmat joined
[20:20] *** Zoffix left
[20:27] *** lizmat left
[20:32] *** lizmat joined
[20:54] *** Pheix joined
[20:55] <Pheix> irclog

[20:57] <tyil> There's no =LICENSE for POD as far as I can tell, is this intentional?

[21:00] <MasterDuke> Pheix: are you looking for http://colabti.org/irclogger/irclogger_logs/perl6 ?

[21:03] *** Pheix left
[21:05] <lizmat> tyil: not sure, App::mi6 uses =head1 COPYRIGHT AND LICENSE

[21:05] <yoleaux> 18:35Z <AlexDaniel> lizmat: whoops, yeah. Brought it back up

[21:05] <buggable> New CPAN upload: PDF-Class-0.2.4.tar.gz by WARRINGD http://modules.perl6.org/dist/PDF::Class:cpan:WARRINGD

[21:07] *** Pheix joined
[21:08] *** Pheix left
[21:08] *** Pheix joined
[21:09] *** Pheix left
[21:24] *** ufobat_ left
[21:24] *** wamba left
[21:29] *** _uzl joined
[21:29] *** lizmat left
[21:29] *** uzl left
[21:34] <AlexDaniel> El_Che: actually, I think it's better to turn off automatic CI tests for the canary

[21:34] <AlexDaniel> El_Che: I tend to restart the build manually whenever I upload a tar

[21:38] <El_Che> AlexDaniel: we can restrict it to tags maybe

[21:39] <El_Che> removed the cronjob

[21:39] <AlexDaniel> thanks

[21:40] <El_Che> and "build push branches" and "build pushed PRs"

[21:40] <El_Che> is master is considere a branch, we're set :)

[21:43] *** _uzl left
[21:52] *** lizmat joined
[22:04] *** benji__ is now known as benjikung

[22:04] *** benjikung is now known as benjikun

[22:07] *** dha joined
[22:07] *** sena_kun left
[22:16] *** HaraldJoerg left
[22:28] *** haxmeister joined
[22:32] <[Coke]> is shitov normally on IRC?

[22:33] <lizmat> no

[22:33] <lizmat> I don't think so

[22:38] <[Coke]> Well, in case he reads this, love his book. :)

[22:48] <MasterDuke> is he still blogging?

[22:53] <lizmat> not afaik

[22:53] <lizmat> :-(

[22:56] * [Coke] tries to apply his new channel/supply/promise knowledge to the doc repo and fails!

[22:58] <sjn> MasterDuke: shitov blogs on https://perl6.online/ now and then

[23:19] *** [Coke] joined
[23:23] *** lizmat left
[23:28] *** dha left
[23:36] *** Xliff joined
[23:37] *** Xliff left
[23:37] *** Xliff joined
