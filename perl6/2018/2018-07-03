[00:02] *** mcmillhj left
[00:03] <Bowlslaw> ungoogled chromium?

[00:31] *** mcmillhj joined
[00:35] *** mcmillhj left
[00:46] *** mcmillhj joined
[00:50] *** mcmillhj left
[00:50] *** raschipi left
[00:55] *** BenGoldberg joined
[01:01] *** mcmillhj joined
[01:01] <benjikun> I like the new firefox alright

[01:05] *** raymond_ joined
[01:05] *** mcmillhj left
[01:07] <kjk> say I have two Seq's, seq1 and seq2; how do I create a new Seq, seq3, such that when iterated, it will go through seq1 and then seq2 ?

[01:12] *** raymond__ joined
[01:14] *** raymond_ left
[01:15] <Xliff> kjk: Why would you want to use sequences for that?

[01:15] <kjk> p6: my $seq1 = 1...5; my $seq2 = 6...10; my $seq3 = flat $seq1, |$seq2

[01:15] <camelia> rakudo-moar 55b2e32b9: OUTPUT: «Potential difficulties:␤    Useless use of ... in sink context␤    at <tmp>:1␤    ------> 3my $seq1 = 1...7⏏055; my $seq2 = 6...10; my $seq3 = flat $s␤    Useless use of ... in sink context␤    at <tmp>:1␤    ------> 3my $seq1 = 1..…»

[01:15] <Xliff> Because $seq3 is just a list of sequences, not a sequence in itself.

[01:16] <lizmat> Seq.new(List.iterator) would turn a List into a Seq

[01:16] <kjk> p6: my $seq1 = 1...5; my $seq2 = 6...10; (flat $seq1, |$seq2).WHAT

[01:16] <camelia> rakudo-moar 55b2e32b9: OUTPUT: «Potential difficulties:␤    Useless use of ... in sink context␤    at <tmp>:1␤    ------> 3my $seq1 = 1...7⏏055; my $seq2 = 6...10; (flat $seq1, |$seq␤    Useless use of ... in sink context␤    at <tmp>:1␤    ------> 3my $seq1 = 1..…»

[01:17] <kjk> Xliff: because I'm getting Seq from .pairs and I'm going to call .pairs a few times to get multiple Seq's, but in the end I want to iterate through them as if I'm iterating through just one Seq

[01:17] <Xliff> m: my $s1 = lazy 1..10; my $s2 = lazy 11..20; my $s3 = ($s1,$s2); for |$s3 { $_.eager.say }

[01:17] <camelia> rakudo-moar 55b2e32b9: OUTPUT: «(1 2 3 4 5 6 7 8 9 10)␤(11 12 13 14 15 16 17 18 19 20)␤»

[01:17] <Xliff> That gives you both sequences.

[01:18] <Xliff> You'd still need to iterate again over both.

[01:18] <Xliff> m: my $s1 = lazy 1..10; my $s2 = lazy 11..20; my $s3 = ($s1,$s2); for |$s3 { say "A$_" for $_.eager }

[01:18] <camelia> rakudo-moar 55b2e32b9: OUTPUT: «A1␤A2␤A3␤A4␤A5␤A6␤A7␤A8␤A9␤A10␤A11␤A12␤A13␤A14␤A15␤A16␤A17␤A18␤A19␤A20␤»

[01:18] <kjk> lizmat: I'd like to avoid turning the Seq's into List's if possible

[01:19] <lizmat> but you have a List of Seqs is what you're saying, right ?

[01:19] <kjk> yes

[01:19] <kjk> oh ic

[01:20] <kjk> get a list of Seqs and then turn the list into another Seq

[01:20] <kjk> would that give me a Seq of Seq's ?

[01:21] <kjk> p6: Seq.new(((1...3), (4...6)).iterator)

[01:21] <camelia> rakudo-moar 55b2e32b9: ( no output )

[01:22] <kjk> p6: Seq.new(((1...3), (4...6)).iterator).WHAT

[01:22] <camelia> rakudo-moar 55b2e32b9: ( no output )

[01:22] <kjk> p6: Seq.new(((1...3), (4...6)).iterator).WHAT.say

[01:22] <camelia> rakudo-moar 55b2e32b9: OUTPUT: «(Seq)␤»

[01:24] <kjk> hmm, since I'm goting to iterate through the Seq's, I guess there's no need to turn them into a single Seq. I see.., thanks Xliff, I'll use: for |($seq1, $seq2) { ... }

[01:24] *** aborazmeh joined
[01:24] *** aborazmeh left
[01:24] *** aborazmeh joined
[01:31] <kjk> hmm, no.  actually I want the effect of: my $s1 = lazy 1..10; my $s2 = lazy 11..20; my @s3 := (|$s1, |$s2); for @s3 { .put }

[01:31] <kjk> p6: my $s1 = lazy 1..10; my $s2 = lazy 11..20; my @s3 := (|$s1, |$s2); for @s3 { .put }

[01:31] <camelia> rakudo-moar 55b2e32b9: OUTPUT: «1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤»

[01:32] <kjk> but I'm not sure if creating the @s3 above would have already iterated both $s1 and $s2

[01:34] <Xliff> It does, which is why I leave them as separate sequences.

[01:34] *** mcmillhj joined
[01:34] <Xliff> You don't iterate through them until you need to.

[01:34] <Xliff> By creating @s3, you iterate both and store the results.

[01:35] <Xliff> Oh, wait... I missed the bind. That's not a bad idea.

[01:35] <kjk> I see. But I don't want to iterate through them separately

[01:35] <Xliff> But you still flatten them, which causes the iteration.

[01:36] <Xliff> OK, so what's the problem. You have to use the sequences eventually. 

[01:36] <lizmat> https://gist.github.com/lizmat/0f8272c91cdbf37f688cf2e08231c286

[01:36] <Xliff> The advantage of iterating through them separately means that you don't need to store them all at once.

[01:37] <kjk> I want to be able to "chain" them

[01:37] <lizmat> kjk: that's what my solution in the gist does

[01:37] <kjk> like python's itertools.chain

[01:37] <Xliff> kjk: The problem with that is that it wouldn't be a sequence. It would be a list.

[01:39] *** mcmillhj left
[01:39] <kjk> hmm, thanks lizmat, will take a closer look, but it seems to be harder than I expect 

[01:40] <lizmat> what makes it harder is what you want to achieve: laziness all along

[01:40] <Xliff> Yeah. I see it now.

[01:40] <kjk> maybe it would be easier to write a sub that uses gather take plus some for-loop?

[01:41] <lizmat> if you want to have a single Seq as the result, you need an iterator: that's basically what my gist does

[01:41] <Xliff> m: Seq.new(4, 5, 8).say

[01:41] <camelia> rakudo-moar 513577c3d: OUTPUT: «Too many positionals passed; expected 2 arguments but got 4␤  in block <unit> at <tmp> line 1␤␤»

[01:42] <Xliff> m: Seq.new((4, 5, 8).iterator).say

[01:42] <camelia> rakudo-moar 513577c3d: OUTPUT: «(4 5 8)␤»

[01:42] <lizmat> Seq.new only takes instantiated iterators

[01:42] <Xliff> I see it now.

[01:43] * lizmat goes back to trying to sleep even if it is too hot

[01:44] <AlexDaniel> m: my $s1 := (1 … 5); my $s2 := (10, {sleep 1; $_ + 1} … 20); my $x := (|$s1, |$s2); say $x[^7]; say now - BEGIN now

[01:44] <camelia> rakudo-moar 513577c3d: OUTPUT: «(1 2 3 4 5 10 11)␤1.0141914␤»

[01:44] <AlexDaniel> laziness seems to be preserved, no?

[01:44] <AlexDaniel> what am I missing?

[01:45] * AlexDaniel is late to the discussion

[01:45] <AlexDaniel> kjk: ↑ ?

[01:46] *** Bowlslaw left
[01:48] *** mcmillhj joined
[01:50] <kjk> AlexDaniel: the goal is to avoid turning the Seqs into Lists, that is, I want to be lazy all the way

[01:50] <AlexDaniel> kjk: so what is not lazy in my example?

[01:51] <kjk> I guess when you do my $x := (|$s1, |$s2) you'd essentially iterate both $s1 and $s2

[01:52] <AlexDaniel> kjk: if you iterate $s2 it will sleep for 10 seconds

[01:52] <AlexDaniel> it slept only for 1, because only 1 slow element was consumed

[01:52] <AlexDaniel> it is lazy

[01:52] <Xliff>  m: my $s1 := (1 … 5); my $s2 := (10, {sleep 1; $_ + 1} … 20); my $x := (|$s1, |$s2); say $x[^8]; say now - BEGIN now

[01:52] <camelia> rakudo-moar 513577c3d: OUTPUT: «(1 2 3 4 5 10 11 12)␤2.015284␤»

[01:52] <Xliff> m: my $s1 := (1 … 5); my $s2 := (10, {sleep 1; $_ + 1} … 20); my $x := (|$s1, |$s2); say $x[^8]; say now - BEGIN now

[01:52] <camelia> rakudo-moar 513577c3d: OUTPUT: «(1 2 3 4 5 10 11 12)␤2.0154122␤»

[01:52] <Xliff> ^^ 2 slow elements.

[01:53] <AlexDaniel> the first one is 10

[01:53] <AlexDaniel> ah yeah, right

[01:53] *** raymond__ left
[01:53] <Xliff> If it goes to 13, there will be 3 slow elements, because they are being evaluated lazily.

[01:53] *** mcmillhj left
[01:54] <Xliff> m: my $s1 := (1 … 5); my $s2 := (10, {sleep 1; $_ + 1} … 20); my $x := (|$s1, |$s2); say $x[10]; say now - BEGIN now

[01:54] <camelia> rakudo-moar 513577c3d: OUTPUT: «15␤5.0144948␤»

[01:54] <Xliff> Note, DIRECT to 10. 5 slow elements.

[01:55] <AlexDaniel> kjk: also, it seems like you assume that a List cannot be lazy, but it can

[01:55] <AlexDaniel> in the example above $x will be a lazy list

[01:56] <AlexDaniel> there's an issue with that if you're generating a lot of elements and you don't want to keep track of them

[01:58] <kjk> hmm, interesting

[02:01] <kjk> so it looks like when you slip a Seq into a list, its laziness is preserved?

[02:02] *** mcmillhj joined
[02:05] *** Zoffix joined
[02:07] *** mcmillhj left
[02:08] <AlexDaniel> kjk: and if you actually want a Seq there, I think (|$s1, |$s2).Seq should work fine

[02:08] <Zoffix> kjk: I think you're confusing "laziness" and "reification". `1 … 5` isn't lazy. It's just isn't reified. You can convert that to a list without having to reify it, and it's only when you reify it would the values be produced

[02:10] *** aborazmeh left
[02:10] <Zoffix> kjk: the `flat` you originally had is good enough. Just don't slip anything

[02:11] <Zoffix> m: my $seq1 := (1…5); my $seq2 := (6…10); my $seq3 = flat $seq1, $seq2; .say for $seq3

[02:11] <camelia> rakudo-moar 513577c3d: OUTPUT: «(1 2 3 4 5 6 7 8 9 10)␤»

[02:11] <Zoffix> m: my $seq1 := (1…5); my $seq2 := (6…10); my $seq3 = flat $seq1, $seq2; $seq3.^name.say

[02:11] <camelia> rakudo-moar 513577c3d: OUTPUT: «Seq␤»

[02:12] <Zoffix> Relevant materials: https://rakudo.party/post/Perl-6-Seqs-Drugs-and-Rock-n-Roll  https://rakudo.party/post/Perl-6-Seqs-Drugs-and-Rock-n-Roll--Part-2  https://perl6advent.wordpress.com/2017/12/02/#theoneandonly

[02:12] <Zoffix> (the last one has a bit on why slipping seqs can be a bad idea)

[02:14] <kjk> yeah, gotcha, thanks Zoffix and AlexDaniel!

[02:16] <AlexDaniel> Zoffix: what do you mean when you say that `1 … 5` isn't lazy and is just not reified?

[02:16] <AlexDaniel> Zoffix: can't you say the same thing about any sequence then?

[02:16] <Zoffix> m: say (1 … 5).is-lazy

[02:16] <camelia> rakudo-moar 513577c3d: OUTPUT: «False␤»

[02:16] <Zoffix> m: say (1 … Inf).is-lazy

[02:16] <camelia> rakudo-moar 513577c3d: OUTPUT: «True␤»

[02:17] <Zoffix> That's what I mean.

[02:17] <Zoffix> I remember writing something that overuse of "lazy" in perl 6 docs creates this sort of confusion and we should use something better.... It might've been on some docs Issue

[02:17] <AlexDaniel> using “potentially infinite” as the definition of “lazy”?

[02:18] <Zoffix> Using result of .is-lazy as definition of "lazy".

[02:18] <Xliff> .tell jnthn Is there a way to get the actual JSON from a Cro::HTTP::Response object without re-serializing the returned value?

[02:18] *** mcmillhj joined
[02:18] <yoleaux> Xliff: I'll pass your message to jnthn.

[02:18] <AlexDaniel> m: (0...-∞).is-lazy.say

[02:18] <camelia> rakudo-moar 513577c3d: OUTPUT: «False␤»

[02:18] <Zoffix> That's a bug IMO

[02:19] <AlexDaniel> IMO that's the problem with the definition :)

[02:19] <Zoffix> Whatever

[02:19] *** Zoffix left
[02:23] *** mcmillhj left
[02:23] *** lizmat left
[02:23] <kjk> I suppose you can be lazy yet still reified. laziness seems to imply that it supports some kind of api that at least gives the appearance of being lazy.

[02:24] <Xliff> m: (4 ~~ 2..6).say

[02:24] <camelia> rakudo-moar 513577c3d: OUTPUT: «True␤»

[02:24] <Xliff> m: (4 ~~ 2..3).say

[02:24] <camelia> rakudo-moar 513577c3d: OUTPUT: «False␤»

[02:25] <Xliff> (2..^5).say

[02:25] <evalable6> Xliff, rakudo-moar 513577c3d: OUTPUT: «2..^5␤»

[02:25] <Xliff> (2..^5).eager.say

[02:25] <evalable6> Xliff, rakudo-moar 513577c3d: OUTPUT: «(2 3 4)␤»

[02:25] <Xliff> (2^..^5).eager.say

[02:25] <evalable6> Xliff, rakudo-moar 513577c3d: OUTPUT: «(3 4)␤»

[02:28] *** roguelazer joined
[02:29] *** kaare_ joined
[02:30] *** mcmillhj joined
[02:34] *** mcmillhj left
[02:41] *** DeepIO_ joined
[02:41] *** DeepIO_ left
[02:42] *** DeepIO_ joined
[03:03] *** mcmillhj joined
[03:08] *** mcmillhj left
[03:30] *** konsolebox joined
[03:36] *** BenGoldberg left
[03:48] *** mcmillhj joined
[03:48] *** jjww joined
[03:52] *** kaare_ left
[03:53] *** mcmillhj left
[04:04] <Geth> ¦ p6-sake: AlexDaniel self-assigned Using run in (non-)sink context https://github.com/perl6/p6-sake/issues/12

[04:04] <Geth> ¦ p6-sake: AlexDaniel self-assigned Shell injection through filenames https://github.com/perl6/p6-sake/issues/13

[04:04] <Geth> ¦ p6-sake: AlexDaniel self-assigned Pass the current task into the block https://github.com/perl6/p6-sake/issues/7

[04:04] <Geth> ¦ p6-sake: AlexDaniel self-assigned Test framework for half-resolved issues https://github.com/perl6/p6-sake/issues/16

[04:04] <Geth> ¦ p6-sake: AlexDaniel self-assigned `file` tasks should run if one of the dependencies were updated https://github.com/perl6/p6-sake/issues/17

[04:04] <Geth> ¦ p6-sake: AlexDaniel self-assigned `task` can probably do what `file` does if an IO path is passed https://github.com/perl6/p6-sake/issues/18

[04:04] <Geth> ¦ p6-sake: AlexDaniel self-assigned “Sake” is overused, come up with something else https://github.com/perl6/p6-sake/issues/19

[04:36] *** kaare_ joined
[04:37] *** mcmillhj joined
[04:41] *** mcmillhj left
[04:43] *** Ven` joined
[04:48] *** Ven` left
[04:51] *** skids left
[04:53] *** mcmillhj joined
[04:57] *** curan joined
[04:57] *** mcmillhj left
[05:02] *** jmerelo joined
[05:05] <jmerelo> squashable6: status

[05:05] <squashable6> jmerelo, ⚠🍕 Next SQUASHathon in 3 days and ≈4 hours (2018-07-07 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[05:29] *** mcmillhj joined
[05:31] *** giraffe joined
[05:31] *** giraffe is now known as Guest56583

[05:33] *** mcmillhj left
[05:37] *** ufobat joined
[05:40] <daxim> http -v https://perl6.org/compilers/features|rg Content-Length

[05:40] <daxim> Content-Length: 0

[05:40] <daxim> web page is b0rked

[05:45] <geekosaur> ? doesn't that mean it's generated and therefore dynamic?

[05:47] <geekosaur> hm, only when there's actually content :)

[05:47] <geekosaur> (which there is, just not useful content)

[05:48] <geekosaur> but just looking at Content-Length doesn't prove anything, if you want to say it's rendering a blank page, say so

[05:54] *** mcmillhj joined
[05:55] *** xtreak joined
[05:56] <daxim> can you fix it?

[05:56] <Geth> ¦ doc: 7255125bb4 | (JJ Merelo)++ | doc/Type/Variable.pod6

[05:56] <Geth> ¦ doc: Adding constant constraints, refs #1464

[05:56] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7255125bb4

[05:56] <Geth> ¦ doc: ac0623506b | (JJ Merelo)++ | doc/Language/containers.pod6

[05:56] <Geth> ¦ doc: Adding subset constraints, refs #1464

[05:56] <synopsebot> Link: https://doc.perl6.org/type/Variable

[05:56] <synopsebot> Link: https://doc.perl6.org/language/containers

[05:56] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ac0623506b

[05:56] <Geth> ¦ doc: b4dda29783 | (JJ Merelo)++ | doc/Type/Signature.pod6

[05:56] <synopsebot> Link: https://doc.perl6.org/type/Signature

[05:56] <Geth> ¦ doc: Reflows and adds subset constraints, closes #1464

[05:56] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b4dda29783

[05:58] <jmerelo> daxim: not sure...

[05:58] <geekosaur> I can't, no. just saying that "clever" ways to point out a problemsaren't necessarily very clever

[05:58] *** mcmillhj left
[06:00] <jmerelo> geekosaur: he's helped by pointing out the problem (or she). He's shown that it's not only generating a blank page, but a zero-length page. Good for me. Thanks, daxim.

[06:00] <geekosaur> except that, as I said, zero length doesn't necessarily mean zero length. it can also mean "web server fed you output of a program that isn't telling you how much spew up front"

[06:00] <daxim> I feel vindicated. I'm also a man, don't you know me?

[06:00] <geekosaur> (not supposed to, but they do)

[06:01] <geekosaur> (which is no different from everything else in html)

[06:01] <jmerelo> daxim: probably. Any hint?

[06:01] <daxim> from yapc

[06:01] *** domidumont joined
[06:02] <jmerelo> daxim: not by nick, in this case... maybe by real name? Sorry...

[06:03] <jmerelo> daxim: that page was changed a month ago. I can't figure out what's happening. We'll have to wait for moritz, I guess.

[06:04] *** sno joined
[06:04] <daxim> ok, I guess process.pl runs as a cron job or something

[06:08] *** domidumont left
[06:09] *** domidumont joined
[06:09] <jmerelo> daxim: I have access to the server, but I haven't worked on that particular domain, only in docs.perl6.org. We'll have to wait for El_Che or moritz

[06:09] *** mcmillhj joined
[06:14] *** mcmillhj left
[06:14] *** spycrab0 joined
[06:17] *** psychoslave joined
[06:19] *** domidumont left
[06:20] *** jjww left
[06:21] *** mcmillhj joined
[06:25] <El_Che> jmerelo: I only have access to hack

[06:25] <El_Che> jmerelo: is that where it runs?

[06:26] *** mcmillhj left
[06:26] <jmerelo> El_Che: looks like it. 

[06:27] <jmerelo> El_Che: and congrats for .be going forward. I'll be supporting it from now on!

[06:27] *** obfusk joined
[06:29] <El_Che> jmerelo: lol, it looks that they could join Spain, Argentina and Germany

[06:29] <El_Che> looked

[06:29] <jmerelo> El_Che: yep, literally last-minute goal. But that has worked in the past, so why not?

[06:29] <El_Che> if Japan had gone through, they would have deserved it

[06:31] <jmerelo> El_Che: right. And Oliver and Benji would have been very happy about it.

[06:36] *** kjk left
[06:36] *** robertle joined
[06:38] *** konsolebox left
[06:38] <jmerelo> scimon's pull request yesterday was the 7000th build in travis: https://travis-ci.org/perl6/doc/builds/399079301

[06:41] *** fake_space_whale left
[06:41] *** konsolebox joined
[06:41] *** kaare_ left
[06:48] *** kaare_ joined
[06:49] *** sno left
[06:52] *** mcmillhj joined
[06:54] <masak> m: class A {}; class B {}; sub foo(A $a?, B $b?) { say "{$a // 0} {$b // 0}" }; foo(B.new)

[06:54] <camelia> rakudo-moar 513577c3d: OUTPUT: «Type check failed in binding to parameter '$a'; expected A but got B (B.new)␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:54] <masak> mh. makes sense.

[06:55] <masak> (thinking about signature binders) :)

[06:56] <daxim> literal binders full of signatures

[06:56] *** mcmillhj left
[06:56] * masak .oO( Mitteral binders )

[06:57] <daxim> it is no coincidence that mitten rhymes with kitten

[06:58] <masak> of course not. a mitten is just a baby mat.

[06:58] <masak> the English language is nothing if not consistent

[07:15] *** rindolf joined
[07:20] <jmerelo> masak: :-)

[07:22] *** wamba joined
[07:23] *** mcmillhj joined
[07:28] *** mcmillhj left
[07:38] *** mcmillhj joined
[07:42] *** mcmillhj left
[07:47] *** dakkar joined
[07:47] *** pmurias joined
[07:54] *** domidumont joined
[07:54] *** rindolf left
[07:56] *** scimon joined
[07:56] *** xtreak left
[08:00] <jmerelo> Analysis of score given to documentation in the perl 6 survey http://rpubs.com/jjmerelo/p6survey-documentation-score

[08:00] *** rindolf joined
[08:00] <jmerelo> After comments, I can republish it in Medium or some other place like that.

[08:02] <jmerelo> TL;DR: even filtering out possible trolls and segmenting by experience, score is low and does not seem to be improving comparing experienced vs. newcomers. So we need to keep working on it.

[08:02] *** pmurias left
[08:05] *** obfusk left
[08:07] *** mcmillhj joined
[08:08] *** ChoHag joined
[08:10] *** imcsk8 joined
[08:12] *** mcmillhj left
[08:12] *** obfusk joined
[08:12] *** jargan joined
[08:13] *** dogbert17 joined
[08:14] *** robertle left
[08:14] *** robertle joined
[08:14] *** pmurias joined
[08:14] *** sno joined
[08:14] *** pmichaud joined
[08:14] *** [Coke] joined
[08:15] *** [Coke] left
[08:15] *** [Coke] joined
[08:15] *** dakkar left
[08:17] *** xtreak joined
[08:20] *** mcmillhj joined
[08:25] *** mcmillhj left
[08:27] *** dakkar joined
[08:32] *** Ven` joined
[08:35] *** lizmat joined
[08:49] *** sarna joined
[08:55] * lizmat clickbaits https://p6weekly.wordpress.com/2018/07/02/2018-27-surveyed/

[08:55] <yoleaux> 02:04Z <AlexDaniel> lizmat: how can I get nth element of a Seq without caching it?

[08:55] <yoleaux> 02:07Z <AlexDaniel> lizmat: nevermind, forgot about .skip

[08:58] *** mcmillhj joined
[09:02] <sarna> hey, is it true that Zoffix won't contribute to future releases? I've seen a thing on /r/perl and I'm a bit confused about the situation 

[09:02] <sarna> (sorry for bringing this up if it's a sensitive matter)

[09:03] *** mcmillhj left
[09:03] *** pmurias left
[09:03] *** pmurias joined
[09:09] *** wamba left
[09:11] *** mcmillhj joined
[09:11] <gfldex> is there a way to call an overloaded method's (by a role that is punned in with but) overloaded candidate?

[09:12] <lizmat> sarna: please be more specific: "a thing on /r/perl" could mean a lot of things

[09:13] <Ven`> gfldex: like nextwith/callsame?

[09:13] *** eliasr joined
[09:13] <lizmat> sarna: also, perhaps better to /privmsg that with Zoffix ?

[09:14] <lizmat> afk until much later today&

[09:14] *** lizmat left
[09:14] <gfldex> Ven`: yes, but callsame wont cut it becaue I want to call iterator() (of the overloaded class/role) from new() and I can't provide a method name to callsame

[09:14] *** wamba joined
[09:15] *** mcmillhj left
[09:17] <sarna> .tell lizmat oh, it's even your post. I meant a link to IRC logs, here: http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2017-07-10#l134

[09:17] <yoleaux> sarna: I'll pass your message to lizmat.

[09:19] <sarna> .tell lizmat and why didn't I privmsg them - I didn't want to bother them if they were done with contributing. I shouldn't really bring this up in the first place, my bad

[09:19] <yoleaux> sarna: I'll pass your message to lizmat.

[09:22] <Ven`> sarna: how is a link to an irc message from a year ago relevant here?

[09:23] <sarna> Ven`: I've just been wondering if it's still relevant, as it sounded really out of place

[09:24] <Ven`> I think if you had checked any other day from that one onwards (let's say with a week pause) you'd have seen zoffix is pretty much here all the time.

[09:26] <sarna> Ven`: that's why I got confused. I could've just checked if they were still contributing on github rather than asking here, it was really stupid of me

[09:26] <Ven`> Plus they're very present in the weekly reports that lizmat++ compiles :)

[09:27] <sarna> I'm new here, I'm sorry :(

[09:29] <Ven`> contributors leaving is a weird thing to focus on when you're new to a community. anyway...

[09:30] <sarna> *can we please move on I'm so embarrassed*

[09:31] <Ven`> m: role Zero { } role Suc[::N] { } multi sub count(Zero) { 0 } multi sub count(Suc[::N]) { 1 + count(N) }; subset _0 of Zero; role Add[Zero, ::N, Result = N] {}

[09:31] <camelia> rakudo-moar 513577c3d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3role Zero { }7⏏5 role Suc[::N] { } multi sub count(Zero)␤    expecting any of:␤        infix␤        infix stop…»

[09:31] <Ven`> m: role Zero { }; role Suc[::N] { }; subset _0 of Zero; role Add[Zero, ::N, Result = N] {}

[09:31] <camelia> rakudo-moar 513577c3d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Invalid typename 'Result' in parameter declaration.␤at <tmp>:1␤------> 3t _0 of Zero; role Add[Zero, ::N, Result7⏏5 = N] {}␤»

[09:33] *** xtreak left
[09:34] *** zakharyas joined
[09:44] *** mcmillhj joined
[09:49] *** mcmillhj left
[09:52] *** Xliff left
[09:57] *** xtreak joined
[10:00] *** xtreak left
[10:03] *** xtreak joined
[10:10] *** obfusk left
[10:12] *** sena_kun joined
[10:20] *** obfusk joined
[10:21] <sarna> will the END block execute when a program crashes/its process is killed?

[10:23] *** MasterDuke left
[10:25] <Ven`> m: END say "hello"; exit 1;

[10:25] <camelia> rakudo-moar 513577c3d: OUTPUT: «hello␤»

[10:26] <Ven`> If it crashes, well, no. Killed, not sure, depends how you kill it.

[10:30] <masak> if I ^C a program with `END say "hello"`, it doesn't print anything

[10:30] <masak> ^C is a relatively "nice" kill

[10:30] <masak> so I think we might conclude from that one data point that nothing runs on process kill

[10:31] <sarna> thanks

[10:32] <jnthn> You can probably install a signal handler for SIGINT and call exit in that to get it more orderly

[10:32] <yoleaux> 02:18Z <Xliff> jnthn: Is there a way to get the actual JSON from a Cro::HTTP::Response object without re-serializing the returned value?

[10:33] <jnthn> .tell Xliff Not exactly, but you can just get the json and the set-body to that and then there's nothing to re-serialize

[10:33] <yoleaux> jnthn: I'll pass your message to Xliff.

[10:39] *** lookatme joined
[10:51] *** Ven` left
[11:02] *** jargan is now known as jast

[11:02] *** DeepIO_ left
[11:09] *** obfusk left
[11:11] *** markoong joined
[11:13] *** brabo joined
[11:17] *** brabo left
[11:20] *** obfusk joined
[11:37] <Juerd> m: say "127.0.0.1" ~~ /^ [ <{ 0 .. 255 }> ]**4 % \. $/; say now - INIT now  # whoa

[11:37] <camelia> rakudo-moar 513577c3d: OUTPUT: «｢127.0.0.1｣␤6.28851386␤»

[11:42] *** S007 joined
[11:45] <Ulti> pmurias cool news about NQP on truffle/graal I guess Truffle is actually a good fit for an NQP back end given its AST like? or does it basically make no difference because its different enough

[11:46] *** domm joined
[11:46] <Juerd> 1;0 juerd@cxien:~$ perl6 --profile -e'say "127.0.0.1" ~~ /^ [ <{ 0 .. 255 }> ]**4 % \. $/; say now - INIT now'

[11:46] <Juerd> Segmentation fault

[11:46] <Juerd> :(

[11:48] *** koto joined
[11:48] *** sena_kun left
[11:52] <Ulti> me too

[11:53] <Juerd> Filed as #2013

[11:56] <sarna> I'm getting a segfault when trying to profile a program that consumes a lot of memory

[11:57] <sarna> I guess it just runs out of memory (max is 2gb, it seems) and gives up

[12:06] *** wamba left
[12:13] <jkramer> Is shlomif (from https://github.com/shlomif/) active here?

[12:17] <jmerelo> .seen shlomif

[12:17] <yoleaux> I haven't seen shlomif around.

[12:17] <jmerelo> jkramer: but he's around, under another nick.

[12:17] <rindolf> jkramer: hi

[12:18] <rindolf> jkramer: i am shlomif

[12:24] *** g- joined
[12:25] <jkramer> rindolf: Oh hi. :) I just read in the p6weekly that you're collecting euler problems as P6 benchmarks and I happen to have implemented a couple of euler problems in P6. Just wanted to ask if you're interested in them for your repo

[12:26] <jkramer> I don't have implementations in other languages for comparison though

[12:26] <El_Che> or merge the repos :)

[12:27] *** jmerelo left
[12:27] <jkramer> El_Che: I don't have them in a repo yet, I've just done them for fun/learning/profit :)

[12:28] <rindolf> jkramer: can you put them under a foss licence?

[12:29] <jkramer> rindolf: Sure

[12:29] <rindolf> jkramer: ok

[12:30] <rindolf> jkramer: note that https://github.com/perl6/perl6-examples/tree/master/categories/euler

[12:30] <rindolf> jkramer: thanks

[12:30] <jkramer> Oh nice, didn't know that repo

[12:31] <rindolf> jkramer: also see https://github.com/shlomif/project-euler

[12:31] <jkramer> rindolf: Do you consider multithreading cheating in benchmarks/comparison with other implementations? Because I made use of MT a lot to speed things up :)

[12:32] <rindolf> jkramer: kinda

[12:32] <rindolf> jkramer: the programs should have the same algo

[12:32] <jkramer> Hmm ok

[12:33] <jkramer> I gotta look through my implementations then and maybe remove threading.

[12:34] <stmuk_> I'm now seeing Sept 30 for my preorder of "Learning Perl 6" ... I hope its released "for Xmas" :)

[12:36] *** kaare_ left
[12:40] *** Ven` joined
[12:40] *** mcmillhj joined
[12:51] *** Ven` left
[12:53] *** Ven` joined
[12:56] <El_Che> moritz: did jmerelo pinged you about a problem he had with the site?

[12:56] <moritz> El_Che: which site?

[12:57] <El_Che> moritz: I think it was https://docs.perl6.org/features.html

[12:58] <El_Che> moritz: about something wrong with the generation, but I don't know the details. He will pop up soon enough :)

[13:04] *** curan left
[13:05] *** xtreak left
[13:05] *** turdmonkey joined
[13:05] *** turdmonkey is now known as Bowlslaw

[13:07] <moritz> the perlbrew'd perl that is used in the update process misses some required modules

[13:09] <moritz> https://perl6.org/compilers/features works again

[13:12] *** kaare_ joined
[13:12] <Bowlslaw> Good morning, everyone.

[13:12] <Bowlslaw> I can't stop coding in Perl 6.

[13:12] <Bowlslaw> @_@

[13:14] <moritz> El_Che: I've created https://github.com/perl6/perl6.org/issues/117

[13:15] *** kerframil joined
[13:19] <benjikun> Good morning Bowlslaw

[13:19] <benjikun> Yeah, same. It's grown on me too far lol

[13:26] *** uzl joined
[13:27] *** Schepeers joined
[13:31] *** Xliff joined
[13:34] <uzl> Good morning everyone!

[13:34] <yoleaux> 28 Jun 2018 16:08Z <jmerelo> uzl: the Perl6 crowd is, in general, very welcoming. You'll feel at home.

[13:34] <yoleaux> 28 Jun 2018 17:02Z <b2gills> uzl: `'abcccccd'.comb.Bag.max(*.value)`

[13:35] <benjikun> morning uzl

[13:35] <uzl> Good morning!

[13:36] <Bowlslaw> Good morning.

[13:36] <uzl> m: my $s = set(set(1, 3), set(20, 4)); .say for ($s.Str.comb(/\d+/));

[13:36] <camelia> rakudo-moar 513577c3d: OUTPUT: «4␤20␤1␤3␤»

[13:38] <uzl> Is there a more direct way of creating an array from a set of set? I want to preserve the "set of set" structure as an "array of arrays" bu haven't been able to.

[13:38] <uzl> However, with this example, I was able to at least iterate over the elements of the set.

[13:42] <tobs> m: my $s = set(set(1, 3), set(20, 4)); my &s2a = { .keys.Array }; say $s.&s2a».&s2a

[13:42] <camelia> rakudo-moar 513577c3d: OUTPUT: «[[3 1] [4 20]]␤»

[13:42] <tobs> uzl: that seems to work, but I'm very insecure with conversions like that in P6.

[13:45] <uzl> tobs: why's that? btw, what's »?

[13:47] <benjikun> uzl: https://docs.perl6.org/language/unicode_entry#Guillemets

[13:50] <benjikun> He's using it for hyper operators :)

[13:51] *** scovit joined
[13:51] <tobs> uzl: I'm new to it. When transforming data structures (recursively), I sometimes accidentally create additional scalar containers instead of Slip'ing the new data in.

[13:52] <scovit> Is it normal that naming a method in a Class "of" introduces bugs? What is so special about "of"

[13:53] <benjikun> scovit: Perhaps the routine

[13:53] <benjikun> https://docs.perl6.org/routine/of

[13:53] <jnthn> m: my Int @array; say @array.of

[13:53] <camelia> rakudo-moar 513577c3d: OUTPUT: «(Int)␤»

[13:53] <uzl> tobs: oh, I see!

[13:53] <uzl> benjikun: will look into it!

[13:55] <scovit> I see that it is very special

[13:59] *** mcmillhj left
[14:00] *** benjikun left
[14:00] *** zakharyas left
[14:00] *** benjikun joined
[14:00] *** benjikun left
[14:00] *** benjikun joined
[14:05] *** sarna__ joined
[14:07] *** Zoffix joined
[14:07] <Zoffix> sarna: what does it matter what I will or won't contribute to?

[14:08] <sarna__> Zoffix: it's just that I'd be very sad to see you go

[14:11] <scovit> Plase tell me if I should report a bug, the situation is the following, create a file called Bugged.pm6 in your directory and the following content: https://gist.github.com/scovit/c59c2db453184e6c4f680071abc8cd95

[14:11] <scovit> then try this: use NativeCall;

[14:11] <scovit> class Bugged is repr('CPointer') is export {

[14:11] <scovit>     method of() { }

[14:11] <scovit> }

[14:11] <scovit> class Fine is repr('CPointer') is export {

[14:11] <scovit>     method nana() { }

[14:11] <scovit> }

[14:11] <scovit> no!

[14:11] <scovit> this: PERL6LIB=. perl6 -MNativeCall -MBugged -e 'sub memcpy(Fine, Pointer, size_t) is native {*}'

[14:11] <scovit> and this: PERL6LIB=. perl6 -MNativeCall -MBugged -e 'sub memcpy(Bugged, Pointer, size_t) is native {*}'

[14:12] <scovit> you see that the error at least is not clear

[14:12] <Zoffix> FWIW a shorter way to write PERL6LIB=. is to pass -I. option

[14:12] <scovit> thanks Zoffix, but should I report or not?

[14:14] <Zoffix> scovit: yeah, I think so

[14:14] <Zoffix> It's the definition of method `of` that makes it cry

[14:16] <Zoffix> And it's calling it here: https://github.com/rakudo/rakudo/blob/master/lib/NativeCall.pm6#L695

[14:19] <Zoffix> scovit: so you just wanted to define a method `of` for some feature unrelated to its normal usage or were you trying to override what `of` returns?

[14:20] <scovit> I'm checking

[14:21] <scovit> normally a CPointer would not have any of

[14:21] <scovit> so that line 695 is atleast weird

[14:22] <scovit> I think I was implementing it for my class, and I didn't do it the way it should be done to play well with NativeCall

[14:22] <scovit> do you know of any repr("CPointer") type that implement .of?

[14:23] <Zoffix> I don't know much about CPointer

[14:23] <scovit> m: class Fine is repr("CPointer") { }; say Fine.new().of;

[14:23] <Zoffix> *about NativeCall

[14:23] <camelia> rakudo-moar 513577c3d: OUTPUT: «No such method 'of' for invocant of type 'Fine'␤  in block <unit> at <tmp> line 1␤␤»

[14:24] <Zoffix> m: use NativeCall; say [.REPR, .of] without Pointer[uint32]

[14:24] <camelia> rakudo-moar 513577c3d: OUTPUT: «[CPointer (uint32)]␤»

[14:24] <Zoffix> That method's set when you parametarize stuff

[14:25] *** eliasr left
[14:25] <scovit> Yea.. it is parametrized pointer.. Do you know how do you create a parametrized class?

[14:26] <Zoffix> I think you mix in a parametarized role

[14:26] *** mcmillhj joined
[14:26] *** mcmillhj left
[14:27] <scovit> Not in this case, here: https://github.com/rakudo/rakudo/blob/master/lib/NativeCall/Types.pm6#L18 and here: https://github.com/rakudo/rakudo/blob/master/lib/NativeCall/Types.pm6#L79

[14:28] <scovit> well it mixes in

[14:29] <Zoffix> ¯\_(ツ)_/¯

[14:29] *** Zoffix left
[14:32] *** skids joined
[14:42] <scovit> I don't think I will report. functioning of of() in NativeCall is very complicated and I was not doing it right

[14:46] *** xtreak joined
[14:49] <scovit> When you inherit a class, do you inherit also the repr ? It does not feel like

[14:54] *** xtreak left
[15:02] *** jmerelo joined
[15:02] <jmerelo> squashable6: status

[15:02] <squashable6> jmerelo, ⚠🍕 Next SQUASHathon in 2 days and ≈18 hours (2018-07-07 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:02] <El_Che> releasable6: status

[15:02] <releasable6> El_Che, Next release in ≈18 days and ≈3 hours. 1 blocker. 0 out of 62 commits logged

[15:02] <releasable6> El_Che, Details: https://gist.github.com/ebd2cadd666d3a3918d2ea2d9e30e402

[15:11] <sarna__> can a hash sometimes implicitly coerce to an array?

[15:11] <jmerelo> sarna__: in an array context, it might.

[15:12] *** xtreak joined
[15:12] *** gfldex joined
[15:16] *** xtreak left
[15:21] *** zakharyas joined
[15:21] *** Xliff left
[15:22] *** fake_space_whale joined
[15:22] <jmerelo> Right now, 750 questions labeled "Perl6" in StackOverflow https://stackoverflow.com/questions/tagged/perl6

[15:26] <sarna__> can I make a program quit when a constraint fails? now I only get a "type check failed" after it's done

[15:26] *** mcmillhj joined
[15:27] <jmerelo> sarna__: but that's normally a Failure that, if uncaught, will stop the program

[15:27] <sarna__> jmerelo: weird, I'm not catching it anywhere

[15:30] <jmerelo> sarna__: maybe an example will help

[15:33] <sarna__> jmerelo: it's kind of weird.. I'll try to shorten it as much as possible

[15:37] *** uzl left
[15:40] *** uzl joined
[15:47] *** pmurias left
[15:48] <sarna__> jmerelo: https://p.teknik.io/RWiSQ

[15:48] <sarna__> to reproduce: run it, give it an invalid number and then something in range 1-10

[15:49] <sarna__> (by invalid number I mean something not in range 1..10)

[15:49] <sarna__> it tries to run foo($x) for some reason

[15:55] *** wamba joined
[16:08] *** zakharyas left
[16:11] *** sarna__ left
[16:13] *** psychoslave left
[16:13] *** xtreak joined
[16:18] *** stee3 left
[16:18] *** robertle left
[16:21] *** domidumont left
[16:22] *** zakharyas joined
[16:22] *** gtodd joined
[16:25] <jmerelo> .tell sarna__ it's returning from samewith and getting back to the original number that was assigned the first time.

[16:25] <yoleaux> jmerelo: I'll pass your message to sarna__.

[16:26] <jmerelo> .tell sarna__ sarna sarna_ you should probably use a normal loop. Samewith is not repeating the loop but calling again the same function... and returning from it

[16:26] <yoleaux> jmerelo: I'll pass your message to sarna__.

[16:26] <El_Che> lol

[16:27] <El_Che> m: say sarna.permutations

[16:27] <camelia> rakudo-moar 513577c3d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    sarna used at line 1. Did you mean 'srand', 'warn'?␤␤»

[16:27] <sarna> hey, my client borked, no need to publicly shame me for that

[16:27] <El_Che> m: say "sarna".permutations

[16:27] <camelia> rakudo-moar 513577c3d: OUTPUT: «((sarna))␤»

[16:27] <El_Che> mm

[16:27] <El_Che> :)

[16:28] <jmerelo> sarna: I was just trying to send it to every possible way... I assumed you were not coming back as sarna__

[16:28] <El_Che> shaaaame!

[16:28] <jmerelo> sarna: did you see the message above?

[16:28] <sarna> jmelero: yeah, I know :) just joking

[16:28] <sarna> yep

[16:28] <sarna> I don't quite understand it yet

[16:28] <El_Che> it sounds like a scene of GoT

[16:29] <jmerelo> sarna: samewith is calling the same bar function

[16:29] <sarna> shouldn't it jump to the top, ask for another number and run foo with that another number (if it's valid)?

[16:29] <jmerelo> sarna: yep, it does, but then it returns and the value it has is the original before samewith was called.

[16:29] <jmerelo> I'm going to upload it with says 

[16:30] *** scimon left
[16:30] <jmerelo> sarna: https://github.com/JJ/my-perl6-examples/blob/master/from-sarna.p6

[16:31] <sarna> jmerelo: oh! how can I skip the returning part?

[16:31] <El_Che> from-sarna-to-picazón.p6

[16:31] <jmerelo> sarna: run it and enter first 33 and then 3. If you do 33, it says "wrong number 33", then samewith, you enter 3, says "out of the loop with 3", then "in foo say 3", but then it goes back to the original

[16:32] * sarna 's head begins to hurt

[16:32] <jmerelo> sarna: declare $x before the loop, put the prompt inside the loop and get rid of samewith.

[16:32] <jmerelo> sarna: and don't pay any attention to El_Che :-)

[16:32] <El_Che> as a general rule?

[16:33] <jmerelo> El_Che: only when you're talking about cooking and/or football.

[16:33] <jmerelo> El_Che: maybe docker and packaging.

[16:33] <sarna> jmerelo: alright, I'll try it when I'm back from a walk :^) thank you

[16:33] <jmerelo> sarna: sure :-)

[16:34] <sarna> what's so bad about El_Che's cooking

[16:34] <El_Che> Deja que los perros ladren Sancho amigo, es señal que vamos pasando. (apócrifa)

[16:34] <geekosaur> samewith is not a looping construct, it is used to "rethink" dispatch between multis. perhaps you were looking for redo

[16:34] <jmerelo> sarna: no, that's the good part. The bad part is Spanish jokes...

[16:35] <jmerelo> El_Che: :-) "Ladran, luego cabalgamos..."

[16:35] <El_Che> :)

[16:35] <sarna> geekosaur: whew, I thought it was like recur in clojure

[16:38] *** zakharyas left
[16:39] <sarna> jmerelo: Spanish swears are really interesting though

[16:39] <sarna> defecating into the sea when one's angry..

[16:40] <jmerelo> sarna: the "salty" sea. Not just the sea. Yep, that's colorful.

[16:41] <sarna> jmerelo: oh! I missed the crucial part

[16:41] <El_Che> Iberic spanish swearing is interesting, indeed

[16:42] <El_Che> a lot of defecating 

[16:42] <masak> jmerelo: reminds me of these expressions: https://twitter.com/intifadarling/status/1001998625839505408

[16:42] *** dakkar left
[16:44] *** MasterDuke joined
[16:45] <jmerelo> masak: Inspiring :-)

[16:46] *** lizmat joined
[16:52] <sarna> Catalans even put a defecating man next to baby Jesus on Christmas

[16:53] *** uzl left
[16:54] <sarna> (the infamous caganer)

[16:55] *** ChoHag left
[16:56] *** ChoHag joined
[17:00] <jmerelo> sarna: hey, shepherds do their number twos too! It gives everything a point of realism.

[17:02] *** koto left
[17:02] *** uzl joined
[17:03] <sarna> jmerelo: Jesus did it too!

[17:05] <Geth> ¦ doc: 8e9251bfa7 | (JJ Merelo)++ | doc/Language/list.pod6

[17:05] <Geth> ¦ doc: Some reflow and rephrasing

[17:05] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8e9251bfa7

[17:05] <synopsebot> Link: https://doc.perl6.org/language/list

[17:12] <jmerelo> sarna: but of course :-)

[17:15] *** wamba left
[17:20] *** xtreak left
[17:26] *** psychoslave joined
[17:28] <Geth> ¦ doc: a7691bee21 | (JJ Merelo)++ | doc/Language/list.pod6

[17:28] <Geth> ¦ doc: Improves and fixes some errors in the lazy "lists" section

[17:28] <Geth> ¦ doc: 

[17:28] <Geth> ¦ doc: * Changes indexing

[17:28] <synopsebot> Link: https://doc.perl6.org/language/list

[17:28] <Geth> ¦ doc: * Changes the link to Iterator to a link to Iterable

[17:28] <Geth> ¦ doc: * Refers generically to objects, not specifically to lists.

[17:28] <Geth> ¦ doc: 

[17:28] <Geth> ¦ doc: This refs #2139, but there's some more work to do. Including,

[17:28] <Geth> ¦ doc: possibly, moving the whole section to another page, such as Iterators.

[17:28] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a7691bee21

[17:28] *** zakharyas joined
[17:37] *** sno left
[17:37] *** domidumont joined
[17:45] *** eliasr joined
[17:49] *** wamba joined
[17:54] *** uzl left
[17:55] *** zakharyas left
[17:57] <Altreus> From Testing: IO::Socket::Async::SSL:ver<0.7.0>: Cannot locate symbol 'sk_num' in native library 'libssl.so'

[17:57] <Altreus> Known issue? :s

[18:00] <Altreus> oh good

[18:00] <Altreus> I found the github from zef :)

[18:05] <El_Che> Does The Github have a The Facebook page?

[18:05] <Geth> ¦ doc: b856651f24 | (JJ Merelo)++ | doc/Language/list.pod6

[18:05] <Geth> ¦ doc: Clarifying the dual Iterable/Iterator roles in a lazy contest refs #2139

[18:05] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b856651f24

[18:05] <Geth> ¦ doc: f3052b8f48 | (JJ Merelo)++ | doc/Language/list.pod6

[18:05] <Geth> ¦ doc: Adding examples of casting among lazyfiable objects

[18:05] <synopsebot> Link: https://doc.perl6.org/language/list

[18:05] <Geth> ¦ doc: 

[18:05] <Geth> ¦ doc: Which refs #2139

[18:05] <Geth> ¦ doc: 

[18:05] <Geth> ¦ doc: I won't close until we decide if we leave it here or move to the new

[18:05] <Geth> ¦ doc: Iterating page, since this not only refers to lists, but also to Seqs

[18:05] <Geth> ¦ doc: and Maps.

[18:05] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f3052b8f48

[18:06] <jmerelo> El_Che: does The Facebook has a The Twitter nick?

[18:17] *** stee joined
[18:22] *** sena_kun joined
[18:29] *** benjikun2 joined
[18:29] *** jmerelo left
[18:30] *** sauvin left
[18:30] *** benjikun left
[18:51] *** domidumont left
[18:51] *** Ven` left
[18:52] *** kerframil left
[19:27] *** grumble joined
[19:28] *** musca joined
[19:28] *** pecastro joined
[19:29] *** lizmat left
[19:33] *** zakharyas joined
[19:38] *** sena_kun left
[19:39] *** lizmat joined
[19:40] <Geth> ¦ doc: Kaiepi++ created pull request #2140: More documentation on library paths and names

[19:40] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2140

[19:46] *** Aceeri_ joined
[19:46] *** lizmat left
[20:06] *** Possum left
[20:13] *** Possum joined
[20:14] *** zachk joined
[20:14] *** zachk left
[20:14] *** zachk joined
[20:15] *** psychoslave left
[20:24] *** sno joined
[20:27] *** mscha joined
[20:28] <mscha> m: my @foo = (1,2),(3,4),(5,6),(7,8); say [Z+] @foo; # fine

[20:28] <camelia> rakudo-moar 513577c3d: OUTPUT: «(16 20)␤»

[20:28] <mscha> m: my @foo = (1,2),(3,4); say [Z+] @foo; # fine

[20:28] <camelia> rakudo-moar 513577c3d: OUTPUT: «(4 6)␤»

[20:28] <mscha> m: my @foo = (1,2),; say [Z+] @foo; # grrrr

[20:28] <camelia> rakudo-moar 513577c3d: OUTPUT: «(3)␤»

[20:32] *** rindolf left
[20:36] *** rindolf joined
[20:39] *** sarna left
[20:52] *** raynold joined
[20:54] *** AlexDaniel joined
[20:58] *** zakharyas left
[21:08] <spycrab0> Is there more in-depth documentation on NativeCall then https://docs.perl6.org/language/nativecall?

[21:10] *** skids left
[21:11] *** mcmillhj left
[21:11] *** DrForr joined
[21:12] <DrForr> o/

[21:16] <AlexDaniel> squashable6: next

[21:16] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 2 days and ≈12 hours (2018-07-07 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[21:16] <AlexDaniel> o/

[21:16] *** Kaiepi joined
[21:17] *** sena_kun joined
[21:18] *** sena_kun left
[21:20] <DrForr> Sitting here contemplating a UI for Spreadsheet::Excel.

[21:25] <jnthn> .oO( Isn't that called Excel? :) )

[21:25] <DrForr> Already done so I won't have to? Yay...

[21:26] <DrForr> Or you just mean the GUI...

[21:26] <jnthn> I meant the GUI :)

[21:26] <DrForr> Thought as much...

[21:26] <jnthn> Do we have a Perl 6 Spreadsheet::Excel?

[21:27] <DrForr> Not that I'm aware of.

[21:28] <jnthn> Aww :)

[21:45] *** Xliff joined
[21:58] *** rindolf left
[22:11] *** Xliff left
[22:30] *** Bowlslaw left
[22:45] *** cog joined
[22:55] *** mscha left
[23:11] *** cog left
[23:12] *** cog joined
[23:19] *** daxim joined
[23:19] *** Kaiepi left
[23:21] *** Kaiepi joined
[23:21] *** benji__ joined
[23:25] *** benjikun2 left
