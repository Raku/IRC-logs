[00:00] *** japhb joined
[00:00] <DrForr> Proposals in, bedtime.

[00:01] <DrForr> Just the two this time - I figure that the short-form stuff doesn't work for me anyway because I need to justify the overseas flight, and a simple 40min talk isn't quite enough.

[00:02] *** imcsk8 joined
[00:04] <comborico1611> ilmari: It worked!  'html-mode didn't but 'html-mode-hook did.

[00:04] <comborico1611> Thank you!

[00:05] <ilmari> comborico1611: yes, I mistyped

[00:05] <ilmari> every mode has a corresponding hook

[00:06] <comborico1611> I was just reading about hooks, but I thought it was more for when you turn a mode on manually.

[00:06] <comborico1611> I wasn't quite sure if hooks was my answer.  So I moved on after some reading.

[00:07] <comborico1611> It's weird.  Electric-indent-mode is still on, but it doesn't function.  Is that normal?

[00:09] *** eliasr left
[00:10] *** quotable6 left
[00:10] *** quotable6 joined
[00:13] *** comborico1611 left
[00:21] *** comborico left
[00:22] *** comborico1611 joined
[00:22] *** enheh joined
[00:24] *** markong left
[00:24] *** enheh left
[00:25] *** aindilis joined
[00:28] *** Rawriful left
[00:29] *** aindilis` joined
[00:31] *** Kaiepi left
[00:32] *** lookatme joined
[00:32] *** Kaiepi joined
[00:39] *** traxex joined
[00:39] *** traxex is now known as Guest69666

[00:40] *** Guest69666 is now known as traxex2

[00:49] *** Sgeo left
[00:50] *** Sgeo joined
[00:55] *** cdg joined
[00:59] *** cdg_ left
[00:59] *** cdg__ joined
[00:59] *** skids joined
[01:00] *** cdg left
[01:02] *** Cabanossi left
[01:04] *** cdg__ left
[01:05] *** Cabanossi joined
[01:22] *** cdg joined
[01:26] *** cdg left
[01:31] *** trnh left
[01:40] *** trnh joined
[01:43] *** cdg joined
[01:47] *** cdg left
[01:50] <Geth> ¦ whateverable: 31e20295c6 | (Aleks-Daniel Jakimenko-Aleksejev)++ | bin/Quotable.p6

[01:50] <Geth> ¦ whateverable: Don't attempt to format non-messages

[01:50] <Geth> ¦ whateverable: 

[01:50] <Geth> ¦ whateverable: Currently it bails out with a single Str if nothing was found for a

[01:50] <Geth> ¦ whateverable: channel. There is probably a better way to do it, but for now this is

[01:50] <Geth> ¦ whateverable: an improvement (no more Nil complaints).

[01:50] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/31e20295c6

[01:50] <Geth> ¦ whateverable: 81b91def9e | (Aleks-Daniel Jakimenko-Aleksejev)++ | t/quotable.t

[01:50] <Geth> ¦ whateverable: Fix Quotable tests

[01:50] <Geth> ¦ whateverable: 

[01:50] <Geth> ¦ whateverable: According to all of the recent changes.

[01:50] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/81b91def9e

[01:59] <Geth> ¦ whateverable: 19661e629d | (Aleks-Daniel Jakimenko-Aleksejev)++ | t/coverable.t

[01:59] <Geth> ¦ whateverable: Fix Coverable tests

[01:59] <Geth> ¦ whateverable: 

[01:59] <Geth> ¦ whateverable: The source line in rakudo simply changed.

[01:59] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/19661e629d

[01:59] <Geth> ¦ whateverable: 90e408579a | (Aleks-Daniel Jakimenko-Aleksejev)++ | t/greppable.t

[01:59] <Geth> ¦ whateverable: Fix Greppable test

[01:59] <Geth> ¦ whateverable: 

[01:59] <Geth> ¦ whateverable: It simply needs a bit more time now. Not sure why though.

[01:59] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/90e408579a

[02:00] *** trnh left
[02:04] *** cdg joined
[02:09] <Geth> ¦ whateverable: 1fc6ce832f | (Aleks-Daniel Jakimenko-Aleksejev)++ | bin/Coverable.p6

[02:09] <Geth> ¦ whateverable: Fix Coverable

[02:09] <Geth> ¦ whateverable: 

[02:09] <Geth> ¦ whateverable: It was attempting to write to a file in CWD, which does not work so

[02:09] <Geth> ¦ whateverable: well when the filesystem is not writeable.

[02:09] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/1fc6ce832f

[02:09] <AlexDaniel> squashable6: next

[02:09] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 2 days and ≈7 hours (2018-02-03 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[02:12] <comborico1611> I learned how GitHub works today.

[02:12] *** nativecallable6 left
[02:12] *** nativecallable6 joined
[02:15] *** nativecallable6 left
[02:15] *** nativecallable6 joined
[02:16] <comborico1611> Goodnight!

[02:16] *** comborico1611 left
[02:23] <Geth> ¦ whateverable: 559768852d | (Aleks-Daniel Jakimenko-Aleksejev)++ | bin/Nativecallable.p6

[02:23] <Geth> ¦ whateverable: Half-fix Nativecallable

[02:23] <Geth> ¦ whateverable: 

[02:23] <Geth> ¦ whateverable: Still won't chooch properly. See issue #281

[02:23] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/559768852d

[02:23] <Geth> ¦ whateverable: 8950c8f8fb | (Aleks-Daniel Jakimenko-Aleksejev)++ | services/whateverable@.service

[02:23] <Geth> ¦ whateverable: Point stdout and stderr somewhere

[02:23] <Geth> ¦ whateverable: 

[02:23] <Geth> ¦ whateverable: Otherwise things freak out.

[02:23] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/8950c8f8fb

[02:30] *** paul_ left
[02:31] *** itaipu left
[02:40] *** nativecallable6 left
[02:40] *** nativecallable6 joined
[02:40] *** Actualeyes joined
[02:42] *** nativecallable6 left
[02:43] *** nativecallable6 joined
[02:44] *** ilbot3 left
[02:57] *** ilbot3 joined
[02:57] *** ChanServ sets mode: +v ilbot3

[02:59] *** Kaiepi left
[03:05] *** Kaiepi joined
[03:06] *** dogbert11 joined
[03:06] *** Kaiepi left
[03:08] *** Kaiepi joined
[03:08] *** Eddward joined
[03:09] <Eddward> Is there a perldoc~ish thing for perl6?

[03:09] *** dogbert17 left
[03:09] <geekosaur> p6doc

[03:09] <Eddward> great!  Thanks!

[03:12] *** aindilis left
[03:12] *** aindilis` left
[03:13] *** aindilis joined
[03:13] *** AlexDaniel left
[03:23] *** riatre left
[03:23] *** simcop2387 left
[03:24] *** riatre joined
[03:26] *** simcop2387 joined
[03:30] *** astj_ joined
[03:30] *** astj left
[03:32] *** Eddward left
[03:34] *** astj_ left
[03:34] *** astj joined
[03:35] *** astj left
[03:36] *** astj joined
[03:37] *** astj left
[03:39] *** astj joined
[03:40] *** ufobat_ joined
[03:43] *** ufobat left
[03:45] *** astj_ joined
[03:45] *** astj left
[03:49] *** konsolebox left
[03:51] *** konsolebox joined
[03:55] *** cdg left
[03:56] *** cdg joined
[03:57] *** konsolebox left
[03:57] *** konsolebox joined
[04:00] *** cdg left
[04:23] *** Cabanossi left
[04:24] *** Cabanossi joined
[04:25] *** Actualeyes left
[04:35] <lucs> m: sub f (*@a) { say $_[0] for @a }; f([1, 2], [3, 4]);  # Hoping to get 1,3. How?

[04:35] <camelia> rakudo-moar deffe54b8: OUTPUT: «1␤2␤3␤4␤»

[04:37] <Xliff> m: sub f (+@a) { say $_[0] for @a }; f([1, 2], [3, 4]);

[04:37] <camelia> rakudo-moar deffe54b8: OUTPUT: «1␤3␤»

[04:37] <Xliff> lucs: ^^

[04:38] <lucs> Hmm... Never saw that +@a syntax. Back to the docs :)

[04:38] <lucs> Thanks

[04:38] *** mahafyi joined
[04:41] <ZzZombo> Am I right that Perl 6 doesn't actually care whether something is `Callable`, and only looks at whether something `can("CALL-ME")`?

[04:41] <ZzZombo> m: (1 but role {method CALL-ME{'called'.say}})()

[04:41] <camelia> rakudo-moar deffe54b8: OUTPUT: «called␤»

[04:42] <ZzZombo> m: say 1 ~~ Callable

[04:42] <camelia> rakudo-moar deffe54b8: OUTPUT: «False␤»

[04:42] * lucs finds https://docs.perl6.org/language/functions#Slurpy_Conventions and is happy.

[04:44] <geekosaur> ZzZombo, largely you are correct. I am moderately grump about this, since CALL-ME is an internal thing that should either be wrapped by a stable API or should be completely hidden

[04:45] <ZzZombo> Yea, my though exactly.

[04:45] <ZzZombo> thought*

[04:46] <Xliff> geekosaur ~~ s/grump/grumpy/ # ?

[04:46] <geekosaur> yeh

[04:46] <Xliff> :)

[04:48] <skids> .oO(exposed circular saw tooth)

[04:48] <yoleaux> 25 Dec 2017 02:58Z <Zoffix> skids: Can't figure out... what does "fragged" mean in this commit? https://github.com/perl6/roast/commit/65ed5b0ba5cb6822a2aea97c3c41d0f1b3a019f4

[04:48] <skids> Heh.  blast from the past.

[04:50] <skids> And the commit is even paster

[05:03] <skids> .tell Zoffix WRT https://github.com/perl6/roast/commit/65ed5b0ba5cb6822a2aea97c3c41d0f1b3a019f4 by "fragged" I just meant that elements were pulled out of the squish in chunks as opposed to the corresponding simple call tests.

[05:03] <yoleaux> skids: I'll pass your message to Zoffix.

[05:06] *** llfourn left
[05:09] *** llfourn joined
[05:11] *** skids left
[05:19] *** cdg joined
[05:23] *** cdg left
[05:25] *** skids joined
[05:28] *** Sgeo left
[05:29] *** llfourn left
[05:30] *** Sgeo joined
[05:31] *** jeromelanteri joined
[05:42] *** skids left
[05:43] *** xtreak joined
[05:44] *** curan joined
[06:00] *** Actualeyes joined
[06:06] *** khw left
[06:27] *** ZzZombo left
[06:28] *** ZzZombo joined
[06:34] *** _npr_ joined
[06:34] <ZzZombo> m: &say.wrap(sub($only-one){print $only-one});say 1,2

[06:34] <camelia> rakudo-moar deffe54b8: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$only-one' is not declared␤at <tmp>:1␤------> 3&say.wrap(sub(7⏏5$only-one){print $only-one});say 1,2␤»

[06:35] <ZzZombo> m: &say.wrap(anon sub x($only-one){print $only-one});say 1,2

[06:35] <camelia> rakudo-moar deffe54b8: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:36] <ZzZombo> m: say 1,2;&say.wrap(anon sub x($only-one){print $only-one});say 1,2

[06:36] <camelia> rakudo-moar deffe54b8: OUTPUT: «12␤Too many positionals passed; expected 1 argument but got 2␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[06:36] <_npr_> Hi. Is there any cms based on perl 6 for internet shop devepopment?

[06:39] *** wamba joined
[06:40] *** mahafyi_ joined
[06:42] *** mahafyi left
[06:42] *** mahafyi_ is now known as mahafyi

[06:48] *** _npr_ left
[06:52] *** llfourn joined
[07:06] *** lowbro joined
[07:06] *** lowbro left
[07:06] *** lowbro joined
[07:15] *** domidumont joined
[07:15] *** darutoko joined
[07:26] *** xtreak left
[07:26] *** xtreak joined
[07:28] *** xtreak left
[07:29] *** xtreak joined
[07:29] *** espadrine_ left
[07:34] *** |oLa| joined
[07:56] *** Aceeri_ joined
[07:56] *** Aceeri_ left
[08:02] *** troys left
[08:10] *** domidumont left
[08:11] *** domidumont joined
[08:18] *** xtreak left
[08:18] *** xtreak joined
[08:20] *** xtreak left
[08:21] *** xtreak joined
[08:29] *** wamba left
[08:40] *** zakharyas joined
[08:43] *** scimon joined
[08:45] *** zakharyas left
[08:47] *** zakharyas joined
[08:47] *** xtreak left
[08:55] *** AlexDaniel joined
[08:55] *** mahafyi left
[08:56] *** cdg joined
[08:57] *** wamba joined
[09:01] *** cdg left
[09:04] *** dakkar joined
[09:15] *** zakharyas left
[09:16] *** zakharyas joined
[09:16] *** xtreak joined
[09:25] *** parv joined
[09:26] *** mahafyi joined
[09:30] <AlexDaniel> squashable6: next

[09:30] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 2 days and ≈0 hours (2018-02-03 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[09:43] <moritz> are these typos in squashable6's output (like "Nextd") intentional?

[09:44] <AlexDaniel> moritz: nextd?

[09:45] <AlexDaniel> moritz: I don't see it. What about here? https://irclog.perlgeek.de/perl6/2018-01-31#i_15760288

[09:48] <moritz> AlexDaniel: might have been a terminal artifact

[09:50] <moritz> weird, it displays the Unicode characters fine

[09:52] *** Actualeyes left
[10:10] *** eliasr joined
[10:23] *** zakharyas left
[10:25] *** zakharyas joined
[10:39] *** TEttinger left
[10:42] *** mahafyi_ joined
[10:45] *** mahafyi left
[10:45] *** mahafyi_ is now known as mahafyi

[10:48] *** piojo joined
[10:49] *** piojo1 left
[10:49] *** lizmat joined
[10:54] *** Ven`` joined
[10:55] *** Zoffix joined
[10:55] <Zoffix> m: BEGIN with '/tmp/subz'.IO.mkdir { .add('ZS.pm6').spurt: ｢my subset Path::e is export where 42｣ }; use lib </tmp/subz/>; use ZS; say 42 ~~ Path::e

[10:55] <yoleaux> 05:03Z <skids> Zoffix: WRT https://github.com/perl6/roast/commit/65ed5b0ba5cb6822a2aea97c3c41d0f1b3a019f4 by "fragged" I just meant that elements were pulled out of the squish in chunks as opposed to the corresponding simple call tests.

[10:55] <camelia> rakudo-moar ed9b287c9: OUTPUT: «Could not find symbol '&e'␤  in block <unit> at <tmp> line 1␤␤»

[10:55] <Zoffix> What is its problem?

[10:56] <ZzZombo> Is "is rw" trait inherited by subclasses?

[11:00] <Zoffix> m: BEGIN with '/tmp/subz'.IO.mkdir { .add('ZS.pm6').spurt: ｢my subset Path::e where 42; sub EXPORT { %( "Path::e" => Path::e ) }; ｣ }; use lib </tmp/subz/>; use ZS; say 42 ~~ Path::e

[11:00] <camelia> rakudo-moar ed9b287c9: OUTPUT: «Could not find symbol '&e'␤  in block <unit> at <tmp> line 1␤␤»

[11:00] <Zoffix> m: BEGIN with '/tmp/subz'.IO.mkdir { .add('ZS.pm6').spurt: ｢my subset Path::e where 42; sub EXPORT { %( "Pathe" => Path::e ) }; ｣ }; use lib </tmp/subz/>; use ZS; say 42 ~~ Path::e

[11:00] <camelia> rakudo-moar ed9b287c9: OUTPUT: «Could not find symbol '&e'␤  in block <unit> at <tmp> line 1␤␤»

[11:00] <Zoffix> m: BEGIN with '/tmp/subz'.IO.mkdir { .add('ZS.pm6').spurt: ｢my subset Path::e where 42; sub EXPORT { %( "Pathe" => Path::e ) }; ｣ }; use lib </tmp/subz/>; use ZS; say 42 ~~ Pathe

[11:00] <camelia> rakudo-moar ed9b287c9: OUTPUT: «True␤»

[11:01] <Zoffix> I just love how the docs skirt the issue and only show the "shortname" example and pretend no one would want to export a symbol with :: in the name

[11:01] <Ven``> Well I don't think it makes sense. You're taking a peg that has its own rules already, adding stuff to it, then getting surprised it follows the peg's rules

[11:03] *** wamba left
[11:03] *** rindolf joined
[11:04] <Zoffix> Well, between R#1458 and this bullshit I wasted an hour on what should've been a 5-minute module and have to scrape the idea. So fuck this bullshit. Yeah, blame me for pegs and all the shit, I'm just a newcomer who doesn't understand Perl 6, right?

[11:04] <synopsebot> R#1458 [open]: https://github.com/rakudo/rakudo/issues/1458 Symbols that start with core namespaces always get exported

[11:04] <Zoffix> Sheesh

[11:04] *** Zoffix left
[11:06] <Ven``> That's no way to react.

[11:11] *** domidumont left
[11:13] *** itaipu joined
[11:14] *** mahafyi left
[11:21] *** parv left
[11:26] *** greppable6 left
[11:26] *** greppable6 joined
[11:26] *** ChanServ sets mode: +v greppable6

[11:29] <Geth> ¦ whateverable: 86fd9c07c3 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable.pm6

[11:29] <Geth> ¦ whateverable: All releases are good

[11:29] <Geth> ¦ whateverable: 

[11:29] <Geth> ¦ whateverable: I don't know what was the motivation for this code, but it does not

[11:29] <Geth> ¦ whateverable: work anyway.

[11:29] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/86fd9c07c3

[11:29] <Geth> ¦ whateverable: 5dfdeee5e5 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[11:29] <Geth> ¦ whateverable: Inline summary for Greppable

[11:29] <Geth> ¦ whateverable: 

[11:29] <Geth> ¦ whateverable: Fixes #259 (with tests)

[11:29] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/5dfdeee5e5

[11:29] *** szabgab joined
[11:38] *** wamba joined
[11:38] *** szabgab left
[11:38] <Geth> ¦ ecosystem: b567a0b8c7 | (Zoffix Znet)++ (committed using GitHub Web editor) | META.list

[11:38] <Geth> ¦ ecosystem: Add Subsets::IO to ecosystem

[11:38] <Geth> ¦ ecosystem: 

[11:38] <Geth> ¦ ecosystem: "Subsets for various types of IO::Path instances":

[11:38] <Geth> ¦ ecosystem: https://github.com/zoffixznet/perl6-Subsets-IO

[11:38] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/b567a0b8c7

[11:45] *** khw joined
[11:45] <buggable> New CPAN upload: P5reverse-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5reverse-0.0.1.tar.gz

[11:46] *** zakharyas left
[11:49] *** cdg joined
[11:55] <buggable> New CPAN upload: P5built-ins-0.0.6.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5built-ins-0.0.6.tar.gz

[11:56] *** lizmat left
[11:56] *** zakharyas joined
[11:57] <AlexDaniel> github! Stop touching my interface! (ノಠ益ಠ)ノ

[11:58] <AlexDaniel> every goddamn day they change something small :)

[12:03] *** markong joined
[12:07] *** zakharyas left
[12:14] *** cdg left
[12:14] *** cdg joined
[12:19] *** cdg left
[12:20] *** Ven`` left
[12:23] *** Zoffix joined
[12:24] <Zoffix> Ven``, so what's the "peg"? Why do symbols with :: in the name silently fail to export?

[12:28] *** xtreak left
[12:30] *** xtreak joined
[12:32] <Zoffix> https://docs.perl6.org/language/modules#EXPORT "You can export arbitrary symbols with an EXPORT sub. EXPORT must return a Map, where the keys are the symbol names and the values are the desired values"

[12:41] <Zoffix> "then getting surprised it follows the peg's rules"... No, I'm getting surprised when something that's literally written in the documentation does not do what it says it would do and doesn't show any etrors

[12:41] <Zoffix> Instead of blaming the users, people professing to have superior knowledge could fix the docs.

[12:41] *** Zoffix left
[12:42] *** trnh joined
[12:49] *** pmurias joined
[12:50] *** trnh left
[12:52] *** Skarsnik joined
[12:52] *** xtreak left
[12:53] <Skarsnik> Hello

[12:59] *** wamba left
[13:01] <pmurias> I'm implementing utf8-c8 on the js backend

[13:02] <pmurias> in nqp tests should I check that it encodes stuff into string with that special private character

[13:02] <jnthn> No

[13:02] <jnthn> Just check that it roundtrips on encode, I think

[13:03] <jnthn> I'd say the the exact choice of private char used there is an implementation detail

[13:03] *** wamba joined
[13:07] *** PrincipiaMa joined
[13:07] <PrincipiaMa> Hi

[13:08] <PrincipiaMa> How do I get my code to click a "Next" button on a installed program?

[13:10] <Skarsnik> You want to write something that perform an action on another software?

[13:10] *** domidumont joined
[13:11] *** domidumont left
[13:11] <PrincipiaMa> Yes

[13:12] *** itaipu left
[13:16] *** Zoffix joined
[13:16] <Zoffix> PrincipiaMa: on what OS? Windows/

[13:16] *** domidumont joined
[13:17] *** zakharyas joined
[13:18] *** zakharyas left
[13:19] *** zakharyas joined
[13:20] *** Cabanossi left
[13:21] *** Cabanossi joined
[13:21] <PrincipiaMa> Zoffix: Oh no, it's just a standard Debian system

[13:22] <ZzZombo> how can I emulate the behavior of `BUILDALL` for a custom submethod?

[13:23] <Zoffix> PrincipiaMa: ah, no idea then. For Windows there's AutoIt.

[13:23] <stmuk_> PrincipiaMa: maybe nativecall and xmacro?

[13:25] <PrincipiaMa> Zoffix: Okay, thanks anyway

[13:25] <PrincipiaMa> stmuk_: I've not really worked with either before, but I'll have a look

[13:25] <stmuk_> or Inline::Python with autokey

[13:26] <stmuk_> looks harder than I'd have hoped TBH

[13:26] <Skarsnik> there is a x command for that too

[13:26] <Skarsnik> but searching for a button text must not be easy

[13:27] <stmuk_> yeah usually its a coord based input I think

[13:27] *** itaipu joined
[13:31] *** Zoffix left
[13:44] <jkramer> lol I just noticed that my script that does that (1 xx 150).combinations thing I started yesterday is still running and generating the same sequence over and over again :D

[13:44] <jkramer> 72529.97s user 51.44s system 99% cpu 20:09:43.50 total

[13:45] <jkramer> I think it's time to give up

[13:50] <moritz> m: say [*] 1..150

[13:50] <camelia> rakudo-moar ed9b287c9: OUTPUT: «57133839564458545904789328652610540031895535786011264182548375833179829124845398393126574488675311145377107878746854204162666250198684504466355949195922066574942592095735778929325357290444962472405416790722118445437122269675520000000000000000000000000…»

[13:50] <moritz> it'll just try a few combinations :-)

[13:50] <moritz> m: say chars [*] 1..150

[13:50] <camelia> rakudo-moar ed9b287c9: OUTPUT: «263␤»

[13:54] *** zakharyas left
[13:55] *** zakharyas joined
[13:57] <PrincipiaMa> Well, it looks all I need to do is "just" send a click event to the X Window System. 

[14:00] *** cdg joined
[14:07] *** PrincipiaMa left
[14:07] *** colomon_ joined
[14:09] *** colomon left
[14:09] *** colomon_ is now known as colomon

[14:10] *** zeddy_k joined
[14:12] <stmuk_> http://pl6anet.org/drop/rakudo-star-2018.01.RC0.dmg

[14:13] *** stmuk_ is now known as stmuk

[14:15] *** zeddy_k left
[14:16] <wictory[m]> m: my @a; @a[0] = [1,2,3]; for @a[0] { (++$).say }

[14:16] <camelia> rakudo-moar ed9b287c9: OUTPUT: «1␤»

[14:17] <wictory[m]> is there any nice way to loop over `@a[0]` here?

[14:19] <jnthn> m: my @a; @a[0] = [1,2,3]; for @a[0].list { (++$).say }

[14:19] <camelia> rakudo-moar ed9b287c9: OUTPUT: «1␤2␤3␤»

[14:19] <jnthn> m: my @a; @a[0] = [1,2,3]; for |@a[0] { (++$).say }

[14:19] <camelia> rakudo-moar ed9b287c9: OUTPUT: «1␤2␤3␤»

[14:19] <jnthn> Depends what you consider nice :)

[14:21] <wictory[m]> that ofcourse a matter of opinion :) this was what I was looking for. However, why doesn't the syntax (?) understand that I want to loop over the array `@a[0]` without `.list` or `|`?

[14:21] *** Zoffix joined
[14:21] <Zoffix> wictory[m]: because you stuck it into a Scalar container, so it gets treated as one item. See https://perl6advent.wordpress.com/2017/12/02/#theoneandonly

[14:21] <Zoffix> m: my @a; @a[0] := [1,2,3]; for @a[0] { (++$).say }

[14:21] <camelia> rakudo-moar ed9b287c9: OUTPUT: «1␤2␤3␤»

[14:22] <jnthn> heh, was just going to look for that article :-)

[14:22] <Zoffix> huggable: decont

[14:22] <huggable> Zoffix, Article on containers and decont: https://perl6advent.wordpress.com/2017/12/02/#theoneandonly

[14:22] <Zoffix> ^ it's under that factoid

[14:23] <jnthn> ah, cool

[14:25] <Skarsnik> btw anyplan to have mutable set more intuitve to use? x)

[14:25] <Zoffix> Skarsnik: like how?

[14:26] <Zoffix> m: my %s is SetHash; %s<a b c>»++; say %s 

[14:26] <camelia> rakudo-moar ed9b287c9: OUTPUT: «SetHash(a b c)␤»

[14:26] <Skarsnik> I remember trying to use a Set to store file I already encountered but I never figured how to add a new entry easily

[14:26] <Zoffix> Just %s{$foo}++;

[14:27] <wictory[m]> Zoffix: very nice! now I also learn what `decont` is :)

[14:27] <Skarsnik> Also I would have prefered it stay an Array like

[14:28] <Skarsnik> not a hash ^^

[14:28] <Zoffix> There's also RT#128903

[14:28] <synopsebot> RT#128903 [open]: https://rt.perl.org/Ticket/Display.html?id=128903 [BUG] SetHash::push not implemented

[14:28] <Skarsnik> but why a hash in the first place? it does not feel natural at all

[14:29] <Zoffix> Skarsnik: it's looked up by key :/

[14:29] <Zoffix> Skarsnik: would you always do %set.grep: "value" and have it search the entire thing?

[14:29] <Skarsnik> well Set are not array

[14:29] <Skarsnik> *hash

[14:30] <Zoffix> Skarsnik: they're not an indexed collection of items either

[14:30] <Skarsnik> it's just weird that suddendly writable set are not array too

[14:30] <Zoffix> I see nothing weird with that

[14:31] <Skarsnik> consistency?

[14:31] <Zoffix> With what? The last item I placed in the set? I don't care about that. I care about whether an item is or is not in teh set. Its position relative to other items is irrelevant

[14:31] <Skarsnik> So why Set are not hash?

[14:32] <Zoffix> Hashes can be nested. Sets have weights

[14:32] <Zoffix> It's like asking why strings aren't arrays?

[14:34] <Skarsnik> I don't see the comparaison. A Set is a set, mutable or not it should not be different object

[14:34] <Zoffix> Skarsnik: you can't use a set everywhere you can use a hash, so it's not a good subclass

[14:35] <Zoffix> Something about ducks and all https://en.wikipedia.org/wiki/Liskov_substitution_principle

[14:35] <Skarsnik> why are you talking about a hash?

[14:35] <Zoffix> Skarsnik: "Skarsnik │ So why Set are not hash?"

[14:36] <Skarsnik> a hash is a list a key => value association. a Set is just a list a value under the constraint of no duplicate

[14:36] <jast> and SetHash is the perl6 name for a type of set. I might not have called it that, but there you go.

[14:37] *** Zoffix left
[14:37] <jast> (possibly named sobecause it's implemented using a hashtable, but I haven't actually looked at the code)

[14:38] <Skarsnik> I get that a hash is a good implementation of a Set since key are uniq, but why as an user I have to see a hash when I just want a list.

[14:41] <jast> it isn't a hash, it just has the word 'hash' in its name

[14:41] *** domidumont left
[14:42] *** domidumont joined
[14:42] *** domidumont left
[14:43] *** domidumont joined
[14:43] *** domidumont left
[14:44] *** domidumont joined
[14:48] *** domidumont left
[14:50] *** domidumont joined
[14:51] *** domidumont1 joined
[14:55] *** domidumont left
[15:04] *** skids joined
[15:05] *** sena_kun joined
[15:05] *** PrincipiaMa joined
[15:06] *** itaipu left
[15:06] *** curan left
[15:07] <PrincipiaMa> Hey guys, would the best way to run a c program from perl be just to open a shell and call do a shell command to run that program?

[15:07] <huf> or you can just run the program without involving the shell

[15:08] *** cokebot9000 joined
[15:08] * cokebot9000 waves

[15:09] <pmurias> PrincipiaMa: https://docs.perl6.org/routine/run

[15:09] *** cokebot9000 is now known as [Coke]

[15:10] <PrincipiaMa> pmurias: Thanks!

[15:10] *** PrincipiaMa left
[15:10] *** [Coke] left
[15:10] *** [Coke] joined
[15:10] <[Coke]> There, that's better.

[15:10] <Geth> ¦ doc: cc5f4fc568 | pmurias++ | doc/Type/IO.pod6

[15:10] <Geth> ¦ doc: Explain run example more

[15:10] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/cc5f4fc568

[15:10] <synopsebot> Link: https://doc.perl6.org/type/IO

[15:11] <pmurias> [Coke]: ?

[15:13] <AlexDaniel> squashable6: next

[15:13] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 1 day and ≈18 hours (2018-02-03 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:13] <pmurias> when calling command from examples do we want to link to descriptions of what they do?

[15:14] <Skarsnik> unrelated: does Cro work on win32?

[15:16] <abraxxa> Skarsnik: Microsoft wants to kill Win32 and replace it with UWP

[15:18] <jkramer> I wish docs.perl6.org's search wasn't JS so I could add a search shortcut to my browser 

[15:18] <tyil> jkramer: iktf

[15:19] *** wamba left
[15:19] <MasterDuke> Skarsnik: i don't know, but you could also try in #cro

[15:19] <Skarsnik> Ho x)

[15:25] *** khisanth_ joined
[15:26] <[Coke]> pmurias - irc.p6c.org is down

[15:27] <[Coke]> jkramer, on the wish list.

[15:27] <[Coke]> (docs search)

[15:28] *** itaipu joined
[15:29] *** Khisanth left
[15:31] <[Coke]> jkramer; actually, something *like* it is, but not that specifically; please open a github issue if you don't already see one

[15:36] *** zakharyas left
[15:36] *** wamba joined
[15:41] *** zakharyas joined
[15:42] *** zakharyas left
[15:43] *** zakharyas joined
[15:43] *** wamba left
[15:46] <ZzZombo> Can I force a type capture to derive from a given class?

[15:47] *** sena_kun left
[15:53] <moritz> m: role Bla[Cool ::T] { method t { say T.^name } }; Bla[Int].t

[15:53] <camelia> rakudo-moar ed9b287c9: OUTPUT: «Int␤»

[15:53] <moritz> m: role Bla[Cool ::T] { method t { say T.^name } }; Bla[Any].t

[15:53] <camelia> rakudo-moar ed9b287c9: OUTPUT: «No appropriate parametric role variant available for 'Bla'␤  in block <unit> at <tmp> line 1␤␤»

[15:54] *** lowbro left
[15:54] *** jeromelanteri left
[15:55] <buggable> New CPAN upload: Algorithm-GooglePolylineEncoding-0.0.3.tar.gz by SCIMON https://cpan.metacpan.org/authors/id/S/SC/SCIMON/Perl6/Algorithm-GooglePolylineEncoding-0.0.3.tar.gz

[15:58] <[Coke]> http://news.perlfoundation.org/2018/01/call-for-grant-proposals-janua-2.html - call for TPF grant proposals for January 2018 round.

[15:59] *** abraxxa left
[16:04] *** jc_atikon joined
[16:04] *** jc_atikon left
[16:07] *** jc_atikon joined
[16:07] *** jc_atikon left
[16:09] *** jc_atikon joined
[16:09] *** jc_atikon left
[16:12] *** jc_denton1 joined
[16:14] <jkramer> Is anyone here using Net::IMAP (https://github.com/retupmoca/P6-Net-IMAP) and/or knows a thing or two about the protocol?

[16:15] *** khisanth_ left
[16:19] *** ibo2go joined
[16:21] *** MasterDuke left
[16:22] <ibo2go> hello question:

[16:22] <ibo2go> m: 1..3 +1

[16:22] <camelia> rakudo-moar ed9b287c9: OUTPUT: «WARNINGS for <tmp>:␤Useless use of ".." in expression "1..3 +" in sink context (line 1)␤»

[16:23] <jnthn> m: say 1..3 + 1

[16:23] <camelia> rakudo-moar ed9b287c9: OUTPUT: «1..4␤»

[16:23] <ibo2go> yes but 

[16:23] <ibo2go> m: say (1..3) +2

[16:23] <camelia> rakudo-moar ed9b287c9: OUTPUT: «3..5␤»

[16:23] <jnthn> Right

[16:24] <jnthn> Because 1..3 + 1 parsers as 1 .. (3 + 1)

[16:24] <jkramer> I think +1 without the space means the 1 is coerced into an Int?

[16:24] <ibo2go> but then i would expect 1..5 not 3..5

[16:25] <jkramer> I think it shifts the whole range, not just .max

[16:25] <jnthn> In  1 .. 3 + 1 then 3+1 is evaluated first to give 4, the result being the range 1..4

[16:26] <jkramer> Oh so the space matters there too?

[16:26] <jnthn> In the case of (1..3) + 2, the operation being formed is Range + Int, which gives a new Range with both endpoints shifted

[16:26] <jnthn> jkramer: No, the spaces don't matter at all to the meaning

[16:26] <jkramer> m: 1 .. 3 + 1

[16:26] <camelia> rakudo-moar ed9b287c9: OUTPUT: «WARNINGS for <tmp>:␤Useless use of ".." in expression "1 .. 3 +" in sink context (line 1)␤»

[16:26] <jkramer> Huh

[16:27] <jnthn> Writing 1..3 + 1 is actually pretty confusing, because it will make human readers thing it means something than the computer will think it means :)

[16:27] <jnthn> m: say 1+2 * 3

[16:27] <camelia> rakudo-moar ed9b287c9: OUTPUT: «7␤»

[16:27] <jnthn> m: say 1 + 2*3

[16:27] <camelia> rakudo-moar ed9b287c9: OUTPUT: «7␤»

[16:27] <jnthn> The spaces don't matter, just the precedence rules

[16:27] <ibo2go> m: say 1 .. 3 + 2 

[16:27] <camelia> rakudo-moar ed9b287c9: OUTPUT: «1..5␤»

[16:27] <ibo2go> m: say 1..3 +2 

[16:27] <camelia> rakudo-moar ed9b287c9: OUTPUT: «1..5␤»

[16:28] <jnthn> No matter how you write it, .. is looser than +, so without parentheses, the + will always happen first

[16:28] <ibo2go> m: say (1 .. 3) +2

[16:28] <camelia> rakudo-moar ed9b287c9: OUTPUT: «3..5␤»

[16:28] <ZzZombo> m: say (0.1...1) * 10

[16:28] <camelia> rakudo-moar ed9b287c9: OUTPUT: «10␤»

[16:28] *** khisanth_ joined
[16:29] <ZzZombo> m: say (0.1..1) * 10

[16:29] <camelia> rakudo-moar ed9b287c9: OUTPUT: «1.0..10␤»

[16:29] <jnthn> Also, in case this is the source of confusion: .. constructs a Range object

[16:30] <jnthn> It doesn't expand into a list of values unless it is asked to

[16:31] <skids> m: say (1 .. 3) >>+>> 2

[16:31] <camelia> rakudo-moar 72948e847: OUTPUT: «(3 4 5)␤»

[16:31] <skids> (one way of asking it to)

[16:31] *** Zoffix joined
[16:32] <Zoffix> m: sub ($x = 1|2) {}();

[16:32] <Zoffix> Should that thread or just throw?

[16:32] <camelia> rakudo-moar 72948e847: OUTPUT: «(timeout)»

[16:33] *** MasterDuke joined
[16:33] <jnthn> Urgh

[16:34] <jnthn> I think throw

[16:34] <ibo2go> jnthn: So 1 .. 3 +2 is a range 1 .. 5 and (1 .. 3) +2 is adding 2 to each element of the range?

[16:34] <Zoffix> Sounds good.

[16:34] <jnthn> ibo2go: Not quite "to each element", just "to the start and end"

[16:34] <jnthn> Zoffix: While it would be sort of cute to make it work, the contortions it would take are...immense

[16:34] <Zoffix> :)

[16:35] <ibo2go> m: say (^3) +2

[16:35] <camelia> rakudo-moar 72948e847: OUTPUT: «2..^5␤»

[16:35] <jnthn> m: say 1..1000000000000000000000000000000000000

[16:35] <camelia> rakudo-moar 72948e847: OUTPUT: «1..1000000000000000000000000000000000000␤»

[16:35] <jnthn> m: say (1..1000000000000000000000000000000000000) + 5

[16:35] <camelia> rakudo-moar 72948e847: OUTPUT: «6..1000000000000000000000000000000000005␤»

[16:35] <jnthn> If it were doing each element there, it'd never complete so fast :)

[16:36] <Zoffix> ibo2go: it might be easier to visualize that as `Range.new(1, 3) + 3`. There's no values "in between". Just two attributes: $!min/$!max. The &infix:<+> operator just changes those two values

[16:36] <jkramer> Has no one ever used Net::IMAP? I think I found a bug that basically completely breaks the module, but since no one ever complained about it I think I might just make a fool out of myself reporting it. :D

[16:36] <Zoffix> m: say (1..2).Capture

[16:36] <camelia> rakudo-moar 72948e847: OUTPUT: «\(:!excludes-max, :!excludes-min, :!infinite, :is-int, :max(2), :min(1))␤»

[16:36] <Zoffix> m: say ((1..2)+3).Capture

[16:36] <camelia> rakudo-moar 72948e847: OUTPUT: «\(:!excludes-max, :!excludes-min, :!infinite, :is-int, :max(5), :min(4))␤»

[16:38] <ibo2go> yes, I understand now jnthn++ Zoffix++ though it is counterintutive to me 

[16:41] <Zoffix> m: multi infix:<♥> { $^a ** $^b }; multi infix:<♥> (Range $_, \pow) { .clone: :min(.min**pow), :max(.max**pow) }; say 2..3 ♥ 3

[16:41] <camelia> rakudo-moar 72948e847: OUTPUT: «2..27␤»

[16:41] <Zoffix> m: multi infix:<♥> { $^a ** $^b }; multi infix:<♥> (Range $_, \pow) { .clone: :min(.min**pow), :max(.max**pow) }; say (2..3) ♥ 3

[16:41] <camelia> rakudo-moar 72948e847: OUTPUT: «8..27␤»

[16:41] <Zoffix> ^_^

[16:41] <jc_denton1> Is anyone familiar with Proc::Async? I'm trying to emit the stdout but it seems I can't use that method within .tap

[16:42] <Zoffix> m: multi infix:<♥> (Range $_, \pow) is looser(&[..]) { .clone: :min(.min**pow), :max(.max**pow) }; say 2..3 ♥ 3

[16:42] <camelia> rakudo-moar 72948e847: OUTPUT: «8..27␤»

[16:43] <Zoffix> jc_denton1: can you pastebin the non-working code?

[16:50] <jc_denton1> Sure, I can get the output with the say but I wanted to make use of it with another script

[16:50] <jc_denton1> https://pastebin.com/BzY2FcQz

[16:50] <jc_denton1> I feel like I'm missing sometime very simple there

[16:52] <jnthn> jc_denton1: Is that the thing that works, or the thing that doesn't work? :)

[16:53] <jnthn> (I don't see an emit in there)

[16:54] <Zoffix> e: with Proc::Async.new: «perl6 -e "say ｢Hello, World!｣"» { .stdout.tap: *.say; await .start }

[16:54] <evalable6> Zoffix, rakudo-moar 72948e847: OUTPUT: «Hello, World!␤␤»

[16:54] *** konsolebox left
[16:54] <Zoffix> jc_denton1: ^ seems to work. What's your code that creates `$async` variable?

[16:54] <jnthn> But if your goal is to have a Supply that just emits the stuff coming out of stdout then you'd write something like supply { my $async = Proc::Async.new(...); whenever $async.stdout { .emit }; whenever $async.start { done } } or some such

[16:55] <Zoffix> Ah

[16:55] * Zoffix &

[16:55] *** Zoffix left
[16:55] <jc_denton1> jnthn yeah that code works because I'm using the say. When I tried .emit $output I ran into errors.

[16:56] <jc_denton1> Ah that's where I was going wrong! I'll give it a try now thanks

[16:56] <jnthn> You need to be inside of a supply block to use emit or .emit :)

[16:56] <jc_denton1> Yeah, that's what the error was telling me. I tried every other silly way of trying to do it D'oh

[16:57] <jc_denton1> the errors with my atempts to fix it I mean

[16:57] *** ibo2go left
[17:00] *** konsolebox joined
[17:08] <jc_denton1> jnthn: that did just what I was hoping for. Thanks a lot

[17:09] <jnthn> Welcome :)

[17:10] <jnthn> In general, prefer to use supply/react/whenever syntax over .tap, because it does things like subscription management and error propagation for you

[17:11] <El_Che> we should be a "famous jnthn quotes around"

[17:11] <El_Che> it could be a bot

[17:12] <El_Che> "What would jnthn do?"

[17:12] <El_Che> bang

[17:12] <Skarsnik> xD

[17:13] <jnthn> :P

[17:18] *** setty1 joined
[17:19] *** Cabanossi left
[17:20] *** Cabanossi joined
[17:23] *** Kaiepi left
[17:23] *** Kaiepi joined
[17:27] *** MasterDuke left
[17:28] *** dakkar left
[17:30] *** wamba joined
[17:30] *** scimon left
[17:34] *** troys joined
[17:36] *** setty1 left
[17:43] *** [Coke] left
[17:48] *** domidumont1 left
[17:50] *** someuser left
[17:51] *** pmurias left
[18:00] *** domidumont joined
[18:03] *** zakharyas left
[18:04] *** zakharyas joined
[18:07] *** domidumont left
[18:12] *** zdk joined
[18:12] *** MasterDuke joined
[18:12] *** zdk left
[18:23] *** jc_denton1 left
[18:36] *** itaipu left
[18:43] *** zeddy__k joined
[18:53] *** darutoko left
[18:54] *** domidumont joined
[19:02] *** nightfrog joined
[19:04] *** zeddy__k left
[19:05] *** raiph joined
[19:06] <raiph> m: my \foo .= bar

[19:06] <camelia> rakudo-moar 72948e847: OUTPUT: «===SORRY!===␤Method call node requires at least one child␤»

[19:06] *** zeddy__k joined
[19:06] <raiph> bisectable: my \foo .= bar

[19:06] <bisectable6> raiph, On both starting points (old=2015.12 new=72948e8) the exit code is 1 and the output is identical as well

[19:06] <bisectable6> raiph, Output on both points: «===SORRY!===␤Method call node requires at least one child␤»

[19:07] *** raiph left
[19:13] *** zakharyas left
[19:16] *** nativecallable6 left
[19:16] *** nativecallable6 joined
[19:18] *** zeddy__k left
[19:19] *** zeddy__k joined
[19:22] *** Sgeo left
[19:23] *** Sgeo joined
[19:24] <Geth> ¦ perl6-most-wanted: vadrer++ created pull request #42: add Tcl, Tcl::Tk GUI binding; move WxWidgets from modules to bindings

[19:24] <Geth> ¦ perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/pull/42

[19:24] <Geth> ¦ perl6-most-wanted: 6e8f71e224 | U-CORP\konovv++ | 2 files

[19:24] <Geth> ¦ perl6-most-wanted: add Tcl, Tcl::Tk GUI binding; move WnWidgets from modules to bindings

[19:24] <Geth> ¦ perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/6e8f71e224

[19:24] <Geth> ¦ perl6-most-wanted: ddd09c4be7 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | 2 files

[19:24] <Geth> ¦ perl6-most-wanted: Merge pull request #42 from vadrer/master

[19:24] <Geth> ¦ perl6-most-wanted: 

[19:24] <Geth> ¦ perl6-most-wanted: add Tcl, Tcl::Tk GUI binding; move WxWidgets from modules to bindings

[19:24] <Geth> ¦ perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/ddd09c4be7

[19:32] *** cdg left
[19:39] *** TEttinger joined
[20:02] *** evalable6 left
[20:02] *** evalable6 joined
[20:02] *** ChanServ sets mode: +v evalable6

[20:04] *** Skarsnik_ joined
[20:08] *** Skarsnik left
[20:10] *** Kaiepi left
[20:11] *** Kaiepi joined
[20:19] *** trnh joined
[20:24] <DrForr> .tell lizmat You just made the @OSCON twitter front page.

[20:24] <yoleaux> DrForr: I'll pass your message to lizmat.

[20:30] *** comborico1611 joined
[20:39] <AlexDaniel> squashable6: next

[20:39] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 1 day and ≈13 hours (2018-02-03 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[20:42] *** wamba left
[20:48] *** wamba joined
[20:50] *** Rawriful joined
[20:51] *** kst` is now known as kst

[20:53] *** comborico1611 left
[20:57] *** comborico1611 joined
[20:58] *** Kaiepi left
[20:59] *** Kaiepi joined
[20:59] <comborico1611> Can we have a showing of top 5 most popular programming languges of the 90's?  Would C, Perl, C++, Java, Javascript be that list? 

[20:59] <mspo> not sure about js

[21:00] <mspo> but definitely the others, along with VB?

[21:00] <comborico1611> Ah, yes.  I would also think VB

[21:00] <MasterDuke> fortran or cobol perhaps?

[21:01] <mspo> cobol was in its death by the late 90's

[21:01] <mspo> although people in my school learned it

[21:02] <comborico1611> Which of these languages we have mentioned has loose typing?

[21:02] <mspo> VB and perl

[21:02] <comborico1611> VB does?  I didn't know that.

[21:02] <comborico1611> That is what I thought.

[21:02] <mspo> well whatever loosely typed means

[21:03] <mspo> I think I have it wrong

[21:03] <mspo> wikipedia says perl is strongly typed :)

[21:03] <comborico1611> It is a shame that Perl does not have the well known reputatation of popularizing loose typing.

[21:03] <moritz> perl and VB are strongly typed at run time

[21:04] <comborico1611> I mean loose typing in source code.

[21:05] <mspo> you mean dynamic typing?

[21:05] <comborico1611> I'm just ruminating on the major things Perl has contributed.

[21:05] <moritz> I type in an editor :-)

[21:05] <skids> (but VB only because you are literally banging on the keyboard by the time you get anything running :-)

[21:05] <comborico1611> I suppose I don't know the difference between loosely type and dynamic.

[21:05] *** rindolf left
[21:06] <skids> STRONGLY TYPED!!!

[21:06] <comborico1611> moritz: Ha.  You know what I mean.

[21:06] <mspo> forth is the only languag with real freedom

[21:06] <comborico1611> Dynamic typing is huge thing Perl had right in the beginning.

[21:07] <comborico1611> So we are all settled on C, Perl, C++, Java, Visual Basic?

[21:07] <comborico1611> Is that the correct order, ya think?

[21:07] * skids wonders how popular *awk was pre-perl.

[21:07] <mspo> well the world of computers 1992 was very different than 1999

[21:08] <mspo> you see in late 1991 this weird thing happened :)

[21:09] <zeddy__k> linux?

[21:09] <mspo> well, really, 1993 was *the* year

[21:09] <mspo> mosaic was released

[21:09] <skids> Yep that was totally a game changer.

[21:09] <comborico1611> Then to be technical, I mean 1991 - 1999. :)

[21:10] <comborico1611> Never heard of it.

[21:10] <mspo> :( ...kids...

[21:10] <comborico1611> Haha.  I'm 31!

[21:10] <skids> First graphical web browser.

[21:10] <comborico1611> EWWWWWWW AHHH.  Yes that would be important.

[21:10] <mspo> not technically the "first" but the first one that mattered

[21:11] <comborico1611> I see.

[21:11] <skids> And it rendered pretty well even on 16-color palettes

[21:12] <mspo> it was replaced by netscape from ~1995 and forward

[21:12] <comborico1611> Why did Netscape change their name to Mozilla?

[21:13] <El_Che> wasn't it through the opensourcing of the code?

[21:13] <mspo> because netscape was garbage by the time IE totally destoyed it?  I don't remember

[21:13] <skids> Dunno.  They got sick of hearing "Netscrape"?

[21:13] <El_Che> mspo: that wasn't the case

[21:13] <El_Che> IE wasn't better at all

[21:14] <mspo> El_Che: just 5x faster

[21:14] <El_Che> it was bundled with the OS running on 95% of everything

[21:14] <geekosaur> netscape the company and its server products still existed. the browser was split off and open sourced

[21:14] <mspo> early firefox was also slower by a mile than IE6

[21:14] <El_Che> mspo: no way

[21:14] <El_Che> I ran that thing in alpha, it was fast

[21:15] <mspo> El_Che: our experiences differ :)

[21:15] <El_Che> and it wasn't called firefox either

[21:15] <mspo> El_Che: you probably had more memory than me

[21:15] <mspo> phoenix, indeed

[21:15] <geekosaur> remember IE6 got to be "small" because 90% of it was built into windows

[21:15] <El_Che> mspo: I was backpacking in those days (2y) and I had it on a cd/floppy

[21:15] <El_Che> installed everywhere on cybercafés (it was a thing) to use better browser

[21:16] <geekosaur> which got Microsoft sued by the EU

[21:16] <El_Che> a lot of places had a lot of cute IE kiosk software

[21:16] <El_Che> you could break it by sneezing :)

[21:16] <comborico1611> What do you use for mobile browser?

[21:16] <El_Che> and after sneezing a needed a browser :)

[21:16] <El_Che> comborico1611: FF + ublock origin

[21:16] * skids probably is in the low 1% or so of ratio to time browsing on IE vs everything else.  Gave up Win at linux release 0.9.something IIRC.

[21:17] <mspo> I feel like I ran IE in wine at some point

[21:17] <mspo> early 2000's?

[21:17] <El_Che> FF is 2003

[21:18] <El_Che> 2002 was phoenix

[21:18] <zeddy__k> comborico1611: brave, they do a good job on mobile, desktop is still a bit unstable, although usable

[21:18] <El_Che> (first name)

[21:18] <El_Che> 2003 firebirx (2nd name)

[21:18] <El_Che> 2004 (firefox)

[21:18] <mspo> by 2000 netscape was a mini operating system

[21:18] <comborico1611> El_Che: zeddy__k:  Thank you!

[21:18] <El_Che> so I was installing phoenix and firebird :)

[21:18] <mspo> it was terrible

[21:18] *** zakharyas joined
[21:19] <El_Che> mspo: I loved it

[21:19] <mspo> El_Che: yeah you had memory to spare :)

[21:19] <comborico1611> Remember altavista? and the host of other ones?

[21:19] <mspo> comborico1611: yes

[21:19] <El_Che> mspo: no, like I told you I installed on dozens of pcs

[21:19] <geekosaur> dogpile

[21:19] <El_Che> oh, and I set up a Linux ISP in the Amazon for free

[21:20] <comborico1611> dogpile was one? ahah I don't recall it.  

[21:20] <comborico1611> I do remember Lycos.

[21:20] <geekosaur> dogpile was a meta-search engine

[21:20] <El_Che> they had big antennas and everything, but they ran NT that crashed constantly

[21:20] <skids> dogpile was the "screw this there are too many search engines" solution.

[21:20] <geekosaur> rerfomratted your query for compatibility, submitted it to every search engine it knew about, presented the collated results

[21:20] <geekosaur> until all the search engines changed their TOSes to block it

[21:20] *** preaction left
[21:20] <mspo> yeah dogpile didn't last long

[21:20] <mspo> AltaVista was pretty good until google google google google

[21:20] <comborico1611> How long did it last?

[21:21] <El_Che> I actually picked google up because they had google.com/linux

[21:21] <skids> askjeeves goes way back too IIRC.

[21:21] <geekosaur> couple years. wasn;t untile veryone else discovered it that the other search engines panicked and shut it down

[21:21] <mspo> comborico1611: still around: http://www.dogpile.com/

[21:21] <mspo> I finally left altavista for google because of pop-up ads

[21:21] <geekosaur> and yes, technically still there. they started doing frame and other annoying things to comply with TOSes, but it became much more annoyinbg to use after that

[21:22] <geekosaur> and yeh, all the ads was why I jumped from altavista to google

[21:22] <geekosaur> google still amanges a decent balance there imo

[21:22] <comborico1611> Oh yeah!  Ask Jeeves was becoming #1, in  my area.

[21:22] <comborico1611> People could relate to Jeeves.

[21:22] <geekosaur> they have ads but they;re not nearly as intrusive

[21:23] <mspo> another money machine I totally missed out on (early web ads)

[21:23] <comborico1611> Heh.

[21:23] <comborico1611> If Google wasn't around Ask Jeeves would have been the most popular.  

[21:23] *** preaction joined
[21:24] <comborico1611> Anyone remember 2AM online gaming?

[21:24] <mspo> yahoo as pertty big

[21:24] <comborico1611> Yahoo and AOL, yup.

[21:24] <mspo> the era of aol cdroms

[21:24] <geekosaur> heheh

[21:25] <mspo> wasn't AOL a massive perl user?

[21:25] * geekosaur was a beta tester for AOL

[21:25] <mspo> or were they all tcl

[21:25] <geekosaur> just before they renamed to that, in fact, when it was still applelink personal edition

[21:25] <comborico1611> Did AOL go bankrupt?

[21:26] <mspo> no they're still around as a media/ads company

[21:26] <comborico1611> I bet those AOL cdroms will become collector items.

[21:26] <geekosaur> bought and resold multiple times

[21:26] <mspo> nyc taxis blare AOL content

[21:26] <comborico1611> All those CDs are somehwere right now.

[21:26] <mspo> I was a BBS kid

[21:26] <geekosaur> and I recall AOL being all tcl

[21:27] <comborico1611> No one here used 2AM to play games?

[21:27] <comborico1611> Chain of Command?

[21:27] <geekosaur> inclduing releasing a unix client written in tcl/tk

[21:27] <geekosaur> I wa snevera big gamer

[21:27] <geekosaur> ...

[21:27] <geekosaur> was never a

[21:28] <mspo> geekosaur: never a space-bar user? :)

[21:28] <geekosaur> that too :p

[21:28] <comborico1611> geekosaur: that's a good thing.  Games are time-wasters.

[21:29] <comborico1611> If I spent as much time studying programming as trying to learn how to bunnyhop in a game, I'd be better off right now. 

[21:30] <El_Che> comborico1611: you'd be a dull boy

[21:32] *** domidumont left
[21:32] <comborico1611> El_Che: A gamer, eh? 

[21:32] <El_Che> comborico1611: a too many interests, not enough sleep - type

[21:33] <comborico1611> I see. 

[21:33] <comborico1611> I wonder if people still go to those Yahoo chatrooms.

[21:34] <comborico1611> It's weird to me that people would actually use those still today.  I'm aware I'm using a chatroom.

[21:34] <El_Che>  comborico1611: so you missed the fun of gopher?

[21:34] <comborico1611> gopher?  I suppose so.

[21:35] <El_Che> comborico1611: you shoud watch "halt and catch fire" for some just-missed-nostalgia

[21:35] <comborico1611> Okay.

[21:36] <El_Che> know the show?

[21:36] <El_Che> targetted 20-50y techies

[21:37] <comborico1611> Not familiar with it.  

[21:37] <El_Che> https://en.wikipedia.org/wiki/Halt_and_Catch_Fire_(TV_series)

[21:37] * skids just back from months of killing mirelurks and getting nothing else at all done.

[21:37] <comborico1611> I watched Antitrust.

[21:38] <comborico1611> But that was during "my time".

[21:38] <comborico1611> I usually only watch TV to watch the cage fighting.

[21:39] <comborico1611> But this does seem intesting enough that I may look for it if I have free time.

[21:39] <geekosaur> even that wikipedia article's a bit crap. HCF was a joke opcode in the assembly language programmer community

[21:39] <comborico1611> "The battle for CTRL begins"

[21:39] <geekosaur> although iirc it had a real world inspiration, a bad run of one old CPU that had an unoimplemented opcode that could cause the chip to overheat

[21:40] <El_Che> geekosaur: if there was a way to fix that...

[21:40] <geekosaur> which of course meant you only ran into it if you started executing data as code

[21:41] <comborico1611> What was the second  popular programming language that used dynamic typing after Perl?

[21:42] <geekosaur> actually you should be relating that to spectre :) same idea, half-assed / happy-go-lucky CPU implementation with little thought for what happens when someone doesnt follow The Rules™

[21:42] <comborico1611> JavaScript?

[21:43] *** zakharyas left
[21:44] *** zakharyas joined
[21:44] <mspo> tcl was around in the 1990's too

[21:45] <mspo> tcl is on version 8 :)

[21:46] <comborico1611> But was it popular?

[21:46] <mspo> ish

[21:46] <El_Che> they had a popular graphical toolkit

[21:46] <El_Che> have

[21:46] <El_Che> worked with

[21:46] <El_Che> tk

[21:46] <El_Che> or was it separated?

[21:46] <comborico1611> Is this the proper order of Perl influences: C, sed, awk, sh ?

[21:46] <mspo> tcl was super common in commercial applications

[21:47] <geekosaur> comborico1611, not sure there's a good ordering

[21:47] <comborico1611> geekosaur: Haha.

[21:47] <geekosaur> perl was always a bit of an idea supercollider

[21:47] <geekosaur> also, don;t forget the postfix conditionals from a BASIC dialect :p

[21:48] <geekosaur> not sure modern perl even admits to that origin

[21:48] <comborico1611> Oh, yeah?  

[21:48] *** Day__ joined
[21:48] *** Day__ left
[21:48] <comborico1611> What are the biggest two in that last?  C and awk?

[21:48] <comborico1611> in that *list

[21:48] <mspo> awk and shell are massive

[21:49] <mspo> I'm sure Larry Wall has answered this a few times

[21:49] <comborico1611> But where, mijo?

[21:49] <mspo> check youtube

[21:49] <comborico1611> Haha.  You're funny.

[21:49] <El_Che> comborico1611: get this book: http://shop.oreilly.com/product/9780596515171.do

[21:49] <El_Che> good read

[21:50] <comborico1611> Yeah!  That does look like a good one.

[21:50] <comborico1611> Thanks!

[21:51] <geekosaur> as for Tk, it was always distributed separately but tightly tied to Tcl

[21:51] <El_Che> it has been 8y since I read it, but I remember liking it

[21:51] <geekosaur> perl/tk introduced the idea of hackily rewrapping it for other langauges. python tried that and then switched to an interface shim

[21:51] *** setty1 joined
[21:52] <geekosaur> which ended up being a lot more stable and portable when Tk was changing a lot to accommodate non-unix

[21:53] *** espadrine_ joined
[21:54] <comborico1611> El_Che: Too bad they didn't get LISP-guy in there.  I forget his name.  John something.

[21:55] <comborico1611> I gotta get this book, though. 

[21:55] <geekosaur> McCarthy

[21:56] <mspo> the creators of UML

[21:56] <comborico1611> That's right.  I wonder if he ever wanted to update LISP.

[21:57] <comborico1611> mspo: Are you mocking that?  I like UML.  lol

[21:58] <comborico1611> UML is a little bit... uh tight around the collar.  But it is useful.

[21:59] <comborico1611> But,  no doubt, that will be a boring chapter.

[22:03] <mspo> comborico1611: I thought it was dead

[22:04] *** cdg joined
[22:04] <comborico1611> There must be a confusiion of terms.  I'm thinking of Unified Modeling Language

[22:05] <geekosaur> UML's not dead, it's corporate

[22:05] <geekosaur> open source dweebs tend to think corporate works just like they do. it doesn't

[22:05] <mspo> I was too :)

[22:06] <zeddy__k> unfortunately it's still alive

[22:07] <zeddy__k> I use it on uni, as part of a class

[22:09] <AlexDaniel> yea, universities love that 💩

[22:10] <tony-o> we used uml at the last corporate job i had

[22:10] <AlexDaniel> tony-o: did it help?

[22:11] <tony-o> it did

[22:11] <tony-o> we didn't use it for coding, though - i was a data warehouse director and managed the ops people

[22:12] <tony-o> we had a uml library that outlined all of our network and servers, processes for different positions/scenarios (like disaster recovery)

[22:13] <comborico1611> Okay, so besides tcl, concerning  poppular programming languages in the 90's, dynamic typing shows up first in Perl then in JaavaScript.

[22:14] <comborico1611> (Python wasn't popular enough in the 90s)

[22:14] <tony-o> i wrote a sharepoint (gross) module that would display the uml as a chart using graphael to make it easier for people to view the charts.  i made people use them and update them monthly or quarterly and analyzed which ones weren't getting used so we could nix them.  it was super helpful when we had things like actual disasters where people tend to get stressed

[22:15] <tony-o> comborico1611: when did php get popular, wasn't that around in the late 90s?

[22:15] <comborico1611> tony-o: Interesting.

[22:16] <comborico1611> I guess PHP was around the same time as Javascript.

[22:16] <comborico1611> I didn't know if it was popular then, though.  I don't remember seeing a lot of .php back then.

[22:17] *** zakharyas left
[22:17] <comborico1611> But I was just a child.

[22:18] <zeddy__k> JS 1995, PHP 1997

[22:18] <xi-> the dawn of modern web

[22:18] * xi- wonders

[22:18] <zeddy__k> PHP had the biggest jump in popularity in early 2000s

[22:18] <xi-> I just puked a little

[22:19] <comborico1611> Web 2.0

[22:19] <xi-> god early web 2.0 was horrible

[22:19] <xi-> not like it's that much better now though, just in a different way

[22:20] <xi-> also remember that java applets were a thing

[22:20] <xi-> that's why javascript is named javascript

[22:21] <comborico1611> Time for supper.  Thanks fellas.

[22:21] *** comborico1611 left
[22:24] <zeddy__k> which languages do you use besides perl/perl6?

[22:24] <xi-> C, racket and other schemes

[22:25] <xi-> that's about it

[22:25] <xi-> I tried to avoid C++ where I can but there are too many interesting C++ projects

[22:25] <xi-> how about you?

[22:26] <zeddy__k> I dabbled in c, c++, java, python and perl

[22:26] <xi-> nice

[22:27] <zeddy__k> I'll start php next semester, and I'm not looking forward to it

[22:27] <xi-> I have a love/hate relationship with java

[22:27] <zeddy__k> also pascal in high school, it was mandatory

[22:27] <xi-> I like and appreciate its design but.........

[22:27] <xi-> it's java

[22:27] <zeddy__k> I know the feeling

[22:28] <zeddy__k> especially the whole ctrl+space to program that eclipse has

[22:28] <xi-> so that's another language that I avoid at all costs but I watch from afar just because the JVM is interesting

[22:28] *** wamba left
[22:30] <tony-o> eclipse is such a pita to use

[22:31] <tony-o> didn't realize they had eclipse setup for pascal though, i remember writing it with borland's compiler

[22:31] <xi-> what stops you from writing it with your preferred text editor?

[22:32] <xi-> and then using a build script like everything else

[22:32] <tony-o> i have nothing interesting to write in pascal anymore, perl[6] is the way to go, p6 if i can get away with it

[22:32] *** skids left
[22:32] <tony-o> i don't use eclipse, i tried using it when i was writing android apps - then i stopped using eclipse

[22:33] <xi-> I find myself using perl 5 more often these days, I use perl6 surprisingly often for its shell though

[22:33] *** trnh left
[22:34] <zeddy__k> eclipse is tiring with all the warnings, "unused variable here, yo, look, yellow triangle, look here", of course it is, I just put it there a millisecond ago

[22:35] <xi-> I generally don't like IDEs

[22:35] <zeddy__k> but it's nowhere close to VS when it comes to phantom errors

[22:36] <zeddy__k> IntelliSense or however it's called is so slow, and shows errors that have been corrected

[22:36] <zeddy__k> it drives me crazy, and I have to use it for my exams since we program on Uni computers running Windows

[22:37] <xi-> that's a shame :/

[22:37] <Xliff> AlexDaniel++: 💩  # The designers of UTF are spinning in their.... lawn chairs?

[22:38] <Xliff> Re: This latest topic of Java, PHP and such....

[22:38] <zeddy__k> I put VS vim extension on all of the PCs once, that was fun to watch

[22:39] <Xliff> C++: I ♥ because it was my next language after C (which I used, but hated because C++ made many things easier)

[22:39] <AlexDaniel> zeddy__k: related ticket: RT#132306

[22:39] <xi-> yeah, but it's a complex language

[22:39] <synopsebot> RT#132306 [open]: https://rt.perl.org/Ticket/Display.html?id=132306 [PERF] parameters, even if unused, make stuff slower ( f1($a, $, $, $, $, $) vs f2($a, $b, $c, $d, $e, $f) )

[22:39] <Xliff> However the C/C++ still have this horrible dependence on the pre-processer, which makes NativeCall sad.

[22:40] <AlexDaniel> zeddy__k: so there's a chance that we'll add warnings for unused parameters…

[22:40] <Xliff> Then there was Perl and my life changed for the better.

[22:40] <zeddy__k> it's ok if it's compile time warnings

[22:40] <Xliff> Then there was PHP which I throw up a little in my mouth, every time I have to use it.

[22:40] <Xliff> I swear it stands for Perl Hostile Pretender

[22:41] <xi-> the fact that it supports so many paradigms and abstractions at once makes some libraries overly complex for simple purposes, which means I have to spend more time studying them before doing anything with them as opposed to a C library (or a perl module, but that's on another level of simplicity which I love :D)

[22:41] <geekosaur> .oO { http://www.userfriendly.org/cartoons/archives/00jan/20000108.html }

[22:42] <tony-o> not a big fan of php but it has gotten a lot better from the early days where the same command run twice would have varying results

[22:42] <AlexDaniel> note 42

[22:42] <evalable6> AlexDaniel, rakudo-moar 72948e847: OUTPUT: «42␤»

[22:43] <Xliff> Then there was Java (which I had to use for $job) which I had avoided earlier due to CLASSPATH issues and 💩. It seemed to me to be an extremely haphazard language until IDEs took the headaches away. Now it's like top 5 languages for me.

[22:43] <AlexDaniel> heh… so that seems to be working

[22:43] <zeddy__k> note 42

[22:43] <Xliff> But before all of that was Delphi, which was based on Pascal, which was my first love.

[22:43] <evalable6> zeddy__k, rakudo-moar 72948e847: OUTPUT: «42␤»

[22:43] <geekosaur> Xliff, Perl Hedache Producer (remember that it was originally a set of perl scripts!)

[22:43] <zeddy__k> it does work

[22:43] <geekosaur> *Headache

[22:43] <zeddy__k> I don't know what I just did

[22:43] <Xliff> You don't hear from Pascal much (or even Delphi) anymore.

[22:44] <Xliff> geekosaur: WAT?!?!?

[22:44] * geekosaur ran into a Delphi program sometime last year. wtf, it's still there?

[22:44] <xi-> Xliff most I hear of Pascal is some Ada stuff

[22:44] <Xliff> geekosaur++: If that is true, I LOVE that acronym.

[22:44] <geekosaur> Xliff, Personal Home Page generator, written in perl. Headache Producer is my own snark thereof

[22:45] <zeddy__k> Paslcal is mandatory in Serbian high schools and Math Unis

[22:45] <zeddy__k> Pascal*

[22:46] <Xliff> geekosaur: They do not mention the Perl aspect in the Wikipedia article.

[22:46] <Xliff> That seems like a glaring omission right thar.

[22:46] <xi-> I found this https://twitter.com/rasmus/status/226405807305138176

[22:46] <geekosaur> they should, I mean it's why php looks so much like perl in the first place

[22:46] <Xliff> geekosaur: Delphi made writing Win database apps *easy*.

[22:47] <Xliff> geekosaur: I thought it was just a blatant ripoff language, but now it all makes sense!!

[22:47] <xi-> they say it was influenced by perl, but it was never made in perl

[22:47] <Xliff> And I know I've made my issues with PHP clear, here.

[22:48] *** setty1 left
[22:48] <geekosaur> so what got released was the C version, but the initial prototype was perl, as I read this

[22:49] <geekosaur> and, as noted in the comments, that was in the official history

[22:49] <xi-> yeah

[22:49] <Xliff> LOL.

[22:49] <Xliff> They can hide the true, but IT WANTS TO BE FREE!

[22:49] <Xliff> s/true/truth/

[22:49] <evalable6> Xliff, rakudo-moar 72948e847: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at /tmp/7vHqXkPWSt line 1␤»

[22:50] <Xliff> ?!?

[22:50] <Xliff> Shut up, evalable6!

[22:50] <AlexDaniel> :D

[22:50] <geekosaur> evilable6

[22:50] <AlexDaniel> evilable6: say 42

[22:50] <evalable6> AlexDaniel, rakudo-moar 72948e847: OUTPUT: «42␤»

[22:50] <Xliff> AlexDaniel: I'm stealing all this 💩 💩 💩 💩 💩 from you. It's all your fault!! ;)

[22:50] <xi-> say hi

[22:50] <xi-> evalable6 say hi

[22:50] <zeddy__k> evilable666

[22:50] <xi-> evalable6 say hi;

[22:51] <xi-> I don't know how this works :(

[22:51] <zeddy__k> evalable6: say hi

[22:51] <evalable6> zeddy__k, rakudo-moar 72948e847: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/48dHgnfKYj␤Undeclared routine:␤    hi used at line 1␤␤»

[22:51] <Xliff> "Headache" ~~ s/Headache/PHP

[22:51] <xi-> evalable6 say "hi";

[22:51] <xi-> evalable6: say "hi";

[22:51] <evalable6> xi-, rakudo-moar 72948e847: OUTPUT: «hi␤»

[22:51] <xi-> \o/

[22:51] <AlexDaniel> say "hi"

[22:51] <evalable6> AlexDaniel, rakudo-moar 72948e847: OUTPUT: «hi␤»

[22:51] <zeddy__k> \m/

[22:51] <Xliff> say ("Headache" ~~ s/Headache/PHP)

[22:51] <Xliff> say ("Headache" ~~ s/Headache/PHP/)

[22:51] <xi-> /

[22:52] <Xliff> say "Hi, I am evilable!"

[22:52] <zeddy__k> use quotes

[22:52] <evalable6> Xliff, rakudo-moar 72948e847: OUTPUT: «Hi, I am evilable!␤»

[22:52] <AlexDaniel> Xliff: that's immutable

[22:52] <Xliff> say ("Headache" ~~ S/Headache/PHP/)

[22:52] <evalable6> Xliff, rakudo-moar 72948e847: OUTPUT: «Potential difficulties:␤    Smartmatch with S/// is not useful. You can use given instead: S/// given $foo␤    at /tmp/09XmKupzb2:1␤    ------> 03say ("Headache" ~~ 08⏏04S/Headache/PHP/)␤False␤»

[22:52] <Xliff> :P

[22:52] <xi-> $_ = "Headache"; say s/Headache/PHP/;

[22:52] <evalable6> xi-, rakudo-moar 72948e847: OUTPUT: «｢Headache｣␤»

[22:52] *** trnh joined
[22:53] <xi-> $_ = "Headache"; say $_ ~~ s/Headache/PHP/;

[22:53] <evalable6> xi-, rakudo-moar 72948e847: OUTPUT: «｢Headache｣␤»

[22:53] <xi-> I'll stop now

[22:53] <geekosaur> try S instead of s

[22:53] <xi-> :(

[22:53] <xi-> $_ = "Headache"; say $_ ~~ S/Headache/PHP/;

[22:53] <evalable6> xi-, rakudo-moar 72948e847: OUTPUT: «Potential difficulties:␤    Smartmatch with S/// is not useful. You can use given instead: S/// given $foo␤    at /tmp/B6gv3dDKUU:1␤    ------> 03$_ = "Headache"; say $_ ~~ 08⏏04S/Headache/PHP/;␤False␤»

[22:53] <Xliff> $_ = "Headache"; s/Headache/PHP/; say $_

[22:53] <evalable6> Xliff, rakudo-moar 72948e847: OUTPUT: «PHP␤»

[22:53] <geekosaur> not with the ~~

[22:53] <zeddy__k> note his attempt

[22:53] <xi-> here we go

[22:53] *** Kaiepi left
[22:53] <geekosaur> $_ = "Headache"; say S/Headache/PHP/

[22:53] <evalable6> geekosaur, rakudo-moar 72948e847: OUTPUT: «PHP␤»

[22:54] <AlexDaniel> but, you know, you can use “m: ” explicitly without relying on autodetection :)

[22:54] *** Kaiepi joined
[22:54] <xi-> but that's less exciting

[22:54] <xi-> you don't have the suspense of wondering whether it'll respond

[22:55] <AlexDaniel> it will always respond if the code is valid and does something meaningful :)

[22:55] <Xliff> I just think that auto evaluation is just a pain waiting to happen.

[22:55] <xi-> say "something meaningful 🍤"

[22:55] <evalable6> xi-, rakudo-moar 72948e847: OUTPUT: «something meaningful 🍤␤»

[22:56] <zeddy__k> the question here is, can we get it read the memory of the host computer?

[22:56] <AlexDaniel> Xliff: it depends – https://irclog.perlgeek.de/perl6/2017-05-18#i_14599572

[22:57] <AlexDaniel> zeddy__k: hacking into dev bots is not a very good idea…

[22:57] <zeddy__k> I was just wondering

[22:57] <AlexDaniel> although I support the curiosity, in general :)

[22:59] <Xliff> loop { say "Hi!" }

[22:59] *** colomon left
[22:59] <xi-> Xliff I'd be willing to bet there's a timeout on code execution

[22:59] <xi-> and that it's properly sandboxed

[22:59] *** evalable6 left
[22:59] *** evalable6 joined
[23:00] *** ChanServ sets mode: +v evalable6

[23:00] <zeddy__k> you broke it

[23:00] <Xliff> xi-: Respect may curiosatah!!!!

[23:00] <AlexDaniel> ah, I restarted that manually to get updates. There's nothing wrong with loop

[23:00] <AlexDaniel> loop { say "Hi!" }

[23:00] <AlexDaniel> s/true/truth/

[23:00] <AlexDaniel> say 42

[23:00] <evalable6> AlexDaniel, rakudo-moar 72948e847: OUTPUT: «42␤»

[23:00] <AlexDaniel> Xliff: fixed the ‘s///’ thingie, thanks

[23:00] <Xliff> AlexDaniel: Stop forking evalable!

[23:00] <xi-> fork

[23:01] <Xliff> AlexDaniel: 8-) # yw

[23:02] <Xliff> xi-: Really? You say that after this -> 🍤

[23:02] <Xliff> (￣▼￣)

[23:02] <xi-> it's so GOOD

[23:03] <xi-> shrimps are actually one of my most favourite foods

[23:03] <Xliff> That's a shrimp?

[23:03] <Xliff> u: (￣▼￣)

[23:03] <unicodable6> Xliff, U+0028 LEFT PARENTHESIS [Ps] (()

[23:03] <unicodable6> Xliff, U+FFE3 FULLWIDTH MACRON [Sk] (￣)

[23:03] <unicodable6> Xliff, 5 characters in total ((￣▼￣)): https://gist.github.com/9e71d9ff0e3aa0bf58d1bc7d9e4c952b

[23:03] <Xliff> Oops

[23:03] <Xliff> xi-: Really? You say that after this -> 🍤

[23:03] <Xliff> Doh'

[23:03] *** _Kaiepi joined
[23:03] <Xliff> u: 🍤

[23:03] <unicodable6> Xliff, U+1F364 FRIED SHRIMP [So] (🍤)

[23:03] <Xliff> ( O _ O )

[23:03] <zeddy__k> whaaa?

[23:04] <Geth> ¦ whateverable: 1a5c187636 | (Aleks-Daniel Jakimenko-Aleksejev)++ | bin/Evalable.p6

[23:04] <Geth> ¦ whateverable: Add more brains to detect code

[23:04] <Geth> ¦ whateverable: 

[23:04] <Geth> ¦ whateverable: This should trigger more and less at the same time. We will no longer

[23:04] <Geth> ¦ whateverable: see annoying evals that result in compile time error, but we might see

[23:04] <Geth> ¦ whateverable: it being triggered on things that actually work (even if

[23:04] <Geth> ¦ whateverable: surprisingly).

[23:04] <zeddy__k> it is a shrimp

[23:04] <Geth> ¦ whateverable: 

[23:04] <Geth> ¦ whateverable: <…commit message has 8 more lines…>

[23:04] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/1a5c187636

[23:04] * Xliff thought it was another eggplant.

[23:04] *** Kaiepi left
[23:04] *** john_parr left
[23:05] <xi-> Xliff ooh

[23:05] <zeddy__k> wait, all these *able things are bots?

[23:06] <AlexDaniel> zeddy__k: yes

[23:06] <zeddy__k> neat

[23:06] <AlexDaniel> Help pages: https://github.com/perl6/whateverable/wiki

[23:06] <Xliff> xi-: /o\

[23:11] <zeddy__k> AlexDaniel: ty

[23:12] *** cdg_ joined
[23:15] *** cdg left
[23:17] *** epony left
[23:18] *** trnh left
[23:26] *** Skarsnik_ left
[23:26] *** john51 left
[23:31] *** alpha6 left
[23:33] *** john51 joined
[23:42] *** AlexDaniel left
[23:43] *** zeddy__k left
[23:43] *** john51 left
[23:43] *** alpha6 joined
[23:44] *** trnh joined
[23:45] *** john51 joined
[23:54] *** comborico1611 joined
[23:54] <comborico1611> .tell

[23:54] <yoleaux> Relay a telegram to someone

[23:55] <comborico1611> .tell DrForr: Have you heard of this book: Coders at Work: Reflections on the Craft of Programming ?

[23:55] <yoleaux> comborico1611: What kind of a name is "DrForr:"?!

[23:55] <comborico1611> .tell DrForr Have you heard of this book: Coders at Work: Reflections on the Craft of Programming ?

[23:55] <yoleaux> comborico1611: I'll pass your message to DrForr.

[23:56] *** comborico joined
[23:56] *** comborico1611 left
