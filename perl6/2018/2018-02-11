[00:00] *** mcmillhj left
[00:08] *** cdg joined
[00:12] *** mcmillhj joined
[00:13] *** cdg left
[00:15] *** shareable6 left
[00:17] *** shareable6 joined
[00:22] *** stmuk_ joined
[00:24] *** stmuk left
[00:29] *** cdg joined
[00:31] *** mcmillhj left
[00:34] *** cdg left
[00:35] *** dct_ left
[00:36] *** wamba left
[00:37] *** shareable6 left
[00:37] *** shareable6 joined
[00:39] *** pierre__ joined
[00:40] <[Coke]> I don't get to do a lot of development at work anymore, but ColdFusion & Java were high on the list.

[00:40] *** shareable6 left
[00:44] *** mcmillhj joined
[00:49] *** mcmillhj left
[00:50] *** cdg joined
[00:53] *** shareable6 joined
[00:55] *** cdg left
[00:55] *** mcmillhj joined
[00:56] *** pierre__ left
[00:59] *** mcmillhj left
[01:02] *** jeromelanteri joined
[01:11] *** itaylor57 left
[01:12] *** itaylor57 joined
[01:19] *** konsolebox left
[01:25] *** konsolebox joined
[01:29] *** mcmillhj joined
[01:33] *** konsolebox left
[01:33] *** konsolebox joined
[01:34] *** mcmillhj left
[01:37] *** awwaiid joined
[01:41] *** konsolebox left
[01:42] *** mcmillhj joined
[01:42] *** konsolebox joined
[01:45] *** jeromelanteri left
[01:47] *** mcmillhj left
[01:56] *** cdg joined
[01:57] *** mcmillhj joined
[01:57] *** Rawriful left
[02:02] *** mcmillhj left
[02:02] *** cdg left
[02:08] *** Lynx_ left
[02:08] <mspo> CF?

[02:09] *** espadrine_ left
[02:09] *** Lynx_ joined
[02:10] <ZzZombo> m: class A {method a{'a'};method b(|c){c.say}};class B {has A $!a handles *};with B.new {.a;.b}

[02:10] <camelia> rakudo-moar ef1d22f4c: OUTPUT: «\()␤»

[02:10] <ZzZombo> m: class A {method a{'a'};method b(|c){c.say}};class B {has A $!a handles *};with B.new {.a.say;.b}

[02:10] <camelia> rakudo-moar ef1d22f4c: OUTPUT: «a␤\()␤»

[02:12] *** markong left
[02:14] *** mcmillhj joined
[02:19] *** mcmillhj left
[02:24] *** mcmillhj joined
[02:32] *** mcmillhj left
[02:33] *** cdg joined
[02:34] *** mniip left
[02:36] *** mniip joined
[02:37] *** cdg left
[02:46] *** ilbot3 left
[02:55] *** ilbot3 joined
[02:55] *** ChanServ sets mode: +v ilbot3

[02:56] *** mcmillhj joined
[03:02] *** mcmillhj left
[03:08] *** mcmillhj joined
[03:09] *** cdg joined
[03:13] <Xliff> m: $*VERSION.say

[03:13] <camelia> rakudo-moar c6b1880b4: OUTPUT: «Dynamic variable $*VERSION not found␤  in block <unit> at <tmp> line 1␤␤»

[03:13] *** cdg left
[03:13] *** mcmillhj left
[03:15] <AlexDaniel> Xliff: which version are you looking for? :)

[03:15] <yoleaux> 01:36Z <tbrowder> AlexDaniel: see  my updated comment in nqp PR #401. i need expert help to get the nqp::spawnprocasync code in it working.  if that can work, then we can have a good test.

[03:15] <Xliff> What's the latest "perl6 -v"

[03:15] <AlexDaniel> say $*PERL.compiler

[03:15] <evalable6> AlexDaniel, rakudo-moar c6b1880b4: OUTPUT: «rakudo (2018.01.177.gc.6.b.1880.b.4)␤»

[03:16] <AlexDaniel> say $”VM

[03:16] <AlexDaniel> say $*VM

[03:16] <evalable6> AlexDaniel, rakudo-moar c6b1880b4: OUTPUT: «moar (2018.01.82.g.296620.e.86)␤»

[03:16] <AlexDaniel> say $*PERL

[03:16] <evalable6> AlexDaniel, rakudo-moar c6b1880b4: OUTPUT: «Perl 6 (6.c)␤»

[03:16] <Xliff> Fuuuu

[03:16] <Xliff> Somehow I've been rakudobrewing 2017.10

[03:16] <Xliff> I'm stuck on it.

[03:16] <AlexDaniel> well… because…

[03:16] <AlexDaniel> we changed the default branch from “nom” to “master” :)

[03:16] <Xliff> :P

[03:17] <AlexDaniel> NQP#401

[03:17] <synopsebot> NQP#401 [open]: https://github.com/perl6/nqp/pull/401 improve pod panic msg

[03:17] <Xliff> so it's rakudobrew build moar-master?

[03:18] <Xliff> No...

[03:18] <AlexDaniel> rakudobrew self-upgrade

[03:18] <AlexDaniel> that's according to http://rakudo.org/2017/10/27/main-development-branch-renamed-from-nom-to-master/

[03:19] <Xliff> 'kay

[03:19] <Xliff> Thanks.

[03:20] <Xliff> So I've been building on the wrong branch since Turkey month. Wheee!

[03:20] *** mcmillhj joined
[03:25] *** mcmillhj left
[03:32] <ZzZombo> m: class A {method a{self.say};method !b(|c){c.say}};class B {has A $!a handles *};with B.new {.a.say;.!b}

[03:32] <camelia> rakudo-moar c6b1880b4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3as A $!a handles *};with B.new {.a.say;.7⏏5!b}␤»

[03:32] <ZzZombo> m: class A {method a{self.say};method !b(|c){c.say}};class B {has A $!a handles *};with B.new {.a.say;$_!b}

[03:32] <camelia> rakudo-moar c6b1880b4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Private method call to b must be fully qualified with the package containing the method␤at <tmp>:1␤------> 3A $!a handles *};with B.new {.a.say;$_!b7⏏5}␤    expecting any of:␤        metho…»

[03:33] <ZzZombo> m: class A {method a{self.say};method !b(|c){c.say}};class B {has A $!a handles *};with B.new {.a.say;$_::B!b}

[03:33] <camelia> rakudo-moar c6b1880b4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Private method call to b must be fully qualified with the package containing the method␤at <tmp>:1␤------> 3!a handles *};with B.new {.a.say;$_::B!b7⏏5}␤    expecting any of:␤        metho…»

[03:33] <ZzZombo> m: class A {method a{self.say};method !b(|c){c.say}};class B {has A $!a handles *};with B.new {.a}

[03:33] <camelia> rakudo-moar c6b1880b4: OUTPUT: «(A)␤»

[03:34] <ZzZombo> So what use does `handles` have?

[03:34] <ZzZombo> m: class A {method a(|c){(self,c).say};method !b(|c){c.say}};class B {has A $!a handles *};with B.new {.a}

[03:34] <camelia> rakudo-moar c6b1880b4: OUTPUT: «((A) \())␤»

[03:35] <ZzZombo> It would be a bit more useful if the delegating object was available somehow in the delegate.

[03:36] <ZzZombo> m: my Int Str $a

[03:36] <camelia> rakudo-moar c6b1880b4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Multiple prefix constraints not yet implemented. Sorry.␤at <tmp>:1␤------> 3my Int Str7⏏5 $a␤»

[03:37] <lizmat> another sighting of Camelia in the wild: https://www.facebook.com/139508053330390/photos/a.139510073330188.1073741828.139508053330390/182626859018509/?type=3&theater

[03:38] *** mcmillhj joined
[03:38] <lizmat> check out the top of the Marshall amp on the right hand side  :-)

[03:43] *** mcmillhj left
[03:44] *** konsolebox left
[03:45] *** cdg joined
[03:49] *** cdg left
[03:50] *** konsolebox joined
[03:53] *** shareable6 left
[03:55] *** bisectable6 left
[03:55] *** shareable6 joined
[03:55] *** ChanServ sets mode: +v shareable6

[03:55] *** committable6 left
[03:55] *** committable6 joined
[03:56] *** notable6 left
[03:56] *** bloatable6 left
[03:56] *** notable6 joined
[03:56] *** bisectable6 joined
[03:56] *** ChanServ sets mode: +v bisectable6

[03:56] *** bloatable6 joined
[03:56] *** bisectable6 left
[03:56] *** bisectable6 joined
[03:56] *** ChanServ sets mode: +v bisectable6

[03:58] *** mcmillhj joined
[04:03] *** mcmillhj left
[04:04] <Geth> ¦ whateverable: 35de4ba3bc | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[04:04] <Geth> ¦ whateverable: Configurable is better than hardcoded

[04:04] <Geth> ¦ whateverable: 

[04:04] <Geth> ¦ whateverable: There are many things that should be changed like this.

[04:04] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/35de4ba3bc

[04:04] <Geth> ¦ whateverable: c5278250b5 | (Aleks-Daniel Jakimenko-Aleksejev)++ | bin/Shareable.p6

[04:04] <Geth> ¦ whateverable: Make the HEAD build available as .tar.gz

[04:04] <Geth> ¦ whateverable: 

[04:04] <Geth> ¦ whateverable: In case somebody wants to use it on an ancient system where zstd is

[04:04] <Geth> ¦ whateverable: not easily available. Maybe perl6/doc#1765 ?

[04:04] <synopsebot> DOC#1765 [open]: https://github.com/perl6/doc/issues/1765 [build] Reduce travis test time

[04:04] <Geth> ¦ whateverable: 

[04:04] <Geth> ¦ whateverable: We'll see how this goes and if it's useful I can improve the code

[04:04] <Geth> ¦ whateverable: later.

[04:04] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/c5278250b5

[04:08] *** konsolebox left
[04:08] *** konsolebox joined
[04:12] *** Cabanossi left
[04:13] *** Cabanossi joined
[04:15] *** konsolebox left
[04:16] *** konsolebox joined
[04:19] *** mcmillhj joined
[04:21] *** cdg joined
[04:24] *** mcmillhj left
[04:26] *** cdg left
[04:31] *** mcmillhj joined
[04:33] *** konsolebox left
[04:34] *** konsolebox joined
[04:36] *** mcmillhj left
[04:46] *** mcmillhj joined
[04:51] *** mcmillhj left
[04:54] *** AlexDaniel left
[04:57] *** cdg joined
[05:02] *** cdg left
[05:05] *** mcmillhj joined
[05:06] *** HTR_ joined
[05:07] *** HTR_ left
[05:10] *** mcmillhj left
[05:15] *** aindilis left
[05:16] *** aindilis` joined
[05:21] *** konsolebox left
[05:22] *** konsolebox joined
[05:24] *** mcmillhj joined
[05:31] *** mcmillhj left
[05:40] *** konsolebox left
[05:40] *** mcmillhj joined
[05:41] *** konsolebox joined
[05:46] *** mcmillhj left
[05:48] *** konsolebox left
[05:50] *** khw left
[05:51] *** konsolebox joined
[05:55] *** troys left
[06:01] *** evalable6 left
[06:02] *** evalable6 joined
[06:04] *** cdg joined
[06:06] *** mcmillhj joined
[06:07] *** aindilis` left
[06:08] *** aindilis` joined
[06:08] *** cdg left
[06:10] *** jeromelanteri joined
[06:11] *** jeromelanteri left
[06:11] *** R0b0t1 left
[06:11] *** mcmillhj left
[06:11] *** jeromelanteri joined
[06:19] *** aindilis` left
[06:20] *** mcmillhj joined
[06:23] *** pierre__ joined
[06:25] *** mcmillhj left
[06:28] *** konsolebox left
[06:28] *** mcmillhj joined
[06:28] *** konsolebox joined
[06:30] *** wigner joined
[06:33] *** mcmillhj left
[06:33] *** eliasr left
[06:35] *** laaa joined
[06:36] *** mcmillhj joined
[06:38] *** konsolebox left
[06:40] *** cdg joined
[06:41] *** mcmillhj left
[06:41] *** konsolebox joined
[06:42] *** wigner left
[06:44] *** jeromelanteri left
[06:44] *** cdg left
[06:54] *** konsolebox left
[06:56] *** konsolebox joined
[06:57] *** jeromelanteri joined
[07:01] *** konsolebox left
[07:02] *** konsolebox joined
[07:02] *** mcmillhj joined
[07:07] *** wigner joined
[07:08] *** mcmillhj left
[07:08] *** mcmillhj joined
[07:13] *** mcmillhj left
[07:14] *** wigner left
[07:15] *** wigner joined
[07:16] *** cdg joined
[07:16] *** laaa left
[07:17] *** laaa joined
[07:20] *** konsolebox left
[07:21] *** cdg left
[07:21] *** konsolebox joined
[07:29] *** konsolebox left
[07:31] *** konsolebox joined
[07:36] *** wigner left
[07:36] *** wigner joined
[07:37] *** konsolebox left
[07:39] *** konsolebox joined
[07:41] *** mcmillhj joined
[07:46] *** laaa left
[07:46] *** mcmillhj left
[07:52] *** cdg joined
[07:57] *** cdg left
[07:57] *** wamba joined
[07:58] *** imcsk8 left
[07:58] *** imcsk8 joined
[08:00] *** mcmillhj joined
[08:06] *** mcmillhj left
[08:13] *** konsolebox left
[08:16] *** konsolebox joined
[08:16] *** agwind left
[08:18] *** agwind joined
[08:20] *** andrzejku joined
[08:20] *** wigner left
[08:23] *** darutoko joined
[08:26] *** konsolebox left
[08:27] <ZzZombo> s: &self, \()

[08:27] <SourceBaby> ZzZombo, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤Undeclared routine:␤    self used at line 6␤␤

[08:27] *** konsolebox joined
[08:27] <ZzZombo> err

[08:27] <ZzZombo> s: self

[08:27] <SourceBaby> ZzZombo, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤'self' used where no object is available␤at -e:6␤------>     put sourcery(<HERE> self )[1];␤    expecting any of:␤        argument list␤        term␤

[08:28] <ZzZombo> Why do the docs say self is a function??

[08:28] *** cdg joined
[08:30] *** Zoffix joined
[08:30] <Zoffix> ZzZombo: on which page do they say that?

[08:30] *** mcmillhj joined
[08:31] <ZzZombo> https://docs.perl6.org/routine/self

[08:31] <ZzZombo> routine

[08:31] <ZzZombo> "(Mu) method self"

[08:31] <Zoffix> ZzZombo: "routine" means method, submethod, or sub

[08:31] <Zoffix> m: say Method ~~ Routine

[08:31] <camelia> rakudo-moar 835bb3508: OUTPUT: «True␤»

[08:32] <Zoffix> s: 42, 'self', \()

[08:32] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/13406517a/src/core/Mu.pm#L11

[08:32] <Zoffix> s: Failure.new, 'self', \()

[08:32] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/13406517a/src/core/Failure.pm#L105

[08:33] *** cdg left
[08:34] <Zoffix> and Regex is also Routine

[08:35] *** konsolebox left
[08:36] *** mcmillhj left
[08:36] <ZzZombo> `method self{self}` is not what I'm after. Where actually does the symbol "self" get installed?

[08:37] *** konsolebox joined
[08:37] <ZzZombo> And why is `self` here `Mu`?

[08:37] <ZzZombo> m: sub look{my &m;my $i=2;while !&m && try callframe($i++) -> $f {given $f.code {when Method {say $f.my.map({.key=>.value});&m=$_};when Sub {last}}};$i.say;&m};class A {method m{}};class B is A {method m{my $a=123;look.say}};B.new.m

[08:37] <camelia> rakudo-moar 835bb3508: OUTPUT: «($_ => (Any) $/ => Nil self => (Mu) %_ => (Mu) $*DISPATCHER => (MethodDispatcher) $! => Nil $a => 123 $¢ => Nil)␤3␤m␤»

[08:39] <Zoffix> It's installed by the core Actions/Grammar

[08:42] *** konsolebox left
[08:44] <Zoffix> m: BEGIN $?LANG.refine_slang: 'MAIN', role { token term:sym<self> { ['♥'||<sym>] <.end_keyword> { $*HAS_SELF || self.typed_sorry('X::Syntax::Self::WithoutObject') } } }; class Foo { has $.b = 42; method z { ♥.b } }.new.z.say

[08:44] <camelia> rakudo-moar 835bb3508: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus statement␤at <tmp>:1␤------> 3 }; class Foo { has $.b = 42; method z {7⏏5 ♥.b } }.new.z.say␤    expecting any of:␤        prefix␤        term␤»

[08:44] <Zoffix> wonder why it doesn't wanna pick it up

[08:45] <Zoffix> m: BEGIN $?LANG.refine_slang: 'MAIN', role { token term:sym<self> { ['♥'||<sym>] { $*HAS_SELF || self.typed_sorry('X::Syntax::Self::WithoutObject') } } }; class Foo { has $.b = 42; method z { ♥.b } }.new.z.say

[08:45] <camelia> rakudo-moar 835bb3508: OUTPUT: «42␤»

[08:45] <Zoffix> ^_^

[08:47] *** Zoffix left
[08:47] *** mcmillhj joined
[08:47] *** konsolebox joined
[08:52] *** mcmillhj left
[09:00] *** mcmillhj joined
[09:01] *** Ulti left
[09:03] *** setty1 joined
[09:05] *** mcmillhj left
[09:07] *** Ulti joined
[09:10] *** konsolebox left
[09:12] *** konsolebox joined
[09:16] *** mcmillhj joined
[09:17] *** konsolebox left
[09:21] *** mcmillhj left
[09:21] *** konsolebox joined
[09:28] *** mcmillhj joined
[09:29] *** sena_kun joined
[09:29] *** konsolebox left
[09:29] *** konsolebox joined
[09:31] *** imcsk8 left
[09:32] *** mcmillhj left
[09:38] *** jeromelanteri left
[09:38] *** mcmillhj joined
[09:39] *** jeromelanteri joined
[09:40] *** rindolf joined
[09:41] *** cdg joined
[09:44] *** mcmillhj left
[09:46] *** cdg left
[09:53] *** mcmillhj joined
[09:57] *** isBEKaml joined
[09:57] *** mcmillhj left
[09:58] *** mcmillhj joined
[09:59] *** konsolebox left
[10:01] *** konsolebox joined
[10:01] *** ChoHag joined
[10:03] *** mcmillhj left
[10:05] *** mcmillhj joined
[10:10] *** mcmillhj left
[10:11] *** konsolebox left
[10:12] *** konsolebox joined
[10:12] *** cdg joined
[10:13] *** mcmillhj joined
[10:16] *** isBEKaml left
[10:17] *** cdg left
[10:19] *** mcmillhj left
[10:22] *** konsolebox left
[10:22] <Geth> ¦ doc/master: 22 commits pushed by (JJ Merelo)++

[10:22] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/b1b107f867...db93ff0c9c

[10:22] *** mcmillhj joined
[10:23] *** konsolebox joined
[10:29] *** pierre__ left
[10:31] *** mcmillhj left
[10:39] <ZzZombo> s: &term:<rand>,\()

[10:39] <SourceBaby> ZzZombo, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤Undeclared routine:␤    term:<rand> used at line 6. Did you mean 'term:<time>', 'term:<now>'?␤␤

[10:39] <ZzZombo> s: &term:<now>,\()

[10:39] <SourceBaby> ZzZombo, Sauce is at https://github.com/rakudo/rakudo/blob/835bb3508/src/core/Instant.pm#L121

[10:39] <ZzZombo> s: &rand,\()

[10:39] <SourceBaby> ZzZombo, Sauce is at https://github.com/rakudo/rakudo/blob/835bb3508/src/core/Num.pm#L519

[10:40] *** espadrine_ joined
[10:40] *** eroux joined
[10:51] *** AndroUser joined
[10:51] *** konsolebox left
[10:52] *** boop joined
[10:52] <boop> Rakudo

[10:53] *** Ven`` joined
[10:53] *** boop left
[10:53] *** konsolebox joined
[10:54] *** Ven`` left
[10:55] *** AndroUser left
[10:56] *** Ven`` joined
[10:56] *** nexysno joined
[11:07] *** cdg joined
[11:08] <ZzZombo> Why this doesn't work?

[11:08] <ZzZombo> m: package A {my package EXPORTHOW::DECLARE {constant test=class TestHOW is Metamodel::ClassHOW {method compose(|c){c.say;nextsame}}}};import A;test B {};say B.new.a

[11:08] <camelia> rakudo-moar 835bb3508: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    B used at line 1␤Undeclared routine:␤    test used at line 1␤␤»

[11:12] *** cdg left
[11:16] *** kybr joined
[11:22] *** pmurias joined
[11:37] *** setty1 left
[11:48] *** cdg joined
[11:53] *** cdg left
[11:58] *** pierre__ joined
[12:01] *** markong joined
[12:02] *** AlexDaniel joined
[12:09] *** TEttinger left
[12:11] <Geth> ¦ doc: 6869aa01c2 | (Aleks-Daniel Jakimenko-Aleksejev)++ | .travis.yml

[12:11] <Geth> ¦ doc: Simplified travis file

[12:11] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6869aa01c2

[12:13] *** nebuchadnezzar left
[12:14] *** travis-ci joined
[12:14] <travis-ci> Doc build errored. Aleks-Daniel Jakimenko-Aleksejev 'Simplified travis file'

[12:14] <travis-ci> https://travis-ci.org/perl6/doc/builds/340110665 https://github.com/perl6/doc/compare/db93ff0c9cda...6869aa01c288

[12:14] *** travis-ci left
[12:14] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[12:15] *** pmurias left
[12:19] <Geth> ¦ doc: 1356c719c1 | (Aleks-Daniel Jakimenko-Aleksejev)++ | .travis.yml

[12:19] <Geth> ¦ doc: OK, whatever

[12:19] <Geth> ¦ doc: 

[12:19] <Geth> ¦ doc: That didn't work and I have no idea why.

[12:19] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1356c719c1

[12:26] *** zeddy_k joined
[12:30] *** andrzejku left
[12:36] *** travis-ci joined
[12:36] <travis-ci> Doc build passed. Aleks-Daniel Jakimenko-Aleksejev 'OK, whatever

[12:36] <travis-ci> https://travis-ci.org/perl6/doc/builds/340112168 https://github.com/perl6/doc/compare/6869aa01c288...1356c719c1f2

[12:36] *** travis-ci left
[12:45] *** konsolebox left
[12:52] *** zakharyas joined
[12:52] *** konsolebox joined
[13:01] *** pierre__ left
[13:02] *** pierre__ joined
[13:06] *** pierre__ left
[13:17] *** pierre__ joined
[13:21] *** a3f left
[13:21] *** a3f joined
[13:27] *** zakharyas left
[13:28] *** Ven`` left
[13:32] *** andrzejku joined
[13:41] *** eliasr joined
[13:43] *** zeddy__k joined
[13:46] *** zeddy_k left
[13:48] *** zakharyas joined
[13:51] *** ChoHag left
[13:54] <SmokeMachine> m: proto bla(--> Hash()) {*}; multi bla {a => 1, b => 2}; sub ble(-->Hash()) {a => 1, b => 2}; bla.^name; ble.^name

[13:54] <camelia> rakudo-moar 00af9ce27: ( no output )

[13:55] <SmokeMachine> m: proto bla(--> Hash()) {*}; multi bla {a => 1, b => 2}; sub ble(-->Hash()) {a => 1, b => 2}; say bla.^name; say ble.^name

[13:55] <camelia> rakudo-moar 00af9ce27: OUTPUT: «List␤Hash␤»

[13:55] <SmokeMachine> shouldn't blame and bye return the same type?

[13:56] <SmokeMachine> s/blame and bye/bla and ble/

[13:56] <Geth> ¦ whateverable: a1ddbea155 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[13:56] <Geth> ¦ whateverable: Add releases: shortcut

[13:56] <Geth> ¦ whateverable: 

[13:56] <Geth> ¦ whateverable: I used this myself many times only to realize that it does not work.

[13:56] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/a1ddbea155

[13:56] *** committable6 left
[13:56] *** committable6 joined
[13:58] <Geth> ¦ whateverable: fc82a6653d | (Aleks-Daniel Jakimenko-Aleksejev)++ | bin/Committable.p6

[13:58] <Geth> ¦ whateverable: Use “releases” instead of hardcoding it to 6c

[13:58] <Geth> ¦ whateverable: 

[13:58] <Geth> ¦ whateverable: This is going to work better once we move to v6.d.

[13:58] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/fc82a6653d

[13:58] *** committable6 left
[13:58] *** committable6 joined
[13:58] *** ChanServ sets mode: +v committable6

[14:00] *** AddGotoStatement joined
[14:00] *** AddGotoStatement left
[14:10] *** pierre__ left
[14:13] *** pierre__ joined
[14:21] *** Praise left
[14:21] *** ChoHag joined
[14:24] *** Ven`` joined
[14:25] *** zakharyas left
[14:25] <ZzZombo> Anybody to answer my question?

[14:26] *** eserte joined
[14:27] <AlexDaniel> answerable: are you ready?

[14:28] *** mcmillhj joined
[14:28] <AlexDaniel> ZzZombo: just ask and we'll see if somebody can help :)

[14:28] <ZzZombo> Why this doesn't work?

[14:28] <ZzZombo> m: package A {my package EXPORTHOW::DECLARE {constant test=class TestHOW is Metamodel::ClassHOW {method compose(|c){c.say;nextsame}}}};import A;test B {};say B.new.a

[14:28] <camelia> rakudo-moar 00af9ce27: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    B used at line 1␤Undeclared routine:␤    test used at line 1␤␤»

[14:31] <AlexDaniel> ZzZombo: ok… I don't really know, but shouldn't it be “constant test is export = …” ?

[14:33] *** mcmillhj left
[14:35] *** zakharyas joined
[14:36] *** mcmillhj joined
[14:37] <jnthn> ZzZombo: Pretty sure you need your meta-type in a different file, and to `use` it`, for that to work.

[14:37] <yoleaux> 10 Feb 2018 18:54Z <Zoffix> jnthn: Wrote down a proposal for how I imagine type constraints on constants working, if you wanted to comment. This is basically clarification to 6.c spec rather than anything new: https://github.com/rakudo/rakudo/blob/master/docs/archive/constants-type-constraints-proposal-2018-02-10.md

[14:38] *** pierre__ left
[14:40] *** zakharyas left
[14:45] *** mcmillhj left
[14:56] *** pecastro left
[14:57] *** pecastro joined
[15:01] *** pecastro left
[15:06] *** nebuchadnezzar joined
[15:15] *** statisfiable6 left
[15:15] *** squashable6 left
[15:15] *** unicodable6 left
[15:15] *** nativecallable6 left
[15:16] *** greppable6 left
[15:16] *** squashable6 joined
[15:16] *** statisfiable6 joined
[15:16] *** ChanServ sets mode: +v statisfiable6

[15:16] *** nativecallable6 joined
[15:16] *** unicodable6 joined
[15:16] *** greppable6 joined
[15:16] *** ChanServ sets mode: +v greppable6

[15:16] <AlexDaniel> benchable6: uptime

[15:16] <benchable6> AlexDaniel, 17 hours, 28 minutes, and 4 seconds, 878.917969MiB maxrss. This is Rakudo version 2018.01-174-gef1d22f4c built on MoarVM version 2018.01-82-g296620e86 implementing Perl 6.c.

[15:21] *** pierre__ joined
[15:29] *** mcmillhj joined
[15:30] *** Ven`` left
[15:34] *** mcmillhj left
[15:36] *** andrzejku left
[15:38] <Voldenet> SmokeMachine: I might be mistaken, but I think proto can't define return types, or rather it won't work as you think

[15:39] <Voldenet> m: proto bla(--> int) {*}; multi bla {a => 1, b => 2}; sub ble(-->Hash()) {a => 1, b => 2}; say bla.^name; say ble.^name

[15:39] <camelia> rakudo-moar 00af9ce27: OUTPUT: «List␤Hash␤»

[15:43] *** pierre__ left
[15:43] *** mcmillhj joined
[15:45] <Voldenet> and if I understand correctly, it can be checked in a proto

[15:45] *** Ven`` joined
[15:46] <Voldenet> m: proto bla(--> Hash) { my $h = {*}; die("Hash expected, got " ~ $h.WHAT) if $h !~~ Hash; }; multi bla {a => 1, b => 2}; bla.WHAT.say

[15:46] <camelia> rakudo-moar 00af9ce27: OUTPUT: «Use of uninitialized value of type List in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in sub bla at <tmp> line 1␤Hash expected, got ␤  in sub bla at <tmp> line 1␤  in block <u…»

[15:47] <Voldenet> m: proto bla(--> Hash) { my $h = {*}; die("Hash expected, got " ~ $h.^name) if $h !~~ Hash; }; multi bla {a => 1, b => 2}; bla.WHAT.say

[15:47] <camelia> rakudo-moar 00af9ce27: OUTPUT: «Hash expected, got List␤  in sub bla at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:47] <Voldenet> m: proto bla(--> Hash) { my $h = {*}; die("Hash expected, got " ~ $h.^name) if $h !~~ Hash; }; multi bla { { a => 1, b => 2 }}; bla.WHAT.say

[15:47] <camelia> rakudo-moar 00af9ce27: OUTPUT: «Type check failed for return value; expected Hash but got Slip (Empty)␤  in sub bla at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:47] <Voldenet> m: proto bla(--> Hash) { my $h = {*}; die("Hash expected, got " ~ $h.^name) if $h !~~ Hash; $h }; multi bla { { a => 1, b => 2 }}; bla.WHAT.say

[15:47] <camelia> rakudo-moar 00af9ce27: OUTPUT: «(Hash)␤»

[15:48] <Voldenet> ugh, this kind of works, you might also just do this:

[15:48] <Voldenet> m: proto bla(--> Hash) { {*}.Hash }; multi bla {a => 1, b => 2}; bla().WHAT.say

[15:48] <camelia> rakudo-moar 00af9ce27: OUTPUT: «(Hash)␤»

[15:48] <Voldenet> m: proto bla(--> Hash) { {*}.Hash }; multi bla { 42 }; bla().WHAT.say

[15:48] <camelia> rakudo-moar 00af9ce27: OUTPUT: «Odd number of elements found where hash initializer expected:␤Only saw: 42␤  in sub bla at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:49] <Voldenet> and it will kind of fail

[15:49] *** mcmillhj left
[15:49] <Voldenet> in a way you might not expect

[15:58] *** mcmillhj joined
[16:02] *** john_parr left
[16:02] *** mcmillhj left
[16:06] <titsuki> bisectable: say sprintf("%lf",10);

[16:06] <bisectable6> titsuki, Bisecting by output (old=2015.12 new=00af9ce) because on both starting points the exit code is 1

[16:06] <bisectable6> titsuki, bisect log: https://gist.github.com/7369e66bb57817b9244062a63d26f2ba

[16:06] <bisectable6> titsuki, (2016-03-16) https://github.com/rakudo/rakudo/commit/ad19288bdef16453df202758c7ff4d1088605184

[16:10] <titsuki> Why doesn't Per6 treat %lf same as %f?

[16:10] <titsuki> *Perl6

[16:12] *** mcmillhj joined
[16:13] <ZzZombo> then another unanswered question, why does this fail as well:

[16:13] <ZzZombo> m: class A is Hash[Int] {}

[16:13] <camelia> rakudo-moar 00af9ce27: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot resolve caller trait_mod:<is>(A, Hash, Array); none of these signatures match:␤    (Mu:U $child, Mu:U $parent)␤    (Mu:U $child, :$DEPRECATED!)␤    (Mu:U $type, :$rw!)␤    (Mu:U $type, :$…»

[16:14] <ZzZombo> m: class A is Hash[Int] {}

[16:14] <camelia> rakudo-moar 00af9ce27: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot resolve caller trait_mod:<is>(A, Hash, Array); none of these signatures match:␤    (Mu:U $child, Mu:U $parent)␤    (Mu:U $child, :$DEPRECATED!)␤    (Mu:U $type, :$rw!)␤    (Mu:U $type, :$…»

[16:14] <ZzZombo> damn

[16:14] <ZzZombo> m: class A {};class B is A[] {}

[16:14] <camelia> rakudo-moar 00af9ce27: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot resolve caller trait_mod:<is>(B, A, Array); none of these signatures match:␤    (Mu:U $child, Mu:U $parent)␤    (Mu:U $child, :$DEPRECATED!)␤    (Mu:U $type, :$rw!)␤    (Mu:U $type, :$nat…»

[16:16] *** mcmillhj left
[16:17] *** skids joined
[16:22] *** john_parr joined
[16:26] *** mcmillhj joined
[16:27] *** setty1 joined
[16:31] *** espadrine_ is now known as espadrine

[16:33] *** khw joined
[16:35] *** mcmillhj left
[16:39] *** ChoHag_ joined
[16:40] *** ChoHag left
[16:42] *** mcmillhj joined
[16:45] *** Ven`` left
[16:53] *** pecastro joined
[16:59] *** Rawriful joined
[16:59] <timotimo> ZzZombo: because "is Blah(123)" is syntax for giving parameters to a trait, just like "is repr('CStruct')" or so

[17:00] <timotimo> hm, is that actually what your question is about?

[17:01] <ZzZombo> That's bad, what I want is actually this:

[17:01] <ZzZombo> m: role R[|] {};class A is R['test'] {}

[17:01] <camelia> rakudo-moar 00af9ce27: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot resolve caller trait_mod:<is>(A, R, Array); none of these signatures match:␤    (Mu:U $child, Mu:U $parent)␤    (Mu:U $child, :$DEPRECATED!)␤    (Mu:U $type, :$rw!)␤    (Mu:U $type, :$nat…»

[17:01] <timotimo> mhm

[17:02] <timotimo> well, in that case you have to use "does" anyway

[17:02] <ZzZombo> but I want autopun it

[17:03] <ZzZombo> and then, I want users of my class to be able to write `A is MyParametricClass[]`.

[17:03] *** zakharyas joined
[17:03] <timotimo> m: role R[|] {};class A is (R['test']) {}

[17:04] <camelia> rakudo-moar 00af9ce27: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Invalid name␤at <tmp>:1␤------> 3role R[|] {};class A is7⏏5 (R['test']) {}␤»

[17:04] *** nexysno left
[17:14] *** pecastro_ joined
[17:15] *** zakharyas left
[17:15] *** pecastro left
[17:29] *** ChoHag_ left
[17:33] <AlexDaniel> titsuki: I don't know, perhaps open a ticket for that?

[17:34] *** lizmat_ joined
[17:36] *** lizmat left
[17:40] *** ChoHag joined
[17:42] *** Ven`` joined
[17:46] *** ChoHag left
[17:47] *** s0me0ne-unkn0wn joined
[17:48] <titsuki> AlexDaniel: I found that there aren't any tickets for this behavior. Should I issue a ticket?

[17:50] *** Kaiepi left
[17:50] *** isBEKaml joined
[17:51] *** s0me0n3-unkn0wn left
[18:00] <SmokeMachine> m: role R[$bla] {method bla {$bla}}; multi trait_mod:<is>(Mu:U \clazz, R, @args) { clazz.^add_parent: R[|@args].^pun }; class C is R[42] {}; say C.bla # it’s not beautiful, but...

[18:00] <camelia> rakudo-moar 00af9ce27: OUTPUT: «42␤»

[18:01] <SmokeMachine> ZzZombo: ☝️

[18:05] *** stmuk joined
[18:08] *** stmuk_ left
[18:13] <titsuki> AlexDaniel: ok. I issued: https://github.com/rakudo/rakudo/issues/1514

[18:14] <Geth> ¦ doc: 704f835499 | (JJ Merelo)++ | 2 files

[18:14] <Geth> ¦ doc: Fixes trailing whitespace problems

[18:14] <Geth> ¦ doc: 

[18:14] <Geth> ¦ doc: Mainly introduced by myself, actually. Refs #1766

[18:14] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/704f835499

[18:14] <Geth> ¦ doc: 4501e5bb46 | (JJ Merelo)++ | .travis.yml

[18:14] <Geth> ¦ doc: Merge branch 'master' of github.com:perl6/doc

[18:14] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4501e5bb46

[18:14] <Geth> ¦ doc: e01b3ca7bb | (JJ Merelo)++ | doc/Language/list.pod6

[18:14] <synopsebot> Link: https://doc.perl6.org/language/list

[18:14] <Geth> ¦ doc: Eliminates one warning

[18:14] <Geth> ¦ doc: 

[18:14] <Geth> ¦ doc: But this is style more than a bug. Actually, there were no errors in

[18:14] <Geth> ¦ doc: the code with the latest version of Rakudo, so this closes #1766

[18:14] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e01b3ca7bb

[18:16] *** natrys joined
[18:17] *** zeddy__k left
[18:26] *** g- left
[18:30] *** zakharyas joined
[18:37] *** Ven`` left
[18:39] *** g- joined
[18:52] <buggable> New CPAN upload: PDF-Class-0.0.7.tar.gz by WARRINGD https://cpan.metacpan.org/authors/id/W/WA/WARRINGD/Perl6/PDF-Class-0.0.7.tar.gz

[18:52] *** darutoko left
[19:09] <Geth> ¦ whateverable: 50f4a0204e | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Misc.pm6

[19:09] <Geth> ¦ whateverable: Escape | in markdown

[19:09] <Geth> ¦ whateverable: 

[19:09] <Geth> ¦ whateverable: Rhesolves #230 and #275, but there has to be a better way.

[19:09] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/50f4a0204e

[19:13] *** releasable6 left
[19:13] *** releasable6 joined
[19:13] *** ChanServ sets mode: +v releasable6

[19:19] *** Skarsnik joined
[19:19] *** Skarsnik left
[19:28] *** aindilis joined
[19:34] *** zakharyas left
[19:34] *** jstevens joined
[19:35] *** zakharyas joined
[19:36] *** zakharyas left
[19:36] *** zakharyas joined
[19:38] *** zakharyas left
[19:39] *** jstevens left
[19:41] *** Ven`` joined
[19:48] *** Kaiepi joined
[19:54] *** cdg joined
[19:55] *** andrzejku joined
[20:05] *** lelf joined
[20:15] *** sena_kun left
[20:21] *** Ven`` left
[20:28] *** cdg left
[20:29] *** cdg joined
[20:33] *** cdg left
[20:39] <lelf> (Inside grammar) can you pass a rule as an argument to another rule?

[20:40] <moritz> should be possible, but not trivial

[20:40] <moritz> let me cook up an example...

[20:42] <lelf> I'm totally lost in syntax for that :)

[20:43] <moritz> http://perlpunks.de/paste/show/5a80aafc.3a4f.1ae first shot

[20:44] <moritz> I guess rules are not optimized for higher-level programming

[20:50] <lelf> hmm

[20:55] *** TEttinger joined
[20:56] <lelf> I need to “parameterize” part of grammar (think, expr over Int / expr over one-letter variable). I can totally do that with grammar inheritance. Just searching for a less verbose way.

[20:57] <jnthn> self.^lookup('a') is a bit less to type

[20:58] <jnthn> And I think it could be called as <&param>

[20:58] <jnthn> If you want to use regex syntax in the target

[20:58] <moritz>     token x(&param) { <&param> }

[20:58] <moritz> dies with

[20:58] <moritz> Undeclared routine:

[20:58] <moritz>     param used at line 10

[20:59] <jnthn> :/

[20:59] <jnthn> What about just &param without the <...> around it?

[20:59] <moritz> doesn't error, but doesn't match either

[20:59] <jnthn> Or just $param in both places I think should work failing that

[21:00] <jnthn> Curious, wonder why

[21:00] <moritz> just $param works

[21:00] <moritz> http://perlpunks.de/paste/show/5a80aef0.75e5.3af works

[21:01] <moritz> parameterizing rules is something that I left out in my book

[21:01] <moritz> guess there's always options for v2 :-)

[21:02] <jnthn> Guess it's hard to cover everyting

[21:02] <jnthn> *everything

[21:02] <moritz> wasn't the goal either :)

[21:04] <jnthn> That sounds wise. :-)

[21:06] *** natrys left
[21:07] <lelf> Ha. I even tried that (token x($arg))... Now I know why it didn't work. Because I was trying to guess syntax for method lookup

[21:08] <moritz> m: grammar A { token x(&a) { &a } }

[21:08] <camelia> rakudo-moar 00af9ce27: ( no output )

[21:08] <moritz> m: grammar A { token x(&a) { <&a> } }

[21:08] <camelia> rakudo-moar 00af9ce27: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    a used at line 1␤␤»

[21:08] <moritz> that is a bug, right?

[21:09] <jnthn> Yeah, surely

[21:14] <moritz> I opened https://github.com/rakudo/rakudo/issues/1516

[21:17] *** pmurias joined
[21:19] <MasterDuke> committable6: releases grammar A { token x(&a) { <&a> } }

[21:19] <committable6> MasterDuke, ¦releases (27 commits): «04===SORRY!04=== Error while compiling /tmp/YN6tJVU8iB␤Undeclared routine:␤    a used at line 1␤␤ «exit code = 1»»

[21:25] *** Sgeo_ left
[21:35] <AlexDaniel> m: say 42

[21:35] <camelia> rakudo-moar 00af9ce27: OUTPUT: «42␤»

[21:35] <AlexDaniel> m:say 42

[21:35] <evalable6> AlexDaniel, rakudo-moar 00af9ce27: OUTPUT: «42␤»

[21:37] *** Sgeo joined
[21:38] *** zeddy_k joined
[21:48] *** Sgeo_ joined
[21:50] *** Sgeo__ joined
[21:50] *** Sgeo left
[21:52] *** Sgeo_ left
[22:15] *** evalable6 left
[22:15] *** evalable6 joined
[22:15] *** andrzejku left
[22:19] *** dct_ joined
[22:49] *** Thrush joined
[22:56] *** eroux left
[22:58] <Thrush> Hi, guys!  I was wondering if there's a certain module available in Rakudo Star, and if not, if it could be part of its standard modules.

[23:00] <Thrush> It's a module to convert filename wildcards from "*/*/*.txt" to a list of filenames that it matches.  Just like glob() in Perl5, Dir[] in Ruby, and the "import" module in Python.  I don't know of one in Perl6 that's standard.  Or is there one I don't know about?

[23:01] <Thrush> ...I meant:  ...and the "glob" module in Python.  (Not "import".)

[23:02] <MasterDuke> buggable: eco glob

[23:02] <AlexDaniel> Thrush: something like https://github.com/zostay/perl6-IO-Glob ?

[23:02] <buggable> MasterDuke, Found 3 results: IO::Glob, IO::Glob, Module::Does. See https://modules.perl6.org/s/glob

[23:03] <AlexDaniel> fwiw I don't see it in https://github.com/rakudo/star/blob/master/modules/MODULES.txt

[23:05] <Thrush> IO::Glob might be what I'm looking for, but neither IO::Glob, IO::Glob, nor Module::Does comes standard with the Rakudo Star I downloaded.  (Maybe it's out-of-date?)

[23:06] <AlexDaniel> no, it's not included in rakudo star

[23:06] <Thrush> I think it would be good to make it a standard module, since Perl is supposed to be a language that works well with file operations, and so an IO::Glob module would pretty much be expected.

[23:08] <geekosaur> I think the problem is globbing has inherent OS dependencies

[23:08] <Thrush> I know the people maintain Rakudo Star probably get lots of requests to make a module standard, but I think IO::Glob deserves to be part of every Perl 6 distribution.  Otherwise, Perl 6 lacks a very useful feature, present in just about every other scripting language (including Perl 5).

[23:09] <Thrush> geekosaur:  Maybe, but that doesn't stop the other languages from having something similar.

[23:10] <jnthn> Thrush: Perhaps file an issue on the Rakudo Star distro: https://github.com/rakudo/star/issues

[23:10] *** cdg joined
[23:11] <jnthn> (Since I don't think anyone who decides what goes into it is here right now)

[23:12] <Thrush> jnthn:  Thanks.  Do I need a github account to submit a New Issue?

[23:13] *** lelf left
[23:13] *** rindolf left
[23:13] <AlexDaniel> Thrush: for that particular repo yes

[23:14] *** evalable6 left
[23:14] *** evalable6 joined
[23:15] *** cdg left
[23:17] *** setty1 left
[23:20] *** pmurias left
[23:29] *** wamba left
[23:30] <Geth> ¦ whateverable: f908495295 | (Aleks-Daniel Jakimenko-Aleksejev)++ | t/lib/Testable.pm6

[23:30] <Geth> ¦ whateverable: Fix uptime test

[23:30] <Geth> ¦ whateverable: 

[23:30] <Geth> ¦ whateverable: I have no idea why this is still not committed. The change happened a

[23:30] <Geth> ¦ whateverable: long time ago.

[23:30] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/f908495295

[23:30] <Geth> ¦ whateverable: 177b77cb2e | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[23:30] <Geth> ¦ whateverable: Add a gazillion of ways to trigger Evalable

[23:30] <Geth> ¦ whateverable: 

[23:30] <Geth> ¦ whateverable: When camelia is not around.

[23:30] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/177b77cb2e

[23:30] *** evalable6 left
[23:33] *** evalable6 joined
[23:33] *** ChanServ sets mode: +v evalable6

[23:34] *** jstevens joined
[23:41] *** jstevens left
