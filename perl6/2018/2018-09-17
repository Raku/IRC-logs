[00:13] *** lizmat left
[00:13] *** graphene left
[00:14] *** lizmat joined
[00:14] *** [Sno] joined
[00:15] *** p6bannerbot sets mode: +v lizmat

[00:15] *** p6bannerbot sets mode: +v [Sno]

[00:26] *** mcmillhj joined
[00:26] *** Kaiepi left
[00:26] *** p6bannerbot sets mode: +v mcmillhj

[00:27] *** Kaiepi joined
[00:28] *** p6bannerbot sets mode: +v Kaiepi

[00:37] *** aborazmeh joined
[00:37] *** aborazmeh left
[00:37] *** aborazmeh joined
[00:37] *** p6bannerbot sets mode: +v aborazmeh

[00:38] *** p6bannerbot sets mode: +v aborazmeh

[00:40] *** ToddAndMargo joined
[00:40] *** p6bannerbot sets mode: +v ToddAndMargo

[00:41] <ToddAndMargo> Hi All,  I am confused over "defined".  `$ p6 'my Real $x; if $x.defined {say "Defined"}else{say "Undefined"};'`  Undefined   Didn't I just define it with `my Real`?

[00:42] <timotimo> it's holding an undefined value, which is what was sometimes called "null" or "a nil" on the mailing list

[00:43] <timotimo> m: my Real $x; dd $x

[00:43] <camelia> rakudo-moar a4db33e72: OUTPUT: «Real $x = Real␤»

[00:43] <timotimo> m: my Real $x; say $x

[00:43] <camelia> rakudo-moar a4db33e72: OUTPUT: «(Real)␤»

[00:43] <timotimo> m: my Real $x; print $x

[00:43] <camelia> rakudo-moar a4db33e72: OUTPUT: «Use of uninitialized value of type Real in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤»

[00:43] <timotimo> there you can see "uninitialized value"

[00:43] <timotimo> i'm going to bed right now, but i hope that helped a little already

[00:44] <timotimo> maybe the important bit is that .defined works on values, not on variables

[00:44] <timotimo> in fact, you can't even "talk" about a variable that wasn't declared with a "my" or something similar

[00:44] <timotimo> m: say $doesnotexist.defined

[00:44] <camelia> rakudo-moar a4db33e72: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$doesnotexist' is not declared␤at <tmp>:1␤------> 3say 7⏏5$doesnotexist.defined␤»

[00:44] <timotimo> it's already a syntax error

[00:44] <timotimo> on top of that, you can ask literal values if they are defined

[00:45] <timotimo> m: say 1.defined; say "".defined; say Str.defined; say Nil.defined

[00:45] <camelia> rakudo-moar a4db33e72: OUTPUT: «True␤True␤False␤False␤»

[00:45] <timotimo> good night!

[00:45] <ToddAndMargo> Oh man!

[00:45] <ToddAndMargo> Thank you

[00:51] *** ToddAndMargo left
[01:13] *** chenyf_ left
[01:13] *** atweiden-air_ joined
[01:16] *** atweiden-air_ left
[01:18] *** mcmillhj left
[01:21] *** molaf left
[01:29] *** epony left
[01:31] *** chenyf_ joined
[01:32] *** p6bannerbot sets mode: +v chenyf_

[01:34] *** molaf joined
[01:35] *** p6bannerbot sets mode: +v molaf

[01:40] *** mcmillhj joined
[01:40] *** p6bannerbot sets mode: +v mcmillhj

[01:43] *** rocket_fly joined
[01:43] *** p6bannerbot sets mode: +v rocket_fly

[01:43] <rocket_fly> Hello

[01:43] <rocket_fly> Perl6 does not support 'use warnings'... does anyone know why?

[01:44] *** ZzZombo left
[01:44] *** mcmillhj left
[01:47] <MasterDuke> rocket_fly: it's on by default. https://docs.perl6.org/language/5to6-nutshell#warnings

[01:49] <rocket_fly> O, thanks. I got it

[01:51] <rocket_fly> if $name (elem) @names : this syntax seems really cool! Anyone know its academic name? 

[01:59] *** mcmillhj joined
[02:00] *** p6bannerbot sets mode: +v mcmillhj

[02:03] *** mcmillhj left
[02:05] *** rocket_fly left
[02:08] *** mahafyi left
[02:08] *** kurahaupo left
[02:09] *** kurahaupo joined
[02:09] *** p6bannerbot sets mode: +v kurahaupo

[02:24] *** mcmillhj joined
[02:24] *** p6bannerbot sets mode: +v mcmillhj

[02:28] *** mcmillhj left
[02:30] *** hamhu3_ left
[02:31] *** hamhu3 joined
[02:32] *** p6bannerbot sets mode: +v hamhu3

[02:33] *** ZzZombo joined
[02:33] *** p6bannerbot sets mode: +v ZzZombo

[02:33] *** atweiden-air joined
[02:34] *** p6bannerbot sets mode: +v atweiden-air

[02:40] *** mcmillhj joined
[02:41] *** p6bannerbot sets mode: +v mcmillhj

[02:41] *** vrurg left
[02:42] <lucs> To declare a type synonym, for example to have a Name be like a Str, I can do ｢subset Name of Str;｣

[02:43] <lucs> Is that the idiomatic way?

[02:45] *** mcmillhj left
[02:46] <[Coke]> m: subset Name of Str; my Name $a = "Guillermo"; say $a; say $a.^name;

[02:46] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «Guillermo␤Str␤»

[02:46] <[Coke]> Aye.

[02:47] <[Coke]> m: subset Name of Str; my Name $a = "Guillermo"; say $a; say $a.^name; say $a.VAR.of;

[02:47] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «Guillermo␤Str␤(Name)␤»

[02:47] <Geth> ¦ doc: 79ab0d7929 | Coke++ | doc/Language/101-basics.pod6

[02:47] <Geth> ¦ doc: whitespace

[02:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/79ab0d7929

[02:47] <synopsebot> Link: https://doc.perl6.org/language/101-basics

[03:08] *** mcmillhj joined
[03:09] *** p6bannerbot sets mode: +v mcmillhj

[03:13] <labster> m: say Real.new()

[03:13] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «MoarVM panic: Memory allocation failed; could not allocate 122576 bytes␤»

[03:13] *** mcmillhj left
[03:13] <labster> I've also seen SIGSEGV and SIGBUS

[03:14] <labster> m: say Real.new()

[03:14] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «(signal SEGV)»

[03:15] *** defterade20 joined
[03:15] *** |oLa| joined
[03:15] *** defterade20 left
[03:16] *** p6bannerbot sets mode: +v |oLa|

[03:21] *** mcmillhj joined
[03:21] *** p6bannerbot sets mode: +v mcmillhj

[03:23] *** |oLa| left
[03:25] *** mcmillhj left
[03:28] <labster> rakudobug filed ^

[03:28] *** aborazmeh left
[03:31] *** notdaniel25 joined
[03:33] *** molaf left
[03:35] *** notdaniel25 left
[03:37] *** alexcf9 joined
[03:39] <labster> Man, this is fun, I haven't found a segfault in MoarVM in like 5 years!

[03:42] *** alexcf9 left
[03:48] *** mcmillhj joined
[03:49] *** p6bannerbot sets mode: +v mcmillhj

[03:53] *** mcmillhj left
[04:02] *** mcmillhj joined
[04:03] *** p6bannerbot sets mode: +v mcmillhj

[04:03] *** hamhu3_ joined
[04:04] *** p6bannerbot sets mode: +v hamhu3_

[04:06] *** mcmillhj left
[04:06] *** hamhu3 left
[04:08] *** hamhu3_ left
[04:08] *** hamhu3 joined
[04:09] *** p6bannerbot sets mode: +v hamhu3

[04:27] *** atweiden-air left
[04:36] *** rindolf joined
[04:37] *** p6bannerbot sets mode: +v rindolf

[04:38] *** mcmillhj joined
[04:39] *** p6bannerbot sets mode: +v mcmillhj

[04:43] *** mcmillhj left
[04:47] *** hamhu3 left
[04:49] *** kerframil left
[04:53] *** jmerelo joined
[04:53] *** p6bannerbot sets mode: +v jmerelo

[04:58] *** robertle left
[05:05] *** mcmillhj joined
[05:06] *** p6bannerbot sets mode: +v mcmillhj

[05:06] *** ufobat joined
[05:07] *** p6bannerbot sets mode: +v ufobat

[05:10] *** mcmillhj left
[05:11] *** hamhu3 joined
[05:11] *** hamhu3 left
[05:19] *** mcmillhj joined
[05:19] <Geth> ¦ doc: 70a123af53 | (JJ Merelo)++ | 3 files

[05:19] <Geth> ¦ doc: Improving presence of escape characters in the documentation

[05:19] <Geth> ¦ doc: 

[05:19] <Geth> ¦ doc: Suggestion for a new section has not been considered, since escape

[05:19] <Geth> ¦ doc: characters are standard and they behave in the standard way. However,

[05:19] <Geth> ¦ doc: some indexing and a list of all escape characters has been added. This

[05:19] <Geth> ¦ doc: closes #2313.

[05:19] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/70a123af53

[05:20] *** p6bannerbot sets mode: +v mcmillhj

[05:23] *** mcmillhj left
[05:29] *** psychoslave joined
[05:29] *** p6bannerbot sets mode: +v psychoslave

[05:36] *** noganex joined
[05:36] *** psychoslave left
[05:37] *** p6bannerbot sets mode: +v noganex

[05:38] *** psychoslave_ joined
[05:39] *** p6bannerbot sets mode: +v psychoslave_

[05:45] *** AlexDaniel left
[05:47] *** mcmillhj joined
[05:48] *** p6bannerbot sets mode: +v mcmillhj

[05:50] *** psychoslave_ left
[05:52] *** mcmillhj left
[06:00] *** zakharyas joined
[06:01] *** p6bannerbot sets mode: +v zakharyas

[06:09] *** hamhu3 joined
[06:09] *** p6bannerbot sets mode: +v hamhu3

[06:10] *** TisonKun joined
[06:10] *** p6bannerbot sets mode: +v TisonKun

[06:23] *** psychoslave joined
[06:24] *** p6bannerbot sets mode: +v psychoslave

[06:24] <Geth> ¦ doc: 0888dcc54f | (JJ Merelo)++ | doc/Language/objects.pod6

[06:24] <Geth> ¦ doc: Re-indexing of new as new (method)

[06:24] <Geth> ¦ doc: 

[06:24] <Geth> ¦ doc: I couldn't think of a better way to address #2309. Generated pages

[06:24] <Geth> ¦ doc: don't have an intro, and adding one by hacking the generator would be

[06:24] <synopsebot> Link: https://doc.perl6.org/language/objects

[06:24] <Geth> ¦ doc: a slippery slope. Order can probably be changed, but once again, this

[06:24] <Geth> ¦ doc: is not going to satisfy everyone; if it's hacked, same problem as

[06:24] <Geth> ¦ doc: above. If we want to define an order for generated routine pages, this

[06:24] <Geth> ¦ doc: <…commit message has 11 more lines…>

[06:24] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0888dcc54f

[06:27] *** sulvone5 joined
[06:32] *** sulvone5 left
[06:33] *** sena_kun joined
[06:34] *** p6bannerbot sets mode: +v sena_kun

[06:38] *** sena_kun left
[06:38] *** sena_kun joined
[06:39] *** p6bannerbot sets mode: +v sena_kun

[06:39] *** mcmillhj joined
[06:40] *** p6bannerbot sets mode: +v mcmillhj

[06:40] *** jmerelo left
[06:44] *** mcmillhj left
[06:44] *** Guest7570 joined
[06:49] *** Guest7570 left
[06:55] *** abraxxa joined
[06:56] *** p6bannerbot sets mode: +v abraxxa

[06:56] *** robertle joined
[06:57] *** abraxxa left
[06:57] *** p6bannerbot sets mode: +v robertle

[06:58] *** abraxxa joined
[06:59] *** p6bannerbot sets mode: +v abraxxa

[06:59] *** epony joined
[06:59] *** p6bannerbot sets mode: +v epony

[07:10] *** mcmillhj joined
[07:10] *** zakharyas left
[07:11] *** p6bannerbot sets mode: +v mcmillhj

[07:15] *** mcmillhj left
[07:20] *** z32324 joined
[07:25] *** z32324 left
[07:37] *** AlexDaniel joined
[07:37] *** p6bannerbot sets mode: +v AlexDaniel

[07:37] *** iLogic0 joined
[07:42] *** iLogic0 left
[07:45] *** mcmillhj joined
[07:45] *** p6bannerbot sets mode: +v mcmillhj

[07:46] *** avar left
[07:46] *** avar joined
[07:46] *** avar left
[07:46] *** avar joined
[07:46] *** p6bannerbot sets mode: +v avar

[07:47] *** p6bannerbot sets mode: +v avar

[07:49] *** mcmillhj left
[07:52] *** goksie joined
[07:52] *** p6bannerbot sets mode: +v goksie

[07:55] <lizmat> weekly: https://domm.plix.at/perl/2018_09_ctrl_alt_del_yef.html

[07:55] <notable6> lizmat, Noted!

[08:00] *** mcmillhj joined
[08:01] *** p6bannerbot sets mode: +v mcmillhj

[08:04] *** goksie left
[08:04] *** mcmillhj left
[08:06] *** dakkar joined
[08:07] *** p6bannerbot sets mode: +v dakkar

[08:17] *** B_RAD5 joined
[08:18] *** B_RAD5 was kicked by timotimo (B_RAD5))
[08:22] <rindolf> lizmat: hi

[08:22] <rindolf> lizmat: sup?

[08:22] <lizmat> almost awake

[08:23] <rindolf> lizmat: ah

[08:25] *** Ven` joined
[08:26] *** p6bannerbot sets mode: +v Ven`

[08:30] *** furrymcgee26 joined
[08:31] *** furrymcgee26 left
[08:32] *** mcmillhj joined
[08:32] *** p6bannerbot sets mode: +v mcmillhj

[08:33] *** kurahaupo left
[08:33] *** kurahaupo joined
[08:34] *** p6bannerbot sets mode: +v kurahaupo

[08:35] *** zakharyas joined
[08:36] *** p6bannerbot sets mode: +v zakharyas

[08:36] *** mcmillhj left
[08:44] *** scimon joined
[08:44] *** p6bannerbot sets mode: +v scimon

[09:03] *** mcmillhj joined
[09:04] *** p6bannerbot sets mode: +v mcmillhj

[09:05] *** zakharyas left
[09:08] *** mcmillhj left
[09:23] *** mcmillhj joined
[09:24] *** p6bannerbot sets mode: +v mcmillhj

[09:27] *** mcmillhj left
[09:30] *** Shadowcrit4 joined
[09:33] *** Shadowcrit4 left
[09:37] *** sarna joined
[09:37] *** p6bannerbot sets mode: +v sarna

[09:38] <sarna> hey, how can I split an array into smaller ones? ie <1 2 3 4 5 6>foo(3) -> [[1,2,3],[4,5,6]]

[09:38] <sarna> forgot a period :(

[09:40] <sarna> found it! it's called batch :^)

[09:46] <TisonKun> sure, it is a wrapper of rotor

[09:46] <TisonKun> m: <1 2 3 4 5 6>.rotor: 3

[09:46] <camelia> rakudo-moar 0a45ffbc6: ( no output )

[09:46] <TisonKun> m: say <1 2 3 4 5 6>.rotor: 3

[09:46] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «((1 2 3) (4 5 6))␤»

[09:47] <TisonKun> http://blogs.perl.org/users/zoffix_znet/2016/01/perl-6-rotor-the-king-of-list-manipulation.html

[09:47] <TisonKun> but I wonder if there is a partition such as LIST.partition(COND) like <1 2 3>.partition: * > 1 # => ((2, 3), (1,))

[09:52] <sarna> thanks TisonKun 

[09:53] *** mcmillhj joined
[09:53] *** p6bannerbot sets mode: +v mcmillhj

[09:54] <buggable> New CPAN upload: Array-Agnostic-0.0.3.tar.gz by ELIZABETH http://modules.perl6.org/dist/Array::Agnostic:cpan:ELIZABETH

[09:57] *** mcmillhj left
[09:57] <jnthn> TisonKun: See categorize and classify

[10:02] *** ggoebel left
[10:02] *** domidumont joined
[10:03] *** p6bannerbot sets mode: +v domidumont

[10:03] <ZzZombo> TisonKun: try `classify` or the related method.

[10:04] *** ZzZombo left
[10:04] <TisonKun> say <1 2 3 4 5 6>.classify: * > 3

[10:04] <evalable6> TisonKun, rakudo-moar 0a45ffbc6: OUTPUT: «{False => [1 2 3], True => [4 5 6]}␤»

[10:05] <TisonKun> powerful ^_^, thanks jnthn ZzZombo

[10:09] *** lizmat left
[10:11] *** mcmillhj joined
[10:11] *** psychoslave left
[10:11] *** hamhu3_ joined
[10:12] *** p6bannerbot sets mode: +v mcmillhj

[10:12] *** p6bannerbot sets mode: +v hamhu3_

[10:15] *** hamhu3 left
[10:16] *** mcmillhj left
[10:17] *** ggoebel joined
[10:18] *** p6bannerbot sets mode: +v ggoebel

[10:19] <sarna> is there something like .map but eager?

[10:19] <sarna> I know there's a good old for loop but

[10:20] <TisonKun> ask for the value would eagerly do it, I think

[10:21] *** lizmat joined
[10:21] <jnthn> Just call .eager on the result of map

[10:21] <jnthn> Though if it's in sink (void) context it'll be eagerly evaluated anyway

[10:21] <jnthn> In fact, in that case it just discards the results, so it's better than eager, which would have to remember them

[10:22] *** p6bannerbot sets mode: +v lizmat

[10:23] <sarna> oh!

[10:25] <TisonKun> forget our .eager XD

[10:26] *** dogbert11 joined
[10:26] <sarna> I love these p6 niceties

[10:26] *** p6bannerbot sets mode: +v dogbert11

[10:28] <TisonKun> agree. part of the passion and fun of play p6 is that when you get gradually familiar with it, things become awesome and works become elegant.

[10:30] <sarna> :D

[10:33] *** TisonKun left
[10:36] <sarna> what if I want to split a list into x smaller lists?

[10:36] *** mcmillhj joined
[10:37] <sarna> is there an elegant solution to that? I doubt it, but it's p6 after all

[10:37] <lizmat> sarna: batch by .elems / x ?

[10:37] *** p6bannerbot sets mode: +v mcmillhj

[10:40] <sarna> lizmat: I have "trailing" elements because it doesn't divide evenly

[10:41] <lizmat> (.end / x ) + 1 

[10:41] *** mcmillhj left
[10:42] <sarna> well yeah, but then the last group is like 2 elements, while the others are 5+

[10:43] <lizmat> well, that's not a programming issue, but a logic issue :-)

[10:43] <sarna> :D fair enough

[10:43] <lizmat> of mathematical I guess

[10:44] <buggable> New CPAN upload: Array-Sparse-0.0.2.tar.gz by ELIZABETH http://modules.perl6.org/dist/Array::Sparse:cpan:ELIZABETH

[10:48] *** daxim left
[10:48] *** mcmillhj joined
[10:49] *** p6bannerbot sets mode: +v mcmillhj

[10:52] *** mcmillhj left
[10:53] *** daxim joined
[10:53] *** p6bannerbot sets mode: +v daxim

[10:54] *** pyrimidi_ joined
[10:54] *** p6bannerbot sets mode: +v pyrimidi_

[10:56] *** psychoslave joined
[10:56] *** p6bannerbot sets mode: +v psychoslave

[10:58] *** MasterDuke left
[11:04] *** mcmillhj joined
[11:05] *** p6bannerbot sets mode: +v mcmillhj

[11:05] <sarna> m: say (0..1).pick;

[11:05] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «1␤»

[11:06] <sarna>  m: say 0..1.pick;

[11:06] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «0..1␤»

[11:06] <sarna> why is the second one like this?

[11:06] *** Ulrar23 joined
[11:07] <sena_kun> precedence

[11:07] <sena_kun> second one is, in reality, 0..(1.pick), which is `0..1`.

[11:08] <sena_kun> sarna, https://docs.perl6.org/language/traps#Ranges_and_precedence

[11:09] *** mcmillhj left
[11:09] <sarna> oh! thanks sena_kun

[11:10] <sena_kun> np

[11:10] <lizmat> m: say 0..1 .pick  # another way to get around this precedence issue

[11:10] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «0..1␤»

[11:10] <lizmat> huh?

[11:10] <lizmat> guess not

[11:11] <lizmat> m: say for 0..1 .pick

[11:11] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of bare "say"; in Perl 6 please use .say if you meant to call it as a method on $_, or use an explicit invocant or argument, or use &say to refer to the function as a noun␤at <tmp>:1…»

[11:11] <lizmat> m: .say for 0..1 .pick

[11:11] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «0␤1␤»

[11:11] *** Ulrar23 left
[11:11] <lizmat> ok, forget about that  :-)

[11:18] *** mcmillhj joined
[11:18] *** p6bannerbot sets mode: +v mcmillhj

[11:21] *** albertferrico joined
[11:21] *** p6bannerbot sets mode: +v albertferrico

[11:21] <albertferrico> good afternoon everyone

[11:22] *** mcmillhj left
[11:23] <sarna> o/

[11:23] <sarna> lizmat: haha, ok

[11:23] *** ZzZombo joined
[11:23] *** p6bannerbot sets mode: +v ZzZombo

[11:27] *** sarna left
[11:28] *** DeSigna18 joined
[11:28] *** DeSigna18 left
[11:36] *** araraloren joined
[11:37] *** p6bannerbot sets mode: +v araraloren

[11:37] <araraloren> o|

[11:44] *** mcmillhj joined
[11:45] *** p6bannerbot sets mode: +v mcmillhj

[11:46] *** Zoffix joined
[11:46] *** p6bannerbot sets mode: +v Zoffix

[11:46] *** Zoffix left
[11:49] *** mcmillhj left
[11:50] *** albertferrico left
[11:54] <buggable> New CPAN upload: Array-Agnostic-0.0.4.tar.gz by ELIZABETH http://modules.perl6.org/dist/Array::Agnostic:cpan:ELIZABETH

[12:03] *** mcmillhj joined
[12:04] *** Summertime left
[12:04] *** p6bannerbot sets mode: +v mcmillhj

[12:05] *** Summertime joined
[12:05] *** p6bannerbot sets mode: +v Summertime

[12:08] *** mcmillhj left
[12:14] *** hamhu3_ left
[12:15] *** hamhu3 joined
[12:16] *** p6bannerbot sets mode: +v hamhu3

[12:20] *** DarthGandalf joined
[12:20] *** p6bannerbot sets mode: +v DarthGandalf

[12:20] *** molaf joined
[12:21] *** p6bannerbot sets mode: +v molaf

[12:22] *** robertle left
[12:24] <buggable> New CPAN upload: Array-Sparse-0.0.3.tar.gz by ELIZABETH http://modules.perl6.org/dist/Array::Sparse:cpan:ELIZABETH

[12:33] *** pmurias joined
[12:33] *** p6bannerbot sets mode: +v pmurias

[12:33] *** sauvin is now known as Sauvin

[12:35] *** TisonKun joined
[12:35] *** p6bannerbot sets mode: +v TisonKun

[12:35] *** mcmillhj joined
[12:36] *** p6bannerbot sets mode: +v mcmillhj

[12:40] *** mcmillhj left
[12:41] *** AlexDaniel left
[12:54] *** mcmillhj joined
[12:54] *** p6bannerbot sets mode: +v mcmillhj

[12:58] *** mcmillhj left
[13:00] *** mcmillhj joined
[13:00] *** p6bannerbot sets mode: +v mcmillhj

[13:01] *** hamhu3 left
[13:02] *** hamhu3 joined
[13:03] *** p6bannerbot sets mode: +v hamhu3

[13:03] *** hamhu3 left
[13:03] *** hamhu3 joined
[13:04] <TisonKun> it might be naughty 0..1 .pick different from 0..1.pick

[13:04] *** p6bannerbot sets mode: +v hamhu3

[13:04] <TisonKun> people always think whitespace is no significant :-)

[13:07] <timotimo> there are multiple cases in perl6 where whitespace actually is significant

[13:07] <timotimo> m: sub if($a) { say "this is if" }; if(1)

[13:07] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «this is if␤»

[13:07] <timotimo> m: sub if($a) { say "this is if" }; if (1)

[13:07] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3sub if($a) { say "this is if" }; if (1)7⏏5<EOL>␤    expecting any of:␤        block or pointy block␤»

[13:11] *** molaf left
[13:12] *** dogbert11 left
[13:12] *** robertle joined
[13:13] *** p6bannerbot sets mode: +v robertle

[13:15] *** vrurg joined
[13:16] <sena_kun> m: my regex escaped { '\"' }; say '"foo\"bar"' ~~ / '"' (<escaped> | <-["]>)+ '"' /

[13:16] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «｢"foo\"bar"｣␤ 0 => ｢f｣␤ 0 => ｢o｣␤ 0 => ｢o｣␤ 0 => ｢\"｣␤  escaped => ｢\"｣␤ 0 => ｢b｣␤ 0 => ｢a｣␤ 0 => ｢r｣␤»

[13:16] *** p6bannerbot sets mode: +v vrurg

[13:16] <sena_kun> is there a better approach if I want to get a line in double quotes but with `\"` escaping?

[13:18] <sena_kun> m: my regex escaped { '\"' }; say '"foo\"bar"' ~~ / '"' [<escaped> | <-["]>]+ '"' /

[13:18] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «｢"foo\"bar"｣␤ escaped => ｢\"｣␤»

[13:23] *** Sauvin left
[13:25] <TisonKun> m: "foo\"bar".perl

[13:25] <camelia> rakudo-moar 0a45ffbc6: ( no output )

[13:25] <TisonKun> m: say "foo\"bar".perl

[13:25] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «"foo\"bar"␤»

[13:25] *** TisonKun left
[13:25] *** Sauvin joined
[13:25] *** p6bannerbot sets mode: +v Sauvin

[13:25] *** TisonKun joined
[13:25] *** p6bannerbot sets mode: +v TisonKun

[13:26] <sena_kun> oh, sorry, I meant "match it from raw text as a valid single line" instead of abstract "get" I've used.

[13:29] <TisonKun> say '"foo\"bar"' ~~ / \".*\" /

[13:29] <evalable6> TisonKun, rakudo-moar 0a45ffbc6: OUTPUT: «｢"foo\"bar"｣␤»

[13:30] *** Sauvin left
[13:31] *** psychoslave left
[13:31] <sena_kun> m: say '"foo"bar"' ~~ / \".*\" /

[13:31] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «｢"foo"bar"｣␤»

[13:31] <sena_kun> no escaping. :S

[13:32] *** APic joined
[13:32] <TisonKun> is there a true negative example to make topic clearly?

[13:33] *** mahafyi joined
[13:33] <TisonKun> '"foo"bar"' ~~ REGEX should give "foo\"bar" ?

[13:33] *** p6bannerbot sets mode: +v APic

[13:33] <sena_kun> give me a second...

[13:33] <jnthn> See JSON::Tiny

[13:33] <jnthn> And how it matches strings with escapes

[13:33] <sena_kun> oh!

[13:33] <jnthn> And do something like that :)

[13:33] *** p6bannerbot sets mode: +v mahafyi

[13:33] * sena_kun stops to abuse irc

[13:34] <TisonKun> jnthn you know the background :)

[13:34] <sena_kun> TisonKun, just ignore me next time. :)

[13:35] <araraloren> It's fine, sometime we may don't understand the question

[13:39] *** Sauvin joined
[13:39] *** p6bannerbot sets mode: +v Sauvin

[13:57] *** chenyf_ left
[14:01] <samcv> i'm having an issue catching an exception

[14:02] <samcv> here it is throwing https://gist.github.com/samcv/0a76f1d5b2ef4a8cc4e22dd9c8d9c3f6#file-gistfile1-txt-L13 but the try block doesn't seem to allow the script to keep running

[14:09] <Roamer`> samcv, are you sure that it's the .slurp that is throwing the exception and not the open itself?  If it's open, then in the CATCH block $fh is not a file, but a Failure, and you can't really call $fh.close or even $fh.opened

[14:12] <samcv> Roamer`: yeah i am

[14:12] *** hamhu3_ joined
[14:12] <samcv> i tried lives-ok instead now, and that seems to work

[14:12] <samcv> though i woud like to know what's going on that is making the try not work

[14:12] *** p6bannerbot sets mode: +v hamhu3_

[14:13] <samcv> Roamer`: this works https://gist.github.com/fdab5d5b1d0a11ccd5e937fc529337de

[14:13] *** Zoffix joined
[14:13] *** p6bannerbot sets mode: +v Zoffix

[14:13] <Zoffix> samcv: what's the exception that isn't being caught?

[14:14] *** hamhu3 left
[14:15] <Zoffix> Roamer`: `try` fatalizes Failures

[14:15] <Zoffix> (or more precisely: it enables `use fatal` pragma, but you can turn it off if you want)

[14:15] <Zoffix> samcv: you're missing the `default` branch in your CATCH

[14:16] <Zoffix> So the exeption keeps on trucking

[14:16] <samcv> ah ok

[14:16] *** chenyf_ joined
[14:17] <Zoffix> samcv: also parse-names is deprecated. It's called uninames now

[14:17] *** araraloren left
[14:17] *** p6bannerbot sets mode: +v chenyf_

[14:17] *** hamhu3_ left
[14:17] *** araraloren joined
[14:18] *** hamhu3 joined
[14:18] *** p6bannerbot sets mode: +v araraloren

[14:18] *** p6bannerbot sets mode: +v hamhu3

[14:20] *** Zoffix left
[14:20] *** kensanata joined
[14:21] *** p6bannerbot sets mode: +v kensanata

[14:21] *** chenyf_ left
[14:31] <kensanata> I want to write code where the user can pick a storage backend using an environment variable. My idea: all the modules use a Storage module; this is an object which as a private attribute with value Storage::File handling get-page and put-page. What's the idiomatic way of doing this? I found https://design.perl6.org/S12.html#Delegation but that doesn't seem to work.

[14:32] <kensanata> Where "doesn't work" means "perl6 -Ilib -c lib/Storage.pm6" gives me an error at the "handles" keyword.

[14:36] <[Coke]> those design docs are not current.

[14:37] <[Coke]> https://docs.perl6.org/routine/handles is more likely to work.

[14:37] <kensanata> Yeah, I saw the note at the top. 

[14:38] <kensanata> Yeah, this looks good. Will give it a try!

[14:38] *** chenyf_ joined
[14:39] *** p6bannerbot sets mode: +v chenyf_

[14:45] <robertle> unlink() on IO::Path apparently only came in around 2014.10, does anyone know whether there was a good way to delete a file before that?

[14:51] <moritz> robertle: unlink as a function, with a string argument?

[14:52] <[Coke]> that's already before christmas.

[14:59] <robertle> moritz: thanks, I did not know that existed!

[15:01] *** Actualeyes joined
[15:02] *** p6bannerbot sets mode: +v Actualeyes

[15:03] <kensanata> Is there a way to specify a class using a string? Something to put around the environment variable in here: class A {method m(){say "m"}}; class C {has $.delegate handles <m> = %*ENV<STORAGE>.new()}; C.new.m;

[15:03] <kensanata> Or a better way to do this, of course.

[15:05] *** jmerelo joined
[15:05] <robertle> kensanata: I ahve done stuff like "require ::($module-name)"

[15:05] *** p6bannerbot sets mode: +v jmerelo

[15:06] <[Coke]> m: my $a = "Int"; ::($a).new.^name.say

[15:06] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «Int␤»

[15:07] <kensanata> Thanks!

[15:09] <pmurias> does it make sense to call the rakudo.js executable the npm package will install something other than perl6-js?

[15:10] <pmurias> consistency and calling the perl6-js seems like the sanest option but know is the time to make the choice ;)

[15:17] <Geth> ¦ doc: 1be2f24de8 | (Will "Coke" Coleda)++ | doc/Language/objects.pod6

[15:17] <Geth> ¦ doc: whitespace

[15:17] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1be2f24de8

[15:17] <synopsebot> Link: https://doc.perl6.org/language/objects

[15:19] <[Coke]> lizmat: some docs test failures: A few things like "method STORE (::?CLASS:D: values, :$initialize)" where values isn't defined

[15:19] <[Coke]> $ xt/examples-compilation.t doc/Type/Positional.pod6 doc/Language/subscripts.pod6 doc/Type/Associative.pod6 # this shows the current errors

[15:26] *** qiqi joined
[15:27] *** p6bannerbot sets mode: +v qiqi

[15:31] *** c_smith4 joined
[15:32] *** diakopter sets mode: +b *!*c_smith@112.197.201.*

[15:32] *** c_smith4 was kicked by diakopter (c_smith4))
[15:35] *** qiqi left
[15:35] *** lizmat left
[15:39] *** TisonKun left
[15:50] *** Kaypie joined
[15:50] *** Kaiepi left
[15:51] *** p6bannerbot sets mode: +v Kaypie

[15:56] *** abraxxa left
[16:08] *** araraloren left
[16:08] *** chenyf_ left
[16:11] *** Ven` left
[16:18] *** SHODAN joined
[16:18] *** p6bannerbot sets mode: +v SHODAN

[16:19] *** chenyf_ joined
[16:20] *** p6bannerbot sets mode: +v chenyf_

[16:29] *** Welcome joined
[16:29] *** scimon left
[16:31] *** dakkar left
[16:32] <tyil> what would be a nice solution to change a single character in a string at a given position?

[16:34] *** Welcome left
[16:38] <tobs> tyil: there's substr-rw (but I don't think it looks too nice)

[16:38] <tobs> m: ($_ = "tyil").substr-rw(1,1) = pick 1, 'a'..'z' and .say

[16:38] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «tuil␤»

[16:40] *** kurahaupo left
[16:41] *** kurahaupo joined
[16:41] *** p6bannerbot sets mode: +v kurahaupo

[16:42] *** robertle left
[16:46] <tyil> not bad at all

[16:47] <tyil> my solution was heading into an s/// regex

[16:52] *** Zoffix joined
[16:52] *** p6bannerbot sets mode: +v Zoffix

[16:53] <Zoffix> .tell [Coke] FYI the "grant ideas" is 404 link on this page: http://news.perlfoundation.org/2018/09/call-for-grant-proposals-septe-2.html  might be this page is what it's meant to be: https://www.perlfoundation.org/grant-ideas.html

[16:53] <yoleaux> Zoffix: I'll pass your message to [Coke].

[16:53] <Zoffix> m: say "--------------------".subst: /.**12 <( ./, "Z"

[16:53] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «------------Z-------␤»

[16:53] *** Zoffix left
[16:54] *** ExtraCrispy left
[16:55] <tyil> hmm, this is less neat, if I put `substr-rw($string, $position, 1) = $character` as the sub body, its return value is $character, not the updated string

[16:55] <timotimo> yeah, that's the return value of assignment

[16:56] <ofperfection[m]> Not sure if this is what you're looking to do

[16:56] <timotimo> otherwise you wouldn't be able to do something like substr-rw($string, $position, 1) .= uc for example

[16:56] <tyil> I am sure I'm looking to replace a character at a given position :p

[16:57] <tyil> timotimo: ah, that makes sense

[16:57] <timotimo> m: "foobarbaz".comb.splice(3,1,"X").join.say

[16:57] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «Cannot resolve caller splice(Seq, Int, Int, Str); Routine does not have any candidates. Is only the proto defined?␤  in block <unit> at <tmp> line 1␤␤»

[16:57] <timotimo> m: "foobarbaz".comb.list.splice(3,1,"X").join.say

[16:57] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «Cannot resolve caller splice(List, Int, Int, Str); Routine does not have any candidates. Is only the proto defined?␤  in block <unit> at <tmp> line 1␤␤»

[16:57] <timotimo> m: "foobarbaz".comb.Array.splice(3,1,"X").join.say

[16:57] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «b␤»

[16:57] <ofperfection[m]> my $string = "banana"; my@seq = $string.comb; @seq[0] = "z"; say @seq [z a n a n a]

[16:57] <timotimo> ah, that also returns the parts cut out

[16:58] <ofperfection[m]> you could encapsulate that in a subroutine and run it against $_

[16:58] <ofperfection[m]> unless I'm wrong, since I'm a big 'ol noob

[16:59] <timotimo> i've wanted an operator for a while that signifies a return value for the outer parenthesis or something

[17:00] <timotimo> m: my $stash; sub store($a) { $stash = $a; $a }; sub recall($a) { $stash }; "foobarbaz".comb.Array.&store.splice(3,1,"X").&recall.join.say

[17:00] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «fooXarbaz␤»

[17:01] <timotimo> hmm

[17:01] <timotimo> m: sub store($a, $b is rw) { $b = $a; $a }; sub recall($a, $b) { $b }; "foobarbaz".comb.Array.&store(my $x).splice(3,1,"X").&recall($x).join.say

[17:01] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «fooXarbaz␤»

[17:01] <timotimo> cool.

[17:04] <timotimo> a little postcircumfix operator would be neat for that

[17:06] <timotimo> m: sub postcircumfix:<⎡ ⎤>($a, $b is rw) { $b = $a; $a }; sub postcircumfix:<⎣ ⎦>($a, $b) { $b }; "foobarbaz".comb.Array⎡my $x⎤.splice(3,1,"X")⎣$x⎦.join.say

[17:06] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «fooXarbaz␤»

[17:06] <timotimo> that's not even half bad

[17:06] <timotimo> i wish i could omit the "my", but that'd require a full-on slang

[17:07] <timotimo> or perhaps actually a macro as we currently have it would do?!

[17:07] <timotimo> masakro?

[17:08] <timotimo> aha, i've got one better

[17:09] <timotimo> m: sub postcircumfix:<⦑ ⦒>($a, &code) { $b = $a; code($a); $b }; "foobarbaz".comb.Array⦑*.splice(3,1,"X")⦒.join.say

[17:09] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$b' is not declared␤at <tmp>:1␤------> 3sub postcircumfix:<⦑ ⦒>($a, &code) { 7⏏5$b = $a; code($a); $b }; "foobarbaz".com␤»

[17:10] <timotimo> m: sub postcircumfix:<⦑ ⦒>($a, &code) { my $b = $a; code($a); $b }; "foobarbaz".comb.Array⦑*.splice(3,1,"X")⦒.join.say

[17:10] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «fooXarbaz␤»

[17:10] <timotimo> hell yeah

[17:11] <timotimo> ofperfection[m], tyil, how do you like this?

[17:11] *** chenyf_ left
[17:12] *** Possum left
[17:13] <timotimo> i wonder why i didn't think of this the last time i wanted this

[17:13] *** mcmillhj left
[17:13] *** di0_27 joined
[17:13] *** diakopter sets mode: +b *!*di0_@*.hokkaido.ocn.ne.jp

[17:13] *** di0_27 was kicked by diakopter (di0_27))
[17:14] <ofperfection[m]> How do i like what?

[17:15] <tobs> that single operator form is indeed cool

[17:15] <ofperfection[m]> The last solutoin?

[17:15] <ofperfection[m]> sub postcircumfix i mean

[17:19] <timotimo> yeah

[17:19] <timotimo> i'm a little proud of it

[17:19] <ofperfection[m]> I always enjoy learning new things in solutions, I'm reading up on circumfixes

[17:22] <tobs> I have a multi sub f($x) that supports multiple algorithms. Is `multi sub f($x, :$algo1 where *.so)` the most declarative way to write the signature? I tried `:$algo1!` first but that is, of course, eligible for f($x, :!algo1)

[17:22] <tobs> it's the tiniest of issues but I thought I ask anyway

[17:23] <timotimo> m: multi sub one($a, :flag!) { say "flag is set" }; multi sub one($a, :other!) { say "other is set" }; multi sub one($a) { say "fallback" }; one(1, :flag); one(2, :other); one(3)

[17:23] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> 3multi sub one($a, :7⏏5flag!) { say "flag is set" }; multi sub ␤»

[17:23] <[Coke]> zoffix, even better, *all* those links are dead now after the site refresh. *sigh*

[17:23] <yoleaux> 16:53Z <Zoffix> [Coke]: FYI the "grant ideas" is 404 link on this page: http://news.perlfoundation.org/2018/09/call-for-grant-proposals-septe-2.html  might be this page is what it's meant to be: https://www.perlfoundation.org/grant-ideas.html

[17:23] <timotimo> m: multi sub one($a, :flag(True)!) { say "flag is set" }; multi sub one($a, :other(True)!) { say "other is set" }; multi sub one($a) { say "fallback" }; one(1, :flag); one(2, :other); one(3)

[17:23] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> 3multi sub one($a, :flag(7⏏5True)!) { say "flag is set" }; multi sub␤»

[17:24] <timotimo> well, not like that, clearly

[17:24] *** kurahaupo left
[17:24] <timotimo> so yeah, it hink the "where *.so" is the right one if you want to allow passing False for that, too

[17:27] <tobs> alright, having written it a few times, it already looks intuitive to me

[17:29] <[Coke]> zoffix, fixed 'em, thanks for catching that

[17:29] <tobs> Signatures have surprisingly many features. I'd buy a small, say apress, book about them if one were being considered to be written :-)

[17:43] *** Rhonda16 joined
[17:45] *** Rhonda16 left
[17:50] *** mcmillhj joined
[17:50] *** notwa9 joined
[17:50] *** notwa9 was kicked by timotimo (notwa9))
[17:50] *** p6bannerbot sets mode: +v mcmillhj

[17:51] *** epony left
[17:53] <timotimo> weekly: https://twitter.com/loltimo/status/1041746891426463744

[17:53] <notable6> timotimo, Noted!

[17:53] <timotimo> i hope i'm not too late with this :)

[17:55] <ofperfection[m]> The comments really helped clarify for me

[17:57] <timotimo> \o/

[17:59] *** pecastro joined
[18:00] *** p6bannerbot sets mode: +v pecastro

[18:09] *** lizmat joined
[18:10] *** p6bannerbot sets mode: +v lizmat

[18:14] *** domidumont left
[18:21] *** molaf joined
[18:22] *** p6bannerbot sets mode: +v molaf

[18:30] *** pyrimidi_ is now known as pyrimidine

[18:31] *** ccc joined
[18:32] *** p6bannerbot sets mode: +v ccc

[18:35] <ccc> I'd like to go into perl6 REPL and require a file that is not a module (or a unit of any kind)and be able to use it's definitions and bindings. Do these get put into a special namespace?

[18:36] <tyil> timotimo: thats nice (sorry, was afk for a bit)

[18:37] <timotimo> <3

[18:37] <tyil> I like it more than the other solutions I had so far

[18:37] *** uzl joined
[18:37] <timotimo> if you find a better unicode character, maybe one that's in typical compose files for example, that'd be cool

[18:37] <timotimo> i could imagine an up arrow and a down arrow

[18:37] <timotimo> maybe even an up-right and a down-right arrow

[18:37] *** p6bannerbot sets mode: +v uzl

[18:38] <timotimo> experts will make it a whole ballistic curve using a comment line above the code that connects both arrows

[18:38] *** sotona joined
[18:38] *** p6bannerbot sets mode: +v sotona

[18:40] *** jmerelo left
[18:43] <ccc> The REPL is nice; it's helping me try out of p6 concepts, but I have to type out or paste everything in it.

[18:44] <buggable> New CPAN upload: Image-Libexif-0.0.3.tar.gz by FRITH http://modules.perl6.org/dist/Image::Libexif:cpan:FRITH

[18:46] <uzl> hi, #perl6!

[18:46] <uzl> m: (Array.^methods.gist).words.grep: 'sum'

[18:46] <camelia> rakudo-moar 0a45ffbc6: ( no output )

[18:46] <uzl> m: say (Array.^methods.gist).words.grep: 'sum'

[18:46] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «(sum)␤»

[18:47] <ccc> m: say CORE::.keys

[18:47] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «(FileChanged Signally &signal &RETURN-LIST &tan Stash &prompt &sin &postfix:<--> &prefix:<not> &atomic-fetch-inc SIGPROF &roots &infix:<+&> 𝑒 &sleep-until Macro &prefix:<so> &infix:<≤> Exception &infix:<~|> &asin &callframe &prefix:<temp> Cursor …»

[18:47] <ccc> m: say MY::.keys

[18:47] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «($! $=pod $_ $¢ $=finish !UNIT_MARKER GLOBALish EXPORT $?PACKAGE ::?PACKAGE $/)␤»

[18:47] <uzl> m: say (Array.^methods.gist).words.grep: 'push'

[18:47] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «(push)␤»

[18:48] <uzl> Is there a more elegant way to find out if a type has a certain method? I'm struggling to come with something nicer.

[18:49] <ccc> uzl: Do you use the perl6 REPL a lot?

[18:50] <jnthn> m: say ?Array.can('push')

[18:50] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «True␤»

[18:50] <uzl> ccc: whenever I'm testing out small code snippets

[18:50] <[Coke]> ccc: EVALFILE lets you run a file.

[18:51] <ccc> EVALFILE?

[18:51] <[Coke]> but it just runs it, I don't think it'll make those items available at the REPL scope

[18:51] <ccc> is that a command or sub?

[18:51] <[Coke]> m: EVALFILE "foo.p6"

[18:51] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «Failed to open file /home/camelia/foo.p6: No such file or directory␤  in block <unit> at <tmp> line 1␤␤»

[18:52] <ccc> That's a real bummer because perl-debug-m doesn't work for me

[18:52] <ccc> and to test certain ideas requires a lot of typing before you get to the punch line

[18:53] <ccc> it would be nice to have an custom set of definitions pre-loaded into the REPL

[18:55] <ccc> like some option the the perl6 command like --include=startup.p6 that only works in REPL mode that acts like you just typed all that was in startup.p6

[18:55] <El_Che> ccc: you actually want a step by step debugger?

[18:56] <El_Che> like "perl -d" in perl 5?

[18:56] <ccc> While perl -d was a full, very useful debugger, I used it frequently like a REPL

[18:56] <timotimo> ccc: have you tried the jupyter notebook for perl6 yet?

[18:57] <timotimo> there's a free online one, too

[18:57] <ccc> timotimo: If I did, then I'd have to LEARN it too. Let easy things be easy

[18:57] <ccc> Just load the damn file

[18:58] <ccc> and if you want to put it in a special namespace fine

[18:58] <ccc> but tell me what that namespace is!

[18:59] <timotimo> why are you loading it with "require", if i may ask?

[19:00] <ccc> What I'm loading is NOT a module class role or any other kind of library

[19:00] <ccc> but unadorned, unpacked perl6 code

[19:01] <ccc> that I'd rather not have to type all over again (or paste) the next time I'm fiddling with an idea

[19:01] <uzl> timotimo: sorry to interrupt. Any easy way to find out (in the REPL) if a function can be invoked as a function, a method or both?

[19:01] <ccc> If the debugger worked for me the I'd use that

[19:02] <timotimo> uzl: i think the only requirement for something to be used as a method is that it has to take one positional argument at least

[19:02] <timotimo> ccc: to be honest, i'm the opposite of fond of the REPL as it is currently, so i barely ever even use it

[19:04] <ccc> Well it's great for people learning the language, although I can't load any initial stuff into it other than by pasting or typing

[19:04] <timotimo> the difference between an unordered piece of perl6 code and a module is putting either "our" in front of subs (to access them with ModuleName::the-sub) or "is export" after the signature

[19:05] <ccc> I think it was the perl -d that allowed me to come up to speed on perl6 rather quickly

[19:05] *** mcmillhj left
[19:05] <ccc> tried that

[19:05] <[Coke]> what if there was a way to have a batch of perl 6 code that dumped you into the repl when it was done, would that be better than nothing?

[19:05] *** mcmillhj joined
[19:05] <ccc> I could use that

[19:06] * [Coke] asked, not remember if that worked at all.

[19:06] <timotimo> well, you can get at Perl6::Compiler with nqp::getcomp("perl6") at the very least

[19:06] *** p6bannerbot sets mode: +v mcmillhj

[19:06] <timotimo> m: use Perl6::Compiler

[19:06] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «===SORRY!===␤Could not find Perl6::Compiler at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-1/share/perl6␤    Co…»

[19:06] <timotimo> m: use Perl6::Compiler:from<nqp>

[19:06] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «===SORRY!===␤Could not find Perl6::Compiler at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-1/share/perl6␤    Co…»

[19:06] <ccc> And where does it put the subs and variables it finds there

[19:06] <timotimo> m: use Perl6::Compiler:from<NQP>

[19:06] <camelia> rakudo-moar 0a45ffbc6: ( no output )

[19:07] <ccc> What namespace are we in inside REPL?

[19:08] <timotimo> eval has options to set a context to use

[19:08] <timotimo> but interactive doesn't

[19:08] <ccc> If I say to REPL sub foo {say "bar"}

[19:08] <ccc> where is it getting put? Into a lexical pad or a package?

[19:08] <[Coke]> https://stackoverflow.com/questions/45290418/start-repl-with-definitions-loaded-from-file

[19:08] <timotimo> lexical pad; "sub foo" is lexical

[19:08] <timotimo> "our sub foo" gets put into the packag

[19:08] <ccc> what package?

[19:09] <timotimo> the current package

[19:09] <timotimo> m: our sub foo() {}; say ::?PACKAGE.perl

[19:09] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «GLOBAL␤»

[19:09] <timotimo> m: our sub foo() {}; say ::?PACKAGE::.keys

[19:09] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3our sub foo() {}; say ::?PACKAGE:7⏏5:.keys␤    expecting any of:␤        colon pair␤»

[19:09] <timotimo> m: our sub foo() {}; say ::?PACKAGE.keys

[19:09] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «()␤»

[19:09] <ccc> perl6 says $?CURRENT is not declared

[19:09] <timotimo> m: our sub foo() {}; say ::?PACKAGE.WHO.keys

[19:09] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «(&foo)␤»

[19:10] <timotimo> there it is

[19:10] *** Sauvin left
[19:11] <ccc> ::?PACKAGE.WHO.keys in perl6 says: () ; (after I defined sub foo)

[19:12] <timotimo> did you put "our" before it?

[19:12] *** hamhu3_ joined
[19:12] <ccc> Is each line in REPL a different lexical scope?

[19:13] <timotimo> yes

[19:13] <timotimo> they are stacked into each other

[19:13] <timotimo> { line 1; { line 2; { line 3; { line 4; ... } } } }

[19:13] *** p6bannerbot sets mode: +v hamhu3_

[19:14] <timotimo> the package.who.keys thing works on my machine

[19:14] <ccc> Then how come it runs foo?

[19:14] <timotimo> how do you mean?

[19:14] <ccc> I define it in REPL on one line then I say foo on another it says bar

[19:15] <timotimo> if foo is defined to return "bar", then that matches my expectation?

[19:15] <ccc> It matches my expectation

[19:16] *** sauvin_ joined
[19:16] *** p6bannerbot sets mode: +v sauvin_

[19:16] *** hamhu3 left
[19:16] <timotimo> then i don't understand the question :)

[19:16] *** sauvin_ is now known as Bocaneri

[19:16] <ccc> It's not found in ::?PACKAGE, so where is it getting it from?

[19:17] <ccc> (And I didn't put an our in front of it either)

[19:17] *** hamhu3_ left
[19:17] <timotimo> it gets it from MY::

[19:18] *** hamhu3 joined
[19:18] <ccc> perl6 says No such symbol '::?MY'

[19:18] <timotimo> m: sub foo() {}; say MY::.keys

[19:18] <camelia> rakudo-moar 0a45ffbc6: OUTPUT: «($_ EXPORT ::?PACKAGE !UNIT_MARKER $=finish $?PACKAGE $=pod $/ GLOBALish $¢ $! &foo)␤»

[19:18] <timotimo> there it is

[19:18] <ccc>  > MY::.keys

[19:18] <ccc> ($?PACKAGE GLOBALish $=pod $_ ::?PACKAGE EXPORT !UNIT_MARKER)

[19:18] <timotimo> well, yeah

[19:18] *** p6bannerbot sets mode: +v hamhu3

[19:19] <timotimo> if you put it on a new line, that's the current line's scope

[19:19] <ccc> No foo there either

[19:19] <timotimo> you'll want OUTER:: for the previous line or OUTERS:: for every previous line

[19:19] <ccc>  > foo

[19:19] <ccc> bar

[19:19] <ccc> What happened to let easy things be easy?

[19:20] <timotimo> the repl is one giant terrible hack

[19:20] <ccc> Why not have SOME way to jus insert a file in place

[19:20] <ccc> as if you had typed it

[19:20] *** mcmillhj left
[19:20] <timotimo> sounds like a cool first contribution :)

[19:21] <timotimo> er, unless of course you already contributed

[19:21] <timotimo> in which case i apologize for not knowing about that

[19:21] <ccc> Ha! If I know enough about rakudo, I'd consider it.

[19:21] *** mcmillhj joined
[19:21] <timotimo> let me whip something up

[19:22] <timotimo> do you have a local rakudo that you compiled yourself?

[19:22] *** p6bannerbot sets mode: +v mcmillhj

[19:22] <ccc> No just downloaded the latest version of rakudo star on Sep 4, 2018

[19:22] *** Jaguar2_19 joined
[19:22] *** diakopter sets mode: +b *!*Jaguar2_@201.131.244.*

[19:22] *** Jaguar2_19 was kicked by timotimo (Jaguar2_19))
[19:22] *** chenyf_ joined
[19:23] <diakopter> double tap

[19:23] *** p6bannerbot sets mode: +v chenyf_

[19:23] *** Bocaneri left
[19:24] <timotimo> in that case it'll be a bit more difficult to apply the patch

[19:24] <timotimo> was that a binary release or sources?

[19:24] <ccc> As I said here a couple of days ago, I'm working on a pedagogical module for abstract algebra : groupid, semigroups, groups 

[19:25] <ccc> Calling it Math::Algebra

[19:25] <ccc> s/groupoid/groupid/

[19:26] <timotimo> ok, i don't think i can actually write that patch right now

[19:26] <timotimo> i need to rest my wrist for a while

[19:26] <ccc> Keep getting sidetracked though chasing an idea down some rabbit hole or trying to learn several things at once

[19:27] *** chenyf_ left
[19:27] <ccc> (I'm using Atom now for my perl6 project, but my fingers still think in Emacs!)

[19:28] *** sauvin joined
[19:28] *** p6bannerbot sets mode: +v sauvin

[19:28] *** sauvin left
[19:29] <ofperfection[m]> Yeah I've been using atom specifically for the dearth of perl6 plugins

[19:29] <ccc> I tried doing my Algebra project to help me learn go (the language), but I gave up on it. I also looked at nim

[19:29] <ofperfection[m]> once I added vim mode they transition hasn't been to bad

[19:29] <ofperfection[m]> by dearth i mean opposite of dearth

[19:30] <ofperfection[m]> *abundance

[19:31] <ccc> I've been a perl hacker for a couple of decades and was sad when perl6 did not prosper

[19:32] <ccc> But since I downloaded the current rakudo, I've been very impressed with what it can do

[19:33] <ofperfection[m]> Hey Timo, in that snippet you linked on twitter, is that a ligature on the postcircumfix

[19:34] <ofperfection[m]> Nevermind, found the symbol in the docs

[19:34] <ofperfection[m]> How does one even type that

[19:34] <diakopter> ccc: nobody's come up with a killer app for Perl 6, where it's definitely easier/awesomer to do in Perl 6 than all other [far more widespread] environments, except for of course the application of: Implementing Perl 6

[19:34] <timotimo> .u ⦓ ⦔

[19:34] <yoleaux> U+0020 SPACE [Zs] ( )

[19:34] <yoleaux> U+2993 LEFT ARC LESS-THAN BRACKET [Ps] (⦓)

[19:34] <yoleaux> U+2994 RIGHT ARC GREATER-THAN BRACKET [Pe] (⦔)

[19:35] <diakopter> I like those brackets

[19:35] <timotimo> .u ⦕ ⦖

[19:35] <yoleaux> U+0020 SPACE [Zs] ( )

[19:35] <yoleaux> U+2995 DOUBLE LEFT ARC GREATER-THAN BRACKET [Ps] (⦕)

[19:35] <yoleaux> U+2996 DOUBLE RIGHT ARC LESS-THAN BRACKET [Pe] (⦖)

[19:36] <kensanata> Do we have something quick and simple like B::hash in Perl 6?

[19:37] *** uzl left
[19:38] <kensanata> Basically what I want is to turn strings like IP numbers into four digit octals and in a Perl 5 app, this is what I used: get 32bit int, turn to octal, take first four characters, color code them...

[19:39] <ccc> IP addresses are written in decimal 255.255.255.255

[19:39] <kensanata> ccc: Also IPv6

[19:40] <ccc> Assume I'm Rip Van Winkle: is IPv6 finally taking over?

[19:41] <ccc> silly question

[19:42] <ccc> I still see the xxx.xxx.xxx.xxx everywhere

[19:42] *** diakopter joined
[19:43] <kensanata> I'm still interested in a quick and easy solution to the question of how to turn any string into four octal digits.

[19:43] *** p6bannerbot sets mode: +v diakopter

[19:43] <ccc> kensanata: I'm still learning but I thought I saw an example of exactly that in the perl6 docs

[19:44] <ccc> kensanata: Trouble is I can't remember where but you could do a site search

[19:45] <sena_kun> m: say 225.base(8); say 'a'.ord.base(8); say 'Musk'.comb>>.ord>>.base(8);

[19:45] <camelia> rakudo-moar 6c93fde85: OUTPUT: «341␤141␤(115 165 163 153)␤»

[19:45] <sena_kun> like that?

[19:46] *** ggoebel left
[19:46] <sena_kun> I am not really sure about "four" octal digits.

[19:47] <sena_kun> the question is how do you want to turn strings into numbers.

[19:47] <ccc> I think he wants to do the reverse

[19:48] <sena_kun> m: '225.225.225.225'.split('.').map(*.Int).map(*.base(8))

[19:48] <camelia> rakudo-moar 6c93fde85: ( no output )

[19:48] <sena_kun> m: '225.225.225.225'.split('.').map(*.Int).map(*.base(8)).say

[19:48] <camelia> rakudo-moar 6c93fde85: OUTPUT: «(341 341 341 341)␤»

[19:50] <sena_kun> m: '225.225.225.225'.split('.').map(*.Int).map(*.base(8)).map(*.Str).join[0..4].say

[19:50] <camelia> rakudo-moar 6c93fde85: OUTPUT: «Index out of range. Is: 1, should be in 0..0␤  in block <unit> at <tmp> line 1␤␤»

[19:50] <jnthn> .map(*.Int.base(8)) # saves 2 maps

[19:50] <sena_kun> oh, indeed.

[19:50] <sena_kun> I am too pampered with point-free notation. :S

[19:51] <diakopter> such composable

[19:51] <sena_kun> m: say '225.225.225.225'.split('.').map(*.Int.base(8).Str).join.substr(0, 4)

[19:51] <camelia> rakudo-moar 6c93fde85: OUTPUT: «3413␤»

[19:52] <sena_kun> m: say '225.225.225.225'.split('.').>>(*.Int.base(8).Str).join.substr(0, 4)

[19:52] <camelia> rakudo-moar 6c93fde85: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[19:52] <sena_kun> ok, it doesn't work like that.

[19:53] <ccc> m: sub ipaddr(uint32 $a) {my @b; loop (my $i=0; $i < 4;$i++) {@a.unshift($a & 0xff); $a>>=8;} say join('.',@a);} say ipaddr(0xc0a80002);

[19:53] <camelia> rakudo-moar 6c93fde85: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@a' is not declared. Did you mean '$a'?␤at <tmp>:1␤------> 3a) {my @b; loop (my $i=0; $i < 4;$i++) {7⏏5@a.unshift($a & 0xff); $a>>=8;} say join␤»

[19:54] <ccc> m: sub ipaddr(uint32 $a) {my @b; loop (my $i=0; $i < 4;$i++) {@b.unshift($a & 0xff); $a>>=8;} say join('.',@b);} say ipaddr(0xc0a80002);

[19:54] <camelia> rakudo-moar 6c93fde85: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix␤at <tmp>:1␤------> 3i < 4;$i++) {@b.unshift($a & 0xff); $a>>7⏏5=8;} say join('.',@b);} say ipaddr(0xc0a␤    expecting any of:␤        postfix␤»

[19:54] <ccc> okay what's the operator for bit shift right?

[19:55] <sena_kun> +&

[19:55] <sena_kun> oops.

[19:55] <sena_kun> +>>

[19:55] <tobs> m: say 256 +> 4

[19:55] <camelia> rakudo-moar 6c93fde85: OUTPUT: «16␤»

[19:55] <ccc> m: sub ipaddr(uint32 $a) {my @b; loop (my $i=0; $i < 4;$i++) {@b.unshift($a & 0xff); $a = >>8;} say join('.',@b);} say ipaddr(0xc0a80002);

[19:55] <camelia> rakudo-moar 6c93fde85: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing infix inside HYPER␤at <tmp>:1␤------> 3 4;$i++) {@b.unshift($a & 0xff); $a = >>7⏏058;} say join('.',@b);} say ipaddr(0xc0a8␤    expecting any of:␤        infix␤        infix stop…»

[19:55] *** xinming_ left
[19:55] <ccc> m: sub ipaddr(uint32 $a) {my @b; loop (my $i=0; $i < 4;$i++) {@b.unshift($a & 0xff); $a = $a>>8;} say join('.',@b);} say ipaddr(0xc0a80002);

[19:55] <camelia> rakudo-moar 6c93fde85: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix␤at <tmp>:1␤------> 3;$i++) {@b.unshift($a & 0xff); $a = $a>>7⏏058;} say join('.',@b);} say ipaddr(0xc0a8␤    expecting any of:␤        postfix␤»

[19:56] <ccc> m: sub ipaddr(uint32 $a) {my @b; loop (my $i=0; $i < 4;$i++) {@b.unshift($a & 0xff); $a = $a +>> 8;} say join('.',@b);} say ipaddr(0xc0a80002);

[19:56] <camelia> rakudo-moar 6c93fde85: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix > instead.␤at <tmp>:1␤------> 3i++) {@b.unshift($a & 0xff); $a = $a +>>7⏏5 8;} say join('.',@b);} say ipaddr(0xc0a␤»

[19:56] <tobs> ccc: you also want to use +& instead of & for bitwise ANDing. In P6 the sole & is a junction

[19:57] <ccc> m: sub ipaddr(uint32 $a) {my @b; loop (my $i=0; $i < 4;$i++) {@b.unshift($a & 0xff); $a = $a ~> 8;} say join('.',@b);} say ipaddr(0xc0a80002);

[19:57] <camelia> rakudo-moar 6c93fde85: OUTPUT: «5===SORRY!5===␤Cannot assign to readonly variable $a␤at <tmp>:1␤------> 3++) {@b.unshift($a & 0xff); $a = $a ~> 87⏏5;} say join('.',@b);} say ipaddr(0xc0a80␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------…»

[19:58] <ccc> m: sub ipaddr($a) {my @b; loop (my $i=0; $i < 4;$i++) {@b.unshift($a & 0xff); $a = $a ~> 8;} say join('.',@b);} say ipaddr(0xc0a80002);

[19:58] <camelia> rakudo-moar 6c93fde85: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3) {@b.unshift($a & 0xff); $a = $a ~> 8;}7⏏5 say join('.',@b);} say ipaddr(0xc0a8000␤»

[19:58] <ccc> m: sub ipaddr($a) {my @b; loop (my $i=0; $i < 4;$i++) {@b.unshift($a & 0xff); $a = $a ~> 8;}; say join('.',@b);}; say ipaddr(0xc0a80002);

[19:58] <camelia> rakudo-moar 6c93fde85: OUTPUT: «Cannot resolve caller infix:«~>»(Int, Int); none of these signatures match:␤    (Str:D \a, Int:D \b --> Str:D)␤    (str $a, int $b)␤  in sub ipaddr at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:00] <ccc> Hmm - you can tell I'm new at this

[20:02] <tobs> m: sub ipaddr($a) { my @b; loop (my $i=0; $i < 4; $i++) { @b.unshift($a +& 0xff); $a +>= 8 }; say join('.',@b) }; say ipaddr(0xc0a80002)

[20:02] <camelia> rakudo-moar 6c93fde85: OUTPUT: «Cannot assign to a readonly variable or a value␤  in sub ipaddr at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:02] <tobs> m: sub ipaddr($a is copy) { my @b; loop (my $i=0; $i < 4; $i++) { @b.unshift($a +& 0xff); $a +>= 8 }; say join('.',@b) }; say ipaddr(0xc0a80002)

[20:02] <camelia> rakudo-moar 6c93fde85: OUTPUT: «192.168.0.2␤True␤»

[20:02] <tobs> and now watch this

[20:02] <tobs> m: 0xc0a80002.polymod(256 xx *).reverse.join('.').say

[20:03] <camelia> rakudo-moar 6c93fde85: OUTPUT: «192.168.0.2␤»

[20:03] <ccc> m: say 6 ~> 1

[20:03] <camelia> rakudo-moar 6c93fde85: OUTPUT: «Cannot resolve caller infix:«~>»(Int, Int); none of these signatures match:␤    (Str:D \a, Int:D \b --> Str:D)␤    (str $a, int $b)␤  in block <unit> at <tmp> line 1␤␤»

[20:03] <ccc> m: say 6 +> 1

[20:03] <camelia> rakudo-moar 6c93fde85: OUTPUT: «3␤»

[20:03] *** sena_kun left
[20:07] <ccc> tobs: that's nifty

[20:07] <tobs> kensanata: as far as turning "any string into four octal digits" goes, djb2 is a simple way of doing that (assuming you want to use that to color strings like IRC nicks?)

[20:07] <tobs> m: "any string".comb».ord.reduce(* * 33 +^ *) mod 8**4

[20:07] <camelia> rakudo-moar 6c93fde85: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "mod" in expression ".reduce(* * 33 +^ *) mod 8**" in sink context (line 1)␤»

[20:07] <tobs> m: say "any string".comb».ord.reduce(* * 33 +^ *) mod 8**4

[20:07] <camelia> rakudo-moar 6c93fde85: OUTPUT: «2531␤»

[20:09] <kensanata> tobs: Basically I want to anonymise IP numbers in log files but make it possible to group actions by the same IP visually using simple color codes, eg. here: https://campaignwiki.org/wiki/DerTotenfluch?action=rc;days=90;all=0;showedit=1 -- two different people but it's hard to guess their IP numbers. 

[20:10] <kensanata> tobs: Your suggestion sounds very good.

[20:11] <vrurg> Is it possible to make rakudobrew autolink scripts from moar-<num>/install/share/perl6/site/bin?

[20:11] *** sotona left
[20:13] <vrurg> nevermind, found

[20:14] <ccc> what is rakudobrew?

[20:14] <ccc> locally compiled rakudo?

[20:14] <vrurg> ccc: yes

[20:15] *** ccc left
[20:15] *** xinming joined
[20:16] *** p6bannerbot sets mode: +v xinming

[20:17] <tobs> kensanata: oops, my line above is missing the initial hash value from djb2. Not that it matters for turning strings into numbers, but if I call it that, it should be implemented correctly

[20:21] <tobs> m: say [5381, |"any string".comb».ord].reduce(* * 33 +^ *) mod 8**4  # maybe with a mod 2**32 inside the reduce?

[20:21] <camelia> rakudo-moar 6c93fde85: OUTPUT: «2342␤»

[20:30] <kensanata> tobs: I cannot answer the question in the comment. :)

[20:31] *** sauvin joined
[20:31] *** p6bannerbot sets mode: +v sauvin

[20:32] *** Dhraakellian18 joined
[20:34] <kensanata> tobs: I'm trying to understand the answers to https://stackoverflow.com/questions/1579721/why-are-5381-and-33-so-important-in-the-djb2-algorithm but I think I should go to bed... 🙂

[20:36] *** Dhraakellian18 left
[20:38] *** Herby_ joined
[20:39] *** p6bannerbot sets mode: +v Herby_

[20:39] <Herby_>   o/

[20:40] <Herby_> \o

[20:44] *** sauvin left
[20:47] *** dct joined
[20:47] *** p6bannerbot sets mode: +v dct

[20:48] *** kensanata left
[20:49] *** Xliff joined
[20:50] *** p6bannerbot sets mode: +v Xliff

[20:50] *** johnjohn101 joined
[20:50] *** p6bannerbot sets mode: +v johnjohn101

[20:51] <johnjohn101> hi perl 6

[20:51] *** sauvin joined
[20:51] *** p6bannerbot sets mode: +v sauvin

[20:54] <buggable> New CPAN upload: Sparrowdo-Cordova-OSx-Build-0.0.4.tar.gz by MELEZHIK http://modules.perl6.org/dist/Sparrowdo::Cordova::OSx::Build:cpan:MELEZHIK

[20:54] <Xliff> Does perl6 allow re-export of symbols as described in S11

[20:56] <johnjohn101> will perl 6 be targeting the new jvm stuff?

[20:58] *** sauvin left
[20:58] *** mcmillhj left
[20:59] <moritz> if somebody makes it so...

[21:02] <johnjohn101> hmm

[21:04] *** robertle joined
[21:05] *** p6bannerbot sets mode: +v robertle

[21:12] <geekosaur> Xliff, as yet the export machinery's rather unformed. iirc zoffix has a module that can be used to emulate some of what is intended, but not S11-style?

[21:15] <Xliff> geekosaur++ # Thanks

[21:19] <diakopter>  export BYOBU_CHARMAP=x ; . ~/.bashrc

[21:19] <diakopter> aw jeez

[21:22] *** pmurias left
[21:26] *** pmurias joined
[21:26] *** p6bannerbot sets mode: +v pmurias

[21:26] *** Herby_ left
[21:36] *** AlexDaniel joined
[21:36] *** p6bannerbot sets mode: +v AlexDaniel

[21:40] *** johnjohn101 left
[21:43] *** titsuki_ joined
[21:43] *** p6bannerbot sets mode: +v titsuki_

[21:44] *** titsuki left
[21:46] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2018/09/17/2018-38-three-versus-six/

[21:49] *** dct left
[21:56] *** atta joined
[21:57] <El_Che> releasable6: status

[21:57] <releasable6> El_Che, Next release will happen when it's ready. 0 blockers. 1 out of 112 commits logged (⚠ 47 warnings)

[21:57] <releasable6> El_Che, Details: https://gist.github.com/e20bdbc48d5db6e1fb889e3d7b9ff6d6

[21:57] *** p6bannerbot sets mode: +v atta

[21:59] <AlexDaniel> El_Che: http://colabti.org/irclogger/irclogger_log/perl6-dev?date=2018-09-16#l491

[22:00] <AlexDaniel> I sorta just woke up so tommorow for me is starting about now :)

[22:05] <AlexDaniel> .tell jmerelo what is up with this rejectionism lately in perl6/doc? :)

[22:05] <yoleaux> AlexDaniel: I'll pass your message to jmerelo.

[22:05] *** sauvin joined
[22:05] *** p6bannerbot sets mode: +v sauvin

[22:10] *** rindolf left
[22:10] *** pmurias left
[22:10] *** rindolf joined
[22:11] *** p6bannerbot sets mode: +v rindolf

[22:20] *** asgs21 joined
[22:20] *** asgs21 was kicked by timotimo (asgs21))
[22:40] *** mcmillhj joined
[22:41] *** p6bannerbot sets mode: +v mcmillhj

[22:42] *** MasterDuke joined
[22:42] *** p6bannerbot sets mode: +v MasterDuke

[22:42] *** MasterDuke left
[22:42] *** MasterDuke joined
[22:42] *** herbert.freenode.net sets mode: +v MasterDuke

[22:42] *** p6bannerbot sets mode: +v MasterDuke

[22:46] *** mcmillhj left
[22:58] *** dct joined
[22:59] *** p6bannerbot sets mode: +v dct

[23:00] *** mcmillhj joined
[23:01] *** p6bannerbot sets mode: +v mcmillhj

[23:05] *** mcmillhj left
[23:12] *** hamhu3_ joined
[23:13] *** p6bannerbot sets mode: +v hamhu3_

[23:13] *** mcmillhj joined
[23:14] *** p6bannerbot sets mode: +v mcmillhj

[23:15] *** pecastro left
[23:15] *** hamhu3 left
[23:18] *** mcmillhj left
[23:21] *** Zoffix joined
[23:21] *** p6bannerbot sets mode: +v Zoffix

[23:21] <Zoffix> lizmat++ # good weekly. P.S.: the "Could be simplified by Zoffix Znet." Tweet was from p6org

[23:23] *** chenyf_ joined
[23:23] *** mcmillhj joined
[23:23] *** p6bannerbot sets mode: +v chenyf_

[23:24] *** Zoffix left
[23:24] *** p6bannerbot sets mode: +v mcmillhj

[23:24] <buggable> New CPAN upload: GraphQL-0.5.8.tar.gz by CTILMES https://cpan.metacpan.org/authors/id/C/CT/CTILMES/Perl6/GraphQL-0.5.8.tar.gz

[23:28] *** chenyf_ left
[23:33] *** qiqi joined
[23:33] *** p6bannerbot sets mode: +v qiqi

[23:39] *** ZzZombo_ joined
[23:39] *** p6bannerbot sets mode: +v ZzZombo_

[23:40] *** ZzZombo left
[23:40] *** ZzZombo_ is now known as ZzZombo

[23:44] *** dct left
[23:59] <ttkp6> Really enjoyed the alexschroeder.ch article.  It makes me want to do more work on my own fork of the old Oddmuse codebase.

