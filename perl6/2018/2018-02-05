[00:00] <gfldex> shinobi-cl: you may want to add a multi candidate with WhateverCode where the user can supply an index.

[00:01] *** Zoffix joined
[00:01] <gfldex> shinobi-cl: You may also want to look into `handles`, see: https://docs.perl6.org/language/typesystem#trait_handles

[00:02] <Zoffix> AlexDaniel: because `nextsame` doesn't re-dispatch. It follows the current dispatch chain, which in this case is exhausted, so it doesn't dispatch to anything else. You may have meant `callwith`

[00:02] <Zoffix> m: multi sub foo($ where /^x/) { say nextcallee; nextwith ‘zzz’ }; multi sub foo($ where ‘yyy’) { say ‘yyy’ }; multi sub foo($ where ‘zzz’) { say ‘zzz’ }; foo(‘xx’)

[00:02] <camelia> rakudo-moar a8e6be66a: OUTPUT: «Nil␤»

[00:02] <Zoffix> m: multi sub foo($ where /^x/) { callwith ‘zzz’ }; multi sub foo($ where ‘yyy’) { say ‘yyy’ }; multi sub foo($ where ‘zzz’) { say ‘zzz’ }; foo(‘xx’)

[00:02] <camelia> rakudo-moar a8e6be66a: ( no output )

[00:02] <Zoffix> :o

[00:02] <AlexDaniel> you mean samewith?

[00:03] <AlexDaniel> m: multi sub foo($ where /^x/) { samewith ‘zzz’ }; multi sub foo($ where ‘yyy’) { say ‘yyy’ }; multi sub foo($ where ‘zzz’) { say ‘zzz’ }; foo(‘xx’)

[00:03] <camelia> rakudo-moar a8e6be66a: OUTPUT: «zzz␤»

[00:03] <Zoffix> Ah right

[00:03] <gfldex> shinobi-cl: If I wanted to go full spreadsheet I would try to cheat by having separate Arrays for header and body and delegate as much as possible.

[00:03] <Zoffix> callwith calls still have to match original args

[00:03] <shinobi-cl> gfldex, an index? like an array index? Care to give an example? How would you call this?

[00:03] <AlexDaniel> Zoffix: sorry, but why is it exhausted?

[00:03] <AlexDaniel> I thought that it didn't try two other candidates

[00:04] <gfldex> shinobi-cl: also deep thinking about Nil might be helpful later on

[00:04] <shinobi-cl> they are. The body is only on an array, the "bidimensional" part is just only math so emulate rows and columns

[00:04] <shinobi-cl> but there are only 2 arrays. The header is one and  the full body is another one.

[00:06] <gfldex> m: my @a = [[1,2,3],<a b c>]; say @a[{now.Date.day-of-week};1];

[00:06] <camelia> rakudo-moar a8e6be66a: OUTPUT: «(b)␤»

[00:06] *** mcmillhj joined
[00:06] <gfldex> shinobi-cl: ^^^ the x-cood depends on the day of week at runtime

[00:06] <Zoffix> AlexDaniel: ah, cause I'm talking shit.

[00:07] <Zoffix> AlexDaniel: `nextwith` must match original dispatch too, and `where 'zzz'` doesn't

[00:07] <Zoffix> m: multi sub foo($ where { say 'here'; $_ ~~ /^x/}) { nextwith ‘zzz’ }; multi sub foo($ where {say 'there'; $_ eq ‘yyy’}) { say ‘yyy’ }; multi sub foo($ where { say 'everywhere'; $_ eq ‘zzz’}) { say ‘zzz’ }; foo(‘xxx’)

[00:07] <camelia> rakudo-moar a8e6be66a: OUTPUT: «here␤here␤here␤there␤everywhere␤»

[00:07] *** epony joined
[00:07] <Zoffix> From https://rakudo.party/post/Perl6-But-Heres-My-Dispatch-So-Callwith-Maybe#haveyoutriedtocallthemwith... "The next candidate callwith will call will be the next candidate that matches Middle—and that's not a typo: Middle is the argument we used to initiate the dispatch and so the next candidate will be the one that can still take the arguments of that original call."

[00:07] <AlexDaniel> multi sub foo($ where { say 'here'; $_ ~~ /^x/}) { say ‘before nextwith’; nextwith ‘zzz’ }; multi sub foo($ where {say 'there'; $_ eq ‘yyy’}) { say ‘yyy’ }; multi sub foo($ where { say 'everywhere'; $_ eq ‘zzz’}) { say ‘zzz’ }; foo(‘xxx’)

[00:07] <evalable6> AlexDaniel, rakudo-moar af4d6b461: OUTPUT: «here␤here␤before nextwith␤here␤there␤everywhere␤»

[00:08] <gfldex> shinobi-cl: that's a Callable tho, not a WhateverCode. But equally useful.

[00:09] <shinobi-cl> gfldex: so, you want to be able to use [] to reference elements inside the "body"?. However, i wanted to "force" to use column names (still there is a public hash with column numerical positions available as keys in any case)

[00:09] <shinobi-cl> gfldex. also, what do you mean about thinking on the use of Nil?

[00:10] <Zoffix> AlexDaniel: would've thought to see at least one duplicated `everywhere` or `here` in "before nextwith␤here␤there␤everywhere", for it to know that the original won't fit; but perhaps it cached the results of previous try

[00:11] <Zoffix> Or it's trying to find the next one that'd match original arg.

[00:11] *** mcmillhj left
[00:12] <Zoffix> Well, I know the article documented what jnthn told me about it vis-a-vis matching both arg of original call and new args, so I don't think there bugs involved, but I can't explain the output of whatevers

[00:13] <Zoffix> m: multi sub foo($ where { say 'here'; $_ eq "xx"}) { nextwith ‘xxz’ }; multi sub foo($ where {say 'there'; $_ eq ‘yyy’}) { say ‘yyy’ }; multi sub foo($ where { say 'everywhere'; $_ ~~ /^x/}) { say ‘zzz’ }; foo(‘xx’)

[00:13] <camelia> rakudo-moar af4d6b461: OUTPUT: «here␤here␤here␤there␤everywhere␤everywhere␤zzz␤»

[00:13] <Zoffix> m: multi sub foo($ where { say 'here'; $_ eq "xx"}) { say "before nextwith"; nextwith ‘xxz’ }; multi sub foo($ where {say 'there'; $_ eq ‘yyy’}) { say ‘yyy’ }; multi sub foo($ where { say 'everywhere'; $_ ~~ /^x/}) { say ‘zzz’ }; foo(‘xx’)

[00:13] <camelia> rakudo-moar af4d6b461: OUTPUT: «here␤here␤before nextwith␤here␤there␤everywhere␤everywhere␤zzz␤»

[00:13] <shinobi-cl> (afw for one hour or so)

[00:13] <AlexDaniel> mhmm… too magic

[00:13] * AlexDaniel rewrites that code so that it doesn't rely on multi dispatch as much

[00:14] <Zoffix> m: multi sub foo($ where { say "here[$_]"; $_ eq "xx"}) { say "before nextwith"; nextwith ‘xxz’ }; multi sub foo($ where {say "there[$_]"; $_ eq ‘yyy’}) { say ‘yyy’ }; multi sub foo($ where { say "everywhere[$_]"; $_ ~~ /^x/}) { say ‘zzz’ }; foo(‘xx’)

[00:14] <camelia> rakudo-moar af4d6b461: OUTPUT: «here[xx]␤here[xx]␤before nextwith␤here[xx]␤there[xx]␤everywhere[xx]␤everywhere[xxz]␤zzz␤»

[00:14] <Zoffix> m: multi sub foo($ where { say "here[$_]"; $_ ~~ /^x/}) { say "before nextwith"; nextwith ‘zzz’ }; multi sub foo($ where {say "there[$_]"; $_ eq ‘yyy’}) { say ‘yyy’ }; multi sub foo($ where { say "everywhere[$_]"; $_ eq "zzz" }) { say ‘zzz’ }; foo(‘xx’)

[00:14] <camelia> rakudo-moar af4d6b461: OUTPUT: «here[xx]␤here[xx]␤before nextwith␤here[xx]␤there[xx]␤everywhere[xx]␤»

[00:15] <Zoffix> I guess it goes out to find another candidate that can take original arg that ain't the current one and then fails to do so so that's why there's no another everywhere.

[00:15] <Zoffix> ZofBot: mystery solved

[00:15] <ZofBot> Zoffix, He looked at Elizabeth

[00:21] *** Zoffix left
[00:24] *** mcmillhj joined
[00:29] *** mcmillhj left
[00:42] *** mcmillhj joined
[00:44] *** leont left
[00:47] *** mcmillhj left
[00:52] *** mcmillhj joined
[00:56] *** Guest18 left
[00:57] *** mcmillhj left
[00:59] *** colomon left
[01:00] *** colomon joined
[01:04] *** Cabanossi left
[01:05] *** Cabanossi joined
[01:08] *** mcmillhj joined
[01:13] *** mcmillhj left
[01:17] *** wamba joined
[01:20] *** a3r0 joined
[01:21] *** cdg joined
[01:25] *** someuser left
[01:26] *** cdg left
[01:26] *** mcmillhj joined
[01:31] *** mcmillhj left
[01:32] *** Zoffix joined
[01:34] <Zoffix> Man. I'm not following how it's possible that I'm getting this output: https://gist.github.com/zoffixznet/82387c39102c381ac7895ae0bb310d1c#file-output-txt-L20-L46   ZZ2.3 is followed by ZZ2.5 then by ZZ2.3 again and then by ZZ2.4 but the code where this is printed is an `if`, not a loop: https://gist.github.com/zoffixznet/82387c39102c381ac7895ae0bb310d1c#file-code-partial-p6-L23-L32 and the routine has a print

[01:34] <Zoffix> of ZZ1 on its entry... 

[01:35] <Zoffix> Which is printed in the output originally, but not between the ZZ2.3->ZZ2.5->ZZ2.3 lines... How does it manage to go back to ZZ2.3 :S

[01:36] <Zoffix> And that snippet is placed here: https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L6224-L6255

[01:38] *** mcmillhj joined
[01:39] *** zeddy__k left
[01:43] *** mcmillhj left
[01:45] <AlexDaniel> Zoffix: ahem, but what about this

[01:45] <AlexDaniel> e: multi sub foo($x where /{dd $x}./) {}; multi sub foo($y where /{dd $y}./) {}; foo ‘1’; note ‘  BETWEEN  ’; foo ‘2’

[01:45] <evalable6> AlexDaniel, rakudo-moar e8c6c259c: OUTPUT: «Str $x = "1"␤Str $x = "1"␤  BETWEEN  ␤Str $x = "1"␤Str $x = "2"␤»

[01:45] <AlexDaniel> maybe you explained it already but I'm still confused

[01:46] <AlexDaniel> how come it attempts to match something from the previous run

[01:46] <Zoffix> Solve my thing and I'll solve yours :)

[01:47] <AlexDaniel> hehe

[01:47] <Zoffix> Here's updated version. How in the world does it manage to go from ZZ4.4 to ZZ4.2 without going through ZZ4.1 :S https://gist.github.com/zoffixznet/5beb5a8a9857640cd4c2011b3c6989a9#file-p6-p6-L19-L24

[01:48] *** mcmillhj joined
[01:49] <AlexDaniel> fwiw I'm seeing a bug when the first dispatch erroneously affects subsequent calls (so wherever it goes first is what's going to be used later)

[01:49] <AlexDaniel> possibly the stuff above is a golf of that, but no idea really

[01:50] <Zoffix> AlexDaniel: looking at the QAST of your code, there's a bug. The block that prints stuff inside the regex is in the wrong scope

[01:51] <Zoffix> e: multi sub foo($x where {?/{dd $x}./}) {}; multi sub foo($y where {?/{dd $y}./}) {}; foo ‘1’; note ‘  BETWEEN  ’; foo ‘2’

[01:51] <evalable6> Zoffix, rakudo-moar e8c6c259c: OUTPUT: «Str $x = "1"␤Str $x = "1"␤  BETWEEN  ␤Str $x = "2"␤Str $x = "2"␤»

[01:51] <Zoffix> yup :)

[01:52] <Zoffix> I'm guessing the fix would be something like this: https://github.com/rakudo/rakudo/commit/d80fc376d2010562f6b650c714b45ce4e43bbd81  except in the `where` maker instead of the whatever currier

[01:52] <Zoffix> Now solve my ZZ thing :P

[01:52] <AlexDaniel> looking at it, yes

[01:53] *** mcmillhj left
[01:54] <AlexDaniel> well because it's recursive

[01:55] <AlexDaniel> but that doesn't explain anything

[01:55] <AlexDaniel> hm

[01:55] <Zoffix> AlexDaniel: but if it came from re-entry to routine, wouldn't ZZ4.1 and ZZ1 be printed again

[01:56] <Zoffix> Filed yours as R#1481

[01:56] <AlexDaniel> expected output is something like 4.1, 4.4, 4.2, 4.4

[01:56] <synopsebot> R#1481 [open]: https://github.com/rakudo/rakudo/issues/1481 `where` with regex miscopes QAST::Blocks inside the regex

[01:57] <AlexDaniel> yes, but in the last cycle

[01:57] <AlexDaniel> it goes to the end to 4.4

[01:57] <AlexDaniel> then jumps back out, prints 4.2

[01:58] <AlexDaniel> think of how it's going to unroll from the last iteration, kind of

[01:58] <AlexDaniel> didn't really look at the output though, but 4.4 → 4.2 without 4.1 is not surprising

[01:58] <Zoffix> Ah. OK. I think I'm getting it now. AlexDaniel++ tahnks

[01:58] *** aborazmeh joined
[01:58] *** aborazmeh left
[01:58] *** aborazmeh joined
[01:59] <AlexDaniel> (4.1, (4.1, 4.2 4.4), 4.2, 4.4)

[01:59] <AlexDaniel> or something

[01:59] <AlexDaniel> yea, print “(4.1” instead of just 4.1

[01:59] <AlexDaniel> and “4.4)”

[01:59] <AlexDaniel> and you'll see it very clearly, I think

[02:01] <Zoffix> Yeah, if I put a print at the every end of the routine, it gets printed between the things

[02:03] <AlexDaniel> that took longer to figure out than it should've… time to revisit prolog!

[02:03] <AlexDaniel> or at least get some sleep :S

[02:03] <Zoffix> :)

[02:04] <AlexDaniel> so my plans were that I'd be sleeping in a healthy way once I have more free time. Now I do have free time, why am I not in the bed yet?

[02:06] *** mcmillhj joined
[02:09] <AlexDaniel> oh no… my sleep graph script (written in perl 6) produces completely black images now :S

[02:10] <AlexDaniel> |20h fix orgsleep

[02:10] <AlexDaniel> ZofBot: :(

[02:11] * AlexDaniel calls it a day

[02:11] *** mcmillhj left
[02:12] <Zoffix> ZofBot's reminder feature only listens to me :)

[02:13] <Zoffix> Still need to swap it to a more robust system I was writing but kinda left before finishing

[02:13] <Zoffix> eco: Reminders

[02:13] <buggable> Zoffix, Reminders 'Class for managing reminders about tasks and events': https://github.com/zoffixznet/perl6-Reminders

[02:13] <Zoffix> usign that ^

[02:16] *** AlexDaniel left
[02:17] *** Zoffix left
[02:24] *** mcmillhj joined
[02:24] *** Ven`` joined
[02:28] *** Ven`` left
[02:28] *** mcmillhj left
[02:36] *** mcmillhj joined
[02:41] *** mcmillhj left
[02:44] *** ilbot3 left
[02:49] *** mcmillhj joined
[02:54] *** mcmillhj left
[02:57] *** ilbot3 joined
[02:57] *** ChanServ sets mode: +v ilbot3

[03:04] *** mcmillhj joined
[03:09] *** mcmillhj left
[03:16] *** cdg joined
[03:21] *** cdg left
[03:21] *** colomon left
[03:22] *** colomon joined
[03:23] *** mcmillhj joined
[03:27] *** mcmillhj left
[03:33] *** mcmillhj joined
[03:39] *** mcmillhj left
[03:39] *** MasterDuke joined
[03:42] *** aborazmeh left
[03:49] *** mcmillhj joined
[03:54] *** mcmillhj left
[04:00] <Xliff> Why do I always miss the fun conversations?

[04:01] *** mcmillhj joined
[04:06] *** mcmillhj left
[04:11] *** jeromelanteri joined
[04:18] *** colomon left
[04:18] *** mcmillhj joined
[04:19] *** colomon joined
[04:21] *** colomon left
[04:23] *** mcmillhj left
[04:32] *** Ven`` joined
[04:32] *** mcmillhj joined
[04:36] *** eliasr left
[04:37] *** mcmillhj left
[04:38] *** Cabanossi left
[04:40] *** Cabanossi joined
[04:43] *** Zoffix joined
[04:44] <Zoffix> Was there a bot that reported how many tickets were opened/closed for the past week?

[04:44] *** Ven`` left
[04:44] <Zoffix> reportable6, list

[04:44] <reportable6> Zoffix, https://gist.github.com/ca8db59f2929f044d5af7e2dfdc090f1

[04:45] <Zoffix> Yeah, this is it.

[04:47] *** mcmillhj joined
[04:51] *** mcmillhj left
[05:00] *** wamba left
[05:06] *** mcmillhj joined
[05:11] <Geth> ¦ doc: fc6af71bde | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/IO/Handle.pod6

[05:11] <Geth> ¦ doc: List windows-1251 in list of supported encodings

[05:11] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fc6af71bde

[05:11] <synopsebot> Link: https://doc.perl6.org/type/IO::Handle

[05:12] *** mcmillhj left
[05:21] *** xtreak joined
[05:21] *** mcmillhj joined
[05:26] *** traxex2 left
[05:26] *** mcmillhj left
[05:28] *** traxex2 joined
[05:31] *** cdg joined
[05:32] *** travis-ci joined
[05:32] <travis-ci> Doc build errored. Zoffix Znet 'List windows-1251 in list of supported encodings'

[05:32] <travis-ci> https://travis-ci.org/perl6/doc/builds/337406392 https://github.com/perl6/doc/compare/a2b6f0834469...fc6af71bdeb8

[05:32] *** travis-ci left
[05:32] <buggable> [travis build above] ✓ All failures are due to: timeout (1 failure).

[05:32] *** noganex left
[05:33] <Zoffix> shoo, robot.

[05:35] *** mcmillhj joined
[05:36] *** cdg left
[05:40] *** mcmillhj left
[05:46] <Zoffix> wow, Perl 6 room has a lot of humans: https://twitter.com/PerlFosdem/status/960154529705680899

[05:46] *** mcmillhj joined
[05:52] *** mcmillhj left
[05:59] *** nige joined
[05:59] *** mcmillhj joined
[06:00] <nige> hi - I'm having a bit of trouble adding a script to the ecosystem - the build is failing to load LWP::Simple as a prerequisite

[06:01] *** wamba joined
[06:01] <nige> the build log is here: https://travis-ci.org/perl6/ecosystem/builds/337194561?utm_source=github_status&utm_medium=notification

[06:01] *** shinobi-cl left
[06:03] *** skids left
[06:03] <Zoffix> nige: looks like it might've been just a Travis error (like, it couldn't fetch ecosystem info when the build happened)

[06:04] <nige> ah ok - I've rerun the build a few times - should I try again?

[06:05] *** mcmillhj left
[06:05] <Zoffix> nige: I would just merge it as is and not worry about it

[06:05] <nige> ok - will do

[06:05] <Zoffix> (just try if it works with zef in ~2hr; just do `zef update` for it to fetch updated ecosystem info)

[06:06] <nige> the name in meta6.json file is all numeric - "123" - do you know if that is going to work ok?

[06:06] <nige> ok - will do update in ~2hrs

[06:07] <Zoffix> oh

[06:07] <Zoffix> nige: I think it needs to be a valid identifier

[06:07] <Zoffix> Well, I know module names need to be. No idea what would happen if just the dist has a name as invalid identifier.

[06:07] <nige> ah - ok - something starting with a letter - "Do123"

[06:08] <Zoffix> Yeah

[06:08] <nige> ok - so will make a change there and try again - thanks 

[06:09] <nige> thanks too for the blog post on how to release a module - that was a big help

[06:09] <Zoffix> Great.

[06:14] <Geth> ¦ ecosystem/nige123-patch-2: 5ba6c764b5 | (Nigel Hamilton)++ (committed using GitHub Web editor) | META.list

[06:14] <Geth> ¦ ecosystem/nige123-patch-2: Update META.list

[06:14] <Geth> ¦ ecosystem/nige123-patch-2: review: https://github.com/perl6/ecosystem/commit/5ba6c764b5

[06:15] <Geth> ¦ ecosystem: nige123++ created pull request #385: Update META.list

[06:15] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/385

[06:15] *** mcmillhj joined
[06:20] *** mcmillhj left
[06:25] <Geth> ¦ ecosystem: 5ba6c764b5 | (Nigel Hamilton)++ (committed using GitHub Web editor) | META.list

[06:25] <Geth> ¦ ecosystem: Update META.list

[06:25] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/5ba6c764b5

[06:25] <Geth> ¦ ecosystem: a01f0fbdf3 | (Nigel Hamilton)++ (committed using GitHub Web editor) | META.list

[06:25] <Geth> ¦ ecosystem: Merge pull request #385 from perl6/nige123-patch-2

[06:25] <Geth> ¦ ecosystem: 

[06:25] <Geth> ¦ ecosystem: Update META.list

[06:25] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/a01f0fbdf3

[06:27] <nige> ok - the build failed again - but went ahead with the merge - will check in the next ~2hrs

[06:29] <Zoffix> This weeks Perl 6 Weekly, hot off the press: https://p6weekly.wordpress.com/2018/02/05/whatever-fosdem-squashed/

[06:34] *** mcmillhj joined
[06:38] *** wamba left
[06:40] *** mcmillhj left
[06:41] *** TEttinger left
[06:41] *** TEttinger joined
[06:44] <moritz> Zoffix++

[06:47] *** mcmillhj joined
[06:50] *** khw left
[06:53] *** mcmillhj left
[06:57] *** darutoko joined
[07:05] *** mcmillhj joined
[07:05] *** ZzZombo joined
[07:10] *** mcmillhj left
[07:15] *** mcmillhj joined
[07:20] *** mcmillhj left
[07:31] *** mcmillhj joined
[07:33] *** noganex joined
[07:36] *** mcmillhj left
[07:43] *** lowbro joined
[07:43] *** lowbro left
[07:43] *** lowbro joined
[07:47] <ZzZombo> Where in the code attribute `where` constraints are checked? I don't see them being attached to instances of attributes, BTW.

[07:48] *** mcmillhj joined
[07:53] *** wamba joined
[07:53] *** mcmillhj left
[07:56] *** abraxxa joined
[07:57] <tyil> Zoffix++

[07:59] *** domidumont joined
[08:00] *** wamba left
[08:00] *** domidumont left
[08:00] <Zoffix> ZzZombo: likely here: https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L3390-L3392

[08:00] <yoleaux> 07:48Z <brrt> Zoffix: fwiw, the adding of a NOOP expr JIT operator was a bugfix (one of thsoe that warrents a story, sometime :-))

[08:00] <tyil> Zoffix: the weekly says "sides" instead of "slides"

[08:01] <tyil> (2nd para near the end)

[08:01] <Zoffix> ZzZombo: and here's where it gets made: https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L5451

[08:02] <Zoffix> tyil: fixed. Thanks.

[08:02] *** domidumont joined
[08:03] *** fluca1978 joined
[08:03] <tyil> :>

[08:04] <Zoffix> ZzZombo: oh where they're *checked*...

[08:06] <Zoffix> ZzZombo: it is attached to the attribute looks like:

[08:06] <Zoffix> m: class Foo { has $!bar where *.so; method z { say $!bar.^refinement } }.new.z

[08:06] <camelia> rakudo-moar e8c6c259c: OUTPUT: «{ ... }␤»

[08:06] <Zoffix> m: class Foo { has $!bar where *.so; method z { say $!bar.^refinement.(42) } }.new.z

[08:06] <camelia> rakudo-moar e8c6c259c: OUTPUT: «True␤»

[08:06] <Zoffix> It's probably part of the container. No idea how those work

[08:06] * Zoffix &

[08:06] *** Zoffix left
[08:07] *** mcmillhj joined
[08:08] <Geth> ¦ doc/master: 5 commits pushed by (Luca Ferrari)++

[08:08] <Geth> ¦ doc/master: ac55e0b040 | Add section in 'traps' about $/ changing on every match.

[08:08] <Geth> ¦ doc/master: 590022fecc | Improve explaination about $/ changes after every match.

[08:08] <Geth> ¦ doc/master: c2fbd685aa | Add a reminder that exit is the only way to return something from MAIN.

[08:08] <Geth> ¦ doc/master: ede554320d | Reword the MAIN->exit explaination.

[08:08] <Geth> ¦ doc/master: 9d882c3d5d | No B<zero> in MAIN.

[08:08] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/fc6af71bde...9d882c3d5d

[08:08] *** domidumont left
[08:09] *** domidumont joined
[08:12] *** mcmillhj left
[08:15] *** xtreak left
[08:17] *** mcmillhj joined
[08:22] *** mcmillhj left
[08:31] *** mcmillhj joined
[08:32] *** parv joined
[08:33] <ZzZombo> m: class Foo { has $!bar where 0; method z { say $!bar.^refinement === 0 } };Foo.new.z

[08:33] <camelia> rakudo-moar e8c6c259c: OUTPUT: «False␤»

[08:34] <ZzZombo> m: class Foo { has $!bar where 0; method z { say $!bar.^refinement.() === 0 } };Foo.new.z

[08:34] <camelia> rakudo-moar e8c6c259c: OUTPUT: «Too few positionals passed; expected 1 argument but got 0␤  in method z at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[08:36] *** mcmillhj left
[08:40] *** travis-ci joined
[08:40] <travis-ci> Doc build passed. Luca Ferrari 'No B<zero> in MAIN.'

[08:40] <travis-ci> https://travis-ci.org/perl6/doc/builds/337440437 https://github.com/perl6/doc/compare/fc6af71bdeb8...9d882c3d5d0f

[08:40] *** travis-ci left
[08:41] *** someuser joined
[08:41] *** rindolf joined
[08:43] *** mcmillhj joined
[08:43] *** Zoffix joined
[08:43] <Zoffix> ZzZombo: `where 0` is equivalent to `where {0}`. It'll always be a Callable.

[08:43] <Zoffix> m: class Foo { has $!bar where 0; method z { say $!bar.^refinement.($) } };Foo.new.z

[08:43] <camelia> rakudo-moar e8c6c259c: OUTPUT: «False␤»

[08:44] <Zoffix> m: class Foo { has $!bar where 1; method z { say $!bar.^refinement.($) } };Foo.new.z

[08:44] <camelia> rakudo-moar e8c6c259c: OUTPUT: «False␤»

[08:44] <Zoffix> m: class Foo { has $!bar where 1; method z { say $!bar.^refinement.(1) } };Foo.new.z

[08:44] <camelia> rakudo-moar e8c6c259c: OUTPUT: «True␤»

[08:45] <Zoffix> m: class Foo { has $!bar where (1, **, 5); method z { say $!bar.^refinement.(1, 3, 4, 5) } };Foo.new.z

[08:45] <camelia> rakudo-moar e8c6c259c: OUTPUT: «Too many positionals passed; expected 1 argument but got 4␤  in method z at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[08:45] <Zoffix> m: class Foo { has $!bar where (1, **, 5); method z { say $!bar.^refinement.([1, 3, 4, 5]) } };Foo.new.z

[08:45] <camelia> rakudo-moar e8c6c259c: OUTPUT: «True␤»

[08:47] *** xtreak joined
[08:47] <Zoffix> I guess not always-always. We do some optimizations

[08:48] *** mcmillhj left
[08:48] <Zoffix> m: sub ($ where Int|Str) {}.signature.params.head.constraints.say

[08:48] <camelia> rakudo-moar e8c6c259c: OUTPUT: «-> ;; $_ { #`(Block|75212208) ... }␤»

[08:48] <Zoffix> Ah, nm, they're just for the fast path binder; the original thunk is still in place.

[08:51] *** zakharyas joined
[08:54] <Zoffix> Actually, they're not equivalent, in the general sense. `where 0` means to `{$param ~~ 0}`; whereas `where {0}` means `{$param ~~ {0}}`. In both cases they're are Callables, but the thunked version has slightly different meaning with some constructs, since smartmatch will be done against the value returned from thunk, rather than just checking whether it's truthy

[08:55] <Zoffix> m: -> $ where 0 {}("0")

[08:55] <camelia> rakudo-moar e8c6c259c: ( no output )

[08:55] <Zoffix> m: -> $ where {0} {}("0")

[08:55] <camelia> rakudo-moar e8c6c259c: OUTPUT: «Constraint type check failed in binding to parameter '<anon>'; expected anonymous constraint to be met but got Str ("0")␤  in block <unit> at <tmp> line 1␤␤»

[08:57] <Zoffix> m: -> $y where   .so && .name    {}( sub one   {} ); # WRONG!! 

[08:57] <camelia> rakudo-moar e8c6c259c: OUTPUT: «Sub object coerced to string (please use .gist or .perl to do that)␤  in block  at <tmp> line 1␤»

[08:57] <Zoffix> m: -> $y where { .so && .name }  {}( sub two   {} );

[08:57] <camelia> rakudo-moar e8c6c259c: ( no output )

[08:57] <Zoffix> m: -> $y where .so && .name.so  {}( sub two   {} );

[08:57] <camelia> rakudo-moar e8c6c259c: ( no output )

[08:58] <Zoffix> ^ the wrong one does `sub one {} ~~ .name`, which is just an `eq`

[08:58] <Zoffix> ZofBot: did you enjoy my soliloqui?

[08:59] <ZofBot> Zoffix, t line 85 # expected: 'Perl 6' # got: 'Perl' seems to happen under load

[08:59] *** Zoffix left
[09:00] *** mcmillhj joined
[09:02] *** llfourn_ left
[09:02] *** llfourn joined
[09:05] *** sena_kun joined
[09:06] *** mcmillhj left
[09:16] *** shinobi-cl joined
[09:17] *** mcmillhj joined
[09:19] *** dakkar joined
[09:19] *** dakkar left
[09:21] *** dakkar joined
[09:22] *** mcmillhj left
[09:23] *** samebchase joined
[09:28] *** mcmillhj joined
[09:33] *** amalia___ joined
[09:33] *** mcmillhj left
[09:37] *** xtreak left
[09:40] *** xtreak joined
[09:40] *** wamba joined
[09:40] *** bloatable6 left
[09:40] *** bloatable6 joined
[09:42] *** mcmillhj joined
[09:47] *** mcmillhj left
[09:53] *** mcmillhj joined
[09:55] *** TEttinger left
[09:57] *** mcmillhj left
[10:00] *** zeddy_k joined
[10:02] *** zakharyas left
[10:08] *** mcmillhj joined
[10:11] *** eliasr joined
[10:13] *** mcmillhj left
[10:14] *** zakharyas joined
[10:26] *** mcmillhj joined
[10:28] *** Grauwolf_ left
[10:30] *** Grauwolf joined
[10:32] *** mcmillhj left
[10:37] *** mcmillhj joined
[10:42] *** mcmillhj left
[10:47] *** mcmillhj joined
[10:52] *** mcmillhj left
[10:54] *** fluca1978 left
[10:55] *** wamba left
[11:06] *** mcmillhj joined
[11:12] *** mcmillhj left
[11:13] *** colomon joined
[11:19] *** AlexDaniel joined
[11:19] *** Day__ joined
[11:20] *** Day__ is now known as loc

[11:20] *** loc left
[11:21] *** mcmillhj joined
[11:26] *** mcmillhj left
[11:26] *** zakharyas left
[11:27] *** zakharyas joined
[11:29] *** someuser left
[11:35] *** mcmillhj joined
[11:40] *** mcmillhj left
[11:41] *** scimon joined
[11:42] *** gregf_ left
[11:44] *** AlexDaniel left
[11:44] *** AlexDaniel joined
[11:46] *** mcmillhj joined
[11:47] *** traxex2 left
[11:48] *** lowbro left
[11:49] *** AlexDaniel left
[11:51] *** mcmillhj left
[11:53] *** traxex2 joined
[11:57] *** xtreak left
[11:58] *** mcmillhj joined
[11:59] *** zeddy_k left
[12:00] *** xtreak_ joined
[12:00] *** shinobi-cl left
[12:03] *** mcmillhj left
[12:04] *** ambs left
[12:05] *** zakharyas left
[12:08] *** leont joined
[12:13] *** mcmillhj joined
[12:18] *** mcmillhj left
[12:21] *** parvx joined
[12:23] *** stmuk_ joined
[12:23] *** ambs joined
[12:23] *** parv left
[12:24] *** stmuk left
[12:27] *** abraxxa left
[12:31] <AlexDaniel`> releasable6: next

[12:31] <releasable6> AlexDaniel`, Next release in 12 days and ≈6 hours. Blockers: https://github.com/rakudo/rakudo/issues?q=is:issue+is:open+label:%22%E2%9A%A0+blocker+%E2%9A%A0%22. Changelog for this release was not started yet

[12:31] <releasable6> AlexDaniel`, Details: https://gist.github.com/2b2355d880553e691ad07c9f38ddb8e8

[12:33] *** mcmillhj joined
[12:34] *** parvx left
[12:38] *** mcmillhj left
[12:42] *** abraxxa joined
[12:49] *** mcmillhj joined
[12:54] *** mcmillhj left
[13:06] *** nige left
[13:06] *** nige joined
[13:07] *** mcmillhj joined
[13:11] *** someuser joined
[13:12] *** mcmillhj left
[13:12] <buggable> New CPAN upload: Auth-SCRAM-0.4.6.3.tar.gz by MARTIMM https://cpan.metacpan.org/authors/id/M/MA/MARTIMM/Perl6/Auth-SCRAM-0.4.6.3.tar.gz

[13:17] *** jeromelanteri left
[13:18] *** mcmillhj joined
[13:20] *** pmurias joined
[13:21] *** nige left
[13:23] *** mcmillhj left
[13:23] <Geth> ¦ doc: dac340811c | (Will "Coke" Coleda)++ | 4 files

[13:23] <Geth> ¦ doc: fix typos, learn words

[13:23] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/dac340811c

[13:23] <Geth> ¦ doc: f8f82bcde8 | (Will "Coke" Coleda)++ | doc/Type/Array.pod6

[13:23] <Geth> ¦ doc: fix method signature

[13:23] <Geth> ¦ doc: 

[13:23] <Geth> ¦ doc: (previous version also lacked the invocant marker but happened to compile)

[13:23] <synopsebot> Link: https://doc.perl6.org/type/Array

[13:23] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f8f82bcde8

[13:32] *** mcmillhj joined
[13:36] *** rindolf left
[13:37] *** mcmillhj left
[13:38] *** rindolf joined
[13:52] *** mcmillhj joined
[13:52] *** cdg joined
[13:55] <ZzZombo> Can I see what parameters a role was given on an object?

[13:56] <timotimo> m: say Rat.^roles[0].perl

[13:56] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «Rational[Int,Int]␤»

[13:56] <timotimo> m: say Rat.^roles[0].^params

[13:56] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «No such method 'params' for invocant of type 'Perl6::Metamodel::CurriedRoleHOW'␤  in block <unit> at <tmp> line 1␤␤»

[13:56] <timotimo> m: say Rat.^roles[0].^parameters

[13:56] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «No such method 'parameters' for invocant of type 'Perl6::Metamodel::CurriedRoleHOW'␤  in block <unit> at <tmp> line 1␤␤»

[13:57] * timotimo code-dives

[13:57] <timotimo> aha

[13:57] <timotimo> m: say Rat.^roles[0].^role_arguments

[13:58] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «((Int) (Int))␤»

[13:58] <timotimo> there doesn't seem to be a way to get at the %!named_args, though?

[14:00] <ZzZombo> Ouch, I wanted exactly that!

[14:02] *** xtreak_ left
[14:09] *** nige joined
[14:13] *** wamba joined
[14:15] <Geth> ¦ doc/master: 5 commits pushed by (Luca Ferrari)++

[14:15] <Geth> ¦ doc/master: 3f1dfd0b0d | Create a section for the <?{}> and <!{}> operators.

[14:15] <Geth> ¦ doc/master: 2df45c6595 | A complete example of <?{}>.

[14:15] <Geth> ¦ doc/master: 1615aa92de | Add a method example for <?{}>.

[14:15] <Geth> ¦ doc/master: 7069d05edd | Add an example for <!{}>.

[14:15] <Geth> ¦ doc/master: 098a4316ba | Merge branch 'master' of github.com:perl6/doc

[14:15] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/f8f82bcde8...098a4316ba

[14:16] *** zakharyas joined
[14:16] <timotimo> jnthn: CurriedRoleHOW should probably give access to named_args, too, right?

[14:27] *** hudo joined
[14:30] *** lowbro joined
[14:30] *** lowbro left
[14:30] *** lowbro joined
[14:35] *** raschipi joined
[14:40] <raschipi> 1,2,3,3,:as({10}).unique.say

[14:40] <evalable6> raschipi, rakudo-moar bdb4d34d3: OUTPUT: «WARNINGS for /tmp/yJ8YZDLDF8:␤(as => -> ;; $_? is raw { #`(Block|93934981860864) ... })␤Us…»

[14:40] <evalable6> raschipi, Full output: https://gist.github.com/ef1a7fe442e704bdee6a9e0b348e24de

[14:48] <AlexDaniel`> heh

[14:48] *** jeromelanteri joined
[14:50] *** ZzZombo left
[14:50] *** ZzZombo joined
[14:54] *** a3r0 left
[14:54] <raschipi> I'm testing the bot, please disregard the code.

[14:56] <raschipi> (:$_ :$_)

[15:01] *** raschipi_ joined
[15:03] *** raschipi left
[15:04] *** skids joined
[15:07] *** p6lert joined
[15:14] *** raschipi_ is now known as raschipi

[15:23] *** zeddy_k joined
[15:26] *** ChoHag joined
[15:26] *** jeromelanteri left
[15:26] *** MasterDuke left
[15:32] *** hudo left
[15:32] *** aindilis left
[15:32] *** aindilis joined
[15:44] *** wamba left
[15:45] *** [Coke] joined
[15:45] *** [Coke] left
[15:45] *** [Coke] joined
[15:45] * [Coke] thanks moritz++ for getting his irc home working again!

[15:49] *** wamba joined
[15:54] *** wamba left
[15:55] <moritz> you're welcome

[15:56] * [Coke] installed some crap, hopefully not too much.

[15:58] <El_Che> ./backdoor.js

[16:00] *** AlexDaniel joined
[16:01] <moritz> [Coke]: fwiw I haven't configured IPv6 on irc.p6c.org yet; if you need it, please let me know

[16:02] *** stmuk joined
[16:04] *** stmuk_ left
[16:08] <[Coke]> nope

[16:12] *** Ven`` joined
[16:12] <Ven``> .u ︀ ︀ ︀︀︀ ︀ ︀

[16:12] <yoleaux> U+0020 SPACE [Zs] ( )

[16:12] <Ven``> o/

[16:12] <yoleaux> U+FE00 VARIATION SELECTOR-1 [Mn] (◌︀)

[16:14] *** zakharyas left
[16:17] *** samcv left
[16:17] *** samcv joined
[16:25] *** natrys joined
[16:25] *** zeddy_k left
[16:26] *** khw joined
[16:28] *** cdg_ joined
[16:28] *** lowbro left
[16:31] *** cdg left
[16:33] *** troys joined
[16:53] *** wamba joined
[16:58] *** xtreak joined
[17:00] *** domidumont left
[17:01] *** mcmillhj left
[17:01] <Geth> ¦ doc/master: 4 commits pushed by (Luca Ferrari)++

[17:01] <Geth> ¦ doc/master: b9415d8674 | Document Any.append.

[17:01] <Geth> ¦ doc/master: eff784385c | Add Any.serial.

[17:01] <Geth> ¦ doc/master: 7b7de10162 | Make it clear what Any.hash does.

[17:01] <Geth> ¦ doc/master: 7b571aa73a | Make it clear the distinction between Any.Hash and Any.hash.

[17:01] *** ZzZombo left
[17:01] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/098a4316ba...7b571aa73a

[17:01] *** ZzZombo joined
[17:02] *** stmuk_ joined
[17:04] *** stmuk left
[17:04] *** zakharyas joined
[17:04] *** zakharyas left
[17:05] *** Ven`` left
[17:05] *** st_elmo joined
[17:07] *** mcmillhj joined
[17:08] <Geth> ¦ doc: a5b0c6f431 | (Will "Coke" Coleda)++ | 2 files

[17:08] <Geth> ¦ doc: fix typos

[17:08] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a5b0c6f431

[17:10] <[Coke]> btw, if you have local changes to docs, you can run " TEST_FILES='doc/Type/Any.pod6 doc/Type/Mu.pod6' make xtest" to limit the tests to just the files you've edited.

[17:11] *** imcsk8 joined
[17:13] *** mcmillhj left
[17:21] *** zakharyas joined
[17:21] *** mcmillhj joined
[17:28] *** traxex2 left
[17:29] *** scimon left
[17:33] *** epony left
[17:33] *** traxex2 joined
[17:43] *** El_Che left
[17:43] *** El_Che joined
[17:44] *** El_Che left
[17:44] *** traxex2 left
[17:46] *** dakkar left
[17:47] *** aindilis left
[17:47] *** El_Che joined
[17:48] *** traxex2 joined
[17:48] *** Kaiepi left
[17:52] *** traxex2 left
[17:53] *** traxex2 joined
[17:55] *** rindolf left
[18:01] *** rindolf joined
[18:01] *** zakharyas left
[18:01] *** domidumont joined
[18:03] *** zakharyas joined
[18:04] *** zakharyas left
[18:04] *** khisanth_ left
[18:04] *** zakharyas joined
[18:05] *** zakharyas left
[18:07] *** zakharyas joined
[18:14] *** xtreak left
[18:18] *** khisanth_ joined
[18:20] *** bart__ joined
[18:22] *** epony joined
[18:26] *** darutoko left
[18:29] *** traxex2_ joined
[18:29] *** traxex2 left
[18:31] *** st_elmo left
[18:32] *** setty1 joined
[18:37] *** rindolf left
[18:46] *** rindolf joined
[18:55] *** pochi joined
[18:55] *** cdg_ left
[18:56] *** bart__ left
[18:58] *** enoeht joined
[19:02] *** sunnavy left
[19:05] *** sunnavy joined
[19:10] *** traxex2_ left
[19:16] *** zeddy_k joined
[19:23] *** enoeht left
[19:24] *** enoeht joined
[19:26] *** traxex2 joined
[19:27] *** saramaebee joined
[19:27] *** cdg joined
[19:30] *** comborico1611 joined
[19:33] <saramaebee> hello! i'm brand new to perl 6, (and perl in general), but I'm coming to it for code golfing. Most of the top scores (of supported languages) have perl6 as the language. For what I'm working on, I've got 2 for loops. Perl's for loops are a bit awkward to me, not having prior experience. I

[19:33] <saramaebee> 've got all the math's figured out (https://pastebin.com/MNrpfaQG), I just don't know how to access the variables from within perl's for loops

[19:35] <saramaebee> i was originally doing something like `for ^100 { for $_ {` but then I realised, how could do the modulus equation with both? 

[19:35] <raschipi> saramaebee: Just note that the way point are counted in our own golf site https://code-golf.io/ make it so Perl6 get's in front in score. Golfers in other languages count the point in different ways that give advantages to their languages.

[19:35] *** mantovani left
[19:35] <saramaebee> i'd still like to attempt it

[19:36] <saramaebee> i got to 69 chars in JS, and 72 in Lua 

[19:36] <raschipi> right, I will help you

[19:36] <saramaebee> thanks :)

[19:36] <colomon> saramaebee: looking at your JS code, it looks like you want somethng like    for ^100 -> $i { for ^*$i -> $j {  

[19:37] *** enoeht left
[19:37] <saramaebee> Ahh, ok i think I get it. so using `->` sets the iterated variable to whatever follows?

[19:37] <raschipi> I would suggest that, using the point block to name the variables.

[19:37] <colomon> saramaebee: yes

[19:37] <raschipi> Yes.

[19:38] <saramaebee> Thanks :)

[19:38] <colomon> I don’t do JS … is this just trying to print 1    1 2     1 2 3     1 2 3 4    etc?

[19:39] <colomon> sorry, there’s a  % in there I missed

[19:39] *** enoeht joined
[19:39] <saramaebee> it should print the number if modulus is 0

[19:39] <saramaebee> i use less than 1 just to shorten the code

[19:40] <colomon> so you’re checking all the possible things that might divide each number?

[19:40] <saramaebee> yep . I'm printing the divisors of each number from 1 to 100

[19:40] <saramaebee> as raschipi mentioned, it's from http://code-golf.io/

[19:40] * colomon is going to try to resist golfing this for saramaebee   :)

[19:40] <saramaebee> the first challenge

[19:40] <saramaebee> my Lua golf topped the first place that was there

[19:40] <raschipi> It's difficult not spoiling it to you.

[19:41] <saramaebee> granted, not many people do Lua

[19:41] <saramaebee> it's a bit tough for me, considering I don't know Perl at all either haha

[19:41] <saramaebee> i'm having to google how things work in Perl compared to other languages

[19:41] <raschipi> You're DummySphere there?

[19:41] <saramaebee> nope

[19:42] <saramaebee> saramaebee

[19:42] <saramaebee> i replaced his score :p

[19:42] <raschipi> I see, it only shows your best language.

[19:42] <saramaebee> oh hmm

[19:42] *** zeddy_k left
[19:43] <saramaebee> For Divisors, under Lua, I got 72 bytes

[19:43] *** zeddy_k joined
[19:43] <saramaebee> compared to his 78

[19:43] <raschipi> Need to check the "duplicate entries" at the top to see multiple languages. Now I see your 72 holes solution using Lua.

[19:43] <leont> «for ^*$i» what is that star doing there?

[19:43] <saramaebee> (I was curious of that too actually)^

[19:43] <colomon> typo?

[19:44] <colomon> yeah, typo

[19:44] <leont> Ah, that makes sense

[19:44] <colomon> sorry, my right index finger has stitches and typing without it is … not much slower, but much more error prone

[19:44] <raschipi> saramaebee: https://perl6advent.wordpress.com/2017/12/23/day-23-the-wonders-of-perl6-golf/ -> some tips

[19:44] <saramaebee> i wish say didn't newline. print has too many characters :p

[19:45] <raschipi> use put to get it without a new line

[19:45] <saramaebee> thanks!

[19:45] <colomon> saramaebee: also for the problem, 1..100 is maybe better than ^100?  The latter is 0..99

[19:45] <saramaebee> ill do ^101

[19:45] <saramaebee> shorter

[19:45] *** enoeht left
[19:45] <colomon> but includes 0 … I guess I don’t know the exact rules in effect here.

[19:46] <saramaebee> does ^101 include 0? i just need 1 to 100

[19:46] <raschipi> say (^100)+1

[19:46] *** evalable6 left
[19:46] <raschipi> m: say (^100)+1

[19:46] *** evalable6 joined
[19:46] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «1..^101␤»

[19:46] *** enoeht joined
[19:46] <raschipi> ^101 includes 0

[19:46] <colomon> (^100)+1 is longer than 1..100

[19:46] <raschipi> "(^100)+1" doesn't include 0

[19:46] <leont> For golfing, «for ^100 -> $i { for ^$i» can also be written as «for ^100 { for ^$^i»

[19:47] <saramaebee> okay. 1..100 then

[19:47] <leont> Wouldn't do that for non-golfing reason though

[19:47] <saramaebee> tells me shape declaration isn't yet implemented

[19:48] *** zeddy_k left
[19:49] <saramaebee> if i were to do     for 1..100 { for ^$^i {    then how would I do the modulus?

[19:49] <raschipi> m: say 1..Ⅽ

[19:49] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «1..100␤»

[19:49] *** domidumont left
[19:49] <saramaebee> oooh it allows roman numerals?

[19:49] *** Kaiepi joined
[19:49] *** traxex2_ joined
[19:49] <colomon> WHAT

[19:49] <saramaebee> thats right, perl allows unicode for fractions etc as well

[19:49] <saramaebee> so for quartering, halving, sixteenths etc you can use unicode

[19:49] <saramaebee> less bytes

[19:50] *** traxex2 left
[19:50] <colomon> m: say “say 1..Ⅽ”.ords

[19:50] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «(115 97 121 32 49 46 46 8557)␤»

[19:50] <raschipi> m: 1..ↂ

[19:50] <colomon> Silly unicode

[19:50] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «WARNINGS for <tmp>:␤Useless use of ".." in expression "1..ↂ" in sink context (line 1)␤»

[19:50] *** enoeht left
[19:50] <raschipi> m: say 1..ↂ

[19:50] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «1..10000␤»

[19:51] <saramaebee>     for 1..C{for ^$^i{if($i%$j<1){put($i~" ")}}say()}    is what ive got right now, but theres a compiler error

[19:51] <saramaebee> cannot use placeholder parameter $^i outside of a sub or block

[19:52] * colomon tears himself away from golfing to go back to $work

[19:52] *** traxex2_ left
[19:53] *** enoeht joined
[19:53] <saramaebee> it took up quite a bit of time yesterday for me. My initial lua was 82 characters. I shaved 100 off, before declaring there was no shorter way

[19:53] *** amalia___ left
[19:53] <saramaebee> i even tried doing it in a single for loop

[19:53] <saramaebee> i shaved 10 off, not 100

[19:53] <leont> You want to use $i%%$j

[19:53] <colomon> $^j, no?

[19:54] <raschipi> m: for 1..C{for ^$^i{if($i%$j<1){put($i~" ")}}say()

[19:54] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use placeholder parameter $^i outside of a sub or block␤at <tmp>:1␤------> 3for 1..C{for ^$^i7⏏5{if($i%$j<1){put($i~" ")}}say()␤»

[19:54] <saramaebee> thanks camelia :D

[19:54] <leont> And you need a space between $i and {

[19:54] *** traxex2 joined
[19:54] <leont> And yes, $^j

[19:55] <saramaebee> i still get the error camelia sent

[19:55] <raschipi> camelia is the bot that executes perl6 code in the newest development commit 

[19:55] <saramaebee> oh

[19:55] <saramaebee> is still get that error

[19:55] <raschipi> m: say "hello there"

[19:55] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «hello there␤»

[19:55] <saramaebee> well thats bloody  useful

[19:56] <raschipi> if you're gonna send many, message the bot

[19:56] <saramaebee> m: for 1..ↂ{for ^$^i {if($i%$j<1){put($i~" ")}}say()}

[19:56] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use placeholder parameter $^i outside of a sub or block␤at <tmp>:1␤------> 3for 1..ↂ{for ^$^i7⏏5 {if($i%$j<1){put($i~" ")}}say()}␤»

[19:56] *** cdg left
[19:56] <saramaebee> that's my current error. am I doing something wrong?

[19:56] <leont> for 1..ↂ{for ^$^i {if($i%$^j<1){put($i~" ")}}say()}

[19:56] <leont> m: for 1..ↂ{for ^$^i {if($i%$^j<1){put($i~" ")}}say()}

[19:56] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use placeholder parameter $^i outside of a sub or block␤at <tmp>:1␤------> 3for 1..ↂ{for ^$^i7⏏5 {if($i%$^j<1){put($i~" ")}}say()}␤»

[19:57] <leont> You need a space after the ↂ

[19:58] <saramaebee> ok updated code: for 1..ↂ {for ^$^i {if($i%$j <1){put($i~" ")}}say()}

[19:58] <saramaebee> $j is not a declared variable

[19:58] <leont> $^j

[19:58] <saramaebee> oh

[19:58] <leont> also you want to use $i%%$^j

[19:58] <colomon> note that right now you have a divide by zero error

[19:58] <leont> that way you don't need the <1 check

[19:59] <saramaebee> thats a thing?? I love perl omg

[19:59] <leont> And if isn't a function, you don't need those parentheses, but you do need a space

[19:59] <saramaebee> if id need a space after (prior to the bracket) theres no need to change it, since its same amount of chars

[20:00] <leont> for 1..ↂ {for ^$^i {if $i%%$^j {put($i~" ")}};say()}

[20:00] <leont> And «$i~" "» can be written as "$i "

[20:00] *** enoeht left
[20:01] <saramaebee> m: for 1..ↂ {for ^$^i {if($i%%$^j){put($i )}};say()}

[20:01] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    if used at line 1␤␤»

[20:01] <colomon> saramaebee: back 8-9 years ago we noticed we were writing $i % $j == 0 all the time, and some wise guy got the idea of using the negation metaoperator to make it just $i !% $j.  That doesn’t actually work, but I think it did wrongly at one point, and we lobbied for a replacement when they fixed the bug and got %%

[20:01] <leont> and «if <foo> {bar}» can also be written as «<foo>&&bar»

[20:01] <raschipi> your last version is missing: ""

[20:01] <saramaebee> interesting. i need to look at ternary operators more closely

[20:02] <raschipi> That's not a ternary, just a logic operator

[20:02] <raschipi> Ternary in Perl6 would be ?? !!

[20:02] <saramaebee> oh thats right. double quotes mean that it will parse variables, single means it wont, correct?

[20:02] <leont> Yeah

[20:02] *** enoeht joined
[20:02] <raschipi> yep

[20:02] <saramaebee> i wish Lua would implement that. id shave off a few more characters yet again

[20:02] *** enoeht left
[20:03] <saramaebee> I've added quotes, yet i still get the `undeclared routine: if used at line 1` error

[20:03] <raschipi> you have parenthesis without space after the if

[20:03] <saramaebee> oh

[20:03] <saramaebee> then it would shave chars

[20:03] <saramaebee> thank y ou guys so much for helping me

[20:03] <raschipi> any word followed by parenthesis will be treated as a function name

[20:04] <leont> for 1..ↂ {for ^$^i {$i%%$^j&&put "$i "};say()}

[20:05] *** wamba left
[20:05] *** mcmillhj left
[20:07] <leont> Erm, I think that last $i should be a $j, based on the lua/js versions

[20:07] <saramaebee> it should

[20:07] <saramaebee> i fixed that myself haha

[20:08] <leont> for 1..ↂ {$^i%%$_&&put "$_ "for ^$^i};say()

[20:08] <leont> for 1..ↂ {$^i%%$_&&put "$_ "for ^$i};say()

[20:08] <AlexDaniel> what the hell

[20:08] <saramaebee> thats a work of art holy shit

[20:08] <AlexDaniel> no really, what the?

[20:08] <AlexDaniel> m: for 1..ↂ {$^i%%$_&&put "$_ "for ^$i};say()

[20:08] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «(signal SEGV)1 ␤»

[20:09] *** traxex2 left
[20:09] <AlexDaniel> did somebody submit a ticket with this?

[20:09] <saramaebee> the problem with the output is how put works. put nextlines, i think? (try it here: https://tio.run/#perl6)

[20:09] <AlexDaniel> the problem is that it segfaults

[20:09] <AlexDaniel> 6c: for 1..ↂ {$^i%%$_&&put "$_ "for ^$i};say()

[20:10] <saramaebee> m: for 1..ↂ {$^i%%$_&&put "$_ "for ^$i};say()

[20:10] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «(signal SEGV)1 ␤»

[20:10] <saramaebee> it just prints 1

[20:10] <AlexDaniel> it segfaults

[20:11] <saramaebee> how can I fix that? o.O

[20:11] *** eserte joined
[20:11] <AlexDaniel> it should not behave like that, this is a fat bug

[20:11] <AlexDaniel> huggable: rakudobug

[20:11] <huggable> AlexDaniel, Report bugs on https://github.com/rakudo/rakudo/issues/new    If you don't have access to GitHub, you can email your report to [email@hidden.address] . See also: https://github.com/rakudo/rakudo/wiki/rt-introduction

[20:11] <AlexDaniel> saramaebee: can you please submit a ticket?

[20:11] *** committable6 left
[20:11] *** committable6 joined
[20:12] <saramaebee> sure

[20:13] <leont> It works fine for me, but my rakudo is several months old

[20:13] <AlexDaniel> committable6: HEAD say 42

[20:13] <committable6> AlexDaniel, ¦HEAD(bdb4d34): «42␤»

[20:13] <AlexDaniel> committable6: HEAD for 1..ↂ {$^i%%$_&&put "$_ "for ^$i};say()

[20:13] <leont> 2017.10-4-g4fca94743 to be precise

[20:13] <committable6> AlexDaniel, ¦HEAD(bdb4d34): «1 ␤ «exit signal = SIGSEGV (11)»»

[20:13] <AlexDaniel> committable6: 2017.10-4-g4fca94743 for 1..ↂ {$^i%%$_&&put "$_ "for ^$i};say()

[20:13] <committable6> AlexDaniel, ¦2017.10-4-g4fca94743: «Cannot find this revision (did you mean “3cff74c”?)»

[20:13] *** mcmillhj joined
[20:13] <AlexDaniel> committable6: 4fca94743 for 1..ↂ {$^i%%$_&&put "$_ "for ^$i};say()

[20:13] <committable6> AlexDaniel, ¦4fca947: «Cannot find this revision (did you mean “2f0da94”?)»

[20:13] <saramaebee> We're using Rakudo version 2018.01 built on MoarVM 2018.01, impleneting Perl 6.3

[20:13] <s0me0ne-unkn0wn> Same here, works for me, perl6::version=2017.10

[20:13] <saramaebee> 6.c*

[20:13] <saramaebee> i can't type

[20:14] <AlexDaniel> committable6: 2017.10 for 1..ↂ {$^i%%$_&&put "$_ "for ^$i};say()

[20:14] <committable6> AlexDaniel, https://gist.github.com/e34af0b1c3bda308c20fd43a4e9dd268

[20:14] *** zakharyas left
[20:14] *** traxex2 joined
[20:14] *** bart__ joined
[20:14] <AlexDaniel> oops that's a very large output :)

[20:14] <raschipi> m: say ↂ

[20:14] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «10000␤»

[20:15] <AlexDaniel> is there any easy way to reproduce without put?

[20:15] <saramaebee> so ill go back to C

[20:15] <saramaebee> use print

[20:15] <leont> or say

[20:15] <raschipi> m: 1..Ⅽ {$^i%%$_&&put "$_ "for ^$i};say()

[20:15] <AlexDaniel> no like… without printing anything to stdout

[20:15] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unexpected block in infix position (missing statement control word before the expression?)␤at <tmp>:1␤------> 031..Ⅽ7⏏5 {$^i%%$_&&put "$_ "for ^$i};say()␤    expecting any of:␤        in…»

[20:15] *** traxex2 left
[20:15] <AlexDaniel> so that we can use the bot to bisect it

[20:15] <saramaebee> oh

[20:16] <AlexDaniel> I have a trick up my sleeve but hmm…

[20:16] <raschipi> m: for 1..ↂ {for 1..$^i {if $i%%$^j {sink "$i "}};}

[20:16] <saramaebee> i'm just doing some golf, but I've not used Perl a day in my life before today. i'm still learning what builtins are available, let alone do anything 

[20:17] <AlexDaniel> 6c: my $p = run :out(Nil), $*EXECUTABLE, ‘-e’, ‘for 1..ↂ {$^i%%$_&&put "$_ "for ^$i};say()’; say $p.signal

[20:17] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «(timeout)WARNINGS for <tmp>:␤»

[20:17] <AlexDaniel> oh, that thing loops forever in its “correct” version, right?

[20:17] <saramaebee> no, itll just go 1 to 100

[20:18] <raschipi> No, it just goes up to 10 000

[20:18] <AlexDaniel> but? https://gist.github.com/Whateverable/e34af0b1c3bda308c20fd43a4e9dd268

[20:18] <raschipi> ↂ is 10000

[20:18] <saramaebee> yea

[20:18] <leont> Try Ⅽ instead of ↂ I guess

[20:18] <saramaebee> I did, it reads C as a function

[20:18] <saramaebee> oh

[20:18] <saramaebee> imd um

[20:18] <saramaebee> ok

[20:18] <saramaebee> now it uses Ⅽ

[20:19] <raschipi> Not C, Ⅽ

[20:19] *** mcmillhj left
[20:19] <saramaebee> Yea, i fixed it

[20:19] <AlexDaniel> yea :D

[20:19] <raschipi> m: say Ⅽ

[20:19] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «100␤»

[20:19] *** traxex2 joined
[20:19] <saramaebee> does put nextline? with     for 1..Ⅽ {$^i%%$_&&put "$_ "for ^$i};say()     it nextlines after each item

[20:19] <leont> https://docs.perl6.org/routine/put

[20:19] <leont> Yes

[20:19] <raschipi> C is the letter, Ⅽ is the Roman numeral

[20:20] *** committable6 left
[20:20] <leont> If you don't want that, print is your friend

[20:20] *** committable6 joined
[20:20] *** ChanServ sets mode: +v committable6

[20:20] <saramaebee> yea, but thats more chars ;)

[20:20] <AlexDaniel> c: 2017.10 my $p = run :out(Nil), $*EXECUTABLE, ‘-e’, ‘for 1..ↂ {last if $++ > 1000; $^i%%$_&&put "$_ "for ^$i};say()’; say $p.signal

[20:20] <committable6> AlexDaniel, ¦2017.10: «0␤»

[20:20] <AlexDaniel> 6c: my $p = run :out(Nil), $*EXECUTABLE, ‘-e’, ‘for 1..ↂ {last if $++ > 1000; $^i%%$_&&put "$_ "for ^$i};say()’; say $p.signal

[20:20] <saramaebee> alrighty i've chopped it to this:     for 1..Ⅽ {$^i%%$_&&print "$_ "for ^$i};

[20:20] <colomon> I suspect the best approach is to only print (well, say) once per $i  ;)

[20:21] <committable6> AlexDaniel, ¦2015.12,2016.01.1,2016.02,2016.03,2016.04,2016.05,2016.06,2016.07.1,2016.08.1,2016.09,2016.10,2016.11,2016.12,2017.01,2017.02,2017.03,2017.04.3,2017.05,2017.06,2017.07,2017.08,2017.09,2017.10,2017.11,2017.12: «0␤» ¦2018.01,HEAD(bdb4d34): «11␤»

[20:21] <AlexDaniel> finally

[20:21] <saramaebee> yea, but thats extra chars declaring a string and cocatenating ;) if i use what i've got, i just need a way to nextline, since say() and put() don't

[20:21] <AlexDaniel> bisect: my $p = run :out(Nil), $*EXECUTABLE, ‘-e’, ‘for 1..ↂ {last if $++ > 1000; $^i%%$_&&put "$_ "for ^$i};say()’; say $p.signal

[20:21] <AlexDaniel> oh my that doesn't look good

[20:21] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=bdb4d34) because on both starting points the exit code is 0

[20:21] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/c478835b37013b2b36eea6737a176188

[20:21] <bisectable6> AlexDaniel, (2018-01-10) https://github.com/rakudo/rakudo/commit/8c5af9b979a4a7aa5f18c433e46f704dc44fd6ab

[20:22] *** raschipi left
[20:22] <colomon> m: say (1..100).grep(*.is-prime)

[20:22] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)␤»

[20:22] <AlexDaniel> this: https://github.com/MoarVM/MoarVM/commit/db706bb7dfa68bd025d823e3871222bf3b4afb59

[20:22] <AlexDaniel> saramaebee: sorry, is the bug report coming?

[20:23] <AlexDaniel> I'm planning to run away in a few moments so want to get this stuff out there :)

[20:23] *** samcv left
[20:23] *** samcv joined
[20:24] <saramaebee> i'm still not entirely sure what you'd like, since I'm not entirely sure what's going on. I understand the maths and what I'm doing, but I don't know enough about perl to know why it's crashing. I can submit what i've got (the perl version, the code, and that theres a segmentation fault when running it

[20:25] <AlexDaniel> hm, ok let me do it quickly then

[20:27] <AlexDaniel> c: 8c5af9b9^,8c5af9b9 my $p = run :out(Nil), $*EXECUTABLE, ‘-e’, ‘for 1..ↂ {last if $++ > 1000; $^i%%$_&&put "$_ "for ^$i};say()’; say $p.signal

[20:27] <committable6> AlexDaniel, ¦8c5af9b9^: «0␤» ¦8c5af9b: «11␤»

[20:28] *** mcmillhj joined
[20:30] <AlexDaniel> saramaebee: GH#1483

[20:30] <synopsebot> GH#1483 [open]: https://github.com/rakudo/rakudo/issues/1483 [SEGV][regression][⚠ blocker ⚠] Cross-HLL inlining segfault 

[20:30] <AlexDaniel> saramaebee: thanks for the discovery :)

[20:31] <AlexDaniel> or whoever found it

[20:31] <saramaebee> I don't know if i directly discovered it, but I guess I brought about the discussion?

[20:31] <TimToady> saramaebee++ in any case

[20:32] <AlexDaniel> .tell jnthn fwiw you may be interested in this: https://github.com/rakudo/rakudo/issues/1483

[20:32] <yoleaux> AlexDaniel: I'll pass your message to jnthn.

[20:34] *** mcmillhj left
[20:34] *** natrys left
[20:34] <AlexDaniel> saramaebee: oh, it's for code-golf.io :)

[20:34] <saramaebee> yep!

[20:34] * AlexDaniel haven't visited that website for quite some time

[20:35] <saramaebee> i'm slowly working my way through it with lua

[20:35] *** bart__ left
[20:35] <AlexDaniel> or maybe I did a week or so ago, but my brainfuck solution wasn't fast enough so I ran away :D

[20:35] <saramaebee> i did pass the divisors entirely in JSFuck!

[20:35] <saramaebee> 89k characters

[20:35] <saramaebee> i wish code-golf had brainfuck

[20:36] *** traxex2 left
[20:36] <saramaebee> id be at the top of the leaderboards with all the messing around i do in it

[20:38] *** sena_kun left
[20:41] *** traxex2 joined
[20:43] *** mcmillhj joined
[20:44] *** zakharyas joined
[20:44] *** saramaebee left
[20:48] *** mcmillhj left
[20:50] *** lucasb joined
[20:54] *** detlev joined
[20:54] *** detlev left
[20:54] <lucasb> Hello. I just read about this bug in the backlog

[20:55] <lucasb> as a data point, it do NOT segfaults here on my machine. I'm on x86 linux

[20:55] <AlexDaniel> lucasb: rakudo version?

[20:56] <lucasb> 2018.01

[20:58] *** samcv left
[20:58] *** samcv joined
[20:58] *** mcmillhj joined
[20:58] *** dogbert17 joined
[20:59] *** samcv left
[21:00] *** samcv joined
[21:00] *** Bonomani joined
[21:03] *** mcmillhj left
[21:04] *** cdg joined
[21:05] *** isBEKaml joined
[21:06] *** cdg_ joined
[21:09] *** cdg left
[21:10] *** zakharyas left
[21:18] *** mcmillhj joined
[21:21] *** detlev joined
[21:22] *** detlev left
[21:23] *** detlev joined
[21:23] *** detlev left
[21:24] *** mcmillhj left
[21:27] *** Zoffix joined
[21:27] *** Zoffix left
[21:31] *** aindilis joined
[21:37] <lucasb> fwiw, I tried to short it a little bit

[21:38] *** mcmillhj joined
[21:38] <lucasb> m: for ^1000 -> $i { for ^$i { 1 %% $_ && 1 } }

[21:38] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «(signal SEGV)WARNINGS for <tmp>:␤»

[21:38] <lucasb> *shorten

[21:38] *** isBEKaml left
[21:40] *** lucasb left
[21:43] *** mcmillhj left
[21:49] *** mcmillhj joined
[21:51] *** isBEKaml joined
[21:54] *** mcmillhj left
[21:55] <tyil> so, I made IRC::Client::Plugin::UrlTitle, which seems to work when I include it with -I, but trying to install it in a perl6 docker image fails with Missing serialize REPR function for REPR VMException (BOOTException)

[21:55] <tyil> so I've tried installing it on my laptop as well, after dropping my ~/.perl6 dir, and I'm getting the same error there

[21:56] <tyil> my laptop is running 2018.01, the docker image I've tried on 2018.01 and 2017.12

[21:56] <tyil> all show the same error

[21:58] <tyil> anyone who might have an idea what's causing this?

[22:00] *** mcmillhj joined
[22:05] *** mcmillhj left
[22:05] *** TEttinger joined
[22:07] *** epony left
[22:09] *** comborico1611 left
[22:13] *** skids left
[22:14] *** espadrine_ joined
[22:16] *** mcmillhj joined
[22:19] *** rindolf left
[22:21] *** mcmillhj left
[22:24] *** setty1 left
[22:31] *** dustinm` left
[22:32] *** leont left
[22:33] *** mcmillhj joined
[22:35] *** dustinm` joined
[22:39] *** mcmillhj left
[22:41] *** Zoffix joined
[22:42] <Zoffix> tyil: it means at some point you have an Exception you're trying to serialize. Got any constants?

[22:42] *** markong joined
[22:42] <Zoffix> m: BEGIN with '/tmp/2018.01/'.IO.mkdir { .add('Foo.pm6').spurt: 'constant $x := do { try +"a"; $! }' }; use lib </tmp/2018.01>; use Foo

[22:42] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «===SORRY!===␤Missing serialize REPR function for REPR VMException (BOOTException)␤»

[22:45] <Zoffix> m: BEGIN with '/tmp/2018.01/'.IO.mkdir { .add('Foo.pm6').spurt: 'constant $x := try +"a";' }; use lib </tmp/2018.01>; use Foo # don't even need to explicitly use $!

[22:45] <camelia> rakudo-moar bdb4d34d3: OUTPUT: «===SORRY!===␤Missing serialize REPR function for REPR VMException (BOOTException)␤»

[22:45] <Zoffix> m: BEGIN with '/tmp/2018.01/'.IO.mkdir { .add('Foo.pm6').spurt: 'constant $x := try +"a"; BEGIN $! = Nil' }; use lib </tmp/2018.01>; use Foo

[22:45] <camelia> rakudo-moar bdb4d34d3: ( no output )

[22:47] *** GregDonald left
[22:47] *** mcmillhj joined
[22:51] <tyil> Zoffix: source is here https://github.com/scriptkitties/perl6-IRC-Client-Plugin-UrlTitle/blob/master/lib/IRC/Client/Plugin/UrlTitle.pm6

[22:52] *** mcmillhj left
[22:54] <tyil> I dont have any `constant` keywords in use

[22:55] *** comborico1611 joined
[22:58] *** MahBot joined
[22:58] *** someuser left
[22:58] <Zoffix> https://perl6.party

[22:58] <MahBot> 02https://perl6.party: Welcome - Perl 6 Party

[22:59] *** MahBot left
[22:59] <Zoffix> Works fine for me on 2018.01.103

[22:59] <Zoffix> Installed using zef --serial install https://github.com/scriptkitties/perl6-IRC-Client-Plugin-UrlTitle/archive/master.zip

[22:59] <Zoffix> Maybe try re-installing the deps or something. No idea.

[23:00] <tyil> hmm

[23:01] <tyil> I used an empty ~/.perl6 in an attempt to ensure it was this specific module breaking things

[23:02] <tyil> I'mma try the --serial install and if that works, check if there's any differences between the tarball on cpan and the zip

[23:02] <tyil> there shouldn't be, but then again this shouldn't be breaking either

[23:02] *** mcmillhj joined
[23:03] <Zoffix> That's not where my modules get installed.

[23:03] <Zoffix> $ zef locate IRC::Client

[23:03] <Zoffix> ===> From Distribution: IRC::Client:ver<3.007004>:auth<>:api<>

[23:03] <Zoffix> IRC::Client => /home/zoffix/rakudo/install/share/perl6/site/sources/91300E2449A727CEFB2F4BC51BC01429C567F65B

[23:04] *** pmurias left
[23:06] <tyil> heh

[23:07] <tyil> the --serial install failed for the same reason on me

[23:07] *** mcmillhj left
[23:08] <tyil> but I also see it referring to /var/rakudobrew with the install path 

[23:08] <tyil> so, I'll clean the right dir this time and build a new perl 6 + zef while I'm at it so I can be sure it's a clean install

[23:14] *** mcmillhj joined
[23:14] <Zoffix> How come it mentions rakudobrew? Is that what you're using to build stuff?

[23:15] <Zoffix> There have been issues with it in the past. You may want to consider ditching it, if that's what you're using.

[23:15] <Zoffix> huggable: sauce

[23:15] <huggable> Zoffix, Install latest version of Rakudo from source: https://github.com/zoffixznet/r#table-of-contents

[23:15] <Zoffix> there's also the controvercial https://rakudup.github.io/

[23:16] * Zoffix &

[23:16] *** Zoffix left
[23:19] *** mcmillhj left
[23:28] *** g- joined
[23:34] *** mcmillhj joined
[23:34] *** imcsk8 left
[23:36] *** avalenn left
[23:39] *** mcmillhj left
[23:43] *** imcsk8 joined
[23:46] *** mcmillhj joined
[23:51] *** mcmillhj left
[23:58] *** mcmillhj joined
