[00:02] *** zeddy_k joined
[00:05] *** Geth left
[00:06] *** Geth joined
[00:06] *** ChanServ sets mode: +v Geth

[00:08] *** Geth left
[00:08] *** Geth joined
[00:08] *** ChanServ sets mode: +v Geth

[00:10] *** Geth left
[00:10] *** Geth joined
[00:10] *** ChanServ sets mode: +v Geth

[00:14] *** empT left
[00:18] *** markong left
[00:21] *** comborico left
[00:24] *** comborico1611 joined
[00:26] *** dct left
[00:40] *** ZofBot left
[00:42] *** ZofBot joined
[00:42] *** ChanServ sets mode: +v ZofBot

[00:42] *** buggable left
[00:42] *** buggable joined
[00:42] *** ChanServ sets mode: +v buggable

[00:45] *** Rawriful left
[00:48] *** johnnymacs left
[00:52] *** skids joined
[01:00] *** lizmat joined
[01:01] *** pmurias left
[01:04] *** Cabanossi left
[01:05] *** Cabanossi joined
[01:05] *** lizmat left
[01:11] *** leont left
[01:12] *** char_var[buffer] joined
[01:22] *** konsolebox left
[01:29] *** konsolebox joined
[01:29] *** Herby_ joined
[01:29] <Herby_> \o

[01:31] <Herby_> o/

[01:32] *** johnnymacs joined
[01:35] *** AlexDaniel left
[01:49] *** cdg joined
[01:52] <char_var[buffer]> o/ Herby_ 

[01:54] *** cdg left
[01:57] *** lizmat joined
[01:58] *** empT joined
[02:03] *** empT left
[02:04] <labster> m: printf |(ÔΩ¢printf |(ÔΩ¢%sÔΩ£xx‚ë°)ÔΩ£xx‚ë°)

[02:04] <camelia> rakudo-moar 4507a5654: OUTPUT: ¬´printf |(ÔΩ¢printf |(ÔΩ¢%sÔΩ£xx‚ë°)ÔΩ£xx‚ë°)¬ª

[02:04] <labster> The fact that the quote language picks up on nested brackets makes for some really nice-looking quines.

[02:06] <Kaiepi> how am i screwing up this http request? https://hastebin.com/etahukucid.php

[02:06] *** comborico1611 left
[02:12] *** zeddy_k left
[02:17] <MasterDuke> Kaiepi: what's the error you get?

[02:17] *** ZzZombo left
[02:17] *** ZzZombo joined
[02:18] <Kaiepi> 400 Bad Request

[02:18] <Kaiepi> https://hastebin.com/atexubayip.http

[02:20] <Kaiepi> oh i seem to be missing some headers hastebin's using

[02:21] <Kaiepi> and Transfer-Encoding should be Accept-Encoding

[02:22] <Kaiepi> this works https://hastebin.com/ozosagayuf.php

[02:27] <MasterDuke> any particular reason you're using "raw" IO::Socket::SSL?

[02:28] *** aborazmeh joined
[02:28] *** aborazmeh left
[02:28] *** aborazmeh joined
[02:34] *** jeromelanteri joined
[02:46] *** ilbot3 left
[02:56] *** Kaiepi left
[02:57] *** ilbot3 joined
[02:57] *** ChanServ sets mode: +v ilbot3

[02:58] *** Kaiepi joined
[03:15] *** aborazmeh left
[03:25] *** empT joined
[03:29] *** empT left
[03:33] *** ryn1x joined
[03:33] <ryn1x> .

[03:34] *** ryn1x left
[03:38] *** ufobat_ joined
[03:41] *** ufobat___ left
[03:42] <Xliff> lizmat: Muggles? LOL!

[03:45] *** lookatme joined
[03:50] *** aborazmeh joined
[03:50] *** aborazmeh left
[03:50] *** aborazmeh joined
[04:03] *** Guest999 joined
[04:03] *** raiph joined
[04:05] *** cdg joined
[04:07] *** Guest999 left
[04:07] *** raiph left
[04:10] *** cdg left
[04:20] *** Cabanossi left
[04:22] *** Cabanossi joined
[04:28] *** aborazmeh left
[04:47] *** skids left
[04:59] *** xtreak joined
[05:00] *** Herby_ left
[05:19] <ZzZombo> Can I like in Perl 5 using glob, add symbols dynamically?

[05:29] *** eliasr left
[05:30] *** johnnymacs is now known as dorothyw

[05:34] *** wamba joined
[05:50] *** khw left
[06:24] <sacomo> ZzZombo: https://docs.perl6.org/language/5to6-nutshell#*_Glob

[06:34] <Kaiepi> <MasterDuke> any particular reason you're using "raw" IO::Socket::SSL?

[06:35] <Kaiepi> i'm trying to debug why it doesn't always work on my system

[06:36] <Kaiepi> this coredumps: use IO::Socket::SSL; my $socket := IO::Socket::SSL.new(:host('hastebin.com'), :port(443))

[06:38] <Kaiepi> closing it directly after creating the socket stops that from happening, but trying to read any of its properties still coredumps

[06:40] *** giraffe joined
[06:41] *** empT joined
[06:41] <Kaiepi> can't read the coredump from perl6-gdb-m: Error while reading from file: Malformed UTF-8

[06:43] <Kaiepi> oh i just needed to set the breakpoints earlier

[06:44] *** lowbro joined
[06:44] *** lowbro left
[06:44] *** lowbro joined
[07:02] *** dorothyw is now known as johnnymacs

[07:10] *** imcsk8 left
[07:12] <Xliff> ZzZombo: Something like this? https://perl6advent.wordpress.com/2012/12/20/day-20-dynamic-variables-and-dsl-y-things/

[07:15] *** wamba left
[07:17] *** imcsk8 joined
[07:19] * nine is on a train to Bruxelles :)

[07:25] <ufobat_> oh cool! enjoy fosdem!

[07:26] *** darutoko joined
[07:28] *** ZzZombo left
[07:28] *** ZzZombo joined
[07:30] <ZzZombo> Not quite. Dynamic variables is a different domain altogether.

[07:40] <nine> ufobat_: thanks :)

[07:42] *** espadrine_ left
[07:43] *** empT left
[07:44] *** empT joined
[07:45] *** lookatme left
[07:46] *** wamba joined
[07:49] *** domidumont joined
[07:50] *** lookatme joined
[07:55] *** domidumont left
[07:55] *** domidumont joined
[08:11] *** cschwenz joined
[08:17] *** espadrine_ joined
[08:18] *** leont joined
[08:20] <stmuk> nine: are you going to FOSDEM?

[08:21] * leont is! :-)

[08:24] <stmuk> yay

[08:29] <stmuk> we are probably hitting the Delirium a lot later (hopefully when its quieter) this year

[08:29] *** abraxxa joined
[08:32] *** espadrine_ left
[08:34] *** xtreak left
[08:35] *** leont left
[08:38] *** xtreak joined
[08:40] <nine> stmuk: I am

[08:42] *** scimon joined
[08:52] *** leont joined
[08:54] *** MasterDuke left
[08:58] *** xtreak left
[09:10] *** yqt joined
[09:11] *** zakharyas joined
[09:13] *** zakharyas left
[09:13] *** zakharyas joined
[09:22] <tadzik> \o/

[09:22] <stmuk> excellent hope to see ppl later! getting on the eurostar shortly

[09:24] <scimon> Have a good weekend people. Wish I was going.

[09:32] <buggable> New CPAN upload: Algorithm-GooglePolylineEncoding-1.0.0.tar.gz by SCIMON https://cpan.metacpan.org/authors/id/S/SC/SCIMON/Perl6/Algorithm-GooglePolylineEncoding-1.0.0.tar.gz

[09:32] *** xtreak joined
[09:34] *** Kaiepi left
[09:35] *** Kaiepi joined
[09:51] <stmuk> scimon: its probably streamed live anyway

[09:51] <scimon> Cool

[09:54] *** eliasr joined
[09:58] <Altreus> yeah alas I can't go this year :<

[09:59] <Altreus> I'll have the opportunity to try the live streams

[10:07] *** leont left
[10:15] *** yqt left
[10:16] *** Cabanossi left
[10:22] *** xtreak left
[10:34] *** wamba left
[10:35] *** TEttinger left
[10:38] <ZzZombo> m: my @a=1,2,3;@a[*]:delete;say @a

[10:38] <camelia> rakudo-moar 86e926c76: OUTPUT: ¬´[]‚ê§¬ª

[10:38] <ZzZombo> Shouldn't it be an array of 3 "holes"?

[10:39] <moritz> I believe deleting at the ends shortens the array

[10:39] <moritz> at least at the tail end

[10:39] <moritz> m: @a = 1, 2, 3; @a[2]:delete; say @a.elems

[10:39] <camelia> rakudo-moar 86e926c76: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '@a' is not declared‚ê§at <tmp>:1‚ê§------> 3<BOL>7‚èè5@a = 1, 2, 3; @a[2]:delete; say @a.elems‚ê§¬ª

[10:39] <moritz> m: my @a = 1, 2, 3; @a[2]:delete; say @a.elems

[10:39] <camelia> rakudo-moar 86e926c76: OUTPUT: ¬´2‚ê§¬ª

[10:40] <moritz> m: my @a = 1, 2, 3; @a[0]:delete; say @a.elems

[10:40] <camelia> rakudo-moar 86e926c76: OUTPUT: ¬´3‚ê§¬ª

[10:44] *** zeddy_k joined
[10:52] *** AlexDaniel joined
[10:54] *** empT left
[10:55] *** zakharyas left
[10:55] *** xtreak joined
[10:56] *** zakharyas joined
[10:57] *** zakharyas left
[10:58] *** zakharyas joined
[10:59] *** wamba joined
[11:03] *** empT joined
[11:04] *** zakharyas left
[11:04] *** zakharyas joined
[11:07] *** zakharyas left
[11:09] *** zakharyas joined
[11:12] *** blumsicle joined
[11:15] *** AlexDaniel left
[11:23] *** itaipu joined
[11:23] *** blumsicle left
[11:34] <SmokeMachine> Hi! Good morning!

[11:34] <SmokeMachine> Is it possible to make something like it work?

[11:36] <SmokeMachine> m: role R[::Type] {::?CLASS.^add_parent: Type}; my R[Int] $a = 42

[11:36] <camelia> rakudo-moar ddda74397: OUTPUT: ¬´Type check failed in assignment to $a; expected R[Int] but got Int (42)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:36] <SmokeMachine> It doesn‚Äôt use smartmatch ether, right!

[11:37] *** empT left
[11:38] *** markong joined
[11:38] <SmokeMachine> m: role R[::Type] {method ACCEPTS($a) {$a ~~ Type}}; my R[Int] $a = 42

[11:38] <camelia> rakudo-moar ddda74397: OUTPUT: ¬´Type check failed in assignment to $a; expected R[Int] but got Int (42)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:38] <SmokeMachine> Is it possible?

[11:40] *** AlexDaniel joined
[11:40] <moritz> m: role R[::Type] { also is Type }; say R[Int].new ~~ Int

[11:40] <camelia> rakudo-moar ddda74397: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Type does not support inheritance, so R cannot inherit from it‚ê§at <tmp>:1‚ê§¬ª

[11:40] *** zeddy_k left
[11:40] *** zeddy__k joined
[11:42] *** empT joined
[11:43] <ZzZombo> Did anybody comment on this:

[11:43] <ZzZombo> m: role A[$] { }; class C is A[4] {}

[11:43] <camelia> rakudo-moar ddda74397: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot resolve caller trait_mod:<is>(C, A, Array); none of these signatures match:‚ê§    (Mu:U $child, Mu:U $parent)‚ê§    (Mu:U $child, :$DEPRECATED!)‚ê§    (Mu:U $type, :$rw!)‚ê§    (Mu:U $type, :$nat‚Ä¶¬ª

[11:43] <ZzZombo> <ZzZombo> I just found out you can't call ANY inherited methods from submethods under the pretense that "Virtual method call $.v may not be used on partially constructed object (maybe you mean $!v for direct attribute access here?)", despite the object being constructed a long time ago.

[11:45] <jnthn> SmokeMachine: I think that's confused. `my T $a = S` is OK is S < T, but in your case S is Int and T is R[Int] and Int < R[Int] is not true

[11:46] <jnthn> *is OK if

[11:46] <jnthn> I think you want a subset type, not a role

[11:47] <jnthn> ZzZombo: Just use self.v instead

[11:48] *** emeric left
[11:50] *** empT left
[11:51] <ZzZombo> Works, but what's the difference?

[11:53] <jnthn> $.x is really just $(self.x), but given $.x looks variable-like, we use it as an indicator that - in a non-virtual context - it's not unlikely that $!x woulda been more correct

[11:53] <jnthn> And yes, the error text is a bit specific to some of the cases.

[11:54] <jnthn> Though it's the most common case

[11:54] <SmokeMachine> jnthn: but how could I make a subset of a dynamic choose type?

[11:56] <SmokeMachine> And in my case I think subset wouldn‚Äôt work... what I‚Äôm trying to do is a type that should match the same type of another class‚Äô attribute...

[11:56] *** zakharyas left
[11:58] <SmokeMachine> class User { has UInt $.id }; class Post { has Ref[User, ‚Äúid‚Äù] $.author-id }

[11:59] <SmokeMachine> And the Ref type would get the type of User.id and ‚Äúaccept‚Äù the same type of it...

[11:59] <SmokeMachine> jnthn: ^^

[12:00] *** AlexDaniel left
[12:00] <SmokeMachine> Is it possible?

[12:00] <jnthn> Damn that's evil, let me think a moment

[12:06] <SmokeMachine> jnthn: why do you think that‚Äôs evil?

[12:07] *** AlexDaniel joined
[12:10] <jnthn> SmokeMachine: I meant it in a good way :-)

[12:10] <jnthn> So the Really Proper way to do it is to write a custom meta-type

[12:11] <jnthn> But there's actually a far easier way:

[12:11] <jnthn> class Ref { method ^parameterize(Mu, Mu:U $type, Str $attr) { with $type.^attributes.first(*.name.substr(2) eq $attr) { .type } else { die "No such attribute $attr" } } }; class C { has Int $.i }; my Ref[C, "i"] $x = 42; say $x.VAR.of

[12:11] <evalable6> jnthn, rakudo-moar d80fc376d: OUTPUT: ¬´(Int)‚ê§¬ª

[12:11] <jnthn> So ^parameterize mixes this parameterize method into the meta-object of Ref, and thus we can decide what parameterization means for this type

[12:11] *** jast left
[12:12] <jnthn> And we use it to do the lookup

[12:13] <jnthn> And nothing cares that what ^parameterize returns has any relation to the type it was called on, so it just happily takes the returned type :)

[12:13] <jnthn> This is also vastly cheaper than a role approach

[12:13] <jnthn> (If it could be made to work, which I don't think it can anyway)

[12:14] *** jast joined
[12:14] *** Grauwolf left
[12:15] *** Grauwolf joined
[12:16] *** raschipi joined
[12:20] *** AlexDaniel left
[12:25] *** xtreak left
[12:28] <SmokeMachine> jnthn: thank you very much! :)

[12:33] *** AlexDaniel joined
[12:34] *** rindolf joined
[12:38] *** espadrine_ joined
[12:41] <ZzZombo> m: class C { method ^compose{die 'Dieded'}}

[12:41] <camelia> rakudo-moar d80fc376d: ( no output )

[12:41] <ZzZombo> why does that NOT die?

[12:41] *** AlexDaniel left
[12:42] *** emeric joined
[12:44] *** empT joined
[12:44] *** Skarsnik joined
[12:45] <geekosaur> I'm surprised that isn't a syntax error. ^ is not part of the method name, it is part of the .^ operator which invokes a method in the metaclass

[12:46] <geekosaur> i.e. it's invoking ClassHOW.compose, not C.(^compose)

[12:46] <geekosaur> more precisely C.^compose means ClassHow.compose(C)

[12:46] <geekosaur> er ClassHOW

[12:51] *** AlexDaniel joined
[12:53] *** empT left
[12:55] *** AlexDaniel left
[12:56] <SmokeMachine> Hi again! I has a problem that I don‚Äôt know if it‚Äôs a bug or it‚Äôs expected...

[12:56] <SmokeMachine> m: role Many[Mu:U] {}; class Post {...}; class User {has Many[Post] $.posts}; class Post {}

[12:56] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´===SORRY!===‚ê§Cannot find method 'ACCEPTS' on object of type Post‚ê§¬ª

[12:57] <SmokeMachine> I had to ‚Äúfix‚Äù with:

[12:57] <SmokeMachine> m: role Many[Mu:U] {}; class Post is Mu {...}; class User {has Many[Post] $.posts}; class Post {}

[12:57] <camelia> rakudo-moar d80fc376d: ( no output )

[12:57] <SmokeMachine> Adding is Mu on the ‚Äústub class‚Äù... but shouldn‚Äôt it already be Mu?

[13:00] <jkramer> I made a little docs patch but I'm not sure how to continue from here. Should I fork the whole repo and send a pull request?

[13:00] <Skarsnik> yes :)

[13:01] <jkramer> Also before doing that can someone please review my change and see if it'd be likely to be merged anyway? Maybe I'm completely wrong. :) It's just something I found that should be mentioned in the docs. https://paste.pound-python.org/show/NrnyAy43751tjB8xi72l/

[13:02] <jkramer> Currently it looks like the $start argument is mandatory, but maybe I'm just misreading it.

[13:03] *** Zoffix joined
[13:03] <Zoffix> jkramer: just commit directly.

[13:04] <SmokeMachine> Is that a bug or a ‚Äústubbed class‚Äù isn‚Äôt a child of Mu yet?

[13:04] <Zoffix> You're a member of a perl6 org

[13:05] <Zoffix> m: my @a = <a b c>; @a.splice; dd @a

[13:05] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´Array @a = []‚ê§¬ª

[13:05] <Zoffix> jkramer: ^ doesn't look like it's mandatory

[13:05] <jkramer> Zoffix: Oh right, I think I made a doc change a few years ago and was added to all the repos :)

[13:05] <ZzZombo> jnthn <ZzZombo> why does that NOT die?

[13:05] <Zoffix> there's like a billion splice candidates

[13:05] <jkramer> Zoffix: Yeah I know, I found out by accident, but the docs suggest it's mandatory. Or at least don't mention that it can be omitted and what the behavior is in that case

[13:06] <Zoffix> e: [].^lookup("splice").candidates¬ª.signature¬ª.say

[13:06] <evalable6> Zoffix, rakudo-moar d80fc376d: OUTPUT: ¬´(Array:D \SELF: *%_)‚ê§(Array:D $: Whatever, *%_)‚ê§(Array:D $: Callable:D $offset, *%_)‚ê§(Arra‚Ä¶¬ª

[13:06] <evalable6> Zoffix, Full output: https://gist.github.com/394375bf42d6b971611e5db574883e96

[13:06] <Zoffix> jkramer: ah yeah :) Your patch could also use a fix to the shown signatures. Need to add a `?` to $start

[13:08] <jkramer> Zoffix: Or maybe $start = 0, as defined in native_array.pm:  multi method splice(strarray:D: $offset=0, $size=Whatever, *@values)

[13:08] <Zoffix> ok

[13:10] <raschipi> buggable: /win 23

[13:10] <buggable> raschipi, Thank you for entering Accidental /win Lottery! The next draw will happen in 3 weeks, 5 days, 10 hours, 49 minutes, and 9 seconds

[13:11] <tadzik> . o O ( who bugtracks the bugtrackers? )

[13:12] <Zoffix> m: class Foo { method ^name(|) { "meows" } }.^name.say

[13:12] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´meows‚ê§¬ª

[13:13] <Zoffix> geekosaur: looking at the actions, those go through `add_meta_method` routine

[13:14] <Zoffix> m: geekosaur: looking at the actions, those go through `add_meta_method` routine

[13:14] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Bogus term‚ê§at <tmp>:1‚ê§------> 3ooking at the actions, those go through 7‚èè5`add_meta_method` routine‚ê§    expecting any of:‚ê§        argument list‚ê§        infix‚ê§        infix stopper‚ê§  ‚Ä¶¬ª

[13:14] <Zoffix> oops. copy-paste fail

[13:14] <Zoffix> m: class C { method ^compose(|) {die "Dieded"}}.^compose

[13:14] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´Dieded‚ê§  in method compose at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:15] <Geth> ¬¶ doc: bba24ab323 | (Jonas Kramer)++ | doc/Type/Array.pod6

[13:15] <Geth> ¬¶ doc: $start in splice defaults to 0 and can be omitted

[13:15] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/bba24ab323

[13:15] <synopsebot> Link: https://doc.perl6.org/type/Array

[13:15] <squashable6> üçïüçïüçï  First contribution by jkramer++! ‚ô•

[13:15] <jkramer> \o/

[13:16] <Zoffix> Oh, squashathon is on

[13:16] <Skarsnik> m: my $a; our $b is export := $a;

[13:16] <camelia> rakudo-moar d80fc376d: ( no output )

[13:16] <Zoffix> AlexDaniel`: I thought we were doing testsneeded this month?

[13:17] <Zoffix> squashable6: status

[13:17] <squashable6> Zoffix, üçïüçï SQUASHathon is in progress! The end of the event in 1 day and ‚âà22 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[13:17] <squashable6> Zoffix, Log and stats: https://gist.github.com/8bb23306efb354ce8d0cf61dede51c7c

[13:17] <Skarsnik> m: my $a; our $b is export := say;

[13:17] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unsupported use of bare "say"; in Perl 6 please use .say if you meant to call it as a method on $_, or use an explicit invocant or argument, or use &say to refer to the function as a noun‚ê§at <tmp>:1‚Ä¶¬ª

[13:18] <tyil> whats the easiest/recommended way to run a for-loop over multiple threads? just add in start, like `for @args -> $arg { start { do-thing() } }`?

[13:19] <Zoffix> tyil: hyper for @args -> $arg { .... }

[13:19] <tyil> oh neat

[13:19] <jnthn> ZzZombo: Because the meta-methods aren't mixed in to the meta-object until compose time

[13:19] <tyil> the order isn't important, so i could add in race too, right?

[13:19] <jkramer> Is there a difference between `hyper for @args` and `for @args.hyper`?

[13:19] <Zoffix> tyil: oh yeah

[13:19] <jnthn> ZzZombo: If you want that much control, you'll need to subclass ClassHOW and so forth, as modules like Grammar:Tracer do

[13:20] <Zoffix> jkramer: IIRC the latter would be serial

[13:20] <Zoffix> In a for loop. That's why we added statement prefixes.

[13:20] <moritz> why did I just read "in for a loop"? :-)

[13:21] <jkramer> Also @args>>... implies hyper as well, right?

[13:21] <tyil> Zoffix: it works as expected, thanks :>

[13:21] <nine> So far my travel to FOSDEM has been surprisingly unproductive. Unless one counts the insight that there's just no more low hanging fruit for speeding up csv-ip5xs of course.

[13:21] <Zoffix> jkramer: it's a hint to the compiler that it may autothread, but isn't a guarantee and currently that's not yet implemented.

[13:21] <jkramer> Zoffix: Ah ok, thanks

[13:22] <Zoffix> So FOSDEM is happening right now? Anyone got good information to put into the weekly?

[13:22] <tyil> fosdem setup is rn

[13:22] <tyil> tomorrow its the actual event

[13:22] <tyil> (and sunday as well)

[13:22] <Zoffix> m: for <a b c d>.race(:batch) {sleep 1}; say now - INIT now

[13:22] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´4.017822‚ê§¬ª

[13:22] <Zoffix> m: race for <a b c d>.race(:batch) {sleep 1}; say now - INIT now

[13:22] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´1.0750424‚ê§¬ª

[13:22] <Zoffix> tyil: ^ you could also add a method call if you wanna tweak batch size or degree

[13:22] <nine> The train I just boarded in Frankfurt clearly brings lots of people to FOSDEM :)

[13:22] <tyil> https://fosdem.org/2018/schedule/track/perl_programming_languages/

[13:22] <tyil> those are all on sunday

[13:23] <tyil> Zoffix: https://github.com/scriptkitties/perl6-IRC-Client-Plugin-UrlTitle/blob/master/lib/IRC/Client/Plugin/UrlTitle.pm6#L22 is how I have it now

[13:24] <tyil> nine: I'm on my 2nd day in brussels now, trains were pretty empty when I was traveling

[13:24] <Zoffix> tyil: default batch is 64 tho. So unless you're processing over 64 URLs, it'll all be in one batch

[13:24] <tyil> couple of other friends will be arriving today, will be picking them up in an hour or 2

[13:24] <tyil> hmm

[13:24] <Zoffix> race for @urls.race: :batch -> $url {

[13:24] <tyil> I dont think you can even fit 64 urls in one irc message

[13:25] *** AlexDaniel joined
[13:25] <tyil> race twice?

[13:25] <Zoffix> Yeah

[13:25] <Zoffix> RaceSeq in a regular for look is serial

[13:25] <Zoffix> s/look/loop/;

[13:26] <El_Che> Zoffix: perl diner is on saturday evening, devroom sunday all day, booth on both days

[13:26] <tyil> Zoffix: nice, thanks

[13:27] <Skarsnik> m:use NativeCall; Module A { our $a is export := cglobal("libc.so.6", "errno", int32) }; require A :ALL; say $a;

[13:27] <evalable6> Skarsnik, rakudo-moar d80fc376d: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/pVRn8DKfPG‚ê§Variable '$a' is not declared‚ê§at /tmp/pVRn8DKfPG:1‚ê§------> 03 "errno", int32) }; require A :ALL; say 08‚èè04$a;‚ê§¬ª

[13:27] <Zoffix> tyil: or just `@urls.race(:batch).map: {$e.reply: "$^url: " ~ self!resolve: $^url }`

[13:28] <tyil> once I get colors working as well I'll push the first release of IRC::Client::Plugin::UrlTitle to cpan

[13:28] <Zoffix> Oh, I guess you don't want a .reply since that'd include the user too

[13:28] <tyil> yeah

[13:28] <ZzZombo> jnthn, what exactly does `EXPORTHOW` do and how can I make use of it in replacing my class' metaclass?

[13:28] <Zoffix> But still, if you use the .map, you won't need to write `race` twice

[13:29] <tyil> that does look a bit cleaner

[13:29] <Skarsnik> does binding to a sub finally work with export? 

[13:29] <Zoffix> Skarsnik: only one way to find out :)

[13:29] <ZzZombo> Took a look in Grammar::Tracer, BTW>

[13:29] <Skarsnik> Well I can't make this example work x)

[13:30] <tyil> does the $^url come magically as the name of the list without the s?

[13:31] <jnthn> ZzZombo: The compiler keeps a hash mapping package declarator (class, grammar, etc.) into meta-objects that say what that type means. Entries are made into it for a given lexical scope.

[13:31] <jnthn> ZzZombo: EXPORTHOW is the mechanism by which a module says what entries it wants to make

[13:31] <Skarsnik> I wonder if my special branch of GPTrixie still make rakudo crash x)

[13:31] <jnthn> Sub-packages of it say what you want to happen

[13:31] <Zoffix> m: use NativeCall; module A { our $a is export := cglobal("libc.so.6", "errno", int32) }; import A; say $a;

[13:31] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´(Any)‚ê§¬ª

[13:31] <jnthn> So for example EXPORTHOW::DECLARE lets you add a new package declarator, which is how OO::Monitors works

[13:32] <Zoffix> Skarsnik: you wrote `require` instead of `import`. Also, capitalized `Module`

[13:32] <Zoffix> m: use NativeCall; module A { our $a is export = cglobal("libc.so.6", "errno", int32) }; import A; say $a;

[13:32] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´0‚ê§¬ª

[13:32] <Skarsnik> dang Module and module not the same thing?

[13:32] <Zoffix> Skarsnik: yeah, looks like binding ain't working

[13:32] <Zoffix> m: BEGIN my $a := 42; say $a

[13:32] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´(Mu)‚ê§¬ª

[13:32] <Zoffix> Prolly for same reason as here ^

[13:33] <Zoffix> Skarsnik: never seen Module before, so I'd wager that ain't a thing

[13:33] <Skarsnik> 0 is a good return for errno

[13:34] <Skarsnik> what c function I could make it fail xD

[13:34] <Skarsnik> nativecallable6, int open(const char *pathname, int flags);

[13:34] <nativecallable6> Skarsnik, sub open(Str $pathname # const char*‚ê§ ,int32 $flags # int‚ê§ ) is native(LIB) returns int32 is export { * }

[13:34] <Zoffix> m: use NativeCall; sub fopen(Str, Str) is native {*}; fopen("/dasdasdsadas", "w"); module A { our $a is export = cglobal("libc.so.6", "errno", int32) }; import A; say $a;

[13:34] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´13‚ê§¬ª

[13:35] <Skarsnik> oh yeah fopen 

[13:36] <Skarsnik> sub fopen(Str, Str) is native {*}; fopen("/dasdasdsadas", "w"); module A { our $a is export = cglobal("libc.so.6", "errno", int32) }; import A; say $a; fopen("/proc/cpuinfo", "r"); say $a

[13:36] <Skarsnik> m: sub fopen(Str, Str) is native {*}; fopen("/dasdasdsadas", "w"); module A { our $a is export = cglobal("libc.so.6", "errno", int32) }; import A; say $a; fopen("/proc/cpuinfo", "r"); say $a

[13:36] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Can't use unknown trait 'is native' in a sub declaration.‚ê§at <tmp>:1‚ê§    expecting any of:‚ê§        rw raw hidden-from-backtrace hidden-from-USAGE‚ê§        pure default DEPRECATED inlinable nodal‚Ä¶¬ª

[13:36] <Skarsnik> m: use NativeCall; sub fopen(Str, Str) is native {*}; fopen("/dasdasdsadas", "w"); module A { our $a is export = cglobal("libc.so.6", "errno", int32) }; import A; say $a; fopen("/proc/cpuinfo", "r"); say $a

[13:36] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´13‚ê§13‚ê§¬ª

[13:36] <Skarsnik> hm

[13:37] <Skarsnik> probably not the same error

[13:37] <Skarsnik> m: use NativeCall; sub fopen(Str, Str) is native {*}; fopen("/dasdasdsadas", "w"); module A { our $a is export = cglobal("libc.so.6", "errno", int32) }; import A; say $a; fopen("/proc/cpuinfo", "r"); say $a; say cglobal("libc.so.6", "errno", int32);

[13:37] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´13‚ê§13‚ê§13‚ê§¬ª

[13:37] <Zoffix> $a would not be updated tho, right? 'cause you're not binding

[13:37] <Skarsnik> m: use NativeCall; sub fopen(Str, Str) is native {*}; fopen("/dasdasdsadas", "w"); module A { our $a is export = cglobal("libc.so.6", "errno", int32) }; import A; say $a; fopen("/proc/cpuinfo", "w"); say $a; say cglobal("libc.so.6", "errno", int32);

[13:37] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´13‚ê§13‚ê§13‚ê§¬ª

[13:38] <Zoffix> Oh cglobal returns that same value. nm

[13:38] <Skarsnik> oh right

[13:38] <Skarsnik> forget the :=

[13:39] <Skarsnik> what can I open on camelia?

[13:39] <timotimo> yo Skarsnik, i saw you participate in the SoE race :3

[13:40] <Zoffix> m: with "/tmp/meow".IO { .spurt: "meows"; .slurp.say }

[13:40] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´meows‚ê§¬ª

[13:40] <Skarsnik> x)

[13:40] <Zoffix> Skarsnik: ^ that

[13:40] <Skarsnik> you created the file?

[13:40] <nine> LOL and right after claiming that there is no more low hanging fruit I found a trick to shave off 1 of 4 seconds of csv-ip5xs' runtime

[13:40] <Zoffix> nine: :o

[13:40] <Zoffix> nine++

[13:40] <Skarsnik> timotimo, Yes ^^ I need to practice more, since I will run the game at GSM

[13:40] <Zoffix> Skarsnik: yeah

[13:41] <Zoffix> m: "/tmp/meow".IO.slurp.say

[13:41] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´meows‚ê§¬ª

[13:41] <Skarsnik> m: use NativeCall; sub fopen(Str, Str) is native {*}; fopen("/dasdasdsadas", "w"); module A { our $a is export = cglobal("libc.so.6", "errno", int32) }; import A; say $a; fopen("/tmp/meow", "r"); say $a; say cglobal("libc.so.6", "errno", int32);

[13:41] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´13‚ê§13‚ê§13‚ê§¬ª

[13:41] <nine> It's not particularily elegant though. It's just a new multi candidate for a single positional argument to augment the existing 0 arguments and arbitrary arguments cases

[13:42] <timotimo> what's GSM? i only know GSH

[13:42] <Skarsnik> German Speedrun Marathon

[13:42] <timotimo> ah, fair enough

[13:43] <Skarsnik> marth 28 - 2 april

[13:43] <nine> It does show however that runtime generated code might be the key to gain further generic speedups. Those Captures just are not fast enough. But generating new multi candidates for the actuall calling conditions at runtime is rather simple

[13:44] <timotimo> there go my dreams to have rakudo completely unload the compiler in most cases ‚Ä¶

[13:44] <Zoffix> making candidates with captures cacheable looks like would produce a ton of win. I see them as reason for slowness all over the shop

[13:45] *** zakharyas joined
[13:46] <nine> Zoffix: that sounds like another one of those "suck 4 months out of my life" traps I might fall into

[13:47] <Zoffix> nine: I'm tempted to give it a go too. Though I'm hindered with not having a clue how dispatch and caching works :)

[13:47] * Zoffix wouldn't mind giving up 4 month of life for that tho

[13:47] <Skarsnik> m: use NativeCall; sub strerror(int32) returns Str is native {*}; sub fopen(Str, Str) is native {*}; fopen("/dasdasdsadas", "w"); module A { our $a is export = cglobal("libc.so.6", "errno", int32) }; import A; say $a, strerror($a); fopen("/tmp/meow", "r"); say $a; say cglobal("libc.so.6", "errno", int32);

[13:47] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´13Permission denied‚ê§13‚ê§13‚ê§¬ª

[13:47] <Zoffix> m: my $c := class Foo { multi method z(|c) { rand } }.new; for ^1000_000 { $c.z: $ }; say now - INIT now

[13:47] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´0.6246569‚ê§¬ª

[13:47] <Zoffix> m: my $c := class Foo { multi method z($) { rand } }.new; for ^1000_000 { $c.z: $ }; say now - INIT now

[13:47] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´0.32425470‚ê§¬ª

[13:47] <Skarsnik> need something else that fopen x)

[13:49] <jnthn> nine, Zoffix: I think the answer will be something like exploding flattening things sooner, in-place in the args buffer, for the cases that fit, and putting an interned callsite in place of the flattening one

[13:49] <Zoffix> What's "interned"?

[13:50] <jnthn> Look up string interning, then imagine the same for an object representing the shape of a callsite

[13:50] * Zoffix looks up

[13:50] <jnthn> We use those as keys for the multi-dispatch cache *and* for spesh

[13:51] *** araraloren joined
[13:52] <Zoffix> Ah, k. I get it now. Thanks.

[13:53] <jnthn> Anyway, a fix in the right place will help both multi-dispatch *and* spesh

[13:53] <Zoffix> That's awesome.

[13:53] <jnthn> Yeah, I figured that out a while back, just had no time to act on it. Feel free to. ;-)

[13:53] <Zoffix> :)

[13:54] *** rindolf left
[13:54] *** rindolf joined
[13:56] *** cdg joined
[14:01] <nine> Ah, there's that: /* Can't intern anything with flattening. */ if (cs->has_flattening) return;

[14:01] *** comborico1611 joined
[14:02] <comborico1611> Yup.

[14:02] *** abraxxa left
[14:02] *** zakharyas left
[14:03] *** cdg_ joined
[14:03] *** zakharyas joined
[14:03] *** rindolf left
[14:04] *** rindolf joined
[14:05] *** rindolf left
[14:07] *** cdg left
[14:10] *** rindolf joined
[14:14] *** espadrine_ left
[14:14] *** Zoffix left
[14:16] *** zakharyas left
[14:17] *** zakharyas joined
[14:19] <zeddy__k> should I start learning perl6? is it stable enough to develop in? I'm considering perl and perl6 and I like perl6 syntax more, but it's still under development so I'm in a dilemma

[14:19] <Skarsnik> what you want to do with it?

[14:19] *** AlexDaniel left
[14:20] <El_Che> zeddy__k: every language that's not dead is under developement

[14:20] <El_Che> zeddy__k: perl 6 has production releases since end 2015

[14:21] <El_Che> depending on what you do, one language may be more applicable than the other

[14:21] <zeddy__k> simple programs for console that read and write to files and mariadb, maybe some numerical work

[14:21] <zeddy__k> also scripts that automate some of my daily work

[14:21] <El_Che> zeddy__k: I don't see a problem using perl 6 for that (it had a database module and good math support)

[14:22] <Skarsnik> not sure there is a module for mariadb?

[14:22] <El_Che> perl5 has more modules as it's been out for a lot longer

[14:22] <moritz> s/hd/has/

[14:22] <El_Che> Skarsnik: that's mysql

[14:22] <moritz> Skarsnik: the mariadb wire protocol is compatible with mysql

[14:22] <Skarsnik> at worse you can use a perl 5 module for that

[14:22] *** rindolf left
[14:22] <moritz> (from which it forked)

[14:22] <Skarsnik> Hoo ok

[14:22] <Skarsnik> no mariadbclient lib so?

[14:22] <El_Che> dbish

[14:23] <El_Che> https://github.com/perl6/DBIish#mysql

[14:23] <zeddy__k> awesome, thanks

[14:24] <El_Che> zeddy__k: stick around while having fun programming

[14:24] <Skarsnik> I mean there is no mariadb c lib to talk to a mariadb like libmysqlclient

[14:24] <zeddy__k> is the O'Reilley book inclusive enough to get to an advanced level?

[14:24] <zeddy__k> or can I learn more from the docs on the website

[14:25] <El_Che> zeddy__k: I picked up from the docs on the website (I have a Perl 5 background) and asking questions here when the doc wasn't clear

[14:25] <El_Che> zeddy__k: I recommend moritz beginners book, though, for a shortcut

[14:25] <El_Che> https://www.apress.com/br/book/9781484228982

[14:25] <zeddy__k> El_Che: thanks

[14:26] <El_Che> it's also on safari in case you have that

[14:26] <moritz> fwiw this is book for people who already know a programming language or two, just not Perl 6

[14:27] <El_Che> zeddy__k: actually, I found this a nice intro: http://www.jnthn.net/papers/2015-spw-perl6-course.pdf

[14:27] <moritz> if you want are new to programming in general, "Think Perl 6" is the better intro

[14:27] <moritz> also, https://perl6book.com/ has an overview of the Perl 6 books out there

[14:28] <El_Che> yes, what moritz says. It depends on your background of course

[14:28] *** rindolf joined
[14:28] <zeddy__k> moritz: I'm using Java, C and C++ for my classes

[14:29] *** empT joined
[14:29] <zeddy__k> I'll check out the materials first

[14:29] <zeddy__k> thanks for providing them

[14:31] *** mcmillhj joined
[14:32] <moritz> ok, then the o'reilly book will bore you

[14:33] *** empT left
[14:35] *** wamba left
[14:39] *** teatime joined
[14:46] *** Kaiepi left
[14:46] *** Kaiepi joined
[14:46] *** Kyo91 joined
[14:46] <nine> Oh boy! There's yet another speedup to be made. And this time it _is_ elegant.

[14:47] <El_Che> nine to the rescue!

[14:48] <nine> As I already create multi candidates for method pass through at runtime, I can look up the P5 method once by name and re-use the resulting GV on future alls instead of looking up by string each time

[14:48] <nine> Doesn't save crazy much, but speed up is speed up :)

[14:48] <El_Che> I'll take it!

[14:48] <Kaiepi> nice

[14:51] *** Kyo91 left
[14:52] *** raiph joined
[14:52] *** Kyo91 joined
[14:54] <raiph> m: BEGIN my ($a) = (42); say $a # might be of interest to zoffix, Skarsnik

[14:54] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´42‚ê§¬ª

[14:58] *** zakharyas left
[14:59] *** zakharyas joined
[14:59] *** cdg joined
[15:01] *** cdg left
[15:02] *** cdg joined
[15:02] *** cdg left
[15:02] <nine> I knew Deutsche Bahn runs late quite often. Yet I'm somewhat surprised that they just wished their guests a Merry Christmas

[15:02] *** cdg joined
[15:02] *** cdg_ left
[15:03] *** cdg_ joined
[15:03] <huf> probably because of the timezone

[15:04] <El_Che> nine: they are trolling you about perl 6

[15:06] <timotimo> they call it "targeted advertising"

[15:06] *** Zoffix joined
[15:06] <Zoffix> raiph: that still just does assignment, doesn't it?

[15:06] <Zoffix> m: BEGIN my $b = 42; BEGIN my $a = $b; say $a; $b = 100; say $a

[15:06] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´42‚ê§42‚ê§¬ª

[15:07] *** cdg left
[15:07] <Zoffix> I was looking at that bug yesterday and it's basically copying the symbols into a fake block and compiles there, so any bindings get lots in that fake block and that's why if you bind $a would end up a Mu or whatever

[15:07] <Zoffix> s/lots/lost/;

[15:07] <Zoffix> m: BEGIN my $b = 42; BEGIN my ($a) = ($b); say $a; $b = 100; say $a

[15:07] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´42‚ê§42‚ê§¬ª

[15:07] *** evalable6 left
[15:08] *** evalable6 joined
[15:08] *** ChanServ sets mode: +v evalable6

[15:09] <Zoffix> zeddy__k: BTW, there's a bunch of resources you might find helpful listed on our Resources page: https://perl6.org/resources/

[15:10] <zeddy__k> Zoffix: thanks, I'll check those out too

[15:11] <jnthn> Zoffix: Yeah. Lexpads are immutable, and when we compile a BEGIN we obviously haven't finished the outer block yet, so we have to fake something up. But what? Containers are cloned from a "prototype", and the fake lexpad contains the static container. Thus what's actually happening is that on entry to the scope post-compilation, the Scalar is cloned complete with the value set in the prototype.

[15:11] *** rindolf left
[15:12] <jnthn> Of course, binding doesn't have that level of indirection so there's no way it can work.

[15:12] <jnthn> We should perhaps detect it at compile time and say it can't work. Or...we could try diffing the scope after each BEGIN block and trying to somehow propagate bindings.

[15:13] <Zoffix> Don't we have ::= compile-time binding op specced? Is there also no way it can work?

[15:13] <jnthn> I don't really get why you'd write BEGIN $foo := blah

[15:13] <jnthn> Just write my constant $blah = ...

[15:13] <jnthn> Since constants are evaluated at BEGIN time

[15:13] <jnthn> And bind

[15:14] *** wamba joined
[15:14] * jnthn bbi10

[15:14] <Zoffix> Well, at least one reason is you can rebind to non-constant

[15:15] <Zoffix> m: my $blah := rand; say $blah := 42

[15:15] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´42‚ê§¬ª

[15:15] <Zoffix> m: my constant $blah = rand; say $blah := 42

[15:15] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot use bind operator with this left-hand side‚ê§at <tmp>:1‚ê§------> 3y constant $blah = rand; say $blah := 427‚èè5<EOL>‚ê§¬ª

[15:17] <Zoffix> .oO( if it works with constants why can't it work with non-constants :S )

[15:17] <Zoffix> the begin-time-binding I mean

[15:17] <nine> csv-ip5xs.pl now processes 1 million rows in 26.4 seconds on my laptop and is only 13.7x slower than Perl 5.

[15:18] <Zoffix> This was the original ticket RT#123776 though it doesn't show any must-have usecases

[15:18] <synopsebot> RT#123776 [open]: https://rt.perl.org/Ticket/Display.html?id=123776 Binding a variable at BEGIN time doesn't stick aruond for runtime

[15:18] *** hoelzro left
[15:20] *** skids joined
[15:21] <Zoffix> Oh "infix:<::=>, bind and make readonly" unsure why I thought it was compile-time bind op

[15:24] *** hoelzro joined
[15:25] *** raschipi_ joined
[15:25] *** raschipi left
[15:28] <Zoffix> Ah, 'cause we eval and assign the value; whereas BEGIN my $... is like assigning in the middle of it

[15:28] *** Zoffix left
[15:31] *** pmurias joined
[15:36] *** rindolf joined
[15:39] *** rindolf left
[15:44] <nine> Another one!

[15:45] <nine> At ~4s I said there's no more low hanging fruit. Now I'm at 2.874s :D

[15:47] *** wamba left
[15:51] <mspo> nine: keep drinking that coffee

[15:53] *** eliasr left
[15:53] *** natrys joined
[15:54] <Kaiepi> m: Any.skip(*-1)

[15:54] <camelia> rakudo-moar d80fc376d: ( no output )

[15:54] <Kaiepi> m: say Any.skip(*-1)

[15:54] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´((Any))‚ê§¬ª

[15:54] <Kaiepi> weird

[15:54] <Kaiepi> i get Cannot resolve caller tail(Any: Int); none of these signatures match: (Any:D $: *%_) (Any:D $: $n, *%_)

[15:55] *** Zoffix joined
[15:56] <Zoffix> Kaiepi: your rakudo is just too old and still has a bug

[15:56] <Kaiepi> oh

[15:57] <Zoffix> c: cca7b90 $*PERL.compiler.version.say

[15:57] <committable6> Zoffix, ¬¶cca7b90: ¬´Cannot find this revision (did you mean ‚Äú0704970‚Äù?)¬ª

[15:58] <Zoffix> no, I didn't :/

[15:58] <Zoffix> c: cca7b9040320f2304 $*PERL.compiler.version.say

[15:58] <committable6> Zoffix, ¬¶cca7b90: ¬´Cannot find this revision (did you mean ‚Äúeaf4132‚Äù?)¬ª

[15:59] <Zoffix> c: 8efba3a897e $*PERL.compiler.version.say

[15:59] <committable6> Zoffix, ¬¶8efba3a: ¬´v2017.12.308.g.8.efba.3.a.89‚ê§¬ª

[15:59] <Zoffix> c: 2018.01~1 $*PERL.compiler.version.say

[15:59] <committable6> Zoffix, ¬¶2018.01~1: ¬´v2017.12.291.gc.82.a.698.bc‚ê§¬ª

[16:00] *** empT joined
[16:00] <Zoffix> That kinda sucks. It was committed into post-release branch and the version makes it seem as if the fix would be in 2018.01 release, but it ain't

[16:02] *** cdg joined
[16:04] <Kaiepi> which branch is that? i'm on v2017.12.282.g.66.f.1690.f.5 atm pulling from master

[16:05] *** empT left
[16:05] <Zoffix> Kaiepi: post-release. It was already merged to master right after 2018.01 release

[16:06] <Zoffix> Fix went in on Jan 23rd: https://github.com/rakudo/rakudo/commit/8efba3a897e79ed3fffcdf2dc266228738bf39c2

[16:06] *** cdg_ left
[16:06] <Zoffix> Or committed rather. I've no idea when it landed on master

[16:06] *** cdg left
[16:08] <jkramer> I should check my github notifications more often. :# Good news everyone, all pull requests for Text::Wrap from Aug 2017 have been merged. ;)

[16:09] *** rindolf joined
[16:10] <Kaiepi> oh, i was on the wrong branch on rakudo

[16:10] *** cdg joined
[16:11] *** cdg_ joined
[16:15] *** cdg left
[16:19] *** lowbro left
[16:22] <buggable> New CPAN upload: Inline-Perl5-0.31.tar.gz by NINE https://cpan.metacpan.org/authors/id/N/NI/NINE/Perl6/Inline-Perl5-0.31.tar.gz

[16:23] *** araraloren left
[16:25] <nine> Ok, closing in on Bruxelles. Time to stop having fun and....start having other fun :D

[16:26] <Zoffix> :)

[16:26] *** traxex2 left
[16:27] *** traxex2 joined
[16:28] *** raiph left
[16:30] *** Herby_ joined
[16:34] *** Sgeo_ joined
[16:35] <mspo> FOSDEM?

[16:36] <Zoffix> man, swapping $iteration-buffer.push(...) to nqp::push($iteration-buffer, ...)  makes Str..words 2.29x faster

[16:36] *** Sgeo left
[16:37] <Zoffix> .oO( would .push-all always push to an IterationBuffer tho.. )

[16:37] <jnthn> Not always

[16:38] <jnthn> Arrays have some ReificiationTarget or some such that creates the Scalar containers iirc

[16:41] <teatime> is there any quick/easy way to ask how much (even if approx.) memory is allocated for / used by, some given variable/value/object / abstract data structure made up of various nested default types ?

[16:42] <teatime> actually‚Ä¶ hold that thought, I'll brb (sorry.)

[16:43] *** teatime left
[16:45] <Zoffix> m: use nqp; my $t := nqp::getattr((my @a = 1..*), List, q|$!todo|); nqp::push($t.^attributes.tail.get_value($t), 42)

[16:45] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´This type (Array::ArrayReificationTarget) does not support positional operations‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:45] <Zoffix> too bad then

[16:46] <jnthn> Yup, that's one we'll have to fix by making spesh do a better job

[16:46] *** AlexDaniel joined
[16:49] *** zakharyas left
[16:51] *** zakharyas joined
[16:51] <lizmat> Zoffix: re "man, swapping $iteration-buffer.push(...) to nqp::push($iteration-buffer, ...)  makes Str..words 2.29x faster"

[16:51] <lizmat> if that is true, than we need to have a better look at why the IterationBuffer.push is not inlined

[16:52] <lizmat> because that was the "promise"   :-)

[16:52] *** khw joined
[16:52] *** cschwenz left
[16:53] <AlexDaniel> Zoffix: omg‚Ä¶

[16:53] <AlexDaniel> my mistake

[16:53] <AlexDaniel> didn't set up the bot properly

[16:54] *** itaipu left
[16:54] <AlexDaniel> to my defense, Saturday is nowhere close here :)

[16:54] *** scimon left
[16:55] <Zoffix> lizmat: FWIW was measuring using this (.words2 is our stock impl and .words3 is the nqp::push version): https://gist.github.com/zoffixznet/68247e8ef6b0a002e0c2047d07f1beb2   .words2 takes 6.3s on this box and .words3 2.29s

[16:56] <Zoffix> Lead to this bench from looking at https://stackoverflow.com/questions/25638528/using-perl6-to-process-a-large-text-file-and-its-too-slow-2014-09 :)

[16:56] <squashable6> Webhook for perl6/roast is now active! Approachable is better than simple.

[16:57] <squashable6> Webhook for rakudo/rakudo is now active! Keep it logically awesome.

[16:57] <AlexDaniel> maybe rakudo webhook is an overkill but we'll see

[16:57] <AlexDaniel> squashable6: status

[16:57] <squashable6> AlexDaniel, üçïüçï SQUASHathon is in progress! The end of the event in 1 day and ‚âà19 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[16:57] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/67bb35cf34c12e5abfc9c8bdbbbe4762

[16:57] <AlexDaniel> buggable: tag testneeded

[16:57] <buggable> AlexDaniel, There are 31 tickets tagged with TESTNEEDED; See http://fail.rakudo.party/t/TESTNEEDED for details

[16:58] <AlexDaniel> hey squashable6, what is this 1 commit you're talking about?

[16:59] <lizmat> Zoffix: I don't see a difference between push-alls in words2 / words 3?

[16:59] <Zoffix> AlexDaniel: someone committed to docs 1 commit

[16:59] *** zakharyas left
[17:00] <AlexDaniel> hmhm I see‚Ä¶

[17:00] *** mcmillhj left
[17:00] *** domidumont left
[17:00] *** squashable6 left
[17:00] *** squashable6 joined
[17:00] <AlexDaniel> squashable6: stats

[17:00] <squashable6> AlexDaniel, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Squashable

[17:00] <AlexDaniel> squashable6: status

[17:00] <squashable6> AlexDaniel, üçïüçï SQUASHathon is in progress! The end of the event in 1 day and ‚âà18 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[17:00] <AlexDaniel> o much better!

[17:01] <Zoffix> lizmat: oops. Updated. The difference is just $target.push is turned into nqp::push($t here https://gist.github.com/zoffixznet/68247e8ef6b0a002e0c2047d07f1beb2#file-p6-p6-L97   with $t being a deconted $target (deconted before the while loop)

[17:03] *** raiph joined
[17:03] <squashable6> üçï zoffixznet++ opened issue ‚ÄúIterationBuffer.push possibly not inlined‚Äù: https://github.com/rakudo/rakudo/issues/1469

[17:03] <squashable6> üçïüçïüçï  First contribution by zoffixznet++! ‚ô•

[17:04] <squashable6> üçï zoffixznet++ labeled issue ‚ÄúIterationBuffer.push possibly not inlined‚Äù: https://github.com/rakudo/rakudo/issues/1469

[17:04] <Zoffix> ^ filed an Issue to take a closer look, so we don't forget

[17:05] <jnthn> fwiw, --profile usually can tell you about inlining

[17:06] *** wamba joined
[17:06] <Zoffix> "calls inlined 10103 + 9897 (49.48%)"

[17:06] <Zoffix> for src/core/IterationBuffer.pm:20

[17:06] *** empT joined
[17:08] <lizmat> so it looks it does that rather late ...

[17:08] <Zoffix> 1 sec, I think that was profile for original bench from stackoverflow

[17:10] <Zoffix> with my gisted branch .push takes 21.17% of total time and says "

[17:10] <Zoffix> calls inlined 0 + 4500000 (100.00%) "

[17:10] *** empT left
[17:11] *** ctilmes joined
[17:11] <raiph> m: BEGIN constant $a = $ = 42; say $a; $a = 99; say $a # zoffix, sorry about last line. This perhaps?

[17:11] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´42‚ê§99‚ê§¬ª

[17:12] <ctilmes> m: my uint8 $x = -5; say $x

[17:12] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´251‚ê§¬ª

[17:12] <ctilmes> m: my uint16 $x = -5; say $x

[17:12] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´65531‚ê§¬ª

[17:12] <lizmat> afk&

[17:12] <ctilmes> m: my uint32 $x = -5; say $x

[17:12] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´4294967291‚ê§¬ª

[17:12] <ctilmes> m: my uint64 $x = -5; say $x

[17:12] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´-5‚ê§¬ª

[17:13] <Zoffix> IIRC, all of those are meant to throw. Assignment throws; overflow works only if you, say $x -= 5 or whatever

[17:13] <ctilmes> I'm actually nativecast'ing to a uint64, and was surprised to get a negative number out of it

[17:14] <Zoffix> :) Yeah, they're busted up a bit at the moment

[17:14] *** mcmillhj joined
[17:14] <Zoffix> I think another bug is some of them (maybe attributes, not variables) are actually plain `int` that overflow prematurely

[17:15] <Zoffix> raiph: IIRC Skarsnik was trying to compile-time bind to a variable.

[17:15] <Zoffix> Or rather export a binded variable

[17:17] *** Kaiepi left
[17:17] <Skarsnik> not really compile time

[17:18] *** Zoffix left
[17:18] <Skarsnik> the goal is to like if you do a binding module, you want the extern to be tie to the cglobal call

[17:19] *** mcmillhj left
[17:21] <raiph> m: module foo { constant $a is export = $ = 42 }; import foo; say $a # skarsnik, does this seem at all helpful?

[17:21] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´42‚ê§¬ª

[17:22] <raiph> m: module foo { constant $a is export = $ = 42 but False }; import foo; say $a.Bool

[17:22] <camelia> rakudo-moar d80fc376d: OUTPUT: ¬´False‚ê§¬ª

[17:22] <Skarsnik> no because it's not a constant :)

[17:24] *** Kaiepi joined
[17:25] <raiph> $a is "constant" in the sense it contains a fixed value for its entire life

[17:26] <raiph> er, s/contains/is bound to/

[17:27] <raiph> (of course, that fixed value is a container aka indirection)

[17:27] <raiph> ^^ skarsnik

[17:29] *** setty1 joined
[17:35] *** mcmillhj joined
[17:37] *** teatime joined
[17:37] <squashable6> üçïüçïüçï  First contribution by AlexDaniel++! ‚ô•

[17:39] <teatime> sorry; I was gone a lot longer than expected.

[17:40] *** mcmillhj left
[17:49] *** pmurias left
[17:49] *** mcmillhj joined
[17:50] *** empT joined
[17:54] *** empT left
[17:56] *** cdg joined
[17:59] *** cdg_ left
[18:00] *** ctilmes left
[18:00] *** cdg left
[18:04] *** cdg joined
[18:13] <tadzik> oh ffs

[18:13] <tadzik> I acidentally booking'd a hotel 50km from Brussels. For Fosdem

[18:16] <El_Che>  tadzik: shit. Where? Antwerp?

[18:17] <tadzik> El_Che(IRC): Charleroi

[18:17] <tadzik> whatever the hell that is

[18:17] <tadzik> I've no idea why that happened

[18:18] <tadzik> though given how obnoxious booking can be, they could as well have shoved it my face with a small "50km from your destination" label

[18:18] <El_Che> oh fuck

[18:18] <tadzik> I'm looking for a place now, and everything says "oh, sorry,it's sold out!"

[18:18] <tadzik> then why are you showing me this

[18:18] <El_Che> charleroi has a ryain-air type airport

[18:19] <El_Che> therefor it markets itself al Brussels-South

[18:19] <El_Che> (while Brussels-South the big train hub for thalys and eurostar)

[18:19] <perigrin> that crap has spread to here, Orlando-Melbourne International Airport is like 60+ miles from Orlando 

[18:20] <perigrin> and we don't have the public transport infrastructure y'all have

[18:20] <El_Che> of course no one is belgium falls for that (charleroi is a provincial town with a less than ideal reputation)

[18:20] <tadzik> now I was in the middle of a booking and I opened the old one in another tab, now all my details are gone

[18:20] <tadzik> screw this website :(

[18:21] <El_Che> tadzik: I often book directly throgh accorhotels

[18:21] <El_Che> ibis has no personality, but you know what you get

[18:22] <tadzik> well, I was hoping for something cheap-ish and nearby

[18:22] <tadzik> but now all hope is gone, eh

[18:23] <raschipi_> "personality", why would I ever want that?

[18:24] <El_Che> raschipi_: when work pays, personality is fine

[18:24] <El_Che> when I pay, i go for "it's clean? it has a bed?" combination

[18:25] <raschipi_> sounds like they are going to give me an attitude.

[18:26] <raschipi_> What if the personality ends up being gloomy?

[18:31] *** pharv joined
[18:33] <El_Che> tadzik: just looked at the cheapest ibis, but it's still 1 hour metro 

[18:34] <nine> tadzik: maybe you can share my room 

[18:35] <nine> tadzik: I think the rate was per room, so they shouldnt mind

[18:35] *** evalable6 left
[18:35] <El_Che> as a backup: https://www.accorhotels.com/nl/hotel-8602-aparthotel-adagio-access-brussels-europe/index.shtml#origin=accorhotels

[18:35] *** evalable6 joined
[18:35] <El_Che> 77‚Ç¨ for tomorrow

[18:38] *** wamba left
[18:39] *** darutoko left
[18:46] *** epony joined
[18:50] *** natrys left
[18:50] *** empT joined
[18:51] <tadzik> Nine: ah, I reserved one before I got your message :(

[18:51] <tadzik> And it's not cancellable

[18:52] *** raschipi_ left
[18:52] <El_Che> heads up for Perl diner: register at the perl booth before the places are gone

[18:55] *** empT left
[18:57] <nine> tadzik: ah well ok, at least you have a room...in the same country

[19:01] <tadzik> :)

[19:02] <tadzik> Thanks for the offer though, it lifted the spirits this wacky evening

[19:04] <AlexDaniel> squashable6: status

[19:04] <squashable6> AlexDaniel, üçïüçï SQUASHathon is in progress! The end of the event in 1 day and ‚âà16 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[19:04] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/bd92b5f44afd9240fb18f3782e867583

[19:04] *** pmurias joined
[19:04] <AlexDaniel> buggable: tag testneeded

[19:04] <buggable> AlexDaniel, There are 30 tickets tagged with TESTNEEDED; See http://fail.rakudo.party/t/TESTNEEDED for details

[19:07] *** st_elmo joined
[19:11] *** Cabanossi joined
[19:11] <Geth> ¬¶ rakudo: 95f23a5634 | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[19:11] <Geth> ¬¶ rakudo: Fix crashes with compile time evalution of `where` thunks

[19:11] <Geth> ¬¶ rakudo: 

[19:11] <Geth> ¬¶ rakudo: Phixes https://github.com/rakudo/rakudo/issues/1465

[19:11] <Geth> ¬¶ rakudo: 

[19:11] <Geth> ¬¶ rakudo: When we compile_in_context, we rake the .ann('outer')s to find all

[19:11] <Geth> ¬¶ rakudo: the good bits. However, the `where` thunks don't get that annotation

[19:11] <Geth> ¬¶ rakudo: and so the raking stops prematurely. This causes the thunk that

[19:12] <Geth> ¬¶ rakudo: tries to access some core symbols (like Junction ops) executed

[19:12] <Geth> ¬¶ rakudo: during being time explode.

[19:12] <Geth> ¬¶ rakudo: 

[19:12] <Geth> ¬¶ rakudo: Fix by adding annotating the thunk with the current pad.

[19:12] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/95f23a5634

[19:12] <squashable6> üçï zoffixznet++ closed issue ‚Äú`where` clause in attrib‚Ä¶‚Äù: https://github.com/rakudo/rakudo/issues/1465

[19:12] <Geth> ¬¶ roast: 79dff96fc9 | (Zoffix Znet)++ | S02-types/whatever.t

[19:12] <Geth> ¬¶ roast: Cover crashes in compile-time `where` thunk evaluation

[19:12] <Geth> ¬¶ roast: 

[19:12] <Geth> ¬¶ roast: Closes https://github.com/rakudo/rakudo/issues/1465

[19:12] <Geth> ¬¶ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/95f23a5634

[19:12] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/79dff96fc9

[19:17] *** preaction left
[19:22] <Geth> ¬¶ DBIish: 36ca5eadac | (Moritz Lenz)++ | README.pod

[19:22] <Geth> ¬¶ DBIish: Mention MariaDB in README. Closes #25

[19:22] <Geth> ¬¶ DBIish: review: https://github.com/perl6/DBIish/commit/36ca5eadac

[19:24] *** empT joined
[19:25] *** preaction joined
[19:28] *** Kaiepi left
[19:29] *** empT left
[19:30] <Geth> ¬¶ roast: 195227f779 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S32-io/pipe.t

[19:30] <Geth> ¬¶ roast: Test that large blobs can be piped

[19:30] <Geth> ¬¶ roast: 

[19:30] <Geth> ¬¶ roast: Closes RT#129882. I am unable to reproduce the hang which is mentioned

[19:30] <Geth> ¬¶ roast: in the ticket, but this test *is* failing on all builds before 2017.06

[19:30] <synopsebot> RT#129882 [open]: https://rt.perl.org/Ticket/Display.html?id=129882 [TESTNEEDED] [CONC] [IO] Proc with `.in.close` and `.out.slurp-rest` in different threads, hangs

[19:30] <Geth> ¬¶ roast: with ‚Äúgot: '219264'‚Äù.

[19:30] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/195227f779

[19:31] <squashable6> üçï AlexDaniel++ wrote a comment on commit 195227f779f7: https://github.com/perl6/roast/commit/195227f779f7441de1678e12941550271da799b2#commitcomment-27300136

[19:34] <Geth> ¬¶ roast: 72f2c3984c | (Zoffix Znet)++ | MISC/bug-coverage-stress.t

[19:34] <Geth> ¬¶ roast: Cover serialization crashes with traits + roles

[19:34] <Geth> ¬¶ roast: 

[19:34] <Geth> ¬¶ roast: RT#127959: https://rt.perl.org/Ticket/Display.html?id=127959

[19:34] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/72f2c3984c

[19:34] <synopsebot> RT#127959 [open]: https://rt.perl.org/Ticket/Display.html?id=127959 [BUG] Missing serialize REPR function for REPR SCRef | When using a class using a trait that modify metamodel

[19:34] *** empT joined
[19:35] *** cdg left
[19:38] *** empT left
[19:38] *** empT joined
[19:45] *** imcsk8 left
[19:48] *** imcsk8 joined
[19:50] <squashable6> üçï zoffixznet++ closed issue ‚ÄúWeird issue with `zef install`‚Äù: https://github.com/rakudo/rakudo/issues/1413

[19:50] <Geth> ¬¶ roast: d266a4401a | (Zoffix Znet)++ | 2 files

[19:50] <Geth> ¬¶ roast: Cover spesh regression with giant enums in packages

[19:50] <Geth> ¬¶ roast: 

[19:50] <Geth> ¬¶ roast: Closes https://github.com/rakudo/rakudo/issues/1413

[19:50] <Geth> ¬¶ roast: MoarVM fix: https://github.com/MoarVM/MoarVM/commit/4733449165

[19:50] <Geth> ¬¶ roast: MoarVM followup issue: https://github.com/MoarVM/MoarVM/issues/782

[19:50] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/d266a4401a

[19:57] <Geth> ¬¶ roast: 469ebbc75b | (Zoffix Znet)++ | S02-types/array-shapes.t

[19:57] <Geth> ¬¶ roast: Test Str can be used as indices of shaped arrays

[19:57] <Geth> ¬¶ roast: 

[19:57] <Geth> ¬¶ roast: Tests https://github.com/rakudo/rakudo/issues/1297

[19:57] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/469ebbc75b

[19:57] <squashable6> üçï zoffixznet++ wrote a comment on ‚ÄúIndices for shaped array‚Ä¶‚Äù: https://github.com/rakudo/rakudo/issues/1297#issuecomment-362690268

[19:57] <squashable6> üçï zoffixznet++ unlabeled issue ‚ÄúIndices for shaped array‚Ä¶‚Äù: https://github.com/rakudo/rakudo/issues/1297

[19:58] <Geth> ¬¶ roast: 85f55e2b23 | (Zoffix Znet)++ | S02-types/array-shapes.t

[19:58] <Geth> ¬¶ roast: Add test description

[19:58] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/85f55e2b23

[20:03] *** zakharyas joined
[20:04] *** st_elmo left
[20:04] <squashable6> üçï Digicrat++ wrote a comment on ‚ÄúMemory leak with NativeCall‚Äù: https://github.com/rakudo/rakudo/issues/1440#issuecomment-362692017

[20:04] <squashable6> üçïüçïüçï  First contribution by Digicrat++! ‚ô•

[20:07] *** zakharyas left
[20:08] *** zakharyas joined
[20:12] *** dct joined
[20:14] *** zakharyas left
[20:16] <Geth> ¬¶ roast/coercers2.0: b77770dc4f | (Zoffix Znet)++ | S12-coercion/coercion-types.t

[20:16] <Geth> ¬¶ roast/coercers2.0: Fudge anything not already passing

[20:16] <Geth> ¬¶ roast/coercers2.0: review: https://github.com/perl6/roast/commit/b77770dc4f

[20:22] *** mtj_ left
[20:23] <Geth> ¬¶ roast: ccc4edb8ed | (Zoffix Znet)++ | S12-coercion/coercion-types.t

[20:23] <Geth> ¬¶ roast: Start coercer spec sketch

[20:23] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/ccc4edb8ed

[20:23] <Geth> ¬¶ roast: b77770dc4f | (Zoffix Znet)++ | S12-coercion/coercion-types.t

[20:23] <Geth> ¬¶ roast: Fudge anything not already passing

[20:23] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/b77770dc4f

[20:23] <Geth> ¬¶ roast: ee09f13914 | (Zoffix Znet)++ | S12-coercion/coercion-types.t

[20:23] <Geth> ¬¶ roast: Add sketch of more comprehensive spec of DefiniteHOW coercers

[20:23] <Geth> ¬¶ roast: 

[20:24] <Geth> ¬¶ roast: This will likely need to be pruned before 6.d is finalized.

[20:24] <Geth> ¬¶ roast: In particular, the :U ‚Üî :D coercers look to be just mindless

[20:24] <Geth> ¬¶ roast: over-engineering with no proper usecase to cater to.

[20:24] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/ee09f13914

[20:24] <Geth> ¬¶ roast: e2dc8f0c7f | (Zoffix Znet)++ | S12-coercion/coercion-types.t

[20:24] <Geth> ¬¶ roast: Add Issue number annotation to test

[20:24] <squashable6> üçï zoffixznet++ closed issue ‚ÄúCoercers with DefiniteHO‚Ä¶‚Äù: https://github.com/rakudo/rakudo/issues/1361

[20:24] <Geth> ¬¶ roast: 

[20:24] <Geth> ¬¶ roast: Closes https://github.com/rakudo/rakudo/issues/1361

[20:24] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/e2dc8f0c7f

[20:25] *** pharv left
[20:26] *** mtj_ joined
[20:32] *** espadrine_ joined
[20:32] *** a3r0 left
[20:37] *** jaush joined
[20:37] *** dct left
[20:38] <jaush> hello!  question re. rakudo star 2018.01 - what's the ETA for the windows binary?

[20:40] <moritz> I don't know. I think stmuk had problems with his windows machine or something?

[20:41] *** traxex2 left
[20:45] *** mcmillhj left
[20:46] *** cdg joined
[20:46] *** traxex2 joined
[20:50] *** cdg left
[20:53] *** zakharyas joined
[20:58] <Herby_> Do I need to include "use v6;" at the top of my scripts still?

[20:59] *** mcmillhj joined
[21:00] *** jaush left
[21:02] <moritz> no, but it gives much better error messages if you accidentally call it with "perl" instead of "perl6"

[21:03] *** dct joined
[21:04] *** mcmillhj left
[21:06] <Herby_> ok thanks

[21:18] *** mcmillhj joined
[21:23] *** mcmillhj left
[21:23] *** cdg joined
[21:24] *** cdg left
[21:25] *** cdg joined
[21:25] *** Kaiepi joined
[21:27] *** TEttinger joined
[21:33] *** mcmillhj joined
[21:37] *** phogg joined
[21:38] *** mcmillhj left
[21:43] <AlexDaniel> samcv: you here?

[21:43] <samcv> yes

[21:43] <AlexDaniel> I'm trying to figure out something

[21:43] <AlexDaniel> m: say uniname 0xAB

[21:43] <camelia> rakudo-moar 95f23a563: OUTPUT: ¬´LEFT-POINTING DOUBLE ANGLE QUOTATION MARK‚ê§¬ª

[21:43] <AlexDaniel> m: say uniname 0xAB.chr

[21:43] <camelia> rakudo-moar 95f23a563: OUTPUT: ¬´LEFT-POINTING DOUBLE ANGLE QUOTATION MARK‚ê§¬ª

[21:43] <AlexDaniel> ah‚Ä¶ nevermind

[21:43] <AlexDaniel> I'm dumb

[21:45] <AlexDaniel> m: say ‚Äú\x06\xAB‚Äù.encode

[21:45] <camelia> rakudo-moar 95f23a563: OUTPUT: ¬´utf8:0x<06 c2 ab>‚ê§¬ª

[21:46] <AlexDaniel> what is this c2?

[21:46] *** mcmillhj joined
[21:47] <samcv> it's utf8 encoded

[21:47] <moritz> uhm, the \xAB is encoded as two bytes

[21:47] <moritz> in UTF-8

[21:47] <samcv> yep

[21:47] <AlexDaniel> ahh

[21:47] <moritz> and the first of those is c2

[21:47] <AlexDaniel> ok

[21:50] *** committable6 left
[21:50] *** committable6 joined
[21:51] *** mcmillhj left
[21:55] *** wamba joined
[21:59] *** mcmillhj joined
[21:59] *** colomon joined
[22:00] *** skids left
[22:04] *** mcmillhj left
[22:05] <colomon> moritz: ping?

[22:07] <moritz> colomon: pong

[22:08] *** rindolf left
[22:08] *** R0b0t1 left
[22:09] <colomon> Perl 6 Fundamentals, page 47 top: does the line   my $waitfor = $promise    have some subtle point that I‚Äôm missing?  it looks like $waitfor is assigned again in the next line

[22:09] <moritz> colomon: but only conditionally, iirc

[22:10] <moritz> the second assignment, that is

[22:10] <colomon> aha!

[22:10] <colomon> moritz++

[22:10] *** R0b0t1 joined
[22:11] <moritz> could have been my $waitfor = $promise ?? Promise.anyof(Promise.in($timeout), $promise !! $promise;

[22:11] <colomon> moritz: was just thinking that would be clearer

[22:11] <colomon> but also perhaps more confusing to newbies

[22:11] <moritz> but that's even harder to fit into one line, and i'd have to explain the ternary op

[22:12] <moritz> and when you only have 67 characters per line in code examples *and* use four spaced for indentation, space usage becomes a real issue in code examples

[22:13] <moritz> I probably should have wasted a few lines and done an if / else with two separate assignments to $waitfor

[22:13] <moritz> meh, you always know better in hindsight :-)

[22:14] *** mcmillhj joined
[22:15] *** cdg left
[22:16] * moritz wishes he had the authors available for questions when reading his physics textbooks, back in the days :-)

[22:19] *** mcmillhj left
[22:20] *** pmurias left
[22:23] <Geth> ¬¶ roast: a7590d6543 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S32-str/utf8-c8.t

[22:23] <Geth> ¬¶ roast: Test malformed utf8 filenames roundtripping properly

[22:23] <Geth> ¬¶ roast: 

[22:23] <Geth> ¬¶ roast: Fixes RT#127671. Please feel free to object these tests (using similar

[22:23] <Geth> ¬¶ roast: concerns raised in the ticket). However, I still can't see how

[22:23] <Geth> ¬¶ roast: something in a subdirectory of /tmp can create a problem for any

[22:23] <synopsebot> RT#127671 [open]: https://rt.perl.org/Ticket/Display.html?id=127671 [EXOTICTEST] ÔΩ¢dirÔΩ£ dies if weird unicode sequences are encountered (dir;)

[22:23] <Geth> ¬¶ roast: user. To me it sounds like nothing should ever touch or see these

[22:23] <Geth> ¬¶ roast: files anyway.

[22:23] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/a7590d6543

[22:24] <AlexDaniel> oh god‚Ä¶ this just failed

[22:24] * AlexDaniel is working on it

[22:25] <AlexDaniel> what the

[22:25] *** zakharyas left
[22:27] *** GregDonald left
[22:28] *** mcmillhj joined
[22:29] * colomon might owe his $job to pestering one of the authors of The NURBS Book with questions and bugfixes back in the 90s

[22:32] <geekosaur> AlexDaniel, any program relying on filenames anywhere outside its direct control being *any* proper encoding is broke n

[22:32] <geekosaur> you get no promises whatsoever

[22:32] <Geth> ¬¶ roast: 800bc0a1d9 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S32-str/utf8-c8.t

[22:32] <Geth> ¬¶ roast: Whoops. New bug?

[22:32] <Geth> ¬¶ roast: 

[22:32] <Geth> ¬¶ roast: Previous commit¬π had a thinko and was attempting to treat a file

[22:32] <Geth> ¬¶ roast: created in the previous test as a directory. This is now fixed, but it

[22:32] <Geth> ¬¶ roast: seems like there's another ‚ÄúMalformed UTF-8‚Äù issue.

[22:32] <Geth> ¬¶ roast: 

[22:32] <Geth> ¬¶ roast: ¬π ‚Äì https://github.com/perl6/roast/commit/a7590d6543e1d29bc935377c727e4d15e38ee713

[22:32] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/800bc0a1d9

[22:33] <AlexDaniel> geekosaur: sorry, what does it mean?

[22:34] <geekosaur> I guess that  might actually be aimed at Zoffix's comment

[22:34] *** mcmillhj left
[22:34] <AlexDaniel> ah, now I see what you mean

[22:34] <geekosaur> on unix, you do not get to assume that filenames are utf8. or big5. or anything other than byte sequences.

[22:35] <AlexDaniel> I think the concern was that if the test suite creates these files, then the user may later have problems getting rid of them. Yes, all the other tools that can't handle that are broken, but we shouldn't be causing this kind of trouble

[22:35] <AlexDaniel> so I am creating a file in a subdirectory of /tmp, this way it shouldn't be a problem for anything

[22:36] <AlexDaniel> unless some crazy software monitors all changes in /tmp and then explodes when files like this are created

[22:37] <AlexDaniel> geekosaur: speaking of broken software, this test revealed another bug in perl6 I think‚Ä¶

[22:37] <geekosaur> but if it does that, *especially* in /tmp, all bets are off anyway.

[22:38] <geekosaur> pprograms can and will deliberately create weird filenames, because some programmers still think obscurity is a form of security

[22:38] <AlexDaniel> I agree, but at the same time agree that maybe we shouldn't be testing the rest of the OS with our test suite :D

[22:39] <AlexDaniel> anyway, the test is now in

[22:43] *** Zoffix joined
[22:44] <Zoffix> AlexDaniel: FWIW, Test::Utils provide routines for temp files/dirs

[22:44] <Zoffix> I wish roast didn't use a billion different ways of creating temp files (half of which spam the current directory with leftovers if aborted)

[22:44] <AlexDaniel> Zoffix: ahhh‚Ä¶ I just copied whatever was used on top of that code

[22:45] <AlexDaniel> m: my $file = ("/doesnotexist/".encode ~ Buf.new(0x06, 0xAB)).decode('utf8-c8'); spurt $file, 'hello';

[22:45] <camelia> rakudo-moar 95f23a563: OUTPUT: ¬´spurt is disallowed in restricted setting‚ê§  in sub restricted at src/RESTRICTED.setting line 1‚ê§  in sub spurt at src/RESTRICTED.setting line 17‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:45] <AlexDaniel> e: my $file = ("/doesnotexist/".encode ~ Buf.new(0x06, 0xAB)).decode('utf8-c8'); spurt $file, 'hello';

[22:45] <evalable6> AlexDaniel, rakudo-moar 95f23a563: OUTPUT: ¬´(exit code 1) Malformed UTF-8 at line 1 col 36‚ê§  in block <unit> at /tmp/5YtFoKr1zd line 1‚ê§‚ê§¬ª

[22:45] <Zoffix> These ones: https://github.com/perl6/roast/blob/master/packages/Test/Util.pm#L513-L532

[22:45] <AlexDaniel> e: my $file = ("/tmp/".encode ~ Buf.new(0x06, 0xAB)).decode('utf8-c8'); spurt $file, 'hello';

[22:45] <evalable6> AlexDaniel, rakudo-moar 95f23a563: OUTPUT: ¬´¬ª

[22:46] *** mcmillhj joined
[22:47] <Zoffix> e: my $file = ("/doesnotexis").decode('utf8-c8'); spurt $file, 'hello';

[22:47] <evalable6> Zoffix, rakudo-moar 95f23a563: OUTPUT: ¬´(exit code 1) No such method 'decode' for invocant of type 'Str'. Did you mean 'encode'?‚ê§  in block <unit> at /tmp/Kk82l80NWE line 1‚ê§‚ê§¬ª

[22:47] <Zoffix> e: my $file = ("/doesnotexis".encode).decode('utf8-c8'); spurt $file, 'hello';

[22:47] <evalable6> Zoffix, rakudo-moar 95f23a563: OUTPUT: ¬´(exit code 1) Can not decode a utf-8 buffer as if it were utf8-c8‚ê§  in block <unit> at /tmp/gMsGtk_AwT line 1‚ê§‚ê§¬ª

[22:47] <Zoffix> bah. Well, I was wondering if "malformed UTF" was actually commit from it trying to report the filename in the error message

[22:47] <AlexDaniel> it probably is

[22:47] <Zoffix> s/commit/comming/;

[22:48] <AlexDaniel> 6c: my $file = ("/doesnotexist/".encode ~ Buf.new(0x06, 0xAB)).decode('utf8-c8'); spurt $file, 'hello';

[22:48] <committable6> AlexDaniel, https://gist.github.com/7a545c8289f0002a448bb4e824dd73d3

[22:48] <AlexDaniel> or maybe not :)

[22:49] <Zoffix> :)

[22:50] <AlexDaniel> m: my $file = ("/doesnotexist/".encode ~ Buf.new(0x50, 0x50)).decode('utf8-c8'); spurt $file, 'hello';

[22:50] <camelia> rakudo-moar 95f23a563: OUTPUT: ¬´spurt is disallowed in restricted setting‚ê§  in sub restricted at src/RESTRICTED.setting line 1‚ê§  in sub spurt at src/RESTRICTED.setting line 17‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:50] <AlexDaniel> e: my $file = ("/doesnotexist/".encode ~ Buf.new(0x50, 0x50)).decode('utf8-c8'); spurt $file, 'hello';

[22:50] <evalable6> AlexDaniel, rakudo-moar 95f23a563: OUTPUT: ¬´(exit code 1) Failed to open file /doesnotexist/PP: No such file or directory‚ê§  in block <unit> at /tmp/Iy7xCEEB5O line 1‚ê§‚ê§¬ª

[22:51] *** mcmillhj left
[22:52] <squashable6> üçï AlexDaniel++ opened issue ‚ÄúMalformed UTF-8 error wh‚Ä¶‚Äù: https://github.com/rakudo/rakudo/issues/1470

[22:52] <squashable6> üçï AlexDaniel++ labeled issue ‚ÄúMalformed UTF-8 error wh‚Ä¶‚Äù: https://github.com/rakudo/rakudo/issues/1470

[22:53] <squashable6> üçï AlexDaniel++ wrote a comment on commit 800bc0a1d9a7: https://github.com/perl6/roast/commit/800bc0a1d9a7eea0f3f0a87e30c72a8143a42942#commitcomment-27304766

[22:54] *** espadrine_ left
[22:59] <stmuk> http://pl6anet.org/drop/ has macOS and Windows 64 bit star binaries

[23:00] <stmuk> delirium doesn't have stmuk :(

[23:01] *** mcmillhj joined
[23:02] <AlexDaniel> Zoffix: hmmm, I think directories created with make-temp-dir should be wiped in rm -rf style, or am I wrong?

[23:02] *** Skarsnik left
[23:02] <AlexDaniel> otherwise anything I create in that directory will prevent it from deleting it

[23:04] <Geth> ¬¶ roast: 104173b332 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S32-str/utf8-c8.t

[23:04] <Geth> ¬¶ roast: Use make-temp-dir and make-temp-file

[23:04] <Geth> ¬¶ roast: 

[23:04] <Geth> ¬¶ roast: https://irclog.perlgeek.de/perl6/2018-02-02#i_15771428

[23:04] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/104173b332

[23:05] *** epony left
[23:05] *** epony joined
[23:05] <Zoffix> AlexDaniel: what does it use now? I see an `rmdir  ` call

[23:06] <AlexDaniel> yeah, rmdir only removes empty directories

[23:06] <Zoffix> oh it's a core routine

[23:06] <Zoffix> m: say &rmdir

[23:06] <camelia> rakudo-moar 95f23a563: OUTPUT: ¬´sub rmdir (| is raw) { #`(Sub|38293720) ... }‚ê§¬ª

[23:06] *** mcmillhj left
[23:07] <Zoffix> AlexDaniel: *shrug*. I guess

[23:07] * Zoffix is always weary of rm -fr code due to bugs

[23:08] <squashable6> üçï AlexDaniel++ opened issue ‚Äúmake-temp-dir should beh‚Ä¶‚Äù: https://github.com/perl6/roast/issues/384

[23:08] <AlexDaniel> Zoffix: yeah‚Ä¶ but here's a ticket anyway ‚Üë

[23:08] <Zoffix> mhm

[23:08] <AlexDaniel> maybe we can even run the test suite and see if there are any directories left behind for that reason

[23:09] <Zoffix> I have a few

[23:09] <Zoffix> $ ls /tmp/perl6_roast* | wc -l

[23:09] <Zoffix> 3276

[23:09] <squashable6> üçï AlexDaniel++ edited issue ‚Äúmake-temp-dir should beh‚Ä¶‚Äù: https://github.com/perl6/roast/issues/384

[23:09] <colomon> moritz: do you know if there‚Äôs a standard idiom for sending the stdout or stderr of a Proc::Async to files?  I think I can see how to do it, but it seems awfully longwinded for something I‚Äôd think would be common.

[23:10] <Zoffix> whenever $proc.stdout { "file".IO.spurt: :append, $_ } Maybe?

[23:11] <AlexDaniel> that's not nice

[23:11] <Zoffix> :)

[23:11] <Zoffix> Why not?

[23:11] <AlexDaniel> because you're slowing it down by processing the stdout in perl6 :)

[23:11] <AlexDaniel> there's .bind-stdout that you can call, and you give it IO::Handle

[23:11] <Zoffix> Ahhh

[23:11] <AlexDaniel> https://github.com/rakudo/rakudo/blob/593fa5f87fcc97cf3cbafd62f34b3119c9b1fbe3/src/core/Proc/Async.pm#L228-L253

[23:12] <Zoffix> Don't see it in the docs

[23:12] <AlexDaniel> yea because https://github.com/perl6/doc/issues/1470

[23:12] <Zoffix> ZofBot: lazy developers! :P

[23:12] <ZofBot> Zoffix, See wiki for some examples: https://github

[23:13] <colomon> AlexDaniel++ AlexDaniel++

[23:13] <colomon> exactly what I was looking for

[23:13] <AlexDaniel> ahhahaha, I wish ZofBot included the link in full https://github.com/perl6/whateverable/wiki

[23:13] <Zoffix> It was being lazy :)

[23:13] <AlexDaniel> (for some examples of lazy developers)

[23:14] <Zoffix> "Guessable"? 

[23:15] <AlexDaniel> I think there's was an idea of giving it some random info, like a sha hash of a commit

[23:15] <AlexDaniel> and it would turn it into a link

[23:15] <AlexDaniel> (kind of guessing which repository it is from, although it is not really guessing)

[23:16] <AlexDaniel> but with 212 issues open it is unlikely that I'll create a new bot in the near future :)

[23:16] <AlexDaniel> already spent 3 days trying to unbitrot existing ones

[23:18] *** mcmillhj joined
[23:19] *** setty1 left
[23:20] *** epony left
[23:21] <AlexDaniel> u: light bulb

[23:21] <unicodable6> AlexDaniel, U+1F4A1 ELECTRIC LIGHT BULB [So] (üí°)

[23:22] *** Zoffix left
[23:23] *** mcmillhj left
[23:24] <lucs> Going through the syntax docs, can someone explain what "Identifiers can contain colon pairs" is about?

[23:24] *** epony joined
[23:27] *** GregDonald joined
[23:29] <AlexDaniel> ‚Ä¶ TIL

[23:29] <AlexDaniel> m: my $foo:bar<2> = 5; say $foo:bar(1+1)

[23:29] <camelia> rakudo-moar 95f23a563: OUTPUT: ¬´5‚ê§¬ª

[23:29] <lucs> For example, what does ÔΩ¢my $foo.bar = 1ÔΩ£ get me that ÔΩ¢my $foo-bar = 1ÔΩ£ doesn't?

[23:31] <AlexDaniel> lucs: well, one example is right there ‚Üë

[23:31] <AlexDaniel> but I don't know what would be the reason to use that

[23:31] *** Aceeri_ joined
[23:32] <lucs> Hmm... Yes. Weird.

[23:35] *** mcmillhj joined
[23:36] *** skids joined
[23:40] *** zeddy__k left
[23:40] *** mcmillhj left
[23:40] *** zeddy__k joined
[23:45] <AlexDaniel> lucs: https://github.com/perl6/doc/issues/1753

[23:46] <AlexDaniel> m: my $foo:bar<1> = 42; my $foo:bar<2> = 666; say $foo:bar(^2 .pick)

[23:46] <camelia> rakudo-moar 95f23a563: OUTPUT: ¬´42‚ê§¬ª

[23:46] <AlexDaniel> m: my $foo:bar<1> = 42; my $foo:bar<2> = 666; say $foo:bar(^2 .pick)

[23:46] <camelia> rakudo-moar 95f23a563: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$foo:bar<0>' is not declared. Did you mean any of these?‚ê§    $foo:bar<2>‚ê§    $foo:bar<1>‚ê§‚ê§at <tmp>:1‚ê§------> 3:bar<1> = 42; my $foo:bar<2> = 666; say 7‚èè5$foo:bar(^2 .pick)‚ê§¬ª

[23:47] <AlexDaniel> m: my $foo:bar<1> = 42; my $foo:bar<2> = 666; say $foo:bar(<1 2>.pick)

[23:47] <camelia> rakudo-moar 95f23a563: OUTPUT: ¬´42‚ê§¬ª

[23:47] <AlexDaniel> m: my $foo:bar<1> = 42; my $foo:bar<2> = 666; say $foo:bar(<1 2>.pick)

[23:47] <camelia> rakudo-moar 95f23a563: OUTPUT: ¬´42‚ê§¬ª

[23:47] <AlexDaniel> m: my $foo:bar<1> = 42; my $foo:bar<2> = 666; say $foo:bar(<1 2>.pick)

[23:47] <camelia> rakudo-moar 95f23a563: OUTPUT: ¬´42‚ê§¬ª

[23:47] <AlexDaniel> m: my $foo:bar<1> = 42; my $foo:bar<2> = 666; say $foo:bar(<1 2>.pick)

[23:47] <camelia> rakudo-moar 95f23a563: OUTPUT: ¬´666‚ê§¬ª

[23:48] <lucs> AlexDaniel: Thanks

[23:49] *** mcmillhj joined
[23:49] *** aindilis` left
[23:49] *** aindilis` joined
[23:54] *** mcmillhj left
[23:57] *** MasterDuke joined
[23:57] *** aindilis` left
