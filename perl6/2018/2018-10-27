[00:07] *** w_richard_w joined
[00:08] *** w_richard_w left
[00:19] *** kentnl left
[00:20] *** kent\n joined
[00:20] *** p6bannerbot sets mode: +v kent\n

[00:22] <moony> How do i asyncronously get input?

[00:22] <moony> from stdin

[00:24] <timotimo> you can get a supply from $*IN.lines.Supply, but it seems like it only really gets started once the first line has come through, which i'd say is probably a bug

[00:26] <timotimo> supplies can be used with react/whenever and supply/whenever

[00:34] <timotimo> maybe mystery solved

[00:35] <timotimo> perfect

[00:35] <timotimo> moony: run this code:

[00:35] <timotimo> perl6 -e 'react { whenever Supply.from-list($*IN.lines, scheduler => $*SCHEDULER) { say "got a line: $_"; LAST { say "oh!"; done } }; whenever Supply.interval(1) { say "beep" } }'

[00:41] *** leont left
[00:41] <timotimo> we don't have a .Channel method on List nor Seq?

[00:42] <moony> timotimo, thanks

[00:42] <timotimo> oh that was meant for the dev channel

[00:42] <moony> glad i wasn't far in, refactoring to use that new thing i've never seen before (:P) wasn't hard

[00:43] <timotimo> you can do it many different ways, of course

[00:43] <timotimo> you could have a little "service worker", too

[00:43] <timotimo> my Channel $incoming-lines; my $worker = start { for $*IN.lines { $incoming-lines.send($_) } }; ...

[00:44] *** JonathanMcClare2 joined
[00:44] *** JonathanMcClare2 left
[00:49] *** lizmat left
[00:50] <moony> How often does the default scheduler check?

[00:51] <timotimo> how do you mean?

[00:52] <timotimo> getting the lines from $*IN is actually a sync operation and the default scheduler will allocate a thread for you to handle the work

[00:52] <timotimo> so it'll immediately react whenever a line comes in

[00:52] <timotimo> on the other hand, a full thread will be tied up

[01:09] *** lizmat joined
[01:09] *** p6bannerbot sets mode: +v lizmat

[01:09] * timotimo goes to sleep

[01:16] *** fake_space_whale joined
[01:17] *** cognominal-p6 joined
[01:17] *** p6bannerbot sets mode: +v fake_space_whale

[01:17] *** p6bannerbot sets mode: +v cognominal-p6

[01:30] *** cognominal-p6 left
[01:30] *** cognominal-p6 joined
[01:31] *** p6bannerbot sets mode: +v cognominal-p6

[01:41] *** cognominal-p6 left
[01:43] <SmokeMachine> m: react whatever $*IN.Supply { .say }

[01:43] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unexpected block in infix position (missing statement control word before the expression?)␤at <tmp>:1␤------> 3react whatever $*IN.Supply7⏏5 { .say }␤    expecting any of:␤        infix␤…»

[01:43] <SmokeMachine> m: react whenever $*IN.Supply { .say }

[01:43] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «»Wann treffen wir drei wieder zusamm?«␤   »Um die siebente Stund‘, am Brückendamm.«␤     »Am Mittelpfeiler.«␤         »Ich lösche die Flamm.«␤ »Ich mit«␤␤         »Ich komme vom Norden her.«␤        »Und ich vom Süden.…»

[01:48] *** ryn1x joined
[01:49] *** p6bannerbot sets mode: +v ryn1x

[01:51] *** molaf left
[01:54] *** lindylex joined
[01:55] *** p6bannerbot sets mode: +v lindylex

[02:04] *** molaf joined
[02:05] *** p6bannerbot sets mode: +v molaf

[02:24] *** ChoHag left
[02:40] *** molaf left
[02:42] <buggable> New CPAN upload: Game-Markov-0.1.6.tar.gz by HOLYGHOST http://modules.perl6.org/dist/Game::Markov:cpan:HOLYGHOST

[02:52] *** molaf joined
[02:53] *** p6bannerbot sets mode: +v molaf

[03:53] *** evalable6 left
[03:53] *** evalable6 joined
[03:53] *** ChanServ sets mode: +v evalable6

[03:54] *** p6bannerbot sets mode: +v evalable6

[03:58] *** guifa joined
[03:58] *** p6bannerbot sets mode: +v guifa

[04:02] <guifa> So I was refactoring some code and have been getting a really weird and I have no idea what's causing it and can't seem to recreate it in any other file (gremlins....)

[04:02] <guifa> my Array[Str] %definitions{Str} = ("foo"=> Array[Str].new(<foo bar>));

[04:02] <guifa> Type check failed in assignment to %definitions; expected Array[Str] but got Array[Str].new("foo", "...

[04:03] <moony> What would be a good way to convert a Blob to a list of 16 bit integers (Joining together bytes in the process)

[04:18] <moony> nvm, figured it out

[04:26] *** guifa left
[04:35] *** lizmat left
[04:37] *** cognominal-p6 joined
[04:38] *** p6bannerbot sets mode: +v cognominal-p6

[04:38] *** lizmat joined
[04:38] *** p6bannerbot sets mode: +v lizmat

[04:43] *** lizmat left
[04:43] *** ryn1x left
[04:51] *** Xliff joined
[04:51] *** p6bannerbot sets mode: +v Xliff

[04:53] <Xliff> m: use NativeCall; class A is repr('CStruct') { has uint32 $.a }; sub err { my $e = CArray[Pointer[A]].new; $e[0] = Pointer; return $e; }; sub b ($c, $d, $e = err) { say "$c/$d/$e" }; b(1, 2);

[04:53] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Use of uninitialized value of type NativeCall::Types::Pointer in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤1/2/␤  in method Str at /home/camelia/rakudo-m-inst-2/share/perl6/sources…»

[04:53] <Xliff> m: use NativeCall; class A is repr('CStruct') { has uint32 $.a }; sub err { my $e = CArray[Pointer[A]].new; $e[0] = Pointer[A]; return $e; }; sub b ($c, $d, $e = err) { say "$c/$d/$e" }; b(1, 2);

[04:53] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Use of uninitialized value of type NativeCall::Types::Pointer[A] in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤1/2/␤  in method Str at /home/camelia/rakudo-m-inst-2/share/perl6/sour…»

[04:54] *** fake_space_whale left
[04:55] <Xliff> m: use NativeCall; class A is repr('CStruct') { has uint32 $.a }; sub err { my $e = CArray[Pointer[A]].new; $e[0] = Pointer[A]; $e; }; sub b ($c, $d, $e = err) { say "$c/$d"; say $e.defined ?? $e.gist !! 'NO E' }; b(1, 2);

[04:55] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «1/2␤NativeCall::Types::CArray[NativeCall::Types::Pointer[A]].new␤»

[05:08] *** luis joined
[05:09] *** cognominal-p6 left
[05:09] *** fake_space_whale joined
[05:09] *** p6bannerbot sets mode: +v luis

[05:09] *** p6bannerbot sets mode: +v fake_space_whale

[05:20] <SmokeMachine> m: module Bla {}; our &Bla::qqq = sub {}; say Bla::.keys

[05:20] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «(&qqq)␤»

[05:21] <SmokeMachine> How can I do that if I down know at compile time the name of de module neither the name of the sub?

[05:22] <SmokeMachine> m: module Bla {}; ::("&Bla::qqq") = sub {}; say Bla::.keys # this doesn't work... :(

[05:22] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «No such symbol '&Bla::qqq'␤  in block <unit> at <tmp> line 1␤␤»

[05:24] <Xliff> m: module Bla {}; ::("&Bla::qqq") = sub {}; say ::('Bla::').keys 

[05:24] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «No such symbol '&Bla::qqq'␤  in block <unit> at <tmp> line 1␤␤»

[05:24] <Xliff> m: module Bla {}; ::("Bla::&qqq") = sub {}; say ::('Bla::').keys 

[05:24] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «No such symbol 'Bla::&qqq'␤  in block <unit> at <tmp> line 1␤␤»

[05:24] <Xliff> m: module Bla { sub qqq { }; }; say ::('Bla::').keys 

[05:24] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «(0)␤»

[05:24] <Xliff> m: module Bla { sub qqq { }; }; say ::('Bla')::.keys 

[05:24] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «()␤»

[05:24] <Xliff> m: module Bla { sub qqq { 1; }; }; say ::('Bla')::.keys 

[05:24] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «()␤»

[05:25] <Xliff> m: module Bla { sub qqq { 1; }; }; say Bla::.keys 

[05:25] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «()␤»

[05:25] <Xliff> m: module Bla { sub qqq is export { 1; }; }; say Bla::.keys 

[05:25] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «(EXPORT)␤»

[05:25] <Xliff> m: module Bla { sub qqq is export { 1; }; }; say Bla::EXPORT::.keys 

[05:25] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «(ALL DEFAULT)␤»

[05:25] <Xliff> m: module Bla { sub qqq is export { 1; }; }; say Bla::EXPORT::ALL::.keys 

[05:25] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «(&qqq)␤»

[05:25] <Xliff> SmokeMachine: ^^^

[05:26] <Xliff> m: module Bla { sub qqq is export { 1; }; }; say ::('Bla::').keys 

[05:26] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «(0)␤»

[05:26] <Xliff> m: module Bla { sub qqq is export { 1; }; }; say ::('Bla')::.keys 

[05:26] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «()␤»

[05:26] <Xliff> m: module Bla { sub qqq is export { 1; }; }; say ::('Bla')::EXPORT::ALL.keys 

[05:26] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «()␤»

[05:27] <Xliff> m: module Bla { sub qqq is export { 1; }; }; say ::('Bla')::EXPORT::ALL::.keys 

[05:27] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «()␤»

[05:27] <SmokeMachine> Yes, but I don’t want to export that...

[05:27] <Xliff> OK. Then I won't be of much help until after I take a nap, unfortunately.

[05:28] <Xliff> m: module Bla { sub qqq { 1; }; }; say Bla::.keys

[05:28] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «()␤»

[05:28] <Xliff> m: module Bla { sub qqq { 1; }; }; Bla::qqq.say say Bla::.keys

[05:28] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3le Bla { sub qqq { 1; }; }; Bla::qqq.say7⏏5 say Bla::.keys␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤    …»

[05:28] <Xliff> m: module Bla { sub qqq { 1; }; }; say Bla::qqq; say Bla::.keys

[05:28] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Could not find symbol '&qqq'␤  in block <unit> at <tmp> line 1␤␤»

[05:28] <SmokeMachine> I want to make a `my` sub be accessible as `Module::sub`

[05:29] *** Sgeo joined
[05:29] <Xliff> SmokeMachine: My best guess at that is to make a custom EXPORT sub and export it as that symbol.

[05:30] *** p6bannerbot sets mode: +v Sgeo

[05:30] <Xliff> Ala: sub EXPORT { %( 'Bla::qqq' => &qqq ); }

[05:30] <SmokeMachine> Xliff: yes, I’m trying to do that inside of a custom EXPORT...

[05:30] <Xliff> m: module Bla { sub EXPORT { %( 'Bla::qqq' => &qqq ) }; sub qqq { 1; }; }; say Bla::qqq; say Bla::.keys

[05:30] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Could not find symbol '&qqq'␤  in block <unit> at <tmp> line 1␤␤»

[05:30] <SmokeMachine> That didn’t work for me...

[05:30] <Xliff> m: package Bla { sub EXPORT { %( 'Bla::qqq' => &qqq ) }; sub qqq { 1; }; }; say Bla::qqq; say Bla::.keys

[05:30] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Could not find symbol '&qqq'␤  in block <unit> at <tmp> line 1␤␤»

[05:31] <Xliff> m: module Bla { sub qqq { ... }; sub EXPORT { %( 'Bla::qqq' => &qqq ) }; sub qqq { 1; }; }; say Bla::qqq; say Bla::.keys

[05:31] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Could not find symbol '&qqq'␤  in block <unit> at <tmp> line 1␤␤»

[05:31] <Xliff> m: module Bla { sub qqq { ... }; sub EXPORT { %( 'Bla::qqq' => &Bla::qqq ) }; sub qqq { 1; }; }; say Bla::qqq; say Bla::.keys

[05:31] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Could not find symbol '&qqq'␤  in block <unit> at <tmp> line 1␤␤»

[05:32] *** Sgeo_ left
[05:32] <Xliff> m: module Bla { sub qqq { ... }; sub EXPORT { %( 'Bla::qqq' => &qqq ) }; sub qqq { 1; }; }; say Bla::.keys

[05:32] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «()␤»

[05:32] <Xliff> m: module Bla { sub qqq { ... }; sub EXPORT { %( '&Bla::qqq' => &qqq ) }; sub qqq { 1; }; }; say Bla::.keys

[05:32] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «()␤»

[05:32] <Xliff> m: module Bla { sub qqq { ... }; sub EXPORT { %( '&Bla::qqq' => &qqq ) }; sub qqq { 1; }; }; say Bla::qqq; say Bla::.keys

[05:32] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Could not find symbol '&qqq'␤  in block <unit> at <tmp> line 1␤␤»

[05:32] <SmokeMachine> Xliff: it’s not running the EXPORT sub...

[05:33] <Xliff> m: package Bla { sub qqq { ... }; sub EXPORT { %( '&Bla::qqq' => &qqq ) }; sub qqq { 1; }; }; say Bla::qqq; say Bla::.keys

[05:33] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Could not find symbol '&qqq'␤  in block <unit> at <tmp> line 1␤␤»

[05:33] <Xliff> Yeah. I think that needs to come outside of the module. I have examples. 

[05:33] <Xliff> Somewhere.

[05:33] <Xliff> SmokeMachine: ping me tomorrow. I will be conscious enough to help, then. Sorry.

[05:34] <SmokeMachine> m: module Bla { sub bla is export {} }; import Bla; say bla

[05:34] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «Nil␤»

[05:36] <SmokeMachine> m: module Bla { sub EXPORT(|) { { ‘&bla’ => sub { 42 } }}; import Bla 123; say bla

[05:36] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3> sub { 42 } }}; import Bla 123; say bla7⏏5<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        stat…»

[05:36] *** Bucciarati left
[05:36] *** Bucciarati joined
[05:36] <SmokeMachine> m: module Bla { sub EXPORT(|) { { ‘&bla’ => sub { 42 } } } }; import Bla 123; say bla

[05:36] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    bla used at line 1␤␤»

[05:37] *** p6bannerbot sets mode: +v Bucciarati

[05:44] <SmokeMachine> m: module Bla {}; ‘our &Bla::qqq = sub {}’.EVAL; say Bla::.keys # Xliff: not the way I’d like... but it’s working!

[05:44] <camelia> rakudo-moar 7b0c5364f: OUTPUT: «(&qqq)␤»

[05:50] *** fake_space_whale left
[05:53] *** lindylex left
[06:01] *** MasterDuke left
[06:27] *** troys left
[06:33] *** riatre left
[06:34] *** riatre joined
[06:35] *** p6bannerbot sets mode: +v riatre

[06:37] *** ufobat joined
[06:37] *** p6bannerbot sets mode: +v ufobat

[07:05] *** irco left
[07:08] *** irco joined
[07:09] *** p6bannerbot sets mode: +v irco

[07:10] *** irco left
[07:12] *** irco joined
[07:13] *** p6bannerbot sets mode: +v irco

[07:14] *** jmerelo joined
[07:15] *** irco left
[07:15] *** p6bannerbot sets mode: +v jmerelo

[07:16] *** irco joined
[07:17] *** p6bannerbot sets mode: +v irco

[07:19] *** irco left
[07:20] *** irco joined
[07:21] *** p6bannerbot sets mode: +v irco

[07:41] *** holyghost left
[07:44] *** irco left
[07:46] *** irco joined
[07:46] *** p6bannerbot sets mode: +v irco

[07:48] *** dct joined
[07:48] *** p6bannerbot sets mode: +v dct

[08:04] *** cognominal-p6 joined
[08:05] *** p6bannerbot sets mode: +v cognominal-p6

[08:05] *** noganex_ left
[08:06] *** noganex joined
[08:07] *** rindolf joined
[08:07] *** p6bannerbot sets mode: +v noganex

[08:07] *** p6bannerbot sets mode: +v rindolf

[08:09] *** dct left
[08:16] *** cognominal-p6 left
[08:16] *** cognominal-p6 joined
[08:17] *** p6bannerbot sets mode: +v cognominal-p6

[08:31] *** cognominal-p6 left
[08:33] *** jmerelo left
[08:35] *** rindolf left
[08:40] *** rindolf joined
[08:40] *** p6bannerbot sets mode: +v rindolf

[08:47] *** HaraldJoerg joined
[08:48] *** p6bannerbot sets mode: +v HaraldJoerg

[09:01] *** cognominal-p6 joined
[09:01] *** cognominal-p6 left
[09:02] *** cognominal-p6 joined
[09:02] *** p6bannerbot sets mode: +v cognominal-p6

[09:08] *** zxcvz joined
[09:08] *** p6bannerbot sets mode: +v zxcvz

[09:15] *** molaf left
[09:25] *** Bucciarati left
[09:25] *** Bucciarati joined
[09:26] *** p6bannerbot sets mode: +v Bucciarati

[09:26] *** noganex_ joined
[09:27] *** p6bannerbot sets mode: +v noganex_

[09:29] *** kensanata joined
[09:29] *** p6bannerbot sets mode: +v kensanata

[09:29] *** cognominal-p6 left
[09:29] *** noganex left
[09:29] *** zzzzzzzzz_ joined
[09:29] *** p6bannerbot sets mode: +v zzzzzzzzz_

[10:05] *** ChoHag joined
[10:05] *** soulcollector27 joined
[10:05] *** p6bannerbot sets mode: +v ChoHag

[10:05] *** soulcollector27 left
[10:22] <El_Che> releasable6: 

[10:22] <releasable6> El_Che, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Releasable

[10:22] <El_Che> releasable6: status

[10:22] <releasable6> El_Che, Next release will happen when it's ready. 0 blockers. 492 out of 516 commits logged

[10:22] <releasable6> El_Che, Details: https://gist.github.com/c7557573b74ab330d8166242a19745aa

[10:31] <xinming> What does Slip mean?

[10:31] *** pecastro joined
[10:31] <timotimo> it's a list that "slips right into" whatever it's being iterated into

[10:32] *** p6bannerbot sets mode: +v pecastro

[10:32] <xinming> SeqWhat about Seq then?

[10:32] <timotimo> short for Sequence

[10:32] <xinming> I'm trying to understand how they are related.

[10:32] <xinming> Will trouble here later.

[10:33] <xinming> I thought they are all "list" thing, and "array" is variable. After I dive in to it, I found it's more complex than I thought.

[10:33] <timotimo> yeah, there's a bit more to it than that

[10:50] *** lizmat joined
[10:50] *** p6bannerbot sets mode: +v lizmat

[11:09] *** cognominal-p6 joined
[11:09] *** Zoffix joined
[11:09] *** p6bannerbot sets mode: +v Zoffix

[11:10] *** p6bannerbot sets mode: +v cognominal-p6

[11:13] *** cognominal-p6 left
[11:13] *** cognominal-p6 joined
[11:14] *** p6bannerbot sets mode: +v cognominal-p6

[11:16] <Zoffix> xinming: a List is an immutable list of value, a Slip is a List that slips into outer container, an Array is a List that is mutable. All three of these are Positional and their elements can be accessed with `[...]` subscripts willy-nilly. They're also Iterable, meaning you can do stuff like `for the-thing { .say }` and iterate over their individual elements. `Seq` is a sequential list of items. It is NOT a

[11:16] <Zoffix> Positional, so you cannot access its elements with `[...]`, but it is an `Iterable`, so you can still do `for some-seq { ... }`. If you try, you'll notice that you *can* actually use `[...]` subscripts with `Seq`s, but that's because it has convenience features like caching and PositionalBindFailover that make it functionally closer to a List when you need it to be. A cached Seq will keep its generated values

[11:16] <Zoffix> around (which may be undesirable if it's really big). You can cache explicitly, by calling `.cache` method or use one of the methods that cache for you ( https://rakudo.party/post/Perl-6-Seqs-Drugs-and-Rock-n-Roll#stashintothecache ). The PositionalBindFailover allows a Seq to be bound to a `@-` parameter. It's because `@-` typechecks on Positional, but Seq ain't a Positional. And that's all there is to a

[11:16] <Zoffix> `@-`sigilled variables: it's simply a shortcut to typecheck for Positional. It's not an "array variable"; Arrays is just what you get by default if you try to assign to it, but you can bind (:=) any Positional type to it ( https://perl6advent.wordpress.com/2017/12/02/#positionlly )

[11:17] *** sena_kun joined
[11:18] *** p6bannerbot sets mode: +v sena_kun

[11:19] *** Zoffix left
[11:38] *** ufobat left
[11:40] *** molaf joined
[11:40] *** p6bannerbot sets mode: +v molaf

[11:52] *** ChoHag left
[11:55] <tbrowder___> hi, #perl6

[11:56] *** leont joined
[11:57] *** p6bannerbot sets mode: +v leont

[12:10] *** zzzzzzzzz_ left
[12:15] <moritz> \o

[12:25] *** kst left
[12:30] *** kensanata left
[12:32] *** cognominal-p6 left
[12:34] *** molaf left
[12:35] *** pmurias joined
[12:35] *** p6bannerbot sets mode: +v pmurias

[12:36] <tbrowder___> hi, moritz! i was going to ask a question but i found the answer. i’ll probably ask another before too long

[12:40] <tbrowder___> but since you’re here, what do you think of using coding style of explicit references to defining the .ast value for a grammar match. made and make are confusing to me and i would like to do something like “$/<some-tok>.ast := ‘foo’”

[12:42] <moritz> tbrowder___: I'd use assignment instead of binding (unless there's a really good reason), but I don't see any problem with that

[12:42] <moritz> though I don't see the confusion either. make(foo) is just $/.ast = foo

[12:43] <tbrowder___> um, i did the binding because it’s in nqp. so what if i used that style in rakudo nqp. would that cause some heartburn?

[12:44] *** cpup left
[12:45] <tbrowder___> and the confusion for me is i guess i have too many years of make meaning just one thing

[12:46] <moritz> oh, you're talking about NQP. Then binding is correct, yes

[12:46] <tbrowder___> it just doesn’t stand out to me so naturally yet, but it’s coming albeit slowly

[12:50] *** daemon left
[12:50] *** daemon joined
[12:50] *** daemon left
[12:50] *** daemon joined
[12:50] *** p6bannerbot sets mode: +v daemon

[12:51] *** p6bannerbot sets mode: +v daemon

[13:05] <Geth> ¦ doc: c67f94b586 | (Zoffix Znet)++ | doc/Language/pragmas.pod6

[13:05] <Geth> ¦ doc: Pragmas ain't modules

[13:05] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c67f94b586

[13:05] <synopsebot> Link: https://doc.perl6.org/language/pragmas

[13:11] *** MasterDuke joined
[13:11] *** p6bannerbot sets mode: +v MasterDuke

[13:11] *** MasterDuke left
[13:11] *** MasterDuke joined
[13:11] *** herbert.freenode.net sets mode: +v MasterDuke

[13:11] *** p6bannerbot sets mode: +v MasterDuke

[13:14] *** comborico1611 left
[13:23] *** cognominal-p6 joined
[13:24] *** p6bannerbot sets mode: +v cognominal-p6

[13:34] *** cognominal-p6 left
[13:35] *** cognominal-p6 joined
[13:36] *** p6bannerbot sets mode: +v cognominal-p6

[13:48] *** cognominal-p6 left
[13:48] *** cognominal-p6 joined
[13:49] *** p6bannerbot sets mode: +v cognominal-p6

[14:02] <buggable> New CPAN upload: App-Mi6-0.2.2.tar.gz by SKAJI http://modules.perl6.org/dist/App::Mi6:cpan:SKAJI

[14:05] *** Daniela joined
[14:06] *** Daniela left
[14:08] *** MasterDuke left
[14:24] *** comborico1611 joined
[14:25] *** p6bannerbot sets mode: +v comborico1611

[14:30] *** xinming left
[14:36] <Geth> ¦ doc: dd6f5a1ade | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/glossary.pod6

[14:36] <Geth> ¦ doc: Document "SAP" can be verbified

[14:36] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/dd6f5a1ade

[14:36] <synopsebot> Link: https://doc.perl6.org/language/glossary

[14:38] *** azawawi joined
[14:38] *** p6bannerbot sets mode: +v azawawi

[14:38] *** comborico1611 left
[14:40] <azawawi> libclang bindings for Perl 6 # https://pasteboard.co/HKoSPio.png

[14:41] <azawawi> https://travis-ci.org/azawawi/p6-libclang/jobs/447102638#L631 # strange 'MoarVM panic: Internal error: Unwound entire stack and missed handler' on older rakudos. Was it fixed recently?

[14:42] <buggable> New CPAN upload: Libclang-0.1.0.tar.gz by AZAWAWI http://modules.perl6.org/dist/Libclang:cpan:AZAWAWI

[14:44] *** azawawi left
[14:57] *** xinming joined
[14:58] *** p6bannerbot sets mode: +v xinming

[15:08] <Xliff> Type check failed in binding to parameter '$error'; expected NativeCall::Types::CArray[NativeCall::Types::Pointer[GTK::Compat::Types::GError]] but got NativeCall::Types::CArray[NativeCall::Types::Pointer[GTK::Compat::Types::GError]].new

[15:08] <Xliff> ^^ Why is that an error

[15:20] *** Zoffix joined
[15:20] *** p6bannerbot sets mode: +v Zoffix

[15:20] <Zoffix> Xliff: possibly a yesterday-fixed Rakudo bug

[15:20] <Xliff> OK. I will brew. Thanks!?

[15:20] <Xliff> s/?$//

[15:23] *** xinming left
[15:24] *** xinming joined
[15:24] *** p6bannerbot sets mode: +v xinming

[15:33] <Xliff> Zoffix: Unfortunately not.

[15:33] <Xliff> Type check failed in binding to parameter '$error'; expected NativeCall::Types::CArray[NativeCall::Types::Pointer] but got NativeCall::Types::CArray[NativeCall::Types::Pointer[GTK::Compat::Types::GError]] (NativeCall::Types::CArray[NativeCall::Types::Pointer[GTK::Compat::Types::GError]].new)

[15:33] <Xliff>   in method add_objects_from_string at /home/cbwood/Projects/p6-GtkPlus/lib/GTK/Builder.pm6 (GTK::Builder) line 301

[15:34] <Zoffix> Xliff: the error looks different now... and shows different types, doesn't it?

[15:34] <Xliff> Yes. 

[15:35] *** fake_space_whale joined
[15:36] *** p6bannerbot sets mode: +v fake_space_whale

[15:36] <Xliff> Ah, good! Changing back to original is passing the type check and now doing what I intended.

[15:37] <Zoffix> sweet

[15:44] *** cognominal-p6 left
[15:44] *** Zoffix left
[15:47] *** ryn1x joined
[15:47] *** daxim left
[15:47] *** daxim joined
[15:47] *** p6bannerbot sets mode: +v ryn1x

[15:48] *** p6bannerbot sets mode: +v daxim

[15:49] *** molaf joined
[15:50] *** p6bannerbot sets mode: +v molaf

[15:55] *** ChoHag joined
[15:55] *** p6bannerbot sets mode: +v ChoHag

[15:58] *** xinming left
[15:58] *** xinming joined
[15:59] *** p6bannerbot sets mode: +v xinming

[16:06] *** cognominal-p6 joined
[16:06] *** p6bannerbot sets mode: +v cognominal-p6

[16:12] *** cpup joined
[16:12] *** p6bannerbot sets mode: +v cpup

[16:21] *** |oLa| left
[16:22] *** |oLa| joined
[16:22] *** p6bannerbot sets mode: +v |oLa|

[16:23] *** donaldh_ left
[16:27] *** kaare_ left
[16:27] *** kaare_ joined
[16:28] *** p6bannerbot sets mode: +v kaare_

[16:29] *** cognominal-p6 left
[16:29] *** cognominal-p6 joined
[16:30] *** p6bannerbot sets mode: +v cognominal-p6

[16:33] *** molaf left
[16:34] *** MasterDuke joined
[16:34] *** p6bannerbot sets mode: +v MasterDuke

[16:34] *** MasterDuke left
[16:34] *** MasterDuke joined
[16:34] *** herbert.freenode.net sets mode: +v MasterDuke

[16:34] *** p6bannerbot sets mode: +v MasterDuke

[16:55] *** Manifest0 joined
[16:55] *** p6bannerbot sets mode: +v Manifest0

[16:56] *** cognominal-p6 left
[17:00] *** zakharyas joined
[17:01] *** p6bannerbot sets mode: +v zakharyas

[17:06] *** Bucciarati left
[17:11] *** leont left
[17:12] *** Bucciarati joined
[17:12] *** p6bannerbot sets mode: +v Bucciarati

[17:14] <ugexe> looks like jvm on travis no longer builds/tests properly for about a week

[17:14] <ugexe> seems like the makefile is broken

[17:17] <ugexe> or that the prove command doesn't work like `make test` on jvm for some reason

[17:21] <AlexDaniel> indeed

[17:23] *** jmerelo joined
[17:23] *** p6bannerbot sets mode: +v jmerelo

[17:26] <Geth> ¦ ecosystem: fb6826308e | (Kane Valentine)++ (committed by Zoffix Znet) | META.list

[17:26] <Geth> ¦ ecosystem: Add API::Discord to ecosystem (#406)

[17:26] <Geth> ¦ ecosystem: 

[17:26] <Geth> ¦ ecosystem: * Add API::Discord to ecosystem

[17:26] <Geth> ¦ ecosystem: 

[17:26] <Geth> ¦ ecosystem: https://github.com/kawaiiforums/p6-api-discord

[17:26] <Geth> ¦ ecosystem: 

[17:26] <Geth> ¦ ecosystem: * Update META.list with correct github org upstream

[17:26] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/fb6826308e

[17:27] *** zakharyas left
[17:38] *** lizmat left
[17:39] *** hankache joined
[17:39] *** lizmat joined
[17:39] *** p6bannerbot sets mode: +v lizmat

[17:40] *** p6bannerbot sets mode: +v hankache

[17:40] *** TreyHarris left
[17:41] *** TreyHarris joined
[17:41] *** p6bannerbot sets mode: +v TreyHarris

[17:44] <Geth> ¦ doc: f02c4fe326 | (JJ Merelo)++ | doc/Type/Attribute.pod6

[17:44] <Geth> ¦ doc: .pl6 → .p6, per #2419

[17:44] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f02c4fe326

[17:44] <Geth> ¦ doc: 656c8a9f72 | (JJ Merelo)++ | doc/Language/variables.pod6

[17:44] <Geth> ¦ doc: .pl → .p6, per #2419 and reflow

[17:44] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/656c8a9f72

[17:44] <Geth> ¦ doc: fca8607e3b | (JJ Merelo)++ | 2 files

[17:44] <synopsebot> Link: https://doc.perl6.org/type/Attribute

[17:44] <synopsebot> Link: https://doc.perl6.org/language/variables

[17:44] <Geth> ¦ doc: Eliminates reference to .pm, closes #2419

[17:44] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fca8607e3b

[17:44] *** lizmat left
[17:50] *** fake_space_whale left
[17:58] *** Kaiepi left
[17:59] *** Kaiepi joined
[17:59] *** p6bannerbot sets mode: +v Kaiepi

[18:04] *** cjkinni left
[18:04] *** cjkinni joined
[18:05] *** p6bannerbot sets mode: +v cjkinni

[18:17] *** noganex_ left
[18:20] *** hankache left
[18:21] *** noganex joined
[18:22] *** p6bannerbot sets mode: +v noganex

[18:26] *** zxcvz left
[18:30] <Geth> ¦ doc: 21a9ec4167 | Coke++ | doc/Language/glossary.pod6

[18:30] <Geth> ¦ doc: pass finicky inks test

[18:30] <Geth> ¦ doc: 

[18:30] <Geth> ¦ doc: Also, use self referential link where possible

[18:30] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/21a9ec4167

[18:30] <synopsebot> Link: https://doc.perl6.org/language/glossary

[18:39] <ugexe> are future perl6 implementations able to be 6.d and 6.e compliant but not 6.c?

[18:40] <moritz> we don't know what future things will be able to or not

[18:40] <yoleaux> 16:49Z <Zoffix> moritz: any idea how to fix https://github.com/moritz/perl6-all-modules/issues/2 ? That repo is very useful for coredev

[18:42] *** zakharyas joined
[18:42] <ugexe> i dont mean is it technically feasible -- i mean can something call itself perl6 if it only passes say 6.d spec tests but not stuff changed from 6.c

[18:43] *** p6bannerbot sets mode: +v zakharyas

[18:43] <moritz> I don't see why it shouldn't

[18:43] <ugexe> im trying to determine if `perl` meta data field will suffice as-is

[18:43] <El_Che> isn't that the whole point of versioning the lang?

[18:44] <ugexe> version the language, or version the spec. there is gray area here

[18:48] *** kensanata joined
[18:48] *** p6bannerbot sets mode: +v kensanata

[18:50] *** Guest13389 left
[18:56] <jmerelo> moritz: I just got the contract from Apress for "Perl 6 quick syntax reference". Thanks for introducing us!

[18:56] <El_Che> jmerelo: congrats!

[18:57] <moritz> jmerelo: that's great to hear. My pleasure!

[18:57] <El_Che> moritz++

[18:57] <jmerelo> El_Che: thanks. I still have to write it, though. 

[18:57] <El_Che> you will :)

[18:58] <moritz> you know how to do that, right? :-)

[18:58] <El_Che> a Perl syntax reference

[18:58] <jmerelo> moritz: I guess I should... 

[18:58] <El_Che> I hope you're payed by the page: )

[18:59] <jmerelo> El_Che: still haven't read the contract, to be sincere. I got it on Friday night, while I was out. I'll have to check it out thoroughly. 

[18:59] <moritz> the apress contracts do contain a minimal page count, and are staggered by page count

[19:00] <jmerelo> I'm happy anyway there's going to be another Perl 6 book coming soon :-)

[19:01] <jmerelo> Or I should rather say soonish

[19:01] <moritz> jmerelo: pro tip: the Apress template limits code examples to 63 characters per line. It's best to be aware of that while writing the code examples

[19:02] <jmerelo> moritz: Thanks! I already have a test set up for my old book, which can easily be configured for any number of characters :-)

[19:02] <moritz> :se colorcolumns=63

[19:02] <jmerelo> moritz: speak emacs! :-) Don't be EVIL! :-)

[19:03] <jmerelo> moritz: but yes, I guess that can easily be set up.

[19:03] *** Guest13389 joined
[19:04] *** p6bannerbot sets mode: +v Guest13389

[19:11] *** robertle left
[19:19] *** jmerelo left
[19:21] <ugexe> or maybe a better question: how should one obtain the minimum version of 6.* provided by an implementation?

[19:22] <ugexe> $*PERL.compiler.version or whatever gives the max version provided for instance

[19:23] <ugexe> ( i know technically its not the max version depending on where it is called, but it can be used that way )

[19:24] *** cognominal-p6 joined
[19:25] *** p6bannerbot sets mode: +v cognominal-p6

[19:34] <ugexe> re: https://design.perl6.org/S22.html#perl

[19:34] <AlexDaniel> Zoffix: ↑ questions about language versioning

[19:34] *** cognominal-p6 left
[19:35] *** cognominal-p6 joined
[19:35] *** p6bannerbot sets mode: +v cognominal-p6

[19:42] *** fake_space_whale joined
[19:43] *** p6bannerbot sets mode: +v fake_space_whale

[19:44] *** noganex left
[19:45] *** noganex joined
[19:46] *** p6bannerbot sets mode: +v noganex

[19:47] *** Zoffix joined
[19:47] *** p6bannerbot sets mode: +v Zoffix

[19:47] <Zoffix> I dunno, just some method on $*PERL?

[19:47] <Zoffix> $*PERL.version => default version; $*PERL.can-versions => list of Version objects for language versions the compiler can do

[19:49] *** ryn1x left
[19:51] <Zoffix> c: HEAD use MONKEY; augment class Perl { method can-versions { use nqp; nqp::getcomp('perl6').can_language_versions.map: {Version.new: $_} } }; $*PERL.can-versions.say

[19:51] <committable6> Zoffix, ¦HEAD(d28545d): «(v6.c v6.d v6.d.PREVIEW)␤»

[19:52] <Zoffix> c: HEAD use MONKEY; augment class Perl { method can-versions { use nqp; set nqp::getcomp('perl6').can_language_versions.map: {Version.new: $_} } }; dd $*PERL.can-versions

[19:52] <committable6> Zoffix, ¦HEAD(d28545d): «Set.new(v6.c,v6.d.PREVIEW,v6.d)␤»

[19:52] <Zoffix> m: $*PERL.version.say

[19:52] <camelia> rakudo-moar d28545d64: OUTPUT: «v6.d␤»

[19:52] <Zoffix> Oh yeah :)

[19:54] <ugexe> that should work, since `v6.d cmp v6.d.PREVIEW == More`

[19:54] *** SCHAPiE left
[19:58] *** noganex_ joined
[19:59] *** p6bannerbot sets mode: +v noganex_

[20:01] *** noganex left
[20:03] *** SCHAPiE joined
[20:03] *** p6bannerbot sets mode: +v SCHAPiE

[20:26] *** ryn1x joined
[20:27] *** p6bannerbot sets mode: +v ryn1x

[20:30] *** molaf joined
[20:31] *** p6bannerbot sets mode: +v molaf

[20:34] <moritz> Zoffix: a github bot complained about this commit, because it contains a twitter API key: https://github.com/moritz/perl6-all-modules/commit/8fe00b3659d1ccb38a58aa909c3fc783c2fa7b6f#diff-a80ddd7a0544aa0509a65605a7966daeR51

[20:35] <moritz> Zoffix: I hope that's just an example, right? :D

[20:36] <Zoffix> haha... I think so. They do look like something you get by banging on your keyboard :P

[20:37] <Zoffix> hehe, yeah, I just took real keys and modified a bunch of letters in them :)

[20:40] <Zoffix> weekly: bleed users can help test rakudo with 6.d language enabled by default: https://twitter.com/zoffix/status/1056274104855248896

[20:40] <notable6> Zoffix, Noted!

[20:49] *** ryn1x left
[20:56] *** lizmat joined
[20:56] *** p6bannerbot sets mode: +v lizmat

[21:00] <AlexDaniel> ugexe: I think I fixed it: https://github.com/rakudo/rakudo/commit/f81146ae9b5de621c1b99719aeaff06b872b6027

[21:00] <AlexDaniel> it does indeed fix `make install` locally

[21:00] <AlexDaniel> will have to wait for travis to crunch through the thing to really know

[21:02] <AlexDaniel> ugexe: also, fwiw, it's better to create a new ticket for these things, my backlogging is somewhat limited

[21:02] <AlexDaniel> why do we have these as “Allowed Failures” anyway?

[21:03] <Zoffix> IIRC cause full run times out (it takes more than 10m limit)

[21:03] <AlexDaniel> aahhhhhh… eh

[21:07] *** aindilis left
[21:09] *** aindilis joined
[21:10] *** p6bannerbot sets mode: +v aindilis

[21:18] *** zakharyas left
[21:21] <Geth> ¦ doc: ad8b2ac40a | (Michal Jurosz)++ (committed using GitHub Web editor) | doc/Language/faq.pod6

[21:21] <Geth> ¦ doc: Learning Perl 6 already published

[21:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ad8b2ac40a

[21:21] <synopsebot> Link: https://doc.perl6.org/language/faq

[21:46] *** AlexDaniel left
[21:46] *** AlexDaniel joined
[21:46] *** p6bannerbot sets mode: +v AlexDaniel

[21:59] *** cognominal-p6 left
[22:01] *** haukex joined
[22:01] *** p6bannerbot sets mode: +v haukex

[22:04] *** gnomax joined
[22:05] *** p6bannerbot sets mode: +v gnomax

[22:08] *** noganex joined
[22:09] *** p6bannerbot sets mode: +v noganex

[22:11] *** noganex_ left
[22:13] *** rindolf left
[22:16] *** roguelazer joined
[22:16] *** p6bannerbot sets mode: +v roguelazer

[22:19] *** kensanata left
[22:22] *** roguelazer left
[22:32] <buggable> New CPAN upload: Math-Factorial-Operator-0.1.0.tar.gz by RIBNOTTER https://cpan.metacpan.org/authors/id/R/RI/RIBNOTTER/Perl6/Math-Factorial-Operator-0.1.0.tar.gz

[22:36] *** haukex left
[22:37] *** pecastro left
[22:44] *** StoneWaves joined
[22:45] *** StoneWaves left
[22:46] *** sena_kun left
[23:03] *** ryn1x joined
[23:04] *** p6bannerbot sets mode: +v ryn1x

[23:25] *** kurahaupo joined
[23:25] *** p6bannerbot sets mode: +v kurahaupo

[23:36] <AlexDaniel> El_Che: I can't figure out how to use canary now

[23:36] <AlexDaniel> El_Che: this one doesn't have travis: https://github.com/perl6/rakudo-pkg-canary/commits/master

[23:36] <AlexDaniel> El_Che: and this one has… travis-pro? https://github.com/nxadm/rakudo-pkg-canary

[23:41] <AlexDaniel> Dunno, it looks different, and I think I don't have access

[23:46] *** pmurias left
