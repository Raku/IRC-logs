[00:04] <k_89> hi timotimo 

[00:04] <k_89> I made this: http://tabel.tech/

[00:05] <k_89> Technically I want m:n multiplexing fir node.js

[00:05] <k_89> for*

[00:06] <k_89> In my region's startup-ecosystem, I am kind of a tech-Arthas

[00:07] <k_89> https://www.youtube.com/watch?v=bmUxvX2z5N0

[00:08] <k_89> :/

[00:08] *** mcmillhj joined
[00:09] *** p6bannerbot sets mode: +v mcmillhj

[00:09] *** mcmillhj left
[00:18] <k_89> https://perl.plover.com/yak/design/

[00:25] <k_89> https://www.reddit.com/r/aoe2/comments/93tbwl/vietnamese_civ_bonus_idea_free_ballistics/

[00:25] *** aborazmeh joined
[00:25] *** aborazmeh left
[00:25] *** aborazmeh joined
[00:25] *** p6bannerbot sets mode: +v aborazmeh

[00:26] *** p6bannerbot sets mode: +v aborazmeh

[00:29] <k_89> 'https://www.reddit.com/r/node/comments/8vs4qk/is_there_an_easy_way_to_match_new_socket/e1qnfmk

[00:30] *** suds6 joined
[00:31] <k_89> http://www.catb.org/esr/faqs/hacker-howto.html

[00:33] *** suds6 left
[00:33] *** lichtkind left
[00:37] <k_89> http://www.blastwave-comic.com/

[00:38] *** thundergnat left
[00:38] <k_89> https://medium.com/@kapv89/code-will-always-be-written-207d3cdfe145

[00:43] <k_89> https://flowapp-in.s3-accelerate.amazonaws.com/UP41537317775375.png

[00:45] *** hamhu3 left
[00:47] *** hamhu3 joined
[00:48] <k_89> https://www.linkedin.com/in/abhititewari/

[00:48] *** p6bannerbot sets mode: +v hamhu3

[00:48] <k_89> https://www.linkedin.com/in/siddharth-rao-437b8867/

[00:49] <k_89> https://twitter.com/kapv89/status/1042002972652097537

[00:49] <k_89> https://softwareengineering.stackexchange.com/questions/71561/java-and-jvm-license

[00:49] <k_89> https://softwareengineering.stackexchange.com/questions/366343/blockchains-how-are-conflicts-resolved-between-2-or-more-servers-hosting-the-s

[00:50] *** molaf joined
[00:50] <k_89> https://twitter.com/ShawnMcCool/status/1029645906583465984

[00:50] <k_89> https://twitter.com/iamdevloper/status/1025023307165384705

[00:50] *** dct left
[00:50] *** p6bannerbot sets mode: +v molaf

[00:52] <k_89> https://news.ycombinator.com/item?id=12642799

[00:53] *** hamhu3 left
[00:53] *** Zoffix joined
[00:53] *** p6bannerbot sets mode: +v Zoffix

[00:53] *** hamhu3 joined
[00:53] <k_89> https://news.ycombinator.com/item?id=17521289

[00:53] *** ChanServ sets mode: +o Zoffix

[00:53] *** hamhu3 left
[00:54] <k_89> https://news.ycombinator.com/item?id=13730649

[00:54] <Zoffix> k_89: what's with the spam?

[00:54] <k_89> Technically I want m:n multiplexing fir node.js

[00:54] <k_89> for*

[00:54] <k_89> Can I take it?

[00:54] *** Zoffix sets mode: +b *!*@150.129.238.140

[00:54] *** k_89 was kicked by Zoffix (k_89))
[00:55] *** Zoffix left
[01:07] <Geth> ¦ DBIish/master: 8 commits pushed by (Jonathan Worthington)++, (Salvador Ortiz)++

[01:07] <Geth> ¦ DBIish/master: 11e890ad0d | Fix passing IO::Path to SQLite driver for database

[01:07] <Geth> ¦ DBIish/master: 6385e3e79e | Make statement handle storage threadsafe

[01:07] <Geth> ¦ DBIish/master: 75d58ee0be | Support busy timeout setting for SQLite driver

[01:07] <Geth> ¦ DBIish/master: 256e67dc3a | Make connection registry threadsafe

[01:07] <Geth> ¦ DBIish/master: 147e0580ee | Provide introspection of sqlite3 lib threadsafety

[01:07] <Geth> ¦ DBIish/master: 19c276052a | Document the SQLite driver changes

[01:07] <Geth> ¦ DBIish/master: 4cb26268f3 | Add a basic test file for multi-threaded SQLite

[01:07] <Geth> ¦ DBIish/master: 841e36078b | Merge pull request #130 from jnthn/sqlite-threaded

[01:07] <Geth> ¦ DBIish/master: review: https://github.com/perl6/DBIish/compare/21d01901741d...841e36078b04

[01:09] *** Kaypie left
[01:20] *** molaf left
[01:22] *** lizmat left
[01:26] <Geth> ¦ DBIish: 3499cde3ca | (Zoffix Znet)++ (committed using GitHub Web editor) | META6.json

[01:26] <Geth> ¦ DBIish: Bump version

[01:26] <Geth> ¦ DBIish: review: https://github.com/perl6/DBIish/commit/3499cde3ca

[01:32] *** molaf joined
[01:33] *** zakharyas joined
[01:33] *** p6bannerbot sets mode: +v molaf

[01:34] *** p6bannerbot sets mode: +v zakharyas

[01:57] *** hamhu3 joined
[01:57] *** hamhu3 left
[01:58] *** hamhu3 joined
[01:59] *** p6bannerbot sets mode: +v hamhu3

[02:03] *** itaipu left
[02:12] *** mahafyi left
[02:12] *** ZzZombo left
[02:18] *** [Sno] left
[02:20] *** sno joined
[02:20] *** p6bannerbot sets mode: +v sno

[02:25] *** sno left
[02:45] *** molaf left
[02:53] *** ZzZombo joined
[02:53] *** p6bannerbot sets mode: +v ZzZombo

[02:58] *** Sgeo_ left
[02:59] *** Sgeo_ joined
[03:00] *** p6bannerbot sets mode: +v Sgeo_

[03:03] *** sno joined
[03:04] *** p6bannerbot sets mode: +v sno

[03:29] *** MasterDuke left
[03:30] *** w_richard_w joined
[03:31] *** p6bannerbot sets mode: +v w_richard_w

[03:32] <AlexDaniel> squashable6: next

[03:32] <squashable6> AlexDaniel, Next SQUASHathon in 16 days and ≈6 hours (2018-10-06 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[04:01] *** aborazmeh left
[04:01] *** w_richard_w left
[04:07] *** aborazmeh joined
[04:07] *** aborazmeh left
[04:07] *** aborazmeh joined
[04:07] *** p6bannerbot sets mode: +v aborazmeh

[04:08] *** p6bannerbot sets mode: +v aborazmeh

[04:25] *** aborazmeh left
[04:36] *** protium left
[04:38] *** protium joined
[04:39] *** p6bannerbot sets mode: +v protium

[04:42] *** kerframil left
[04:50] *** Ven` joined
[04:51] *** p6bannerbot sets mode: +v Ven`

[04:55] *** Ven` left
[05:02] *** ufobat joined
[05:02] *** p6bannerbot sets mode: +v ufobat

[05:05] *** curan joined
[05:05] *** p6bannerbot sets mode: +v curan

[05:20] *** dijong14 joined
[05:23] *** dijong14 left
[05:55] *** psychoslave joined
[05:56] *** p6bannerbot sets mode: +v psychoslave

[06:20] *** kensanata joined
[06:20] *** p6bannerbot sets mode: +v kensanata

[06:21] *** kensanata left
[06:25] *** kensanata joined
[06:25] *** p6bannerbot sets mode: +v kensanata

[06:27] *** robertle joined
[06:28] *** p6bannerbot sets mode: +v robertle

[06:31] *** b0tanik24 joined
[06:33] *** domidumont joined
[06:34] *** p6bannerbot sets mode: +v domidumont

[06:35] *** psychoslave left
[06:36] *** b0tanik24 left
[06:40] *** ggoebel left
[06:41] *** robertle left
[06:44] <El_Che> `

[06:46] *** kensanata left
[06:53] *** ggoebel joined
[06:53] *** psychoslave joined
[06:54] *** p6bannerbot sets mode: +v ggoebel

[06:54] *** p6bannerbot sets mode: +v psychoslave

[07:35] *** titsuki joined
[07:36] *** p6bannerbot sets mode: +v titsuki

[07:37] *** titsuki_ left
[07:39] *** ZzZombo_ joined
[07:39] *** p6bannerbot sets mode: +v ZzZombo_

[07:41] *** ZzZombo left
[07:41] *** ZzZombo__ joined
[07:41] *** ZzZombo__ is now known as ZzZombo

[07:41] *** p6bannerbot sets mode: +v ZzZombo

[07:44] *** ZzZombo_ left
[07:45] <Altreus> I have to wonder at the value of porting core perl5 modules to perl6 and maintaining the API, when those modules include things like Text::CSV

[07:45] <Altreus> Text::CSV is ripe for modernisation, so porting the API to Perl6 doesn't seem valuable at all

[07:46] *** scimon joined
[07:47] *** p6bannerbot sets mode: +v scimon

[07:50] *** Ven` joined
[07:51] *** p6bannerbot sets mode: +v Ven`

[07:53] *** lizmat joined
[07:54] *** dogbert17 left
[07:54] *** p6bannerbot sets mode: +v lizmat

[08:00] *** awwaiid left
[08:07] *** dakkar joined
[08:07] *** p6bannerbot sets mode: +v dakkar

[08:19] *** itaipu joined
[08:20] *** p6bannerbot sets mode: +v itaipu

[08:21] <moritz> Text::CSV is not a p5 core module

[08:26] *** rindolf joined
[08:27] *** p6bannerbot sets mode: +v rindolf

[08:51] *** dogbert2 joined
[08:52] *** p6bannerbot sets mode: +v dogbert2

[08:53] *** Summertime left
[08:54] <Altreus> community core, not installation core

[08:54] <Altreus> I drew the knowledge from lizmat's first post in the series

[08:57] *** Summertime joined
[08:57] *** p6bannerbot sets mode: +v Summertime

[09:09] *** pmurias joined
[09:14] <buggable> New CPAN upload: Array-Agnostic-0.0.6.tar.gz by ELIZABETH http://modules.perl6.org/dist/Array::Agnostic:cpan:ELIZABETH

[09:19] *** TeamBlast joined
[09:20] *** p6bannerbot sets mode: +v TeamBlast

[09:52] *** C-Keen6 joined
[09:53] *** Summertime left
[09:54] *** Summertime joined
[09:54] *** p6bannerbot sets mode: +v Summertime

[09:54] *** Ven` left
[09:55] *** C-Keen6 left
[09:55] *** ZzZombo left
[09:56] *** Ven` joined
[09:57] *** p6bannerbot sets mode: +v Ven`

[10:05] *** Summertime left
[10:07] *** Summertime joined
[10:07] *** p6bannerbot sets mode: +v Summertime

[10:09] *** domidumont left
[10:38] *** plinnell joined
[10:43] *** plinnell left
[10:44] <buggable> New CPAN upload: Hash-Agnostic-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/Hash-Agnostic-0.0.1.tar.gz

[10:45] *** araujo joined
[10:45] *** araujo left
[10:45] *** araujo joined
[10:45] *** p6bannerbot sets mode: +v araujo

[10:45] *** zakharyas left
[10:45] *** p6bannerbot sets mode: +v araujo

[10:49] *** hamhu3 left
[10:49] *** hamhu3 joined
[10:50] *** p6bannerbot sets mode: +v hamhu3

[11:03] *** Ven` left
[11:13] *** Guest12888 joined
[11:14] *** Guest12888 was kicked by timotimo (Guest12888))
[11:20] <Altreus> Has anyone written a webapp with LDAP auth? Is there a layer over Cro that provides more of a web framework, for example?

[11:20] *** ChoHag left
[11:26] <Geth> ¦ doc: 995dd52dc6 | (JJ Merelo)++ | doc/Language/syntax.pod6

[11:26] <Geth> ¦ doc: Explains #2313 a bit more. Not enough, though

[11:26] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/995dd52dc6

[11:26] <synopsebot> Link: https://doc.perl6.org/language/syntax

[11:27] <moritz> Altreus: at $work, the applications that use LDAP auth do the authentication in apache or nginx, and simply trust the "User: " header that the webserver sends

[11:27] *** ZzZombo joined
[11:27] *** p6bannerbot sets mode: +v ZzZombo

[11:27] <Altreus> that seems elegant

[11:28] <Altreus> is it robust?

[11:30] <moritz> You just have to take take to not expose the application itself (without web server frontend) to the outside

[11:31] <moritz> which works well with FastCGI (no socket open that could leak), though with firewalls and taking care which interface to listen on, that works as well

[11:31] <moritz> but otherwise, the apache modules for ldap authentication are rock solid, and work with ldap and AD

[11:32] <moritz> the disadvantage is that you get the login prompt from the browser, not a fancy form with "forgot password" field

[11:32] <moritz> which works reasonably well for internal services

[11:32] <moritz> but probably not something you'd put on an Internet-facing B2C portal

[11:37] *** Zoffix joined
[11:37] *** p6bannerbot sets mode: +v Zoffix

[11:38] <Zoffix> moritz: don't know if you saw a ping on github, but perl6book.com needs to pull new commit from repo

[11:38] *** Ven` joined
[11:39] *** p6bannerbot sets mode: +v Ven`

[11:41] *** Kaiepi joined
[11:42] *** p6bannerbot sets mode: +v Kaiepi

[11:42] <moritz> Zoffix: I hadn't, thanks

[11:42] <moritz> update

[11:42] *** psychoslave left
[11:49] <Zoffix> moritz++

[11:49] *** Zoffix left
[11:50] *** hamhu3_ joined
[11:51] *** p6bannerbot sets mode: +v hamhu3_

[11:53] *** hamhu3 left
[11:57] <masak> I have a philosophical-ish question: does the idea of a "numerical tower" mesh with the idea of Liskov Substitutability?

[11:58] <masak> concretely, is the fact that `Int ~~ Rat` (in languages with a numerical tower, not in Perl 6) mesh with the notion that Int should "exhibit all the behaviors" Rat exhibits, and uphold all its invariants, etc?

[11:58] *** hph^ joined
[11:59] *** p6bannerbot sets mode: +v hph^

[12:01] <moritz> well, you can model it that way; it's a bit weird, but I think you can uphold the invariants

[12:01] <moritz> depends on how you design the interface, I guess

[12:01] *** psychoslave joined
[12:02] <masak> yeah; guess so

[12:02] <masak> for the record, I still respect and understand Perl 6's decision not to make Int a subtype of Rat

[12:02] *** p6bannerbot sets mode: +v psychoslave

[12:03] <masak> I think it'll forever be a surprise to people starting with the language -- but I also see what went into that design decision

[12:03] <masak> design is hard :)

[12:03] <moritz> but if you have a constructor Rat.new($nu, $de)

[12:03] <moritz> then Int.new would need to restrict that to Int.new($nu, 1)

[12:03] <moritz> which isn't Liskov-compatible, in a strict understanding

[12:03] <masak> *nod*

[12:03] <masak> so... can't have that constructor ;)

[12:04] <moritz> also, if you use inheritance, you typically also inherit representation, which is wasteful

[12:04] <masak> I mean, the constructor *leaks* Rat representation

[12:04] *** kensanata joined
[12:04] *** p6bannerbot sets mode: +v kensanata

[12:04] <moritz> Int would be a subset, in mathemtical terms

[12:05] <masak> yes, but not in the Liskov sense, is my point

[12:05] <moritz> but most programming languages don't expose subset typing (that might even add methods) in the same sense that mathemticians use that

[12:05] <masak> it's funny, I've been reading up on Smalltalk lately, and they subtype in cases where the new type is *not even a subset* in the mathematical sense

[12:05] <masak> the rationale seemingly being "what? we needed those methods"

[12:06] <masak> very, um, pragmatic

[12:10] <moritz> when I first saw ruby's 5.times: block here

[12:10] <masak> I know just what you're going to say :)

[12:10] <moritz> I also thought: is it really the Integer's job to know about control flow?

[12:10] <masak> yup, that

[12:10] <moritz> people have interesting ideas about responsibility vs. API aesthetics

[12:11] <masak> on the other hand, I feel that way about Any.say

[12:11] <masak> it might be that it comes down to esthetics, convenience, and such things

[12:11] <masak> in retrospect, I think it'd've been cleaner with 42.&say()

[12:12] <masak> m: sub times($num, &block) { &block() for ^$num }; 5.&times: { say "OH HAI" }

[12:12] <camelia> rakudo-moar 19edeafd1: OUTPUT: «OH HAI␤OH HAI␤OH HAI␤OH HAI␤OH HAI␤»

[12:12] <masak> "outside-in methods" :)

[12:13] *** harrison joined
[12:14] <masak> people who feel like a method is missing on a built-in should be all over the `$obj.&fn()` construction, IMHO

[12:14] *** p6bannerbot sets mode: +v harrison

[12:15] <moritz> +1

[12:16] <moritz> I, for one, could also well live with say() being a function only (except IO handles, of course)

[12:16] <masak> of course

[12:16] <masak> the IO handles say is *clearly* a different method, since it takes the value(s) to print as parameters, not as the invocant

[12:24] *** kurahaupo left
[12:25] *** pmurias left
[12:26] <kensanata> What's the best way to write files in a concurrent context: implement my own file locking by using mkdir? Or is there some Perl 6 feature that helps me do it?

[12:28] <masak> react/whenever, or other things with actor semantics?

[12:30] <kensanata> masak: Yeah, that looks good for waiting for the lock to be released. But there's $path.IO.lock returning a Bool, for example?

[12:30] <masak> um, "pass" :)

[12:30] <masak> (as in, I don't know.)

[12:30] <masak> sounds like something lizmat++ might know, though

[12:30] <kensanata> 👍 

[12:35] *** lichtkind joined
[12:35] *** p6bannerbot sets mode: +v lichtkind

[12:45] <jnthn> $path.IO's lock/unlock are using the file locking provided by the operating system

[12:45] *** pizzaops13 joined
[12:46] *** pizzaops13 left
[12:51] <kensanata> jnthn: Where can I read up on this? I'm trying p6doc IO, https://docs.perl6.org/type/IO, https://docs.perl6.org/type/IO::Path, and I don't see "lock" mentiond anywhere.

[12:52] *** Summertime left
[12:52] <kensanata> "No such method 'lock' for invocant of type 'IO::Path'." But then again I'm using 2018.06 so perhaps that explains it?

[12:53] *** hamhu3_ left
[12:54] *** Zoffix joined
[12:54] *** p6bannerbot sets mode: +v Zoffix

[12:54] *** hamhu3_ joined
[12:54] *** Summertime joined
[12:54] *** p6bannerbot sets mode: +v Summertime

[12:54] <Zoffix> kensanata: those are IO::Handle's methods, not IO::Path's. https://docs.perl6.org/type/IO::Handle.html#method_lock

[12:55] *** psychoslave left
[12:55] *** p6bannerbot sets mode: +v hamhu3_

[12:56] *** psychoslave joined
[12:56] *** p6bannerbot sets mode: +v psychoslave

[12:57] <Geth> ¦ doc: 9a84275831 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/IO/Handle.pod6

[12:57] <Geth> ¦ doc: Explain why we're not explicitly unlocking a handle

[12:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9a84275831

[12:57] <synopsebot> Link: https://doc.perl6.org/type/IO::Handle

[12:58] *** patap0n6 joined
[12:58] *** patap0n6 left
[12:59] *** Summertime left
[12:59] <kensanata> Zoffix: Thanks!

[13:01] *** Summertime joined
[13:01] *** p6bannerbot sets mode: +v Summertime

[13:03] *** Zoffix left
[13:36] <lichtkind> what is the rational to allow wanges like (5..3) ?

[13:38] *** Summertime left
[13:40] <moritz> useful for loops

[13:41] <[Coke]> m: my $a = 5..3; for @$a { .say }

[13:41] <camelia> rakudo-moar 19edeafd1: ( no output )

[13:41] <[Coke]> m: my $a = 3..5; for @$a { .say }

[13:41] <camelia> rakudo-moar 19edeafd1: OUTPUT: «3␤4␤5␤»

[13:41] <[Coke]> is it though? :)

[13:42] <moritz> yes

[13:42] *** Summertime joined
[13:42] *** p6bannerbot sets mode: +v Summertime

[13:43] <harrison> m: my $a = (5...3); @$a.say;

[13:43] <camelia> rakudo-moar 19edeafd1: OUTPUT: «(5 4 3)␤»

[13:43] <moritz> if you do something like  for $lower..$upper { do stuff }, where $lower and $upper are calculated

[13:44] <moritz> btw even python has this behavior

[13:44] <moritz> list(range(5, 3))

[13:44] <moritz> => []

[13:50] <[Coke]> moritz: that doesn't work though:

[13:50] <[Coke]> m: my $a = 5; my $b = 3; for $a..$b  { .say }

[13:50] <camelia> rakudo-moar 19edeafd1: ( no output )

[13:51] <[Coke]> (your example has lower to upper, which would work, but upper to lower doesn't in a for loop. harrison's example does work, however.)

[13:52] <harrison> quick question... why does brackets make it work?

[13:52] <harrison> m:  my $a = 5; my $b = 3; for ($a...$b)  { .say }

[13:52] <camelia> rakudo-moar 19edeafd1: OUTPUT: «5␤4␤3␤»

[13:53] <SmokeMachine> m:  my $a = 5; my $b = 3; for $a...$b { .say }

[13:53] <camelia> rakudo-moar 19edeafd1: OUTPUT: «5␤4␤3␤»

[13:53] <SmokeMachine> harrison: thats not the brackets that make it work...

[13:54] <SmokeMachine> theres a difference between `..` and `...`

[13:54] <harrison> SmokeMachine: I see. Is it there in the docs?

[13:54] <SmokeMachine> m: say (1 .. 5).^name, (1 ... 5).^name

[13:54] <camelia> rakudo-moar 19edeafd1: OUTPUT: «RangeSeq␤»

[13:54] <harrison> SmokeMachine: Interesting...

[13:55] <SmokeMachine> m: say (1, &[+] ... *)[^10]

[13:55] <camelia> rakudo-moar 19edeafd1: OUTPUT: «(1 1 2 3 5 8 13 21 34 55)␤»

[13:55] <geekosaur> pretty sure this is in the traps doc

[13:56] <SmokeMachine> harrison: https://docs.perl6.org/language/operators#index-entry-..._operators

[13:58] <SmokeMachine> harrison: https://docs.perl6.org/language/operators#infix_..

[13:58] <harrison> SmokeMachine: Thanks.

[14:04] *** ChoHag joined
[14:05] *** p6bannerbot sets mode: +v ChoHag

[14:06] *** curan left
[14:23] <kensanata> I must be misunderstanding something about locks... I thought that given two filehandles for the same path $fh1.lock; $fh2.lock; would result in a deadlock but it doesn't, for my tests. This is for Linux and ext4. Does it not work for the same process?

[14:27] *** void1 joined
[14:27] *** void1 left
[14:27] *** void1 joined
[14:27] *** p6bannerbot sets mode: +v void1

[14:27] <perlbot> kensanata pasted a new file at https://f.perl.bot/p/wktmdu - 

[14:27] *** p6bannerbot sets mode: +v void1

[14:34] <buggable> New CPAN upload: epoll-0.2.tar.gz by CTILMES http://modules.perl6.org/dist/epoll:cpan:CTILMES

[14:38] *** regreg joined
[14:38] *** p6bannerbot sets mode: +v regreg

[14:40] <kensanata> Oh well. I rewrote it using mkdir and rmdir... https://alexschroeder.ch/cgit/oddmuse6/tree/lib/Storage/File/Lock.pm6#n28

[14:44] *** mahafyi joined
[14:44] <buggable> New CPAN upload: DB-Pg-0.5.tar.gz by CTILMES http://modules.perl6.org/dist/DB::Pg:cpan:CTILMES

[14:45] *** p6bannerbot sets mode: +v mahafyi

[14:47] *** harrison left
[14:54] *** scimon left
[14:55] *** Actualeyes joined
[14:56] *** p6bannerbot sets mode: +v Actualeyes

[14:57] *** Zoffix joined
[14:57] *** p6bannerbot sets mode: +v Zoffix

[14:58] <Zoffix> kensanata: you've used `non-blocking` argument set to true. Doesn't that work contrary to your goal of wanting to block?

[14:59] <kensanata> Zoffix: In this case, I actually don't want a deadlock: if we didn't get the lock in 3s, for example, I want to ignore it and continue, e.g. show an error to the user. That's why I just want to know: did I get a lock? If not, wait for another second.

[15:00] <perlbot> kensanata pasted a new file at https://f.perl.bot/p/6mswko - 

[15:01] <kensanata> Zoffix: Here is a very short example. That wasn't the output I expected. In this case I would have thought that the second .lock waits forever.

[15:01] *** sauvin left
[15:01] <Zoffix> kensanata: in that last paste you're locking the same handle tho

[15:02] <Zoffix> or is it meant to block there too?

[15:03] <Zoffix> don't seem to lock anything for me :S

[15:03] <perlbot> kensanata pasted a new file at https://f.perl.bot/p/ao8yuk - 

[15:04] <kensanata> Zoffix: Yeah. Last paste shows two different file handles for the same name. Still no deadlock.

[15:05] * Zoffix ponders

[15:14] <Zoffix> I guess it does indeed only work between processes :/

[15:14] *** melezhik joined
[15:14] *** p6bannerbot sets mode: +v melezhik

[15:15] <Zoffix> We use `fcntl` to set the locks.

[15:15] <melezhik> Hi perl6 devs. I found an issue with shell function

[15:15] <yoleaux> 27 Jun 2018 13:58Z <AlexDaniel> melezhik: http://colabti.org/irclogger/irclogger_log/perl6?date=2018-06-27#l448

[15:15] <Zoffix> melezhik: what is it?

[15:15] <melezhik> 5 secs

[15:16] <melezhik> perl6 -e 'for (1) -> $j { shell "sh -c \"perl -e die\""; }'

[15:16] <melezhik> Died at -e line 1.

[15:16] <melezhik> echo $?

[15:16] <melezhik> 0

[15:16] <melezhik> seems, shell does not raise exception in this case 

[15:16] <melezhik> when it is called in { }

[15:18] <Zoffix> looks like something with the `wanted` helper perhaps.

[15:18] <Zoffix> oh wait

[15:18] <Zoffix> $ perl6 -e 'for (1) -> $j { shell "sh -c \"perl -e die\"" }; dd "still alive"'

[15:18] <Zoffix> Died at -e line 1.

[15:18] <Zoffix> "still alive"

[15:19] *** pmurias joined
[15:19] <Zoffix> I'll file

[15:19] <melezhik> yeah, compare with 

[15:19] <melezhik> perl6 -e 'shell "sh -c \"perl -e die\"";'

[15:19] <melezhik> The spawned command 'sh -c "perl -e die"' exited unsuccessfully (exit code: 255)   in block <unit> at -e line 1

[15:19] *** p6bannerbot sets mode: +v pmurias

[15:20] <melezhik> yeah, I have encountered the issue in my Sparrowdo code when has a plenty of shell calls in loop

[15:20] <melezhik> it took me hours to localize the bug (((: hehe

[15:22] <melezhik> btw workaround - just to add say "something" right after shell invocation in loop

[15:22] <melezhik> perl6 -e 'for (1) -> $j { shell "sh -c \"perl -e die\""; say "OK" }'

[15:22] <melezhik> Died at -e line 1. The spawned command 'sh -c "perl -e die"' exited unsuccessfully (exit code: 255)   in block <unit> at -e line 1

[15:23] <Zoffix> R#2292

[15:23] <synopsebot> R#2292 [open]: https://github.com/rakudo/rakudo/issues/2292 `for` loop special cases Failure sinkage but not Proc

[15:23] <melezhik> yeah, worth it to mentioned the workaround as a hint

[15:23] <Zoffix> Also R#1571

[15:23] <synopsebot> R#1571 [open]: https://github.com/rakudo/rakudo/issues/1571 Flaws in implied sinkage / `&unwanted` helper

[15:24] <melezhik> https://github.com/rakudo/rakudo/issues/2292#issuecomment-422845773

[15:27] <Zoffix> kensanata: filed R#2293 

[15:27] <synopsebot> R#2293 [open]: https://github.com/rakudo/rakudo/issues/2293 [IO] IO::Handle.lock/.unlock useful only between processes

[15:28] <tobs> m: callframe(2).code andthen ???

[15:28] <camelia> rakudo-moar 19edeafd1: OUTPUT: «Died with X::Method::NotFound␤  in block <unit> at <tmp> line 1␤␤»

[15:29] *** melezhik left
[15:30] <tobs> I suppose andthen tries to call something on .code but it is too low-level to support it? Is this a DIHWIDT?

[15:31] <timotimo> m: callframe(2).code andthen .perl.say

[15:31] <camelia> rakudo-moar 19edeafd1: OUTPUT: «Died with X::Method::NotFound␤  in block <unit> at <tmp> line 1␤␤»

[15:31] <timotimo> m: callframe(2).code andthen *.perl.say

[15:31] <camelia> rakudo-moar 19edeafd1: OUTPUT: «Died with X::Method::NotFound␤  in block <unit> at <tmp> line 1␤␤»

[15:31] <timotimo> hum.

[15:31] <tobs> m: say callframe(2).code

[15:31] <camelia> rakudo-moar 19edeafd1: OUTPUT: «eval␤»

[15:31] <tobs> m: say callframe(2).code.WHAT

[15:31] <camelia> rakudo-moar 19edeafd1: OUTPUT: «Cannot look up attributes in a NQPRoutine type object␤  in any name at gen/moar/stage2/NQPCORE.setting line 387␤  in any gist at gen/moar/stage2/NQPCORE.setting line 393␤  in block <unit> at <tmp> line 1␤␤»

[15:34] <Zoffix> andthen calls .defined

[15:34] <Zoffix> m: use nqp; nqp::defined(callframe(2).code) ?? callframe(2).code.perl.say !! "meows"

[15:34] <camelia> rakudo-moar 19edeafd1: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant string "meows" in sink context (line 1)␤Died with X::Method::NotFound␤  in block <unit> at <tmp> line 1␤␤»

[15:34] <Zoffix> m: use nqp; nqp::defined(callframe(2).code) ?? callframe(2).code.perl.say !! "meows".say

[15:34] <camelia> rakudo-moar 19edeafd1: OUTPUT: «Died with X::Method::NotFound␤  in block <unit> at <tmp> line 1␤␤»

[15:34] <Zoffix> :(

[15:34] <Zoffix> m: use nqp; nqp::defined(callframe(2).code)

[15:34] <camelia> rakudo-moar 19edeafd1: ( no output )

[15:35] <Zoffix> ah, right

[15:35] *** psychoslave left
[15:36] <Zoffix> m: sub foo { callframe(3).?code.?perl andthen .say }; foo

[15:36] <camelia> rakudo-moar 19edeafd1: ( no output )

[15:37] <Zoffix> m: sub foo { callframe(1).?code.?perl andthen .say }; foo

[15:37] <camelia> rakudo-moar 19edeafd1: OUTPUT: «->  { #`(Block|59988416) ... }␤»

[15:37] *** MilkmanDan left
[15:39] *** Zoffix left
[15:45] *** MilkmanDan joined
[15:45] *** p6bannerbot sets mode: +v MilkmanDan

[15:45] <AlexDaniel> Zoffix: that's an old issue actually

[15:46] <AlexDaniel> let's see if I can find a ticket

[15:46] *** pmurias left
[15:46] <AlexDaniel> ok maybe not

[15:46] *** pmurias joined
[15:47] *** p6bannerbot sets mode: +v pmurias

[15:57] *** lizmat left
[15:57] *** domidumont joined
[15:58] *** p6bannerbot sets mode: +v domidumont

[16:00] <kensanata> AlexDaniel: I still have this weird problem. Just now I made a change to my code and ran the test, got "This type (NQPMu) does not support associative operations", did "rm -rf lib/.precomp/" and ran my tests, no problem. Therefore, I sadly can't provide a test case. On a clean checkout, I'd assume that it'll always work.

[16:01] <AlexDaniel> kensanata: sure but that just means that I need to run it twice

[16:01] <AlexDaniel> or how many times

[16:02] <kensanata> Sadly it is not that simple. I've been editing code for hours and had this happen maybe three times today?

[16:04] <AlexDaniel> kensanata: then it's easy. We make a few clones of you, I guess ≈12 should be enough to bisect, and then on each step we let them work with the same seed

[16:06] <AlexDaniel> if it's also reproducible on 2015.12 then I guess we just let most of them go

[16:06] *** pmurias left
[16:08] <kensanata> AlexDaniel: Let's see. How about this: git clone https://alexschroeder.ch/cgit/oddmuse6; cd oddmuse6; make test; echo >> lib/Save.pm6; make test -- does that trigger the bug for you? I've been using git reset --hard; rm -rf lib/.precomp/; make test; echo >> lib/Save.pm6; make test for a half a dozen times now and it seems to reproduce it.

[16:09] <kensanata> So perhaps it only appears after touching certain files?

[16:09] <AlexDaniel> kensanata: META6.json file is not entirely right, I got Could not find Cro::HTTP::Test

[16:10] <AlexDaniel> even after zef install --deps-only .

[16:11] <kensanata> Yeah, probably. You need zef install Text::Markdown; zef install Template::Mustache; zef install --/test cro; zef install --depsonly . (at least that's what my notes say)

[16:13] <kensanata> I added Text::Markdown and Template::Mustache to the dependencies.

[16:13] <kensanata> It already says "Cro::HTTP" so I'm not sure what else to put there...

[16:14] <jnthn> Probably Cro::HTTP::Test, though that probably belongs only in test-depends

[16:14] *** Ven` left
[16:14] <buggable> New CPAN upload: Sparrowdo-Cordova-OSx-Build-0.0.5.tar.gz by MELEZHIK http://modules.perl6.org/dist/Sparrowdo::Cordova::OSx::Build:cpan:MELEZHIK

[16:14] <kensanata> jnthn: Right.

[16:15] *** AlexDaniel left
[16:17] *** Ven` joined
[16:17] *** cyberlard10 joined
[16:17] *** cyberlard10 left
[16:18] *** p6bannerbot sets mode: +v Ven`

[16:19] *** AlexDaniel joined
[16:19] *** p6bannerbot sets mode: +v AlexDaniel

[16:20] *** dakkar left
[16:20] <AlexDaniel> ouch… I just ran out of memory

[16:23] *** molaf joined
[16:23] *** p6bannerbot sets mode: +v molaf

[16:24] <AlexDaniel> kensanata: triggered.

[16:24] <kensanata> Wow!

[16:28] <AlexDaniel> yeah seems to be consistent also

[16:34] <kensanata> AlexDaniel: Zoffix made a small comment yesterday, http://colabti.org/irclogger/irclogger_log/perl6?date=2018-09-18#l335

[16:37] *** molaf left
[16:37] <AlexDaniel> Eh… cmon people, if I say that your module tests are flapping, then they are flapping even if you can't reproduce it

[16:39] *** lichtkind left
[16:41] <kensanata> I fixed up my META6.json and added a Test::META thing to my tests and it says "license ‘AGPL-3.0-or-later’ is not one of the standardized SPDX license identifiers" but if I check https://spdx.org/licenses/ I can see it. Any ideas?

[16:41] *** pmurias joined
[16:41] <AlexDaniel> kensanata: https://github.com/jonathanstowe/Test-META/issues/31

[16:42] *** p6bannerbot sets mode: +v pmurias

[16:43] <kensanata> AlexDaniel: Heh.

[16:51] *** Ven` left
[16:53] *** sauvin joined
[16:53] *** p6bannerbot sets mode: +v sauvin

[17:01] *** avar left
[17:03] *** avar joined
[17:03] *** avar left
[17:03] *** avar joined
[17:03] *** p6bannerbot sets mode: +v avar

[17:03] *** p6bannerbot sets mode: +v avar

[17:06] <AlexDaniel> what's prove6?

[17:07] <AlexDaniel> well nvm

[17:15] <AlexDaniel> kensanata: ok, here

[17:15] <AlexDaniel> e: https://gist.github.com/AlexDaniel/92f8209e40a86855825328f58b8eab80

[17:15] <evalable6> AlexDaniel, rakudo-moar d275ea09b: OUTPUT: «(exit code 1) Cloning into 'oddmuse6'...␤t/changes.t .. ok␤t/edit.t ..... ok␤t/keep.t ....…»

[17:15] <evalable6> AlexDaniel, Full output: https://gist.github.com/5324c226ded103560473c1195fa26501

[17:16] *** lichtkind joined
[17:16] <AlexDaniel> kensanata: ↑ there's a missing dependency but we can ignore that, the point is that “This type (NQPMu) does not support associative operations” is in the output

[17:16] <AlexDaniel> so

[17:16] <AlexDaniel> committable6: vars

[17:16] <committable6> AlexDaniel, timeout=10

[17:16] <AlexDaniel> committable6: timeout=120

[17:16] <committable6> AlexDaniel, timeout is now set to “120” (default value is “10”)

[17:16] <AlexDaniel> committable6: 2015.12 https://gist.github.com/AlexDaniel/92f8209e40a86855825328f58b8eab80

[17:16] <committable6> AlexDaniel, https://gist.github.com/050cacf8cbf9649fb2c671f04bad6a0b

[17:17] *** p6bannerbot sets mode: +v lichtkind

[17:17] <AlexDaniel> uhh

[17:17] <AlexDaniel> committable6: 2017.01 https://gist.github.com/AlexDaniel/92f8209e40a86855825328f58b8eab80

[17:17] <lichtkind> m: 1 (cont) 1..3

[17:17] <camelia> rakudo-moar d275ea09b: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "(cont)" in expression "1 (cont) 1.." in sink context (line 1)␤»

[17:17] <lichtkind> m: say 1 (cont) 1..3

[17:17] <camelia> rakudo-moar d275ea09b: OUTPUT: «False␤»

[17:17] <lichtkind> m: say 1..3 (cont) 1

[17:17] <camelia> rakudo-moar d275ea09b: OUTPUT: «True␤»

[17:17] <lichtkind> m: say 1..3 (cont) 1..2

[17:17] <camelia> rakudo-moar d275ea09b: OUTPUT: «False␤»

[17:18] <lichtkind> shouldnt that be tru too?

[17:18] <lichtkind> m: say 1..3 (cont) 2

[17:18] <camelia> rakudo-moar d275ea09b: OUTPUT: «True␤»

[17:18] <AlexDaniel> lichtkind: what's cont?

[17:18] <lichtkind> contains as in contains in set

[17:18] <committable6> AlexDaniel, https://gist.github.com/51ee5b5a6b8c988dc06ff02c612b349b

[17:19] <lichtkind> AlexDaniel the mittle expression was true becasue 1..3 contains 1

[17:19] <ilmari> contais as en element

[17:19] <ilmari> 1..2 is not an element

[17:20] <AlexDaniel> m: say 1..2 (<=) 1..3

[17:20] <camelia> rakudo-moar d275ea09b: OUTPUT: «True␤»

[17:20] <AlexDaniel> “Subset of or equal to operator” – that sounds like what you want

[17:20] <ilmari> ((1..2), (1..3)) (cont) (1..2)

[17:20] <ilmari> m: ((1..2), (1..3)) (cont) (1..2)

[17:20] <camelia> rakudo-moar d275ea09b: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "(cont)" in expression "((1..2), (1..3)) (cont) (1..2)" in sink context (line 1)␤»

[17:20] <ilmari> m: say ((1..2), (1..3)) (cont) (1..2)

[17:20] <camelia> rakudo-moar d275ea09b: OUTPUT: «True␤»

[17:29] <AlexDaniel> kensanata: oh wait, you don't need to run it twice to reproduce?

[17:30] <AlexDaniel> kensanata: looking at https://gist.github.com/Whateverable/51ee5b5a6b8c988dc06ff02c612b349b

[17:33] <kensanata> AlexDaniel: I don't quite understand what you're doing, there. On my system, I need to remove .precomp/ and I'll get a working test; then make that change, and the test will fail. I therefore assumed that if you don't remove .precomp/ you might or you might not get a failing test next. So in my scenario, two tests are always required.

[17:34] <kensanata> AlexDaniel: Basically I'm claiming that the .precomp content is not correctly updated after the whitespace change.

[17:34] <AlexDaniel> kensanata: that's ok, I don't know what I'm doing too

[17:34] <AlexDaniel> bisectable6: timeout=150

[17:34] <kensanata> Haha

[17:34] <bisectable6> AlexDaniel, On both starting points (old=2015.12 new=d275ea0) the exit code is 1 and the output is identical as well

[17:34] <bisectable6> AlexDaniel, Output on both points: «04===SORRY!04=== Error while compiling /tmp/KdVX8EvtmO␤Undeclared routine:␤    timeout used at line 1␤␤»

[17:35] *** bisectable6 left
[17:35] *** bisectable6 joined
[17:36] *** p6bannerbot sets mode: +v bisectable6

[17:45] *** bisectable6 left
[17:45] *** bisectable6 joined
[17:45] *** ChanServ sets mode: +v bisectable6

[17:45] *** Summertime left
[17:46] <AlexDaniel> kensanata: but basically, it seems like this issue existed for quite a while

[17:46] *** p6bannerbot sets mode: +v bisectable6

[17:48] <AlexDaniel> kensanata: also, I think I bisected it

[17:48] <AlexDaniel> There are 5 candidates for the first “new” revision. See the log for more details

[17:49] <AlexDaniel> https://gist.github.com/Whateverable/5ae610dc32f3a4a8ddc0ad443adc39b8

[17:49] <AlexDaniel> for example: https://github.com/rakudo/rakudo/commit/3122ce7ca22e8299b3c6a903f6030033e5494b11

[17:49] <AlexDaniel> looks related

[17:49] <AlexDaniel> kensanata: anyway, please file a ticket with what you have

[17:49] <AlexDaniel> huggable: rakudobug

[17:49] <huggable> AlexDaniel, Report bugs on https://github.com/rakudo/rakudo/issues/new    If you don't have access to GitHub, you can email your report to [email@hidden.address] . See also: https://github.com/rakudo/rakudo/wiki/rt-introduction

[17:50] *** lizmat joined
[17:51] *** p6bannerbot sets mode: +v lizmat

[18:16] *** avar left
[18:22] *** avar joined
[18:22] *** avar left
[18:22] *** avar joined
[18:22] *** p6bannerbot sets mode: +v avar

[18:22] *** p6bannerbot sets mode: +v avar

[18:23] *** lichtkind left
[18:25] *** pecastro joined
[18:26] *** p6bannerbot sets mode: +v pecastro

[18:26] *** Nightwolf joined
[18:26] *** Nightwolf left
[18:27] <masak> actually, it's not clear to me whether Scheme (which has a numerical tower) thinks in terms of subtypes when it asserts that "an Int is a kind of Rat"

[18:28] <diakopter> o_O

[18:28] <masak> because it exposes the belonging-to-a-type as predicates; integer?, rational?, etc

[18:29] <masak> and it feels like it's in the eye of the beholder to interpret the predicates as actual subtypes

[18:29] <masak> they're just predicates that induce a subtyle relation :P

[18:30] <masak> subtype*

[18:30] * masak .oO( masak, thou art not very subtyle )

[18:32] *** molaf joined
[18:33] *** p6bannerbot sets mode: +v molaf

[18:33] <moritz> no, you're supertyle!

[18:35] <masak> as long as that doesn't mean I have to be part of the Avengers...

[18:52] <rindolf> ahoy, me maties!

[18:55] *** epony left
[19:00] *** Summertime joined
[19:00] *** p6bannerbot sets mode: +v Summertime

[19:04] <buggable> New CPAN upload: Sparrowdo-Cordova-OSx-Fortify-0.0.1.tar.gz by MELEZHIK https://cpan.metacpan.org/authors/id/M/ME/MELEZHIK/Perl6/Sparrowdo-Cordova-OSx-Fortify-0.0.1.tar.gz

[19:07] *** domidumont left
[19:08] *** cjkinni joined
[19:09] *** xinming_ joined
[19:09] *** p6bannerbot sets mode: +v cjkinni

[19:09] *** p6bannerbot sets mode: +v xinming_

[19:12] *** xinming left
[19:16] *** epony joined
[19:16] *** p6bannerbot sets mode: +v epony

[19:51] *** leont joined
[19:51] *** p6bannerbot sets mode: +v leont

[19:55] *** sotona joined
[19:56] *** p6bannerbot sets mode: +v sotona

[20:01] *** Summertime left
[20:05] *** Summertime joined
[20:05] *** p6bannerbot sets mode: +v Summertime

[20:21] *** itaipu left
[20:27] *** itaipu joined
[20:28] *** p6bannerbot sets mode: +v itaipu

[20:30] *** k141215 joined
[20:34] *** k141215 left
[20:57] *** bootdisk0 joined
[20:59] *** bootdisk0 left
[20:59] *** hamhu3_ left
[21:14] *** jungleboogie joined
[21:15] *** sotona left
[21:15] *** p6bannerbot sets mode: +v jungleboogie

[21:21] *** kensanata left
[21:24] <timotimo> jesus christ

[21:24] *** pmurias left
[21:25] <timotimo> the anti-freenode spam is back

[21:26] * leont is curious what <<use isms 'C++'» is supposed to do

[21:27] <timotimo> m: new Str

[21:27] <camelia> rakudo-moar 12cfde2af: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of C++ constructor syntax; in Perl 6 please use method call syntax␤at <tmp>:1␤------> 3new Str7⏏5<EOL>␤»

[21:27] <timotimo> m: use isms 'C++'; new Str

[21:27] <camelia> rakudo-moar 12cfde2af: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    new used at line 1 (in Perl 6 please use method call syntax instead)␤␤»

[21:28] <timotimo> m: sub new($foo) { }; new Str

[21:28] <camelia> rakudo-moar 12cfde2af: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of C++ constructor syntax; in Perl 6 please use method call syntax␤at <tmp>:1␤------> 3sub new($foo) { }; new Str7⏏5<EOL>␤»

[21:28] <timotimo> m: use isms 'C++'; sub new($foo) { }; new Str

[21:28] <camelia> rakudo-moar 12cfde2af: ( no output )

[21:28] <timotimo> it allows you to use a sub called "new"

[21:29] <timotimo> rather than warning you that "new Str" is likely not what you want/think

[21:34] <leont> That's rather inappropriately named, IMO

[21:35] <leont> The new operator is not something one ought to be using in modern C++, it kind of is a code-smell.

[21:35] <timotimo> huh, really?

[21:35] <timotimo> how else do you allocate stuff?

[21:35] <tadzik> huh, what's the modern C++ alternative?

[21:36] <leont> Also, in C++ new is only used for heap allocated objects, not for stack allocated objects (not that Perl6 has an equivalent of that distinction)

[21:36] <leont> In modern C++ one would use smart pointers, and a helper to create them

[21:36] <timotimo> hm, so we should just kick out the detection of "new"?

[21:36] <leont> I would consider it more of a Javaism, TBH

[21:37] <leont> E.g. «std::make_unique<Foo>("foo", 1)», instead of «std::unique_ptr<Foo>(new Foo("foo", 1"))» (shorter and better exception safety)

[21:38] <leont> In java, the new operator would be used for all objects. If you're heap-allocating most of your C++ objects you've done something terribly wrong, or are very stuck in the 90.

[21:39] <timotimo> TBH i never properly took the time to understand RAII

[21:39] *** itaipu left
[21:40] *** pmurias joined
[21:41] *** p6bannerbot sets mode: +v pmurias

[21:44] <leont> Then you're probably not a C++ programmer :-p

[21:45] *** itaipu joined
[21:46] *** p6bannerbot sets mode: +v itaipu

[21:47] <timotimo> i did some Qt, which I imagine you know means i don't program C++ at all ;) ;)

[21:47] <leont> My dayjob is also Qt, it's good at what it does, but also quite stuck in the 90s in a lot of ways

[21:47] <timotimo> i'm not trying to say it's bad :)

[21:48] <timotimo> just didn't want to claim "i know qt" means "i know c++"

[21:50] <ttkp6> "stuck in the 90's" isn't entirely bad, imo.

[21:50] <leont> Only when it comes to music :-p

[21:51] *** itaipu left
[21:51] <leont> (erm, that can be interpreted in both directions)

[21:51] <ttkp6> heh

[22:22] *** MasterDuke joined
[22:22] *** p6bannerbot sets mode: +v MasterDuke

[22:22] *** MasterDuke left
[22:22] *** MasterDuke joined
[22:22] *** herbert.freenode.net sets mode: +v MasterDuke

[22:22] *** p6bannerbot sets mode: +v MasterDuke

[22:26] *** pmurias left
[22:27] *** pyrimidine left
[22:46] <Xliff> How do you escape formatting codes in POD format.

[22:46] <timotimo> there's a "verbatim" code

[22:46] <timotimo> V<C<foo>> will give you C<foo> i think? though perhaps needs to be V«C<foo>»

[22:47] <Xliff> I have the following text: "<property>OK</property>". I don't want the "K</property>" to be picked up as formatting.

[22:47] <timotimo> otherwise it'll probably take the first > as the end, not the second one

[22:47] <timotimo> but the truth is, i haven't podded much in a long time

[22:48] <Xliff> Something like that is not in the docs. Where could I find it in the source?

[22:51] <timotimo> looks like it's simply missing from the docs

[22:51] <timotimo> the design docs should give you enough info

[22:52] *** bhavin19216 joined
[22:52] *** bhavin19216 was kicked by timotimo (bhavin19216))
[22:56] *** leont left
[23:01] <daemon> what did he do (looks up chan)

[23:03] <geekosaur> the kick? that would be a fake account trying to spam the cannel

[23:03] *** sotona joined
[23:03] <daemon> geekosaur, well yeah but I can't see any spam 

[23:04] <geekosaur> unauth users get their mesages routed to an operator, which currently means a program is receiving ti and either kicking if it' spam or giving +V so they can talk

[23:04] <geekosaur> +v

[23:04] *** p6bannerbot sets mode: +v sotona

[23:04] <daemon> ah

[23:04] <daemon> modetorium or w/e mode

[23:04] <geekosaur> and this is far from the only channel doing things like that

[23:05] <daemon> I only really on pay attention to #freebsd #bsdpub and #perl decided to wander down the rest of the channels I am in :P

[23:06] *** Guest44300 joined
[23:08] *** sotona left
[23:08] *** Guest44300 was kicked by timotimo (Guest44300))
[23:10] <timotimo> daemon: it has been "allah is doing" for a week or two, but now the "the freenode admins are secretly villains who do terrible things, look at their totally legit personal blogs to see it!" spam campaign has come back

[23:10] <timotimo> oh, did my filter successfully filter out my own message, but never any of the real spam messages?

[23:10] <daemon> timotimo, ah ha I seen that in another channel I presumed it was one of the old bots that was was on dialup

[23:10] <timotimo> great

[23:10] <timotimo> haha

[23:10] <timotimo> it didn't get the memo that the campaign is over?

[23:11] <daemon> possible!

[23:11] <daemon> it will get its Gold Spam Member cert revoked

[23:11] <timotimo> there isn't actually a good reason for me to have ops; our bannerbot gives +v after a minute or two, these spam bots don't stay or write that long

[23:12] <daemon> I am still trying to figure out why they waste their time on IRC

[23:12] <timotimo> so i get to see the spam in my backlog, but nobody else does

[23:12] <daemon> I mean a few years ago when IRC was larger sure ...

[23:12] <timotimo> maybe someone is trying to prove that IRC is still alive :P

[23:12] <timotimo> so it's like a triple false flag

[23:12] <daemon> hehe in that case maybe we should support them!

[23:13] <daemon> then again that being said freenode's user count never seems to fluctuate 

[23:13] <daemon> IRC and development of public facing projects seems to just 'be a thing'

[23:13] <daemon> perhaps its the traditionalism :)

[23:14] <timotimo> IRC is so simple that it's kind of a nice default still %)

[23:15] <timotimo> there's fifty mutually incompatible replacements

[23:15] <timotimo> slack, discord, gitter, or going further away even telegram/signal/whatsapp

[23:16] *** pecastro left
[23:16] <timotimo> facebook messenger :P

[23:16] <timotimo> ICQ, AIM, YIM

[23:16] <timotimo> jabber conference rooms

[23:17] <timotimo> uploading numbered text files to eMule

[23:18] *** igoryonya joined
[23:19] *** p6bannerbot sets mode: +v igoryonya

[23:19] *** igoryonya left
[23:19] <timotimo> you know, the usual

[23:22] *** mbrgm8 joined
[23:23] *** mbrgm8 left
[23:24] <timotimo> missed the time to kick 'em

[23:25] *** igoryonya joined
[23:26] *** p6bannerbot sets mode: +v igoryonya

[23:26] *** igoryonya left
[23:27] *** Dj_Dexter20 joined
[23:27] *** Dj_Dexter20 was kicked by timotimo (Dj_Dexter20))
[23:33] *** zeroSteiner6 joined
[23:36] *** zeroSteiner6 left
[23:44] <Xliff> timotimo: I have tried all of those and IRC still remains the best.

[23:44] <Xliff> (Actually, I never tried glitter. I

[23:44] <Xliff> am not fab enough)

[23:45] <timotimo> haha

[23:45] <timotimo> it's "gitter" though, like, inspired by git

[23:45] <timotimo> i do appreciate the pun though

[23:45] <timotimo> not every chat protocol can be almost-reasonably used with just telnet

[23:49] *** maugha joined
[23:49] *** maugha was kicked by timotimo (maugha))
