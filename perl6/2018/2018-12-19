[00:00] <Xliff_> m: my @a["a"] = 1; @a.gist.say

[00:00] <camelia> rakudo-moar 24c8e172f: OUTPUT: ¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5a' (indicated by ‚èè)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[00:00] <Xliff_> Well, there goes THAT commit message.

[00:01] <Xliff_> 24c8e172f Make 'my @a["a"]' a bit more awesome

[00:01] <Xliff_> Could someone explain? :)

[00:01] <mornfall> so a LAST within the whenever for the supply i do not want to wait for

[00:02] <jnthn> mornfall: Yes

[00:03] <jnthn> Also if you're multiple different supplies you want to treat this way, you can probably factor it out into a sub

[00:08] <mornfall> no worky :\

[00:09] <mornfall> i have both a QUIT and a CATCH in the react and (some) exceptions still kill the program

[00:09] *** felher joined
[00:09] <jnthn> mornfall: Dunno, I need to sleep now, I can have a look at it some more another time if you've a small reproduction of the problem.

[00:09] <mornfall> 'a react block:g nnnn in (the block with the QUIT + CATCH) died because of the exception'

[00:10] *** p6bannerbot sets mode: +v felher

[00:10] *** felher left
[00:13] <Xliff_> Why is this an error?

[00:13] <Xliff_> Calling pango_font_map_list_families(Pango::Raw::Types::PangoFontMap, NativeCall::Types::CArray[NativeCall::Types::CArray[NativeCall::Types::Pointer[Pango::Raw::Types::PangoFontFamily]]]) will never work with declared signature (Pango::Raw::Types::PangoFontMap $fontmap, NativeCall::Types::CArray[NativeCall::Types::CArray[NativeCall::Types::Pointer[Pango::Raw::Types::PangoFontFamily]]] $families)

[00:13] <Xliff_> Or have I been working with this code too long?

[00:14] <Xliff_> As far as I can tell, those signatures match.

[00:20] *** mowcat left
[00:21] <Xliff_> Oh hell.

[00:21] <Xliff_> Pointer[repr('CPointer')]] throws that error?

[00:35] *** FieldsaBB joined
[00:36] *** p6bannerbot sets mode: +v FieldsaBB

[00:58] *** FieldsaBB left
[01:23] *** ryn1x joined
[01:24] *** p6bannerbot sets mode: +v ryn1x

[01:37] *** MasterDuke joined
[01:37] *** p6bannerbot sets mode: +v MasterDuke

[01:38] *** MasterDuke left
[01:38] *** MasterDuke joined
[01:38] *** herbert.freenode.net sets mode: +v MasterDuke

[01:38] *** p6bannerbot sets mode: +v MasterDuke

[02:02] <timotimo> oh damn you, wordpress

[02:02] <timotimo> it ate a bunch of stuff in scimon's post

[02:05] <timotimo> well, really only the <d> from the infix:<d> definitions

[02:38] *** evalable6 left
[02:38] *** finanalyst joined
[02:39] *** p6bannerbot sets mode: +v finanalyst

[02:42] *** evalable6 joined
[02:43] *** p6bannerbot sets mode: +v evalable6

[02:49] *** zacts joined
[02:49] *** p6bannerbot sets mode: +v zacts

[02:50] *** vike1 joined
[02:51] *** p6bannerbot sets mode: +v vike1

[02:51] *** vike left
[02:52] *** leont left
[03:19] *** ufobat_ left
[03:22] <ryn1x> .

[03:24] <buggable> New CPAN upload: Graphics-TinyTIFF-0.0.2.tar.gz by RYNIX http://modules.perl6.org/dist/Graphics::TinyTIFF:cpan:RYNIX

[04:01] <Xliff_> timotimo: Can you nativecast a Blob[uint8] to a CArray[uint8] and vice versa?

[04:01] <Xliff_> I know you can use NativeCall::Blob to convert between the two, but would rather a cast be possible.

[04:02] <Xliff_> Would prefer to bind the CArray to the Blob, really.

[04:08] *** Cabanoss- joined
[04:08] *** p6bannerbot sets mode: +v Cabanoss-

[04:09] *** molaf joined
[04:09] *** p6bannerbot sets mode: +v molaf

[04:10] *** Cabanossi left
[04:11] *** ufobat joined
[04:12] *** p6bannerbot sets mode: +v ufobat

[04:14] *** TreyHarris left
[04:16] *** mowcat joined
[04:17] *** p6bannerbot sets mode: +v mowcat

[04:34] *** liamr4c left
[04:36] *** TreyHarris joined
[04:36] *** p6bannerbot sets mode: +v TreyHarris

[04:37] *** lookatme_q left
[04:38] *** lookatme_q joined
[04:38] *** p6bannerbot sets mode: +v lookatme_q

[04:39] *** liamr4c joined
[04:39] *** p6bannerbot sets mode: +v liamr4c

[04:40] *** ryn1x left
[04:50] <Xliff_> m: use NativeCall; my $c = CArray[uint8].new(1, 2, 3, 4); my $b = nativecast(Blob[uint8], $a); $b.^name.say

[04:50] <camelia> rakudo-moar 24c8e172f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$a' is not declared‚ê§at <tmp>:1‚ê§------> 3 3, 4); my $b = nativecast(Blob[uint8], 7‚èè5$a); $b.^name.say‚ê§¬ª

[04:50] <Xliff_> m: use NativeCall; my $c = CArray[uint8].new(1, 2, 3, 4); my $b = nativecast(Blob[uint8], $c); $b.^name.say

[04:50] <camelia> rakudo-moar 24c8e172f: OUTPUT: ¬´Internal error: unhandled target type‚ê§  in sub nativecast at /home/camelia/rakudo-m-inst-1/share/perl6/sources/947BDAB9F96E0E5FCCB383124F923A6BF6F8D76B (NativeCall) line 680‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[04:55] *** kktt joined
[04:56] *** p6bannerbot sets mode: +v kktt

[04:56] *** molaf left
[05:00] *** zacts left
[05:22] *** MasterDuke left
[05:24] *** daotoad joined
[05:25] *** p6bannerbot sets mode: +v daotoad

[05:45] *** robertle left
[05:47] *** lookatme_q left
[05:47] *** lookatme_q joined
[05:48] *** p6bannerbot sets mode: +v lookatme_q

[05:49] *** curan joined
[05:49] *** p6bannerbot sets mode: +v curan

[05:51] <holyghost> I've got an argument list with byte arrays working for my C++ perl6, it's based on Objective-C's NSData

[05:54] *** w_richard_w joined
[05:55] *** p6bannerbot sets mode: +v w_richard_w

[06:17] *** daotoad left
[06:17] *** daotoad joined
[06:18] *** p6bannerbot sets mode: +v daotoad

[06:20] *** jmerelo joined
[06:20] *** p6bannerbot sets mode: +v jmerelo

[06:20] <jmerelo> releasable6: status

[06:20] <yoleaux> 18 Dec 2018 21:02Z <moritz> jmerelo: would you find something like https://gist.githubusercontent.com/moritz/8612f6200f9e34e9ee63f02b6bcbbdc7/raw/b427a7334c910c57b3de8de79bd134f5c77a4e8e/interleaving.pod6 helpful in the p6 docs?

[06:20] <releasable6> jmerelo, Next release will happen when it's ready. 0 blockers. 85 out of 85 commits logged

[06:25] <jmerelo> .tell To tell you the truth, it might be better if you used a real example. If you interpret A, B and C as statements, it might be a bit confusing, because when using that module, A and C are going to run at runtime, B at compile time... The general idea is OK, though...

[06:25] <yoleaux> jmerelo: I'll pass your message to To.

[06:27] <holyghost> hi jmerelo, see above

[06:27] <holyghost> hello btw

[06:28] <jmerelo> hi, seeing it now

[06:29] <holyghost> I've put some more work into my C++ perl6, it's called UnterPaganPerl6

[06:30] <jmerelo> UnterPagan?

[06:30] <holyghost> I'd be glad to make another implementation in full STL

[06:30] <holyghost> from there

[06:30] <holyghost> it's a prototype

[06:31] <jmerelo> perl6 is mostly implemented in Perl6. The virtual machine, MoarVM, is implemented in C. 

[06:32] <holyghost> I know, I have made some classes for vm, architecture etc, it's all in its beginning stages

[06:33] <holyghost> I want to port it to several architectures, it's more a compiler than something else

[06:33] <jmerelo> holyghost: before you go any further, you might want to consider the fact that it took 15 years for a lot of people to take Perl6 from the beginning stages to the Christmas release.

[06:33] <holyghost> ok

[06:34] *** domidumont joined
[06:34] <holyghost> I want to use the OOP

[06:34] <jmerelo> holyghost: so you might want to pursue other venues that might take you closer to fruition.

[06:34] *** p6bannerbot sets mode: +v domidumont

[06:34] <holyghost> of perl6 to make a full OO implementation

[06:35] <holyghost> sorry,

[06:35] <holyghost> I mean I will only implment OO stuff from perl6

[06:35] <holyghost> then people can go on from there

[06:35] <holyghost> I know there's a standard however

[06:35] *** lookatme_q left
[06:36] *** lookatme_q joined
[06:36] <jmerelo> For instance, to write documentation and examples for https://github.com/theholyghost2/Bayes-Learn, move the code to lib/Bayes/Learn.pm (which is the customary way of doing it), adding continuous integration to the repo, write tests for all functions...

[06:37] *** p6bannerbot sets mode: +v lookatme_q

[06:37] <holyghost> I'll do that in the future

[06:37] <jmerelo> There's 007 by masak too https://github.com/masak/007 Extremely interesting, experimental language.

[06:39] <holyghost> ok, I'll put it on my list

[06:40] *** robertle joined
[06:41] *** p6bannerbot sets mode: +v robertle

[06:42] *** nelsonhb joined
[06:43] *** p6bannerbot sets mode: +v nelsonhb

[06:44] <buggable> New CPAN upload: PDF-Class-0.3.3.tar.gz by WARRINGD http://modules.perl6.org/dist/PDF::Class:cpan:WARRINGD

[06:48] <holyghost> HAND jj, I'm afk for while

[06:49] *** Cabanoss- left
[06:49] <jmerelo> holyghost: see you!

[06:50] *** Cabanossi joined
[06:51] *** p6bannerbot sets mode: +v Cabanossi

[06:56] *** eseyman left
[07:01] *** woolfy joined
[07:01] *** woolfy left
[07:04] *** eseyman joined
[07:04] *** p6bannerbot sets mode: +v eseyman

[07:08] *** domidumont1 joined
[07:09] *** p6bannerbot sets mode: +v domidumont1

[07:09] *** jmerelo left
[07:11] *** domidumont left
[07:12] *** alixir12 joined
[07:13] *** p6bannerbot sets mode: +v alixir12

[07:15] *** andrzejku joined
[07:16] *** p6bannerbot sets mode: +v andrzejku

[07:17] *** w_richard_w left
[07:18] *** alixir12 left
[07:26] *** sno left
[07:34] *** rindolf joined
[07:35] *** p6bannerbot sets mode: +v rindolf

[07:45] *** sno joined
[07:45] *** p6bannerbot sets mode: +v sno

[07:55] *** rindolf left
[08:00] *** robertle left
[08:03] *** nadim_ joined
[08:04] *** p6bannerbot sets mode: +v nadim_

[08:07] *** rindolf joined
[08:07] *** dct joined
[08:07] *** p6bannerbot sets mode: +v dct

[08:08] *** p6bannerbot sets mode: +v rindolf

[08:10] *** dogbert17 left
[08:16] *** domidumont1 left
[08:33] *** robertle joined
[08:33] *** p6bannerbot sets mode: +v robertle

[08:38] *** nadim_ left
[08:38] *** finanalyst left
[08:40] *** finanalyst joined
[08:41] *** p6bannerbot sets mode: +v finanalyst

[08:43] *** robertle left
[08:55] *** domidumont joined
[08:56] *** p6bannerbot sets mode: +v domidumont

[08:57] *** cjkinni left
[08:57] *** cjkinni joined
[08:58] *** p6bannerbot sets mode: +v cjkinni

[08:59] *** kktt left
[09:00] *** daotoad left
[09:02] *** dakkar joined
[09:02] *** p6bannerbot sets mode: +v dakkar

[09:05] *** aindilis left
[09:14] *** robertle joined
[09:14] *** sno left
[09:14] *** aindilis joined
[09:14] *** p6bannerbot sets mode: +v robertle

[09:15] *** p6bannerbot sets mode: +v aindilis

[09:16] *** sno joined
[09:17] *** p6bannerbot sets mode: +v sno

[09:19] *** mowcat left
[09:33] *** zakharyas joined
[09:34] *** p6bannerbot sets mode: +v zakharyas

[09:35] *** zakharyas1 joined
[09:35] *** p6bannerbot sets mode: +v zakharyas1

[09:37] *** zakharyas left
[09:46] *** aindilis left
[09:53] *** tobs` joined
[09:54] *** p6bannerbot sets mode: +v tobs`

[10:12] <ufobat> whenever i do something in perl6 i find something that is not competly satisfying me

[10:14] <jnthn> I get that with pretty much every language/technology. :)

[10:15] <ufobat> when i started with perl5 the reason why i wasnt happy was alywas "me being stupid" 

[10:15] *** averna joined
[10:15] <ufobat> now i do PR and issues :-)

[10:16] <ufobat> but i still feel stupid :-)

[10:16] *** p6bannerbot sets mode: +v averna

[10:17] * jnthn feels like his brain already left for Christmas vacation this week... :)

[10:18] <ufobat> 2 more days of work still left for me :-)

[10:18] <ufobat> i am on vacation till 6th Jan!

[10:18] *** averna left
[10:18] *** lookatme_q left
[10:19] *** lookatme_q joined
[10:19] <jnthn> Don't think I'll be off until the 6th, but yeah, next week I certainly am :)

[10:20] *** p6bannerbot sets mode: +v lookatme_q

[10:21] <ufobat> hope you will enjoy it!

[10:22] <ufobat> my wife and my 2 children are going home to my moms house for a few days, there will be way to less space for each of us. lets see who first gets anoyed. ;)

[10:24] <buggable> New CPAN upload: IoC-0.0.3.tar.gz by UFOBAT http://modules.perl6.org/dist/IoC:cpan:UFOBAT

[10:25] <ufobat> buggable++ :)

[10:27] <tbrowder> jmerelo: i think one way to get p6pod parser only, per jnthn‚Äôs thoughts, might be to split the pod grammar/actions into PodGrammar.nqp and PodActions.nqp (which are already there) and then another tool chain/grammar can use that common code for parsing without all of the current p6 code.

[10:30] <llfourn> o/ #perl6! is there a way in the language to make :D the default on class attributes and/or sub params?

[10:31] *** uvelichitel joined
[10:31] *** uvelichitel left
[10:33] <jnthn> m: use parameters :D; sub foo(Int $x) { }; foo(Int)

[10:33] <camelia> rakudo-moar 24c8e172f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§use parameters not yet implemented. Sorry.‚ê§at <tmp>:1‚ê§------> 3use parameters :D7‚èè5; sub foo(Int $x) { }; foo(Int)‚ê§¬ª

[10:33] <jnthn> No :)

[10:34] <jnthn> But that's how it'll look once somebody implements it :)

[10:34] <llfourn> jnthn: heh thanks. I thought I remembered this being a TODO a while ago :)

[10:35] <llfourn> I've been writing a lot of rust recently and not knwoing whether things will be defined gives me a weird feeling in my stomach now :\

[10:37] <jnthn> It's one of those things that I know I could worry about in theory, but rarely bites me in practice.

[10:41] <llfourn> nod. I think I just have to let go of that feeling and only use :D when I actually want to do a runtime check.

[10:44] <lizmat> jnthn: about implementing use parameters :D

[10:45] <lizmat> isn't that just a matter of having "use parameters :D" set a dynamic variable and have the parameter parsing look at that ?

[10:46] <lizmat> jnthn: or am I missing something (less) obvious ?

[10:46] *** domidumont left
[10:48] <jnthn> Well, devil will be in the details

[10:48] <jnthn> What does `Str @foo` mean under that pragma?

[10:48] <Geth> ¬¶ gtk-simple: aed9855fb9 | (Jonathan Stowe)++ | 2 files

[10:48] <Geth> ¬¶ gtk-simple: The GTK::Simple::TextView.text needs an 'is rw' to work

[10:48] <Geth> ¬¶ gtk-simple: 

[10:48] <Geth> ¬¶ gtk-simple: Fixes #87

[10:48] <Geth> ¬¶ gtk-simple: review: https://github.com/perl6/gtk-simple/commit/aed9855fb9

[10:49] *** Cabanossi left
[10:49] *** kurahaupo joined
[10:49] *** aindilis joined
[10:50] *** p6bannerbot sets mode: +v kurahaupo

[10:50] *** andrzejku_ joined
[10:50] *** Cabanossi joined
[10:50] *** p6bannerbot sets mode: +v aindilis

[10:50] *** Averna joined
[10:50] *** p6bannerbot sets mode: +v andrzejku_

[10:51] *** p6bannerbot sets mode: +v Cabanossi

[10:51] *** p6bannerbot sets mode: +v Averna

[10:51] *** Averna left
[10:52] *** Averna joined
[10:52] *** finanalyst left
[10:52] *** p6bannerbot sets mode: +v Averna

[10:52] *** andrzejku left
[10:52] *** andrzejku_ is now known as andrzejku

[10:53] *** finanalyst joined
[10:53] <lizmat> jnthn: I assume sub a(Str @foo) ?   I guess Positiona[Str:D] ?

[10:53] <lizmat> *Positional

[10:53] *** p6bannerbot sets mode: +v finanalyst

[10:54] <jnthn> Or is it Positional:D[Str] ?

[10:54] <jnthn> Note that since these are nominal types, the array being passed would have had to been declared as an Array[Str:D] to match if we take the Positional[Str:D]

[10:55] <lizmat> indeed.... so I guess even more "useless" than it is nonw

[10:55] <lizmat> *now

[10:57] *** finanalyst left
[10:58] *** finanalyst joined
[10:58] <jnthn> How is it useless now?

[10:58] <jnthn> But yes, it would maybe put a bit too much of a burden on the caller, if folks already think having to be consistent with what they pass is a burden now

[10:58] *** p6bannerbot sets mode: +v finanalyst

[10:59] *** Averna left
[10:59] *** Averna joined
[11:00] *** Averna left
[11:01] <lizmat> m: sub a(Str @a) { dd @a }; a <a b c d>  # jnthn people repeatedly think that should work

[11:01] <camelia> rakudo-moar 24c8e172f: OUTPUT: ¬´Type check failed in binding to parameter '@a'; expected Positional[Str] but got List ($("a", "b", "c", "d"))‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:03] <lizmat> m: dd List ~~ Positional[Str]

[11:03] <camelia> rakudo-moar 24c8e172f: OUTPUT: ¬´Bool::False‚ê§¬ª

[11:03] <lizmat> m: dd List[Str] ~~ Positional[Str]

[11:03] <camelia> rakudo-moar 24c8e172f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§List cannot be parameterized‚ê§at <tmp>:1‚ê§------> 3dd List[Str]7‚èè5 ~~ Positional[Str]‚ê§¬ª

[11:04] <lizmat> now, if we could parameterize List *and* <a b c d> would codegen as a List[Str], we'd be in business

[11:04] <jnthn> Except all the ways we'd be out of business :)

[11:05] <lizmat> well, yeah

[11:05] <jnthn> Tests like `is-deeply $foo.bar(), <a b c d>` for example would suddenly start failing.

[11:06] <lizmat> there's that  :-)

[11:06] <lizmat> but that problem exists even without 'use parameters :D'

[11:07] <lizmat> so I'd not consider that a detail of this particular feature

[11:10] <ufobat> jnthn, lizmat what do you both say for not having any specs/roast-tests regarding %?RESOURCES ?

[11:11] <lizmat> ambivalent: feel that we should have tests for the standard CUR implementations that are provided with rakudo

[11:14] <ufobat> my worries are not having no tests for the implementation, but more not having a defined interface and expected behaviour.

[11:14] <jnthn> We probably should have some on %?RESOURCES; the CUR details need more careful thought/discussion, and are probably in the same camp as the MOP (e.g. we move cautiously, and don't try to spec every detail)

[11:28] *** nadim_ joined
[11:29] *** p6bannerbot sets mode: +v nadim_

[11:30] <El_Che> ::::::::;;;@=;<¬¥¬¥¬¥¬¥√°√°√°√°m√†``√†$$--

[11:33] <ufobat> m: ::::::::;;;@=;<¬¥¬¥¬¥¬¥√°√°√°√°m√†``√†$$--

[11:33] <camelia> rakudo-moar cea954c1a: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Name component may not be null‚ê§at <tmp>:1‚ê§------> 3::7‚èè5::::::;;;@=;<¬¥¬¥¬¥¬¥√°√°√°√°m√†``√†$$--‚ê§¬ª

[11:38] *** sno left
[11:44] *** dogbert17 joined
[11:45] *** p6bannerbot sets mode: +v dogbert17

[11:48] *** finanalyst left
[11:49] *** finanalyst joined
[11:49] *** p6bannerbot sets mode: +v finanalyst

[11:51] <moritz> after working with python "mixins" (basically just lean classes + multi inheritance) a bit, I can say without a doubt that I prefer Perl 6 roles :-)

[11:57] *** lucasb joined
[11:57] *** p6bannerbot sets mode: +v lucasb

[12:02] *** finanalyst left
[12:05] *** fluca1978 joined
[12:06] *** p6bannerbot sets mode: +v fluca1978

[12:13] *** zakharyas1 left
[12:25] *** nelsonhb left
[12:56] *** robertle left
[12:59] *** fluca1978 left
[13:28] *** reach_satori left
[13:33] *** MorayJ joined
[13:34] *** p6bannerbot sets mode: +v MorayJ

[13:44] *** robertle joined
[13:44] *** p6bannerbot sets mode: +v robertle

[14:00] *** finanalyst joined
[14:00] *** p6bannerbot sets mode: +v finanalyst

[14:04] *** zakharyas joined
[14:04] *** p6bannerbot sets mode: +v zakharyas

[14:09] *** kensanata joined
[14:09] *** p6bannerbot sets mode: +v kensanata

[14:40] *** molaf joined
[14:40] *** p6bannerbot sets mode: +v molaf

[14:58] *** molaf left
[14:58] *** nadim_ left
[15:11] *** curan left
[15:11] *** molaf joined
[15:12] *** p6bannerbot sets mode: +v molaf

[15:14] <buggable> New CPAN upload: Tomtit-0.0.6.tar.gz by MELEZHIK http://modules.perl6.org/dist/Tomtit:cpan:MELEZHIK

[15:23] *** finanalyst left
[15:26] *** sena_kun joined
[15:27] *** melezhik joined
[15:27] *** p6bannerbot sets mode: +v melezhik

[15:27] *** p6bannerbot sets mode: +v sena_kun

[15:28] *** domidumont joined
[15:29] *** p6bannerbot sets mode: +v domidumont

[15:35] *** Sgeo_ joined
[15:36] *** p6bannerbot sets mode: +v Sgeo_

[15:38] *** Sgeo left
[15:43] *** zakharyas left
[15:44] *** pyrimidine joined
[15:45] *** p6bannerbot sets mode: +v pyrimidine

[15:46] *** hythm_ joined
[15:46] *** p6bannerbot sets mode: +v hythm_

[15:47] <hythm_> p6: my @A; my $b; class C { has @.a; multi method new (:@A) { say 'new1'; self.bless(:@A) }; multi method new (:$b) { say 'new2';self.bless(a => @$b) } }; C.new: :$b

[15:47] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´new1‚ê§¬ª

[15:47] <hythm_> Should not this dispatch to the second new method?

[15:47] <timotimo> named arguments only work as tie-breakers

[15:48] <timotimo> and since named arguments are optional by default, either one of them is fine

[15:48] *** lizmat left
[15:48] <timotimo> so it'll just take the first one that's defined

[15:49] <hythm_> Aah, makes sense, so just mark them as requured ir use pisitional args. Right?

[15:49] <hythm_> Sorry for typo, (using phone)

[15:49] <melezhik> how do I read a single line from stdout ? lines()?

[15:49] <sena_kun> last?

[15:50] <sena_kun> but, get is better, I think

[15:50] <hythm_> s/requured/required/ 

[15:50] <sena_kun> also prompt. :)

[15:50] <sena_kun> m: say prompt('Ehehe? ');

[15:50] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´Ehehe? ¬ªWann treffen wir drei wieder zusamm?¬´‚ê§¬ª

[15:51] <sena_kun> m: my $a = get; say $a;

[15:51] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´¬ªWann treffen wir drei wieder zusamm?¬´‚ê§¬ª

[15:51] <sena_kun> also:

[15:51] <sena_kun> m: for lines() -> $a { say $_; last; }

[15:51] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´(Any)‚ê§¬ª

[15:51] <melezhik> get() works fine, thanks!

[15:52] <sena_kun> m: for lines() { .say; last; }

[15:52] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´¬ªWann treffen wir drei wieder zusamm?¬´‚ê§¬ª

[15:53] <melezhik> prompt is good too!

[15:53] <sena_kun> :)

[16:10] *** rindolf left
[16:11] *** rindolf joined
[16:12] *** p6bannerbot sets mode: +v rindolf

[16:12] *** hythm_ left
[16:13] *** jmerelo joined
[16:14] *** p6bannerbot sets mode: +v jmerelo

[16:21] <jmerelo> releasable6: status

[16:21] <releasable6> jmerelo, Next release will happen when it's ready. 0 blockers. 85 out of 87 commits logged

[16:21] <releasable6> jmerelo, Details: https://gist.github.com/466dc6dd3eb9ce5901bb850a460bdb81

[16:22] *** MorayJ left
[16:28] *** sno joined
[16:29] *** p6bannerbot sets mode: +v sno

[16:40] <dakkar> how bad an idea is it, to use nqp::serialize to store data to disk?

[16:41] <dakkar> I have a (rather large) data structure, that I keep in memory for speed

[16:41] <dakkar> I'd like it to be kept on disk as well, so I don't have to regenerate it at the next startup of the program

[16:41] <Xliff_> dakkar: Is it in a module?

[16:41] <timotimo> serialization also has dependencies and such

[16:42] *** Xliff_ is now known as Xliff

[16:42] <dakkar> I've seen https://github.com/FROGGS/p6-Ser/blob/master/lib/Ser.pm 

[16:42] <timotimo> if you generate the data at compile time with BEGIN, it'll land in the precomp file if it's a module

[16:42] <dakkar> it's runtime data, though

[16:42] <Xliff> Yeah. ^^ That's where I was going.

[16:43] <dakkar> https://www.thenautilus.net/cgit/MaildirIndexer/tree/lib/MaildirIndexer/Store.pm6?h=bayes ‚Üê this thing

[16:43] <dakkar> it's an index of a set of mailboxes

[16:44] <dakkar> with ~250k messages to scan, I'd like to avoid rebuilding it each time

[16:44] <timotimo> what is it, not regenerate every startup, or must be regenerated all the time? :)

[16:44] <dakkar> ‚ò∫

[16:45] <dakkar> I'll add a "this file was last seen at $time", so I can do a quick scan via stat and update it once it's been loaded

[16:46] <dakkar> most email messages don't move around while the program is not running

[16:46] <dakkar> or, if you prefer, updating the structure is quick, building it from scratch is slow

[16:47] <dakkar> let me start again‚Ä¶

[16:48] <dakkar> I have this data structure I want to store on disk

[16:48] <dakkar> the serialisation format is not particularly important, as long as it's quick and not too large

[16:48] <dakkar> nqp::serialize seems a sensible choice to me, but I don't know enough to be sure

[16:49] <dakkar> opinions?

[16:49] <jnthn> dakkar: Are you already aware that anything you serialize that way will be invalidated when you, for example, upgrade your Perl 6 version?

[16:50] <jnthn> s/version/implementation/

[16:50] <dakkar> "implementation" as in, switch from Moar to JVM?

[16:50] <jnthn> No

[16:50] <jnthn> Just install a new version of Rakudo

[16:50] <jnthn> Oh, but that'll do it also :)

[16:50] <timotimo> i'd recommend going with JSON::Fast or MessagePack (whichever one is used in moar's remote debugger library)

[16:53] <jnthn> I'd avoid using nqp::serialize, though. It's built specifically to help support module precompilation.

[16:53] <dakkar> jnthn: interesting. I had mis-estimated the stability of the serialisation

[16:53] <dakkar> so, the format is stable, but the representations of the objects I store may not be

[16:54] <dakkar> timotimo: I'll have to see how slow those are ‚ò∫

[16:54] <jnthn> Well, you'll end up with cross-references to types in CORE.setting

[16:55] <jnthn> And because nothing in Perl 6 has an absolute name, there's no way to write any kind of dynamic linking

[16:55] <dakkar> ouch

[16:55] <jnthn> So everything just references by index in another table.

[16:55] <jnthn> Which, given what we need for precomp, is totally fine.

[16:55] <dakkar> so any change in core invalidates all serialised objects

[16:56] <jnthn> Yes.

[16:56] <jnthn> And CORE is linked against other bits of the compiler, so any change there too :)

[16:56] <Xliff> dakkar: If everything can be stored as records, might be easiest just to build a set of repr('CStructs') and use C to write/read from disk.

[16:57] <jnthn> Precomp is just cache, so none of this is a problem: we can regenerate them whenever we need. But that's not so useful for serialization in general :)

[16:57] <dakkar> Xliff: I'm not *that* desperate for speed (yet) üòú

[16:57] <dakkar> jnthn: (tangential) is there any risk, when deserialising something built from a different rakudo, to get out different objects, without realising?

[16:58] <Xliff> dakkar: Not talking speed, really. Thinking more about stability.

[16:58] <Xliff> If JSON won't work for you, something like that is probably the next way to go, unless you come up with your own serialization format.

[16:59] <Xliff> Perl5 had Storable, but that was XS-backed.

[17:00] <dakkar> hmm. do I want to write a Perl6 Serial ?‚Ä¶

[17:00] <dakkar> Sereal, even

[17:00] <Xliff> Well, if you have idea's. I'll throw my hat into the ring to help. ;)

[17:02] <jnthn> dakkar: No, or at least, you'd have to be incredibly unlucky

[17:02] <jnthn> (Like, SHA-1 collision unlucky)

[17:02] <dakkar> jnthn: good enough üòú

[17:03] <Xliff> My eyes are definitely going bad. I first thought that smiley had fangs.

[17:08] <dakkar> get a better font ü¶á

[17:08] <Xliff> Now that's just being cheeky.

[17:08] <Xliff> :)

[17:09] <dakkar> https://emojipedia.org/vampire/

[17:10] <dakkar> and with that, I'll disappear (last workday for two weeks!)

[17:10] <dakkar> as someone said, have an appropriate amount of fun

[17:11] *** dakkar left
[17:13] *** reach_satori joined
[17:14] *** p6bannerbot sets mode: +v reach_satori

[17:19] <jmerelo> Did you check out today's advent calendar entry on interactive desktop apps? https://perl6advent.wordpress.com/2018/12/19/day-19-interactive-desktop-apps/

[17:20] <jmerelo> .seen tobs

[17:20] <yoleaux> I saw tobs 18 Dec 2018 17:52Z in #perl6: <tobs> beats me

[17:23] <Xliff> .seen scimon

[17:23] <yoleaux> I saw scimon 12 Dec 2018 16:38Z in #perl6: <scimon> Neat.

[17:26] *** kensanata left
[17:28] <tobs`> jmerelo: the post is in the works, will be ready in due time.

[17:28] <jmerelo> tobs`: great :-) Checking, just in case :-)

[17:31] <jmerelo> m: say $*PID, $*PID.perl

[17:31] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´2857228572‚ê§¬ª

[17:39] <Altreus> anything in p6 or on the roadmap like decorators in other languages? A syntactic construct that wraps a function around another function or method?

[17:40] <tadzik> maybe traits are what you're looking for?

[17:40] <Altreus> I was thinking, maybe I could adorn all my methods that return promises, to also create another method that awaits the original one

[17:40] <tadzik> sub foo is route('/bar') { } like in Flask

[17:40] <Altreus> hey I didn't actually think of that

[17:41] <Altreus> sub foo is Promising { }

[17:41] <jmerelo> Altreus: You can just use functions as any other variable, no special syntax to wrap a function around another. You just do it.

[17:41] <Altreus> can you give an example before I say something silly? :)

[17:42] <jmerelo> Altreus: there's also this https://docs.perl6.org/routine/%E2%88%98 for function composition

[17:42] <Altreus> I'm just thinking that in python you do @somefunction\ndef anotherfunction: ...

[17:43] <jmerelo> Altreus: which is not nice at all.

[17:43] <Altreus> ah, antipattern is it

[17:43] <Altreus> I'm also a fan of answers like this :)

[17:43] <tadzik> every time I teach this I start by explaining that it's just anotherfunction = somefunction(anotherfunction)

[17:43] <jmerelo> you can use f ‚àò g or simply call one from the other

[17:44] <Altreus> can I do that to define a method? sorry if I'm being thick

[17:44] <Altreus> I'm just trying to find the nicest way of reducing boilerplate

[17:44] <Altreus> I'd like to have counterpart methods to everything that returns a Promise, to provide versions that await it

[17:44] <jmerelo> m: sub foo ( $whatever ) { $whatever*2 }; sub bar ($whatever) { $whatever / 2 }; my $id = foo ‚àò bar; say $id(333)

[17:44] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Preceding context expects a term, but found infix ‚àò instead.‚ê§at <tmp>:1‚ê§------> 3tever) { $whatever / 2 }; my $id = foo ‚àò7‚èè5 bar; say $id(333)‚ê§¬ª

[17:44] <tadzik> hmm

[17:45] <tadzik> Altreus: I'd go for a metaclass that dupes all the methods that return a Promise

[17:45] <Altreus> that sounds scary but learnable

[17:45] <jmerelo> m: sub foo ( $whatever ) { $whatever*2 }; sub bar ($whatever) { $whatever / 2 }; my $id = &foo ‚àò &bar; say $id(333)

[17:45] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´333‚ê§¬ª

[17:45] <Altreus> I played with metaclasses a little bit when I read the code for one of the orms

[17:45] <tadzik> so, at class composition time: inspect every method you have, if it returns a promise, plug in a new one that awaits the old one

[17:45] <tadzik> . o O ( can you have metaroles? )

[17:46] <Geth> ¬¶ doc: 05cd7b6efa | (JJ Merelo)++ | doc/Language/variables.pod6

[17:46] <Geth> ¬¶ doc: Improving the page by (slight) rewriting

[17:46] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/05cd7b6efa

[17:46] <synopsebot> Link: https://doc.perl6.org/language/variables

[17:51] *** captain-adequate joined
[17:52] *** p6bannerbot sets mode: +v captain-adequate

[18:01] *** jmerelo left
[18:02] *** melezhik left
[18:09] *** oftl left
[18:10] <SmokeMachine> m: multi trait_mod:<is>(Routine $r, :$promising) { my &orig := $r.clone; $r.wrap: -> |c { start { orig |c } } }; sub bla is promising { sleep 1; 42 }; my $a = bla; say $a; say await $a

[18:10] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´Promise.new(scheduler => ThreadPoolScheduler.new(initial_threads => 0, max_threads => 64, uncaught_handler => Callable), status => PromiseStatus::Planned)‚ê§42‚ê§¬ª

[18:13] *** ponbiki left
[18:22] *** zakharyas joined
[18:23] *** p6bannerbot sets mode: +v zakharyas

[18:26] *** lucasb left
[18:33] *** sauvin left
[18:34] *** nadim_ joined
[18:35] <SmokeMachine> Altreus: ^^

[18:35] *** p6bannerbot sets mode: +v nadim_

[18:40] *** sno left
[18:42] *** sno joined
[18:43] *** p6bannerbot sets mode: +v sno

[18:43] *** markjreed joined
[18:44] *** sno left
[18:44] *** p6bannerbot sets mode: +v markjreed

[19:10] *** zakharyas left
[19:11] *** Scimon joined
[19:12] *** p6bannerbot sets mode: +v Scimon

[19:12] <Scimon> Hi

[19:16] *** nadim_ left
[19:16] *** Scimon left
[19:17] <SmokeMachine> hi!

[19:19] *** sno joined
[19:19] *** oftl joined
[19:19] <Kaiepi> i ordered the wrong type of ram bro my machine...

[19:19] <Kaiepi> there is'tn and emoji that escpresses my rage

[19:19] <tadzik> I feel your pain

[19:19] *** p6bannerbot sets mode: +v sno

[19:19] <tadzik> I fought my new ram sticks for like a week

[19:20] *** p6bannerbot sets mode: +v oftl

[19:20] <tadzik> I ended up downclocking them to 2100, otherwise they randomly reboot my system

[19:20] <Kaiepi> i think i can gvie it as a preent

[19:23] *** lizmat joined
[19:23] *** p6bannerbot sets mode: +v lizmat

[19:24] *** nadim joined
[19:25] *** p6bannerbot sets mode: +v nadim

[19:36] *** markjreed left
[19:42] *** markjreed joined
[19:43] *** p6bannerbot sets mode: +v markjreed

[19:44] *** Sgeo__ joined
[19:45] <Geth> ¬¶ doc: 6bee0a45cc | Coke++ | doc/Language/variables.pod6

[19:45] <Geth> ¬¶ doc: whitespace

[19:45] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/6bee0a45cc

[19:45] <synopsebot> Link: https://doc.perl6.org/language/variables

[19:45] *** p6bannerbot sets mode: +v Sgeo__

[19:48] *** Sgeo_ left
[19:58] *** ponbiki joined
[19:58] *** p6bannerbot sets mode: +v ponbiki

[20:02] *** zakharyas joined
[20:03] *** p6bannerbot sets mode: +v zakharyas

[20:10] <tony-o> m: sub r { say "x"; }; &r.wrap({ say "wrap"; callsame; }); r;

[20:10] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´wrap‚ê§x‚ê§¬ª

[20:12] *** markjreed left
[20:16] <Xliff> m: sub r { say "x"; }; &r.wrap({ say "wrap"; callsame; }); 

[20:16] <camelia> rakudo-moar e01eea099: ( no output )

[20:17] <Xliff> tony-o: Where is wrap documented?

[20:17] <SmokeMachine> m: multi trait_mod:<is>(Routine $r, :$promising) { my &orig := $r.clone; $r.wrap: -> |c { Promise.start: &orig.assuming: |c } }; sub bla($int) is promising { sleep $int div 10; $int }; my $a = bla 42; say $a; say await $a

[20:18] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´Promise.new(scheduler => ThreadPoolScheduler.new(initial_threads => 0, max_threads => 64, uncaught_handler => Callable), status => PromiseStatus::Planned)‚ê§42‚ê§¬ª

[20:18] <tony-o> Xliff: https://docs.perl6.org/type/Routine#method_wrap

[20:18] <Xliff> Thanks.

[20:18] <SmokeMachine> https://docs.perl6.org/routine/wrap

[20:27] <Kaiepi> i can't wait until my grant progoposal getps approved or denied

[20:34] <lizmat> Kaiepi: don't expect that to happen this year...

[20:34] *** Actualeyes joined
[20:35] <jnthn> Kaiepi: I've been looking over it so I can give feedback. One thing that's not clear: will IO::Socket::Async get all of the features (UNIX sockets, raw sockets, sending descriptors, etc.) that are proposed? Also, where do you see breaking changes being needed?

[20:35] *** p6bannerbot sets mode: +v Actualeyes

[20:35] <lizmat> Kaiepi: voting doesn't start until after the 22nd... and that typically takes weeks...  

[20:40] *** domidumont left
[20:49] <SmokeMachine> Kaiepi: have you added unix sockets to your proposal?

[20:53] <Kaiepi> yes

[20:55] <Kaiepi> the breaking chganges in IO::SOcket::Async has to do paricularlarly with .listen

[20:55] <Kaiepi> yes SmokeMachine 

[20:55] <Xliff> m: my $c = CArray[uint8].new(0 xx 10000); say now - INIT.now

[20:55] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Whitespace required after keyword 'INIT'‚ê§at <tmp>:1‚ê§------> 3y[uint8].new(0 xx 10000); say now - INIT7‚èè5.now‚ê§¬ª

[20:55] <Xliff> m: my $c = CArray[uint8].new(0 xx 10000); say now - INIT now

[20:55] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    CArray used at line 1. Did you mean 'Array', 'array'?‚ê§‚ê§¬ª

[20:56] <Xliff> m: use NativeCall; my $c = CArray[uint8].new(0 xx 10000); say now - INIT now

[20:56] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´0.0387783‚ê§¬ª

[20:56] <Xliff> m: use NativeCall; my $c = CArray[uint8].new(0 xx 600000); say now - INIT now

[20:56] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´1.112439‚ê§¬ª

[20:56] <Xliff> Is there a faster way to initialize a CArray?

[20:56] <timotimo> Kaiepi: does it have to break? wouldn't it be possible to differentiate between .new.listen and .listen?

[20:56] <Xliff> m: use NativeCall; my $c = CArray[uint8].new(0 xx 6000000); say now - INIT now

[20:57] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´6.44441923‚ê§¬ª

[20:58] <Xliff> m: (640*480).say

[20:58] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´307200‚ê§¬ª

[21:01] <Kaiepi> m: m: say awaait IO::SocketLLNET.connect: ':host<google.com>, :80port

[21:01] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in single quotes; couldn't find final "'" (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> 3NET.connect: ':host<google.com>, :80port7‚èè5<EOL>‚ê§    expecting ‚Ä¶¬ª

[21:02] *** i1nfusion joined
[21:02] *** p6bannerbot sets mode: +v i1nfusion

[21:04] <tobs`> Advent #20 is 95% finished. Now I just need 30 small illustrations and maybe something to eat :')

[21:06] <Kaiepi> imt not wusre timotimo. which is part so why i wanna disccuss hous best to impolememnet it

[21:08] <tbrowder> hi, #perl6

[21:09] *** dct left
[21:11] *** reach_satori left
[21:11] <Kaiepi> timotimo, that's not the probme  

[21:12] <tbrowder> i‚Äôm starting to port a p5 module (Date::Calc) and want to (1) preserve the original sub names and signatures as much as possible and (2) offer an alternative set of names and better signatures.

[21:13] *** cbk joined
[21:13] *** p6bannerbot sets mode: +v cbk

[21:13] <cbk> what version of rakudo will support perl6.d

[21:14] <lizmat> 2018.11 and higher default to it

[21:14] <lizmat> is that the answer to your question ?

[21:15] <lizmat> earlier versions supported it with "use 6.d.PREVIEW"

[21:15] *** zakharyas left
[21:15] <tbrowder> question: as a first cut, is there a better way to offer a different sub name other than, say, ‚Äúsub new-name($arg) { Old_Name($arg); }‚Äù?

[21:15] <cbk> well i think it does.  now can i just remove my .rakudobrew dir and install 2018.11?

[21:16] <lizmat> cbk: probably, but I'm no rakudobrew expert

[21:16] <lizmat> tbrowder: if they have the same interface, you can:

[21:17] <cbk> lizmat, ok. Thank you.

[21:17] <lizmat> m: constant &MAXIMAX = &max; dd MAXIMAX 42,666   # tbrowder 

[21:17] <camelia> rakudo-moar e01eea099: OUTPUT: ¬´666‚ê§¬ª

[21:19] <tbrowder> lizmat: is there a special place for seeing butterfly modules and progress?

[21:20] <lizmat> https://modules.perl6.org/t/CPAN5

[21:25] <Geth> ¬¶ perl6.org: 033ba3eb27 | (Tom Browder)++ (committed using GitHub Web editor) | source/resources/index.html

[21:25] <Geth> ¬¶ perl6.org: update bok status

[21:25] <Geth> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/033ba3eb27

[21:26] <tbrowder> never could type...

[21:29] <tbrowder> lizmat: thnx, i always forget that, maybe a big butterfly image and link would help

[21:30] *** robertle left
[21:39] *** cbk left
[21:44] *** reach_satori joined
[21:45] *** p6bannerbot sets mode: +v reach_satori

[21:50] *** Possum left
[21:52] *** andrzejku_ joined
[21:53] *** p6bannerbot sets mode: +v andrzejku_

[21:53] *** Sgeo__ left
[21:55] *** andrzejku left
[21:55] *** andrzejku_ is now known as andrzejku

[22:12] *** lucasb joined
[22:12] *** p6bannerbot sets mode: +v lucasb

[22:12] *** daxim left
[22:23] *** tobs` left
[22:25] *** Kaiepi is now known as Highpie

[22:27] *** sena_kun left
[22:34] *** kurahaupo left
[22:35] *** Praise left
[22:37] *** Praise joined
[22:37] *** Praise left
[22:37] *** Praise joined
[22:37] *** p6bannerbot sets mode: +v Praise

[22:37] *** p6bannerbot sets mode: +v Praise

[22:39] *** kurahaupo joined
[22:39] <AlexDaniel> u: ùëíe

[22:39] <unicodable6> AlexDaniel, U+1D452 MATHEMATICAL ITALIC SMALL E [Ll] (ùëí)

[22:39] <unicodable6> AlexDaniel, U+0065 LATIN SMALL LETTER E [Ll] (e)

[22:40] *** p6bannerbot sets mode: +v kurahaupo

[22:40] *** kybr left
[22:41] *** tobs` joined
[22:42] *** p6bannerbot sets mode: +v tobs`

[22:51] <lucasb> eeeeeeeeeeeeeeeeeeee

[22:52] <lucasb> that github repo drama :)

[23:02] *** Possum joined
[23:02] *** p6bannerbot sets mode: +v Possum

[23:03] *** rindolf left
[23:09] *** nadim left
[23:11] <AlexDaniel> lucasb: what drama?

[23:11] * AlexDaniel can't see any drama

[23:14] <lucasb> AlexDaniel: I was refering to another thing :) https://linuxwit.ch/blog/2018/12/e98e/

[23:15] *** Highpie is now known as Highpi

[23:15] <lucasb> maybe "drama" wasn't the best word. Anyway, just a confusion in GitHub. :)

[23:15] <lucasb> https://github.com/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee

[23:16] <lucasb> the repository is archived and we lost the opportunity of putting a Perl 6 version there :D

[23:18] <tobs> Is today's article 20 minutes overdue or 40 minutes underdue? I don't know if I should "Publish immediately" or not.

[23:27] <AlexDaniel> tobs: it's 23:27 UTC

[23:27] <tobs> phew :)

[23:28] <tobs> that gives me time to fix all the instances of "<>" that were swallowed by the converter

[23:28] <AlexDaniel> lucasb: giving users the ability to create long repo names and then falling apart when a repo with a long name is crated. What a shitshow

[23:29] <AlexDaniel> created*

[23:29] <AlexDaniel> what's the longest module possible module name in our ecosystem? Should I create module Foo::ùëíùëíùëíùëíùëíùëíùëíùëíùëíùëíùëí ?

[23:30] <AlexDaniel> s/module//

[23:31] *** scovit joined
[23:31] *** p6bannerbot sets mode: +v scovit

[23:31] <AlexDaniel> I don't feel like doing it today, but it will be a nice addition to the collection: https://modules.perl6.org/search/?q=foo%3A%3A

[23:32] <scovit> Hi, I am playing with the MOP, I am doing something like ClassObject.^add_method("a", -> $x { $x.say });

[23:33] <scovit> Does anybody knows how to add a multi?

[23:35] <Juerd> add_multi_method :)

[23:35] <AlexDaniel> m: multi foo(Str, Int $x) { say ‚Äòint multi‚Äô }; multi foo(Str, Str $x) { say ‚Äòstr multi‚Äô }; Str.^add_method("a", &foo); Str.a(‚Äò42‚Äô); Str.a(‚Äòfoo‚Äô)

[23:35] <camelia> rakudo-moar 6e7893bd3: OUTPUT: ¬´str multi‚ê§str multi‚ê§¬ª

[23:35] <AlexDaniel> m: multi foo(Str, Int $x) { say ‚Äòint multi‚Äô }; multi foo(Str, Str $x) { say ‚Äòstr multi‚Äô }; Str.^add_method("a", &foo); Str.a(42); Str.a(‚Äòfoo‚Äô)

[23:35] <camelia> rakudo-moar 6e7893bd3: OUTPUT: ¬´int multi‚ê§str multi‚ê§¬ª

[23:36] <scovit> Ok, thanks

[23:37] <scovit> add_multi_method would have been nice and easy to find ;)

[23:37] <AlexDaniel> add_multi_method exists but I'm not sure how to get it work

[23:46] <jnthn> Same as add_method

[23:47] <buggable> New CPAN upload: PDF-ISO_32000-0.0.5.tar.gz by WARRINGD https://cpan.metacpan.org/authors/id/W/WA/WARRINGD/Perl6/PDF-ISO_32000-0.0.5.tar.gz

[23:47] <jnthn> Oh, but if you're not keeping the MOP contract and calling add_multi_method without a compose call afterwards, it'll have no effect. :)

[23:49] *** Cabanossi left
[23:50] *** Cabanossi joined
[23:51] *** p6bannerbot sets mode: +v Cabanossi

[23:56] <timotimo> tobs: i'm a bit late, but it's not the converter that swallows the <>, it's the wordpress editor when you paste in html

[23:56] <timotimo> it thinks you're trying to put html tags in, notices they're invalid, and just removes them ... or something like that?

[23:57] <tobs> timotimo: yeah, I found that out meanwhile. I'm about to complete my proofreading and then I'm going to add all of them again once and for all.

[23:58] <tobs> The editor goes "&gt;" ‚Üí ">" ‚Üí "" when you review the article multiple times.

