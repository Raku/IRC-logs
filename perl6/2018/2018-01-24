[00:02] *** Guest6493 is now known as Levex

[00:02] *** Levex left
[00:02] *** Levex joined
[00:02] <buggable> New CPAN upload: Geo-Ellipsoid-Perl6-1.0.0.zip by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Geo-Ellipsoid-Perl6-1.0.0.zip

[00:05] *** Ven` left
[00:08] *** ChoHag left
[00:12] *** Actualey` left
[00:16] <diegok> Hi!, anyone using any of Redis or Redis::Async modules succesfully?. Firt one connects OK and I can set keys, but hangs forever when trying to call any "read" command on it. The later says it can't find liberedis.so but it's present on my box on /usr/local/lib/... :-/

[00:21] <jnthn> Hm, I'm sure one of my colleagues used the latter of those recently and ran into the same error, then somehow resolved it.

[00:21] <jnthn> I dunno how, but it mighta been that he'd only just installed the lib and needed to run ldconfig or something

[00:25] <jnthn> sleep &

[00:25] *** lookatme joined
[00:26] <geekosaur> possibly also changing /etc/ld.so.conf to include /usr/local/lib

[00:27] <diegok> jnthn: thanks!, ldconfig passing the local/lib did it!

[00:29] <diegok> geekosaur: sure, it will be a better option! :-)

[00:31] *** troys is now known as troys_

[00:33] *** cdg joined
[00:36] *** cdg_ left
[00:37] *** cdg left
[00:41] *** dh7320 joined
[00:44] *** Nanjizal joined
[00:45] *** itaipu left
[00:45] *** n0tjack joined
[00:45] <n0tjack> howdy all!

[00:45] *** wander joined
[00:46] *** mempko left
[00:46] <n0tjack> Is anyone aware of a p6 module for a Slackbot?  I'm planning to write a Slang for the sole purpose of bothering my unsuspecting co-workers.

[00:47] <teatime> I love it.

[00:49] <n0tjack> Honestly, they have it coming for making the poor life choice of hiring me.

[00:50] *** dh7320 left
[01:04] *** aborazmeh joined
[01:04] *** aborazmeh left
[01:04] *** aborazmeh joined
[01:07] *** itaipu joined
[01:11] <timotimo> they should have hired notnotjack

[01:20] *** konsolebox left
[01:20] *** dhgalt joined
[01:20] *** wamba left
[01:21] *** Actualeyes joined
[01:23] *** jeromelanteri joined
[01:27] *** dustinm` left
[01:30] <TimToady> AlexDaniel: as it happens, you don't need | in "run <rm -->, $file" because it uses a flattening * slurpy in the signature, which makes sense when you know you just want a list of strings

[01:31] *** konsolebox joined
[01:33] *** yoleaux left
[01:33] *** yoleaux joined
[01:33] *** ChanServ sets mode: +v yoleaux

[01:34] *** markong left
[01:36] *** dustinm` joined
[01:56] *** bayprogrammer joined
[01:59] *** astj left
[02:05] *** astj joined
[02:33] *** dhgalt left
[02:43] *** eliasr left
[02:45] *** ilbot3 left
[02:50] *** itaipu left
[02:51] *** Geth left
[02:52] *** Geth joined
[02:52] *** ChanServ sets mode: +v Geth

[02:53] *** BuildTheRobots left
[02:57] *** ckraniak joined
[02:57] *** ilbot3 joined
[02:57] *** ChanServ sets mode: +v ilbot3

[03:08] *** Actualeyes left
[03:18] *** konsolebox left
[03:20] *** stmuk joined
[03:22] *** stmuk_ left
[03:22] *** ZzZombo joined
[03:24] <ZzZombo> Isn't Zef supposed to be included in Rakudo Perl by default? First I suddenly found out that "zef is not an internal or external command blah blah", Because apparently 

[03:24] <ZzZombo> it went missing somehow after long time of working fine.

[03:24] <geekosaur> star yes, dev releases no

[03:25] <ZzZombo> I tried to reinstall Rakudo, but it Zef still doesn't work.

[03:25] <ZzZombo> star, that is it.

[03:28] <ZzZombo> So, either I need to somehow "unlock" it from the installer, or find an alternative way to install modules on Windows, Zef or not. Panda is also missing, BTW, that is expected I guess?

[03:31] *** konsolebox joined
[03:33] *** gingko_biloba joined
[03:33] <gingko_biloba> Is there any way to alternate on each value of an array in a regex?

[03:33] <gingko_biloba> I'm trying to make fractions with unicode superscripts and subscripts into something that can be parsed

[03:34] *** cdg joined
[03:37] *** konsolebox left
[03:38] *** cdg left
[03:40] *** gingko_biloba left
[03:43] <timotimo> why do people leave so quickly after asking questions :(

[03:43] <timotimo> ZzZombo: are you saying you're installing rakudo? if you install rakudo only you won't get zef. if you install rakudo star, you should be getting a zef, too

[03:44] *** konsolebox joined
[03:44] <ZzZombo> I just said I installed star

[03:44] <timotimo> ah, sorry

[03:44] <timotimo> sounds like you're on windows?

[03:48] <ZzZombo> yes

[03:48] *** ufobat___ joined
[03:49] <timotimo> hm, i'm not sure how exactly rakudo star packages things up. you should be able to find a zef script in there somewhere, though. maybe a bat even

[03:49] <timotimo> sorry, i'm rather useless for this task :(

[03:50] *** Geth left
[03:50] *** Geth joined
[03:50] *** ChanServ sets mode: +v Geth

[03:51] <timotimo> all i know is how our travis configs build rakudo, but i think they mostly do it from scratch

[03:51] *** ufobat_ left
[03:51] <timotimo> so they're pulling a visual studio, git clone moar, nqp, rakudo and later probably also zef

[03:52] <timotimo> though there's also a chocolatey package for rakudo star

[03:57] <wander> gingko_biloba: https://docs.perl6.org/language/regexes#Regex_Interpolation

[03:59] *** n0tjack left
[04:02] *** piojo1 joined
[04:08] *** Nanjizal left
[04:29] *** Cabanossi left
[04:30] *** ChoHag joined
[04:31] *** Cabanossi joined
[04:33] *** Actualeyes joined
[04:38] *** llfourn left
[04:47] *** ChoHag left
[04:48] <ZzZombo> Hm... hate all of this PATH business, had to reboot the laptop in order to see Zef available again.

[04:53] *** nativecallable6 left
[04:53] *** nativecallable6 joined
[04:53] *** ChanServ sets mode: +v nativecallable6

[04:56] *** troys_ is now known as troys

[04:56] *** troys is now known as troys_

[04:56] *** troys_ is now known as troys

[04:57] *** llfourn joined
[05:05] *** Sgeo_ left
[05:06] *** bayprogrammer left
[05:08] *** Sgeo joined
[05:16] *** astj left
[05:17] *** astj joined
[05:18] *** espadrine left
[05:18] *** astj left
[05:19] *** astj joined
[05:38] *** trnh left
[05:50] *** statisfiable6 left
[05:50] *** statisfiable6 joined
[05:52] *** aborazmeh left
[05:58] *** b2gills joined
[06:04] *** AlexDaniel left
[06:08] *** khw left
[06:12] *** khw joined
[06:13] *** khw left
[06:40] *** ChoHag joined
[06:42] *** darutoko joined
[06:43] *** ChoHag left
[06:58] *** AlexDaniel joined
[06:58] <piojo1> ZzZombo: that is solvable, but it requires a little magic. At least if you're on Linux or Cygwin

[06:59] *** rindolf joined
[06:59] <piojo1> I export ORIG_PATH if it doesn't yet exist, which ends up holding the system PATH which is set before .bashrc or .zshrc

[06:59] <piojo1> and if ORIG_PATH exists, set PATH="$ORIG_PATH" at the top of .bashrc/.zshrc (before you add other stuff)

[06:59] <teatime> piojo1: he's on windows

[06:59] <piojo1> ahh

[07:00] <piojo1> damn. Well, so am I, and I have no idea how to solve those problems :D

[07:00] <teatime> lol

[07:02] *** curan joined
[07:03] <lookatme> :)

[07:10] <El_Che> If I used windows  I would mostly use rakudo from Linux subssystem or cygwon (on an older Windows)

[07:14] <lookatme> I used rakudo under windows, not have much trouble currently

[07:15] <lookatme> Sometimes rakudo will report thread panic trouble :(

[07:15] <El_Che> lookatme: good. It's important that people test/use it on all the supported systems

[07:16] <lookatme> Also I have rakudo under bash on windows, but windows not have a good terminal simulator :(

[07:16] <El_Che> lookatme: at's a "the programmer created a deadlock"-panic? I have that all the time on all the programming languages with threads :)

[07:16] <lookatme> no, it's the problem of rakudo

[07:17] <El_Che> some error messages, like go's, are pretty useless when you hit that

[07:17] <El_Che> if not yet reported, raise an issue on gthub

[07:18] <lookatme> I am not have a stable code to reproduce the issue :)

[07:18] <lookatme> I will try it in next release

[07:18] <lookatme> And see if it fixed, or I will report it

[07:18] *** domidumont left
[07:20] <AlexDaniel> TimToady: wow indeed. This is awesome then

[07:20] <lookatme> Since the code is using for grab some foundations' value from some website :)

[07:20] <lookatme> It's not so important for me :)

[07:22] <piojo1> I found path operations aren't threadsafe on windows

[07:22] <piojo1> reported a couple days ago here: https://github.com/rakudo/rakudo/issues/1436

[07:23] <lookatme> Hmm, I remember the bash on windows can run App of Ubuntu :) I think I can use terminal simulator under Linux

[07:27] <lookatme> It's difficult to write something portable :)

[07:31] <El_Che> perl 5 is pretty portable

[07:31] <El_Che> haven't used rakudo on windows yet

[07:31] <El_Che> (used on Linux and Mac)

[07:32] *** wamba joined
[07:33] <lookatme> Hmm, I am not using Perl5 :)

[07:33] *** domidumont joined
[07:33] <El_Che> I am just saying, it should be possible :)

[07:33] <lookatme> I almost give up Perl5 when I faced Perl 6

[07:34] <El_Che> I do not throw tools out of my toolsbox when I get a new tool

[07:34] <lookatme> Haha

[07:38] *** troys left
[07:38] <lookatme> I am not a web dev, and Perl6 is my main tools most of time

[07:38] <lookatme> And the shell

[07:46] *** domidumont left
[07:48] *** domidumont joined
[07:49] *** cerul joined
[07:51] *** imcsk8 left
[07:51] *** imcsk8 joined
[07:51] <El_Che> mst: Were you working on a relocatable rakudo? -> https://irclog.perlgeek.de/perl6/2017-07-14#i_14869380d

[07:59] *** abraxxa joined
[08:13] <Geth> Â¦ doc: ac6862567f | (Luca Ferrari)++ | doc/Type/Range.pod6

[08:13] <Geth> Â¦ doc: Declaration of Range.ACCEPTS.

[08:13] <Geth> Â¦ doc: 

[08:13] <Geth> Â¦ doc: See issue #1741.

[08:13] <Geth> Â¦ doc: 

[08:13] <synopsebot> Link: https://doc.perl6.org/type/Range

[08:13] <Geth> Â¦ doc: Definition from moar-2017-12.

[08:13] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/ac6862567f

[08:13] <Geth> Â¦ doc: d2de001f73 | (Luca Ferrari)++ | doc/Type/Range.pod6

[08:13] <Geth> Â¦ doc: Example of Range.ACCEPTS.

[08:13] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/d2de001f73

[08:14] <Geth> Â¦ doc: bd3aa27883 | (Luca Ferrari)++ | doc/Type/Range.pod6

[08:14] <Geth> Â¦ doc: Small reword about Range.ACCEPTS.

[08:14] <Geth> Â¦ doc: 

[08:14] <Geth> Â¦ doc: Close #1741

[08:14] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/bd3aa27883

[08:21] *** lowbro joined
[08:21] *** lowbro left
[08:21] *** lowbro joined
[08:21] *** player joined
[08:22] *** player left
[08:22] *** player joined
[08:23] <player> Hello, what's the difference between sub func(\a) { a  = 3 } and sub func($a is rw) { $a = 3 }? Both parameter declarations seem to allow modification of underlying argument.

[08:24] <moritz> player: basically the error mode if you call it with a non-variable

[08:24] <moritz> m: sub func(\a) { a  = 3 }; func(5)

[08:24] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«Cannot modify an immutable Int (5)â¤  in sub func at <tmp> line 1â¤  in block <unit> at <tmp> line 1â¤â¤Â»

[08:24] <moritz> m: sub func($a is rw) { $a  = 3 }; func(5)

[08:24] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«Parameter '$a' expected a writable container, but got Int valueâ¤  in sub func at <tmp> line 1â¤  in block <unit> at <tmp> line 1â¤â¤Â»

[08:25] <moritz> player: you'd use the (\a) form if you don't know if you're gonna write to it, or if you want to pass it to something else "raw"

[08:25] <moritz> player: and you use "is rw" if you know you want to modify it, and it's an error to pass in anything else

[08:26] *** domidumont left
[08:27] *** domidumont joined
[08:27] <lookatme> \a is `$a is raw`

[08:27] <AlexDaniel> yesterday I was talking about postmodern ways to do shell quoting. Here's an example from Julia: https://docs.julialang.org/en/release-0.4/manual/running-external-programs/

[08:30] <jast> hi guys, I was thinking of making a site with a concise and fair comparison of Perl 5 and Perl 6 (focusing more on actually comparing them than on all the fancy new things in Perl 6), what categories do you think should be covered?

[08:30] <player> moritz, Is  \a is `$a is raw` as lookatme mentioned?

[08:31] <lookatme> I think there some comparison about Perl 5 & 6 on the net

[08:32] <jast> most of them focus on *differences*

[08:32] <lookatme> https://docs.perl6.org/type/Signature#index-entry-trait__is_raw

[08:32] <lookatme> player, ^

[08:32] <jast> typically very much focused on concrete syntax and more of a migration guide than anything else

[08:33] <moritz> player: I don't know if the sigil in $a implies anything in some context that would make the two not quite equivalent

[08:33] * masak .oO( the dollar means "it'll cost ya" ) :P

[08:33] <moritz> jast: are you aware of the 5to6 docs at https://docs.perl6.org/language.html ?

[08:33] <moritz> jast: they might be a good inspiration

[08:34] <moritz> jast: though a 5to6 regex document seems to be missing

[08:34] <jast> yeah, 5to6 is exactly what I don't want to write up

[08:35] <jast> it's a porting/migration guide. I want to write something to help people decide which language to use and whether to stick with Perl 5 or check out Perl 6

[08:36] <moritz> jast: sure, but the topics covered there give you an idea what to include

[08:36] <jast> the goal is to have only trace amounts of actual syntax examples in it

[08:36] <jast> and look also at things like stability, pace of development, community etc.

[08:36] <moritz> ah, more of the meta topics

[08:37] <jast> I am already using various sources to pick language features to cover

[08:37] *** Nanjizal joined
[08:37] <moritz> language extensibility and evolvability are interesting then

[08:37] <jast> certainly

[08:37] <jast> but I was thinking of a drill-down kind of thing, starting out with the big picture stuff and adding on details further down the page

[08:37] <jast> s/^but //

[08:41] *** Sgeo left
[08:43] *** Sgeo joined
[08:48] *** mantovani joined
[08:48] *** sena_kun joined
[08:49] *** scimon joined
[08:49] <piojo1> AlexDaniel: it looks like Julia is using shell quoting without invoking the shell. That's okay, but it's not in the same spirit as shell()

[08:49] <piojo1> I don't see the point, if a language already has a more fully specified way to deal with commands (with an array of arguments). The whole point of our shell() function is to use the shell.

[08:50] <AlexDaniel> piojo1: well, that's a followup on run&Â«Â» discussion (we're doing shell-style quoting in Â«Â»)

[08:50] <AlexDaniel> see https://github.com/perl6/doc/issues/1745

[08:51] <AlexDaniel> so basically they have `run` that is not a PITA to use

[08:51] <AlexDaniel> which is awesome. I love it.

[08:51] <AlexDaniel> I didn't look at the details yet but I want to steal it. Maybe in a module first though.

[08:52] *** cerul left
[08:53] <piojo1> AlexDaniel: oh, I thought it was related to https://github.com/rakudo/rakudo/issues/1325

[08:54] <piojo1> anyway, it's good to keep in mind that shell() is broken. So maybe if you fix one thing, it would be easy to fix another in the same neighborhood? :)

[08:56] <AlexDaniel> well, if we had a Julia-like alternative then people would have less reasons to use shell :)

[08:56] <AlexDaniel> which in my view is a fix to the problem

[08:58] <jast> this is the kind of thing I had in mind (this is a work in progress, of course): https://imgur.com/JXerkc1

[09:02] <stmuk> my personal view is that comparision table of perl 5 and 6 are likely to spark complaints

[09:02] <stmuk> we would be better reaching out to the wider programming community than the perl 5 one (which isn't very large anymore anyway)

[09:03] *** cdg joined
[09:04] *** Cabanossi left
[09:05] *** dakkar joined
[09:05] *** klapperl left
[09:05] *** cdg_ joined
[09:05] <jast> well, as people have pointed out, there's a lot of confusion about the differences. the way to fix that is to give people an easy way to see what's different

[09:06] *** klapperl joined
[09:06] <stmuk> there is no perl 6 standard library anyway

[09:07] *** cxreg joined
[09:07] <jast> if I had no idea about either of the two languages and one person tells me, "Perl 5 is stable and Perl 6 is just this tiny hobby project thingy" and another person tells me, "Perl 6 is awesome and Perl 5 is as good as dead anyway", the only logical conclusion is that I need to take anything I read with a grain of salt or ten

[09:07] <stmuk> your target audience will just argue about the comparisions. you won't change any minds 

[09:07] <jast> so anything that is too salesy won't convince me

[09:08] *** Cabanossi joined
[09:08] *** astj left
[09:08] <jast> well, maybe it's not *called* a standard library, but there are various container types and I/O classes and such

[09:08] <stmuk> if I was evaluting two languages I'd spend a couple of evenings coding in each and make a decision based on that

[09:08] <jast> in many languages that kind of thing goes in the standard library :)

[09:08] *** astj joined
[09:08] <lookatme> Built-in class :)

[09:09] *** cdg__ joined
[09:09] *** cdg left
[09:09] <jast> that's what you might do if you're already strongly considering using one of the two

[09:10] *** nebuchadnezzar left
[09:10] *** nebuchadnezzar joined
[09:10] *** cdg_ left
[09:10] <jast> if your initial question is "should I check out Perl" and you know nothing about p5 and p6, what's going to help you decide?

[09:11] <stmuk> I'd try them both

[09:12] *** smash left
[09:12] *** smash joined
[09:12] <lookatme> I'd take a look at the Language tutorial :)

[09:13] <lookatme> off work :) bye

[09:13] <stmuk> I'd also probably look at the two websites

[09:13] *** lookatme left
[09:13] *** astj left
[09:13] *** cdg__ left
[09:14] <stmuk> I'd probably get annoyed there was no perl 5 download link on perl.com

[09:14] <stmuk> (If I didn't already know I needed .org)

[09:15] *** johnnymacs is now known as dorothyw

[09:15] <stmuk> I'd also get confused about perl6.org and rakudo.org

[09:15] <stmuk> (If I didn't know the history)

[09:17] *** dakkar left
[09:18] *** dakkar joined
[09:20] <scimon> is uniparse going to be in 6.d? It's documented but 2017.12 doesn't seem to have it. 

[09:20] *** astj joined
[09:22] *** wamba left
[09:24] *** zakharyas joined
[09:24] *** astj left
[09:31] <moritz> m: say 'BLANK'.uniparse

[09:31] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«Unrecognized character name [BLANK]â¤  in block <unit> at <tmp> line 1â¤â¤Â»

[09:31] <moritz> m: say 'SPACE'.uniparse

[09:31] <camelia> rakudo-moar 49dce163e: OUTPUT: Â« â¤Â»

[09:32] <moritz> m: say 'LATIN CAPITAL LETTER A, LATIN SMALL LETTER x'.uniparse

[09:32] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«Axâ¤Â»

[09:32] <moritz> scimon: seems to work

[09:32] <moritz> m: say uniparse('LATIN CAPITAL LETTER A, LATIN SMALL LETTER x')

[09:32] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«Axâ¤Â»

[09:32] <moritz> at least in newer rakudos :-)

[09:33] <scimon> Like I say I'm running the 2017.12 build. In that it's still called parse-names.

[09:40] <stmuk> inspired by "rustup" I'm wondering about "rakudup"

[09:40] <stmuk> https://github.com/stmuk/rakudup

[09:41] <DrForr> There's a really easy and crude joke I'm not going to go for there :)

[09:42] *** Nanjizal left
[09:42] <moritz> I'd just call it rakup

[09:43] <TEttinger> rup

[09:43] <stmuk> I thought that too close to plackup 

[09:44] *** dh7320 joined
[09:44] <stmuk> I already spent a few pound/dollar/euros on rakudup.com

[09:44] *** dh7320 left
[09:44] <TEttinger> you must have racked up a lot of change to be able to spend at will. you might say you're rakudup

[09:45] <stmuk> DrForr: I was thinking of some subversive marketing "use the language reddit hates" so crude jokes would be good

[09:46] <TEttinger> maybe they'll be crakudup by the jokes

[09:46] *** Nanjizal joined
[09:46] <stmuk> *groan*

[09:48] *** cdg joined
[09:50] *** gregf_ joined
[09:52] *** ChoHag joined
[09:52] *** cdg left
[09:52] *** cdg_ joined
[09:54] *** zakharyas1 joined
[09:54] *** zakharyas left
[09:56] *** zakharyas joined
[09:56] *** cdg joined
[09:57] *** cdg_ left
[09:59] *** zakharyas1 left
[10:00] *** cdg_ joined
[10:01] *** cdg left
[10:03] *** Actualeyes left
[10:03] *** cdg joined
[10:05] *** cdg_ left
[10:07] *** cdg_ joined
[10:09] *** cdg left
[10:10] *** dh7320 joined
[10:12] <tyil> TEttinger++

[10:13] *** cdg_ left
[10:22] *** wamba joined
[10:25] *** itaipu joined
[10:26] *** dh7320 left
[10:27] *** TEttinger left
[10:32] *** eliasr joined
[10:34] *** clarkema joined
[10:34] *** TimToady left
[10:36] *** TimToady joined
[10:41] *** benchable6 left
[10:41] *** bisectable6 left
[10:42] *** benchable6 joined
[10:42] *** ChanServ sets mode: +v benchable6

[10:42] *** bisectable6 joined
[10:42] *** coverable6 left
[10:42] *** coverable6 joined
[10:42] *** ChanServ sets mode: +v coverable6

[10:44] *** markong joined
[10:45] *** releasable6 left
[10:45] *** releasable6 joined
[10:45] *** ChanServ sets mode: +v releasable6

[11:00] <Geth> Â¦ doc: 4fbcebfabb | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Range.pod6

[11:00] <Geth> Â¦ doc: Fix typo

[11:00] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/4fbcebfabb

[11:00] <synopsebot> Link: https://doc.perl6.org/type/Range

[11:02] <buggable> New CPAN upload: Sparrowform-0.0.7.tar.gz by MELEZHIK https://cpan.metacpan.org/authors/id/M/ME/MELEZHIK/Perl6/Sparrowform-0.0.7.tar.gz

[11:02] *** AlexDaniel left
[11:03] *** domidumont left
[11:04] *** psch joined
[11:10] *** smash left
[11:12] <buggable> New CPAN upload: Sparrowform-0.0.8.tar.gz by MELEZHIK https://cpan.metacpan.org/authors/id/M/ME/MELEZHIK/Perl6/Sparrowform-0.0.8.tar.gz

[11:16] *** jeromelanteri left
[11:32] <buggable> New CPAN upload: Sparrowform-0.0.9.tar.gz by MELEZHIK https://cpan.metacpan.org/authors/id/M/ME/MELEZHIK/Perl6/Sparrowform-0.0.9.tar.gz

[11:37] *** cdg joined
[11:41] *** ChoHag left
[11:42] *** cdg left
[11:43] *** ChoHag joined
[11:50] *** jeromelanteri joined
[11:50] *** Zoffix joined
[11:51] <Zoffix> scimon: .uniparse was just added a few weeks ago during 6.d spec review, to replace the working-name of .parse-names that existed since around April 2017. .parse-names will continue to work until 6.e tho

[11:52] <scimon> Yeah. I got this it's just the docs for uniparse don't mention this. It'll be fine one 6.d is released though ;)

[11:53] *** cdg joined
[11:53] <scimon> Meanwhile I need to deal with my current issue. Looking at Perl5 code and not thinking "We could make this into a multi and it'd be so much simpler".... sigh.

[11:55] <Geth> Â¦ doc: ce51afdd46 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Str.pod6

[11:55] <Geth> Â¦ doc: Mention uniparse used to be parse-names

[11:55] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/ce51afdd46

[11:55] <synopsebot> Link: https://doc.perl6.org/type/Str

[11:56] <scimon> Zoffix++

[11:56] <Geth> Â¦ doc: 2c90eae281 | (Luca Ferrari)++ | doc/Type/Range.pod6

[11:56] <synopsebot> Link: https://doc.perl6.org/type/Range

[11:56] <Geth> Â¦ doc: Remove duplicate signature of Range.ACCEPTS.

[11:56] <Geth> Â¦ doc: 

[11:56] <Geth> Â¦ doc: Also move the method with Range as the second one.

[11:56] <Geth> Â¦ doc: 

[11:56] <Geth> Â¦ doc: See discussion here:

[11:56] <Geth> Â¦ doc: <https://github.com/perl6/doc/commit/ac6862567fd086ac053a18804327a68741fb042c#commitcomment-27068265>

[11:56] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/2c90eae281

[11:56] <Geth> Â¦ doc: d962ddebdc | (Luca Ferrari)++ | doc/Type/Range.pod6

[11:56] <Geth> Â¦ doc: Merge branch 'master' of github.com:perl6/doc

[11:56] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/d962ddebdc

[11:56] <Geth> Â¦ doc: c5b9686f62 | (Luca Ferrari)++ | doc/Type/Str.pod6

[11:56] <Geth> Â¦ doc: Merge branch 'master' of github.com:perl6/doc

[11:56] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/c5b9686f62

[11:57] <melezhik> Hi! probably have already asked this. How can I know time elapsed from the beginning of my program?

[11:57] *** cdg left
[11:57] *** rindolf left
[11:58] *** cdg joined
[11:58] <Zoffix> jast: I rather not see any "Perl 5 vs Perl 6" charts or anything else. Especially right now, with tensions being so high. The chart in the image could be argued quite a lot: that our spec isn't "complete" or that IO/IPC is supposedly better in Perl 6 (there's at least one Perl 5 module that offers more features than ours + Perl 5 probably has unix sockets)

[11:58] <Zoffix> melezhik: $*INIT-INSTANT

[11:58] <Zoffix> m: sleep 2; say $*INIT-INSTANT

[11:58] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«Instant:1516795150.475504â¤Â»

[11:58] <melezhik> Thanks Zoffix

[11:59] <Zoffix> melezhik: it used to be known as $*INITTIME on older rakudos (still seems to exists as backcompat fudge)

[11:59] <melezhik> ok, I will rely on the new one

[11:59] <Zoffix> c: 2015.12,HEAD say $*INITTIME // $*INIT-INSTANT

[11:59] <committable6> Zoffix, https://gist.github.com/4dbf0df95b31957b9412b5ecef3fb692

[12:00] <Zoffix> "Deprecated since v2017.09.84.gb.02.da.4.d.1.a, will be removed with release v2018.08!"

[12:00] <melezhik> Thank you

[12:02] *** cdg_ joined
[12:03] *** cdg left
[12:03] *** Zoffix left
[12:05] *** zakharyas left
[12:06] *** cdg joined
[12:07] *** telex left
[12:08] *** cdg_ left
[12:08] *** telex joined
[12:11] *** cdg left
[12:15] *** rindolf joined
[12:17] *** wamba left
[12:17] <melezhik> Actually, I still stuck, what sould I use ?  time -  $*INITTIME // $*INIT-INSTANT ?

[12:19] <lizmat> melezhik: Telemetry wallclock gives microseconds since start of program, perhaps that is what you need ?

[12:19] <melezhik> yes

[12:19] <lizmat> m: use Telemetry; say T<wallclock>

[12:19] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«194540â¤Â»

[12:20] <melezhik> is it core module?

[12:20] <lizmat> you have to -use- it, but it's in the compiler release, just like e.g. Test

[12:22] <melezhik> perl6 -e 'use Telemetry' throws "Could not find Telemetry "

[12:23] <lizmat> which version of rakudo are you using ?

[12:24] <melezhik> This is Rakudo version 2017.06 built on MoarVM version 2017.06

[12:24] <lizmat> I think it's since 2017.11 or 2017.12 ?

[12:24] <lizmat> ah, that explains  :-)

[12:24] <melezhik> ok

[12:24] <melezhik> can I work this around with " $*INITTIME" as Zoffix have suggested ?

[12:25] <lizmat> yeah, sure  :-)

[12:25] <melezhik> I thought I need to substruct  $*INITTIME from current time ...

[12:25] <melezhik> the only thing is how to know this current time?

[12:25] <lizmat> m: say time

[12:25] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«1516796747â¤Â»

[12:25] <lizmat> m: say now

[12:25] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«Instant:1516796794.404767â¤Â»

[12:26] <lizmat> I guess you want now

[12:26] <melezhik> yeah, this would be - "now - $*INITTIME"

[12:27] <melezhik> or  - "now - $*INITTIME//$*INIT-INSTANT"

[12:27] <melezhik> Thanks

[12:28] *** AlexDaniel joined
[12:30] <melezhik> my final version is "(now - $*INITTIME//$*INIT-INSTANT).Int"

[12:30] <melezhik> if I need seconds

[12:32] *** itaylor57 left
[12:36] *** reportable6 left
[12:37] *** reportable6 joined
[12:37] *** ChanServ sets mode: +v reportable6

[12:42] <buggable> New CPAN upload: Sparrowform-0.0.10.tar.gz by MELEZHIK https://cpan.metacpan.org/authors/id/M/ME/MELEZHIK/Perl6/Sparrowform-0.0.10.tar.gz

[12:50] <abraxxa> would make more sense to link to the metacpan page than the tarball

[12:50] <lizmat> abraxxa: agree

[12:50] <lizmat> I guess someone will need to make a PR for buggable  :-)

[12:50] <abraxxa> not sure if perl6 modules are displayed my metacpan already

[12:51] <lizmat> moduled.perl6.org link would work

[12:51] <lizmat> modules.perl6.org rather

[12:51] *** domidumont joined
[12:53] <sena_kun> lizmat++

[13:01] *** jeromelanteri left
[13:01] <Geth> Â¦ doc: afe7344bc8 | (Luca Ferrari)++ | doc/Type/Range.pod6

[13:01] <Geth> Â¦ doc: Spaces in code.

[13:01] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/afe7344bc8

[13:01] <Geth> Â¦ doc: 8c67a582c6 | (Luca Ferrari)++ | doc/Type/Range.pod6

[13:01] <Geth> Â¦ doc: Range.ACCEPTS examples: strings and Cool.

[13:01] <synopsebot> Link: https://doc.perl6.org/type/Range

[13:01] <Geth> Â¦ doc: 

[13:01] <Geth> Â¦ doc: See discussion here

[13:01] <Geth> Â¦ doc: <https://github.com/perl6/doc/commit/ac6862567fd086ac053a18804327a68741fb042c#commitcomment-27068265>

[13:02] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/8c67a582c6

[13:02] <Geth> Â¦ doc: 43d1b3d9e2 | (Luca Ferrari)++ | doc/Type/Range.pod6

[13:02] <Geth> Â¦ doc: Range.ACCEPTS: more examples.

[13:02] <Geth> Â¦ doc: 

[13:02] <Geth> Â¦ doc: Infinite ranges and comparison with Mu by cmp.

[13:02] <Geth> Â¦ doc: 

[13:02] <Geth> Â¦ doc: See discussion here:

[13:02] *** zakharyas joined
[13:02] <Geth> Â¦ doc: <https://github.com/perl6/doc/commit/ac6862567fd086ac053a18804327a68741fb042c#commitcomment-27068265>

[13:02] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/43d1b3d9e2

[13:12] <buggable> New CPAN upload: Net-IP-Lite-Perl6-1.0.1.tar.gz by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Net-IP-Lite-Perl6-1.0.1.tar.gz

[13:12] <buggable> New CPAN upload: Net-IP-Lite-Perl6-1.0.1.zip by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Net-IP-Lite-Perl6-1.0.1.zip

[13:12] <buggable> New CPAN upload: Net-IP-Perl6-1.0.0.tar.gz by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Net-IP-Perl6-1.0.0.tar.gz

[13:12] <buggable> New CPAN upload: Net-IP-Perl6-1.0.0.zip by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Net-IP-Perl6-1.0.0.zip

[13:34] <[Coke]> (p6 for slackbot) i will be in need of that shortly, and will have to write one if I can't find one.

[13:36] *** wamba joined
[13:42] <buggable> New CPAN upload: Sparrowform-0.0.11.tar.gz by MELEZHIK https://cpan.metacpan.org/authors/id/M/ME/MELEZHIK/Perl6/Sparrowform-0.0.11.tar.gz

[13:46] *** Nanjizal left
[13:53] <Kaffe> 

[13:54] <stmuk> [Coke]: BTW if you are interested in slack virtualsue has an existing "perl56" group which is small and friendly

[13:54] *** cdg joined
[13:56] *** smash joined
[13:56] *** curan left
[14:02] *** wamba left
[14:08] *** Nanjizal joined
[14:21] *** wamba joined
[14:22] <buggable> New CPAN upload: P5ref-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5ref-0.0.1.tar.gz

[14:22] <buggable> New CPAN upload: P5lcfirst-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5lcfirst-0.0.2.tar.gz

[14:22] *** ck joined
[14:23] *** ck is now known as Guest13339

[14:23] *** itaipu left
[14:24] *** ck joined
[14:24] *** ck is now known as Guest55775

[14:24] *** ckraniak left
[14:26] *** traxex left
[14:26] *** traxex joined
[14:27] *** Guest13339 left
[14:32] <buggable> New CPAN upload: P5ucfirst-0.0.2.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5ucfirst-0.0.2.tar.gz

[14:34] *** itaipu joined
[14:36] *** mempko joined
[14:36] <[Coke]> stmuk: you need to be invited to a slack, as far as I know.

[14:38] <stmuk> [Coke]: yeah if you message me your email I think she can add you

[14:42] *** lizmat left
[14:47] *** cdg left
[15:15] <titsuki> m: use newline; say $?LF;

[15:15] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«5===SORRY!5=== Error while compiling <tmp>â¤Variable '$?LF' is not declaredâ¤at <tmp>:1â¤------> 3use newline; say 7â5$?LF;â¤Â»

[15:15] <titsuki> Is this a bug?

[15:16] <titsuki> https://docs.perl6.org/language/pragmas says "Set the value of the $?LF constant in the scope it is called." in the newline section.

[15:18] *** domidumont1 joined
[15:20] *** pmurias joined
[15:21] *** domidumont left
[15:21] <moritz> m: use newline "\r"; say $?LF

[15:21] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«5===SORRY!5=== Error while compiling <tmp>â¤Error while importing from 'newline':â¤no EXPORT sub, but you provided positional argument in the 'use' statementâ¤at <tmp>:1â¤------> 3use newline "\r"7â5; say $?LFâ¤Â»

[15:21] <pmurias> isn't https://github.com/perl6/roast/commit/db78f0feeeb10c1 implementation dependent?

[15:22] *** ChoHag left
[15:22] <pmurias> checking that raising a Rat to a too large power throws seems to assume the implementation

[15:24] *** Zoffix joined
[15:24] *** wamba left
[15:25] <Zoffix> titsuki: looks like a bug yeah. I see in the sauce it exports the variable as `package EXPORT::lf   { BEGIN OUR::<$?NL> := "\x0A"     }`  not sure what that translates to vis-a-vis accessing it 

[15:26] <psch> 'use newline' seems NYI really

[15:26] <Zoffix> m: use newline :nl; dd "\n".encode: "ascii"

[15:26] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«5===SORRY!5=== Error while compiling <tmp>â¤Error while importing from 'newline': no such tag 'nl'â¤at <tmp>:1â¤------> 3use newline :nl7â5; dd "\n".encode: "ascii"â¤Â»

[15:26] <titsuki> Zoffix: psch: Thanks! I see.

[15:26] <Zoffix> m: use newline :lf; dd "\n".encode: "ascii"

[15:26] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«Blob[uint8].new(10)â¤Â»

[15:26] <Zoffix> m: use newline :cr; dd "\n".encode: "ascii"

[15:26] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«Blob[uint8].new(13)â¤Â»

[15:26] <psch> ah, no, i looked wrong

[15:26] <psch> Zoffix++

[15:26] <Zoffix> This part is implemented; I saw that tested in roast

[15:26] <psch> i didn't see it in the pragma code

[15:26] *** ZzZombo left
[15:26] *** ZzZombo joined
[15:27] <Zoffix> me neither :) It's actually a module; lib/newline.pm

[15:27] <psch> oh!

[15:27] <Zoffix> *pm6

[15:27] <psch> that explans that :)

[15:27] <psch> ah but it exports $?NL

[15:27] <psch> m: use newline :cf; say $?NL

[15:27] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«5===SORRY!5=== Error while compiling <tmp>â¤Error while importing from 'newline': no such tag 'cf'â¤at <tmp>:1â¤------> 3use newline :cf7â5; say $?NLâ¤Â»

[15:27] <psch> m: use newline :cr; say $?NL

[15:28] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«

[15:28] <Zoffix> oh doh

[15:28] <psch> makes more sense i think too, so a doc patch seems more appropriate

[15:29] <Geth> Â¦ doc: ca31921414 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/pragmas.pod6

[15:29] <Geth> Â¦ doc: newline exports $?NL, not $?LF

[15:29] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/ca31921414

[15:29] <synopsebot> Link: https://doc.perl6.org/language/pragmas

[15:29] <psch> Zoffix++

[15:30] <Geth> Â¦ doc: 787488d449 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/variables.pod6

[15:30] <synopsebot> Link: https://doc.perl6.org/language/variables

[15:30] <Geth> Â¦ doc: s/$?LF/$?NL/;

[15:30] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/787488d449

[15:30] <Zoffix> titsuki: so just a doc bug. The variable is called $?NL

[15:30] <titsuki> Zoffix: ok. I see.

[15:33] <titsuki> m: use newline :crlf; $?NL.perl.say; say "\n" ~~ "\r\n"

[15:33] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«"\r\n"â¤Trueâ¤Â»

[15:33] <titsuki> m: use newline :cr; $?NL.perl.say; say "\n" ~~ "\r\n"

[15:34] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«"\r"â¤Falseâ¤Â»

[15:34] *** MasterDuke left
[15:34] <titsuki> m: use newline :crlf; $?NL.perl.say; say "\n" eq "\r\n"

[15:34] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«"\r\n"â¤Trueâ¤Â»

[15:34] <titsuki> m: say "\n" eq "\r\n"

[15:34] <camelia> rakudo-moar 49dce163e: OUTPUT: Â«Falseâ¤Â»

[15:36] *** ChoHag joined
[15:41] *** astj joined
[15:42] <buggable> New CPAN upload: P5oct-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5oct-0.0.1.tar.gz

[15:43] *** pmurias left
[15:44] *** pmurias joined
[15:45] *** sjoshi joined
[15:46] *** astj left
[15:54] <mst> El_Che: I'd pondered but it's not anywhere near the top of the yak stack

[15:56] *** Zoffix left
[15:59] *** MasterDuke joined
[16:03] *** cdg joined
[16:09] *** sjn left
[16:11] *** sjn joined
[16:12] <buggable> New CPAN upload: P5hex-0.0.1.tar.gz by ELIZABETH https://cpan.metacpan.org/authors/id/E/EL/ELIZABETH/Perl6/P5hex-0.0.1.tar.gz

[16:13] <El_Che> mst: I see. Thx

[16:16] *** ZzZombo left
[16:24] *** sjoshi left
[16:27] *** rindolf left
[16:29] *** wamba joined
[16:31] *** Nanjizal left
[16:31] *** st_elmo joined
[16:32] *** rindolf joined
[16:33] *** Nanjizal joined
[16:34] *** wamba left
[16:38] *** sjoshi joined
[16:42] *** cdg_ joined
[16:44] *** khw joined
[16:45] *** cdg left
[16:47] *** cdg_ left
[16:55] *** itaipu left
[16:55] *** lowbro left
[16:59] *** itaipu joined
[16:59] <stmuk> https://www.reddit.com/r/perl/comments/7sogvy/brand_new_language_installer_for_language_that/

[17:01] <jkramer> I need to solve a numbers riddle so I made a script but it doesn't help at all. :( Does anyone see a pattern here that helps finding the missing number? http://dpaste.com/1V8B2JX

[17:04] <AlexDaniel>  mkdir ${RAKUDO_ROOT}

[17:04] <AlexDaniel> (â¯Â°â¡Â°ï¼â¯ï¸µ â»ââ»

[17:04] <AlexDaniel> no quotes, but of course let's put {}

[17:05] <stmuk> PR welcome .. a good number are quoted

[17:06] <stmuk> what sort of idiot would expect spaces in directories to work on UNIX anyway

[17:07] *** cdg joined
[17:07] *** cdg left
[17:07] *** cdg joined
[17:09] <AlexDaniel> well, perhaps I'm an idiot, but I expect spaces to work just fine in *any* well-written program

[17:10] *** kolikov joined
[17:10] <AlexDaniel> but it's not just spaces, it's also stuff starting with -

[17:11] *** lizmat joined
[17:12] <tyil> after having spend quite some time with posix sh, I can say that things starting with -, or spaces inside strings have scared me to quote everything I can think of, and add an additional -- argument to almost everything

[17:13] <AlexDaniel> that's the right way to write stuff, yea

[17:13] <tyil> quotes are pretty much always safe to add

[17:14] <AlexDaniel> yes

[17:15] <AlexDaniel> something like this maybe https://github.com/stmuk/rakudup/pull/2

[17:15] * AlexDaniel haven't reviewed it yet actually

[17:16] <tyil> I generally keep the { } with vars because I prefer reading it like that, but they're indeed not needed

[17:16] <tyil> I'd keep the [ ] for tests instead of [[ ]], but also change bash to sh

[17:17] <AlexDaniel> well my logic is that it claims to be bash, then why not use all of the bash features

[17:17] <tyil> ah, they're mixed in the original version

[17:18] <tyil> but I'd still go for [ ] everywhere because I prefer posix sh over bash

[17:18] <AlexDaniel> to be honest I don't know the pitfalls of [ ]

[17:18] <tyil> just add more quotes and you're good

[17:18] <tyil> and use = instead of ==

[17:18] <AlexDaniel> well, but how would you do stuff like âif [[ $DEBUG ]]; thenâ ?

[17:19] <tyil> if [ "$DEBUG" ]; then, or as I'd probably write it, [ "$DEBUG" ] && do_whatever

[17:19] *** troys joined
[17:20] *** dh7320 joined
[17:20] *** clarkema left
[17:20] <tyil> https://github.com/Tyil/dotfiles/blob/master/shell/rc/zshrc#L4 like that, though I seem to even use it unquoted there

[17:20] <AlexDaniel> what about the [ "x$foo" = "x" ] kind of stuff?

[17:20] <tyil> why would I want to use that

[17:20] <tyil> use -n

[17:21] <AlexDaniel> I guess you are right

[17:21] <El_Che> stmuk: rakudo up?

[17:21] <AlexDaniel> and the trick is no longer relevant

[17:21] <El_Che> a wrapper for rakudo star?

[17:22] <tyil> there's a list of all the checks in the posix shell language spec

[17:22] <tyil> same for the param expansion

[17:25] <scimon> Whipped a little something up that I'll hopefully have a use for in work.

[17:25] <scimon> Should appear here soon. Meanwhile I'm heading home.

[17:26] <El_Che> scimon: in my case, the code that have in production it tied to an older rakudo release as it does not longer work with today's rakudo :)

[17:26] <El_Che> it's self contained and it works fine :)

[17:26] <scimon> Oh dear.

[17:26] <El_Che> I haven't bothered "porting"" it because it will be off circulation in some moths

[17:27] <El_Che> it was a service that was required during a cert authority transition

[17:27] <El_Che> by then all certs should have been migrated to a new root

[17:28] *** scimon left
[17:30] *** wamba joined
[17:30] *** nebuchadnezzar left
[17:31] <AlexDaniel> tyil: oh yea, that's another thing. In [[ ]] you can get away with not quoting the lhs

[17:31] <tyil> just apply more quotes :p

[17:31] <AlexDaniel> but you didn't :P

[17:31] *** dh7320 left
[17:31] <tyil> in the script I linked?

[17:32] <buggable> New CPAN upload: Algorithm-GooglePolylineEncoding-0.0.1.tar.gz by SCIMON https://cpan.metacpan.org/authors/id/S/SC/SCIMON/Perl6/Algorithm-GooglePolylineEncoding-0.0.1.tar.gz

[17:32] <AlexDaniel> yea

[17:34] <AlexDaniel> âbut it's not just spaces, it's also stuff starting with -â

[17:34] <AlexDaniel> â but also globs and the like

[17:36] *** dakkar left
[17:41] *** zakharyas1 joined
[17:41] *** zakharyas left
[17:43] *** evalable6 left
[17:43] *** evalable6 joined
[17:44] *** lizmat left
[17:49] *** lizmat joined
[17:51] *** Guest18 joined
[17:52] *** teatime joined
[17:53] *** teatime is now known as Guest22031

[18:00] *** zakharyas1 left
[18:02] *** player left
[18:04] *** agwind joined
[18:07] *** lizmat left
[18:11] <Geth> Â¦ doc: 8a0702aa2e | (JJ Merelo)++ | doc/Type/Routine.pod6

[18:11] <Geth> Â¦ doc: Changed to a non-trivial example

[18:11] <Geth> Â¦ doc: 

[18:11] <Geth> Â¦ doc: Still the benefits are not so clear, because it's not in a

[18:11] <Geth> Â¦ doc: multithreaded environment or any other where you can really see the

[18:11] <synopsebot> Link: https://doc.perl6.org/type/Routine

[18:11] <Geth> Â¦ doc: advantages of computing without side effects. When `==>` is eventually

[18:11] <Geth> Â¦ doc: parallelized; I guess we could see an actual improvement.

[18:11] <Geth> Â¦ doc: 

[18:11] <Geth> Â¦ doc: <â¦commit message has 8 more linesâ¦>

[18:11] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/8a0702aa2e

[18:16] <Geth> Â¦ doc: 94f6dc7d17 | (Luca Ferrari)++ | doc/Type/Range.pod6

[18:16] <Geth> Â¦ doc: Add a few examples in Range.ACCEPTS.

[18:16] <Geth> Â¦ doc: 

[18:16] <Geth> Â¦ doc: Show also open ranges along with infinite ranges.

[18:16] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/94f6dc7d17

[18:16] <synopsebot> Link: https://doc.perl6.org/type/Range

[18:16] <Geth> Â¦ doc: 7195c600e5 | (Luca Ferrari)++ | doc/Type/Range.pod6

[18:16] <Geth> Â¦ doc: Small reword about Range.ACCPETS( Mu ).

[18:16] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/7195c600e5

[18:16] <Geth> Â¦ doc: 3a3dabb16b | (Luca Ferrari)++ | doc/Type/Routine.pod6

[18:16] <Geth> Â¦ doc: Merge branch 'master' of github.com:perl6/doc

[18:16] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/3a3dabb16b

[18:18] *** lizmat joined
[18:20] *** Nanjizal left
[18:23] *** domidumont1 left
[18:30] *** nebuchadnezzar joined
[18:30] *** lizmat left
[18:33] *** kolikov left
[18:36] *** domidumont joined
[18:37] *** travis-ci joined
[18:37] <travis-ci> Doc build failed. JJ Merelo 'Changed to a non-trivial example

[18:37] <travis-ci> https://travis-ci.org/perl6/doc/builds/332911091 https://github.com/perl6/doc/compare/787488d449f8...8a0702aa2e4f

[18:37] *** travis-ci left
[18:37] <buggable> [travis build above] â  Did not recognize some failures. Check results manually.

[18:40] <Geth> Â¦ doc: 7a47fb3ae4 | (JJ Merelo)++ | doc/Type/Routine.pod6

[18:40] <Geth> Â¦ doc: Apparently does not like tabs

[18:40] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/7a47fb3ae4

[18:40] <Geth> Â¦ doc: 890bfa1926 | (JJ Merelo)++ | doc/Type/Range.pod6

[18:40] <Geth> Â¦ doc: Merge branch 'master' of github.com:perl6/doc

[18:40] <synopsebot> Link: https://doc.perl6.org/type/Routine

[18:40] <Geth> Â¦ doc: review: https://github.com/perl6/doc/commit/890bfa1926

[18:40] <synopsebot> Link: https://doc.perl6.org/type/Range

[18:43] *** setty1 joined
[18:50] *** travis-ci joined
[18:50] <travis-ci> Doc build failed. Luca Ferrari 'Merge branch 'master' of github.com:perl6/doc'

[18:50] <travis-ci> https://travis-ci.org/perl6/doc/builds/332912796 https://github.com/perl6/doc/compare/8a0702aa2e4f...3a3dabb16b66

[18:50] *** travis-ci left
[18:50] <buggable> [travis build above] â  Did not recognize some failures. Check results manually.

[18:51] *** sjoshi left
[19:05] <AlexDaniel> can somebody try `zef install CSS::Module`?

[19:05] *** darutoko left
[19:06] *** travis-ci joined
[19:06] <travis-ci> Doc build passed. JJ Merelo 'Merge branch 'master' of github.com:perl6/doc'

[19:06] <travis-ci> https://travis-ci.org/perl6/doc/builds/332922682 https://github.com/perl6/doc/compare/3a3dabb16b66...890bfa192679

[19:06] *** travis-ci left
[19:09] *** travis-ci joined
[19:09] <travis-ci> Doc build passed. JJ Merelo 'Merge branch 'master' of github.com:perl6/doc'

[19:09] <travis-ci> https://travis-ci.org/perl6/doc/builds/332922682 https://github.com/perl6/doc/compare/3a3dabb16b66...890bfa192679

[19:09] *** travis-ci left
[19:13] *** lizmat joined
[19:20] *** comborico1611 joined
[19:21] *** ufobat___ left
[19:24] *** lizmat left
[19:27] <comborico1611> Any Emacs users around?

[19:28] <AlexDaniel> yes

[19:29] <comborico1611> I can't seem to get  M-C-b to work.  It works every so often, but then "hangs up" at a spot and gives an error message about scan

[19:32] *** lizmat joined
[19:33] <comborico1611> I disabled that 3rd level alt-right thing, already.

[19:35] <AlexDaniel> in which mode?

[19:36] <comborico1611> html

[19:36] *** quotable6 left
[19:36] *** quotable6 joined
[19:36] <AlexDaniel> works fine here

[19:37] <AlexDaniel> try #emacs maybe? (or whatever the channel is)

[19:37] <comborico1611> If I start in the middle of a word, I get the error

[19:37] <comborico1611> If I start a beginning or end, it works.

[19:38] <comborico1611> The error is "Scan error: 'Containing expression ends prematurely", 157, 157

[19:38] <comborico1611> Alright.  Thanks!

[19:39] <comborico1611> What does it mean if I can't join the channel?  you need to be identified with services"

[19:39] <comborico1611> Register my nickname or something?

[19:40] <psch> comborico1611: /msg nickserv help

[19:42] <comborico1611> psch: Thanks!

[19:47] *** lizmat left
[19:49] <psch> comborico1611: no problem, i don't know emacs but i have used freenode services once or twice.. :)

[19:51] <comborico1611> Heh.

[19:57] *** astj joined
[19:59] *** GregDonald left
[19:59] *** lizmat joined
[20:02] *** astj left
[20:05] *** st_elmo left
[20:06] <comborico1611> AlexDaniel: Found the "answer": If you get a scan error it is because you are in a position where Emacs cannot determine how to carry out what you are trying to do.

[20:06] *** troys is now known as troys_

[20:11] *** lizmat left
[20:12] *** zakharyas joined
[20:12] *** lizmat joined
[20:12] <AlexDaniel> stmuk: I don't want to sound rude or something, but the last commit didn't fix shit

[20:12] <AlexDaniel> like

[20:12] <AlexDaniel>  +    echo "${ADDPATH}" >> $HOME/.profile 

[20:12] <AlexDaniel> still not enough quotes

[20:13] *** mempko left
[20:13] <AlexDaniel> but given that you're not interested in making it right I guess I shouldn't care as much as I do :)

[20:13] *** comborico1611 left
[20:13] *** cono joined
[20:13] <cono> hello all

[20:13] * AlexDaniel clickbaits https://mywiki.wooledge.org/BashPitfalls

[20:14] <cono> is there any way to make this more elegant? :) https://glot.io/snippets/exo3p18bgx

[20:14] <cono> the idea is to drop clients if they are not sending anything for 4 seconds

[20:15] *** zakharyas left
[20:15] <AlexDaniel> cono: what about: whenever Promise.in(4) { â¦ }

[20:15] <AlexDaniel> cono: so it will be âwhenever { whenever { â¦ } }â which is fine

[20:15] *** zakharyas joined
[20:15] *** Nanjizal joined
[20:16] <cono> but how to drop previous promise if user sent something ?

[20:16] <cono> user => clinet

[20:17] <AlexDaniel> just call done() ?

[20:17] <AlexDaniel> you already do, hmmâ¦

[20:17] <stmuk> AlexDaniel: I suspect anyone with space in their home directory will have greater issues than my crummy script working :)

[20:18] <stmuk> while [ 1 ]; do ./rakudup; sleep 600; done

[20:18] <cono> AlexDaniel: your proposition drops client after first message + 4 seconds, and it doesn't matter if client continue to send something

[20:18] <stmuk> the output doesn't change .. just says "2017.12" :P

[20:18] <AlexDaniel> stmuk: so instead of fixing the code you say âlet's hope it worksâ. It probably will, most of the time, but with that attitude there's no need to fix anything really

[20:19] <stmuk> its fixed now anyway

[20:21] <AlexDaniel> stmuk: cool, then also `git -C "${TMP}"`, `grep .rakudup "${HOME}/.profile", and -- everywhereâ¦ Sorry :)

[20:21] <AlexDaniel> I mean, all that was in the pull request

[20:21] <stmuk> I don't care about the dash in directory problem sorry

[20:23] *** sena_kun left
[20:26] *** lizmat left
[20:27] <AlexDaniel> cono: good question actually

[20:28] <jnthn> cono: I'd probably just have a timestamp that I update per message, and then a whenever Supply.interval(1) { ...check time stamp... }

[20:28] <jnthn> Or replace 1 with the margin of error that's acceptable

[20:29] <jnthn> The Promise.in approach isn't really safe

[20:30] <jnthn> Should be whenever Promise.in(4) { ...code from the then block here... }

[20:30] <jnthn> (I mean, Promise.in is fine, but the .then is less so)

[20:31] <jnthn> The other way, though

[20:31] <jnthn> Is to know that whenever returns a tap object

[20:32] <jnthn> You can call .close on that to cancel the previous timeout

[20:32] <jnthn> And keep a "current active timeout tap" variable

[20:32] <jnthn> But gets you your 4 seconds spot-on

[20:32] *** cdg_ joined
[20:32] * jnthn afk for a bit

[20:33] *** comborico1611 joined
[20:35] *** ChoHag left
[20:36] *** jjore joined
[20:36] *** cdg left
[20:37] *** cdg_ left
[20:42] <stmuk> damm The Orville has finished 

[20:43] <[Coke]> hoping they replay season one on the leadup to season 2 so I can catchup

[20:44] <timotimo> why not use .stable on the supply of values from the client i wonder

[20:44] <timotimo> oh, because that will accept the same message twice in a row as "no second message sent"

[20:47] *** rindolf left
[20:50] *** comborico1611 left
[20:52] *** ChoHag joined
[20:52] *** rindolf joined
[21:02] *** Kaiepi left
[21:02] *** Kaiepi joined
[21:08] *** troys_ is now known as troys

[21:09] *** GregDonald joined
[21:49] *** cdg joined
[21:54] *** MasterDuke_ joined
[21:55] *** andrzejku joined
[21:56] *** MasterDuke left
[21:59] *** roguelazer joined
[22:00] *** andrzejku left
[22:05] *** MasterDuke_ is now known as MasterDuke

[22:16] *** dh7320 joined
[22:20] *** cdg_ joined
[22:20] *** cdg_ left
[22:20] *** cdg_ joined
[22:21] *** cdg left
[22:22] *** squashable6 left
[22:22] *** unicodable6 left
[22:22] *** committable6 left
[22:22] *** bloatable6 left
[22:22] *** squashable6 joined
[22:22] *** unicodable6 joined
[22:22] *** committable6 joined
[22:22] *** bloatable6 joined
[22:24] *** espadrine joined
[22:32] *** zakharyas left
[22:43] *** dh7320 left
[22:47] *** Nanjizal left
[22:54] *** Guest18 left
[22:55] *** troys is now known as troys_

[23:00] *** cdg_ left
[23:00] *** cdg joined
[23:05] *** cdg left
[23:07] *** domidumont left
[23:08] *** TEttinger joined
[23:08] *** domidumont joined
[23:09] *** greppable6 left
[23:09] *** rindolf left
[23:10] *** greppable6 joined
[23:13] *** pmurias left
[23:18] *** trnh joined
[23:21] *** comborico1611 joined
[23:27] <cono> jnthn: when I'm trying to assign whenever to a variable it gives me an error: ------>         my $tap = whenever Promise.in(4)â {

[23:28] *** GregDonald left
[23:28] <jnthn> do whenever

[23:28] *** lizmat joined
[23:28] <jnthn> whenever is like for (statement, not expression), so needs `do`

[23:29] <cono> yeah, made a trick :) But looks like close doesn't work on returned tap object

[23:30] <cono> https://glot.io/snippets/exo94k1tgi

[23:33] <jnthn> Odd, it looks about right. What's the error?

[23:33] <cono> with interval works perfect :) The only thing I'm worry about is internal variable which counts how many times interval happend, don't want it to overflow

[23:33] <cono> jnthn: no error, its just timeouting even if I'm typing in the telnet

[23:33] <jnthn> Oh!

[23:33] <jnthn> You need also to do `done` after $conn.close perhas

[23:33] <jnthn> *perhaps

[23:34] <jnthn> Also you can put the duplicate logic in a sub and call it :)

[23:36] *** GregDonald joined
[23:36] <jnthn> Overflow - pretty sure it's a bigint, but if it isn't it's a 64-bit int, and if you triggered it every millisecond that's 292 million years, and I don't think you'll care then.

[23:36] <cono> done stopping my program totally and do not resolve problem with continous typing

[23:37] <jnthn> oh, duh, done isn't right at all, sorry :)

[23:37] <cono> https://glot.io/snippets/exo9bqvwr6

[23:38] <jnthn> Does it actually print TIMEOUT?

[23:38] <cono> previously I was trying to store promise and cancel it, but it gave me eexception about vowed object all the time

[23:38] <cono> yes

[23:40] <jnthn> Hm

[23:40] <cono> btw, what whenever does, is it something like setting .act/then on a Promise ?

[23:40] *** ChoHag left
[23:40] *** setty1 left
[23:41] <cono> this actually works perfect :) https://glot.io/snippets/exo9fghfdf

[23:41] <jnthn> whenever on a promise will call .Supply on it

[23:41] <jnthn> And it acts like a one-value Supply

[23:42] <cono> but what happens with Supply?

[23:42] <cono> is it tap-in on it?

[23:42] <jnthn> It taps it, yes. It then enforces one message at a time concurrency control across all the whenevers in the react/supply block

[23:43] <jnthn> Meaning that any state that you declare inside of there is safe provided you do all your message processing with whenever

[23:43] <cono> ah, now I'm starting to understand :)

[23:43] <jnthn> Further, it keeps track of the active taps

[23:43] <jnthn> So that if there's an exception or a `done` then it will close all open taps, to prevent resource leaks

[23:43] <cono> so I can create supply and whenever it couple of times?

[23:43] <jnthn> Yes

[23:43] <cono> cool

[23:44] <jnthn> You can even write subs inside of your react/supply block with a whenever inside of them

[23:44] <jnthn> And call those

[23:44] <jnthn> To further factor things out

[23:44] <cono> so all nested whenevers will tie to the outer react block?

[23:44] <jnthn> Yes

[23:44] <cono> double cool :D

[23:45] <cono> jnthn++ thanks! now much clear :)

[23:45] <jnthn> Welcome :)

[23:45] <cono> as for the role Tappable, is only source code I can read to understand it? Couldn't find any documentation

[23:46] *** wamba left
[23:46] <jnthn> Yeah, that's to Supply what Iterator is to Seq

[23:47] <jnthn> I considered it sorta implementation detail so far, though I think it's stable enough by now to test/document and consider part of the language

[23:47] <jnthn> It's relatively rare that you'd implement Tappable directly

[23:48] <jnthn> Much like it's relatively rare to implement the Iterator role directly

[23:49] <cono> so if I want to implement wrapper around supply it would be better to inherit from Supply and override .tap?

[23:50] <cono> as I'm currently thinking about AsyncReadTimeout class, which going to emit line or Nil in case timeout happend

[23:50] <cono> especially with all of these nested whenever magic, I think it would be really easy to make :)

[23:51] <jnthn> I'd just write a sub with a supply block in it

[23:52] <cono> class { method lines { supply { ... MAGIC ... }}} kinda like this?

[23:52] <jnthn> sub timeout(Supply $in, $timeout) { supply { my $last = now; whenever $in { $last = now; emit $_ }; whenever Supply.interval(0.1) { if now - $last > $timeout { die "Timed out" } } } }

[23:52] <jnthn> Roughly, untested :)

[23:52] <cono> wow, nice, thanks! :)

[23:53] <jnthn> We use supply { ... } to write a bunch of the built-in methods on Supply, fwiw :)

[23:53] <cono> and what about die in this code?

[23:53] <cono> ah, looks like I understan

[23:53] <cono> CATCH { $conn.print("TIMEOUT\n"); $conn.close }

[23:53] <jnthn> That will end the stream

[23:53] <jnthn> QUIT rather than CATCH, because it's an async exception

[23:54] <cono> ah, ic

[23:54] <jnthn> Oh, and you need to match on the exception

[23:54] *** comborico1611 left
[23:54] <jnthn> If you want this to be robust, I'd suggest creating a X::ReadTimeout exception or something

[23:54] <jnthn> So that you can when X::ReadTimeout { $con.print("TIMEOUT\n"); $conn.close }

[23:55] <jnthn> So you won't presume very possible error is a timeout

[23:55] <cono> cool :) sooo awesome :)

[23:55] <cono> thanks!

[23:55] <jnthn> supply blocks make writing all kinds of async combinators a decent bit less of a headache, yeah :-)

[23:55] <jnthn> np :)

[23:56] <jnthn> Time for me to go rest; night o/

[23:56] <cono> good night!

[23:59] *** markong left
