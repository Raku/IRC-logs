[00:00] <timotimo> it's running a subprocess at the time it's slow?

[00:00] <Zoffix> No idea

[00:00] <Zoffix> Ah, the test. Yeah

[00:00] *** lizmat joined
[00:00] *** p6bannerbot sets mode: +v lizmat

[00:00] <timotimo> and using perl6-gdb-m doesn't work because     # expected: '97 98 99 100

[00:00] <timotimo>     # '

[00:00] <Zoffix> timotimo: specifically, it looks like it's the $proc.in.close line where it takes ages

[00:00] <timotimo>     #      got: '================================================================================================

[00:00] <timotimo>     # This is Rakudo Perl 6 running in the GNU debugger, which often allows the user to generate useful back-

[00:00] <timotimo> that sounds a lot like i actually want to look at the invoked subprocess instead

[00:01] <Zoffix> This one: https://github.com/perl6/roast/blob/master/S32-io/io-cathandle.t#L888

[00:03] * Zoffix AFK for ~20m

[00:04] *** lizmat left
[00:09] *** cognominal-p6 left
[00:09] <rouking> Is there any reason the normal range operator doesn't go in reverse? 

[00:09] <timotimo> yes, ranges are not ordered

[00:09] <timotimo> what you want is a sequence

[00:10] <rouking> Ah. It just seems odd to use a different operator for what seems like a similar purpose on the surface

[00:11] <timotimo> yeah, Range is defined to have a min and a max; if the max is less than the min, it's a degenerate range, which we consider to be empty

[00:11] <timotimo> kind of like a triangle where the third point is on the line between the first two, or a line where both points are the same

[00:12] <rouking> Would iterating over b...a be optimized in the same way as a..b? That is, jitted if a and b can be stored in native ints?

[00:13] <timotimo> we've recently got a few optimizations for sequences in for loops

[00:13] <rouking> I've been following jnthn's blogs and found that optimization pretty exciting

[00:15] <timotimo> https://github.com/rakudo/rakudo/commits/master/src/Perl6/Optimizer.nqp - especially "Make 1...10 and 10...1 about 75x as fast"

[00:23] <timotimo> zoffix, i've put in timed prints for both the host and "guest" programs and i see $p.in.close taking about 18 seconds

[00:24] *** ryn1x joined
[00:24] *** p6bannerbot sets mode: +v ryn1x

[00:26] <Zoffix> timotimo: yeah, weird

[00:26] <timotimo> $p.in.close, does that return the Proc?

[00:26] <Zoffix> oh shit yeah

[00:26] <timotimo> i see it's in proc.pm "sink" -> "wait-for-finish"

[00:27] <timotimo> OK, that gets me to "closed in pipe" and then it waits for $p.out.slurp

[00:28] <timotimo> you can also check --stagestats of both versions for a bit of extra fun

[00:29] <timotimo> OK, so the host is convinced it has already sent "ab" and "cd" and closed the pipe, but the guest says the second .read finished only ~19 seconds after the first one

[00:29] <timotimo> time to strace i guess

[00:30] <Zoffix> s/oh shit//; # actually that shouldn't be a problematic use, I don't think. In any case, not sinking that Proc don't fix the hang for me :/

[00:31] <timotimo> yeah, it only moves it forward

[00:32] <timotimo> ugh, typical. strace it and the issue goes away

[00:32] <Zoffix> :}

[00:41] <timotimo> perf trace, which has lower overhead, also makes it not b0rk

[00:42] <Zoffix> .tell samcv reminder about https://github.com/perl6/roast/issues/477  We're like 7 days away from wanting to have more or less finalized 6.d roast

[00:42] <yoleaux> Zoffix: I'll pass your message to samcv.

[00:42] <timotimo> now it also doesn't b0rk any more without any tools attached at all

[00:43] <Zoffix> :(

[00:43] *** jbotz left
[00:43] <timotimo> silly me forgot to remove the precomp files in between doing stuff

[00:44] *** Actualeyes joined
[00:45] *** p6bannerbot sets mode: +v Actualeyes

[00:46] <timotimo> but deleting the precomp files and running it again with strace gives me no helpful information

[00:47] <timotimo> perf trace doesn't output filenames and strings and such, so it's not quite as helpful to read as strace's output

[00:53] <timotimo> it doesn't make sense to me that turning off the optimization for unbox_n or the other one would make this bug go away

[00:56] <timotimo> Zoffix: i copied out my bash history and the changes to the test file, i'll shutdown the VM and go to bed :\

[00:56] <timotimo> sorry i couldn't be of much use

[00:56] <Zoffix> timotimo: OK. Thanks for trying :)

[00:56] <timotimo> YW

[00:57] <timotimo> i hope it isn't just some random side-effect of IPC just being crappy in general

[00:57] <timotimo> system is going down

[01:20] *** Guest13389 left
[01:20] *** ToddAndMargo joined
[01:20] *** p6bannerbot sets mode: +v ToddAndMargo

[01:21] <ToddAndMargo> I seem to have forgott how to use stdout and stderr.  Why does this work?  It should not be reading anything in the stderr.

[01:21] <ToddAndMargo> $ echo "123" 2>&1 | p6 'my Str $x = slurp( :stderr, enc => "utf8-c8" ); say $x' 123

[01:23] <Zoffix> ToddAndMargo: that command reads from STDOUT

[01:24] <Zoffix> ToddAndMargo: there's no `:stderr` argument

[01:24] <ToddAndMargo> What is STD ERR?

[01:24] <Zoffix> ToddAndMargo: by default it's in $*ERR handle.

[01:25] <Zoffix> ToddAndMargo: $*ERR.encoding: 'utf8-c8'; my Str $x = $*ERR.slurp

[01:26] <ToddAndMargo> $ echo "123" 1>&2 | p6 'my Str $x = $*ERR.slurp( enc => "utf8-c8" ); say $x' 123

[01:26] <ToddAndMargo> but it does not terminate. I have to ^c it

[01:27] <Zoffix> ToddAndMargo: yeah, it's waiting for you to close STDERR

[01:27] <Zoffix> ToddAndMargo: also that `enc` argument is ignored. See what I wrote. You need to use .encoding method

[01:28] <Zoffix> Oh sorry

[01:28] <Zoffix> ToddAndMargo: I got confused. You can only read from $*IN. The $*OUT and $*ERR handles are output handles.

[01:30] <Zoffix> crap "MoarVM op 'asyncsocket' is unknown as a core or extension op"

[01:31] <ToddAndMargo> I am trying to replace the depreciated `$ReturnErr = $$proc.err.slurp-rest` with slurp

[01:31] <Zoffix> ToddAndMargo: OK

[01:31] <Zoffix> ToddAndMargo: It'd be $proc.err.slurp

[01:31] <Zoffix> Just remove the `-rest` part

[01:32] <Zoffix> Is that all the code or are there some args in it?

[01:32] <ToddAndMargo> where do I put the "utf8-c8"?

[01:32] <Zoffix> ToddAndMargo: what's $proc? Proc?

[01:32] *** Guest13389 joined
[01:33] <ToddAndMargo> $proc      = run( @RunArray, :err, :out );

[01:33] *** p6bannerbot sets mode: +v Guest13389

[01:34] <Zoffix> ToddAndMargo: you can change it to $proc      = run( @RunArray, :err, :out, :enc<utf8-c8> );

[01:34] <Zoffix> If you want to only affect .err pipe, then you need to call `$proc.err.encoding: 'utf-c8'; $ReturnErr = $$proc.err.slurp`

[01:35] <ToddAndMargo> testing

[01:36] <ToddAndMargo> Worked!  Thank you!  I was reading a web site through my curl interface module that gave a utf-8 error.

[01:39] <ToddAndMargo> why the double $$ before proc?

[01:39] <Zoffix> ToddAndMargo: I just copy-pasted your code. It's not needed there

[01:43] *** ryn1x left
[01:43] <ToddAndMargo> May I presume it can use `$proc.out.encoding: 'utf-c8' and `$proc.err.encoding: 'utf-c8' before reading anything fromteh STDOUT or STDERR?

[01:44] <Zoffix> Yes, but if you want all pipes with same encodings may as well pass `:enc` to `&run` routine

[01:45] *** Sgeo__ joined
[01:45] *** Sgeo_ left
[01:45] <ToddAndMargo> I am just writing everything down you said

[01:45] *** p6bannerbot sets mode: +v Sgeo__

[01:48] *** sunnavy left
[01:49] <ToddAndMargo> Foul!   https://docs.perl6.org/language/unicode#UTF8-C8.   Example: `say slurp($test-file, enc => 'utf8-c8');`   I thought you said the enc was ignored ???

[01:50] <ToddAndMargo> I sure looked like it was ignored!

[01:50] <Zoffix> ToddAndMargo: that example uses Str as $test-file, you were using $*ARGFILES

[01:50] <ToddAndMargo> It

[01:51] <Zoffix> As in, an already-opened filehandle

[01:51] <ToddAndMargo> So if I use `$proc` instead of a file name, enc is ignored?

[01:52] <Zoffix> You can't use proc with &slurp

[01:52] <Zoffix> But yeah, IO::Handle.slurp/IO::Pipe.slurp don't do any encoding (neither are other read methods on handles). You control encoding through open method or .encoding method

[01:52] <ToddAndMargo> what is `$ReturnErr = $proc.err.slurp;` which works?

[01:53] <Zoffix> ToddAndMargo: $proc is Proc object, it's .err method returns IO::Pipe object, and calling .slurp on it, which doesn't take an :enc argument

[01:53] <Zoffix> (IO::Pipe is a subclass of IO::Handle)

[01:54] <SmokeMachine> m: say "abc".subst: /b/, "[[$0]]"

[01:54] <camelia> rakudo-moar a804ab57f: OUTPUT: «Use of Nil in string context␤a[[]]c␤  in block <unit> at <tmp> line 1␤»

[01:54] <Xliff> .slurp-rest is leaving?

[01:54] <SmokeMachine> $o shouldn't work?

[01:54] <Zoffix> SmokeMachine: you're interpolating $0 before it had a chance to match

[01:54] <Zoffix> m: say "abc".subst: /b/, {"[[$0]]"}

[01:54] <camelia> rakudo-moar a804ab57f: OUTPUT: «Use of Nil in string context␤a[[]]c␤  in block  at <tmp> line 1␤»

[01:54] <Zoffix> m: say "abc".subst: /(b)/, {"[[$0]]"}

[01:54] <camelia> rakudo-moar a804ab57f: OUTPUT: «a[[b]]c␤»

[01:54] <Zoffix> Xliff: it's deprecated, yes

[01:54] <Xliff> Or is it sticking around for IO::Handle?

[01:54] <Zoffix> Has been since ~2017.04

[01:54] <Xliff> noooo....

[01:55] <Xliff> OK. So it is now .slurp?

[01:55] <Zoffix> Yes

[01:55] <Xliff> .slurp-rest is dead. Long live .slurp

[01:55] <Xliff> zoffix++

[01:55] <ToddAndMargo> https://docs.perl6.org/routine/slurp-rest    "DEPRECATION NOTICE: this method will be deprecated in 6.d language. Do not use it for new code. Use .slurp method method instead."

[01:55] *** jameslenz joined
[01:55] *** MasterDuke left
[01:55] <Zoffix> m: say "abc".subst: /b/, '[['~*~']]'

[01:55] <camelia> rakudo-moar a804ab57f: OUTPUT: «a[[b]]c␤»

[01:56] <SmokeMachine> Zoffix: I copied the wrong version... my real question was with the parens... that makes sense, thanks!

[01:56] *** p6bannerbot sets mode: +v jameslenz

[01:56] <Xliff> ToddAndMargo: There comes a point where you miss things in the docs because you are used to a set of code and you miss the copious amounts of memos on the topic because they were mistakenly caught by the mystery-meat-filter

[01:58] <ToddAndMargo> No fooling.

[01:58] *** molaf left
[01:58] <ToddAndMargo> Oh look at this.  now I am getting:  malloc(): memory corruption Aborted (core dumped)

[01:59] <ToddAndMargo> free(): invalid next size (fast) Aborted (core dumped)

[01:59] <ToddAndMargo> I can't win!

[01:59] <Zoffix> ToddAndMargo: what's your perl6 version?

[02:00] <ToddAndMargo> $ perl6 -v This is Rakudo version 2018.06 built on MoarVM version 2018.06 implementing Perl 6.c.

[02:00] <ToddAndMargo> And I can send yo the code that caused teh two error too

[02:00] *** jameslenz left
[02:01] <ToddAndMargo> The first one was caused by `sub RunNoShellAll( Str $RunString, Int $StdOut, Int $StdErr, Int $Code --> List )`

[02:01] <ToddAndMargo> The second one was caused by `sub RunNoShellAll( Str $RunString, Int $StdOut, Int $StdErr, Int $Code, -->List )`

[02:01] <ToddAndMargo> Removing `-->` completely restored functionality

[02:02] <ToddAndMargo> $ rpm -qa rakudo\* rakudo-pkg-2018.06-01.x86_64

[02:04] <Zoffix> You could report it or wait until next Star and see if it still crashes there.

[02:05] <Zoffix> .seen stmuk

[02:05] <yoleaux> I saw stmuk 14 Oct 2018 09:50Z in #perl6-dev: <stmuk> oops

[02:05] <ToddAndMargo> I will report it.  One moment please

[02:05] <Zoffix> ToddAndMargo: You can just open an Issue in this repo: https://github.com/rakudo/rakudo/issues/new

[02:05] <Xliff> ToddAndMargo: Can you send the code here, and I will see if it runs on the latest rakudo?

[02:06] <Zoffix> .ask stmuk Just so I have info for 6.d release announcement: 2018.11 Rakudo will be a first rakudo with 6.d language by default. Will there be a 2018.11 Rakudo Star (considering that going by regular schedule there will be a 2018.10 Rakudo Star)?

[02:06] <yoleaux> Zoffix: I'll pass your message to stmuk.

[02:09] <ToddAndMargo> Well, this is unusual, it wasn't me for once!  https://github.com/perl6/doc/issues/2398

[02:10] <Xliff> ToddAndMargo: It would help if you included a listing of the sub

[02:10] <ToddAndMargo> Oops, I did not see you link.  Should I wait for the powers tht be to shake the finger at me?  or just report it?

[02:10] <Xliff> m: sub RunNoShellAll( Str $RunString, Int $StdOut, Int $StdErr, Int $Code, --> List ) {}

[02:10] <camelia> rakudo-moar a804ab57f: ( no output )

[02:10] <Xliff> Yeah. Need a listing of the sub and example usage.

[02:11] <ToddAndMargo> I just put the code up

[02:11] <Xliff> Zoffix: Rakudo compiles in 80 seconds on my VM. It compiles in sub 45 when I dual boot.

[02:11] *** molaf joined
[02:12] *** p6bannerbot sets mode: +v molaf

[02:12] <ToddAndMargo> It is commented really well, so it should not need an example.  If they want one, I will have post a lot of code, but that is fine with me

[02:12] <Xliff> ToddAndMargo: Er... Markdown mangled your code. It would be best if you put in "```perl6" on the line before it starts and "```" on the line after.

[02:14] <Zoffix> ToddAndMargo: what's the full program that crashes? That sub is not invoked anywhere in the code you posted. I moved your Issue to https://github.com/rakudo/rakudo/issues/2403

[02:14] <ToddAndMargo> Oh that did look like heck (not my exact word). try again

[02:14] <Xliff> ToddAndMargo: Yes. That is readable, now. Please include the invocation that caused the error.

[02:15] * Xliff waves his hands ominously.

[02:15] *** ExtraCrispy left
[02:16] <ToddAndMargo> the crashing code is in a module (121 lines).  The code that called it is 6380 lines and call a bunch of other modules of mine.  (I come from Modula2, so the first thing I set off doing in Perl6 was to learn modules and write up a bunch of supporting modules.)

[02:16] <ToddAndMargo> Let me see if I can one line the error

[02:17] <Xliff> Cool!

[02:17] <Zoffix> ToddAndMargo: it's just people fixing the bug can't reproduce it right now. The code alone is pointless if one doesn't know how to run it to exercise the error

[02:22] <Zoffix> .tell AlexDaniel FYI: I started post-release-2018.10 branches in rakudo/roast, 'cause I want that code to marinate a bit. And I'm pretty sure there will be ecosystem fallout because the IIRC original code was spurted by some module

[02:22] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[02:22] <ToddAndMargo> I am working on a way to reproduce it

[02:25] <Zoffix> (INB4 "coredevs break ecosystem willy-nilly!!"; The code involved is an experimental proposal for 6.d language and it was deemed inappropriate and has been removed)

[02:26] <ToddAndMargo> Poop!  Now it is working!  $ perl6 -I. -MRunNoShell -e 'RunNoShellErr( "ls RunNoShell.pm6" ).say;' (RunNoShell.pm6   0) `

[02:26] <AlexDaniel> .

[02:26] <yoleaux> 02:22Z <Zoffix> AlexDaniel: FYI: I started post-release-2018.10 branches in rakudo/roast, 'cause I want that code to marinate a bit. And I'm pretty sure there will be ecosystem fallout because the IIRC original code was spurted by some module

[02:26] <AlexDaniel> Zoffix: cool

[02:28] <Zoffix> I also kinda rushed with merging of .native-descriptor for Proc::Async. `make test` now fails R#2402

[02:28] <synopsebot> R#2402 [open]: https://github.com/rakudo/rakudo/issues/2402 [⚠ blocker ⚠] t/05-messages/02-errors.t crashes

[02:28] <AlexDaniel> yeah, I was a bit surprised to see PRs merged :)

[02:28] <Zoffix> /o\

[02:29] <Zoffix> .oO( cut release from earlier commit :) )

[02:29] <AlexDaniel> basically, these four modules that I filed tickets for are the only ones failing in the ecosystem

[02:29] <AlexDaniel> so once current blockers are resolved we should be able to cut 2018.10

[02:29] <AlexDaniel> I hope so

[02:30] <AlexDaniel> Zoffix: how long does toaster run for you? And how many cores?

[02:30] <AlexDaniel> because I expected my thing to be much faster, but it takes 60 minutes with 24 cores

[02:31] <AlexDaniel> and now I'm not sure if toaster was any slower… it took hours for me but that's before I realized that there's a gazillion of precomp files in .zef

[02:31] <Zoffix> AlexDaniel: ~1hr on 64 cores

[02:31] <Zoffix> And I'm not running 128 cores anymore... The bill I got for it was a bit shocking :P

[02:31] <Zoffix> like $70 or something

[02:32] <AlexDaniel> heh I still have 10€ bonus till tomorrow

[02:37] <AlexDaniel> ehh I should probably profile it. OK 4 modules were bisected, but that's like ≈12 extra runs for each module. 180 modules (the ones that always fail) had to be tested at least two times, but that again doesn't add much

[02:38] <AlexDaniel> well, first I should put it on github…

[02:38] * AlexDaniel does that

[02:42] <Xliff> :-O -- 128 cores?!?

[02:42] <Xliff> I wish I had the cash for that for a month.

[02:42] <Xliff> Oh the things i could break.

[02:42] <Xliff> The best I can do is 20

[02:43] <Zoffix> Xliff: correction: 160 cores: https://twitter.com/zoffix/status/1028696166370881536

[02:43] <Zoffix> It was glorious

[02:43] <Xliff> *headdesk*

[02:50] <Xliff> I BET it was glorious!

[02:50] <Xliff> 70€ a month?

[02:51] <Xliff> Is that even possible in a physical machine?

[02:53] <Zoffix> Xliff: $70 for a couple of hours. It's like $12,885.57 a month

[02:53] <Zoffix> That's the 160CPU/624GB RAM, but the one I ran let me get 3.5TB of RAM

[02:55] <Zoffix> Ok, it gives $12,885.57 monthly estimate for 160CPU/3,844 GB memory

[02:55] <Zoffix> "That's about $17.651 hourly"

[02:57] <Xliff> Is there a *scream* character for UTF8?

[02:58] <Xliff> Because there really should be.

[02:58] <Zoffix> :D

[02:58] <Xliff> I was looking at chips. Intel has a 288 core chip, but it only runs at 1.5 GHz

[02:58] <Xliff> I want yours, but that price tag would keel me

[02:59] <Xliff> https://en.wikipedia.org/wiki/Xeon_Phi

[03:01] <holyghost> I would like to buy a SGI Onyx machine with multiple MIPS processor core, 4000 pounds, cannot afford it, great for game work

[03:02] *** aindilis` left
[03:02] <holyghost> A bit old though

[03:05] *** cognominal-p6 joined
[03:06] *** p6bannerbot sets mode: +v cognominal-p6

[03:09] *** Zoffix left
[03:15] <Xliff> holyghost: Surely there is something as capable, but more recent?

[03:15] <holyghost> I think it's called an opteron

[03:15] <Xliff> m: say 17.651 * 24

[03:15] <camelia> rakudo-moar fdd84628e: OUTPUT: «423.624␤»

[03:16] <holyghost> it's a lintel machine 

[03:18] <holyghost> I saw one at uni with 64 cores

[03:19] <holyghost> not that the Onyx has a better processor and multiple processors not just cores such as on a phone now these days

[03:20] <holyghost> which makes the system more hardware hackable than just a 4U slab or something

[03:23] <holyghost> I had an Indy with linux on it and a O2

[03:23] <holyghost> Gave them away

[03:23] <holyghost> Now I only have a O2 processor left which I would like to build a mobo for

[03:24] <holyghost> Problem is the bus is 200+ pins

[03:24] <holyghost> And finding such a connector is difficult

[03:25] <holyghost> So if I find the money, I'm going to build my O2 further on with SGI stuff

[03:25] <holyghost> And hope to hardware hack it with other things

[03:26] <holyghost> I would like to use it for nintnedo 64 development

[03:26] <holyghost> which had the same processor

[03:26] <holyghost> R4000 I believe

[03:27] <holyghost> Multibooting linux and IRIX for game work as I said

[03:28] *** cognominal-p6 left
[03:28] <holyghost> I don't think it's an O2, it might be an Indy, Octane which has the same processor  R4000

[03:28] <holyghost> which gives me 2 extra machines

[03:30] <holyghost> Zelda : Ocarina of time was made on it

[03:31] <ToddAndMargo> that core dump came back, but it is internittant.  Removing the --> List again fixed it

[03:31] <holyghost> which is a fantastic moving 3rd person view camera game from 1995

[03:33] <holyghost> I would like to know the camera algorithm as you see Link fighting from behind, next to him or the reverse

[03:53] <ToddAndMargo> What am I doing wrong here:  `for split "\n", $WebPage -> $Line {` does not work, but `for split chr(0x0A), $WebPage -> $Line {`  does.  What the heck ???

[03:56] *** jameslenz joined
[03:57] *** p6bannerbot sets mode: +v jameslenz

[04:01] *** kerframil left
[04:01] *** jameslenz left
[04:01] <ToddAndMargo> I will post over on the mailing list

[04:04] *** kerframil joined
[04:04] *** p6bannerbot sets mode: +v kerframil

[04:07] *** araraloren joined
[04:08] *** p6bannerbot sets mode: +v araraloren

[04:22] <Xliff> ToddAndMargo: \r and \n are linespaces. Unix uses \n. Windows uses \r\n. \r == 0x0a and \n == 0x0d

[04:22] <Xliff> Which is why most regex expressions that handle this are \r?\n

[04:49] <ToddAndMargo> Thank you!

[04:49] <ToddAndMargo> how do I convert this to read binary: $BufStdOut = $proc.out.slurp

[04:50] <ToddAndMargo> $BufStdOut = $proc.out.slurp( :bin )  does not work

[04:54] <Xliff> You want that to read a binary file?

[04:56] <Xliff> For that, you'd probably want $proc.out.read

[04:56] <Xliff> This from Proc::Async?

[04:57] <ToddAndMargo> I want to read std out.  Some of the bytes in std out will be larger than 128, so not string read

[04:57] <Xliff> Proc::Async?

[04:58] <Xliff> Or something else?

[04:59] <ToddAndMargo> I don't understand.  This starts to thing : $proc = run( @RunArray, :err, :out, :bin );

[05:00] <ToddAndMargo> Then I read it back with `$BufStdOut = $proc.out.slurp`, except I get the fingure shaken at me because $BugStdOut is type Buf and not type Str

[05:00] <Xliff> You really want type Buf for binary

[05:01] <Xliff> So read it out as Buf, and if you need a string, use .decode

[05:01] <ToddAndMargo> I am all ears.  I want BYTES. 

[05:01] <Xliff> Buf is bytes

[05:01] <ToddAndMargo> Then I want Buf!

[05:01] <Xliff> To convert Buf to a string, use .decode

[05:02] <Xliff> .decode('utf8') or .decode('utf8-c8')

[05:02] <ToddAndMargo> I can't read it as a buf!   I want to read it as a buf.  I will be doing my own custom decode on it.

[05:02] <Xliff> m: my Buf $b = 'This a string converted to a Buf'.encode('utf8-c8'); say $b;

[05:02] <camelia> rakudo-moar fdd84628e: OUTPUT: «Type check failed in assignment to $b; expected Buf but got Blob[uint8] (Blob[uint8].new(84,104,105,115,3...)␤  in block <unit> at <tmp> line 1␤␤»

[05:02] <Xliff> m: my Buf $b = 'This a string converted to a Buf'.encode('utf8'); say $b;

[05:02] <camelia> rakudo-moar fdd84628e: OUTPUT: «Type check failed in assignment to $b; expected Buf but got utf8 (utf8.new(84,104,105,115,3...)␤  in block <unit> at <tmp> line 1␤␤»

[05:03] <Xliff> OK. I guess it is Blob, then. :P

[05:03] <ToddAndMargo> https://docs.perl6.org/routine/slurp#(IO::Path)_routine_slurp   multi method slurp(IO::Path:D: :$bin, :$enc)  Read all of the file's content and return it as either Buf, if :$bin is True, or if not, as Str decoded with :$enc encoding, which defaults to utf8. See &open for valid values for :$enc.

[05:03] <ToddAndMargo> Danged if I can figure it out

[05:04] <Xliff> m: '/etc/passwd'.IO.slurp(:bin).say

[05:04] <camelia> rakudo-moar fdd84628e: OUTPUT: «Buf[uint8]:0x<62 69 6E 3A 78 3A 31 3A 31 3A 62 69 6E 3A 2F 62 69 6E 3A 2F 62 69 6E 2F 62 61 73 68 0A 64 61 65 6D 6F 6E 3A 78 3A 32 3A 32 3A 44 61 65 6D 6F 6E 3A 2F 73 62 69 6E 3A 2F 62 69 6E 2F 62 61 73 68 0A 66 74 70 3A 78 3A 34 30 3A 34 39 3A 46 54 …»

[05:04] <Xliff> m: '/etc/passwd'.IO.slurp.say

[05:04] <camelia> rakudo-moar fdd84628e: OUTPUT: «bin:x:1:1:bin:/bin:/bin/bash␤daemon:x:2:2:Daemon:/sbin:/bin/bash␤ftp:x:40:49:FTP account:/srv/ftp:/bin/bash␤games:x:12:100:Games account:/var/games:/bin/bash␤lp:x:4:7:Printing daemon:/var/spool/lpd:/bin/bash␤mail:x:8:12:Mailer daemon:/var/sp…»

[05:05] <Xliff> Looks fine to me! ;)

[05:06] <ToddAndMargo> $BufStdOut = $proc.out.IO.slurp    Cannot resolve caller slurp(IO::Path: ); none of these signatures match:     (IO::Path:D: :$enc, :$bin, *%_)

[05:08] *** evalable6 left
[05:08] *** evalable6 joined
[05:08] *** ChanServ sets mode: +v evalable6

[05:09] *** p6bannerbot sets mode: +v evalable6

[05:18] <Xliff> m: my $p = run('ls /etc'); $p.out.slurp(:bin).say

[05:18] <camelia> rakudo-moar fdd84628e: OUTPUT: «run is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub run at src/RESTRICTED.setting line 14␤  in block <unit> at <tmp> line 1␤␤»

[05:19] <Xliff> m: my $p = run('ls /etc', :bin); $p.out.slurp.say

[05:19] <camelia> rakudo-moar fdd84628e: OUTPUT: «run is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub run at src/RESTRICTED.setting line 14␤  in block <unit> at <tmp> line 1␤␤»

[05:21] <ToddAndMargo> okay, the error is actually the way I am trying to loop through a Buf.  `for $BufStdOut[0..*]` work, but `for $BufStdOut` only makes one loop and sticks everything in $_

[05:24] <Xliff> Try "for $BufStdOut.list"

[05:24] <Xliff> And I can't seem to get $p.out to even work on my end. \

[05:25] <ToddAndMargo> will do.  Some other booboo to fix first  :'(

[05:25] <Xliff> perl6 -e "my \$p = run('ls /etc', :out, :bin); $p.out.slurp.say"

[05:25] <Xliff> No such method 'out' for invocant of type 'Any'. Did you mean 'put'?

[05:25] <Xliff> Oh. Dur.

[05:27] <Xliff> perl6 -e 'my $p = run("ls", "/etc", :out, :bin); .say for $p.out.slurp.list'

[05:28] <Xliff> Works fine here. ;)

[05:32] <ToddAndMargo> Got it!

[05:32] <ToddAndMargo> if  $StdErr  { $BufStdErr = $proc.err.slurp; for $BufStdErr[0..*] -> $I { $ReturnErr ~= chr( Int( $I ) +& 0x7F ); } }

[05:32] <ToddAndMargo> if  $StdOut  { $BufStdOut = $proc.out.slurp; for $BufStdOut[0..*] -> $I { $ReturnStr ~= chr( Int( $I ) +& 0x7F ); }  }

[05:33] *** araraloren_ joined
[05:33] *** araraloren left
[05:33] <ToddAndMargo> Thank you all!  Most of the issue was booboo's on my part.  using the wrong variable etc.

[05:34] *** p6bannerbot sets mode: +v araraloren_

[05:35] <Xliff> \o/

[05:48] *** troys left
[05:57] *** jameslenz joined
[05:58] <SmokeMachine> m: say :(—> Int) ~~ :(—> Str)

[05:58] <camelia> rakudo-moar fdd84628e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus statement␤at <tmp>:1␤------> 3say :(7⏏5—> Int) ~~ :(—> Str)␤    expecting any of:␤        formal parameter␤        list composer␤        prefix␤        term␤»

[05:58] *** p6bannerbot sets mode: +v jameslenz

[05:59] <SmokeMachine> m: say :(--> Int) ~~ :(--> Str)

[05:59] <camelia> rakudo-moar fdd84628e: OUTPUT: «False␤»

[05:59] <SmokeMachine> m: say :(--> Int) eqv :(--> Str)

[05:59] <camelia> rakudo-moar fdd84628e: OUTPUT: «True␤»

[06:01] *** jameslenz left
[06:04] <ToddAndMargo> how do I properly do this?  $x ~~ s/chr(0x0d)chr(0x0a)/Q/;

[06:09] <ToddAndMargo> I think I wored it out.  The trick is {}.  $ p6 'my $x=chr(0x0d)~chr(0x0a); $x ~~ s/{chr(0x0d)}{chr(0x0a)}/R/; say ord($x);' 82

[06:11] <ToddAndMargo> not so far

[06:12] <ToddAndMargo> only catches the first {}

[06:21] <ToddAndMargo> Putting the former in a variable does work:  $ p6 'my $y=chr(0x0d) ~ chr(0x0a); my $x="abc<$y>123"; $x ~~ s/$y/{chr(0x0A)}/; say $x; say $y;' abc< >123

[06:23] <geekosaur> m: say "\x0D\x0A"

[06:23] <camelia> rakudo-moar fdd84628e: OUTPUT: «

[06:23] <geekosaur> bot doesn't like control characters much

[06:24] <Xliff> No. It does not.

[06:24] <geekosaur> well, for soem things it does (and I have a script to catch them and make them visible)

[06:25] *** cognominal-p6 joined
[06:25] *** p6bannerbot sets mode: +v cognominal-p6

[06:32] <ToddAndMargo> how do I get rid of the $y?

[06:35] <geekosaur> $x ~~ s/\x0D\x0A/\x0A/; # ? (also, don't you want :g on that?)

[06:36] *** sunnavy joined
[06:37] <ToddAndMargo> yes I do

[06:37] *** zxcvz joined
[06:37] *** p6bannerbot sets mode: +v sunnavy

[06:37] *** cognominal-p6 left
[06:37] *** p6bannerbot sets mode: +v zxcvz

[06:38] *** cognominal-p6 joined
[06:38] *** p6bannerbot sets mode: +v cognominal-p6

[06:39] <ToddAndMargo> This was my clean up:    $Terminator = chr(0x0d) ~ chr(0x0a);    $Headers ~~ s:global/ $Terminator /{chr(0x0a)}/;    $Terminator = chr(0x0d);    $Headers ~~ s:global/ $Terminator /{chr(0x0a)}/;        for ( split chr( 0x0A ), $Headers ).reverse -> $Line {       # print( "$Line\n" );       if  $Line.contains( "Location:" )  {          # PrintGreenErr( "$Line\n" );          $RedirectUrl = $Line;          last       }    }

[06:39] <ToddAndMargo> Thank for the :g !

[06:41] <geekosaur> I guess one of us didn't understand the other since you're still using the chr-s

[06:49] *** cognominal-p6 left
[06:53] <ToddAndMargo> Now I thought I understood strings, but apparently not!  $ p6 'my $x="abc"; say $x[1];' Index out of range. Is: 1, should be in 0..0   in block <unit> at -e line 1

[06:54] <ToddAndMargo> Is not a string an array of charaters?

[06:54] <geekosaur> it is not

[06:54] <geekosaur> it;'s not in perl 5, either

[06:54] <geekosaur> you want the substr method (or sub)

[06:55] <ToddAndMargo> checking

[06:56] <ToddAndMargo> $ p6 'my Str $x="abc"; say $x.substr(1..1);' b

[06:57] <ToddAndMargo> Thank you!  Just out of curiousity, is there an array of characters?

[06:57] <geekosaur> you can make one but they're fairly inefficient

[06:57] <geekosaur> C does them that way but they're really byet arrays. Haskell does them that way… and people are told to use Text instead for good reason

[06:58] <ToddAndMargo> I used arrays of characters in Modula2.  Perl is way easier!

[07:01] <ToddAndMargo> okay, now I am pushing things!    $ p6 'my Str $x="abc"; say $x.substr()[3,1];' Must at least specify a 'from' value with 'substr'   in block <unit> at -e line 1

[07:09] <Xliff> ToddAndMargo: substr needs at least one parameter.

[07:09] * Xliff grows sleepy.

[07:10] <geekosaur> theyr'e confusing () and [] like a couple months ago

[07:15] *** joy_ left
[07:17] *** domidumont joined
[07:18] <ToddAndMargo> I am pushing it a bit too far. Chuckle

[07:18] *** p6bannerbot sets mode: +v domidumont

[07:18] *** domidumont left
[07:19] *** domidumont joined
[07:20] *** p6bannerbot sets mode: +v domidumont

[07:22] *** joy_ joined
[07:22] *** p6bannerbot sets mode: +v joy_

[07:25] *** ExtraCrispy joined
[07:25] *** p6bannerbot sets mode: +v ExtraCrispy

[07:30] *** rindolf joined
[07:31] <buggable> New CPAN upload: App-Perl6LangServer-0.1.2.tar.gz by AZAWAWI http://modules.perl6.org/dist/App::Perl6LangServer:cpan:AZAWAWI

[07:31] *** p6bannerbot sets mode: +v rindolf

[07:56] *** noganex_ left
[07:57] *** noganex joined
[07:58] *** p6bannerbot sets mode: +v noganex

[07:58] *** jameslenz joined
[07:59] *** p6bannerbot sets mode: +v jameslenz

[07:59] *** cpage_ joined
[08:00] *** p6bannerbot sets mode: +v cpage_

[08:01] *** joy_ left
[08:02] *** cpage left
[08:02] *** cpage_ is now known as cpage

[08:02] *** jameslenz left
[08:05] *** joy_ joined
[08:05] *** p6bannerbot sets mode: +v joy_

[08:10] *** cognominal-p6 joined
[08:10] *** p6bannerbot sets mode: +v cognominal-p6

[08:17] *** titsuki joined
[08:18] *** p6bannerbot sets mode: +v titsuki

[08:29] <Geth> ¦ perl6.org: dhanushka95++ created pull request #118: update

[08:29] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/pull/118

[08:30] *** notarobot joined
[08:30] *** p6bannerbot sets mode: +v notarobot

[08:31] *** robertle joined
[08:32] <notarobot> Hi! What editors work best for writing Perl6? What resources do you recommend for learning it?

[08:32] *** p6bannerbot sets mode: +v robertle

[08:32] *** domidumont left
[08:36] <El_Che> notarobot: at the moment Comma (commercial intellij-based IDE), atom + perl6 plugin, vim, emacs. Soon VS code (as the langserver is being developed now)

[08:40] <notarobot> El_Che thanks, Atom it is for me then

[08:41] <El_Che> there are some books published like "Perl 6 Fundamentals", "Learning Pel6" and "Think Perl 6"

[08:41] <El_Che> or you start writing a project, use doc.perl6.org and ask questions here

[08:45] <notarobot> El_Che can you tell me about the language's take on functional programming?

[08:45] <notarobot> or the ecosystems'

[08:46] <El_Che> notarobot: here is some info about functional programming (functions as first-class obj): https://docs.perl6.org/language/functions

[08:47] <El_Che> here is a talk about it: https://www.youtube.com/watch?v=bJ_zYJXTLWg

[08:47] <El_Che> ecosystem is faily small, but bigger that you probably imagine: https://modules.perl6.org/

[08:49] <El_Che> the easiest is to search for something

[09:04] *** kerframil left
[09:12] *** domidumont joined
[09:13] *** p6bannerbot sets mode: +v domidumont

[09:13] <chsanch> notarobot: you can also check https://perl6intro.com

[09:17] *** harrison joined
[09:18] <notarobot> chsanch seems like a nice format to start with, thx

[09:24] *** harrison left
[09:31] *** Bucciarati left
[09:36] *** Bucciarati joined
[09:37] *** p6bannerbot sets mode: +v Bucciarati

[09:38] *** ToddAndMargo left
[09:39] *** noganex_ joined
[09:40] *** p6bannerbot sets mode: +v noganex_

[09:43] *** noganex left
[09:46] *** sena_kun joined
[09:47] *** p6bannerbot sets mode: +v sena_kun

[09:49] *** cognominal-p6 left
[09:50] *** HaraldJoerg joined
[09:51] *** p6bannerbot sets mode: +v HaraldJoerg

[09:59] *** jameslenz joined
[09:59] *** p6bannerbot sets mode: +v jameslenz

[10:00] *** pmurias joined
[10:00] *** p6bannerbot sets mode: +v pmurias

[10:02] *** jbotz joined
[10:03] *** jameslenz left
[10:03] *** p6bannerbot sets mode: +v jbotz

[10:05] *** molaf left
[10:19] *** lizmat joined
[10:19] *** p6bannerbot sets mode: +v lizmat

[10:22] *** patrickb joined
[10:22] *** p6bannerbot sets mode: +v patrickb

[10:26] *** isBEKaml joined
[10:26] *** p6bannerbot sets mode: +v isBEKaml

[10:26] *** isBEKaml left
[10:37] *** AlexDaniel left
[10:38] *** AlexDaniel joined
[10:38] *** p6bannerbot sets mode: +v AlexDaniel

[10:39] <El_Che> weekly: [rakudo-pkg] Addition of Ubuntu 18.10 pkgs and repo for freshly released distro.

[10:39] <notable6> El_Che, Noted!

[10:40] <El_Che> weekly: https://github.com/nxadm/rakudo-pkg/releases/tag/v2018.09-02, better point to: https://github.com/nxadm/rakudo-pkg#os-repositories

[10:40] <notable6> El_Che, Noted!

[10:49] *** pmurias left
[10:50] *** pmurias joined
[10:50] *** p6bannerbot sets mode: +v pmurias

[11:05] *** cognominal-p6 joined
[11:05] *** p6bannerbot sets mode: +v cognominal-p6

[11:11] *** molaf joined
[11:11] *** p6bannerbot sets mode: +v molaf

[11:14] *** cognominal-p6 left
[11:14] *** cognominal-p6 joined
[11:15] *** p6bannerbot sets mode: +v cognominal-p6

[11:19] <El_Che> Zoffix: I added a syslink in the rakudo pkg: "$ rakudo -v" [This is Rakudo version 2018.09...]. Being rakudo compiler binaries, I don't see a problem. Once and if an alias is chosen, I'll add that as well.

[11:20] *** holyghost left
[11:20] *** Circlepuller left
[11:22] *** holyghost joined
[11:23] *** p6bannerbot sets mode: +v holyghost

[11:29] *** cognominal-p6 left
[11:29] *** cognominal-p6 joined
[11:29] *** dalek left
[11:30] *** p6bannerbot sets mode: +v cognominal-p6

[11:30] *** dalek joined
[11:30] *** ChanServ sets mode: +v dalek

[11:30] *** TeamBlast joined
[11:31] *** p6bannerbot sets mode: +v dalek

[11:31] *** p6bannerbot sets mode: +v TeamBlast

[11:32] *** riasue_ left
[11:33] *** riatre joined
[11:34] *** p6bannerbot sets mode: +v riatre

[11:50] *** patrickb left
[11:59] *** jameslenz joined
[12:00] *** p6bannerbot sets mode: +v jameslenz

[12:01] <buggable> New CPAN upload: Hash-Restricted-0.0.5.tar.gz by ELIZABETH http://modules.perl6.org/dist/Hash::Restricted:cpan:ELIZABETH

[12:01] <buggable> New CPAN upload: Tuple-0.0.5.tar.gz by ELIZABETH http://modules.perl6.org/dist/Tuple:cpan:ELIZABETH

[12:02] *** aindilis joined
[12:03] *** p6bannerbot sets mode: +v aindilis

[12:04] *** jameslenz left
[12:12] *** Bucciarati left
[12:35] *** MasterDuke joined
[12:35] *** p6bannerbot sets mode: +v MasterDuke

[12:35] *** MasterDuke left
[12:35] *** MasterDuke joined
[12:35] *** herbert.freenode.net sets mode: +v MasterDuke

[12:35] *** p6bannerbot sets mode: +v MasterDuke

[12:37] *** Bucciarati joined
[12:38] *** p6bannerbot sets mode: +v Bucciarati

[12:43] *** araraloren joined
[12:44] *** p6bannerbot sets mode: +v araraloren

[12:46] *** araraloren_ left
[12:50] *** notarobot left
[12:52] *** cognominal-p6 left
[13:12] *** cognominal-p6 joined
[13:13] *** p6bannerbot sets mode: +v cognominal-p6

[13:14] *** araraloren left
[13:16] *** cognominal-p6 left
[13:16] *** cognominal-p6 joined
[13:17] *** p6bannerbot sets mode: +v cognominal-p6

[13:21] *** domidumont left
[13:24] *** nebuchadnezzar left
[14:00] *** jameslenz joined
[14:01] *** p6bannerbot sets mode: +v jameslenz

[14:05] *** jameslenz left
[14:05] *** pecastro joined
[14:06] *** p6bannerbot sets mode: +v pecastro

[14:25] *** noganex_ left
[14:26] *** noganex joined
[14:26] *** p6bannerbot sets mode: +v noganex

[14:29] <Geth> ¦ doc: chsanch++ created pull request #2399: Update link to Perl 6 Pod documentation in Modules

[14:29] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2399

[14:50] *** xinming_ joined
[14:50] <Geth> ¦ doc: e4a3d2ffdc | (Christian Sánchez)++ | doc/Language/modules.pod6

[14:50] <Geth> ¦ doc: Update link to Perl 6 Pod documentation in Modules

[14:50] <Geth> ¦ doc: 

[14:50] <Geth> ¦ doc: The link was pointing to https://design.perl6.org/S26.html and probably

[14:50] <Geth> ¦ doc: is better to use the Perl 6 Pod documentation from docs.perl6.org

[14:50] <synopsebot> Link: https://doc.perl6.org/language/modules

[14:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e4a3d2ffdc

[14:50] <Geth> ¦ doc: 7bd303ccf7 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Language/modules.pod6

[14:50] <Geth> ¦ doc: Merge pull request #2399 from chsanch/update-links

[14:50] <Geth> ¦ doc: 

[14:50] <Geth> ¦ doc: Update link to Perl 6 Pod documentation in Modules

[14:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7bd303ccf7

[14:51] *** p6bannerbot sets mode: +v xinming_

[14:53] *** xinming left
[15:17] *** jbotz left
[15:29] *** molaf left
[15:33] <Geth> ¦ doc: chsanch++ created pull request #2400: Fix #2359 Add link to arguments in Objects

[15:33] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/2400

[15:53] *** jbotz joined
[15:53] *** p6bannerbot sets mode: +v jbotz

[15:55] *** cognominal-p6 left
[15:56] *** cognominal-p6 joined
[15:57] *** p6bannerbot sets mode: +v cognominal-p6

[16:01] *** jameslenz joined
[16:02] *** p6bannerbot sets mode: +v jameslenz

[16:05] *** jameslenz left
[16:06] *** noganex_ joined
[16:06] *** p6bannerbot sets mode: +v noganex_

[16:09] *** noganex left
[16:10] <Geth> ¦ whateverable: a4b2de72b7 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable/Running.pm6

[16:10] <Geth> ¦ whateverable: Remove broken builds when stumbling upon them

[16:10] <Geth> ¦ whateverable: 

[16:10] <Geth> ¦ whateverable: Also return something useful in these cases. This is a workaround for

[16:10] <Geth> ¦ whateverable: a long-standing issue when some archives are simply invalid for

[16:10] <Geth> ¦ whateverable: unknown reason.

[16:10] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/a4b2de72b7

[16:43] *** zxcvz left
[16:54] *** itaipu joined
[16:55] *** p6bannerbot sets mode: +v itaipu

[16:58] *** Bucciarati left
[16:59] *** avar left
[17:15] *** Grauwolf left
[17:15] *** Grauwolf joined
[17:15] *** p6bannerbot sets mode: +v Grauwolf

[17:19] *** domidumont joined
[17:20] *** p6bannerbot sets mode: +v domidumont

[17:37] <Geth> ¦ doc: 2eed8fc604 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/pod.pod6

[17:37] <Geth> ¦ doc: add another list example

[17:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/2eed8fc604

[17:37] <synopsebot> Link: https://doc.perl6.org/language/pod

[17:38] *** Bucciarati joined
[17:38] *** avar joined
[17:38] *** avar left
[17:38] *** avar joined
[17:38] *** p6bannerbot sets mode: +v avar

[17:38] *** p6bannerbot sets mode: +v Bucciarati

[17:38] *** p6bannerbot sets mode: +v avar

[17:42] <Geth> ¦ doc: a9cd2970b7 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/pod.pod6

[17:42] <Geth> ¦ doc: extend a comment

[17:42] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a9cd2970b7

[17:42] <synopsebot> Link: https://doc.perl6.org/language/pod

[17:46] *** MilkmanDan left
[17:47] *** MilkmanDan joined
[17:47] *** p6bannerbot sets mode: +v MilkmanDan

[17:56] *** vike left
[17:58] *** vike joined
[17:58] *** p6bannerbot sets mode: +v vike

[18:00] *** |oLa| joined
[18:00] *** thundergnat left
[18:00] *** aindilis left
[18:00] *** p6bannerbot sets mode: +v |oLa|

[18:02] *** jameslenz joined
[18:03] *** p6bannerbot sets mode: +v jameslenz

[18:07] *** jameslenz left
[18:09] *** aindilis joined
[18:09] *** p6bannerbot sets mode: +v aindilis

[18:10] *** sena_kun left
[18:11] *** MasterDuke left
[18:11] *** ryn1x joined
[18:12] *** p6bannerbot sets mode: +v ryn1x

[18:16] <AlexDaniel> .seen cygx

[18:16] <yoleaux> I saw cygx 17 Oct 2018 20:54Z in #perl6: <cygx> I was thinking along similar lines for names myself, but Onix is kind of out due to that whole pokemon thing...

[18:23] <El_Che> releasable6: status

[18:23] <releasable6> El_Che, Next release is just a few moments away. 5 blockers. 87 out of 481 commits logged (⚠ 1 warnings)

[18:23] <releasable6> El_Che, Details: https://gist.github.com/4c1a5a7b0eeba674df03f5382fccea11

[18:24] <El_Che> AlexDaniel: I released Ubuntu 18.10 2018.09 pkgs, in the meantime, so take your time :)

[18:24] <Xliff> How do you reference EXPORT::DEFAULT of the current package?

[18:27] <El_Che> I don't. There is a global zef installing stuff in /opt/rakudo-pkg and a user zef installing in ~/.perl6. As I understand it, the home install takes precedence

[18:32] *** wbn left
[18:39] *** wbn joined
[18:40] *** p6bannerbot sets mode: +v wbn

[18:41] *** wbn left
[18:41] *** wbn joined
[18:42] *** p6bannerbot sets mode: +v wbn

[18:42] <rouking> Does anyone know if ``partially dimensioned views'' are going to be in Diwali? e.g. @array[0..2; 0]

[18:42] <rouking> Or, I suppose it's not a language version thing. It's just not impemented yet

[18:43] <rouking> s/impemented/implemented

[18:44] <rouking> So my question is really: will the 6.d release of Rakudo + MoarVM support it?

[18:48] *** zxcvz joined
[18:49] *** p6bannerbot sets mode: +v zxcvz

[18:51] *** wbn left
[18:51] *** caa51h left
[18:52] *** caa51h joined
[18:52] *** p6bannerbot sets mode: +v caa51h

[18:53] *** jast left
[18:54] *** wbn joined
[18:54] *** jast joined
[18:55] *** p6bannerbot sets mode: +v wbn

[18:55] *** p6bannerbot sets mode: +v jast

[19:01] *** domidumont left
[19:02] *** mattp_ joined
[19:02] <masak> rouking: not aware that anyone's working on it

[19:02] *** p6bannerbot sets mode: +v mattp_

[19:07] <Xliff> m: class A {}; my $a = A.new; my %h; %h{$a} = 1; %h.gist.say

[19:07] <camelia> rakudo-moar 49c005c55: OUTPUT: «{A<60096144> => 1}␤»

[19:08] <AlexDaniel> rouking: no, but if you want that to happen sooner you can try finding a corresponding ticket

[19:09] <AlexDaniel> rouking: it's possible that there is no ticket yet at all, which might explain why nobody is working on it :)

[19:16] <Xliff> m: say False.not

[19:16] <camelia> rakudo-moar 49c005c55: OUTPUT: «True␤»

[19:25] *** xinming_ left
[19:26] *** xinming joined
[19:26] *** p6bannerbot sets mode: +v xinming

[19:38] <masak> m: say "false".not

[19:38] <camelia> rakudo-moar 49c005c55: OUTPUT: «False␤»

[19:47] *** Bucciarati left
[19:48] *** avar left
[19:48] *** Bucciarati joined
[19:48] *** avar joined
[19:48] *** avar left
[19:48] *** avar joined
[19:48] *** p6bannerbot sets mode: +v avar

[19:49] *** p6bannerbot sets mode: +v Bucciarati

[19:49] *** p6bannerbot sets mode: +v avar

[19:49] *** azawawi joined
[19:49] *** p6bannerbot sets mode: +v azawawi

[19:49] <azawawi> timotimo: ping

[19:50] <azawawi> hi everyone

[19:53] <azawawi> .tell timotimo while testing p6doc output with app::perl6langserver, i found out that JSON::Fast has a compatibility problem while JS Parsers. Basically ␤, « and » need to be escaped. JSON::Tiny does that at slower pace but works perfectly. https://gist.github.com/azawawi/57c777a1984d61148801e9d6905857bd

[19:53] <yoleaux> azawawi: I'll pass your message to timotimo.

[20:00] <azawawi> https://pasteboard.co/HJn2ahY.png # p6doc hover help in App::Perl6LangServer and existing ide-perl6 get that for free after upgrading App::Perl6LangServer :)

[20:00] <azawawi> # ide-perl6 = atom ide-perl6 users

[20:01] <azawawi> experimental ofcourse at the moment and a bit slow

[20:03] *** jameslenz joined
[20:03] *** p6bannerbot sets mode: +v jameslenz

[20:07] *** jameslenz left
[20:18] *** azawawi left
[20:21] <buggable> New CPAN upload: App-Perl6LangServer-0.2.0.tar.gz by AZAWAWI http://modules.perl6.org/dist/App::Perl6LangServer:cpan:AZAWAWI

[20:24] <timotimo> but why :o

[20:24] <yoleaux> 19:53Z <azawawi> timotimo: while testing p6doc output with app::perl6langserver, i found out that JSON::Fast has a compatibility problem while JS Parsers. Basically ␤, « and » need to be escaped. JSON::Tiny does that at slower pace but works perfectly. https://gist.github.com/azawawi/57c777a1984d61148801e9d6905857bd

[20:25] *** azawawi joined
[20:25] *** p6bannerbot sets mode: +v azawawi

[20:25] <azawawi> timotimo: no idea lol

[20:26] <azawawi> timotimo: like node's JS parser does not like JSON::Fast when those characters are there...

[20:26] <azawawi> timotimo: compare the output of JSON::Fast vs JSON::Tiny for that string. and you will see the difference... JSON::Tiny is escaping unicode characters. JSON::Fast is not.

[20:28] <timotimo> m: say ord("␤")

[20:28] <camelia> rakudo-moar 49c005c55: OUTPUT: «10␤»

[20:28] <timotimo> um, that's not right

[20:28] <AlexDaniel> it is

[20:28] <AlexDaniel> camelia translates it

[20:28] <timotimo> m)

[20:28] <timotimo> of course

[20:28] <AlexDaniel> u: ␤

[20:28] <unicodable6> AlexDaniel, U+000A <control-000A> [Cc] (control character)

[20:28] <timotimo> m: say ord(parse-names("SYMBOL FOR NEWLINE"))

[20:28] <camelia> rakudo-moar 49c005c55: OUTPUT: «9252␤»

[20:28] <AlexDaniel> m: say ord("\x000A")

[20:28] <camelia> rakudo-moar 49c005c55: OUTPUT: «10␤»

[20:28] <timotimo> m: say parse-names("SYMBOL FOR NEWLINE").encode

[20:28] <camelia> rakudo-moar 49c005c55: OUTPUT: «utf8:0x<E2 90 A4>␤»

[20:29] <timotimo> OK, it does have to become a utf16 surrogate pair thingie

[20:29] <AlexDaniel> e: say ord("\x000A")

[20:29] <evalable6> AlexDaniel, rakudo-moar 49c005c55: OUTPUT: «10␤»

[20:29] <AlexDaniel> o_o

[20:29] <AlexDaniel> ah

[20:29] * AlexDaniel is blind

[20:29] <AlexDaniel> unicodable6 I DIDN'T MEAN THAT

[20:29] <timotimo> m: say ord "«"

[20:29] <camelia> rakudo-moar 49c005c55: OUTPUT: «171␤»

[20:30] <timotimo> that should fit into one utf16 piece no-problem?!

[20:30] <timotimo> m: say "«".encode

[20:30] <camelia> rakudo-moar 49c005c55: OUTPUT: «utf8:0x<C2 AB>␤»

[20:30] <AlexDaniel> e: https://gist.github.com/AlexDaniel/e14059c232cd4d82e87c4f57207aa661

[20:30] <evalable6> AlexDaniel, rakudo-moar 49c005c55: OUTPUT: «9252␤»

[20:30] <AlexDaniel> \o/

[20:30] <azawawi> timotimo: Hmmm escaping rules, paragraph one and two https://tools.ietf.org/html/rfc7159#section-7

[20:30] <AlexDaniel> m: https://gist.github.com/AlexDaniel/e14059c232cd4d82e87c4f57207aa661

[20:30] <camelia> rakudo-moar 49c005c55: OUTPUT: «9252␤»

[20:32] <timotimo> i would definitely not say "escaping rules" :) :)

[20:32] <azawawi> im sleepy :)

[20:33] <timotimo> i saw the opportunity for a pun and i took it

[20:33] <azawawi> hehe

[20:34] <timotimo> you know ... timotimo they say was ever one to bite the hand that feeds the gift horse right in its mouth ...

[20:34] <SmokeMachine> When I Fix #2385 it breaks a lot of tests... :(

[20:34] <timotimo> R#2385

[20:34] <synopsebot> R#2385 [open]: https://github.com/rakudo/rakudo/issues/2385 [LTA] LTA role multi method stubs enforce arguments but not return value

[20:35] <SmokeMachine> I made `eqv` of 2 signatures test its returns...

[20:38] * azawawi wishes for a PPI-like module in the Perl 6 module ecosystem to do some serious work

[20:38] <SmokeMachine> should `eqv` of 2 signatures test the returns?

[20:40] <timotimo> i think it should

[20:40] <azawawi> https://nextjournal.com/sdanisch/julia-gpu-programming # for fun

[20:42] <timotimo> you gonna make a port to OpenCL perhaps? :) :)

[20:42] <timotimo> binding*

[20:44] *** itaipu left
[20:47] *** grumble is now known as Spooktober

[20:48] *** molaf joined
[20:49] *** p6bannerbot sets mode: +v molaf

[20:51] *** noganex_ left
[20:51] *** noganex joined
[20:52] *** p6bannerbot sets mode: +v noganex

[20:58] <Geth> ¦ perl6-most-wanted: vadrer++ created pull request #43: tcl module; 

[20:58] <Geth> ¦ perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/pull/43

[20:59] <azawawi> timotimo: actually i have been hovering around https://github.com/touilleMan/godot-python for a perl6 godot game engine :)

[21:00] <azawawi> started with you sdl work, read about csfml and then said to myself why not read about an open source game engine :)

[21:05] *** Bucciarati left
[21:06] <azawawi> good night... cya tomorrow :)

[21:09] *** azawawi left
[21:18] *** random_yanek left
[21:18] *** Bucciarati joined
[21:19] *** random_yanek joined
[21:19] *** random_yanek left
[21:19] *** p6bannerbot sets mode: +v Bucciarati

[21:21] <masak> m: sub prefix:<H>($n) { " " x $n }; say H10

[21:21] <camelia> rakudo-moar 49c005c55: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    H10 used at line 1␤␤»

[21:22] <masak> this feels right to me; even though on some level `H10` *could* be parsed as `H 10`, Perl 6 doesn't go that way because it'd be confusing to assume a "token boundary" there

[21:39] <SmokeMachine> I think the problem is here: `'-'.IO.open: :enc<utf8-c8>, :w;` I don't know why...

[21:43] *** |oLa| left
[21:47] <Geth> ¦ doc: 20bbac119b | Coke++ | doc/Type/IO/Handle.pod6

[21:47] <Geth> ¦ doc: remove duplicated word.

[21:47] <Geth> ¦ doc: 

[21:47] <Geth> ¦ doc: - the test didn't notice this because "method method" is actually

[21:47] <Geth> ¦ doc: allowed.

[21:47] <synopsebot> Link: https://doc.perl6.org/type/IO::Handle

[21:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/20bbac119b

[21:52] *** random_yanek joined
[21:53] *** p6bannerbot sets mode: +v random_yanek

[22:03] *** jameslenz joined
[22:04] *** p6bannerbot sets mode: +v jameslenz

[22:04] *** HaraldJoerg left
[22:06] <Xliff> Hmm... here's a regex challenge. Can you convert 'GtkMessageRow' to 'message_row' ?

[22:07] <Xliff> It would be nice if it was a single expression, but not required. ;)

[22:08] <geekosaur> how general does it need to be?

[22:08] *** jameslenz left
[22:08] <Xliff> Well.. not that general. :)

[22:09] <Xliff> m: my rule { <[A-Z]><[a-z]>+ }; say "GtkMessageRow".split(/ <rule> /); 

[22:09] <camelia> rakudo-moar 58bc09975: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of - as character range; in Perl 6 please use .. for range, for explicit - in character class, escape it or place it as the first or last thing␤at <tmp>:1␤------> 3my rule { <[A-7…»

[22:09] <Xliff> m: my rule { <[A..Z]><[a..z]>+ }; say "GtkMessageRow".split(/ <rule> /); 

[22:09] <camelia> rakudo-moar 58bc09975: OUTPUT: «No such method 'rule' for invocant of type 'Match'. Did you mean any of these?␤    prune␤    roll␤␤  in block <unit> at <tmp> line 1␤␤»

[22:10] <Xliff> m: my rule tcword { <[A..Z]><[a..z]>+ }; say ("GtkMessageRow" ~~ / <tcword> /); 

[22:10] <camelia> rakudo-moar 58bc09975: OUTPUT: «｢Row｣␤ tcword => ｢Row｣␤»

[22:10] <Xliff> m: my rule tcword { <[A..Z]><[a..z]>+ }; say ("GtkMessageRow" ~~ / <tcword>+ /); 

[22:10] <camelia> rakudo-moar 58bc09975: OUTPUT: «｢Row｣␤ tcword => ｢Row｣␤»

[22:11] <Xliff> m: my regex tcword { <[A..Z]><[a..z]>+ }; say ("GtkMessageRow" ~~ / <tcword>+ /); 

[22:11] <camelia> rakudo-moar 58bc09975: OUTPUT: «｢GtkMessageRow｣␤ tcword => ｢Gtk｣␤ tcword => ｢Message｣␤ tcword => ｢Row｣␤»

[22:12] <Xliff> m: my regex tcword { <[A..Z]><[a..z]>+ }; say ("GtkMessageRow" ~~ / <tcword>+ /); $/<tcword>[1..*].map( *.lc ).join('_').say

[22:12] <camelia> rakudo-moar 58bc09975: OUTPUT: «｢GtkMessageRow｣␤ tcword => ｢Gtk｣␤ tcword => ｢Message｣␤ tcword => ｢Row｣␤message_row␤»

[22:12] <geekosaur> Id' probably use the unicode props instead of ranges, but more or less that, yes

[22:12] <Xliff> :>

[22:13] <Xliff> m: my regex tcword { <[A..Z]><[a..z]>+ }; ("GtkMessageRow" ~~ / <tcword>+ /); $/<tcword>[1..*].map( *.lc ).join('_').say

[22:13] <camelia> rakudo-moar 58bc09975: OUTPUT: «message_row␤»

[22:13] <Xliff> I'm sure someone can come up with something better. :)

[22:14] *** itaipu joined
[22:15] *** p6bannerbot sets mode: +v itaipu

[22:17] <Voldenet> fwiw you could get _ into the string by using lookaheads

[22:19] *** kurahaupo left
[22:19] *** kurahaupo joined
[22:19] <Voldenet> in perl5 it'd look like this: /(?<=[[:lower:]])(?=[[:upper:]])/_/g

[22:20] *** p6bannerbot sets mode: +v kurahaupo

[22:21] <timotimo> does that also change the case of the letters?

[22:21] <Voldenet> Nope, I doubt a simple regex can do this

[22:22] <geekosaur> perl 5 has \L and \U

[22:22] *** cognominal-p6 left
[22:26] <Voldenet> something like this would work in p5, but it's cheating: s/([[:lower:]]|^)([[:upper:]])/($1 ? $1 . "_" : "").lc$2/ge

[22:26] <geekosaur> s/(?<=[[:lower:]])((?=[[:upper:]]))/_\L$1/g

[22:27] <geekosaur> hm, not exactkybecause that's a lookahead

[22:27] <geekosaur> s/(?<=[[:lower:]])([[:upper:]])/_\L$1/g

[22:31] *** noganex_ joined
[22:31] <kurahaupo> $bar = join '_', map { ucfirst } split /(?<=[[:lower:]])(?=[[:upper:]])/, $bar

[22:32] *** p6bannerbot sets mode: +v noganex_

[22:33] <kurahaupo> Oh, lc not uc, nvm

[22:34] <kurahaupo> So should MyHTTP become my_hTTP or my_http ?

[22:35] *** noganex left
[22:37] *** HaraldJoerg1 joined
[22:38] *** p6bannerbot sets mode: +v HaraldJoerg1

[22:38] <Voldenet> kurahaupo: obviously my_hTTP ;)

[22:38] <Voldenet> m: my $x = <GtkMessageRow>; $x.subst(/<?after <lower>> <upper>+/, { "_" ~ lc $^a }, :g).say

[22:38] <camelia> rakudo-moar 58bc09975: OUTPUT: «Gtk_message_row␤»

[22:42] <Voldenet> m: my $x = <GtkHTTPMessage>; $x.subst(/<?after <lower>> <upper>+/, { "_" ~ lc $^a }, :g).say

[22:42] <camelia> rakudo-moar 58bc09975: OUTPUT: «Gtk_httpmessage␤»

[22:47] *** kensanata joined
[22:47] *** p6bannerbot sets mode: +v kensanata

[22:52] <Geth> ¦ doc: fda476f77b | (Christian Sánchez)++ | doc/Language/objects.pod6

[22:52] <Geth> ¦ doc: Fix #2359 Add link to arguments in Objects

[22:52] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fda476f77b

[22:52] <Geth> ¦ doc: f5205a0dd8 | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Language/objects.pod6

[22:52] <Geth> ¦ doc: Fixed doubled a

[22:52] <synopsebot> Link: https://doc.perl6.org/language/objects

[22:52] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f5205a0dd8

[22:52] <Geth> ¦ doc: a1480525de | (Juan Julián Merelo Guervós)++ (committed using GitHub Web editor) | doc/Language/objects.pod6

[22:52] <Geth> ¦ doc: Merge pull request #2400 from chsanch/update-links

[22:52] <Geth> ¦ doc: 

[22:53] <Geth> ¦ doc: Fix #2359 Add link to arguments in Objects

[22:53] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a1480525de

[23:01] <buggable> New CPAN upload: Oddmuse-0.0.3.tar.gz by SCHROEDER http://modules.perl6.org/dist/Oddmuse6:cpan:SCHROEDER

[23:17] *** kensanata left
[23:19] *** leah2 left
[23:23] *** HaraldJoerg1 left
[23:24] *** leah2 joined
[23:24] *** p6bannerbot sets mode: +v leah2

[23:28] *** pecastro left
[23:29] *** rindolf left
[23:32] *** MasterDuke joined
[23:32] *** p6bannerbot sets mode: +v MasterDuke

[23:33] *** MasterDuke left
[23:33] *** MasterDuke joined
[23:33] *** herbert.freenode.net sets mode: +v MasterDuke

[23:33] *** p6bannerbot sets mode: +v MasterDuke

[23:41] *** vrurg joined
[23:42] *** p6bannerbot sets mode: +v vrurg

[23:57] <Xliff> When specifying a C callback, I have to do something equivalent to "sub (&handler(Arg1Type, Arg2Type --> ReturnType)". Is there a way to put that into a constant so it can be reused if necessary?

[23:57] <Xliff> Actually, that should be...

[23:58] <Xliff> sub ( &handler(Arg1Type, Arg2Type --> ReturnType) )

[23:58] <Xliff> Would something like this work:

[23:59] <Xliff> constant ThatHandler := (Arg1Type, Arg2Type --> ReturnType) work?

[23:59] <Xliff> So then the sub definition would become "sub (ThatHandler &handler)"

