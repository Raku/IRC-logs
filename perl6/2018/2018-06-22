[00:05] <Xliff> jnthn++ - I'll check that out, thanks.

[00:10] *** lizmat left
[00:13] *** labster left
[00:17] *** markoong left
[00:18] *** diakopter left
[00:23] <Geth> ¦ ecosystem: 8ffebcf685 | (Jonathan Scott Duff)++ | META.list

[00:23] <Geth> ¦ ecosystem: Use sake from the perl6 org

[00:23] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/8ffebcf685

[00:30] *** bisectable6 left
[00:30] <timotimo> .tell moritz how do you feel about agreeing on an API for objects that want to have a method to dictate how it json-ifies that would work on both JSON::Fast and JSON::Tiny? and should it require a "marker" role to be composed, or just use .? for the call? and should a Str returned from such an object be checked if it generates a valid json result?

[00:30] <yoleaux> timotimo: I'll pass your message to moritz.

[00:30] *** bisectable6 joined
[00:30] *** ChanServ sets mode: +v bisectable6

[00:31] *** raschipi left
[00:32] *** bisectable6 left
[00:32] *** bisectable6 joined
[00:32] *** ChanServ sets mode: +v bisectable6

[00:33] *** bisectable6 left
[00:33] *** bisectable6 joined
[00:34] <timotimo> AlexDaniel: is "code execution code" actually correct? %)

[00:35] <AlexDaniel> timotimo: :) any other issues?

[00:38] <timotimo> don't think so

[00:38] <timotimo> hm, maybe

[00:38] <timotimo> "premature .perl chopping" sounds a bit strange

[00:38] <timotimo> "Fix long class names being cut off in X::TypeCheck message" or something maybe?

[00:39] <timotimo> i wonder if we have to put &lt; and &gt; instead of < and > to render it correctly everywhere

[00:42] *** wamba left
[00:49] *** Khisanth left
[01:00] *** kurahaupo_ joined
[01:02] *** kurahaupo left
[01:03] *** Khisanth joined
[01:14] *** MilkmanDan joined
[01:15] *** stmuk joined
[01:17] *** stmuk_ left
[01:30] *** zachk left
[01:46] *** molaf left
[01:58] *** molaf joined
[02:14] *** mahafyi left
[02:33] *** Kaypie left
[02:33] *** Kaypie joined
[02:36] *** kkrev joined
[02:54] *** caphook joined
[02:59] <AlexDaniel> El_Che: ⚠⚠⚠ IT HAPPENED! ⚠⚠⚠ WOOP-WOOP-WOOP

[02:59] <AlexDaniel> :)

[02:59] <caphook> simple way to swap first and last column in matrix @m = [1..4], [5..8], [9..12], [13..16];   # ???   

[03:00] <AlexDaniel> m: my @m = [1..4], [5..8], [9..12], [13..16]; @m[0, *-1] = @m[*-1, 0]; say @m

[03:00] <camelia> rakudo-moar c441d8d8b: OUTPUT: «[[13 14 15 16] [5 6 7 8] [9 10 11 12] [1 2 3 4]]␤»

[03:01] <AlexDaniel> caphook: like this? ↑

[03:01] <AlexDaniel> ah sorry

[03:01] <AlexDaniel> column, not row

[03:02] <AlexDaniel> m: my @m = [1..4], [5..8], [9..12], [13..16]; @m .= map: *.rotate; say @m

[03:02] <camelia> rakudo-moar c441d8d8b: OUTPUT: «[[2 3 4 1] [6 7 8 5] [10 11 12 9] [14 15 16 13]]␤»

[03:02] <AlexDaniel> caphook: ↑ this?

[03:03] <AlexDaniel> no, not that…

[03:03] <AlexDaniel> :)

[03:04] *** Merfont joined
[03:05] <AlexDaniel> m: my @m = [1..4], [5..8], [9..12], [13..16]; .[0, *-1] = .[*-1, 0] for @m; say @m

[03:05] <camelia> rakudo-moar c441d8d8b: OUTPUT: «[[4 2 3 1] [8 6 7 5] [12 10 11 9] [16 14 15 13]]␤»

[03:05] <AlexDaniel> caphook: what about this? :)

[03:06] <AlexDaniel> maybe this module is also worth a try: https://github.com/pierre-vigier/Perl6-Math-Matrix

[03:07] *** Kaypie left
[03:09] <caphook> AlexDaniel: yes,  .[0, *-1] = .[*-1, 0] for @m # it works;  Thanks!

[03:09] <AlexDaniel> caphook: even though it's really short, I think Math::Matrix should have even cleaner way of doing that

[03:09] <perlawhirl> you could also do .[0, *-1] .= reverse for @m

[03:11] <perlawhirl> it's only one char shorter, but prevents you having to repeat the indices again

[03:13] <perlawhirl> though my suspicion is that it would probably be marginally slower (depending on the size of your matrix)

[03:23] *** perlpilot left
[03:28] *** kkrev left
[03:37] *** ryn1x left
[03:53] *** klapperl joined
[04:02] *** Zoffix joined
[04:03] <Zoffix> AlexDaniel++ samcv++ # release

[04:03] <yoleaux> 21 Jun 2018 20:25Z <drforr> Zoffix: I'll give it some thought tonight.

[04:03] <yoleaux> 21 Jun 2018 20:28Z <drforr> Zoffix: I know of no other version of

[04:03] <yoleaux> 21 Jun 2018 20:29Z <drforr> Zoffix: ... of the talk.

[04:05] *** Xliff left
[04:09] *** mahafyi joined
[04:11] *** molaf left
[04:26] <samcv> :)

[04:34] *** xtreak joined
[04:48] *** curan joined
[04:53] *** ufobat_ joined
[05:06] *** xtreak left
[05:06] *** xtreak joined
[05:06] *** xtreak left
[05:15] *** RandalSchwartz joined
[05:16] *** RandalSchwartz left
[05:17] <moritz> timotimo: something like an as-json() method?

[05:17] <yoleaux> 00:30Z <timotimo> moritz: how do you feel about agreeing on an API for objects that want to have a method to dictate how it json-ifies that would work on both JSON::Fast and JSON::Tiny? and should it require a "marker" role to be composed, or just use .? for the call? and should a Str returned from such an object be checked if it generates a valid json result?

[05:17] *** RandalSchwartz joined
[05:17] <RandalSchwartz> so I might be here asking some p6 questions over the next month or so

[05:18] <RandalSchwartz> first question: what is the difference between "say" and "put".

[05:18] *** xtreak joined
[05:19] <RandalSchwartz> Ahh, say for humans, put for machines?

[05:24] *** sauvin joined
[05:24] *** sauvin left
[05:29] *** sauvin joined
[05:30] <El_Che> AlexDaniel: will release when I am out of the train!

[05:30] <El_Che> thx!

[05:31] *** HaraldJoerg joined
[05:40] *** lizmat joined
[05:41] <caphook> How to use class Macro ?

[05:42] *** |oLa| joined
[05:43] <moritz> RandalSchwartz: exactly

[05:44] <RandalSchwartz> thanks

[05:47] *** domidumont joined
[05:51] <moritz> RandalSchwartz: what this means under the hood is that say() calls .gist, and put() calls .Str

[05:51] <moritz> which makes quite the difference for match objects with captures, for example

[05:58] <RandalSchwartz> ok

[06:13] *** domidumont left
[06:13] *** kurahaupo_ left
[06:14] *** domidumont joined
[06:24] *** wamba joined
[06:26] *** sno left
[06:26] *** domidumont left
[06:31] *** hami joined
[06:34] *** hami left
[06:35] *** |oLa| left
[06:37] *** robertle joined
[06:43] *** domidumont joined
[06:48] *** MilkmanDan left
[06:49] *** MilkmanDan joined
[06:49] *** Ven`` joined
[07:00] <Geth> ¦ doc: d7538b6cec | (JJ Merelo)++ | doc/Language/traps.pod6

[07:00] <Geth> ¦ doc: Removes contradictory statement in traps refs #2113

[07:00] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d7538b6cec

[07:00] <Geth> ¦ doc: 5afa31cf56 | (JJ Merelo)++ | writing-docs/STYLEGUIDE.md

[07:00] <Geth> ¦ doc: Adds exception for empty hash in writing style docs closes #2113

[07:00] <synopsebot_> Link: https://doc.perl6.org/language/traps

[07:00] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5afa31cf56

[07:01] *** jmerelo joined
[07:01] <jmerelo> Morning from Orly airport

[07:02] <lookatme> morning

[07:04] *** wamba left
[07:04] *** zakharyas joined
[07:06] *** darutoko joined
[07:06] <jmerelo> Today, I guess, is the day of the TPCiSLC hangover...

[07:07] *** wamba joined
[07:16] *** jmerelo left
[07:35] *** Ven`` left
[07:35] *** Ven` joined
[07:45] *** Ven` left
[07:45] *** Ven`` joined
[07:47] *** caphook left
[08:01] *** rindolf joined
[08:02] *** ChoHag left
[08:04] *** zakharyas left
[08:05] *** natrys joined
[08:17] *** Ven` joined
[08:17] *** Ven`` left
[08:20] *** zakharyas joined
[08:27] *** mahafyi left
[08:32] *** xtreak left
[08:52] *** damnlie left
[08:52] *** Ven` left
[08:54] *** damnlie joined
[08:55] *** xtreak joined
[09:03] *** Ven`` joined
[09:04] *** zakharyas left
[09:04] *** fou joined
[09:05] <fou> m: my %h .= new; %h.push: ('+' => &+)

[09:05] <camelia> rakudo-moar c441d8d8b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3my %h .= new; %h.push: ('+' => &+7⏏5)␤    expecting any of:␤        prefix␤        term␤»

[09:05] *** pmurias joined
[09:05] <fou> why doesn't it work? I have to use lambdas :(

[09:07] *** zakharyas joined
[09:07] <moritz> there is not syntax &+

[09:07] <moritz> you can use &infix:<+>

[09:07] <moritz> or maybe &[+]

[09:07] <moritz> m: my &c = &[+]; say &c.^name

[09:07] <camelia> rakudo-moar c441d8d8b: OUTPUT: «Sub+{is-pure}+{Precedence}␤»

[09:08] <pmurias> I have a difficult naming problem. How should the AST that QAST is turned before being passed to java land to be turned into Truffle-compatible AST (and run)

[09:09] <pmurias> It's basically the AST that Truffle will run but in array form ['stmts', ['say', ['sval', 'Hello World']]]

[09:09] <fou> moritz: thanks!

[09:09] *** sena_kun joined
[09:11] <moritz> pmurias: TTAST? Truffle Transfer AST?

[09:12] <moritz> or just TAST

[09:12] <moritz> for moarvm we have MAST

[09:17] <pmurias> moritz: I was thinking of calling it TAST too

[09:21] *** Schepeers left
[09:42] <stmuk> still waiting for Larry's and Liz's talks on youtube .. I suppose they might appear today (?)

[09:47] <El_Che> same here

[09:47] *** gregf_ left
[09:47] <El_Che> [Coke]'s talk are already up

[09:47] <El_Che> and DrForr's as well

[09:48] <El_Che> and an other one from someone I don't know

[09:48] <El_Che> (if in the channel, wave :) )

[09:48] *** xtreak left
[09:49] *** Ven``_ joined
[09:57] *** Schepeers joined
[09:58] *** fou left
[10:08] *** zakharyas left
[10:08] *** zakharyas joined
[10:10] *** Ven`` left
[10:12] *** gregf_ joined
[10:14] *** Ven``_ left
[10:34] *** xtreak joined
[10:40] *** phdphil joined
[10:47] <phdphil> p6:'༊ᖮᙄᕼᒂᕼᐞـᗠઌٲ'.ords.map(* div 50).chrs.say

[10:47] <yoleaux> 20 Apr 2018 19:09Z <MasterDuke> phdphil: you could also look at the last section of https://docs.perl6.org/language/operators#Reduction_Operators. e.g., `say [\<] 1,2,3,0` almost does what you want

[10:47] <evalable6> phdphil, rakudo-moar c441d8d8b: OUTPUT: «Morning p6!␤»

[10:48] <phdphil> I have a question regarding .combinations

[10:49] <phdphil> p6:(2..*).combinations(2).grep({[+] $_ > 10}).first

[10:49] <evalable6> phdphil, rakudo-moar c441d8d8b: OUTPUT: «(exit code 1) Cannot .elems a lazy list␤  in block <unit> at /tmp/4pXoQABZbZ line 1␤␤»

[10:50] <phdphil> Does anyone know of any discussion about why the combinations method requires a non-lazy sequence?

[10:52] *** jmerelo joined
[10:53] <phdphil> The design and the docs say that it is 'erroneous' to ask for combinations of a lazy list

[10:53] <phdphil> E.g. https://design.perl6.org/S32/Containers.html

[10:54] <phdphil> But unless the order of the combinations is prescribed (which I can't see anywhere), I don't see why it couldn't work on a lazy list

[11:01] *** markoong joined
[11:04] *** zakharyas left
[11:08] *** zakharyas joined
[11:11] *** curan left
[11:13] <Zoffix> phdphil: what would an implementation for a lazy list look like?

[11:13] *** jmerelo left
[11:14] <Zoffix> fwiw, here's the current one: https://github.com/rakudo/rakudo/blob/master/src/core/Rakudo/Iterator.pm6#L738-L783

[11:15] <phdphil> Zoffix: The result would just work on an incrementally expanding list; it would need to keep a history of the original list as-expanded

[11:16] <phdphil> so (2..*).combinations(2) could emit (2 3) (2 4) (3 4) (2 5) (3 5) (4 5) etc

[11:16] <Zoffix> phdphil: history is all the previous elements?

[11:17] <Zoffix> "lazy" is basically synomous with "infinite" or "bad things will happen (e.g. out of RAM)" if you reify everything at once, so if you have to keep around a copy of all the reified elements, I'd assume that's why lazy stuff isn't allowed.

[11:17] <phdphil> Zoffix: of the lazy list, yes

[11:18] <phdphil> But you do this with any ... statement

[11:18] <phdphil> 1,1,*+*...*

[11:19] <phdphil> p6:say (1,1,*+*...*).head(10)

[11:19] <evalable6> phdphil, rakudo-moar c441d8d8b: OUTPUT: «(1 1 2 3 5 8 13 21 34 55)␤»

[11:19] *** zakharyas left
[11:19] <Zoffix> no, it's a Seq. It doesn't keep stuff around unless you ask it to cache stuff (well, other than N elems it needs to give as args)

[11:19] <phdphil> p6:say (1,1,{@_.sum}...*).head(10)

[11:19] <evalable6> phdphil, rakudo-moar c441d8d8b: OUTPUT: «(1 1 2 4 8 16 32 64 128 256)␤»

[11:20] <Zoffix> hehe

[11:23] <Zoffix> right and keeps nomming all the RAM

[11:23] <Zoffix> m: say +(1,1,{@_.sum}...*)

[11:23] <camelia> rakudo-moar c441d8d8b: OUTPUT: «Cannot .elems a lazy list␤  in block <unit> at <tmp> line 1␤␤»

[11:23] <phdphil> p6:{(.pull-one,.pull-one,{say @_.combinations(2);.pull-one}...*).head(10)}((2..*).iterator)

[11:23] <evalable6> phdphil, rakudo-moar c441d8d8b: OUTPUT: «((2 3))␤((2 3) (2 4) (3 4))␤((2 3) (2 4) (2 5) (3 4) (3 5) (4 5))␤((2 3) (2 4) (2 5) (2 6)…»

[11:23] <evalable6> phdphil, Full output: https://gist.github.com/090b653940d451e7c75a7171caabd433

[11:24] <phdphil> It's just like any other lazy list or ... comprehension using @_

[11:24] <phdphil> It only noms all the ram if you let it

[11:24] <phdphil> I can imagine it being disabled by default, perhaps, and enabled with a :zigzag or something

[11:27] <Zoffix> I filed this as R#1948

[11:27] <synopsebot_> R#1948 [open]: https://github.com/rakudo/rakudo/issues/1948 .combinations unnecessarily requires non-lazy list

[11:28] <phdphil> p6: {(.pull-one,.pull-one,{my$a=.pull-one;say @_.map({$_,$a});$a}...*).head(5)}((2..*).iterator)

[11:28] <camelia> rakudo-moar c441d8d8b: OUTPUT: «((2 4) (3 4))␤((2 5) (3 5) (4 5))␤((2 6) (3 6) (4 6) (5 6))␤»

[11:28] <phdphil> Thanks

[11:28] <phdphil> Was expecting to find some documentation somewhere

[11:29] *** damnlie left
[11:30] *** damnlie joined
[11:35] <Zoffix> phdphil: BTW, do you have a usecase for partial list of combinations like that? Would you comment it on the issue?

[11:36] <phdphil> Does code golf count?

[11:37] <Zoffix> I imagine a lazy-list variant would be less performant and some things are lazy-but-not-infinite (e.g. lines from a file), so we'd be making stuff like that less performant and if there's no good usecase for the partial list of combinations, then maybe it's not a good idea.

[11:37] <Zoffix> phdphil: I don't count code golf as a usecase, but I don't know if others do :P

[11:38] <phdphil> :D

[11:38] <phdphil> I can invent one

[11:39] <Zoffix> ok :)

[11:39] * Zoffix &

[11:39] *** Zoffix left
[11:39] *** Ven`` joined
[11:41] *** Ven``_ joined
[11:48] *** Ven`` left
[11:48] *** Ven`` joined
[12:01] *** cog joined
[12:02] *** undersightable6 left
[12:03] *** Merfont is now known as Kpimov

[12:03] *** Kpimov is now known as Kaiepi

[12:03] *** undersightable6 joined
[12:03] *** ChanServ sets mode: +v undersightable6

[12:04] *** cognominal left
[12:07] *** Ven``_ left
[12:08] *** Ven``_ joined
[12:13] *** hami joined
[12:14] *** lizmat left
[12:30] *** sno joined
[12:32] *** Ven` joined
[12:33] *** Ven``_ left
[12:34] *** perlpilot joined
[12:34] *** Ven`` left
[12:35] *** hami left
[12:35] *** xtreak left
[12:42] *** zakharyas joined
[12:43] <Geth> ¦ p6-sake: ff5a68841e | (Aleks-Daniel Jakimenko-Aleksejev)++ | LICENSE

[12:43] <Geth> ¦ p6-sake: Added LICENSE file

[12:43] <Geth> ¦ p6-sake: review: https://github.com/perl6/p6-sake/commit/ff5a68841e

[12:51] *** noganex joined
[12:58] *** mahafyi joined
[13:00] *** aborazmeh joined
[13:00] *** aborazmeh left
[13:00] *** aborazmeh joined
[13:04] *** zakharyas left
[13:05] *** zakharyas joined
[13:05] <buggable> New CPAN upload: IP-Random-0.0.5.tar.gz by JMASLAK http://modules.perl6.org/dist/IP::Random:cpan:JMASLAK

[13:10] *** natrys left
[13:12] * perlpilot wonders what IP::Random would look like with sets rather than the grep logic

[13:25] *** perlpilot left
[13:26] *** ChoHag joined
[13:26] *** skids joined
[13:30] <Geth> ¦ p6-sake: 009f1c746c | (Aleks-Daniel Jakimenko-Aleksejev)++ | README.md

[13:30] <Geth> ¦ p6-sake: README → README.md

[13:30] <Geth> ¦ p6-sake: review: https://github.com/perl6/p6-sake/commit/009f1c746c

[13:30] <Geth> ¦ p6-sake: c32f51924d | (Aleks-Daniel Jakimenko-Aleksejev)++ | README.md

[13:30] <Geth> ¦ p6-sake: Added more info to the README

[13:30] <Geth> ¦ p6-sake: review: https://github.com/perl6/p6-sake/commit/c32f51924d

[13:32] <Geth> ¦ p6-sake: 19025ead61 | (Aleks-Daniel Jakimenko-Aleksejev)++ | README

[13:32] <Geth> ¦ p6-sake: Delete README (there's README.md now)

[13:32] <Geth> ¦ p6-sake: 

[13:32] <Geth> ¦ p6-sake: Oops in 009f1c746cf85a7a8c35531fbe061e719c2d4567.

[13:32] <Geth> ¦ p6-sake: review: https://github.com/perl6/p6-sake/commit/19025ead61

[13:35] *** lizmat joined
[13:36] *** Ven` left
[13:41] <El_Che> AlexDaniel: packages are being built as we speak

[13:41] *** aborazmeh left
[13:41] *** gabiruh left
[13:42] *** kurahaupo joined
[13:42] *** gabiruh joined
[13:43] *** ChoHag left
[13:44] <Geth> ¦ p6-sake: cb9bd42c5b | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[13:44] <Geth> ¦ p6-sake: Trailing whitespace

[13:44] <Geth> ¦ p6-sake: review: https://github.com/perl6/p6-sake/commit/cb9bd42c5b

[13:44] <Geth> ¦ p6-sake: 79250c0198 | (Aleks-Daniel Jakimenko-Aleksejev)++ | bin/sake

[13:44] <Geth> ¦ p6-sake: Print the list of available tasks if none given

[13:44] <Geth> ¦ p6-sake: 

[13:44] <Geth> ¦ p6-sake: Maybe it should run something like ‘all’ by default, but for now this

[13:44] <Geth> ¦ p6-sake: is more useful than the previous behavior.

[13:44] <Geth> ¦ p6-sake: review: https://github.com/perl6/p6-sake/commit/79250c0198

[13:45] <Geth> ¦ p6-sake: a2d4574c57 | (Aleks-Daniel Jakimenko-Aleksejev)++ | .gitignore

[13:45] <Geth> ¦ p6-sake: Basic .gitignore file

[13:45] <Geth> ¦ p6-sake: review: https://github.com/perl6/p6-sake/commit/a2d4574c57

[13:48] <timotimo> moritz: how do you think "i want to return a string to be included verbatim into the json output" should be handled?

[13:50] <Geth> ¦ p6-sake: 58c632ff2d | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Sake.pm6

[13:50] <Geth> ¦ p6-sake: Don't use shell when not needed

[13:50] <Geth> ¦ p6-sake: 

[13:50] <Geth> ¦ p6-sake: See issue #13.

[13:50] <Geth> ¦ p6-sake: review: https://github.com/perl6/p6-sake/commit/58c632ff2d

[13:51] <moritz> timotimo: not at all

[13:52] <timotimo> OK, so returning a string from to-json will result in the same thing as actually being a string, i.e. quotes around, escaping inside

[13:52] <moritz> because the library would need to re-parse it to make sure it's actually valid JSON

[13:55] <timotimo> do we define any semantics to returning an object from to-json that has its own to-json method?

[13:55] <timotimo> like, the possibility of infinite recursion?

[13:55] <moritz> no, it should return a data structure that is already json-serializable

[13:56] <AlexDaniel> timotimo: I don't know if you have notifications on github enabled, so ping: https://github.com/perl6/doc/pull/2100

[13:56] <moritz> also, please don't name it "to-json". "to" implies you're doing something to the object, changing it

[13:56] <timotimo> ok, as-json?

[13:56] <moritz> I'd prefer that

[13:57] <moritz> though I'm not totally happy with that name either

[13:57] <moritz> because it's supposed to return a json-compatible data structure, not JSON

[13:57] <timotimo> .for-json

[13:58] <moritz> sounds sensible

[13:58] <timotimo> i have many more prepositions!

[13:58] <moritz> though let us not decide right away

[13:58] *** natrys joined
[13:58] <timotimo> .with-json, .under-json, ...

[13:58] <timotimo> .json-compatible

[13:59] *** molaf joined
[13:59] <timotimo> AlexDaniel: chrome doesn't have something like firefox's reader mode built-in?

[14:00] <AlexDaniel> timotimo: I think it doesn't, but you can install “Chrome Reader View” extension

[14:00] <AlexDaniel> which claims to do the same

[14:01] <timotimo> i wonder if the PR would be less troublesome if the button to disable colors went in the header or footer instead of each text box

[14:02] <AlexDaniel> the PR would be less troublesome if it was justified :)

[14:05] <Geth> ¦ p6-sake: 87c7acd5d0 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Sake.pm6

[14:05] <Geth> ¦ p6-sake: Sink task results

[14:05] <Geth> ¦ p6-sake: 

[14:05] <Geth> ¦ p6-sake: Otherwise Procs can fail silently. See issue #12.

[14:05] <Geth> ¦ p6-sake: review: https://github.com/perl6/p6-sake/commit/87c7acd5d0

[14:07] *** zakharyas left
[14:08] *** lookatme left
[14:08] *** zakharyas joined
[14:14] *** sno left
[14:17] *** sno joined
[14:17] <Geth> ¦ p6-sake: 8102fcb173 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Sake.pm6

[14:17] <Geth> ¦ p6-sake: Pass the task object into the block

[14:17] <Geth> ¦ p6-sake: 

[14:17] <Geth> ¦ p6-sake: As mentioned in issue #7, this can be useful sometimes. This change

[14:17] <Geth> ¦ p6-sake: should be backward compatible for most users, unless someone

[14:17] <Geth> ¦ p6-sake: explicitly restricted the signature (e.g. -> {…} instead of just {…}).

[14:17] <Geth> ¦ p6-sake: 

[14:17] <Geth> ¦ p6-sake: By the way, the default .gist of Sake-Task seems to be good enough.

[14:17] <Geth> ¦ p6-sake: review: https://github.com/perl6/p6-sake/commit/8102fcb173

[14:20] *** Ven`` joined
[14:25] <jdv79> are {} chars really called brackets?

[14:26] <Kaiepi> i thought [] were brackets

[14:26] <timotimo> i call them braces

[14:26] <jdv79> "Brackets are used to declare blocks."

[14:26] <jdv79> first i've seen it described as such

[14:26] <timotimo> that sounds like it wants to be changed

[14:26] <cono> curly braces, square braces?

[14:27] <jdv79> maybe curly brackets would be better?

[14:27] <jdv79> yeah "brackets" makes me thing of []

[14:27] <cono> +1

[14:30] <AlexDaniel> https://github.com/perl6/doc/issues/2114

[14:31] <geekosaur> there's a graphic somewhere ppointing out that definitions of "brackets" v "braces" etc. vary wildly

[14:31] <geekosaur> define terms up front and use examples

[14:32] <AlexDaniel> I think it should always be “curly braces” and “square brackets”

[14:33] <jdv79> why not disambiguate like that - yeah.

[14:36] *** lizmat left
[14:36] <AlexDaniel> also: https://github.com/perl6/doc/issues/2115

[14:36] <AlexDaniel> I remember there was another issue similar to this one

[14:37] <AlexDaniel> i.e. a word was omitted for no good reason

[14:39] <AlexDaniel> ah, it was this: https://github.com/perl6/doc/commit/eb8f7f24803517db0539fe77a89fed2696b98966

[14:43] <Juerd> re https://github.com/perl6/doc/blob/master/writing-docs/STYLEGUIDE.md  # why is there a difference between the recommended style for empty hashes and non-empty hashes?

[14:44] <Geth> ¦ doc: fdcdff8725 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 3 files

[14:44] <Geth> ¦ doc: “right-hand side” is more natural

[14:44] <Geth> ¦ doc: 

[14:44] <Geth> ¦ doc: See the comments on

[14:44] <Geth> ¦ doc: https://github.com/perl6/doc/commit/eb8f7f24803517db0539fe77a89fed2696b98966

[14:44] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fdcdff8725

[14:48] *** sno left
[14:48] *** domidumont left
[14:49] *** sno joined
[14:49] *** domidumont joined
[14:49] <AlexDaniel> Juerd: because { } can mean a block or a hash, depending on what's inside. So it's easier to recommend %() for hashes because it clearly results in a hash. However, %() is not an empty hash :(

[14:50] <AlexDaniel> Juerd: see this for more info: https://github.com/rakudo/rakudo/issues/1946

[14:55] <tyil> the docs on POD show how to access the current file's POD document (https://docs.perl6.org/language/pod#Accessing_Pod), but is it possible to access another file's POD documentation, preferably without altering the current program's $=pod

[14:57] *** domidumont left
[14:58] *** wamba left
[14:59] <tyil> if anyone has any idea and would like to get some Stack Overflow rep for it, I also asked it on SO https://stackoverflow.com/questions/50990701/access-pod-from-another-perl-6-file

[15:01] <geekosaur> afaik it's not, you have to load the file to process its POD which will incorporate it into your program

[15:01] <timotimo> are you sure evaling another file will change the current program's $=pod?

[15:02] <geekosaur> I thought that had come up before? although maybe it was in the opposite direction

[15:03] <timotimo> i haven't touched this part of the code in ages, but it'd be very surprising to me if that happened

[15:04] *** zakharyas left
[15:07] *** Zoffix joined
[15:07] *** pmurias left
[15:07] <Zoffix> tyil: are you able to modify the file whose pod you want?

[15:07] <Zoffix> Pretty sure I did it before without modifications and it's probably in the logs somewhere

[15:07] <Juerd> AlexDaniel: Oh my

[15:08] <Juerd> AlexDaniel: What a mess

[15:08] <tyil> I think I can

[15:08] <Zoffix> tyil: but with modification, just stick `$=pod` as last statement, and then use EVALFILE to grab it

[15:08] *** Ven`` left
[15:09] <tyil> timotimo: if I EVALFILE another file with POD it seems to overwrite the POD I have in the running file

[15:09] <Zoffix> tyil: https://gist.github.com/zoffixznet/20eef4ac923325a69b674d7dd2a4828d

[15:09] <tyil> Zoffix: what if the file has a MAIN sub

[15:10] <Zoffix> tyil: what are you trying to do?

[15:10] <Juerd> AlexDaniel: But if hash() and hash(...) do unambiguously create hashes, why aren't those recommended over %(...) and {} ?

[15:10] <tyil> extract a file's POD data so I can parse it, and filter out all the declarator POD sections

[15:11] <Zoffix> tyil: also, commenters are asking questions about your grant proposal: http://news.perlfoundation.org/2018/06/grant-proposal-introduction-to.html#comments

[15:11] <tyil> basically p6doc but without declarator sections

[15:11] <Juerd> AlexDaniel: Or even parenless: my $foo = hash;

[15:11] <Zoffix> tyil: and the file could have arbitrary code?

[15:11] <tyil> yes

[15:11] <tyil> also I'll respond to said comments

[15:12] <timotimo> fascinating

[15:13] <Juerd> Also, there appears to be a type array (not Array). What's that?

[15:13] <timotimo> native arrays

[15:13] <AlexDaniel> tyil: why not `hash`? That's a good question

[15:13] <timotimo> like arrays of int32 or so

[15:13] <Juerd> timotimo: Thanks

[15:13] <AlexDaniel> and why `hash` is {} and `array` is a native array is also a good question

[15:13] <Juerd> m: my $foo = hash; say $foo;

[15:13] <camelia> rakudo-moar c441d8d8b: OUTPUT: «{}␤»

[15:14] <timotimo> hash is a sub, but array is a type?

[15:14] <AlexDaniel> sure-sure, but that kinda sucks?

[15:15] <tyil> AlexDaniel: ?

[15:15] <Juerd> m: .say for list, array, hash

[15:15] <camelia> rakudo-moar c441d8d8b: OUTPUT: «()␤(array)␤{}␤»

[15:15] <AlexDaniel> tyil: oh sorry, that was for Juerd

[15:15] *** dha joined
[15:15] *** sno left
[15:15] <tyil> ah, ok

[15:15] <AlexDaniel> Juerd: can you ticket that? Who knows, maybe in v6.d, or v6.e, or at least maybe v6.z…

[15:16] <Juerd> AlexDaniel: I will ticket it for the documentation style page

[15:16] <Zoffix> m: .say for list, array, hash, pair, set(), bag(), mix()

[15:16] <camelia> rakudo-moar c441d8d8b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling pair() will never work with signature of the proto (Mu, Mu, *%)␤at <tmp>:1␤------> 3.say for list, array, hash, 7⏏5pair, set(), bag(), mix()␤»

[15:16] <Zoffix> m: .say for list, array, hash, pair(), set(), bag(), mix()

[15:16] <camelia> rakudo-moar c441d8d8b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling pair() will never work with signature of the proto (Mu, Mu, *%)␤at <tmp>:1␤------> 3.say for list, array, hash, 7⏏5pair(), set(), bag(), mix()␤»

[15:16] <Zoffix> m: .say for list, array, hash, pair(1,1), set(), bag(), mix()

[15:16] <camelia> rakudo-moar c441d8d8b: OUTPUT: «()␤(array)␤{}␤1 => 1␤set()␤Bag()␤Mix()␤»

[15:17] *** lizmat joined
[15:18] <Zoffix> s: &EVALFILE

[15:18] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/c441d8d8b/src/core/ForeignCode.pm6#L89

[15:18] <AlexDaniel> Juerd: list/array/hash can be a rakudo ticket

[15:19] *** dha left
[15:20] <Zoffix> can EVAL affect outer code?

[15:20] <Zoffix> m: my $x; '$x = 42'.EVAL; say $x

[15:20] <camelia> rakudo-moar c441d8d8b: OUTPUT: «42␤»

[15:20] <Zoffix> oh

[15:23] <El_Che> https://github.com/nxadm/rakudo-pkg/releases/tag/v2018.06-01

[15:23] <El_Che> new packages

[15:24] <AlexDaniel> El_Che++

[15:24] <Zoffix> El_Che++

[15:24] <tyil> Zoffix: I've posted replies, but they need to be approved by the site admin

[15:25] <tyil> on the most common topic, time estimation, I have no clue how long it would take to write an actual book. I'm going for 200 - 300 pages, and was hoping I could do that in 4 months, spending about 3 or 4 full-time days per week 

[15:25] <Zoffix> tyil: here's a really hacky solution: https://gist.github.com/zoffixznet/5eecfa5c50510e6295df23c1eb4d9fc8

[15:26] <Zoffix> tyil: but even with it, compile time stuff would still be executed. This is kinda of a problem with Pod6 in that there's no way to extract the Pod without running annything. I think tbrowder_ was working on making that better.

[15:26] <Zoffix> compile time + INIT stuff too. Using BEGIN phaser instead of INIT to .keep the $=pod gives the wrong file's pod

[15:27] <tyil> is there a grammar available in the core language that I could use to extract only the POD data I'm interested in, put that in a different file and then run that file?

[15:28] <japhb> timotimo, moritz: In a personal proof of concept project I needed to serialize one of several classes across a channel, and my solution was something like: role Serializeable { method as-struct(--> Map:D) { ... }; method from-struct(Map:D $struct) { ... }; method as-json(--> Str:D) { to-json self.as-struct }; method from-json(Str:D $json --> $?CLASS:D) { self.from-struct(from-json $json) } }

[15:28] <japhb> Or something like that; I'm typing it from memory.

[15:28] <Zoffix> tyil: that's precisely the problem is that the answer is "not really". Pod can contain arbitrary code in it, like in configuration values and stuff.

[15:29] <tyil> that's sad :(

[15:30] <tyil> my main issue is seeing declarator blocks in p6doc, which feel very out of place coming before the actual POD document

[15:30] <tyil> and I couldn't see an easy way to "fix" that

[15:30] <Juerd> AlexDaniel: Tickets created (https://github.com/perl6/doc/issues/2117 and https://github.com/rakudo/rakudo/issues/1949)

[15:30] <japhb> timotimo, moritz: Anyways, I just added that role to each class I wanted to have auto-serialization of, and defined as-struct and from-struct methods for that class, producing/taking a json-friendly Map structure

[15:31] *** rindolf left
[15:31] <tyil> I could attempt to just open a file, scan all lines until I find a =begin pod, write the lines to another file until I find the =end pod, and *then* parse that other file

[15:31] *** robertle left
[15:32] <Zoffix> tyil: and worse still, language can be mutated as it's being executed, so if you elimitate Perl 6 code runs, you can potentially be parsing as pod stuff that isn't meant to be pod, but is rather part of some slang

[15:32] *** dha joined
[15:32] <Zoffix> (I tried making `sub circumfix:<=begin pod> { say @_ }; sub circumfix:<=end pod> { say @_ }` thinking it'd work, but it still parses it as Pod it seems)

[15:32] <tbrowder_> tylil: have you looked at drforr’s grammar modules? might be some help there

[15:33] <tyil> tbrowder_: I have not

[15:33] <Zoffix> eco: author:drforr

[15:33] <buggable> Zoffix, Found 5 results: ANTLR4::Grammar, Perl6::Parser, Inline::Scheme::Guile, Readline, Format::Lisp. See https://modules.perl6.org/s/author%3Adrforr

[15:33] <tyil> I can take a peek after dinner, on which I have to start about a couple minutes ago

[15:35] <tbrowder_> for the record, i am not working on anything to extract pod. 

[15:36] <tyil> also, if I'm not mistaken, jnthn is part of the team behind CommaIDE, right?

[15:36] <AlexDaniel> ye

[15:36] <AlexDaniel> Juerd: thanks

[15:37] <tyil> alright, I'll try to poke him later tonight

[15:39] <Geth> ¦ p6-sake: 95ab244a6d | (Aleks-Daniel Jakimenko-Aleksejev)++ | META6.json

[15:39] <Geth> ¦ p6-sake: New version + other META6.json tweaks

[15:39] <Geth> ¦ p6-sake: review: https://github.com/perl6/p6-sake/commit/95ab244a6d

[15:44] <AlexDaniel> greppable6: array

[15:45] <AlexDaniel> ??

[15:45] <greppable6> AlexDaniel, 7157 lines, 355 modules: https://gist.github.com/5a096fac1d8030c2df21534ff15dea80

[15:50] *** Zoffix left
[15:52] *** dha left
[15:52] *** jmerelo joined
[15:52] <jmerelo> That's not fair. 5 issues while I was flying...

[15:53] <AlexDaniel> :P

[15:54] <jmerelo> And on a Friday afternoon. Never deploy on a Friday afternoon, never create more than 1 issue on a Friday afternoon. Those are the rules, I didn't make them up.

[15:54] <El_Che> whyt, there are less people at the office on friday

[15:54] <El_Che> it's calm

[15:54] <El_Che> noone will notice!

[15:55] <El_Che> :)

[15:55] <lizmat> it's Friday ?

[15:55] <El_Che> ah, you survived :)

[15:55] * jmerelo double checks that if it's Iceland playing against Nigeria, it's Friday

[15:55] <jmerelo> lizmat: welcome back!

[15:56] <lizmat> hi,  not back yet

[15:56] <lizmat> last day of course / hackathon at SLC

[15:56] <lizmat> *in

[15:56] <jmerelo> lizmat: have fun :-)

[15:56] <lizmat> jmerelo: thanks

[15:57] <jmerelo> releasable6: status

[15:57] <releasable6> jmerelo, Next release in ≈29 days and ≈3 hours. 0 blockers. 0 out of 24 commits logged

[15:57] <releasable6> jmerelo, Details: https://gist.github.com/728c956cf28008358d6bd7a22930274f

[15:58] <jmerelo> AlexDaniel: so you did your release and now you're making everyone else work :-)

[15:59] <AlexDaniel> jmerelo: yes.

[15:59] <jmerelo> jmerelo: I'll try and do the official unofficial release Twitter thread :-)

[16:00] <AlexDaniel> :)

[16:01] *** rindolf joined
[16:11] <AlexDaniel> jmerelo: now that I work a bit on sake ( https://github.com/perl6/p6-sake ), I wonder if maybe we should at least consider using it for the doc repo

[16:14] <AlexDaniel> jmerelo: what do you think? is is a bad idea?

[16:15] <AlexDaniel> looking at the Makefile, most targets are really simple, so it shouldn't matter

[16:16] <AlexDaniel> I like dogfooding though

[16:16] <japhb> AlexDaniel: Is sake just "Simplified mAKE"?

[16:16] <japhb> Or is it an incompatible language?

[16:17] <AlexDaniel> japhb: it's pure perl 6

[16:17] <geekosaur> I don't think that was the questioj

[16:17] <japhb> Right, I'm asking whether it is a pure Makefile subset

[16:18] <japhb> Or a different (possibly related) language

[16:18] <AlexDaniel> it's not a subset because a Sakefile is just a perl 6 program

[16:18] <japhb> OH!

[16:18] <timotimo> so kind of like scons

[16:18] <japhb> That's the part that was unclear (though I suppose I could have gone and looked at the repo, sigh)

[16:18] <AlexDaniel> here's an example of a more complex one: https://github.com/perl6/whateverable/blob/master/Sakefile

[16:19] <japhb> Laziness bites me again.

[16:19] <japhb> TimToady: I thought Laziness was supposed to be a virtue ....

[16:19] <japhb> (Yes, I know that wasn't the meaning intended.)

[16:19] <jmerelo> AlexDaniel: it's never a bad idea. 

[16:20] <jmerelo> AlexDaniel: it's probably much better than the exiting Makefile.

[16:20] <jmerelo> AlexDaniel: Just create an issue, and let's see what can be done (probably everything) :-)

[16:20] *** Zoffix joined
[16:20] <Zoffix> AlexDaniel: is `sake` something that you invented?

[16:20] <AlexDaniel> Zoffix: it was done by perlpilot++ a long time ago

[16:21] <AlexDaniel> Zoffix: it sort of mimics rake (ruby make), but at the current state it's not as advanced

[16:21] <Zoffix> Ah, cool.

[16:21] * jmerelo clickbaits the thread introducing the new Perl 6 release https://twitter.com/jjmerelo/status/1010195489302695942

[16:21] *** MasterDuke left
[16:22] * Zoffix deliberately don't spread it around to avoid confusion between compiler and star :)

[16:23] <timotimo> huh, how was calling private or qualified methods made faster by nine? nothing against nine's contributions, of course

[16:23] <jmerelo> Zoffix: I would have to do another thread to explain the difference between rakudo and perl6 proper. Rakudo is the public-facing part of #perl6, I think that's enough

[16:23] <tyil> Zoffix: I made a small proof of concept to my issue https://p.tyil.nl/vxte

[16:23] *** Kaiepi left
[16:23] *** Kaypie joined
[16:24] <AlexDaniel> greppable6: Sakefile

[16:24] <greppable6> AlexDaniel, 1 line, 1 module: https://gist.github.com/571e12f37bc1bbc04aa11bd75fc02675

[16:24] <jmerelo> timotimo: do you mean it wasn't niner? Or that it wasn't made faster?

[16:24] <timotimo> it wasn't niner

[16:24] <Zoffix> jmerelo: no, I meant that tweet makes star using people think a new star release happened, but it's not the release month for it.

[16:24] <AlexDaniel> Zoffix: though I'm the only heavy user of it :)

[16:24] <AlexDaniel> (probably)

[16:25] <jmerelo> timotimo: sorry, I tried to look up the commits and the authors, but it's kind of exhausting. Answer in the tweet itself, or tell me and I'll issue a fix.

[16:25] <AlexDaniel> jmerelo: ye it was jnthn

[16:25] <timotimo> it's probably not so important? if people read the blog post about the spesh plugins, they'll notice themselves

[16:25] <japhb> timotimo: Did you see my comment about JSON serialization from earlier this morning?

[16:25] <timotimo> yeah

[16:26] <timotimo> your implementation has to-json return a string that is the object as json, that's not quite what we were hoping for

[16:26] <AlexDaniel> jmerelo: did I mess something up in the changelog?

[16:26] <jmerelo> Zoffix: it's a release, it's not a star release. I haven't said anything about star. Or maybe I shouldn't call it a release? We query releasable to know what's happening, sooo

[16:26] <japhb> OK, just wanted to make sure it wasn't lost (Warnock and all).

[16:26] <timotimo> mhm

[16:26] <jmerelo> AlexDaniel: no, it was absolutely perfect. Only in some cases there were several commits and I might have mixed them up...

[16:26] <AlexDaniel> jmerelo: it's a release, but generally not something we recommend to end users

[16:27] <AlexDaniel> it's still usable and all, so no problem making big news about it :)

[16:27] <jmerelo> AlexDaniel: I mean, it would have been even more perfect if there were links to the commits; maybe move it to markdown, even if that's not usual for ChangeLogs

[16:27] <japhb> timotimo: That wasn't the intent.  The intent was that I separated out the concept of as/from-struct (which classes that did the role needed to provide) and as/from-json (which the role provided, via JSON::Fast or JSON::Tiny)

[16:27] *** Ven`` joined
[16:27] <AlexDaniel> but maybe it should just note that users should look for the upcoming Rakudo Star

[16:28] <Zoffix> jmerelo: I was referring to step 19 in the compiler release guide: https://github.com/rakudo/rakudo/blob/master/docs/release_guide.pod

[16:28] <AlexDaniel> jmerelo: it is markdown: https://github.com/rakudo/rakudo/blob/master/docs/announce/2018.06.md

[16:28] <AlexDaniel> jmerelo: still no links, I know :(

[16:28] <timotimo> japhb: right, i was hoping for objects in any hierarchy to be able to tell the json serializer how they want to be represented, so that they can be put into a containing object

[16:28] *** Ven`` left
[16:28] <jmerelo> AlexDaniel: then definitely some links would help :-)

[16:29] <japhb> timotimo: Uh, I think we're saying the same thing, just talking past each other.

[16:29] <timotimo> maybe

[16:29] <timotimo> i find to-struct a bit strange, though, as that evokes C Struct in my head

[16:29] <japhb> Except that you were talking from the point of view of enhancing JSON::Fast, and I was talking from the point of view of wrapping it.

[16:29] <Zoffix> AlexDaniel: I'm thinking of doing something like Sake for $work, except I kinda need namespaced stuff, I think. Like uploading new product pics to sites would be run as `zake web prod meows .`, updating pricing would be `zake web prices mews pricing.xls`, setting up brochure dir would be `zake design init Meows`, etc., etc. And the code form of that would be separate Foo.pm6 files, I guess

[16:29] <jmerelo> Zoffix: other announcements are not forbidden, right? It's the extra-officcial official release...

[16:30] <Zoffix> And it'd be one master program to Rule Them On

[16:30] <jmerelo> ^cc^c

[16:30] <japhb> OK, so maybe "as-map"?  Or heck, even a Map method.

[16:30] <timotimo> Capture would be the most natural, except that doesn't map to json

[16:30] <Zoffix> jmerelo: no, not forbidden :)

[16:31] <japhb> timotimo: Right, I was trying to go lowest-common-denominator.  Something that could be serialized no matter what wire format I chose (JSON was just "free" thanks to you and moritz)

[16:32] <japhb> (The whole thing being part of a PoC, after all)

[16:32] <AlexDaniel> Zoffix: I think in the long run it would be better if something like this was supported within Sake, or maybe if Zake was based on Sake :)

[16:32] <AlexDaniel> Zoffix: just so that there's no wasted effort

[16:32] <Zoffix> I'll look over Sake, when I start writing it.

[16:32] <AlexDaniel> cool

[16:34] *** dha joined
[16:35] *** dha left
[16:38] <AlexDaniel> Zoffix: I'd guess that something like `sake web/prod/meows` can work pretty much right now, maybe with a helper sub or two. A task “name” can be anything (a junction or a regex), so dispatching should be relatively easy. I think there's a problem with dependency trees being built a bit too early with too many assumptions, but we can fix that.

[16:39] <AlexDaniel> actually, now that I said it, I'm no longer sure if it can be a regex :)

[16:39] <AlexDaniel> but yeah, should be fixable

[16:39] <Zoffix> $ git log --oneline --author zoffix 2018.05...2018.06

[16:40] <Zoffix> e4ecf5e [NQP Bump] Brings 4 commits

[16:40] <Zoffix> a79de42 Fix premature .perl chopping in X::TypeCheck

[16:40] <Zoffix> jmerelo: I think you're giving me too much credits in your release comments :P

[16:40] *** Ven`` joined
[16:43] <Zoffix> jmerelo: in fact, I'm surprised I'm higher than you in the release announcement… makes me think the release generator commit counter script is broken. I don't remember doing much of anything in master branches.

[16:48] <Zoffix> oh shit, it is broken

[16:49] <Zoffix> oh wait maybe not

[16:49] <jmerelo> Zoffix: I didn't know I was in the release announcement... But you have done stuff almost in every file I've looked up.

[16:49] <jmerelo> Zoffix: come to think of it, I haven't seen the release announcement, just the Changelog

[16:50] <AlexDaniel> Zoffix: it's not

[16:50] <AlexDaniel> Zoffix: what happened was that jmerelo was there twice

[16:50] <AlexDaniel> once as JJ and one more time with a proper name, or something like that

[16:50] <AlexDaniel> I removed the duplicate but other way around, without fixing the order

[16:50] <AlexDaniel> so it's my bad

[16:50] <Zoffix> ah

[16:51] <AlexDaniel> I'll do better next time :)

[16:51] <Zoffix> I think listing the full name in credits file will make the script figure out that it's the same person: https://github.com/perl6/doc/blob/master/CREDITS#L141

[16:51] <jmerelo> Zoffix: 

[16:52] <jmerelo> Zoffix: Ok

[16:52] <Zoffix> like here: https://github.com/perl6/doc/blob/master/CREDITS#L206-L209

[16:52] <AlexDaniel> there's also this ticket: https://github.com/rakudo/rakudo/issues/1443

[16:55] <Geth> ¦ doc: 53e5c55bb3 | (JJ Merelo)++ | CREDITS

[16:55] <Geth> ¦ doc: Adds name and variants

[16:55] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/53e5c55bb3

[16:55] *** mahafyi left
[16:55] <jmerelo> Zoffix: shouldn a local .mailcap be enough? Mapping all emails in commits to a single file...

[16:56] <Zoffix> ¯\_(ツ)_/¯

[16:56] <jmerelo> Zoffix, AlexDaniel : Anyway, it's added now...

[16:57] <AlexDaniel> jmerelo: the reason it happens is actually:

[16:57] * Zoffix &

[16:57] *** Zoffix left
[16:57] <AlexDaniel> 5afa31cf  Fri Jun 22 09:00:32 2018 +0200 (10 hours ago)	 JJ Merelo: Adds exception for empty hash in writing style docs closes #2113

[16:57] <AlexDaniel> a3753c01  Thu Jun 21 21:46:39 2018 +0200 (21 hours ago)	 Juan Julián Merelo Guervós: Merge pull request #2112 from ronaldxs/reverse-suppress-capture

[16:57] <AlexDaniel>  

[16:57] <AlexDaniel> so you're committing with different names :)

[16:57] <AlexDaniel> and maybe you want to fix that

[16:57] <geekosaur> or add an extra entry to mailcap since it should be using that

[16:57] <jmerelo> AlexDaniel: right; I have a different git config in different places... I have put both names now in CREDITS.

[17:07] *** AlexDaniel left
[17:15] <Kaypie> m: my grammar Foo { token TOP { <a> }; token a { 'a' <TOP>* } }; say Foo.parse('aaaaaa', :rule<a>)

[17:15] <camelia> rakudo-moar c441d8d8b: OUTPUT: «｢aaaaaa｣␤ TOP => ｢aaaaa｣␤  a => ｢aaaaa｣␤   TOP => ｢aaaa｣␤    a => ｢aaaa｣␤     TOP => ｢aaa｣␤      a => ｢aaa｣␤       TOP => ｢aa｣␤        a => ｢aa｣␤         TOP => ｢a｣␤          a => ｢a｣␤»

[17:15] <Kaypie> there must be some use for :rule

[17:18] <geekosaur> there is. that test won't show it because TOP already matches a

[17:18] <Kaypie> what kind of cases would you use it?

[17:19] *** domidumont joined
[17:19] <geekosaur> :rule tells the parser to use something other than TOP as the top level production. this could let you combine related languages, or languages with common sublanguages, etc. in the same Grammar

[17:20] <Geth> ¦ doc: 877c78d345 | (Will "Coke" Coleda)++ | t/02-tests-valid.t

[17:20] <Geth> ¦ doc: test files should be executable

[17:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/877c78d345

[17:20] <Geth> ¦ doc: 7613ca2c7f | (Will "Coke" Coleda)++ | htmlify.p6

[17:20] <Geth> ¦ doc: Remove unused routine

[17:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7613ca2c7f

[17:22] <geekosaur> so, for example, there's some files on my system that allow embedded lua in multiple forms. if I wanted to parse those from perl 6, I might have a Grammar for embedded lua, with two entry points: one for {{ }} blocks, one for :-prefixed lines

[17:22] <geekosaur> the blocks allow the full language, the : form only allows a subset

[17:23] *** Praise joined
[17:23] *** Praise left
[17:23] *** Praise joined
[17:25] <Kaypie> i'm not sure i get how that'd be used

[17:27] <geekosaur> while reading the map file, if I encounter {{ I invoke the Lua grammar with the normal top level, if I encounter a line starting with ":" I invoke the grammar with :rule(oneline) and have a token oneline { ... }

[17:27] <geekosaur> but both share things like the tokens and rules for expressions

[17:40] *** espadrine joined
[17:42] *** natrys left
[17:46] <Geth> ¦ Pod-To-HTML/master: 18 commits pushed by (JJ Merelo)++

[17:46] <Geth> ¦ Pod-To-HTML/master: review: https://github.com/perl6/Pod-To-HTML/compare/1ef6aa072eb1...3a8356e15cc2

[17:46] <Kaypie> ohh

[17:48] <jmerelo> Um

[17:48] <jmerelo> Not sure I didn't break anything there...

[17:50] *** perlpilot joined
[17:50] *** Ven`` left
[17:50] <jmerelo> Apparently not. Maybe some formatting...

[17:54] *** AlexDaniel joined
[17:56] *** natrys joined
[17:56] <Geth> ¦ doc: 009af0b9e8 | (JJ Merelo)++ | META6.json

[17:56] <Geth> ¦ doc: Bumps up version to fix #2037

[17:56] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/009af0b9e8

[18:06] *** jmerelo left
[18:21] *** atroxaper joined
[18:24] *** sauvin left
[18:24] *** Ven`` joined
[18:26] *** raynold left
[18:26] *** sno joined
[18:30] *** comborico1611 joined
[18:44] *** robertle joined
[18:53] *** atroxaper left
[18:53] *** pmurias joined
[18:56] *** damnlie left
[18:56] *** damnlie joined
[18:57] <[Coke]> Thanks to liz, moved one of my modules into cpan, whee.

[18:57] <[Coke]> App::Uni, once it hits modules

[19:00] <lizmat> whee!

[19:04] *** domidumont left
[19:05] <buggable> New CPAN upload: App-Uni-1.0.1.tar.gz by COKE https://cpan.metacpan.org/authors/id/C/CO/COKE/Perl6/App-Uni-1.0.1.tar.gz

[19:11] *** darutoko left
[19:14] <[Coke]> OHHAI there it is. whee.

[19:16] <perlpilot> [Coke]: What did you have to do to make it so?

[19:17] *** AlexDaniel left
[19:18] *** SCHAPiE joined
[19:19] <[Coke]> I basically kept running 'mi6 release' and doing what it told me.' had to add a CHANGES file, a ~/.pause, and a dist.ini to tell it to not to generate the README file, since I already had one.

[19:19] <[Coke]> I also changed something from a 'unit package' to a 'unit class'

[19:19] <[Coke]> and some minor edits suggested by mi6

[19:45] *** [particle]1 left
[19:57] *** wamba joined
[19:58] *** perlpilot left
[20:04] *** rindolf left
[20:09] *** AlexDaniel joined
[20:16] *** zachk joined
[20:17] *** zachk left
[20:17] *** zachk joined
[20:17] *** HaraldJoerg1 joined
[20:17] *** HaraldJoerg left
[20:20] *** lizmat left
[20:21] <Kaypie> lol finally figuring out how arguments are meant to be used with tokens in grammars cut this down by 100 lines https://pastebin.com/w0jdtRT9

[20:21] *** Kaypie is now known as Kaipie

[20:22] *** Kaipie is now known as Kaiepi

[20:23] *** HaraldJoerg1 is now known as HaraldJoerg

[20:36] *** pmurias left
[20:49] <skids> Kaypie: just beware RT#130910

[20:49] <synopsebot_> RT#130910 [open]: https://rt.perl.org/Ticket/Display.html?id=130910 [REGEX] Backtracking into a parameterized subrule like `<meh(42)>` tries to call it without arguments.

[20:50] <skids> Kaiepi: ^^

[20:51] *** Kaypie joined
[20:51] *** Kaiepi left
[20:58] *** skids left
[20:58] *** Kaypie is now known as Kaiepi

[20:58] <Kaiepi> ah

[20:58] <Kaiepi> good to know

[21:00] * ingy (and tinita++) just updated https://github.com/acmeism/RosettaCodeData

[21:01] *** n1ge left
[21:06] *** lizmat joined
[21:08] *** molaf left
[21:08] *** stee3 joined
[21:11] *** stee left
[21:11] *** n1ge joined
[21:14] <El_Che> tpc is uploading video

[21:14] <El_Che> sawyer's is online

[21:14] <El_Che> wating for liz and TimToady 

[21:14] <El_Che> are there other perl6 speakers on the upload queueu

[21:14] <El_Che> ?

[21:16] <El_Che> I see a nativacall lihtning talk was uploaded

[21:16] *** stee3 is now known as stee

[21:16] *** sena_kun left
[21:17] *** sena_kun joined
[21:26] *** sena_kun left
[21:28] *** hoelzro joined
[21:36] <b2gills> [Coke]: (from Promise vid) `done` ends the `react` block. To stop a single `whenever` I think you have to do something like:

[21:36] <b2gills> m: react { my $p = do whenever Supply.interval(0.1) { .say; if $_ == 4 { $p.close }}; whenever Promise.in(1) { say 'one second'; done }}

[21:36] <camelia> rakudo-moar c441d8d8b: OUTPUT: «0␤1␤2␤3␤4␤one second␤»

[21:37] <b2gills> Note that the react block doesn't currently exit if all of the `whenever`s have been closed in this way

[21:41] <lizmat> it doesn't?   doesn't the "done" exit the react block ?

[21:42] <lizmat> m: react { my $p = do whenever Supply.interval(0.1) { .say; if $_ == 4 { $p.close }}; whenever Promise.in(1) { say "one second"; done }}; say "outside"

[21:42] <camelia> rakudo-moar c441d8d8b: OUTPUT: «0␤1␤2␤3␤4␤one second␤outside␤»

[21:46] <b2gills> lizmat: This is what I meant: Note that all whenevers are closed, but the react block never finishes

[21:46] <b2gills> m: react { my $p = do whenever Supply.interval(0.1) { .say; if $_ == 4 { $p.close }}}; say "outside"

[21:46] <camelia> rakudo-moar c441d8d8b: OUTPUT: «(timeout)0␤»

[21:46] <b2gills> m: react { my $p = do whenever Supply.interval(0.1) { .say; if $_ == 4 { $p.close; done }}}; say "outside"

[21:46] <camelia> rakudo-moar c441d8d8b: OUTPUT: «0␤1␤2␤3␤4␤outside␤»

[21:48] *** wamba left
[21:53] <lizmat> ah, closing the tap you mean... ok

[21:56] *** wamba joined
[21:56] *** natrys left
[22:02] <Kaiepi> where are the talks?

[22:03] <b2gills> https://www.youtube.com/channel/UC7y4qaRSb5w2O8cCHOsKZDw

[22:04] *** Ven`` left
[22:05] <buggable> New CPAN upload: App-Unicode-Mangle-1.0.0.tar.gz by COKE https://cpan.metacpan.org/authors/id/C/CO/COKE/Perl6/App-Unicode-Mangle-1.0.0.tar.gz

[22:14] <[Coke]> m: my $word=True;my $search='cat';my $regex=$word ?? "<< '$search' >>" !! $search; (0..0x10FFFF).race.map(*.chr).grep({$_.uninames ~~ m:i/<$regex>/}).map({say "$_ : U+{$_.ord} {$_.uninames}"})

[22:14] <camelia> rakudo-moar c441d8d8b: OUTPUT: «A worker in a parallel iteration (hyper or race) initiated here:␤  in block <unit> at <tmp> line 1␤␤Died at:␤    Cannot find method 'Any' on object of type Match␤      in block  at <tmp> line 1␤␤»

[22:14] <[Coke]> ^^ What's wrong with that?

[22:14] <[Coke]> (can someone bisectable that?)

[22:15] <[Coke]> Util: the mangler was uploaded ^^

[22:15] *** Ptolemarch joined
[22:15] <buggable> New CPAN upload: Acme-_-0.0.1.tar.gz by ELIZABETH http://modules.perl6.org/dist/Acme::Don't:cpan:ELIZABETH

[22:16] <lizmat> This is actually Acme::ಠ_ಠ

[22:17] <AlexDaniel> -_- close enough :)

[22:17] <[Coke]> bisectable6: old=2017.06 new=HEAD my $word=True;my $search='cat';my $regex=$word ?? "<< '$search' >>" !! $search; (0..0x10FFFF).race.map(*.chr).grep({$_.uninames ~~ m:i/<$regex>/}).map({say "$_ : U+{$_.ord} {$_.uninames}"})

[22:18] <bisectable6> [Coke], Bisecting by exit signal (old=2017.06 new=c441d8d). Old exit signal: 1 (SIGHUP)

[22:18] *** HaraldJoerg left
[22:18] <AlexDaniel> that doesn't look right… it was timed out on 2017.06

[22:18] <bisectable6> [Coke], bisect log: https://gist.github.com/21ec8ca312e73fae578cabba2a6f2d2e

[22:18] <bisectable6> [Coke], (2017-10-16) https://github.com/rakudo/rakudo/commit/2352efe51390183258126a2868c60906bf507c55

[22:19] <[Coke]> It was slow, but I swear it used to work at some point. lizmat points out that the threaded regex is currently problematic.

[22:19] <AlexDaniel> c: 2352efe51^,2352efe51 my $word=True;my $search='cat';my $regex=$word ?? "<< '$search' >>" !! $search; (0..0x10FFFF).race.map(*.chr).grep({$_.uninames ~~ m:i/<$regex>/}).map({say "$_ : U+{$_.ord} {$_.uninames}"})

[22:19] <committable6> AlexDaniel, ¦2352efe51^: ««timed out after 10 seconds» «exit signal = SIGHUP (1)»» ¦2352efe: «NYI␤  in block <unit> at /tmp/OEf3LwMmm4 line 1␤␤ «exit code = 1»»

[22:20] <AlexDaniel> c: 2017.06,2017.10,2018.02,2018.05,HEAD my $word=True;my $search='cat';my $regex=$word ?? "<< '$search' >>" !! $search; (0..0x10FFFF).race.map(*.chr).grep({$_.uninames ~~ m:i/<$regex>/}).map({say "$_ : U+{$_.ord} {$_.uninames}"})

[22:20] <committable6> AlexDaniel, https://gist.github.com/026bd7bae7567f958a9c94e17a52df61

[22:20] <AlexDaniel> c: 2017.06,2017.07,2017.08,2017.09 my $word=True;my $search='cat';my $regex=$word ?? "<< '$search' >>" !! $search; (0..0x10FFFF).race.map(*.chr).grep({$_.uninames ~~ m:i/<$regex>/}).map({say "$_ : U+{$_.ord} {$_.uninames}"})

[22:21] <committable6> AlexDaniel, ¦2017.06,2017.07,2017.08,2017.09: ««timed out after 10 seconds» «exit signal = SIGHUP (1)»»

[22:21] <AlexDaniel> ah right, it stopped sighup-ing in 2017.10 according to the bisect

[22:21] <AlexDaniel> c: 2017.10,2017.11,2017.12,2018.01 my $word=True;my $search='cat';my $regex=$word ?? "<< '$search' >>" !! $search; (0..0x10FFFF).race.map(*.chr).grep({$_.uninames ~~ m:i/<$regex>/}).map({say "$_ : U+{$_.ord} {$_.uninames}"})

[22:22] <committable6> AlexDaniel, https://gist.github.com/e36801d2be951dbea13c2b891016e83a

[22:22] <AlexDaniel> alright I only know a noisy way of figuring it out

[22:23] <AlexDaniel> bisect: old=2352efe my $word=True;my $search='cat';my $regex=$word ?? "<< '$search' >>" !! $search; (0..0x10FFFF).race.map(*.chr).grep({$_.uninames ~~ m:i/<$regex>/}).map({say "$_ : U+{$_.ord} {$_.uninames}"})

[22:23] <bisectable6> AlexDaniel, Bisecting by output (old=2352efe new=c441d8d) because on both starting points the exit code is 1

[22:24] <AlexDaniel> [Coke]: I mean, at this point it looks like the old implementation was half-working

[22:24] <AlexDaniel> and after the rework it doesn't

[22:24] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/833ca3f566e2fa29d0e12b94b6aca6c5

[22:24] <bisectable6> AlexDaniel, (2017-10-12) https://github.com/rakudo/rakudo/commit/37689a3e57cafaa3b27cacec74d902b4ca11c9e0

[22:24] *** Kaiepi left
[22:25] *** Kaiepi joined
[22:26] <[Coke]> is there a rakudo ticket open for this issue?

[22:28] <AlexDaniel> I know about R#1912 but I don't know if that's an issue here

[22:28] <synopsebot_> R#1912 [open]: https://github.com/rakudo/rakudo/issues/1912 [hyper/race] hyper and race should do `my $/`

[22:30] <[Coke]> opening new issue.

[22:33] <AlexDaniel> I think that's the golf:

[22:33] <AlexDaniel> m: my $foo = ‘a’; say (^9999).race.grep({‘a’ ~~ m:g/<$foo>/})

[22:33] <camelia> rakudo-moar c441d8d8b: OUTPUT: «(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86…»

[22:33] <AlexDaniel> m: my $foo = ‘a’; say (^9999).race.grep({‘a’ ~~ m:g/<$foo>/})

[22:33] <camelia> rakudo-moar c441d8d8b: OUTPUT: «(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 …»

[22:33] <AlexDaniel> ah come on

[22:33] <AlexDaniel> m: my $foo = ‘a’; say (^999999).race.grep({‘a’ ~~ m:g/<$foo>/})

[22:33] <camelia> rakudo-moar c441d8d8b: OUTPUT: «(64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 13…»

[22:33] <AlexDaniel> m: my $foo = ‘a’; say (^999999).race.grep({‘a’ ~~ m:g/<$foo>/})

[22:33] <camelia> rakudo-moar c441d8d8b: OUTPUT: «A worker in a parallel iteration (hyper or race) initiated here:␤  in block <unit> at <tmp> line 1␤␤Died at:␤    Cannot find method 'Any' on object of type Match␤      in block  at <tmp> line 1␤␤»

[22:33] <AlexDaniel> there

[22:35] <buggable> New CPAN upload: App-Unicode-Mangle-1.0.1.tar.gz by COKE http://modules.perl6.org/dist/App::Unicode::Mangle:cpan:COKE

[22:36] <AlexDaniel> [Coke]: can't find a ticket, but the issue is probably using EVAL from multiple workers

[22:37] <AlexDaniel> [Coke]: o, found something: https://rt.perl.org/Ticket/Display.html?id=125978#txn-1365512

[22:43] <[Coke]> AlexDaniel: opened https://github.com/rakudo/rakudo/issues/1950

[22:53] *** damnlie left
[22:54] *** damnlie joined
[23:12] *** Ptolemarch left
[23:14] *** comborico1611 left
[23:16] *** comborico1611 joined
[23:16] *** MasterDuke joined
[23:31] *** cog left
[23:32] *** cognominal joined
[23:35] *** cog joined
[23:37] *** cognominal left
[23:40] *** wamba left
[23:58] *** raschipi joined
