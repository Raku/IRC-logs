[00:03] *** markoong left
[00:04] <benjikun2> I see

[00:05] <benjikun2> is there a correct way to exit a promise early

[00:05] <timotimo> no, you need an extra promise for cancellation and use Promise.anyof to react to that

[00:06] <timotimo> there's a module in the ecosystem for cancellable timers

[00:16] <Geth> ¬¶ doc: 5cb3a4d688 | (Timo Paulssen)++ | doc/Type/Promise.pod6

[00:16] <Geth> ¬¶ doc: fix await claiming it returns a list of promises

[00:16] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/5cb3a4d688

[00:16] <synopsebot> Link: https://doc.perl6.org/type/Promise

[00:16] <timotimo> seeya o/

[00:30] <benjikun2> cya

[00:30] <benjikun2> Is there no way to exit a block early

[00:34] *** fake_space_whale joined
[00:36] <benjikun2> nevermind, dumb question

[01:03] *** jameslenz joined
[01:06] *** hami joined
[01:06] *** Zoffix joined
[01:06] <Zoffix> benjikun2: why dumb? IIRC there's no "nice" way

[01:06] <Zoffix> m: { when * {succeed}; say 42 }

[01:06] <camelia> rakudo-moar 5682ee1f1: ( no output )

[01:06] <Zoffix> That

[01:06] <Zoffix> That's the only thing I can think of

[01:07] *** jameslenz left
[01:13] <benjikun2> hmm

[01:13] *** benjikun2 is now known as benjikun

[01:13] <benjikun> Does anyone know if DOM::Tiny is threadsafe?

[01:16] <Zoffix> don't look like it

[01:16] <Zoffix> Depends what you mean by it really.

[01:16] <Zoffix> Like what? calling methods on the same object from multiple threads?

[01:16] <benjikun> Zoffix: different objects from different threads lol

[01:16] <benjikun> I wouldn't suspect it would break, but it does

[01:17] <Zoffix> Breaks how?

[01:17] <Zoffix> What's the code?

[01:21] *** Kaypie joined
[01:21] *** Kaiepi left
[01:23] *** subroot joined
[01:23] <benjikun> Zoffix: https://my.mixtape.moe/trvcuy.png

[01:23] <benjikun> probably isn't much help without the code, can I invite you to a private repo?

[01:24] <Zoffix> I guess

[01:25] <benjikun> bear with me, it's probably pretty messy

[01:25] <buggable> New CPAN upload: Readline-0.1.3.tar.gz by JGOFF http://modules.perl6.org/dist/Readline:cpan:JGOFF

[01:26] <Zoffix> Are there any docs on macros?

[01:26] <Zoffix> m: use experimental :macros; macro bloret { 'when * { proceed }' };   { bloret; say 42 }; say 'meows'

[01:26] <camelia> rakudo-moar 5682ee1f1: OUTPUT: ¬´===SORRY!===‚ê§Too few positionals passed; expected 3 arguments but got 2‚ê§¬ª

[01:26] <benjikun> Zoffix: https://github.com/OhadRau/Kesef/invitations

[01:28] <Zoffix> benjikun: how do I run it? 

[01:29] <Zoffix> like what to put for company

[01:29] <benjikun> Zoffix: a stock ticker; just put `amd` or whatnot

[01:29] <Zoffix> k

[01:29] <benjikun> sorry for my commit messages lol

[01:31] <Zoffix> you clearly haven't seen the code in my https://github.com/zoffixznet/c-practice repo :P

[01:32] <benjikun> lmao

[01:32] <benjikun> xxxxxxxxxx

[01:40] <Zoffix> (I'm just golfing the code right now)

[01:42] <benjikun> Mkay

[01:47] <DrForr> o/

[01:48] <Zoffix> Well, seems I got rid of the crash, but can't repro it with small code

[01:48] <benjikun> strange

[01:49] <benjikun> can you push it?

[01:49] <Zoffix> It's in DOM::Tiny

[01:49] <benjikun> Yeah, I thought so

[01:49] <benjikun> but it only has that when I do concurrency stuff

[01:49] *** subroot left
[01:50] <Zoffix> benjikun: I think maybe PRE phaser is not thread safe. If I change this line: https://github.com/zostay/p6-DOM-Tiny/blob/master/lib/DOM/Tiny/CSS.pm6#L10  to `@combine.elems !%% 2 or die;` (without the phaser), then I get no crashes

[01:50] <benjikun> I think there may be some weird global variable in DOM::Tiny

[01:50] <Zoffix> m: class Foo { submethod BUILD (:@stuff) { PRE { @stuff.elems %% 2 } } }; ^100000 .race.map: { Foo.new: :stuff(^100) }

[01:50] <camelia> rakudo-moar 5682ee1f1: ( no output )

[01:50] <Zoffix> But here it doesn't crash

[01:50] <benjikun> weird :\

[01:51] <benjikun> I wish some of the old perl6 modules that were abandoned by the owner would get transferred to the perl6community org

[01:51] <DrForr> Huh. I'm just now noticing that modules.perl6.org returns multiple versions of the same module.

[01:52] <benjikun> DrForr: yeah, I've noticed that with a couple of them

[01:52] <Zoffix> DrForr: https://github.com/perl6/modules.perl6.org/issues/106

[01:52] <DrForr> Readline and XML::XPath at least.

[01:53] <Zoffix> DrForr: though one of the duplications for Readline is 'cause it's listed in p6c ecosystem as well (currently the site uses ecosystem as one of the differentiators; it probably should use "auth" or something)

[01:54] <Zoffix> benjikun: is it fine to publish one of the fetched HTML pages with a rakudo bug report?

[01:54] <benjikun> Zoffix: mhm

[01:54] <benjikun> Thanks for the help

[01:54] <benjikun> did you change anything in app.p6?

[01:54] <DrForr> Yeah, I was thinking that was the actual cause, though it picks up at least 2 versions from GitHub.

[01:55] <Zoffix> benjikun: well, I just golfed it down to this: https://gist.github.com/zoffixznet/a38be8a40f447d7d5faa8980a10cb5d3 and still get the crash when DOM::Tiny got that PRE phaser and no crash when the phaser is removed

[01:56] <DrForr> Also, I see LibraryCheck out there on m.p6.org - Is there a LibraryLoad, or should I hack it from LibraryCheck?

[01:57] <benjikun> I wonder if zostay will respond to the issue quickly

[02:01] <DrForr> Hrr, LibraryCheck doesn't do at all what I thought it would.

[02:05] <DrForr> (well, it does what it says on the tin, but not how I'd have hoped. Time to write...)

[02:06] <Zoffix> benjikun: Filed R#2053 and https://github.com/zostay/p6-DOM-Tiny/issues/10

[02:06] <synopsebot> R#2053 [open]: https://github.com/rakudo/rakudo/issues/2053 [ASYNC] PRE phaser potentially not thread-safe

[02:08] <benjikun> I saw, ty

[02:08] <benjikun> we'll use a forked fix for now

[02:12] <benjikun> Zoffix: https://my.mixtape.moe/kczahe.png

[02:12] <benjikun> feelsbadman

[02:13] <Zoffix> heh

[02:13] <benjikun> I see no reason why it did that :/

[02:14] <Zoffix> Well, is libcurl thread safe?

[02:14] <Zoffix> Try Cro::HTTP::Client

[02:14] <Zoffix> eco: Cro::HTTP

[02:14] <buggable> Zoffix, Cro::HTTP 'Asynchronous HTTP, both client and server side. Includes HTTP/2.0 support.': https://github.com/croservices/cro-http.git 2 other matching results: https://modules.perl6.org/s/Cro%3A%3AHTTP

[02:14] <Zoffix> Docs are at https://cro.services/docs/intro/http-client

[02:15] <benjikun> I thought libcurl would be safe, it's just bindings to libcurl

[02:15] <benjikun> which should be fine to call as many as you want

[02:15] <Zoffix> *shrug*

[02:22] *** Zoffix left
[02:28] *** BenGoldberg joined
[02:35] *** kent\n joined
[02:36] *** hami left
[02:37] *** ufobat_ joined
[02:38] <zostay> *shrug* I can make that change. Just a sec.

[02:40] *** ufobat___ left
[02:42] *** salasrod left
[02:42] *** lizmat left
[02:48] <zostay> the fix is on github, waiting for travis to pass before CPAN release, it will be v0.4.1

[02:51] <zostay> hmmm... looks like i have a bunch of travis failures in my p6 stuff :(

[02:56] *** Zoffix joined
[02:56] <benjikun> welcome back Zoffix

[02:57] <benjikun> zostay got on and replaced the bit :)

[02:57] <Zoffix> zostay: is it using a release to run the tests though or a HEAD commit?

[02:57] <Zoffix> zostay: I see at least one of your modules listed as a release-blocking regression for our latest rescallar merge: R#2047

[02:57] <synopsebot> R#2047 [open]: https://github.com/rakudo/rakudo/issues/2047 [‚ö† blocker ‚ö†] [WIP] Rescalar merge & other toaster-related stuff

[02:58] <zostay> nah, i have weekly jobs that pull in rakudobrew so i can see if my modules are going to break before an upcoming release... i don't usually bother with trying to fix anything until they've failed tests 2 or 3 times in a row

[02:58] <zostay> i have that mod fixed in github, i just need to release

[03:03] <SmokeMachine> m: class A { has UInt $.a; method a(|c) { self.^attributes.head.set_value: self, 13 }; method b() {$!a = 42}}; my $a = A.new; $a.a; $a.b # does `set_value` make the value immutable? how can I do it mutable?

[03:03] <camelia> rakudo-moar 5682ee1f1: OUTPUT: ¬´Cannot assign to an immutable value‚ê§  in method b at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[03:03] *** jameslenz joined
[03:05] *** BenGoldberg left
[03:06] <SmokeMachine> m: class A { has UInt $.a; method a(|c) { self.^attributes.head.set_value: self, 13 }; method b() {$!a = 42}}; my $a = A.new; $a.b

[03:06] <camelia> rakudo-moar 5682ee1f1: ( no output )

[03:06] <SmokeMachine> m: class A { has UInt $.a; method a(|c) { self.^attributes.head.set_value: self, 13 }; method b() {$!a = 42}}; my $a = A.new; $a.a

[03:06] <camelia> rakudo-moar 5682ee1f1: ( no output )

[03:06] <SmokeMachine> m: class A { has UInt $.a; method a(|c) { self.^attributes.head.set_value: self, 13 }; method b() {$!a = 42}}; my $a = A.new; $a.a; $a.b

[03:06] <camelia> rakudo-moar 5682ee1f1: OUTPUT: ¬´Cannot assign to an immutable value‚ê§  in method b at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[03:07] *** BenGoldberg joined
[03:07] *** jameslenz left
[03:08] <zostay> AWS-Session and DOM-Tiny releases should be noted by buggable (or whichever bot does that) shortly

[03:08] <Zoffix> sweet

[03:08] <SmokeMachine> any idea?

[03:09] <zostay> I'll take a look at ArrayHash more carefully when I get a chance... randomizing the tests does not have to be a blocker for a bugfix there.

[03:13] <SmokeMachine> is there any way to make it mutable?

[03:15] <buggable> New CPAN upload: DOM-Tiny-0.4.1.tar.gz by HANENKAMP http://modules.perl6.org/dist/DOM::Tiny:cpan:HANENKAMP

[03:15] <buggable> New CPAN upload: AWS-Session-0.4.tar.gz by HANENKAMP http://modules.perl6.org/dist/AWS::Session:cpan:HANENKAMP

[03:19] <SmokeMachine> just a container...

[03:19] <SmokeMachine> m: class A { has UInt $.a; method a(|c) { self.^attributes.head.set_value: self, $ = 13 }; method b() {$!a = 42}}; my $a = A.new; $a.a; $a.b

[03:19] <camelia> rakudo-moar 5682ee1f1: ( no output )

[03:19] <AlexDaniel> u: ‚úó‚òí

[03:19] <unicodable6> AlexDaniel, U+2717 BALLOT X [So] (‚úó)

[03:19] <unicodable6> AlexDaniel, U+2612 BALLOT BOX WITH X [So] (‚òí)

[03:19] <AlexDaniel> propdump: ‚úó‚òí

[03:20] <unicodable6> AlexDaniel, https://gist.github.com/4509827126554d5a07c2c51ead30ecfb

[03:20] <benjikun> Zoffix: do you have discord lol

[03:20] <benjikun> I am having issues helping someone with perl6

[03:21] <zostay> SmokeMachine: you need to put the value into a Scalar first

[03:21] <zostay> m: class A { has UInt $.a; method a(|c) { self.^attributes.head.set_value: self, $ = 13 }; method b() {$!a = 42}}; my $a = A.new; $a.a; $a.b

[03:21] <camelia> rakudo-moar 5682ee1f1: ( no output )

[03:21] <zostay> otherwise, you're basically binding to the constant

[03:22] <zostay> s/basically//

[03:23] <SmokeMachine> zostay: thanks

[03:23] <AlexDaniel> samcv: so I can type ‚úó directly because it's on my keyboard layout, but if I do that in Firefox it changes it to ‚òí

[03:23] <AlexDaniel> samcv: any thoughts on why this would happen?

[03:24] <AlexDaniel> samcv: it /feels/ like normalization, but it's not

[03:24] <AlexDaniel> zostay: thanks! ‚ô•

[03:24] <zostay> no, thank you! :)

[03:35] <Zoffix> benjikun: no, I don't use discord

[03:36] <benjikun> Zoffix: How would I make a grammar for parsing something like `q2'94`

[03:36] <benjikun> where it means quarter 2 of year 94

[03:36] <benjikun> or `q2'2004` even

[03:37] <benjikun> where the number after the `q` is a digit 1-4

[03:37] <Zoffix> why does it need to be a grammar?

[03:37] <benjikun> so I can parse input given

[03:37] <Zoffix> m: say "quarter {.head} of year {.tail}" with "q2'2004".comb: /\d+/

[03:37] <camelia> rakudo-moar 5682ee1f1: OUTPUT: ¬´The iterator of this Seq is already in use/consumed by another Seq‚ê§(you might solve this by adding .cache on usages of the Seq, or‚ê§by assigning the Seq into an array)‚ê§  in block  at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[03:37] <Zoffix> m: say "quarter {.head} of year {.tail}" with "q2'2004".comb(/\d+/).List

[03:37] <camelia> rakudo-moar 5682ee1f1: OUTPUT: ¬´quarter 2 of year 2004‚ê§¬ª

[03:39] <Zoffix> m: say grammar { token TOP { <quarter> \' <year> }; token quarter { 'q' <( \d+ }; token year { \d**2..4 } }.parse: "q2'2004"

[03:39] <camelia> rakudo-moar 5682ee1f1: OUTPUT: ¬´ÔΩ¢q2'2004ÔΩ£‚ê§ quarter => ÔΩ¢2ÔΩ£‚ê§ year => ÔΩ¢2004ÔΩ£‚ê§¬ª

[03:39] <Zoffix> `<(` is the match marker, it doesn't stick the stuff before it into the match (there's also `)>` to do the same for the other side)

[03:40] <Zoffix> m: say "quarter {.[0]} of year {.[1]}" with "q2'2004".comb: /\d+/ # AT-POS caches, actually, so this is shorter :)

[03:40] <camelia> rakudo-moar 5682ee1f1: OUTPUT: ¬´quarter 2 of year 2004‚ê§¬ª

[03:40] <benjikun> hm

[03:41] <Zoffix> m: say "quarter {.substr: 1, 1} of year {.substr: 3}" with "q2'2004"

[03:41] <camelia> rakudo-moar 5682ee1f1: OUTPUT: ¬´quarter 2 of year 2004‚ê§¬ª

[03:41] <Zoffix> ¬Ø\_(„ÉÑ)_/¬Ø

[03:41] <benjikun> I mean, I also want to check if it is structured correctly

[03:42] <Zoffix> that grammar version above should work for that

[03:43] <Zoffix> m: say "quarter $<quarter> of year $<year>" with "q2'2004" ~~ /^ q $<quarter>=[1..4] \' $<year>=\d**2.4 $/

[03:43] <camelia> rakudo-moar 5682ee1f1: ( no output )

[03:43] <Zoffix> m: say "quarter $<quarter> of year $<year>" with "q2'2004" ~~ /^ q $<quarter>=[1..4] \' $<year>=\d**2..4 $/

[03:43] <camelia> rakudo-moar 5682ee1f1: ( no output )

[03:43] <Zoffix> m: say "quarter $<quarter> of year $<year>" with "q2'2004" ~~ /^ q $<quarter>=<[1..4]> \' $<year>=\d**2..4 $/

[03:43] <camelia> rakudo-moar 5682ee1f1: OUTPUT: ¬´quarter 2 of year 2004‚ê§¬ª

[03:44] <Zoffix> m: say "quarter $<quarter> of year $<year>" with "q2'2004" ~~ /^ q $<quarter>=<[1..4]> \' $<year>=[\d**2 [\d**2]?] $/

[03:44] <camelia> rakudo-moar 5682ee1f1: OUTPUT: ¬´quarter 2 of year 2004‚ê§¬ª

[03:45] * Zoffix &

[03:45] *** Zoffix left
[03:45] <benjikun> oof

[03:45] <benjikun> thank you zoffix, even if you aren't here :(

[04:04] *** fake_space_whale left
[04:21] *** Ven` joined
[04:25] *** raynold joined
[04:26] *** Ven` left
[04:44] *** eliasr left
[04:44] *** xtreak joined
[04:50] *** curan joined
[04:54] *** benjikun2 joined
[04:54] *** benjikun left
[05:03] *** jameslenz joined
[05:08] *** jameslenz left
[05:11] *** Sgeo joined
[05:13] *** wamba joined
[05:18] *** benjikun2 left
[05:20] *** sauvin joined
[05:24] *** ufobat_ left
[05:45] *** xtreak left
[05:48] * masak re-reads some backlog from 2010 about how we un-spec'd quarters in Temporal

[05:49] *** robertle left
[05:51] <masak> I had forgotten the details, but my stance was that (a) it was weird to un-spec it just because someone felt it was a fuzzy notion and without discussion, (b) it's not a fuzzy notion since there are three months to a quarter, (c) I didn't care to die on a hill of quarters, and it's easy to re-implement if you really need it

[05:51] <masak> here's how easy it is to re-implement:

[05:51] <masak> m: say "It is currently Q{$_}" given floor((Date.today.month - 1) / 3 + 1)

[05:51] <camelia> rakudo-moar 5682ee1f1: OUTPUT: ¬´It is currently Q3‚ê§¬ª

[05:53] *** xtreak joined
[05:54] *** salasrod joined
[05:59] <masak> or, separating the implementation and the use a bit:

[06:00] <masak> m: my &quarter = my method (Dateish:) { floor((self.month - 1) /3 + 1) }; say "It is currently Q{Date.today.&quarter}"

[06:00] *** salasrod left
[06:00] <camelia> rakudo-moar 5682ee1f1: OUTPUT: ¬´It is currently Q3‚ê§¬ª

[06:10] *** aborazmeh joined
[06:10] *** aborazmeh left
[06:10] *** aborazmeh joined
[06:12] *** kerframil left
[06:18] *** BenGoldberg left
[06:30] *** troys left
[06:35] *** xtreak left
[06:38] *** konsolebox left
[06:41] *** konsolebox joined
[06:43] *** psychoslave joined
[06:52] *** Ven` joined
[07:03] *** jameslenz joined
[07:08] *** jameslenz left
[07:10] *** zakharyas joined
[07:21] *** aborazmeh left
[07:25] *** xtreak joined
[07:38] *** domidumont joined
[07:41] *** rindolf joined
[07:43] *** domidumont left
[07:45] *** domidumont joined
[07:45] *** labster left
[07:46] *** wamba left
[07:57] <samcv> AlexDaniel: not sure.  ‚úó  doesn't change in FF if i paste it at least

[07:58] <AlexDaniel> samcv: yeah, only when I type it directly‚Ä¶

[07:58] <El_Che> AlexDaniel: what os? 

[07:59] <AlexDaniel> linux, debian

[07:59] <AlexDaniel> but I'm pretty confident it's a thing in firefox

[07:59] *** dakkar joined
[07:59] <El_Che> how do you type ‚úó ?

[07:59] <El_Che> (so I can try)

[07:59] <El_Che> (running Ubuntu, should be similar)

[08:00] <AlexDaniel> preparing something for you

[08:02] *** rindolf left
[08:04] *** robertle joined
[08:05] <AlexDaniel> El_Che: can you try this? https://gist.github.com/AlexDaniel/3b59e107a41a57e9c92dc7d553b32ad3

[08:06] <AlexDaniel> El_Che: then press ‚Äú7‚Äù key on your keyboard

[08:07] *** dakkar left
[08:07] <AlexDaniel> El_Che: and Shift+7 to reproduce the issue

[08:08] <AlexDaniel> hm, actually‚Ä¶ now that I look at it

[08:08] <AlexDaniel> it's called ‚Äúballotcross‚Äù??

[08:08] <AlexDaniel> so maybe firefox is right??

[08:08] <AlexDaniel> u: ‚úó‚òí

[08:08] <unicodable6> AlexDaniel, U+2717 BALLOT X [So] (‚úó)

[08:08] <unicodable6> AlexDaniel, U+2612 BALLOT BOX WITH X [So] (‚òí)

[08:09] <AlexDaniel> yes!!

[08:09] <AlexDaniel> I just changed ‚Äúballotcross‚Äù to U2717 and it produces ‚úó everywhere

[08:10] <AlexDaniel> how in the world different software disagrees on what ‚Äúballotcross‚Äù is‚Ä¶

[08:11] *** rindolf joined
[08:17] *** lizmat joined
[08:19] *** dakkar joined
[08:30] *** xtreak left
[08:34] *** scimon joined
[08:39] *** spycrab0 joined
[08:40] *** HaraldJoerg joined
[08:48] <Geth> ¬¶ doc: ed4f52019f | (Luca Ferrari)++ | doc/Type/Signature.pod6

[08:48] <Geth> ¬¶ doc: Fix Positional vs Named Arguments title.

[08:48] <Geth> ¬¶ doc: 

[08:48] <Geth> ¬¶ doc: Add arguments to be coherent with the search keys (X<>).

[08:48] <Geth> ¬¶ doc: Also change the word 'parameter' to 'argument' in the paragraph accordingly.

[08:48] <synopsebot> Link: https://doc.perl6.org/type/Signature

[08:48] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/ed4f52019f

[08:48] <Geth> ¬¶ doc: 6064ab68aa | (Luca Ferrari)++ | doc/Type/Signature.pod6

[08:48] <Geth> ¬¶ doc: Promote argument aliases as a separate heading.

[08:48] <Geth> ¬¶ doc: 

[08:48] <Geth> ¬¶ doc: Close #2168

[08:48] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/6064ab68aa

[08:57] *** xtreak joined
[08:58] *** wamba joined
[09:04] *** jameslenz joined
[09:05] *** aborazmeh joined
[09:05] *** aborazmeh left
[09:05] *** aborazmeh joined
[09:06] <El_Che> AlexDaniel: good catch

[09:07] <El_Che> AlexDaniel: sound like a typical utf8 implementation trouble to me

[09:07] <AlexDaniel> El_Che: why?

[09:07] <AlexDaniel> both are non-ascii

[09:07] <AlexDaniel> it's just that different software seems to interpret ‚Äúballotcross‚Äù differently

[09:07] <AlexDaniel> but I thought that it's the job of xkb, no?

[09:08] *** jameslenz left
[09:10] <El_Che> AlexDaniel: I mean that slight differences are common

[09:16] *** pmurias joined
[09:27] *** zakharyas left
[09:28] <Ven`> m: sub mod { $OUTER::a = 1; }; my $a; {$a = 5; say($a, mod, $a); }

[09:28] <camelia> rakudo-moar eb6656b87: OUTPUT: ¬´111‚ê§¬ª

[09:28] <Ven`> is that correct? I can't remember how side-effects inside arglists are supposed to work

[09:31] *** kerframil joined
[09:37] <jnthn> Yes. You're passing a Scalar container holding a value when you pass $a

[09:37] <jnthn> And it's decontainerized callee side. That's how `is rw` works at the same time as late-bound calls.

[09:38] <jnthn> Life would be much easier if things *didn't* work that way when it comes to natives, but... :)

[09:39] *** ChoHag_ left
[09:41] <Ven`> jnthn: ah, alright. I was trying to test your `du-chains-and-opts` commits to see if the optimization would be unable to see into the sub modifying the variable, but it seems like it's not an issue at all :).

[09:41] <jnthn> Or at least, *my life* would :P

[09:41] *** domidumont left
[09:41] <Ven`> .oO( Torture the implementors for the sake of the IRC crowd )

[09:43] *** aborazmeh left
[09:44] *** ExtraCrispy joined
[09:46] * masak .oO( call-by-scalar-container )

[09:47] *** aborazmeh joined
[09:47] *** aborazmeh left
[09:47] *** aborazmeh joined
[09:48] <pmurias> Ven`: people are streaming development of game nowadays, so maybe entertaining the IRC crowd/(twich crowd) is the way to go ;)

[09:48] <Ven`> pmurias: the twitch chat protocol is still close enough to IRC :P.

[09:49] <Ven`> it's buffers all the way down

[09:49] <masak> sounds like Emacs

[09:56] <Geth> ¬¶ doc: 72ca9d3144 | ÈôàÊ¢ìÁ´ã++ | 7 files

[09:56] <Geth> ¬¶ doc: whitespace, also rename .pm to .pm6

[09:56] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/72ca9d3144

[10:06] *** psychoslave left
[10:11] <tyil[m]> pmurias: I've considered to  do live coding on Twitch in Perl 6

[10:11] <tyil[m]> but idk how to entertain a crowd :(

[10:13] <Ulti> tyil[m]: I'd watch it

[10:13] <tyil[m]> that's what you say now ;)

[10:14] <Ulti> someone on #bioinformatics occasionally does some protein structure work I tune into its kind of fun since he can ask a question to the air and get an answer from the audience

[10:14] <Ulti> the audience is usually just me

[10:14] <Ulti> but still

[10:14] <Ulti> the general idea I think is cool

[10:14] <Ulti> and lots of people might want to see the day in a life of a programmer

[10:14] <Ven`> tyil[m]: I got some 20 viewers last time I streamed some Perl 6 on twitch

[10:14] <Ven`> admittedly that was my highest :P

[10:15] <tyil[m]> which channel?

[10:15] <tyil[m]> or id

[10:15] <tyil[m]> or whatever they call it on twitch

[10:15] <Ven`> as vendethiel

[10:15] <Ulti> you should work on something together and give us both perspectives side by side >;3

[10:15] <tyil[m]> joined #vendethiel

[10:16] <tyil[m]> also, I wouldn't mind trying something out like that sometime

[10:16] <Ulti> Im expecting Hackers level entertainment here

[10:16] <tyil[m]> would have to plan it in advance, though

[10:16] <tyil[m]> I haven't seen Hackers

[10:16] <Ulti> I have a playlist that can help https://open.spotify.com/user/ultimatt/playlist/2JmJuD0boHtuQqR1yD03nd?si=Ck31ddQgQ1aQs5KPVd3tSw

[10:16] <tyil[m]> I also don't consider myself that great a programmer

[10:16] <Ulti> tyil[m] !! 

[10:17] <tyil[m]> compared to most Perl devs, especially

[10:17] <Ulti> Hackers only gets better with time and the further removed you are from 90s culture

[10:17] <tyil[m]> Ven`: you'll have a permanent "viewer" in your chat now :>

[10:18] <Ulti> tyil[m]: I think that would be a better stream though

[10:18] <Ven`> hahahaha

[10:18] <Geth> ¬¶ doc: 0c954590af | (JJ Merelo)++ | 2 files

[10:18] <Geth> ¬¶ doc: Clarifies why you can't know the type of a native.

[10:18] <Geth> ¬¶ doc: 

[10:18] <Geth> ¬¶ doc: Closes #1568

[10:18] <Geth> ¬¶ doc: 

[10:18] <Geth> ¬¶ doc: Also some reflow

[10:18] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/0c954590af

[10:18] <Ven`> I rarely stream to be honest, unless a friend asks me to do some livecoding

[10:18] <Ulti> if you were moving insanely fast in vim barely looking at the text and just knew all the methods off the top of your head people wouldn't be able to keep up or learn much

[10:19] <tyil[m]> I use CommaIDE currently

[10:19] <tyil[m]> but I get your point

[10:19] <AlexDaniel> .tell jmerelo http://colabti.org/irclogger/irclogger_log/perl6?date=2018-07-12#l324

[10:19] <yoleaux> AlexDaniel: I'll pass your message to jmerelo.

[10:19] <AlexDaniel> .tell jmerelo speaking of streaming, have you ever seen a Ph.D defense streamed on Twitch?

[10:19] *** markoong joined
[10:19] <yoleaux> AlexDaniel: I'll pass your message to jmerelo.

[10:23] <AlexDaniel> .tell jmerelo okay, I googled it. It's a thing!

[10:23] <yoleaux> AlexDaniel: I'll pass your message to jmerelo.

[10:35] *** stmuk_ joined
[10:36] *** stmuk left
[10:42] *** aborazmeh left
[10:47] *** epony left
[10:48] *** raynold left
[10:48] *** epony joined
[10:59] <Ulti> tyil[m]: thats even better since not everyone can see that yet

[11:01] <pmurias> running a precompiled t/nqp/001-literals.nqp takes 0.03s - 0.01s on the SubstrateVM :)

[11:02] <pmurias> compiling it is still slow as snails because we still cross-compile on the old JVM backend:/

[11:04] *** jameslenz joined
[11:08] *** jameslenz left
[11:11] *** Ven` left
[11:12] <tyil[m]> Ulti: you mean CommaIDE, or my horrible code? :p

[11:20] <Ulti> hah both

[11:21] <Ulti> Im using CommaIDE too its definitely nice to have since I've gotten used to PyCharm in the last year

[11:22] <Ulti> which reminds me there is a syntax highlight bug I've not reported

[11:31] <tyil> I'm not convinced yet, coming from vim, but I do see a good reason to be mindful of CommaIDE

[11:32] <tyil> especially when introducing the language to new users, most will want a full IDE that is geared towards Perl 6

[11:32] <tyil> what bothers me most rn is that it will convert my glorious tabs into heathen spaces when I shift a line or block an indent, and that texas ops dont get auto-converted to unicode ops

[11:35] <Ulti> you can change all that though...

[11:35] <Ulti> also good re the tabs thing :P

[11:36] <b2gills> I like the way Komodo handles leading spaces. It looks at what is already in the the file to determine the amount and type of indenting.

[11:37] <tyil> Ulti: there's a feature in Comma that auto-converst texas to unicode ops?

[11:38] <tyil> b2gills: that's what Atom does too, but it's not always correct

[11:38] <tyil> vim has it's modeline which works p well

[11:39] <Ulti> tyil Im sure there will be a ligatures addon for jetbrains IDEs

[11:39] <Ulti> you can always set text replacements

[11:39] <tyil> will that actually work well in practice?

[11:39] <tyil> and how much effort is it to set up

[11:39] <Ulti> sure

[11:39] <tyil> I want unicode ops >:(

[11:40] <Ulti> not much, all the jetbrains IDEs have the same base so you can use all the addons its not a Comma specific thing

[11:40] <tyil> but how to set it up

[11:40] <Ulti> *shrug*

[11:40] <tyil> I want texas ops to be converted into unicode ops as I type them

[11:40] <Ulti> yeah I get it, thats not a complex thing in almost any IDE

[11:40] <tyil> well...

[11:40] <Ulti> they all have online text replacement

[11:41] <tyil> it seems too complex for almost every IDE

[11:41] <Ulti> usually you just say what string to replace with what

[11:41] <Ulti> then you also usually have some ligatures stuff that works at a render level rather than the text in the file

[11:41] <tyil> nobody sane wants that

[11:41] <Ulti> I do

[11:41] <Ulti> way more

[11:41] <tyil> one of the last things I want is my editor not showing me what's in the file

[11:42] <tyil> what good is an editor that refuses you to show the contents of a file correctly

[11:42] <Ulti> it can show you the file how you want to see it and ensure the file on disk is some standard format

[11:42] <Ulti> rather than imposing your BS expectation of everything on everyone else

[11:42] <tyil> if I recalled correctly, you didn't like tabs

[11:43] <tyil> your argumentation here is exactly in favour of tabs

[11:43] <Ulti> depends im in favour of a mix

[11:43] <Ulti> and it actually doesnt matter in my argument because your IDE just renders whitespace however you want

[11:44] <tyil> except when it doesnt and your indentation is all weird

[11:44] <tyil> because your editor tried to be smarter than you and ruined the file

[11:44] <Ulti> sure which is why I do favour spaces because some crazy person will set a tab stop to be like 8 spaces or something

[11:44] <tyil> wat

[11:45] <tyil> so you want the file to be whatever and have the IDE fix it for you, but you don't actually like the file being fixed by the IDE

[11:46] <Ulti> because the reality is no one uses an IDE in the world of Perl

[11:46] <tyil> I don't think this is going to go anywhere

[11:46] <tyil> one second you want the editor to just render whatever, and the other you dont

[11:46] <Ulti> in python for exmaple I couldnt give two shits what the indentation character is because the code is identical

[11:47] <Ulti> and anywhere you get a bit more choice you're almost certainly using spaces anywhere to character align

[11:47] <El_Che> I always run 's/\t/    /' in IntelliJ

[11:48] <tyil> El_Che: then you'll ruin alignment, though

[11:48] <Ulti> not really since you have no idea with tab how that renders

[11:48] <El_Che> nope, alignement is fine

[11:48] <tyil> no its not

[11:49] <tyil> if I used 3 spaces to align a line's =

[11:49] <tyil> and 4 spaces on the next line

[11:49] <tyil> now, the 2nd line is a tab

[11:49] <El_Che> \t is 4 spaces

[11:49] <tyil> and if you dont have tab as 4 spaces exactly, you're fucked

[11:49] <tyil> no, \t is a tab

[11:49] <Ulti> < tyil> if I used 3 spaces to align a line's = <--- which is why a lot of people hate that to start with

[11:49] <El_Che> that's how my ide renders tab

[11:49] <tyil> that doesnt make \t 4 spaces

[11:49] <Ulti> tab stops are variable spaces

[11:49] <tyil> \t is a tab

[11:49] <Ulti> tyil: you get that a tab isnt the same everywhere right?

[11:50] <tyil> that's what I'm explaining you guys rn

[11:50] <Ulti> so it could render as one space for me with your 4 space aligned = anyway

[11:50] <Ulti> your argument makes no sense

[11:50] <El_Che> I haven't use intellij for perl6 yet (I use atom and vim), but "go fmt" render the aligning discussion moot

[11:50] <tyil> Ulti: I already said this isnt going anywhere, since you're clearly not trying to comprehend me

[11:50] <tyil> and I seem to be failing to comprehend you

[11:50] <Ulti> I am trying very hard

[11:50] <tyil> and still we both fail at it

[11:51] <tyil> because I'm clearly saying a \t is NOT the same as 4 spaces

[11:51] <tyil> because its a TAB

[11:51] <tyil> which is variable width

[11:51] <tyil> and then you tell me I'm trying to say that tabs are not variable width for some reason

[11:51] <tyil> which is the *exact opposite* of what I have been saying

[11:51] <Ulti> so with your = alignment you mean you use a tab to align the =?

[11:51] <Ulti> not spaces

[11:51] <tyil> again, that's literally the opposite of what I said...

[11:52] <Ulti> right so if you used spaces to make = in some assignments line up and then tabs below to keep that alignment you have no idea that it will look ok anywhere else other than yoursetup

[11:52] <tyil> I'm not even sure how you can get to that conclusion when I said "if I used 3 spaces to align a line's ="

[11:52] <El_Che> on my IDE a tab is *exactly* 4 spaces because it's so configured. I configured vim on the same way

[11:53] <El_Che> I dislike variable space with ardor

[11:53] <Ulti> tyil: because you then said my next logically true statement about tabs sucking was wrong

[11:53] <Ulti> El_Che: even with it variable the actual tab stops are also entirely user defined

[11:53] <tyil> I mean, there's two people talking to me acting like I'm saying everything I didn't say

[11:53] <tyil> I have no clue how you get to some conclusions in this "discussion"

[11:53] <Ulti> as in what columns you tab upto

[11:54] <Ulti> tyil: because we are reading what you say

[11:54] <tyil> clearly not

[11:54] <Ulti> maybe put it in an actual text file :Z

[11:54] <Ulti> I can show all whitespace in vim like the best of them

[11:54] <tyil> I mean, I said "used 3 spaces" and suddenly in your tell me I said I used tabs

[11:55] <Ulti> you said that in direct follow up to alignment /with/ tabs

[11:55] <Ulti> in response to saying if El_Che changed all the tabs to some fixed spaces it would no longer align

[11:55] <tyil> I was trying to explain El_Che that just replacing all 4 space clusters with tabs will ruin your stuff

[11:55] <Ulti> my point is the tabs dont necessarily have to align even as tabs

[11:55] *** Ven` joined
[11:56] <tyil> my point is that tabs shouldnt be used for alignment

[11:56] <tyil> because it simply doesn't work for that

[11:56] <Ulti> tyil: right Im trying to explain to you I can set my tab stops to be every single character column and suddenly your tabs look like ass too

[11:56] <tyil> the fact that it works for SOME people is simply luck in their setup

[11:56] <Ulti> you better believe there are crazy people who do that

[11:56] *** xtreak left
[11:56] <tyil> it will look like ass to you

[11:56] <tyil> which is why you dont set it to 1-space width

[11:56] <Ulti> but yeah tabs for indent and space for aligning Im totally comfortable with

[11:57] *** pmurias left
[11:57] <tyil> but it may look great to others, and they should be able to read the code in a way they enjoy

[11:57] <tyil> forcing spaces everywhere for indentation is silly

[11:57] <Ulti> but Ive seen people use tabs to align and its horrible

[11:57] <Ulti> so stuff like my $thing\t=\t"value"

[11:57] * masak notices a whitespace debate taking place, and smiles wistfully as he remember his younger self

[11:57] <Ulti> if my tab stop is huge that looks gross

[11:58] <masak> remembers*

[11:58] <tyil> also, I can't find anything on Inttelij expanding text on the fly to other text (in my case, trying to convert texas to unicode ops)

[11:58] <Ulti> the issue is people dogmatically using one or the other really

[11:58] <Ulti> tabs have a clear purpose so do spaces

[11:58] <tyil> I can only find ways to do it on hitting a certain key to expand abbreviations or templates

[11:58] <Ulti> hmmm

[11:59] <tyil> the only editor I've been able to get that working in (on-the-fly text replacement) is vim

[11:59] <tyil> because apparently it's "very hard"

[11:59] <El_Che> masak: one is never to old to enjoy a good old tab/spaces or vim/emacs discussion ;)

[12:00] <Ulti> tyil: abusing the code complete is probably the way to do it

[12:00] <jast> no need to discuss when the answers are completely obvious ;)

[12:00] <Ulti> which would involve an extra return to create the unicode I guess

[12:00] <Ulti> which is perhaps nice

[12:00] <tyil> I don't know enough about intellij to get into that

[12:00] <tyil> I'd also rather not spend my free time working on proprietary stuff

[12:00] <jast> vim does make on-the-fly text replacement really easy

[12:00] <tyil> so if I cant do it easily, I'm going for the "its not possible" route

[12:00] <masak> El_Che: we should have a bot that detects the end of such a discussion, and summarizes: "congratulations, you spent 31 minutes on a whitespace discussion, during which you could have done [3 or 4 examples of constructive things]"

[12:01] <tyil> masak: I'm on the bus anyway

[12:01] <Ulti> its almost like people have these discussion to procrastinate

[12:01] <Ulti> or are on IRC at all for that reason ;3

[12:01] <tyil> the biggest issue was me and Ulti not understading eachother

[12:01] <jast> "... during which you could have converted $n% of the linux source tree from $whitespace_style_1 to $whitespace_style_2"

[12:01] <El_Che> masak: lol

[12:01] <Ulti> yeah talking past people on the internet is so common its painful really

[12:01] <Ulti> in person it happens so much less

[12:02] <masak> Ulti: if only everyone else wasn't so slow to understand one's point ;)

[12:02] <tyil> Ulti: thats why I try to avoid political discussion online

[12:02] <Ulti> LOL

[12:02] <Ulti> "slow"/actively not wanting to

[12:02] <El_Che> We're all dogs on the Internet

[12:02] <masak> \twoof

[12:02] <Ulti> tyil: like tabs vs spaces

[12:02] <tyil> I'm a little 2d girl on the Internet

[12:02] <Ulti> Silicon Valley has my best tabs v spaces bits

[12:03] <tyil> Ulti: that's not policital, that's just common sense

[12:03] <jast> I got into a really pointless discussion by accident the other day and the other person got mortally offended or something

[12:03] <Ulti> tyil: LOL

[12:03] <tyil> also SV's epi on it was shit, the girl just smashes spacebar 4 times

[12:03] <Ulti> the common sense thing is to actually have all code as a binary AST on disk and render it however anyone likes

[12:03] <jast> that's silly, you should smash the tab key 4 times

[12:03] <tyil> it felt like they googled "fun epic developer discussion argument crazy lol" on google

[12:03] *** pmurias joined
[12:03] <tyil> and took the first hit, which said something on spaces and tabs

[12:04] <tyil> and they completely dont understand how computers work, or how devs work, and they couldnt be arsed for an expert opinion

[12:04] <Ulti> really we shouldnt have good compilers we should have super high level decompilers

[12:04] <Ulti> where I can take any binary and see Ultilang with exactly 2.5 spaces indent

[12:04] <Ulti> then I only ever have to know my programming language to work with you all

[12:04] <masak> I'll try to say something that everything agrees to: if your team ends up having to fix each others' spaces/tabs after they've been merged to master, your project is not configured right.

[12:04] <jast> all source code should just be XML, that's easy to read, right? right??

[12:05] <Ulti> masak: yeah git hooks are your friend for that

[12:05] <masak> jast: did you ever see Eidola?

[12:05] <Ulti> jast: it is if you have a nice DOM aware editor

[12:05] <masak> Ulti: 007 has Travis checking indentation and trailing spaces

[12:05] <jast> masak: no, and I have a bad feeling about it because you're mentioning it in this context

[12:05] <Ulti> masak what are your settings space or tab >:3

[12:06] <jast> I prefer tabs, and I use whatever the project I'm working on uses

[12:06] <masak> jast: it was an old project where code was "presentation-agnostic", closer to an AST than to text

[12:06] <jast> I think there are quite a few projects, most of them probably vapourware, that do the AST thing

[12:06] <masak> Ulti: in my own projects I use spaces-only (but I love the Tab key)

[12:06] <masak> Ulti: but I'm fine with working in whatever project

[12:07] <jast> my editor auto-detects the whitespace profile so I hardly ever think about it

[12:07] *** pmurias left
[12:07] <jast> I just default to using tabs

[12:07] <masak> Ulti: I basically buy Atwood's argument that the Tab character is the imposter: https://blog.codinghorror.com/whitespace-the-silent-killer/

[12:08] <masak> you should only ever have one indistinguishable horizontal invisible character in your source code, and we can't get rid of spaces.

[12:08] <Ulti> yeah I should probably highlight I always work in whatever format I find code in

[12:08] <Ulti> even if Im personally disgusted by it

[12:08] *** HaraldJoerg left
[12:08] *** broquaint left
[12:09] <Ulti> which given my PhD supervisor used variable names $this $that and didnt believe in *any* white space....

[12:09] *** broquaint joined
[12:09] <masak> I also have many other code conventions I personally don't prefer but am willing to work under if the team has decided on it. it's part of being a professional developer.

[12:09] <Ulti> I literally put his stuff through perltidy then by hand edited it back

[12:10] <masak> I am usually more annoyed by a lack of convention than any particular convention.

[12:10] <Ulti> masak: there is an add on to that reaosning though, that sometimes the original author cargo culted something and doesnt care at all

[12:10] <Ulti> and if you end up maintaining something it might as well not make you hate life

[12:10] <Ulti> Im usually annoyed by copy pasta everywhere with like a bug fixed in one of ten copies of some code

[12:11] <Ulti> thats the real wtf 

[12:11] <Ulti> not did they use spaces and the right number of them

[12:12] <masak> Ulti: I liked getting contributions to 007, but I didn't like having to fix whitespace issues. so I added the whitespace tests; now the test suite fails if the whitespace is not right. problem solved.

[12:12] <Ulti> its like some people dont understand you can replace 200 nested if statements with a single function and a parameter... yet these are somehow "professionals" you work alongside and its much harder to respect that than their white space use

[12:13] <masak> Ulti: caring about the code's "looks" is an interesting mix of senior/junior behavior. it's senior in the sense that caring at all indicates a burgeoning maturity and (benign) sense of detail. it's junior in the sense that it's not directly connected to what the code *does* and the value it delivers.

[12:13] <Ulti> actually are there any cyclomatic complexity tests for P6 yet?

[12:14] <Ulti> we had a hard limit on that in the last place I worked and it saved many lives

[12:14] <masak> that's the first good thing I've heard anyone say about cyclomatic complexity ever, I think

[12:15] <masak> mentally, I had cyclomatic complexity filed in the bucket "the kind of code metric that people end up abusing/misunderstanding long before it ever has a chance to become useful"

[12:15] <lizmat> .oO( Tour de France ? )

[12:15] <masak> lizmat: :D

[12:16] <Ulti> masak: granted the main good use of it is discovering when someone super jr thought they were super smart scripting the generation of a giant monster that could be a single regex

[12:17] <Ulti> I still have nightmares of the first time I saw goto semantics in some production Perl code

[12:17] <Ulti> about twent ifs deep

[12:18] *** HaraldJoerg joined
[12:18] <Ulti> I think phasers are actually a killer feature for the sorts of people who think this way

[12:19] <masak> you mean, shooting them to stun? :P

[12:19] <Ulti> :D

[12:19] <Ulti> I can see it now if (True) { LEAVE {} }

[12:20] * masak .oO( phasers: eats, shoots, and LEAVEs )

[12:20] <Ulti> that is a blog article title right there

[12:22] *** ExtraCrispy left
[12:23] <lizmat> m: LEAVE say "bye"

[12:23] <camelia> rakudo-moar e2bbe3f0a: OUTPUT: ¬´bye‚ê§¬ª

[12:23] <lizmat> or perhaps:

[12:23] <lizmat> LEAVE say "Goodbye Cruel World"

[12:23] <lizmat> as an improved "Hello world" excercise  :-)

[12:25] <masak> today's mini-challenge: shortest program that will segfault (or similar) Rakudo.

[12:25] <masak> if the programs are interesting enough, I might blog about it ;)

[12:26] <Ulti> with or without using native call

[12:27] <Ulti> feels like cheating if its native call

[12:27] <masak> only rule is "shorter is better"

[12:27] <masak> I would also recommend trying the MOP

[12:27] *** ExtraCrispy joined
[12:27] <Ulti> have you already won? <___<

[12:27] <masak> no, but I'm actively thinking about it

[12:28] <masak> I know we have a few wonderfully short ones in RT, but they might have been fixed

[12:28] <masak> diakopter have found some wonderfully short ones over the years

[12:28] <Ulti> signals feel like they might be ripe too

[12:28] <masak> it was on one of those occasions I blurted out that I thought I loved him :P

[12:29] <Ulti> well if short is best surely the easiest way is to just randomly search for them

[12:29] <Ulti> with a little GA

[12:30] <masak> because he said something like "I just think really hard about what the underlying semantics might be, and then I try to adversarially challenge that", and I wanted to say "wow, that's *exactly* what I do too, and I didn't know someone else thought like that"

[12:30] <masak> but it came out like "I... I think I love you" :D

[12:30] <Ulti> source mates

[12:30] <masak> exactly

[12:31] <masak> Ulti: I'm not aware that anyone has every run American Fuzzy Lop on Rakudo. maybe an opportunity there.

[12:31] <lizmat> .oO( great minds think alike )

[12:31] <Ulti> it is fun when you meet a programmer with a similar enough mind you can go full short hand on everything, or a sufficienly better programmer than yourself

[12:31] <masak> lizmat: "...but fools seldom differ" :P

[12:32] <masak> Ulti: there's a story about Thompson and Richie when they are developing C, and they accidentally write the same bit of assembly code. about 100 instructions, I think. their versions were identical.

[12:33] <Ven`> I wonder if someone wrote a perl6 fuzzer already

[12:33] <masak> I first had the thought back in 2008.

[12:33] * masak <-- patent pending

[12:34] <masak> especially since there was a point where we found a new bug just by combining two random features :P

[12:34] <masak> I figured I could automate that, and use code templates somehow to just auto-generate code that combined features

[12:35] <timotimo> i fuzzed nqp. it went very badly

[12:35] <masak> timotimo: defined "badly" :)

[12:35] <masak> define*

[12:35] <masak> and was it with AFL?

[12:35] <timotimo> yes, afl

[12:35] <timotimo> i think it just ran into the timeout every single time

[12:35] <Ven`> define "timotimo"

[12:35] <timotimo> "timotimo defines badly"

[12:35] <Ven`> .oO( very carefully )

[12:35] <timotimo> and the "crashes" it found all went away when running the files manually

[12:36] <masak> ah, so "badly" as in "results were not useful" :(

[12:36] <timotimo> yes

[12:37] <masak> I was hoping for the "badly" that means "it found 1727 bugs"

[12:37] <timotimo> it wasn't able to understand what the program was doing, so it wasn't quite as "guided" as you'd hope from afl

[12:37] <timotimo> http://hack.p6c.org/~timo/ - the graphs on the right were nqp code

[12:37] <b2gills> masak: my@a["antidisestablishmentarianism".ords.sort]X=1

[12:38] <masak> b2gills: nice. I think I will allow memory overflow.

[12:38] <masak> because why not

[12:39] *** p6noob left
[12:39] <masak> ok, b2gills has supplied us with a baseline: 49 characters. surely there are shorter programs which crash Rakudo?

[12:39] <b2gills> It was an intermediate step on the way to this: https://codegolf.stackexchange.com/a/168437/1147

[12:39] <masak> remember, as people find shorter solutions, the task actually gets *easier*, since the search space gets smaller :P

[12:42] <timotimo> i wonder how exactly it interprets that list of ords

[12:43] <timotimo> it's clearly taking it as a shape declaration

[12:43] <timotimo> ... oh my god

[12:43] <Ulti> :D

[12:43] *** domidumont joined
[12:43] <Ulti> maybe I'll just get some popcorn rather than look for some

[12:43] <timotimo> well, you're trying to declare an 28-dimensional array with around 100 fields in every direction

[12:43] <Ulti> who doesnt do that every day

[12:43] <Ulti> cmon

[12:43] <b2gills> Yeah I did shortly realize that I needed to put parens around (my@a)

[12:43] <Ulti> *deal with it*

[12:44] <masak> should give some clues on how to do it shorter

[12:44] <timotimo> m: my@a[100xx100]

[12:44] <camelia> rakudo-moar e2bbe3f0a: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Confused‚ê§at <tmp>:1‚ê§------> 3my@a[1007‚èè5xx100]‚ê§    expecting any of:‚ê§        whitespace‚ê§¬ª

[12:44] <timotimo> m: my@a[100 xx 100]

[12:44] <camelia> rakudo-moar e2bbe3f0a: ( no output )

[12:44] <timotimo> m: my@a[100 xx 100] X= 1

[12:44] <camelia> rakudo-moar e2bbe3f0a: OUTPUT: ¬´Cannot access 100 dimension array with 1 indices‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:44] <masak> m: my@a[9 xx 9]

[12:44] <camelia> rakudo-moar e2bbe3f0a: OUTPUT: ¬´MoarVM panic: Memory allocation failed; could not allocate 3099363912 bytes‚ê§¬ª

[12:44] <masak> I think I just took the lead

[12:45] <masak> m: my@[9 xx 9]

[12:45] <camelia> rakudo-moar e2bbe3f0a: OUTPUT: ¬´MoarVM panic: Memory allocation failed; could not allocate 3099363912 bytes‚ê§¬ª

[12:46] <masak> ok, I'm gonna consider memory exhaustion as a sort of "honorable panic", but real panics will be considered slightly nobler in spirit

[12:47] <masak> m: my@[1e9]

[12:47] <camelia> rakudo-moar e2bbe3f0a: OUTPUT: ¬´MoarVM panic: Memory allocation failed; could not allocate 8000000000 bytes‚ê§¬ª

[12:48] <masak> m: my@[9e9]

[12:48] <camelia> rakudo-moar e2bbe3f0a: OUTPUT: ¬´Illegal dimension in shape: 9000000000. All dimensions must be integers bigger than 0‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:48] <masak> I think that's a genuine bug. anyone care to rakudobug it?

[12:48] <Ulti> locally I dont have these segfaults

[12:48] <Ulti> :/

[12:48] <masak> those are not segfaults; they are memory allocation failures.

[12:48] <Ulti> ahh

[12:49] <masak> but (as I said above) the contest is really about segfaults (or errors of similar severity)

[12:49] <Ulti> Im not exactly memory rich so thats also surprising

[12:50] <masak> I think the `my@[1e9]` (8 chars) is at or near the theoretical limit for how short a program can run out of memory anyway.

[12:50] <masak> but I'm more interested in genuine segfaults.

[12:51] <jnthn> A panic isn't a segfault, it's the VM knowing something is bad and doing better than a SEGV :)

[12:52] <masak> I'm fine with it being a panic, but I think we've exhausted the joy in memory-related ones

[12:52] <masak> real actual segfaults are a bonus, but I suspect we'll only find ones via the MOP, of the DIHWIDT variety

[12:53] <b2gills> I just did "my@[{join ';',100 xx 100}]".EVAL in the REPL, did a Ctrl-C and got a segfault

[12:53] <masak> haha

[12:53] <masak> if you can get it reliably without the Ctrl+C, then we might be in business ;)

[12:54] <b2gills> It might have been partially because of the combination of things I did in the REPL before that

[12:55] <masak> looks like. the thing works here, from the command line.

[12:56] <b2gills> my int $ = 's'‚ê§my@[100]‚ê§'my@[{100 xx100}]'.EVAL‚ê§'my@[{100 xx 100}]'.EVAL‚ê§"my@[{100 xx 100}]".EVAL‚ê§"my@[{join ';',100 xx 100}]".EVAL‚ê§^C

[12:57] <b2gills> ^ That was the exact sequence of commands I ran in the REPL

[12:59] <masak> reproduced.

[12:59] <b2gills> The `my@[100]` seems to be necessary

[12:59] <masak> I got the segfault immediately, without having to Ctrl+C

[13:00] <b2gills> I was running it through rlwrap

[13:01] <masak> I'm getting a segfault just by running `"my@[{join ';',100 xx 100}]".EVAL` on the REPL. no rlwrap.

[13:01] <masak> but not on the command line.

[13:01] <masak> m: "my@[{join ';',100 xx 100}]".EVAL

[13:01] <camelia> rakudo-moar e2bbe3f0a: ( no output )

[13:03] <b2gills> Actually running the "my@[{join ';',100 xx 100}]".EVAL twice in the REPL crashes it

[13:03] <masak> I never get that far ;)

[13:04] <b2gills> v2018.06.141.g.4.ef.8433

[13:04] *** jameslenz joined
[13:05] <b2gills> The first time I run it in the REPL I get "Cannot look up attributes in a array type object"

[13:05] <masak> 2018.04.1-128-g27e8dab9f

[13:05] <masak> looks like it's time to upgrade here :)

[13:06] * b2gills .oO(Maybe I could get a job as a human fuzzer)

[13:06] <masak> I blithely notice that so far, we don't even have a _long_ consistently segfault-causing program in the running

[13:06] <b2gills> I upgrade very regularly (sometimes 3 or more times a day)

[13:09] *** jameslenz left
[13:09] <AlexDaniel> tbrowder_: so what's up with the MIGRATING row in language.html? It doesn't look quite right, what's the plan?

[13:11] <Ven`> I had a small SEGV with the MOP, but it's gone now :( lost in the limbs of the irc logs

[13:11] *** xtreak joined
[13:12] <b2gills> $ perl6 --repl-mode=interactive <<<'"my@[{join ";",100 xx 100}]".EVAL‚ê§"my@[{join ";",100 xx 100}]".EVAL‚ê§'

[13:13] <Ven`> I remember jnthn++ giving me one 2-3 months back when I was doing specialization experiments

[13:14] <masak> b2gills: reproduced.

[13:14] <masak> b2gills: I wonder why that one menifests only when using the REPL

[13:15] <masak> b2gills: I'm also getting 'Died with X::Method::NotFound' just before the segfault

[13:15] <b2gills> I get `Cannot look up attributes in a array type object`

[13:16] <b2gills> I wonder if it is precomp related

[13:16] <b2gills> or if you have a different compiler version, and that is the difference

[13:19] *** p6noob joined
[13:22] <tbrowder_> AlexDaniel: g‚Äôday! I‚Äôm working on it, but if that MIGRATING  bothers you at the moment, I can remove it.

[13:22] <AlexDaniel> it's ok as long as we plan not to have it :)

[13:24] <tbrowder_> My plan is pretty much exactly as I have outllined it in the Phase 2 page on the doc wiki. I am working on the p6 prog that does the work in a copy of the existing doc/Language dir.

[13:27] <tbrowder_> Eventually, after my local testing, I will integrate my p6 code into htmlify.p6 if that suits everyone. I will also modify the Makefile to regen the proper files during a build after any change to the source files.

[13:29] <tbrowder_> When all that is working to your satisfaction, I plan to work on the rendering part to make all look better.

[13:29] *** xtreak left
[13:31] <tbrowder_> My progress is slower than I would like, but it is > 0.

[13:32] *** eliasr joined
[13:40] <AlexDaniel> that's good

[13:59] *** xtreak joined
[14:02] <jkramer> m: say "test"

[14:02] <camelia> rakudo-moar 35fec8e09: OUTPUT: ¬´test‚ê§¬ª

[14:02] <jkramer> Hmm. Anyone know what the quotation bracket thingies are called that I see in use in P6 code sometimes? They look like this but apparently that's not them: „ÄåHello!„Äç

[14:03] <moritz> .u „Äå

[14:03] <yoleaux> U+300C LEFT CORNER BRACKET [Ps] („Äå)

[14:03] <moritz> m: say 'a' ~ /./

[14:03] <camelia> rakudo-moar 35fec8e09: OUTPUT: ¬´Regex object coerced to string (please use .gist or .perl to do that)‚ê§a‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª

[14:03] <moritz> m: say 'a' ~~ /./

[14:03] <camelia> rakudo-moar 35fec8e09: OUTPUT: ¬´ÔΩ¢aÔΩ£‚ê§¬ª

[14:03] <moritz> .u ÔΩ¢ÔΩ£

[14:03] <yoleaux> U+FF62 HALFWIDTH LEFT CORNER BRACKET [Ps] (ÔΩ¢)

[14:03] <yoleaux> U+FF63 HALFWIDTH RIGHT CORNER BRACKET [Pe] (ÔΩ£)

[14:04] <moritz> fun fact: the halfwidth corner brackets are *super* hard to find in monospace fonts

[14:05] <moritz> in the regex book I had to replace them with other, similar looking characters, because none of the monospace fonts that leanpub supports contained them

[14:05] <jkramer> Thanks! But yeah, doesn't work with my font either :( I don't remember where I've seen them working

[14:05] <moritz> .u ‚åú‚åü

[14:05] <yoleaux> U+231C TOP LEFT CORNER [So] (‚åú)

[14:05] <yoleaux> U+231F BOTTOM RIGHT CORNER [So] (‚åü)

[14:05] <moritz> that's what I replaced them with

[14:06] <jkramer> Do they work as quotation marks in P6 code though?

[14:06] <jkramer> No :(

[14:06] *** curan left
[14:06] <moritz> no, but there's no reason to copy&paste *output* from examples as Perl 6 code

[14:07] <jkramer> I just wanted to fancy up my quotation game :)

[14:08] *** skids joined
[14:14] *** psychoslave joined
[14:20] *** psychoslave left
[14:39] *** Ven` left
[14:40] *** Ven` joined
[14:41] *** itaipu joined
[14:47] *** fake_space_whale joined
[14:48] *** xtreak left
[14:49] *** warriors joined
[14:50] *** warriors left
[14:50] *** wamba left
[14:50] *** warriors joined
[14:55] *** BertolucciTalks joined
[15:03] *** itaipu left
[15:04] *** itaipu joined
[15:04] *** jameslenz joined
[15:07] *** robertle left
[15:07] *** itaipu left
[15:08] *** dakkar left
[15:09] *** jameslenz left
[15:09] *** dakkar joined
[15:09] *** itaipu joined
[15:15] *** itaipu left
[15:15] *** itaipu joined
[15:20] *** ufobat_ joined
[15:23] *** itaipu left
[15:23] *** itaipu joined
[15:25] *** itaipu left
[15:29] *** itaipu joined
[15:30] *** itaipu left
[15:31] *** troys joined
[15:33] *** ufobat_ left
[15:34] *** itaipu joined
[15:40] *** itaipu left
[15:41] *** itaipu joined
[15:42] *** kerframil left
[15:45] *** itaipu left
[15:46] *** itaipu joined
[15:51] <AlexDaniel> moritz: I think some modules are missing in perl6-all-modules, for example: https://github.com/moritz/perl6-all-modules/tree/master/github/masak

[15:52] <AlexDaniel> I think this folder should have `yapsi` in it ( https://github.com/masak/yapsi )

[15:58] *** johan_ joined
[16:01] <AlexDaniel> .tell masak can you please take a look at https://github.com/rakudo/rakudo/issues/2057 ?

[16:01] <yoleaux> AlexDaniel: I'll pass your message to masak.

[16:02] <AlexDaniel> .tell masak tests simply say that things did not compile, without any error or other help. I can investigate later, but for now that's all I see

[16:02] <yoleaux> AlexDaniel: I'll pass your message to masak.

[16:03] *** johan_ left
[16:15] *** Schepeers left
[16:15] *** fake_space_whale left
[16:16] *** p6noob left
[16:16] *** p6noob joined
[16:17] *** domidumont left
[16:19] <moritz> AlexDaniel: there are currently some shenanigans in the ecosystem that prevent the updater from working correctly

[16:20] *** Schepeers_5 joined
[16:21] *** Schepeers_5 left
[16:22] <moritz> I guess I should debug a bit more what's going on exactly

[16:25] *** Schepeers joined
[16:27] <AlexDaniel> .seen dwarring

[16:27] <yoleaux> I saw dwarring 1 Jun 2017 21:48Z in #perl6: <dwarring> tbrowder: got it thanks!

[16:30] *** Ven` left
[16:30] *** scimon left
[16:37] *** raynold joined
[16:41] *** donpdonp joined
[16:54] <[Coke]> sake - is there a way to dynamically generate tasks aside from EVAL?

[17:01] <[Coke]> in an old school system, I'd have a config step that generated the makefile which then had explicit entries for, say, a dynamically generated list of files.

[17:03] <ilmari> sake? is that Yet Another Make Replacement‚Ñ¢? written in ‚Ä¶ sed? scheme? shell?

[17:04] <moritz> in sed6 :-)

[17:04] *** dakkar left
[17:05] *** jameslenz joined
[17:09] *** jameslenz left
[17:17] <[Coke]> perl6

[17:18] <[Coke]> ilmari: https://github.com/perl6/p6-sake

[17:19] <ilmari> surely it should be psake (pronounced the same, of course)

[17:19] <timotimo> for pete's sake

[17:20] <[Coke]> ilmari: https://github.com/perl6/p6-sake/issues/19

[17:21] <[Coke]> so far, "ake" seems to be the vote winner.

[17:23] <Geth> ¬¶ doc/coke/build: 25 commits pushed by (Will "Coke" Coleda)++, Coke++

[17:23] <Geth> ¬¶ doc/coke/build: review: https://github.com/perl6/doc/compare/175acb54815f...3a0ef2e58b85

[17:24] <timotimo> no way there isn't already an ake

[17:24] <[Coke]> AlexDaniel: ^^ that starts moving things out of htmlify.p6 into the sakefile. (plan on making that step smarter)

[17:28] *** bwisti left
[17:30] *** itaipu left
[17:31] *** itaipu joined
[17:35] *** itaipu left
[17:36] *** itaipu joined
[17:45] *** melezhik joined
[17:49] *** domidumont joined
[17:50] *** lizmat left
[17:52] <AlexDaniel> [Coke]: not sure if it's the vote winner or if people just like Audrey so much :)

[17:52] <AlexDaniel> I was about to click üëç too :)

[17:56] <warriors> ake is fine p6-ake will probably be pronounced psake anyway :)

[17:57] <Geth> ¬¶ doc/coke/build: f405db01eb | (Will "Coke" Coleda)++ | Sakefile

[17:57] <Geth> ¬¶ doc/coke/build: Only generate svg files that are out of date.

[17:57] <Geth> ¬¶ doc/coke/build: 

[17:57] <Geth> ¬¶ doc/coke/build: Don't generate in progress output.

[17:57] <Geth> ¬¶ doc/coke/build: review: https://github.com/perl6/doc/commit/f405db01eb

[17:57] <Geth> ¬¶ doc/coke/build: 9370945570 | (Will "Coke" Coleda)++ | Sakefile

[17:57] <Geth> ¬¶ doc/coke/build: Run these sub-tasks in parallel

[17:57] <Geth> ¬¶ doc/coke/build: 

[17:57] <Geth> ¬¶ doc/coke/build: (add back some diagnostics)

[17:57] <Geth> ¬¶ doc/coke/build: review: https://github.com/perl6/doc/commit/9370945570

[18:03] *** itaipu left
[18:04] *** itaipu joined
[18:06] *** itaipu left
[18:08] *** pecastro joined
[18:09] *** eliasr left
[18:09] *** itaipu joined
[18:10] <tobs> m: for ^10 { .print; NEXT print ', ' }

[18:10] <camelia> rakudo-moar fffe89c5e: OUTPUT: ¬´0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ¬ª

[18:10] <tobs> What would be a good way to get rid of the trailing comma? I'd still like to use a loop, not a .join

[18:11] <timotimo> you can get each item along with the next item using rotor :partial, then see if you get a second item or not

[18:11] <timotimo> m: for ^10 .rotor(2=>1) { .perl.say }

[18:11] <camelia> rakudo-moar fffe89c5e: OUTPUT: ¬´(0, 1)‚ê§(3, 4)‚ê§(6, 7)‚ê§¬ª

[18:11] <timotimo> m: for ^10 .rotor(2=>1, :partial) { .perl.say }

[18:11] <camelia> rakudo-moar fffe89c5e: OUTPUT: ¬´(0, 1)‚ê§(3, 4)‚ê§(6, 7)‚ê§(9,)‚ê§¬ª

[18:11] <timotimo> oh, needs to actually be:

[18:11] *** itaipu left
[18:11] <timotimo> m: for ^10 .rotor(2=>-1, :partial) { .perl.say }

[18:11] <camelia> rakudo-moar fffe89c5e: OUTPUT: ¬´(0, 1)‚ê§(1, 2)‚ê§(2, 3)‚ê§(3, 4)‚ê§(4, 5)‚ê§(5, 6)‚ê§(6, 7)‚ê§(7, 8)‚ê§(8, 9)‚ê§(9,)‚ê§¬ª

[18:11] <timotimo> so with comma it looks like this:

[18:12] <timotimo> m: for ^10 .rotor(2=>-1, :partial) { .[0].print; ",".print if $_[1] }

[18:12] <camelia> rakudo-moar fffe89c5e: OUTPUT: ¬´0,1,2,3,4,5,6,7,8,9¬ª

[18:13] <tobs> While that's a nice idea, my loop isn't so simple. I can rewrite it as a bunch of .maps but would rather not (this time)

[18:14] *** itaipu joined
[18:14] <tobs> or wait

[18:14] <tobs> I get what you mean now. Hopefully rotor works with a Seq

[18:16] <timotimo> of course it does :)

[18:20] <perlbot> Anonymous pasted a new file at https://f.perl.bot/p/o69vuo - 

[18:21] <vrurg> https://f.perl.bot/p/o69vuo ‚Äì I wonder if this is a bug I found. Shall it be reported?

[18:21] *** itaipu left
[18:22] <TimToady> m: ($_ for ^10).join(', ')   # you can still use a loop with join

[18:22] <camelia> rakudo-moar fffe89c5e: ( no output )

[18:22] *** itaipu joined
[18:22] <TimToady> m: say ($_ for ^10).join(', ')   # you can still use a loop with join

[18:22] <camelia> rakudo-moar fffe89c5e: OUTPUT: ¬´0, 1, 2, 3, 4, 5, 6, 7, 8, 9‚ê§¬ª

[18:22] <tobs> indeed timotimo++

[18:23] <tobs> something like this would be nicer to read I think: for |($_ = ^10) -> $x { print $x; NEXT print ", " if .consumed }

[18:23] <tobs> but Seq.consumed doesn't exist

[18:24] <TimToady> that's equivalent to testing for eof, which is also a bad idea

[18:24] <tobs> s/if/unless/

[18:24] *** itaipu left
[18:25] <TimToady> it's also equivalent to asking if you can ask a question, when you should just ask the question :)

[18:26] <tobs> I don't do that

[18:26] <tobs> so that means, I shouldn't test for EOF either...

[18:27] *** itaipu joined
[18:28] *** itaipu left
[18:31] <TimToady> in a language that already handles the ends of iterations for you, it's at best an unneeded mechanism, and at worst a race condition, and sometimes race conditions turn into security holes

[18:32] *** itaipu joined
[18:32] *** ExtraCrispy left
[18:33] *** itaipu left
[18:36] <tobs> Ah, I see. But when consuming strings, there is something like the % quantifier which handles the opposite of my problem above gracefully.

[18:36] *** molaf joined
[18:37] *** Zoffix joined
[18:37] <TimToady> yes, which is the opposite of what join does :)

[18:37] *** itaipu joined
[18:37] <El_Che> https://lwn.net/Articles/759654/ "Guido van Rossum resigns as Python leader", in case someone missed it

[18:37] <Ulti> tobs: this might also work for you https://docs.perl6.org/syntax/gather%20take

[18:37] <tobs> touch√©

[18:38] <Ulti> if you have complex logic in a loop and want to construct something seqy and then do a join afterwards

[18:38] <tobs> yes, it makes sense to put the loop into a function of its own

[18:38] <Ulti> especially if you want to do the join much later in your code 

[18:39] <Zoffix> vrurg: you could report it; maybe there's a way to offer a better error. But what happens is the $/ exists in the same scope, but it ain't got stuff in it yet (so it's null), but the regex that matches for /md/ there tries to write into it, hence the crash. Just don't use $/ as a name for that parameter. Use anything else

[18:40] <vrurg> Zoffix: So damn simple. Thanks a lot! I have it reported already. Gonna add a comment about your note.

[18:40] *** itaipu left
[18:40] <timotimo> m: for ^10 { FIRST { 1 } || print ", "; .print }

[18:40] <camelia> rakudo-moar fffe89c5e: OUTPUT: ¬´, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9¬ª

[18:41] <timotimo> m: for ^10 { FIRST { 0 } && print ", "; .print }

[18:41] <camelia> rakudo-moar fffe89c5e: OUTPUT: ¬´0123456789¬ª

[18:41] <timotimo> m: for ^10 { !(FIRST { 1 }) && print ", "; .print }

[18:41] <camelia> rakudo-moar fffe89c5e: OUTPUT: ¬´, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9¬ª

[18:41] <timotimo> dangit :D

[18:41] <Ulti> El_Che: thats an interesting PEP why didnt they just use '=' :/

[18:41] *** subroot joined
[18:41] <Ulti> also that is a super good addition to Python it sucks how very little is an expression 

[18:42] *** itaipu joined
[18:43] <El_Che> := like go

[18:43] *** undersightable6 joined
[18:44] <El_Che> I prefer "my" :)

[18:44] <warriors> hi, is the fact that a space is required after a parent class name as in > class Child is Parent1{ .. } vs class Child is Parent1 { .. } a bug or not 

[18:44] <TimToady> odd that they still limit += etc to statement level

[18:44] <timotimo> tobs: also be mindful about the difference between .join-ing the result of a sequence and using the .rotor(2->-1) thing; the latter will print immediately when a new value is available, while the other will suck up all values into memory and print it out at once

[18:45] <warriors> the documentation doesnt mention that we need a white space after a parent class name

[18:45] <Zoffix> warriors: not a bug. You left before I had a chance to give you a link to docs

[18:45] <geekosaur> warriors, not a bug. {} directly suffixed to something is *always* a hash-style dereference (Associative postcircumfix)

[18:45] * Zoffix digs

[18:45] <Ulti> TimToady: so odd it annoys me weekly when I catch myself getting it wrong

[18:45] <Zoffix> warriors: there's a bunch of white-space sensitive "traps": https://docs.perl6.org/language/traps#Whitespace

[18:46] <geekosaur> it's not specific to class names or anything else, it's always true. likewise other postcircumfixes like () and [] and <>

[18:46] <warriors> ok 

[18:46] <Zoffix> m: class Child is Parent1{ ‚Ä¶ } 

[18:46] <camelia> rakudo-moar fffe89c5e: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§'Child' cannot inherit from 'Parent1' because it is unknown.‚ê§at <tmp>:1‚ê§¬ª

[18:46] <Zoffix> m: class Child is Int{ ‚Ä¶ } 

[18:46] <camelia> rakudo-moar fffe89c5e: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot resolve caller trait_mod:<is>(Child, Int, Block); none of these signatures match:‚ê§    (Mu:U $child, Mu:U $parent)‚ê§    (Mu:U $child, :$DEPRECATED!)‚ê§    (Mu:U $type, :$rw!)‚ê§    (Mu:U $type,‚Ä¶¬ª

[18:46] <Zoffix> hehe

[18:47] <Zoffix> it gets intrepreted as a trait with a block arg given to it :)

[18:48] <Zoffix> m: sub trait_mod:<is>(\c, Int, Block) { dd c }; class Child is Int{‚Ä¶}

[18:48] <camelia> rakudo-moar fffe89c5e: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Type check failed in binding to parameter 'c'; expected Any but got Child (?)‚ê§at <tmp>:1‚ê§¬ª

[18:48] <Zoffix> m: sub trait_mod:<is>(Mu \c, Int, Block) { dd c }; class Child is Int{‚Ä¶}

[18:48] <camelia> rakudo-moar fffe89c5e: OUTPUT: ¬´(Child without .perl method)‚ê§5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse class definition‚ê§at <tmp>:1‚ê§------> 3, Block) { dd c }; class Child is Int{‚Ä¶}7‚èè5<EOL>‚ê§¬ª

[18:48] *** itaipu left
[18:48] <Zoffix> neat

[18:48] *** itaipu joined
[18:49] <Zoffix> m: sub trait_mod:<is>(Mu \c, Int, Block) { class ::(c) { method heh { say "hah" } } }; class Child is Int{‚Ä¶}; Child.heh

[18:49] <camelia> rakudo-moar fffe89c5e: OUTPUT: ¬´===SORRY!===‚ê§Name ::(c) is not compile-time known, and can not serve as a package name‚ê§¬ª

[18:49] <Zoffix> m: sub trait_mod:<is>(Mu \c, Int, Block) { class ::(BEGIN c) { method heh { say "hah" } } }; class Child is Int{‚Ä¶}; Child.heh

[18:49] <camelia> rakudo-moar fffe89c5e: OUTPUT: ¬´Use of uninitialized value of type Mu in string context.‚ê§Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.‚ê§  in any package_declarator:sym<class> at /home/camelia/rakudo-m-inst-2/share/nqp/lib/Perl6/Grammar‚Ä¶¬ª

[18:49] <Zoffix> m: sub trait_mod:<is>(Mu \c, Int, Block) { class ::(BEGIN c.^name) { method heh { say "hah" } } }; class Child is Int{‚Ä¶}; Child.heh

[18:49] <camelia> rakudo-moar fffe89c5e: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Too late for unit-scoped class definition;‚ê§Please use the block form.‚ê§at <tmp>:1‚ê§------> 3 say "hah" } } }; class Child is Int{‚Ä¶};7‚èè5 Child.heh‚ê§¬ª

[18:49] <Zoffix> oh well

[18:50] <Zoffix> warriors: but what you called a cryptic error has been filed as an LTA error ticket: R#2052 

[18:50] <synopsebot> R#2052 [open]: https://github.com/rakudo/rakudo/issues/2052 [LTA] LTA error in construct declaring `sub class`

[18:50] <Zoffix> huggable: lta

[18:50] <huggable> Zoffix, nothing found

[18:50] <Zoffix> huggable: LTA

[18:50] <huggable> Zoffix, "Less Than Awesome"; antonym: PDG "Pretty Damn Good"

[18:50] *** itaipu left
[18:51] *** Zoffix left
[18:51] <TimToady> as an extensible language, Perl 6 tends to simply require whitespace anywhere you need to distinguish a circumfix from a postcircumfix, since neither of those categories are closed to extension

[18:51] <warriors> thank you :)

[18:52] <TimToady> and since the way that works is that anything that can be interpreted as postfix/postcircumfix will be, it even applies when the next thing isn't strictly a circumfox operator

[18:52] <TimToady> like a block

[18:52] <TimToady> heh, "circumfox"

[18:53] <TimToady> .oO(I've been circumfoxed!)

[18:53] *** itaipu joined
[18:54] <Ulti> a sly circumfox operator

[18:55] <TimToady> an additional wrinkle is that for various constructs, a block is the only term that we all to function as a terminator of the previous expression, technically violating the two-terms-in-a-row rule

[18:55] <TimToady> *allow

[18:56] <TimToady> but we can only do that when there's whitespace in front of it, and we're expecting a terminating block for control flow and such

[18:58] <TimToady> the postfix vs non-postfix thing is one of the few places where we had to be a lot stricter on whitespace than Perl 5 for the sake of extensibility

[18:59] *** itaipu left
[18:59] <TimToady> you can't say $x<3 either, for the same reason

[19:00] *** itaipu joined
[19:05] *** jameslenz joined
[19:06] *** itaipu left
[19:07] *** itaipu joined
[19:07] *** domidumont left
[19:09] *** itaipu left
[19:10] *** jameslenz left
[19:12] *** itaipu joined
[19:18] *** itaipu left
[19:19] *** itaipu joined
[19:20] *** dogbert17 joined
[19:21] *** itaipu left
[19:24] *** itaipu joined
[19:28] *** itaipu left
[19:29] *** itaipu joined
[19:31] *** melezhik left
[19:32] *** itaipu left
[19:33] *** robertle joined
[19:34] *** itaipu joined
[19:38] *** itaipu left
[19:39] *** mspo joined
[19:56] *** stmuk joined
[19:58] <mspo> that guido retirement thing is interesting in perl context :)

[19:59] *** stmuk_ left
[20:01] *** p6noob left
[20:08] *** lizmat joined
[20:28] <El_Che> mspo: whyN

[20:28] <mspo> El_Che: guido is a larry contemporary, python is a perl contemporary, etc

[20:29] <mspo> El_Che: so it's interesting to see how it plays out

[20:29] <El_Che> https://twitter.com/sheeshee/status/1017504731797876736

[20:30] *** benchable6 left
[20:32] *** benchable6 joined
[20:33] <mspo> El_Che: I love OSS drama but that's a little aggressive ;)

[20:33] <warriors> what happened?

[20:33] <mspo> https://mail.python.org/pipermail/python-committers/2018-July/005664.html

[20:34] <mspo> so anyway we are reaching the start of retirement for that age of languages and their leaders

[20:34] <mspo> which is interesting

[20:36] <Summertime> bit daunting, a lot of languages having a lot of potential changes in direction

[20:37] <warriors> i am sure the python community have a lot of brilliant minds, who will step up, and take charge 

[20:38] <warriors> this will hardly be noticeable for most python users

[20:38] <El_Che> you're assuming they want/accept a new BDFL

[20:38] <Summertime> that's assuming that anyone available could fit the position :u

[20:38] <warriors> not at all, i am assuming, they will create a nice decision making process ... that may or may not (probably not) ha a new BDFL

[20:38] <El_Che> big shoes

[20:39] <El_Che> they do have a decision making process already

[20:39] <El_Che> and that is wat seems to burnt out van Rossum

[20:39] <warriors> Tcl doesnt have a BDFL, and i dont think it ever did, yet .. it never went away, still one of the nicest languages there is 

[20:40] <warriors> they will survive

[20:40] <mspo> they use a core team

[20:42] <mspo> well since 2000 anyway

[20:45] <mspo> it's probably the only sane way to proceed

[20:45] <mspo> but it makes things go slower

[20:45] <warriors> i like their tip process a lot, very visible, very easy to see where they are going 

[20:45] <Summertime> does python have that much left to do? other than just staying modern and maybe adding some more core libraries?

[20:45] <[Coke]> tcl had ousterhout, I think, but that was a different vibe.

[20:46] <mspo> Summertime: that would be great

[20:46] <warriors> ousterhout is out of the picture since very long time ago

[20:46] <mspo> "python is done" :)

[20:46] <mspo> warriors: since about 2000?

[20:46] *** subroot left
[20:47] <warriors> but to be honest, i think ousterhout ... out smart most ppl ... ever, i wonder where tcl would be had he stayed around 

[20:47] <warriors> he wrote a new book "A Philosophy of Software Design "

[20:48] <warriors> he idea, or using two languages, one for system programming and one for applications, is ... pure genius 

[20:48] <warriors> his idea

[20:48] <warriors> grrr, his idea on 

[20:49] <warriors> there is always almost always two levels of programming / development in most software project, low level , technical ... high level domain 

[20:55] *** itaipu joined
[20:59] *** japhb_ joined
[21:03] <mspo> anyway will there be a new generation that displaces current stuff?

[21:03] <mspo> will python adopt a core-group?

[21:04] *** skids left
[21:05] *** jameslenz joined
[21:05] <Summertime> I'd imagine so, the core devs currently represent a very wide spread of opinions (education, scientific, startups)

[21:06] <Summertime> I feel it'd be a bit silly to go any other direction

[21:08] <mspo> a coup d'etat would be more entertaining, of course

[21:08] <MasterDuke> maybe some strange women lyin' in ponds will step up to take control

[21:08] *** telex left
[21:09] <lizmat> .oO( it's all a big conspiracy of the Perl 6 Cabal )

[21:09] <mspo> the coupe attempts in perl has been kind of boring to outsiders, but fun to read about after-the-fact

[21:09] *** jameslenz left
[21:11] *** telex joined
[21:11] <Summertime> what if python rights gets sold? growing the language would of finally paid off for guido!

[21:12] <mspo> Summertime: amazing

[21:12] <mspo> so anyway- fun to watch

[21:12] <mspo> Summertime: don't give TimToady ideas about cashing out :)

[21:13] <Summertime> I wonder what prices python or perl rights would get

[21:13] <timotimo> what would you get, exactly?

[21:13] <mspo> copyright

[21:14] <mspo> is all that there is

[21:14] <Summertime> probs the logo too

[21:14] <timotimo> you wouldn't even get the camel, though

[21:15] <lizmat> http://www.computerhistory.org/fellowawards/nominations/  # Computer History Museum Fellow Award Nominations

[21:15] <Summertime> camel-buying money is a lot of money to throw around willy nilly!

[21:15] <lizmat> I think I know someone who deserves to be nominated

[21:15] <mspo> yeah camel is oreilly

[21:15] <timotimo> my kingdom for a camel

[21:16] <mspo> I drew a logo for python postgres at one point

[21:16] <mspo> and they accepted it!

[21:16] <timotimo> cool

[21:16] <mspo> timotimo: it was pretty bad :)

[21:16] <timotimo> where can i see it? is it superceded already?

[21:16] *** stmuk_ joined
[21:17] <timotimo> the best (and only) logo i ever made was for the cellular automaton simulation framework i built

[21:17] <mspo> timotimo: this was back when pypg was its own project

[21:17] <mspo> okay dinner time

[21:17] <timotimo> https://github.com/timo/zasim/blob/master/docs/logo.svg

[21:18] *** stmuk left
[21:22] *** telex left
[21:24] <SmokeMachine> my only logo: http://wormholeipc.sourceforge.net/images/whlogo_transp.png

[21:24] <SmokeMachine> thats not a very good logo... :(

[21:25] <timotimo>  i think it's cute

[21:25] <timotimo> i don't know what it's for, but it's cute

[21:27] <SmokeMachine> timotimo: it was for a IPC library called WormHoleIPC

[21:28] <timotimo> ah, the logo fits, then

[21:28] <SmokeMachine> https://sourceforge.net/projects/wormholeipc/files/

[21:29] <timotimo> that seems like it's not going to get finished

[21:29] *** HaraldJoerg left
[21:31] <SmokeMachine> timotimo: as almost every project that I start... :(

[21:31] <timotimo> same ;(

[21:33] <SmokeMachine> Im trying to finish this one now: http://github.com/FCO/aybee (sorry the unwanted ad)

[21:33] <timotimo> zasim had the benefit of being paid, and my supervisor was good at getting me to work on it

[21:34] <timotimo> oh, i get the name

[21:35] <SmokeMachine> timotimo: do you mean aybee?

[21:40] <SmokeMachine> if you like it: https://github.com/FCO/aybee-client

[21:41] <timotimo> yeah

[21:41] <timotimo> but without the tags i wouldn't have understood what's going on

[21:42] *** telex joined
[21:45] *** warriors left
[21:58] <Altreus> Is there something like implicit construction? For example, if I define a class that can be constructed from a Str, can I populate a hash of that type just by providing strings?

[22:01] *** telex left
[22:02] <timotimo> we have only coercing types that will call a method on the incoming object to coerce it

[22:02] <timotimo> but since you want Str to be your input type, that'd have to be monkey-patched in

[22:03] <timotimo> i'd instead maybe suggest to mix in a role that supplies a custom AT-POS or something

[22:04] <timotimo> AT-POS and ASSIGN-POS maybe?

[22:04] <Altreus> can you point me to a doc that I can read so I understand that? xD

[22:04] <Altreus> ah, enrole the hash itself

[22:04] <lizmat> AT-POS should be enough, the default ASSIGN-POS just calls AT-POS

[22:04] <lizmat> AT-POS should of course return a container  :)

[22:05] <timotimo> er

[22:05] <timotimo> sorry, not POS, you need KEY

[22:05] <timotimo> so you'd return a Proxy from that that'll react to something passed in by coercing, then storing it

[22:05] *** ChoHag joined
[22:06] <Altreus> That sounds hideously overengineered for my use case :D

[22:06] <lizmat> m: my Str %h; %h<a> = 42  # would that do it ?

[22:06] <camelia> rakudo-moar 21eb168ca: OUTPUT: ¬´Type check failed in assignment to %h; expected Str but got Int (42)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:09] <SmokeMachine> m: my Str() %h; %h<a> = 42

[22:09] <camelia> rakudo-moar 21eb168ca: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Coercion Str(Any) is insufficiently type-like to qualify a variable‚ê§at <tmp>:1‚ê§------> 3my Str() %h7‚èè5; %h<a> = 42‚ê§    expecting any of:‚ê§        constraint‚ê§¬ª

[22:09] <SmokeMachine> m: my Str(Int) %h; %h<a> = 42

[22:09] <camelia> rakudo-moar 21eb168ca: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Coercion Str(Int) is insufficiently type-like to qualify a variable‚ê§at <tmp>:1‚ê§------> 3my Str(Int) %h7‚èè5; %h<a> = 42‚ê§    expecting any of:‚ê§        constraint‚ê§¬ª

[22:10] <timotimo> lizmat: i think they want to put in a string and actually store an object that's created by parsing the string

[22:10] <Altreus> by passing the string sure

[22:11] <Altreus> I suppose parsing will also happen

[22:11] <Altreus> It's not strictly necessary but it would be nice

[22:12] <timotimo> well, some kind of computation to go from string to object

[22:27] *** kerframil joined
[22:44] <Ulti> Ambiguous call to 'ASSIGN-KEY(Hash+{Inter}: Str, Str)'; these signatures all match:

[22:44] <Ulti> thats interesting I assumed the role would override 

[22:45] <timotimo> if you put in a proto, it will

[22:45] <Ulti> orly

[22:45] <timotimo> otherwise if you have "multi method" it will be added to the pool

[22:46] *** Juerd joined
[22:48] <Ulti> hmm that does get rid of the error but I think my Int is just getting turned into a Str anyway

[22:55] *** stmuk joined
[22:57] *** stmuk_ left
[23:03] *** titsuki joined
[23:05] *** jameslenz joined
[23:10] *** jameslenz left
[23:11] *** rindolf left
[23:16] *** raschipi joined
[23:22] *** lizmat left
[23:25] *** lizmat joined
[23:46] *** pecastro left
