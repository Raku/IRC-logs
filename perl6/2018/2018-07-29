[00:00] <timotimo> here in line 456 it does ~~ m:global/<$selector_tree_key_pattern>/

[00:00] <timotimo> that goes via EVAL

[00:02] <timotimo> the profiler dying or at least getting confused when confronted with lots of EVAL isn't new :(

[00:05] <MasterDuke> and an explicit EVAL here https://github.com/jdv/p6-data-selector/blob/master/t/03-apply_tree.t#L94

[00:13] <fake_space_whale> ryn1x, Juerd, thanks for the advice I would look at packaging it up

[00:16] *** mcmillhj joined
[00:19] *** fbynite joined
[00:21] *** mcmillhj left
[00:21] *** fbynite left
[00:28] *** epony left
[00:40] <Geth> ¬¶ doc: bddb87747a | Coke++ | doc/Language/5to6-nutshell.pod6

[00:40] <Geth> ¬¶ doc: pass finicky links test

[00:40] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/bddb87747a

[00:40] <synopsebot> Link: https://doc.perl6.org/language/5to6-nutshell

[00:42] *** epony joined
[00:43] *** mcmillhj joined
[00:48] *** mcmillhj left
[00:54] *** kalkin-- joined
[00:57] *** kalkin- left
[01:02] *** mcmillhj joined
[01:03] *** ryn1x left
[01:06] *** mcmillhj left
[01:21] *** wamba left
[01:23] *** araraloren joined
[01:24] *** mcmillhj joined
[01:29] *** mcmillhj left
[01:51] *** mcmillhj joined
[01:56] *** mcmillhj left
[02:09] *** mcmillhj joined
[02:13] *** mcmillhj left
[02:33] *** pmurias joined
[02:35] *** mcmillhj joined
[02:40] *** mcmillhj left
[02:40] *** diakopter left
[02:48] *** mcmillhj joined
[02:52] *** mcmillhj left
[02:57] *** epony left
[03:02] *** epony joined
[03:03] *** Sgeo left
[03:05] *** Sgeo joined
[03:10] *** mcmillhj joined
[03:14] <Geth> ¬¶ ecosystem: 3e945a603f | (Fernando Correa de Oliveira)++ (committed using GitHub Web editor) | META.list

[03:14] <Geth> ¬¶ ecosystem: Add Injector to the ecosystem

[03:14] <Geth> ¬¶ ecosystem: 

[03:14] <Geth> ¬¶ ecosystem: Adding https://github.com/FCO/Injector

[03:14] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/3e945a603f

[03:15] *** mcmillhj left
[03:27] *** mcmillhj joined
[03:29] *** vrurg left
[03:31] *** mcmillhj left
[03:34] <avuserow> m: sub f (FatRat() \y, FatRat() \z) {108 - ((815 - 1500 / z) / y)}; my @results = 4.0, 4.25; for 2 .. 200 -> $i {@results.push(f(@results[$i-1], @results[$i-2]));}; say @results[200];

[03:34] <camelia> rakudo-moar b7379a804: OUTPUT: ¬´4.9999999999999999999999999999999999999999999914634955237594519840605021696245253531402251293461657465278749240871156571863477542965001140165357‚ê§¬ª

[03:35] <avuserow> the above is from https://medium.com/@bellmar/is-cobol-holding-you-hostage-with-math-5498c0eb428b

[03:35] <avuserow> Perl 6 works very well if you ask for FatRats, and pretty well if you just use regular rational numbers

[03:39] <benjikun> can also be slow so you have to be careful

[03:41] <avuserow> true. but accuracy comes first, and it's great to have the accuracy within such easy reach

[03:42] <avuserow> m: sub f (Num() \y, Num() \z) {108 - ((815 - 1500 / z) / y)}; my @results = 4.0, 4.25; for 2 .. 20 -> $i {@results.push(f(@results[$i-1], @results[$i-2]));}; say @results[20]; # floating point version, note that it explodes at 20 versus 200

[03:42] <camelia> rakudo-moar b7379a804: OUTPUT: ¬´100.00001247862016‚ê§¬ª

[03:43] <benjikun> Indeed

[03:43] <benjikun> Some would criticize p6 for using rationals by default

[03:44] <benjikun> Easy to write it off as "it's slow by default, I'm done", though being an incorrect synopsis of the language itself

[03:45] <avuserow> hmm. I had forgotten that, with my recent adventures using native types almost exclusively due to nativecall and handling binary file formats

[03:46] <benjikun> I do think it is SOMEWHAT weird that perl6 uses rats by default, despite it being more accurate, but I've gotten used to it

[03:46] <benjikun> Hopefully newcomers can too

[03:56] <jdv79> i get the evals in the test file - is there a better way to deep clone a hash like that?

[03:56] <jdv79> i didn't know about the regex boiling down to an eval.

[03:56] <jdv79> is there a better way to do that?

[03:56] <jdv79> plus what's wrong with eval?

[04:02] *** mcmillhj joined
[04:04] <geekosaur> safety

[04:05] <geekosaur> although slowness also comes into it, we precomp for a reason but EVALs can't be precomp-ed because the thing to be compiled isn't known at compile time, only at runtime

[04:06] *** mcmillhj left
[04:15] <jdv79> its unfortunate a regex has to eval

[04:15] <jdv79> the explicit eval i could get around easily but probably not the regex implied ones

[04:19] <geekosaur> regex has to eval if you use <$foo> because it has to compile $foo in

[04:20] *** mcmillhj joined
[04:25] *** mcmillhj left
[04:25] <[Coke]> cd sandbox/perl6

[04:25] <[Coke]> 

[04:25] <[Coke]> oops

[04:35] *** vrurg joined
[04:35] <fake_space_whale> Am I correct in thinking that one can not call .WHAT on a object of type Distribution::Resource (from the %?RESOURCES object)? 

[04:36] *** vrurg left
[04:38] <fake_space_whale> The reason I am thinking this is because when I add a line of code `say $filename.WHAT` I get the error "Cannot look up attributes in a Distribution::Resource type object"

[04:40] <geekosaur> .WHAT is a compiler macro; resources are runtime

[04:40] <geekosaur> this might qualify as an LTA error

[04:40] <geekosaur> $filename.^name might work better

[04:42] <sjn> o/

[04:44] * sjn bumped into interesting the might be worth looking at for speeding up floating point -> string conversion: https://pldi18.sigplan.org/event/pldi-2018-papers-ry-fast-float-to-string-conversion

[04:46] <sjn> maybe this belongs in #rakudo?

[04:46] <fake_space_whale> geekosaur, thank you

[04:47] <fake_space_whale> do you know of any docs or hints or even code about what the Distribution::Resource is?

[04:48] *** mcmillhj joined
[04:49] <geekosaur> no, I think that whole area is a bit underspecced at the moment?

[04:49] <benjikun> sjn: Moreso perl6-dev imo

[04:49] <benjikun> You could also start a conversation about it on rakudo's github

[04:52] *** mcmillhj left
[04:52] <fake_space_whale> okay, thanks anyway

[05:01] <Geth> ¬¶ doc: coke self-unassigned Sort Table of Contents https://github.com/perl6/doc/issues/392

[05:11] *** aindilis left
[05:22] *** kaare_ joined
[05:24] <jdv79> which makes regexes less useful for high perf settings:(

[05:24] <jdv79> at least p5's are pretty fast:)

[05:28] <benjikun> There are ways of avoiding regexes for now sometimes

[05:28] <benjikun> They'll undoubtedly perform better in the future

[05:29] <fake_space_whale> it appears, to my noob eyes, that the Distribution::Resource objects are IO::Path objects.  

[05:32] *** molaf joined
[05:51] <Zoffix> sjn: we're pretty much already using state of the art for Grisu3 algo for floating point stringification. I flipped through that talk and I see the guy reference Dragon4 algo, but neither Grisu no Errol, which makes me a bit dubious he really came up with something that's faster than Grisu3+Dragon4 fallback that still fullfills the same properties (Str->Num->Str roundtripping without drift and stringifying to

[05:51] <Zoffix> shortest strings). Right now we use sprintf as fallback for Grisu3, and it could be made faster by using Dragon4 instead, but that covers just 0.5% of cases Grisu3 can't handle, so there won't be any major improvents. There are some references and explanations in this commit: https://github.com/MoarVM/MoarVM/commit/067c0594103a025472c39ae7f8670e47211b874b

[05:51] <Zoffix> fake_space_whale: no, but it attempts to fake being one

[05:51] <Zoffix> m: say Distribution::Resource.^mro.map: *.^name

[05:51] <camelia> rakudo-moar b7379a804: OUTPUT: ¬´(Distribution::Resource Any Mu)‚ê§¬ª

[05:55] <Zoffix> fake_space_whale: and the bug with .Str/.gist/.perl is something you could fix, perhaps? R#2143

[05:55] <synopsebot> R#2143 [open]: https://github.com/rakudo/rakudo/issues/2143 [easy to resolve][good first issue] Can't .gist/.Str/.perl Distribution::Resource:U

[05:57] <fake_space_whale> oh, I am not making any promises but I will definitely consider doing that. 

[05:57] <Zoffix> sweet \o/

[06:03] *** rindolf joined
[06:03] <Zoffix> Talk Slides and Recording: "Intro Into Perl 6 Regexes and Grammars Perl 6": https://rakudo.party/post/Intro-Into-Perl6-Regexes-and-Grammars-Perl-6-Talk--Slides-Recording

[06:04] <sjn> Zoffix: he references Grisu3 several times, and compares it to his proposed algorithm

[06:04] <sjn> I'd say have another look :)

[06:05] *** psychoslave joined
[06:05] <Zoffix> sjn: ah, cool

[06:05] <Zoffix> |6d f.p. stringification talk: https://pldi18.sigplan.org/event/pldi-2018-papers-ry-fast-float-to-string-conversion

[06:05] <ZofBot> Zoffix, Will remind you on 2018-08-04T02:05:39.259931-04:00 about f.p. stringification talk: https://pldi18.sigplan.org/event/pldi-2018-papers-ry-fast-float-to-string-conversion

[06:17] *** Zoffix left
[06:21] <buggable> New CPAN upload: Text-Names-0.0.1.tar.gz by RIBNOTTER https://cpan.metacpan.org/authors/id/R/RI/RIBNOTTER/Perl6/Text-Names-0.0.1.tar.gz

[06:24] *** domidumont joined
[06:25] *** SteffanW joined
[06:29] *** domidumont left
[06:30] *** domidumont joined
[06:31] *** reportable6 left
[06:32] *** reportable6 joined
[06:33] *** wamba joined
[06:34] *** domidumont left
[06:35] *** stmuk joined
[06:37] *** stmuk_ left
[06:37] *** domidumont joined
[06:43] *** kaare_ left
[06:43] *** kaare_ joined
[06:50] *** psychoslave left
[06:51] *** [particle]1 left
[06:55] *** jmerelo joined
[06:56] *** Actualeyes left
[07:09] *** [particle] joined
[07:09] *** fake_space_whale left
[07:26] *** kaare_ left
[07:26] *** kaare_ joined
[07:27] *** xq joined
[07:34] *** kaare_ left
[07:35] *** spycrab0 left
[07:36] *** vrurg joined
[07:37] *** CurtisPoe left
[07:43] *** kaare_ joined
[07:51] *** eponym joined
[07:51] *** eponym left
[07:51] *** vrurg left
[07:53] *** araraloren left
[07:53] *** araraloren joined
[07:54] *** epony left
[08:04] *** SteffanW left
[08:22] *** [particle] left
[08:38] *** [particle] joined
[08:55] *** lizmat left
[08:58] *** lizmat joined
[09:09] *** tokomer joined
[09:10] *** sena_kun joined
[09:10] *** araraloren_ joined
[09:13] *** araraloren_ left
[09:13] *** araraloren_ joined
[09:13] *** araraloren left
[09:15] *** imcsk8_ joined
[09:18] *** imcsk8 left
[09:18] *** epony joined
[09:24] *** spycrab0 joined
[09:39] <Geth> ¬¶ doc: 54200d05f0 | (Tom Browder)++ (committed using GitHub Web editor) | htmlify.p6

[09:39] <Geth> ¬¶ doc: tweak grammar

[09:39] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/54200d05f0

[09:42] <Geth> ¬¶ doc: 9ca6a1740b | (JJ Merelo)++ | doc/Language/variables.pod6

[09:42] <Geth> ¬¶ doc: Changes to sentence case refs #2223 and eliminates non-current comment

[09:42] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9ca6a1740b

[09:42] <Geth> ¬¶ doc: 737c6eb645 | (JJ Merelo)++ | 2 files

[09:42] <Geth> ¬¶ doc: Adds constant prefix to the Variables page

[09:42] <synopsebot> Link: https://doc.perl6.org/language/variables

[09:42] <Geth> ¬¶ doc: 

[09:42] <Geth> ¬¶ doc: This closes #1566 although there was a pretty good section on the

[09:42] <Geth> ¬¶ doc: Terms page, for some reason. I have added just a simple example and

[09:42] <Geth> ¬¶ doc: linked the previous page, there's no need for duplicates.

[09:42] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/737c6eb645

[09:46] *** timeless13 joined
[09:46] <timeless13> Interested in reasonably priced GLOBAL IRC ADVERTISING? Contact me on twitter https://twitter.com/nenolod or linkedin https://www.linkedin.com/in/nenolod

[09:46] *** timeless13 left
[09:46] <lizmat> not here also?  :-(

[09:49] <benjikun> :/

[09:50] <stmuk> looks like that twitter user is being attacked .. ironically it's drawn my attention to his anti-spam IRC bot :)

[09:50] <stmuk> https://github.com/kaniini/antissh

[09:52] <stmuk> "In 2018, there was a resurgence of IRC spam attacks that were undetected by traditional proxy scanning methods. This is because the attackers were using vulnerable SSH daemons running on routers, IPMI devices and other embedded devices to proxy the connections, using the direct-tcpip subsystem.

[09:53] <jmerelo> stmuk: what's an IPMI device?

[09:56] <jmerelo> stmuk: ah, OK, intelligent platform management interface. Never heard of it before. https://www.itworld.com/article/2708437/security/ipmi--the-most-dangerous-protocol-you-ve-never-heard-of.html

[09:56] *** isBEKaml joined
[10:04] <Geth> ¬¶ doc: 9b57216da4 | (Tom Browder)++ (committed using GitHub Web editor) | lib/Perl6/Documentable.pm6

[10:04] <Geth> ¬¶ doc: add attribute for Language sections

[10:04] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/9b57216da4

[10:05] *** HaraldJoerg joined
[10:05] <benjikun> Yeah, there have been huge port scans for several devices like this for years upon years :/

[10:17] *** parv joined
[10:21] <stmuk> SSH-2.0-dropbear_2013.62

[10:29] <Geth> ¬¶ doc: f62168e44d | (Tom Browder)++ (committed using GitHub Web editor) | htmlify.p6

[10:29] <Geth> ¬¶ doc: prepare for future menu autogen

[10:29] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/f62168e44d

[10:32] *** sarna joined
[10:32] <sarna> o/

[10:32] <stmuk> "Format string vulnerability in Dropbear SSH before 2016.74 allows remote attackers to execute arbitrary code via format string specifiers in the (1) username or (2) host argument.

[10:32] *** pmurias left
[10:33] *** pmurias joined
[10:33] <stmuk> I don't think antissh would help us with CVE-2016-7406 .. maybe just block based on sshd banner version?

[10:34] <stmuk> or just block all matches to dropbear

[10:34] <benjikun> There are tons of holes like this in tons of things

[10:34] <benjikun> I doubt every spammer that has spammed #perl6 uses this vulnerability

[10:35] <stmuk> I think there is probably just one spammer using one (or a small number) of vulnerabilities

[10:35] <Geth> ¬¶ doc: 27dc7cfa7e | (Tom Browder)++ (committed using GitHub Web editor) | htmlify.p6

[10:35] <Geth> ¬¶ doc: clean up comment

[10:35] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/27dc7cfa7e

[10:36] <benjikun> I've seen a few different messages

[10:36] <benjikun> maybe 3-4

[10:36] *** lizmat left
[10:36] <stmuk> but mostly attacking freenode ops (even on other IRC networks)

[10:36] <tbrowder_> sarna:  \o

[10:37] <benjikun> stmuk: Yeah, I'm not sure how to feel about that

[10:38] <stmuk> I wish I had a record of the other ips to check banner versions.. I bet its all dropbear

[10:39] <benjikun> stmuk: Look through logs

[10:39] <benjikun> just grep for words you remember

[10:40] <tbrowder_> [Coke]: any objections to moving some of the htmlify.p6 subs to Htmlify.pm6?

[10:40] *** isBEKaml left
[10:40] <tbrowder_> jmerelo: ^^^?

[10:40] <stmuk> benjikun: that gives me IRC nick only .. I can use /WHOWAS for a short period of time but failed to look up more

[10:43] <benjikun> I see

[10:46] <jmerelo> tbrowder_: not really

[10:48] <jmerelo> tbrowder_: the main problem is that since htmlify.p6 is not tested, we might now know what's broken until it shows. But moving stuff to a module will really help test it; you can't simply test a script except by running it

[10:50] <tbrowder_> ok, gotcha.

[10:53] <Geth> ¬¶ doc: 0bd4fcc53e | (JJ Merelo)++ | 4 files

[10:53] <Geth> ¬¶ doc: Moves to 2018.08 references to 2018.07

[10:53] <Geth> ¬¶ doc: 

[10:53] <Geth> ¬¶ doc: Since 2018.07 is not really going to happen https://twitter.com/zoffix/status/1023294048268967937

[10:53] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/0bd4fcc53e

[10:53] <jmerelo> tbrowder_: it's a catch-22, really.

[10:53] <tbrowder_> yep

[10:56] <jmerelo> tbrowder_: but I guess we'll have to start somewhere... so by all means do whatever you had in mind if everyone agrees with it. 

[11:01] <tbrowder_> i just saw your comment on site generation speed. until sake buid stuff is ready, there are some makefile dependencies that maybe  could be tweaked to help. for instance, i‚Äôm not sure the type graph and type doc info should have to rebuild every time, cache or no cache, if the source hasn‚Äôt changed.

[11:01] <jmerelo> tbrowder_: sometimes it's rebuilt even if non-doc is changed.

[11:01] <jmerelo> I mean, every little time.

[11:02] <jmerelo> I proposed this some time ago https://github.com/perl6/doc/issues/1937

[11:03] <tbrowder_> some of those steps, if they could be extracted into separate progs, could be more easily be controlled by the makefile.

[11:03] <jmerelo> tbrowder_: and then there's this thing https://github.com/perl6/doc/issues/1952

[11:04] <jmerelo> tbrowder_: in fact, [Coke] created that here https://github.com/perl6/doc/commit/e9a057962d09ceeb815624b5acc6649d571fba26 but it's using text, not the Pod structure that pod::to::Bigpage uses

[11:05] <jmerelo> tbrowder_: that makes it really useful for stuff like testing text, but not really for generation

[11:06] <jmerelo> tbrowder_: if you're finally attending TPC in Glasgow, that could be something to be discussed in the Doc BoF

[11:09] <tbrowder_> unfortunately i won‚Äôt be able to go. i sure would like to attend some specific p6 hacking gathering, though. where do you think a good international gathering place would be? iceland?

[11:09] <tbrowder_> estonia?

[11:10] <jmerelo> tbrowder_: I love Iceland.

[11:10] <jmerelo> tbrowder_: never been to Estonia, though.

[11:10] <tbrowder_> any p6 people in iceland?

[11:10] <El_Che> isn't iceland expensive as hell?

[11:11] <jmerelo> tbrowder_: I know some Perl mongers. El_Che yep, that's right.

[11:11] <jmerelo> tbrowder_: Belgium during FOSDEM would be a nice alternative. But that's next february. I'll guess meanwhile we'll have to make do with IRC and issues.

[11:11] <stmuk> belgium/holland is probably easier for many than iceland

[11:12] <tbrowder_> how about spain?

[11:16] *** koto joined
[11:18] *** ignoreme joined
[11:18] *** ignoreme left
[11:18] *** sena_kun left
[11:22] <jmerelo> tbrowder_: wonderful place. I can organize it in Granada if there's enough interest.

[11:23] <jmerelo> tbrowder_: maybe something like perl 6 toolchain summit 

[11:23] <jmerelo> Would everyone want to do something like this?

[11:24] <jmerelo> I got just the place: http://carmendelavictoria.ugr.es/ whose rooms are free if booked from the uni

[11:24] <jmerelo> also you can stay there if booked with enough time, it's usually booked solid with university visiting people

[11:25] <jmerelo> There are direct Delta flights from NY to M√°laga, 1.5 hours away by bus

[11:25] <El_Che> wow

[11:26] <jmerelo> If there's enough interest, just let me know and I can start moving it, maybe for november or early December

[11:27] <jmerelo> (above I mean meeting rooms, not bedrooms)

[11:27] *** raiph joined
[11:28] <El_Che> hehe

[11:28] <El_Che> good clarification :)

[11:34] <jmerelo> I have added discussion on that topic to the Perl 6 documentation BoF in Glasgow http://act.perlconference.org/tpc-2018-glasgow/wiki?node=Perl6%20documentation%20BoF

[11:42] <jmerelo> stmuk: since we are both around here, can we talk a bit about this? https://github.com/perl6/ecosystem/issues/404#issuecomment-408670421

[11:43] <jmerelo> stmuk: quite clearly, you don't agree with me, as repeated thumbs-down show. But I'm trying to find common ground here. Can you please ellaborate a bit?

[11:44] <stmuk> jmerelo: I don't think there is any common ground. I regard the ticket as a waste of time and probably any further discussion.

[11:46] <stmuk> jmerelo: if I mark a module as DEPRECATED it means exactly that (see wikipedia definition) I wouldn't expect to be contacted by an open source volunteer asking me if I really mean I wanted it deleting

[11:47] <jmerelo> stmuk: why do you think there's no common ground?

[11:48] <stmuk> I've just explained that

[11:50] <jmerelo> stmuk: you keep discussing about that particular aspect of what I propose, but that's not the main point. The main point is to have some clear procedure for removing stuff from ecosystem (not CPAN)

[11:50] *** lizmat joined
[11:50] <stmuk> there is no problem

[11:50] <jmerelo> stmuk: for instance, see this for NPM https://docs.npmjs.com/cli/unpublish

[11:50] <jmerelo> It clearly specifies things like: if you've deleted something, you can't add it back.

[11:51] <jmerelo> stmuk: there's all kind of stuff that might happen. For instance, you might want to delete some "latest" version but leave some versioned thing. That's also specified there.

[11:51] <jmerelo> stmuk: plus we might want to eventually have everything in CPAN6.

[11:52] <stmuk> I don't see the perl community about written procedures and rules in the sense you do

[11:53] <jmerelo> stmuk: there are two options. Enforce it in code (see CPAN) or if you don't, enforce it as a rule. I'm all for enforcing it in code.

[11:53] <stmuk> I don't want to see the github based ecosystem replaced by CPAN6

[11:53] <stmuk> anyway I can't see this discussion going anywhere

[11:53] *** psychoslave joined
[11:54] <jmerelo> stmuk: well, it should go towards trying and find common ground. If we can't we could maybe do a poll in the issue itself. 

[11:55] <jmerelo> stmuk: but if we can't even agree on that, I can close the issue, no problem. I don't want anyone unhappy and/or wasting time.

[11:56] <jmerelo> Of course, as the proverbial grumpy old man, I reserve the right to say "I told you so" if this causes problems down the line, but really, I don't want to waste anyone's time.

[11:58] *** kaare_ left
[12:12] <El_Che> jmerelo: lol, non registered users can not send you a message. 

[12:12] <El_Che> you got too much spam?

[12:14] <jmerelo> El_Che: not really. use email

[12:14] <El_Che> let me look for a client :)

[12:14] <El_Che> less hot now in Granada?

[12:24] *** domidumont left
[12:27] <tbrowder_> jmerelo: ref probs building doc website and publishing. would sme kind of mutual lock work? i‚Äôm fuzzy on details but with all the asynchronicty (?) between to

[12:28] <tbrowder_> the two processes something needs to intervene and be a traffic cop.

[12:30] <tbrowder_> ref ecosystem and cpan: Zoffix and AlexDaniel and lizmat and others i thnk would vote for dumping ecosystem.

[12:35] <tyil> I personally prefer cpan for hosting modules, but some people prefer the simplicity of the ecosystem repo on github iirc

[12:37] <tyil> the docs did mention the ecosystem repo to be deprecated "soon", but that was removed as nobody seemed to actually know about any real plans to deprecate it

[12:38] <jmerelo> El_Che: it's OK.

[12:39] <tbrowder_> tyil: i have temporarily stopped working on =defn, but still on my plate

[12:39] <tyil> tbrowder_: ok, thanks for the headsup :>

[12:39] <tbrowder_> first attempts haven‚Äôt worked, got to dig deeper in grammar

[12:39] <tyil> I've since been working on a module to ease creating new Pod formatters with as well

[12:39] <jmerelo> tyil, tbrowder_ the ecosystem is OK as long as there are 1 PRs every other week. If it becomes really popular, we're in trouble.

[12:40] <tyil> which I hope to use to make a Pod::To::Man module soom(tm)

[12:40] <tyil> and I have some lispy thing to finish and write an article about ;~;

[12:40] <AlexDaniel> tbrowder_: you mean leave cpan but get rid of github thingie?

[12:40] <tyil> jmerelo: I know, I am personally in favour in CPAN because it scales better

[12:40] <tyil> I also dont like depending on a proprietary platform like github

[12:41] <jmerelo> Just closed the issue.

[12:41] <jmerelo> Never mind.

[12:43] <tyil> I think we can keep the ecosystem repo for now, but teach new contributors to use CPAN as the default

[12:44] <El_Che> tyil: I don't think it's clear at all

[12:44] <El_Che> therefor jmerelo's discusion was relevant

[12:44] <El_Che> do we want to push people to cpan?

[12:44] <El_Che> do we want to base the ecosystem on a Microsoft company?

[12:45] <tyil> what was clear?

[12:45] <jmerelo> El_Che: you can use also gitlab adn bitbucket

[12:45] <El_Che> how an econsystem should look like

[12:46] <jmerelo> El_Che: I really think so, but it seems to be impossible to find some common ground, so I guess it's better to close it now.

[12:46] <stmuk> you could host ecosystem/META.list somewhere other than github 

[12:46] <El_Che> there is the go moduel of pushing stuff to github or gitlab and that's it

[12:46] <tyil> I didn't go into clarifying what it should look like

[12:46] <tyil> I just think a git repo doesn't scale well into the future

[12:46] <El_Che> there is the centralised cpan or JS model

[12:46] <tyil> and I dont want to depend on a proprietary platform such as github

[12:46] <El_Che> there the catastrophy of a ecosystem called java

[12:46] <tyil> which are my two main reasons for going CPAN

[12:46] <stmuk> and people could use whatever git repos they like inside META.list

[12:47] <El_Che> tyil: yes, I am arguing that is something that needs to be reflected upon

[12:47] <El_Che> cpan has also downsides

[12:47] <El_Che> the interface is *very* oldschool

[12:47] <tyil> surely, if only because its harder to get started with for new people

[12:47] <El_Che> administration is needed, etc

[12:47] <tyil> which is something we shouldn't ant

[12:47] <tyil> want*

[12:47] <stmuk> the main win of CPAN is the mirroring

[12:47] <tyil> but CPAN is stable, and proven

[12:47] <El_Che> distributed, indeed

[12:47] <tyil> and with modules, easy to work with

[12:47] <jmerelo> El_Che: I think so, but that does not seem to be the consensus. So let's just leave it at that and move on to some other thing.

[12:48] <El_Che> for perl5 the testing framework somewhat related to cpan

[12:50] <tyil> I'd like to see a friendlier UI to PAUSE for module creators, but I don't think it's worth the resources at this point in time to make it

[12:51] <tyil> but since I use assixt for uploading them, I don't really have to work with the interface anyway

[13:09] *** andrzejku joined
[13:09] <andrzejku> araraloren_: hey :)

[13:10] <araraloren_> andrzejku 

[13:10] <araraloren_> hey

[13:10] <andrzejku> araraloren_: I saw you was working hard

[13:11] <araraloren_> :) haha

[13:12] *** sarna left
[13:20] *** jmerelo left
[13:20] *** rgrau left
[13:24] <AlexDaniel> ‚Äúecosystem police‚Äù xD

[13:25] <AlexDaniel> what's next, ecosystem moral police? :)

[13:34] <AlexDaniel> tbrowder_: well, there is at least one p6 person in Estonia :) Not sure if it's a good place for an international gathering though

[13:34] <AlexDaniel> tbrowder_: although I'm all for it, but yeah, I'm biased :)

[13:37] * stmuk imagines the ecosystem police attempting to herd cats

[13:39] <MasterDuke> are many people planning to be at the london perl workshop?

[13:41] *** rgrau joined
[13:41] <stmuk> "we have to revoke your perl 6 licence because your META6.json isn't compliant with the changes made last week and you had trailing whitespace"

[13:42] <tyil> stmuk: I've already mentioned we should have a meta-version key in META6.json to deal with such breaking changes ;)

[14:02] *** mephinet left
[14:02] *** reu left
[14:04] *** vrurg joined
[14:05] <stmuk> AlexDaniel: don't you have internet millions of times faster than everyone else though?

[14:06] <AlexDaniel> stmuk: IIRC it's even faster in Japan

[14:06] <AlexDaniel> stmuk: but I don't have a good connection

[14:08] * AlexDaniel looks at https://www.fastmetrics.com/internet-connection-speed-by-country.php

[14:08] *** AlexDaniel left
[14:09] *** AlexDaniel joined
[14:09] *** vrurg left
[14:09] *** vrurg joined
[14:10] <xiaomiao> such things are not very useful - Japan has stupidly fast local connections but is badly connected to the rest of the world, for example

[14:10] *** aindilis joined
[14:10] <xiaomiao> a 10mbit connection in germany might be more pleasant to use than a gbit connection in japan

[14:11] <Geth> ¬¶ ecosystem: kalkin++ created pull request #405: Fix "Add update for Ddt to v0.5.3"

[14:11] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/pull/405

[14:13] *** kalkin-- is now known as kalkin-

[14:14] *** vrurg left
[14:14] *** molaf left
[14:25] *** mephinet joined
[14:33] *** parv left
[14:43] *** zakharyas joined
[14:46] *** fake_space_whale joined
[14:50] *** reu joined
[14:55] *** lizmat left
[14:59] *** kerframil joined
[15:03] *** HaraldJoerg1 joined
[15:03] *** HaraldJoerg left
[15:05] *** jmerelo joined
[15:06] <jmerelo> squashable6: status

[15:06] <squashable6> jmerelo, ‚ö†üçï Next SQUASHathon in 4 days and ‚âà18 hours (2018-08-04 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:07] <tbrowder_> tyil: actually i have solved first part of =defn which uses text on same line as term and following para as def

[15:08] <tbrowder_> second use in speculations is first line of para is term, following lines are def

[15:09] <tbrowder_> BUT neither is specced as far as i can tell.

[15:10] <tbrowder_> imo, term on =def line makes the most sense, and forget other way

[15:11] <tbrowder_> thoughts?

[15:15] <jmerelo> tbrowder_: you get to spec it, I guess. term on =defn line makes sense to me too.

[15:19] *** HaraldJoerg1 is now known as HaraldJoerg

[15:22] <lucs> jmerelo: Do you happen to see private /msg that are addressed to you?

[15:23] <jmerelo> just seen one

[15:23] <lucs> :)

[15:23] *** Sgeo_ joined
[15:24] *** Sgeo left
[15:26] <kalkin-> Can some one please merge this https://github.com/perl6/ecosystem/pull/405 ?

[15:28] *** psychoslave left
[15:30] <jmerelo> kalkin-: not me, sorry. You can ask for specific reviewers if you want when you do the PR.

[15:31] <lucs> The documentation sometimes uses the terms "longname" and "shortname" to designate those concepts (function name with parameters added or not).

[15:32] <lucs> Is such usage a good idea, or should plain "long name" be sufficient?

[15:32] <jmerelo> lucs: where does it do that?

[15:33] <jmerelo> lucs: do you mean using long name as opposed to longname?

[15:33] <lucs> I've seen it in S12 I think, so I'm wondering if it should be used in the regular docs.

[15:33] <lucs> jmerelo: Yes, that's what I mean.

[15:34] <jmerelo> lucs: it's probably better if you use long name.

[15:35] <jmerelo> lucs: git grep on the docs returns longname only in code

[15:35] <lucs> I kind of agree, but "longname" does imply that there is a technical meaning to it, which "long name" does not make obvious.

[15:36] <jmerelo> lucs: and there's a single reference to long name, and it uses a split term. 

[15:36] <jmerelo> lucs: hum. 

[15:36] <jmerelo> lucs: I kinda fail to see the relationship between those words "long name", and what they design.

[15:37] <lucs> See what I mean :)

[15:37] <jmerelo> lucs: so another option is just go for "double semicolon"

[15:37] <lucs> Oh, that's something else entirely.

[15:37] <jmerelo> lucs: ok, let me check.

[15:38] <lucs> This is what I'm talking about (let me find it...):

[15:38] <jmerelo> lucs: also, the example is wrong, right?

[15:39] <lucs> https://design.perl6.org/S12.html#Multisubs_and_Multimethods , right under that blue box.

[15:40] <lucs> The example, like Zoffix said, is LTA.

[15:40] <jmerelo> lucs: I still think long name is the way to go. It's used that way in S12, so...

[15:41] <lucs> You'll also see 'longname' in S12... :/

[15:41] <jmerelo> lucs: 2 vs 18

[15:42] <lucs> Not sure what you mean...

[15:42] <Geth> ¬¶ ecosystem: 21496997af | (Bahtiar `kalkin-` Gadimov)++ | META.list

[15:42] <Geth> ¬¶ ecosystem: Fix "Add update for Ddt to v0.5.3"

[15:42] <Geth> ¬¶ ecosystem: 

[15:42] <Geth> ¬¶ ecosystem: This fixes the commit 518af6f212e900bfcdb794282695b8a973051d32.

[15:42] <Geth> ¬¶ ecosystem: 

[15:42] <Geth> ¬¶ ecosystem: - included back all the previous versions of Ddt.

[15:42] <Geth> ¬¶ ecosystem: - latest Ddt version uses also a tagged version.

[15:42] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/21496997af

[15:42] <Geth> ¬¶ ecosystem: f9402863df | (Steve Mynott)++ (committed using GitHub Web editor) | META.list

[15:42] <Geth> ¬¶ ecosystem: Merge pull request #405 from kalkin/master

[15:42] <Geth> ¬¶ ecosystem: 

[15:42] <lucs> Oh, number of occurences.

[15:42] <Geth> ¬¶ ecosystem: Fix "Add update for Ddt to v0.5.3"

[15:42] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/f9402863df

[15:43] <jmerelo> lucs: control-F and search. "long name" appears 18 times, "longname" only 2.

[15:43] <lucs> Yep.

[15:43] *** molaf joined
[15:43] <stmuk> does ugexe still use IRC much? He seems to be on freenode but not on channels?

[15:44] <lucs> So, not worth introducing 'longname' "officially" -- sticking to "long name".

[15:44] <jmerelo> lucs: I mean, it's your call. You want to introduce it, let's stick to that then.

[15:45] <kalkin-> stmuk: thanks

[15:46] <lucs> "long name" feels lighter -- I'll just make sure it gets into the glossary too :)

[15:46] *** vrurg joined
[15:47] *** andrzejku left
[15:47] * lucs & # Moyse Sonorit√© time!

[15:48] *** ofperfection_ joined
[15:49] *** damaxi joined
[15:49] *** thisamu joined
[15:50] *** drudgesentinel left
[15:51] *** thisamu left
[16:09] *** lizmat joined
[16:14] *** raynold joined
[16:17] *** araraloren_ left
[16:19] <kalkin-> How can I find all the classes implementing a specific role?

[16:29] <jmerelo> kalkin-: in the ecosystem, in a program, in a module?

[16:31] <jmerelo> kalkin-: also, why would you want to do that?

[16:32] <kalkin-> in all installed modules

[16:32] <jmerelo> kalkin-: in all the modules that you have installed locally? Again, why would you want to do that?

[16:32] <kalkin-> jmerelo: reasons

[16:33] <jmerelo> kalkin-: let's break down the problem then. First, you need to know all modules that are installed, right?

[16:33] <kalkin-> right

[16:34] <kalkin-> then i need to iterate over each module and lookup for each class and check if it implements a role?

[16:34] <koto> sounds so.

[16:34] <jmerelo> kalkin-: zef --installed list

[16:35] <jmerelo> kalkin-: then you need to access the module itself, with all the stuff it provides. Again, zef.

[16:35] <jmerelo> kalkin-: let me check

[16:36] <jmerelo> kalkin-: that would be zef locate 

[16:36] *** vrurg left
[16:36] <jmerelo> kalkin-: but you could also just "use" it and access its stuff using the meta-object protocol

[16:37] <kalkin-> I can't just use classes which are not known at program creation time

[16:38] <jmerelo> kalkin-: you do one program to generate a list of "uses", and then add stuff to that program

[16:38] <kalkin-> basically i wanted to do plugins. The current straight forward solution would be to use Pluggable, but this forces all plugins to have the same namespace

[16:38] <jmerelo> kalkin-: those are the reasons?

[16:38] <kalkin-> hmm, but maay be it's not that a bad of idea if they use same namespace

[16:38] *** pecastro joined
[16:38] <jmerelo> anyway.

[16:38] <jmerelo> m: say Rat.^roles

[16:38] <kalkin-> jmerelo: Yeah partly, partly curiosity

[16:38] <camelia> rakudo-moar 62f7c3784: OUTPUT: ¬´((Rational[Int,Int]) (Real) (Numeric))‚ê§¬ª

[16:39] <jmerelo> ^roles will give you all the roles a particular class implements.

[16:39] <kalkin-> yeah MOP is definitely the way to go

[16:39] <kalkin-> I just thought may be there is a shortcut, without iteration over all modules and over all classes in modules.

[16:40] <koto> you can EVAL `use $foo`, then in this scope do `MY::.keys`, iterate over needed stuff, do not forget to do it recursively going deeper with `.WHO.keys`. You check if it's `thing.HOW.WHAT ~~  Metamodel::ClassHOW` and do what you want, e.g. check roles.

[16:40] <jmerelo> so if zef --installed list returns Foo Bar Baz you do "use Foo; use Bar; use Baz;" and then for <Foo Bar Baz> -> $class { say ::$class.^roles }

[16:41] <jmerelo> Although what koto says seems reasonable too :-=

[16:41] <buggable> New CPAN upload: Perl6-Ecosystem-0.0.2.tar.gz by JMERELO http://modules.perl6.org/dist/Perl6::Ecosystem:cpan:JMERELO

[16:41] <kalkin-> yes thank you koto & jmerelo. I probably just use Pluggable

[16:41] <koto> I am not an expert though, but I think there is no shortcut for this. I mean, in this case it'd be motion to children from parents, and type system is not really a graph DB or something like that.

[16:41] *** sarna joined
[16:42] <jmerelo> koto: the MOP _is_ the shortcut...

[16:42] <sarna> hey, why do my methods return Mu instead of Nil if I don't return anything?

[16:42] <koto> kalkin-, I bet you want to use Pluggable instead of black magic I've described above. : )

[16:43] <jmerelo> sarna: maybe it's returning a class and it's inialized to that by default? Mu is the nil for classes.

[16:44] <koto> jmerelo, kind of. I meant, there is no call like `^children` or something like that. Also, `say ::$class.^roles` approach will omit basically everything inside of package, so recursion is necessary.

[16:44] <sarna> jmerelo: makes sense. how can I avoid type errors then?

[16:44] <jmerelo> sarna: you can try exceptions, but it's difficult to say without looking at the code.

[16:44] <sarna> because if I returned Nil it wouldn't complain, now it throws a type error because Mu isn't MyClass

[16:46] <jmerelo> sarna: why don't you show us a bit of code? Difficult to say without the rest of the context

[16:46] <sarna> jmerelo: well alright, hold on a second

[16:48] <jmerelo> Here's the "river" score for all perl6 modules, including whether they fail or not. The "score" includes how far down they are in the chain of dependencies. High score and true in the fail column makes them a candidate for bitrot squashaton 

[16:48] * jmerelo clickbaits https://github.com/JJ/p6-river/blob/master/data/river-scores.csv

[16:49] <sarna> jmerelo: https://gist.github.com/sarna/70eeeead6f3f488501407a061a12f470

[16:49] <sarna> jmerelo: winner is the problematic method

[16:49] <jmerelo> sarna: (also, if you've got the time and the will, please golf it and post in StackOverflow. I'll check this now anyway)

[16:50] <jmerelo> sarna: winner is returning a Coin, and if Coin is nill, it's initialized to Mu, is that correct?

[16:50] <sarna> jmerelo: alright, I'll try :) (I've tried 5 minutes ago but failed)

[16:50] <sarna> jmerelo: yes

[16:50] * lizmat will be afk for most of the evening&

[16:51] <jmerelo> sarna: check-rows and columns do not have a default value for what they return. It can happen both alternatives are false

[16:51] <jmerelo> sarna: also, returning from inside a loop, well...

[16:52] <sarna> jmerelo: what's wrong with returning from inside a loop"

[16:52] <sarna> ?

[16:52] <sarna> jmerelo: and I thought Nil || Nil would return Nil, but

[16:53] <jmerelo> sarna: it's better to end the loop and then return. And you're not guaranteed check-rows and check-columns are returning Nil. If they don't return, they will return the last value in the sub

[16:55] <sarna> jmerelo: what do you mean by "end the loop and then return"? I don't need to continue if I found a match

[16:55] <sarna> jmerelo: oh, so adding Nil at the end should fix it. I thought it was there implicitly

[16:55] <jmerelo> m: sub foo() returns Any { loop( my $i =0; $i < 3; $i++ ) { say "Hello" }}; say foo;

[16:55] <camelia> rakudo-moar 62f7c3784: OUTPUT: ¬´5===SORRY!5===‚ê§Word 'loop' interpreted as 'loop()' function call; please use whitespace around the parens‚ê§at <tmp>:1‚ê§------> 3sub foo() returns Any { loop7‚èè5( my $i =0; $i < 3; $i++ ) { say "Hello"‚ê§Unexpected block in infix position ‚Ä¶¬ª

[16:56] <jmerelo> sarna: never mind the loop and the returning.

[16:56] <jmerelo> sarna: not sure what is there implicitly. But returning Nil might give you what you want.

[16:56] <sarna> jmerelo: yeah, no side effects which won't be run in my loop :)

[16:57] <sarna> jmerelo: thanks for taking your time!

[16:57] <jmerelo> sarna: good luck :-)

[17:04] <sarna> m: class Foo {}; sub bar(--> Foo) {if False {return Foo}}; bar()

[17:04] <camelia> rakudo-moar 62f7c3784: OUTPUT: ¬´Type check failed for return value; expected Foo but got Slip (Empty)‚ê§  in sub bar at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:04] <sarna> jmerelo: the shortest I could get :)

[17:06] <sarna> without `if False` it just returns Nil

[17:10] *** psychoslave joined
[17:12] <jmerelo> sarna: it's returning whatever "if" is returning.

[17:13] <jmerelo> m: my $what's-this = if False { say "Hello" }; say $what's-this

[17:13] <camelia> rakudo-moar 62f7c3784: OUTPUT: ¬´5===SORRY!5===‚ê§Word 'if' interpreted as a listop; please use 'do if' to introduce the statement control word‚ê§at <tmp>:1‚ê§------> 3my $what's-this = if7‚èè5 False { say "Hello" }; say $what's-this‚ê§Unexpected block in infix position (two ‚Ä¶¬ª

[17:14] <jmerelo> m: my $what's-this = do if False { say "Hello" }; say $what's-this

[17:14] <camelia> rakudo-moar 62f7c3784: OUTPUT: ¬´()‚ê§¬ª

[17:14] <jmerelo> m: my $what's-this = (if False { say "Hello" }); say $what's-this

[17:14] <camelia> rakudo-moar 62f7c3784: OUTPUT: ¬´()‚ê§¬ª

[17:14] <jmerelo> m: my $what's-this = say "Hello" if false; say $what's-this

[17:14] <camelia> rakudo-moar 62f7c3784: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    false used at line 1‚ê§‚ê§¬ª

[17:14] <jmerelo> m: my $what's-this = say "Hello" if False; say $what's-this

[17:14] <camelia> rakudo-moar 62f7c3784: OUTPUT: ¬´(Any)‚ê§¬ª

[17:14] <sarna> jmerelo: oh! makes sense :)

[17:19] *** benjikun left
[17:21] *** domidumont joined
[17:21] *** benjikun joined
[17:41] *** vrurg joined
[17:44] *** vrurg left
[17:49] <damaxi> Hey

[17:51] <sarna> m: say <1 2 3> + <4 5 6>

[17:51] <camelia> rakudo-moar d77a51de2: OUTPUT: ¬´6‚ê§¬ª

[17:51] <sarna> why doesn't it throw a type error :D

[17:52] <tobs> sarna: because it can coerce

[17:52] <tobs> m: <1 2 3>.Int.say

[17:52] <camelia> rakudo-moar d77a51de2: OUTPUT: ¬´3‚ê§¬ª

[17:53] <sarna> tobs: ohh, I understand now

[17:53] <sarna> thanks

[17:59] *** DrForr joined
[18:00] <jmerelo> Hey, DrForr . How are you doing?

[18:01] <DrForr> Reasonably well given the circumstances, right now waiting for a friend to come online so I can ask a few questions. Noticed this box had been bounced so I thought I'd reset things.

[18:01] <El_Che> hi drforr

[18:02] <DrForr> Howdy.

[18:02] <DrForr> Other than that chilling with the dogs who are *completely* asleep on the job as they haven't noticed this dee..spoke too soon, there they go.

[18:02] <jmerelo> DrForr: good luck with everything... 

[18:03] <DrForr> Well, it *might* work out better than I'd initially thought, because of an offer I got on Friday.

[18:03] <El_Che> the twitter one?

[18:05] <sarna> hey, can I make a thing that's not known at compile-time immutable? like, assign once?

[18:05] *** raschipi joined
[18:05] *** El_Che left
[18:05] <DrForr> No, something else. I need to learn about some logistics from a friend, but if I can get insurance straightened out I might just go with the deal I've been offered for 3-6 months.

[18:05] <jmerelo> sarna: constants are decided at compile time... You can still bind, which is like declaring a literal, which is constant-ish

[18:06] <jmerelo> m: my $constant-ish := 33; $constant-ish = 34;

[18:06] <camelia> rakudo-moar d77a51de2: OUTPUT: ¬´Cannot assign to an immutable value‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:07] <sarna> m: my $x = 3; my $constant-ish := $x; $x = 4; say $constant-ish

[18:07] <camelia> rakudo-moar d77a51de2: OUTPUT: ¬´4‚ê§¬ª

[18:07] <jmerelo> m: my $√æ = 7; my $constant-ish := 33+ $√æ; say $constant-ish 

[18:07] <camelia> rakudo-moar d77a51de2: OUTPUT: ¬´40‚ê§¬ª

[18:07] <jmerelo> m: my $√æ = 7; constant $constant = 33+ $√æ

[18:07] <camelia> rakudo-moar d77a51de2: OUTPUT: ¬´Use of uninitialized value of type Any in numeric context‚ê§  in block  at <tmp> line 1‚ê§¬ª

[18:07] <Geth> ¬¶ doc: f94b0a38e8 | (Zoffix Znet)++ | doc/Programs/03-environment-variables.pod6

[18:07] <Geth> ¬¶ doc: Rename RAKUDO_EXCEPTIONS_HANDLER

[18:07] <Geth> ¬¶ doc: 

[18:07] <Geth> ¬¶ doc: Procspec: https://github.com/perl6/roast/commit/7d2432590e

[18:07] <Geth> ¬¶ doc: Rakudo fix: https://github.com/rakudo/rakudo/commit/5e1df41b34

[18:07] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/f94b0a38e8

[18:07] <[Coke]> tbrowder_: in general, no objections. practically, it's going to make it harder for me to keep coke/build going due to merge stuff, but that's on me, not you

[18:08] <jmerelo> sarna: in that case, you're binding the container, not the value. 

[18:08] <[Coke]> (extract to separate programs in build) that's the opposite of what I'm trying to do.

[18:08] <jmerelo> m: my $x = 3; my $constant-ish := $x; say $constant-ish; $x = 4; say $constant-ish

[18:08] <camelia> rakudo-moar d77a51de2: OUTPUT: ¬´3‚ê§4‚ê§¬ª

[18:08] * DrForr stitches together a Spreadsheet API.

[18:09] <[Coke]> (I'm trying to move things *into* perl6, but keep them better segregated).

[18:09] <[Coke]> But given my lack of time to commit to the work, I'm not going to fight.

[18:09] <jmerelo> [Coke]: you mean the Makefile and the web app, right?

[18:10] <tbrowder_> [Coke]: I may be going down a rabbit hole anyway. Can we see your version?

[18:12] *** ofperfection_ left
[18:13] <[Coke]> tbrowder_: f62168e44d2d441a8851b2340ca2fc6512fa6cf5 - you added a comment that's basically the same as the comment that's there. (and are failing the whitespace tests now)

[18:13] <sarna> jmerelo: ah yeah, I remember now. thanks

[18:14] *** El_Che joined
[18:15] <El_Che> (shell server upgrades it seems√†

[18:15] <El_Che> )

[18:16] <tyil> tbrowder_: I think "=defn <term>", with the following Para as its definition is the most sane to read/write

[18:16] <sarna> is there a shortcut for this? foo(x => $x) (x is a named argument)

[18:16] <tyil> sarna: foo(:$x)

[18:16] <El_Che> :$x

[18:16] <sarna> thanks!!

[18:17] <sarna> it's not in the docs :(

[18:17] <jmerelo> sarna: foo( :$x )

[18:18] <tbrowder_> tyil: thanks, i agree. i‚Äôm thinking of asking Damian‚Äôs opinion since he wrote most of S26 i believe.

[18:18] <sarna> jmerelo: yep, just complaining about the docs now :)

[18:18] *** lizmat left
[18:18] <jmerelo> sarna: don't just complain, create an issue :-) (Although I'm pretty sure that is in the docs)

[18:18] <tyil> might be an issue of being too hard to find, which we can still look into

[18:19] <tbrowder_> [Coke]: i‚Äôm sorry about ws but i didn‚Äôt see any evidence of it, but i think web edit is conducive to that

[18:19] *** Zoffix joined
[18:19] <masak> TimToady: is COMPILING always reaching into a static lexpad? if yes, could there be something like COMPILING which reaches into a runtime lexpad?

[18:19] <sarna> jmerelo: well, it's not here https://docs.perl6.org/type/Signature#index-entry-named_argument

[18:19] <Zoffix> sarna: most of those shortcuts: https://rakudo.party/post/Perl-6-Colonpairoscopy

[18:19] <yoleaux> 14:10Z <samcv> Zoffix: well that would seem to make sense

[18:20] <jmerelo> sarna: it is: $ = :(:$a);  

[18:20] <sarna> Zoffix: thank you :)

[18:20] <sarna> jmerelo: oh. it's a bit cryptic though, I don't know if you agree

[18:20] <Zoffix> sarna: and `else`-less `if`/`with`/`without` return Empty when condition is false, to support constructs like (1, 2, 3, (42 if $whatever), 45, 6)

[18:20] <jmerelo> sarna: yep, it kinda is. 

[18:21] <jmerelo> sarna: so, issue that :-)

[18:21] <sarna> jmerelo: ok :)

[18:22] <sarna> Zoffix: makes sense now!

[18:22] *** Zoffix left
[18:23] <Geth> ¬¶ doc: 5d247af6c8 | (JJ Merelo)++ | doc/Type/Signature.pod6

[18:23] <Geth> ¬¶ doc: Just fixing some typographic error

[18:23] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/5d247af6c8

[18:23] <synopsebot> Link: https://doc.perl6.org/type/Signature

[18:26] *** jmerelo left
[18:28] *** raiph left
[18:31] <sarna> m: sub foo($x) {x++}; foo(2)

[18:31] <camelia> rakudo-moar d2116efd5: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    x used at line 1‚ê§‚ê§¬ª

[18:32] <sarna> m: sub foo($x) {$x++}; foo(2)

[18:32] <camelia> rakudo-moar d2116efd5: OUTPUT: ¬´Cannot resolve caller postfix:<++>(Int); the following candidates‚ê§match the type but require mutable arguments:‚ê§    (Mu:D $a is rw)‚ê§    (Int:D $a is rw)‚ê§‚ê§The following do not match for other reasons:‚ê§    (Bool:D $a is rw)‚ê§    (Bool:U $a ‚Ä¶¬ª

[18:32] <sarna> why doesn't it copy the parameter by default?

[18:33] <timotimo> i think here explicit is better than implicit

[18:33] <timotimo> i.e. you can immediately see if the value of your parameter is going to change in the function or not

[18:33] <geekosaur> I think because most people don't intend to mutate parameters and this allows ffaster code

[18:33] <geekosaur> and yes, seeing it explicitly is good IMO

[18:33] <sarna> can I somehow guarantee that this function won't mutate the parameter?

[18:33] <Geth> ¬¶ doc: 342466f69e | (Zoffix Znet)++ | assets/sass/style.scss

[18:33] <Geth> ¬¶ doc: Don't show BG camelia on 404s

[18:33] <Geth> ¬¶ doc: 

[18:33] <Geth> ¬¶ doc: Fixes https://github.com/perl6/doc/issues/2228

[18:33] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/342466f69e

[18:33] <sarna> besides is copy?

[18:35] <timotimo> how do you mean?

[18:35] <timotimo> oh, also, this is only surface-level, not "deep"

[18:35] <sarna> like `foo(const int a)` in C

[18:36] <timotimo> that's close enough to the default you have in perl6

[18:37] <sarna> oh, I'm sorry, it's quite late. I got it now :D

[18:37] <sarna> thanks for explaining

[18:37] <timotimo> NP

[18:37] *** psychoslave left
[18:45] <kalkin-> For some reason my $name = 'Foo'; try require ::($name) returns a (Foo), but Foo::.keys is empty

[18:45] <kalkin-> if I do try require Foo, then Foo::.keys is filled up

[18:45] <kalkin-> I also tried ::($name)::.keys

[18:51] <DrForr> Huh. Not every afternoon that your hacking is interrupted by a black bear walking through your property.

[18:52] <timotimo> kalkin-: i cannot explain why it works differently, but try ::($name).WHO.keys

[18:53] <kalkin-> timotimo: thanks! that does the trick

[19:01] <tbrowder_> tyil: instead of waiting till i could implement both types of =defn, i could just do the first type soon and wait to do the second type later. thoughts?do you see any reason i coul

[19:02] <tbrowder_> disregard text after question mark

[19:12] *** sarna left
[19:14] *** vrurg joined
[19:15] *** vrurg left
[19:17] *** molaf left
[19:20] <xinming> I got a perl6 program segfault.

[19:20] <xinming> I'll try to narrow down.

[19:23] *** sarna joined
[19:26] *** sivoais left
[19:26] *** sivoais joined
[19:29] <DrForr> I got a lot of those when I was first starting out.

[19:34] <Juerd> Back then they were much more common :)

[19:36] <DrForr> Doubtless.

[19:37] <xinming> finally, narrowed down

[19:38] *** fake_space_whale left
[19:40] *** zakharyas left
[19:40] *** lookatme left
[19:41] *** lookatme joined
[19:46] *** tokomer left
[19:48] *** mcmillhj joined
[19:52] <timotimo> .tell jjmerelo can you explain what makes your data different from finanalyst's ModuleCitation thing? http://finanalyst.github.io/ModuleCitation/

[19:52] <yoleaux> timotimo: I'll pass your message to jjmerelo.

[19:52] *** kybr left
[19:54] <kalkin-> as far as I am reading the docs correctly I can't import symbols at runtime

[19:54] <xinming> http://singularity.esky.cloud:2080/pub/p6-segfault.tgz    <----   This is the segfault bundle where I can narrow down with my best effort. :-)

[19:54] <raschipi> kalkin-: Why not?

[19:54] <timotimo> right, because the compiler has to know what is available and what isn't

[19:54] <kalkin-> So require Foo; is not the same as: my $name = 'Foo'; require ::($name);

[19:54] <xinming> anyone here can try this

[19:54] <xinming> to confirm what I tried.

[19:55] <timotimo> even with require Foo; it won't import the symbols, IIUC only the package itself gets made available

[19:55] *** vrurg joined
[19:55] <timotimo> you can, however, pass a list fo symbols that you want to have available

[19:55] <kalkin-> Currently my plugin system consists of multiple module which export MAIN subs. I find out which modules I need to load via Plugabble at run time

[19:56] <kalkin-> timotimo: about require Foo; I see you have to be explicit: require Foo <&something>

[19:57] <kalkin-> timotimo: but the list you are mentioning, need to be available at compile time, right?

[19:57] <xinming> I think it's because of   multi with is export

[19:57] <timotimo> yes

[19:58] <kalkin-> so there is NO METHOD for importing it at runtime?

[19:58] <timotimo> yes, it's simply not possible without time travel

[19:59] <kalkin-> k

[19:59] *** lookatme left
[19:59] *** lookatme joined
[20:00] <kalkin-> K, at least I get the modules loaded. Now I could iterate over them collect all the exported MAIN functions, and then forward @*ARGS some how to the right one

[20:00] <kalkin-> does this make sense?

[20:00] <timotimo> doesn't immediately sound wrong

[20:02] <kalkin-> given I have a list of MAIN Subs and an array of arguments, how can I do the same as perl6 does when it resolves a multi?

[20:02] <timotimo> hm, that's more difficult

[20:02] <timotimo> since every one of them already has their own proto sub

[20:02] <timotimo> i wonder if you can use the MOP to get this

[20:03] <kalkin-> currently this gives me all the multi subs in a unit ‚Üí say ::($name).WHO<EXPORT>.WHO<DEFAULT>.WHO.values[0].candidates[0]

[20:03] <kalkin-> m: use JSON::Fast

[20:03] <camelia> rakudo-moar d2116efd5: OUTPUT: ¬´===SORRY!===‚ê§Could not find JSON::Fast at line 1 in:‚ê§    /home/camelia/.perl6‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/site‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/vendor‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6‚ê§    CompUni‚Ä¶¬ª

[20:04] *** mcmillhj left
[20:04] <kalkin-> timotimo: what exactly need I get?

[20:05] <timotimo> i haven't worked with this part of the mop a lot

[20:05] <kalkin-> I assummed I there will be some function EXECUTE(@subs, |args) which does the magic

[20:06] <timotimo> not like that, no

[20:06] <timotimo> i'd think you'd build "your own" multi sub and just shove all the candidates into it

[20:06] <Geth> ¬¶ doc: eb0c969e57 | (Zoffix Znet)++ | 2 files

[20:06] <Geth> ¬¶ doc: [6.d] Document $*ARGFILES being fed by $*IN inside MAIN

[20:06] <Geth> ¬¶ doc: 

[20:06] <Geth> ¬¶ doc: Even when @*ARGS has stuff up in it.

[20:06] <Geth> ¬¶ doc: Rakudo impl: https://github.com/rakudo/rakudo/commit/84d45f07fb

[20:06] <Geth> ¬¶ doc: Propspec:    https://github.com/perl6/roast/commit/88499ac366

[20:06] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/eb0c969e57

[20:07] <xinming> seems no one interested in rakudo segfault issue. I'll trouble the channel later. :-)

[20:07] <timotimo> sorry, xinming

[20:07] <timotimo> my brain is dramatically slowed down by the heat

[20:08] <El_Che> xinming: raise an issue so there is a trace (for people not in the channel atm)

[20:08] <raschipi> .cando -> Returns a list of candidates that can be called with the given Capture

[20:08] <MasterDuke> xinming: i can repro it

[20:09] <timotimo> yeah, me too

[20:09] <timotimo> it explodes while compiling a regex or something?

[20:09] <MasterDuke> xinming: btw, `\o where { o ~~ Int  }` could just be `Int \o`

[20:09] <MasterDuke> still happens with the jit disabled

[20:10] <MasterDuke> and with spesh disabled

[20:10] <MasterDuke> xinming: are you creating an issue?

[20:11] <xinming> Not yet

[20:11] <MasterDuke> huh, no segv under valgrind

[20:11] <xinming> what does valgrind mean?

[20:12] <MasterDuke> it's a debugging tool

[20:12] <timotimo> it's a pretty cool tool that can figure out a lot of different kinds of memory usage errors

[20:12] <timotimo> like using memory that has recently been freed

[20:12] *** mcmillhj joined
[20:12] <timotimo> or running out of bounds on a buffer or array or something

[20:12] <xinming> Ok, got it, thanks

[20:13] <timotimo> MasterDuke: it looks like perhaps GC_DEBUG will tell us something

[20:15] *** psychoslave joined
[20:15] <MasterDuke> hm, doesn't seem to have shown anything new yet

[20:16] *** dct joined
[20:16] *** mcmillhj left
[20:16] *** uzl joined
[20:17] <MasterDuke> oh, i need to create a log file...

[20:17] *** Kaiepi left
[20:18] *** Kaiepi joined
[20:18] *** Zoffix joined
[20:18] <Zoffix> It bisects to https://github.com/rakudo/rakudo/commit/722d8711b359a1e5b9f21c3d2a954f18074bffd8

[20:18] <Zoffix> Geth: ver https://github.com/rakudo/rakudo/commit/722d8711b359a1e5b9f21c3d2a954f18074bffd8

[20:18] <Geth> Zoffix, version bump brought in these changes: https://github.com/perl6/nqp/compare/2017.09-40-ga6a1aa0...2017.09-59-g60f79d3

[20:19] <Zoffix> Geth: ver https://github.com/perl6/nqp/commit/60f79d38e99985c207a2b9a91afda44a6d5e8aa5

[20:19] <Geth> Zoffix, version bump brought in these changes: https://github.com/MoarVM/MoarVM/compare/2017.09.1-553-ga4fef0b...2017.09.1-575-gd4e230a

[20:20] <xinming> issue submitted.

[20:20] <uzl> I just watched your 'Wow, Perl 6' presentation, Zoffix. Good stuff!

[20:21] <xinming> https://github.com/rakudo/rakudo/issues/2147

[20:22] *** HaraldJoerg left
[20:23] <Zoffix> Thanks.

[20:23] <uzl> You mentions the use of ++$ as a counter. I know it's somewhat simple but is there any documentation on it?

[20:23] *** HaraldJoerg joined
[20:24] *** raschipi left
[20:24] <Zoffix> uzl: https://docs.perl6.org/language/variables#index-entry-%24_%28variable%29

[20:27] <Geth> ¬¶ doc: 1b9e1e5877 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/variables.pod6

[20:27] <Geth> ¬¶ doc: Improve example with explicit `state`

[20:27] <Geth> ¬¶ doc: 

[20:27] <Geth> ¬¶ doc: Using state in `where` clause is UB and should not be shown in the docs.

[20:27] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/1b9e1e5877

[20:27] <synopsebot> Link: https://doc.perl6.org/language/variables

[20:27] <uzl> "In general, it is better style and p6ier to declare a named state variable in case you have to refer to it several times." 

[20:28] *** Kaiepi left
[20:28] <uzl> what does "p6ier" mean in this context?

[20:28] <timotimo> i guess "idiomatic perl6"?

[20:28] *** mcmillhj joined
[20:29] <Zoffix> Also.. says who?

[20:29] <Zoffix> ah, it's about using $ multiple times. OK

[20:30] <Geth> ¬¶ doc: 4ca4b13a54 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/variables.pod6

[20:30] <Geth> ¬¶ doc: Remove confusing adjective

[20:30] <Geth> ¬¶ doc: 

[20:30] <Geth> ¬¶ doc: http://colabti.org/irclogger/irclogger_log/perl6?date=2018-07-29#l812

[20:30] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/4ca4b13a54

[20:30] <synopsebot> Link: https://doc.perl6.org/language/variables

[20:30] *** Zoffix left
[20:31] *** Kaiepi joined
[20:33] *** mcmillhj left
[20:35] *** buggable joined
[20:35] *** ChanServ sets mode: +v buggable

[20:37] <Geth> ¬¶ doc: 7adf41fe82 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/glossary.pod6

[20:37] <Geth> ¬¶ doc: Add "UB" to glossary

[20:37] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/7adf41fe82

[20:37] <synopsebot> Link: https://doc.perl6.org/language/glossary

[20:37] *** domidumont left
[20:39] *** mcmillhj joined
[20:43] *** mcmillhj left
[20:45] *** damaxi left
[20:53] *** damaxi joined
[21:08] *** mcmillhj joined
[21:09] *** psychoslave left
[21:12] *** mcmillhj left
[21:15] *** pmurias left
[21:17] *** rindolf left
[21:18] *** HaraldJoerg left
[21:20] *** pmurias joined
[21:23] *** damaxi left
[21:34] <SmokeMachine> Isn‚Äôt http://modules.perl6.org/ getting the new modules?

[21:35] <timotimo> check the far bottom

[21:35] <timotimo> This page was generated from the files in the modules.perl6.org repository on Sun Jul 29 20:39:36 2018.  view build log

[21:38] <SmokeMachine> timotimo: thanks

[21:40] <SmokeMachine> Something wrong on my META6.json

[21:42] *** sarna left
[21:47] *** mcmillhj joined
[21:52] *** mcmillhj left
[21:53] *** ofperfection_ joined
[21:55] <SmokeMachine> This line is breaking the indexation of my module (Injector), but my .travis.yml isn‚Äôt using panda...

[21:56] <SmokeMachine> https://github.com/FCO/Injector/blob/master/.travis.yml

[21:56] *** stee joined
[21:58] <SmokeMachine> fatal error while building https://raw.githubusercontent.com/FCO/Injector/master/META6.json: Use of uninitialized value in pattern match (m//) at lib/ModulesPerl6/DbBuilder/Dist/PostProcessor/p30METAChecker.pm line 123.

[22:00] <SmokeMachine> Looks something wrong on the regex...

[22:05] <SmokeMachine> Or the .travis.yml‚Äôs content couldn‚Äôt be loaded

[22:07] *** Zoffix joined
[22:07] <Zoffix> This is just ridiculous.

[22:07] <Zoffix> The PR had a comment, saying the code was broken.

[22:07] <Zoffix> The user who merged the PR was told the code was broken.

[22:07] <Zoffix> And yet still no one did anything and now the site is broken.

[22:09] *** ofperfection_ left
[22:16] <El_Che> why was it merged then?

[22:16] <El_Che> did it fail travis?

[22:16] *** _uzl joined
[22:17] *** uzl left
[22:18] *** pmurias left
[22:21] *** dct left
[22:21] <Zoffix> "why merge a PR that's being claimed to be broken?"   "I don't think it is."

[22:21] <Zoffix> And then they fucked off.

[22:30] <SmokeMachine> Should it be reverted

[22:31] <Zoffix> I'm trying to fix it right now, but Types::Standard seems to be glitching and doesn't respect Maybe[] constraints on 5.28

[22:33] *** mcmillhj joined
[22:35] *** lizmat joined
[22:37] *** mcmillhj left
[22:41] <Geth> ¬¶ modules.perl6.org: 866b0af6c9 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/PostProcessor/p05DataFetcher.pm

[22:41] <Geth> ¬¶ modules.perl6.org: Fetch travis file contents

[22:41] <Geth> ¬¶ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/866b0af6c9

[22:41] <Geth> ¬¶ modules.perl6.org: 9e1db1d97e | (Zoffix Znet)++ | use-me-for-commit-triggers

[22:41] <Geth> ¬¶ modules.perl6.org: [NEWDB] rebuilt stuff

[22:41] <Geth> ¬¶ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/9e1db1d97e

[22:42] <Zoffix> "Types::Standard seems to be glitching"  was actually changes in newer Mew: https://github.com/zoffixznet/Mew/pull/4

[22:43] *** Zoffix left
[22:44] *** koto left
[22:50] <Geth> ¬¶ modules.perl6.org: fd967f934e | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/PostProcessor/p30METAChecker.pm

[22:50] <Geth> ¬¶ modules.perl6.org: Harden meta checker against failed content fetches

[22:50] <Geth> ¬¶ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/fd967f934e

[22:52] <Geth> ¬¶ modules.perl6.org: 4c03426399 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/PostProcessor/p05DataFetcher.pm

[22:52] <Geth> ¬¶ modules.perl6.org: Fix copy-pasta in error message

[22:52] <Geth> ¬¶ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/4c03426399

[22:53] *** pecastro left
[22:56] *** Ven`` joined
[22:58] *** Ven`` left
[23:00] <Geth> ¬¶ modules.perl6.org: c22c885f33 | (Zoffix Znet)++ | 11 files

[23:00] <Geth> ¬¶ modules.perl6.org: Fix @INC for newer perls

[23:00] <Geth> ¬¶ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/c22c885f33

[23:04] *** Ven`` joined
[23:04] *** wamba left
[23:05] *** _uzl left
[23:19] *** spider-mario joined
[23:20] *** mcmillhj joined
[23:25] *** mcmillhj left
[23:33] *** mcmillhj joined
[23:37] *** mcmillhj left
[23:37] <vrurg> Are there a way to get a custom DESTROY submethod (installed with .^add_method) called?

[23:38] <vrurg> Wrapping an existing DESTROY works, but installing a new one ‚Äì doesn't.

[23:48] <timotimo> it's important to call .^compose for such changes, but it may still not be enough

[23:50] *** limarfrek joined
[23:51] *** kerframil left
[23:51] *** limarfrek is now known as kerframil

[23:53] <vrurg> timotimo: Thanks, but doesn't work for me either. I'm trying to create an attribute trait and all the work happens in Attribute's compose. Calling class .^compose causes a error.

[23:53] <timotimo> ah, ok, i thought you were monkey-patching an existing class

[23:55] <timotimo> maybe try mixing in a role that has the DESTROY submethod

[23:55] <timotimo> i wonder if ^add_submethod is a thing that exists

[23:55] <vrurg> Worse. Trying to re-implement Moo/Moose lazy attributes in a smarter way than the two existing modules.

[23:56] <vrurg> add_submethod is not necessary because add_method determines what type of routine it is given.

[23:56] <vrurg> so, .^add_method( method ) and .^add_method( submethod {} ) are different things.

[23:57] <vrurg> Mixin doesn't work either, BTW. Only if the class has its own DESTROY.

[23:59] <timotimo> ah

[23:59] <timotimo> well, it can have only one

