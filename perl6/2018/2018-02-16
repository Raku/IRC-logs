[00:10] *** pharv left
[00:13] *** pharv joined
[00:13] <AlexDaniel> OK, yes, that's a regression in HTTP::UserAgent

[00:18] *** pharv left
[00:18] *** pharv joined
[00:33] *** nativecallable6 joined
[00:33] *** coverable6 joined
[00:33] *** notable6 joined
[00:33] *** greppable6 joined
[00:33] *** evalable6 joined
[00:33] *** ChanServ sets mode: +v greppable6

[00:33] *** ChanServ sets mode: +v evalable6

[00:33] *** reportable6 joined
[00:33] *** benchable6 joined
[00:33] *** releasable6 joined
[00:33] *** bloatable6 joined
[00:33] *** squashable6 joined
[00:34] *** statisfiable6 joined
[00:34] *** unicodable6 joined
[00:34] *** ChanServ sets mode: +v unicodable6

[00:34] *** committable6 joined
[00:34] *** ChanServ sets mode: +v committable6

[00:34] *** shareable6 joined
[00:34] *** bisectable6 joined
[00:34] *** ChanServ sets mode: +v shareable6

[00:34] *** ChanServ sets mode: +v bisectable6

[00:34] *** quotable6 joined
[00:34] *** ChanServ sets mode: +v quotable6

[00:39] *** pmurias left
[00:42] <timotimo> do we have a distribution dependency graph tool yet?

[00:43] *** Rawriful left
[00:48] <AlexDaniel> timotimo: like ｢zef depends …｣ ? (there's also rdepends)

[00:48] <AlexDaniel> that's for a single module of course

[00:49] <timotimo> zef depends gives me "Failed to resolve some missing dependencies" on "cro"

[00:49] <AlexDaniel> yes, seems to be broken :(

[00:55] <AlexDaniel> filed this ticket: https://github.com/ugexe/zef/issues/230

[00:55] <timotimo> i was still on an old version at the time i tried it

[00:57] <timotimo> it'd be neat if we could figure out a way to make zef drastically faster

[00:57] <AlexDaniel> oh god please yes

[00:58] <timotimo> i'm going to start working on my grant Real Soon Now

[00:58] <timotimo> making the profiler work properly with multithreaded applications is going to be a big task, but i'm hoping it can be done

[00:59] <timotimo> parts of the installation process are inside the rakudo code, i believe

[01:04] *** pugcs joined
[01:07] *** aborazmeh joined
[01:07] *** aborazmeh left
[01:07] *** aborazmeh joined
[01:09] <timotimo> i see a "zef list" spends ~60% of its time in from_json, but i might be missing data from extra threads

[01:10] <timotimo> doesn't seem like it tries to use JSON::Fast if it's installed

[01:16] *** pharv left
[01:17] *** pharv joined
[01:18] <japhb> timotimo: I think the biggest problem is no caching between phases of dependency analysis, and no attempt to do global analysis.

[01:19] <japhb> AlexDaniel: FWIW, I get a zef crash during (or just after) zef dependency checking on freshly built rakudo head

[01:19] <AlexDaniel> japhb: what kind of crash? Can you gist the output?

[01:20] <japhb> ... and this is why I build every new rakudo in a separate tree and don't swap it in place until zef manages to install and test all the modules I care about.  :-/

[01:20] <japhb> AlexDaniel: see #perl6-dev

[01:21] *** pharv left
[01:23] *** pierre joined
[01:23] <timotimo> is JSON::Fast somehow un-conditional-loadable?

[01:24] <timotimo> yeah, i neglected to make them "our" subs

[01:25] <timotimo> oh, i didn't have to

[01:28] <timotimo> changed Zef.pm6 to first check for json::fast and "zef list" runs in 4.5s instead of 7

[01:29] <MasterDuke> AlexDaniel: the Pastebin::Gist test hang is completely separate from any zef issue, right?

[01:29] <MasterDuke> i should be able to repro just running its tests?

[01:29] <AlexDaniel> MasterDuke: it's an issue in HTTP::UserAgent, yes: https://github.com/sergot/http-useragent/pull/187#issuecomment-366106934

[01:30] <AlexDaniel> MasterDuke: so it goes away if use HTTP::UserAgent on HEAD^^

[01:30] <AlexDaniel> (before your pull request was merged)

[01:30] <MasterDuke> hm, i probably have a little time to look into it

[01:31] *** pharv joined
[01:34] *** pugcs left
[01:38] *** pierre left
[01:39] *** pierre joined
[01:39] *** TEttinger joined
[01:40] *** pierre left
[01:40] * AlexDaniel sees notificiation: ““zef --deps-only install .” took 11 minutes 58 seconds”

[01:40] *** pierre joined
[01:40] *** pierre left
[01:40] <AlexDaniel> even forgot that it was running…

[01:40] <AlexDaniel> undistract-me++

[01:41] *** konsolebox left
[01:43] *** konsolebox joined
[01:47] * Juerd doesn't understand why .codes exists if you can do +.ords

[01:50] <timotimo> is it equivalent with regards to synthetics?

[01:50] <timotimo> u: combining

[01:50] <unicodable6> timotimo, U+0300 COMBINING GRAVE ACCENT [Mn] ( ̀)

[01:50] <unicodable6> timotimo, U+0301 COMBINING ACUTE ACCENT [Mn] ( ́)

[01:50] <AlexDaniel> seems to be, yes

[01:50] <unicodable6> timotimo, 445 characters in total: https://gist.github.com/75ec50e000e1ffafb81415188e016a6c

[01:51] <timotimo> m: .ords.elems.say && .codes.say given "a\u0300\u0301\u0300\u0301"

[01:51] <camelia> rakudo-moar beaad7b97: OUTPUT: «5===SORRY!5===␤Unrecognized backslash sequence: '\u'␤at <tmp>:1␤------> 3.ords.elems.say && .codes.say given "a\7⏏5u0300\u0301\u0300\u0301"␤Unrecognized backslash sequence: '\u'␤at <tmp>:1␤------> 3.elems.say && .codes.say given…»

[01:51] <timotimo> m: .ords.elems.say && .codes.say given "a\x[0300]\x[0301]\x[0300]\x[0301]"

[01:51] <camelia> rakudo-moar beaad7b97: OUTPUT: «4␤4␤»

[01:51] <timotimo> well, i guess :)

[01:51] <timotimo> TIMTOWTDI

[01:52] <AlexDaniel> greppable: codes

[01:52] <greppable6> AlexDaniel, 700 lines, 118 modules: https://gist.github.com/1e0989fb3c4363a07bc5c4a10db195e0

[01:52] <AlexDaniel> greppable: \.codes

[01:52] <greppable6> AlexDaniel, 72 lines, 18 modules: https://gist.github.com/bc2555a33f9080f272da541088f0a7db

[01:53] <AlexDaniel> Juerd: can you file a doc issue asking to document that these things are identically, if they are?

[01:53] <Juerd> I guess perhaps .codes is faster :)

[01:53] <Juerd> AlexDaniel: I don't know if they definitely return the same thing, though :)

[01:54] <AlexDaniel> Juerd: then say in the ticket that you are uncertain

[01:54] <AlexDaniel> can't +.ords be as fast as .codes?

[01:55] <AlexDaniel> m: say combinations(9999) # similarly to this?

[01:55] <camelia> rakudo-moar beaad7b97: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[01:55] <AlexDaniel> m: say combinations(^9999) # similarly to this?

[01:55] <camelia> rakudo-moar beaad7b97: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[01:56] <AlexDaniel> m: say +permutations(9999) # similarly to this?

[01:56] <camelia> rakudo-moar beaad7b97: OUTPUT: «Cowardly refusing to permutate more than 20 elements, tried 9999␤  in block <unit> at <tmp> line 1␤␤»

[01:56] * AlexDaniel squints

[01:59] <AlexDaniel> I thought this was fixed?

[01:59] <AlexDaniel> m: say +combinations(9999, 10)

[01:59] <camelia> rakudo-moar beaad7b97: OUTPUT: «2740611722513691255693587901028251␤»

[01:59] <AlexDaniel> this works

[02:00] <Juerd> Heh, in a simple benchmark on a single codepoint, .codes was 5 times faster than +.ords :)

[02:00] <Juerd> I think that answers my question :)

[02:01] <AlexDaniel> does it? To me it reveals a potential speedup

[02:02] <Juerd> Well, .ords returns a Seq, and I can imagine that creating that takes some time.

[02:02] <Juerd> Numeric context isn't propagated to the method in any way, or is it?

[02:02] <AlexDaniel> it's other way round, and yes it can be done

[02:03] <AlexDaniel> m: say WHAT combinations(9999, 10)

[02:03] <camelia> rakudo-moar beaad7b97: OUTPUT: «(Seq)␤»

[02:03] <AlexDaniel> this returns a Seq too

[02:03] <AlexDaniel> (but obviously it does not go through 2740611722513691255693587901028251 elements when numifying it)

[02:06] <AlexDaniel> Juerd: thanks

[02:10] *** cdg joined
[02:15] *** cdg left
[02:19] *** Zoffix joined
[02:19] <Zoffix> AlexDaniel: FWIW, not seeing any segfaults after running this https://gist.github.com/zoffixznet/fa41f42190942e171f0c0f5bc0e8273f a couple of times of 2018.01.200

[02:20] <Zoffix> Juerd: yeah, it's propagated

[02:20] <Zoffix> s: combinations(9999, 10).iterator, 'count-only', \()

[02:20] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/beaad7b97/src/core/Rakudo/Iterator.pm#L780

[02:21] <Zoffix> s: "z".codes.iterator, 'count-only', \()

[02:21] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/beaad7b97/src/core/Rakudo/Iterator.pm#L2590

[02:21] <Zoffix> s: "z".ords.iterator, 'count-only', \()

[02:21] <SourceBaby> Zoffix, Something's wrong: ␤ERR: Could not find candidate that can do \()␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 29␤  in block <unit> at -e line 6␤␤

[02:21] <AlexDaniel> Zoffix: by the way, any idea why this? ↓

[02:21] <AlexDaniel> m: say +permutations(9999)

[02:21] <camelia> rakudo-moar beaad7b97: OUTPUT: «Cowardly refusing to permutate more than 20 elements, tried 9999␤  in block <unit> at <tmp> line 1␤␤»

[02:21] <AlexDaniel> it was working at some point

[02:21] <Zoffix> Juerd: And there's your anwer. `.codes` got a count-only optimization, but `.ords` ain't got one.

[02:21] <AlexDaniel> maybe it was decided that it shouldn't work, do you remember anything?

[02:22] <Zoffix> I remember the discussion that it shouldn't complain, but I don't remember the resolution to it.

[02:22] <Zoffix> releases: say +permutations(9999)

[02:22] <AlexDaniel> (will take some time ↑)

[02:22] <AlexDaniel> some releases tried very hard to actually do it :)

[02:23] <AlexDaniel> Zoffix: that's a wrong source for .codes I think

[02:23] <AlexDaniel> m: say WHAT ‘foo’.codes

[02:23] <camelia> rakudo-moar beaad7b97: OUTPUT: «(Int)␤»

[02:23] <committable6> Zoffix, https://gist.github.com/7702544fa592d9ea01f2d01d96f44842

[02:23] <AlexDaniel> codes returns just an Int, so of course that's fast, yeah…

[02:24] <Zoffix> m: dd 'foo'.codes

[02:24] <camelia> rakudo-moar beaad7b97: OUTPUT: «3␤»

[02:24] <Zoffix> Ah. 

[02:24] <Zoffix> Right, that's just the ReifiedList iterator.

[02:25] <Zoffix> Is .codes == +.ords ?

[02:25] <AlexDaniel> seems so

[02:25] <Zoffix> That's not very scientific :)

[02:25] <AlexDaniel> it is so across the whole unicode range for one character strings

[02:25] <Zoffix> s: "z".ords.iterator, 'pull-one', \()

[02:25] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/beaad7b97/src/core/Seq.pm#L214

[02:26] <Zoffix> m: dd [.codes, +.ords] with "7\x[308]"

[02:26] <camelia> rakudo-moar beaad7b97: OUTPUT: «[2, 2]␤»

[02:26] <Zoffix> m: dd [.codes, +.ords] with "e\x[308]"

[02:26] <camelia> rakudo-moar beaad7b97: OUTPUT: «[1, 1]␤»

[02:28] <AlexDaniel> heh, Zoffix goes to read the source code and I'm here trying to fuzz test it XD

[02:28] * AlexDaniel goes back to the changelog

[02:35] * Zoffix writes opt for both .ords and +.ords

[02:35] <Zoffix> Well, for Uni.list; no idea what else uses it

[02:36] <AlexDaniel> Zoffix: I think permutations thingy is a LHF, filed it here: https://github.com/rakudo/rakudo/issues/1528

[02:36] <AlexDaniel> perhaps leave it open for somebody else to tackle? :)

[02:36] <AlexDaniel> actually… is it?

[02:36] * AlexDaniel is no longer sure

[02:37] <AlexDaniel> yea, ok…

[02:37] <Zoffix> FWIW there's also R#1331

[02:37] <synopsebot> R#1331 [open]: https://github.com/rakudo/rakudo/issues/1331 [perf] .count-only/.bool-only exist on combinations/permutations subs, but not methods

[02:38] <AlexDaniel> cool, linked it

[02:44] *** Aquino joined
[02:45] *** ilbot3 left
[02:48] *** Aquino left
[02:51] <Zoffix> "NEW version is 653.89x faster" lulz

[02:52] <Zoffix> And just reifying is 15x faster.

[02:53] <Zoffix> (653x is +.ords)

[02:55] *** ilbot3 joined
[02:55] *** ChanServ sets mode: +v ilbot3

[03:03] <AlexDaniel> hehe

[03:06] *** pharv left
[03:06] *** pharv joined
[03:11] *** pharv left
[03:13] <MasterDuke> AlexDaniel: https://github.com/sergot/http-useragent/pull/188

[03:14] <AlexDaniel> MasterDuke: that's cool. Tests?

[03:15] <MasterDuke> i don't know how HTTP::UserAgent works well enough to write tests

[03:18] <AlexDaniel> MasterDuke: can't you just .get a page? There are many examples: https://github.com/sergot/http-useragent/tree/master/t

[03:18] <AlexDaniel> I don't know what exactly triggers that problem though

[03:19] <MasterDuke> well, yeah, but downloading the builds from the whateverable server worked fine (i checked the files were exactly the same when downloaded with wget)

[03:28] *** konsolebox left
[03:29] *** konsolebox joined
[03:31] *** Zoffix left
[03:33] *** pharv joined
[03:33] <ZzZombo> m: say {...}()

[03:33] <camelia> rakudo-moar beaad7b97: OUTPUT: «Stub code executed␤  in block <unit> at <tmp> line 1␤␤»

[03:33] <ZzZombo> m: say {*}()

[03:33] <camelia> rakudo-moar beaad7b97: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤{*} may only appear in proto␤at <tmp>:1␤------> 3say {*}7⏏5()␤    expecting any of:␤        argument list␤        horizontal whitespace␤        term␤»

[03:33] <ZzZombo> m: say {(*)}()

[03:33] <camelia> rakudo-moar beaad7b97: OUTPUT: «*␤»

[03:34] <ZzZombo> m: say {do *}()

[03:34] <camelia> rakudo-moar beaad7b97: OUTPUT: «*␤»

[03:34] <ZzZombo> m: say {*.name}()

[03:34] <camelia> rakudo-moar beaad7b97: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed double closure; WhateverCode is already a closure without curlies, so either remove the curlies or use valid parameter syntax instead of *␤at <tmp>:1␤------> 3say {*.name}7⏏5()␤   …»

[03:38] *** noganex left
[03:39] *** konsolebox left
[03:43] *** konsolebox joined
[03:44] *** noganex joined
[03:44] *** greppable6 left
[03:45] *** greppable6 joined
[04:00] *** konsolebox left
[04:05] *** Cabanossi left
[04:06] *** aborazmeh left
[04:07] *** konsolebox joined
[04:07] *** Cabanossi joined
[04:27] *** evalable6 left
[04:27] *** evalable6 joined
[04:33] *** AlexDaniel left
[04:34] *** pharv left
[04:37] *** skids left
[04:41] *** headcase joined
[04:42] *** headcase left
[04:43] *** headcase joined
[04:53] *** AlexDaniel joined
[04:53] *** pharv joined
[04:53] *** pharv left
[04:54] *** pharv joined
[04:56] *** ZzZombo left
[04:58] *** pharv left
[05:06] *** epony left
[05:07] *** epony joined
[05:09] *** epony left
[05:24] *** dustinm` left
[05:32] *** dustinm` joined
[05:32] *** epony joined
[05:42] *** curan joined
[05:46] *** epony left
[06:09] *** khw left
[06:22] *** headcase left
[06:23] *** headcase joined
[06:27] *** wamba joined
[06:27] *** headcase left
[06:33] *** eroux joined
[06:45] *** headcase joined
[06:49] *** headcase left
[06:49] <Geth> ¦ doc: ed89bafb6c | (JJ Merelo)++ | doc/Type/Signature.pod6

[06:49] <Geth> ¦ doc: Improve the example

[06:49] <Geth> ¦ doc: 

[06:49] <Geth> ¦ doc: To reflect what is indicated by @lizmat here

[06:49] <Geth> ¦ doc: https://stackoverflow.com/questions/41531393/can-i-use-a-standalone-signature-as-a-signature-in-perl-6#comment84619436_41543023

[06:49] <synopsebot> Link: https://doc.perl6.org/type/Signature

[06:49] <Geth> ¦ doc: and also reflect the intent of putting signatures into variables, as

[06:49] <Geth> ¦ doc: said in #1748 (by myself, but still). Also modifies the example

[06:49] <Geth> ¦ doc: changed in #1777, so thanks to @jimav for drawing this to our attention.

[06:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ed89bafb6c

[06:54] *** darutoko joined
[07:01] *** robertle left
[07:05] *** konsolebox left
[07:05] *** eliasr left
[07:07] *** konsolebox joined
[07:09] *** grondilu joined
[07:10] <grondilu> Hello all.  FYI, webassembly first public draft is out : https://www.w3.org/blog/news/archives/6838

[07:11] *** espadrine left
[07:13] *** Exodist left
[07:14] *** Exodist joined
[07:14] *** konsolebox left
[07:15] *** troys left
[07:16] *** konsolebox joined
[07:23] *** konsolebox left
[07:24] *** konsolebox joined
[07:41] *** lowbro joined
[07:41] *** lowbro left
[07:41] *** lowbro joined
[07:48] *** Ven`` joined
[08:00] *** pierre_ joined
[08:00] *** bisectable6 left
[08:00] *** bisectable6 joined
[08:00] *** ChanServ sets mode: +v bisectable6

[08:16] *** konsolebox left
[08:17] *** konsolebox joined
[08:30] *** wamba left
[08:33] *** dct_ joined
[08:36] *** konsolebox left
[08:37] *** konsolebox joined
[08:37] *** headcase joined
[08:38] *** abraxxa joined
[08:43] *** Ven`` left
[08:43] *** abraxxa left
[08:44] *** Ven`` joined
[08:45] *** headcase left
[08:48] *** Ven`` left
[08:49] *** AlexDaniel left
[08:49] *** Ven`` joined
[08:58] *** headcase joined
[09:01] *** scimon joined
[09:01] *** abraxxa joined
[09:03] *** headcase left
[09:05] *** Ven`` left
[09:19] *** wamba joined
[09:21] *** zakharyas joined
[09:27] *** konsolebox_ joined
[09:29] *** konsolebox left
[09:37] *** headcase joined
[09:37] *** rindolf joined
[09:45] *** headcase left
[09:57] *** headcase joined
[10:02] *** garryq joined
[10:05] *** headcase left
[10:12] *** headcase joined
[10:21] *** headcase left
[10:27] *** headcase joined
[10:30] <El_Che> last murias

[10:30] <El_Che> oops

[10:31] <El_Che> .tell pmurias Have you heard of Graal (JVM of dynamic langs): http://www.oracle.com/technetwork/oracle-labs/program-languages/overview/index.html https://github.com/oracle/graal

[10:31] <yoleaux> El_Che: I'll pass your message to pmurias.

[10:36] *** headcase left
[10:40] *** AlexDaniel joined
[10:42] *** Ven`` joined
[10:43] *** konsolebox_ left
[10:44] *** konsolebox joined
[10:55] *** parv joined
[10:56] *** AlexDaniel left
[11:06] *** evalable6 left
[11:06] *** evalable6 joined
[11:06] *** ChanServ sets mode: +v evalable6

[11:19] *** lucasb joined
[11:24] *** telex left
[11:26] *** telex joined
[11:28] *** zakharyas left
[11:37] *** headcase joined
[11:39] *** zakharyas joined
[11:46] *** headcase left
[11:46] *** headcase joined
[11:50] *** zakharyas left
[11:51] *** headcase left
[11:56] *** konsolebox left
[11:57] *** zakharyas joined
[11:57] *** konsolebox joined
[11:59] *** pierre_ left
[12:00] *** pierre_ joined
[12:00] *** Ven`` left
[12:01] *** gabiruh joined
[12:04] *** pierre_ left
[12:08] *** headcase joined
[12:11] *** curan left
[12:13] *** headcase left
[12:13] *** pierre_ joined
[12:17] *** headcase joined
[12:20] *** amalia___ joined
[12:20] *** konsolebox left
[12:22] *** headcase left
[12:23] *** konsolebox joined
[12:24] *** Ven`` joined
[12:26] *** zakharyas left
[12:27] *** wamba left
[12:45] *** konsolebox left
[12:49] *** konsolebox joined
[12:54] *** eliasr joined
[12:56] *** parv left
[12:56] *** Ven`` left
[12:59] *** pierre_ left
[12:59] *** pierre_ joined
[13:03] *** pierre_ left
[13:06] *** aborazmeh joined
[13:06] *** aborazmeh left
[13:06] *** aborazmeh joined
[13:26] <jkramer> m: my Array[Array[Str]] @field = "foo\nbar\nbaz".lines.map(*.comb.Array);

[13:26] <camelia> rakudo-moar beaad7b97: OUTPUT: «Type check failed in assignment to @field; expected Array[Array[Str]] but got Array ($["f", "o", "o"])␤  in block <unit> at <tmp> line 1␤␤»

[13:26] <jkramer> Oh wait

[13:27] <jkramer> m: my Array[Array[Str]] $field = "foo\nbar\nbaz".lines.map(*.comb.Array);

[13:27] <camelia> rakudo-moar beaad7b97: OUTPUT: «Type check failed in assignment to $field; expected Array[Array[Str]] but got Seq ($((["f", "o", "o"], [...)␤  in block <unit> at <tmp> line 1␤␤»

[13:27] <jkramer> m: my Array[Str] @field = "foo\nbar\nbaz".lines.map(*.comb.Array);

[13:27] <camelia> rakudo-moar beaad7b97: OUTPUT: «Type check failed in assignment to @field; expected Array[Str] but got Array ($["f", "o", "o"])␤  in block <unit> at <tmp> line 1␤␤»

[13:27] <jkramer> What's am I doing wrong?

[13:28] *** comborico1611 joined
[13:30] *** aborazmeh left
[13:30] <Ulti> m: my Array[Str] @field = "foo\nbar\nbaz".lines.map(*.comb.Array).Array;

[13:30] <camelia> rakudo-moar beaad7b97: OUTPUT: «Type check failed in assignment to @field; expected Array[Str] but got Array ($["f", "o", "o"])␤  in block <unit> at <tmp> line 1␤␤»

[13:30] <Ulti> m: my Array[Array[Str]] @field = "foo\nbar\nbaz".lines.map(*.comb.Array).Array;

[13:30] <camelia> rakudo-moar beaad7b97: OUTPUT: «Type check failed in assignment to @field; expected Array[Array[Str]] but got Array ($["f", "o", "o"])␤  in block <unit> at <tmp> line 1␤␤»

[13:31] <jnthn> m: my Array[Str] @field = "foo\nbar\nbaz".lines.map({ Array[Str](.comb) });

[13:31] <camelia> rakudo-moar beaad7b97: ( no output )

[13:31] <jnthn> It's nominal typing, so you must make the inner arrays be created as an Array[Str], not just an untyped Array

[13:35] *** zakharyas joined
[13:36] <jkramer> Ah ok, thanks

[13:43] *** zakharyas left
[13:47] *** headcase joined
[13:48] *** headcase_ joined
[13:49] *** konsolebox left
[13:49] *** konsolebox joined
[13:52] *** headcase left
[13:54] *** konsolebox left
[13:57] *** konsolebox joined
[13:57] *** rab26 left
[14:02] *** konsolebox left
[14:04] *** headcase_ left
[14:06] *** konsolebox joined
[14:07] *** pierre_ joined
[14:08] *** headcase joined
[14:11] *** zakharyas joined
[14:13] *** headcase left
[14:24] *** Ven`` joined
[14:25] *** konsolebox left
[14:26] *** konsolebox joined
[14:32] *** skids joined
[14:37] *** Ven`` left
[14:40] *** Ven`` joined
[14:47] *** Ven`` left
[14:47] *** headcase joined
[14:52] *** headcase left
[14:53] *** headcase joined
[14:58] *** headcase left
[14:58] *** keno joined
[15:07] *** zakharyas left
[15:13] *** keno left
[15:21] *** Ven`` joined
[15:24] *** headcase joined
[15:27] *** zakharyas joined
[15:31] *** headcase_ joined
[15:33] *** imcsk8 left
[15:35] *** headcase left
[15:36] *** eliasr left
[15:38] *** abraxxa left
[15:38] *** wamba joined
[15:46] *** AlexDaniel joined
[15:47] *** giraffe left
[15:48] *** Exodist left
[15:49] *** Exodist joined
[15:50] *** pierre_ left
[15:52] *** bart__ joined
[15:52] *** bart__ left
[16:00] *** pmurias joined
[16:02] <pmurias> El_Che: yep, seems super cool, I would be writing a graal/truffle rakudo backend if I haven't already started on a js one

[16:02] <yoleaux> 10:31Z <El_Che> pmurias: Have you heard of Graal (JVM of dynamic langs): http://www.oracle.com/technetwork/oracle-labs/program-languages/overview/index.html https://github.com/oracle/graal

[16:24] *** natrys joined
[16:30] *** zakharyas left
[16:33] *** MC8 left
[16:33] *** MC8 joined
[16:36] *** dogbert11 left
[16:36] *** markong joined
[16:40] *** Ven`` left
[16:41] *** Ven`` joined
[16:42] *** Ven`` left
[16:43] *** zakharyas joined
[16:57] *** lowbro left
[16:57] *** setty1 joined
[17:00] *** troys joined
[17:06] *** scimon left
[17:08] *** eliasr joined
[17:10] *** pharv_ joined
[17:16] <AlexDaniel> sergot: you here?

[17:18] <AlexDaniel> sergot: I'd appreciate some action on https://github.com/sergot/http-useragent/pull/188 or a revert of https://github.com/sergot/http-useragent/pull/187 because the ecosystem seems to be in a bad shape because of it…

[17:23] *** giraffe joined
[17:24] *** sno left
[17:27] *** comborico1611 left
[17:27] *** Ven`` joined
[17:30] <sergot> AlexDaniel: hey

[17:30] <sergot> sure thing, looking into it right now

[17:30] <AlexDaniel> thank you!

[17:32] *** troys left
[17:38] *** troys joined
[17:39] <APic> Yo

[17:40] <AlexDaniel> o/

[17:42] <sergot> AlexDaniel: I merged the PR, hope it helps! :)

[17:43] <AlexDaniel> sergot: I think it also needs a version bump

[17:44] <sergot> and I gave you pushing access to the repo, does it mean that you can restart the failing builds in travis as well?

[17:44] <sergot> Sure, I'll bump the version right away

[17:44] <sergot> because, most of the times, when there's a fail in travis, all it needs is to restart the build

[17:45] <sergot> AlexDaniel: done

[17:46] <AlexDaniel> sergot: yes, it seems that I can!

[17:46] <AlexDaniel> sergot: thanks!

[17:47] <sergot> thank you!

[17:56] *** Ven`` left
[17:57] *** zakharyas left
[17:59] *** amalia___ left
[18:03] *** _notbenh joined
[18:03] *** notbenh left
[18:03] *** _notbenh is now known as notbenh

[18:09] *** Ven`` joined
[18:19] *** tt_ left
[18:21] *** pharv_ left
[18:24] *** khw joined
[18:24] *** Ven`` left
[18:26] *** pharv joined
[18:32] *** Ven`` joined
[18:32] *** pharv left
[18:36] *** eroux left
[18:40] *** Exodist left
[18:40] <Xliff> I'm trying to do this in a regexp: <options=[ <SIGNED> || <UNSIGNED> || <ZEROFILL> ]*>

[18:40] <Xliff> Yet I'm getting an error. Am I doing this the wrong way?

[18:41] *** Exodist joined
[18:41] *** lucasb left
[18:41] <Xliff> m: my $a = "abc"; say $a ~~ /<o=\w+>/; 

[18:41] <camelia> rakudo-moar beaad7b97: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in metachar:sym<assert>; couldn't find final '>' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3my $a = "abc"; say $a ~~ /<o=7⏏5\w+>/;␤    expecting any…»

[18:41] <Xliff> m: my $a = "abc"; say $a ~~ /<$o=\w+>/; 

[18:41] <camelia> rakudo-moar beaad7b97: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in metachar:sym<assert>; couldn't find final '>' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3my $a = "abc"; say $a ~~ /<$o7⏏5=\w+>/;␤»

[18:42] <Xliff> m: my $a = "abc"; say $a ~~ /<$/<o?=\w+>/; 

[18:42] <camelia> rakudo-moar beaad7b97: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in metachar:sym<assert>; couldn't find final '>' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3my $a = "abc"; say $a ~~ /<$/7⏏5<o?=\w+>/;␤»

[18:42] <Xliff> m: my $a = "abc"; say $a ~~ /<$<o>=\w+>/; 

[18:42] <camelia> rakudo-moar beaad7b97: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in metachar:sym<assert>; couldn't find final '>' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3my $a = "abc"; say $a ~~ /<$<o>7⏏5=\w+>/;␤»

[18:43] <Xliff> m: my $a = "abc"; say $a ~~ /$<o>=\w+>/; 

[18:43] <camelia> rakudo-moar beaad7b97: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse regex; couldn't find final '/'␤at <tmp>:1␤------> 3my $a = "abc"; say $a ~~ /$<o>=\w+7⏏5>/;␤    expecting any of:␤        infix stopper␤        term␤»

[18:43] <Xliff> m: my $a = "abc"; say $a ~~ /$<o>=\w+/; 

[18:43] <camelia> rakudo-moar beaad7b97: OUTPUT: «｢abc｣␤ o => ｢abc｣␤»

[18:46] *** wamba left
[18:48] <Xliff> m: my $a = "$<options>=\w+"; say $a ~~ /<!before '$'> '<' \w+ '>'/;

[18:48] <camelia> rakudo-moar beaad7b97: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unrecognized backslash sequence: '\w'␤at <tmp>:1␤------> 3my $a = "$<options>=\7⏏5w+"; say $a ~~ /<!before '$'> '<' \w+ '>␤    expecting any of:␤        postfix␤»

[18:48] <Xliff> m: my $a = "\$<options>=[\w+]"; say $a ~~ /<!before '$'> '<' \w+ '>'/;

[18:48] <camelia> rakudo-moar beaad7b97: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unrecognized backslash sequence: '\w'␤at <tmp>:1␤------> 3my $a = "\$<options>=[\7⏏5w+]"; say $a ~~ /<!before '$'> '<' \w+ '␤    expecting any of:␤        double quotes␤        term␤»

[18:48] <Xliff> m: my $a = "\$<options>=[\\w+]"; say $a ~~ /<!before '$'> '<' \w+ '>'/;

[18:48] <camelia> rakudo-moar beaad7b97: OUTPUT: «｢<options>｣␤»

[18:49] *** pharv joined
[18:49] <Xliff> m: my $a = '$<options>=[\w+]'; say $a ~~ /<!before '$'> '<' \w+ '>'/;

[18:49] <camelia> rakudo-moar beaad7b97: OUTPUT: «｢<options>｣␤»

[18:49] <Xliff> m: my $a = '$<options>=[\w+]'; say $a ~~ /<?after '$'> '<' \w+ '>'/;

[18:49] <camelia> rakudo-moar beaad7b97: OUTPUT: «｢<options>｣␤»

[18:49] <Xliff> m: my $a = '$<options>=[\w+]'; say $a ~~ /<!after '$'> '<' \w+ '>'/;

[18:49] <camelia> rakudo-moar beaad7b97: OUTPUT: «Nil␤»

[18:53] *** pharv left
[18:54] *** Zoffix joined
[18:54] <Zoffix> .seen raiph

[18:54] <yoleaux> I saw raiph 2 Feb 2018 17:27Z in #perl6: <raiph> ^^ skarsnik

[18:54] *** darutoko left
[18:57] *** pharv joined
[18:57] <Zoffix> .tell raiph Wanted to accept your challenge for writing a blog post from here ( https://stackoverflow.com/questions/48488381/perl6-comparison-operator#comment83973425_48489204 ), since how we make changes is fairly-well defined, but I'm not following what's the "ouch" stuff about and what "aspect of 2017.01"?

[18:57] <yoleaux> Zoffix: I'll pass your message to raiph.

[18:59] *** Exodist left
[19:00] <Zoffix> .tell raiph Ah, nm, that stuff was in reference to the update on OP. Sure, I can explain how stuff like that can happen in a blog post.

[19:00] <yoleaux> Zoffix: I'll pass your message to raiph.

[19:01] *** Exodist joined
[19:08] <Zoffix> We need a new word to refer to spectests that are not known to be part of any released language (or are known to not be). raiph's "ouch" comments are basically about this commit https://github.com/rakudo/rakudo/commit/434bf75b9d69747f8b13de92a64bde296ecab5be where lizmat++ says "This makes a few spectests fail that test for the return type of .sort being a List"... Which made me kinda worried, since that's

[19:08] <Zoffix> exactly the issue highlighted on SO. BUT, those weren't "spectests". Those were just 6.d proposals 2016-Zoffix wrote to cover a bug: https://github.com/perl6/roast/commit/c9cf71dcc902d393d7f59d1b84880544420eb7d9

[19:09] <Zoffix> .oO( "maybetests" ... "sortatests" ... "protests" (for "proposed tests") ... )

[19:11] <Zoffix> I'm gonna start using "maytests" for roast/master and "proptests" for the subset of them that is known to be not part of any language release.

[19:12] <Zoffix> huggable: spectests :is: Terminology to more accurately reflect status of tests in roast: https://irclog.perlgeek.de/perl6/2018-02-16#i_15826474

[19:12] <huggable> Zoffix, Added spectests as Terminology to more accurately reflect status of tests in roast: https://irclog.perlgeek.de/perl6/2018-02-16#i_15826474

[19:18] *** imcsk8 joined
[19:21] *** releasable6 left
[19:21] *** releasable6 joined
[19:21] *** ChanServ sets mode: +v releasable6

[19:22] *** yqt joined
[19:27] *** pharv left
[19:28] *** pharv joined
[19:35] <pmurias> m: say $?COMPILATION-ID.^name

[19:35] <camelia> rakudo-moar beaad7b97: OUTPUT: «BOOTStr␤»

[19:35] <pmurias> ^^^ should this be a BOOTStr?

[19:36] <Zoffix> .oO( maybe a SHOEStr is more appropriate… )

[19:36] <Zoffix> m: say $?COMPILATION-ID

[19:36] <camelia> rakudo-moar beaad7b97: OUTPUT: «7C084F4E5C6228F17EDE2ABA1DC32C74C86C1B47␤»

[19:37] <pmurias> also we are serializing it in a super weird manner, normally BOOTStrs are serialized specially in code that hardcodes them rather then as normal objects

[19:38] *** epony joined
[19:50] *** Ven`` left
[20:01] *** Ven`` joined
[20:22] *** Ven`` left
[20:24] *** sno joined
[20:43] *** sno left
[20:46] *** MasterDuke left
[20:47] <skids> Zoffix: "Hypotesticals"?  Oh wait.  No.  Terrible idea.

[20:47] <AlexDaniel> geekosaur: any thoughts on https://github.com/rakudo/rakudo/issues/1533 ? :)

[20:48] <Zoffix> skids: eww :)

[20:48] <geekosaur> that sounds about right, yes. the cat vs. redirection thing is a known issue with how /proc is implemented, and perl 6 is not involved

[20:49] <geekosaur> (basically it recreates the data on every read(). you *must* do full block reads, and preferably full file reads but most /proc files are smaller than a full block)

[20:50] <geekosaur> otoh that should be something at libuv level, so unless moar is disabling libuv's buffering I'd have expected it to work

[20:50] <Zoffix> It's not using libuv there.

[20:50] * Zoffix relocates and will take a closer look afterwards.

[20:51] <AlexDaniel> Zoffix: pretty sure the eof check is done by libuv there?

[20:51] <AlexDaniel> I could be wrong though

[20:51] <Zoffix> nah

[20:51] * Zoffix &

[20:54] <AlexDaniel> fwiw the module can be fixed by doing .lines on the slurp-ed file

[20:55] <AlexDaniel> which makes more sense actually, but I'm still interested to know rakudo works the way it does now

[20:55] <AlexDaniel> why*

[20:57] *** MasterDuke joined
[20:59] *** Rawriful joined
[21:12] <Zoffix> Going by memory, it tries to seek to figure out it a handle is seekable (for ttys ot just marks them as non-seekable) and when reading from a handle if read size is smaller then requested, for seekable handles it checks if tell() is more or equal to the filesize from stat call and marks it as EOF and for non-seekable handles it waits until read chunk was 0 before marking them (hence why extra read call might

[21:12] <Zoffix> be meeded)

[21:13] <Zoffix> And I'm guessing .read also doesn't work on the /proc/ stuff, 'cause that wasn't affected by my commit and still goes through the same moarvm read function

[21:14] *** bisectable6 left
[21:14] *** bisectable6 joined
[21:14] *** ChanServ sets mode: +v bisectable6

[21:15] *** pharv left
[21:16] *** pharv joined
[21:17] *** |oLa| joined
[21:17] *** |oLa| left
[21:17] *** skids left
[21:21] *** headcase_ left
[21:22] <Zoffix> weird that .lines works, considering it looks to be delegating to .get

[21:23] <AlexDaniel> Zoffix: are you sure? According to my experiments .lines didn't work

[21:25] <Zoffix> AlexDaniel: oh you said lines on a *slurped* file

[21:26] *** Kaiepi joined
[21:27] <Zoffix> yeah, makes sense that it'd work; it reads until it gets a zero-length read

[21:38] *** comborico1611 joined
[21:46] *** eliasr left
[21:55] *** dogbert17 joined
[22:01] *** pharv left
[22:01] *** pharv joined
[22:08] *** greppable6 left
[22:08] *** greppable6 joined
[22:10] *** natrys left
[22:11] *** rindolf left
[22:20] *** yqt left
[22:21] *** sno joined
[22:23] *** grondilu left
[22:29] *** japhb left
[22:37] *** espadrine joined
[22:49] *** pmurias left
[22:50] *** vcv joined
[22:51] <vcv> Hi all.  If I am iterating over an object's methods using $object.^methods -> $method { ... }  how can i actually invoke the method? Just doing $method() gives me: Cannot invoke this object (REPR: Null; VMNull)

[22:51] *** japhb joined
[22:53] <Zoffix> hm

[22:54] <AlexDaniel> m: for 25.^methods { if .name eq ‘base’ { .assuming(2)(2).say } }

[22:54] <camelia> rakudo-moar beaad7b97: OUTPUT: «10␤»

[22:54] <AlexDaniel> I actually don't know

[22:54] <Zoffix> m: class Foo { method meow { say "meow" } }; for Foo.^methods { .name.say; .(Foo) }

[22:54] <camelia> rakudo-moar beaad7b97: OUTPUT: «meow␤meow␤»

[22:54] <AlexDaniel> ahhh

[22:54] <Zoffix> vcv: seems to work above. What's your full code?

[22:54] <AlexDaniel> m: for Int.^methods { if .name eq ‘base’ { .(25, 2).say } }

[22:54] <camelia> rakudo-moar beaad7b97: OUTPUT: «11001␤»

[22:54] <AlexDaniel> right!

[22:56] <vcv> I'm actually storing the reference to the method and trying to invoke it later.  Let me try to do an isolated test case

[22:58] <Zoffix> m: BEGIN my $meth := Int.^lookup: "base"; $meth.(42, 2).say # in some cases like this you'd get a null (can't bind here in BEGIN)

[22:58] <camelia> rakudo-moar beaad7b97: OUTPUT: «Cannot invoke this object (REPR: Null; VMNull)␤  in block <unit> at <tmp> line 1␤␤»

[22:58] <Zoffix> m: BEGIN my $meth = Int.^lookup: "base"; $meth.(42, 2).say # this works tho

[22:58] <camelia> rakudo-moar beaad7b97: OUTPUT: «101010␤»

[23:02] <Zoffix> vcv: you said "Just doing $method()"... Note that that won't work. You need to give it the object as first arg. Though, in such a case you'd get an error says "expected 1 arg but got 0", not the Null thing

[23:02] <Zoffix> m: BEGIN my $meth = Int.^lookup: "base"; $meth().say

[23:02] <camelia> rakudo-moar beaad7b97: OUTPUT: «Too few positionals passed; expected at least 1 arguments but got only 0␤  in block <unit> at <tmp> line 1␤␤»

[23:02] <Zoffix> m: BEGIN my $meth = Int.^lookup: "base"; $meth(42).say

[23:02] <camelia> rakudo-moar beaad7b97: OUTPUT: «Cannot resolve caller base(Int: ); none of these signatures match:␤    (Int:D $: Int:D $base, *%_)␤    (Int:D $: Cool $base, $digits?, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[23:03] <Zoffix> "At least 1 arguments"? I guess it can't tell what candidates there are or something?

[23:03] <Zoffix> Ah, doh, it needs an object to resolve on :)

[23:03] <Zoffix> m: BEGIN my $meth = Int.^lookup: "base"; $meth("meow").say

[23:03] <vcv> yes i ran into that.  I think I may have figured it out.  I don't think you can have a method named MAIN in a class

[23:03] <camelia> rakudo-moar beaad7b97: OUTPUT: «Type check failed in binding to parameter '<anon>'; expected Int but got Str ("meow")␤  in block <unit> at <tmp> line 1␤␤»

[23:04] <Zoffix> m: my $meth = class Foo { method MAIN {say "meow"} }; $meth(Foo)

[23:04] <camelia> rakudo-moar beaad7b97: OUTPUT: «Cannot find method 'Foo' on object of type Foo␤  in block <unit> at <tmp> line 1␤␤»

[23:04] <Zoffix> m: my $meth = class Foo { method MAIN {say "meow"} }.^lookup: "MAIN"; $meth(Foo)

[23:04] <camelia> rakudo-moar beaad7b97: OUTPUT: «meow␤»

[23:05] <Zoffix> vcv: it works above. Though `MAIN` is a special sub name. Maybe there's some kind of conflict or something? Would be nice to know what causes it.

[23:05] *** wamba joined
[23:05] <vcv> still trying to ferret out a simple test case from my more complex test case

[23:08] *** pmurias joined
[23:09] <vcv> oooh. the method im trying to invoke has a custom trait on it, not sure if that matters

[23:10] <vcv> when i do say $method.WHAT it prints "(Method+{Wrapped})"

[23:11] <Zoffix> m: class Foo { method MAIN {say "meow"} }; Foo.^lookup("MAIN").wrap: -> | { say "wrap"; nextsame }; my $meth = Foo.^lookup("MAIN"); $meth(Foo)

[23:11] <camelia> rakudo-moar beaad7b97: OUTPUT: «wrap␤Attempt to return outside of any Routine␤  in block <unit> at <tmp> line 1␤␤meow␤»

[23:11] <Zoffix> m: class Foo { method MAIN {say "meow"} }; Foo.^lookup("MAIN").wrap: sub (|) { say "wrap"; nextsame }; my $meth = Foo.^lookup("MAIN"); $meth(Foo)

[23:11] <camelia> rakudo-moar beaad7b97: OUTPUT: «wrap␤meow␤»

[23:11] <Zoffix> m: class Foo { method MAIN {say "meow"} }; my $meth = Foo.^lookup("MAIN"); Foo.^lookup("MAIN").wrap: sub (|) { say "wrap"; nextsame }; $meth(Foo)

[23:11] <camelia> rakudo-moar beaad7b97: OUTPUT: «wrap␤meow␤»

[23:11] <Zoffix> m: class Foo { method MAIN {say "meow"} }; my $meth = Foo.^lookup("MAIN"); Foo.^lookup("MAIN").wrap: sub (|) { say "wrap"; nextsame }; $meth.WHAT.say

[23:11] <camelia> rakudo-moar beaad7b97: OUTPUT: «(Method+{Wrapped})␤»

[23:12] <Zoffix> *shrug* works OK above. So at least the wrap isn't it

[23:13] <jnthn> vcv: I assume you are calling $method($an-invocant), not just $method() ?

[23:14] *** japhb left
[23:15] *** aindilis left
[23:15] *** aindilis` joined
[23:16] *** japhb joined
[23:17] <vcv> jnthn: yes

[23:17] <vcv> I just put all my code into glot.io and it works there so it must be my version of perl6.  may be im too out of date

[23:17] * vcv facepalms

[23:18] <vcv> thanks for the help, i did learn a few things

[23:18] <Zoffix> vcv: glot.io got v2017.10... What's your version?

[23:18] <Zoffix> perl6 -v

[23:19] <vcv> This is Rakudo Star version 2017.10 built on MoarVM version 2017.10 implementing Perl 6.c.

[23:19] <Zoffix> hm.. same as glot. weird.

[23:19] <vcv> Indeed

[23:19] <Zoffix> vcv: if you get some golf you could share, you could open an Issue so core devs could try to reproduce the problem: https://github.com/rakudo/rakudo/issues/new

[23:20] <Zoffix> golf = small program that reproduces the problem

[23:20] <vcv> will do, thanks :)

[23:26] *** comborico1611 left
[23:28] *** setty1 left
[23:31] *** pmurias left
[23:47] *** Rawriful left
