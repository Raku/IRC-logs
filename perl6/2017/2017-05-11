[00:00] *** mcmillhj_ joined
[00:00] <timotimo> hm, it could be that's from the innards of NativeCall actually

[00:02] <krshn> does not seem to be particular to Math::Primesieve

[00:02] <timotimo> can you run rakudo's nativecall tests for me? they're in the rakudo star source folder under t/nativecall, should be

[00:02] <krshn> Tried installing ABC

[00:02] <krshn> https://gist.github.com/skrisna/1872530985fec5c48faca1c890d8accf

[00:03] <timotimo> that's a different explosion, hmm.

[00:04] <krshn> Don't see it

[00:04] <krshn> https://gist.github.com/skrisna/db58ca49d5f7277a968678e597a5d527

[00:04] *** mcmillhj_ left
[00:04] <timotimo> well, with the primesieve the tests explode, but with ABC it fails to fetch the git repo

[00:04] <timotimo> oh

[00:04] <timotimo> don't see *that*

[00:05] <timotimo> is there a t folder in there at all?

[00:05] <krshn> No

[00:05] <timotimo> what kind of stuff is in there?

[00:05] <timotimo> oh, wait, the rakudo star for mac is precompiled and probably doesn't come with source at all

[00:06] <krshn> https://gist.github.com/skrisna/675382b75a1242508eba213a4f6a6255

[00:06] <timotimo> ah, yeah, no sources at all

[00:08] <krshn> I need to leave now. But I will follow-up later tonight

[00:08] <timotimo> i'm going to bed soon, though

[00:09] <BenGoldberg> I've got a silly question:

[00:09] <BenGoldberg> m: 42.^add_method( 'woot', sub (Int) { say 'ok' } ); 42.woot;

[00:09] <camelia> rakudo-moar 6409ee: OUTPUT: «ok␤»

[00:09] *** cpage_ joined
[00:10] <BenGoldberg> Will it always be ok to use an ordinary 'sub' there?

[00:10] *** poohman left
[00:10] <BenGoldberg> Or will things ever change such that add_method's second argument must be of type Method?

[00:11] *** poohman joined
[00:12] *** krshn left
[00:13] *** sufrostico joined
[00:19] *** Actualeyes left
[00:22] *** Cabanossi left
[00:23] *** poohman left
[00:24] *** Cabanossi joined
[00:28] *** poohman joined
[00:30] *** Guest61242 left
[00:32] *** gfldex left
[00:38] *** lookatme joined
[00:39] *** pierre_ joined
[00:40] *** colomon_ joined
[00:41] *** colomon left
[00:41] *** colomon_ is now known as colomon

[00:43] <lookatme> morning o/..

[00:53] *** kurahaupo_ left
[01:00] *** dolmen joined
[01:01] *** Actualeyes joined
[01:06] *** pb122 joined
[01:06] *** lookatme left
[01:15] *** khw left
[01:22] *** Cabanossi left
[01:24] <BenGoldberg> m: my class Foo { }; my class Bar hides Foo { }; say Metamodel::Primitives.rebless(Foo.new, Bar);

[01:24] <camelia> rakudo-moar 6409ee: OUTPUT: «Bar.new␤»

[01:25] *** dolmen left
[01:25] *** zapwai joined
[01:25] * BenGoldberg has just discovered that perl6 *does* have something like perl5's bless ^

[01:27] *** yqt left
[01:27] *** lookatme joined
[01:29] *** khw joined
[01:33] *** japhdc joined
[01:35] *** poohman_ joined
[01:37] *** poohman__ joined
[01:37] *** poohman left
[01:38] *** Cabanossi joined
[01:38] *** japhdc left
[01:40] *** poohman_ left
[01:43] *** astj_ joined
[01:45] *** ilbot3 left
[01:45] *** perlawhirl joined
[01:47] *** astj left
[01:47] *** itaipu joined
[01:50] *** ilbot3 joined
[01:50] *** ChanServ sets mode: +v ilbot3

[01:58] *** poohman__ left
[02:00] *** lookatme left
[02:00] *** mcmillhj_ joined
[02:01] *** poohman joined
[02:02] *** JAP6H joined
[02:04] *** mcmillhj_ left
[02:07] *** JAP6H left
[02:27] *** poohman left
[02:28] *** lookatme joined
[02:33] *** ryan___ joined
[02:38] *** ryan___ left
[02:38] *** ryan_____ joined
[02:38] *** poohman joined
[02:44] <BenGoldberg> m: sub foo(-->"x") {}; sub bar(Int) { }; bar(foo) if False;

[02:44] <camelia> rakudo-moar 6409ee: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling bar(Str) will never work with declared signature (Int)␤at <tmp>:1␤------> 3sub foo(-->"x") {}; sub bar(Int) { }; 7⏏5bar(foo) if False;␤»

[02:44] <BenGoldberg> m: sub foo(-->Int) {"x"}; sub bar(Int) { }; bar(foo) if False;

[02:44] <camelia> rakudo-moar 6409ee: ( no output )

[02:46] *** itaipu left
[02:50] *** ryan_____ left
[02:53] *** Cabanossi left
[02:53] *** Cabanossi joined
[02:56] *** mcmillhj_ joined
[02:58] *** lookatme left
[02:59] *** lookatme joined
[03:01] *** TEttinger left
[03:01] *** TEttinger joined
[03:01] *** mcmillhj joined
[03:02] *** mcmillhj_ left
[03:07] *** poohman_ joined
[03:08] *** aborazmeh joined
[03:08] *** aborazmeh left
[03:08] *** aborazmeh joined
[03:09] *** poohman left
[03:13] *** aborazmeh left
[03:14] *** mcmillhj_ joined
[03:19] *** mcmillhj_ left
[03:20] *** aborazmeh joined
[03:20] *** aborazmeh left
[03:20] *** aborazmeh joined
[03:20] *** pierre_ left
[03:22] *** BenGoldberg left
[03:26] *** mcmillhj_ joined
[03:29] *** cpage_ left
[03:30] *** pierre_ joined
[03:30] *** mcmillhj_ left
[03:31] *** cpage_ joined
[03:34] *** sivoais left
[03:36] *** Cabanossi left
[03:36] <grondilu>  /j lichess

[03:36] <grondilu> oops

[03:36] *** zapwai left
[03:37] <lookatme> o?

[03:37] *** Cabanossi joined
[03:41] *** mcmillhj_ joined
[03:41] <geekosaur> spot the irssi user >.>

[03:42] *** mcmillhj1 joined
[03:45] <grondilu> well, I'm sure there are plenty other IRC client that use that syntax

[03:45] <grondilu> though I am indeed using irssi

[03:45] *** cpage_ left
[03:45] *** khw left
[03:46] *** mcmillhj1 left
[03:51] *** ramortegui joined
[03:51] *** gfldex joined
[04:01] <TEttinger> Floe has /j work as well

[04:03] <grondilu> I'm not sure but I think that syntax is part of the IRC protocol itself

[04:03] *** aborazmeh left
[04:04] *** aborazmeh joined
[04:04] *** aborazmeh left
[04:04] *** aborazmeh joined
[04:05] *** cpage_ joined
[04:06] *** khw joined
[04:08] *** cpage_ left
[04:09] *** cpage_ joined
[04:10] *** mcmillhj1 joined
[04:13] *** cpage_ left
[04:14] *** kyan left
[04:14] *** cpage_ joined
[04:15] *** mcmillhj1 left
[04:19] *** cpage_ left
[04:25] *** wamba joined
[04:27] <geekosaur> not actually, no

[04:28] <geekosaur> well, let me qualify that a bit. there is an access control feature to tell the server you want access to something, and it grants or denies it and if it is granted you start receiving things related to it

[04:29] <geekosaur> but /join is also *in clients* related to what you are seeing at the moment, and that level is not covered by protocol; every IRC message in either direction is tagged with the sender/recipient

[04:29] <geekosaur> so it operates on two levels. also the IRC wire protocol differs in a number of respects from the one clients give you

[04:30] <geekosaur> as to the command itself, I can use / but also have GUI-ish ways to do it

[04:30] <geekosaur> er I can use /j

[04:30] <geekosaur> irssi's just the most common client where /j is the primary user interface to it :)

[04:32] *** NeuralAnomaly_ left
[04:34] *** sammers left
[04:36] *** aborazmeh left
[04:36] *** Cabanossi left
[04:37] *** krshn joined
[04:37] *** Cabanossi joined
[04:43] *** curan joined
[04:48] *** ramortegui left
[04:48] *** khw left
[04:49] *** mcmillhj1 joined
[04:50] *** pierre_ left
[04:53] *** mcmillhj1 left
[05:01] *** cpage_ joined
[05:02] *** cpage_ left
[05:02] *** cpage_ joined
[05:03] *** cpage_ left
[05:03] *** cpage_ joined
[05:08] *** mcsnolte left
[05:15] *** Actualeyes left
[05:25] *** CIAvash joined
[05:26] *** nadim_ joined
[05:30] *** sivoais joined
[05:31] *** sivoais left
[05:31] *** sivoais joined
[05:39] *** Actualeyes joined
[05:40] *** anton_p joined
[05:40] *** mcmillhj1 joined
[05:42] *** wamba left
[05:45] *** mcmillhj1 left
[05:46] *** domidumont joined
[05:49] *** lowbro joined
[05:49] *** lowbro left
[05:49] *** lowbro joined
[05:51] *** pierre_ joined
[05:51] *** domidumont left
[05:52] *** domidumont joined
[05:52] *** skids left
[05:55] *** pierre_ left
[05:57] *** pierre_ joined
[06:02] *** xtreak joined
[06:06] *** nadim_ left
[06:09] *** xtreak left
[06:10] *** mcmillhj1 joined
[06:15] *** mcmillhj1 left
[06:23] *** mcmillhj1 joined
[06:25] *** wamba joined
[06:27] *** mcmillhj1 left
[06:33] *** xtreak joined
[06:46] *** lizmat left
[06:50] *** Cabanossi left
[06:52] *** Cabanossi joined
[06:54] *** pierre_ left
[06:57] *** pierre_ joined
[06:58] *** rubystallion joined
[07:02] <rubystallion> I find it often hard to work with lazy sequences. Is there a way to turn lazyness off at first so I can get my script running correctly and then turn it on again?

[07:04] <rubystallion> Also is there an elegant way to non-destructively return an array except at index $i? I currently first copy the array and then splice the new array.

[07:06] *** lizmat joined
[07:15] <lookatme> What'

[07:15] <lookatme> What's wrong with lazy sequence ?

[07:20] *** Cabanossi left
[07:20] *** mcmillhj1 joined
[07:21] <rubystallion> lookatme: lazy sequences can only iterate once, so when I accidentally access a sequence twice, I will get runtime errors

[07:22] *** Cabanossi joined
[07:23] *** japhdc joined
[07:25] *** mcmillhj1 left
[07:28] *** z448 joined
[07:29] <lookatme> rubystallion, How about a lazy List/Array ?

[07:32] *** z448 left
[07:35] *** zakharyas joined
[07:36] *** mcmillhj1 joined
[07:36] <rubystallion> lookatme: I basically want to avoid sequences. I don't need laziness, I'm just looping through file lines or using gather/take, which creates lazy sequences

[07:41] *** mcmillhj1 left
[07:41] <lookatme> rubystallion, But using gather/take will not create a lazy sequence if you don't add lazy 

[07:51] <tyil> if I have a multi sub, one with (Str $option, Any $value) and one with (Str $option, Bool $value), will it always use the second one when given a Bool?

[07:51] *** mcmillhj1 joined
[07:52] <lookatme> Yeah, I think 

[07:52] <lookatme> so

[07:53] <lizmat> that's the idea

[07:53] <lookatme> m: multi sub f(Any) { }; multi sub f(Bool $v) { "CALLME".say; }; f(1.so); f(True);

[07:53] <camelia> rakudo-moar 6409ee: OUTPUT: «CALLME␤CALLME␤»

[07:54] *** wamba left
[07:55] <lookatme> Just like you thought, it will use the best match version

[07:55] <tyil> neat, thanks :D

[07:55] *** mcmillhj1 left
[07:55] <tyil> I wasnt sure if it was pure coincidence in my code, or intentional behaviour :p

[08:02] *** aindilis joined
[08:02] <lookatme> tyil, Em, please check out this https://docs.perl6.org/language/glossary#index-entry-Multi-Dispatch

[08:03] *** rindolf joined
[08:04] <tyil> will do

[08:05] *** mcmillhj1 joined
[08:10] *** mcmillhj1 left
[08:24] *** wamba joined
[08:25] *** mcmillhj1 joined
[08:25] *** japhdc left
[08:29] *** AndyDee joined
[08:30] *** Dee22 joined
[08:30] *** AndyDee left
[08:30] *** mcmillhj1 left
[08:30] *** eyck joined
[08:30] *** xtreak left
[08:30] *** chee left
[08:31] *** xtreak joined
[08:31] *** Dee22 left
[08:31] *** Dee22 joined
[08:32] *** chee joined
[08:32] *** xtreak left
[08:33] *** xtreak joined
[08:33] *** Dee22 left
[08:33] *** Dee22 joined
[08:36] *** Cabanossi left
[08:37] *** xtreak left
[08:37] *** Cabanossi joined
[08:38] *** xtreak joined
[08:40] *** mcmillhj1 joined
[08:43] *** darutoko joined
[08:44] *** mcmillhj1 left
[08:45] *** CIAvash left
[08:48] *** poohman_ left
[08:48] *** rurban joined
[08:49] *** rurban left
[08:50] *** jsimonet left
[08:53] *** poohman joined
[08:54] *** jsimonet joined
[09:15] *** krshn left
[09:15] *** gregf_ joined
[09:21] *** Cabanossi left
[09:22] *** Cabanossi joined
[09:31] *** TEttinger left
[09:34] *** lookatme left
[09:45] *** xtreak left
[09:46] *** xtreak joined
[09:47] *** xtreak left
[09:47] *** darutoko left
[09:47] *** xtreak joined
[09:50] *** noganex joined
[09:52] *** xtreak left
[09:56] *** rubystallion left
[09:57] *** xtreak joined
[10:01] *** japhdc joined
[10:03] *** lowbro left
[10:05] *** Zoffix joined
[10:05] *** astj_ left
[10:06] *** astj joined
[10:07] *** astj left
[10:07] *** astj joined
[10:08] <Zoffix> Well, no one bothered to mention it to rubystallion before they left, but... Just call .cache on your Seq, it'll make it cache it. Many other things cache them, like using indices $seq[42] caches it. I think the issue was the one-shot nature of seqs, not actually their laziness, but if you want to reify everything on stuff just call .elems

[10:10] <Zoffix> m: my @a = ^10; say @a[^Inf .grep: none 3]

[10:10] <camelia> rakudo-moar acb657: OUTPUT: «(0 1 2 4 5 6 7 8 9)␤»

[10:11] <Zoffix> And this is one way to non-destructively splice out an el from array. Basically giving it a lazy inf list of indices (so it stops when it reaches end of list) with a none junction that excludes the index you don't want

[10:12] <Zoffix> m: my @a = ^10; say @a[flat ^3, 4..*]

[10:12] <Zoffix> boo

[10:13] <camelia> rakudo-moar acb657: OUTPUT: «(timeout)»

[10:13] <Zoffix> Well, that would've been another but I don't think flat preserves laziness when called in this way

[10:13] <Zoffix> m: my @a = ^10; say @a[|^3, |(4..*)]

[10:13] <camelia> rakudo-moar acb657: OUTPUT: «(0 1 2 4 5 6 7 8 9)␤»

[10:13] <Zoffix> m: my @a = ^10; say @a[0, 1, 2, 4, 5, 6, 7, 8, 9]

[10:13] <camelia> rakudo-moar acb657: OUTPUT: «(0 1 2 4 5 6 7 8 9)␤»

[10:13] *** Zoffix left
[10:15] *** AndyDee joined
[10:16] *** japhdotcom joined
[10:17] *** xtreak left
[10:17] *** Dee22 left
[10:18] *** xtreak joined
[10:18] *** japhdc left
[10:18] *** xtreak left
[10:18] *** xtreak joined
[10:23] *** xtreak left
[10:29] *** itaipu joined
[10:33] *** robertle joined
[10:34] *** pierre_ left
[10:35] *** lowbro joined
[10:35] *** lowbro left
[10:35] *** lowbro joined
[10:35] *** pierre_ joined
[10:37] *** robertle_ left
[10:37] *** mcmillhj1 joined
[10:37] *** astj left
[10:38] *** astj joined
[10:39] *** xtreak joined
[10:40] *** robertle_ joined
[10:41] *** mcmillhj1 left
[10:42] *** robertle left
[10:44] *** wamba left
[10:51] *** mcmillhj1 joined
[10:56] *** mcmillhj1 left
[10:56] *** pierre_ left
[10:59] *** itaipu left
[10:59] *** japhdotcom left
[11:03] *** zostay left
[11:03] *** zostay joined
[11:07] *** u-ou left
[11:13] *** mcmillhj1 joined
[11:17] *** mcmillhj1 left
[11:29] *** u-ou joined
[11:33] *** astj left
[11:33] *** mcmillhj1 joined
[11:34] *** Cabanossi left
[11:36] *** astj joined
[11:37] *** mcmillhj1 left
[11:37] *** Cabanossi joined
[11:39] *** xtreak left
[11:41] *** rurban joined
[11:46] *** xtreak joined
[11:46] *** wamba joined
[11:49] *** astj left
[11:50] *** xtreak left
[11:55] *** xtreak joined
[11:57] *** astj joined
[12:00] *** mcmillhj1 joined
[12:04] *** xtreak left
[12:05] *** xtreak joined
[12:05] *** mcmillhj1 left
[12:08] *** astj left
[12:13] *** mcmillhj1 joined
[12:17] *** astj joined
[12:18] *** mcmillhj1 left
[12:18] *** pierre_ joined
[12:20] *** astj left
[12:21] *** Cabanossi left
[12:22] *** Cabanossi joined
[12:23] *** kyan joined
[12:30] *** astj joined
[12:37] *** raschipi joined
[12:46] <[Coke]> unsurprised to see perlmonks still full of vitriol about six.

[12:46] <raschipi> m: my @foo is default (NaN); @foo[1;4;3;6;8;7] = "batman"; say @foo.perl

[12:46] <camelia> rakudo-moar b92220: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Signatures as constraints on variables not yet implemented. Sorry. ␤at <tmp>:1␤------> 3my @foo is default (NaN)7⏏5; @foo[1;4;3;6;8;7] = "batman"; say @foo␤»

[12:46] <raschipi> m: my @foo is default(NaN); @foo[1;4;3;6;8;7] = "batman"; say @foo.perl

[12:46] <camelia> rakudo-moar b92220: OUTPUT: «Index out of range. Is: 4, should be in 0..0␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[12:47] <raschipi> m: my @foo;@foo[1;4;3;6;8;7] = "batman"; say @foo.perl

[12:47] <camelia> rakudo-moar b92220: OUTPUT: «[Any, [Any, Any, Any, Any, [Any, Any, Any, [Any, Any, Any, Any, Any, Any, [Any, Any, Any, Any, Any, Any, Any, Any, [Any, Any, Any, Any, Any, Any, Any, "batman"]]]]]]␤»

[12:48] <raschipi> How can I set a default and then have P6 autovivify values?

[12:49] <jnthn> You can't, because the auto-vivification is done via. multi-dispatch on a type object

[12:49] *** wamba left
[12:49] <raschipi> So, no Nanana batman jokes, got it.

[12:50] <timotimo> [Coke]: who poked the hornet's nest this time? :)

[12:50] *** mcmillhj1 joined
[12:50] <[Coke]> http://www.perlmonks.org/index.pl?node_id=1189896

[12:51] <jnthn> m: my @foo[1;4;3;8] is default(NaN); @foo[0;3;2;7] = 'batman'; say @foo;

[12:51] <camelia> rakudo-moar b92220: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤is default on shaped Array not yet implemented. Sorry. ␤at <tmp>:1␤------> 3my @foo[1;4;3;8] is default(NaN)7⏏5; @foo[0;3;2;7] = 'batman'; say @foo;␤    expecting any of:␤        constraint␤»

[12:51] <jnthn> aww

[12:57] *** yqt joined
[13:06] *** rurban left
[13:12] *** wamba joined
[13:13] *** matiaslina joined
[13:15] *** rurban joined
[13:16] *** Zoffix joined
[13:17] *** mcmillhj1 left
[13:17] <Zoffix> So someone quoted me again? :) Sheesh, I should start charging for it.

[13:17] <timotimo> it's almost as if saying something on the internet has to mean something

[13:18] <Zoffix> .tell stmuk_ the blue news bar on perl6.org should probably be updated to latest Rakudo Star news

[13:18] <yoleaux> Zoffix: I'll pass your message to stmuk_.

[13:18] *** mcmillhj1 joined
[13:20] <MasterDuke_> the OP was pretty negative, but the rest of the posts weren't 

[13:21] <raschipi> I liked the timeline with the comparisson between Perl5 and Perl6.

[13:21] <Zoffix> Yeah, I won't even bother replying to them. What's the winge even? A large software project isn't magically bugless and uber optimized? :)

[13:22] *** skids joined
[13:22] <raschipi> Yep, saying a new software project is new shouldn't surprise anyone.

[13:23] <timotimo> i think most people still object to us calling perl6 "new"

[13:26] <Zoffix> FWIW, I think among core devs I'm the most pessimistic about Perl 6's stability yet at this very moment I'm writing web app code I plan to use in money-making production stuff to replace a Perl 5 app that has 123365 lines of code

[13:27] <Zoffix> ZofBot: haters gonna hate.

[13:27] <stmuk_> "hard things are hard and take a long time for mostly volunteer projects"

[13:27] <yoleaux> 13:18Z <Zoffix> stmuk_: the blue news bar on perl6.org should probably be updated to latest Rakudo Star news

[13:28] *** cygx joined
[13:28] <cygx> o/

[13:28] <Zoffix> \o

[13:28] <cygx> my problem: I need to bundle some files with a module with relative paths that must not change

[13:29] <cygx> can Rakudo and/or zef help me with that?

[13:29] <Zoffix> cygx: and %?RESOURCES isn't good due to changing paths?

[13:30] <cygx> exactly

[13:30] <Zoffix> No idea :/

[13:30] <Zoffix> Why do relative paths must not change?

[13:30] *** rurban left
[13:31] <cygx> I want to bundle libtcc.dll for the revived version of my TinyCC module, including its include directory

[13:32] <cygx> it's kins of a problem if I end up with a flat resource direcroty full of files named <CHECKSUM>.h

[13:32] <cygx> *kind

[13:38] <timotimo> oh but some developers are paid!

[13:39] *** jonas1 left
[13:40] *** curan left
[13:40] *** wamba left
[13:46] <jnthn> cygx: I ended up doing a hack like this: https://github.com/jnthn/p6-ssh-libssh/blob/master/lib/SSH/LibSSH/Raw.pm6#L22

[13:47] <daxim> remember when rakudo took half a minute to tally the words in a 30 kilobyte text file?  http://stackoverflow.com/a/3136410/46395

[13:49] <cygx> jnthn: that's one possibility

[13:49] <cygx> alternatively, I misht just stick the stuff into $*VM.config<prefix> (at least on win32)

[13:50] *** ufobat joined
[13:50] *** khw joined
[13:51] <Zoffix> daxim: not read all the text there, but I see the user was using `say [+] 1..100000` as a measure and that's terribly flawed because that (now) just calls .sum on Range object. You could do `say [+] 1..99999999999999999999999999999999999999999999999999999999999999999999` and Perl 6 will give you an answer almost instantly while other langs (like Perl 5) will crash with out of memory

[13:52] <raschipi> m: say [+] 1..99999999999999999999999999999999999999999999999999999999999999999999

[13:52] <camelia> rakudo-moar 87a95f: OUTPUT: «4999999999999999999999999999999999999999999999999999999999999999999950000000000000000000000000000000000000000000000000000000000000000000␤»

[13:57] <raschipi> That's just for ranges or can it do it for sequences too?

[13:59] *** u-ou left
[14:01] <Zoffix> raschipi: just ranges

[14:01] <Zoffix> m: say sum {rand} ... * > .5

[14:01] <camelia> rakudo-moar 87a95f: OUTPUT: «1.12044888125413␤»

[14:01] <Zoffix> m: say sum {rand} ... * > .5

[14:01] <camelia> rakudo-moar 87a95f: OUTPUT: «0.961826126359131␤»

[14:01] <Zoffix> (not all sequences are predictable)

[14:03] <raschipi> When P6 builds arithmetic or geometric series, does it record they were built that way?

[14:04] <moritz> depends on what you mean by "records"

[14:04] <moritz> it's part of the internal state of the series

[14:07] <raschipi> Is there a way to retrieve that information? I'm thinking of a module that automatically gets the sequence from the series if possible.

[14:07] <raschipi> ops, other way around, get's the series from the sequence.

[14:08] <jnthn> It's not reachable from the outside, afaik.

[14:08] <jnthn> otoh, you could override the ... operator :-)

[14:08] <jnthn> And export the overload from your module

[14:08] <jnthn> Then at least you'd have the original sequence values to work with

[14:08] *** u-ou joined
[14:09] <jnthn> (Though would have to re-do the inference logic yourself then...)

[14:09] *** krshn joined
[14:10] <raschipi> It could also sum infinite series when possible then.

[14:10] <timotimo> perhaps it'd be enough to wrap infix:<...>

[14:10] <timotimo> that's "nice" and manipulative

[14:10] <timotimo> program-wide, i mean

[14:11] <krshn> hi

[14:12] <raschipi> oi

[14:12] <krshn> timotimo: did you get a chance to look at the zef issue from yesterday?

[14:13] <timotimo> sorry, i didn't

[14:14] <Zoffix> Well, I ended up repsonding to that monger thread: http://www.perlmonks.org/index.pl?node_id=1190064

[14:14] <Zoffix> Mostly 'cause I see it's in the thread about moritz++'s book :)

[14:15] *** lizmat left
[14:16] <timotimo> good reply

[14:18] <Geth> ¦ perl6.org: cf164c0059 | (Zoffix Znet)++ (committed using GitHub Web editor) | source/index.html

[14:18] <Geth> ¦ perl6.org: Update news

[14:18] <Geth> ¦ perl6.org: 

[14:18] <Geth> ¦ perl6.org: - The April changes are now in the past

[14:18] <Geth> ¦ perl6.org: - We got new Star; put it in the news

[14:18] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/cf164c0059

[14:18] *** rurban joined
[14:20] *** Actualeyes left
[14:21] *** k-man left
[14:22] <moritz> aye, upvoted

[14:23] <Geth> ¦ ecosystem: CurtTilmes++ created pull request #339: Add LibCurl to ecosystem

[14:23] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/339

[14:26] *** lizmat joined
[14:26] *** poohman left
[14:27] *** cdg joined
[14:27] *** Zoffix left
[14:27] *** k-man joined
[14:27] <Geth> ¦ ecosystem: b72e4e8d79 | (Curt Tilmes)++ | META.list

[14:27] <Geth> ¦ ecosystem: Add LibCurl to ecosystem

[14:27] <Geth> ¦ ecosystem: 

[14:27] <Geth> ¦ ecosystem: See https://github.com/CurtTilmes/perl6-libcurl

[14:27] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/b72e4e8d79

[14:27] <Geth> ¦ ecosystem: 77e254863f | (Curt Tilmes)++ (committed using GitHub Web editor) | META.list

[14:27] <Geth> ¦ ecosystem: Merge pull request #339 from CurtTilmes/master

[14:27] <Geth> ¦ ecosystem: 

[14:27] <Geth> ¦ ecosystem: Add LibCurl to ecosystem

[14:27] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/77e254863f

[14:28] *** kentnl left
[14:29] *** lowbro left
[14:30] *** kent\n joined
[14:30] <curt_> LibCurl is a significantly different approach to libcurl from Net::Curl already released -- please check it out!

[14:31] <moritz> provided by LibCurt? :-)

[14:31] <curt_> :)

[14:31] <curt_> I'm really getting into NativeCall -- it is awesome!

[14:32] <raschipi> And it's not even finished yet.

[14:32] *** kurahaupo_ joined
[14:34] *** Actualeyes joined
[14:34] *** wamba joined
[14:35] *** Cabanossi left
[14:37] *** Cabanossi joined
[14:37] *** itaipu joined
[14:40] *** kurahaupo_ left
[14:45] *** alimon joined
[14:47] *** mcmillhj left
[14:48] *** mcmillhj1 is now known as mcmillhj

[14:53] *** domidumont left
[14:58] <raiph> m: module Foo { enum Mode is export < album auto ... >; sub bar ( Mode $mode ) is export { } }; import Foo; bar album; bar not-gonna-work

[14:58] <camelia> rakudo-moar 87a95f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    not-gonna-work used at line 1␤␤»

[14:58] <Geth> ¦ perl6.org: 29fee590b3 | (Zoffix Znet)++ (committed using GitHub Web editor) | fetch-recent-blog-posts.pl

[14:58] <Geth> ¦ perl6.org: Update blog fetcher for latest Mojolicious

[14:58] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/29fee590b3

[15:00] <raiph> .tell tyil Just a fyi but you could make a Mode error a compile-time error (though with an arguably poorer message); see https://irclog.perlgeek.de/perl6/2017-05-11#i_14566571

[15:00] <yoleaux> raiph: I'll pass your message to tyil.

[15:03] *** krshn left
[15:04] *** itaipu left
[15:06] *** mcmillhj_ left
[15:08] *** mcmillhj_ joined
[15:09] *** xtreak left
[15:09] <Geth> ¦ ecosystem: 13a29c9a14 | (Curt Tilmes)++ | META.list

[15:09] <Geth> ¦ ecosystem: Add Redis::Async to ecosystem

[15:09] <Geth> ¦ ecosystem: 

[15:09] <Geth> ¦ ecosystem: See https://github.com/CurtTilmes/perl6-eredis

[15:09] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/13a29c9a14

[15:20] *** pierre_ left
[15:21] *** raiph left
[15:21] *** raiph joined
[15:28] *** sufrostico left
[15:33] *** peteretep joined
[15:42] <cygx> I've decided to just copy the files into wherever Rakudo is installed

[15:43] <cygx> after `zef install TinyCC::Resources::Win64`, using the packages compiler should be as easy as `perl6 -MTinyCC::Win64`

[15:43] <cygx> for people interested in the current state of affairs, the example code works: https://github.com/cygx/p6-tinycc/blob/master/example.p6

[15:49] *** stmuk_ left
[15:50] *** stmuk joined
[15:50] <timotimo> once we've got a pure-perl6 C compiler, some modules will become a bunch easier to distribute :)

[15:52] *** mcafee joined
[15:54] <zostay> how do you convert a Hash to a completely immutable Map, such that the values are immutable too?

[15:54] <zostay> it doesn't seem to be quite as straightforward as it is for Arrays to Lists

[15:54] <zostay> or i'm doing something dumb

[15:54] <cygx> bye o/

[15:54] *** cygx left
[15:55] <timotimo> m: my %foo = a => 10, b => 20, c => 30; my $map = %foo.Map; $map<a> = 99

[15:55] <camelia> rakudo-moar 788e6d: OUTPUT: «Cannot modify an immutable Int␤  in block <unit> at <tmp> line 1␤␤»

[15:55] <timotimo> zostay: are you assigning the map to a % variable?

[15:56] <zostay> m: my $one = 1; my %foo = a => $one; my %map := %foo.Map; %map<a> = 99;

[15:56] <camelia> rakudo-moar 788e6d: OUTPUT: «Cannot modify an immutable Int␤  in block <unit> at <tmp> line 1␤␤»

[15:59] <zostay> m: my $one = 1; Map.new('a', $one)<a> = 99;

[15:59] <camelia> rakudo-moar 788e6d: ( no output )

[15:59] <zostay> m: my $one = 1; say Map.new('a', $one)<a> = 99;

[15:59] <camelia> rakudo-moar 788e6d: OUTPUT: «99␤»

[15:59] <zostay> that's basically what i was trying, looks like .Map is better for my needs then

[15:59] <timotimo> seems so

[15:59] <zostay> well... maybe

[16:00] <zostay> we'll try it and see 

[16:03] *** raschipi left
[16:05] <mcafee> How does one convert a string into a regex?

[16:06] <zostay> m: my $s = 'string'; my $rx = rx/$s/;

[16:06] <timotimo> use <$the-string>

[16:06] <camelia> rakudo-moar 788e6d: ( no output )

[16:06] <timotimo> what zostay just wrote will only match the literal contents of the string

[16:07] <timotimo> m: my $s = 'abc.*'; my $rx = rx/<$s>/; say "hello abc foobar" ~~ $rx

[16:07] <camelia> rakudo-moar 788e6d: OUTPUT: «｢abc foobar｣␤»

[16:09] <mcafee> Nice, thanks!

[16:09] <lizmat> m: my %h = a => 42; my $m = %h.Map; dd $m; $m<a> = 42   # zostay: .Map should do the trick, really

[16:09] <camelia> rakudo-moar 788e6d: OUTPUT: «Map $m = Map.new((:a(42)))␤Cannot modify an immutable Int␤  in block <unit> at <tmp> line 1␤␤»

[16:09] <zostay> m: sub evil { say 'do evil' }; my $s = '{evil()}'; my $rx = rx/<$s>/; "adsf" ~~ $rx;

[16:09] <camelia> rakudo-moar 788e6d: OUTPUT: «5===SORRY!5=== Error while compiling /home/camelia/EVAL_0␤Prohibited regex interpolation (use the MONKEY-SEE-NO-EVAL pragma to override this error,␤but only if you're VERY sure your data contains no injection attacks)␤at /home/camelia/EVAL_0:1…»

[16:10] <mcafee> Is it possible to parse a string as a Perl 5 regex, as if using m:p5?  rx:p5 seems not to work.

[16:12] <mcafee> Actually neither does m:p5 now that I try it again.  I seem to remember it was possible somehow though...

[16:12] <timotimo> perhaps it has to be P5

[16:13] <mcafee> Aha, indeed, thanks.

[16:13] * timotimo AFK

[16:16] *** itaipu joined
[16:20] *** kaare_ left
[16:20] *** domidumont joined
[16:24] *** astj_ joined
[16:24] *** astj left
[16:29] <mcafee> Hmm, but that construct appears to just keep a reference to the string around, so map { rx/<$_>/ }, <a b c> just gives a list of three identical $_-referencing regexes, not three distinct ones.

[16:30] *** domidumont1 joined
[16:33] *** domidumont left
[16:36] *** lowbro joined
[16:36] *** lowbro left
[16:36] *** lowbro joined
[16:37] *** pat_js joined
[16:37] <zostay> the will each close the respective values of $_, though, so it should be doing what you mean

[16:37] *** kurahaupo__ joined
[16:37] <Geth> ¦ doc: fb29e049c3 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/IO/Path.pod6

[16:37] <Geth> ¦ doc: [io grant] Include exception used in IO::Path.resolve

[16:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fb29e049c3

[16:37] *** kurahaupo__ left
[16:39] *** kurahaupo_ joined
[16:39] <zostay> my @x = <a b c>.map({ rx/<$_> {say $_} }); for @x -> $rx { "test" ~~ $rx }

[16:39] <zostay> m: my @x = <a b c>.map({ rx/<$_> {say $_} }); for @x -> $rx { "test" ~~ $rx }

[16:39] <camelia> rakudo-moar 3fb3c2: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Couldn't find terminator / (corresponding / was at line 1)␤at <tmp>:1␤------> 3my @x = <a b c>.map({ rx/<$_> {say $_} 7⏏5}); for @x -> $rx { "test" ~~ $rx }␤    expecting any of:␤        /␤»

[16:39] <zostay> dur

[16:39] <zostay> m: my @x = <a b c>.map({ rx/<$_> {say $_}/ }); for @x -> $rx { "test" ~~ $rx }

[16:39] <camelia> rakudo-moar 3fb3c2: ( no output )

[16:44] <zostay> m: my @x = <a b c >.map({ regex { <$_> {.say} } }); for @x -> $rx { "abc" ~~ $rx }

[16:44] <camelia> rakudo-moar 3fb3c2: OUTPUT: «a␤b␤c␤»

[16:44] <zostay> m: my @x = <a b c >.map({ rx{ <$_> {.say} } }); for @x -> $rx { "abc" ~~ $rx }

[16:44] <camelia> rakudo-moar 3fb3c2: OUTPUT: «c␤c␤c␤»

[16:44] <zostay> so, maybe you want regex {} instead

[16:45] <zostay> that the .say closes on c, is kind a weird though

[16:45] <mcafee> It's not really parsing a string into a regex per se: my $s = 'foo'; my $r = rx/<$s>/; $s = 'bar'; 'foo' ~~ $r --> (Any)

[16:46] <mcafee> Isn't that possible at all?  And for a golfing challenge I'm working on, I'd like to parse a regex from a whatever star, but /<*>/ predictably doesn't work.

[16:50] <zostay> m: my @x = <a b c >.map({ rx{ <$_> {.say} } }); for @x -> $rx { $_ = "d"; "abc" ~~ $rx }

[16:50] <camelia> rakudo-moar 3fb3c2: OUTPUT: «c␤c␤c␤»

[16:50] *** domidumont joined
[16:51] *** Zoffix joined
[16:51] <Zoffix> If my module is using $*PERL in the mainline. How can I fake it in tests?

[16:52] <moritz> my setting $*PERL before loading (with require)?

[16:52] <Zoffix> with require.. hm

[16:53] *** domidumont1 left
[16:55] <Zoffix> Thanks. `require` did the trick.

[16:55] <moritz> \o/

[16:55] <Zoffix> I was trying to set it and then `use` a module; all inside a BEGIN block and it wouldn't take it

[16:58] <moritz> that doesn't work, because if you do BEGIN { my $*PERL = 'foo'; use Bla; }, the BEGIN block again as a runtime and a compile time

[16:58] <moritz> and the "use" is executed at compile time, so before the assignment

[16:58] *** Actualeyes left
[16:58] <moritz> you could try    BEGIN my $*PERL = 'foo'; use Bla;

[16:59] <Zoffix> I think I tried that too, but eh, require suits my purpose. Thanks

[16:59] *** Zoffix left
[16:59] <moritz> ... and hope that the BEGIN correctly doesn't introduce a scope (but I wouldn't bet on it)

[17:04] <Geth> ¦ ecosystem: 49bf462822 | (Zoffix Znet)++ (committed using GitHub Web editor) | META.list

[17:04] <Geth> ¦ ecosystem: Add Augment::IO::Path::ChildSecure to ecosystem

[17:04] <Geth> ¦ ecosystem: 

[17:04] <Geth> ¦ ecosystem: "Augment IO::Path to provide secure version of .child"

[17:04] <Geth> ¦ ecosystem: See: https://github.com/zoffixznet/perl6-Augment-IO-Path-ChildSecure

[17:04] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/49bf462822

[17:07] *** kyan left
[17:07] *** itaipu left
[17:12] *** lizmat left
[17:13] *** pat_js left
[17:15] *** ufobat left
[17:23] *** matiaslina left
[17:28] *** jbolden1517 joined
[17:28] <jbolden1517> Hi.  Question for you all.  There is a rather cool tutorial https://docs.perl6.org/language/haskell-to-p6

[17:28] <jbolden1517> Is there a wiki editable version of this.  Figure I'd like to finish the missing parts and perhaps extend it a bit to implement some of the classic Haskell tutorials in p6

[17:29] <gfldex> jbolden1517: see https://github.com/perl6/doc/blob/master/CONTRIBUTING.md

[17:31] *** mcafee left
[17:32] *** Zoffix joined
[17:32] *** setty1 joined
[17:32] <Zoffix> jbolden1517: no wiki, but the closest approximation would be to use GitHub editor to edit this page: https://github.com/perl6/doc/blob/master/doc/Language/haskell-to-p6.pod6

[17:33] <Zoffix> jbolden1517: you got GitHub account? What's your username. I can give you a commit bit

[17:33] <Zoffix> TIL we have a Haskel to Perl 6 tut :o

[17:33] <jbolden1517> No I don't but I can create one easily enough

[17:33] <Zoffix> jbolden1517: ok, create one :)

[17:33] <jbolden1517> Yes.  I was commenting there are missing sections

[17:35] *** krshn joined
[17:36] <Zoffix> This is quite a wall of text https://github.com/perl6/doc/blob/master/CONTRIBUTING.md  Makes me think more of this idea (click-n-edit thing): https://github.com/perl6/doc/issues/1212

[17:36] *** raschipi joined
[17:38] <jbolden1517> OK guess I did have one.  jbolden1517 is the user name

[17:39] *** zakharyas left
[17:39] <jbolden1517> Anyway my other idea was to write a Haskell -> Perl6 tutorial with more of a Haskell feel to it.  

[17:40] <jbolden1517> Haskell documentation tends to be organized: computer science concept -> theoretical implementation -> example code -> practical implementation explination 

[17:40] <Geth> ¦ doc: e0f512a62c | (Zoffix Znet)++ (committed using GitHub Web editor) | CONTRIBUTING.md

[17:40] <Geth> ¦ doc: Delete `Website styles` section

[17:40] <Geth> ¦ doc: 

[17:40] <Geth> ¦ doc: - Styles are now autobuilt and there's not /html/css/style.css

[17:40] <Geth> ¦ doc:  - Shorten giant contributor doc

[17:40] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e0f512a62c

[17:40] <Zoffix> jbolden1517: sent you an invite

[17:41] <gfldex> jbolden1517: that would be very welcome. Please leave lizmat a note when you are done so she can add it to the Perl 6 weekly.

[17:42] <jbolden1517> I was thinking that might be neat to do for perl6.  There is enough interesting stuff in 6 (from what I see, very new though did Perl4/Perl5 back in the 1990s) to do that sort of thing for Perl 6.

[17:43] <raschipi> jbolden1517: Do you have the map between computer science concepts and Perl6 concepts already?

[17:43] <jbolden1517> My idea is sort of like translating: https://www.willamette.edu/~fruehr/haskell/evolution.html  (which is really about theory of computation) to Perl6

[17:43] <raschipi> It might not be clean in Perl6, we're a diagonal language.

[17:43] <jbolden1517> Yeah that's easy.  You all are just taking classic Lisp concepts and implementing a dynamic version of them. 

[17:44] <Zoffix> jbolden1517: here's the docs for POD6, the language the docs are written in: https://docs.perl6.org/language/pod

[17:44] <jbolden1517> Sort of a Perlified version of ideas that have been around since the 1930s. 

[17:44] <jbolden1517> The implementation is one of the best I've seen but the concepts aren't new

[17:44] <gfldex> we only steal the good stuff :)

[17:45] <Zoffix> And the site is re-built continuously. And you can find the commit it's built off in the footer of any page and build logs are in https://docs.perl6.org/build-log/ 

[17:48] <jbolden1517> BTW read the dicussion on the  #1212.  FWIW as a newbie.  Strongly think the click and edit approach is a good one.  You want the barrier to first commit to be as low as possible.  

[17:48] <raschipi> It might end up as a multimap instead, we probably have more than one implementation for each mathematical concepts.

[17:48] <samcv> how do i format DateTime object printing? i remember there being a special method or printer

[17:48] <samcv> like you make your own printer and supply it to the datetime and can easily print it how how you wish

[17:49] <b2gills> formatter

[17:49] <jbolden1517> The way Wikipedia (in the old days) got committers was someone knew a single date, or had a reference for a single point.  Or could write a good paragraph or... (and if this is unsolicited advice I'll shut up now)

[17:49] <samcv> yay

[17:49] <gfldex> samcv: https://docs.perl6.org/type/DateTime#(Dateish)_method_formatter

[17:49] <samcv> yeah i found it thanks

[17:50] <Zoffix> jbolden1517: you could leave that advice on the issue :)

[17:52] *** ChoHag joined
[17:52] <raschipi> It would go from the functional concepts and when it gets to monads explains the rest of the language?

[17:53] *** Zoffix left
[17:55] *** rurban left
[17:56] *** krshn left
[18:05] *** ufobat joined
[18:05] *** ggoebel left
[18:05] *** cdg left
[18:06] *** lichtkind joined
[18:08] <jbolden1517> BTW FWIW zef install Pod::To::HTML and  Pod::To::BigPage are installed by default in Star

[18:09] <jbolden1517> raschipi Perl is a terrible language for monads.  Which is not to say you couldn't use them in Perl but they would never work right.  

[18:10] <jbolden1517> For a monad to really do its thing everything has to be very strongly typed. 

[18:10] <raschipi> This channel has an opinion that monads is just a way to write normal programming in a pure functional language.

[18:10] <jbolden1517> See for Option monad is Java for an example of why monads suck outside of their native homeland

[18:11] <jbolden1517> Yeah I get that.  Wadler made that joke in his "Imperative Functional Programming" back in 1989. 

[18:12] <jbolden1517> What I'd say is the same thing he did.  Monads give pure functional programming languages a lousy but tolerable imperative language.  

[18:12] <raschipi> Well, that's why I asked that if would explain the rest of the language when you got to monads.

[18:12] <jbolden1517> With Perl 6 you already have a good imperative language.  

[18:12] <raschipi> The best, believe me.

[18:12] <jbolden1517> No.  I might do some monads in Perl.  

[18:13] <jbolden1517> For example Maybe (Option) in Java would likely work really well in Perl.  

[18:13] <perigrin> shouldn't, rather than explaining the rest of the language, you just map to a category where the language is already explained?

[18:14] <jbolden1517> Sorry I'm losing the question.  

[18:14] <perigrin> that's okay ignore me I'm just being goofy.

[18:14] <raschipi> me too

[18:14] <raschipi> thanks

[18:15] <gfldex> jbolden1517: I think they try to tell you to stop writing what you want to write and go write it already. :->

[18:15] <jbolden1517> I am

[18:15] <jbolden1517> Just going through you contrib doc

[18:15] <jbolden1517> Noticed a bug in it and was telling you

[18:15] <jbolden1517> You all do have like a 20 step process.

[18:19] <jbolden1517> capnm is the next problem in the contributing doc.  Says what to do if you have it, but not if you don't    Not on fink.  I could build it with CAPN but its been over a decade since I've used CAPN.  

[18:19] *** zapwai joined
[18:20] <[Coke]> (click to edit) we don't have the cycles to manage reviewing and editing un-vetted edits.

[18:20] <jbolden1517> That's fair.  

[18:21] <jbolden1517> Overhead of managing lots of contributors is a pain.  

[18:21] <[Coke]> (it's also not a source page -> web page 1:1 mapping; source ends up in multiple pages)

[18:21] <b2gills> jbolden1517:  https://en.wikipedia.org/wiki/Option_type#Perl_6

[18:21] *** Cabanossi left
[18:21] <[Coke]> so, I think it's -possible-, but I'm not sure it's worth the overhead of setting up and maintaining)

[18:22] *** Cabanossi joined
[18:23] <Geth> ¦ doc: 274587ee46 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Date.pod6

[18:23] <Geth> ¦ doc: Document Date.clone takes a :formatter arg

[18:23] <Geth> ¦ doc: 

[18:23] <Geth> ¦ doc: Rakudo impl: https://github.com/rakudo/rakudo/commit/a9a161aef4

[18:23] <Geth> ¦ doc: Tests: https://github.com/perl6/roast/commit/f304b9910a

[18:23] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/274587ee46

[18:24] *** ggoebel joined
[18:25] *** kyan joined
[18:31] <jbolden1517> b2gills: That is interesting.  Does it attach to user defined data structures and objects as well?  Then I think it could work.  Just build a lazy list of subroutines and evaluate to first success.  That's a good example of what I was thinking of.

[18:33] <b2gills> m: class Foo {}; say Foo.defined; say Foo.new.defined;

[18:33] <camelia> rakudo-moar a9a161: OUTPUT: «False␤True␤»

[18:37] *** Ven joined
[18:37] *** Ven is now known as Guest80030

[18:38] <jbolden1517> Yep that works!  State has always worked fine with Perl.  err was based on Either.  Eval is probably more of a Moab integration.  

[18:38] <jbolden1517> Hmm.  Interesting sounds like Perl6 already has them.  

[18:40] <jbolden1517> Wow then you really should have a page on corecursion and anamorphisms in perl6

[18:42] <jbolden1517> You have out of the box deforestation.  A hadoop back end and you have big data parallelism out of the box!  Consider me very impressed.

[18:45] <MasterDuke_> huh, and here i thought deforestation was a bad thing...

[18:45] <MasterDuke_> guess Perl 6 isn't going to power Greenpeace's website anytime soon

[18:46] <MasterDuke_> jbolden1517: the above was a not very clever way of asking what you mean by "deforestation"?

[18:47] <gfldex> m: my @a = { False }, { True }; dd @a; say @a.first({$_.()});

[18:47] <camelia> rakudo-moar a9a161: OUTPUT: «Array @a = [-> ;; $_? is raw { #`(Block|52082160) ... }, -> ;; $_? is raw { #`(Block|52082232) ... }]␤-> ;; $_? is raw { #`(Block|52082232) ... }␤»

[18:47] <gfldex> m: my @a = { False }, { True }; dd @a; say @a.first(*.());

[18:47] <camelia> rakudo-moar a9a161: OUTPUT: «Array @a = [-> ;; $_? is raw { #`(Block|67651528) ... }, -> ;; $_? is raw { #`(Block|67651600) ... }]␤No such method 'CALL-ME' for invocant of type 'Whatever'␤  in block <unit> at <tmp> line 1␤␤»

[18:49] <jbolden1517> Oh deforstation is a traversal technique for data structures

[18:50] <jbolden1517> Essentially it turns a lot of exponential time algorithms into linear time algorithms.  It can be automatically applied if you have corecursion that works 

[18:51] <jbolden1517> Essentially most complex algorithms  look like: take simple data -> make more complex data -> do something to that complex data to produce simple data

[18:52] <jbolden1517> For example "find all accounts with a balance over $1000 in Pennsylvania and check against these 20 criteria to determine if we should try to sell them an account upgrade"

[18:53] <jbolden1517> Starts with a simple criteria (accounts with a balance over $1000) performs  (expand simple data to complex data with those criteria) then compress that back to a simple list of accounts

[18:54] <jbolden1517> Written naively this ends up being an exponential algorithm on accounts.  For example typically in SQL you would perform a bunch of joins and get back a huge table of those 20 criteria.  

[18:55] <jbolden1517> But obviously this algorithm can be done one account at a time.  there is no need for the global table you just need each row.  Which means it can fork against CPUs.

[18:55] *** st_elmo joined
[18:55] <jbolden1517> Each node can do part of the work and then combine at the end (a map reduce)

[18:57] <jbolden1517> That's what hadoop does.  But if Maybe / Option monad works then Perl6 can rewrite naively written code automatically to run in parallel.  The algorithms for this transformation are really simple. 

[18:58] *** AlexDaniel joined
[18:58] <jbolden1517> So I'm suddenly very excited.  This is the sort of thing you could never do with Perl5 code

[18:59] *** lichtkind left
[18:59] <jbolden1517> It works in Haskell because Haskell doesn't let you do the sorts of things that would screw it up.  

[18:59] <jbolden1517> Did that help?

[18:59] <jbolden1517> https://cs.stackexchange.com/questions/10129/how-does-deforestation-remove-trees-from-a-program

[18:59] <MasterDuke_> it did, thanks

[19:01] <Geth> ¦ ecosystem: 0ff7ad4fcf | (Zoffix Znet)++ (committed using GitHub Web editor) | META.list

[19:01] <Geth> ¦ ecosystem: Replace Augment::IO::Path::ChildSecure...

[19:01] <Geth> ¦ ecosystem: 

[19:01] <Geth> ¦ ecosystem: ...with IO::Path::ChildSecure:

[19:01] <Geth> ¦ ecosystem: "Secure version of IO::Path.child": https://github.com/zoffixznet/perl6-IO-Path-ChildSecure

[19:01] <Geth> ¦ ecosystem: 

[19:01] <Geth> ¦ ecosystem: Gone off the idea of it being an augment. The globality of it is gross

[19:01] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/0ff7ad4fcf

[19:09] <jbolden1517> Anyway Coke offer stands if there ever gets to be an easier way.  And Perigrin.  That category joke was pretty funny.  Sorry at the time I was distracted trying to figure out details of Zef.  You deserved more appreciation for it.

[19:11] *** lichtkind joined
[19:13] *** kaare_ joined
[19:14] *** Sound joined
[19:14] *** Sound left
[19:14] *** Sound joined
[19:15] <raschipi> Oh yeah, I didn't see it. Link the section on monads to https://docs.perl6.org/language/syntax

[19:15] <raschipi> It seems we're ahead of schedule, making the impossible easy.

[19:17] <samcv> are anyone know if there's any issues on windows where shell needs to be used and run cannot

[19:17] <samcv> due to path issues. launching another perl 6 process. it should be fine to substitute run for shell right?

[19:17] <samcv> i know it works on linux. wasn't sure why this module i'm gonna PR uses shell, could have just been overlooked idk

[19:19] *** espadrine joined
[19:19] <samcv> oh wait. windows doesn't even have shell piping which this used

[19:19] <samcv> so there shoudn't be any issues if anything this will more likely work

[19:20] *** Guest80030 left
[19:22] *** Ven joined
[19:22] *** Ven is now known as Guest95275

[19:23] *** domidumont left
[19:26] *** Guest95275 left
[19:29] *** Ven_ joined
[19:30] <Geth> ¦ doc: 72ea634915 | (Jan-Olof Hendig)++ | doc/Type/Str.pod6

[19:30] <Geth> ¦ doc: Fix a couple of copy paste errors

[19:30] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/72ea634915

[19:33] *** Ven_ left
[19:35] *** Ven_ joined
[19:35] *** zakharyas joined
[19:36] *** devmikey joined
[19:37] *** zakharyas left
[19:37] *** zakharyas joined
[19:38] *** Ven_ left
[19:38] <geekosaur> er? the windows nt lineage has ~always had true pipes 

[19:38] <geekosaur> (possibly 3.1 didn't; 3.5 did)

[19:38] <geekosaur> it was the DOS-based ones that had to fake it

[19:39] <samcv> geekosaur, does it have same semantics?

[19:39] <geekosaur> mind, the API is a bit of a bear, so it's usually easier to go through CMD...

[19:40] <geekosaur> fairly similar

[19:40] <geekosaur> well, instead of being anonymous like pipe(2) on Unix you always have named pipes in a virtual filesystem

[19:41] <geekosaur> which is how you plumb them

[19:42] <geekosaur> (this actually gives you a bit more flexibility, plus avoids many of the edge cases with named pipes/fifos on unix)

[19:42] *** mcmillhj left
[19:43] *** Sound left
[19:45] <geekosaur> um. what the heck did I just do to hexchat/...

[19:45] *** TEttinger joined
[19:45] <geekosaur> anyway I admit I am not an expert on this (or much of anything Windows) but at the shell/cmd level it seems similar enough

[19:47] *** mcmillhj joined
[19:53] *** ChoHag left
[19:57] <Geth> ¦ doc: 69296f211b | (Jan-Olof Hendig)++ | doc/Type/Str.pod6

[19:57] <Geth> ¦ doc: Fix incorrect split example result

[19:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/69296f211b

[19:58] *** kaare_ left
[19:59] *** kaare_ joined
[20:01] *** Ven_ joined
[20:02] *** Ven_ left
[20:10] *** dolmen joined
[20:10] *** dolmen is now known as Guest3206

[20:20] <perigrin> jbolden1517: thanks :)

[20:20] *** lowbro left
[20:21] *** itaipu joined
[20:34] *** cdg joined
[20:36] <tyil> / 5

[20:36] <yoleaux> 15:00Z <raiph> tyil: Just a fyi but you could make a Mode error a compile-time error (though with an arguably poorer message); see https://irclog.perlgeek.de/perl6/2017-05-11#i_14566571

[20:36] <tyil> woops

[20:36] <tyil> also, thanks raiph :>

[20:36] *** Cabanossi left
[20:37] *** sftp joined
[20:38] *** Cabanossi joined
[20:47] *** kaare__ joined
[20:48] *** kaare_ left
[20:49] *** azawawi joined
[20:51] *** espadrine left
[20:52] <azawawi> hi

[20:52] <raschipi> hello

[20:52] *** lostinfog joined
[20:53] <tyil> o/

[20:53] <raschipi> bye

[20:53] *** raschipi left
[20:53] <timotimo> heyo azawawi 

[20:55] <azawawi> timotimo: made some progress in libcaca :)

[20:56] <timotimo> cool! i have not continued work on libsixel :(

[20:57] <azawawi> hmmm http://pasteboard.co/ seems to be down. Any other image pastebin suggestions?

[20:58] <timotimo> i usually use imgur, but that sometimes goes "over capacity"

[20:58] <timotimo> and it's a bit more like a community thing than a pure paste-images-to-put-into-IM-or-chatroom thing

[20:58] <tyil> azawawi: uguu.se

[20:58] <tyil> does any file, really, but works for images

[20:59] <tyil> you can curl to it and get an url back

[20:59] <azawawi> cool

[20:59] <azawawi> thx

[21:00] <timotimo> the xfce screenshooter tool also has zimagez support built-in

[21:00] <tyil> there is also a number of pomf.se clones that should allow the same

[21:00] <azawawi> https://a.uguu.se/Xn4MoafJQUjm.png # More 3D ASCii art with Terminal::Caca :)

[21:01] <timotimo> you're doing perspective computation all with pure math, yeah?

[21:02] <azawawi> https://github.com/azawawi/perl6-terminal-caca/blob/master/examples/06-icosphere.pl6

[21:02] <azawawi> my 3D math is rusty but im improving it :)

[21:02] <timotimo> uh huh

[21:02] <timotimo> i didn't do 3d math myself yet

[21:03] *** setty1 left
[21:03] <timotimo> only what opengl offers you, like glRotatef and friends

[21:03] *** skids left
[21:03] *** Ven joined
[21:04] *** Ven is now known as Guest14984

[21:05] *** sufrostico joined
[21:06] *** mcmillhj left
[21:10] *** zapwai left
[21:15] *** kyan left
[21:18] *** st_elmo left
[21:18] <azawawi> timotimo: next stop https://github.com/nosir/obelisk.js port :)

[21:19] * azawawi installs Peek to record an animated gif :)

[21:21] <timotimo> peek is all right

[21:24] *** zakharyas left
[21:25] <azawawi> https://a.uguu.se/NSO2pzcTbn13.gif  # Icosphere v2 :)

[21:26] <timotimo> oh that's kinda slow :(

[21:27] *** ufobat left
[21:27] <azawawi> gif file download is slow

[21:27] <azawawi> wait for it :)

[21:27] *** pb122-two joined
[21:27] *** pb122 left
[21:28] <azawawi> im actually adding a sleep 0.0042 / 2 # :)

[21:28] <timotimo> oooh now it's better

[21:29] <azawawi> What do you think? 3D Perl6 library on top on Terminal::Caca? :)

[21:29] *** ChoHag joined
[21:30] <azawawi> there is a function which i didnt still implement caca_fill_triangle_textured

[21:30] <samcv> cool. ok so i'm doing my grant documentation in pod6

[21:30] *** chee left
[21:30] <samcv> and having a script that automatically converts to .md and pushes to github's wiki https://github.com/samcv/Unicode-Grant/wiki/All-Unicode-Files

[21:30] <samcv> and i like can between the pages as well

[21:31] <samcv> with L<foo|page-name>

[21:31] *** chee joined
[21:31] <azawawi> cool

[21:31] <timotimo> azawawi: does libcaca support 256 color and 24bit color?

[21:31] *** rurban joined
[21:31] *** chee left
[21:32] <azawawi> timotimo: let me check

[21:32] <timotimo> i know only one terminal emulator that has 24bit color support, actually

[21:32] <timotimo> that's Konsole

[21:32] <samcv> does not seem to be rendering deeper embeded =item's though

[21:32] *** z448 joined
[21:33] *** stmuk_ joined
[21:34] *** anton_p left
[21:34] <azawawi> timotimo: 16 color so far

[21:35] *** stmuk left
[21:35] <timotimo> only 16? wow :(

[21:36] *** z448 left
[21:38] <azawawi> well 16 is better than 2 :)

[21:38] *** yqt left
[21:38] *** cyphase left
[21:39] <timotimo> eh, sure

[21:39] <samcv> guess i'll just have to fix it i guess :)

[21:39] <samcv> fill all the everything

[21:40] <timotimo> samcv: how many colors? :)

[21:41] <samcv> idk no colors

[21:44] *** cyphase joined
[21:45] <samcv> sweet success!

[21:47] *** matt_ left
[21:47] <samcv> nice. that worked out way better than i had hoped :)

[21:49] <timotimo> nice

[21:49] <samcv> perfect.

[21:51] *** Guest14984 left
[21:55] <samcv> yay so nested :) https://github.com/samcv/Unicode-Grant/wiki/All-Unicode-Files

[21:55] <samcv> timotimo, should there be a way to make checkboxes with Pod?

[21:56] <timotimo> hmm. well, pod allows you to put whatever new directives you want in

[21:56] <timotimo> just have to support it in the renderer, too, i guess?

[21:56] <samcv> hmm looks like if i did `=item [X]` when i convert to pod it shows up as checkbox

[21:56] <samcv> so that's good enough :)

[21:57] <timotimo> neato.

[21:58] *** nadim_ joined
[22:05] <Geth> ¦ ecosystem: 3c2ec3fe6c | cygx++ (committed using GitHub Web editor) | META.list

[22:05] <Geth> ¦ ecosystem: revive TinyCC module

[22:05] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/3c2ec3fe6c

[22:07] <samcv> timotimo, you know if i can put variables in a pod link?

[22:07] <timotimo> um, huh?

[22:09] *** kyan joined
[22:09] *** colomon_ joined
[22:10] *** colomon left
[22:10] *** colomon_ is now known as colomon

[22:17] <samcv> like L<Latest GCB|unicode.org/files/$univer/graphemeclusterbreak.txt>

[22:17] <samcv> i mean they may have a link that goes to the latest. but i was curious it made me think

[22:18] <timotimo> nah, pod won't interpolate variables

[22:20] *** skids joined
[22:21] *** Cabanossi left
[22:23] *** Cabanossi joined
[22:30] *** ggoebel left
[22:30] <azawawi> timotimo: https://a.uguu.se/BMsYVVlKaQLM.gif  # more colors :)

[22:31] <azawawi> timotimo: http://caca.zoy.org/doxygen/libcaca/group__caca__attributes.html#gac031e1af3a6bce86128bb1a3050550bc

[22:31] *** jferrero left
[22:32] <timotimo> did you past the right link there?

[22:32] <timotimo> it still has only the two colors?

[22:33] <azawawi> hmmm give me a second

[22:34] <azawawi> my bad... wrong upload :)  # https://a.uguu.se/YL03CApU2Gzi.gif

[22:34] *** japhdotcom joined
[22:35] <azawawi> needs now a bit of shading

[22:36] *** rurban left
[22:37] <timotimo> mhhh gouraud shading? :)

[22:37] *** mcmillhj_ left
[22:37] <timotimo> phong shading?

[22:37] <timotimo> normalmaps!!

[22:37] *** nadim_ left
[22:39] <azawawi> :)

[22:40] <timotimo> make it reflect an environment! ;)

[22:40] <azawawi> And Camelia flying :)

[22:42] <timotimo> with flapping wings

[22:44] *** wamba left
[22:44] <azawawi> :)

[22:48] *** rindolf left
[22:49] *** kurahaupo_ left
[22:50] *** kurahaupo joined
[22:50] <azawawi> good night #perl6

[22:51] *** Cabanossi left
[22:51] *** azawawi left
[22:52] *** lizmat joined
[22:53] <Geth> ¦ ecosystem: afd0c8189b | (Zoffix Znet)++ (committed using GitHub Web editor) | META.list

[22:53] <Geth> ¦ ecosystem: Add RakudoPrereq to ecosystem

[22:53] <Geth> ¦ ecosystem: 

[22:53] <Geth> ¦ ecosystem: "Specify minimum required versions of Rakudo":

[22:53] <Geth> ¦ ecosystem: https://github.com/zoffixznet/perl6-RakudoPrereq

[22:53] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/afd0c8189b

[22:53] *** Cabanossi joined
[23:01] *** lichtkind left
[23:04] *** japhdotcom left
[23:04] *** Guest3206 left
[23:04] *** mcmillhj joined
[23:06] *** BenGoldberg joined
[23:18] *** astj joined
[23:18] *** astj_ left
[23:22] *** kurahaupo left
[23:22] *** kurahaupo_ joined
[23:28] *** ChoHag left
[23:32] *** lizmat_ joined
[23:33] *** kurahaupo_ left
[23:34] *** lizmat left
[23:35] *** stmuk joined
[23:36] *** stmuk_ left
[23:38] *** kurahaupo__ joined
[23:40] *** cpage_ left
[23:41] *** lostinfog left
[23:45] *** chee joined
[23:45] *** kurahaupo__ left
[23:46] *** kurahaupo_ joined
[23:53] <Geth> ¦ whateverable: f5459ff7c9 | (Aleks-Daniel Jakimenko-Aleksejev)++ | Unicodable.p6

[23:53] <Geth> ¦ whateverable: I don't know. Some refactoring and a bug fix maybe?

[23:53] <Geth> ¦ whateverable: 

[23:53] <Geth> ¦ whateverable: Unfortunately I have no time machine so I cannot go back and ask

[23:53] <Geth> ¦ whateverable: myself why these changes were made.

[23:53] <Geth> ¦ whateverable: 

[23:53] <Geth> ¦ whateverable: It seems that propdump didn't handle weird characters properly, so

[23:53] <Geth> ¦ whateverable: some code was moved to separate subs in order to be reused by propdump.

[23:53] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/f5459ff7c9

[23:57] <AlexDaniel> how many times did I promise myself not to leave uncommitted changes…

