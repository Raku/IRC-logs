[00:01] <brokenchicken> Based on the evidence, yes

[00:01] <brokenchicken> m: https://gist.github.com/zoffixznet/72693f839766183ddf82a0e0dafecb45

[00:01] <camelia> rakudo-moar 7f245f: OUTPUT«6.28574922␤»

[00:02] <brokenchicken> a bit faster

[00:02] <dogbert17> and the grep I did was actually totally useless

[00:02] *** zacts left
[00:04] *** zacts joined
[00:06] *** BenGoldberg left
[00:06] *** mr_ron joined
[00:08] *** BenGoldberg joined
[00:13] *** BenGoldberg left
[00:15] *** BenGoldberg joined
[00:16] *** jjido left
[00:30] *** Ben_Goldberg joined
[00:30] *** BenGoldberg left
[00:30] *** Ben_Goldberg is now known as BenGoldberg

[00:30] *** bjz left
[00:32] *** lmmx left
[00:33] *** rindolf left
[00:40] <agentzh> hmm, found another nit. when rakudo complaints about "Attribute $!xxx not declared in class Foo", the line number reported is always the end of the file Foo.pm6.

[00:40] *** lmmx joined
[00:41] <agentzh> so the real offending source line is never reported.

[00:41] <brokenchicken> huggable: rakudobug

[00:41] <huggable> brokenchicken, [email@hidden.address] or use perl6 query on http://rt.perl.org ; see https://github.com/rakudo/rakudo/#reporting-bugs

[00:42] <brokenchicken> report it by emailing to ^ that email address

[00:42] <agentzh> brokenchicken: okay, will do

[00:42] <brokenchicken> huggable: rakudobug :is: Report bugs by emailing to [email@hidden.address]
[00:42] <huggable> brokenchicken, Added rakudobug as Report bugs by emailing to [email@hidden.address]
[00:48] <agentzh> brokenchicken: just sent an email to [email@hidden.address]
[00:48] <agentzh> with a minimal example.

[00:48] <agentzh> thanks for the pointer.

[00:50] *** espadrine_ left
[00:53] *** lep-delete left
[00:56] *** lep-delete joined
[00:58] *** pmurias left
[00:58] *** labster left
[01:02] *** wamba left
[01:02] *** bjz joined
[01:07] *** cibs_ left
[01:08] *** cibs joined
[01:19] *** bstamour joined
[01:21] *** bstamour left
[01:21] *** jdmmmmm left
[01:22] *** cale2 left
[01:23] *** jdmmmmm joined
[01:29] *** jdmmmmm left
[01:38] *** BenGoldberg left
[01:38] *** labster joined
[01:49] <brokenchicken> Too quiet in here....

[01:49] * brokenchicken blasts https://www.youtube.com/watch?v=vfu9UBsPAxs

[01:49] <brokenchicken> 🎸🎸🎸🎸🎸🎸🎸 🤘🤘🤘🤘

[01:50] * MasterDuke is busily watching jonathan blow's newest video about Jai

[01:50] *** dugword left
[01:55] *** agentzh left
[02:03] *** agentzh joined
[02:13] <TEttinger> m: say "\C[SEE-NO-EVIL_MONKEY]"

[02:13] <camelia> rakudo-moar 7f245f: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unrecognized backslash sequence: '\C'␤at <tmp>:1␤------> 3say "\7⏏5C[SEE-NO-EVIL_MONKEY]"␤    expecting any of:␤        argument list␤        double quotes␤        term␤»

[02:13] <TEttinger> m: say "\c[SEE-NO-EVIL_MONKEY]"

[02:13] <camelia> rakudo-moar 7f245f: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unrecognized character name SEE-NO-EVIL_MONKEY␤at <tmp>:1␤------> 3say "\c[SEE-NO-EVIL_MONKEY7⏏5]"␤»

[02:13] <TEttinger> hm

[02:13] <TEttinger> u: monkey

[02:13] <unicodable6> TEttinger, U+1F412 MONKEY [So] (🐒)

[02:13] <unicodable6> TEttinger, U+1F435 MONKEY FACE [So] (🐵)

[02:13] <unicodable6> TEttinger, https://gist.github.com/c57e7f38637aa79560899d8de2afd11f

[02:13] <TEttinger> m: say "\c[SEE-NO-EVIL MONKEY]"

[02:13] <camelia> rakudo-moar 7f245f: OUTPUT«🙈␤»

[02:13] <TEttinger> yay

[02:14] *** Ven joined
[02:20] *** kalkin- left
[02:21] *** kalkin- joined
[02:41] *** agentzh left
[02:42] <brokenchicken> .oO( monkey face ZWS... )

[02:42] <brokenchicken> WOMAN/MAN/MONKEY variants :)

[02:43] <brokenchicken> m: "\c[monkey facepalming]"

[02:43] <camelia> rakudo-moar 7f245f: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unrecognized character name monkey facepalming␤at <tmp>:1␤------> 3"\c[monkey facepalming7⏏5]"␤»

[02:45] *** ilbot3 left
[02:48] *** ilbot3 joined
[02:49] *** cale2 joined
[03:03] <TEttinger> \c[MONKEY DABBING]

[03:05] <TEttinger> \c[MOLOCH, DEVOURER OF FLESH, PRAISE BE UPON HIM]

[03:05] <cale2> D:

[03:06] <TEttinger> just waiting for unicode on those two

[03:06] <samcv> when did the docs highlighting break btw?

[03:06] <samcv> anyone know when that began and if so what caused it?

[03:07] *** khw joined
[03:08] <cale2> I know I talk about elixir alllll the time, but 

[03:08] <cale2> it has a neat feature where you can pattern match on binary data

[03:08] <cale2> Can you use perl6 grammars to pattern match on binary data?

[03:08] <cale2> Is that how you might interface with new data formats, for example?

[03:09] <samcv> the builds are passing on TravisCI

[03:09] <samcv> binary data as in, non-text?

[03:09] <samcv> you cannot use grammars for non-text

[03:11] <cale2> samcv: Yeah, like destructuring a TCP header or something

[03:12] <cale2> http://www.freesoft.org/CIE/Course/Section4/8.htm

[03:12] *** Ven left
[03:12] <samcv> that would be. interesting i suppose. but they were not designed for that

[03:13] <MasterDuke> samcv: i think [Coke] mentioned the highlighting broke a day or two ago

[03:13] <samcv> yeah. the travis passes tho

[03:14] <samcv> maybe something with the server then

[03:14] <MasterDuke> https://irclog.perlgeek.de/perl6/2017-01-21#i_13964451

[03:17] *** eaterof left
[03:18] *** eater joined
[03:19] *** dugword joined
[03:31] *** bjz left
[03:31] *** revere left
[03:31] *** Ven joined
[03:32] *** revere joined
[03:32] *** haxmeister joined
[03:38] *** parv joined
[03:38] * brokenchicken isn't sure about the latest PERF tickets

[03:39] <brokenchicken> What would be the criteria for closing them? I don't expect the compared results to ever have the same timings and the cases all fall under "our optimizer could optimizer more things"

[03:46] *** parv left
[03:50] *** noganex joined
[03:53] <[Coke]> I believe we've been going for "down from completely unreasonable to normal slowness compred to Perl 5". which is not really quantifiable.

[03:53] *** noganex_ left
[04:01] *** Ven left
[04:04] *** eater left
[04:07] *** Ven joined
[04:10] *** Ven left
[04:14] *** agentzh joined
[04:15] *** Ven joined
[04:20] *** lmmx left
[04:23] *** Ven left
[04:23] *** Ven_ joined
[04:30] *** bjz joined
[04:36] *** mr_ron left
[04:43] *** eater joined
[04:43] *** mr_ron joined
[05:07] *** Ven_ left
[05:09] *** labster left
[05:18] *** agentzh left
[05:30] *** Cabanossi left
[05:31] *** tardisx joined
[05:32] *** Cabanossi joined
[05:43] *** tardisx left
[05:44] *** tardisx joined
[05:51] *** cale2 left
[05:53] *** CIAvash joined
[05:56] *** kyan left
[05:59] *** mr_ron left
[06:03] *** khw left
[06:10] *** Ven joined
[06:22] <samcv> guess you can't use captures with subst

[06:22] <samcv> m: self.subst(/(.**4..6 $breakpoint)/,"$0\n", :global).say

[06:22] <camelia> rakudo-moar a1c7d0: OUTPUT«5===SORRY!5===␤'self' used where no object is available␤at <tmp>:1␤------> 3<BOL>7⏏5self.subst(/(.**4..6 $breakpoint)/,"$0\n␤Variable '$breakpoint' is not declared␤at <tmp>:1␤------> 3self.subst(/(.**4..6 7⏏5$breakpoint)/,"$0\n",…»

[06:22] <samcv> m:  "string".subst(/st(..)ng/, "$0a", :g).say #this paste is what i meant to paste

[06:22] <camelia> rakudo-moar a1c7d0: OUTPUT«Use of Nil in string context␤  in block <unit> at <tmp> line 1␤a␤»

[06:22] <CIAvash> .ask agentzh Is this the issue you're experiencing? https://rt.perl.org/Public/Bug/Display.html?id=127309

[06:22] <yoleaux> CIAvash: I'll pass your message to agentzh.

[06:24] <CIAvash> m: "string".subst(/st(..)ng/, -> $/ {"$0a"}, :g).say

[06:24] <camelia> rakudo-moar a1c7d0: OUTPUT«ria␤»

[06:27] <samcv> kk that wasn't on the docs. thanks CIAvash 

[06:27] *** mr_ron joined
[06:29] <CIAvash> m: say S:g/st(..)ng/"$0a"/ given "string"

[06:29] <camelia> rakudo-moar a1c7d0: OUTPUT«"ria"␤»

[06:29] <CIAvash> samcv: also ↑

[06:30] <CIAvash> m: say S:g/st(..)ng/$0a/ given "string"

[06:30] <camelia> rakudo-moar a1c7d0: OUTPUT«ria␤»

[06:32] *** bjz left
[06:51] *** dugword left
[06:53] *** Ven left
[06:53] *** kaare__ joined
[06:55] *** kaare_ left
[06:57] *** Sgeo joined
[07:00] *** labster joined
[07:01] <moritz> good morning

[07:01] <moritz> lol I blogged: https://perlgeek.de/blog-en/perl-6/2017-004-book-perl6-review.html

[07:01] *** bjz joined
[07:03] *** haxmeister left
[07:13] *** Ven joined
[07:16] *** wamba joined
[07:18] *** agentzh joined
[07:22] *** agentzh left
[07:24] *** Ven left
[07:28] *** shmibs joined
[07:30] *** mr_ron left
[07:37] *** Ven joined
[07:38] *** AlexDaniel joined
[07:49] *** bjz left
[07:51] *** dugword joined
[07:59] *** FROGGS joined
[08:05] *** kaare__ left
[08:07] *** kaare_ joined
[08:10] *** Ven left
[08:13] *** xinming_ joined
[08:15] *** bjz joined
[08:15] *** mr_ron joined
[08:25] *** cibs left
[08:27] *** cibs joined
[08:35] *** Actualeyes left
[08:52] *** inra joined
[08:53] *** xinming_ left
[08:55] *** xinming joined
[08:59] *** xinming left
[09:00] *** xinming joined
[09:05] *** domidumont joined
[09:09] *** domidumont left
[09:10] <Geth>  ecosystem: 1f4a6989cb | (Ahmad M. Zawawi)++ | META.list

[09:10] <Geth>  ecosystem: Switch Electron to META6.json

[09:10] <Geth>  ecosystem: review: https://github.com/perl6/ecosystem/commit/1f4a6989cb

[09:10] *** domidumont joined
[09:20] *** labster left
[09:24] *** mr_ron left
[09:26] *** rindolf joined
[09:26] *** domidumont left
[09:27] *** domidumont joined
[09:28] *** domidumont left
[09:29] *** domidumont joined
[09:31] *** agentzh joined
[09:37] *** agentzh left
[09:45] *** Actualeyes joined
[09:46] <El_Che> ./see azawawi

[09:46] *** RabidGravy joined
[09:47] <El_Che> .seen azawawi

[09:47] <yoleaux> I saw azawawi 21 Jan 2017 11:27Z in #perl6: <azawawi> Now most swift code is littered with lonely underscores

[09:48] * AlexDaniel hates underscores with passion

[09:49] <El_Che> not fond of the dash perl6 convention, but c'est la vie

[09:50] *** flexibeast joined
[09:50] *** azawawi joined
[09:50] <azawawi> hi #perl6

[09:50] *** espadrine_ joined
[09:50] <AlexDaniel> :o

[09:50] <AlexDaniel> how? :)

[09:51] <El_Che> azawawi: new rakudo packages are beint built as we speak

[09:52] <El_Che> azawawi: they shoud be up soon

[09:52] <azawawi> We need something like https://github.com/CocoaPods/cocoapods-try for trying out Perl 6 modules examples. For example, `zef try Bailador` :)

[09:52] <azawawi> I want to try but not install  :)

[09:52] <azawawi> El_Che: thx. El_Che++

[09:53] <El_Che> azawawi: docker is a match on Linux. jjmerelo release some alpine perl6 containers

[09:53] *** Actualeyes left
[09:53] <El_Che> azawawi: although, you approach is more sensible

[09:54] *** Tonik joined
[09:55] <RabidGravy> azawawi, I don't know if zef does it but panda has "look" which means you can run the examples from the durectory

[09:56] <azawawi> RabidGravy: What do you think we need for `zef try Bailador`. Get all dependencies into a lib folder (without installing) and git pull examples and then modify them to to use that lib folder?

[09:58] <RabidGravy> well, I'd say you *do* install the dependencies, just into a temporary local repo

[10:00] *** cibs left
[10:01] <azawawi> RabidGravy: cool

[10:02] <RabidGravy> whether that's a special type of repo or just an existing type with a different prefix I'm not sure

[10:05] * azawawi Damn you ImageMagick... they keep changing API :)

[10:05] <azawawi> brew just upgraded to 7 and they seem to break a few tests... now i need a compat layer (6 & 7)

[10:06] * azawawi is fixing also Electron tests... electron also is an API breaker lol

[10:06] *** Actualeyes joined
[10:07] *** pierrot left
[10:08] <azawawi> will a rakudo * be released for 2017.01?

[10:09] *** cibs joined
[10:09] *** pierrot joined
[10:13] <El_Che> azawawi: iirc it's released every 3 months

[10:13] <El_Che> azawawi: and last rakudo star wasn't that long ago

[10:13] <El_Che> stmuk_ will clarify once online :)

[10:18] *** domidumont left
[10:30] <azawawi> El_Che: thx

[10:30] <azawawi> https://ci.appveyor.com/project/azawawi/perl6-electron/build/1.0.18/job/p7ccf8a3d7leeqwj#L157   # rakudobrew build failure on windows (latest)

[10:34] *** pierrot left
[10:44] *** pierrot joined
[10:48] *** TEttinger left
[10:55] *** agentzh joined
[10:59] *** agentzh left
[11:01] *** azawawi left
[11:05] *** bjz left
[11:18] <Geth>  ecosystem: 396c2fed45 | (Wenzel P. P. Peppmeyer)++ | META.list

[11:18] <Geth>  ecosystem: add Git::Config

[11:18] <Geth>  ecosystem: review: https://github.com/perl6/ecosystem/commit/396c2fed45

[11:28] *** bjz joined
[11:34] <stmuk_> azawawi: I'm working on it .. see scrollback for a Release Candidate

[11:34] <El_Che> stmuk_++

[11:37] <stmuk_> I'm aiming for 3 monthly releases (the last was out of sequence since it was a bug fix for some platforms)

[11:39] *** parv joined
[11:47] *** skids joined
[11:52] *** rindolf left
[11:55] * RabidGravy wonders if there is scope for storing arbitrary stuff from a META file in the Distribution as installed

[11:55] <RabidGravy> say under a specific key

[11:56] <RabidGravy> my rationale for wanting to do this is for a custom CUR that does pluggable in a sane way

[11:58] <RabidGravy> grovelling around for specific patterns in the names of the installed modules upsets me

[12:00] <RabidGravy> I'll just leave that there, I'm off to the supermarket

[12:00] <stmuk_> . o O ( off licence )

[12:09] *** cognominal joined
[12:11] *** pmurias joined
[12:14] *** lukaramu joined
[12:16] *** pmurias left
[12:19] *** cognominal left
[12:30] *** kyan joined
[12:31] <timotimo> honestly i'm surprised the ticket about autoincrement doesn't also compare postincrement to preincrement

[12:35] *** girafe2 left
[12:38] <AlexDaniel> what's autoincrement

[12:39] * El_Che censors a "autoexcrement" joke

[12:39] <tadzik> eeeeeeeey! :D

[12:39] <timotimo> postfix ++ and prefix ++

[12:46] <gfldex> RabidGravy: did you consider to give META6 an executable?

[12:57] *** agentzh joined
[13:01] *** bjz left
[13:05] *** agentzh left
[13:11] *** yqt joined
[13:14] *** parv left
[13:17] *** abruanese left
[13:17] *** pmurias joined
[13:18] *** rmusial left
[13:22] *** mr_ron joined
[13:24] *** rmusial joined
[13:24] *** abruanese joined
[13:30] *** BenGoldberg joined
[13:36] *** CIAvash left
[13:54] <gfldex> lolibloggedagain: https://gfldex.wordpress.com/2017/01/22/once-a-week-a-happy-zef/

[14:01] *** BuildTheRobots joined
[14:06] *** araraloren left
[14:06] *** araraloren joined
[14:11] <RabidGravy> gfldex, I actually have one somewhere that I use for my own purposes, maybe I'll stick it in at some point

[14:13] <gfldex> RabidGravy: I was thinking about useing META6 to create a skeleton for a module, run git init and talk both to github and travis.

[14:13] <gfldex> much easier to teach beginners how to do it properly that way

[14:14] <RabidGravy> I'd say Talking to github and travis" would be out of scope as a script to distribute with META6 but as an example or something separate yes

[14:15] <RabidGravy> generating a properly formed META file with no other dependencies would be an idea though

[14:15] <gfldex> true, in that case a separate repo with a meta6 executable makes sense

[14:16] <RabidGravy> sure

[14:17] *** sammers left
[14:18] <stmuk_> has anyone tried rakudo on a opensolaris type system recently? tempted to spin up a VM

[14:23] *** zakharyas joined
[14:29] *** sammers joined
[14:30] <El_Che> stmuk_: yes

[14:31] <El_Che> stmuk_: it does not build due the uv dependenct

[14:31] <El_Che> y

[14:31] <El_Che> stmuk_: it was a while though

[14:31] <El_Che> (tried on sol10 en 11°

[14:31] <El_Che> )

[14:32] <El_Che> I had some progress on solaris 11 but I still had failing tests for uv

[14:33] <raiph> .ask TimToady Would you agree that, in P6, "all object types are option types" (where option type is as per https://en.wikipedia.org/wiki/Option_type)

[14:33] <yoleaux> 15 Jan 2017 13:38Z <thundergnat> raiph: Thanks for the link. Almost exactly my question.

[14:33] <yoleaux> raiph: I'll pass your message to TimToady.

[14:35] <MasterDuke> moritz: couple typos in the blog post: "attached on object", "paramater"

[14:36] <moritz> MasterDuke: thanks

[14:37] <MasterDuke> np

[14:38] <moritz> [X] fixed

[14:39] *** geekosaur left
[14:42] *** geekosaur joined
[14:42] *** cale2 joined
[14:43] *** inra left
[14:51] *** andrzejku joined
[14:53] *** KotH left
[14:58] *** KotH joined
[15:09] *** pmurias left
[15:17] *** Actualeyes left
[15:19] *** Actualeyes joined
[15:19] *** khw joined
[15:20] *** ChoHag joined
[15:23] *** mr_ron left
[15:24] *** mr_ron joined
[15:28] <RabidGravy> I really, really shouldn't have varifocal lenses in my glasses

[15:45] *** wamba left
[15:50] *** dugword left
[15:50] *** dugword joined
[15:52] <stmuk_> El_Che: ah thanks

[15:56] *** pmurias joined
[16:13] *** Actualeyes left
[16:16] *** Actualeyes joined
[16:18] *** rindolf joined
[16:18] <araraloren> Night~~, #perl6

[16:19] *** araraloren left
[16:21] *** jdmmmmm joined
[16:31] *** domidumont joined
[16:38] *** dugword left
[16:47] *** chinarulezzz joined
[16:48] *** cognominal joined
[16:50] *** xinming left
[16:50] *** xinming joined
[16:57] *** yqt left
[16:57] *** yqt joined
[17:01] *** dugword joined
[17:02] *** agentzh joined
[17:07] *** agentzh left
[17:07] *** jdmmmmm left
[17:16] *** chinarulezzz left
[17:16] *** kyan left
[17:19] *** espadrine_ left
[17:20] <moritz> what's the idiomatic way to merge multiple hashes?

[17:21] <moritz> m: my @a = [ { a => 1 }, { b => 2 } ]; say @a>>.flat.hash

[17:21] <camelia> rakudo-moar d71bf1: OUTPUT«{a   1 => {b => 2}}␤»

[17:21] <moritz> m: my @a = [ { a => 1 }, { b => 2 } ]; say @a>>.flat.hash.perl

[17:21] <camelia> rakudo-moar d71bf1: OUTPUT«{"a\t1" => ${:b(2)}}␤»

[17:21] <moritz> m: my @a = [ { a => 1 }, { b => 2 } ]; my %r; %r.push($_) for @a; say %r.perl

[17:21] <camelia> rakudo-moar d71bf1: OUTPUT«Trailing item in Hash.push␤  in block  at <tmp> line 1␤Trailing item in Hash.push␤  in block  at <tmp> line 1␤{}␤»

[17:22] <moritz> m: my @a = [ { a => 1 }, { b => 2 } ]; my %r; %r.push(%$_) for @a; say %r.perl

[17:22] <camelia> rakudo-moar d71bf1: OUTPUT«{:a(1), :b(2)}␤»

[17:22] <moritz> not what I call pretty

[17:23] *** MilkmanDan left
[17:23] *** zacts left
[17:26] <brokenchicken> m: my @a = [ { a => 1 }, { b => 2 } ]; say @a».pairs.flat.Hash

[17:26] <camelia> rakudo-moar d71bf1: OUTPUT«{a => 1, b => 2}␤»

[17:27] *** ChoHag left
[17:27] *** MilkmanDan joined
[17:28] <moritz> brokenchicken: thanks!

[17:30] *** kyan joined
[17:33] <cale2> is there an oauth1 example in perl6 somewhere?

[17:34] <cale2> I have a heck of a time trying to get my company's api up and running with a new language

[17:34] <brokenchicken> There may be a rudimentary one in Twitter.pm6

[17:34] <brokenchicken> buggable: eco oauth

[17:34] <buggable> brokenchicken, OAuth2::Client::Google 'Authenticate against Google's OAuth2 API.': https://github.com/bduggan/p6-oauth2-client-google

[17:35] <brokenchicken> buggable: eco Twitter

[17:35] <buggable> brokenchicken, Twitter 'Twitter API': https://github.com/zoffixznet/perl6-Twitter

[17:35] <brokenchicken> No idea what version it is https://github.com/zoffixznet/perl6-Twitter/blob/master/lib/Twitter/OAuth.pm6

[17:36] <cale2> i'm reading it now

[17:51] <RabidGravy> cale2 there's also arudimentary OAuth implementation in https://github.com/jonathanstowe/WebService-Soundcloud

[17:52] <RabidGravy> I keep meaning to split it out

[17:59] <cale2> The part that confuses me about the protocol is how to sign requests. A lot of oauth1 libraries will generate an oauth signature, but then you have to attach that signature to a request 

[17:59] <cale2> do you append the oauth signature to the request header? do you send in the oauth sig and the header as two separate strings?

[17:59] <cale2> what if you also have post data? do you concat the request header, oauth sig, AND payload data?

[18:03] <brokenchicken> sounds like the sign() method from Twitter::OAuth answers all those ques5tions

[18:05] <brokenchicken> cale2: perhaps this gives an idea? https://github.com/zoffixznet/perl6-Twitter/blob/master/lib/Twitter/UA.pm6#L19

[18:06] <brokenchicken> That's all one Authorization header that gets sent: https://github.com/zoffixznet/perl6-Twitter/blob/master/lib/Twitter/UA.pm6#L27

[18:08] <cale2> brokenchicken: $ua.post(url, headers, content) <- That makes sense. But different oauth libraries (and different HTTP libraries) play together differently

[18:08] *** BenGoldberg left
[18:08] *** AlexDaniel left
[18:11] *** labster joined
[18:14] *** lukiramu joined
[18:17] *** lukaramu left
[18:19] *** azertus joined
[18:30] *** agentzh joined
[18:34] *** wamba joined
[18:37] *** nowan_ left
[18:40] *** agentzh left
[18:43] *** nowan joined
[18:45] *** ChoHag joined
[18:51] <japhb> .tell gfldex code appears cut off by wordpress in https://gfldex.wordpress.com/2017/01/22/once-a-week-a-happy-zef/

[18:51] <yoleaux> japhb: I'll pass your message to gfldex.

[18:53] *** espadrine_ joined
[18:53] *** girafe joined
[18:54] <gfldex> japhb: the example is actually that short

[18:54] <yoleaux> 18:51Z <japhb> gfldex: code appears cut off by wordpress in https://gfldex.wordpress.com/2017/01/22/once-a-week-a-happy-zef/

[18:56] <brokenchicken> huggable: FindBin

[18:56] <huggable> brokenchicken, use lib $*PROGRAM.parent.parent.child("lib").Str; # finds lib/ for scripts in bin/ or t/

[18:58] <japhb> gfldex: In my browser, the trailing '); appears for just a moment, then disappears

[18:59] <japhb> Chrome 55

[18:59] <gfldex> japhb: same where, it's either a bug in wp or in chrome

[19:01] <gfldex> the html looks fine

[19:02] *** zakharyas left
[19:05] *** BenGoldberg joined
[19:07] <RabidGravy> brokenchicken, I use that idiom so often I'm wondering whether it should be either builtin or at least in a module

[19:08] <brokenchicken> ... is it built in :)

[19:08] <brokenchicken> configure a snippet in your editor

[19:09] <RabidGravy> that is exactly what I was typing;-)

[19:14] *** dugword left
[19:17] <mr_ron> m: my @a = [ { a => 1 }, { b => 2 } ]; my %r = @a.map: { %$_ }; say %r.perl # seems to work

[19:17] <camelia> rakudo-moar 4e49ec: OUTPUT«{:a(1), :b(2)}␤»

[19:19] *** hartenfels joined
[19:19] <cale2> m: sub hi($name) { say "hi $name"; }; my &hi-cale = &hi.assuming("cale"); say &hi-cale;

[19:19] <camelia> rakudo-moar 4e49ec: OUTPUT«sub __PRIMED_ANON () { #`(Sub+{Callable[Mu]}|71031408) ... }␤»

[19:20] <cale2> how do I call that function

[19:20] <lizmat> m: sub hi($name) { say "hi $name"; }; my &hi-cale = &hi.assuming("cale"); say hi-cale();

[19:20] <camelia> rakudo-moar 4e49ec: OUTPUT«hi cale␤True␤»

[19:20] <gfldex> m: sub hi($name) { say "hi $name"; }; my &hi-cale = &hi.assuming("cale"); say hi-cale;

[19:20] <camelia> rakudo-moar 4e49ec: OUTPUT«hi cale␤True␤»

[19:20] <cale2> ah

[19:20] <gfldex> you callit „hi-scale“ :->

[19:21] <cale2> I like that assuming method

[19:23] <RabidGravy> for reference any & sigilled thing is effectively a sub 

[19:23] <RabidGravy> m: my &ff = -> { say "foo" }; ff()

[19:23] <camelia> rakudo-moar 4e49ec: OUTPUT«foo␤»

[19:24] <cale2> RabidGravy: why did mine end in True?

[19:25] <RabidGravy> because you did say in the sub and said the return pof the sub

[19:25] <RabidGravy> say returns True (unless it doesn't)

[19:25] <cale2> m: sub hi($name) { "hi $name" }; my &hi-cale = &hi.assuming("cale"); say hi-cale();

[19:25] <camelia> rakudo-moar 4e49ec: OUTPUT«hi cale␤»

[19:25] <gfldex> m: my &ff = -> { say "foo" }; &ff.WHAT.say

[19:25] <camelia> rakudo-moar 4e49ec: OUTPUT«(Block)␤»

[19:26] *** agentzh joined
[19:26] <RabidGravy> any callable in a storm 

[19:27] <cale2> In haskell, they have a way to do point free style, with the (.) operator.

[19:27] <cale2> (.) :: (b -> c) -> (a -> b) -> a -> c

[19:28] <cale2> I'm thinking this may be possible with perl6

[19:28] <cale2> If you make sure that the return type of the one function is the entry type of the second function

[19:28] <RabidGravy> well if I knew what that did ....

[19:28] <samcv> u: { .unival eq 1000000000000 }

[19:29] <unicodable6> samcv, U+5146 <CJK Ideograph> [Lo] (兆)

[19:29] <unicodable6> samcv, U+16B61 PAHAWH HMONG NUMBER TRILLIONS [No] (𖭡)

[19:30] *** cdg joined
[19:30] <samcv> not sure why getting sizeof(long long) in c gives me 4, but somehow can fit 1000000000000 inside a long long

[19:32] *** itcharlie1 joined
[19:33] *** zacts joined
[19:33] <lizmat> hmmm..  looks like github API is down

[19:33] <samcv> :(

[19:34] <lizmat> hmmm... just slow

[19:34] <brokenchicken> m: "\c[family: man, man, girl, boy]"

[19:34] <camelia> rakudo-moar 15753f: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unrecognized character name family: man␤at <tmp>:1␤------> 3"\c[family: man7⏏5, man, girl, boy]"␤»

[19:34] <brokenchicken> samcv: we don't support these yet?

[19:34] <samcv> i don't mean in perl 6, but in C

[19:36] <samcv> so I guess it fits in a 64-bit, unsigned. I think i see what I was doing wrong with my type generation

[19:37] <brokenchicken> ?

[19:40] <gfldex> cale2: in Perl 6 the return type of a function is unknown at compile time. The return type is a misnomer. It's a return type constraint.

[19:44] <cale2> This is a good post if you're wondering what I meant about point free: http://buffered.io/posts/point-free-style-what-is-it-good-for/

[19:45] <lizmat> m: sub a(--> 42) {}; say a

[19:45] <camelia> rakudo-moar 15753f: OUTPUT«42␤»

[19:46] <lizmat> gfldex: known at compile time ^^^  :-)

[19:46] <cale2> Honestly it's not much different from a feed operator and the like. I was just thinking I could do an infix operator that was similar

[19:46] <gfldex> lizmat: that's a return value, not a return type

[19:46] * gfldex puts down the hairsplittingknife

[19:47] <lizmat> :-)  fwiw, I think it is *also* a return type, namely Int

[19:47] <lizmat> perhaps even Int:D

[19:48] <gfldex> m: sub a(--> 42){}; &a.signature.returns.say

[19:48] <camelia> rakudo-moar 15753f: OUTPUT«42␤»

[19:48] <gfldex> 42 is not a type object

[19:49] <lizmat> pretty sure that doesn't matter for a type check ?

[19:49] <lizmat> m: use nqp: say nqp::istype(666,42)'

[19:49] <camelia> rakudo-moar 15753f: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3use nqp7⏏5: say nqp::istype(666,42)'␤»

[19:49] <lizmat> m: use nqp: say nqp::istype(666,42)

[19:49] <camelia> rakudo-moar 15753f: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3use nqp7⏏5: say nqp::istype(666,42)␤»

[19:49] <lizmat> m: use nqp; say nqp::istype(666,42)

[19:49] <camelia> rakudo-moar 15753f: OUTPUT«0␤»

[19:49] <lizmat> hmmm

[19:50] <lizmat> I guess it does

[19:50] <lizmat> m: use nqp; say nqp::istype(666,42.WHAT)

[19:50] <camelia> rakudo-moar 15753f: OUTPUT«1␤»

[19:50] <gfldex> also, we where talking about Perl 6, not nqp

[19:50] *** chinarulezzz joined
[19:51] <gfldex> m: say so 123 ~~ 42;

[19:51] <camelia> rakudo-moar 15753f: OUTPUT«False␤»

[19:51] <cale2> Does perl6 have generic types in the sense that it can match two generic types?

[19:51] *** bjz_ joined
[19:51] <gfldex> not really but you can use a subset to match against a Junction of two types

[19:51] <cale2> Prob not, because you'd just have something like `(Any, Any) returns Any`

[19:51] <gfldex> please don't ask what a Junction is

[19:52] <cale2> A junction is a glorified enum

[19:52] <gfldex> no

[19:52] *** agentzh left
[19:52] <cale2> But in any case, if you don't know the types beforehand, you can't do it

[19:52] <cale2> Like you can't do `(AnyA, AnyB) returns AnyA`

[19:53] <CIAvash[m]> m: say ((* + 5) ∘ (* × 2))(20)

[19:53] <camelia> rakudo-moar 8a448d: OUTPUT«45␤»

[19:54] *** cdg left
[19:54] <gfldex> cale2: if you believe Junctions are enums you may want to read: https://docs.perl6.org/type/Junction

[19:55] <cale2> CIAvash[m]: that is insane. What the heck is this `∘`

[19:55] <gfldex> and take the week of to contemplate

[19:55] <CIAvash[m]> cale2: function composition operator, you can also use "o"

[19:56] *** agentzh joined
[19:56] <cale2> That's exactly what I was thinking of making haha

[19:56] <RabidGravy> I like the compose operator but can't type it ;-)

[19:56] <cale2> I'm guessing it doesn't rely on types, it just assumes that you know what you're doing

[19:58] <cale2> Yeah, it relies on arity

[19:58] <cale2> gfldex: junctions aren't that hard to understand. How is it not like an enum?

[19:59] * brokenchicken doesn't see the relation between Junctions and enums

[19:59] <RabidGravy> yeah I'm confused

[19:59] <brokenchicken> m: say 42 ~~ none 2, 5, 6

[19:59] <camelia> rakudo-moar 8a448d: OUTPUT«True␤»

[19:59] <cale2> A junction is a list of possible objects

[19:59] <brokenchicken> m: say 5 ~~ none 2, 5, 6

[19:59] <camelia> rakudo-moar 8a448d: OUTPUT«False␤»

[20:00] <cale2> An enum is a list of possible objects

[20:00] <RabidGravy> no

[20:00] <brokenchicken> A Junction is a superposition of values... An enum is a glorified series of Ints

[20:00] <Geth>  ecosystem: 426cc7a6b8 | (Ramiro Encinas)++ | META.list

[20:00] <Geth>  ecosystem: Update META.list

[20:00] <Geth>  ecosystem: review: https://github.com/perl6/ecosystem/commit/426cc7a6b8

[20:01] <RabidGravy> a glorified series of values

[20:01] <gfldex> a Junction is a list of values that form a closure with operators that is lazily evaluated and doesn't provide introspection (it also autothreads)

[20:01] <RabidGravy> can be any Cool as far as I understand

[20:01] <brokenchicken> Ah

[20:02] <brokenchicken> m: enum Foo => "meow"; say Foo

[20:02] <camelia> rakudo-moar 8a448d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Foo used at line 1␤Undeclared routine:␤    enum used at line 1␤␤»

[20:02] <RabidGravy> m: enum Foo ( Baz => "boo");  say Baz.value;

[20:02] <camelia> rakudo-moar 8a448d: OUTPUT«boo␤»

[20:02] <brokenchicken> m: sub foo { say $^n² }; foo 2|3|4|5|6|7|8|9

[20:02] <camelia> rakudo-moar 8a448d: OUTPUT«4␤9␤16␤25␤36␤49␤64␤81␤»

[20:04] <brokenchicken> m: "foobar".substr(0|3, 3).say

[20:04] <camelia> rakudo-moar 8a448d: OUTPUT«any(foo, bar)␤»

[20:04] <brokenchicken> hehe

[20:05] <brokenchicken> m: say "foobar".substr(0|3, 3) eq "bar"

[20:05] <camelia> rakudo-moar 8a448d: OUTPUT«any(False, True)␤»

[20:05] <brokenchicken> m: say so "foobar".substr(0|3, 3) eq "bar"

[20:05] <camelia> rakudo-moar 8a448d: OUTPUT«True␤»

[20:05] <brokenchicken> m: say so "foobar".substr(0&3, 3) eq "bar"

[20:05] <camelia> rakudo-moar 8a448d: OUTPUT«False␤»

[20:05] <brokenchicken> m: say so "barbar".substr(0&3, 3) eq "bar"

[20:05] <camelia> rakudo-moar 8a448d: OUTPUT«True␤»

[20:05] <brokenchicken> neat

[20:06] <b2gills> raiph: I edited  https://en.wikipedia.org/wiki/Option_type to include Perl 6

[20:07] <RabidGravy> he he

[20:07] <b2gills> m: my $v = 2|3|4|5|6|7|8|9; say gather $v».take # you can get the values from a Junction

[20:07] <camelia> rakudo-moar 8a448d: OUTPUT«(2 3 4 5 6 7 8 9)␤»

[20:07] <cale2> How is that junction example any different than mapping foo over a list of 2,3,4,5,6,7,8,9 ?

[20:08] *** agentzh left
[20:08] <cale2> So a junction is a special list of objects that allow threading without using a special thread operator :)

[20:09] <b2gills> Calling it threading leads many to make that mistake

[20:09] <cale2> This makes sense. So when you say 2 ~~ 3|4|2|5, it is matching 2 against all the objects at the same time

[20:09] *** agentzh joined
[20:09] <b2gills> effectively at the same time

[20:10] <RabidGravy> it's either all of the values at once, any of the value or none of the values

[20:10] <gfldex> there are different types of junctions and some will short circuit if you combine junctions with more junctions

[20:11] <brokenchicken> m: sub foo { say $^n² }; foo 2|(3|4)|5|(6|7)|8|9

[20:11] <camelia> rakudo-moar ce76f4: OUTPUT«4␤9␤16␤25␤36␤49␤64␤81␤»

[20:11] <brokenchicken> m: sub foo { say $^n² }; foo 2|(3|4)|5|(6|(7|5)|5)|8|9

[20:11] <camelia> rakudo-moar ce76f4: OUTPUT«4␤9␤16␤25␤36␤49␤25␤25␤64␤81␤»

[20:11] <b2gills> m: sub foo { $^n² }; say foo 2|(3|4)|5|(6|(7|5)|5)|8|9

[20:11] <camelia> rakudo-moar ce76f4: OUTPUT«any(4, any(9, 16), 25, any(36, any(49, 25), 25), 64, 81)␤»

[20:11] *** ggoebel left
[20:12] <timotimo> the thing is that functions/methods/operators that know nothing about junctions will automatically be spread out for you

[20:12] *** rindolf left
[20:12] <brokenchicken> m: sub foo { state $x = 0; say $x++ }; foo 2|(3|4)|5|(6|(7|5)|5)|8|9

[20:12] <camelia> rakudo-moar ce76f4: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:12] <brokenchicken> m: sub foo ($) { state $x = 0; say $x++ }; foo 2|(3|4)|5|(6|(7|5)|5)|8|9

[20:12] <camelia> rakudo-moar ce76f4: OUTPUT«0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[20:13] *** labster left
[20:14] <cale2> curious stuff

[20:20] <b2gills> cale2: The Perl 6 translation of the first point-free example from that blog post is `my &sum = &prefix:<[+]>.assuming(0);` which is pointless because that is already basically the definition of `&sum`.

[20:21] <timotimo> &[[+]] should work, too, right?

[20:23] <brokenchicken> m: with "lemon cake piece" { say "It got cake in it!" if "cake" eq .substr: any(^.chars), any(^.chars+1) }

[20:23] <camelia> rakudo-moar ce76f4: OUTPUT«It got cake in it!␤»

[20:23] <brokenchicken> m: with "lemon pie piece" { say "It got cake in it!" if "cake" eq .substr: any(^.chars), any(^.chars+1) }

[20:23] <camelia> rakudo-moar ce76f4: ( no output )

[20:23] <brokenchicken> But anyway...

[20:23] <brokenchicken> cale2: the interesting bit about Junctions is how the objects are superimposed, not that there's a list of objects. Which is why I see little relation to enums

[20:24] <brokenchicken> and most common usage is stuff like if $x eq "foo"|"bar" which really is just about saving typing

[20:26] *** buggable left
[20:26] <brokenchicken> hm... can't restart buggable. Getting "▬▬▶ _ ❚⚠❚ : ERROR Closing Link: gateway/web/frut.as/session (Install identd)"

[20:27] <cale2> m: sub my-sum() { &[[+]] }; my-sum: 1,2,3;

[20:27] <camelia> rakudo-moar ce76f4: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    infix:<[+]> used at line 1. Did you mean 'infix:<+|>', 'infix:<∖>', 'infix:<lt>'?␤␤»

[20:27] <moritz> another neat use case for junctions is in grep, like  my @even-ints = grep Int & * %% 2, @list-of-numbers;

[20:28] <brokenchicken> neat

[20:29] <timotimo> brokenchicken: what server does buggable run on?

[20:30] <brokenchicken> perl6.party

[20:32] *** bjz_ left
[20:33] <brokenchicken> mst: did freenode change its policy or it's just a glitch? Can't connect my bot; getting "Notice -- You need to install identd to use this server Closing Link: gateway/web/frut.as/session (Install identd)" with irc.freenode.net and chat.freenode.net :/

[20:34] <moritz> brokenchicken: might be related to the number of connections coming from that IP

[20:34] *** buggable joined
[20:34] *** buggable left
[20:34] <brokenchicken> hm, connects fine from another box

[20:34] <moritz> probably because all the other bots run on perl6.party too

[20:34] <mst> brokenchicken: notice you're being identified as coming from a multi-user gateway

[20:35] <mst> I'm unsure wtf frut.as is

[20:35] <brokenchicken> hmmm

[20:35] <brokenchicken> Maybe too many clients....

[20:35] <brokenchicken> Time to merge bots into one, I guess

[20:35] <mst> please don't guess and listen to me

[20:35] <brokenchicken> Listening.

[20:35] <ugexe> gfldex: why dont you use $?FILE inside the test case instead of $*PROGRAM to determine where to find your 'data' directory?

[20:36] <mst> explaining wtf frut.as is would be a start

[20:36] <mst> is that yours? or somebody else's thing you happen to be using?

[20:36] <brokenchicken> Never heard of it, no

[20:37] <mst> well it was in your error message

[20:37] <brokenchicken> Hm... https://frut.as/ "Scriptable and extensible group chat in your Browser, Android and iOS, for free."

[20:37] <brokenchicken> wtf

[20:38] <mst> right, so, that smells like a glitch

[20:38] *** domidumont left
[20:40] <ugexe> "look

[20:40] <moritz> PSA: perl6-all-modules on github has been updated again

[20:40] <ugexe> "panda look" doesnt really help you run the examples because it installs all the dependencies - thats sort of against the spirit of cocoapodstry

[20:41] <ugexe> but zef also has the look command

[20:41] *** buggable joined
[20:41] *** ChanServ sets mode: +v buggable

[20:41] *** bjz joined
[20:41] <moritz> there are a few repos that couldn't be clone; need to investigate what's up with them

[20:41] <ugexe> not all modules are git repos - some are .tar.gz archive

[20:42] *** Tonik left
[20:43] <MasterDuke> moritz++

[20:43] <mst> brokenchicken: assume glitch, don't change anything, tell me if it happens again

[20:43] <brokenchicken> OK. Thanks

[20:44] *** buggable_ joined
[20:44] *** ChanServ sets mode: +v buggable_

[20:44] *** buggable_ left
[20:45] *** ggoebel joined
[20:45] <b2gills> &[…] only works for infix operators

[20:45] *** huggable left
[20:46] *** buggable left
[20:46] *** buggable joined
[20:46] *** ChanServ sets mode: +v buggable

[20:46] *** huggable joined
[20:46] *** ChanServ sets mode: +v huggable

[20:46] <brokenchicken> \o/

[20:48] *** dugword joined
[20:48] *** kybr joined
[20:49] *** bjz left
[20:52] <timotimo> of course, thanks b2gills 

[20:52] <BenGoldberg> m: dd &[[+]]

[20:52] <camelia> rakudo-moar ce76f4: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    infix:<[+]> used at line 1. Did you mean 'infix:<+|>', 'infix:<∖>', 'infix:<lt>'?␤␤»

[20:52] <BenGoldberg> m: dd &[+]

[20:52] <camelia> rakudo-moar ce76f4: OUTPUT«Sub+{<anon|77233232>}+{Precedence} infix:<+> = sub infix:<+> (Mu $?, Mu $?) { #`(Sub+{<anon|77233232>}+{Precedence}|57532496) ... }␤»

[20:52] *** ChoHag left
[20:53] <b2gills> m: dd &prefix:<[+]>

[20:53] <camelia> rakudo-moar ce76f4: OUTPUT«Sub prefix:<[+]> = sub prefix:<[+]> (| is raw) { #`(Sub|62755480) ... }␤»

[20:54] <timotimo> moritz: thank you very much :)

[20:56] *** FROGGS left
[20:57] <moritz> timotimo: you're welcome

[20:58] <moritz> turns out there are four repos whose source-url points to non-existant repos

[20:58] <timotimo> wow, that process took hours?!

[20:58] <moritz> for example https://raw.githubusercontent.com/nbrown/p6-fcgi/master/META.info => git://github.com/carbin/p6-fcgi.git

[20:58] *** BenGoldberg left
[20:59] <timotimo> ah indeed

[20:59] <timotimo> that's not so great

[20:59] <moritz> and the repo https://github.com/nbrown/p6-fcgi doesn't even support issues

[21:00] <timotimo> http://modules.perl6.org/update.log - search for error, or for HTTP 406

[21:00] <moritz> same for p6-fcgi-psgi, p6-unix-privileges, p6-jdf

[21:00] <MasterDuke> i remember some talk about that awhile ago. i think the conclusion was that someone renamed their github acount?

[21:00] <moritz> I consider removing those URLs from META.list

[21:01] <moritz> timotimo: re took hours, I suspect github rate-limits requests after first dozen accesses or so

[21:01] *** ggoebel left
[21:01] <timotimo> we could send a mail to [email@hidden.address]
[21:01] <timotimo> ah, yes i believe it does

[21:02] <ugexe> when i clone/pull the ecosystem it takes ~15min

[21:02] <timotimo> "the ecosystem"?

[21:02] <moritz> or maybe it's git-subrepo that's super slow

[21:03] <ugexe> https://github.com/perl6/ecosystem I think most people refer to this as "the ecosystem"

[21:04] *** cale2 left
[21:04] <timotimo> that takes only a second for me to pull from

[21:05] <moritz> https://github.com/drforr/perl6-Inline-Scheme-Guile/issues/5 # another problem I've found

[21:05] *** itcharlie1 left
[21:05] <ugexe> well if you ignore the context of the current conversation then sure i guess you could assume thats what i meant

[21:05] <timotimo> "Heavily influenced by Inline::Python. Thanks, Stefan." :D

[21:05] *** TEttinger joined
[21:05] *** mr_ron left
[21:06] *** cdg joined
[21:06] <timotimo> i expected you meant something different than that repository

[21:06] <RabidGravy> I'm not sure that nbrown is the correct author of those modules

[21:06] <timotimo> because 15 minutes for that seems very abnormal

[21:06] <timotimo> you mean they perhaps forked it and since they're not the upstream they didn't turn on github issues?

[21:06] <RabidGravy> yes

[21:07] <RabidGravy> I think the upstream literally went away and we filipped to those clones

[21:07] <timotimo> ah, interesting

[21:07] <moritz> so now they are unmaintained

[21:08] <RabidGravy> maybe pull them to community trust or ditch them

[21:08] <moritz> does anybody want to take care of that?

[21:08] <moritz> (either by contacting nbrown or by adopting or whatever)

[21:08] <moritz> if not, I'll remove the URLs from META.list

[21:08] <RabidGravy> I contacted nbrown when we did it

[21:08] <RabidGravy> I didn't get a reply

[21:09] <RabidGravy> so Hmm

[21:09] <RabidGravy> leave them there right now 

[21:09] <RabidGravy> I'll clone and fix during the week

[21:10] <moritz> ++RabidGravy

[21:10] <RabidGravy> I don't really want them but you know, seems a shame to drop them

[21:10] <ugexe> im still waiting for someone to create a module with a namespace already in use but with a different auth, and then insert it into META.list such that the order of a request for "Name::Only" points to the new dist

[21:11] <brokenchicken> buggable: eco

[21:11] <buggable> brokenchicken, Out of 773 Ecosystem dists, 124 have warnings and 6 have errors. See https://modules.perl6.org/update.log for details

[21:11] <RabidGravy> and I think we sent PRs for all the errors and warnings back last year

[21:12] *** bjz joined
[21:12] <brokenchicken> hm, bunch of those errors are 406s from gitlab :/

[21:12] <RabidGravy> so that's a lot of ignoring

[21:14] <RabidGravy> we need more ecosystem fairies

[21:15] <moritz> I'd propose to require a contact email address in META6.json in future

[21:15] <RabidGravy> what with a few modules of my own and a dozen I "co-maint" and stuff it's never ending

[21:15] <moritz> and then we could do things like automate emails when stuff goes south

[21:15] <RabidGravy> moritz++ # +1 on that

[21:16] <moritz> and if the situation remains unresolved, we can at least them emails informing them that the repo has been removed from the ecosystem

[21:21] *** bjz left
[21:22] <RabidGravy> can I suggest then  '"support" : { "email" : "whatever" } ' as per the original intent of S22

[21:22] *** _28_ria joined
[21:23] *** _28_ria left
[21:23] *** ggoebel joined
[21:24] <brokenchicken> damn, my weechat session keeps "freezing" :S It looks like no one's talking; I think close terminal reconnect to server and reopen screen and boom! People were actually talking all this time :(

[21:24] *** _28_ria joined
[21:25] <geekosaur> -o ServerAliveInterval=secs -o ServerAliveCount=n

[21:25] <geekosaur> (ssh)

[21:25] <moritz> brokenchicken: you can take a look at the public logs too :-)

[21:25] <brokenchicken> moritz: they don't let me talk easily

[21:26] <geekosaur> great way to defeat NAT appliances with excessively short timeouts (unless they're as short as the one here, which will time out in under a second under heavy load!)

[21:26] <brokenchicken> Hm, never needed those in the past :/

[21:27] <brokenchicken> geekosaur: so what sort of values should I use? really big?

[21:27] *** agentzh left
[21:28] <brokenchicken> command-line: line 0: Bad configuration option: serveralivecount

[21:28] <geekosaur> generally I use a short interval like 1 so it's always keeping the link active (which should reset the NAT timeout). count can be whatever, the shorter it is then the faster ssh will find out the NAT entry got dropped or the upstream router otherwise fell on its face

[21:28] <geekosaur> what version of ssh?

[21:29] <geekosaur> oh, sorry, it's ServerAliveCountMax

[21:29] <geekosaur> should have cut and pasted >.<

[21:29] <brokenchicken> k... let's see how this goes :)

[21:32] <Geth>  doc: antquinonez++ created pull request #1154: Style cleanup.

[21:32] <Geth>  doc: review: https://github.com/perl6/doc/pull/1154

[21:34] <brokenchicken> .oO( tl;dr )

[21:34] <brokenchicken> Too Long; Didn't Review :)

[21:36] *** agentzh joined
[21:45] *** andrzejku left
[21:46] *** rumble joined
[21:47] *** rumble is now known as grumble

[21:54] *** Khisanth left
[22:07] *** Khisanth joined
[22:10] *** _28_ria left
[22:12] *** _28_ria joined
[22:12] *** RabidGravy left
[22:12] *** _28_ria left
[22:13] *** _28_ria joined
[22:32] *** dj_goku joined
[22:32] *** dj_goku left
[22:32] *** dj_goku joined
[22:37] *** dj_goku left
[22:40] <brokenchicken> geekosaur++ those ssh opts seem to have helped! :)

[22:48] *** wamba left
[22:49] *** chinarulezzz left
[22:51] *** cdg left
[22:51] *** mr_ron joined
[23:00] *** mr_ron left
[23:04] *** pecastro left
[23:04] <agentzh> sorry if it's a FAQ, but what is the equivalent of p5 regex's \G in p6?

[23:04] <yoleaux> 06:22Z <CIAvash> agentzh: Is this the issue you're experiencing? https://rt.perl.org/Public/Bug/Display.html?id=127309

[23:05] *** pecastro joined
[23:05] <agentzh> yoleaux: i don't think so :)

[23:07] <brokenchicken> No idea, but let me know if you find out.

[23:07] *** _28_ria left
[23:08] *** _28_ria joined
[23:09] *** _28_ria left
[23:09] *** Cabanossi left
[23:10] <agentzh> yoleaux: my example is more like this: https://gist.github.com/agentzh/1e61c6267c1961fce7f05d436865977d

[23:10] *** _28_ria joined
[23:10] <agentzh> but this simplified version does work in rakudo.

[23:11] <agentzh> the real thing doesn't and i have to remove the type constraint from the hash class attribute.

[23:11] <agentzh> brokenchicken: thanks, sure.

[23:12] *** felher joined
[23:12] *** jsimonet joined
[23:12] <agentzh> brokenchicken: found the <at($oldpos)> trick in the A05 doc. and it seems to work in rakudo. yay!

[23:13] <agentzh> but the Regexes doc on docs.perl6.org does not mention this trick.

[23:13] <agentzh> it's not as elegant as Perl 5's \G, but i can live with it for now.

[23:14] <agentzh> i'll add convenient construct (:l) to our own perl 6 dialect.

[23:19] <agentzh> brokenchicken: seems like m:p($oldpos)// is a better fit for my use case :)

[23:20] <agentzh> better than m:c($pos)/ <at($pos)> ... /

[23:22] *** _28_ria left
[23:22] <brokenchicken> agentzh: yoleaux is a messanger bot...

[23:22] <agentzh> brokenchicken: okay, good to know :)

[23:23] *** _28_ria joined
[23:25] *** _28_ria left
[23:26] <brokenchicken> agentzh: Feel free to file a bug report for that (for wanting a better \G stuff)

[23:26] *** labster joined
[23:26] <brokenchicken> huggable: rakudobug

[23:26] <huggable> brokenchicken, Report bugs by emailing to [email@hidden.address]
[23:27] *** _28_ria joined
[23:31] *** jsimonet left
[23:33] *** dj_goku joined
[23:36] *** agentzh left
[23:38] *** jsimonet joined
[23:40] *** espadrine_ left
[23:42] <japhb> Is there a portable way to tell Perl 6 to unbuffer $*IN?  (I know about using e.g. Term::termios, I'm asking if there's something that will work on Windows too.)

[23:43] <geekosaur> that question is moderately confused, as there's at least two lyers of buffering, one of which does not apply to Windows

[23:44] <geekosaur> ...and you mentioned that ibe

[23:44] <geekosaur> *one

[23:45] *** zacts left
[23:45] <geekosaur> (windows is always in character at a time mode, at the driver level. this is distinct from the input buffering most likely provided, in the case of moarvm, by libuv --- which is also likely to default to line mode.)

[23:45] <japhb> geekosaur: I am aware of Moar buffering to look for combining characters, and the terminal line buffering ... what others do I need to worry about if I just want 'getc' to respond immediately after a keypress?

[23:46] <japhb> Ah, I didn't realize a terminal app in Windows would be getting characters.  Hmmm, I didn't assume libuv was doing additional buffering of its own in the middle.  :-/

[23:47] <japhb> *getting characters immediately

[23:49] *** pmurias left
[23:49] <japhb> OTOH, libuv either must do no buffering, or pays attention to the termios settings itself, or Term::termios couldn't successfully set raw input mode.

[23:50] <japhb> That was tortured English, sigh

[23:51] <geekosaur> it's typical for programs to check isatty() (which uses termios) and set line vs. block buffering

[23:52] <geekosaur> I'm looking at the libuv docs and they say very little about buffering. I suspect libuv doesn't expect to be used with terminals

[23:52] <geekosaur> it's all about the sockets >.>

[23:53] <japhb> Sigh.

[23:54] <japhb> But in any case, I expected the line v. block buffering.  My point was that when Term::termios does .makeraw and goes to non-buffered format, libuv would have to notice that and turn off internal buffering (if it has any), or that operation wouldn't actually do anything useful.

[23:55] <geekosaur> actually it's worse than that

[23:55] <japhb> On the downside, I just tested it ... the MoarVM buffering looking for combining characters is problematic, because it's effectively 'unbuffered, but with a one character delay'

[23:55] <geekosaur> if moar is using normal handles for this, libuv is not expecting it; it does not check for tty, it expects you to be using uv_tty_t in that case

[23:56] * geekosaur is reading code presented in https://github.com/libuv/libuv/issues/852

[23:56] * japhb looks

[23:56] <geekosaur> and yes, if you want raw input you need to disable encoding handling. I didn;t notice a way to do that on the fly with p6 published api

[23:57] <geekosaur> basically its the node devs asking the same question you were :)

[23:57] <geekosaur> er, node.js

[23:57] <japhb> heh

[23:58] *** agentzh joined
[23:58] *** cyphase left
[23:58] *** lukiramu left
[23:58] *** _28_ria left
[23:59] <japhb> .ask jnthn is there a way to stop doing encoding handling on $*IN?  I want to get truly raw .getc (one character at a time, as soon as the keypress happens), without the delay loop that comes from looking for combining characters ....

[23:59] <yoleaux> japhb: I'll pass your message to jnthn.

