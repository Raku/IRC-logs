[00:07] <elaADnlxie> m: class Foo { has $.a; has $.b }; my $x = ‘hello’ but Foo.new(:25a, :35b); say $x

[00:07] <camelia> rakudo-moar 75e070: OUTPUT: «hello␤»

[00:07] <elaADnlxie> how do I check if Foo is mixed in?

[00:07] <elaADnlxie> ~~ Foo doesn't work

[00:07] *** wamba left
[00:07] <elaADnlxie> and it kinda makes sense, because it ends up being some anonymous thingy

[00:07] <BenGoldberg> m: class Foo { has $.a; has $.b }; my $x = ‘hello’ but Foo.new(:25a, :35b); say $x.WHAT

[00:07] <camelia> rakudo-moar 75e070: OUTPUT: «(Str+{<anon|32065072>})␤»

[00:08] <BenGoldberg> m: role Foo { has $.a; has $.b }; my $x = ‘hello’ but Foo.new(:25a, :35b); say $x.WHAT

[00:08] <camelia> rakudo-moar 75e070: OUTPUT: «(Str+{<anon|44463664>})␤»

[00:08] <BenGoldberg> m: role Foo { has $.a; has $.b }; my $x = ‘hello’ but Foo.new(:25a, :35b); say $x ~~ Foo

[00:08] <camelia> rakudo-moar 75e070: OUTPUT: «False␤»

[00:09] <elaADnlxie> I guess I can do something like this

[00:09] <elaADnlxie> m: class Foo { has $.a; has $.b }; my $x = ‘hello’ but Foo.new(:25a, :35b); say so $x.?Foo

[00:09] <camelia> rakudo-moar 75e070: OUTPUT: «True␤»

[00:09] <elaADnlxie> but I prefer this form

[00:09] <elaADnlxie> m: class Foo { has $.a; has $.b }; my $x = ‘hello’ but Foo.new(:25a, :35b); say so Foo($x)

[00:09] <camelia> rakudo-moar 75e070: OUTPUT: «True␤»

[00:09] <elaADnlxie> oh, it works!

[00:09] <elaADnlxie> no, not really, it's going to throw

[00:09] <elaADnlxie> m: class Foo { has $.a; has $.b }; my $x = ‘hello’ but Foo.new(:25a, :35b); say so Foo(42)

[00:09] <camelia> rakudo-moar 75e070: OUTPUT: «Cannot find method 'Foo' on object of type Int␤  in block <unit> at <tmp> line 1␤␤»

[00:09] <elaADnlxie> yup

[00:10] <elaADnlxie> m: class Foo { has $.a; has $.b }; my $x = ‘hello’ but Foo.new(:25a, :35b); say so try Foo(42)

[00:10] <camelia> rakudo-moar 75e070: OUTPUT: «False␤»

[00:10] <elaADnlxie> m: class Foo { has $.a; has $.b }; my $x = ‘hello’ but Foo.new(:25a, :35b); say so try Foo($x)

[00:10] <camelia> rakudo-moar 75e070: OUTPUT: «True␤»

[00:10] <elaADnlxie> fine.

[00:13] *** ufobat left
[00:14] *** llfourn joined
[00:17] *** rindolf left
[00:18] *** perlawhirl left
[00:33] *** go|dfish left
[00:35] *** go|dfish joined
[00:38] *** cdg left
[01:01] *** astj joined
[01:03] *** astj left
[01:03] *** vike left
[01:04] *** astj joined
[01:05] *** Actualeyes joined
[01:13] *** aborazmeh joined
[01:13] *** aborazmeh left
[01:13] *** aborazmeh joined
[01:18] *** espadrine left
[01:20] <ZzZombo> MasterDuke, what code? I don't recall any, so whatever, ignore it.

[01:21] *** lukaramu_ left
[01:29] <ZzZombo> So, there are my gripes with how operators are done:

[01:29] <ZzZombo> sub or not to sub: all of them are implemented as subs, and you can't provide a method handler for an operator w/o a new proto;

[01:29] <ZzZombo> Subs Can't Into Self, or You Lose Access To Private Attributes and Methods. And yea, MOP is a thing, but you can't argue that's a dirty workaround;

[01:29] <ZzZombo> new proto: you lose access to all previously defined operators under that name, so you can't, say, %h<a b c> anymore in your code if you redefine post <{ }>;

[01:29] <ZzZombo> also, if you do stick to subs: subs defined in a class can't be seen by outside users of the module for whatever stupid reason; can't export more than one by placing them outside a class because they would share one name.

[01:30] *** risou_awy is now known as risou

[01:39] <elaADnlxie> ZzZombo: wait, what were you trying to do exactly?

[01:40] <ZzZombo> Oh, yea, forgot one point: you can't pass new named arguments into AT-KEY because the default operator <{}> will complain about unknown parameters.

[01:41] <ZzZombo> I wanted to handle AT-KEY differently with some switches passed into it.

[01:43] <MasterDuke> ZzZombo: i think it was tbrowder who had a good blog post about exporting, let me see if i can find it

[01:44] <MasterDuke> ZzZombo: http://blogs.perl.org/users/tom_browdef/2016/10/avoiding-namespace-pollution-with-modules-in-perl-6.html

[01:52] *** vike joined
[01:56] *** kyan joined
[01:56] *** BenGoldberg left
[01:57] <ZzZombo> m: package A { multi x is export { say 'x' };multi x(2) is export { say 'x-2' } };say A::EXPORT::ALL::.keys,A::<&x>,A::<&x>(2)

[01:57] <camelia> rakudo-moar 75e070: OUTPUT: «Cannot find method 'Any' on object of type Int␤  in block <unit> at <tmp> line 1␤␤»

[01:58] <ZzZombo> m: package A { multi x is export { say 'x' };multi x(2) is export { say 'x-2' } };say A::EXPORT::ALL::.keys,&A::x,&A::x(2)

[01:58] <camelia> rakudo-moar 75e070: OUTPUT: «Cannot find method 'Any' on object of type Int␤  in block <unit> at <tmp> line 1␤␤»

[02:00] *** kyan left
[02:10] *** kyan joined
[02:25] *** k-man left
[02:27] *** k-man joined
[02:37] *** llfourn left
[02:37] <lucs> Do I need a ｢constant k = 42;｣ for each constant I declare, or is there some shortcut like Perl 5's ｢use constant x => 42, y => 66, ...｣?

[02:38] *** llfourn joined
[02:46] *** ilbot3 left
[02:47] *** ilbot3 joined
[02:47] *** ChanServ sets mode: +v ilbot3

[02:50] <lucs> Is ｢goto LABEL; ⋯ LABEL: ⋯｣ supposed to work?

[02:51] <lucs> Sheesh, is everyone watching the Oscars? :-)

[02:54] <MasterDuke> lucs: i don't think goto is implemented. but other flow control is, e.g., `next LABEL`

[02:55] <lucs> Oh, hmm... I'll try that.

[02:56] <lucs> Yeah, I kind of expected it to fail (it did) if the label came later than the 'next'.

[02:59] *** xtreak joined
[03:03] *** perlawhirl joined
[03:03] *** aborazmeh left
[03:22] *** noganex joined
[03:24] <elaADnlxie> m: my (\x, \y, \z) = 5, 15, 32; say y + z

[03:24] <camelia> rakudo-moar 75e070: OUTPUT: «47␤»

[03:24] <elaADnlxie> what's the difference between constants and sigilles variables?

[03:26] *** noganex_ left
[03:34] <lucs> elaADnlxie: Did you fall down the stairs?

[03:34] <elaADnlxie> at some point, perhaps

[03:34] <lucs> It appears to have broken your nick.

[03:35] <elaADnlxie> oh that… it will take some time to heal I guess

[03:35] <lucs> :)

[03:36] <elaADnlxie> lucs: I'm thinking, if you have so many constants, maybe you want a hash intsead? Or maybe an Enum?

[03:37] <lucs> Oh, an enum sounds good (looking it up in the docs).

[03:39] <samcv> elaADnlxie, sigilless does := whenever you do = and doesn't have a scalar container

[03:40] <elaADnlxie> m: constant \x := 50; say x

[03:40] <camelia> rakudo-moar 75e070: OUTPUT: «50␤»

[03:40] <elaADnlxie> :S

[03:56] *** risou is now known as risou_awy

[04:00] *** statisfiable6 left
[04:01] <geekosaur> that doesn't look like falling down stairs so much as transporter accident >.>

[04:17] <lucs> :)

[04:25] <elaADnlxie> m: my regex abc { ‘aaa’ }; my regex xyz { <abc> }; say ‘aaa’ ~~ /<xyz>/

[04:25] <camelia> rakudo-moar 75e070: OUTPUT: «｢aaa｣␤ xyz => ｢aaa｣␤  abc => ｢aaa｣␤»

[04:25] <elaADnlxie> m: my regex abc { ‘aaa’ }; my regex xyz { <.abc> }; say ‘aaa’ ~~ /<xyz>/

[04:25] <camelia> rakudo-moar 75e070: OUTPUT: «No such method 'abc' for invocant of type 'Cursor'␤  in regex xyz at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[04:25] <elaADnlxie> shouldn't the dot simply mean that no capture is needed?

[04:28] *** xtreak left
[04:29] *** risou_awy is now known as risou

[04:31] *** xtreak joined
[04:38] *** vike left
[04:46] *** risou is now known as risou_awy

[04:49] *** jraglin joined
[04:50] *** Cabanoss- joined
[04:50] *** risou_awy is now known as risou

[04:51] <lucs> How do I do this?:  my ($first, ｢don't care about this one｣, $third) = func-that-returns-three-values;

[04:52] <geekosaur> my ($first, $, $third) = ...

[04:52] <lucs> Ah, thanks. 

[04:53] <lucs> What keywords should I look up in the docs for an explanation of this?

[04:53] <lucs> (What's ｢$｣?)

[04:54] *** Cabanossi left
[04:54] *** Cabanoss- is now known as Cabanossi

[04:55] <geekosaur> technically it's an anonymous state variable. here it does nothing except silently consume a parameter

[04:55] <geekosaur> (since it's only accessible by its position in the code, and here it can only be assigned to)

[04:56] *** statisfiable6 joined
[04:56] *** ChanServ sets mode: +v statisfiable6

[04:56] *** statisfiable6 left
[04:59] *** jraglin left
[05:00] <lucs> geekosaur: Cool, found it in the Variables doc, thanks.

[05:01] *** astj_ joined
[05:01] *** astj left
[05:03] *** itcharlie1 left
[05:05] *** vike joined
[05:09] *** jraglin joined
[05:09] *** khw left
[05:10] <tony-o> Any also works

[05:11] <tony-o> m: sub x() { return 1, 2, 3; }; my ($x, Any, $y) = (x); "x=$x, y=$y".say;

[05:11] <camelia> rakudo-moar 75e070: OUTPUT: «x=1, y=3␤»

[05:13] <lucs> Aha, noted, thanks.

[05:19] <tony-o> m: my (Any) = sub { return 1; };

[05:19] <camelia> rakudo-moar 75e070: ( no output )

[05:20] <tony-o> that's what all of my modules do 

[05:20] <tony-o> just exports an anonymous Any

[05:21] *** wamba joined
[05:26] <lucs> tony-o: Is this something I should try to understand? Just looks kinda weird to me :/

[05:27] <lucs> In the meanwhile...:

[05:27] <lucs> What's the difference between these that makes the first one work, but the second one fail?

[05:27] <lucs> m: my ($x, $y) = | ( '12' ~~ / (\d) (\d) / ); print "$x - $y"

[05:27] <camelia> rakudo-moar 75e070: OUTPUT: «1 - 2»

[05:27] <lucs> m: sub foo { return | ( '12' ~~ / (\d) (\d) / ) }; my ($x, $y) = foo; print "$x - $y"

[05:27] <camelia> rakudo-moar 75e070: OUTPUT: «Unexpected named argument '' passed␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[05:29] <tony-o> lucs: it's just shorthand for what you asked above, it's an anonymous sub returning and assigning to an Any

[05:29] <tony-o> well, assining the first of the return values

[05:30] *** CIAvash joined
[05:30] <lucs> Oh, I see, okay.

[05:32] <tony-o> that looks like a bug, tho it works with an explicit array in the sub

[05:33] <tony-o> m: sub foo { return |@( '12' ~~ / (\d) (\d) / ) }; my ($x, $y) = foo; print "$x - $y";

[05:33] <camelia> rakudo-moar 75e070: OUTPUT: «1 - 2»

[05:33] <lucs> m: sub foo { return @( '12' ~~ / (\d) (\d) / ) }; my ($x, $y) = foo; print "$x - $y"

[05:33] <camelia> rakudo-moar 75e070: OUTPUT: «1 - 2»

[05:33] <lucs> Slip unnecessary it appears.

[05:33] <tony-o> yea

[05:34] <tony-o> only because you have an explicit array

[05:34] <tony-o> m: sub foo { return ( '12' ~~ / (\d) (\d) / ) }; my ($x, $y) = foo; print "$x - $y";

[05:34] <camelia> rakudo-moar 75e070: OUTPUT: «Use of uninitialized value $y of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤12 - »

[05:34] <lucs> Yep.

[05:36] *** skids left
[05:36] <ZzZombo> m: use MONKEY-TYPING;augment package GLOBAL { multi sub postcircumfix:<{ }>(Str:D \S: Whatever) { say 'D: '; S} };say 'Str!!!'{*}

[05:36] <camelia> rakudo-moar 75e070: OUTPUT: «===SORRY!===␤Cannot declare pseudo-package GLOBAL␤»

[05:36] <ZzZombo> but I'm not declaring that!

[05:37] <tony-o> lol

[05:38] <ZzZombo> Also why does https://docs.perl6.org/syntax/augment come from variables? Better place would be syntax.

[05:39] *** llfourn left
[05:40] *** mcmillhj joined
[05:41] *** faraco joined
[05:41] <faraco> howdy

[05:46] *** elaADnlxie left
[06:08] *** bwisti left
[06:14] *** eroux left
[06:18] *** mcmillhj left
[06:33] *** ggoebel left
[06:34] *** llfourn joined
[06:39] *** jraglin left
[06:39] *** llfourn left
[06:40] *** wamba left
[06:43] *** xtreak left
[06:47] *** xtreak joined
[06:48] *** darutoko joined
[06:48] *** ggoebel joined
[06:51] *** cibs left
[06:52] *** jraglin joined
[06:52] *** RabidGravy joined
[06:56] *** gdonald_ left
[06:56] *** gdonald_ joined
[06:57] *** nine_ is now known as nine

[06:59] *** cibs joined
[07:03] *** ZzZombo left
[07:03] *** ufobat joined
[07:07] *** jraglin left
[07:09] *** jraglin joined
[07:10] *** ZzZombo joined
[07:10] *** ZzZombo left
[07:10] *** ZzZombo joined
[07:14] *** xtreak left
[07:14] *** wamba joined
[07:15] *** perlawhirl left
[07:16] *** xtreak joined
[07:33] *** llfourn joined
[07:36] *** jraglin_ joined
[07:37] <moritz> good morning

[07:39] *** bjz joined
[07:39] *** jraglin left
[07:39] <samcv> morning

[07:40] *** mcmillhj joined
[07:41] <moritz> here in the underground train, we have good LTE reception; but as soon as it goes above ground, connectivity drops

[07:41] <moritz> weird stuff

[07:41] <samcv> less phones attached prolly

[07:41] <jast> I tend to have better connectivity in underground trains than at home

[07:41] <samcv> and less distance

[07:42] <moritz> samcv: sounds sensible

[07:42] <moritz> jast: I live 200m from the next mobile antenna mast thingy, so hard to beat connectivity at home :-)

[07:45] *** mcmillhj left
[07:45] <jast> the next one here is ~500-600m away but my phone likes picking base stations on the other side of the globe

[07:46] *** mr-foobar left
[07:47] *** mcmillhj joined
[07:53] *** abraxxa joined
[07:54] <ufobat> morning :)

[07:55] *** mcmillhj left
[07:55] <moritz> \o ufobat 

[07:59] <ufobat> :D

[07:59] <ZzZombo> hmm, how can I predeclare a class?

[08:00] <ZzZombo> I have two classes mutually depending on each other.

[08:00] <moritz> yess

[08:00] <moritz> class A { ... }; class B { has A $.x }; class A is B { }

[08:00] <moritz> with literal ...

[08:01] <ZzZombo> huh

[08:01] <ZzZombo> I tried class {*}

[08:01] <ZzZombo> and it didn't work

[08:01] <ZzZombo> dat consistency!

[08:01] <moritz> {*} means "re-dispatch"

[08:01] <moritz> ... means "I haven't made up my mind yet"

[08:02] <moritz> m: sub f { ... }; f()

[08:02] <camelia> rakudo-moar 75e070: OUTPUT: «Stub code executed␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[08:03] *** mcmillhj joined
[08:06] <ufobat> moritz, i think in your example both classes must be within one file?

[08:06] <moritz> ufobat: yes

[08:08] <TimToady> m: need Test; say MY::.keys

[08:08] <camelia> rakudo-moar 75e070: OUTPUT: «($=pod $_ $/ !UNIT_MARKER $=finish EXPORT $! ::?PACKAGE GLOBALish Test $¢ $?PACKAGE)␤»

[08:08] <TimToady> you can declare a name with 'need', if that helps, and in theory it should not need it compiled yet

[08:08] <ZzZombo> m: my multi postcircumfix:<{ }> x(\SELF:){dd SELF}

[08:08] <camelia> rakudo-moar 75e070: OUTPUT: «===SORRY!===␤Cannot call method '!cursor_init' on a null object␤»

[08:08] <ZzZombo> m: my multi x(\SELF:){dd SELF}

[08:08] <camelia> rakudo-moar 75e070: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Can only use the : invocant marker in the signature for a method␤at <tmp>:1␤------> 3my multi x(\SELF:7⏏5){dd SELF}␤»

[08:08] <ZzZombo> m: my multi x(\SELF){dd SELF}

[08:08] <camelia> rakudo-moar 75e070: ( no output )

[08:08] <ZzZombo> m: my multi postcircumfix:<{ }> x(\SELF){dd SELF}

[08:08] <camelia> rakudo-moar 75e070: OUTPUT: «===SORRY!===␤Cannot call method '!cursor_init' on a null object␤»

[08:09] <ZzZombo> oh gosh

[08:11] *** mcmillhj left
[08:11] <TimToady> a postcircumfix needs two args

[08:11] <ZzZombo> m: my multi postcircumfix:<{ }> x(\SELF,*@_){dd SELF,@_}

[08:11] <camelia> rakudo-moar 75e070: OUTPUT: «===SORRY!===␤Cannot call method '!cursor_init' on a null object␤»

[08:12] <TimToady> but, yeah...

[08:12] <ZzZombo> m: my multi postcircumfix:<{ }> x(\SELF,$a){dd SELF,$a}

[08:12] <camelia> rakudo-moar 75e070: OUTPUT: «===SORRY!===␤Cannot call method '!cursor_init' on a null object␤»

[08:12] <TimToady> likely a bug

[08:13] <ZzZombo> also why does 'operator' doesn't link to a page where we are told how to define them in the docs search?

[08:14] <ZzZombo> instead we get a metric ton of defferent operators in the language.

[08:14] <TimToady> we do both of those things to discourage people from defining their own operators :)

[08:15] *** _sfiguser joined
[08:15] <_sfiguser>  hello all, somebody could give me some infos about the future of perl 5 with respect to perl 6 ? i mean... i know they are different languages such as C and C++, but is the focus mainly on perl 6 and perl5 is destined to die or what ?

[08:15] *** kyan left
[08:15] <TimToady> some people focuse on Perl 5, while others focus on Perl 6.  That is all.

[08:16] <ZzZombo> m: my postcircumfix:<{ }> x(\SELF,$a){dd SELF,$a}

[08:16] <camelia> rakudo-moar 75e070: OUTPUT: «5===SORRY!5===␤Type 'postcircumfix:<{ }>' is not declared␤at <tmp>:1␤------> 3my postcircumfix:<{ }>7⏏5 x(\SELF,$a){dd SELF,$a}␤Malformed my␤at <tmp>:1␤------> 3my postcircumfix:<{ 7⏏5}> x(\SELF,$a){dd SELF,$a}␤␤»

[08:16] <ZzZombo> what

[08:17] <ZzZombo> ah

[08:17] <ZzZombo> m: my sub postcircumfix:<{ }> x(\SELF,$a){dd SELF,$a}

[08:17] <camelia> rakudo-moar 75e070: OUTPUT: «===SORRY!===␤Cannot call method '!cursor_init' on a null object␤»

[08:17] <TimToady> there is no plan to end-of-life Perl 5, just as there was never any plan to end-of-life Perl 4, or 3, or 2, or 1

[08:18] *** xinming joined
[08:19] <moritz> and Perl 5 has a very active (and growing) developer community

[08:20] *** rindolf joined
[08:20] *** xinming_ left
[08:21] <TimToady> ZzZombo: you have a spurious x in that expression

[08:21] <ZzZombo> how is that?

[08:21] <TimToady> m: my multi postcircumfix:<{ }> (\SELF,$a){dd SELF,$a}

[08:21] <camelia> rakudo-moar 75e070: ( no output )

[08:22] <ZzZombo> yea, great, now it can't be referred to, can it?

[08:22] <ZzZombo> m: multi postcircumfix:<{ }>(\SELF,$a){dd SELF,$a}

[08:22] <camelia> rakudo-moar 75e070: ( no output )

[08:22] <TimToady> postcircumfix:<{ }> is the name of the function; you can't individually name candidates

[08:23] <TimToady> you distinguish candidates by type of arguments, not by names

[08:23] <TimToady> m: my multi postcircumfix:<{ }> (Int \SELF,$a){dd SELF,$a}; 42{43}

[08:23] <camelia> rakudo-moar 75e070: OUTPUT: «42␤Int $a = 43␤»

[08:23] <ZzZombo> the thing is that I have to export that from my class of my module, so that associative indexing will work correctly for it.

[08:24] *** xtreak left
[08:25] <ZzZombo> but it just doesn't work, IOninja had a workaround but I felt like that's just a dirty hack, but seems I at loss here, and will have to use that instead, as the language is extremely uncooperative here.

[08:25] <TimToady> and just adding 'is export' doesn't do it? hmm

[08:26] <ZzZombo> yes

[08:26] <moritz> ZzZombo: have you tried overriding AT_KEY and friends?

[08:26] <ZzZombo> m: say CORE::<&infix:<eqv>>

[08:26] <camelia> rakudo-moar 75e070: OUTPUT: «sub infix:<eqv> ($?, $?) { #`(Sub+{<anon|71760208>}+{Precedence}|27563648) ... }␤»

[08:26] <moritz> or AT-KEY, or whatever they're called these days :-)

[08:26] *** xtreak joined
[08:27] <ZzZombo> moritz: I did, but as I've said multiple times already, they won't get any additional params that I need, so I have to provide a custom postc <{ }>

[08:27] *** ufobat left
[08:28] <TimToady> if 'is export' doesn't work, I'd call it a bug

[08:29] *** bjz left
[08:30] <ZzZombo> m: say CORE::<&postcircumfix:<{ }>>

[08:30] <camelia> rakudo-moar 75e070: OUTPUT: «Value of type List uselessly passed to val()␤  in block <unit> at <tmp> line 1␤(Nil Nil)␤»

[08:30] <_sfiguser> which are the current applications of perl 6  ? where is it used ? 

[08:30] <ZzZombo> m: say CORE::<&infix:<eqv>>

[08:30] <camelia> rakudo-moar 75e070: OUTPUT: «sub infix:<eqv> ($?, $?) { #`(Sub+{<anon|71760208>}+{Precedence}|46945920) ... }␤»

[08:30] <ZzZombo> WTF

[08:31] <moritz> _sfiguser: most production uses I know of involve some fair amount of text precessing/parsing

[08:31] <ZzZombo> m: dd CORE::<&postcircumfix:<{ }>>

[08:31] <camelia> rakudo-moar 75e070: OUTPUT: «Value of type List uselessly passed to val()␤  in block <unit> at <tmp> line 1␤(Nil, Nil)␤»

[08:32] <TimToady> m: say &postcircumfix:<{ }>

[08:32] <camelia> rakudo-moar 75e070: OUTPUT: «sub postcircumfix:<{ }> (| is raw) { #`(Sub+{<anon|71760480>}+{Precedence}+{<anon|71760480>}|40297920) ... }␤»

[08:33] <ZzZombo> but why?..

[08:33] <ZzZombo> is it not in CORE, by chance?

[08:33] <TimToady> because you used qw syntax

[08:34] *** zakharyas joined
[08:34] <TimToady> m: say CORE::{'&postcircumfix:<{ }>'"

[08:34] <camelia> rakudo-moar 75e070: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say CORE::{'&postcircumfix:<{ }>'7⏏5"␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier…»

[08:34] <moritz> m: say CORE::{'&postcircumfix:<{ }>'}

[08:34] <camelia> rakudo-moar 75e070: OUTPUT: «sub postcircumfix:<{ }> (| is raw) { #`(Sub+{<anon|71760480>}+{Precedence}+{<anon|71760480>}|55539184) ... }␤»

[08:34] <TimToady> yeah, that

[08:35] <TimToady> iow, CORE::<foo bar> is a list of two words

[08:35] <TimToady> and you have a space in the middle of the operator name, so that doesn't work

[08:36] <TimToady> <> subscripts are really only for simple strings like identifiers, so they slice rather than join(' ')

[08:37] <ZzZombo> yea, I get it.

[08:37] *** bjz joined
[08:41] *** mcmillhj joined
[08:42] *** ufobat joined
[08:43] *** xtreak left
[08:43] *** jraglin_ left
[08:44] *** pyrimidi_ joined
[08:44] *** pyrimidine left
[08:46] *** mcmillhj left
[08:47] *** wamba left
[08:56] *** ChoHag joined
[09:01] *** bjz left
[09:03] *** jonas1 joined
[09:07] *** bjz joined
[09:08] *** domidumont joined
[09:12] *** xtreak joined
[09:32] *** wamba joined
[09:43] *** astj_ left
[09:43] *** astj joined
[09:48] *** astj left
[09:58] *** xinming left
[09:59] *** xinming joined
[10:01] *** astj joined
[10:02] *** robertle joined
[10:03] *** mcmillhj joined
[10:06] *** astj left
[10:07] *** grumble left
[10:08] *** mcmillhj left
[10:08] *** grumble joined
[10:09] *** mxco86 left
[10:12] *** mxco86 joined
[10:17] *** astj joined
[10:22] *** TEttinger left
[10:22] *** smash_ is now known as smash

[10:25] *** breinbaas left
[10:28] *** eroux joined
[10:28] *** breinbaas joined
[10:34] *** astj left
[10:35] *** astj joined
[10:37] *** astj left
[10:37] *** astj joined
[10:37] *** faraco left
[10:41] *** ChoHag left
[10:42] *** xtreak left
[10:44] *** xtreak joined
[10:45] *** parv joined
[10:50] *** wamba left
[10:50] *** koki1 joined
[10:53] *** chansen_ left
[10:53] *** TeamBlast left
[10:53] *** chansen_ joined
[10:58] *** k-man left
[11:00] *** k-man joined
[11:06] *** mcmillhj joined
[11:10] *** wamba joined
[11:10] *** mcmillhj left
[11:12] *** _sfiguser left
[11:17] <ZzZombo> <TimToady> if 'is export' doesn't work, I'd call it a bug

[11:17] <ZzZombo> I've had a peek in the code and have been extensively reading the docs, so I dunno how much of a bug this is rather than a logical consequence of how things are done in P6.

[11:18] <ZzZombo> When you define a new multi for an existing operator, it defines a lexical (my) sub in the scope.

[11:19] <ZzZombo> When you invoke it, it gets called if possible, that's, the signatures match.

[11:19] <ZzZombo> But if not, the dispatch checks the other multies, since they were already declared.

[11:20] *** xtreak left
[11:23] <ZzZombo> Now, when you import a module that exports an operator defined in such way, it doesn't get exported because there is already something under that name.

[11:24] <ZzZombo> Coming from CORE, in this case.

[11:24] *** ufobat left
[11:24] <ZzZombo> m: package A { sub say is export { put 'said'}};import A;say;

[11:24] <camelia> rakudo-moar 4ef1e6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of bare "say"; in Perl 6 please use .say if you meant to call it as a method on $_, or use an explicit invocant or argument, or use &say to refer to the function as a noun␤at <tmp>:1␤--…»

[11:25] <ZzZombo> IDK, seems like this is what happens.

[11:25] *** _sfiguser joined
[11:25] <ZzZombo> So ultimately, doesn't seem like you can legitimately export an operator yet.

[11:27] *** lucasb joined
[11:29] <lucasb> m: my %h1 = :a, :b; %h1 = %h1; say %h1

[11:29] <camelia> rakudo-moar 4ef1e6: OUTPUT: «{}␤»

[11:29] <lucasb> I just saw this ticket RT #130870 and was surprised

[11:29] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130870

[11:30] <lucasb> is this really correct?

[11:30] <lucasb> %h1 = |%h1 works ok

[11:30] <lucasb> %h1 = %h2 works ok

[11:30] <lucasb> that's why I would expect %h1 = %h1 to also work :)

[11:31] *** risou is now known as risou_awy

[11:34] <lucasb> If you do "@a = @a", you get the expected behavior. why with hashes it would be different?

[11:34] *** parv left
[11:35] *** risou_awy is now known as risou

[11:42] *** mr-foobar joined
[11:47] *** salva left
[11:50] <ZzZombo> m: package A { our sub say is export { put 'said'}};import A;say;

[11:50] <camelia> rakudo-moar 4ef1e6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of bare "say"; in Perl 6 please use .say if you meant to call it as a method on $_, or use an explicit invocant or argument, or use &say to refer to the function as a noun␤at <tmp>:1␤--…»

[11:53] *** domidumont left
[11:55] *** domidumont joined
[11:56] *** sufrostico joined
[11:58] <lizmat> ZzZombo: the error comes from deep in the parsing, before any checks are done

[12:01] *** brillenfux joined
[12:02] *** cibs left
[12:04] *** cibs joined
[12:05] *** aborazmeh joined
[12:05] *** aborazmeh left
[12:05] *** aborazmeh joined
[12:05] *** mscha joined
[12:05] *** brillenfux left
[12:06] *** mxco86 left
[12:06] <mscha> m: my @arr = (|(1,3...20), |(2,4...20).map(~*)); for ^20 { @arr .= sort; say @arr } # Pretty!

[12:06] <camelia> rakudo-moar 4ef1e6: OUTPUT: «[1 10 12 14 16 18 20 3 5 7 9 11 13 15 17 19 2 4 6 8]␤[1 10 12 14 16 18 2 20 3 4 5 6 7 8 9 11 13 15 17 19]␤[1 10 12 13 14 15 16 17 18 19 2 20 3 4 5 6 7 8 9 11]␤[1 10 12 7 13 14 15 16 17 18 3 19 2 20 4 5 6 8 9 11]␤[1 10 12 2 20 3 6 7 13 14 15 16 17…»

[12:06] *** risou is now known as risou_awy

[12:06] <mscha> Looks better in a terminal.

[12:07] <mscha> (I know why it's happening.  cmp between numbers and strings.)

[12:07] *** risou_awy is now known as risou

[12:08] *** risou is now known as risou_awy

[12:08] <mscha> m: my @arr = (1..20).map({ $_ %% 2 ?? +$_ !! ~$_ }); for ^20 { @arr .= sort; say @arr } # This one takes even longer to stabilize

[12:08] <camelia> rakudo-moar 4ef1e6: OUTPUT: «[1 17 2 10 11 12 13 14 15 16 18 19 20 3 4 5 6 7 8 9]␤[1 11 6 12 13 14 15 17 2 4 10 16 18 19 20 3 5 7 8 9]␤[1 11 13 2 4 5 6 10 12 14 15 16 17 18 19 20 3 7 8 9]␤[1 11 12 13 2 3 4 14 15 16 17 18 19 20 5 6 10 7 8 9]␤[1 11 15 2 8 10 12 13 16 17 18 19 …»

[12:19] *** risou_awy is now known as risou

[12:29] *** CIAvash left
[12:30] *** mcmillhj joined
[12:32] *** Khisanth left
[12:33] *** salva joined
[12:34] *** mcmillhj left
[12:37] *** risou is now known as risou_awy

[12:37] *** mcmillhj joined
[12:39] *** Exodist left
[12:40] *** Exodist joined
[12:42] *** mcmillhj left
[12:42] *** shadowpaste0 is now known as shadowpaste

[12:44] *** mcmillhj joined
[12:45] *** xfix left
[12:45] *** Khisanth joined
[12:45] <tbrowder>  .tell Zoffix the problem i'm experiencing with shell and run not capturing output still exists with latest rakudo.  doing some more testing before presenting results and asking for more help...

[12:46] <Zoffix> You'd find the issue a lot faster if you showed the actual code you're running.

[12:46] <Zoffix> Full code someone else can run to reproduce the issue, not bits and snippets.

[12:47] *** shadowpaste0 joined
[12:47] <tbrowder>  I will show code later today after some more testing to try to ensure no user errors.

[12:49] *** lukaramu joined
[12:49] *** astj left
[12:51] *** domidumont left
[12:52] *** mcmillhj left
[12:53] <lizmat> https://www.reddit.com/r/perl/comments/5wer1o/perl_should_have_undefined_behavior   # some behaviours are fixed in Perl 6  :-)

[12:53] *** domidumont joined
[12:54] *** mcmillhj joined
[12:54] *** xfix joined
[12:55] *** wamba left
[12:56] <Zoffix> "Recently, Perl 6 happened. I suddenly felt a crisis -- what if Perl 5 eventually reduce to dust?"

[12:56] <ZzZombo> what is nqp::getstaticcode for?

[12:56] <Zoffix> If Perl 6 can match Perl 5's speed, I feel ^ that's inevitable.

[12:56] <timotimo> gives you the code object without closures or anything attached, i think

[12:57] <DrForr> ITYM "When Perl 6..." :)

[12:57] <tbrowder> in

[12:57] <tbrowder> disregard...

[12:58] <timotimo> huh, perl5 allows you to use version strings for ip addresses?

[12:58] <Zoffix> DrForr: not really. I've seen no evidence to suggest that as guarantee and have no suitable skills to be able to ascertain that on my own.

[12:59] <DrForr> I'm trying to be positive about it, though it does get harder as time goes on.

[13:01] <ZzZombo> Github search as always on point

[13:01] <tbrowder> can a Proc::Async object act like a daemon if it has some kind of infinite loop?

[13:01] * ZzZombo asks for Perl6 language

[13:01] * ZzZombo gets Java results

[13:01] <ZzZombo> So, since that failed, where does "Cannot iterate object with MVMCode representation" come from?

[13:01] *** wamba joined
[13:03] <Zoffix> DrForr: that sounds like being blindly positive is unhealthy :P

[13:04] *** mcmillhj left
[13:04] <Zoffix> In fact, the best approach would be to accept the current speed is the best Perl 6 can be. Then each time there's a boost, you're pleasantly surprised :P

[13:05] * DrForr looks forward to 45-minute test suite runs for the foreseeable future, then.

[13:05] <Zoffix> DrForr: which test suite?

[13:05] <moritz> do it parallel, in the cloud!

[13:06] <tbrowder> i should have asked is a Proc::Async object somewhat like starting a process using nohup?

[13:06] <moritz> tbrowder: I don't think so

[13:06] <DrForr> Well, it's actually back down to ~1 minute, but once I've added a full corpus test, it'll probably be about an hour. Though by that point I'll likely just give up and do a single "christmas tree" test.

[13:08] <Zoffix> :)

[13:09] *** mcmillhj joined
[13:10] <tbrowder> what i would like to do is start a process (say process A) which could be used to indepently test for its existence with a shell command and then kill the original process A after the test.  Is that something that could be done with a Proc::Async object?

[13:11] <tbrowder> 'independently'

[13:11] *** risou_awy is now known as risou

[13:14] *** mcmillhj left
[13:17] *** mcmillhj joined
[13:18] <ZzZombo> Wait, where does VMArray live in? I see only NPQArray.

[13:18] <timotimo> VMArray is a repr, it lives in MoarVM's codebase

[13:19] <ZzZombo> How can I iterate over it?

[13:19] <jnthn> How did you get it?

[13:20] <jnthn> That sounds like some internals got leaked

[13:20] <ZzZombo> nah use nqp

[13:20] <jnthn> Oh

[13:20] <timotimo> your internals are now leaking over the program :D

[13:21] <jnthn> Well, can use nqp::elems and then a loop

[13:21] <jnthn> and nqp::atpos to index in to it

[13:21] <jnthn> Alternatively, feed to nqp::hllize(...) and it'll be wrapped up in a Perl 6 List object

[13:21] <ZzZombo> hah, I just indexed into it.

[13:22] <ZzZombo> but it failed to wok with for, so I thought it doesn't support that.

[13:22] <ZzZombo> work*

[13:22] <jnthn> Yeah, you need to hllize it to use it with Perl 6's for

[13:22] *** mcmillhj left
[13:23] <ZzZombo> hum...

[13:25] *** mcmillhj joined
[13:25] <ZzZombo> so, I wrote totally-not-a-hack to push my multi candidate first into @!dispatchees so that it would get tried first, but for some reason it breaks with "Unhandled exception: Cannot iterate object with MVMCode representation (BOOTCode)

[13:25] <ZzZombo>    at gen/moar/BOOTSTRAP.nqp:1967  (C:\rakudo/share/nqp/lib/Perl6/BOOTSTRAP.moarvm:)", but unshifting an already present candidate works.

[13:25] <ZzZombo> What's the difference?

[13:28] *** risou is now known as risou_awy

[13:29] *** aborazmeh left
[13:29] *** mcmillhj left
[13:30] <timotimo> so ... if i want to implement a TLS socket kind of thing for something written in C++ ... which library should i go for?

[13:31] *** bjz left
[13:32] *** lukaramu_ joined
[13:32] *** xinming left
[13:33] *** xinming joined
[13:34] *** smls joined
[13:34] <smls> bisectable6: say (1..3).map: { (*.[* - $_])(<a b c>) };

[13:34] <bisectable6> smls, On both starting points (old=2015.12 new=8301a30) the exit code is 0 and the output is identical as well

[13:34] <bisectable6> smls, Output on both points: (c c c)

[13:36] *** lukaramu left
[13:42] <smls> Can bisectable go further back?

[13:42] <Zoffix> no, but you can eval on earlier releases

[13:42] <Zoffix> c: all say (1..3).map: { (*.[* - $_])(<a b c>) };

[13:43] *** cibs left
[13:43] <committable6> Zoffix, https://gist.github.com/3ccc9613317d5d5241021431e8e525bb

[13:43] <Zoffix> So it's been that way since before 2014.01

[13:44] <Zoffix> m: for ^3 { say (*.[* - $_])(<a b c>) }

[13:44] <camelia> rakudo-moar 8301a3: OUTPUT: «Nil␤Nil␤Nil␤»

[13:44] *** cibs joined
[13:45] <smls> OK, thanks

[13:45] <Zoffix> m: for (1..3) -> $i { say (*.[{$_ - $i}])(<a b c>) }

[13:45] <camelia> rakudo-moar 8301a3: OUTPUT: «c␤b␤a␤»

[13:48] <[Coke]> Someone who likes atom for perl 6 should respond to the "Your thoughts on Padre?" thread on perl6-users.

[13:48] <yoleaux> 26 Feb 2017 23:03Z <Zoffix> [Coke]: my February report for IO grant is at http://blogs.perl.org/users/zoffix_znet/2017/02/perl-6-io-tpf-grant-monthly-report-february-2017.html

[13:49] <[Coke]> Zoffix++ # will report that to the committee today.

[13:49] <Zoffix> \o/

[13:49] *** bjz joined
[13:55] <[Coke]> .seen froggs

[13:55] <yoleaux> I saw FROGGS 17 Jan 2017 21:11Z in #perl6: <FROGGS> dataf3l: to this: http://hg.dyncall.org/pub/dyncall/dyncall/file/011b5e3a8548/dyncall/dyncall_callf.c#l91

[13:55] *** SmokeMachine left
[13:55] *** SmokeMachine joined
[13:58] <[Coke]> wonder if it would be helpful to other people to have a less prominent style for bots (and bot requests) on the irclog

[13:59] *** lizmat left
[13:59] *** mcmillhj joined
[13:59] <lucasb> sorry, didn't understand. what do you mean by less prominent style?

[14:02] *** cibs left
[14:02] <[Coke]> lighter font color? italic? smaller font?

[14:03] <[Coke]> so when I'm reviewing, and someone has gone off on a 30m "talk to the bot" chat, it is easier to skip.

[14:04] *** cibs joined
[14:04] <lucasb> ah, ok. you meant in the generated html/css in irclog

[14:04] <[Coke]> Yes.

[14:07] <lucasb> A feature like having all the nicks that said something in a given day in the top of the page, then you could click them to toggle show/hide their messages would be interesting.

[14:07] *** skids joined
[14:08] <lucasb> for example, at the top of the page http://pkgs.racket-lang.org/ , there's a list of tags that work like that, so you can filter the relevant entries. but I guess nobody touches irclog code anymore

[14:10] <[Coke]> "is 6.d still planned to hatch in summer?" as far as I know that was never a plan.

[14:11] <[Coke]> (from gfldex at https://irclog.perlgeek.de/perl6-dev/2017-02-26#i_141700240)

[14:11] <[Coke]> crap, ww

[14:12] <[Coke]> was reviewing both channels same time. :)

[14:21] <Geth> ¦ doc: 8753464532 | (Will "Coke" Coleda)++ | doc/Language/typesystem.pod6

[14:21] <Geth> ¦ doc: slight pref. to amer-english

[14:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8753464532

[14:22] *** bwisti joined
[14:29] *** pyrimidi_ left
[14:29] *** pyrimidine joined
[14:31] *** elaADnlxie joined
[14:31] *** jonas1 left
[14:36] *** sena_kun joined
[14:36] *** bjz left
[14:37] *** lucasb left
[14:45] *** lichtkind_ joined
[14:47] *** elaADnlxie left
[14:47] *** elaADnlxie joined
[14:48] *** lichtkind__ left
[14:53] *** wamba left
[14:55] *** Ven joined
[15:00] *** cdg joined
[15:00] *** mscha left
[15:02] *** lizmat joined
[15:08] *** DarthGandalf left
[15:08] *** DarthGandalf joined
[15:13] <ZzZombo> .seen ioninja

[15:13] <yoleaux> I saw IOninja 26 Feb 2017 18:52Z in #perl6: <IOninja> m: sub foo { bar }; sub bar { say "You called me from {callframe(2).code.name}" }; foo

[15:14] <Zoffix> What'd you want?

[15:14] <ZzZombo> well, the .add_dispatchee workaround for exporting operators from a class/module doesn't seem to work.

[15:15] <Zoffix> Worked for me.

[15:17] *** imcsk8_ left
[15:17] *** imcsk8 joined
[15:18] <ZzZombo> m: class A{ multi postcircumfix:<{ }>(Str:D $s,Int:D $_){ $s.substr($_) };CORE::{'&postcircumfix:<{ }>'}.add_dispatchee(::{'&postcircumfix:<{ }>'}) };import A;say '123-10'{3}

[15:18] <camelia> rakudo-moar 8301a3: OUTPUT: «Type Str does not support associative indexing.␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[15:18] <ZzZombo> m: class A{ multi postcircumfix:<{ }>(Str:D $s,Int:D $_) is export{ $s.substr($_) };CORE::{'&postcircumfix:<{ }>'}.add_dispatchee(::{'&postcircumfix:<{ }>'}) };import A;say '123-10'{3}

[15:18] <camelia> rakudo-moar 8301a3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤A unit-scoped sub definition is not allowed except on a MAIN sub;␤Please use the block form.␤at <tmp>:1␤------> 3$s,Int:D $_) is export{ $s.substr($_) };7⏏5CORE::{'&postcircumfix:<{ }>'}.add_dis…»

[15:18] *** risou_awy is now known as risou

[15:19] <Zoffix> m:  multi postcircumfix:<{ }>(Str:D $s,Int:D $_) {say "here"}; 'x'{42}

[15:19] <camelia> rakudo-moar 8301a3: OUTPUT: «here␤»

[15:19] <ZzZombo> m: class A{ multi postcircumfix:<{ }>(Str:D $s,Int:D $_) is export { $s.substr($_) }; CORE::{'&postcircumfix:<{ }>'}.add_dispatchee(::{'&postcircumfix:<{ }>'}) };import A;say '123-10'{3}

[15:19] <camelia> rakudo-moar 8301a3: OUTPUT: «-10␤»

[15:19] <Zoffix> Seems to work fine?

[15:19] <ZzZombo> what, where?

[15:21] <Zoffix> m: class A{ CORE::{'&postcircumfix:<{ }>'}.add_dispatchee: my multi postcircumfix:<{ }>(Str:D $s,Int:D $_) { $s.substr($_) } }; say '123-10'{3}

[15:21] <camelia> rakudo-moar 8301a3: OUTPUT: «-10␤»

[15:23] <ZzZombo> why does not work the other way around though?

[15:25] <Zoffix> Because you're adding the wrong thing.

[15:25] <Zoffix> m: class A{ multi postcircumfix:<{ }>(Str:D $s,Int:D $_){}; ::{'&postcircumfix:<{ }>'}.candidates.say }

[15:25] <camelia> rakudo-moar 8301a3: OUTPUT: «(sub postcircumfix:<{ }> (\SELF, \key) { #`(Sub|34589008) ... } sub postcircumfix:<{ }> (\SELF, \key, Mu \ASSIGN) { #`(Sub|34585056) ... } sub postcircumfix:<{ }> (\SELF, \key, Mu :$BIND! is raw) { #`(Sub|34587944) ... } sub postcircumfix:<{ }> (\SELF, \…»

[15:27] <ZzZombo> what am I supposed to be looking at?

[15:27] *** mattr__ joined
[15:27] <Zoffix> m: class A{ constant $s = multi postcircumfix:<{ }>(Str:D $s,Int:D $_) is export { $s.substr($_) }; CORE::{'&postcircumfix:<{ }>'}.add_dispatchee: $s }; say '123-10'{3}

[15:27] <camelia> rakudo-moar 8301a3: OUTPUT: «-10␤»

[15:28] <Zoffix> m: class A{ my $s = multi postcircumfix:<{ }>(Str:D $s,Int:D $_) is export { $s.substr($_) }; CORE::{'&postcircumfix:<{ }>'}.add_dispatchee: $s }; say '123-10'{3}

[15:28] <camelia> rakudo-moar 8301a3: OUTPUT: «Unhandled exception: Cannot iterate object with MVMCode representation (BOOTCode)␤   at gen/moar/BOOTSTRAP.nqp:1973  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/Perl6/BOOTSTRAP.moarvm:)␤ from gen/moar/BOOTSTRAP.nqp:2194  (/home/camelia/rakudo-m-inst…»

[15:28] <Zoffix> LTA error

[15:28] <ZzZombo> LTA?

[15:29] * Zoffix leaves for the day

[15:29] <lucs> Less Than Awesome

[15:29] *** mcsnolte joined
[15:29] *** MilkmanDan left
[15:29] <ZzZombo> m: class A{ my \s = multi postcircumfix:<{ }>(Str:D $s,Int:D $_) is export { $s.substr($_) }; CORE::{'&postcircumfix:<{ }>'}.add_dispatchee: s }; say '123-10'{3}

[15:29] <camelia> rakudo-moar 8301a3: OUTPUT: «-10␤»

[15:30] <ZzZombo> Anybody else can explain what exactly wrong was I adding while Zoffix is away?

[15:32] *** eroux left
[15:32] *** MilkmanDan joined
[15:32] *** eroux joined
[15:32] <Zoffix> ZzZombo: ::{'&postcircumfix:<{ }>'} is all the candidates, not the one dispatchee you want to add

[15:33] <mattr__> Hello, Mac OS X dmg p6doc not working out of the box. Does anyone know where I can find guide to installation? 

[15:33] <mattr__> (where should the files be in the install)

[15:33] <Zoffix> Even when it's only sub there're to Subs handling it IIRC

[15:33] <Zoffix> m: my &bar = sub foo {}; say &foo === &bar

[15:33] <camelia> rakudo-moar 8301a3: OUTPUT: «False␤»

[15:34] <Zoffix> mattr__: what's the error?

[15:34] <ZzZombo> Zoffix, oh. Alright then.

[15:34] <Zoffix> mattr__: instructions are here: https://github.com/perl6/doc#install

[15:36] <mattr__> Hi Zoffix thanks and loved your article, p6doc already installed and built but cannot find any docs.

[15:36] <mattr__> p6doc -f Type::Array.push Could not find Type::Array at line 0 in:     /Users/mattr/.perl6     /Applications/Rakudo/share/perl6/site     /Applications/Rakudo/share/perl6/vendor     /Applications/Rakudo/share/perl6     CompUnit::Repository::AbsolutePath<140359463237616>     CompUnit::Repository::NQP<140359462828424>     CompUnit::Repository::Perl5<140359462828464>   in sub locate-curli-module at /Applications/Rakudo/share/perl6/site/res

[15:37] <ZzZombo> Zoffix: you don't have to make them explicitly my, BTW

[15:40] *** risou is now known as risou_awy

[15:41] <mattr__> Zoffix: another error is p6doc -f slurp No documentation found for a routine named 'slurp'

[15:41] <[Coke]> last time I mentioned an issue with this, someone said it was a known issue, mattr__

[15:42] <[Coke]> in the meantime, you can use https://doc.perl6.org/ and use the search feature.

[15:43] <Zoffix> mattr__: I opend an Issue on the topic: https://github.com/perl6/doc/issues/1224

[15:43] <Zoffix> mattr__: use -f Array.push, without adding `Type::` thing

[15:44] <ZzZombo> wait, how can I iterate a string char by char?

[15:44] <timotimo> use .comb

[15:44] <ZzZombo> m: say '1234'.comb

[15:44] <camelia> rakudo-moar 8301a3: OUTPUT: «(1 2 3 4)␤»

[15:45] <lucs> Inline::Perl5 problem: https://gist.github.com/lucs/dd83de28db51228e7f2c2f5878eb00c2

[15:45] *** pyrimidine left
[15:45] *** pyrimidine joined
[15:47] <mattr__> Zoffix: Thanks, also I cannot do p6doc Str or p6foc faq either. Some problem with the dmg, as Coke notes

[15:48] *** rurban joined
[15:48] <Zoffix> `p6doc Str` works for me. Did you run `pd6doc-index build`?

[15:48] <mattr__> yes

[15:48] <Zoffix> faq works too for me. This is on Bodhi Linux

[15:48] <Zoffix> no idea why it don't work for oyu

[15:49] <mattr__> I think as Coke (thanks!) notes there is some problem with the latest max os x dmg installer

[15:50] <mattr__> p.s. the article I mentioned is a year old but I liked it. "Why in The World Would Anyone Use Perl 6?"

[15:51] <Zoffix> More at https://perl6.party/

[15:51] *** risou_awy is now known as risou

[15:55] <ZzZombo> m: class A{ my \s = multi postcircumfix:<{ }>(Str:D $s,*@_,*%_) { dd @_,%_;nextwith {},|@_,|%_; }; CORE::{'&postcircumfix:<{ }>'}.add_dispatchee: s }; say '123-10'{3}

[15:55] <camelia> rakudo-moar 8301a3: OUTPUT: «Type Str does not support associative indexing.␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[15:55] <ZzZombo> this fails ^

[15:55] <moritz> ... now with TLS, Zoffix++

[15:57] *** gregf_ joined
[16:01] *** gdonald_ left
[16:01] *** gdonald_ joined
[16:03] *** cdg left
[16:03] *** cdg joined
[16:04] *** ufobat joined
[16:07] *** pyrimidine left
[16:08] *** pyrimidine joined
[16:18] <Zoffix> m: class A{ my \s = multi postcircumfix:<{ }>(Str:D $s, $key, *@_,*%_) { dd @_,%_;nextwith {},$key,|@_,|%_; }; CORE::{'&postcircumfix:<{ }>'}.add_dispatchee: s }; say '123-10'{3}

[16:18] <camelia> rakudo-moar 8301a3: OUTPUT: «[]␤{}␤(Any)␤»

[16:18] <Zoffix> ZzZombo: ^ need to have more specific candidate thatn Any SELF, Any key

[16:19] <Zoffix> m: class A{ my \s = multi postcircumfix:<{ }>(Str:D $s, $key, *@_,*%_) { dd @_,%_;nextwith :{3 => 42},$key,|@_,|%_; }; CORE::{'&postcircumfix:<{ }>'}.add_dispatchee: s }; say '123-10'{3}

[16:19] <camelia> rakudo-moar 8301a3: OUTPUT: «[]␤{}␤42␤»

[16:23] *** khw joined
[16:24] *** effbiai_ left
[16:26] <ufobat> is sam morrison in this channel?  :)

[16:27] *** eroux left
[16:27] *** lizmat_ joined
[16:29] *** lizmat left
[16:31] *** Ven left
[16:31] *** Ven joined
[16:33] *** lizmat joined
[16:33] *** lizmat_ left
[16:34] *** lizmat left
[16:35] *** risou is now known as risou_awy

[16:36] *** kurahaupo joined
[16:36] *** risou_awy is now known as risou

[16:41] *** pmurias joined
[16:43] *** kurahaupo left
[16:43] <pmurias> hi

[16:45] <Zoffix> \o

[16:46] *** kurahaupo joined
[16:53] *** wamba joined
[16:54] *** abraxxa left
[16:58] *** Ven left
[17:02] *** Ven joined
[17:04] *** zakharyas left
[17:06] <pmurias> Zoffix: have you thought yet about the subs that change the homedir/temporary dir and/or current dir?

[17:06] <Zoffix> A bit. Why?

[17:11] *** pmurias left
[17:11] <Zoffix> Ok then :)

[17:12] *** pmurias joined
[17:13] <pmurias> Zoffix: I'm just interested if they get replaced/removed as they seemed really ugly

[17:15] *** itcharlie joined
[17:16] <Zoffix> I have some notes in that area, but I rather not reveal them right now to prevent Endless Bikeshed™. All the proposed changed will be available in rakudo/docs/IO-Action-Plan-2017.md on March 11th and the core team will have a week to comment on everything.

[17:17] *** robertle left
[17:23] *** domidumont left
[17:25] *** risou is now known as risou_awy

[17:25] <pmurias> Zoffix: people outside of the core team can't comment? ;)

[17:26] <Zoffix> pmurias: they can comment, but no public announcement will be made to them, to avoid Too Many Cooks situation.

[17:28] <[Coke]> too many cooks? too many cooks.

[17:28] *** mxco86 joined
[17:29] *** bazzaar joined
[17:30] <bazzaar> \o Perl6

[17:30] <Zoffix> \o

[17:33] <bazzaar> I'm having a bit of an issue with zef on Rakudo Star 2017.01 ( http://pastebin.com/nR9m2nH1 ), anyone seen anything similar? 

[17:33] <pmurias> Zoffix: is the Endless Bikesheding a real threat? a lot of the current IO seems to underdesigned (I'm fine with waiting to comment on a finished proposal as it cuts on the discussion overhead)

[17:34] <Zoffix> bazzaar: you don't have git installed? I don't remember if zef has any support for gitless environments...

[17:36] <bazzaar> Zoffix: Aaah, that's probably it, .. have just had to rebuild my linux, and haven't installed Git yet... thanks for the help :)

[17:39] <Zoffix> pmurias: I don't yet have a finished product. Yet the comments on it would assume the parts already written are the final thing. I see little reason to process all the commentary on things that are yet to be finished.

[17:40] <perlpilot_> Zoffix++ 

[17:41] <Zoffix> pmurias: to clarify, I more than welcome you point out things that suck and should be changed, I'm just not yet ready to share my proposals on how stuff should be changed.

[17:41] *** gdonald_ left
[17:41] *** gdonald_ joined
[17:44] *** Ven left
[17:48] *** kyan joined
[17:48] *** bazzaar left
[17:55] *** b7j0c joined
[17:55] <pmurias> Zoffix: seems resonable

[17:56] *** kyan left
[17:56] <mst> Zoffix: I tend to follow a similar policy

[17:57] *** lizmat joined
[17:57] *** robertle joined
[17:58] <b7j0c> hello, simple question here. I would like to confirm that when I get a value out of a hash in perl6, I always get a copy of the value, even if the value in the hash is something created with a .new() method...for example, if I have a hash of string -> URI, if I read a value into a new lhs URI (i.e. my URI $u = %hash{'thekey'}), I always get a copy (?)

[17:59] <[Coke]> (zef) perhaps install curl?

[18:00] <Zoffix> b7j0c: no, you don't

[18:01] <Zoffix> m: class Foo { has $.x is rw = 42 }; my $f = Foo.newl my %h = foo => Foo.new; %h<foo>.x = 72; say $f.x

[18:01] <camelia> rakudo-moar 1891b6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3{ has $.x is rw = 42 }; my $f = Foo.newl7⏏5 my %h = foo => Foo.new; %h<foo>.x = 72;␤    expecting any of:␤        infix␤        infix stopper␤      …»

[18:01] *** Ven joined
[18:01] <Zoffix> m: class Foo { has $.x is rw = 42 }; my $f = Foo.new; my %h = foo => Foo.new; %h<foo>.x = 72; say $f.x

[18:01] <camelia> rakudo-moar 1891b6: OUTPUT: «42␤»

[18:01] <Zoffix> oh shit.

[18:01] <tbrowder> Zoffix: false alarm on shell and run. i upgraded rakudo to latest and all works as advertised.  sorry for the noise.

[18:01] <Zoffix> oh :) doh

[18:01] <Zoffix> m: class Foo { has $.x is rw = 42 }; my $f = Foo.new; my %h = foo => $f; %h<foo>.x = 72; say $f.x

[18:01] <camelia> rakudo-moar 1891b6: OUTPUT: «72␤»

[18:01] <Zoffix> b7j0c: ^ otherwise it'd be impossible to shuttle objects around like that

[18:03] <b7j0c> right but I am thinking more of the case where I say: class Foo { has $.x is rw = 42 }; my $f = Foo.new; my %h = foo => $f; my Foo $c = %h<foo>; %h<foo>.x = 72; say $f.x; say $c.x;

[18:04] <ilmari> m: class Foo { has $.x is rw = 42 }; my $f = Foo.new; my %h = foo => $f; my Foo $c = %h<foo>; %h<foo>.x = 72; say $f.x; say $c.x;

[18:04] <camelia> rakudo-moar 1891b6: OUTPUT: «72␤72␤»

[18:05] <b7j0c> hmmm strange... because I tried this out on my own with a hash of string -> URI

[18:06] <b7j0c> i copied out one of the URIs from the hash, printed my copy...changed the value of the key in the hash and then printed out my copy, it remained as it was when it was defined

[18:06] <b7j0c> and URIs are also .new()'d

[18:08] <Zoffix> "...changed the value of the key..." sounds like you just replaced the original object?

[18:09] <b7j0c> yeah I think that is my confusion, sorry, right

[18:09] <ilmari> b7j0c: did you mean %foo<bar> = $baz; or %foo<bar>.baz = zot;?

[18:09] <ilmari> the former replaces the value in the hash, the latter modifies it

[18:10] <b7j0c> right, in my case I am **replacing** the value, not modifying it

[18:10] <b7j0c> so yeah, my bad

[18:11] <b7j0c> thanks everyone!

[18:11] <Zoffix> Any time.

[18:12] *** b7j0c left
[18:14] *** risou_awy is now known as risou

[18:16] *** Ven left
[18:21] *** Ven joined
[18:22] *** ChoHag joined
[18:30] *** Ven left
[18:31] *** risou is now known as risou_awy

[18:34] *** kalkin- joined
[18:34] <kalkin-> hi

[18:35] *** pyrimidine left
[18:36] *** pyrimidine joined
[18:36] <rindolf> kalkin-: meow!

[18:36] <rindolf> kalkin-: how are you?

[18:36] <rindolf> Hi all! Sup?

[18:36] <rindolf> Zoffix: hi, long time

[18:37] <Zoffix> \o

[18:37] <elaADnlxie> \o/

[18:38] <rindolf> Zoffix: what's new?

[18:38] *** cdg left
[18:39] <Zoffix> dunno

[18:39] *** andrzejk_ joined
[18:39] <Zoffix> m: '42'.FatRat.say

[18:39] <camelia> rakudo-moar 1891b6: OUTPUT: «42␤»

[18:39] <Zoffix> That's new.

[18:39] <rindolf> Zoffix: it didn't work before?

[18:39] <Zoffix> nope

[18:39] <rindolf> Zoffix: ah, nice

[18:40] <rindolf> Zoffix: ah, so - nice!

[18:40] <rindolf> Zoffix: I went on a longish walk today

[18:40] *** pyrimidine left
[18:41] *** Ven joined
[18:41] <Zoffix> To where?

[18:41] <rindolf> Zoffix: just in the neighbourhood

[18:42] *** dotness joined
[18:43] <rindolf> Zoffix: and then I continued to make my home site's HTML more strictly valid based on tidyp/HTML::Tidy

[18:44] *** Ven_ joined
[18:45] *** mattr__ left
[18:45] *** Ven left
[18:47] <Zoffix> Sounds like a quiet life. Do you get worried when the war's kicking off?

[18:48] <rindolf> Zoffix: the war?

[18:48] <kalkin-> Zoffix: did trump start a war?

[18:49] <Zoffix> rindolf: don't you live like an hour away from Gaza? Dunno, maybe I live in too remote area, but from news here feels like there's always war kicking off.

[18:50] <Zoffix> And if there were a war that close to me, I'd be worried.

[18:51] <rindolf> Zoffix: I live in northern Tel Aviv - there hasn't been missiles here in a while

[18:51] *** darutoko left
[18:51] <Zoffix> Good.

[18:51] <rindolf> Zoffix: there were possibly some stabbings

[18:57] *** dotness left
[19:01] <perlpilot_> rindolf: do you get worried you might get stabbed?  ;)

[19:02] *** espadrine joined
[19:03] <rindolf> perlpilot_: not really

[19:06] *** rurban1 joined
[19:07] *** rurban left
[19:08] <elaADnlxie> Zoffix: your comment about self-referential arrays makes so much sense

[19:09] <elaADnlxie> though the behavior you are describing is probably far from being DWIM in most of the cases

[19:09] *** Ven_ left
[19:09] <elaADnlxie> m: my %h1 = :4foo, :8bar; my %h2 = :15x, :16y; %h1 ,= %h2; say %h1

[19:09] <camelia> rakudo-moar 1891b6: OUTPUT: «{x => 15, y => 16}␤»

[19:09] <elaADnlxie> m: my %h1 = :4foo, :8bar; my %h2 = :15x, :16y; %h1 = %h1, %h2; say %h1

[19:09] <camelia> rakudo-moar 1891b6: OUTPUT: «{x => 15, y => 16}␤»

[19:09] <elaADnlxie> wait, wasn't it fixed

[19:09] <elaADnlxie> e: my %h1 = :4foo, :8bar; my %h2 = :15x, :16y; %h1 = %h1, %h2; say %h1

[19:09] <evalable6> elaADnlxie, rakudo-moar ae7bcf1b8: OUTPUT«{bar => 8, foo => 4, x => 15, y => 16}»

[19:09] <elaADnlxie> ah, there we go

[19:10] <elaADnlxie> e: my %h1 = :4foo, :8bar; my %h2 = :15x, :16y; %h1 ,= %h2; say %h1

[19:10] <evalable6> elaADnlxie, rakudo-moar ae7bcf1b8: OUTPUT«{bar => 8, foo => 4, x => 15, y => 16}»

[19:10] <elaADnlxie> camelia--

[19:12] <Zoffix> Yeah, which is probably why it was made to auto-flatten hashes; to DWIM

[19:13] <Zoffix> m: my %h1 = :42a; my %h2 = :72b; %h1 = $%h2, $%h2; say %h1

[19:13] <camelia> rakudo-moar ae7bcf: OUTPUT: «{b 72 => {b => 72}}␤»

[19:13] <Zoffix> And you can still get the behaviour I described by asking for it ^

[19:15] *** _sfiguser left
[19:17] *** itcharlie left
[19:18] *** pyrimidine joined
[19:20] *** lizmat left
[19:21] *** rurban joined
[19:21] *** lizmat joined
[19:23] <RabidGravy> ooh,  Fedora 25 just gave me rakudo 2017.01

[19:23] *** rurban1 left
[19:23] *** dwarring joined
[19:23] <RabidGravy> I think that's the most up to date it has been :)

[19:24] <andrzejk_> хай гайс

[19:26] <RabidGravy> that's easy for you tooo say

[19:28] <Zoffix> hi to you too

[19:29] *** _sfiguser joined
[19:29] *** lizmat left
[19:37] *** rurban1 joined
[19:38] *** rurban2 joined
[19:38] *** rurban2 left
[19:40] *** llfourn left
[19:41] *** rurban left
[19:42] *** rurban1 left
[19:43] <elaADnlxie> RabidGravy: now the question is how do you install zef on top of that :)

[19:48] <RabidGravy> [jonathan@coriolanus zef]$ /usr/bin/perl6 -Ilib bin/zef install .

[19:48] <RabidGravy> ===> Testing: zef:ver('0.1.1'):auth('github:ugexe')

[19:48] <RabidGravy> t/00-load.t ........... ok 

[19:48] <RabidGravy> t/identity.t .......... ok 

[19:48] <RabidGravy> t/utils-filesystem.t .. ok 

[19:48] <RabidGravy> All tests successful.

[19:48] <RabidGravy> Files=3, Tests=14,  13 wallclock secs

[19:48] <RabidGravy> Result: PASS

[19:48] <RabidGravy> ===> Testing [OK] for zef:ver('0.1.1'):auth('github:ugexe')

[19:48] <RabidGravy> ===> Installing: zef:ver('0.1.1'):auth('github:ugexe')

[19:48] <RabidGravy> 1 bin/ script [zef] installed to:

[19:48] <RabidGravy> /home/jonathan/.perl6/bin

[19:48] <RabidGravy> :)

[19:49] *** andrzejk_ left
[19:50] <RabidGravy> seems to work

[19:50] <samcv> good *

[19:51] *** ufobat left
[19:53] *** i7f6 joined
[19:54] <elaADnlxie> samcv: o/

[19:54] <samcv> your name is unsettling

[19:55] *** kyan joined
[19:59] *** bjz joined
[19:59] <elaADnlxie> it's ok :)

[20:01] *** Ven joined
[20:03] *** smls left
[20:09] <dylanwh> samcv: your name reminds me a little of XS, so... also disturbing.

[20:10] *** aindilis` left
[20:10] *** jhill__ joined
[20:14] *** obfusk_ left
[20:15] *** andrzejk_ joined
[20:16] *** pyrimidine left
[20:17] *** pyrimidine joined
[20:25] *** perlpilot_ is now known as perlpilot

[20:26] <RabidGravy> you're all disturbing buy hey!

[20:32] <elaADnlxie> m: class Toothpaste { method sink { say ‘:O’ } }; Toothpaste.new

[20:32] <camelia> rakudo-moar ae7bcf: OUTPUT: «:O␤»

[20:32] <elaADnlxie> m: class Toothpaste { method sink { say ‘:O’ } }; my $x = Toothpaste.new

[20:32] <camelia> rakudo-moar ae7bcf: ( no output )

[20:33] <elaADnlxie> m: class Toothpaste { method sink { say ‘:O’ } }; my $x = Toothpaste.new; $x

[20:33] <camelia> rakudo-moar ae7bcf: OUTPUT: «WARNINGS for <tmp>:␤Useless use of $x in sink context (line 1)␤»

[20:33] <elaADnlxie> m: class Toothpaste { method sink { say ‘:O’ } }; my $x = Toothpaste.new; sink $x

[20:33] <camelia> rakudo-moar ae7bcf: OUTPUT: «WARNINGS for <tmp>:␤Useless use of $x in sink context (line 1)␤:O␤»

[20:33] <elaADnlxie> how do I sink it without a warning?

[20:34] <elaADnlxie> I know I can call .sink but…

[20:34] *** bjz left
[20:35] *** telex left
[20:36] <Zoffix> quietly

[20:36] *** llfourn joined
[20:36] *** telex joined
[20:36] <Zoffix> nm

[20:37] <Zoffix> yeah, just call think

[20:37] <Zoffix> Why a but?

[20:37] <Zoffix> *sink

[20:41] *** llfourn left
[20:46] <elaADnlxie> Zoffix: not sure actually. Just trying to figure if writing your own sink method could be useful for anything

[20:58] *** bjz joined
[21:03] <sjn> hello, #perl6

[21:03] <Zoffix> \o

[21:04] <sjn> question; Is there a way to introspect perl6 to see which operators it has?

[21:05] <sjn> other than reading code, I mean

[21:05] <timotimo> of course

[21:05] <timotimo> m: say CORE::.keys.grep(*.contains('fix'))

[21:05] <camelia> rakudo-moar ae7bcf: OUTPUT: «(&infix:<+|> &infix:<∖> &infix:<ne> &infix:«<=» &infix:<notandthen> &infix:<o> &infix:<**> &infix:<eqv> &infix:«~<» &infix:<⊎> &infix:<∩> &infix:<coll> &infix:<xx> &postcircumfix:<[ ]> &postfix:<i> &infix:<∈> &infix:<..^> &infix:«<=>» &infi…»

[21:06] *** _28_ria left
[21:06] <sjn> nice!

[21:07] *** _28_ria joined
[21:08] *** _28_ria left
[21:09] *** risou_awy is now known as risou

[21:10] <TimToady> perhaps you should scan for 'fix:' if you wan to be slightly more future proof

[21:10] *** cdg joined
[21:10] <TimToady> *want

[21:11] <Zoffix> sjn: https://map.perl6.party lists them

[21:11] <Zoffix> sjn: and the code in the repo (mapper.p6) has the code for introspection

[21:17] *** _28_ria joined
[21:21] *** _28_ria left
[21:22] *** _28_ria joined
[21:25] *** bjz left
[21:26] <firefish5000> Anyone know how I could join two Buf objs? I was doing ($b1.decode ~ $b2.decode).encode, but now I have some non UTF-8 data mixed in and its not working.

[21:26] *** _28_ria left
[21:28] *** _28_ria joined
[21:28] *** _28_ria left
[21:30] *** kyclark joined
[21:31] <RabidGravy> Hmm assuming I have declared  "thing" in EXPORTHOW, is there anyway I can parameterise it like "thing Bar["something"] { }"?

[21:31] <elaADnlxie> m: my $a = Buf.new(1, 2, 3); my $b = Buf.new(4, 5, 6); my $c = $a ~ $b; dd $c

[21:31] <camelia> rakudo-moar ae7bcf: OUTPUT: «Buf $c = Buf.new(1,2,3,4,5,6)␤»

[21:32] <elaADnlxie> firefish5000: ↑

[21:32] <elaADnlxie> firefish5000: most string operations work with Bufs directly

[21:32] <elaADnlxie> firefish5000: so there's no need to decode/encode

[21:32] *** risou is now known as risou_awy

[21:33] <elaADnlxie> .oO( and by “most string operations” I mean just ~ )

[21:33] <firefish5000> elaADnlxie, Thanks!

[21:34] <firefish5000> up until this point I was dealing with both bufs and strings, so that wasn't working. but all bufs or all strings works as you said!

[21:34] *** rindolf left
[21:34] <Zoffix> m: Buf.new(42) ~ "foo"

[21:35] <camelia> rakudo-moar ae7bcf: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "~" in expression ".new(42) ~ \"foo\"" in sink context (line 1)␤Cannot use a Buf as a string, but you called the Stringy method on it␤  in block <unit> at <tmp> line 1␤␤»

[21:35] <El_Che> new rakudo 2017.02 debs/rpms: https://github.com/nxadm/rakudo-pkg/releases/tag/2017.02

[21:35] <RabidGravy> wahay!

[21:35] <Zoffix> firefish5000: side on about non-UTF8 data: you can .decode.encode round-trip using Latin-1 encoding

[21:36] <Zoffix> s/side on/side note/;

[21:37] *** MilkmanDan left
[21:37] *** llfourn joined
[21:37] *** girafe joined
[21:38] *** agentzh joined
[21:38] <firefish5000> thanks, ill try to remember that for next time!

[21:38] *** andrzejk_ left
[21:40] <Zoffix> m: my $a = Buf.new(1, 2, 3); my $b = Buf.new(4, 5, 6); say Buf.new: $a, $b

[21:40] <camelia> rakudo-moar ae7bcf: OUTPUT: «Type check failed in initializing element #0 to Buf; expected uint8 but got Buf (Buf.new(1,2,3))␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[21:40] <Zoffix> m: my $a = Buf.new(1, 2, 3); my $b = Buf.new(4, 5, 6); say Buf.new: |$a, |$b

[21:40] <camelia> rakudo-moar ae7bcf: OUTPUT: «Buf:0x<01 02 03 04 05 06>␤»

[21:40] <Zoffix> another way

[21:40] <elaADnlxie> I think you can also use push

[21:40] <Zoffix> bisect: Buf.new ~ Buf.new

[21:41] <elaADnlxie> huh?

[21:41] <Zoffix> bisectable6: Buf.new ~ Buf.new

[21:41] <bisectable6> Zoffix, On both starting points (old=2015.12 new=ae7bcf1) the exit code is 0 and the output is identical as well

[21:41] <bisectable6> Zoffix, Output on both points: WARNINGS for /tmp/vS0AgVT0IF:␤Useless use of "~" in expression ".new ~ Buf.new" in sink context (line 1)

[21:41] <bisectable6> Zoffix, On both starting points (old=2015.12 new=ae7bcf1) the exit code is 0 and the output is identical as well

[21:41] <bisectable6> Zoffix, Output on both points: WARNINGS for /tmp/u9bLdcvDBi:␤Useless use of "~" in expression ".new ~ Buf.new" in sink context (line 1)

[21:41] <elaADnlxie> (sorry, was my bad)

[21:41] <Zoffix> huh

[21:41] *** TEttinger joined
[21:41] <elaADnlxie> m: my $a = Buf.new(1, 2, 3); my $b = Buf.new(4, 5, 6); $a.push($b); dd $a

[21:41] <camelia> rakudo-moar ae7bcf: OUTPUT: «Buf $a = Buf.new(1,2,3,4,5,6)␤»

[21:41] <elaADnlxie> firefish5000: also this ↑

[21:41] <Zoffix> bisectable6: Buf.new ~ Buf.new

[21:42] <bisectable6> Zoffix, On both starting points (old=2015.12 new=ae7bcf1) the exit code is 0 and the output is identical as well

[21:42] <bisectable6> Zoffix, Output on both points: WARNINGS for /tmp/oszJBJMhI1:␤Useless use of "~" in expression ".new ~ Buf.new" in sink context (line 1)

[21:42] <Zoffix> bisectable6: [~] Buf.new, Buf.new

[21:42] <bisectable6> Zoffix, Bisecting by output (old=2015.12 new=ae7bcf1) because on both starting points the exit code is 0

[21:42] <Zoffix> Oh

[21:42] <Zoffix> bisectable6: [~] Buf.new

[21:42] <Zoffix> OK

[21:42] <bisectable6> Zoffix, bisect log: https://gist.github.com/568221a5120904fe342f0b1a9ebb0c87

[21:42] <bisectable6> Zoffix, (2016-12-15) https://github.com/rakudo/rakudo/commit/acece7b2f7a8614c40d832a76ff67be2a71d851a

[21:42] <bisectable6> Zoffix, Bisecting by output (old=2015.12 new=ae7bcf1) because on both starting points the exit code is 0

[21:42] <Zoffix> I thought I added the Buf ~ Buf thing, but it was just 1-arg one 

[21:42] <bisectable6> Zoffix, bisect log: https://gist.github.com/fe7c41d8ecfbc701476441b559728b59

[21:42] <bisectable6> Zoffix, (2016-12-15) https://github.com/rakudo/rakudo/commit/acece7b2f7a8614c40d832a76ff67be2a71d851a

[21:42] *** llfourn left
[21:42] <elaADnlxie> committable6: all [~] Buf.new, Buf.new

[21:43] <elaADnlxie> committable6: all [~] Buf.new

[21:43] <Zoffix> bisectable6: $ = [~] Buf.new

[21:43] <bisectable6> Zoffix, On both starting points (old=2015.12 new=ae7bcf1) the exit code is 0 and the output is identical as well

[21:43] <bisectable6> Zoffix, Output on both points: 

[21:43] <committable6> elaADnlxie, https://gist.github.com/f9822d9bf767c87932956bb63a228354

[21:43] *** aaa3 joined
[21:43] <Zoffix> erm, fine then

[21:43] <committable6> elaADnlxie, https://gist.github.com/fe115bf5216c86dafab1427203abf2b0

[21:44] *** sena_kun left
[21:44] <aaa3> rakudo: say "Hello, World!"

[21:44] <camelia> rakudo-moar ae7bcf: OUTPUT: «Hello, World!␤»

[21:44] <elaADnlxie> m: say ‘Hello!’

[21:44] <camelia> rakudo-moar ae7bcf: OUTPUT: «Hello!␤»

[21:44] <Zoffix> This is the one i sought: https://github.com/rakudo/rakudo/commit/77e9d4b54574a754ec9552f95eb4c7913718b7df

[21:45] *** salva left
[21:45] *** aaa3 left
[21:45] <Zoffix> m: say WHY 'Life, the Universe and Everything':

[21:45] <camelia> rakudo-moar ae7bcf: OUTPUT: «42␤»

[21:46] *** Ven left
[21:47] <TimToady> m: say WHY 'Life, the Universe, and Everything':

[21:47] <camelia> rakudo-moar ae7bcf: OUTPUT: «(Any)␤»

[21:47] <TimToady> doesn't work with Oxford comma, which is a bug :)

[21:48] <elaADnlxie> Zoffix: yeah, I see now. This finds it: bisect: old=2016.09 say [~] Buf.new

[21:48] *** MilkmanDan joined
[21:48] <elaADnlxie> it was working fine before 2016.09, so bisectable will refuse to bisect :)

[21:48] <Zoffix> It's a feature :) And I'd point to the commit with explanation if only GitHub weren't too dumb to link to the link in commit's title other than the commit itself -_-

[21:48] <Zoffix> mc: say WHY 'Life, the Universe, and Everything':

[21:48] <committable6> Zoffix, ¦«2015.12»: 42

[21:49] <Zoffix> :)

[21:49] <elaADnlxie> bisect: say WHY 'Life, the Universe, and Everything':

[21:49] <bisectable6> elaADnlxie, Bisecting by output (old=2015.12 new=ae7bcf1) because on both starting points the exit code is 0

[21:49] <bisectable6> elaADnlxie, bisect log: https://gist.github.com/5d2db178f586deba7c8fc133c3c943ee

[21:49] <bisectable6> elaADnlxie, (2016-10-04) https://github.com/rakudo/rakudo/commit/d8309d097d037c39ce3e5c1abfefc0d39130a895

[21:50] <Zoffix> Ah OK, no explanation in commit, but the comment on IRC was that comma-less version was a more accurate quote

[21:50] <TimToady> sure, but we should support modern English as well

[21:52] <elaADnlxie> I like how bisectalbe is the most convenient way to find some commit :)

[21:54] <TimToady> maybe the Oxford comma version should return 43

[21:56] <Geth> ¦ routine-map: 1dc9b3b789 | (Zoffix Znet)++ | update-map.perl6.party

[21:56] <Geth> ¦ routine-map: Fix missing map.json in uploader script

[21:56] <Geth> ¦ routine-map: 

[21:56] <Geth> ¦ routine-map: Fixes #1

[21:56] <Geth> ¦ routine-map: review: https://github.com/perl6/routine-map/commit/1dc9b3b789

[22:00] *** kyclark left
[22:02] *** agentzh left
[22:03] *** skids left
[22:03] *** agentzh joined
[22:04] <Zoffix> So... me and my buddy paid SpaceX a bunch of money to fly us to the Moon next year. Cool, eh?

[22:04] <Zoffix> Don't tell anyone...

[22:05] <elaADnlxie> moritz: and you're talking about short round-trip time

[22:06] <DrForr> Are you planning to swing among them stars?

[22:06] *** _28_ria joined
[22:07] <elaADnlxie> Zoffix: I thought the plan was Mars, no?

[22:07] <Zoffix> Maybe in 2019. First gotta see what the moon feels like.

[22:07] <Zoffix> elaADnlxie: my buddy and I can't afford Mars. So we settled for the Moon.

[22:07] <elaADnlxie> fair enough

[22:09] <perlpilot> Zoffix: while you're out there, look for new phenomena that you can give a Perl 6-related name.  :)

[22:10] <elaADnlxie> or just take plush camelia with you

[22:11] <Zoffix> Nah, 'can't. My buddy is paying the larger share of our ticket to the Moon and he hates Perl 6.

[22:12] <elaADnlxie> send him alone.

[22:12] <Zoffix> But then I don't get to go!

[22:12] <DrForr> One way?

[22:13] *** agentzh left
[22:13] <Zoffix> Nah, we won't even land (can't afford it). Just sling around it, look at the backside, and come back.

[22:13] <perlpilot> Are you bringing a high-powered light?  The backside has no light.

[22:13] <DrForr> "I would just like to say that though I intend to fly away, I do *not* intend to travel to the moon, the Milky Way or even Mars. Up yours, Kravitz!"

[22:14] <Zoffix> ROFL

[22:14] <elaADnlxie> xDD

[22:14] <Zoffix> perlpilot: of course there is light :)

[22:14] *** pyrimidine left
[22:14] <elaADnlxie> 🙈 no light here

[22:14] *** pyrimidine joined
[22:14] *** RabidGravy left
[22:15] <DrForr> Actually it usually has light, think about what happens during eclipses :)

[22:15] <Zoffix> Yeah :)

[22:15] *** cog_ joined
[22:15] <perlpilot> depends on what you mean by "backside" 

[22:15] <Zoffix> perlpilot: any side :)

[22:15] <Zoffix> "dark side of the moon" is just figurative speech.

[22:17] *** cognominal left
[22:17] <DrForr> Gotta love resonance locks.

[22:17] *** itaipu joined
[22:19] *** pyrimidine left
[22:20] <perlpilot> Really someone just needs to put some more energy into building a habitat that can sustain humans on the order of decades, *then* figure out how to attach rockets to it

[22:21] <Zoffix> That's bound to fail :) Better build it in orbit

[22:21] *** pyrimidine joined
[22:21] <Zoffix> Well, we *have* it in orbit :) It just needs resupliage

[22:22] <perlpilot> I'd hate to be on the ever-longer supply run.

[22:22] <perlpilot> (for when we colonize other planets)

[22:23] <gfldex> fear not! Zoffix will write you a bot to do the supply runs for you.

[22:24] <Zoffix> For planets, you don't need to really. On Mars, the only supply you need to start with is hydrogen. And if there is indeed water ice under surface you're all set.

[22:25] <Zoffix> And for cross-star journeys, I'd imagine damage to your spacecraft would be biggest concern.

[22:25] <Zoffix> ...well, other than dying of old age :P

[22:26] <perlpilot> First ... make a trip to the asteroid belt to pick up a large supply of asteroids to use a shield on your journey ...

[22:26] <TEttinger> well use a robot

[22:29] <perlpilot> A future billionaire will make his (or her) money by inventing a giant glue gun for accreting asteroids by bombardment

[22:29] <perlpilot> (and then we'll just use the mass of the asteroid belt to make another earth-like planet in a closer orbit than Mars)

[22:30] *** Actualeyes left
[22:30] <Zoffix> Don't need any glue guns :) They'd stick to each other with gravity :P

[22:31] <perlpilot> momentum might over power gravity in the beginning.

[22:32] <perlpilot> Though ... according to wikipedia the asteroid belt doesn't have near enough mass for an earth like planet.  Bummer.

[22:34] *** mcmillhj left
[22:34] *** itaipu left
[22:36] *** llfourn joined
[22:37] *** Voldenet left
[22:40] *** risou_awy is now known as risou

[22:41] *** kyan left
[22:41] *** llfourn left
[22:42] *** Voldenet joined
[22:42] *** Voldenet left
[22:42] *** Voldenet joined
[22:44] *** itcharlie1 joined
[22:57] *** risou is now known as risou_awy

[22:58] *** pyrimidine left
[22:59] *** pyrimidine joined
[23:02] *** ajr_ joined
[23:02] <ajr_> Has anyone successfully deployed Rakudo* on the Raspberry Pi?

[23:03] <gfldex> ajr_: takes about 2h to build

[23:03] *** pyrimidine left
[23:04] <elaADnlxie> depends on what Pi you have. If I recall correctly, I was unable to build it myself on Zero

[23:04] <elaADnlxie> but I was able to install it from debian unstable repo with no issues

[23:04] <ajr_> I'm trying to do it on a 3. Make is dying.

[23:05] <elaADnlxie> huggable: deb

[23:05] <huggable> elaADnlxie, CentOS and Debian Rakudo packages: https://github.com/nxadm/rakudo-pkg/releases

[23:05] <elaADnlxie> no arm packages, heh

[23:05] <El_Che> elaADnlxie: I need to look into arm docker support. I may then create arm packages

[23:06] *** itcharlie1 left
[23:07] <El_Che> fedora 25 has arm support iirc, and I read today here that it has rakudo 2017.01

[23:14] *** robertle left
[23:15] <elaADnlxie> El_Che: well, debian unstable has 2016.12, which is also something you should consider

[23:16] *** mcmillhj joined
[23:16] <elaADnlxie> especially given that we are going to see a new debian release relatively soon

[23:17] *** lichtkind_ left
[23:19] <ajr_> So if I do manage the feat, it'll be an additional platform?

[23:20] <elaADnlxie> El_Che: oops, this was actually meant for ajr_ :)

[23:20] <SmokeMachine> Im going to add a new module into the ecosystem... should I PR or can I just commit it?

[23:21] <ajr_> @gfldx - does that imply that you've succeeded? (I know it takes a while, but that's fine.)

[23:22] *** mcmillhj left
[23:22] <gfldex> I didn't but remember somebody reporting it here. Also, somebody else digged into the failed build log for arm on debian and got that to work.

[23:23] <gfldex> that was about 6 month ago

[23:23] <Geth> ¦ ecosystem: 5e96167a75 | (Fernando Correa de Oliveira)++ | META.list

[23:23] <Geth> ¦ ecosystem: Adding Punnable to the ecosystem

[23:23] <Geth> ¦ ecosystem: 

[23:23] <Geth> ¦ ecosystem: https://github.com/FCO/Punnable

[23:23] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/5e96167a75

[23:23] <elaADnlxie> ajr_: again, if I were you, I'd just add debian testing repo and install it from there

[23:23] <SmokeMachine> I just committed... :)

[23:24] <Zoffix> \o/

[23:24] <ajr_> Any idea where I can find out what changes made it work? I'm less concerned about having it run than fixing the process.

[23:25] <elaADnlxie> ajr_: so what's the error you see?

[23:26] <sjn> Zoffix, TimToady, thanks! ^^

[23:28] <sjn> btw, is there a reason why .WHY hasn't been populated for perl6 symbols/methods/etc.?

[23:29] <ajr_> sorry, I don't have the details at hand. I don't want to waste people's time here on a debugging session. I just didn't want to waste time if a fix exists.

[23:29] * sjn imagines something related to parsing time

[23:32] <Zoffix> sjn: bigger issue is contributor time. You must sign CLA to be able to contribute to Rakudo, while anyone can contribute to docs repo freely.

[23:33] <Zoffix> sjn: and even bigger issue: Rakudo does not define Perl 6. It doesn't make sense for docs to be bound to it.

[23:35] *** risou_awy is now known as risou

[23:37] *** llfourn joined
[23:39] *** mcmillhj joined
[23:40] <Zoffix> If it can be kept separate, but merged together on build...

[23:41] *** espadrine left
[23:42] *** lep-delete left
[23:42] *** lichtkind_ joined
[23:42] *** llfourn left
[23:44] *** mcmillhj left
[23:44] *** lichtkind_ left
[23:45] *** lep-delete joined
[23:46] <Zoffix> m: #=meows␤sub x { }; say &x.WHY

[23:46] <camelia> rakudo-moar ae7bcf: OUTPUT: «Nil␤»

[23:46] <Zoffix> how to set WHY anyway?

[23:46] <timotimo> m: #|meows␤sub x { }; say &x.WHY

[23:46] <camelia> rakudo-moar ae7bcf: OUTPUT: «Nil␤»

[23:46] <timotimo> *shrug* ?

[23:48] <Zoffix> m: sub cast(Int $s)␤#= Initiate a specified spell normally␤#= (do not use for class 7 spells)␤{␤}␤say &cast.WHY;

[23:48] <camelia> rakudo-moar ae7bcf: OUTPUT: «Initiate a specified spell normally (do not use for class 7 spells)␤»

[23:48] <Zoffix> :/

[23:48] <Zoffix> m: #= meows␤sub x { }; say &x.WHY

[23:48] <camelia> rakudo-moar ae7bcf: OUTPUT: «Nil␤»

[23:48] <Zoffix> m: sub x␤#= meows␤ { }; say &x.WHY

[23:48] <camelia> rakudo-moar ae7bcf: OUTPUT: «meows␤»

[23:49] *** Actualeyes joined
[23:50] *** ajr_ left
[23:51] <Zoffix> m: use nqp; sub x { }; nqp::bindattr(&x, Block, '$!why', 'meows'); say &x.WHY

[23:51] <camelia> rakudo-moar ae7bcf: OUTPUT: «No such method 'set_docee' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[23:51] <Zoffix> Guess this one would work if given proper Pod

[23:51] <Zoffix> Pod object

[23:51] *** ajr_ joined
[23:52] *** risou is now known as risou_awy

[23:52] <Zoffix> Can be done as a module. You load it and book, got all the .WHYs set.

[23:52] <Zoffix> s/book/boom/; -_-

[23:54] *** wamba left
[23:55] *** mcmillhj joined
[23:56] *** cibs left
[23:57] *** eater left
[23:58] *** cibs joined
