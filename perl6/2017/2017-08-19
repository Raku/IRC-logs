[00:03] *** mcmillhj left
[00:08] *** Cabanossi left
[00:11] *** Cabanossi joined
[00:14] *** mcmillhj joined
[00:16] *** araraloren joined
[00:16] <araraloren> morning

[00:23] *** mcmillhj left
[00:28] *** astj joined
[00:33] *** astj left
[00:33] *** jonh left
[00:38] *** Cabanossi left
[00:39] *** rindolf left
[00:41] *** Cabanossi joined
[00:44] *** pilne joined
[01:10] *** Cabanossi left
[01:11] *** Cabanossi joined
[01:15] *** Rawriful left
[01:18] *** zengargoyle joined
[01:26] *** raschipi joined
[01:32] *** cdg joined
[01:36] *** cdg left
[01:39] *** Cabanossi left
[01:40] *** Cabanossi joined
[01:46] *** ilbot3 left
[01:51] *** ilbot3 joined
[01:51] *** ChanServ sets mode: +v ilbot3

[01:55] *** aeruder left
[01:55] *** aeruder joined
[01:56] *** nattefrost left
[01:56] *** lowbro left
[01:58] *** araraloren_ joined
[01:59] *** cdg joined
[02:01] *** araraloren left
[02:04] *** cdg left
[02:05] *** mcmillhj joined
[02:09] *** Cabanossi left
[02:10] *** mcmillhj left
[02:11] *** Cabanossi joined
[02:15] *** raschipi left
[02:19] *** astj joined
[02:21] *** mcmillhj joined
[02:23] <[Coke]> .tell zofffix the docs for that are in EXAMPLE.md, linked to from CONTRIBUTING.md

[02:23] <yoleaux> 18 Aug 2017 20:28Z <Zoffix> [Coke]: I fixed what xtests I could, per our fix-them-on-release agreement, but I can't find any docs on what new code pod tags were added to shut it up about undeclared variables, so those are still failing

[02:23] <yoleaux> [Coke]: I'll pass your message to zofffix.

[02:23] <yoleaux> 18 Aug 2017 20:44Z <Zoffix> [Coke]: never mind. Found the docs.  .oO( maybe all of these separate .md's should be in one place )

[02:24] *** astj left
[02:25] <[Coke]> .tell zoffix you asked to split up CONTRIBUT* because it was too big, so I started on that with this. See https://github.com/perl6/doc/issues/1302

[02:25] <yoleaux> [Coke]: I'll pass your message to zoffix.

[02:29] *** mcmillhj left
[02:33] <Geth> ¦ doc: a52ea3d4c8 | (Will "Coke" Coleda)++ | util/xt-recent-aspell.sh

[02:33] <Geth> ¦ doc: hacky fix to hacky script

[02:33] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a52ea3d4c8

[02:36] *** pierre_ joined
[02:40] *** pierre_ left
[02:41] *** noganex_ joined
[02:44] *** noganex left
[02:53] *** Cabanossi left
[02:55] *** Cabanossi joined
[03:00] *** cdg joined
[03:03] <Geth> ¦ doc: 71fe3a3f0d | (Will "Coke" Coleda)++ | doc/Type/Any.pod6

[03:03] <Geth> ¦ doc: Correct return type of minmax

[03:03] <Geth> ¦ doc: 

[03:03] <Geth> ¦ doc: Try to clarify min/max/minmax slightly.

[03:03] <Geth> ¦ doc: 

[03:03] <Geth> ¦ doc: Closes #1455

[03:03] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/71fe3a3f0d

[03:04] *** mr-fooba_ left
[03:05] *** cdg left
[03:07] *** Cabanossi left
[03:08] *** mr-foobar joined
[03:09] *** Cabanossi joined
[03:11] *** mr_ron left
[03:17] *** nalley joined
[03:18] *** nalley left
[03:18] *** nalley joined
[03:20] <Geth> ¦ doc: 2615849dd0 | (Will "Coke" Coleda)++ | template/search_template.js

[03:20] <Geth> ¦ doc: remove verbose console output

[03:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/2615849dd0

[03:27] *** pilne left
[03:34] *** mr-foobar left
[03:34] *** mid_home joined
[03:37] <nalley> hello guys, I watched this video(https://www.youtube.com/watch?v=5pa1AryylpM) and tried this :( (sqrt(50)+7)**(1/3) +(7-sqrt(50))**(1/3), which should be 2 ) with rakudo. When I use **(1/3) for cube root, the result is NAN; When I use .roots(3), i got 6.  Anyone know why？ （sorry for my poor English） 

[03:37] *** mr-foobar joined
[03:38] <nalley> p6: (7-sqrt(50))**(1/3)

[03:38] <camelia> rakudo-moar 159987: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "**" in expression "(7-sqrt(50))**(1/3)" in sink context (line 1)␤»

[03:39] <TEttinger> m: say (7-sqrt(50))**(1/3)

[03:39] <camelia> rakudo-moar 159987: OUTPUT: «NaN␤»

[03:39] <TEttinger> m: say (7-sqrt(50))

[03:39] <camelia> rakudo-moar 159987: OUTPUT: «-0.0710678118654755␤»

[03:41] <TEttinger> m: say cbrt(8)

[03:41] <camelia> rakudo-moar 159987: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    cbrt used at line 1␤␤»

[03:41] <TEttinger> wasn't sure if it was a thing

[03:41] <TEttinger> m: say (7+sqrt(50))**(1/3)

[03:41] <camelia> rakudo-moar 159987: OUTPUT: «2.41421356237309␤»

[03:42] <TEttinger> m: -8 ** (1/3)

[03:42] <camelia> rakudo-moar 159987: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "-" in expression "-8 **" in sink context (line 1)␤»

[03:42] <TEttinger> m: say -8 ** (1/3)

[03:42] <camelia> rakudo-moar 159987: OUTPUT: «-2␤»

[03:42] <TEttinger> well... it works for some negative numbers. strange

[03:45] <nalley> m: say (-27) ** (1/3)

[03:45] <camelia> rakudo-moar 159987: OUTPUT: «NaN␤»

[03:45] <nalley> m: say -27 ** (1/3)

[03:45] <camelia> rakudo-moar 159987: OUTPUT: «-3␤»

[03:47] <TEttinger> that one's... very weird

[03:47] <geekosaur> precedence

[03:47] <TEttinger> m: say((7 - sqrt(50)) ** (1/3))

[03:47] <camelia> rakudo-moar 159987: OUTPUT: «NaN␤»

[03:47] <geekosaur> not sure why unary - isn't higher precedence

[03:48] <TEttinger> geekosaur: so -27 is actually - being called on 27, not the integer -27?

[03:48] <nalley> oh, I see

[03:48] <geekosaur> it's doing - (27 ** (1/3))

[03:49] <TEttinger> there's some math discussion over whether the 1/3 power is defined for negative numbers

[03:49] <geekosaur> for wharever reason the precedence of unary - is lower than exponentiation, so the expression result is being negated instead of the number

[03:50] <geekosaur> and yes, there are questions about that

[03:53] <geekosaur> more precisely, see https://math.stackexchange.com/questions/25528/cubic-root-of-negative-numbers

[03:53] <geekosaur> we often cheat in this case and consider the real root the "only" root

[03:56] <geekosaur> also note, relevantly, the discussion about the _principal root_

[03:57] <geekosaur> since the principal cube root of -8 is complex, something that works in terms of principal roots must produce NaN

[03:57] <geekosaur> er, real principal roots

[03:57] <nalley> I understand now, thank you guys. so for that question i can do this

[03:57] <nalley> m: say (7+sqrt(50)) ** (1/3) + -(-(7-sqrt(50)))**(1/3)

[03:57] <camelia> rakudo-moar 159987: OUTPUT: «2␤»

[04:05] *** nalley left
[04:08] *** mcmillhj joined
[04:13] *** mcmillhj left
[04:14] *** BenGoldberg left
[04:14] <[Coke]> working on a fix for Rat not being searchable on the doc site.

[04:16] <[Coke]> feels like htmlify got faster.

[04:16] *** BenGoldberg joined
[04:21] *** wamba joined
[04:29] <Geth> ¦ doc: 71f40b4457 | (Will "Coke" Coleda)++ | template/search_template.js

[04:29] <Geth> ¦ doc: Don't blindly trim to 50 results on search

[04:29] <Geth> ¦ doc: 

[04:29] <Geth> ¦ doc: Instead, preferentially keep exact matches and prefix matches.

[04:29] <Geth> ¦ doc: 

[04:29] <Geth> ¦ doc: Closes #1477 by making "Rat" searchable again.

[04:29] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/71f40b4457

[04:31] <[Coke]> gfldex: searching for "Rat" now shows Rat & RatStr (and other stuff)

[04:34] *** mr-foobar left
[04:38] *** mr-foobar joined
[04:46] *** cpage_ left
[05:00] *** khw left
[05:02] *** Ben_Goldberg joined
[05:02] *** BenGoldberg left
[05:02] *** Ben_Goldberg is now known as BenGoldberg

[05:04] *** mr-foobar left
[05:04] *** skids left
[05:09] *** mr-foobar joined
[05:10] <Geth> ¦ doc: 1437b0ee22 | (Will "Coke" Coleda)++ | util/trigger-rebuild.txt

[05:10] <Geth> ¦ doc: trigger rebuild

[05:10] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1437b0ee22

[05:16] *** cdg joined
[05:18] *** skids joined
[05:20] *** cdg left
[05:26] *** cpage_ joined
[05:30] *** cpage_ left
[05:39] *** Cabanossi left
[05:40] *** Cabanossi joined
[05:42] *** skids left
[05:53] *** pierre_ joined
[05:53] *** eliasr left
[05:56] *** astj joined
[05:58] *** mcmillhj joined
[06:00] *** astj left
[06:02] *** mcmillhj left
[06:05] *** mr-foobar left
[06:05] *** mr-foobar joined
[06:17] *** pecastro joined
[06:20] *** mid_home left
[06:32] *** pecastro left
[06:32] *** ShalokShalom_ joined
[06:35] *** ShalokShalom left
[06:35] *** lizmat left
[06:36] *** mr-foobar left
[06:40] *** mr-foobar joined
[06:43] *** lizmat joined
[06:54] *** darutoko joined
[06:59] <gfldex> [Coke]: nice

[06:59] *** jeek left
[07:05] <BenGoldberg> So if you add space to, and remove space from, that file, does the doc build happen in reverse? ;)

[07:05] <gfldex> BenGoldberg: no, if you add space the universe gets bigger

[07:05] *** mr-foobar left
[07:06] *** mr-foobar joined
[07:10] *** BenGoldberg left
[07:14] *** ShalokShalom_ is now known as ShalokShalom

[07:16] *** parv joined
[07:17] *** cdg joined
[07:19] *** gigavinyl joined
[07:21] *** cdg left
[07:26] *** gigavinyl left
[07:31] *** pharv joined
[07:33] *** dct joined
[07:36] *** mr-foobar left
[07:36] *** mr-foobar joined
[07:39] *** BooK joined
[07:48] *** smls joined
[07:48] <smls> bisectable6: say <a b>.any ~~ m/a/;

[07:48] <bisectable6> smls, On both starting points (old=2015.12 new=e3e29c5) the exit code is 0 and the output is identical as well

[07:48] <bisectable6> smls, Output on both points: «False»

[07:54] <zorin-os> is it possible to compile only perl's -Pe function into a C program so that its regex can be used in C programs (instead of using c regex libs and h's that ADD regex to ur application but dont actually SUPPORT using its syntax inside of the .c itself (eg using s/hello/bo/ in a .c file)

[08:01] <BooK> I was wondering, are there any authoring tools for Perl6 modules at the moment?

[08:02] <timotimo> there's mi6 and ddt

[08:02] <timotimo> i haven't tried either of those yet

[08:02] <timotimo> there's also miroku

[08:03] *** cdg joined
[08:03] *** zorin-os left
[08:03] <timotimo> buggable: eco Ddt

[08:03] <buggable> timotimo, Ddt 'Distribution Development Tool similar to mi6': https://github.com/kalkin/Ddt 2 other matching results: https://modules.perl6.org/s/Ddt

[08:03] <timotimo> 1) why is Ddt in there twice, 2) why does it say "2 other results" when it already showed one of the two?

[08:04] *** cdg_ joined
[08:04] *** mr-fooba_ joined
[08:05] *** domidumont joined
[08:06] *** cdg__ joined
[08:07] *** mr-foobar left
[08:08] *** cdg left
[08:08] *** Cabanossi left
[08:09] *** Cabanossi joined
[08:09] *** cdg_ left
[08:10] *** domidumont left
[08:10] *** domidumont joined
[08:11] *** cdg__ left
[08:14] *** wamba left
[08:15] *** ufobat joined
[08:31] <BooK> I have a "unit module" with defines a sub and a class (so that the class can use the sub internally)

[08:32] <BooK> can I access the sub from the outside?

[08:32] <BooK> and if so, under what name?

[08:34] <ufobat> BooK, https://docs.perl6.org/type/Sub#index-entry-our_%28Sub%29

[08:34] <ufobat> is this what you're looking for?

[08:36] *** wamba joined
[08:37] *** Cabanossi left
[08:37] <BooK> I guess

[08:39] *** mcmillhj joined
[08:40] *** Cabanossi joined
[08:40] <ufobat> git status

[08:40] <ufobat> oups sorry

[08:42] <BooK> ufobat: so with our sub foo, the sub becomes accessible, but is not exported. what under what name can I call it?

[08:42] <timotimo> ClassName::foo

[08:42] <timotimo> m: class MyClass { our sub foo { say "this is foo!" } }; MyClass::foo()

[08:42] <camelia> rakudo-moar e3e29c: OUTPUT: «this is foo!␤»

[08:42] <BooK> doesn't seem to work for me, I guess my definition is wrong

[08:43] <ufobat> m: module Foo { my sub a {say "a"}; our sub b {say "b"}}; Foo::b(); Foo::a()

[08:43] <camelia> rakudo-moar e3e29c: OUTPUT: «b␤Could not find symbol '&a'␤  in block <unit> at <tmp> line 1␤␤»

[08:44] <BooK> unit module Git::Version; our sub normalize {} ; class Git::Version is Version; # the relevant bits (I think)

[08:44] <ufobat> is "module" like a "namespace" for subs and stuff which is usually not used in combination with classes?

[08:44] <timotimo> oh, i thought you put the sub inside the class

[08:44] <BooK> maybe my use^H^H^H^H^H^H^H^H^H^H^H^H^H^H^H^H^HI didn't really know what I was doing then

[08:45] <BooK> (bad network connection: I'm in a train)

[08:45] <ufobat> isn't it now Git::Version::normalize() ?

[08:45] *** mcmillhj left
[08:46] <BooK> $ perl6 -Ilib -MGit::Version -e 'say Git::Version::normalize(@*ARGS.shift)' 1.0.2

[08:46] <BooK> Could not find symbol '&normalize'

[08:47] <ufobat> m: module Foo { my sub a {say "a"}; our sub b {say "b"}; class Foo {has $.a}}; Foo::b(); say Foo::Foo.new() 

[08:47] <camelia> rakudo-moar e3e29c: OUTPUT: «b␤Foo::Foo.new(a => Any)␤»

[08:47] <ufobat> looks like your class Git::Version in the module Git::Version is now having the name Git::Version::Git::Version from the outside

[08:49] <BooK> ufobat: yeah, I've seen messages with that name

[08:49] <BooK> so, what did I do wrong?

[08:51] <ufobat> dont know, it works for me

[08:51] <ufobat> https://nopaste.me/view/3b787bd7

[09:00] <BooK> ok, thanks. I'll keep exploring/learning

[09:09] *** eroux joined
[09:23] *** espadrine_ joined
[09:25] *** domidumont left
[09:27] *** Skarsnik joined
[09:27] <Skarsnik> Hello

[09:31] *** pharv left
[09:33] *** nadim joined
[09:43] *** andreoss left
[09:43] *** andreoss joined
[10:02] *** TEttinger left
[10:02] *** Rawriful joined
[10:18] <leont> .tell Zoffix I managed to fix the other Test.pm bug, will PR soon

[10:18] <yoleaux> leont: I'll pass your message to Zoffix.

[10:22] *** cdg joined
[10:24] *** mr-fooba_ left
[10:27] *** cdg left
[10:27] <Xliff_> Does Perl 6 support reloading code?

[10:27] *** Xliff_ is now known as Xliff

[10:33] *** mr-foobar joined
[10:33] <Skarsnik> Not really

[10:37] <lizmat> Xliff: you can mix in roles at runtime, which is almost as good ?

[10:38] *** Cabanossi left
[10:39] *** Cabanossi joined
[10:47] <leont> If I have a file descriptor to a pipe, how can I create an IO::Pipe for it?

[10:49] *** dct left
[10:51] <lizmat> leont: the attribute is called $!on-native-descriptor;

[10:52] *** Skarsnik_ joined
[10:54] <leont> How do I use that?

[10:55] <leont> (and actually, I want a supply for the pipe, and thought IO::Pipe.Supply was the obvious way)

[10:55] *** Skarsnik left
[10:56] <leont> that attribute looks useful for native-descriptor(), but I want to use it in the opposite direction

[10:58] <lizmat> perhaps Zoffix has an idea

[10:59] <andreoss> m:  macro infix:<foo>($a, $b) { quasi {{{{$b}}}}} ; say (1 foo 2);

[10:59] <camelia> rakudo-moar 34295c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Use of macros is experimental; please 'use experimental :macros'␤at <tmp>:1␤------> 3macro7⏏5 infix:<foo>($a, $b) { quasi {{{{$b}}}}}␤»

[10:59] <andreoss> m:  use experimental :macros; macro infix:<foo>($a, $b) { quasi {{{{$b}}}}} ; say (1 foo 2);

[10:59] <camelia> rakudo-moar 34295c: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 1 in sink context (line 1)␤Useless use of constant integer 2 in sink context (line 1)␤2␤»

[10:59] <andreoss> are infix macros NYI?

[11:00] *** wamba left
[11:02] *** nadim left
[11:07] *** rindolf joined
[11:07] <leont> I have a suspicion the answer is "it's NYI"

[11:08] <leont> Both for the synchronous and the asynchronous case

[11:08] *** setty1 joined
[11:11] <leont> I think it would require inventing IO::Pipe::Async, as well as adding a few small functions to nqp::async*

[11:11] *** wamba joined
[11:12] <jnthn> leont: What do you want to do, take a descriptor and use it as stdin for a process or some such?

[11:12] *** andrzejku joined
[11:13] <jnthn> (or stdout, or stderr)

[11:13] <leont> Pretty sure how to do the former, less so about the latter

[11:13] <jnthn> We could just add multi candidates taking an int to https://github.com/rakudo/rakudo/blob/nom/src/core/Proc/Async.pm#L228 and similar

[11:14] <jnthn> Since all it does is extract the integer descriptor anyway

[11:14] <leont> I get a file descriptor in an environmental variable, and want to react on every byte I can read (for implementing gnu make job server protocol)

[11:14] <jnthn> s/descriptor/handle/

[11:15] <jnthn> Oh, so you don't even want anything to do with processes.

[11:15] *** cdg joined
[11:15] <jnthn> There's not yet a way to do that yet, but it should be relatively easy to add.

[11:16] <jnthn> I've considered using it for $io-handle.Supply to make it actually start an async reader or some such

[11:17] <leont> What I think I need is for NQP to expose a few uv_pipe functions (mainly uv_pipe_open, but init, connect and bind sound useful too), building an IO::Pipe::Async on top of that should be fairly straightforward given IO::Socket::Async

[11:17] <leont> And an IO::Pipe on top of that should also be straightforward

[11:18] *** ufobat left
[11:18] <jnthn> Yeah, IO::Socket::Async and the way it does its VM binding would be probably a good thing to copy

[11:20] *** cdg left
[11:30] *** wamba left
[11:34] *** wamba joined
[11:35] <leont> Seems my moarvm checkout is 4 years out of date, time flies :-D

[11:37] <Geth> ¦ ecosystem: dcad25b9d3 | (Moritz Lenz)++ | META.list

[11:37] <Geth> ¦ ecosystem: New module Grammar::ErrorReporting

[11:37] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/dcad25b9d3

[11:51] *** Skarsnik_ is now known as Skarsnik

[11:53] *** Cabanossi left
[11:54] *** Cabanossi joined
[12:02] <smls> Is there a way to have a role add an attribute that is initialized on object cnstruction, i.e.  `has $.a = ...;`  but allow a class which composes the role to override that initialization expression?

[12:02] *** BenGoldberg joined
[12:04] <smls> Attributes cannot be overridden, so simply writing  `my $.a = NEW-EXPRESSION`  in the class is out.

[12:07] <smls> Doing the initialization in TWEAK and then overriding that also does not work, because the class doesn't have access to `$!a`, only to `$.a`... and virtual method calls are not allowed in TWEAK.

[12:10] <leont> Doing this well would probably require a refactor so the socket and pipe systems can share most of their implementations

[12:10] *** eliasr joined
[12:11] <Skarsnik> m: use nqp; say nqp::can(num.HOW, "nativesize") && num.^nativesize == 0

[12:11] <camelia> rakudo-moar ccf6da: OUTPUT: «Cannot resolve caller infix:<==>(NQPMu, Int); none of these signatures match:␤    ($?)␤    (\a, \b)␤    (Real \a, Real \b)␤    (Int:D \a, Int:D \b)␤    (int $a, int $b)␤    (Num:D \a, Num:D \b --> Bool)␤    (num $a, num $b --> Bool)␤    (…»

[12:11] *** ilbelkyr left
[12:11] <leont> Suspect this is over my head for now

[12:11] <Skarsnik> hm someone tell me how to fix this with nqp, but I don't remember how x)

[12:12] <leont> It seems no one is running the spectest without having an installed perl6. It's failing on a plain checkout

[12:14] *** ilbelkyr joined
[12:15] *** wamba left
[12:17] *** araralonre__ joined
[12:17] *** araralonre__ is now known as araraloren

[12:19] <smls> Oh, `self.foo` calls *do* work inside TWEAK... only `$.foo` calls fail ("Virtual method call $.foo may not be used on partially constructed object")...

[12:19] *** atroxaper joined
[12:19] <smls> Is that a bug?

[12:19] *** araraloren_ left
[12:22] <moritz> no

[12:24] <smls> What's the difference between those method call syntaxes?

[12:31] *** nattefrost joined
[12:34] *** atroxaper left
[12:34] *** atroxaper joined
[12:34] <smls> It doesn't seem to matter if `foo` is an auto-accessor or a manually declared method... `self.foo` works in TWEAK, but `$.foo` doesn't.

[12:36] *** araraloren_ joined
[12:36] <smls> p6doc doesn't seem to describe any intentional difference between the syntaxes. It claims "Within methods, $.origin works the same as self.origin": https://docs.perl6.org/language/objects#self

[12:37] <Geth> ¦ doc: 4a2bc0eaba | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/testing.pod6

[12:37] <Geth> ¦ doc: Document Test.pm is not thread safe and likely won't be

[12:37] <Geth> ¦ doc: 

[12:37] <Geth> ¦ doc: There are plans to make Testo.pm thread safe, but the module is

[12:37] <Geth> ¦ doc: still in alpha stage; just mention "ecosystem modules" as a possible

[12:37] <Geth> ¦ doc: solution for threadiness for now.

[12:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4a2bc0eaba

[12:37] <Geth> ¦ doc: 72cb637a05 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/testing.pod6

[12:37] <Geth> ¦ doc: s/that/the/;

[12:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/72cb637a05

[12:39] <smls> Then again, that p6doc section also claims that `self` is a type object inside BUILD, which isn't the case:

[12:39] <smls> m:  class A { submethod BUILD { say self.defined } };  A.new;

[12:39] <camelia> rakudo-moar ccf6da: OUTPUT: «True␤»

[12:40] *** araraloren left
[12:40] *** nadim joined
[12:42] *** domidumont joined
[12:44] <smls> moritz: Should't I RT that discrepancy between the `$.method` and `self.method` syntaxes?

[12:44] <jnthn> smls: It's by design.

[12:45] <jnthn> (self.foo is an escape hatch for when you're sure you know you want to make a virtual call)

[12:45] <smls> Why wouldn't one want to make a virtual call?

[12:46] <moritz> because the BUILD of subclasses hasn't run yet

[12:46] <moritz> so the object isn't fully initialized

[12:47] <moritz> and methods from child classes might not work yet

[12:47] <smls> Ah.

[12:51] *** rightfold joined
[12:52] *** Cabanossi left
[12:54] *** Skarsnik_ joined
[12:54] *** araralonre__ joined
[12:54] *** Cabanossi joined
[12:55] *** araralonre__ left
[12:56] <smls> And TWEAK is just a second round of BUILD? No differenced between them?

[12:56] <smls> i.e:   BUILD (superclass) --> BUILD (subclass) --> TWEAK (superclass) --> TWEAK (subclass)   ?

[12:56] <smls> *differences

[12:56] *** araraloren joined
[12:57] *** araraloren_ left
[12:57] *** Skarsnik left
[12:58] *** domidumont left
[13:02] *** Skarsnik_ is now known as Skarsnik

[13:06] *** eroux left
[13:07] <atroxaper> Hello all. Am I right that I can 'use' something only from .pm file but not from .p6? I wanted create .p6 with sub declaration. And .t which imports the sub and tests it.

[13:08] <leont> .pm6

[13:09] <atroxaper> As I understand I have to write NAME.pm file with declaration of NAME module. After that I can import NAME module and it's exports.

[13:10] <Skarsnik> yes

[13:10] <Skarsnik> well prefer .pm6 ^^

[13:10] <atroxaper> Ok. Asked just for sure ^^

[13:12] <atroxaper> And what extension is prefered for scripts? .p6 or .pl6? I see different examples on the github.

[13:12] <Skarsnik> I use p6

[13:12] <Skarsnik> but if it's clear it's not perl 5 it's fine I guess ^^

[13:13] <atroxaper> I will then. Thanks.

[13:14] <smls> I use .p6 for scripts and .pm for modules, because I like 2-letter suffixes... :)

[13:14] <smls> I make sure to add the line `use v6;` at the top of every module though, so no-one thinks it's Perl 5.

[13:16] *** Skarsnik_ joined
[13:19] *** Skarsnik left
[13:22] <andreoss> is there a way to specify into which class a role will be mixed in?

[13:23] <andreoss> (known as self-type in Scala)

[13:24] <hahainternet> i'm interested in how you could /not/ specify which class, but i don't know enough about p6 to help, intrigued by the problem though

[13:25] *** atroxaper left
[13:27] <Skarsnik_> hm

[13:27] *** nadim left
[13:27] *** Skarsnik_ is now known as Skarsnik

[13:28] <leont> possibly ::?CLASS 

[13:29] *** araraloren left
[13:29] *** Skarsnik_ joined
[13:29] *** araraloren joined
[13:30] <araraloren> smls，actual it is use v6.c;

[13:30] <smls> araraloren: Good point, I should use that instead.

[13:30] *** Skarsnik__ joined
[13:32] <araraloren> and you can use v6.d.PREVIEW

[13:32] *** Skarsnik left
[13:33] *** Skarsnik_ left
[13:34] <andreoss> m: class Z {...}; role F { submethod BUILD(::?CLASS:D $self: |c where $self ~~ Z) { } } ; class Z does F {} ; Z.new.say

[13:34] <camelia> rakudo-moar ccf6da: OUTPUT: «Z.new␤»

[13:36] <andreoss> is it even possible to know stuff like that at compile time?

[13:36] *** Skarsnik__ is now known as Skarsnik

[13:36] <andreoss> i.e which class is using this role

[13:37] <Skarsnik> Not really since you can compose at run time

[13:37] *** parv left
[13:38] *** Cabanossi left
[13:38] <Skarsnik> m: class A {}: role R {}; my A $a; $a does R; say $a ~~ R;

[13:38] <camelia> rakudo-moar ccf6da: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3class A {}:7⏏5 role R {}; my A $a; $a does R; say $a ~␤    expecting any of:␤        colon pair␤»

[13:39] <Skarsnik> m: class A {}; role R {}; my A $a; $a does R; say $a ~~ R;

[13:39] <camelia> rakudo-moar ccf6da: OUTPUT: «Cannot use 'does' operator with a type object.␤  in block <unit> at <tmp> line 1␤␤»

[13:39] <andreoss> m: class A {}; role R {}; my A $a .=new ; $a does R; say $a ~~ R; 

[13:39] <camelia> rakudo-moar ccf6da: OUTPUT: «True␤»

[13:40] *** Cabanossi joined
[13:43] *** marciogm joined
[13:43] *** pilne joined
[13:51] *** domidumont joined
[13:51] <andreoss> m: sub infix:«>>»($a, $b) { $a +> $b } ; say (1 >> 2);

[13:51] <camelia> rakudo-moar 26287a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of >> to do right shift; in Perl 6 please use +> or ~>␤at <tmp>:1␤------> 3ix:«>>»($a, $b) { $a +> $b } ; say (1 >>7⏏5 2);␤»

[13:52] *** domidumont left
[13:52] <andreoss> can i turn it off?

[13:57] *** setty1 left
[14:00] *** Zoffix joined
[14:00] <Zoffix> Is dnmfarrell aka David Farrell here?

[14:00] *** dmaestro joined
[14:01] <Zoffix> andreoss: not at the moment

[14:06] *** wamba joined
[14:07] <AlexDaniel> .seen dnmfarrell

[14:07] <yoleaux> I saw dnmfarrell 16 Nov 2016 21:47Z in #perl6: <dnmfarrell> hey folks, thought you might like to know there is a new kickstarter project for "Learning Perl 6" written by brian d foy and  published by O'Reilly https://www.kickstarter.com/projects/1422827986/learning-perl-6

[14:13] <Zoffix> But anyway: the problem is dnmfarrell silently deleted 4 modules off github; we just wanted to know how to proceed. Currently gonna recover from forks and copies and store them in perl6-community-modules

[14:24] <Geth> ¦ ecosystem: 5bde1116ee | (Aleks-Daniel Jakimenko-Aleksejev)++ | META.list

[14:24] <Geth> ¦ ecosystem: System::Passwd is gone, move to perl6-community-modules

[14:24] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/5bde1116ee

[14:25] <AlexDaniel> here's one

[14:37] *** Cabanossi left
[14:38] *** lucasb joined
[14:40] *** Cabanossi joined
[14:43] <Geth> ¦ ecosystem: 0f6fc54807 | (Aleks-Daniel Jakimenko-Aleksejev)++ | META.list

[14:43] <Geth> ¦ ecosystem: URI::Encode is gone, move to perl6-community-modules

[14:43] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/0f6fc54807

[14:48] *** skids joined
[14:49] <lucasb> I have no idea what atomicint is for, just saw the name... Wasn't there bikeshed to name it something shorter like "aint" ?

[14:51] <Zoffix> lucasb: atomicint is an int of size that can be safely operated on atomically

[14:51] <Zoffix> using new atomic ops

[14:52] <Zoffix> m: my atomicint $x = 42; say $x⚛++; say $x

[14:52] <camelia> rakudo-moar 26287a: OUTPUT: «42␤43␤»

[14:52] <lucasb> Zoffix: right, thanks. I was just wondering about the huffmanization of the name, but I guess "atomicint" is ok

[14:52] <Zoffix> As for "aint"... other than a chuckle about its similarity to the slang for "am not", it's a terrible name.

[14:53] <lucasb> I guess you are right :)

[15:02] <jnthn> Also atomicuint isn't an unreasonable future request, and I don't think we want auint :P

[15:03] <jnthn> I think in terms of Perl 6 users who will actually use this feature, we're talking a fraction of a percent, so the huffman argument for aint ain't existent :)

[15:06] *** ufobat joined
[15:08] *** Cabanossi left
[15:10] *** Cabanossi joined
[15:13] *** atroxaper joined
[15:14] *** pmurias joined
[15:15] <pmurias> why is it atomicint rather than atomic-int?

[15:16] <jnthn> *sigh*

[15:17] <jnthn> Why is it uint rather than u-int? Why is it FatRat rather than Fat-Rat?

[15:17] <jnthn> Because we consistently don't hyphen type names.

[15:19] <pmurias> ok, seems like a decent reason ;)

[15:26] *** skids left
[15:40] *** nadim joined
[15:53] *** pierre_ left
[15:54] *** [particle] left
[15:54] *** pierre_ joined
[15:54] *** [particle] joined
[15:56] *** [particle]1 joined
[15:56] *** [particle] left
[15:57] *** andrzejku left
[15:58] *** andrzejku joined
[16:02] *** llfourn joined
[16:09] *** zacts joined
[16:14] <moritz> I need some idea for my module

[16:14] <moritz> I've published https://github.com/moritz/Grammar-ErrorReporting earlier today

[16:15] <moritz> it's basically a role that produce an "error" method, much like rakudo's "panic", which does some fancy error formating etc.

[16:15] <moritz> and also a FAILGOAL method

[16:16] <moritz> now I'm considering how to optionally use the high-water mark method as illustrated in https://gist.github.com/moritz/9c8e1a5f48f3f61355dfd245a999a66c

[16:16] <moritz> and still have it fit into a mostly unobstrusive interface

[16:16] <moritz> should it be a separate role? or 

[16:17] <moritz> or only the option to use those dynamic variables in error reporting, and force people to write their own methods for setting the dynamic variables?

[16:26] <smls> moritz: I don't suppose it can be made so that name of the nearest parent rule that would have become part of the AST, is printed to the user?

[16:27] <smls> e.g. if `TOP` calls `<foo>` which calls <.bar>, and an error happens in rule `bar`, it would print "error in rule foo"

[16:27] <smls> Because `bar` was called with the dot that excludes it from the AST.

[16:30] <moritz> smls: I don't know how to do that

[16:30] <moritz> smls: but what's in the gist works pretty well

[16:31] <moritz> it's the name of the last rule that advanced the parse and called ws

[16:31] *** lucasb left
[16:35] <smls> How about a trait that can be applied to user-facing rules (i.e. ones whose names should be printed in that way)?

[16:37] <moritz> that could work

[16:37] <moritz> callframe(1).code gives access to the code object

[16:38] <moritz> and a trait could mix in a role that we can check

[16:38] <smls> And you could walk the callstack and find the next-highest one that has the trait, right?

[16:39] <moritz> yes, though that might get expensive

[16:39] *** Cabanossi left
[16:40] *** Cabanossi joined
[16:40] <smls> Can you merely store a reference to the call stack in $*LASTRULE, and do the walking once an actual error has occured?

[16:40] *** khw joined
[16:42] <moritz> no, at that point the stack frames don't exist anymore

[16:43] <MasterDuke> moritz: it would be nice to see the error output in the example given in README.md for https://github.com/moritz/Grammar-ErrorReporting

[16:44] <smls> moritz: Approached from the other direction: Maybe the trait initialization code could hack the $*HIGHWATER and $*LASTRULE modification code directly into the rules it's applied to, thus not making the precudure dependent on `ws`?

[16:45] <moritz> smls: don't know if that's possible, but probably worth investigating

[16:45] <moritz> MasterDuke: done

[16:46] <MasterDuke> cool

[16:46] *** andrzejku left
[16:46] <smls> indeed :)

[16:47] <[Coke]> If no one is looking at docs.perl6.org right now, I'll get back on that.

[16:47] *** andrzejku joined
[16:48] <Zoffix> I don't think anyone is. There was some unicode problem in MoarVM, so samcv didn't have time.

[16:50] <[Coke]> ok. I am going to skip apt-get and do it the hard way.

[16:50] <[Coke]> Zoffix++ for getting it as far as it did get.

[16:56] *** Aaronepower left
[16:57] <Geth> ¦ ecosystem: 24f489f949 | (Aleks-Daniel Jakimenko-Aleksejev)++ | META.list

[16:57] <Geth> ¦ ecosystem: These modules simply no longer exist

[16:57] <Geth> ¦ ecosystem: 

[16:57] <Geth> ¦ ecosystem: Nothing depends on them, so we are not going to

[16:57] <Geth> ¦ ecosystem: restore them in perl6-community-modules.

[16:57] <Geth> ¦ ecosystem: 

[16:57] <Geth> ¦ ecosystem: Those who are interested should feel free to fork.

[16:57] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/24f489f949

[17:00] *** bonf joined
[17:07] *** domidumont joined
[17:07] *** pharv joined
[17:08] <moritz> btw I've started Grammar::ErrorReporting with ddt, https://github.com/kalkin/Ddt

[17:09] <moritz> nice user experience so far

[17:14] <mst> Grammar::ErrorReporting ? something to give useful responses on failed parses?

[17:14] <pmurias> moritz: Grammar::ErrorReporting is GPL licenced? :/

[17:14] <moritz> mst: yes, that's the plan

[17:14] <moritz> pmurias: what would you prefer?

[17:15] <moritz> pmurias: if you want something more liberal, send a PR :-)

[17:15] <mst> that would be excellent

[17:16] <moritz> it has annoyed me for quite some time that Perl 6 has all that awesome stuff, but doesn't expose it to the user

[17:17] <moritz> and now I want something that I can use in examples in my book :-)

[17:17] <moritz> and it seems that TimToady++ has started going down that road too, with exposing highwater stuff in failed matches

[17:18] <mst> :D

[17:18] <mst> I found it a little disappointing too, but didn't have time to learn enough to figure out if I could help (sorry)

[17:19] <moritz> no worries

[17:19] <moritz> I was much deeper entrenched, and hadn't bothered earlier

[17:23] <[Coke]> looks like we also had a doc build going for 24h or so. I *think* I have cleared the blockage, will know in 10s of minutes.

[17:26] <tyil[m]> pmurias: whats wrong with being gpl licensed?

[17:26] *** Ben_Goldberg joined
[17:26] *** BenGoldberg left
[17:26] *** Ben_Goldberg is now known as BenGoldberg

[17:29] *** Skarsnik_ joined
[17:32] *** Skarsnik left
[17:37] *** Cabanossi left
[17:37] *** Skarsnik__ joined
[17:39] *** Aaronepower joined
[17:39] *** Cabanossi joined
[17:40] *** Skarsnik_ left
[17:42] *** Skarsnik_ joined
[17:43] *** Skarsnik_ is now known as Skarsnik

[17:45] *** Skarsnik__ left
[17:45] *** Skarsnik_ joined
[17:48] *** Skarsnik left
[17:48] <bonf> hello, can someone help me out with NativeCall? I'm trying to figure out how to define a fixed size array in a CStruct.

[17:54] <[Coke]> looks like docs has been updated.

[17:54] *** silug joined
[18:01] <Geth> ¦ doc: 75bb88a139 | (Will "Coke" Coleda)++ | CONTRIBUTING.md

[18:01] <Geth> ¦ doc: note npm dep

[18:01] <Geth> ¦ doc: 

[18:01] <Geth> ¦ doc: Closes #1457

[18:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/75bb88a139

[18:03] *** wamba left
[18:09] <Skarsnik_> bonf, you can't

[18:09] *** Skarsnik_ is now known as Skarsnik

[18:09] <Skarsnik> I mean you can put the size

[18:09] <Skarsnik> *can't

[18:09] <Skarsnik> it will just be a CArray[mytype]

[18:09] <Geth> ¦ doc: f1ae818e9e | (Will "Coke" Coleda)++ | template/footer.html

[18:09] <Geth> ¦ doc: bust browser cache

[18:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f1ae818e9e

[18:10] *** BenGoldberg left
[18:10] <bonf> my current solution is having a CArray[uint8] instead of the entire struct :/

[18:11] <Skarsnik> ?

[18:12] <Skarsnik> You can have class A is repr('CStruct') { has CArray[uint8] $foo}

[18:12] *** atroxaper left
[18:12] <bonf> I mean, let's say my c struct is something like {char str[10]; int n;}

[18:13] <Skarsnik> I should do a gptable bot x)

[18:15] <Skarsnik> well it will be class A { has Pointer[int8] $.str; has int32 $.n};

[18:15] <Skarsnik> *CArray

[18:15] <Skarsnik> not Pointer

[18:16] <bonf> let me check again, but I couldn't get it to work this way

[18:16] *** zakharyas joined
[18:17] *** wamba joined
[18:18] <Skarsnik> huggable, module App::GPTrixie

[18:18] <huggable> Skarsnik, nothing found

[18:19] *** zakharyas left
[18:19] <Skarsnik> huggable, help

[18:19] <huggable> Skarsnik, nothing found

[18:19] <AlexDaniel> buggable, eco App::GPTrixie

[18:20] <buggable> AlexDaniel, App::GPTrixie 'Generate NativeCall code from C headers file': https://github.com/Skarsnik/gptrixie

[18:20] <Skarsnik> thx :)

[18:21] *** zakharyas joined
[18:21] *** wamba left
[18:25] <Geth> ¦ doc: 5a07da9d19 | (Will "Coke" Coleda)++ | xt/words.pws

[18:25] <Geth> ¦ doc: add words, sort

[18:25] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5a07da9d19

[18:25] <Geth> ¦ doc: 187290e984 | (Will "Coke" Coleda)++ | doc/Language/glossary.pod6

[18:25] <Geth> ¦ doc: Link to the community page.

[18:25] <Geth> ¦ doc: 

[18:25] <Geth> ¦ doc: Closes #1001

[18:25] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/187290e984

[18:27] <bonf> Skarsnik, doesn't work, I get random garbage in my string. It does work if I define 10 "has uint8 $.char1; has uint8 $.char2 ..." instead of the CArray.

[18:27] <Skarsnik> this should not work, since it's a pointer

[18:27] <Skarsnik> hm try using HAS ?

[18:28] <Skarsnik> nvm

[18:28] <Skarsnik> what is your original struct?

[18:29] <bonf> {char str[10]; int n;}

[18:29] <bonf> it's a dummy struct, the actual one has a larger buffer

[18:29] <Skarsnik> this is weird. can you to a sizeof() the struct?

[18:31] *** wamba joined
[18:31] <bonf> 16 :O

[18:31] <bonf> alignment issue I guess?

[18:32] <leont> Yeah, that is sensible alignment

[18:33] <bonf> well nativecall was smart enough to figure it out when I had 10 separate uint8s

[18:34] <Skarsnik> you can do a nativesizeof to compare in perl6 code

[18:35] <[Coke]> ffn

[18:35] *** wamba left
[18:36] <bonf> well nativesizeof is 16 but that doesn't change if I change the array size

[18:37] <bonf> is it important when I init the CArray?

[18:38] *** TEttinger joined
[18:39] <[Coke]> docs not quite right yet; working from shell, but not cron.

[18:40] <Skarsnik> I am confused x)

[18:40] *** notostraca joined
[18:41] <Skarsnik> bonf, I am confused, Did C really inlined all the content of the array in the struct?

[18:42] <bonf> yes

[18:42] <bonf> because it's a char[] and not a char*

[18:43] <pmurias> tyil[m]: most of the Perl 6 ecosystem thus far is Artistic 2

[18:43] *** TEttinger left
[18:43] *** raschipi joined
[18:43] <tyil> pmurias: thats not an argument against gpl

[18:44] <tyil> I dont see why "but its not what everything else is" is bad tbhh

[18:44] <tyil> unless "everything else" is an actual standard thats being followed

[18:45] <pmurias> tyil: the argument is that gpl for a library is potential trouble for someone that will try to use it from a closed source app that he distributes

[18:45] <Skarsnik> bonf, oh right. I think it's something NYI

[18:45] *** ijneb joined
[18:45] <pmurias> tyil: everyone using the same license is a benefit as we have less things to worry about

[18:45] <ijneb> What would you guys recommend as a graphics library for writing a raytracer with?

[18:46] <ijneb> So far I've found Cairo to be the fastest

[18:46] <tyil> I personally dislike closed source very much, so I dont see that as anything bad

[18:46] <bonf> Skarsnik, I see

[18:46] *** Zoffix left
[18:46] <tyil> if the author dislikes people (ab)using their software for proprietary use, why should they not use the gpl

[18:47] <moritz> in this case, I'm fine with a more liberal license. PRs will be accepted.

[18:47] <tyil> moritz: to me its more of a moral point

[18:48] <bonf> Skarsnik, thanks for the help anyway

[18:48] <tyil> if you want to (ab)use software for personal gain only, you can always make it yourself if you hate the community so much

[18:50] <Skarsnik> bonf, a workaround could be to create a type that has a nativesize of the array

[18:54] <pmurias> tyil: hating the community? you know that you can contribute to an open source library while using it in a closed source project or even in somethin straight up evil?

[18:55] <tyil> yes, and you are assured of that using gpl

[18:55] <[Coke]> as someone who just went through this on the c ommercial side, the gpl is a non-starter. If that's your goal, then sure, GPL.

[18:55] <tyil> the only thing a "more liberal" license would do here is enabling the bad aspects

[18:57] <Skarsnik> m: use NativeCall::Types; foo     is Int is ctype("long")     is repr("P6int") is nativesize(128){ }; my foo $a; say $a.nativesize();

[18:57] <camelia> rakudo-moar fcf61f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3use NativeCall::Types; foo     is Int7⏏5 is ctype("long")     is repr("P6int") i␤    expecting any of:␤        infix␤        infix stopper␤        p…»

[18:57] <Skarsnik> m: use NativeCall::Types; my native foo is Int is ctype("long")     is repr("P6int") is nativesize(128){ }; my foo $a; say $a.nativesize();

[18:57] <camelia> rakudo-moar fcf61f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤MVMP6int: Unsupported int size (128bit)␤at <tmp>:1␤»

[18:58] <Skarsnik> damn

[18:58] <Skarsnik> m: use NativeCall::Types; my native foo is repr("P6int") is nativesize(128){ }; my foo $a; say $a.nativesize();

[18:58] <camelia> rakudo-moar fcf61f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤MVMP6int: Unsupported int size (128bit)␤at <tmp>:1␤»

[18:58] <ugexe> a more liberal license enables more potential usage

[18:59] <Skarsnik> m: use NativeCall::Types; my native foo is nativesize(128){ }; my foo $a; say $a.nativesize();

[18:59] <camelia> rakudo-moar fcf61f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤P6opaque: missing attribute protocol in compose of foo␤at <tmp>:1␤»

[18:59] <Skarsnik> whatever xD

[19:00] <[Coke]> battery about to die here; I'll at least run the doc build manually this evening again if needed, getting it to run in cron again should be doable.

[19:02] <b2gills> m: sub bar(UInt:D @nums) {...}; my UInt:D @nums = (1, 2); bar @nums # https://stackoverflow.com/q/45774740

[19:02] <camelia> rakudo-moar fcf61f: OUTPUT: «Constraint type check failed in binding to parameter '@nums'; expected UInt but got Array[UInt:D] (Array[UInt:D].new(1, 2))␤  in sub bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[19:04] <pmurias> tyil: you can still use gpl code in closed source apps provided you don't distribute your application

[19:05] <pmurias> tyil: and in say Perl 5 I would guess most apps aren't distributed as they run on the backend size

[19:05] <pmurias> s/size/side

[19:06] <MasterDuke> b2gills: looks like https://rt.perl.org/Ticket/Display.html?id=131381 is related

[19:06] <Geth> ¦ ecosystem: 3f8cce4753 | (Moritz Lenz)++ | server/updatelist.pl

[19:06] <Geth> ¦ ecosystem: use JSON::MaybeXS; closes #362

[19:06] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/3f8cce4753

[19:06] <tyil> pmurias: then why not keep it gpl

[19:06] <tyil> so the community can benefit from improvements by guarantee of the license

[19:07] <Skarsnik> I think only the gplv3 has close for stuff run on vm/interpreter?

[19:08] <bonf> Skarsnik, I'm not sure how to pull off what you're suggesting there, but I just use one big CArray instead of the struct for now

[19:08] <pmurias> tyil: the gpl doesn't guarantee that it just a random annoyance for the people who will want to have say a closed source Perl 6 *desktop app* or whose legal departament doesn't like GPL

[19:09] *** reu joined
[19:10] <b2gills> MasterDuke: Thanks, I added a comment pointing to it on https://stackoverflow.com/q/45774740

[19:10] <raschipi> But the point tyil is making is that this is his exact objective, pmurias.

[19:11] <MasterDuke> b2gills++

[19:11] <tyil> I despise closed source software on moral grounds, you can make a desktop app with open source just fine

[19:11] <tyil> and gpl licensed software seems very able to become popular as well

[19:12] <pmurias> raschipi: if you want to annoy people you don't like then I agree that GPL has a benefit

[19:12] <tyil> theyre choosing to be annoyed by it, chosing a license isnt done with the intent to annoy

[19:12] *** setty1 joined
[19:12] *** notostraca is now known as TEttinger

[19:12] <tyil> they are annoyed by it due to a faulty moral compass imo

[19:13] <tyil> but the fact is they are the ones deciding to be annoyed by it, not me or whoever else set the license

[19:15] <raschipi> In my opinion, the entire fault lies on the copyright system itself, it only purpose is to annoy. Anyway, you have a problem with someone who witholds some rights but not with people that hithhold all of them, pmurias?

[19:17] <tyil> raschipi: the copyright system is faulty at its core, yes. the gpl is a way to get to a situation thats better by playing with the rules that have been set

[19:17] <b2gills> I think BSD software has a larger ability to improve all of software, because it can be used in closed source software.

[19:17] <b2gills> I also like GPL because it makes it harder for companies to “abuse” the freedom like the can with BSD.

[19:17] <b2gills> Basically I try not to think about it or my neural net might fuse ^w^w^w^w I mean it might give me a headache.

[19:18] <pmurias> raschipi: I dislike closed source libraries a lot more and I wouldn't develop any closed source stuff for free

[19:18] <pmurias> raschipi: and I would hesitate in even using a closed source library a lot

[19:18] *** bonf left
[19:19] <ugexe> programmers can be annoyed at the stuff their overlords make them use

[19:20] <tyil> they can be annoyed at my choice to use tabs for indentation (its objectively the only choice after all), but that doesnt mean I should not use it

[19:21] <ugexe> you said they are choosing it despite being annoyed by it. im saying they are not choosing it in most cases

[19:23] <ugexe> additional mind share at the cost of software morality. and the software morality bit only really holds if you have the backing to pursue enforcement

[19:23] <b2gills> If programmers aren't allowed to use GPL code. They might dislike it being GPL, because that makes it so they have to use a worse closed-source version

[19:24] <raschipi> If people care about software freedom at all, they certainly should avoid improving software working against it.

[19:26] <raschipi> If they are writing closed source software, they are annoying me an tyil, how do you guys suggest we fix that?

[19:26] <ugexe> one gives you the freedom to do what you want, the other gives you the freedom but only under certain circumstances

[19:27] <raschipi> There's other type that doesn't give any freedoms, so we're working against it.

[19:28] <ugexe> the answer to no freedom isn't total freedom, but partial freedom?

[19:29] <pmurias> raschipi: do you think hurting closed source software at the expense of open source software is a benefit?

[19:29] <tyil> its a freedom that disallows you taking away freedom from others

[19:29] <dmaestro> I prefer to help good people do the right thing, even if it helps "bad" people do the wrong thing. The latter will usually find a way anyway, and we need to encourage the former.

[19:29] <tyil> pmurias: you're not hurting closed source software in my opinion, but it is still a benefit even if it were to me

[19:30] <ugexe> so is the react license

[19:30] <dmaestro> So I'm for letting the author decide, and not judge too harshly.

[19:31] <raschipi> Yes, each author has to make their own mind.

[19:31] <tyil> dmaestro: the gpl is allowing good people to do the right thing without helping the bad people doing the wrong thing 

[19:31] <tyil> sounds like a win/win to me

[19:31] <ugexe> because you are ignoring the price the programmes who DONT get a choice pay

[19:31] *** wamba joined
[19:32] <dmaestro> tyil: pmurias already spoke to that.

[19:32] <tyil> they'll get paid more by having to implement an alternative because their boss wanted to be a jerk, ugexe?

[19:33] <ugexe> i dont know, im not the boss of every company

[19:33] <pmurias> tyil: as someone who is writing Artistic 2 stuff, GPL licenses on libraries are an annoyance to me

[19:33] *** darutoko left
[19:33] *** smls left
[19:33] <ugexe> i dont find punishing programmer is worth it just to punish the company

[19:34] <tyil> as someone who wants to work to make a better place, libraries being used in proprietary software are an annoyance to me with a total disrespect for the community of the library

[19:34] <tyil> and end-users

[19:35] <dmaestro> Anyone know the status of the 'xor' op? It's mentioned in operators, and seems to work fine, but not documented along with its neighbors 'or' and 'orelse' ...

[19:35] <tyil> ugexe: if they cant use any libs because of gpl fear and find that making everything themselves is too costy they might consider going along with playing nice

[19:36] <ugexe> or they will just use your gpl lib anyway because i doubt you have the means to enforce it

[19:36] <pmurias> tyil: if say a contributor to my project can't use the library we are writing together in his closed project because I have used a GPL dependency it's a loss to me

[19:36] <tyil> how so?

[19:36] <tyil> what are you losing?

[19:37] <tyil> ugexe: thats a flaw of the judicial system then, not of the license chosen

[19:37] <pmurias> tyil: he will stop contribute less because he can't use what he helps create

[19:37] <tyil> pmurias: or he will reconsider and play nice

[19:37] <pmurias> * he will contribute

[19:37] <raschipi> ugexe: The Free Software Conservancy will enforce licenses for free software developers, you don't need to worry about that.

[19:37] <tyil> its not a given that he'll contribute less either

[19:37] <ugexe> my point is you only ever punish the programmer for a theoretical victory

[19:38] <tyil> punishing by rewarding more money due to increased development time?

[19:38] <raschipi> ugexe: Punishing closed-source software developers is exactly the objective.

[19:38] <ugexe> ifyou dont care what you are programming (ever programmer I know does), sure

[19:39] <tyil> raschipi: I dont see it as a punishment unto them at all, they have the choice to use it or not after all, they can talk to their boss if needs be

[19:39] <tyil> if they decide not to use it, thats their choice and the dev in question will be able to rake in more money

[19:40] <tyil> if they do decide to use it, the free software ecosystem gains from it

[19:40] <ugexe> thats certainly one way to get less mindshare

[19:40] <raschipi> Or they can approach you and buy a licese that's aceptable for them.

[19:41] <tyil> or that, then you gain money which you can use to fund further free development, though I'd morally oppose to do that myself :p

[19:42] *** domidumont left
[19:42] <tyil> you can license it LGPL to allow unaltered use in closed source as well

[19:43] <tyil> if they improve it, the improvements will at least come through

[19:43] <tyil> maybe that's an acceptable compromise

[19:44] <dmaestro> I agree the LGPL is acceptable, where it applies

[19:44] <pmurias> tyil: I don't buy that increased development time actually helps the developers

[19:45] <tyil> thats how hourly wage works

[19:45] <pmurias> nope?

[19:46] <tyil> you get paid by the hour, you make more hours so you get paid more

[19:46] <ugexe> by the hour... lol

[19:46] <tyil> not much to nope about tha

[19:46] <dmaestro> pmurias++ time is intrinsically valuable (and scarce), and it's a shame to waste it

[19:46] <tyil> dmaestro: indeed, which is where free software shines

[19:46] <ugexe> tyil: you are not from the US I take it?

[19:47] <tyil> luckily not

[19:47] <ijneb> why luckily?

[19:47] <ugexe> I think in the US the hurdles are much greater than elsewhere

[19:48] <tyil> ijneb: I see no benefits in living in the USA

[19:48] <ijneb> Where do you live currently?

[19:48] <tyil> Netherlands

[19:48] <tyil> where net neutrality is a thing that ISPs actually fight for

[19:48] <ijneb> I'm glad I live in the USA as opposed to living in Africa or any 3rd world shithole

[19:48] <ijneb> but yeah, the US has its own problems too

[19:48] <tyil> the USA is no 3rd world shithole?

[19:49] <tyil> thats news to me

[19:49] <ugexe> oh come on

[19:49] <ijneb> The crimerate is drastically lower than everywhere in South America

[19:49] <tyil> from the eyes of people in the first world, the USA is just a laughing stock of stupid decisions but with way too much nukes to actually tell them

[19:50] <ijneb> I'm not, by any means, saying the US is perfect (it's definitely not), but the US is actually a pretty great place to live

[19:50] <tyil> ijneb: and the incarceration rate is higher than anywhere in the world

[19:50] <tyil> people get arrested for having the wrong kinds of plants in their garden

[19:50] <ugexe> its ok to be arrested for plants only if you have more than the alloted amount i guess?

[19:50] <tyil> school shootings are a normal thing

[19:51] <ijneb> School shootings aren't a normal thing lmao

[19:51] <tyil> gun violence is dramatic

[19:51] <ijneb> You're blowing this out of proportion

[19:51] <raschipi> Oh, someone from Europe criticizing the uS for terrorist attacks, that's flame i can get behind...

[19:51] <jnthn> If I kick the lot of you talking about stuff that's not Perl 6 for the last ages, is that out of proportion?

[19:52] <ijneb> meh, I agree

[19:52] <ijneb> this isn't on topic at all

[19:52] <tyil> jnthn: with all due respect, the license part was about a perl 6 module, but I agree we're getting way off topic here, sorry

[19:52] <jnthn> Yeah, fair enough. I'm just cranky today :)

[19:52] *** Cabanossi left
[19:53] <ijneb> tyil: No hard feelings

[19:53] <tyil> <3

[19:54] *** Cabanossi joined
[20:06] *** mr-foobar left
[20:07] *** mr-foobar joined
[20:07] *** andrzejku left
[20:08] *** andrzejku joined
[20:08] *** nadim left
[20:09] <dmaestro> Asking again: Anyone know the status of the 'xor' op? It's mentioned in operators, and seems to work fine, but not documented along with its neighbors 'or' and 'orelse' ...

[20:10] <moritz> dmaestro: if it's not documented, that's an omission that should be fixed

[20:10] *** TreyHarr1 joined
[20:11] *** TreyHarris left
[20:11] *** TreyHarr1 is now known as TreyHarris

[20:14] <dmaestro> moritz: Thanks, I'll try fixing that when I get a chance :-)

[20:17] *** nadim joined
[20:36] *** mr-fooba_ joined
[20:37] *** mr-foobar left
[20:41] *** char_var[buffer] joined
[20:43] *** zakharyas left
[21:06] *** Skarsnik left
[21:09] *** mr-fooba_ left
[21:33] *** geekosaur joined
[21:37] *** rindolf left
[21:38] *** Cabanossi left
[21:39] *** Cabanossi joined
[21:43] <Geth> ¦ doc: dmaestro++ created pull request #1460: Add documentation of loose xor operator

[21:43] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/1460

[22:02] *** BenGoldberg joined
[22:10] *** andrzejku left
[22:13] *** ufobat left
[22:30] *** wamba left
[22:43] *** nadim left
[22:43] *** BenGoldberg left
[22:43] *** Rawriful left
[22:53] *** Cabanossi left
[22:55] *** Cabanossi joined
[23:03] *** Rawriful joined
[23:08] *** leont left
[23:23] *** entonian joined
[23:27] <[Coke]> dmaestro: thanks for trying to keep the discussion on topic. :)

[23:31] *** pierre_ left
[23:31] *** pierre_ joined
[23:39] *** entonian left
[23:44] *** eliasr left
[23:46] *** araraloren left
[23:47] <Geth> ¦ doc: c285114582 | (Will "Coke" Coleda)++ | util/update-and-sync

[23:47] <Geth> ¦ doc: Allow admins to force a build update.

[23:47] <Geth> ¦ doc: 

[23:47] <Geth> ¦ doc: $ touch ~/force-update

[23:47] <Geth> ¦ doc: 

[23:47] <Geth> ¦ doc: to make the next crontab run kick off a fresh build, even if there

[23:47] <Geth> ¦ doc: isn't a pending commit.

[23:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c285114582

[23:52] *** Cabanossi left
[23:55] *** Cabanossi joined
