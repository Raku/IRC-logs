[00:00] *** bisectable6 left
[00:00] *** committable6 left
[00:00] *** bisectable6 joined
[00:00] *** ChanServ sets mode: +v bisectable6

[00:00] *** committable6 joined
[00:03] *** niceperl left
[00:06] *** huf joined
[00:07] *** Herby_ joined
[00:07] <Herby_> o/

[00:08] <Herby_> question.  If I have two strings "12/31/2015 0400" and "12/31/2015 0700", how do I convert those to datetime objects to see if greater there is greater than 4 hour difference between the two?

[00:09] <Herby_> I have a tenuous grasp on datetime in general, and I can't figure it out in the docs

[00:12] *** konsolebox left
[00:12] <jnthn> I don't think anything built-in will parse that format (it'll only do ISO 8601, and that sure ain't what you have)

[00:13] *** konsolebox joined
[00:14] <Herby_> hmm. any recommended modules to use?

[00:14] <jnthn> m: given "12/31/2015 0400" ~~ /(\d+)'/'(\d+)'/'(\d+) ' ' (\d\d)(\d\d)/ { dd DateTime.new(day => $0, month => $1, year => $2, hour => $3, minute => $4) }

[00:14] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´Month out of range. Is: 31, should be in 1..12‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[00:14] <jnthn> Middle endian be dammed!

[00:15] <Herby_> :)

[00:15] <jnthn> m: given "12/31/2015 0400" ~~ /(\d+)'/'(\d+)'/'(\d+) ' ' (\d\d)(\d\d)/ { dd DateTime.new(month => $0, day => $1, year => $2, hour => $3, minute => $4) }

[00:15] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´DateTime.new(2015,12,31,4,0,0)‚ê§¬ª

[00:15] <jnthn> That's one way to parse it

[00:15] <jnthn> Then I think you can just use - with the two to get an Instance

[00:15] <jnthn> uh, Instant

[00:15] <Herby_> great, i'll give that a go.  Thanks!

[00:29] *** evalable6 left
[00:29] *** evalable6 joined
[00:29] *** ChanServ sets mode: +v evalable6

[00:29] *** cdg_ joined
[00:30] *** bisectable6 left
[00:30] *** committable6 left
[00:30] *** bisectable6 joined
[00:30] *** ChanServ sets mode: +v bisectable6

[00:30] *** committable6 joined
[00:30] *** ChanServ sets mode: +v committable6

[00:30] <lookatme> o/

[00:31] <lookatme> Herby_, o/

[00:31] <Herby_> lookatme: \o/

[00:32] <lookatme> morning here

[00:32] *** cdg left
[00:33] <Herby_> australia?

[00:33] *** mson joined
[00:34] <lookatme> No, china

[00:34] <lookatme> Here is 8:30 am 

[00:34] *** cdg_ left
[00:34] <Herby_> 5:30 PM in cold Colorado

[00:35] <lookatme> yeah, It's winter now

[00:35] <lookatme> so cold

[00:37] <AlexDaniel> squashable6: next

[00:37] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in 1 day and ‚âà9 hours (2017-12-02 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[00:38] <jnthn> Cold is fine, I can just wrap up warmer. Beats hot, when there's not much to do about it. :)

[00:38] <Herby_> ^

[00:38] * jnthn is still waiting for some snow

[00:40] <lookatme> yeah, the summer is so hot, we have nothing to beat it

[00:42] <lookatme> Is this page https://perl6.org/compilers/features still update ?

[00:44] <lookatme> I am keep watch out the macro feature.

[00:44] <lookatme> And the macro will be redesign ?

[00:45] *** konsolebox left
[00:46] *** konsolebox joined
[00:48] *** aborazmeh joined
[00:48] *** aborazmeh left
[00:48] *** aborazmeh joined
[00:51] *** cdg joined
[00:51] *** jeromelanteri left
[00:51] *** BenGoldberg joined
[00:56] *** cdg left
[00:57] <jnthn> lookatme: Yeah, masak is exploring/prototyping a bunch of that; it'll be a while yet, though, it's difficult and a lot of work to do well

[00:57] <lookatme> oh thanks

[00:58] <jnthn> https://github.com/masak/007/ may be interesting to you

[00:59] *** evalable6 left
[00:59] *** evalable6 joined
[00:59] <lookatme> oh, great

[01:00] <jnthn> Sleep time for me; 'night

[01:00] <lookatme> night

[01:00] *** bisectable6 left
[01:00] *** committable6 left
[01:00] *** bisectable6 joined
[01:00] *** ChanServ sets mode: +v bisectable6

[01:00] *** committable6 joined
[01:00] *** ChanServ sets mode: +v committable6

[01:01] <Herby_> night!

[01:09] *** vike left
[01:10] <SmokeMachine> m: <abc xyz>.classify( *.contains: any 'a'..'f' )

[01:10] <camelia> rakudo-moar f3b1289fd: ( no output )

[01:10] <SmokeMachine> m: say <abc xyz>.classify( *.contains: any 'a'..'f' )

[01:10] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´{False => [abc xyz xyz xyz xyz xyz xyz], True => [abc]}‚ê§¬ª

[01:10] <SmokeMachine> can anyone explain me why?

[01:13] *** committable6 left
[01:13] *** committable6 joined
[01:13] *** ChanServ sets mode: +v committable6

[01:13] <Herby_> Zoffix: I'm following along your Weatherapp tutorial.  Did you ever write any code for part 4?

[01:13] <SmokeMachine> the way I think, abc contains the letter (True) in 3 possibilities of 'a'..'f' (a, b and c) and doesn't contains in another 3 (False) (d, e and f)... so, in my mind, the answer should be: {False => [abc abc abc xyz xyz xyz xyz xyz xyz], True => [abc abc abc]}

[01:14] <SmokeMachine> could, please, someone explain me that?

[01:14] *** raschipi joined
[01:14] *** margeas left
[01:17] <SmokeMachine> Os this really expected?

[01:17] *** espadrine left
[01:19] *** troys is now known as troys_

[01:21] *** vike joined
[01:21] <raschipi> m: <abcz xyzj>.classify( *.contains: any 'a'..'f')

[01:21] <camelia> rakudo-moar f3b1289fd: ( no output )

[01:21] <lookatme> Interesting output 

[01:22] <raschipi> m: say <abcz xyzj>.classify( *.contains: any 'a'..'f')

[01:22] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´{False => [abcz xyzj xyzj xyzj xyzj xyzj xyzj], True => [abcz]}‚ê§¬ª

[01:22] <lookatme> m: say <abc>.classify( *.contains: any 'a'..'f' )

[01:22] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´{False => [abc], True => [abc]}‚ê§¬ª

[01:22] <lookatme> m: say <xyz>.classify( *.contains: any 'a'..'f' )

[01:22] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´{False => [xyz]}‚ê§¬ª

[01:22] <lookatme> m: say <xyz abc>.classify( *.contains: any 'a'..'f' )

[01:22] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´{False => [xyz abc abc abc], True => [abc]}‚ê§¬ª

[01:22] <raschipi> m: say 'abc'.contains: any 'a'..'f'

[01:22] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´any(True, True, True, False, False, False)‚ê§¬ª

[01:23] *** astronavt joined
[01:23] <lookatme> Hmm, seems like some problem about junction and classify 

[01:24] *** mcmillhj joined
[01:25] <SmokeMachine> This code was gotten from a roast test...

[01:27] <raschipi> what does the test say the result should be?

[01:27] <raschipi> and are you sure the test isn't fudged for rakudo?

[01:27] <SmokeMachine> https://github.com/perl6/roast/blob/ac529543bd343413c80ac4651678b945bf3307ae/S32-list/classify.t#L126

[01:28] <timotimo> it occurs to me that .classify({ $_ }) is equivalent to .Bag

[01:29] <timotimo> well, you might have to put an xx in there as well

[01:29] <raschipi> RT #126032

[01:29] <synopsebot> RT#126032 [resolved]: https://rt.perl.org/Ticket/Display.html?id=126032 The .classify method is calling the closure twice on the first element

[01:30] <raschipi> Right, it's expected. Not supposed to be used in that form, it's just for the test.

[01:31] <raschipi> m: say so <abc>.contains: any 'a'..'f'

[01:31] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´True‚ê§¬ª

[01:31] <raschipi> m: say so <xyz>.contains: any 'a'..'f'

[01:31] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´False‚ê§¬ª

[01:32] <raschipi> m: say so <abc>.contains: all 'a'..'f'

[01:32] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´False‚ê§¬ª

[01:32] <raschipi> m: say so <abc>.contains: all 'a'..'c'

[01:32] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´True‚ê§¬ª

[01:33] <SmokeMachine> But, shouldn‚Äôt it return {False => [abc abc abc xyz xyz xyz xyz xyz xyz], True => [abc abc abc]}?

[01:35] <SmokeMachine> I still don‚Äôt get it...

[01:35] *** troys_ is now known as troys

[01:35] <Zoffix> Herby_: no, I got bad response to those series and got discouraged from finishing them. There won't ever be Part 4

[01:36] <Herby_> Sorry to hear that. For what its worth, I really enjoy your blogs and postings

[01:36] <raschipi> Me too, really like them.

[01:37] *** Todd joined
[01:38] <SmokeMachine> raschipi: what‚Äôs the value of a test that uses a form that shouldn‚Äôt be used?

[01:38] <Todd> Hi All.   I am about to write a Perl6 program for a customer on Windows 7, sp1, 32 bit (not 64)

[01:39] *** xi- left
[01:39] <Todd> Is this the best place to download Perl 6 for Windows 32 bit?  http://rakudo.org/how-to-get-rakudo/

[01:40] *** BrianOn99 joined
[01:40] <Zoffix> Todd: in a way; you'll notice the 32-bit version is nearly 2 years old

[01:40] <Todd> nuts,  any better download?

[01:40] <raschipi> SmokeMachine: It's not that it shouldn't be used, it's just that it doesn't collapse a junction before using it and junctionsare more useful when they collapse.

[01:41] <Zoffix> Todd: you could try building from source: https://github.com/zoffixznet/r#windows

[01:42] <Zoffix> Todd: note that JIT is not available on 32-bits, so your rakudo will be noticably slower

[01:42] <Zoffix> Todd: may want to run `git checkout 2017.11` before the `perl Configure.pl` step to get a much more well-tested the release commit, rather than bleeding edge

[01:43] *** xi- joined
[01:43] <Todd> If I build, it look like I will need Perl 5.  Was hoping not to have to do that.  Also, speed is not an issue.  Works properly is.

[01:43] <Zoffix> Todd: yeah, Configure.pl is a Perl 5 script; also you'll need a C compiler, which comes with Strawberry Perl 5

[01:44] <Todd> rats.  I was hoping for a lot easier

[01:44] *** BrianOn99 left
[01:44] <Zoffix> Sorry. No volunteer stepped up with the resources to build 32-bit Windows

[01:45] <Todd> looking at the link, I do not see a switch for 32 bit.  My Windows VM is 64 bit.  I would like to compile it locally

[01:46] <Zoffix> It figures it out automatically. No idea if there's a switch to force it into 32 bit

[01:46] <Todd> poop

[01:48] <Todd> if I originally write it in Linux, do I need to be careful to use an editor that saves in cr/lf

[01:48] <Todd> ?

[01:49] <Zoffix> Todd: write what?

[01:49] <lookatme> No, if you execute it with `perl6 xxx.p6`

[01:50] <Todd> my perl6 program.  get a head start on it in Linux (my base system).  then remote into the customer's w7 machine and copy it over and finish it off

[01:50] <lookatme> The newline only effect shebang, I think

[01:50] <Zoffix> Todd: it'll work, but depending on what you open it with on Windows, it might end up all on one line (e.g. in notepad.exe). Just run `unix2dos foo.p6` before sending it

[01:51] <Todd> forgot about that one.  thank y for hte reminder

[01:52] <Todd> I think I will try to old versionof rakudo.  If it doesn't work, then I will try compiling up a new one.  Thank you guys!

[01:52] <Zoffix> Any time

[01:53] <Todd> bye bye

[01:53] <lookatme> 88

[01:53] *** Todd left
[01:55] *** dj_goku left
[02:02] *** xi- left
[02:03] *** Cabanossi left
[02:03] <Geth> ¬¶ mu: ef13dd7847 | (Zoffix Znet)++ (committed using GitHub Web editor) | misc/perl6advent-2017/schedule

[02:03] <Geth> ¬¶ mu: Put "Perl 6: Sigils, Variables, and Containers" to 2nd

[02:03] <Geth> ¬¶ mu: 

[02:03] <Geth> ¬¶ mu: It's been scheduled now

[02:03] <Geth> ¬¶ mu: review: https://github.com/perl6/mu/commit/ef13dd7847

[02:03] *** xi- joined
[02:04] *** Cabanossi joined
[02:08] *** konsolebox left
[02:14] *** konsolebox joined
[02:14] *** llfourn joined
[02:18] *** zakharyas joined
[02:19] *** kerframil left
[02:20] *** kerframil joined
[02:22] *** Zoffix left
[02:31] *** troys is now known as troys_

[02:46] *** ilbot3 left
[02:46] *** pilne left
[02:48] *** raschipi left
[02:56] *** kitsunenokenja left
[02:57] *** cdg joined
[02:58] *** ilbot3 joined
[02:58] *** ChanServ sets mode: +v ilbot3

[03:01] *** konsolebox left
[03:02] *** cdg left
[03:03] *** ufobat___ joined
[03:04] *** cdg joined
[03:07] *** ufobat_ left
[03:07] *** konsolebox joined
[03:17] *** Herby__ joined
[03:17] *** Cabanossi left
[03:19] *** Cabanossi joined
[03:21] *** konsolebox left
[03:22] *** konsolebox joined
[03:28] *** Khisanth left
[03:30] *** mcmillhj left
[03:48] *** konsolebox left
[03:50] *** konsolebox joined
[03:50] *** Khisanth joined
[03:53] *** eliasr left
[03:55] *** konsolebox left
[03:58] *** konsolebox joined
[04:06] *** jeromelanteri joined
[04:14] *** lookatme left
[04:14] *** lookatme joined
[04:17] *** Cabanossi left
[04:17] *** llfourn left
[04:18] *** Cabanossi joined
[04:23] *** wamba joined
[04:33] *** mson left
[04:38] *** dj_goku joined
[04:50] *** wander joined
[04:52] *** xtt joined
[04:53] *** konsolebox left
[04:55] *** konsolebox joined
[04:58] *** astj joined
[05:03] *** cdg left
[05:03] *** cdg joined
[05:08] *** cdg left
[05:16] *** Cabanossi left
[05:18] *** Cabanossi joined
[05:19] *** mson joined
[05:30] <wander> jnthn:

[05:30] <wander> m: multi sub g(Int \a, Int \b) { say 0; nextsame };multi sub g(Any \a, Int \b) { say 1; nextsame };multi sub g(Int \a, Any \b) { say 2; nextsame };multi sub g(Any \a, Any \b) { say 3; nextsame };g(1, 2);

[05:30] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§¬ª

[05:30] *** astronavt left
[05:30] <wander> m: multi sub g(Any \a, Int \b) { say 1; nextsame };multi sub g(Int \a, Any \b) { say 2; nextsame };multi sub g(Any \a, Any \b) { say 3; nextsame };g(1, 2);

[05:30] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´Ambiguous call to 'g'; these signatures all match:‚ê§:(\a, Int \b)‚ê§:(Int \a, \b)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[05:31] <wander> could i infer that 'Ambiguous' judge is only applied for the first dispatch?

[05:32] *** Xliff left
[05:32] <wander> m: multi sub g(Int \a, Int \b) { say 0; nextsame };multi sub g(Int \a, Any \b) { say 2; nextsame };multi sub g(Any \a, Int \b) { say 1; nextsame };multi sub g(Any \a, Any \b) { say 3; nextsame };g(1, 2);

[05:32] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´0‚ê§2‚ê§1‚ê§3‚ê§¬ª

[05:34] *** wamba left
[05:35] <wander> it's weird that textual ordering tie-breaker works in re-dispatch, where the signature doesn't have `where` clauses, named parameters or something.

[05:36] *** Xliff joined
[05:36] <Xliff> \o

[05:37] <Xliff> Is there a blog post or tutorial on how to write basic networking apps in P6?

[05:38] *** troys_ is now known as troys

[05:40] <Xliff> There's a basic skeleton, here but is there something else with more details?

[05:40] <Xliff> https://docs.perl6.org/type/IO::Socket::INET

[05:43] *** Herby__ left
[05:49] *** Herby_ left
[05:54] <lookatme> Xliff, there are a lot of blog post in https://rakudo.party/post/Perl-6-Hands-On-Workshop--Weatherapp--Part-1

[05:54] <lookatme> maybe help

[05:54] *** aborazmeh left
[05:56] <Xliff> Thanks

[05:57] <lookatme> Xliff, And if you don't know Perl6 weekly, I recommend you check out this: https://p6weekly.wordpress.com/

[05:59] *** BenGoldberg left
[05:59] <Xliff> Hah. Good start, but never got to Part 4

[06:13] *** wander left
[06:16] *** Cabanossi left
[06:17] *** cpage_ left
[06:18] *** Cabanossi joined
[06:20] *** cdg joined
[06:23] *** troys left
[06:25] *** cdg left
[06:28] *** darutoko joined
[06:30] *** cdg joined
[06:35] *** cdg left
[06:40] *** astj left
[06:40] <tony-o> Xliff: there's also IO::Socket::Async if you're into that sort of thing

[06:45] *** Cabanossi left
[06:48] *** Cabanossi joined
[06:53] *** domidumont joined
[06:55] *** khw left
[06:58] *** domidumont left
[06:59] *** domidumont joined
[07:03] *** Guest72929 joined
[07:08] *** Guest72929 left
[07:08] *** geospeck joined
[07:09] *** domidumont left
[07:10] *** domidumont joined
[07:11] *** someuser_ joined
[07:17] *** rindolf joined
[07:23] *** someuser_ left
[07:24] *** someuser joined
[07:24] *** lowbro joined
[07:24] *** lowbro left
[07:24] *** lowbro joined
[07:26] *** MasterDuke left
[07:34] *** anop joined
[07:34] <anop> i have file of 100 lines ....... .race(batch => 32, degree => 4) how it work .....

[07:34] <anop> what is batch ?

[07:34] <anop> what is degree ?

[07:35] *** astj joined
[07:39] *** astj left
[07:56] *** abraxxa joined
[07:59] *** mson left
[07:59] <AlexDaniel> anop: hello :) What you wrote should work. Like ‚Äú@smth.race(batch => 32, degree => 4).map({ your code here })‚Äù or ‚Äúrace for @smth.race(batch => 32, degree => 4) { your code here }‚Äù

[07:59] <AlexDaniel> anop: degree is basically the number of threads

[08:00] <AlexDaniel> anop: and batch is how meach each thread ‚Äútakes‚Äù each time

[08:00] <AlexDaniel> perhaps my explanation is not clear enough :)

[08:01] <AlexDaniel> much*

[08:01] *** kerframil left
[08:02] <AlexDaniel> anop: with 100 lines perhaps a batch size of 5 will work ok

[08:03] <AlexDaniel> degree => 4 is probably reasonable for the average computer :)

[08:09] *** geospeck left
[08:25] *** wamba joined
[08:27] *** wander joined
[08:31] *** cpage_ joined
[08:34] *** dakkar joined
[08:47] *** xtt left
[08:48] *** wamba left
[08:53] <Geth> ¬¶ ecosystem: JJ++ created pull request #381: Adds Wikidata::API

[08:53] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/pull/381

[08:54] *** scimon joined
[08:58] *** konsolebox left
[08:59] *** wamba joined
[09:00] *** konsolebox joined
[09:05] *** wamba left
[09:07] <anop> hello AlexDaniel

[09:08] <anop> that means, at a time for four thread will run and every thread has 32 lines for processing  

[09:09] <anop> that means, at a time four thread will run and every thread has 32 lines for processing

[09:09] <lookatme> Not sure, it's no document about it. Only batch is clear

[09:09] <AlexDaniel> well, each thread will take 32 items, process them, then take the next 32 and so on

[09:11] <anop>  that means, at a time 128 lines will process

[09:11] <anop>  that means, at a time 128 lines will be process

[09:11] *** wander left
[09:12] <lookatme> I don't think degree is thread number

[09:12] <AlexDaniel> why not

[09:12] <anop> hello AlexDaniel,  that means, at a time 128 lines will be process

[09:12] <anop> is right ?

[09:12] <anop> is it right ?

[09:13] <lookatme> According the mean of `degree` :)

[09:13] <AlexDaniel> anop: well. If you have 4 threads, then three of them will be processing 32 items, and the fourth thread will be processing just 4 items‚Ä¶

[09:13] <lookatme> :) byebye

[09:13] *** lookatme left
[09:14] <AlexDaniel> so ideally you should set the batch size to 25 if you have 100 items exactly

[09:15] <AlexDaniel> but I'd go lower than that assuming that the processing may different time‚Ä¶

[09:15] <AlexDaniel> it really depends

[09:18] *** Voldenet joined
[09:18] *** Voldenet left
[09:18] *** Voldenet joined
[09:21] *** konsolebox left
[09:21] *** wander joined
[09:22] *** konsolebox joined
[09:25] <Geth> ¬¶ ecosystem: cb3f2869a5 | (JJ Merelo)++ | META.list

[09:25] <Geth> ¬¶ ecosystem: Adds Wikidata::API

[09:25] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/cb3f2869a5

[09:25] <Geth> ¬¶ ecosystem: 3fd867a4f8 | (Juan Juli√°n Merelo Guerv√≥s)++ (committed using GitHub Web editor) | META.list

[09:25] <Geth> ¬¶ ecosystem: Merge pull request #381 from JJ/master

[09:25] <Geth> ¬¶ ecosystem: 

[09:25] <Geth> ¬¶ ecosystem: Adds Wikidata::API

[09:25] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/3fd867a4f8

[09:27] *** konsolebox left
[09:28] *** konsolebox joined
[09:32] *** konsolebox left
[09:33] *** geospeck joined
[09:33] *** konsolebox joined
[09:35] *** poohman joined
[09:35] *** poohman left
[09:36] <anop> thank you so much AlexDaniel 

[09:36] *** poohman joined
[09:36] <DrForr> Last year I had a problem with network connectivity and the Advent calendar - I can do one if I can write and post it before I leave, should I reserve the 16th for me?

[09:36] *** poohman left
[09:37] *** sena_kun joined
[09:37] *** poohman joined
[09:37] *** poohman left
[09:37] <AlexDaniel> DrForr: sure

[09:37] <AlexDaniel> huggable: advent

[09:37] <huggable> AlexDaniel, Sign up to write an Advent blog post: https://github.com/perl6/mu/blob/master/misc/perl6advent-2017/schedule

[09:37] *** ecocode_ joined
[09:37] *** poohman joined
[09:38] *** poohman left
[09:38] *** sena_kun left
[09:38] *** poohman joined
[09:38] <DrForr> Excellent. I had to cancel at the last minute, ISTR Zoffix moving one of his up to cover.

[09:38] *** poohman left
[09:38] *** poohman joined
[09:38] *** Juerd_ joined
[09:39] *** poohman left
[09:39] *** wictory[m] left
[09:39] *** Juerd left
[09:39] *** CIAvash[m] left
[09:39] *** BinGOs left
[09:39] *** zakharyas left
[09:39] *** sftp left
[09:39] *** Juerd_ is now known as Juerd

[09:39] *** sftp joined
[09:40] *** zakharyas joined
[09:40] *** BinGOs joined
[09:40] *** BooK joined
[09:40] *** poohman joined
[09:40] *** poohman left
[09:40] *** sjn left
[09:40] *** poohman joined
[09:40] *** domidumont left
[09:40] *** poohman left
[09:41] *** sjn joined
[09:41] *** poohman joined
[09:41] *** poohman left
[09:41] *** poohman joined
[09:41] *** poohman left
[09:41] *** john51 left
[09:41] *** poohman joined
[09:41] *** yoleaux left
[09:42] *** poohman left
[09:42] *** john51 joined
[09:42] *** unicodable6 left
[09:42] *** greppable6 left
[09:42] *** poohman joined
[09:42] *** poohman left
[09:42] *** poohman joined
[09:42] *** domidumont joined
[09:42] *** poohman left
[09:42] *** reportable6 left
[09:43] *** poohman joined
[09:43] <Geth> ¬¶ mu: e356e71cc2 | (Jeff Goff)++ (committed using GitHub Web editor) | misc/perl6advent-2017/schedule

[09:43] <Geth> ¬¶ mu: Expanding and expounding on my latest blog post

[09:43] <Geth> ¬¶ mu: 

[09:43] <Geth> ¬¶ mu: Tips and tricks to help with writing Perl 6 tests

[09:43] <Geth> ¬¶ mu: review: https://github.com/perl6/mu/commit/e356e71cc2

[09:43] *** zakharyas left
[09:43] *** poohman left
[09:43] <DrForr> 7th reserved as... we can all see now.

[09:43] *** notbenh left
[09:43] *** poohman joined
[09:43] *** poohman left
[09:44] *** poohman joined
[09:44] *** poohman left
[09:44] *** poohman joined
[09:45] *** poohman left
[09:45] *** poohman joined
[09:45] *** poohman left
[09:45] <anop> what is diff between Promise.anyof and Promise.allof

[09:45] *** notbenh joined
[09:45] <anop> what is diff between Promise.anyof() and Promise.allof()

[09:46] *** poohman joined
[09:46] *** wictory[m] joined
[09:46] *** CIAvash[m] joined
[09:46] <moritz> anop: .anyof is fulfilled when at least one of the promise is fulfilled

[09:47] *** poohman left
[09:47] <DrForr> Blocking on all of the Promises completing vs. just one of the list...

[09:47] <moritz> and alloff waits for all of them to be finished (kept or broken)

[09:47] <DrForr> ("blocking" is probably the wrong term tere.)

[09:47] <DrForr> *there

[09:47] *** poohman joined
[09:47] *** poohman left
[09:48] <anop> thanks moritz, that means .anyof for at least one promise should kepp

[09:48] <anop> thanks moritz, that means .anyof for at least one promise should keep

[09:48] <anop> thanks moritz, that means .anyof for at least one promise should be keep

[09:48] *** poohman joined
[09:48] *** poohman left
[09:48] *** poohman joined
[09:48] *** poohman left
[09:49] *** poohman joined
[09:49] *** poohman left
[09:49] *** poohman joined
[09:49] *** poohman left
[09:50] <Geth> ¬¶ mu: 994989602f | ven++ (committed using GitHub Web editor) | misc/perl6advent-2017/schedule

[09:50] <Geth> ¬¶ mu: add myself on the 20th

[09:50] <Geth> ¬¶ mu: review: https://github.com/perl6/mu/commit/994989602f

[09:50] *** poohman joined
[09:50] *** poohman left
[09:51] *** poohman joined
[09:51] *** poohman left
[09:52] *** poohman joined
[09:52] *** poohman left
[09:52] *** poohman joined
[09:52] *** poohman left
[09:53] *** poohman joined
[09:53] *** poohman left
[09:53] *** poohman joined
[09:53] *** poohman left
[09:54] *** poohman joined
[09:54] *** poohman left
[09:55] *** khisanth_ joined
[09:55] *** poohman joined
[09:55] *** TEttinger left
[09:55] *** poohman left
[09:56] *** domidumont left
[09:56] *** poohman joined
[09:56] *** poohman left
[09:56] *** poohman joined
[09:57] *** poohman left
[09:57] *** poohman joined
[09:57] *** domidumont joined
[09:57] *** poohman left
[09:57] *** poohman joined
[09:57] *** poohman left
[09:58] *** poohman joined
[09:58] *** poohman left
[09:58] *** poohman joined
[09:58] *** Khisanth left
[09:58] *** poohman left
[09:59] *** poohman joined
[09:59] *** poohman left
[09:59] *** poohman joined
[09:59] *** poohman left
[10:00] *** konsolebox left
[10:01] *** konsolebox joined
[10:01] *** Cabanossi left
[10:03] *** poohman joined
[10:03] *** Cabanossi joined
[10:03] *** poohman left
[10:03] *** poohman joined
[10:03] *** poohman left
[10:04] *** poohman joined
[10:04] *** poohman left
[10:04] *** poohman joined
[10:04] *** nightfro` joined
[10:05] *** poohman left
[10:05] *** poohman joined
[10:05] *** poohman left
[10:05] *** eythian_ joined
[10:05] *** eythian_ left
[10:05] *** eythian_ joined
[10:06] *** poohman joined
[10:06] *** poohman left
[10:06] *** poohman joined
[10:06] *** poohman left
[10:07] *** poohman joined
[10:07] *** poohman left
[10:08] *** konsolebox left
[10:08] *** poohman joined
[10:08] *** poohman left
[10:08] *** dakkar left
[10:09] *** tyil[m]1 joined
[10:09] *** poohman joined
[10:09] *** poohman left
[10:09] *** rgrau left
[10:09] *** Geth left
[10:09] *** SourceBaby left
[10:09] *** synopsebot left
[10:09] *** dalek left
[10:09] *** jhill left
[10:09] *** nightfrog left
[10:09] *** pi2 left
[10:09] *** cpage left
[10:09] *** xui_nya[m] left
[10:09] *** tyil[m] left
[10:10] *** nightfro` is now known as nightfrog

[10:10] *** poohman joined
[10:10] *** poohman left
[10:10] *** dakkar joined
[10:11] *** poohman joined
[10:11] *** lizmat left
[10:11] *** jhill joined
[10:11] *** poohman left
[10:12] *** albongo joined
[10:12] *** evalable6 left
[10:12] *** mtj_ joined
[10:13] *** poohman joined
[10:13] *** poohman left
[10:14] *** xui_nya[m] joined
[10:14] *** poohman joined
[10:14] *** poohman left
[10:14] *** eythian_ is now known as eythian

[10:14] *** poohman joined
[10:14] *** poohman left
[10:15] *** konsolebox joined
[10:15] *** rgrau joined
[10:15] *** Geth joined
[10:15] *** SourceBaby joined
[10:15] *** synopsebot joined
[10:15] *** dalek joined
[10:15] *** tolkien.freenode.net sets mode: +vvvv Geth SourceBaby synopsebot dalek

[10:15] *** pi2 joined
[10:15] *** cpage joined
[10:15] *** salva joined
[10:15] *** poohman joined
[10:15] *** poohman left
[10:16] *** poohman joined
[10:17] *** poohman left
[10:17] *** poohman joined
[10:17] *** poohman left
[10:17] *** poohman joined
[10:18] *** poohman left
[10:20] *** poohman joined
[10:20] *** poohman left
[10:23] *** poohman joined
[10:23] *** poohman left
[10:24] *** konsolebox left
[10:25] *** poohman joined
[10:25] *** poohman left
[10:25] *** poohman joined
[10:25] *** poohman left
[10:26] *** poohman joined
[10:26] *** konsolebox joined
[10:26] *** poohman left
[10:27] *** lowbro left
[10:27] *** poohman joined
[10:27] *** poohman left
[10:27] *** poohman joined
[10:28] *** poohman left
[10:29] *** poohman joined
[10:29] *** poohman left
[10:30] *** poohman joined
[10:30] *** poohman left
[10:30] *** wamba joined
[10:31] *** margeas joined
[10:37] <jnthn> wander: The should always be an unambiguous first thing to dispatch to. Re-dispatch works by calculating all of the possible targets, then excluding the first one, and then iterating through those.

[10:38] <wander> aha, that's it.

[10:38] <wander> thank you.

[10:39] <El_Che> hey jnthn, coming to next fosdem?

[10:39] <DrForr> I would ask the same of you :)

[10:39] <DrForr> (if I haven't already.)

[10:40] <El_Che> hehe

[10:40] <jnthn> wander: I mean, conceptually nextsame works by iterating a candidate list calculated at the point of the original dispatchy

[10:41] <jnthn> wander: But if we implemented it like that then performance would be pretty terrible

[10:41] <jnthn> So we cheat and hope to not get caught. ;)

[10:41] <jnthn> I think the refusal to dispatch to an unambiguous first candidate makes that safe.

[10:42] <jnthn> Since we know that calculating the list upon first use of nextsame using the original arguments, then dropping the first result, means that the result we drop matches the one we'd originally hit

[10:46] <wander> then we have cached it?

[10:47] <DrForr> Now I just have to remember to write the bloody Advent post...

[10:47] <jnthn> wander: We use a cache to resolve initial dispatches, yes (of course, the first time we call them the cache has no entry)

[10:48] *** konsolebox left
[10:49] *** konsolebox joined
[10:51] <El_Che> DrForr: that's the price you pay for fame

[10:53] <DrForr> H*ll, I'm starting to get people cold-emailing me about doing presentations...

[10:54] <DrForr> It's almost like they think I know what I'm doing.

[10:54] <El_Che> DrForr: really? Nice to hear that

[10:54] *** konsolebox left
[10:55] <DrForr> Yeah. CloudFoundry was the latest.

[10:55] *** konsolebox joined
[10:55] <DrForr> Grabbing lunch, back in a bit.

[10:55] <El_Che> Talk about what mostly? P6? p5? origami?

[10:58] *** Ven`` left
[10:59] <jnthn> El_Che: Most likely won't make fosdem this time around

[11:00] *** konsolebox left
[11:00] <El_Che> with all the improvements of the last few years, that was a good PR opportunity.

[11:00] <El_Che> jnthn: I understand, though

[11:01] *** konsolebox joined
[11:03] <El_Che> DrForr: are you coming?

[11:04] <DrForr> FOSDEM? If I can, definitely.

[11:05] <El_Che> I asked because you moved recently and stuff

[11:05] <DrForr> I'd end up totally rethinking my machine learning stuff, which is probably a good thing.

[11:05] *** xui_nya[m] left
[11:05] *** donaldh left
[11:05] <DrForr> I'm now in a vastly more convenient place to be able to get in and out of.

[11:06] <DrForr> (checking on Brussels flights, come to think of it.)

[11:06] *** dakkar left
[11:06] *** wamba[m] left
[11:06] *** M-Illandan left
[11:06] *** cdg joined
[11:08] <DrForr> I took flybe ... holy f*ck, $67 roundtrip Prague-Brussels Friday-Monday of FOSDEM.

[11:09] *** donaldh joined
[11:10] *** itaipu joined
[11:10] <jnthn> El_Che: Well, there'll be *even more* improvements by the year after ;)

[11:11] *** cdg left
[11:12] *** dakkar joined
[11:13] *** AlexDaniel` left
[11:14] *** Matthew[m] left
[11:14] *** Garland_g[m] left
[11:14] *** wictory[m] left
[11:14] *** mack[m] left
[11:14] *** mienaikage left
[11:14] *** tadzik left
[11:14] *** unclechu left
[11:14] *** tyil[m]1 left
[11:14] *** CIAvash[m] left
[11:14] *** ilmari[m] left
[11:16] *** DickClarke joined
[11:17] *** cdg joined
[11:17] *** ribasushi left
[11:18] *** xinming_ joined
[11:18] *** konsolebox left
[11:18] <Geth> ¬¶ mu: 94e497bc85 | (Zoffix Znet)++ (committed using GitHub Web editor) | misc/perl6advent-2017/schedule

[11:18] <Geth> ¬¶ mu: Emptify schedule

[11:18] <Geth> ¬¶ mu: review: https://github.com/perl6/mu/commit/94e497bc85

[11:18] *** konsolebox joined
[11:20] *** ribasushi joined
[11:21] *** xinming left
[11:21] *** cdg left
[11:26] *** konsolebox left
[11:27] <perlawhirl> Can I clone/copy a sequence so I can iterate over it again. ie, not cache all the values, but copy the Seq and re-generate it

[11:27] <perlawhirl> m: my $x = (1...3); .say for gather for ^3 { for $x[] { .take } } 

[11:27] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´1‚ê§This Seq has already been iterated, and its values consumed‚ê§(you might solve this by adding .cache on usages of the Seq, or‚ê§by assigning the Seq into an array)‚ê§  in code  at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§2‚ê§3‚ê§¬ª

[11:28] *** konsolebox joined
[11:34] *** scimon left
[11:36] <Geth> ¬¶ doc: 82bec53180 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/tables.pod6

[11:36] <Geth> ¬¶ doc: update to current state of table handling

[11:36] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/82bec53180

[11:36] <synopsebot> Link: https://doc.perl6.org/language/tables

[11:41] *** yoleaux joined
[11:41] *** ChanServ sets mode: +v yoleaux

[11:41] *** astj joined
[11:42] <SmokeMachine> m: use Test; sub roundtrip ( $name ) {|sprintf( "%s", $name ) eq $name, "'$name' round trips.‚Äù}; ok roundtrip ‚Äúa‚Äù

[11:42] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in double quotes; couldn't find final '"' (corresponding starter was at line 1)‚ê§at <tmp>:1‚ê§------> 3'$name' round trips.‚Äù}; ok roundtrip ‚Äúa‚Äù7‚èè5<EOL>‚ê§    expe‚Ä¶¬ª

[11:43] <SmokeMachine> m: use Test; sub roundtrip ( $name ) {|sprintf( ‚Äú%s‚Äù, $name ) eq $name, ‚Äú'$name' round trips.‚Äù}; ok roundtrip ‚Äúa‚Äù

[11:43] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´ok 1 - ‚ê§¬ª

[11:44] *** gregf_ left
[11:44] <SmokeMachine> m: use Test; sub roundtrip ( $name ) {slip sprintf( ‚Äú%s‚Äù, $name ) eq $name, ‚Äú'$name' round trips.‚Äù}; ok roundtrip ‚Äúa‚Äù

[11:44] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´ok 1 - ‚ê§¬ª

[11:44] <SmokeMachine> m: use Test; sub roundtrip ( $name ) {sprintf( ‚Äú%s‚Äù, $name ) eq $name, ‚Äú'$name' round trips.‚Äù}; ok |roundtrip ‚Äúa‚Äù

[11:44] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´ok 1 - 'a' round trips.‚ê§¬ª

[11:44] <DrForr> That code looks suspiciously familiar :)

[11:44] <SmokeMachine> :)

[11:45] <DrForr> I was wondering if slip() would work.

[11:45] *** astj left
[11:45] <SmokeMachine> DrForr: yes... it didn‚Äôt... :(

[11:45] *** lowbro joined
[11:45] *** lowbro left
[11:45] *** lowbro joined
[11:47] <DrForr> Yeah, slip() just returns the list in this context which still returns as a List. I suspect there's a way to jigger around with the signature to get the effect I wanted, but I was already at nearly midnight.

[11:47] <DrForr> And it's really gratifying to see that someone's actually reading this stuff :)

[11:47] <SmokeMachine> m: use Test; sub roundtrip ( $name ) {|[sprintf( ‚Äú%s‚Äù, $name ) eq $name, ‚Äú'$name' round trips.‚Äù]}; ok roundtrip ‚Äúa‚Äù

[11:47] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´ok 1 - ‚ê§¬ª

[11:47] <SmokeMachine> :(

[11:48] <DrForr> 453 reads in the last ~3 days...

[11:48] <SmokeMachine> :) was that was a very good post!

[11:49] <DrForr> Thanks.

[11:53] <DrForr> Practically all of the views from the US, which should come as no surprise. Australia and Canada being almost even counts as a surprise though.

[11:54] <DrForr> Next one will probably be my blogspot poster I'm writing.

[12:02] *** yoleaux left
[12:02] *** yoleaux joined
[12:02] *** ChanServ sets mode: +v yoleaux

[12:06] *** wander left
[12:07] *** sena_kun joined
[12:08] *** scimon joined
[12:12] *** silug left
[12:13] <SmokeMachine> You had at least 1 read from Brazil... :)

[12:15] <DrForr> It's only showing the top 10... :/

[12:22] *** cdg joined
[12:25] *** konsolebox left
[12:25] *** mienaikage joined
[12:26] *** konsolebox joined
[12:27] *** cdg left
[12:34] *** konsolebox left
[12:35] *** konsolebox joined
[12:43] *** rgrau left
[12:44] *** dustinm` left
[12:44] *** cdg joined
[12:47] *** konsolebox left
[12:49] *** konsolebox joined
[12:49] *** cdg left
[12:50] *** zakharyas joined
[12:53] *** dustinm` joined
[12:59] *** wamba left
[13:02] *** lizmat joined
[13:02] *** go|dfish joined
[13:02] *** Cabanossi left
[13:03] *** Cabanossi joined
[13:04] *** pmurias joined
[13:05] <pmurias> hmm, how can I emulate a signed to unsigned integer conversion in js?

[13:06] <pmurias> for signed to smaller signed I do something like: value << 24 >> 24 (to emulate a 8 bit integer)

[13:08] *** jeromelanteri left
[13:11] *** tyil[m] joined
[13:11] *** mack[m] joined
[13:11] *** tadzik joined
[13:11] *** unclechu joined
[13:11] *** CIAvash[m] joined
[13:11] *** AlexDaniel` joined
[13:11] *** wictory[m] joined
[13:11] *** wamba[m] joined
[13:11] *** M-Illandan joined
[13:11] *** ilmari[m] joined
[13:11] *** xui_nya[m] joined
[13:11] *** Matthew[m] joined
[13:11] *** Garland_g[m] joined
[13:11] <DrForr> Uh, what's with the [m] markers?

[13:12] *** konsolebox left
[13:13] *** lizmat left
[13:14] *** lizmat joined
[13:14] *** konsolebox joined
[13:17] *** lizmat left
[13:19] *** konsolebox left
[13:21] *** konsolebox joined
[13:26] *** HoboWithAShotgun joined
[13:28] *** bdmatatu joined
[13:28] <HoboWithAShotgun> ok, so i got my hands on this R500 thinkpad with win10 on it and thought it'd be fun to benchmarck the windows rakudo vs a linux subsystem rakudo

[13:29] <HoboWithAShotgun> easy fun for an evening right? wrong. the thing has been off for a year and it is still updating. for like 16 hours now.

[13:29] <El_Che> HoboWithAShotgun: :)

[13:29] <El_Che> I bet it didn't ask you when to update?

[13:30] <HoboWithAShotgun> well it has to. the linux subsystem is new and requires the creators update

[13:30] <HoboWithAShotgun> *has to update

[13:30] *** cdg joined
[13:32] <HoboWithAShotgun> it`s a neat little thing that thinkpad. i think i gonna put an ssd in it

[13:33] <HoboWithAShotgun> the 60gig ones now get sold as doorstoppers so i think i gonna pick one up

[13:35] *** cdg left
[13:35] *** konsolebox left
[13:37] *** wander joined
[13:37] <wander> jnthn: I still find it weird that we don't apply textual ordering in this case ‚Üì

[13:37] *** wamba joined
[13:37] <timotimo> HoboWithAShotgun: updating a windows machine is much faster when you use wsusofflineupdater

[13:38] <wander> m: multi sub f(Int \a, Any \b) { } ;multi sub f(Any \a, Int \b) { } f(42, 42); 

[13:38] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Strange text after block (missing semicolon or comma?)‚ê§at <tmp>:1‚ê§------> 3\b) { } ;multi sub f(Any \a, Int \b) { }7‚èè5 f(42, 42);‚ê§    expecting any of:‚ê§        infix‚ê§        infix stoppe‚Ä¶¬ª

[13:38] <wander> m: multi sub f(Int \a, Any \b) { } ;multi sub f(Any \a, Int \b) { }; f(42, 42); 

[13:38] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´Ambiguous call to 'f'; these signatures all match:‚ê§:(Int \a, \b)‚ê§:(\a, Int \b)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:38] <jnthn> wander: That only applies to tie-breakers

[13:38] <wander> and we really use it when re-dispatch

[13:38] <jnthn> This is a type match

[13:39] <wander> m: multi sub f(Int \a, Int \b) { say '0'; nextsame }; multi sub f(Int \a, Any \b) {say '1'; nextsame } ;multi sub f(Any \a, Int \b) {say '2'; nextsame }; f(42, 42); 

[13:39] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§¬ª

[13:40] <jnthn> I guess in that case we build the DAG in such a way that it happens to toposort (in this case at least) such that the nextsame visits the things in source order.

[13:41] <HoboWithAShotgun> timotimo: interesting

[13:41] <jnthn> But nextsame is about iterating all possible candidates

[13:42] <wander> as to multi dispatch, we choose *one* candidate, so there is no DAG built?

[13:42] <jnthn> There's always a DAG built

[13:42] <jnthn> That's how we decide the order to consider candidates in the first place

[13:42] *** konsolebox joined
[13:42] <jnthn> Just saying that it's pure luck that you get 012 and not 021

[13:42] <wander> there should be, all that confuse me is the inconsistent

[13:42] <jnthn> Oh, actually...maybe not

[13:43] <jnthn> I guess it has to preserve that order for tie-breaking where clauses

[13:44] <jnthn> Well, I guess we could change it so nextsame and friends also blow up with ambiguity errors

[13:44] <jnthn> But I'm not sure if that's helpful :)

[13:44] *** mson joined
[13:48] <jnthn> But overall, I'm not sure one should expect two different things to be consistent

[13:48] <jnthn> When you want to call one thing, there must be an unambiguous result. When you are iterating things, as next* does, then it's not an issue if there's multiple things that could be visited.

[13:50] *** philomath joined
[13:52] *** cdg joined
[13:53] <wander> even if in which order we iterate thing is unclear? it looks like we iterate these candidates by the order same as how we choose the first one. and now it tells me for some candidates, the order is random

[13:54] <wander> we define some tie-breaker and then define textual ordering as tie-breaker's tie-breaker

[13:55] <wander> why not textual ordering itself be a tie-breaker

[13:58] <HoboWithAShotgun> an explicit call and one via nextsame may be different things, but i'd expect this to blow

[13:58] <jnthn> Because ambiguous dispatches on type are very rarely what anyone intended

[13:58] <[Coke]> japhb++ 

[13:59] <HoboWithAShotgun> that's the point, it's rarely intended and ambigious and it should at least produce a warning

[14:00] <jnthn> Then write a patch to make nextcall explode in that case, and we can see what the impact is.

[14:01] <HoboWithAShotgun> i'll keep my feet onto the userland, you guys do the kernel shit tyvm :)

[14:01] *** itaipu left
[14:02] <wander> yes, it's rare

[14:02] <HoboWithAShotgun> i mean it's not that i wouldn't do it. i'm just not qualified.

[14:02] <jnthn> An alternative is to try and detect all of these cases at compile time

[14:03] *** itaipu joined
[14:04] *** sena_kun left
[14:04] *** sena_kun joined
[14:06] <wander> anyway, always i like perl6. these stuff become problem at the situation where i recommend perl6 to friends, when we talk about some details.

[14:13] <DrForr> You don't have to tell them about *all* the gory details :)

[14:14] *** drigglearray joined
[14:14] <drigglearray> Hello

[14:14] <drigglearray> I'm having trouble getting concatenation inside loops to work

[14:15] <DrForr> Put your code up in a gist and we can  take a look :)

[14:16] <drigglearray> Okay, one sec

[14:16] <drigglearray> :D

[14:16] *** philomath left
[14:16] *** philomath joined
[14:17] <drigglearray> https://pastebin.com/mwmz3Hfu

[14:19] <DrForr> You're declaring $espace_r each time through the loop. Try declaring it before the loop.

[14:20] <DrForr> Alternatively you could use 'state $espace_r = 0;' and it'll get initialized once, then used every subsequent time.

[14:20] <DrForr> And you're initializing it to a number, and concatenating a string.

[14:23] *** philomath_ joined
[14:23] <wander> as our tie-breakers of PEGs, textual ordering always works. it looks like we believe when users deal with PEGs, they know what happens(textual ordering matters).

[14:23] <wander> then for the very case of multi dispatch, we assume when users define 'ambiguous' candidates, that is a mistake.

[14:24] <wander> and when they use tie-breaker explicitly, we trust them again, saying they know textual ordering matters.

[14:24] <DrForr> Also, you want ~= in order to concatenate *to* something, just using '~' will return the concatenated string, not store it.

[14:24] *** philomath left
[14:24] <drigglearray> Thanks DrForr, will try all your advice and report back with the results

[14:25] <DrForr> for reverse(100..2) -> $m { state $espace_r; $espace_r ~= $m }

[14:25] *** silug joined
[14:31] *** zakharyas left
[14:31] <drigglearray> Many thanks DrForr, it looks like the main issue was solved by using ~= instead of ~

[14:33] <DrForr> No worries.

[14:44] *** philomath_ left
[14:44] *** koto joined
[14:46] *** sena_kun left
[14:48] *** mcmillhj joined
[14:53] * [Coke] writes a few paragraphs for the advent article so that when he forgets about it for 3 weeks, he's doesn't have to start on an empty page.

[14:53] <[Coke]> s/he's/he/

[14:53] *** drigglearray left
[14:54] *** HoboWithAShotgun left
[14:56] *** wander left
[14:56] *** philomath joined
[14:59] *** koto left
[14:59] <dpk> how is the regexp :ignoremark semantic actually defined?

[14:59] <dpk> accent normalization was removed from Unicode

[14:59] <dpk> (actually it was never formally in, it was withdrawn while still at draft stage)

[15:00] *** comborico1611 joined
[15:00] <dpk> uh, and by 'accent normalization' i of course mean diacritic folding

[15:00] <dpk> NFK?[CD] are of course still there

[15:01] <dpk> does it just NFD the input string and ignore characters in the mark category (Mn etc)?

[15:01] *** Cabanossi left
[15:02] *** pmurias left
[15:03] *** Cabanossi joined
[15:04] <timotimo> it only compares against the base character of each nfg grapheme

[15:04] <jnthn> Hm, I think if NFDs the grapheme and looks at the first decomposed codepoint

[15:04] *** philomath_ joined
[15:04] <dpk> how do you define the base character then?

[15:04] <jnthn> Well, only has to NFD the first codepoint, of course

[15:05] *** philomath left
[15:05] *** philomath_ left
[15:05] <timotimo> i believe that's based on append and prepend properties?

[15:05] <dpk> base characters are obvious for characters like √© but less obvious for Hangul

[15:05] *** philomath_ joined
[15:05] <dpk> (for Hangul you probably want ignoremark to do nothing ‚Ä¶)

[15:07] *** philomath_ is now known as philomah

[15:07] *** philomah left
[15:14] *** Slayerk joined
[15:15] <dpk> okay, it does seem to dtrt for Hangul at least, based on messing around with Rakudo a bit

[15:15] *** philomath joined
[15:16] <Slayerk> Is there any way to turn integers into strings so they give a valid .elems value?

[15:17] <timotimo> what is a valid .elems value for an integer that's turned into a string?

[15:17] <dpk> Slayerk: (sprintf "%d", 123)

[15:18] <dpk> (probably a quite heterodox way to do it ‚Ä¶)

[15:19] <timotimo> i'd literally just 123.Str, but what would you expect from .elems rather than just 1?

[15:19] <dpk> oh, that's how you do it

[15:19] <Slayerk> Well, I'd want it to give me the length of the integer

[15:19] <timotimo> oh

[15:19] <timotimo> that's not elems, that's chars

[15:19] <Slayerk> For instance, the .elems value of 123 would be 3?

[15:19] <timotimo> m: say 12345.chars

[15:19] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´5‚ê§¬ª

[15:19] <timotimo> no need to convert to string first, because it's one of the "Cool" methods that automatically coerce for you

[15:20] <Slayerk> Nice!

[15:20] <comborico1611> That's pretty cool, for sure.

[15:20] *** geospeck left
[15:21] *** geospeck joined
[15:23] *** xinming_ left
[15:24] *** xinming joined
[15:25] *** geospeck left
[15:29] <Slayerk> Hmm, is there any way to loop through an integer?

[15:29] <masak> m: for 5179 { .say }

[15:29] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´5179‚ê§¬ª

[15:29] <masak> Slayerk: ^

[15:29] <jnthn> Do you mean the digits of it? :)

[15:29] * masak .oO( From the department of Creative Misunderstandings )

[15:29] <jnthn> m: for 5179.comb { .say }

[15:29] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´5‚ê§1‚ê§7‚ê§9‚ê§¬ª

[15:29] <Slayerk> ^^^

[15:30] <masak> jnthn++ # being less literal-minded :P

[15:30] <comborico1611> Well, i learned something.

[15:30] <masak> Slayerk: keep in mind, though, that decimal digits are a societal construct, and not at all intrinsic to the number itself

[15:30] * masak is such a big help right now

[15:30] <Slayerk> o_O

[15:31] <masak> anytime! :D

[15:31] <timotimo> here's the purest "iterate through digits of a number" you can get:

[15:31] <timotimo> m: for 42 xx 1 { .say }

[15:31] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´42‚ê§¬ª

[15:31] <timotimo> haha

[15:31] <masak> m: for 5179.base(2) { .say }

[15:31] <timotimo> wrong way around

[15:31] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´1010000111011‚ê§¬ª

[15:31] <timotimo> m: for 42 Rxx 1 { .say }

[15:31] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§1‚ê§¬ª

[15:32] <masak> ah, unary

[15:32] <timotimo> the *other* purest "iterate through digits of a number" you can get is:

[15:32] <comborico1611> Lol

[15:32] <timotimo> m: for 1 { .say }

[15:32] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´1‚ê§¬ª

[15:32] <timotimo> ^- correct answer for every number you can come up with

[15:33] <timotimo> oh, maybe not for 0 though

[15:33] *** mcmillhj left
[15:33] <El_Che> is 0 a number?

[15:33] <masak> El_Che: yes, but kind of an ostracized one

[15:34] <timotimo> did you know that the number of zeros inside ‚Ñï is not zero, but one?

[15:34] <timotimo> though sometimes ‚Ñï is interpreted as "1 and up" not "0 and up"

[15:34] <timotimo> in which case, substitute ‚Ñ§

[15:34] <masak> clearly only luddites think 0 ‚àâ ‚Ñï

[15:34] <El_Che> whatever excuse is needed to type utf8 on irc

[15:35] <timotimo> ‚Ñï‚Çä doesn't have 0 though, right?

[15:35] <masak> El_Che: see /topic :)

[15:35] <masak> timotimo: no, but there it is by choice; that's different

[15:36] <timotimo> right, i was just wondering if i got the name right

[15:37] <timotimo> masak: it may be worth pointing out that in for 5179.base(2) { .say } you're only doing a single iteration that gives the whole string

[15:37] <timotimo> so you'd .base.comb to get the individual digits

[15:37] <masak> indeed; good point

[15:38] <masak> if you're knowingly doing only a single iteration, you might also want to consider the more idiomatic `given` construct

[15:39] *** pmurias joined
[15:40] *** konsolebox left
[15:41] *** Zoffix joined
[15:41] *** Zoffix left
[15:44] *** wamba left
[15:44] <perlpilot> I probably would have used ...

[15:44] <perlpilot> m: .say with 5179.base(2);

[15:44] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´1010000111011‚ê§¬ª

[15:44] <perlpilot> (reads a little better than given to me)

[15:46] *** konsolebox joined
[15:46] *** mcmillhj joined
[15:49] *** wamba joined
[15:50] *** rgrau joined
[15:54] *** mson left
[15:55] *** mcmillhj left
[15:57] *** f0x left
[15:57] *** domidumont left
[16:00] *** gregf_ joined
[16:09] *** mcmillhj joined
[16:16] *** HoboWithAShotgun joined
[16:17] * HoboWithAShotgun builds rakudo under win10/ubuntu

[16:18] <HoboWithAShotgun> finally ^^

[16:19] <Slayerk> Is there any simple way to remove a particular character from a string?

[16:20] <perlpilot> Slayerk: yes?

[16:20] <Slayerk> :P plz tel

[16:20] <HoboWithAShotgun> m: "abc".subst("b","").say

[16:20] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´ac‚ê§¬ª

[16:21] <Slayerk> Thanks, I'm new to Perl6/programming

[16:21] <perlpilot> Slayerk: Is that what you meant by "particular" character? Because another option I can think of is that you meant "remove the 5th character" from the string

[16:22] <Slayerk> Yeah, I'm trying to remove all spaces from a number

[16:22] <HoboWithAShotgun> aaand the build fails, it's trying to mkdir /opt/rakudo-star-2017.10

[16:22] <perlpilot> Slayerk: oh, then you want to add an :g to HoboWithAShotgun's solution

[16:23] <perlpilot> m: "foo    bar    baz".subst(" ","", :g).say

[16:23] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´foobarbaz‚ê§¬ª

[16:23] * HoboWithAShotgun retries under sudo

[16:23] <Slayerk> wow, and I was coming up with this super complex solution to remove spaces involving 3x nested loops and stuff :P

[16:23] <perlpilot> Slayerk: or, if you really mean "whitespace" rather than "spaces", maybe you want to use a regular expression

[16:24] *** philomath_ joined
[16:25] *** philomath_ left
[16:25] *** philomath_ joined
[16:25] *** philomath left
[16:25] <perlpilot> m: "foo\t    bar    baz".subst(" ","", :g).say;  # tabs are whitespace but not spaces, so ...

[16:25] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´foo     barbaz‚ê§¬ª

[16:26] <perlpilot> m: "foo\t    bar    baz".subst(/\s+/,"", :g).say;  # get rid of all whitespace

[16:26] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´foobarbaz‚ê§¬ª

[16:27] <perlpilot> Slayerk: also ... why do your "numbers" have spaces in them?  

[16:28] *** troys joined
[16:28] <Slayerk> Ah, I used .comb so I can for loop through them

[16:28] <Slayerk> But now I just want to remove the spaces

[16:28] *** Phi_mb joined
[16:29] <HoboWithAShotgun> progress. but now i get this: http://pasted.co/b5791eaa

[16:29] <HoboWithAShotgun> any idea what could cause this? 

[16:29] *** wander joined
[16:30] <timotimo> HoboWithAShotgun: yup!

[16:30] <timotimo> huggable: execstack

[16:30] <huggable> timotimo, nothing found

[16:30] <timotimo> huggable: windows

[16:30] <huggable> timotimo, nothing found

[16:30] <timotimo> huggable: windows 10

[16:30] <huggable> timotimo, nothing found

[16:30] <timotimo> huggable: stack

[16:30] <huggable> timotimo, nothing found

[16:30] <timotimo> ...

[16:31] <timotimo> https://github.com/MoarVM/MoarVM/issues/470 - this can help, but it'll make nativecall unavailable

[16:31] <HoboWithAShotgun> huggable: love

[16:31] <huggable> HoboWithAShotgun, nothing found

[16:31] *** philomath_ left
[16:32] *** Phi_mb left
[16:32] *** Phi_mb joined
[16:32] <timotimo> actually, maybe it's not a problem after all?

[16:33] <El_Che> HoboWithAShotgun: https://github.com/nxadm/rakudo-pkg/blob/master/docker/fix_windows10

[16:33] <Geth> ¬¶ doc: 34c332873d | (Tom Browder)++ (committed using GitHub Web editor) | doc/Programs/README.md

[16:33] <Geth> ¬¶ doc: update after pod table fixes

[16:33] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/34c332873d

[16:37] <Slayerk> perlpilot: I've noticed that the .subst command doesn't save the new values, and I can't declare a new variable that equals a something.subst(). Any ideas?

[16:37] <perlpilot> er, what?

[16:37] <HoboWithAShotgun> ty El_Che, i gonna try that right after dinner, there's fried fish'n chips waiting

[16:38] <perlpilot> m: my $foo = "foo bar baz";   my $bar = $foo.subst(/\s+/, '', :g); say $bar;

[16:38] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´foobarbaz‚ê§¬ª

[16:39] <perlpilot> m: my $foo = "foo bar baz";  $foo ~~ s:g/\s+//;  say $foo;  # some syntactic sugar

[16:39] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´foobarbaz‚ê§¬ª

[16:39] <perlpilot> Slayerk: do those 2 bits of code help you?

[16:40] <Slayerk> perlpilot: Thanks, I think I should be good to go

[16:40] <perlpilot> m:  my $foo = "foo bar baz"; $foo.=subst(/\s+/, '', :g); say $foo;  # slightly less sugary

[16:40] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´foobarbaz‚ê§¬ª

[16:45] *** khw joined
[16:45] *** Phi_mb left
[16:46] *** Zoffix joined
[16:48] *** wamba left
[16:49] <Zoffix> Is there a way to‚Ä¶ dynamically execute‚Ä¶ a coercer. A user gives me a coercer and ideally, I want to attach it to a parameter on a block, but things I've tried failed. I know I can just see what the coercer coercers from and to and call the .$to() method myself, but that's a bit fragile, since the way our coercers work might change. 

[16:49] *** konsolebox left
[16:49] <Zoffix> m: role Foo[::T] { method z { -> T $x { $x } } }; Foo[Int()].new.z.(42.2).say

[16:49] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´Type check failed in binding to parameter '$x'; expected Int(Any) but got Rat (42.2)‚ê§  in block  at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:49] <Zoffix> ^ like here, I'd expect that to coercer Rat to Int 42

[16:53] <jnthn> No. The coercer syntax came fairly late on, and replaced the as trait on parameters.

[16:53] <Zoffix> OK. Thanks.

[16:54] <jnthn> The only things it can handle are, pretty much, the exact same thing that the as trait's internals could

[16:54] <jnthn> And since it was a trait, that meant we knew it at compile time

[16:54] <jnthn> So in the case you're looking at there, we can't know at compile time to compile the signature differently to handle the coercion

[16:54] *** konsolebox joined
[16:54] *** aindilis left
[16:55] <jnthn> And so it doesn't happen

[16:55] <timotimo> i could imagine the CoercerHOW to grow a method that does the coercion for you as part of our API

[16:56] <timotimo> just don't expect the method to be called when a coercion happens as part of a signature (if you override or wrap it)

[16:58] <Zoffix> m: my $c := Int(Cool); sub coerce { $^v ~~ $c.^constraint_type or die; $^v."{$c.^target_type.^name}"() }; say coerce "4e3"

[16:58] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´4000‚ê§¬ª

[16:58] <Zoffix> I'll just do this, for now.

[17:02] *** astj joined
[17:04] <Slayerk> perlpilot: After some experimentation, I've noticed a problem. After I remove the whitespace, I can't loop through the number anymore

[17:04] <Slayerk> my $a = "41 42";my $b = $a.subst(/\s+/, '', :g);loop (my $i = 0; $i < $b.chars; $i++){  say $b[$i];}

[17:04] <Slayerk> m: my $a = "41 42";my $b = $a.subst(/\s+/, '', :g);loop (my $i = 0; $i < $b.chars; $i++){  say $b[$i];}

[17:04] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´4142‚ê§Index out of range. Is: 1, should be in 0..0‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:04] <Zoffix> m: my $a = "41 42";my $b = $a.subst(/\s+/, '', :g);loop (my $i = 0; $i < $b.chars; $i++){  say $b.comb[$i];}

[17:04] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´4‚ê§1‚ê§4‚ê§2‚ê§¬ª

[17:05] <Zoffix> m: my $a = "41 42";my $b = $a.subst(/\s+/, '', :g); for $a.comb { .say }

[17:05] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´4‚ê§1‚ê§ ‚ê§4‚ê§2‚ê§¬ª

[17:05] <Zoffix> m: my $a = "41 42"; $a.comb(/\S/) { .say }

[17:05] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unexpected block in infix position (missing statement control word before the expression?)‚ê§at <tmp>:1‚ê§------> 3my $a = "41 42"; $a.comb(/\S/)7‚èè5 { .say }‚ê§    expecting any of:‚ê§        infi‚Ä¶¬ª

[17:05] <Zoffix> m: my $a = "41 42"; for $a.comb(/\S/) { .say }

[17:05] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´4‚ê§1‚ê§4‚ê§2‚ê§¬ª

[17:06] <Zoffix> Slayerk: your code doesn't work because you're trying to index into a string. It's a 1-element list (just the string itself), so only index 0 is valid. You need to break the string up into characters if you want to access them with `[]`; you could also use .substr

[17:06] *** astj left
[17:06] <Zoffix> m: my $a = "41 42";my $b = $a.subst(/\s+/, '', :g);loop (my $i = 0; $i < $b.chars; $i++){  say $b.substr: $i, 1;}

[17:06] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´4‚ê§1‚ê§4‚ê§2‚ê§¬ª

[17:07] <Zoffix> m: my $a = "41 42";my $b = $a.subst(/\s+/, '', :g); for ^$b.chars { say $b.substr: $_, 1 } # the C-style loop is rarely needed in Perl 6

[17:07] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´4‚ê§1‚ê§4‚ê§2‚ê§¬ª

[17:08] <Zoffix> m: .say for comb /\S/, "41 42"

[17:08] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´4‚ê§1‚ê§4‚ê§2‚ê§¬ª

[17:09] <Zoffix> Thanks for the help. \o

[17:09] *** Zoffix left
[17:09] <Slayerk> Thanks Zoffix

[17:12] <TimToady> m: say  m: "foo\t    bar    baz".words.join

[17:12] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Colons may not be used to delimit quoting constructs‚ê§at <tmp>:1‚ê§------> 3say  m:7‚èè5 "foo\t    bar    baz".words.join‚ê§    expecting any of:‚ê§        colon pair (restricted)‚ê§¬ª

[17:12] <TimToady> m: say "foo\t    bar    baz".words.join

[17:12] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´foobarbaz‚ê§¬ª

[17:17] <perlpilot> Slayerk: why are you iterating over each character in the number?

[17:19] <Slayerk> Well, I want to get the palindrome of the number

[17:19] <Slayerk> So the idea is to take individual numbers from a number and reassemble the number backwards

[17:19] <Slayerk> Then compare to the original number

[17:19] <jnthn> m: say "1234".flip

[17:19] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´4321‚ê§¬ª

[17:19] <Slayerk> ...

[17:19] <Slayerk> Really?

[17:19] <Slayerk> ...

[17:19] <perlpilot> Slayerk: yep.

[17:20] <Slayerk> omg

[17:20] <Slayerk> I've just spent 5 hours on this

[17:20] <jnthn> m: say 696.flip eq 696

[17:20] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´True‚ê§¬ª

[17:20] <perlpilot> Slayerk: you're doing *way* too much work :)

[17:20] <jnthn> m: say 669.flip eq 669

[17:20] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´False‚ê§¬ª

[17:20] <Slayerk> ... plz no more

[17:21] <Xliff> m: my $a = 1234; ($a ~ $a.flip).say

[17:21] <camelia> rakudo-moar f3b1289fd: OUTPUT: ¬´12344321‚ê§¬ª

[17:22] <Xliff> Sorry. Couldn't resist. /o\

[17:26] *** eroux joined
[17:28] *** scimon left
[17:32] *** mson joined
[17:35] *** abraxxa left
[17:40] *** setty1 joined
[17:45] *** dakkar left
[17:46] <Slayerk> Well, using .flip I managed to do in 20 minutes what I couldn't get working in 5 hours. RIP me. Thanks for the help guys.

[17:46] <Slayerk> Night.

[17:47] *** Cabanossi left
[17:47] *** Slayerk left
[17:48] *** Cabanossi joined
[17:58] *** mcmillhj left
[18:11] *** domidumont joined
[18:11] *** itaipu left
[18:17] *** Cabanossi left
[18:18] *** Cabanossi joined
[18:18] *** llfourn joined
[18:24] *** domidumont left
[18:25] *** mcmillhj joined
[18:29] *** darutoko left
[18:30] *** mcmillhj left
[18:31] <AlexDaniel> squashable6: next

[18:31] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in ‚âà15 hours (2017-12-02 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[18:33] *** mcmillhj joined
[18:38] *** mcmillhj left
[18:40] *** wamba joined
[18:43] *** ExtraCrispy joined
[18:51] *** Ven joined
[18:52] *** Ven is now known as Guest33619

[18:56] *** mcmillhj joined
[18:59] <masak> perlpilot: I have no idea why you think `with` reads better than `given` ;)

[19:00] *** Cabanossi left
[19:00] <masak> though I realize this might be my bias speaking. I still mostly fail to see the point of `with`

[19:01] <masak> and I think it's extra confusing to use it in situations unrelated to definedness

[19:02] <AlexDaniel> it's really useful

[19:02] <AlexDaniel> LEAVE .unlink with $tempfile;

[19:03] <AlexDaniel> and stuff like that

[19:03] *** Cabanossi joined
[19:03] <AlexDaniel> and of course, `without` :)

[19:05] *** eroux left
[19:05] <perlpilot> masak: perhaps.

[19:06] *** cdg left
[19:06] <timotimo> leave with your stuff

[19:06] <masak> AlexDaniel: I hear you. maybe I'm just stubborn. ;)

[19:07] *** wamba left
[19:07] *** wamba joined
[19:08] <El_Che> moritz: today I freed some time to read your book. I like it so far

[19:08] <AlexDaniel> masak: but how else would you write that stuff? LEAVE $tempfile.unlink if defined $tempfile; ?

[19:08] <perlpilot> stubbornness is an admirable trait when used in moderation.   masak: Are you moderately stubborn?  ;)

[19:08] <El_Che> moritz: you really show off the languages without boasting

[19:08] <AlexDaniel> .oO( trait? sub foo() is stubborn { } )

[19:10] <masak> perlpilot: I don't know, to be honest

[19:11] <masak> AlexDaniel: maybe LEAVE .unlink if .defined given $tempfile

[19:11] <AlexDaniel> masak: O_O

[19:11] <perlpilot> looks like temporary insanity from here 

[19:12] <perlpilot> (at least I hope it's temporary)

[19:12] <El_Che> moritz: I was suspicious about the existence of a Perl 6 cabal and TimToady's nice words confirmed it :P

[19:12] <masak> AlexDaniel, perlpilot: I hear you :) I will try to like `with`

[19:13] *** ExtraCrispy left
[19:13] <perlpilot> oddly, for me, it's `without` that bothers me.   I'm all for symmetry when it makes sense, but I'm not sure `without` makes enough sense.

[19:14] <perlpilot> (maybe that's just my myopia or something though)

[19:14] <masak> I agree about `without` being weird and odd -- it's just for me, the problem starts earlier :)

[19:15] <AlexDaniel> without makes sense too

[19:15] <AlexDaniel> return ‚Äòblah‚Äô without $foo;

[19:16] <masak> there's nothing conditional about either `with` or `without`

[19:16] <perlpilot> yeah, they should be called "ifdef" and "ifndef"  ;>

[19:16] * masak .oO( .beat with $dead-horse )

[19:17] <masak> perlpilot: https://github.com/masak/007/issues/236 :)

[19:17] <moritz> El_Che: thanks! :-)

[19:18] <AlexDaniel> and it reads so nicely: https://github.com/perl6/whateverable/search?p=1&q=%22without%22&type=&utf8=%E2%9C%93

[19:18] <El_Che> moritz: the jury is out yet :). I am at the datetime chapter

[19:18] *** benchable6 left
[19:18] <AlexDaniel> (although most of the results are from the GPL header :D)

[19:18] *** benchable6 joined
[19:19] <Geth> ¬¶ mu: 13f470c7a7 | (Curt Tilmes)++ (committed using GitHub Web editor) | misc/perl6advent-2017/schedule

[19:19] <Geth> ¬¶ mu: Sign up for day 5

[19:19] <Geth> ¬¶ mu: review: https://github.com/perl6/mu/commit/13f470c7a7

[19:21] <HoboWithAShotgun> ok, got it working, now make install is installing a bunch of modules

[19:21] <Xliff> masak: with || without $you

[19:21] * Xliff flees

[19:21] <Xliff> Of course, it works properly in plain english: with or without $you

[19:22] * Xliff goes back to grooving to U2.

[19:22] <masak> Xliff: yes, but in no language does "with" mean "if defined, but topicalize on the thing whose definedness we're checking"

[19:23] <masak> feel free to check me on this ;)

[19:23] <perlpilot> AlexDaniel: in `return ‚Äòblah‚Äô without $foo;`, without feels more exclusionary than "if not defined"

[19:23] <Xliff> masak: LOL

[19:23] <perlpilot> AlexDaniel: as in,  return $burger without $fries;

[19:23] <Xliff> I wasn't even being serious. Anytime I can work in a U2 lyric into a coding conversation is an opportunity I am not missing! :>

[19:23] <masak> I mean, it's admirable we're Finally Solved the semipredicate problem and all (*snrk*)

[19:24] *** Actualeyes left
[19:24] <Xliff> s/we're/we've/

[19:24] <masak> indeed, thanks

[19:25] * Xliff just realized that "without $you" is also a John B lyric. O_O

[19:25] <Xliff> Good song, too.

[19:26] <Xliff> https://www.youtube.com/watch?v=1DRcuAr_bRk&ab_channel=HospitalRecords

[19:26] <comborico1611> Man, I feel for Slayerk. He should have read a perl6 intro book. But at least he got good practice in.

[19:26] <Xliff> comborico1611: We all learn more from our mistakes than our successes.

[19:26] <Xliff> I speak from experience. :P

[19:26] <comborico1611> Wisdom.

[19:27] * moritz didn't even mention .flip in p6f

[19:27] <perlpilot> no, wisdom is learning from *other* people's mistakes  ;)

[19:28] <Xliff> perlpilot: Actually Wisdom is learning from EVERYONE's mistakes. I think you are thinking of Good Wisdom

[19:28] <comborico1611> Haha. But sometimes, or often, people don't even learn from their mistakes.

[19:28] <Xliff> Although the "Good" modifier might not be the right one. 

[19:28] *** cpage_ left
[19:28] <comborico1611> Experience is a hard teacher because she gives the test first, the lesson afterwards

[19:29] <perlpilot> moritz: still, it would be nice to have a reference tome that mentions all the things.  I'm not sure the docs quite do it for some people.  (i.e. if you were looking for how to "flip a string", would you actually search for "reverse a string", and what would the docs tell you that would help?)

[19:29] <comborico1611> Marissa Tom√©?

[19:30] <comborico1611> I hate the docs.

[19:30] <moritz> https://docs.perl6.org/routine/reverse "Note that reverse always refers to reversing elements of a list; to reverse the characters in a string, use flip."

[19:30] <moritz> perlpilot: ^^

[19:30] <comborico1611> I mean, I'm glad they exist. But I find it very confusing. But I'm very inexperienced as a programmer, and as a P6er.

[19:31] *** nadim joined
[19:31] <Xliff> comborico1611: But you looove Marissa Tom√©!

[19:31] <Xliff> (no hate... I'm in the same boat)

[19:31] <perlpilot> comborico1611: yeah, that's what I think tends to happen for some (many?) people

[19:31] <comborico1611> Haha.

[19:32] <moritz> perlpilot: I considered applying to a grant to write some more introductory for the docs, so that the docs become a good "integrated" reference+learning source

[19:32] <perlpilot> comborico1611: also, it would be sweet if we could get a "Learn Perl¬†6 from Marissa Tom√©" video  ;)

[19:32] <Xliff> perlpilot++

[19:32] <comborico1611> I was just making fun of perlpilot's reference to tome.

[19:32] <Xliff> perlpilot: You should get on that. :)

[19:32] <perlpilot> moritz++ that would be awesome (if you have the time)

[19:32] <comborico1611> Haha!

[19:32] <moritz> perlpilot: haha, that's the catch

[19:33] <moritz> there are two other projects I want to do first :/

[19:33] <comborico1611> She seems like a nice woman. Someone can actually ask her she might do something.

[19:33] <comborico1611> If someone can*

[19:35] *** releasable6 left
[19:35] *** statisfiable6 left
[19:35] *** greppable6 joined
[19:35] *** ChanServ sets mode: +v greppable6

[19:35] *** releasable6 joined
[19:35] *** ChanServ sets mode: +v releasable6

[19:35] *** statisfiable6 joined
[19:35] *** ChanServ sets mode: +v statisfiable6

[19:35] *** reportable6 joined
[19:36] *** unicodable6 joined
[19:36] *** ChanServ sets mode: +v unicodable6

[19:36] *** bisectable6 left
[19:36] *** committable6 left
[19:36] *** bisectable6 joined
[19:36] *** ChanServ sets mode: +v bisectable6

[19:36] *** committable6 joined
[19:37] *** statisfiable6 left
[19:37] *** benchable6 left
[19:37] *** quotable6 left
[19:37] *** greppable6 left
[19:38] *** DickClarke left
[19:38] *** st_elmo joined
[19:44] *** troys is now known as troys_

[19:44] *** mson left
[19:46] <HoboWithAShotgun> i added a line about the execstack issue to the website code: http://pasted.co/822dcc3e

[19:46] <HoboWithAShotgun> any objections before i save this?

[19:46] <HoboWithAShotgun> (the second list item is new)

[19:47] *** epony left
[19:47] *** Cabanossi left
[19:47] *** epony joined
[19:48] *** Cabanossi joined
[19:50] *** reportable6 left
[19:50] *** rgrau left
[19:55] *** geospeck joined
[19:59] *** TEttinger joined
[20:00] <HoboWithAShotgun> that doesn't seem to be the case

[20:01] *** Guest33619 is now known as Ven``

[20:02] *** troys_ is now known as troys

[20:03] *** mcmillhj left
[20:03] *** cdg joined
[20:03] <Geth> ¬¶ perl6.org: 80178dfc64 | holli-holzer++ (committed using GitHub Web editor) | source/downloads/index.html

[20:03] <Geth> ¬¶ perl6.org: Mentioned the Win10/WSL execstack issue and how to get around it

[20:03] <Geth> ¬¶ perl6.org: review: https://github.com/perl6/perl6.org/commit/80178dfc64

[20:03] <buggable> New CPAN upload: PDF-Font-0.1.0.tar.gz by WARRINGD https://cpan.metacpan.org/authors/id/W/WA/WARRINGD/Perl6/PDF-Font-0.1.0.tar.gz

[20:05] *** lostinfog joined
[20:07] *** cdg left
[20:10] *** lostinfog left
[20:12] *** Ven`` left
[20:16] *** espadrine joined
[20:21] *** Ven`` joined
[20:21] *** mcmillhj joined
[20:32] *** s0me0ne-unkn0wn joined
[20:33] *** Ven`` left
[20:35] *** as_ joined
[20:35] *** s0me0n3-unkn0wn left
[20:37] *** pentashift joined
[20:39] *** astronavt joined
[20:42] *** as_ left
[20:42] *** HoboWithAShotgun left
[20:44] *** astronavt left
[20:52] *** geospeck left
[20:52] *** geospeck joined
[20:54] <AlexDaniel> heh! Finally, I looked at my Pascal's triangle solution for a second while I was in the middle of doing something else, and all of the sudden I realized how verbose it is

[20:54] <AlexDaniel> 22 characters now!

[20:55] <AlexDaniel> (context: https://code-golf.io/ )

[20:57] *** geospeck left
[20:58] *** bdmatatu left
[21:00] <geekosaur> (apl lives!)

[21:01] <comborico1611> How did you learn networking? By battling one of the senior network engineers. He hurt his back lifting a 1000' box of Cat5e and I saw my opportunity to ascend. He was in pain, and I could smell his fear. I threw down an AUI cable at his feet, the customary challenge (of course), and the Rite of Ascension began. Our Director presented us with the ceremonial 19" rack shelves, honed to a razor's edge on one side. We battled, it wa

[21:03] <geekosaur> channel? (or venue; this sounds vaguely SDM)

[21:03] <comborico1611> Stackoverflow

[21:06] *** pecastro left
[21:08] *** cdg joined
[21:09] *** mcmillhj left
[21:12] *** grumble joined
[21:13] *** cdg_ joined
[21:13] *** pecastro joined
[21:16] *** cdg left
[21:16] *** ivans joined
[21:17] *** troys is now known as troys_

[21:18] *** Ven`` joined
[21:19] *** wander left
[21:20] *** someuser left
[21:21] *** Ven`` left
[21:22] *** mniip left
[21:23] *** ryn1x_ joined
[21:25] *** mniip joined
[21:25] *** wamba left
[21:26] *** Ven`` joined
[21:26] <ryn1x_> Any one know why I get the warning "Regex object coerced to string (please use .gist or .perl to do that)" when trying "if / \w+'_'\d+$ / ~~ $subdir {$subdirname = ~$/}"? It only happens in a source file and not in the REPL.

[21:27] <jnthn> The regex belongs on the right of the ~~

[21:27] *** kitsunenokenja joined
[21:28] <ryn1x_> Oh shoot. Thanks jnthn. 

[21:30] <AlexDaniel> squashable6: next

[21:30] <squashable6> AlexDaniel, ‚ö†üçï Next SQUASHathon in ‚âà12 hours (2017-12-02 UTC-12‚åÅUTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[21:32] *** kerframil joined
[21:34] *** ivans left
[21:35] *** mcmillhj joined
[21:36] *** pentashift left
[21:40] *** ivans joined
[21:40] *** astronavt joined
[21:40] *** mcmillhj left
[21:43] *** nadim left
[21:45] *** astronavt left
[21:46] *** mcmillhj joined
[21:52] *** mcmillhj left
[21:52] <Geth> ¬¶ doc: 5396cdf379 | (Jan-Olof Hendig)++ | doc/Type/Kernel.pod6

[21:52] <Geth> ¬¶ doc: Fixed broken link and added some headers

[21:52] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/5396cdf379

[21:52] <synopsebot> Link: https://doc.perl6.org/type/Kernel

[21:59] *** mcmillhj joined
[22:01] *** Cabanossi left
[22:01] *** setty1 left
[22:03] *** Cabanossi joined
[22:04] *** mcmillhj left
[22:18] *** mcmillhj joined
[22:20] *** kerframil left
[22:20] <Geth> ¬¶ doc: 239abcaccb | (Jan-Olof Hendig)++ | doc/Type/Kernel.pod6

[22:20] <Geth> ¬¶ doc: Fixed copy paste error

[22:20] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/239abcaccb

[22:20] <synopsebot> Link: https://doc.perl6.org/type/Kernel

[22:26] *** ryn1x_ left
[22:27] *** mcmillhj left
[22:28] *** mcmillhj joined
[22:41] *** astronavt joined
[22:45] *** pilne joined
[22:46] *** astronavt left
[22:47] *** nadim joined
[22:53] *** mcmillhj left
[22:53] <buggable> New CPAN upload: Inline-Go-0.0.3.tar.gz by AZAWAWI https://cpan.metacpan.org/authors/id/A/AZ/AZAWAWI/Perl6/Inline-Go-0.0.3.tar.gz

[22:53] *** pecastro left
[22:57] <Geth> ¬¶ doc: 8c929d9a1d | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[22:57] <Geth> ¬¶ doc: escape visual col sep chars used as cell data

[22:57] <Geth> ¬¶ doc: 

[22:57] <Geth> ¬¶ doc: Correct the table by escaping visual column separator characters used as cell data.

[22:57] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/8c929d9a1d

[22:57] <synopsebot> Link: https://doc.perl6.org/language/regexes

[22:57] *** pilne left
[22:57] *** Slayerk joined
[22:58] <Slayerk> Hello

[22:58] <masak> \o

[22:58] *** pilne joined
[22:59] <Slayerk> If I do if $i %% $n[^20].all, does that check if the number is divisible by the all of the first 20 numbers in the sequence?

[23:01] *** mcmillhj joined
[23:02] *** kerframil joined
[23:03] <AlexDaniel> Slayerk: yes, that's how it should work

[23:04] <AlexDaniel> you can also try it to see if that's the case :)

[23:04] <AlexDaniel> m: say 20 %% <1 2 5 10 15>[^4].all

[23:04] <camelia> rakudo-moar f78fd7c17: OUTPUT: ¬´all(True, True, True, True)‚ê§¬ª

[23:04] <AlexDaniel> m: say 20 %% <1 2 5 10 15>[^5].all

[23:04] <camelia> rakudo-moar f78fd7c17: OUTPUT: ¬´all(True, True, True, True, False)‚ê§¬ª

[23:04] <AlexDaniel> m: say so 20 %% <1 2 5 10 15>[^4].all

[23:04] <camelia> rakudo-moar f78fd7c17: OUTPUT: ¬´True‚ê§¬ª

[23:04] <AlexDaniel> m: say so 20 %% <1 2 5 10 15>[^5].all

[23:04] <camelia> rakudo-moar f78fd7c17: OUTPUT: ¬´False‚ê§¬ª

[23:09] *** mcmillhj left
[23:09] <Slayerk> Thanks Alex

[23:10] <Slayerk> I'll carry out some testing and report back

[23:11] *** pecastro joined
[23:15] *** pmurias left
[23:16] *** Zoffix joined
[23:17] <Zoffix> m: sub runner (&foo) { my $*bar; foo }; runner { $*bar = 42 }

[23:17] <camelia> rakudo-moar f78fd7c17: ( no output )

[23:17] <Zoffix> hm... my slightly more complex setup gives Dynamic variable $*PROXEE not found for that

[23:19] <Slayerk> "slightly" more complex :P

[23:21] <Zoffix> m: subset Palindrome of Cool where { $_ eq .flip }; say $_ ~~ Palindrome for 1331, "()()", "())(", ÔΩ¢\o//o\ÔΩ£

[23:21] <camelia> rakudo-moar f78fd7c17: OUTPUT: ¬´True‚ê§False‚ê§True‚ê§True‚ê§¬ª

[23:21] <Zoffix> Slayerk: ^ another take on your palindrome thing. You can make a subset and typecheck against it :)

[23:23] <Zoffix> m: https://gist.github.com/zoffixznet/ba48a57bb51ce983b3aa7b9039b164a7

[23:23] <camelia> rakudo-moar f78fd7c17: OUTPUT: ¬´No contextual found with name '$*PROXEE'‚ê§  in block <unit> at <tmp> line 36‚ê§‚ê§¬ª

[23:24] *** Morfent joined
[23:24] <Zoffix> m: sub runner (&foo) { my &meow := { $*bar }; my $*bar; foo; meow }; say runner { $*bar := 42 }

[23:24] <camelia> rakudo-moar f78fd7c17: OUTPUT: ¬´42‚ê§¬ª

[23:25] * Zoffix stares

[23:25] *** eliasr joined
[23:25] <jnthn> It's not in dynamic scope there, is it?

[23:26] <jnthn> my $*PROXEE is declared inside of new

[23:26] <jnthn> new returns the Proxy

[23:26] <jnthn> STORE is called on the assignment

[23:26] <Zoffix> Ahh. Thanks doh

[23:28] *** dayangkun joined
[23:31] *** pentashift joined
[23:32] *** rindolf left
[23:35] <Zoffix> m: https://gist.github.com/zoffixznet/82556098ddc3740a6f25e8ab8770860c

[23:35] <camelia> rakudo-moar f78fd7c17: OUTPUT: ¬´Value is Proxy.new‚ê§¬ª

[23:35] * Zoffix would've thought the proxy would be read

[23:35] *** Ven`` left
[23:35] <Zoffix> fetched the value from I mean

[23:36] <Zoffix> Oh, I messed up

[23:37] <Zoffix> m: https://gist.github.com/zoffixznet/82556098ddc3740a6f25e8ab8770860c

[23:37] <camelia> rakudo-moar f78fd7c17: OUTPUT: ¬´Value is $(1, 2, 3)‚ê§¬ª

[23:37] <Zoffix> hehe. That's not the way to get rid of cont on assignment I guess :P

[23:38] <Zoffix> I don't get where it gets conted tho

[23:40] <Zoffix> Ah, the proxy is the cont /o\

[23:40] <Zoffix> My brilliant idea is falling apart!

[23:42] *** astronavt joined
[23:46] *** troys_ is now known as troys

[23:47] *** astronavt left
[23:47] *** Ven`` joined
[23:54] *** Actualeyes joined
[23:55] *** reportable6 joined
[23:55] *** ChanServ sets mode: +v reportable6

[23:56] *** reportable6 left
[23:56] *** reportable6 joined
[23:59] <Geth> ¬¶ doc: tbrowder++ created pull request #1694: use non-breaking spaces

[23:59] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/1694

