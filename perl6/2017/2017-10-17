[00:01] <raschipi> They name RGB values, not colors. An RGB value will map to a different color on every screen.

[00:03] <HoboWithAShotgun> oh sure, you write me something that deaks with color profiles and i put that in a wrapper :)

[00:03] <HoboWithAShotgun> It's a rgb to some string map, nothing more aimed for 

[00:04] <raschipi> And what will they even map to in CMYK?

[00:04] <raschipi> Well, I'm not saying you shouldn't do that, just that you should name it accordingly.

[00:06] <HoboWithAShotgun> Color::Named::X11, Color::X111Names

[00:06] <HoboWithAShotgun> the former leaves room for expansion, don't ya think

[00:07] <raschipi> Well, are you doing web rgb naming or x11 rgb naming?

[00:08] <HoboWithAShotgun> those are identical except for four colors

[00:08] *** margeas left
[00:08] <raschipi> Right, which means they're different.

[00:08] <HoboWithAShotgun> in which case you say "web green". "green" is X11

[00:08] *** eliasr left
[00:08] <raschipi> OK, so it will be both.

[00:10] *** ryn1x joined
[00:10] *** mr-foobar left
[00:13] <raschipi> Well, I could be pedantic and say it's really RGB::Named::X11, but using "Color" will do. Thanks for being understanding and helping educate people on these issues.

[00:13] *** Cabanossi left
[00:14] <raschipi> You could also have a Color::Named::xkcd https://xkcd.com/color/rgb/

[00:16] *** Cabanossi joined
[00:17] *** hoffentlichja left
[00:17] <HoboWithAShotgun> the things when you have too many colors, say 1000 the module takes ages too load.

[00:18] *** ryn1x left
[00:18] <HoboWithAShotgun> mmh, i could put some csv data in a =finish block and parse that

[00:18] <HoboWithAShotgun> nice find raschipi

[00:20] <MasterDuke> HoboWithAShotgun: if you can put the colors in a constant, it should get precompiled at first use and then be very quick to load after that

[00:22] <HoboWithAShotgun> i need to be able too look them up by name

[00:22] <HoboWithAShotgun> you can't have constant hashes, can you

[00:23] <Zoffix> You can

[00:24] <Zoffix> HoboWithAShotgun: though IIRC there's still a bug where it's really finicky in how you write it

[00:24] <Zoffix> m: constant %foo = :42foo, :70bar; say %foo<foo>

[00:24] <camelia> rakudo-moar d6a9edacf: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Type check failed in constant declaration of %foo; expected Associative but got List (List)‚ê§at <tmp>:1‚ê§------> 3constant %foo = :42foo, :70bar7‚èè5; say %foo<foo>‚ê§¬ª

[00:24] <Zoffix> m: constant %foo = %(:42foo, :70bar); say %foo<foo>

[00:24] <camelia> rakudo-moar d6a9edacf: OUTPUT: ¬´42‚ê§¬ª

[00:25] <HoboWithAShotgun> oh cool. gonna try that out

[00:26] <HoboWithAShotgun> but for now,i'll try and catch a bag'o sleep

[00:38] *** evalable6 left
[00:40] *** darkmorph left
[00:49] *** ryn1x joined
[00:53] *** ryn1x left
[00:55] *** BenGoldberg joined
[00:55] *** mempko left
[01:10] *** mson joined
[01:16] *** ryn1x joined
[01:23] <perlawhirl> How can I get the actual number of, say: 10e-15

[01:23] <perlawhirl> without resorting to printf

[01:23] <perlawhirl> m: say (10e-15).fmt('%.14f')

[01:23] <camelia> rakudo-moar d6a9edacf: OUTPUT: ¬´0.00000000000001‚ê§¬ª

[01:24] <geekosaur> define 'actual number'

[01:24] <perlawhirl> that number in my result

[01:24] <perlawhirl> how to i print 0.00000000000001 given 10e-15

[01:24] *** ggoebel left
[01:26] *** aborazmeh joined
[01:26] *** aborazmeh left
[01:26] *** aborazmeh joined
[01:26] *** yht joined
[01:28] <perlawhirl> perl5 gives the right answer: perl -Mbignum -e 'print 10e-15' # OUTPUT: 0.00000000000001

[01:31] <perlawhirl> Seems like Nums < 1 don't coerce to Rat's properly

[01:32] <perlawhirl> m: say "{(10e15).Rat == 10e15}, {(10e-15).Rat == 10e-15}"

[01:32] <camelia> rakudo-moar d6a9edacf: OUTPUT: ¬´True, False‚ê§¬ª

[01:33] <perlawhirl> I'll rakudobug it

[01:36] *** ggoebel joined
[01:36] <perlawhirl> ok, looked at source... default epsilon is 1.0e-6... so that's as small as you can go by default

[01:37] <perlawhirl> m: say (10e-6).Rat; say (10e-7).Rat

[01:37] <camelia> rakudo-moar d6a9edacf: OUTPUT: ¬´0.00001‚ê§0‚ê§¬ª

[01:37] *** bitrauser_ joined
[01:37] <perlawhirl> but you can pass in a new epsilon

[01:37] <perlawhirl> m: say (12e-15).Rat(1.0e-15)

[01:37] <camelia> rakudo-moar d6a9edacf: OUTPUT: ¬´0.000000000000012‚ê§¬ª

[01:39] <perlawhirl> also, this seems silly.

[01:39] <perlawhirl> m: FatRat.new(1.2)

[01:39] <camelia> rakudo-moar d6a9edacf: OUTPUT: ¬´Type check failed in binding to parameter 'nu'; expected Int but got Rat (1.2)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[01:40] <perlawhirl> is that bug-worthy?

[01:40] *** bitrauser left
[01:44] <MasterDuke> perlawhirl: i'd say so

[01:44] <AlexDaniel`> perlawhirl: I'd say it is

[01:44] <AlexDaniel`> o/

[01:45] <MasterDuke> jinx

[01:46] *** ilbot3 left
[01:51] * AlexDaniel` üï∫

[01:51] <AlexDaniel`> (while ilbot is not here)

[01:51] *** ch3ck3r joined
[01:51] *** deikiyoch joined
[01:51] *** deikiyoch left
[01:55] *** napo1eon left
[01:56] *** squashable6 left
[01:56] *** statisfiable6 left
[01:57] *** squashable6 joined
[01:57] *** evalable6 joined
[01:57] *** ChanServ sets mode: +v evalable6

[01:57] *** statisfiable6 joined
[01:57] *** ChanServ sets mode: +v statisfiable6

[01:57] *** coverable6 left
[01:57] *** coverable6 joined
[01:58] *** ilbot3 joined
[01:58] *** ChanServ sets mode: +v ilbot3

[01:59] *** mcmillhj joined
[02:01] *** finanalyst joined
[02:02] <finanalyst> can someone tell me what is happening to the Ecosystem. The old url seems only to have 48 modules listed.

[02:02] <finanalyst> there's been a progression to cpan, but I haven't seen any announcement about it

[02:04] <raschipi> https://6lang.party/post/CPAN6-Is-Here

[02:06] <raschipi> You can find a list of dists in this page: http://modules.perl6.org/search/?q=

[02:07] <AlexDaniel`> finanalyst: where do you see only 48 modules listed?

[02:09] <finanalyst> The result is using my ModuleCitation software. I am updating it to include the cpan site, but I seem to be getting spurious results.

[02:09] <finanalyst> So, there is a bug somewhere. Trying to understand the underlying dynamic of change to ensure correct behaviour

[02:11] <finanalyst> raschipi: thanks for the link to cpan6. Was there an announcement on the perl6 list? If there was, I didn't catch it.

[02:12] <finanalyst> What is happening to the projects list that was used by panda?

[02:12] <raschipi> I never seen devs sent announcements to a mailing list.

[02:12] <finanalyst> So where do devs find out about a change in the ecosystem?

[02:13] <raschipi> here

[02:13] <finanalyst> sorry but I have other jobs. Can watch this IRC all day every day

[02:13] <finanalyst> email has its uses

[02:13] <raschipi> Or in the weekly

[02:14] <raschipi> https://p6weekly.wordpress.com/

[02:14] <raschipi> 2017.41 had the CPAN6 announcement.

[02:14] *** kerframil left
[02:15] *** kerframil joined
[02:15] *** Herby_ joined
[02:15] <Herby_> \o

[02:15] <raschipi> Oi

[02:17] *** HoboWithAShotgun left
[02:20] <raschipi> finanalyst: Is the weekly good enough, do you think sending it as an e-mail to a list would help? You can sign the RSS to get notified of release.

[02:20] <finanalyst> raschipi: where modules are located seems a fairly big deal. surely there should be a bit more information about it

[02:20] <finanalyst> I thought the idea of having a single projects file was to avoid various locations.

[02:22] <finanalyst> are the modules in cpan6 also listed on modules.perl6.org ?

[02:22] <raschipi> No, it was never meant to be like that. Eventually having CPAN working has always been on the radar. GIthub is unreliable too.

[02:22] <raschipi> Yes, modules.perl6.org lists the modules from cpan too.

[02:22] <finanalyst> What was never meant to be like that? 

[02:23] <raschipi> Having just the ecosystem as a source for modules. It wouldn't scale anyway.]

[02:23] <finanalyst> So the modules in the Ecosystem list are what?

[02:23] <finanalyst> Old modules?

[02:24] <finanalyst> Surely an ecosystem is where the modules are listed, not where they are located

[02:24] <raschipi> Well, it's fine to have modules on both places on just one of them. It's up to developer preference.

[02:24] <raschipi> or just*

[02:24] <raschipi> Just ecosystem is fine, just CPAN too, or both

[02:24] <finanalyst> Yes but where is the single file for all the modules, whether in Ecosystem or cpan?

[02:25] <finanalyst> Or are there two files?

[02:25] <finanalyst> I mean, I want to know where there is a cannonical list of modules and their meta information

[02:26] <finanalyst> I currently have two urls and I don't know which is cannonical

[02:26] <raschipi> zef list

[02:27] <finanalyst> "http://ecosystem-api.p6c.org/projects.json" & "https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan.json"

[02:27] <finanalyst> zef list is 2nd

[02:27] <finanalyst> why are there now two?

[02:27] <raschipi> Because there are two ways to host modules.

[02:28] <raschipi> No, zef supports both the ecosystem and CPAN

[02:28] <finanalyst> That's a mess.

[02:28] <raschipi> It prefers CPAN.

[02:28] <finanalyst> What if another manager creates another way?

[02:29] <raschipi> What about it?

[02:29] *** Cabanossi left
[02:29] *** noganex joined
[02:30] <finanalyst> so then there are three different json lists?

[02:30] <finanalyst> what happens if there is a difference between the lists?

[02:30] <ugexe> dont use a list you dont want

[02:31] <finanalyst> But I am trying to analyse the whole system, not just what I want

[02:31] <ugexe> what happens if your company is using a private namespace that eventually gets puts into the ecosystem?

[02:31] *** Cabanossi joined
[02:31] <finanalyst> Suppose a developer puts a module on one site, and then on another, and differences arise between them

[02:31] <ugexe> how does DNS handle difference in lists?

[02:32] *** noganex_ left
[02:33] <finanalyst> I thought the idea was for there to be a single cannonical list of modules, but for the location where the modules reside to be agnostic

[02:33] <ugexe> the idea is no one ones a namespace

[02:33] <finanalyst> then it is for the manager to decide which location to use.

[02:33] <ugexe> no one owns^

[02:33] <finanalyst> how is this about namespaces?

[02:34] <finanalyst> I am talking about a single cannonical list of modules

[02:34] *** ufobat___ joined
[02:34] <raschipi> there can be multiple modules with the same name, disambiguated by author.

[02:34] <finanalyst> that is a different question

[02:34] <finanalyst> there can be a single list of modules containing all the differentiated ones

[02:35] <ugexe> use only your single list - this does exactly what you want

[02:35] *** AlexDani` joined
[02:35] <raschipi> right, but a single list can have a module listed multiple times, why do you think it would be a problem to have them listed in multiple lists?

[02:35] <ugexe> and doesn't allow for darkpans etc

[02:35] <finanalyst> but there are two lists

[02:35] <finanalyst> so how does a developer coming to perl6 know where all the lists are?

[02:35] *** greppable6 left
[02:36] <ugexe> google?

[02:36] <raschipi> well, the quick way is to look zef's code.

[02:36] <ugexe> public lists will make themselves public. private ones will not.

[02:36] *** mempko joined
[02:36] <finanalyst> the software running modules.perl6.org knows where the lists are, but that is not public knowledge

[02:37] <finanalyst> are you trying to understand my question, or have you made up your mind that you are right?

[02:37] *** ufobat_ left
[02:37] *** jantore left
[02:37] *** dg left
[02:37] <raschipi> just look at the code

[02:37] *** jercos left
[02:37] <finanalyst> oh great. look at the code!!! 

[02:37] *** kshannon left
[02:38] *** jercos joined
[02:38] <raschipi> here: https://github.com/perl6/modules.perl6.org/

[02:38] *** kshannon joined
[02:38] *** jantore joined
[02:39] <finanalyst> do you not see how that is a bad answer. It is non transparent. IF looking at the code was the only way to do things, there would be no tutorials, no documentation, etc

[02:39] *** AlexDaniel` left
[02:39] <ugexe> you want a tutorial on what? how to find the project list?

[02:39] <finanalyst> This idea will lead to chaos. multiple lists, some private, some public, no transparency

[02:39] *** kerframil left
[02:40] <finanalyst> no not a tutorial on project lists, but a single policy about cannonical project lists

[02:40] <finanalyst> or better: a single cannonical list that is the property of the community

[02:40] <finanalyst> So that when a new manager comes in to being, there is not the sort of mess that there is now

[02:41] <raschipi> finanalyst: that can't work.

[02:41] <ugexe> thats pretty naive

[02:41] <finanalyst> just because modules.perl6.org "knows" about cpan6, doesn't mean others do

[02:41] <finanalyst> why is it naive?

[02:41] <finanalyst> Are there multiple perl6 ?

[02:42] <finanalyst> some things need to be coordinated

[02:42] <finanalyst> some do not

[02:42] <ugexe> do you know what darkpan is?

[02:42] <finanalyst> information about the community should be transparent and obvious

[02:42] <finanalyst> darkpan is not the public community

[02:43] <finanalyst> if you want perl6 to be about secrecy and non-transparency, then the community wll dy

[02:43] <finanalyst> die

[02:43] <ugexe> do you know what 1/3rd of the modules being on cpan and 2/3rd not would mean for dependencies?

[02:43] <ugexe> or can you make everyone transition immediately?

[02:43] *** dg joined
[02:44] <finanalyst> again, the location of a module is a different thing to the information about the location

[02:44] <finanalyst> I am not saying that everything should be in cpan6 or git or anywhere

[02:44] <finanalyst> only that modules in the perl6 community should be listed in a single community owned place

[02:45] *** kerframil joined
[02:45] <finanalyst> Or that separate lists are referenced in a single place, like a sort of inheritance tree

[02:45] <ugexe> like everytime you run the zef command and it tells you the list it updates?

[02:45] <finanalyst> but that is internal to zef

[02:46] <finanalyst> I want to be able to access the lists independently

[02:46] <finanalyst> Do I have to look at the zef code all the time to find out where things are?

[02:46] <finanalyst> that is not transparent

[02:46] <ugexe> no like i said, zef LITERALLY gives you the url when it updates the list

[02:47] <finanalyst> I only found out that there were two lists by change

[02:47] <finanalyst> so where does zef get the information from?

[02:47] <ugexe> &

[02:47] <finanalyst> why should zef be in a priviledged postion?

[02:48] <ugexe> its not, you are just assuming things without doing due diligence 

[02:48] <finanalyst> I am trying to do the due diligence

[02:49] <finanalyst> Originally, when project.json was set up, it was supposed to be for all managers, not just panda

[02:49] <finanalyst> now zef comes along and uses another list

[02:49] <ugexe> are you high?

[02:49] <finanalyst> and I discovered about it by chance, because someone asked me to update my ModulesCitation software 

[02:49] <finanalyst> no just quite irritated

[02:50] <ugexe> use panda then

[02:50] <finanalyst> now the data I have been collecting for years is corrupt and I have to fix it

[02:50] <finanalyst> I dont want to use panda

[02:51] <finanalyst> I want clarity about where the modules for perl6 are located

[02:51] <raschipi> finanalyst: You can look at it as a migration happening. At the moment, they are in two places because some migrated and some not.

[02:51] <finanalyst> it seems there has been a change of policy about modules and where information about the modules is located

[02:52] <finanalyst> But that means that any migration process is going to create a mess

[02:52] <finanalyst> surely that is something that should be avoided

[02:52] <raschipi> No, this was ever the intended policy, and it has been this way for decades, way before Perl6 was even a thing.

[02:52] *** greppable6 joined
[02:52] <finanalyst> ???? before perl6 was invented

[02:53] <finanalyst> whose policy if perl6 was not invented?

[02:53] <raschipi> Way before there was language modules installers there were distro installers, and that's how things work there too.

[02:53] <finanalyst> who created the policy?

[02:53] <Herby_> Is there a good tutorial for learning OO programming in Perl 6?

[02:54] <raschipi> experience created this policy.

[02:54] <Herby_> OO for beginners, using perl 6

[02:54] <finanalyst> raschipi: "that is the way things work" is a poor argument for a new way of doing things, and fixing messes

[02:54] *** mcmillhj left
[02:55] <raschipi> it's not a mess, it's working as intended!

[02:55] <finanalyst> raschipi: where is the policy formulated?

[02:55] <finanalyst> who intended it?

[02:56] <raschipi> Herby_: http://greenteapress.com/thinkperl6/thinkperl6.pdf Think Perl6 part II is about OO

[02:56] <ugexe> who get to make the policy?

[02:56] <ugexe> rakudo dev?

[02:56] <raschipi> zef dev

[02:56] <ugexe> $other-perl6-impl dev?

[02:57] <Herby_> raschipi: thanks!

[02:57] *** llfourn joined
[02:59] <finanalyst> ugexe: I was told that "this is the way it was intended", so I ask who "intended"? I get no answer, so how can I find out?

[02:59] <ugexe> you are asking "what is the only blessed version of perl6" except replacing "perl6" with "package list"

[03:00] <finanalyst> I was told project.json contains all the meta information for modules and is manager agnostic. Now I am told cpan6.json is where information is#

[03:00] <finanalyst> no I am asking where is the list of modules that contains all the modules available for perl6

[03:01] <finanalyst> I am told there are two, may be more, and that only special priviledged developers know where they are

[03:01] <finanalyst> if you want the information, you have to look at the code

[03:01] <ugexe> except zef LITERALLY prints them to your terminal every time it updates the package list

[03:01] <finanalyst> that is not transparencey

[03:01] <ugexe> which i've already mentioned

[03:02] <finanalyst> so I have to run zef in order to get the list?

[03:02] <finanalyst> where does zef get it?

[03:02] <ugexe> but you're upset because you were told something wrong or misinterpretted and keep ignoring what hasbeen told to you

[03:02] <finanalyst> we are going around in circles. You are not listening to what I have to say

[03:03] <ugexe> ok

[03:08] *** espadrine left
[03:19] *** aborazmeh left
[03:20] *** Technaton left
[03:25] *** Technaton joined
[03:38] *** dpk left
[03:39] *** raschipi left
[03:39] *** ryn1x left
[03:39] *** Grauwolf left
[03:40] *** Gothmog_ left
[03:40] *** xiaomiao left
[03:40] *** yoleaux left
[03:40] *** mson left
[03:44] *** ryn1x joined
[03:45] *** Cabanossi left
[03:45] *** Cabanossi joined
[03:45] *** dpk joined
[03:46] *** Grauwolf joined
[03:46] *** xiaomiao joined
[03:47] *** Gothmog_ joined
[03:52] *** jeek joined
[04:01] <buggable> New CPAN upload: App-Bob-0.5.0.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/App-Bob-0.5.0.tar.gz

[04:07] *** jercos left
[04:09] *** jercos joined
[04:09] *** AlexDani` left
[04:11] <buggable> New CPAN upload: App-Bob-0.4.0.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/App-Bob-0.4.0.tar.gz

[04:12] *** Herby_ left
[04:15] *** atroxaper joined
[04:20] *** simcop2387 left
[04:21] *** simcop2387 joined
[04:28] *** Cabanossi left
[04:29] *** yht left
[04:30] *** Cabanossi joined
[04:38] *** cdg joined
[04:42] *** cdg left
[04:47] *** mempko left
[04:49] *** xtreak joined
[04:52] *** yht joined
[04:57] *** kerframil left
[04:58] *** wamba joined
[05:06] <tyil> can a module name start with a number?

[05:08] *** finanalyst left
[05:14] *** Cabanossi left
[05:15] *** Cabanossi joined
[05:19] *** lizmat left
[05:23] *** ryn1x left
[05:26] *** BenGoldberg left
[05:27] <moritz> m: class 0ab::cd { }

[05:27] <camelia> rakudo-moar d6a9edacf: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse class definition‚ê§at <tmp>:1‚ê§------> 3class7‚èè5 0ab::cd { }‚ê§    expecting any of:‚ê§        generic role‚ê§¬ª

[05:27] <moritz> look like "no"

[05:33] *** jameslen_ joined
[05:35] *** ggoebel left
[05:35] *** jameslenz left
[05:35] *** yoleaux joined
[05:35] *** ChanServ sets mode: +v yoleaux

[05:35] *** ggoebel joined
[05:37] *** Khisanth left
[05:44] *** domidumont joined
[05:44] *** Mrofnet left
[05:44] *** Cabanossi left
[05:45] *** Cabanossi joined
[05:47] *** lizmat joined
[05:50] *** domidumont left
[05:50] *** ryn1x joined
[05:50] *** Khisanth joined
[05:50] *** domidumont joined
[05:54] *** ryn1x left
[05:58] *** gdonald left
[06:01] <tyil> a sad time to be alive :(

[06:01] <tyil> oh well, cant have it all

[06:01] <tyil> besides, its 8 am, I'm done for tonight

[06:01] <tyil> I think

[06:01] <buggable> New CPAN upload: App-Cpan6-0.6.2.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/App-Cpan6-0.6.2.tar.gz

[06:05] *** gdonald joined
[06:06] <moritz> m: class ::('0ab::cd') { }

[06:06] <camelia> rakudo-moar d6a9edacf: ( no output )

[06:06] <moritz> m: class ::('0ab::cd') { }; say ::('0ab::cd')

[06:06] <camelia> rakudo-moar d6a9edacf: OUTPUT: ¬´(cd)‚ê§¬ª

[06:07] <moritz> tyil: ^^ see above, you *can* use non-identifier names for classes. It's just a hassle

[06:07] <tyil> I think I'll just put the number at the end :p

[06:08] <Geth> ¬¶ ecosystem: b5cb2ec567 | (Moritz Lenz)++ | META.list

[06:08] <Geth> ¬¶ ecosystem: Grammar::ErrorReporting now lives on CPAN

[06:08] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/b5cb2ec567

[06:08] <moritz> tyil: might be easier, yes :-)

[06:13] *** Cabanossi left
[06:15] *** Cabanossi joined
[06:15] *** gdonald left
[06:24] *** ufobat___ is now known as ufobat

[06:28] *** ryn1x joined
[06:30] *** rba left
[06:31] *** domidumont left
[06:32] *** wamba left
[06:36] *** abraxxa joined
[06:42] *** Cabanossi left
[06:45] *** Cabanossi joined
[06:53] *** nadim joined
[06:57] *** aborazmeh joined
[06:57] *** aborazmeh left
[06:57] *** aborazmeh joined
[07:00] *** thunktone joined
[07:00] *** ryn1x left
[07:03] *** xtreak left
[07:03] *** xtreak joined
[07:04] *** domidumont joined
[07:05] *** xtreak left
[07:05] *** xtreak joined
[07:07] *** thunktone left
[07:08] *** patrickz joined
[07:08] *** thunktone joined
[07:10] *** jonas1 joined
[07:15] *** Cabanossi left
[07:15] *** Cabanossi joined
[07:22] *** rindolf joined
[07:33] *** ryn1x joined
[07:38] *** ryn1x left
[07:43] *** thunktone left
[07:43] *** Cabanossi left
[07:45] *** Cabanossi joined
[07:46] *** thunktone joined
[07:48] *** rba joined
[07:49] *** dakkar joined
[07:53] *** pmurias joined
[07:54] *** wamba joined
[07:55] *** domidumont left
[07:56] *** domidumont joined
[08:03] *** lowbro joined
[08:03] *** lowbro left
[08:03] *** lowbro joined
[08:03] *** yht left
[08:04] *** rba_ joined
[08:05] *** rba__ joined
[08:05] *** llfourn left
[08:07] *** rba left
[08:09] *** rba_ left
[08:10] *** ryn1x joined
[08:12] *** Cabanossi left
[08:13] * lizmat clickbaits https://p6weekly.wordpress.com/2017/10/16/2017-42-taking-ticketing-seriously/

[08:15] *** Cabanossi joined
[08:16] *** sproctor joined
[08:22] *** thunktone left
[08:23] *** ggoebel left
[08:24] *** thunktone joined
[08:25] *** rba__ left
[08:26] *** robertle joined
[08:28] *** rba joined
[08:36] <moritz> lizmat++

[08:38] *** cdg joined
[08:40] *** zakharyas joined
[08:40] *** ryn1x left
[08:41] *** xtreak left
[08:43] *** cdg left
[08:44] *** wamba left
[08:50] *** melezhik left
[09:00] *** melezhik joined
[09:10] *** xtreak joined
[09:10] *** konsolebox left
[09:12] *** eliasr joined
[09:13] *** Cabanossi left
[09:15] *** Cabanossi joined
[09:17] *** ryn1x joined
[09:22] *** ryn1x left
[09:22] *** Morfent joined
[09:30] *** khw joined
[09:32] *** xtreak left
[09:33] *** AlexDani` joined
[09:33] *** araujo joined
[09:33] *** araujo left
[09:33] *** araujo joined
[09:34] *** HoboWithAShotgun joined
[09:34] *** AlexDani` is now known as AlexDaniel`

[09:38] *** astj left
[09:39] *** astj joined
[09:46] *** rba left
[09:49] *** timotimo left
[09:56] *** ryn1x joined
[09:57] *** rba joined
[09:58] *** releasable6 left
[09:58] *** releasable6 joined
[10:05] *** darutoko joined
[10:09] *** AlexDaniel` left
[10:09] *** Zoffix left
[10:14] *** rba_ joined
[10:14] *** TEttinger left
[10:17] *** rba left
[10:19] *** nadim left
[10:19] *** nadim joined
[10:26] *** patrickz left
[10:27] *** patrickz joined
[10:29] *** ryn1x left
[10:33] *** xtreak joined
[10:35] *** margeas joined
[10:38] *** xtreak left
[10:43] *** Cabanossi left
[10:45] *** Cabanossi joined
[10:49] *** timo joined
[10:50] *** timo is now known as Guest67747

[10:50] *** Guest67747 is now known as timotimo

[10:57] *** xtreak joined
[11:00] *** jeromelanteri joined
[11:01] *** ChoHag left
[11:07] <HoboWithAShotgun> who is in charge of docs.perl6.org?

[11:08] *** rba joined
[11:08] *** ChoHag joined
[11:08] <lizmat> HoboWithAShotgun: you mean the actual running of the site, or the contents ?

[11:09] <lizmat> if the latter, check out the links at the bottom of each screen:

[11:09] <lizmat> Please report any issues or edit this page. Your contribution is appreciated. 

[11:09] <HoboWithAShotgun> the latter. here ( https://docs.perl6.org/language/modules.html ) it only talks about a README.md file, but apparently ( https://github.com/zoffixznet/perl6-Color/blob/master/README.pod ) you can just use a pod file

[11:11] <HoboWithAShotgun> oh, it's just ya repository

[11:11] <HoboWithAShotgun> allright, i know what to do, thanks

[11:11] *** rba_ left
[11:14] *** Cabanossi left
[11:15] *** Cabanossi joined
[11:19] <lizmat> HoboWithAShotgun++

[11:19] *** zakharyas left
[11:24] *** atroxaper left
[11:31] *** raschipi joined
[11:37] *** ryn1x joined
[11:37] *** cdg joined
[11:42] *** cdg left
[11:44] *** Cabanossi left
[11:44] *** gdonald joined
[11:45] *** Cabanossi joined
[11:51] *** dakkar left
[11:52] *** wamba joined
[11:56] *** wamba left
[12:00] *** wander joined
[12:01] <wander> can I write p6code like `PERL6LIB="..."' to do the same thing as `#!/usr/bin/env perl6 -I .'?

[12:01] *** llfourn joined
[12:02] <raschipi> yes

[12:02] <wander> or say, I want to use a module which is not in perl6path, can i dynamically change perl6path?

[12:02] <wander> how

[12:03] <raschipi> No need to change it, just use the full path.

[12:04] *** ryn1x left
[12:05] *** maettu joined
[12:06] <tadzik> you can also 'use lib'

[12:06] *** ChoHag left
[12:08] <wander> done. thank you

[12:08] *** wamba joined
[12:10] *** xtreak left
[12:11] *** wander left
[12:13] *** xtreak joined
[12:15] *** xtreak left
[12:16] *** thunktone left
[12:19] *** ChoHag joined
[12:19] *** someuser_ joined
[12:21] *** zakharyas joined
[12:23] *** ShalokShalom_ joined
[12:24] *** sergot joined
[12:26] *** ShalokShalom left
[12:34] *** sena_kun joined
[12:38] *** wamba left
[12:38] *** ryn1x joined
[12:38] *** dakkar joined
[12:39] *** aborazmeh left
[12:41] *** rba left
[12:42] *** rba joined
[12:42] *** ryn1x left
[12:46] *** HoboWithAShotgun left
[12:49] *** HoboWithAShotgun joined
[12:54] *** rba_ joined
[12:56] *** rba left
[13:01] *** ryn1x joined
[13:04] *** darkmorph joined
[13:05] *** ryn1x_ joined
[13:05] *** mcmillhj joined
[13:06] *** atroxaper joined
[13:08] *** wamba joined
[13:10] *** HoboWithAShotgun left
[13:12] *** cdg joined
[13:13] *** mson joined
[13:15] *** wamba left
[13:17] *** lowbro left
[13:17] *** wamba joined
[13:18] *** lowbro joined
[13:18] *** lowbro left
[13:18] *** lowbro joined
[13:19] <ryn1x_> So I have found that the "unable to allocate array of x elements" error only happens on windows machines when trying to slurp binary data in the repl . After letting my laptop with macOS run over night it finally printed the Buf. 

[13:21] <ryn1x_> Yesterday Zoffix said there was already a ticket "for allocate array on windows". I am trying to find this ticket to make sure I don't duplicate a bug report. Would it be on github or rt.perl.org?

[13:21] *** wander joined
[13:22] <wander> how about genericity in Perl6

[13:22] <moritz> ryn1x_: if it's a bug in moarvm, it's on github; otherwise RT

[13:22] <moritz> wander: Perl 6 has parameterized roles

[13:23] <ryn1x_> Also, is the fact that it takes somewhere 3<x<10 hrs to slurp a 16MB binary file in the repl on unix something that need to be reported?

[13:24] <moritz> yes

[13:24] <moritz> are you using slurp()?

[13:24] <moritz> or something else?

[13:24] <ryn1x_> slurp()

[13:24] <jnthn> It's not the time to slurp the file, but rather the time to render the Buf containing it, I think?

[13:25] <moritz> ryn1x_: are you using :bin ?

[13:25] <ryn1x_> moritz: yes slurp() using :bin

[13:26] <ryn1x_> jnthn: I think you are right. It slurps instantly in a source file. Just takes incredibly long in the repl because it tries to print the Buf?

[13:27] <raschipi> Does the same happen without the REPL?

[13:28] <ryn1x_> raschipi: no

[13:28] <ryn1x_> I haven't reported a bug before so just trying to figure out what I should do here.

[13:28] <[Coke]> in the reply, you can do something like: "slurp.... ; Nil"

[13:28] <[Coke]> that will avoid the printing.

[13:29] <raschipi> Can you try some other line editor to see if the same thing applies?

[13:29] *** ShalokShalom_ is now known as ShalokShalom

[13:30] *** llfourn left
[13:31] *** dakkar_ joined
[13:31] <ryn1x_> [Coke]: adding "; Nil" works fine

[13:32] <wander> After some searching, I still can't find a good way to write something like "class A<T> { has T $.myVar; }"

[13:33] <jnthn> role A[::T] { has T $.my-var }

[13:34] *** dakkar left
[13:38] <ryn1x_> O. I think I found where my issue may have already been fixed for the next release: https://github.com/MoarVM/MoarVM/issues/686

[13:39] *** wamba1 joined
[13:39] *** wamba left
[13:39] *** Mrofnet joined
[13:40] *** perlpilot left
[13:40] <ryn1x_> So the time to render a Buf is something that should be reported, or is that is an optimization issue that is already known?

[13:41] *** perlpilot joined
[13:42] *** Morfent left
[13:44] *** kerframil joined
[13:45] <wander> jnthn, it solves my problem, thank you.

[13:47] <wander> can `class' performs like that? and is it encouraged to use `role' instead of `class'?

[13:48] *** wamba1 left
[13:51] *** wander left
[13:52] <jnthn> No, because classes are mutable (can have methods added), which doesn't play at all well with genericity

[13:54] *** ryn1x_ left
[13:55] *** ryn1x_ joined
[13:57] *** jeromelanteri left
[13:59] *** wander joined
[14:06] *** ryn1x left
[14:13] *** Cabanossi left
[14:15] *** Cabanossi joined
[14:21] *** Zoffix joined
[14:22] <Zoffix> ryn1x_: the ticket I mentioned was already fixed. Only re-report it if you're having issues on HEAD build on Windows.

[14:22] <Zoffix> ryn1x_: and Buf.gist was already fixed a week ago.

[14:22] <Zoffix> That's what I showed with the eval

[14:22] <Zoffix> c: 2017.07,HEAD Buf.new(1..26_000).gist; say now - INIT now

[14:22] <Geth> ¬¶ doc: W4anD0eR96++ created pull request #1612: Add hook to "Parameterized Roles"

[14:22] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/1612

[14:22] <committable6> Zoffix, ¬¶2017.07: ¬´2.4700380¬ª ¬¶HEAD(8a88d14): ¬´0.0591987¬ª

[14:23] <Zoffix> ^ that's ~26KB; for 16MB it'd take a lot longer (but still be 0.05 on HEAD)

[14:29] <melezhik> Hi! I am having this error "Cannot invoke this object (REPR: Null; VMNull)" what are  possible roots?

[14:29] <yoleaux> 12 Oct 2017 19:36Z <tyil> melezhik: the funtoo  build is going to be more of a pain to fix than I anticipated, Funtoo recently updated its package manager, and the docker images havent accounted for this change yet

[14:30] <ryn1x_> Zoffix: Ok, thanks.

[14:30] <Zoffix> melezhik: some bug in the guts causing a null to be attempted as a callable. What's the code?

[14:30] <Zoffix> m: use nqp; nqp::null()()

[14:30] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´Cannot invoke this object (REPR: Null; VMNull)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:30] *** mcmillhj left
[14:31] <melezhik> I'm afraid stacktrace is quite long ... will try to localize the issue in short example ...

[14:31] *** wander left
[14:33] <tyil> melezhik: you can paste the stacktrace online and send the link here

[14:33] <melezhik> yeah, I am on it, tring to figure out how ...

[14:34] *** lostinfog joined
[14:35] *** ryn1x joined
[14:37] *** mcmillhj joined
[14:39] *** ryn1x_ left
[14:40] *** Zoffix left
[14:41] <melezhik> tyil: zoffix: - https://gist.github.com/melezhik/b30f1bf76a7037a8a166c07956e7a336

[14:43] *** gregf_ left
[14:47] <melezhik> actually simple say "OK"; throws such an error 

[14:52] *** jonas1 left
[14:53] *** cdg left
[14:54] *** abraxxa left
[14:54] <melezhik> could it be the case that "::('Sparrowdo::' ~ $name ~ '::&tasks')" does not get resolved as a function?

[14:55] *** jonas1 joined
[14:55] <melezhik> seems like the very line upon entering the  Sparrowdo::RemoteFile::task results in error

[14:58] *** itaylor57 left
[14:58] *** cdg joined
[14:59] *** itaylor57 joined
[15:01] *** patrickz left
[15:02] <melezhik> zoffix: tyil: I've found the fix

[15:03] *** ChoHag left
[15:04] <melezhik> as Sparrowdo::* modules get required in runtime I should not "use" them , this was delibirately, but I just forgot abot this :))  , remove "use Sparrowdo::RemoteFile" from Sparrowdo::Prometheus defintion (https://gist.github.com/melezhik/b30f1bf76a7037a8a166c07956e7a336/9954169fb440183623c6de92c9d28db131caab75#file-gistfile1-txt-L59)

[15:04] <melezhik> fixes this

[15:05] *** mempko joined
[15:05] <melezhik> other vise it results in double Sparrowdo::RemoteFile load and in then in weird REPR: Null; VMNull error

[15:05] *** ryn1x left
[15:06] <melezhik> so I know how to fix, but I'm not clear what exactly happen and why this result in such an errors :))

[15:06] *** lowbro left
[15:10] <moritz> is "because bug" a satisfactory answer? :-)

[15:11] <melezhik> yes it is

[15:12] <melezhik> :-)

[15:13] *** wamba joined
[15:16] *** kerframil left
[15:17] *** jonas1 left
[15:17] *** itaylor57 left
[15:20] *** itaylor57 joined
[15:31] <buggable> New CPAN upload: Sparrowdo-Prometheus-0.0.1.tar.gz by MELEZHIK https://cpan.metacpan.org/authors/id/M/ME/MELEZHIK/Perl6/Sparrowdo-Prometheus-0.0.1.tar.gz

[15:31] *** napo1eon joined
[15:32] *** ch3ck3r left
[15:33] *** callyalater joined
[15:42] *** pochi joined
[15:46] *** kyan joined
[15:48] <callyalater> my $plus = &[+]; my $n = $plus(2,3); say $n;

[15:48] <callyalater> m: my $plus = &[+]; my $n = $plus(2,3); say $n;

[15:48] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´5‚ê§¬ª

[15:48] *** cpage_ left
[15:49] *** robertle left
[15:49] <callyalater> m: say &[+](2,3);

[15:49] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´5‚ê§¬ª

[15:51] <raschipi> m: say [+] 2,3

[15:51] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´5‚ê§¬ª

[15:51] *** domidumont left
[15:53] <callyalater> m: my $n = &[+](&[+](3,4),5); say $n;

[15:53] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´12‚ê§¬ª

[15:53] <callyalater> m: my $n = &[+](3,4,5); say $n;

[15:53] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´Too many positionals passed; expected 0 to 2 arguments but got 3‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:53] <dakkar_> I've just installed Test::Harness, and p6prove dies with "replace this Array is copy logic"

[15:55] <callyalater> m: my $n = &[+](2); say $n; my $m = &[+](); say $m;

[15:55] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´2‚ê§0‚ê§¬ª

[15:58] <dakkar_> aaah, TAP::Harness is the right one

[15:58] *** mcmillhj left
[16:00] *** abraxxa joined
[16:00] *** abraxxa left
[16:04] <Geth> ¬¶ doc: b8c0cff999 | (Will "Coke" Coleda)++ | doc/Type/Supplier/Preserving.pod6

[16:04] <synopsebot> Link: https://doc.perl6.org/type/Supplier/Preserving

[16:04] <Geth> ¬¶ doc: trailing whitespace

[16:04] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/b8c0cff999

[16:07] <callyalater> m: say "Name"++;

[16:07] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´Cannot resolve caller postfix:<++>(Str); the following candidates‚ê§match the type but require mutable arguments:‚ê§    (Mu:D $a is rw)‚ê§‚ê§The following do not match for other reasons:‚ê§    (Bool:D $a is rw)‚ê§    (Bool:U $a is rw --> Bool::False)‚Ä¶¬ª

[16:08] <callyalater> m: my $s = "Name"++; say $s;

[16:08] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´Cannot resolve caller postfix:<++>(Str); the following candidates‚ê§match the type but require mutable arguments:‚ê§    (Mu:D $a is rw)‚ê§‚ê§The following do not match for other reasons:‚ê§    (Bool:D $a is rw)‚ê§    (Bool:U $a is rw --> Bool::False)‚Ä¶¬ª

[16:08] <geekosaur> m: say succ "Name"

[16:08] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    succ used at line 1‚ê§‚ê§¬ª

[16:08] <geekosaur> whoops

[16:08] <callyalater> m: my $s = "Name"; $s++; say $s;

[16:08] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´Namf‚ê§¬ª

[16:09] <geekosaur> m: say "Name".succ

[16:09] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´Namf‚ê§¬ª

[16:10] *** rba_ left
[16:10] <atroxaper> Hello, #perl6

[16:12] <atroxaper> Is there a right way to alias imported classes, enums etc. I import some enum an want to short its name.

[16:12] *** ryn1x joined
[16:12] *** rba joined
[16:12] <atroxaper> m: enum A::B::C <x y z>; say A::B::C::y; my \C = A::B::C; say C::{'y'};

[16:12] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´y‚ê§y‚ê§¬ª

[16:13] <atroxaper> I just found this way ^. But I do not like {''} form. Is there way to write C::y ?

[16:14] *** Cabanossi left
[16:15] *** Cabanossi joined
[16:15] <Geth> ¬¶ doc: 63a0b0f00d | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/objects.pod6

[16:15] <synopsebot> Link: https://doc.perl6.org/language/objects

[16:15] <Geth> ¬¶ doc: Add hook to "Parameterized Roles"

[16:15] <Geth> ¬¶ doc: 

[16:15] <Geth> ¬¶ doc: I think it is worth to be searchable

[16:15] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/63a0b0f00d

[16:15] <Geth> ¬¶ doc: 2bf7125cce | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/objects.pod6

[16:15] <Geth> ¬¶ doc: Merge pull request #1612 from W4anD0eR96/patch-1

[16:15] <Geth> ¬¶ doc: 

[16:15] <Geth> ¬¶ doc: Add hook to "Parameterized Roles"

[16:15] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/2bf7125cce

[16:15] <callyalater> m: enum A::B::C <x y z>; say A::B::C::y; ::C := A::B::C; say C::y;

[16:15] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§No such symbol 'C'‚ê§at <tmp>:1‚ê§------> 3num A::B::C <x y z>; say A::B::C::y; ::C7‚èè5 := A::B::C; say C::y;‚ê§¬ª

[16:16] <jnthn> atroxaper: constant C = A::B::C; 

[16:16] <jnthn> uh, my constant to keep the scope straight

[16:17] <atroxaper> callyalater: jnthn: Thank you!

[16:18] <callyalater> m: enum A::B::C <x y z>; say A::B::C::y; constant C = A::B::C; say C::y;

[16:18] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´y‚ê§y‚ê§¬ª

[16:19] <callyalater> m: enum A::B::C <x y z>; say A::B::C::y; my constant C = A::B::C; say C::y;

[16:19] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´y‚ê§y‚ê§¬ª

[16:19] <atroxaper> One more question. I noticed that I have to use sigless variables some times. Is there some paper described when I should do so? As I understand, when get values from sub.

[16:20] <callyalater> m: enum A::B::C <x y z>; say A::B::C::y; ::C ::= A::B::C; say C::y;

[16:20] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§No such symbol 'C'‚ê§at <tmp>:1‚ê§------> 3num A::B::C <x y z>; say A::B::C::y; ::C7‚èè5 ::= A::B::C; say C::y;‚ê§¬ª

[16:22] <callyalater> m: enum A::B::C <x y z>; say A::B::C::y; my ::C ::= A::B::C; say C::y;

[16:22] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot use :: as a type name‚ê§at <tmp>:1‚ê§------> 3:B::C <x y z>; say A::B::C::y; my ::C ::7‚èè5= A::B::C; say C::y;‚ê§¬ª

[16:23] <jnthn> atroxaper: Generally, they're used when you don't want to enforce any kind of context, and always want to just reference something "as is".

[16:24] <callyalater> I thought that perl6 supported type synonyms with the `::synonym ::= type;` syntax. Is that not true?

[16:24] <atroxaper> went to read Language->Variables and Language->Containers...

[16:25] <jnthn> callyalater: No; not now, and I can't recall that syntax every being in use. It doesn't really fit for a name to pop up without a declarator

[16:27] <atroxaper> m: my %h; my @a; @a = <1 2>; %h<a> = @a; my @aa = %h<a>; @aa.say;

[16:27] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´[[1 2]]‚ê§¬ª

[16:28] <atroxaper> jnthn: As I understand, in that case I want to reference something 'as is' :)

[16:29] <jnthn> Note that my \foo = ... is actually a bit of a lie, in that it's really a binding, not an assignment

[16:29] * jnthn back later

[16:29] *** setty1 joined
[16:33] *** cpage_ joined
[16:36] *** dakkar_ left
[16:37] <callyalater> Do we know when `::=` will be implemented?

[16:37] <callyalater> m: enum A::B::C <x y z>; say A::B::C::y; ::(C) ::= A::B::C; say C::y;

[16:37] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§"::=" not yet implemented. Sorry.‚ê§at <tmp>:1‚ê§------> 3:B::C <x y z>; say A::B::C::y; ::(C) ::=7‚èè5 A::B::C; say C::y;‚ê§¬ª

[16:43] *** sproctor left
[16:44] *** mr-foobar joined
[16:44] *** robertle joined
[16:45] *** rba left
[16:46] *** ryn1x left
[16:49] *** AlexDaniel` joined
[16:49] *** rgrau joined
[16:53] <jdv79> how does, or can, one edit a class from teh core setting without having to recompile?

[16:54] <callyalater> MONKEY-TYPING?

[16:54] *** mcmillhj joined
[16:55] *** napo1eon left
[16:55] <callyalater> jdv79: Is this what you

[16:55] <callyalater> are looking for? https://docs.perl6.org/language/typesystem#Augmenting_a_class

[16:55] <jdv79> i guess that might work

[16:56] <jdv79> i really just wanted to load the entire class from somewhere else

[16:56] <jdv79> i'll check

[16:58] *** Zoffix joined
[16:58] <Zoffix> m: my $s := Supplier::Preserving.new; $s.emit: 42; my $ss = $s.Supply; react whenever $ss {say "here"; done}; $s.emit: 70; react whenever $ss { say "init" }

[16:59] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´(timeout)here‚ê§¬ª

[16:59] <Zoffix> Is there a way to "unsubscribe" from a Supply so another consumer could take care of the rest of the values?

[16:59] *** atroxaper left
[16:59] <timotimo> i wonder if you can do something with last + LAST

[17:00] <timotimo> so like you'll last out of one whenever, but then inside the LAST (or even DONE?) you add another whenever

[17:00] <Zoffix> (asking mostly out of curiously; came across it while testing my code and have a workaround)

[17:00] <timotimo> probably a nasty idea to "resurrect" the supply block

[17:00] *** mcmillhj left
[17:03] <Zoffix> `last` don't break out from `react`

[17:03] <Zoffix> m: my $s := Supplier::Preserving.new; $s.emit: 42; my $ss = $s.Supply.on-close: {say "closed"}; react whenever $ss {say "here"; last}; say "sending more stuff"; $s.emit: 70; react whenever $ss { say "init" }

[17:03] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´(timeout)here‚ê§¬ª

[17:04] <Zoffix> but does if you sub to `react whenever $ss.tap`

[17:04] <timotimo> right, last only goes out of the whenever

[17:04] *** lostinfog left
[17:04] <timotimo> done would go out of the react/supply

[17:04] <Zoffix> m: my $s := Supplier::Preserving.new; $s.emit: 42; my $ss = $s.Supply.on-close: {say "closed"}; react whenever $ss.tap {say "here"; last}; say "sending more stuff"; $s.emit: 70; react whenever $ss { say "init" }

[17:04] *** lostinfog joined
[17:05] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´(timeout)here‚ê§¬ª

[17:05] <Zoffix> m: my $s := Supplier::Preserving.new; $s.emit: 42; my $ss = $s.Supply.on-close: {say "closed"}; react whenever $ss.tap {say "here"; done}; say "sending more stuff"; $s.emit: 70; react whenever $ss.tap { say "init" }

[17:05] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´here‚ê§sending more stuff‚ê§init‚ê§¬ª

[17:05] <Zoffix> ta-da \o/ :)

[17:05] <timotimo> that's not how you use on-close, though?

[17:05] <timotimo> oh, it is

[17:05] <timotimo> well, almost

[17:05] *** lostinfog left
[17:05] <timotimo> oh, no, you're assigning the result to $ss and using that

[17:05] <timotimo> forget i ever said anything

[17:05] *** ryn1x_ joined
[17:08] <Zoffix> tho seems you gotta continue using `.tap`s. If you try to use just the Supply itself in the second react, it "hangs" and never gets that second emit

[17:09] *** lostinfog joined
[17:09] <timotimo> why are you whenevering $ss.tap? that's weird to me

[17:09] *** lostinfog left
[17:10] <Zoffix> timotimo: 'cause that's what worked.

[17:10] *** lostinfog joined
[17:10] *** lostinfog left
[17:10] <Zoffix> I don't know this stuff. I'm blindly trying things

[17:10] *** mcmillhj joined
[17:11] <timotimo> whenever is there to create a tap if you pass a supply, but you're passing a tap. it's probably treating it as if it were just a single value and fires the inner block once

[17:11] <timotimo> m: my $s := Supplier::Preserving.new; $s.emit: 42; my $ss = $s.Supply.on-close: {say "closed"}; react whenever $ss.tap {say "here"; done}; say "sending more stuff"; $s.emit: 70; react whenever $ss.tap { say "init: $_" }

[17:11] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´here‚ê§sending more stuff‚ê§init: Tap<40767248>‚ê§¬ª

[17:11] <timotimo> look, it runs the block for "init" with the tap object

[17:11] *** cog_ left
[17:12] <Zoffix> oh crap :(

[17:12] <ryn1x_> Trying to learn how to use a perl5 module in perl6. I was able to install it and import with use. How do I change thise line to work in p6: "my $tif = Graphics::TIFF->Open( 'img2.tif', 'r' );"

[17:12] <timotimo> anyway, your use case looks more like what a channel is for

[17:13] <Zoffix> ryn1x_: my $tif = Graphics::TIFF.Open: 'img2.tif', 'r';

[17:14] <Zoffix> ryn1x_: my $tif = Graphics::TIFF.Open('img2.tif', 'r'); # if you like parens

[17:14] <Zoffix> timotimo: ok thanks.

[17:15] *** ggoebel joined
[17:16] *** lostinfog joined
[17:16] *** lostinfog left
[17:16] <timotimo> or maybe a .share could do something for you in some place?

[17:16] *** darkmorph left
[17:17] *** lostinfog joined
[17:17] <ryn1x_> Zoffix: ty. that worked.

[17:21] *** lostinfog left
[17:21] *** lostinfog joined
[17:21] *** lostinfog left
[17:22] *** zakharyas left
[17:24] *** HoboWithAShotgun joined
[17:25] *** ChoHag joined
[17:34] *** imcsk8 left
[17:34] *** zakharyas joined
[17:34] *** ryn1x joined
[17:35] *** imcsk8 joined
[17:37] *** zakharyas left
[17:39] *** ryn1x left
[17:42] *** darkmorph joined
[17:46] *** ChoHag left
[17:47] *** ChoHag joined
[17:48] *** mr-foobar left
[17:48] *** darkmorph left
[17:49] *** Rawriful joined
[17:49] *** mr-foobar joined
[17:52] <[Coke]> m: my$a=100000000;my$b=1000000;my$c;for ^$b {$c++ if $a.rand.Int gcd $a.rand.Int == 1}; say sqrt(6/($c/$b));

[17:52] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´3.14205035935387‚ê§¬ª

[17:53] <[Coke]> \o/

[17:53] <[Coke]> maths are weird.

[17:53] <Zoffix> \o/

[17:54] <[Coke]> m: my$a=100000000000;my$b=10000000;my$c;for ^$b {$c++ if $a.rand.Int gcd $a.rand.Int == 1}; say sqrt(6/($c/$b));

[17:54] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´(timeout)¬ª

[17:55] *** cog_ joined
[17:55] <[Coke]> awwww. too much maths

[17:57] <Zoffix> m: say e**(i√óœÄ)

[17:57] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´-1+1.22464679914735e-16i‚ê§¬ª

[17:57] *** imcsk8 left
[17:57] *** imcsk8 joined
[17:57] <Zoffix> m: say e**(i√óœÄ) ‚âÖ ‚àí1

[17:57] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´True‚ê§¬ª

[17:57] <Zoffix> \o/

[17:58] <Zoffix> I mean...

[17:58] <Zoffix> m: say ùëí**(i√óœÄ) ‚âÖ ‚àí1

[17:58] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´True‚ê§¬ª

[17:58] <Zoffix> :) Unicode FTW

[17:58] <raschipi> m: say ùëí**(2√ói√óœÄ) ‚âÖ 1

[17:58] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´True‚ê§¬ª

[17:59] *** enheh joined
[17:59] <Zoffix> m: say log ‚àí1

[17:59] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´NaN‚ê§¬ª

[18:03] <Zoffix> m: say i√óœÄ == log ‚àí1+0i

[18:03] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´True‚ê§¬ª

[18:05] <raschipi> say ùëí**($_√ói√óœÄ) ‚âÖ - ($_%2√ó2  -1) for 1..10

[18:05] <evalable6> raschipi, rakudo-moar 8a88d1490: OUTPUT: ¬´True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§False‚ê§False¬ª

[18:06] <raschipi> Floats don't work very well.

[18:06] <timotimo> nums are double by default at least

[18:06] <Zoffix> m: my \term:<‚ô•> = 42; say ùëí**(i√ó‚ô•) == cos(‚ô•) + i√ósin ‚ô•

[18:06] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´True‚ê§¬ª

[18:06] <raschipi> still floating point math

[18:07] *** Zoffix left
[18:07] <timotimo> aye

[18:08] <enheh> Hello, everyone!  I'd like to specify in a regex the complement of a character class, for example /<-[ ',' ]>/, but where the actual character is specified with a variable.  /<-[$var]>/ doesn't work, and neither does /<-[<{$var}>]>/.  Is there a way to do this?

[18:09] *** ryn1x joined
[18:10] *** setty1 left
[18:11] <ugexe> m: my $var = ","; say "ab,cd" ~~ m/<- [<$var>] >/

[18:11] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´ÔΩ¢bÔΩ£‚ê§¬ª

[18:15] *** imcsk8 left
[18:15] *** imcsk8 joined
[18:18] <enheh> Thanks, ugexe!

[18:18] *** Merfont joined
[18:19] <perlpilot> enheh: note that <-[ ',' ]> probably isn't the character class you think it is.  :)

[18:20] <enheh> Why is that?

[18:21] <perlpilot> m: "foo" ~~ /<-[ 'o' ]>/;

[18:21] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´Potential difficulties:‚ê§    Quotes are not metacharacters in character classes‚ê§    at <tmp>:1‚ê§    ------> 3"foo" ~~ /<-7‚èè5[ 'o' ]>/;‚ê§    Repeated character (') unexpectedly found in character class‚ê§    at <tmp>:1‚ê§    ------> 3"foo" ‚Ä¶¬ª

[18:22] *** Mrofnet left
[18:22] <mst> enheh: -[ , ] as ugexe said.

[18:22] <enheh> Okay.  :)

[18:26] <callyalater> m: say ":D";

[18:26] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´:D‚ê§¬ª

[18:30] *** ChoHag left
[18:34] *** darutoko left
[18:36] *** cdg left
[18:41] *** ryn1x left
[18:41] <AlexDaniel`> e: my@f=1.FatRat,*√ó++$‚Ä¶*; say (1.FatRat / ((2√ó(1.FatRat,{($_+2/$_)/2}‚Ä¶‚àû)[11]).FatRat/9801 √ó (@f[4*$_] √ó (1103 + 26390√ó$_) / (@f[$_]‚Å¥√ó396**(4*$_)) for ^130).sum)).substr: 0, 1000

[18:41] <evalable6> AlexDaniel`, rakudo-moar 8a88d1490: OUTPUT: ¬´3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348‚Ä¶¬ª

[18:41] <evalable6> AlexDaniel`, Full output: https://gist.github.com/9100992306d9af1055f640e36ca4a60d

[18:42] <AlexDaniel`> one thousand including 3 and the dot

[18:42] *** ChoHag joined
[18:42] *** mcmillhj left
[18:42] <AlexDaniel`> that's really slow tho

[18:42] *** imcsk8 left
[18:43] *** imcsk8 joined
[18:43] <AlexDaniel`> I don't really remember what all that magic is though

[18:44] <AlexDaniel`> but the basic idea is that you get some FatRats in there so that they bite other rats

[18:46] <AlexDaniel`> and you can increase [11] and ^130 if you need more precision

[18:48] <raschipi> 64 digits is enought to calculate the lenght of the universe within an atom's radius precision, that ought to be enough

[18:50] <AlexDaniel`> well, if all you need is 64 digits then just hardcode it :)

[18:52] <AlexDaniel`> e: my@f=1.FatRat,*√ó++$‚Ä¶*; my $FatPi = (1.FatRat / ((2√ó(1.FatRat,{($_+2/$_)/2}‚Ä¶‚àû)[11]).FatRat/9801 √ó (@f[4*$_] √ó (1103 + 26390√ó$_) / (@f[$_]‚Å¥√ó396**(4*$_)) for ^130).sum)); say $FatPi.substr(0, $FatPi.index(‚Äò999999‚Äô)), ‚Äò and so on‚Äô

[18:52] <evalable6> AlexDaniel`, rakudo-moar 8a88d1490: OUTPUT: ¬´3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348‚Ä¶¬ª

[18:52] <evalable6> AlexDaniel`, Full output: https://gist.github.com/adca14bf5e40fc9c5f6f91a7cb21f3e7

[18:52] <AlexDaniel`> that didn't work at all

[18:55] <AlexDaniel`> e: my@f=1.FatRat,*√ó++$‚Ä¶*; my $FatPi = (1.FatRat / ((2√ó(1.FatRat,{($_+2/$_)/2}‚Ä¶‚àû)[11]).FatRat/9801 √ó (@f[4*$_] √ó (1103 + 26390√ó$_) / (@f[$_]‚Å¥√ó396**(4*$_)) for ^130).sum)); say $FatPi.substr(0, $FatPi.index(‚Äò999999‚Äô)+6), ‚Äò and so on‚Äô

[18:55] <evalable6> AlexDaniel`, rakudo-moar 8a88d1490: OUTPUT: ¬´3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348‚Ä¶¬ª

[18:55] <evalable6> AlexDaniel`, Full output: https://gist.github.com/b3f625c298b4d4374270044c2afc7b72

[18:58] *** imcsk8 left
[18:59] *** imcsk8 joined
[19:00] *** rgrau left
[19:09] *** domidumont joined
[19:09] *** Util joined
[19:13] *** domidumont left
[19:14] *** zakharyas joined
[19:14] *** mempko left
[19:15] *** ryn1x joined
[19:20] *** ryn1x left
[19:21] <HoboWithAShotgun> .tell zoffix https://github.com/zoffixznet/perl6-Color/pull/8

[19:21] <yoleaux> HoboWithAShotgun: I'll pass your message to zoffix.

[19:22] <HoboWithAShotgun> .tell HoboWithAShotgun you suck

[19:22] <yoleaux> HoboWithAShotgun: Talking to yourself is the first sign of madness.

[19:22] <HoboWithAShotgun> ha!

[19:23] <HoboWithAShotgun> nine out of ten voices in my head say i am completely normal.

[19:23] *** darkmorph joined
[19:24] *** ryn1x joined
[19:25] <HoboWithAShotgun> you guys are a really viscid audience, does no one want to ask about the tenth?

[19:25] *** mcmillhj joined
[19:27] *** patrickz joined
[19:28] *** Cabanossi left
[19:29] *** ryn1x left
[19:30] *** Cabanossi joined
[19:31] *** mcmillhj left
[19:31] <geekosaur> 'we get stranger stuff than you in our breakfast cereal'

[19:38] <ufobat> is there a key in META6.json for suggested but not required dependencies?

[19:39] *** mcmillhj joined
[19:39] <ufobat> i want to suggest IO::Socket::Async::SSL, but it's not required to have it.

[19:41] *** raschipi_ joined
[19:42] *** mson left
[19:43] <ufobat> i cant have [ 'IO::Socket::Async', 'IO::Socket::Async::SSL'] in it, since the first one is part of the core, right?

[19:44] *** raschipi left
[19:44] <timotimo> it's not only part of the core, it's not even something you can "use"

[19:44] <timotimo> m: use IO::Socket::Async

[19:44] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´===SORRY!===‚ê§IO::Socket::Async is a builtin type, not an external module‚ê§¬ª

[19:44] <callyalater> .tell callyalater Talking to yourself is the first sign of madness.

[19:44] <yoleaux> callyalater: Talking to yourself is the first sign of madness.

[19:44] <HoboWithAShotgun> magic!

[19:45] <ufobat> aye

[19:45] <ufobat> there is no suggests : [] ... :(

[19:46] *** mson joined
[19:46] <geekosaur> I think only apt does 'suggests'?

[19:47] <timotimo> you know ... if we have a suggests section of a module, installing something that is suggested by an already-installed module could totally trigger a re-build of that

[19:47] <moritz> "suggests" always felt weird to me

[19:48] <timotimo> gentoo has "use flags"

[19:48] <timotimo> that's mildly similar

[19:48] <moritz> either it's a dependency, or not, or one needed for only a part of the functionality

[19:48] <[Coke]> IMO, if it's optional, it belongs in the docs.

[19:49] <kent\n> optional dependencies are nice to be visibly forwards declared somewhere that automated tools can expose.

[19:49] *** mr-foobar left
[19:49] <[Coke]> no one is going to be installing optional "deps" off zef, I think.

[19:49] <geekosaur> "suggests" is the sort of thing that makes no sense to experienced techies but is very helpful to ordinary users

[19:49] <kent\n> not entirely true...

[19:50] <kent\n> say a package like Apache::Test

[19:50] <moritz> IMHO bundles are a much better way to help ordinary users, IMHO

[19:50] <kent\n> some of the modules bundled with Apache::Test require mod_perl, but most of them don't.

[19:50] <kent\n> and you can use it just fine without mod_perl 

[19:50] <ufobat> i am just wondering because the meta file for cpan at perl5 does have suggestions and recommendations in it, dosn't it?

[19:51] <kent\n> but if you're using those modules, you'll also want to be using mod_perl 

[19:52] <ufobat> moritz, if suggtests feels strange would you rather not state in a meta file that there are features of $something that only work if those requirements are met. (but in gerneral they are no requirements. )

[19:53] <kent\n> the difference between "suggests" and "recommends" in usage is "recommends" should be installed by all, and only omitted "if you know what you're doing"

[19:53] <kent\n> whereas suggests should not be installed by default.

[19:53] *** mr-foobar joined
[19:53] <kent\n> but "recommends" are not  "required" either, they're avoidable, if you're clever.

[19:55] *** ryn1x joined
[19:55] <ufobat> aye

[19:56] <ufobat> so in my case, a HTTP Server module should have SSL support nowadays. 

[19:57] <sjn> o/

[19:57] <sjn> 'sup #perl6

[19:59] * kent\n has often  mapped "recommends" to USE="-minimal" in gentoo, but its a bit frowned on because the flag can change the dependency graph without strictly needed rebuilds, but changing the flag implies a rebuild

[20:01] <kent\n> and optional dependencies in the graph really complicate the package mangers solver, and stability-level consistency requirements. :/

[20:01] <kent\n> read: if you can find a good way of avoiding optional deps ... \o/

[20:06] * timotimo remembers fun times with revdep-rebuild

[20:07] *** Mrofnet joined
[20:07] <tadzik> and that thingy that updates perl modules

[20:09] *** raschipi_ left
[20:09] *** raschipi joined
[20:10] *** itaipu joined
[20:10] <raschipi> The Debian way of doing 'use flags' is called 'build profiles' and it will change the way the package is compiled.

[20:10] *** Merfont left
[20:11] *** cdg joined
[20:11] <raschipi> recommends and suggests are for noobs and people that just don't care.

[20:11] *** itaipu left
[20:13] *** cdg_ joined
[20:13] *** Cabanossi left
[20:15] *** Cabanossi joined
[20:16] *** cdg left
[20:19] <HoboWithAShotgun> uh, nice. RPM already has an updated WPA2 package and it is marked wih two big red exlamation marks. coul be important, eh?

[20:21] <buggable> New CPAN upload: App-Cpan6-0.6.16.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/App-Cpan6-0.6.16.tar.gz

[20:21] <geekosaur> maybe a little...

[20:22] <raschipi> m: '/sys/class/net/'.IO.dir>>.add('/carrier').grep(*.slurp.chomp)>>.dirname>>.IO>>.basename.grep({$_ ne 'lo'}).map: *.say

[20:22] <camelia> rakudo-moar 8a88d1490: OUTPUT: ¬´eth0‚ê§¬ª

[20:22] *** someuser_ left
[20:24] *** kerframil joined
[20:25] *** mempko joined
[20:28] *** ryn1x left
[20:31] *** ryn1x joined
[20:33] *** wamba left
[20:33] *** dogbert2 left
[20:36] *** callyalater left
[20:37] *** bitrauser_ left
[20:39] *** bitrauser joined
[20:39] *** cpage_ left
[20:42] <tyil> there's no way ta make JSON::Fast output the json in a sorted (by keys) fashion, would this be possible to do at all in perl6?

[20:42] *** Cabanossi left
[20:43] *** ryn1x_ left
[20:45] *** Cabanossi joined
[20:48] *** matiaslina joined
[20:57] *** raschipi left
[20:58] <El_Che> so, am I correct stating that rakudo is not relocatable?

[20:58] *** zakharyas left
[20:59] *** rba joined
[21:00] *** rba left
[21:05] *** ryn1x left
[21:05] <HoboWithAShotgun> lets look at the source

[21:07] <geekosaur> not very relocatable. because CURLIs aren't currently

[21:08] <El_Che> related to this? https://github.com/rakudo/rakudo/commit/e8fd55bbe6bcdcd10f5c4ca1888ef0ed42dd5f07

[21:08] <HoboWithAShotgun> tyil: No, but it is an easy patch

[21:08] <HoboWithAShotgun> https://modules.perl6.org/dist/JSON::Fast:cpan:TIMOTIMO/lib/JSON/Fast.pm line 124

[21:08] <tyil> oh, I could just throw a sort inbetween there

[21:09] <tyil> add in an arg in to-json to enable it

[21:09] <HoboWithAShotgun> yes, add a :$sort-keys argument, the sort and then file a pulll request

[21:10] <HoboWithAShotgun> i'll walk you trough the process if you need/want

[21:11] *** TEttinger joined
[21:12] *** mcmillhj left
[21:14] *** cpage_ joined
[21:14] *** Cabanossi left
[21:15] *** Cabanossi joined
[21:18] *** sena_kun left
[21:20] *** vivus-ignis joined
[21:20] *** eriq joined
[21:21] <HoboWithAShotgun> heh, i'm hacking on an oldish p5 script of mine and promptly got the sigils wrong

[21:26] *** vivus-ignis left
[21:27] <tyil> HoboWithAShotgun: thanks, I think I have it now, I'll put up a PR

[21:27] <tyil> https://github.com/timo/json_fast/pull/32/files if you're interested

[21:31] *** matiasli1a joined
[21:32] *** pmurias left
[21:34] *** matiaslina left
[21:35] *** rba joined
[21:36] *** ryn1x joined
[21:37] *** patrickz left
[21:38] *** rba left
[21:39] *** kyan left
[21:40] *** ryn1x left
[21:41] *** ryn1x joined
[21:42] *** som joined
[21:42] <timotimo> tyil: i've thought about it a few times already

[21:43] <timotimo> it could mix in a role when parsing to store what order keys arrived in and recognize the same role in to-json (and the user could use the role, too, to get their own sorting going on)

[21:43] <timotimo> then you're not limited to sorting

[21:46] *** ryn1x left
[21:47] *** ryn1x joined
[21:51] <sergot> .seen masak

[21:51] <yoleaux> 1 Apr 2017 04:35Z <MasterDuke> sergot: fyi, i just created a PR in https://github.com/sergot/openssl that gave me a measurable speedup using HTTP::UserAgent to get an HTTPS url

[21:51] <yoleaux> I saw masak 15 Oct 2017 12:39Z in #perl6-dev: <masak> besides me*

[21:51] *** ryn1x left
[21:52] <HoboWithAShotgun> dude, tyil. you forgot a say in there. that's like a surgeon forgetting the glove!

[21:52] <HoboWithAShotgun> you just virtually killed someone ;-)

[21:53] <timotimo> and my test suite doesn't cover nothing being output ...

[21:56] *** som left
[22:00] <tyil> HoboWithAShotgun: fixed

[22:00] <timotimo> i think i'll want to refactor JSON::Fast to be based on a class and things like pretty yes/no and sort lists yes/no would become attributes

[22:01] <tyil> might be nice

[22:01] <timotimo> performance-wise at least

[22:01] <timotimo> but it'd also be neat if users could override parts of to-json

[22:01] *** cpage_ left
[22:01] <tyil> this works good enough for me now :'D

[22:01] <timotimo> and i can imagine even allowing the user to pass factories for arrays and hashes

[22:03] <HoboWithAShotgun> whatever makes you happy :)

[22:04] <HoboWithAShotgun> you could expect the to be jsoned object doing a role that has a to-json method

[22:04] <HoboWithAShotgun> like .gist but for json

[22:05] <timotimo> ideally something that Just Works with pretty/indent

[22:05] *** cpage_ joined
[22:06] *** darkmorph left
[22:07] <HoboWithAShotgun> does your module support classes? or just plain datastructures? when i put a dattime in, do i get one back?

[22:07] <timotimo> since a few weeks it explicitly supports DateTime

[22:08] *** ryn1x joined
[22:08] <HoboWithAShotgun> of course! but you know what i mean

[22:08] <timotimo> i seemed to remember having once used .Capture for that, but that's bogus, as it'll have a hash and a list part

[22:09] <timotimo> also i finally need to do proper systematic benchmarking for this

[22:15] *** ryn1x left
[22:31] *** evalable6 left
[22:31] *** evalable6 joined
[22:32] *** Zoffix joined
[22:32] <Zoffix> tyil: do you remember what the CPAN bug was? Seems it's now properly showing just the latest version: http://modules.perl6.org/dist/App::Bob:cpan:TYIL

[22:32] <Zoffix> And I don't see any new commits going in

[22:33] <tyil> Zoffix: the issue was with me uploading newer versions and the old still existing, giving an ambiguity page

[22:33] <Zoffix> tyil: how do I trigger that?

[22:34] *** mempko left
[22:34] <Zoffix> Looks like there are several versions of Bob: https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/

[22:34] <tyil> have one of your modules available via cpan and indexed on modules.perl6.org, push a new version of that module to cpan, then wait for the issue to happen

[22:34] <tyil> but it seems to have been fixed, yes

[22:35] <tyil> (that module was renamed to App::Cpan6 btw, the App::Bob dists are pending removal on cpan)

[22:35] <Zoffix> can't repro dam

[22:35] * Zoffix reads the sauce

[22:38] *** ryn1x joined
[22:41] *** rindolf left
[22:42] <Geth> ¬¶ modules.perl6.org: 5864596d6d | (Zoffix Znet)++ | 2 files

[22:42] <Geth> ¬¶ modules.perl6.org: Add --no-rsync option

[22:42] <Geth> ¬¶ modules.perl6.org: 

[22:42] <Geth> ¬¶ modules.perl6.org: To allow debugging CPAN dists

[22:42] <Geth> ¬¶ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/5864596d6d

[22:42] *** ryn1x left
[22:44] <Geth> ¬¶ modules.perl6.org: 96b5b508f4 | (Zoffix Znet)++ | bin/build-project-list.pl

[22:44] <Geth> ¬¶ modules.perl6.org: Document all the new --no-* options

[22:44] <Geth> ¬¶ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/96b5b508f4

[22:50] <tyil> timotimo: do you want to merge my PR or would you rather refactor it all at once?

[22:50] *** mr-foobar left
[22:50] <tyil> if it gets merged I can commit a change in App::Cpan6 to make use of the new flag

[22:51] *** robertle left
[22:57] *** ZofBot left
[22:58] *** ZofBot joined
[22:58] *** ChanServ sets mode: +v ZofBot

[22:58] <Zoffix> Ah, finally reproed. The problem exists only during the time when the new version is found and processed and before the build run finishes (at the end, it tosses all the "old" dists).

[22:58] <Zoffix> ZofBot: let's call it a feature and be done with it \o/

[22:58] <ZofBot> Zoffix, [Aside] Ay, good leave have you; for you will have leave Till youth take leave and leave you to the crutch

[22:59] <tyil> .hug ZofBot 

[22:59] * huggable hugs ZofBot 

[22:59] <tyil> .hug Zoffix 

[22:59] * huggable hugs Zoffix 

[22:59] <tyil> thanks for looking into it :>

[23:01] *** nadim left
[23:02] *** mson left
[23:05] *** cdg joined
[23:07] <Zoffix> tyil: I'm gonna reschedule the fix until next week. The bug is not super severe (it lasts for 1hr when new version is uploaded) and I wanted to squeeze some stuff into upcoming rakudo release.

[23:08] <Zoffix> |4d fix modules cpan bug

[23:08] <ZofBot> Zoffix, Will remind you on 2017-10-21T19:08:10.999610-04:00 about fix modules cpan bug

[23:09] <tyil> its not a high prio issue for me either, just something I noticed that seemed wrong

[23:09] *** cdg_ left
[23:10] *** cdg left
[23:10] *** cpage_ left
[23:12] *** kyan joined
[23:13] *** Cabanossi left
[23:13] *** Zoffix left
[23:13] *** ryn1x joined
[23:15] *** Cabanossi joined
[23:21] *** BenGoldberg joined
[23:22] *** HoboWithAShotgun left
[23:22] *** HoboWithAShotgun joined
[23:23] <HoboWithAShotgun> i am doing require ::($provider); and i get a "Cannot find method 'EXISTS-KEY': no method cache and no .^find_method"

[23:24] <HoboWithAShotgun> the vaiable contains the correct string, the module in question is a "module" that contains nothing but an our constant

[23:26] <HoboWithAShotgun> i also get strange warning when i use the module instead of require-ing

[23:26] <HoboWithAShotgun> err, vice versa

[23:29] <geekosaur> show the actual source to the module?

[23:31] <HoboWithAShotgun> right now it's just an empty method

[23:37] <HoboWithAShotgun> ah, i am doing that in an EXPORT routine

[23:37] <HoboWithAShotgun> that's most likely the problem

[23:37] <HoboWithAShotgun> since i can do perl6 -e 'require ::("thesamemodule")' without problems

[23:42] *** evalable6 left
[23:42] *** Cabanossi left
[23:43] *** evalable6 joined
[23:45] *** Cabanossi joined
[23:46] *** ryn1x left
[23:46] *** raschipi joined
[23:50] *** Rawriful left
[23:53] *** eriq left
[23:56] *** darkmorph joined
