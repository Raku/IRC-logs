[00:15] <Geth> ¬¶ ecosystem: e465360b53 | (David Warring)++ | META.list

[00:15] <Geth> ¬¶ ecosystem: add Base64-Native

[00:15] <Geth> ¬¶ ecosystem: 

[00:15] <Geth> ¬¶ ecosystem: https://github.com/p6-pdf/Base64-Native-p6

[00:15] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/e465360b53

[00:27] *** BenGoldberg joined
[00:35] *** lookatme joined
[00:35] <lookatme> morning .o/

[00:45] *** rmallah joined
[00:46] *** rmallah left
[00:58] *** mcmillhj joined
[00:58] *** mcmillhj_ joined
[01:13] *** rmallah joined
[01:14] *** rmallah left
[01:15] *** BenGoldberg left
[01:16] *** astj joined
[01:17] *** mcmillhj_ left
[01:17] *** mcmillhj left
[01:17] *** aborazmeh joined
[01:17] *** aborazmeh left
[01:17] *** aborazmeh joined
[01:25] *** movl left
[01:26] *** movl joined
[01:32] *** BenGoldberg joined
[01:36] *** holyghost joined
[01:36] *** sammers left
[01:41] *** holyghost left
[01:44] *** mcmillhj joined
[01:44] *** mcmillhj_ joined
[01:45] *** ilbot3 left
[01:48] *** mcmillhj_ left
[01:48] *** mcmillhj left
[01:54] *** ilbot3 joined
[01:54] *** ChanServ sets mode: +v ilbot3

[02:00] *** mcmillhj joined
[02:04] *** mcmillhj left
[02:04] *** noganex joined
[02:07] *** noganex_ left
[02:15] *** mcmillhj joined
[02:16] *** Coleoid left
[02:19] *** mcmillhj left
[02:22] *** movl left
[02:22] *** movl joined
[02:32] *** mephinet left
[02:34] *** pilne left
[02:50] *** raiph joined
[02:50] *** Dee22 left
[02:50] *** BenGoldberg left
[02:51] *** zapwai left
[02:54] *** Cabanossi left
[02:54] <samcv> u: { my $a = .uniprop("Indic_Syllabic_Category"); my $b = .uniprop("Indic_Syllabic_Category"); any($a, $b) eq "Virama" }

[02:55] <unicodable6> samcv, ¬´timed out after 30 seconds¬ª ¬´exit signal = SIGHUP (1)¬ª

[02:56] *** Cabanossi joined
[02:57] <raiph> http://stackoverflow.com/questions/44101411/is-that-a-perl-6-hash-or-block/44102980#44102980

[02:58] <raiph> ^^^ Confirming, correcting, or commenting of my answer would be awesome as would suggestions re updates to p6doc

[03:01] *** rmallah joined
[03:03] *** rmallah left
[03:04] *** mephinet joined
[03:23] *** Cabanossi left
[03:25] *** Cabanossi joined
[03:37] <samcv> oh my heh

[03:38] <samcv> i have been bitten by this raiph :P

[03:54] *** aborazmeh left
[04:03] <raiph> samcv: I've just saved edits to improve my answer

[04:03] <samcv> also id just recommend using %(   ) instead

[04:03] <samcv> and you will never have problems

[04:04] <samcv> m: my $v = %('this', 'that'); say %v; say %v.WHAT

[04:04] <camelia> rakudo-moar 1c16bf: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '%v' is not declared. Did you mean '$v'?‚ê§at <tmp>:1‚ê§------> 3my $v = %('this', 'that'); say 7‚èè5%v; say %v.WHAT‚ê§¬ª

[04:04] <samcv> m: my $v = %('this', 'that'); say $v; say $v.WHAT

[04:04] <camelia> rakudo-moar 1c16bf: OUTPUT: ¬´{this => that}‚ê§(Hash)‚ê§¬ª

[04:04] <samcv> that is the preferred way to do it. hmm do i even have a stack overflow

[04:06] <samcv> i'll make one

[04:07] *** khw left
[04:07] *** Cabanossi left
[04:10] *** Cabanossi joined
[04:11] <samcv> ok i posted an answer

[04:17] <raiph> samcv: cool. :) (I'm pretty sure the poster will complain that that's a workaround but you've got an upvote from me :)

[04:17] <samcv> well it's not a workaround. it's. the official way heh

[04:18] <samcv> so you don't have to try and remember how it's going to parse

[04:18] <samcv> which is really just a way to be more compatible with perl 5 in the syntax

[04:20] <samcv> though your info about how it does decide was very interesting

[04:23] <samcv> when you overload things like brackets it's natural you'll have times where it does not make a hash. and that's happened a few times to me

[04:23] <samcv> also I think the brackets look a bit ugly as well :-)

[04:27] <samcv> raiph, reading the docs page i would disagree here: https://docs.perl6.org/type/Hash with '3) simply avoid the issue altogether by explicitly providing a name for the topic variable:' since i think the issue is not using %() and making the compiler have to guess

[04:28] *** dominix joined
[04:28] <samcv> but i always use %( ) personally when it's anything other than => like if i include variables or other such things

[04:30] <dominix> camelia: help

[04:30] <camelia> dominix: Usage: <(nqp-jvm|debug-cat|rakudo-moar|nqp-moarvm|p5-to-p6|prof-m|star-m|rakudo-jvm|nqp-js|nqp-mvm|rakudo|r-j|rm|nqp-m|star|j|r-m|p6|sm|rj|m|p56|nom|r-jvm|nqp-q|nqp|perl6|r)(?^::\s(?!OUTPUT)) $perl6_program>

[04:32] *** shadowpaste left
[04:35] <ugexe> https://gist.github.com/ugexe/4e4fa970df086ec789dada1164609633 # cpan enabled by default now in zef

[04:37] *** AndyDee joined
[04:37] *** shadowpaste joined
[04:38] <ugexe> you can also upload your perl6 distributions to cpan through pause, and the source-url will be automatically set/changed. You can just download a tagged github release .tar.gz and use that (although you probably want to rename the file)

[04:38] <ugexe> also App::Mi6 can upload your dist to cpan through pause

[04:39] <raiph> samcv: thx :)

[04:39] <samcv> nice ugexe 

[04:42] *** skids left
[04:43] *** rmallah joined
[04:50] *** skids joined
[04:53] *** Cabanossi left
[04:54] *** curan joined
[04:54] *** rmallah left
[04:54] *** rmallah joined
[04:54] *** Cabanossi joined
[04:56] *** rmallah left
[05:00] *** nadim joined
[05:02] *** AlexDaniel left
[05:02] *** wamba joined
[05:15] *** Actualeyes left
[05:17] *** TEttinger left
[05:27] *** TEttinger joined
[05:32] *** dominix left
[05:35] *** lowbro joined
[05:35] *** lowbro left
[05:35] *** lowbro joined
[05:37] *** Actualeyes joined
[05:39] *** domidumont joined
[05:40] *** pecastro left
[05:44] *** domidumont left
[05:45] *** domidumont joined
[05:45] *** espadrine joined
[05:53] *** Cabanossi left
[05:53] <skaji> ugexe: cool! So do you recommend uploading perl6 modules to CPAN? or is it still an experiment feature?

[05:54] *** Cabanossi joined
[05:56] *** pecastro joined
[05:58] *** mr-foobar joined
[05:59] <raiph> goodnight #perl6 (another SO... http://stackoverflow.com/questions/44103799/why-does-perl-6s-map-give-me-a-value-in-one-case-and-a-list-in-another)

[06:01] *** skids left
[06:02] <wamba> m: say <1/2O>.^name; say <1/20>.^name;

[06:02] <camelia> rakudo-moar 1c16bf: OUTPUT: ¬´Str‚ê§Rat‚ê§¬ª

[06:03] *** CIAvash joined
[06:06] <lookatme> m: say <<1>>.WHAT

[06:06] <camelia> rakudo-moar 1c16bf: OUTPUT: ¬´(IntStr)‚ê§¬ª

[06:06] <lookatme> m: say <1>.WHAT

[06:06] <camelia> rakudo-moar 1c16bf: OUTPUT: ¬´(IntStr)‚ê§¬ª

[06:07] <lookatme> m: my $n = 1; say <<$n>>.WHAT; say <$n>.WHAT;

[06:07] <camelia> rakudo-moar 1c16bf: OUTPUT: ¬´(Slip)‚ê§(Str)‚ê§¬ª

[06:09] <lookatme> m: my $m = Map.new: '1' => :1st, '2' => :2nd; say $m.<1>.WHAT; say $m.<<1>>.WHAT; my $n = 1; say $m.<$n>.WHAT; say $m.<<$n>>.WHAT;

[06:09] <camelia> rakudo-moar 1c16bf: OUTPUT: ¬´(Pair)‚ê§(Pair)‚ê§Nil‚ê§(List)‚ê§¬ª

[06:21] <lookatme>  m: my $m = Map.new: '1' => :1st, '2' => :2nd; say $m.<1>.WHAT; say $m{'<1>'}.WHAT; my $n = 1; say $m.{'$n'}.WHAT; say $m.{'<$n>'}.WHAT;

[06:21] <camelia> rakudo-moar 1c16bf: OUTPUT: ¬´(Pair)‚ê§Nil‚ê§Nil‚ê§Nil‚ê§¬ª

[06:21] *** domidumont left
[06:22] *** domidumont joined
[06:23] *** vimal2012 joined
[06:34] *** vimal2012 left
[06:36] <samcv> made a post about Unicode property names regex stuff https://cry.nu/perl6/unicode-property-names/

[06:37] <samcv> if anybody wants to check it out

[06:37] *** Cabanossi left
[06:39] *** Cabanossi joined
[06:41] *** darutoko joined
[06:45] <samcv> ugh my ordered list got messed up

[06:47] <samcv> always so tricky with so many markdown formats out there

[06:47] <samcv> and crossout using ~~foo~~ didn't work until i added a redcarpet extension

[06:47] *** nadim left
[06:47] <moritz> isn't it usually -foo- ?

[06:47] <moritz> maybe I'm confusing that with confluence/jira markup

[06:48] <moritz> you're right, too many markups

[06:53] <lookatme> so :) why not using asciidoc

[06:56] <lookatme> A better markdown ~ :)

[06:57] <samcv> i didn't have that extension enabled

[06:57] <samcv> also my numbeled list starts from 1 instead of 0 now

[06:57] <samcv> and the other half of the list that started from 4 now starts from 1 :O

[07:00] <samcv> well‚Ä¶ I just made numbered bullet points. * 0. foo

[07:01] *** astj_ joined
[07:01] *** astj left
[07:03] *** xtreak joined
[07:04] *** parv joined
[07:07] *** trnh joined
[07:08] <nine> skaji++ # I just love Mi6

[07:12] <nine> skaji: CPAN is now recommended :)

[07:13] *** mr-foobar left
[07:14] <moritz> does modules.perl6.org list p6 modules uploaded to CPAN?

[07:16] *** nadim joined
[07:22] <lookatme> So I should make a copy of my source code, and use mi6 create a new distribution, and upload to CPAN ?

[07:23] <nine> lookatme: why a copy?

[07:23] <lookatme> Oh, my source code under a github repo.

[07:33] *** pecastro left
[07:35] *** domidumont left
[07:35] *** domidumont joined
[07:37] *** zakharyas joined
[07:39] *** domidumont left
[07:40] *** mr-foobar joined
[07:42] *** g4 joined
[07:45] *** pecastro joined
[07:46] *** raiph left
[07:46] *** zacts joined
[07:46] *** raiph joined
[07:47] *** domidumont joined
[07:47] *** rindolf joined
[07:49] *** dogbert17 left
[07:52] *** pecastro left
[07:53] *** Cabanossi left
[07:54] *** pmurias joined
[07:54] *** Cabanossi joined
[07:55] *** CacoS joined
[07:59] *** pecastro joined
[08:02] *** jonas2 joined
[08:03] *** hoelzro left
[08:06] *** CIAvash left
[08:14] *** raiph left
[08:15] *** dakkar joined
[08:15] *** raiph joined
[08:15] <skaji> nine: I see!

[08:15] <mienaikage> The Perl 6 track on exercism.io is now active üôÇ

[08:16] <lookatme> Has someone upload module to CPAN ?

[08:16] <skaji> Yes, I have.

[08:17] <lookatme> mienaikage++ great!!!

[08:17] <lookatme> skaji, what's the module name ?

[08:17] <skaji> App::Mi6

[08:19] <skaji> If you just want to upload tarballs to CPAN, you can use https://github.com/skaji/perl6-CPAN-Uploader-Tiny directly.

[08:19] <lookatme> Can I find your module in cpan.org ? or meta-cpan.org ?

[08:20] *** Zoffix joined
[08:20] *** wamba left
[08:20] <Zoffix> moritz: no, it doesn't yet

[08:22] <Zoffix> .ask tadzik What's happening with /problems? Can you please merge it to master? We need to add CPAN listings and if your changes are unmerged there will be a bunch of merge conflicts.

[08:22] <yoleaux> Zoffix: I'll pass your message to tadzik.

[08:22] <tadzik> Zoffix: oh, it was waiting for code review and comments :)

[08:22] <yoleaux> 08:22Z <Zoffix> tadzik: What's happening with /problems? Can you please merge it to master? We need to add CPAN listings and if your changes are unmerged there will be a bunch of merge conflicts.

[08:23] *** Actualeyes left
[08:24] <Zoffix> tadzik: just merge

[08:24] <tadzik> a'ight

[08:24] <Zoffix> :)

[08:25] <Geth> ¬¶ modules.perl6.org/master: 11 commits pushed by (Tadeusz ‚Äútadzik‚Äù So≈õnierz)++

[08:25] <Geth> ¬¶ modules.perl6.org/master: review: https://github.com/perl6/modules.perl6.org/compare/f0dbaed8e9...c5f92dcb11

[08:25] <Zoffix> sweet

[08:25] *** Actualeyes joined
[08:25] <Zoffix> tadzik++

[08:26] <skaji> I think ugexe++ creates an index for CPAN https://github.com/ugexe/Perl6-ecosystems , and we can find perl6 modules in CPAN from it.

[08:27] *** robertle joined
[08:28] <Zoffix> huggable: cpan json

[08:28] <huggable> Zoffix, Perl 6 modules on CPAN: https://github.com/ugexe/Perl6-ecosystems/blob/master/cpan.json

[08:28] <Zoffix> Yeah that's the repo

[08:30] *** parv left
[08:44] *** raiph left
[08:45] *** raiph joined
[08:45] *** domidumont left
[08:48] *** bjz joined
[08:49] <lookatme> oh, so I can't find them in cpan.org or others, just only in Perl 6 ecosystem

[08:49] *** bjz left
[08:53] <skaji> you can find some perl6 modules in CPAN, see, for example, http://www.cpan.org/authors/id/S/SK/SKAJI/Perl6/

[08:53] *** Cabanossi left
[08:54] *** espadrine left
[08:54] <skaji> but PAUSE does not create an index for perl6 distribution right now.

[08:55] *** Cabanossi joined
[08:56] <Zoffix> raiph: answered: http://stackoverflow.com/a/44108637/2410502

[08:56] *** bjz joined
[08:56] *** TEttinger left
[09:01] * Zoffix is done rebuilding DB for new schema on modules.perl6.org

[09:01] <Zoffix> w00t: http://modules.perl6.org/todo

[09:01] <Zoffix> tadzik++

[09:02] <tadzik> yay :)

[09:02] <tadzik> can be filtered too: http://modules.perl6.org/todo/tadzik

[09:02] <Zoffix> oh, sweet!

[09:03] <Zoffix> "dist has no MANIFEST file"? Wtf is that?

[09:03] <Zoffix> Just a list of files the dist supposed to contain?

[09:04] <sjn> that pretty sweet! :D

[09:04] <Zoffix> hm, there's a question-mark-icon but hovering/clicking it does nothing

[09:04] <sjn> that's *

[09:05] *** wamba joined
[09:06] <sjn> isn't the MANIFEST part of the META6.json file these days? </confused>

[09:07] <Geth> ¬¶ modules.perl6.org: 4d815d45de | (Zoffix Znet)++ (committed using GitHub Web editor) | templates/todo/index.html.ep

[09:07] <Geth> ¬¶ modules.perl6.org: Remove question mark icon

[09:07] <Geth> ¬¶ modules.perl6.org: 

[09:07] <Geth> ¬¶ modules.perl6.org: Seems to be a no-op ATM. Remove to avoid user confusion.

[09:07] <Geth> ¬¶ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/4d815d45de

[09:08] *** raiph left
[09:08] <sjn> ah, no it's not. it just has a provides field

[09:09] <Zoffix> tadzik: what does it use for /todo/author? Doesn't show me anything for /zoffixznet and for /Zoffix%20Znet it shows me just a partial list of my modules (and I know none of them have a MANIFEST): http://modules.perl6.org/todo/Zoffix%20Znet

[09:09] <sjn> Zoffix: the question mark would be cool if it would link to an explanation (perhaps on the same page?)

[09:09] <Zoffix> buggable: author zoffixznet

[09:09] <buggable> Zoffix, Found 44 dists for zoffixznet. See https://temp.perl6.party/buggable/543982321962741495444178.html

[09:09] <Zoffix> sjn: yup, but it doesn't ATM, so I removed it

[09:09] <sjn> mm

[09:12] <tadzik> Zoffix: it stores your author from META6, uses the github url if that's not present

[09:12] <tadzik> and then does a LIKE

[09:12] <tadzik> Zoffix: yeah, hovering is NYI :/

[09:12] <tadzik> sjn: that was the idea, yes

[09:13] <lookatme> skaji, oh, I see

[09:14] <Zoffix> huh, weird. When I first looked at /todo/Zoffix* it had all my modules 'cause i screenshoted it: https://twitter.com/zoffix/status/866580683388571648

[09:15] <Zoffix> but if I visit the same URL again, it shows me only some dists: http://i.imgur.com/qIr8TtH.png

[09:17] <Zoffix> eh, problem for another day.

[09:17] *** Zoffix left
[09:17] <Geth> ¬¶ doc: f8a90ed2e2 | (Zoffix Znet)++ | doc/Type/Pair.pod6

[09:17] <Geth> ¬¶ doc: Document Pair.new

[09:17] <Geth> ¬¶ doc: 

[09:17] <Geth> ¬¶ doc: Addresses user's confusion about possible accepted args in:

[09:17] <Geth> ¬¶ doc: RT#131339: https://rt.perl.org/Ticket/Display.html?id=131339

[09:17] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/f8a90ed2e2

[09:17] <Geth> ¬¶ doc: a6f1cbfbef | (Zoffix Znet)++ | doc/Type/IO/Handle.pod6

[09:17] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131339

[09:18] <Geth> ¬¶ doc: [io grant] Fix up IO::Handle.print

[09:18] <Geth> ¬¶ doc: 

[09:18] <Geth> ¬¶ doc: - Fix signature

[09:18] <Geth> ¬¶ doc: - Mention the .Str coercion

[09:18] <Geth> ¬¶ doc: - Make example's style consistent with others

[09:18] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/a6f1cbfbef

[09:20] *** margeas joined
[09:22] <tyil> "Below you can find a list of the 56 known external Perl 6 modules."

[09:22] <tyil> I could've sworn there were more than that

[09:26] <lookatme> Zoffix, So, about that questions on stackoverflow. As I know, Map not have a operator '<< >>'. What the parser treat '$map<<$n>>' as ? 

[09:26] <lookatme> .tell Zoffix, So, about that questions on stackoverflow. As I know, Map not have a operator '<< >>'. What the parser treat '$map<<$n>>' as ? 

[09:26] <yoleaux> lookatme: What kind of a name is "Zoffix,"?!

[09:26] <lookatme> .tell Zoffix So, about that questions on stackoverflow. As I know, Map not have a operator '<< >>'. What the parser treat '$map<<$n>>' as ? 

[09:26] <yoleaux> lookatme: I'll pass your message to Zoffix.

[09:27] *** Zoffix joined
[09:27] <Zoffix> .

[09:27] <yoleaux> 09:26Z <lookatme> Zoffix: So, about that questions on stackoverflow. As I know, Map not have a operator '<< >>'. What the parser treat '$map<<$n>>' as ?

[09:28] <Zoffix> lookatme: it's a regular quoting construct probably documented somewhere on: https://docs.perl6.org/language/quoting

[09:28] <Zoffix> m: my $n = 'a b c'; dd ¬´$n foo bar $n¬ª; # don't need a map for it

[09:28] <camelia> rakudo-moar 601cdb: OUTPUT: ¬´("a", "b", "c", "foo", "bar", "a", "b", "c")‚ê§¬ª

[09:29] <lookatme> m: my $x = 10; << 1 2 3 "a" $x>>.WHAT.say

[09:29] <camelia> rakudo-moar 601cdb: OUTPUT: ¬´(List)‚ê§¬ª

[09:29] <Zoffix> https://docs.perl6.org/language/quoting#Word_quoting_with_interpolation_and_quote_protection:_qqww

[09:30] <lookatme> But it's a list. Call A List on a Map .?

[09:30] <timotimo> it gives you one value for each key in the list

[09:30] <timotimo> just like with positionals and [ ] and a list

[09:31] <timotimo> m: say (5..*)[1, 2, 10, 20, 100, 200]

[09:31] <camelia> rakudo-moar 601cdb: OUTPUT: ¬´(6 7 15 25 105 205)‚ê§¬ª

[09:31] <timotimo> m: my %letters = "a".."z" Z=> 1..*; say %letters<<a b f g x y z>>

[09:31] <camelia> rakudo-moar 601cdb: OUTPUT: ¬´(1 2 6 7 24 25 26)‚ê§¬ª

[09:31] <timotimo> lookatme: ^

[09:31] <lookatme> So, '<>' works similar with '<<>>', as you said, timotimo 

[09:32] <timotimo> yup, <> doesn't do any interpolation at all, so if you want to have $foo as a key you have to use either { } or << >>

[09:32] <lookatme> timotimo, Em, I know that, I just wonder '<>' is not a operator, how it works..

[09:33] <Zoffix> lookatme: no, not call a List; it's just a shortcut for $map{¬´‚Ä¶¬ª} just like $map<‚Ä¶> is a shortcut for $map{<‚Ä¶>}

[09:33] <lookatme> Oh, my mistake '<>' is a operator , '<<>>

[09:33] <lookatme> ' not

[09:34] <Zoffix> lookatme: it's parsed to call &postfix:<{ }> with the list from ¬´¬ª

[09:35] <Zoffix> perl6 --target=ast -e '%()¬´foo¬ª'

[09:35] <lookatme> Em, Zoffix that's a little beyond understand. Is there any document about that ?

[09:35] <Zoffix> Look at last few lines at the end

[09:35] <Zoffix> No idea

[09:36] <Zoffix> and from postcircumfix:<{ }> it goes to https://github.com/rakudo/rakudo/blob/601cdb6/src/core/hash_slice.pm#L51

[09:36] <Zoffix> and then you're just all about method names

[09:36] <Zoffix> s/'&postfix:<{ }>'/&postcircumfix:<{ }>/

[09:37] <Zoffix> lookatme: here: https://docs.perl6.org/language/subscripts

[09:37] * Zoffix goes back to hacking on IO

[09:37] *** Zoffix left
[09:44] * lookatme off work now

[09:44] *** lookatme left
[09:45] *** wamba left
[09:49] *** xtreak left
[09:52] *** Cabanossi left
[09:55] *** Cabanossi joined
[10:07] *** Ven joined
[10:08] *** Ven is now known as Guest38993

[10:09] *** Guest38993 left
[10:11] <Geth> ¬¶ doc: 8f538308c9 | (Zoffix Znet)++ | doc/Type/IO/Handle.pod6

[10:11] <Geth> ¬¶ doc: [io grant] Fix up IO::Handle.print-nl

[10:11] <Geth> ¬¶ doc: 

[10:11] <Geth> ¬¶ doc: - The handle can be not for a file

[10:11] <Geth> ¬¶ doc: - Remove all the prose about .nl-out's defaults and .opens.

[10:11] <Geth> ¬¶ doc:     That's not the only way to set that attribute.

[10:11] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/8f538308c9

[10:14] *** wamba joined
[10:18] *** wamba left
[10:27] *** melezhik left
[10:30] *** astj joined
[10:30] *** astj_ left
[10:38] *** Cabanossi left
[10:40] *** Cabanossi joined
[10:47] <tyil> searching online on some tracker for "perl", and I find "Selected Books of Christian Apocrypha, Christian Mystics and Christian occult (88 books)"

[10:48] <tyil> did you guys not tell me you are trying to get me into the occult?

[10:49] *** rindolf left
[10:52] *** ddv_ joined
[10:54] * moritz can neither confirm nor deny anything

[10:54] <lizmat> tyil: why do you think we're blessing objects ?

[11:00] <tyil> I should've gotten out when I had the chance

[11:00] *** domidumont joined
[11:15] <nine> tyil: too late

[11:21] *** KDr2 left
[11:26] *** wamba joined
[11:30] *** bjz_ joined
[11:32] <pmurias> precompilation of Test.pm6 now works with rakudo.js :)

[11:32] *** bjz left
[11:32] <lizmat> whee!

[11:32] <lizmat> pmurias++ 

[11:33] <tadzik> wooo:)

[11:36] <moritz> wohoo!

[11:36] <moritz> pmurias++

[11:36] <moritz> can it also load the precompiled Test.pm6?

[11:37] <masak> woo \o/

[11:37] <yoleaux> 21 May 2017 13:13Z <lizmat> masak: judging from https://en.wikipedia.org/wiki/Multiset , it looks like we could have Baggy semantics for (<) and (<=), do you agree ?

[11:37] <yoleaux> 21 May 2017 13:16Z <lizmat> masak: aka, "say <a b>.Bag (<) <a b b>.Bag" would be True rather than False (as it is now)

[11:37] <masak> lizmat: interesting question. I will follow up on the link and get back to you.

[11:38] *** Cabanossi left
[11:39] <masak> lizmat: ok, that Wp page definition makes a lot of sense to me.

[11:39] <masak> lizmat: guessing the old/current semantics could be restored like this...

[11:39] <masak> m: say <a b>.Bag.Set (<) <a b b>.Bag.Set

[11:39] <camelia> rakudo-moar b43db6: OUTPUT: ¬´False‚ê§¬ª

[11:39] <masak> (if you see what I mean) :)

[11:40] <masak> I mean, I guess (without looking at Rakudo source) that that's what the current (<) does for Bags

[11:40] <masak> so, all in all, yes. I am in favor.

[11:40] *** Cabanossi joined
[11:40] <lizmat> masak: ok, will take it on in the refactor of (<) (<=) (>) and (>=)

[11:40] <Geth> ¬¶ doc: dc50211e5f | (Zoffix Znet)++ | doc/Type/IO.pod6

[11:40] <Geth> ¬¶ doc: [io grant] Fix &prompt

[11:40] <Geth> ¬¶ doc: 

[11:40] <Geth> ¬¶ doc: - It worked as described only by default; it uses $*OUT/$*IN handles

[11:40] <Geth> ¬¶ doc:     and the chomping will only happen if the $*IN.chomp is set

[11:40] <Geth> ¬¶ doc: - Document arg-less form:

[11:40] <Geth> ¬¶ doc:     - Rakudo impl: https://github.com/rakudo/rakudo/commit/0646d3fa46

[11:40] <Geth> ¬¶ doc:     - Tests: https://github.com/perl6/roast/commit/125fe18489

[11:40] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/dc50211e5f

[11:40] <masak> only (small) downside I can see is that (<) used to be exclusively for Sets

[11:41] <lizmat> yeah, I'm not sure of any spectest fallout just yet

[11:41] <masak> kind of analogously to "+ is for Numeric", "~ is for Stringy", etc

[11:41] <masak> but maybe that can be handwaved away by saying that a Bag is a fairly Set-like thing, I dunno

[11:41] <masak> TimToady, what do you think? :)

[11:41] <lizmat> but many other set operators have behaviours for Set/Bag/Mix

[11:42] <masak> lizmat: ok, so there are precedents already? that makes it more OK, I think

[11:42] <lizmat> feels to me that (<) and friends do not, is an oversight

[11:42] <lizmat> m: say <a b>.Bag (^) <a b b>.Bag  # an example

[11:42] <camelia> rakudo-moar b43db6: OUTPUT: ¬´bag(b)‚ê§¬ª

[11:43] <lizmat> m: say <a b>.Bag.Set (^) <a b b>.Bag.Set  # with Setty semantics

[11:43] <camelia> rakudo-moar b43db6: OUTPUT: ¬´set()‚ê§¬ª

[11:43] <masak> lizmat: also, I'm put to mind of a SO thread I saw (by mjd) which asked "why aren't Bags more well-known/used?" and concluded "uuuh, Bag subsethood can mean like three different things..."

[11:43] <masak> lizmat: I can dig up the URL for that for you

[11:43] <masak> might be interesting background reading :)

[11:45] <masak> lizmat: https://math.stackexchange.com/questions/152223/why-does-mathematical-convention-deal-so-ineptly-with-multisets

[11:45] <pmurias> masak: yes, otherwise what would be the point of precompiling it? ;)

[11:46] * masak tosses that reply on to moritz, with whom he is oft confused :)

[11:47] <moritz> we're, like, nearly indistinguishable! :-)

[11:53] *** astj_ joined
[11:53] *** astj left
[11:54] <moritz> to answer pmurias' question: it might be possible that the precompilation works, but something inside the loading of precompiled modules might still be broken

[11:55] <moritz> though of course I'm happy that that doesn't seem the case :-)

[11:57] *** mingdao left
[11:59] *** Actualeyes left
[12:01] *** trnh left
[12:04] *** Actualeyes joined
[12:08] *** trnh joined
[12:08] *** trnh left
[12:08] *** trnh joined
[12:10] *** pmurias left
[12:11] *** raschipi joined
[12:16] *** araraloren joined
[12:19] <araraloren> o/

[12:19] <raschipi> heyo

[12:22] <araraloren> ^_^

[12:26] *** Actualeyes left
[12:37] *** Cabanossi left
[12:38] *** AlexDaniel joined
[12:40] *** Cabanossi joined
[12:48] <ddv_> does someone know agout a page page where the userbase of perl6 is tracked?

[12:50] *** Actualeyes joined
[12:56] <perlpilot> ddv_: I don't think there is such a page.

[12:56] *** yqt joined
[12:58] *** sufrostico joined
[13:00] *** wamba left
[13:00] *** ddv_ left
[13:00] *** mcmillhj_ joined
[13:00] *** mcmillhj joined
[13:06] <moritz> anybody can anonymously download all the Perl 6 stuff. No tracking possible (or maybe even desirable)

[13:09] <raschipi> There's also many sources controlled by other people, like distros.

[13:10] *** aborazmeh joined
[13:10] *** aborazmeh left
[13:10] *** aborazmeh joined
[13:11] <cono> is there a possibility to fork in Perl6? The only way I found is NativeCall

[13:14] <jnthn> That's the only way; also note that fork and threads mix really badly.

[13:15] *** Actualeyes left
[13:16] <raschipi> cono: You probably want to use the high level interfaces or be really careful, because libuv changes all of the file descriptors underneath for async I/O.

[13:16] <jnthn> That also

[13:17] <jnthn> Not to mention that even if you don't use threads in your program, that doesn't mean a VM won't have some for things like GC and optimization

[13:17] <samcv> i <3 set and bags.

[13:17] <cono> I really don't like the idea of running test in .sh or .bat, wanted somehting like fork...

[13:18] <cono> test should be self-sufficient imo

[13:18] <raschipi> What about https://docs.perl6.org/type/Proc::Async ?

[13:18] <jnthn> Oh, you're talking about the IO-Socket-INET.t?

[13:18] <cono> y

[13:18] <jnthn> Oh

[13:19] <jnthn> You can use threads for that

[13:19] <cono> is this a good start? https://docs.perl6.org/language/concurrency

[13:19] <jnthn> Just run the server in a different one from the client

[13:19] <jnthn> Yeah

[13:19] <cono> got it. thanks!

[13:20] <jnthn> socket-recv-vs-read.t also does something similar

[13:20] <cono> will look

[13:22] *** pmurias joined
[13:23] <pmurias> should Configure.pl complain when both --backends and --with-nqp are passed? (as --with-nqp overides --backend)

[13:24] *** aborazmeh left
[13:25] <raschipi> samcv: You of all the people I would think would use emoji instead of emoticons. Old School, I guess.

[13:25] <samcv> heh

[13:26] <samcv> i mean i do have ‚ô• on my compose key. but not that many emoji in general. that's more a symbol. I have üëç and üåü though

[13:27] <raschipi> üëç

[13:27] <cono> how to write last 2 via compose key?

[13:27] <cono> ‚ô• this one I know :)

[13:27] <samcv> have a custom compose file

[13:27] <samcv> this is mine https://github.com/samcv/dot-files/blob/master/.XCompose

[13:27] <cono> nice, thanks :)

[13:29] <samcv> press multi key twice then T + U + S

[13:29] <samcv> i have the emoji behind two compose key presses so that when I add them i don't conflict with things that already exist. which can happen

[13:30] <cono> üëç

[13:31] *** kaare__ left
[13:31] *** kaare__ joined
[13:34] *** wamba joined
[13:35] <AlexDaniel> raschipi: somehow ‚Äú:)‚Äù looks better

[13:35] <AlexDaniel> none of this colorful smudgy rubbish

[13:35] <raschipi> u: ‚Äú

[13:35] <unicodable6> raschipi, U+201C LEFT DOUBLE QUOTATION MARK [Pi] (‚Äú)

[13:36] <raschipi> Depends on intent I guess, I'm not saying any form of communication is invalid.

[13:39] *** g4 left
[13:44] *** Cabanossi left
[13:44] <samcv> raschipi, was wondering your opinion on this https://github.com/softmoth/perl6-pod-to-markdown/pull/9

[13:44] <pmurias> is passing the location of the rakudo-js runner "executable" and the location of the runtime library in env variables sort of sane?

[13:45] *** Cabanossi joined
[13:45] <samcv> =begin code :lang<perl6> # is a sane way to designate the code is perl6 and should be highlighted as such?

[13:46] <pmurias> RAKUDO_JS_EXECUTABLE_PATH="/path/to/perl6-js" RAKUDO_JS_RUNTIME="/path/" node rakudo.js "$@"

[13:50] *** bjz_ left
[13:51] *** cdg joined
[13:51] <pmurias> samcv: one possible issue with :lang<perl6> is the question which version of Perl 6 is the  snippet supposed to be in

[13:52] <samcv> how would you improve the designation?

[13:52] <raschipi> Not all markdown implementations get ``` for "code"

[13:52] <samcv> yes i know

[13:52] <raschipi> Is it supposed to be for a specific slang?

[13:53] <samcv> well a lot of them do allow ``` for code

[13:53] <samcv> i mean it could always be hidden behind an option i suppose

[13:53] <raschipi> Depends on what you're targetting. 

[13:53] *** Actualeyes joined
[13:54] <pmurias> samcv: I don't have a solution

[13:54] <raschipi> The project is targetting, I mean.

[13:54] <samcv> i think a lot of people use it for github so i think it'd be useful to support fenced things which allow specifying a syntax highlighting language

[13:55] <samcv> could have a :no-fenced-codeblocks option or something for those who don't want it

[13:56] <raschipi> If someone asks for it, then it might make sense to add an option.

[13:57] *** skids joined
[13:58] *** rindolf joined
[13:58] <raschipi> Is the names of the languages specified anywhere or is it implementation specific?

[14:00] <samcv> well there's standard lists of markdown tags

[14:00] <mst> samcv: maybe :lang<perl6.c> ?

[14:00] <raschipi> In my view this is specifing the exact output, it's not semantic, so I would use :fence<perl6> to get a fence block

[14:00] <samcv> well pod doesn't have fenced blocks

[14:00] <samcv> oh you mean to the pod2markdown engine?

[14:01] <samcv> i mean that could make it assume that all the code blocks should be assumed perl6 even if they don't have config :lang<perl6> set

[14:01] <raschipi> Oh, the tool only reads pod6, right

[14:02] <raschipi> What's the ":lang" for, then?

[14:02] <raschipi> I was actually looking at this one: https://github.com/softmoth/perl6-pod-to-markdown/pull/9/commits/bf3a2e9bf3c23d47b25c19f40790c4409e639ecb

[14:03] <samcv> raschipi, it goes in the pod

[14:04] <samcv> <samcv> well there's standard lists of markdown tags

[14:04] <samcv> oops

[14:04] <samcv> =begin code :lang<perl6

[14:04] <samcv> foo

[14:04] <samcv> =end code

[14:04] <samcv> when you create your pod code blocks

[14:04] *** cdg left
[14:04] <samcv> anything you put after key/value pairs becomes part of the 'config' for that pod block

[14:04] *** cdg joined
[14:05] <samcv> it seems mostly natural for language to be a config for a code block. though it doesn't have any mention in the spec. you can have any config you want for your uses /renderers. it's meant to be extensible

[14:06] <raschipi> The classic way would be 

[14:06] <raschipi> =begin perl6

[14:07] <raschipi> say "hi!";

[14:07] <evalable6> raschipi, rakudo-moar ad8fa5529: OUTPUT: ¬´hi!¬ª

[14:07] <raschipi> =end perl6

[14:07] <raschipi> wouldn't it?

[14:08] <raschipi> Unsing the "=begin formatname " form

[14:09] <raschipi> But it would also be overkill...

[14:10] <raschipi> Is this supposed to write markdown with existing POD, or purpose-written POD?

[14:12] *** Cabanossi left
[14:13] *** Khisanth left
[14:14] *** CacoS left
[14:15] *** Cabanossi joined
[14:16] <raschipi> samcv: Looks good, sorry for the bikeshed

[14:17] <araraloren> Convert something to Pod ~~ :)

[14:17] <samcv> well except it's supposed to be rendered as text not to be ran. but

[14:17] <samcv> existing pod raschipi 

[14:18] <samcv> i did make a :no-fenced-markdown option which is fine with me since you're right not everything accepts it

[14:19] <samcv> i gotta go back to bed and finish my sleep. night Zzz

[14:19] <raschipi> night, sleep tight

[14:23] *** cdg_ joined
[14:23] *** perlpilot left
[14:23] *** raschipi left
[14:24] *** perlpilot joined
[14:24] *** cdg left
[14:26] *** raschipi joined
[14:26] *** Khisanth joined
[14:29] *** raschipi_ joined
[14:30] *** raschipi left
[14:33] *** lowbro left
[14:38] <Geth> ¬¶ perl6-most-wanted: bee3d122a4 | (Curt Tilmes)++ (committed using GitHub Web editor) | most-wanted/bindings.md

[14:38] <Geth> ¬¶ perl6-most-wanted: Remove LibYAML, added to ecosystem

[14:38] <Geth> ¬¶ perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/bee3d122a4

[14:46] <nebuchadnezzar> I started some #Perl6 Toot on Mastodon :-D

[14:47] *** KDr2 joined
[14:49] *** Actualeyes left
[14:50] *** eyck left
[14:50] *** mawkish__ joined
[14:52] *** mawkish joined
[14:53] *** mawkish__ left
[14:55] *** MilkmanDan joined
[14:58] *** eyck joined
[14:59] *** mawkish left
[15:02] *** Actualeyes joined
[15:02] *** hoelzro joined
[15:02] *** enheh joined
[15:07] *** eyck left
[15:08] *** Ven joined
[15:09] *** Ven is now known as Guest7189

[15:12] *** Cabanossi left
[15:12] *** eliasr joined
[15:12] *** khw joined
[15:14] *** Cabanossi joined
[15:18] *** nadim left
[15:20] *** ribasushi left
[15:24] <enheh> Hello!  I'm relatively new to perl6 and have a question about some strange behavior I'm seeing with parameterized roles...

[15:24] <enheh> p6: role R[::T] { has T $.x = T(0); method new() {return self.bless(:x(42e0));} }; class C does R[Num] {}; C.new();

[15:24] <camelia> rakudo-moar 32eb28: ( no output )

[15:24] <enheh> p6: role R { has Num:D $.x = Num(0); method new() {return self.bless(:x(42e0));} }; class C does R {}; C.new();

[15:24] <camelia> rakudo-moar 32eb28: ( no output )

[15:25] <enheh> p6: role R[::T] { has T:D $.x = T(0); method new() {return self.bless(:x(42e0));} }; class C does R[Num] {}; C.new();

[15:25] <camelia> rakudo-moar 32eb28: OUTPUT: ¬´X::TypeCheck::Assignment exception produced no message‚ê§  in method new at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:25] *** Guest7189 left
[15:26] *** Ven joined
[15:26] <enheh> Why does the last one fail?

[15:26] *** domidumont left
[15:26] *** Ven is now known as Guest88924

[15:27] <pmurias> should I assume the node.js the user wants to use with rakudo.js/nqp.js is installed in PATH/

[15:27] <pmurias> PATH?

[15:27] *** Guest88924 left
[15:29] *** araraloren_ joined
[15:29] <araraloren_> enheh, I never seen a defined constrain used in **has**.

[15:29] *** ribasushi joined
[15:29] * pmurias is not sure if debian backed out from the node.js binary renaming stupidity

[15:31] *** eyck joined
[15:32] <enheh> I wanted to be able to reuse code via a role, but apply it to classes with possibly different types, i.e. Int, Rat, Num.

[15:32] *** araraloren left
[15:32] <enheh> ...different types for an attribute, that is.

[15:33] <araraloren_> Em, The first one doesn't work ?

[15:33] <enheh> The first and second ones do, but not the third.

[15:33] <enheh> I'm wondering if it is a bug.

[15:34] <araraloren_> m: class R { has Int:D $.x = 10; }

[15:34] <camelia> rakudo-moar 32eb28: ( no output )

[15:34] <araraloren_> m: role R { has Int:D $.x = 10; }

[15:34] <camelia> rakudo-moar 32eb28: ( no output )

[15:34] <araraloren_> m: role R[::T] { has T:D $.x = 10; }

[15:34] <camelia> rakudo-moar 32eb28: ( no output )

[15:34] <araraloren_> m: role R[::T] { has T:D $.x; }

[15:34] <camelia> rakudo-moar 32eb28: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable definition of type T:D requires an initializer‚ê§at <tmp>:1‚ê§------> 3role R[::T] { has T:D $.x7‚èè5; }‚ê§    expecting any of:‚ê§        constraint‚ê§¬ª

[15:35] <araraloren_> m: role R[::T] { has T:D $.x = T.new(0); }

[15:35] <camelia> rakudo-moar 32eb28: ( no output )

[15:35] <araraloren_> You should use new create a object, not T() like c++ or other language does

[15:36] <araraloren_> role R[::T] { has T:D $.x = T.new(0); method new() {return self.bless(:x(42e0));} }; class C does R[Num] {}; C.new();

[15:36] <araraloren_> m: role R[::T] { has T:D $.x = T.new(0); method new() {return self.bless(:x(42e0));} }; class C does R[Num] {}; C.new();

[15:36] <camelia> rakudo-moar 32eb28: OUTPUT: ¬´X::TypeCheck::Assignment exception produced no message‚ê§  in method new at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:36] <araraloren_> m: role R[::T] { has T:D $.x = T.new(0); method new() {return self.bless(:x(42e0));} }; class C does R[Num] {}; C.new(x => 3);

[15:36] <camelia> rakudo-moar 32eb28: OUTPUT: ¬´X::TypeCheck::Assignment exception produced no message‚ê§  in method new at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:37] <raschipi_> pmurias: are you a ham and mad because debian forced the node package to be renamed ax25-node?

[15:38] *** ufobat joined
[15:39] <enheh> araraloren: I guess I was thinking of T() as a type conversion.

[15:39] <ufobat> heya

[15:39] <ufobat> does anyone run into the same issue? https://github.com/ufobat/Bailador/issues/101

[15:39] <ufobat> it works for me :/

[15:40] <araraloren_> enheh, what you use :D for ?

[15:41] *** eyck left
[15:41] <enheh> I wanted to force the attribute to have a value, say during later assignment.

[15:42] <raschipi_> pmurias: The hamradio node package is unmaintained and soon node.js will be allowed to take over that name.

[15:43] <enheh> So that assigning something like "$x = 3e0;" would work, but "$x = Num;" would fail.

[15:43] <araraloren_> m: role R[::T] { has T:U $.x = T; method new() {return self.bless(:x(T));} }; class C does R[Num] {}; C.new(x => 3)

[15:43] <camelia> rakudo-moar 32eb28: OUTPUT: ¬´X::TypeCheck::Assignment exception produced no message‚ê§  in method new at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:44] <raschipi_> m: role R[::T:D] { }

[15:44] <camelia> rakudo-moar 32eb28: ( no output )

[15:45] <pmurias> raschipi_: node.js being renamed to nodejs and *breaking* was hugely annoying

[15:45] <raschipi_> the other package that was older and was using that name for 9 years was forced to rename too, and that us unjust

[15:46] <raschipi_> a new project can't just appear and take over names people have been using

[15:47] <raschipi_> the hamradio package should have kept the name and node.js shouldn't bbe allowed to step on their name

[15:47] *** Ven_ joined
[15:47] <hythm> zoffix, "so defined my $var1 ?? "y" !! "n" is same as `defined( my $var1 ?? "y" !! "n" )`". Thanks zoffix, yeah I should have used parens in this case. I was under the wrong impression the statement will evaluate as (defined my $var1 ) ?? "y" !! "n"

[15:47] *** zapwai joined
[15:47] <raschipi_> But anyway, the problem is gone now.

[15:48] *** eyck joined
[15:48] <pmurias> raschipi_: the debian provided node.js being *broken* was the annoying part

[15:49] <araraloren_> Seems like role R[::T:D] doesn't work. enheh sorry I don't quite understand too

[15:49] <raschipi_> Why do you think node.js was entitled to that name at all?

[15:50] <raschipi_> As soon as they take over the name I will develop new software that uses that name and will force them to change again.

[15:51] *** Actualeyes left
[15:51] <enheh> Would it be appropriate to file a bug report here, then?

[15:52] <enheh> I'm still so new, my first instinct is to assume I'm missing something.  ;^)

[15:55] <araraloren_> enheh, you can refer Perl6 document https://docs.perl6.org

[15:58] <araraloren_> Seems like role R[::T:D] doesn't work. enheh sorry I don't quite understand too

[15:58] *** Cabanossi left
[15:59] <pmurias> raschipi_: I'm not sure what the policy over who gets a given executable in debian is, what annoyed me the most isn't that node.js was renamed but that the debian renamed version was utter crap

[15:59] <enheh> I've spent a bit of time with those documents, and they've been very helpful, but sometimes I find the "gory details" to be missing.

[15:59] <pmurias> they shouldn't feel entitled to just break something and call it node.js

[16:00] *** Cabanossi joined
[16:00] <raschipi_> Oh, I don't know about the quality of the package.

[16:00] <araraloren_> m: role R { as $.x where * ~~ Int:D | Num:D | Str:D; }; class C does R { }; C.new(x => 5);

[16:00] <camelia> rakudo-moar 32eb28: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable $.x used where no 'self' is available‚ê§at <tmp>:1‚ê§------> 3role R { as $.x7‚èè5 where * ~~ Int:D | Num:D | Str:D; }; cl‚ê§    expecting any of:‚ê§        argument list‚ê§        term‚ê§¬ª

[16:00] <enheh> I haven't really found anything that would clear up this particular case.

[16:00] <araraloren_> m: role R { has $.x where * ~~ Int:D | Num:D | Str:D; }; class C does R { }; C.new(x => 5);

[16:00] <camelia> rakudo-moar 32eb28: ( no output )

[16:00] <araraloren_> m: role R { has $.x where * ~~ Int:D | Num:D | Str:D; }; class C does R { }; C.new(x => Int);

[16:00] <camelia> rakudo-moar 32eb28: OUTPUT: ¬´Type check failed in assignment to $!x; expected <anon> but got Int (Int)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:02] <araraloren_> Use a where  do a type defined constraint, generic role is not a good idea .

[16:02] <pmurias> raschipi_: all the node.js c++ extensions where broken by the rename

[16:02] *** eyck left
[16:02] <araraloren_> enheh, The document not complete. :)

[16:04] <raschipi_> pmurias: the ones from Debian?

[16:04] <araraloren_> enheh, There no more about generic role in document, so I can't help you about that .

[16:05] <raschipi_> or installed directly from source?

[16:05] <araraloren_> I think there is just one section: https://docs.perl6.org/syntax/role#Parameterized_Roles

[16:06] <enheh> araraloren: Yes, I've read through that.  For now, I guess any further learning on parameterized roles is just through experimentation.  :)

[16:06] <araraloren_> And the where clause: https://docs.perl6.org/type/Signature#index-entry-where_clause_%28Signature%29

[16:08] *** Actualeyes joined
[16:08] <araraloren_> enheh, Yeah, It's not perfect than c++ generic class , I think. Just a primary feature.

[16:09] <enheh> What we're seeing still looks like a bug though, right?

[16:09] <enheh> If so, I would like to make a bug report.  I hate to see things slip through the cracks.

[16:10] <araraloren_> I don't know, you can ask some core developper .

[16:11] <araraloren_> I gotta sleep now .

[16:11] <araraloren_> night .

[16:11] <enheh> Okay, thanks!

[16:11] <araraloren_> Zzz

[16:11] <enheh> :)

[16:11] *** Rawriful joined
[16:12] *** Actualeyes left
[16:13] *** awwaiid left
[16:13] *** awwaiid joined
[16:14] *** awwaiid left
[16:17] *** araraloren_ left
[16:18] *** yqt left
[16:19] <pmurias> raschipi_: from npm

[16:20] <raschipi_> Software installed from source needs to be ported.

[16:20] *** awwaiid joined
[16:22] <pmurias> raschipi_: I'm not sure packaging node.js libraries as .debs even makes sense as there are not installed system wide but every node.js library has a copy

[16:25] <raschipi_> They still need to be ported. Anyway, it will be all in the past soon.

[16:26] *** wamba left
[16:26] <moritz> https://www.indiegogo.com/projects/book-web-application-development-in-perl-6-website--2#/

[16:27] *** Actualeyes joined
[16:28] *** eyck joined
[16:30] *** setty1 joined
[16:32] *** wamba joined
[16:32] *** bioduds joined
[16:33] <bioduds> hi friends

[16:33] <bioduds> what is the best way today to install a perl6 module?

[16:34] *** eyck left
[16:35] *** devmikey joined
[16:38] *** Ven_ left
[16:40] <AlexDaniel> bioduds: what about zef?

[16:41] <moritz> zef it is!

[16:42] *** Ven joined
[16:42] *** dakkar left
[16:42] *** Ven is now known as Guest31182

[16:46] *** Guest31182 left
[16:49] *** Ven_ joined
[16:49] *** wamba left
[16:53] *** eyck joined
[16:53] *** Ven_ left
[16:54] *** pilne joined
[16:58] *** nadim_ joined
[16:58] *** Ven_ joined
[17:01] <bioduds> trying zef

[17:01] <bioduds> great

[17:01] <bioduds> worked like a charm, thanks

[17:01] <bioduds> tx moritz and AlexDaniel

[17:08] *** st_elmo joined
[17:09] *** Ven_ left
[17:11] *** kaare__ left
[17:12] *** Ven_ joined
[17:14] <nadim_> hi, does perl6-debug-m work for you guys? I had to install a module, then it dies with message "Cannot find method 'named' on object of type NQPMu"

[17:17] *** Ven_ left
[17:18] *** Ven joined
[17:19] *** Ven is now known as Guest70144

[17:19] *** kaare_ joined
[17:21] <hythm> nadim_ No, perl6-debug-m is b0rked now

[17:22] <nadim_> good to know! Now chasing this error is going to get more fun!

[17:22] *** dha joined
[17:23] *** Guest70144 left
[17:23] <hythm> yeah good luck : D

[17:24] <nadim_> m: my $s1 = (1...2) ; my $s2 = (1...2) ; say 'eqv' if $s1 eqv $s2 ; say $s1[0] ;

[17:24] <camelia> rakudo-moar 32eb28: OUTPUT: ¬´eqv‚ê§This Seq has already been iterated, and its values consumed‚ê§(you might solve this by adding .cache on usages of the Seq, or‚ê§by assigning the Seq into an array)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:26] <nadim_> Hmm, it's going to be difficult to do a data structur diff when the structure contains Seqs. first one never knows for lazy infinite Seq and doing an eqv on them donsumes them.  How would you diff two Seq?

[17:27] *** Cabanossi left
[17:27] *** Ven joined
[17:27] *** Ven is now known as Guest56196

[17:27] <raschipi_> nadim_: Call .cache on them?

[17:29] <nadim_> that's half the problem, the simpler half. diffing infinite Seq is not very useful.

[17:29] <nadim_> will need to put some limits

[17:30] *** Cabanossi joined
[17:35] *** raschipi_ left
[17:35] *** Guest56196 left
[17:44] <nadim_> what would this error mean? "This type cannot unbox to a native integer: P6opaque, Failure"

[17:49] *** Sound joined
[17:50] *** TeamBlast left
[17:51] *** nowan_ joined
[17:52] *** zakharyas left
[17:53] *** Ven_ joined
[17:53] *** nowan left
[17:53] *** trnh left
[17:53] *** TeamBlast joined
[18:05] <ugexe> m: use nqp; say nqp::unbox_i(Failure.new("xxx"))

[18:05] <camelia> rakudo-moar 32eb28: OUTPUT: ¬´This type cannot unbox to a native integer: P6opaque, Failure‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:05] *** curan left
[18:06] <ugexe> maybe something like `method whatever($some-int) { }` where $some-int is being passed a Failure because its not constrained

[18:07] *** Actualeyes left
[18:10] *** trnh joined
[18:11] *** trnh left
[18:11] *** trnh joined
[18:11] *** cdg_ left
[18:14] *** darutoko left
[18:16] *** espadrine joined
[18:25] *** Ven_ left
[18:27] *** Ven joined
[18:27] *** Ven is now known as Guest27595

[18:30] *** wamba joined
[18:45] *** pochi joined
[18:47] *** domidumont joined
[18:50] *** mcmillhj left
[18:50] *** mcmillhj joined
[18:53] * lizmat starts working on this week's Perl 6 Weekly

[18:53] <lizmat> ping me if you think I'm about to forget something

[18:54] <nadim_> lizmat: something about rakudo.js, and what it is for would be nice

[18:55] <lizmat> ok, if pmurias would have a blog post about it: for now I'll just mention that as one of the tweets of the past week

[18:58] <[Coke]> lizmat++ # thanks for thankless task of putting the weekly together.

[19:01] <lizmat> [Coke]: thanks  :-)

[19:04] <tbrowder> that goes fOR me, too, and i trust everyone here: ++lizmat 

[19:06] *** st_elmo left
[19:07] *** TEttinger joined
[19:10] *** Guest27595 left
[19:10] *** Ven_ joined
[19:13] *** Cabanossi left
[19:15] *** Cabanossi joined
[19:15] *** Ven_ left
[19:17] *** devmikey left
[19:27] *** devmikey joined
[19:29] *** yqt joined
[19:31] *** domidumont left
[19:33] *** trnh left
[19:39] <[Coke]> /win 8

[19:39] <[Coke]> wow, managed to miss the contest with that one.

[19:40] *** Zoffix joined
[19:40] *** nadim_ left
[19:40] <Zoffix> /win 8

[19:40] <buggable> Zoffix, Thank you for entering Accidental /win Lottery! The next draw will happen in 2 weeks, 3 days, 4 hours, 19 minutes, and 2 seconds

[19:41] <Zoffix> [Coke]: how did you manage to miss the contest?

[19:41] *** nadim_ joined
[19:42] <Zoffix> oh wait, I think IRC::Client still has that bug where it ignores nicks with [] in them

[19:42] *** Zoffix is now known as [Zoffix]

[19:42] <[Zoffix]> buggable: eco

[19:42] <buggable> [Zoffix], Out of 844 Ecosystem dists, 0 have warnings, 0 have errors, and 0 have no tags in META file. See https://modules.perl6.org/update.log for details

[19:42] <[Zoffix]> nope...

[19:42] *** [Zoffix] is now known as Zoffix

[19:43] <[Coke]> Zoffix: not just a /, it was some special char as well.

[19:43] <Zoffix> tadzik: so the update.log no longer has any of the issues printed to it?

[19:43] <Zoffix> [Coke]: ah

[19:44] <Zoffix> Ah, it's now all in https://modules.perl6.org/todo/.json

[19:44] <Zoffix> buggable: update yourself to work with https://modules.perl6.org/todo/.json ktnx

[20:03] *** cdg joined
[20:05] <Zoffix> ufobat: ping

[20:07] <Zoffix> ah, nm, I forgot --serial to zef

[20:08] <Zoffix> Bailador worked on 2017.04.3, but install fails on 2017.05.something

[20:08] <Zoffix> something about handles :}

[20:09] <Zoffix> I wonder if it works on 2017.05. 'cause I just assumed it would when I fixed Digest and never re-tested :o

[20:12] *** Ven joined
[20:12] *** Ven is now known as Guest22322

[20:15] <Zoffix> Ah. It's the "using say, but implementing only print" issue

[20:15] *** avar left
[20:16] *** Guest22322 left
[20:16] *** avar joined
[20:16] *** avar left
[20:16] *** avar joined
[20:22] *** xinming_ joined
[20:24] <Zoffix> Yeah, it's broken on 2017.05 :( Zoffix--

[20:25] * lizmat hopes that 2017.05 is the last rakudo compiler release that didn't smoke the ecosystem

[20:25] *** xinming left
[20:27] <Zoffix> lizmat: Yup. I got the proper tool too now: https://github.com/zoffixznet/zefyr   and I'll be finally free of the IO grant for next release

[20:27] <lizmat> :-)    

[20:27] <lizmat> will that post to cpan-testers ?

[20:28] <Zoffix> Dunno. Probably better done as a Zef plugin (and then the tool can automagically use it)

[20:28] <Zoffix> Oh, actually 2017.05 is fine. 'cause the bug is in Bailador :D

[20:29] * Zoffix is about to send a PR

[20:30] <Zoffix> There: https://github.com/ufobat/Bailador/pull/103

[20:32] *** Zoffix left
[20:32] *** cyphase left
[20:36] *** literal left
[20:36] *** yqt left
[20:36] *** literal joined
[20:37] *** cyphase joined
[20:39] <TreyHarris> I was surprised by _how_ loose the named boolean operators are. Specifically, their being even looser than parens

[20:40] <TreyHarris> m: my $x = True or False; say $x

[20:40] <camelia> rakudo-moar 431ed4: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant value False in sink context (line 1)‚ê§True‚ê§¬ª

[20:40] <TreyHarris> m: my $x = (True or False); say $x

[20:40] <camelia> rakudo-moar 431ed4: OUTPUT: ¬´True‚ê§¬ª

[20:40] <TreyHarris> m: my $x = (True and False); say $x

[20:40] <camelia> rakudo-moar 431ed4: OUTPUT: ¬´False‚ê§¬ª

[20:40] <lizmat> m: my $x = True|False; say $x   # the joy of Junctions!

[20:40] <camelia> rakudo-moar 431ed4: OUTPUT: ¬´any(True, False)‚ê§¬ª

[20:41] <TreyHarris> here's the weird one to me

[20:41] <TreyHarris> m: my $x; my $y = 3; say($x orelse $y)

[20:41] <camelia> rakudo-moar 431ed4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in argument list; couldn't find final ')' ‚ê§at <tmp>:1‚ê§------> 3my $x; my $y = 3; say($x7‚èè5 orelse $y)‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§¬ª

[20:41] <TreyHarris> m: my $x; my $y = 3; say($x // $y)

[20:41] <camelia> rakudo-moar 431ed4: OUTPUT: ¬´3‚ê§¬ª

[20:42] <TreyHarris> I can use the latter, it just surprises me that orelse is so loose in this case

[20:42] <pilne> i need to get my ass up to speed with perl6 so i can actually maybe help with things >.<

[20:45] *** dha left
[20:45] <[Coke]> pilne: your help would be appreciated but in the meantime, please enjoy this fine language.

[20:47] <pilne> i'm just *reading* about it and working through the intro off of perl6.org and i'm just astounded at how natural it feels, i've dabbled as a hobbyist in most any language that's had decent exposure since the late 90's and perl/ruby/python were always my gotos, but this really takes the cake.

[20:48] <pilne> and the inline family of modules... being built on vms, very forward thinking while leveraging so much past (often good) work!

[20:49] <pilne> i just get a bit saddened when i see a perl5 user in such a tizzy over perl6 (i can't blame rubyists and pythonistas for their jealousy though lol).

[20:50] *** cpage_ left
[20:51] *** ufobat left
[20:51] <timotimo> i'm not sure i understand what you mean by that

[20:52] <pilne> it seems that on every blog or HN type thread associated with perl6 that I read, there is a high probability of at least 1 commenter being someone who has the opinion that perl6 ruined perl (or something of that like).

[20:52] <pilne> or posts with headers/titles proclaiming similar >.<

[20:53] <pilne> i want to smite the posts, despite my deep respect for freedom of speech

[20:53] <moritz> and I can see how the could come to that conclusion

[20:53] <pilne> i can too, i can, but there is so much more that can be done focusing on the positives of either perl.

[20:54] <pilne> granted, i regularly rant that if the united states spent it's military overbudgeting on medicinal research and ways to alleviate the cost of becoming a doctor.. that our medical system here wouldn't be so fubar... but i digree.

[20:54] <pilne> digress**

[20:57] <pilne> and as a somewhat... pragmatic person, inline::perl5 seems to make a lot of the points kinda moot...

[21:04] *** cpage_ joined
[21:09] *** mcmillhj left
[21:09] *** mcmillhj_ left
[21:12] *** rindolf left
[21:15] <tadzik> Zoffix: hmm, possibly not those that end up on /todo

[21:15] <tadzik> Zoffix: but I don't recall removing them

[21:16] *** skids left
[21:17] *** Zoffix joined
[21:17] <Zoffix> tadzik: it was the log stuff; one was missng `perl` key in META and the other was about the tags.

[21:18] <Zoffix> Yup. Both are reported on the /todo now

[21:18] <Zoffix> (e.g. "Testing" dist)

[21:23] <Zoffix> pilne: as someone who used to do perl5 only and perl6 was "about to be released", I felt kind of... fear. That what I do is useless, soon to be forgotten. That I'm about to have a useless skill on my resume. That I might have trouble at work with my current perl 5 apps, because no one supports the modules I use any more.... So, I don't think the post-smitting is warranted under such assumptions :)

[21:24] <Zoffix> huggable: hug angry Perl 6 haters

[21:24] * huggable hugs angry Perl 6 haters

[21:29] <Geth> ¬¶ doc: cbae56533b | (Zoffix Znet)++ | doc/Type/IO/Handle.pod6

[21:29] <Geth> ¬¶ doc: Fix typo; Fixes #1321

[21:29] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/cbae56533b

[21:30] <Geth> ¬¶ doc: 79e064313d | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[21:30] <Geth> ¬¶ doc: Fix xtest code compilation; Fixes #1322

[21:30] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/79e064313d

[21:34] *** robertle left
[21:36] *** bjz joined
[21:39] <pilne> but wasn't there any comfort in the fact that languages like c and c++ have been prounced as "about to die" directly because of other languages, when, as far as i can tell, perl6 never stated that eliminating or replacing perl5 was a goal? i mean... there just seems to be so much hyperbole surrounding certain subjects and topics in programming, both the "science" side of languages and the "x vs. y" debate of the hour.

[21:39] <Geth> ¬¶ doc: 98965b32da | (Zoffix Znet)++ | doc/Type/IO/Handle.pod6

[21:39] <Geth> ¬¶ doc: [io grant] Fix up IO::Handle.split

[21:39] <Geth> ¬¶ doc: 

[21:39] <Geth> ¬¶ doc: - It's no longer lazy-read due to a bug, which likely won't get

[21:39] <Geth> ¬¶ doc:     fixed until we get a proper Cat

[21:39] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/98965b32da

[21:39] *** dalek left
[21:40] *** dalek joined
[21:40] *** ChanServ sets mode: +v dalek

[21:40] <Zoffix> pilne: not really. Just because it happened for X doesn't mean it'd happen for Y. And well, close to the time when I left Perl 5, it kinda felt emptier... I did notice people leaving and finding more abandoned modules, people saying in channels they won't start any new Perl 5 projects, etc.

[21:41] <Zoffix> ^ docs; on positive side: that .split is now exactly like Str.split, with all the feature and none of own bugs

[21:41] *** eliasr left
[21:41] <pilne> i guess as a hobbyist, maybe looking to do something "real" if it just happens to work out with programming, i guess I don't have that fear of where's the money gonna come from

[21:42] <Zoffix> mhm

[21:43] <pilne> it's just sad, even in my environment, how buzz-wordy those higher up the chains are... my company will step over a dollar to pick up a penny... because shiny is the buzzword compared to ratty looking paper money

[21:44] <pilne> unless my analysis as an end user, who saw the internal "explanation" video, my company way overpaid for a cs101 level homework assignment....

[21:44] <pilne> maybe like 201... i guess term length matters

[21:45] <Zoffix> Lack of skill. People who know nothing about programming need to make I.T. decisions that will affect the company for the next 15-20 years. The buzz-words and marketing is what works for those people, not some nerd's opinion.

[21:46] *** setty1 left
[21:46] <Zoffix> Yeah, overpaid sounds about right. Sell a company a product that handles all of their business. Then charge $100,000/year for "support" because it'd cost them a $1,000,000 to replace you, so they eat the cost.

[21:46] <pilne> so odd...

[21:47] <pilne> yeah, even though i don't think that's how these costs worked, they mentioned this specifically as money spent developing

[21:48] <pilne> i mean, i'm all for paying good money for good developers...

[21:48] <pilne> but this thing couldn't punch it's way outta a wet paper bage....

[21:49] <pilne> bag**

[21:50] <Zoffix> \o

[21:50] *** Zoffix left
[21:50] *** mcmillhj joined
[21:50] <pilne> but it does give me and some of my coworkers good laughs....

[21:50] <pilne> (:

[21:51] <pilne> i'm going to have to re-reboot my blog and just start at my adventures with perl6

[21:54] <Geth> ¬¶ doc: bd702e2b86 | (Zoffix Znet)++ | doc/Type/IO/Handle.pod6

[21:54] <Geth> ¬¶ doc: [io grant] Fix up IO::Handle.comb

[21:54] <Geth> ¬¶ doc: 

[21:54] <Geth> ¬¶ doc: - It's no longer lazy-read due to a bug, which likely won't get

[21:54] <Geth> ¬¶ doc:     fixed until we get a proper Cat

[21:54] <Geth> ¬¶ doc: - routine now has all the same features as Str.comb

[21:54] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/bd702e2b86

[21:54] <Geth> ¬¶ doc: fea0f9a332 | (Zoffix Znet)++ | doc/Type/IO/Handle.pod6

[21:54] <Geth> ¬¶ doc: Fix typos in code examples

[21:54] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/fea0f9a332

[21:54] *** mcmillhj left
[21:58] *** Cabanossi left
[21:59] *** Cabanossi joined
[22:06] *** mcmillhj joined
[22:07] <bioduds> Please, how do I make an array of instances of a class?

[22:08] <bioduds> bidimensional

[22:08] <bioduds> I'm trying has Node @!node;

[22:08] <bioduds> Node is the class

[22:09] <bioduds> then inside a double loop I'm trying to assign @!node[$h;$i] = Node.new( data => $data );

[22:09] <bioduds> It's telling me Type check failed in assignment to @!node; expected BW::Merkle::Node but got Array ($[])

[22:11] *** mcmillhj left
[22:12] *** Zoffix joined
[22:12] <Zoffix> bioduds: it's 'cause you're specified a parameterized array, not "array that contains only Node elements"

[22:12] <Zoffix> m: class Node {}; class Foo { has @.meows[2;2] where .all ~~ Node }.new: :meows[(Node.new, Node.new); (Node.new, Node.new)]

[22:12] <camelia> rakudo-moar 379ef6: ( no output )

[22:13] <Zoffix> m: class Node {}; class Foo { has Node @.meows[2;2] }.new: :meows( Array[Node].new: (Node.new, Node.new); (Node.new, Node.new) )

[22:13] <camelia> rakudo-moar 379ef6: ( no output )

[22:13] <Zoffix> or keep it parametarized, but then you need to give it parametarizeadasdaij array ^

[22:16] <Zoffix> hm, does .all even work on shaped arrays?

[22:16] <Zoffix> m: my @m[2;2] where .all ~~ Int; @m = (4, 2), (3, 4); dd @m.all

[22:16] <camelia> rakudo-moar 379ef6: OUTPUT: ¬´Cannot access 2 dimension array with 1 indices‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:16] <bioduds> I can tell on the constructor? The parameters [2;3] for instance?

[22:17] <Zoffix> m: my @m[2;2] where .all ~~ Int; @m = [[4, 2], [3, 4]]; say @m.flat.all

[22:17] <camelia> rakudo-moar 379ef6: OUTPUT: ¬´all(4, 2, 3, 4)‚ê§¬ª

[22:17] <Zoffix> ah, k, it might be `where .flat.all ~~ Node`

[22:17] <Zoffix> bioduds: so you want an attribute that accepts shaped arrays of arbitrary shapes?

[22:19] <bioduds> yes

[22:19] <bioduds> because it depends on the input

[22:19] <bioduds> the size of the two dimensions, I mean

[22:20] <Zoffix> m: class Node {}; class Foo { has Node @.meows; method !SET-SELF (\m) { @!meows := m; self }; method new (:$meows is raw) { self.bless!SET-SELF: $meows } }.new( :meows( Array[Node].new: :shape(2, 2), (Node.new, Node.new), (Node.new, Node.new) ) ).meows.perl.say

[22:20] <camelia> rakudo-moar 379ef6: OUTPUT: ¬´Type check failed in binding; expected Positional[Node] but got Array[Node] (Array[Node].new(:shap...)‚ê§  in method SET-SELF at <tmp> line 1‚ê§  in method new at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:20] <Zoffix> booo

[22:21] *** bjz left
[22:21] <Zoffix> m: class Node {}; class Foo { has Array[Node] $.meows }.new( :meows( Array[Node].new: :shape(2, 2), (Node.new, Node.new), (Node.new, Node.new) ) ).meows.perl.say

[22:21] <camelia> rakudo-moar 379ef6: OUTPUT: ¬´Array[Node].new(:shape(2, 2), [Node.new, Node.new], [Node.new, Node.new])‚ê§¬ª

[22:21] <Zoffix> That seems to do the trick; I'm unsure of a way to do that and keep the @ sigil

[22:21] <bioduds> let me try that logic in

[22:22] *** mcmillhj joined
[22:22] *** espadrine left
[22:23] <Zoffix> Just to be clear: it's not mandatory that you specify the shape.

[22:23] <Zoffix> m: class Node {}; class Foo { has Array[Node] @.meows }.new( :meows( Array[Node].new: Node.new, Node.new, Node.new, Node.new ) ).meows.perl.say

[22:23] <camelia> rakudo-moar 379ef6: OUTPUT: ¬´Type check failed in assignment to @!meows; expected Array[Node] but got Node (Node.new)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:24] <Zoffix> m: class Node {}; class Foo { has Node @.meows }.new( :meows( Array[Node].new: Node.new, Node.new, Node.new, Node.new ) ).meows.perl.say

[22:24] <camelia> rakudo-moar 379ef6: OUTPUT: ¬´Array[Node].new(Node.new, Node.new, Node.new, Node.new)‚ê§¬ª

[22:24] <Zoffix> m: class Node {}; class Foo { has Node @.meows }.new( :meows( Array[Node].new: Node.new, Node.new, Node.new, Node.new ) ).meows.rotor(2).perl.say

[22:24] <camelia> rakudo-moar 379ef6: OUTPUT: ¬´((Node.new, Node.new), (Node.new, Node.new)).Seq‚ê§¬ª

[22:27] *** mcmillhj left
[22:27] *** pmurias left
[22:28] *** kyan joined
[22:28] *** grondilu joined
[22:32] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/05/22/2017-21-yap6b/

[22:33] <nadim_> m: my \c = @a Z=> @b; dd c ;

[22:33] <camelia> rakudo-moar 379ef6: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '@a' is not declared‚ê§at <tmp>:1‚ê§------> 3my \c = 7‚èè5@a Z=> @b; dd c ;‚ê§¬ª

[22:34] <nadim_> m: my \c = i(1..3) Z=> <a b c>; dd c ;

[22:34] <camelia> rakudo-moar 379ef6: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '&i' is not declared‚ê§at <tmp>:1‚ê§------> 3my \c = 7‚èè5i(1..3) Z=> <a b c>; dd c ;‚ê§¬ª

[22:34] <nadim_> m: my \c = (1..3) Z=> <a b c>; dd c ;

[22:34] <camelia> rakudo-moar 379ef6: OUTPUT: ¬´(1 => "a", 2 => "b", 3 => "c").Seq‚ê§¬ª

[22:36] <Zoffix> superstitious parens

[22:36] <Zoffix> m: my \c = 1..3 Z=> <a b c>; dd c

[22:36] <camelia> rakudo-moar 379ef6: OUTPUT: ¬´(1 => "a", 2 => "b", 3 => "c").Seq‚ê§¬ª

[22:36] <nadim_> the above looks nice but when I dump it, eg: I display each element of the Seq, I get this result: (1        a, 2        b, 3        c).Seq

[22:36] <Zoffix> nadim_: that's 'cause you're stringifying those pairs when you dump them

[22:36] <lizmat> m: say Pair.new("a",42)

[22:36] <camelia> rakudo-moar 379ef6: OUTPUT: ¬´a => 42‚ê§¬ª

[22:36] <lizmat> m: say Pair.new("a",42).Str

[22:36] <camelia> rakudo-moar 379ef6: OUTPUT: ¬´a  42‚ê§¬ª

[22:36] <Zoffix> m: my \c = 1..3 Z=> <a b c>; print c

[22:36] <camelia> rakudo-moar 379ef6: OUTPUT: ¬´1  a 2     b 3     c¬ª

[22:37] <lizmat> .gist vs .Str

[22:37] * Zoffix is too slow :)

[22:37] <nadim_> thanks, I'll see how I can bypass the stringification

[22:37] <nadim_> maybe time to test displaying Pairs

[22:38] <nadim_> the problem is probably there

[22:38] *** mcmillhj joined
[22:38] * Zoffix is happy we have so many Perl 6 books now that we have an acronym for it :D

[22:38] <Zoffix> huggable: YAP6B :is: YAP6B = Yet Another Perl 6 Book

[22:38] <huggable> Zoffix, Added YAP6B as YAP6B = Yet Another Perl 6 Book

[22:40] <bioduds> got it, Thanks Zoffix

[22:41] <Zoffix> \o/

[22:43] *** mcmillhj left
[22:44] *** MasterDuke left
[22:44] <Zoffix> lizmat++ # Great weekly

[22:45] *** Zoffix left
[22:48] *** devmikey left
[22:51] *** zengargoyle left
[22:54] *** Rawriful left
[22:57] *** Cabanossi left
[22:58] <bioduds> noob question

[22:58] <bioduds> why loop ( my $i=0; $i < @!dataset.elems/($!height-$h); $i+2 ) { does not work?

[22:58] <bioduds> $i+2

[22:59] <bioduds> it stays stuck in 0

[22:59] *** nadim_ left
[22:59] <bioduds> and warns me Useless use of "+" in expression "$i+2" in sink context (line 30)

[22:59] <lucs> Try  $i += 2

[23:00] *** Cabanossi joined
[23:00] <bioduds> oh, sure thanks lucs

[23:00] <lucs> You're welcome

[23:09] *** zengargoyle joined
[23:11] <AlexDaniel> exercism is fun

[23:13] *** kurahaupo left
[23:14] *** kurahaupo joined
[23:14] *** ParsonsNose joined
[23:15] <ParsonsNose> Hello again dear chums. I'm finally using perl6 at work

[23:15] <ParsonsNose> 2 years effort now I think, but worth it, fo' sho'

[23:18] <ParsonsNose> ... this all sounded better in my head. I meant only to bolster than notion that we were, y'know, 'prod ready'. But I should've waited until I sobered up. Or someone knew who the hell I was. Oh well!

[23:19] <pilne> lol! well congrats regardless (:

[23:19] <bioduds> I created a simple Merkle Tree module

[23:19] <bioduds> going to post later, thanks guys

[23:24] <ParsonsNose> :)

[23:25] *** wamba left
[23:27] <ParsonsNose> I've wondered for a long time about the macros, btw... Is there much movement on that? I know there's the 007 thing going on but not sure how to enter, my level being low as it is.... 

[23:28] <ParsonsNose> Never killed a man, for a start :/

[23:37] <ParsonsNose> #test

[23:38] *** cdg left
[23:41] *** MasterDuke joined
[23:41] *** BenGoldberg joined
[23:42] <pilne> i think that currently (from what i've read) perl6 provides support for everything you'd do with macros already, just kinda separated out instead of all globbed together.

[23:43] <pilne> at least in terms of what scheme/lisp macros are used for.

[23:44] *** Sound left
[23:44] *** Aggressively_Alp joined
[23:45] *** ParsonsNose left
[23:45] *** Aggressively_Alp left
[23:45] <pilne> does a child have to implement all of the submethods of the parent to inherit it? or is it just a mechanism to "hide" them from the children classes?

[23:45] *** ParsonsNose joined
[23:45] <pilne> "inherit from it?"**

[23:48] <pilne> i like having inheritance available, and multiple inheritence for prototyping, but i prefer factoring it out into the "roles" style once the code and I come to a working agreement that i get what I want (:

[23:51] <pilne> i've never understood the problem with having more than one way to do something, as long as the code is either self-doccumenting, or well-doccumented... 

[23:52] <pilne> probably a bit spazzy and gushing here, but i feel like a kid in a candy shop with this language

[23:57] *** Cabanossi left
[23:57] *** Aggressively_Alp joined
[23:59] <Aggressively_Alp> Aye, I gotcha. But sometimes I want to have variable names that I can define from some json array in the resources folder or something. IDK though, maybe that'd just be bloody silly

[23:59] *** ParsonsNose left
[23:59] <Aggressively_Alp> Oh my name changed. Oops

[23:59] *** Cabanossi joined
