[00:08] *** kyan joined
[00:08] *** thou left
[00:09] *** thou joined
[00:09] *** cdg joined
[00:13] *** cdg left
[00:18] *** mcmillhj joined
[00:19] <thou> Probably a FAQ but I can't seem to find the answer to this: is it possible to stream results of MyGrammar.parse() asynchronously as a Seq or something? So I can, say, `for gather MyGrammar.parsefile($*IN, …) { ... }`? Or is making repeated .subparse() calls the only way to do this?  https://gist.github.com/softmoth/99ec805b291f10307aef62904b562bed

[00:23] *** mcmillhj left
[00:23] *** Cabanossi left
[00:25] <AlexDaniel> thou: well, yeah, .parse can't do it because it can fail at the end of the input. So it simply cannot give you a meaningful intermediate result

[00:25] <AlexDaniel> thou: you can either use subparse, or maybe you can also try Actions

[00:25] <AlexDaniel> thou: but subparse is probably what you need

[00:26] *** Cabanossi joined
[00:27] <AlexDaniel> oh yeah, you already know about actions

[00:31] *** R0b0t1_ left
[00:33] *** R0b0t1_ joined
[00:34] *** mcmillhj joined
[00:34] *** Xal joined
[00:36] *** ryn1x joined
[00:36] *** headcase left
[00:38] *** headcase joined
[00:38] *** mcmillhj left
[00:42] *** headcase left
[00:47] <thou> Yeah, OK. Thanks.

[00:48] *** headcase joined
[00:49] *** Herby__ left
[00:50] *** mcmillhj joined
[00:54] *** mcmillhj left
[00:56] *** Cabanossi left
[00:56] *** Cabanossi joined
[00:57] *** headcase left
[00:59] *** headcase joined
[01:00] *** ryn1x left
[01:03] *** skids left
[01:05] *** mcmillhj joined
[01:08] *** headcase left
[01:08] *** headcase_ joined
[01:11] *** mcmillhj left
[01:12] *** piojo joined
[01:22] *** ryn1x joined
[01:24] *** piojo left
[01:25] *** Cabanossi left
[01:26] *** Cabanossi joined
[01:26] *** ryn1x left
[01:37] *** mcmillhj joined
[01:37] *** wamba joined
[01:41] *** mcmillhj left
[01:43] *** wamba left
[01:45] *** ilbot3 left
[01:49] *** headcase_ left
[01:50] *** ryn1x joined
[01:51] *** headcase joined
[01:55] *** ilbot3 joined
[01:55] *** ChanServ sets mode: +v ilbot3

[01:55] *** Cabanossi left
[01:56] *** kurahaupo_ joined
[01:56] *** wamba joined
[01:56] *** headcase left
[01:56] *** Cabanossi joined
[01:58] *** ryn1x left
[01:58] *** kurahaupo left
[01:59] *** llfourn joined
[01:59] *** darkmorph left
[02:09] *** headcase joined
[02:12] *** raiph joined
[02:14] *** skids joined
[02:28] *** epony left
[02:34] *** cdg joined
[02:37] *** headcase left
[02:39] *** cdg left
[02:49] *** noganex_ joined
[02:49] *** kyan left
[02:50] *** headcase joined
[02:52] *** noganex left
[02:54] *** headcase left
[02:55] *** headcase joined
[02:59] *** headcase left
[03:02] *** Ven`` joined
[03:04] *** headcase joined
[03:06] *** headcase_ joined
[03:07] *** eliasr left
[03:09] *** headcase left
[03:09] *** ryn1x joined
[03:15] *** zakharyas joined
[03:23] *** Cabanossi left
[03:24] *** ryn1x left
[03:25] *** Cabanossi joined
[03:27] *** headcase_ left
[03:27] *** headcase joined
[03:30] *** headcase_ joined
[03:32] *** headcase left
[03:34] *** headcase_ left
[03:36] *** headcase joined
[03:40] *** Ven`` left
[03:44] *** jeek joined
[03:48] *** zakharyas left
[04:04] *** BenGoldberg left
[04:05] *** thou left
[04:06] *** thou joined
[04:07] *** thou left
[04:07] *** thou joined
[04:08] *** headcase left
[04:09] *** headcase joined
[04:10] *** Cabanossi left
[04:10] *** thou left
[04:11] *** Cabanossi joined
[04:11] *** thou joined
[04:12] *** thou left
[04:23] <moritz> good morning

[04:23] <yoleaux> 28 Sep 2017 22:24Z <Zoffix> moritz: reminder that you're listed as steakholder for https://github.com/perl6/6.d-prep/blob/master/TODO/FEATURES.md#sigils-imply-d

[04:23] *** grondilu joined
[04:23] <grondilu> m: module A { sub f is export { say "ok" } }; module B { import A; sub EXPORT { A::EXPORT() } }; import B; f;

[04:23] <camelia> rakudo-moar 03b1fe: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    f used at line 1␤␤»

[04:23] <moritz> can we please go back to calling our language #perl6, pretty please, until we've reached a consensus on what to name it?

[04:23] <grondilu> how do I re-export?

[04:23] *** headcase left
[04:24] <moritz> am I supposed to explain to people that Perl 6, we we (or some of us) called "Rakudo" for some time, now uses #6lang as a twitter hashtag, but until we decide yet something else?

[04:24] <moritz> it's a freaking PR disaster right now

[04:25] *** bisectable6 left
[04:25] *** khw left
[04:29] *** ryn1x joined
[04:29] <geekosaur> grondilu, I think you have to do more work than that, there's a discussion somewhere in the docs about the namespaces involved

[04:29] <geekosaur> and iirc much of the intended machinery for automating that kind of thing doesn't exist or doesn't work yet

[04:30] *** headcase joined
[04:31] <geekosaur> https://docs.perl6.org/language/modules#index-entry-sub_EXPORT but it's the sections above you'll likely need to work around it

[04:34] *** ryn1x left
[04:34] *** Mrofnet joined
[04:38] *** Morfent left
[04:40] *** wamba left
[04:48] *** aborazmeh joined
[04:48] *** aborazmeh left
[04:48] *** aborazmeh joined
[04:51] <TEttinger> moritz: you didn't hear? 6lang is leetspeak for blang, which is what all the 90s kids are calling a new synthetic drug that induces heavy nostalgia. it's a mix of buzzfeed and slang

[04:52] *** committable6 left
[04:54] *** kerframil left
[04:55] *** benchable6 left
[04:55] *** squashable6 left
[04:55] *** coverable6 left
[04:55] *** bloatable6 left
[04:55] *** evalable6 left
[04:55] *** releasable6 left
[04:55] *** statisfiable6 left
[04:55] *** quotable6 left
[04:55] *** nativecallable6 left
[04:55] *** greppable6 left
[04:58] *** skids left
[04:58] *** nadim joined
[05:00] *** thou joined
[05:01] <AlexDaniel> the real disaster is when somebody asks me what language do I use, I answer “perl 6”, and they say “ah, perl…”

[05:01] <thou> m:  grammar G { regex TOP { \d } }; my $str = '123'; my $g = G.new; for ^3 { $g.subparse($str, :c).say }

[05:01] <camelia> rakudo-moar 03b1fe: OUTPUT: «｢1｣␤｢1｣␤｢1｣␤»

[05:02] <AlexDaniel> so people are actively against different names and are calling for a consensus. Do I have any other choice than going with something I can use today?

[05:03] <thou> Is this a known issue? Or am I calling it wrong? :continue() adverb not working with .parse / .subparse

[05:03] *** Todd joined
[05:04] *** headcase left
[05:04] <thou> Trying to avoid this: $str .= substr: $/.pos;  # Remove previously matched portion

[05:05] *** headcase joined
[05:05] <Todd> Hi.  I am trying to come up with a non system call that will tell me if a file exists.  So far I have `perl6 -e 'my $x="eraseme.txt".IO.f;say $x'` which will give me a "True" if it exists, but it will crash and wag the finger at me if not.  Is there any method to just get a "False" back?

[05:06] <AlexDaniel> thou: I think it should be :pos($/.to)

[05:06] <weabot> Todd "file".IO.e

[05:06] <AlexDaniel> m: grammar G { regex TOP { \d } }; my $str = ‘123’; my $g = G.new; for ^3 { $g.subparse($str, :pos($/.to // 0)).say }

[05:06] <camelia> rakudo-moar 03b1fe: OUTPUT: «｢1｣␤｢2｣␤｢3｣␤»

[05:06] <AlexDaniel> thou: like this ↑. Where did you find :c named arg?

[05:07] <thou> AlexDaniel, very cool. Docs are wrong apparently.

[05:07] <geekosaur> shouldn't a Filire treated as a Bool produce False instead of throwing?

[05:07] <Todd> Perfect!  Thank you!

[05:07] <geekosaur> er, Failure...

[05:07] <TEttinger> AlexDaniel: camelian? the logo is camelia perched on a chameleon made of carnelian?

[05:08] <geekosaur> oh, apparently you have to explicitly .Bool it? that seems kinda unfortunate

[05:08] *** Cabanossi left
[05:08] <thou> AlexDaniel, p6doc -f Grammar.parse

[05:09] *** ChoHag left
[05:09] <thou> (And my memory from a couple years back. :-)

[05:09] *** abraxxa joined
[05:10] *** Cabanossi joined
[05:11] <AlexDaniel> thou: I filed an issue here: https://github.com/perl6/doc/issues/1583

[05:11] <AlexDaniel> thou: feel free to edit it or to comment on it… or whatever you feel appropriate

[05:12] <thou> AlexDaniel, cheers

[05:13] <AlexDaniel> geekosaur: what do you mean by “treated as a Bool”?

[05:13] *** abraxxa left
[05:14] <geekosaur> hm, I guess that is ambiguous in the context I used it...

[05:14] <AlexDaniel> geekosaur: for example, prefix ? calls Bool and it works, $f ?? … !! … works too

[05:14] <geekosaur> in some sense, I am expecting .f to produce a Bool

[05:14] *** troys_ is now known as troys

[05:14] <geekosaur> but I have to be explicit here in certain cases (like .say) or it throws

[05:14] <AlexDaniel> but that's a method call on a Failure! :)

[05:15] <AlexDaniel> or is it

[05:15] <geekosaur> I am expecting a Bool

[05:15] <geekosaur> if it is a Failure, I expect it to coerce to Bool

[05:15] <geekosaur> the point of .f is explciitly testing, that is why it is docced as Bool

[05:15] <AlexDaniel> hmm

[05:16] <geekosaur> this is pedantically right but is also a bomb laid at a conscientious programmer who tries to test before using and then gets burned by a Bool suddenly blowing up as an exception. This is LTA

[05:16] *** ChoHag joined
[05:17] <geekosaur> that said, having a Bool return type silently act like a coercer might also be LTA...

[05:18] <geekosaur> DWIM, WAT

[05:19] <geekosaur> and on the third hand there is the revelation that .e *does* behave like this

[05:19] <geekosaur> which is, at best, inconsistent

[05:20] <AlexDaniel> sounds like some material for a ticket

[05:23] *** headcase left
[05:23] <Todd> the "e' comes back True for bth fiels an direcories.

[05:23] <Todd> This comes back for only files: $ perl6 -e 'my $x="p6-OS-Clipboard".IO.f.Bool;say $x' False [tony@rn4 linuxutil]$ perl6 -e 'my $x="eraseme.txt".IO.f.Bool;say $x' True

[05:24] <Todd> maybe the "e" option has a booboo in it too?

[05:25] *** xtreak joined
[05:26] *** headcase joined
[05:26] *** aborazmeh left
[05:27] *** araujo left
[05:27] *** araujo joined
[05:27] *** araujo left
[05:27] *** araujo joined
[05:27] <geekosaur> we were just discussing that

[05:28] <geekosaur> theres an argument that could be made that it makes sense insofar as -e is a different operation internally. but that argument doesn't work unless that operation is exposed, whereas tests .e .f etc. do not expose it

[05:28] <geekosaur> (perl 5 half-exposes it with the magic _ parameter, but that's an even worse solution imo)

[05:29] <geekosaur> I will probably write it up as a bug, with additional discussion of the various possibilities

[05:30] <geekosaur> meanwhile, if you saw my latest, prefix ? operator acts like the .Bool but is shorter

[05:30] <geekosaur> m: say ?"blurfl".IO.f

[05:30] <camelia> rakudo-moar 03b1fe: OUTPUT: «False␤»

[05:31] <geekosaur> we also discussed the autocoerce thing that I had expected, which is also a bit more complex than it looks at first blush :/

[05:31] <geekosaur> (basically, amking a Bool return type autocoerce is probably the right thing here, but not necessarily always. ALthough if there's some clever way to specify it as a coercion type in a signature, that might also work)

[05:35] *** nadim left
[05:51] *** ryn1x joined
[05:52] *** pilne left
[05:53] <Todd> Any chance of yo guys checking if I capitolized "If" with this strnage error message?

[05:53] <Todd> SmtpIni

[05:53] <Todd> perl6 -c CheckRaid.pl6 ===SORRY!=== Error while compiling /home/linuxutil/CheckRaid.pl6 Unexpected block in infix position (missing statement control word before the expression?) at /home/linuxutil/CheckRaid.pl6:61 ------>    If not "$SmtpIniFileName".IO.f.Bool⏏ { CreateSmtpIni() };        expecting any of:         infix         infix stopper         postfix

[05:55] *** domidumont joined
[05:55] *** ryn1x left
[05:58] <Todd> The compiler -c option missed teh single =, but the run time caught it.  Any chance of making the -c catchi it too?

[05:58] <Todd> for %SmtpIni.kv -> $key, $value { 	   if ( $key = "to" )

[05:59] *** domidumont left
[06:03] *** domidumont joined
[06:03] *** ngaywood joined
[06:07] *** thou left
[06:08] *** thou joined
[06:08] * geekosaur suddenly feels like it's 2007 again

[06:08] <geekosaur> and of course it has to be the file tests...

[06:09] <geekosaur> (just realized what is bothering me about autocoercing Failure to Bool in all cases... and it reveals an edge case in the autocoercion in other circumstances as well)

[06:09] *** domidumont left
[06:10] *** domidumont joined
[06:14] <geekosaur> anyway the edge case here: speaking in unix terms, ENOENT should be a Failure that autocoerces to Bool. What of EIO? Non-autocoercing Failure? Hard exception? It's kinda a different level of failure than 'file not found'.

[06:14] * geekosaur added that to his notes... which is why he didn't just go ahead and file the bug immediately

[06:14] *** ryn1x joined
[06:14] <geekosaur> still thinking through the edge cases and such

[06:15] *** thou left
[06:19] <Todd> I am stumped.  What is "write bytes requires an object with REPR MVMOSHandle (got VMNull with REPR Null)"???   http://vpaste.net/KKpDY   Line 52 is "else { $SmtpHandle.print( "$key=\n" ); }" 

[06:20] <geekosaur> that is an internal error

[06:21] <geekosaur> and I just got a different internal error while poking at it

[06:21] *** ryn1x left
[06:21] <geekosaur> pyanfar Z$ 6 'my $key; $*OUT.write: "$key=\n"'

[06:21] <geekosaur> Use of uninitialized value $key of type Any in string context.

[06:21] <geekosaur> Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.

[06:21] <geekosaur>   in block <unit> at -e line 1

[06:21] <geekosaur> Type check failed in binding to parameter '$buf'; expected Blob but got Str ("=\n")

[06:21] <geekosaur>   in block <unit> at -e line 1

[06:21] *** ChoHag_ joined
[06:21] <geekosaur> the last part is the internal error; wtf is $buf?

[06:22] *** ChoHag left
[06:22] <geekosaur> anyway I think what happened is that it thinks the "=" is part of the variable expansion

[06:23] <geekosaur> and sure enough:

[06:23] <geekosaur> pyanfar Z$ 6 'my $key = "y"; $*OUT.write: "$key=\n"'

[06:23] <geekosaur> Type check failed in binding to parameter '$buf'; expected Blob but got Str ("y=\n")

[06:23] <geekosaur>   in block <unit> at -e line 1

[06:23] <geekosaur> hm, no, more complex than that; I changed to brace and still get the error. write method is doing something screwy

[06:24] <geekosaur> and I missed that the Str now has the y in it...

[06:24] *** headcase left
[06:24] <geekosaur> so, anyway: not a problem with your code, someone broke the write method

[06:24] <geekosaur> huggable, rakudobug

[06:24] <huggable> geekosaur, Report bugs by emailing to [email@hidden.address] See also: https://github.com/rakudo/rakudo/wiki/rt-introduction

[06:24] <Todd> "$key\=\n" did not work; neither did `$key ~ "=\n"`

[06:25] <Todd> any work around?

[06:25] <Todd> ad an idea.  Will check

[06:26] <geekosaur> .print however seems to work for me. which suggests what is broken in your case is $SmtpHandle is a VMNull... but that should never happen, or at least never show up at perl 6 level

[06:27] <geekosaur> (VMNull is a moarvm internal thing that should never, ever leak out to rakudo)

[06:28] <Todd> preassigning everything to a valiable did not work.  how do I use .print?

[06:28] *** abraxxa joined
[06:29] <geekosaur> again, you need to doublecheck that $SmtpHandle is what you think it is

[06:30] <geekosaur> somehow it is making it into perl 6's guts as a moarvm undefined value

[06:31] <geekosaur> I would have expected it to be caught if it weren't an IO::Handle, so apparently something is wrong with the IO::Handle that is not being caught until far too late

[06:31] <Todd> else { "$key=\n".$SmtpHandle.print } gives me a missing block.

[06:33] *** eliv joined
[06:34] *** eliv left
[06:34] *** eliv joined
[06:35] *** cdg joined
[06:37] *** headcase joined
[06:37] *** rindolf joined
[06:39] *** cdg left
[06:42] <Todd> How do I check $SmtpHandle?

[06:43] <Todd> This is weird as it only goofs up inside the for loop.

[06:44] <Todd> This even goofs up:  $SmtpHandle.print( "key\n" );  All the rest is commented out

[06:45] *** headcase left
[06:46] *** headcase joined
[06:48] <Todd> I will post on the mailing list.

[06:51] *** troys left
[06:54] *** espadrine left
[06:55] *** lowbro joined
[06:55] *** lowbro left
[06:55] *** lowbro joined
[06:58] <geekosaur> that thing you tried earlier is extremely confued. you still think foo.bar and bar(foo) are exactly the same thing, right?

[06:59] <geekosaur> they are only exactly the same thing in javascript and lua

[06:59] <geekosaur> they are *almost* the same thing in perl 5.

[07:00] *** Ven joined
[07:00] <Todd> another much simpler question.  How do I get the first character in a string?  This does not work:  $ perl6 -e 'my $x="xabc"; say $x[0];'

[07:00] <geekosaur> they are different in perl 6, and that is why you had the problem before on the mailing list where I pointed out that you needed to use a colon instead of a comma

[07:00] <geekosaur> this is not just because we felt like it. they are different things

[07:00] *** Ven is now known as Guest55182

[07:00] <geekosaur> substr

[07:01] <geekosaur> a string is not simply a list of characters

[07:01] <Todd> $ perl6 -e 'my $x="xabc"; say substr $x, 0..0;'

[07:01] *** setty1 joined
[07:01] *** ryn1x joined
[07:01] <Todd> Works.  Thank you!

[07:01] *** wamba joined
[07:02] *** knobo joined
[07:06] *** ryn1x left
[07:06] *** Guest55182 left
[07:13] *** Mrofnet left
[07:13] *** xtreak_ joined
[07:14] *** xtreak left
[07:18] *** robertle left
[07:18] *** Todd left
[07:21] *** headcase left
[07:23] *** Cabanossi left
[07:25] *** Cabanossi joined
[07:35] *** SHODAN left
[07:39] *** ShalokShalom joined
[07:41] *** Ven`` joined
[07:44] *** rgrau joined
[07:46] *** headcase joined
[07:50] *** headcase left
[07:54] *** nativecallable6 joined
[07:54] *** ChanServ sets mode: +v nativecallable6

[07:54] *** quotable6 joined
[07:54] *** ChanServ sets mode: +v quotable6

[07:54] *** greppable6 joined
[07:54] *** ChanServ sets mode: +v greppable6

[07:54] *** releasable6 joined
[07:54] *** coverable6 joined
[07:54] *** benchable6 joined
[07:54] *** unicodable6 joined
[07:54] *** ChanServ sets mode: +v unicodable6

[07:54] *** evalable6 joined
[07:54] *** ChanServ sets mode: +v evalable6

[07:54] *** ChanServ sets mode: +v benchable6

[07:54] *** bisectable6 joined
[07:54] *** committable6 joined
[07:54] *** ChanServ sets mode: +v committable6

[07:54] *** squashable6 joined
[07:54] *** bloatable6 joined
[07:54] *** ChanServ sets mode: +v bloatable6

[07:54] *** statisfiable6 joined
[07:59] *** headcase joined
[08:03] *** headcase left
[08:05] *** dakkar joined
[08:08] *** parv joined
[08:11] *** Ven`` left
[08:12] *** sproctor joined
[08:17] *** headcase joined
[08:20] *** robertle joined
[08:24] *** headcase left
[08:25] *** Ven joined
[08:26] *** Ven is now known as Guest7163

[08:27] *** darutoko joined
[08:27] *** japhdc joined
[08:29] *** headcase joined
[08:30] *** xtreak_ left
[08:32] <japhdc> I am trying to use whenever IO::Socket::Async.listen... The -> $conn { whenever $conn { part works fine... But can I continue executing other parts of my script and effectively leave the listener in the background?

[08:35] *** headcase left
[08:37] *** japhdc left
[08:42] *** araujo left
[08:55] *** headcase joined
[09:00] *** headcase left
[09:02] *** Guest7163 left
[09:04] *** Ven joined
[09:05] *** Ven is now known as Guest95458

[09:06] *** headcase joined
[09:09] *** Aaronepower left
[09:10] *** headcase left
[09:11] *** araujo joined
[09:11] *** araujo left
[09:11] *** araujo joined
[09:15] *** xtreak joined
[09:17] *** headcase joined
[09:18] *** setty1 left
[09:20] *** Aaronepower joined
[09:25] *** Guest95458 left
[09:26] *** headcase left
[09:27] *** headcase joined
[09:32] *** headcase left
[09:36] *** Zoffix joined
[09:36] *** |oLa| left
[09:37] *** |oLa| joined
[09:42] <Zoffix> moritz: TBH, I'm with AlexDaniel on this. You're asking us to go back to being the butt end of jokes until a concensus is reached on something that was claimed to be unalterable and unconsensuable 2 years ago. If two people calling the language something else to get a feel for an alternate name is causing a "PR nightmare" then we got bigger problems than naming.

[09:43] *** preaction left
[09:43] *** preaction joined
[09:44] <Zoffix> japhdc: yeah, you can. 

[09:44] *** Ven_ joined
[09:45] *** Ven_ left
[09:46] <moritz> Zoffix: ok, PR nightmare is too strongly worded, but it does sow confusion

[09:46] <Zoffix> m: my $x="xabc"; say $x.comb.head

[09:46] <camelia> rakudo-moar 44d525: OUTPUT: «x␤»

[09:46] <stmuk> I think things are confusing enough with perl 6 v rakudo v rakudo star without throwing a new name into the muddle

[09:47] <moritz> Zoffix: also, I'm picking up mixed messages from you. I thought you wrote that others convinced you that we should *add* something to the "Perl 6" name, yet you don't seem to practice that either with "Rakudo" or with "6lang"

[09:48] <moritz> seems like you offer a compromise without actually offering a compromise

[09:48] <Zoffix> Sure, it does, but no one's forcing you to use it. As I've said, so far I've seen just one other person use the name. How much confusion does that cause exactly? Sounds like observation bias.

[09:49] <moritz> well, also depends on the visibility

[09:49] <moritz> if we make fanfare around the squashaton for example, and that uses 6lang or rakudo as the language name, that spreads it

[09:50] <moritz> I don't really know what to do, except ignore everything that isn't at least "Perl 6 $something" branded

[09:52] <Zoffix> moritz: I don't recall writing that someone convinced me of anything. I did state that enough people opposed *an entire name change* that we won't do it, but extending the official name will let people who don't want to sow confusion with "perl" in the name to use just the extension on its own and those who feel "perl" brings something to the table can still use it. The conf video suggested instead of an

[09:52] <Zoffix> extension, a *second name* can be invented and users will use whichever of the two the find more palatable

[09:52] *** gregf_ left
[09:54] <DrForr> The "second name" is probably what I'd use for marketing courses, because as much as I truly hate to say it, emphasizing a break from the old Perl style does help attendance and encourages people with the "new language" vibe.

[09:54] <Zoffix> If there's anything I'm convinced about is that "perl" in the name is a bad idea. The amount of people that were just following along with the name but after the first blog came out they came forward and shared their experiences and how they always have to start with preamble that it's not "perl" but a different language and people still crack jokes even after that. 

[09:54] <El_Che> The cyclical new discussions make me think that the older name discussions weren't really resolved and that any name with "Perl 6" in it isn't really a solution or a rebranding. I would say keep "Perl 6" and accept the reputation breakage for Perl 5 and 6, or pick something new. All the "compromises" sound way worse to me

[09:55] <stmuk> I've no problem with increased use of "rakudo" but "6lang" I don't like

[09:58] <robertle> the people that react negative to the word "perl" do that for a (perceived, personal) reason. I guess that reason is still valid with perl 6, whatever it is called. so renaming it doesn't help, and perhaps the "Problem" does not need solving? it's just horses for courses...

[09:58] <El_Che> Also, all the lang-implementation thing sound like an early optimazation about hypothetical implementations (if this would block the Rakudo-name use)

[09:59] <El_Che> robertle: the problem is the 6, not perl

[09:59] <Zoffix> El_Che: There won't be a concensus. I'm looking at an 8-page bikeshed of just about whether .flatmap is confusing. And language name is something that's a lot easier to have an opinion on

[09:59] <El_Che> Zoffix: I am not optimistic eather

[10:00] <El_Che> Zoffix: hence, option 1

[10:00] <Zoffix> robertle: the main negatives I hear: (a) it's outdated (b) it's got too many special cases. I see neither as true in 6lang

[10:00] <Zoffix> El_Che: that's why the name never changed in the past. People just give up without solving the problem.

[10:01] <El_Che> well, I don't believe the boat has sailed has liz puts it

[10:01] <Zoffix> El_Che: and now AlexDaniel and I said, screw that. But people are telling us: give up

[10:01] <stmuk> ignore the naysayers on reddit

[10:01] <El_Che> yes, perl6 exists from 2000, but for most people it's a new language

[10:01] <Zoffix> stmuk: what about naysayers on Twitter?

[10:01] <El_Che> so, the breakage, imho, would be in the head of the people on this channel (or probably #perl6-dev)

[10:02] <El_Che> and not on the outside world

[10:02] <Zoffix> stmuk: what about a teacher who said they don't want to teach 6lang because they don't want their students to be subjected to ridicule? Ignore too?

[10:02] <teatime> stmuk: I invariably get "huhhaw, *perl*" any time I mention perl5 or perl6.  has been that way forever.  no matter where I am.  it makes me sad, it's stupid, but it's true.

[10:03] <stmuk> Zoffix: that sounds like nonsense to me .. no sensible teacher judges a book by its cover

[10:03] *** ryn1x joined
[10:03] <Zoffix> stmuk: what book?

[10:03] <El_Che> stmuk: you should be surprised (talking about university level)

[10:03] <stmuk> Zoffix: I mean the content of a language is more important than its name

[10:04] <Zoffix> stmuk: the teacher in this case knows and loves the language, but they know their students will be made fun of for learning "perl" and they told me the don't want to have that happen

[10:04] <stmuk> El_Che: probably not since many teachers are far from sensible

[10:04] <El_Che> stmuk: of course, for someone that knows the language

[10:04] <El_Che> stmuk: someone that left perl in 2005 won't look "back" to Perl 6

[10:05] <El_Che> Zoffix: there are indeed different problems based on expectation.

[10:05] <El_Che> 1. People don't look at Perl 6 because of the unjust bad perl 5 rep

[10:05] <stmuk> Zoffix: students often complain about languages they are taught. on my course many asked for C++ rather than the functional language Miranda they were taught. Any sensible teacher would ignore that.

[10:06] <El_Che> 2. People look at Perl 6 expecting a new Perl 5 and are disappointed (speed, libs)

[10:06] <El_Che> 3. People that don't care about Perl 5 at all (no negative bias), but do not look at Perl 6 because they don't see it as new 

[10:06] <El_Che> (or modern)

[10:07] <DrForr> I keep forgetting to mention Inline::Perl5, but even when I do, it's like "So perl 6 can't exist without perl 5? Why should I use Perl 6 then?" Which is unfair, but if you're of a conservative bent it's an argument.

[10:07] <El_Che> 4. Pissed of Perl 5 programmers that don't like the 6 making the 5 obsolete

[10:07] <El_Che> (that's the case I can think of right now)

[10:08] <stmuk> "perl" in the name is a double edged sword. Many will laugh (as they laugh about PHP, Rust whatever) but others will have happy memories of perl and be more positive

[10:08] <El_Che> DrForr: on French they use the term "usine à gaz" (gasworks company)

[10:08] *** jcallen_ left
[10:08] <El_Che> You don't want your code to depend on 2 runtimes IRL

[10:08] *** jcallen joined
[10:08] *** llfourn left
[10:08] <El_Che> stmuk: certainly!

[10:09] <El_Che> stmuk: the nostalgia is useful, but we also need the new car smell

[10:09] <El_Che> different users, different expetactions

[10:09] <stmuk> rakudo is the new car smell

[10:09] <Zoffix> stmuk: I feel I'm not explaining it right. It's not students complaining. It's not the teacher dismissing the language. It's the teacher not wishing to teach the language because their students will be told they're learning a dead, unwanted language, despite them learning a new language with a bad name

[10:09] <El_Che> stmuk: if it was the name of lang/implementation, sure

[10:09] *** Cabanossi left
[10:10] <stmuk> Zoffix: I understand exactly that you mean.

[10:10] <Zoffix> "No true Scottsman would do X"

[10:11] *** Cabanossi joined
[10:11] <Zoffix> So ignore it. No true Scottsman would use reddit. So ignore it. No true Scottsman would claim Perl is dead. So ignore it. So ignore everyone who is confused about the name :/

[10:11] <stmuk> I think this whole renaming debate (which has been going on for years) is just a total dead end

[10:11] <El_Che> so in short, I value (and like) Zoffix's naming efforts, but his hands are tied by the "compromise" making the benefit of the bother small

[10:11] <DrForr> El_Che: I agree, the thing is that all of CPAN didn't spring fully-formed from the head of Larry, and people these days seem to expect a fully-formed ecosysten out of the box. Now, truty be told the people in this channel are the ones developing that ecosyste, and there aren't as many people as the perl5 crew working on it.

[10:11] <stmuk> if you want a new name use "rakudo" don't invent yet another

[10:12] <El_Che> DrForr: yes. Hammer + nail + head :)

[10:12] <El_Che> DrForr: the thing is that a random dev would expect CPAN when he hears "Perl 6"

[10:12] <Zoffix> stmuk: you can't ignore everything and everyone. There are people opposed to "rakudo" because it blurs the distinction between language and implementation.,

[10:13] <DrForr> Okay, here's a wack idea.

[10:13] <El_Che> DrForr: but that wouldn't be the case for 6lang, Rakudo, or a random new lang

[10:13] <stmuk> Zoffix: there is only one implementation now

[10:13] <Zoffix> DrForr: let's hear it :)

[10:13] <Zoffix> stmuk: no, there are two. There's also fanlang

[10:13] <El_Che> DrForr: eg. a lot of golang modules are crap

[10:13] <El_Che> but noone complains because it's "new"

[10:13] <stmuk> Zoffix: there is only one open source implementation now

[10:13] <Zoffix> heh

[10:14] <Zoffix> stmuk: and if I'm to give you a link to a third implementation right now, will you say "there's only one working open source implentation right now"? :P

[10:14] *** headcase joined
[10:14] <El_Che> moritz: could run a 2nd edition of his book with some search and replace :)

[10:15] <Zoffix> stmuk: I'm also not bluffing :) Though it'd take me a while to find the link

[10:15] <stmuk> Zoffix: does it pass roast :P

[10:15] *** Exodist left
[10:16] <Zoffix> probably not

[10:16] <stmuk> El_Che: he could sell two books. double the profit!

[10:16] <El_Che> :)

[10:17] <DrForr> Shim zef so that when a requested perl6 module isn't available it reports "falling back to perl 5" (with language appropriate to not piss off people that are pissed that 6 "took over" perl5) and either wraps or adds something to the doco to indicate :from<Perl5> if they actually have Inline::Perl5 on their system. Gives us more modules to work with in the ecosystem, but would be nightmarish for migration... Maybe there's the germ of an idea in th

[10:18] <Zoffix> DrForr: wouldn't a person find the module first before installing it by typing arbitrary module names with zef?

[10:18] <El_Che> DrForr: twitter needs to upgrade your irc char limit, it seems :)

[10:18] <robertle> Zoffix: sorry, was away from the keyboard for a moment. My experience is that neitehr the outdated nor the "6" is the problem, but that perl (both 5 and 6) are "big" languages, and that there are many different ways to achieve the same goal. compare that to java or python, and you can see why some people have problems with perl: it's just incredibly hard to train people up to a given and common standard. 

[10:18] <robertle> if you are running a large development team with some churn and people who do this for a living rather than for love, then this is a concern... and I think that is why some people react badly when they hear "perl". renaming it does not change that at all

[10:18] <Zoffix> Yeah, got cut off at "gem of an idea in th"

[10:19] *** Exodist joined
[10:19] <DrForr> I haven't tried zef beyond installing the perl6 modules I need; if this behavior is already there...

[10:19] <robertle> if that is the problem however, then there is no solution...

[10:19] <robertle> arguably that isn't even a problem

[10:19] <DrForr> "Maybe there's the germ of an idea somewhere." is all I really said.

[10:20] <El_Che> DrForr: Inline Perl and similar solutions are great in a get-shit-done setup. However, if the hat you wear is not one as dev but admin or architect, less great

[10:20] <Zoffix> robertle: sure, but that's not the only negative and a unique name does address other problems. Not to mention it also addresses the conflict with Perl 5 community.

[10:21] <El_Che> robertle: that's not a perl thing, but a small -vs- big lang discussion

[10:21] <El_Che> for some things golang is fantastic

[10:21] <El_Che> for other stuff you're creating the same function again and again to do something to a list

[10:21] <El_Che> it all depends on what you do and what you want to minimize

[10:22] <DrForr> I know. I'm looking at it as more of a bridge until we can actually get proper 6 modules in the ecosystem. At least the modules are marked with a :from<Perl5> so they'll be easier to spot when migrating, but OTOH the 5 modules are pretty stable so there's not as much concern about upgrading those.

[10:23] *** headcase left
[10:23] <El_Che> My point is that the brigde will collapse and burn at the same time and give your perl 6 project a terrible name

[10:23] <Zoffix> DrForr: IMO that bridge will hinder getting proper 6 modules in ecosystem. If someone's lacking a module right now, they're told to use Perl's module via Inline::Perl5. If they didn't have that option, the pain would be more severe to make more people write 6 modules

[10:23] <El_Che> best case scenario is that everything work as expected, but it take a collocal effort to setup and maintain

[10:24] <El_Che> s/collocal/collosal/

[10:24] <Zoffix> Well, not that bridge, but rather the fact that we have options other than having modules in ecosystem is what stunts it

[10:25] <Zoffix> Well this was fun :)

[10:25] <DrForr> Then the issue in my mind resolves to having time and people to implement what needs to be done from 5 in 6 and do it the right way.

[10:25] *** noobie_ joined
[10:25] * Zoffix crawls back into #perl6-dev hole to hack on 6.d o/

[10:25] *** Zoffix left
[10:25] <DrForr> And I'm late for lunch.

[10:26] <El_Che> He left before I told him I liked his dronkenChicken nick

[10:26] <El_Che> and that it would be a *great* lang name

[10:26] <El_Che> (I would certainly buy the t-shirt)

[10:26] <DrForr> Incidentally I'm starting to build out the pure-perl6 parser thus making Perl6::Parser live up to its name.

[10:27] <El_Che> nice

[10:27] * El_Che lunch

[10:27] <stmuk> we should give it a unicode name that will go down well with the people on twitter and reddit

[10:27] <stmuk> (warning not serious suggestion)

[10:27] <DrForr> And as a consequence I need a good grammar debugger, so I intend to take thorough notes. I've got an idea on a split-horizon debugger setup for later.

[10:32] <lizmat> .oO( TPLFKAP6 )

[10:33] *** margeas joined
[10:33] *** Ven joined
[10:34] *** Ven is now known as Guest2731

[10:35] *** cdg joined
[10:35] <stmuk> "Symbol"

[10:37] *** ryn1x left
[10:39] *** Cabanossi left
[10:40] *** cdg left
[10:40] *** Cabanossi joined
[10:40] *** Guest2731 left
[10:48] *** xtreak left
[10:50] *** eliasr joined
[10:51] *** xtreak joined
[10:55] <Xliff> OK. Why would I get "Cannot find method 'sink': no method cache and no .^find_method" when doing the foillowing:  try { CATCH { when X::HTTP::Response { .resume; # Error occurs here; }; }; ... }; 

[10:56] <Xliff> lizmat++ says this happens when nqp calls are made in sink context, but why would that happen on .resume?

[10:56] <Xliff> Is there something missing from the Exception declaration?

[10:58] <lizmat> I assume it's subclassed from Exception ?

[10:58] *** headcase joined
[10:59] <Xliff> Yep. Checked that.

[11:00] *** eliv7 joined
[11:01] <lizmat> could you do something like "say .resume.^name"

[11:01] <Xliff> Sure

[11:01] *** ChoHag_ left
[11:01] <lizmat> the resume is not supposed to return: but if it does, what is it then?

[11:02] *** ChoHag joined
[11:02] *** eliv left
[11:03] *** eliv joined
[11:03] *** eliv left
[11:04] <Xliff> lizmat: Looks like .resume doesn't exist in the context at all.

[11:04] *** eliv7 left
[11:04] <Xliff> Any kind of access to it drops the error.

[11:04] <Xliff> Including "say .resume.^name"

[11:04] *** eliv joined
[11:04] <lizmat> weird

[11:04] <Xliff> !_!

[11:06] *** lizmat left
[11:06] *** lizmat joined
[11:07] *** eliv7 joined
[11:07] *** headcase left
[11:08] <Xliff> lizmat: If you want context, you can find the actual code, here: https://github.com/Xliff/p6-webservice-eveonline/blob/master/lib/WebService/EveOnline/SSO.pm6#L99

[11:09] <lizmat> Xliff: why try *and* a CATCH ?

[11:09] <Xliff> That's the way the docs had it written when I first wrote that code. What would you suggest to replace it?

[11:09] <Xliff> (Said code was originally written over a year ago)

[11:10] *** eliv left
[11:10] *** eliv joined
[11:12] *** eliv7 left
[11:12] *** headcase joined
[11:13] *** epony joined
[11:16] <Xliff> lizmat: Error occurs when try is removed.

[11:17] *** headcase left
[11:20] <lizmat> sorry, out of ideas  :-(

[11:20] <lizmat> perhaps rakudobug it

[11:20] <lizmat> preferably with a golfed example  :-)

[11:20] <Xliff> I know. Trying to find one is the problem.

[11:20] <Xliff> I will work on it. Thanks for the help.

[11:22] *** headcase joined
[11:26] *** headcase left
[11:31] *** parv left
[11:37] *** setty1 joined
[11:52] *** evalable6 left
[11:52] *** evalable6 joined
[12:05] *** xtreak left
[12:05] *** xtreak joined
[12:08] *** xtreak_ joined
[12:08] *** xtreak left
[12:12] *** headcase joined
[12:16] *** japhdc joined
[12:16] *** headcase left
[12:17] *** ChoHag_ joined
[12:17] *** ChoHag left
[12:19] *** buggable left
[12:20] *** buggable joined
[12:20] *** ChanServ sets mode: +v buggable

[12:24] *** Cabanossi left
[12:25] *** ChoHag_ left
[12:25] *** Aaronepower left
[12:25] *** astj left
[12:25] *** Cabanossi joined
[12:27] *** astj joined
[12:27] *** buggable left
[12:27] *** buggable joined
[12:27] *** ChanServ sets mode: +v buggable

[12:29] *** virtualsue joined
[12:29] *** headcase joined
[12:30] *** xtreak_ left
[12:31] *** raiph left
[12:31] <Geth> ¦ ecosystem/robertlemmen-patch-1: b013b2f346 | (Robert Lemmen)++ (committed using GitHub Web editor) | META.list

[12:31] <Geth> ¦ ecosystem/robertlemmen-patch-1: Add CucumisSextus to ecosystem 

[12:31] <Geth> ¦ ecosystem/robertlemmen-patch-1: 

[12:31] <Geth> ¦ ecosystem/robertlemmen-patch-1: CucumisSextus is a Cucumber-like BDD test framework

[12:31] <Geth> ¦ ecosystem/robertlemmen-patch-1: 

[12:31] <Geth> ¦ ecosystem/robertlemmen-patch-1: see https://github.com/robertlemmen/perl6-cucumis-sextus

[12:31] <Geth> ¦ ecosystem/robertlemmen-patch-1: review: https://github.com/perl6/ecosystem/commit/b013b2f346

[12:34] *** headcase left
[12:35] *** ryn1x joined
[12:40] *** japhdc left
[12:40] *** headcase joined
[12:44] *** ShalokShalom_ joined
[12:47] *** ShalokShalom left
[12:48] *** mcmillhj joined
[12:52] *** headcase left
[12:59] *** cognominal left
[13:01] *** cdg joined
[13:01] *** headcase joined
[13:03] *** khw joined
[13:07] *** ryn1x left
[13:08] *** headcase left
[13:11] *** AnotherNick joined
[13:11] *** cdg_ joined
[13:13] *** astj left
[13:15] *** cdg left
[13:19] <Geth> ¦ ecosystem: robertlemmen++ created pull request #368: Add CucumisSextus to ecosystem

[13:19] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/368

[13:19] <[Coke]> moritz++ 

[13:21] <Xliff> Well, fixed my problem, but it was more a workaround.

[13:21] *** cognominal joined
[13:22] <Xliff> Instead of "when X::HTTP::Response { .resume }" I can do "when X::HTTP::Response { $response = .response }", which is what I really want.

[13:26] <jdv79> lizmat: should i bug that pos attr thing?

[13:26] *** lucasb joined
[13:30] *** headcase joined
[13:32] *** Ven joined
[13:32] *** Ven is now known as Guest65998

[13:34] *** headcase left
[13:39] *** Cabanossi left
[13:40] *** Guest65998 left
[13:40] *** Cabanossi joined
[13:43] *** astj joined
[13:43] *** lucasb left
[13:46] *** bdmatatu joined
[13:48] *** headcase joined
[13:49] *** astj left
[13:50] *** skids joined
[13:51] *** mcmillhj left
[13:53] *** ShalokShalom_ is now known as ShalokShalom

[13:53] *** mcmillhj joined
[13:53] *** epony left
[13:54] *** Ven_ joined
[13:57] *** headcase left
[13:59] *** headcase joined
[14:02] *** ChoHag joined
[14:03] *** headcase_ joined
[14:04] *** headcase left
[14:04] *** ryn1x joined
[14:05] *** abraxxa left
[14:08] *** headcase_ left
[14:09] *** ryn1x left
[14:10] <Geth> ¦ ecosystem: b013b2f346 | (Robert Lemmen)++ (committed using GitHub Web editor) | META.list

[14:10] <Geth> ¦ ecosystem: Add CucumisSextus to ecosystem 

[14:10] <Geth> ¦ ecosystem: 

[14:10] <Geth> ¦ ecosystem: CucumisSextus is a Cucumber-like BDD test framework

[14:10] <Geth> ¦ ecosystem: 

[14:10] <Geth> ¦ ecosystem: see https://github.com/robertlemmen/perl6-cucumis-sextus

[14:10] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/b013b2f346

[14:10] <Geth> ¦ ecosystem: e0e61cd9c1 | (Robert Lemmen)++ (committed using GitHub Web editor) | META.list

[14:10] <Geth> ¦ ecosystem: Merge pull request #368 from perl6/robertlemmen-patch-1

[14:10] <Geth> ¦ ecosystem: 

[14:10] <Geth> ¦ ecosystem: Add CucumisSextus to ecosystem

[14:10] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/e0e61cd9c1

[14:16] *** wamba left
[14:17] <timotimo> robertle: the readme contains the background scenarios section twice and the tables section is missing some `` for preformatting

[14:18] *** headcase joined
[14:20] <robertle> timotimo: thanks!

[14:22] <timotimo> np :)

[14:23] *** headcase left
[14:25] *** astj joined
[14:30] *** astj left
[14:31] *** ChoHag left
[14:32] *** ChoHag joined
[14:40] *** epony joined
[14:43] *** yht joined
[14:45] *** headcase joined
[14:48] *** headcase_ joined
[14:50] <Xliff> Whooo!

[14:50] <Xliff> \o\

[14:50] <Xliff>  /o/

[14:50] <Xliff> \o\

[14:50] *** headcase left
[14:50] * Xliff fixed code and finally got API working.

[14:53] *** Ven joined
[14:53] *** Ven is now known as Guest32422

[14:53] *** domidumont left
[14:54] *** Ven_ left
[15:07] *** andrzejku left
[15:13] *** Guest32422 left
[15:22] *** astj joined
[15:27] *** kerframil joined
[15:27] *** astj left
[15:30] *** SHODAN joined
[15:34] *** ryn1x joined
[15:36] *** headcase_ left
[15:37] *** lowbro left
[15:40] *** ryn1x left
[15:41] *** headcase joined
[15:41] <ugexe> DrForr: yes that is the eventual idea... zef graph all dependencies, then hand off the appropriate parts of the graph to whatever external tool handles it (cpanm/apt-getwhatever for from:<Perl5>)

[15:41] *** robertle left
[15:42] <jdv79> very nice!

[15:42] * jdv79 approves

[15:47] *** domidumont joined
[15:50] *** headcase_ joined
[15:50] *** headcase left
[15:53] *** domidumont1 joined
[15:56] *** domidumont left
[15:58] *** bdmatatu left
[16:01] *** rgrau left
[16:03] *** camelia left
[16:03] *** Geth left
[16:04] *** perlpilot left
[16:05] *** noobie_ left
[16:06] *** statisfiable6 left
[16:06] *** releasable6 left
[16:06] *** evalable6 left
[16:06] *** jnthn left
[16:06] *** nadim joined
[16:07] *** jnthn joined
[16:08] *** ilbelkyr left
[16:09] *** ilbelkyr joined
[16:10] *** sproctor left
[16:13] *** epony left
[16:13] *** mcmillhj left
[16:13] *** Herby__ joined
[16:14] *** camelia joined
[16:14] <Herby__> \o

[16:15] *** ChanServ sets mode: +v camelia

[16:16] *** ChoHag left
[16:16] *** Khisanth left
[16:16] *** evalable6 joined
[16:16] *** camelia left
[16:17] *** releasable6 joined
[16:17] *** ChanServ sets mode: +v releasable6

[16:17] *** statisfiable6 joined
[16:17] *** ChoHag joined
[16:20] *** obergeek joined
[16:20] *** chakli joined
[16:20] <timotimo> yo herb

[16:24] *** mcmillhj joined
[16:25] *** camelia joined
[16:26] *** ChanServ sets mode: +v camelia

[16:27] *** robertle joined
[16:29] *** mcmillhj left
[16:29] *** Khisanth joined
[16:30] *** dakkar left
[16:36] *** camelia left
[16:39] *** chakli left
[16:41] *** andrzejku joined
[16:42] *** mcmillhj joined
[16:43] *** camelia joined
[16:44] *** troys joined
[16:44] *** ChanServ sets mode: +v camelia

[16:47] *** piojo joined
[16:49] *** Rawriful joined
[16:52] *** lostinfog joined
[16:53] *** camelia left
[16:59] *** camelia joined
[17:00] *** ChanServ sets mode: +v camelia

[17:01] *** Herby__ left
[17:05] *** camelia left
[17:05] *** mcmillhj left
[17:10] *** camelia joined
[17:11] *** ChanServ sets mode: +v camelia

[17:12] *** piojo left
[17:12] *** epony joined
[17:13] *** mcmillhj joined
[17:22] *** epony left
[17:22] *** epony joined
[17:23] *** astj joined
[17:24] *** Cabanossi left
[17:26] *** Cabanossi joined
[17:28] *** astj left
[17:29] <jnthn> Heads up for anyone using IO::Socket::Async::SSL: today I some landed fixes, one for it occasionally disordering messages (actually rooted in a bug in Supply.schedule-on in Rakudo; now using something else to avoid that) and another that could very occasionally cause deadlocks under load. Version bumped, uprading suggested.

[17:34] *** avar left
[17:34] *** avar joined
[17:35] *** lostinfog left
[17:36] *** ryn1x joined
[17:37] *** Pilu joined
[17:38] *** noganex_ left
[17:39] *** noganex joined
[17:44] *** headcase joined
[17:47] *** kerframil left
[17:47] *** headcase_ left
[17:48] *** kerframil joined
[17:49] *** kerframil left
[17:49] *** kerframil joined
[17:53] *** Cabanossi left
[17:56] *** Cabanossi joined
[18:10] *** ryn1x left
[18:12] *** ryn1x joined
[18:18] *** domidumont1 left
[18:21] *** cdg joined
[18:23] <tony-o> jnthn++

[18:23] *** |oLa| left
[18:24] *** cdg_ left
[18:25] *** cdg left
[18:32] *** ryn1x left
[18:34] *** Aaronepower joined
[18:41] *** troys is now known as troys_

[18:41] *** ryn1x joined
[18:45] *** buggable left
[18:45] *** buggable joined
[18:45] *** ChanServ sets mode: +v buggable

[18:47] *** darutoko left
[18:50] *** headcase_ joined
[18:52] *** buggable left
[18:52] *** buggable joined
[18:52] *** ChanServ sets mode: +v buggable

[18:52] *** buggable left
[18:52] *** buggable joined
[18:52] *** ChanServ sets mode: +v buggable

[18:53] *** buggable left
[18:53] *** Cabanossi left
[18:53] *** buggable joined
[18:53] *** ChanServ sets mode: +v buggable

[18:53] *** epony left
[18:54] *** headcase left
[18:55] *** Cabanossi joined
[18:55] *** astj joined
[18:58] *** ryn1x left
[18:58] *** Morfent joined
[18:59] *** ryn1x joined
[18:59] *** ChoHag left
[19:00] *** astj left
[19:04] *** ryn1x left
[19:04] *** epony joined
[19:05] *** kerframil left
[19:06] *** synopsebot6 joined
[19:06] *** ChanServ sets mode: +v synopsebot6

[19:08] *** domidumont joined
[19:13] *** lichtkind joined
[19:13] *** headcase_ left
[19:14] *** domidumont left
[19:14] *** headcase joined
[19:16] *** headcase_ joined
[19:17] *** andrzejku left
[19:18] *** headcase left
[19:19] *** lancew joined
[19:21] <lancew> Hi all, anyone here able to invite people to the bailador slack?

[19:23] *** Cabanossi left
[19:25] *** Cabanossi joined
[19:26] *** ChoHag joined
[19:26] *** headcase joined
[19:26] *** headcase_ left
[19:29] *** headcase_ joined
[19:30] *** andrzejku joined
[19:32] *** headcase left
[19:34] *** eliasr left
[19:47] *** sverre_ joined
[19:47] *** sverre_ is now known as skf

[19:48] *** obergeek left
[19:48] *** lancew left
[19:50] <geekosaur> I think I have to just not respond to those list messages any more. I can't handle someone who can only handle things in complete isolation from each other, one tiny morsel at a time, no exceptions.

[19:51] <rindolf> geekosaur: are  you talking about Todd?

[19:51] <geekosaur> And metaops are probably going to be completely opaque to them because you can't make sense of them with their components in complete isolation from each other

[19:57] *** committable6 left
[19:59] *** mr-fooba_ joined
[20:02] *** mr-foobar left
[20:02] *** itaipu joined
[20:06] *** ChoHag left
[20:06] *** lancew joined
[20:08] *** domidumont joined
[20:08] *** ChoHag joined
[20:10] *** domidumont left
[20:22] *** AnotherNick left
[20:25] *** andrzejku left
[20:29] *** HoboWithAShotgun joined
[20:36] <HoboWithAShotgun> is there a way to find out which modules are currently installed? (in perl6). i mean i can't just look into the filesystem

[20:37] <HoboWithAShotgun> with in perl6 i mean from within a perl6 program

[20:38] *** lancew left
[20:39] <moritz> I'm sure there's a zef command for that

[20:39] <moritz> zef list --installed

[20:46] * HoboWithAShotgun goes amd reads some source code

[20:47] *** astj joined
[20:51] <geekosaur> HoboWithAShotgun, if you insist on not using a tool like zef, you will have to learn about CompUnitRepos

[20:51] <geekosaur> and then you will discover that some details are per management tool, so you may *still* have to use e.g. zef

[20:52] *** astj left
[20:52] *** [particle]1 joined
[20:53] *** [particle] left
[20:53] <geekosaur> although for just this question the CUR APIs may well be enough

[20:57] *** mcmillhj left
[20:59] <ugexe> m: say $*REPO.repo-chain.map(*.?installed).map(*.Slip).grep(*.so).map(*.meta<name>); # for modules that are "installed". zef does some extra stuff to also list non-installed modules (anything from -Ifoo, or PERL6LIB=foo)

[20:59] <camelia> rakudo-moar 5d12bc: OUTPUT: «(zef CSV::Parser Inline::Perl5 CORE)␤»

[21:00] *** ryn1x joined
[21:01] <HoboWithAShotgun> apparently. i looked at zef which is a perl5 script which exec()s a perl6 script that calls CompUnit::RepositoryRegistry.run-script("zef", :dist-name<zef>, :$name, :$auth, :$ver);

[21:02] <timotimo> HoboWithAShotgun: it's probably a perl5 script made by rakudobrew

[21:02] <ugexe> those are wrappers installed by rakudo/CUR

[21:02] <ugexe> yeah that too^

[21:03] <HoboWithAShotgun> now how do i find the actual script without doing a full text search 

[21:03] <HoboWithAShotgun> looking at the repository at github i could

[21:03] <timotimo> "rakudebrow which" is a thing, but that just finds the perl6 script for you

[21:04] <timotimo> i.e. the one you're already looking at

[21:05] *** ryn1x left
[21:05] <ugexe> `zef locate bin/zef` BUT thats just another wrapper! the real code is in `zef locate Zef::CLI`

[21:05] <HoboWithAShotgun> my problem is i want to create a factory for which i don't know the number of products beforehand. i want to count everything under a certain namespace to be a product

[21:06] <timotimo> buggable: eco Pluggable

[21:06] <buggable> timotimo, Pluggable 'Find plugin classes or modules': https://github.com/tony-o/perl6-pluggable

[21:07] <HoboWithAShotgun> looks the right hammer for that nail. ty

[21:07] <ugexe> HoboWithAShotgun: if you can accept the constraint they *must* be installed, then the code above should work

[21:08] <HoboWithAShotgun> you mean it won't find any local libraries?

[21:09] <ugexe> if you install to a local library yes. if its not installed (you just git clone it and -Ilib for example) then no

[21:10] <HoboWithAShotgun> that's a bummer but no dealbreaker

[21:10] <HoboWithAShotgun> but thanks for making me aware

[21:13] *** skids left
[21:16] <HoboWithAShotgun> should be easily patched though, https://github.com/tony-o/perl6-pluggable/blob/master/lib/Pluggable.pm6 line 118

[21:18] <ugexe> that will actually handle non-installed local libraries.

[21:18] <timotimo> last change may 18th, i wonder if any major changes to CUR happened since then

[21:18] <HoboWithAShotgun> bummer. $*REPO.repo-chain is an immutable list

[21:20] *** mcmillhj joined
[21:22] <mst> yes, because it's a list view onto a singly linked list

[21:22] <mst> it would make no sense for it to be mutable

[21:22] <Xliff> nqp::getlexcaller(q|$?USAGE|) <-- Doesn't work any mo.

[21:23] <Xliff> Was it removed?

[21:23] <ugexe> $*USAGE now

[21:23] <Xliff> Ah! ugexe++;

[21:25] *** mcmillhj left
[21:28] *** troys_ is now known as troys

[21:28] * HoboWithAShotgun goes to feed his frog

[21:35] <HoboWithAShotgun> meh, i don't know, the animal is not himself since obama turned him gay with chemicals

[21:36] *** mcmillhj joined
[21:38] *** Cabanossi left
[21:39] *** ryn1x joined
[21:39] <AlexDaniel> ¦ whateverable: 845db2e47f | (Aleks-Daniel Jakimenko-Aleksejev)++ | 3 files

[21:39] <AlexDaniel> ¦ whateverable: I ♥ systemd

[21:39] <AlexDaniel> ¦ whateverable:

[21:39] <AlexDaniel> ¦ whateverable: This commit resolves many long-standing problems:

[21:40] <AlexDaniel> ¦ whateverable:

[21:40] <AlexDaniel> ¦ whateverable: …

[21:40] <AlexDaniel> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/845db2e47f

[21:40] <AlexDaniel> .tell nine Geth is down

[21:40] <yoleaux> AlexDaniel: I'll pass your message to nine.

[21:40] *** Cabanossi joined
[21:41] *** mcmillhj left
[21:41] *** HoboWithAShotgun left
[21:42] *** HoboWithAShotgun joined
[21:46] *** ryn1x left
[21:48] <AlexDaniel> moritz: thanks

[21:50] *** ryn1x joined
[21:51] *** rindolf left
[21:52] *** mcmillhj joined
[21:53] *** itaipu left
[21:56] *** mcmillhj left
[21:58] *** ryn1x left
[21:58] *** ryn1x joined
[21:58] *** basket left
[21:59] *** skf left
[22:00] <Xliff> AlexDaniel: You need to tell me why systemd is so great.

[22:00] <Xliff> I've had my share of problems with it.

[22:02] <AlexDaniel> Xliff: it's awesome for creating services. Do you want virtual /tmp? That's one line. Read-only filesystem? There you go. Memory limit? One line. Your process is misbehaving a lot? Two lines to set up a watchdog. Restart automatically? Sure. With a delay? Of course.

[22:03] <AlexDaniel> you can do all that yourself, but I don't have a spare month of time for all this

[22:03] <Xliff> AlexDaniel: You have examples of those?

[22:03] <AlexDaniel> Xliff: https://github.com/perl6/whateverable/commit/845db2e47f

[22:05] <AlexDaniel> note that this commit is very tradeoff-ish and things are still not entirely (or maybe at all) secure (each perl6 execution from every bot should be seccomp-ed to get it about right). But I can take this half-solution right now

[22:05] <Xliff> AlexDaniel: Ah! I see!

[22:05] <Xliff> I haven't done systemd services yet, so this is new to me. The problems I've had were distro and installation related.

[22:06] <Xliff> AlexDaniel++

[22:06] <AlexDaniel> Xliff: another cool thing is that you can write *user* services. There are some limits, but generally you don't need root to get this kind of stuff working

[22:07] <AlexDaniel> PrivateTmp doesn't work without root though, unfortunately

[22:07] <Xliff> Yeah, that's a real plus.

[22:08] *** mcmillhj joined
[22:08] *** ryn1x left
[22:09] *** ryn1x joined
[22:12] *** mcmillhj left
[22:14] *** mcmillhj joined
[22:14] *** setty1 left
[22:15] *** ryn1x left
[22:16] *** basket joined
[22:21] *** mcmillhj left
[22:24] *** pecastro left
[22:31] *** pecastro joined
[22:33] *** mcmillhj joined
[22:37] *** mcmillhj left
[22:41] *** leont joined
[22:49] *** mcmillhj joined
[22:51] *** skids joined
[22:51] *** kurahaupo_ is now known as kurahaupo

[22:52] *** cdg joined
[22:53] *** mcmillhj left
[22:56] *** epony left
[22:58] *** cdg left
[23:02] *** mmcclimon joined
[23:05] *** mcmillhj joined
[23:05] *** leont left
[23:07] *** epony joined
[23:07] *** lichtkind left
[23:09] *** mcmillhj left
[23:17] *** wamba joined
[23:18] <unclechu> hey guys, is there any package for dbus interface?

[23:19] *** mmcclimon left
[23:20] *** mcmillhj joined
[23:20] *** ryn1x joined
[23:22] <timotimo> buggable: eco dbus

[23:22] <buggable> timotimo, Nothing found

[23:24] *** mcmillhj left
[23:25] *** ryn1x left
[23:28] *** troys is now known as troys_

[23:31] *** |oLa| joined
[23:32] <AlexDaniel> unclechu: it is marked as a wanted module here: https://github.com/perl6/perl6-most-wanted/blob/master/most-wanted/modules.md#ipc

[23:36] *** mcmillhj joined
[23:38] *** Cabanossi left
[23:40] *** headcase joined
[23:40] *** mcmillhj left
[23:41] *** Cabanossi joined
[23:41] *** committable6 joined
[23:41] *** ChanServ sets mode: +v committable6

[23:43] *** headcase_ left
[23:43] *** BenGoldberg joined
[23:46] *** Mrofnet joined
[23:48] *** Morfent left
[23:48] *** troys_ is now known as troys

[23:51] *** mcmillhj joined
[23:55] *** margeas left
