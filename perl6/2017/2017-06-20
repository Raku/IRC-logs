[00:13] *** john51_ joined
[00:14] *** AlexDani` joined
[00:14] *** jargan joined
[00:14] *** d4l3k_ joined
[00:14] *** ChanServ sets mode: +v d4l3k_

[00:14] *** esh_ joined
[00:14] *** dalek left
[00:14] *** d4l3k_ left
[00:14] *** andrzejku_ joined
[00:14] *** dalek joined
[00:14] *** ChanServ sets mode: +v dalek

[00:14] *** kst` joined
[00:14] *** obfusk_ joined
[00:14] *** sjn_ joined
[00:14] *** ilmari_ joined
[00:14] *** avarab joined
[00:14] *** jeek_ joined
[00:14] *** ambs_ joined
[00:14] *** ambs left
[00:14] *** pelev left
[00:14] *** nebuchadnezzar left
[00:14] *** sergot_ joined
[00:14] *** ranguard_ joined
[00:14] *** Util_ joined
[00:14] *** Ulti_ joined
[00:14] *** [Coke]_ joined
[00:14] *** DrForr_ joined
[00:14] *** sergot left
[00:14] *** Util left
[00:14] *** avar left
[00:14] *** sftp left
[00:14] *** Celelibi left
[00:14] *** lizmat left
[00:14] *** hahainternet left
[00:14] *** sjn left
[00:14] *** john51 left
[00:14] *** cgfbee left
[00:14] *** tinita left
[00:14] *** andrzejku left
[00:14] *** ilmari left
[00:15] *** cpage_ left
[00:15] *** d^_^b joined
[00:15] *** perlpilot left
[00:15] *** d^_^b left
[00:15] *** d^_^b joined
[00:15] *** bartolin_ joined
[00:15] *** cpage__ joined
[00:15] *** tinita joined
[00:15] *** perlpilot joined
[00:15] *** kshannon_ joined
[00:15] *** pecastro_ joined
[00:15] *** profan_ joined
[00:15] *** smash_ joined
[00:15] *** ponbiki_ joined
[00:15] *** breinbaa1 joined
[00:15] *** cxreg2 joined
[00:15] *** obarb joined
[00:15] *** Unavowed_ joined
[00:15] *** jdv79_ joined
[00:15] *** jercos_ joined
[00:15] *** Juerd_ joined
[00:15] *** rjbs- joined
[00:15] *** yubimusubi joined
[00:15] *** huf_ joined
[00:15] *** broquain1 joined
[00:15] *** Brock joined
[00:15] *** sunnavy joined
[00:15] *** japhb_ joined
[00:15] *** cono_ joined
[00:15] *** klapperl joined
[00:15] *** perlawhi1l joined
[00:15] *** lucs_ joined
[00:15] *** gfldex_ joined
[00:15] *** freeze_ joined
[00:15] *** sivoais joined
[00:15] *** nine_ joined
[00:15] *** f3ew joined
[00:15] *** mls joined
[00:15] *** orevdiabl joined
[00:15] *** ilmari_ is now known as ilmari

[00:15] *** DesertJellyFish left
[00:15] *** Ulti left
[00:15] *** jercos left
[00:15] *** nine left
[00:15] *** huf left
[00:15] *** kst left
[00:15] *** ilbelkyr left
[00:15] *** xzhao left
[00:15] *** cono left
[00:15] *** jnthn left
[00:15] *** ranguard left
[00:15] *** ibouvousaime joined
[00:15] *** ibouvousaime left
[00:15] *** ibouvousaime joined
[00:15] *** eviltwin_b joined
[00:15] *** gfldex is now known as Guest73046

[00:15] *** jferrero left
[00:15] *** geekosaur left
[00:15] *** bpmedley left
[00:15] *** camelia left
[00:15] *** petercommand left
[00:15] *** japhb left
[00:15] *** Guest73046 left
[00:15] *** smash left
[00:15] *** sivoais_ left
[00:15] *** jeek left
[00:15] *** eviltwin_b is now known as geekosaur

[00:15] *** obfusk left
[00:15] *** freeze left
[00:15] *** brabo left
[00:15] *** Juerd left
[00:15] *** Juerd_ is now known as Juerd

[00:15] *** bartolin left
[00:15] *** mls_ left
[00:15] *** lucs left
[00:15] *** [Coke] left
[00:15] *** broquaint left
[00:15] *** zoosha_ left
[00:15] *** sunnavy_ left
[00:15] *** revdiablo left
[00:15] *** DrForr left
[00:15] *** giraffe left
[00:15] *** Celelibi joined
[00:15] *** MilkmanDan left
[00:15] *** tony-o left
[00:15] *** perlawhirl left
[00:15] *** mst left
[00:15] *** b^_^d left
[00:15] *** garu left
[00:15] *** awwaiid left
[00:15] *** PerlJam left
[00:15] *** Possum left
[00:15] *** kshannon left
[00:15] *** f3ew_ left
[00:15] *** ponbiki left
[00:15] *** sftp joined
[00:15] *** cyphase left
[00:15] *** klapperl_ left
[00:15] *** obra left
[00:15] *** Unavowed left
[00:15] *** atta left
[00:15] *** AlexDaniel left
[00:15] *** jast left
[00:15] *** MilkmanDan joined
[00:15] *** xzhao joined
[00:15] *** kybr left
[00:15] *** cxreg left
[00:15] *** breinbaas left
[00:15] *** alnewkir1 left
[00:15] *** jdv79 left
[00:15] *** esh left
[00:15] *** itaylor57 left
[00:15] *** cyphase joined
[00:15] *** camelia joined
[00:15] *** rjbs left
[00:16] *** itaylor57 joined
[00:16] *** mls left
[00:16] *** mls joined
[00:16] *** ibouvousaime left
[00:16] *** ibouvousaime joined
[00:16] *** giraffe joined
[00:16] *** john51_ left
[00:17] *** giraffe left
[00:17] *** Sgeo left
[00:17] *** TEttinger left
[00:17] *** Actualeyes left
[00:17] *** Voldenet left
[00:17] *** hobbs left
[00:17] *** LeCamarade left
[00:17] *** tomaw left
[00:17] *** andrewalker left
[00:17] *** ingy left
[00:17] *** dg left
[00:17] *** paule32 left
[00:17] *** LeCamarade joined
[00:17] *** Sgeo joined
[00:17] *** ChanServ sets mode: +v camelia

[00:17] *** dudz left
[00:18] *** dudz joined
[00:18] *** giraffe joined
[00:18] *** ibouvousaime is now known as DesertJellyfish

[00:18] *** arnsholt_ joined
[00:18] *** petercommand joined
[00:19] *** jnthn joined
[00:19] *** garu joined
[00:19] *** pecastro left
[00:19] *** mst joined
[00:19] *** obra joined
[00:19] *** hahainternet joined
[00:19] *** hcit joined
[00:19] *** jferrero joined
[00:20] *** kybr joined
[00:20] *** atta joined
[00:20] *** arnsholt left
[00:20] *** pelev joined
[00:20] *** zoosha joined
[00:20] *** dg joined
[00:21] *** andrewalker joined
[00:21] *** ilbelkyr joined
[00:22] *** sivoais left
[00:23] *** dustinm`_ left
[00:23] *** john51 joined
[00:24] *** JTABFHYX joined
[00:24] *** TEttinger joined
[00:24] *** Actualeyes joined
[00:24] *** Voldenet joined
[00:24] *** hobbs joined
[00:24] *** ingy joined
[00:24] *** sivoais_ joined
[00:25] *** tomaw joined
[00:27] *** paule32 joined
[00:29] *** TEttinger left
[00:30] *** TEttinger joined
[00:32] *** dustinm` joined
[00:32] *** sivoais_ left
[00:34] *** sivoais joined
[00:34] *** cgfbee joined
[00:36] *** AlexDani` left
[00:38] *** alimon left
[00:41] *** lookatme joined
[00:41] <lookatme> morning

[00:46] *** kyan left
[01:11] <samcv> morning lookatme 

[01:13] <lookatme> samcv, morning :)

[01:13] <samcv> i fixed that collation thingy from yesterday :)

[01:13] <samcv> gotta bump moar though

[01:15] <lookatme> Em, you seem to be busy working on that all day

[01:17] <samcv> yeah. i got done lying down trying to come up with the next stages. so that 'æ' will sort along with ae

[01:17] <samcv> which is pretty neat. sometimes helps to step back from the computer and try and plan it out

[01:19] <samcv> still haven't figured out 100% what data structure to store it so it can be quickly checked though. since there's cases where multiple codepoints have a special collation keys different from the codeponits individually. so i will need to check and see if it matches one of the special ones

[01:19] <samcv> which is going to be tricky

[01:23] *** AlexDani` joined
[01:24] <lookatme> haha, awesome, good luck!

[01:24] *** AlexDani` is now known as AlexDaniel

[01:25] *** xerx joined
[01:27] *** statisfiable6 joined
[01:27] *** ChanServ sets mode: +v statisfiable6

[01:29] *** statisfiable6 left
[01:30] *** bloatable6 joined
[01:30] *** committable6 joined
[01:30] *** evalable6 joined
[01:30] *** greppable6 joined
[01:30] *** quotable6 joined
[01:30] *** ChanServ sets mode: +v bloatable6

[01:30] *** ChanServ sets mode: +v committable6

[01:30] *** ChanServ sets mode: +v evalable6

[01:30] *** ChanServ sets mode: +v greppable6

[01:30] *** ChanServ sets mode: +v quotable6

[01:30] *** unicodable6 joined
[01:30] *** benchable6 joined
[01:30] *** bisectable6 joined
[01:30] *** ChanServ sets mode: +v unicodable6

[01:30] *** ChanServ sets mode: +v benchable6

[01:30] *** ChanServ sets mode: +v bisectable6

[01:30] *** statisfiable6 joined
[01:30] *** ChanServ sets mode: +v statisfiable6

[01:37] *** jnthn left
[01:37] *** jnthn joined
[01:37] *** Mithaldu left
[01:43] *** Mithaldu joined
[01:44] *** ilbot3 left
[01:48] *** ilbot3 joined
[01:48] *** ChanServ sets mode: +v ilbot3

[01:50] *** araujo joined
[01:59] *** Cabanossi left
[02:01] *** Cabanossi joined
[02:09] *** eythian left
[02:10] *** kurahaupo_ joined
[02:11] *** rouking left
[02:13] *** mr-foobar left
[02:13] *** kurahaupo left
[02:14] *** eythian joined
[02:14] *** eythian left
[02:14] *** eythian joined
[02:17] *** cdg joined
[02:17] <[Coke]_> samcv: what is "userwide" ?

[02:17] *** [Coke]_ is now known as [Coke]

[02:18] <[Coke]> https://github.com/perl6/doc/blob/4b3297906eaca7a8dd1440c5d37bf49118f8fe26/doc/Language/unicode_entry.pod6#L53 ?

[02:18] *** andrewalker left
[02:19] *** kurahaupo_ left
[02:19] *** dj_goku joined
[02:20] *** kurahaupo_ joined
[02:20] *** kurahaupo_ left
[02:21] <[Coke]> .tell samcv userwide is used in doc/Language/unicode_entry.pod6 but refers to something that doesn't exist. I added it to the list of words to quiet the spellchecker; if you remove it from the doc, please also remove it from xt/words.pws

[02:21] <yoleaux> [Coke]: I'll pass your message to samcv.

[02:22] <Geth> ¦ doc/master: 5 commits pushed by (Will "Coke" Coleda)++

[02:22] <Geth> ¦ doc/master: bd19cfd238 | remove trailing whitespace

[02:22] <Geth> ¦ doc/master: 5b064242e4 | Check all pod files, allow list on command line

[02:22] <Geth> ¦ doc/master: 7820889775 | use nbsp

[02:22] <Geth> ¦ doc/master: c3958e1b01 | not perl6 code, don’t test it

[02:22] <Geth> ¦ doc/master: 7eef25ad58 | fix typos, learn words

[02:22] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/c21bf569ef...7eef25ad58

[02:23] <[Coke]> anyone know what the segfault Proc RT is?

[02:24] <samcv> [Coke], what do you mean about doesn't exist

[02:24] <yoleaux> 02:21Z <[Coke]> samcv: userwide is used in doc/Language/unicode_entry.pod6 but refers to something that doesn't exist. I added it to the list of words to quiet the spellchecker; if you remove it from the doc, please also remove it from xt/words.pws

[02:24] <samcv> i mean you want me to use a different word that passes spell check?

[02:25] <[Coke]> you refer to it "above". there is no instance of it above.

[02:27] *** noganex_ joined
[02:27] <[Coke]> (or anywhere else in doc/)

[02:29] *** noganex left
[02:35] <samcv> ah

[02:35] <samcv> it should say systemwide

[02:35] <samcv> not userwide

[02:35] <[Coke]> ah, thanks. want me to fix it?

[02:35] <samcv> yeah that would be great

[02:36] *** mr-foobar joined
[02:37] *** mcmillhj joined
[02:40] <Geth> ¦ doc: 2b913053d4 | (Will "Coke" Coleda)++ | 2 files

[02:40] <Geth> ¦ doc: fix typo

[02:40] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/2b913053d4

[02:40] <ugexe> perlpilot: i dunno if a bot still automatically changes meta.info -> meta6.json in the META.list

[02:40] <[Coke]> samcv++

[02:41] *** mcmillhj left
[02:44] *** astj joined
[02:47] *** mcmillhj joined
[02:48] *** dudz left
[02:48] *** dudz joined
[02:50] <samcv> hopefully my tips there can help someone out

[02:50] <samcv> since it took me some personal work to figure that out

[02:50] *** pilne left
[02:52] *** mcmillhj left
[02:57] *** Ben_Goldberg joined
[02:57] *** BenGoldberg left
[02:57] *** Ben_Goldberg is now known as BenGoldberg

[02:58] *** mcmillhj joined
[03:06] *** mcmillhj left
[03:08] *** aindilis` joined
[03:08] <Geth> ¦ doc: 82d7534112 | (Lloyd Fournier)++ (committed using GitHub Web editor) | doc/Type/Str.pod6

[03:08] <Geth> ¦ doc: Fix missing closing » in docs for Str.Int

[03:08] <Geth> ¦ doc: 

[03:08] <Geth> ¦ doc: which was causing Str.parse-base's heading to disappear

[03:08] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/82d7534112

[03:09] *** aindilis left
[03:10] *** plicease joined
[03:13] *** travis-ci joined
[03:13] <travis-ci> Doc build errored. Will "Coke" Coleda 'fix typos, learn words'

[03:13] <travis-ci> https://travis-ci.org/perl6/doc/builds/244769807 https://github.com/perl6/doc/compare/c21bf569ef52...7eef25ad580d

[03:13] *** travis-ci left
[03:18] *** mcmillhj joined
[03:21] *** cdg left
[03:23] *** mcmillhj left
[03:25] *** tyil left
[03:26] *** tyil joined
[03:27] *** Brock is now known as awwaiid

[03:29] *** mcmillhj joined
[03:30] *** Cabanossi left
[03:30] *** travis-ci joined
[03:30] <travis-ci> Doc build errored. Will "Coke" Coleda 'fix typo'

[03:30] <travis-ci> https://travis-ci.org/perl6/doc/builds/244772740 https://github.com/perl6/doc/compare/7eef25ad580d...2b913053d4fb

[03:30] *** travis-ci left
[03:31] *** Cabanossi joined
[03:34] *** mcmillhj left
[03:36] <lookatme> I have a script runing with old version(2017.05) rakudo, then I update rakudo to 2017.06, and rakudo throw an exception when script going on from **await Process**. Not a serious problem

[03:40] *** mcmillhj joined
[03:42] <samcv> m: my @files = (1,2,3).grep(/./) .flat.list».subst(/./, {"$0"})

[03:42] <camelia> rakudo-moar 6b634a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing « or »␤at <tmp>:1␤------> 3 @files = (1,2,3).grep(/./) .flat.list».7⏏5subst(/./, {"$0"})␤»

[03:42] <samcv> why doesn't this work?

[03:42] <samcv> m: my @files = (1,2,3).grep(/./).flat.list».subst(/./, {"$0"})

[03:42] <camelia> rakudo-moar 6b634a: OUTPUT: «Use of Nil in string context␤  in block  at <tmp> line 1␤Use of Nil in string context␤  in block  at <tmp> line 1␤Use of Nil in string context␤  in block  at <tmp> line 1␤»

[03:42] *** Cabanossi left
[03:42] <samcv> this is not an exact example but close of some code i'm writing. the problem is i need to split the methods accoss lines to make it look nicer, since there's a ton of methods

[03:43] <samcv> but it won't let me separate them

[03:44] *** mcmillhj left
[03:44] *** Cabanossi joined
[03:46] <ugexe> use unspace

[03:46] *** raschipi joined
[03:48] <ugexe> .grep(/./)\ \n .flat.list...

[03:50] *** mcmillhj joined
[03:57] *** mcmillhj left
[03:59] *** travis-ci joined
[03:59] <travis-ci> Doc build errored. Lloyd Fournier 'Fix missing closing » in docs for Str.Int

[03:59] <travis-ci> https://travis-ci.org/perl6/doc/builds/244777119 https://github.com/perl6/doc/compare/2b913053d4fb...82d753411238

[03:59] *** travis-ci left
[04:02] *** ramortegui left
[04:06] <llfourn_> "The job exceeded the maximum time limit for jobs, and has been terminated." on the docs build

[04:07] *** zacts left
[04:07] <raschipi> Yeah, every time travis complains about a doc build it's because it timed out.

[04:08] <llfourn_> raschipi: hmmm

[04:08] *** llfourn_ is now known as llfourn

[04:08] <llfourn> I restarted it to see if we have luck the second time

[04:09] <raschipi> samcv gets annoyed by it: https://irclog.perlgeek.de/perl6/2017-06-19#i_14752330

[04:10] <llfourn> :)

[04:10] <llfourn> I guess we have to build it somewhere else?

[04:10] <llfourn> or make it faster...

[04:10] <llfourn> maybe can we not build rakudo before building the docs

[04:11] <llfourn> but just use a binary

[04:11] <llfourn> or docker container

[04:11] <raschipi> which distro does it runs on?

[04:11] <llfourn> raschipi: ubuntu I think

[04:12] <raschipi> ubuntu will get a newishbinary rakudo from debian now that it got unfrozen.

[04:12] <llfourn> ill put an issue on the repo to discuss good idea

[04:16] <raschipi> A PPA could also be set up and make fresh binary rakudos available for travis to use

[04:16] <raschipi> This way the docs build is tested, but also the doc compiler

[04:18] <llfourn> raschipi: https://github.com/perl6/doc/issues/1384 # ideas can go here :)

[04:21] *** Celelibi left
[04:25] *** Celelibi joined
[04:25] *** grondilu left
[04:26] *** khw left
[04:28] *** grondilu joined
[04:30] *** eythian_ joined
[04:30] *** eythian left
[04:38] *** raschipi left
[04:39] *** grondilu left
[04:39] *** mcmillhj joined
[04:41] *** grondilu joined
[04:44] *** mcmillhj left
[04:44] *** curan joined
[04:48] *** wigner joined
[04:50] *** mcmillhj joined
[04:54] *** mcmillhj left
[04:57] *** travis-ci joined
[04:57] <travis-ci> Doc build errored. Lloyd Fournier 'Fix missing closing » in docs for Str.Int

[04:57] <travis-ci> https://travis-ci.org/perl6/doc/builds/244777119 https://github.com/perl6/doc/compare/2b913053d4fb...82d753411238

[04:57] *** travis-ci left
[05:03] *** wamba joined
[05:04] *** cgfbee left
[05:06] *** Cabanossi left
[05:09] *** Cabanossi joined
[05:09] *** bwisti left
[05:11] *** mcmillhj joined
[05:15] *** mcmillhj left
[05:19] *** cgfbee joined
[05:22] *** Sense8 joined
[05:34] *** nadim_ joined
[05:36] *** mcmillhj joined
[05:41] *** mcmillhj left
[05:42] *** xtreak joined
[05:45] *** nadim_ left
[05:45] <[Coke]> m: #`

[05:45] <camelia> rakudo-moar 6b634a: ( no output )

[05:46] *** lowbro joined
[05:46] *** lowbro left
[05:46] *** lowbro joined
[05:49] *** mcmillhj joined
[05:53] *** Cabanossi left
[05:54] *** Cabanossi joined
[05:54] *** mcmillhj left
[06:01] *** mcmillhj joined
[06:02] <Geth> ¦ doc: 3c7fe8afb7 | (Will "Coke" Coleda)++ | xt/examples-compilation.t

[06:02] <Geth> ¦ doc: Add support for ENV<P6_DOC_TEST_FUDGE>

[06:02] <Geth> ¦ doc: 

[06:02] <Geth> ¦ doc: if set to a true value, will run all skip-test tests as TODOs,

[06:02] <Geth> ¦ doc: allowing passing code snippets to be identified, :skip-test removed

[06:02] <Geth> ¦ doc: 

[06:02] <Geth> ¦ doc: Resolves #1377

[06:02] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/3c7fe8afb7

[06:02] <Geth> ¦ doc: 0b5126a577 | (Will "Coke" Coleda)++ | 59 files

[06:02] <Geth> ¦ doc: unfudge many unneeded :skip-tests

[06:02] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0b5126a577

[06:05] *** jonas1 joined
[06:06] *** mcmillhj left
[06:06] *** BenGoldberg left
[06:08] <Geth> ¦ doc: 3a1c8f8864 | (Samantha McVey)++ | 2 files

[06:08] <Geth> ¦ doc: [unicode-grant] add info on parse-names to unicode page

[06:08] <Geth> ¦ doc: 

[06:08] <Geth> ¦ doc: Also link to the Unicode page from the Language/quoting

[06:08] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/3a1c8f8864

[06:10] *** cpage__ left
[06:12] *** mcmillhj joined
[06:17] *** mcmillhj left
[06:22] *** Cabanossi left
[06:23] *** nebuchadnezzar joined
[06:24] *** Cabanossi joined
[06:24] *** nadim_ joined
[06:29] *** mcmillhj joined
[06:31] *** rindolf joined
[06:32] *** aborazmeh joined
[06:32] *** aborazmeh left
[06:32] *** aborazmeh joined
[06:34] *** mcmillhj left
[06:38] *** andrzejku_ left
[06:40] *** jargan is now known as jast

[06:41] *** aborazmeh left
[06:44] *** aborazmeh joined
[06:44] *** aborazmeh left
[06:44] *** aborazmeh joined
[06:45] *** domidumont joined
[06:45] <Geth> ¦ doc: 17ad67fd63 | (Will "Coke" Coleda)++ | 2 files

[06:45] <Geth> ¦ doc: test traps file for compilable code

[06:45] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/17ad67fd63

[06:45] <Geth> ¦ doc: f65904cf2e | (Will "Coke" Coleda)++ | doc/Language/traps.pod6

[06:45] <Geth> ¦ doc: format with OUTPUT, avoid command line invocations

[06:45] <Geth> ¦ doc: 

[06:45] <Geth> ¦ doc: Add a skip reason for non-perl6 code.

[06:45] <Geth> ¦ doc: 

[06:45] <Geth> ¦ doc: Resolves #1386

[06:46] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f65904cf2e

[06:46] <Geth> ¦ doc: 586958da17 | (Will "Coke" Coleda)++ | doc/Language/unicode.pod6

[06:46] <Geth> ¦ doc: fix grammar-o

[06:46] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/586958da17

[06:46] *** ponbiki_ left
[06:46] *** abraxxa joined
[06:46] *** mcmillhj joined
[06:49] *** ufobat joined
[06:50] *** domidumont left
[06:51] *** mcmillhj left
[06:51] *** domidumont joined
[06:52] *** travis-ci joined
[06:52] <travis-ci> Doc build errored. Will "Coke" Coleda 'unfudge many unneeded :skip-tests'

[06:52] <travis-ci> https://travis-ci.org/perl6/doc/builds/244806794 https://github.com/perl6/doc/compare/82d753411238...0b5126a5772e

[06:52] *** travis-ci left
[06:53] <[Coke]> regarding the travis doc builds, see also: https://github.com/perl6/doc/issues/788

[06:54] *** Sense8 left
[06:56] *** bpmedley joined
[06:58] *** Sense8 joined
[06:59] *** Sense8 left
[06:59] *** travis-ci joined
[06:59] <travis-ci> Doc build errored. Samantha McVey '[unicode-grant] add info on parse-names to unicode page

[06:59] <travis-ci> https://travis-ci.org/perl6/doc/builds/244807941 https://github.com/perl6/doc/compare/0b5126a5772e...3a1c8f8864eb

[06:59] *** travis-ci left
[06:59] *** ponbiki joined
[06:59] *** Sense8 joined
[07:00] *** amaneureka joined
[07:01] *** ChoHag joined
[07:01] *** Sense8 left
[07:02] *** wamba left
[07:03] *** cpage_ joined
[07:07] *** Sense8 joined
[07:07] *** LukeCage joined
[07:07] *** LukeCage left
[07:08] *** domidumont left
[07:08] *** Sense8 left
[07:08] *** Sense8 joined
[07:09] *** Sense8 left
[07:09] *** Sense8 joined
[07:09] *** Sense8 left
[07:09] *** domidumont joined
[07:16] *** mcmillhj joined
[07:21] *** mcmillhj left
[07:22] *** Cabanossi left
[07:24] *** Cabanossi joined
[07:33] *** smilo joined
[07:36] *** jeek_ is now known as jeek

[07:36] *** travis-ci joined
[07:36] <travis-ci> Doc build errored. Will "Coke" Coleda 'fix grammar-o'

[07:36] <travis-ci> https://travis-ci.org/perl6/doc/builds/244815804 https://github.com/perl6/doc/compare/3a1c8f8864eb...586958da170e

[07:36] *** travis-ci left
[07:36] *** dakkar joined
[07:39] *** AlexDaniel left
[07:40] *** lizmat joined
[07:43] * lizmat clickbaits https://p6weekly.wordpress.com/2017/06/19/2017-25-perl-6-books/

[07:43] *** TimToady left
[07:44] *** smilo left
[07:44] <moritz> lizmat++

[07:50] *** mcmillhj joined
[07:52] <lookatme> lizmat++

[07:53] *** Cabanossi left
[07:54] *** Cabanossi joined
[07:55] *** mcmillhj left
[07:56] *** zakharyas joined
[08:00] *** ambs_ is now known as ambs

[08:01] *** wamba joined
[08:03] *** domidumont left
[08:04] *** domidumont joined
[08:05] *** keylet joined
[08:05] *** culb left
[08:05] *** zengargoyle left
[08:05] *** zengargoyle joined
[08:06] <keylet> is it possible to get SQLite database schema with DBIish?

[08:07] <keylet> table foo(quick int, brown text, fox text) etc.

[08:07] *** nightfrog joined
[08:15] <samcv> this can't do at all

[08:15] <Geth> ¦ doc: d5f31ba0f3 | (Samantha McVey)++ | .travis.yml

[08:15] <Geth> ¦ doc: [travis-ci]: enable caching some directories to speed up build

[08:15] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d5f31ba0f3

[08:15] <samcv> hopefully i can get the build actually completing in time

[08:15] <samcv> keylet, haven't tried it but i'm pretty sure you can use SQLite with DBIish

[08:15] <samcv> almost certain

[08:17] *** zakharyas left
[08:17] *** TimToady joined
[08:22] *** Cabanossi left
[08:22] *** xtreak left
[08:23] *** xtreak joined
[08:23] *** mcmillhj joined
[08:24] *** Cabanossi joined
[08:25] *** xtreak left
[08:26] *** xtreak joined
[08:28] *** mcmillhj left
[08:30] *** xtreak left
[08:31] *** eythian_ is now known as eythian

[08:34] *** mcmillhj joined
[08:34] *** xerx left
[08:39] *** mcmillhj left
[08:40] *** xtreak joined
[08:47] *** xerx joined
[08:56] * moritz has done so several times

[08:57] *** andrewalker joined
[09:01] *** |oLa| joined
[09:05] *** travis-ci joined
[09:05] <travis-ci> Doc build errored. Samantha McVey '[travis-ci]: enable caching some directories to speed up build'

[09:05] <travis-ci> https://travis-ci.org/perl6/doc/builds/244839079 https://github.com/perl6/doc/compare/586958da170e...d5f31ba0f33f

[09:05] *** travis-ci left
[09:06] <geekosaur> "welp"

[09:06] <samcv> hmm i wonder if it uploads even if the build timesout

[09:06] * samcv restarts the build

[09:06] *** literal_ is now known as literal

[09:07] *** domidumont left
[09:07] <samcv> may need to edit travis to not build the docs so it will cache rakudo/highlighter/modules installed

[09:07] <samcv> and hopefully get the time down

[09:08] *** Cabanossi left
[09:09] *** Cabanossi joined
[09:10] <llfourn> samcv: not to build the docs? isn't that the point of it?

[09:10] <samcv> it is

[09:10] <samcv> but it times out before finishing. and i just enabled caching

[09:10] <samcv> so i think it's not uploading the cache

[09:10] <llfourn> ahhh

[09:11] <llfourn> so you can't cache because it doesn't finish because it hasn't cached?

[09:11] <samcv> yes :)

[09:12] <samcv> we have never had caching, but the continuing timeouts seem to be telling me to do it...

[09:12] <llfourn> yep caching the precomp should shave a few mins of the build at least

[09:12] *** domidumont joined
[09:13] <llfourn> but having said that it will nuke the precomp everytime we have a new build

[09:13] *** Xliff left
[09:13] *** parv joined
[09:13] <llfourn> we have an issue here btw: https://github.com/perl6/doc/issues/1384#issuecomment-309640682

[09:13] <samcv> yeah there are downsides like that but

[09:14] <samcv> have to start somewhere

[09:14] <samcv> also can not recompile unless rakudo has changed

[09:15] *** Xliff joined
[09:21] *** rindolf left
[09:24] *** domidumont left
[09:27] *** parvx joined
[09:28] *** parv left
[09:33] *** xtreak left
[09:40] *** itaylor57 left
[09:41] *** smash_ is now known as smash

[09:44] *** lookatme left
[09:45] *** xtreak joined
[09:46] *** El_Che left
[09:47] *** El_Che joined
[09:57] *** lowbro left
[09:57] *** travis-ci joined
[09:57] <travis-ci> Doc build errored. Samantha McVey '[travis-ci]: enable caching some directories to speed up build'

[09:57] <travis-ci> https://travis-ci.org/perl6/doc/builds/244839079 https://github.com/perl6/doc/compare/586958da170e...d5f31ba0f33f

[09:57] *** travis-ci left
[10:03] *** parvx left
[10:05] *** pmurias joined
[10:05] <pmurias> what's the difference between the UCD and Unicode-Grant repos?

[10:11] <Geth> Swapped META.info → META6.json in 6 dists in https://github.com/perl6/ecosystem/commit/cdbcf109cc

[10:15] *** Ven joined
[10:16] *** Ven is now known as Guest43010

[10:19] *** amaneureka left
[10:20] *** Guest43010 is now known as Ven``

[10:21] *** Cabanossi left
[10:24] *** Cabanossi joined
[10:26] *** astj left
[10:27] *** astj joined
[10:27] *** astj left
[10:27] *** astj joined
[10:28] <Ven``> are precompiled files system-dependant?

[10:28] <Ven``> i.e. https://github.com/rakudo/rakudo/commit/274e7c04138945a66cb27d2b6263314d1bcf9798#diff-46c614d02a521f19ca1434a0bc674546R15 let's say this got precompiled, could this be an issue if the precompiled files got to another computer?

[10:30] <jnthn> Ven``: In this case it wouldn't be because lexicals in non-closure situations aren't serialized, so this will be set up at startup each time.

[10:31] *** zakharyas joined
[10:31] <jnthn> In genearl, though, yes, if you share precomps between machines, you can hit issues

[10:31] <jnthn> *general

[10:32] <jnthn> Or put another way, if you want portable pre-comp output, you need to be careful what you do at compile time :)

[10:33] <Ven``> Thanks :).

[10:34] *** lowbro joined
[10:34] *** lowbro left
[10:34] *** lowbro joined
[10:40] *** wigner left
[10:40] *** wigner joined
[10:45] <Geth> ¦ doc: 82b77a11e6 | (Samantha McVey)++ | .travis.yml

[10:45] <Geth> ¦ doc: [travis-ci] disable doc build temporarily

[10:45] <Geth> ¦ doc: 

[10:45] <Geth> ¦ doc: Hopefully we can get the build files cached this way

[10:45] <Geth> ¦ doc: and the build won't timeout.

[10:45] <Geth> ¦ doc: 

[10:45] <Geth> ¦ doc: Also disable the OS X build which was never useful anyway.

[10:45] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/82b77a11e6

[10:47] *** itaylor57 joined
[10:52] *** Cabanossi left
[10:52] *** breinbaa1 left
[10:53] *** breinbaas joined
[10:54] *** Cabanossi joined
[11:00] *** travis-ci joined
[11:00] <travis-ci> Doc build passed. Samantha McVey '[travis-ci] disable doc build temporarily

[11:00] <travis-ci> https://travis-ci.org/perl6/doc/builds/244885433 https://github.com/perl6/doc/compare/d5f31ba0f33f...82b77a11e618

[11:00] *** travis-ci left
[11:04] <Geth> ¦ doc: 03b510a9ab | (Samantha McVey)++ | .travis.yml

[11:04] <Geth> ¦ doc: [travis-ci] add back build

[11:04] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/03b510a9ab

[11:04] *** xtreak left
[11:06] *** Ven`` left
[11:09] *** esh_ left
[11:10] *** robertle joined
[11:14] *** esh joined
[11:16] *** salva left
[11:16] *** TEttinger left
[11:22] <robertle> is there a clever way to check if a IO::Path is "under" another one? I can of course recurse on .parent until I have reached the root, but there must be a better way...

[11:23] <nine_> robertle: $child.Str.starts-with($root.Str)? Depends on how many real world cases you need to cover. Symlinks can make this a mess.

[11:24] <robertle> nine_: ok, I can resolve() both of them to sort out the symlinks (?) but I think I need to cover most cases, this could be a security problem otherwise

[11:27] <nine_> robertle: ok, if security is an issue, forget my suggestion :) Can you re-define your problem maybe? Could you change it so, instead of having two absolute path, you only have one absolute root and relative paths?

[11:28] <robertle> totally, good idea

[11:28] *** xtreak joined
[11:30] *** obarb is now known as brabo

[11:30] *** eveo joined
[11:30] <eveo> buggable: eco secure

[11:30] <buggable> eveo, IO::Path::ChildSecure 'Secure version of IO::Path.child': https://github.com/zoffixznet/perl6-IO-Path-ChildSecure

[11:30] <eveo> robertle: ^

[11:31] *** xtreak left
[11:31] *** xtreak joined
[11:32] <eveo> And 

[11:32] <eveo> And .Str is a wrong way to stringify a path

[11:33] *** BuildTheRobots left
[11:35] <robertle> ah, great

[11:35] <eveo> https://docs.perl6.org/language/io-guide#Stringifying_IO::Path

[11:35] *** xtreak left
[11:36] *** BuildTheRobots joined
[11:42] *** salva joined
[11:43] <eveo> and no, meta.info -> meta6.json script no longer runming in cron

[11:44] <eveo> I just run it manually once in a blue moon

[11:44] <eveo> buggable: eco

[11:44] <buggable> eveo, Out of 843 Ecosystem dists, 0 have warnings, 6 have errors, and 0 have no tags in META file. See https://modules.perl6.org/update.log for details

[11:45] <eveo> tis the 6 that got fixed now

[11:45] *** eveo left
[11:54] *** travis-ci joined
[11:54] <travis-ci> Doc build errored. Samantha McVey '[travis-ci] add back build'

[11:54] <travis-ci> https://travis-ci.org/perl6/doc/builds/244891299 https://github.com/perl6/doc/compare/82b77a11e618...03b510a9abd3

[11:54] *** travis-ci left
[11:57] *** rindolf joined
[12:03] *** itaipu joined
[12:13] <[Coke]> (docs) I un-skipped a bunch of tests last night. have one that is now :skip-test<perl5> - going to change that to :lang<perl5>, and then we will skip code with skip-test and any :lang that isn't perl6 (so we can annotate the ruby & haskell files as well, which are half each; we could then also have a prayer of the syntax highlighter being right for langs other than perl6.

[12:13] <[Coke]> s/of tests/of example code/

[12:20] *** BenGoldberg joined
[12:23] *** Cabanossi left
[12:24] *** Cabanossi joined
[12:32] *** cyphase left
[12:34] *** wamba left
[12:35] *** BenGoldberg left
[12:37] *** cyphase joined
[12:42] *** jonas1 left
[12:46] *** lichtkind joined
[12:48] *** mcmillhj joined
[12:51] <pmurias> why doesn't docs.perl6.org searchbox find the &val sub?

[12:53] <ilmari> pmurias: https://docs.perl6.org/routine/val is there, quite a way down

[12:53] <ilmari> under "Sub"

[13:02] *** DesertJellyfish is now known as VegetarianFalcon

[13:02] *** VegetarianFalcon is now known as VeganFalcon

[13:04] *** nadim_ left
[13:10] *** AlexDaniel joined
[13:14] *** mniip left
[13:15] <TimToady> hi everyone, yer up on the screen at TPC::NA

[13:15] *** mniip joined
[13:15] <moritz> \o

[13:15] *** perlpilot_ joined
[13:16] <moritz> I guess now would be a good time to run some text-based ads, right? :-)

[13:16] <El_Che> TPC

[13:16] <El_Che> I liked YAPC better :)

[13:16] <tadzik> o/

[13:16] <TimToady> now we're "tipsy"

[13:17] <tadzik> Hm, are the talks streamed?

[13:17] <perlpilot_> As long as TPC doesn't turn into another OSCON we're doing good :)

[13:17] <El_Che> haha

[13:18] *** dmaestro joined
[13:19] *** perlpilot_ left
[13:19] *** perlpilot_ joined
[13:20] *** sjn_ is now known as sjn

[13:20] *** mmcclimon joined
[13:21] *** perlpilot left
[13:21] *** perlpilot_ is now known as perlpilot

[13:22] <tbrowder> o/

[13:22] *** wigner left
[13:23] *** mmcclimon left
[13:24] <TimToady> just recorded, not live, afaik

[13:24] * sjn wishes they were streamed

[13:25] <sjn> btw, does TPF have an irc channel?

[13:26] <dmaestro> sjn: [ssl.]irc.perl.org - ports are listed on www.irc.perl.org

[13:26] <dmaestro> The ports are blocked at USPTO, though :-(

[13:26] <perlpilot> I would guess a TPF channel would be awfully quiet

[13:27] <dmaestro> #yapc

[13:27] <dmaestro> ;-)

[13:27] <sjn> yeah. I see there's a #tpf on freenoode with obra and ingy in it. :)

[13:27] <TimToady> twitter tag is #tpc2017dc

[13:29] *** neemie joined
[13:31] *** Armitage joined
[13:32] *** neemie left
[13:33] *** VeganFalcon is now known as DesertJellyFish

[13:34] *** ChoHag left
[13:37] <obra> sjn: I'm happy to part if you want :)

[13:41] *** ChoHag joined
[13:41] *** cdg joined
[13:43] *** jacob6 joined
[13:49] *** curan left
[13:51] *** perlpilot left
[13:52] *** Cabanossi left
[13:53] *** perlpilot joined
[13:54] *** Cabanossi joined
[13:55] *** araraloren joined
[13:55] <araraloren> hi

[13:56] <araraloren> How Can I hold a reference of another variable/object in class ?

[13:59] <timotimo> well, objects you can easily reference

[13:59] *** raschipi joined
[13:59] <araraloren> Can you show me some example ?

[14:00] <moritz> m: my $x = 1/3; $x is a reference to a Rat

[14:00] <camelia> rakudo-moar f03a17: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my $x = 1/3; $x7⏏5 is a reference to a Rat␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modif…»

[14:00] <moritz> m: my $x = 1/3; # $x is a reference to a Rat

[14:00] <camelia> rakudo-moar f03a17: ( no output )

[14:00] <araraloren> m: class F { has $.ref is rw; }; my $f = F.new; $f.ref := 3;

[14:00] <camelia> rakudo-moar f03a17: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use bind operator with this left-hand side␤at <tmp>:1␤------> 3ref is rw; }; my $f = F.new; $f.ref := 37⏏5;␤»

[14:01] <timotimo> m: class Holder { has $.reference }; my $foo = [1, 2, 3]; my $h = Holder.new(reference => $foo); say $h.perl; $foo[2] = 99; say $h.perl

[14:01] <camelia> rakudo-moar f03a17: OUTPUT: «Holder.new(reference => $[1, 2, 3])␤Holder.new(reference => $[1, 2, 99])␤»

[14:01] <pmurias> the YAPC::EU rakudo.js talk has been accepted :)

[14:01] <perlpilot> pmurias: congrats!

[14:03] <[Coke]> if we have perl6-gdb-m, I wonder if we should also have perl6-lldb-m 

[14:03] <[Coke]> pmurias++

[14:03] <araraloren> m: class Holder { has $.reference }; my $foo = [1, 2, 3]; my $h = Holder.new(reference => $foo); say $h.perl; $foo.push(42); say $h.perl

[14:03] <camelia> rakudo-moar f03a17: OUTPUT: «Holder.new(reference => $[1, 2, 3])␤Holder.new(reference => $[1, 2, 3, 42])␤»

[14:04] <raschipi> Everything is reference. You get a reference, you get a reference, everyone gets a reference!

[14:05] <araraloren> m: class Holder { has $.reference }; my $foo = [1, 2, 3]; my $h = Holder.new(reference => $foo); say $h.perl; $foo = "123"; say $h.perl

[14:05] <camelia> rakudo-moar f03a17: OUTPUT: «Holder.new(reference => $[1, 2, 3])␤Holder.new(reference => $[1, 2, 3])␤»

[14:06] <araraloren> Oh, That's make sense, thanks timotimo 

[14:07] *** jacob6 left
[14:11] *** zakharyas left
[14:11] *** zakharyas joined
[14:15] *** cdg left
[14:16] *** zakharyas left
[14:18] *** astj left
[14:22] *** Armitage left
[14:25] *** dmaestro left
[14:31] *** ruoso joined
[14:36] *** alimon joined
[14:48] *** xzhao left
[14:51] *** aborazmeh left
[14:52] *** zakharyas joined
[14:54] *** lowbro left
[14:57] *** xzhao joined
[14:58] *** Cabanossi left
[14:58] *** cdg joined
[14:59] *** Cabanossi joined
[15:01] *** Geth left
[15:18] *** khw joined
[15:19] *** bwisti joined
[15:22] *** konsolebox_ joined
[15:23] *** konsolebox left
[15:25] *** devmikey joined
[15:26] *** devmikey left
[15:26] *** devmikey joined
[15:35] *** mniip left
[15:38] *** dmaestro joined
[15:44] *** ccntrq left
[15:45] *** ccntrq joined
[15:48] *** mniip joined
[15:51] *** nadim_ joined
[15:55] *** abraxxa left
[15:56] *** zakharyas left
[15:58] *** zakharyas joined
[16:04] *** st_elmo joined
[16:04] *** nadim_ left
[16:04] *** nadim_ joined
[16:08] *** st_elmo left
[16:09] *** dmaestro left
[16:10] *** araraloren left
[16:18] *** st_elmo joined
[16:18] <awwaiid> In case anyone is here at TPC-2017-DC aka YAPC, there's a BOF tonight for perl6 -- https://github.com/dcbpw/tpc-2017-dc/wiki#bofs

[16:19] *** |oLa| left
[16:20] *** Geth joined
[16:20] *** ChanServ sets mode: +v Geth

[16:27] *** zakharyas left
[16:38] <tbrowder> see you at BOF, awwaiid

[16:40] *** dakkar left
[16:42] *** pilne joined
[16:46] <ruoso> I briefly mentioned my idea for a web action dispatching framework after the talk about handling subcommands in MAIN... I decided to make a small proof of concept of how that would look like... https://gist.github.com/anonymous/e52cfc09d2476bbf8010a8b40a9984c0 what do you folks think of that approach? 

[16:46] <ruoso> Of course this would be wrapped in some nicer syntax and things would have proper type names and stuff, but I wanted to see some early feedback on the concept

[16:48] <moritz> ruoso: I've considered the same approach; it has a few downsides

[16:48] <moritz> one is that tie breaking becomes pretty hard to do

[16:48] <moritz> from a Perl 6 type perspective, both a literal and a regex are just constraints, so you can't say that a literal binds tighter than a regex

[16:49] <ruoso> well, but if you have ambiguous resolution within each of those steps, I'd say the app has some design issues

[16:50] <ruoso> because you need to be ambiguous afte the resolution of earlier parts of the request path were already resolved

[16:50] <moritz> maybe

[16:50] <moritz> but still, you're tied to the design of the multi dispatcher

[16:50] <moritz> which might or might not be a good fit for route dispatching

[16:50] <ruoso> which scenario do you think this would fall apart?

[16:51] <moritz> maybe if you model request types as enum types, you get easier ANY vs. GET dispatching

[16:52] <ruoso> well, the signature could say any('GET', 'POST')... but I don't think I ever came across a situation where I would handle both methods with the same action

[16:52] <moritz> ruoso: I don't know, but since you aren't using types, you don't take advantage of the topological sorting

[16:52] <moritz> so you're back to just arity and constraints

[16:53] <ruoso> well, the strings here are just a placeholder

[16:53] *** kurahaupo joined
[16:53] <ruoso> "foo handler" would be a type that describes the context built up to that point

[16:53] *** kurahaupo left
[16:53] <moritz> I've used the same handlers for GET and for POST in several web apps already

[16:53] <moritz> ah, that changes things

[16:53] <ruoso> hmm... now I'm curious... what's the use case?

[16:53] *** kurahaupo joined
[16:53] *** kurahaupo left
[16:54] <moritz> normal web pages with forms, for example

[16:54] <moritz> on the initial GET, you load the form

[16:55] <moritz> on POST, you validate, and if validation fails, you need to build the same form again

[16:56] <moritz> so the difference between GET and POST is pretty small, and putting them in the same handler (with a small case distinction) can be a good tradeoff

[16:56] <ruoso> I see... yeah, any('GET', 'POST') could make sense... but most likely I would declare both and just have the GET do a straight forward to the view, while the POST would do the validation and then forward to the view otherwise

[16:56] <moritz> also, a search page that allows you both to submit the form, or to supply the search terms through the URL

[16:57] *** kurahaupo joined
[16:57] <ruoso> although that is usually only via GET, because you don't want POST resubmission in those cases

[16:58] <moritz> YMMV :-)

[16:58] <ruoso> the thing that I'm missing on this, tho, is the method not supported

[16:58] <ruoso> as it is now, this would actually give a 404 on a non-supported method instead of the proper error code

[16:59] <ruoso> but I guess a higher-level framework could generate default handlers for the other methods that return the error code instead

[16:59] <moritz> and now you're working around limitations

[16:59] *** wamba joined
[17:00] <ruoso> well, sure, nothing is perferct

[17:00] <ruoso> not even my typing

[17:03] <raschipi> Those limitations can be worked around by doing own dispatch, right? P6 is handy when it fits but it's always possible to have a dispatch table.

[17:04] *** |oLa| joined
[17:06] *** lostinfog joined
[17:06] <ruoso> well, but the point of this exercise would be to delegate the dispatch to the multi itself, rather than having to implement that myself...

[17:10] <ugexe> if both get and post need to load some data, why not put the loading code in the proto, have the get dispatch be essentially empty other than the render call and post can do validation on the data still

[17:12] *** jercos_ is now known as jercos

[17:17] *** itaipu left
[17:19] *** itaipu joined
[17:20] <ruoso> ugexe: my usual pattern with Catalyst is to have an intermediate action that loads the data, and then a final action that acts on it on the specific method

[17:21] <ruoso> on that mockup, the one that returns "foo handler" is the one doing the loading, then you have a separate action that is the "final" action on the chain

[17:25] <ruoso> side question: do we have a pre-declared subset of Str where it can be numified to an Int?

[17:25] <ugexe> proto foobar { do_init_stuff(); {*}; do_cleanup_stuff(); }

[17:25] *** AlexDaniel left
[17:26] <timotimo> i don't think we do

[17:26] <timotimo> m: subset NumyString of Str where +*; say "hello" ~~ NumyString; say "99" ~~ NumyString

[17:27] <camelia> rakudo-moar 79ce1a: OUTPUT: «False␤True␤»

[17:27] <ugexe> m: my $x = <2>; say $x.perl; # cant use IntStr somehow to do it?

[17:27] <camelia> rakudo-moar 79ce1a: OUTPUT: «IntStr.new(2, "2")␤»

[17:27] <lizmat> ruoso: there's allomorphs (aka IntStr)

[17:27] <lizmat> m: dd <42>

[17:27] <camelia> rakudo-moar 79ce1a: OUTPUT: «IntStr.new(42, "42")␤»

[17:27] <timotimo> but strings that look like int don't turn into IntStr by themselves

[17:28] <ruoso> m: multi foo(IntStr $f) { say $f }; foo("42")

[17:28] <camelia> rakudo-moar 79ce1a: OUTPUT: «Cannot resolve caller foo(Str); none of these signatures match:␤    (IntStr $f)␤  in block <unit> at <tmp> line 1␤␤»

[17:28] <timotimo> of course you can just have a coercive type constraint

[17:28] <raschipi> m: multi foo(Str(IntStr) $f) { say $f }; foo("42")

[17:28] <timotimo> m: multi foo(Int() $a) { say $a }; foo("99")

[17:28] <camelia> rakudo-moar 79ce1a: OUTPUT: «Resource temporarily unavailable»

[17:28] <camelia> rakudo-moar 79ce1a: OUTPUT: «99␤»

[17:29] <timotimo> m: multi foo(Int() $a) { say $a }; foo("oh my god")

[17:29] <ruoso> ah, I was wondering if there was a way to do that

[17:29] <ruoso> that's actually even better

[17:29] <camelia> rakudo-moar 79ce1a: OUTPUT: «Resource temporarily unavailable»

[17:29] <timotimo> m: multi foo(Int() $a) { say $a }; foo("oh my god")

[17:29] <camelia> rakudo-moar 79ce1a: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5oh my god' (indicated by ⏏)␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:29] <timotimo> oh, huh, that throws, eh?

[17:30] <ugexe> can we monkey patch coercion methods into core classes and have it work?

[17:31] <ugexe> that'd probably affect everything though

[17:31] <ruoso> oh, indeed, that doesn't act as a subset

[17:31] <raschipi> m: multi foo(Int(Str) $a) { say $a }; foo(23)

[17:31] <camelia> rakudo-moar 79ce1a: OUTPUT: «Type check failed in binding to parameter '$a'; expected Str but got Int (23)␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:34] <raschipi> Numeric(Str) is a signature will do that, it will only accept strings that can be turned into a number.

[17:35] <ruoso> raschipi: but it aborts the whole thing instead of failing with X::Multi::NoMatch

[17:35] <SmokeMachine> hi there! Does any one know if is there any HTTP2 client being implemented?

[17:36] <raschipi> m: say "4200000000000000000000000000000000000000000000000000000000+30000000000000000000000000000000000000000000000000000i".Numeric

[17:36] <camelia> rakudo-moar 79ce1a: OUTPUT: «4.2e+57+3e+52i␤»

[17:36] <raschipi> That's confusing...

[17:36] <ruoso> m: subset StrToInt of Str where +*; multi foo(Int(StrToInt) $f) { say $f }; foo("42");

[17:36] <camelia> rakudo-moar 79ce1a: OUTPUT: «===SORRY!===␤Cannot invoke this object (REPR: Null; VMNull)␤»

[17:37] <ruoso> huh, that just worked locally here

[17:39] <ruoso> well, that exactly thing fails, but the more elaborate case works

[17:39] <raschipi> m: subset StrToInt of Str where {+$_}; multi foo(Int(StrToInt) $f) { say $f }; foo("42"); #This way the error is different

[17:39] <camelia> rakudo-moar 79ce1a: OUTPUT: «Use of uninitialized value of type Str in numeric context␤  in block  at <tmp> line 1␤42␤»

[17:40] * ruoso preparing a rakudobug

[17:40] <ruoso> or do we do github this days?

[17:40] <raschipi> rakudobug

[17:41] <raschipi> github for docs, roast

[17:42] <ruoso>  #131610

[17:42] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131610

[17:42] <ugexe> SmokeMachine: im not aware of one

[17:42] <ruoso> there's libCurl

[17:43] <ugexe> SmokeMachine: something that could handle multiple streams (per the spec) would be really cool

[17:43] *** grondilu_ joined
[17:43] <SmokeMachine> ugexe: yes, it would! :)

[17:44] <ruoso> just yesterday we had a talk here on how awesome just using the native libcurl was

[17:45] <SmokeMachine> curl does "accept" v2, right?!

[17:45] <ugexe> ==>> (NYI) seems like it would be nice for writing that type of stream stuff

[17:45] <ruoso> SmokeMachine: it has support for it, but I'm not sure if it's enabled by default on most builds

[17:46] *** grondilu left
[17:47] *** cowens joined
[17:47] <cowens> can someone explain what the output from buf8.new(0x65, 0xCC, 0x81).decode("utf8-c8").ords.fmt("U+%04x") means?

[17:48] <[Coke]> m: say buf8.new(0x65, 0xCC, 0x81).decode("utf8-c8").ords.fmt("U+%04x")

[17:48] <camelia> rakudo-moar 79ce1a: OUTPUT: «U+0065 U+10fffd U+0078 U+0043 U+0043 U+10fffd U+0078 U+0038 U+0031␤»

[17:49] *** lichtkind left
[17:49] <cowens> U+0065 is obviously e, but why is \x[301] turned into U+10fffd U+0078 U+0043 U+0043 U+10fffd U+0078 U+0038 U+0031?

[17:51] <geekosaur> https://docs.perl6.org/language/unicode#UT8-C8

[17:52] <cowens> thanks, I couldn't find that through the search or Google

[17:52] <geekosaur> it was just added yesterday

[17:52] <geekosaur> c8's been in there a while but actually getting docs for it ...

[17:52] <cowens> I guess it hasn't been indexed yet then (I was just searching for it)

[17:53] <[Coke]> I don't think that answers the question though.

[17:54] *** devmikey left
[17:54] <[Coke]> (I mean, it describes the U+10fffd; but not why it's showing up in this decode, neh?)

[17:54] <geekosaur> well, it doesnt answer why it got decoded that way

[17:54] <[Coke]> m: say buf8.new(0x65, 0xCC, 0x81).decode("utf8").ords.fmt("U+%04x")

[17:54] <camelia> rakudo-moar 640404: OUTPUT: «U+00e9␤»

[17:55] <geekosaur> yeh, best I can figure is the normalization thing... except that I expected ^ to be the normalized form

[17:55] <geekosaur> some test inverted?

[17:55] <geekosaur> samcv, ping?

[17:55] <samcv> yeah?

[17:55] <geekosaur> oh wait, nio

[17:55] <timotimo> when you go through the decoder to get a str, you'll have NFG

[17:55] <geekosaur> that is correct

[17:56] <geekosaur> 65+a modifier is not normalized

[17:56] <geekosaur> so it gets converted to something that round-trips

[17:56] <cowens> Note: that doc incorrectly has the header UT8-C8 instead of UTF8-C8

[17:56] <geekosaur> yeh

[17:56] <cowens> unless I am crazy

[17:56] <timotimo> .o( unreal tournament 8 )

[17:56] <geekosaur> sorry samcv, it's fine, I was just confused a moment about what c8 was up to

[17:57] <geekosaur> cowens, note that utf8-c8 is not general use, it's for when something *must* round-trip identically

[17:58] <geekosaur> so things that would normally get normalized (e.g. 65 CC 81 -> E9) have to be encoded to prevent normalization

[17:58] <geekosaur> this is often important when working with POSIX APIs, since they are bytestrings --- if a filename contains that sequence, you must NOT normalize it, that would represent a different file

[17:58] *** st_elmo left
[17:59] <raschipi> they are that way to be locale agnostic

[17:59] <raschipi> locale here meaning encoding

[17:59] <geekosaur> yes

[17:59] <cowens> I am probably reading it wrong, but it sounds like I should be able to say: buf8.new(0x65, 0xCC, 0x81).decode("utf8-c8").encode, but that is obviously wrong

[17:59] <geekosaur> you really do not want a file to be accessible or not depending on the user's preferred encoding

[18:00] <cowens> buf8.new(0x65, 0xCC, 0x81).decode("utf8-c8").encode("utf8-c8") works though

[18:00] <geekosaur> right, because that is what c8 encoding is for

[18:00] <cowens> so you have to know the string is in utf8-c8

[18:01] <geekosaur> but you have to know that anyway because it's only intended for specific uses where you must be able to roundtrip

[18:01] <cowens> is there a way to get that information from the Str?

[18:01] <geekosaur> no? Str is always NFG

[18:02] <cowens> That is all cases for me (I have unnormalized files that should not be changed to NFC due to other systems expecting the original codepoints minus whatever I explicitly change)

[18:02] <geekosaur> ... but you can look for that 10fffd marker to see if it required utf8-c8

[18:03] <geekosaur> if the marker is not there then nothing special needed to be done and the NFG one will reproduce the original filename

[18:03] <cowens> So U+10FFFD is only used to mean UTF8-C8

[18:03] <geekosaur> yes

[18:03] <cowens> and if a file contains U+10FFFD it will be wrapped as well?

[18:04] <geekosaur> that depends on how you are handling the file

[18:04] <cowens> assuming it gets read in as :bin

[18:05] <geekosaur> there is no magic, anywhere, that accurately tracks and reproduces encodings. files do not have associated encodings, they are byte strings.

[18:05] <cowens> and then decoded as "utf8-c8"

[18:05] <geekosaur> if you read as :bin then you have a stream of bytes (ideally this would be a buf8)

[18:10] *** ChoHag left
[18:16] <cowens> based on the docs, I would expect 65 CC 81 to become one glyph, that looks like ?x65 ?xCC ?81 not the e ?xCC ?81 that is actually returned

[18:17] <cowens> strike glyph and replace with grapheme

[18:17] <cowens> very tired

[18:17] <geekosaur> but the 65 is a perfectly cromulent grapheme

[18:17] <cowens> s/grapheme/synthetic grapheme/

[18:18] *** |oLa| left
[18:19] *** espadrine joined
[18:19] <moritz> m: say Buf.new(0x65, 0xCC, 0X81).decode('utf-8').chars

[18:19] <camelia> rakudo-moar 640404: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' ␤at <tmp>:1␤------> 3say Buf.new(0x65, 0xCC, 07⏏5X81).decode('utf-8').chars␤    expecting any of:␤        whitespace␤»

[18:19] <cowens> But for purposes of working with graphemes, but not losing the original codepoints, it is less useful

[18:19] <moritz> m: say Buf.new(0x65, 0xCC, 0x81).decode('utf-8').chars

[18:19] <camelia> rakudo-moar 640404: OUTPUT: «1␤»

[18:19] <moritz> it is one grapheme

[18:19] <cowens> the grapheme is e + combining acute

[18:19] <moritz> m: say Buf.new(0x65, 0xCC, 0x81).decode('utf-8')

[18:19] <camelia> rakudo-moar 640404: OUTPUT: «é␤»

[18:19] <moritz> looks fine here

[18:20] <cowens> Except you just lost the the fact that it is a combining acute in the source

[18:20] <cowens> Which is why I am trying to use utf8-c8 in the decode

[18:20] <cowens> but it breaks the grapheme cluster

[18:20] <moritz> didn't you just say that you want that?

[18:21] <cowens> m: buf8.new(0x65, 0xCC, 0x81).decode("utf8-c8").chars

[18:21] <camelia> rakudo-moar 640404: ( no output )

[18:21] <cowens> m: buf8.new(0x65, 0xCC, 0x81).decode("utf8-c8").chars.say

[18:21] <camelia> rakudo-moar 640404: OUTPUT: «3␤»

[18:21] <cowens> Well, if we are going with what I want, I want to be able to round trip a file that isn't normalized

[18:21] *** ChoHag joined
[18:22] <cowens> I also want to be able to work at the grapheme level

[18:22] <cowens> I am trying to understand if utf8-c8 gets me that, and it looks like it doesn't

[18:22] <moritz> that's correct

[18:22] <cowens> It is close, but not quite what I want

[18:23] <moritz> you could keep the original Buf around

[18:23] <raschipi> cowens: I think we're having an XY here

[18:23] <raschipi> tell us what you really want

[18:24] <geekosaur> if you're having to resort to c8, you have already lost on the grapheme front

[18:24] *** |oLa| joined
[18:24] <cowens> File contains unnormalized (but valid) UTF-8

[18:25] <raschipi> And why can't you normalize it?

[18:25] <cowens> I want to be able to run Perl 6 code against that file then write it out without losing the unnormalized nature of the file (unless the Perl 6 code explicitedly changed it).

[18:26] <cowens> Generally, because a legacy system expects it to be the same as it was (modulo the changes explictedly made)

[18:26] <cowens> think passwords/usernames in config files

[18:27] <cowens> natural keys in databases

[18:27] <cowens> etc

[18:28] <cowens> In a perfect world, the grapheme cluster is all that matters, but not all systems compare Unicode strings correctly

[18:28] <geekosaur> those are generally disasters waiting to happen anyway

[18:28] <cowens> Hence the need for UTF8-C*

[18:28] <geekosaur> I mean, for that password, all you need is one system that always normalizes typed input

[18:28] <cowens> whoops, UTF8-C8

[18:28] <geekosaur> and suddenly they cannot log in on that system

[18:29] <cowens> yep, that is the messy world we live in, but unfortunately you can't always get access to fix everything

[18:29] <raschipi> But you want to deal with it at the grapheme level, what operation you want to do at the grapheme level?

[18:29] <cowens> Anything I would normally do with Str

[18:30] <cowens> but in general subst, rules, etc

[18:30] *** ggoebel left
[18:30] *** Cabanossi left
[18:31] <cowens> Buf is a pain and Uni has nothing in it

[18:31] <raschipi> Those should be done at the byte level in a file like that

[18:31] <moritz> I have occasionally also wished for a way to do proper regex stuff with Uni, for example

[18:31] <moritz> parsing a data format you don't have control over is a PITA with Str semantics

[18:31] *** Cabanossi joined
[18:31] <moritz> like my first JSON grammar failed on quoted strings whose first character was a combining character

[18:32] <lizmat> moritz: I still think that we could have that if we had a way to convert a buffer into a Str with all synthetics, and a way to express that in code

[18:32] <cowens> Uni is almost the right level, and so long as it has Perl 5's \X feature it would be fine

[18:32] <lizmat> aka, a synthetic for each byte

[18:32] <lizmat> and something like \byte(42) to refer to the synthetic of bytes with the value 42

[18:34] <raschipi> lizmat: Wouldn't a index([ ]) do ?

[18:35] <lizmat> that returns an Int

[18:35] <lizmat> or Nil

[18:35] <lizmat> that's not a synthetic codepoint

[18:38] *** cowens left
[18:40] *** mr-foobar left
[18:41] *** mr-foobar joined
[18:42] <moritz> lizmat: that's an interesting idea; I'll have to ponder that for a while

[18:43] *** ggoebel joined
[18:45] *** Guest62702 is now known as masak

[18:51] <[Coke]> (Uni) the last time this conversation came up, Uni was pointed at as the solution-which-isn't-there-yet.

[18:51] <jnthn> Uni is meant to fill this niche, it's just way under-implemented.

[18:52] <jnthn> But there's a lot of language design questions around it

[18:52] <jnthn> Not to mention a lot of implementation ones

[18:53] <jnthn> The regex engine being the most painful of them

[18:54] *** mcmillhj left
[18:54] <moritz> how feasible would it be to have a second type that fits the interfaces of all nqp::.*_s ops

[18:55] <jnthn> Somewhat, but we need to think carefully about how we do it

[18:56] <jnthn> I think probably we'd need a type distinction, so we can specialize it away

[18:56] *** itaipu left
[18:56] <jnthn> The problem is that every binary string op becomes questionable

[18:57] <jnthn> If it's a uni and a str, what should the result be? etc.

[18:57] <jnthn> In some cases we can say "no, we aren't going to do that"

[18:57] <jnthn> I think at a Perl 6 level we'd want to introduce methods like subuni

[18:58] <jnthn> To go with substr and subbuf

[18:59] <[Coke]> (why are they not all called the same thing that doesn't have the type in it?)

[18:59] <perlpilot> [Coke]: you were reading my mind.

[18:59] <jnthn> Because the units you pass mean different things.

[19:00] <[Coke]> that seems... reasonable. :)

[19:00] <jnthn> And the expecting semantics are different

[19:00] <jnthn> The O(...) of the operation and the expected return type also would iffer

[19:00] <jnthn> And there's even more fun to decide here

[19:01] <jnthn> If I do .substr on a Uni am I expecting it to interpret the indices as grapheme clusters and give me back a Uni?

[19:01] <jnthn> Or am I expecting it to coerce it to a Str?

[19:01] <moritz> or am I expecting an ENOTASTR?

[19:02] <jnthn> The first seems more useful, and means that a Uni could thus have substr and subuni dealing in different units

[19:02] <jnthn> Anyway, you can probably see from this why we haven't got around to dealing with this yet. :)

[19:02] *** nicq20 joined
[19:02] <jnthn> There's so many semantic questions to figure out good and consistent answers to.

[19:02] <masak> doing some casual Perl 6 programming in the evening, after having spent $work doing mostly JavaScript. huh, apparently we named our string-replacing method ".subst" :P

[19:03] <masak> we do choose quirky names sometimes, do we not

[19:03] <moritz> we do

[19:03] <nicq20> '.subst' and .substr' always throws me.

[19:03] <moritz> frugal quantifiers!

[19:03] *** mcmillhj joined
[19:04] <masak> nicq20: clearly, ".substr" is the "r" form of ".subst" :P

[19:04] <masak> moritz: that's one of the nicer quirks, though :>

[19:04] <masak> moritz: no other language community (that I know of) has a term as nice as "frugal" for that

[19:04] <nicq20> masak: Ah, right! I keep forgetting that. :)

[19:04] <masak> moritz: most (I think) go with "non-greedy"

[19:04] * jnthn wonders if he's about to get stung by his beer, given that's clearly the r form of a bee

[19:05] * moritz currently goes through all monospace fonts that LeanPub has to offer, in the hopes that one of them renders ｢ and ｣ correctly

[19:05] <masak> jnthn: nono, a beer is an entity that has evolved "being" into an art form

[19:06] <masak> moritz: talk about optimizing for a corner case :P :P :P

[19:06] <moritz> masak: :D

[19:07] <moritz> it's a pretty central case when talking about p6 regex and match objects though :(

[19:07] <[Coke]> moritz: Source Code Pro?

[19:07] <moritz> [Coke]: no luck :(

[19:07] <perlpilot> I have sometimes wondered if we could rename `subst` or `substr` (or both) and make it better.

[19:07] <moritz> [Coke]: maybe it's not the font though that's having problems

[19:08] <moritz> perlpilot: `substitute` and `extract`

[19:08] *** domidumont joined
[19:08] *** mcmillhj left
[19:08] <masak> or "replace" and "substring"

[19:08] <moritz> (though `extract` maybe isn't stringy enough)

[19:09] <perlpilot> `extract` would be fine if we /could/ combine all substr, subuni, subbuf into a single thing  ;-)

[19:09] <masak> moritz: I remember when jQuery decided to call one of their flavors "jQuery compat" and everyone read it as "jQuery compact" (even though it wasn't smaller). I wonder if people would read "extract" as "exact" half of the time.

[19:09] <nicq20> Wow. Just realized 'subst' is short for 'substitute'.

[19:09] <masak> nicq20: :D

[19:09] <moritz> masak: I like substring and replace

[19:10] <jnthn> Another fun misread I've seen a few people make is "Rakudo Start" - 'cus, you know, it's what you use to get started. :)

[19:11] <masak> yes, that one ended up in blog posts and stuff

[19:11] <moritz> <rant>I hate this! I'm already using a third-party tool for generating my books so that I don't have to worry about the toolchain, and here again I'm worrying about the tool chain instead of writing a chapter</rant>

[19:11] <timotimo> Rakudo Tárte

[19:11] <ruoso> I think I've hit a bug in recursive multis

[19:12] <raschipi> moritz: you'll always have to mind your tools. No way around that in any craft.

[19:12] *** domidumont left
[19:12] *** cowens joined
[19:12] <moritz> raschipi: I know. But if I want to cook, I can go to the shop and buy a knife that Simply Works[tm]

[19:13] *** andrei_ joined
[19:13] *** domidumont joined
[19:13] <raschipi> moritz: Nope, you need to know how to sharpen it if you'll do it professionally.

[19:13] *** |oLa| left
[19:13] * perlpilot bides with bated breath to behold the bug

[19:13] <cowens> Is there a better way to write the Perl 6 version of perl -pi -le 's/sftp/transfer/g' FILES than perl6 -e 'slurp($_).subst("sftp", "transfer", :g) ==> spurt($_) for @*ARGS' FILES?

[19:14] <moritz> raschipi: in this case, my book toolchain is unsharpenable :(

[19:14] <raschipi> I was a butcher at one point, had very goog knives and carried a sharpner everywhere. Knives do not 'just work'.

[19:14] <perlpilot> moritz: that's a pity.  you tend to hurt yourself with dull tools

[19:14] *** mcmillhj joined
[19:15] <ugexe> a sharpner or a honing steal?

[19:15] *** pecastro_ left
[19:15] <moritz> perlpilot: I know, I know. But I also remember the sad old days of our "Using Perl 6" book attempt, where building the book was a mystery escape room experience

[19:15] <perlpilot> cowens: you know perl6 also has -p and -n command line options.

[19:16] <andrei_> sorry to interrupt a very interesting discussion,      zef install Task::Star     does not work anymore ? says "No candidates found matching identity: Task::Star"

[19:16] <moritz> andrei_: yes, Task::Star is goen

[19:16] <moritz> *gone

[19:16] <cowens> The problem is the -i which is missing

[19:16] *** domidumont left
[19:16] <raschipi> Well, I called it a 'chaira' but yes, I learned the name in English today.

[19:16] <cowens> At least in the version I last looked at

[19:17] <perlpilot> cowens: ah, indeed.  That would be a nice one to have again

[19:18] *** |oLa| joined
[19:18] <cowens> I stole that code from Rosetta Code, but I don't know enough to know if there is a better way

[19:19] *** mcmillhj left
[19:20] *** pecastro joined
[19:20] *** setty1 joined
[19:22] <moritz> looks fine to me

[19:24] *** |oLa| left
[19:25] <andrei_> with Task::Star it was very easy to get started with Perl6, because it installed useful things. What should I do now?

[19:25] *** |oLa| joined
[19:25] <moritz> install the useful things when you need them

[19:25] <moritz> or install Rakudo Star

[19:26] <moritz> or install Task::Popular

[19:26] <moritz> or Task::Galaxy

[19:26] <andrei_> How to install p6doc?

[19:26] *** mcmillhj joined
[19:28] *** cowens left
[19:28] <moritz> zef install p6doc

[19:28] <nicq20> Seems Like Task::Popular would be best. https://toast.perl6.party/

[19:31] *** mcmillhj left
[19:36] *** zakharyas joined
[19:36] <andrei_> Ah, this is very nice. Thank you!

[19:39] <raschipi> How many JSON decoders are in Task::Popular, again? I think it was 7 of them.

[19:39] *** mcmillhj joined
[19:39] *** vetmaster left
[19:39] <andrei_> Sorry, small problem. After I   zef install p6doc    it seems that p6doc is not on PATH. To where is it installed?

[19:41] <nicq20> raschipi: Yep. Looks like about 7.

[19:41] <andrei_> It is not in  ~/.rakudobrew/bin/  ...

[19:41] <nicq20> andrei_: How did you install it?

[19:41] *** keylet left
[19:41] <andrei_> git clone https://github.com/tadzik/rakudobrew ~/.rakudobrew

[19:41] <andrei_> rakudobrew build moar

[19:42] <andrei_> rakudobrew build zef

[19:42] <andrei_> zef install Task::Star

[19:42] <andrei_> (but Task::Star did not install)

[19:43] <andrei_> so I did:    zef install p6doc

[19:43] <ugexe> `rakudobrew rehash`

[19:43] *** mcmillhj left
[19:44] <andrei_> Ah, YES! I knew, just forgot! Now it works, thank you!

[19:44] *** AlexDaniel joined
[19:45] <nicq20> Oops. Looks like Rakudo does not have a recursion limit.  ._.

[19:46] <raschipi> nicq20: Of course it doesn't.

[19:47] <nicq20> Yeah, I wanted to check if it had the same limit/warning that Perl5 had. It doesn't.

[19:48] <raschipi> The limit is the amount of memory available.

[19:50] *** salv0 joined
[19:50] *** El_Che left
[19:50] *** nicq20 left
[19:51] *** awwaiid left
[19:55] *** mcmillhj joined
[19:55] <ruoso> moritz: second version of that gist, now using types instead of strings... https://gist.github.com/anonymous/80f6798530a3811335a065e2f9623779

[19:55] <ruoso> I also removed the loop in favor of simple recursion

[20:00] *** mcmillhj left
[20:00] <ruoso> I also realized that the method could just be expressed as a subset... it doesn't need to be a separate argument

[20:03] <ufobat> timotimo, https://gist.github.com/ufobat/902d8f7065b2bc8d59c2a64c225a6a70

[20:03] <ufobat> perl6 bin/p6profiler-graphviz ../Bailador/03.sqlite3 doesnt seem to work

[20:03] *** mcmillhj joined
[20:07] *** El_Che joined
[20:09] *** awwaiid joined
[20:13] *** setty1 left
[20:14] *** setty1 joined
[20:15] *** ufobat left
[20:15] *** grondilu_ left
[20:17] *** awwaiid left
[20:17] *** grondilu joined
[20:17] *** ponbiki_ joined
[20:20] *** ponbiki left
[20:20] <timotimo> dogbert17: oh yes i only changed the tui one to fit the new names

[20:20] <timotimo> sorry, we're just preparing dinner now

[20:21] <timotimo> you'll find the necessary changes in the git commit history for the project

[20:21] <timotimo> maybe you could go ahead and apply the same thing to the graphviz one?

[20:24] <timotimo> crap, a drop of tomato juice landed on th eedge of my trackpad and now it's misbehaving

[20:24] <timotimo> better turn of the machine

[20:26] *** TEttinger joined
[20:28] *** espadrine left
[20:31] *** |oLa| left
[20:32] *** colomon left
[20:32] *** colomon joined
[20:39] *** [ptc] joined
[20:40] *** awwaiid joined
[20:43] *** raschipi left
[20:45] *** rheum101 joined
[20:45] *** awwaiid left
[20:45] <rheum101> how can I switch from audio to text output rakudo brew??

[20:46] *** awwaiid joined
[20:52] *** |oLa| joined
[20:55] *** zakharyas left
[20:57] *** colomon left
[20:58] *** breinbaas left
[21:02] *** cschwenz joined
[21:07] <cschwenz> per https://docs.perl6.org/type/Num : «A Num object stores a floating-point number. It is immutable. On most platforms, it's an IEEE 754 64-bit floating point numbers, aka "double precision".»

[21:07] <cschwenz> and now for my question, is it possible to detect from within perl6 what size floating-point number Num is using?  and if so, how?

[21:07] *** [ptc] left
[21:14] <ruoso> https://github.com/ruoso/perl6-web-multi-dispatch <- organized the experiment a bit further... I'm actually fairly happy with how this looks

[21:14] *** |oLa| left
[21:16] *** wamba left
[21:17] *** mcmillhj left
[21:19] *** |oLa| joined
[21:20] *** [ptc] joined
[21:30] *** Cabanossi left
[21:31] *** Cabanossi joined
[21:38] *** kyan joined
[21:40] *** mcmillhj joined
[21:42] *** cschwenz left
[21:44] *** mniip left
[21:45] *** mcmillhj left
[21:50] <Geth> ¦ doc: 1bbf3a880f | (Jan-Olof Hendig)++ | doc/Language/unicode.pod6

[21:50] <Geth> ¦ doc: Fix typo

[21:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1bbf3a880f

[21:51] *** setty1 left
[21:54] *** El_Che_ joined
[21:55] *** El_Che_ left
[21:57] *** profan_ is now known as profan

[21:57] *** mniip joined
[21:59] *** [ptc] left
[21:59] *** cpage_ left
[22:00] *** [ptc] joined
[22:00] *** mcmillhj joined
[22:04] *** ChoHag left
[22:05] *** mcmillhj left
[22:12] *** jargan joined
[22:13] *** perlpilot left
[22:13] *** |oLa| left
[22:13] *** AlexDaniel left
[22:13] *** dalek left
[22:14] *** cgfbee left
[22:14] *** Celelibi left
[22:14] *** awwaiid left
[22:14] *** MilkmanDan left
[22:14] *** bpmedley left
[22:14] *** garu left
[22:14] *** kybr left
[22:14] *** nadim_ left
[22:14] *** john51 left
[22:14] *** TimToady_ joined
[22:14] *** mls_ joined
[22:14] *** japhb joined
[22:14] *** [ptc] left
[22:14] *** profan_ joined
[22:14] *** nadim joined
[22:14] *** dalek joined
[22:14] *** ChanServ sets mode: +v dalek

[22:14] *** sjn_ joined
[22:14] *** ilmari_ joined
[22:14] *** garu_ joined
[22:15] *** MilkmanDan joined
[22:15] *** brabo left
[22:15] *** japhb_ left
[22:15] *** revdiablo joined
[22:15] *** revdiablo left
[22:15] *** revdiablo joined
[22:15] *** ambs left
[22:15] *** mls left
[22:15] *** sjn left
[22:15] *** nine_ left
[22:15] *** TimToady left
[22:15] *** yubimusubi left
[22:15] *** sunnavy left
[22:15] *** profan left
[22:15] *** orevdiabl left
[22:15] *** f3ew left
[22:15] *** Ulti_ left
[22:15] *** jast left
[22:15] *** ilmari left
[22:15] *** ilmari_ is now known as ilmari

[22:15] *** john51 joined
[22:15] *** ambs joined
[22:15] *** mls_ left
[22:15] *** mls_ joined
[22:16] *** brabo joined
[22:16] *** cgfbee joined
[22:16] *** Celelibi joined
[22:16] *** profan_ is now known as pofan

[22:17] *** Mithaldu left
[22:17] *** dg left
[22:18] *** pofan is now known as profan

[22:19] *** Celelibi left
[22:19] *** petercom1and joined
[22:19] *** Celelibi joined
[22:19] *** Ulti joined
[22:19] *** petercommand left
[22:19] *** kybr joined
[22:19] *** nine joined
[22:19] *** sunnavy joined
[22:20] *** Celelibi left
[22:20] *** awwaiid joined
[22:20] *** f3ew joined
[22:20] *** Mithaldu joined
[22:21] *** Celelibi joined
[22:23] *** cpage_ joined
[22:24] *** Possum joined
[22:25] *** dg joined
[22:26] *** MasterDuke joined
[22:31] *** lostinfog left
[22:41] *** travis-ci joined
[22:41] <travis-ci> Doc build errored. Jan-Olof Hendig 'Fix typo'

[22:41] <travis-ci> https://travis-ci.org/perl6/doc/builds/245131564 https://github.com/perl6/doc/compare/03b510a9abd3...1bbf3a880f5e

[22:41] *** travis-ci left
[22:49] *** cognominal left
[22:57] *** cognominal joined
[22:58] *** cdg left
[22:59] *** Cabanossi left
[23:01] *** Cabanossi joined
[23:04] *** ChoHag joined
[23:09] *** sjn_ is now known as sjn

[23:09] *** pmurias left
[23:23] *** robertle left
[23:29] *** Cabanossi left
[23:31] *** Cabanossi joined
[23:34] <ruoso> for a candidate to a multi that was exported, I can find which package provided it, is it possible to tell which candidates can be resolved from the declaration site on the other package?

[23:36] <ruoso> huh, it turns out that the obvious one of &m.candidates[0].candidates works

[23:36] <ruoso> I was trying a bunch of other things, but didn't occur to me to ask that

[23:39] <timotimo> i fixed my trackpad but somehow managed to get rid of 8 out of my 12 gigs of ram

[23:56] *** mcmillhj joined
[23:59] *** sQuEE` left
