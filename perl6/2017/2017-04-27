[00:04] <samcv> well i've goten 750s in

[00:05] <samcv> err 2:13

[00:05] <samcv> min

[00:05] *** SMS left
[00:07] *** kurahaupo joined
[00:11] <samcv> obviously i don't have enough locks. or OO::Monitor objects

[00:14] <samcv> nice been going for 3 minutes. new record. hopefully this does it

[00:17] <samcv> ahhhh nooo

[00:17] <samcv> 5:22

[00:29] <Geth> Swapped META.info ‚Üí META6.json in 1 dists in https://github.com/perl6/ecosystem/commit/d740df8afe

[00:39] *** cyphase left
[00:44] *** cyphase joined
[00:45] <samcv> AlexDaniel, the struggle is real

[00:51] *** eliasr left
[01:01] *** raschipi left
[01:05] *** GalenC left
[01:08] *** Cabanossi left
[01:08] *** kurahaupo_ joined
[01:09] *** kurahaupo__ joined
[01:10] *** Cabanossi joined
[01:11] *** kurahaupo left
[01:11] *** kurahaupo joined
[01:13] *** kurahaupo_ left
[01:13] *** kurahaupo__ left
[01:17] *** cyphase left
[01:19] *** John[Lisbeth] is now known as korihor

[01:19] *** korihor is now known as John[Lisbeth]

[01:22] *** cyphase joined
[01:27] *** mephinet joined
[01:29] *** mcmillhj joined
[01:30] <samcv> well language-perl6fe the no longer developed atom-langauge-perl6 now has the heading "forgotten edition" hah. but tyring to figure out a way to actually depricate it.

[01:30] *** kurahaupo_ joined
[01:31] <samcv> and unless it's released, people looking on atom.io or the package manager won't see that updated heading

[01:31] <samcv> gonna see if i can get it so it depends on the new package. and maybe shows a warning it can be removed.

[01:32] *** kurahaupo left
[01:33] *** cyphase left
[01:38] *** cyphase joined
[01:38] *** mcmillhj left
[01:38] *** kurahaupo_ left
[01:39] *** kurahaupo joined
[01:39] *** mcmillhj joined
[01:43] *** geekosaur left
[01:43] *** kurahaupo_ joined
[01:43] *** hermitcl joined
[01:44] *** geekosaur joined
[01:45] *** kurahaupo left
[01:46] *** ilbot3 left
[01:46] <[Coke]> http://news.perlfoundation.org/2017/04/march-2017-grant-votes.html

[01:48] *** mcmillhj left
[01:48] *** ilbot3 joined
[01:48] *** ChanServ sets mode: +v ilbot3

[01:49] *** cyphase left
[01:50] <skids> samcv++

[01:52] *** cyphase joined
[01:56] *** cyphase left
[01:58] *** AlexDaniel left
[01:59] *** kurahaupo_ left
[02:01] *** cyphase joined
[02:03] <MasterDuke_> samcv++

[02:16] *** cpage_ left
[02:19] *** mcmillhj joined
[02:23] <samcv> üåü :-)

[02:25] *** mcmillhj left
[02:25] *** mcmillhj joined
[02:30] *** mcmillhj left
[02:30] *** Woodi joined
[02:49] *** noganex_ joined
[02:52] *** noganex left
[02:52] *** cpage_ joined
[02:53] *** astj joined
[02:58] *** geekosaur left
[02:59] *** geekosaur joined
[03:22] *** mr-foobar joined
[03:22] *** Cabanossi left
[03:26] *** Cabanossi joined
[03:30] <samcv> ohaahh travis is broken

[03:30] <samcv> all the build logs are gone

[03:31] <samcv> i guess they've been doing maintainace for hours

[03:32] <skids> heh. The autogenerated code from my Perl6 xcb wrapper is up to 202 seconds compile time.  More than rakudo parse stage.

[03:32] <samcv> how big is it?

[03:32] <skids> wc says 127k lines but there's a lot of blanks.

[03:32] <samcv> that's a lot of lines...

[03:33] <samcv> does it work though? once it has compiled

[03:33] <skids> Lots of export/import craziness and composy stuff too.

[03:33] *** aborazmeh joined
[03:33] *** aborazmeh left
[03:33] *** aborazmeh joined
[03:33] <skids> It's fast enough once compiled

[03:34] <skids> Though not complete enough to publish in ecosystem yet.  Or even use really.

[03:34] <geekosaur> wonder if travis will go back to reporting things once it's back up

[03:34] <geekosaur> (I just realized there haven't been build reports in the other channel I'm in that normally gets them for several weeks, either)

[03:36] <skids> Once 100% of the modules compile cleanly maybe I'll tag that commit to use as a stress benchmark.

[03:36] <samcv> irc works

[03:36] <samcv> at least on a different network.

[03:37] <u-ou> is there a maximum ammount of time that Supply.interval will work for?

[03:37] <samcv> a really big number

[03:37] <u-ou> so ten minutes is ok?

[03:37] <samcv> yes

[03:37] <u-ou> cool

[03:38] <samcv> years even could work

[03:38] *** Cabanossi left
[03:38] <u-ou> nice

[03:39] <samcv> u-ou, if it uses sub sleep https://github.com/rakudo/rakudo/commit/c797d3ff5

[03:39] <samcv> read that. if it uses that routine then it should work for like. super much long time

[03:39] <skids> Testing that in roast would hinder development, though.

[03:39] <samcv> testing what?

[03:39] <skids> years long interval

[03:39] *** Cabanossi joined
[03:40] <samcv> yeah. it checks that it does sleep if you give it crazy big numbers though

[03:40] <samcv> becuase before that commit it slept for 0 seconds i think

[03:40] <samcv> for crazy big numbers 317,097,919 year

[03:40] <samcv> well maybe that's the example there. but hm

[03:41] <samcv> so 9999936365472000 seconds

[03:41] <samcv> ok so that number is probably the number it would not work at. heh

[03:41] <skids> It's all fun and games until some hyperadvanced civilization loses a deep space probe :-)

[03:42] <samcv> though to be honest i think doing more than 317,097,919 years may not work on it, but i don't know the exact way supplies set the interval

[03:44] <u-ou> m: sleep 99999999999999999999999

[03:44] <camelia> rakudo-moar 139243: OUTPUT: ¬´(timeout)¬ª

[03:45] <u-ou> yay!

[03:46] <samcv> m:  my $supply = Supply.inter4al(9999999999999999999999999999999999); my $supply.tap({.say});

[03:46] <camelia> rakudo-moar 139243: OUTPUT: ¬´Potential difficulties:‚ê§    Redeclaration of symbol '$supply'‚ê§    at <tmp>:1‚ê§    ------> 03999999999999999999999999999); my $supply7‚èè5.tap({.say});‚ê§No such method 'inter4al' for invocant of type 'Supply'‚ê§  in block <unit> at <tmp> line 1‚Ä¶¬ª

[03:47] <samcv> m:  my $supply = Supply.interal(9999999999999999999999999999999999); my $supply.tap({.say});

[03:47] <camelia> rakudo-moar 139243: OUTPUT: ¬´Potential difficulties:‚ê§    Redeclaration of symbol '$supply'‚ê§    at <tmp>:1‚ê§    ------> 03999999999999999999999999999); my $supply7‚èè5.tap({.say});‚ê§No such method 'interal' for invocant of type 'Supply'‚ê§  in block <unit> at <tmp> line 1‚Ä¶¬ª

[03:47] <samcv> m:  my $supply = Supply.interval(9999999999999999999999999999999999); my $supply.tap({.say});

[03:47] <camelia> rakudo-moar 139243: OUTPUT: ¬´Potential difficulties:‚ê§    Redeclaration of symbol '$supply'‚ê§    at <tmp>:1‚ê§    ------> 03999999999999999999999999999); my $supply7‚èè5.tap({.say});‚ê§Cannot unbox 123 bit wide bigint into native integer‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[03:48] <skids> bedtime.

[03:48] <BenGoldberg> m: Supply.interval(2**$_) for ^123;

[03:48] <camelia> rakudo-moar 139243: ( no output )

[03:48] <BenGoldberg> m: say Supply.interval(2**$_) for ^123;

[03:48] <camelia> rakudo-moar 139243: OUTPUT: ¬´Supply.new‚ê§Supply.new‚ê§Supply.new‚ê§Supply.new‚ê§Supply.new‚ê§Supply.new‚ê§Supply.new‚ê§Supply.new‚ê§Supply.new‚ê§Supply.new‚ê§Supply.new‚ê§Supply.new‚ê§Supply.new‚ê§Supply.new‚ê§Supply.new‚ê§Supply.new‚ê§Supply.new‚ê§Supply.new‚ê§Supply.new‚ê§Supply.‚Ä¶¬ª

[03:48] <samcv> so has to fit in 64bit integers i think

[03:48] <BenGoldberg> m: Supply.interval(2**$_).tap(&say) for ^123;

[03:48] <camelia> rakudo-moar 139243: OUTPUT: ¬´0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§0‚ê§Cannot unbox 64 bit wide bigint into n‚Ä¶¬ª

[03:49] <samcv>  m: Supply.interval(2**$_, $++).tap(&say) for ^123;

[03:49] <camelia> rakudo-moar 139243: OUTPUT: ¬´0‚ê§Cannot unbox 64 bit wide bigint into native integer‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[03:51] <samcv> so yeah u-ou you're good. just don't make it more than 317,097,919

[03:51] <u-ou> ok :P

[03:52] <samcv> hmm uv_timer_set_repeat uses a uint64_t that is in ms

[03:52] * [Coke] hurls https://github.com/coke/p6-cal

[03:52] <samcv> but i think that number of years was already 1000 x less than the max 64bit signed int

[03:53] <samcv> [Coke], how many years it work for

[03:53] *** wigner joined
[03:55] <samcv> perl6 -e 'my $var = qx{curl -s https://raw.githubusercontent.com/coke/p6-cal/master/bin/cal}; run ‚Äòperl6‚Äô, ‚Äò-e‚Äô, $var, ‚Äò999999999900000000‚Äô'

[03:56] <samcv> adding another 9 doesn't work. can't unbox

[03:57] <u-ou> if you close all your taps on an interval does it stop counting?

[03:58] <[Coke]> samcv: system cal only works for 1..9999

[03:58] <samcv> works with 999999999

[03:59] <samcv> util-linux 2.29.2

[03:59] *** skids left
[04:03] <[Coke]> not on os x. anyway, prevented the overflow issues by limiting it to the draconion 9999.

[04:07] *** astj left
[04:16] *** mcmillhj joined
[04:17] <samcv> that's not very high

[04:17] <samcv> also there could be more leap days in the future if we're going far enough ahead

[04:17] <samcv> well actually. we fix that with leap seconds right?

[04:20] *** adu joined
[04:21] *** mcmillhj left
[04:21] *** wamba joined
[04:21] <adu> hey

[04:21] <adu> how goes perl6?

[04:24] <samcv> perl6 is great

[04:24] <adu> hi samcv 

[04:25] <adu> samcv: what have you been working on lately?

[04:26] *** mattp__ joined
[04:26] <samcv> well my grant just got approved tonight :) but also been working on this https://cry.nu/perl6/ecosystem-license-module-tagging/

[04:26] <adu> samcv: sounds very "meta"

[04:27] <adu> I worked on a single module for 36-hours straight, then I fell off the perl6 bandwagon

[04:27] <samcv> aww

[04:27] *** BenGoldberg left
[04:28] <adu> https://github.com/andydude/p6-c-parser

[04:28] <adu> I'd like to get into the whole Web/HTTP thing

[04:28] <adu> I'm very fond of HAR and Swagger/OpenAPI

[04:29] <adu> are there existing modules for making web requests?

[04:31] <adu> what's the difference between HTTP::UserAgent  and HTTP::Client?

[04:32] *** wigner left
[04:32] *** mcmillhj joined
[04:32] <samcv> you want a module that does the sockets itself and doesn't rely on an external program /library?

[04:32] <adu> no

[04:33] <adu> so, I'm wondering if there is an extensible client that I can add HAR and Swagger to

[04:35] <samcv> i don't know what HAR and Swagger ore

[04:36] <adu> HAR is a logging format, it is able to faithfully represent an entire HTTP transaction including timing and TCP ports

[04:36] *** mcmillhj left
[04:36] <samcv> ah

[04:36] <adu> Swagger is a WebAPI description language, it converts headers, and query params into function arguments

[04:37] <adu> so instead of 500 lines of code with SHA1SUM header signature algorithms, all you have to do is query_users(username=me)

[04:38] <adu> or perform_ocr_on_this(image_url=bla)

[04:39] <adu> https://cloud.google.com/vision/docs/

[04:42] <adu> samcv: do you see why they would be useful in conjunction with an HTTP client?

[04:42] <samcv> yes i do. maybe somebody else around here can better answer this question. sounds neat

[04:43] <adu> so in a general sense, Swagger is HTTP input, HAR is HTTP tracing

[04:51] *** curan joined
[05:02] *** Cabanossi left
[05:03] *** Cabanossi joined
[05:03] *** mcmillhj joined
[05:04] *** astj joined
[05:04] *** xtreak joined
[05:08] *** mcmillhj left
[05:10] *** aborazmeh left
[05:23] *** Cabanossi left
[05:23] *** mcmillhj joined
[05:24] *** adu left
[05:25] *** Cabanossi joined
[05:25] *** lowbro joined
[05:25] *** lowbro left
[05:25] *** lowbro joined
[05:28] *** mcmillhj left
[05:42] *** wamba left
[06:05] *** cgfbee left
[06:07] *** Cabanossi left
[06:08] *** labster left
[06:09] *** Cabanossi joined
[06:11] *** cgfbee joined
[06:37] *** CIAvash joined
[06:45] *** grondilu joined
[06:45] <Geth> ¬¶ ecosystem: nkh++ created pull request #332: ADDED: P6-Grammar-Tracer-Compact

[06:45] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/pull/332

[06:46] *** xtreak left
[06:46] *** labster joined
[06:48] *** xtreak joined
[06:53] *** ufobat___ joined
[06:55] *** hermitcl left
[06:59] *** rindolf joined
[07:08] *** sat joined
[07:16] <masak> morning, #perl6

[07:16] <masak> does this feel like a decent answer? http://stackoverflow.com/questions/43561614/how-do-i-write-a-perl6-macro-to-enquote-text/43651008#43651008

[07:18] <lizmat> seems legit  :-)

[07:18] <moritz> masak: it is, but you should add a sentence explaining the releation between 007 and Perl 6, for the uninitiated

[07:19] <masak> good. will do.

[07:19] <masak> I also realized that there's a bit of an X/Y problem involved

[07:19] <moritz> and I have another question: how will it parse the argument?

[07:20] <masak> namely, querent is dropping down to strings, but why?

[07:20] <masak> in order to parse the string inside of the called-but-not-shown function?

[07:20] <masak> moritz: how will what parse the argument?

[07:20] <masak> the macro?

[07:20] <moritz> my @some = tfilter(age < 50);

[07:20] <moritz> the age < 50

[07:20] <masak> aye; there's a syntax error in there

[07:20] <masak> ugh; so much to address

[07:21] *** cgfbee left
[07:27] <masak> did some edits: http://stackoverflow.com/questions/43561614/how-do-i-write-a-perl6-macro-to-enquote-text/43651008#43651008

[07:28] <masak> such a short question with such a long answer :)

[07:29] <El_Che> masak: if that happens often, it's time to stop and think hard about your life :)

[07:29] <moritz> El_Che: I think that's quite normal

[07:30] <samcv> ok i think i finally got this working with 9 threads :)

[07:30] <moritz> short questions like "what's the meaning of life?" or "how is baby made?" can warrant hour-long discussions, should you feel inclined to do so :-)

[07:30] *** cgfbee joined
[07:30] <El_Che> oh crap, now *I* have to stop and think hard about my life

[07:30] <samcv> the meaning of life is happiness

[07:30] <moritz> look, a hedonist!

[07:30] <El_Che> samcv: you're disqualified with your extremely short and to-the-point answers

[07:31] <samcv> :-)

[07:31] <El_Che> samcv the epicurist

[07:31] <moritz> samcv: does that mean you'd kill a baby that's not happy?

[07:31] <moritz> sorry, can't resist

[07:31] <samcv> moritz, no, means the meaning of life is happiness

[07:31] <El_Che> actually that's the theme of the latest Dr Who episode

[07:32] <El_Che> (where the robots speak emoji, probably powered by perl6)

[07:32] <samcv> the hard question is how to achieve happiness

[07:32] *** mcmillhj joined
[07:32] <samcv> or maybe it's how to get perl 6 threading working without segfaulting idk ;)

[07:33] <moritz> samcv: maybe that will bring you happiness :-)

[07:33] <samcv> ended up with a react/whenever block plus 9 locks that are sent back through the channel

[07:33] <samcv> moritz, only temporary though. but it does help

[07:33] <El_Che> samcv: it that last about killing babies?

[07:34] <samcv> locks check. react/whenever check. start blocks check. tons of items are now OO::Monitors objects check. :) threading in perl 6 is esy

[07:34] <samcv> that's not temporary :(

[07:34] <masak> samcv: I find it quite possible that you're right about the meaning of life being happiness. but I must take exception at the way it's being phrased, because it feels like it either doesn't parse, or is a category error. ;)

[07:34] <masak> cf "the meaning of life is truncated banana"

[07:35] <samcv> idk how else to put it. The meaning of life is happiness. << sentence end here

[07:35] <samcv> better :)

[07:35] <masak> "the meaning of life is watermelon"

[07:35] *** dakkar joined
[07:35] <masak> m: say "the meaning of life"

[07:35] <camelia> rakudo-moar 139243: OUTPUT: ¬´the meaning of life‚ê§¬ª

[07:35] <masak> m: say "the meaning of life".chars

[07:35] <camelia> rakudo-moar 139243: OUTPUT: ¬´19‚ê§¬ª

[07:35] <masak> "the meaning of life is 19"

[07:36] <grondilu> m: my @a = rand xx 3; @a [Z+]= ^3; say @a

[07:36] <camelia> rakudo-moar 139243: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of [Z+]= in sink context‚ê§    at <tmp>:1‚ê§    ------> 3my @a = rand xx 3; @a 7‚èè5[Z+]= ^3; say @a‚ê§[0.959472261187343 1.16726048819922 2.98720836347465]‚ê§¬ª

[07:36] <grondilu> ^not sure this warning is correct

[07:36] <grondilu> there is a side-effect so it's not useless, is it?

[07:36] <moritz> samcv: trouble is, when people hear such a sentence, they want to use it guide their action

[07:36] <samcv> do what makes you happy

[07:36] <masak> m: my @a = rand xx 3; @a = @a [Z+] ^3; say @a

[07:36] <camelia> rakudo-moar 139243: OUTPUT: ¬´[0.612136122926065 1.2686611197514 2.77252139132796]‚ê§¬ª

[07:36] <samcv> and others happy

[07:36] <masak> grondilu: I think I agree with you.

[07:37] <moritz> samcv: and there are a lot of things you can do that might make you happy, but are clearly immoral

[07:37] *** mcmillhj left
[07:37] <samcv> moritz, that would be hard if the meaning of life were watermelon :)

[07:37] <masak> grondilu: it's being used in sink context, but the `=` metaop makes a useful side effect

[07:37] <masak> so it's not useless

[07:37] <samcv> mabye they will seek to become a watermelon

[07:37] <samcv> moritz, but do they make others happy too? or not

[07:37] <samcv> if they don't then they are not with the spirit of the meaning of life

[07:38] *** cgfbee left
[07:38] <samcv> or i guess are selfish actions taken to seek happiness

[07:38] <masak> moritz: I think Eliezer Yudkowsky could be made to agree that "maximize hapiness" or (more likely) "maximize fun" is a valid/useful goal statement for life

[07:39] <samcv> ok now that this script works with threading it's quite fast. so i have 90 modules to PR now :)

[07:40] <samcv> bot is a go

[07:41] *** cgfbee joined
[07:43] <grondilu> m: my uint @a = 1; say @a[0].WHAT

[07:43] <camelia> rakudo-moar 139243: OUTPUT: ¬´(Int)‚ê§¬ª

[07:44] * grondilu expected uint here

[07:44] <grondilu> m: my uint @a = my uint $ = 1; say @a[0].WHAT

[07:44] <camelia> rakudo-moar 139243: OUTPUT: ¬´(Int)‚ê§¬ª

[07:44] <samcv> m: my uint @a; say @a.WHAT

[07:44] <camelia> rakudo-moar 139243: OUTPUT: ¬´(array[uint])‚ê§¬ª

[07:44] <samcv> m: my uint @a; @a.push: -1;

[07:44] <camelia> rakudo-moar 139243: ( no output )

[07:44] <samcv> dunno if uint arrays are supported

[07:44] <samcv> hm

[07:45] <samcv> bisectable6, my uint @a; @a.push: -1; @a.say

[07:45] <bisectable6> samcv, On both starting points (old=2015.12 new=1392439) the exit code is 0 and the output is identical as well

[07:45] <bisectable6> samcv, Output on both points: ¬´-1¬ª

[07:45] <samcv> yep

[07:45] <grondilu> so native arrays not supported?

[07:45] <samcv> native arrays are

[07:45] <samcv> m: my int @array; # this works fine

[07:45] <camelia> rakudo-moar 139243: ( no output )

[07:46] <samcv> uint is not a native type IIRC

[07:46] <grondilu> m: my uint32 @a = my uint32 $ = 1; say @a[0].WHAT

[07:46] <camelia> rakudo-moar 139243: OUTPUT: ¬´(Int)‚ê§¬ª

[07:46] <samcv> it's a special type

[07:46] <samcv> meant to be used for nativecall? i think. something like that

[07:46] <samcv> m: my uint $thing; $thing = -10

[07:46] <camelia> rakudo-moar 139243: ( no output )

[07:46] <samcv> m: my uint $thing; $thing = -10; say $thing

[07:46] <camelia> rakudo-moar 139243: OUTPUT: ¬´-10‚ê§¬ª

[07:46] <grondilu>  m: my uint32 $thing; $thing = -10; say $thing

[07:46] <camelia> rakudo-moar 139243: OUTPUT: ¬´4294967286‚ê§¬ª

[07:47] <grondilu>  m: my uint32 $thing; $thing = -10; say $thing[0].WHAT

[07:47] <camelia> rakudo-moar 139243: OUTPUT: ¬´(Int)‚ê§¬ª

[07:47] * grondilu is confused

[07:47] <samcv> uint is meant for use with nativecall

[07:47] <samcv> not as normal usage

[07:48] <samcv> i tink. let me check some things...

[07:49] *** rindolf left
[07:49] *** rindolf joined
[07:49] <samcv> m: my uint64 $thing = -10;

[07:49] <camelia> rakudo-moar 139243: ( no output )

[07:49] <samcv> m: my uint64 $thing = -10; say $thing

[07:49] <camelia> rakudo-moar 139243: OUTPUT: ¬´-10‚ê§¬ª

[07:50] <samcv> m: my array[uint] $thing = -10

[07:50] <camelia> rakudo-moar 139243: OUTPUT: ¬´Type check failed in assignment to $thing; expected array[uint] but got Int (-10)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[07:51] <samcv> there you go grondilu 

[07:52] <grondilu> m: my array[uint32] $a = [map {my uint32 $ = $_}, ^10];

[07:52] <camelia> rakudo-moar 139243: OUTPUT: ¬´Type check failed in assignment to $a; expected array[uint32] but got Array ($[0, 1, 2, 3, 4, 5, 6...)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[07:52] *** zakharyas joined
[07:53] <grondilu> FYI I was working on simplifying Digest::SHA and could not create a uint32 array

[07:53] *** mcmillhj joined
[07:53] <samcv> m: my array[uint] @a; @a.push: {my uint $blah = 10}

[07:53] <camelia> rakudo-moar 139243: OUTPUT: ¬´Type check failed in assignment to @a; expected array[uint] but got Block (-> ;; $_? is raw { #`...)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[07:54] <samcv> m: my array[uint] @a; my uint $blah = 10; @array.push: $blah

[07:54] <camelia> rakudo-moar 139243: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '@array' is not declared. Did you mean any of these?‚ê§    array‚ê§    Array‚ê§‚ê§at <tmp>:1‚ê§------> 3my array[uint] @a; my uint $blah = 10; 7‚èè5@array.push: $blah‚ê§¬ª

[07:54] <samcv> m: my @array[uint] @a; my uint $blah = 10; @array.push: $blah

[07:54] <camelia> rakudo-moar 139243: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3my @array[uint]7‚èè5 @a; my uint $blah = 10; @array.push: $b‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§       ‚Ä¶¬ª

[07:54] <samcv> m: my @array[uint] = @a; my uint $blah = 10; @array.push( $blah)

[07:54] <camelia> rakudo-moar 139243: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '@a' is not declared‚ê§at <tmp>:1‚ê§------> 3my @array[uint] = 7‚èè5@a; my uint $blah = 10; @array.push( $bl‚ê§¬ª

[07:54] <grondilu> m: my array[uint] @a; push @a, my uint $ = 1

[07:54] <camelia> rakudo-moar 139243: OUTPUT: ¬´Type check failed in assignment to @a; expected array[uint] but got Int (1)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[07:54] <samcv> m: my array[uint] = @a; my uint $blah = 10; @a.push( $blah)

[07:54] <camelia> rakudo-moar 139243: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Malformed my‚ê§at <tmp>:1‚ê§------> 3my array[uint]7‚èè5 = @a; my uint $blah = 10; @a.push( $bla‚ê§¬ª

[07:55] <samcv> m: my array[uint] @a; my uint $blah = 10; @a.push( $blah)

[07:55] <camelia> rakudo-moar 139243: OUTPUT: ¬´Type check failed in assignment to @a; expected array[uint] but got Int (10)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[07:55] <samcv> ack my brain is tired

[07:55] <samcv> sec

[07:55] <samcv> m: my array[uint] @a; my uint \blah = 10; @a.push( blah)

[07:55] <camelia> rakudo-moar 139243: OUTPUT: ¬´Type check failed in binding; expected uint but got Int (10)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[07:56] <samcv> m: my array[uint] @a; my uint $blah = 10; @a[0] = $blah

[07:56] <camelia> rakudo-moar 139243: OUTPUT: ¬´Type check failed in assignment to @a; expected array[uint] but got Int (10)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[07:56] <samcv> yeah it's converting it from uint to Int automatically

[07:56] <samcv> m: my array[uint] @a; my uint $blah = 10; @a[0] := $blah

[07:56] <camelia> rakudo-moar 139243: OUTPUT: ¬´Cannot resolve caller BIND-POS(Array[array[uint]]: Int, Int); none of these signatures match:‚ê§    (Array:D $: int $pos, array[uint] \bindval, *%_)‚ê§    (Array:D $: Int:D $pos, array[uint] \bindval, *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[07:57] <samcv> grondilu, what is your usecase btw?

[07:57] <samcv> so i can tell you how to solve your problem

[07:57] *** parv joined
[07:57] <samcv> trying to use uint's places it converts to Int when you use it around non nativecall things

[07:57] <samcv> they're mainly meant to be signatures for NativeCall

[07:59] *** mcmillhj left
[08:00] <samcv> m: subset uInt of Int where * > -1; my uInt $var = 10; say $var.WHAT

[08:00] <camelia> rakudo-moar 139243: OUTPUT: ¬´(Int)‚ê§¬ª

[08:00] <samcv> m: subset uInt of Int where * > -1; my uInt $var = 10; $var = -10

[08:00] <camelia> rakudo-moar 139243: OUTPUT: ¬´Type check failed in assignment to $var; expected uInt but got Int (-10)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[08:01] <samcv> you can do this if you just want an int that cannot be negative

[08:04] <samcv> PR have been sent :) grondilu looks like you got sent several

[08:05] *** jonas1 joined
[08:05] <samcv> just looks like one more. a MIT licensed one

[08:10] <grondilu> samcv: as I said I'm trying to improve https://github.com/grondilu/libdigest-perl6/blob/master/lib/Digest/SHA.pm

[08:11] <grondilu> for one if I can coerce arithmetics on uint32, I want have to explicitely do mod 2**32 

[08:11] <samcv> ah sorry didn't see. so do you need it to throw on it being set to a negative?

[08:12] <samcv> oh

[08:12] <grondilu> *won't

[08:12] <grondilu> also it might be much faster on native types

[08:13] <samcv> m: subset uInt32 of Int where 2**32 > * > -1; my uInt $var = 10; say $var.WHAT

[08:13] <camelia> rakudo-moar 139243: OUTPUT: ¬´5===SORRY!5===‚ê§Type 'uInt' is not declared. Did you mean any of these?‚ê§    uint‚ê§    UInt‚ê§    int‚ê§    Int‚ê§‚ê§at <tmp>:1‚ê§------> 3t32 of Int where 2**32 > * > -1; my uInt7‚èè5 $var = 10; say $var.WHAT‚ê§Malformed my‚ê§at <tmp>:1‚ê§---‚Ä¶¬ª

[08:14] <samcv> m: subset uInt32 of Int where 2**32 > * > -1; my uInt32 $var = 10; say $var.WHAT

[08:14] <camelia> rakudo-moar 139243: OUTPUT: ¬´(Int)‚ê§¬ª

[08:14] <samcv> m: subset uInt32 of Int where 2**32 > * > -1; my uInt32 $var = 10; $var = -1

[08:14] <camelia> rakudo-moar 139243: OUTPUT: ¬´Type check failed in assignment to $var; expected uInt32 but got Int (-1)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[08:14] <samcv> m: subset uInt32 of Int where 2**32 > * > -1; my uInt32 $var = 10; $var = 2**32

[08:14] <camelia> rakudo-moar 139243: OUTPUT: ¬´Type check failed in assignment to $var; expected uInt32 but got Int (4294967296)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[08:14] <samcv> m: subset uInt32 of Int where 2**32 > * > -1; my uInt32 $var = 10; $var = 2**32 

[08:14] <camelia> rakudo-moar 139243: OUTPUT: ¬´Type check failed in assignment to $var; expected uInt32 but got Int (4294967296)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[08:14] <samcv> m: subset uInt32 of Int where 2**32 > * > -1; my uInt32 $var = 10; $var = 2**32 -1

[08:14] <camelia> rakudo-moar 139243: ( no output )

[08:15] <Voldenet> erm

[08:15] <Voldenet> why not just use uint32

[08:15] <samcv> Voldenet, it doesn't coerce often

[08:15] <samcv> and perl 6 converts it to Int type when doing things to it

[08:15] <samcv> *often at least*

[08:17] <samcv> m: my uint32 $var; $var = $var+2; say $var

[08:17] <camelia> rakudo-moar 139243: OUTPUT: ¬´2‚ê§¬ª

[08:17] <samcv> m: my uint32 $var; $var = $var-10; say $var

[08:17] <camelia> rakudo-moar 139243: OUTPUT: ¬´4294967286‚ê§¬ª

[08:18] <samcv> yeah some things work. but many other operations don't

[08:19] *** astj left
[08:20] <samcv> grondilu, where are you getting the coercion btw?

[08:20] <samcv> with arrays?

[08:22] <samcv> ok actually looks like my uint32 @array is working

[08:23] <samcv> m: my uint32 @array; say @array.WHAT; @array[0] = -10; @array.push: -20; say @array;

[08:23] <camelia> rakudo-moar 139243: OUTPUT: ¬´(array[uint32])‚ê§4294967286 4294967276‚ê§¬ª

[08:23] <samcv> grondilu, it doesn't seem to work if you do `my array[uint] $blah` btw.

[08:24] *** salva left
[08:24] <grondilu> but why .WHAT says (Int)?

[08:24] <samcv> because it converts to Int before showing to the screen

[08:25] <grondilu> oh

[08:25] <grondilu> m: say (my uint32 $ = 1).WHAT

[08:25] <camelia> rakudo-moar 139243: OUTPUT: ¬´(Int)‚ê§¬ª

[08:25] <grondilu> indeed

[08:25] <samcv> yeah. sometimes things are weird like that

[08:25] *** xtreak left
[08:25] <samcv> same if you have a str object

[08:25] <samcv> m: my str $thing; say $thing.WHAT

[08:25] <camelia> rakudo-moar 139243: OUTPUT: ¬´(Str)‚ê§¬ª

[08:25] <grondilu> good to know

[08:25] <grondilu> kind of LTA though

[08:25] <samcv> yes

[08:26] <grondilu> m: say (my uint32 $ = 1) ~~ uint32

[08:26] <camelia> rakudo-moar 139243: OUTPUT: ¬´False‚ê§¬ª

[08:26] <grondilu> well that's dumb

[08:26] <samcv> grondilu, @array.WHAT works fine

[08:26] <samcv> but when it gets out of the array, and into some code that doesn't support uint32 it turns to an Int

[08:26] <samcv> say if you coerce it to a string

[08:26] <samcv> cause .WHAT is really a kind of macro

[08:27] <samcv> grondilu, but if you want you can do this

[08:27] <samcv> m: my uint32 @array = 10; @array[0].VAR.WHAT.say

[08:27] <camelia> rakudo-moar 139243: OUTPUT: ¬´(IntPosRef)‚ê§¬ª

[08:27] <grondilu> o.O

[08:27] <samcv> m: my uint32 @array = 10; my $thing = @array[0]; say $thing.VAR.WHAT

[08:27] <camelia> rakudo-moar 139243: OUTPUT: ¬´(Scalar)‚ê§¬ª

[08:28] <samcv> m: use nqp; my uint32 @array = 10; my $thing = @array[0]; say nqp::uncont($thing).VAR.WHAT

[08:28] <camelia> rakudo-moar 139243: OUTPUT: ¬´===SORRY!===‚ê§No registered operation handler for 'uncont'‚ê§¬ª

[08:28] <samcv> m: use nqp; my uint32 @array = 10; my $thing = @array[0]; say nqp::decont($thing).VAR.WHAT

[08:28] <camelia> rakudo-moar 139243: OUTPUT: ¬´(Int)‚ê§¬ª

[08:28] *** CIAvash left
[08:28] <samcv> heh. that. yeah it converts to Int when going from nqp to rakudo land

[08:28] <samcv> should have known

[08:29] <samcv> m: my uint32 @array = 10; my uint32 $thing = @array[0]; say $thing.VAR.WHAT

[08:29] <camelia> rakudo-moar 139243: OUTPUT: ¬´(IntLexRef)‚ê§¬ª

[08:29] <samcv> grondilu, so make sure you only put it in uint32 type objects or it will get converted all over the place

[08:29] <samcv> to non uint32

[08:29] <samcv> hopefully you don't need to store uint32 and other sizes in the same array

[08:30] <Voldenet> Well, I'd just use inline C (i've seen some lib) in that case

[08:30] <samcv> what case?

[08:30] <Voldenet> I'm not sure if nqp is able to do u32 * u32 operation

[08:30] <samcv> also is there inline C?

[08:30] <Voldenet> numeric operations

[08:30] <samcv> there's nativecall

[08:30] <Voldenet> https://github.com/FROGGS/p6-Inline-C

[08:30] <samcv> ah i see

[08:30] <samcv> *C

[08:31] <samcv> Voldenet, nqp has the uint32 type

[08:31] <samcv> my native uint32 is repr('P6int') is nativesize(32) is unsigned { }

[08:31] <samcv> that's its definition in nqp

[08:31] <Voldenet> I know, but then there's no nqp::mul_u

[08:31] <Voldenet> there's mul_i and mul_n only

[08:31] <Geth> Swapped META.info ‚Üí META6.json in 1 dists in https://github.com/perl6/ecosystem/commit/2c9ddb68a8

[08:32] <samcv> m:  my uint32 $var := 10; say($var)

[08:32] <camelia> rakudo-moar 139243: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot bind to natively typed variable '$var'; use assignment instead‚ê§at <tmp>:1‚ê§------> 3my uint32 $var := 107‚èè5; say($var)‚ê§¬ª

[08:32] <samcv> oops

[08:32] <samcv> nqp:  my uint32 $var := 10; say($var)

[08:32] <camelia> nqp-moarvm: OUTPUT: ¬´10‚ê§¬ª

[08:32] <samcv> see!

[08:32] <samcv> nqp:  my uint32 $var := 10; $var = $var *20; say($var)

[08:32] <camelia> nqp-moarvm: OUTPUT: ¬´Assignment ("=") not supported in NQP, use ":=" instead at line 2, near " $var *20;"‚ê§   at gen/moar/stage2/NQPHLL.nqp:768  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/NQPHLL.moarvm:panic)‚ê§ from <unknown>:1  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/nqp.m‚Ä¶¬ª

[08:32] <samcv> nqp:  my uint32 $var := 10; $var := $var *20; say($var)

[08:32] <camelia> nqp-moarvm: OUTPUT: ¬´200‚ê§¬ª

[08:33] <samcv> nqp:  my uint32 $var := 10; $var := $var *20-1000; say($var)

[08:33] <camelia> nqp-moarvm: OUTPUT: ¬´4294966496‚ê§¬ª

[08:33] <samcv> :)

[08:33] <Voldenet> nqp: my uint32 $var := 10; $var := $var * -20; say($var)

[08:33] <camelia> nqp-moarvm: OUTPUT: ¬´4294967096‚ê§¬ª

[08:35] <Voldenet> nqp: my uint32 $var := -1; $var := $var * -1; say($var)

[08:35] <camelia> nqp-moarvm: OUTPUT: ¬´1‚ê§¬ª

[08:35] <samcv> do you believeeeee now :) beleiving is magic

[08:35] <Voldenet> It really is! :)

[08:36] <sammers> hi all

[08:38] <Voldenet> hello

[08:39] <samcv> 123 more modules with license fields and we're pass 50%

[08:39] * samcv checks outstanding PR

[08:39] <samcv> 176. ok that is do-able!

[08:44] <sammers> I understand what :D means in the context of Str:D, but what does ::D mean in this context? sub foo(::D $str) {...}

[08:45] <moritz> sammers: here D is a type variable

[08:45] *** TEttinger left
[08:45] <moritz> sammers: so inside the function, D is bound to the type of the argument

[08:46] <sammers> moritz, thanks, but this fails: sub foo(::D $str, ::D $int) {...}

[08:46] <sammers> is it equivilent of := ?

[08:46] <moritz> sammers: you can declare sub foo(::D $str, D $other) { } for a function that takes two arguments of the same type

[08:47] <moritz> sammers: if you want to capture two types, you need to use two separate symbols

[08:47] <moritz> sub foo(::A $x, ::B $y) { ... }

[08:48] <sammers> hmm, ok, so ::A, ::B, ::C, etc these aren't real types, but the type of the variable passed?

[08:48] <moritz> yes, but you can use them as types inside the function

[08:48] <sammers> ok

[08:48] <moritz> and inside the rest of the signature

[08:48] <sammers> ok, so on-demand types?

[08:48] <sammers> not sure what the term is

[08:49] <moritz> type captures

[08:49] <sammers> ok

[08:49] <sammers> so in your example, sub foo(::D $str, D $other) { }, $other would have to be the same type as $str?

[08:51] <moritz> yes

[08:51] <moritz> (or a subtype thereof)

[08:53] *** xtreak joined
[08:53] <samcv> m: sub t (::D $blah) { say $blah.WHAT; }; t('hi')

[08:53] <camelia> rakudo-moar 139243: OUTPUT: ¬´(Str)‚ê§¬ª

[08:53] <samcv> m: sub t (::U $blah) { say $blah.WHAT; }; t('hi')

[08:53] <camelia> rakudo-moar 139243: OUTPUT: ¬´(Str)‚ê§¬ª

[08:53] <samcv> hm

[08:54] <sammers> m: sub foo(::D $first, D $second) { say "$first, $second" }; foo("hello", "world");

[08:54] <camelia> rakudo-moar 139243: OUTPUT: ¬´hello, world‚ê§¬ª

[08:54] <sammers> ok, thanks for the explanation 

[08:55] <sammers> m: sub foo(::D $first, D:D $second) { say "$first, $second" }; foo("hello", "world");

[08:55] <camelia> rakudo-moar 139243: OUTPUT: ¬´hello, world‚ê§¬ª

[08:55] <sammers> m: sub foo(::D $first, D:D $second) { say "$first, $second" }; foo("hello");

[08:55] <camelia> rakudo-moar 139243: OUTPUT: ¬´Too few positionals passed; expected 2 arguments but got 1‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[08:55] <sammers> m: sub foo(::D $first, D:D $second) { say "$first, $second" }; foo("hello", 123);

[08:55] <camelia> rakudo-moar 139243: OUTPUT: ¬´Type check failed in binding to parameter '$second'; expected Str but got Int (123)‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:07] *** Sound joined
[09:07] *** Sound left
[09:07] *** Sound joined
[09:07] *** Cabanossi left
[09:09] *** geekosaur left
[09:09] *** Cabanossi joined
[09:10] *** domidumont joined
[09:11] *** geekosaur joined
[09:31] *** sat left
[09:32] <Geth> Swapped META.info ‚Üí META6.json in 1 dists in https://github.com/perl6/ecosystem/commit/f0673525b3

[09:37] *** labster left
[09:37] *** parv left
[09:39] *** Cabanossi left
[09:40] *** Cabanossi joined
[09:45] *** sena_kun joined
[09:53] <samcv> omg YES

[09:53] <samcv> ok i finally got the old language-perl6fe package to install the newer language-perl6 one

[09:55] <sena_kun> samcv++ for all routine license-related work(though I don't understand fully its goals, but still)

[09:55] <samcv> hopefully i can get it to install the new one without prompting and disable the old one

[09:55] <samcv> sena_kun, so that people know what license the project is before downloading it

[09:55] <samcv> and you can have effective black and whitelists for your package manager, and other things that will be very important to companies

[09:56] <samcv> or people for that matter.

[09:59] <sena_kun> samcv, well, I am not a business company, so all the difference between open licences is small for me, and proprietary modules is a strange thing... whatever. Yet I can understand practical benefits of such solution. I am cleaning up Failing Ecosystem Modules List now.

[09:59] <samcv> nice :)

[09:59] <samcv> we need a strong ecosystem :)

[10:00] <samcv> sena_kun, unless there's metadata showing what license is, you can't tel without manually going to the github page and checking *if* there's a license file or not

[10:00] <samcv> if they have a tag then it makes computers lives much easier than analyzing a LICENSE file like i'm having to do to figure out which license they are

[10:00] <sena_kun> samcv, your line is what I thought about when wrote "practical benefits of such solution". :)

[10:01] <samcv> ah yeah

[10:02] <Geth> ¬¶ ecosystem: b4a50dd35c | Altai-man++ (committed using GitHub Web editor) | META.list

[10:02] <Geth> ¬¶ ecosystem: Remove Devel::Trace

[10:02] <Geth> ¬¶ ecosystem: 

[10:02] <Geth> ¬¶ ecosystem: It was broken, deprecated and basically useless

[10:02] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/b4a50dd35c

[10:04] *** japhdc joined
[10:04] <Geth> ¬¶ ecosystem: b8adcc0afb | (Nadim Khemir)++ (committed by Zoffix Znet) | META.list

[10:04] <Geth> ¬¶ ecosystem: ADDED: P6-Grammar-Tracer-Compact (#332)

[10:04] <Geth> ¬¶ ecosystem: 

[10:04] <Geth> ¬¶ ecosystem: https://github.com/nkh/P6-Grammar-Tracer-Compact

[10:04] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/b8adcc0afb

[10:06] <sena_kun> samcv, asking your opinion... There are modules that depend on some outer .so, obviously, they're failing under travis. Shoule we keep them in the List? It is unlikely as for me.

[10:07] <timotimo> no, they just have to apt-get the required files in their .travs.yml

[10:07] *** japhdotcom joined
[10:07] <moritz> samcv's tests != travis

[10:07] <samcv> yeah

[10:07] <timotimo> oh

[10:08] *** Cabanossi left
[10:08] <samcv> sena_kun, open a new ticket for that

[10:08] <samcv> failing travis tests

[10:08] <sena_kun> samcv, what kind of ticket? To the authors or?

[10:09] <samcv> sena_kun, authors, and you can have an eco ticket too if you think it would be helpful. in case people want to submit PR to failing ones

[10:09] <samcv> or even just the ones with the most stars on them with failing travis or something

[10:09] <samcv> whatever you think is best :)

[10:09] *** Cabanossi joined
[10:10] <sena_kun> samcv, ah, sorry. I have meant that your travis test is failing, but the modules(and their tests) are fine. I.e. false postives because of missing .so in your test machine

[10:10] <samcv> oh MINE?

[10:10] *** japhdotcom left
[10:10] <sena_kun> yep

[10:10] <samcv> thank you :) which one

[10:10] *** japhdotcom joined
[10:11] *** japhdc left
[10:12] <samcv> sena_kun, i'm gonna start up another module build run

[10:12] <sena_kun> samcv, well, there are about 10-15(it is VERY rude approximation), I can create a list for you, perhaps. Snowball module, at least.

[10:12] <samcv> i'm having it randomize the module install order as well

[10:12] <samcv> i don't have a Snowball module?

[10:13] <sena_kun> samcv, hmmm, the last time I looked at it, it was fine... I will recheck it now.

[10:13] <samcv> recheck what?

[10:13] <samcv> oh travis?

[10:13] <sena_kun> samcv, working it or not on my local machine.

[10:13] <sena_kun> ah, I have remembered.

[10:14] <samcv> sena_kun, starting another build of all modules: http://hack.p6c.org/~samcv/install_log_live4 so check back at this link in many hours (forget how long the others ones take. many hours)

[10:14] <sena_kun> this module needs a custom .so or something like that afaik

[10:14] <sena_kun> anyway

[10:15] <samcv> link to it?

[10:15] <sena_kun> samcv, I think you want to do a bit more automatisation. Just pure

[10:15] <sena_kun> https://github.com/Sufrostico/perl6-snowball

[10:15] <samcv> that travis ran a year ago. wow

[10:15] <sena_kun> ...log is too long to work with. I think we can grep basic things out, store it in some format and then compare, diff, etc.

[10:16] <samcv> heh :)

[10:16] <samcv> sounds like a plan

[10:16] <sena_kun> I know, I know, "nice contributed. sena_kun". :)

[10:16] <samcv> you can grep for the normal ==> FAILED (i think that's what it is

[10:16] <samcv> exactly!

[10:17] <samcv> or also `¬ª¬ª üÜó`

[10:17] <samcv> or `¬ª¬ª ‚ö†Ô∏è`

[10:17] <sena_kun> well, I didn't plan any work, but closer to weekends I can try to cooperate

[10:18] <samcv> oops my bad. starting here http://hack.p6c.org/~samcv/install_log_live4.txt no wonder unicode wasn't showing up. wasn't .txt

[10:18] <samcv> sena_kun, no rush. do what you can! :)

[10:19] <sena_kun> samcv, sure. I will ping you later than

[10:19] <samcv> cool :) i must go to bed now

[10:19] <sena_kun> s/then/than/

[10:20] <sena_kun> samcv, have a good sleep.

[10:20] <Geth> ¬¶ ecosystem: 6a114946e4 | (Alexey Melezhik)++ (committed using GitHub Web editor) | META.list

[10:20] <Geth> ¬¶ ecosystem: canonical name for META file

[10:20] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/6a114946e4

[10:22] <Geth> ¬¶ ecosystem: 27f951feb4 | (Alexey Melezhik)++ (committed using GitHub Web editor) | META.list

[10:22] <Geth> ¬¶ ecosystem: Canonical name for sparrowdo-archive META file

[10:22] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/27f951feb4

[10:22] *** japhdotcom left
[10:24] <Geth> ¬¶ ecosystem: c44efa3e57 | (Alexey Melezhik)++ (committed using GitHub Web editor) | META.list

[10:24] <Geth> ¬¶ ecosystem: sparrowdo-chef-manager - sets canonical name for META file

[10:24] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/c44efa3e57

[10:25] <Geth> ¬¶ ecosystem: 2dbfe6f290 | (Alexey Melezhik)++ (committed using GitHub Web editor) | META.list

[10:25] <Geth> ¬¶ ecosystem: sparrowdo-cpm - sets canonical name for META file

[10:25] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/2dbfe6f290

[10:27] <Geth> ¬¶ ecosystem: 02af6745c9 | (Alexey Melezhik)++ (committed using GitHub Web editor) | META.list

[10:27] <Geth> ¬¶ ecosystem: sparrowdo-nginx - sets canonical name for META

[10:27] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/02af6745c9

[10:30] <timotimo> oh samcv, congrantulations!

[10:30] <samcv> :-) nice pun

[10:30] *** eliasr joined
[10:31] *** John[Lisbeth] left
[10:31] *** John[Lisbeth] joined
[10:31] <timotimo> nice grant (-:

[10:32] <jnthn> samcv++ 

[10:35] *** xtreak left
[10:35] *** xtreak joined
[10:38] *** xtreak left
[10:39] *** xtreak joined
[10:41] <samcv> yay https://github.com/MadcapJake/language-perl6fe/pull/56 hopefully madcapjake is still around by the time he sees this PR

[10:47] <sammers> m: <a b c>.List Z=> <d e f>.List

[10:47] <camelia> rakudo-moar a96806: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of Z=> in sink context‚ê§    at <tmp>:1‚ê§    ------> 3<a b c>.List 7‚èè5Z=> <d e f>.List‚ê§¬ª

[10:47] <sammers> m: say <a b c>.List Z=> <d e f>.List

[10:47] <camelia> rakudo-moar a96806: OUTPUT: ¬´(a => d b => e c => f)‚ê§¬ª

[10:47] <sammers> m: my List $l1 = <a b c>; my List $l2 = <d e f>; say $l1 Z=> $l2;

[10:47] <camelia> rakudo-moar a96806: OUTPUT: ¬´((a b c) => (d e f))‚ê§¬ª

[10:47] <sammers> hmm

[10:48] <sammers> what is the difference between those? does the first one zip because they aren't in the container?

[10:49] <sammers> er, zip into pairs because they aren't in containers.

[10:49] <sammers> m: my @l1 = <a b c>; my @l2 = <d e f>; say @l1 Z=> @l2;

[10:49] <camelia> rakudo-moar a96806: OUTPUT: ¬´(a => d b => e c => f)‚ê§¬ª

[10:49] <sammers> hmm

[10:51] <sammers> m: my List $l1 = <a b c>; my List $l2 = <d e f>; say |$l1 Z=> |$l2;

[10:51] <camelia> rakudo-moar a96806: OUTPUT: ¬´(a => b => c => d => e => f)‚ê§¬ª

[10:51] <sammers> ha

[10:53] <jnthn> It's because $l1 is an itemized list

[10:53] <jnthn> So it's treated as an item

[10:54] <jnthn> m: my List $l1 = <a b c>; my List $l2 = <d e f>; say @$l1 Z=> @$l2

[10:54] <camelia> rakudo-moar a96806: OUTPUT: ¬´(a => d b => e c => f)‚ê§¬ª

[10:54] <sammers> ah

[10:54] <sammers> that is good to know....

[10:54] <sammers> thanks

[11:02] <sammers> jnthn, is there anywhere in the docs that discuss the @$ behavior? 

[11:08] <sammers> found this post from 2014 "@ as shortcut for @$, % as shortcut for %$"  http://rakudo.org/2014/04/01/rakudo-star-release-2014-03/

[11:08] <jnthn> I believe there's a section in the language docs on containerization and so forth

[11:09] *** Cabanossi left
[11:09] <sammers> ok, I will dig around. thanks.

[11:10] *** Cabanossi joined
[11:10] <sammers> found it, "The @ character can also be used as a prefix to remove a scalar container" https://docs.perl6.org/language/containers

[11:11] <timotimo> we might want to give the "Other sites" section on the sidebar of rakudo.org a litle do-over

[11:12] <timotimo> there's still a link to the #perl6 reports, it links to the regular perlweekly instead of the p6weekly, it links to perl6maven which i think hasn't been updated in a long while?

[11:12] <timotimo> and pm hasn't blogged on pmthium.com since 2015.02

[11:13] <timotimo> huh, i never knew pm made pmwiki

[11:36] *** cyphase left
[11:39] *** Cabanossi left
[11:40] *** Cabanossi joined
[11:40] <timotimo> https://twitter.com/rauchg/status/712800259089391617  -  build this for perl6. now.

[11:42] <timotimo> wow, this is already more than a year old

[11:43] <timotimo> i guess we're too late now

[11:48] *** nwc10 joined
[11:49] <nwc10> daxim (who is also here) posted this on #austria.pm earlier and I don't think that he or anyone else has mentioned it: http://stackoverflow.com/questions/43618487/why-is-treated-so-strangely-in-swift-strings

[11:50] <nwc10> daxim++

[11:50] <nwc10> and whilst I've read it quickly, I'm still not sure (a) what should be the right behaviour (b) what Perl 6 says the right behaviour ought to be (c) what it actually does

[11:51] <nwc10> and I must admit that also I don't *mind* what the discussion is, as long as someone has a sane answer by the time I need to use it :-)

[11:51] <nwc10> given that right now I'm more worried about image processing pipelines, being CPU bound, and concurrency

[11:51] <nwc10> than text processing.

[11:52] <nwc10> (oh, and details of house building)

[11:54] *** cyphase joined
[11:57] *** pmurias joined
[11:58] *** dogbert17_ joined
[12:07] *** xtreak left
[12:09] *** cpage joined
[12:10] *** xtreak joined
[12:11] *** xtreak left
[12:15] <TreyHarris> samcv: I don't mean to burst your bubble--because I do think licensing metadata is very useful and your work is thankless--but are you familiar with many companies that have a particular and custom list of blessed licenses where license-checking is the entirety of their compliance? Because at the large companies I've worked at, the rule has either been "anything under an open-source license (using one of the

[12:15] <TreyHarris> various blessed lists but not their own ad-hoc one) is okay for pre-release, for release you need to go through full review" or it's been "nothing is okay for any purpose, not even download, no matter what its purported license, until legal's okayed it". It may be the case that you work can turn "legal's okayed it for download at least" into a bot, but beyond that, I'm not sure "check to see if the license of

[12:15] <TreyHarris> software X is on our list Ls; if so, allow" is any big company's FOSS SOP.

[12:17] <TreyHarris> (Your other reasons why this is useful still obtain [pertain? I was never sure of the difference between the two in this mood], I just don't think "companies need to do license-exists-in-set checking" is a particularly strong one.)

[12:17] *** dalek joined
[12:17] *** ChanServ sets mode: +v dalek

[12:21] <robertle> debian has machine-readbale copyright files, and it turns out that many of them are quite complicated, with the software in question being covered by a variety of licenses. so I guess license metadata needs to be powerful enough to express that...

[12:22] <sammers> m: my $fam = "üë©üë©üëßüë¶"; say $fam.contains("üë©üë©üëßüë¶"); say $fam.contains("üë©"); say $fam.contains("üëß"); say $fam.contains("üë¶");

[12:22] <camelia> rakudo-moar a96806: OUTPUT: ¬´True‚ê§True‚ê§True‚ê§True‚ê§¬ª

[12:23] <sammers> nwc10 ^^^

[12:26] <sammers> m: my $fam = "\c[WOMAN]\c[ZWJ]\c[WOMAN]\c[GIRL]\c[BOY]"; say $fam.contains("\c[WOMAN]\c[ZWJ]\c[WOMAN]\c[GIRL]\c[BOY]"); say $fam.contains("\c[WOMAN]"); say $fam.contains("\[GIRL]"); say $fam.contains("\c[BOY]");

[12:26] <camelia> rakudo-moar a96806: OUTPUT: ¬´True‚ê§False‚ê§False‚ê§True‚ê§¬ª

[12:27] *** jameslenz left
[12:28] *** bjz joined
[12:33] <Geth> Swapped META.info ‚Üí META6.json in 1 dists in https://github.com/perl6/ecosystem/commit/9a90eab339

[12:33] <pmurias> TreyHarris: if we have license metadata that's displayed by our module list at least it will encourage people to add a LICENSE file :)

[12:35] * [Coke] would like to again thank the perl6 community for defaulting to positive.

[12:35] <sammers> m: my $fam = "\c[family: woman woman girl boy]"; say $fam.uninames; say $fam.contains("\c[woman]\c[zero width joiner]\c[woman]\c[zero width joiner]\c[girl]\c[zero width joiner]\c[boy]"); say $fam.contains("\c[woman]"); say $fam.contains("\[girl]"); say $fam.contains("\c[boy]");

[12:35] <camelia> rakudo-moar a96806: OUTPUT: ¬´(WOMAN ZERO WIDTH JOINER WOMAN ZERO WIDTH JOINER GIRL ZERO WIDTH JOINER BOY)‚ê§True‚ê§False‚ê§False‚ê§False‚ê§¬ª

[12:37] <TreyHarris> pmurias: I said, other reasons given were valid AFAIK and I wasn't arguing against it--I support it. I just strongly believe in not making arguments for things you can't back up with data or reason. It dilutes the rest of your argument.

[12:38] <TreyHarris> Surely you've had the experience of someone on teh Internets saying basically, "ah-hah! I just showed that a very minor ancillary point you made is technically wrong, therefore your entire premise is proved invalid. Q.E.D.!"

[12:39] <TreyHarris> That's not logically valid either, but why make the unforced error?

[12:42] <sammers> TreyHarris, what is wrong with requiring a license again? Can't someone still write a module and not include it on modules.perl6.org if they want?

[12:43] <TreyHarris> sammers: are you replying to what i've written in the past 30 minutes? Or what I was saying about 14 hours ago?

[12:43] <TreyHarris> in re public domain?

[12:44] *** wamba joined
[12:45] <sammers> yeah, just catching up. can you feel me in? 

[12:46] <TreyHarris> sammers: that is not an answer to my question. :-) Catching up on what I just wrote, or what I wrote about public domain yesterday? Because I have very different answers depending on which you were reacting to

[12:46] <sammers> just asking about the last few comments on the licensing.

[12:48] <TreyHarris> sammers: There's nothing wrong with requiring a license.

[12:50] <TreyHarris> sammers: I didn't say nor imply that. I said when you are asked, "*why* require a license in a certain parseable metadata format?" that, "because companies will use it to help decide what modules to allow the use of" is not, I believe a strong argument. The other arguments in favor are better and sufficient.

[12:51] <TreyHarris> clearer now?

[12:52] <sammers> ah, thanks for spelling it out.. I see your point. I guess having consistency will eventually make it easier in the long run. although, just having the LICENSE text file could do the same thing...

[12:53] <jnthn> As a data point, I'm currently on a project where I do have to care a bit about the licenses of things, and having that displayed in the module listing (or easily accessible in those results) would save a visit to the module repo. :) So having it in metadata would at least enable a little more laziness in my case. :-)

[12:54] <TreyHarris> jnthn++

[12:54] <jnthn> Well, with the frontend to do so

[12:54] <TreyHarris> _that_ is a good argument :-)

[12:55] <TreyHarris> OS companies and cloud companies and hosting companies probably all would benefit. but the average company with Perl coders who want to use ecosystem modules in their code? I doubt it.

[12:57] <sammers> also, it is becoming somewhat standard among other language module / packaging to include license in the metadata. Not sure if that is a good argument for, but it seems to be where everyone else is moving.

[12:58] <Ulti> TreyHarris: where I work what license the library uses is incredibly important

[12:58] <Ulti> I had to manually review our cpan deps among others

[12:58] <Ulti> it was not fun

[12:59] <Ulti> perl using the artistic license is not very helpful in this decade either if you have to talk to VC investors

[12:59] <TreyHarris> Ulti: and the companies I've worked at as well. But the compliance groups didn't accept the LICENSE file on the basis of its existence alone; the idea that they'd accept a string in metadata seems extremely unlikely to me.

[12:59] <TreyHarris> the very paranoid ones looked at the source code, where it came from, checked for fork history, etc.

[13:00] <Ulti> depends how worried you are, if its another companies software then sure... but if its a cabal of OS developers we genuinely just take them at their word

[13:00] <Ulti> though random OS contributor is not going to worry about ripping something off either

[13:00] <Ulti> necessarily

[13:00] <Ulti> TreyHarris: Im usually more worried with our inhouse code where people just copy paste from stackoverflow 

[13:01] <pmurias> Ulti: it the Artistic-2.0 license a problem too?

[13:01] <Ulti> and then it turns out half the answers are essentially someones internal "solution" to the question with very little editing

[13:01] <TreyHarris> right. the less-paranoid ones didn't require a lawyer get involved at all, so perhaps an internal module-installer than knew which licenses were allowed and spouted warnings if you tried to install a module that wasn't using a blessed license would be useful to those companies.

[13:01] <[Coke]> IME, it's used to narrow the field, not guarantee you're clear.

[13:01] <Ulti> pmurias: yeah because most investors know they should worry about licensing but dont know anything about it so unless you can summarise it they can just do something stupid and say blanket "no open source'

[13:02] *** mcmillhj joined
[13:02] <Ulti> which is kind of like kneecapping developers in the age we live in

[13:02] <Ulti> and essentially not possible

[13:02] <[Coke]> (e.g. I can safely ignore anything GPL'd on the list if I'm using it for $dayjob, but I could take an Artistic 2 license to legal for review)

[13:03] <Ulti> TreyHarris: for us its more about saying what risk we do and dont accept, accepting that some developers mislabelled their stuff in the ecosystem is fine if its retracted we'd have to respond but saying we accept anytihng with licenses *blah* at module install time would go such a long way to limit how much work there is to do

[13:04] <Ulti> [Coke]: for me GPL is ok so long as it doesn't have an A prefixed

[13:05] <TreyHarris> my point: the metadata (meaning you can programmatically check the license without downloading the code itself, given that simply downloading the code may be objectionable depending on license) will help a subset of companies immensely, and is work those companies can't do themselves, and that's a good argument. I just doubt it will be widely used by other companies who simply employ programmers who want to

[13:05] <Ulti> simply because that is murky for how we use things and most of the people who use AGPL have some intention to be awkward 

[13:05] <TreyHarris> use ecosystem modules, so that shouldn't be one of the arguments used in favor. But I think "cloud companies, OS companies, and companies that do packaging will really, REALLY benefit" is a strong enough argument by itself.

[13:06] <Ulti> the issue is what do you do with weird and wonderful made up licenses

[13:06] <Ulti> which is all academic software ever pre 2010

[13:06] <[Coke]> Ulti: ... I would never use those for dayjob, probably.

[13:07] <sammers> Coke: Charityware

[13:08] *** Cabanossi left
[13:08] <pmurias> having the weird (and also one made on purpuse to be annoying/stupid) licenses marked by our module browser seems helpfull

[13:09] <pmurias> * purpose

[13:09] <Ulti> zef giving a warning for things not on some config list of ok licenses would be cool

[13:09] <Ulti> especially with trails of deps

[13:09] *** Cabanossi joined
[13:09] *** buggable left
[13:09] <Ulti> you might check by hand the thing you want to install but probably not all the deps

[13:10] <Ulti> I think we in theory have a requirement in our quality policy all devs do this, none of them do

[13:10] <Ulti> at least not at point of authoring code with a new dep

[13:11] <TreyHarris> heh, what license is sleepycat using these days? they wreaked havoc across wall street in the aughts (since wall street at the time were heavy Perl users, and if you used default tied hashes, you tended to use Berkeley DB whether you knew it or not)

[13:11] <TreyHarris> ah, sleepycat was acquired by Oracle. Of course they were.

[13:13] *** buggable joined
[13:13] *** ChanServ sets mode: +v buggable

[13:13] <sammers> Util, adding a white/black list of licenses to meta for zef would be useful too. but that might get a bit out of hand.

[13:15] *** buggable left
[13:15] <Util> sammers: s/Util/Ulti/     # An easy typo to make

[13:15] <yoleaux> 19 Apr 2017 18:47Z <Zoffix> Util: there are some unmerged PRs that've been marinating for months. Do you mind merging them? https://github.com/MattOates/Text--Homoglyph/pulls

[13:15] <yoleaux> 19 Apr 2017 18:51Z <Zoffix> Util: sorry, mistaken identity. :)

[13:15] *** buggable joined
[13:15] *** ChanServ sets mode: +v buggable

[13:15] <sammers> I totally read Util, sorry Ulti!

[13:16] <pmurias> m: my Int $foo = NaN; #is that supposed to work?  we have a fudged test for that

[13:16] <camelia> rakudo-moar bd9e57: OUTPUT: ¬´Type check failed in assignment to $foo; expected Int but got Num (NaN)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:17] <jnthn> No, I don't believe it should

[13:17] <jnthn> Assignment ain't meant to be that magical :)

[13:18] <TreyHarris> sammers: if you mean as a local configuration zef can read and respond to and not as something pre-installed, I agree. (useful, and not "out of hand" i mean; trying to include a list, even a taxonomy like "bsd-like" or "redistributable" or "OSI-approved", would definitely get out of hand fast and isn't very useful I don't think.)

[13:19] <sammers> TreyHarris, that makes more sense, having a family of acceptable licenses or something similar.

[13:20] <sammers> yeah, I guess the companies would be more concerned with the specific license types that they don't want.

[13:20] <sammers> no GPL, etc.

[13:22] <sammers> then again, if they need to do this for legan reasons then they really need a human looking at the licensing and making decisions. 

[13:22] <sammers> s/legan/legal/

[13:24] <TreyHarris> sammers: no, no... the company that installs zef can deal with the family of acceptable licenses; zef's maintainer shouldn't be in that business

[13:25] <sammers> right

[13:25] <sammers> I agree

[13:25] <TreyHarris> cool.

[13:26] *** skids joined
[13:38] <Geth> ¬¶ ecosystem: 7e9410b3c0 | (Jonathan Worthington)++ (committed using GitHub Web editor) | META.list

[13:38] <Geth> ¬¶ ecosystem: Add Concurrent::Progress.

[13:38] <Geth> ¬¶ ecosystem: 

[13:38] <Geth> ¬¶ ecosystem: See https://github.com/jnthn/p6-concurrent-progress for more information.

[13:38] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/7e9410b3c0

[13:41] <TreyHarris> out of curiosity, what is the difference between modules hosted by the perl6 project in META.list and other ecosystem modules?

[13:48] <sena_kun> TreyHarris, the owner, basically. Because some module is important for the whole ecosystem or for because of some other reasons, the modules hosted under perl6 have greater chances to survive if contributor by some reason abandon it. I am not a professor, though, but that's how I got it.

[13:49] <Ulti> sammers: I dont think you should constrain what can and cant be in the ecosystem though

[13:50] <Ulti> if anything you should add in billing for using the library :D

[13:50] <Ulti> some nice paypal integration maybe

[13:51] <Ulti> with kickbacks to core developers....

[13:52] <Ulti> yeah its unfortunate Util is more promenant in perl land, but I've used Ulti as a nick on IRC for about 15 years so not super keen to change it

[13:52] *** raschipi joined
[13:53] *** lowbro left
[13:57] <sammers> Ulti, I agree. I haven't seen any mention of restriced licenses yet. Not sure if anyone was discussing that. 

[13:57] <Ulti> oh you mean a user level one rather than one built in for zef

[13:57] <Ulti> sorry

[13:57] <sammers> zef donate $5

[13:59] *** cdg joined
[14:10] <TreyHarris> Ulti: yes.  metadata makes having a framework for such things possible, but making things possible does not oblige the core utilities to implement them.

[14:11] *** nwc10 left
[14:23] *** _ramix_ joined
[14:24] *** nowan left
[14:24] *** _ramix_ left
[14:27] *** nowan joined
[14:28] *** bjz left
[14:31] *** cdg_ joined
[14:32] *** cdg left
[14:36] *** wamba left
[14:39] *** Cabanossi left
[14:39] *** Cabanossi joined
[14:42] <raschipi> TreyHarris: Would something like Debian machine readable copyright file solve these problems? https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/

[14:44] *** astj joined
[14:49] *** astj left
[14:53] *** curan left
[14:53] *** curan joined
[14:55] <SmokeMachine> if Im creating a function like this: my &new-func = &pure-func1 ‚àò &pure-func2; How could I "annotate" the new-func as pure?

[14:56] <skids> m: my &f = sub { }; &f.HOW.^methods.say

[14:56] <camelia> rakudo-moar bd9e57: OUTPUT: ¬´No such method 'gist' for invocant of type 'NQPRoutine'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:56] <skids> m: my &f = sub { }; .name.say for &f.HOW.^methods

[14:56] <camelia> rakudo-moar bd9e57: OUTPUT: ¬´archetypes‚ê§new‚ê§new_type‚ê§add_fallback‚ê§compose‚ê§roles‚ê§role_typecheck_list‚ê§concretization‚ê§is_composed‚ê§setup_junction_fallback‚ê§find_method_fallback‚ê§has_fallbacks‚ê§submethod_table‚ê§private_method_table‚ê§invocation_attr_name‚ê§parents‚Ä¶¬ª

[14:57] <skids> m: my &f = sub { }; .name.say for &f.^methods

[14:57] <camelia> rakudo-moar bd9e57: OUTPUT: ¬´<anon>‚ê§<anon>‚ê§soft‚ê§<anon>‚ê§<anon>‚ê§yada‚ê§perl‚ê§<anon>‚ê§<anon>‚ê§<anon>‚ê§onlystar‚ê§candidates‚ê§unwrap‚ê§wrap‚ê§<anon>‚ê§multi‚ê§package‚ê§leave‚ê§<anon>‚ê§<anon>‚ê§<anon>‚ê§<anon>‚ê§<anon>‚ê§<anon>‚ê§<anon>‚ê§<anon>‚ê§cando‚ê§fire_if_phasers‚Ä¶¬ª

[14:57] <moritz> m: my $x = sub ($x) { 2 * $x }; trait_mod:<is>($x, :pure);

[14:57] <camelia> rakudo-moar bd9e57: ( no output )

[14:57] <moritz> m: my $x = sub ($x) { 2 * $x }; trait_mod:<is>($x, :pure); say $x

[14:57] <camelia> rakudo-moar bd9e57: OUTPUT: ¬´sub ($x) { #`(Sub+{<anon|50240176>}|34992320) ... }‚ê§¬ª

[14:57] <moritz> SmokeMachine: ^^

[14:57] <SmokeMachine> moritz: good one!

[14:58] <skids> Ah, I was looking for a set_pure.

[14:58] <moritz> SmokeMachine: it helps that I implemented it initially :-)

[14:58] <moritz> (iirc)

[14:58] <SmokeMachine> m: my $x = sub ($x) { 2 * $x }; trait_mod:<is>($x, :pure); say $x.IS_PURE

[14:58] <camelia> rakudo-moar bd9e57: OUTPUT: ¬´True‚ê§¬ª

[14:58] <skids> But doesn't pure really need to be known at compile time to do anything?

[14:59] <SmokeMachine> skids: I think you are right...

[14:59] <SmokeMachine> should make sense: my &new-func is pure = ... ?

[15:00] <jnthn> maybe my constant &new-func = ...

[15:00] <jnthn> Would work out

[15:00] <jnthn> Since then it's set at compile time

[15:04] <skids> .oO(Hrmm... a module full of derogatory do-nothing trait mods for cranky coders)

[15:05] *** wamba joined
[15:09] <moritz> skids: is superfluous, is stupid, does shit, stuff like that?

[15:09] * moritz not good with derogatory

[15:09] <jnthn> .oO( is too-clever-for-you )

[15:10] <skids> Yeah. "is pointless", "is slow", "is why-i-cry-at-night"

[15:11] *** isBEKaml joined
[15:11] <jast> is pythonic O:)

[15:11] <skids> ACME namespace, of course.

[15:16] *** curan left
[15:20] *** khw joined
[15:21] *** eliasr left
[15:31] <Ulti> is dead but for actually doing tombstone testing to see if the function is ever called and delete it otherwise

[15:32] <Ulti> is perl via use Tautology

[15:32] <Ulti> method is method

[15:34] <Geth> Swapped META.info ‚Üí META6.json in 1 dists in https://github.com/perl6/ecosystem/commit/7c438f2881

[15:34] <skids> For that you need scope declarators

[15:34] <skids> "stupid method is stupid"

[15:38] *** Cabanossi left
[15:39] *** Cabanossi joined
[15:42] *** geekosaur left
[15:44] *** geekosaur joined
[15:45] *** lauct joined
[15:47] *** araraloren joined
[15:48] <araraloren> Hi ~~

[15:49] <araraloren> m: class I does Iterable { has @.a = <1 2 3>; method iterator() { @!a.iterator(); }; }; .say for I.new; my $i = I.new; .say for $i;

[15:49] <camelia> rakudo-moar bd9e57: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§I.new(a => [IntStr.new(1, "1"), IntStr.new(2, "2"), IntStr.new(3, "3")])‚ê§¬ª

[15:50] <araraloren> Can I make `for` work on scalar variable ?

[15:51] *** leont joined
[15:52] <titsuki> bisectable: ["1:0.470572470261861", "2:0.579981821025709"]>>.split(":", :skip-empty).sort({ $^b[0] <=> $^a[0] }).perl.say; # sorry

[15:52] <bisectable6> titsuki, Bisecting by output (old=2015.12 new=d22303d) because on both starting points the exit code is 0

[15:52] <bisectable6> titsuki, bisect log: https://gist.github.com/5a8de29a0b9750d2da2a4074221658e6

[15:52] <bisectable6> titsuki, (2016-12-28) https://github.com/rakudo/rakudo/commit/434bf75b9d69747f8b13de92a64bde296ecab5be

[15:54] *** astj joined
[15:54] *** sufrostico left
[15:55] <jnthn> araraloren: Would need to be `for |$i`

[15:55] <araraloren> m: class I does Iterable { has @.a = <1 2 3>; method iterator() { @!a.iterator(); }; }; .say for I.new; my $i = I.new; .say for |$i;

[15:55] <camelia> rakudo-moar d22303: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§I.new(a => [IntStr.new(1, "1"), IntStr.new(2, "2"), IntStr.new(3, "3")])‚ê§¬ª

[15:55] <skids> araraloren: Protecting from iteration is kinda the point of a $.

[15:56] <araraloren> Seem like does not work..

[15:56] <jnthn> Hm, I thought that'd do it

[15:56] <skids> @$

[15:56] <araraloren> m: class I does Iterable { has @.a = <1 2 3>; method iterator() { @!a.iterator(); }; }; .say for I.new; my $i = I.new; .say for |@$i;

[15:56] <camelia> rakudo-moar d22303: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§I.new(a => [IntStr.new(1, "1"), IntStr.new(2, "2"), IntStr.new(3, "3")])‚ê§¬ª

[15:56] <araraloren> m: class I does Iterable { has @.a = <1 2 3>; method iterator() { @!a.iterator(); }; }; .say for I.new; my $i = I.new; .say for @$i;

[15:56] <camelia> rakudo-moar d22303: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§I.new(a => [IntStr.new(1, "1"), IntStr.new(2, "2"), IntStr.new(3, "3")])‚ê§¬ª

[15:56] <jnthn> Well, @$ will only work if you implement .cache in your class too

[15:56] <jnthn> But yes, as skids said, the point of $ is "it's an item"

[15:57] <araraloren> But how I.new works fine

[15:57] <jnthn> Assignment into a Scalar really is putting the value into a container

[15:57] <jnthn> Becuase you didn't put it into a scalar container

[15:57] <jnthn> my \i = I.new; .say for i; # also would work

[15:58] <jnthn> m: class I does Iterable { has @.a = <1 2 3>; method iterator() { @!a.iterator(); }; }; my \i = I.new; .say for i

[15:58] <camelia> rakudo-moar d22303: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§¬ª

[15:58] <jnthn> Since there's no scalar container involved there either, it's just a direct storage that doesn't apply any context

[15:58] <araraloren> jnthn, so, there no way to do that except I use a reference refer it...

[15:58] *** astj left
[15:59] <jnthn> We go to quite some effort to make `for $foo { }` be a single iteration consistently at the language level

[15:59] <araraloren> OH..

[15:59] <araraloren> Ok, thanks all the way

[16:00] <jnthn> So it's independent of what .iterator implementation you write

[16:00] <jnthn> In fact, I don't think there is one you could write that would defeat it since it happens "a level up" from that

[16:00] <jnthn> e.g. map sees the Scalar container and doesn't even call .iterator

[16:01] <araraloren> yeah, may be a name-better method would be better

[16:01] <raschipi> The sigil works like a contract. If you put it into a scalar container, the language will treat is like a single thing.

[16:03] <araraloren> em, thank you all!

[16:06] *** pat_js joined
[16:07] *** mcmillhj left
[16:08] *** astj joined
[16:08] <TreyHarris> araraloren: just want to make clear since it wasn't explicitly mentioned and was probably obvious to the rest of us but might/might not have been obvious to you:

[16:09] <TreyHarris> m: class I does Iterable { has @.a = <1 2 3>; method iterator() { @!a.iterator(); }; }; .say for I.new; my @i = I.new; .say for @i;

[16:09] <camelia> rakudo-moar d22303: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§1‚ê§2‚ê§3‚ê§¬ª

[16:11] <araraloren> Em, I dont't know sigil will affect keyword such as **for** behavior ..

[16:12] *** astj left
[16:14] *** domidumont left
[16:15] <araraloren> It's just like a fixed content ?

[16:27] <raschipi> araraloren: why did you want to use a ¬¥$¬¥ scalar variable instead of an ¬¥@¬¥ array variable?

[16:32] <araraloren> I make a class has multi line string , so I want use for traverse it.

[16:34] <raschipi> Sure, but why the $ instead of the @?

[16:36] <araraloren> I think a variable is a scalar

[16:36] <TreyHarris> I suspect: he wants to call other methods on the object as well as iterating it?

[16:36] *** dakkar left
[16:37] <araraloren> Er, variable or object .. I confused, that I.ew

[16:37] <araraloren> I.new

[16:38] <TreyHarris> my @j = I.new does not allow non-iterator methods you defined in class I to be called on @j. Is that what you are bothered by?

[16:40] <araraloren> I think I understand it, I create a object and rakudo will treat them as scalar when I use a $ refer it, or @ as array ?..

[16:41] *** cowens joined
[16:41] *** zengargoyle joined
[16:43] *** astj joined
[16:43] <raschipi> araraloren: yes, but you have to choose one of the two.

[16:43] *** John[Lis` joined
[16:43] <zengargoyle> why did i (a long time ago) use the '.s' in this? : my Buf $b = do { my $f = 'empty.dat'.IO.open; $f.read($f.s) };

[16:43] <araraloren> Em, raschipi thanks, Night everyone..

[16:44] * zengargoyle oh, probably reading size bytes...

[16:44] *** araraloren left
[16:44] <zengargoyle> and now failing tests probably due to IO changes: No such method 's' for invocant of type 'IO::Handle'

[16:46] <zengargoyle> actually a Dubious test error, the tests still pass for some reason.

[16:47] *** John[Lisbeth] left
[16:47] *** astj left
[16:47] <zengargoyle> is this fixable now, or should i wait for IO stuff to settle before worrying about it?

[16:48] <TreyHarris> (I personally am curious what you'd do with the case I mentioned, the class about with a 'method bang { say "boom" }'; if you assign 'my $i = I.new; $i.bang' works, but 'my @i = I.new; @i.bang' does not. The correct answer is "expose the iterator separately so that iteration is all that it does and let the thing that needs to go boom have a has-a relationship to the iterator", right?)

[16:50] <zengargoyle> https://travis-ci.org/zengargoyle/Text-Fortune/builds/226469290

[16:51] <cowens> has anyone successfully compuled rakudo on Windows 10 in WSL?  I get ‚Äú/home/cowens/rakudo-star-2017.01/install/bin/moar: error while loading shared libraries: libmoar.so: cannot enable executable stack as shared object requires: Invalid argument‚Äù 

[16:52] <El_Che> cowens

[16:53] <El_Che> yes

[16:53] <El_Che> https://github.com/nxadm/rakudo-pkg/releases/tag/2017.03_03

[16:54] <El_Che> use the ubuntu 16.04 packages and run /opt/rakudo/bin/fix_windows10

[16:54] <El_Che> https://github.com/nxadm/rakudo-pkg/blob/master/docker/fix_windows10

[16:54] <El_Che> "execstack -c libmoar.so" in short

[16:55] *** mcmillhj joined
[16:58] *** domidumont joined
[17:01] <cowens> thanks

[17:05] <El_Che> I am not much of a windows user, so if you use the pkg feedback is appreciated

[17:08] *** Cabanossi left
[17:09] *** Cabanossi joined
[17:11] *** titsuki_ joined
[17:12] *** titsuki left
[17:14] *** Sound left
[17:15] <cowens> Not much of a Windows user either, but I am using a Windows 10 box as a portable monitor

[17:15] <cowens> I thought I might as well get Perl 6 on it

[17:15] <El_Che> hehe

[17:16] <El_Che> I thought that since I already had Ubuntu packages, they should work

[17:16] <El_Che> the mostly do :)

[17:16] <El_Che> they probably add the missing capability later on

[17:16] <El_Che> so far it seems it's not needed by rakudo

[17:17] <cowens> My understanding is no one should be using it anymore

[17:17] <cowens> it is a security hole 

[17:18] <El_Che> rakudo? :)

[17:18] <cowens> libmoar.so requiring an executable stack

[17:18] <cowens> it probably doesn‚Äôt

[17:18] *** pierrot left
[17:18] <cowens> but leaving it with an executable stack is a security hole

[17:18] <cowens> based on what I was reading

[17:18] <El_Che> true

[17:18] *** pierrot joined
[17:18] <El_Che> I'll ping kanathan when he's around

[17:18] <El_Che> good point

[17:19] <[Coke]> I believe the issue really needs to be fixed upstream.

[17:19] <cowens> the execstack -c is clearing the requirement

[17:19] <El_Che> yes, I know what it does, I just never questioned why it had that on linux

[17:20] <El_Che> good point

[17:22] <El_Che> jnthn: in case you're awake. "execstack -c libmoar.so" is needed to make it work on Windows. Shouldn't it be the default (cowens++)?

[17:22] <El_Che> [Coke]: define upstream

[17:25] <[Coke]> moarvm uses 3rd party libs. Pretty sure this is coming in via one of them.

[17:25] <El_Che> I see

[17:26] * [Coke] hurls https://github.com/MoarVM/MoarVM/issues/470

[17:34] <Geth> Swapped META.info ‚Üí META6.json in 1 dists in https://github.com/perl6/ecosystem/commit/915406ad9e

[17:35] *** Sound joined
[17:35] *** Sound is now known as Guest47447

[17:36] *** Guest47447 left
[17:40] *** eliasr joined
[17:44] <jnthn> El_Che: "On Windows" - as I understand it, this only affects the Linux/Windows integration thing, not Windows builds, and as [Coke]++ already noted it comes in via dyncall, and afaik they already agree it wants fixing and are working on doing that.

[17:45] <jnthn> not *native* Windows builds, I should have said

[17:45] *** ChoHag left
[17:45] <jnthn> If you can build libffi on the Linux/Windows thingy, then you can instead configure MoarVM to use that instead (you'd have to install or build the library yourself)

[17:46] <jnthn> (If it's available in the package manager then it's even easier, though probably needs the -dev)

[17:46] <jnthn> Which I'd imagine avoids the problem in the meantime

[17:46] <jnthn> Provided libffi doesn't have the same problem :)

[17:47] <El_Che> jnthn: yeah, [Coke] pretty much was spot on

[17:49] <El_Che> in the mean time point people that pop on the channel and  want to run rakudo on WSL to my package to to the fix I use: https://github.com/nxadm/rakudo-pkg/blob/master/docker/fix_windows10

[17:49] <jnthn> Ah, cool :)

[17:50] <jnthn> El_Che++ # docker images

[17:50] <jnthn> Dinner time; bbl

[17:51] <El_Che> jnthn: they are actually images to build rakudo (the pkgs are in released). Have a look at the .travis.yaml to see how they are built

[17:54] *** TEttinger joined
[17:55] *** espadrine joined
[17:56] *** cowens left
[18:06] *** zakharyas left
[18:10] *** cdg_ left
[18:12] *** ChoHag joined
[18:16] <samcv> morning all :)

[18:17] <raschipi> g'day

[18:17] *** domidumont left
[18:18] <samcv> oo yay up to 42.2% modules with license fields now. :)

[18:18] <samcv> so close to above 50% i can almost taste it

[18:19] <raschipi> When you can finally taste it, tell us what it tastes like.

[18:20] <samcv> ok :)

[18:20] <jnthn> .oO( chicken! )

[18:21] * jnthn added a new module today with a license field, and notes that everyone can help the percentage by doing that ;-)

[18:22] <samcv> jnthn, i just checked it right now :)

[18:22] <samcv> thanks

[18:22] <jnthn> Phew, I got it right :)

[18:22] <samcv> was literally looking at your META6.json for the new submisssion 2 secs ago

[18:23] <jnthn> Updated SSH::LibSSH to use Concurrent::Progress today also

[18:23] <jnthn> So now you can scp a file up/down and get progress reports :)

[18:23] <zengargoyle> hrm, travis just croaked installing panda (which worked a few minutes ago).

[18:24] <zengargoyle> https://travis-ci.org/zengargoyle/Text-Fortune/builds/226508120

[18:25] <samcv> traviiiiiiiiissssssss

[18:26] <zengargoyle> i think my old travis config is too old.  Your branch is up-to-date with 'origin/master'.

[18:26] <zengargoyle> error: pathspec 'nom' did not match any file(s) known to git.

[18:26] <zengargoyle> panda for nom not found

[18:26] <zengargoyle> Installing latest panda instead.

[18:26] <samcv> https://travis-ci.org/zengargoyle/Text-Fortune/jobs/226508121#L967 yeah

[18:26] <samcv> maybe try zef?

[18:27] <masak> I'd like to imagine above-50% modules ƒùith license fields tastes a little bit of umami

[18:27] <masak> with*

[18:27] * masak .oO( down! bad Esperanto keyboard layout! )

[18:28] <zengargoyle> yeah, i'll admit to not keeping up for quite a while and recon some best-practices have changes a bit.  is there and actual howto for module creation yet?

[18:30] <zengargoyle> my stuff is still doing build your own rakudo via rakudobrew and follow 'nom'.

[18:30] <samcv> zengargoyle, you could try building zef like this https://github.com/scriptkitties/p6-Hash-Merge/blob/master/.travis.yml

[18:30] <jnthn> zengargoyle: I think there's one linked from the top of modules.perl6.org

[18:34] *** john51_ left
[18:34] *** john51 joined
[18:34] <zengargoyle> jnthn: cool, like license it was all a bit hand-wavey since i last looked.  just accepted a couple of pull-requests for some META6 changes and *poof* travis goes bonk on me.  (i switched to zef for myself long ago...)  i'll take a fresh glace at the docs.

[18:37] *** tharkun_ joined
[18:38] *** Juerd_ joined
[18:38] *** cibs_ joined
[18:38] *** bartolin_ joined
[18:38] *** Juerd_ is now known as Juerd

[18:39] *** jantore joined
[18:39] *** mcmillhj left
[18:42] *** mcmillhj joined
[18:43] <zengargoyle> strange thing is, that Text-Fortune module got built and then failed some IO related tests just an hour or so ago and now it doesn't even get past the install panda phase.

[18:46] <zengargoyle> i think if i wait a while it will magically start working again. :P

[18:47] *** grumble left
[18:47] <samcv> zengargoyle, also try putting "nom" as one of the perl6's to test. that tests against the dev branch too

[18:47] <samcv> or you can always put in the last version it passed under

[18:47] <zengargoyle> death was in panda dep File::Which

[18:48] <samcv> it pases for me

[18:49] <samcv> using zef at least

[18:51] <zengargoyle> yeah, my travis.yml says 'latest' so i'm going to blame this on upstream things ATM.

[18:53] <zengargoyle> and blame it on my horrible luck of always running into the weird.

[18:53] *** grumble joined
[18:56] * zengargoyle hail Eris!

[19:00] <sena_kun> zengargoyle, Eris? From some blessed world or I mistook your reference?

[19:01] <timotimo> nah, zengargoyle is just a discordianist

[19:01] *** zakharyas joined
[19:02] <sena_kun> ah, okay then

[19:02] <timotimo> (is my guess)

[19:02] <geekosaur> or referencing same

[19:03] <timotimo> still sour about ddate being thrown out of coreutils

[19:03] <sena_kun> well, I would be VERY impressed if it is Eris I thought about. Nevermind me, just peeked here a little before going to bed~

[19:06] *** leont left
[19:10] *** sena_kun left
[19:17] <Ulti> m: say "hello" . "world"

[19:17] <camelia> rakudo-moar aa23a9: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unsupported use of . to concatenate strings; in Perl 6 please use ~‚ê§at <tmp>:1‚ê§------> 3say "hello" .7‚èè5 "world"‚ê§¬ª

[19:17] <Ulti> m: say "hello" ."world"

[19:17] <camelia> rakudo-moar aa23a9: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Malformed postfix call (only alphabetic methods may be detached)‚ê§at <tmp>:1‚ê§------> 3say "hello" .7‚èè5"world"‚ê§¬ª

[19:17] <Ulti> m: say "hello"."world"

[19:17] <camelia> rakudo-moar aa23a9: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Quoted method name requires parenthesized arguments. If you meant to concatenate two strings, use '~'.‚ê§at <tmp>:1‚ê§------> 3say "hello"."world"7‚èè5<EOL>‚ê§¬ª

[19:17] <Ulti> one of those is not like the others

[19:17] <Ulti> :)

[19:18] <Ulti> is the Malformed postfix call way too common?

[19:19] <raschipi> It's common because people want to split it at the end of the line or align it with other lines.

[19:19] <raschipi> m: say "hello"‚ê§."world"

[19:19] <camelia> rakudo-moar aa23a9: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Malformed postfix call (only alphabetic methods may be detached)‚ê§at <tmp>:2‚ê§------> 3.7‚èè5"world"‚ê§¬ª

[19:20] <Ulti> samcv++ for the Atom syntax hilighting improvements awwaiid++ for the cool linting

[19:20] *** yqt joined
[19:20] <samcv> you're welcome Ulti 

[19:20] <rindolf> m: say "Hello"

[19:20] <camelia> rakudo-moar aa23a9: OUTPUT: ¬´Hello‚ê§¬ª

[19:21] <samcv> MadCapJake surfaced yesterday. but i feel i may have been too late in my PR which would have his module install the new language-perl6 and then disable the old one

[19:21] <Ulti> samcv: do you know if that will ever get picked up by VSCode ? or is that another highlighter? 

[19:21] <samcv> i'm sure it uses the same highlighter. otherwise MS would be dumb

[19:21] <samcv> because why not be lazy

[19:22] <Ulti> samcv: yeah he left a relatively :( commit on his repo

[19:22] <samcv> yeah

[19:22] <Ulti> :(

[19:22] <samcv> https://github.com/MadcapJake/language-perl6fe/issues/55#issuecomment-297557267

[19:22] <samcv> ok so we have another 6months to go until next resurface :'(

[19:23] <samcv> and he added a note to the README.md on github. but unless the package actually gets released

[19:23] <samcv> nobody installing packages using atom will see it

[19:23] <Ulti> in fairness if someone took anything Ive ever done and ran with it I would consider that mission accomplished.... its yet to happen

[19:23] <samcv> heh

[19:23] <samcv> yeah he did a lot of good ground work for sure. :)

[19:23] *** Cabanossi left
[19:24] <samcv> he made a twitter post. made a comment on the github. now. hm

[19:24] <Ulti> samcv is the issue that both are listed in the Atom installer?

[19:24] *** Cabanossi joined
[19:24] <samcv> yes

[19:25] <samcv> so people are still using his. but i made a PR that fixes it basically. he needs to merge it then do a release

[19:25] <samcv> and then when people install his, it will install the new one and disable the old one, automatically

[19:25] <Ulti> yeah I did have to double check what was up but the "perl6" officialness of the GitHub user helped prompt me to remember what was going on

[19:25] <samcv> heh

[19:25] <Ulti> ahh right

[19:25] <samcv> took me a fair amount of hours to get that working too

[19:25] <samcv> since atom doesn't let you have dependencies on atom packages

[19:26] <samcv> only on node packages. so i have a node package as a dependency then a main.js file which loads that node package, and then it installs the new package then disables itself when that's done

[19:26] *** Ven joined
[19:26] <samcv> what a pain

[19:26] *** Ven is now known as Guest68828

[19:27] <samcv> i mean not that hard when you've figured it out. but way harder than it ever should be

[19:28] <Ulti> you should make one thats even more meta so that it uses the dependency names to work out what to disable or something :) feels like standard npm style practice

[19:28] <Ulti> I guess another issue is its between more than one authority too

[19:28] <Ulti> its one thing to disable your own module from the same authority but something else to just throw off someone elses 

[19:29] <samcv> hm Ulti i found this https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-atom-grammar

[19:29] <samcv> this was released in january though it has an update that says since last update their thingy aims to have feature equivilance

[19:30] <samcv> Ulti, i mean i could have published atom-language-perl6 to npm... but then i'd have to force disable the language-perlfe grammar. at least this way if they don't have internet it still works, if somehow they install it and get disconnected

[19:30] <Ulti> they support p6 code already I just wasnt sure if its their own super basic stats/perl style markup

[19:30] <samcv> totally seamless. installs new one, disables old. perfect handoff

[19:30] <samcv> it's probably the same as atom's

[19:32] <samcv> that's a nice enough thing to try doing today i guess.

[19:32] <samcv> .o(maybe i should publish on npm just to make sure i keep language-perl6)

[19:32] <samcv> and nobody steals it

[19:33] <Ulti> probably worth it given you have the *official* stamp for that name

[19:34] <tbrowder>  samcv: i've been noticing the msgs to non-conforming modules and i noticed you refer to META, you ought to be mentioning changing to META6...

[19:34] <samcv> msgs?

[19:35] <samcv> well if they have a META.info the commit message says META.info. if the PR is for a META6.json that is what's in the title of the PR

[19:35] <Geth> Swapped META.info ‚Üí META6.json in 1 dists in https://github.com/perl6/ecosystem/commit/d47d922fb4

[19:35] <tbrowder> well, emails coming from somewhere about ecosystem and non-conforming modules license-wise

[19:36] <samcv> but it says the name of the actual file in the repo

[19:36] <samcv> so if they have META.info, then the message mentions that, if it's META6.json it mentions that

[19:37] <samcv> i suppose could have been cool to rename it, but i didn't want to mess up zoffix's automated thingy

[19:37] <samcv> or even know about that unti a few days ago

[19:39] <tbrowder> speaking of all the ecosystem cleaning, i have a module that is soon to be deprecated and replaced by another. is there a way to get the deprecated module removed at some point?

[19:40] <tbrowder> i think that"

[19:40] <tbrowder> i think that's almost impossible with cpan.

[19:41] *** ufobat___ left
[19:41] <samcv> uh you remove it. just make sure you use uh

[19:41] <samcv> https://design.perl6.org/S22.html#superseded-by

[19:42] <samcv> and the other one use https://design.perl6.org/S22.html#supersedes

[19:42] <samcv> (the new one)

[19:45] <tbrowder> thanks!

[19:46] <samcv> oh heh. atom-language-perl6 has syntax highlighting for META.info. gotta make some changes to that

[19:46] <samcv> almost forgot about that one

[19:54] <samcv> Ulti, how to install VSCode extensions/packages/modules/things

[19:57] *** TBSliver left
[20:01] *** raschipi left
[20:08] *** Cabanossi left
[20:09] *** Cabanossi joined
[20:15] *** hankache joined
[20:17] <hankache> hola #perl6

[20:19] <timotimo> hola

[20:19] <hankache> hi timotimo

[20:21] *** cdg joined
[20:25] <samcv> hola hankache 

[20:26] <hankache> hi samcv

[20:30] *** mcmillhj left
[20:31] <pmurias> where can I get the unicode data that moar builds it database from?

[20:31] <timotimo> there's tools in moarvms tools/ folder fro that

[20:31] <timotimo> and also, samcv has a repository named UCD

[20:32] <timotimo> it also has a fetcher script, and those tools in there are going to become the "new" unicode database generation stuff in the future

[20:32] <samcv> uh. which data do you want pmurias 

[20:32] <samcv> our scripts generate C code. if you want some specific data a i can help you out

[20:32] <samcv> or do you mean the raw text files?

[20:33] <pmurias> I found the fetchers scrips, ucd2c has a comment with a broken url

[20:33] <samcv> yes ignore that comment

[20:33] <timotimo> oh, that's not so great

[20:33] <samcv> fetcher script here https://github.com/samcv/UCD i think is more updated

[20:34] <pmurias> samcv: if I fetch the raw data, I can just look at what ucd2c is using an replicate the process to get the unicode info for my js backend

[20:35] <samcv> kk

[20:35] <samcv> i'd use the fetcher script in the UCD repo

[20:36] <samcv> since it has less issues

[20:36] *** zakharyas left
[20:37] <awwaiid> Ulti++ for giving me undeserved karma

[20:37] <yoleaux> 25 Mar 2017 20:45Z <[Coke]> awwaiid: if they can check out https://github.com/perl6/doc/issues/1247

[20:38] <samcv> is the latest revision or whatever

[20:39] <samcv> .o(i think Emoji 5.0 was released, haven't updated our things for it yet?) but that's fine should add in support in the next few months, unicode says

[20:39] <samcv> well implementers should i mean, in the 2-3+ months after the full final spec is published (ideally)

[20:42] *** hankache left
[20:47] *** clasclin joined
[20:49] *** setty1 left
[20:51] *** labster joined
[20:51] *** Guest68828 left
[20:54] <clasclin> I'm curious about a subroutine that appears in the docs 'parse-names' Is this subroutine implemented in rakudo-star-2017.01? when I try on REPL 'BUTTERFLY'.parse-names I get Undeclared routine and the suggestion is about 'parse-base'

[20:54] <timotimo> no, it's newer than that

[20:54] <timotimo> sorry

[20:56] <clasclin> Oh, it's ok. Thanks

[20:59] *** wamba left
[21:01] <samcv> bisectable6, 'BUTTERFLY'.parse-names

[21:01] <bisectable6> samcv, Bisecting by exit code (old=2015.12 new=aa23a91). Old exit code: 1

[21:01] <samcv> i think like two months ago?

[21:01] <bisectable6> samcv, bisect log: https://gist.github.com/89ec676022df2fccafcc44bc838111fe

[21:01] <bisectable6> samcv, (2017-03-02) https://github.com/rakudo/rakudo/commit/5c1761a6486317da6cef52bace348d3d5f350676

[21:01] <samcv> newer than march for sure

[21:01] <timotimo> samcv: i'm just now running UCD-gen again

[21:01] <pmurias> samcv: will the UCD module be used by the ucd2c.pl Perl 6 replacement?

[21:01] <samcv> yeah gotta be at least 2017.03

[21:01] *** skids left
[21:01] <samcv> yeah

[21:01] <samcv> that is the plan pmurias 

[21:02] <samcv> pmurias, also if you run UCD-gen.p6, use --no-names to make it faster

[21:02] <samcv> or uh. --less=1000 to make it even more faster-er

[21:02] <samcv> --no-names will cut build time in half, and --less=1000 even more so

[21:02] <timotimo> it takes 4:35 for the whole thing at the moment

[21:02] <samcv> without any command line options?

[21:03] <timotimo> aye

[21:03] <samcv> pmurias, so if you can fit your generation of your data into UCD-gen.p6 that would be swell

[21:03] <samcv> nice timotimo 

[21:03] <timotimo> oh

[21:03] <timotimo> i lied

[21:03] <timotimo> it's --names-only

[21:03] <samcv> hehe

[21:03] <timotimo> which part do i need to develop the "give index, get cp text" C code?

[21:03] <samcv> yeah that seemed like 1/2 the time

[21:03] <samcv> --names-only

[21:03] <timotimo> that's good

[21:03] <timotimo> it's snippets/names/tail.c where i'd be writing code, yeah?

[21:03] *** espadrine left
[21:04] <samcv> one of those files. lemme check

[21:04] <samcv> yeah

[21:04] <timotimo> make names is good

[21:04] * samcv dusts off the 'ol UCD repo. i knew i had a readme :)

[21:05] <timotimo> it does, aye

[21:05] <samcv> POD6 ftw

[21:05] *** AlexDaniel joined
[21:05] <samcv> running pod-render.p6 *should* genenerate the pod perfectly i believe

[21:05] <samcv> looks like it uses pod from "UCD-gen.p6", "lib/UCDlib.pm6", "lib/bitfield-rows-switch.pm6";

[21:05] *** ChoHag left
[21:06] <timotimo> huh, how come i don't get debug symbols in build/names

[21:06] <timotimo> at least gcc doesn't think there are any

[21:07] <samcv> did you do make names-debug

[21:07] <timotimo> oh, i didn to

[21:07] <timotimo> why is that not the default :D

[21:08] <samcv> heh

[21:10] <samcv> it is now

[21:11] *** clasclin left
[21:12] <timotimo> wow holy hell this is spittin' out some hot garbage

[21:13] <timotimo> U+7742 'VARIATION SELECTOR-256'

[21:13] <timotimo> is this the last one we have? like, at all?

[21:13] <timotimo> because after that it seems to be reading from memory that's not meant to be read by this

[21:14] <samcv> uh

[21:14] <samcv> i get that too yes

[21:14] <timotimo> nah,there's supposed to be lots and lots after that

[21:14] <timotimo> at least from HIGHEST_NAME_CP

[21:15] <samcv> no i'm sure U+F71E 'B2XLETTER' is a real codepoint

[21:15] <samcv> no bamboozle

[21:15] <samcv> m: say "\c[VARIATION SELECTOR-256]".ord.base(16)

[21:15] <camelia> rakudo-moar aa23a9: OUTPUT: ¬´E01EF‚ê§¬ª

[21:16] <timotimo> i like EZLETTER

[21:16] <timotimo> EZ EVERY TIME

[21:16] <samcv> be happy it gets up to E01EF

[21:16] <samcv> or something. i don't know

[21:17] *** jonas1 left
[21:17] <samcv> u: U+635

[21:17] <unicodable6> samcv, U+0635 ARABIC LETTER SAD [Lo] (ÿµ)

[21:17] <samcv> U+635 'ARABIC LETTER BEHEH'

[21:17] <samcv> close

[21:17] <samcv> like 25 off

[21:17] *** ChoHag joined
[21:17] <samcv> oh timotimo i think it doesn't skip certain sections

[21:19] <samcv> though also the array hm

[21:19] <samcv> idk. well regardless that's not what you have to fix timotimo 

[21:19] <timotimo> yeah, it shouldn't put any into our compressed cp array

[21:19] <timotimo> for the to-be-skipped sections

[21:19] <samcv> yeah it doesn't

[21:19] <samcv> all you need to worry about is that you can get the name at a certain number

[21:20] <timotimo> right, we're already generating a lookup table for fast skips, right?

[21:20] <samcv> instead of having to do it all in one stream

[21:20] <samcv> yes

[21:20] <samcv> name_index i think

[21:20] <samcv> yep that's it

[21:20] <samcv> it's the first data in the names.c file

[21:20] <timotimo> and get_cp_name is the function i'm going to improve

[21:21] <samcv> should be every other name

[21:21] <samcv> yep

[21:21] <samcv> so i would focus on only going up to the first correct cp

[21:21] <samcv> err last correct

[21:22] <samcv> u: U+F53

[21:22] <unicodable6> samcv, U+0F53 TIBETAN LETTER NA [Lo] (‡Ωì)

[21:22] <samcv> u: U+81E

[21:22] <unicodable6> samcv, U+081E SAMARITAN VOWEL SIGN OVERLONG AA [Mn] (‚óå‡†û)

[21:22] <samcv> u: U+195

[21:22] <unicodable6> samcv, U+0195 LATIN SMALL LETTER HV [Ll] (∆ï)

[21:22] *** bjz joined
[21:22] <samcv> u: U+90

[21:22] <unicodable6> samcv, U+0090 <control-0090> [Cc] (control character)

[21:22] <timotimo> ah the main function is already using that to get each codepoint

[21:22] <samcv> err. hm. anyway. or not even that. just get the ones at the offset

[21:23] *** Cabanossi left
[21:23] <timotimo> the function already does go through a "predefined bunch of areas" function

[21:23] <timotimo> before it attempts to go through our compressed array

[21:23] <samcv> yeah as long as we can access individual names, i can fix the code which corrects the offset/substitutes created names with sprintf like for control codes

[21:24] *** Cabanossi joined
[21:24] <samcv> yeah. so it checks the offset with get_uninames, if it has an offset it gets one back. if it gets 0, then it knows it generated the name using sprintf

[21:25] <samcv> and doesn't have to query

[21:25] *** mcmillhj joined
[21:26] <timotimo> oooh, it's actually using get_uninames in the main loop

[21:26] <timotimo> that's bogus, isn't it?

[21:26] <samcv> so you could take out get_uninames, and just start from 0 and try and get the names stored linearly (in the data structure) and that is sufficient for the work you need to do

[21:26] <timotimo> right

[21:27] <timotimo> ah, that's not bogus

[21:27] <samcv> yeah

[21:27] <samcv> just doesn't yet have all of the sections without names in it yet

[21:27] <samcv> so not all offsets are correct after a certain point

[21:27] <timotimo> get_cp_name has a return value but no return statement

[21:28] <samcv> that's just a test function for debugging

[21:28] <samcv> since it's only used for getting 0x20 SPACE atm. and printing out some info

[21:29] *** captain-adequate joined
[21:29] <samcv> hmm i think get_cp_name was an attempt at getting a specific codepoint

[21:29] <samcv> as opposed to iterating through from start to finish

[21:29] <timotimo> right

[21:29] <timotimo> that's the one i want to work on

[21:29] <samcv> i'm sure it doesn't work XD

[21:29] <samcv> so replace anything you want

[21:30] <samcv> yup yup

[21:30] <samcv> i'm gonna get some more tea

[21:31] <tyil> can you set a minimum rakudo version in the meta6.json?

[21:32] <tyil> it seems Config::TOML fails tests on 2017.03, and I have a module depending on it, so I'd like to clearly specify it requires .04

[21:33] <tyil> can also put it on the readme file, but it might be nicer to inform people when trying to install it with zef that may need to upgrade 

[21:33] <timotimo> only a minimum language version

[21:33] <timotimo> you can put a version check into the mainline code and "note" a warning

[21:33] <tyil> should I open a PR on the meta6 spec to see if people are interested in adding such a thing?

[21:34] <timotimo> we're hoping to encourage more implementations of perl6

[21:34] <timotimo> putting a "minimum-rakudo" thing into the meta6 sounds like a terrible idea for that

[21:34] <timotimo> and it's already good that the module fails its tests on a too-old rakudo

[21:34] *** raschipi joined
[21:34] *** kurahaupo joined
[21:35] <timotimo> on top of that it could output "tests are known to fail with the rakudo version you have running"

[21:35] <tyil> what about an object for minimums, { "rakudo": "2017.04", "other-implementation": "whatever" }

[21:36] *** mcmillhj left
[21:44] <Ulti> awwaiid: are you a different person or just modest? <___<

[21:45] <Ulti> samcv: no idea how to do stuff in VSCode sorry

[21:46] <Ulti> samcv: https://github.com/sergot/vscode-perl6

[21:48] *** rindolf left
[21:55] <tyil> you can uninstall it and get a better editor 

[21:56] <raschipi> One that doesn't use electron, of course.

[21:56] <tyil> vim :>

[21:58] <timotimo> eclipse

[22:02] <tyil> [triggered]

[22:03] <raschipi> Eclipse wouldn't be my choice, but at least it's not cancer.

[22:04] <timotimo> https://github.com/meh/cancer ?

[22:04] <raschipi> https://github.com/electron/electron

[22:05] <tyil> tfw using atom for my perling, an advice of eater and samcv

[22:05] <tyil> on advice of*

[22:06] * ugexe uses sublime 3

[22:06] <tyil> thats proprietary software

[22:06] <tyil> that hardly counts as usable in any perspective :p

[22:07] *** Cabanossi left
[22:08] *** pmurias left
[22:09] *** Cabanossi joined
[22:10] *** dct left
[22:11] *** ZofBot joined
[22:11] *** ChanServ sets mode: +v ZofBot

[22:12] *** huggable joined
[22:12] *** ChanServ sets mode: +v huggable

[22:13] *** geekosaur left
[22:13] *** cgfbee left
[22:14] *** sunnavy left
[22:14] *** nine joined
[22:14] *** smash joined
[22:15] *** damnlie joined
[22:16] *** sunnavy joined
[22:16] *** DrForr joined
[22:17] *** revdiablo joined
[22:17] *** hobbs joined
[22:17] *** hobbs left
[22:17] *** hobbs joined
[22:17] *** obfusk joined
[22:17] *** dylanwh joined
[22:17] *** geekosaur joined
[22:17] *** kst` joined
[22:17] *** lucs joined
[22:17] *** ccakes joined
[22:17] *** cgfbee joined
[22:18] *** avar joined
[22:18] *** avar left
[22:18] *** avar joined
[22:19] *** sQuEE joined
[22:20] *** j75 joined
[22:20] *** kshannon joined
[22:20] <Geth> ¬¶ ecosystem: 118d742744 | cygx++ (committed using GitHub Web editor) | META.list

[22:20] <Geth> ¬¶ ecosystem: Project maintenance

[22:20] <Geth> ¬¶ ecosystem: 

[22:20] <Geth> ¬¶ ecosystem: Change META.info to META6.json and remove some bitrotted modules

[22:20] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/118d742744

[22:20] *** raschipi left
[22:20] *** cxreg joined
[22:21] *** PotatoGim joined
[22:21] *** skids joined
[22:26] <samcv> i'm idk why you'd use VSCode, but i'm all up for making perl 6 syntax highlighting if somebody can figure out how

[22:26] <samcv> and releasing it with the releases of the main thing.

[22:26] <samcv> nap &

[22:28] *** bjz left
[22:29] *** zapwai joined
[22:46] *** ugexe joined
[22:50] *** mcmillhj joined
[22:54] *** mcmillhj left
[22:55] *** committable6 left
[22:55] *** bisectable6 left
[22:58] *** committable6 joined
[22:58] *** evalable6 joined
[22:58] *** bloatable6 joined
[22:58] *** bisectable6 joined
[22:58] *** quotable6 joined
[22:58] *** ChanServ sets mode: +v committable6

[22:58] *** ChanServ sets mode: +v evalable6

[22:58] *** ChanServ sets mode: +v bloatable6

[22:58] *** ChanServ sets mode: +v bisectable6

[22:58] *** ChanServ sets mode: +v quotable6

[22:58] *** unicodable6 joined
[22:58] *** ChanServ sets mode: +v unicodable6

[22:58] *** benchable6 joined
[22:58] *** ChanServ sets mode: +v benchable6

[22:58] *** statisfiable6 joined
[22:58] *** ChanServ sets mode: +v statisfiable6

[23:01] *** pochi_ joined
[23:03] *** azawawi joined
[23:03] <azawawi> hi

[23:03] <timotimo> greetings

[23:03] *** pochi left
[23:12] *** John[Lis` left
[23:28] *** cdg left
[23:30] *** AlexDaniel left
[23:34] *** imcsk8_ left
[23:34] *** imcsk8 joined
[23:35] *** SCHAPiE joined
[23:36] <Geth> Swapped META.info ‚Üí META6.json in 1 dists in https://github.com/perl6/ecosystem/commit/9dc9346b63

[23:45] <Geth> ¬¶ ecosystem: d449c0d0ea | (Ahmad M. Zawawi)++ (committed using GitHub Web editor) | META.list

[23:45] <Geth> ¬¶ ecosystem: [Parse::Selenese] META.info -> META6.json

[23:45] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/d449c0d0ea

[23:46] *** pat_js left
[23:49] *** azawawi left
[23:51] *** cpage_ left
