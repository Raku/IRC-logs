[00:02] *** rindolf left
[00:03] *** mcmillhj left
[00:05] *** cdg left
[00:15] *** mcmillhj joined
[00:18] *** wamba left
[00:19] *** stmuk_ joined
[00:21] *** stmuk left
[00:22] *** mcmillhj left
[00:37] *** troys is now known as troys_

[00:37] <lookatme> o/

[00:41] <Geth> ¦ doc: 040ade60d2 | (Jeremy Studer)++ | xt/examples-compilation.t

[00:41] <Geth> ¦ doc: Revert "Fix false positive on dd test due to yyyy-mm-dd"

[00:41] <Geth> ¦ doc: 

[00:41] <Geth> ¦ doc: This reverts commit a0ee6719c1b253b809c63c00e93f4c9f1c99cbb1.

[00:41] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/040ade60d2

[00:41] <Geth> ¦ doc: b73921bba5 | (Jeremy Studer)++ | 2 files

[00:41] <Geth> ¦ doc: Revert dd test and okay yyyy-mm-dd examples

[00:41] <Geth> ¦ doc: 

[00:41] <Geth> ¦ doc: It was suggested that the yyyy-mm-dd exceptions be okayed and the

[00:41] <Geth> ¦ doc: modifications testing for it be reverted. In this case, it is better to

[00:41] <Geth> ¦ doc: manually ok the handful of exceptions than work the exceptions into the

[00:41] <Geth> ¦ doc: test, making it more cluttered and obscuring the intent.

[00:41] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b73921bba5

[00:44] *** reu_ left
[00:45] *** aborazmeh joined
[00:45] *** aborazmeh left
[00:45] *** aborazmeh joined
[00:52] *** adu joined
[00:53] *** reu joined
[00:54] *** Cabanossi left
[00:55] *** Cabanossi joined
[00:59] *** mcmillhj joined
[01:00] *** lizmat joined
[01:00] *** markong left
[01:00] *** sena_kun left
[01:04] *** lizmat left
[01:04] *** mcmillhj left
[01:12] *** mephinet joined
[01:13] *** adu left
[01:15] *** mcmillhj joined
[01:20] *** mcmillhj left
[01:22] *** adu joined
[01:26] *** mcmillhj_ joined
[01:27] <AndChat|688961> Quiet night.

[01:27] *** AndChat|688961 left
[01:27] *** comborico1611 joined
[01:28] <comborico1611> Is it cold where you are?

[01:30] *** mcmillhj_ left
[01:31] *** cdg joined
[01:36] *** cdg left
[01:36] *** mcmillhj_ joined
[01:38] *** llfourn_ left
[01:39] *** jaush left
[01:40] <lookatme> yeah

[01:40] *** mcmillhj_ left
[01:41] *** poohman joined
[01:42] *** llfourn joined
[01:42] *** pilne joined
[01:42] <comborico1611> How can it be cold in Vietnam?

[01:43] <poohman> hello all - I am having a problem when trying to make HTTP get request for a particular website - it keeps giving a malformed UTF-8 error

[01:44] <timotimo> poohman: then you may want to get the data as a binary blob instead of a string? entirely depends on what you're hoping to achieve

[01:44] <poohman> LWP::Simple has an option to retieve it as binary

[01:44] <poohman> ?

[01:45] <poohman> Can you please point me to some documentation

[01:45] <poohman> I did search becuase I had the same problem when reading PDF files 

[01:45] <poohman> or any http client for that matter

[01:46] <timotimo> you can LWP::Simple.new(:force_no_encode) i guess?

[01:46] <poohman> ok let me give it a short - thanks

[01:46] <timotimo> or if you really do want a string and mojibake is not a problem for you, you can :force_encoding<latin-1> instead

[01:47] <timotimo> don't forget to grab the result of .new and call .get on that rather than on LWP::Simple itself

[01:47] *** mcmillhj_ joined
[01:47] <poohman> ill do that

[01:52] *** mcmillhj_ left
[01:53] <poohman> it defaults to utf-8

[01:54] <poohman> just created an LWP::Simple object with both the options 

[01:54] <poohman> LWP::Simple.new(default_encoding => "utf-8")

[01:54] <poohman> getting this when I print it

[01:56] <timotimo> that's the default default

[01:57] <poohman> https://paste.gnome.org/p8rvaqxz4

[01:57] <poohman> get the same for :force_no_encode as well

[01:58] <timotimo> gotta go, seeya!

[01:58] <poohman> ok got to get ready for work - will check again in the evening - thanks for the help timotimo

[02:00] *** adu left
[02:01] *** mson left
[02:02] *** kaare__ left
[02:02] *** kaare_ joined
[02:03] *** kaare_ left
[02:04] *** kaare_ joined
[02:06] *** mcmillhj joined
[02:08] *** Cabanossi left
[02:11] *** Cabanossi joined
[02:11] *** mcmillhj left
[02:13] <buggable> New CPAN upload: SemVer-0.1.1.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/SemVer-0.1.1.tar.gz

[02:14] *** stmuk joined
[02:16] *** stmuk_ left
[02:22] *** mcmillhj joined
[02:27] *** mcmillhj left
[02:28] *** itaipu joined
[02:29] *** comborico1611 left
[02:40] *** mcmillhj joined
[02:44] *** mcmillhj left
[02:46] *** ilbot3 left
[02:55] *** ilbot3 joined
[02:55] *** ChanServ sets mode: +v ilbot3

[03:03] *** noganex_ joined
[03:05] *** kitsunenokenja left
[03:06] *** noganex left
[03:09] *** Cabanossi left
[03:10] *** mcmillhj joined
[03:11] *** Cabanossi joined
[03:11] *** ufobat___ joined
[03:12] *** kaare_ left
[03:12] *** kaare_ joined
[03:12] *** jeek left
[03:13] *** cdg joined
[03:14] *** ufobat_ left
[03:15] *** kaare_ left
[03:15] *** mcmillhj left
[03:15] *** kaare_ joined
[03:17] *** kaare_ left
[03:18] *** kaare_ joined
[03:18] *** mson joined
[03:22] *** aborazmeh left
[03:24] *** mcmillhj joined
[03:28] *** mcmillhj left
[03:31] *** ryn1x_ joined
[03:34] <ugexe> use HTTP::UserAgent; my $client = HTTP::UserAgent.new; say $client.get("http://httpbin.org", :bin).content

[03:34] <ugexe> use Cro::HTTP::Client; my $client = Cro::HTTP::Client.new; say await $client.get("http://httpbin.org").result.body-blob

[03:34] <ugexe> use Net::HTTP::GET; say Net::HTTP::GET("http://httpbin.org").body

[03:34] *** mcmillhj joined
[03:34] <ugexe> poohman: ^ there is how to get the raw content with 3 different http libs

[03:38] <japhb> ugexe: Do you need to await in the second one?  I thought .result already did that implicitly ...?

[03:39] <ugexe> body-blob returns a promise and i didnt want to do .result again

[03:39] <japhb> Actually, I'm assuming that $client.get() is returning a Promise ...

[03:39] <japhb> Ah, I see.

[03:39] *** mcmillhj left
[03:40] <japhb> So get() returns a Promise, and then .body-blob() does so again.  Hmmm.

[03:41] <ugexe> body blob might not be fully receieved with response promise

[03:41] <japhb> I suppose so.

[03:41] <ugexe> well, i guess the .result it should be

[03:42] <ugexe> you can get just the header and start processing / making decisions

[03:42] <japhb> I dunno, just feels a little redundant.  But maybe the answer is just to have a convenience wrapper for when you want to pretend it's just a blocking call.

[03:43] *** itaipu left
[03:45] *** kaare_ left
[03:45] *** kaare_ joined
[03:55] *** mcmillhj joined
[04:00] *** mcmillhj left
[04:03] *** eliasr left
[04:03] *** Herby_ joined
[04:03] <Herby_> o/

[04:10] *** mcmillhj joined
[04:15] *** mcmillhj left
[04:19] *** R0b0t1` left
[04:21] *** R0b0t1` joined
[04:21] *** ryn1x_ left
[04:23] *** Herby_ left
[04:23] *** wamba joined
[04:23] *** Cabanossi left
[04:25] *** Cabanossi joined
[04:28] *** wander joined
[04:28] <wander> m: say my %h is BagHash = BagHash.new([3,4,5])

[04:28] <camelia> rakudo-moar c967cb6cc: OUTPUT: «BagHash(BagHash(3, 4, 5))␤»

[04:29] <wander> m: say my %h is BagHash = [3,4,5]

[04:29] <camelia> rakudo-moar c967cb6cc: OUTPUT: «BagHash(3, 4, 5)␤»

[04:29] *** mcmillhj_ joined
[04:29] <wander> is it what we want? especially for the former case

[04:30] <wander> m: say my %h = BagHash.new([3,4,5])

[04:30] <camelia> rakudo-moar c967cb6cc: OUTPUT: «{3 => 1, 4 => 1, 5 => 1}␤»

[04:34] *** mcmillhj_ left
[04:40] *** wander left
[04:43] *** mcmillhj_ joined
[04:44] <lookatme> m: say my %h := BagHash.new([3,4,5])

[04:44] <camelia> rakudo-moar c967cb6cc: OUTPUT: «BagHash(3, 4, 5)␤»

[04:48] *** mcmillhj_ left
[04:53] *** mcmillhj_ joined
[04:54] *** Cabanossi left
[04:55] *** Cabanossi joined
[04:58] *** mcmillhj_ left
[04:59] *** kaare_ left
[04:59] *** ngaywood joined
[05:00] *** kaare_ joined
[05:04] *** mcmillhj_ joined
[05:06] *** ryn1x_ joined
[05:09] *** mcmillhj_ left
[05:12] *** ryn1x_ left
[05:18] *** mcmillhj joined
[05:23] *** mcmillhj left
[05:30] *** kaare_ left
[05:31] *** kaare_ joined
[05:32] *** mcmillhj joined
[05:36] *** wamba left
[05:36] *** ngaywood left
[05:37] *** mcmillhj left
[05:42] *** kaare_ left
[05:42] *** kaare_ joined
[05:43] <perlawhirl> bisectable6: say [3 ^... 1]

[05:43] <bisectable6> perlawhirl, On both starting points (old=2015.12 new=c967cb6) the exit code is 1 and the output is identical as well

[05:43] <bisectable6> perlawhirl, Output on both points: «04===SORRY!04=== Error while compiling /tmp/zUNDjlGgUn␤Unsupported use of . to concatenate strings; in Perl 6 please use ~␤at /tmp/zUNDjlGgUn:1␤------> 03say [3 ^...08⏏04 1]»

[05:53] *** piojo joined
[05:53] *** cdg left
[06:02] *** mcmillhj joined
[06:03] <lookatme> Seems like we not have `^...` operator

[06:06] <ugexe> ^ and ...

[06:06] *** mcmillhj left
[06:14] <piojo> I want to add "Using () and [] to create a list or array" to the traps document-- because (x) won't create a one-element list, and [x] can create an array of any number of elements, depending on the value of x

[06:14] <piojo> Is that something the doc team would agree with?

[06:15] *** mcmillhj joined
[06:19] *** mcmillhj left
[06:21] *** s0me0n3-unkn0wn joined
[06:24] *** s0me0ne-unkn0wn left
[06:31] *** mcmillhj joined
[06:32] *** wamba joined
[06:37] *** mcmillhj left
[06:42] *** darutoko joined
[06:47] *** ryn1x_ joined
[06:48] *** mcmillhj joined
[06:52] *** mcmillhj left
[06:53] *** Cabanossi left
[06:54] <Geth> ¦ perl6-most-wanted: f53829e0de | (David Warring)++ (committed using GitHub Web editor) | most-wanted/modules.md

[06:54] <Geth> ¦ perl6-most-wanted: Font::FreeType is released

[06:54] <Geth> ¦ perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/f53829e0de

[06:55] *** Cabanossi joined
[06:58] <lookatme> ls

[06:58] *** kaare_ left
[06:58] *** kaare_ joined
[07:01] *** entonian joined
[07:02] *** domidumont joined
[07:02] *** entonian left
[07:03] *** mcmillhj joined
[07:06] *** domidumont left
[07:07] *** domidumont joined
[07:08] *** mcmillhj left
[07:13] *** ryn1x_ left
[07:15] *** konsolebox left
[07:16] *** troys_ is now known as troys

[07:17] *** konsolebox joined
[07:17] *** geospeck joined
[07:20] *** mcmillhj joined
[07:24] *** mcmillhj left
[07:27] *** khw left
[07:30] *** konsolebox left
[07:32] *** konsolebox joined
[07:37] *** lowbro joined
[07:37] *** lowbro left
[07:37] *** lowbro joined
[07:38] *** llfourn left
[07:39] *** konsolebox left
[07:40] *** konsolebox joined
[07:43] *** abraxxa joined
[07:44] *** kaare_ left
[07:44] *** kaare_ joined
[07:46] *** wamba left
[07:52] *** mcmillhj joined
[07:53] *** Cabanossi left
[07:54] *** wamba joined
[07:54] *** cdg joined
[07:55] *** Cabanossi joined
[07:56] *** mcmillhj left
[07:58] *** cdg left
[08:05] <tyil> can anyone check if SemVer:ver<0.1.1> installs for them? `zef install "SemVer:ver<0.1.1>"` fails for me, but the local installation with `zef install .` worked

[08:05] *** mcmillhj joined
[08:05] <tyil> and zef's error reporting as to why it fails is very much LTA

[08:09] *** mcmillhj left
[08:14] <lookatme> Is zef support module version installation?

[08:14] <lookatme> I don't think so 

[08:16] <lookatme> m: sub postfix:<%>(Cool $n) { $n / 100; }; say 45% * 2;

[08:16] <camelia> rakudo-moar c967cb6cc: OUTPUT: «0.9␤»

[08:18] *** mcmillhj joined
[08:21] *** kaare_ left
[08:21] *** kaare_ joined
[08:22] *** mcmillhj left
[08:24] *** Cabanossi left
[08:25] *** Cabanossi joined
[08:25] *** troys is now known as troys_

[08:32] *** dakkar joined
[08:32] *** mcmillhj joined
[08:33] <buggable> New CPAN upload: SemVer-0.1.3.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/SemVer-0.1.3.tar.gz

[08:37] *** mcmillhj left
[08:38] *** parv joined
[08:42] *** rindolf joined
[08:45] *** itaipu joined
[08:49] *** mcmillhj joined
[08:49] *** ryn1x_ joined
[08:54] *** mcmillhj left
[08:54] *** ryn1x_ left
[08:56] *** wander joined
[08:58] *** scimon joined
[08:59] <wander> [Coke]: what is 'xt/' stands for? I know 't/' folder holds test files. what's the different between them?

[09:02] *** wamba left
[09:03] *** mcmillhj joined
[09:03] *** aborazmeh joined
[09:03] *** aborazmeh left
[09:03] *** aborazmeh joined
[09:06] *** wamba joined
[09:06] *** lookatme left
[09:07] *** domidumont left
[09:07] *** domidumont joined
[09:08] *** mcmillhj left
[09:09] *** sena_kun joined
[09:11] *** gregf_ left
[09:16] <parv> extra|experimental tests

[09:16] <parv> ... would be my guess.

[09:18] *** steeznson joined
[09:19] *** mcmillhj joined
[09:22] *** itaipu left
[09:23] *** mcmillhj left
[09:23] *** Cabanossi left
[09:25] *** Cabanossi joined
[09:25] <AlexDaniel> wander: it's for tests that should ideally pass, but we don't want to bother random contributors with them

[09:29] *** jeek joined
[09:33] <buggable> New CPAN upload: App-Cpan6-0.17.3.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/App-Cpan6-0.17.3.tar.gz

[09:36] *** rindolf left
[09:39] *** mcmillhj joined
[09:42] *** koalaaa joined
[09:43] <koalaaa> m: BEGIN $?LANG.refine_slang: 'MAIN', role { token comment:sym<#> { '#' {say "IT WORKS"} \N* } }; say 42 # MEOW

[09:43] <camelia> rakudo-moar 79390147a: OUTPUT: «IT WORKS␤42␤»

[09:43] <koalaaa> m: BEGIN $?LANG.refine_slang: 'MAIN', role { token comment:sym<#> { '#' {say "IT WORKS"} \N* } }; say 42; # MEOW

[09:43] <camelia> rakudo-moar 79390147a: OUTPUT: «42␤»

[09:44] <koalaaa> And if I stick similar print statement into the very same token in src/Perl6/Grammar.nqp, then THAT print statement is printed. Any idea why it only works in this way and the redefined token only applies in some cases but not the other?

[09:44] *** mcmillhj left
[09:45] <koalaaa> And if I remove the token from the role in the first example, then the token in src/Perl6/Grammar.nqp gets triggered in its place

[09:51] <wander> see

[09:52] *** aborazmeh left
[09:53] *** mcmillhj joined
[09:54] <koalaaa> tyil: just use the --debug or --verbose switch to see more output. It fails because it can't find resources: https://gist.github.com/zoffixznet/99876a901bbd2e27a7b2f26bc66fa5be

[09:54] <tyil> yes, I figured that out eventually

[09:54] <tyil> doesn't change the fact that the error is very much lta

[09:55] <koalaaa> tyil: how can it be improved? It literally says "Failed to open file [...] SemVer-0.1.1/resources: No such file or directory". Looks PTG to me

[09:56] <tyil> compared to an error message like No candidates found matching identity: SemVer:ver<0.1.3>

[09:56] <tyil> one line, says exactly whats wrong

[09:57] *** zakharyas joined
[09:57] <koalaaa> So what's the improvement?

[09:57] <tyil> whereas the zef error on the resources is a big mess that happens to contain a line that refers to the real problem

[09:58] *** mcmillhj left
[10:01] *** mson left
[10:01] *** zakharyas left
[10:02] *** zakharyas joined
[10:06] *** lizmat joined
[10:06] *** mcmillhj joined
[10:07] <koalaaa> Hm. Even if I stick the slang into a module, it still only works if the comment is inside some new scope

[10:07] *** Cabanossi left
[10:09] <koalaaa> Despite the fact that if I stick `BEGIN $?LANG.^name.say;` between the two comments, it tells me `Perl6::Grammar+{Recomment}`, indicating the role *is* mixed in at that point :S

[10:10] *** Cabanossi joined
[10:10] *** mcmillhj left
[10:12] *** mcmillhj joined
[10:16] *** mcmillhj left
[10:18] *** _28_ria left
[10:20] <koalaaa> And even if I just add an empty block after the `use` of slang module, then it works:   `use Recomment; {}`

[10:20] <koalaaa> wtf :\

[10:21] <koalaaa> Oh wait, that's not even a block; it's a hash

[10:22] <koalaaa> Oh, it's the lack of semicolon that makes it work. If I change it to `use Recomment; {};` it stops working

[10:28] *** _28_ria joined
[10:29] *** zakharyas left
[10:30] <koalaaa> No one knows why, eh?

[10:32] <koalaaa> ZofBot: *crickets*

[10:32] *** parv left
[10:35] *** koalaaa left
[10:37] *** ryn1x_ joined
[10:41] *** ryn1x_ left
[10:42] *** wander left
[10:42] *** AlexDaniel left
[10:45] *** markong joined
[10:47] *** steeznson left
[10:50] *** lizmat left
[10:54] *** cdg joined
[10:59] *** cdg left
[11:02] *** llfourn joined
[11:07] *** Cabanossi left
[11:09] *** AlexDaniel joined
[11:10] *** char_var[buffer] left
[11:10] *** Cabanossi joined
[11:13] *** lowbro left
[11:23] <buggable> New CPAN upload: App-Platform-0.1.0.tar.gz by KAJI https://cpan.metacpan.org/authors/id/K/KA/KAJI/Perl6/App-Platform-0.1.0.tar.gz

[11:30] *** kaare_ left
[11:31] *** kaare_ joined
[11:33] <buggable> New CPAN upload: SemVer-0.2.0.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/SemVer-0.2.0.tar.gz

[11:34] *** dct joined
[11:34] *** dct left
[11:54] *** Cabanossi left
[11:55] *** Cabanossi joined
[12:03] *** cdg joined
[12:08] *** cdg left
[12:08] *** raschipi joined
[12:10] *** aeruder_ joined
[12:14] *** koalaaa joined
[12:17] <koalaaa> Figured it out: slang is loaded after we already started parsing and so it's too late to go back in time and affect how TOP, comp_unit, ws, statementlist, and stateenta

[12:17] <koalaaa> *statement get parsed.

[12:19] <koalaaa> In the mainline that is. Since comments are part of ws, they're affected too amd the change only works in nested scopes 'cause we start a brand new statementlist there. And the reason adding a clsemicolon-less block in mainline makes the following comment attain the change is 'cause that construct uses ENDSTMT, which has its own brand mew statementlist

[12:20] <koalaaa> So it's basically just a limitation in slangs. You can't affect a couple of tokens in mainline

[12:20] <koalaaa> q.e.d

[12:20] *** rindolf joined
[12:23] *** koalaaa_ joined
[12:24] <koalaaa_> Actually one mystery remains: I can affect tokens inside statementlist token, so how come tokens inside ws

[12:24] *** koalaaa left
[12:24] *** Cabanossi left
[12:25] *** Cabanossi joined
[12:27] <koalaaa_> are not affected.... One guess is <ws> is part of the `rule` and not a literal <ws> in the regex, so maybe it's just outside the braid mutation and can't see it.... Wonder if sticking literal <ws> in statementlist would fix this....

[12:29] *** ryn1x_ joined
[12:31] *** koalaaa_ left
[12:34] *** ryn1x_ left
[12:37] <masak> today's autopun spotting: https://twitter.com/znjp/status/933405548678021120

[12:44] *** sjn left
[12:45] *** sjn joined
[12:46] <moritz> masak: nice one

[12:52] *** Cabanossi left
[12:55] *** Cabanossi joined
[13:00] *** cdg joined
[13:04] *** cdg left
[13:17] *** eliasr joined
[13:24] *** Cabanossi left
[13:25] *** Cabanossi joined
[13:25] <ZzZombo> m: my token identifier { <[\w \h]>* \w };say 'test' ~~ &identifier

[13:25] <camelia> rakudo-moar 79390147a: OUTPUT: «Nil␤»

[13:25] <ZzZombo> m: say '2 3' ~~ /(<[\w \h]>*?) (\w)/

[13:25] <camelia> rakudo-moar 79390147a: OUTPUT: «｢2｣␤ 0 => ｢｣␤ 1 => ｢2｣␤»

[13:26] <ZzZombo> why the first doesn't match?

[13:26] <ZzZombo> m: say '2 3' ~~ /(<[\w \h]>*) (\w)/

[13:26] <camelia> rakudo-moar 79390147a: OUTPUT: «｢2 3｣␤ 0 => ｢2 ｣␤ 1 => ｢3｣␤»

[13:26] <ZzZombo> err

[13:26] <ZzZombo> I meant this.

[13:29] *** kitsunenokenja joined
[13:33] *** cdg joined
[13:38] <AlexDaniel> ZzZombo: it did, but then it backtracked because you asked for \w also

[13:38] <AlexDaniel> or maybe I misunderstood the question

[13:39] <AlexDaniel> I probably did ;)

[13:39] <ZzZombo> uh, sorry? how ca it match and not match at the same time?

[13:40] <jnthn> Did you mean why the `token` case didn't match test?

[13:40] <jnthn> m: my regex identifier { <[\w \h]>* \w };say 'test' ~~ &identifier

[13:40] <camelia> rakudo-moar 79390147a: OUTPUT: «｢test｣␤»

[13:41] <jnthn> If so, you need regex

[13:41] <jnthn> Or to rewrite it not to rely on backtracking

[13:41] <AlexDaniel> relevant piece of docs: https://docs.perl6.org/language/regexes#Ratchet

[13:43] *** cdg left
[13:43] *** cdg joined
[13:51] *** p000v joined
[13:52] <p000v> What does nqp::rebless do? The docs say "Convert $obj to be an object of the new $type" but what does covert actually mean? Getting this error and trying to figure out why: "Incompatible MROs in P6opaque rebless for types Perl6::Grammar+{Recomment} and Perl6::Grammar"

[13:53] <jnthn> It's the mechanism beneath infix:<does>

[13:53] <jnthn> It does an in-place change of type

[13:54] <timotimo> https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/P6opaque.c#L1165 - if you want the ugly details

[13:54] <p000v> Thanks.

[13:54] <jnthn> With the restriction that the MRO of the target type must have the MRO of the existing type as its suffix

[13:54] *** Cabanossi left
[13:55] *** Cabanossi joined
[13:55] <jnthn> I strongly suggest using infix:<does> instead, or .^mixin

[13:56] <jnthn> Unless doing something really unusual :)

[13:56] *** dakkar left
[13:56] <p000v> I'm trying to modify comment parsing :)

[13:57] <timotimo> changing the type of something won't cause methods on the callstack to magically be replaced :)

[13:58] <p000v> But that's the thing, the methods of, say, token that parses infix do get replaced, magically or otherwise, yet `token comment:<#>` inside ws doesn't get replaced until you start a new statementlist parse

[13:58] <timotimo> maybe printing the stacktrace in a few places will be interesting?

[13:58] <p000v> So I'm trying to figure out what is it that causes one to work and not the other. Seems the working ones use <EXPR> but the EXPR in grammar don't make anything special

[13:59] <jnthn> m: sub infix:<omg>($a, $b = 1 omg 2) { }

[13:59] <camelia> rakudo-moar 79390147a: ( no output )

[14:00] <jnthn> Hm, in that case it's put in place sufficiently to see it in the signature at least

[14:00] <jnthn> An immediate mixin only affects the current Cursor, however, and the rebless in statement list is to make it take hold in the next statement

[14:01] <jnthn> But there can certainly be "dead zones" where cursors further up the stack may not reflect the new language

[14:02] *** zakharyas joined
[14:03] *** zakharyas left
[14:03] *** pmurias joined
[14:03] *** zakharyas joined
[14:05] *** zakharyas left
[14:05] *** zakharyas1 joined
[14:07] <p000v> timotimo: the stacktrace just corroborates that `EXPR` or `termish` do something that make the change be detectable in top-level scope. The `term:sym<bar>` is detected in top level, but `comment:sym<#>` isn't and only if I stick it inside curlies does it start to work and then the stacktrace shows EXPR/termish in there, but the top level wouldn't have them: https://gist.github.com/zoffixznet/5794fd73a4ee3f7d61d3bbaa386c86c7

[14:08] <p000v> m: BEGIN $*LANG.refine_slang: 'MAIN', role { token comment:sym<#> { '#' {say 'meow'} \N* } }; # bar

[14:08] <camelia> rakudo-moar 79390147a: ( no output )

[14:09] <p000v> m: BEGIN $*LANG.refine_slang: 'MAIN', role { token comment:sym<#> { '#' {say 'meow'} \N* } }; {# bar␤}

[14:09] <camelia> rakudo-moar 79390147a: OUTPUT: «meow␤»

[14:09] <p000v> m: BEGIN $*LANG.refine_slang: 'MAIN', role { token termsym<bar> { 'b' {say 'meow'} \N* } }; b ar

[14:09] <camelia> rakudo-moar 79390147a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed regex␤at <tmp>:1␤------> 3fine_slang: 'MAIN', role { token termsym7⏏5<bar> { 'b' {say 'meow'} \N* } }; b ar␤»

[14:10] <p000v> m: BEGIN $*LANG.refine_slang: 'MAIN', role { token term:sym<bar> { 'b' {say 'meow'} \N* } }; b ar

[14:10] <camelia> rakudo-moar 79390147a: OUTPUT: «meow␤»

[14:11] <p000v> And I wanna steal that something to make the comment change work in top level too :)

[14:11] <jnthn> Well, that starts a new statement

[14:12] <jnthn> And iirc statement has a rebless in it

[14:12] <p000v> Yeah it does

[14:13] <p000v> That the magic sauce?

[14:13] * p000v tries a few things

[14:13] <jnthn> Yeah

[14:14] *** dakkar joined
[14:16] *** rindolf left
[14:22] *** rindolf joined
[14:25] *** cdg left
[14:29] <p000v> Yeah. Sticking `<!!{ nqp::rebless($/, self.slang_grammar('MAIN')); 1 }>` into `token _ws` in grammar did the trick, but I guess there's no way to make it work from the outside, since it'd require reblessing things inside things that need to be reblessed

[14:30] <p000v> Geth: rakudo/master (p000v++ commited) "make `token _ws` 100x times slower; I need this feature for an article!!"

[14:30] <p000v> :)

[14:31] <p000v> Just in inner scope is good enough for my purpose. Glad to finally understand the behaviour tho

[14:31] <p000v> jnthn++

[14:31] <timotimo> hm, spesh could eliminate rebless if the types are known to fit, and since reblessing anything will cause a deoptimization it might work out properly

[14:33] <moritz> sounds like quite a speshial case

[14:35] *** araraloren joined
[14:35] <araraloren> HI

[14:36] <p000v> \o

[14:36] <araraloren> How to get Cro::HTTP::Client request content ?

[14:37] <araraloren> It thrown an exception `Connection unexpectedly closed before response headers received`

[14:37] <araraloren> I don't know what happened

[14:38] <jnthn> araraloren: CRO_TRACE=1 in the environment

[14:38] <araraloren> ok

[14:39] <ugexe> title that exception from ComUnit::Repository but you seem so busy writing pissed off comments about zef in all your module commit messages that I can see why you would not have had the time to just look at the source 

[14:39] *** cdg joined
[14:39] <ugexe> tyil ^

[14:40] <tyil> I wonder why

[14:40] <ugexe> Me too

[14:40] <tyil> I don't really feel like having to go through this again

[14:40] <p000v> Then don't :)

[14:40] <tyil> feel free to pm w/ otr if you truly wonder ;)

[14:40] <p000v> There's a Steam sale. Go browse some cool games :)

[14:40] <araraloren> jnthn, thanks, it works

[14:43] *** p000v left
[14:43] *** cdg left
[14:45] <ZzZombo> <jnthn> Or to rewrite it not to rely on backtracking # how?

[14:46] <ugexe> tyil you seem like an angry person

[14:46] <tyil> I just invited you to discuss this in pm, and now instead you're going to make personal remarks against me

[14:47] <ZzZombo> drama in perl6? I've seen everything...

[14:47] <ugexe> You make them about “the author of zef” often

[14:48] <ugexe> The racists stuff the other day isn’t helping 

[14:48] *** lizmat joined
[14:48] <tyil> "racists stuff the other day"?

[14:48] *** ryn1x_ joined
[14:49] <DrForr> Drama? My...

[14:49] <huf> awww, is the channel growing up? :)

[14:50] <timotimo> having that "perl6-niggers" folder still in your distro

[14:50] <AlexDaniel> huf: quite the opposite actually? :)

[14:50] <tyil> "still"? I'm pretty sure I removed that

[14:50] <tyil> within a minute of spotting it

[14:50] <timotimo> the moment you uploaded it, i mean

[14:50] <timotimo> not sure why you'd call a folder that in the first place

[14:50] <tyil> it was a test

[14:51] <DrForr> Certainly seemed to be.

[14:51] <tyil> but if you wish to call me a racist forever because of a mistake, I guess I can't stop you

[14:51] <tyil> even though I fixed it as soon as I could

[14:51] <timotimo> there's literally millions of other test words you could have used …

[14:51] <tyil> I'm not sure what else you want from me

[14:51] <tyil> yes, I could, but I didn't and made a mistake

[14:51] <tyil> should this be an issue forever now?

[14:52] <ugexe> If you continue to be so angry, probably

[14:52] <tyil> and now you're calling me angry for no reason

[14:52] <tadzik> hah. I find myself wanting Perl 6 enums to be like Java enums: with constructors and associated values

[14:52] <AlexDaniel> ugexe: ಠ_ಠ

[14:52] <tadzik> ...they can't do that, can they

[14:52] *** Zoffix joined
[14:52] <timotimo> tadzik: you mean like my ADT module? ;)

[14:52] *** ryn1x_ left
[14:52] <tyil> again, I'm not sure what you want me to do, I invited you to discuss what issues we have in pm, but you don't want this

[14:53] <tyil> instead you're calling me racist and angry in here

[14:53] <Zoffix> tyil: out of curiosity, what was it a test *of*?

[14:53] <tadzik> timotimo: um, maybe %)

[14:53] <tyil> Zoffix: `cpan6 new <repo>`, I should've removed the test dir but I forgot

[14:54] <tyil> I added functionality to show what is being packed up now, and tests happen automated outside of the module dir with a given set of names to avoid such things from happening

[14:54] *** rindolf left
[14:55] <timotimo> tyil: fwiw, you can still download the file in question from cpan with the same url

[14:55] <lizmat> https://www.reddit.com/r/perl6/comments/7ezrz7/ive_written_a_small_bbc_news_scraper_in_perl_6/  # nice, but very perl5ish

[14:56] <tyil> isn't that the idea of cpan, to keep files available?

[14:56] <timotimo> there's a deletion feature. it doesn't make the file disappear from the face of the earth, of course

[14:57] <lizmat> tyil: modules that are past their due date, should be removed (manually) from CPAN

[14:57] <lizmat> this is both needed to keep the total size down, *and* it allows you to make your mistakes less available

[14:58] <tyil> timotimo: I removed the 0.8.0 release already though

[14:58] <timotimo> hm, ok

[14:58] <tyil> so again, I'm not sure what else you want me to do here

[14:58] <Zoffix> It takes a bit of time (3 days I think) for scheduled deletion to occur

[14:58] <tyil> or why I deserve to be called angry and racist without cause, and without the other party being willing to talk out the issue he or she has with me

[14:59] <tyil> Zoffix: those 3 days are over, they dont appear in my file overview anymore

[14:59] <tyil> I marked them for removal immediately after noticing

[14:59] <timotimo> your apology is enough for me, fwiw

[14:59] <Zoffix> Ah, I guess metacpan.org just keep them around.

[15:00] *** geospeck left
[15:00] <tyil> I don't think it allows for a inviting environment if you keep telling people they're angry for having made a mistake once either

[15:00] <Zoffix> fwiw, I don't think you're angry, but I'm laughing at you tyil :) That's quite a faux pas

[15:00] <tyil> so if anything, if you have a problem still, do bring it to pm

[15:00] <araraloren> await $client.post( "http://{$ip}/goform/formLogin", headers => %{'Referer' => "http://{$ip}/dir_login.asp",}, body => ['username' => MIME::Base64.encode_base64('username'), 'password' => MIME::Base64.encode_base64('password'), 'Language' => 'Chinese', 'tokenid'  => $tokenid ])

[15:01] *** rindolf joined
[15:01] <tyil> I'm trying my best here to work on modules I think are beneficial, and it's been going quite well and i've been having a ton of fun working in perl 6

[15:01] <araraloren> The cro said No applicable body serializer could be found :(

[15:01] <tyil> and I'd like it to stay that way

[15:01] * tadzik giggles https://github.com/tadzik/Net-Gopher

[15:02] <araraloren> jnthn, any suggestion ?

[15:02] <ugexe> tail I read your commit messages and they are often directed at me

[15:02] <AlexDaniel> tyil++ # for handling the situation very well

[15:02] <ugexe> I’m getting tired of it

[15:02] <Zoffix> .hug everyone

[15:02] * huggable hugs everyone

[15:02] <timotimo> i'll be AFK for an hour or so

[15:03] <tyil> tadzik: heh, I was talking with some other people on Rizon earlier today about a perl 6 module to deal with gopher

[15:03] <jnthn> araraloren: What are you expecting it to do with the body?

[15:03] <tadzik> tyil: hah, I'm just in time :)

[15:03] * lizmat only did a gopher server once, but that was 23 years ago

[15:03] <tadzik> this was fun, I want to do more

[15:04] <tyil> more modules in general?

[15:04] <araraloren> jnthn, I want login to the router 

[15:04] <tadzik> more gopher implementations

[15:04] <lizmat> the client wanted a gopher server, I created a web server as well for the same price: they only ever used the web serer :-)

[15:04] <tyil> or more gopher/networking stuff

[15:04] <tadzik> I'm amused by silly and useless stuff :)

[15:04] <jnthn> araraloren: Yeah, I mean how is the body meant to be serialized?

[15:04] <jnthn> araraloren: The thing you're missing is a content-type argument to post

[15:05] <jnthn> araraloren: Without one of those, it doesn't know whether it should turn the body into JSON, form-data/multipart, etc.

[15:05] <araraloren> oh, jnthn 

[15:05] <jnthn> http://cro.services/docs/reference/cro-http-client#Setting_the_request_body

[15:05] <araraloren> thanks, it was missing that headers 

[15:05] <jnthn> Examples there :)

[15:06] <jnthn> araraloren: I don't mind answering cro questions here, but fwiw there's a 

[15:06] <jnthn> #cro channel now also

[15:06] <tadzik> so, I should've been writing a gopher server for cro? %)

[15:06] <jnthn> d'oh, hit enter at wrong time :)

[15:06] <araraloren> Hmm, yeah I'm study with that example 

[15:06] <jnthn> tadzik: Reactive gopher microservies...why not? :D

[15:06] <araraloren> hmm

[15:07] <tadzik> Because we can[TM]

[15:07] <tyil> ™

[15:08] <tadzik> thanks. Because we can!™

[15:09] *** Cabanossi left
[15:09] <Zoffix> 𝐁𝐞𝐜𝐚𝐮𝐬𝐞 𝐰𝐞 𝐜𝐚𝐧!™ 

[15:10] *** Zoffix left
[15:10] *** Cabanossi joined
[15:11] <raschipi> We do what we must because we can.

[15:11] *** ugexe left
[15:12] *** kitsunenokenja left
[15:13] <tadzik> for the good of all of us.

[15:14] <raschipi> Anyone here uses POWER for anything?

[15:17] <tyil> I use a lot of power when compiling things

[15:17] <raschipi> But do use as much power as people that use POWER?

[15:18] *** araraloren left
[15:19] <tadzik> Practically Open, Wrongly Executed Robotics?

[15:22] * ilmari assumes raschipi means the IBM CPU architecture

[15:22] <raschipi> yeah, the one from IBM

[15:22] <ilmari> debian has rakudo packages for ppc64el, at least

[15:23] <tyil> thats more up to date than ubuntu 16.04

[15:24] <tyil> which still has parrot as vm for perl 6

[15:25] <ilmari> uh, no

[15:25] <ilmari> https://packages.ubuntu.com/xenial/rakudo

[15:25] <ilmari> did you mean 14.04? https://packages.ubuntu.com/trusty/rakudo

[15:27] <tyil> oh

[15:28] <tyil> we use 14.04 at work then

[15:29] <tyil> oh well

[15:29] <tyil> I use rakudobrew on all my machines

[15:30] <El_Che> tyil: https://github.com/nxadm/rakudo-pkg <-- 14.04 pkgs

[15:31] <tyil> I've learned about that as well yeah

[15:31] <El_Che> I added 14.04 because travis runs that

[15:31] <tyil> I was wondering if the travis perl6 builds could make use of that

[15:31] <tyil> but I havent found the right time to look at those possibilities yet

[15:32] <tyil> most tests now take 10 minutes, from which 9 minutes installing perl 6 :p

[15:32] <El_Che> tyil: actually, I do: https://github.com/nxadm/rakudo-pkg/blob/master/.travis.yml

[15:32] <tyil> :o

[15:32] <El_Che> If triggered, I could build historical versions and put them in a repo

[15:33] <El_Che> so you could test against all post christmas rakudos

[15:33] <tyil> install: wget $RAKUDO_DEB && sudo dpkg -i *.deb

[15:33] <tyil> I could use this

[15:33] <El_Che> I haven't been triggered yet, I haven't had the time and I don't know if there is a need for it

[15:35] *** starmarkd joined
[15:35] *** starmarkd left
[15:38] *** starmarkd joined
[15:38] <tyil> El_Che: I'll look into updating App::Cpan6 to use that install script to lower test times

[15:42] *** zakharyas1 left
[15:42] *** ryn1x_ joined
[15:42] *** zakharyas joined
[15:43] *** poohman left
[15:46] *** ryn1x_ left
[15:50] *** khw joined
[15:51] *** rocx joined
[15:53] *** domidumont left
[15:55] *** comborico1611 joined
[15:56] *** ryn1x_ joined
[15:56] *** geospeck joined
[15:58] *** scimon left
[15:59] *** scimon joined
[16:00] <El_Che> tyil: ping me if several version of rakudo are needed. Add far low in my todo list, but you never know

[16:00] <El_Che> tyil: I create 14.04 pkgs for every rakudo release.

[16:01] <tyil> will do

[16:01] <tyil> :>

[16:01] <moritz> if you need a repo software that can handle muliple version of the same package, use aptly

[16:01] <moritz> (though .deb only)

[16:01] *** raschipi left
[16:02] *** sjn left
[16:02] *** Zoffix joined
[16:04] <Zoffix> Does anyone have a script to convert Perl 6 code to HTML with syntax highlights? I know there's a Vim one in ecosystem, but I was thinking of the docs site's highlights, since they're probably more thorough...

[16:05] <moritz> there's pygments also

[16:05] <El_Che> moritz: I am experimenting with bintray

[16:05] <Zoffix> Or more to the point: does anyone have a script to convert markdown to decent Advent articles? Last year I used gist scraper, but this year Perl 6 highlights are broken on github

[16:05] <timotimo> you can probably gist the code and copy-paste the result into a "contentseditable" text entry thingie

[16:05] <El_Che> moritz: it supports rpm, deb and other stuff

[16:05] <timotimo> dangit

[16:07] <Zoffix> Actually, if you gist as a Perl 6 code instead of markdown, it does highlight it. I think that'll work for my purpose.

[16:10] *** ryn1x left
[16:10] *** lizmat left
[16:10] <tyil> El_Che: I was wondering why travis was complaining about a missing t directory now

[16:11] <tyil> but I just realized I branched off of master, and I have my tests in another branch

[16:12] <Geth> ¦ mu: 2cb5712440 | (Itsuki Toyota)++ (committed using GitHub Web editor) | misc/perl6advent-2017/schedule

[16:12] <Geth> ¦ mu: Add titsuki as a 13th writer

[16:12] <Geth> ¦ mu: review: https://github.com/perl6/mu/commit/2cb5712440

[16:14] *** troys_ is now known as troys

[16:14] <Zoffix> \o/

[16:15] <Geth> ¦ mu: 7517addb7e | (Moritz Lenz)++ | misc/perl6advent-2017/schedule

[16:15] <Geth> ¦ mu: Move my advent post further down

[16:15] <Geth> ¦ mu: 

[16:15] <Geth> ¦ mu: I really want my Perl 6 Regexes book to be published by then,

[16:15] <Geth> ¦ mu: and it is being delayed a bit due to problems with the layout/typography

[16:15] <Geth> ¦ mu: 

[16:15] <Geth> ¦ mu: If this leaves a hole early on the in the schedule, I can try to fill it

[16:15] <Geth> ¦ mu: up with a different post.

[16:15] <Geth> ¦ mu: review: https://github.com/perl6/mu/commit/7517addb7e

[16:16] <Zoffix> moritz: I can move "Zoffix: "Perl 6: Sigils, Variables, and Containers"" into the hole; it's ready already

[16:16] <Zoffix> If you wanty

[16:17] <El_Che> tyil: that's a weird setup

[16:17] <tyil> I was making the tests in a new branch

[16:17] <tyil> I didn't have tests before yet :(

[16:17] <tyil> once I have all enough tests they'll go back into master

[16:18] <tyil> but currently my tests cant pass because it requires a change in a dependency, and my PR there hasnt gotten a response yet :(

[16:20] <moritz> Zoffix: that would be good, yes

[16:21] <Geth> ¦ mu: 478c1adada | (Zoffix Znet)++ (committed using GitHub Web editor) | misc/perl6advent-2017/schedule

[16:21] <Geth> ¦ mu: Mark zofspots as takable/fill 2nd hole

[16:21] <Geth> ¦ mu: review: https://github.com/perl6/mu/commit/478c1adada

[16:22] *** kaare_ left
[16:23] *** Cabanossi left
[16:23] <El_Che> tyil: ok, now it makes sense. A little :)

[16:23] *** Ven`` joined
[16:23] <tyil> I understand its not the best setup ever, but its also still in an early development stage

[16:23] *** kaare_ joined
[16:24] <tyil> preparing for a stable 1.0 release before the end of the year

[16:24] <El_Che> remind me again what is does?

[16:25] <El_Che> it's a cpan(m) like app?

[16:25] <geospeck> What is the easiest way to do an http get request using the stdlib only?

[16:25] *** Cabanossi joined
[16:25] <tyil> it may one day become an actual cpan-like app, but I dont know enough about installing modules yet, so for now its just a tool to assist in building modules

[16:26] <tyil> setting up skeletons for new modules, dealing with creating new files and adding them to META6

[16:26] <Zoffix> geospeck: stdlib is what? Whatever comes with Rakudo Star?

[16:26] <moritz> geospeck: if you talk about the compiler only: I don't think there's a built-in HTTP client, so you'd have to open a socket and talk HTTP yourself

[16:26] <tyil> I mostly very much disliked having to manually edit the META6.json for every change

[16:26] <geospeck> yes, I mean without installing 3rd party libraries

[16:26] *** zakharyas left
[16:26] <El_Che> tyil: like p5's module-starter?

[16:26] <tyil> yes

[16:26] <El_Che> nice

[16:26] <El_Che> tyil++

[16:27] <Zoffix> star: use LWP::Simple

[16:27] <camelia> star-m 2017.07: OUTPUT: «===SORRY!===␤P6M Merging GLOBAL symbols failed: duplicate definition of symbol INET␤»

[16:27] <Zoffix> :/

[16:27] <tyil> I have an unpublished tutorial to show basic use of it (and teach new perlers to create their own simple application with a gui)

[16:27] <geospeck> moritz: https://docs.perl6.org/type/IO::Socket::INET is this the doc ?

[16:27] <tyil> if you have time to spare, you're free to proof-run it, I want one or two more people to go through it before I publish it

[16:28] <Zoffix> geospeck: well, LWP::Simple should be with the star. `use LWP::Simple; say LWP::Simple.get: 'blah blah'` is the simplest way

[16:28] <tyil> I want to be very sure it works properly, as it is intended for new users

[16:28] <tyil> who usually don't know how to troubleshoot stuff yet

[16:28] <geospeck> Zoffix thank you! that's great

[16:29] <Ven``> looking for advent topic ideas if someone's got one to throw my one. considering talking about macros... maybe just cro :).

[16:30] <Zoffix> Ven``: Cro!

[16:30] <Ven``> .oO( Perl 6 advent day 3: How to use type shenanigans to crash MoarVM )

[16:31] *** ryn1x_ left
[16:31] <tadzik> . o O ( my Macro $cro )

[16:32] <Zoffix> .oO( Macbook Cro )

[16:32] *** Zoffix left
[16:33] *** ChoHag left
[16:34] *** _28_ria left
[16:41] <timotimo> Crom Book Pixel™

[16:46] *** wamba left
[16:47] <teatime> Happy Thanksgiving, Perl-people.  o/

[16:48] <El_Che> s/(Perl-people)/$1 in the USA/

[16:48] <El_Che> :)

[16:48] <teatime> I wished my Toronto friend a happy non-canadian thanksgiving.

[16:49] <El_Che> the rest of the World is less sympathetic to the official story of the extinsion of native people :)

[16:49] *** rocx left
[16:49] <El_Che> but, Happy Thankgiving nevertheless for my friends in the US :)

[16:49] *** _28_ria joined
[16:51] *** poohman joined
[16:52] *** ryn1x joined
[16:54] *** Cabanossi left
[16:55] *** Cabanossi joined
[16:58] *** abraxxa left
[17:00] <ryn1x> I needed some progress indicators for a project I am working on so I decided to make my own as a learning exercise. I am sure there is a conventional way to do this, but this is what I came up with. I would like any feedback on what I could/should do differently. https://github.com/ryn1x/Spinners

[17:04] <tyil> are you looking to publish it as a module?

[17:05] <ryn1x> I doubt it is worthy of being published... just trying to learn the basics so maybe one day I could write something to publish.

[17:07] <El_Che> ryn1x: it sounds like a useful module to me

[17:08] <tyil> ^

[17:08] <tyil> the demo is well documented, so its easy to get started with it

[17:08] <tyil> I'd change `multi MAIN` to `sub MAIN` since you dont have multiple MAINs

[17:09] <ryn1x> tyil: I did not notice it was still a multi. Thanks! I had a new mains while testing.

[17:09] <tyil> I'd split up the class definition and the two subroutines you have into two seperate files

[17:10] <tyil> and while certainly not required, I prefer to add a `#! /usr/bin/env false` to files that should be loaded instead of executed

[17:11] <tyil> also, I see you're backspacing 80 chars to render the new bar

[17:11] <tyil> what happens if someone presses space while the bar is rendering?

[17:11] <ryn1x> If I split them into two seperate files would I have to import them seperately or could they still be the same module?

[17:12] <tyil> they can still be in the same module, but imported seperately

[17:12] <ryn1x> I have not tried to debug that..I do not know of another way to render the progress bar in-place...

[17:13] <tyil> me neither, so I don't know if there's a better solution for this

[17:14] <ryn1x> I just tried... hitting the spacebar interferes with the spinners, but does not seem to affect the progress bars

[17:14] <tyil> neat

[17:15] <ryn1x> I suspect that might change with the speed they are updating though...

[17:17] <ryn1x> Nope... just slowed it way down... progress bar still is not affected by pressing space...interesting

[17:18] <tyil> nice

[17:19] <tyil> have you ever released a module before?

[17:20] <ryn1x> No. I am very new to Perl6, and programming in general for that matter. 

[17:20] <tyil> would you like to release a module?

[17:21] *** sjn joined
[17:22] <ryn1x> Yeah of course. I hope to try and start giving back to this community. I just feel a little inexperienced right now.

[17:22] <tyil> everyone started at that point

[17:23] <tyil> if you want to release Spinners as a module, hit me (or anyone else in here) up, and we can assist you in the process

[17:23] <tyil> your first module is usually the scariest to release, so if you don't want to get started on it yet I understand too :)

[17:25] <tyil> that said, its time to get working on lunch/dinner, so I'll be afk for a while

[17:25] *** mson joined
[17:25] <tyil> I should be back in two hours if you need me 

[17:25] <ryn1x> Ok. Let me refactor it a bit with your suggestion to split into two files. I will also need to change the directory organization to match other modules right? I assume "use lib '.'" in in my demo file is incorrect too.

[17:25] *** cdg joined
[17:25] <ryn1x> ok thanks so much for your feedback

[17:26] <tyil> here's a tiny module I made a little while ago, you can look at that for the structure: https://github.com/scriptkitties/perl6-SemVer

[17:26] <tyil> having a META6.json is mandatory

[17:26] *** scimon left
[17:27] <ryn1x> great. thanks!

[17:27] * tyil vanishes

[17:28] *** ryn1x_ joined
[17:29] *** cdg left
[17:31] *** gregf_ joined
[17:32] *** ryn1x_ left
[17:33] *** starmarkd left
[17:33] <buggable> New CPAN upload: JSON-Fast-0.9.7.tar.gz by TIMOTIMO https://cpan.metacpan.org/authors/id/T/TI/TIMOTIMO/Perl6/JSON-Fast-0.9.7.tar.gz

[17:33] <buggable> New CPAN upload: Font-FreeType-0.0.3.tar.gz by WARRINGD https://cpan.metacpan.org/authors/id/W/WA/WARRINGD/Perl6/Font-FreeType-0.0.3.tar.gz

[17:34] <timotimo> it me

[17:34] <Ven``> IT-mp

[17:34] <Ven``> mo*

[17:36] *** char_var[buffer] joined
[17:37] *** dakkar left
[17:43] <buggable> New CPAN upload: JSON-Fast-0.9.8.tar.gz by TIMOTIMO https://cpan.metacpan.org/authors/id/T/TI/TIMOTIMO/Perl6/JSON-Fast-0.9.8.tar.gz

[17:47] *** wamba joined
[17:50] <timotimo> "size: 13364 bytes"

[17:51] <timotimo> :\

[17:52] *** poohman_ joined
[17:56] *** poohman left
[17:56] *** poohman_ is now known as poohman

[17:56] *** poohman left
[17:57] *** char_var[buffer] left
[17:58] *** Ven`` left
[18:00] *** char_var[buffer] joined
[18:03] *** setty1 joined
[18:05] *** domidumont joined
[18:07] <Geth> ¦ mu: 6ab13a9edd | (Aleks-Daniel Jakimenko-Aleksejev)++ | misc/perl6advent-2017/schedule

[18:07] <Geth> ¦ mu: Claim 23rd, moved other posts higher

[18:07] <Geth> ¦ mu: review: https://github.com/perl6/mu/commit/6ab13a9edd

[18:07] *** troys is now known as troys_

[18:12] <Geth> ¦ mu: 93d8065f86 | (Zoffix Znet)++ (committed using GitHub Web editor) | misc/perl6advent-2017/schedule

[18:12] <Geth> ¦ mu: Make schedule look emptier

[18:12] <Geth> ¦ mu: review: https://github.com/perl6/mu/commit/93d8065f86

[18:18] *** raschipi joined
[18:29] *** lizmat joined
[18:30] *** lizmat left
[18:35] *** darutoko left
[18:42] *** committable6 left
[18:42] *** committable6 joined
[18:57] *** pmurias left
[18:58] *** ryn1x left
[19:26] *** raschipi left
[19:33] *** wamba left
[19:34] *** wamba joined
[19:38] *** TreyHarris joined
[19:43] *** Xliff left
[19:45] <moritz> so, I've been pondering more advent post topics

[19:46] *** ryn1x_ joined
[19:46] <moritz> and if there's interested, I could publish a chapter from the Perl 6 Regexes book

[19:46] <moritz> s/interested/interest/

[19:46] <tyil> my interest has been tickled

[19:49] *** quotable6 joined
[19:49] *** ChanServ sets mode: +v quotable6

[19:49] *** coverable6 joined
[19:49] *** greppable6 joined
[19:49] *** bloatable6 joined
[19:49] *** nativecallable6 joined
[19:49] *** tangible6 joined
[19:49] *** benchable6 joined
[19:49] <moritz> this is the table of contents: https://perlgeek.de/static/tmp/perl6regex-toc.pdf

[19:49] *** statisfiable6 joined
[19:50] <moritz> any preference for a particular chapter?

[19:51] <tyil> chap5, it sounds like it will introduce a lot of practical niceness of regexes/grammars

[19:52] <tyil> 9 also looks like a good fit to show some nice things and practical things

[19:54] *** avalenn joined
[19:54] *** Cabanossi left
[19:55] <moritz> ok, thanks for the feedback

[19:55] <moritz> I'll wait for some second or third opinions

[19:55] *** Cabanossi joined
[19:57] *** comborico1611 left
[20:03] *** domidumont left
[20:17] *** mojca joined
[20:18] <mojca> how I can figure out more details about this test failure? https://paste.macports.org/54b9a0914c09

[20:19] <tyil> are you running prove?

[20:20] *** ryn1x_ left
[20:20] <mojca> no, just make test

[20:20] <mojca> should I run something else?

[20:20] <tyil> oh, you're building perl6, not a simple module

[20:20] *** geospeck left
[20:21] *** xinming_ is now known as xinming

[20:21] <tyil> best to wait for someone with more knowledge on that then

[20:21] <mojca> yes, this is a failed test for rakudo

[20:21] <moritz> mojca: run ./perl6-m -Ilib t/04-nativecall/17-libnames.t

[20:22] <moritz> probably doesn't even need -Ilib

[20:23] <mojca> 1..7

[20:23] <mojca> Segmentation fault: 11

[20:23] <mojca> if I use llib: Grouped options '-llib' contain 'l', which is not a valid option

[20:23] <timotimo> whee

[20:24] <timotimo> it has to be capital i, not lowercase L

[20:24] <moritz> mojca: no, -I (captial i), not -l

[20:24] <moritz> mojca: anyway, you can run ./perl6-gdb-m t/04-nativecall/17-libnames.t

[20:24] <moritz> and then "run"

[20:24] <moritz> and when it segfaults, "bt"

[20:24] <moritz> to get a backtrace

[20:24] <timotimo> failures in native call aren't as terrible as other failures; it's not necessary for rakudo to run

[20:25] <mojca> with -Ilib it's seven times: ok 1 - # SKIP <unknown>

[20:26] <timotimo> you're not on linux?

[20:26] <timotimo> gotta go afk

[20:26] *** rindolf left
[20:28] <mojca> how can I specify which gdb is used?

[20:28] <mojca> because it's called ggdb

[20:29] <moritz> mojca: perl6-gdb-m is a shell script. You can edit it to your liking

[20:29] <mojca> no, I'm not on linux, it's mac

[20:33] <mojca> ok, there seems to be one problem

[20:33] <mojca> the tests will use the installed version or rakudo rather than the one currently being built & tested

[20:33] <mojca> if I first install the new version and then test it, it works

[20:34] <mojca> I'm not too hapy about it

[20:35] <mojca> I used lldb and it refused to crash

[20:39] *** Cabanossi left
[20:40] *** Cabanossi joined
[20:47] *** mojca left
[20:48] *** espadrine joined
[20:57] *** ryn1x joined
[21:03] *** cdg joined
[21:03] *** mudman joined
[21:06] *** _28_ria left
[21:07] *** cdg left
[21:10] *** zakharyas joined
[21:18] *** lizmat joined
[21:24] *** wamba left
[21:37] *** ryn1x left
[21:39] *** ryn1x joined
[21:43] <ryn1x> tyil: are you on?

[21:43] <tyil> yes I am

[21:43] <tyil> what's up

[21:44] <ryn1x> I made some changes to my module to get it ready to possibly publish. https://github.com/ryn1x/Terminal-Spinners

[21:45] <tyil> looks nice

[21:46] <tyil> you can test if its installabe by just trying to install it

[21:46] <tyil> `zef install .`

[21:46] <ryn1x> Did that and it works.. tried on two different computers, ubuntu and macos

[21:47] <tyil> then you're good to go

[21:47] <tyil> modules are usually uploaded to CPAN nowadays

[21:47] <tyil> for this you need a PAUSE account, which you can request here: https://pause.perl.org/pause/authenquery?ACTION=request_id

[21:48] <ryn1x> Ok. I will register. I don't know anything about CPAN yet.

[21:49] <tyil> its the Comprehensive Perl Archive Network

[21:49] <tyil> a network of servers serving Perl modules

[21:50] <tyil> this may be of interest to you: https://docs.perl6.org/language/modules.html#Upload_your_Module_to_CPAN

[22:02] *** ChoHag joined
[22:09] *** Cabanossi left
[22:10] *** Cabanossi joined
[22:11] *** mudman left
[22:14] <ryn1x> Thanks for all the support tyil. I created the archive after reading the link you sent. Just waiting for my registration to be approved.

[22:16] <tyil> thats usually within the hour

[22:16] <tyil> but I cant make any guarantees on that

[22:17] <tyil> once you have an account, you can upload manually via the webinterface, or use a module like App::Cpan6 (disclaimer, this is my own module, there may be alternatives available)

[22:17] <ryn1x> Cool. Ill check it out.

[22:17] <tyil> also, the convention name for those tarballs is Module-Name-version.tar.gz, which in your case would be Terminal-Spinners-0.0.3.tar.gz

[22:18] *** setty1 left
[22:18] <tyil> its also good to know that you cannot overwrite an upload

[22:19] <tyil> so once you upload that tarball, you can not re-upload it with fixes, and not upload the same version of Terminal::Spinners

[22:19] <tyil> you'd have to make fixes,increase the version  number, and then upload a new tarball

[22:19] <ryn1x> Perfect. That is what I named it with "git archive".

[22:20] <ryn1x> ok. that is good to know. 

[22:20] <tyil> also, consider any uploads to cpan permanent

[22:21] <tyil> even if you mark to remove them, they can (and usually will) still be available through cpan

[22:22] <ryn1x> Ok. And you do recommend publishing my module through CPAN and not github right? Seems like a lot of the modules now are from github, but I think that CPAN support for perl6 is relatively new right?

[22:23] *** mudman joined
[22:23] <tyil> there are many still through github, but as far as I know, that will be deprecated at some point in time

[22:23] <tyil> it doesnt scale very well

[22:23] <tyil> as such I'd recommend using cpan, for it is the future

[22:24] <ryn1x> ok

[22:43] *** MasterDuke left
[22:49] *** zakharyas left
[22:52] *** Cabanossi left
[22:55] *** Cabanossi joined
[23:25] *** evalable6 left
[23:25] *** evalable6 joined
[23:25] *** ChanServ sets mode: +v evalable6

[23:28] *** lizmat left
[23:39] *** Cabanossi left
[23:40] *** Cabanossi joined
