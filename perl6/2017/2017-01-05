[00:04] *** pmurias left
[00:07] *** shayan_ left
[00:07] *** shayan_ joined
[00:10] *** mcmillhj joined
[00:12] *** Celelibi joined
[00:14] *** shayan_ left
[00:17] *** Actualeyes left
[00:18] *** mcmillhj left
[00:19] *** dj_goku joined
[00:19] *** dj_goku left
[00:19] *** dj_goku joined
[00:24] *** dj_goku left
[00:25] *** dj_goku joined
[00:25] *** dj_goku left
[00:25] *** dj_goku joined
[00:29] *** rpburkholder joined
[00:29] *** ufobat left
[00:29] *** BenGoldberg joined
[00:30] *** mcmillhj joined
[00:31] *** dj_goku left
[00:31] *** itcharlie1 joined
[00:35] *** mcmillhj left
[00:35] *** dj_goku joined
[00:35] *** dj_goku left
[00:35] *** dj_goku joined
[00:38] <notviki> hm, if I expand all multies and count their candidates, we have 1177 core functions...

[00:39] *** shayan_ joined
[00:40] *** cpage_ joined
[00:43] <notviki> and if I done it right... 4056 methods

[00:43] <notviki> oh wait, I forgot the candidates :P

[00:43] <dalek> doc/ronaldxs-fix-contributing-link: 69d8444 | ronaldxs++ | doc/Language/about.pod6:

[00:43] <dalek> doc/ronaldxs-fix-contributing-link: Update about.pod6 - fix broken CONTRIBUTING link

[00:43] <dalek> doc/ronaldxs-fix-contributing-link: review: https://github.com/perl6/doc/commit/69d8444d85

[00:44] *** cpage_ left
[00:44] *** shayan_ left
[00:44] <notviki> 7297 methods :P

[00:45] <notviki> m: say "{7297+1177} routines"

[00:45] <camelia> rakudo-moar 996ab6: OUTPUT«8474 routines␤»

[00:45] *** shayan_ joined
[00:45] <notviki> .oO( Perl 6 flash cards with names of routines... )

[00:45] <AlexDaniel> that's scary

[00:47] *** aborazmeh joined
[00:47] *** aborazmeh left
[00:47] *** aborazmeh joined
[00:50] *** cpage_ joined
[00:51] <AlexDaniel> alright folks

[00:51] <AlexDaniel> what would be the right behavior here

[00:51] <notviki> m: say 4056 + 372

[00:51] <camelia> rakudo-moar 996ab6: OUTPUT«4428␤»

[00:51] <AlexDaniel> mch: say “5” ~~ /<[\5]>/

[00:51] <committable6> AlexDaniel, ¦«2015.12,HEAD»: ｢5｣

[00:51] <AlexDaniel> mch: say “0” ~~ /<[\0]>/

[00:51] <committable6> AlexDaniel, ¦«2015.12»: ｢0｣␤¦«HEAD»: Nil

[00:51] <AlexDaniel> mch: say “\0” ~~ /<[\0]>/

[00:51] <notviki> If you add up all routines without counting individual candidates, we still have fewer of them than PHP

[00:51] <committable6> AlexDaniel, ¦«2015.12»: Nil␤¦«HEAD»: ｢␀｣

[00:51] <notviki> So much for "massive" language :P

[00:53] <AlexDaniel> to me it looks inconsistent. Either all other backslashed digits should be disallowed, or \0 should match ‘0’

[00:53] <notviki> mch: say “\5” ~~ /<[\5]>/ 

[00:53] <committable6> notviki, ¦«2015.12,HEAD»: 04===SORRY!04=== Error while compiling /tmp/6PMk5lfoFM␤Unrecognized backslash sequence (did you mean $4?)␤at /tmp/6PMk5lfoFM:1␤------> 03say “\508⏏04” ~~ /<[\5]>/  «exit code = 1»

[00:53] <notviki> mch: say “\x[5]” ~~ /<[\5]>/ 

[00:53] <committable6> notviki, ¦«2015.12,HEAD»: Nil

[00:54] <SmokeMachine> m: role Cond { has &!true = {;}; has &!false = {;}; proto method cond(|) {*}; multi method cond("True") { &!true() }; multi method cond("False") { &!false() }; method if(:&!true, :&!false){ $.cond(?self .gist) } }; (False does Cond).if: :true{say "ok"} :false{say "ko"}

[00:54] <camelia> rakudo-moar 996ab6: OUTPUT«ko␤»

[00:55] <SmokeMachine> m: role Cond { has &!true = {;}; has &!false = {;}; proto method cond(|) {*}; multi method cond("True") { &!true() }; multi method cond("False") { &!false() }; method if(:&!true, :&!false){ $.cond(?self .gist) } }; (True does Cond).if: :true{say "ok"} :false{say "ko"}

[00:55] <camelia> rakudo-moar 996ab6: OUTPUT«ok␤»

[00:56] <AlexDaniel> now, the commit that did it is https://github.com/perl6/nqp/commit/d86a4226b726262142aee59051e6494f0057fb95

[00:58] <notviki> mch: say “\x[5]” ~~ /<[\x[5]]>/

[00:58] <committable6> notviki, ¦«2015.12,HEAD»: ｢␅｣

[00:59] * notviki squints

[00:59] <notviki> mch: say .Str.uninames.say given “\x[5]” ~~ /<[\x[5]]>/

[00:59] <committable6> notviki, ¦«2015.12,HEAD»: (ENQUIRY)␤True

[00:59] <notviki> heh

[01:00] <notviki> AlexDaniel: yeah, kinda weird. I guess we special case \0 to avoid writing \x[0] 

[01:00] <notviki> mch: say “\0” ~~ /<[\x[0]]>/

[01:00] <committable6> notviki, ¦«2015.12,HEAD»: ｢␀｣

[01:00] <AlexDaniel> \x[0] is not too bad.

[01:00] <AlexDaniel> considering how often you want to match a null byte…

[01:02] <notviki> AlexDaniel: funny to see this commit because I actually got bit by this in first version of IRC::Client

[01:02] *** mcmillhj joined
[01:03] <AlexDaniel> notviki: in what way? You were trying to match digit zero with \0 and all of the sudden it was broken? :)

[01:03] <notviki> And found out it was wrong only when the robot was ignoring a user.

[01:04] <notviki> AlexDaniel: no, I was trying to match the nullbyte, but it matched "0" and ignore a user with "0" in their nick

[01:04] <notviki> If 2015 #freenode-newyears log is found, you'd find the fumbling :)

[01:04] <AlexDaniel> meh.

[01:04] <AlexDaniel> what happened to the bot this year?

[01:05] <notviki> It got quickly banned by Google and that was the end.

[01:05] <AlexDaniel> ppppppffffffffttttttt FD

[01:05] <AlexDaniel> :D

[01:05] <AlexDaniel> sad.

[01:06] *** labster left
[01:06] <notviki> AlexDaniel: Ah, found that commit: https://github.com/zoffixznet/perl6-IRC-Client/commit/ce9eb0ee6f2903c551f88f989ef17ef8f1dbdc1f

[01:06] <AlexDaniel> \x0

[01:06] <AlexDaniel> one character difference

[01:07] *** mcmillhj left
[01:07] <notviki> Yes, but software got shipped to "production" with a bug due to this

[01:07] <notviki> m: say "\0"

[01:07] <camelia> rakudo-moar 996ab6: OUTPUT«␀␤»

[01:07] <notviki> m: say "\0" ~~ /<[\x0]>/

[01:07] <camelia> rakudo-moar 996ab6: OUTPUT«｢␀｣␤»

[01:07] *** Actualeyes joined
[01:08] *** mscha joined
[01:08] <notviki> m: say "\5"

[01:08] <camelia> rakudo-moar 996ab6: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unrecognized backslash sequence (did you mean $4?)␤at <tmp>:1␤------> 3say "\57⏏5"␤»

[01:08] <notviki> m: say "\1"

[01:08] <camelia> rakudo-moar 996ab6: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unrecognized backslash sequence (did you mean $0?)␤at <tmp>:1␤------> 3say "\17⏏5"␤»

[01:08] <notviki> m: say "\0"

[01:08] <AlexDaniel> okay

[01:08] <camelia> rakudo-moar 996ab6: OUTPUT«␀␤»

[01:08] <AlexDaniel> that's what it should do then

[01:08] <notviki> And it's easy to assume \0 would work in char class when it works in a string.

[01:08] <AlexDaniel> fair enough

[01:08] <mscha> m: for ^10 -> $i { say $i; next if $i < 5; once { say "hello" } }

[01:08] <camelia> rakudo-moar 996ab6: OUTPUT«0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[01:09] <notviki> AlexDaniel: what should do. Dunno.

[01:09] <notviki> Ask TimToady for opinion I guess

[01:09] *** espadrine left
[01:09] <notviki> cause in strings we die but in char classes we match digits.. That's kinda inconsistent

[01:09] <notviki> for non-0 stuff

[01:10] <AlexDaniel> sure, I'll create a ticket first, then point TimToady to it

[01:15] *** labster joined
[01:15] *** pyrimidine left
[01:18] *** travis-ci joined
[01:18] <travis-ci> Doc build passed. Ronald Schmidt 'Update about.pod6 - fix broken CONTRIBUTING link'

[01:18] <travis-ci> https://travis-ci.org/perl6/doc/builds/189037903 https://github.com/perl6/doc/commit/69d8444d85a9

[01:18] *** travis-ci left
[01:20] <mscha> m: for ^10 -> $i { once { say "This runs." }; once { say "This too." }; say $i; next if $i < 5; once { say "This should run (right?) but doesn't." } } # is this a bug?

[01:20] <camelia> rakudo-moar 996ab6: OUTPUT«This runs.␤This too.␤0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[01:23] <notviki> That reminds me of a bug where `state` var don't get set if you exit outta the block like ^ that on first entry.

[01:24] <notviki> This one https://rt.perl.org/Ticket/Display.html?id=102994#ticket-history

[01:24] <notviki> The symptoms at least are the same :)

[01:24] * notviki goes to bed

[01:29] <dalek> doc: fc55f9a | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Type/IO.pod6:

[01:29] <dalek> doc: No guessing, just “utf8”

[01:29] <dalek> doc: 

[01:29] <dalek> doc: Resolves https://github.com/perl6/doc/issues/1111

[01:29] <dalek> doc: review: https://github.com/perl6/doc/commit/fc55f9a410

[01:29] <synopsebot6> Link: http://doc.perl6.org/type/IO

[01:32] *** rpburkholder left
[01:35] *** shayan_ left
[01:35] <AlexDaniel> u: Zl

[01:35] <unicodable6> AlexDaniel, U+2028 LINE SEPARATOR [Zl] ( )

[01:37] *** shayan_ joined
[01:37] *** shayan_ left
[01:41] *** mscha left
[01:41] <dalek> doc: 01d552c | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Type/IO.pod6:

[01:41] <dalek> doc: Correct information on nl-in and nl-out

[01:41] <dalek> doc: 

[01:41] <dalek> doc: Related to #1111

[01:41] <dalek> doc: review: https://github.com/perl6/doc/commit/01d552c785

[01:41] <synopsebot6> Link: http://doc.perl6.org/type/IO

[01:42] <AlexDaniel> if someone can double-check this ↑ it would be great

[01:45] *** cdg joined
[01:47] *** BenGoldberg left
[01:54] <MasterDuke> IO::[Handle,ArgFiles,Socket::INET] all have a nl-in = ["\x0A", "\r\n"];

[01:54] <MasterDuke> so i'd say that's fine

[01:57] *** Gasher left
[02:02] *** cdg left
[02:03] *** cdg joined
[02:12] *** suri joined
[02:13] *** suri left
[02:15] *** cdg_ joined
[02:15] *** astj joined
[02:15] *** astj_ left
[02:18] *** cdg left
[02:18] *** skids joined
[02:21] *** itcharlie1 left
[02:21] *** shayan_ joined
[02:24] <AlexDaniel> we use “\n” for nl-out even on windows, right?

[02:26] <samcv> AlexDaniel, i believe that's the default. but I could be wrong.

[02:27] <MasterDuke> yep

[02:27] <samcv> i would hope that we did not alter functionality like that, could cause weird bugs to be hard to find

[02:27] <samcv> well not perl 6 bugs since \r\n is one grapheme

[02:27] <samcv> but people using the resulting files and such

[02:28] <AlexDaniel> I was surprised to know that we do not accept \r

[02:29] <samcv> m: use nqp; my @things = 'ā', 'z', 'ų', 'û'; @things.sort({$^a nqp::unicmp_s $^b}).say

[02:29] <camelia> rakudo-moar 996ab6: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3 = 'ā', 'z', 'ų', 'û'; @things.sort({$^a7⏏5 nqp::unicmp_s $^b}).say␤    expecting any of:␤        infix␤        infix stopper␤        statement end…»

[02:29] <AlexDaniel> u: >samcv

[02:29] <unicodable6> AlexDaniel, U+003E GREATER-THAN SIGN [Sm] (>)

[02:29] <unicodable6> AlexDaniel, U+0073 LATIN SMALL LETTER S [Ll] (s)

[02:29] <unicodable6> AlexDaniel, U+0061 LATIN SMALL LETTER A [Ll] (a)

[02:29] <unicodable6> AlexDaniel, https://gist.github.com/81263fa3346e9bd3875ac194fb8c5f87

[02:29] <AlexDaniel> ah ok

[02:29] <samcv> m: use nqp; my @things = 'ā', 'z', 'ų', 'û'; @things.sort({(nqp::unicmp_s($^a, $^b)}).say

[02:29] <camelia> rakudo-moar 996ab6: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in parenthesized expression; couldn't find final ')' ␤at <tmp>:1␤------> 3; @things.sort({(nqp::unicmp_s($^a, $^b)7⏏5}).say␤    expecting any of:␤        statement en…»

[02:30] <samcv> m: use nqp; my @things = 'ā', 'z', 'ų', 'û'; @things.sort( { ( nqp::unicmp_s($^a, $^b) )} ).say

[02:30] <camelia> rakudo-moar 996ab6: OUTPUT«===SORRY!===␤Arg count 2 doesn't equal required operand count 6 for op 'unicmp_s'␤»

[02:30] <samcv> m: use nqp; my @things = 'ā', 'z', 'ų', 'û'; @things.sort( { ( nqp::unicmp_s($^a, $^b,7,0,0) )} ).say

[02:30] <camelia> rakudo-moar 996ab6: OUTPUT«(ā û ų z)␤»

[02:30] <samcv> ok cool that works now properly

[02:30] <samcv> sweet

[02:31] <samcv> only thing i need to implement is decomposing codepoints that have no collation weights and adding their components' weights together. but it should work for all codepoints that are specified in the file, which is most use cases

[02:32] *** bwisti left
[02:32] <samcv> m: use nqp; my @things = 'ā', 'z', 'ų', 'û'; @things.sort.say

[02:32] <camelia> rakudo-moar 996ab6: OUTPUT«(z û ā ų)␤»

[02:32] <samcv> heh

[02:33] *** rpburkholder joined
[02:33] *** pyrimidine joined
[02:33] <samcv> nice they even specify the collation of 🐧

[02:34] <samcv> and emoji. that's kind of dope

[02:35] <AlexDaniel> .tell TimToady perhaps you can take a look at RT #130508 ?

[02:35] <yoleaux> AlexDaniel: I'll pass your message to TimToady.

[02:35] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130508

[02:35] *** kalkin- joined
[02:35] *** cyphase left
[02:36] <samcv> hehe say “2” ~~ / \2 /; Unrecognized backslash sequence (did you mean $1?)

[02:36] <samcv> cause 2 is close to 1 i guess lol

[02:36] <samcv> where is the code we use for heuristics on what the user may have meant?

[02:37] <samcv> that could benefit from unicmp_s for sure

[02:37] *** ChristopherBotto joined
[02:38] <geekosaur> samcv, actually that's a perl5 trap

[02:38] *** pyrimidine left
[02:38] <samcv> what?

[02:38] <geekosaur> $0 is perl5's \1, etc.

[02:38] <samcv> oh.

[02:38] <samcv> yeah ok that makes sense then

[02:38] *** ChristopherBotto left
[02:38] <geekosaur> (numbered backreferences)

[02:38] <samcv> yeah

[02:38] <samcv> also why is $0 the first one. wouldn't you think $0 is the whole match?

[02:39] <samcv> just curious. really not too much an issue doing it either way

[02:39] *** kalkin-_ left
[02:39] <geekosaur> $/ stringifies to the whole match. $0 is $/[0] which stringifies to the first backreference

[02:40] <samcv> ah ok that makes total sense then :)

[02:40] <samcv> i was figuring it was something similar to that

[02:40] <geekosaur> perl 5 was trying to be consistent with historical unix regex, which wasn't exactly consistent

[02:41] <geekosaur> (POSIX tried to make it consistent, that's what got us BRE vs. ERE among other things --- in fact every traditional Unix program implemented its own regex language slightly different from every other)

[02:42] <geekosaur> so perl6 is reinventing regex, and in the process trying to make the whole thing slightly less psychotic

[02:43] <samcv> yeah kind of depressing all the different posix regex things

[02:43] *** cyphase joined
[02:45] *** bwisti joined
[02:46] *** cdg_ left
[02:47] <timotimo> and a whole bunch more non-posixy regex things

[02:47] <timotimo> like python regex are rather different from pcre, vim regexes are a totally different beast somehow ...

[02:47] <geekosaur> regex should have been fired into the sun sometime before 1980

[02:48] <geekosaur> vim regexes, yes, expanded from original vi which was yet another of those traditional unix utilities with all its own regex different from every other regex language

[02:48] <timotimo> but i appreciate the idea of very magic mode and very nomagic mode

[02:48] <geekosaur> (so of course bsd and at&t then came up with standard regex libs --- neither of which matched the behavior of any theretofore existing regex, much less each other)

[02:49] *** curt_ left
[02:49] <geekosaur> (worse, at&t system 3 shipped with *two* regex libs, likewise not compatible with each other or any standard regex using program)

[02:50] <geekosaur> "psychotic" turns out to be an understatement >.>

[02:53] <AlexDaniel> isn't Python in the same state right now, kind of?

[02:53] <AlexDaniel> with 2 regex libs

[02:53] *** pyrimidine joined
[03:03] *** ChristopherBotto joined
[03:05] *** krakan_ left
[03:05] *** leah2 left
[03:05] *** dg left
[03:05] *** protium left
[03:05] *** KotH left
[03:05] *** avar left
[03:05] *** breinbaas left
[03:05] *** smash left
[03:05] *** rblackwe left
[03:05] *** tyil left
[03:05] *** ranguard left
[03:05] *** Bucciarati left
[03:05] *** sQuEE left
[03:05] *** robinsmidsrod left
[03:05] *** damnlie_ left
[03:05] *** integral left
[03:05] *** d^_^b left
[03:05] *** Peter_R left
[03:05] *** jcallen left
[03:05] *** gabiruh left
[03:05] *** breinbaa1 joined
[03:05] *** smash_ joined
[03:05] *** integral_ joined
[03:05] *** rblackwe_ joined
[03:05] *** KotH joined
[03:05] *** Bucciarati joined
[03:05] *** ranguard_ joined
[03:05] *** b^_^d joined
[03:05] *** avarab joined
[03:05] *** avarab left
[03:05] *** avarab joined
[03:05] *** damnlie joined
[03:05] *** tyil joined
[03:05] *** krakan joined
[03:05] *** gabiruh joined
[03:05] *** robins joined
[03:05] <ChristopherBotto> I don't suppose there is anything in Perl 6 yet that will take individual keystrokes as input?

[03:05] *** Peter_R joined
[03:06] *** jcallen joined
[03:06] *** sQuEE joined
[03:06] <ChristopherBotto> Like Term::ReadKey in Perl 5 (in "cbreak" mode, I believe)

[03:07] *** dg joined
[03:07] *** aborazmeh left
[03:07] *** leah2 joined
[03:08] *** rpburkholder left
[03:08] *** labster left
[03:09] *** protium joined
[03:10] <timotimo> there is

[03:10] <timotimo> use Term::termios for that

[03:11] <ChristopherBotto> @timotimo Thanks so much!

[03:11] *** noganex_ joined
[03:11] <AlexDaniel> cool, was just about to submit a ticket and noticed it is already fixed: https://github.com/rakudo/rakudo/commit/d810d44bdbc7933b0c0ae8447e22c121e036abd3

[03:13] *** noganex left
[03:17] <AlexDaniel> .tell TimToady also, what should be the output of ｢say ({ 42 } while $++ < 3)｣? should it be (42 42 42) (like on 2015.12) or three code blocks (like everywhere after 386905f6f6)?

[03:17] <yoleaux> AlexDaniel: I'll pass your message to TimToady.

[03:20] *** xtreak joined
[03:26] *** cibs left
[03:28] *** cibs joined
[03:32] <skids> m: ({42} while $++ < 3).perl.say; (for 1,2,3 {42}).perl.say

[03:32] <camelia> rakudo-moar 996ab6: OUTPUT«(-> ;; $_? is raw { #`(Block|65294272) ... }, -> ;; $_? is raw { #`(Block|65294344) ... }, -> ;; $_? is raw { #`(Block|65294416) ... }).Seq␤(42, 42, 42)␤»

[03:33] <skids> m: ({42} while $++ < 3)().perl.say; (for 1,2,3 {42}).perl.say

[03:33] <camelia> rakudo-moar 996ab6: OUTPUT«No such method 'CALL-ME' for invocant of type 'Seq'␤  in block <unit> at <tmp> line 1␤␤»

[03:33] <skids> oh.

[03:37] <skids> m: ({42} if 1).perl.say; 

[03:37] <camelia> rakudo-moar 996ab6: OUTPUT«42␤»

[03:42] <AlexDaniel> bhahahahaha

[03:42] <AlexDaniel> m: my @c[2;2] .= new(:shape(2, 2), [1, "a"], [2, "b"]); .say for @c, @c.flat

[03:42] <camelia> rakudo-moar 996ab6: OUTPUT«Cannot assign an array of shape 2 2 to an array of shape 2 2␤  in block <unit> at <tmp> line 1␤␤»

[03:42] <AlexDaniel> b: my @c[2;2] .= new(:shape(2, 2), [1, "a"], [2, "b"]); .say for @c, @c.flat

[03:42] <bisectable6> AlexDaniel, Bisecting by exit code (old=2015.12 new=996ab6a). Old exit code: 0

[03:42] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/8b8d97efff1f0b0a2a02401c359b3a91

[03:42] <bisectable6> AlexDaniel, (2016-11-03) https://github.com/rakudo/rakudo/commit/1293188342fdb66aa6cd00668d988a710a36f489

[03:42] *** labster joined
[03:43] <AlexDaniel> c: 1293188342^,1293188342 my @c[2;2] .= new(:shape(2, 2), [1, "a"], [2, "b"]); .say for @c, @c.flat

[03:43] <committable6> AlexDaniel, ¦«1293188342^»: [[1 a] [2 b]]␤(1 a 2 b)␤¦«1293188»: Assignment to array with shape 2 2 must provide structured data␤  in block <unit> at /tmp/WE8vNpB9Zq line 1␤ «exit code = 1»

[04:05] *** dugword joined
[04:14] <AlexDaniel> m: use Test; say GLOBAL::Test::EXPORT::DEFAULT::.keys

[04:14] <camelia> rakudo-moar 996ab6: OUTPUT«()␤»

[04:14] <AlexDaniel> what's the current equivalent for that?

[04:15] <AlexDaniel> (“broken” after http://rakudo.org/2016/12/17/lexical-module-loading/ )

[04:15] <AlexDaniel> c: 2016.11 use Test; say GLOBAL::Test::EXPORT::DEFAULT::.keys

[04:15] <committable6> AlexDaniel, https://gist.github.com/edbfe116f0944a3a14e10e44f23cbdf9

[04:17] *** astj left
[04:18] *** astj joined
[04:22] *** astj left
[04:25] *** astj joined
[04:32] *** MasterDuke joined
[04:36] *** jraglin joined
[04:42] *** troys is now known as troys_

[04:43] <dalek> doc: 9d3992d | skids++ | doc/Language/control.pod6:

[04:43] <dalek> doc: Provide examples of the front-loaded repeat statement form.

[04:43] <dalek> doc: review: https://github.com/perl6/doc/commit/9d3992dcb6

[04:43] <synopsebot6> Link: http://doc.perl6.org/language/control

[04:43] *** jraglin left
[04:43] *** troys_ is now known as troys

[04:44] *** jraglin joined
[04:44] *** jraglin left
[04:46] *** jraglin joined
[04:46] *** jraglin left
[04:46] *** jraglin joined
[04:47] *** jraglin left
[04:49] *** jraglin joined
[04:51] *** jraglin left
[04:52] *** jraglin joined
[04:53] <AlexDaniel> https://github.com/rakudo/rakudo/commit/aaf5c26b5f67e5581c3d6b35e3ab0bee25559b40

[04:53] <AlexDaniel> ah, nevermind

[04:53] <AlexDaniel> ye, nevermind

[05:06] *** aborazmeh joined
[05:06] *** aborazmeh left
[05:06] *** aborazmeh joined
[05:11] *** aborazmeh left
[05:11] *** cpage_ left
[05:13] *** khw left
[05:17] <dalek> doc: 86973aa | skids++ | doc/Language/control.pod6:

[05:17] <dalek> doc: Provide examples that demonstrate repeat statement always runs once

[05:17] <dalek> doc: review: https://github.com/perl6/doc/commit/86973aaf3f

[05:17] <synopsebot6> Link: http://doc.perl6.org/language/control

[05:21] *** ChristopherBotto left
[05:25] *** geekosaur left
[05:26] *** telex left
[05:27] *** geekosaur joined
[05:28] *** telex joined
[05:34] *** bwisti left
[05:40] *** ChoHag joined
[05:45] *** ChoHag left
[05:48] *** ChoHag joined
[05:50] *** cpage_ joined
[05:50] *** Cabanossi left
[05:53] *** Cabanossi joined
[05:56] *** khw joined
[05:57] <AlexDaniel> ok I'm done for today

[05:57] <AlexDaniel> ⅓

[05:58] <AlexDaniel> 1084 → 1009

[05:58] <AlexDaniel> :| in other words, didn't really do much

[06:04] *** AlexDaniel left
[06:11] *** troys is now known as troys_

[06:14] *** labster left
[06:20] *** pyrimidine left
[06:25] *** andrewalker left
[06:25] *** bjz joined
[06:27] *** domidumont joined
[06:29] *** skids left
[06:32] *** domidumont left
[06:33] *** domidumont joined
[06:38] *** domidumont left
[06:38] *** bjz left
[06:46] *** shayan_ left
[06:46] *** shayan_ joined
[06:46] <dalek> specs: fb4024c | (Steve Mynott)++ | html/index.html:

[06:46] <dalek> specs: Synopses no longer primary

[06:46] <dalek> specs: review: https://github.com/perl6/specs/commit/fb4024c460

[06:46] *** shayan_ left
[06:51] *** labster joined
[06:51] *** RabidGravy joined
[06:54] *** domidumont joined
[06:58] *** troys_ left
[07:01] *** breinbaa1 left
[07:02] *** kyan left
[07:03] *** breinbaas joined
[07:03] *** holli left
[07:05] *** domidumont left
[07:09] *** ufobat joined
[07:11] *** bjz joined
[07:12] *** domidumont joined
[07:12] *** darutoko joined
[07:13] *** CIAvash joined
[07:18] <RabidGravy> boom!

[07:22] *** robins is now known as robinsmidsrod

[07:25] *** dugword left
[07:42] *** mr-foobar left
[07:43] *** mr-foobar joined
[07:47] *** xtreak left
[07:49] *** wamba joined
[07:49] *** AndroUser joined
[07:50] *** xtreak joined
[07:52] *** AndroUser left
[07:54] *** AndroUser joined
[08:05] *** AndroUser left
[08:05] <samcv> interesting there's a 4k fireplace on netflix. "The first of its kind in UHD 4k, with the clearest picture available, a real fireplace cracks and sparkles giving warmth to your home"

[08:05] <samcv> 4.5 stars

[08:05] *** thayne joined
[08:06] <samcv> haha. if it was amazon i could image the reviews, "is in 4k. it's a fireplace." like idk you can't really improve it

[08:06] <samcv> it's just a fireplace

[08:21] *** zakharyas joined
[08:31] *** masak_ is now known as masak

[08:32] *** brrt joined
[08:44] *** wamba left
[08:49] *** jonas2 joined
[08:55] *** araujo joined
[08:55] *** araujo left
[08:55] *** araujo joined
[08:56] * lizmat wonders how NetFlix supplies the heat with an LCD screen

[08:58] <masak> lambda calculus gist, now with an exposition on product types and sum types: https://gist.github.com/masak/8e082999e06bfb4d03b8d12899bbcde5

[08:59] *** andrewalker joined
[08:59] *** astj left
[08:59] *** astj joined
[09:02] *** Celelibi left
[09:03] *** xtreak left
[09:03] *** xtreak joined
[09:06] *** Celelibi joined
[09:07] <arnsholt> masak: In your Smalltalk conditional, you could lift the return operator to before the conditional (which I think is the idiomatic style)

[09:08] <arnsholt> But perhaps clearer to non-Smalltalkers to keep it in each of the branches

[09:26] *** xtreak left
[09:35] *** wamba joined
[09:45] *** bjz left
[10:04] *** xtreak joined
[10:04] *** pmurias joined
[10:05] <masak> arnsholt: I'll just kill that darling and remove the return operator. it doesn't add to the example

[10:07] <masak> or maybe there is an easy `printLn` or `console.log` primitive I can use instead?

[10:08] <arnsholt> Transcript show:

[10:08] <masak> that's an object Transcript with a message `show:` ?

[10:09] <arnsholt> Pretty much

[10:10] <arnsholt> It's a global variable, which gives you the transcript window (which is essentially Smalltalk's stdout)

[10:10] <masak> oh! do I take from what you said above that blocks don't bind return? (similar to blocks in Perl 6)

[10:10] <arnsholt> Yup!

[10:10] <masak> sweet

[10:11] <arnsholt> ^ returns from the *method you're in*, not the closure

[10:11] <masak> is there something corresponding to `leave`? :)

[10:11] <arnsholt> As in, "leave this closure now"?

[10:11] <masak> (for when you want to return -- possibly a value -- from the closure but not the method)

[10:12] <arnsholt> Not beyond the fact that the value of the last statement in the closure is the value of the closure

[10:12] <arnsholt> So "[ 1 ] value" is 1

[10:12] <masak> ok

[10:12] <masak> I struggle with this bit somewhat in 007

[10:12] <masak> it's a balance, of the form "pick your poison"

[10:12] <arnsholt> And "[ aBoolean ifTrue: [ 1 ] ifFalse: [ 2 ]]" would be 1 or 2, depending on aBoolean

[10:12] <masak> I started out with having both functions and blocks in 007

[10:13] <arnsholt> (And "[ aBoolean ifTrue: [ 1 ]] value" would be 1 or nil)

[10:13] <masak> but it turns out that if you -- as I did -- prefer not to have a `leave` and decide that blocks always return None, then blocks are practically useless and a bit too tempting to use in higher-order functions like .map etc

[10:14] <masak> so nowadays 007 has function expressions instead, much like JavaScript

[10:14] <masak> and so if you have the need "return early from a block", then the solution is an IIFE. happens in macros quite a bit

[10:14] <masak> I guess I could implement `leave` sugar as a macro... hm :)

[10:14] <arnsholt> IIFE?

[10:15] <masak> "immediately invoked function expression"

[10:15] <masak> a clunky acronym for a common thing in JS

[10:15] <arnsholt> Ah, right

[10:15] <masak> (function () { })()

[10:15] <masak> (plus silly disagreement about where the second-last `)` should go. silly JS people.) :P

[10:17] <masak> arnsholt: if I said "the distinction between statements and expressions is an illusion, and an artificial barrier in many languages that ought to go away" -- would you agree?

[10:17] <masak> (it's a stance. I personally don't agree, but I know many people who do.)

[10:19] <jast> I'd say there are advantages to having many things be expressions

[10:19] <jast> makes for more expressivenes. haw haw.

[10:19] <masak> :)

[10:19] <masak> ok, I don't disagree with that, as far as that goes

[10:19] <pmurias> masak: there is a do {} proposal in the works for ecmascript :)

[10:19] <masak> pmurias: yeah, I've seen that

[10:20] <masak> another argument is that the statement/expression distinction artificially creates duplicate syntaxes for essentially the same idea

[10:20] <masak> e.g. function statements vs function expressions

[10:20] <masak> or `if` vs `?? !!`

[10:22] <masak> for me in 007 the statement/expression barrier reared its head when I started thinking about macro expansion

[10:22] <jast> I recall some kind of language that had a default construct for eating an expression's value, so you could explicitly turn an expression into a statement. that language *required* using the construct in statement contexts, it might be useful to simply use it as indicated

[10:23] <masak> because the macro *user* very much expects to have the cake and eat it (or, equivalently, to ignore the barrier when they feel like it):

[10:24] <masak> a macro call `moo()` could expand to a statement, or a statement list, *or* it could just return a value that gets used in a bigger expression

[10:24] *** Tonik joined
[10:25] <jast> that's a decent argument for having expression context everywhere

[10:27] <ufobat> hey guys, let me ask a question about signatures, assuming there is a Role R and Classes A..D implementing R. when have a multi methods for (A, R), (R, A), (R, R), and (A, A) does this work, because there are 2 matching sigatures (but maybe one is matching better)  or should i write (R where {not $_ ~~ A}, R) and so on?

[10:27] <jast> a macro that changes its behaviour depending on the context in which it's used would probably be somewhat nasty

[10:27] <masak> jast: I'm still very reluctant to eradicate the distinction. I don't like the idea of `functionCall(if condition { })` and similar

[10:28] <masak> jast: but I've found a way to keep the barrier and still make macros work

[10:28] <jast> what about that idea do you dislike/

[10:28] <masak> jast: that's a good question. it's mostly a visceral dislike.

[10:29] <masak> I think if I were to rationalize it, I feel like an important distinction is lost

[10:29] <jast> something worth thinking about a little, perhaps

[10:29] <masak> it's not so much about "changing behavior depending on context", actually

[10:29] <DrForr> ?? .. !! should have a separate "interfix" or some type, not 'infix' - I just had to fix those parser cases in Perl6::Parser.

[10:29] <jast> that "important distinction" smacks of begging the question

[10:29] <masak> DrForr: heh

[10:30] <masak> DrForr: it's an infix with custom parsin

[10:30] <masak> jast: yes, I acknowledge that

[10:30] <DrForr> Very custom, yes. I just did the workaround.

[10:30] *** TEttinger left
[10:30] <masak> DrForr: see https://github.com/masak/007/issues/163

[10:31] <masak> (which is also an example of a `quasi` block that needs to "return"/leave a value)

[10:31] <jast> masak: as the devil's advocate I have to say this might be a Python-style "only one way to do it" prescription :}

[10:32] <masak> jast: I hear ya

[10:32] <jast> but anyway, what's your idea for the alternative?

[10:32] <jast> because when I thought about statement vs. expression context, my very next idea was that this was basically asking for a 'wantexpr' check to be used in macros

[10:32] <masak> jast: though in my defense, 007 takes a slightly more Pythonish "I know what's best for you" stance there than Perl

[10:32] <masak> you get what you pay for ;)

[10:33] <masak> jast: my alternative is nothing like `wantexpr` (*shudder*)

[10:33] <pmurias> lizmat: it seems to be tmpdir is doing a bunch of things at once. Turning a string into an absolute path. Doing file tests on it. Setting $*TMPDIR.

[10:33] <jast> hey, I'll have you know I pay ten times what everyone else is paying

[10:33] <jast> yeah, I didn't think so :)

[10:33] <masak> jast: simply put, the macro expands into an invisible block, which may return/leave a value

[10:33] <jast> everybody loves wantarray, right? right?

[10:34] <masak> jast: explained clearly here: https://github.com/masak/007/issues/7#issuecomment-69327526

[10:34] <DrForr> The grammar interprets ??..!! as the actual operator token; I ended up matching for \s*\?\?, pulling the string between the two list entries out, then parsing that apart. I have to do that in several places.

[10:35] <jast> masak: I see. my first thought with that is that it could be interesting to expose that kind of block as syntax for people to use outside of macros, but I can see that getting confusing if there are two types of blocks competing for attention

[10:36] <pmurias> lizmat: having the user do something like temp $*TMPDIR = not-sure-what-should-be-here($path) or my $*TMPDIR = not-sure-what-should-be-here($path) would give them better control over how the change the $*TMPDIR

[10:36] <DrForr> Not criticizing; I can see how it makes things easier for a single "in"fix operator in the expression context.

[10:37] <jast> masak: the downside to me is the behaviour of macros stops being consistent with how other blocks/bodies behave, which I guess is fine but irks me as a design choice :)

[10:38] <DrForr> I'll read the note in more depth later because I am interested, but I have .. well, work :)

[10:38] <jast> you can see that were I writing my own language, it would probably be extremely expression-centric

[10:39] <DrForr> jast: It's what goes through the most rewriting when translating BNF -> PEG.

[10:39] <DrForr> At least in my experience.

[10:40] <jast> I don't use BNF if I can avoid it

[10:40] <pmurias> lizmat: the .chdir method currently used by tmpdir seems to be a random accident so it shouldn't be exposed to the user

[10:41] *** smash_ is now known as smash

[10:41] <masak> jast: yes -- it's a tradeoff, for sure

[10:42] <masak> maybe I should try developing a small language with no statement/expression barrier, just to see how it feels ;)

[10:42] <jast> masak: actually, couldn't you let the macro author use another return inside the returned block?

[10:42] <masak> one of the reasons I want to keep the distinction in 007 between statements and expressions is that *all three* of its predecessors (Perl 6, Python, JavaScript) do have the distinction

[10:43] <jast> which gives them full control and eliminates difficulties related to figuring out which statement is the last

[10:43] <masak> jast: I could

[10:43] <masak> jast: but it goes against the grain of the design; only function bind `return`, not blocks

[10:43] <masak> a quasi block is most certainly not a function

[10:43] <jast> so use a different keyword ;)

[10:43] <jast> emit, yield, whatever

[10:44] <masak> 007 takes a cue from Python and only does explicit returns

[10:44] <jast> except in quasi blocks...

[10:44] <masak> if you do `7;` as your last statement in a function, it still returns `None`

[10:44] <masak> yes, except in quasi blocks

[10:44] <masak> where the return is implicit

[10:45] <masak> well, not really a `return`, but you see what I mean

[10:45] <jast> yeah

[10:45] <masak> the value being passed back "out" is implicitly given back

[10:45] <masak> in a way it's inconsistent, but it's also very straightforward/convenient

[10:45] <jast> kind of seems to go against the spirit of the whole thing

[10:45] *** effbiai joined
[10:45] *** effbiai left
[10:45] *** effbiai joined
[10:45] <masak> I guess part of it is that I don't want to have too many moving parts: macro/quasi/emit

[10:46] <jast> convenient it is, I guess

[10:46] <masak> but also, I think this is how people think about macro expansion, that it "just works" without having to emit the value back

[10:46] <masak> `macro moo() { return quasi { 7 } }`

[10:46] <masak> then `moo()` expands to `7`

[10:47] <DrForr> masak: Careful, you might end up reinventing Scheme/Lisp :)

[10:47] <masak> your warning comes much too late

[10:47] <masak> I'm trying to learn from both Scheme and the other Lisps, though

[10:48] <DrForr> Indeed; I'm somewhat distracted here listening to Trace Bundy doing some impressive work with hammer-ons.

[10:49] *** CIAvash left
[10:56] *** Tonik left
[11:00] *** bjz joined
[11:01] <dalek> doc: 69d8444 | ronaldxs++ | doc/Language/about.pod6:

[11:01] <dalek> doc: Update about.pod6 - fix broken CONTRIBUTING link

[11:01] <dalek> doc: review: https://github.com/perl6/doc/commit/69d8444d85

[11:01] <dalek> doc: 962ceff | Altai-man++ | doc/Language/about.pod6:

[11:01] <dalek> doc: Merge pull request #1116 from perl6/ronaldxs-fix-contributing-link

[11:01] <synopsebot6> Link: http://doc.perl6.org/language/about

[11:01] <synopsebot6> Link: http://doc.perl6.org/language/about

[11:01] <dalek> doc: 

[11:01] <dalek> doc: Update about.pod6 - fix broken CONTRIBUTING link

[11:01] <dalek> doc: review: https://github.com/perl6/doc/commit/962ceff955

[11:03] *** xtreak left
[11:06] *** xtreak joined
[11:11] *** bjz left
[11:17] <notviki> bdfoy says there are conficting messages about the specs? https://github.com/perl6/doc/issues/1111#issuecomment-270537051

[11:18] <notviki> Commented to a similar effect on the RT: https://rt.perl.org/Ticket/Display.html?id=130460#txn-1442451

[11:18] <notviki> What other messages do we tell him?

[11:18] *** bjz joined
[11:21] *** raschip joined
[11:25] *** xtreak left
[11:33] <notviki> There's one point of confusion we have and that's thing tested in master but not in 6.c-errata. parse-base() for example isn't part of Perl 6.c and since it'll still need review before being included in 6.d, it's not part of any language version. Yet it's still documented and "tested in roast".

[11:39] *** curt_ joined
[11:43] <notviki> I've just murdered my computer with a box of fruitloops!

[11:49] * masak .oO( ...in the study, with a box of fruit loops... )

[11:50] * jast .oO( with a cluebat... )

[11:50] <masak> that's pretty extreme, to get *offed* by a cluebat

[11:50] * masak .oO( The Last Clue )

[11:50] <jast> it can happen, though

[11:51] <masak> sure. curiosity did kill the cat, after all.

[11:55] *** domidumont left
[11:55] *** azertus left
[11:55] *** tailgate left
[11:55] *** Guest57693 left
[11:55] *** ttkp6 left
[11:55] *** cognominal left
[11:55] *** hahainternet left
[11:55] *** john51 left
[11:55] *** matt_ left
[11:55] *** jdv79 left
[11:55] *** [ptc] left
[11:55] *** zb left
[11:55] *** jdv79_ joined
[11:55] *** tinita_ joined
[11:55] *** sjn joined
[11:55] *** ccntrq joined
[11:55] *** zb joined
[11:55] *** obfusk joined
[11:55] *** azertus joined
[11:55] *** hahainternet joined
[11:56] *** tailgate joined
[11:56] *** john51 joined
[11:56] *** mls joined
[11:56] *** cognominal joined
[11:56] *** matt_ joined
[11:56] *** [ptc] joined
[11:56] *** matt_ is now known as Guest4235

[11:57] *** giraffe joined
[11:57] *** giraffe is now known as Guest73411

[12:05] <wamba> m: my $a="A".Numeric; .say given $a;say "END"

[12:05] <camelia> rakudo-moar d77f9b: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5A' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[12:05] <wamba> m: my $a="A".Numeric; {} without $a;.say given $a;say "END"

[12:05] <camelia> rakudo-moar d77f9b: OUTPUT«(HANDLED) Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5A' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤END␤»

[12:09] <wamba> What "without" made with $a, that failure did not be thrown?

[12:10] <moritz> wamba: it checked .defined, and that marks the failure as handled

[12:10] <wamba> m: my $a="A".Numeric; $a.defined;.say given $a;say "END"

[12:10] <camelia> rakudo-moar d77f9b: OUTPUT«(HANDLED) Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5A' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤END␤»

[12:11] <wamba> moritz: thank you

[12:11] <moritz> wamba: you're welcome

[12:11] <DrForr> More nicks I don't recognize, yay!

[12:11] *** newbie1 joined
[12:16] *** labster left
[12:18] <samcv> u: { .uniprop-int('Grapheme_Cluster_Break') and .uniprop('Combining_Character_Class') == 0 }

[12:18] <unicodable6> samcv, U+0000 NULL [Cc] (control character)

[12:18] <unicodable6> samcv, U+0001 START OF HEADING [Cc] (control character)

[12:18] <unicodable6> samcv, U+0002 START OF TEXT [Cc] (control character)

[12:23] *** cibs left
[12:25] *** cibs joined
[12:26] *** John[Lisbeth] joined
[12:30] *** bjz_ joined
[12:30] *** rindolf joined
[12:31] *** rumble joined
[12:31] *** bjz left
[12:31] *** grumble left
[12:31] *** rumble is now known as grumble

[12:32] *** wamba left
[12:38] *** jraglin left
[12:38] *** jraglin joined
[13:05] *** dj_goku left
[13:05] *** dj_goku joined
[13:05] *** dj_goku left
[13:05] *** dj_goku joined
[13:09] *** darutoko left
[13:10] *** dj_goku left
[13:11] *** ramillies joined
[13:12] *** grumble left
[13:13] *** grumble joined
[13:15] *** rindolf left
[13:16] <notviki> What do kids use these day for web stuff?

[13:16] <masak> you mean like WebStorm?

[13:16] <moritz> nodejs

[13:16] <masak> oh, def nodejs

[13:16] <masak> and npm

[13:16] <notviki> Heh, I mean in perl 6 :) I need a single-user web app.

[13:18] <masak> last time I did web stuff, I used HTTP::Server::Tiny -- https://github.com/masak/nex/blob/master/app.pl

[13:18] <moritz> notviki: HTTP::Server::Simple, or possibly Bailador

[13:18] * notviki gives it a spin

[13:18] <masak> switched to it from Bailador because HTTP::Server::Tiny had a very good story for SSE

[13:18] <ufobat> :D

[13:19] <masak> unfortunately, I think I hit some Rakudo instabilities back then (March)

[13:19] <masak> might give it a spin again and see if it's more stable now

[13:19] <masak> I've seen some improvements and fixes roll in

[13:19] <brrt> (SSE?)

[13:19] <masak> server-sent events

[13:19] *** avarab is now known as avar

[13:19] <masak> more lightweight than websockets. unidirectional

[13:19] <ufobat> bailador is slow and not serving requests parallel, but I dont think i could change close future

[13:20] <brrt> oh, i see, i know of them

[13:20] <masak> (since the other direction is already handled by REST)

[13:20] <masak> er, by AJAX, I mean

[13:21] *** lukaramu joined
[13:23] <notviki> eh... HTTP::Server::Tiny just gives me "Tried to get the result of a broken Promise"

[13:23] <notviki> with the SYNOPSIS code

[13:24] * masak .oO( the SYNOPSIS is full of broken promises! :'-( )

[13:24] <notviki> oh, I have something listening on 8080... nevermind :)

[13:25] <masak> notviki: sounds like it still deserves a little github issue...

[13:27] <notviki> masak: https://github.com/tokuhirom/p6-HTTP-Server-Tiny/issues/40

[13:27] <masak> notviki++

[13:31] *** ufobat left
[13:34] <notviki> and now it works when I access it locally, but seems to ignore connections from other boxes on the network :/

[13:36] <notviki> and a mojo app works on the same port...

[13:37] <arnsholt> Maybe it's bound to 127.0.0.1 rather than 0.0.0.0?

[13:37] * masak .oO( still not the year of Perl 6 on the desktop... )

[13:37] <notviki> yey, that helped. arnsholt++

[13:37] <masak> woot

[13:37] <masak> is that another thing the HTTP::Server::Tiny project could do something about? :)

[13:38] <jast> 127.0.0.1 is a reasonable default, often these kinds of services are hidden behind a reverse proxy

[13:39] <jast> not to say 0.0.0.0 would be less reasonable

[13:41] <notviki> .oO( now if only it self-restarted when I made a change to it.... )

[13:41] <notviki> buggable: eco Bailador restart

[13:41] <buggable> notviki, Nothing found

[13:41] <notviki> buggable: eco Bailador::

[13:41] <buggable> notviki, Found 4 results: Bailador::Dev::AutoRestarter, Bailador::Plugin::Static, Bailador::Plugin::AssetPack::SASS, Bailador::Template::Mojo::Extended. See http://modules.perl6.org/#q=Bailador%3A%3A

[13:43] *** damnlie left
[13:43] *** damnlie joined
[13:49] <notviki> heh awesome. Bailador::Dev::AutoRestarter works as a HTTP::Server::Tiny restarter with zero changes :)

[13:53] *** pyrimidine joined
[13:54] <masak> :)

[13:54] <dalek> doc: 9d98a02 | gfldex++ | Makefile:

[13:54] <dalek> doc: move htmlify to its own rule

[13:54] <dalek> doc: review: https://github.com/perl6/doc/commit/9d98a021fa

[13:54] <masak> the README for that module should brag about that ;)

[14:00] *** bjz_ left
[14:01] <dalek> doc: 8974606 | titsuki++ | doc/Language/nativecall.pod6:

[14:01] <dalek> doc: Fix the example of "Basic use of Pointers" so that it doesn't store attributes

[14:01] <dalek> doc: review: https://github.com/perl6/doc/commit/897460632e

[14:01] <dalek> doc: 8d99295 | titsuki++ | doc/Language/nativecall.pod6:

[14:01] <dalek> doc: Merge pull request #1119 from titsuki/fix-cpointer

[14:01] <dalek> doc: 

[14:01] <dalek> doc: Fix the example of "Basic use of Pointers" so that it doesn't store a…

[14:01] <synopsebot6> Link: http://doc.perl6.org/language/nativecall

[14:01] <synopsebot6> Link: http://doc.perl6.org/language/nativecall

[14:01] <dalek> doc: review: https://github.com/perl6/doc/commit/8d99295a4a

[14:02] *** mcmillhj joined
[14:05] <gfldex> JSON::Fast:ver('0.7') is failing for me on current rakudo. May be a regression due to utf-8 work. Can somebody check please?

[14:08] <gfldex> notviki: didn't you run regression tests against modules automatically?

[14:10] <raschip> gfldex: I asked the same question some days ago. The answer is that they used to run "smoketests" but stopped.

[14:10] <notviki> gfldex: never

[14:11] <gfldex> you don't got a bot for that‽ o.O

[14:12] <notviki> never had

[14:13] *** ranguard_ is now known as ranguard

[14:20] *** dj_goku joined
[14:20] *** dj_goku left
[14:20] *** dj_goku joined
[14:20] <raschip> gfldex: maybe this is what you're looking for: http://testers.perl6.org/dist/J/JSON::Fast/%3Cunknown%3E.html ?

[14:21] <[Coke]> I want to add a big ole "how to report an issue" page on perl6.org somewhere. Anyone object to a new top level "Issues" tab? better names welcome?

[14:22] *** fluca1978 joined
[14:22] <jast> there are awfully many tabs already...

[14:22] <notviki> seems there's a crapton of tabs already there

[14:23] <notviki> Do people really care that much about the "design" that it deserves a tab in primary nav?

[14:24] * notviki would nix Design, Compiler, Fun, and Whatever....

[14:25] <jast> some general refactoring might make sense. in the meantime, the question is where people expect a "issues" link

[14:25] *** astj_ joined
[14:26] <dalek> doc: f68581b | coke++ | xt/code.pws:

[14:26] <dalek> doc: learn new code snippet

[14:26] <dalek> doc: review: https://github.com/perl6/doc/commit/f68581b480

[14:26] <notviki> I'd call that "Report a problem" instead.

[14:26] <jast> I often see that kind of thing in a "Development" category, or maybe "Community"

[14:27] *** astj left
[14:29] *** cibs left
[14:31] *** cibs joined
[14:31] <[Coke]> notviki: that heading is too big for top nav, I think.

[14:31] <gfldex> raschip: thanks

[14:31] <raschip> gfldex: np

[14:32] <raschip> say :(Int $a).perl

[14:32] <raschip> m: say :(Int $a).perl

[14:32] <camelia> rakudo-moar a7d106: OUTPUT«:(Int $a)␤»

[14:33] <raschip> dd :(Int $a)

[14:33] <raschip> m: dd :(Int $a)

[14:33] <camelia> rakudo-moar a7d106: OUTPUT«:(Int $a)␤»

[14:35] *** travis-ci joined
[14:35] <travis-ci> Doc build failed. Will "Coke" Coleda 'learn new code snippet'

[14:35] <travis-ci> https://travis-ci.org/perl6/doc/builds/189197667 https://github.com/perl6/doc/compare/8d99295a4a58...f68581b48013

[14:35] *** travis-ci left
[14:36] <notviki> # Failed test 'load module Pod::To::BigPage'

[14:36] <gfldex> [Coke]: i would put it under community and call a bug report a bug report bug. I don't like euphemisms in general.

[14:38] <gfldex> notviki: i will investigate and we may want to change panda to zef in .travis.yml .

[14:38] *** cibs left
[14:39] <[Coke]> gfldex: they're not all bug reports.

[14:39] *** cibs joined
[14:39] *** Khisanth left
[14:40] <gfldex> notviki: Pod::To::BigPage installs fine with zef .

[14:41] <gfldex> did we switch from panda to zef for * already?

[14:42] <pmurias> what's the policy for the 6.c.errata branch?

[14:42] <notviki> pmurias: policy about what?

[14:42] <notviki> gfldex: in next release (though I gather panda will still be availalble and will warn on use): http://blogs.perl.org/users/steve_mynott/2017/01/rakudo-star-past-present-and-future.html

[14:43] <gfldex> the docs build fine (just checked)

[14:43] <pmurias> notviki: what's supposed to go there? only fixes to errors in tests?

[14:44] <[Coke]> basically. and even then, please get some agreement before changing it.

[14:45] *** skids joined
[14:46] <notviki> pmurias: it's immutable with the exception of wrong tests or tests that accidentally lock in the behaviour they're not meant to be testing (e.g. a test that checks a backtrace is printed but it does so by looking for a specific filename that later changes). And in that case generally we seek some agreement from devs or the pumking

[14:47] <notviki> before making the change

[14:47] *** nicq20 joined
[14:48] <dalek> doc: 6020ec9 | gfldex++ | .travis.yml:

[14:48] <dalek> doc: switch from panda to zef

[14:48] <dalek> doc: review: https://github.com/perl6/doc/commit/6020ec9a4d

[14:49] *** bwisti joined
[14:50] * notviki wonders if female pumkin holders are pumqueens...

[14:51] <notviki> Or is it pumpking? The king of pumps!

[14:51] <notviki> heh http://terraria.gamepedia.com/Pumpking

[14:52] <SmokeMachine> I saw somewhere tha mojolicious was coming to perl6 with a different name. Is that real? Where can I find it?

[14:52] <[Coke]> SmokeMachine: not real

[14:52] <SmokeMachine> :(

[14:52] <DrForr> But you can checkout Bailador while you're waiting :)

[14:52] <DrForr> *check out

[14:52] *** Khisanth joined
[14:52] <notviki> heh

[14:53] <raschip> He can git checkout too.

[14:53] <nicq20> Is it possible to have the '==>' or '<==' operator place the previous result in a specific spot other than the last position?

[14:54] <notviki> SmokeMachine: from the events I saw, it's the opposite: the lead dev of mojolicious not only isn't going to make a Perl 6 version but would also have beef if someone made one and named it "Mojolicious" 

[14:54] <SmokeMachine> :(

[14:55] <raschip> He is squatting the namespace.

[14:55] <SmokeMachine> DrForr: I've read Bailador! I'm liking it!

[14:55] <pmurias> notviki: it's a hard question, in the real world sometimes there is a significant distinction between being a "female king" and a "queen"

[14:56] <raschip> Let the gal decide when it's time.

[14:56] <notviki> never even heard of female kings....

[14:58] <DrForr> Well, there are female vikings.

[14:58] <notviki> raschip: meaning there never were female pumpkin holders yet?

[14:58] <raschip> No, meaning each one choses her own title.

[14:58] <SmokeMachine> Another question: start can receive a scheduler as param... would it be possible to write a custom scheduler to run that promise on another machine?

[14:58] <perlpilot> nicq20: you mean have something like 1,2,3 ==> @a[5..*] work? (i.e. @a[5] =1; @a[6] = 2; @a[7] = 3; while leaving the rest of @a alone)

[14:58] *** travis-ci joined
[14:58] <travis-ci> Doc build errored. Wenzel P. P. Peppmeyer 'switch from panda to zef'

[14:58] <travis-ci> https://travis-ci.org/perl6/doc/builds/189205540 https://github.com/perl6/doc/compare/f68581b48013...6020ec9a4db2

[14:58] *** travis-ci left
[15:00] <notviki> heh

[15:00] <notviki> gfldex: I guess ^ that's your answer about JSON::Fast :)

[15:00] <nicq20> perlpilot: Not really. I was thinking something like 1+2 ==> * / 5. 

[15:00] <[Coke]> SmokeMachine: so, there will eventually be something mojo-ish, but we won't muddy the waters and call it mojo. there's branding there that we don't want to intrude on. I think it's very reasonable they want to keep their name theirs.

[15:00] <[Coke]> but I don't think anyone that has perl 6 cycles is working on it at the moment.

[15:00] <gfldex> notviki: yes, that's what I see locally

[15:01] *** fluca1978 left
[15:01] <[Coke]> SmokeMachine: you may have been thinking of https://github.com/coke/mojo6

[15:01] <raschip> nicq20: doesn't the reverse (R) meatoperator solve that?

[15:02] <raschip> 1+2 ==> 5 R/ *

[15:02] *** AlexDaniel joined
[15:03] <SmokeMachine> [Coke]: yes

[15:03] <nicq20> raschip: No, because the '==>' operator does not like WhateverStars (*) and errors.

[15:03] <nicq20> raschip: I just used it as an example really. :/

[15:04] <raschip> I did the same.

[15:05] <lizmat> .oO( slice, another meatoperator :-)

[15:05] <gfldex> JSON::Fast doesn't talk to travis. I will fix that first.

[15:06] <SmokeMachine> And what about remote promises?

[15:07] <dalek> doc: 3071ce2 | ronaldxs++ | doc/Language/unicode_texas.pod6:

[15:07] <dalek> doc: add Nl numeric value example

[15:07] <synopsebot6> Link: http://doc.perl6.org/language/unicode_texas

[15:07] <dalek> doc: review: https://github.com/perl6/doc/commit/3071ce2f4c

[15:07] <raschip> SmokeMachine: Why don't you try it?

[15:07] <notviki> SmokeMachine: I'd think so. The default schedule just executs code looks like, so in yours you could serialize it (somehow?) and ship it off elsewhere: https://github.com/rakudo/rakudo/blob/nom/src/core/CurrentThreadScheduler.pm#L22-L26

[15:08] <AlexDaniel> o/

[15:08] <notviki> |

[15:09] <notviki> |\

[15:09] <notviki> m: {;}.^methods.say

[15:09] <camelia> rakudo-moar a7d106: OUTPUT«(<anon> <anon> of returns add_phaser fire_phasers has-phasers has-phaser phasers assuming WHY set_why pos perl <anon> <anon> <anon> count line <anon> perl <anon> file of ACCEPTS signature Str <anon> arity returns new outer static_id)␤»

[15:09] <SmokeMachine> raschip: I wanna try... just asking because someone could know anything that could impossibility that...

[15:09] <notviki> raschip: well, I've no idea how you can pass a block of code to some other box, for example.

[15:10] <notviki> I mean SmokeMachine 

[15:10] <SmokeMachine> notviki: but is there some way to get the code of a block?

[15:10] <notviki> SmokeMachine: the source code?

[15:10] <notviki> SmokeMachine: don't think so, but even if you did, you'd still be missing all the stuff in its lexical scope

[15:11] <[Coke]> m: say "\c[LATIN CAPITAL LETTER A]" # is there a way to get that if "LATIN..." is the result of an expression, without an eval?

[15:11] <camelia> rakudo-moar 7ba9f8: OUTPUT«A␤»

[15:11] <SmokeMachine> notviki: yes, that's how I could serialise, no?

[15:11] <notviki> no idea

[15:13] <SmokeMachine> m: say {;}.^methods

[15:13] <camelia> rakudo-moar 7ba9f8: OUTPUT«(<anon> <anon> of returns add_phaser fire_phasers has-phasers has-phaser phasers assuming WHY set_why pos perl <anon> <anon> <anon> count line <anon> perl <anon> file of ACCEPTS signature Str <anon> arity returns new outer static_id)␤»

[15:15] <SmokeMachine> m: say {;}.static_id

[15:15] <camelia> rakudo-moar 7ba9f8: OUTPUT«51502792␤»

[15:16] *** travis-ci joined
[15:16] <travis-ci> Doc build errored. Ronald Schmidt 'add Nl numeric value example'

[15:16] <travis-ci> https://travis-ci.org/perl6/doc/builds/189211868 https://github.com/perl6/doc/compare/6020ec9a4db2...3071ce2f4c6d

[15:16] *** travis-ci left
[15:17] <notviki> m: use nqp; my $v = "LATIN"; say nqp::codepointfromname("$v CAPITAL LETTER A").chr

[15:17] <camelia> rakudo-moar 7ba9f8: OUTPUT«A␤»

[15:17] <SmokeMachine> notviki: maybe number every remote promise, send the whole file and run thatnumber?

[15:17] <notviki> [Coke]: ^. dunno of a Perl 6 way

[15:19] <notviki> SmokeMachine: what if it's multiple files? What if it uses modules that are installed?

[15:19] <raschip> RPC is a complicated topic.

[15:20] <raschip> Thgere's no way to pretend remote invocation is the same as local invocation.

[15:20] <notviki> SmokeMachine: we precompile modules... I know nothing about it, but maybe one can "precompile" a codeblock and ship that precompiled code out to execute elsewhere.

[15:22] <notviki> SmokeMachine: Day 2 of the course has something about serialization; I've not yet done Day 2, so don't know the details, but maybe you'll find something useful: http://edumentab.github.io/rakudo-and-nqp-internals-course/

[15:22] * notviki &

[15:22] <raschip> There has to be a way to ensure there's no binding involved, everything has to be copied.

[15:24] *** rindolf joined
[15:24] *** imcsk8 joined
[15:24] *** abraxxa left
[15:26] *** FROGGS joined
[15:27] <sjn> heya, #perl6

[15:27] <gfldex> JSON::Fast itself is ok. zef seams to have problems with dealing of the tests output.

[15:27] <raschip> o/

[15:28] <gfldex> ugexe: could you try to install JSON::Fast please and see if zef can test it fine?

[15:28] <SmokeMachine> notviki: good question... but it could be a requirement: install the modules you use on the remotemachine too...

[15:28] <SmokeMachine> notviki: thanks! I didn't know that exists!

[15:29] <sjn> is there a way to introspect/figure out perl6's unicode properties? (e.g. dump a list of everything perl6 considers as "Punctuation, connector" (uniprop"Pc"))

[15:29] * sjn should probably assume the answer is "no, check the code", but I'll ask anyway :)

[15:31] <AlexDaniel> u: Pc

[15:31] <unicodable6> AlexDaniel, U+005F LOW LINE [Pc] (_)

[15:31] <unicodable6> AlexDaniel, U+203F UNDERTIE [Pc] (‿)

[15:31] <unicodable6> AlexDaniel, U+2040 CHARACTER TIE [Pc] (⁀)

[15:31] <unicodable6> AlexDaniel, https://gist.github.com/f9dc17451009189766a13805f766791e

[15:32] <moritz> sjn: you have to iterate all characters

[15:32] <AlexDaniel> sjn: good question. Unicodable does something like this: say join “\c[31]”, (0..0x1FFFF).grep: { … }

[15:32] <sjn> aw

[15:33] <AlexDaniel> sjn: or rather: .say for (0..0x1FFFF).grep: { .uniprop eq ‘Pc’ }

[15:33] <AlexDaniel> e: .chr.say for (0..0x1FFFF).grep: { .uniprop eq ‘Pc’ }

[15:33] <evalable6> AlexDaniel, rakudo-moar 7ba9f84: OUTPUT«_␤‿␤⁀␤⁔␤︳␤︴␤﹍␤﹎␤﹏␤＿»

[15:33] <moritz> or (0..0x1FFFF)>>.char.join.comb(<:Pc>)

[15:33] <moritz> (0..0x1FFFF)>>.chr.join.comb(<:Pc>)

[15:33] *** jonas2 left
[15:34] <AlexDaniel> the query above took less than two seconds to iterate over the whole unicode range, so be careful with alternatives :)

[15:35] <AlexDaniel> sjn: well, if you need it, perhaps you can build a reverse lookup table ahead of time and use it later

[15:35] <sjn> mm

[15:35] <sjn> moritz, AlexDaniel: thanks!

[15:37] <raschip> .u _‿⁀⁔︳︴﹍﹎﹏＿

[15:37] <yoleaux> U+005F LOW LINE [Pc] (_)

[15:37] <yoleaux> U+203F UNDERTIE [Pc] (‿)

[15:37] <yoleaux> U+2040 CHARACTER TIE [Pc] (⁀)

[15:37] <raschip> .u _‿⁀⁔︴﹍﹎﹏＿

[15:37] <yoleaux> U+005F LOW LINE [Pc] (_)

[15:37] <yoleaux> U+203F UNDERTIE [Pc] (‿)

[15:37] <yoleaux> U+2040 CHARACTER TIE [Pc] (⁀)

[15:38] <AlexDaniel> disappointing, right?

[15:38] <raschip> .u ﹍﹎﹏＿

[15:38] <yoleaux> U+FE4D DASHED LOW LINE [Pc] (﹍)

[15:38] <AlexDaniel> u: _‿⁀⁔︴﹍﹎﹏＿

[15:38] <unicodable6> AlexDaniel, U+203F UNDERTIE [Pc] (‿)

[15:38] <unicodable6> AlexDaniel, U+2040 CHARACTER TIE [Pc] (⁀)

[15:38] <unicodable6> AlexDaniel, U+005F LOW LINE [Pc] (_)

[15:38] <yoleaux> U+FE4E CENTRELINE LOW LINE [Pc] (﹎)

[15:38] <unicodable6> AlexDaniel, https://gist.github.com/cc0851fb802d58b85cbd7a5e2aa787f9

[15:38] <yoleaux> U+FE4F WAVY LOW LINE [Pc] (﹏)

[15:38] <mspo> .u: _

[15:38] <AlexDaniel> xD

[15:38] <mspo> <shrug>

[15:39] <raschip> What's the problem with the bot?

[15:39] <mspo> _ _  <- are they different?

[15:39] <AlexDaniel> raschip: with which one?

[15:39] <raschip> yoleaux

[15:39] <AlexDaniel> raschip: there are two bots. yoleaux answers on “.u” and only prints 3 chars

[15:39] <AlexDaniel> that's how it works

[15:39] <raschip> I see, thanks

[15:39] <raschip> .u ﹏＿

[15:39] <yoleaux> U+FE4F WAVY LOW LINE [Pc] (﹏)

[15:39] <yoleaux> U+FF3F FULLWIDTH LOW LINE [Pc] (＿)

[15:39] <AlexDaniel> if you want to see all characters, use unicodable6

[15:40] <notviki> .u new line

[15:40] <AlexDaniel> (which answers on u: )

[15:40] <yoleaux> No characters found

[15:40] <mspo> .u _

[15:40] <yoleaux> U+005F LOW LINE [Pc] (_)

[15:40] <raschip> u: _‿⁀⁔︴﹍﹎﹏＿

[15:40] <unicodable6> raschip, U+005F LOW LINE [Pc] (_)

[15:40] <unicodable6> raschip, U+203F UNDERTIE [Pc] (‿)

[15:40] <unicodable6> raschip, U+2040 CHARACTER TIE [Pc] (⁀)

[15:40] <unicodable6> raschip, https://gist.github.com/5fc56dd286f91ffac8ee512d83272b1b

[15:40] <mspo> big underscore

[15:40] <notviki> u: { &?ROUTINE() }

[15:40] <unicodable6> notviki, https://gist.github.com/9d16d7b8c57f7d91015978cc1d34db84

[15:41] <AlexDaniel> u: new line

[15:41] <unicodable6> AlexDaniel, U+2B92 NEWLINE LEFT [So] (⮒)

[15:41] <unicodable6> AlexDaniel, U+2424 SYMBOL FOR NEWLINE [So] (␤)

[15:41] <unicodable6> AlexDaniel, U+2B93 NEWLINE RIGHT [So] (⮓)

[15:41] <notviki> u: { &?BLOCK() }

[15:41] <AlexDaniel> :o

[15:41] <unicodable6> notviki,  «exit signal = SIGKILL (9)»

[15:42] <notviki> heh

[15:42] <AlexDaniel> m: &?BLOCK()

[15:42] <jdv79_> jnthn: thanks!

[15:42] *** jdv79_ is now known as jdv79

[15:42] <camelia> rakudo-moar 7ba9f8: OUTPUT«(timeout)»

[15:44] <mspo> I was hoping to see more ANSI art with good ol' █ and ▀ and friends

[15:44] <raschip> What's ANSI?

[15:45] <mspo> :(

[15:45] *** brrt left
[15:45] <notviki> u: { True; say "hi" }

[15:46] <DrForr> Check #perl6-dev ?

[15:47] <AlexDaniel> notviki: this should've complained that there's something wrong

[15:47] <mspo> raschip: like BBS games

[15:47] <DrForr> (that was to mspo)

[15:47] <raschip> I know what it is, I'm just calling you old to mess with you.

[15:48] <AlexDaniel> notviki: but at this point it is just eating memory trying to slurp all this stuff or something

[15:48] <notviki> weird

[15:48] *** mcmillhj left
[15:48] *** unicodable6 left
[15:48] <mspo> DrForr: for ansi art? :)

[15:48] *** unicodable6 joined
[15:48] *** ChanServ sets mode: +v unicodable6

[15:49] <DrForr> Nod.

[15:49] <AlexDaniel> u: { say ‘hello’; False }

[15:49] *** unicodable6 left
[15:49] <mspo> DrForr: that would be odd

[15:49] <AlexDaniel> o_o

[15:49] *** unicodable6 joined
[15:49] *** ChanServ sets mode: +v unicodable6

[15:49] <AlexDaniel> u: { say ‘hello’; False }

[15:49] <notviki> oh

[15:49] <notviki> I killed it.

[15:49] <AlexDaniel> XD

[15:50] <notviki> an d restarted

[15:50] *** unicodable6 left
[15:50] *** wamba joined
[15:50] *** unicodable6 joined
[15:50] *** ChanServ sets mode: +v unicodable6

[15:50] <AlexDaniel> I should really-really work on these bots…

[15:51] <raschip> Zalgo text kills it too.

[15:51] <AlexDaniel> kills who?

[15:52] <raschip> Unicodable

[15:52] <AlexDaniel> u: t҉̫̪̪̲̪̜e̼͇̳̗s͚̯̻̭ͅt̙̬̪̩̙̦

[15:52] <unicodable6> AlexDaniel, U+0074 LATIN SMALL LETTER T [Ll] (t)

[15:52] <unicodable6> AlexDaniel, U+032B COMBINING INVERTED DOUBLE ARCH BELOW [Mn] (◌̫)

[15:52] <unicodable6> AlexDaniel, U+0489 COMBINING CYRILLIC MILLIONS SIGN [Me] (◌҉)

[15:52] <unicodable6> AlexDaniel, https://gist.github.com/56c7011943188a98ba427feae6ae9c67

[15:52] <AlexDaniel> works fine

[15:52] <mspo> I guess it's probably more efficient to just make a graphic than use a bunch of ▀

[15:52] <raschip> Z̴̢̖̗͔̘̲̳̝̠͈̍ͨ̂̒̏̊ͣ̀̊ͭͯ̊̒̑ͯ̚̚̕͝A̴̡̠̭̞̼̦̗͈̤ͮ͂̊ͫ͘͟͞ͅL̢̮̣̗͍̳̱͚͇̤̩͖̟̦ͨ̓̿̊͊ͪͭ̉̊ͯ͊̿ͧͭ̃ͥ͛̃̚͜͜͟G̷̨̝̖̲̦̭͕͖̬̼̱̦̹͈̬͎̜̮̩̍ͪ̀ͫ͝͡Ő͕̺͚̦̲͇̺̲̜̭̥͈̥͉̔̈́̓̀͜͝!̷̨̰̦͉̘̬̺̝͖͓͇̭̦͈̤̦̹̲̼̙͂̐͛ͧͩ̏̉͢

[15:52] <mspo> yikes

[15:53] <notviki> *crickets*

[15:53] <raschip> Oh, it died last time, I tough it was my fault.

[15:53] <AlexDaniel> notviki: did you submit a ticket for your terminal emulator? :)

[15:53] <notviki> Nope

[15:53] <notviki> (and I'm on a different box ATM, so nothing's broken :P)

[15:54] <raschip> mspo: did something broke? Or it's just that you never seen it?

[15:56] <mspo> raschip: I just got a lot of crazy chars 

[15:56] <mspo> raschip: without a username

[15:57] <notviki> N̶̝͚̹͚͙͔̯̝̰̰̄͊̀̒ͯͬͥ̽̋ͥͩ̉̕i̸͍̳̥͕͕̠̥̙̜͎͈͍̲͔͓ͤ̍̂̊͘͜͝ç̴̷͔̺̱͓͕̤͔̱̫͖̬̤͙̿ͭ͌͌ͯ̿̿ͩ́͊̆̐̄̈ͤ̃̈́̔̚͘͠e̩̞̯̩̮̬̝͓͇̬̙̰̳̼͉̤̤̫̾̈̉̈́͐̿̑ͫ̄̑ͥͮͩ̎̋͐̽ͩ͢

[15:57] <notviki> ͬ̊ͭ̂̐ͧ̚̕҉̳͕͎͙͕̺t̸̷̘͓̖̱͚͔̭͇̻̰̜̳ͨ̍̓̊ͭ̅ͯ̾ͧ̃̋ͭ͐͋̀ͯ̓̋̉̕e͔̣̝̪̪̮͉̗̱̮̜̙̤̜̲̳ͬ̂̀̉̈́ͪͨ͊ͮͩͤ̓ͭͥ͗ͧͮͫ́͘͞͞ͅͅr̡̛͍͓̼̙͖̳̙̜̾ͨ͆̌̐̒͐m͇̠̤̺̮̫̰̦͖̤̞͛ͫ͂̄̀̀i̷̳̳̬̤͉̭͗ͬ̈͌͟͜ņ̞̳̟̩̃ͬ́͋̄̕a̢̘̼͖͖̥͓̟̞͙ͦ̉̋̒ͮ̃ͯͫ̈͂̃͐̿̀͜͝l̴ͥ͌ͦ̂̐ͪ̈͊̚̚͘͞͏͏̻̼͎̦̭̣̼͚̻̞̩̗̘̹

[15:57] <notviki> ̺̘ ̂̀̀̇̀ͮ͑ͩ̔͗̍ͫ͊̓ͣ҉̶̢͉͍̣̦ͅy͌͒ͪͬ̓҉̸̪̩̟̟͟ô̶̶̤̰̝͔̫̥̰̩̣͖͔̘̥̬͎̜̌̓̇̎͒̈̿͞͠ù̴̬͎͙̘̖̠̤̠͍̱̱͖̺̽͗̈͒̊ͭͧ̆ͪ͋͘ͅ ͒ͣ̿͋ͩͮ͋ͮ̊͌͐̈ͮͬ҉̝̤̰͓͚̫̮͉̣̩̕g͖̳̥͕̪̠͔͈̳̖̹̖͐͆̃̀͑ͬ́̑̆ͬ̈̑̐͘͜͜͞ǫ̙͕̹̞͎̺̦̻̓͌͐̿ͧ͊̕͠͝t͒ͨͯͦ͌ͥ̈́ͪ̋̇̆ͣ̂͌̂̓҉̸̟͈̥͙͢

[15:57] <notviki> ̶̛̭̘̮͔̣̬͇̗̗̙̘̝̪̳̹͚̻͛ͫ͑̊ͤ͋ͨͫ̐̅̀͟͠ͅt͗͌̓̊̑̆́ͥ́͒̎͑͠͝͏͖̙̳͇̙̹͇̰̬̳̦̦̳̭́͝h̬̯̲̭̼̘͈̞͖̭̯̟̗͙̪̭͕̅̔̔̈́͛͑͋ͩ̐̊ͨ̊̀͢͟͡͝ͅę̷͐̀̇̑ͭ̐̅ͥ́̔͒̿̓̐͊ͭ͏̮̣̰̖͚̭̯̲͎͚̤̣̪͓̭̱͉ͅṟ͓̘̭̤̥͈͙͚̺ͨ̾ͫ̿ͧ͐̿̐̆̋̎͘͟͠͝ͅe̸̖̣̬̦̐̈̾͑͂ͯ̆̃ͬ̆̄̽̓̐̋̽ͧ̋͢.̷̹ͧ̉̄̽̊̏͊̏̆͑̃ͫ́̚͠

[15:57] <notviki> ͈̫͚̠͓͖̲̼.̢̨̖̱̺̞͉̖̖̰̬̞͎̭̘̪̙̮̐̅̋͒ͮ͛̌̃́̃ͪ͜͠.̷̴̰̺̭͇͚̮̍̃ͩͯ̂͐̀

[15:57] <notviki> ̛̤͈̮̰̞̭̺̼͎̗͍͎̳̟͓͉͖ͭ̃ͫ͐̒͒͠w̲̤̘̭͖͔̦̬͇͍̯͕̱̝̹͔̄̂̓ͪ̀ͮ͐̋͐͛ͭ̚͠ơ͍͈̲̠̥̦̱͔͛̇͐̒͗ͫ̄̉ͭ̓̾̈́̿ͣ̚͝ư̷̸̠̮̙͉̩̦͇͈̜͎̦ͮ̈́͐̂̂̋̌̏͒̂̓̌ͤ̿̐̃̌̀ḽ̢̛̠̥̗͍͔̩̻̰͖̗̒̽̍͂͐̔͒͠͡ḍ̶̻̼̠̞̤̠͎̹̪̜͚̜̻͎͓̠͆̒ͬͨ̾ͨ͌̾ͣ̾̀͜͡ͅ

[15:57] <notviki> ̲̺̫̱̬̝̣̼̘̱̗̞̥̖̰͋̑͂̄̂̆̆̒̾͊́͝b̸̧̧̛̟̭̲̯͕̘̦͚͕̼̝͖͓͖͆̾͋ͣ̑̒̀ͬ͂̀ͩͭ̊͑͢e̺̭̯͒̆͌ͫ̒ͮ̇͂ͣ̈́̇͟͡ ̸̧̟̤̜͍ͦ̓̉̀̿͑̏ͧ͊ͨ́̉̐ͫ͛ͤ́͋͟͢ä̸͌̊̊ͥͬ͞͏̨̖̥̯̻̯̘̳͕̤̫̪̻̪͔ͅ

[15:57] <notviki> ̨ͦ̄͋̿̊̾ͦ̂ͮ̚̚̚͢͠͏̵̘̺̠̦̭̹̗͎̼̣̥͔̜̮̫̦s̴̵̰̞̳̼͉̭ͪ̂̓̋͋̓̀̎ͫ̈ͩ̒̏̿͌̚͝ͅͅͅh̸̴̷͚̘͉̳̫̻̪̭͓͈̥̙̯̑͋̅ͥ̍͒͊̍͌͑̎͒̾ͬ̈̚a̸ͮ̊ͫͨ̒͂̈́͆ͩ̓̇̈́ͦ̏ͫ̚͜҉̯̞͉̥̬͖̟͖̗͎m̶̧̜̬͙̱̫̳̙̝̳̻ͩ͑ͥ̔̔̌̆̉̄͗̚͢͠ȩ̵͖͕͇̦̗͎̥̰͇͔͈̅͋̍ͧ̃̐̾̎ͣ͋͛͆̍͘͠

[15:57] <notviki> ̵̛̛̜̺͉̩͇̏̇̐ͥ̐ͣ̃͊ͤ͛͒̃͐͛͂ͯ̒̒̔͜í̒ͮͥ͏̳̤̠̝̰̠̩͚̘̜̥͘f̧͉̗̬̠ͧ̀͂͋ͣ̚̚͞͠

[15:57] *** rindolf left
[15:57] <notviki> ̸̢̟̗͕͍͈̤̰̐͌ͦ̽͑͊̓ͦͥͣ͗͒̾̀̅̂̚ş̴͈̰̠̞̯̞͙͕̩̤̳͉͈̙̞͍̮̖̟ͪͮͨ̎͐̂̽̿̈̚͟͟o̾ͧ͂ͪ̋̉̓͏̞̞̼̩̙̭́̕m̸̷̱͔͍̫̞̟̥̤͉̭͊ͧ̈́ͦ͋̓̂ͦ̆͋ͮ̂ͧ́e̷̡̡̻͈̱̖͚̜͈̘͇̻̤͈͆ͥͧ͋̀ͨ͑͛ͬ͑̚ţ͇̘̝̮̰̲͕̫͖̗̈̽ͧ̇́̈͑̇͋ͫ̈́̒ͨͭ̀͠ḩ̛̋̾ͩ̉̋̌̑̅͛̚͟҉̢̲̰͖̺̝̣̺̮͎̼͓͖̳̘͉̗͔iͥ̄ͧ̓̔̆̌̂̈́ͣ͗̏͌̒̔̍̚

[15:57] <notviki> ̷͙̟̟̖̞͢͞͝ͅǹ̶̋͊͒̏̀̀͞҉̣̗̦̱͖̜͚͉̳ͅgͥ̓͊͗̍̀̋҉̸̰̞̗͇̰́͢

[15:57] <notviki> ̨̹̪̰̙̣̙̞͕̱̳̫͊̌̿̍͛͐͗ͣ͐ͭ͜͡͝͠h̖̯̘̟͈͙̠͓̫̰͔̒ͭͪ̐̽͂͛̅̔̈́͌ͧ̕a̡̹̙͈̣̯̼̟̺̜̩̟̱̰ͯ͑ͬ̑̉͛̌̌̏͒ͧ͛̀ͅṗ̝̼̬̜̖̂̔͐̏͌ͥͮ͂̀͜͡p̷̡̭̫̘͍̤̦͖̮̓̓ͥ̿ͪ̈́̄̽͂͞͠e̢̨̳̞͎̖̪̗̫͖͎̬̟̳͔̭͓̞͔̐ͨ̆ͦ̉̓ͩ̊̓͂͛̿ͮͦ̚͘͞n̸̺͙̰̼̲͎̋̀̽̊ͮ̈ͩ́̕ë̴͓̳̥̥͇̲̳̙̩̙́ͨ͋̔̄͑ͧ͋͊ͥ̀̋̔ͮ́͡͠dͦ̔̓͆̍͢

[15:57] <notviki> ̯̜̙͙͇̬̗͙̜͍̺̪ͅ ̴̲̫̪̤̯̱̞̠̳̟ͫ̅͐̏̕ͅͅt̵̵̏̏̃́̓ͧ̓͊̈̍̒͑̀ͮͮ͂̏̉͟͠͏̪̠͖̥̠̜ọ̶̷̧̙͙̩͎̦͓̯̻̙̔̈̾ͩͦ̈́ͣͩͬ͊̋̇̑̈́́͘ ̧̬̝̦̮̗͕̳͖̳̗͇̤̲͉̾ͦͧ͒̏͝i͆͑ͬͣ̆̃̓ͨ̏͋͊ͤ̍҉̡̤̜̠͖̤͙̱̖̩́͞t̛͓̮̼̪͓̹͕̣̰̠̥͍̮͎ͫͤͣ͒́́͞.̢̥̤̪͕͈̤̫̙̯̳̍̊̔ͭͬ̓͊́

[15:57] <notviki> oops

[15:58] <notviki> Weird that it ended up on multiple lines and WeeChat didn't warn me about pasting multiple lines

[15:58] <pmurias> notviki: re Perl 6 port of mojolicious aren't they waiting for Perl 6 to meet their definition of ready?

[15:59] <notviki> pmurias: "they" is who? Mojolicious team?

[15:59] <[Coke]> pmurias: no, they have no plan to port.

[16:00] <[Coke]> that's my understanding based on my last convo.

[16:00] <[Coke]> (and I can't blame them. it's a ton of work for no benefit on their part.)

[16:00] <notviki> pmurias: after sri rage-quit this channel their involvement has been restricted to making snide comments about Perl 6 in their channel

[16:01] <notviki> well.. and commit messages too, I guess: https://github.com/kraih/mojo/commit/19cdf77258a1e123c84ddf79f377be60182ef1ef

[16:01] *** holli joined
[16:01] *** mcmillhj joined
[16:02] <mspo> wow that has really messed up my term

[16:02] <mspo> irssi doesn't know how to undraw those characters

[16:02] <raschip> Which terminal are you using?

[16:03] <mspo> terminal.app -> netbsd -> screen -> irssi

[16:04] <mspo>  /clear fixes it up :)

[16:04] <gfldex> our propaganda seams to be effective. My blogpost from today got twice the hits then the 2nd most popular and the day got a few hours to go.

[16:04] <raschip> link

[16:05] <gfldex> it's on http://pl6anet.org/

[16:06] *** mcmillhj left
[16:07] <ugexe> gfldex: I have a report of Test::Mock failing in the same way. It seems to be a failure of TAP::Harness thats included with rakudo because it does not happen if you use the `--/tap-harness` flag (which will run tests with prove)

[16:07] *** alimon1 left
[16:07] *** alimon1 joined
[16:08] *** thayne left
[16:08] <raschip> say "the 2nd most popular".WHAT

[16:09] *** infrabyte joined
[16:09] *** rindolf joined
[16:10] <dalek> doc: de3774a | gfldex++ | .travis.yml:

[16:10] <dalek> doc: disable TAP::Harness for now

[16:10] <dalek> doc: review: https://github.com/perl6/doc/commit/de3774a6ee

[16:10] <ugexe> gfldex: also they pass with TAP::Harness on 2016.09 (I dont have a 10, 11, or 12 to test with, just 09 and blead)

[16:10] <raschip> gfldex: most popular by which measure?

[16:10] <gfldex> raschip: the 2nd most popular day is Dec 27

[16:10] *** mcmillhj joined
[16:10] <raschip> I see, now I understand what you said

[16:11] <raschip> gfldex++

[16:17] *** perlpilot left
[16:17] <kybr> say i wanted to implement some subset of APL in perl6 (just as a learning exercise). it looks like there's an APL char set in Unicode. i could find those manually, but i wonder... how do we search unicode by type sets? maybe that's the wrong vocabulary. is there a character class for APL characters?

[16:18] <kybr> http://unicode.mayastudios.com/ <--- i want something like this

[16:18] <mspo> I think all of the characters are there but I didn't think there was a unicode "APL" set specifically?

[16:18] <mspo> since it just reuses a lot of regular symbols

[16:19] *** vytas joined
[16:19] <AlexDaniel> u: APL

[16:19] <unicodable6> AlexDaniel, U+2337 APL FUNCTIONAL SYMBOL SQUISH QUAD [So] (⌷)

[16:19] <unicodable6> AlexDaniel, U+2336 APL FUNCTIONAL SYMBOL I-BEAM [So] (⌶)

[16:19] <unicodable6> AlexDaniel, U+2338 APL FUNCTIONAL SYMBOL QUAD EQUAL [So] (⌸)

[16:19] <unicodable6> AlexDaniel, https://gist.github.com/bce17f194fbfb153878efec8395f7d73

[16:19] <kybr> right, but can we get a list by saying somethign like Unicode.aplSymbols?

[16:19] *** infrabyte left
[16:20] *** perlpilot joined
[16:20] <raschip> kybr: No we whre discussing this a little before you came, you have to go trough each charachter.

[16:20] <kybr> what was that? that "u: APL" thing? is that a bot?

[16:20] <raschip> And grep for the property.

[16:20] <kybr> u: APL FUNCTIONAL SYMBOL

[16:20] <unicodable6> kybr, U+2336 APL FUNCTIONAL SYMBOL I-BEAM [So] (⌶)

[16:20] <unicodable6> kybr, U+2337 APL FUNCTIONAL SYMBOL SQUISH QUAD [So] (⌷)

[16:20] <unicodable6> kybr, U+2338 APL FUNCTIONAL SYMBOL QUAD EQUAL [So] (⌸)

[16:20] <unicodable6> kybr, https://gist.github.com/43e82097c4077c45e0fcddbf9c7ff8b3

[16:20] <AlexDaniel> kybr: https://irclog.perlgeek.de/perl6/2017-01-05#i_13861066

[16:21] <mspo> wow how about that

[16:21] <kybr> okay. so that's cool. what's the code inside unicodable6?

[16:22] <notviki> .tell [Coke] what about the "Notes from Synopsis .... " paragraph on https://perl6.org/specification/ ? Seems dated. Even mentions "6.0.0"

[16:22] <yoleaux> notviki: I'll pass your message to [Coke].

[16:22] <AlexDaniel> kybr: https://github.com/perl6/whateverable/blob/master/Unicodable.p6#L97-L99

[16:22] <kybr> .say for (0..0x1FFFF).grep: { .uniprop eq ‘Pc’ } # NICE!

[16:23] <AlexDaniel> m: .say for (0..0x1FFFF).grep: { .uniname.contains(‘APL’) }

[16:23] <camelia> rakudo-moar 7ba9f8: OUTPUT«9014␤9015␤9016␤9017␤9018␤9019␤9020␤9021␤9022␤9023␤9024␤9025␤9026␤9027␤9028␤9029␤9030␤9031␤9032␤9033␤9034␤9035␤9036␤9037␤9038␤9039␤9040␤9041␤9042␤9043␤9044␤9045␤9046␤9047␤9048␤9049␤9050…»

[16:23] <AlexDaniel> m: .chr.say for (0..0x1FFFF).grep: { .uniname.contains(‘APL’) }

[16:23] <camelia> rakudo-moar 7ba9f8: OUTPUT«⌶␤⌷␤⌸␤⌹␤⌺␤⌻␤⌼␤⌽␤⌾␤⌿␤⍀␤⍁␤⍂␤⍃␤⍄␤⍅␤⍆␤⍇␤⍈␤⍉␤⍊␤⍋␤⍌␤⍍␤⍎␤⍏␤⍐␤⍑␤⍒␤⍓␤⍔␤⍕␤⍖␤⍗␤⍘␤⍙␤⍚␤⍛␤⍜␤⍝␤⍞␤⍟␤⍠…»

[16:23] <AlexDaniel> m: .chr.say for (0..0x10FFFF).grep: { .uniname.contains(‘APL’) }

[16:23] <camelia> rakudo-moar 7ba9f8: OUTPUT«⌶␤⌷␤⌸␤⌹␤⌺␤⌻␤⌼␤⌽␤⌾␤⌿␤⍀␤⍁␤⍂␤⍃␤⍄␤⍅␤⍆␤⍇␤⍈␤⍉␤⍊␤⍋␤⍌␤⍍␤⍎␤⍏␤⍐␤⍑␤⍒␤⍓␤⍔␤⍕␤⍖␤⍗␤⍘␤⍙␤⍚␤⍛␤⍜␤⍝␤⍞␤⍟␤⍠…»

[16:24] <dalek> perl6.org: cb9b554 | (Zoffix Znet)++ | source/specification/index.html:

[16:24] <dalek> perl6.org: Update design page

[16:24] <dalek> perl6.org: 

[16:24] <dalek> perl6.org: - Mark synopses as historic (Fixes #65)

[16:24] <dalek> perl6.org: - Link to 6.c-errata as spec and use master as speculative (Fixes #67)

[16:24] <dalek> perl6.org: - Remove STD (Fixes #66)

[16:24] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/cb9b554811

[16:24] <kybr> this is the sexiest language ever.

[16:25] <notviki> It's in the name! 6.c ;)

[16:26] <AlexDaniel> kybr: please note that it simply goes through the whole unicode range (0..0x10FFFF), which is probably not something you want to do frequently

[16:27] <AlexDaniel> depends on your needs, of course

[16:28] <kybr> right. i'm thinking that i do that once and make a character class.

[16:29] <AlexDaniel> personally I'd just take that list and hardcode it

[16:30] <kybr> would that be better than using it as a range? it looks like they are in order: 9014..9082.

[16:31] <kybr> except for the last one: 9109. damn.

[16:31] *** tipdbmp joined
[16:32] <notviki> m: say so "⍄" ~~ /<[\x[9014]..\x[9082]\x[9109]>/

[16:32] <camelia> rakudo-moar 7ba9f8: OUTPUT«5===SORRY!5===␤Unrecognized regex metacharacter < (must be quoted to match literally)␤at <tmp>:1␤------> 3y so "⍄" ~~ /<[\x[9014]..\x[9082]\x[91097⏏5]>/␤Unrecognized regex metacharacter [ (must be quoted to match literally)␤at <tmp>:1…»

[16:32] <notviki> m: say so "⍄" ~~ /<[\x[9014]..\x[9082]\x[9109]]>/

[16:32] <camelia> rakudo-moar 7ba9f8: OUTPUT«False␤»

[16:32] <notviki> ah right

[16:33] <AlexDaniel> m: ‘hello ⍈ world’ ~~ / (.) <?{ $0.uniname.starts-with(‘APL FUNC’) }> /

[16:33] <camelia> rakudo-moar 7ba9f8: OUTPUT«Cannot resolve caller uniname(Match); none of these signatures match:␤    (Str:D $str)␤    (Int:D $code)␤  in block <unit> at <tmp> line 1␤␤»

[16:33] <AlexDaniel> m: ‘hello ⍈ world’ ~~ / (.) <?{ $0.Str.uniname.starts-with(‘APL FUNC’) }> /

[16:33] <camelia> rakudo-moar 7ba9f8: ( no output )

[16:33] <notviki> m: .base(16).say for 9014, 9082, 9109

[16:33] <camelia> rakudo-moar 7ba9f8: OUTPUT«2336␤237A␤2395␤»

[16:33] *** rindolf left
[16:33] <notviki> m: say so "⍄" ~~ /<[\x[2336]..\x[237A]\x[2395]]>/

[16:33] <camelia> rakudo-moar 7ba9f8: OUTPUT«True␤»

[16:33] <notviki> \o/

[16:33] *** brrt joined
[16:33] <raschip> m: my @apl = gather for (0..0x10FFFF) {take if .uniname.contains(‘APL’) }; say @apl.chr

[16:33] <camelia> rakudo-moar 7ba9f8: OUTPUT«take without parameters doesn't make sense␤  in code  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:33] <AlexDaniel> m: say ‘hello ⍈ world’ ~~ / (.) <?{ $0.Str.uniname.starts-with(‘APL FUNC’) }> /

[16:33] <camelia> rakudo-moar 7ba9f8: OUTPUT«｢⍈｣␤ 0 => ｢⍈｣␤»

[16:33] <AlexDaniel> right

[16:33] <raschip> m: my @apl = gather for (0..0x10FFFF) {take $_ if .uniname.contains(‘APL’) }; say @apl.chr

[16:33] <camelia> rakudo-moar 7ba9f8: OUTPUT«O␤»

[16:34] <AlexDaniel> m: my @apl = gather for (0..0x10FFFF) {take $_ if .uniname.contains(‘APL’) }; say @apl».chr

[16:34] <camelia> rakudo-moar 7ba9f8: OUTPUT«[⌶ ⌷ ⌸ ⌹ ⌺ ⌻ ⌼ ⌽ ⌾ ⌿ ⍀ ⍁ ⍂ ⍃ ⍄ ⍅ ⍆ ⍇ ⍈ ⍉ ⍊ ⍋ ⍌ ⍍ ⍎ ⍏ ⍐ ⍑ ⍒ ⍓ ⍔ ⍕ ⍖ ⍗ ⍘ ⍙ ⍚ ⍛ ⍜ ⍝ ⍞ ⍟ ⍠ ⍡ ⍢ ⍣ ⍤ ⍥ ⍦ ⍧ ⍨ ⍩ ⍪ ⍫ ⍬ ⍭ ⍮ ⍯ ⍰ ⍱ ⍲ ⍳ ⍴ ⍵…»

[16:34] <kybr> m: my @apl = gather for (0..0x10FFFF) {take $_ if

[16:34] <camelia> rakudo-moar 7ba9f8: OUTPUT«5===SORRY!5===␤Whitespace required after keyword 'if'␤at <tmp>:1␤------> 3l = gather for (0..0x10FFFF) {take $_ if7⏏5<EOL>␤Whitespace required after keyword 'if'␤at <tmp>:1␤------> 3l = gather for (0..0x10FFFF) {take $_ if7⏏5<EOL…»

[16:35] * kybr crashes his bike doing a trickd

[16:35] <raschip> m: my @apl = gather for (0..0x10FFFF) {take $_ if .uniname.contains(‘APL’) }; say +@apl

[16:35] <camelia> rakudo-moar 7ba9f8: OUTPUT«79␤»

[16:35] <kybr> i think that should be just 0x1FFFF, right? how big is unicode?

[16:35] <notviki> m: subset APL of Str where {.ords.all == any(|(9014..9082), 9109)}; say "⌼" ~~ APL

[16:35] <camelia> rakudo-moar 7ba9f8: OUTPUT«True␤»

[16:35] <AlexDaniel> 10FFFF is technically correct

[16:35] <notviki> m: subset APL of Str where {.ords.all == any(|(9014..9082), 9109)}; say "⌼⌼⌼⌼" ~~ APL

[16:35] <camelia> rakudo-moar 7ba9f8: OUTPUT«True␤»

[16:35] <notviki> m: subset APL of Str where {.ords.all == any(|(9014..9082), 9109)}; say "⌼⌼x⌼⌼" ~~ APL

[16:35] <camelia> rakudo-moar 7ba9f8: OUTPUT«False␤»

[16:35] <notviki> neat

[16:36] <AlexDaniel> there are not many useful symbols in 1FFFF..10FFFF range

[16:36] <raschip> For now

[16:36] <kybr> notviki: you have the coolest way to say it

[16:37] <kybr> .ords.all

[16:37] <ugexe> gfldex: moar-2016.12 runs the tests OK. so something between moar-2016.12 and moar-blead seems to have broken TAP::Harness

[16:37] *** kyan joined
[16:37] <AlexDaniel> u: { $_ > 0x1FFFF and not .uniname.starts-with(‘<’) }

[16:37] <unicodable6> AlexDaniel, U+2F800 CJK COMPATIBILITY IDEOGRAPH-2F800 [Lo] (丽)

[16:37] <unicodable6> AlexDaniel, U+2F801 CJK COMPATIBILITY IDEOGRAPH-2F801 [Lo] (丸)

[16:37] <unicodable6> AlexDaniel, U+2F802 CJK COMPATIBILITY IDEOGRAPH-2F802 [Lo] (乁)

[16:37] <unicodable6> AlexDaniel, https://gist.github.com/a098b4769bbe8595e28fc533fe49c1bf

[16:37] <AlexDaniel> ↑ that's the list

[16:38] <kybr> that's all the "real" stuff?

[16:39] <AlexDaniel> I think so

[16:39] *** troys joined
[16:40] <notviki> m: my \偺 = 42; say 偺

[16:41] <camelia> rakudo-moar 7ba9f8: OUTPUT«42␤»

[16:41] <notviki> m: sub 丽丸乁 { &?ROUTINE.name.uninames.say }()

[16:41] <camelia> rakudo-moar 7ba9f8: OUTPUT«(<CJK Ideograph> <CJK Ideograph> <CJK Ideograph>)␤»

[16:41] <notviki> hehe

[16:42] *** rindolf joined
[16:42] *** perlpilot left
[16:42] * notviki wonders why camelia's uninames have '<' yet on unicodable the filter was 'not starts with <'

[16:42] <kybr> my chinese students would flip out if i showed them that.

[16:43] <tipdbmp> How can I create a type alias say for uint8 and call it u8 (I tried:  subset u8 of uint8; my u8 $foo = 255; # but got a type error) or for an array: subset Foos of Array[Foo]; my Foos $foos = Foos.new(...); # but got an error (cannot create instance of type)?

[16:44] <jnthn> constant u8 = uint8

[16:44] <AlexDaniel> m: say ‘丸‘.uniname

[16:44] <camelia> rakudo-moar 7ba9f8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in curly single quotes; couldn't find final "’" ␤at <tmp>:1␤------> 3say ‘丸‘.uniname7⏏5<EOL>␤    expecting any of:␤        argument list␤        curly singl…»

[16:44] <AlexDaniel> m: say ‘丸’.uniname

[16:44] <camelia> rakudo-moar 7ba9f8: OUTPUT«<CJK Ideograph>␤»

[16:44] <notviki> m: my &說 = &say; sub 這太棒了 { 說 "這太棒了!" }; 這太棒了

[16:44] <camelia> rakudo-moar 7ba9f8: OUTPUT«這太棒了!␤»

[16:45] <tipdbmp> I see, thanks.

[16:45] <notviki> ehehe

[16:45] <AlexDaniel> notviki: we can bisect by that…

[16:45] *** bwisti left
[16:45] <gfldex> m: constant u8 = uint8; say u8.WHAT;

[16:45] <camelia> rakudo-moar 7ba9f8: OUTPUT«(uint8)␤»

[16:45] <AlexDaniel> b: old=HEAD~300 say ‘丸’.uniname

[16:45] <bisectable6> AlexDaniel, On both starting points (old=HEAD~300 new=7ba9f84) the exit code is 0 and the output is identical as well

[16:45] <bisectable6> AlexDaniel, Output on both points: <CJK Ideograph>

[16:45] <AlexDaniel> b: old=HEAD~700 say ‘丸’.uniname

[16:45] <bisectable6> AlexDaniel, On both starting points (old=HEAD~700 new=7ba9f84) the exit code is 0 and the output is identical as well

[16:45] <bisectable6> AlexDaniel, Output on both points: <CJK Ideograph>

[16:45] <AlexDaniel> :|

[16:45] <notviki> m: "丽".ords».base(16).say

[16:45] <camelia> rakudo-moar 7ba9f8: OUTPUT«(4E3D)␤»

[16:46] <AlexDaniel> commit: HEAD~200..HEAD say ‘丸’.uniname

[16:46] <notviki> It gets normalized into something else?

[16:46] <AlexDaniel> oh

[16:46] <AlexDaniel> right

[16:46] <notviki> m: say "\x[4E3D]" eq "\x[2F800]"

[16:46] <camelia> rakudo-moar 7ba9f8: OUTPUT«True␤»

[16:46] <notviki> m: say "\x[4E3D]".uninames, "\x[2F800]".uninames

[16:46] <camelia> rakudo-moar 7ba9f8: OUTPUT«(<CJK Ideograph>)(<CJK Ideograph>)␤»

[16:46] <notviki> :|

[16:46] <notviki> Oh right

[16:46] <AlexDaniel> okay then. Unicodable works on numbers basically

[16:47] <AlexDaniel> m: say 0x4E3D.uninames, 0x2F800.uninames

[16:47] <notviki> m: say 0x2F800 .uninames

[16:47] <camelia> rakudo-moar 7ba9f8: OUTPUT«Cannot resolve caller uninames(Int); none of these signatures match:␤    (Str:D $str)␤  in block <unit> at <tmp> line 1␤␤»

[16:47] <camelia> rakudo-moar 7ba9f8: OUTPUT«Cannot resolve caller uninames(Int); none of these signatures match:␤    (Str:D $str)␤  in block <unit> at <tmp> line 1␤␤»

[16:47] <AlexDaniel> m: say 0x4E3D.uniname, 0x2F800.uniname

[16:47] <notviki> m: say 0x2F800 .uniname

[16:47] <camelia> rakudo-moar 7ba9f8: OUTPUT«<CJK Ideograph>CJK COMPATIBILITY IDEOGRAPH-2F800␤»

[16:47] <camelia> rakudo-moar 7ba9f8: OUTPUT«CJK COMPATIBILITY IDEOGRAPH-2F800␤»

[16:47] <notviki> yey

[16:48] *** ggoebel left
[16:48] <committable6> AlexDaniel, https://gist.github.com/f0a4d4c262047342c37922f88795428a

[16:49] <AlexDaniel> .oO( blame everything on samcv if you don't understand the situation )

[16:52] <kybr> how do we say everything in a subset?

[16:52] <jnthn> I think implementing singleton decomposition could be blamed on me :P

[16:52] <jnthn> But yes, it's corret we normalize those things, it's part of NFD even

[16:53] <jnthn> (Which is two steps below NFG)

[16:54] <AlexDaniel> kybr: subset is not exactly a container, so you can't really do it

[16:55] * notviki doesn't understand the question

[16:55] <kybr> okay. right. got it.

[16:56] <AlexDaniel> notviki: having ｢subset Even of Int where { $_ %% 2 };｣, how to print all Even numbers?

[16:57] <notviki> Riiight... you could only filter

[16:58] *** bwisti joined
[16:58] <notviki> m: Int.Range.say

[16:58] <camelia> rakudo-moar 7ba9f8: OUTPUT«-Inf^..^Inf␤»

[16:58] <notviki> heh

[16:58] <notviki> m: say (-Inf^..^Inf).is-int

[16:58] <camelia> rakudo-moar 7ba9f8: OUTPUT«False␤»

[16:58] <notviki> double-heh

[16:58] *** brrt left
[16:59] <AlexDaniel> m: subset MyUInt of Int where { $_ > 0 }; say MyUInt.Range

[16:59] <camelia> rakudo-moar 7ba9f8: OUTPUT«-Inf^..^Inf␤»

[16:59] <AlexDaniel> :P

[16:59] <AlexDaniel> that should've been >= but nvm

[16:59] <notviki> I'll raise ya

[16:59] <notviki> m: say UInt.Range

[16:59] <camelia> rakudo-moar 7ba9f8: OUTPUT«0..^Inf␤»

[16:59] <notviki> :o

[16:59] <notviki> how does it know...

[16:59] <AlexDaniel> SourceBaby: UInt.Range

[16:59] <notviki> s: UInt, 'Range', \()

[16:59] <SourceBaby> notviki, Something's wrong: ␤ERR: Too many positionals passed; expected 2 arguments but got 3␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 25␤  in block <unit> at -e line 6␤␤

[17:00] <notviki> -_-

[17:00] <notviki> s: UInt, 'Range'

[17:00] <SourceBaby> notviki, Something's wrong: ␤ERR: Too many positionals passed; expected 2 arguments but got 3␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 33␤  in block <unit> at -e line 6␤␤

[17:00] <notviki> c'mon robot!

[17:00] <notviki> Ah, it's the .^can that's complaining

[17:01] <notviki> s: (my UInt $ = 42), 'Range', \()

[17:01] <SourceBaby> notviki, Something's wrong: ␤ERR: Could not find candidate that can do \()␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 29␤  in block <unit> at -e line 6␤␤

[17:01] <notviki> weird

[17:02] *** ggoebel joined
[17:02] <notviki> Ah, it's cheating! That's how it knows: https://github.com/rakudo/rakudo/blob/nom/src/core/Int.pm#L186

[17:02] <AlexDaniel> :)

[17:03] <notviki> m: subset UInt of Int where * %% 2; say UInt.Range

[17:03] <camelia> rakudo-moar 7ba9f8: OUTPUT«0..^Inf␤»

[17:03] <notviki> ha-ha

[17:03] <AlexDaniel> wwwwwhhhhat

[17:03] <AlexDaniel> right…

[17:03] <AlexDaniel> :|

[17:03] <notviki> well, the cheat is checking for .^name (I dunno why)

[17:03] <AlexDaniel> subset Blah of Int where * %% 2; say Blah.Range

[17:03] <AlexDaniel> m: subset Blah of Int where * %% 2; say Blah.Range

[17:03] <camelia> rakudo-moar 7ba9f8: OUTPUT«-Inf^..^Inf␤»

[17:04] *** kyan left
[17:04] <notviki> m: subset Foo of Int; use nqp; my Int $x; my Foo $y; dd [nqp::istype($x, Foo), nqp::istype($y, Foo) ]

[17:04] <camelia> rakudo-moar 7ba9f8: OUTPUT«[1, 1]␤»

[17:04] <notviki> I see.

[17:05] <AlexDaniel> notviki: hehe, look

[17:05] <kybr> notviki: i checked out the Java/JVM tests and found what i wanted to know.. how Java interoperability was looking. i can load classes i write, but i can't figure out how to open .jar files.

[17:05] <AlexDaniel> m: say Bool.Range

[17:05] <camelia> rakudo-moar 7ba9f8: OUTPUT«-Inf^..^Inf␤»

[17:06] <notviki> kybr: I've zero knowledge of Java... other than the joke about long names. Maybe try running into psch or bartolin

[17:06] <notviki> m: say so Inf

[17:06] <camelia> rakudo-moar 7ba9f8: OUTPUT«True␤»

[17:06] <notviki> m: say so NaN

[17:06] <camelia> rakudo-moar 7ba9f8: OUTPUT«True␤»

[17:07] <notviki> m: say (NaN..NaN).Range

[17:07] <camelia> rakudo-moar 7ba9f8: OUTPUT«No such method 'Range' for invocant of type 'Range'␤  in block <unit> at <tmp> line 1␤␤»

[17:07] <notviki> :}

[17:08] <[Coke]> notviki: yup, that  ¶ should be updated.

[17:08] <yoleaux> 16:22Z <notviki> [Coke]: what about the "Notes from Synopsis .... " paragraph on https://perl6.org/specification/ ? Seems dated. Even mentions "6.0.0"

[17:13] *** dj_goku left
[17:15] *** troys left
[17:16] *** zakharyas left
[17:19] <SmokeMachine> gfldex: your "if" has a if inside... I did post here another version that doesn't...

[17:20] *** pyrimidine left
[17:20] <SmokeMachine> m: role Cond { has &!true = {;}; has &!false = {;}; proto method cond(|) {*}; multi method cond("True") { &!true() }; multi method cond("False") { &!false() }; method if(:&!true, :&!false){ $.cond(?self .gist) } }; (True does Cond).if: :true{say "ok"} :false{say "ko"}

[17:20] <camelia> rakudo-moar 7ba9f8: OUTPUT«ok␤»

[17:21] *** pyrimidine joined
[17:21] <SmokeMachine> gfldex: some one on a comment of masak blog sad that ifTrue:ifFalse: is 1 method...

[17:22] <raschip> m: role Cond { has &!true = {;}; has &!false = {;}; proto method cond(|) {*}; multi method cond("True") { &!true() }; multi method cond("False") { &!false() }; method if(:&!true, :&!false){ $.cond(?self .gist) } }; (True does Cond).if: :true{say "so"} :false{say "not"

[17:22] <camelia> rakudo-moar 7ba9f8: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3nd).if: :true{say "so"} :false{say "not"7⏏5<EOL>␤    expecting any of:␤        postfix␤        statement end␤        statement modifier␤        statement…»

[17:22] <raschip> m: role Cond { has &!true = {;}; has &!false = {;}; proto method cond(|) {*}; multi method cond("True") { &!true() }; multi method cond("False") { &!false() }; method if(:&!true, :&!false){ $.cond(?self .gist) } }; (True does Cond).if: :true{say "so"} :false{say "not"}

[17:22] <camelia> rakudo-moar 7ba9f8: OUTPUT«so␤»

[17:22] <raschip> Made it more sixy.

[17:23] <SmokeMachine> It uses the method dispatch as conditional...

[17:24] <SmokeMachine> I tried to make the cond method private but I couldn't...

[17:24] <raschip> Like in the smalltalk example;

[17:24] <gfldex> m: my $b = True; my &c = { say 'oi‽' }; my $self = {}; sub _if { $b ?? (c; $self) !! $self }; _if

[17:24] <camelia> rakudo-moar 7ba9f8: OUTPUT«oi‽␤»

[17:24] <raschip> The if is hidden but is still defined by the syntax.

[17:25] <gfldex> m: my $b = False; my &c = { say 'oi‽' }; my $self = {}; sub _if { $b ?? (c; $self) !! $self }; _if

[17:25] <camelia> rakudo-moar 7ba9f8: ( no output )

[17:25] <SmokeMachine> gfldex: Brazilian too?

[17:25] *** shayan_ joined
[17:26] *** shayan_ left
[17:26] *** pyrimidine left
[17:27] *** perlpilot joined
[17:29] <gfldex> SmokeMachine: german

[17:30] <SmokeMachine> gfldex: sorry, I saw the "oi" and thought you were Brazilian...

[17:30] <raschip> He likes Ska, methinks

[17:34] *** shayan_ joined
[17:36] <gfldex> it's indeed the british ‚oi‘ I use

[17:36] *** mcmillhj left
[17:37] <notviki> oi bruv!

[17:37] <gfldex> i learned to speak english while playing EVE Online. There was plenty of reason to shout ‚oi‽‘.

[17:37] <raschip> oi means the same thing in Cockney and in Portuguese

[17:37] *** mcmillhj joined
[17:42] *** dj_goku joined
[17:42] *** dj_goku left
[17:42] *** dj_goku joined
[17:42] <[Coke]> And americish.

[17:43] *** mcmillhj left
[17:43] <AlexDaniel> we have some “oi‽” in our docs by the way :)

[17:43] <AlexDaniel> thanks to… you know :)

[17:44] *** noganex_ left
[17:48] *** rindolf left
[17:49] *** ocbtec joined
[17:50] *** mcmillhj joined
[17:54] *** girafe joined
[17:55] *** mcmillhj left
[17:59] *** nicq20 left
[18:01] *** mcmillhj joined
[18:07] *** cdg joined
[18:08] *** hwu joined
[18:08] *** cdg left
[18:08] *** cdg joined
[18:09] <hwu> p6: say 'test';

[18:09] <camelia> rakudo-moar 6d28c1: OUTPUT«test␤»

[18:09] <notviki> m: q♥test successful♥.say

[18:09] <camelia> rakudo-moar 6d28c1: OUTPUT«test successful␤»

[18:12] *** hwu left
[18:14] <notviki> Another satisfied customer!

[18:14] *** hwu joined
[18:14] <notviki> m: “test”.say

[18:14] <camelia> rakudo-moar 6d28c1: OUTPUT«test␤»

[18:16] <notviki> m: ｢测试｣.say

[18:16] <camelia> rakudo-moar 6d28c1: OUTPUT«测试␤»

[18:16] <notviki> m: q 测试测.say

[18:16] <camelia> rakudo-moar 6d28c1: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Alphanumeric character is not allowed as a delimiter␤at <tmp>:1␤------> 3q7⏏5 测试测.say␤»

[18:16] <notviki> aww

[18:17] <AlexDaniel> aplhanumeric huh

[18:17] <AlexDaniel> lp*

[18:17] *** tinita_ is now known as tinita

[18:19] <raschip> .u 测试测

[18:19] <yoleaux> No characters found

[18:19] <notviki> It's a Ruby bot :P

[18:19] <AlexDaniel> u: 测试测

[18:19] <unicodable6> AlexDaniel, U+6D4B <CJK Ideograph> [Lo] (测)

[18:19] <unicodable6> AlexDaniel, U+8BD5 <CJK Ideograph> [Lo] (试)

[18:19] <unicodable6> AlexDaniel, U+6D4B <CJK Ideograph> [Lo] (测)

[18:19] <AlexDaniel> and this is a Perl 6 bot :PPP

[18:20] <raschip> notviki: Well, YOLO.

[18:30] <kybr> why does the perl6 REPL not '$_ =' each statement?

[18:31] <timotimo> imagine doing .say, then .perl.say because you didn't get the right thing the first time

[18:32] <timotimo> you'd end up with "the thing" and then True

[18:34] *** dj_goku left
[18:37] <kybr> thanks.

[18:39] *** pyrimidine joined
[18:43] <notviki> kybr: you can get that by running this in REPL: REPL.^lookup(‘repl-eval’).wrap: -> |c { OUTER::(‘$_’) = callsame; }

[18:45] <notviki> oh, even     REPL.^lookup(‘repl-eval’).wrap: -> |c { $_ = callsame; }    will saffice

[18:47] *** mr_ron joined
[18:49] *** LiberalSquash joined
[18:49] *** LiberalSquash left
[18:50] <notviki> m: Backtrace::Frame.^lookup("is-setting").wrap: -> | { False }; +"a"

[18:50] <camelia> rakudo-moar 6d28c1: OUTPUT«WARNINGS for <tmp>:␤Useless use of "+" in expression "+\"a\"" in sink context (line 1)␤Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5a' (indicated by ⏏)␤  in sub val at SETTING::src/core/allomorphs.…»

[18:50] <notviki> ehehe

[18:50] <notviki> m: &val.wrap: -> | { "tis not a number, bruh!" }; say +"a"

[18:50] <camelia> rakudo-moar 6d28c1: OUTPUT«tis not a number, bruh!␤»

[18:50] <notviki> eheeh. 

[18:51] *** raschip left
[18:56] *** mcmillhj left
[18:56] *** rafsch joined
[19:01] <mr_ron> m: class C { multi method f(C:U $:) {say "class method"}; multi method f(C:D $:) {say "object method"}}; C.f; C.new.f

[19:01] <camelia> rakudo-moar 6d28c1: OUTPUT«class method␤object method␤»

[19:03] <notviki> m: m: class C { multi method f(::?CLASS:U:) {say "class method"}; multi method f(::?CLASS:D:) {say "object method"}}; C.f; C.new.f

[19:03] <camelia> rakudo-moar 6d28c1: OUTPUT«class method␤object method␤»

[19:03] <mr_ron> The technique for class methods is in S12 and shows up occasionally in the docs but I don't see roast tests or clear documentation in the object docs of the technique ...

[19:04] *** mcmillhj joined
[19:05] *** cdg left
[19:08] *** rafsch left
[19:12] *** kalkin- left
[19:14] *** pyrimidine left
[19:14] *** dj_goku joined
[19:14] *** dj_goku left
[19:14] *** dj_goku joined
[19:16] <moritz> fwiw there's a proposed addition that would let you write method f(:U:) { } for a class-only method

[19:18] <notviki> cool

[19:18] <notviki> That's the first thing I tried and saw it didn't work :)

[19:21] *** espadrine joined
[19:21] *** girafe left
[19:22] *** mcmillhj left
[19:22] *** mcmillhj joined
[19:25] <jferrero> m: sub l{Date.new($^a).is-leap-year}; say l(2016); say l(2017);

[19:25] <camelia> rakudo-moar 6d28c1: OUTPUT«Cannot resolve caller new(Date: Int); none of these signatures match:␤    (Date $: $year, $month, $day, :&formatter, *%_)␤    (Date $: :$year!, :$month = 1, :$day = 1, :&formatter, *%_)␤    (Date $: Str $date, :&formatter, *%_)␤    (Date $: Dateish…»

[19:26] *** rafschi joined
[19:26] <notviki> m: sub l{Date.new(year => $^a).is-leap-year}; say l(2016); say l(2017);

[19:26] <camelia> rakudo-moar 6d28c1: OUTPUT«True␤False␤»

[19:26] <jferrero> m: sub l{Date.new($^a,1,1).is-leap-year}; say l(2016); say l(2017);

[19:26] <camelia> rakudo-moar 6d28c1: OUTPUT«True␤False␤»

[19:27] <notviki> m: sub l{$^y %% 4 and not $y %% 100 or $y %% 400}; say l(2016); say l(2017);

[19:27] <camelia> rakudo-moar 6d28c1: OUTPUT«True␤False␤»

[19:27] *** melezhik joined
[19:28] <notviki> m: sub l{Date.new(:$^year).is-leap-year}; say l(2016); say l(2017);

[19:28] <camelia> rakudo-moar 6d28c1: OUTPUT«True␤False␤»

[19:28] <notviki> neat

[19:29] <jferrero> notviki++

[19:32] <jferrero> notviki: :$month and :$day are optional arguments?

[19:32] <notviki> yeah

[19:32] <notviki> m: say Date.new: :2017year

[19:32] <camelia> rakudo-moar 6d28c1: OUTPUT«2017-01-01␤»

[19:33] <jferrero> but...

[19:33] <jferrero> How can use with the sub above?

[19:33] <jferrero> Who?

[19:34] <notviki> What do you mean who can use the sub above?

[19:34] <jferrero> m: sub l{Date.new(:$^year).is-leap-year}; say l(2016); say l(2017);

[19:34] <camelia> rakudo-moar 6d28c1: OUTPUT«True␤False␤»

[19:34] * notviki doesn't understand the question

[19:35] <jferrero> I want to use Date.new() with only one argument

[19:35] <notviki> OK. The above sub does just that.

[19:35] <notviki> There's only one argument; the named `year` 

[19:35] <jferrero> Ok

[19:37] <notviki> There's a bunch of formats .new can take: https://docs.perl6.org/type/Date#method_new

[19:39] <rafschi> Do we have one for Unix Time to DateTime conversion?

[19:39] <notviki> m: say DateTime.new: Instant.from-posix: 1234567890

[19:39] <camelia> rakudo-moar 6d28c1: OUTPUT«2009-02-13T23:31:30Z␤»

[19:40] <rafschi> What's the reason for it to be in Instant instead of DateTime? Or, put another way, what's the difference between the two?

[19:41] <rafschi> m: say Instant.from-posix: 123456789

[19:41] <camelia> rakudo-moar 6d28c1: OUTPUT«Instant:123456801␤»

[19:42] <gfldex> i just found that travis supports automatic monthly/weekly/daily builds

[19:42] <notviki> oh

[19:42] <notviki> m: say DateTime.new: 1234567890

[19:42] <camelia> rakudo-moar 6d28c1: OUTPUT«2009-02-13T23:31:30Z␤»

[19:42] <notviki> rafschi: because apparently I like to overcomplicate things :P

[19:43] <timotimo> gfldex: wow, that's super helpful!

[19:44] <gfldex> you need to click the little gear icon on the page where you toggle travis builds

[19:45] *** CIAvash joined
[19:45] *** ggoebel left
[19:46] *** curt_ left
[19:47] <rafschi> multi method new(Int() $year, Int() $month, Int() $day, Int() $hour, Int $minute, $second, Int() :$timezone = 0, :&formatter)# since 6.d

[19:47] <moritz> rafschi: Instant is a monotonic clock (TAI); DateTime is civil time, which deals with such nuisances as leap seconds

[19:48] <notviki> rafschi: there's no 6.d :)

[19:48] <rafschi> moritz: I got confused because it talks about leap seconds in the docs.

[19:49] <notviki> m: say DateTime('2016-12-31T23:59:60')

[19:49] <camelia> rakudo-moar 6d28c1: OUTPUT«Cannot find method 'DateTime' on object of type Str␤  in block <unit> at <tmp> line 1␤␤»

[19:49] <notviki> m: say DateTime.new('2016-12-31T23:59:60')

[19:49] <camelia> rakudo-moar 6d28c1: OUTPUT«2016-12-31T23:59:60Z␤»

[19:49] <rafschi> My doubt about the method above is why does there's Int() for hour, Int for minute and Any for second.

[19:49] <notviki> m: say DateTime.new('2016-12-31T23:59:60').Instant

[19:49] <camelia> rakudo-moar 6d28c1: OUTPUT«Instant:1483228836␤»

[19:50] <notviki> m: say DateTime.new('2016-12-31T23:59:59').Instant

[19:50] <camelia> rakudo-moar 6d28c1: OUTPUT«Instant:1483228835␤»

[19:50] <moritz> seconds can be fractional

[19:50] <CIAvash> .tell nicq20 1+2 ==> (* / 5)()

[19:50] <yoleaux> CIAvash: I'll pass your message to nicq20.

[19:50] <notviki> moritz: what do you mean by DateTime deals with leap seconds? Instant also seems to know about them 

[19:50] *** mcmillhj left
[19:51] *** shayan_ left
[19:51] <rafschi> OK, and why does $hour has coercion and $minute doesn't?

[19:51] <moritz> rafschi: no idea

[19:51] *** girafe joined
[19:51] <rafschi> And I think it shouldn't be in the public docs if it's not released yet.

[19:52] <moritz> notviki: Instant only knows about leap seconds for converting from/to civil time

[19:53] <notviki> rafschi: how come you say it's in 6.d BTW?

[19:53] *** ffadi joined
[19:53] <rafschi> I copied the line siceratscriptum

[19:54] <rafschi> https://docs.perl6.org/type/DateTime#method_new

[19:54] *** mcmillhj joined
[19:55] * notviki doesn't know what that means

[19:55] <notviki> rafschi: I mean why do you think that candidate isn't part of 6.c?

[19:56] <notviki> That list in docs seems way off the action candidate list: https://gist.github.com/zoffixznet/eb2d13d35e49725bcfd0b17d87233290

[19:56] <rafschi> Oh, I didn't test it. If it is part of 6.c, the docs shouldn't lie like that.

[19:56] <notviki> lie like what?

[19:56] <rafschi> notviki: It means "as it's written" in Latin.

[19:57] <rafschi> Sorry, used a stronger word then I should have.

[19:57] <moritz> "verbatim" in English

[19:57] *** rindolf joined
[19:57] *** effbiai left
[19:57] <rafschi> Well, "verbatim" is Latim too, so translating from Latin to Latin didn't seem to me to be very helpful.

[19:59] <rafschi> Well, in Latim "siceratscriptum" is actually "verbatimetliteratim" or "ipsisliteris"

[20:00] <rafschi> But sic[...] actually implies a mistake, which the others don't.

[20:00] *** ggoebel joined
[20:01] <melezhik> HI perl6 gurus! how can I make an alias to a function?

[20:01] <notviki> melezhik: constant &foo = &bar

[20:01] <melezhik> thanks notviki:

[20:02] <notviki> Seems a waste to use a dead language if you have to explain it so verbosely :)

[20:02] <dalek> doc: f5fb5ac | gfldex++ | doc/Type/Mu.pod6:

[20:02] <dalek> doc: add more examples to Mu.Bool

[20:02] <dalek> doc: review: https://github.com/perl6/doc/commit/f5fb5acd7e

[20:02] <synopsebot6> Link: http://doc.perl6.org/type/Mu

[20:03] <rafschi> Well, I don't have to. I just tought you guys were interested because the other day we were talking about it.

[20:04] <notviki> Yeah, but the original question is still left unanswered :)

[20:05] <rafschi> sic->as erat->it was scriptum->written

[20:06] <notviki> I meant "notviki │ rafschi: how come you say it's in 6.d BTW? "

[20:07] <notviki> As in, what made you think it was in 6.d and not 6.c

[20:07] <rafschi> Well, I answered it: I copied it from the docs and gave a link to the section where i saw it.

[20:07] <rafschi> Copied it verbatim.

[20:07] <melezhik> one more question. how can I declare a perl6 function which expect Str or Array as argument ?

[20:08] <gfldex> melezhik: see https://docs.perl6.org/type/Signature#Type_Constraints

[20:08] <notviki> rafschi: ah, I just now noticed the comment in the code section. Thanks.

[20:08] <gfldex> we should hang the sign that reads "please read Signature.pod6" at head hight

[20:08] <rafschi> melezhik: declare multis

[20:08] <melezhik> gfldex: thanks. I know it is possible in Perl6, just wanted some entry point to start with ...

[20:08] <El_Che> melezhik: have also a look at this: https://docs.perl6.org/language/functions#Multi-dispatch

[20:09] <dalek> doc: 1359196 | (Zoffix Znet)++ | doc/Type/DateTime.pod6:

[20:09] <dalek> doc: There's no 6.d yet

[20:09] <dalek> doc: review: https://github.com/perl6/doc/commit/1359196f32

[20:09] <synopsebot6> Link: http://doc.perl6.org/type/DateTime

[20:09] <melezhik> El_Che: - thanks!

[20:10] <notviki> rafschi: I didn't realize the "since 6.d" was from the copy-paste and not your writing :)

[20:10] *** pyrimidine joined
[20:10] <rafschi> But I told you I copied it as it's written there.

[20:10] <El_Che> melezhik: if the types match, maybe vargs is an option: https://docs.perl6.org/type/Signature#Slurpy_(A.K.A._Variadic)_Parameters

[20:11] <notviki> rafschi: yeah... I guess you did :)

[20:11] *** Tonik joined
[20:12] <melezhik> El_Che: sure, will take this into account ...

[20:12] <rafschi> Take care, wonderful people. Bye.

[20:13] <notviki> m: multi foo ($ where Str|Array) { say "str or array thing" }; multi foo (|) { say "sommeing else" }; foo "foo"; foo ["foo"]; foo 42

[20:13] <camelia> rakudo-moar 6d28c1: OUTPUT«str or array thing␤str or array thing␤sommeing else␤»

[20:13] *** rafschi left
[20:13] *** jraglin left
[20:14] *** jraglin joined
[20:14] <gfldex> can I hand a github repo over to an organisation?

[20:15] <notviki> Yup

[20:16] <gfldex> i found the docu on transfers

[20:16] <notviki> /settings -> transfers ; Danger zone "Transfer"

[20:16] <gfldex> I'm asking because zef depends on TAP::Harness. The latter saw it's last commit 22 Apr 2016 and there are outstanding PRs fore quite some time.

[20:17] <notviki> Are you sure it depends on THAT TAP::Harness and not one in core?

[20:17] <notviki> .oO( this is getting confusing already... )

[20:18] <notviki> buggable: eco TAP::Harness

[20:18] <buggable> notviki, TAP::Harness 'TAP harness for perl6': https://github.com/Leont/tap-harness6

[20:18] <gfldex> that's the one I am refering to

[20:20] <notviki> I guess this person wrote our core TAP::Harness; 'cause code is very similar

[20:20] <notviki> and it has the same bug in it

[20:21] *** ramillies left
[20:21] *** labster joined
[20:24] <notviki> ummm

[20:24] <gfldex> ugexe: i'm trying to track down the rakudo commit right now that made TAP::Harness fail

[20:24] <gfldex> gonna take a while :-|

[20:24] <notviki> gfldex: we already found it

[20:25] <gfldex> nice

[20:25] <notviki> gfldex: https://irclog.perlgeek.de/perl6-dev/2017-01-05#i_13862285

[20:25] <notviki> And well, it makes me think that THAT ^ tap harness isn't the harness used by zef? 

[20:25] <notviki> oohhh

[20:25] <notviki> Riiight

[20:25] <notviki> So then my fix to TAP::Harness in core won't fix zef if it's using THAT TAP::Harness

[20:26] <notviki> This :auth thing is working out great, BTW </sarcasm>

[20:26] <notviki> But the fix in core TAP::Harness will be the same as one needed in TAP::harness:auth<Leont>

[20:26] <gfldex> if TAP::Harness is in core we should remove it from modules.perl6.org

[20:27] <notviki> But it's someone's module.

[20:27] <gfldex> who ignores PRs

[20:27] <notviki> And I diffed it and there's hundreds of lines different from core one

[20:27] <notviki> Heh

[20:28] <gfldex> does the core one provide a prove6 executable?

[20:28] <notviki> Don't think so

[20:28] <gfldex> then we need the module of Leont

[20:29] <gfldex> notviki: if your fix works for the :auth<Leont> one, could you send a PR his way?

[20:30] <gfldex> i could then fork and nick ownership in the ecosystem

[20:30] <notviki> But you just said he ignores PRs

[20:30] <gfldex> after writing a friendly e-mail ofc

[20:30] <gfldex> after I forked I can nick the PRs too

[20:30] <notviki> So we'll have three TAP::Harnesses? 

[20:30] <notviki> hahahaha

[20:31] <gfldex> the alternative would be to implement prove6 in core real quick :)

[20:31] <gfldex> the whole thing is a result of switching to zef as the default module installer. As a result we have to solve those problems.

[20:32] <notviki> What's the problem we're solving again?

[20:32] <notviki> Like, why do we need prove6?

[20:32] <El_Che> lizmat: was leont in the amsterdam pm meeting you went the day before yesterday?

[20:34] <notviki> This is the one-liner I used to debug the testbreaker bug: use TAP; await TAP::Harness.new.run('t.t').waiter;

[20:34] <gfldex> the problem is that one who needs prove6 for automatic testing is going to install TAP::Harness what will make zef fail the next time it runs tests.

[20:34] <notviki> Why would it make zef fail then?

[20:35] <gfldex> it did when I tried to do just that

[20:35] <gfldex> it seams to pick the wrong TAP::Harness

[20:35] <notviki> But then that is the actual problem. And I don't see how hostile-forking TAP::Harness and releasing 3rd TAP::Harness into ecosystem would solve it :S

[20:36] <notviki> I wonder what sort of :auth<> the core stuff has :/

[20:36] *** CIAvash left
[20:36] <notviki> m: use TAP:auth<blah>

[20:36] <camelia> rakudo-moar 6d28c1: OUTPUT«===SORRY!===␤Could not find TAP:auth<blah> at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-2/share/perl6␤    CompUnit…»

[20:36] *** ChoHag left
[20:36] <gfldex> not releasing but replacing. So the ecosystem would have only one

[20:36] <notviki> gfldex: so you'd just de-list someone's module because you don't like it? What if they have a production system depending on it?

[20:37] <gfldex> no, I delist it because it doesnt work and creates failed tests for modules that depend on it

[20:37] <gfldex> _after_ sending a friendly e-mail to the original author

[20:37] <gfldex> if you know a better solution I'm all for it

[20:37] <gfldex> less work for me

[20:37] *** melezhik left
[20:38] <notviki> We leave the module in and use what works.

[20:38] <El_Che> can-of-worms-territory, ask the cpan admins (e.g. dbix drama)

[20:38] <notviki> If a module doesn't work for you, use something else.

[20:39] <notviki> I have lots of modules in Perl 5 with bugs I don't have time/don't care to fix and that I use on production system. If PAUSE admins delist that module just because it failed to solve their problem XYZ, that'd break my system

[20:39] <gfldex> CPAN got a voting system, we don't

[20:40] <gfldex> I'm not a big fan of wasting other ppls time.

[20:40] <El_Che> gfldex: ask leont if you can have co-maint? 

[20:41] <gfldex> i will try to do that first

[20:41] *** ffadi left
[20:41] <notviki> I'm not a big fan of removing code people may be dependant on based on undefined and arbitrary rules.

[20:41] <notviki> And we have a voting system: GitHub stars

[20:42] *** rindolf left
[20:43] <gfldex> where are those displayed on modules.perl6.org ?

[20:44] <notviki> It's the column to the right of travis status

[20:45] <notviki> travis | Stars | Issues

[20:46] *** TEttinger joined
[20:46] <lizmat> El_Che: he was not

[20:46] <ugexe> notviki: zef uses TAP.pm in rakudo

[20:47] <notviki> thanks

[20:47] <notviki> will fix it ~2hrt

[20:50] <notviki> ugexe: what :auth<> do we specify to indicate core modules?

[20:50] *** bjz_ joined
[20:51] * notviki relocates

[20:51] <ugexe> well for NativeCall, TAP (whatever is in lib) it's perl. for those its "declared" in here https://github.com/rakudo/rakudo/blob/nom/tools/build/install-core-dist.pl

[20:54] *** ocbtec left
[20:54] *** ChoHag joined
[20:55] *** rindolf joined
[20:58] <pmurias> gfldex: the tap-harness PR that needs to be merged is by ugexe?

[20:58] *** shayan_ joined
[20:59] <gfldex> pmurias: it needs to go into rakudo and https://github.com/Leont/tap-harness6

[20:59] <gfldex> Leont was active on github 3 weeks ago, so he aint no dead

[21:00] <ugexe> notviki has a patch, he said he will apply when he gets a chance in a few hours

[21:01] *** TEttinger left
[21:01] *** mcmillhj left
[21:01] *** pyrimidine left
[21:03] *** mcmillhj joined
[21:04] *** pyrimidine joined
[21:08] *** mcmillhj left
[21:08] *** pyrimidine left
[21:09] *** ttkp6 joined
[21:14] *** shayan_ left
[21:14] *** shayan_ joined
[21:15] *** mcmillhj joined
[21:19] *** rindolf left
[21:20] *** mcmillhj left
[21:24] *** mr_ron left
[21:26] *** pyrimidine joined
[21:26] *** rindolf joined
[21:27] *** TEttinger joined
[21:28] *** pyrimidine left
[21:28] *** bjz_ left
[21:31] *** mcmillhj joined
[21:34] *** kupopo joined
[21:34] *** shadowpaste left
[21:35] *** xzhao joined
[21:36] *** mcmillhj left
[21:36] *** shadowpaste0 is now known as shadowpaste

[21:36] *** cdg joined
[21:38] *** shadowpaste0 joined
[21:42] *** mcmillhj joined
[21:46] *** mcmillhj left
[21:47] *** FROGGS left
[21:58] *** cdg left
[21:58] *** shayan_ left
[21:59] *** mcmillhj joined
[21:59] *** skids left
[22:00] *** shayan_ joined
[22:05] *** susmus left
[22:08] *** Gasher joined
[22:19] *** RabidGravy left
[22:20] *** bjz joined
[22:20] *** bjz left
[22:23] <pmurias> nqp-js depends on an abandoned node-inspector npm module, I have worked it around by applying a PR to my github fork but I'm not sure how to deal with that in the long term

[22:24] *** mcmillhj left
[22:34] *** cpage_ left
[22:36] *** cdg joined
[22:45] *** xzhao left
[22:47] *** xzhao joined
[22:52] *** Tonik left
[22:55] *** rindolf left
[22:57] <dalek> doc: 0525656 | (Tommy Stanton)++ | doc/Type/Pair.pod6:

[22:57] <dalek> doc: Fix typo (possessive) in Pair

[22:57] <dalek> doc: review: https://github.com/perl6/doc/commit/0525656e69

[22:57] <dalek> doc: e1cb0fa | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Type/Pair.pod6:

[22:57] <dalek> doc: Merge pull request #1122 from tommystanton/pair-typo

[22:57] <synopsebot6> Link: http://doc.perl6.org/type/Pair

[22:57] <synopsebot6> Link: http://doc.perl6.org/type/Pair

[22:57] <dalek> doc: 

[22:57] <dalek> doc: Small typos on page for Pair type

[22:57] <dalek> doc: review: https://github.com/perl6/doc/commit/e1cb0fae03

[23:00] *** mcmillhj joined
[23:01] *** cpage_ joined
[23:01] *** shayan_ left
[23:03] *** shayan_ joined
[23:05] *** mcmillhj left
[23:12] *** cyphase left
[23:15] <notviki> well, this was a pointless excercise. Neither TAP 12 spec, nor 13 spec, nor the 14 draft say ANYTHING AT ALL about backslashes in test descriptions or their ability to prevent interpretation of description as one of the directives -_-

[23:17] *** espadrine left
[23:19] *** mcmillhj joined
[23:19] *** cyphase joined
[23:22] *** khw left
[23:22] *** wamba left
[23:24] *** mcmillhj left
[23:25] *** kyan joined
[23:27] *** rpburkholder joined
[23:31] *** rpburkholder left
[23:32] *** rpburkholder joined
[23:34] *** dj_goku left
[23:36] *** khw joined
[23:37] *** Guest4235 is now known as matt_

[23:37] *** mcmillhj joined
[23:37] *** shayan_ left
[23:42] *** mcmillhj left
[23:55] <samcv> u: male sign

[23:55] <unicodable6> samcv, U+2640 FEMALE SIGN [So] (♀)

[23:55] <unicodable6> samcv, U+2642 MALE SIGN [So] (♂)

[23:55] <unicodable6> samcv, U+26A2 DOUBLED FEMALE SIGN [So] (⚢)

[23:55] <unicodable6> samcv, https://gist.github.com/7c1150c01f2c280869553abc103fb5d7

[23:57] <samcv> wow ok :) got us down to 246 failing emoji tests out of 2822 down from 1050 or so failing. gonna make PR for moar :D

[23:57] <notviki> \o/

