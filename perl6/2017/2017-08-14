[00:05] <mspo> that's the chicago boss guy, right?

[00:05] *** dubi0us_ joined
[00:09] *** _28_ria left
[00:11] <mspo> I didn't know about =~=

[00:13] *** dubi0us_ left
[00:14] <timotimo> =~= has more nuance to it than just 1e-15 or what

[00:16] *** Kyo91_ joined
[00:18] <timotimo> you can set $*TOLERANCE and it'll honor that

[00:29] *** Cabanossi left
[00:31] *** Cabanossi joined
[00:35] *** dubi0us joined
[00:39] <raschipi> Dynamic variables are so neat too: 

[00:39] <raschipi> m: {my $*TOLERANCE = 100;say 0 ≅ 99};say 0 ≅ 99

[00:39] <camelia> rakudo-moar c22902: OUTPUT: «True␤False␤»

[00:39] *** dubi0us left
[00:40] <ckraniak> So I have a CStruct and need to pass its pointer to a function. How do I get that pointer?

[00:41] <timotimo> whenever you pass a CStruct to a function it'll be passed by pointer

[00:42] <timotimo> time for me to sleep

[00:42] <ckraniak> I feel like I ought to have known that

[00:42] <ckraniak> Thanks

[00:43] *** lookatme joined
[00:46] <lookatme> morning

[00:47] *** BenGoldberg joined
[00:52] *** pierre_ joined
[00:52] *** Actualeyes joined
[00:53] *** Kyo91_ left
[00:59] <ckraniak> So I know y'all were saying if I wanted to load a function pointer into a CStruct I needed to nativecast to pointer

[00:59] <ckraniak> Only missing bit now is I don't know how to define a function I can do that with in Perl

[01:00] <ckraniak> Can I tack an "is native" and give it an actual function body and expect it to behave?

[01:01] <ckraniak> Basically how to define a callback in Perl that C can use, or if that is eve a thing

[01:08] *** skids joined
[01:11] <lookatme> the callback is normal function in Perl 6 declare with sub

[01:12] *** dubi0us joined
[01:15] <ckraniak> With native typed args and / or return?

[01:22] <lookatme> yeah

[01:25] *** BenGoldberg left
[01:25] <ckraniak> Alright, let's give that a shot then

[01:26] *** dubi0us left
[01:28] *** dubi0us joined
[01:29] * zengargoyle yay TEPC videos.

[01:32] <lookatme> m: use NativeCall; my Buf[uint32] $buf .= new(<6 2 8 4 5>); sub qsort(Buf[uint32], size_t, size_t, & ( Pointer[uint32], Pointer[uint32] --> int32 )) is native(Str) { * }; sub compare(Pointer[uint32] $l, Pointer[uint32] $r) of int32 { return $l.deref > $r.deref; }; qsort($buf, 5, nativesizeof(uint32), &compare); say $buf;

[01:32] <camelia> rakudo-moar c22902: OUTPUT: «Buf[uint32]:0x<02 04 05 06 08>␤»

[01:32] <lookatme> ckraniak, an example ^^^

[01:33] <lookatme> void qsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *));

[01:34] <ckraniak> "of int32"?

[01:34] *** Actualeyes left
[01:35] <lookatme> the return type constraint

[01:35] <lookatme> same as --> int32, returns int32

[01:36] <ckraniak> Ok, I don't think I've seen that flavor before and wanted to make sure

[01:36] <ckraniak> Thanks, that is great help

[01:37] <lookatme> YW

[01:37] *** cpage_ joined
[01:38] <lookatme> I prefer `of`, but seems like in native sub signature callback can not use `of` instead of `-->` style

[01:40] <AlexDaniel> lookatme: perhaps relevant: https://github.com/perl6/doc/issues/1024

[01:41] *** Rawriful left
[01:41] <AlexDaniel> lookatme: and also https://github.com/perl6/doc/issues/1027

[01:42] <AlexDaniel> lookatme: and then https://docs.perl6.org/type/Signature#Constraining_Return_Types which explains why it may be a good idea to prefer -->

[01:43] <lookatme> AlexDaniel, thanks

[01:43] <lookatme> Actually of is the shortest :)

[01:44] *** Cabanossi left
[01:45] *** ilbot3 left
[01:46] *** Cabanossi joined
[01:49] <raschipi> zengargoyle: Do you have a link?

[01:51] *** ilbot3 joined
[01:51] *** ChanServ sets mode: +v ilbot3

[01:55] *** pierre_ left
[01:56] *** pierre_ joined
[01:59] *** pierre_ left
[01:59] *** pierre_ joined
[02:04] *** cpage left
[02:05] *** noganex joined
[02:08] *** noganex_ left
[02:20] <zengargoyle> raschipi: https://www.youtube.com/watch?v=B5KVLlnxN2Q&list=PLfyGEwlEhJmUzPhE4RPJ8P8L3okxiRJ3p&index=4

[02:20] <zengargoyle> it's under 'The Perl Conference' user, it did take me several search tries to actualy find it....

[02:21] <zengargoyle> i had to search for 'the european perl conference amsterdam 2017' to actually get close... :)

[02:22] <raschipi> I also did a quick search and didn't find anyhing. They should create a proper channel, Youtube really doesn't like to promote user videos anymore.

[02:27] *** Khisanth left
[02:35] *** markmont left
[02:42] *** Khisanth joined
[02:43] *** cibs_ is now known as cibs

[02:52] *** pierre_ left
[02:53] <lookatme> m: $_ = "light"; say $/ if rx/light/;

[02:53] <camelia> rakudo-moar c22902: OUTPUT: «｢light｣␤»

[02:54] <lookatme> why rx// match against $_ ? 

[02:55] *** sufrosti1o left
[02:55] *** sufrostico left
[02:56] <raschipi> lookatme: It does that when coerced to a Bool

[02:57] <lookatme> m: $_ = "light"; rx/light/; say $/;

[02:57] <camelia> rakudo-moar c22902: OUTPUT: «｢light｣␤»

[02:58] <lookatme> but in sink context, it still match against $_

[02:58] *** pierre_ joined
[02:58] <raschipi> yep

[02:59] <lookatme> https://docs.perl6.org/language/regexes#Lexical_conventions

[02:59] <lookatme> I'm not get it, the document said rx// just a regex object

[02:59] *** pierre_ left
[03:01] <lookatme> m: $_ = "light"; say rx/light/;

[03:01] <camelia> rakudo-moar c22902: OUTPUT: «rx/light/␤»

[03:01] <zengargoyle> i do sorta wish TPC invested a bit in some audio/video/streaming/recording solution thingy that they shipped around to conferences.

[03:01] *** dubi0us left
[03:02] *** dubi0us joined
[03:02] <lookatme> :) I wonder we have m// yet. Why let rx// match against in sink context.

[03:02] <AlexDaniel> lookatme: why would you need to sink a regex object otherwise?

[03:05] <lookatme> Nothing, I just study tutorial, don't understand this.

[03:08] * zengargoyle goes HA at 'Laurent Rosenfeld (‎lolo78‎). Functional Programming in Perl 6' talking about MJD's HOP.  now i won't have to think about it myself. :P  

[03:08] *** dubi0us left
[03:14] *** Cabanossi left
[03:14] <lookatme> m: say "\x{123}"

[03:14] <camelia> rakudo-moar c22902: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of curlies around escape argument; in Perl 6 please use square brackets␤at <tmp>:1␤------> 3say "\x{7⏏05123}"␤»

[03:15] *** Cabanossi joined
[03:15] *** mr-fooba_ joined
[03:16] *** dubi0us joined
[03:16] *** mr-foobar left
[03:24] *** dubi0us left
[03:27] *** dubi0us joined
[03:31] *** dubi0us left
[03:31] *** lookatme left
[03:32] *** lookatme joined
[03:37] *** dubi0us joined
[03:37] *** khw left
[03:43] *** Cabanossi left
[03:45] *** dubi0us_ joined
[03:45] *** dubi0us left
[03:45] *** Cabanossi joined
[03:49] *** dubi0us_ left
[03:55] *** dubi0us joined
[03:57] *** khw joined
[03:59] *** dubi0us left
[04:02] *** skids left
[04:05] *** pilne left
[04:05] *** dubi0us joined
[04:10] *** dubi0us left
[04:10] *** aborazmeh joined
[04:10] *** aborazmeh left
[04:10] *** aborazmeh joined
[04:15] *** dubi0us joined
[04:20] *** dubi0us left
[04:21] *** piojo9 joined
[04:25] *** dubi0us joined
[04:29] *** xtreak joined
[04:33] *** dubi0us left
[04:44] *** Cabanossi left
[04:45] *** wamba joined
[04:45] *** Cabanossi joined
[04:46] *** dubi0us joined
[04:50] *** dubi0us left
[04:50] *** khw left
[04:53] *** itaipu joined
[04:56] *** dubi0us joined
[05:00] *** masak joined
[05:04] *** dubi0us left
[05:05] *** xtreak left
[05:05] *** dubi0us joined
[05:10] *** dubi0us left
[05:16] *** dubi0us joined
[05:18] *** lowbro joined
[05:19] *** andrzejku joined
[05:21] *** dubi0us left
[05:25] *** dubi0us joined
[05:30] *** dubi0us left
[05:36] *** nadim joined
[05:36] *** dubi0us joined
[05:38] *** lookatme left
[05:38] *** aborazmeh left
[05:38] *** lookatme joined
[05:41] *** dubi0us left
[05:46] *** dubi0us joined
[05:50] *** dubi0us left
[05:56] *** andrzejku left
[05:56] *** dubi0us joined
[05:58] *** raschipi left
[05:59] *** lookatme left
[06:00] *** lookatme joined
[06:00] *** dubi0us left
[06:01] <lookatme> ls /usr/bin -al | perl6 -e '$*IN.Supply(:size<8>).tap(&print);' | more 

[06:01] <lookatme> Hi, I found a IO problem

[06:02] <lookatme> When press q quit more command, rakudo complain: `Failed to write bytes to filehandle: Broken pipe`

[06:04] *** itaipu left
[06:05] *** dubi0us joined
[06:06] *** brrt joined
[06:08] <moritz> lookatme: isn't that normal behavior in Linux?

[06:09] <lookatme> I don't think so

[06:09] <moritz> you have a pipe, quit the consumer of the pipe, and the producer gets a SIGPIPE

[06:09] <moritz> and the default handler for SIGNPIPE aborts the program

[06:09] <brrt> (iff the producer writes to the pipe)

[06:09] <brrt> i believe so to

[06:09] *** dubi0us left
[06:12] <nadim> morning, I have role X { has $x ; methods ... } now I want to inherit from it so $x is set. something like role Y { method new { $.x = 11 } }  but new is not called what is?

[06:13] *** pierre_ joined
[06:13] <lookatme> m: role X { has $x ; }; role Y does role X { method new { nextwith(x => 11); } }; say Y.new;

[06:13] <camelia> rakudo-moar c22902: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Invalid typename 'role'␤at <tmp>:1␤------> 3role X { has $x ; }; role Y does role7⏏5 X { method new { nextwith(x => 11); } }␤»

[06:13] <nadim> is it BUILD, TWEAK?

[06:13] <lookatme> m: role X { has $x ; }; role Y does X { method new { nextwith(x => 11); } }; say Y.new;

[06:13] <camelia> rakudo-moar c22902: OUTPUT: «Y.new␤»

[06:13] <lookatme> m: role X { has $.x ; }; role Y does X { method new { nextwith(x => 11); } }; say Y.new;

[06:13] <camelia> rakudo-moar c22902: OUTPUT: «Y.new(x => 11)␤»

[06:13] <lookatme> do you mean this ?

[06:14] <lookatme> no, BUILD TWEAK are submethod

[06:14] <nadim> trying it ...

[06:14] <gfldex> m: role R { has $.x = 42 }; class C does R {}; C.new.x.say

[06:14] <camelia> rakudo-moar c22902: OUTPUT: «42␤»

[06:15] *** dubi0us joined
[06:16] <nadim> gfldex: I want x to change in the R2 role

[06:17] <gfldex> m: role R { has $.x; submethod BUILD { $!x = 42 } }; class C does R {}; C.new.x.say

[06:17] <camelia> rakudo-moar c22902: OUTPUT: «42␤»

[06:18] <lookatme> m: role R { has $.x = 42 }; class C does R { submethod TWEAK { $!x = 42; } }; C.new.x.say

[06:18] <camelia> rakudo-moar c22902: OUTPUT: «42␤»

[06:18] <lookatme> m: role R { has $.x; }; class C does R { submethod TWEAK { $!x = 42; } }; C.new.x.say

[06:18] <camelia> rakudo-moar c22902: OUTPUT: «42␤»

[06:18] <nadim> lookatme: I failed to mention that I do not call new, the roles are passed as arguments

[06:19] <nadim> so I do not have the object either, just the roles to tweak

[06:19] <lookatme> m: role R { has $.x; }; role C does R { submethod TWEAK { $!x = 42; } }; C.new.x.say

[06:19] <camelia> rakudo-moar c22902: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Attribute $!x not declared in role C␤at <tmp>:1␤------> 3does R { submethod TWEAK { $!x = 42; } }7⏏5; C.new.x.say␤    expecting any of:␤        horizontal whitespace␤        postfix␤     …»

[06:19] <gfldex> there is a COMPOSE phaser but it's not documented (yet)

[06:19] *** dubi0us left
[06:21] <lookatme> That's what I faced several month ago, role does not meet $!x in subrole

[06:21] <nadim> gfldex: any idea of it it would work here? 

[06:21] <lookatme> so I use class replaced it

[06:22] <lookatme> m: role R { has $.x; }; role C does R { submethod BUILD { $!x = 42; } }; C.new.x.say

[06:22] <camelia> rakudo-moar c22902: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Attribute $!x not declared in role C␤at <tmp>:1␤------> 3does R { submethod BUILD { $!x = 42; } }7⏏5; C.new.x.say␤    expecting any of:␤        horizontal whitespace␤        postfix␤     …»

[06:22] <nadim> hmm, can't tweak a subrole either, no object to play wiht

[06:22] <lookatme> and more, you can not use nextwith in TWEAK or BUILD, they are not in inheritance chain

[06:23] <nadim> neither does BUILD

[06:25] *** dubi0us joined
[06:26] <nadim> lookatme: how did you work around it?

[06:26] <lookatme> m: role R { has $.x; }; class C does R { submethod BUILD { $!x = 42; } }; C.new.x.say

[06:26] <camelia> rakudo-moar c22902: OUTPUT: «42␤»

[06:26] <lookatme> use class 

[06:27] <nadim> can't. the objects are build somewhere else, all I can do is pass roles

[06:28] <lookatme> I'm not get it, what are you trying to do ?

[06:30] <nadim> one of the roles I am passing has $.x; when the object is created I want $.x to be set to, say,  42. 

[06:30] *** dubi0us left
[06:30] <nadim> the role, I have, uses $x to display a limited part of a string. if I do not set $.x, the whole string is displayed

[06:31] <nadim> the only way I see is to have a derived role which will set $.x

[06:31] <nadim> remember that I do not have the object, just roles I can pass

[06:33] *** wamba left
[06:35] *** pierre_ left
[06:36] <lookatme> but when you hold the role, how you get $.x from it ?

[06:36] *** andrzejku_ is now known as andrzejku

[06:36] *** dubi0us joined
[06:38] <nadim> I have two pieces of code. In the first one I had the object so I could $o.x = 42. In the second code I call a sub which contructs a special object that can take roles.

[06:38] <nadim> as a shortcut I copied the whole role but it not very OO

[06:43] <lookatme> Hmm, can you show me some code ?

[06:46] *** dubi0us left
[06:46] *** dubi0us joined
[06:48] *** nadim left
[06:50] *** dubi0us left
[06:55] *** brrt left
[06:56] <moritz> ok, I'm rebooting hack.p6c.org soon

[06:57] *** dalek left
[06:57] *** [ptc] left
[06:57] *** SourceBaby left
[06:57] *** synopsebot6 left
[06:57] *** Util left
[06:57] *** dalek joined
[06:57] *** ChanServ sets mode: +v dalek

[06:57] *** synopsebot6 joined
[06:57] *** ChanServ sets mode: +v synopsebot6

[06:58] *** Cabanossi left
[07:00] *** Cabanossi joined
[07:04] *** ijneb left
[07:05] *** lizmat left
[07:06] *** dubi0us joined
[07:06] *** wamba joined
[07:10] *** dubi0us left
[07:14] *** pierre_ joined
[07:16] *** dubi0us joined
[07:16] *** xtreak joined
[07:20] *** dubi0us left
[07:20] *** nadim joined
[07:20] *** xtreak left
[07:20] *** brrt joined
[07:22] * TimToady finally back on a network with port 22...

[07:22] * brrt links http://www.evanmiller.org/a-review-of-perl-6.html

[07:27] *** dubi0us joined
[07:28] *** wamba left
[07:29] <nadim> lookatme: do you want me to golf it or the real code?

[07:31] <lookatme> either will be ok

[07:31] *** dubi0us left
[07:32] <nadim> probably later today, $work is calling :)

[07:32] <nadim> thanks

[07:32] <lookatme> ok

[07:33] *** darutoko joined
[07:35] *** dubi0us joined
[07:39] *** dubi0us left
[07:43] *** Cabanossi left
[07:43] *** abraxxa joined
[07:43] *** lizmat joined
[07:44] *** dubi0us joined
[07:45] *** Cabanossi joined
[07:49] *** dubi0us left
[07:51] *** ChoHag left
[07:54] *** xtreak joined
[07:55] *** dubi0us joined
[07:59] *** dwarring left
[08:00] *** dubi0us left
[08:01] *** jonas1 joined
[08:04] *** Guest69863 joined
[08:07] *** dubi0us joined
[08:08] <piojo9> Is there any particular reason string concatenation doesn't work with junctions?

[08:08] <piojo9> p6 my $extensions = '.' ~ any(<txt bat exe>);

[08:08] <piojo9> p6: my $extensions = '.' ~ any(<txt bat exe>);

[08:08] <camelia> rakudo-moar c22902: ( no output )

[08:08] <brrt> no suchr eason

[08:08] <brrt> lizmat is working on that

[08:08] <piojo9> p6: 'foo.exe' ~~ ('.' ~ any(<txt bat exe>));

[08:08] <camelia> rakudo-moar c22902: ( no output )

[08:08] <brrt> lizmat++ i should say

[08:09] <piojo9> @brrt: thanks, good to know it's intended to work eventually.

[08:09] <lizmat> m: dd  '.' ~ any(<txt bat exe>)

[08:09] <camelia> rakudo-moar c22902: OUTPUT: «any(".txt", ".bat", ".exe")␤»

[08:09] <piojo9> it works for you!

[08:09] <lizmat> that part already works in bleed

[08:09] *** g0d355__ left
[08:09] <lizmat> piojo9: what version are you on ?

[08:10] <piojo9> rakudo star 2017-07, windows

[08:10] <Juerd> Personally, I find "any <.txt .bat .exe>" easier to read...

[08:10] <piojo9> I have a lot of extensions in the real code

[08:10] <piojo9> I want it to fit on the line :P

[08:10] <lookatme> buggable: eco HTTP

[08:10] <buggable> lookatme, Found 43 results: HTTP::UserAgent, HTTP::Server::Async, HTTP::Server::Tiny, HTTP::Easy, HTTP::Client. See https://modules.perl6.org/s/HTTP

[08:11] *** dubi0us left
[08:11] <piojo9> lizmat: thanks for your work. 

[08:11] <lizmat> piojo9: well, it wasn't fixed in 2017.07, so I'm afraid you will have to wait for 2017.10 * if you want to stick to Rakudo *

[08:12] <piojo9> My home (linux) computer is more flexible. Which branch/version would you recommend for having a good balance of completeness and correctness?

[08:16] *** dubi0us joined
[08:17] *** rindolf joined
[08:18] <lizmat> piojo9: well, eh...  bleed ?  :-)

[08:18] <lizmat> more seriously: using the compiler releases, you are a little bit more certain everything will work

[08:19] <lizmat> and we expect the 2017.08 release next weekend

[08:19] <lizmat> which should give you correct ~ wrt Junctions

[08:19] <piojo9> lizmat: Good to know, thanks

[08:19] <lookatme> :) this month is a little later

[08:20] <piojo9> lizmat: If I knew better perl6, I'd be happy to use bleed. But since I don't, I may think the compiler's bugs are my mistakes

[08:20] <brrt> fair enough

[08:20] *** zakharyas joined
[08:20] <brrt> unfortuantley, compiler bugs are hardly missing from official releases :-)

[08:23] *** Guest69863 left
[08:23] <piojo9> brrt: are you voting for a reasonably capable (in general) perl6 newbie to use bleed? :D

[08:24] <brrt> hmmm. i'm not sure what i'm voting for at this point

[08:24] <brrt> yes, but

[08:24] <brrt> arguably, it should not be necessary

[08:24] <piojo9> Haha. Just looking for advice on the best environment for learning and fairly simple (100-1000 line) scripting

[08:24] <brrt> i don't think we're in the part of the cycle where we have self-sustaining quality checks

[08:25] <brrt> i.e. like perl5 has

[08:25] <brrt> we have a test suite, but it's not nearly large enough

[08:25] *** dubi0us left
[08:26] *** pmurias joined
[08:26] <moritz> the p5 developers regularly smoke-test most of CPAN with their bleadperl

[08:26] <moritz> because their core test suite alone isn't enough either

[08:27] <brrt> that's mostly what i mean, yes

[08:27] <brrt> a heavily-used, mature language can afford that

[08:27] <brrt> now rakudo is one hell of a test suite by itself

[08:27] <brrt> but it's nowhere near everything

[08:27] <pmurias> brrt: rakudo is written in NQP

[08:28] <brrt> true

[08:28] <brrt> but for MoarVM that's still quite good

[08:28] <lookatme> :) NQP syntax is more functional style

[08:29] <pmurias> brrt: re afford that, is running tests for all our modules too expensive for Perl 6?

[08:30] <pmurias> brrt: or do you mean that we don't have enough modules to test everything?

[08:31] <gfldex> last time I checked it took about 8h on a not so fast host to test the whole ecosystem

[08:31] <gfldex> it seams AMD is making CPUs for us :)

[08:35] <nadim> Am I right to assume that a Socket going out of scope will have it's close method called?

[08:36] *** dubi0us joined
[08:37] <moritz> only when the GC collects it

[08:37] <moritz> LEAVE $socket.close if $socket;

[08:40] <lizmat> or:

[08:40] <lizmat> LEAVE .close with $socket

[08:40] <brrt> brrt: more the later than the former

[08:40] <brrt> i don't expect that running a cpan smoke test is very cheap for the perl5 hackers

[08:43] *** Cabanossi left
[08:44] *** dubi0us left
[08:45] *** Cabanossi joined
[08:45] *** dubi0us joined
[08:45] <nadim> Well, it's a very good idea to close it rather than wait for the GC time. little example I had was getting very hacky and slow without.

[08:45] <nadim> thank to both of you for the details

[08:49] *** dubi0us left
[08:50] <lizmat> decommute&

[08:50] *** lizmat left
[08:56] *** dubi0us joined
[08:59] *** brrt left
[09:00] *** dubi0us left
[09:00] *** brrt joined
[09:01] *** brrt left
[09:05] *** gregf_ joined
[09:06] *** dubi0us joined
[09:10] *** dubi0us left
[09:16] *** dubi0us joined
[09:21] *** dubi0us left
[09:21] *** wamba joined
[09:24] *** brrt joined
[09:26] *** dubi0us_ joined
[09:30] *** dubi0us_ left
[09:31] *** zengargoyle left
[09:33] *** zengargoyle joined
[09:34] *** ufobat joined
[09:34] *** TEttinger left
[09:35] *** dubi0us joined
[09:40] *** dubi0us left
[09:41] <lookatme> .tell nadim contact me with nick `araraloren` later 

[09:41] <yoleaux> lookatme: I'll pass your message to nadim.

[09:41] *** lookatme left
[09:43] <stmuk> lizmat: I wouldn't agree that monthly releases are any more likely to work than Rakudo Star

[09:43] <stmuk> they are both frequently broken to be frank

[09:44] *** dubi0us joined
[09:49] *** dubi0us left
[09:54] *** ChoHag joined
[09:55] *** dubi0us joined
[09:58] *** rurban joined
[10:00] *** dubi0us left
[10:05] *** ijneb joined
[10:05] *** dubi0us joined
[10:10] *** dubi0us left
[10:11] *** xtreak left
[10:12] *** xtreak joined
[10:13] *** pmurias left
[10:14] *** pmurias joined
[10:15] *** lichtkind joined
[10:15] *** xtreak left
[10:15] *** xtreak joined
[10:16] *** dubi0us joined
[10:21] *** sena_kun joined
[10:24] *** lichtkind left
[10:24] *** dubi0us left
[10:25] *** dubi0us joined
[10:26] *** lichtkind joined
[10:29] *** pierre_ left
[10:30] *** dubi0us left
[10:34] *** mr-fooba_ left
[10:36] *** dubi0us joined
[10:37] *** mr-foobar joined
[10:43] *** cpage joined
[10:44] *** dubi0us left
[10:47] *** dubi0us joined
[10:48] *** andreoss joined
[10:49] <andreoss> m:  role F[::A] {}; role G[::A] does F[A] {}; say G[Int].new.^roles

[10:49] <camelia> rakudo-moar a3c71e: OUTPUT: «((G[Int]) (F[A]))␤»

[10:51] <andreoss> m: role F[::A] { method type { A.WHAT }}; role G[::A] does F[::A] {}; say G[Int].new.^roles[*-1].new.type

[10:51] <camelia> rakudo-moar a3c71e: OUTPUT: «No such method 'gist' for invocant of type 'A'␤  in block <unit> at <tmp> line 1␤␤»

[10:51] <andreoss> what is A in F[A]?

[10:51] <andreoss> why it's not F[Int]?

[10:53] <andreoss> m: role F[$A] { method type { $A.WHAT }}; role G[$A] does F[$A] {}; say G[Int].new.^roles

[10:53] <camelia> rakudo-moar a3c71e: OUTPUT: «((G[Int]) (F[Mu]))␤»

[10:56] *** dubi0us_ joined
[10:56] *** dubi0us left
[11:00] *** dubi0us_ left
[11:05] *** dubi0us joined
[11:08] <moritz> m: role F[::A] { method type { A.WHAT }}; role G[::A] does F[::A] {}; say G[Int].new.^roles[0] ~~ G[Int]

[11:08] <camelia> rakudo-moar a3c71e: OUTPUT: «True␤»

[11:08] <moritz> m: role F[::A] { method type { A.WHAT }}; role G[::A] does F[::A] {}; say G[Int].new.^roles[0].^name

[11:08] <camelia> rakudo-moar a3c71e: OUTPUT: «G[Int]␤»

[11:09] <moritz> m: role F[::A] { method type { A.WHAT }}; role G[::A] does F[::A] {}; say G[Int].new.^roles

[11:09] <camelia> rakudo-moar a3c71e: OUTPUT: «((G[Int]) (F[A]))␤»

[11:09] <moritz> m: role F[::A] { method type { A.WHAT }}; role G[::A] does F[::A] {}; say G[Int].new.^roles[1].^name

[11:09] <camelia> rakudo-moar a3c71e: OUTPUT: «F[A]␤»

[11:09] *** dubi0us left
[11:10] <moritz> m: role F[::A] { method type { A.WHAT }}; role G[::A] does F[::A] {}; say G[Int].new.^roles[1] ~~ F[Int]

[11:10] <camelia> rakudo-moar a3c71e: OUTPUT: «False␤»

[11:12] *** zakharyas left
[11:16] *** dubi0us joined
[11:20] *** Alikzus left
[11:21] *** dubi0us left
[11:21] *** Alikzus joined
[11:25] *** andreoss left
[11:26] *** araraloren joined
[11:26] *** dubi0us_ joined
[11:28] *** Alikzus left
[11:29] *** Cabanossi left
[11:29] *** Alikzus joined
[11:30] *** dubi0us_ left
[11:30] *** Cabanossi joined
[11:31] *** dubi0us joined
[11:34] *** xtreak left
[11:34] *** brrt left
[11:40] *** markmont joined
[11:45] *** brrt joined
[11:49] *** rurban left
[11:49] *** mr-foobar left
[11:52] *** setty1 joined
[11:53] *** dubi0us left
[11:54] *** mr-foobar joined
[11:55] *** dubi0us joined
[11:58] *** Cabanossi left
[12:00] *** dubi0us left
[12:00] *** Cabanossi joined
[12:04] *** brrt left
[12:04] *** brrt1 joined
[12:04] *** nadim left
[12:18] *** dubi0us joined
[12:21] *** pierre_ joined
[12:23] *** dubi0us left
[12:27] *** Cabanossi left
[12:28] *** dubi0us joined
[12:30] *** Cabanossi joined
[12:32] <araraloren> Perl 6 's IO performance is 10x slower than Perl 5

[12:33] <timotimo> what code are you timing?

[12:33] <moritz> araraloren: did you measure comparable things? Like actually doing the UTF-8 encoding/decoding in Perl 5 that Perl 6 does by default?

[12:34] <jnthn> That's not generally true 'cus I got one quite common case (reading a UTF-8 file line by line) *faster* on Friday :P

[12:35] *** zakharyas joined
[12:35] <timotimo> might have to check whether you've got buffering on the perl6 side or not, because perl5 does buffer

[12:36] <timotimo> and the difference between buffered and direct can be huge

[12:36] *** gregf_ left
[12:36] *** dubi0us left
[12:37] <jnthn> That too; for file output, then :buffer passed to open can make quite a difference.

[12:37] <jnthn> We'll do that by default for non-tty at some point in the near future

[12:37] <araraloren> I have one unix format file, how can I improve my program performance: for $file.IO.lines { my @cols = .split("\t"); @db.push([ @cols[0].Int, @cols[1].Int, @cols[2] ]); }

[12:37] <araraloren> I read file like above

[12:38] <timotimo> can you give us a little one-liner that would generate a typical piece of input file at a reasonable size?

[12:39] <araraloren> It's like `<11 number> \t <11 number> \t <4 number>`

[12:40] <araraloren> 13000120000	13000129999	022

[12:40] <timotimo> okay so kind of like (10000000000..99999999999).roll(2).join("\t") ~ "\t" ~ (1000..9999).roll

[12:40] <timotimo> how many lines are you working with?

[12:41] <araraloren> It's about thirty thousand line

[12:41] <araraloren> sorry

[12:42] <araraloren> three hundred thousand

[12:42] <araraloren> And I have SSD

[12:42] <timotimo> how long does it take on your machine?

[12:43] <araraloren> 12~13s

[12:43] <timotimo> ok that's good

[12:44] *** araraloren_ joined
[12:45] <timotimo> profiling now

[12:46] *** dubi0us joined
[12:46] <timotimo> okay it's spending 36.6% of its time inside split and 16.6% of its time inside the Int method

[12:47] <araraloren_> jnthn, Hi, I found a IO Pipe problem. When use `morel` look through the result, press q will cause rakudo complain : Failed to write bytes to filehandle: Broken pipe

[12:47] *** araraloren left
[12:47] <timotimo> on my machine it also takes just 10 seconds

[12:47] <araraloren_> ls /usr/bin -al | perl6 -e '$*IN.Supply(:size<8>).tap(&print)' | more

[12:47] <timotimo> there's been a ticket discussing this very issue recently

[12:48] <araraloren_> jnthn, here is the command ^^^

[12:48] <araraloren_> OH, you mean the broken pipe ?

[12:48] <jnthn> signal(SIGPIPE).tap: { exit(0) }

[12:48] <jnthn> If you want to silently exit on such things

[12:49] <timotimo> interestingly, STORE, i.e. putting the result of .split into the array, takes 20% of the time inside the loop block

[12:50] *** dubi0us left
[12:50] <araraloren_> ok, seems like add try around it also work

[12:51] <araraloren_> while(<KK>){my @abc=split "\t",$_;

[12:51] <araraloren_> push @kk,\@abc;

[12:51] <araraloren_> }

[12:51] <araraloren_> and this is perl 5 code

[12:52] <timotimo> using substr three times (since you know the lengths of the numbers up front) reduces it to 7.5 seconds

[12:52] *** itaipu joined
[12:52] <timotimo> you're not numifying the values in the perl5 version?

[12:53] <timotimo> without the two .Int i get down to 4.5s

[12:53] *** ambs joined
[12:54] <araraloren_> timotimo, but I will compare to Int after read over

[12:55] <timotimo> OK

[12:55] <timotimo> if your ints are the same lengths every time, maybe doing string comparison is cheaper than intifying

[12:55] <araraloren_> will try it

[12:56] <jnthn> Even then, == in Perl 6 will compare them as numerics late

[12:56] <jnthn> *later

[12:56] <jnthn> So there's no particular reason to do the conversion earlier

[12:56] <timotimo> except if you keep one side of the comparison the same every time and that's a string that gets intified over and over again :)

[12:56] <jnthn> Well, true :)

[12:57] <jnthn> Then it makes sense :)

[12:57] <araraloren_> Okay

[12:57] <jnthn> Though still changes the cost of the work in the loop we're comparing

[12:57] <timotimo> i've had some benchmarks *terribly* slow because they grabbed the "number of times to run" from @*ARGS and it was a string that was being compared to in the main loop a bajillion times

[12:59] *** mcmillhj joined
[12:59] *** dubi0us joined
[13:01] *** dubi0us left
[13:03] <araraloren_> Hmm, I take 5s in last version

[13:04] *** cpage__ joined
[13:04] *** cpage left
[13:04] *** cpage__ is now known as cpage

[13:08] *** lizmat joined
[13:10] *** dubi0us joined
[13:14] *** dubi0us_ joined
[13:14] *** dubi0us left
[13:15] <andrzejku> araraloren_, :O

[13:15] <araraloren_> What's up ?

[13:16] <mspo> can someone try using rakudo/tools/install-dist.pl on svg ?

[13:16] <mspo> I am getting Serialization Error: missing static code ref for closure 'BUILD'

[13:18] *** rurban joined
[13:18] *** dubi0us_ left
[13:18] *** itaipu left
[13:18] *** rurban left
[13:19] *** itaipu joined
[13:25] *** perlpilot joined
[13:28] *** bstamour left
[13:29] *** SourceBaby joined
[13:29] *** ChanServ sets mode: +v SourceBaby

[13:38] *** MilkmanDan left
[13:40] *** gregf_ joined
[13:41] *** MilkmanDan joined
[13:43] *** cdg joined
[13:48] *** MilkmanDan left
[13:48] *** moray` joined
[13:48] *** skids joined
[13:51] *** MilkmanDan joined
[13:52] *** ck joined
[13:52] *** ck is now known as Guest53883

[13:54] *** ckraniak left
[13:56] *** Guest53883 left
[13:58] *** sufrostico joined
[14:03] *** sufrosti1o joined
[14:03] *** piojo9 left
[14:10] *** alimon joined
[14:13] <mspo> m: say 3 × 3; say 3 x 3; say 3 xx 3;

[14:13] <camelia> rakudo-moar a3c71e: OUTPUT: «9␤333␤(3 3 3)␤»

[14:13] <mspo> m: say (3 × 3).WHAT; say (3 x 3).WHAT; say (3 xx 3).WHAT;

[14:13] <camelia> rakudo-moar a3c71e: OUTPUT: «(Int)␤(Str)␤(Seq)␤»

[14:14] <pmurias> is there supposed to be a difference between $a .= repeated and $a.=repeated ?

[14:14] *** Kyo91_ joined
[14:16] *** pierre_ left
[14:18] <araraloren_> pmurias, I think no difference

[14:19] *** Ven joined
[14:19] *** Ven is now known as Guest12884

[14:23] *** brrt1 left
[14:24] *** sufrostico left
[14:24] *** sufrosti1o left
[14:25] *** brrt joined
[14:27] <stmuk> mspo: appears to work for me

[14:27] <stmuk> I have noticed install-dist.pl seems to register a module as installed even if it fails to install BTW

[14:28] <stmuk> nine: ^^

[14:28] *** brrt left
[14:28] *** Cabanossi left
[14:28] *** itaipu left
[14:28] <mspo> stmuk: how did you run it?

[14:29] <araraloren_> Though I improve read performance of my script, but the whole script still cost 80s.

[14:30] <stmuk> I just did "cd zef", "perl6 ~/.rakudobrew/moar-nom/tools/install-dist.pl "

[14:30] <stmuk> without trailing space

[14:30] <araraloren_> And when I use .race, it take 44s

[14:30] *** Cabanossi joined
[14:30] <stmuk> it errored first time due to missing XML::Writer

[14:30] <mspo> stmuk: put RAKUDO_RERESOLVE_DEPENDENCIES=0 in there

[14:31] <stmuk> and after I installed that I had to --force since it wrongly thought SVG was installed

[14:31] <araraloren_> But the whole time of Perl 5 only cost 0.9s

[14:31] <Altreus> can I do substr(Str, $start) such that it returns the whole string if it is not $start chars long?

[14:32] <araraloren_> yeah you can 

[14:32] <Altreus> uh

[14:32] <Altreus> I mean the empty string

[14:32] <Altreus> brain fart

[14:32] <Altreus> Currently it tells me off

[14:32] <Altreus> "Start argument to substr out of range" it says

[14:32] <araraloren_> empty string ?

[14:32] <stmuk> mspo: ok hang on I'm nuking and starting from scratch

[14:33] <Altreus> Yeah if the string is not N chars long then I want substr(Str, N) is to be no chars, not an error

[14:33] <jnthn> Altreus: It's probably a Failure, so you can just // '' afterwards

[14:33] <Altreus> tak

[14:33] <ilmari> m: say substr("foo", 4) // "too short"

[14:33] <camelia> rakudo-moar a3c71e: OUTPUT: «too short␤»

[14:33] <araraloren_> m: say substr("foo", 4)

[14:33] <camelia> rakudo-moar a3c71e: OUTPUT: «Start argument to substr out of range. Is: 4, should be in 0..3; use *-4 if you want to index relative to the end␤  in block <unit> at <tmp> line 1␤␤»

[14:33] <Altreus> sweet that worked

[14:33] <Altreus> I'm learning \o/

[14:34] <araraloren_> Where is the exception ?

[14:34] <araraloren_> m: say substr("foo", 4) // "too short"

[14:34] <camelia> rakudo-moar a3c71e: OUTPUT: «too short␤»

[14:34] <Altreus> who said exception?

[14:34] <jnthn> araraloren_: It returns a Failure (lazy exception)

[14:34] <jnthn> If you call .defined it's disarmed

[14:34] <mspo> I also wish I understood this error: Serialization Error: missing static code ref for closure 'BUILD'

[14:34] <araraloren_> okay, cool

[14:35] <Altreus> I like it more now that I'm aware of it

[14:35] <mspo> the line in question seems to be: submethod BUILD(Str :$!name --> Nil) {   from class CompUnit::Repository::Staging is CompUnit::Repository::Installation {

[14:36] <stmuk> mspo: I still don't see that error .. what version of rakudo are you using

[14:37] <stmuk> mspo: you could try "rm ~/.perl6" maybe?

[14:37] <mspo> stmuk: 2017.07

[14:37] *** andrzejku left
[14:38] <mspo> stmuk: no luck

[14:38] <mspo> stmuk: weirdly I get the error, and then calling again results in an "already installed" error :)

[14:38] *** Guest12884 is now known as Ven``

[14:38] <mspo> stmuk: that didn't help

[14:39] <stmuk> yes there is a bug where an install failure leads to it appearing installed

[14:39] <stmuk> but I can't reproduce your main issue on linux

[14:40] <mspo> okay

[14:40] *** itaipu joined
[14:40] <mspo> stmuk: it's strange because some packages work (xml-writer, oo-monitors)

[14:40] <mspo> stmuk: but the two svg and svg-plot give that error

[14:41] <pmurias> rakudo-j is broken in the eval bot?

[14:41] <pmurias> j: say('hello')

[14:41] <camelia> rakudo-jvm 30584d: OUTPUT: «java.nio.file.NoSuchFileException: /nqp/lib/Perl6/BOOTSTRAP.jar␤  in <anon> (gen/jvm/ModuleLoader.nqp:92)␤  in load_module (gen/jvm/ModuleLoader.nqp:79)␤  in <anon> (gen/jvm/CORE.setting)␤  in <anon> (gen/jvm/ModuleLoader.nqp:257)␤  in load_sett…»

[14:42] *** Petit_Dejeuner joined
[14:43] <araraloren_> j: say 13;

[14:43] <camelia> rakudo-jvm 30584d: OUTPUT: «java.nio.file.NoSuchFileException: /nqp/lib/Perl6/BOOTSTRAP.jar␤  in <anon> (gen/jvm/ModuleLoader.nqp:92)␤  in load_module (gen/jvm/ModuleLoader.nqp:79)␤  in <anon> (gen/jvm/CORE.setting)␤  in <anon> (gen/jvm/ModuleLoader.nqp:257)␤  in load_sett…»

[14:43] <Petit_Dejeuner> m: say map({ &^func($^arg) }, ({$_ + 1}, {$_ + 1}, {$_ + 1}), (2, 2, 2))

[14:43] <camelia> rakudo-moar a3c71e: OUTPUT: «Type check failed in binding to parameter '&func'; expected Callable but got List ($(2, 2, 2))␤  in block <unit> at <tmp> line 1␤␤»

[14:44] <Petit_Dejeuner> I'm confused, shouldn't this map over both list arguments in parallel?

[14:44] *** rurban1 joined
[14:45] <stmuk> mspo: are you passing any parameters to install-dist.pl ?

[14:46] *** rurban1 left
[14:46] <mspo> stmuk: -for=site

[14:47] <mspo> oh and -to=

[14:48] <mspo> maybe I can work backwards: what is that error saying?

[14:48] <stmuk> try it without params just cd'd into that dir

[14:49] <stmuk> it defaults to site anyway

[14:49] <mspo> without a -to I get non-writable path

[14:49] <mspo> I'll just chmod

[14:49] *** brrt joined
[14:50] *** brrt left
[14:50] *** brrt joined
[14:50] *** brrt left
[14:51] *** lowbro left
[14:51] <mspo> stmuk: that time it ran without error :(

[14:51] <mspo> okay!

[14:52] <mspo> that's progress

[14:53] <stmuk> it uses multi-dispach so maybe its calling the wrong method?

[14:53] *** cdg_ joined
[14:56] *** cdg left
[15:00] <mspo> stmuk: it must not be able to resolve some kind of compunit dependency when attempting to install into the DESTDIR

[15:02] *** raschipi joined
[15:07] <mspo> stmuk: trying to reproduce it inside of vendor instead of site and now I get the is a directory, cannot do '.open' on a directory  stuff

[15:07] <mspo> anyway I need to work on my job and stop messing around with this for a while

[15:07] <mspo> I'm sure nine will yell at me later for trying to use command line args or something

[15:07] <stmuk> its clearly a bit buggy!

[15:07] <stmuk> :)

[15:07] <araraloren_> Petit_Dejeuner, map only accept one list

[15:08] <araraloren_> m: say map({ .[0].(.[1]) }, [({$_ + 1}, {$_ + 1}, {$_ + 1}) Z, (2, 2, 2)])

[15:08] <camelia> rakudo-moar a3c71e: OUTPUT: «(3 3 3)␤»

[15:08] <mspo> stmuk: let's start by calling it opaque

[15:09] <mspo> stmuk: not sure how long error messages referencing files named "734095A335B8660A6977EBFBDD61726CFADC4BCC" is going to fly for general use :)

[15:09] *** brrt joined
[15:09] <stmuk> there were some docs in the git log of the original import

[15:10] *** zakharyas left
[15:11] *** sufrostico joined
[15:12] <mspo> stmuk: there are also some conflicting signals.  nine claims installs-dist.pl is *the* way for packagers and friends

[15:12] <mspo> stmuk: but rakudo-star itself uses zef and zef also uses zef

[15:16] <Petit_Dejeuner> m: map({$^a + $^b), (1, 2, 3), (4, 5, 6))

[15:16] <camelia> rakudo-moar a3c71e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3map({$^a + $^b7⏏5), (1, 2, 3), (4, 5, 6))␤    expecting any of:␤        statement end␤        statement modifier␤        statement modifier loop␤»

[15:17] <Petit_Dejeuner> araraloren_: Thanks. I got confused because somehow my multiple list arguments were getting joined before being passed to map somehow.

[15:17] *** stmuk_ joined
[15:17] <stmuk_> ping

[15:17] <stmuk_> mspo: I had a quick look at install-dist.pl for R* but it didn't run tests or display any information about what it was installing

[15:17] *** sufrostico left
[15:18] *** stmuk left
[15:18] <stmuk_> mspo: I think its more suitable for actual binary packaging than user facing builds

[15:19] *** [Coke] joined
[15:19] <[Coke]> .

[15:20] *** brrt left
[15:20] <mspo> stmuk_: yeah it seems fine, just difficult to debug

[15:20] <mspo> for me, anyway

[15:21] *** andrzejku joined
[15:21] <stmuk_> yeah I agree

[15:22] <mspo> I'm a little afraid that if everyone else, including lib developers, are just using zef all the time otherwise

[15:22] <mspo> install-dist.pl might always be playing catch up or drifting out of sync

[15:23] <mspo> but I probably don't understand that they're both just front-ends to Comp Unit stuff

[15:23] <ugexe> lib developers shouldnt be using install-dist.pl

[15:25] <ugexe> install-dist.pl is essentially a convience to writing a 1 liner to do the same thing since all the class names are so long. everything is just using CompUnit stuff to get the job done, there is nothing to catch up to

[15:25] <stmuk_> does anything actually use it?

[15:25] <mspo> one suse package

[15:26] <mspo> I put about 5 things into pkgsrc-wip this weekend

[15:26] <mspo> but only a few work for me, which is why I'm talking about this now :)

[15:27] <stmuk_> great! I'll have a look

[15:27] <mspo> install-dist.pl has two common errors that I've seen, and seem to also exist in google's history: the BUILD closure thing and the .open directory thing

[15:27] *** Cabanossi left
[15:27] <mspo> stmuk_: they're just the first few things from star's module list

[15:28] <ugexe> you are trying to install things without resolving their build orde?

[15:28] <mspo> xml-writer, svg, svg-plot, Term-ANSIColor

[15:28] <ugexe> or handle build.pm?

[15:28] <mspo> ugexe: I am installing in the order star uses

[15:28] <mspo> what is build.pm

[15:29] <stmuk_> the star build order should work

[15:29] <stmuk_> perl6/doc uses Build.pm :/ I wonder if install-dist.pl works with that

[15:30] <ugexe> no

[15:30] *** Cabanossi joined
[15:31] <stmuk_> the requirements of the web site building code have made perl6/doc a lot harder to package the docs

[15:31] <stmuk_> the pod6 should be really be in an other repo IMO

[15:32] <mspo> so Serialization Error: missing static code ref for closure 'BUILD'  probably means that it's not finding CompUnit::Repository::Installation

[15:32] <mspo> right?

[15:33] <ugexe> its probably trivial for us to install it if it was described in the meta6.json sufficiently

[15:33] *** aindilis left
[15:33] *** aindilis` joined
[15:34] <stmuk_> is there any support in META6.json for different build targets to install a subset for example?

[15:36] <stmuk_> where is http://design.perl6.org/S22.html?

[15:38] *** wamba left
[15:38] <AlexDaniel> stmuk_: oops, design docs seem to be down. You can use this: https://raw.githubusercontent.com/perl6/specs/master/S22-package-format.pod

[15:39] <stmuk_> thanks

[15:39] <AlexDaniel> hmm I wonder who can fix that

[15:39] <AlexDaniel> moritz: ↑ ?

[15:41] <ugexe> subsets should probably use different distributions. otherwise you run into issues regarding reproducability, checksums, etc

[15:42] <stmuk_> yeah

[15:42] <stmuk_> and S22 doesn't consider docs anyway

[15:45] *** araraloren_ left
[15:51] <ugexe> right but it could be added to CURI fairly easily if someone thought up of a sufficient way to describe it in meta6.json

[15:51] <ugexe> .pod files are easy enough, but embeded pod would take a little thought

[15:54] <ugexe> then p6doc doesn't have to keep things in sync anymore and can focus on other stuff

[15:54] *** mcmillhj left
[15:55] <ugexe> you also get to punt the "which version/auth should i load?" to the CUR (like bin/ scripts)

[15:58] *** abraxxa left
[16:01] *** zakharyas joined
[16:03] *** koto joined
[16:04] *** andreoss joined
[16:05] *** sena_kun left
[16:05] *** mcmillhj joined
[16:08] *** cdg_ left
[16:10] *** mcmillhj left
[16:18] *** mcmillhj joined
[16:24] *** mcmillhj left
[16:27] *** konsolebox left
[16:30] *** khw joined
[16:30] *** dubi0us joined
[16:35] *** dubi0us left
[16:35] *** koto left
[16:36] *** ufobat left
[16:37] *** Geth left
[16:37] *** bisectable6 left
[16:37] *** unicodable6 left
[16:37] *** benchable6 left
[16:37] *** committable6 left
[16:37] *** bloatable6 left
[16:37] *** coverable6 left
[16:37] *** evalable6 left
[16:37] *** quotable6 left
[16:37] *** greppable6 left
[16:38] *** mcmillhj joined
[16:41] *** konsolebox joined
[16:41] *** zakharyas left
[16:43] *** mcmillhj left
[16:44] *** Ven`` left
[16:46] *** mcmillhj joined
[16:47] *** dubi0us joined
[16:51] *** mr-fooba_ joined
[16:52] *** mr-foobar left
[16:55] *** gregf_ left
[16:56] *** setty1 left
[17:00] *** Kyo91 joined
[17:01] *** wamba joined
[17:02] *** Kyo91_ left
[17:21] *** jonas1 left
[17:28] <AlexDaniel> nine: hm, Geth is down?

[17:31] *** moray` left
[17:31] *** st_elmo joined
[17:39] *** Rawriful joined
[17:47] *** Geth joined
[17:48] <nine> AlexDaniel: fixed. Thanks for pointing it out :)

[17:48] <mscha> m: say 0.1e0 + 0.2e0 == 0.3e0; say 1e-1 + 2e-1 == 3e-1

[17:48] <camelia> rakudo-moar a3c71e: OUTPUT: «False␤False␤»

[17:48] <mscha> m: say 0.1e0 + 0.2e0 == 0.3e0;

[17:48] <camelia> rakudo-moar a3c71e: OUTPUT: «False␤»

[17:48] <mscha> m: say 1e-1 + 2e-1 == 3e-1

[17:48] <camelia> rakudo-moar a3c71e: OUTPUT: «True␤»

[17:48] <mscha> Huh?

[17:49] <mscha> Why is the last one suddenly True?  It was False just 2 statements earlier.

[17:51] *** coverable6 joined
[17:51] *** bloatable6 joined
[17:51] *** committable6 joined
[17:51] *** quotable6 joined
[17:51] *** evalable6 joined
[17:51] *** ChanServ sets mode: +v coverable6

[17:51] *** ChanServ sets mode: +v bloatable6

[17:51] *** ChanServ sets mode: +v committable6

[17:51] *** ChanServ sets mode: +v quotable6

[17:51] *** ChanServ sets mode: +v evalable6

[17:51] *** bisectable6 joined
[17:51] *** unicodable6 joined
[17:51] *** greppable6 joined
[17:51] *** benchable6 joined
[17:51] *** ChanServ sets mode: +v bisectable6

[17:51] *** ChanServ sets mode: +v unicodable6

[17:51] *** ChanServ sets mode: +v greppable6

[17:51] *** ChanServ sets mode: +v benchable6

[17:52] <timotimo> m: use NativeCall; nativecast(0.1e0, int64).base(16).say; nativecast(1e-1, int64).base(16).say

[17:52] <camelia> rakudo-moar a3c71e: OUTPUT: «Native call expected return type with CPointer, CStruct, CArray, or VMArray representation, but got a P6int (int64)␤  in sub nativecast at /home/camelia/rakudo-m-inst-1/share/perl6/sources/24DD121B5B4774C04A7084827BFAD92199756E03 (NativeCall) line 497…»

[17:52] <timotimo> m: use NativeCall; nativecast(int64, 0.1e0).base(16).say; nativecast(int64, 1e-1).base(16).say

[17:52] <camelia> rakudo-moar a3c71e: OUTPUT: «Native call expected return type with CPointer, CStruct, CArray, or VMArray representation, but got a P6opaque (Num)␤  in sub nativecast at /home/camelia/rakudo-m-inst-1/share/perl6/sources/24DD121B5B4774C04A7084827BFAD92199756E03 (NativeCall) line 497…»

[17:52] <timotimo> we don't do that?

[17:53] <timotimo> m: use NativeCall; nativecast(CArray[int64], CArray[num64].new(0.1e0))[0].base(16).say; nativecast(CArray[int64], CArray[num64].new(1e-1))[0].base(16).say

[17:53] <camelia> rakudo-moar a3c71e: OUTPUT: «3FB999999999999A␤3FB999999999999A␤»

[17:53] <timotimo> m: use NativeCall; nativecast(CArray[int64], CArray[num64].new(0.2e0))[0].base(16).say; nativecast(CArray[int64], CArray[num64].new(2e-1))[0].base(16).say

[17:53] <camelia> rakudo-moar a3c71e: OUTPUT: «3FC999999999999A␤3FC999999999999A␤»

[17:53] <timotimo> m: use NativeCall; nativecast(CArray[int64], CArray[num64].new(0.3e0))[0].base(16).say; nativecast(CArray[int64], CArray[num64].new(3e-1))[0].base(16).say

[17:53] <camelia> rakudo-moar a3c71e: OUTPUT: «3FD3333333333333␤3FD3333333333333␤»

[17:54] <timotimo> hmm

[17:54] <timotimo> m: use NativeCall; nativecast(CArray[int64], CArray[num64].new(0.1e0 + 0.2e0))[0].base(16).say; nativecast(CArray[int64], CArray[num64].new(1e-1 + 2e-1))[0].base(16).say

[17:54] <camelia> rakudo-moar a3c71e: OUTPUT: «3FD3333333333334␤3FD3333333333334␤»

[17:55] <timotimo> oh

[17:55] <timotimo> isn't this about non-commutativeness of floating point math or something?

[17:55] <Geth> ¦ ecosystem/master: 5 commits pushed by (André Brás)++, (Andre Bras)++, (Juan Julián Merelo Guervós)++

[17:55] <Geth> ¦ ecosystem/master: c77393a264 | add Log distribution

[17:55] <Geth> ¦ ecosystem/master: ff03760f08 | Merge remote-tracking branch 'upstream/master'

[17:55] <Geth> ¦ ecosystem/master: cd515b3d09 | Merge remote-tracking branch 'upstream/master'

[17:55] <Geth> ¦ ecosystem/master: 5010244511 | add Hematite distribution

[17:55] <Geth> ¦ ecosystem/master: 09023162c0 | Merge pull request #361 from whity/master

[17:55] <Geth> ¦ ecosystem/master: review: https://github.com/perl6/ecosystem/compare/f88f36bfe1...09023162c0

[17:56] <ugexe> if it was i wouldnt expect it to provide two different outcomes

[17:56] <timotimo> i know we've addressed this on channel before

[17:57] *** nhywyll joined
[17:57] <timotimo> m: say 0.1e0 - 1e-1

[17:57] <camelia> rakudo-moar a3c71e: OUTPUT: «0␤»

[17:59] <timotimo> evanm actually brought it up on channel

[17:59] *** Cabanossi left
[18:00] *** Cabanossi joined
[18:00] <ugexe> m: say 1e-1 + 2e-1 == 3e-1; say 0.1e0 + 0.2e0 == 0.3e0; say 1e-1 + 2e-1 == 3e-1

[18:00] <camelia> rakudo-moar a3c71e: OUTPUT: «True␤True␤True␤»

[18:00] <ugexe> m: say 0.1e0 + 0.2e0 == 0.3e0; say 1e-1 + 2e-1 == 3e-1

[18:00] <camelia> rakudo-moar a3c71e: OUTPUT: «False␤False␤»

[18:02] <ugexe> knowing nothing about how any of this works, it seems like a tolerance gets changed unexpectedly

[18:03] <timotimo> aha, zoffix found it out

[18:03] <timotimo> https://gist.github.com/zoffixznet/46ae8dd7d85096d58dc557f60f82a179

[18:04] <timotimo> but then why did i get the same bit representation up there ...

[18:06] <timotimo> m: use NativeCall; nativecast(CArray[int64], CArray[num64].new(0.1e0 + 0.2e0 - 0.3e0))[0].base(16).say; nativecast(CArray[int64], CArray[num64].new(1e-1 + 2e-1 - 3e-1))[0].base(16).say

[18:06] <camelia> rakudo-moar a3c71e: OUTPUT: «3C90000000000000␤3C90000000000000␤»

[18:07] <timotimo> m: use NativeCall; nativecast(CArray[int64], CArray[num64].new(0.1e0 + 0.2e0 - 0.3e0))[0].base(16).say; nativecast(CArray[int64], CArray[num64].new(1e-1 + 2e-1 - 3e-1))[0].base(16).say; say 1e-1 + 2e-1 - 3e-1 == 0.1e0 + 0.2e0 - 0.3e0

[18:07] <camelia> rakudo-moar a3c71e: OUTPUT: «3C90000000000000␤3C90000000000000␤True␤»

[18:07] <timotimo> m: say 1e-1 + 2e-1 - 3e-1 == 0.1e0 + 0.2e0 - 0.3e0

[18:07] <camelia> rakudo-moar a3c71e: OUTPUT: «True␤»

[18:08] <timotimo> hm?

[18:13] *** Zoffix joined
[18:14] <Zoffix> timotimo: once it gets parsed written in one style, the other style will just used cached version.

[18:14] <Zoffix> That's the bigger problem with the issue: a pure statement's value can change depending on what type of code got parsed earlier in the program.

[18:15] <timotimo> oooh

[18:15] <timotimo> so that's why

[18:16] <timotimo> hm, but how does it figure out those two should be the same num value? they aren't string-equal, and they're also not going to be numerically equal?

[18:16] *** dubi0us left
[18:16] <Zoffix> Don't know. I never investigated it.

[18:17] <Zoffix> Well, actually, I don't know if it's actually using the cached value; that's just the apparent effect and earlier parse affects later values of unrelated statements

[18:18] *** nadim joined
[18:18] <timotimo> super weird, no doubt

[18:18] *** Petit_Dejeuner left
[18:21] <raschipi> timotimo: the expoent is a signed number, so the string representation can be turned into the float in multiple ways. Compare mantissa 0.1 with exponent 0 with mantissa 1 with exponent -1. So that might be where the differences come from.

[18:25] *** dubi0us_ joined
[18:33] *** dubi0us_ left
[18:33] *** dubi0us joined
[18:35] *** mr-foobar joined
[18:37] *** mr-fooba_ left
[18:45] *** Zoffix left
[18:49] *** mcmillhj left
[18:50] *** mcmillhj joined
[18:52] *** dubi0us left
[18:57] *** dubi0us joined
[18:58] *** mr-foobar left
[18:58] *** ckraniak joined
[18:58] *** Cabanossi left
[18:59] *** espadrine joined
[19:00] *** dubi0us left
[19:00] *** mr-foobar joined
[19:00] *** dubi0us joined
[19:00] *** Cabanossi joined
[19:04] <ckraniak> Where is $*DISTRO.version getting its info from?

[19:05] *** dubi0us left
[19:06] <ckraniak> I am on Win 7 (6.1) and it returns 6.3 and am not sure if it's failing to report OS properly or if it is doing something else

[19:07] <andrzejku> hey people

[19:07] <geekosaur> ckraniak, it could be using build time info

[19:08] <geekosaur> that said, windows complicates things with e.g. 32 bit bins on a 64 bit system running in a VM which may be booting a different version :/

[19:09] <moritz> and that the internal and the marketing versions also often disagree

[19:09] <andrzejku> do you think it have a sence to write another HTTP Perl6 server?:P

[19:09] <ckraniak> Build version is what I was thinking

[19:09] <moritz> andrzejku: if it supports HTTP/2, sure

[19:10] <ckraniak> Although I had the impression $*DISTRO was meant for runtime checking

[19:10] <geekosaur> arguably $*DISTRO should be runtime and $?DISTRO should be build time, or something like that

[19:10] <lizmat> on Win, it gets the version information from $*VM.config<osvers>

[19:10] <raschipi> ckraniak: It's reporting the NT version, which is 6.1

[19:10] <andrzejku> moritz, that was a plan

[19:11] <andrzejku> moritz, however we and my friend we think more about

[19:11] <raschipi> Source: https://en.wikipedia.org/wiki/History_of_Microsoft_Windows#Windows_7_and_Server_2008_R2

[19:11] <ckraniak> raschipi: it is reporting 6.3 though

[19:11] *** TEttinger joined
[19:11] <geekosaur> on theone hand that's arguably an abuse of the $? sigil, on the other it does make the point that the $? one is from a different context (just, the wrong "build tme" :)

[19:11] <andrzejku> moritz, Perl6 server which will share wasm perl6 interpreter which should interpret perl6 code and qml frontend

[19:11] <andrzejku> do you think it is good idea?

[19:12] <raschipi> I think service packs upgrade that number.

[19:12] <ckraniak> Shouldn't

[19:12] <ckraniak>  VerifyVersionInfo documentation / invocation explicitly separates service pack info

[19:12] <raschipi> For example, for me it returns 4.9.0, which is my kernel release. It should do something similar on windows.

[19:13] *** dubi0us_ joined
[19:13] *** dubi0us_ left
[19:13] *** dubi0us_ joined
[19:14] <moritz> andrzejku: I only understand half of what you wrote :-)

[19:15] <andrzejku> moritz, HTTP server -> share web assembler Perl6 interpreter -> then we feed on request Perl6 code with QML -> and user see an application

[19:16] *** nightfrog left
[19:17] *** dubi0us joined
[19:17] *** dubi0us_ left
[19:19] *** darutoko left
[19:20] *** nightfrog joined
[19:21] *** dubi0us left
[19:22] *** alexshendi joined
[19:22] <moritz> andrzejku: ah, you want to write more than a HTTP server :-)

[19:22] <andrzejku> yeah

[19:22] <andrzejku> but I am not sure if it is possible

[19:23] *** itaipu left
[19:23] <moritz> it's possible, but quite some work

[19:24] <andrzejku> ohh ;-)

[19:24] <mspo> step 2 sounds like a lot of work

[19:25] <masak> meh, step 2 is always just '???' :P

[19:25] <yoleaux> 12 Aug 2017 22:45Z <raschipi> masak: In your 007 macro experiments, is it possible to get the parse tree macros get like one would use Perl6::Parse for (in Perl6 instead of 007)? I mean, since it has to be able to hand parse trees to macros, is there an interface that makes it possible to get the same when parsing a string?

[19:25] <raschipi> masak: my question was already answered, thanks.

[19:25] <masak> raschipi: what was the answer? :)

[19:26] <raschipi> That it's already possible to get it trough nqp.

[19:26] <masak> ah, nice

[19:26] <masak> though note that that would be NQP nodes, not Qtrees

[19:26] <raschipi> Right. And do you have plans to make the later available?

[19:27] <masak> raschipi: I think there's a 007 issue (still open) about the ability to go from string to Qtree. any such mechanism would be unhygienic, but it might still be useful sometimes.

[19:27] <masak> in many cases you're better off combining quasis and synthetic nodes in some way

[19:28] *** dubi0us joined
[19:28] *** Cabanossi left
[19:29] <sjn> \o

[19:29] <masak> o/

[19:30] * sjn just found that the "I'm feeling lucky" button on modules.perl6.org doesn't work

[19:30] <sjn> e.g. enter "git config", try the button, and get a 404

[19:30] *** Cabanossi joined
[19:32] <nadim> Zoffix is the man to talk to I believe

[19:32] <yoleaux> 09:41Z <lookatme> nadim: contact me with nick `araraloren` later

[19:32] <raschipi> sjn: It's because you're out of luck.

[19:32] *** dubi0us left
[19:32] <nadim> hehe

[19:33] *** cognominal joined
[19:33] <andreoss> m: class f { method g {...}} ; role A is f {}; role B is f {}; class C does A does B {}; 

[19:33] <camelia> rakudo-moar 7b81f0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Package '<anon>' already has parent 'f'␤at <tmp>:1␤»

[19:33] <raschipi> sjn: I agree that the error message is less than awesome, but try to write a name of a module you know exist there.

[19:36] <nadim> I get "No such symbol 'Data::Dump::Tree::CursesFoldable'", the line that causes it looks like "require Data::Dump::Tree::CursesFoldable <&some_sub>", the module and the sub exist, I have an example that uses the module and calls the eported sub. what can it be?

[19:37] *** dubi0us joined
[19:37] <nadim> it's not "file not found" but Symbol not found

[19:40] <moritz> nadim: is there a package Data::Dump::Tree::CursesFoldable in the file Data/Dump/Tree/CursesFoldable.pm6?

[19:40] <andreoss> m: role f { method g {...}} ; role A does f {}; role B does f {}; class C does A does B { method g { 1 } }; 

[19:40] <camelia> rakudo-moar 7b81f0: ( no output )

[19:41] *** dubi0us left
[19:42] <nadim> moritz: in lib/Data/Dump/Tree/CursesFoldable.pm not pm6

[19:45] *** dubi0us joined
[19:47] *** ChoHag left
[19:48] <nadim> moritz: changing the extension to pm6 changed nothing

[19:49] <moritz> nadim: can you verify with strace or similar tools that it actually reads the file?

[19:50] <moritz> or set RAKUDO_MODULE_DEBUG=1

[19:51] *** lspaans joined
[19:52] *** mr-foobar left
[19:52] <andreoss> is there some example for cathegory theory stuff done in Perl 6?

[19:53] *** dubi0us left
[19:54] *** ChoHag joined
[19:54] *** lspaans left
[19:55] *** alexshendi left
[19:56] *** dubi0us joined
[19:56] <raschipi> andreoss: P6 has a run-time gradual type system with all types being maybe types.

[19:57] *** Cabanossi left
[19:58] <Geth> ¦ whateverable: 5d7445b1bd | (Aleks-Daniel Jakimenko-Aleksejev)++ | 3 files

[19:58] <Geth> ¦ whateverable: New bot: Releasable (with tests)

[19:58] <Geth> ¦ whateverable: 

[19:58] <Geth> ¦ whateverable: Automatically detects release dates, commits that were logged, etc.

[19:58] <Geth> ¦ whateverable: Also, prints warnings if something is not quite right.

[19:58] <Geth> ¦ whateverable: 

[19:58] <Geth> ¦ whateverable: Technically, “changelogable” would be more precise (given that the bot

[19:58] <Geth> ¦ whateverable: does not make releases itself), but “releasable” is easier to remember.

[19:58] <Geth> ¦ whateverable: <…commit message has 48 more lines…>

[19:58] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/5d7445b1bd

[19:58] <raschipi> Moar bots!

[20:00] *** dubi0us left
[20:00] *** Cabanossi joined
[20:00] <andreoss> i don't think it qualifies

[20:01] <andreoss> in this way Perl 5 undef's sort of Maybe as well

[20:02] *** andrzejku left
[20:02] <raschipi> andreoss: You don't think Perl6 types are maybe types? Any typed variable can also hold a failure, which is undefined but it's not just undef.

[20:03] <raschipi> And the Failure is transmitted forward... It's meant to fit the theory at least.

[20:03] *** andrzejku joined
[20:05] <b2gills> https://en.wikipedia.org/wiki/Option_type#Perl_6

[20:06] *** dubi0us joined
[20:06] <moritz> not all types, fwiw

[20:06] <moritz> there are also native types, and :D types

[20:07] <nadim> moritz: the trace https://nopaste.linux-dev.org/?1160729

[20:08] <andreoss> https://paste.debian.net/981351/

[20:08] <andreoss> i'm more curious about type classes though

[20:09] <andreoss> CT would be much easier with them

[20:09] *** releasable6 joined
[20:09] *** ChanServ sets mode: +v releasable6

[20:10] <nadim> moritz: wrong trace sorry, let me re run this

[20:10] <andreoss> I feel there's something wrong with using augmented classes for that

[20:11] <AlexDaniel> actually, another bot kaboom to get the latest nqp/moar bump…

[20:11] *** bisectable6 left
[20:11] *** unicodable6 left
[20:11] *** benchable6 left
[20:11] *** committable6 left
[20:11] *** bloatable6 left
[20:11] *** coverable6 left
[20:11] *** evalable6 left
[20:11] *** releasable6 left
[20:11] *** quotable6 left
[20:11] *** greppable6 left
[20:13] <nadim> moritz: here it is https://nopaste.linux-dev.org/?1160730

[20:13] *** cdg joined
[20:16] *** dubi0us left
[20:21] *** dubi0us joined
[20:22] <andreoss> raschipi: they could be called maybes but not in a Haskell manner

[20:22] <andreoss> you can't .map :U types for example

[20:23] *** dubi0us_ joined
[20:24] <raschipi> Of course you can:

[20:24] <raschipi> m: Any.map(*.say)

[20:24] <camelia> rakudo-moar 7b81f0: OUTPUT: «(Any)␤»

[20:24] <nadim> you can!

[20:24] <nadim> oops, too slow

[20:24] <andreoss> m: Int.map(* + 1).say

[20:24] <camelia> rakudo-moar 7b81f0: OUTPUT: «Invocant of method 'Bridge' must be an object instance of type 'Int', not a type object of type 'Int'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[20:25] *** dubi0us left
[20:25] <andreoss> should be Int

[20:25] <raschipi> m: Int.new.map(* + 1).say

[20:25] <camelia> rakudo-moar 7b81f0: OUTPUT: «(1)␤»

[20:27] <andreoss> Int.map(* + 1) should be Int accoring to the monoid laws

[20:28] <andreoss> if Int is a None type

[20:28] <raschipi> It's the + operator that requires defined arguments, it's not inherent in the type system. 

[20:29] <andreoss> + should be called in the case of monoid

[20:29] <raschipi> And what operators do with the types is language specific. The type system itself has maybe/option types.

[20:30] *** captain-adequate joined
[20:30] <andreoss> no, i'm wrong 

[20:31] <raschipi> Perl6 and Haskell were developed side by side, but they disagree on what should happen when specific incantations are called. Both fit the mathematical type model, though.

[20:32] *** markmont left
[20:33] *** dubi0us_ left
[20:33] <andreoss> ADT and type classes would be a nice thing to have though

[20:37] <raschipi> We do have something that implements the mathematical model called "ADT", they are called "modules".

[20:40] <raschipi> The mathematical model called "Type Classes" are implemented in "Type Variables".

[20:41] <andreoss> can you give an example?

[20:41] <raschipi> m: sub foo(::T $x)  {say "Got a " ~ T.^name; }; foo(4.2); foo("OH HAI");

[20:41] <camelia> rakudo-moar 7b81f0: OUTPUT: «Got a Rat␤Got a Str␤»

[20:42] <raschipi> m: sub foo(::T $x, T $y) { }; foo("OH HAI", "KPLZTHNXBYE"); foo("OH HAI", 42)

[20:42] <camelia> rakudo-moar 7b81f0: OUTPUT: «Type check failed in binding to parameter '$y'; expected Str but got Int (42)␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:43] <geekosaur> I find that statement a bit weird --- starting with, typeclasses are not part of a mathematical model. they're a convenience/syntax sugar

[20:43] <geekosaur> and at type level they are *constraints* on type variables

[20:44] *** rindolf left
[20:45] <raschipi> Haskeel doesn't implement anyhing without making a mathematical model for it first, apparently. So, the term refers to both the Haskell implementation and the mathematical model assossiated with it.

[20:45] <geekosaur> if only

[20:46] <geekosaur> Foldable doesnt have a mathematical model

[20:46] *** dubi0us joined
[20:46] <geekosaur> Num *certainly* doesn;t

[20:46] *** Xal joined
[20:47] *** pmurias left
[20:47] <raschipi> Well, in the case of Ad Hoc Polymorphism, they did require a Mathematical model.

[20:48] *** pmurias joined
[20:50] *** dubi0us left
[20:51] *** dubi0us joined
[20:52] <Geth> ¦ whateverable: 377826e017 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[20:52] <Geth> ¦ whateverable: Always list unreviewed commits

[20:52] <Geth> ¦ whateverable: 

[20:52] <Geth> ¦ whateverable: Even if the changelog for this release was not started yet.

[20:52] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/377826e017

[20:53] *** committable6 joined
[20:53] *** evalable6 joined
[20:53] *** bloatable6 joined
[20:53] *** ChanServ sets mode: +v committable6

[20:53] *** ChanServ sets mode: +v evalable6

[20:53] *** ChanServ sets mode: +v bloatable6

[20:53] *** releasable6 joined
[20:53] *** greppable6 joined
[20:53] *** unicodable6 joined
[20:53] *** coverable6 joined
[20:53] *** quotable6 joined
[20:53] *** benchable6 joined
[20:53] *** ChanServ sets mode: +v releasable6

[20:53] *** bisectable6 joined
[20:53] *** ChanServ sets mode: +v greppable6

[20:53] *** ChanServ sets mode: +v unicodable6

[20:53] *** ChanServ sets mode: +v coverable6

[20:53] *** ChanServ sets mode: +v quotable6

[20:53] *** ChanServ sets mode: +v benchable6

[20:53] *** ChanServ sets mode: +v bisectable6

[20:53] <raschipi> .botsnack

[20:53] <synopsebot6> om nom nom

[20:53] <yoleaux> :D

[20:54] <AlexDaniel> raschipi: let's not implemented that on all 11 whateverables…

[20:54] <raschipi> Moar botexplosions!

[20:55] *** dubi0us left
[21:00] *** markmont joined
[21:00] *** dubi0us joined
[21:03] *** cognominal left
[21:03] *** wamba left
[21:03] *** skids left
[21:03] *** mcmillhj left
[21:03] <nadim> Anyone else having an idea why requireing a module generates a "No such symbole" error?  the trace https://nopaste.linux-dev.org/?1160729

[21:04] *** mcmillhj joined
[21:04] *** dubi0us left
[21:05] *** st_elmo left
[21:06] *** mscha left
[21:06] *** rindolf joined
[21:07] *** mack[m] left
[21:07] *** M-Illandan left
[21:07] *** rindolf left
[21:07] *** wamba joined
[21:07] *** xui_nya[m] left
[21:07] *** ilmari[m] left
[21:07] *** unclechu left
[21:08] *** rindolf joined
[21:08] *** wictory[m] left
[21:08] *** mienaikage left
[21:08] *** Matthew[m] left
[21:08] *** tadzik left
[21:08] *** CIAvash[m] left
[21:08] <raschipi> andreoss: Do you see my point about the mathematics behind it leading to different implementations and that bot Perl6 and Haskell follow the models?

[21:08] *** mcmillhj left
[21:10] <andrzejku> fpaste freeze :/

[21:11] *** Aaronepower left
[21:11] *** ribasushi left
[21:11] <andreoss> raschipi: yes, have you seen my code?

[21:11] *** tyil[m] left
[21:12] <raschipi> Sorry, my wife just called. I gotta go.

[21:12] *** raschipi left
[21:14] <andrzejku> oh lol

[21:14] <andrzejku> https://paste.fedoraproject.org/paste/zLTuxm~M8L10KZT4H~iy~w/

[21:14] <andrzejku> It just don't print y/n

[21:14] <andrzejku> on console

[21:15] <andrzejku> shit

[21:15] <andrzejku> wrong channel

[21:16] *** dubi0us joined
[21:20] *** dubi0us left
[21:25] *** S007 left
[21:26] *** dubi0us joined
[21:28] *** S007 joined
[21:30] *** notostraca joined
[21:30] *** S007 left
[21:30] *** S007 joined
[21:30] *** dubi0us left
[21:32] *** Sgeo left
[21:33] *** TEttinger left
[21:35] *** dubi0us joined
[21:39] *** tadzik joined
[21:39] *** dubi0us left
[21:40] *** dubi0us joined
[21:42] *** dubi0us left
[21:42] *** ribasushi joined
[21:44] *** andrzejku left
[21:44] *** Cabanossi left
[21:45] *** Cabanossi joined
[21:47] *** dubi0us joined
[21:48] *** rindolf left
[21:51] *** dubi0us_ joined
[21:51] *** dubi0us left
[21:55] *** dubi0us_ left
[21:59] *** lowbro joined
[21:59] *** lowbro left
[21:59] *** lowbro joined
[22:02] *** Matthew[m] joined
[22:02] *** ilmari[m] joined
[22:02] *** mack[m] joined
[22:02] *** M-Illandan joined
[22:02] *** tyil[m] joined
[22:02] *** unclechu joined
[22:02] *** wictory[m] joined
[22:02] *** CIAvash[m] joined
[22:02] *** mienaikage joined
[22:02] *** xui_nya[m] joined
[22:02] *** dubi0us joined
[22:04] *** huf left
[22:05] *** Kyo91 left
[22:06] <Geth> ¦ whateverable: baeaf8b3dd | (Aleks-Daniel Jakimenko-Aleksejev)++ | t/coverable.t

[22:06] <Geth> ¦ whateverable: Revert "Everyone loves performance improvements!"

[22:06] <Geth> ¦ whateverable: 

[22:06] <Geth> ¦ whateverable: This reverts commit f2d1d8c13e673da1080216873a70467062f8668f.

[22:06] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/baeaf8b3dd

[22:06] <Geth> ¦ whateverable: a6595f172c | (Aleks-Daniel Jakimenko-Aleksejev)++ | t/bisectable.t

[22:06] <Geth> ¦ whateverable: Revert "Everyone loves performance improvements! №2"

[22:06] <Geth> ¦ whateverable: 

[22:06] <Geth> ¦ whateverable: This reverts commit be9c01a870b6ee945e0c33349e9eb8925aca76e9.

[22:06] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/a6595f172c

[22:06] *** Sgeo joined
[22:06] *** dubi0us left
[22:09] *** wamba left
[22:11] *** wamba joined
[22:13] *** dubi0us joined
[22:17] *** dubi0us left
[22:18] *** cognominal joined
[22:21] <brimonk> Is there a reason that references don't really exist in perl6?

[22:21] <brimonk> Maybe they do, and I'm still figuring the language out.

[22:22] <brimonk> But they don't seem to exist.

[22:22] <nadim> almosr everything is a refrence, so you don't need "reference" that's how things are

[22:23] <brimonk> nadim: The syntax has just gotten easier to use then?

[22:23] <nadim> I think it was easy before. IMO just forget about before, take it as it is now

[22:23] *** dubi0us joined
[22:24] <andreoss> can a has-scoped variable be exposed to other roles but not to a client?

[22:24] <andreoss> m:  role Foo { has $!a = 1 }; role Goo does Foo  { method foo {$!a }} ; Goo.new.foo

[22:24] <camelia> rakudo-moar 7b81f0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Attribute $!a not declared in role Goo␤at <tmp>:1␤------> 3 role Goo does Foo  { method foo {$!a }}7⏏5 ; Goo.new.foo␤    expecting any of:␤        horizontal whitespace␤        postfix␤  …»

[22:25] <nadim> andreoss: yes, if you mean something like friend in c++

[22:25] <nadim> but I forgot the name.

[22:25] <nadim> :)

[22:27] *** lowbro left
[22:27] <lizmat> trusts ?

[22:28] *** dubi0us left
[22:28] <lizmat> https://docs.perl6.org/routine/trusts

[22:28] <lizmat> not sure how that works with roles though

[22:28] *** dubi0us joined
[22:28] <nadim> lizmat: thank you for covering for my memory loss :)

[22:29] <lizmat> not sure it's the right answer though

[22:30] <brimonk> How do I define a variable in a class to be of a certain type?

[22:30] <nadim> trusting a role seems wrong altogether, as trusting to other roles. what does it mean altogether.

[22:31] <nadim> brimonk: has TYPE $var ;

[22:32] <brimonk> Thanks!

[22:32] *** dwarring joined
[22:32] *** dubi0us left
[22:32] <andreoss> m: role T { trusts Any };

[22:32] <camelia> rakudo-moar 29e41b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤No such method 'add_trustee' for invocant of type 'Perl6::Metamodel::ParametricRoleHOW'␤at <tmp>:1␤»

[22:32] <lizmat> could someone make a doc issue about "react" not being findable ?

[22:33] <nadim> lizmat  Any idea why requireing a module generates a "No such symbole" error?  the trace https://nopaste.linux-dev.org/?1160729

[22:34] <lizmat> nadim: sadly no: atm I'm trying to finish the P6W and then get some sleep  :-)

[22:34] <nadim> lizmat: the interesting thing is that none of my module work when required but Term::ANSIColor does.

[22:34] <nadim> lizmat: Good night :)

[22:38] <brimonk> Is there a way to start up the p6 interpreter and execute scripts from within it?

[22:38] *** dubi0us joined
[22:41] <nadim> from within it?

[22:41] *** espadrine left
[22:42] <nadim> inside your code you want to run other code that is in other files?

[22:42] *** dubi0us left
[22:43] *** alimon left
[22:43] <nadim> https://docs.perl6.org/routine/EVAL

[22:45] <brimonk> Can anyone help me figure out why I can't install DBIish? http://termbin.com/u6v1

[22:47] *** raschipi joined
[22:50] *** dubi0us joined
[22:50] *** skids joined
[22:50] <nadim> brimonk: https://github.com/salortiz/NativeHelpers-Blob/issues/2  there other known issues with that module

[22:51] <raschipi> lizmat: https://github.com/perl6/doc/issues/1449 Done

[22:52] <brimonk> So, I guess I should just rebuild my version of rakudo?

[22:52] <brimonk> I can try that.

[22:52] *** nhywyll left
[22:52] <nadim> it's pretty easy, clone the repo, follow the instruction, takes 3 mn to build

[22:53] <El_Che> Can CompUnit::Repository give me more than the name of a loaded module and optionaly a version if specified? I am playing with http://niner.name/talks/A%20look%20behind%20the%20curtains%20-%20module%20loading%20in%20Perl%206/CompUnit::Repository::DependencyTracker.html, and so far as I can see with the precomp thing, the best I can do to do a portable package of the loaded modules is to ship the precomp 

[22:53] <El_Che> directory with the module source somewhere if the user got a new rakudo version?

[22:53] <brimonk> nadim: I've done it before, just making sure that I understood is all.

[22:53] <brimonk> The parse test is what takes the longest.

[22:54] <nadim> doesn't matter what takes the longest, you have to do it anyway

[22:54] *** dubi0us left
[22:54] <nadim> start the build, do something else in the meantime

[22:54] <andreoss> what does Int<141341> returned by .gist mean?

[22:55] <brimonk> nadim: It died again.

[22:56] <brimonk> Wait,

[22:56] <El_Che> I see the travis build for perl6 uses rakudobrew and takes ages to run? Is there interest in using my linux packages so the images run way faster? Or is the choice for rakudobrew by design?

[22:57] *** mcmillhj joined
[22:57] <lizmat> El_Che: not by design, afaik  :-)

[22:59] *** wamba left
[22:59] <raschipi> El_Che: The docs have a bug report about taking too long to run, for example.

[23:00] *** dubi0us joined
[23:00] *** pmurias left
[23:00] <ckraniak> Can one re-export the stuff imported from a sub-module?

[23:00] <ckraniak> Without manually doing it all anyway

[23:02] *** wamba joined
[23:02] *** mcmillhj left
[23:02] <lizmat> and another issue of the Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/08/14/2017-33-in-review/

[23:02] <brimonk> nadim: It still dies, even with the latest version of stable.

[23:03] <brimonk> Unless it's my version of zef that causes it to be dying.

[23:03] <raschipi> lizmat++

[23:05] <El_Che> raschipi: using debs for rakudo the base setup would takes us from dozens of minutes to seconds

[23:05] <raschipi> El_Che: They can't even upgrade from ubuntu 12.04.

[23:08] <El_Che> raschipi: they? I see more recent versions here https://docs.travis-ci.com/user/reference/overview/

[23:08] *** dubi0us left
[23:09] <El_Che> raschipi: and whatever ubuntu version travis support, I am willing to create debs automatically for them 

[23:09] *** dubi0us joined
[23:10] <raschipi> There are debs, ryu0 has a PPA.

[23:10] <El_Che> even better

[23:11] <brimonk> Here's the problem, I think it's unchanged: http://termbin.com/nhvo

[23:11] <El_Che> my monthly ubuntu debs are for 16.04 and 17.04 (EOL'ed 16.10)

[23:11] <brimonk> And I did a fresh build of rakudo.

[23:11] <El_Che> lizmat: thx for the weekly!

[23:13] *** dubi0us left
[23:14] <AlexDaniel> Uzu looks so promising

[23:18] *** dubi0us joined
[23:20] <El_Che> nine: great talk btw about the module loading internals

[23:22] *** dubi0us left
[23:25] *** pierre_ joined
[23:29] *** Cabanossi left
[23:29] *** dubi0us joined
[23:30] *** Cabanossi joined
[23:31] *** pierre_ left
[23:33] *** dubi0us left
[23:34] *** wamba left
[23:39] *** dubi0us joined
[23:44] <Juerd> Things became slower. The MQTT::Client unit tests now take 10 seconds, used to take 7.

[23:45] <Juerd> Maybe I'll bisect that later

[23:46] <brimonk> Anyone have any thoughts as to why I can't install DBIish? http://termbin.com/nhvo

[23:47] *** dubi0us left
[23:48] <AlexDaniel> Juerd: if you have a short-enough snippet, we can try bisecting it with a bot

[23:48] <AlexDaniel> Juerd: also, what rakudo version are you using?

[23:49] *** dubi0us joined
[23:49] <AlexDaniel> Juerd: there was a Moar/NQP bump 5 hours ago which fixed a memory leak (which was eventually causing things to slow down)

[23:51] *** ribasushi left
[23:51] *** lizmat left
[23:51] *** john51 left
[23:51] *** ryu0 left
[23:51] *** ranguard left
[23:51] *** sjn left
[23:51] *** jeek left
[23:51] *** basket` left
[23:51] *** tony-o left
[23:51] *** pierrot left
[23:51] *** jsimonet left
[23:51] *** gabiruh left
[23:51] *** joy left
[23:51] *** plicease left
[23:51] *** ponbiki left
[23:51] *** lumimies left
[23:51] *** Spot__ left
[23:51] *** domm left
[23:51] *** musca left
[23:51] *** raydiak_ left
[23:51] *** tomaw left
[23:51] *** MilkmanDan left
[23:51] *** CIAvash[m] left
[23:51] *** wictory[m] left
[23:51] *** nightfrog left
[23:51] *** cpage left
[23:51] *** ambs left
[23:51] *** lucs left
[23:51] *** nowan left
[23:51] *** shadowpaste left
[23:51] *** go|dfish left
[23:51] *** TimToady left
[23:51] *** APic left
[23:51] *** stux|RC-only left
[23:51] *** smash left
[23:51] *** mattp_ left
[23:51] *** kubrat left
[23:51] *** markmont left
[23:51] *** cdg left
[23:51] *** dustinm` left
[23:51] *** tbrowder left
[23:51] *** buggable left
[23:51] *** leego left
[23:51] *** NeuralAnomaly left
[23:51] *** huggable left
[23:51] *** ZofBot left
[23:51] *** obra left
[23:51] *** TeamBlast left
[23:51] *** protium left
[23:51] *** BuildTheRobots left
[23:51] *** jhill left
[23:51] *** robinsmidsrod left
[23:51] *** simcop2387 left
[23:51] *** captain-adequate left
[23:51] *** Geth left
[23:51] *** andreoss left
[23:51] *** Alikzus left
[23:51] *** masak left
[23:51] *** k-man left
[23:51] *** jameslenz left
[23:51] *** titsuki left
[23:51] *** Celelibi left
[23:51] *** eater left
[23:51] *** Unavowed left
[23:51] *** ingy left
[23:51] *** Grrrr left
[23:51] *** gfldex left
[23:51] *** hcit_ left
[23:51] *** tinita left
[23:51] *** Dunearhp left
[23:51] *** Guest17892 left
[23:51] *** Gothmog_ left
[23:51] *** mantovani left
[23:51] *** raschipi left
[23:51] *** dwarring left
[23:51] *** MasterDuke left
[23:51] *** zoll left
[23:51] <skids> commit: releases unit module Foo; sub foo() is export {}; say Foo::<EXPORT>.WHICH eq UNIT::<EXPORT>.WHICH

[23:51] <committable6> skids, ¦2015.12,2016.01.1,2016.02,2016.03,2016.04,2016.05,2016.06,2016.07.1: «True» ¦2016.08.1,2016.09,2016.10,2016.11,2016.12,2017.01,2017.02,2017.03,2017.04.3,2017.05,2017.06,2017.07,HEAD(231cb3f): «False»

[23:51] *** simcop2387 joined
[23:52] *** obra joined
[23:52] *** huggable joined
[23:52] *** NeuralAnomaly joined
[23:52] *** buggable joined
[23:52] *** ZofBot joined
[23:52] *** daxim joined
[23:52] *** nadim left
[23:52] *** markmont joined
[23:52] *** k-man joined
[23:52] *** leego joined
[23:52] *** robinsmidsrod joined
[23:52] *** luis joined
[23:52] *** TeamBlast joined
[23:52] *** cdg joined
[23:53] *** tbrowder joined
[23:53] *** dustinm` joined
[23:53] *** dubi0us left
[23:53] <AlexDaniel> brimonk: hello

[23:53] <AlexDaniel> brimonk: I think it's a regression of some sort, one second…

[23:53] *** parisba joined
[23:53] *** clkao joined
[23:54] <AlexDaniel> bisect: old=HEAD~300 https://gist.githubusercontent.com/AlexDaniel/1e2c456f006687ea7100a35b2931af41/raw/9aad30ec83728b43b5d1d134a4c0701354e2c8c5/nativehelpers-test.p6

[23:54] <bisectable6> AlexDaniel, Successfully fetched the code from the provided URL.

[23:54] <bisectable6> AlexDaniel, Bisecting by exit code (old=HEAD~300 new=231cb3f). Old exit code: 0

[23:54] *** SmokeMachine joined
[23:54] *** epony left
[23:54] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/ccec99653559dd5f130e8a033fc7bdfb

[23:54] <bisectable6> AlexDaniel, (2017-08-07) https://github.com/rakudo/rakudo/commit/46ef1b5b48dd51a47a7de70d4740bcea9779a104

[23:54] <skids> bisect: good=2016.07.1 bad=2016.08.1 unit module Foo; sub foo() is export {}; say Foo::<EXPORT>.WHICH eq UNIT::<EXPORT>.WHICH

[23:54] <bisectable6> skids, Bisecting by output (old=2016.07.1 new=2016.08.1) because on both starting points the exit code is 0

[23:54] *** Matthew[m] left
[23:54] *** tyil[m] left
[23:54] <bisectable6> skids, bisect log: https://gist.github.com/5ec10dbe603d4197416a732fe0c1e48b

[23:54] <bisectable6> skids, (2016-08-15) https://github.com/rakudo/rakudo/commit/4d85cde90883e031650600b9f55a87e86acb632c

[23:54] *** jhill joined
[23:54] *** ribasushi joined
[23:54] *** xui_nya[m] left
[23:54] *** ilmari[m] left
[23:55] <AlexDaniel> brimonk: yes

[23:55] *** BuildTheRobots joined
[23:55] *** mack[m] left
[23:55] *** CIAvash[m] joined
[23:55] *** wictory[m] joined
[23:55] *** nightfrog joined
[23:55] *** MilkmanDan joined
[23:55] *** cpage joined
[23:55] *** ambs joined
[23:55] *** lucs joined
[23:55] *** APic joined
[23:55] *** nowan joined
[23:55] *** shadowpaste joined
[23:55] *** go|dfish joined
[23:55] *** TimToady joined
[23:55] *** stux|RC-only joined
[23:55] *** smash joined
[23:55] *** mattp_ joined
[23:55] *** kubrat joined
[23:55] <AlexDaniel> nine: any ideas? ↑

[23:55] *** tadzik left
[23:55] *** wictory[m] left
[23:55] *** CIAvash[m] left
[23:55] <ijneb> What is goin on lol

[23:55] *** unclechu left
[23:55] *** stux|RC-only left
[23:55] *** APic left
[23:55] *** go|dfish left
[23:56] *** raschipi joined
[23:56] *** dwarring joined
[23:56] *** MasterDuke joined
[23:56] *** zoll joined
[23:56] *** pnu__ joined
[23:56] *** pnu__ left
[23:56] *** pnu__ joined
[23:56] *** mienaikage left
[23:56] *** lizmat joined
[23:56] *** john51 joined
[23:56] *** ryu0 joined
[23:56] *** ranguard joined
[23:56] *** sjn joined
[23:56] *** jeek joined
[23:56] *** basket` joined
[23:56] *** tony-o joined
[23:56] *** pierrot joined
[23:56] *** jsimonet joined
[23:56] *** gabiruh joined
[23:56] *** joy joined
[23:56] *** plicease joined
[23:56] *** ponbiki joined
[23:56] *** Spot__ joined
[23:56] *** lumimies joined
[23:56] *** domm joined
[23:56] *** musca joined
[23:56] *** raydiak_ joined
[23:56] *** M-Illandan left
[23:56] *** tomaw joined
[23:56] *** rodarmor joined
[23:56] *** stux|RC-only joined
[23:56] *** APic joined
[23:56] <AlexDaniel> brimonk: actually, can you submit a bug report with that?

[23:56] *** captain-adequate joined
[23:56] *** Geth joined
[23:56] *** andreoss joined
[23:56] *** Alikzus joined
[23:56] *** masak joined
[23:56] *** jameslenz joined
[23:56] *** titsuki joined
[23:56] *** Celelibi joined
[23:56] *** eater joined
[23:56] *** Unavowed joined
[23:56] *** ingy joined
[23:56] *** Grrrr joined
[23:56] *** gfldex joined
[23:56] *** hcit_ joined
[23:56] *** tinita joined
[23:56] *** Dunearhp joined
[23:56] *** Guest17892 joined
[23:56] *** Gothmog_ joined
[23:56] *** mantovani joined
[23:56] *** BooK_ joined
[23:56] *** zb joined
[23:56] *** raschipi left
[23:56] *** dwarring left
[23:56] *** MasterDuke left
[23:56] *** zoll left
[23:56] *** go|dfish joined
[23:56] *** Guest17892 left
[23:56] *** ggherdov joined
[23:57] *** tomaw left
[23:57] *** MilkmanDan left
[23:57] *** nightfrog left
[23:57] *** cpage left
[23:57] *** ambs left
[23:57] *** lucs left
[23:57] *** nowan left
[23:57] *** shadowpaste left
[23:57] *** TimToady left
[23:57] *** smash left
[23:57] *** mattp_ left
[23:57] *** kubrat left
[23:58] *** dubi0us joined
[23:58] *** john51 left
[23:58] *** john51 joined
[23:59] *** ennio joined
[23:59] *** nightfrog joined
[23:59] *** MilkmanDan joined
[23:59] *** cpage joined
[23:59] *** ambs joined
[23:59] *** lucs joined
[23:59] *** nowan joined
[23:59] *** shadowpaste joined
[23:59] *** TimToady joined
[23:59] *** smash joined
[23:59] *** mattp_ joined
[23:59] *** kubrat joined
