[00:08] *** Cabanossi left
[00:09] *** Cabanossi joined
[00:10] *** timeless joined
[00:20] *** cpage_ joined
[00:25] *** yqt left
[00:47] *** astj joined
[00:55] *** kurahaupo_ joined
[00:56] *** kurahaupo left
[01:21] *** Cabanossi left
[01:24] *** Cabanossi joined
[01:31] *** isBEKaml left
[01:31] *** cpage_ left
[01:45] *** ilbot3 left
[01:49] *** ilbot3 joined
[01:49] *** ChanServ sets mode: +v ilbot3

[02:07] *** Cabanossi left
[02:09] *** Cabanossi joined
[02:10] *** aindilis left
[02:18] *** mcmillhj joined
[02:21] *** eliasr left
[02:23] *** mcmillhj left
[02:37] *** poohman joined
[02:47] *** noganex joined
[02:50] *** noganex_ left
[02:56] *** cibs_ is now known as cibs

[03:00] *** pierre_ joined
[03:06] *** mcmillhj joined
[03:10] *** mcmillhj left
[03:12] *** poohman left
[03:18] *** mcmillhj joined
[03:22] *** Cabanossi left
[03:24] *** Cabanossi joined
[03:34] *** dwarring left
[03:36] *** Cabanossi left
[03:37] <Geth> Swapped META.info ‚Üí META6.json in 1 dists in https://github.com/perl6/ecosystem/commit/9db0764a6a

[03:38] *** Cabanossi joined
[03:38] *** skids left
[03:41] *** pierre_ left
[03:45] *** aindilis joined
[03:50] *** aborazmeh joined
[03:50] *** aborazmeh left
[03:50] *** aborazmeh joined
[03:50] *** khw left
[03:52] *** tharkun_ left
[03:52] *** tharkun_ joined
[03:52] *** tharkun_ is now known as tharkun

[03:58] *** pierre_ joined
[03:58] <pierre_> Hi all, quick question, how can i verifiy the version of a module, in my perl6 code?

[03:59] <pierre_> Module metas are in Perl6::Metamodel::ModuleHOW

[03:59] <pierre_> but i did not find anything about that class in the docs

[04:04] *** kurahaupo_ left
[04:07] *** Cabanossi left
[04:08] *** Cabanossi joined
[04:13] *** zapwai left
[04:19] *** wamba joined
[04:21] <pierre_> It seems that one of the bug i reported a long time ago is fixed

[04:21] <pierre_> https://rt.perl.org/Ticket/Display.html?id=127959

[04:24] *** mcmillhj left
[04:28] *** pierre_ left
[04:31] *** xtreak joined
[04:39] *** xtreak left
[04:40] *** mcmillhj joined
[04:43] *** xtreak joined
[04:45] *** mcmillhj left
[04:46] *** KDr2_c joined
[04:54] *** cpage_ joined
[05:14] *** imcsk8 left
[05:21] *** Cabanossi left
[05:21] *** imcsk8 joined
[05:23] *** Cabanossi joined
[05:36] *** lowbro joined
[05:36] *** lowbro left
[05:36] *** lowbro joined
[05:39] *** ufobat___ joined
[05:58] *** pierre_ joined
[06:17] *** alyptik joined
[06:22] *** aborazmeh left
[06:24] *** go|dfish joined
[06:25] *** parv joined
[06:39] *** domidumont joined
[06:40] <u-ou> is there a good tutorial on effective use of roles?

[06:44] *** domidumont left
[06:45] *** domidumont joined
[06:57] *** wamba left
[06:58] *** jsimonet joined
[07:02] <moritz> u-ou: I'm not aware of one

[07:03] <moritz> if you find one, please let me know :-)

[07:03] <u-ou> ok :p

[07:03] <moritz> pierre_: I think you can use TheModule:ver<0.1>; or something like that

[07:12] *** TimToady left
[07:12] *** darutoko joined
[07:16] *** rindolf joined
[07:16] *** astj left
[07:21] *** Cabanossi left
[07:22] *** astj joined
[07:23] *** Cabanossi joined
[07:25] *** mcmillhj joined
[07:27] <Geth> ¬¶ ecosystem: d735bea0b5 | (Martin Barth)++ (committed using GitHub Web editor) | META.list

[07:27] <Geth> ¬¶ ecosystem: XML::XPath: meta -> meta6

[07:27] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/d735bea0b5

[07:28] *** ufobat___ is now known as ufobat

[07:28] *** ufobat left
[07:28] *** ufobat joined
[07:34] *** mcmillhj left
[07:39] <Geth> Swapped META.info ‚Üí META6.json in 1 dists in https://github.com/perl6/ecosystem/commit/2f3e47a9fa

[07:39] *** zengargoyle left
[07:42] *** domidumont left
[07:43] *** domidumont joined
[07:44] *** salva joined
[07:50] *** TimToady joined
[07:50] <sammers> hi all

[07:51] *** pierre_ left
[07:52] <u-ou> hi

[07:56] *** mcmillhj joined
[07:59] *** pierre_ joined
[08:01] *** mcmillhj left
[08:02] *** wamba joined
[08:03] <pierre_> moritz: yes, i can force inclusion of one version, but i wanted to include a module and then check what version it is

[08:04] <pierre_> i ended up checking with zef

[08:04] <pierre_> zef info Some::Module

[08:09] *** cpage__ joined
[08:11] *** cpage left
[08:11] *** cpage__ is now known as cpage

[08:21] *** xtreak left
[08:22] *** Cabanossi left
[08:23] *** Cabanossi joined
[08:23] *** xtreak joined
[08:27] <samcv> stage 3 (or 4?), going to do the rest of the licenses by hand. have my robot print out to a file its 3 best guesses along with percent match, then i can choose the right one myself

[08:27] *** zakharyas joined
[08:29] <tyil> nice

[08:30] <samcv> 8 threads is a good number

[08:30] <samcv> ok done. cool. so 120

[08:33] <tyil> samcv: I looked into nightly .deb builds for rakudo, can either use fpm or just write a small script for the specific task

[08:33] <tyil> can run either cronjobbed on one of my servers

[08:33] *** TEttinger left
[08:33] <tyil> might make an apt repo to make it even easier to use in travis

[08:35] <ufobat> hi )

[08:36] <tyil> hi

[08:39] <Geth> Swapped META.info ‚Üí META6.json in 4 dists in https://github.com/perl6/ecosystem/commit/ace0b26929

[08:39] *** xtreak left
[08:40] *** xtreak joined
[08:42] <samcv> nice it even picks out GPL-3.0+ vs GPL-3.0

[08:42] <samcv> for ones that are any later version. though i'm double checking that with ctrl +f to make double sure

[08:44] *** xtreak left
[08:48] <samcv> can put a plus after any license identifier, if it contains a clause that allows you to use newer versions if you choose. i guess in old SPDX revisions GPL-3.0+ was its own identifier, but obviously they decided that was silly, and let you apply it to any license identifier

[08:50] *** eliasr joined
[08:55] *** xtreak joined
[08:57] <samcv> wow no wonder the best match was 00.04 % for this license...

[08:57] <samcv> https://raw.githubusercontent.com/Juerd/p6-mqtt/master/LICENSE

[08:57] <samcv> text just says: Pick your favourite OSI approved license :)

[08:58] <u-ou> :|

[08:58] <samcv> not sure what to put for license identifier

[08:58] <tyil> I wonder what legal license that is under

[08:58] <tyil> samcv: just pick one

[08:58] <samcv> uh. grep all the OSI approved liceese and then use OR semantics

[08:58] <samcv> GPL-3.0 OR ARtistic-2.0 OR GPL-2.0 OR ......

[08:58] <samcv> hahah.

[08:58] <u-ou> maybe contact them

[08:58] <samcv> tell them uhm

[08:59] <tyil> "can you pick a license already"

[09:00] <samcv> yeah

[09:01] <samcv> just copy and paste exact text in a github issue :)

[09:01] *** geekosaur left
[09:01] <samcv> though it would be crazy if they put OR semantics and did all like 40 OSI approved ones

[09:01] <samcv> would be valid to the spec afaik

[09:02] *** ufobat left
[09:02] <tyil> if thats what they want, let them do it

[09:02] <tyil> might wanna advice them in the issue not to do it, though

[09:02] <samcv> lol

[09:02] <tyil> then you at least tried

[09:02] <samcv> cause it's insane

[09:02] <samcv> but you COULD do it.

[09:03] <tyil> you could also fork it by 9BST and just re-release it only under gpl

[09:03] <samcv> goddamit

[09:03] <samcv> X|

[09:03] <samcv> :V

[09:03] <tyil> !fw :V

[09:04] <tyil> no fw bot? :<

[09:04] <samcv> yeah my bot's not in here

[09:04] <tyil> oh

[09:04] <tyil> what a mediocre channel :'D

[09:04] <samcv> there's plenty of other bots though

[09:04] <samcv> huggable, hug tyil 

[09:04] * huggable hugs tyil 

[09:04] <tyil> tfw

[09:04] <tyil> been ages since I had a hug :(

[09:05] <tyil> now youre just tryna make me depressed

[09:07] *** Cabanossi left
[09:08] *** Cabanossi joined
[09:09] *** jjack_ joined
[09:10] *** jjack_ left
[09:12] <samcv> > use JSON::Fast; my %hash = from-json qx{curl 'https://raw.githubusercontent.com/sindresorhus/spdx-license-list/master/spdx-full.json'};  %hash.keys.grep({%hash{$_}<osiApproved> eq 'True'}).join(' OR ')

[09:12] <samcv> well i did it

[09:12] <tyil> :p

[09:13] <samcv> https://gist.github.com/samcv/9649c99e1ada49916ceb034715a102b0

[09:13] <samcv> all OSI-approved

[09:13] <samcv> I should post that in the issue :) just for fun

[09:14] <tyil> link to issue

[09:14] <samcv> i haven't made it yet

[09:14] <tyil> wow

[09:21] <samcv> i wish i could write emails in markdown

[09:21] <samcv> tyil, here's the issue https://github.com/Juerd/p6-mqtt/issues/3

[09:22] <El_Che> samcv: there is html if you like to be unpopular in tech mids :)

[09:22] <samcv> yes i know but

[09:22] <grondilu> samcv: what prevents you from using markdown in emails?

[09:23] <samcv> it not rendering as markdown in my email client or others clients

[09:23] <grondilu> markdown is designed to look good even without any rendering

[09:23] <samcv> oh hey would have been way faster to DL if i hadn't dl'd the json with the full license text for every single spdx licesne lol. https://github.com/sindresorhus/spdx-license-list/blob/master/spdx.json this one is much shorter

[09:28] *** xtreak left
[09:28] <samcv> m: 'GPL-1.0+ OR Artistic-1.0-Perl WITH Madeup-exception'.split(' OR ').perl.say

[09:28] <camelia> rakudo-moar aa23a9: OUTPUT: ¬´("GPL-1.0+", "Artistic-1.0-Perl WITH Madeup-exception").Seq‚ê§¬ª

[09:28] <samcv> nice that it's easy to just split it and get all the licenses, and still works even if they have excptions

[09:29] *** wamba left
[09:29] *** andrzejku left
[09:40] *** andrzejku joined
[09:42] *** andrzejku left
[09:43] *** andrzejku joined
[09:45] <tyil> samcv: you can write emails in markdown

[09:45] <tyil> its just a plaintext format after all

[09:46] <tyil> wether the email client renders it nicely is another question

[09:48] <tyil> added a +1 to the issue

[09:50] *** bjz joined
[09:54] *** zengargoyle joined
[09:56] <samcv> nice

[09:58] <El_Che> tyil: it's not just text, but formatter. Any "advanced" feature you use (e.g. url, list, etc) will look weird

[09:58] <tyil> hmm?

[10:00] <El_Che> This is [an example](http://example.com/ "Title") inline link.

[10:00] <tyil> yes?

[10:00] <El_Che> that is extremely weird for someone that does not parses markdown in his head

[10:00] <El_Che> as in "regular people" :)

[10:00] <tyil> where is this suddenly coming from tho

[10:00] <tyil> I'm aware how markdown works and looks like

[10:00] *** wamba joined
[10:01] *** andrzejku left
[10:01] <El_Che> tyil: ignore me, I probably misunderstood

[10:01] <grondilu> links are not the best indeed, but it's not too bad.  Using tinyurl can also improve things

[10:02] *** duncan_dmg joined
[10:02] <tyil> tinyurl is using cloudflare tho

[10:02] <grondilu> any similar service then

[10:09] *** labster left
[10:14] *** astj left
[10:18] *** pierre_ left
[10:18] <parv> seems to me El_Che tried to explain the problem with markdown-in-email. for which i am thankful.

[10:28] *** xtreak joined
[10:33] *** xtreak left
[10:33] *** andrzejku joined
[10:34] *** astj joined
[10:35] *** pierre_ joined
[10:36] <parv> time to go ...

[10:37] *** xtreak joined
[10:37] *** parv left
[10:43] *** astj left
[10:46] *** pierre_ left
[11:04] *** xtreak left
[11:10] *** ufobat joined
[11:16] *** xtreak joined
[11:20] *** Cabanossi left
[11:23] *** Cabanossi joined
[11:28] *** wamba left
[11:42] *** kurahaupo joined
[11:47] *** xtreak left
[11:51] *** sena_kun joined
[11:51] *** kurahaupo left
[11:58] <Juerd> samcv: The license allows you to pick your favorite. I don't see why I should pick your favorite when you can do this yourself :)

[12:00] <Juerd> As for tagging, if you wish to fully encode the LICENSE file, it would either require its own tag, or something to keep it up to date. The latter might not be worth the effort

[12:02] <tyil> Juerd: you can pick the big list on the issue if you want

[12:03] *** kurahaupo joined
[12:03] <tyil> its just that there's no license field in your META yet, hence the opened issue

[12:04] <Juerd> I'm considering picking a limited set for the tags

[12:04] <Juerd> It doesn't necessarily have to encode all options, does it?

[12:06] *** bjz left
[12:06] <tyil> if you want to release it under all those licenses you should have them all in the license field in your META

[12:06] <tyil> I believe the standard nowadays is META6.json for that file as well, btw

[12:07] <Juerd> Yes, I saw a PR for renaming the file

[12:07] *** bjz_ joined
[12:07] <Juerd> This will have to wait until I'm with the Android phone that has my 2nd factor for logging in on github :)

[12:08] <Juerd> That's also why I'm commenting here, instead of at the issue

[12:08] <tyil> no hurry, its not the end of the world if its not updated within a day :p

[12:09] *** raiph left
[12:09] <Juerd> :)

[12:10] *** raiph joined
[12:21] *** darutoko left
[12:23] *** raschipi joined
[12:24] *** pierre_ joined
[12:35] *** esh joined
[12:36] *** wamba joined
[12:36] *** esh left
[12:42] *** raiph left
[12:42] *** raiph joined
[12:47] *** raiph left
[12:48] *** raiph joined
[12:50] *** wamba left
[12:53] *** raiph left
[12:53] *** raiph joined
[12:53] <awwaiid> Ulti: different person I assume, I don't recall doing any linting. I thought you tab-completed wrong :)

[12:57] *** mcmillhj joined
[12:58] <[Coke]> mst: anyone with your irc superpowers on the irc.perl.org server?

[12:59] *** raiph left
[13:00] *** raiph joined
[13:01] <tyil> tfw on irc.perl.org, but no superpowers :(

[13:05] *** AlexDaniel joined
[13:15] *** raiph left
[13:16] *** raiph joined
[13:19] *** ufobat left
[13:30] *** cdg joined
[13:36] *** pierre_ left
[13:37] *** Cabanossi left
[13:38] *** salva left
[13:38] *** Cabanossi joined
[13:46] *** raiph left
[13:48] *** raiph joined
[13:48] <perigrin> [Coke]: I have them ... but I wasn't awake when the last spammer went through

[13:51] *** skids joined
[13:52] *** bjz_ left
[13:52] *** raschipi left
[13:53] *** bjz joined
[13:56] *** yqt joined
[13:57] *** esh joined
[14:04] *** raiph left
[14:05] *** raiph joined
[14:21] *** esh left
[14:23] *** poohman joined
[14:24] <poohman> hello people, what is the minimum memory requirement to run moarvm

[14:24] <poohman> ?

[14:26] *** wamba joined
[14:26] <timotimo> running moarvm is rather cheap

[14:26] <jnthn> To run what on MoarVM? :)

[14:26] <timotimo> you can compile and run an empty program with nqp in 1.4 megabytes of ram

[14:27] <timotimo> wait

[14:27] <jnthn> 1.4? How'd you get that? :)

[14:27] <timotimo> it's actually 14 megs

[14:27] <jnthn> yeah, was gonna say :)

[14:27] <timotimo> my eyes kind of failed to count the number of digits there

[14:27] <poohman> I was trying to build perl6 in sailfishos directly on the device and got a bus error 

[14:27] <timotimo> bus error? did you compile moarvm with the right target architecture?

[14:27] <timotimo> it could be an illegal instruction it executed

[14:28] <timotimo> if you want to build perl6 it'll take like 1.5 gigs of ram

[14:28] <jnthn> What CPU does the device have?

[14:28] <poohman> arm

[14:28] <poohman> need to check the specifics

[14:28] <timotimo> the exact revision is also interesting, i.e. what you'd get for "flags" in cat /proc/cpuinfo

[14:29] <jnthn> Bus error is often things like unaligned access

[14:29] <timotimo> oh, that's another possibility, yeah

[14:29] <timotimo> you might get a better output when you look at "dmesg"

[14:29] <jnthn> Though I know we've built on PPC and ARM on the past, which are both fussier on those things than x86/x64

[14:29] <timotimo> aye

[14:30] <poohman> there was a similar thread showing a problem when building it in raspberry pi

[14:30] <ilmari> I audited the code for unaligned access (using UBSAN) a while back

[14:30] <timotimo> if the moarvm binary was compiled on the sailfish os device itself, that ought to give you all the right things

[14:30] <ilmari> it might have regressecd, though

[14:30] <jnthn> But yeah, building Rakudo in a memory-constrained environment will be the tricky part; the CORE.setting step is hungry

[14:30] <poohman> 2 gigs memory in the phone

[14:31] <poohman> don't know how much I had free

[14:32] <timotimo> i wonder if the uncurse work will enable us to make the core setting use noticably less ram

[14:32] <poohman> it happened after the build of moarvm I think

[14:32] <timotimo> the core setting compilation

[14:32] <ilmari> you may have to fiddle with build/probe.pm to adjust the unaligned access detection

[14:32] <poohman> give me an hour - can give the exact error and when it happened 

[14:33] <timotimo> that'll be helpful, i imagine

[14:33] <jnthn> Bus Error feels like a slightly odd way for out of memory to be communicated; often it's Killed (by some OOM killer) an explicit out of memory error; MoarVM's various malloc calls are all guarded against NULL return.

[14:33] <jnthn> So I'm suspecting it may be something else (even if there is a memory issue too)

[14:36] *** bjz_ joined
[14:37] *** bjz left
[14:41] <Geth> Swapped META.info ‚Üí META6.json in 2 dists in https://github.com/perl6/ecosystem/commit/ad5bcb72e2

[14:42] *** poohman2 joined
[14:46] *** poohman left
[14:51] *** Cabanossi left
[14:52] <poohman2> ATTENTION: no --prefix supplied, building and installing to /home/nemo/source/rakudo/install

[14:53] *** bjz_ left
[14:53] *** Cabanossi joined
[14:54] *** duncan_dmg left
[14:55] *** bjz joined
[14:55] <poohman2> then it says make ***[gen/moar/stage1/nqpmo.moarvm] Bus error

[14:59] *** lowbro left
[15:00] *** khw joined
[15:05] *** andrzejku left
[15:07] *** Sgeo__ joined
[15:09] *** Sgeo_ left
[15:20] *** bjz left
[15:21] *** pmurias joined
[15:22] <pmurias> why when searching for 'try' docs.perl6.org shows 'infix gt' first?

[15:23] <sena_kun> pmurias, fuzzing matching. Our docs search engine needs a lot of love.

[15:28] <timotimo> poohman2: is that a call to Configure.pl that's giving you that?

[15:28] <timotimo> if so, does it have a --gen-moar or something?

[15:38] *** raschipi joined
[15:41] *** Sgeo_ joined
[15:43] *** Sgeo__ left
[15:48] <sena_kun> m: say grammar { regex TOP { <name> <praise> }; regex name {"I am " $<name>=(.+?) \.}; regex praise { " $<name> is good." } }.parse: "I am Jack. Jack is good."

[15:48] <camelia> rakudo-moar 6de089: OUTPUT: ¬´Use of Nil in string context‚ê§  in regex praise at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in regex praise at <tmp> line 1‚ê§Nil‚ê§¬ª

[15:49] <sena_kun> this grammar is impossible and bad-designed, obviously, should I put everything that uses my named capture in a single regex?

[15:49] *** AlexDaniel left
[15:49] <jnthn> That or pass it to <praise> as a parameter

[15:50] <sena_kun> jnthn, how can I pass it as a parameter?

[15:50] *** geraud joined
[15:50] <jnthn> m: say grammar { regex TOP { <name> <praise($<name>)> }; regex name {"I am " $<name>=(.+?) \.}; regex praise($name) { " $name is good." } }.parse: "I am Jack. Jack is good."

[15:50] <camelia> rakudo-moar 6de089: OUTPUT: ¬´Use of Nil in string context‚ê§  in regex praise at <tmp> line 1‚ê§Use of Nil in string context‚ê§  in regex praise at <tmp> line 1‚ê§Nil‚ê§¬ª

[15:50] <jnthn> m: say grammar { regex TOP { <name> {} <praise($<name>)> }; regex name {"I am " $<name>=(.+?) \.}; regex praise($name) { " $name is good." } }.parse: "I am Jack. Jack is good."

[15:50] <camelia> rakudo-moar 6de089: OUTPUT: ¬´Nil‚ê§¬ª

[15:51] <jnthn> m: say grammar { regex TOP { <name> {} <praise($<name>)> }; regex name {"I am " $<name>=(.+?) \.}; regex praise($name) { "$name is good." } }.parse: "I am Jack. Jack is good."

[15:51] <camelia> rakudo-moar ba3cf4: OUTPUT: ¬´Nil‚ê§¬ª

[15:51] <jnthn> Hmmm

[15:51] <jnthn> m: say grammar { regex TOP { <name> {} <praise($<name>)> }; regex name {"I am " $<name>=(.+?) \.}; regex praise($name) { { say ~$name } "$name is good." } }.parse: "I am Jack. Jack is good."

[15:51] <camelia> rakudo-moar ba3cf4: OUTPUT: ¬´I am Jack.‚ê§I am Jack. Jack is good.‚ê§Nil‚ê§¬ª

[15:52] <jnthn> o.O

[15:52] *** esh joined
[15:52] <jnthn> m: say grammar { regex TOP { <name> {} <praise(~$<name>)> }; regex name {"I am " $<name>=(.+?) \.}; regex praise($name) { { say $name } "$name is good." } }.parse: "I am Jack. Jack is good."

[15:52] <camelia> rakudo-moar ba3cf4: OUTPUT: ¬´I am Jack.‚ê§I am Jack. Jack is good.‚ê§Nil‚ê§¬ª

[15:53] <jnthn> Ohhh!

[15:53] <jnthn> m: say grammar { regex TOP { <name> {} <praise($<name><name>)> }; regex name {"I am " $<name>=(.+?) \.}; regex praise($name) { "$name is good." } }.parse: "I am Jack. Jack is good."

[15:53] <camelia> rakudo-moar ba3cf4: OUTPUT: ¬´Nil‚ê§¬ª

[15:54] <jnthn> m: say grammar { regex TOP { <name> {} <praise($<name><name>)> }; regex name {"I am " $<name>=(.+?) \.}; regex praise($name) { { say $name } "$name is good." } }.parse: "I am Jack. Jack is good."

[15:54] <camelia> rakudo-moar ba3cf4: OUTPUT: ¬´ÔΩ¢JackÔΩ£‚ê§ÔΩ¢Jack. Jack is goodÔΩ£‚ê§Nil‚ê§¬ª

[15:54] *** esh left
[15:54] <jnthn> Odd, so why's it not match...

[15:55] <jnthn> m: say grammar { regex TOP { <name> {} <praise($<name><name>)> }; regex name {"I am " $<name>=(.+?) \.}; regex praise($name) { { say "$name is good." } "$name is good." } }.parse: "I am Jack. Jack is good."

[15:55] <camelia> rakudo-moar ba3cf4: OUTPUT: ¬´Jack is good.‚ê§Jack. Jack is good is good.‚ê§Nil‚ê§¬ª

[15:55] <jnthn> Oh, because nothing eats the space between the sentences :-)

[15:55] <jnthn> m: say grammar { regex TOP { <name> {} <praise($<name><name>)> }; regex name {"I am " $<name>=(.+?) \.}; regex praise($name) { " $name is good." } }.parse: "I am Jack. Jack is good."

[15:55] <camelia> rakudo-moar ba3cf4: OUTPUT: ¬´ÔΩ¢I am Jack. Jack is good.ÔΩ£‚ê§ name => ÔΩ¢I am Jack.ÔΩ£‚ê§  name => ÔΩ¢JackÔΩ£‚ê§ praise => ÔΩ¢ Jack is good.ÔΩ£‚ê§¬ª

[15:56] <jnthn> There we go

[15:56] <sena_kun> ah, thanks a lot

[15:56] <jnthn> m: say grammar { regex TOP { <name> {} <praise($<name>)> }; regex name {"I am " <( $<name>=(.+?) )> \.}; regex praise($name) { " $name is good." } }.parse: "I am Jack. Jack is good."

[15:56] <camelia> rakudo-moar ba3cf4: OUTPUT: ¬´ÔΩ¢I am Jack. Jack is good.ÔΩ£‚ê§ name => ÔΩ¢JackÔΩ£‚ê§  name => ÔΩ¢JackÔΩ£‚ê§ praise => ÔΩ¢ Jack is good.ÔΩ£‚ê§¬ª

[15:56] <jnthn> That's a bit cleaner

[15:57] <jnthn> Depending on whether it doesn't fail to capture other stuff you need

[15:58] <sena_kun> well, I am bad with regex/rule/token differentiation(docs say about rule/token difference only), so I am trying to get the working result by trial-and-error method now. :)

[15:59] *** esh joined
[15:59] <sena_kun> what does `{}` after `<name>` means in this context?

[15:59] <sena_kun> *mean

[15:59] <timotimo> it will force named captures to have their value appear in them

[16:00] <jnthn> Aye, which in turn is because we only produce or update $/ in a certain set of syntactic cases

[16:00] *** geekosaur joined
[16:00] <sena_kun> ah, okay, let's try to integrate it with my code...

[16:00] *** geekosaur left
[16:01] <jnthn> Have fun :)

[16:01] * jnthn wanders off to cook

[16:01] <ugexe> or create a rule for every possible name and use regex TOP { <name> {} <::($<name>)> } !

[16:02] <sena_kun> this black magic is a bit too strong for me now

[16:03] *** esh left
[16:04] *** domidumont left
[16:05] *** geekosaur joined
[16:08] <ugexe> let the darkness consume you

[16:11] *** eliasr left
[16:12] *** kurahaupo left
[16:12] *** kurahaupo joined
[16:13] *** kurahaupo left
[16:13] *** kurahaupo joined
[16:17] *** kurahaupo left
[16:17] *** kurahaupo joined
[16:17] *** setty1 joined
[16:29] *** rogbro joined
[16:31] <TreyHarris> emacs users: right now to create a .t or extensiosless file, if I'm starting in shell I "echo 'use v6.c;' > t/00-whatever.t; emacsclient -n !$", if I'm starting in emacs I just visit the file (which starts cperl-mode for .t and fundamental-mode for extensionless empty files), stick the "use v6.c;" in, save, and revert-buffer to have it re-autodetect and switch to perl6-mode. Aside from the obvious of making an

[16:31] <TreyHarris> alias and/or emacs macro or elisp function, is there a cleverer way to create new Perl 6 files opening in perl6-mode?

[16:34] <sena_kun> TreyHarris, if you don't work with perl, you can set perl6-mode to be automatically enabled for any .t files, is it not an option, I guess?

[16:35] <TreyHarris> sena_kun: no, I work with Perl 5 too, more than Perl 6 if I'm on a job since I haven't gotten any of my work sites to let me use it yet :-)

[16:37] <sena_kun> TreyHarris, well, then I cannot help you. Of course, you can record a macro(like "open a file with some name + .t, then write use v6 inside") and convert it to elisp then. some polishing work(for a custom filename, for example) should be done though.

[16:38] *** winnie_ joined
[16:39] <TreyHarris> sena_kun: yes. there are a lot of templating and skeleton tools for Emacs, but the one I use (YAS--yet another snippet) is only made for inserting into existing files, not file creation.

[16:39] *** cpage_ left
[16:39] *** poohman joined
[16:40] *** cpage_ joined
[16:40] *** domidumont joined
[16:40] *** poohman2 left
[16:41] <sena_kun> TreyHarris, you can use elmacro package to record something and quickly convert it to elisp for a further work, I guess.

[16:41] <rogbro> Error when trying to use mi6. When using the command "$ mi6 new A::B", I get the following error message "===SORRY!=== Error while compiling /home/pascal/.rakudobrew/moar-nom/install/share/perl6/site/resources/19DFC05B99EC4E218A1A8D9A1B966919724DE593

[16:41] <rogbro> Two terms in a row

[16:41] <rogbro> at /home/pascal/.rakudobrew/moar-nom/install/share/perl6/site/resources/19DFC05B99EC4E218A1A8D9A1B966919724DE593:1

[16:41] <rogbro> ------> @‚èè perl6 %~dpn0 %*

[16:41] <rogbro>     expecting any of:

[16:41] <rogbro>         infix

[16:41] <rogbro>         infix stopper

[16:41] <rogbro>         statement end

[16:41] <rogbro>         statement modifier

[16:41] <rogbro>         statement modifier loop". Any idea where it can come from ?

[16:41] <TreyHarris> rogbro: yes, I commented in mi6 github with a workaround, check issues.

[16:42] <TreyHarris> I can dig the link up if you give me a moment

[16:43] <TreyHarris> rogbro: https://github.com/skaji/mi6/issues/14

[16:43] <TreyHarris> But the issue's been closed, so did you install mi6 last week but only try to use it now?

[16:44] *** rogbro left
[16:45] <TreyHarris> n/m then :-)

[16:46] *** poohman left
[16:46] *** rogbro joined
[16:49] <TreyHarris> rogbro: did you see my answer, or were you split?

[16:50] <rogbro> TreyHarris, oops sorry did not see it

[16:51] <TreyHarris> rogbro: https://github.com/skaji/mi6/issues/14

[16:51] <TreyHarris> But the issue's been closed, so did you install mi6 last week but only try to use it now?

[16:52] <TreyHarris> that workaround should fix it though. (Assuming you're not actually running on Windows, that is...)

[16:52] *** winnie_ left
[16:54] <geekosaur> (but if they were on Windows then it would have worked)

[16:55] *** geekosaur left
[16:55] *** geekosaur joined
[16:55] *** esh joined
[16:56] *** esh left
[17:00] *** esh joined
[17:01] *** rogbro_ joined
[17:01] *** esh left
[17:03] *** rogbro left
[17:05] *** esh joined
[17:05] <TreyHarris> geekosaur: *should* have. I don't know PowerShell (though I'm starting to think learning it is my best hope for trying to understand Windows at all) so wouldn't know a valid thing from its rendering in Forth.

[17:11] <rogbro_> TreyHarris: I tried to uninstall and reinstall, but the issue is the same. zef still installs mi6.bat, which seems not consistent with what is on github. I had to clean manually .zef/store and reinstall. And now it works. Thank you !

[17:12] *** rogbro_ is now known as rogbro

[17:13] <TreyHarris> rogbro: yw. perhaps skaji hasn't rebuilt the package yet.

[17:14] *** esh left
[17:15] <TreyHarris> sena_kun and any other emacsers who may be curious: I asked on #emacs and consensus was the best solution was to write an interactive thet opens a buffer with perl6-mode explicitly named (easy) and then use auto-insert-mode to hook a function that, when perl6-mode is opened on an empty file, inserts the use v6 or shebang+use v6 as necessary

[17:15] *** ChoHag left
[17:16] *** esh joined
[17:16] <raschipi> Powershell isn't at the same level as bash, it does the same as a scriting language combined with a remote configuration management system.

[17:16] <rogbro> quit

[17:16] *** rogbro left
[17:17] <TreyHarris> I was unaware of auto-insert-mode, so this was one of those, "oh, that exists, okay, problem solved" things that so common with VMS

[17:17] <TreyHarris> lol

[17:17] <TreyHarris> I meant Emacs

[17:17] <TreyHarris> that is a REALLY funny Freudian slip if you're old enough to get it

[17:18] <TreyHarris> raschipi: right, which is why I hink it would teach me about Windows in a way that learning bash doesn't really teach you about Unix

[17:18] <TreyHarris> s/hink/think/

[17:19] <raschipi> You'll have to also learn .net

[17:20] * TreyHarris hides

[17:20] <raschipi> Sometimes the way to do something in Powershell is to write a C# applet and then call it from Powershell.

[17:20] <raschipi> cmdlet they call them, I think, not applet

[17:21] <TreyHarris> Well, I've had to learn C# because it's the easiest way a.t.m. to do VR programming. But I've managed to avoid .net thus far.

[17:22] <TreyHarris> (C# actually isn't a bad language. It's better than C++11 for sure--I haven't re-learned C++ since then.)

[17:23] *** esh left
[17:23] <raschipi> I agree it's not a bad language, it just doesn't target any of the environments I'm interested in.

[17:24] <timotimo> are you sure there's no powershell for linux? :)

[17:25] <raschipi> Well, it's tied to .net anyway. And .net isn't integrated into linux yet.

[17:26] *** lauct_ joined
[17:26] <raschipi> Everything that's useful in powershell for windows wasn't rewritten for linux yet.

[17:26] <timotimo> mhm

[17:26] <TreyHarris> https://github.com/Pash-Project/Pash

[17:27] *** esh joined
[17:27] <TreyHarris> reimplementation of PowerShell for Mono, may or may not still be in active development looks like.

[17:27] *** KDr2_c left
[17:28] *** lauct left
[17:28] *** lauct_ is now known as lauct

[17:34] *** rindolf left
[17:36] *** Cabanossi left
[17:37] *** wamba left
[17:38] *** rindolf joined
[17:38] *** Cabanossi joined
[17:42] *** ChoHag joined
[17:47] *** AlexDaniel joined
[17:49] *** aindilis left
[17:50] *** aindilis joined
[17:51] *** poohman joined
[17:52] *** poohman2 joined
[17:55] *** poohman left
[18:07] *** cdg left
[18:11] *** dct joined
[18:12] *** ChoHag_ joined
[18:12] *** ChoHag left
[18:15] *** kurahaupo_ joined
[18:15] *** kurahaupo left
[18:17] *** mcmillhj left
[18:21] *** dct left
[18:27] *** mcmillhj joined
[18:32] <DrForr> Pushed a very very *VERY* rough cut of Six::Zilla (perl6-Six-Zilla) to github.

[18:35] *** Cabanossi left
[18:37] <DrForr> El_Che: Around?

[18:37] *** setty1 left
[18:38] *** Cabanossi joined
[18:38] <El_Che>  yes

[18:39] *** setty1 joined
[18:40] <DrForr> --> over there (privmsg)

[18:41] *** [particle] left
[18:42] <alphah> m: class N {has $.name; has $.location}; class U {has %.h = <x 1 y 2 z 3>; has N @.n};

[18:42] <camelia> rakudo-moar 54f509: ( no output )

[18:43] <alphah> how to initialize @.n with instances of N, from %.h values (name, location)

[18:43] *** [particle] joined
[18:44] <DrForr> That just looks like the Z operator?

[18:45] <timotimo> not more like %.h.kv?

[18:45] <timotimo> with the opposite of .flat? :)

[18:45] <DrForr> Oh, correct, I'm an idiot.

[18:46] *** zakharyas left
[18:47] <alphah> Not fully understood but I'm testing this now to get better idea

[18:48] <timotimo> you can refer to other attributes in the initializers for your attributes, no?

[18:48] <DrForr> m: %x=<x 1 y 2>; say "$k,$v" for %x.kv -> $k,$v;

[18:48] <camelia> rakudo-moar 54f509: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '%x' is not declared‚ê§at <tmp>:1‚ê§------> 3<BOL>7‚èè5%x=<x 1 y 2>; say "$k,$v" for %x.kv -> $‚ê§¬ª

[18:48] <DrForr> m: my %x=<x 1 y 2>; say "$k,$v" for %x.kv -> $k,$v;

[18:48] <camelia> rakudo-moar 54f509: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$k' is not declared‚ê§at <tmp>:1‚ê§------> 3my %x=<x 1 y 2>; say "7‚èè5$k,$v" for %x.kv -> $k,$v;‚ê§¬ª

[18:48] <DrForr> Something cose...

[18:49] <alphah> timotimo: yes

[18:49] <timotimo> right, you also want to pick the kv apart and put it back as name and location

[18:49] <alphah> got it, trying that now

[18:50] <timotimo> i have something

[18:50] <timotimo> class N { has $.name; has $.location }; class U { has %.h = <x 1 y 2 z 3>; has @.n = %!h.kv.map({ N.new(:name($^name.Str), :location($^location.Str)) }) }; U.new().perl.say

[18:50] <timotimo> m: class N { has $.name; has $.location }; class U { has %.h = <x 1 y 2 z 3>; has @.n = %!h.kv.map({ N.new(:name($^name.Str), :location($^location.Str)) }) }; U.new().perl.say

[18:50] <camelia> rakudo-moar 54f509: OUTPUT: ¬´U.new(h => {:x(IntStr.new(1, "1")), :y(IntStr.new(2, "2")), :z(IntStr.new(3, "3"))}, n => [N.new(name => "1", location => "x"), N.new(name => "3", location => "z"), N.new(name => "2", location => "y")])‚ê§¬ª

[18:54] <alphah> timotimo: Thats exactly what I needed, Thanks you!!

[18:54] <timotimo> :)

[18:55] <timotimo> don't forget that if you have a submethod BUILD in your class, it'll override all the = foo in your class

[18:55] <timotimo> but you can have a submethod TWEAK instead which doesn't have that problem

[18:55] <samcv> good noon

[18:55] <samcv> tweak is convenient

[18:55] <alphah> hmm, did not know that, luckily I dont have submethid BUILD (yet) 

[18:55] <alphah> roger that

[18:55] <timotimo> samcv: convenient and so ridiculously easy to implement!

[18:55] <sena_kun> samcv, o/

[18:56] <samcv> from a language creatosr perspective or for users? or both?

[18:56] <timotimo> implementor's perspective

[18:56] <timotimo> the patch that put it in was copy-paste of a few lines of code

[18:56] <samcv> nice

[18:59] *** nadim joined
[19:01] <nadim> evening P6, delayed flight means some time to write some code, ahhhhh   well, a simple question, if I have %h = < a b c d > but I also want an element like 'an e' in it, IE witha space in a string,how to do it? I know I can flatten the list and add an element but something even cleaner.

[19:02] <timotimo> you can use " " inside << >>

[19:02] <timotimo> m: say <<foo bar baz "an e" loop>>.perl.say

[19:02] <camelia> rakudo-moar 54f509: OUTPUT: ¬´("foo", "bar", "baz", "an e", "loop")‚ê§True‚ê§¬ª

[19:03] <geekosaur> right, you basically can't do it with the < > syntax, it's a shorthand and not an especially flexible one

[19:04] <timotimo> m: say <foo bar baz an\ e loop>.perl

[19:04] <camelia> rakudo-moar 54f509: OUTPUT: ¬´("foo", "bar", "baz", "an\\", "e", "loop")‚ê§¬ª

[19:04] <timotimo> also not this way

[19:04] <nadim> timotimo++ I saw it somewhere, thus my question, but there is so mucih goody in P6 one needs to stop doing anything else to learn everything about it (and you guys keep adding stuff!)

[19:05] <timotimo> :)

[19:05] <sena_kun> samcv, hi! I am going to bed now, so a bit of, eeeh, how should I say it. Overall result, maybe. I have thought about ecosystem testing automitisation a bit. Something I had on mind is a script that can consume logs +/- some previous state and parse it into some intermediate representation of all modules(name, is-ok, missed dependency, etc), export it to github issue format(or something like that), also diffs between old state(if it is 

[19:05] <sena_kun> present) and current will be cool too. Now I am parsing the log with a grammar, it takes about 2 minutes on my slow machine to parse it all, though the grammar is still incomplete. Looking forward for a cooperation on this weekend. :)

[19:05] <samcv> heh

[19:06] <samcv> latest install log is here http://hack.p6c.org/~samcv/install_log_live-27-04-2017.txt i'm naming them based on dates now. :) which is quite helpful

[19:06] <samcv> 3.1MB :X

[19:06] <samcv> but. if you prefer. i could make the log a json file

[19:06] <samcv> with one log for each module attempted to be installed

[19:06] <samcv> or some other type of thing

[19:07] *** xinming_ left
[19:07] <samcv> hmm. or maybe a json with fail/pass for each of the modules.i might be able to do that.

[19:08] <samcv> probably more useful initially

[19:09] *** xinming joined
[19:09] <sena_kun> samcv, well, it would be very helpful, because now I need to split the file manually by PASS/FAIL marks. It is just one line of code, though.

[19:09] <samcv> what format of info would you like to include? maybe date and time of the test?

[19:10] <sena_kun> { name: x, log: x, flag: ok|nok } is a minimum I would consider useful, perhaps. I don't have anything particular on my mind, but I have some hands that write (bad) perl 6 code, that's all.

[19:11] <samcv> ok i think i'll have the log saved to a file, and be a reference to a specific file

[19:11] <samcv> so i don't slow down the build by regenning json

[19:12] <zengargoyle> what's a way to do this that is back compatible with v6.c? : my Buf $b = do { my $f = 'empty.dat'.IO.open: :bin; $f.slurp };

[19:13] <zengargoyle> that works in current rakudo but not v6.c, and the thing that worked in v6.c doesn't work in current rakudo.

[19:13] <sena_kun> well, then just .tell me about any results/design decisions so I could begin to work early after sleeping. thanks.

[19:14] <DrForr> samcv: I should probably mention that I just put up a very bare-bones outline of a p6 version of Dist::Zilla up on my GH account as drforr/perl6-Six-Zilla.git  it probably doesn't even compile, so treat it as working notes instead of application if you want to read through it.

[19:14] *** mr-foobar left
[19:14] *** labster joined
[19:17] <DrForr> https://www.oreilly.com/ideas - ORA is looking for "programming recipes" in different languages, if someone has a good idea for one send it to [email@hidden.address] and I'll forward it to ORA so we can get some coverage.

[19:18] * zengargoyle ponders ... my Buf $b = do { use v6.c; my $f = 'empty.dat'.IO.open; $f.read($f.s) };  ... 

[19:19] <samcv> zengargoyle, what are you trying to do. just slurp a file and get a Buf?

[19:20] *** kurahaupo_ left
[19:20] <timotimo> don't forget to also close your file handle

[19:20] *** kurahaupo joined
[19:21] <zengargoyle> samcv: pretty much.  i think the IO changes going on are making the old way no longer work and the new way isn't present in the old.

[19:22] <zengargoyle> timotimo: yeah, think i read that somewhere.

[19:23] <zengargoyle> this if from Text-Fortune and is a blob of bytes that later gets unpacked.

[19:25] <timotimo> what, we can't slurp(:bin)?

[19:25] <zengargoyle> currently the $f.s throws a no such method .s on IO::Handle and $f.slurp throws no such method .slurp on IO.Handle (under v6c)

[19:25] <timotimo> so try slurp($filename, :bin)?

[19:25] <zengargoyle> t/01_empty.t ... Method 'slurp' not found for invocant of class 'IO::Handle'

[19:25] <zengargoyle>   in block <unit> at t/01_empty.t line 7

[19:25] <timotimo> i think that has worked since a long time

[19:26] <zengargoyle> no under v6.c :P

[19:26] *** sena_kun left
[19:26] * zengargoyle thinks that's why id did the $f.read($f.s) way.

[19:27] <timotimo> huh, damn

[19:29] <zengargoyle> it's only in testing code, so i can probably work around it somehow.  or bump revisions and have older version for v6.c and new version for current... but that seems painful.

[19:33] <zengargoyle> it may be that thing i think i glossed over in the IO work related updates about IO::Handle vs IO::Path or some such.  maybe the .s function has just moved out of Handle to Path or something.

[19:34] <timotimo> i'm surprised you can't just .read(0) to get all data in the file

[19:34] <timotimo> but that could also give you default_read_amount

[19:36] *** kurahaupo_ joined
[19:38] *** kurahaupo left
[19:45] <stmuk_> http://pl6anet.org/drop/rakudo-star-2017.04-RC1.tar.gz

[19:49] *** kurahaupo joined
[19:50] <TreyHarris> timotimo: v6.c IO::Handle has slurp-rest, no slurp

[19:50] *** Cabanossi left
[19:51] *** kurahaupo_ left
[19:52] <timotimo> right

[19:53] *** Cabanossi joined
[19:53] <zengargoyle> this works on both so far: my Buf $b = do { my $f = 'empty.dat'.IO; my $s = $f.s; $f.open(:bin).read($s); };

[19:53] <zengargoyle> i.e. no .s from an open handle.

[19:54] * zengargoyle at least tests work under current rakudo and v6.c now :P

[19:57] *** geekosaur left
[19:57] *** kurahaupo_ joined
[19:58] *** geekosaur joined
[20:00] *** kurahaupo left
[20:04] <alphah> :m class N { has $.name; has $.location }; class U { has %.h = <x 1 y 2 z 3>; has @.n = %!h.kv.map({ N.new(:name($^name.Str), :location(class N { has $.name; has $.location }; class U { has %.h = <x 1 y 2 z 3>; has @.n = %!h.kv.map({ N.new(:name($^name.Str), :location($^location.Str)) }) }; U.new().perl.say

[20:04] <alphah> m: class N { has $.name; has $.location }; class U { has %.h = <x 1 y 2 z 3>; has @.n = %!h.kv.map({ N.new(:name($^name.Str), :location(class N { has $.name; has $.location }; class U { has %.h = <x 1 y 2 z 3>; has @.n = %!h.kv.map({ N.new(:name($^name.Str), :location($^location.Str)) }) }; U.new().perl.say

[20:04] <camelia> rakudo-moar d3e8c8: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in parenthesized expression; couldn't find final ')' ‚ê§at <tmp>:1‚ê§------> 3($^location.Str)) }) }; U.new().perl.say7‚èè5<EOL>‚ê§    expecting any of:‚ê§        statement e‚Ä¶¬ª

[20:04] <rindolf> zengargoyle: hi! do gargoyles have the buddha nature?

[20:06] <alphah> m: class N { has $.name; has $.location }; class U { has %.h = <x 1 y 2 z 3>; has @.n = %!h.kv.map({ N.new(:name($^name.Str), :location($^location.Str)) }) };m: class N { has $.name; has $.location }; class U { has %.h = <x 1 y 2 z 3>; has @.n = %!h.kv.map({ N.new(:name($^name.Str), :location($^location.Str)) }) };say U.new.h.kv.map({ :name($^name.Str), :location($^location.Str) });

[20:06] <camelia> rakudo-moar d3e8c8: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Redeclaration of symbol 'N'‚ê§at <tmp>:1‚ê§------> 3ocation($^location.Str)) }) };m: class N7‚èè5 { has $.name; has $.location }; class U‚ê§    expecting any of:‚ê§        generic role‚ê§¬ª

[20:07] <zengargoyle> rindolf: ÁÑ°

[20:08] <rindolf> zengargoyle: what does that glyph mean?

[20:08] <zengargoyle> drats.  ÁÑ° [„ÇÄ] /(n) (1) nothing/naught/nought/nil/zero/(pref) (2) un-/non-/

[20:09] <alphah> m: class N { has $.name; has $.location }; class U { has %.h = <x 1 y 2 z 3>; has @.n = %!h.kv.map({ N.new(:name($^name.Str), :location($^location.Str)) }) };say U.new.h.kv.map({ :name($^name.Str), :location($^location.Str) }); say U.new.h.kv.map({ :name($^name.Str), :location($^location) })

[20:09] <camelia> rakudo-moar d3e8c8: OUTPUT: ¬´((name => 1 location => x) (name => 3 location => z) (name => 2 location => y))‚ê§((name => 1 location => x) (name => 3 location => z) (name => 2 location => y))‚ê§¬ª

[20:10] <alphah> timotimo: do you happen to know why output is reversed, should not it be name => x, location => 1, instead of name =>1 ,.... ?

[20:10] <zengargoyle> sorry, typical zen answer.  pronounced like a cow's 'moo'.

[20:10] <timotimo> m: say "name" before "location"

[20:10] <camelia> rakudo-moar d3e8c8: OUTPUT: ¬´False‚ê§¬ª

[20:10] *** cdg joined
[20:10] <timotimo> m: say "name" lt "location"

[20:10] <camelia> rakudo-moar d3e8c8: OUTPUT: ¬´False‚ê§¬ª

[20:11] <timotimo> it's because $^foo and $^bar get ordered lexicoraphically

[20:11] *** kurahaupo_ left
[20:11] * zengargoyle actually the zengargolyle came more from a college tendency to perch on high places and just glare out over the crowd during parties and such. :)

[20:12] <timotimo> uh oh, DBIish is broken

[20:12] <timotimo> because NativeHelpers::Blob doesn't test

[20:12] <timotimo> oh no

[20:12] *** kurahaupo joined
[20:12] <timotimo> that's just my local modifications being bogus

[20:13] <alphah> timotimo: alright, Thanks.

[20:15] *** mcmillhj left
[20:17] <timotimo> alphah: maybe it makes more sense to have %.h.pairs.map({ N.new(location => .key, name => .value }) or some variant of this

[20:22] *** raschipi left
[20:25] <alphah> timotimo++, sounds good, I was just reading more about hash methods and map syntax. will definitely try this.

[20:26] *** mcmillhj joined
[20:28] *** cdg left
[20:28] *** cdg joined
[20:36] <samcv> woooo \o/ ok i think i got the automated module installing producing useful things

[20:36] *** domidumont left
[20:36] <samcv> it puts the log files into a folder so you can see the logs for each module. and also makes a json file about the status of the modules

[20:37] <samcv> preview: https://gist.github.com/samcv/99b3c978a809ee2f67cbf3b24612b10a

[20:37] <samcv> looks like the date key isn't working . but the other ones are working fine

[20:38] *** nadim left
[20:42] *** kurahaupo_ joined
[20:43] *** gfldex joined
[20:44] *** kurahaupo left
[20:45] *** kurahaupo joined
[20:48] <samcv> m: try { require JSON::Fast <&to-json>; CATCH { Rakudo::Internals::JSON.to-json('foo').say }}

[20:48] <camelia> rakudo-moar d3e8c8: OUTPUT: ¬´"foo"‚ê§Could not find JSON::Fast at line 0 in:‚ê§    /home/camelia/.perl6‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6/site‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6/vendor‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6‚ê§    CompUnit::Reposit‚Ä¶¬ª

[20:48] <samcv> hmm how can i get this working?

[20:49] <samcv> m: try { require JSON::Fast <&to-json>; CATCH { &to-json = &Rakudo::Internals::JSON.to-json; to-json('foo').say }}

[20:49] <camelia> rakudo-moar d3e8c8: OUTPUT: ¬´No such method 'to-json' for invocant of type 'Any'‚ê§  in block  at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:49] <samcv> m: try { require JSON::Fast <&to-json>; CATCH { &to-json = &(Rakudo::Internals::JSON.to-json); to-json('foo').say }}

[20:49] <camelia> rakudo-moar d3e8c8: OUTPUT: ¬´Cannot resolve caller to-json(...); none of these signatures match:‚ê§    (Version:D $v, :$indent = 0, :$first = 0)‚ê§    (Real:D $d, :$indent = 0, :$first = 0)‚ê§    (Bool:D $d, :$indent = 0, :$first = 0)‚ê§    (Str:D $d, :$indent = 0, :$first = 0)‚ê§  ‚Ä¶¬ª

[20:49] <samcv> m: try { require JSON::Fast <&to-json>; CATCH { &to-json = &(Rakudo::Internals::JSON.to-json); }}

[20:49] <camelia> rakudo-moar d3e8c8: OUTPUT: ¬´Cannot resolve caller to-json(...); none of these signatures match:‚ê§    (Version:D $v, :$indent = 0, :$first = 0)‚ê§    (Real:D $d, :$indent = 0, :$first = 0)‚ê§    (Bool:D $d, :$indent = 0, :$first = 0)‚ê§    (Str:D $d, :$indent = 0, :$first = 0)‚ê§  ‚Ä¶¬ª

[20:51] <samcv> m: try { require JSON::Fast <&to-json>; CATCH { &to-json = sub{ Rakudo::Internals::JSON.to-json($^a); }}

[20:51] <camelia> rakudo-moar 1562da: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3Rakudo::Internals::JSON.to-json($^a); }}7‚èè5<EOL>‚ê§¬ª

[20:51] <samcv> m: try { require JSON::Fast <&to-json>; CATCH { &to-json = sub{ Rakudo::Internals::JSON.to-json($^a); }}}

[20:51] <camelia> rakudo-moar 1562da: OUTPUT: ¬´Could not find JSON::Fast at line 0 in:‚ê§    /home/camelia/.perl6‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/site‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6/vendor‚ê§    /home/camelia/rakudo-m-inst-2/share/perl6‚ê§    CompUnit::Repository::Abs‚Ä¶¬ª

[20:51] <AlexDaniel> m: $x = try require JSON::Fasta; say $x

[20:51] <camelia> rakudo-moar 1562da: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$x' is not declared‚ê§at <tmp>:1‚ê§------> 3<BOL>7‚èè5$x = try require JSON::Fasta; say $x‚ê§¬ª

[20:51] <yoleaux> 11:09Z <Zoffix> AlexDaniel: how to bisect without RESTRICTED mode? I need to bisect     $ = run($*EXECUTABLE, "-e", "get", :in).in.close

[20:51] <yoleaux> 11:11Z <Zoffix> AlexDaniel: and this one too:    $ = run($*EXECUTABLE, :in).in.close

[20:51] <yoleaux> 11:19Z <Zoffix> AlexDaniel: Never mind; timotimo++ sorted me out

[20:51] <AlexDaniel> m: my $x = try require JSON::Fasta; say $x

[20:51] <camelia> rakudo-moar 1562da: OUTPUT: ¬´(Any)‚ê§¬ª

[20:52] <samcv> need to make a little sub which acts like to-json, and can use whatever it has installed, because no guarentees when testing modules

[20:52] <samcv> though i'll try and install to-json or others towards the front probably

[20:54] <AlexDaniel> samcv: well, there's some documentation on https://docs.perl6.org/syntax/require

[20:54] <samcv> yes

[20:54] <samcv> i looked

[20:54] *** skids left
[20:55] *** skids joined
[20:57] *** skids left
[21:01] <samcv> ok i think i almost got it

[21:03] *** TEttinger joined
[21:04] <samcv> AlexDaniel, https://gist.github.com/samcv/c251784f7686a717207cd495cea3b855 magicccc

[21:05] <samcv> ran into trouble when i tried to &json = blah rakudo internal thing

[21:05] <samcv> but this works great

[21:05] <AlexDaniel> samcv: did you mean $json //= sub ‚Ä¶ ?

[21:05] <AlexDaniel> ah no

[21:05] <AlexDaniel> nevermind

[21:05] <samcv> yeah that breaks things

[21:05] <samcv> not sure why. but

[21:06] <samcv> gives weird errors. either with/without json::fast installed. luckily this works both ways

[21:06] *** Zoffix joined
[21:07] <Zoffix> zengargoyle: my Buf $b = 'empty.dat'.IO.slurp: :bin

[21:07] *** espadrine joined
[21:07] <samcv> argh i still want there to be .grep(:v)

[21:08] <samcv> i mean i think we have that option. but it doesn't do what `grep -v` on linux does...

[21:08] <samcv> which is include anything NOT matching

[21:08] <samcv> how do we not have an option like that

[21:08] <Zoffix> m: (try require JSON::Fast <&to-json>) === Nil and &to-json = sub { Rakudo::Internals::JSON.to-json($^a); }; dd to-json 42

[21:08] <camelia> rakudo-moar 1562da: OUTPUT: ¬´"42"‚ê§¬ª

[21:08] <Zoffix> star: (try require JSON::Fast <&to-json>) === Nil and &to-json = sub { Rakudo::Internals::JSON.to-json($^a); }; dd to-json 42

[21:08] <camelia> star-m 2016.10: OUTPUT: ¬´"42"‚ê§¬ª

[21:09] <Zoffix> zengargoyle: and though not needed here, IO::Handle.s is available via IO::Handle.path.s on both pre- and past IOwesomeness. Note that not all IO::Handles are path based so assuming you always have a good .path is fragile

[21:11] <Zoffix> zengargoyle: and IO::Handle still has .slurp-rest. In 6.d its use will deprecation-warn tho

[21:13] <Zoffix> [Coke]: there's www.irc.perl.org that has a staff page: http://www.irc.perl.org/staff.html

[21:14] <[Coke]> Zoffix: someone in channel had rights, they were just offline at the time. Thanks.

[21:14] *** alimon left
[21:15] <Zoffix> cool

[21:15] <Zoffix> \o

[21:15] *** Zoffix left
[21:16] *** labster left
[21:18] *** jdv79 joined
[21:20] *** mcmillhj left
[21:28] *** xinming left
[21:29] *** xinming joined
[21:30] *** geekosaur left
[21:31] *** geekosaur joined
[21:33] <samcv> ok now i'm uh. confused

[21:33] <samcv> so somebody has a "Two clause Freebsd license" which. spdx says is basically the bsd-2clause except the wording mentions freebsd only

[21:33] <samcv> but this says it's freebsd 2 clause but freebsd is not copyright holders

[21:33] <samcv> https://raw.githubusercontent.com/dnmfarrell/Module-Minter/master/LICENSE

[21:34] *** mcmillhj joined
[21:36] <samcv> tbh i think one person had a freebsd license but all the wording said it was held by freebsd. so i choose BSD-2-Clause-FreeBSD. but this is BSD-2-Clause but it says it's FreeBsd, which is just the 2 clause but with freebsd. ahh  why people do this

[21:37] *** kurahaupo_ left
[21:37] <samcv> last line here: https://github.com/ahalbert/perl6-itertools/blob/master/LICENSE

[21:38] *** kurahaupo_ joined
[21:39] <samcv> i mean if the license is BSD-2C

[21:39] <samcv> BSD-2-Clause but it says freebsd 2 clause. with full exact wording of bsd-2-claus. it's bsd two clause right...

[21:40] <samcv> the one i linked above is clearly *actually* freebsd 2 clause

[21:40] <samcv> unlike this other one that says it is but isn't

[21:41] *** dct joined
[21:41] *** labster joined
[21:41] *** mcmillhj left
[21:51] *** Cabanossi left
[21:52] <samcv> oh yay madcapjake released new language-perl6fe, and this one installs language-perl6 (new package) then disables the old one

[21:52] <samcv> so now everybody will be using the new package

[21:53] <AlexDaniel> \o/

[21:53] <samcv> they pushed version 2.0 though! how can i have a lower version than the old package!

[21:53] <samcv> i must bump to version 3 immediately!

[21:53] *** Cabanossi joined
[21:53] <AlexDaniel> or version 10

[21:53] <samcv> yes

[21:53] <AlexDaniel> to keep up with the browsers

[21:53] <samcv> also idk why i never bumped to version 2

[21:54] <samcv> enough changes to warrant it

[21:54] <samcv> though luckily https://atom.io/packages/search?q=perl6 when you see it, it says forgotten ediition (deprecated) so hopefully that'll help people out

[21:55] <AlexDaniel> forgotten edition XD

[21:55] <samcv> XD

[21:56] <samcv> i'm curious if i can rename my scope to the same as the builtin perl6 module and if so if it'll override it

[21:57] <samcv> probably. i remember setting it back because some other module broken without the name set to Perl 6 FE

[21:57] <samcv> maybe it was the Script module or something

[21:58] <samcv> unintentionally my change also 'nags' the user until they remove language-perl6fe

[21:58] <samcv> cause the notification that appears when it disables language-perl6fe, shows up whenever you start it (as long as it's disabled)

[21:59] <samcv> but i guess that's okay. simple enough for them to remove it. and the message tells them the old package was disabled so pretty easy for them to know they can remove it then

[21:59] *** rindolf left
[22:00] <samcv> awesome :) live json of installing all modules now http://hack.p6c.org/~samcv/ecosystem-tests/2017-04-28_21.52.json

[22:00] <samcv> woo

[22:00] <samcv> should be much easier to do things with the data now. and logs for each module in a folder http://hack.p6c.org/~samcv/ecosystem-tests/2017-04-28_21.52/

[22:05] *** ChoHag_ left
[22:08] *** mcmillhj joined
[22:11] <sammers> hi perl6, good morning from Japan

[22:11] *** bjz joined
[22:12] *** dct left
[22:13] *** skids joined
[22:13] *** mcmillhj left
[22:13] *** dlowe_ joined
[22:16] *** dlowe_ left
[22:19] *** devmikey joined
[22:20] <TreyHarris> How can I grep rakudo for cases where explicit 'use v6.c' matters (whether by generating a deprecation warning, enabling features or changing behavior)?

[22:21] <samcv> TreyHarris, that was removed since v6.c is the first stable release

[22:22] <samcv> and 6.d isn't out yet

[22:22] *** pmurias left
[22:22] <samcv> so i don't think use v6.c does anything. though somebody step in if i'm wrong... use v6.d.PREVIEW does do something though

[22:24] <jnthn> Yeah, v6.d.PREVIEW gets you changed await and react semantics

[22:24] *** mcmillhj joined
[22:24] <jnthn> And lets you demand a Rakudo that's at least as modern as when 6.d.PREVIEW was introduced :)

[22:24] <TreyHarris> samcv: that's actually what caused me to ask...there are two cases of that in src/Perl6/Grammar.nqp, but they're quite different. if that's just the way it is, and version checking is always going to be a complex expression, that's fine. I just wondered if there might be some telltale marker I was missing

[22:28] <TreyHarris> though I guess bisectable6 is a better way to answer any question like that I might actually have than looking for code markers (and it seems that bisectable6 will engage in a private conversation if you don't want to spam the channel).

[22:29] *** mcmillhj left
[22:29] <TreyHarris> m: use v6.d.PREVIEW; $*W.gist.say

[22:29] <camelia> rakudo-moar 98e137: OUTPUT: ¬´Dynamic variable $*W not found‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:30] <timotimo> m: use v6.d.PREVIEW; BEGIN $*W.gist.say

[22:30] <camelia> rakudo-moar 98e137: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§An exception occurred while evaluating a BEGIN‚ê§at <tmp>:1‚ê§Exception details:‚ê§  No such method 'gist' for invocant of type 'Perl6::World'‚ê§    in code  at <tmp> line 1‚ê§‚ê§¬ª

[22:33] <TreyHarris> timotimo: d'oh! thanks, I was quite confuzzled there for a moment. no gist I can understand, just not existing was worrying me :-)

[22:34] <timotimo> yeah, $*W is a compile-time concept

[22:35] <samcv> github changed the parser for .md

[22:35] <samcv> you have to put links before where you use them now

[22:35] <samcv> instead of at the end

[22:36] *** wamba joined
[22:36] *** ChoHag joined
[22:37] <TreyHarris> samcv: i.e., footnote-style no longer works? urk, that's going to break every single image I've ever placed in a Markdown doc on GitHub

[22:37] <samcv> yeah.

[22:37] <samcv> it broken mine

[22:37] <samcv> the entire readme https://github.com/perl6/atom-language-perl6/blob/master/README.md

[22:37] <samcv> every image and link

[22:38] <TreyHarris> I don't use that style for hlinks, but images I _always_ do.

[22:38] <TreyHarris> I hope it's a bug

[22:38] <samcv> it still renders fine in atom at least. so people looking at the page in atom it shows up fine

[22:38] <samcv> well it's been there for a week

[22:38] *** kaylined joined
[22:39] *** kaylined left
[22:39] <TreyHarris> I wonder what that does to org and pod and other formats, I think GitHub translates them all to markdown before rendering

[22:40] *** mcmillhj joined
[22:41] <timotimo> why, github? :(

[22:42] <samcv> what do people think about this https://github.com/slobo/Perl6-X11-Xlib-Raw/pull/5

[22:42] <samcv> they have some stuff from Xorg header files. which is MIT but their project is Artistic 2.0

[22:44] *** Sgeo joined
[22:44] *** Sgeo_ left
[22:44] <TreyHarris> samcv: isn't that essentially the oracle-google java dispute?

[22:44] *** mcmillhj left
[22:44] <AlexDaniel> TreyHarris: you can always join #whateverable or #zofbot to abuse bots

[22:44] <samcv> i don't think so

[22:45] <samcv> google didn't take headers just the api

[22:45] *** lauct_ joined
[22:46] *** lauct left
[22:46] *** lauct_ is now known as lauct

[22:46] <TreyHarris> how do you take api in C w/o taking headers?

[22:47] <samcv> the function names are the same

[22:47] <samcv> acts the same

[22:47] <samcv> oh i see what you mean. i mean copying verbatim is deffirent than a reimplementation

[22:48] <TreyHarris> I'm saying, a comment-stripping code-tidier of a cleanroom implementation would be indistinguishable from a comment-stripping codie-tidier output of the original

[22:48] <samcv> then it's not copyrightable

[22:48] <samcv> as long as the api is open

[22:48] <samcv> err sorry that's what i mean

[22:49] <TreyHarris> then they can license it Artistic-2.0. And the Xorg API is certainly open.

[22:49] <TreyHarris> IANAL, etc.

[22:50] <TreyHarris> if oracle ultimately wins this might be questionable, but if they ultimately win huge swaths of the FOSS world will be jenga'd

[22:50] <timotimo> the good thing about jenga is you put on top what you pull out

[22:51] <alphah> m: my $m = "perl6" ~~ /\d/ && say $/.Str

[22:51] <camelia> rakudo-moar 5e7401: OUTPUT: ¬´6‚ê§¬ª

[22:51] <alphah> sorry to bother yu  again guys, do I have to explicitly get the matched pattern via && say $/.Str,, (thats what I found in docs), or there is shorter way?

[22:52] <samcv> ok good SPDX has `AND`

[22:52] <TreyHarris> "shorter"? or more convenient/readable, like with named captures?

[22:52] <samcv> i guessed it did but read the spec just to be sure

[22:52] <alphah> <TreyHarris: more convinient and readable

[22:52] <TreyHarris> samcv: AND means dual-licensing of the whole, though, not "parts are licensed X and parts are licensed Y", no?

[22:52] <samcv> no. that's OR

[22:53] <samcv> Artistic-1.0-Perl OR GPL-1.0+ << you choose which license you use

[22:53] <samcv> and means it contains things under both that you don't get to choose which to follow. stuff non-dual licensed

[22:54] *** cdg left
[22:55] <TreyHarris> m: my $m = "perl6" ~~ / $<version>=\d / && $<version>.say

[22:55] <camelia> rakudo-moar 5e7401: OUTPUT: ¬´ÔΩ¢6ÔΩ£‚ê§¬ª

[22:55] <TreyHarris> alphah: ^^ like that?

[22:56] *** buggable_ joined
[22:56] *** ChanServ sets mode: +v buggable_

[22:56] *** buggable left
[22:56] *** buggable_ left
[22:56] *** buggable joined
[22:56] *** ChanServ sets mode: +v buggable

[22:57] <alphah> I'm actually asking if I can get the matched string without next step after &&. not sure of ots possible tho\

[22:59] <jnthn> m: my $m = ~("perl6" ~~ / \d /); dd $m

[22:59] <camelia> rakudo-moar 5e7401: OUTPUT: ¬´Str $m = "6"‚ê§¬ª

[22:59] <alphah> m: my $m = "perl6" ~~ / $<version>=\d /.Str   # something like that for example

[22:59] <camelia> rakudo-moar 5e7401: OUTPUT: ¬´Regex object coerced to string (please use .gist or .perl to do that)‚ê§  in block <unit> at <tmp> line 1‚ê§¬ª

[22:59] <jnthn> m: my $m = ~"perl6".match(/ \d /); dd $m # alternative

[22:59] <camelia> rakudo-moar 5e7401: OUTPUT: ¬´Str $m = "6"‚ê§¬ª

[22:59] <AlexDaniel> m: my $m = ("perl6" ~~ / $<version>=\d /)<version>; say $m

[22:59] <camelia> rakudo-moar 5e7401: OUTPUT: ¬´ÔΩ¢6ÔΩ£‚ê§¬ª

[23:00] <jnthn> m: my $m = [~] "perl6" ~~ / \d /; dd $m # if you hate parens ;)

[23:00] <camelia> rakudo-moar 5e7401: OUTPUT: ¬´Str $m = "6"‚ê§¬ª

[23:01] <alphah> you are awesome guys :), many ways to do one things!

[23:02] <samcv> TreyHarris, but AND or OR, if you whitelist Artistic-1.0 but blacklist GPL-1.0, you are allowed to use something under Artistic-1.0 and gpl dual license, but if it's AND then you have to folow both

[23:02] <AlexDaniel> m: my $m; "perl6" ~~ / (\d) {$m = ~$0}/; say $m

[23:02] <camelia> rakudo-moar 5e7401: OUTPUT: ¬´6‚ê§¬ª

[23:02] <AlexDaniel> (‚Üë looks ugly, but kinda works)

[23:05] <alphah> all works, but this one is shortest: my $m = ~("perl6" ~~ / \d /); opting for it :)

[23:18] *** AlexDaniel left
[23:20] *** pecastro left
[23:22] *** pecastro joined
[23:22] *** geekosaur left
[23:24] *** geekosaur joined
[23:35] *** devmikey left
[23:41] <samcv> whew. just caught a bug.

[23:42] <samcv> if they have an empty license file, it detected it as like. some license that was the shortest :P

[23:42] <samcv> though there's a reason these were the 'rejects' where the computer couldn't decide. i forget what % match it said

[23:45] <samcv> really happy how this is working out: http://hack.p6c.org/~samcv/ecosystem-tests/2017-04-28_21.52.json

[23:45] <samcv> i should set it on cron on the hack.p6c.org server so it generates it every day

[23:45] <samcv> still running. i should be able to figure out how long it takes comparing the last date in the timestamp of the json whenever it completes

[23:52] <samcv> 45.853659% modules with licenses now :) almost 50.001%

[23:52] <samcv> be back in a bit

[23:54] <samcv> .tell sena_kun new format for the module tests. json overview, and in a folder of the same name seperate log files for each module's installation run http://hack.p6c.org/~samcv/ecosystem-tests/

[23:54] <yoleaux> samcv: I'll pass your message to sena_kun.

