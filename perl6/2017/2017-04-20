[00:00] <timotimo> masak: when i pass repeatedly, the AI doesn't win, it just keeps making two immediately neighbouring towers higher and higher :D

[00:02] *** kurahaupo left
[00:04] *** labster left
[00:07] *** mcmillhj joined
[00:08] <timotimo> Use of uninitialized value $github-user of type Any in string context.  /  in code  at /home/timo/perl6/install/share/perl6/site/sources/08A003E9585BF4F4FEBD6559AE70DDC410B29DDC (META6::bin)

[00:08] <timotimo> i'm so good at this %)

[00:09] *** gdonald left
[00:11] *** mcmillhj left
[00:19] *** grondilu left
[00:25] *** mcmillhj joined
[00:28] <timotimo> Sub object coerced to string (please use .gist or .perl to do that)

[00:28] <timotimo>   in any dump_children at /home/timo/perl6/install/share/nqp/lib/QASTNode.moarvm line 1

[00:28] <timotimo> :\

[00:30] *** mcmillhj left
[00:32] <timotimo> No such source rod 'left to right left to middle right to middle left to right middle to left middle to right left to right left to middle right to middle right to left middle to left right to middle left to right left to middle right to middle'

[00:32] <timotimo> :D

[00:35] *** Actualeyes left
[00:36] <geekosaur> hanoying?

[00:36] *** skids joined
[00:37] <timotimo> yup

[00:37] <timotimo> List $source = $(((("left", "to", "right"), ("left", "to", "middle"), ("right", "to", "middle")), ("left", "to", "right"), (("middle", "to", "left"), ("middle", "to", "right"), ("left", "to", "right"))), ("left", "to", "middle"), ((("right", "to", "middle"), ("right", "to", "left"), ("middle", "to", "left")), ("right", "to", "middle"), (("left", "to", "right"), ("left", "to", "middle"), ("right", "to",

[00:37] <timotimo> "middle"))))

[00:37] <timotimo> List $target = $(((("middle", "to", "left"), ("middle", "to", "right"), ("left", "to", "right")), ("middle", "to", "left"), (("right", "to", "middle"), ("right", "to", "left"), ("middle", "to", "left"))), ("middle", "to", "right"), ((("left", "to", "right"), ("left", "to", "middle"), ("right", "to", "middle")), ("left", "to", "right"), (("middle", "to", "left"), ("middle", "to", "right"), ("left", "to",

[00:37] <timotimo> "right"))))

[00:37] <timotimo> that is not a rod that is on the stack!

[00:40] <timotimo> i should go to bed

[00:40] <timotimo> i can continue this tomorrow

[00:46] *** perlawhirl left
[00:46] *** perlawhirl joined
[00:56] *** mcmillhj joined
[00:56] *** mr-fooba_ left
[00:57] <samcv> what am i seeing here

[01:01] <Geth> ¦ specs: 63686a0042 | (Samantha McVey)++ | S22-package-format.pod

[01:01] <Geth> ¦ specs: Update META info for the license section

[01:01] <Geth> ¦ specs: 

[01:01] <Geth> ¦ specs: Use the SPDX license identifier under license, which is the most widely

[01:01] <Geth> ¦ specs: used license tags meant for interoperability.

[01:01] <Geth> ¦ specs: 

[01:01] <Geth> ¦ specs: If the license does not have an identifier, then it is recommended to

[01:01] <Geth> ¦ specs: add a URL to the license under the support key.

[01:01] <Geth> ¦ specs: review: https://github.com/perl6/specs/commit/63686a0042

[01:01] <Geth> ¦ specs: 07a57f3cae | (Samantha McVey)++ (committed using GitHub Web editor) | S22-package-format.pod

[01:01] <Geth> ¦ specs: Merge pull request #120 from samcv/package

[01:01] <Geth> ¦ specs: 

[01:01] <Geth> ¦ specs: Update META info for the license section

[01:01] <Geth> ¦ specs: review: https://github.com/perl6/specs/commit/07a57f3cae

[01:02] *** Cabanossi left
[01:04] *** Cabanossi joined
[01:06] *** gdonald joined
[01:32] *** awwaiid joined
[01:37] <Geth> ¦ specs: dce35d18d5 | (Samantha McVey)++ | S22-package-format.pod

[01:37] <Geth> ¦ specs: META6.json describe how to denote no license or no assertion

[01:37] <Geth> ¦ specs: review: https://github.com/perl6/specs/commit/dce35d18d5

[01:38] <samcv> very good. covered all the likely cases now :)

[01:46] *** Cabanossi left
[01:49] *** Cabanossi joined
[02:08] *** baest left
[02:08] *** noganex_ joined
[02:09] <samcv> hehe

[02:10] <samcv> bag(emulates(10), test-depends(301), version(813), name(813), api(4), description(813), excludes(9), resources(145), build-depends(195), supersedes(9), production(10), support(211), source-uri, licence(4), author(285), source-url(779), superseded-by(9), resource(13), tags(149), license(108), auth(155), perl(739), provides(803), meta6(54), history, repo-type(31), authors(411), owner(9), authority(8), depends(771), source-type(69))

[02:10] <samcv> so we have 4 modules with misspelled license (they spelled it as licence)

[02:10] <samcv> and 108 of our modules have licenses plus uh. whatever those 4 that misspelled them..

[02:11] *** noganex left
[02:16] <TimToady> well, that's the british spelling, they spell 'defence' differently as well

[02:16] <TimToady> and a couple other three things...

[02:22] <Geth> ¦ ecosystem: e6a2236f61 | (Zoffix Znet)++ (committed using GitHub Web editor) | META.list

[02:22] <Geth> ¦ ecosystem: s/META.info/META6.json/

[02:22] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/e6a2236f61

[02:24] *** baest joined
[02:25] <samcv> ok my json is fixed

[02:47] *** baest left
[02:51] *** baest joined
[03:01] <samcv> yay i can't use the meta6 bin because 

[03:01] <samcv> ===SORRY!===

[03:01] <samcv> Failed to parse „~/.gitconfig“.

[03:01] *** Cabanossi left
[03:01] <samcv> :(

[03:01] <samcv> won't even start.... ugh

[03:04] *** Cabanossi joined
[03:04] *** rindolf joined
[03:14] *** rindolf left
[03:15] *** mcmillhj left
[03:27] *** AlexDaniel left
[03:32] *** rindolf joined
[03:46] *** Cabanossi left
[03:47] *** Cabanossi joined
[03:49] *** baest left
[03:54] *** khw left
[03:58] *** baest joined
[04:05] <u-ou> How do you do a runtime-mixin of an already created object? Is it just $s = $s but role?

[04:06] <TimToady> that will clone $s

[04:06] *** g0d355__ joined
[04:06] <TimToady> use '$s does role' for modification in place

[04:06] <u-ou> ahhh

[04:06] <u-ou> thanks

[04:15] *** rindolf left
[04:15] *** TimToady left
[04:16] *** wamba joined
[04:17] *** TimToady joined
[04:21] *** mcmillhj joined
[04:25] *** mcmillhj left
[04:32] *** skids left
[04:45] *** Actualeyes joined
[04:57] *** kurahaupo joined
[05:01] *** Cabanossi left
[05:02] *** Cabanossi joined
[05:03] *** mcmillhj joined
[05:11] *** mcmillhj left
[05:18] *** BenGoldberg left
[05:25] *** gdonald left
[05:26] *** gdonald joined
[05:30] *** mcmillhj joined
[05:31] *** bolangi left
[05:32] *** jroth joined
[05:33] *** jroth is now known as bolangi

[05:35] *** mcmillhj left
[05:37] *** CIAvash joined
[05:38] *** xtreak joined
[05:40] *** lowbro joined
[05:40] *** lowbro left
[05:40] *** lowbro joined
[05:45] *** wamba left
[05:46] *** Cabanossi left
[05:46] *** nadim joined
[05:47] *** Cabanossi joined
[05:51] *** RabidGravy joined
[06:02] *** mcmillhj joined
[06:06] *** mcmillhj left
[06:09] <Woodi> hallo #perl6 :)

[06:11] <Woodi> some days ago I read that Prolog requires first class backtracking. we have it in v6 ? also I learned logic programming is superset of functional programming... but not saying I understand all of this :)

[06:13] *** gdonald left
[06:13] *** gdonald joined
[06:15] <TimToady> backtracking is pretty easy; it's unification that's hard

[06:16] *** Cabanossi left
[06:18] *** Cabanossi joined
[06:21] <TimToady> the hardest part of logical programming, though, is managing your lexicon such that words always mean the same thing everywhere, which they usually don't in real life :)

[06:22] *** MasterDuke_ left
[06:23] <TimToady> funny how real life actually means "complex"...

[06:23] <TimToady> but the opposite of "imaginary"...

[06:24] *** wamba joined
[06:32] *** darutoko joined
[06:43] *** domidumont joined
[06:47] *** mr-foobar joined
[06:47] *** domidumont left
[06:48] *** domidumont joined
[06:48] <El_Che> TimToady: hehe

[06:48] <yoleaux> 18 Apr 2017 19:52Z <Zoffix> El_Che: you're good for packages. 2017.04.2 is out

[06:48] <El_Che> will start

[06:48] *** nadim left
[06:50] *** domidumont left
[06:51] *** domidumont joined
[06:52] <mst> TimToady: without continuations it's non-trivial to push backtracking down into the runtime though

[06:52] <mst> of course the WAM doesn't really do it that way anyway

[06:56] <mst> Woodi: first class backtracking at the VM level is pretty rare, and not at all a requirement to implement prolog

[06:56] <mst> Woodi: hence why there's more than one implementation of prolog in perl5

[06:56] <mst> Woodi: also, please call perl6 perl6, not 'v6'

[06:56] *** sunnavy left
[06:57] *** sunnavy joined
[06:57] *** llfourn left
[06:58] <u-ou> yay my perl6 thing works

[06:59] <samcv> whew. just finished PR to META6 module and the META6::Test modules

[07:00] <samcv> once accepted META6::Test will be able to check license names against the full list of standardized names, and if it's not correct, tell the user to fix it, or if license isn't on the list, if you set a 

[07:00] <samcv> URL for the license text then it will also be able to pass

[07:01] <samcv> and if you put NONE or NOASSERTION it will give a little warning to remind you that's nonideal

[07:02] <samcv> https://github.com/jonathanstowe/Test-META/pull/21 can we call it the Licensining? or uh. idk something catchier

[07:04] *** llfourn joined
[07:05] *** labster joined
[07:06] <gfldex> samcv: it's JSON, no license should be null, not "NONE"

[07:06] <samcv> what?

[07:06] <samcv> null does not convey any actual afirmative information thuogh

[07:07] <samcv> whether there is none or if it's just an empty field

[07:07] <samcv> though we could depart from SPDX on that i guess? hm

[07:07] <samcv> or take NONE or null as both being no license?

[07:08] <gfldex> null indicates the absence of a value. "NONE" may very well be an acronym.

[07:09] <samcv> abcense of a value is different from no license in the affirmative though

[07:09] <samcv> just how NOASSERTION means that there could be a license but the creator of the meta file does not know and makes no assertion

[07:09] <samcv> because no license and no assertion are distinct things

[07:10] <samcv> if anything License being null would be closer to NOASSERTION

[07:10] *** nadim joined
[07:12] *** Actualeyes left
[07:13] <gfldex> samcv: I disagree, NOASSERTION would be indicated by not having the field in the JSON file

[07:13] <gfldex> not sure if META6.pm6 is handleing that properly tho

[07:14] <samcv> i we could define NOASSERTION is no license key and that license: null means NONE and they are equivilant. that would be okay with me i guess.

[07:14] <samcv> as long as there is a way to distinguish between those two. that is the important part. and that they are defined

[07:15] <samcv> i still don't like license: null.... but regardless. it still is fine to have it mean SOMETHING which is better than meaning nothing i think

[07:15] <gfldex> aye

[07:15] <samcv> thanks for bringing that up gfldex 

[07:16] <gfldex> besides, if there is no license it's rather pointless to put it into the ecosystem to start with

[07:16] <samcv> well. most modules have no license....

[07:16] <gfldex> as nobody knows if the module can be used at all

[07:16] *** parv joined
[07:16] <samcv> so

[07:16] <samcv> hopefully we can make issues with all of those modules to add a license. but it's a big undertaking

[07:17] <samcv> when only about 10% of them have one in the META

[07:17] <gfldex> they don't got a license because it was never enforced

[07:17] <samcv> well yes

[07:17] <gfldex> I may be able to automate that problem away

[07:17] <samcv> with travis?

[07:17] <gfldex> githubs api is rather nice

[07:17] <samcv> oh? to notify?

[07:17] <samcv> that would be nice

[07:18] <gfldex> but first, $dayjob

[07:18] <samcv> though it's useful now that i have META6::Test being able to check validity of license type things. may eventually want to just cause an error when no license is there. but it doesn't have to happen overnigtht. we're working toward licenses and that's the important part

[07:18] <samcv> nice talking to you gfldex 

[07:18] *** jian joined
[07:19] <gfldex> yw

[07:19] <jian> HELP

[07:19] <gfldex> WHAT?

[07:19] <gfldex> no wait, I can answer that myself

[07:20] <gfldex> m: "HELP".WHAT.say

[07:20] <camelia> rakudo-moar 894ba8: OUTPUT: «(Str)␤»

[07:20] <samcv> hi jian 

[07:20] <jian> hi.

[07:20] <jian> hmm..

[07:20] <samcv> please let me try and help

[07:20] <samcv> ZofBot, HELP

[07:21] <jian> I don't actually know what it is

[07:21] <samcv> oh :(

[07:22] <gfldex> can you provide some details of your undescribable problem please?

[07:23] <jian> that is human or what ?

[07:24] <gfldex> humans are an undescribable problem indeed :)

[07:24] <samcv> humans are homo sapiens and are sentient beings who populate this channel in addition to the IRC bots here

[07:24] <samcv> see https://en.wikipedia.org/wiki/Human

[07:24] *** jeek left
[07:24] <moritz> humans are meat bags. There, I described the problem for you.

[07:24] <samcv> https://en.wikipedia.org/wiki/IRC_bot

[07:25] <samcv> AFAIK those are the only two things in this channel

[07:25] <gfldex> the IRC bots are smarter tho

[07:25] <u-ou> I'm not sure what the difference is

[07:25] <u-ou> but I think I'm a bot

[07:25] <u-ou> just sayin'

[07:26] <mst> moritz: this is where I turn up with an emu, right?

[07:26] *** Actualeyes joined
[07:26] *** jeek joined
[07:28] <moritz> mst: an emu_lator? :-)

[07:28] <mst> I was going for a flightless biped joke, but you do you

[07:29] <jian> maybe I should go =-=

[07:29] <samcv> no!

[07:29] <samcv> don't go

[07:30] *** zakharyas joined
[07:30] <jian> but I don't know how

[07:31] <jian> close the tab is ok?

[07:31] <samcv> no

[07:31] <samcv> i want to help!

[07:32] <jian> help what

[07:33] <samcv> <jian> HELP

[07:33] <samcv> help you

[07:33] <samcv> you need help

[07:33] <gfldex> samcv: don't be so selflessly selfish!

[07:33] <samcv> i will help

[07:33] <samcv> XD

[07:33] <jian> ok

[07:33] <jian> just tell me

[07:34] <jian> waht is it

[07:34] <samcv> ask your question again please

[07:34] <jian> or what's this

[07:34] <moritz> an IRC channel!

[07:35] <jian> IRC?

[07:35] <moritz> that was easy. Next customer!

[07:35] <samcv> this in an IRC channel. this is the #perl6 room where we talk about the perl6 programming languages

[07:35] <moritz> jian: https://en.wikipedia.org/wiki/Internet_Relay_Chat

[07:36] <gfldex> I wonder if I should use subparse in Git::Config.

[07:37] <jian> maybe I know something :-)

[07:37] <gfldex> samcv: PR welcome (read: I'm not good with grammars.) https://github.com/gfldex/perl6-git-config/blob/master/lib/Git/Config.pm6

[07:38] *** dakkar joined
[07:39] *** abraxxa joined
[07:40] <samcv> what do i do with this

[07:40] <samcv> oh

[07:41] <samcv> yeah it doesn't even work if i delete my .gitconfig

[07:41] <samcv> so idk how to make this thing work

[07:42] <samcv> not sure why META bin needs it tho :\

[07:42] <samcv> why does it care about my git config

[07:42] <gfldex> samcv: try meta6 --create-cfg-dir

[07:43] <gfldex> samcv: it needs your github username and your e-mail to generate README.md

[07:43] <gfldex> and a few other things

[07:44] <parv> gfldex: why is there a specific need for anything GitHub when the module name is more generic?

[07:45] <gfldex> samcv: at some point it will ask nicely for your github PW and do anything for you. :)

[07:45] <gfldex> parv: you can skip the github part but if you don't any new module will be pushed automatically.

[07:46] <parv> "github" part should be easily switchable 

[07:46] <gfldex> i wanted to add automatic travis support too but failed due to travis wonky api

[07:46] <gfldex> and so we read: "meta6 --new-module --name=<Module::Name::Here> --force --skip-git --skip-github"

[07:47] <gfldex> meta6.cfg needs to learn a new trick it seams

[07:47] * gfldex takes notes

[07:48] *** wamba left
[07:48] *** ufobat joined
[07:49] *** jian left
[07:50] <samcv> gfldex, anything? :-D

[07:51] <gfldex> the goal is to telepathically sense the general intend of the programmer and do anything automatically indeed

[07:51] <gfldex> the same is true for Perl 6 I believe

[07:55] *** wamba joined
[07:56] *** xtreak left
[07:56] * gfldex self.dayjob()

[07:56] *** xtreak joined
[07:59] *** xtreak left
[08:00] *** xtreak joined
[08:01] *** g4 joined
[08:12] *** eyck left
[08:13] *** eyck joined
[08:14] *** robertle left
[08:14] *** xtreak left
[08:15] *** xtreak joined
[08:15] *** xtreak left
[08:15] *** xtreak joined
[08:17] <samcv> u: end

[08:17] <unicodable6> samcv, U+02FA MODIFIER LETTER END HIGH TONE [Sk] (˺)

[08:17] <unicodable6> samcv, U+02FC MODIFIER LETTER END LOW TONE [Sk] (˼)

[08:17] <unicodable6> samcv, 363 characters in total: https://gist.github.com/a2197e703ec67db1f7002f1251c2aabe

[08:18] *** eyck left
[08:19] *** eyck joined
[08:23] *** eyck left
[08:27] *** Actualeyes left
[08:29] *** rindolf joined
[08:31] *** jonas1 joined
[08:36] <u-ou> roles!

[08:36] *** eyck joined
[08:43] *** xtreak left
[08:43] *** xtreak joined
[08:47] *** cpage_ left
[08:48] *** xtreak left
[08:50] <u-ou> hi

[08:52] *** Actualeyes joined
[08:58] *** astj joined
[08:58] *** astj_ left
[09:02] *** Cabanossi left
[09:03] *** Cabanossi joined
[09:12] *** ChoHag joined
[09:25] *** mcmillhj joined
[09:29] *** mcmillhj left
[09:31] *** labster left
[09:37] *** kurahaupo left
[09:41] *** mcmillhj joined
[09:42] *** bjz joined
[09:45] *** eiro joined
[09:45] *** mcmillhj left
[09:47] *** Cabanossi left
[09:48] *** Cabanossi joined
[09:48] *** cpage_ joined
[09:50] *** xtreak joined
[09:57] *** mcmillhj joined
[10:05] *** mcmillhj left
[10:12] *** astj left
[10:13] *** astj joined
[10:13] *** astj left
[10:13] *** astj joined
[10:14] *** notbenh left
[10:16] *** Cabanossi left
[10:17] *** notbenh joined
[10:17] *** mcmillhj joined
[10:17] *** TEttinger left
[10:18] *** Cabanossi joined
[10:19] *** parv left
[10:21] *** mcmillhj left
[10:27] *** xtreak left
[10:30] *** xtreak joined
[10:30] *** zakharyas left
[10:32] *** mcmillhj joined
[10:33] *** bjz_ joined
[10:34] *** bjz left
[10:37] *** mcmillhj left
[10:41] *** astj left
[10:41] *** astj joined
[10:46] *** gdonald left
[10:46] *** gdonald joined
[10:48] *** astj left
[10:50] *** astj joined
[10:52] <Geth> ¦ ecosystem: 72de400aaa | (Zoffix Znet)++ (committed using GitHub Web editor) | META.list

[10:52] <Geth> ¦ ecosystem: .info -> .json

[10:52] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/72de400aaa

[10:53] *** CIAvash left
[10:53] *** mcmillhj joined
[10:56] *** xtreak left
[10:56] *** xtreak joined
[10:58] *** mcmillhj left
[11:01] *** Cabanossi left
[11:02] *** xtreak left
[11:03] *** Cabanossi joined
[11:08] *** kurahaupo joined
[11:22] *** tadzik left
[11:27] *** noganex joined
[11:29] *** mcmillhj joined
[11:30] *** noganex_ left
[11:30] *** tadzik joined
[11:34] *** mcmillhj left
[11:41] *** wamba left
[11:58] *** TimToady left
[12:00] *** TimToady joined
[12:01] <timotimo> masak: fixing Adventure::Engine and Crypt is a fascinating experience in "how have lists changed in the last years"

[12:01] <timotimo> also, if you %foo.push(%foo.invert), be ready to see some duplicates, because invert is lazily being iterated and is updating as the hash gets stuff pushed into it, lol.

[12:08] <Geth> ¦ ecosystem: scmorrison++ created pull request #322: AWS::Pricing META.info > META6.json

[12:08] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/322

[12:09] *** xtreak joined
[12:10] *** xtreak left
[12:11] *** kurahaupo left
[12:12] *** zakharyas joined
[12:14] <Geth> ¦ ecosystem: c143a14304 | (Sam Morrison)++ (committed by Zoffix Znet) | META.list

[12:14] <Geth> ¦ ecosystem: AWS::Pricing META.info > META6.json (#322)

[12:14] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/c143a14304

[12:15] *** domidumont left
[12:15] *** Cabanossi left
[12:17] *** domidumont joined
[12:17] *** Cabanossi joined
[12:23] *** japh__ joined
[12:32] *** mcmillhj joined
[12:33] *** MasterDuke_ joined
[12:35] <japh__> I'm getting "Cannot find method 'setlang' on object of type Perl6::HookGrammar" when I run perl6-debug-m (Rakudo 2017.04.2, MoarVM version 2017.04). I saw some references to this #perl6-dev on 2/28 and #perl6 on 3/21, but nothing that's a clear solution

[12:36] *** mcmillhj left
[12:39] <japh__> I was getting the same set of errors under Rakudo 2017.03, so upgraded MoarVM, NQP and Rakudo to the latest tagged releases, but still no luck

[12:40] <jnthn> I think timotimo++ was taking a look at it quite recently

[12:44] <nadim> hi all, do we have something like Devel::Size?

[12:45] *** salva left
[12:50] *** japh____ joined
[12:54] *** japh__ left
[13:00] *** mcmillhj joined
[13:04] <timotimo> japh__ there is a trivial fix for that error but then you get a debugger that fails at everything anyway

[13:04] *** wamba joined
[13:04] <timotimo> nadim, would that give you thelayout of your classes in memor or something?

[13:05] <timotimo> i wanted something like pahole forp6opaque in the past

[13:05] <timotimo> oh gotta go

[13:07] <jnthn> I think the closest we have is the heap analyzer

[13:23] *** cdg joined
[13:29] *** salva joined
[13:37] *** skids joined
[13:40] *** beginner joined
[13:52] *** gdonald left
[13:53] *** gdonald joined
[13:55] *** lowbro left
[13:57] *** mcmillhj left
[13:59] *** mcmillhj joined
[13:59] <beginner> which is the best IDE for perl6

[14:01] *** lizmat left
[14:01] *** eroux joined
[14:03] <El_Che> beginner: atom, vim, emac (non of which are IDE's, I know)

[14:06] *** AlexDaniel joined
[14:13] <moritz> isn't it ironic that, being immaterial, atom doesn't actually contain atoms?

[14:13] <moritz> while most things that contain atoms don't have atom in the name

[14:15] *** Cabanossi left
[14:18] *** Cabanossi joined
[14:29] *** committable6 left
[14:30] *** committable6 joined
[14:30] *** ChanServ sets mode: +v committable6

[14:34] *** khw joined
[14:46] <timotimo> moritz: atomoritz?

[14:51] <SmokeMachine> m: my @a = :1a, :2b, :3a, :4a; say [⊎] @a

[14:51] <camelia> rakudo-moar 277b6e: OUTPUT: «bag(b(2), a(8))␤»

[14:52] <SmokeMachine> m: my @a = :1a, :2b, :3a, :4a; say Bag.new ⊎ @a

[14:52] <camelia> rakudo-moar 277b6e: OUTPUT: «bag(b(2), a(8))␤»

[14:55] *** bjz_ left
[14:56] *** eroux left
[14:59] <nadim> timotimo: Data::Dump::Tree can give the layout, it can show the "perl address" but it  can't show how much memory each element uses. In the P5 version I used Devel::Size to get that information. I wonder if there is some equivalent functionality in P6.

[15:00] <timotimo> it can not give the kind of layout i'm talking about

[15:00] <El_Che> aaaagh. Now that I build 9 different rakudo packages I hit travis' 50 minute limit

[15:04] *** cdg left
[15:06] *** iyra joined
[15:07] <iyra> does anyone have knowledge of the SCGI module? I'm trying to use the example in the readme here (first under 'Usage') https://github.com/supernovus/SCGI

[15:08] <iyra> however I'm getting "Nothing given for new socket to connect or bind to" when I try to use it, seems to be caused by connect method, here: https://github.com/supernovus/SCGI/blob/master/lib/SCGI.pm6#L22

[15:08] <skids> m: say Bag.new ⊎ :e_with_oatmea

[15:08] <camelia> rakudo-moar 277b6e: OUTPUT: «bag(e_with_oatmea)␤»

[15:10] *** nadim left
[15:13] <timotimo> iyra: how does your code look? did you SCGI.new with a :port?

[15:14] <iyra> yes, I used   my $scgi = SCGI.new( :port(8118) );

[15:14] *** kurahaupo joined
[15:14] <iyra> however I tried with  my $scgi = SCGI.new( :host<localhost>, :port(8118) ); and I get the same error

[15:17] *** Cabanossi left
[15:17] *** Cabanossi joined
[15:17] <timotimo> interesting

[15:18] <timotimo> ugh, scgi doesn't have any tests

[15:20] <iyra> using IO::Socket::INET.new in general seems to work, though (using the first example in the docs for it) https://docs.perl6.org/type/IO::Socket::INET

[15:21] <iyra> i can't think why it's not working with scgi though

[15:22] <timotimo> it could just have bitrotted

[15:23] <iyra> hmmm

[15:24] <timotimo> just running one of the examples gives me errors

[15:25] *** eroux joined
[15:25] <timotimo> oh

[15:26] <iyra> here's the code and full error that i got: http://fh.tl/CO

[15:27] <timotimo> i know what's wrong

[15:27] <timotimo> it's passing :listen(1), which upsets it

[15:27] <timotimo> it must be just :listen or :listen(True)

[15:28] <iyra> what would be the best way to make that modification locally on my computer?

[15:28] <iyra> I'm not familiar with perl modules :)

[15:28] <timotimo> hold on

[15:29] <timotimo> i'd like to know why the code had \ in these weird places to begin with 

[15:30] <timotimo> ah, it uses psgi, let's see.

[15:31] <timotimo> ok, i think my fix is ifne

[15:31] <timotimo> fine*

[15:33] <timotimo> you have zef, right?

[15:33] <iyra> yes

[15:34] <timotimo> zef can install from git links, so try this:

[15:34] <timotimo> zef install https://github.com/timo/SCGI.git

[15:34] <timotimo> might need --force because i didn't change the version, actually

[15:34] <iyra> do I have to remove the original scgi?

[15:35] <titsuki> hi #perl6, I couldn't send a bug report to the RT system with email. Is there something trouble with the RT today ?

[15:35] <timotimo> now i've bumped thev ersion

[15:36] <timotimo> titsuki: it's supposed to work. only the ticket submission thing on the rt website has been disabled long ago because of spam

[15:36] <timotimo> iyra: you do not, it should replace it

[15:36] <timotimo> also, if you do it now, i actually did bump the version

[15:37] <titsuki> timotimo: thx. I'll try it again.

[15:41] <iyra> timotimo, that's strange, I'm still getting the same error, even after changing :listen(1) to just :listen

[15:42] <timotimo> did zef install --force give any errors or something?

[15:47] <iyra> no, it installed fine

[15:47] <iyra> I cloned the repo and made the change, then tried again with --force and zef didn't give any errors

[15:48] *** sufrostico left
[15:49] <timotimo> huh

[15:49] <timotimo> can you put some very obvious thing in there, like a "say 'hello'" near the problematic code?

[15:49] <iyra> i'll give it a go

[15:51] <timotimo> if you want to make sure that code definitely gets used, just -I ../path/to/SCGI/lib/

[15:52] *** aindilis joined
[15:54] <iyra> so I've found that even after doing zef install with my new git repo, it still uses the old sources

[15:54] <iyra> and using -I ../path/to/SCGI/lib/ doesn't seem to get it done either, it still references the old sources in my .rakudobrew directory

[15:54] <iyra> i checked by looking at the source file it was using

[15:57] *** astj left
[15:58] <timotimo> oh interesting

[15:58] <timotimo> it could be it just grabs the META.info which has source-url pointing at the original repo

[15:58] <iyra> oh, good point, i'll change that

[15:59] <iyra> in my fork, i changed the version number to 2.4, but zef install is still reporting that it's installing 2.3 https://github.com/iyra/SCGI/blob/master/META6.json

[16:01] <timotimo> are you doing "zef install --force ."?

[16:02] <iyra> no, I was using the my github URL; doing the command you just posted installed my new version, though

[16:02] *** mcmillhj left
[16:03] <iyra> oh, nice! it works

[16:03] <timotimo> ah

[16:03] <iyra> the :listen thing was the problem, not sure why it wasn't getting the new version from github though

[16:03] <iyra> thanks a lot for your help

[16:03] <timotimo> you're quite welcome

[16:03] <timotimo> i opened a pullrequest on SCGI, too

[16:04] <iyra> thanks, would be nice to see it fixed

[16:04] <timotimo> turns out there was an issue posted about this back in march

[16:04] <timotimo> but it didn't look like anybody looked for the solution

[16:04] <timotimo> i just now also fixed two other modules :)

[16:04] <timotimo> Adventure::Engine and Game::Crypt

[16:04] <TimToady> is there an easy way to do a pullrequest from the comfort of my command line, without going off to github and forking and all that?

[16:04] <timotimo> TimToady: yup, get the "hub" program

[16:05] <timotimo> masak: kindly look at your pull requests for Adventure::Engine and Game::Crypt :)

[16:05] <timotimo> and yesterday i made Druid work again, too

[16:06] <timotimo> since we're about to have a Rakudo Star release, it's a good time to be fixing ecosystem modules

[16:10] <timotimo> i can't find the huge log samcv made where it shows what modules failed to install?

[16:10] <timotimo> oh, is this it

[16:10] <timotimo> http://hack.p6c.org/~samcv/install_log.txt

[16:11] <timotimo> masak: you think it might be time to throw the GGE out of the ecosystem?

[16:11] *** robertle joined
[16:13] *** mcmillhj joined
[16:16] *** Cabanossi left
[16:18] *** Cabanossi joined
[16:18] *** mcmillhj left
[16:26] *** astj joined
[16:28] *** domidumont left
[16:30] <El_Che> if someone here bumps agains the travis timeout my solution is here: https://github.com/nxadm/rakudo-pkg/blob/master/.travis.yml

[16:31] *** mcmillhj joined
[16:31] *** astj left
[16:32] *** dakkar left
[16:32] *** titsuki left
[16:34] *** AlexDaniel left
[16:35] *** mcmillhj left
[16:45] *** mcmillhj joined
[16:45] *** domidumont joined
[16:49] <TreyHarris> TimToady: if you run into any issues just holler; I've set up hub and dealt with many issues on many different platforms for my companies' devs over the years

[16:50] *** gregf_ left
[16:50] *** mcmillhj left
[16:51] <timotimo> m: say (1..10).map({ { :a($_) } }); # what is preventing the inner block from being parsed as a block? it has $_ in it …

[16:51] <camelia> rakudo-moar d27266: OUTPUT: «(a => 1 a => 2 a => 3 a => 4 a => 5 a => 6 a => 7 a => 8 a => 9 a => 10)␤»

[16:51] <TreyHarris> Erm, can't run mi6 anymore: https://gist.github.com/treyharris/bc343feb1162be5cf79e4c98acc2da40

[16:52] <timotimo> TreyHarris: huh, what happened to that file? it's got some powershell stuff in it?

[16:52] <TreyHarris> I'm on ubuntu

[16:52] *** abraxxa left
[16:52] <timotimo> yeah but %~dpn0 is powershell

[16:53] <TreyHarris> I installed it with zef, maybe retry w/panda? People have been telling me to use zef

[16:53] <timotimo> no zef is right

[16:54] <timotimo> that's literally all there is in the file

[16:54] <timotimo> um

[16:54] <timotimo> it's installing a windows launcher

[16:55] <TreyHarris> the newest commits to zef are windows-related

[16:55] <timotimo> 2 bin/ scripts [mi6 mi6.bat] installed to:

[16:55] <timotimo> /home/timo/perl6/install/share/perl6/site/bin

[16:56] <timotimo> but only one of the two actually exist

[16:56] <timotimo> my bet is that it accidentally installed mi6.bat over mi6 for some reason

[16:56] <TreyHarris> nope, no they aren't, I don't know where I saw recent win-related commits

[16:56] <timotimo> for the time being, just clone mi6 locall, and rm bin/mi6.bat, then zef install --force .

[16:56] *** beginner left
[16:58] <TreyHarris> timotimo++ thanks

[16:59] *** japh__ joined
[17:00] <timotimo> i don't think you should ever have a bat in your bin/

[17:00] <timotimo> rakudo or zef or whoever makes a launcher for you if you're on windows

[17:03] *** japh____ left
[17:03] *** mcmillhj joined
[17:04] <TreyHarris> does the bat file let an author on windows test directly before install time? I know nothing of windows except the see-through kind and the orbital kind

[17:05] <timotimo> nah, you'd just perl6 -Ilib bin/mi6 in that case

[17:06] <timotimo> oh man, having fought cmake today left me in a surpremely foul mood

[17:07] <TreyHarris> timotimo: try dealing with an airline and aviation lawyers, I bet after that cmake would seem like a soothing hottub

[17:08] <timotimo> i know i could always have it worse

[17:08] <timotimo> trying to develop krita is a hundred times more annoying than contributing to pypy. and pypy has a one-hour compile cycle.

[17:08] *** mcmillhj left
[17:12] *** mcmillhj joined
[17:15] *** bwisti joined
[17:15] *** bwisti left
[17:16] *** sufrostico joined
[17:23] *** sufrostico left
[17:27] *** khw left
[17:27] *** zakharyas left
[17:31] *** Cabanossi left
[17:33] *** Cabanossi joined
[17:34] <skids> bisect: role A { }; sub A ($) { 42  };  A(2).say # I thought this used to DWIM.

[17:34] <bisectable6> skids, Bisecting by output (old=2015.12 new=d272667) because on both starting points the exit code is 1

[17:34] <bisectable6> skids, bisect log: https://gist.github.com/123c5b03ba5697fccf04ccaa416b1ad4

[17:34] <bisectable6> skids, (2016-05-12) https://github.com/rakudo/rakudo/commit/33ef5a95459b95bf7256391a053550d4efe221de

[17:36] *** titsuki joined
[17:41] <skids> commit: role A { }; sub A ($) { 42  };  A(2).say # I thought this used to DWIM.

[17:41] <committable6> skids, ¦role: «Cannot find this revision (did you mean “all”?)»

[17:41] *** ChoHag left
[17:41] *** jonas1 left
[17:42] <jnthn> Probably not since the SomeTypeName(...) syntax was taken for coersions

[17:42] <jnthn> *coercions

[17:42] *** g0d355__ left
[17:42] <skids> Isnn't the way to implement coercions to define a sub though?

[17:43] <skids> Oh, coercive types.

[17:43] <timotimo> nah, subs for coercions is no longer a thing

[17:43] <skids> Wait it was postcirumfix, then subs, now what?

[17:53] *** sufrostico joined
[17:57] <timotimo> postcircumfix is a sub

[17:57] <timotimo> or .. was it built on top of a postcircumfix method?

[17:57] <skids> I think it was a method.

[17:57] <timotimo> now coercions are just methods named the target type

[17:57] <timotimo> which has different problems than the multi sub had

[17:57] <timotimo> but everything that was attempted was problematic

[17:58] <skids> Yeah, noticing that.  Somewhat LTA when you are trying to emulate an enum.

[18:00] *** xzhao left
[18:02] *** gdonald left
[18:02] *** gdonald joined
[18:05] *** domidumont left
[18:08] *** iyra left
[18:09] <TreyHarris> Every time I see somebody use something like bisectable6 or committable6 I want to shout "this is sorcery, burn the witch!"

[18:12] <TreyHarris> Though at Google I taught git to nooglers and when I got to the bisect section, I saw lots of mouths hanging open. So I guess it's just one of those things you either are used to or seem like pure magic.

[18:13] <moritz> I'm kinda used to it, and still looks like pure magic to me :-)

[18:14] <moritz> speaking of like magic: I'm trying https://github.com/dxa4481/truffleHog right now, and I'm quite impressed so far

[18:15] *** eroux left
[18:15] <moritz> it found faked key material that we use in unit tests (for code that validates the format of the key material)

[18:15] <moritz> and remarkably few false positives

[18:17] *** AlexDaniel joined
[18:18] <tony-o> anyone familiar with a p6 module connecting to dynamodb?

[18:18] <yoleaux> 23 Nov 2016 15:21Z <jnthn> tony-o: Rakudo 6bb8823 nails, best I can tell, the odd crashes I've been seeing in things using Proc::Async in chars mode.

[18:19] <tony-o> jnthn++

[18:19] <tony-o> though i think we've chatted since nov :-)

[18:19] <timotimo> perhaps in the other channel

[18:22] <[Coke]>  /win 6

[18:22] *** ufobat left
[18:22] <timotimo> we should have a bot that collects lines of /win N and draws a winning number at the end of each week

[18:26] <geekosaur> .oO ( and the winner is: bal )

[18:26] <El_Che> new rakudo linux packages: https://github.com/nxadm/rakudo-pkg/releases/tag/2017.04.2

[18:29] <timotimo> cool

[18:41] *** sufrostico left
[18:41] *** ufobat joined
[18:43] *** sufrostico joined
[18:44] *** iyra joined
[18:44] <RabidGravy> Boom!

[18:45] *** iyra left
[18:45] *** iyra joined
[18:51] *** lizmat joined
[18:52] *** iyra left
[18:52] *** iyra joined
[19:00] *** Cabanossi left
[19:02] *** Cabanossi joined
[19:03] *** AlexDaniel left
[19:03] *** AlexDaniel joined
[19:03] *** xinming joined
[19:06] *** xinming_ left
[19:08] *** zakharyas joined
[19:17] *** espadrine joined
[19:25] *** sufrostico left
[19:27] *** darutoko left
[19:32] *** Cabanossi left
[19:32] *** Cabanossi joined
[19:32] <timotimo> how's it going, gravy sempai?

[19:33] *** gdonald left
[19:33] <samcv> good **

[19:33] <timotimo> good HyperWhatever to you, too

[19:33] *** gdonald joined
[19:35] <RabidGravy> Harr, samcv - I'm just testing all of the ecosystem with your licence test

[19:36] <timotimo> samcv: i sent out three pullrequests to fix three modules in the ecosystem today :)

[19:36] <samcv> oh nice

[19:37] <RabidGravy> also, rather than "meta-version" there is an already specced "meta6"

[19:37] <samcv> RabidGravy, tell me what you find. probably gonna have almost 108 failures due to licenses. since some had "Artistic" when their project had Artistic 2.0, or put Artistic2 or Artistic 2 or they have the url to the license

[19:37] <samcv> yeah i saw that RabidGravy 

[19:37] <samcv> thank-

[19:41] <samcv> interestigly thre are 3 different artistic 1.0 licenses on the spdx website |X confusing. at least there's only one Artistic-2.0

[19:42] <timotimo> clearly Artistic-2.0 was made because there were too many different Artistic-1.0s

[19:42] <samcv> was that why? i thought it was other reasons

[19:43] <timotimo> i have no idea :)

[19:43] <samcv> :)

[19:43] <timotimo> i thought it was a funny reference

[19:43] <MasterDuke_> which xkcd is that? the standards one

[19:44] <timotimo> that one, yes

[19:44] <timotimo> wait, there are too many xkcds about standards

[19:44] <timotimo> we should make a better xkcd

[19:44] <samcv> not sure why there are multiple artistic 1.0 i mean. it is 1.0 it should be the same X|

[19:44] <samcv> lol!

[19:44] <samcv> https://xkcd.com/927/

[19:44] *** labster joined
[19:45] <samcv> also seems you can view the spdx spec in at least two formats that are the names of animals https://spdx.org/specifications

[19:45] <samcv> what's up with that

[19:47] <RabidGravy> 106 fail

[19:48] <samcv> k. do you have that list?

[19:48] <samcv> or log or something, or were they all due to license failures and not other things?

[19:49] *** japh____ joined
[19:52] *** japh__ left
[19:54] <RabidGravy> samcv, would have failed the licence test https://gist.github.com/jonathanstowe/e8b53b1b180de1c75ada87ab016b69d9

[19:54] <rindolf> samcv: hi! I've collected more links like that xkcd strip here - http://shlomifishswiki.branchable.com/How_Alternatives_Proliferate/?updated

[19:54] *** perigrin left
[19:54] *** perigrin joined
[19:56] *** perigrin left
[19:57] *** perigrin joined
[19:58] *** lizmat left
[19:59] *** geekosaur left
[20:00] <samcv> making lots of PR for projects that have a LICENSE file in the repo, but no field in the META file. progress

[20:00] <samcv> thx for the list RabidGravy 

[20:00] *** geekosaur joined
[20:03] <samcv> time to PR away!

[20:04] <RabidGravy> do not send any for my modules

[20:04] <RabidGravy> and it is spelled LICENCE in all of mine

[20:06] <samcv> in the meta? or the filenames

[20:07] <timotimo> LICHENS

[20:07] <samcv> hehehe

[20:07] <RabidGravy> the filename, being the correct spelling and all

[20:07] <samcv> oh that's fine. but the meta field should be license since that's what the spec says

[20:09] <RabidGravy> using a verb there is obtuse

[20:10] <samcv> in the meta or in the filename or both

[20:10] <samcv> or *anywhere*  heh

[20:11] <samcv> google says licence is a verb and license is a noun

[20:11] <samcv> https://www.google.com/search?q=licence&oq=licence&aqs=chrome.0.69i59j69i60j69i61j69i60.1076j0j4&sourceid=chrome&ie=UTF-8

[20:11] <samcv> with their dictionary thing

[20:12] <samcv> idk though.

[20:12] <timotimo> samcv:  license AE / licence BE

[20:12] <samcv> i don't know what that means

[20:12] <samcv> this ones' license is "The Artistic License 2.0"

[20:12] <samcv> so many variations

[20:13] <MasterDuke_> it's another british/american thing

[20:13] <samcv> the artistic, artistic, Artistic 2, Artistic-2 so many

[20:13] <RabidGravy> license is a verb, licence a noun yes

[20:13] <samcv> yeah but the json should probably be the standardized thing yes?

[20:13] <samcv> since it's processed by computers

[20:14] <samcv> i don't care what your license file is named, it could be licence.doc but

[20:14] <samcv> as long as the meta file is fine

[20:14] <RabidGravy> and atrribute which isn't boolean should be a vnoun

[20:14] <RabidGravy> maybe I should delete all my modules

[20:14] <samcv> :\

[20:15] <samcv> please don't

[20:16] *** iyra left
[20:16] <mst> given "atrribute" and "vnoun" I'm pretty sure he'll end up typing 'mr' instead of 'rm' anyway

[20:16] <yoleaux> 12:26Z <Zoffix> mst: would you know whether it's possible to debug Travis's IRC bot connection timeouts to Freenode? We've not seen their bot for a while and they responded to me: https://twitter.com/travisci/status/855034311103455232

[20:16] <mst> so we're probably safe

[20:17] <RabidGravy> pfft hippy

[20:17] <samcv> vnoun sounds like a futuristic nounn

[20:17] <samcv> i'm going to start with all packages that depend on Test::META though RabidGravy 

[20:18] <RabidGravy> as long as you don't send me any, feel free :)

[20:20] <samcv> :(

[20:20] <mst> if you're going to send RabidGravy a package it generally needs to contain alcohol

[20:20] <RabidGravy> I'm going to make it not fail unless meta6 is 1 or  greater anyway

[20:21] <samcv> you don't want any license field in your meta file RabidGravy even if you have a licence for the project?

[20:21] <samcv> like this https://github.com/jonathanstowe/JSON-Infer/blob/master/META6.json you have a license https://github.com/jonathanstowe/JSON-Infer/blob/master/LICENCE

[20:23] <RabidGravy> it's an optional attribute in the spec

[20:24] <samcv> so you don't want to do any option attributes?

[20:24] <jnthn> Do we have an immediate use for the data?

[20:25] <samcv> well it would be nice if 100% of packages in the ecosystem had license fields

[20:25] <ranguard> setting standards for people to follow?

[20:25] <samcv> and eventually it should probably be required to hav a license to get in the ecosystem

[20:25] <samcv> if you have a non ecosystem module fine have no license field... but if it's in the ecosystem it should have one

[20:26] <RabidGravy> then the spec shouldn't have it as optional

[20:26] <samcv> the meta spec? or ecosystem requirements?

[20:26] <samcv> or either?

[20:26] <RabidGravy> either

[20:26] <samcv> i mean ecosystem is different than the meta spec itself

[20:26] * mst is still boggling at travis

[20:27] <jnthn> I'd think the first place to update would be the documentation that we link to from modules.perl6.org: https://docs.perl6.org/language/modules.html#Distributing_Modules

[20:27] <jnthn> Which at present doesn't include license in the template that, in reality, 90%+ of people will just copy/paste/fill out :)

[20:27] <samcv> yeah i need to update the docs there

[20:27] <samcv> so the example has a license field. people need all the reminders they can get. cause some may copy paste the meta6.json on that page and edit it

[20:28] <samcv> and if it starts with no licese field, they're unlikely to add one

[20:28] <jnthn> It's exactly what I'd do if I was new to a community and looking to submit modules

[20:28] <samcv> yeah

[20:28] <RabidGravy> so you are proposing removing modules without a liicense field in the meta?

[20:28] <samcv> i am not RabidGravy 

[20:29] <samcv> i am proposing not accepting new additions to the ecosystem without a license field. at some future point in time

[20:29] <samcv> starting out with a gentle nudge to do so when submitting a PR to the ecosystem: https://github.com/perl6/ecosystem/blob/master/PULL_REQUEST_TEMPLATE.md

[20:30] <samcv> but a module without a license, you won't know if you can use it before installing it

[20:30] <samcv> which is non-ideal

[20:32] * samcv goes to edit that docs page

[20:33] <samcv> omg. navbar plus got a filtering capability so i can filter routines and methods in the bar! woo

[20:33] <samcv> that's pretty awesome

[20:34] *** robertle left
[20:43] <samcv> also if you have two licenses which at least one thing i saw uses Artistic-1.0-Perl and GPL, it would be `Artistic-1.0-Perl OR GPL-1.0`

[20:43] <samcv> and yes RabidGravy i still need to program in that situation into the meta tester X| don't shoot me!

[20:43] <TreyHarris> samcv: non-ideal, and in several corp environments I've worked at, impossible b/c you need pre-approval for even downloading.

[20:43] <samcv> yes.

[20:44] <samcv> which is why the meta files themselves are under permissible licensing, by submitting to ecosystem, so you can dl the meta files. but dling the module you can't see until you dl...

[20:44] <samcv> and without standardized names, having a whitelist in your package manager (zef supports this) becames useless

[20:46] <[Coke]> I find the licensing of the meta files outrageous, I hope it's actually required.

[20:47] <[Coke]> but absolutely appreciate the effort to get things licensed so I know if I can use them or not.

[20:47] * jnthn is, personally, rather doubtful that the META6.json files are copyrightable

[20:48] <jnthn> But yeah, I've been rotten about making sure my modules have a license

[20:48] <RabidGravy> I'm going with removing my modules from the ecosystem until this has some proper discussion

[20:49] <jnthn> So a reminder to do so upon submitting is good, as is the documentation reminding me.

[20:49] <samcv> heh jnthn well i gave you two new issues :)

[20:49] <samcv> i had no liceensed modules either so. i am guilty too

[20:49] <sjn> jnthn: any written work is copyrightable. if you can write it, you can copyright it

[20:50] <samcv> hence my reasoning for https://github.com/perl6/ecosystem/issues/321 [Coke] and TreyHarris 

[20:51] <samcv> to have a metadata license that covers the metadata itself. to be more explicit. cause the metadata can be hosted anywhere, it's not like cpan where submitting is controlled, they could replace it at any time with something different that may or may not be copyrighted differently

[20:51] <samcv> (regarding the meta file itself)

[20:52] <samcv> so i take freedesktop.org's recommendations for allowed licenses for metadata and add in artistic 2.0 in addition to that, since i'm mostly certain it fullfillls the requirements

[20:52] <jnthn> sjn: https://cyber.harvard.edu/property00/alternatives/non-copyrightable.html

[20:52] <gfldex> sjn: not all countries got the same laws, here in Germany we got the concept of "Erfindungshöhe" what makes it questionable if porn is copyrightable.

[20:53] <gfldex> what also means we are better safe then sorry by having some sort of ruling on the meta file

[20:53] <samcv> jnthn, united states is not the whole world :P and there are so many different countries

[20:53] <samcv> but that's somewhat encouraging at least. but

[20:54] <sjn> gfldex: isn't that more related to patents? (we have something similar in Norway)

[20:54] <samcv> also what if the person writes like pages in the description of the metadata file?

[20:54] <samcv> like writes a book. and pastes it in the description of the metadata

[20:54] <gfldex> sjn: it applies to any creation (Werk is not easy to translate to english)

[20:55] <samcv> that could be copyrightable easily

[20:55] <sjn> gfldex: the translation is "a Work" (e.g. "a Work of art")

[20:55] *** ufobat left
[20:55] <jnthn> samcv: Yes, I know, was just pointing out it's not so clear cut

[20:55] <gfldex> samcv: a poem would do. And given that we are talking about perl folk …

[20:55] <samcv> yep

[20:55] <samcv> hehe

[20:56] <sjn> but sure, I get jnthn's and gfldex' points. there *might* be some expectations of effort before one can claim a ©

[20:56] <gfldex> perl -e 'do not $fear and do not die'

[20:57] <sjn> one way to get around it is by making it easy to auto-generate the META6.json file :)

[20:58] <gfldex> already done

[21:00] <samcv> “ Four of these were fictitious listings that Rural had inserted into its directory to detect copying.”

[21:00] <samcv> hehehe

[21:00] <samcv> putting fake phone numbers and names in. sneaky

[21:00] <gfldex> they do that with maps too

[21:01] <samcv> yea

[21:01] <samcv> does google maps do that though?

[21:01] <samcv> and how many poeple have been in an accident due to inaccurate listings caused by copy protection and has anybody sued heh

[21:01] <samcv> https://en.wikipedia.org/wiki/Trap_street

[21:01] <gfldex> may become dangerouse with self driving cars

[21:02] *** rindolf left
[21:03] <samcv> trap streets aren't copyrightable aparently. but i guess they are evidence that the other sections are copied

[21:03] <samcv> There, the court stated: "[t]o treat 'false' facts interspersed among actual facts and represented as actual facts as fiction would mean that no one could ever reproduce or copy actual facts without risk of reproducing a false fact and thereby violating a copyright ... If such were the law, information could never be reproduced or widely disseminated." (Id. at 733)

[21:03] <samcv> i like that decision!

[21:04] *** skids left
[21:04] *** dct joined
[21:07] *** mcmillhj left
[21:07] *** TEttinger joined
[21:09] *** kyan joined
[21:09] *** RabidGravy left
[21:12] *** itaipu joined
[21:17] *** bjz joined
[21:20] *** japh__ joined
[21:22] *** sufrostico joined
[21:23] *** japh____ left
[21:27] *** wamba left
[21:29] *** zakharyas left
[21:34] *** lizmat joined
[21:40] *** dct left
[21:45] *** Cabanossi left
[21:48] *** Cabanossi joined
[21:48] *** kyan left
[21:50] *** bjz left
[22:04] *** itaipu left
[22:06] <samcv> on reading the do what the fuck you want to license again. it's really bad. it doesn't even specify that the license relates to the softwares use or otherwise

[22:06] <samcv> oh. i guess version 2 does sorta

[22:07] <samcv> DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE

[22:07] <samcv>   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

[22:07] <samcv>  0. You just DO WHAT THE FUCK YOU WANT TO.

[22:07] <samcv> still not very clear even in version 2.0. sure you can always do WTF you want to. i mean. but legally. it gives you nothing

[22:08] <samcv> i would argue that you *can* always do wtf you want to, and people already do. but it only says what you can do, not that the copyright holder is actually granting you those privledges

[22:20] <samcv> the CC-zero actually dedicates to public domain with plenty of clauses that take effect if you cannot actually reliquish copyright in your or some other country and in that case grants licenses to all persons, if the other sections are not fully valid

[22:20] <samcv> pretty nice

[22:21] <timotimo> yeah the CC people know their stuff

[22:22] *** itaipu joined
[22:23] <samcv> gfldex, i made a zef issue open for comments on the NONE vs NOASSERTION thing and mentioned what you suggested https://github.com/ugexe/zef/issues/154

[22:23] <samcv> if anybody wants to comment on it

[22:28] *** iyra joined
[22:29] <iyra> what's the best way to modify a hash/array in perl 6 from another function? I want to add values to a hash for example from the function I am passing it to

[22:29] <timotimo> you can just assign to subscripts, or use the push method or sub

[22:29] <samcv> iyra, hashes are able to be written to by default

[22:30] <timotimo> if you want a read-only hash, you'd use Map

[22:30] <samcv> m: sub thing ( %hash) { %hash<blah> = 'foo' }; my %hash = 'abc' => '123; thing(%hash); say %hash

[22:30] <camelia> rakudo-moar ce37b3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'" ␤at <tmp>:1␤------> 3= 'abc' => '123; thing(%hash); say %hash7⏏5<EOL>␤    expecting any of:␤        single quotes␤      …»

[22:30] <samcv> m: sub thing ( %hash) { %hash<blah> = 'foo' }; my %hash = 'abc' => '123'; thing(%hash); say %hash

[22:30] <camelia> rakudo-moar ce37b3: OUTPUT: «{abc => 123, blah => foo}␤»

[22:30] <iyra> what about arrays? (the things with the @ sigil I think)

[22:30] <samcv> but also push works too

[22:30] <timotimo> same deal with @ sigiled things

[22:30] <samcv> yeah arrays and hashes i believe are writable, sigil things are not unless you use `is rw` timotimo that's correct yes?

[22:31] <timotimo> you mean $ sigil things

[22:31] <iyra> ah, thanks okay

[22:31] <timotimo> "is rw" is one way, "is raw" is another

[22:31] <samcv> yeah that's what i said. sigil things are different than @ or %

[22:31] <timotimo> and things returned from a sub are also made read-only, unless you make the sub itself "is rw" and use either return-rw or last-statement-of-block return

[22:32] <timotimo> @ is a sigil and % is also a sigil :)

[22:33] <timotimo> samcv: are you going to re-generate install_log.txt regularly?

[22:33] <samcv> uh

[22:33] <samcv> i shuold

[22:33] <samcv> i forget what happened at the end that caused it to stall

[22:33] <timotimo> do we have a big checklist like the io checklist zoffix made for the IO grant? where there were checkboxes for "pr submitted" and such?

[22:33] <samcv> yes

[22:34] <samcv> https://github.com/perl6/ecosystem/issues/318 incomplete list

[22:34] <timotimo> aha!

[22:34] <samcv> feel free to add more or edit it

[22:35] <timotimo> wait wtf

[22:35] <timotimo> where did my clone of druid go? with all the fixes?

[22:35] <timotimo> oh!

[22:35] <timotimo> i had push access to druid and pushed them without forking

[22:35] <samcv> i'll regen install_log_live.txt in a bit probably or something. i'll probably implement randomizing install order of modules too

[22:36] <samcv> i should look back in logs and see why it stalled. i have timeouts but. something weird. brb 15 mins

[22:36] <timotimo> what makes the list incomplete? you had to do it by hand?

[22:36] <samcv> uhm

[22:36] <samcv> it's not updated to everything in install_log_live.txt

[22:37] <samcv> it was based on an older log that didn't have the ability to end zef when it timed out

[22:37] <timotimo> OK

[22:37] <samcv> so it was partial

[22:37] <timotimo> that explains it

[22:37] <samcv> also. note that there is an issue. where it'll say OK before instaling certain modules

[22:37] *** Actualeyes left
[22:37] <samcv> so look for the FAIL's not OK cause there's an issue with my script sometimes saying OK before it installs it

[22:38] <samcv> brb

[22:39] <timotimo> OK, looking for FAIL only is easy

[22:55] *** itaipu left
[22:55] <timotimo> https://github.com/MoarVM/MoarVM/releases/tag/9999-please-do-not-use-these - perfect

[22:55] <sammers> samcv, looks like Template::Mustache was reported here https://github.com/softmoth/p6-Template-Mustache/issues/16

[22:58] *** astj joined
[22:59] *** BenGoldberg joined
[23:01] *** mcmillhj joined
[23:03] *** astj left
[23:06] *** mcmillhj left
[23:08] *** kaare_ left
[23:08] *** kaare_ joined
[23:10] <samcv> i wonder how many PR i can get done today https://gist.github.com/samcv/b7809f40477812328914fff08efeb6bd

[23:11] <samcv> at least trying to do the more popular ones

[23:11] <timotimo> whoa, you wanna *fix* all of these?

[23:11] <samcv> uh

[23:11] <timotimo> oh

[23:11] <samcv> idk :(

[23:11] <timotimo> no, that's for licenses, right?

[23:11] <samcv> they have licenses, but it's not standard identifier

[23:11] <samcv> the list of no license is bigger than that

[23:11] <timotimo> for a moment i thought this was about the fail-to-install log

[23:11] <samcv> idk can maybe automate PR?

[23:12] <samcv> haha

[23:12] <samcv> dunno

[23:12] <timotimo> you can get the "hub" program and shell-script it

[23:12] <samcv> i've been copy pasting the same commit message and such

[23:12] <samcv> i have hub

[23:12] <samcv> i'm worried about it making a mistake though :X

[23:12] <samcv> plus i have to review all the different ones

[23:12] <timotimo> hmm

[23:12] <timotimo> fair enough

[23:12] <samcv> and connect module names with repos etc. idk.

[23:13] <timotimo> well, for module names and repos you can definitely use modules.perl6.org

[23:13] <samcv> but we can automate opening issues with everybody that has NO license in meta

[23:13] <samcv> yeah

[23:13] <timotimo> i.e. modules.perl6.org/repo/Foo::Bar

[23:13] <samcv> ah

[23:13] <timotimo> will http redirect you

[23:13] <samcv> yeah

[23:13] <timotimo> no* parsing required

[23:15] *** zapwai joined
[23:17] <samcv> and many people have "Artistic" as their license in the meta, but the project is obviously Artistic 2.0, well the license file in the project says so

[23:17] <samcv> so another reason i don't want to automate. but could automate all the ones that use the artistic license url

[23:20] <samcv> but i have a text file that i have variations of issues or of commit title/descriptions. so

[23:20] <samcv> will see about automating

[23:20] *** iyra left
[23:20] <timotimo> right

[23:20] <timotimo> i'll go to bed now :)

[23:20] *** iyra joined
[23:21] <samcv> night!

[23:21] *** mcmillhj joined
[23:22] <timotimo> night!

[23:22] *** skids joined
[23:23] <samcv> gonna start on some automated thing now. first gonna compile all the different fields of those modules then decide which i can automate and which i cannot

[23:27] <AlexDaniel> TreyHarris: well, ｢git bisect｣ is just a binary search

[23:28] <AlexDaniel> TreyHarris: so I don't know… what's so magic about binary search? :)

[23:28] *** mcmillhj left
[23:31] <TimToady> samcv: you can probably derive an "auth" from "source-url"

[23:31] *** Cabanossi left
[23:32] <TimToady> looks like a lot of people are using the "github:myname" form of auth

[23:32] <AlexDaniel> TreyHarris: bisectable6 does a bit more sorcery though. Normally ｢git bisect｣ will take your word on whether the starting points are good or bad, but bisectable6 actually *runs* the code on starting points to figure out what strategy should be used (exit code / signal / output)

[23:33] *** Cabanossi joined
[23:35] <TimToady> samcv: some people are using "author" to put a name in, but that's kind of different than "auth", so we might leave "author" as is (or change to "creator"?) and go for something unique for auth, github:foo or cpan:bar or an email or something that is unlikely to have collisions, compared to names

[23:35] <samcv> yeah. i think that makes sense

[23:36] <samcv> idk maybe it should create the auth i mean the package manager. cause package manager knows where it got them... otherwise auth is meaningless

[23:36] <iyra> what's a nice way in perl to check if all members of a list return true on a certain predicate? for example, to know if all IO::Paths in an array are directories?

[23:36] <samcv> unless you can verify identity

[23:36] <TimToady> it would also be nice if there were some way to force a new version when a module is patched, but I dunno how to do that...

[23:36] <samcv> if it didn't really come from that github user... then could be malicious

[23:36] <samcv> TimToady, uhm

[23:36] <AlexDaniel> iyra: what about @smth.all ~~ :d 

[23:36] <samcv> it's possible. we collect all the META into one json file

[23:37] <iyra> AlexDaniel, thanks, i'll check it out

[23:37] <samcv> apparently. that the zef uses

[23:37] <samcv> but. that. would be hard to do? without scraping

[23:37] <samcv> argh

[23:37] <AlexDaniel> iyra: see https://docs.perl6.org/type/Junction

[23:37] <samcv> TimToady, make so to reinstall ALL of your modules every time!

[23:38] <TimToady> like I sent a pr to jnthn to fix a bug, but forgot to increment the patchlevel, so zef doesn't see it

[23:38] <TimToady> (apparently)

[23:39] <TimToady> the S11 specs require that any given name/ver/auth correspond to a unique text if installed into an official library

[23:40] *** espadrine left
[23:40] <TimToady> or we should include a hash as part of the identity, if that's not practical

[23:40] *** cpage_ left
[23:40] <samcv> hmm

[23:40] <samcv> TimToady, OR we can have uh git revision

[23:41] <TimToady> but it's gonna be a nightmare if you can't name the "correct" version you're looking for uniquely

[23:41] <samcv> in the metadata, like we add it when we collate all of the metadata

[23:41] <samcv> and have it know it has changed

[23:41] <samcv> though the version number will be the same. but realistically. that version number is technically the newest git commit that has that version number in the json...

[23:41] <samcv> so it changes... but. yeah

[23:42] <TimToady> would be nice to have a patchlevel sequence one way or another, whether you believe in semver or not

[23:42] <samcv> since we clone the git when installing a module we could add an extra field or data that denotes the commit hash that the json came from

[23:42] <samcv> yeah

[23:45] <TimToady> but we really need to enforce the invariant somehow that, if you know the identity, you know the exact contents, or we won't be able to have a distribution system that doesn't care where things come from

[23:46] <TimToady> when it comes to source control, we're still kind of in the world of Usenet, where an email address had to know the route it took to get to you

[23:46] <TimToady> we haven't quite reached the goal of Internet email where you have a unique identity that is independent of route

[23:48] <TimToady> that's why "auth" is "auth" and not "author", because it's really supposed to be a naming authority

[23:48] <samcv> yeah

[23:56] <ugexe> the auth has no relation to where the package manager gets the package from

[23:57] <ugexe> and verifying identity is something a recommendation manager / content storage (CPAN, MetaCPAN) could enforce if they wished

[23:57] <ugexe> they could simply refuse to index anything with an auth they couldnt verify

[23:58] <TimToady> right, from the standpoint of Perl 6, there is no requirement that an "auth" of "github:TimToady" be fetched from github; we're only using it to establish a unique id

[23:59] <TimToady> some well-known place where Someone Else is managing the name collisions

