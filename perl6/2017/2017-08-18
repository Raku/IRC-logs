[00:02] *** nadim left
[00:03] *** BenGoldberg joined
[00:05] *** pmurias left
[00:05] *** Sgeo left
[00:10] *** Sgeo joined
[00:12] *** raschipi joined
[00:13] *** mcmillhj joined
[00:16] *** Sgeo_ joined
[00:17] *** dct left
[00:17] *** mcmillhj left
[00:17] *** Sgeo left
[00:24] *** itaipu left
[00:34] *** itaipu joined
[00:41] *** itaipu left
[00:41] *** BenGoldberg left
[00:45] *** Rawriful left
[00:48] *** raschipi left
[00:52] *** ufobat left
[00:56] *** Cabanossi left
[00:57] *** Cabanossi joined
[01:05] *** BenGoldberg joined
[01:10] *** mcmillhj joined
[01:14] *** mcmillhj left
[01:24] *** profan left
[01:24] *** APic left
[01:25] *** profan joined
[01:27] *** APic joined
[01:39] *** mcmillhj joined
[01:41] *** ash_gti left
[01:44] *** mcmillhj left
[01:46] *** ilbot3 left
[01:51] *** ilbot3 joined
[01:51] *** ChanServ sets mode: +v ilbot3

[01:53] *** pierre_ joined
[01:55] *** Cabanossi left
[01:56] *** mcmillhj joined
[01:57] *** Cabanossi joined
[02:01] *** mcmillhj left
[02:04] *** pierre_ left
[02:04] *** tony-o joined
[02:11] *** mcmillhj joined
[02:15] *** mcmillhj left
[02:17] *** pilne joined
[02:27] *** zoll left
[02:32] *** pierre_ joined
[02:39] *** pharv_ joined
[02:39] *** mcmillhj joined
[02:39] *** pharv_ left
[02:43] *** mcmillhj left
[02:50] *** skids left
[02:55] *** Cabanossi left
[02:57] *** Cabanossi joined
[02:58] *** noganex_ joined
[02:59] *** pierre_ left
[03:01] *** noganex left
[03:02] *** k-man left
[03:06] *** mcmillhj joined
[03:08] *** jdv79 joined
[03:10] *** Cabanossi left
[03:10] *** mcmillhj left
[03:11] *** Cabanoss- joined
[03:11] *** Cabanoss- is now known as Cabanossi

[03:15] *** cpage_ left
[03:17] *** cdg joined
[03:17] *** lookatme joined
[03:18] <lookatme> good noon!

[03:20] *** pierre_ joined
[03:21] *** cdg left
[03:25] *** mcmillhj joined
[03:30] *** mcmillhj left
[03:31] *** wigner joined
[03:35] *** greppable6 joined
[03:35] *** evalable6 joined
[03:35] *** ChanServ sets mode: +v greppable6

[03:35] *** ChanServ sets mode: +v evalable6

[03:35] *** pilne left
[03:38] *** wigner left
[03:41] *** mcmillhj joined
[03:46] *** mcmillhj left
[03:54] *** Cabanossi left
[03:56] *** Cabanossi joined
[04:02] *** kevinb joined
[04:03] <kevinb> i have a question about perl6 and "compilers", specifically, does perl6 have a "compiler" that when you're done you have an executable that can be "shipped" and no source code is available?  (such as C/C++ does)

[04:04] <kevinb> we have perl5 code and 1 of the things we don't care for is that by give our customers a "executable" we've also given away our source code

[04:04] <kevinb> can perl6 help us?

[04:05] <mst> that's why cpanel ship compiled perl5 code

[04:06] <kevinb> my understanding was that the perl5 compilers were abandoned years ago, so cpanel is a current one that works? (i've never heard of it)

[04:06] <mst> cpanel use one that apparently works for them

[04:06] <kevinb> ah, i see, they are a company

[04:07] <mst> I've not really looked into it, I've always preferred the radiator (radius server) philosophy of selling the source availability as a feature

[04:08] <kevinb> for many projects, that's great and i do it to, but for a company there are preferences to keep the source code private :)

[04:09] <mst> I've no idea what you mean by "for a company" since I was referring specifically to paid software

[04:09] <mst> perhaps google what radiator is before making assumptions

[04:12] <BenGoldberg> Generally, source code should be protected by a good license, not by hiding it.

[04:12] <kevinb> all right, i've skimmed the article, their philosophy doesn't apply to us, if i understand it correctly, perhaps i need to give more info :)

[04:12] <geekosaur> I think you can actually do that now, if you're willing to accept bytecode. installing a module compiles to bytecode for speed although it keeps the source around in case something needs it --- so make most of your app modules that can be precompiled (that is, don't use e.g. "augment" --- this is fairly easy, you need to specifically enable avoidance of precompilation) and leave out the source

[04:12] <mst> there's similar tricks with perl5 as well

[04:13] <kevinb> yes, bytecode would be acceptable, it's just far enough away from source

[04:13] <mst> the question, really, is, do you really not trust your users, or are you just trying to get management to think tey don't need to trust your users, or somewhere in between?

[04:13] *** AlexDaniel left
[04:14] <mst> like, if being able to observe the behaviour of the prorgam is a problem, you probably have to move that part off the customer's machine to have any degree of certainty

[04:14] <kevinb> when we deliver our product, it goes on to a server at the client's site, while we retain root control, no system is unhackable and we'd strongly prefer they didn't have access to our code, so they don't take it and resell it (as some people do, contracts can be ignored and damage is done)

[04:15] <kevinb> we trust most of our customers, but there are a few markets (in other countries) where the trust is no so strong

[04:16] <mst> the question here always becomes "did anybody figure out how often that's happened, and how many of the people who bought the hacked version would -really- have bought your code otherwise?"

[04:16] <mst> then measure that against the engineering effort required to reduce that number

[04:16] <kevinb> @geekosaur, what would i search for to read about compiling to bytecode

[04:17] <kevinb> my searching so far hasn't yielded much that's been helpful

[04:17] <geekosaur> er? this is done on installation, automatically (usually called precompilation or "precomp")

[04:17] <mst> I mean https://metacpan.org/pod/ByteLoader exists as well

[04:17] *** pierre_ left
[04:17] *** BenGoldberg left
[04:18] <geekosaur> you have to specifically disable it to avoid it ("no precompilation;" at the top of a module)

[04:18] <mst> yeah, blowing away the non-bytecode bits from a CURLI would probably, in theory, also work fine

[04:19] <kevinb> ok, ByteLoader gives me something to pursue, thanks!

[04:19] <mst> terrible ideas: completely feasible in perl5 *and* perl6

[04:20] <kevinb> "blowing away the non-bytecode bits from a CURLI", can you explain a little more? a quick search turned up nothing

[04:22] <mst> CURLI is CompUnitRepository::Local::Installation

[04:23] <mst> if you want to experiment with this, then your approach would be 'install perl6, install some modules, go look at the resulting files'

[04:23] <mst> but if your codebase is currently in perl5, then perhaps look at the perl5 solutions to your problem rather than learning a new programming language first :)

[04:24] <mst> kevinb: also, I'm still confused how you didn't find the perl5 bytecode stuff

[04:24] <mst> like, my process was 'go to metacpan.org, type "bytecode" into search box, click search, click first link'

[04:26] <kevinb> let's call it old info that created pre-conceived notions perl5 couldn't do it, that perlcc had been abandoned and noone had ever picked up task afterward

[04:26] <kevinb> i know, shame on me for assuming!

[04:26] <kevinb> but i thought i had read that perl6 would go to bytecode, hence why i'm asking here

[04:27] <kevinb> i also thought i'd read that perl6 could run perl5 with a pragma, or that was my chain of logic, good or bad

[04:28] *** itaipu joined
[04:28] <mst> currently the standard approach for perl6 to run perl5 code is Inline::Perl5, which embeds a copy of the perl5 VM

[04:28] *** mcmillhj joined
[04:29] <kevinb> ok, as long as it works i really don't care about under the covers :)

[04:29] <mst> the pragma you mention is theoretically possible, but I don't believe at the top of anybody's list

[04:29] <kevinb> ok, so the pragma is on the roadmap, but unimplemented so far; that's ok, i can look at Inline::Perl5

[04:30] <mst> yeah, but at that point your perl5 code is still executed by perl5, and you're still looking at ByteLoader and B::ByteCode to obfuscate your perl5

[04:30] <kevinb> i'll save off this conversation and use it to research various things

[04:30] <mst> I don't really understand what perl6 gains you here unless you're going to rewrite your codebase first

[04:30] <mst> (I mean, that'd probably be fun to do ... but ...)

[04:31] <kevinb> since i had bad info, the hope was it could help me where perl5 couldn't, but i'll abandon that line of thinking

[04:31] <mst> maybe consider asking a perl5 channel first when you have a perl5 problem? I mean ... just a thought :P

[04:32] <kevinb> we've got something like 75K lines of perl5 (not all code some of that is POD), so we're not going to abandon that to goto java/C++/whatever

[04:32] <mst> (mostly because most of what I've said in here has been basically noise to this channel, and I'd've rather had it go where the perl5 people hang out)

[04:32] <kevinb> haha, sure

[04:32] *** itaipu left
[04:32] <kevinb> i goofed, i'll correct that. thanks for the pointers!

[04:32] <mst> no worries

[04:33] <mst> play with perl6 sometime anyway, though. I still mostly write perl5 but it's a different sort of fun :D

[04:33] *** mcmillhj left
[04:34] <kevinb> i'll need to reread the docs, it's been several years since i looked; parts of it look interesting, parts make me cringe, but to be fair i'd need to go read what is current before i make a real judgement

[04:35] <mst> I can best be described at the moment as "a perl5 programmer who occasionally noodles in perl6 because it's fun to play with"

[04:35] <kevinb> "cringe" is a little strong and i apologize, how about make me unsure because it's so different

[04:35] <mst> yeah, I totally had the uncanny valley effect for years

[04:35] <mst> conceptualising it as "two languages, same family" and approaching it like learning a new lisp helped

[04:36] <kevinb> yeah, i really wished Larry had called it something else, like "Oyster" :)  related but different

[04:36] <kevinb> sorry, probably a bad joke

[04:36] <mst> more "a topic which has been beaten to death in both communities and I really don't fancy rehashing yet again" ;)

[04:37] <kevinb> haha, sure, i've actually never participated in one of those discussions, but i really don't need to either

[04:37] *** xtreak joined
[04:37] <kevinb> anyway, i have to run, it's the very end of the day for me, thank you @mst again for your help!

[04:38] <mst> aight. later.

[04:39] *** itaipu joined
[04:39] *** kevinb left
[04:44] *** cgfbee left
[04:46] *** cpage_ joined
[04:48] *** pierre_ joined
[04:53] *** itaipu left
[04:53] *** cgfbee joined
[04:56] *** zakame joined
[04:58] *** mcmillhj joined
[04:58] *** eythian left
[04:58] *** eythian_ joined
[05:02] *** mcmillhj left
[05:03] *** pierre_ left
[05:09] *** wigner joined
[05:17] *** mcmillhj joined
[05:17] *** nadim joined
[05:17] *** cdg joined
[05:21] *** wigner left
[05:21] *** mcmillhj left
[05:23] *** cdg left
[05:26] *** wigner joined
[05:27] *** piojo joined
[05:29] *** mcmillhj joined
[05:30] *** cdg joined
[05:30] *** wamba joined
[05:33] *** cdg_ joined
[05:33] *** cdg left
[05:33] *** mcmillhj left
[05:35] *** wigner left
[05:36] *** andrzejku joined
[05:37] *** gigavinyl joined
[05:37] *** cdg_ left
[05:38] *** gigavinyl left
[05:39] *** Cabanossi left
[05:40] *** Cabanossi joined
[05:41] <andrzejku> hi people

[05:41] <andrzejku> I need help with understanding some perl6 things

[05:41] <andrzejku> :P

[05:44] <mst> don't we all

[05:45] <andrzejku> :)

[05:48] *** mcmillhj joined
[05:52] *** mcmillhj left
[06:04] *** espadrine_ joined
[06:05] *** xtreak left
[06:11] *** ufobat joined
[06:13] *** mcmillhj joined
[06:15] <lookatme> :)

[06:16] *** pierre_ joined
[06:18] *** mcmillhj left
[06:19] *** gigavinyl joined
[06:20] *** gigavinyl left
[06:27] *** lowbro joined
[06:27] *** lowbro left
[06:27] *** lowbro joined
[06:32] *** ShalokShalom_ joined
[06:35] *** ShalokShalom left
[06:35] *** darutoko joined
[06:36] *** espadrine_ left
[06:36] *** ChoHag left
[06:41] *** lookatme left
[06:42] *** lookatme joined
[06:42] *** mcmillhj joined
[06:44] *** lookatme left
[06:44] *** lookatme joined
[06:47] *** mcmillhj left
[06:48] *** wigner joined
[06:49] *** nadim left
[06:52] *** wigner left
[06:58] *** mcmillhj joined
[07:01] *** nattefrost joined
[07:01] <moritz> \o

[07:01] <yoleaux> 17 Aug 2017 22:15Z <b2gills> moritz: I wrote a Grammar for a made up language for a code golf once, I don't know if it is helpful or not for what you are doing https://stackoverflow.com/a/41770672/1337

[07:02] *** mcmillhj left
[07:08] <lookatme> :(

[07:09] *** mcmillhj joined
[07:09] *** Cabanossi left
[07:10] <ufobat> noganex_, !

[07:11] *** Cabanossi joined
[07:12] *** eroux left
[07:13] *** mcmillhj left
[07:16] *** rindolf joined
[07:16] *** zakame left
[07:17] *** pierre_ left
[07:17] *** pierre_ joined
[07:18] *** ChoHag joined
[07:22] *** eythian_ is now known as eythian

[07:24] *** mcmillhj joined
[07:27] <lookatme> andrzejku, what's up ?

[07:28] *** mcmillhj left
[07:30] *** pierre_ left
[07:31] *** pierre_ joined
[07:36] *** mcmillhj joined
[07:37] *** leah2 left
[07:37] <andrzejku> priv ;d

[07:39] *** Cabanossi left
[07:41] *** mcmillhj left
[07:41] *** Cabanossi joined
[07:45] *** leah2 joined
[07:48] *** nadim joined
[07:48] *** cdg joined
[07:50] *** ChoHag left
[07:53] *** cdg left
[07:54] *** piss joined
[07:56] *** pierre_ left
[07:56] *** zakharyas joined
[07:56] *** mcmillhj joined
[07:56] *** pierre_ joined
[08:00] *** mcmillhj left
[08:09] <lookatme> andrzejku, seems like I can not send private message, it complaint: You must log in with services to message this user

[08:09] <Geth> ¦ Inline-Perl5: f66e9b4734 | (Stefan Seifert)++ | lib/Inline/Perl5.pm6

[08:09] <Geth> ¦ Inline-Perl5: No need to make $type optional in unpack_return_values

[08:09] <Geth> ¦ Inline-Perl5: 

[08:09] <Geth> ¦ Inline-Perl5: All callers supply it and optional int params are not JITed yet. So removing

[08:09] <Geth> ¦ Inline-Perl5: the default value will speed up this method a bit.

[08:09] <lookatme> :/

[08:09] <Geth> ¦ Inline-Perl5: review: https://github.com/niner/Inline-Perl5/commit/f66e9b4734

[08:09] <andrzejku> lookatme, hah lol :D

[08:12] *** mcmillhj joined
[08:13] *** piss left
[08:14] *** dakkar joined
[08:14] *** piss joined
[08:17] *** mcmillhj left
[08:18] *** domidumont joined
[08:19] *** robertle joined
[08:22] *** domidumont left
[08:23] *** domidumont joined
[08:24] *** Celelibi joined
[08:27] *** mcmillhj joined
[08:29] *** abraxxa joined
[08:32] *** ChoHag joined
[08:32] *** mcmillhj left
[08:39] *** Cabanossi left
[08:40] *** pierre_ left
[08:40] *** pierre_ joined
[08:40] *** lijinfeng joined
[08:40] *** learner_of_p6 joined
[08:41] *** Cabanossi joined
[08:41] *** mcmillhj joined
[08:46] *** cdg joined
[08:46] *** mcmillhj left
[08:47] <andrzejku> I don't understand https://docs.perl6.org/language/grammars#Protoregexes

[08:47] <andrzejku> how this contruction works :sym

[08:48] *** zakharyas left
[08:48] *** nadim left
[08:48] *** nadim_ joined
[08:49] <learner_of_p6> p6: say 'word';

[08:49] <camelia> rakudo-moar a30ce6: OUTPUT: «word␤»

[08:50] *** zakharyas joined
[08:50] *** cdg left
[08:51] *** Ven joined
[08:52] *** mcmillhj joined
[08:52] *** Ven is now known as Guest37379

[08:52] <moritz> andrzejku: in a proto regex, you have to give the individual candidates some kind of identifier

[08:53] <moritz> andrzejku: and you do that by adding a :sym<something> to their name

[08:53] <moritz> and inside the candidate, you can use <sym> to match 'something', just to avoid repetition. But you don't have to

[08:54] <andrzejku> moritz, this part I know a bit but how can I costruct something like :sym

[08:54] <andrzejku> in my code

[08:54] *** pierre_ left
[08:54] <moritz> you just write it

[08:55] *** ShalokShalom_ is now known as ShalokShalom

[08:55] <andrzejku> for example I decided to code something where I can configure more things using :fuck

[08:55] *** pierre_ joined
[08:55] <moritz> oh, you want to extend Perl 6 to add more stuff

[08:55] <moritz> I think you have to write a slang to do that, and I have no idea how that works

[08:55] <andrzejku> moritz, okay

[08:56] <moritz> it's easier to add your own traits

[08:56] <andrzejku> moritz, maybe it is too early to ask for that

[08:56] <moritz> stuff like "is rw"

[08:56] *** learner_of_p6 left
[08:56] *** pierre_ left
[08:57] *** mcmillhj left
[08:57] *** pierre_ joined
[09:07] *** mcmillhj joined
[09:11] *** piojo left
[09:14] *** mcmillhj left
[09:14] *** cdg joined
[09:16] *** cdg_ joined
[09:18] *** cdg__ joined
[09:19] *** cdg left
[09:21] *** cdg_ left
[09:22] *** szabgab joined
[09:22] *** cdg__ left
[09:23] <szabgab> Hi, I was looking for the smoke test results of Rakudo itself

[09:23] <szabgab> and how to set up Rakudo smoking

[09:24] <szabgab> https://perl6.org/community/ has two entries related to smoke testing:  "Perl 6 Testers" and "Smoke Testing" but I got a bit confused there.

[09:25] <szabgab> They both seem to talk about testing the Perl 6 modules in a bit redundant way and one of them links to http://smoke.perl6.org/ which seems to be dead

[09:28] *** TEttinger left
[09:39] <stmuk> redundant is the perl way :)

[09:40] <stmuk> testers probably hasn't worked for 3 months according to http://testers.perl6.org/recent.html

[09:40] <stmuk> zoffix's toaster system ran OK last month but is being worked on currently

[09:44] <szabgab> is toaseter testing Rakudo or the Perl 6 modules ?

[09:44] <szabgab> *toaster

[09:46] <stmuk> both links you refer to smoke test modules 

[09:46] <stmuk> since failures are either due to rakudo or the modules themselves I'd say toaster is testing both

[09:48] <stmuk> I think the main motivation of toaster is to check for rakudo problems not caught by roast failures

[09:49] *** lookatme left
[09:49] *** Aaronepower left
[09:51] *** cdg joined
[09:51] *** leont joined
[09:53] <stmuk> maybe you want https://travis-ci.org/rakudo/rakudo

[09:53] *** Guest37379 left
[09:56] *** cdg left
[09:56] <szabgab> Travis an Appveyor are good, but I thought there are individuals testing Rakudo on their own machines with other OS-es and lots of differnt configurations.

[10:03] *** astj_ left
[10:04] *** astj joined
[10:05] *** samb1 left
[10:06] <daxim> how long does it take for a rakudobug email to show up in rt?

[10:06] *** samb1 joined
[10:07] <stmuk> szabgab: yes that's probably true

[10:07] *** wamba left
[10:08] *** astj left
[10:10] *** pierre_ left
[10:14] *** mr-fooba_ joined
[10:14] *** sena_kun joined
[10:16] *** mr-foobar left
[10:16] *** cdg joined
[10:17] *** Rawriful joined
[10:19] *** szabgab left
[10:21] *** cdg left
[10:22] *** Aaronepower joined
[10:23] *** mr_ron joined
[10:24] *** noganex joined
[10:25] *** noganex_ left
[10:26] <mr_ron> docs.perl6.org has not updated since August 12 and there have been more than half a dozen commits to doc since.  Because of some git confusion and bad clocking on my system, the first commit after August 11 appears to be mine but I cloned the latest repo and "make html" ran without problems.

[10:31] *** piss left
[10:33] *** wamba joined
[10:38] *** Cabanossi left
[10:40] *** gregf_ joined
[10:41] *** Cabanossi joined
[10:44] *** Exodist joined
[10:49] <leont> daxim: it depends, rt.perl.org has a weird spam-filter mode.

[10:49] <yoleaux> 19 Jul 2017 21:09Z <tony-o> leont: - i'm looking into it but on moar-blead i'm getting 'Iteration past end of grapheme iterator' on all tests for YAMLish

[10:49] * leont seems to have fixed subtest/yaml parsing in TAP::Harness o/

[10:51] *** xtreak joined
[11:06] *** lijinfeng left
[11:07] *** zakharyas left
[11:10] *** IAASIWV joined
[11:15] *** Ulti joined
[11:17] *** araraloren joined
[11:21] <Ulti> any moar developments on this: https://stackoverflow.com/questions/39205063/deploying-self-contained-perl-6-script

[11:24] *** mr_ron left
[11:26] *** sena_kun left
[11:28] *** mr_ron joined
[11:28] *** sena_kun joined
[11:32] *** sena_kun left
[11:33] *** xtreak left
[11:33] *** xtreak joined
[11:35] *** xtreak left
[11:35] *** xtreak joined
[11:42] <ryu0> Ulti: don't think i've seen any "more" developments there.

[11:48] *** IndexMe joined
[11:51] <IndexMe> Hello, with lastest Rakudo Star I get zef build error when installing Inline::Python. I'm used to building perl5 and all my modules from scratch in linux but on Mac OS X and Rakudo Star, not so sure how I should go about it. Star gives very cryptic build errors like Applications/Rakudo/share/perl6/site/sources/3393EDA469A9E8925A633FF7A533AB41141495DA

[11:52] <IndexMe> Sorry the error is Building [FAIL]: Inline::Python:ver('0.3'):auth('github:niner') Aborting due to build failure: Inline::Python:ver('0.3'):auth('github:niner') (use --force-build to override)   in code  at /Applications/Rakudo/share/perl6/site/sources/3393EDA469A9E8925A633FF7A533AB41141495DA (Zef::Client) line 329  etc

[11:52] <moritz> IndexMe: Inline::Python needs the python header files installed

[11:53] *** Cabanossi left
[11:53] <IndexMe> I see, thanks.

[11:54] *** raschipi joined
[11:54] <araraloren> evening

[11:54] <raschipi> evening

[11:55] <IndexMe> What is the recommended way to set up p6 on Mac OS X? Difficult to find the libraries and follow the build..

[11:55] *** Cabanossi joined
[11:58] <Ulti> homebrew isnt a bad shout

[11:58] *** abraxxa left
[11:58] <IndexMe> Thanks Ulti, Moritz !

[11:58] <Ulti> but things like Inline::Python its hardly a normal library thats super straight forwards

[12:01] *** mr_ron left
[12:02] *** mr_ron joined
[12:02] *** xtreak left
[12:03] *** xtreak joined
[12:04] *** xtreak left
[12:08] <sjn> o/

[12:08] <raschipi> heyo

[12:09] <sjn> quick one-liner question; is there a convenient way to get the first unused argument? (e.g. equivalent to «perl -E 'say shift' hello»)

[12:10] <hahainternet> sjn: what counts as 'unused'?

[12:11] <sjn> in my example, both '-E' and 'say shift' are used by perl

[12:12] <hahainternet> hmm, from my playing it looks like you'd have to change the MAIN proto or similar, so i'm honestly not sure

[12:12] <sjn> the first one that is unused (and hence in @ARGV) is 'hello'

[12:12] <hahainternet> sjn: perl scripts use MAIN for this sorta thing, and so i'm not sure what the semantics of -e are

[12:12] <hahainternet> perl6 scripts*

[12:13] <hahainternet> wish i could help :/

[12:14] <sjn> perl6 -e 'my @b=(1,1,*+*...*); say @b[@*ARGS.shift]'

[12:15] <sjn> so @*ARGS.shift

[12:15] <raschipi> perl6 -e 'say shift @*ARGS' hi

[12:15] * hahainternet facepalms, doh

[12:16] <sjn> would it be sensible if shift by default took from @*ARGS?

[12:16] <raschipi> sjn: we have other mechanisms for dealing with @*ARGS by default

[12:16] <sjn> raschipi: do tell :)

[12:19] <raschipi> sjn: Have a look: http://perl6maven.com/parsing-command-line-arguments-perl6

[12:24] <tojo> hm. i can't override default value with "has" in child class see these https://pastebin.com/HASw8Tzm versus https://pastebin.com/5rUjKpE5 and the first one is what i want, but is it the correct way to do this? :)

[12:30] *** zakharyas joined
[12:34] <raschipi> tojo: https://docs.perl6.org/language/classtut#Private_Methods

[12:35] <IndexMe> @Ulti @moritz: I wedged it in but it was strange. I ran zef look Inline::Python, ran perl6 configure.pl and make test (it found no make install), and now zef install Inline::Python worked. Perhaps zef had trouble finding the python headers which were indeed already present.

[12:38] *** Zoffix joined
[12:40] <marcusramberg> 112,

[12:42] <Zoffix> .tell szabgab RE smoking Rakudo itself. There's no real setup yet. There's Toaster ( https://rakudo.party/post/Perl-6-Release-Quality-Assurance-Full-Ecosystem-Toaster ) that's currently being run on just Debian. Eventually that'll expand to more OSes. Of course, anyone can do `make stresstest` in a Rakudo checkout to stresstest it on their own systems.

[12:42] <yoleaux> Zoffix: I'll pass your message to szabgab.

[12:43] <tojo> raschipi: i don't see how private methods helps. i'm trying to change default value of parent attribute from child, but i don't understand why i can't use "has" to redefine the default value 

[12:43] <araraloren> tojo, `my` is used for declaration of class static member

[12:44] *** pierre_ joined
[12:44] <raschipi> tojo: "To call a private method of another class the calling class has to be trusted by the called class. A trust relationship is declared with trusts and the class to be trusted must already be declared."

[12:45] <hahainternet> here's a question, if i constrain the input of MAIN to an Int, unicode characters like roman numerals fail to work, but .WHAT on them returns Int

[12:46] <hahainternet> is there some processing going on in the repl that isn't done for MAIN or similar?

[12:46] <jnthn> m: class A { has $.x = self.x-default; method x-default() { 1 } }; class B is A { method x-default() { 2 } }; say A.new; say B.new

[12:46] <camelia> rakudo-moar a30ce6: OUTPUT: «A.new(x => 1)␤B.new(x => 2)␤»

[12:49] <raschipi> hahainternet: It appears to be so, not even fractions are being recognized here.

[12:49] <Zoffix> hahainternet: you're confusing passing parameters with typing them directly in code. A roman numeral typed directly in code is an Int, because it compiles to that. sub MAIN just gets them as strings, like allomorphs

[12:49] <hahainternet> Zoffix: the problem is that it works for latin numerals

[12:49] <hahainternet> so somewhere there's a distinction that perhaps might not be consistent

[12:49] <hahainternet> i don't want to proscribe :p

[12:50] <Zoffix> hahainternet: because those are allomorphic

[12:51] <Zoffix> m: dd <Ⅱ >; dd <42 >

[12:51] <camelia> rakudo-moar 866405: OUTPUT: «"Ⅱ"␤IntStr.new(42, "42")␤»

[12:51] *** setty1 joined
[12:51] <Zoffix> m: "4Ⅱ".uniprops.say

[12:51] <camelia> rakudo-moar 866405: OUTPUT: «(Nd Nl)␤»

[12:52] <tojo> jnthn: thx! nice :) 

[12:53] <hahainternet> Zoffix: sorry i have to run unfortunately, but is there a correct way to constrain MAIN? IntStr?

[12:54] <Zoffix> hahainternet: to take roman numerals? That'd probably be sub MAIN($foo where .unival.isNaN.not)

[12:54] *** Cabanossi left
[12:54] *** mcmillhj joined
[12:55] <Zoffix> hahainternet: note that $foo would still have just a Str inside the sub's body; you'd need to do unival() it to get the actual numeric value

[12:55] *** Cabanossi joined
[12:55] *** Guest19948 joined
[12:58] *** araraloren_ joined
[12:59] <tojo> araraloren: aa.. never thought "my" like that inside class definition, seems that "our" works like same inside there

[12:59] <Geth> ¦ doc: 20fdfa97e7 | (Zoffix Znet)++ (committed using GitHub Web editor) | util/trigger-rebuild.txt

[12:59] <Geth> ¦ doc: debug commit

[12:59] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/20fdfa97e7

[13:00] <Geth> ¦ doc: 66dafe1757 | (Zoffix Znet)++ (committed using GitHub Web editor) | util/trigger-rebuild.txt

[13:00] <Geth> ¦ doc: debug 2 commit

[13:00] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/66dafe1757

[13:01] <perlpilot> tojo: https://docs.perl6.org/language/classtut#Static_fields?

[13:01] *** araraloren left
[13:02] <perlpilot> tojo: granted, the docs could use a few more words on the subject.

[13:02] <tojo> perlpilot: :D i have some how managed to skip that

[13:04] *** lucasb joined
[13:07] <Zoffix> from doc CONTRIBUTING.md: "highlights (optional; requires only nodejs and at least GCC-4.8 on Linux to be installed. Running make will set everything up for you.)"

[13:07] <Zoffix> "set everything up for you" what does that mean? Will install all the deps like npm?

[13:07] <Zoffix> "/bin/sh: 4: npm: not found" guess not

[13:08] <Zoffix> "nodejs is already the newest version (4.8.2~dfsg-1)"

[13:08] <Zoffix> samcv: are you around?

[13:13] <Geth> ¦ perl6.org: tbrowder++ created pull request #82: clarify quick install instructions

[13:13] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/pull/82

[13:13] *** Guest19948 left
[13:15] <tbrowder> hi #perl6

[13:16] <tbrowder> found some glitches trying to install rakudo star, hence the PR for some more eyeballs. the issue is the continuing one of the cyclic dependencies between nqp and moar and previous installations.

[13:18] <Zoffix> tbrowder: yeah, well, your new code will nuke user's system.

[13:18] <Zoffix> $PREFIX is unset and you're running rm -fr $PREFIX/bin as root.

[13:18] <moritz> (moar eyeballs)++

[13:19] <tbrowder> how so? obviously one should define $PREFIX, but it's easy to add some words.

[13:19] <b2gills> andrzejku: I think I made a good case for proto regexes here: https://stackoverflow.com/a/41770672/1337

[13:19] <b2gills> sjn: having `shift` work on @ARGV by default is a special case in Perl 5. One of the guiding principles of Perl 6 is to remove special cases

[13:19] <tbrowder> moritz: you need to go on stage!

[13:20] <Zoffix> tbrowder: I'd rather we not have anything of the sort in the instructions. As the saying goes, you can put all the words, but you can't make the users read them.

[13:21] <tbrowder> well it needs something there: a warning about reusing an installation dir or something like that. the detailed instructions also don't talk about the problem, either.

[13:21] <Zoffix> Why isn't that in the installer itself?

[13:22] <mspo> e-using an install dir? :)

[13:22] *** IndexMe left
[13:22] <tbrowder> because I haven't been able to complete my work on the base installer, and it's a snake pit of dependencies.

[13:23] <Zoffix> It'd say that's an issue in the installer, not the "Quick Start" download page.

[13:24] <Zoffix> Kinda LTA the current instructions require root too. 

[13:24] <tbrowder> I say it's both and the quick start is the place to "start" (bow to moritz)!

[13:24] <Zoffix> I'd install into ~/.rakudo or something

[13:24] *** rindolf left
[13:24] <tbrowder> i'm looking at it from a system-wide view, not a local user.

[13:25] *** Guest19948 joined
[13:25] <moritz> then please use /opt/rakudo/ or something like that

[13:25] <Zoffix> I'm looking at it from a point of view of a user who wants to try out Rakudo and is presented with a wall of text that requires root and knowledge of how to set env vars, just to debug some obscure issue.

[13:26] <moritz> a location that isn't controlled by a package manager

[13:27] <tbrowder> that's fine, but that's a sys admin's choice. the point is to use the same dir so paths don't have to be updated, etc. 

[13:28] <raschipi> Trying to put things on directories controlled by the package-manager is asking for a work of hurt.

[13:28] <tbrowder> the fact that zef uses the same directory also complicates the issue.

[13:29] <Zoffix> .tell samcv would you be able to unbust the doc build. After hack's upgrade it's missing some sort of npm bits and I can't figure out which: https://github.com/perl6/doc/issues/1457#issue-251240775

[13:29] <yoleaux> Zoffix: I'll pass your message to samcv.

[13:29] <tbrowder> raschipi: not arguing, opt is fine.

[13:29] <Zoffix> mr_ron: ^ it'll get unbusted once that's fixed.

[13:29] *** Zoffix left
[13:29] <raschipi> either /op or /usr/local

[13:30] <tbrowder> right. at the moment i'm using /usr/local/rakudo.d on my remote server.

[13:32] <tbrowder> Zoffix: a user has to know how to set paths, doesn't he (or she)?

[13:32] <raschipi> If it separates it's files by type like a proper Unix program should, it goes in /usr/local/*

[13:33] <raschipi> If it wants to have everything in a sigle directory, it goes in /opt/rakudo

[13:33] <tbrowder> Zoffix: your quick start instructions already require root!

[13:33] <mspo> I remember a while ago it was difficult to say "use this nqp" during install

[13:34] <mspo> I haven't checked recently

[13:34] <mspo> so the order of operations was very strict and you had to have PATH setup just-so

[13:34] <tbrowder> raschipi: i expect a package installer to do that.

[13:35] <raschipi> right, the package manager installs in /usr/*

[13:35] <b2gills> I use /opt/rakudo/, and have symlinks to the executables in /home/brad/bin/

[13:35] <raschipi> Those are just for admin installed packages.

[13:36] *** Aaronepower left
[13:37] <raschipi> Of course, after installing in /opt, one needs to add the proper synlinks somewhere in path, like b2gills has, but I recommend /usr/local/bin

[13:37] *** MasterDuke left
[13:37] <raschipi> Only debian and it's derivatives adds $HOME/bin to the path by default.

[13:37] <tbrowder> i am the admin, and i install and set paths to where i want. again the point is rakudo star cannot configure into an existing directory without intervention.

[13:38] <raschipi> Yeah, of course the admin is king. I'm just saying it will have consequences.

[13:39] <tbrowder> back to the original problem: a simple warning for new users!

[13:39] <raschipi> Debian has a system called 'diversions' to tell the package manager to let a file alone.

[13:39] <tbrowder> and old user's...

[13:39] <tyil[m]> My *shrc set the path from scratch so I can be sure shits working as expected wherever I am

[13:40] *** andrzejku left
[13:42] *** skids joined
[13:47] *** jast left
[13:50] *** jast joined
[13:52] *** Kyo91_ joined
[13:53] *** rindolf joined
[14:04] *** cdg joined
[14:05] *** pierre_ left
[14:09] *** Cabanossi left
[14:10] *** Cabanossi joined
[14:11] *** itaylor57 joined
[14:14] <[Coke]> can someone reset my password on www.p6c.org ?

[14:15] *** Guest19948 left
[14:23] <[Coke]> wonder if it would help to have rakudobrew build understand moar-nom as a build target as opposed to just "moar nom"

[14:28] <ugexe> the -blead exists because there is no blead tag to target with `moar blead`

[14:32] *** jonathon joined
[14:35] <jonathon> hi! i'm getting a build failure using `zef install Linenoise`, due to development packages I don't have installed. I need to know if these are missing dependencies of (e.g. moarvm or rakudo) packages, or whether they shouldn't be necessary at all: https://bpaste.net/show/3b4bed826191

[14:36] *** Aaronepower joined
[14:36] <jonathon> e.g. is gcc incorrectly picking up the options moarvm was compiled, or should these deps be installed along with moarvm?

[14:37] *** Guest19948 joined
[14:38] *** leont left
[14:38] *** leont joined
[14:43] <Geth> ¦ infrastructure-doc: ac5d0f39d1 | (Zoffix Znet)++ (committed using GitHub Web editor) | hosts/www.p6c.org.pod

[14:43] <Geth> ¦ infrastructure-doc: update user list on www.p6c.org

[14:43] <Geth> ¦ infrastructure-doc: review: https://github.com/perl6/infrastructure-doc/commit/ac5d0f39d1

[14:48] *** rindolf left
[14:49] *** jonathon left
[14:53] *** araraloren_ left
[14:54] *** araraloren joined
[14:54] *** araraloren left
[14:54] *** araraloren joined
[15:00] *** AlexDaniel joined
[15:01] *** araraloren_ joined
[15:02] *** Skarsnik joined
[15:04] *** araraloren left
[15:04] *** rindolf joined
[15:06] *** nadim_ left
[15:08] *** araraloren_ left
[15:10] <Skarsnik> hello

[15:10] <yoleaux> 17 Aug 2017 21:47Z <Zoffix> Skarsnik: RE wtf are these VM with 100GB.... It's Google Compute Engine. 100GB is nothing. Here's my current maximum: http://i.imgur.com/ceRzOZm.png  And I've seen news they plan to expand it to 128-core VMs (presumably with even more RAM) some time soonish

[15:10] <Skarsnik> x)

[15:16] *** wamba left
[15:18] <mspo> how do you have moar without libuv?

[15:19] <Skarsnik> I think there is a fork/branch without libuv?

[15:19] <jnthn> You can't

[15:19] <jnthn> Skarsnik: No, we just stopped using it for the sync I/O bits

[15:20] <mspo> I was trying to respond to jonathon but it looks like he left

[15:20] <jnthn> Ah :)

[15:20] <mspo> his error is linenoise trying to compile but not finding luv, latomicops, and one other thing

[15:20] <mspo> which are all moar dependencies I think

[15:20] <geekosaur> I see a -Wl,-rpath but no matching -L

[15:20] <jnthn> Hm, yeah

[15:21] <mspo> https://bpaste.net/show/3b4bed826191

[15:21] <mspo> geekosaur: good job spotting that

[15:21] <jnthn> Maybe that can happen if moar is installed from a package?

[15:22] <jnthn> And to compile libs needs -dev packages or some such

[15:22] <jnthn> I guess the linenoise build is stealing the C flags from the Moar build

[15:22] <Skarsnik> is atom (the code editor) lightweight?

[15:23] <mspo> you guys should just ship with bsd-libedit and call it a day :)

[15:23] <mspo> Skarsnik: is that a joke or a troll?

[15:23] *** nadim_ joined
[15:23] <Skarsnik> It's a real question

[15:23] <geekosaur> let's put it this way: emacs in javascript

[15:23] <geekosaur> (coffeescript, but same difference)

[15:24] <Skarsnik> I work on VM with like 1-1.5GB memory

[15:24] <Skarsnik> that why I ask

[15:24] <mspo> might not be a great choice

[15:24] <Skarsnik> (and p6 coloration for kate is not really updated)

[15:25] *** lowbro left
[15:25] <raschipi> And it offers "Find and replace" as one of it's top-6 features!

[15:26] *** Guest19948 left
[15:26] <mspo> Skarsnik: Atom is the flagship example for "bloated electron app"

[15:27] <mspo> Did you ever use ActiveState Komodo?  It's about that snappy

[15:27] <mspo> VSCode is similarly RAM hungry but has a much better "feel"

[15:27] <mspo> tl;dr use vim

[15:28] <raschipi> Skarsnik: It embedds a copy of Chromium...

[15:28] <Skarsnik> I don't like much Vim, too much to configure x

[15:29] <Skarsnik> and I found it slow on like over 200 lines of perl 6

[15:30] <leont> What is the correct way of devnulling the stderr on a Proc::Async

[15:32] <jnthn> .bind-stderr(open("/dev/null", :r)) should work

[15:33] *** zakharyas left
[15:33] <mspo> I've always wanted to build an editor that could handle many GB-size files

[15:34] *** eliasr joined
[15:34] <leont> Well, that's not exactly portable

[15:34] <Skarsnik> close stderr ?

[15:35] <jnthn> .stderr.tap; # throws it all away :)

[15:35] <leont> Yeah that seems to work :-)

[15:35] <leont> Wasn't necessary at some previous point though

[15:36] <leont> Just called .stderr and program as silenced

[15:36] <jnthn> Oh

[15:36] <jnthn> Yeah, that was an untested behavior, and also made it impossible to do stuff like $p2.bind-stdin($p1.stderr)

[15:36] <raschipi> jnthn: Do you know if it will do it efficiently because of the sink context or will it copy it somewhere and then just ignore it until GC comes around?

[15:37] <jnthn> It'll end up stuck into buffers.

[15:37] <jnthn> Ideally we'd have a .ignore-stdout and .ignore-stderr

[15:37] <leont> s/as/was/

[15:37] <mspo> ignore is different from close

[15:38] *** sunnavy joined
[15:38] <geekosaur> close stands a good chance of crashing the program if it does try to use stderr

[15:38] <leont> devnull would be more efficient than this, but at least it's correct

[15:38] <leont> jnthn++

[15:38] <jnthn> .stderr(:bin).tap will be a bit cheaper fwiw

[15:38] <geekosaur> there's an assumption that the standard handles are always open

[15:39] <jnthn> Yeah, I think .ignore-stdout would just throw it away further up the pipeline and be a bit more intentful in the code

[15:40] <ilmari> leont: according to perl5's t/test.pl «/dev/null appears to be surprisingly portable», and only windows requires "nul" instead

[15:41] <ilmari> does rakudo have anything equivalent to perl5's File::Specl->devnull?

[15:41] <leont> If so, in IO::Spec

[15:42] <leont> Apparently so :-)

[15:42] <leont> $*SPEC.devnull

[15:43] <ilmari> src/core/IO/Spec/Win32.pm:23:    method devnull { 'nul' }

[15:43] <ilmari> src/core/IO/Spec/Unix.pm:65:    method devnull  { '/dev/null' }

[15:43] <b2gills> mspo: to ignore the STDERR from a Proc::Async, just add :!err to the call to .new

[15:43] <leont> AFAIK !err leaves it untouched, so the user will see it

[15:45] <jnthn> Plus I think that's a flag to run/shell, not to Proc::Async :)

[15:45] <leont> Yeah, I was wondering "this isn't documented"

[15:46] <ilmari> https://docs.perl6.org/routine/devnull

[15:47] *** Sgeo_ left
[15:48] <leont> Using the spectest to test TAP::Harness now, I'm grateful you guys wrote a test-suite for me :-p

[15:50] <leont> Test.pm is terrible :-(

[15:50] *** alimon left
[15:50] <leont> http://paste.scsys.co.uk/564908

[15:51] <leont> Apparently it messes up comments in subtests

[15:52] *** robertle left
[15:53] <leont> Or better said, multi line descriptions

[15:53] <leont> prove5 ignores any such thing, so doesn't complain about it

[15:54] *** alimon joined
[15:54] *** Cabanossi left
[15:55] *** Cabanossi joined
[15:56] *** MilkmanDan left
[15:58] *** MilkmanDan joined
[15:58] <tojo> i'm getting this error time to time "WARNING: unhandled Failure detected in DESTROY. If you meant to ignore it, you can mark it as handled by calling..." what it means? can i silence it somehow?

[15:59] *** st_elmo joined
[15:59] *** mr_ron left
[15:59] <raschipi> tojo: What rakudo version do you have?

[15:59] <geekosaur> a delayed exception made it through to garbage collection without being looked at (that is, you did some operation that produced a Failure/delayed exception, then never looked at the result)

[16:00] <tojo> raschipi: this one now 2017.04.3

[16:02] <raschipi> geekosaur: Wouldn't that mean that he sunk the failure and that should turn in in an exception? Blowing up on the GC isn't expected. 

[16:02] <geekosaur> that's why it produces that message

[16:02] <geekosaur> because it's not expected. sink normally makes Failures throw

[16:03] <geekosaur> so either this is one of the buggy versions where sink didn't always force Failures, or something else weird is wrong

[16:04] *** lucasb left
[16:04] <ilmari> what if it's assigned to a variable that just goes out of scope without being looked at?

[16:04] <raschipi> tojo: You are hitting a bug and you shouldn't just quiet it. Can you try upgrading?

[16:04] <ilmari> that won't get sunk, but will get GCed, no?

[16:05] <geekosaur> that's more or less the case I described first, yes

[16:05] <raschipi> m: my $a = fail;

[16:05] <camelia> rakudo-moar 866405: OUTPUT: «Failed␤  in block <unit> at <tmp> line 1␤␤»

[16:05] <tojo> https://pastebin.com/mW6BCqPN full error here and the code is here https://github.com/7ojo/perl6-powerline-prompt/blob/master/examples/powerline-daemon.p6 but.. i'm waiting currently IO::Socket::UNIX to appear and rewrite this little project

[16:05] <ilmari> m: my $a = fail; say 42

[16:05] <camelia> rakudo-moar 866405: OUTPUT: «Failed␤  in block <unit> at <tmp> line 1␤␤»

[16:05] <raschipi> It get's sunk;

[16:05] <tojo> raschipi: yeah i can do that

[16:06] *** st_elmo left
[16:07] *** Zoffix joined
[16:07] <ilmari> m: my $a = 1/0; say 42

[16:07] <camelia> rakudo-moar 866405: OUTPUT: «42␤»

[16:07] <ilmari> is that a different kind of Failure?

[16:07] <raschipi> m: sub f() { fail }; my $v = f;

[16:07] <camelia> rakudo-moar 866405: ( no output )

[16:08] <geekosaur> m: my $a = 1/0; dd $a

[16:08] <camelia> rakudo-moar 866405: OUTPUT: «Rat $a = <1/0>␤»

[16:08] <ilmari> m: my $a = 1/0; $a++

[16:08] <camelia> rakudo-moar 866405: ( no output )

[16:08] <ilmari> m: my $a = 1/0; $a++; dd $a

[16:08] <camelia> rakudo-moar 866405: OUTPUT: «Rat $a = <1/0>␤»

[16:08] <ilmari> m: my $a = 1/0; $a++; say $a

[16:08] <camelia> rakudo-moar 866405: OUTPUT: «Attempt to divide 1 by zero using div␤  in block <unit> at <tmp> line 1␤␤»

[16:08] <Zoffix> ilmari: that's not a failure at all. You created a Rat object

[16:08] *** astj joined
[16:09] <geekosaur> and if you Num it, it becomes Inf

[16:09] <geekosaur> still not a failure

[16:09] <Zoffix> tojo: that's not an error, it's a warning. Somewhere in your code you're getting a Failure, but you never do anything with it, so you have a possibly unhandled error, which is what the warning is about.

[16:09] <tony-o> m: dd (1/0).Num;

[16:09] <camelia> rakudo-moar 866405: OUTPUT: «Inf␤»

[16:09] <geekosaur> (but Inf is not in the range of Int)

[16:10] <ilmari> m: dd (-1/0).Num

[16:10] <camelia> rakudo-moar 866405: OUTPUT: «-Inf␤»

[16:10] <ilmari> m: dd (1/-0).Num

[16:10] <camelia> rakudo-moar 866405: OUTPUT: «Inf␤»

[16:10] <ilmari> ?!

[16:10] <mspo> I think you are casting the warning?

[16:10] *** mr_ron joined
[16:11] <Zoffix> ilmari: only Num has negative zeros

[16:11] <geekosaur> ilmari, since it's a Rat, it can't do negative zero

[16:11] <ilmari> m: dd (1/-0.0).Num

[16:11] <camelia> rakudo-moar 866405: OUTPUT: «Inf␤»

[16:11] <Zoffix> ilmari: 0.0 is a Rat, not a Num :)

[16:11] <Zoffix> m: dd 1/-0e0

[16:11] <camelia> rakudo-moar 866405: OUTPUT: «Failure.new(exception => X::Numeric::DivideByZero.new(using => "/", details => Any, numerator => 1e0), backtrace => Backtrace.new)␤»

[16:11] <Zoffix> (in 6.d that'll follow IEEE 

[16:11] <Zoffix> )

[16:11] <mspo> is () supposed to suppress warnings?

[16:11] <Zoffix> No

[16:12] * ilmari pubtimes

[16:12] *** nadim_ left
[16:13] <geekosaur> hm. shouldn't failed require get sunk?

[16:14] <raschipi> Oh, I see, it throws the exception right after the warning.

[16:14] * Zoffix sees no warnings anywhere... :S

[16:15] <mspo> m: (1 div 0).Num

[16:15] <camelia> rakudo-moar 866405: OUTPUT: «Attempt to divide 1 by zero using div␤  in block <unit> at <tmp> line 1␤␤»

[16:17] <Zoffix> 1 div 0 returns Failure; .Num call on it explodes it

[16:17] <mspo> m: Failure.Num

[16:17] <camelia> rakudo-moar 866405: OUTPUT: «Invocant of method 'Num' must be an object instance of type 'Failure', not a type object of type 'Failure'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[16:18] <Zoffix> leont: gonna fix that shortly. It'll do same as Perl's Test::More and insert hashes before extra lines

[16:18] <Zoffix> m: Failure.new.Num

[16:18] <camelia> rakudo-moar 866405: OUTPUT: «Failed␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[16:18] <mspo> m: (Failure.new).Num

[16:18] <camelia> rakudo-moar 866405: OUTPUT: «Failed␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[16:19] <leont> Zoffix: that would be very helpful :-)

[16:21] <leont> Also saw a case of an empty line in the middle of a subtest, not sure how that happened, may or may not be the same issue (t/spec/S02-lexical-conventions/unspace.t "unspace can't hide space between  # and opening bracket")

[16:21] *** S007 left
[16:23] *** nadim_ joined
[16:25] <tojo> Zoffix: yeah i suppose, but kind of hard to debug because these warnings comes delayed after long periods of using it and fills my terminal with those :)

[16:25] <leont> http://paste.scsys.co.uk/564910

[16:25] <leont> It seems #SKIP is also not handled correctly

[16:27] <moritz> yay, my book is now "#1 new release" in the "Software Programming Compilers" category

[16:27] *** khisanth_ is now known as Khisanth

[16:28] <Zoffix> \o/

[16:28] <Zoffix> moritz++

[16:28] <tony-o> moritz++

[16:29] <tony-o> have a link handy moritz?

[16:29] <mspo> moritz: did you pick an example thing to parse?

[16:29] <moritz> tony-o: https://www.amazon.com/dp/1484228987

[16:29] <moritz> it says so right above the cover image

[16:30] <moritz> more reviews would also help (hint, hint) :-)

[16:30] *** nadim_ left
[16:30] <Geth> ¦ ecosystem: 0664c84616 | (Zoffix Znet)++ (committed using GitHub Web editor) | META.list

[16:30] <Geth> ¦ ecosystem: Add Toaster to the ecopsystem

[16:30] <Geth> ¦ ecosystem: 

[16:30] <Geth> ¦ ecosystem: "Toaster of Perl 6 Ecosystem Modules": https://github.com/zoffixznet/perl6-Toaster

[16:30] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/0664c84616

[16:30] <Zoffix> tojo: good point. I'll fix it shortly.

[16:31] *** robertle joined
[16:33] <tojo> Zoffix: ! awesome :)

[16:34] <raschipi> moritz: Your book doesn't mention Perl6 can also call C++ libs.

[16:34] <mspo> dock a star

[16:35] *** S007 joined
[16:35] *** mcmillhj left
[16:35] <tony-o> 1 star

[16:36] <moritz> raschipi: right; there are a lot of things that can't be mentioned in a mere 150 or 170 or so pages

[16:37] *** mcmillhj joined
[16:37] <raschipi> It's because if this isn't specifically mentioned people will get the idea that it isn't possible, because of the C++ name mangling issue.

[16:37] <moritz> I'm starting to suspect I won't be able to mention all regex possibilites in the regex book

[16:38] *** ChristopherBotto joined
[16:38] <raschipi> Will it be a big book?

[16:38] <tony-o> you'd be the homer of our time

[16:38] *** dakkar left
[16:39] <moritz> raschipi: probably about the same size as Perl 6 Fundamentals

[16:39] *** Cabanossi left
[16:41] *** Cabanossi joined
[16:41] *** mcmillhj left
[16:41] *** rindolf left
[16:44] <raschipi> ShalokShalom: Do you like editing Wikipedia? Could you please add perl and Perl6 rules to https://en.wikipedia.org/wiki/Comparison_of_parser_generators ?

[16:44] <ShalokShalom>  less interest in Perl currently

[16:46] <Skarsnik> hm

[16:53] *** raschipi left
[16:53] *** nattefrost left
[16:53] *** japhb joined
[16:54] *** mcmillhj joined
[16:55] *** raschipi joined
[16:56] *** S007 left
[16:59] *** mcmillhj left
[17:02] <TimToady> m: say "foo" when "bar" given Any

[17:02] <camelia> rakudo-moar 866405: ( no output )

[17:02] <TimToady> m: say "foo" when "bar" given "bar"

[17:02] <camelia> rakudo-moar 866405: OUTPUT: «foo␤»

[17:03] <Zoffix> :)

[17:03] <TimToady> smartmatch is not generally supposed to trigger undef warnings on failure to match

[17:04] <Zoffix> tojo: I lied.

[17:04] *** mcmillhj joined
[17:04] <Zoffix> tojo: it actually does print some of the backtrace. I tried a few things to make it print more, but didn't find anything helpful.

[17:04] <Zoffix> Gonna stash it into my TODO list and look at it eventuallyu (maybe)

[17:05] <leont> Seems a spectest is failing for me (S29-os/system.t ":cwd(...) changes the directory processes are spawned in")

[17:07] <Zoffix> leont: how are you running the tests? It's doing some awful things to figure out what the executable is: https://github.com/perl6/roast/blob/master/S29-os/system.t#L145

[17:08] <leont> It fails on «./perl6 -Ilib t/spec/S29-os/system.rakudo.moar»

[17:09] <Zoffix> ./perl6 -Ilib t/spec/S29-os/system.rakudo.moar passes for me on HEAD

[17:10] *** abraxxa joined
[17:14] *** abraxxa left
[17:16] <leont> Then I have no idea what's going wrong

[17:16] *** xinming joined
[17:17] <tojo> Zoffix: ok! i remember that it started printing these somewhere in 2017.02-03 version of rakudo and there was ticket about this same thing, but didn't find that ticket now..

[17:22] *** preaction joined
[17:23] *** S007 joined
[17:24] <Zoffix> tojo: there was, it was closed because it wasn't a bug (just the message was improved)

[17:24] <preaction> are the folks submitting perl 6 distribution test reports to cpan testers in the channel? i've discovered that i need to make the api more strict about the data it accepts and don't want to disrupt the reporters

[17:26] *** andrzejku joined
[17:26] <Zoffix> preaction: I am one of the submitters

[17:27] <Zoffix> And anyone who has Zef::CPANReporter installed is too (not sure who else uses it)

[17:27] <Zoffix> preaction: also I never came around to write the API stuff because I totally burnt myself out. currently taking a vacation (more or less) :)

[17:28] <leont> I'm pretty sure that test is incorrect. It's executing «$*EXECUTABLE.basename», which is something that's in my path

[17:28] *** andrzejku left
[17:28] <leont> The test will only work if you have a perl6 installed

[17:28] <leont> (and in your PATH)

[17:28] <preaction> right now my focus is on version numbers: it was revealed to me that the Perl 5 clients prefix their version numbers with a "v", and i've now fixed that problem but need to make sure the API rejects invalid versions

[17:29] <Zoffix> leont: oops yeah.

[17:29] <preaction> a better question might be: are you on the cpan-testers-discuss mailing list Zoffix? or is there some medium for communication with testers (this channel, for example)?

[17:30] *** andrzejku joined
[17:30] <Zoffix> leont: looks like another test is also similarly aflicted: https://github.com/perl6/roast/blob/master/S29-os/system.t#L117-L118

[17:30] *** user3 joined
[17:30] *** setty1 left
[17:31] <Zoffix> preaction: no, I'm not on the list. I might be a bit out of the loop, but I don't think we have proper testers yet

[17:31] <Zoffix> ugexe: any idea?

[17:31] <Zoffix> (for testers stuff)

[17:31] <preaction> Zoffix: and no rush on that thing. i've been doing some thinking on how cpantesters might start treating every language as its own database all with the same schema, but that's a _long_ term solution when some short-term solutions will get y'all something to look at

[17:31] <Zoffix> And personally, I have testers on my Toaster that smokes the entire ecosystem, but its primary use is for extended pre-release testing of the compiler.

[17:32] <Zoffix> I mean, I have that module installed on my Toaster box, so reports get submitted.

[17:32] <user3> why does this output an empty array instead of Nil

[17:32] <user3> m: '' ~~ / [(a)+]? /; say $0;

[17:32] <camelia> rakudo-moar 715463: OUTPUT: «[]␤»

[17:33] *** zakharyas joined
[17:33] <Zoffix> user3: because you have the `+` on it, so it'll be an array of matches. Did you mean to have the `+` on the `a` instead?

[17:33] <user3> m: '' ~~ / [(a+)]? /; say $0;

[17:33] <camelia> rakudo-moar 715463: OUTPUT: «Nil␤»

[17:33] <Zoffix> m: 'abc' ~~ / [(.)+]? /; say $0;

[17:33] <camelia> rakudo-moar 715463: OUTPUT: «[｢a｣ ｢b｣ ｢c｣]␤»

[17:35] <preaction> Zoffix: i'm hoping to move towards those pre-release reports (testing the language against the modules, instead of testing the modules) being submitted (perl 5 does that extensively with Bleadperl Breaks CPAN) so that the website can create nice reports for that data (i just thought that a "language release report" would be pretty amazing)

[17:35] <Zoffix> buggable: toast

[17:35] <buggable> Zoffix, Between 2017.07-195-g8664050 and 2017.07: 35 (4.08%) modules got burnt; 36 (4.20%) got unsucced; 267 (31.16%) out of 857 modules appear unusable. See https://toast.perl6.party/ for details.

[17:35] <Zoffix> ^ currently we got this

[17:36] <Zoffix> Between last release and current HEAD, 35 modules got broken by the changes

[17:36] <Zoffix> But I had to manually run it and even on a 24-core box it takes about 1-2 hours

[17:37] *** mr_ron left
[17:40] *** nhywyll joined
[17:40] *** user3 left
[17:42] *** devmikey joined
[17:46] *** S007 left
[17:51] *** thundergnat joined
[17:53] *** zakharyas left
[17:54] <preaction> Zoffix: and yeah, something like that page is like what i'm thinking, and that's really cool

[17:54] <thundergnat> Is there somewhere where restrictions on unspace is codified?

[17:55] *** zakharyas joined
[17:55] <thundergnat> m: .say for (lines.lc ~~ m:g/[<[\w]-[_]>]+/)».Str.Bag   \.sort(-*.value)[^5] # I would expect this to work.

[17:55] <camelia> rakudo-moar 9e6182: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3lines.lc ~~ m:g/[<[\w]-[_]>]+/)».Str.Bag7⏏5   \.sort(-*.value)[^5] # I would expect␤    expecting any of:␤        infix␤        infix stopper␤»

[17:55] <moritz> thundergnat: the \ can't have whitespace before it, I think

[17:56] <thundergnat> m: .say for (lines.lc ~~ m:g/[<[\w]-[_]>]+/)».Str.Bag.sort(-*.value)[^5] # ok without the unspace

[17:56] <camelia> rakudo-moar 9e6182: OUTPUT: «und => 30␤ich => 17␤die => 13␤der => 10␤das => 8␤»

[17:56] <thundergnat> m: .say for (lines.lc ~~ m:g/[<[\w]-[_]>]+/)».Str.Bag\   .sort(-*.value)[^5] # ok without the unspace

[17:56] <camelia> rakudo-moar 9e6182: OUTPUT: «und => 30␤ich => 17␤die => 13␤der => 10␤das => 8␤»

[17:56] <thundergnat> Ah.

[17:56] <thundergnat> moritz++

[17:59] *** rindolf joined
[18:00] *** astj left
[18:01] *** astj joined
[18:05] *** astj left
[18:06] *** cpage_ left
[18:15] *** cdg left
[18:15] *** astj joined
[18:16] <timotimo> .tell masak there's still my pullrequest for Adventure::Engine to make it work again, same for crypt

[18:16] <yoleaux> timotimo: I'll pass your message to masak.

[18:19] *** astj left
[18:20] <timotimo> do we know how to get things to work that "use Test::META" and i get the "Could not find META6:ver<0.0.4..*>" error?

[18:20] <timotimo> hm, i'll just try zef nuke

[18:22] <Skarsnik> *insert table flip fancy unicode string* I hate you libxml2, now I need to add something to resolve on what other header definition an header need :(

[18:23] <Zoffix> timotimo: yeah, I think that's fixed with updated zef

[18:27] *** khw joined
[18:28] *** Svelta02 joined
[18:29] *** mcmillhj left
[18:30] <mspo> need XML::Grammar::PP6 :)

[18:36] *** mcmillhj joined
[18:37] *** spider-mario left
[18:38] *** spider-mario joined
[18:39] *** Svelta02 left
[18:39] *** espadrine_ joined
[18:41] *** mcmillhj left
[18:43] *** aquila-chrysaeto joined
[18:44] *** ckraniak left
[18:45] *** zakharyas left
[18:46] <Zoffix> m: use Test; plan 2; skip 1; ok 1, "foo\nbar"

[18:46] <camelia> rakudo-moar eb529f: OUTPUT: «1..2␤ok 1 - # SKIP 1␤ok 2 - foo␤# bar␤»

[18:47] <Zoffix> leont: ^ both skip and newlines in descs fixed

[18:47] *** aquila-chrysaeto left
[18:47] * Zoffix flies away into the sunset

[18:47] *** Zoffix left
[18:49] *** nadim joined
[18:51] *** mcmillhj joined
[18:53] *** Cabanossi left
[18:55] <leont> Zoffix++

[18:56] *** Cabanossi joined
[18:57] *** konsolebox left
[19:01] <leont> Still seeing that newline issue in unspace.t, guess that must have been a different issue

[19:03] *** konsolebox joined
[19:06] *** domidumont left
[19:10] *** wamba joined
[19:11] *** lowbro joined
[19:11] *** lowbro left
[19:11] *** lowbro joined
[19:20] *** darutoko left
[19:22] *** domidumont joined
[19:24] *** astj joined
[19:25] *** domidumont left
[19:28] *** astj left
[19:31] *** mr-foobar joined
[19:32] <timotimo> ZofBot: well, i did just updated zef before i tried that :)

[19:33] <timotimo> er, wrong zof

[19:33] *** mr-fooba_ left
[19:38] *** S007 joined
[19:39] *** Cabanossi left
[19:40] *** Cabanossi joined
[19:43] *** mr-fooba_ joined
[19:44] *** entonian joined
[19:45] *** ckraniak joined
[19:46] *** mr-foobar left
[19:47] <gfldex> jnthn: my long running Perl 6 stuff is not crashing anymore. Did you change something? :->

[19:49] *** nadim left
[19:49] *** nadim joined
[19:51] *** cdg joined
[19:55] *** cdg left
[19:56] <jnthn> gfldex: I fixed a couple of bugs earlier in the week where GC invariants weren't upheld, which could led the occasional crashes. Maybe one of those nailed it.

[19:56] *** cpage_ joined
[19:58] *** cdg joined
[19:59] *** zorin-os joined
[20:00] <zorin-os> can perl6 use $^X without it requiring quotes?

[20:03] *** masak joined
[20:04] * geekosaur doesn't understand the question

[20:05] <geekosaur> if you're talking about perl 5's $^X, that's not a thing as such ($^ twigil is placeholder variables)

[20:05] <zorin-os> is it possible to avoid the " colliding when using the libperl

[20:05] <zorin-os>         #define SAY_HELLO "-e", "$string = "$^X"; $string =~ s/.*\///; $newstring = "$^X" ; $newstring =~ s/$string//; print $newstring;"

[20:06] <zorin-os> like does perl6 fix that issue?

[20:07] <geekosaur> perl 5 doesn't require quotes when using $^X, so I have no idea what you are on about

[20:08] *** cpage_ left
[20:08] <geekosaur> also once you drag in things like cpp (not supported in perl 6) you're in a different world of hurt anyway

[20:09] *** ckraniak left
[20:09] <zorin-os> ok

[20:10] *** cpage_ joined
[20:10] <leont> zorin-os: in how many channels are you going to do this?

[20:10] *** nadim left
[20:11] <zorin-os> when i attempt to execute it i get this "syntax error at -e line 1, near "/;""

[20:11] <zorin-os> wich doesnt happen when i execute it on the command line via perl -e

[20:12] <zorin-os> $ perl -e '$string = $^X; $string =~ s/.*\///; $newstristring =~ s/$string//; print $newstring;'

[20:12] <zorin-os> /usr/local/bin/

[20:12] <geekosaur> that sounds like you are doing something involving the shell to me

[20:13] <geekosaur> nothing will fix the shell expanding $whatever in a double quoted string, that is a shell thing that happens before anything else can see it

[20:13] *** ckraniak joined
[20:13] <zorin-os> how do i get that to apply to this #define SAY_HELLO "-e", "$string = $^X; $string =~ s/.*\///; $newstring = $^X ; $newstring =~ s/$string//; print $newstring;"

[20:13] *** nadim joined
[20:13] <geekosaur> I have no idea what you are doing with that so cannot answer

[20:13] <geekosaur> that is a C preprocessor definiton

[20:14] <geekosaur> where/how are you expanding it?

[20:15] <zorin-os> https://paste.pound-python.org/show/ihjjPQarWl3nhElIdTDk/

[20:17] <geekosaur> that didn't even compile correctly, so no idea what the a.out is from

[20:17] <geekosaur> your compile command got split into two lines, the first errored out because the -I it needed was on the second line, the second errored out because it started with "-fwrapv" which is not a shell command

[20:19] <geekosaur> and I would be surprised if it even looked at libperl.a because at that point the only undefined symbol is _main and it's not defined in any member of libperl.a

[20:19] <zorin-os> must be an issue with "wgetpaste -c" then

[20:20] *** Zoffix joined
[20:20] <Skarsnik> geekosaur, nc can bind some basic c++ x)

[20:20] <Zoffix> Are available code tags in docs pod listed somewhere?

[20:20] <Zoffix> How the hell do I shut up xtest about undeclared variables?

[20:22] <geekosaur> Skarsnik, on some platforms where it knows the claling convention

[20:22] *** ckraniak left
[20:23] <Zoffix> Also, what's "atomicsize"?

[20:23] *** ShalokShalom left
[20:24] *** ckraniak joined
[20:25] <Zoffix> *crickets*

[20:25] <zorin-os> https://paste.pound-python.org/show/8bSlW6ACoi8R2SYniicb/

[20:26] *** aquila-chrysaeto joined
[20:27] <Geth> ¦ doc: 4b9beced0e | (Zoffix Znet)++ | 3 files

[20:27] <Geth> ¦ doc: Fix some xtest failures

[20:27] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4b9beced0e

[20:28] <Zoffix> .ask jnthn what's atomicsize? The docs mention it, but never say what it is

[20:28] <yoleaux> Zoffix: I'll pass your message to jnthn.

[20:28] <geekosaur> zorin-os, yes, you are using a regex embedded in a string

[20:28] <geekosaur> you need extra escapes. this is because you embedded it in a double quoted string

[20:28] <Zoffix> .tell [Coke] I fixed what xtests I could, per our fix-them-on-release agreement, but I can't find any docs on what new code pod tags were added to shut it up about undeclared variables, so those are still failing

[20:28] <yoleaux> Zoffix: I'll pass your message to [Coke].

[20:28] <geekosaur> again, this is not something that can be "fixed", computers cannot read your mind and switch languages mid-stream "oh this C string changed to perl I will parse as perl from here on"

[20:28] <zorin-os> where exactly do i need to put the extra escapes

[20:29] *** qwebirc480120 joined
[20:29] *** ckraniak left
[20:29] <qwebirc480120> Hello everyone! o/

[20:29] <Zoffix> Hi

[20:29] <geekosaur> basically double the existing \

[20:29] <geekosaur> I see only one, so double it

[20:29] <zorin-os> ok

[20:29] <geekosaur> beause C sring handling will then remove one of them and pass the other one on

[20:29] <qwebirc480120> I'm so embarassed. I meant to do a pull request for modifying heredoc tests and I accidentally push directly to roast (see https://github.com/perl6/roast/commit/e9a2bda8c4596f04b4549e416bba7b191a181999).

[20:30] <qwebirc480120> s/push/pushed

[20:30] <zorin-os> yay https://paste.pound-python.org/show/YQs7PrTRlM18APAxxfeY/

[20:30] <moritz> qwebirc480120: are the tests wrong?

[20:31] <Zoffix> qwebirc480120: git revert e9a2bda8c4596f04b4549e416bba7b191a

[20:31] <qwebirc480120> moritz: No, the tests document bad behavior that needs to be fixed.

[20:31] *** aquila-chrysaeto left
[20:31] <Zoffix> At the very least, that skip directive is missing a comma, so after fudging, they won't compile

[20:31] <moritz> qwebirc480120: then there is no harm

[20:31] *** llfourn joined
[20:31] <Zoffix> s/comma/quote/;

[20:32] <Zoffix> t/fudgeand[TAB] S02-literals/heredocs.t 

[20:32] <moritz> well, that can be fixed

[20:32] <Zoffix> that'll fudge and run just the file and show you all failures, if there are any

[20:35] <geekosaur> http://lpaste.net/3502097151834456064

[20:35] *** ugjka left
[20:39] *** llfourn left
[20:44] <Zoffix> .tell [Coke] never mind. Found the docs.  .oO( maybe all of these separate .md's should be in one place )

[20:44] <yoleaux> Zoffix: I'll pass your message to [Coke].

[20:48] <qwebirc480120> Zoffix: moritz: Switching to already open IRC window, so I'll now be known as ChristopherBotto instead of qwebirc480120.

[20:48] <Geth> ¦ doc: 51b678e44c | (Jonathan Worthington)++ (committed using GitHub Web editor) | doc/Type/atomicint.pod6

[20:48] <Geth> ¦ doc: Fix thinko; atomicsize was meant to be atomicint.

[20:48] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/51b678e44c

[20:48] <Zoffix> qwebirc480120: OK. I'll now be known as Harry Potter

[20:49] <Zoffix> ChristopherBotto: so does the test file run? with t/fudgeandrun.t S02-literals/heredocs.t

[20:50] <Zoffix> ChristopherBotto: not a fan of those super-long lines. Even on github they don't fit on screen and require scrolling :/

[20:50] <Geth> ¦ doc: dfd8333fbb | (Zoffix Znet)++ | 2 files

[20:50] <Geth> ¦ doc: More xtest fixage

[20:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/dfd8333fbb

[20:51] <qwebirc480120> Zoffix: Yes it runs.

[20:51] <Zoffix> Cool.

[20:52] <Zoffix> qwebirc480120: well, the PR looks good to me. Just merge it (after getting the RT number? and maybe after making line lengths shorter? :))

[20:52] *** qwebirc722017 joined
[20:53] *** qwebirc722017 left
[20:53] *** domidumont joined
[20:53] *** entonian left
[20:53] *** domidumont left
[20:54] *** nadim left
[20:54] *** qwebirc480120 left
[20:54] *** raschipi left
[20:56] *** cpage_ left
[20:57] *** ChristopherBotto left
[20:58] *** skids left
[20:58] *** ShalokShalom joined
[21:01] *** cpage_ joined
[21:03] *** nadim joined
[21:05] <tojo> about that 'WARNING: unhandled Failure detected in DESTROY', started seeing it now with my other projects too where i'm using "require", but using "try sink require .. " suppress the warning and everything seems ok now :)

[21:07] * Zoffix doubts the issue is really in there as `try` fatalizes failures

[21:07] <Zoffix> Oh, your first version didn't have a `try`.

[21:07] *** nadim left
[21:09] *** Cabanossi left
[21:10] *** Cabanossi joined
[21:11] *** TEttinger joined
[21:12] *** abraxxa joined
[21:13] <tojo> and maybe that sink part is not needed, was seeing using that with Proc::Async on the docs

[21:16] <Zoffix> tojo: in this case, no. In Proc::Async yeah, because the sink sinks the Proc object, which otherwise gets returned from `try` and THEN sunk, and if it were for an unsuccessfull process, then throws

[21:16] <Zoffix> so sinking it first makes the explosion happen inside the try

[21:17] <Zoffix> while `require` returns a Failure and `try` has `use fatal` in it, which makes Failures explode right away

[21:19] <tojo> Zoffix: thanks for clarifying!

[21:25] *** abraxxa left
[21:27] *** mcmillhj left
[21:30] *** cpage_ left
[21:37] *** TEttinger left
[21:39] *** TEttinger joined
[21:39] *** cpage_ joined
[21:40] *** MasterDuke joined
[21:40] *** rindolf left
[21:42] *** andrzejku left
[21:43] *** rindolf joined
[21:44] *** devmikey left
[21:49] <Geth> ¦ doc: 73264b7d2d | (Zoffix Znet)++ | 3 files

[21:49] <Geth> ¦ doc: Make xtest pass

[21:49] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/73264b7d2d

[21:49] <Zoffix> k :) agreement held :)

[21:51] *** Kyo91 joined
[21:51] *** cdg left
[21:52] <timotimo> overload::constant fixed \o/

[21:54] *** Kyo91_ left
[21:55] *** TEttinger left
[21:55] *** Kyo91 left
[21:55] *** mcmillhj joined
[21:56] <zorin-os> weird, when compiled with musl-buildchain $^X is one_perl

[21:57] <zorin-os> yet the perl executable itself remains the same result as the gcc version even though it was compiled with musl aswell

[21:57] *** andreoss joined
[22:00] *** APic left
[22:00] *** mcmillhj left
[22:00] *** TEttinger joined
[22:02] <zorin-os> weird, when compiled with musl-buildchain $^X is one_perl yet the perl executable itself remains the same result (it displays the path to the executable) as the gcc version even though it was compiled with musl aswell, could this be a side effect of the musl toolchain? *

[22:04] <preaction> zorin-os: this channel has nothing to do with Perl 5, at all

[22:04] *** lucasb joined
[22:17] *** wamba left
[22:18] *** TEttinger left
[22:21] *** BenGoldberg joined
[22:24] *** TEttinger joined
[22:30] *** Skarsnik left
[22:31] *** Zoffix left
[22:34] *** APic joined
[22:35] *** skids joined
[22:37] *** astj joined
[22:41] *** astj left
[22:46] *** lucasb left
[22:48] *** ufobat left
[22:53] *** cpage_ left
[22:54] *** cdg joined
[22:55] *** Cabanossi left
[22:56] *** cpage_ joined
[22:56] *** Cabanossi joined
[23:01] *** nhywyll left
[23:14] *** cdg left
[23:14] *** espadrine_ left
[23:19] *** mr_ron joined
[23:22] <mr_ron> m: say chr(0x212A), " ", ord(chr(0x212A)).base(16) # unicode "kelvin" codepoint - but shouldn't ord reverse chr?

[23:22] <camelia> rakudo-moar 159987: OUTPUT: «K 4B␤»

[23:23] *** TreyHarris left
[23:25] *** TreyHarris joined
[23:30] <geekosaur> I think this is one of those cases where the normal form is a different character

[23:31] <geekosaur> like current Unicode spec says the Greek question mark normalizes to semicolon

[23:32] <mr_ron> m: say chr(0x4B) # don't know much about normal forms - will try to look

[23:32] <camelia> rakudo-moar 159987: OUTPUT: «K␤»

[23:50] *** thundergnat left
[23:55] *** nattefrost joined
[23:58] *** mcmillhj joined
