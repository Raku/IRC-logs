[00:00] <lizmat> re packages, you might want to check out https://nxadm.github.io/rakudo-pkg/

[00:01] *** astronavt joined
[00:01] *** silug joined
[00:06] *** astronavt left
[00:13] *** rindolf left
[00:18] *** nadim_ left
[00:43] *** patrickz_ joined
[00:45] *** Cabanossi left
[00:45] <Zoffix> "2017 Perl 6 Advent Day 2 ‚Äì Perl 6: Sigils, Variables, and Containers": https://perl6advent.wordpress.com/2017/12/02/perl-6-sigils-variables-and-containers/

[00:46] *** patrickz left
[00:47] *** Cabanossi joined
[00:49] *** margeas left
[00:50] <lizmat> Zoffix: weird line ending at "implies (NL) a type-constraint"

[00:54] <Zoffix> Thanks. Fixed.

[00:59] *** evalable6 joined
[00:59] *** ChanServ sets mode: +v evalable6

[01:00] <lizmat> "$ = $ for $primes"  ??  am I missing something ?

[01:00] <lizmat> Zoffix: ^^^

[01:00] <Zoffix> lizmat: dunno. Why do you think you're missing something? The idea is nqp::null for $primes

[01:02] <lizmat> shouldn't that be "$_ = $_ for $primes" ?

[01:02] *** astronavt joined
[01:02] <Zoffix> lizmat: doesn't matter. The problematic bit is the `|$primes` iteration itself, not what the for loop does

[01:03] <Zoffix> I just don't know anything better than `$ = $` for a null operation that doesn't emit a warning

[01:03] <lizmat> then maybe "Nil for #primes" ?

[01:03] <lizmat> *$primes

[01:03] <Zoffix> m: Nil for <a b c>

[01:03] <camelia> rakudo-moar 5929887c7: ( no output )

[01:03] <Zoffix> How come that doesn't warn?

[01:03] <lizmat> special cased afaik

[01:04] <Zoffix> lizmat++ that is indeed better

[01:04] <TimToady> yes, that is special-cased

[01:05] *** comborico1611 left
[01:05] *** comborico1611 joined
[01:05] <squashable6> üçï tbrowder++ wrote a comment on ‚ÄúFix table caption RT #126740‚Äù: https://github.com/rakudo/rakudo/pull/1291#issuecomment-348654459

[01:05] <synopsebot> RT#126740 [new]: https://rt.perl.org/Ticket/Display.html?id=126740 [POD] Pod::Block::Table node caption property is not populated properly

[01:06] <Zoffix> Updated.

[01:06] *** astronavt left
[01:08] *** BenGoldberg joined
[01:08] <jnthn> "It's easy to remember: it looks like a squished box" <3

[01:08] <jnthn> I never noticed :D

[01:08] <Zoffix> :)

[01:11] * Zoffix calls it a night

[01:11] <Zoffix> \o

[01:12] <jnthn> o/

[01:12] * jnthn also, for that matter :)

[01:23] *** troys is now known as troys_

[01:24] *** eliasr left
[01:29] *** Cabanossi left
[01:32] *** Cabanossi joined
[01:32] <timotimo> m: my @stuff = (1, 2, (3, 4)), %(:42foo, :70bar); say flat @stuff¬ª<>

[01:32] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´(1 2 3 4 bar => 70 foo => 42)‚ê§¬ª

[01:33] <timotimo> m: my @stuff = (1, 2, (3, 4)), %(:42foo, :70bar); say (flat @stuff¬ª<>).perl

[01:33] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´(1, 2, 3, 4, :bar(70), :foo(42)).Seq‚ê§¬ª

[01:33] *** astronavt joined
[01:33] <timotimo> Zoffix: it may be a good idea to recommend map alongside the hyper op and point out the difference with regards to nested structures?

[01:50] *** wamba left
[01:57] *** pilne joined
[02:02] <Zoffix> timotimo: which differences?

[02:03] <timotimo> m: my @stuff = (1, 2, (3, 4)), %(:42foo, :70bar); say (flat @stuff.map(*.<>)).perl

[02:03] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´(1, 2, 3, 4, :bar(70), :foo(42)).Seq‚ê§¬ª

[02:03] <timotimo> oh, huh.

[02:03] <timotimo> i guess there wasn't one

[02:04] <timotimo> m: my @stuff = (1, 2, $(3, 4)), %(:42foo, :70bar); say (flat @stuff.map(*.<>)).perl

[02:04] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´(1, 2, $(3, 4), :bar(70), :foo(42)).Seq‚ê§¬ª

[02:04] <timotimo> m: my @stuff = (1, 2, $(3, 4)), %(:42foo, :70bar); say (flat @stuff¬ª<>).perl

[02:04] <Zoffix> m: my @stuff = (1, 2, $(3, 4)), %(:42foo, :70bar); say [].^lookup("AT-KEY").can: "nodal"

[02:04] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´(nodal)‚ê§¬ª

[02:04] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´(1, 2, $(3, 4), :bar(70), :foo(42)).Seq‚ê§¬ª

[02:04] <timotimo> okay, never mind me!

[02:04] <Zoffix> It's nodal, so it don't descend :)

[02:04] <timotimo> that makes sense, yeah

[02:04] <Zoffix> But I didn't check if it were when I was writing the article, so timotimo++ for noticing :)

[02:04] <timotimo> going to bed, too

[02:05] *** joy joined
[02:05] <timotimo> Zoffix++ Zoffix++ # two good posts

[02:05] <Zoffix> \o/

[02:06] <timotimo> hm. i guess i could have also contributed a post to the advent by using dragon speech recognition to circumvent my rsi

[02:07] <Zoffix> That would've been quite a commitment :) Rest.

[02:07] * Zoffix &

[02:16] *** Cabanossi left
[02:17] *** Cabanossi joined
[02:18] *** rp-- joined
[02:21] <comborico1611> Goodnight, everybody!

[02:21] *** comborico1611 left
[02:40] *** kitsunenokenja left
[02:45] *** ilbot3 left
[02:51] *** sivoais joined
[02:53] *** piojo left
[03:10] *** pentashift joined
[03:11] *** pentashift left
[03:12] *** cdg joined
[03:15] *** Cabanossi left
[03:16] *** cdg left
[03:17] *** Cabanossi joined
[03:26] *** astronavt left
[03:35] *** ilbot3 joined
[03:35] *** ChanServ sets mode: +v ilbot3

[03:43] *** ctilmes left
[03:44] *** kitsunenokenja joined
[03:44] *** Cabanossi left
[03:47] *** Cabanossi joined
[03:50] *** cdg joined
[03:58] *** rp-- left
[04:15] *** Cabanossi left
[04:16] *** Cabanossi joined
[04:38] *** mson left
[04:47] *** cdg left
[04:47] *** cdg joined
[04:50] *** BenGoldberg left
[04:52] *** cdg left
[04:55] *** mson joined
[05:07] *** Herby_ joined
[05:08] <Herby_> new advent of code problem up: http://adventofcode.com/2017/day/2

[05:08] <Herby_> there are some fast people out there

[05:09] <teatime> hrm, that seems awfully easy/straightforward

[05:09] * teatime wonders what he's missing

[05:10] *** reportable6 left
[05:10] *** reportable6 joined
[05:11] <Herby_> probably nothing. the first few problems are typically pretty simple

[05:11] <Herby_> gives the commoners like me a chance :)

[05:11] <Herby_> the difficulty does ramp up

[05:12] <teatime> ah, it's only day 2 :)

[05:12] <teatime> gotcha

[05:14] <Herby_> .tell Zoffix:  ++ on Day 2 advent article

[05:14] <yoleaux> Herby_: What kind of a name is "Zoffix:"?!

[05:14] <Herby_> .tell Zoffix  ++ on Day 2 advent article

[05:14] <yoleaux> Herby_: I'll pass your message to Zoffix.

[05:16] *** khw left
[05:16] <Zoffix> Thanks. Glad you liked it.

[05:16] <yoleaux> 05:14Z <Herby_> Zoffix: ++ on Day 2 advent article

[05:37] *** wander joined
[05:38] <wander> afternoon #perl6

[05:38] <yoleaux> 1 Dec 2017 17:39Z <AlexDaniel> wander: OK https://rt.perl.org/Ticket/Display.html?id=126102#txn-1511996

[05:38] <wander> ok

[05:39] *** aborazmeh joined
[05:39] *** aborazmeh left
[05:39] *** aborazmeh joined
[05:49] <Herby_> I'm lacking sleep and caffeine but I'm confused with this

[05:49] <Herby_> m: my $line = "86 440 233 83 393 420 228 491 159 13 110 135 97 238 92 396"; say $line.split(/\s/).max()

[05:49] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´97‚ê§¬ª

[05:49] <geekosaur> it found the lexical max

[05:49] <geekosaur> not the numeric one

[05:50] <Herby_> doh

[05:50] <geekosaur> you use split, it produces Strs

[05:50] <Herby_> what would be the clean way to do that, given a string?

[05:50] <Herby_> simple for loop?

[05:50] <teatime> m: my $line = "86 440 233 83 393 420 228 491 159 13 110 135 97 238 92 396"; say $line.split(/\s/)¬ª.Int.max()

[05:51] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´491‚ê§¬ª

[05:51] <geekosaur> that yes

[05:51] <teatime> is one possibility

[05:51] <Herby_> teatime: ++

[05:51] <teatime> yay I answered a question correctly

[05:51] <Herby_> :)

[05:51] *** kitsunenokenja left
[05:53] <wander> m: my $line = "86 440 233 83 393 420 228 491 159 13 110 135 97 238 92 396"; say $line.words.max(*.Int)

[05:53] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´491‚ê§¬ª

[05:54] <teatime> alas, that is nicer.

[05:54] <wander> wrap-handle we have :-)

[05:54] <teatime> I might be tempted to split on [^0-9], but I guess you can trust your input

[05:54] <wander> yes, it depends

[05:56] <Herby_> well, I solved Advent of Code Day 2 Part 1! http://adventofcode.com/2017/day/2  https://pastebin.com/mWqypbEr

[05:56] <Herby_> not high achievement but I got tripped by that lexical max :(

[05:58] <Herby_> part 2 looks a tad trickier

[05:59] *** philomath_ joined
[06:00] *** philomath_ left
[06:06] *** Xliff_ joined
[06:09] *** notbenh left
[06:09] *** notbenh joined
[06:11] *** riatre joined
[06:15] *** philomath_ joined
[06:27] <Herby_> Ok, part 2 completed. and I cleaned up part 1

[06:27] <Herby_> https://pastebin.com/jAzWKZgV

[06:27] <Herby_> If anyone has feedback on improvements, I'm all ears

[06:31] *** philomath_ left
[06:31] *** philomath_ joined
[06:36] *** mcmillhj joined
[06:36] <wander> Heyby_: line 21, is it `elsif`? how about $a == $b?

[06:39] <Herby_> I did make a (luckily) correct assumption that they would be unique numbers for each line

[06:39] <Herby_> are you saying to add another elsif to check if $a == $b?

[06:40] <wander> replace `elsif` with `if`

[06:40] *** pedh joined
[06:40] *** mcmillhj left
[06:41] <Herby_> ahhh

[06:41] <Herby_> thanks!

[06:41] *** philomath_ left
[06:49] *** pedh left
[07:16] *** Todd joined
[07:16] <Todd> HI all,  A dumb question (but that never stopped me!)

[07:16] <Todd> Why does this work: $cmd = "/usr/bin/atop 1 1 > $GoodATop 2>&1";    $str = qqx{ $cmd };

[07:17] <Todd> but including the string on the qqx lie does not.  Why do I need to use a variable?

[07:17] <Todd> symptom: /bin/sh: /usr/bin/atop 1 1 > /opt/Cimcor/CimTrak/CimTrakServer/logs/atop.txt: No such file or directory

[07:18] <Todd> $str = qqx{ "/usr/bin/atop 1 1 > $GoodATop 2>&1" };  doesn't work

[07:18] <teatime> that's not getting shell quoted

[07:18] <teatime> or rather, I think it is, but you put it in "" which get passed to the shell :)

[07:18] <Todd> Oh, so leave the quotes off?

[07:19] <teatime> try:  $str = qqx{ /usr/bin/atop 1 1 > $GoodATop 2>&1 };

[07:19] <teatime> yeah.  qqx{} is itself the quoting construct

[07:19] <Todd> Bugger.  Thank yoU!

[07:20] <Todd> worked perfectly  Thank yoU!

[07:20] <teatime> excellent.

[07:22] <Todd> This one worked too!

[07:22] <Todd> my $str = qqx{ cd /opt/Cimcor/CimTrak/CimTrakServer; ./CimTrakServer.exe -Diagnostics \"Level=255\" > $GoodCimDiagErr 2>&1 };

[07:22] *** wamba joined
[07:23] <Todd> Will wonder ever cease!

[07:23] <geekosaur> I think the backslashes are unnecessary there

[07:23] <teatime> do you even need to escape

[07:23] <teatime> yeah

[07:23] <geekosaur> in a "" string theyd be needed but here the quotes are { }

[07:23] <geekosaur> so they unescape to "

[07:24] <geekosaur> also I can't imagine $str contains much useful after that since you send it all to a file

[07:24] <Todd> ordinarily no, but the program required it for some reason.

[07:25] <Todd> It is ported from that "other" operating system, whose name I can not mention.

[07:25] <geekosaur> qqx  does because it's an expression. you probably wanted

[07:25] <teatime> Todd: VMS?

[07:25] <geekosaur> shell " cd /opt/Cimcor/CimTrak/CimTrakServer; ./CimTrakServer.exe -Diagnostics \"Level=255\" > $GoodCimDiagErr 2>&1 "

[07:26] <geekosaur> and here you do need the escapes

[07:26] <teatime> well only because you chose to use " "  ;)

[07:26] <geekosaur> also note that, as with perl 5's ``, using qqx when you don;t need the output is kinda expensive

[07:27] <geekosaur> yes, I could have used ¬´ ¬ª or something instead

[07:27] <geekosaur> also, uh, good luck running that on VMS :p

[07:28] <geekosaur> directories don't work the same way, redirection requires something that looks more like JCL than Unix

[07:28] * teatime looks at geekosaur.

[07:28] <geekosaur> (yes, I know. ironically that'd actually stand soem chance of working as is on modern windows)

[07:28] <teatime> oh, the command line

[07:29] <geekosaur> simple Bourne-shell-style redirections have worked in cmd.exe since windows nt 3.5 and win98 (win95 had a few more limitations but I think that one did work)

[07:30] <geekosaur> ok, modulo the slashes needing to be backslashes in cmd.exe

[07:30] <teatime> heh

[07:31] <Todd> This is Fedora 27.  I need the quotes and backslash when run from the (bash) command line too.  I was warned by the program's tech support.  It also has to run in its own directory too.  Weird, but ..

[07:32] <geekosaur> oh, one of those programs. bad win port

[07:32] <geekosaur> in that case I would actually be surprised that the qqx one worked because perl would strip the backslashes before it went to the shell

[07:33] <Todd> I asked this last time, but has anyone come up with a better perl 6 for win 32?  I really do not want to use Perl 5.

[07:33] <geekosaur> last I heard the win32 build reliably ran out of memory

[07:34] <geekosaur> while building

[07:34] <Todd> I got the above to work trial and error.  I had the 2>&1 redirect wrong and you guys helped me figure it out.

[07:34] <geekosaur> might be fixable but I don't think we have anyone working on perl 6 who has a win32 setup

[07:35] <geekosaur> (like, I have a windows vm always running but it's 64 bit)

[07:35] *** anant joined
[07:35] <Todd> that is what I heard.  Any way to build a win32 msi on a 64 bit system?

[07:35] <anant> Does perl6 support nested classes?

[07:35] <teatime> yes.

[07:35] <geekosaur> (and insufficient memory to run a second concurrently, and I use the main one often enough that shutting it down kinda messes things up)

[07:36] <geekosaur> it would have to be a cross-build and I don't think that's currently supported

[07:36] <Todd> bugger.

[07:36] <teatime> ... did I just lie

[07:36] <geekosaur> (windows has odd restrictions. best bet might be to try to get a wow32 build env; not sure how painful that is.)

[07:36] <geekosaur> nested classes should work fine

[07:37] <Todd> anyone know what the P5 equivalent of slurp and spurt is?

[07:37] <geekosaur> but accesses might be funny

[07:39] <Todd> When building Wine Staging, I have a "./configure --disable-win64" option.  Nothing like that for Perl6?

[07:39] <geekosaur> don't think there is a spurt. slurp is { my $o = select $fh; local $/ = undef; my $r = <$fh>; select $o; $r } assuming $fh is the filehandle (this can be simplified a bit in some circumstances)

[07:39] <anant> I didn't an example of a nested class in https://docs.perl6.org/language/objects

[07:39] <geekosaur> that tells wine to not build win64 emulation into it, not that it should build a win32 program

[07:39] <anant> I didn't = I didn't see

[07:39] <Todd> no sign of either over on https://perldoc.perl.org/index-functions.html#S

[07:39] <geekosaur> it'll generate a 64-bit executable that only handles win32 emulation

[07:40] <geekosaur> m: class A { has $.a; class B { has $.b }}; my $x = A::B.new(b => 6); say 'alive'

[07:40] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´alive‚ê§¬ª

[07:41] <geekosaur> so it may depend on what you mean by nested

[07:41] <geekosaur> since it's mostly namespacing not e.g. need an A to make an A::B

[07:45] <geekosaur> heh. back in the old days FileHandle.pm had a slurp but it looks like current IO::Handle lacks it

[07:45] *** aborazmeh left
[07:46] <geekosaur> I recall it being somewhat discouraged

[07:46] <geekosaur> although there were two camps on the issue

[07:46] <anant> Thanks geekosaur and teatime :)

[07:47] <teatime> geekosaur++

[07:47] <anant> teatime++

[07:51] <geekosaur> oh, if you wanted that nested class to only be accessible nside of class A, it's 'my class B { ... }'

[07:53] *** darutoko joined
[07:53] <anant> ok. Are nested classes discouraged in general?  I searched many perl6 tutorials, but didn't see them mentioned.

[07:53] <buggable> New CPAN upload: Inline-Go-0.0.4.tar.gz by AZAWAWI https://cpan.metacpan.org/authors/id/A/AZ/AZAWAWI/Perl6/Inline-Go-0.0.4.tar.gz

[07:54] <geekosaur> not so much discouraged as of dubious use

[07:55] *** Todd left
[07:56] <anant> Hmm. Does Perl6 have a "Zen" guide like Python (https://www.python.org/dev/peps/pep-0020/)

[07:56] <geekosaur> nope.

[07:57] <anant> It would be nice to have :) 

[07:57] <anant> I liked how the Python Zen said: Flat is better than nested.

[07:57] <geekosaur> python is One Correct Way; perl is There Is More Than One Way To Do It

[07:57] <anant> ah!

[07:57] <anant> geekosaur++

[07:58] <geekosaur> which is why perl 6 mixes OO, FP, procedural, etc. and lets you mix and match according to need or convenience

[08:00] <geekosaur> I imagine some conventions will eventually be agreed on by the community, but p6 is young enough that there aren't many such yet

[08:03] <wander> still so many things TODO

[08:04] <anant> Hmm. 

[08:05] <wander> that is why i am somewhat anxious about our Advent Calendar Day1. feature `but` has several known bugs

[08:06] <wander> but, perl6 makes code happy

[08:06] *** rindolf joined
[08:06] <geekosaur> well, it *was* about ruining christmas... :p

[08:07] <wander> that is the most important to me, my thoughts could be expressed freely

[08:09] *** setty1 joined
[08:12] *** anant left
[08:21] *** nadim joined
[08:23] *** sena_kun joined
[08:28] *** Cabanossi left
[08:31] *** Cabanossi joined
[08:39] *** a3f joined
[08:48] *** mson left
[08:51] *** donaldh_ joined
[08:52] *** donaldh_ is now known as donaldh

[08:58] *** philomath_ joined
[08:59] *** philomath_ left
[09:00] *** philomath_ joined
[09:09] *** troys_ is now known as troys

[09:11] *** raiph left
[09:24] <Geth> ¬¶ mu: 972e9bc5ce | (Moritz Lenz)++ | misc/perl6advent-2017/schedule

[09:24] <Geth> ¬¶ mu: Per 6 advent: commit to day 8

[09:24] <Geth> ¬¶ mu: review: https://github.com/perl6/mu/commit/972e9bc5ce

[09:25] *** philomath_ left
[09:25] *** philomath_ joined
[09:26] *** Phi_mb joined
[09:26] *** Phi_mb left
[09:29] *** domidumont joined
[09:35] *** philomath_ left
[09:35] *** Phi_mb joined
[09:35] *** Phi_mb left
[09:36] *** domidumont left
[09:36] *** domidumont joined
[09:43] *** troys left
[09:48] *** cdg joined
[09:52] *** cdg left
[09:58] *** Cabanossi left
[10:01] *** jeek left
[10:01] *** Cabanossi joined
[10:17] *** pdcawley joined
[10:18] *** stmuk left
[10:18] *** stmuk joined
[10:22] *** rindolf left
[10:29] *** Cabanossi left
[10:31] *** Cabanossi joined
[10:34] *** pdcawley left
[10:39] *** reportable6 left
[10:39] *** reportable6 joined
[10:40] *** someuser left
[10:42] *** margeas joined
[10:47] *** rindolf joined
[10:48] *** reportable6 left
[10:49] *** reportable6 joined
[10:49] *** ChanServ sets mode: +v reportable6

[10:50] *** reportable6 left
[10:50] *** reportable6 joined
[10:51] <AlexDaniel> squashable6: status

[10:51] <squashable6> AlexDaniel, üçïüçï SQUASHathon is in progress! The end of the event in 1 day and ‚âà1 hour. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[10:51] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/db790f480c845f3b3e6058c78e787ee0

[10:52] <AlexDaniel> reportable6: 2017-12-01T07:33:00Z 2017-12-02T06:00:00Z

[10:52] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[10:52] *** reportable6 left
[10:52] *** reportable6 joined
[10:52] *** ChanServ sets mode: +v reportable6

[10:52] <AlexDaniel> reportable6: 2017-12-01T07:33:00Z 2017-12-02T06:00:00Z

[10:52] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[10:53] <bartolin> kupopo: yeah, unfortunately the jvm backend was badly broken when Rakudo Star 2017.10 was released. it should look a bit better (and actually be installable) on HEAD. there are major problems, still (e.g. 'make' does not work before 'make test', nativecall is broken). i added some details to your gist: https://gist.github.com/shicks/27df7cf0d868b61eea59b950942d4c62

[10:53] <yoleaux> 1 Dec 2017 23:56Z <lizmat> bartolin: is https://gist.github.com/shicks/27df7cf0d868b61eea59b950942d4c62 something you'd expect from a "make install" ?

[10:53] <reportable6> AlexDaniel, https://gist.github.com/7535fa27421221ed95aa3d8ed234dd79

[10:53] <AlexDaniel> wander: ‚Üë progress so far :)

[10:54] <bartolin> AlexDaniel++

[10:55] <AlexDaniel> buggable: tag MOLD

[10:55] <buggable> AlexDaniel, There are 191 tickets tagged with MOLD; See http://fail.rakudo.party/t/MOLD for details

[10:58] <wander> AlexDaniel++

[10:59] <hahainternet> .min and .max on an array of strings gives back nonsense results

[11:00] <hahainternet> ¬ª.Numeric solves it, but I wouldn't expect them to give back such weird outputs

[11:00] <AlexDaniel> hahainternet: why so

[11:00] <hahainternet> the strings don't get coerced into the numbers they represent though, i am far too perl6 ignorant to discover why

[11:00] <AlexDaniel> m: say <abcdoeu sthiozeu uloeuhal>.max

[11:00] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´uloeuhal‚ê§¬ª

[11:00] <AlexDaniel> m: say <abcdoeu sthiozeu zzozzzt uloeuhal>.max

[11:00] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´zzozzzt‚ê§¬ª

[11:00] <AlexDaniel> m: say <abcdoeu sthiozeu zzozzzt uloeuhal>.min

[11:00] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´abcdoeu‚ê§¬ª

[11:00] <hahainternet> AlexDaniel: i understand

[11:01] <hahainternet> but this kinda violates the whole cool interoperability of strings/numbers in perl doesn't it?

[11:01] <hahainternet> perl6*

[11:01] <AlexDaniel> I don't think so. You gave it a list of strings, and then asked for the max element

[11:02] <hahainternet> i actually gave it just a list, never specifying strings

[11:02] <hahainternet> (semantics i know, but from a programmer's perspective it's important)

[11:02] <geekosaur> you have it a list of things that don't look like numbers

[11:02] <hahainternet> they certainly do look like numbers

[11:02] <geekosaur> if they look like numbers then you get IntStr-s

[11:02] <geekosaur> if they don't then you get Str-s

[11:02] <AlexDaniel> what's the code we're talking about?

[11:02] <geekosaur> (this means you can actually get a mixture)

[11:03] <hahainternet> AlexDaniel: it's just for AOC #2, for 'file'.IO.lines -> $l { my @n = $l.split(/\t/); }

[11:03] <hahainternet> presumably that produces some sort of hard String type

[11:04] <hahainternet> that won't coerce in a cool way

[11:04] <AlexDaniel> well, you took a string and split it, so you got strings back

[11:04] <geekosaur> ^

[11:04] <hahainternet> ok, how would i recover the cool behaviour?

[11:04] <geekosaur> we discussed thsi earlier, actually, split is a Str operation, it will always give you Strs

[11:05] <AlexDaniel> hahainternet: $l.split(/\t/)¬ª.Cool ? :)

[11:05] <geekosaur> $l.split(/\t/)>>.Int (or that)

[11:05] <AlexDaniel> that doesn't work :(

[11:05] <hahainternet> AlexDaniel: doesn't appear to exist?

[11:05] <hahainternet> geekosaur: doing ¬ª.Numeric, so that's fine

[11:05] <AlexDaniel> .IntStr doesn't work too

[11:06] <hahainternet> anyhow not a major complaint, but it felt a bit wart-y

[11:06] <AlexDaniel> lizmat: any reason why we don't have Str.IntStr ?

[11:06] <geekosaur> too much magic has its own problems

[11:06] <geekosaur> "every DWIM has a WAT"

[11:06] <hahainternet> geekosaur: speak for your own wizardry ;)

[11:06] <geekosaur> you say that now...

[11:07] <hahainternet> no i know what you're saying

[11:07] <hahainternet> but it should be up to the programmer to opt in or out to the wizardry they want

[11:07] <hahainternet> and i got opt-outed by default :)

[11:07] <geekosaur> because it's easy to opt back in with the hyperop

[11:07] <hahainternet> geekosaur: right but it isn't, that only coerces, it doesn't restore the cool behaviour i mentioend

[11:07] <hahainternet> i mean my problem is solved, so ty

[11:07] <geekosaur> and you have more control, which matters quite a lot in many cases

[11:08] * geekosaur keeps being reminded of nancy typing

[11:08] <AlexDaniel> hahainternet: but you can also think about performance. That is, should it actually look into every single element returned from .split, and check if it's a number or not?

[11:08] <hahainternet> AlexDaniel: if it's an IntStr sure? :)

[11:08] <geekosaur> (which was p5's "cool" behavior gone wrong plus a NaN parsing issue)

[11:08] <hahainternet> i don't mean the existing case should be changed

[11:09] <hahainternet> i would just like ¬ª.Cool or ¬ª.IntStr as you gave as an example

[11:09] <AlexDaniel> hahainternet: not sure I understand, how would it know if it's an IntStr? :)

[11:10] <hahainternet> AlexDaniel: methods are dispatched on types? i'm not suggesting .split or anything do the coercion

[11:10] *** Aaronepower joined
[11:11] <geekosaur> you seem to think a type is determined solely by looking at it. do you really want everything that touches it to have to compute its current type first

[11:11] <hahainternet> geekosaur: where do i think that? I just would like a way to coerce them

[11:11] <hahainternet> 11:09.07 < hahainternet> i would just like ¬ª.Cool or ¬ª.IntStr as you gave as an example

[11:13] <lizmat> AlexDaniel: I don't see a reason not to have Str.IntStr

[11:15] <lizmat> but I would make it slightly more involved than just IntStr.new(self.Int,self), because with that, any error in converting to Int becomes multi-level, and thus complicated

[11:15] <lizmat> m: dd "foo".Int

[11:15] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´Failure.new(exception => X::Str::Numeric.new(source => "foo", pos => 0, reason => "base-10 number must begin with valid digits or '.'"), backtrace => Backtrace.new)‚ê§¬ª

[11:15] <lizmat> as Str.Int returns a Failure, that will explode when trying to bind

[11:15] <lizmat> so if self.Int returns a Failure, you should throw that immediately, I think

[11:16] <wander> m: my $x = IntStr.new(12, "42"); say $x + 4; say $x;

[11:16] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´16‚ê§42‚ê§¬ª

[11:16] <wander> the evil way :)

[11:21] <AlexDaniel> m: my $x = IntStr.new(12, "I'm not a Str, get off my lawn!"); say $x + 4; say $x;

[11:21] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´16‚ê§I'm not a Str, get off my lawn!‚ê§¬ª

[11:28] <lizmat> not too dissimilar from dualvar() in P5  :-)

[11:29] <lizmat> handy for things like errno(), where the Str version contains the error message

[11:31] *** poohman joined
[11:33] *** stmuk left
[11:34] <squashable6> üçï W4anD0eR96++ opened issue ‚ÄúMOP ^add_method could be renamed as ^add-method‚Äù: https://github.com/rakudo/rakudo/issues/1292

[11:36] <poohman> hello all, I have a question regarding grammar tokens - if the * is for zero or more, why does the following token work and not the next 

[11:36] <poohman> token frame {\s*<top_left>\r\n\s*<date_or_time>'</TD>'\r\n}

[11:36] <poohman> the above works

[11:36] <wander> mainly about consistency, not have to be kebab-case

[11:36] <poohman> token frame {\s*<top_left>\s*\r\n\s*<date_or_time>'</TD>'\r\n}

[11:37] <poohman> the only difference is the \s* before \r

[11:37] <geekosaur> because * is greedy and \r and \n both match \s, so you have \s*\s* which is kinda asking for problems

[11:37] <wander> what is the text?

[11:38] <geekosaur> or put otherwise, you've given that regex *way* too much rope

[11:38] <wander> m: say so "\r\n" ~~ /\s*/

[11:38] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´True‚ê§¬ª

[11:38] <wander> m: say so "\r\n" ~~ /\s*?\r\n/

[11:38] <camelia> rakudo-moar 5929887c7: OUTPUT: ¬´True‚ê§¬ª

[11:39] *** espadrine left
[11:39] <wander> also note that it's 'token'

[11:40] <wander> so backtracking is disable

[11:40] <geekosaur> (I oversimplified that a bit; the reality is that it's got far too many ways to match --- and token is ratcheting, so once the first \s* commits to matching the \r\n, it can;t backtrack when it sees the literal ones

[11:40] <poohman> ok

[11:41] <geekosaur> so (a) since it can;t backtrack, it can't "unmatch" the \r and \n it committed to the first \s* and will fail when it hits them in the pattern (b) and if you make it non-ratcheting, it will be sloooooooooooooooow

[11:41] <squashable6> üçï AlexDaniel++ wrote a comment on ‚ÄúMOP ^add_method could be renamed as ^add-method‚Äù: https://github.com/rakudo/rakudo/issues/1292#issuecomment-348686524

[11:42] <squashable6> üçïüçïüçï  First contribution by lizmat++! ‚ô•

[11:44] <poohman> super - thanks 

[11:44] *** ZzZombo joined
[11:44] <squashable6> üçï tbrowder++ wrote a comment on ‚ÄúFix table caption RT #126740‚Äù: https://github.com/rakudo/rakudo/pull/1291#issuecomment-348686656

[11:44] <synopsebot> RT#126740 [new]: https://rt.perl.org/Ticket/Display.html?id=126740 [POD] Pod::Block::Table node caption property is not populated properly

[11:45] <squashable6> üçï lizmat++ wrote a comment on ‚ÄúMOP ^add_method could be renamed as ^add-method‚Äù: https://github.com/rakudo/rakudo/issues/1292#issuecomment-348686720

[11:49] *** Aaronepower left
[11:50] *** pdcawley joined
[11:52] *** ctilmes joined
[12:01] <squashable6> üçï W4anD0eR96++ wrote a comment on ‚ÄúMOP ^add_method could be renamed as ^add-method‚Äù: https://github.com/rakudo/rakudo/issues/1292#issuecomment-348687536

[12:07] <AlexDaniel> buggable: tag TESTNEEDED

[12:07] <buggable> AlexDaniel, There are 49 tickets tagged with TESTNEEDED; See http://fail.rakudo.party/t/TESTNEEDED for details

[12:11] *** ChoHag joined
[12:11] <squashable6> üçï W4anD0eR96++ wrote a comment on ‚ÄúMOP ^add_method could be renamed as ^add-method‚Äù: https://github.com/rakudo/rakudo/issues/1292#issuecomment-348688003

[12:19] *** Aaronepower joined
[12:20] <pdcawley> jamesnvc: I'm not sure that Emacs has a concept of a <menu> key by default. However, you can pick something (say Key_Menu or whatever) and then use `key-translation-map` to map from whatever emacs thinks it is initially, to `(kbd "<menu>")`, and you should be able to bind to `(kbd "<menu>")` rather than the weird name.

[12:27] <AlexDaniel> pdcawley: that's great to know, but is it the right channel? :D

[12:27] <pdcawley> Arse!

[12:27] <pdcawley> And, it turns out, I'm wrong. Emacs _does_ know about the menu key.

[12:27] <AlexDaniel> pdcawley: yeah, it defaults to M-x I think

[12:29] *** kitsunenokenja joined
[12:29] *** poohman left
[12:29] <pdcawley> AlexDaniel: Keyboards are weird. 

[12:29] * AlexDaniel just realized he has no menu key

[12:30] <AlexDaniel> (there's PrtSc on its place, wtf)

[12:30] *** ChoHag left
[12:32] <AlexDaniel> pdcawley: some keyboard *layouts* are weirder. I remapped my spacebar to AltGr :)

[12:33] <pdcawley> AlexDaniel: Don't talk to me about weird layouts. I've got a KeyboardIO model 01, 64 keys in an an approximation of the Malt layout ('E' on the left thumb, ANIS/THOR on the home row.

[12:34] <AlexDaniel> (or is it other way around? What I meant is that my spacebar is AltGr now)

[12:35] <AlexDaniel> pdcawley: oh, that one is cool. Have you seen X-Bows by the way? Another relatively similar keyboard, although it probably doesn't come with a crazy keyboard layout :)

[12:37] <pdcawley> Nope. But I do have an original Maltron that I've cut down to a 64 key matrix, rewired and rebrained to do NKRO and other such stuff, and a Kinesis that I keep meaning to hack palm keys into (and possibly rebrain, but it's got more sophisticated hardware than the Maltron, which was entirely hand wired to begin with.

[12:38] <AlexDaniel> maaaan‚Ä¶ keyboardio should really come with perl¬†6 manual or something :D

[12:38] *** epony joined
[12:39] <pdcawley> AlexDaniel: Yeah, I'm sure obra will be up for that. Right after he's managed to get enough enclosures out of his wood suppliers to ship everything after the first 1000 kickstarter orders.

[12:40] <pdcawley> AlexDaniel: Not. (And not just because I just spotted obra lurking in here)

[12:42] *** poohman joined
[12:42] *** poohman left
[12:42] *** poohman joined
[12:44] *** Cabanossi left
[12:46] *** Cabanossi joined
[12:54] *** stmuk joined
[12:54] <AlexDaniel> obra: https://imgur.com/a/J06Ve

[12:56] *** ChoHag joined
[13:04] <El_Che> wow, man, those keyboard are expensive

[13:05] <El_Che> (on the other hand, I spend ‚Ç¨92 today on a mouse)

[13:07] <El_Che> "jesse vincent" <-- p5's Jesse vincent?

[13:08] *** natrys joined
[13:12] *** ChoHag left
[13:19] *** ctilmes left
[13:19] *** ctilmes joined
[13:20] *** konsolebox left
[13:20] *** konsolebox joined
[13:21] *** xcm left
[13:23] *** xcm joined
[13:28] *** Cabanossi left
[13:31] *** Cabanossi joined
[13:35] *** poohman left
[13:40] *** mson joined
[13:42] <tyil> Zoffix: poke

[13:42] <tyil> Zoffix: in the advent article, under the "The One And Only" heading, it has a sentence "Since scalars, as the same suggests, contain just one thing‚Ä¶ ", should "same" not be "name" there?

[13:42] *** pmurias joined
[13:43] <pmurias> in roast we test tan(pi/2)

[13:44] <pmurias> is-approx tan(my num $ =  œÄ/2),  (sin(œÄ/2) / cos(œÄ/2))

[13:44] <pmurias> is tan(pi/2) something we can expect sane values for

[13:47] <AlexDaniel> pmurias: I dunno, but fwiw python returns something similar

[13:47] *** cdg joined
[13:49] <AlexDaniel> and ruby too

[13:53] <squashable6> üçï jnthn++ wrote a comment on ‚ÄúMOP ^add_method could be renamed as ^add-method‚Äù: https://github.com/rakudo/rakudo/issues/1292#issuecomment-348693494

[13:53] <squashable6> üçïüçïüçï  First contribution by jnthn++! ‚ô•

[13:54] <pmurias> jnthn: how should I get more than 14 digits of a floating point number in NQP?

[13:54] *** piojo joined
[13:55] <jnthn> pmurias: No idea, I thought the "normal" stringification of a float would include all of the available precision?

[13:55] <jnthn> If not, maybe we should check why not.

[13:55] <jnthn> lunch, bbiab

[13:55] *** rindolf left
[13:56] <pmurias> jnthn: it's set to 14

[13:58] <pmurias> err 15

[13:59] <pmurias> a double has ~15.9 decimal digits of precision

[13:59] *** rindolf joined
[14:00] <dogbert17> pmurias: I seems to remember there being a few RT's about that. Perhaps AlexDaniel has the RT numbers in his head :)

[14:03] *** poohman joined
[14:04] <pmurias> the problem I have is that when emitting floating point literals I get wrong numbers

[14:04] <AlexDaniel> down to 179 MOLD tickets \o/

[14:05] <pmurias> what are MOLD tickets?

[14:06] <AlexDaniel> dogbert17: no idea. RT#127184 ?

[14:06] <synopsebot> RT#127184 [open]: https://rt.perl.org/Ticket/Display.html?id=127184 [BUG]  One digit short to correctly stringify a double

[14:07] <AlexDaniel> pmurias: tickets that were not updated in more than one year or so

[14:07] <AlexDaniel> https://fail.rakudo.party/t/MOLD

[14:08] <AlexDaniel> squashable6: status

[14:08] <squashable6> AlexDaniel, üçïüçï SQUASHathon is in progress! The end of the event in ‚âà21 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[14:08] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/15ec6884b94a7088aa9aed1c430be6a3

[14:14] <dogbert17> AlexDaniel: yes, and perhaps RT #127201 as well

[14:14] <synopsebot> RT#127201 [new]: https://rt.perl.org/Ticket/Display.html?id=127201 sprintf() float precision cannot go beyond 15[efg]

[14:23] * AlexDaniel break &

[14:24] *** philomath_ joined
[14:28] *** domidumont left
[14:29] *** ChoHag joined
[14:30] *** domidumont joined
[14:35] *** domidumont left
[14:36] *** steve joined
[14:36] <AlexDaniel> here is a low-hanging fruit that can close 3 tickets: RT#124624

[14:36] <synopsebot> RT#124624 [open]: https://rt.perl.org/Ticket/Display.html?id=124624 [LHF] :./S02-magicals/KERNEL.t line:8 reason: 'unimpl 0KERNEL'

[14:37] *** poohman left
[14:38] *** poohman joined
[14:38] *** poohman left
[14:39] *** philomath_ left
[14:39] <AlexDaniel> Actually 5, if you also unfudge $*DISTRO tests

[14:40] *** philomath_ joined
[14:40] *** poohman joined
[14:41] <AlexDaniel> and 7 if you do the same with $*VM

[14:41] <pmurias> m: say $?KERNEL

[14:41] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$?KERNEL' is not declared. Did you mean 'Kernel'?‚ê§at <tmp>:1‚ê§------> 3say 7‚èè5$?KERNEL‚ê§¬ª

[14:42] <pmurias> m: say $*KERNEL

[14:42] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´linux (4.4.70.18.9.default)‚ê§¬ª

[14:42] <AlexDaniel> actually 16, if you do the same with $*PERL‚Ä¶ :)

[14:42] <pmurias> AlexDaniel: $?KERNEL has to be actually implemented first before we unfudge it right?

[14:43] <AlexDaniel> didn't we decide to have $*KERNEL instead of $?KERNEL? or is there supposed to be a difference?

[14:44] *** Cabanossi left
[14:45] <pmurias> isn't $?KERNEL the kernel we are compiling under as opposed to the $*KERNEL we are running under?

[14:46] *** Cabanossi joined
[14:46] <AlexDaniel> uhhhh‚Ä¶ I see‚Ä¶

[14:47] <AlexDaniel> yeah, I guess I'm wrong then

[14:49] <pdcawley> El_Che: And the first perl 6 project manager Jesse Vincent, yes. Or obra.

[14:52] *** philomath_ left
[14:54] <AlexDaniel> well ok, at least these tickets no longer have mold because I linked them all together

[14:56] *** raiph joined
[15:04] <wander> m: .say for [[1,2,3]][0]

[15:04] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´1‚ê§¬ª

[15:04] <wander> m: .say for [[1,2,3]][0].Array

[15:04] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´1‚ê§¬ª

[15:05] <wander> m: .say for [[1,2,3],][0]

[15:05] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´[1 2 3]‚ê§¬ª

[15:05] <wander> m: .say for [[1,2,3],][0].Array

[15:05] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§¬ª

[15:06] <wander> most frequent asked question about 'container'

[15:08] *** poohman left
[15:08] <wander> m: say |[[1,2,3],[4,5,6]]

[15:08] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´[1 2 3][4 5 6]‚ê§¬ª

[15:08] <wander> m: say [|[1,2,3],|[4,5,6]]

[15:08] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´[1 2 3 4 5 6]‚ê§¬ª

[15:09] <jnthn> Well, single arg rule as well as containers :)

[15:13] <pmurias> hmm, is there a way to exactly serialize a double to javascript?

[15:17] <wander> m: say reduce { $^a.append: $^b.flat }, [[1,2,3],[4,5,6]]

[15:17] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´[1 2 3 4 5 6]‚ê§¬ª

[15:22] *** SHODAN joined
[15:24] *** ctilmes left
[15:26] <wander> m: say [1,2,3] + [4,5,6]

[15:26] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´6‚ê§¬ª

[15:26] <wander> m: say +[4,5,6]

[15:26] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´3‚ê§¬ª

[15:28] <El_Che> pdcawley: nice project. I saw something on twitter about it.

[15:32] *** darutoko left
[15:44] *** domidumont joined
[15:44] *** Cabanossi left
[15:44] <wander> m: say gather for [[1,2,3],[4,5,6]] { .take for .flat }

[15:44] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´(1 2 3 4 5 6)‚ê§¬ª

[15:45] *** khw joined
[15:46] *** Cabanossi joined
[15:50] *** mson left
[15:51] <wander> m: [[1,2,3],[4,5,6]].join('#').split('#') # dirty

[15:51] <camelia> rakudo-moar f768623d9: ( no output )

[15:58] *** rindolf left
[16:02] *** rindolf joined
[16:10] <Herby_> o/

[16:16] <Zoffix> tyil: thanks. Fixed.

[16:17] <Zoffix> Herby_: you were looking for containers article the other day. It's now up: https://perl6advent.wordpress.com/2017/12/02/perl-6-sigils-variables-and-containers/

[16:18] <Herby_> Zoffix: o/\o gonna read it this morning, just waiting for my coffee to brew :)

[16:33] *** perlpilot_ joined
[16:34] *** Sgeo_ joined
[16:40] <squashable6> üçï zoffixznet++ wrote a comment on ‚ÄúMOP ^add_method could be renamed as ^add-method‚Äù: https://github.com/rakudo/rakudo/issues/1292#issuecomment-348703641

[16:43] *** Zoffix left
[16:44] *** ZzZombo left
[16:47] *** ZzZombo joined
[16:54] *** ctilmes joined
[16:56] <El_Che> https://developers.slashdot.org/story/17/12/02/0343231/perl-perl-6-and-two-application-frameworks-release-2017-advent-calendars?utm_source=rss1.0mainlinkanon&utm_medium=feed

[16:56] <El_Che> First comment hasn't been claimed yet :)

[17:08] <timotimo> didn't we have some kind of decision to have underscores as part of "internalsy" names?

[17:08] *** poohman joined
[17:11] *** someuser joined
[17:12] <teatime> heh, (10!) seconds is exactly 6 weeks.  neat.

[17:13] *** sftp joined
[17:14] <timotimo> hm, 3 * 4 is already 12, and 2 * 12 is 24, that's the "60 seconds per hour" bit

[17:16] <timotimo> um, that's the 24 hours per day bit, of course

[17:16] <timotimo> take 6 and 10 to get the 60 seconds per hour

[17:16] *** sftp left
[17:16] <teatime> that's a neat way of looking at it that did not occur to me.

[17:16] <timotimo> you're left with 4, 5, 7, 8, 9; it's probably easy to figure out how to re-arrange them to get to 6 weeks, but i'm in a tiny hurry

[17:17] <teatime> </nerdsniped>

[17:17] <timotimo> m: (6 * 7 * 24 * 60) / (2 * 3 * 4 * 6 * 10)

[17:17] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "/" in expression "(6 * 7 * 24 * 60) / (2 * 3 * 4 * 6 * 10)" in sink context (line 1)‚ê§¬ª

[17:17] <timotimo> m: say (6 * 7 * 24 * 60) / (2 * 3 * 4 * 6 * 10)

[17:17] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´42‚ê§¬ª

[17:17] <timotimo> m: say 4 * 5 * 7 * 8 * 9

[17:17] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´10080‚ê§¬ª

[17:18] <timotimo> i made a mistake somewhere

[17:18] <timotimo> m: say (6 * 7 * 24 * 60) / (2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10)

[17:18] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´0.016667‚ê§¬ª

[17:18] *** perlpilot_ left
[17:18] <timotimo> so .. not quite?

[17:19] <teatime> wth

[17:19] <teatime> m: say (6 * 7 * 24 * 60 * 60) / (2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10)

[17:19] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´1‚ê§¬ª

[17:19] <timotimo> oh, haha

[17:20] <timotimo> i forgot to go from minutes to hours

[17:20] <timotimo> or equivalently from seconds to minutes

[17:22] *** sftp joined
[17:26] *** nadim left
[17:30] *** nadim joined
[17:38] *** patrickz joined
[17:39] *** patrickz_ left
[17:42] *** patrickz left
[17:43] *** patrickz joined
[17:45] *** llfourn_ joined
[17:45] *** llfourn left
[17:49] *** patrickz_ joined
[17:52] *** patrickz left
[17:54] *** patrickz joined
[17:55] *** patrickz_ left
[17:58] *** patrickz left
[17:59] *** patrickz joined
[18:04] *** cdg left
[18:04] *** patrickz left
[18:05] *** cdg joined
[18:08] *** Zoffix joined
[18:08] <Zoffix> m: say flat [[1,2,3],[4,5,6]]¬ª.<>

[18:08] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´(1 2 3 4 5 6)‚ê§¬ª

[18:08] <Zoffix> wander: ^

[18:09] *** patrickz joined
[18:09] <wander> wow

[18:09] <Zoffix> wander: you just need to decont two inner Arrays. https://perl6advent.wordpress.com/2017/12/02/perl-6-sigils-variables-and-containers/#decont

[18:09] *** cdg left
[18:10] <wander> if only I don't put the stuff decont into a new container

[18:10] <Zoffix> m: say flat ((1,2,3),(4,5,6)) # or not use Arrays in the first place

[18:10] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´(1 2 3 4 5 6)‚ê§¬ª

[18:12] <wander> thanks a lot, looks I didn't read the post attentively :P

[18:12] <Zoffix> You can also write your gather/take version like this: 

[18:12] <Zoffix> m: say flat gather [[1,2,3],[4,5,6]]¬ª.take

[18:12] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´(1 2 3 4 5 6)‚ê§¬ª

[18:12] <Zoffix> But note that that method destroys information from Hashes:

[18:12] <Zoffix> m: say flat gather [[1,2,3],[4,5,6], %(:42foo, :60meow)]¬ª.take

[18:12] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´(1 2 3 4 5 6 42 60)‚ê§¬ª

[18:13] <Zoffix> m: say flat gather [[1,2,3],[4,5,6], %(:42foo, :60meow)].map: *.take # this won't tho

[18:13] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´(1 2 3 4 5 6 foo => 42 meow => 60)‚ê§¬ª

[18:13] *** patrickz left
[18:14] *** patrickz joined
[18:14] <wander> "Hyper operators are defined recursively on nested arrays.", huh

[18:14] <Zoffix> Where's that from?

[18:15] <wander> under https://docs.perl6.org/language/operators#index-entry-hyper_%3C%3C-hyper_%3E%3E-hyper_%C2%AB-hyper_%C2%BB-Hyper_Operators

[18:15] <Zoffix> m: say :foo.^roles

[18:15] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´((Associative))‚ê§¬ª

[18:15] <Zoffix> m: say gather :42foo¬ª.take

[18:15] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´(42)‚ê§¬ª

[18:16] * Zoffix wonders if that's actually a bug :/

[18:16] *** domidumont left
[18:17] <Zoffix> m: say -¬´ [[[1, .5], 2], 3];

[18:17] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´[[[-1 -0.5] -2] -3]‚ê§¬ª

[18:19] <wander> m: say [[1,2,3],[4,5,6]].flatmap(*.self)

[18:19] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´(1 2 3 4 5 6)‚ê§¬ª

[18:19] <wander> interesting

[18:19] <Zoffix> inconsistency; descends into itemized iterables yet method form doesn't

[18:20] <Zoffix> s: &METAOP_HYPER_PREFIX

[18:20] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/4fca94743/src/core/metaops.pm#L519

[18:20] *** patrickz left
[18:21] <Zoffix> s: [], 'dispatch:<hyper>'

[18:21] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/4fca94743/src/core/Mu.pm#L855

[18:21] <Zoffix> s: &HYPER

[18:21] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/4fca94743/src/core/metaops.pm#L529

[18:23] <Zoffix> m: [[[1, [.5, 1]], 2], 3]¬ª.&[-].say

[18:23] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´[[[-1 [-0.5 -1]] -2] -3]‚ê§¬ª

[18:24] <Zoffix> m: [[[-1, [.5, -1]], -2], 3]¬ª.abs.say

[18:24] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´[[[1 [0.5 1]] 2] 3]‚ê§¬ª

[18:24] <Zoffix> .oO( am I misremembering? :S )

[18:24] *** patrickz joined
[18:27] <wander> it reminds me of this guy

[18:27] <wander> m:  [[[1, [.5, 1]], 2], 3]¬ª(&say)

[18:27] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´1sub say (| is raw) { #`(Sub|51541408) ... }‚ê§0.5sub say (| is raw) { #`(Sub|51541408) ... }‚ê§1sub say (| is raw) { #`(Sub|51541408) ... }‚ê§2sub say (| is raw) { #`(Sub|51541408) ... }‚ê§3sub say (| is raw) { #`(Sub|51541408) ... }‚ê§¬ª

[18:27] <Zoffix> I guess I confused .flat not descending into containerized iterables with ¬ª. not descending with nodal callables

[18:28] * teatime tries to figure out what wander's last example is doing

[18:29] *** pmurias left
[18:29] *** kitsunenokenja left
[18:30] <Zoffix> m: [[[1, [.5, 1]], 2], 3]¬ª(&say)

[18:30] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´1sub say (| is raw) { #`(Sub|47003008) ... }‚ê§0.5sub say (| is raw) { #`(Sub|47003008) ... }‚ê§1sub say (| is raw) { #`(Sub|47003008) ... }‚ê§2sub say (| is raw) { #`(Sub|47003008) ... }‚ê§3sub say (| is raw) { #`(Sub|47003008) ... }‚ê§¬ª

[18:30] <Zoffix> oops

[18:30] <Zoffix> m: sub meow ($x, $y) { dd [$x, $y] }; [[[1, [.5, 1]], 2], 3]¬ª(&meow)

[18:30] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´[1, sub meow ($x, $y) { #`(Sub|65895176) ... }]‚ê§[0.5, sub meow ($x, $y) { #`(Sub|65895176) ... }]‚ê§[1, sub meow ($x, $y) { #`(Sub|65895176) ... }]‚ê§[2, sub meow ($x, $y) { #`(Sub|65895176) ... }]‚ê§[3, sub meow ($x, $y) { #`(Sub|65895176) ... }]‚ê§¬ª

[18:30] <Zoffix> m: say (1, 2, 3) ¬ª+¬´ (42)

[18:30] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´Lists on either side of non-dwimmy hyperop of infix:<+> are not of the same length‚ê§left: 3 elements, right: 1 elements‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:30] <Zoffix> m: say (1, 2, 3) ¬ª+¬ª (42)

[18:30] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´(43 44 45)‚ê§¬ª

[18:31] <Zoffix> I'm guessing like this, except meow() instead of `+` and &meow instead of 42

[18:31] * Zoffix &

[18:31] *** Zoffix left
[18:32] <teatime> I def. still don't get it.

[18:33] <buggable> New CPAN upload: PDF-Font-0.1.1.tar.gz by WARRINGD https://cpan.metacpan.org/authors/id/W/WA/WARRINGD/Perl6/PDF-Font-0.1.1.tar.gz

[18:35] *** pmurias joined
[18:36] <TimToady> m:  [[[1, [.5, 1]], 2], 3]¬ª.&say

[18:36] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´1‚ê§0.5‚ê§1‚ê§2‚ê§3‚ê§¬ª

[18:36] *** patrickz_ joined
[18:37] <TimToady> m:  1¬ª(&say)

[18:37] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´1sub say (| is raw) { #`(Sub|60519792) ... }‚ê§¬ª

[18:37] <TimToady> I have no idea what that thinks it's doing...

[18:38] <teatime> welp I no longer feel bad about it :)

[18:38] <TimToady> m:  1(&say)

[18:38] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´No such method 'CALL-ME' for invocant of type 'Int'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:40] <wander> m: my @a = [1,2,3]; @a>>++; say @a # normal use

[18:40] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´[2 3 4]‚ê§¬ª

[18:40] *** patrickz left
[18:40] <wander> note that

[18:41] <wander> m: [1,2,3]>>&say

[18:41] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Malformed postfix‚ê§at <tmp>:1‚ê§------> 3[1,2,3]>>7‚èè5&say‚ê§    expecting any of:‚ê§        postfix‚ê§¬ª

[18:41] <wander> m: [1,2,3]>>(&say)

[18:41] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´1sub say (| is raw) { #`(Sub|60384624) ... }‚ê§2sub say (| is raw) { #`(Sub|60384624) ... }‚ê§3sub say (| is raw) { #`(Sub|60384624) ... }‚ê§¬ª

[18:41] <TimToady> I have no idea what that thinks it's doing...

[18:42] <wander> so it escapes

[18:42] <TimToady> that should be trying to call 1 as a subroutine, passing it &say as the first arg, which should fail

[18:42] <TimToady> m:  1(&say)

[18:42] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´No such method 'CALL-ME' for invocant of type 'Int'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:42] <TimToady> like that

[18:42] <TimToady> say is both being called and used as data somehow

[18:43] <teatime> yar

[18:44] *** noganex left
[18:45] <wander> maybe it trans to say(1, &say)

[18:45] <wander> when >>++, postfix:<++>($a) is called(still 'maybe')

[18:46] *** noganex joined
[18:46] *** cdg joined
[18:46] <TimToady> but (&say) is not a valid postfix, except insofar as it passes &say as an argument to something

[18:47] <TimToady> and that something has to be Callable

[18:47] <TimToady> this is definitely somewhere in the "undefined behavior" realm

[18:47] <wander> yes, so you can see `[1,2,3]>>&say` throws "expecting any of:‚ê§        postfix‚ê§"

[18:48] <wander> however the form (&say) escapes for some reasons

[18:48] <TimToady> m: [1,2,3]¬ª.&say # it requires the .

[18:48] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´1‚ê§2‚ê§3‚ê§¬ª

[18:48] <TimToady> not that you should be using say with hypers in any case

[18:49] <TimToady> since order of evaluation is undefined

[18:49] *** cdg left
[18:49] *** patrickz_ left
[18:49] <TimToady> errands &

[18:49] *** cdg joined
[18:50] *** patrickz joined
[18:51] <wander> m: say [1,2,3]>>(sub {dd @_})

[18:51] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´[1, sub (*@_) { #`(Sub|66679448) ... }]‚ê§[Nil Nil Nil]‚ê§[2, sub (*@_) { #`(Sub|66679448) ... }]‚ê§[3, sub (*@_) { #`(Sub|66679448) ... }]‚ê§¬ª

[18:54] *** cdg left
[18:54] <wander> m: [&say, &say]>>(42)

[18:54] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´No such method 'CALL-ME' for invocant of type 'Int'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:55] <wander> it should be &say(42), however looks like 42.(&say, 42) now

[18:55] <wander> m: [&say, &say]>>.(42) # workaround

[18:55] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´42‚ê§42‚ê§¬ª

[18:55] <teatime> wth

[18:56] <teatime> how does that work?!

[18:56] *** cdg joined
[18:57] <AlexDaniel> ma6ic

[18:58] <teatime> oh, I forgot 42.say works heh

[18:58] <teatime> le whoops

[18:58] <AlexDaniel> that's irrelevant :)

[18:58] <AlexDaniel> m: &say(42)

[18:58] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´42‚ê§¬ª

[18:58] <AlexDaniel> m: &say.(42)

[18:58] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´42‚ê§¬ª

[18:58] <teatime> but isn't it trying to do 42(&say) ?

[18:59] <teatime> er

[18:59] <teatime> ok I just give up

[18:59] *** patrickz_ joined
[19:01] *** patrickz left
[19:04] *** patrickz joined
[19:05] *** kitsunenokenja joined
[19:05] <wander> m: sub f() { say 42 }; [&f, &f]>>();

[19:05] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´===SORRY!===‚ê§Unknown QAST node type NQPMu‚ê§¬ª

[19:06] *** patrickz_ left
[19:06] <wander> s: Grammar

[19:06] <SourceBaby> wander, Something's wrong: ‚ê§ERR: Cannot resolve caller sourcery(Grammar); none of these signatures match:‚ê§    ($thing, Str:D $method, Capture $c)‚ê§    ($thing, Str:D $method)‚ê§    (&code)‚ê§    (&code, Capture $c)‚ê§  in block <unit> at -e line 6‚ê§‚ê§

[19:09] *** patrickz left
[19:14] *** patrickz joined
[19:20] <AlexDaniel> reportable6: list

[19:20] <reportable6> AlexDaniel, https://gist.github.com/22af8503523d183b34178bb0f135a95f

[19:20] <AlexDaniel> reportable6: 2017-12-01T07:33:00Z 2017-12-02T18:00:00Z

[19:20] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[19:20] *** reportable6 left
[19:20] *** reportable6 joined
[19:20] *** ChanServ sets mode: +v reportable6

[19:20] <AlexDaniel> oh gosh please someone fix GH#1278 :)

[19:20] <synopsebot> GH#1278 [open]: https://github.com/rakudo/rakudo/issues/1278 [SEGV] Another SEGV in whateverable

[19:21] <AlexDaniel> reportable6: 2017-12-01T07:33:00Z 2017-12-02T18:00:00Z

[19:21] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[19:21] <reportable6> AlexDaniel, https://gist.github.com/b3b546a1ad9be8eb5081bdd83c199c14

[19:23] <bartolin> for a second I thought, reportable6 responded to your "oh gosh please someone fix ..." with "OK, working on it! This may take up to 40 seconds" :-)

[19:24] <AlexDaniel> ha, you wish‚Ä¶

[19:24] <AlexDaniel> .oO( jnthnable? )

[19:24] <bartolin> lol

[19:25] *** patrickz_ joined
[19:26] *** patrickz left
[19:28] *** Cabanossi left
[19:29] *** comborico1611 joined
[19:30] *** patrickz joined
[19:31] *** patrickz_ left
[19:31] *** Cabanossi joined
[19:33] <TreyHarris> Is there a shorthand way for accepting <st nd rd th> numeric options and merging them so you can do :0th :1st :2nd :3rd fun?

[19:35] *** releasable6 left
[19:35] *** patrickz_ joined
[19:35] *** releasable6 joined
[19:36] *** patrickz left
[19:36] *** unicodable6 left
[19:36] *** unicodable6 joined
[19:36] *** ChanServ sets mode: +v unicodable6

[19:36] *** bisectable6 left
[19:36] *** committable6 left
[19:36] *** bisectable6 joined
[19:36] *** ChanServ sets mode: +v bisectable6

[19:36] *** committable6 joined
[19:36] *** eliasr joined
[19:39] <AlexDaniel> TreyHarris: I think the answer is no: https://github.com/rakudo/rakudo/blob/5929887c770a41cb034b1f772a460f03a6c5062d/src/core/Str.pm#L1042-L1066

[19:42] <TreyHarris> AlexDaniel: And I think it's yes?

[19:42] <TreyHarris> one sec, checking

[19:43] <AlexDaniel> m: sub foo(:st(:$nd)) { say $nd }; say foo :2nd

[19:43] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´2‚ê§True‚ê§¬ª

[19:43] <AlexDaniel> m: sub foo(:st(:$nd)) { say $nd }; say foo :1st

[19:43] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´1‚ê§True‚ê§¬ª

[19:44] <AlexDaniel> the syntax is backwards so you can't alias more than one it seems?

[19:44] <TreyHarris> m: sub ordinated( :st(:nd(:rd(:th(:$num)))) ) { $num //= "Nothing"; say "I got $num."  }; ordinated(:0th); ordinated(:1st); ordinated(:2nd); ordinated(:3rd); ordinated(:4th)

[19:44] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´I got 0.‚ê§I got 1.‚ê§I got 2.‚ê§I got 3.‚ê§I got 4.‚ê§¬ª

[19:45] <TreyHarris> You just can't variablize the last one unlize there are just two.

[19:45] <TreyHarris> Uh.... optionize the variable

[19:45] <TreyHarris> Er, mumblize the mumble

[19:45] <AlexDaniel> :O

[19:47] <AlexDaniel> this is awesome

[19:50] <TreyHarris> m: sub ordinated ( :st(:nd(:rd(:th(:$num = -1 )))) ) { say "I got $num."  }; ordinated(:0th); ordinated(:1st); ordinated(:2nd); ordinated(:3rd); ordinated(:4th)

[19:51] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse named parameter; couldn't find right parenthesis‚ê§at <tmp>:1‚ê§------> 3sub ordinated ( :st(:nd(:rd(:th(:$num7‚èè5 = -1 )))) ) { say "I got $num."  }; ord‚ê§¬ª

[19:51] <AlexDaniel> m: sub ordinated ( :st(:nd(:rd(:th(:$num))))=-1 ) { say "I got $num."  }; ordinated(:0th); ordinated(:1st); ordinated(:2nd); ordinated(:3rd); ordinated(:4th); ordinated()

[19:51] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´I got 0.‚ê§I got 1.‚ê§I got 2.‚ê§I got 3.‚ê§I got 4.‚ê§I got -1.‚ê§¬ª

[19:53] <TreyHarris> AlexDaniel++

[19:53] <jnthn> m: sub ordinated(:st(:nd(:rd(:th($num))))) { say $num }; ordinated(:1th)

[19:53] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´1‚ê§¬ª

[19:53] <TreyHarris> I coulda sworn I tried that first

[19:53] <jnthn> m: sub ordinated(:st(:nd(:rd(:th($num))))) { say $num }; ordinated(:1num)

[19:53] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´Unexpected named argument 'num' passed‚ê§  in sub ordinated at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[19:53] <jnthn> Note that if you omit the : before $num then it isn't one of the exposed names

[19:54] <jnthn> You can in fact do this any time you want to have one external name for a named parameter but put it into a variable of a different name

[19:54] <AlexDaniel> https://github.com/perl6/doc/issues/1696

[19:56] <TreyHarris> oh, duh, I did try it, but I tried to name it "ordinated-2", which isn't a legal sub name. :-P

[19:56] <AlexDaniel> m: sub ordinated ( :st(:rd(:th(:$nd)))=-1 ) { say "I got $nd."  }; ordinated(:0th); ordinated(:1st); ordinated(:2nd); ordinated(:3rd); ordinated(:4th); ordinated()'

[19:56] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3ated(:3rd); ordinated(:4th); ordinated()7‚èè5'‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§        statement ‚Ä¶¬ª

[19:56] <AlexDaniel> m: sub ordinated ( :st(:rd(:th(:$nd)))=-1 ) { say "I got $nd."  }; ordinated(:0th); ordinated(:1st); ordinated(:2nd); ordinated(:3rd); ordinated(:4th); ordinated()

[19:56] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´I got 0.‚ê§I got 1.‚ê§I got 2.‚ê§I got 3.‚ê§I got 4.‚ê§I got -1.‚ê§¬ª

[19:57] <jnthn> That's another way to avoid an unexpected bonus name for it, yes :)

[19:58] <AlexDaniel> maybe it'd make sense to support something like :st:nd:rd:th($num)

[19:58] <ctilmes> Should :3st be an error?

[19:58] <TreyHarris> jnthn: "bonus name"? what's the "bonus name"?

[19:58] <AlexDaniel> TreyHarris: ordinated(:32num)

[19:59] <TreyHarris> ctilmes: no, specifically for the benefit of non-English-speakers, th/st/rd/nd are interchangeable

[19:59] <jnthn> TreyHarris: If you do sub foo(:nd(:st(:$num))) { } then you can pass it as :num($value) too

[19:59] <jnthn> TreyHarris: Make it just sub foo(:nd(:st($num))) { } and the $num name is purely for internal use

[20:00] <wander> m: say :6lang

[20:00] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´Unexpected named argument 'lang' passed‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:00] <TreyHarris> jnthn++ I think in an effort to be pithy, the docs leave out examples like that. Thanks

[20:00] <jnthn> .oO( Well, that's a pithy )

[20:00] <wander> m: (:6lang).say

[20:00] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´lang => 6‚ê§¬ª

[20:01] <TreyHarris> ctilmes: I think that was specifically mentioned in Apocalypse <mumble> in 2002

[20:02] <TreyHarris> I know this because I can remember the desk I was sitting in when I read that and thought, "ah, makes sense"

[20:02] <AlexDaniel> aliases are not even documented I think. Maybe a little bit in https://docs.perl6.org/language/functions#sub_MAIN

[20:02] <wander> m: (:6lang).say; (:perl6).say

[20:02] <camelia> rakudo-moar f768623d9: OUTPUT: ¬´lang => 6‚ê§perl6 => True‚ê§¬ª

[20:03] <TreyHarris> AlexDaniel: re your issue, is that an faq, or for a useful example of aliasing in functions.pod6? I'll take the issue and write it up

[20:04] <AlexDaniel> TreyHarris: I'd say aliasing should be documented, and this can be one of the examples

[20:04] <TreyHarris> (Though as an FAQ it's an easy add, for functions we should add a bit about aliases.)

[20:04] <TreyHarris> AlexDaniel: agreed.

[20:05] <AlexDaniel> TreyHarris: also this https://docs.perl6.org/language/functions#sub_MAIN should probably link to that newly written section

[20:05] *** tailgate joined
[20:05] <TreyHarris> AlexDaniel: yup, saw that, thanks.

[20:07] *** mson joined
[20:07] <TreyHarris> Ack!

[20:07] <TreyHarris> AlexDaniel: Meant to cancel my comment since you just added the same, but closed the issue by mistake

[20:08] *** comborico1611 left
[20:09] *** eliasr left
[20:10] <squashable6> üçï AlexDaniel++ opened issue ‚ÄúProposal: easier syntax for multiple param aliases‚Äù: https://github.com/rakudo/rakudo/issues/1293

[20:10] <squashable6> üçï AlexDaniel++ labeled issue ‚ÄúProposal: easier syntax for multiple param aliases‚Äù: https://github.com/rakudo/rakudo/issues/1293

[20:11] *** donaldh left
[20:11] *** eliasr joined
[20:11] *** donaldh_ joined
[20:11] <TreyHarris> AlexDaniel: are lang-spec issues now going straight to rakudo? I was ill and dropped out of actively monitoring things for a few months

[20:11] *** patrickz joined
[20:12] <TreyHarris> (Referring to the rakudo issue mentioned just now, 1293)

[20:12] <AlexDaniel> TreyHarris: previously they went to RT, so now that we're using rakudo/issues as an alternative to that, yeah.

[20:12] <AlexDaniel> TreyHarris: in an ideal world we'd want them to be on roast/issues

[20:12] *** donaldh_ is now known as donaldh

[20:12] <TreyHarris> AlexDaniel++ thanks.

[20:13] <TreyHarris> Before I start integrating this, anyone written a POD6 editing mode for any common editor? Not that I need it, just always like to try such things, especially if I've been away awhile.

[20:14] *** patrickz_ left
[20:19] <TreyHarris> AlexDaniel: And while I'm trying to get catch up, is there a simple-summary place I can read to catch up to the ecosystem/CPAN deal now as compared to, say, the begininng of the year (when we'd create a package with mi6, push it up to you own repo, and submit a link to perl6/ecosystem)?

[20:20] <TreyHarris> I was nearly done with a package that I need to finish but need to update it first

[20:21] <TreyHarris> Can we get squashable6 to report an perl6/doc issues too?

[20:21] <Herby_> I think Zef is broke on my Windows 10 running 2017.10: https://gist.github.com/sylints/ec6dd9aece9e86b6ef2ddc3013efe5da

[20:21] <Herby_> any ideas?

[20:21] <Herby_> I can't install modules

[20:22] *** wander left
[20:26] <TreyHarris> Herby_: https://github.com/ugexe/zef/issues/213 ?

[20:28] <AlexDaniel> TreyHarris: this particular squashathon is not about doc tickets, so it doesn't report stuff about the doc repo. https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day and https://github.com/rakudo/rakudo/wiki/MOLD-Removal-SQUASHathon

[20:29] <AlexDaniel> TreyHarris: as for the ecosystem, I don't think much changed, but see this: https://docs.perl6.org/language/modules.html#Upload_your_Module_to_CPAN

[20:29] <Herby_> TreyHarris: thats why they pay you the big bucks.  That fixed the problem.  Thanks!

[20:30] <TreyHarris> AlexDaniel: Well, that section of modules.pod6 was written in the past month, so that counts :-)  Thanks

[20:31] <TreyHarris> Herby_: they do? Where do I collect my check?

[20:31] <TreyHarris> :-D

[20:31] *** pmurias left
[20:32] *** yqt joined
[20:32] *** benchable6 left
[20:33] *** benchable6 joined
[20:33] *** ChanServ sets mode: +v benchable6

[20:33] <Herby_> :)

[20:39] <squashable6> üçï zoffixznet++ wrote a comment on ‚ÄúProposal: easier syntax for multiple param aliases‚Äù: https://github.com/rakudo/rakudo/issues/1293#issuecomment-348718558

[20:42] <TreyHarris> I thought the autogenerated html files like in routine/ contained the source pod6 file(s) in comments, but I don't see them anymore... is there a place they've migrated, or do you just have to figure it out yourself?

[20:43] *** lizmat left
[20:44] *** Cabanossi left
[20:46] *** Cabanossi joined
[20:46] *** kaare_ joined
[20:46] *** pdcawley left
[20:46] <squashable6> üçï treyharris++ wrote a comment on ‚ÄúProposal: easier syntax for multiple param aliases‚Äù: https://github.com/rakudo/rakudo/issues/1293#issuecomment-348718976

[20:46] <squashable6> üçïüçïüçï  First contribution by treyharris++! ‚ô•

[20:47] <TreyHarris> squashable6: ü§©

[20:47] <squashable6> TreyHarris, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Squashable

[20:47] <TreyHarris> heh

[20:49] <AlexDaniel> buggable: pizza TreyHarris

[20:49] <buggable> TreyHarris, enjoy this slice of Margherita pizza, my friend! Yummy üçï

[20:51] <Herby_> is there a way to what functionality the bots in this channel have?

[20:51] <Herby_> for instance, is there a bot that return perl 6 modules that fit a tag?

[20:51] <Herby_> *is there a way to see

[20:52] <Morfent> i think i might port net::dns to perl 6

[20:54] <TreyHarris> Morfent: it's only 5 years old, from the CPAN history? That really surprises me, I feel like I've known about it forever

[20:55] * TreyHarris realizes that "only 5 years old" is a ridiculous statement for a software library, but for important CPAN modules, it's not

[20:59] <AlexDaniel> Herby_: https://github.com/perl6/doc/issues/711#issuecomment-235414744

[21:00] <AlexDaniel> Herby_: as far as I know only whateverables have reasonable documentation

[21:02] <Herby_> AlexDaniel: thanks

[21:05] *** pdcawley joined
[21:23] <squashable6> üçï zoffixznet++ opened issue ‚ÄúPassing named args witho‚Ä¶‚Äù: https://github.com/rakudo/rakudo/issues/1294

[21:25] <squashable6> üçï zoffixznet++ opened issue ‚ÄúLTA error with named arg‚Ä¶‚Äù: https://github.com/rakudo/rakudo/issues/1295

[21:25] <squashable6> üçï zoffixznet++ labeled issue ‚ÄúLTA error with named arg‚Ä¶‚Äù: https://github.com/rakudo/rakudo/issues/1295

[21:31] *** someuser left
[21:37] <Herby_> greppable: ftp

[21:37] <Herby_> greppable6: ftp

[21:40] *** greppable6 joined
[21:40] *** ChanServ sets mode: +v greppable6

[21:40] <AlexDaniel> greppable: ftp

[21:40] <greppable6> AlexDaniel, https://gist.github.com/13dfebd0fe7798dac51cfa3b89a371d1

[21:41] <AlexDaniel> Herby_: ‚Üë some bots are off due to https://github.com/rakudo/rakudo/issues/1280

[21:42] <Herby_> gotcha

[21:44] *** rindolf left
[21:48] <AlexDaniel> greppable: \bftp\b

[21:48] <greppable6> AlexDaniel, https://gist.github.com/4d1c6d7b0251dadc11e24e37d54086e5

[21:57] <squashable6> üçï zoffixznet++ wrote a comment on ‚ÄúProposal: easier syntax for multiple param aliases‚Äù: https://github.com/rakudo/rakudo/issues/1293#issuecomment-348723095

[21:59] *** eliasr left
[22:10] <DrForr> I've got to get to bed, but here's a suggestion for the Test module - Add 'multi subtest( Hash, Str ) { note "Subtests without a body are not recommended" }' as I keep accidentally writing subtest { #'() }, 'to be filled-in'; and the error is somewhat nonintuitie.

[22:10] <yoleaux> 1 Dec 2017 22:30Z <AlexDaniel> DrForr: Please check RT#125299 and do something with it. I really don't understand what has to be done in order to close it. If it's just that the line number of the starter has to be mentioned, then it was done in https://github.com/rakudo/rakudo/commit/3ede49cd7ab257a0f9dccebb24fa4f965336147c

[22:10] <DrForr> O hai. Will check in a second...

[22:11] *** comborico1611 joined
[22:11] *** comborico1611 left
[22:13] *** sena_kun left
[22:15] <DrForr> .tell AlexDaniel RT tels me I have no permissions to viiew that ticket, Please feel free to close it.

[22:15] <yoleaux> DrForr: I'll pass your message to AlexDaniel.

[22:15] <AlexDaniel> .

[22:15] <yoleaux> 22:15Z <DrForr> AlexDaniel: RT tels me I have no permissions to viiew that ticket, Please feel free to close it.

[22:15] <AlexDaniel> RT#125299

[22:15] <AlexDaniel> wtf where did the ticket go

[22:16] <DrForr> I can view it in the public tracker, I can't view it when logged in.

[22:16] <AlexDaniel> https://rt.perl.org/Ticket/Display.html?id=125299

[22:16] <AlexDaniel> hmmm

[22:17] <DrForr> Likely because of how I entered it, IE. via email. If you have perms to edit it, feel free to close it and paste this log for explanation.

[22:19] <geekosaur> that's kinda a thing with rt.perl.org, yeh

[22:19] <geekosaur> annoying af

[22:20] *** dmaestro joined
[22:23] <DrForr> Blasted keyboard. Must get to bed here, like I said you hav my blanket permission to do whatever you like with the bug.

[22:23] <El_Che> funny, bed and blanket in same sentence

[22:24] <DrForr> And the same room in my case. Brand new duvet too.

[22:25] <El_Che> DrForr: cold in Prague?

[22:26] <DrForr> It was snowing this afternoon; I have a loft space here, and the (upward-facing) windows were covered in frost.

[22:29] <DrForr> Okay, bedtime it is. G'night, good luck with RT.

[22:34] *** lizmat joined
[22:39] <AlexDaniel> DrForr: marked as ÔΩ¢testneededÔΩ£

[22:46] *** wamba left
[22:47] *** natrys left
[22:53] *** kitsunenokenja left
[22:53] <squashable6> üçï jnthn++ wrote a comment on ‚ÄúProposal: easier syntax for multiple param aliases‚Äù: https://github.com/rakudo/rakudo/issues/1293#issuecomment-348726245

[22:56] <Herby_> rookie question incoming...

[22:57] <Herby_> how should module naming conventions work? sometimes I see Net::FTP convention

[22:57] <Herby_> other times I just see FTP

[22:57] <Herby_> why one or the other?

[22:57] <Herby_> If I wanted to create a module for the oxford dictionary api, should I name it Oxford::Dictionary? or just Dictionary

[22:58] <Herby_> that seems to be something Python avoids, for one reason or another

[22:58] <ctilmes> Or Dictionary::Oxford so later someone else makes a similar API to Dictionary::Foo

[22:58] <Herby_> ah

[22:58] <Herby_> good point

[22:59] *** Cabanossi left
[23:00] <Herby_> one more dumb question: does the file structure matter with the naming convention used?

[23:01] *** donaldh left
[23:01] <Herby_> If I use Dictionary::Oxford, does my file structure need to be:  ./lib/dictionary/oxford.pm6

[23:01] <ctilmes> Perl5 makes a concerted effort to maintain organization of module hierarchies.  It kind of failed at that.  IMHO, it is much less important in Perl 6 world

[23:01] <Herby_> or should it be ./lib/oxford.pm6

[23:01] *** Cabanossi joined
[23:02] <ctilmes> Convention would be to match file tree to name scheme, but it actually doesn't have to.

[23:02] <Herby_> thats what I assumed but I never knew for sure.

[23:02] <Herby_> thanks

[23:04] *** dmaestro left
[23:07] <ctilmes> You have to put it somewhere it can be found in the manner you cause it to be searched for.

[23:07] <jnthn> If you want it to work with -I then you need to follow the directory structure

[23:08] <ctilmes> https://docs.perl6.org/language/modules#Finding_Modules

[23:08] <jnthn> If you don't care about that (though it'd make development a bit "fun" :P) then one doesn't *have* to follow the convention, however :)

[23:09] <Herby_> gotcha

[23:09] <Herby_> thanks for that link ctilmes 

[23:10] <jnthn> As ctilmes said, though, trying to build some neat hierarchy isn't something we worry about so much in the Perl 6 world. Searching and tags have won as ways of people fidning stuff.

[23:12] *** kitsunenokenja joined
[23:12] <Herby_> makes sense. as a beginner I just want to make sure I stick to any standard conventions if there are some

[23:13] *** ShalokShalom joined
[23:13] <AlexDaniel> .tell wander good news!!! I think your RT comment went through

[23:13] <yoleaux> AlexDaniel: I'll pass your message to wander.

[23:13] <AlexDaniel> squashable6: status

[23:13] <squashable6> AlexDaniel, üçïüçï SQUASHathon is in progress! The end of the event in ‚âà12 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[23:13] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/d14b219452916bb4013323b4b84c73dc

[23:21] *** Aaronepower left
[23:28] <timotimo> so ... the official csv games use 100x more lines in their hello.csv than we do in our test-t

[23:28] <timotimo> but almost all of them are faster than rakudo is at the task

[23:29] * geekosaur was going to say "they're also probably 100x faster" :p

[23:29] <timotimo> yup.

[23:29] <geekosaur> we... have a ways to go

[23:30] <timotimo> the slowest seems to be ruby, which takes about 9.3 seconds

[23:30] <Herby_> and what is p6 at?

[23:31] <timotimo> takes just below 3 seconds now

[23:32] <timotimo> maybe we want to have a version based on libcsv, too :P

[23:32] <timotimo> the luajit version uses that adn clocks in at just below a second

[23:34] *** dmaestro joined
[23:36] *** mson left
[23:40] <timotimo> since the input file is 23 megs big, taking a second means you're doing 23 megs per second 

[23:40] <timotimo> at that point you might as well be bottlenecked by spinning rust and filesystem :P

[23:42] <timotimo> our csv library spends barely any time doing GC, that is good

[23:43] <timotimo> i'm refering to percentage-wise, though

[23:43] <timotimo> 14 seconds in total

[23:43] <timotimo> the gc runs 9950 times

[23:46] <timotimo> we're still spending 20.7% of total time doing splitting

[23:47] <timotimo> 3.46% of that is sorting the indices of different split-pieces found in the string (adds up to 13 secodns)

[23:47] <Herby_> This API requires headers in the get request.  app_id = 123, app_key = xyz .  How do I use those in an HTTP::UserAgent get request?

[23:47] <Herby_> I'm poking around the documentation but I can't quite figure it out

[23:50] *** yqt left
[23:51] <timotimo> it looks like headers get put as named arguments into the call

[23:51] <timotimo> i see an example with post rather than get that passes X-Foo => "foodle"

[23:52] <timotimo> so it's probably the same way for get

[23:52] *** kitsunenokenja left
[23:54] <Herby_> something like: my %response = $ua.get($url, {app_key => $app_key, app_id => $app_id}) ?

[23:55] <timotimo> no, without the braces

[23:56] <timotimo> i think what you pass as a hash there would be form data for post requests and such

[23:58] <squashable6> üçï vendethiel++ wrote a comment on ‚ÄúProposal: easier syntax for multiple param aliases‚Äù: https://github.com/rakudo/rakudo/issues/1293#issuecomment-348729378

[23:58] <squashable6> üçïüçïüçï  First contribution by vendethiel++! ‚ô•

[23:58] <Herby_> timotimo: that works. thank you

[23:59] <timotimo> YW

