[00:00] <samcv> which is why it's 153 times slower than nqp::index

[00:00] <MasterDuke> could try turning on tracing, or line coverage

[00:00] <samcv> it does call nqp::index but idk what else it does...

[00:01] <MasterDuke> or do a perf profile

[00:02] <samcv> what i assumed though is that moarvm would compile the regex. and then when ran it would just have to do a few ops

[00:02] *** mcmillhj joined
[00:02] <samcv> but that was just my assumption

[00:06] <samcv> perf is so weird. i did perf record -a. then run `perf annotate perf.data` and it tells me no symbols

[00:06] <samcv> i'll try perl6-callgrind-m

[00:06] *** mcmillhj left
[00:08] *** pilne joined
[00:09] <MasterDuke> did you build moarvm with --debug=3?

[00:09] <samcv> yes

[00:09] <samcv> it seems to load if i just do `perf annotate` but shows a lot of cpu instructions

[00:09] <MasterDuke> i do `perf record -g --call-graph dwarf`

[00:10] <MasterDuke> and then usually `perf report --call-graph=none --no-children`

[00:11] <samcv> ah ok now i have some info

[00:11] <samcv> though i do get: Failed to open /tmp/perf-16739.map, continuing without symbols

[00:12] <samcv> none of this stuff looks like stuff i can fix

[00:13] <MasterDuke> what are the top things?

[00:13] <samcv> https://gist.github.com/samcv/3b0c2c2dbce9afebcea4c3192ff00294

[00:13] <samcv> MVM_string_index is 0.01% of the cpu usage

[00:15] *** samcv left
[00:15] *** samcv joined
[00:16] *** cdg joined
[00:16] *** pierre_ joined
[00:19] <MasterDuke> it's interesting to compare to putting that same string as a literal in the regex

[00:19] <samcv> well it's a pretty long string but i could do that

[00:19] <MasterDuke> no, $a

[00:19] *** char_var[buffer] left
[00:20] <samcv> oh yeah

[00:20] *** cdg left
[00:21] <MasterDuke> none of the frame and alloc and gc functions in the top

[00:21] <samcv> well this seems to be a pretty big problem

[00:21] <samcv> and at least it makes me very happy that my work hasn't been in vain :P

[00:21] <samcv> just a problem with having it be a variable

[00:22] <samcv> 6

[00:22] *** wamba left
[00:32] *** skids left
[00:36] *** leont left
[00:36] *** skids joined
[00:45] *** Cabanossi left
[00:46] *** newb2 joined
[00:46] <newb2> The documentation embedded in the perl6-readline file lib/Readline.pm contains

[00:46] <newb2> numerous instances of the construction 'C<something>' where "something" is a perl6 scalar,

[00:46] <newb2> function name or function parameter; plus a few instances of the construction 'L<something>' where

[00:47] <newb2> "something" is one or more words of ordinary English.  What do these two things represent?

[00:47] <samcv> they are Pod6

[00:47] <samcv> https://docs.perl6.org/language/pod

[00:47] *** Cabanossi joined
[00:47] <samcv> C<blah> is like `blah` in markdown. and L< > is for linking things

[00:48] <newb2> C<blah> executes the blah instruction? 

[00:48] <samcv> MasterDuke, can you help me with this? https://gist.github.com/ecacbea31a89e14d5d0b1dd41dfe118e

[00:48] <samcv> m: https://gist.github.com/ecacbea31a89e14d5d0b1dd41dfe118e

[00:48] <camelia> rakudo-moar 593fa5: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3https:7⏏5//gist.github.com/ecacbea31a89e14d5d0b1d␤    expecting any of:␤        colon pair␤»

[00:48] <samcv> evalable6, https://gist.github.com/ecacbea31a89e14d5d0b1dd41dfe118e

[00:48] <evalable6> samcv, It looks like a URL, but mime type is ‘text/html; charset=utf-8’ while I was expecting something with ‘text/plain’ or ‘perl’ in it. I can only understand raw links, sorry.

[00:49] <geekosaur> newb2, markdown, not shell. displays as code

[00:49] <MasterDuke> evalable6: https://gist.github.com/samcv/ecacbea31a89e14d5d0b1dd41dfe118e/raw/677fc4bdba69697821aeaeadfef0d9539597a77a/string_bench.p6

[00:49] <evalable6> MasterDuke, Successfully fetched the code from the provided URL.

[00:49] <evalable6> MasterDuke, rakudo-moar 593fa5f87: OUTPUT: «Cannot test 593fa5f87fcc97cf3cbafd62f34b3119c9b1fbe3 (Commit exists, but a perl6 executable could not be built for it)»

[00:49] <geekosaur> like github

[00:49] <samcv> good job evalable6 

[00:50] <MasterDuke> committable6: HEAD^^ https://gist.github.com/samcv/ecacbea31a89e14d5d0b1dd41dfe118e/raw/677fc4bdba69697821aeaeadfef0d9539597a77a/string_bench.p6

[00:50] <committable6> MasterDuke, Successfully fetched the code from the provided URL.

[00:50] <committable6> MasterDuke, ¦HEAD^^: «Test 1: 0.0059511 s␤Cannot resolve caller Real(Block: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at /tmp/Jx3rPKvSs6 line 4␤ «exit code = 1»»

[00:50] <samcv> this error makes no sense to me

[00:50] <samcv> i'm not sure what is triggering this.

[00:51] <MasterDuke> maybe try adding a `->` before the block you pass to test-it?

[00:53] <samcv> ok the problem is $b2

[00:53] <samcv> my $b2 = { 0 ≤ $_ }; # if i pass $b1 to both tests then it works

[00:53] <samcv> it works fine if i do it manually though

[00:53] <samcv> m: my $b2 = { 0 ≤ $_ }; $b2(-1).say; $b2(10).say

[00:53] <camelia> rakudo-moar 593fa5: OUTPUT: «False␤True␤»

[00:57] *** cdg joined
[00:59] *** Sgeo left
[01:01] *** cdg left
[01:01] <MasterDuke> samcv: `$rtrn = &code;` need to add () to  &code

[01:05] <newb2> samcv: OK now understand what these constructions are for in the Pod  'language'

[01:05] <newb2> samcv: But "p6doc Readline" doesn't render C<something> at all, just strips away the 'C<' and the '>'

[01:05] <newb2> samcv: Is there a way to render Pod documentation into something other than text, say ps or pdf?

[01:05] <newb2> samcv: Otherwise I see no purpose for these constructions

[01:06] <samcv> you can render to markdown

[01:06] *** raschipi joined
[01:06] <samcv> i've contributed some of the code for the Markdown generator. but POD is meant so you can intersperse documentation and code

[01:08] *** mst joined
[01:08] <newb2> Such as the markdown.deb 'markdown' ?

[01:08] <samcv> newb2, install Pod::To::Markdown (https://github.com/softmoth/perl6-pod-to-markdown)

[01:08] <samcv> well there is a PDF and html render too

[01:08] <newb2> Very good.

[01:09] <samcv> Pod::Render contains an executable that makes it easy to convert from Pod to html or markdown or pdf

[01:10] <samcv> and depends on the different modules which render as those formats and then you only have to learn one command and not have to work with the other modules manually since they have different semantics

[01:13] <newb2> samcv: Sounds better than Pod::to::Html {{:-/)

[01:13] <newb2> Am investigating now .. Thanks 10000x

[01:13] *** newb2 left
[01:19] *** cdg joined
[01:24] *** cdg left
[01:41] *** ijneb left
[01:46] *** ilbot3 left
[01:51] *** ilbot3 joined
[01:51] *** ChanServ sets mode: +v ilbot3

[01:52] *** pierre_ left
[01:54] *** cdg joined
[01:55] *** bstamour joined
[01:56] <AlexDaniel> MasterDuke: huh? HEAD is broken?

[01:56] <AlexDaniel> e: say 42

[01:56] <evalable6> AlexDaniel, rakudo-moar 593fa5f87: OUTPUT: «Cannot test 593fa5f87fcc97cf3cbafd62f34b3119c9b1fbe3 (Commit exists, but a perl6 executable could not be built for it)»

[01:57] <AlexDaniel> I deleted the build to give it another go, but both travis and appveyor say that it is broken on HEAD

[01:57] <geekosaur> m: say 1

[01:57] <camelia> rakudo-moar 593fa5: OUTPUT: «1␤»

[01:57] <geekosaur> not sure what's up there

[01:58] <AlexDaniel> or, maybe not… travis is still yellow actually

[01:58] <AlexDaniel> c: HEAD^ say 42

[01:58] <committable6> AlexDaniel, ¦HEAD^: «42»

[02:01] <AlexDaniel> ah, I see

[02:02] <AlexDaniel> NQP revision in rakudo was bumped before the right commit to nqp was pushed

[02:02] <AlexDaniel> so both appveyor and whateverable failed

[02:02] <AlexDaniel> e: say 42

[02:02] <evalable6> AlexDaniel, rakudo-moar 593fa5f87: OUTPUT: «42»

[02:02] <AlexDaniel> there we go

[02:03] <AlexDaniel> (and camelia does not update so often so by the time it started building it everything was fine)

[02:03] <AlexDaniel> mystery solved!

[02:05] <mspo> is 08 out, then?

[02:06] *** bstamour left
[02:06] *** pierre_ joined
[02:07] *** ufobat_ joined
[02:07] <AlexDaniel> mspo: yes, more than two days ago actually

[02:10] *** ufobat left
[02:15] <AlexDaniel> m: say $*ARGFILES.slurp

[02:15] <camelia> rakudo-moar 593fa5: OUTPUT: «»Wann treffen wir drei wieder zusamm?«␤   »Um die siebente Stund‘, am Brückendamm.«␤     »Am Mittelpfeiler.«␤         »Ich lösche die Flamm.«␤ »Ich mit«␤␤         »Ich komme vom Norden her.«␤        »Und ich vom Süden.«…»

[02:22] *** Prgall joined
[02:27] *** ShalokShalom left
[02:31] *** pierre_ left
[02:35] *** pierre_ joined
[02:35] *** benchable6 left
[02:35] *** committable6 left
[02:35] *** bloatable6 left
[02:35] *** coverable6 left
[02:35] *** evalable6 left
[02:35] *** Prgall left
[02:35] *** noganex joined
[02:38] *** noganex_ left
[02:43] *** Sgeo joined
[02:44] *** MasterDuke left
[02:45] *** Cabanossi left
[02:46] *** MasterDuke joined
[02:47] *** Cabanossi joined
[02:47] *** maettu joined
[03:00] *** pgal_pug joined
[03:00] *** BenGoldberg left
[03:08] *** pgal_pug left
[03:13] *** pgal_pug joined
[03:41] *** araujo left
[03:43] *** raschipi left
[03:44] *** Sgeo left
[03:45] *** bloatable6 joined
[03:45] *** ChanServ sets mode: +v bloatable6

[03:45] *** benchable6 joined
[03:45] *** bisectable6 joined
[03:45] *** coverable6 joined
[03:45] *** committable6 joined
[03:45] *** evalable6 joined
[03:45] *** unicodable6 joined
[03:45] *** ChanServ sets mode: +v evalable6

[03:45] *** ChanServ sets mode: +v unicodable6

[03:45] *** releasable6 joined
[03:45] *** statisfiable6 joined
[03:45] *** ChanServ sets mode: +v statisfiable6

[03:49] *** Sgeo joined
[04:00] *** Cabanossi left
[04:01] *** Cabanossi joined
[04:02] *** espent left
[04:10] *** cdg left
[04:23] *** AnotherNick joined
[04:43] *** xtreak joined
[04:54] *** xtreak left
[04:56] *** skids left
[04:58] *** skids joined
[05:09] *** mr-foobar joined
[05:18] *** snarkyboojum joined
[05:26] *** u-ou- joined
[05:26] <u-ou-> hi

[05:26] <u-ou-> I had too much coffee

[05:26] *** khw left
[05:27] <teatime> I know that feel, bro.

[05:28] <u-ou-> is there a tool like perlbrew which will let me install 6 in my home directory without sudo?

[05:30] <teatime> yar, rakudobrew

[05:31] <teatime> http://rakudo.org/how-to-get-rakudo/#Installing-Rakudo-Star-Source

[05:31] <u-ou-> thank you

[05:35] *** xtreak joined
[05:35] *** espadrine joined
[05:36] *** skids left
[05:38] *** pilne left
[05:39] *** xtreak left
[05:41] *** hhhh joined
[05:41] *** u-ou- left
[05:41] *** pgal_pug left
[05:42] *** hhhh left
[05:43] *** pierre_ left
[05:45] *** Cabanossi left
[05:46] *** Cabanossi joined
[05:50] *** nadim joined
[05:50] *** u-ou- joined
[05:52] <timotimo> 7i believe perlbrew can also build rakudo for you

[05:53] *** xtreak joined
[05:56] *** u-ou- left
[05:57] *** xtreak left
[06:00] *** renormalist joined
[06:01] *** u-ou- joined
[06:05] *** nadim left
[06:07] *** ufobat_ left
[06:10] *** cdg joined
[06:14] *** cdg left
[06:15] *** wamba joined
[06:26] *** AnotherNick left
[06:27] *** darutoko joined
[06:29] *** nadim joined
[06:31] *** lowbro joined
[06:31] *** lowbro left
[06:31] *** lowbro joined
[06:33] *** kshannon joined
[06:38] *** dakkar joined
[06:38] *** pierre_ joined
[06:39] * stmuk_ prepares to fly to .ch

[06:39] *** u-ou- left
[06:39] *** stmuk_ is now known as stmuk

[06:41] *** u-ou- joined
[06:44] *** Cabanossi left
[06:46] *** Cabanossi joined
[06:47] *** eroux joined
[06:47] *** domidumont joined
[06:52] *** domidumont left
[06:53] *** domidumont joined
[06:53] *** u-ou- left
[06:55] *** snarkyboojum left
[06:58] *** espadrine left
[07:01] *** pierre_ left
[07:01] *** lizmat left
[07:01] *** astj left
[07:02] *** astj joined
[07:04] *** astj left
[07:04] *** astj joined
[07:22] *** ShalokShalom joined
[07:23] *** AnotherNick joined
[07:28] *** snarkyboojum joined
[07:29] *** snarkyboojum left
[07:37] *** ufobat_ joined
[07:40] *** llfourn joined
[07:41] *** abraxxa joined
[07:48] <El_Che> hello perl6!

[07:57] *** rindolf joined
[08:05] *** nattefrost joined
[08:05] *** jonas1 joined
[08:09] *** TEttinger left
[08:09] *** cdg joined
[08:10] *** AlexDaniel left
[08:10] *** cdg left
[08:11] *** emeric joined
[08:11] *** cdg joined
[08:11] *** xtreak joined
[08:12] *** cdg_ joined
[08:15] *** Cabanossi left
[08:15] *** cdg left
[08:15] *** xtreak left
[08:16] *** Cabanossi joined
[08:16] *** cdg_ left
[08:18] *** zakharyas joined
[08:21] *** mr-foobar left
[08:21] *** darutoko left
[08:22] *** cdg joined
[08:23] *** mr-foobar joined
[08:24] *** xtreak joined
[08:25] *** mr-foobar left
[08:26] *** cdg left
[08:27] *** mr-foobar joined
[08:28] *** xtreak left
[08:29] *** piojo joined
[08:35] *** domidumont left
[08:37] *** leont joined
[08:37] *** wamba left
[08:38] *** wamba joined
[08:40] <piojo> p6: my $indent=2; say so '__x' ~~ / ^ <{'_' x $indent}> x $ /;

[08:40] <camelia> rakudo-moar 593fa5: OUTPUT: «True␤»

[08:40] <piojo> p6: my $indent=2; say so '__x' ~~ / ^ {'_' x $indent} x $ /;

[08:40] <camelia> rakudo-moar 593fa5: OUTPUT: «False␤»

[08:41] <piojo> The need to use <{}> to include code in a regex is undocumented, I think--is this a bug?

[08:41] <piojo> I found it mentioned on a blog, saying that braces alone should work

[08:42] <moritz> piojo: more documentation would help, yes

[08:42] <moritz> <{ ... }> is an assertion; if it returns a false value, this regex branch fails

[08:43] <moritz> { ... } just executes code inside a regex, no side effects on the success of the regex (or regex branch)

[08:43] <piojo> moritz: so code braces only work within assertions?

[08:43] <moritz> piojo: no, both { } and <{ }> work; they do different things

[08:43] <moritz> as I tried to explain above :(

[08:44] <piojo> moritz: I think I get it--{} will execute code, but not interpolate

[08:44] <piojo> and assertions do interpolate.

[08:44] <piojo> (with braces, I mean)

[08:45] <moritz> they don't interpolate; the result is cast to Bool, and if it's False, the mach fails

[08:45] <moritz> but if the code for example returns a "a", then that does *not* mean there needs to be an "a" in the string to match

[08:46] <moritz> m: say so 'abc' ~~ /a { say "in code block"; True } /

[08:46] <camelia> rakudo-moar 593fa5: OUTPUT: «in code block␤True␤»

[08:46] <moritz> m: say so 'abc' ~~ /a { say "in code block"; False } /

[08:46] <camelia> rakudo-moar 593fa5: OUTPUT: «in code block␤True␤»

[08:46] <piojo> my $indent=2; say so '__x' ~~ / ^ <{'_' x $indent}> x $ /;

[08:46] <piojo> my $indent=2; say so '__x' ~~ / ^ <{'not_' x $indent}> x $ /;

[08:46] <piojo> err, wrong paste

[08:46] <moritz> oh

[08:46] <piojo> p6: my $indent=2; say so '__x' ~~ / ^ <{'not_' x $indent}> x $ /;

[08:46] <camelia> rakudo-moar 593fa5: OUTPUT: «False␤»

[08:46] <moritz> m: say 'abc' ~~ / <{ 'b' }> /

[08:46] <camelia> rakudo-moar 593fa5: OUTPUT: «｢b｣␤»

[08:46] <moritz> piojo: I'm sorry, I was wrong; what I thought about was <?{ ... }>

[08:47] <piojo> moritz: no worries

[08:47] <moritz> <{ ... }> does interpolate

[08:47] *** grumble left
[08:47] <piojo> moritz: So I gather the rule is that assertions interpolate, but naked regex text does not?

[08:49] <piojo> No, it's more complicated than that

[08:49] <moritz> you mean if you use a variable in a regex?

[08:50] <moritz> then it depends on the type of the object in the variable

[08:50] <piojo> just {}

[08:50] <moritz> {} just runs code

[08:50] <piojo> oh, that's interesting

[08:50] <piojo> whoever writes your documentation is a saint, by the way

[08:50] <moritz> thanks (on behalf of the doc writers) :-)

[08:50] <moritz> there's more than one

[08:50] <piojo> yeah, I thought there would be

[08:51] <piojo> the task of putting everything together in an organized fashion is something I can't comprehend

[08:51] <piojo> (I can explain things, but to include everything without turning it into a thousand pages of bullet points? Unimaginable)

[08:52] <moritz> the key realization is that when you start, you can't possibly catch everything

[08:52] <moritz> even my book on regexes won't capture everything that is to know about Perl 6 regexes, and it's going to be 150+ pages

[08:54] *** grumble joined
[09:00] *** Cabanossi left
[09:01] *** Cabanossi joined
[09:03] *** mr-foobar left
[09:05] *** mr-foobar joined
[09:07] <nadim> make it bigger! or in two tomes. I'll buy both.

[09:07] <nadim> pretty please

[09:08] <piojo> moritz: wow. That's intriguing. 

[09:10] <moritz> nadim: I understand. Problem is that I want to finish eventually, too :-)

[09:11] <moritz> if I set as my goal to cover everything that can be covered, I run into analysis paralysis

[09:12] *** lizmat joined
[09:13] <nadim> moritz: I understand it's a lot of work :) I'm just being greedy ;)

[09:13] <piojo> moritz: I hope you'll be covering [stacks of]? state, like what's required to parse an indentation-based language

[09:13] <piojo> though I'm gonna try to study and learn that tonight

[09:13] *** cdg joined
[09:13] <moritz> piojo: I do cover stacked symbol tables, and consider a python parsing example too

[09:14] <piojo> I found one blog entry that demonstrates the technique, though its descriptions are very high level so it's a bit of a struggle to understand: http://strangelyconsistent.org/blog/parsing-indented-text

[09:14] <moritz> ah, masak++'s blog

[09:15] <piojo> oh, I didn't realize. I'm pretty new around here...

[09:15] *** darutoko joined
[09:15] <piojo> moritz: that sounds like a fun example. being able to parse *real* data without needing to write a traditional parser is... well, it'll be liberating

[09:16] <nadim> tools are good too, like this one in P5 http://search.cpan.org/dist/Regexp-Debugger/ there are  entries in the issues that are wishes, some of them good I hope (I wrote them)

[09:17] *** cdg left
[09:21] *** dakkar left
[09:22] *** dakkar joined
[09:32] *** xtreak joined
[09:36] *** parv joined
[09:36] *** xtreak left
[09:50] *** wamba left
[09:54] *** wamba joined
[09:58] *** AlexDaniel joined
[10:10] *** gregf_ joined
[10:14] *** Cabanossi left
[10:16] *** Cabanossi joined
[10:17] *** wamba left
[10:20] *** wamba joined
[10:24] *** wamba left
[10:25] *** wamba joined
[10:25] *** ShalokShalom_ joined
[10:28] *** ShalokShalom left
[10:31] *** Zoffix joined
[10:35] <Zoffix> Jotted down some from-sauce instructions that avoid rakudobrew and all its issues and just create a bash alias instead.

[10:35] <Zoffix> huggable: sauce

[10:35] <huggable> Zoffix, Install untested latest development version of Rakudo from source: https://github.com/zoffixznet/r#table-of-contents

[10:36] <Zoffix> Though—just like rakudobrew by default—that still builds a dev commit, rather than latest tested release.

[10:38] <Zoffix> We could use rakudobrew-light. Something that's only for installing a single version (and updating it once in a while to latest release), so it avoids rakudobrew's issues, while keeping the convenience.

[10:41] <Zoffix> timotimo: I don't see an option to build rakudo in perlbrew. Is that some new feature?

[10:41] <Zoffix> it got cperl in it tho

[10:47] *** zakharyas left
[10:49] *** sena_kun joined
[10:49] <sena_kun> .

[10:50] *** lizmat left
[10:52] <Zoffix> .hugu

[10:52] * huggable hugs you

[10:52] *** dakkar left
[10:57] <sena_kun> m: my $buf = Buf.new(1); say $buf; say "{$buf}";

[10:57] <camelia> rakudo-moar 593fa5: OUTPUT: «Buf:0x<01>␤Cannot use a Buf as a string, but you called the Stringy method on it␤  in block <unit> at <tmp> line 1␤␤»

[10:58] <sena_kun> shouldn't the result be the same?

[10:59] *** Cabanossi left
[11:01] *** Cabanossi joined
[11:05] <Zoffix> sena_kun: no, say() calls .gist, while interpolation calls .Str

[11:05] <Zoffix> m: Buf.new(1).Str

[11:05] <camelia> rakudo-moar 593fa5: OUTPUT: «Cannot use a Buf as a string, but you called the Str method on it␤  in block <unit> at <tmp> line 1␤␤»

[11:05] <Zoffix> m: Buf.new(1).gist.put

[11:05] <camelia> rakudo-moar 593fa5: OUTPUT: «Buf:0x<01>␤»

[11:05] <sena_kun> m: my $buf = Buf.new(1); say $buf; say "{$buf.gist}";

[11:05] <camelia> rakudo-moar 593fa5: OUTPUT: «Buf:0x<01>␤Buf:0x<01>␤»

[11:06] <sena_kun> great.

[11:06] <sena_kun> thanks!

[11:06] <Zoffix> Any time.

[11:09] *** leont left
[11:16] *** ShalokShalom_ is now known as ShalokShalom

[11:22] *** atroxaper joined
[11:26] <atroxaper> Hello!

[11:26] <atroxaper> p6: so (%(1, 2), %(1, 2), %(3, 4)).unique.elems ~~ 2

[11:26] <camelia> rakudo-moar 593fa5: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "so " in expression "so (%(1, 2), %(1, 2), %(3, 4)).unique.elems ~~" in sink context (line 1)␤»

[11:27] <atroxaper> p6: so (%(1, 2), %(1, 2), %(3, 4)).unique.elems == 3

[11:27] <camelia> rakudo-moar 593fa5: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "so " in expression "so (%(1, 2), %(1, 2), %(3, 4)).unique.elems ==" in sink context (line 1)␤»

[11:27] <moritz> m: say (%(1, 2), %(1, 2), %(3, 4)).unique.elems == 3

[11:27] <camelia> rakudo-moar 593fa5: OUTPUT: «True␤»

[11:27] <atroxaper> Yeah.

[11:28] <atroxaper> How can I change that to get 2 instead of 3 ?

[11:28] *** domidumont joined
[11:30] <moritz> m: say (%(1, 2), %(1, 2), %(3, 4)).unique( as => *.perl).elems

[11:30] <camelia> rakudo-moar 593fa5: OUTPUT: «2␤»

[11:31] <moritz> https://docs.perl6.org/type/List#routine_unique

[11:31] <atroxaper> Hm... Thanks. I had to go in documentation. Sorry :)

[11:31] <Zoffix> No need to be sorry :)

[11:33] *** parisba_ is now known as DrParis

[11:33] <nadim> %(1, 2)i === %(1, 2)

[11:33] <Zoffix> There's also a `with` argument you could give a different op to use to compare with (e.g. &[eqv]), but that gets dog slow quickly if you have a lot of items

[11:33] <nadim> m:(%(1, 2)i === %(1, 2)).say

[11:33] <evalable6> nadim, rakudo-moar 593fa5f87: OUTPUT: «False»

[11:34] <nadim> m:(%(1, 2) eqv %(1, 2)).say

[11:34] <evalable6> nadim, rakudo-moar 593fa5f87: OUTPUT: «True»

[11:34] <Zoffix> atroxaper: note that not everything can have .perl called on it. Lazy lists, for example, will throw

[11:35] <nadim> there is an example with @list.unique(:with(&[eqv])) 

[11:37] <atroxaper> Zoffix: good point. I see.

[11:37] <atroxaper> Thanks you all :)

[11:38] <Zoffix> Any time!

[11:40] <atroxaper> One more question. Is there documentaion about "Perl6 Memomy Model"? Like in Java. I see https://docs.perl6.org/language/concurrency but it is more like ConcurrencyFramework but not memory model. I what to know what I have to hide on lock eth. And where is read/write lock?! xD

[11:45] <nadim> Not an answer to you question but have you seen this? http://www.jnthn.net/papers/2015-yapcasia-concurrency.pdf  there's also a video for it if you google

[11:50] <atroxaper> I will watch then.

[11:50] *** zakharyas joined
[11:53] *** parv left
[12:00] *** Cabanossi left
[12:01] *** atroxaper left
[12:01] *** Cabanossi joined
[12:16] *** Skarsnik joined
[12:17] <Skarsnik> Hello

[12:17] <Skarsnik> Hello

[12:20] <Zoffix> \o

[12:20] <Zoffix> Is it me you looking for?

[12:21] <Skarsnik> me? no lol

[12:22] <Skarsnik> me? no lol

[12:22] <Zoffix> Skarsnik: https://www.youtube.com/watch?v=PPQNbTPb-F0

[12:25] <Zoffix> Oh wait, that's the wrong song ^_^

[12:26] <Zoffix> https://www.youtube.com/watch?v=62XB9IbMnxQ there :)

[12:26] *** AlexDaniel left
[12:26] <Skarsnik> I wanted to work on a nativecallable bot but I forget to commit one file in gptrixie. I have to wait to get back at home now x)

[12:27] <Skarsnik> I wanted to work on a nativecallable bot but I forget to commit one file in gptrixie. I have to wait to get back at home now x)

[12:27] <Zoffix> :)

[12:27] <Zoffix> Skarsnik: for some reason all of your lines get duplicated in the chat: https://irclog.perlgeek.de/perl6/2017-08-24#i_15065068

[12:29] <Skarsnik> Hm blame the web client of freenode on a very unreliable connectivité

[12:29] <Skarsnik> I could maybe try an irssii on a term but the connectivity is bad

[12:32] *** aborazmeh joined
[12:32] *** aborazmeh left
[12:32] *** aborazmeh joined
[12:37] *** andrzejku left
[12:39] *** Skarsnik left
[12:43] *** skarsnik joined
[12:44] *** skarsnik is now known as Skarsnik

[12:49] *** mcmillhj_ joined
[12:56] *** epony left
[12:56] *** olinkl left
[12:56] *** olinkl joined
[12:59] *** Cabanossi left
[13:00] <nadim> Skarsnik: nativecallable? something new?

[13:01] *** Cabanossi joined
[13:02] *** doc_ joined
[13:02] <Skarsnik> Well, just a bot that call GPTrixie to produce the perl 6 code definition corresponding to C definition

[13:02] *** domidumont1 joined
[13:03] <doc_> Executing Perl 6 within Rmarkdown so that the resulting html output will inculde perl 6 output with the input code. See question here: https://stackoverflow.com/questions/45857934/executing-perl-6-code-in-rmarkdown

[13:03] <Skarsnik> like nativecallable, char *piko(int a, char* b); and it give you the NC code to call it

[13:03] *** cdg joined
[13:04] <Zoffix> wow cool! :D

[13:04] *** domidumont left
[13:07] *** Skarsnik left
[13:07] *** Skarsnik joined
[13:08] <perlpilot> A module that does that along with a small utility that can be run on C code would be awesome.  :)

[13:10] *** kerframil joined
[13:10] <Skarsnik> gah I get disconnected and irssi lost me the backlog

[13:12] *** cdg_ joined
[13:12] <Skarsnik> well if you want to generate defintion from C headers you can use https://github.com/Skarsnik/gptrixie

[13:12] <Skarsnik> (does not work currently since since I forget to commit a file x)

[13:13] <Skarsnik> but generating perl6 code from C code (not declaration) I don't know if there is an easy way

[13:15] *** cdg left
[13:16] *** aborazmeh left
[13:18] *** aborazmeh joined
[13:18] *** aborazmeh left
[13:18] *** aborazmeh joined
[13:19] *** aborazmeh left
[13:19] *** doc_ left
[13:21] <perlpilot> yeah, I dream a little bit sometimes.   gptrixie is awesome though.  Skarsnik++

[13:24] <Skarsnik> I can try relooking at stuff that work with llvm/clang

[13:26] *** leont joined
[13:26] *** mr-foobar left
[13:28] *** mcmillhj_ left
[13:29] *** mcmillhj_ joined
[13:30] *** mr-foobar joined
[13:32] *** domidumont1 left
[13:33] *** domidumont joined
[13:42] *** MilkmanDan left
[13:44] *** MilkmanDan joined
[13:45] <Zoffix> Seems Spreadsheet::XLSX doesn't wanna get used via Inline::Perl5. Dies with "Type Inline::Perl5::Object does not support associative indexing" when trying to compile the example from synopsis

[13:56] *** mr-foobar left
[14:06] *** leont left
[14:10] <Zoffix> Managed to workaround it by making a wrapper Perl package that extracts stuff I want and returns an arrayref

[14:11] *** mr-foobar joined
[14:12] <Skarsnik> a perl5 class could not be binded?

[14:12] *** geekosaur left
[14:13] * Zoffix doesn't understand the question

[14:14] *** DerAlex joined
[14:14] <Zoffix> it doesn't look like the Inline::Perl5::Object exposes the blessed Perl type, so you can't poke at a blessed hash with .AT-KEY for example

[14:14] *** leont joined
[14:15] <Skarsnik> I know nothing about I::Perl5 ^^ I was just trying a wild guess

[14:16] <Skarsnik> are all perl5 objects just a weid blessed hash?

[14:17] *** bdmatatu joined
[14:18] <perlpilot> Skarsnik: no, not all.  But many (most?) are.

[14:19] <tadzik> some are a weird blessed array %)

[14:19] <Skarsnik> I stopped doing perl5 stuff like 10 years ago. was like perl 5.10?

[14:20] <Zoffix> Skarsnik: you can make an object by blessing any ref, but most objects are hashes, just due to convenience of mapping attribute <-> hash key

[14:21] *** geekosaur joined
[14:25] *** skids joined
[14:27] <nadim> Skarsnik: why not patch http://www.swig.org/? I used it a lot a few years ago for perl5, I think it still has a lot of users.

[14:30] *** Kyo91_ joined
[14:31] *** Levex joined
[14:31] <Levex>  ⚛️ ⚛️ ⚛️

[14:31] *** eroux left
[14:32] <Zoffix> u:  ⚛️ ⚛️ ⚛️  

[14:32] <unicodable6> Zoffix, U+0020 SPACE [Zs] ( )

[14:32] <unicodable6> Zoffix, U+269B ATOM SYMBOL [So] (⚛)

[14:32] <unicodable6> Zoffix, 11 characters in total: https://gist.github.com/20f73c9a23c34c5e96845c9cad96ce16

[14:32] <Zoffix> Nothing but the atom renders for me :)

[14:33] *** Skarsnik left
[14:34] <Levex> :-)

[14:35] *** wamba[m] joined
[14:37] *** jonas1 left
[14:38] *** flatwhite joined
[14:39] *** Skarsnik joined
[14:40] <Skarsnik> re?

[14:41] <Skarsnik>  <join to #perl6 was synced in 74 secs> fun time

[14:42] *** kerframil left
[14:44] *** khw joined
[14:45] *** Cabanossi left
[14:46] *** Cabanossi joined
[14:47] *** Skarsnik left
[14:47] *** nadim left
[14:51] *** mst left
[14:52] *** mst joined
[14:52] *** mst left
[14:52] *** mst joined
[14:54] *** kannan joined
[14:55] *** raschipi joined
[14:55] <Zoffix> .

[14:56] <Zoffix> Well, it took only 2 hours of downloading stuff and learning R language, but I managed to answer doc_'s question above. #Success :)

[15:10] <japhb> Nice.  In the notebook space, do we have integration with Jupyter working?  ISTR someone was working on that ....

[15:15] <sena_kun> japhb, working - dunno, but you can look at https://github.com/bduggan/p6-jupyter-kernel

[15:15] <sena_kun> maintainer says it's working fine.

[15:19] *** zakharyas left
[15:21] *** ShalokShalom left
[15:21] *** lowbro left
[15:26] *** epony joined
[15:28] *** margeas joined
[15:42] <japhb> sena_kun: Thanks!

[15:42] *** kerframil joined
[15:42] *** koto joined
[15:44] *** Cabanossi left
[15:44] *** sena_kun left
[15:45] *** flatwhite left
[15:46] *** Cabanossi joined
[15:48] *** nadim joined
[15:55] *** cdg_ left
[15:57] *** abraxxa left
[15:59] <timotimo> japhb, it might be broken with very latest net-zmq

[15:59] <koto> It's already fixed.

[15:59] <timotimo> cool

[15:59] <timotimo> i was on a car ride for a long time

[15:59] <timotimo> now i'm feeling sick

[15:59] *** Skarsnik joined
[16:00] <Skarsnik> re hello :)

[16:00] <Skarsnik> @Home

[16:04] <raschipi> Skarsnik: please name your bot trixie.

[16:04] <Skarsnik> lol

[16:05] *** AlexDaniel joined
[16:05] *** ShalokShalom joined
[16:07] *** sena_kun joined
[16:08] <Xliff> Got a segfault for t/03-service.t in p6-jupyter-kernel

[16:08] <Xliff> sena_kun: You guys did a nice job! ;)

[16:08] <sena_kun> Xliff, zmq version?

[16:09] *** koto left
[16:09] <Xliff> The latest via panda.

[16:09] <sena_kun> nope, I mean, zeromq library version.

[16:09] <sena_kun> whatever_package_manager_you_use --key-to-see-package-info zeromq

[16:10] <Xliff> 4.2.1

[16:10] <sena_kun> Bang!

[16:10] <Xliff> ?

[16:10] <Xliff> Need to downgrade to 4.1, then?

[16:10] <sena_kun> I wrote that we support 4.1 and 4.2 doesn't work. For me either.

[16:10] <sena_kun> Yes.

[16:10] <sena_kun> Or send me a patch.

[16:10] <Xliff> I'll try to track it down... *sigh*

[16:11] <sena_kun> Because it seems like a ATMOSPHERIC BLACK SUICIDE METAL to fix that, tbh.

[16:11] <Xliff> I honestly think that some of the explicitly managed references are at fault.

[16:12] <sena_kun> It can be, but it not very obviously what exactly... And it works like a charm with 4.1. :/

[16:12] <Xliff> Yeah. Most likely a memory management issue.

[16:13] <Xliff> Or perhaps 4.1 had a memory leak that was fixed in 4.2 and rakudo ends up doing a double free?

[16:13] <sena_kun> https://github.com/zeromq/libzmq/releases - here is the changelog.

[16:13] <Xliff> I dunno... I'd have to look. And gods, I hope the problem is not in libzmq

[16:15] <Xliff> "This release introduces new APIs, but it is ABI compatible with

[16:15] <Xliff> libzmq 4.1.2 and up."

[16:15] <Xliff> Suuuure.

[16:15] *** geekosaur left
[16:15] <Xliff> Oh well, time for a nap.

[16:16] <sena_kun> o/

[16:20] *** robertle joined
[16:20] *** cdg joined
[16:22] *** geekosaur joined
[16:22] *** domidumont left
[16:29] *** st_elmo joined
[16:32] <nadim> Hi, I started 8 threads on my 4 core machiineand timed it, it took appx 1/4 of the time of running them separately. then I put everything in a ^50 loop and I am surprised to see that at the 50th iteration it is half as fast. is that a known behavior?

[16:35] <ugexe> how do you know it was 8 threads

[16:38] <nadim> good question, I use start 8 times. the first results come 4 times faster, so it is at least 4 threads, if P6 started the other threads or not, I don't know.

[16:39] <nadim> I actually wnated to see how that can be controlled but there was nothing in the "start" documentation", I gett the number of threads in the pool is controlled somehwere else

[16:39] <ugexe> m: say (await (^5).map({ start { $*THREAD.id } })).unique.elems

[16:39] <camelia> rakudo-moar 593fa5: OUTPUT: «3␤»

[16:40] <ugexe> yes you would use $*THREAD to create threads directory, which is generally discouraged (but useful for poking around)

[16:40] <ugexe> s/directory/directly/

[16:41] <nadim> I get 3 too, I need to check if I really had it run 4 times faster

[16:42] <nadim> yes 4 times faster

[16:42] <ugexe> m: say (await (^50).map({ start { $*THREAD.id } })).unique.elems

[16:42] <camelia> rakudo-moar 593fa5: OUTPUT: «15␤»

[16:42] <ugexe> now do you see?

[16:43] <nadim> that it starts threads as necessary? yes

[16:43] <ugexe> you don't notice the difference in threads used vs loop count?

[16:44] *** Cabanossi left
[16:44] <ugexe> of course a loop of 5 (which can essentially do 5 threads and parralelize the entire thing) is faster than trying to spawn more threads than the limit of 16

[16:45] <nadim> I always do 8 starts, but i loop that 50 times

[16:45] <ugexe> unless you are awaiting those 8 starts before iterating again, same thing

[16:46] <nadim> I await of course

[16:46] <nadim> https://nopaste.linux-dev.org/?1160980

[16:46] *** Cabanossi joined
[16:47] <nadim> the loop time varies between 0.25 to 0,40, gradually going up

[16:47] <nadim> https://nopaste.linux-dev.org/?1160981

[16:48] <ugexe> i see. does it get slower if you loop more, or does it eventually top out?

[16:48] <nadim> 2 secs

[16:51] <nadim> after 100 iterations it stabilizes around 0.5s halp the speed of the first iteration

[16:51] <nadim> I try 500 iterations

[16:51] *** bstamour joined
[16:56] <nadim> It looks quite stable after a few hundred iterations, maybe a very slight degradation. I guess the garbage collector may also take some cpu time but 50% less effect between the 1st and the 100th iteration is a lot.

[16:57] <nadim> jnthn: any ideas or explanations?

[16:58] *** bstamour left
[16:58] *** mr_ron joined
[16:59] *** domidumont joined
[16:59] *** nattefrost left
[17:02] *** bstamour joined
[17:03] *** lizmat joined
[17:08] <mr_ron> m: grammar g { token DIGIT { <[0..9]> }; our token DIGIT is export { <.g::DIGIT> } }; say so "1" ~~ /<g::DIGIT>/; import g; say so "2" ~~ /<DIGIT>/ # working way to export grammar token but don't see in roast - IS THERE BETTER / MORE STANDARD WAY?

[17:08] <camelia> rakudo-moar 593fa5: OUTPUT: «True␤True␤»

[17:09] <[Coke]> docs: I think I am going to start adding labels for docs, so we end up with doc-missing, doc-clarify (probably as two tags, actually, so we can still easily find all doc tags, but then I can skip "clarify")

[17:10] <[Coke]> (and hopefully someone with more fortitude than I can deal with the "clarify" ones, the majority of which seem to be asking for very specific things but not actually providing the text for them.)

[17:11] <[Coke]> sorry, specific is the wrong word. particular is better.

[17:14] *** Cabanossi left
[17:15] <mr_ron> https://github.com/perl6/roast/blob/master/S05-grammar/methods.t#L38 suggests it may be valid.  Any objection to doing it that way?

[17:16] *** setty1 joined
[17:16] *** Cabanossi joined
[17:18] *** grumble left
[17:18] *** grumble joined
[17:22] *** Sgeo left
[17:32] <Zoffix> .ask AlexDaniel is quotable's database available somewhere? Does it include timestamps? I'm curious to extract data about what first timers—nicks who never been on the channel before—ask about.

[17:32] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[17:32] <AlexDaniel> .

[17:32] <yoleaux> 17:32Z <Zoffix> AlexDaniel: is quotable's database available somewhere? Does it include timestamps? I'm curious to extract data about what first timers—nicks who never been on the channel before—ask about.

[17:32] <AlexDaniel> one second…

[17:34] <AlexDaniel> Zoffix: alright, what about this? https://gist.github.com/AlexDaniel/183ed52eaa10ae507537fa0db27143e2

[17:35] <AlexDaniel> Zoffix: it should create a couple of folders with .json files in them

[17:35] <AlexDaniel> I think should be trivial to process them

[17:36] <Zoffix> AlexDaniel: thanks.

[17:36] <AlexDaniel> Quotable takes these json files and puts all of this stuff into one file with fields separated by nulls

[17:37] <AlexDaniel> (so that there's no json decoding or other unnecessary stuff, this way it's relative fast to process millions of messages)

[17:37] <AlexDaniel> Zoffix: does it work?

[17:37] <AlexDaniel> I haven't tried running it in a while…

[17:38] <Zoffix> AlexDaniel: I'm gonna try it a bit later :) I didn't expect you to respond right awy.

[17:41] <Zoffix> Is anyone interested in adding Rakudo support to knitr? From what I understand it's a code-executer for R lang's markdown. A person here suggesting a PR to be made to to knitr's repo to add support: https://stackoverflow.com/questions/45857934/executing-perl-6-code-in-rmarkdown/45864801#comment78693695_45864801

[17:48] <AlexDaniel> Zoffix: yeah, does work. It will take a while the first time you run it because there's a lot of stuff to fetch and it is not parallelized, but it works

[17:48] *** Sgeo joined
[17:48] *** AlexDaniel left
[17:48] <Zoffix> cool

[17:50] *** nhywyll joined
[17:50] *** Sgeo_ joined
[17:51] *** geekosaur left
[17:51] *** domidumont left
[17:52] *** Sgeo left
[17:54] *** mr_ron left
[17:54] *** AlexDaniel joined
[17:54] *** itaipu joined
[17:57] *** geekosaur joined
[18:00] *** Cabanossi left
[18:01] *** Cabanossi joined
[18:12] <Geth> ¦ doc: 18f5adcedd | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Cool.pod6

[18:12] <Geth> ¦ doc: Improve Cool's description/summary

[18:12] <Geth> ¦ doc: 

[18:12] <Geth> ¦ doc: Fixes #1095

[18:12] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/18f5adcedd

[18:15] *** aindilis joined
[18:20] *** geekosaur left
[18:22] *** geekosaur joined
[18:23] *** geekosaur left
[18:24] *** st_elmo left
[18:33] *** geekosaur joined
[18:37] *** cdg_ joined
[18:41] *** cdg left
[18:41] *** cdg_ left
[18:44] <Geth> ¦ doc: 52fd65b266 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Cool.pod6

[18:44] <Geth> ¦ doc: Use more precise language in Cool summary

[18:44] <Geth> ¦ doc: 

[18:44] <Geth> ¦ doc: Addresses #1095

[18:44] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/52fd65b266

[18:50] *** storer joined
[18:57] <Geth> ¦ doc: 6843510b5c | (Zoffix Znet)++ | 2 files

[18:57] <Geth> ¦ doc: Clearify our timezone offsets are in seconds

[18:57] <Geth> ¦ doc: 

[18:57] <Geth> ¦ doc: Fixes #1446

[18:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6843510b5c

[18:58] *** devmikey joined
[19:00] *** espadrine joined
[19:09] *** samb1 left
[19:15] *** darutoko left
[19:17] *** AnotherNick left
[19:20] *** samb1 joined
[19:25] *** aindilis left
[19:31] *** MilkmanDan left
[19:33] *** ryu0 left
[19:44] *** mr-fooba_ joined
[19:45] *** mr-foobar left
[19:59] *** mr-foobar joined
[19:59] *** mr-fooba_ left
[20:00] *** DerAlex left
[20:08] *** ShalokShalom left
[20:18] *** dozn joined
[20:18] *** dozn left
[20:19] *** kannan left
[20:23] *** kannan joined
[20:30] *** lizmat_ joined
[20:32] *** lizmat left
[20:39] *** bdmatatu left
[20:41] *** MilkmanDan joined
[20:42] *** cdg joined
[20:44] *** Cabanossi left
[20:46] *** Cabanossi joined
[20:50] *** MilkmanDan left
[20:53] <kannan> hello friends! yesterday was a humbling deep dive on day 1 (after reading the perlintro resources) lol. i am working thru the free edition of thinkperl6 now. Glad to be here. whether perl6 is the best 1st language or not, this is the friendliest community one can see.

[20:54] *** MilkmanDan joined
[20:55] *** Celelibi left
[20:57] *** ufobat_ left
[21:02] *** Celelibi joined
[21:04] *** AlexDaniel left
[21:04] *** Skarsnik left
[21:04] *** raschipi left
[21:04] *** TEttinger joined
[21:08] *** skids left
[21:11] <b2gills> kannan: https://github.com/perl6/specs/blob/master/S27-perl-culture-draft.pod6

[21:14] *** lizmat_ is now known as lizmat

[21:17] <kannan> b2gills : very good, thanks!

[21:20] *** mcmillhj_ left
[21:21] <Xliff> b2gills: Minor typo fix for S27. PR submitted.

[21:22] <b2gills> I would like to see it moved out of “draft” status at some point

[21:26] <b2gills> Xliff: PR's for that repository get posted to #perl6-dev, no need to notify

[21:29] <Xliff> kk

[21:29] * Xliff is now playing: Dug Pinnick - If You Fuk Up

[21:29] <Xliff> \o\ /o/ \o\

[21:29] *** Kyo91_ left
[21:30] <Xliff> https://www.youtube.com/watch?v=XNYaySOx_2c&ab_channel=dUgPinnick

[21:31] *** setty1 left
[21:40] *** rindolf left
[21:57] *** imcsk8 left
[22:01] *** imcsk8 joined
[22:13] *** leont left
[22:15] *** |oLa| left
[22:17] *** |oLa| joined
[22:18] *** ShalokShalom joined
[22:20] *** |oLa| left
[22:23] *** espadrine left
[22:25] *** leont joined
[22:26] *** ShalokShalom left
[22:27] *** kannan left
[22:30] *** emeric left
[22:30] *** nadim left
[22:32] *** devmikey left
[22:50] <Zoffix> We're also one of the few communities with free hugs!

[22:50] *** skids joined
[22:50] <Zoffix> .hug

[22:50] * huggable hugs everyone

[22:50] <Zoffix> \o/

[22:51] *** cdg left
[22:51] *** storer42 joined
[22:51] *** storer42 left
[22:53] <Zoffix> Some more writing on friendliness and culture by audreyt++ https://medium.com/@audrey.tang/lessons-i-ve-learned-32f5d8107e34   http://pugs.blogs.com/audrey/2009/08/my-hobby-troll-hugging.html

[22:53] *** storer42 joined
[22:53] *** storer left
[22:55] <Zoffix> Xliff: I sent you an invite to perl6 GitHub org (surprised you didn't have one already). You can accept it on https://github.com/perl6/ and that'll give you direct commit access to most of our repos.

[23:00] *** raiph joined
[23:00] *** leont left
[23:01] *** robertle left
[23:05] * Zoffix is playing Babymetal - Headbanger

[23:05] <Zoffix> https://www.youtube.com/watch?v=2IzR_ClTE8Y :)

[23:08] <sena_kun> https://www.youtube.com/watch?v=jdobHDjcPLw

[23:10] <Xliff> Zoffix++

[23:10] <Xliff> .hug Zoffix

[23:10] * huggable hugs Zoffix

[23:10] <Zoffix> \o/

[23:10] *** Xal left
[23:12] *** Xal joined
[23:13] <Xliff> Nice links for music BTW.

[23:13] <Xliff> A bit more screaming than I like. That's why I listen to Pinnick (and King's X) and other bands he's in.

[23:13] <samcv> argh more interpolate issues

[23:13] <Xliff> There are actual vocals :)

[23:13] <samcv> m: my $var = 'st'; say 'ﬆ' ~~ /:i $var/

[23:13] <camelia> rakudo-moar 593fa5: OUTPUT: «Nil␤»

[23:13] <Xliff> Although Babymetal was kyute!

[23:14] <samcv> i need to find someone who really knows the internals of perl 6 regexes...

[23:14] <Xliff> m: my $var = 'st'; say 'ﬆ' ~~ /:i {$var}/

[23:14] <camelia> rakudo-moar 593fa5: OUTPUT: «｢｣␤»

[23:14] <samcv> literals are treated differently than variables

[23:14] <Xliff> Well, that's the one workaround I've come up with.

[23:15] <Xliff> m: my $var = 'st'; say 'ﬆ' ~~ /:i <$var>/

[23:15] <camelia> rakudo-moar 593fa5: OUTPUT: «Nil␤»

[23:15] <Xliff> *shrug*

[23:15] <Xliff> Besides, MoarVM internals give me the heebies.

[23:15] <Xliff> I'm still trying to grok nqp.

[23:15] <samcv> this is nqp/perl6 which has the regex engine

[23:15] <samcv> not moarvm stuff

[23:16] <Xliff> See whut I mean! I didn't even know that.

[23:16] <Xliff> There are a whole bunch of things I wanna implement in nqp.

[23:17] * Xliff thinks about working on a MangledHash class.

[23:18] *** nhywyll left
[23:18] <Zoffix> Note that there's no user-facing interface for nqp. As in: it can be changed at any time without any notice. If you use an nqp op, your code might break in the future if that op is changed, renamed, or deleted.

[23:19] <samcv> and i need to figure out what takes /$var/ 150 times more time to do stuff than /literal/

[23:20] <samcv> but the regex engine is really confusing and i have only worked on the literal part and not sure what happens for variables. and if the code for that is in rakudo or nqp...

[23:20] <samcv> since i see no nqp tests that have variables in the regex needle like /$this/

[23:21] <skids> https://www.youtube.com/watch?v=cjB23s_mZGM <-- quite more mellow screaming, at risk of dating myself.

[23:21] <Zoffix> nqp: my $x := "foo"; say("foobar" ~~ /$x/)

[23:21] <camelia> nqp-moarvm: OUTPUT: «foo␤»

[23:21] *** gregf_ left
[23:21] <Zoffix> My wild guess would be it's in nqp.

[23:24] <Zoffix> More mellow vocals from Laura Nichol :) https://www.youtube.com/watch?v=0JxYsNTKG5k

[23:26] <Xliff> skids: Ooh! Nice!

[23:27] <Xliff> Zoffix: Eeh... Laura isn't bad. I can deal with some screaming. Hell, I listen to Sevendust

[23:27] <Xliff> Still. I prefer my metal bass-heavy with harmonics. Either in the vocals or the guitars. Preferably both.

[23:28] <Zoffix> :)

[23:28] <skids> That and Clutch's Robot Hive were pretty much my last metal albums.  Well 10000 days of course.

[23:29] *** kerframil left
[23:32] *** margeas left
[23:32] <skids> Some guy wrote a book making the case in earnest that the very best year for music was the year I was born.

[23:33] <skids> So to *really* date myself: https://www.youtube.com/watch?v=7gGPv9hngk4

[23:35] <samcv> argh there's so much broken i just found

[23:35] <samcv> this works: my $var = 'A'; 'Ea' ~~ /:i $var/ but if i do ignoremark+ignorecase it doesn't

[23:36] <samcv> i'm seeing it looks like some things in the AST are not passing along the regex subtypes (i think)

[23:36] <Xliff> \o/ HAWKWIND!

[23:36] * Xliff just dated himself, too.

[23:36] <Xliff> skids++

[23:38] <skids> samcv: Past a certain point, you don't need RT anymore to find bugs :-)

[23:38] <samcv> i should probably add RT's though

[23:40] <sena_kun> night coding session is over... https://www.youtube.com/watch?v=m7Knc3l8l9o and sleep. o/

[23:41] *** hunter_ joined
[23:42] <Zoffix> \o

[23:42] *** sena_kun left
[23:43] *** Cabanossi left
[23:46] *** Cabanossi joined
[23:49] *** raschipi joined
[23:54] *** hunter_ left
[23:55] *** hunter_ joined
[23:55] *** hunter_ left
[23:55] *** hunter_ joined
[23:56] *** ShalokShalom joined
[23:57] <samcv> going to focus on what i can do though. like making nqp::index 6.79579631 faster when the haystack is made up of strands and the needle is only one grapheme

[23:59] *** snarkyboojum joined
