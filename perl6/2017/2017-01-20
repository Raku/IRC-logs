[00:02] *** Ven joined
[00:14] *** agentzh joined
[00:15] *** trnh left
[00:21] *** cpage_ joined
[00:26] *** cpage_ left
[00:27] *** drewr joined
[00:28] *** khw left
[00:31] *** Ven left
[00:31] *** cpage_ joined
[00:34] *** drewr left
[00:35] *** drewr joined
[00:35] *** Ven joined
[00:44] *** Ven left
[00:50] *** drewr left
[00:51] *** drewr joined
[00:53] *** drewr left
[00:54] *** dezren39 joined
[00:55] *** Ven joined
[00:58] *** Ven left
[01:06] *** notostraca joined
[01:07] *** dezren39 is now known as ketket

[01:08] *** ketket is now known as ketsif

[01:08] *** ketsif is now known as drewrypope

[01:09] *** drewrypope is now known as drewpope

[01:11] *** AlexDaniel joined
[01:11] <AlexDaniel> \o/

[01:11] *** drewpope is now known as dezren39

[01:15] <AlexDaniel> m: ([+] **)(4, 8, 15).say

[01:15] <camelia> rakudo-moar dd911e: OUTPUT«Cannot resolve caller Numeric(HyperWhatever: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[01:15] <AlexDaniel> :(

[01:15] *** Ven joined
[01:21] <timotimo> so we don't curry that?

[01:21] <timotimo> m: (**.sum)(4, 8, 15).say

[01:21] <camelia> rakudo-moar dd911e: OUTPUT«(4 8 15)␤»

[01:23] <mr_ron> m: https://gist.github.com/ronaldxs/034612d248e8d5856093b72a278aa817

[01:23] <camelia> rakudo-moar dd911e: OUTPUT«===SORRY!===␤Could not find IETF::RFC_Grammar::URI at line 2 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-1/share/perl6␤    …»

[01:24] <mr_ron> how to run with r*?

[01:24] <geekosaur> star: https://gist.github.com/ronaldxs/034612d248e8d5856093b72a278aa817

[01:24] <camelia> star-m 2016.10: OUTPUT«ok 1 - Existing grammar happens by luck to work␤not ok 2 - Match with small and valid change fails apparently caused by LTM␤␤# Failed test 'Match with small and valid change fails apparently caused by LTM'␤# at <tmp> line 16␤# expected: 'IPv4address'…»

[01:24] *** raschipi joined
[01:24] <mr_ron> thanks

[01:24] <mr_ron> m: https://gist.github.com/ronaldxs/35224401d427305afbf7ea03a75edb8e

[01:24] <camelia> rakudo-moar dd911e: OUTPUT«ok 1 - Match using variant of existing rules OK␤not ok 2 - Match with small and valid change fails apparently caused by LTM␤␤# Failed test 'Match with small and valid change fails apparently caused by LTM'␤# at <tmp> line 15␤# expected: 'IPv4ish'…»

[01:25] *** notostraca left
[01:26] <mr_ron> You could just use || to fix but would be also be too fragile with composition / inheritance

[01:27] <mr_ron> http://design.perl6.org/S05.html#Longest-token_matching - If a grammar's rules are defined in more than one file, the order is undefined, and an explicit assertion must be used to force failure if the wrong one is tried first.

[01:28] <mr_ron> maybe a hint there from s05 but I don't know how to use it.  Any ideas?

[01:30] *** astj_ joined
[01:30] *** astj left
[01:31] *** Ven left
[01:33] *** lmmx left
[01:35] *** Ven joined
[01:41] <AlexDaniel> timotimo: you think it is a bug?

[01:48] <mr_ron> So the idea is I want the host rule to try IPv4 before reg-name but in a way that makes grammar re-usable for XML etc. which seems to preclude '||' because of LTM ...

[01:54] *** finanalyst joined
[01:58] <timotimo> i have little understanding of HyperWhatever, to be honest

[02:00] *** jeek joined
[02:03] * timotimo goes to bed

[02:10] *** BenGoldberg joined
[02:11] <raschipi> night.

[02:14] *** raschipi left
[02:15] *** Ven left
[02:15] *** cdg left
[02:16] *** eyck joined
[02:19] *** Ven joined
[02:23] <jdv79> is there not a top level CATCH?

[02:23] <jdv79> i find myself having to drop CATCH blocks around to find the exceptions

[02:23] <jdv79> i have to be doing something wrong 

[02:24] <jdv79> also,  i just had a X::TypeCheck::Binding being thrown without a backtrace so it was unclear what it meant

[02:30] *** jeek left
[02:30] *** jeek joined
[02:33] <AlexDaniel> jdv79: have you tried --ll-exception?

[02:35] <BenGoldberg> m: use IO::String;

[02:35] *** jeek left
[02:35] <camelia> rakudo-moar dd911e: OUTPUT«===SORRY!===␤Could not find IO::String at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-1/share/perl6/site␤    /home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-1/share/perl6␤    CompUnit::Re…»

[02:35] <jdv79> no.  i just did $_.backtrace

[02:35] <jdv79> but shiouldn't that be the default?

[02:36] <AlexDaniel> no

[02:36] <AlexDaniel> if you're getting an error with no line number, then it's probably a bug

[02:41] *** BenGoldberg left
[02:43] *** BenGoldberg joined
[02:44] *** BenGoldberg left
[02:45] *** Ven left
[02:47] *** BenGoldberg joined
[02:49] *** Ven joined
[02:51] *** agentzh left
[02:51] *** agentzh joined
[02:56] *** agentzh left
[03:08] *** jeek joined
[03:08] *** redhands joined
[03:15] *** Ven left
[03:18] *** Ven joined
[03:20] *** imcsk8 joined
[03:21] *** kyan joined
[03:28] *** finanalyst left
[03:33] *** agentzh joined
[03:33] *** Ven left
[03:34] *** Ven joined
[03:36] *** hchienjo joined
[03:43] <[Coke]> moritz: I'd be willing to mentor (having failed at it once, I'd like to think I could do it better this time. :| )

[03:43] <[Coke]> why do people keep trying to use IO::String here?:)

[03:46] *** Ven left
[03:49] *** hchienjo left
[03:52] *** noganex joined
[03:52] *** Ven joined
[03:53] *** hchienjo joined
[03:55] *** noganex_ left
[04:01] *** Ven left
[04:09] *** khw joined
[04:13] *** Ven joined
[04:14] *** Ven left
[04:14] *** labster left
[04:23] *** Ven joined
[04:28] *** dezren39 left
[04:29] *** dezren39 joined
[04:31] *** Ven left
[04:34] *** ketket joined
[04:35] *** dez joined
[04:37] *** Ven joined
[04:37] *** dez left
[04:37] *** ketket left
[04:38] *** dezren39 left
[04:38] *** dezren39 joined
[04:39] *** matiaslina joined
[04:41] *** BenGoldberg left
[04:43] *** dezren39 left
[04:43] *** BenGoldberg joined
[04:43] *** dezren39 joined
[04:44] *** ketket joined
[04:45] *** dez joined
[04:45] *** ketket left
[04:45] *** dezren39 left
[04:45] *** dez left
[04:46] *** Ven left
[04:53] *** Ven joined
[04:55] <Geth>  ecosystem: bradclawsie++ created pull request #292: s/META.info/META6.json/

[04:55] <Geth>  ecosystem: review: https://github.com/perl6/ecosystem/pull/292

[04:55] <jdv79> returning |() in a map is the easiest way to reduce that iteration to nothing, right?

[04:57] <Geth>  ecosystem: 11cdd3c246 | (brad clawsie)++ | META.list

[04:57] <Geth>  ecosystem: s/META.info/META6.json/

[04:57] <Geth>  ecosystem: review: https://github.com/perl6/ecosystem/commit/11cdd3c246

[04:57] <Geth>  ecosystem: 702d69dd9f | astj++ | META.list

[04:57] <Geth>  ecosystem: Merge pull request #292 from bradclawsie/master

[04:57] <Geth>  ecosystem: 

[04:57] <Geth>  ecosystem: s/META.info/META6.json/

[04:57] <Geth>  ecosystem: review: https://github.com/perl6/ecosystem/commit/702d69dd9f

[04:58] *** hchienjo left
[05:01] *** astj joined
[05:01] *** astj_ left
[05:17] *** khw left
[05:19] *** cpage_ left
[05:19] *** mr_ron left
[05:25] <jdv79> well, if my lap was cold now its melting

[05:26] <jdv79> i think its XML burnin up cycles

[05:30] *** imcsk8_ joined
[05:31] *** Actualeyes left
[05:31] *** Actualeyes joined
[05:32] *** Cabanossi left
[05:33] *** imcsk8 left
[05:35] *** Cabanossi joined
[05:36] *** dwarring left
[05:38] *** BenGoldberg left
[05:39] *** jdv79 left
[05:39] *** jdv79 joined
[05:41] *** giraffe joined
[05:41] *** BenGoldberg joined
[05:41] *** giraffe is now known as Guest35314

[05:42] *** Tonik joined
[05:56] *** hartenfels left
[06:02] *** redhands left
[06:02] *** Ven left
[06:02] <AlexDaniel> .tell lizmat can you please check this code and tell me whether the current behavior is correct (behavior changed in 2016.11)? my @foo[10]; my @baz := |@foo; @baz = ^20; say @baz

[06:02] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[06:02] *** redhands joined
[06:03] <AlexDaniel> .tell lizmat (#00001997)

[06:03] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[06:04] *** Ven joined
[06:09] *** xtreak joined
[06:10] *** cibs joined
[06:10] *** cpage_ joined
[06:15] <AlexDaniel> .tell brokenchicken it seems that your fix for RT#128783 did not remove the error message itself from rakudo. Is everything alright? https://gist.github.com/Whateverable/1c806c0dc7f836513e49a3791b3ce481

[06:15] <yoleaux> AlexDaniel: I'll pass your message to brokenchicken.

[06:15] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128783

[06:15] <AlexDaniel> .tell brokenchicken (#00003518)

[06:15] <yoleaux> AlexDaniel: I'll pass your message to brokenchicken.

[06:16] *** xtreak left
[06:17] *** Ven left
[06:17] *** BenGoldberg left
[06:17] *** xtreak joined
[06:22] <AlexDaniel> .tell lizmat also this: ｢given ‘this is a test’ {.say for m:global:p/\w+{say 'ok'}/ }｣, I'm not sure why the output is different (after https://github.com/rakudo/rakudo/commit/b7201a8f2 )

[06:22] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[06:22] <AlexDaniel> .tell lizmat (#00003948)

[06:22] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[06:24] *** Ven joined
[06:25] *** Tonik left
[06:31] *** Ven left
[06:34] *** Ven joined
[06:41] *** labster joined
[06:42] *** wamba joined
[06:48] *** labster left
[06:49] *** RabidGravy joined
[06:50] *** Ven left
[06:51] *** agentzh left
[06:51] *** mr_ron joined
[06:59] *** bjz joined
[07:01] *** pisa joined
[07:03] *** bjz_ joined
[07:03] *** bjz_ left
[07:04] *** bjz left
[07:05] *** bjz_ joined
[07:10] *** domidumont joined
[07:10] *** bjz_ left
[07:11] *** bjz joined
[07:13] *** redhands left
[07:14] *** domidumont left
[07:15] *** domidumont joined
[07:16] *** bjz left
[07:31] *** xtreak left
[07:35] *** parvx joined
[07:39] *** bjz joined
[07:41] <parvx> why do some methods/functions are spelled with "-" others with "_" (Routines: https://docs.perl6.org/routine.html)? is one version going to be converted to other?

[07:45] *** smash joined
[07:46] *** damnlie_ joined
[07:46] *** jercos_ joined
[07:46] *** orevdiabl joined
[07:47] *** avar joined
[07:47] *** avar left
[07:47] *** avar joined
[07:47] *** cibs_ joined
[07:49] *** ccntrq- joined
[07:49] *** MilkmanD1n joined
[07:50] <moritz> parvx: we tend to write internal methods with _ and "proper" public methods with -

[07:50] <moritz> parvx: there's not always a 100% distinction between the two

[07:51] *** chee joined
[07:51] <parvx> hmm. ok.

[07:51] *** jnthn_ joined
[07:51] *** ccntrq left
[07:51] *** cibs left
[07:51] *** Peter_R joined
[07:54] *** mr_ron left
[07:56] <parvx> does anybody know if somebody is working on Perl 6 port for FreeBSD (in or out of the "The Ports" system)?

[07:57] <moritz> I'm not aware of such a work

[07:57] *** leah2 joined
[07:57] *** Unavowed_ joined
[07:58] *** kyan left
[07:59] <parvx> ok. I will ask around  FreeBSD community. If there is already no existing work, I will try to install (at least for myself).

[07:59] <AlexDaniel> .tell MasterDuke was this change intended? commit: 73797b759^,73797b759 say lines.elems; say lines[0]

[07:59] <yoleaux> AlexDaniel: I'll pass your message to MasterDuke.

[07:59] *** ufobat joined
[07:59] <AlexDaniel> .tell MasterDuke (#00005346)

[07:59] <yoleaux> AlexDaniel: I'll pass your message to MasterDuke.

[08:02] *** abraxxa joined
[08:03] *** pisa left
[08:04] *** abraxxa1 joined
[08:04] *** abraxxa left
[08:07] <ufobat> good morning ;)

[08:13] *** rindolf joined
[08:13] *** abraxxa1 left
[08:14] *** abraxxa joined
[08:15] <ufobat> i _allways_ write .elemes instead of .elems *sigh

[08:16] *** mr_ron joined
[08:16] <ufobat> i _allways_ write .elemes instead of .elems *sigh

[08:22] <AlexDaniel> .tell lizmat also this: ｢say Nil.chomp｣ no longer says “Use of Nil in string context”. Let me know if it is ok? (#00007355) https://github.com/rakudo/rakudo/commit/89470a6a63e

[08:22] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[08:24] <parvx> ufobat: you could configure your editor to correct your misspelling (short of writing some wrapper around .elems)

[08:25] <ufobat> that is actually a good idea! :D

[08:25] <AlexDaniel> m: say <a b c>.elemes

[08:25] <camelia> rakudo-moar dd911e: OUTPUT«No such method 'elemes' for invocant of type 'List'␤  in block <unit> at <tmp> line 1␤␤»

[08:25] <AlexDaniel> m: say elemes <a b c>

[08:25] <camelia> rakudo-moar dd911e: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    elemes used at line 1. Did you mean 'elems'?␤␤»

[08:25] <AlexDaniel> if you use the sub instead, it will say “did you mean ‘elems’” and now it is a compile-time error!

[08:26] <ufobat> aye, but it is still a silly typo

[08:27] *** Unavowed_ left
[08:27] *** Unavowed joined
[08:28] <AlexDaniel> .tell brokenchicken I think it was you who was surprised to know that there is substr-rw. Well, guess what, there's subbuf-rw

[08:28] <yoleaux> AlexDaniel: I'll pass your message to brokenchicken.

[08:28] <AlexDaniel> .tell brokenchicken my $b = Buf.new(1,2,3); subbuf-rw($b,2,1) = Buf.new(42); dd $b

[08:28] <yoleaux> AlexDaniel: I'll pass your message to brokenchicken.

[08:28] *** user9 left
[08:29] *** user9 joined
[08:29] *** mr-foobar left
[08:29] *** labster joined
[08:31] *** avalenn joined
[08:31] *** mr-foobar joined
[08:32] *** BinGOs joined
[08:32] *** nowan joined
[08:33] *** wamba left
[08:34] *** jercos_ is now known as jercos

[08:36] *** zakharyas joined
[08:47] *** Vynce joined
[08:48] *** matiaslina left
[08:48] <AlexDaniel> .tell TimToady so is this supposed to warn? 'hello' [&say] 'world'

[08:48] <yoleaux> AlexDaniel: I'll pass your message to TimToady.

[08:48] <AlexDaniel> .tell TimToady https://github.com/rakudo/rakudo/commit/acece7b2f7 (#00007997)

[08:48] <yoleaux> AlexDaniel: I'll pass your message to TimToady.

[08:49] <parvx> are there other places to read about rakudo & moarvm issues besides respective github repos & http://www.nntp.perl.org/group/perl.perl6.users/?

[08:50] <AlexDaniel> parvx: you mean tickets? https://rt.perl.org/

[08:50] <parvx> yes. thanks.

[08:50] <AlexDaniel> though I wonder why you need to read about rakudo issues :)

[08:51] <timotimo> http://perl6.fail is a slightly nicer frontend to perl6 issues in RT

[08:51] <teatime> heh

[08:51] <tadzik> ahahahah

[08:51] <tadzik> fantastic :)

[08:53] <AlexDaniel> timotimo: it's nice that you're here!

[08:53] <AlexDaniel> timotimo: what do you think about this?

[08:53] <AlexDaniel> m: sub foo { supply { emit($_) for 1..10; }; }; react { whenever foo() { next if $_ > 3; say $_; }; };

[08:53] <timotimo> uh oh

[08:53] <camelia> rakudo-moar dd911e: OUTPUT«1␤2␤3␤===SORRY!===␤next without loop construct␤»

[08:53] <AlexDaniel> mc: sub foo { supply { emit($_) for 1..10; }; }; react { whenever foo() { next if $_ > 3; say $_; }; };

[08:53] <committable6> AlexDaniel, ¦«2015.12»: 1␤2␤3

[08:53] <timotimo> oh, a regression?

[08:54] <timotimo> that should definitely work

[08:54] <AlexDaniel> c: 5f1249e8^,5f1249e8 sub foo { supply { emit($_) for 1..10; }; }; react { whenever foo() { next if $_ > 3; say $_; }; };

[08:54] <committable6> AlexDaniel, ¦«5f1249e8^»: 1␤2␤3␤¦«5f1249e»: 1␤2␤3␤Access denied to keep/break this Promise; already vowed␤  in any  at /tmp/whateverable/rakudo-moar/5f1249e843bbd7ead4860f65c2ccd19ec6376033/share/perl6/runtime/CORE.setting.moarvm line 1␤ «exit code = 1»

[08:54] <AlexDaniel> hmmm

[08:55] <AlexDaniel> bisect: old=5f1249e8 sub foo { supply { emit($_) for 1..10; }; }; react { whenever foo() { next if $_ > 3; say $_; }; };

[08:55] <bisectable6> AlexDaniel, Bisecting by output (old=5f1249e new=dd911ef) because on both starting points the exit code is 1

[08:55] <parvx> AlexDaniel, if i decide to make a FreeBSD port, I will use the git repo. I will also be the de facto maintainer of the port. (In 2010, Parrot VM based Rakudo was removed.)

[08:55] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/6ae9e9e13c7c875b40f0c6ba280224aa

[08:55] <bisectable6> AlexDaniel, (2016-08-03) https://github.com/rakudo/rakudo/commit/5e61516a3fd290d93a7e18899483ccb2b9ba3a30

[08:55] <AlexDaniel> ah, not gonna work by output…

[08:55] <timotimo> why does it give the full path to the CORE.setting there?

[08:55] <AlexDaniel> that's a lovely question, yes

[08:55] <AlexDaniel> c: 5e61516a^,5e61516a sub foo { supply { emit($_) for 1..10; }; }; react { whenever foo() { next if $_ > 3; say $_; }; };

[08:55] <committable6> AlexDaniel, https://gist.github.com/7484639f6adeb06a756cd1b2bf39b110

[08:55] <parvx> I mean github repo

[08:56] <AlexDaniel> yea it's not gonna bisect by that…

[08:56] <AlexDaniel> timotimo: anyway, I'll submit a ticket then

[08:56] <parvx> thanks timotimo

[08:57] <timotimo> yes

[08:58] <AlexDaniel> parvx: I'm not quite sure what port you are talking about… if it doesn't work on FreeBSD, why not just add the support?

[08:58] <timotimo> parvx means "FreeBSD Ports"

[08:58] <timotimo> the package manager

[08:58] <AlexDaniel> aaaaaaaaaahh

[08:58] <AlexDaniel> okay, sorry

[08:58] <AlexDaniel> my mistake

[08:58] <parvx> no worries, AlexDaniel

[08:58] <timotimo> it's FreeBSD's fault :P

[09:02] *** bjz left
[09:02] <AlexDaniel> timotimo: perhaps you can take a look RT #130601

[09:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130601

[09:03] <AlexDaniel> I mean, I have no idea if this should work at all… so feel free to add a comment

[09:03] <timotimo> here's how to bisect it:

[09:04] <AlexDaniel> well the first commit is https://github.com/rakudo/rakudo/commit/5f1249e843bbd7ead4860f65c2ccd19ec6376033

[09:04] <timotimo> bisect: sub foo { supply { emit($_) for 1..10; }; }; react { whenever foo() { next if $_ > 3; CATCH { default { exit 1 } } }; }; exit 0

[09:04] <bisectable6> timotimo, Bisecting by exit code (old=2015.12 new=dd911ef). Old exit code: 0

[09:04] <bisectable6> timotimo, bisect log: https://gist.github.com/36d349a9d6f5b0e3df7f1bfa192915f7

[09:04] <bisectable6> timotimo, (2016-08-03) https://github.com/rakudo/rakudo/commit/5f1249e843bbd7ead4860f65c2ccd19ec6376033

[09:04] <AlexDaniel> …

[09:04] <timotimo> oh, you already found that?

[09:04] <timotimo> lol

[09:04] *** roguelazer joined
[09:04] <AlexDaniel> yea, but that's for “Access denied to keep/break this Promise; already vowed”

[09:05] <timotimo> i didn't see you successfully bisected it

[09:05] <AlexDaniel> I was also hoping to see when it was changed to “next without loop construct”

[09:05] <timotimo> ah

[09:05] <timotimo> that's very interesting, why doesn't the CATCH get the error before it tries to break the vow?

[09:06] *** bjz joined
[09:10] <timotimo> i'm also slightly surprised we don't have a test that'd catch that

[09:13] *** leah2 left
[09:15] *** leah2 joined
[09:18] *** Peter_R left
[09:19] *** Peter_R joined
[09:23] *** chee left
[09:25] *** chee joined
[09:31] *** wamba joined
[09:33] *** mr_ron left
[09:38] *** breinbaas left
[09:41] <lizmat> .

[09:41] <yoleaux> 06:02Z <AlexDaniel> lizmat: can you please check this code and tell me whether the current behavior is correct (behavior changed in 2016.11)? my @foo[10]; my @baz := |@foo; @baz = ^20; say @baz

[09:41] <yoleaux> 06:03Z <AlexDaniel> lizmat: (#00001997)

[09:41] <yoleaux> 06:22Z <AlexDaniel> lizmat: also this: ｢given ‘this is a test’ {.say for m:global:p/\w+{say 'ok'}/ }｣, I'm not sure why the output is different (after https://github.com/rakudo/rakudo/commit/b7201a8f2 )

[09:41] <yoleaux> 06:22Z <AlexDaniel> lizmat: (#00003948)

[09:41] <yoleaux> 08:22Z <AlexDaniel> lizmat: also this: ｢say Nil.chomp｣ no longer says “Use of Nil in string context”. Let me know if it is ok? (#00007355) https://github.com/rakudo/rakudo/commit/89470a6a63e

[09:45] <lizmat> AlexDaniel: I think the behaviour of my @foo[10]; my @baz := |@foo; @baz = ^20; say @baz is correct

[09:45] <timotimo> binding a slip to a @-sigiled var, interesting

[09:46] *** xtreak joined
[09:47] <lizmat> Slipping an Array gives you the Array

[09:48] <timotimo> ah, makes sense

[09:48] <lizmat> to which @baz is bound, and thus, because it's shaped, disallows assignment after element 9

[09:48] <timotimo> mhm

[09:49] *** bjz_ joined
[09:50] *** bjz left
[09:51] <lizmat> well, what happens there is that List.Slip is smart enough to transplant it's $!reified into the Slip

[09:52] <lizmat> if the $!reified happens to be shaped, you get a shaped Slip

[09:53] *** Vynce left
[09:54] *** xtreak left
[09:54] *** ufobat left
[10:01] *** Gasher joined
[10:02] *** agentzh joined
[10:02] *** breinbaas joined
[10:04] *** girafe left
[10:05] <lizmat> AlexDaniel: see https://github.com/rakudo/rakudo/commit/7c81becffb re Nil.chomp

[10:06] *** agentzh left
[10:08] *** wamba left
[10:08] *** jnthn_ is now known as jnthn

[10:09] <lizmat> AlexDaniel: what are those numbers ?

[10:09] <lizmat> #00001997 #00003948

[10:09] <lizmat> ?

[10:11] *** bjz joined
[10:11] *** bjz_ left
[10:16] *** kurahaupo__ joined
[10:17] *** bjz_ joined
[10:18] *** ufobat joined
[10:18] <parvx> at least for now, having exportABLE functions in a module too much work than in Perl 5 (and that is without supposedly otherwise needed "module" line). That is too far away for me to worry about anyway. :-|

[10:18] *** bjz left
[10:19] <jnthn> sub foo() is export { } # where's the work?

[10:19] <timotimo> invizibl work

[10:20] <parvx> that is the default export, jnthn. i am talking about being able to selectively import

[10:21] <timotimo> youm ean like "is export(:ONLYTHIS)"?

[10:21] <parvx> ... on the lines of @EXPORT_OK in Perl 5

[10:21] <jnthn> Yeah, it's done with tags rather than specific symbols in Perl 6

[10:22] <lizmat> jnthn: Perl 5 also allows something like that, but Perl 6 disallows importing by name  :-(

[10:22] *** bjz_ left
[10:22] <jnthn> Apparently some people miss this.

[10:22] <lizmat> for something like a POSIX module, you don't want to tag each sub with its own tag

[10:22] <mst> you can't import the specific functions you want?

[10:22] <parvx> i saw the code somewhere but currently cannot find in a hurry

[10:22] <mst> that seems ... strange ... to me

[10:22] <jnthn> No, you'd tag them in groups.

[10:23] *** bjz joined
[10:23] <jnthn> And import the relevant group

[10:23] *** astj left
[10:23] <jnthn> iirc, there is a specified mechanism for importing specific symbols (iirc, `:MY<&foo @bar>`)

[10:23] <timotimo> what speaks against only pulling in the package, and then importing indivudal parts of the package with the import syntax?

[10:24] <mst> oh, so you can ask for specific symbols that are exported?

[10:24] <jnthn> mst: Specified, not implemented :)

[10:24] *** astj joined
[10:24] <mst> jnthn: ah

[10:24] <jnthn> Nobody got around to it, is all.

[10:24] <mst> it's not *that* big a deal but it seems a bizarre thing to leave out

[10:25] <timotimo> module stuff and importing stuff and merging symbols and such ... it's a hairy piece of the code, IMO

[10:25] <jnthn> You're assuming "left out" was a concious decision rather than "nobody got around to it yet" :P

[10:26] <timotimo> one day i'll make a little gif of a vacuum cleaner going over a heap of round tuits

[10:29] *** astj left
[10:29] <mst> jnthn: no, I'm not

[10:30] <mst> jnthn: I mean that it seems like a bizarre thing to manage to not get to even though you got to the more clever stuff

[10:30] <mst> FVO 'you' meaning 'everybody who looked at it'

[10:31] *** gregf_ joined
[10:33] *** chee is now known as tigrmesh

[10:33] *** tigrmesh is now known as chee

[10:34] <parvx> found the code listing to be able to import specific functions: https://docs.perl6.org/language/5to6-nutshell#Importing_specific_functions_from_a_module (near the bottom)

[10:35] *** TEttinger left
[10:35] <timotimo> yeah, you need to put that EXPORT into the module you want to import

[10:36] *** wamba joined
[10:39] *** labster left
[10:40] <jnthn> mst: I think that case is actually *harder* to implement than the cases of import we have now, fwiw. 

[10:40] <jnthn> I agree it looks like the simpler one though :)

[10:41] <jnthn> (And no, it shouldn't be that hard.)

[10:41] *** bjz left
[10:42] <jnthn> Somebody who wants it, feel free to hassle me about it if it looks like we're going to end up without it in 6.d. 

[10:42] <mst> jnthn: oh, interesting

[10:42] <mst> jnthn: now *that* is something I was assuming mistakenly

[10:42] <parvx> thanks all. see you some other time ...

[10:42] <mst> (I'm happy being wrong, I just like to be clear about how I'm wrong ;)

[10:43] *** parvx left
[10:45] <timotimo> release is happening today, woop woop

[10:46] <timotimo> it feels like we haven't had a release in a year

[10:46] <jnthn> Tomorrow, ain't it? :)

[10:46] <timotimo> er, perhaps

[10:46] <jnthn> I thought they were on weekends now :)

[10:47] <jnthn> I'll probably cut the MoarVM release later today though

[10:51] <timotimo> jnthn: you think you can figure out what's gotten wrong with "next" inside whenever

[10:54] <Geth>  doc: briandfoy++ created pull request #1149: Part of the call with example was marked as output

[10:54] <Geth>  doc: review: https://github.com/perl6/doc/pull/1149

[10:54] <jnthn> timotimo: Just wasn't ever implemented yet, no?

[10:54] <timotimo> it used to work

[10:54] <jnthn> o.O

[10:55] <jnthn> If so, then by accident.

[10:55] <timotimo> 2015.12 had it working

[10:55] <timotimo> hm, hold on.

[10:55] <timotimo> could also be the result wasn't interpreted correctly

[10:55] *** azawawi joined
[10:55] <jnthn> But yeah, I can make it work without much trouble

[10:55] <timotimo> committable6: 2015.12 sub foo { supply { emit($_) for 1..10; }; }; react { whenever foo() { next if $_ %% 3; say $_; }; };

[10:55] <committable6> timotimo, ¦«2015.12»: 1␤2␤4␤5␤7␤8␤10

[10:56] <azawawi> good-morning '#perl6';

[10:56] <timotimo> sup azawawi 

[10:57] <timotimo> jnthn: if you can make it work without much trouble, maybe i can make it work and you work on something harder ;)

[10:57] *** geekosaur left
[10:57] <azawawi> having fun with GTK::Simpler :)

[10:58] <Geth>  doc: d35b28bcc7 | (brian d foy)++ | doc/Language/functions.pod6

[10:58] <Geth>  doc: Part of the call with example was marked as output

[10:58] <Geth>  doc: 

[10:58] <Geth>  doc: And, I made the output look like the that for the 

[10:58] <Geth>  doc: other examples in that section. Note that those 

[10:58] <Geth>  doc: examples have extra spaces after "\n" that aren't 

[10:58] <Geth>  doc: part of the actual output.

[10:58] <Geth>  doc: review: https://github.com/perl6/doc/commit/d35b28bcc7

[10:58] <Geth>  doc: bbb9decaed | lizmat++ | doc/Language/functions.pod6

[10:58] <azawawi> Updated it yesterday to include all of the recent GTK::Simple additions

[10:58] <Geth>  doc: Merge pull request #1149 from briandfoy/master

[10:58] <Geth>  doc: 

[10:58] <Geth>  doc: Part of the call with example was marked as output

[10:58] <Geth>  doc: review: https://github.com/perl6/doc/commit/bbb9decaed

[10:58] <jnthn> timotimo: I think you just install a handler for 'NEXT' in the existing nqp::handle that takes care of emit etc. and then do...nothing. :)

[10:58] <jnthn> (And don't resume, of course.)

[10:58] *** geekosaur joined
[10:59] *** raschipi joined
[10:59] <timotimo> 'NEXT', 0

[10:59] <timotimo> that'll do.

[11:00] <timotimo> should i install a handler that'll explode when you call LAST and tell you to "please use done instead"?

[11:01] <AlexDaniel> lizmat: the numbers are for me

[11:01] *** cdg joined
[11:01] <lizmat> ah, ok  :-)

[11:01] <AlexDaniel> lizmat: I have one thousand of snippets to decide on… so…

[11:02] <timotimo> AlexDaniel: wanna write tests for next inside whenever blocks?

[11:02] <AlexDaniel> not really

[11:02] <jnthn> timotimo: no, actually LAST wants doing too

[11:02] <jnthn> timotimo: last means that we just wish to unsubscribe from this one particular whenever

[11:02] <jnthn> It's only equivalent to done if it's the last whenever

[11:04] <timotimo> oh, OK

[11:04] *** kaare_ joined
[11:04] <timotimo> i'll see about that

[11:04] <jnthn> Please remember to add tests too :)

[11:06] <timotimo> could it be that deactivate-one is the right method to call for that?

[11:07] <jnthn> umm...probably, but I suspect a .close on the tap would also be needed

[11:14] <AlexDaniel> lizmat: ok, and what about ｢given ‘this is a test’ {.say for m:global:p/\w+{say 'ok'}/ }｣ ?

[11:16] <lizmat> I'm not sure what the problem is there ?

[11:17] <timotimo> m: given ‘this is a test’ {.say for m:global:p/\w+{say 'ok'}/ }

[11:17] <camelia> rakudo-moar f97d5c: OUTPUT«ok␤ok␤｢this｣␤ok␤｢is｣␤ok␤｢a｣␤｢test｣␤»

[11:17] <lizmat> AlexDaniel: do you mean the ignoring of :p ?

[11:17] <lizmat> is it ?

[11:18] <lizmat> or the fact that "ok" is called seemingly out of order ?

[11:18] <lizmat> what was the old output?

[11:19] <timotimo> not sure if we want to guarantee order of side-effects in the regex engine

[11:20] <lizmat> indeed  :-)

[11:20] <AlexDaniel> mch: given ‘this is a test’ {.say for m:global:p/\w+{say 'ok'}/ }

[11:20] <committable6> AlexDaniel, ¦«2015.12»: ok␤｢this｣␤ok␤｢is｣␤ok␤｢a｣␤ok␤｢test｣␤¦«HEAD»: ok␤ok␤｢this｣␤ok␤｢is｣␤ok␤｢a｣␤｢test｣

[11:22] <AlexDaniel> not really…

[11:23] <AlexDaniel> but what's the reason for this order anyway?

[11:24] <lizmat> AlexDaniel: trying to figure that out now

[11:25] <AlexDaniel> mch: given ‘this is a test’ {.say for m:global:p/{say ‘before’}\w+{say ‘after: ’, $/}/ }

[11:25] <committable6> AlexDaniel, https://gist.github.com/d3cdb19c2cd340e1c92fef7c09f3d70f

[11:25] *** rindolf left
[11:25] <AlexDaniel> why is $/ empty

[11:26] <AlexDaniel> mch: given ‘this is a test’ {.say for m:global:p/\w+{say $/}/ }

[11:26] <committable6> AlexDaniel, ¦«2015.12»: ｢this｣␤｢this｣␤｢is｣␤｢is｣␤｢a｣␤｢a｣␤｢test｣␤｢test｣␤¦«HEAD»: ｢this｣␤｢is｣␤｢this｣␤｢a｣␤｢is｣␤｢test｣␤｢a｣␤｢test｣

[11:26] <AlexDaniel> mch: given ‘this is a test’ { for m:global:p/\w+{say $/}/ { } }

[11:26] <committable6> AlexDaniel, ¦«2015.12,HEAD»: ｢this｣␤｢is｣␤｢a｣␤｢test｣

[11:26] <AlexDaniel> mch: given ‘this is a test’ { for m:global:p/{}\w+{say $/}/ { } }

[11:26] <committable6> AlexDaniel, ¦«2015.12,HEAD»: ｢｣␤｢｣␤｢｣␤｢｣

[11:26] <AlexDaniel> why?

[11:28] *** rindolf joined
[11:34] <lizmat> AlexDaniel: I think the reason is here: https://github.com/rakudo/rakudo/blob/nom/src/core/Str.pm#L486

[11:34] <lizmat> the POST-ITERATOR class gets called with a Cursor (which already did the first match)

[11:35] <AlexDaniel> not sure what it means, I have to run

[11:35] <AlexDaniel> see you!

[11:35] <lizmat> the pull-one freezes the current state of the cursor, then moves it to the next position (if any)

[11:35] <lizmat> and *then* returns the value

[11:39] *** AlexDaniel left
[11:41] *** wamba left
[11:46] *** alexk joined
[11:48] <alexk> m: my int $i = 0; loop { if $i++ == 10_000_000 { last }}; say now - INIT now;

[11:48] <camelia> rakudo-moar f97d5c: OUTPUT«2.0606382␤»

[11:48] <timotimo> m: for ^10_000_000 { }; say now - INIT now

[11:48] <camelia> rakudo-moar f97d5c: OUTPUT«1.7111689␤»

[11:48] <timotimo> m: for ^10_000_000 -> int $_ { }; say now - INIT now

[11:48] <camelia> rakudo-moar f97d5c: OUTPUT«1.26552854␤»

[11:48] <alexk> m: my int $i = 0; loop { if $i++ == 10_000_000 { last } else {} }; say now - INIT now;

[11:48] <camelia> rakudo-moar f97d5c: OUTPUT«0.1727145␤»

[11:49] <timotimo> holy wow, wat?

[11:49] <timotimo> that's .. a lot faster

[11:50] <lizmat> the last one doesn't need to box / unbox HLLize de-HLLize all the time I think

[11:50] <timotimo> could be, but holy wow, that's still a bunch of time wasted with that

[11:51] <alexk> m: my int $i = 0; loop { if $i++ == 10_000_000 { last } else { Empty } }; say now - INIT now;

[11:51] <camelia> rakudo-moar f97d5c: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant value Empty in sink context (line 1)␤2.120407471␤»

[11:51] <timotimo> ah, that's close in performance

[11:52] <timotimo> maybe it keeps calling .sink on Empty all the time

[11:52] <alexk> timotimo: if you look at the ast output something like that ^^^^ is generated

[11:52] <timotimo> right

[11:53] <timotimo> m: my int $i = 0; my $nosink; loop { $nosink = do if $i++ == 10_000_000 { last } else { Empty } }; say now - INIT now

[11:53] <camelia> rakudo-moar f97d5c: OUTPUT«4.8358335␤»

[11:53] <timotimo> whoops :)

[11:54] <jnthn> `for` is implmented in terms of `map` so far, which means that you really are taking a closure and having it invoked every time

[11:54] <jnthn> The loop variant doesn't need to do that.

[11:55] <azawawi> I remember there was a link for comparing different rakudo monthly builds test suite performance. Anyone? :)

[11:55] <timotimo> on moarvm.com or .org

[11:56] <timotimo> i think it's moarvm.org/measurement/

[11:56] <alexk> m: my int $i = 0; loop { if $i == 10_000_000 { last } else { }; $i++; }; say now - INIT now;

[11:56] <camelia> rakudo-moar f97d5c: OUTPUT«5.4999069␤»

[11:57] <alexk> m: my int $i = 0; loop { if $i == 10_000_000 { last } else { }; $i = $i+1; }; say now - INIT now;

[11:57] <camelia> rakudo-moar f97d5c: OUTPUT«0.18021869␤»

[11:58] <alexk> ^^^ this is another problem ...

[11:59] *** cognominal left
[11:59] *** smls joined
[11:59] <smls> bisectable6: say 1, 2 X+ "ab".ords

[11:59] <bisectable6> smls, Bisecting by exit code (old=2015.12 new=f97d5c2). Old exit code: 1

[11:59] *** araraloren joined
[12:00] <bisectable6> smls, bisect log: https://gist.github.com/64c152ed26ff96cba295b761414c763f

[12:00] <bisectable6> smls, (2017-01-16) https://github.com/rakudo/rakudo/commit/a26f51361bfea213fa59749d7a401e09c8f2ef31

[12:01] <smls> Looks like that performance optimization was overzealous...

[12:02] <timotimo> m: say 1, 2 X+ "ab".ords

[12:02] <camelia> rakudo-moar f97d5c: OUTPUT«(98 99 99 100)␤»

[12:03] <lizmat> m: dd 1, 2 X+ "ab".ords

[12:03] <camelia> rakudo-moar f97d5c: OUTPUT«(98, 99, 99, 100).Seq␤»

[12:03] <smls> timotimo: oh, so you're saying it fixed it rather than broke it?

[12:03] <timotimo> well, it's not b0rked at the moment it looks like?

[12:03] <lizmat> looks ok to me as well ?

[12:03] <smls> It is on 2016.12-315-gdaf7e5185

[12:03] *** azawawi left
[12:03] <smls> "Cannot invoke this object (REPR: Uninstantiable; Callable)"

[12:04] <smls> will update my Rakudo and try again

[12:11] <timotimo> AlexDaniel++ for good bug huntin'

[12:18] *** agentzh joined
[12:19] <smls> timotimo, lizmat: It still breaks for me after doing `git pull && bash config.status && make install`.

[12:19] <smls> Does bisectable6 use a newer Rakudo/Moar that that gives me?

[12:19] <timotimo> i think it just uses the requested version from build/*REVISION

[12:23] *** agentzh left
[12:23] *** cdg left
[12:25] *** mr_ron joined
[12:49] <brokenchicken> .

[12:49] <yoleaux> 06:15Z <AlexDaniel> brokenchicken: it seems that your fix for RT#128783 did not remove the error message itself from rakudo. Is everything alright? https://gist.github.com/Whateverable/1c806c0dc7f836513e49a3791b3ce481

[12:49] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128783

[12:49] <yoleaux> 06:15Z <AlexDaniel> brokenchicken: (#00003518)

[12:49] <yoleaux> 08:28Z <AlexDaniel> brokenchicken: I think it was you who was surprised to know that there is substr-rw. Well, guess what, there's subbuf-rw

[12:49] <yoleaux> 08:28Z <AlexDaniel> brokenchicken: my $b = Buf.new(1,2,3); subbuf-rw($b,2,1) = Buf.new(42); dd $b

[12:49] <lizmat> smls: have you done a configure.pl lately ?

[12:50] * brokenchicken doesn't remember being surprised

[12:50] <smls> lizmat: `bash config.status` does that

[12:50] <brokenchicken> what's #00003518?

[12:51] <raschipi> brokenchicken: AlexDaniel said it's his own thing.

[12:51] <brokenchicken> mkay

[12:51] <lizmat> smls: can you post a --ll-exception stack trace ?

[12:51] *** xtreak joined
[12:52] <brokenchicken> m: use Test; is :(Str)   ~~ :("foo"), False, 'type object and a literal string';

[12:52] <camelia> rakudo-moar f97d5c: OUTPUT«ok 1 - type object and a literal string␤»

[12:52] <lizmat> m: given ‘this is a test’ {.say for m:global:p/\w+{say $/}/ }

[12:52] <camelia> rakudo-moar f97d5c: OUTPUT«｢this｣␤｢is｣␤｢this｣␤｢a｣␤｢is｣␤｢test｣␤｢a｣␤｢test｣␤»

[12:52] <lizmat> m: given ‘this is a test’ {.say for m:global:p/\w+{say "matchjed $/"}/ }

[12:52] <camelia> rakudo-moar f97d5c: OUTPUT«matchjed this␤matchjed is␤｢this｣␤matchjed a␤｢is｣␤matchjed test␤｢a｣␤｢test｣␤»

[12:53] <brokenchicken> m: :($:)

[12:53] <camelia> rakudo-moar f97d5c: ( no output )

[12:53] <brokenchicken> m: class C { method m(Int $a) { } }; say C.^lookup('m') ~~ :(C: Int)

[12:53] <camelia> rakudo-moar f97d5c: OUTPUT«False␤»

[12:54] <lizmat> .tell AlexDaniel re "given ‘this is a test’"...  the fix is going to take some performance, and the code I have now breaks some stuff, so I'm reluctant to try fix this close to the release, if ever  :-)

[12:54] <yoleaux> lizmat: I'll pass your message to AlexDaniel.

[12:54] <brokenchicken> m: sub (:) {}

[12:54] <camelia> rakudo-moar f97d5c: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3sub (:7⏏5) {}␤»

[12:54] <lizmat> .tell AlexDaniel the fix being that the iterators need to remember whether it is the first pull-one or not, which means an extra flag to be kept :-(

[12:54] <brokenchicken> m: sub ($y: $x) {}

[12:54] <yoleaux> lizmat: I'll pass your message to AlexDaniel.

[12:54] <camelia> rakudo-moar f97d5c: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Can only use the : invocant marker in the signature for a method␤at <tmp>:1␤------> 3sub ($y: $x7⏏5) {}␤    expecting any of:␤        constraint␤»

[12:55] *** abraxxa left
[12:55] <brokenchicken> .tell AlexDaniel #00003518 yeah, 'cause the error is still used when the invocant marker is present in subroutine sigs

[12:55] <yoleaux> brokenchicken: I'll pass your message to AlexDaniel.

[13:02] *** cognominal joined
[13:03] <smls> lizmat: http://pastebin.com/raw/GnWgAeZ4

[13:06] <smls> lizmat: Ohhh wait, I think my git checkout is tracking a 6 day old fork of the rakudo repo

[13:06] <timotimo> aha! that must be it, then

[13:08] <araraloren> My rakudo also throw that exception . :(

[13:09] <brokenchicken> how'd you build it??

[13:09] <araraloren> Build with source code from git 

[13:10] <brokenchicken> sounds like you forgot to perl Configure... and it's using too-old nqp/MoarVM set

[13:10] <araraloren> `/usr/bin/perl Configure.pl "--prefix=/home/sakuya/perl6" "--backends=moar" "--gen-moar" "--gen-nqp" "--make-install" $*`

[13:11] <araraloren> this is my config.status

[13:11] <araraloren> I reinstall rakudo everytime new version released

[13:12] <araraloren> Do I need a clean install ?

[13:12] <brokenchicken> What's this config.status people keep mentioning?

[13:12] <brokenchicken> oh

[13:12] <brokenchicken> Never seen it before

[13:13] <brokenchicken> araraloren: what's the code that issues that error and what version you're running that on?

[13:13] <brokenchicken> Oh.

[13:14] <brokenchicken> I'm supposed to be working right now.

[13:14] <araraloren> Exception same as http://pastebin.com/raw/GnWgAeZ4

[13:14] <brokenchicken> But still, provide those and someone will help

[13:14] <brokenchicken> araraloren: running the same code?

[13:14] <araraloren> This is Rakudo version 2016.12 built on MoarVM version 2016.12

[13:14] <araraloren> implementing Perl 6.c

[13:14] *** bjz joined
[13:14] <araraloren> Yeah same code

[13:14] <brokenchicken> c: 2016.12 say 1, 2 X+ "ab".ords

[13:14] <committable6> brokenchicken, ¦«2016.12»: Cannot invoke this object (REPR: Uninstantiable; Callable)␤  in block <unit> at /tmp/TqMpWzgvAY line 1␤ «exit code = 1»

[13:14] <raschipi> araraloren: Devs susally do that when using rakudobrew. Create a new env for every update and trow the old ones away.

[13:15] <raschipi> usually*

[13:15] <brokenchicken> araraloren: seems it was a bug in 2016.12 and it's now fixed on HEAD. So wait until compiler release tomorrow and it'll be gone

[13:15] <araraloren> raschipi, hmm, gotcha

[13:16] <raschipi> How do I ask the bot for a release status?

[13:16] <araraloren> brokenchicken, hmm, thanks 

[13:16] <brokenchicken> NeuralAnomaly: status

[13:16] <NeuralAnomaly> brokenchicken, [✘] Next release is today. Since last release, there are 93 new still-open tickets (4 unreviewed and 0 blockers) and 21 unreviewed commits. See http://perl6.fail/release/stats for details

[13:16] <brokenchicken> it's tomorrow, the bot's just off a bit with time

[13:16] <timotimo> weren't we going to make it say "in the next 24 hours" instead of "today"? :)

[13:16] <brokenchicken> Yeah :)

[13:17] <timotimo> NeuralAnomaly: source

[13:17] <NeuralAnomaly> timotimo, See: https://github.com/zoffixznet/na

[13:17] <timotimo> i've got to AFK for a bit now, though

[13:17] <brokenchicken> I think that bug is in perl6.fail and the bot's just using its API

[13:17] <brokenchicken> https://github.com/zoffixznet/r6

[13:17] <raschipi> araraloren: Because anyone will eventually forget what was changed in that environment, devs are used to start clean every time.

[13:17] <timotimo> ah, could very well be

[13:20] <araraloren> raschipi, hmm 

[13:20] <raschipi> sysadmins should do the same thing.

[13:24] <smls> bisectable6: say 1, 2 Xand "ab".ords

[13:24] <bisectable6> smls, Bisecting by output (old=2015.12 new=f97d5c2) because on both starting points the exit code is 1

[13:24] <bisectable6> smls, bisect log: https://gist.github.com/cc91fad8531989619961298050332b7a

[13:24] <bisectable6> smls, (2016-05-12) https://github.com/rakudo/rakudo/commit/33ef5a95459b95bf7256391a053550d4efe221de

[13:24] <timotimo> ver 33ef5a95459b95bf7256391a053550d4efe221de

[13:24] <timotimo> ver https://github.com/rakudo/rakudo/commit/33ef5a95459b95bf7256391a053550d4efe221de

[13:24] <brokenchicken> bisectable6: old=2016.12 new=HEAD say 1, 2 Xand "ab".ords

[13:24] <bisectable6> brokenchicken, On both starting points (old=2016.12 new=f97d5c2) the exit code is 1 and the output is identical as well

[13:24] <bisectable6> brokenchicken, Output on both points: Cannot invoke this object (REPR: Uninstantiable; Callable)␤  in block <unit> at /tmp/jCkrXCJa9n line 1␤

[13:24] <brokenchicken> Geth: ver https://github.com/rakudo/rakudo/commit/33ef5a95459b95bf7256391a053550d4efe221de

[13:24] <Geth> brokenchicken, version bump brought in these changes: https://github.com/perl6/nqp/compare/    # Load the specified byte buffer as if it was the contents of a...    # precompiled file

[13:24] <timotimo> thanks brokenchicken 

[13:25] *** bjz left
[13:25] <timotimo> um, huh?

[13:25] <brokenchicken> huh

[13:25] <brokenchicken> Ah

[13:25] <brokenchicken> It assumes there's just one change: the version file

[13:25] <brokenchicken> Geth: source

[13:25] <Geth> brokenchicken, Source at https://github.com/perl6/geth To add repo, add an 'application/json' webhook on GitHub pointing it to http://geth.perl6.party/?chan=#perl6 and choose 'Send me everything' for events to send | use `ver URL to commit` to fetch version bump changes

[13:25] <brokenchicken> file a bug :)

[13:25] <timotimo> ah!

[13:26] <brokenchicken> bisectable6: old=2016.12 new=HEAD say $*PERL.compiler.version

[13:26] <bisectable6> brokenchicken, Bisecting by output (old=2016.12 new=f97d5c2) because on both starting points the exit code is 0

[13:26] <bisectable6> brokenchicken, bisect log: https://gist.github.com/42d6babb698a5d829e5f5fa50ce6a1e7

[13:26] <bisectable6> brokenchicken, (2016-12-17) https://github.com/rakudo/rakudo/commit/82e636daf8055076d700b876db4ff2f102bbc95e

[13:26] *** pmurias joined
[13:26] <brokenchicken> m: 42

[13:26] <camelia> rakudo-moar f97d5c: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant integer 42 in sink context (line 1)␤»

[13:26] <timotimo> filed

[13:26] <brokenchicken> committable6: f97d5c  say 1, 2 Xand "ab".ords

[13:27] <committable6> brokenchicken, ¦«f97d5c»: Cannot invoke this object (REPR: Uninstantiable; Callable)␤  in block <unit> at /tmp/yziUnaoV96 line 1␤ «exit code = 1»

[13:27] <brokenchicken> m:  say 1, 2 Xand "ab".ords

[13:27] <camelia> rakudo-moar f97d5c: OUTPUT«Cannot invoke this object (REPR: Uninstantiable; Callable)␤  in block <unit> at <tmp> line 1␤␤»

[13:27] <brokenchicken> oh

[13:27] <brokenchicken> araraloren: turns out it ain't fixed on HEAD :)

[13:28] <araraloren> brokenchicken, i saw that ..

[13:28] <araraloren> :)

[13:28] *** wamba joined
[13:28] <araraloren> Hmm, isn't fix ?

[13:29] <araraloren> :P It should be in no hurry ~~

[13:35] <smls> lizmat: The error is fixed on current Rakudo for most operators, but not all. I opened an RT #130602 for it.

[13:35] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130602

[13:36] <lizmat> smls: that's because thunky operators such as and still use the old code

[13:36] *** xtreak left
[13:36] <lizmat> ah, you mentioned that

[13:36] <lizmat> ok

[13:37] <lizmat> and I'm not grokking the handling of thunkies well enough to make it use newer code

[13:37] <lizmat> (or if it is at all possible, which I think it is atm without refactoring the current "new" handling significantly)

[13:38] <lizmat> afk for a few hours&

[13:38] *** alexk left
[13:39] *** lizmat left
[13:45] *** lizmat joined
[13:48] *** lizmat_ joined
[13:50] *** lizmat left
[13:51] *** Khisanth joined
[13:51] *** wamba left
[13:54] *** lizmat_ is now known as lizmat

[13:56] *** cognominal left
[13:56] *** cpage_ left
[13:57] *** cpage_ joined
[13:58] *** agentzh joined
[14:02] *** agentzh left
[14:04] *** sammers left
[14:04] *** Ven joined
[14:05] *** cgfbee joined
[14:05] <masak> TimToady: haha, `sub thunkity_thunk` :D

[14:07] <mst> larry the elephant packed his thunk?

[14:10] *** cdg joined
[14:12] <arnsholt> mst: Completely random thought: Have you heard of the lovely Smalltalk method become:? =)

[14:12] <arnsholt> (Since you have, if not a love, at least an appreciation of horrible things and computing)

[14:13] <DrForr> What's this about horrible things? :)

[14:14] <arnsholt> It's a method that replaces the invocant object with the argument to the method

[14:15] <mst> arnsholt: that's roughly equivalent to bless($existing_object, $new_class) ?

[14:15] <arnsholt> Super convenient! \o/

[14:15] <mst> oh. it replaces the slots as well?

[14:15] <arnsholt> The object it's called on ceases to exist

[14:15] <arnsholt> All references to it now point to the argument

[14:15] <arnsholt> What could possibly go wrong?!

[14:15] <mst> you've never done %$obj = %new; bless($obj, $new_class) ?

[14:16] <mst> very useful for e.g. having a self-inflating proxy object

[14:16] <arnsholt> Yeah, that's what become: is used for as well

[14:16] *** sammers joined
[14:16] <mst> I would prefer it had a long more obviously evil name

[14:16] <arnsholt> (At work they're inflated by handling the unimplemented method error)

[14:17] <mst> oh, yeah, doing that to $_[0] in AUTOLOAD is ace.

[14:17] <arnsholt> Quite

[14:22] <mst> arnsholt: I would prefer unsafeDirtyDirectlyReplaceSelf: as a method name

[14:23] <mst> but otherwise, yes, a wonderful piece of crazy :D

[14:24] <brokenchicken> m: class Foo { method become (\SELF: \what) { SELF = what } }; my $foo = Foo.new; $foo.become: 42; dd $foo

[14:24] <camelia> rakudo-moar f97d5c: OUTPUT«Int $foo = 42␤»

[14:25] <arnsholt> Yeah, that sounds like a more reasonable name!

[14:25] * arnsholt has fallen a bit into love with Smalltalk

[14:25] <mst> arnsholt: I do things like that for unsafe methods and then people moan at me that they know what they're doing and it's too much typing

[14:25] <arnsholt> A fun little programming language

[14:26] <mst> to which my response is "and two years from now when you've left the company, the person to next touch this code will have a better time"

[14:26] <arnsholt> Serves them right, if you ask me =)

[14:26] <arnsholt> Considerations of maintainability? What do you think this is, engineering or something? =p

[14:26] *** ChoHag joined
[14:26] <timotimo> i bet become: works very well with multi-threading

[14:27] <arnsholt> timotimo: I'm sure there are no problems at all implementing it thread-safely!

[14:27] <timotimo> surely

[14:27] <arnsholt> (I'm less in love with our Smalltalk implementation at work, sadly. It was last updated in 1999)

[14:27] <mst> ow

[14:28] <mst> the company you bought it from no longer exists?

[14:28] <arnsholt> From what I can gather there's a company that owns it, sort of, but apparently the rights to the code are in something of a limbo

[14:29] <arnsholt> (And they have a different Smalltalk implementation that they'd prefer to work on as well, I think)

[14:30] <mst> yay

[14:30] <arnsholt> But since the project I'm on was put into production in May 1996, that future wrinkle was probably not trivial to divine

[14:31] * [Coke] wonders if his production coldfusion is "worse" than production smalltalk.

[14:32] <arnsholt> Hard to say =)

[14:32] <arnsholt> Parts of the code are terrible

[14:32] <arnsholt> Parts of the code are pretty nice

[14:32] <arnsholt> A few weeks ago I fiddle with code a colleague wrote 19 years ago. That was kinda fun

[14:33] <mst> and of course smalltalk code is even harder to move between implementations than e.g. CL

[14:33] <arnsholt> Yeah

[14:34] <arnsholt> The problem in our case (I think) is that the GUI builder code that drives our app is of course some proprietary thing

[14:34] <arnsholt> I've been told there's a migration kit for moving from this implementation to VisualAge Smalltalk, but apparently the legal situation of that is a bit muddy too

[14:35] <mst> yay

[14:35] <arnsholt> Yeah >.<

[14:35] <arnsholt> Although the best might be to move it to Pharo or something like that

[14:48] *** ocbtec joined
[15:05] *** MilkmanD1n is now known as MilkmanDan

[15:06] *** Ven left
[15:15] *** skids joined
[15:24] <Geth>  doc: ronaldxs++ created pull request #1150: group optional slash(/) and data so data does not parse without slash

[15:24] <Geth>  doc: review: https://github.com/perl6/doc/pull/1150

[15:25] *** agentzh joined
[15:28] <brokenchicken> mr_ron: you got commit bit, right?

[15:29] <brokenchicken> yup

[15:29] *** agentzh left
[15:29] <mr_ron> Not sure what you mean but can merge ...

[15:29] <mr_ron> Don't mind review though

[15:30] <brokenchicken> looks good to me

[15:30] <mr_ron> thanks

[15:31] <brokenchicken> "Not sure what you mean" ... Just wanted to ensure you can commit directly, instead of going through the PR route (and from what I see you can)

[15:32] *** domidumont left
[15:32] <mr_ron> Sometimes prefer PR for review.  In this case will wait for travis-ci then merge.

[15:33] <brokenchicken> m: say "\c[woman gesturing ok: medium skin tone]"

[15:33] <camelia> rakudo-moar f97d5c: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unrecognized character name woman gesturing ok: medium skin tone␤at <tmp>:1␤------> 3"\c[woman gesturing ok: medium skin tone7⏏5]"␤»

[15:33] <brokenchicken> m: say "\c[woman gesturing ok]"

[15:33] <camelia> rakudo-moar f97d5c: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unrecognized character name woman gesturing ok␤at <tmp>:1␤------> 3say "\c[woman gesturing ok7⏏5]"␤»

[15:33] <brokenchicken> orly

[15:34] <brokenchicken> m: say "\c[woman gesturing OK: medium skin tone]"

[15:34] <camelia> rakudo-moar f97d5c: OUTPUT«🙆🏽‍♀️␤»

[15:37] <timotimo> the fact that i see a "female" symbol there means my terminal can't cope with that, right? not that rakudo has a problem?

[15:37] <brokenchicken> right

[15:37] <timotimo> that's good

[15:38] <brokenchicken> m: say "\c[woman gesturing OK: medium skin tone]".uninames.join: ' | '

[15:38] <camelia> rakudo-moar f97d5c: OUTPUT«FACE WITH OK GESTURE | EMOJI MODIFIER FITZPATRICK TYPE-4 | ZERO WIDTH JOINER | FEMALE SIGN | VARIATION SELECTOR-16␤»

[15:38] *** cognominal joined
[15:38] <timotimo> variation selector 16?

[15:38] <timotimo> what does that control here?

[15:38] <brokenchicken> skintone I think

[15:38] <timotimo> no, that'? the fitzpatrick type-4

[15:38] <brokenchicken> m: say "\c[woman gesturing OK]".uninames.join: ' | '

[15:38] <camelia> rakudo-moar f97d5c: OUTPUT«FACE WITH OK GESTURE | ZERO WIDTH JOINER | FEMALE SIGN | VARIATION SELECTOR-16␤»

[15:38] <ilmari> no, that specifies emoji display

[15:38] <brokenchicken> Ah, the gender

[15:38] <brokenchicken> Ah

[15:38] <brokenchicken> OK :)

[15:38] <timotimo> no, the gender is the female sign being ZWJ'd

[15:39] <brokenchicken> ah right

[15:39] <timotimo> oh, like other displays might be black/white image, or sillouette? or something like that?

[15:39] <ilmari> m: say "\c[rainbow flag]".uninames.join: ' | '

[15:39] <camelia> rakudo-moar f97d5c: OUTPUT«WAVING WHITE FLAG | VARIATION SELECTOR-16 | ZERO WIDTH JOINER | RAINBOW␤»

[15:39] <ilmari> female sign doesn't have emoji display by default

[15:40] <ilmari> just like waving white flag doesn't either

[15:40] <timotimo> oh? so it only turns the female-sign into emoji?

[15:40] <ilmari> variation selector-16 means "emoji variant"

[15:40] <timotimo> what would implementations even display that without the variation selector 16?

[15:41] *** alimon joined
[15:42] <raschipi> Color of the skin

[15:42] <timotimo> no, color of the skin is the fitzpatrick type modifier

[15:46] <brokenchicken> it'd just display white flag and rainbow as separate chars then?

[15:46] <ilmari> variation selector-16 is for turning pre-emoji characters into emojis

[15:46] <brokenchicken> m: say "\c[WAVING WHITE FLAG]\c[ZERO WIDTH JOINER]\c[RAINBOW]"

[15:46] <camelia> rakudo-moar f97d5c: OUTPUT«🏳‍🌈␤»

[15:46] <brokenchicken> m: say "\c[WAVING WHITE FLAG]\c[VARIATION SELECTOR-16]\c[ZERO WIDTH JOINER]\c[RAINBOW]"

[15:46] <camelia> rakudo-moar f97d5c: OUTPUT«🏳️‍🌈␤»

[15:47] <brokenchicken> m: say "\c[rainbow flag]"

[15:47] <camelia> rakudo-moar f97d5c: OUTPUT«🏳️‍🌈␤»

[15:47] <raschipi> "standardized variation sequences,  # see Section 23.4, Variation Selectors,  # in The Unicode Standard, Version 9.0."

[15:47] * brokenchicken guesses that does NOT look all the same on some impl

[15:48] <ilmari> huh, riot.im on my android phone isn't showing the lines with the missing variation selector at all

[15:48] <raschipi> http://unicode.org/Public/UCD/latest/ucd/StandardizedVariants.txt says only variant sequences registeredc in that file are valid

[15:48] *** mr_ron left
[15:49] <ilmari> not in chrome either. is it the irc bridge that's eating them?

[15:49] <raschipi> The is an "emoji style" variant selector, but it's not valid here

[15:49] <timotimo> interesting

[15:51] <ilmari> I was wrong, they both show up (as rainbow flag emojis), it was just coalescing things by camelia, so the order got confusing

[15:54] <raschipi> VS15 sometimes means "text style" and VS16 sometimes means "emoji style", but it's only valid in the sequences in that file.

[15:56] <raschipi> The meaning of the variant selectors are only defined when combinationed with specific codepoints. Here it doesn't mean anything and it's an invalid sequence.

[15:57] <timotimo> OK

[15:59] <brokenchicken> here is where?

[16:00] <raschipi> above

[16:00] <brokenchicken> huh... so rakudo outputs invalid stuff?

[16:00] <timotimo> no

[16:00] <timotimo> wait

[16:00] <timotimo> what? :)

[16:01] <ilmari> no. the rainbow flag emoji includes it

[16:01] <ilmari[m]> u: 🏳️‍🌈

[16:01] <unicodable6> ilmari[m], U+1F3F3 WAVING WHITE FLAG [So] (🏳)

[16:01] <unicodable6> ilmari[m], U+FE0F VARIATION SELECTOR-16 [Mn] (◌️)

[16:01] <unicodable6> ilmari[m], https://gist.github.com/a32001f104894f4748ae28682acc0fde

[16:01] <raschipi> -> 1F3F3 FE0F; emoji style; # WAVING WHITE FLAG

[16:01] * brokenchicken doesn't follow the "Here it [...] invalid sequence"

[16:01] <ilmari> that's from android 7.1 ^^

[16:02] <raschipi> m: say "\c[woman gesturing OK: medium skin tone]".uninames.join: ' | ' #Here.

[16:02] <camelia> rakudo-moar f97d5c: OUTPUT«FACE WITH OK GESTURE | EMOJI MODIFIER FITZPATRICK TYPE-4 | ZERO WIDTH JOINER | FEMALE SIGN | VARIATION SELECTOR-16␤»

[16:02] <brokenchicken> so that's invalid?

[16:03] <raschipi> u: ♀️

[16:03] <unicodable6> raschipi, U+2640 FEMALE SIGN [So] (♀)

[16:03] <unicodable6> raschipi, U+FE0F VARIATION SELECTOR-16 [Mn] (◌️)

[16:03] <ilmari> u: ♀

[16:03] <unicodable6> ilmari, U+2640 FEMALE SIGN [So] (♀)

[16:03] <ilmari> those show differently on my phone

[16:04] <ilmari> the one with vs16 is bold and yellow, the one without is thin and black

[16:04] <ilmari> a bit like the new and old POTUSes

[16:05] <ilmari> AIUI, all characters in an emoji sequence need to be emojis, so characters that aren't by default need VS16

[16:05] <ilmari> 🏳 vs. 🏳️‍

[16:05] *** domidumont joined
[16:06] *** mr_ron joined
[16:06] * raschipi reads the standard...

[16:06] *** bazzaar joined
[16:06] <ilmari> huh, my phone shows both those as emoji

[16:06] *** cdg_ joined
[16:06] * brokenchicken sees trump jokes in both channels in my split-screen

[16:07] <brokenchicken> ... this is gonna be painful four years -_-

[16:07] <raschipi> 8

[16:07] <brokenchicken> pfft

[16:07] <brokenchicken> Yeah right

[16:08] <bazzaar> \o perl6

[16:08] <brokenchicken> \o

[16:08] <bazzaar> m: my %h = orange => "round", banana => "curved", plum => "oval", starfruit => "spikey"; say %h<>:k.join(","); say %h<>:v.join(",");

[16:08] <camelia> rakudo-moar f97d5c: OUTPUT«plum,starfruit,banana,orange␤oval,spikey,curved,round␤»

[16:09] <brokenchicken> Well, as a symbolic gesture, I'm eating a Kinder Surprise egg right now.

[16:09] *** cdg left
[16:09] <raschipi> Yep, in my reading at least, the standard is clear. VS16 shouldn't be there.

[16:10] <ilmari> raschipi: both rakudo and android disagree

[16:11] <bazzaar> The order of both keys and values seems repeatable (using the adverb access), not sure if I should rely on :k and :v always being in synch

[16:11] <raschipi> ilmari: The standard should be ammended then.

[16:11] <brokenchicken> bazzaar: like how

[16:12] <bazzaar> thought that hash access was random?

[16:14] <ilmari> raschipi: http://unicode.org/emoji/charts/emoji-zwj-sequences.html

[16:14] <ilmari> #601, rainbow flag, U+1F3F3 U+FE0F U+200D U+1F308

[16:14] <ilmari> raschipi: is the version you're reading updated for emoji v4.0?

[16:16] <raschipi> ilmari: Thanks for that. 

[16:16] <ilmari> http://unicode.org/reports/tr51/index.html

[16:16] <ilmari> specifically http://unicode.org/reports/tr51/index.html#Emoji_Implementation_Notes

[16:19] <perlpilot> bazzaar: hash access is random.  I don't think your implied question about :k and :v makes sense as it's the slice that gives you the order.  So ... as long as the zen slice gives you hash in the same order each time, then application of :k and :v should give you "in synch" information.

[16:20] <raschipi> Yep. The standardized variants text should be ammended to say there's a third authorized use for variant selectors.

[16:21] <perlpilot> bazzaar: And, of course, changing the hash will probably cause the zen slice to change the order as compared with before the change.

[16:21] *** donaldh joined
[16:22] <donaldh> m: NaN eqv NaN

[16:22] <camelia> rakudo-moar f97d5c: OUTPUT«WARNINGS for <tmp>:␤Useless use of "eqv" in expression "NaN eqv NaN" in sink context (line 1)␤»

[16:23] <brokenchicken> m: say NaN eqv NaN

[16:23] <camelia> rakudo-moar f97d5c: OUTPUT«True␤»

[16:23] <bazzaar> perlpilot: thanks for the thorough explanation, I will investigate zen slice 

[16:23] <donaldh> oh yeah

[16:23] <perlpilot> bazzaar: %h<> is the zen slice (in case that wasn't clear)

[16:23] <donaldh> m: my $a = NaN; my $b = NaN; say $a eqv $b

[16:23] <camelia> rakudo-moar f97d5c: OUTPUT«False␤»

[16:24] <brokenchicken> hm

[16:24] <bazzaar> aahh, that is helpful :-)

[16:24] <perlpilot> same as %h{}

[16:25] <perlpilot> https://docs.perl6.org/language/subscripts.html#Zen_slices

[16:25] <timotimo> (but <> on a $ variable is decont)

[16:26] <timotimo> well, really what you get if you zenslice a scalar is deconting

[16:26] <timotimo> decontation?

[16:26] <brokenchicken> donaldh: containered check follows a different path that has `==` in it. Will take a look after work.

[16:26] <perlpilot> timotimo: "decontainerization"

[16:26] <perlpilot> timotimo: But I like "deconting" since it's so much shorter :)

[16:26] <timotimo> decontainification

[16:27] <brokenchicken> m: say ($ = -0e0) eqv ($ = 0e0)

[16:27] <camelia> rakudo-moar f97d5c: OUTPUT«True␤»

[16:27] <brokenchicken> m: say -0e0 === 0e0

[16:27] <camelia> rakudo-moar f97d5c: OUTPUT«False␤»

[16:27] <brokenchicken> m: say -0e0 eqv 0e0

[16:27] <camelia> rakudo-moar f97d5c: OUTPUT«True␤»

[16:27] <brokenchicken> that prolly should give False, eh?

[16:27] <perlpilot> timotimo: d16n  (*that* won't be confusing  ;)

[16:28] <timotimo> :)

[16:28] <timotimo> roll a d16n?

[16:28] <donaldh> m: say NaN == NaN

[16:28] <camelia> rakudo-moar f97d5c: OUTPUT«False␤»

[16:28] <timotimo> sixteenn? ;)

[16:30] <raschipi> donaldh: http://stackoverflow.com/a/1573715/7442610

[16:33] <donaldh> How does one test for NaN then?

[16:33] <brokenchicken> donaldh: NaN === NaN

[16:33] <brokenchicken> donaldh: or NaN eqv NaN

[16:34] <brokenchicken> m: say NaN === 0/0

[16:34] <camelia> rakudo-moar f97d5c: OUTPUT«False␤»

[16:34] <raschipi> m: say NaN.WHAT

[16:34] <camelia> rakudo-moar f97d5c: OUTPUT«(Num)␤»

[16:34] <brokenchicken> :o

[16:34] <timotimo> you can also NaN eq NaN :P

[16:34] <brokenchicken> Ah right

[16:35] <brokenchicken> At that point it still a Rat

[16:35] <timotimo> but stringifying floats is annoying :P

[16:35] <brokenchicken> m: say NaN === (0/0).Num

[16:35] <camelia> rakudo-moar f97d5c: OUTPUT«True␤»

[16:35] <brokenchicken> \o/

[16:35] <donaldh> brokenchicken: so the containerised eqv check falling through to == looks like a bug then?

[16:36] <raschipi> m: say NaN == NaN; say NaN != NaN;

[16:36] <camelia> rakudo-moar f97d5c: OUTPUT«False␤True␤»

[16:36] <raschipi> m: say NaN === NaN; say NaN != NaN;

[16:36] <camelia> rakudo-moar f97d5c: OUTPUT«True␤True␤»

[16:36] <brokenchicken> donaldh: yup. I'm already spectesting a fix for it

[16:37] <donaldh> brokenchicken++

[16:37] <raschipi> Is there any other value that tests this way? 

[16:38] <brokenchicken> raschipi: nope. IIRC even the .isNaN method impl is just a { self != self }

[16:38] <donaldh> https://docs.perl6.org/type/Num#NaN might benefit from more detail of NaN traps :-)

[16:39] <brokenchicken> donaldh: well volunteered! https://github.com/perl6/doc/blob/master/doc/Type/Num.pod6#L13

[16:39] *** khw joined
[16:40] <donaldh> indeed :-)

[16:40] <raschipi> m: say ?NaN

[16:40] <camelia> rakudo-moar f97d5c: OUTPUT«True␤»

[16:41] <raschipi> m: say "quack" if (0/0).Num

[16:41] <camelia> rakudo-moar f97d5c: OUTPUT«quack␤»

[16:47] *** wamba joined
[16:48] *** bjz joined
[16:49] *** ChoHag left
[16:50] *** nicq20 joined
[16:51] <nicq20> Hello \o

[16:51] <raschipi> hi o/

[16:54] <pmurias> jnthn: p6capturelex checks if we are the current ctx is the right outer for the block we are setting if not it does nothing.

[16:54] <pmurias> jnthn: when does the do nothing case happen?

[16:55] <Geth>  doc: b3cca33cda | (Ronald Schmidt)++ | doc/Language/grammar_tutorial.pod6

[16:55] <Geth>  doc: group optional slash(/) and data so data does not parse without slash (/)

[16:55] <Geth>  doc: review: https://github.com/perl6/doc/commit/b3cca33cda

[16:55] <Geth>  doc: a50900ff75 | (Ronald Schmidt)++ | doc/Language/grammar_tutorial.pod6

[16:55] <Geth>  doc: Merge pull request #1150 from ronaldxs/grammar_tutorial-grouping

[16:55] <Geth>  doc: 

[16:55] <Geth>  doc: group optional slash(/) and data so data does not parse without slash

[16:55] <Geth>  doc: review: https://github.com/perl6/doc/commit/a50900ff75

[16:56] *** jeek left
[16:57] *** jeek joined
[16:57] *** jeek left
[16:57] <jnthn> pmurias: When we scerwed up during code-gen 

[16:57] <jnthn> (To find a bunch of places to fix in Actions.nqp, just stick a throw in the else)

[16:58] <jnthn> pmurias: Once we nail all of those cases, we can remove the check and it'll error out instead

[16:58] *** st_elmo joined
[17:02] *** jeek joined
[17:06] <brokenchicken> m: say (Date.new(:2016year).DateTime.Instant - Date.new(:2015year).DateTime.Instant) eqv Duration.new(31536001)

[17:06] <camelia> rakudo-moar f97d5c: OUTPUT«True␤»

[17:06] <brokenchicken> hm, that now fails

[17:06] <brokenchicken> m: say 0 eqv 0e0

[17:06] <camelia> rakudo-moar f97d5c: OUTPUT«False␤»

[17:07] <brokenchicken> donaldh: delaying fix for next ~6 hours. There's some fallout with Duration. Gonna look further after work :)

[17:07] <donaldh> brokenchicken: thx

[17:07] <brokenchicken> m: say ($ = 0) eqv ($ = 0e0)

[17:07] <camelia> rakudo-moar f97d5c: OUTPUT«False␤»

[17:12] *** AlexDaniel joined
[17:18] <AlexDaniel> BOOM!

[17:18] <yoleaux> 12:54Z <lizmat> AlexDaniel: re "given ‘this is a test’"...  the fix is going to take some performance, and the code I have now breaks some stuff, so I'm reluctant to try fix this close to the release, if ever  :-)

[17:18] <yoleaux> 12:54Z <lizmat> AlexDaniel: the fix being that the iterators need to remember whether it is the first pull-one or not, which means an extra flag to be kept :-(

[17:18] <yoleaux> 12:55Z <brokenchicken> AlexDaniel: #00003518 yeah, 'cause the error is still used when the invocant marker is present in subroutine sigs

[17:18] <AlexDaniel> okay

[17:18] <AlexDaniel> thanks everyone, you really make my life easier

[17:22] <brokenchicken> \o/

[17:23] <pmurias> jnthn: so we screw up while generating QAST?

[17:23] *** st_elmo left
[17:25] *** zakharyas left
[17:25] *** donaldh left
[17:26] *** agentzh joined
[17:30] *** aindilis joined
[17:37] *** ChoHag joined
[17:56] *** jeek left
[17:56] *** jeek joined
[17:58] *** lukaramu joined
[17:58] *** telex joined
[17:59] *** ChoHag left
[18:00] <brokenchicken> agentzh: BTW, yesterday we showed Numeric|String as a substitute for !ref, but I see now Duration type is also Numeric, which isn't really the "basic" type like the rest of them in that group.

[18:01] <raschipi> It kinda is.

[18:02] *** nicq20 left
[18:02] *** smls left
[18:02] *** smls_ joined
[18:04] *** bjz left
[18:07] *** AlexDaniel left
[18:08] *** labster joined
[18:11] *** agentzh left
[18:12] *** Vynce joined
[18:13] <brokenchicken> m: my $a = NaN; my $b = NaN; say $a eqv $b

[18:13] <camelia> rakudo-moar 3f80e1: OUTPUT«True␤»

[18:13] <brokenchicken> m: my $a = -0e0; my $b = 0e0; say $a eqv $b

[18:13] <camelia> rakudo-moar 3f80e1: OUTPUT«False␤»

[18:13] <brokenchicken> There. Fixed forever \o/

[18:14] *** AlexDaniel joined
[18:20] *** ggoebel left
[18:21] *** ggoebel joined
[18:21] *** Vynce left
[18:25] *** FROGGS joined
[18:27] *** AlexDaniel left
[18:31] *** wamba left
[18:33] *** kjh joined
[18:33] *** kjh left
[18:41] *** rmusial left
[18:41] *** labster left
[18:42] *** domidumont left
[18:44] *** agentzh joined
[18:47] *** labster joined
[18:48] *** abruanese joined
[18:48] *** rmusial joined
[18:50] *** khw left
[18:53] *** hankache joined
[18:58] <hankache> hello #perl6

[18:58] <timotimo> hi

[18:59] *** zakharyas joined
[19:01] *** lmmx joined
[19:01] <hankache> hiya timo

[19:01] <brokenchicken> \o

[19:02] *** dwarring joined
[19:04] *** geekosaur left
[19:07] *** geekosaur joined
[19:08] *** cdg_ left
[19:14] <jnthn> pmurias: Yes, in a handful of cases where something needs to be thunked but we don't know until "too late", essentially.

[19:16] *** kurahaupo__ left
[19:16] *** kurahaupo__ joined
[19:19] *** agentzh left
[19:27] *** lmmx left
[19:27] *** lmmx joined
[19:31] *** agentzh joined
[19:37] <RabidGravy> boom!

[19:37] <brokenchicken> baam!

[19:38] <geekosaur> biim!

[19:40] <perlpilot> beem!

[19:40] <jeek> buum!

[19:41] <perigrin> bwm!

[19:41] <moritz> blerg!

[19:41] <brokenchicken> m: .say for <a o u i e>.combinations(2).map: "b" ~ *.join ~ "m"

[19:41] <camelia> rakudo-moar 3f80e1: OUTPUT«baom␤baum␤baim␤baem␤boum␤boim␤boem␤buim␤buem␤biem␤»

[19:42] <brokenchicken> m: .say for <a o u i e a o u i e a>.combinations(2).unique.map: "b" ~ *.join ~ "m"

[19:42] <camelia> rakudo-moar 3f80e1: OUTPUT«baom␤baum␤baim␤baem␤baam␤baom␤baum␤baim␤baem␤baam␤boum␤boim␤boem␤boam␤boom␤boum␤boim␤boem␤boam␤buim␤buem␤buam␤buom␤buum␤buim␤buem␤buam␤biem␤biam␤biom␤bium␤biim␤biem␤biam␤beam␤beom␤beum…»

[19:43] *** bjz joined
[19:44] <perigrin> bøüm

[19:44] * perigrin glance at brokenchicken 

[19:44] *** st_elmo joined
[19:44] <perigrin> there are more codepoints beneath heaven and earth than are dreamt of in your one-liner horatio

[19:45] *** nicq20 joined
[19:46] <brokenchicken> :D

[19:47] <araraloren> :L

[19:48] <gfldex> m: say "b" «~« <a o u i e>.combinations(2) »~» "m"

[19:48] <camelia> rakudo-moar 3f80e1: OUTPUT«((bam bom) (bam bum) (bam bim) (bam bem) (bom bum) (bom bim) (bom bem) (bum bim) (bum bem) (bim bem))␤»

[19:48] <brokenchicken> m: S:ignoremark:samemark/ou/ae/.say given "bøüm"

[19:48] <camelia> rakudo-moar 3f80e1: OUTPUT«bøüm␤»

[19:48] <brokenchicken> :(

[19:48] <perlpilot> peregrin++ wins IMHO

[19:49] <brokenchicken> Why did my thing didn't work?

[19:49] <brokenchicken> m: S/:ignoremark :samemark ou/ae/.say given "bøüm"

[19:49] <camelia> rakudo-moar 3f80e1: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unrecognized regex modifier :samemark␤at <tmp>:1␤------> 3S/:ignoremark :7⏏5samemark ou/ae/.say given "bøüm"␤»

[19:49] <brokenchicken> orly

[19:50] <brokenchicken> m: S:samemark/:ignoremark ou/ae/.say given "bøüm"

[19:50] <camelia> rakudo-moar 3f80e1: OUTPUT«bøüm␤»

[19:50] <moritz> m: say S:samemakr/ou/ae/ given "bøüm";

[19:50] <camelia> rakudo-moar 3f80e1: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Adverb samemakr not allowed on substitution␤at <tmp>:1␤------> 3say S:samemakr/ou/ae/7⏏5 given "bøüm";␤»

[19:50] <moritz> m: say S:samemark/ou/ae/ given "bøüm";

[19:50] <camelia> rakudo-moar 3f80e1: OUTPUT«bøüm␤»

[19:50] <moritz> :samemark implies :ignoremark

[19:51] <brokenchicken> weird that it does

[19:51] <brokenchicken> Also, why it doesn't work tho?

[19:51] <perlpilot> whyfor is :samemark not recognized on the inside too?

[19:52] <moritz> perlpilot: because it applies to a substitution, not a regex

[19:52] <brokenchicken> ignore mark => (ignore marks as far as match is concerned); samemark => (keep marks the same for replacement).... How come one implies the other?

[19:52] <perlpilot> Hrm.   Then how do you apply :samemark for a portion of a substitution?

[19:52] <moritz> m: say "ø" ~~ rx:ignoremark/o/

[19:52] <camelia> rakudo-moar 3f80e1: OUTPUT«Nil␤»

[19:53] <moritz> m: say "ü" ~~ rx:ignoremark/u/

[19:53] <camelia> rakudo-moar 3f80e1: OUTPUT«｢ü｣␤»

[19:53] <brokenchicken> I guess it ain't a mark

[19:53] <moritz> m: say "ø".uniname

[19:53] <camelia> rakudo-moar 3f80e1: OUTPUT«LATIN SMALL LETTER O WITH STROKE␤»

[19:53] <moritz> .oO( it's a stroke, not a mark )

[19:53] <mr_ron> m: https://gist.github.com/ronaldxs/8cb7de26fedcf8ed3c75984f5aa87b54

[19:53] <camelia> rakudo-moar 3f80e1: OUTPUT«ok 1 - Match first textual rule OK␤not ok 2 - Match second textual rule fail␤␤# Failed test 'Match second textual rule fail'␤# at <tmp> line 17␤# expected: 'n'␤#      got: 'na_2'␤»

[19:54] <brokenchicken> m: S:g/ü/o/.say with "uü"

[19:54] <camelia> rakudo-moar 3f80e1: OUTPUT«uo␤»

[19:54] <brokenchicken> m: S:g:samemark/ü/o/.say with "uü"

[19:54] <camelia> rakudo-moar 3f80e1: OUTPUT«oö␤»

[19:54] <brokenchicken> that's LTA IMO, but I guess there are reasons for it being that way :/

[19:54] <mr_ron> Is the sentence from S05 at the top of the gist "applicable" and part of ltm?

[19:55] <brokenchicken> .o( prolly cause you can replicate the mark in the sub manually... )

[19:58] *** hankache left
[19:58] *** hankache_ joined
[20:02] <jnthn> mr_ron: Hm, that's interesting. I'm aware of that rule, and I'm pretty sure it's applicable when it comes to protoregexes.

[20:02] <jnthn> mr_ron: I figure it probably should be in alternations too. I suspect something is a bit off with the second of those two...

[20:04] <mr_ron> I didn't notice testing for the rule in https://github.com/perl6/roast/blob/master/S05-metasyntax/longest-alternative.t

[20:04] *** bjz left
[20:04] <mr_ron> I wasn't checking protoregexes though

[20:04] *** zakharyas left
[20:05] <jnthn> mr_ron: Yeah. I mean, it's clear the tie-breaker about MRO can't possibly apply to alternations.

[20:05] <jnthn> But the textual order one can.

[20:06] <brokenchicken> What's textual order? Where they appear in source?

[20:06] <jnthn> brokenchicken: Yes

[20:06] <brokenchicken> Ah

[20:06] <jnthn> It's the final tie-breaker

[20:06] <jnthn> Apart from we don't seem to apply that correctly in the case of | if I'm reading mr_ron's gist right

[20:07] <jnthn> Unless something else odd is going on

[20:07] <jnthn> It's...a bit odd that the change of kind of charclass influences it

[20:07] *** hchienjo joined
[20:07] *** agentzh left
[20:07] <jnthn> Probably worth an RT.

[20:07] <mr_ron> brokenchicken: I was wondering too.  It would appear to mean the first declared rule and not the first in the alternation but not perfectly clear ...

[20:08] *** revere joined
[20:08] <jnthn> afk for a bit

[20:08] *** hankache_ left
[20:09] <mr_ron> jnthn - thanks will look at RT and roast issues

[20:10] *** raschipi left
[20:11] <brokenchicken> is mt1957 here?

[20:11] <dwarring> "camelia" say 'hi'

[20:11] <brokenchicken> m: say "hi"

[20:11] <camelia> rakudo-moar 3f80e1: OUTPUT«hi␤»

[20:11] * dwarring trying to open private eval window

[20:11] *** abruanese left
[20:12] <brokenchicken> dwarring: /query camelia

[20:12] <brokenchicken> /msg camelia m: say "hi"

[20:12] *** rmusial left
[20:13] <dwarring> brokenchicken: thanks

[20:13] *** agentzh joined
[20:18] *** rmusial joined
[20:20] <dwarring> bisect: sub clip-to ($min, $v is rw, $max) { $v = ($min max $v) min $max }; sub blah ( Array() :$rgbd ) { clip-to 0, $_, 255 for @$rgbd; }; blah(rgbd => <.086, .165, .282> );

[20:20] <bisectable6> dwarring, Bisecting by exit code (old=2015.12 new=3f80e13). Old exit code: 0

[20:20] <bisectable6> dwarring, bisect log: https://gist.github.com/877f61a45080d12fa694e1560a55542f

[20:20] <bisectable6> dwarring, (2016-12-30) https://github.com/rakudo/rakudo/commit/a567eb44cae0cdae0b83e7f37ae3ddaa2743df24

[20:21] <brokenchicken> dwarring: Color module?

[20:21] <brokenchicken> That's should be fixed on HEAD

[20:21] <dwarring> yeah, there's a second regression in t/01-new-key-value.t 

[20:21] <brokenchicken> oh damn

[20:21] * brokenchicken is now looking at 4 things at once :o

[20:22] <brokenchicken> time to de-parralelize :)

[20:22] <dwarring> I think it's a different problem

[20:22] <brokenchicken> m: sub clip-to ($min, $v is rw, $max) { $v = ($min max $v) min $max }; sub blah ( Array() :$rgbd ) { clip-to 0, $_, 255 for @$rgbd; }; blah(rgbd => <.086, .165, .282> );

[20:22] <camelia> rakudo-moar 3f80e1: OUTPUT«P6opaque: no such attribute '$!denominator' in type RatStr when trying to get a value␤  in sub clip-to at <tmp> line 1␤  in sub blah at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:23] <brokenchicken> m: say .4 cmp <.5>

[20:23] <camelia> rakudo-moar 3f80e1: OUTPUT«Less␤»

[20:23] <brokenchicken> m: say .4 max <.5>

[20:23] <camelia> rakudo-moar 3f80e1: OUTPUT«.5␤»

[20:23] <brokenchicken> m: say .4 min <.5>

[20:23] <camelia> rakudo-moar 3f80e1: OUTPUT«0.4␤»

[20:23] <brokenchicken> m: dd <.5>

[20:23] <camelia> rakudo-moar 3f80e1: OUTPUT«RatStr.new(0.5, ".5")␤»

[20:23] * brokenchicken shrugs

[20:23] <brokenchicken> gonna look at this in ~1hr

[20:25] <dwarring> I'll raise an RT

[20:25] <brokenchicken> Thanks

[20:25] *** rmusial left
[20:26] <nicq20> Why can I not inherit from Bool?

[20:26] <brokenchicken> nicq20: cause it's an enum and not a class

[20:27] <nicq20> brokenchicken: Oh, ok. That makes sense then.

[20:27] *** FROGGS left
[20:29] <dwarring> brokenchicken: https://rt.perl.org/Ticket/Display.html?id=130606

[20:30] *** kyan joined
[20:30] <brokenchicken> thanks

[20:32] *** abruanese joined
[20:32] *** rmusial joined
[20:38] *** girafe joined
[20:40] <gfldex> is there a reasonable way to render html to svg?

[20:42] <timotimo> what happens when you open a .html file in inkscape? :P

[20:42] <gfldex> updating inkscape right now

[20:43] <brokenchicken> html -> wkhtmltopdf -> PDF and pdf2svg?

[20:43] <brokenchicken> (or use chrome's Print -> save to PDF to get PDF manually)

[20:44] <gfldex> timotimo: it wont let me but it can open pdf

[20:45] <timotimo> makes sense

[20:47] *** TEttinger joined
[20:50] <brokenchicken> hm... Test.pm6 isn't very thread-safe, though I'm unsure if it's a problem really... 

[20:50] *** agentzh left
[20:50] <brokenchicken> use Test; for ^100 .hyper: :batch { ok 1 } # <-- this generated two tests numbered 93 and missed test 92

[20:50] <brokenchicken> like... the internal test counter isn't threadsaef

[20:51] *** trnh joined
[20:51] *** trnh left
[20:51] *** trnh joined
[20:51] *** trnh left
[20:51] *** trnh joined
[20:51] *** kurahaupo__ left
[20:52] *** kurahaupo__ joined
[20:53] *** cale2 joined
[20:53] *** kurahaupo__ left
[20:53] *** kurahaupo__ joined
[20:55] *** hchienjo left
[20:55] *** bjz joined
[20:55] *** kurahaupo_ joined
[20:56] *** kurahaupo_ left
[20:56] *** Gasher left
[20:56] *** kurahaupo_ joined
[20:59] *** kurahaupo__ left
[21:00] *** sameroom_io joined
[21:00] *** kurahaupo__ joined
[21:01] *** espadrine_ joined
[21:03] <moritz> it's just an Int

[21:03] <moritz> incrementing it is what's not thread safe

[21:04] *** kurahaupo_ left
[21:07] *** kurahaupo__ left
[21:07] *** sameroom_io left
[21:07] *** kurahaupo__ joined
[21:08] *** cdg joined
[21:08] <brokenchicken> grrrr... Friday. End of business day. I've just typed my last email and about to hit SEND... and the damn video card on this lappy crashes and I have to restart it :|

[21:09] <brokenchicken> The god that doesn't exist really hates me.

[21:09] <brokenchicken> moritz: well, yeah

[21:09] <brokenchicken> int even

[21:11] *** nicq20 left
[21:21] *** agentzh joined
[21:22] *** girafe2 joined
[21:23] *** smls_ left
[21:23] *** kurahaupo__ left
[21:24] *** kurahaupo__ joined
[21:25] *** bjz left
[21:25] *** girafe left
[21:25] <brokenchicken> m: say .5 cmp <.5>

[21:25] <camelia> rakudo-moar 3f80e1: OUTPUT«Same␤»

[21:25] <brokenchicken> m: say 5 cmp <.5>

[21:25] <camelia> rakudo-moar 3f80e1: OUTPUT«P6opaque: no such attribute '$!denominator' in type RatStr when trying to get a value␤  in block <unit> at <tmp> line 1␤␤»

[21:26] <brokenchicken> m: say 5 cmp .5

[21:26] <camelia> rakudo-moar 3f80e1: OUTPUT«More␤»

[21:26] *** sameroom_io joined
[21:26] <brokenchicken> Ahhhh

[21:26] *** sameroom_io left
[21:26] *** andrei__ joined
[21:26] <brokenchicken> I get where I messed up

[21:28] <brokenchicken> m: use nqp; nqp::getattr(<.5>, <.5>.WHAT, '$!denominator')

[21:28] <camelia> rakudo-moar 3f80e1: OUTPUT«P6opaque: no such attribute '$!denominator' in type RatStr when trying to get a value␤  in block <unit> at <tmp> line 1␤␤»

[21:28] <brokenchicken> hm, this one's provided by Rational role, but how can I found out into which type it got mixed into? :/

[21:29] *** sergot joined
[21:29] *** sr2016 joined
[21:31] <brokenchicken> As in, what do I replace <.5>.WHAT with to always have it be the type Rational got mixed into?

[21:32] *** st_elmo left
[21:34] *** andrei__ left
[21:34] <gfldex> lolibloggedalittleabouttravis: https://gfldex.wordpress.com/2017/01/20/once-a-week/

[21:37] *** bazzaar left
[21:37] * brokenchicken wishes that didn't say "Rakudo is still changing quickly"

[21:38] <gfldex> how many commits does rakudo see each week?

[21:38] <brokenchicken> gfldex: but to the uninitiated that reads "Perl 6 is still unstable! Look at me! I found a regression!"

[21:39] <gfldex> the uninitiated don't read my blog

[21:39] *** kurahaupo_ joined
[21:39] <gfldex> in fact hardly anyone reads my blog

[21:39] *** kurahaupo_ left
[21:40] *** kurahaupo__ left
[21:40] *** kurahaupo__ joined
[21:46] *** sergot left
[21:47] *** jdmmmmm_ joined
[21:48] *** jdmmmmm_ left
[21:51] *** trnh left
[21:53] *** sr2016 left
[21:54] *** jdmmmmm joined
[21:57] *** jdmmmmm left
[21:57] *** trnh joined
[21:57] *** trnh left
[21:57] *** trnh joined
[22:00] *** ggoebel left
[22:04] <perlpilot> gfldex: if you mention your blog here while I'm somewhat paying attention, I read your blog :)

[22:08] *** rindolf left
[22:09] <moritz> gfldex++ # blog

[22:10] *** skids left
[22:10] *** trnh left
[22:11] <perigrin> perlpilot: you're hardly the unintiated though

[22:11] <timotimo> good good

[22:12] * moritz tweeted it

[22:13] <moritz> 160 potential readers

[22:13] *** alimon left
[22:14] *** kyan left
[22:15] *** ggoebel joined
[22:19] <cale2> What was the link to that perl6 playground that someone made?

[22:19] <cale2> It was like an online interpreter

[22:19] <jdv79> glot.io?

[22:19] <timotimo> one is glot, there's another one that i forgot

[22:19] <cale2> No, it had lessons on it too

[22:20] <cale2> similar to the tour of golang almost

[22:20] <MasterDuke> exercism.com? something like that?

[22:20] <yoleaux> 07:59Z <AlexDaniel> MasterDuke: was this change intended? commit: 73797b759^,73797b759 say lines.elems; say lines[0]

[22:20] <yoleaux> 07:59Z <AlexDaniel> MasterDuke: (#00005346)

[22:20] *** RabidGravy left
[22:21] *** mr_ron left
[22:21] <cale2> http://tryperl6.org/

[22:23] <MasterDuke> http://exercism.io/languages/perl6/launch is what i was thinking of

[22:24] <cale2> https://syedreza.org/node/p/70

[22:24] <cale2> I guess he didn't open source the website though

[22:25] <cale2> would be cool if the community could help build the interactive tutorials

[22:27] *** kurahaupo_ joined
[22:28] *** kurahaupo_ left
[22:29] *** kurahaupo_ joined
[22:29] *** kurahaupo__ left
[22:30] *** kurahaupo__ joined
[22:33] *** kurahaupo_ left
[22:33] *** trnh joined
[22:34] *** ufobat left
[22:35] *** bjz joined
[22:35] *** revere left
[22:41] *** mr_ron joined
[22:45] *** kurahaupo__ left
[22:45] <b2gills> tryperl6.org still has an old version of Rakudo

[22:45] *** kurahaupo__ joined
[22:46] *** kurahaupo_ joined
[22:48] *** jdmmmmm joined
[22:48] <timotimo> how old we talking?

[22:49] *** lukaramu left
[22:50] <cale2> I'd send him an email on his website, but his email form requires you to find a number pattern haha

[22:50] <cale2> I'm horrible at math

[22:50] *** revere joined
[22:50] *** kurahaupo__ left
[22:52] *** jferrero joined
[22:53] *** kurahaupo_ left
[22:54] *** kurahaupo__ joined
[22:56] *** ChoHag joined
[22:59] <b2gills> timotimo: It was built in June

[22:59] <timotimo> last year or the year before that? :)

[23:06] <b2gills> ｢say $*PERL.compiler.build-date｣ returns with 2016-06-12T10:17:34Z

[23:10] *** kurahaupo_ joined
[23:10] *** kurahaupo_ left
[23:11] *** kurahaupo__ left
[23:11] *** kurahaupo_ joined
[23:12] <brokenchicken> it'll also let any spammer send crap. better lock down the network

[23:20] *** trnh left
[23:23] *** kurahaupo__ joined
[23:24] *** kurahaupo__ left
[23:24] *** kurahaupo_ left
[23:24] *** kurahaupo__ joined
[23:25] *** jferrero left
[23:25] *** jferrero joined
[23:25] *** jferrero left
[23:25] *** jferrero joined
[23:27] *** kyan joined
[23:29] *** kurahaupo_ joined
[23:29] *** kurahaupo_ left
[23:29] *** kurahaupo_ joined
[23:30] *** kurahaupo_ left
[23:31] *** kurahaupo_ joined
[23:31] *** kurahaupo__ left
[23:33] *** kurahaupo__ joined
[23:33] *** kurahaupo_ left
[23:37] *** cale2 left
[23:43] *** bjz left
[23:44] *** jdmmmmm left
[23:46] *** bjz joined
[23:47] *** kurahaupo_ joined
[23:49] *** agentzh left
[23:49] *** kurahaupo__ left
[23:55] *** mr_ron left
[23:56] *** bpmedley joined
[23:59] *** revere left
[23:59] *** revere joined
