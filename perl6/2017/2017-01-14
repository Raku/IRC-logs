[00:01] *** cibs joined
[00:01] <AlexDaniel> broke a laptop charger, fixed it, had a weird visit to a doctor, then fell asleep for more than 12 hours… that's it

[00:02] <AlexDaniel> hmm, I have an interesting definition of “whoah”…

[00:08] <samcv> anyone know if for @things -> $thing { } incurs performance decreases?

[00:08] <samcv> compared to using $_

[00:09] <jnthn> No

[00:09] <jnthn> They generate almost idential code

[00:09] <AlexDaniel> well, I'd say measure it

[00:10] <jnthn> Yes, and if it's a measurable difference then tell me about it so I can fix it. :)

[00:10] <samcv> kk

[00:10] <samcv> good

[00:11] <jnthn> Note that the answer for if foo() { } vs. if foo() -> $x { } is that the latter is typically going to be more costly.

[00:11] <jnthn> Though unless you're on a reall hot path...not likely an issue

[00:11] <jnthn> *really

[00:16] *** trnh joined
[00:16] *** trnh left
[00:16] *** trnh joined
[00:17] *** wamba joined
[00:18] *** vendethiel joined
[00:21] *** ufobat left
[00:22] *** shayan_ joined
[00:27] <samcv> is processing the UCD data files a hot path?

[00:27] <samcv> it looks a lot

[00:28] <jnthn> Well, App::MoarVM::Analyzer routinely analayzes hundreds of megabytes of data

[00:29] <samcv> cool

[00:29] <jnthn> It made some smart decisions about data structure representation.

[00:29] <jnthn> And used concurrency to improve performance :)

[00:29] <jnthn> But does fine enough

[00:30] <jnthn> I guess you're working on the p6ificatin of ucdc2c.pl? :)

[00:31] <samcv> yeah

[00:31] <samcv> more a whole rewrite

[00:31] <jnthn> <3

[00:31] <jnthn> Nice :)

[00:31] <jnthn> samcv++

[00:31] <samcv> at least the foundation

[00:31] <jnthn> *nod*

[00:31] <jnthn> Sounds good :)

[00:31] <samcv> yep :)

[00:31] <jnthn> Did you file your grant app already?

[00:32] <samcv> not yet.

[00:32] <samcv> i should though i think it's ready https://gist.github.com/samcv/ca70c21c73061f605bd5e7220c986b47 unless you have any comments

[00:32] * jnthn takes another look

[00:33] <jnthn> "for future developers of the Perl 6 to reference"

[00:33] <jnthn> Don't think that needs the "the"

[00:33] <samcv> heh

[00:33] <AlexDaniel> samcv: well, if you have something really hot… https://github.com/MasterDuke17/Text-Diff-Sift4/commit/524f98cdc95c3dc0d982c0ce0782406c61e4a772

[00:34] <AlexDaniel> … just use nqp for everything…

[00:34] <samcv> Make it 13x faster by making the code unreadable XD

[00:34] <samcv> every time

[00:34] <samcv> that comment title

[00:34] <jnthn> Pretty sure "syndacated" is a title

[00:34] <jnthn> up

[00:34] <samcv> but yeah not gonna use nqp. i first thought should stick with perl 5 due to speed for the unicode database, but then realized maintainability and readability matter far more. than it taking more time

[00:34] <jnthn> a typo

[00:35] * samcv spellchecks

[00:35] <jnthn> For how often we run ucd2c, that's certainly true

[00:36] <jnthn> "my own Public forks" - not sure Public needs capitalizing :)

[00:36] <samcv> yeah

[00:36] <samcv> hah

[00:36] <jnthn> Other than that, don't see anything

[00:36] <jnthn> Gets my +1

[00:36] <samcv> :)

[00:36] <jnthn> samcv++

[00:36] <jnthn> Thanks for working on this.

[00:37] <samcv> you're welcome :) thank you for working to make things faster/better/stronger etc.

[00:38] *** trnh left
[00:39] <jnthn> .oO( not sure if daft punk reference or not... :) )

[00:39] <samcv> yes and no

[00:40] <samcv> wasn't on purpose but just happened

[00:42] <samcv> what format should I send it, it's in markdown now. should I make it pod?

[00:43] <samcv> jnthn, ?

[00:44] <jnthn> I've always sent mine as plain text or Markdown

[00:44] <samcv> ah ok

[00:44] <jnthn> I tend to write stuff in Markdown without thinking these days :)

[00:47] <jnthn> 'night

[00:49] <samcv> ok, sent

[00:58] <brokenchicken> AlexDaniel: there's already a ticket for mst's comment [Coke] made; and prior to that mst also promised to try to come up with a commit fixing the concern

[00:58] *** kyan joined
[00:58] <AlexDaniel> oh

[00:58] <AlexDaniel> ok

[01:00] <samcv> i keep getting Use of uninitialized value <element> of type Any in string context. line 50

[01:00] <samcv> and line 50 just has for %points.keys -> $code on it

[01:01] <samcv> and i can print out $code and it's a number. so idk why it's complaining

[01:02] *** wamba left
[01:02] <samcv> just gonna add quietly… but would like to know why it is doing that

[01:04] *** tyilanmenyn joined
[01:07] *** wamba joined
[01:16] *** curt_ left
[01:17] *** curt_ joined
[01:17] <samcv> gonna try Data::Dump see how long it takes to print a 10MB hash

[01:17] <samcv> well it's 10MB in json at least

[01:22] *** pmurias left
[01:23] *** yqt left
[01:23] <samcv> ok giving up on that :P

[01:23] *** wamba left
[01:30] <brokenchicken> Why do you need to print it?

[01:30] <samcv> to look at it. i'm just going to make a function to print a range of points

[01:30] <samcv> yeah this seems to be working fine

[01:35] *** bjz joined
[01:35] *** Ven left
[01:46] *** bjz left
[01:48] *** shayan_ left
[01:57] *** Sunlighter joined
[01:57] *** bjz joined
[01:57] <Sunlighter> Hello.

[01:58] <samcv> hello :)

[01:58] *** shayan_ joined
[01:58] <sammers> hello

[02:00] <AlexDaniel> o/

[02:00] *** vendethiel left
[02:01] <Sunlighter> I'm trying to run "panda install Task::Star" on an ec2 instance and JSON::RPC has a bunch of failing tests...

[02:02] <Sunlighter> ...can anyone tell me what, if anything, I'm doing wrong?

[02:02] *** FROGGS__ joined
[02:02] *** aborazmeh joined
[02:02] *** aborazmeh left
[02:02] *** aborazmeh joined
[02:04] <geekosaur> possibly "using panda"; we seem to be moving toward zef instead

[02:04] <Sunlighter> Is it possible to have panda and zef installed at the same time?

[02:04] *** skids joined
[02:05] *** FROGGS_ left
[02:14] <Sunlighter> Another question, since Panda requires the Perl 5 module TAP::Harness to be installed (I'll check out zef later), are there any other Perl 5 modules I should make sure are installed?

[02:18] *** bstamour joined
[02:20] <Sunlighter> Successfully installed zef... tried to install Task::Star with zef... failed... JSON::RPC tests still failed (19 failures out of 39 tests)...

[02:20] <brokenchicken> Sunlighter: well, circling back a bit.... why are you trying to install Task::Star?

[02:22] <Sunlighter> Well, I used rakudobrew to build moar, and then I read that Task::Star includes all the modules that come with Rakudo Star.

[02:22] <brokenchicken> We should really toss that distro from the repo. It's serving very little good and this isn't the first time people trying to install it.

[02:22] <brokenchicken> Sunlighter: it's not even up to date. JSON::RPC is broken and isn't part of Rakudo Star.

[02:23] <brokenchicken> Sunlighter: install the modules you actually need.

[02:23] <Sunlighter> Ah, ok.

[02:23] <Sunlighter> Thanks!

[02:23] <brokenchicken> Any time.

[02:24] *** user__ joined
[02:26] <brokenchicken> hm, I see JSON::RPC in MODULES.txt in 2016.11 panda, so maybe it *is* included, but it was broken ages ago and I don't see any recent enough commits that would suggest the issue got fixed.

[02:28] *** kalkin- left
[02:28] *** raschipi joined
[02:29] * brokenchicken opens https://github.com/tadzik/Task-Star/issues/13

[02:29] <Sunlighter> At first I thought I was missing some Perl 5 module. Panda itself failed to build until I installed TAP::Harness for Perl 5.

[02:30] <brokenchicken> Sunlighter: curious, how come you're using Rakudobrew instead of packages for users, like from a distro repo (if it got recent enough) or Rakudo Star?

[02:30] <brokenchicken> rakudobrew is really more for core hackers and People Who Know What They're Doing

[02:31] <Sunlighter> Well, I'm running an ec2 instance, with the Amazon Linux AMI... which doesn't have a Perl 6 package...

[02:31] <brokenchicken> Sunlighter: yeah, panda's a bit... stale... The issues are one of the reasons we're switching to zef in upcoming Rakudo Star.

[02:32] <brokenchicken> I see.

[02:32] <SmokeMachine> I think I found a bug...

[02:32] <SmokeMachine> https://www.irccloud.com/pastebin/Wbh3YQeU/

[02:32] <raschipi> SmokeMachine: another one?

[02:32] <SmokeMachine> raschipi: yes... :(

[02:32] <Sunlighter> rakudobrew is also nice because it installs into the home directory instead of changing things in system directories. So it's easy to update or uninstall.

[02:33] <SmokeMachine> raschipi: ^^

[02:33] <brokenchicken> The recommended option for regular users is Rakudo Star http://rakudo.org/downloads/star/  Though, I've never even installed it on linux so no idea how easy it is.

[02:33] <raschipi> SmokeMachine: There's always another one.

[02:33] <SmokeMachine> if every segfault is a bug, so its a bug...

[02:34] <brokenchicken> SmokeMachine: reproed on 2016.12-244-g3d1d699

[02:34] <raschipi> brokenchicken: Debian (which has the best perl6 packages) don't have it yet.

[02:35] <brokenchicken> heh... weren't you also telling folks Perl 6 was the best for sysadmin stuff? :) I no longer trust you when you say things are the best

[02:36] <brokenchicken> I see 2016.12 rakudo in AUR

[02:36] *** unixms joined
[02:37] <SmokeMachine> brokenchicken: so, is it happening to you too? (sorry, just to be sure... my english isn't very good...)

[02:37] <brokenchicken> SmokeMachine: yes

[02:37] <brokenchicken> Report it

[02:37] <raschipi> brokenchicken: It is the best. Why do I think I contradicted myself?

[02:37] <brokenchicken> reproed = reproduced

[02:37] <SmokeMachine> reporting

[02:37] <raschipi> Sid also has 2016.12.

[02:38] <SmokeMachine> I got it! :) but wasn't sure...

[02:38] *** unixms left
[02:38] <raschipi> Is there any rule against off-topic discussion in this channel?

[02:40] <brokenchicken> Nope; as long as it's um... "work safe"...

[02:41] <raschipi> You guys know how women dress on carnival in Brazil? Do you know why they do it?

[02:41] <SmokeMachine> reported...

[02:42] <SmokeMachine> yes, I know how...

[02:42] <raschipi> I won't send pictures, because it has to be safe for work.

[02:43] * brokenchicken doesn't

[02:43] <brokenchicken> They do it because it's like a 1000 degrees in Brazil? :)

[02:43] <SmokeMachine> it is like 1000 degrees here!

[02:44] * brokenchicken googles for pictures.

[02:44] <brokenchicken> Lots of feathered-wings themes

[02:44] <raschipi> It started because of a national dialogue that happened in the 60's in Brazil, about Existencialism. The critics said existencialism couldn't be taken as a serious philosophical position because it would lead to people doing whatever they wanted.

[02:44] <SmokeMachine> and they dress like that by love for they "community"! :)

[02:45] *** ilbot3 left
[02:45] <raschipi> They dress like that because "they only do what their heart tells them to do".

[02:47] <brokenchicken> So did it lead to people whatever they wanted?

[02:47] <brokenchicken> *doing

[02:47] *** ilbot3 joined
[02:47] *** jeepc left
[02:48] <raschipi> Yes, the point being that it's not a problem at all.

[02:50] <raschipi> To prove it's not a problem to do as one wants, the boundaries have to be pushed.

[02:51] <SmokeMachine> good night!

[02:51] <raschipi> Durma bem, SmokeMachine .

[02:51] <SmokeMachine> obrigado! vc tb! :)

[02:51] <brokenchicken> But you'd hit the limit quite soon. Don't you have some other holiday where you run around blowing up home made fireworks that cause a lot of injuries?

[02:51] <Sunlighter> Thanks again for the help, I'm heading out. See ya!

[02:51] <brokenchicken> bye

[02:51] *** Sunlighter left
[02:52] <brokenchicken> A drunk driving a car is doing what he wants, but he can kill people.

[02:52] <brokenchicken> A smoker on the bus stop is smoking into my face, but the smell disgusts me.

[02:52] <raschipi> "run around blowing up home made fireworks", in some specific locations of the country, yes. It's not a generalized thing.

[02:52] <brokenchicken> A neighbour is partying at 3AM, but the person across the wall is trying to sleep.

[02:53] <brokenchicken> As long as we're all crammed on this tiny planet, we can't do what we want, because a lots of stuff affects others.

[02:54] <raschipi> brokenchicken: Yes, and existencialism agrees.

[02:54] <brokenchicken> Cool.

[02:54] <raschipi> But dancing around almost naked doesn't hurt anyone, so it's allowed.

[02:55] <brokenchicken> .oO( clearly they haven't seen *me* dancing naked! )

[02:57] <raschipi> During carnival, it's a tradition for people to dress up as the most ugly people from the opposite sex, as hideous as possible.

[02:58] <brokenchicken> heh

[03:00] *** FROGGS_ joined
[03:00] <raschipi> brokenchicken: Interesting, I think, isn't it? I little more elaborate than what people from outside the country usually think.

[03:02] <AlexDaniel> oh, so dressing ugly is the whole point

[03:02] <AlexDaniel> I thought there's something wrong with my taste

[03:03] <raschipi> AlexDaniel: Most people do dress ugly for carnival, yes.

[03:03] *** bstamour left
[03:03] *** FROGGS__ left
[03:03] * geekosaur mutters something about ugly sweaters and a recently passed holiday

[03:05] <raschipi> It's summer in here, don't tease me, please.

[03:05] *** Tonik left
[03:06] <AlexDaniel> .oO( don't tease me by saying that there is summer somewhere… )

[03:09] <geekosaur> the weather's doing that quite effectively itself, here

[03:09] <geekosaur> (actually -2C here but expecting 10C+ next week)

[03:10] *** bjz left
[03:16] *** mr_ron left
[03:16] <raschipi> Last week the the apparent temperature around here got to 60ºC.

[03:27] *** ssotka left
[03:28] <AlexDaniel> s: uniprop, 25

[03:28] <SourceBaby> AlexDaniel, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤Calling uniprop() will never work with any of these multi signatures:␤    (Str:D $str, |c is raw) ␤    (Int:D $code) ␤    (Int:D $code, Stringy:D $propname)␤at -e:6␤------>     put sourcery( ⏏uniprop, 25 )[1];␤

[03:28] <AlexDaniel> s: uniprop(25)

[03:28] <SourceBaby> AlexDaniel, Something's wrong: ␤ERR: Cannot resolve caller sourcery(Str); none of these signatures match:␤    ($thing, Str:D $method, Capture $c)␤    ($thing, Str:D $method)␤    (&code)␤    (&code, Capture $c)␤  in block <unit> at -e line 6␤␤

[03:28] <AlexDaniel> s: uniprop

[03:28] <SourceBaby> AlexDaniel, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤Calling uniprop() will never work with any of these multi signatures:␤    (Str:D $str, |c is raw) ␤    (Int:D $code) ␤    (Int:D $code, Stringy:D $propname)␤at -e:6␤------>     put sourcery( ⏏uniprop )[1];␤

[03:29] <AlexDaniel> dammit… I need a tutorial for this…

[03:29] <AlexDaniel> s: Int, 'uniprop'

[03:29] <SourceBaby> AlexDaniel, Sauce is at https://github.com/rakudo/rakudo/blob/1a54bba/src/core/Cool.pm#L103

[03:34] <AlexDaniel> s: &[eq]

[03:35] <AlexDaniel> :|

[03:35] <brokenchicken> 60ºC??!?!?!

[03:35] <brokenchicken> Well, looks like Brazil is the place I'm never gonna visit

[03:35] <SourceBaby> AlexDaniel, Sauce is at https://github.com/rakudo/rakudo/blob/1a54bba/src/core/Stringy.pm#L37

[03:35] <brokenchicken> You're trying to call uniprop above.

[03:35] <brokenchicken> The bot ain't got any special syntax. You're *literally* entering args to the sourcery() routine and it needs some Callable to look up, along with optional args.

[03:36] * brokenchicken has no idea why no one seems to be able to master that bot :(

[03:37] <brokenchicken> hmm...

[03:37] <brokenchicken> s: say "hello" and exit

[03:37] <SourceBaby> brokenchicken, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤Unable to parse expression in argument list; couldn't find final ')' ␤at -e:6␤------>     put sourcery( say "hello"⏏ and exit )[1];␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤

[03:37] <brokenchicken> hah

[03:37] <brokenchicken> s: say "hello"

[03:37] <SourceBaby> brokenchicken, Something's wrong: hello␤␤ERR: Cannot resolve caller sourcery(Bool); none of these signatures match:␤    ($thing, Str:D $method, Capture $c)␤    ($thing, Str:D $method)␤    (&code)␤    (&code, Capture $c)␤  in block <unit> at -e line 6␤␤

[03:38] <brokenchicken> s: exit

[03:38] <SourceBaby> brokenchicken, Something's wrong: ␤ERR: 

[03:38] <brokenchicken> s: say "hello", exit

[03:38] <SourceBaby> brokenchicken, Something's wrong: ␤ERR: 

[03:38] <brokenchicken> s: note "hello", exit

[03:38] <SourceBaby> brokenchicken, Something's wrong: ␤ERR: 

[03:38] <brokenchicken> s: exit, note "hello"

[03:38] <SourceBaby> brokenchicken, Something's wrong: ␤ERR: 

[03:38] <brokenchicken> screw you then

[03:40] <brokenchicken> "AlexDaniel │ dammit… I need a tutorial for this…" there is one: http://perl6.party/post/Perl-6-Core-Hacking-Wheres-Da-Sauce-Boss

[03:40] <AlexDaniel> yeah, a blog post…

[03:41] <brokenchicken> hehe

[03:41] <brokenchicken> s: &uniprop, \(25)

[03:41] <SourceBaby> brokenchicken, Sauce is at https://github.com/rakudo/rakudo/blob/1a54bba/src/core/Cool.pm#L360

[03:41] *** curt_ left
[03:41] <brokenchicken> [Callable]  [Capture with args]?

[03:41] <brokenchicken> s: "", 'uniprop', \("Number")

[03:41] <SourceBaby> brokenchicken, Sauce is at https://github.com/rakudo/rakudo/blob/1a54bba/src/core/Cool.pm#L103

[03:42] <brokenchicken> [Object] [String with method name] [Capture with args]?

[03:42] <brokenchicken> s: "".^lookup("uniprop"), \(25)

[03:42] <SourceBaby> brokenchicken, Sauce is at https://github.com/rakudo/rakudo/blob/1a54bba/src/core/Cool.pm#L103

[03:43] <AlexDaniel> what if I have a sub?

[03:43] <brokenchicken> [Callable] [Capture with args]?

[03:43] <AlexDaniel> ok

[03:43] <brokenchicken> The Object/Method form is really there just to let you avoid typinmg .^lookup all the time

[03:43] <brokenchicken> a sub is a Callable

[03:43] <brokenchicken> m: say sub {} ~~ Callable

[03:43] <camelia> rakudo-moar 1a54bb: OUTPUT«True␤»

[03:43] <AlexDaniel> so let's see…

[03:44] <AlexDaniel> s: &say

[03:44] <SourceBaby> AlexDaniel, Sauce is at https://github.com/rakudo/rakudo/blob/1a54bba/src/core/io_operators.pm#L20

[03:44] *** labster joined
[03:44] <brokenchicken> And if you don't provide any args, you'd get the location of the proto

[03:44] <AlexDaniel> s: Int, 'round'

[03:44] <SourceBaby> AlexDaniel, Sauce is at https://github.com/rakudo/rakudo/blob/1a54bba/src/core/Int.pm#L128

[03:44] <brokenchicken> ... which often is kidnda useless and is in the wrong place

[03:44] <AlexDaniel> okay

[03:44] <AlexDaniel> s: Int, 'round', \(25.5)

[03:44] <SourceBaby> AlexDaniel, Sauce is at https://github.com/rakudo/rakudo/blob/1a54bba/src/core/Cool.pm#L48

[03:44] <AlexDaniel> that works, thanks

[03:45] <brokenchicken> There's just one issue that sometimes makes it error out: https://rt.perl.org/Ticket/Display.html?id=128905#ticket-history

[03:45] <brokenchicken> s: Any, 'push'

[03:45] <SourceBaby> brokenchicken, Something's wrong: ␤ERR: Type check failed in binding to &code; expected Callable but got Method+{<anon|55592240>} (Method+{<anon|5559224...)␤  in sub do-sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 42␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 33␤  in block <unit> at -

[03:45] <brokenchicken> that one

[03:46] <brokenchicken> the methods in Any-iterable-methods (or whatever that file's called) seem to be affected with that bug

[03:59] *** raschipi left
[04:00] *** troys is now known as troys_

[04:06] *** bjz joined
[04:15] *** vendethiel joined
[04:17] *** kyan left
[04:22] *** vendethiel left
[04:23] *** dugword left
[04:33] *** vendethiel joined
[04:36] <AlexDaniel> s: Str, ‘contains’

[04:36] <SourceBaby> AlexDaniel, Sauce is at https://github.com/rakudo/rakudo/blob/1a54bba/src/core/Cool.pm#L146

[04:37] <AlexDaniel> s: Str, ‘contains’, \(‘a’, 0)

[04:37] <SourceBaby> AlexDaniel, Something's wrong: ␤ERR: Could not find candidate that can do \("a", 0)␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 29␤  in block <unit> at -e line 6␤␤

[04:41] *** finanalyst joined
[04:48] *** finanalyst left
[04:59] *** khw left
[05:00] *** inokenty left
[05:01] *** inokenty joined
[05:13] *** ggoebel left
[05:23] *** dugword joined
[05:26] *** ggoebel joined
[05:28] *** bjz left
[05:32] *** aborazmeh left
[05:33] *** cibs left
[05:35] *** cibs joined
[05:40] *** Gcombs joined
[05:40] *** Cabanossi left
[05:42] *** Cabanossi joined
[05:47] *** CIAvash joined
[05:57] *** dugword left
[05:58] *** Gcombs left
[06:08] *** troys_ is now known as troys

[06:14] *** dugword joined
[06:29] *** mcsnolte left
[06:44] *** troys is now known as troys_

[07:21] *** troys_ is now known as troys

[07:25] *** faraco joined
[07:26] <faraco> hi guys. I need help. If I need to build a new module, for example My::API, should I named the Github repository as perl6-My-API or My-API, which convention is much better to avoid conflicts in the future (especially with ecosystem)

[07:28] <moritz> ecosystem doesn't care what your repo name is

[07:30] <faraco> Alright thanks moritz :)

[07:30] <mst> ecosystem is a giant pile of duct tape and will handle anything equally shoddily :D

[07:31] <mst> (it's very much an MVP sort of thing because nobody really had any idea what a 'proper' thing would need yet)

[07:31] <faraco> mst: also thank you. :) I feel much enlightened.

[07:33] <faraco> ah last question, I heard that Perl 6 have a spec to make Perl 5 code run under Perl 6 vm's. Is that actually refers to Inline::Perl5 or is not?

[07:34] *** smls joined
[07:34] <smls> Hi

[07:34] <faraco> hi

[07:34] <smls> m: say list "t" ^..^ "z"

[07:34] <camelia> rakudo-moar 1a54bb: OUTPUT«(u v w x y)␤»

[07:34] <smls> m: say list "t" ^..^ "\{"

[07:34] <camelia> rakudo-moar 1a54bb: OUTPUT«(u v w x y z {)␤»

[07:35] <smls> ^^ Does anyone know why ^..^ includes the endpoint when it is a non-alphanumeric string?

[07:37] *** AlexDaniel left
[07:42] <mst> faraco: there has been work on making perl5 code run on rakudo, but Inline::Perl5 loads a standard pumpking-provided perl5

[07:44] <faraco> pumpking?

[07:44] <faraco> developer?

[07:47] <faraco> Anyway, thanks.

[07:50] <Geth>  doc: 445dc78714 | (Nick Logan)++ | t/00-load.t

[07:50] <Geth>  doc: Revert flawed test 

[07:50] <Geth>  doc: 

[07:50] <Geth>  doc: This test assumes Pod::To::BigPage is actually installed and located in a repository that the run ... htmlify.p6 is going to see. For instance: perl6 -I/path/to/Pod-To-BigPage/lib t/00-load.t will not work even though the dependency on Pod::To::BigPage is met. To use run like this would require passing all the $*REPOs (@INC) into the executed script (htmlify.p6)

[07:50] <Geth>  doc: review: https://github.com/perl6/doc/commit/445dc78714

[07:51] *** troys is now known as troys_

[07:58] *** dugword left
[07:58] *** troys_ is now known as troys

[07:59] *** dugword joined
[08:04] *** dugword left
[08:04] <mst> faraco: pumpking is the person in charge of perl5-porters, i.e. releases of perl5

[08:10] <mst> faraco: heh, just saw your lwp-online go past over in #perl :D

[08:10] <faraco> mst: I know that module gonna be probably useless :P

[08:11] <mst> I dunno, I can see myself maybe using it from scripts to double check network setup on systems

[08:11] <mst> it's kind of a brute force approach but that may be the right answer

[08:11] *** AlexDaniel joined
[08:12] *** AlexDaniel left
[08:12] *** AlexDaniel joined
[08:13] <AlexDaniel> wow, RT #130554 is intersting

[08:13] <faraco> mst: well I'm glad if it's beneficial to anyone. And thank you so much for the 'pumpking' meaning.

[08:13] *** hankache joined
[08:13] * mst swears

[08:14] <AlexDaniel> smls++

[08:14] <mst> AlexDaniel: I just tried to check for replies to me mail about the flipping ticket button ... which I IIRC cc'ed you on ... but can't now find in my mailbox because I must be searching for the wrong thing

[08:15] *** hankache left
[08:15] <AlexDaniel> “Re: [perl #129758] "new ticket" broken” was the title

[08:15] <AlexDaniel> that's all I've got

[08:15] <mst> thanks

[08:16] <mst> found it now

[08:17] <smls> AlexDaniel: I think alphanumeric characters have a different code path in the range operator, because it also supports this:

[08:17] <smls> m: say ("z"..*)[^10]

[08:17] <camelia> rakudo-moar 1a54bb: OUTPUT«(z aa ab ac ad ae af ag ah ai)␤»

[08:17] * mst sends a prod

[08:17] <mst> AlexDaniel: see, I told you that I suck but I get around to things eventually

[08:17] <mst> AlexDaniel: sorry for sucking quite this much

[08:19] <AlexDaniel> mch: say list '!' ^..^ '&';

[08:19] <committable6> AlexDaniel, ¦«2015.12»: This type cannot unbox to a native string␤  in block <unit> at /tmp/1ZdqqQJPuV line 1␤ «exit code = 1»␤¦«HEAD»: (! " # $ % &)

[08:19] <AlexDaniel> umm

[08:19] <AlexDaniel> 6c: say list '!' ^..^ '&';

[08:19] <committable6> AlexDaniel, ¦«2015.12,2016.02,2016.03»: This type cannot unbox to a native string␤  in block <unit> at /tmp/7cdDaxeDOx line 1␤ «exit code = 1»␤¦«2016.04,2016.05,2016.06,2016.07.1,2016.08.1,2016.09,2016.10,2016.11,2016.12,HEAD»: (! " # $ % &)

[08:19] <AlexDaniel> well, let's see what commit implemented it

[08:19] <AlexDaniel> bisect: say list '!' ^..^ '&';

[08:19] <bisectable6> AlexDaniel, Bisecting by exit code (old=2015.12 new=1a54bba). Old exit code: 1

[08:19] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/00915287f1b2998b10466af4b719f2b8

[08:19] <bisectable6> AlexDaniel, (2016-03-31) https://github.com/rakudo/rakudo/commit/535727825d9b69afb84b2e0d7f459fd6c64ac019

[08:21] <AlexDaniel> mst: as long as things are moving forward I don't mind. It's the lack of progress that drives me crazy sometimes

[08:21] <AlexDaniel> well, that doesn't help…

[08:22] <TEttinger> is that an emoticon operator, ^..^  ?

[08:22] <TEttinger> or a little bat?

[08:22] <AlexDaniel> m: say ‘!’.succ

[08:22] <camelia> rakudo-moar 1a54bb: OUTPUT«!␤»

[08:22] <AlexDaniel> m: say ‘!’.succ.succ

[08:22] <camelia> rakudo-moar 1a54bb: OUTPUT«!␤»

[08:22] <AlexDaniel> hmmm

[08:23] <AlexDaniel> smls: so it is associated with this ↑

[08:24] <mst> AlexDaniel: well, I dunno yet, but I've just poked people again on the grounds that everybody forgets everything over christmas anyway

[08:24] <smls> AlexDaniel: .succ and strings doesn't increment codepoints. It does "foo_9.txt" --> "foo_10.txt"

[08:24] <AlexDaniel> yes but

[08:24] <TEttinger> m: 'a'.succ

[08:24] <camelia> rakudo-moar 1a54bb: ( no output )

[08:24] <AlexDaniel>  my $min = $!excludes-min ?? $!min.succ !! $!min;

[08:24] <smls> AlexDaniel: Ranges with string start point and infinite endpoint do the same.

[08:24] <TEttinger> m: say 'a'.succ

[08:24] <camelia> rakudo-moar 1a54bb: OUTPUT«b␤»

[08:24] <TEttinger> neat

[08:24] <AlexDaniel> https://github.com/rakudo/rakudo/blob/ce65691fc5d16ba8c04e9c40f78c5d025c878f2c/src/core/Range.pm#L134

[08:25] <AlexDaniel> this ↑

[08:25] <smls> AlexDaniel: However, ranges with string *endpoints* do conepoint ranges.

[08:25] <AlexDaniel> it does .succ if it excludes-min

[08:25] <smls> Ah. Intentionally?

[08:26] <AlexDaniel> but it should be doing nqp::ord(nqp::unbox_s($min)) + 1;

[08:26] <AlexDaniel> not intentionally, it's a bug

[08:26] <AlexDaniel> change it to that ↑ and it will start working, probably

[08:26] <AlexDaniel> wrap it in nqp::chr though

[08:28] <AlexDaniel> smls: wanna try to fix it yourself?

[08:28] <AlexDaniel> smls: you'll only have to change line 134 and line 164

[08:28] *** bjz joined
[08:28] <smls> Hm, never submitted a Rakudo patch involving NQP pefore

[08:28] <smls> But I guess I could try

[08:29] *** troys is now known as troys_

[08:33] <AlexDaniel> smls: doesn't really have to be nqp actually, but I think it's a good idea to use the same logic it does for the generation

[08:35] *** shayan_ left
[08:36] <AlexDaniel> smls: maybe another way to do it would be to change SET-SELF a little bit

[08:37] <AlexDaniel> + 1 to $!i if it excludes-min, - 1 to $!n if it excludes-max

[08:37] <AlexDaniel> not sure if that's any better though

[08:38] <AlexDaniel> yea, it probably is, it will get rid of the useless ord(chr(ord(…))) roundtrip

[08:38] <faraco> Hiker looks like Catalyst/Mojo/Dancer for Perl 6.

[08:40] *** hankache joined
[08:40] <smls> AlexDaniel: ok

[08:42] <samcv> argh why are my Int's changing into strings!

[08:48] *** faraco left
[08:51] *** faraco joined
[08:51] *** faraco left
[08:51] *** faraco joined
[08:52] *** Vynce joined
[08:52] *** hankache left
[08:58] *** domidumont joined
[08:59] *** wamba joined
[09:01] *** dugword joined
[09:02] *** mxco86 left
[09:04] *** domidumont left
[09:04] *** domidumont joined
[09:12] *** troys_ is now known as troys

[09:13] *** rindolf joined
[09:25] *** tokomer joined
[09:31] *** RabidGravy joined
[09:34] *** dugword left
[09:36] *** CIAvash left
[09:47] *** troys left
[09:50] *** bjz left
[09:53] <RabidGravy> boom!

[09:57] <mst> boom today?

[09:58] *** Vynce left
[09:59] <samcv> boom?

[10:01] *** faraco left
[10:07] *** holli joined
[10:13] *** AlexDaniel left
[10:18] *** inokenty left
[10:19] *** skids left
[10:20] *** faraco joined
[10:24] *** inokenty joined
[10:31] *** dugword joined
[10:32] <RabidGravy> It would be unlike IBM to ship something that is totally broken, so I guess the really do mean it when they say the "Informix Developer Edition" only works on RHEL, SLES Centos ....

[10:36] *** cognominal joined
[10:39] *** faraco left
[10:39] *** faraco joined
[10:43] *** hankache joined
[10:49] *** TEttinger left
[10:52] <RabidGravy> Hmm it seems to work okay locally (which is not what I wanted as having yet another datbase server on this laptop seems silly)

[10:54] <user__> I have a MAIN('build', MORE_ARGS) and I have a MAIN(Str cmd, Bool :h(:$help))

[10:54] *** user__ is now known as kalkin-

[10:54] <kalkin-> I have a MAIN('build', MORE_ARGS) and I have a MAIN(Str cmd, Bool :h(:$help))

[10:54] <mst> kalkin-: move the :h match first

[10:55] <kalkin-> mst: but wouldn't that force me to call ./foo --help build instead of ./foo build --help?

[10:55] *** faraco left
[10:55] <mst> kalkin-: no, I mean, move that 'MAIN' to the top of the file. *might* help.

[10:56] <mst> actually. IIRC for the MAIN_HELPER the options need to come first so you can have subcommands?

[10:56] *** faraco joined
[10:56] <kalkin-> mst it's already on the top of the imported module

[10:56] * kalkin- is writing another Getopt parser

[10:57] <faraco> kalkin-: can't wait to use it.

[10:57] <timotimo> don't we already have a getopt parser in the ecosystem?

[10:57] <kalkin-> I have -h build & --help build & --help=build working, but I can't get build --help to work

[10:57] <timotimo> yeah, MAIN won't let you put named arguments after positionals

[10:58] <mst> right. because subcommands.

[10:58] *** bjz joined
[10:58] <RabidGravy> okay that Informix appears to have installed correctly

[10:58] <mst> maybe you wanted a MAIN(|c) or something and then unpack yourself

[10:58] <RabidGravy> yeah

[10:59] <timotimo> no, you need to handle @*ARGS if you want to accept nameds after positionals

[10:59] <faraco> Damn it. I should check ecosystem and what Task::Star provides.

[10:59] <timotimo> there's six modules with Getopt:: in their name in the ecosystem

[10:59] <kalkin-> i see.

[10:59] <mst> timotimo: oh right ok.

[10:59] <kalkin-> mst & timotimo  thank you both

[10:59] <timotimo> three of them seem to be from-scratch implementations of getopt

[10:59] <mst> timotimo: I'd've expected the later nameds to end up in the array part

[11:00] <timotimo> hm?

[11:00] *** Actualeyes joined
[11:00] <kalkin-> There're some modules which parse Getopt params but they don't work as I expect them when using subcommands

[11:02] <timotimo> someone started building something called Subcommander

[11:02] <timotimo> it didn't make it into the ecosystem yet

[11:02] <timotimo> as in, not finished yet?

[11:03] *** domidumont left
[11:03] <timotimo> https://github.com/hoelzro/Subcommander

[11:04] *** dugword left
[11:06] *** domidumont joined
[11:07] <kalkin-> timotimo: thanks will have a look at that

[11:08] <kalkin-> I think parsing @*ARGS is a much simpler solution as what I am doing

[11:08] <kalkin-> currently I'm using callframe to get the MAIN subs which isn't optimal

[11:08] <timotimo> wow

[11:09] <mst> hahahahahaha oh dear

[11:09] <mst> that ... sounds like something I would do to perl5

[11:09] <kalkin-> :)

[11:11] *** Tonik joined
[11:12] <kalkin-> just a second. I think i still need to get the MAIN subs via callframe if I want my module to generate an own USAGE don't I?

[11:12] <mst> if you're accepting @*ARGS to your top level MAIN and handling it yourself

[11:12] <mst> why can't you generate your own usage info directly?

[11:13] <kalkin-> mst:  i want the user using my module as drop in replacement for the original Getopts. The user has a script which has some MAIN subs and at the top he does use Getopt::Subcommands

[11:13] <kalkin-> so I need to get the MAIN subs from the script to get the POD docs

[11:14] <timotimo> why not just &MAIN and &MAIN.candidates for that

[11:15] <kalkin-> because they are out of the scope of the module which provides my custom USAGE sub?

[11:16] <timotimo> ah

[11:16] <timotimo> hm, how exactly does MAIN_HELPER do it ...

[11:17] <timotimo> ugh, it uses callframe, too :D

[11:19] *** hankache left
[11:20] <mst> \o/

[11:24] <kalkin-> rakudo src is where I got the idea with callframe

[11:25] <timotimo> we are terrible, clearly

[11:25] <lizmat> .oO( great minds think alike )

[11:26] *** labster left
[11:33] *** ufobat joined
[11:36] *** Gasher joined
[11:53] <RabidGravy> Hmm, it's been like 15 years since I actually configured an Informix server

[11:57] *** faraco left
[12:01] *** dugword joined
[12:04] *** bjz left
[12:04] *** bjz_ joined
[12:07] <RabidGravy> little by little it comes back to me

[12:35] *** dugword left
[12:36] <lizmat> .oO( it's just like riding a bike )

[12:38] <timotimo> informicycle

[12:42] *** bjz joined
[12:43] *** bjz_ left
[12:53] <smls> AlexDaniel: I sent a Rakudo pull request.

[12:54] <sammers> hi all

[13:03] <sammers> does anyone have a name for stepping through a long string / text file? Like a sliding rule, n characters at a time, incrementing one character per iteration. Is there a name for this?

[13:05] <smls> sammers: You mean like the built-in .rotor?

[13:05] <smls> m: say (1..12).rotor(3)

[13:05] <camelia> rakudo-moar 9c25d1: OUTPUT«((1 2 3) (4 5 6) (7 8 9) (10 11 12))␤»

[13:05] <smls> eh, I meant:

[13:05] <sammers> ah, that looks interesting...

[13:05] <smls> m: say (1..8).rotor(3 => -2)

[13:05] <camelia> rakudo-moar 9c25d1: OUTPUT«((1 2 3) (2 3 4) (3 4 5) (4 5 6) (5 6 7) (6 7 8))␤»

[13:05] <sammers> yeah

[13:05] <sammers> that might be exactly what I am looking for

[13:06] <smls> works on lists though, not strings

[13:06] <sammers> ah

[13:06] <sammers> hmm

[13:06] *** wamba left
[13:06] <smls> you can split your string with .comb, though

[13:06] <sammers> yeah

[13:06] *** wamba joined
[13:06] *** faraco joined
[13:07] <smls> m: say "abcdefgh".comb.rotor(3 => -2).map(*.join)

[13:07] <camelia> rakudo-moar 9c25d1: OUTPUT«(abc bcd cde def efg fgh)␤»

[13:07] <faraco> m: say 0..^11

[13:07] <camelia> rakudo-moar 9c25d1: OUTPUT«^11␤»

[13:07] <faraco> m: say 1..10

[13:07] <camelia> rakudo-moar 9c25d1: OUTPUT«1..10␤»

[13:07] *** wamba left
[13:07] *** wamba joined
[13:07] <faraco> erm. nvm ^^

[13:08] <sammers> ok, thanks, this gives me something to play with. is rotor the common name for this concept?

[13:10] <smls> sammers: No, rotor is a more general name because its a very flexible method

[13:10] <smls> sammers: The "overlapping ranges incremented by one" is typically called a "sliding window" approach, I think.

[13:11] <sammers> ok, cool, I always thought of this like a "sliding rule"

[13:11] <sammers> but wasn't sure if there was some other name for it

[13:14] *** domidumont left
[13:16] *** Tonik left
[13:16] *** domidumont joined
[13:22] *** bjz left
[13:28] <timotimo> i know "sliding window"

[13:29] *** smls_ joined
[13:30] *** smls left
[13:31] *** dugword joined
[13:33] *** espadrine joined
[13:33] *** Geth left
[13:34] *** buggable left
[13:34] *** Geth joined
[13:34] *** ChanServ sets mode: +v Geth

[13:34] *** buggable joined
[13:34] *** ChanServ sets mode: +v buggable

[13:35] *** faraco left
[13:42] *** Ven joined
[13:45] <masak> clearly a "sliding rule" is when a monarch governs from a slippery slope :P

[13:47] *** shmibs left
[14:00] *** shmibs joined
[14:00] <lizmat> .oO( king on a skateboard: a slide ruler )

[14:00] *** shmibs left
[14:02] *** lukaramu joined
[14:02] *** shmibs joined
[14:04] *** dugword left
[14:07] *** shmibs left
[14:08] *** shmibs joined
[14:15] *** dmaestro joined
[14:17] <dmaestro> m: ((1, (2, 3)), (2, (1, 3)))».say

[14:17] <camelia> rakudo-moar d17c64: OUTPUT«1␤2␤3␤2␤1␤3␤»

[14:18] <dmaestro> m: ((1, (2, 3)), (2, (1, 3))).elems

[14:18] <camelia> rakudo-moar d17c64: ( no output )

[14:18] <dmaestro> m: say ((1, (2, 3)), (2, (1, 3))).elems

[14:18] <camelia> rakudo-moar d17c64: OUTPUT«2␤»

[14:18] *** wamba left
[14:19] <dmaestro> This seems to contradict the hyper operator documentation:

[14:19] <dmaestro> Hyper operators do not descend into child lists. You can chain hyper operators to destructure a List of Lists.

[14:20] <dmaestro> Anybody know what's going on here?

[14:21] <dmaestro> m: .say for ((1, (2, 3)), (2, (1, 3)))

[14:21] <camelia> rakudo-moar d17c64: OUTPUT«(1 (2 3))␤(2 (1 3))␤»

[14:21] *** Actualeyes left
[14:21] <dmaestro> That's the output I would have expected

[14:21] <gfldex> +1

[14:24] <gfldex> however, the docs are not roast

[14:26] <gfldex> m: say [[2, 3], [4, [5, 6]]]».all.gist

[14:26] <camelia> rakudo-moar d17c64: OUTPUT«(all(2, 3) all(4, [5 6]))␤»

[14:27] *** pmurias joined
[14:28] <gfldex> dmaestro: the behaviour of ». depends on the nodality of the method that is called

[14:29] *** Ven left
[14:29] <gfldex> so the docs are wrong (or at least incomplete)

[14:32] <gfldex> m: trait_mod:<is>(Mu.^can('say')[0], :nodal); [[2, 3], [4, [5, 6]]]».say

[14:32] <camelia> rakudo-moar d17c64: OUTPUT«[4 [5 6]]␤[2 3]␤»

[14:32] <gfldex> dmaestro: ^^^

[14:33] <gfldex> what leaves the question if Mu.say should be nodal

[14:36] <dmaestro> I think nodality is a new concept to me ;-)

[14:36] <dmaestro> Thanks for the info.

[14:36] *** smls_ left
[14:36] *** Geth left
[14:37] *** Geth joined
[14:37] *** ChanServ sets mode: +v Geth

[14:37] <dmaestro> m: say ((1, (2, 3)), (2, (1, 3)))».elems

[14:37] <camelia> rakudo-moar d17c64: OUTPUT«(2 2)␤»

[14:37] <gfldex> dmaestro: i did: cd perl6/roast; git grep '»\.'

[14:38] *** eyck left
[14:38] <gfldex> checking roast tends to be very informative

[14:38] <dmaestro> Yes, I've been on the verge of checking that out; time to dive in.

[14:39] <dmaestro> Any pointers to what 'nodality' means in this context?

[14:41] <brokenchicken> whether or not it descends into iterables

[14:41] <brokenchicken> m: say ((1, (2, 3)), (2, (1, 3)))».&{.elems}

[14:41] <camelia> rakudo-moar d17c64: OUTPUT«((1 (1 1)) (1 (1 1)))␤»

[14:42] <sammers> ok, I am testing rotor for a sliding window type solution. I have two examples, one using rotor, the other using while. rotor is much slower than the while example here https://gitlab.com/snippets/35396

[14:42] <dmaestro> brokenchicken: +1

[14:43] *** Gasher left
[14:43] <sammers> nodality is when nodejs kills your server

[14:43] *** Gasher joined
[14:44] <lizmat> sammers: .rotor is on my list of things to optimize  :-)

[14:44] <sammers> for that rotor / while example, I tested with a file around 10k loc and it takes about 25 sec for the while version, ~38 for the rotor solution

[14:45] <sammers> hi lizmat

[14:45] <sammers> cool, I want to help!

[14:45] <sammers> ha

[14:45] <sammers> I might be able to at least look into benchmarking .rotor

[14:46] <sammers> lizmat, is rotor something that can be concurrent? 

[14:47] <lizmat> not sure how that could be

[14:48] <lizmat> but you could feed a .rotor into a Channel and then have multiple starts { } feed off of that I guess

[14:48] <sammers> do other languages have something like this? 

[14:48] <lizmat> not sure

[14:48] <sammers> hmm

[14:51] <[Coke]> ugexe: the test in 00-load I added had nothing to do with pod::to::bigpage - it was just to make sure that htmlify was compilable (and we've had commits where that is not the case) - Did that test fail for you somewhere?

[14:57] *** Khisanth left
[14:57] *** Tonik joined
[15:01] *** dugword joined
[15:02] *** mr_ron joined
[15:02] *** curt_ joined
[15:05] <Geth>  doc: b4b68d88b9 | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod6

[15:05] <Geth>  doc: hyper operators depend on nodality (dmaestro++)

[15:05] <Geth>  doc: review: https://github.com/perl6/doc/commit/b4b68d88b9

[15:05] <Geth>  doc: f08ded9431 | (Wenzel P. P. Peppmeyer)++ | doc/Language/typesystem.pod6

[15:05] <Geth>  doc: is nodal applies to all Routines, not just methods

[15:05] <Geth>  doc: review: https://github.com/perl6/doc/commit/f08ded9431

[15:05] <Geth>  doc: 058bc1cb3f | (Wenzel P. P. Peppmeyer)++ | 2 files

[15:05] <Geth>  doc: make clear that operators are Subs

[15:05] <Geth>  doc: review: https://github.com/perl6/doc/commit/058bc1cb3f

[15:08] <Geth>  doc: d4515e24f8 | (Wenzel P. P. Peppmeyer)++ | doc/Language/operators.pod6

[15:08] <Geth>  doc: link to Sub

[15:08] <Geth>  doc: review: https://github.com/perl6/doc/commit/d4515e24f8

[15:10] *** Khisanth joined
[15:12] <Geth>  doc: 490dc2c63d | (Wenzel P. P. Peppmeyer)++ | doc/Type/Sub.pod6

[15:12] <Geth>  doc: example for circumfix declaration

[15:12] <Geth>  doc: review: https://github.com/perl6/doc/commit/490dc2c63d

[15:12] <gfldex> prove reading of ^^^ is welcome. I'm not overly awake today.

[15:15] <brokenchicken> s/prove/proof/; :")

[15:19] <gfldex> told you so!

[15:28] *** curt_ left
[15:34] *** dugword left
[15:36] *** forkbomb left
[15:38] *** Actualeyes joined
[15:41] *** dj_goku left
[15:46] *** giraffe joined
[15:46] *** giraffe is now known as Guest23983

[15:50] *** dj_goku joined
[15:50] *** dj_goku left
[15:50] *** dj_goku joined
[15:54] *** ChoHag left
[15:55] *** dugword joined
[16:01] *** raschipi joined
[16:05] *** BenGoldberg joined
[16:08] *** wamba joined
[16:09] *** raschipi left
[16:18] *** khw joined
[16:19] *** stmuk left
[16:21] *** espadrine left
[16:21] *** tokomer left
[16:25] *** dugword left
[16:29] *** stmuk joined
[16:31] *** dugword joined
[16:44] *** BenGoldberg left
[16:46] *** BenGoldberg joined
[16:55] *** shayan_ joined
[16:57] *** Actualeyes left
[16:58] *** TimToady left
[17:00] *** TimToady joined
[17:02] *** bstamour` left
[17:05] <Geth>  doc: dmaestro++ created pull request #1137: Proofread updates by (Wenzel P. P. Peppmeyer)++

[17:05] <Geth>  doc: review: https://github.com/perl6/doc/pull/1137

[17:06] <Geth>  doc: 6be1c895a2 | (Douglas L. Schrag)++ | 3 files

[17:06] <Geth>  doc: Proofread updates by (Wenzel P. P. Peppmeyer)++

[17:06] <Geth>  doc: 

[17:06] <Geth>  doc: Add an example of nodality affecting hyper-method operator.

[17:06] <Geth>  doc: review: https://github.com/perl6/doc/commit/6be1c895a2

[17:06] <Geth>  doc: 22367f6606 | (Juan Julián Merelo Guervós)++ | 3 files

[17:06] <Geth>  doc: Merge pull request #1137 from dmaestro/proof/nodality_and_subs

[17:06] <Geth>  doc: 

[17:06] <Geth>  doc: Proofread updates by (Wenzel P. P. Peppmeyer)++

[17:06] <Geth>  doc: Thanks!

[17:06] <Geth>  doc: review: https://github.com/perl6/doc/commit/22367f6606

[17:12] *** Actualeyes joined
[17:24] *** ugexex joined
[17:26] <ugexex> [Coke]: it tries to compile a script that uses pod::to::bigpage without passing in the current "@INC" 

[17:28] <ugexex> Your test only works if pod::to::bigpage is located in a CURI and not CURFS (like -I../somelib)

[17:29] <ugexex> So "zef install p6doc" will fail on a otherwise clean Rakudo 

[17:30] <moritz> m: sub f($, $) { }; f join 'a', 'b', 'c'

[17:30] <camelia> rakudo-moar 78edbb: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:30] <moritz> why is this error only detected at run time?

[17:31] <moritz> we know at compile time that there will be only one argument to &f

[17:31] <moritz> or could it work if &join returned some Slip shenenigan or so?

[17:32] *** BenGoldberg left
[17:33] *** ugexex left
[17:33] <gfldex> m: sub f($, $) { }; f((1,2,3).Slip)

[17:33] <camelia> rakudo-moar 78edbb: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:33] <gfldex> m: sub f($, $) { }; f(slip (1,2,3))

[17:33] <camelia> rakudo-moar 78edbb: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:33] <gfldex> m: sub f($, $) { }; f(¦(1,2,3))

[17:33] <camelia> rakudo-moar 78edbb: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' ␤at <tmp>:1␤------> 3sub f($, $) { }; f(7⏏5¦(1,2,3))␤    expecting any of:␤        argument list␤        prefix␤       …»

[17:34] <gfldex> m: sub f($, $) { }; f( |(1,2) )

[17:34] <camelia> rakudo-moar 78edbb: ( no output )

[17:35] <gfldex> moritz: the compiler would know if the |()-slip form is used at compile time

[17:37] *** tokomer joined
[17:37] *** cdg joined
[17:37] <moritz> then it looks like a bug to me

[17:38] <moritz> though this is borderline; the spec doesn't mandate a compile time error for wrong arity, afaict

[17:40] <brokenchicken> m: sub join (|) { 2, 3 }; sub f($, $) {say "weeee"; }; f join 'a', 'b', 'c'

[17:40] <camelia> rakudo-moar 78edbb: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:41] <brokenchicken> m: sub join (|) { say "lulz wat"; return 2, 3, }; sub f($, $) {say "weeee"; }; f join 'a', 'b', 'c'

[17:41] <camelia> rakudo-moar 78edbb: OUTPUT«lulz wat␤Too few positionals passed; expected 2 arguments but got 1␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:41] <brokenchicken> m: sub join (|) { say "lulz wat"; return slip 2, 3 }; sub f($, $) {say "weeee"; }; f join 'a', 'b', 'c'

[17:41] <camelia> rakudo-moar 78edbb: OUTPUT«lulz wat␤Too few positionals passed; expected 2 arguments but got 1␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:41] <brokenchicken> screw you

[17:41] <gfldex> moritz: i was wrong. prefix:<|> is just a normal operator and can be overloaded.

[17:42] <brokenchicken> but my point was we don't really know what join will return, can we?

[17:43] *** zakharyas joined
[17:44] <moritz> brokenchicken: so is ther an example of a function that returns something that will be interpreted as more than one argument, without adding an explicit | to the call site?

[17:44] <moritz> m: sub f($, $) { }; sub g { return | 1, 2 }; f g;

[17:44] <camelia> rakudo-moar 78edbb: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:45] <gfldex> m: sub f($, $) { }; sub b(--> Slip){ Nil }; f(b)

[17:45] <camelia> rakudo-moar 78edbb: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Calling f(Slip) will never work with declared signature ($, $)␤at <tmp>:1␤------> 3ub f($, $) { }; sub b(--> Slip){ Nil }; 7⏏5f(b)␤»

[17:45] <moritz> there are times when I feel like a Perl 6 beginner again

[17:46] <brokenchicken> moritz: ah. No idea

[17:49] <brokenchicken> nothing comes to mind

[17:51] <gfldex> welp! I need a good name for the group that is formed by the types Signature, Routine, Slip, ….

[17:52] <moritz> gfldex: code reuse?

[17:52] <moritz> that's what they are all related to

[17:53] <gfldex> not really. I got build in structual or language types as opposed to data types like Array, Str,….

[17:55] <gfldex> to provide some context, I'm not happy with /language.html and /type.html. They provide a long unstructured list of not so similar things.

[17:56] <gfldex> Some grouping seams to be in order for both and that creates the need for headings.

[17:58] <moritz> type-graph.txt provides some rough structuring, but probably along different axes as you imanged

[17:58] <moritz> *imagined

[17:58] <gfldex> indeed

[17:59] <moritz> I can't think of a better name ad hoc

[17:59] <mr_ron> m: class c { method hi-c { say "hi" } }; role r is c {}; r.hi-c #  https://docs.perl6.org/language/objects says "Roles cannot inherit from classes

[17:59] <camelia> rakudo-moar 78edbb: OUTPUT«hi␤»

[17:59] * moritz tends to defer naming decisions to TimToady++ or jnthn++ if possible

[17:59] <mr_ron> new to roles ...

[17:59] <moritz> mr_ron: it's complicated :-)

[18:00] <gfldex> mr_ron: they don't really. It's autopunning that is confusion you.

[18:00] <gfldex> there is an invisible class that you cant see :)

[18:00] <moritz> mr_ron: the role itself doesn't inherit from the class. But if you apply the role to another class, that second class inherits from the first one

[18:01] <moritz> m: class C1 { }; role R is C1 { }; class C2 does R { }; say C2.^parents

[18:01] <camelia> rakudo-moar 78edbb: OUTPUT«((C1))␤»

[18:01] <gfldex> maybe some fresh air will provide clarity

[18:01] * gfldex walkes to the shop

[18:01] <mr_ron> I didn't notice applying the role so looking at autopunning ...

[18:01] <mr_ron> m: role r1 { token t { <[2]> } }; role r2 is Grammar { token t { <[3]> } }; say so "3" ~~ /<r2::t>/; say so "2" ~~ /<r1::t>/

[18:01] <camelia> rakudo-moar 78edbb: OUTPUT«True␤No such method '!cursor_init' for invocant of type 'r1'␤  in block <unit> at <tmp> line 1␤␤»

[18:02] <moritz> mr_ron: if you try to instantiate a role directly, an empty class of the name as the role is created implicitly, and the role is applied to it

[18:03] <mr_ron> No ".new" in my example so I don't see instantiation

[18:03] <mr_ron> m: class c { method hi-c { say "hi" } }; role r is c {}; r.new.hi-c; r.hi-c

[18:03] <camelia> rakudo-moar 78edbb: OUTPUT«hi␤hi␤»

[18:05] *** zakharyas left
[18:07] <mr_ron> In the second case there is no "instance" of a class (as described in the doc and in the section example) so can someone explain how the role DID NOT inherit the class?

[18:09] <moritz> as I just tried to explain, r.new does create a class implicitly

[18:09] <moritz> which is what we call autopunning

[18:09] <moritz> which you said you'd look up, no? :-)

[18:09] <brokenchicken> What about the r.hi-c case?

[18:09] <geekosaur> that *is* the case

[18:10] <mr_ron> brokenchicken: thanks

[18:10] <moritz> r.hi-c cause an implicit (class r is r { })

[18:10] <brokenchicken> Ah

[18:10] <moritz> so there's a class r, which now inherits from class c

[18:10] <moritz> a role is just a collection of stuff that's eventually copied into a class

[18:11] <moritz> and "stuff" can be methods, attributes, inheritance, other roles

[18:11] <moritz> feel free to update the docs if you think you can explain it better than it is now

[18:14] *** eyck joined
[18:15] *** cdg_ joined
[18:16] *** cdg left
[18:17] <mr_ron> Sort of the confusing part is the statement from the doc "Roles cannot inherit from classes."  It looks like in practice the claim may not mean much.

[18:23] <mr_ron> m: role r1 { token t { <[2]> } }; role r2 is Grammar { token t { <[3]> } }; say so "3" ~~ /<r2::t>/; say so "2" ~~ /<r1::t>/ # so ... a practical application of a role inheriting from a class

[18:23] <camelia> rakudo-moar 78edbb: OUTPUT«True␤No such method '!cursor_init' for invocant of type 'r1'␤  in block <unit> at <tmp> line 1␤␤»

[18:28] <geekosaur> seems to me that might indicate the problem and be reporting it badly (i.e. LTA)?

[18:30] <mr_ron> geekosaur: not following what you thinks is being reported badly.  (working on a doc issue for the "cannot inherit" wording)

[18:31] <geekosaur> the No such method

[18:31] <geekosaur> which looks to me like inheritance from Grammar simply failed

[18:32] <mr_ron> So the match logic should recognize that a role not a class is involved and explain?

[18:32] *** tokomer left
[18:33] <mr_ron> geekosaur: the output is in opposite order from the declarations and r2 inherited Grammar AFAICT

[18:35] *** dugword left
[18:35] *** wamba left
[18:35] *** Gasher left
[18:38] *** dugword joined
[18:38] *** wamba joined
[18:38] *** Gasher joined
[18:44] *** bpmedley joined
[18:47] *** espadrine joined
[18:59] <gfldex> m: role R {}; class C does R {}; say C ~~ R; say [C.HOW, R.HOW]

[18:59] <camelia> rakudo-moar 78edbb: OUTPUT«True␤[Perl6::Metamodel::ClassHOW.new Perl6::Metamodel::ParametricRoleGroupHOW.new]␤»

[19:01] <mr_ron> https://github.com/perl6/doc/issues/1138

[19:10] <gfldex> m: class C { method m {} }; role R is C {}; say R.^methods(:all);

[19:10] <camelia> rakudo-moar 78edbb: OUTPUT«()␤»

[19:11] <gfldex> m: class C { method m {} }; role R is C {}; say R.^mro;

[19:11] <camelia> rakudo-moar b5293c: OUTPUT«No such method 'mro' for invocant of type 'Perl6::Metamodel::ParametricRoleGroupHOW'␤  in block <unit> at <tmp> line 1␤␤»

[19:12] *** Vynce joined
[19:14] *** BenGoldberg joined
[19:16] <Geth>  doc: de71ebd927 | (Wenzel P. P. Peppmeyer)++ | doc/Language/typesystem.pod6

[19:16] <Geth>  doc: fix typo

[19:16] <Geth>  doc: review: https://github.com/perl6/doc/commit/de71ebd927

[19:16] <DrForr> Perl6::Parser's here-docs are mostly fixed.

[19:18] <mr_ron> m: class C { method m { say "hi" } }; role R is C {}; say R.WHAT.^methods(:all); R.WHAT.m

[19:18] <camelia> rakudo-moar b5293c: OUTPUT«()␤hi␤»

[19:21] <mr_ron> is R.WHAT.^methods(:all) right in that last example?

[19:22] <gfldex> yes

[19:23] <gfldex> m: class C { method m {} }; role R is C {}; say R =:= R.WHAT

[19:23] <camelia> rakudo-moar b5293c: OUTPUT«True␤»

[19:23] <gfldex> m: class C { method m {} }; role R is C {}; say R === R.WHAT

[19:23] <camelia> rakudo-moar b5293c: OUTPUT«True␤»

[19:27] *** cdg_ left
[19:28] <Hotkeys_> is there an easy way I can whitespace split a string that includes lone combining chars

[19:29] <Hotkeys_> m: "_x ̽".comb(/\S+/).say #for example

[19:29] <camelia> rakudo-moar b5293c: OUTPUT«(_x)␤»

[19:29] <Hotkeys_> m: "_x ̽".uninames.say

[19:29] <camelia> rakudo-moar b5293c: OUTPUT«(LOW LINE LATIN SMALL LETTER X SPACE COMBINING X ABOVE)␤»

[19:36] <Hotkeys_> is there an easy way to seperate out the combining char

[19:36] <Hotkeys_> (at the string level, rather than going through eg. a buf)

[19:40] *** labster joined
[19:48] *** Vynce left
[19:52] <kalkin-> Why does the compiler need curly braces if i do sub f( --> "asd) {} ?

[19:52] <kalkin-> Why can't I just do sub f( --> "asd");

[19:52] <moritz> 'cause without a block, it's just a forward declaration

[19:53] <kalkin-> moritz: but in such case a forward-declaration doesn't make sense

[19:54] <kalkin-> can't the compiler look up if after --> there is a literal or function call(is it even possible?) and then decide if it's a forward declaration or if the sub is finished?

[19:54] <moritz> kalkin-: but you could still want to write a body for the side effect, no?

[19:55] <kalkin-> m: sub f( --> "bar") {} sub f'( --> f){} say f'

[19:55] <camelia> rakudo-moar 65f8f0: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3sub f( --> "bar") {}7⏏5 sub f'( --> f){} say f'␤    expecting any of:␤        infix␤        infix stopper␤        …»

[19:55] <kalkin-> m: sub f( --> "bar") {}; sub f'( --> f){}; say f'

[19:55] <camelia> rakudo-moar 65f8f0: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3sub f( --> "bar") {}; sub f7⏏5'( --> f){}; say f'␤    expecting any of:␤        new name to be defined␤»

[19:55] *** lukiramu joined
[19:56] <kalkin-> moritz: ahh i see

[19:56] <kalkin-> moritz: thanks for the explanation

[19:56] <moritz> kalkin-: you're welcome

[19:58] *** lukaramu left
[19:59] *** Vynce joined
[20:00] *** Vynce left
[20:14] <BenGoldberg> m: sub f( --> "bar") {}; sub f'( --> &f){}; say f'

[20:14] <camelia> rakudo-moar 65f8f0: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3sub f( --> "bar") {}; sub f7⏏5'( --> &f){}; say f'␤    expecting any of:␤        new name to be defined␤»

[20:14] <BenGoldberg> m: sub f( --> "bar") {};

[20:14] <camelia> rakudo-moar 65f8f0: ( no output )

[20:15] <BenGoldberg> m: sub f( --> "bar") {}; sub f′( --> &f){}; say f′

[20:15] <camelia> rakudo-moar 65f8f0: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3sub f( --> "bar") {}; sub f7⏏5′( --> &f){}; say f′␤    expecting any of:␤        new name to be defined␤»

[20:16] <BenGoldberg> m: sub f( --> "bar") {}; sub fʹ( --> &f){}; say fʹ

[20:16] <camelia> rakudo-moar 65f8f0: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Malformed return value␤at <tmp>:1␤------> 3sub f( --> "bar") {}; sub fʹ( -->7⏏5 &f){}; say fʹ␤»

[20:16] <BenGoldberg> m: sub f( --> "bar") {}; sub fʹ( --> f){}; say fʹ

[20:16] <camelia> rakudo-moar 65f8f0: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Type 'f' is not declared␤at <tmp>:1␤------> 3sub f( --> "bar") {}; sub fʹ( --> f7⏏5){}; say fʹ␤»

[20:17] <BenGoldberg> m: sub f( --> "bar") {}; sub fʹ(){ &f }; say fʹ

[20:17] <camelia> rakudo-moar 65f8f0: OUTPUT«sub f ( --> "bar") { #`(Sub+{Callable[Str]}|70950640) ... }␤»

[20:20] <rindolf> Hi all.

[20:23] *** raschipi joined
[20:25] <RabidGravy> okay the DBIish::Informix might be on, i managed to start an IDS instance on my laptop for the first time in fifteen years ;-)

[20:25] *** cibs left
[20:26] <moritz> RabidGravy: you kinda scare me :-)

[20:26] *** cibs joined
[20:27] *** cdg joined
[20:30] *** raschipi left
[20:30] <RabidGravy> moritz, I spent most of the nineties making software for Informix it's a comfort thing ;-)]

[20:32] * geekosaur spent most of the 80s doing that, culminating in ripping the initial release of Informix-SQL to shreds

[20:32] *** cdg left
[20:33] * moritz half of the eighties not being born yet, and the ninties in school

[20:33] <RabidGravy> Oh I spent the 80s getting trashed and pretending I was a film editor

[20:34] *** AlexDaniel joined
[20:37] *** pecastro left
[20:37] *** ocbtec joined
[20:37] *** ChoHag joined
[20:38] <RabidGravy> let's put it like this I was conceived during the Cuban Missile Crisis, born four months before JFK was killed

[20:39] <AlexDaniel> smls++ # for finding a bug and then fixit it himself

[20:39] <AlexDaniel> ng

[20:39] *** dmaestro left
[20:39] *** domidumont left
[20:41] * TimToady spent the 50s watching them build the Harbor Freeway outside his kitchen window...we were the first house on the street not bulldozed for that...

[20:41] *** dugword left
[20:43] <TimToady> but eventually termites got the house, and I think it's been a vacant lot for the last 50 years or so...

[20:44] <timotimo> that's some thorough termites

[20:44] *** cdg joined
[20:45] *** ChoHag left
[20:47] <RabidGravy> I'm not sure if the first house I knew is still there

[20:48] <geekosaur> the first house I knew was still there ~10 years ago; have not cared enough to check since, but no reason to believe it isn't

[20:48] <TimToady> actually, I suspect the 110-105 interchange probably wiped it out eventually

[20:49] <geekosaur> (re conception, there is reason to believe I was conceived in the wake of the JFK assassination)

[20:50] *** ChoHag joined
[20:52] <RabidGravy> tough time for new couples :)

[20:55] <RabidGravy> and people wonder why I'm a nihilist

[20:55] <TimToady> it's why you were attracted to the Camel Lot

[20:56] <TimToady> .oO(Ask not what you can do for your camel...)

[20:56] <TimToady> oh wait, that's backwards :)

[20:58] <kalkin-> With todays tests you can pinpoint the conception right to the day.

[20:58] * kalkin- is going to google what have happend when his girl was conceived

[20:58] <moritz> kalkin-: really?

[20:58] <moritz> my impression was the pregnancy tests weren't even reliable until 10, 15 days after conception

[20:59] <geekosaur> cheap ones

[20:59] <TimToady> um, back then, it involved kill a rabbit

[20:59] <moritz> no, even the ones that doctors do

[21:00] <moritz> (though that was 7 years ago, TBH :-)

[21:00] <timotimo> you could MRT the person

[21:00] <timotimo> i'm not sure if you can get sufficient resolution, though?

[21:00] <geekosaur> there have been advances --- and most doctors don't use those tests because they are much more expensive

[21:00] <timotimo> otherwise slice and dice the person, freeze the parts, and put them under the electron microscope 

[21:00] <geekosaur> and it's rare that someone actually needs that orecision

[21:00] <timotimo> that ought to give you the ability to count cells

[21:00] <kalkin-> https://en.wikipedia.org/wiki/Portal:Current_events/2016_April_22

[21:00] <RabidGravy> boom

[21:01] <kalkin-> a lot of killings happened this day, but i guess this happens every day

[21:01] <timotimo> probably

[21:01] <RabidGravy> goats

[21:02] <geekosaur> there's only 365 (or sometimes 366) days per year; see the birthday "paradox"

[21:03] <kalkin-> I think I will go with this: Romania is expelled from this year's Eurovision Song Contest

[21:03] <DrForr> What did we d?

[21:03] <kalkin-> Actually you can pinpoint it to +3 days, but in best case you have a positive result on next day

[21:03] <DrForr> *d

[21:03] <DrForr> Grr.

[21:03] <DrForr> *do

[21:03] <RabidGravy> wut

[21:04] <kalkin-> DrForr: you are poor and don't pay your debts?

[21:04] <kalkin-> :D

[21:04] <kalkin-> (literally)

[21:04] <DrForr> It would not surprise me at all.

[21:05] *** Gasher left
[21:05] <kalkin-> Romanian Television (TVR) failed to pay outstanding debts dating back to 2007

[21:06] <RabidGravy> whatever

[21:07] <RabidGravy> I'm sure Sir Cliff will recuse them

[21:21] *** FROGGS_ left
[21:25] *** TEttinger joined
[21:31] *** Todd joined
[21:31] <Todd> Where are the modules for Perl 6 ?  I need Net::FTP

[21:32] <DrForr> modules.perl6.org

[21:37] <brokenchicken> buggable: Net::FTP

[21:38] <brokenchicken> buggable: eco Net::FTP

[21:38] <buggable> brokenchicken, Net::FTP 'A ftp client written in perl6': https://github.com/araraloren/Net-FTP

[21:38] <timotimo> 9 months ago, that doesn't seem so terrible

[21:39] *** Vynce joined
[21:45] *** dugword joined
[21:49] <masak> Todd: also, remember that if there isn't a Perl 6 module, `use Inline::Perl5` and `use DBI:from<Perl5>` (etc) allow you to use much of CPAN

[21:49] <timotimo> almost all of cpan, yeah

[21:49] *** RabidGravy left
[21:52] *** Tonik left
[21:52] *** pecastro joined
[22:01] <masak> Inline::Perl5 is chronically unsung and nine_ is my personal hero

[22:03] <dugword> Inline::Perl5 is fantastic, I use it with DBI all the time.

[22:04] <masak> I should do that more

[22:07] <BenGoldberg> It would be cool of DBIish were to automatically use it for any backend which is NYI in perl6.

[22:07] * geekosaur still thinks the Net::FTP problem is a local network configuration issue, not a module issue

[22:08] <geekosaur> because FTP's an ancient and horrible protocol, and no module can fix that, only replacing it with a sane protocol can fix it

[22:13] *** bjz joined
[22:19] <timotimo> yes.

[22:19] <Todd> Hi All,     How do I fix this?  Many thanks, -T  # /usr/share/perl6/site/bin/panda install Net::FTP ==> Fetching Net::FTP ==> Building Net::FTP ==> Testing Net::FTP t/01-load.t ......... ok t/02-login.t ........ ok t/03-directory.t .... ok t/04-list.t ......... ok  # Failed test 'Get file stor.txt success' # at t/05-put-get.t line 11  # Failed test 'Put file some.txt success' # at t/05-put-get.t line 12 # Looks like you failed 2 tests of 

[22:19] *** BenGoldberg left
[22:20] <Todd> need an RPM of Net::FTP

[22:20] <timotimo> dude

[22:20] <timotimo> have you even checked to see if it's network issues?

[22:20] <timotimo> you said you were using an ec2 instance?

[22:21] <timotimo> like, can you do the same things the tests are doing with a regular ftp client?

[22:22] <jast> at a quick look, the tests look like they're testing against a live FTP server which seems to be down

[22:22] *** BenGoldberg joined
[22:22] <geekosaur> prt of the problem, as I just said on the list, is that it really should not be requiring those tests to succeed --- if you are using ftp internally but have it blocked externally, how do you install this module as is?

[22:22] <timotimo> oh, the ftp server is down?

[22:22] <timotimo> well, that'd explain it

[22:22] <Todd> My network firewall logs everything that gets rejected, both incoming and outgoing.  It is quiet.

[22:22] <timotimo> in that case ... Todd just "panda --force install Net::FTP"

[22:23] <kalkin-> Todd: dunno about panda but zef --/test install Net::FTP should succeed without tests

[22:23] <timotimo> alternatively --notests or --notest or what it's called

[22:23] <kalkin-> zef --/test install Net::FTP works for me

[22:24] <Todd> I hate using --force, but at this point, I don't see the harm

[22:24] <Todd> It is running right now'

[22:24] <timotimo> it just means it ignores failures

[22:25] <Todd> Any chance of getting this worked on? https://bugzilla.redhat.com/show_bug.cgi?id=1410159

[22:25] <Todd> it is taking its sweet time, now that I have someone waiting on me

[22:25] <Todd> Should I run it as root?  I ususlly do.

[22:25] <timotimo> don't

[22:26] <Todd> I am.  Should I start over?

[22:26] <timotimo> too late

[22:26] <timotimo> all the files and folders probably belong to root now, so you'll get permission errors whenever you try to install something

[22:26] <timotimo> just a guess

[22:27] <Todd> since all user will be seeing it, I thought is had to be as root.  I did not what a single user install in my ~ directory

[22:27] <kalkin-> nothing you can't fix with chmod a+rwx (just a joke) :)

[22:27] <timotimo> ok

[22:28] <Todd> Dubious, test returned 255 (wstat 65280, 0xff00) Failed 2/2 subtests

[22:28] <Todd> still running though

[22:28] <timotimo> if --force is turned on, it won't matter

[22:28] <timotimo> in theory we could run an ftp server on p6c.org and just make it completely unable to write to or read from disk

[22:28] <Todd> aby idea why fedora took perl 6's modules out as of perl6, v7?

[22:28] <timotimo> so that it could be used for the ftp test

[22:29] <Todd> if this does not work, can I just download Net::FTP's clone and compile it myself?

[22:30] *** BenGoldberg left
[22:31] <timotimo> of course

[22:31] <timotimo> use "panda install ." inside the Net::FTP checkout

[22:31] <timotimo> it shouldn't make any difference if panda itself is able to clone it, too

[22:31] <Todd> Failure Summary ---------------- Net::FTP(         *test stage failed for Net::FTP: 0)

[22:32] <Todd> ./net.ftp.pl6 ===SORRY!=== Could not find Net::FTP at line 10 in:     /home/tony/.perl6     /usr/share/perl6/site     /usr/share/perl6/vendor     /usr/share/perl6

[22:32] *** BenGoldberg joined
[22:33] <Todd> I will try the clone next

[22:33] <timotimo> where did it install Net::FTP to?

[22:34] <Todd> I am doing a "find" on /usr/share looking for it

[22:34] <Todd> find /usr/share -iname \*ftp\* | grep -i net

[22:35] <Todd> where do they usually go?

[22:35] <geekosaur> that won't work because the install name is actually a hash

[22:35] <Todd> only found perl5's stuff

[22:35] <timotimo> right

[22:36] <samcv> \o/ linguist just made a release

[22:36] <samcv> well 6 days ago. i didn't notice tho

[22:36] <timotimo> in case you haven't seen it, here's what stuff the Net::FTP thing uses: https://github.com/araraloren/Net-FTP/blob/master/t/02-login.t

[22:36] <samcv> so github should have updated perl 6 highlighting as of now

[22:36] <Todd> please elusidate 

[22:37] <lizmat> samcv: whee!

[22:37] <Todd> Can I go get this thing from somewhere else?

[22:38] <timotimo> worst case just run your program with -I/home/todd/Net::FTP/lib/

[22:39] <Todd> what do you mean?

[22:39] <timotimo> just point the -I at the source folder

[22:40] <Todd> I am sorry for being dense, but what program and where?

[22:40] <timotimo> whatever program you want to write that uses Net::FTP

[22:40] <Todd> I can't get Net::FTP to install.  

[22:40] <timotimo> yeah. you don't need to install it

[22:40] <timotimo> you can just point -I at the source folder

[22:41] <Todd> am doing a "panda install ." from inside the clone folder.

[22:41] *** ufobat left
[22:41] <timotimo> you'll need --force or --notests there, too

[22:41] <Todd> as user todd, instead of root.

[22:42] <Todd> any idea where it is suppose to go afterwards?

[22:43] <Todd> Is there a .config or such inside the clone I can look at to see where they go?

[22:43] <timotimo> m: say $*REPO.repo-chain

[22:43] <camelia> rakudo-moar 53a7ac: OUTPUT«(inst#/home/camelia/.perl6 inst#/home/camelia/rakudo-m-inst-2/share/perl6/site inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor inst#/home/camelia/rakudo-m-inst-2/share/perl6 CompUnit::Repository::AbsolutePath.new(next-repo => CompUnit::Repository::NQ…»

[22:43] *** rindolf left
[22:44] <Todd> no rakudo anything in my home directory

[22:44] <timotimo> you're supposed to run that command yourself

[22:45] <Todd> I don't understand.

[22:45] <timotimo> run perl6 -e '$*REPO.repo-chain'

[22:45] <timotimo> it will tell you the corresponding folders on your local system

[22:47] <Todd> perl6 -e '$*REPO.repo-chain'    return a blank line

[22:47] <timotimo> sorry, needs a say at the beginning

[22:48] <samcv> does anybody know, are objects automatically thread safe?

[22:48] <timotimo> objects are automatically thread-unsafe

[22:48] <samcv> k

[22:48] <timotimo> if you want threadsafe objects, try OO::Monitors

[22:49] <Todd> perl6 -e 'say $*REPO.repo-chain' (inst#/home/todd/.perl6 inst#/usr/share/perl6/site inst#/usr/share/perl6/vendor inst#/usr/share/perl6 CompUnit::Repository::AbsolutePath.new(next-repo => CompUnit::Repository::NQP.new(next-repo => CompUnit::Repository::Perl5.new(next-repo => CompUnit::Repository))) CompUnit::Repository::NQP.new(next-repo => CompUnit::Repository::Perl5.new(next-repo => CompUnit::Repository)) CompUnit::Repository::Perl5.new(

[22:49] <samcv> timotimo, what about methods? methods also unsafe?

[22:49] <Todd> What does this tell me about where panda installs things?

[22:49] <samcv> everything unsafe?

[22:49] <timotimo> nothing is locked for you by default

[22:50] <samcv> OO::Monitors looks good. will check it out

[22:50] <timotimo> most things won't crash your stuff, but you're not guaranteed to keep all data if you concurrently access things

[22:50] <Todd> panda --force --notests install .     did the trick.  I had to use both --force and --notests

[22:50] <timotimo> m: my @foo; start { loop { @foo.push: 1 } }; start { loop { @foo.push: 1 } }; sleep 10

[22:50] <camelia> rakudo-moar 62a7cf: OUTPUT«(signal ABRT)*** Error in `/home/camelia/rakudo-m-inst-1/bin/moar': double free or corruption (!prev): 0x00007ff5dc037b80 ***␤======= Backtrace: =========␤/lib64/libc.so.6(+0x727df)[0x7ff5e32a97df]␤/lib64/libc.so.6(+0x7804e)[0x7ff5e32af04e]␤/lib64/…»

[22:51] <timotimo> samcv: a future change in moarvm will make this not crash, for example

[22:52] <samcv> k

[22:52] <timotimo> same thing happens with hashes

[22:52] <Todd> Is placing perl6's modules back into the repo going to happen any time soon?

[22:52] <timotimo> m: my %foo; start { for 1..* { %foo{"a$_"} = 1 } }; start { for 1..* { %foo{"b$_"} = 2 } }; sleep 10

[22:52] <camelia> rakudo-moar 62a7cf: OUTPUT«(signal ABRT)*** Error in `/home/camelia/rakudo-m-inst-1/bin/moar': double free or corruption (!prev): 0x00007fd0e00853a0 ***␤======= Backtrace: =========␤/lib64/libc.so.6(+0x727df)[0x7fd0f238d7df]␤/lib64/libc.so.6(+0x7804e)[0x7fd0f239304e]␤/lib64/…»

[22:52] <timotimo> this will also at some point become non-crashing i think. but i'm not sure

[22:53] <timotimo> Todd: we have read your question. apparently nobody knows.

[22:54] <Todd> Signing off.  Thank you all!  Saved my butt!

[22:54] <timotimo> good luck!

[22:55] <Todd> Now the ABSOLUTE FUN BEGINS!  Now I have to figure out how to get pand on Windows 7 to install Net::FTP too.  I got FOUR PAGES of errors!  Wish there was a bunch of you guys over on the Windows side!

[22:57] <timotimo> there's a few

[22:57] <timotimo> jnthn, our best core developer, is on windows

[22:57] <Todd> Where is a good place to go to get this kind of help for Windows?

[22:57] <timotimo> so things tend to always work on windows

[22:58] <Todd> Do I have to install gcc or somehting to get panda to work on windows?

[22:58] <timotimo> i don't think you should go anywhere else. mailing list, irc, maybe the /r/perl6 subreddit, maybe stackoverflow.

[22:58] <timotimo> shouldn't be necessary

[22:58] <timotimo> only if you have modules that contain some c code

[22:58] <timotimo> i don't think Net::FTP contains any code that needs to be compiled

[22:58] <Todd> You guys mind it I try the cloen trick over on windows while you wait?

[23:00] <timotimo> why not

[23:00] <timotimo> oh

[23:00] <timotimo> you'll need git on windows to use panda

[23:00] <timotimo> maybe that's what's missing

[23:01] <timotimo> i mean, not only do you need to have it, it also needs to work if you just run "git"

[23:01] <timotimo> so it has to be in %PATH

[23:02] *** TEttinger left
[23:03] *** BenGoldberg left
[23:03] <Todd> I already insalled Git-2.11.0.2-32-bit.exe

[23:05] <timotimo> well, is panda able to find it?

[23:05] *** dmaestro joined
[23:05] <timotimo> are you ever going to show us what errors you get, or will you wait for our crystal ball users come online?

[23:06] <Todd> just got a change to see

[23:06] <Todd> C:\NtUtil>perl6 .\Net.FTP.test.pl6 ===SORRY!=== Could not find Net::FTP in:     C:\Users\Matt\.perl6\2016.01.1     C:\rakudo\share\perl6\site     C:\rakudo\share\perl6\vendor     C:\rakudo\share\perl6     CompUnit::Repository::AbsolutePath<12513112>     CompUnit::Repository::NQP<12511056>     CompUnit::Repository::Perl5<12509144>

[23:07] <Todd> C:\Drivers\Perl>cd Net-FTP-master  C:\Drivers\Perl\Net-FTP-master>panda --notests --force install . resolve stage failed for .: Project . not found in the ecosystem. Maybe try "pan da update" first?   in sub die at C:\rakudo\share\perl6\site\sources\9036849E1656E91211D00AB4530B8 1D29A7D6E82 line 217   in method resolve at C:\rakudo\share\perl6\site\sources\9036849E1656E91211D00A B4530B81D29A7D6E82 line 220   in sub MAIN at C:\rakudo\share

[23:08] <timotimo> why does it think . is supposed to be a module name?

[23:08] <timotimo> maybe try ./ instead of .

[23:08] <Todd> as soon an "panda update" finishes

[23:09] <Todd> ./ give me the same error

[23:09] <timotimo> or .\

[23:09] <timotimo> it's windows afte rall

[23:10] <Todd> oh poop. hold one.  I have egg on my face.  Need to wipe it away first

[23:10] <timotimo> but eggs are python packages, not perl

[23:11] <Todd> The stupid dezipper gave me two driectories "C:\Drivers\Perl\Net-FTP-master\Net-FTP-master>" I was in the first.   Moving to the second it worked

[23:11] <timotimo> that's clever

[23:11] <Todd> Egg on the face is more fun when it happens to someone else!

[23:12] <timotimo> well, better than accidentally vomiting files all over the CWD

[23:12] <timotimo> which happens regularly to me ever since i didn't install dtrx on my new machines

[23:12] *** ChoHag left
[23:13] <Todd> and my simple pl6 program to test the module's installation worked.  Love you guys!

[23:13] <Todd> Thank you!  I will sign off shortly

[23:13] <timotimo> good luck with your rotation script

[23:14] *** cdg_ joined
[23:15] <Todd> Thank you.  Thought of another question.  Can I purloin the module I created in windows to use on other (32bit) Windows machines.  Or do I need to do this for every machine?

[23:16] <geekosaur> probably need to do it on every machine. the precomp stuff is ... touchy

[23:16] *** cdg left
[23:17] <Todd> oh well.  for now the other machines are 64 bit'ers

[23:17] <geekosaur> also I'd suggest filing a bug against Net::FTP because it *really* should not be requiring outside connectivity for its module tests

[23:17] <Todd> Thank you guys again!  You are real butt savers.

[23:17] <geekosaur> especially for the FTP protocol, which is difficult and (rightly) restricted in many places

[23:18] <Todd> Did that yesterday: https://github.com/araraloren/Net-FTP/issues/23

[23:20] <Todd> I am doing it to get around ransomware, which goes after drive letters

[23:21] <geekosaur> hope you also record backups as diffs; would be bad if you overwrote your last-known-good with something encrypted by such an attack

[23:24] <Todd> I keep several archives in rotation.  I need this perl program to do the pruning as Cobian Backup can write to ftp but can not prune out driectories in rotation if the have anything complicated in their file names, such as "+++" which are foudn int Firefox's "storage" folder, etc.

[23:24] *** BenGoldberg joined
[23:24] <timotimo> it wouldn't surprise me if ransomware would at some point also scan the local 'net for FTP servers and similar things

[23:25] *** lucasb joined
[23:25] <Todd> For local drive backups, I use multiple hidden partitons which I wake up and rehide after the backup.  Max I only get one partiton clobbered

[23:26] <timotimo> fair enough, but i've heard of ransomware that sleeps and observes for a while before striking

[23:26] <Todd> Oh they might, but they are looking for low hanging fruit.  And when and if they ever decide to go after ftp attachments, I will program one use account for read only and one to write only.  haHAHAHA!

[23:26] <Todd> Yes it does strike when backing up.  That is while the multiple archives

[23:27] <Todd> hidden partitiona adn ftp have no drive letters

[23:30] <Todd> Thank you all again!!!    i really am going this time.  Bye Bye

[23:31] <lucasb> bai

[23:32] <timotimo> ohai lucasb 

[23:32] <lucasb> o/ :)

[23:32] *** Todd left
[23:35] *** labster left
[23:37] *** inra joined
[23:46] *** bjz left
[23:47] *** BenGoldberg left
[23:49] *** BenGoldberg joined
[23:52] *** shadowpaste0 joined
[23:55] *** Actualeyes left
[23:59] *** brabo joined
