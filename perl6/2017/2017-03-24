[00:00] <Voldenet> m: "gżegżółka".encode('ISO-8859-2').say

[00:00] <camelia> rakudo-moar a01d67: OUTPUT: «Unknown string encoding: 'iso-8859-2'␤  in block <unit> at <tmp> line 1␤␤»

[00:00] <Voldenet> m: "test".encode('ISO-8859-1').say

[00:01] <camelia> rakudo-moar a01d67: OUTPUT: «Blob[uint8]:0x<74 65 73 74>␤»

[00:01] <Voldenet> odd

[00:01] *** pytuger left
[00:01] *** Sound left
[00:03] *** rindolf left
[00:08] *** cibs left
[00:08] <AlexDaniel> m: say <a b c>.last

[00:08] <camelia> rakudo-moar a01d67: OUTPUT: «No such method 'last' for invocant of type 'List'␤  in block <unit> at <tmp> line 1␤␤»

[00:08] <AlexDaniel> m: say <a b c>.end

[00:08] <camelia> rakudo-moar a01d67: OUTPUT: «2␤»

[00:10] *** adu left
[00:10] *** cibs joined
[00:12] *** cpage_ left
[00:15] *** pytuger joined
[00:16] <tony-o> hm

[00:17] <AlexDaniel> o/

[00:18] *** khw joined
[00:20] <tony-o> when did GLOBAL::.values stop returning a list of loaded modules?

[00:21] *** mcmillhj joined
[00:22] <AlexDaniel> m: say <a b c>.tail

[00:22] <camelia> rakudo-moar a01d67: OUTPUT: «c␤»

[00:23] <geekosaur> possibly the lexical module loading changes?

[00:23] <AlexDaniel> tony-o: there's some information on http://rakudo.org/ , perhaps it is relevant

[00:25] <tony-o> geekosaur AlexDaniel ++

[00:26] *** mcmillhj left
[00:35] <tony-o> is the intent with that to not allow 'require' to be passed file names?

[00:36] <tony-o> m: say (try require "hello.pm6".IO.absolute);

[00:36] <camelia> rakudo-moar a01d67: OUTPUT: «===SORRY!===␤No such method 'IO' for invocant of type 'Any'␤»

[00:37] <BenGoldberg> This is probably a silly idea, but would it be useful for Positional to have it's own .map(Callable) method, which returns a new Positional whose values are lazily constructed when accessed via []?

[00:37] <tony-o> ah, nevermind

[00:37] <BenGoldberg> m: my \result = [^5].hyper.map: { say $_; $_ }; dd result

[00:37] <camelia> rakudo-moar a01d67: OUTPUT: «HyperSeq.new␤»

[00:37] <tony-o> that's a weird precedence, though

[00:37] <geekosaur> m: say (try require ("hello.pm6".IO.absolute));

[00:37] <camelia> rakudo-moar a01d67: OUTPUT: «Nil␤»

[00:37] <geekosaur> yeh

[00:37] <BenGoldberg> m: my \result = [^5].map: { say $_; $_ }; dd result

[00:37] <camelia> rakudo-moar a01d67: OUTPUT: «0␤1␤2␤3␤4␤(0, 1, 2, 3, 4).Seq␤»

[00:38] <geekosaur> I suspect it's related to being able to handle either an expression or a "bareword" module name

[00:39] <tony-o> so, now i need to figure out how to get the exported class/role from that file since require returns the path with that.  i guess it'd be the .new.WHAT

[00:39] <tony-o> hmm..weird

[00:41] *** cpage_ joined
[00:41] <tony-o> that isn't it.

[00:42] <BenGoldberg> huggable, rakudobug

[00:42] <huggable> BenGoldberg, Report bugs by emailing to [email@hidden.address]
[00:42] * BenGoldberg hugs huggable 

[00:42] <BenGoldberg> huggable, botsnack

[00:42] <synopsebot6> om nom nom

[00:42] <huggable> BenGoldberg, nothing found

[00:43] * BenGoldberg laughs.

[00:43] <BenGoldberg> huggable, botsnack is Thank you.

[00:43] <synopsebot6> om nom nom

[00:43] <huggable> BenGoldberg, nothing found

[00:43] <BenGoldberg> huggable, botsnack :is: Thank you.

[00:43] <synopsebot6> om nom nom

[00:43] <huggable> BenGoldberg, Added botsnack as Thank you.

[00:43] <synopsebot6> om nom nom

[00:43] <tony-o> haha

[00:46] *** pytuger left
[00:50] *** mcmillhj joined
[00:51] *** Celelibi left
[00:53] *** aborazmeh joined
[00:53] *** aborazmeh left
[00:53] *** aborazmeh joined
[00:55] *** mcmillhj left
[00:58] *** Cabanossi left
[00:59] *** kurahaupo__ left
[01:00] *** Cabanossi joined
[01:01] *** Ben_Goldberg joined
[01:01] *** BenGoldberg left
[01:01] *** Ben_Goldberg is now known as BenGoldberg

[01:04] *** Celelibi joined
[01:04] *** mcmillhj joined
[01:06] *** sufrostico left
[01:08] *** sufrostico joined
[01:09] *** mcmillhj left
[01:17] *** mcmillhj joined
[01:19] *** cibs left
[01:20] *** cibs joined
[01:22] *** lichtkind_ left
[01:24] *** mcmillhj left
[01:35] *** bloatable6 left
[01:35] *** bloatable6 joined
[01:35] *** ChanServ sets mode: +v bloatable6

[01:44] *** Cabanossi left
[01:45] *** Cabanossi joined
[01:47] <Geth> ¦ doc: ccae74a150 | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[01:47] <Geth> ¦ doc: [io grant] Fix incorrect information for IO::Path.absolute

[01:47] <Geth> ¦ doc: 

[01:47] <Geth> ¦ doc: The method does not use `$*CWD`, but the object's CWD attribute,

[01:47] <Geth> ¦ doc: if no base is given.

[01:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ccae74a150

[01:48] <Geth> ¦ doc: 3cf943d86b | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[01:48] <Geth> ¦ doc: [io grant] Expand IO::Path.relative

[01:48] <Geth> ¦ doc: 

[01:48] <Geth> ¦ doc: - include info on what happens if the path is already relative

[01:48] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/3cf943d86b

[01:49] *** cibs left
[01:51] *** cibs joined
[02:00] *** cibs left
[02:01] *** cibs joined
[02:07] *** cibs left
[02:07] *** cibs joined
[02:12] *** cibs left
[02:14] *** cibs joined
[02:14] *** bloatable6 left
[02:14] *** bloatable6 joined
[02:14] *** ChanServ sets mode: +v bloatable6

[02:14] *** Cabanossi left
[02:15] *** Cabanossi joined
[02:16] *** bloatable6 left
[02:16] *** bloatable6 joined
[02:16] *** ChanServ sets mode: +v bloatable6

[02:18] *** khw left
[02:20] *** cibs left
[02:20] *** cibs joined
[02:26] *** cibs left
[02:27] *** cibs joined
[02:36] *** cibs left
[02:38] *** cibs joined
[02:43] *** cibs left
[02:44] *** cibs joined
[02:45] *** ilbot3 left
[02:47] *** ilbot3 joined
[02:47] *** ChanServ sets mode: +v ilbot3

[02:49] *** cibs left
[02:50] *** cibs joined
[02:56] *** cibs left
[02:58] *** Cabanossi left
[03:00] *** Cabanossi joined
[03:01] *** cibs joined
[03:02] *** kybr joined
[03:05] *** mcmillhj joined
[03:07] *** cibs left
[03:09] *** bjz joined
[03:09] <Geth> ¦ whateverable/master: 4 commits pushed by (Aleks-Daniel Jakimenko-Aleksejev)++

[03:09] <Geth> ¦ whateverable/master: 3ed10e793a | No hardcoded SHAs in Evalable tests

[03:09] <Geth> ¦ whateverable/master: 216ba149fe | Make most Whateverable code repo-agnostic

[03:09] <Geth> ¦ whateverable/master: 5846959781 | New bot: Bloatable

[03:09] <Geth> ¦ whateverable/master: f3bb3e0a4d | Join #moarvm too

[03:09] <Geth> ¦ whateverable/master: review: https://github.com/perl6/whateverable/compare/9dc5935cba...f3bb3e0a4d

[03:11] <AlexDaniel> ↑ but no build-moarvm script for it yet… :P

[03:13] *** mcmillhj left
[03:13] *** xtreak joined
[03:17] <BenGoldberg> m: my $repo = 42; dd :$repo

[03:17] <camelia> rakudo-moar a01d67: OUTPUT: «block <unit>␤»

[03:18] <BenGoldberg> m: my $repo = 42; dd $:repo

[03:18] <camelia> rakudo-moar a01d67: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use placeholder parameter $:repo outside of a sub or block␤at <tmp>:1␤------> 3my $repo = 42; dd $:repo7⏏5<EOL>␤»

[03:18] <BenGoldberg> m: my $r = 42; say item :$r;

[03:18] <camelia> rakudo-moar a01d67: OUTPUT: «()␤»

[03:18] <BenGoldberg> m: my $r = 42; dd item $:r;

[03:18] <camelia> rakudo-moar a01d67: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use placeholder parameter $:r outside of a sub or block␤at <tmp>:1␤------> 3my $r = 42; dd item $:r7⏏5;␤»

[03:20] <BenGoldberg> m: my $r = 42; my $z = :$r;

[03:20] <camelia> rakudo-moar a01d67: ( no output )

[03:20] <BenGoldberg> m: my $r = 42; my $z = :$r; say $z

[03:20] <camelia> rakudo-moar a01d67: OUTPUT: «r => 42␤»

[03:20] <BenGoldberg> AlexDaniel, you only used it in one place, but 'repo => $repo' is probably better written as ':$repo'

[03:20] <AlexDaniel> BenGoldberg: oh… right

[03:21] <AlexDaniel> that's actually what the rest of the code is using

[03:23] *** mcmillhj joined
[03:23] <Geth> ¦ whateverable: c4a763b66c | (Aleks-Daniel Jakimenko-Aleksejev)++ | Whateverable.pm6

[03:23] <Geth> ¦ whateverable: Tiny code style tweak

[03:23] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/c4a763b66c

[03:25] <AlexDaniel> BenGoldberg: if only somebody refactored the whole code for Bloatable and Unicodable… *wink-wink*

[03:25] <AlexDaniel> :)

[03:27] <BenGoldberg> I don't quite get what bloatable does...

[03:27] * BenGoldberg shrugs

[03:27] *** noganex_ joined
[03:27] *** mcmillhj left
[03:30] *** noganex left
[03:32] <geekosaur> tells you how much actual memory a binary will use, without running it

[03:32] <geekosaur> chasing down shared objects etc.

[03:35] *** unicodable6 left
[03:35] *** benchable6 left
[03:35] *** statisfiable6 left
[03:35] *** bloatable6 left
[03:35] *** evalable6 left
[03:35] *** bisectable6 left
[03:35] *** committable6 left
[03:42] *** jraglin left
[03:42] *** jraglin joined
[03:43] *** aborazmeh left
[03:44] *** mcmillhj joined
[03:44] *** Cabanossi left
[03:45] *** Cabanossi joined
[03:46] *** skids left
[03:49] *** mcmillhj left
[03:54] *** Celelibi left
[03:57] *** cibs joined
[03:57] *** Celelibi joined
[04:00] *** bjz left
[04:01] *** cibs left
[04:01] *** BenGoldberg left
[04:02] *** mcmillhj joined
[04:02] *** cibs joined
[04:05] *** llfourn left
[04:05] *** unicodable6 joined
[04:05] *** bisectable6 joined
[04:05] *** benchable6 joined
[04:05] *** committable6 joined
[04:05] *** evalable6 joined
[04:05] *** ChanServ sets mode: +v unicodable6

[04:05] *** bloatable6 joined
[04:05] *** ChanServ sets mode: +v bisectable6

[04:05] *** ChanServ sets mode: +v benchable6

[04:05] *** ChanServ sets mode: +v committable6

[04:05] *** ChanServ sets mode: +v evalable6

[04:05] *** ChanServ sets mode: +v bloatable6

[04:05] *** statisfiable6 joined
[04:05] *** ChanServ sets mode: +v statisfiable6

[04:07] *** cibs left
[04:09] *** mcmillhj left
[04:10] *** AlexDaniel left
[04:11] *** mcmillhj joined
[04:14] *** cibs joined
[04:15] *** jraglin left
[04:15] *** jraglin_ joined
[04:22] *** adu joined
[04:27] <adu> hi

[04:43] *** Cabanossi left
[04:44] *** Cabanossi joined
[05:10] <u-ou> hi

[05:17] <samcv> hi

[05:19] *** bjz joined
[05:20] *** wamba joined
[05:22] *** ribasushi left
[05:28] *** ribasushi joined
[05:29] *** aborazmeh joined
[05:29] *** aborazmeh left
[05:29] *** aborazmeh joined
[05:33] <masak> morning, #perl6

[05:33] *** ribasushi left
[05:34] <samcv> hope you are all good at $present-time

[05:36] *** ribasushi joined
[05:40] *** mcmillhj left
[05:41] *** Cabanossi left
[05:44] *** Cabanossi joined
[05:52] *** jraglin_ left
[05:52] *** jraglin joined
[05:53] *** adu left
[05:53] *** mcmillhj joined
[05:58] *** mcmillhj left
[06:01] *** adu joined
[06:05] *** llfourn joined
[06:16] *** mcmillhj joined
[06:21] *** mcmillhj left
[06:27] *** mcmillhj joined
[06:28] *** Cabanossi left
[06:29] *** Cabanossi joined
[06:31] *** mcmillhj left
[06:32] *** darutoko joined
[06:35] <samcv> ok i have the wiki page that supposidly has the most languages

[06:35] <samcv> 345 languages this article is in. this should be sufficient for adding more unicode tests :)

[06:35] <samcv> this is the page btw https://en.wikipedia.org/wiki/Kur%C3%B3w

[06:38] <samcv> though this one might be better. has 285 wikis languages (previous one included test wikis in the count) https://en.wikipedia.org/wiki/Finland

[06:40] *** jraglin left
[06:40] *** jraglin_ joined
[06:42] *** tojo joined
[06:49] *** mcmillhj joined
[06:49] *** Actualeyes left
[06:50] *** RabidGravy joined
[06:53] *** mcmillhj left
[06:58] *** mcmillhj joined
[06:59] *** xtreak left
[07:00] *** xtreak joined
[07:01] *** adu left
[07:02] *** mcmillhj left
[07:10] *** domidumont joined
[07:12] *** bjz left
[07:16] *** domidumont left
[07:17] *** domidumont joined
[07:18] *** Actualeyes joined
[07:19] *** mcmillhj joined
[07:21] *** jraglin_ left
[07:21] *** jraglin_ joined
[07:22] *** n1ce_ left
[07:24] *** mcmillhj left
[07:26] *** jraglin_ left
[07:26] *** jraglin joined
[07:30] *** bjz joined
[07:33] *** wamba left
[07:35] *** xtreak left
[07:36] *** Todd_ joined
[07:36] <Todd_> Hi All!   What am I doing wrong here?

[07:37] <Todd_> perl6 -e 'my @x=<a b c>;my @y=<x y z>; push(@x, @y); for @x -> $I {say $I;}'

[07:37] <Todd_> a b c [x y z]

[07:37] *** xtreak joined
[07:37] <Woodi> hi Todd_ 

[07:37] <Woodi> I think push(@x,...)

[07:37] <Woodi> ,slip @y ?

[07:37] <Todd_> what I am after is `a b c x y z`     And I don't what to create a new array, just add to the first one

[07:37] <Woodi> or flat

[07:38] <DrForr> m: my @x=1,2;my @y=3,4;append(@x,@y); say @x;

[07:38] <camelia> rakudo-moar e87179: OUTPUT: «[1 2 3 4]␤»

[07:38] <Todd_> perl6 -e 'my @x=<a b c>;my @y=<x y z>; push(@x, slip @y); for @x -> $I {say $I;}' a b c x y z

[07:38] <Todd_> perfect.  let me append too

[07:39] <Todd_> perl6 -e 'my @x=<a b c>;my @y=<x y z>; append(@x, @y); for @x -> $I {say $I;}' a b c x y z

[07:39] <Todd_> perfect too.  Thank you guys!

[07:39] <DrForr> No worries. How'd you find out about perl6?

[07:40] *** xtreak left
[07:40] *** mcmillhj joined
[07:41] <DrForr> (also, that's one of the first mildly annoying things I ran into.)

[07:43] <Todd_> I got an email from infoworld.  I adore Perl5 and LOVE Perl6.  Some Perl5 guys are crabby about Perl6, but I seriously don't get it.  P6 is a beautiful clean up of P5, especially the stone age/assembly code like data transfer to subs.

[07:45] <DrForr> Oo, Infoworld, I used to get their magazines when they were in print.

[07:45] <Todd_> And I get what I was doing wrong.  I was placing the entire @y into the next element of @x.  No soup for me!

[07:45] *** mcmillhj left
[07:45] <DrForr> Yeah, it's a little confusing because the semantics of push() didn't change, how arrays behave changed.

[07:46] <Todd_> Inforworld is mostly publish or perish and doesn't have a lot of good stuff, just rehash.  But sometimes, they can be of use.

[07:46] *** n1ce joined
[07:46] <Todd_> Google and DuckDuckGo has a hard time finding p6 stuff.  They think you mispelled P5

[07:47] *** eroux left
[07:47] <Woodi> re sockets and packets in TCPvsUDP: looks STCP could be used becouse it have UDP packet "semantic". it would be nice if Perl6 was leading in STCP adoption (assuming STCP is good thing) :)

[07:47] <DrForr> I think Google figures you were misspelling Python :)

[07:49] <Todd_> which is why I get array pushing hashes onto arrays, which I can't resist!

[07:50] <Woodi> Todd_: I like Perl5 args transfer :) and being "assembly" is good for potential native code generation :)

[07:50] <Woodi> modulo PMC ;)

[07:51] *** xtreak joined
[07:52] <Todd_> P5's args are a nightmare for maintaninability.  And it drives me nuts having to pass Reference Pointers to arrays and hashes when I mix several variables in the call. P6 is a sub dream come true!

[07:52] *** adu joined
[07:54] *** eroux joined
[07:56] *** xtreak left
[07:56] <Todd_> if it is of any interest to yu guys, I am programing right now over over the Interent with "ssh -X11" and Geany.  There is a little drag, but it is usable.

[07:57] <DrForr> I've spent enough time teaching perl5 calling syntax that I really appreciate not having to worry about the referene distinctions.

[07:57] <DrForr> *reference

[07:58] *** jraglin left
[07:58] *** Cabanossi left
[07:58] *** jraglin joined
[07:59] *** Cabanossi joined
[08:00] <Todd_> The way I look at it, I am using a high level language for a reason.  The purpose is so I can code faster.  (I have written in Assembly before.  It is super fast and takes super, super longer to write.  What a pain in the neck!)

[08:00] *** xtreak joined
[08:02] *** mcmillhj joined
[08:04] <Woodi> ok, I'm not even a programmer but you didn't convince me (totally), stil like it :)  but good points

[08:05] <Woodi> btw. do perl5 have a jit ? I didn't hear about... could it help in performance ?

[08:06] <u-ou> what does .= do

[08:07] *** mcmillhj left
[08:07] *** jraglin left
[08:07] *** bjz left
[08:08] *** jraglin joined
[08:08] <Woodi> u-ou: it's sugar for $x = $x . $y ? ;)

[08:09] *** aborazmeh left
[08:10] *** bjz joined
[08:10] <u-ou> oh right, heh

[08:10] <Woodi> https://docs.perl6.org/language/operators#postfix_.=

[08:11] <Woodi> u-ou: good question :)

[08:11] <samcv> i don't think perl 5 has JIT Woodi

[08:11] <Todd_> PrintRed "$Backup is running\n";  exit 1;

[08:12] <samcv> they are very different codebases. perl 6 runs on MoarVM which runs generated bytecode (compiled by Rakudo)

[08:12] <samcv> perl 5 is basically a bunch of C code that compiles on the fly, so it's not a great comparison

[08:12] <Todd_> I get the red text, but "exit 1" does not dump me out of the program.  What am I doing wrong (I don't want to use "die")

[08:12] <u-ou> does rakudo still run on jvm too or just moar

[08:12] <samcv> well not totally on the fly, but upon running the file.

[08:12] <samcv> rakudo runs on jvm too

[08:13] <Todd_> Indeed.  C, less the headache

[08:13] <samcv> it's not as good though

[08:13] <samcv> also perl 6 is programmed a lot in perl 6

[08:13] <samcv> and also in nqp which is like a bare bones perl 6 scaffolding code. like perl 6 but nothing fancy

[08:13] <u-ou> not quite perl

[08:13] <samcv> perl 5 is written all in C (i believe)

[08:14] <u-ou> what's nqp written in?

[08:14] <samcv> nqp. and uh. magic

[08:14] <u-ou> ahh

[08:14] <samcv> nqp compiles itself

[08:14] <u-ou> nice

[08:15] <samcv> which i guess is the magic part of it. when you check out the repository, you get the stage 0 binaries

[08:15] <samcv> err. moarvm bytecode

[08:15] <samcv> and rakudo complies itself too

[08:15] <samcv> Rakudo is built on perl 6 and nqp, which is built on nqp and moarvm

[08:16] <samcv> uhm perl 6 also only requires single pass parsing

[08:16] <samcv> very different from perl 5 in that way

[08:17] <u-ou> perl6 is the future

[08:18] <samcv> i think so! and hope so!

[08:18] <u-ou> what major projects are implemented in p6?

[08:18] <u-ou> (besides itself)

[08:18] <Todd_> from the manual on exit: `Exits the current process with return code $status.`  what do they mean by "process"?  The sub you are in or the whole program?

[08:19] *** jraglin left
[08:20] *** jraglin joined
[08:20] <samcv> u-ou, perl 6 is the biggest project programmed in perl 6 :)

[08:21] <samcv> though uh. not any major ones anybody would know about

[08:21] <samcv> idk there's web frameworks and some stuff like that

[08:22] *** mcmillhj joined
[08:22] <samcv> u-ou, people have implemented their own invented languages in perl 6 as well

[08:22] <samcv> using perl 6's parsing engine with their own syntax

[08:23] <u-ou> ahh :)

[08:23] <samcv> Todd_, u-ou https://modules.perl6.org/#sort-col=3&sort-dir=d

[08:23] <samcv> look at most popular plugins

[08:23] <u-ou> so it would be good for writing compilers?

[08:23] <u-ou> I suppose that question's already answered

[08:23] <samcv> bailador is the web framework

[08:24] <samcv> yeah you can basically even make your own 'slangs' and modify how perl 6 code you write is written

[08:24] <samcv> like alter the parser

[08:24] <u-ou> like lisp?

[08:24] <samcv> u-ou, this comes to mind https://github.com/FROGGS/p6-Slang-Tuxic

[08:24] <samcv> not like lisp

[08:24] <Todd_> that is a list of moduels and pass fail.  What was I suppose to see?

[08:25] *** abraxxa joined
[08:25] <samcv> uh sort by stars

[08:25] <samcv> and just you can look at the list. was meant to give overview of some of the moduling/apps written in perl 6

[08:26] *** mcmillhj left
[08:26] <samcv> reading the grammar tutorial will be educational

[08:26] <samcv> https://docs.perl6.org/language/grammar_tutorial

[08:26] <Todd_> Construct an insulting epithet in the manner of an old IRC bot

[08:26] <samcv> since perl 6 is parsed using grammars

[08:26] <samcv> sounds useful

[08:27] <Todd_> bookmarked.  Thank you!

[08:27] <Todd_> Am I stuck with using "die"?

[08:28] <samcv> what are you trying to do?

[08:28] <samcv> throw an error? are you a past perl 5 programmer?

[08:29] <samcv> perl 6 will throw and show errors without having to do `condition or die $!`

[08:29] <samcv> though you can catch errors if you want, but they automatically throw

[08:29] <u-ou> m: my $a = 1; my $b = :$a; say $b.WHAT

[08:29] <camelia> rakudo-moar e87179: OUTPUT: «(Pair)␤»

[08:29] <u-ou> m: my $a = 1; my $b = :$a; say $b

[08:29] <camelia> rakudo-moar e87179: OUTPUT: «a => 1␤»

[08:29] *** rindolf joined
[08:30] <samcv> i have not found a use for that yet. maybe someday. i don't think it's visually evident what it actually does

[08:30] <samcv> but that's just me

[08:31] <samcv> m: say :blah, :what

[08:31] <camelia> rakudo-moar e87179: OUTPUT: «Unexpected named argument 'blah' passed␤  in block <unit> at <tmp> line 1␤␤»

[08:31] <samcv> m: say (:blah, :what)

[08:31] <camelia> rakudo-moar e87179: OUTPUT: «(blah => True what => True)␤»

[08:31] <Todd_> What is the best method of forcing the entire program to terminate

[08:31] <samcv> m: say (:blah(False), :what)

[08:31] <camelia> rakudo-moar e87179: OUTPUT: «(blah => False what => True)␤»

[08:31] <samcv> Todd_, exit

[08:31] <samcv> well die works too

[08:31] <samcv> if you want a backtrace

[08:31] *** mcmillhj joined
[08:32] <u-ou> say (:blah('False'))

[08:32] <u-ou> m: say (:blah('False'))

[08:32] <camelia> rakudo-moar e87179: OUTPUT: «blah => False␤»

[08:32] <samcv> m: say (:blah(11), :what)

[08:32] <camelia> rakudo-moar e87179: OUTPUT: «(blah => 11 what => True)␤»

[08:32] <samcv> that's most useful specifying command line arguments i think

[08:32] <u-ou> m: say (:blah('Fals'))

[08:32] <camelia> rakudo-moar e87179: OUTPUT: «blah => Fals␤»

[08:33] <u-ou> m: say (:blah('Fals')).perl

[08:33] <camelia> rakudo-moar e87179: OUTPUT: «:blah("Fals")␤»

[08:33] <samcv> sub foo ( Bool :$named-arg = False) { }; foo(:named-arg)

[08:33] <samcv> u-ou, that's the most useful spot for that

[08:33] <samcv> imo.

[08:33] <Todd_> Ah, short between the headset again.  I was in a loop and I had "last" before the "exit". I got rid of the "last" and now it is operating as expected.  No soup for me again!

[08:33] <samcv> with named arguments

[08:33] <u-ou> https://docs.perl6.org/language/classtut

[08:33] <u-ou> samcv: see Constructors for an ex

[08:34] <u-ou> I think I get it now

[08:34] <samcv> ah

[08:34] <samcv> yeah

[08:34] <samcv> those are named arguments

[08:34] <u-ou> so the method takes away the namedness of the arguments

[08:34] <samcv> m: sub foo (:$named ) { say $named }; foo(:named('word'))

[08:34] <camelia> rakudo-moar e87179: OUTPUT: «word␤»

[08:34] <Todd_> Is "last" suppose to go to the "last" element or just exit the loop and not execure anything under it?

[08:35] <samcv> see that u-ou 

[08:35] <u-ou> aha

[08:35] <samcv> Todd_, it exits the current for loop

[08:35] <samcv> or while loop etc

[08:35] <u-ou> didn't see it could go the other way too!

[08:35] <u-ou> that's actually quite nice

[08:35] <samcv> perl 6 is magic

[08:36] <samcv> u-ou, that section on constructors is pretted advanced implementation details

[08:36] <samcv> i mean normally you won't use constructors yourself. ever

[08:36] <samcv> you'll declare your classes normally

[08:36] <u-ou> so it says

[08:36] <samcv> ah. good

[08:36] <Todd_> my misunderstanding.  Thank you!

[08:36] <u-ou> yeah, i'd just use new

[08:38] *** n1ce_ joined
[08:38] <u-ou> but I could see myself wishing for constructors which don't require argument-naming

[08:39] *** n1ce left
[08:40] *** mcmillhj left
[08:42] *** mcmillhj joined
[08:43] *** xtreak left
[08:47] *** xtreak joined
[08:47] *** mcmillhj left
[08:47] *** xtreak left
[08:48] *** robertle left
[08:51] *** espadrine joined
[08:52] *** adu left
[08:52] <Todd_> Calling it a night.  Thank you guys for all the help!

[08:52] *** mcmillhj joined
[08:53] <u-ou> nn

[08:53] <u-ou> nn

[08:54] *** Todd_ left
[08:54] <nebuchadnezzar> hello

[08:56] <nebuchadnezzar> reading some type documentation, I wonder if the “Type graph” could not be displayed before the table of contents…

[08:56] *** mcmillhj left
[09:02] *** zakharyas joined
[09:05] *** mcmillhj joined
[09:09] *** Ven joined
[09:09] *** Ven is now known as Guest14586

[09:09] <samcv> nebuchadnezzar, i have thought similar before

[09:09] <samcv> or maybe right after it or something

[09:09] <samcv> higher up at least

[09:10] *** mcmillhj left
[09:24] *** mcmillhj joined
[09:29] *** mcmillhj left
[09:35] *** bjz left
[09:38] *** bjz joined
[09:40] *** cpage_ left
[09:46] *** nhywyll joined
[09:46] *** mcmillhj joined
[09:48] *** nhywyll left
[09:51] *** mcmillhj left
[10:00] *** jraglin left
[10:01] *** pmurias joined
[10:02] *** xtreak joined
[10:09] *** mcmillhj joined
[10:12] *** astj_ joined
[10:12] *** astj left
[10:14] *** mcmillhj left
[10:15] *** Guest14586 left
[10:23] <Geth> ¦ ecosystem: gfldex++ created pull request #312: add Proc::Async::Timeout

[10:23] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/312

[10:28] *** xtreak left
[10:29] *** mcmillhj joined
[10:34] *** mcmillhj left
[10:36] *** xtreak joined
[10:42] *** Cabanossi left
[10:44] *** Cabanossi joined
[10:45] *** TEttinger left
[10:49] <gfldex> m: sub f { gather for 1,2,3 { LEAVE say „oi‽“; .take } }; say f;

[10:49] <camelia> rakudo-moar e87179: OUTPUT: «oi‽␤oi‽␤oi‽␤(1 2 3)␤»

[10:50] <gfldex> this is kind of a superposition of wrong and right

[10:50] <timotimo> m: sub f { for 1, 2, 3 { LEAVE say "oi?"; 1 } }; say f

[10:50] <camelia> rakudo-moar e87179: OUTPUT: «oi?␤oi?␤oi?␤Nil␤»

[10:50] <timotimo> m: for 1, 2, 3 { LEAVE say "oi?"; 1 }

[10:50] <camelia> rakudo-moar e87179: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 1 in sink context (line 1)␤oi?␤oi?␤oi?␤»

[10:50] <timotimo> the block is left every time, even in a basic for loop

[10:51] *** astj_ left
[10:51] <gfldex> m: sub f { do for 1, 2, 3 { LEAVE say "oi?"; 1 } }; say f

[10:51] <camelia> rakudo-moar e87179: OUTPUT: «oi?␤oi?␤oi?␤(1 1 1)␤»

[10:51] <timotimo> nothing to do with continuations here

[10:51] *** astj joined
[10:51] <timotimo> also, when we take continuations, we don't invoke every leave phaser up to the end

[10:51] *** mcmillhj joined
[10:51] <timotimo> we don't have a phaser for that concept at all, i don't think

[10:51] *** astj left
[10:52] <gfldex> m: sub f { gather for 1,2,3 { LAST say „oi‽“; .take } }; say f;

[10:52] <camelia> rakudo-moar e87179: OUTPUT: «oi‽␤(1 2 3)␤»

[10:52] *** astj joined
[10:52] <gfldex> ENEEDMORETEA on my side I guess

[10:52] <timotimo> m: sub f { gather for 1,2,3 { LAST say „oi‽“; .take } }; say f[^1];

[10:52] <camelia> rakudo-moar e87179: OUTPUT: «(1)␤»

[10:52] <timotimo> m: sub f { gather for 1,2,3 { LAST say „oi‽“; .take } }; say f[^3];

[10:52] <camelia> rakudo-moar e87179: OUTPUT: «(1 2 3)␤»

[10:52] <timotimo> m: sub f { gather for 1,2,3 { LAST say „oi‽“; .take } }; say f[^4];

[10:52] <camelia> rakudo-moar e87179: OUTPUT: «oi‽␤(1 2 3 Nil)␤»

[10:52] <timotimo> :)

[10:52] <gfldex> timotimo: I'm glad you where wrong too :)

[10:53] <timotimo> i was wrong?

[10:53] <timotimo> sorry, when i said "up to the end" i meant "up to the root"

[10:56] <gfldex> timotimo: you where wrong in that Perl 6 doesnt got a phaser for that concept.

[10:56] *** mcmillhj left
[10:56] <timotimo> you misunderstood my concept

[10:57] <timotimo> i meant that we don't have a phaser that runs when a continuation gets taken that includes the frame the phaser is installed for

[10:57] *** astj left
[10:58] <gfldex> I really need some tea. :)

[10:59] <timotimo> tea is good

[10:59] *** llfourn left
[11:01] *** labster left
[11:01] *** mcmillhj joined
[11:04] *** domidumont left
[11:05] *** domidumont joined
[11:06] *** mcmillhj left
[11:06] *** llfourn joined
[11:10] *** xtreak left
[11:13] <nebuchadnezzar> Erf, server not found: https://doc.perl6.org/ → https://docs.perl6.org/

[11:13] <gfldex> nebuchadnezzar: works here

[11:14] <nebuchadnezzar> gfldex: now it works here too

[11:15] *** bjz left
[11:15] *** bjz_ joined
[11:15] <nebuchadnezzar> samcv: today it's just after TOC but the TOC can be quite long, for example https://docs.perl6.org/type/NFD

[11:20] <gfldex> is RTs e-mail pickup broken or just slow?

[11:22] *** wamba joined
[11:22] *** astj joined
[11:24] *** itaipu joined
[11:24] *** mcmillhj joined
[11:25] *** astj left
[11:27] *** bjz joined
[11:28] *** bjz_ left
[11:29] *** mcmillhj left
[11:33] *** cpage_ joined
[11:35] *** mcmillhj joined
[11:35] <geekosaur> only runs every couple hours in my experience

[11:35] <geekosaur> or maybe it's just slow, but I always seem to get perl RT mail in batches

[11:40] *** mcmillhj left
[11:42] *** Ven joined
[11:42] *** Ven is now known as Guest63163

[11:45] <Ulti> WRT https://www.learningperl6.com/2017/03/23/close-enough/ is there any reason we dont include all the superscript constants as exponentiators?

[11:47] <Ulti> I guess it means superscript i in the metadata from unicode doesnt include a numeric value

[11:47] <Ulti> or that i specifically is Complex I guess makes it special cased

[11:53] *** wamba left
[11:54] <Ulti> oh there is no pi its just i

[11:58] <SmokeMachine> m: say (:!bla)

[11:58] <camelia> rakudo-moar e87179: OUTPUT: «bla => False␤»

[11:59] *** mcmillhj joined
[12:00] *** lukaramu joined
[12:03] *** mcmillhj left
[12:12] *** raschipi joined
[12:13] *** mcmillhj joined
[12:17] *** mcmillhj left
[12:21] *** wamba joined
[12:23] <DrForr> Sadly there is no superscript π, just looked.

[12:23] <Ulti> yeah

[12:23] <Ulti> its weird

[12:23] <DrForr> Otherwise e<sup>iπ</sup>-1==0 # could be a valid equation.

[12:23] <Ulti> its not used in IPA I guess

[12:24] <Ulti> kind of surprised there isnt a generic character you use in combination for sub and sup

[12:24] <DrForr> Nope, thought of that too. TURNED ALPHA is the closest there.

[12:24] <Ulti> 1 2 and 3 as superscript are in the latin block too away from all the others

[12:24] <Ulti> for some reason there is n as well as i

[12:25] <DrForr> Well, as long as ½τ==π (which it does, as long as you use INVISIBLE TIMES) I'm happy )

[12:25] <DrForr> s/.$/:)/

[12:27] <timotimo> "can't find variable ½τ, if you want to multiply τ by ½, please write ½

[12:27] <timotimo> please write ½τ instead"

[12:27] *** abraxxa left
[12:28] *** Cabanossi left
[12:29] <DrForr> As long as you use \c[INVISIBLE TIMES] between 1/2 and tau and define infix:<<\c[INVISIBLE TIMES]>>{[*]@_} :)

[12:29] *** Cabanossi joined
[12:29] *** kurahaupo__ joined
[12:30] <DrForr> (as I alluded to)

[12:32] *** wamba left
[12:32] <Ulti> can you use unicode solidus for division too?

[12:33] <DrForr> If it's not there you can probably create an infix for it.

[12:34] <timotimo> right

[12:36] *** adu joined
[12:43] *** sufrostico left
[12:46] *** sufrostico joined
[12:46] *** mcmillhj joined
[12:57] <Geth> ¦ ecosystem: 35ae67d04f | (Wenzel P. P. Peppmeyer)++ | META.list

[12:57] <Geth> ¦ ecosystem: add Proc::Async::Timeout (#312)

[12:57] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/35ae67d04f

[13:00] *** aborazmeh joined
[13:00] *** aborazmeh left
[13:00] *** aborazmeh joined
[13:03] <Voldenet> What's a good way to use two-way pipe-like communication in perl6?

[13:03] <Voldenet> I think I could use two channels, but maybe there's better way

[13:04] <[Coke]> http://news.perlfoundation.org/2017/03/new-grant-committee-member-sec.html

[13:04] <gfldex> m: say "⁢".uniname

[13:04] <camelia> rakudo-moar e87179: OUTPUT: «INVISIBLE TIMES␤»

[13:05] *** tojo left
[13:05] <gfldex> m: say 4⁢2;

[13:05] <camelia> rakudo-moar e87179: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3say 47⏏5⁢2;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤        st…»

[13:05] <timotimo> Voldenet: two channels is the simplest thing, but maybe you can re-order your whole thing to use a simpler idiom?

[13:06] <gfldex> m: multi sub infix:<⁢>(\a, \b){ a * b }; say 4⁢2;

[13:06] <camelia> rakudo-moar e87179: OUTPUT: «8␤»

[13:06] <Voldenet> Well, what I want is basically two-way pubsub, no real way around it I guess

[13:06] <gfldex> copypasta of "⁢" is really hard :->

[13:06] <timotimo> yes

[13:08] <Voldenet> Okay, since I'm full of questions, there's a bonus one

[13:08] <Voldenet> m: "gżegżółka".encode('ISO-8859-2').say

[13:08] <camelia> rakudo-moar e87179: OUTPUT: «Unknown string encoding: 'iso-8859-2'␤  in block <unit> at <tmp> line 1␤␤»

[13:08] <raschipi> Voldenet: fire away

[13:08] <Voldenet> How can I add my own encoding? :)

[13:09] <Voldenet> I could probably use libiconv somehow

[13:09] *** espadrine left
[13:10] *** mcmillhj left
[13:10] <timotimo> you can't add custom encoders/decoders yet, but work on that is under way

[13:10] <timotimo> so until then you'll have to do stuff like encode it to utf8 and nativecall into (for example) libiconv

[13:11] <raschipi> timotimo: Or he could send a patch so that P6does what he wants? Or would it be turned down?

[13:11] *** adu left
[13:12] <timotimo> it'd be a patch to moarvm

[13:12] <Voldenet> Uhm, I actually wouldn't mind getting a patch into moarvm for that, but I was going for the hacky way

[13:12] <Voldenet> also, perl6 might choose to implement it from scratch

[13:12] <Voldenet> instead of using iconv, which might not be very multiplatform choice

[13:13] <Voldenet> s/perl6/moarvm/

[13:13] <timotimo> yeah, moarvm wouldn't use iconv at all

[13:14] <timotimo> you can't really steal from the latin1 implementation because that basically just 1:1's unicode codepoints

[13:14] <lizmat> fwiw, I think we want to include all of the 8859 encodings out of the box

[13:14] <timotimo> maybe, they are similar enough to be easy-ish to implement

[13:14] <timotimo> just have a bunch of tables

[13:15] <lizmat> and I think that's been done in P5 already as well  :-)

[13:15] <timotimo> we can't steal from the perl5 implementation, though?

[13:15] <timotimo> it's probably too different?

[13:15] <lizmat> probably, but the tables would be there  :-)

[13:15] <Voldenet> you could generate perl6 with perl5

[13:15] <lizmat> and in a form that could be easily mangled 

[13:15] <Voldenet> now that's 5m4a7g8i3c ;)

[13:16] <lizmat> Voldenet: indeed

[13:17] <timotimo> well, you can also just use Inline::Perl5 :)

[13:17] <Voldenet> :>

[13:17] <Voldenet> now that's the hack I'd try to avoid 

[13:19] <lizmat> being able to support all of the encodings that P5 supports, would seem like a worthy goal and relatively LHF

[13:19] <lizmat> afk again&

[13:19] <timotimo> EBCDIC :) :)

[13:19] <DrForr> Well, Perl::ToPerl6 generates Perl6 frm Perl 5 :) (albeit badly, and haven't worked much on it recently...)

[13:20] <raschipi> timotimo: All EBCDICS? There's more than one. And 6-bit encodings?

[13:20] <Voldenet> I hope we get ITA2 support in case I need to talk to someone in the past

[13:21] <raschipi> "You are in a maze of twisty little encodings, all alike"

[13:21] <DrForr> UTF-94LYF

[13:21] <Voldenet> I didn't know utf had such standards

[13:21] <timotimo> are 6-bit encodings tightly packed or does every unit have 2 padding bits at the end of it?

[13:22] <Voldenet> probably they are packed only when they're transported over the wire

[13:22] <Voldenet> I don't think 8n-bit cpus are good at handling 6-bit texts

[13:22] <timotimo> yeah

[13:22] <timotimo> DrForr: UTF-94 sounds very wasteful :)

[13:23] <raschipi> They were used to fit 6 charachters into a 36 bit word in 36 bit computers 

[13:23] <Voldenet> now base65536 is a cool stuff though

[13:23] <DrForr> UTF9 was a joke RFC, but I still have a back-burner notion to implement the bastard :)

[13:24] <raschipi> 36 bit computers had a 6 character limit on file names to be able to fit them into a single word

[13:24] <raschipi> source: http://www.catb.org/esr/faqs/things-every-hacker-once-knew

[13:25] <chansen_> Unicode provides mappings for all ISO 8859 encodings, http://www.unicode.org/Public/MAPPINGS/ISO8859/

[13:25] <timotimo> cool, we can use those to generate our code

[13:26] *** astj joined
[13:27] *** Khisanth left
[13:28] *** setty1 joined
[13:29] *** mcmillhj joined
[13:31] *** astj left
[13:35] *** lukaramu_ joined
[13:38] *** wamba joined
[13:38] *** lukaramu left
[13:40] *** Khisanth joined
[13:42] *** Sound joined
[13:44] <raschipi> Then there's also the uncommon non-joke Unicode encodings, like SCSU, BOCU-1, UTF-1, UTF-7, UTF-EBCDIC, GB18030 and Punycode.

[13:44] *** Cabanossi left
[13:44] <timotimo> hm, punycode is really only meant for short strings, no?

[13:44] *** Cabanossi joined
[13:44] <timotimo> and not suited for streaming?

[13:45] <raschipi> It's used to write internationalized domain names

[13:46] <timotimo> i know

[13:46] <raschipi> I don't know if it's suitable for streaming, or how does it compare to Base64

[13:47] <raschipi> Don't know if it's MIME safe either.

[13:47] <timotimo> i believe punycode slurps up all non-7bit characters while going through the string and then it gets appended to the string

[13:48] <timotimo> "it" being the state of the state machine

[13:50] <timotimo> so if you want to stream some text over a wire, you'll get only the ascii parts until the stream ends

[13:50] <timotimo> and then you'll get a whole blob of insertions you have to do throughout that ascii part

[13:50] <raschipi> Yep, section 3.1 of RFC3492

[13:50] <timotimo> i'd say "module space" for that

[13:50] <timotimo> huggable: eco punycode

[13:50] <huggable> timotimo, nothing found

[13:50] *** wamba left
[13:50] <timotimo> which bot does eco again? :\

[13:51] <timotimo> buggable: eco punycode

[13:51] <buggable> timotimo, IDNA::Punycode 'Punycode implementation according to RFC3492': https://github.com/FROGGS/p6-IDNA-Punycode

[13:52] <raschipi> Very easy to implement, though.

[13:52] <timotimo> yeah, just "use IDNA::Punycode" :P

[13:53] <raschipi> buggable: eco IDNA

[13:53] <buggable> raschipi, IDNA::Punycode 'Punycode implementation according to RFC3492': https://github.com/FROGGS/p6-IDNA-Punycode

[13:54] <pmurias> is UTF-1 used for anything?

[13:55] *** itaipu left
[13:55] <raschipi> pmurias: No, UTF-8 was created to fix it.

[13:57] *** skids joined
[13:57] *** itaipu joined
[14:00] *** Guest63163 left
[14:00] *** Ven joined
[14:01] *** Ven is now known as Guest67847

[14:01] *** Guest67847 left
[14:05] <Geth> ¦ ecosystem: 91a8972780 | (Zoffix Znet)++ | META.list

[14:05] <Geth> ¦ ecosystem: s/META.info/META6.json/

[14:05] <Geth> ¦ ecosystem: 

[14:05] <Geth> ¦ ecosystem: For:

[14:05] <Geth> ¦ ecosystem: - drforr/perl6-readline

[14:05] <Geth> ¦ ecosystem: - drforr/perl6-Inline-Scheme-Guile

[14:05] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/91a8972780

[14:08] <DrForr> Sigh. I really need to get that Dist::6Zilla or whatever done.

[14:11] *** aborazmeh left
[14:11] *** adu joined
[14:12] <raschipi> Did zoffix stopped being so rude? Will he come back?

[14:13] <DrForr> Waitaminnit, rude?

[14:15] *** buggable left
[14:16] *** buggable joined
[14:16] *** ChanServ sets mode: +v buggable

[14:16] <raschipi> Wasn't the problem that he was rude when people disagreed with his proposed solutions?

[14:17] <DrForr> I haven't been watching closely enough.

[14:18] *** buggable left
[14:18] *** buggable joined
[14:18] *** ChanServ sets mode: +v buggable

[14:18] <DrForr> And that was just in reaction to "Woops, forgot to update that repo as well..., boy, wish there were an automator for that. Oh, right, was planning to do that."

[14:19] *** g4 left
[14:20] *** adu left
[14:21] <b2gills> raschipi: Zoffix never left, he just kept changing his nick

[14:24] *** bjz left
[14:24] <[Coke]> He's right behind me, isn't he?

[14:27] *** Cabanossi left
[14:28] *** zakharyas left
[14:29] *** zakharyas joined
[14:29] *** Cabanossi joined
[14:35] *** astj joined
[14:37] *** AlexDaniel joined
[14:37] <AlexDaniel> heh… well… Firefox now requires pulseaudio

[14:37] <AlexDaniel> so should I install pulseaudio or switch to another browser? Hmmmm… tough choice

[14:39] <raschipi> b2gills: K

[14:47] <skids> switch.

[14:47] <skids> That's what I'll be doing eventually.  Never pulseaudio ever again.

[14:47] <skids> It has burned way too much of my time, it is cut off.

[14:48] *** Cabanossi left
[14:49] <raschipi> Other browsers will soon follow suit. Everything but Pulse and Jack has been left to rot.

[14:49] <skids> Hopefully I'll be able to find something with a separate and persistent search term entry box.

[14:50] *** tokomer joined
[14:50] <skids> Well, I wouldn't mind jack but I'm kinda getting sick of having repatch it to diable dbus and get it running as a system daemon again.

[14:50] <AlexDaniel> skids: I'll try using pulseaudio for now. I'd say it at least deserves a chance…

[14:50] <raschipi> Even Jack will soon stop maintaining their Pulse-less mode.

[14:51] <AlexDaniel> skids: using chromium is not a real choice for me giving that my keyboard layout is simply not working there…

[14:51] <skids> Looks like I'll be patching browsers, instead, then.

[14:51] <skids> Oh yeah, emacs keybindings probably are going to be another PITA to find.

[14:51] <raschipi> skids: Firefox still has the code to work without Pulse, but one has to build it from source to activate it.

[14:52] <skids> Yeah but they'll be excluding that code soon enough.

[14:53] <skids> I simply do not understand why we can run a display server as a system service, but an audio server can;t hack that.

[14:54] <raschipi> What? Both X.org and Wayland run as user services and there has been significant work to make they run without suid root.

[14:54] <raschipi> Why do you think they run outside the user session?

[14:54] <skids> I want daemons to be able to make sounds when I'm logged out.

[14:55] <raschipi> Pulse does have a system-mode. Which distro are you using

[14:55] <raschipi> ?

[14:55] <skids> Debian.

[14:55] *** khw joined
[14:55] <raschipi> It even had a bug where it spilled it's own configuration on / when running on system mode.

[14:55] <skids> But I'm never touching Pulse again, I'm fully convinced it's evil.  You know hwt has "system mode?"  ALSA.

[14:58] *** tokomer left
[14:59] *** tokomer joined
[15:01] *** astj left
[15:01] *** astj joined
[15:03] <raschipi> Well, the ALSA sound server is buggy, difficult to use and lacking many features users expect. It will be abandoned soon.

[15:11] <Voldenet> Hm, how do I use destructors in perl6 (or more on the topic - can I add some async cleanup to the end of the async block, because this wouldn't be possible in destructors?)

[15:11] <raschipi> Voldenet: when do you want them to be called?

[15:11] *** tokomer left
[15:12] *** wamba joined
[15:12] <Voldenet> hm, at the end of the given block, would be best

[15:12] <Voldenet> start { my $res = await resources(); await do($res); }

[15:13] <Voldenet> but then resources are sockets, so they need to be closed, which I'd prefer to have automatic

[15:13] *** Ven joined
[15:13] <raschipi> There's a LEAVE phaser, that will execute when leaving a block: https://docs.perl6.org/language/phasers#LEAVE

[15:13] *** Ven is now known as Guest28837

[15:14] <Voldenet> Nice, can I await in LEAVE block?

[15:14] <Voldenet> s/block/phaser/

[15:14] <raschipi> You mean in the sense of blocking?

[15:14] <raschipi> Block the process waiting?

[15:14] <Voldenet> something like that:

[15:15] <raschipi> Try it and tell me.

[15:15] <Voldenet> start { my $res = await resources(); await do($res); await cleanup($res); }

[15:15] <AlexDaniel> you can do whatever you want in LEAVE

[15:15] <jnthn> Don't think I've ever done await in a LEAVE block, but can't think of any reason why it wouldn't work :)

[15:16] <Voldenet> wow, it's magic, it actually works :)

[15:16] *** sufrostico left
[15:17] <AlexDaniel> jnthn: re RT #131003: I tried commenting out gumbo_destroy_output and it still crashes. Didn't have time to catch in under valgrind this way though, but it feels that there's something else going on

[15:17] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131003

[15:18] *** sufrostico joined
[15:23] *** astj left
[15:24] *** itaipu left
[15:24] *** astj joined
[15:26] *** cdg joined
[15:32] *** astj left
[15:33] *** jraglin joined
[15:34] *** astj joined
[15:35] *** n1ce_ left
[15:43] *** jraglin left
[15:43] *** jraglin joined
[15:49] <raschipi> This table should be updated to include RakudoJS: https://perl6.org/compilers/features

[15:51] <perlpilot> raschipi: the repo is listed at the bottom of the page.  Make a PR

[15:52] <perlpilot> Though looking at it, that page hasn't been kept up-to-date anyway.

[15:53] <skids> AlexDaniel: I hate browser shopping but did some anyway.  Gonna drive qupzilla around the block a bit.

[15:54] <AlexDaniel> skids: interesting

[15:59] *** Guest28837 left
[16:02] <jnthn> AlexDaniel: OK, all further golfing efforts on it welcome until I find some time to try and reproduce/explore it myself (as usual, I've a pile of stuff to work on :))

[16:03] *** AlexDaniel left
[16:10] <gfldex> DrForr: to be fair, we didn't do a good job at advertising https://github.com/jonathanstowe/Test-META

[16:12] <DrForr> No worries.

[16:13] <raschipi> masak: How is the work on macros going?

[16:27] *** jraglin_ joined
[16:27] *** jraglin left
[16:37] *** jraglin_ left
[16:37] *** jraglin_ joined
[16:39] *** mcmillhj left
[16:43] *** Cabanossi joined
[16:49] *** zakharyas left
[17:05] *** mcmillhj joined
[17:10] *** domidumont left
[17:11] *** sena_kun joined
[17:16] <Voldenet> Is there any way to ensure that the some method is given proper lambda method?

[17:18] *** estrabd joined
[17:19] <perlpilot> "proper lambda method"?

[17:19] <Voldenet> something like: sub execute(Sub[Int, :returns Int] &code) returns Int { &code(2); }

[17:19] *** estrabd left
[17:20] <perlpilot> I don't know if it works like that, but surely you can use a where clause to check the signature of the thing passed

[17:20] *** estrabd joined
[17:21] <gfldex> Voldenet: see https://docs.perl6.org/type/Signature#Constraining_signatures_of_Callables

[17:21] <Voldenet> That's the syntax I was looking for, thanks

[17:21] <perlpilot> ah, gfldex++

[17:21] <Voldenet> gfldex++

[17:22] * perlpilot needs to do more Perl 6 so that some of this "edge" info migrates closer to the "center" in my brain

[17:22] * Voldenet has given up on trying to know all of it

[17:23] *** Sound left
[17:23] <gfldex> perlpilot: i found it useful to remeber where to find stuff in to docs :)

[17:23] <SmokeMachine> ugexe: hi! i was brainstorming about zen, and got a idea that I tried to PoC... its not done and probably its not even working... bu could you tell me what you think please? https://github.com/FCO/zef/commit/607cf49ea85cbd4490bfef73a7079a9c2173bb3c

[17:23] <perlpilot> I don't need to know all of it right off, but if there's a path to such information in my brain, that's preferable.

[17:24] <perlpilot> gfldex: Aye, that's a very good strategy. :)

[17:27] <SmokeMachine> .tell ugexe: hi! i was brainstorming about zen, and got a idea that I tried to PoC... its not done and probably its not even working... bu could you tell me what you think please? https://github.com/FCO/zef/commit/607cf49ea85cbd4490bfef73a7079a9c2173bb3c

[17:27] <yoleaux> SmokeMachine: What kind of a name is "ugexe:"?!

[17:27] <gfldex> SmokeMachine: he seams to have taken it from the same book then I did :)

[17:27] <SmokeMachine> .tell ugexe hi! i was brainstorming about zen, and got a idea that I tried to PoC... its not done and probably its not even working... bu could you tell me what you think please? https://github.com/FCO/zef/commit/607cf49ea85cbd4490bfef73a7079a9c2173bb3c

[17:27] <yoleaux> SmokeMachine: I'll pass your message to ugexe.

[17:29] *** cdg left
[17:29] *** cdg joined
[17:35] *** ggoebel left
[17:48] *** jraglin_ left
[17:49] <ugexe> SmokeMachine: I'm not against exposing something like that, but the solution should try to avoid the need to duplicate the signatures in yet another spot. The thing is - they definitely have to go in the &MAIN signature so they show up for USAGE stuff... so you could just use `sub zef-whatever(%_) { ... }` except all the logic is now the `...` and has to use %_ instead of  named variables

[17:49] <yoleaux> 17:27Z <SmokeMachine> ugexe: hi! i was brainstorming about zen, and got a idea that I tried to PoC... its not done and probably its not even working... bu could you tell me what you think please? https://github.com/FCO/zef/commit/607cf49ea85cbd4490bfef73a7079a9c2173bb3c

[17:50] *** jraglin_ joined
[17:54] <ugexe> the other key thing is that only &MAIN should be printing to stdout, exiting, or aborting. zef-* commands would communicate through a Supply still (Zef::Client.logger)

[18:10] *** bolangi left
[18:16] *** xinming left
[18:17] *** xinming joined
[18:18] *** wamba left
[18:22] *** mcmillhj left
[18:23] *** labster joined
[18:23] *** bolangi joined
[18:23] *** cdg left
[18:27] *** cdg joined
[18:31] *** domidumont joined
[18:35] *** labster left
[18:35] *** mcmillhj joined
[18:37] *** jraglin_ left
[18:38] *** jraglin_ joined
[18:44] *** jraglin_ left
[18:44] *** jraglin_ joined
[18:54] *** espadrine joined
[18:54] <SmokeMachine> ugexe: what do you think about use the help message as usage? like this: https://github.com/FCO/zef/commit/64a46aaf9951499cb7263007cccce58907c53264

[18:57] *** labster joined
[19:00] <tony-o> hiker should be up to snuff for the upcoming `require` scoping changes

[19:00] <tony-o> for those following along

[19:00] *** CIAvash[m] left
[19:00] *** CIAvash[m] joined
[19:00] *** dp[m] left
[19:00] *** dp[m] joined
[19:02] <m44st4> ptain c'est quoi ces gadgets en carton mouillé pour le rop arm basic

[19:02] <m44st4> j'ai mal

[19:03] <m44st4> sorry wrong channel

[19:03] *** Cabanossi left
[19:03] *** setty1 left
[19:04] *** Cabanossi joined
[19:04] *** jraglin joined
[19:05] *** jraglin_ left
[19:07] *** dakkar joined
[19:11] *** darutoko left
[19:16] *** skids1 joined
[19:16] *** skids left
[19:19] *** Exodist joined
[19:20] *** domidumont left
[19:20] *** jraglin left
[19:22] *** jraglin joined
[19:24] *** cdg left
[19:26] *** cdg joined
[19:28] *** rindolf left
[19:31] *** rindolf joined
[19:33] *** Cabanossi left
[19:34] *** Exodist left
[19:34] *** Cabanossi joined
[19:36] *** AlexDaniel joined
[19:37] <AlexDaniel> huggable: bots

[19:37] <huggable> AlexDaniel, The #perl6 irc channel normally hosts several helpful bots. I am a bot, and everyone else voiced on this channel is a bot. See the full list here: https://github.com/perl6/doc/issues/711#issuecomment-235414744

[19:38] *** jraglin_ joined
[19:40] *** jraglin left
[19:40] *** Tonik joined
[19:41] *** rPm_ joined
[19:42] <geekosaur> we're bebotted

[19:43] <lizmat> so much better than botoxed  :-)

[19:50] * ingy needs to retox

[19:50] <ingy> too early here...

[19:51] *** rPm_ left
[19:51] <ingy> they tried to send me back to retox, and I said: Yes. Yes. Yes.

[20:00] *** dakkar left
[20:04] <mst> ingy: I quit drinking once

[20:04] <mst> ingy: it was the worst 20 minutes of my life

[20:04] <ingy> ba-dum

[20:05] *** jraglin_ left
[20:05] *** jraglin joined
[20:07] *** mcmillhj left
[20:08] <perlpilot> Surely you quit drinking every day ... it's called "sleep"

[20:16] <perigrin> IV

[20:16] <ugexe> SmokeMachine: that doesnt help for incorrect options/flags

[20:18] <ugexe> or maybe I misunderstand... what does that change?

[20:18] <lizmat> SmokeMachine: welcome!

[20:19] * geekosaur *was* angling toward "besotted"... in its older meaning

[20:21] <hobbs> I think you can still use "sotted" that way

[20:22] <lizmat> oddly enough, "zot" is "fool" in flemish

[20:22] *** dct joined
[20:22] *** rburkholder joined
[20:24] <AlexDaniel> hm, so we have less than 10% of bots here

[20:25] <AlexDaniel> clearly need more

[20:25] <raschipi> We need ALL the Bots!

[20:27] <SmokeMachine> ugexe: I think I was confused... sorry... looks that doesn't change anything... sorry!

[20:27] <SmokeMachine> lizmat: thanks! :)

[20:28] *** eater left
[20:29] *** eater joined
[20:32] *** Cabanossi left
[20:33] *** cdg left
[20:33] *** cdg joined
[20:35] *** Cabanossi joined
[20:38] *** imcsk8 left
[20:42] <masak> raschipi: the work on macros is time-constrained but going well, I'd say

[20:42] <masak> raschipi: I got a couple commits into 007 yesterday

[20:44] <raschipi> Well,  I'm glad you're still at it. Time constrained isn't a big problem because I don't think anyone is pushing to release 6.d anytime soon.

[20:45] <masak> at this point, I'm not willing to target any particular 6.* release anyway

[20:45] *** imcsk8 joined
[20:45] <raschipi> Is it working like you want in 007? 

[20:46] <mst> I sincerely doubt this could get banged out for 6.d without regretting it

[20:46] <mst> unless 6.d takes significantly longer than I'd expect

[20:46] <mst> the above statement is about the nature of the task rather than any form of criticism

[20:47] <mst> if you let me imagine a world where I could pick a team of people to work on it full time, I'd believe the same thing in that world, due to the "needs real use by varied users" part

[20:47] <masak> raschipi: no, not yet. but mostly because of said time constraint.

[20:47] <perlpilot> Perl 6 has never rushed before, why would we start now?

[20:47] <raschipi> Well, other groups were unable to do it in decades, so it's natural to expect the same time horizon for P6. This isn't criticism, anything shorter than that will just show you guys are awesomer.

[20:48] <masak> not sure why people are suddenly talking about rushing

[20:48] <masak> haven't been rushing macros so far ;)

[20:48] *** cdg left
[20:48] <geekosaur> "never rushed before" where were you before Christmas?

[20:48] *** cdg joined
[20:49] <geekosaur> we're *still* paying for that to some extent

[20:49] <mst> I think perlpilot and I both took raschipi's 6.d comments to imply a shorter development time scale than we should realistically expect

[20:49] <mst> and therein the confusion

[20:49] <masak> geekosaur: I think we're talking about two different things

[20:49] <raschipi> Well, I didn't mean it should be released with 6.d, just that it would be released *at least* with 6.d. Or later.

[20:50] <masak> geekosaur: I've been thinking about, and implementing, macros for Perl 6 since late 2011

[20:50] <mst> geekosaur: drawing a line in the sand at -some- point had to be done, though - I don't think there'd've likely been any less rush with another year spent waiting

[20:50] <perlpilot> indeed

[20:50] <mst> or at least, not enough less to justify the opportunity cost

[20:54] *** imcsk8 left
[20:54] <masak> raschipi: I'll happily discuss with you some of the challenges inherent in introducing macros.

[20:55] <masak> it's a little bit hard to summarize, but I feel I have a pretty good grip on it nowadays.

[20:55] *** skids1 left
[20:56] *** rindolf left
[20:56] <raschipi> What's out of shape in 007 macros still?

[20:56] *** imcsk8 joined
[20:57] *** timeless joined
[20:57] <masak> raschipi: a big thing to land still is `is parsed`

[20:57] <masak> which will enable some of the cooler language hacking

[20:57] <masak> until then, macros are mostly just compile-time subs and operators

[20:58] *** TEttinger joined
[20:58] <raschipi> Do you have a link about it?

[21:04] *** sufrostico left
[21:07] <perlpilot> masak: Did you realize at the beginning that you would become the chief-explainer of Perl 6 macros for life?  :)

[21:08] *** Tonik left
[21:08] *** hankache joined
[21:09] <lizmat> and the chief-architect ?  :-)

[21:10] <lizmat> and the chief macro grantee  ?   :-)   *nudge nudge*  :-)

[21:12] <hankache> hola #perl6

[21:12] <raschipi> heya

[21:15] *** sufrostico joined
[21:17] *** cyphase left
[21:20] *** raschipi left
[21:21] *** cyphase joined
[21:26] *** cyphase left
[21:26] <SmokeMachine> star: use JSON::Class; class C is JSON::Class {has Str %.bla{subset :: of Str where any <bla ble>}}; C.from-json: ｢{"bla": {"ble": "bli"}}｣

[21:26] <camelia> star-m 2016.10: OUTPUT: «===SORRY!===␤Could not find JSON::Class at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/star-2016.10/share/perl6/site␤    /home/camelia/star-2016.10/share/perl6/vendor␤    /home/camelia/star-2016.10/share/perl6␤    CompUnit::Repository::…»

[21:31] *** hankache left
[21:40] *** Sound joined
[21:49] *** cdg left
[21:50] <masak> perlpilot: don't remember. probably I didn't think about it much.

[21:50] <masak> perlpilot: but it was definitely a case of "hey, I've been waiting for macros for so long now, better do something about them"

[21:52] *** bolangi left
[21:54] *** bolangi joined
[22:06] *** sena_kun left
[22:31] *** bjz joined
[22:42] *** Voldenet left
[22:43] *** El_Che joined
[22:47] *** Voldenet joined
[22:47] *** Voldenet left
[22:47] *** Voldenet joined
[22:52] *** kshannon_ is now known as kshannon

[22:55] *** espadrine left
[23:04] *** pmurias left
[23:06] *** RabidGravy left
[23:07] *** BenGoldberg joined
[23:16] *** vendethiel joined
[23:18] *** Cabanossi left
[23:20] *** Cabanossi joined
[23:27] *** sufrostico left
[23:30] *** skids joined
[23:31] *** Todd_ joined
[23:34] <Todd_> Hi All!  I have a program running in Linux that is called by /etc/crontab.  Problem: the program crashes when run by cron if I "print" in color.  Works fine from the command line.  Looking over file:///home/CDs/Keepers/Linux/perl/Perl6.Variables.html#Compile-time_variables I am not finding anything that tells me who called the program.  Is there a way to tell if the program is called by cron or from the command line?

[23:35] <samcv> made a repository to carry out my unicode tests of different scripts https://github.com/samcv/UCD-tests will accumulate a bunch of things and hopefully will merge it into roast when it is mature

[23:36] <TimToady> Todd_: you could probably look at the environment variables to determine whether it was started by a shell or by cron

[23:36] <TimToady> cron tends to have far fewer envvars

[23:38] *** wamba joined
[23:38] <geekosaur> Todd_, what you probably want is $*OUT.t

[23:38] <geekosaur> since the real question is whether output goes to a terminal for which color is appropriate

[23:39] <Todd_> I want to shut off printing when I am call by cron.  $TERM has promise.  How do I dig it out of %*ENV  ?

[23:40] <TimToady> what geekosaur said

[23:40] *** sufrostico joined
[23:40] <geekosaur> %*ENV<TERM>:exists && %*ENV<TERM> ne 'dumb'

[23:40] <Todd_> appropriate is probably why I am having the issue.  Since I am Top Down, my color printing is all in subs.  So I will be very easy to shut off printing wne the term is inaproproate

[23:41] <Todd_> testing

[23:41] <geekosaur> but I'd want to dsable it whenever output is to a file, so the .t check seems better to me

[23:41] <geekosaur> (if you ever load such a file with color into an editor, you will see why :)

[23:46] <Todd_> Term is empty.  Thank you guys!

[23:48] *** Cabanossi left
[23:50] *** Cabanossi joined
[23:55] *** muraiki joined
[23:59] *** dct left
