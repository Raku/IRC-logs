[00:02] *** sena_kun left
[00:03] *** mcsnolte left
[00:05] *** mcmillhj left
[00:09] *** ryn1x left
[00:09] *** ryn1x_ left
[00:10] *** ryn1x__ left
[00:15] *** nadim left
[00:21] *** mcmillhj joined
[00:24] *** ryn1x joined
[00:24] *** ryn1x_ joined
[00:24] *** ryn1x__ joined
[00:26] *** mcmillhj left
[00:26] *** mr-foobar left
[00:27] *** mr-foobar joined
[00:28] *** Exodist left
[00:29] *** ryn1x__ left
[00:29] *** ryn1x_ left
[00:29] *** ryn1x left
[00:30] *** Exodist joined
[00:33] *** neilb left
[00:37] *** mcmillhj joined
[00:40] *** EAACWS3 joined
[00:40] *** GHAA4MIP joined
[00:40] *** ryn1x joined
[00:42] *** mcmillhj left
[00:43] <El_Che> with the alpine package a rakudo base image goes from a 150mb to 37mb

[00:45] *** BenGoldberg joined
[00:51] *** mcmillhj joined
[00:56] *** mcmillhj left
[00:57] <comborico1611> El_che, i can sympathize to the "with pain my heart I started rewriting the wrapper in go".

[01:02] *** mcmillhj joined
[01:04] *** cdg joined
[01:07] *** mcmillhj left
[01:08] *** cdg_ left
[01:08] *** cdg left
[01:09] *** mcmillhj joined
[01:11] <lookatme> :) I don't like golang.

[01:12] <phogg> languages that assign with := are all suspect

[01:13] *** mcmillhj left
[01:13] <lookatme> yeah, and the function signature syntax is uncomfortable

[01:14] <lookatme> for me

[01:16] *** cdg joined
[01:17] *** ryn1x left
[01:18] <samcv> TimToady: okay thanks. i will fix the test then

[01:18] <samcv> i was 95% it was incorrect but wanted to double check since it was in roast

[01:19] *** mcmillhj joined
[01:21] *** cdg left
[01:24] *** mcmillhj left
[01:28] *** mr-foobar left
[01:30] *** mr-foobar joined
[01:31] *** mcmillhj joined
[01:35] *** cpage_ left
[01:35] *** Exodist left
[01:36] *** mcmillhj left
[01:36] *** Exodist joined
[01:39] *** ryn1x_ joined
[01:39] *** ryn1x joined
[01:39] *** ryn1x__ joined
[01:40] <comborico1611> Anyone know about Java here?

[01:42] *** cdg joined
[01:42] *** aborazmeh joined
[01:42] *** aborazmeh left
[01:42] *** aborazmeh joined
[01:43] *** cpage_ joined
[01:43] *** Exodist left
[01:44] *** ryn1x_ left
[01:44] *** ryn1x left
[01:44] *** ryn1x__ left
[01:45] *** Exodist joined
[01:46] *** mcmillhj joined
[01:47] *** cdg left
[01:48] *** ryn1x joined
[01:48] *** ryn1x_ joined
[01:48] *** ryn1x__ joined
[01:49] *** kalkin--- joined
[01:52] *** mcmillhj left
[01:52] *** kalkin-- left
[01:53] *** astronavt joined
[01:57] *** mr-foobar left
[02:00] <lookatme> I wrote a p6 script find source file like `find`

[02:00] <lookatme> But it is too slow, so I rewrite it with nqp

[02:01] *** mr-foobar joined
[02:02] <lookatme> And it is still slow than find, So I want use NativeCall improve it

[02:03] <lookatme> But I faced some problem, here is the code: https://ideone.com/3i6Mv3

[02:04] <lookatme> The readdir_r version always return nothing. And the readdir can not get .name or it will Segment fault

[02:04] <lookatme> What's the problem with my code ?

[02:05] *** mcmillhj joined
[02:05] <MasterDuke> comborico1611: i've done some java programming, you have a question about it?

[02:06] <comborico1611> Is it okay to learn Java 6 instead of 7?

[02:06] <lookatme> Why you want learn the old one ?

[02:07] <comborico1611> Just to keep it in my back pocket, in case a job opportunity comes.

[02:07] *** Cabanossi left
[02:07] <MasterDuke> there's obviously lots of overlap, but all the java i've seen recently has been 7 or 8

[02:07] <comborico1611> And i don't have much money for new version book.

[02:08] <comborico1611> 90% overlap?

[02:08] <MasterDuke> i wouldn't worry about buying a new book. the differences should be easy to learn about from online resources

[02:08] *** Cabanossi joined
[02:09] <comborico1611> That was my thinking. Thanks!

[02:10] <geekosaur> lookatme, the Dirent will already be passed as a pointer. sub readdir_r(DIR, Dirent, Pointer[Dirent] is rw --> int32) is native(Str) { * }

[02:10] *** aindilis left
[02:10] *** mcmillhj left
[02:12] <lookatme> I will try

[02:12] *** kaare__ joined
[02:13] *** ryn1x__ left
[02:14] *** ryn1x left
[02:14] *** ryn1x_ left
[02:15] *** kaare_ left
[02:16] <comborico1611> My order has been submitted. It's always exciting when you know a book is on its way.

[02:18] *** ryn1x joined
[02:20] *** mcmillhj joined
[02:22] *** ryn1x left
[02:22] <comborico1611> Goodnight! I will remember this day, how i was discouraged but received hope from talking with some guys on #perl6!

[02:23] <lookatme> :) 88

[02:23] <comborico1611> :-))

[02:24] <comborico1611> Big smile with some double-chin action. Night!

[02:24] *** comborico1611 left
[02:25] *** astronavt left
[02:26] *** yht joined
[02:26] *** mempko left
[02:26] *** mr-foobar left
[02:27] *** mr-foobar joined
[02:29] *** aindilis joined
[02:31] *** espadrine left
[02:39] *** troys is now known as troys_

[02:40] <lookatme> geekosaur, not working. I think the problem is `Str $.name`. The C side need consequent memory space.

[02:40] *** lookatme left
[02:41] <geekosaur> that is possible, NativeCall assumes Str behaves a certain way on the C side. Probably need a buf[uint8] and marshal/unmarshal from Str in the class

[02:41] <geekosaur> and preallocate the buf

[02:43] *** Exodist left
[02:45] *** Exodist joined
[02:45] *** silug left
[02:47] *** ilbot3 left
[02:51] *** Exodist left
[02:52] *** konsolebox left
[02:52] *** Cabanossi left
[02:52] *** Exodist joined
[02:53] *** ryn1x_ joined
[02:53] *** ryn1x joined
[02:53] *** ryn1x__ joined
[02:54] *** Cabanossi joined
[02:56] *** ilbot3 joined
[02:56] *** ChanServ sets mode: +v ilbot3

[02:57] *** mr-foobar left
[02:57] *** ryn1x_ left
[02:57] *** ryn1x left
[02:58] *** ryn1x__ left
[02:58] *** silug joined
[02:59] *** konsolebox joined
[02:59] *** mr-foobar joined
[03:04] *** cdg joined
[03:05] <AlexDaniel> m: BEGIN {use nqp;put nqp::getlexdyn(‘$/’)}

[03:05] <camelia> rakudo-moar d6cd0d2f5: OUTPUT: «BEGIN {use nqp;put nqp::getlexdyn(‘$/’)}␤»

[03:05] <AlexDaniel> that's still far from 28 :(

[03:06] <AlexDaniel> still cool though.

[03:08] *** ryn1x joined
[03:08] *** mcmillhj left
[03:09] *** ryn1x_ joined
[03:10] *** ryn1x__ joined
[03:11] *** pilne left
[03:11] *** mcmillhj joined
[03:16] <AlexDaniel> huggable: quine :is: BEGIN {use nqp;put nqp::getlexdyn(‘$/’)}

[03:16] <huggable> AlexDaniel, Added quine as BEGIN {use nqp;put nqp::getlexdyn(‘$/’)}

[03:16] *** mcmillhj left
[03:18] *** cdg left
[03:19] *** noganex joined
[03:20] *** Cabanossi left
[03:21] *** dansimon joined
[03:22] *** noganex_ left
[03:22] <dansimon> Hi there! Can you do something like if (/firstline/ .. /lastline/){ print; } in perl6?

[03:22] <Juerd> dansimon: Look for ff

[03:24] *** Cabanossi joined
[03:24] <AlexDaniel> dansimon: what are you trying to do exactly?

[03:24] <dansimon> Juerd: Ah, interresting... AlexDaniel: I'm trying to print a section of a file

[03:25] <dansimon> More spesifically print from a matching line to an empty line

[03:26] *** mcmillhj joined
[03:27] <AlexDaniel> wow, you actually need ff! :)

[03:28] <AlexDaniel> although you can maybe do it with a regex also, like /^^firstline$$ .*? ^^lastline$$/ (or something similar)

[03:28] *** ufobat___ joined
[03:29] <AlexDaniel> but docs on ff conveniently give the example for exactly that use case :) https://docs.perl6.org/language/operators#infix_ff

[03:30] <dansimon> thanks guys :)

[03:31] *** mcmillhj left
[03:31] *** ufobat_ left
[03:37] *** mcmillhj joined
[03:38] *** Ben_Goldberg joined
[03:38] *** BenGoldberg left
[03:38] *** Ben_Goldberg is now known as BenGoldberg

[03:41] *** wander joined
[03:42] *** mcmillhj left
[03:44] *** darkmorph left
[03:48] *** wander left
[03:48] *** wamba joined
[03:52] *** cdg joined
[03:54] *** kaare__ left
[03:54] *** kaare__ joined
[03:56] *** napo1eon joined
[03:56] *** mcmillhj joined
[03:58] *** mr-foobar left
[04:01] *** mcmillhj left
[04:03] *** mr-foobar joined
[04:03] *** eliasr left
[04:05] *** Cabanossi left
[04:07] *** Cabanossi joined
[04:11] *** dugword joined
[04:12] *** kaare__ left
[04:13] *** kaare__ joined
[04:13] *** mcmillhj joined
[04:17] *** afresh1 joined
[04:17] *** mcmillhj left
[04:21] *** kaare__ left
[04:21] *** kaare__ joined
[04:23] <Juerd> AlexDaniel: ff is very useful in one liners; I use the equivalent quite often in Perl 5.

[04:24] <Juerd> In any larger program, I find its hidden state annoying.

[04:27] *** mcmillhj joined
[04:28] *** mr-foobar left
[04:29] *** mr-foobar joined
[04:30] *** dansimon left
[04:32] *** mcmillhj left
[04:34] *** wamba left
[04:38] *** u-ou joined
[04:38] *** u-ou left
[04:38] *** u-ou joined
[04:42] *** mcmillhj joined
[04:44] *** lookatme joined
[04:44] <lookatme> .

[04:45] <u-ou> hi

[04:45] <lookatme> hi ?

[04:46] <u-ou> → u-ou joined (sid257727@gateway/web/irccloud.com/x-ahbyooofghomedvy)

[04:46] *** mcmillhj left
[04:59] *** aborazmeh left
[05:07] <lookatme> Still have some problem, but it can get other info except the name of file

[05:07] <lookatme> https://ideone.com/G7vOaQ

[05:09] <lookatme> The script `segmentation fault` when access name field

[05:10] *** BenGoldberg left
[05:11] *** pentashift_ joined
[05:12] *** troys_ is now known as troys

[05:12] *** mr-foobar left
[05:20] *** kaare__ left
[05:20] *** mr-foobar joined
[05:20] *** kaare__ joined
[05:31] *** khw left
[05:35] *** Cabanossi left
[05:36] *** ryn1x__ left
[05:37] *** ryn1x_ left
[05:37] *** ryn1x left
[05:37] *** Cabanossi joined
[05:41] *** AlexDaniel left
[05:49] *** Exodist left
[05:51] *** Exodist joined
[05:55] *** kaare_ joined
[05:56] *** kaare__ left
[05:59] *** yht left
[06:00] *** Exodist left
[06:02] *** Exodist joined
[06:03] <lookatme> I think it has some bug of NativeCall, it can not handle array in C struct

[06:03] <lookatme> https://ideone.com/HpjtHV

[06:09] *** Exodist left
[06:10] *** Exodist joined
[06:12] *** mr-foobar left
[06:15] *** mr-foobar joined
[06:19] *** Exodist left
[06:21] *** Exodist joined
[06:21] *** Cabanossi left
[06:22] *** Cabanossi joined
[06:23] *** yht joined
[06:32] *** piojo joined
[06:39] *** Exodist left
[06:39] *** Exodist joined
[06:42] *** mcmillhj joined
[06:43] *** mr-foobar left
[06:44] *** mr-foobar joined
[06:47] *** mcmillhj left
[06:48] *** Exodist left
[06:49] *** Exodist joined
[06:52] *** holyghost joined
[06:55] *** Exodist left
[06:58] *** Exodist joined
[06:59] *** domidumont joined
[07:01] *** dugword left
[07:03] *** darutoko joined
[07:03] *** domidumont left
[07:04] *** Exodist left
[07:04] *** domidumont joined
[07:06] *** Exodist joined
[07:08] *** nadim joined
[07:10] *** troys left
[07:12] *** geospeck joined
[07:13] *** mr-foobar left
[07:14] *** mr-foobar joined
[07:19] *** mniip left
[07:20] *** parv joined
[07:28] *** cdg left
[07:29] *** cdg joined
[07:33] *** cdg left
[07:35] *** dugword joined
[07:36] *** abraxxa joined
[07:37] *** Exodist left
[07:37] *** Exodist joined
[07:38] *** astj_ left
[07:39] *** astj joined
[07:39] *** astj left
[07:39] *** astj joined
[07:42] *** mr-foobar left
[07:43] *** mr-foobar joined
[07:47] *** Exodist left
[07:48] *** philomath joined
[07:49] *** Exodist joined
[07:51] *** Cabanossi left
[07:52] *** Cabanossi joined
[07:55] *** yht left
[07:57] *** Exodist left
[07:58] *** Exodist joined
[07:58] *** lowbro joined
[07:58] *** lowbro left
[07:58] *** lowbro joined
[08:00] *** parv left
[08:03] *** neilb joined
[08:03] *** neilb left
[08:04] *** mempko joined
[08:06] *** Ven joined
[08:06] *** Ven is now known as Guest25031

[08:10] *** yht joined
[08:10] *** Guest25031 left
[08:20] *** Cabanossi left
[08:22] *** Cabanossi joined
[08:25] *** philomath_ joined
[08:28] *** philomath left
[08:29] *** lookatme left
[08:30] *** cdg joined
[08:32] *** Exodist left
[08:33] *** Exodist joined
[08:33] *** mempko left
[08:41] *** rindolf joined
[08:42] *** dugword left
[08:42] *** mr-foobar left
[08:43] *** Exodist left
[08:45] *** dakkar joined
[08:46] *** mr-foobar joined
[08:48] *** Exodist joined
[08:52] *** pmurias joined
[08:59] *** Exodist left
[09:00] <ZzZombo> I'm going crazy. WHAT ON EARTH CAN MAKE IDENTICAL STRINGS NOT COMPARE SO?

[09:01] *** mempko joined
[09:01] *** Exodist joined
[09:03] <ZzZombo> For the past days I've been debugging a very specific problem, in a list of objects I need to find ones with a particular name, so I `.grep` the array that holds them with `*.name eq $name`, but somehow the check fails, so I get no results. I'm sure I do have matching objects in the array.

[09:05] <ZzZombo> I can dump it, add debug output at the place where I populate it, and it all confirms that. Hell, I can copy the string I use to search for, and the name of matching elements from the debug output I've added, and run a simple `say <str1> eq <str2>` on camelia, and it yields `True` as expected.

[09:06] <ZzZombo> But in the very specific method that searches for named objects it all fails bizarrely! I'm at the point of giving up.

[09:06] <ZzZombo> I have no more ideas to check.

[09:08] *** zakharyas joined
[09:09] <pmurias> ZzZombo: maybe check that the strings are equal while extracting them from the array with a manually specified path?

[09:09] *** philomath_ is now known as philomath

[09:10] <pmurias> ZzZombo: dumping the strings might be changing them

[09:12] *** sena_kun joined
[09:12] *** TEttinger left
[09:12] *** mr-foobar left
[09:15] *** Exodist left
[09:16] *** mr-foobar joined
[09:17] *** cdg left
[09:18] *** Exodist joined
[09:22] <ZzZombo> Can it be somehow related to encoding? The file that is used to parse and populate the array is in UTF-16LE, while the rest of the project is in UTF-8.

[09:22] <ZzZombo> I can't find much info on encoding in the docs.

[09:23] <pmurias> ZzZombo: try extracting the elements from the array using the indexes and see how they compare

[09:23] *** Exodist left
[09:23] <ZzZombo> I parse it using my hand-written `Grammar`, with the corresponding encoding supplied to `parsefile`.

[09:23] <ZzZombo> I'll try it now.

[09:24] *** cdg joined
[09:25] *** neilb joined
[09:25] <ZzZombo> `True`...

[09:26] <ZzZombo> that is, the names' equal.

[09:26] *** Exodist joined
[09:28] *** cdg left
[09:29] <piojo> ZzZombo: are they equal if you encode them both to binary (utf-8)?    $a.encode eqv $b.encode

[09:29] <pmurias> ZzZombo: if all things fail maybe golf your buggy program and nopaste it somewhere so we can tak a look?

[09:30] <piojo> ZzZombo: last time I had a problem like that, it was because of a BOM which was invisible in text editors. A hex editor showed it to me. That may or may not be applicable.

[09:32] <pmurias> ZzZombo: did you check that the .grep is actually trying to do the comparision?

[09:35] *** Exodist left
[09:35] *** Exodist joined
[09:42] *** telex left
[09:42] *** telex joined
[09:48] <ufobat___> is this spectest actually right? https://github.com/perl6/roast/blob/master/S32-io/io-spec-win.t#L319 on the first test I would expect C:\/ (where / is the "path")

[09:49] <ufobat___> for example, a "dir C:/" is not the same as "dir C:\" in the windows command line

[09:49] *** ShalokShalom joined
[09:50] <ZzZombo> piojo: yes, they are.

[09:53] <piojo> ZzZombo: are the strings equivalent? $a eqv $b? 

[09:53] <piojo> ZzZombo: If not, you can find which string is "funky": check $a.encode.decode eqv $a and $b.encode.decode eqv $b

[09:55] <piojo> Oh, you can do that check with '===' and not worry about 'eqv'

[09:55] *** Exodist left
[09:55] *** Exodist joined
[09:55] <piojo> Next, you can find out if there's part of a substring that's causing it to not match. First, check the whole string (to prove `substr` isn't changing the result): $a.substr(0..*) === $b.substr(0..*)

[09:56] <piojo> then use a binary search to find which region of the string doesn't match. preferably, just one character

[10:01] *** yht left
[10:05] *** Cabanossi left
[10:08] *** Cabanossi joined
[10:08] *** zakharyas left
[10:09] *** zakharyas joined
[10:12] *** mr-foobar left
[10:15] *** mr-foobar joined
[10:19] <ZzZombo> guys... do you fancy zero width spaces? Because I surely don't. IS THEM TO BLAME!!

[10:19] <ZzZombo> IT IS*

[10:20] *** robertle joined
[10:21] * pmurias dislikes all the fancy unicodes

[10:23] *** ShalokShalom_ joined
[10:27] *** ShalokShalom left
[10:32] *** mr-foobar left
[10:33] *** Exodist left
[10:33] *** Exodist joined
[10:34] <ZzZombo> Man, I was really going crazy, it's driving you insane when you see impossible things happen, like if `$a === $a` yielded false w/o screwing with overloading and whatnot.

[10:42] *** Exodist left
[10:43] *** gregf_ joined
[10:44] *** Exodist joined
[10:50] *** xinming left
[10:51] *** Cabanossi left
[10:52] *** xinming joined
[10:52] *** Cabanossi joined
[10:53] *** Exodist left
[10:55] *** Exodist joined
[10:59] *** pmurias left
[11:00] *** pmurias joined
[11:00] *** cpage_ left
[11:00] *** Ven joined
[11:01] *** Ven is now known as Guest32862

[11:03] *** cpage_ joined
[11:05] *** Guest32862 left
[11:08] *** Exodist left
[11:11] *** Exodist joined
[11:14] *** araraloren joined
[11:14] <araraloren> HI

[11:16] *** Exodist left
[11:16] *** Exodist joined
[11:27] *** Exodist left
[11:29] <El_Che> https://twitter.com/nxadm/status/928947538618613760  <-- alpine pkgs for Rakudo == smaller docker images

[11:29] *** Exodist joined
[11:38] <El_Che> sorry, that was meant for lizmat: https://twitter.com/nxadm/status/928947538618613760  <-- alpine pkgs for Rakudo == smaller docker images

[11:38] <lizmat> El_Che++

[11:40] *** Exodist left
[11:40] <pmurias> El_Che: rakudo.js strategy question: to get travis to work with rakudo.js I should try to get node.js to work on top of the java travis?

[11:40] <yoleaux> 11:14Z <Zoffix> pmurias: yes, there's a bug in moarvm with num stringification. It loses at least 1 digit of precision

[11:41] *** Aaronepower joined
[11:41] *** Exodist joined
[11:46] *** wander joined
[11:48] *** Aaronepower left
[11:48] *** ZzZombo1 joined
[11:49] *** Exodist left
[11:49] *** philomath left
[11:50] *** Cabanossi left
[11:50] <araraloren> If I do a post operator to server, I get a 302 status code. How I know what should I do next ?

[11:50] *** ZzZombo left
[11:51] <araraloren> GET the Location url in the header or ?

[11:51] *** Exodist joined
[11:52] <araraloren> I use the module HTTP::UserAgent, it do a POST after get a 302 response code

[11:53] *** Cabanossi joined
[11:55] <araraloren> And someone can help me ensue is this a bug of NativeCall: https://ideone.com/HpjtHV

[11:56] <araraloren> The lib code is inside the script

[11:58] *** darkmorph joined
[11:59] <araraloren> :) Anyone interest on it please try that code .

[12:02] *** llfourn joined
[12:06] *** Exodist left
[12:07] *** Exodist joined
[12:08] <pmurias> <:Name> matches characters that have a name?

[12:08] <El_Che> pmurias: I don't know enough (yet) about rakudo.js. Is it built on top of node?

[12:09] <pmurias> El_Che: I'm running it on top of node.js

[12:09] <jnthn> araraloren: Not a bug, because `char array[128];` in the struct means the values are stored directly in the struct body, but `has CArray[int8] $.array;` is a pointer to the array

[12:10] <araraloren> jnthn, so what should I create that Struct ?

[12:10] <El_Che> pmurias: https://docs.travis-ci.com/user/languages/javascript-with-nodejs/ <-- it seems built in

[12:10] <jnthn> araraloren: char *array;

[12:11] <El_Che> pmurias: but you need to build regular moarvm rakudo as well?

[12:12] <El_Che> pmurias: I just took the generic images, and put everything I needed in a container

[12:12] <pmurias> El_Che: moarvm nqp

[12:12] <araraloren> jnthn, I mean in Perl 6 side

[12:12] <jnthn> araraloren: Not sure if that's possible yet

[12:13] <jnthn> araraloren: As for the HTTP 302 question, I researched those a while back, and yeah, 302 means do a GET: https://github.com/croservices/cro-http/blob/master/lib/Cro/HTTP/Client.pm6#L351

[12:13] <araraloren> Actually I want solve this problem about `struct dirent` : https://ideone.com/G7vOaQ

[12:13] <El_Che> pmurias: well, looking at my ubuntu 14.04 img (https://github.com/nxadm/rakudo-pkg/blob/master/docker/Dockerfile-ubuntu-amd64-14.04), the only thing needed is build-essential

[12:13] <El_Che> and git

[12:14] <El_Che> maybe wget to download the source

[12:14] *** Exodist left
[12:14] <jnthn> lunch, bbiab

[12:14] <araraloren> Hmm, oh so it must do GET after get 302 , thanks

[12:14] <El_Che> 14.04 packages (what travis run) are built by the image above and this script: https://github.com/nxadm/rakudo-pkg/blob/master/docker/pkg_rakudo.pl (you can ignore the pkging part)

[12:15] <El_Che> the sub build does what you want, and that could be just a few lines of shell

[12:16] *** Exodist joined
[12:16] <El_Che> so, yes, get the nodejs image, add build-essential, git and wget packages on top

[12:16] <El_Che> and build away :)

[12:17] <El_Che> the other way round is get the rakudobrew perl6 travis integration and install nodejs on top

[12:17] *** ZzZombo1 left
[12:17] *** ZzZombo1 joined
[12:17] *** ZzZombo1 is now known as ZzZombo

[12:18] <ZzZombo> What? There is rakudo.js? What's that?

[12:19] <araraloren> jnthn, I think we are wrong, the wiki said GET is not a standard implement: https://en.wikipedia.org/wiki/HTTP_302

[12:19] <pmurias> ZzZombo: in the js branch of rakudo

[12:20] <jnthn> araraloren: Well, that's the difference between standards and what the real world does; the latter tends to be more useful :)

[12:20] <pmurias> ZzZombo: it's rakudos JavaScript backend

[12:20] <araraloren> jnthn, yeah, I know :) anyway thanks

[12:20] <ZzZombo> That is, Perl 6 implemented in Javascript and usable from it?

[12:24] *** Exodist left
[12:25] <pmurias> It's Perl 6 compiled to Javascript

[12:28] *** Exodist joined
[12:32] <El_Che> pmurias: it all depends what matrix you want to test

[12:32] <El_Che> pmurias: against different node releases? against different rakudo releases? etc

[12:37] *** Exodist left
[12:38] *** Exodist joined
[12:48] *** HoboWithAShotgun joined
[12:49] *** Exodist left
[12:49] *** AHoboWithAShotgu joined
[12:50] *** Ven joined
[12:50] *** Ven is now known as Guest3192

[12:50] *** Exodist joined
[12:50] <AHoboWithAShotgu> interesting. hexchat us acting up

[12:51] <AHoboWithAShotgu> i'm looking for a word,. when something doesnt need to know about something else, it is <xxx> to that something else.

[12:54] *** Guest3192 left
[12:55] <AHoboWithAShotgu> ah come on, i KNOW that word. i just can't get hold of it.

[12:55] <AHoboWithAShotgu> like "ignorant of" but more computer sciency

[12:56] *** AHoboWithAShotgu left
[12:56] <El_Che> no patience

[12:57] <pmurias> El_Che: testing against the newest node would be enough (and the js backend is part of rakudo so testing it against different rakudo releases doesn't make sense)

[12:57] <HoboWithAShotgun> no, still here

[12:57] *** wamba joined
[12:57] <HoboWithAShotgun> as i said, hexchat acting up.

[12:58] *** Exodist left
[12:58] <El_Che> HoboWithAShotgun: Loosely Coupled?

[12:58] <HoboWithAShotgun> nope

[12:59] *** Exodist joined
[12:59] *** zakharyas left
[13:00] <El_Che> HoboWithAShotgun: separation of concerns?

[13:00] *** thundergnat joined
[13:00] <HoboWithAShotgun> no, i'm looking for an adjective.

[13:00] <El_Che> separation-of-concernish?

[13:00] <El_Che> :)

[13:00] <HoboWithAShotgun> lol

[13:01] <thundergnat> HoboWithAShotgun orthogonal perhaps?

[13:01] <El_Che> not an adjective: Principle of Least Knowledge

[13:01] <ZzZombo> eh, if my sub argument has a default value, shouldn't passing Nil into it make use of the said default instead of setting it to `(Any)`?

[13:01] <El_Che> Law of Demeter

[13:02] *** thundergnat left
[13:03] *** piojo left
[13:04] *** wamba left
[13:05] <[Coke]> ZzZombo: what's your sub sig?

[13:05] *** Cabanossi left
[13:05] <ZzZombo> sub loadKV_simple(Str:D $filepath,Grammar::VDF::Actions $parser=Grammar::VDF::Actions,|params)

[13:06] *** cdg joined
[13:08] *** Cabanossi joined
[13:28] <MasterDuke> HoboWithAShotgun: idempotent?

[13:28] <ZzZombo> [Coke]: ^

[13:28] <HoboWithAShotgun> m: sub x($y = "z"){ say $y; }(Nil);

[13:28] <camelia> rakudo-moar d6cd0d2f5: OUTPUT: «Nil␤»

[13:28] <HoboWithAShotgun> m: sub x($y = "z"){ say $y; }("a");

[13:28] <camelia> rakudo-moar d6cd0d2f5: OUTPUT: «a␤»

[13:29] <HoboWithAShotgun> m: sub x($y = "z"){ say $y; }();

[13:29] <camelia> rakudo-moar d6cd0d2f5: OUTPUT: «z␤»

[13:30] <HoboWithAShotgun> interesting word, MaterDuke but no

[13:31] <MasterDuke> agnostic?

[13:31] *** pmurias left
[13:36] *** comborico1611 joined
[13:40] *** dugword joined
[13:42] *** AlexDaniel joined
[13:44] *** dugword left
[13:47] <HoboWithAShotgun> yes.

[13:47] <HoboWithAShotgun> that's it :)

[13:49] *** mson joined
[13:54] *** Guest13239 is now known as Levex

[13:54] *** Levex left
[13:54] *** Levex joined
[13:56] *** mcmillhj joined
[13:59] <ZzZombo> #perl6, anybody with an answer to my question?

[13:59] *** llfourn left
[14:00] *** abraxxa left
[14:01] <gfldex> m: sub f($a = 42){ my $b = 'answer'; $b = $a; say $b }; f Nil;

[14:01] <camelia> rakudo-moar d6cd0d2f5: OUTPUT: «(Any)␤»

[14:01] <gfldex> m: sub f($a is raw = 42){ my $b = 'answer'; $b = $a; say $b }; f Nil;

[14:01] <camelia> rakudo-moar d6cd0d2f5: OUTPUT: «(Any)␤»

[14:02] <gfldex> ZzZombo: I'm undecided.

[14:04] <gfldex> m: sub f($a is raw = 42){ my $b is default('answer'); $b = $a; say $b }; f Nil;

[14:04] <camelia> rakudo-moar d6cd0d2f5: OUTPUT: «answer␤»

[14:04] <gfldex> m: sub f($a is raw = 42){ my $b is default('answer'); $b = True; $b = $a; say $b }; f Nil;

[14:04] <camelia> rakudo-moar d6cd0d2f5: OUTPUT: «answer␤»

[14:05] <gfldex> ZzZombo: I would say the answer to your question is: It's complicated.

[14:06] <gfldex> ZzZombo: The default value of a container (that is what concerns Nil) is not the very same as the default value of a parameter.

[14:07] * gfldex takes note of the ENOTDOC

[14:08] *** perlpilot joined
[14:08] <lizmat> it would make object creation quite a bit faster if it were, but the slightly different semantics make this 6.d material

[14:09] <ZzZombo> I want it... it was a nasty surprise.

[14:11] <comborico1611> Morning, everyone.

[14:12] <jnthn> The Nil returning a Scalar to its default value is a semantic of assignment, but signatures are bound

[14:12] <jnthn> So while we might call both defaults, they have no mechanism in common at all

[14:13] <timotimo> we currently set default values based on "how many positionals were passed" and "which named parameters were used", not at all "which values were passed", fwiw

[14:13] <timotimo> that also allows us to throw out default value initialization code in spesh by knowing only the callsite; we can completely ignore what values were actually passed, since we know which were passed and which were left out

[14:14] * lizmat remembers the discussion with jnthn again

[14:14] <lizmat> scratch the idea for is default for parameters  :-)

[14:14] <timotimo> in theory we could allow a syntax like sub foo($a //= "lol")

[14:15] <jnthn> There's what Timo said, but also at the moment it's easy to explain when the default runs and people can rely on it meaning *nothing at all was passed"

[14:15] *** aborazmeh joined
[14:15] *** aborazmeh left
[14:15] *** aborazmeh joined
[14:15] <jnthn>  //= in signatures is something I've wanted before :)

[14:19] *** setty1 joined
[14:24] *** zakharyas joined
[14:24] <timotimo> i have an idea how to implement, but not the wrists to do it

[14:25] *** aborazmeh left
[14:26] <jnthn> An RFC ticket is probably a decent idea

[14:27] <timotimo> 6.d only?

[14:27] <jnthn> There may be issues with the idea that I didn't think of

[14:27] <jnthn> m: sub foo($x //= 1) { }

[14:27] <camelia> rakudo-moar d6cd0d2f5: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> 3sub foo($x7⏏5 //= 1) { }␤    expecting any of:␤        constraint␤»

[14:27] <jnthn> We could require use v6.d to get access to it

[14:27] <jnthn> But it won't break anything

[14:27] <timotimo> that's fair

[14:27] <timotimo> funny exception messages when you run a 6.c that doesn't yet have it, though

[14:28] *** zakharyas left
[14:29] *** wamba joined
[14:29] *** zakharyas joined
[14:32] *** grondilu joined
[14:34] *** neilb left
[14:36] *** domidumont left
[14:36] <comborico1611> I really like the name choice of slurp and spurt!

[14:37] <gfldex> ZzZombo: filed as https://github.com/perl6/doc/issues/1669

[14:37] <comborico1611> I can picture Stroustrup objecting to the informal names. That's how he comes off to me anyway.  A VERY professional formal guy.  And that's okay.

[14:38] <gfldex> where would the RFC ticket go?

[14:47] *** leont left
[14:48] *** leont joined
[14:49] *** philomath joined
[14:53] <jnthn> gfldex: Rakudo issue tracker will be fine

[14:57] *** geospeck left
[14:57] <El_Che> AlexDaniel: I spent some time tuning the rakudo alpine packages and no failing tests so far. (You asked me to ping you before 2017.11 in case of alpine trouble)

[14:58] <AlexDaniel> El_Che: sounds great! Thank you!

[14:58] <AlexDaniel> releasable6: status

[14:58] <releasable6> AlexDaniel, Next release in 8 days and ≈4 hours. No blockers. 0 out of 147 commits logged

[14:58] <releasable6> AlexDaniel, Details: https://gist.github.com/20502fb599f6b4c340707142061cbbff

[14:58] *** committable6 left
[14:58] <El_Che> still time for some blockers :)

[14:58] <AlexDaniel> yeah :)

[14:58] *** committable6 joined
[15:01] *** khw joined
[15:02] <robertle> comborico1611: I was in a talk by stroustrup a while ago, when C++11 came out. he was talking about reasons why C++ is a great language, and the weird thing is that all the time htroughout the talk I was thinking larry would have said teh same thing about perl! very odd experience

[15:03] <robertle> it was all about community, long-term outlook, maturity, a powerful language, what aprts of the language should be verbose adn which should not...

[15:07] *** census joined
[15:14] <census> how do i read it 2 different variables from an input file? my current code reads in only 1

[15:15] <census> for example. input: https://pastebin.com/amWSE9dZ. i want the first variable to be $id. the second to be $term

[15:15] <census> code: https://pastebin.com/3mkbHq8p

[15:16] *** comborico1611 left
[15:17] *** philomath left
[15:18] *** domidumont joined
[15:20] *** ryn1x_ joined
[15:20] *** ryn1x joined
[15:20] *** ryn1x__ joined
[15:30] *** mcmillhj left
[15:30] *** mcmillhj joined
[15:31] <lizmat> census: contain the lines comma separated fields ?

[15:31] <census> lizmat i'm not sure what you mean exactly. do you mean make it a .csv and not .txt ?

[15:31] <census> because i can control the input file

[15:32] <census> also it says length() has been dropped?

[15:32] <lizmat> m: my ($id,$term) = "529,Hemophilia B".split(","); dd $id,$term   # is that what you need ?

[15:32] <camelia> rakudo-moar 17db03eb3: OUTPUT: «Str $id = "529"␤Str $term = "Hemophilia B"␤»

[15:33] <lizmat> m: say "a".length

[15:33] <camelia> rakudo-moar 17db03eb3: OUTPUT: «No such method 'length' for invocant of type 'Str'. Did you mean any of these?␤    chars␤    codes␤␤  in block <unit> at <tmp> line 1␤␤»

[15:33] <lizmat> usually you want .chars in that case

[15:34] <census> lizmat yes i think the split command is what i want? how would i incorporate that though with my current code when i only had the disease name as in my @terms = "listpatentreo.txt".IO.lines.map: *.subst(:g, " ", "+").&uri_encode

[15:34] <census> that is, lizmat, how do i read it in from a .txt ?

[15:36] <lizmat> well, I think you first need to figure out which steps you are taking:

[15:36] *** ryn1x___ joined
[15:36] <lizmat> I see: 1. read lines

[15:36] <lizmat> then I guess: 2. split into id / term

[15:37] <lizmat> then 3: uri_encode ??

[15:38] *** ryn1x___ left
[15:39] <census> lizmat how does the split command work? i'm looking at perl doc. can i just split on the comma?

[15:40] <lizmat> yes, you can

[15:40] <census>   my ($id,$termname) = $term.split(",");

[15:40] <lizmat> if $term contains "529,Hemophilia B", yup

[15:42] *** ryn1x___ joined
[15:44] <census> lizmat my code is https://pastebin.com/Gz9aacRP  however it's outputting the words like "Hemophilia B" as "Hemophilia+B" 

[15:45] *** philomath joined
[15:49] <timotimo> that's url encoding

[15:49] <timotimo> though i would have expected %20 but i suppose both mean the same thing?

[15:49] *** ryn1x left
[15:50] *** ryn1x_ left
[15:51] <timotimo> ah, + is only equivalent to %20 in the query part, not the path part?

[15:51] *** llfourn joined
[15:54] *** ZzZombo1 joined
[15:55] <timotimo> at least the URI::Encode module always uses %20 for spaces

[15:55] <timotimo> which module are you using to get the uri_encode function?

[15:55] *** ZzZombo1 left
[15:55] *** ZzZombo1 joined
[15:55] <timotimo> oh it does look like you're using URI::Encode

[15:56] *** ryn1x___ left
[15:56] <timotimo> ... you are replacing spaces with + yourself

[15:56] *** ryn1x joined
[15:57] *** ZzZombo left
[15:59] *** ZzZombo1 is now known as ZzZombo

[16:02] <ZzZombo> why?

[16:02] <ZzZombo> m: sub x($a --> Str(Cool)){$a};say x('asd');say x(1)

[16:02] <camelia> rakudo-moar 17db03eb3: OUTPUT: «Str<51413496>␤Int<51413616>␤»

[16:03] <ZzZombo> Isn't it supposed to turn it into strings?

[16:03] <ZzZombo> Not into whatever is that.

[16:03] *** eliasr joined
[16:03] <timotimo> i think coercion types as return type constraints aren't implemented yet

[16:04] <ZzZombo> but the docs say otherwise then.

[16:05] <timotimo> link please?

[16:05] <ZzZombo> "...only implements them in signatures, for both parameters and return types."

[16:05] <timotimo> huhk

[16:05] <ZzZombo> https://docs.perl6.org/language/functions#Coercion_Types

[16:06] <timotimo> oh, haha

[16:06] <timotimo> m: sub x($a --> Str(Cool)){$a};say x('asd').^name;say x(1).^name

[16:06] <camelia> rakudo-moar 17db03eb3: OUTPUT: «Str␤Str␤»

[16:06] <timotimo> those are both strings

[16:06] <timotimo> how is it doing it though? because it looks like it calls WHICH rather than .Str as it should

[16:07] <timotimo> m: sub x($a --> Int(Cool)){$a};say x('999');say x(1

[16:07] <camelia> rakudo-moar 17db03eb3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3 --> Int(Cool)){$a};say x('999');say x(17⏏5<EOL>␤»

[16:07] <timotimo> m: sub x($a --> Int(Cool)){$a};say x('999');say x(1)

[16:07] <camelia> rakudo-moar 17db03eb3: OUTPUT: «Unable to coerce the return value from Cool to Int; no coercion method defined␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:09] <timotimo> pretty strange

[16:09] *** kaare_ left
[16:09] <timotimo> like, what do our tests look like for this feature?

[16:13] *** gregf_ left
[16:17] <Geth> ¦ perl6-most-wanted: bf3f303c4d | (Tom Browder)++ (committed using GitHub Web editor) | most-wanted/modules.md

[16:17] <Geth> ¦ perl6-most-wanted: update

[16:17] <Geth> ¦ perl6-most-wanted: 

[16:17] <Geth> ¦ perl6-most-wanted: remove published module Geo::Ellipsoid, add wanted module RTF::Writer

[16:17] <Geth> ¦ perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/bf3f303c4d

[16:17] <MasterDuke> timotimo: there are some in S06-signature/definite-return.t

[16:18] <timotimo> "definite" return, eh? that doesn't sound like the right file for coercion types in return

[16:18] <lizmat> sorry census: was afk for a bit

[16:19] *** gregf_ joined
[16:19] *** ryn1x left
[16:20] *** Cabanossi left
[16:22] <ZzZombo> I have been using a variation of

[16:22] <ZzZombo> m: sub x($a){$_ ~~ Numeric ?? .Numeric !! .Str with val $a};say x('')

[16:22] <camelia> rakudo-moar 17db03eb3: OUTPUT: «0␤»

[16:22] *** Cabanossi joined
[16:23] <ZzZombo> to save values as numbers where possible, but it turned out empty strings are converted to 0, but that's undesirable, what would be the easiest way to circumvent it?

[16:26] <ugexe> m: sub foo($a) { say $_.Numeric }; foo(69)

[16:26] <camelia> rakudo-moar 17db03eb3: OUTPUT: «Use of uninitialized value of type Any in numeric context␤0␤  in sub foo at <tmp> line 1␤»

[16:26] <ugexe> where is $_ coming from?

[16:26] <ZzZombo> `with`

[16:26] <ugexe> ah, thats a hellova statement to parse heh

[16:27] *** comborico1611 joined
[16:28] <comborico1611> robertle, that is interesting! Thanks.

[16:29] <timotimo> ZzZombo: maybe use "val"?

[16:29] <timotimo> m: dd val(""); dd val("abc"); dd val("999")

[16:29] <camelia> rakudo-moar 17db03eb3: OUTPUT: «IntStr.new(0, "")␤"abc"␤IntStr.new(999, "999")␤»

[16:29] <ZzZombo> did the `val` sub change this year or earlier? Because I don't remember it saying to return the string itself if it fails to parse a number... maybe it was just docs not completely up to date.

[16:29] <timotimo> hmm.

[16:30] <timotimo> it was always supposed to work on anything, i believe

[16:30] <ZzZombo> Yeah, timotimo, I see now in the docs I can just use `val` w/o anything else for my purposes.

[16:31] <ZzZombo> I swear it wasn't so back then I wrote this piece of code. In fact, I recall some of our channel regulars suggesting me this code for my problem, when I asked about it here.

[16:33] *** ch3ck3r joined
[16:36] <MasterDuke> c: all dd val("abc")

[16:36] <committable6> MasterDuke, https://gist.github.com/8bbf582d0d62d7ce03bff9ac9212c03b

[16:36] *** napo1eon left
[16:39] *** rgrau joined
[16:40] *** wamba left
[16:43] <Geth> ¦ perl6-most-wanted: 32596209fc | (Tom Browder)++ (committed using GitHub Web editor) | most-wanted/modules.md

[16:43] <Geth> ¦ perl6-most-wanted: add WIP reference

[16:43] <Geth> ¦ perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/32596209fc

[16:46] *** zakharyas left
[16:46] *** lowbro left
[16:48] <gfldex> ZzZombo: RFC filed as https://github.com/rakudo/rakudo/issues/1245

[16:49] *** ryn1x__ left
[16:51] <ZzZombo> Good!

[16:51] *** Cabanossi left
[16:52] <timotimo> ZzZombo: be careful about the IntStr and similar objects, they will typematch Int and Str both, so your logic may need a bit of tweaking in some places

[16:52] *** Cabanossi joined
[16:53] <ZzZombo> That's okay, I guess.

[17:01] *** mcmillhj left
[17:03] *** troys joined
[17:05] *** mempko left
[17:07] *** domidumont left
[17:20] *** mcmillhj joined
[17:21] *** mniip joined
[17:24] *** ryn1x joined
[17:27] *** philomath left
[17:28] *** ryn1x left
[17:29] <comborico1611> Ping

[17:29] <comborico1611> I guess I mean, reverse ping.

[17:29] <comborico1611> Or inverse ping?

[17:31] <moritz> it's called "pong" :-)

[17:33] <comborico1611> You sure? When I'm just checking in, i send a ping but ping is usually when the other points to check-in on the "other guy".

[17:34] <comborico1611> I guess... 

[17:34] <moritz> ping is usually "ICMP echo request", and pong is "ICMP echo response". Works on IRC too :-)

[17:34] <[Coke]> here, you typically ping someone, and they pong in response.

[17:35] *** dakkar left
[17:35] <comborico1611> So I'm self-ponging!

[17:35] *** kaare_ joined
[17:37] <TimToady> both probably derived from the game of 乒乓

[17:38] <El_Che> TimToady: you had to bring utf8 into the conversation, didn't you? :)

[17:38] <comborico1611> The ping is the initiator for a response, where checking-in is initiates nothing, it is not a response.

[17:39] *** domidumont joined
[17:39] * TimToady never thought of utf8; was thinking of Chinese

[17:39] <comborico1611> That looks like a graphic of a store-front.

[17:40] <comborico1611> With the the stores having lids for roofs.

[17:40] <moritz> if you just want to announce your presence, a greeting is the usual way :-)

[17:41] <El_Che> TimToady: :)

[17:43] <MasterDuke> http://ftp.arl.mil/~mike/ping.html my dad's claim to computing fame is that he was roommates with Mike Muus in college

[17:43] *** ch3ck3r left
[17:43] *** kaare_ left
[17:43] <MasterDuke> and if everybody hasn't already read it before, https://www.amazon.com/review/R2VDKZ4X1F992Q is great

[17:43] *** kaare_ joined
[17:44] <comborico1611> Instead of given and when, i would have used is-it and this. So, isit $value {this 0..9 {say "one digit"} this $_ < 99 {say "two digits"}}

[17:44] *** wamba joined
[17:46] *** ryn1x joined
[17:46] <comborico1611> You'd read it as, "$value isit this? No. This? No. This. Yes!

[17:47] <moritz> slightly confusing, because "this" in object-oriented code traditionally contains the invocant

[17:48] <comborico1611> That's how i read it in c++.  The switch and... (Forgot the "when" equivalent) was confusing wording.

[17:48] <moritz> case, probably

[17:48] <comborico1611> You're right. What about "that" ?

[17:48] <comborico1611> Yeah, case... 

[17:49] <comborico1611> Switch and case are very foreign. Perl6 does much better.

[17:50] *** ryn1x left
[17:50] <moritz> what's wrong with given/when?

[17:50] <moritz> "given a string, when it's 'x', print 42"

[17:50] *** cdg left
[17:50] <comborico1611> Stroustrup said switch statements are archaic. I think he meant obsolete.

[17:50] <moritz> also "given" works without "when" too

[17:51] *** cdg joined
[17:51] <comborico1611> He said that in his Programming book.

[17:51] <comborico1611> I see. 

[17:51] <moritz> m: given "abc" { say S/a/x/; .say }

[17:51] <perlpilot> I'm pretty sure he didn't mean obsolete.  There's still some good use case for the "simple" switch

[17:51] <camelia> rakudo-moar 2dcefa1c3: OUTPUT: «xbc␤abc␤»

[17:51] <moritz> perlpilot: duff's device, eh? :-)

[17:51] <perlpilot> :-0

[17:51] <perlpilot> er, :-)

[17:52] <comborico1611> I really don't have the experience to make the judgement call. I only read it naturally as "is it" and "this".

[17:52] <El_Che> switch is a very ideomatic way to write if - if else - ... - else construction

[17:52] <El_Che> in go by example

[17:53] <TimToady> the main problem with switch/case from my perspective is that it's using nouns that name the construct rather than just using natural functor words for topicalization and conditionalization

[17:53] *** mr-foobar joined
[17:53] <TimToady> it's as if, instead of "if", they used "conditional"

[17:54] <TimToady> conditional $a == $b { say "True" }

[17:54] <moritz> sounds very COBOLesque

[17:54] <El_Che> mm

[17:54] <moritz> just needs to shout it

[17:54] <TimToady> at least COBOL had the sense to use verbs like PERFORM

[17:54] <moritz> CONDITIONAL $a .EQ. $b { say "TRUE" }

[17:55] *** cdg left
[17:55] <El_Che> TimToady: I had to read your sentence twice, but indeed.

[17:55] <TimToady> comborico1611: the problem with "isit" is that it sounds like it's asking a yes/no question, when it's really just topicalization

[17:55] *** mempko joined
[17:56] <perlpilot> you know, I never really thought about why switch/case are named thusly or who came up with those names

[17:56] <El_Che> perlpilot: that's TimToady's job :)

[17:57] <comborico1611> I don't have the experience to understand topicalization. Bravo, though, for whoever came up with slurp and spurt.

[17:57] <AlexDaniel> hah :)

[17:58] <moritz> slurp was easy

[17:58] <comborico1611> The way I learn how to program, is to speak the commands in English. And, if I cannot figure out how to phrase in English, I don't learn it.

[17:58] <moritz> but all English verbs that relate to produce large amounts of output at once sound kinda dirty

[17:59] <TimToady> yeah, spurt is just the least worst :)

[17:59] *** kaare_ left
[17:59] <perlpilot> and it fits well with slurp

[17:59] <comborico1611> I never realized spurt is a word. But it describes the priest peculiar action very well.

[18:00] <comborico1611> Minus priest (Android keyboard)

[18:00] * TimToady was wondering what the priest was spurting...

[18:01] <timotimo> hey TimToady, how do you like the syntax 'sub foo($bar //= "hi") { }' for values that get a default if anything undefined or if nothing at all is passed?

[18:02] <perlpilot> timotimo: as opposed to?  ;)

[18:02] <TimToady> it seems relatively straightforward

[18:02] <comborico1611> The only reason i have any interest in perl is because of your Think Big interview videos on YouTube. 

[18:02] <timotimo> 'sub foo($bar = "hi") { }' which gives a default if nothing is passed, otherwise lets anything through, even Nil or Any

[18:02] <timotimo> perlpilot: ^

[18:03] <AlexDaniel> speaking of naming things, I'm constantly bothered by stuff that has different amount of characters. For example: True and False

[18:03] <timotimo> True and Fals

[18:03] <perlpilot> AlexDaniel: you'd rather Tru and Fal?  ;)

[18:03] <comborico1611> Big Think*

[18:03] <moritz> O_CREAT

[18:04] <moritz> postgresql uses t and f for true and false

[18:04] <AlexDaniel> True and Nono? :) Well, there are these thingies: ⊨ ⊭  …

[18:04] <moritz> (though "true" and "false" also work, iirc)

[18:04] <AlexDaniel> u: ⊨⊭

[18:04] <unicodable6> AlexDaniel, U+22A8 TRUE [Sm] (⊨)

[18:04] <unicodable6> AlexDaniel, U+22AD NOT TRUE [Sm] (⊭)

[18:04] <perlpilot> comborico1611: long before I knew who Larry Wall was, I was draw to perl because a) someone I admired suggested it and b) once I played with it, I was amazed at how "comfortable" it felt -- lots of power and easy to get into and minimal restrictions

[18:05] <comborico1611> I see. 

[18:05] * TimToady still doesn't know who Larry Wall is...

[18:05] <AlexDaniel> but I guess ⊨ ⊭ are used for a different purpose so not that great of an idea

[18:06] <El_Che> TimToady: a famous guy with hawaii shirt and big hats

[18:07] <perlpilot> TimToady: you can never know who someone is in the same way that you can never step in the same stream twice.

[18:08] <moritz> it's funny how children tend to ask the hard questions, like "who are you?"

[18:08] *** kaare_ joined
[18:08] *** darkmorph left
[18:09] <huf> that's easy... compared to the 49th "why"

[18:09] <comborico1611> Alright, guys. I need to get ready for lunch.  I'll have to tell my brother and wife that i spoke to the Larry guy today.  Pretty neat!

[18:09] <wander> perlpilot: perl is the best language of all bad languages, no language always be good :(

[18:09] <yoleaux> 9 Nov 2017 20:46Z <Zoffix> wander: Yes: https://rt.perl.org/Ticket/Display.html?id=78068#ticket-history    You can see all open tickets on https://fail.rakudo.party (plus GitHub Issues: https://github.com/rakudo/rakudo/issues   P.S.: we also have #perl6-dev

[18:10] <El_Che> camelia: bon appetit

[18:12] <timotimo> perlpilot: any opinion on the //= thing in signatures?

[18:12] <moritz> botnom :-)

[18:12] <perlpilot> wander: well ... it's just like when people ask "is this the best way to do X?"; you need some criteria for "best"--best along the "least memory usage" axis, best along the "fastest execution" axis, best because it's the simplest to understand, best because it's least likely to go wrong ... what's the criteria?   All programming languages suffer this.

[18:12] <perlpilot> timotimo: +1

[18:14] <wander> timotimo: so we have both `=` and `//=` ?

[18:14] <wander> if implemented

[18:15] <timotimo> yes

[18:15] <wander> a new trap :P

[18:15] <perlpilot> wander: trap?

[18:16] <moritz> I'm not sure there is need for that, but if there is, I like the syntax

[18:16] <wander> that how you imply 'default' parameter

[18:16] <gfldex> m: multi s(Any:D $a) { say $a }; multi s(Any:U $a) { s 42 }; s Nil;

[18:16] <camelia> rakudo-moar 2dcefa1c3: OUTPUT: «42␤»

[18:16] <moritz> more often, I'd like to say on the caller side "give me the default"

[18:16] <moritz> but //= is callee-side

[18:17] <timotimo> jnthn pointed out he'd wanted that in the past

[18:18] <timotimo> doing it on the caller side is a bit difficult, what with multiple dispatch and complicated signatures

[18:18] <moritz> right

[18:19] <moritz> I guess it helps if you have two functions, and one mostly passes arguments to the second

[18:19] <wander> more like `sub f($a is default(42)) { ... }` and keep consistency of Nil assignment (quite verbose though)

[18:19] <moritz> then you can get away with declaring the default values only in the second, and use a simple ? to make them optional in the first

[18:19] <timotimo> no, signature binding is binding, not assignment

[18:20] *** Cabanossi left
[18:20] <gfldex> m: multi s($a = 42){ say [$a ~~ Nil, $a.^name] }; s Failure.new("foo");

[18:20] <camelia> rakudo-moar 2dcefa1c3: OUTPUT: «[True Failure]␤»

[18:22] *** ryn1x joined
[18:22] <timotimo> interesting datapoint. if implemented naively, the definedness check in the //= will disarm a Failure object

[18:22] <timotimo> m: my $foo = Failure.new("oh"); my $bar is default(99); $bar = $foo; say $bar; say $foo

[18:22] <camelia> rakudo-moar 2dcefa1c3: OUTPUT: «oh␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:22] *** Cabanossi joined
[18:23] <timotimo> m: my $foo = Failure.new("oh"); say "test"; my $bar is default(99); say "test2"; $bar = $foo; say $bar; say $foo

[18:23] <camelia> rakudo-moar 2dcefa1c3: OUTPUT: «test␤oh␤␤test2␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:23] <timotimo> m: my $foo = Failure.new("oh"); say "test"; my $bar is default(99); say "test2"; $bar //= $foo; say $bar; say $foo

[18:23] <camelia> rakudo-moar 2dcefa1c3: OUTPUT: «test␤oh␤␤test2␤99␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:23] <timotimo> hm, it doesn't say handled, eh?

[18:23] *** HaraldJoerg joined
[18:25] <perlpilot> timotimo: what precipitated adding //= to sigs?  (I know the topic if differentiating between the caller providing a value and providing a defined value keeps coming up, but I haven't really paid attention to the details)

[18:26] <timotimo> it's annoying to use flattening to get the default value for some argument

[18:26] *** ryn1x left
[18:32] *** mcmillhj left
[18:36] *** lostinfog joined
[18:38] *** Actualeyes left
[18:44] *** darutoko left
[18:44] <tbrowder> i just looked at wikipedia article on p6 and wonder if snake-case naming is worth a mention (it sure is handy for two-finger typists!)

[18:44] *** wamba left
[18:48] *** darkmorph joined
[18:49] *** ryn1x joined
[18:52] *** Cabanossi left
[18:52] *** Cabanossi joined
[18:55] *** ryn1x left
[18:55] *** mcmillhj joined
[18:57] *** geospeck joined
[18:58] *** HoboWithAShotgun left
[18:59] *** HoboWithAShotgun joined
[18:59] *** ryn1x joined
[19:01] *** mcmillhj left
[19:04] *** mcmillhj joined
[19:09] *** ryn1x left
[19:12] *** AndChat|688961 joined
[19:13] *** comborico1611 left
[19:13] <timotimo> but that's kebap-casing rather than snake-casing?

[19:13] <timotimo> i *think* snake_casing is with underscores?

[19:15] <timotimo> wikipedia tends to agree on that

[19:15] *** rgrau left
[19:19] *** Cabanossi left
[19:21] *** lostinfog left
[19:21] *** AndChat|688961 left
[19:22] *** comborico1611 joined
[19:23] *** Cabanossi joined
[19:28] *** geospeck left
[19:28] <TimToady> I believe the reference is to a boa constrictor swallowing an elephant, as in https://stephaniebrewton.wordpress.com/2011/05/19/the-little-prince-or-swallowing-an-elephant-or-dont-let-others-dictate-your-talents/

[19:29] *** mson left
[19:29] *** Aceeri_ joined
[19:36] *** dogbert17 joined
[19:37] *** eliasr left
[19:38] *** dct joined
[19:39] *** philomath joined
[19:44] *** TEttinger joined
[19:44] <wander> what's your opinions on documented Named Regexes? Should it be in /lang/regex, /lang/grammar, or both (for verbose is sometimes good).

[19:45] <perlpilot> wander: redundancy is a good thing in this case IMHO

[19:45] <wander> additionally, 'subrules' don't have to be named

[19:46] <comborico1611> oin: khw [2601:281:8380:7f0:a5f4:ab25:7b30:eeab]

[19:46] <comborico1611> <robertle> comborico1611: I was in a talk by stroustrup a while ago, when C++11 came out. he was talking about reasons why C++ is a great language, and the weird thing is that all the time htroughout the talk I was thinking larry would have said teh same thing about perl! very odd experience

[19:46] <comborico1611> <robertle> it was all about community, long-term outlook, maturity, a powerful language, what aprts of the language should be verbose adn which should not...

[19:47] <comborico1611> Wander, you reminded me of that which was said earlier today.

[19:47] <wander> what's that

[19:48] <comborico1611> Stroustrup saying which parts of the language should be verbose, and which parts shouldn't.

[19:50] <comborico1611> I just received news on when the next Deitel C++17 (from Paul Deitel himself) will be released. 

[19:51] <comborico1611> (Parentheses in a confusing place.)

[19:53] *** pentashift_ left
[19:54] *** domidumont left
[19:54] <tbrowder> sorry, i meant kebab

[19:55] <wander> emmmmm...now I am thinking about we ought to call them 'subrules' or something better

[19:55] <wander> 'Named regex' implies they should be named

[19:56] *** cdg joined
[19:56] <wander> and we actually have declarator 'regex', 'rule' and 'token', so call them 'subrules' a little improperly

[19:57] <wander> m: my $pattern = regex { \w+ }; say "abc" ~~ $pattern

[19:57] <camelia> rakudo-moar 2dcefa1c3: OUTPUT: «｢abc｣␤»

[20:00] *** ufobat___ is now known as ufobat

[20:05] *** mcmillhj left
[20:09] <comborico1611> let me preface this statement with this, I'm just giving my feedback as someone new to programming and you to Pearl 6. I don't actually think my way is the best way. No I'm going to write in that style. The topical variable is a bad name. Alias should be somehow used in the name.

[20:09] <comborico1611> You = new

[20:09] *** ryn1x joined
[20:09] <ufobat> m: IO::Path::Win32.new(:volume<C:>, :basename("/\x[308]")).absolute.say

[20:09] <camelia> rakudo-moar 2dcefa1c3: OUTPUT: «Cannot dispatch to method new on IO::Path because it is not inherited or done by IO::Path::Win32␤  in block <unit> at <tmp> line 1␤␤»

[20:09] <comborico1611> No = though

[20:09] <ufobat> huh!

[20:10] <comborico1611> But I'm liking Perl6 more and more.

[20:11] <ufobat> m: IO::Path.new(:volume<C:>, :basename("/\x[308]"), :SPEC(IO::Spec::Win32).absolute.say

[20:11] <camelia> rakudo-moar 2dcefa1c3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3]"), :SPEC(IO::Spec::Win32).absolute.say7⏏5<EOL>␤»

[20:12] <ufobat> m: IO::Path.new(:volume<C:>, :basename("/\x[308]"), :SPEC(IO::Spec::Win32)).absolute.say

[20:12] <camelia> rakudo-moar 2dcefa1c3: OUTPUT: «IO::Path is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at <tmp> line 1␤␤»

[20:13] * ufobat is confused, this works on my box

[20:14] *** ryn1x left
[20:14] *** cdg_ joined
[20:15] *** mcmillhj joined
[20:16] <comborico1611> Hmm. Mysterious call from San Jose... I wonder who they could be...

[20:17] *** cdg left
[20:20] *** perlpilot left
[20:23] <comborico1611> They said i just won a trip to the Bahamas.

[20:24] <ufobat> my congratulations :-)

[20:27] <comborico1611> Heh. I think it's a scam. I don't even live in California.

[20:27] <comborico1611> Great production they put on.

[20:30] *** troys is now known as troys_

[20:34] *** census left
[20:37] *** mempko left
[20:44] *** ryn1x joined
[20:47] *** comborico1611 left
[20:49] *** ryn1x left
[21:01] *** robertle left
[21:04] *** troys_ is now known as troys

[21:20] *** ryn1x joined
[21:24] *** ryn1x left
[21:24] *** philomath left
[21:25] *** comborico1611 joined
[21:29] *** asdf23456 joined
[21:29] *** pilne joined
[21:42] *** jstuder joined
[21:42] <jstuder> hi everyone.

[21:43] <jstuder> haven't been on irc yet

[21:43] <jstuder> I've contributed a bit to the doc repo

[21:44] <jstuder> as jstuder-gh (donkey picture)

[21:44] <jstuder> and wanted to introduce myself

[21:44] <japhb> jstuder: Hi there!  You happened to have come to visit during a bit of a lull.

[21:45] <jstuder> i see. no problem

[21:45] <japhb> I normally don't follow this channel because it's much too fast most days.  But since I happened to be here ... well, it's always nice to have someone respond when one says hello for the first time.  :-)

[21:45] <jstuder> I agree. Thanks

[21:46] <jstuder> I figured that I should pop in here since i've been contributing but have never actually spoken to anyone :P

[21:46] <japhb> We're a pretty friendly bunch.

[21:47] <japhb> But the mix of who is actually around varies pretty strongly by timezone and weekday v. weekend.

[21:47] <jstuder> okay. thanks for the heads up.

[21:48] <ufobat> welcome :-)

[21:49] *** wamba joined
[21:50] *** mcmillhj left
[21:55] *** mcmillhj joined
[21:57] <jstuder> In the doc repo, I noticed in doc/language/syntax that the { } hash literal operator is used. Since Issue #1380 states the %() is the preferred style, I want to change it to that.

[21:57] <jstuder> I'm not sure if I should include the { } delimiters as well. It's already documented in doc/Type/Hash

[21:58] <jstuder> and I don't want to copy and paste the explanation as to why its not preferrable

[21:59] *** mcmillhj left
[22:00] <jstuder> i figure that if people want to they can check Hash to get the full story.

[22:01] <jstuder> any objections?

[22:11] *** cpage_ left
[22:11] *** darkmorph left
[22:24] *** ryn1x joined
[22:26] *** releasable6 left
[22:26] *** releasable6 joined
[22:28] *** gregf_ left
[22:28] *** setty1 left
[22:28] *** ryn1x left
[22:30] *** mr-foobar left
[22:31] *** mr-foobar joined
[22:33] *** mr-foobar left
[22:33] *** kaare_ left
[22:33] *** kaare__ joined
[22:36] *** rgrau joined
[22:48] *** mr-foobar joined
[22:51] *** luke___ left
[22:56] *** cpage_ joined
[23:06] *** darkmorph joined
[23:14] *** rindolf left
[23:17] *** ryn1x joined
[23:20] *** darkmorph left
[23:21] *** ryn1x left
[23:21] *** Cabanossi left
[23:22] *** Cabanossi joined
[23:37] *** HaraldJoerg left
[23:40] *** darkmorph joined
[23:45] *** mson joined
[23:49] *** darkmorph left
[23:50] *** darkmorph joined
[23:50] *** ryn1x joined
[23:50] *** wamba left
[23:55] *** mcmillhj joined
[23:55] *** ryn1x left
[23:56] *** nadim left
