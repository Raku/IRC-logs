[00:00] <zoll> i put up with hg not by choice. one thing i miss is gitk; hgk is barely usable in comparison. 

[00:00] <timotimo> but tortoisehg is very good

[00:02] *** Cabanossi left
[00:03] <zoll> is tortoise* family not confined to MS Windows? i may^Wwill update CentOS to v7 to get updated support software for other, better hg GUI.

[00:04] <timotimo> not tortoisehg

[00:04] <timotimo> there's also sourcetree, i think that has both git and hg, or maybe only hg

[00:05] *** Cabanossi joined
[00:07] <zoll> ok. i will see into this further. thanks timotimo 

[00:08] <timotimo> good luck!

[00:08] <timotimo> merced: i often struggle with not finding projects when i want to play with something new, like a new programming language

[00:08] <timotimo> merced: what's your style? tools, gui, web, games, maths, art, ...?

[00:10] *** skids joined
[00:11] *** jaldhar_ left
[00:11] *** jaldhar_ joined
[00:14] <R0b0t1> timotimo: Admittedly I think the submodule command renamed some things nonsensically

[00:22] *** lookatme joined
[00:22] <lookatme> morning

[00:28] <merced> timotimo: i like automation, raw data processing, fast-scrolling terminals, systems engineering, shit like that

[00:32] <PerlJam> "fast-scrolling terminals"?  heh

[00:32] <yoleaux> 28 May 2017 09:33Z <Zoffix> PerlJam: IIRC it was you who lamented impossibility of Perl 5's `$.` for $*ARGFILES var in Perl 6. It's no longer impossible ($*ARGFILES is IO::CatHandle now): https://twitter.com/zoffix/status/868761719639871488

[00:33] <merced> yeah slow scroll's so boring

[00:34] *** Cabanossi left
[00:35] *** Cabanossi joined
[00:36] * PerlJam wonders if yoleaux can be made smart enough to deliver messages to any nicks that a person might use whether or not that particular nick is addressed

[00:39] <timotimo> merced: hm, i don't think that intersects with a lot of my style, so i don't have any good suggestions

[00:41] <PerlJam> merced: why not contribute to an existing project?

[00:41] *** pharv_ joined
[00:42] *** pharv_ left
[00:42] <PerlJam> merced: something I've thought of doing just because is implementing useful shell commands in Perl 6

[00:43] <PerlJam> kind of like Perl Power Tools, but only a subset of the unix utilities that I find interesting or useful

[00:43] *** coetry joined
[00:44] <coetry> p6: my $to = 'all'; say "hello to $to :)";

[00:44] <camelia> rakudo-moar 9658dd: OUTPUT: «hello to all :)␤»

[00:45] <timotimo> m: say "coetry".comb.pick(*) xx 5

[00:45] <camelia> rakudo-moar 9658dd: OUTPUT: «((r y o c e t) (y c t e r o) (o r t e c y) (t o y c r e) (e y t r c o))␤»

[00:45] <timotimo> m: say "coetry".comb.pick(*).join xx 5

[00:45] <camelia> rakudo-moar 9658dd: OUTPUT: «(teroyc oecryt oyetrc ytceor retyco)␤»

[00:48] <lookatme> m: say "coetry".flip;

[00:48] <camelia> rakudo-moar 9658dd: OUTPUT: «yrteoc␤»

[00:49] <zoll> m: say split   "coetry"

[00:49] <camelia> rakudo-moar 9658dd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling split(Str) will never work with declared signature ($pat, Cool $target, |c is raw)␤at <tmp>:1␤------> 3say 7⏏5split   "coetry"␤»

[00:50] <zoll> that's actually good error message

[00:50] <timotimo> m: say (do for "coetry".comb -> $letter { ^0x10000 .pick(*).grep(*.uniname.contains($letter)).grep({ rand < 0.2 }).first }).join

[00:50] <camelia> rakudo-moar 9658dd: OUTPUT: «243532015550141141414152863␤»

[00:50] <timotimo> m: say (do for "coetry".comb -> $letter { ^0x10000 .pick(*).grep(*.uniname.contains($letter)).grep({ rand < 0.2 }).map(*.chr).first }).join

[00:50] <camelia> rakudo-moar 9658dd: OUTPUT: «爰䣂솜␤»

[00:50] <timotimo> m: say (do for "coetry".comb -> $letter { ^0x10000 .pick(*).grep(*.uniname.contains(" $letter ")).grep({ rand < 0.2 }).map(*.chr).first }).join

[00:50] <camelia> rakudo-moar 9658dd: OUTPUT: «Use of Nil in string context␤  in block <unit> at <tmp> line 1␤Use of Nil in string context␤  in block <unit> at <tmp> line 1␤Use of Nil in string context␤  in block <unit> at <tmp> line 1␤Use of Nil in string context␤  in block <unit> at <…»

[00:50] <timotimo> eh.

[00:51] <timotimo> ah, of course, upper case everything in unicode

[00:51] <timotimo> m: say (do for "coetry".uc.comb -> $letter { ^0x10000 .pick(*).grep(*.uniname.contains(" $letter ")).grep({ rand < 0.2 }).map(*.chr).first }).join

[00:51] <camelia> rakudo-moar 9658dd: OUTPUT: «ĊӪĖṱṚỲ␤»

[00:51] <timotimo> yeah boyyyyy that's what i'm talking about

[00:51] <PerlJam> I did not think that would turn out so well

[00:51] <timotimo> the unicode consortium has our backs

[00:52] <timotimo> as well as our hacks

[00:52] <zoll> what does "rand < 0.2" do?

[00:52] <timotimo> rand gives you a random number between 0 and 1

[00:52] <timotimo> actually, that's totally unnecessary

[00:52] <zoll> no, besides the obvious

[00:52] <timotimo> since i already randomize the sequence of numbers anyway

[00:52] <lookatme> m: say rand for 1 .. 3;

[00:52] <camelia> rakudo-moar 9658dd: OUTPUT: «0.808007052908069␤0.675879308772485␤0.975016660427953␤»

[00:52] <PerlJam> m: put [~] <c e r> Z~ <o t y>   # KISS

[00:52] <camelia> rakudo-moar 9658dd: OUTPUT: «coetry␤»

[00:53] <timotimo> m: say [+] (rand xx 100).grep({ rand < 0.2 })

[00:53] <camelia> rakudo-moar 9658dd: OUTPUT: «10.5056290971469␤»

[00:53] <timotimo> m: say [+] (rand xx 100).grep({ rand < 0.3 })

[00:53] <camelia> rakudo-moar 9658dd: OUTPUT: «7.37854687110917␤»

[00:53] <timotimo> er, not what i was aiming for

[00:53] <timotimo> m: say [+] (1 xx 100).grep({ rand < 0.3 })

[00:53] <camelia> rakudo-moar 9658dd: OUTPUT: «25␤»

[00:53] <timotimo> m: say [+] (1 xx 100).grep({ rand < 0.5 })

[00:53] <camelia> rakudo-moar 9658dd: OUTPUT: «49␤»

[00:53] <timotimo> m: say [+] (1 xx 100).grep({ rand < 0.2 })

[00:53] <camelia> rakudo-moar 9658dd: OUTPUT: «26␤»

[00:53] <timotimo> m: say [+] (1 xx 100).grep({ rand < 0.2 })

[00:53] <camelia> rakudo-moar 9658dd: OUTPUT: «20␤»

[00:53] <timotimo> m: say [+] (1 xx 100).grep({ rand < 0.2 })

[00:53] <camelia> rakudo-moar 9658dd: OUTPUT: «16␤»

[00:53] <timotimo> when you grep by { rand < 0.2 } you'll get about 20% of all items

[00:54] <timotimo> m: say (do for "coetry".uc.comb -> $letter { ^0x10000 .pick(*).grep(*.uniname.contains(" $letter ")).map(*.chr).first }).join

[00:54] <camelia> rakudo-moar 9658dd: OUTPUT: «ꞓⱺỆƬṘỶ␤»

[00:54] <timotimo> anyway, it was useless anyway :)

[00:54] * zoll hmms ...

[00:54] <timotimo> m: say (do for "coetry".uc.comb -> $letter { ^0x10000 .pick(*).grep(*.uniname.contains(" $letter ")).map(*.chr).first }).join

[00:54] <camelia> rakudo-moar 9658dd: OUTPUT: «ĊṏĕṰŗỷ␤»

[00:54] <timotimo> m: say (do for "coetry".uc.comb -> $letter { ^0x10000 .pick(*).grep((*.uniname ~ " ").contains(" $letter ")).map(*.chr).first }).join

[00:54] <camelia> rakudo-moar 9658dd: OUTPUT: «ꞒォﯦƮৃＹ␤»

[00:54] <timotimo> m: say (do for "coetry".uc.comb -> $letter { ^0x10000 .pick(*).grep((*.uniname ~ " ").contains(" $letter ")).map(*.chr).first }).join

[00:54] <camelia> rakudo-moar 9658dd: OUTPUT: «ͨꥋᴈＴᷣỴ␤»

[00:54] <timotimo> m: say (do for "coetry".uc.comb -> $letter { ^0x10000 .pick(*).grep((*.uniname ~ " ").contains(" $letter ")).map(*.chr).first }).join

[00:54] <camelia> rakudo-moar 9658dd: OUTPUT: «ᛍỎẹᵵr⅄␤»

[00:54] <timotimo> this variant also allows the letter to stand at the very end of the uniname

[00:54] <PerlJam> those last two are more what I thought would happen  :)

[00:55] <timotimo> yeah, it's because those that have " A " in them are usually "LATIN LETTER A WITH WEIRD SQUIGGLES"

[00:55] <jeromelanteri> morning, someone see the last comment for me ? (to deep in the history for me)

[00:55] <timotimo> whereas with accepting the " A" at the end of the uniname as well you get things like "MARTIAN LETTER KINDA LIKE A"

[00:55] <timotimo> 184728*   Zoffix │ jeromelanteri: debugger was fixed like a few days after 2017.06 release

[00:55] <merced> PerlJam: interesting idea

[00:56] <jeromelanteri> timotimo, ok, thank you

[00:57] *** jaldhar_ left
[00:57] *** jaldhar_ joined
[01:01] <timotimo> R0b0t1: bad news: both dyncall and libffi use and actually rely on executable stack :\

[01:02] <timotimo> (based on a very cursory google search)

[01:05] *** tinita_ is now known as tinita

[01:08] *** coetry left
[01:10] <timotimo> coetry left :<

[01:10] <lookatme> Haha

[01:11] <timotimo> m: say (do for "goodbye".uc.comb -> $letter { ^0x10000 .pick(*).grep(*.uniname.contains(" $letter ")).map(*.chr).first }).join

[01:11] <camelia> rakudo-moar 9658dd: OUTPUT: «ḡỘꭃḍɓŷê␤»

[01:11] *** nadim left
[01:12] <timotimo> i'll go sleep now. have a good one!

[01:12] * R0b0t1 sighs

[01:13] <R0b0t1> timotimo: Thanks for checking

[01:14] <timotimo> https://github.com/Snaipe/dyncall/blob/master/dyncall/dyncall_call_x86_8a.s#L41

[01:16] <R0b0t1> So it doesn't really need it but changing it would be a contribution to dyncall

[01:18] <timotimo> looks like

[01:18] *** Cabanossi left
[01:20] *** Cabanossi joined
[01:23] *** coetry joined
[01:24] *** coetry left
[01:29] *** tyil left
[01:31] *** jferrero left
[01:41] *** raschipi joined
[01:46] *** ilbot3 left
[01:47] *** tyil joined
[01:47] *** Cabanossi left
[01:50] *** Cabanossi joined
[01:50] *** astj_ left
[01:50] *** astj joined
[01:52] *** ilbot3 joined
[01:52] *** ChanServ sets mode: +v ilbot3

[01:52] *** lichtkind left
[01:55] *** astj left
[01:55] *** raschipi left
[01:56] *** astj joined
[01:57] *** lucs_ is now known as lucs

[01:59] *** dj_goku left
[01:59] *** dj_goku joined
[02:00] *** astj left
[02:03] *** astj joined
[02:04] *** zengargo1le is now known as zengargoyle

[02:05] *** astj left
[02:05] *** astj joined
[02:06] *** astj left
[02:06] *** astj joined
[02:14] *** llfourn_ is now known as llfourn

[02:17] *** pilne joined
[02:26] *** cog_ left
[02:28] *** sufrostico left
[02:29] *** jaldhar_ is now known as jaldhar

[02:38] <jaldhar> Given two lists of characters of equal length how do I get a count of characters which are the identical and in the same position in both lists?  E.g. 'abcd' and 'adcb' should give 2.

[02:39] <jaldhar> It's easy enough to do with a loop but is there a faster/more concise way?  I'm thinking something with reduction operators maybe?

[02:50] *** bwisti left
[02:51] <colomon> m: say <a b c d> >>eq<< <a d c b>

[02:51] <camelia> rakudo-moar 9658dd: OUTPUT: «(True False True False)␤»

[02:52] <colomon> m: say (<a b c d> >>eq<< <a d c b>).map(*.Int)

[02:52] <camelia> rakudo-moar 9658dd: OUTPUT: «(1 0 1 0)␤»

[02:52] <colomon> m: say [+] (<a b c d> >>eq<< <a d c b>).map(*.Int)

[02:52] <camelia> rakudo-moar 9658dd: OUTPUT: «2␤»

[02:52] <colomon> m: say [+] (<a b c d> >>eq<< <a d c d>).map(*.Int)

[02:52] <camelia> rakudo-moar 9658dd: OUTPUT: «3␤»

[02:52] <colomon> dunno that that’s the best approach

[02:53] <zengargoyle> m: say ('abcd'.comb Zeq 'adcb'.comb).grep(*.so, :k)

[02:53] <camelia> rakudo-moar 9658dd: OUTPUT: «(0 2)␤»

[02:53] <yoleaux> 27 Jul 2017 21:43Z <thundergnat> zengargoyle: The evolution one isn't one I wrote. I think that one was mostly grondilu and TimToady. Not too many people say my code is formatted too nicely so that was a big clue :-)

[02:53] <lookatme> m: say <a b c d> Zeq <a d c b>

[02:53] <camelia> rakudo-moar 9658dd: OUTPUT: «(True False True False)␤»

[02:53] <colomon> m: say [+] (<a b c d> >>eq<< <a d c d>)

[02:53] <camelia> rakudo-moar 9658dd: OUTPUT: «3␤»

[02:53] <colomon> m: say [+] (<a b c d> >>eq<< <a d c b>)

[02:53] <camelia> rakudo-moar 9658dd: OUTPUT: «2␤»

[02:54] <jaldhar> colomon: cool and very interesting!  Thanks.

[02:55] <colomon> Zeq might be a better choice than >>eq<< … I’m afraid I don’t really know which is more efficient at the moment.

[02:55] <colomon> m: say [+] (<a b c d> Zeq <a d c b>)

[02:55] <camelia> rakudo-moar 9658dd: OUTPUT: «2␤»

[02:55] *** bwisti joined
[02:55] <zengargoyle> m: say ('abcd'.comb Zeq 'adcb'.comb).grep(*.so).elems

[02:55] <camelia> rakudo-moar 9658dd: OUTPUT: «2␤»

[02:58] *** noganex_ joined
[02:58] <jaldhar> colomon: it seems both >>+<< and Zeq perform about equally in rakudo 2017.07 atleast for my arrays which aren't very large.

[02:59] <colomon> jaldhar++ # testing performance is good

[02:59] <zengargoyle> m: say [Zeq] ('abcd','adcb')>>.comb

[02:59] <camelia> rakudo-moar 9658dd: OUTPUT: «(True False True False)␤»

[03:00] *** noganex left
[03:05] <zengargoyle> m: say ([~^] ('abcd','adcb')).comb>>.ord.grep(!*,:k)

[03:05] <camelia> rakudo-moar 9658dd: OUTPUT: «(0 2)␤»

[03:06] <zengargoyle> depending on data, string xor and counting 0's might work. :)

[03:10] <jaldhar> to clarify these are arrays of characters not strings though I suppose I could join them and then do the xor.

[03:12] <zengargoyle> i'm just goofing/golfing.  if you already have array of chars, eq is probably best.  guess i didn't read the original question closely enough. :)

[03:14] <zengargoyle> buggable: eco leven

[03:14] <buggable> zengargoyle, Found 2 results: Text::Levenshtein, Text::Levenshtein::Damerau. See https://modules.perl6.org/#q=leven

[03:15] <zengargoyle> there's a module that does text 'difference' calculations that i haven't used...

[03:16] <jaldhar> zengargoyle: btw I'm finally looking at that rosettacode example you mentioned earlier.  I don't understand everything it is doing but I'm pleased to see I came up with the same general approach.

[03:18] <zengargoyle> jaldhar: i understand after i figured out the loop thing and it's pretty sweet code written by somebody with some p6 skills.  it's quite nice.

[03:19] <jaldhar> agreed

[03:26] *** pompomcrab joined
[03:29] <zengargoyle> jaldhar: oh, somebody else mentioned the code originally, i just looked out of curiosity.

[03:32] *** Cabanossi left
[03:34] *** Cabanossi joined
[03:40] *** coetry joined
[03:42] *** pharv joined
[03:47] <coetry> anyone know of anyone working on a rust backend / implementation of perl6?

[03:47] <coetry> timotimo: haha i checked the irc logs and see that ya'll had some fun with my name :), made me smile!

[03:56] *** pharv1 joined
[03:56] *** pharv1 left
[04:00] <jeromelanteri> someone use Git::Wrapper ? if i just want to send command git ls-remote https://url from Git::Wrapper, how to do that ? and then how to get back outputs ?

[04:00] <jeromelanteri> https://github.com/nicqrocks/p6-Git-Wrapper

[04:00] <jeromelanteri> doc and example are minimalist.

[04:01] *** MasterDuke joined
[04:05] *** astj left
[04:09] <zengargoyle> i'd think $git.run('ls-remote', $url);

[04:11] <zengargoyle> returns @out of lines of the command given.

[04:14] <zengargoyle> perl6 -e 'use Git::Wrapper; .say for Git::Wrapper.new(gitdir=>"p6-Search-Dict").run: "ls-remote", "https://github.com/zengargoyle/p6-Search-Dict.git"; '

[04:15] <zengargoyle> does what i'd expect.  seems you must supply a gitdir argument which is a bit lame but understandable.  guess you need a git repository somewhere to actually use the wrapper.

[04:17] <jaldhar> Before I submit my module for inclusion in the ecosystem I just want to clarify one thing.  If my module is dual-licensed, Artistic or GPL2 and above, I include this in META6.json

[04:17] <jaldhar>   "license" : [

[04:17] <jaldhar>     "Artistic-2.0",

[04:17] <jaldhar>     "GPL-2.0+"

[04:17] <jaldhar>   ],

[04:17] <jaldhar> is that correct?

[04:17] <zengargoyle> but... gitdir=>'.' also works in this case even when '.' is not a gitdir.... :)

[04:20] *** astj joined
[04:32] *** Todd_ joined
[04:33] <Todd_> Hi!  I am trying to convert a p5 program to p6.  what do I use in place of `LWP::UserAgent`.  I use it for downloading files from the web

[04:34] <Todd_> I need to be able to pass the following to the web page: Caller, Host, UserAgent, Referer, Cookies

[04:34] *** raiph joined
[04:37] <jaldhar> Todd: there's a perl6 port of LWP::Simple you can install with zef.  Haven't tried it myself.

[04:38] <Todd_> I fpund it but could not find the directions

[04:40] <jaldhar> Todd: then there is WWW and HTTP::UserAgent which seem to be better documented.  I haven't tried those either but the latter looks like a port of LWP.

[04:41] *** pharv left
[04:46] <Todd_> someone wrote a how to over on the mailing list.  I will dig it out as I think it has the directions.  Thank you for www and useragent!  bye bye

[04:46] *** Todd_ left
[04:46] <skids> .oO(aww no Perl6 page on http://en.illogicopedia.org)

[04:46] <jeromelanteri> zengargoyle, thank you

[04:49] <zengargoyle> jeromelanteri: just noticed that the nicqrocks url for Git::Wrapper you gave is a fork of perlpilot's code.  don't know if this matters or there are any differences... just FYI 

[04:52] <jeromelanteri> zengargoyle, ho ok... but i install module from zef, so it should instal the one you was talking about.

[04:54] <zengargoyle> looks like zef returns the niqrocks version... maybe niqrocks took over development or something... no big deal.

[04:56] <zengargoyle> i just noticed that one can't create an issue on the niqrocks fork so i can't complain about the gitdir thing. :P

[04:56] *** skids left
[04:58] *** pharv joined
[04:58] <perigrin> m: my @a = <a a c>; my @b = <a b>; say (@a (&) @b) / (@a | @b);

[04:58] <camelia> rakudo-moar 9658dd: OUTPUT: «any(0.333333, 0.5)␤»

[04:59] <perigrin> m: my @a = <a a c>; my @b = <a b>; say (@a (&) @b) / (@a (|) @b);

[04:59] <camelia> rakudo-moar 9658dd: OUTPUT: «0.333333␤»

[05:05] *** xtreak joined
[05:09] *** ufobat joined
[05:11] *** xtreak left
[05:11] *** xtreak joined
[05:16] *** xtreak_ joined
[05:16] *** xtreak left
[05:19] *** xtreak_ left
[05:19] *** xtreak joined
[05:29] *** khw left
[05:31] *** xtreak left
[05:33] *** coetry left
[05:34] *** coetry joined
[05:42] *** coetry left
[05:43] *** coetry joined
[05:47] <jeromelanteri> zengargoyle, from Git::Wrapper.new(gitdir => '.'); it said SORRY! STable conflict detected during deserialization. (so the good news is that the conflict is stable... :) )

[05:47] *** Cabanossi left
[05:48] <jeromelanteri> no.. it is directly at use Git::Wrapper time...

[05:49] *** Cabanossi joined
[05:49] <jeromelanteri> it also said that: Probable attempt to load two modules that can not be loaded together.

[05:50] *** pompomcrab left
[05:50] <jeromelanteri> i have use Prompt::Gruff::Export and use Term::Choose loaded.

[05:51] *** cpage_ joined
[05:52] *** coetry left
[05:52] *** coetry joined
[05:53] *** pharv left
[05:56] *** silug left
[05:56] <jeromelanteri> if i do a little file just for add modules and see.. it run.

[05:57] <jeromelanteri> but if i comment use Git::Wrapper from my programm... it works. So it is strange, how is it possible to not be able to use two modules together ? and how to know why precisely there is a STable conflict ?

[05:57] <jeromelanteri> if i know that, maybe i should add en issue for the faulted module who can not have a life with other.

[06:01] *** coetry left
[06:01] *** coetry_ joined
[06:02] <jeromelanteri> conflict seems to be (maybe) with Prompt::Gruff::Export

[06:03] *** Miro_ joined
[06:03] <zengargoyle> perl6 -e 'use Term::Choose; use Prompt::Gruff::Export; use Git::Wrapper;  .say for Git::Wrapper.new(gitdir=>".").run: "ls-remote", "https://github.com/zengargoyle/p6-Search-Dict.git";'

[06:03] <zengargoyle> still works for me....

[06:05] <zengargoyle> so all three can be use'd and at least Git::Wrapper works in that case.

[06:05] *** pilne left
[06:11] <zengargoyle> maybe a version/os thing, i'd suspect Term::Choose because of ncursed and nativall type stuff.  the Prompt and Git::Wrapper seem mostly generic....

[06:12] * zengargoyle lol at s/ncursed/ncurses/

[06:13] <zengargoyle> it will probably take somebody who knows what STable could mean and looking at your code.

[06:16] *** Miro_ left
[06:16] <zengargoyle> perl6 -e 'use Term::Choose; use Prompt::Gruff::Export; use Git::Wrapper;  .say for Git::Wrapper.new(gitdir=>".").run: "ls-remote", "https://github.com/zengargoyle/p6-Search-Dict.git"; say my $chosen = choose( <1 2 3>, :layout(2) );say prompt-for("Enter name (required): ");'

[06:17] *** andrzejku joined
[06:17] <zengargoyle> simple test of all 3 modules works for me... 

[06:19] *** coetry_ left
[06:20] *** coetry_ joined
[06:20] <jeromelanteri> zengargoyle, same for me

[06:21] <jeromelanteri> only my code failed. but use lib is call from a module in do. who are introduced from own lib (use lib 'my path")

[06:23] <jeromelanteri> an other one different question, i use vim and TagBar plugin, but still no have tags list... i do install universal-ctags in place of ctags for try to resolve, but not works to. How to resolve this problem (if someone use vim and TagBar and know) ?

[06:24] <jeromelanteri> zengargoyle, i see that if i add this Git::Wrapper lib from main file (.pl6, not module file .pm6) no error... but i need it in the module file...

[06:25] *** xtreak joined
[06:26] *** rindolf joined
[06:28] *** wamba joined
[06:29] *** xtreak_ joined
[06:30] *** mr-foobar joined
[06:30] *** coetry_ left
[06:31] *** coetry joined
[06:32] *** xtreak left
[06:33] *** cpage_ left
[06:34] *** andrzejku left
[06:35] *** cpage_ joined
[06:35] *** xtreak_ left
[06:39] <jeromelanteri> same problem if i do use Git::Wrapper from a file .pm6 who contain a class

[06:39] <zengargoyle> i'd say put your code on github or somewhere so somebody smarter than me can look.  if it is really a problem with 'use lib' and use from module and conflict errors.... it might be something weird.

[06:40] <jeromelanteri> ok

[06:40] *** cpage_ left
[06:40] *** coetry left
[06:41] *** coetry_ joined
[06:41] <zengargoyle> STable conflict detected during deserialization -- is a weird internally looking error that is less than helpful :)

[06:42] <zengargoyle> at least i've never seen it before and have no clue what it could mean.

[06:42] <jeromelanteri> IDK, my level is to bad (start to learn perl6 not one week ago)

[06:43] <jeromelanteri> so it should also be something i done wrong. I 'm going to create a public bitbucket repo and git push this

[06:44] *** andrzejku joined
[06:47] *** Cabanossi left
[06:49] *** Cabanossi joined
[06:49] *** coetry_ left
[06:49] <lookatme> STable, I remember this is a thing in NQP 

[06:50] *** cpage left
[06:57] *** pecastro left
[07:03] *** darutoko joined
[07:04] *** parv joined
[07:05] *** domidumont joined
[07:09] *** rindolf left
[07:11] *** domidumont left
[07:12] *** domidumont joined
[07:16] *** abraxxa joined
[07:19] *** nadim joined
[07:20] *** miro_ joined
[07:27] *** rindolf joined
[07:30] <jeromelanteri> https://bitbucket.org/jerome___/vimplugger/src

[07:30] <jeromelanteri> my bitbucket (git) public repo for this little code

[07:32] *** lowbro joined
[07:32] *** lowbro left
[07:32] *** lowbro joined
[07:33] *** geekosaur left
[07:33] <jeromelanteri> NQP ==> nOOb Questions Protocol,correct ?

[07:33] *** eviltwin_b joined
[07:33] *** eviltwin_b is now known as geekosaur

[07:33] *** geekosaur left
[07:34] <lookatme> nqp: nqp::say("123");

[07:34] <camelia> nqp-moarvm: OUTPUT: «123␤»

[07:35] *** geekosaur joined
[07:35] *** miro_ left
[07:35] <lookatme> Not Quite Perl

[07:37] <lookatme> nqp: nqp::if(1 == 3, nqp::say("123"), nqp::say("453"));

[07:37] <camelia> nqp-moarvm: OUTPUT: «453␤»

[07:39] *** pecastro joined
[07:39] <lookatme> jeromelanteri, How to use your script ?

[07:40] <jeromelanteri> lookatme, actually, just start ./VimPlugger.pl6

[07:40] <lookatme> ok

[07:40] *** geekosaur left
[07:41] <jeromelanteri> if you have libs i use installed, then it should start by a menu when this error gone

[07:41] <jeromelanteri> if you comment use Git::Wrapper from check.pm6, it should start well

[07:42] *** geekosaur joined
[07:42] <lookatme> OK, I will try

[07:42] <jeromelanteri> thank you

[07:43] *** geekosaur left
[07:44] *** geekosaur joined
[07:44] *** andrzejku left
[07:47] *** Cabanossi left
[07:47] <lookatme> There is some error, undeclared routine: yaml ?

[07:47] <lookatme> jeromelanteri

[07:48] <zengargoyle> jeromelanteri: first peek.  it will get much easier if you use App::Mi6 or something and create a standard module/distribution structure.  for example, you're code won't work for anybody because 'use lib "/home/jerome/PROGRAMATION/....";

[07:49] *** Cabanossi joined
[07:49] <lookatme> I change it to  "."

[07:51] <jeromelanteri> yes, i didn't know that, thank you

[07:51] <jeromelanteri> i have to read/learn about App::Mi6

[07:52] <lookatme> What is yaml ? 

[07:53] <jeromelanteri> a kind of yaml parser

[07:55] <lookatme> The code in the bitbucket is not correct

[07:56] <zengargoyle> lookatme: it's dump/load not yaml.dump/yaml.load.

[07:56] <lookatme> I delete all `yaml.` in the pm file, and all thing working expect that error you mentioned

[07:56] <lookatme> yeah

[07:56] *** gfldex_ is now known as gfldex

[07:57] <jeromelanteri> lookatme, ho really... let me check this.

[07:57] <lookatme> s/expect/except/

[07:58] *** zakharyas joined
[07:59] <zengargoyle> there are some 'has method' in datas

[08:00] <samcv> huggable, deb

[08:00] <huggable> samcv, CentOS, Debian, Fedora and Ubuntu Rakudo packages: https://github.com/nxadm/rakudo-pkg/releases

[08:00] *** espadrine joined
[08:01] <jeromelanteri> zengargoyle, it should not in a class ?

[08:01] <jeromelanteri> oh yes...

[08:02] <zengargoyle> m: check

[08:02] <camelia> rakudo-moar 9658dd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    check used at line 1. Did you mean 'CHECK'?␤␤»

[08:03] <jeromelanteri> lookatme, https://github.com/yaml/yaml-perl6/blob/master/README.md

[08:04] *** zakharyas left
[08:06] <zengargoyle> jeromelanteri: on first look, you're trying too hard. :)  lots of my sub and our sub and is export(:MANDATORY) and when "$answer" that looks like more than you probably need to actually do. :)

[08:06] *** zakharyas joined
[08:07] <lookatme> Yeah, I got the error 

[08:07] <lookatme> STable conflict detected during deserialization.

[08:07] <lookatme> It always report this error, though I comment that use Git::Wrapper.

[08:09] <jeromelanteri> zengargoyle, wow but... i done it.

[08:10] <jeromelanteri> zengargoyle, maybe it seems to hard because the script code is not shiny... i used to first do something, then rewrite the code (and sometimes redesign all the design pattern after).

[08:11] *** TimToady left
[08:11] <jeromelanteri> lookatme, not for me, if Git::Wrapper is commented, no more error on that.

[08:13] <jeromelanteri> do retry it three times, i confirm, if i comment Git::Wrapper from my side, it works good.

[08:13] <zengargoyle> jeromelanteri: yeah, i see that in places.. :)   how far did you get before you got the error?  like... which parts did work.

[08:14] <zengargoyle> m: add

[08:14] <camelia> rakudo-moar 9658dd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    add used at line 1. Did you mean 'dd'?␤␤»

[08:14] *** araujo left
[08:14] <zengargoyle> m: install

[08:14] <camelia> rakudo-moar 9658dd: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    install used at line 1␤␤»

[08:14] <jeromelanteri> zengargoyle, just when i try to add Git wrapper from check.pm6 file in git_repos_exist, and in same time in datas method install_repos_from

[08:16] <jeromelanteri> zengargoyle, add and install are modules shared by "our" i choosed to do like this for clarity and be able to have functions with same names in different modules... then because of "our" in fucntion declaration modules, i can call them by the first module name :: function

[08:17] *** Cabanossi left
[08:17] <jeromelanteri> fomr a kind_of.pm6 file, unit module kind_off; our sub blabla is export(:MANDATORY) {...} from an other file: use kind_of; kind_of::blabla;

[08:18] *** TimToady joined
[08:18] <jeromelanteri> normaly no need to put use kind_of :MAN?DATORY; the doc said :MANDATORY is automatically exported.

[08:18] <jeromelanteri> by defqault

[08:18] <jeromelanteri> default

[08:18] <jeromelanteri> and that's it.

[08:18] <zengargoyle> jeromelanteri: assuming most code works, i'm thinking our and symbols and same name stuff causes collisions somewhere.

[08:18] <lookatme> What is $datas, I found this in some module reference module datas

[08:19] <jeromelanteri> zengargoyle, ho yes, that's should be a reason, why not... IDK

[08:19] <lookatme> k

[08:19] *** Cabanossi joined
[08:20] <jeromelanteri> from vim /$datas ==> not find. I think you mean $.datas ?

[08:20] <zengargoyle> for me.... it should be VimPlugins::datas, VimPlugins::install, VimPlugins::add, etc.  and maybe VimPlugins::add::somefunc()  before trying to make it look easy.

[08:20] *** nadim left
[08:21] <zengargoyle> once it works, you can make it easy to use. :)

[08:21] <jeromelanteri> this is a class public variable with attributes. It contain $yaml datas parsed from yaml file

[08:21] <lookatme> I don't see where $datas is create

[08:21] <lookatme> OH..

[08:21] <jeromelanteri> zengargoyle, i not well understand. Do you mean at import time ?

[08:22] <jeromelanteri> lookatme, ligne 8

[08:23] <jeromelanteri> and ligne 30 show you the yaml parse

[08:23] <jeromelanteri> i do initialize things at method TWEAK

[08:23] <jeromelanteri> i not used submethod BUILD

[08:24] <lookatme> Oh, that's my mistake

[08:25] *** nadim joined
[08:25] <jeromelanteri> I'm sorry also, i not add coments... i didn't know this to be shared also... i can add some comments if you want.

[08:26] <jeromelanteri> (but with my poor english... not sure it will not be more confuse... :) 

[08:26] <jeromelanteri> or more clear

[08:27] <lookatme> Oh, it said YAML.load not implement ?

[08:27] <jeromelanteri> lookatme, yes sorry, my fault to not precise at first commit in thge README file to NOT use the zef install YAML

[08:28] <lookatme> OH, so how to ?

[08:28] <jeromelanteri> but instead use zef install from git yaml-perl6 ... i do change the README actually

[08:28] <jeromelanteri> waiting, i copy paste

[08:28] <jeromelanteri> lookatme, zef install https://github.com/yaml/yaml-perl6.git

[08:29] <jeromelanteri> (remove the other one first)

[08:29] *** cpage joined
[08:31] <jeromelanteri> then also, if Git::Wrapper is use from main file... no error ! very strange

[08:32] <jeromelanteri> nut maybe zengargoyle find the idea... it should be my modules who make conflmict because of "our"

[08:32] <jeromelanteri> i also not well understand how to try to fix it.

[08:32] <jeromelanteri> and keep the separat call for module: name_of_module::function

[08:34] <jeromelanteri> also, i tryed to use the perl6-debug-m for rack deeply the problem... serve nothing, the debuger doesn't works on this case (or i miss the point to make it work on that error)

[08:34] <jeromelanteri> for track

[08:39] *** MasterDuke left
[08:41] *** eythian left
[08:42] *** eythian joined
[08:44] <lookatme> Cannot locate native library 'libyaml.so': /lib64/libyaml.so: file too short

[08:45] <zengargoyle> lookatme: on arch?

[08:45] <lookatme> fedora

[08:45] <zengargoyle> cat /lib64/libyaml.so

[08:45] <lookatme> INPUT(libyaml-0.so.2)

[08:46] <zengargoyle> like arch, fedora evidently uses `ld` magick which doesn't work with nativecall.....

[08:47] <lookatme> Oh, How to fix that ? create a symbol link ?

[08:47] <zengargoyle> you could rm /lib64/libyaml.so and (cd /lib64; ln -s libyaml-0.so.2 libyaml.so) or something....

[08:48] *** Doe joined
[08:48] <lookatme> Oh, I wonder why they not using a symbol link 

[08:48] *** Doe left
[08:48] <zengargoyle> or edit look at module and edit to use a libyaml-0.so.2....

[08:49] <zengargoyle> it's like a known issue that has no good solution yet i think...

[08:49] <zengargoyle> why fedora/arch does this insane thing i have no idea. :P

[08:49] <lookatme> Hmm

[08:50] *** cpage left
[08:52] <jeromelanteri> lookatme, at one point, i had this problem and created a environment variable (but the module asked for that) PERL6_NCURSEs_LIB

[08:52] <lookatme> OH

[08:53] <jeromelanteri> zengargoyle, look if there is the way of variable env export

[08:53] <jeromelanteri> i'm from archlinux

[08:53] *** robertle joined
[08:53] <zengargoyle> native call.  is native('libyaml.so')....  some librarys make that a sub or environment variable and do magic.

[08:55] <zengargoyle> so if module author thought to add env override maybe you can change it, otherwise edit code or make symlink.

[08:55] <jeromelanteri> zengargoyle, if you make symlink, it should works, but also you shoumd break your distro...

[08:55] <jeromelanteri> should

[08:55] *** cpage joined
[08:56] <jeromelanteri> at package time call from packet manager, it should cry

[08:56] <lookatme> Oh, it's working now

[08:57] <zengargoyle> well, i've moved and edited a bunch of files, and even moved the 'use Git::Wrapper;' in datas down to inside the single function that uses it....  it bonks if it's there, and works otherwise (i guess not knowing exactly what it's supped to do but getting an ncurses menu thing.... :) )

[08:57] <lookatme> Which module conflict with Git::Wrapper ?

[08:57] <jeromelanteri> mine maybe...

[08:58] <zengargoyle> jeromelanteri: i've used unix for 30 years... :) i can *make* it work.

[08:58] <jeromelanteri> in fact, if i import Git::Wrapper from main file, it works... it doesn't works only when import from pm6 files

[08:59] <jeromelanteri> zengargoyle, you better than me, i make use it from 32 years, and sometimes i loose again some hairs...

[08:59] <zengargoyle> perl6 on the other hand...

[09:00] <jeromelanteri> did you try to run debuger ?

[09:01] <jeromelanteri> maybe you can see some datas make sens for you (not for me, but maybe for you)

[09:01] <jeromelanteri> or strace ?

[09:01] <zengargoyle> anyway, it's 2am here and i'm going to bed for now.  i'll revisit tomorrow.

[09:02] <jeromelanteri> zengargoyle, thank you for try to help me and have a good night man.

[09:02] *** astj left
[09:02] <zengargoyle> hopefully somebody figures it out...

[09:02] *** astj joined
[09:02] *** astj left
[09:03] *** astj joined
[09:03] *** Cabanossi left
[09:03] <lookatme> good night! zengargoyle 

[09:04] *** Cabanossi joined
[09:08] <jeromelanteri> lookatme, i make a break pause... will be AFK... and i will take time for reflection then, i will be back with fresh ideas. It should be my module callas who make problems... it's possible i think.

[09:13] <lookatme> oik

[09:13] <lookatme> ok

[09:22] *** jnthn_ is now known as jnthn

[09:33] *** lookatme left
[09:35] <jeromelanteri> by the way, remove our declaration of functions from modules and cal by &group instead of add::group (and same for all other) doesn't fix the problem... so it should be a module Git::Wrapper code problem (maybe).

[09:37] <jeromelanteri> i created a branch git_wrapper also...

[09:38] <jeromelanteri> a commit show that not fix problem... now i go back next commit to decclaration with our and use module name for call functions

[09:39] *** Aaronepower left
[09:51] <jeromelanteri> i also asked on archlinux channel why do use magic links instead of symlink... approximative answer was that it get more control, but no one actually know exactly what this control is and why is it better...

[09:58] *** parv left
[10:02] *** Cabanossi left
[10:04] *** Cabanossi joined
[10:06] *** andreoss joined
[10:07] *** Geth joined
[10:21] <nadim> hi, I am requiring a module which is not installed, its part of my development, I tried use lib '.' but I get this error 'use lib' may not be pre-compiled

[10:25] <nadim> I am trying a (try require ::Data::Dump::Tree::LayFlat) but that gives me run time error: No such symbol 'Data::Dump::Tree::LayFlat'

[10:26] <jeromelanteri> nadim, could you call a simple module lib from your code ? does it works ?

[10:27] <jeromelanteri> did you also declare your module from your module file by unit module name_of_your_module (same as file_name without .pm6)

[10:28] <nadim> Yes, but let me nopaste the code, it's simpler

[10:28] <jeromelanteri> yes

[10:35] <nadim> jeromelanteri: https://nopaste.linux-dev.org/?1160079

[10:39] <jeromelanteri> nadim, you not use is export for sub function, and then i'm not sure the way you declare the module can works..  you can use lib from main file (it should share libs for other), then call unit module LayFlat (name of your file). Not sure for the last reqquest... also, not sure but files extentions convention is .pm6

[10:39] <jeromelanteri> also, i do use is export(:MANDATORY): sub lay_flat is export(:MANDATORY) { ... }

[10:40] <nadim> I believe the problem is finding the module, the error doe not seem to indicate we got that far. 

[10:40] <jeromelanteri> if u declare use lib 'lib', it goes for search lib from ./lib/ ...

[10:40] <nadim> that's where the module is

[10:41] <jeromelanteri> nadim, good. you should wait for an other one know better... i'm a noob actualy...

[10:41] <nadim> also, using .pm works fine, although I should change that some day

[10:42] <jeromelanteri> ok

[10:42] <nadim> there are 3 Gods, 10 titans, 300 noobs and a whole bunch clueless, you still are in quite ok cathegory ;)

[10:43] *** Aaronepower joined
[10:43] <nadim> I am requiring another module but that one is installed, I just want to test without having to install a, potentially broken, module all the time

[10:43] <jeromelanteri> nadim :) not sure... my frustration is to not be able to help you more by the fact...

[10:44] <jeromelanteri> i'm waiting to see what should be yyour solution for learn more around that to.

[10:44] <nadim> well, we'll both eventually learn something when one of the titans wakes up

[10:49] <jeromelanteri> from sources of module, they add "use v6;"

[10:49] <nadim> ok

[10:50] *** Zoffix joined
[10:50] <nadim> hmm, it was a good idea to try to installll too it seem as I found another install error!

[10:50] <Zoffix> nadim: you can't precompile `use lib`; so you eaither need a `no precompile` or put it into your script instead of the module

[10:51] <Zoffix> nadim: as for require. Is that sub exported?

[10:51] <Zoffix> Use ::('Data::Dump::Tree::LayFlat::EXPORT::DEFAULT::&lay_flat')

[10:52] <nadim> no it was not exported, adding that

[10:52] <Zoffix> Right without an export or `our` it's not accessible from the outside

[10:55] <nadim> I run p6 via an alias, I thought it would take care of things. alias p6='perl6 -Ilib,t'

[10:55] <timotimo> setting lib to t? that's ... an interesting decision

[10:56] <nadim> old habit when test libs end up in t

[10:57] <nadim> they should probably be somewhere else, maybe

[10:57] <Zoffix> nadim: it takes care of adding lib and t to module search paths, not to what symbols are visible from outside the module

[10:58] *** zakharyas left
[10:59] <nadim> ok, bu the error, No such symbol 'Data::Dump::Tree::LayFlat', happens oin the require line, not when I am using a symbol from that module. https://nopaste.linux-dev.org/?1160079

[10:59] *** Zoffix left
[11:01] *** Cabanossi left
[11:04] *** TEttinger left
[11:04] *** Cabanossi joined
[11:04] <llfourn> nadim: why's there a :: before Data?

[11:05] <llfourn> try require Data::Dump::Tree::LayFlat # <-- should be?

[11:08] <nadim> llfourn: if I recall properly, it was from an example I saw. I require Terminal::ANSIColor like that and it works. I tried without the :: and got no better result

[11:08] <llfourn> hmm weird I've never seen that before

[11:09] <llfourn> is there some reason you're not doing try require Data::Dump::Tree::LayFlat <&lay_flat>; nand the njust pushing &lay_flat?

[11:09] <llfourn> *and then

[11:10] <llfourn> hmm but you say the error happens on the require line...

[11:10] <nadim> no special reason, that certainly looks neater. but right now the problem is not with the sub, even if I do not use lay_flat, i still get an error loading the module

[11:10] <llfourn> it could easily be a bug

[11:10] <nadim> I hope not :)

[11:10] <llfourn> the require implementation is pretty dodgey in that area

[11:11] <llfourn> it does some dynamic lookup to get the class it's meant to be returning

[11:11] <llfourn> and that sounds like where the error is coming from

[11:11] <llfourn> I've been meaning to fix it...

[11:11] <nadim> Do it, do it ;)

[11:12] <nadim> right now I use this: (try require ::Data::Dump::Tree::LayFlat:file('Data/Dump/Tree/LayFlat.pm')) !=== Nil

[11:12] <llfourn> can you give the exact reproduction steps and send to [email@hidden.address]
[11:12] *** committable6 left
[11:12] *** greppable6 left
[11:12] *** evalable6 left
[11:12] *** bisectable6 left
[11:12] *** statisfiable6 left
[11:12] *** unicodable6 left
[11:12] *** benchable6 left
[11:13] <nadim> so I am giving the path too. I do not "use lib" as it is not necessary. I found out by giving a wrong name and I got an error message showing me the libs paths, they were fine

[11:13] <nadim> llfourn: of course I can do that :)

[11:13] <llfourn> does it happen if you just do: require Data::Dump::Tree::LayFlat

[11:13] <nadim> that's how I started, same error

[11:14] <nadim> require works for installed modules

[11:14] <llfourn> well, if everything is set out like you show it's probably a bug I *might* have a fix for

[11:14] <nadim> this one is part of the development not installed yet

[11:14] <nadim> let's see if I can golf this

[11:15] <llfourn> nadim: that would help :)

[11:19] *** cog_ joined
[11:21] <nadim> llfourn: golfed it works :) let me break it again ;)

[11:22] <llfourn> it might be something with the many :: deep name

[11:24] <jeromelanteri> well... let's learn why STable conflict happen when i use Git::Wrapper module then ? (if you want)

[11:24] <jeromelanteri> https://bitbucket.org/jerome___/vimplugger/src/258cb34cefe6b4d394c00ff586bb52ee277a1220?at=git_wrapper

[11:26] <jeromelanteri> i'm burning sage and make incantations at this time...

[11:36] <nadim> llfourn: no golfed broken version yet but the working code from a script, when called from a method, generates an error. 

[11:36] *** mr-fooba_ joined
[11:37] *** mr-foobar left
[11:41] <llfourn> nadim: so it sounds really tricky to reproduce which supports my conclusion it's related to the problem I suspected

[11:42] <llfourn> it would be very handy to have a golfed version so we can turn it into a test though

[11:45] *** mr-fooba_ left
[11:46] *** mr-foobar joined
[11:47] <jaldhar> This is strange

[11:48] <jaldhar> Enabled extracting backends [git path tar p5tar unzip] don't understand /home/jaldhar/.zef/tmp/Algorithm-DawkinsWeasel

[11:48] <jaldhar> You may need to configure one of the following backends, or install its underlying software - [psunzip]

[11:48] <jaldhar> but I have unzip in my path.  What gives?

[11:49] <jaldhar> Is my module (Algorithm::DawkinsWeasel) set up wrong?

[11:49] <jaldhar> or is zef not configured properly?  If so where do I configure it?  (homemade install of rakudo 2017.07 in ~/.perl6)

[11:51] <llfourn> jaldhar: I'm pretty sure it's meant to find those automatically

[11:52] <llfourn> I've never used zef with anything other than git

[11:52] <nadim> llfourn: trying to wrap things up in the golfed version but the darn things continues to work!

[11:53] <llfourn> ugexe: what do you think wrt jaldhar's problem?

[11:53] <llfourn> nadim: damn that's the worst

[11:53] <llfourn> I hate it when you can't golf a rakudo bug

[11:54] *** abraxxa left
[11:59] *** committable6 joined
[11:59] *** quotable6 joined
[11:59] *** bloatable6 joined
[11:59] *** ChanServ sets mode: +v committable6

[11:59] *** ChanServ sets mode: +v quotable6

[11:59] *** ChanServ sets mode: +v bloatable6

[11:59] *** bisectable6 joined
[11:59] *** greppable6 joined
[11:59] *** evalable6 joined
[11:59] *** coverable6 joined
[11:59] *** ChanServ sets mode: +v bisectable6

[11:59] *** ChanServ sets mode: +v greppable6

[11:59] *** ChanServ sets mode: +v evalable6

[11:59] *** ChanServ sets mode: +v coverable6

[11:59] *** unicodable6 joined
[11:59] *** ChanServ sets mode: +v unicodable6

[11:59] *** benchable6 joined
[11:59] *** ChanServ sets mode: +v benchable6

[11:59] *** statisfiable6 joined
[11:59] *** ChanServ sets mode: +v statisfiable6

[12:02] *** Cabanossi left
[12:02] *** ufobat left
[12:04] *** Cabanossi joined
[12:08] *** amalia___ joined
[12:17] *** bdmatatu joined
[12:21] <bdmatatu> I am trying to eval code and save the context, like REPL::repl-loop.  It almost works but not quite: https://git.io/v7c6L

[12:35] *** asdaddqwqe joined
[12:35] <asdaddqwqe> hello for all

[12:35] <asdaddqwqe> I am newcomer in Perl

[12:35] <nadim> welcome

[12:36] <asdaddqwqe> thanks

[12:36] <asdaddqwqe> what for this irc channel?

[12:36] <moritz> general questions around Perl 6

[12:37] <moritz> (and specific questions as well :-)

[12:37] <asdaddqwqe> mmm

[12:37] <asdaddqwqe> good

[12:37] <asdaddqwqe> will be know

[12:39] *** zakharyas joined
[12:44] *** Swey_Hey joined
[12:44] *** mcmillhj joined
[12:45] *** mr-foobar left
[12:46] <asdaddqwqe> guys, are you like football?

[12:47] <asdaddqwqe> fantasy premier league 

[12:51] *** asdaddqwqe left
[12:52] *** perlpilot joined
[12:52] <perlpilot> blah

[12:56] <perlpilot> Zoffix++

[13:04] *** itaipu joined
[13:05] *** jaldhar left
[13:09] <awwaiid> bdmatatu: I would like it if what you have in your gist (or a variant) worked, but the REPL is not fully de-magic'd in ways I don't quite understand

[13:09] <awwaiid> bdmatatu: However, I have constructed a devious way of _simulating_ the same thing through constructing nested scopes for subsequent evals

[13:09] <bdmatatu> I think I just got it actually -- adding :interactive(1) seems to fix it

[13:10] <awwaiid> bdmatatu: https://github.com/awwaiid/p6-lrep/blob/master/lib/LREP.pm6#L35

[13:10] <awwaiid> bdmatatu: ah very good!

[13:10] <awwaiid> On my very-deep-todo-stack is to come back around to some rakudo repl work :)

[13:14] <awwaiid> I would rather the setup you had to be only creating an instance of REPL and then invoking .repl-eval, without any of the other things you had to do

[13:14] <awwaiid> and _especially_ it shouldn't depend on nqp

[13:15] <bdmatatu> Sounds good -- this is the application btw, have been trying to write a jupyter kernel: https://github.com/bduggan/p6-jupyter-kernel

[13:16] <awwaiid> bdmatatu++ # !!!

[13:16] <awwaiid> that is also somewhere on my infinite todo list :)

[13:16] <bdmatatu> :)

[13:16] *** andreoss` joined
[13:16] <awwaiid> bdmatatu: you found the previous attempt someone worked on?

[13:16] <bdmatatu> Yes

[13:16] <awwaiid> very good

[13:17] <andreoss`> m: class Foo {}; sub foo(Foo:D $x?) { 1 }; say foo();

[13:17] <camelia> rakudo-moar c1e41f: OUTPUT: «Parameter '$x' of routine 'foo' must be an object instance of type 'Foo', not a type object of type 'Foo'.  Did you forget a '.new'?␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[13:17] <awwaiid> I would be delighted to hear of your pgoress on this and will try to find time to beta-test

[13:17] <bdmatatu> awwaiid++ great!

[13:18] <andreoss`> can I use optional parametrs with :D objects?

[13:19] <awwaiid> andreoss`: maybe give it a default (defined) value

[13:21] <jnthn> Only if you provide a default. Maybe we should catch that at compile time.

[13:30] *** perlpilot left
[13:31] <mspo> stmuk: so benny is saying to package all of the "star" packages individually and just track them like that; which I think is what you were also recommending

[13:31] <mspo> guess that's the way to go

[13:32] <mspo> just need to figure out all of the right INC's to use + the incantation with zef (maybe)

[13:33] <mspo> I always wasn't super clear on how other packaging systems are doing it

[13:35] <[Coke]> timotimo: see also my unicode mangler if you want rando combiners.

[13:35] *** skids joined
[13:35] *** perlpilot joined
[13:37] *** lizmat left
[13:40] <[Coke]> timotimo: (g̩ͧ̒̔͡ö̟̝̻́͡ǫ̺̋ͨ́d̷̻ͬ̄͞b̫͒͟͡ͅy̫̋̀ͣ̏é̷̞͝ͅ)

[13:41] <mspo> [Coke]: that one works better than the one yesterday for me

[13:41] *** lizmat joined
[13:55] *** nadim left
[14:05] *** Voldenet left
[14:08] *** itaipu left
[14:09] *** itaipu joined
[14:10] *** Voldenet joined
[14:10] *** Voldenet left
[14:10] *** Voldenet joined
[14:18] *** zakharyas left
[14:20] *** zakharyas joined
[14:25] *** nadim joined
[14:27] *** popo__ joined
[14:27] *** grumble left
[14:43] *** domidumont left
[14:53] *** mst_ is now known as mst

[14:54] *** grumble joined
[14:59] *** khw joined
[15:01] *** espadrine left
[15:03] *** domidumont joined
[15:03] *** vmeson left
[15:08] <mspo> so if I install rakudo star and want to update one of the included modules can zef do it?

[15:08] <mspo> since there is no more @INC I'm not sure how to order stuff

[15:08] <timotimo> yeah, zef can update stuff for you

[15:12] <mspo> would it replace what star installed?

[15:12] <timotimo> if the :ver is the same, yes

[15:12] <timotimo> if it's a new :ver, it'll be installed alongside the older one so you can still get it with a more specific use statement

[15:13] <mspo> okay

[15:13] <geekosaur> iirc it will install alongside, since unlike perl 5 you can distinguish by :ver and possibly :auth

[15:13] <geekosaur> heh

[15:13] * geekosaur slow

[15:13] <timotimo> like a little part of my zef list --installed looks like this:

[15:13] <timotimo> JSON::Fast:ver('0.4')

[15:13] <timotimo> JSON::Fast:ver('0.8.5')

[15:13] <timotimo> JSON::Fast:ver('0.9')

[15:13] <timotimo> JSON::Fast:ver('0.9.1')

[15:14] <mspo> are those in site/ or vendor/ ?

[15:14] <timotimo> i think vendor is for rakudo star and site is for what you install

[15:14] <timotimo> or something

[15:15] <mspo> timotimo: yeah I'm asking because I'm going to try (again) to get rakudo-star into pkgsrc

[15:15] <mspo> timotimo: but right now we're headed down the path of just combining stand-alone nqp, moar, rakudo

[15:15] <timotimo> did you look at nine's work on getting it packaged for suse?

[15:16] <mspo> timotimo: and it's up in the air about how to handle the 30+ packages inside of star

[15:16] <timotimo> problem with that is that the latest star release uses an unreleased nqp

[15:16] <mspo> timotimo: people seem to be leaning towards just packing them up on their own

[15:16] <mspo> timotimo: we can apply patchsets into nqp.  it's not a problem

[15:17] <mspo> but why wouldn't nqp just do a point release to fix ? :)

[15:18] <mspo> https://en.opensuse.org/Rakudo  <- looks out of date

[15:19] <timotimo> huh i don't know where to find that stuff

[15:19] <mspo> :)

[15:19] <mspo> timotimo: pkgsrc has a bunch of stale attempts too

[15:20] <mspo> timotimo: I'm hoping to get it cleaned up and modernized.  One of our guys is already most of the way there 

[15:20] <timotimo> nine built something called "CompUnitRepo::Staging" or similar

[15:20] <timotimo> it allows you to install precompiled stuff by building it once and distributing the binaries

[15:20] <timotimo> IIUC

[15:22] <mspo> we also need a sanctioned way to intsall modules that might get packaged up

[15:23] *** epony left
[15:23] <timotimo> how do you mean?

[15:24] <mspo> integrate zef into pkgsrc as a usable "tool" for building packages

[15:24] <mspo> or some other method

[15:24] <mspo> right now perl5 stuff uses makemaker directly I think

[15:24] <timotimo> kind of like arch has alacryd?

[15:24] <timotimo> not that i know anything about that tool

[15:25] *** pecastro left
[15:25] <mspo> I don't know it :)

[15:25] *** wamba left
[15:25] <mspo> timotimo: pkgsrc is a big collection of software for netbsd, illumos, osx, and others

[15:25] <mspo> timotimo: it's a giant collection of Makefile's

[15:25] <timotimo> i mean i don't know anything about alacryd

[15:25] <mspo> oh me either

[15:25] <timotimo> i've heard of pkgsrc

[15:26] <mspo> cool :)

[15:26] <mspo> much nicer than brew for osx ;)

[15:26] *** HoboWithShotgun joined
[15:26] <mspo> just use pkgin to get all the binary packages; including perl6 if I can get some time to work on it!

[15:26] <HoboWithShotgun> hi. I just installed rakudo and some modules with this zef tool.

[15:27] <HoboWithShotgun> where do the modules get installed to?

[15:27] <mspo> .say for $*REPO.repo-chain;

[15:27] <mspo> run that I think

[15:27] <timotimo> m: .say for $*REPO.repo-chain

[15:27] <camelia> rakudo-moar c1e41f: OUTPUT: «inst#/home/camelia/.perl6␤inst#/home/camelia/rakudo-m-inst-2/share/perl6/site␤inst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor␤inst#/home/camelia/rakudo-m-inst-2/share/perl6␤CompUnit::Repository::AbsolutePath.new(next-repo => CompUnit::Repos…»

[15:28] <mspo> timotimo: oh I see; we could use compunit::repoisotry to package up star and just stick it on the install

[15:28] <mspo> interesting but probably not what Benny wants

[15:29] <mspo> also that means you can use compunit::repository to make FatPack-style stuff?

[15:29] *** jdv79_ left
[15:30] <mspo> ugexe++

[15:32] <HoboWithShotgun> interesting. why do the file names of modules appear to be some checksum?

[15:32] *** jdv79 joined
[15:34] <geekosaur> because you can have multiple versions of a module installed

[15:35] <geekosaur> so they get named by a hash of their identifying information (version, author, etc.) and I think maybe ABI?

[15:35] <moritz> and the module name may contain Unicode characters that your file system may not like

[15:35] <geekosaur> use Foo.Bar:ver(1.16); # for a specific version; default should be the latest installed

[15:36] <andrzejku_> moritz, hey!

[15:36] <HoboWithShotgun> that's a bummer. i wanted to look at xml::node code

[15:37] *** rumble joined
[15:37] <HoboWithShotgun> actually, where is the documentation for the XML class?

[15:37] <stmuk> is it possible to have nqp c0abee7953ac tagged as 2017.07.1?

[15:38] <geekosaur> that wouldn't work anyway, I think --- iirc the CUR has only the compiled version?

[15:38] <HoboWithShotgun> nvm, found it

[15:39] <nine> The vendor repo is for packaged modules (think rpm, dpkg, ...). They are shipped by your operating system vendor.

[15:39] <nine> The site repo is for modules installed by the user.

[15:39] *** epony joined
[15:39] <nine> Well user with sufficient access priviledges that is. There's still the home repo for unpriviledged users.

[15:41] <nine> timotimo: CompUnit::Repository::Staging is essential for building precomp files with an unpriviledged user before packaging. It lets you install modules to a different location than where the will end up in, i.e. /tmp/BUILDROOT/usr/share/perl6/vendor.

[15:41] <perlpilot> mi6++  (tried it for the first time today and it was doing something weird ... turned out it was a bug in my code!)

[15:42] *** lowbro left
[15:46] *** zakharyas left
[15:46] *** bwisti left
[15:47] <lucs> I had the impression that mi6 was deprecated in favor of ddt.

[15:47] <lucs> Is it?

[15:49] <timotimo> nine: thank you for clarifying, i'll try to remember it

[15:49] <perlpilot> I don't see that ddt handles CPAN distributions.  (that's the only reason I was using mi6)

[15:50] *** nhywyll joined
[15:51] <lucs> perlpilot: Oh, important difference, eh.

[15:51] <ugexe> HoboWithShotgun: you can find the source for an installed module with `zef locate My::Module`

[15:52] <perlpilot> but also ... mi6-- for changing my README and META6.json without me asking it to

[15:52] *** pecastro joined
[15:53] <ugexe> or `zef locate lib/My/Module.pm6` or `zef locate $some-sha1 --sha1`

[15:53] *** grumble is now known as grumble2

[15:53] *** rumble is now known as grumble

[16:00] *** grumble2 left
[16:03] *** robertle left
[16:04] <ugexe> llfourn: their source-url does not identify its type (https://github.com/jaldhar/Algorithm-DawkinsWeasel)

[16:05] <nadim> llfourn: I thnk I will give up on trying to golf something to reproduce error: No such symbol 'Data::Dump::Tree::LayFlat', On the other hand I can try to debug the problem I have, if there is some sata I can extract from this case that can help, I'd be happy to do it

[16:06] <nadim> llfourn: and maybe I give golfing another try but right now it has frustrated me enough.

[16:08] *** mr-foobar joined
[16:20] *** eroux joined
[16:22] <HoboWithShotgun> perlbot: 'md5=c1a031bd227df4f7a4dae94e0135dd09' ~~ /md5\=(<[0..9a..z]>+)/; say qq[$0];

[16:23] <HoboWithShotgun> rakudo: 'md5=c1a031bd227df4f7a4dae94e0135dd09' ~~ /md5\=(<[0..9a..z]>+)/; say qq[$0];

[16:23] <camelia> rakudo-moar f083cf: OUTPUT: «c1a031bd227df4f7a4dae94e0135dd09␤»

[16:23] <HoboWithShotgun> rakudo: 'md5=c1a031bd227df4f7a4dae94e0135dd09' ~~ /md5\=(<[0..9a..z]>+)/; say $0;

[16:23] <camelia> rakudo-moar f083cf: OUTPUT: «｢c1a031bd227df4f7a4dae94e0135dd09｣␤»

[16:23] <HoboWithShotgun> where do these two extra characters come from?

[16:25] <zengargoyle> m: 'md5=c1a031bd227df4f7a4dae94e0135dd09' ~~ /md5\=(<[0..9a..z]>+)/; say ~$0;

[16:25] <camelia> rakudo-moar f083cf: OUTPUT: «c1a031bd227df4f7a4dae94e0135dd09␤»

[16:25] <HoboWithShotgun> oh, it's a match object.

[16:25] <AlexDaniel> HoboWithShotgun: oh, you get a Match object. “say” is using .gist on whatever it gets, which is a human-readable output.

[16:26] <perlpilot> Having to .Str the results of a regex capture is annoying

[16:26] <skids> rakudo: 'md5=c1a031bd227df4f7a4dae94e0135dd09' ~~ /md5\=(<[0..9a..z]>+)/; print $0;

[16:26] <camelia> rakudo-moar f083cf: OUTPUT: «c1a031bd227df4f7a4dae94e0135dd09»

[16:27] *** pharv joined
[16:27] <AlexDaniel> rakudo: 'md5=c1a031bd227df4f7a4dae94e0135dd09' ~~ /md5\=(<[0..9a..z]>+)/; put $0;

[16:27] <camelia> rakudo-moar f083cf: OUTPUT: «c1a031bd227df4f7a4dae94e0135dd09␤»

[16:27] * zengargoyle notices nobody tried explaining the STable thing from last night. :(

[16:27] *** cdg joined
[16:32] <Geth> ¦ doc: 25806762ef | (JJ Merelo)++ | doc/Type/PseudoStash.pod6

[16:32] <Geth> ¦ doc: First version of this missing page

[16:32] <Geth> ¦ doc: 

[16:32] <Geth> ¦ doc: Refs #1341. Please check it out to see if the paraphrashing of @jnthn

[16:32] <Geth> ¦ doc: and @lizmat is basically correct.

[16:32] <Geth> ¦ doc: 

[16:32] <Geth> ¦ doc: I also looked up class inheritance in the "Any" diagram, so that

[16:32] <Geth> ¦ doc: should be correct.

[16:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/25806762ef

[16:38] *** robertle joined
[16:44] *** popo__ left
[16:45] *** raschipi joined
[16:46] *** itaipu left
[16:46] *** andreoss` left
[16:48] <jnthn> zengargoyle: I don't backlog this channel so closely, but I can probably answer most things about STable given I coined the term. :) What was the question?

[16:48] *** andreoss` joined
[16:50] <zengargoyle> jnthn: i think it boiled down to adding 'use GitWrapper;' in a module caused the STable conflict "maybe using two modules you can't use together" error from the reposess code.  (i just looked).

[16:53] <jnthn> zengargoyle: Usually because a module does augment or other meta-programming without marking itself `no precompilation`

[16:53] <jnthn> We should make augment imply that, most probably

[16:53] <jnthn> Modules that use the MOP to change other module's objections will have to make the call themselves

[16:54] <zengargoyle> jnthn: i'm not sure it's that complicated.   nothing fancy like that.  (it's sombody elses code)

[16:54] <nadim> .tell llfourn I founf what the problem was in my code; I have unit module X ; use Y ; use Z ; sub want_this_sub{} ; When unit module X is after the 'use's it works, as if require did not put it in the right unit.

[16:54] <yoleaux> nadim: I'll pass your message to llfourn.

[16:55] <jnthn> Could be because of some dependency also

[16:55] <jnthn> Anyway, it'll probably be something along those lines

[16:58] <zengargoyle> i'm thinking it's not namespacing things, the code uses modules directly from . named like 'datas', 'check', 'add', and might have some circular thing going on.  i'm going to try and re-write it in a bit more standard fashion.

[16:58] *** cdg_ joined
[16:59] <andreoss`> m: my @x := 1, 1, | @x Z+ @x[1..*]

[16:59] <camelia> rakudo-moar f083cf: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable @x in declaration to initialize itself␤at <tmp>:1␤------> 3my @x := 1, 1, | @7⏏5x Z+ @x[1..*]␤    expecting any of:␤        prefix␤»

[16:59] <andreoss`> i recall self-referencing in declaration was possible before, wasn't it?

[17:00] *** cdg left
[17:01] <jnthn> Don't think so. Even if the compiler didn't check it and complain, the @x on the right would be some empty Array unrelated to the result that gets bound into @x

[17:01] <jnthn> Since the RHS is evaluated before the bind

[17:01] <jnthn> home time; bbl &

[17:05] <mspo> what is this stuff? 9AD391BB028FBF86169E02934A6181BA21049736.1497985253.01802/07/071E327F6BCF9C81A7F69FDD6CD4B79413A1AAD5

[17:07] *** linuksz joined
[17:09] <linuksz> i get the following error during the test when i try to install Email::Simple

[17:09] <linuksz> http://sprunge.us/QdLe

[17:09] <linuksz> did i fucked up something, or the module is wrong?

[17:09] <AlexDaniel> andreoss`: it is, but not with binding

[17:10] <linuksz> i use git version of rakudo and git version of module

[17:10] *** andreoss` left
[17:10] <geekosaur> ummmmm

[17:10] <AlexDaniel> andreoss: although… I'm no longer sure. Trying to get it working

[17:11] *** andreoss left
[17:11] <geekosaur> samcv ^ did something break with newline handling in your recent changes? ( http://sprunge.us/QdLe )

[17:12] <geekosaur> (I *think* the missing backslashes are the test harness's fault; it's hard to get that right)

[17:13] <geekosaur> (note that the network-format newlines are "backwards", \n\r instead of \r\n)

[17:15] <AlexDaniel> well yeah, in this particular case it's much easier to write it as a sequence

[17:15] <geekosaur> linuksz, this wouldn't be the first time something has gone sideways with trying to deal with variant forms of newline

[17:16] <linuksz> so can i do something to get it working?

[17:16] <AlexDaniel> m: my @x = 1, 1, * + * … ∞; say @x[^10]

[17:16] <camelia> rakudo-moar f083cf: OUTPUT: «(1 1 2 3 5 8 13 21 34 55)␤»

[17:16] <geekosaur> and I am reading those expected/got as "Subject: test\n\rTo: foo\n\r\n\rfoo\n\r" which would be a valid SMTP message aside from the reversed newline sequences

[17:17] <geekosaur> linuksz, probably try an older not-from-git rakudo

[17:17] <geekosaur> m: say "\n\r" ~~ "\n\r"

[17:17] <camelia> rakudo-moar f083cf: OUTPUT: «True␤»

[17:17] <geekosaur> huh...

[17:18] *** itaipu joined
[17:18] <geekosaur> m: say "\n\r" eq "\n\r"

[17:18] <camelia> rakudo-moar f083cf: OUTPUT: «True␤»

[17:18] <linuksz> it is annoying, because i use my distro package manager for installing packages to my system, and the program i use for packaging (alacryd) only runs on git version

[17:18] <geekosaur> maybe it's not rakudo

[17:19] <geekosaur> buggable: eco Email::Simple

[17:19] <buggable> geekosaur, Email::Simple 'Simple email parsing module': https://github.com/retupmoca/p6-Email-Simple

[17:20] <mspo> okay I'm reading https://github.com/ugexe/zef/issues/117

[17:21] <geekosaur> hrm, suspicious, last commit is about newline issues

[17:22] <mspo> "simple email parsing" lol

[17:22] <geekosaur> m: use Test; my $nr = "\x0a\x0d"; my $nasty = "Subject: test{$nr}To: foo{$nr}{$nr}foo{$nr}"; is ~$nasty, $nasty, "fii"

[17:22] <camelia> rakudo-moar f083cf: OUTPUT: «ok 1 - fii␤»

[17:24] * geekosaur trying to install locally but suspect this is a bug in Email::Simple or possibly an incompatibility with recent rakudo

[17:24] <geekosaur> ...the latter apparently as it passes here

[17:25] <linuksz> if i now compile nqp with an older version of moarvm (git compiled today morning) installed on my system, then compile rakudo with the today morning version of nqp and moarvm, will it work with the now compiled nqp and moarvm? 

[17:25] <geekosaur> suggest you file a bug at https://github.com/retupmoca/p6-Email-Simple/issues

[17:26] <geekosaur> I have no idea when it changed, sorry

[17:26] <linuksz> isn't there any way to make it working? take a look at the developer's github activity statistics.

[17:26] <geekosaur> This is Rakudo version 2017.06-133-ga7b2304 built on MoarVM version 2017.06-29-ga51ba62

[17:26] <geekosaur> is what I tested on

[17:27] <geekosaur> you could try forcing the install as it's onl;y likely to be a problem with weird newlines

[17:27] *** espadrine joined
[17:27] <geekosaur> stick to the RFC (\r\n) and you'll be fine

[17:28] <linuksz> geekosaur, did it work for you?

[17:28] <geekosaur> by forcing the install I mean zef install --/test Email::Simple

[17:28] *** cptAngry joined
[17:29] <linuksz> so without tests?

[17:29] <geekosaur> and I guess I have to figure out how to rephrase what I already said because it didn't register

[17:30] <geekosaur> it will work fine if you don't feed it noncompliant messages with weird newlines

[17:31] <geekosaur> it may work fine if you *do* feed it such messages, it's not clear that there is a real problem aside from a strange comparison somewhere since the expected and got strings are identical

[17:32] *** mcmillhj left
[17:32] <geekosaur> which is why I pinged the person working on the unicode stuff, since newlines have special unicode handling and it's been a problem before

[17:32] <geekosaur> and for now, since the only test that failed is the one with the non-RFC-complaint newlines, yes, just skip the tests

[17:33] <geekosaur> *compliant

[17:35] *** bartolin_ left
[17:35] *** mcmillhj joined
[17:38] <linuksz> i get the "Malformed UTF-8 at line 1 col 1" message with several modules i trying to install

[17:38] <geekosaur> erm, or the possibility I didn't think of which is that maybe the version I installed predates the change to try to support weird newlines... 

[17:39] <geekosaur> actually looks like it got thay version

[17:40] *** mcmillhj left
[17:40] <geekosaur> "at line 1 col 1" is a bit suspicious. what modules?

[17:40] <linuksz> developing programs for humans is NOT possible in perl6, because installing moarvm, then nqp, then rakudo, then the module manager, then the module, and get them working requires at least a power user

[17:40] <geekosaur> (I suspect Windows byte order marks)

[17:40] <linuksz> Email::MIME

[17:41] <geekosaur> linuksz, humans are supposed to use rakudo star, not git

[17:41] *** bartolin joined
[17:41] <geekosaur> buggable6, eco alacryd

[17:41] <geekosaur> buggable: eco alacryd

[17:41] <buggable> geekosaur, Nothing found

[17:43] *** itaipu left
[17:43] <linuksz> humans can't use zef. humans can use the graphical package manager, and click on the 'install' button of the program, and the package manager automatically downloads the packages, extract them, and installs them

[17:44] <AlexDaniel> ZofBot: humans?

[17:44] <timotimo> linuksz: if the end user is a windows user, you can build a little msi for them with just a little config file and a command

[17:44] <linuksz> but it is not possible to make packages that are can give a working module with an extraction and installation

[17:44] <geekosaur> linuksz, that train of thought goes nowhere. come back in a few years when there's been time to build up the kind of ecosystem you seem to think is mandatory

[17:45] <geekosaur> or go join the schmuck who insisted perl 6 can't be a real language unless its install is curl|sh

[17:45] <linuksz> i want to develop applications for linux

[17:45] <geekosaur> because your attitude and theirs are (a) both nonsense (b) antithetical, so you're set for a cage match

[17:46] <geekosaur> so you're using arch? and you tak about humans requiring gui package managers?

[17:47] <geekosaur> you're on arch, you're using what looks like an arch specific or at least heavily arch oriented tool, I don't think you get to complain about complexity

[17:47] *** mcmillhj joined
[17:47] <linuksz> yes, because i want to develop not for myself

[17:48] <geekosaur> rright, that point went flying verhead

[17:48] <geekosaur> why. are. you. using. a. power. user. distro. if. you. think. humans. can't. cope. with. power. user. tools./

[17:48] <linuksz> so is it possible to build packages and write programs that can be installed with a click?

[17:49] <geekosaur> pretty sure the ubuntu packaging is a lot friendlier than arch's, yes

[17:50] <geekosaur> you are using Arch. you have already excluded what you think "humans" are,

[17:51] <geekosaur> heck, you are targeting Linux, you have already alienated 90% of what you think "humans" are

[17:51] <mst> linuksz: of course it is

[17:51] <linuksz> Manjaro has an one-click package manager.

[17:52] <mst> yes, and?

[17:52] <mst> look, the fact you don't understand how to package software

[17:52] <mst> does not mean that software cannot be packaged

[17:52] *** mcmillhj left
[17:53] <mst> the fact that you're installing everything the hard way does not mean users are required to do so :)

[17:54] <zengargoyle> welp... i cleaned up dist layout of jeromelanteri's VimPlugger, wrote some use-ok tests and got it working... then just add 'use Git::Wrapper;' in VimPlugger::install module and boom STable conflict... :(

[17:54] <linuksz> so can you define the way perl6 software can be packaged for one click install?

[17:55] <mst> linuksz: you build a package for the distro. the user installs the package.

[17:55] <geekosaur> use a platform not based on a rolling release, so it has tools that don't require you to live on the bleeding edge. manjaro is based on arch, it inherits arch's bleeding edge tendencies

[17:56] <mst> geekosaur: I don't honestly see how that relates

[17:56] <geekosaur> the packager they found for arch only works with git rakudo and git moarvm

[17:56] <geekosaur> not the packaged versions

[17:56] *** cdg_ left
[17:56] <linuksz> ok, and what is the tool with i can build packages?

[17:56] <mst> 'the packager they found' <- eh?

[17:56] <geekosaur> "alacryd"

[17:57] <mst> linuksz: that's a manjaro question, nothing to do with us.

[17:57] <geekosaur> which generate arch pkgbuilds from perl 6 metadata

[17:57] <mst> oh, right, but that's a developer-only tool

[17:57] <mst> nothing to do with packaging for users

[17:57] <mst> so nothing to do with linuksz problem

[17:59] *** cptAngry left
[17:59] <mst> linuksz: anyway, "developing programs for humans is NOT possible in perl6" is a lie. please learn how to build packages for your target distro if you want to distribute packages for users.

[18:00] <mst> meanwhile, 'zef' is the correct thing to use for development

[18:00] <linuksz> arch is far away before other distros in packaging perl6. for example, fedora doesn't have any perl6 packages. 

[18:01] <linuksz> mst, and what is the correct thing to use for packaging?

[18:03] <mst> linuksz: dpkg-deb --build

[18:03] <mst> you need to figure out your own answer for your own distro

[18:03] <mst> you don't have a perl6 problem

[18:03] <mst> you have a "not understanding manjaro" problem

[18:03] <linuksz> i am not familiar with debian. 

[18:04] <mst> and since manjaro uses a fork of an obsolete version of arch's package manager

[18:04] <linuksz> but as i see, it isn't an efficient tool, because https://packages.debian.org/search?keywords=perl6

[18:04] <mst> I have no idea

[18:04] <mst> I have no idea what you mean by "efficient tool"

[18:05] <mst> debian has 2017.06 just the same as arch

[18:06] <linuksz> a tool with packagers can package several packages (there is 855) perl6 module currently

[18:06] *** mcmillhj joined
[18:06] <linuksz> and how many modules in binary form?

[18:06] <mst> I don't actually care, I install to a local CUR and ship that

[18:09] <linuksz> i will take a try with zef. 

[18:09] <mst> for shipping apps to end-users I tend to make fat packages that have the dependencies in the package so that you don't run into problems when distros upgrade stuff

[18:09] <mst> this works fine with most languages

[18:10] <mst> the problem here isn't "perl6 is missing a feature", the problem is "linuksz doesn't know how to use manjaro's build system"

[18:10] <raschipi> Yes, then sysadmins have to upgrade all packages by hand when there's a problem, yay!

[18:10] <mst> and I'm afraid I can't help you with that

[18:10] <mst> raschipi: eh?

[18:10] *** cdg joined
[18:10] <raschipi> If you bundle, it won't be upgraded when the base package is upgraded.

[18:11] *** mcmillhj left
[18:11] <raschipi> It's a serious problem, instead of doing it once, doing it for every bundle. But I'm just ranting, sorry.

[18:12] <linuksz> i know how to use arch's build system.

[18:12] <raschipi> I wish distros somehow forbade bundling, so that devs didn't have that option and were forced to do it properly.

[18:12] <mst> linuksz: then you should have no problems packaging perl6 applications

[18:13] *** mcmillhj joined
[18:13] *** tokomer_ joined
[18:13] <mst> raschipi: for a package for a centralised distro repository you should work with the main packages, sure

[18:13] <mst> but if I'm supplying a 3rd party package I'd rather have to rebuild myself than risk a distro changing a version of something and breaking deployed code

[18:13] <perlpilot> raschipi: It's a problem that my software continues to work as expected because it bundles the specific version of a module and doesn't break because someone decides to "upgrade" a dependency?

[18:14] <linuksz> i have no problems packaging perl 5 applications, but it's not perl6

[18:14] <linuksz> why does it work for perl5? 

[18:14] <mst> I don't understand

[18:14] <raschipi> perlpilot: The appropriate way to do it is to use stable distros.

[18:14] <mst> there are plenty of alacryd-built packages in AUR

[18:14] <mst> https://aur.archlinux.org/packages/?O=0&SeB=nd&K=perl6&outdated=&SB=n&SO=a&PP=50&do_Search=Go

[18:15] <perlpilot> raschipi: sure ... in a perfect world, that's true.   We don't live in a perfect world  :)

[18:15] <mst> I would suggest that if you want to use arch, you actually use arch

[18:15] <linuksz> all packages are alacryd-built

[18:15] <mst> so what in that is "doesn't work" ?

[18:15] *** pharv left
[18:16] <linuksz> perlpilot, what happens if two applications wants to use the same module?

[18:18] <mst> with bundling, you get two copies

[18:18] <mst> without, you need centralised QA of revdeps before upgrade

[18:18] <perlpilot> linuksz: um ... then they do so?  I'm not saying this is the one true way to do things.  I'm saying bundling specific versions is perfectly valid way to solve some problems.

[18:18] <mst> right

[18:18] <mst> I really don't understand what the problem's supposed to be here

[18:18] <perlpilot> me either

[18:19] <linuksz> but it uses more space, and file conflicts are possible

[18:19] <mst> file conflicts are not possible

[18:19] <mst> you keep the deps by the app

[18:23] *** pmurias joined
[18:23] <pmurias> geekosaur: why the hate for curl|sh? :)

[18:23] <mst> geekosaur: note, I suspect the arch version of alacryd and the arch version of rakudo work fine together

[18:23] <mst> geekosaur: and actually what we have here is a "manjaro is a shitshow" problem

[18:24] <raschipi> The problem is having to upgrade something more than once using non-standard tools.

[18:24] <mst> raschipi: eh?

[18:24] <raschipi> Well, only someone supporting a multitude of applications would be annoyed by that problem, of course.

[18:24] <raschipi> Anything that upgrades using something other than apt is a PITA.

[18:25] <mst> ok, so, you appear to still be ranting at me, and I was talking about building .deb packages

[18:25] <mst> so I'm rather confused now

[18:25] <mspo> would it be reasonable for install-dist.pl to have an option to install the source files or create symlinks with meaningful names or something? :)

[18:25] <mspo> everyone is packaging!

[18:26] <perlpilot> mspo: why do you want meaningful names?

[18:26] <mspo> perlpilot: I don't know

[18:26] <raschipi> I'm just thinking aloud, please don't be bothered.

[18:26] <perlpilot> mspo: contrapuntally, I think that the lack of meaningful names discourages people from trying to edit them, which is a very good thing  :-)

[18:27] <raschipi> I can make my own packages if it comes to it, :).

[18:27] <mspo> also is this install-perl6-dist a script?

[18:27] <mspo> perlpilot: I think it's more like a question of "what do I have installed" and "how can I use it?"

[18:27] <mst> raschipi: so, basically, I often have more than one app on the same server, and sometimes they have incompatible module requirements, and perl6's CUR system is about the only thing that can handle that itself

[18:28] <mst> raschipi: so I prefer bundling into a 'fat deb' and then rebuilding that if there's a problem

[18:28] <perlpilot> mspo: zef can answer the first one and presumably, p6doc can answer the second.

[18:29] *** cdg left
[18:29] <raschipi> I understand, I just wish people would do it properly and don't require specific versions. Every developer thinks they are justified in doing it, yet it multiplies my  workload thousandfold.

[18:30] *** cdg joined
[18:30] *** kristoft joined
[18:30] <kristoft> Hi everyone

[18:31] <mst> raschipi: how does this increase your workload? done right, it just means that after a nasty bug is fixed, apt-get upgrade upgrades both the system copy of the module and the copy in the fat deb

[18:32] <geekosaur> this sounds like the "eaiser for all to not bound versions" <sandbagged by abi change> "whee glad that'll never happen again easier for all to not bound versions"

[18:34] <raschipi> geekosaur: Everything is stable.

[18:34] *** kristoft left
[18:35] <raschipi> mst: Would the package have new features added?

[18:36] <pmurias> mst: re figure out your own answer for your own distro, wouldn't having a "package-this-up debian App::SomeRandomApp" script that does stuff sanely be something that the widely understood Perl 6 community should aim for?

[18:37] <geekosaur> until yet another linux distribution comes up with yet another linux package format

[18:37] <nadim> hi, I have sub my_sub(*@i, :$n, :$n2) ; my $i1 = 1, my $i2 = 2; my $n1 = :n1(100) ; my $n2 = :n2(200) ; my  capture $c =\($i1, $i2, $n1, $n2) ; calling  my_sub $c puts a Capture object in @i when I want the capture to be "expanded"

[18:37] <mst> pmurias: there's already assorted tooling for this, but IME *debugging* such tooling requires learning the underlying stuff anyway

[18:38] <perlpilot> nadim: my_sub |$c;  # If I read you right

[18:38] <geekosaur> nadim, |$c

[18:38] <geekosaur> iirc

[18:38] <mst> raschipi: depends - but "this may force me to upgrade to a version with additional features" is something that can happen in unbundled packages too - often *more* often rather thanless

[18:38] <nadim> wouldn't that just flatten the .list part of the capture?

[18:40] <zengargoyle> .tell jnth ok so Git::Wrapper does some Git::Wrapper.HOW.add_method(Git::Wrapper, $method, anon method (*@p, *%n) { MOP magic that fails when it's inside a 'unit module Foo;'

[18:40] <yoleaux> zengargoyle: I'll pass your message to jnth.

[18:41] *** akagi201__ left
[18:43] *** linuksz left
[18:45] * zengargoyle wonders if it would work inside a class vs a module...

[18:46] <zengargoyle> or if something MOPish changed that makes it not work....

[18:50] <zengargoyle> ah, i guess Git::Wrapper should maybe do 'no precompilation' or does that have to go in the thing that's using Git::Wrapper (which works).

[18:51] *** zakharyas joined
[18:51] *** R0b0t1 left
[18:54] *** R0b0t1 joined
[18:54] *** perlpilot left
[18:55] <zengargoyle> woot!

[18:56] <jnthn> zengargoyle: Does it do that .add_method in a BEGIN block?

[18:58] <zengargoyle> jnthn: no, in a for loop at the end of the class.   class { methods.... for <blah> .add_method }

[18:58] <jnthn> Ah

[18:58] <jnthn> That'd be a bad idea :)

[18:58] <jnthn> 'cus it changes the object at runtime

[18:58] <zengargoyle> https://github.com/nicqrocks/p6-Git-Wrapper/blob/master/lib/Git/Wrapper.pm6

[18:59] <jnthn> And those changes will get serialized into the module that uses this one

[18:59] <jnthn> Then if two modules both use this one, then they'll end up with independent copies of those

[18:59] <jnthn> And boom, two pre-comps you can't use together

[18:59] <zengargoyle> yeah, it sorta makes sense now...  not sure of best fix though..

[18:59] <jnthn> Wrap the foor loop in a BEGIN block, preferably before the closing } of the class :)

[19:00] <jnthn> Oh, sounds like the for already is in the class body

[19:00] *** itaipu joined
[19:00] <jnthn> In fact BEGIN takes a statement

[19:00] <zengargoyle> yes.  in the body.

[19:00] <jnthn> So you can just s/for/BEGIN for/ and see how that helps :)

[19:00] <zengargoyle> putting no precompilation worked, i'll try the begin thing.

[19:03] <zengargoyle> jnthn: yep, BEGIN for works (or at least doesn't fail).  jnthn++

[19:05] <zengargoyle> sadly the nicqrocks fork that's in the eco doesn't have an issues option... :(

[19:08] <mspo> is there a reason star isn't using install-dist.pl instead of zef?

[19:10] <mst> star bundles zef already

[19:10] <mst> the point of install-dist was as a low level option when you didn't have zef or an equivalent yet

[19:10] <mspo> I'm following along with https://build.opensuse.org/package/view_file/devel:languages:perl6/perl6-Inline-Perl5/perl6-Inline-Perl5.spec?expand=1

[19:11] <mspo> star uses perl6 zef  --/build-depends --/test-depends --/depends --/p6c

[19:11] <mspo> --/metacpan --/cpan --force install ./modules$path_sep$module;

[19:11] <mspo> right?

[19:13] *** cdg left
[19:14] <zengargoyle> .tell jeromelanteri the Git::Wrapper thing has been solved!  i made pull-request on Git::Wrapper with the fix.

[19:14] <yoleaux> zengargoyle: I'll pass your message to jeromelanteri.

[19:15] <mspo> how predictable are precomp names?  I was just trying to install zef using someone's package and got different precomp names

[19:16] <mspo> his : precomp/9AD391BB028FBF86169E02934A6181BA21049736.1497985253.01802/FE/FE48D13883ACBA2CF35E1746EEFE956A173BE8AE.repo-id

[19:16] <mspo> mine: precomp/6C3B1056A15F23B58ED8A7017D2C24B8F7524EB2.1501209729.51376/FE/FE48D13883ACBA2CF35E1746EEFE956A173BE8AE.repo-id

[19:16] <mspo> it's just the first part!

[19:18] <mspo> that middle part is a timestamp so that's not going to be good :)

[19:18] *** nhywyll left
[19:21] *** zakharyas left
[19:22] *** raschipi left
[19:23] <mspo> nine: any hints?

[19:31] *** wamba joined
[19:32] *** mr-foobar left
[19:32] *** itaipu left
[19:33] *** nhywyll joined
[19:36] *** mr-foobar joined
[19:37] <mspo> or maybe I should try -toolchain?

[19:44] *** darutoko left
[19:45] <revere> Is there a camel book for 6 yet? Or some WIP?

[19:45] *** itaipu joined
[19:46] *** colomon left
[19:49] *** hobbs joined
[19:49] *** hobbs left
[19:49] *** hobbs joined
[19:50] <timotimo> not a camel book, but other books

[19:50] <timotimo> https://perl6book.com/

[19:54] *** domidumont left
[20:00] *** tzekid joined
[20:00] *** TEttinger joined
[20:02] *** bdmatatu left
[20:03] <revere> That chart looks like what I'm looking for, thanks timotimo

[20:04] <timotimo> cool

[20:08] *** coetry_ joined
[20:09] *** Kyo91 joined
[20:11] *** |oLa| left
[20:16] *** coetry_ left
[20:17] <nine> mspo: yes, -toolchain is the best place as I follow that in full. Sort of answered the question there :)

[20:22] *** |oLa| joined
[20:28] *** |oLa| left
[20:32] <timotimo> why did nobody force me to look at the Terminal::Print examples

[20:32] <timotimo> there's fantastic stuff in there

[20:32] <timotimo> ab5tract++

[20:32] *** Cabanossi left
[20:34] *** Cabanossi joined
[20:44] *** |oLa| joined
[20:45] *** fantazo joined
[20:46] *** fantazo left
[20:52] *** itaipu left
[20:54] <nadim> I am going to force you to look at Data::Dump::Tree then!

[20:55] <timotimo> that's a different kind fo fantastic stuff

[20:56] <nadim> next version as :flat control, here is an example of a dump done by dd, ddt, and ddt in normal vertical mode https://nopaste.linux-dev.org/?1160097

[20:57] * nadim will look at Termina::Print examples again

[20:59] *** grondilu joined
[21:00] <timotimo> that looks neat how it puts things into columns

[21:01] <nadim> took most of this week to implement

[21:03] <nadim> it's neater than it looks like, you can say things like ddt $my_stuf, :flat( Hash, sub($s){ $s ~~ Array && $s.elems > 30), $something_want_flat)

[21:03] <timotimo> ah so a decider function so to say?

[21:03] *** mcmillhj left
[21:03] <nadim> and it will flatten all hashes, all your arrays that have 30 elements or more, and the stuff you want flattened

[21:04] <nadim> yes

[21:04] <nadim> put you can say :flat(0) and first level get flattened

[21:04] *** amalia___ left
[21:04] <timotimo> what's the ... for?

[21:04] <timotimo> oh because it's a seq

[21:05] *** coetry_ joined
[21:06] *** jameslenz joined
[21:06] <nadim> you can do multi colums also like this https://nopaste.linux-dev.org/?1160098

[21:06] *** mr-foobar left
[21:06] <nadim> Seq of 11 elements in that case, you can control the amount displayed

[21:07] <zengargoyle> .ask jeromelanteri was it you who wanted TagBar config for perl6?  https://gist.github.com/77f253d6d721e4b6287b8e5321b31e9f

[21:07] <yoleaux> zengargoyle: I'll pass your message to jeromelanteri.

[21:07] <nadim> timotimo: its also does references, something I miss in dd

[21:07] *** brrt joined
[21:07] <zengargoyle> or if anybody else has a better tagbar config... :)

[21:08] *** skids left
[21:09] <nadim> timotimo: maybe I shoud have "... +n" to show how many more elements, although how many elements are in the header

[21:10] <coetry_> Interesting discussion on HN regarding concurrency primitives in Perl6: https://news.ycombinator.com/item?id=14854418&utm_term=comment

[21:10] <timotimo> both would be fine

[21:11] <nadim> the number of element is already in the header. .Seq(32) or .Seq(*)

[21:13] <timotimo> yes

[21:13] <timotimo> i mean either keep it only in the header or put it on the bottom as well

[21:13] <timotimo> both choices are fine with me

[21:13] <timotimo> coetry_: seen it, thanks :)

[21:14] <nadim> I like Hashes even more https://nopaste.linux-dev.org/?1160099

[21:15] <timotimo> yeah, not bad

[21:15] <coetry_> timotimo++

[21:15] <nadim> but it must be seen in color, black and white takes half the legibility away

[21:15] <coetry_> ++timotimo

[21:15] <timotimo> coetry_: i believe one or two of our channel inhabitants commented, too

[21:16] <coetry_> oh sorry, havn't seen the logs

[21:16] <timotimo> i mean commented on hackernews itself

[21:16] <coetry_> ahh i see

[21:16] <timotimo> at least raiph has 11 comments

[21:16] <coetry_> looking up right now

[21:17] *** nhywyll left
[21:17] <timotimo> i also see b2gills in there

[21:17] <nadim> http://imgur.com/Hfhiouw  and then I stop spamming

[21:18] <coetry_> what does TIMTOWTDIBSCINABTE stand for?

[21:19] <nadim> Honestly, one has to be a smi God to read dd's output if it is more thana a few lines.  Although dd is invaluable.

[21:19] <geekosaur> There Is More Than One Way To Do It

[21:19] <timotimo> more than one way to do it, but sometimes consistency is not a bad thing either

[21:19] <coetry_> timotimo, yeah i was looking for that last part. cool.

[21:24] *** itaipu joined
[21:42] *** itaipu left
[21:44] *** mcmillhj joined
[21:44] *** Kyo91 left
[21:48] *** coetry_ left
[21:49] *** mcmillhj left
[21:50] *** brrt left
[21:50] *** zengargoyle left
[21:50] *** coetry joined
[21:52] *** zengargoyle joined
[21:53] *** robertle left
[22:00] *** mcmillhj joined
[22:02] *** sherwool left
[22:07] *** mcmillhj left
[22:08] <nadim> timotimo: I mixed Terminal::Print and something else :), yes Terminal::Print is cool, maybe Ii should use that instead for Curses.

[22:13] *** cog__ joined
[22:13] <timotimo> perhaps

[22:14] <timotimo> i think i'm going to use it for p6profiler-tui

[22:16] *** cog_ left
[22:35] *** pharv_ joined
[22:37] <nadim> timotimo: looking forward to that! I need a profiler and a debugger. Btw, is the debugger working now? it was broken some times ago.

[22:38] <timotimo> it works right now

[22:38] <timotimo> not necessarily if you have multiple threads active

[22:40] *** coetry___ joined
[22:41] *** coetry left
[22:43] *** sufrostico joined
[22:45] *** |oLa| left
[22:47] *** Cabanossi left
[22:49] *** Cabanossi joined
[22:52] *** eroux left
[23:09] *** pilne joined
[23:13] *** sufrostico left
[23:15] *** pmurias left
[23:18] <nadim> I will check it up

[23:22] <nadim> when an object is but'ed with a role that has an attribute, where is the attribute found? 

[23:26] <nadim> found them!

[23:30] *** rindolf left
[23:33] *** Cabanossi left
[23:34] *** Cabanossi joined
[23:56] *** tzekid left
[23:57] *** kyan joined
