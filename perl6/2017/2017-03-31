[00:07] *** adu joined
[00:08] *** adu left
[00:10] *** AlexDaniel joined
[00:11] *** mcmillhj joined
[00:12] *** gdonald left
[00:12] *** gdonald joined
[00:16] *** mcmillhj left
[00:17] *** adu joined
[00:19] *** cog_ left
[00:21] *** BenGoldberg joined
[00:23] *** adu left
[00:54] *** Cabanossi left
[00:56] *** labster left
[00:56] *** Cabanossi joined
[01:04] *** gregf_ left
[01:12] *** labster joined
[01:32] *** kyan joined
[01:39] *** cpage_ joined
[01:45] *** ilbot3 left
[01:47] *** ilbot3 joined
[01:47] *** ChanServ sets mode: +v ilbot3

[01:54] *** kybr left
[02:00] *** mcmillhj joined
[02:05] *** mcmillhj left
[02:06] *** kybr joined
[02:10] *** Cabanossi left
[02:11] *** Cabanossi joined
[02:24] *** khw joined
[02:28] *** BrassLantern joined
[02:28] *** BrassLantern left
[02:37] *** noganex_ joined
[02:40] *** noganex left
[02:49] *** ggoebel left
[02:52] *** Actualeyes left
[02:52] *** Actualeyes joined
[02:58] *** xtreak joined
[02:59] *** mcmillhj joined
[03:02] *** ggoebel joined
[03:11] *** awwaiid left
[03:25] *** aindilis left
[03:26] *** aindilis joined
[03:39] *** xtreak left
[03:43] *** xtreak joined
[03:48] *** wamba joined
[03:50] *** pytuger joined
[03:51] *** pytuger left
[03:51] *** pytuger joined
[03:53] *** Cabanossi left
[03:55] *** mcmillhj left
[03:56] *** Cabanossi joined
[03:56] *** andrzejk_ joined
[03:58] *** kurahaupo__ joined
[04:04] *** mcmillhj joined
[04:09] *** mcmillhj left
[04:14] *** khw left
[04:17] *** mcmillhj joined
[04:21] *** mcmillhj left
[04:21] *** skids left
[04:27] *** andrzejk_ left
[04:29] *** BenGoldberg left
[04:30] *** mcmillhj joined
[04:34] *** AndyDee left
[04:35] *** mcmillhj left
[04:38] *** geekosaur left
[04:39] *** geekosaur joined
[04:44] *** obfusk_ joined
[04:44] *** obfusk left
[04:44] *** darutoko joined
[04:48] *** andrzejk_ joined
[04:51] *** kurahaupo_ joined
[04:53] *** kurahaupo__ left
[05:00] *** mcmillhj joined
[05:05] *** mcmillhj left
[05:06] *** geekosaur left
[05:07] *** geekosaur joined
[05:09] *** labster left
[05:10] *** dct joined
[05:16] *** dct left
[05:19] *** mcmillhj joined
[05:24] *** mcmillhj left
[05:26] *** Tonik joined
[05:30] *** mcmillhj joined
[05:34] *** mcmillhj left
[05:38] *** ufobat joined
[05:47] *** mcmillhj joined
[05:48] *** RabidGravy joined
[05:51] *** lowbro joined
[05:51] *** lowbro left
[05:51] *** lowbro joined
[05:52] *** mcmillhj left
[06:01] *** xinming_ joined
[06:02] *** labster joined
[06:05] *** xinming left
[06:10] *** mcmillhj joined
[06:14] *** mcmillhj left
[06:19] *** movl left
[06:22] *** wamba left
[06:26] *** kurahaupo_ left
[06:26] *** domidumont joined
[06:26] *** kurahaupo__ joined
[06:32] <andrzejku> hi guys

[06:32] *** domidumont left
[06:32] <andrzejku> do you think Perl6 is good for machine learning?

[06:32] <andrzejku> or it is too slow

[06:32] *** domidumont joined
[06:32] <moritz> I think you want a core written in C for machine learning

[06:32] <moritz> even if you do it in a faster language such as python

[06:33] * moritz wonders how well tensorflow works with Inline::Python

[06:33] <andrzejku> moritz: ye what I saw many machine learning and ai courses show things in python

[06:34] <andrzejku> anyway I hate C :D

[06:34] <andrzejku> this is too primitive language

[06:35] *** salv0 joined
[06:40] *** Cabanossi left
[06:40] <samcv> ;_; C is not that bad. but for machine learning sounds like a lot of work. idk do you mean writing machine learning code. or writing the whole machine learning framework...

[06:40] <samcv> very different those two things

[06:41] *** Cabanossi joined
[06:42] *** mcmillhj joined
[06:42] <andrzejku> samcv: I want to start from code

[06:43] <andrzejku> just to play

[06:45] <Voldenet> hmm, C is not that different from python

[06:45] <Voldenet> but memory allocation in C is terrible

[06:46] <andrzejku> I am more C++ developer

[06:46] <andrzejku> however I am bad developer and alzy :P

[06:46] <andrzejku> and what I need to say writing all these mem****

[06:46] <tadzik> https://metacpan.org/pod/AI::NaiveBayes should be an easy port to p6 if you want to toy around

[06:47] <andrzejku> and size*

[06:47] <andrzejku> it idiot thing

[06:47] *** eroux joined
[06:47] *** mcmillhj left
[06:48] <Voldenet> Frodo: "Speak 'segfault' and exit. What's the linux word for segfault?" Gandalf: "Malloc!"

[06:48] <tadzik> %)

[06:50] <kurahaupo__> andrzejk_: you're looking at it as if it were a dialect of C++. A better perspective would be to consider it a smarter version of assembly language

[06:51] <tadzik> just treat each * as another layer in the stack of map<string, vector<map<string, int>>> ;)

[06:51] <Voldenet> kurahaupo__: C can be a wonderful language, but one would need to write a lot of low-level stuff to start high-level stuff

[06:51] <kurahaupo__> Voldenet: agreed

[06:51] <Voldenet> asm can't be a wonderful language

[06:51] <Voldenet> ever

[06:51] <Voldenet> you can't get very comfy with its features or syntax

[06:53] <Voldenet> it's the language that can't really help you anyhow, but is ready to punch you in the face in case you're doing something wrong

[06:54] *** kurahaupo__ is now known as kurahaupo

[06:58] *** imcsk8 joined
[06:58] *** imcsk8_ left
[06:58] *** mcmillhj joined
[07:03] *** mcmillhj left
[07:09] *** Cabanossi left
[07:11] *** Cabanossi joined
[07:16] *** mcmillhj joined
[07:17] *** wamba joined
[07:21] *** mcmillhj left
[07:28] <Voldenet> a propos C, is there any option to do this with perl6? http://perldoc.perl.org/perlembed.html#Adding-a-Perl-interpreter-to-your-C-program

[07:29] <moritz> there must be, because somehow Inline::Perl6 (Perl 5 module) works

[07:32] <Voldenet> https://st.aticpan.org/source/NINE/Inline-Perl6-0.08/Perl6.xs

[07:32] <Voldenet> golden egg found ;)

[07:32] *** domidumont left
[07:33] *** kybr left
[07:34] *** domidumont joined
[07:35] *** domidumont left
[07:36] *** mcmillhj joined
[07:36] *** rindolf joined
[07:36] *** domidumont joined
[07:39] *** Cabanossi left
[07:41] *** mcmillhj left
[07:41] *** Cabanossi joined
[07:42] *** cpage_ left
[07:42] <El_Che> tha way my shell tells me I've done too much perl6: "No command 'perl5' found, did you mean: ..."

[07:43] <masak> at that point, I'd set up an alias or a symlink

[07:45] *** kyan left
[07:46] *** Tonik left
[07:47] *** g4 joined
[07:52] *** mcmillhj joined
[07:53] <Voldenet> El_Che: haha, happens for me too

[07:57] *** darutoko left
[07:57] *** mcmillhj left
[07:59] *** ChoHag joined
[08:05] *** kurahaupo left
[08:05] *** kurahaupo__ joined
[08:05] *** kurahaupo__ left
[08:06] *** kurahaupo__ joined
[08:06] *** kurahaupo__ left
[08:08] *** Cabanossi left
[08:11] *** Cabanossi joined
[08:11] *** mcmillhj joined
[08:15] *** espadrine_ joined
[08:16] *** mcmillhj left
[08:17] *** ufobat left
[08:19] *** zakharyas joined
[08:20] *** ryan_ joined
[08:22] *** mcmillhj joined
[08:25] *** [particle] joined
[08:25] *** cpage_ joined
[08:25] *** parv joined
[08:27] *** mcmillhj left
[08:28] <timotimo> moritz: i was under the impression that no serious machine learning was done off of the gpu, and so C isn't what you want at all?

[08:29] *** espadrine_ left
[08:30] <moritz> timotimo: you really want something with pluggable backends, so that you can test on your dev machine, and then run on GPUs in production

[08:30] <timotimo> your dev machine doesn't have a gpu? :)

[08:30] <jast> depends very much on the structure of your problem. if you need to process a lot of data continuously, for instance, shoveling it between CPU and GPU adds a lot of overhead, plus not all classes of algorithms are easily vectorized

[08:31] *** labster left
[08:31] *** ufobat joined
[08:31] <jast> for the same reason, it can make sense to do pre-processing on the CPU and push things through your model on the GPU, to avoid one round trip

[08:33] <timotimo> is OpenCL-on-CPU common for things that don't benefit a lot from the gpu?

[08:34] <jast> I'm not really up-to-date on the performance side of things. I guess the only reason to do that is to simplify your code, do everything using the same API

[08:34] <timotimo> mhm

[08:34] <timotimo> except nobody uses OpenCL and everybody uses cuda for some reason

[08:36] <jast> don't ask me why

[08:36] <timotimo> they rushed to market and have some extra tools or something

[08:36] <jast> if I wanted extra tools I'd use Java

[08:43] *** robertle left
[08:47] <gfldex> anybody here who managed to use api.travis-ci.org to sync the repo list with github?

[08:47] *** nowan_ joined
[08:47] <timotimo> and QSharedPointer

[08:47] <timotimo> oh, wrong window

[08:48] *** vendethiel joined
[08:49] *** nowan left
[08:49] *** Sound joined
[08:49] *** Sound is now known as Guest71312

[08:52] *** mcmillhj joined
[08:53] *** Guest71312 left
[08:57] *** mcmillhj left
[09:03] *** wamba left
[09:05] *** bjz joined
[09:08] *** wamba joined
[09:08] *** Cabanossi left
[09:11] *** Cabanossi joined
[09:13] *** xtreak left
[09:13] *** xtreak joined
[09:18] *** xtreak left
[09:20] *** mcmillhj joined
[09:22] *** AlexDaniel left
[09:25] *** mcmillhj left
[09:35] *** mcmillhj joined
[09:41] *** mcmillhj left
[09:42] *** lowbro left
[09:47] *** parv left
[09:49] *** pistacchio joined
[09:50] *** xtreak joined
[09:51] *** gdonald left
[09:51] *** gdonald joined
[09:52] *** mcmillhj joined
[09:53] <pistacchio> hi, i'm having trouble with grammars. how do i match "any text till an optional space optionally followed by any text till a new line?" this is what i'm trying: https://glot.io/snippets/eohyruz8wd

[09:57] *** mcmillhj left
[10:06] *** mcmillhj joined
[10:07] *** ufobat left
[10:09] *** Cabanossi left
[10:09] <moritz> \N*\n

[10:10] <moritz> or rather \N* $$

[10:10] <jnthn> I think the problem is that your token doesn't seem to be matching the space anywhere

[10:11] *** mcmillhj left
[10:11] <jnthn> ' '? would be an optional space

[10:11] <moritz> unless there's a constraint somewhere that the "any text" may not contain spaces

[10:11] *** Cabanossi joined
[10:13] <pistacchio> so, why does the space require being specified between path and regex but not between recursive and path?

[10:13] <pistacchio> also

[10:13] <pistacchio> { ^^ <recursive>? <path> (\s+ <rgx>)? }

[10:13] <pistacchio> this

[10:13] <pistacchio> still greps "regex" as part of path

[10:15] <jnthn> Because path is \N+ which means "not a newline"

[10:15] <jnthn> Try \S+ instead

[10:16] *** mcmillhj joined
[10:18] <pistacchio> now i get Nil

[10:18] <pistacchio> https://glot.io/snippets/eohzibv3zh

[10:21] *** mcmillhj left
[10:22] <jnthn> 'cus you aren't matching the space after the * at the start, and before the path

[10:22] <jnthn> Try a \s+ after the <recursive>?

[10:22] <jnthn> Or \s* maybe, dunno how the output looks :)

[10:22] <jnthn> uh, input

[10:22] <jnthn> (In the general case, I mean)

[10:23] <jnthn> Also, you may find a module like Grammar::Tracer useful in helping figure out where grammars fail to match

[10:32] *** ufobat joined
[10:38] *** Cabanossi left
[10:41] *** Cabanossi joined
[10:46] *** mcmillhj joined
[10:50] <Ulti> with the version pragmas if you give nothing at all is the implication latest language feature set?

[10:50] <Ulti> at least latest stable

[10:50] <jnthn> Ulti: Yes

[10:51] *** mcmillhj left
[10:51] *** lowbro joined
[10:51] *** lowbro left
[10:51] *** lowbro joined
[10:51] * Ulti sighs relief from imagining Perl 5 feature hell

[10:52] <Ulti> which is increasingly less hellish in fairness

[10:53] *** Voldenet left
[10:53] <Ulti> things moving from experimental or getting properly thrown away is kind of great in the last couple of releases

[10:56] *** bjz_ joined
[10:57] *** wamba left
[10:58] *** Voldenet joined
[10:58] *** Voldenet left
[10:58] *** Voldenet joined
[10:58] *** mcmillhj joined
[10:58] *** bjz left
[11:03] *** mcmillhj left
[11:08] *** mcmillhj joined
[11:12] *** ryan_ left
[11:13] *** mcmillhj left
[11:17] *** ryan_ joined
[11:21] *** xtreak left
[11:24] *** xtreak_ joined
[11:24] *** xtreak_ left
[11:24] *** ChoHag left
[11:25] *** mcmillhj joined
[11:30] *** mcmillhj left
[11:37] *** domidumont left
[11:38] *** bjz joined
[11:38] *** domidumont joined
[11:39] *** bjz_ left
[11:41] *** pmurias joined
[11:42] *** domidumont left
[11:43] *** domidumont joined
[11:44] *** domidumont left
[11:44] *** domidumont joined
[11:46] *** pistacchio left
[11:46] <Geth> ¦ ecosystem: 7ojo++ created pull request #313: Add Platform to ecosystem

[11:46] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/313

[11:47] <Geth> ¦ ecosystem: a678423ed2 | (Jarkko Haapalainen)++ | META.list

[11:47] <Geth> ¦ ecosystem: Add Platform to ecosystem

[11:47] <Geth> ¦ ecosystem: 

[11:47] <Geth> ¦ ecosystem: See https://github.com/7ojo/perl6-platform

[11:47] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/a678423ed2

[11:47] <Geth> ¦ ecosystem: d020ee2150 | (Carl Mäsak)++ | META.list

[11:47] <Geth> ¦ ecosystem: Merge pull request #313 from 7ojo/patch-1

[11:47] <Geth> ¦ ecosystem: 

[11:47] <Geth> ¦ ecosystem: Add Platform to ecosystem

[11:47] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/d020ee2150

[11:53] *** kybr joined
[11:56] *** mcmillhj joined
[11:57] *** raschipi joined
[12:00] *** ryan_ left
[12:01] *** mcmillhj left
[12:01] *** ChoHag joined
[12:29] *** mcmillhj joined
[12:29] *** wamba joined
[12:30] *** obfusk joined
[12:31] *** obfusk_ left
[12:34] *** mcmillhj left
[12:35] *** AndyDee joined
[12:49] *** mcmillhj joined
[12:53] *** Cabanossi left
[12:56] *** Cabanossi joined
[13:00] *** bjz left
[13:03] *** araraloren joined
[13:07] *** kurahaupo joined
[13:10] *** bjz joined
[13:14] <araraloren> How can I access argv[0] passed by C function execlp (man 3 execlp), $*PROGRAM-NAME is not what i want, seems like it always script name.

[13:16] <jnthn> Maybe $*EXECUTABLE

[13:17] <jnthn> (If you're not expecting the script name, I'm guessing you are after the Perl 6 interpreter name?)

[13:18] <raschipi> "man perl6" doesn't have enough hype.

[13:19] *** wamba left
[13:27] *** adu joined
[13:27] *** Ven joined
[13:27] *** Ven is now known as Guest87256

[13:31] <araraloren> jnthn, No, It is the first argument as argv[0] in **C** ( int main(int argc, char* argv[]) ), I use execlp('p6script-path', 'argv[0]', ..., NULL) execute p6 script

[13:32] <araraloren> I print $*PROGRAM-NAME out, it always script name, not "argv[0]" which passed by use execlp

[13:33] *** Guest87256 left
[13:33] *** Ven_ joined
[13:35] *** Ven_ left
[13:37] *** skids joined
[13:37] *** sena_kun joined
[13:38] <jnthn> araraloren: If it's not one of those two, then no idea. perl6 is actually a shell script that invokes the VM; I note in that script it does my $tag = "Upload $!ids.pull-one()"; $!output.debug($tag, "Starting $local-path -> $user\@$host:$remote-path");

[13:38] <jnthn> oops

[13:39] <jnthn> I note in that script it does --execname="$0"

[13:39] <jnthn> And I think that's what ends up in $*EXECUTABLE

[13:42] *** kb__ joined
[13:49] <araraloren> jnthn, A little understand, and I also tried python and perl5, no idea get that value.

[13:49] <araraloren> Fortunately, we almostly not need that 

[13:52] <raschipi> What do expect to find?

[13:52] <mls> seems like there's no way to get that value from the shell

[13:53] <timotimo> when you execlp, is there even a shell involved?

[13:53] <mls> yes, that little /usr/bin/perl6 shell script

[13:54] <mls> the problem is that $0 in the shell is not argv[0], but set to the name of the script

[13:55] <mls> i.e. it's always /usr/bin/perl6 or something like that

[13:55] *** awwaiid joined
[13:56] <jnthn> Aha

[13:56] <jnthn> So short of us moving away from having the shell script, there's probably not a fix?

[13:56] <araraloren> $*PORGRAM-NAME is $0 in perl5

[13:56] *** bjz left
[13:57] <mls> I don't think there is. I glanced through the bash source, and I don't think there's a way to access argv[0]

[13:57] *** kb__ left
[13:58] <huf> what's $0?

[13:58] <araraloren> It's no idea, maybe ..

[13:58] <raschipi> The irst word in the system call that executes the program.

[13:58] <huf> oh, $0 is compromised :)

[13:58] <raschipi> first*

[14:00] <pmurias> if EN QUAD is canonicall equivalent  to EN SPACE MoarVM just turns it into that?

[14:03] <timotimo> i believe so?

[14:03] <timotimo> i know you can't trip up perl6ers with the greek question mark

[14:12] <mls> hmm, I can't access argv[0] from perl5 and python as well. They all clobber it with the script name 

[14:12] <mls> so perl6 is not that different ;)

[14:13] <raschipi> I think this i an XY problem, to be honest.

[14:14] <timotimo> feels a little bit like that

[14:16] *** llfourn_ left
[14:19] *** ChoHag left
[14:19] <[Coke]> pmurias: if you look up GREEK QUESTION MARK - whatever flag that has that turns it into a semicolon, that should work for other chars too

[14:19] *** llfourn joined
[14:20] <[Coke]> m: "\c[EN QUAD]".uninames.say

[14:20] <camelia> rakudo-moar 833c29: OUTPUT: «(EN SPACE)␤»

[14:20] *** AlexDaniel joined
[14:22] *** ChoHag joined
[14:23] <[Coke]> ... is there a way to get the uninames from a codepoint?

[14:23] <timotimo> of course

[14:23] <timotimo> m: say 0xff12.uniname

[14:23] <camelia> rakudo-moar 833c29: OUTPUT: «FULLWIDTH DIGIT TWO␤»

[14:24] <[Coke]> (is there ever a way to get GREEK QUESTION MARK back as the response? Not with a Str..)

[14:24] <[Coke]> timotimo: danke.

[14:25] <timotimo> there were speculations about Str objects that don't have NFG in them

[14:25] <timotimo> and by speculation i don't mean back when we were writing the specs

[14:25] *** itaipu joined
[14:25] <pmurias> m: "\c[GREEK QUESTION MARK]".uninames.say

[14:25] <camelia> rakudo-moar 833c29: OUTPUT: «(SEMICOLON)␤»

[14:26] *** lowbro left
[14:28] <mls> (to wrap up the $0 issue: actually it's the kernel that drops argv[0] for #! scripts.)

[14:28] <[Coke]> m: "\c[HEBREW LIGATURE YIDDISH YOD YOD PATAH]".uninames.say

[14:28] <camelia> rakudo-moar 833c29: OUTPUT: «(HEBREW LIGATURE YIDDISH DOUBLE YOD HEBREW POINT PATAH)␤»

[14:29] *** kurahaupo__ joined
[14:30] *** andrzejku left
[14:31] *** wamba joined
[14:32] *** g4 left
[14:39] *** pmurias left
[14:40] *** domidumont left
[14:43] <raschipi> When we have pre-compiled binaries, we can add a binfmt in linux and have it not use the #! mechanism to execute Moar bytecode, even though it's not in ELF format. The same is usually already configured for the JVM in distros.

[14:44] <ilmari> m: my $¢ = 42

[14:44] <camelia> rakudo-moar 833c29: OUTPUT: «Potential difficulties:␤    Redeclaration of symbol '$¢'␤    at <tmp>:1␤    ------> 3my $¢7⏏5 = 42␤»

[14:45] <ilmari> m: say $¢ = 42

[14:45] <camelia> rakudo-moar 833c29: OUTPUT: «42␤»

[14:45] <ilmari> huh

[14:46] <raschipi> m: say $¢.WHAT

[14:46] <camelia> rakudo-moar 833c29: OUTPUT: «Nil␤»

[14:46] <ilmari> m: say $¥ = 42

[14:46] <camelia> rakudo-moar 833c29: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Name must begin with alphabetic character␤at <tmp>:1␤------> 3say $7⏏5¥ = 42␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        s…»

[14:46] <raschipi> m: say dd $¢

[14:46] <camelia> rakudo-moar 833c29: OUTPUT: «Nil $¢ = Nil␤Nil␤»

[14:47] <ilmari> ¢ is just as litte an alphabetic as ¥ is (they're both Symbol, Currency)

[14:48] <raschipi> The first one is apparently defined by the interpreter, it has no problems defining  puntuation variables.

[14:50] <ilmari> oh, + '$¢' in grammars now refers to the current cursor

[14:50] <timotimo> yup

[14:50] <timotimo> that's a changelog entry? must be from 2013 or earlier

[14:50] <ilmari> since 2015.09

[14:50] <timotimo> wow, that late?

[14:51] <ilmari> the docs.perl6.org search doesn't find it

[14:52] *** wamba left
[14:54] <timotimo> time for a doc ticket

[14:55] *** buggable left
[14:58] <[Coke]> I think someone just recently opened a ticket for $¢

[14:58] <timotimo> a doc ticket, i assume?

[14:59] *** buggable joined
[14:59] *** ChanServ sets mode: +v buggable

[15:00] *** buggable left
[15:01] *** buggable joined
[15:01] *** ChanServ sets mode: +v buggable

[15:02] *** buggable left
[15:02] *** buggable joined
[15:02] *** ChanServ sets mode: +v buggable

[15:02] <[Coke]> yes

[15:03] <[Coke]> https://github.com/perl6/doc/issues/1262

[15:03] *** buggable left
[15:04] *** buggable joined
[15:04] *** ChanServ sets mode: +v buggable

[15:04] *** buggable left
[15:06] *** khw joined
[15:08] <raschipi> I think the most surprising thing abou P6 is this: my @a := 1 but Positional;

[15:09] *** Sound joined
[15:09] *** Sound is now known as Guest15042

[15:12] *** obfusk left
[15:18] *** buggable joined
[15:18] *** ChanServ sets mode: +v buggable

[15:25] *** ChoHag left
[15:34] *** gdonald left
[15:34] *** gdonald joined
[15:37] *** Possum left
[15:37] *** nhywyll joined
[15:37] *** Possum joined
[15:40] *** Cabanossi left
[15:42] *** Cabanossi joined
[15:46] *** Guest15042 left
[15:48] *** Sound_ joined
[15:55] *** mcmillhj left
[15:56] *** pytuger left
[15:57] *** mcmillhj joined
[16:01] *** mcmillhj left
[16:05] *** zakharyas left
[16:09] *** perlpilot left
[16:10] *** mcmillhj joined
[16:11] *** araraloren left
[16:14] *** robertle joined
[16:15] *** sufrostico left
[16:15] *** pytuger joined
[16:15] *** pytuger left
[16:15] *** pytuger joined
[16:15] *** wamba joined
[16:15] *** mcmillhj left
[16:16] <gfldex> it seams that a .tap on an Proc::Async is sensitive to malformed utf-8. Is there a way to tell it not to?

[16:16] <gfldex> a try inside the tapping block does not catch it

[16:20] <gfldex> :bin does not help

[16:21] *** sufrostico joined
[16:25] <gfldex> :enc<utf8-c8> segfaults

[16:25] <gfldex> :enc<latin-1> seams to work

[16:25] *** andrei9999 joined
[16:26] <andrei9999> hi, I am a beginner. I want to learn the use of ARGFILES

[16:27] <raschipi> gfldex: I'm curious to know if it's doing some kind of normalization on the stream? Is it stuffing things into a Str or giving you a Buf to deal with?

[16:27] <andrei9999> when I say my $x = $*ARGFILES.path 

[16:27] *** ChoHag joined
[16:27] <andrei9999> the compiler refuses, says No such method 'IO' for invocant of type 'Any'

[16:28] <gfldex> i'm using `$s.stdout.lines.tap: { .say }` so it must parse as Str to get the lines.

[16:28] <andrei9999> but according to the manual ARGFILES extends IO::Handle which must have method path() ...

[16:28] *** mcmillhj joined
[16:29] <raschipi> gfldex: There's two places it could be failing due to malformed UTF-8: when it receives the Buf or when it normalizes it into the Str

[16:31] <gfldex> andrei9999: with an empty $*ARGFILES it defaults to Any, not an empty list of IO::Handle

[16:31] <gfldex> andrei9999: try $*ARGFILES.?path

[16:32] *** ChoHag left
[16:33] *** mcmillhj left
[16:33] <gfldex> raschipi: if you want to toy with it you need a malformed filename and the following code https://github.com/gfldex/perl6-proc-async-timeout/blob/master/example/basic.p6

[16:33] *** ChoHag joined
[16:34] *** ChoHag left
[16:37] <raschipi> I was toying with it the other day, using this file: http://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-test.txt

[16:39] *** Sound_ left
[16:40] *** perlpilot joined
[16:41] *** cpage_ left
[16:44] *** Zoffix joined
[16:44] *** mcmillhj joined
[16:46] <Zoffix> andrei9999: ARGFILES is unpolished ATM. Ignore that it inherits from IO::Path, it does it poorly. It doesn't set `.path`. You can what files were loaded by dumping @*ARGS

[16:48] <Zoffix> andrei9999: eof, get, lines, slurp, nl-in on is it all you can reliably use on it ATM and it'll very likely be replaced with IO::Cat in the next language version that properly inherits from IO::Handle with methods that don't make sense not being there.

[16:49] *** mcmillhj left
[16:50] *** sena_kun left
[16:50] <Zoffix> IO::Handle.lock() is not part of the language ATM and the Int:D argument from Rakudo's impl. is going await. Don't use it. 

[16:52] <andrei9999> What does abbreviation ATM mean?

[16:53] <Zoffix> andrei9999: At The Moment

[16:53] <raschipi> Automated teller machine

[16:54] <andrei9999> Thank you, I think I got it. What is the nearest analogue of Perl5  perl -pi.bak  -e'...' filename.txt ?

[16:54] <Zoffix> andrei9999: that "moment" being until the end of April, with the polished version available to be available under v6.d.PREVIEW afterwards (until v6.d release, which is when it'll be the default)

[16:56] <Zoffix> andrei9999: don't think we have the -i switch yet. I'd write it as perl6 -e 'for @*ARGS { "$_.bak".IO.spurt: .IO.slurp; .IO.spurt: .IO.slurp.subst(/^^...$$/, "blah") }' filename.txt

[16:57] <Zoffix> + :g in .subst :)

[16:57] <andrei9999> I understand, thanks so much!

[16:57] <Zoffix> andrei9999: oh, no need for slurp/spurt we have copy :)

[16:57] <andrei9999> copy $_ $_.bak   ?

[16:58] <Zoffix> andrei9999: don't think we have the -i switch yet. I'd write it as perl6 -e 'for @*ARGS».IO { .copy: "$_.bak"; .spurt: .slurp.subst(:g, /^^...$$/, "blah") }' filename.txt

[16:58] <Zoffix> ^ that

[16:59] <andrei9999> beautiful!

[17:01] <andrei9999> yes, it works, thank you

[17:01] <Zoffix> Cool.

[17:01] <Zoffix> One day, we'll add -i so it'll be shorter :)

[17:01] * Zoffix part

[17:02] *** Zoffix left
[17:02] *** mcmillhj joined
[17:03] <raschipi> Zoffix IRC->twitter bridge is working.

[17:07] *** mcmillhj left
[17:10] *** Cabanossi left
[17:10] *** eroux left
[17:11] *** Cabanossi joined
[17:13] *** nightfrog is now known as culb

[17:13] *** sena_kun joined
[17:16] *** nhywyll left
[17:18] *** mcmillhj joined
[17:20] *** culb is now known as nightfrog

[17:31] *** wamba left
[17:34] *** ufobat left
[17:42] *** zakharyas joined
[17:45] <tbrowder> hey, #perl6

[17:48] <raschipi> hi tbrowder 

[17:48] <tbrowder> i just pushed a new mod to github using the .travis.yml i use for other modules and got a problem: "- panda installdeps ." didn't install the test-depends "File::Temp", i had to add "- panda install File::Temp".  can we now use zef without extra install steps?  if so, hopefully it will do the "right thing"

[17:49] <tbrowder> hello, raschipi

[17:50] *** TeamBlast left
[17:50] <gfldex> tbrowder: this works for me https://github.com/gfldex/perl6-proc-async-timeout/blob/master/.travis.yml

[17:51] *** dct joined
[17:52] <tbrowder> gfldex: does it install all your dependencies including test-depends?

[17:53] *** TeamBlast joined
[17:53] <tbrowder> i'll try it anyhow--glad to see panda out of the travis requirements

[18:01] *** ufobat joined
[18:05] *** ggoebel left
[18:10] *** gdonald left
[18:10] *** gdonald joined
[18:22] <tbrowder> gfldex: thanks, works for me, too.  however, it looks like there was some test duplication since i see the module in question being tested twice. i'm trying a slightly different approach after looking at the zef options--will report. 

[18:24] <raschipi> People with Autism, I want to send a message to you: you are appeciated and the world is better because of oyu.

[18:31] *** espadrine_ joined
[18:36] <geekosaur> appreciated

[18:37] *** giraffe joined
[18:40] *** Cabanossi left
[18:41] *** lostinfog joined
[18:41] *** Cabanossi joined
[18:48] *** AlexDani` joined
[18:48] *** zakharyas left
[18:51] *** AlexDaniel left
[18:54] *** AlexDani` is now known as AlexDaniel

[19:03] *** imcsk8 left
[19:12] *** imcsk8 joined
[19:14] *** itaipu left
[19:19] *** obfusk joined
[19:39] *** Cabanossi left
[19:41] *** Cabanossi joined
[19:41] *** yqt joined
[19:43] *** pytuger left
[19:45] *** g0d355__ joined
[19:48] <tbrowder> gfldex: aha, i'm correct. here is my latest .travis.yml: <https://github.com/tbrowder/Proc-More-Perl6/blob/master/.travis.yml>

[19:50] *** khw left
[19:51] *** cpage_ joined
[19:54] <tbrowder> the difference is, as far as i can tell, is that "- zef install ." does a normal installation which fully tests the module, but then the master build script then runs  the command "PERL6LIB=lib prove -v -r --exec=perl6 t/" which runs the module's tests again.  when I instead use "- zef  install --depsonly ." zef quits after testing and installing only the

[19:54] <tbrowder> module's dependencies, so the module's tests get run only at the end buy the build script, thus saving a minuscule amount  of time and energy.

[19:54] <tbrowder> s/buy/by/

[19:56] *** andrzejk_ left
[19:57] <gfldex> tbrowder: please note that installing from the ecosystem is no the same as `git pull; zef install .` as I had to learn the hard way.

[19:58] <gfldex> tbrowder: i solved this problem and bitrot testing as described here https://gfldex.wordpress.com/2017/01/20/once-a-week/

[20:00] *** mcmillhj left
[20:01] <gfldex> i should add a meta.t

[20:06] <tbrowder> okay, but i don't use the Build command, so i guess my work flow is different.  i did see yr blog but didn't look very closely because i don't use build or cron.  I do all development on my master branch and try to keep the travis build passing.  i make separate releases that are used by the ecosystem and zef, and I ensure they are passing before release. 

[20:06] <tbrowder> @ugexe suggested that and it has worked well. no regular user should find my tests not working if using zef with the ecosystem.  what i haven't done is add a warning to my all my READMEs NOT to clone my module repos unless you want to help development.  normal users should just "zef install Tbrowders::ModuleX".

[20:08] <tbrowder> s/my all my/all my/

[20:08] <gfldex> you can tell a travis cron job to build a given branch, what might help to spot bitrot

[20:09] *** Cabanossi left
[20:10] <tbrowder> well, as i said i am always on the master branch and ensure that last commit passes before cutting a release.  only releases are put in the ecosystem, so they are insulated from continuing development until the next release.

[20:11] *** Cabanossi joined
[20:11] <tbrowder> so there should be no bitrot on a release, just lurking bugs which the user should report if he finds one.

[20:15] <gfldex> travis is testing with bleeding rakudo. Bitrot rare originates from the code it hits.

[20:16] <gfldex> what also means we should test against latest star as well

[20:24] <andrei9999> About string quoting. The Japanese angular brackets #xff62 and #xff63  --- what exactly do they do? It seems that they transform ' into the word quote  .    is that right?  how to insert absolutely literally ?

[20:25] <gfldex> andrei9999: see https://docs.perl6.org/language/quoting#Literal_strings:_Q

[20:31] <andrei9999> Sorry, that was my confusion...

[20:32] *** gdonald left
[20:33] *** gdonald joined
[20:33] <andrei9999> In fact, it works perfectly

[20:34] *** Tonik joined
[20:42] *** yqt left
[20:44] <Geth> ¦ doc: 8330d72243 | (Tom Browder)++ | doc/Language/io.pod6

[20:44] <Geth> ¦ doc: add info on other file routines

[20:44] <Geth> ¦ doc: 

[20:44] <Geth> ¦ doc: also add simple example and links to more detailed docs

[20:44] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8330d72243

[20:47] <tbrowder> gfldex: you're right of course, i didn't think of changes in rakudo!  i'll go study yr blog more closely.

[20:52] *** dct left
[20:55] *** Cabanossi left
[20:56] *** Cabanossi joined
[20:57] *** skids left
[21:02] *** ufobat left
[21:02] *** bjz joined
[21:06] *** raschipi left
[21:08] *** robertle left
[21:08] *** rindolf left
[21:12] <Geth> ¦ doc: 8ae1298845 | (Tom Browder)++ | doc/Language/io.pod6

[21:12] <Geth> ¦ doc: move file copy. etc., to a more appropriate place

[21:12] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8ae1298845

[21:20] *** RabidGravy left
[21:23] <Geth> ¦ doc: 2e7b007127 | (Tom Browder)++ | doc/Language/io.pod6

[21:23] <Geth> ¦ doc: use file-consistent heading format

[21:23] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/2e7b007127

[21:37] *** cpage_ left
[21:38] <Geth> ¦ doc: a01a18e4d6 | (Tom Browder)++ | doc/Language/io.pod6

[21:38] <Geth> ¦ doc: move copy chunk again, tidy comments

[21:38] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a01a18e4d6

[21:39] *** cdg joined
[21:42] *** rpburkholder joined
[21:44] *** bjz left
[21:50] *** Tonik left
[21:54] <gfldex> ugexe: i wonder if zef should honor .gitignore while installing binaries

[22:00] *** sena_kun left
[22:02] *** cdg left
[22:08] *** alimon left
[22:13] *** tyil left
[22:13] *** tyil joined
[22:17] *** travis-ci joined
[22:17] <travis-ci> Doc build passed. Tom Browder 'move copy chunk again, tidy comments'

[22:17] <travis-ci> https://travis-ci.org/perl6/doc/builds/217353909 https://github.com/perl6/doc/compare/2e7b00712758...a01a18e4d6e6

[22:17] *** travis-ci left
[22:18] *** maxp_ joined
[22:23] <maxp_> A very simple question... The extension of perl6 program must be .pl, .p6 or .pl6? Because in the examples and docs there are 3 different extensions.

[22:23] <maxp_> And for modules? .pm or .pm6?

[22:24] <AlexDaniel> maxp_: .pl and .pm are perhaps not the best choice because perl5 is using them

[22:24] *** pytuger joined
[22:24] <AlexDaniel> maxp_: .p6 and .pm6 works fine, .pl6 is not bad also

[22:25] *** lostinfog left
[22:26] <AlexDaniel> maxp_: there was a discussion about this here: https://github.com/perl6/doc/issues/778

[22:27] *** espadrine_ left
[22:27] <maxp_> ok thank you very much

[22:29] <ugexe> gfldex: .gitignore is not part of a perl6 distribution

[22:32] <ugexe> its not really difficult to do with a regular distribution object:

[22:32] <ugexe> my $dist = Distribution::Path.new($*CWD) but role :: { method meta { my %meta = callsame(); %meta<files> = grep { $_.key !~~ /\.pm6$/ }, %meta<files>.hash; %meta; }; }; say $dist.meta<files>

[22:34] <gfldex> ugexe: I ended up with a .swp in a /bin/ and that should not go there. We don't got that problem with modules because those are listed in the META6.info. But for binaries we do a fetch all.

[22:41] <ugexe> you could end up with a .swp for non-git directories too though

[22:44] *** bjz joined
[22:48] *** wamba joined
[22:54] *** Cabanossi left
[22:56] *** Cabanossi joined
[23:00] *** cyphase joined
[23:02] <ugexe> if bin/ could only contain perl6 code it could give us a much better filter at least, as I suppose we could just try to compile each file in bin/

[23:03] <gfldex> a .swp would most likely compile :)

[23:03] <timotimo> gfldex: i'm surprised it'd explode with encoding trouble; what version of rakudo and moarvm are you on for that, and can you paste code that reproduces it? like, can i just Proc::Async a cat on /dev/urandom or something?

[23:03] <ugexe> heh good point

[23:05] <gfldex> timotimo: i'm using bleeding. I need to think about a way to reproduce as the invalid utf-8. It's in a filename (that I keep around to trigger such bugs).

[23:05] *** labster joined
[23:06] <gfldex> tar tends to be helpful when it comes to screw up file systems

[23:06] <gfldex> I'm required to be at work tomorrow but likely wont have much work to do. Plenty of time to think.

[23:09] <timotimo> understood

[23:09] <timotimo> i'll head towards bed now, seeya!

[23:18] *** maxp_ left
[23:27] *** BenGoldberg joined
[23:27] *** skids joined
[23:32] *** cyphase left
[23:36] *** cpage_ joined
[23:37] *** cyphase joined
[23:39] *** Cabanossi left
[23:41] *** Cabanossi joined
[23:47] *** cyphase left
[23:50] <AlexDaniel> …

[23:51] <AlexDaniel> yes, writing a small web scraper in perl 6 was a horrible idea…

[23:52] <BenGoldberg> Why?

[23:52] *** cyphase joined
[23:52] <AlexDaniel> oh wait, maybe if I run(‘curl’, …) instead of using HTTP::UserAgent it will stop leaking 20MB per fetched page

[23:54] <AlexDaniel> BenGoldberg: I've been banging my head against RT #131003 for a while, then I decided to switch to python-gumbo (through Inline::Python), and that works fine, except that just downloading something leaks memory (without even parsing)

[23:54] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131003

[23:55] <AlexDaniel> if run(‘curl’, …) doesn't fix it so that I can go through least 200 pages, I give up

[23:55] <AlexDaniel> at

[23:57] <AlexDaniel> or… I don't know… might save the state and rerun the whole thing. Who cares about added startup delay, at least it will finish my thing

[23:59] *** cyphase left
