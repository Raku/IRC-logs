[00:00] *** raschipi joined
[00:00] *** dwarring joined
[00:00] *** MasterDuke joined
[00:00] *** zoll joined
[00:00] <ijneb> What was all of that Netsplit stuff about?

[00:00] <brimonk> AlexDaniel: Where do I do that, and where are the instructions for how to do that?

[00:00] <timotimo> it's an IRC thing; an IRC network ("freenode", "oftc", "ircnet") is made up of many servers which are interconnected

[00:01] <AlexDaniel> huggable: rakudobug

[00:01] <huggable> AlexDaniel, Report bugs by emailing to [email@hidden.address]
[00:01] <AlexDaniel> hm… that's not very instructional

[00:01] <ijneb> timotimo: Ah, never knew freenode did that

[00:01] <timotimo> if one of these servers goes down and that happens to split the whole network in half (because not all servers are connected to every other server in the network)

[00:01] *** ChanServ sets mode: +vvvv ZofBot buggable NeuralAnomaly huggable

[00:01] <timotimo> you get a netsplit where a whole bunch of users are suddenly no longer reachable from your position

[00:02] <AlexDaniel> huggable: rakudobug :is: Report bugs by emailing to [email@hidden.address] See also: https://github.com/rakudo/rakudo/wiki/rt-introduction

[00:02] <huggable> AlexDaniel, Added rakudobug as Report bugs by emailing to [email@hidden.address] See also: https://github.com/rakudo/rakudo/wiki/rt-introduction

[00:02] <ijneb> Neat

[00:02] <AlexDaniel> brimonk: basically, you just write an email to [email@hidden.address] that's it

[00:02] *** dubi0us left
[00:02] <brimonk> AlexDaniel: And I should take that zef output and just say, "I was trying to install DBIish, and I got this error, here's the version of my things"

[00:03] <brimonk> That it?

[00:03] <AlexDaniel> brimonk: yes! Also include bisectable6's answer to me

[00:03] *** tomaw joined
[00:03] *** parisba is now known as Guest17156

[00:04] *** simcop2387 left
[00:04] *** simcop2387 joined
[00:04] <AlexDaniel> brimonk: what happened is that it did binary search over the commit history, and found that the behavior changed on https://github.com/rakudo/rakudo/commit/46ef1b5b48dd51a47a7de70d4740bcea9779a104

[00:04] <AlexDaniel> for example

[00:04] *** xxpor joined
[00:04] <AlexDaniel> commit: 46ef1b5b48dd5^ https://gist.githubusercontent.com/AlexDaniel/1e2c456f006687ea7100a35b2931af41/raw/9aad30ec83728b43b5d1d134a4c0701354e2c8c5/nativehelpers-test.p6

[00:04] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[00:04] <committable6> AlexDaniel, https://gist.github.com/d4308db19dca64d163637c95c2fa3381

[00:04] <AlexDaniel> that's before that commit

[00:04] <AlexDaniel> commit: 46ef1b5b48dd5 https://gist.githubusercontent.com/AlexDaniel/1e2c456f006687ea7100a35b2931af41/raw/9aad30ec83728b43b5d1d134a4c0701354e2c8c5/nativehelpers-test.p6

[00:04] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[00:04] *** ennio left
[00:04] <committable6> AlexDaniel, https://gist.github.com/516d327afa00080e4c5fff77ba167220

[00:04] <AlexDaniel> and that's after

[00:05] *** giraffe joined
[00:05] *** giraffe is now known as Guest83487

[00:06] *** |oLa|1 left
[00:06] *** protium joined
[00:06] *** BenGoldberg joined
[00:07] <AlexDaniel> by the way, who was that wonderful person who gave me a clue that I can use bisectable with modules?

[00:08] <ugexe> m: use Zef; # me ?

[00:08] <camelia> rakudo-moar 231cb3: ( no output )

[00:09] *** dubi0us joined
[00:09] *** mienaikage joined
[00:10] <AlexDaniel> ugexe: oh, I think so!

[00:10] * AlexDaniel sends virtual hugs

[00:11] <AlexDaniel> ugexe: thing is, whateverable already has all of the modules cloned (this is needed for greppable), so no Zef hackery is required :)

[00:11] <AlexDaniel> you just have to use lib the right path

[00:12] <ugexe> m: use Zef::Client; use Zef::Config; my $client = Zef::Client.new(:config(Zef::Config::parse-file(Zef::Config::guess-path()))); my CompUnit::Repository @to = CompUnit::RepositoryRegistry.repository-for-name("home"); my $candi = $client.search("CSV::Parser").head; say $client.install($candi, :!test, :@to);

[00:12] <AlexDaniel> scary, I know! But we just had a rather useful bisectable result with this :)

[00:12] <AlexDaniel> e: use Zef

[00:12] <evalable6> AlexDaniel, rakudo-moar 231cb3f5f: OUTPUT: «(exit code 1) ===SORRY!===␤Could not find Zef at line 1 in:␤    /home/bisectable/git/whate…»

[00:13] <evalable6> AlexDaniel, Full output: https://gist.github.com/9f76e948639597b105ef69712824f407

[00:13] <camelia> rakudo-moar 231cb3: OUTPUT: «(timeout)»

[00:13] <AlexDaniel> :P :P :P

[00:14] *** dubi0us left
[00:16] <brimonk> AlexDaniel: bug report sent.

[00:16] <ugexe> m: use CSV::Parser;

[00:16] <camelia> rakudo-moar 231cb3: ( no output )

[00:17] <AlexDaniel> ugexe:that's actually interesting. Didn't it kill it after a timeoet?

[00:17] <AlexDaniel> timeout :)

[00:18] <ugexe> precomp happens after its already installed

[00:18] *** dubi0us joined
[00:19] <brimonk> Is there a way to execute my perl script within a debugger like I used to in perl5?

[00:19] <AlexDaniel> brimonk: thank you very much for your report!

[00:20] <brimonk> AlexDaniel: Anything for you!

[00:20] <brimonk> Wait, does that mean that you literally just fixed it?

[00:20] <AlexDaniel> no

[00:20] <brimonk> What did you do then?

[00:22] <AlexDaniel> .tell nine Can you take a look at RT #131898? It looks scary, I'd say a blocker. Please tell me what you think.

[00:22] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131898

[00:22] <yoleaux> AlexDaniel: I'll pass your message to nine.

[00:22] <AlexDaniel> brimonk: the bot has rakudo built on *all* commits, so you can ask the bot when something got broken

[00:23] <AlexDaniel> brimonk: it will run the code you provide on a bunch of builds and figure it out for you

[00:23] <ugexe> calling it a block might be a stretch - if you actually look at the code in question is already defined in a global scope elsewhere so the code itself is not exactly kosher (even if it should technically work)

[00:23] <AlexDaniel> brimonk: 46ef1b5b48dd5 is a commit that changed the behavior, so if you compile rakudo on something older, then it works :)

[00:25] *** tadzik joined
[00:25] *** mack[m] joined
[00:25] *** M-Illandan joined
[00:25] *** tyil[m] joined
[00:25] *** unclechu joined
[00:25] *** Matthew[m] joined
[00:25] *** wictory[m] joined
[00:25] *** ilmari[m] joined
[00:26] *** xui_nya[m] joined
[00:26] *** CIAvash[m] joined
[00:26] <AlexDaniel> ugexe: maybe you are right. That said, DBIish is one of the most popular modules I think, so we should do something about it one way or another

[00:27] <AlexDaniel> we can fix the module instead, that would work too

[00:29] *** pierre_ joined
[00:29] *** notostraca is now known as TEttinger

[00:35] *** lookatme joined
[00:35] <lookatme> morning

[00:39] *** huf joined
[00:43] *** Cabanossi left
[00:45] *** Cabanossi joined
[00:55] *** dwarring left
[00:59] <hythm> m: $[Array[Str].new("Hello", "Perl 6"),]

[00:59] <camelia> rakudo-moar 231cb3: ( no output )

[01:00] <hythm> :m say $[Array[Str].new("Hello", "Perl 6"),]

[01:00] <hythm> m: say $[Array[Str].new("Hello", "Perl 6"),]

[01:00] <camelia> rakudo-moar 231cb3: OUTPUT: «[[Hello Perl 6]]␤»

[01:01] <hythm> How to flatten this array to get (Hello", "Perl 6") Array items?

[01:03] <raschipi> m: say $[Array[Str].new("Hello", "Perl 6"),].flat.map(*.Slip).join("|")

[01:03] <camelia> rakudo-moar 231cb3: OUTPUT: «Hello|Perl 6␤»

[01:04] <hythm> Thanks raschipi

[01:04] <AlexDaniel> m: say gather [["Hello", "Perl 6"],]».take

[01:04] <raschipi> m: say $[Array[Str].new("Hello", "Perl 6"),]map(*.Slip).join("|")

[01:04] <camelia> rakudo-moar 231cb3: OUTPUT: «(Hello Perl 6)␤»

[01:04] <camelia> rakudo-moar 231cb3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3ay $[Array[Str].new("Hello", "Perl 6"),]7⏏5map(*.Slip).join("|")␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤       …»

[01:05] <raschipi> m: say $[Array[Str].new("Hello", "Perl 6"),].map(*.Slip).join("|") #one too many previously

[01:05] <camelia> rakudo-moar 231cb3: OUTPUT: «Hello|Perl 6␤»

[01:07] <raschipi> » is like .map but it parallelizes things, so it won't keep the order of the itens...

[01:08] <raschipi> Or am I confused with .race?

[01:09] <raschipi> Oh yes, » preserves the order.

[01:12] <brimonk> AlexDaniel: I reverted to the patch that you suggested, but I still got the same error.

[01:12] <AlexDaniel> raschipi: uhhhhh! Oops!! You are actually right

[01:12] <timotimo> ≫ preserves the order of results, not of execution. but take relies on the side-effect of jumping back to the outer gather, so you'll get it in the wrong order, still

[01:13] <AlexDaniel> yes, please ignore that snippet

[01:13] <raschipi> Right, the flow control exceptions are side effects.

[01:13] <AlexDaniel> brimonk: that's interesting

[01:14] <AlexDaniel> brimonk: are you sure?

[01:14] <AlexDaniel> u: ≫

[01:14] <unicodable6> AlexDaniel, U+226B MUCH GREATER-THAN [Sm] (≫)

[01:14] <AlexDaniel> timotimo: ↑ ? O,o

[01:15] <raschipi> u: »

[01:15] <unicodable6> raschipi, U+00BB RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK [Pf] (»)

[01:15] <brimonk> git says, 'HEAD detached at 46ef1b5'

[01:15] <raschipi> timotimo: You want this ↑ one

[01:15] <brimonk> Unles I needed the full sha hash and I messed it up.

[01:16] <geekosaur> brimonk, that's normal if you specify a hash and it's not the actual HEAD of that branch

[01:16] <geekosaur> you should not make commits in that state, is what it's warning you

[01:16] <AlexDaniel> brimonk: but on *that* commit there's a bug, you need a parent of that commit if you want to do it like that

[01:17] <AlexDaniel> brimonk: so perhaps try checking out to 46ef1b5b48^ (where ^ tells it to use its parent)

[01:19] <AlexDaniel> in other words, da4a0f50ac0

[01:19] <brimonk> so install -> da4a0f50ac0a00332920e330b062d03543290fd6

[01:19] <brimonk> Yes.

[01:19] <brimonk> Trying now.

[01:20] <brimonk> I think that did it!

[01:20] <brimonk> Still testing modules.

[01:20] <timotimo> raschipi: yeah i was too lazy :)

[01:23] <brimonk> AlexDaniel: Works!

[01:24] <raschipi> Next we will learn there are modules out there already relying on tha commit and that it can't be reverted...

[01:26] <AlexDaniel> raschipi: huh? It's just 8 days old

[01:28] *** Cabanossi left
[01:30] *** Cabanossi joined
[01:31] <raschipi> AlexDaniel: Never understimate users. Wasan't nadim using development versions to get bug fixes need for his dumper? But it was but a joke.

[01:31] *** pierre_ left
[01:34] *** cdg left
[01:41] <brimonk> Is there a good way to store perl6 rationals in sqlite? Is the preferred method a string?

[01:42] <brimonk> s/preferred/best

[01:43] *** pierre_ joined
[01:45] *** Rawriful left
[01:45] *** ilbot3 left
[01:49] <raschipi> m: (1/3).^methods

[01:49] <camelia> rakudo-moar 231cb3: ( no output )

[01:49] <raschipi> m: (1/3).^methods.say

[01:49] <camelia> rakudo-moar 231cb3: OUTPUT: «(Rat FatRat Range atanh Bridge sign sqrt asech sin tan atan2 acosech truncate asinh narrow base floor abs conj acosh pred new asec cosec acotan cosh ceiling nude acos acosec sech unpolar log exp roots cotan norm sinh tanh acotanh Int Num Real sec asin ra…»

[01:50] *** dubi0us left
[01:50] <raschipi> m: (1/3).nude.say

[01:50] <camelia> rakudo-moar 231cb3: OUTPUT: «(1 3)␤»

[01:50] <raschipi> brimonk: Could you get the numerator and denominator and store them as ints?

[01:50] <lookatme> Will Perl 6 add support for Web Assembly ? 

[01:51] *** pilne joined
[01:52] *** ilbot3 joined
[01:52] *** ChanServ sets mode: +v ilbot3

[01:52] <raschipi> lookatme: The plan is yes, from what I gather. rakudo-js will target webassembly. This way it avoids the wonky JavaScript types.

[01:53] <mspo> why does star have json and json_fast

[01:53] <mspo> also these github projects use all different naming

[01:53] *** epony joined
[01:54] *** dubi0us joined
[01:54] <lookatme> raschipi, oh, cools!

[01:58] <raschipi> lookatme: You need to ask pmurias, though.

[01:58] *** dubi0us left
[01:59] *** pierre_ left
[01:59] *** dubi0us joined
[01:59] <lookatme> Hmm thanks

[02:00] <raschipi> It will certainly target asm.js, though. Going from asm.js to wasm isn't much.

[02:01] <mspo> is panda going to be dropped from star?

[02:03] *** dubi0us left
[02:03] <mspo> also could star make a csv or something out of MODULES.txt that included github info? :)

[02:04] <raschipi> mspo: I never seen any volunteers around to decide what goes into *.

[02:05] *** noganex_ joined
[02:06] <raschipi> In every discussion about it, some want it to be just the bare necessary to install other modules, while others just say a standard library is a good idea, yet no one wants to do the job.

[02:07] *** Guest17156 is now known as parisba_

[02:07] *** noganex left
[02:08] *** dubi0us joined
[02:09] *** cdg joined
[02:13] *** dubi0us left
[02:18] *** dubi0us joined
[02:23] *** dubi0us left
[02:29] *** dubi0us joined
[02:42] *** Cabanossi left
[02:45] *** Cabanossi joined
[02:48] <zengargoyle> oh, sweet... The official videos of TPCiA are still in post-production.

[02:48] *** dubi0us left
[02:48] *** pierre_ joined
[02:50] <zengargoyle> and samcv++ /me in the middle of first or second talk...

[02:52] *** dubi0us joined
[02:53] <zengargoyle> .ask lizmat did you do that talk thing from a while back?

[02:53] <yoleaux> zengargoyle: I'll pass your message to lizmat.

[02:57] *** dubi0us left
[02:57] *** pilne left
[02:57] *** dubi0us joined
[02:58] *** dubi0us_ joined
[03:01] *** dubi0us left
[03:02] *** dubi0us_ left
[03:07] *** dubi0us joined
[03:12] *** Cabanossi left
[03:12] *** dubi0us left
[03:14] *** Cabanossi joined
[03:16] *** pharv_ joined
[03:16] *** dubi0us joined
[03:20] *** bwisti joined
[03:21] *** dubi0us left
[03:21] *** BenGoldberg left
[03:47] *** wigner joined
[03:48] *** pierre_ left
[03:51] *** pierre_ joined
[03:52] *** cdg_ joined
[03:52] *** raschipi left
[03:54] *** cdg left
[04:00] <ugexe> https://www.dropbox.com/s/tnxrbmwwcf80n96/IMG_0120.jpg line noise camelia

[04:00] *** dubi0us joined
[04:01] *** pharv_ left
[04:05] *** cdg_ left
[04:06] *** huggable left
[04:06] *** huggable joined
[04:06] *** ChanServ sets mode: +v huggable

[04:06] *** skids left
[04:06] *** NeuralAnomaly left
[04:06] *** buggable left
[04:06] *** ZofBot left
[04:06] *** simcop2387 left
[04:06] *** samb1 left
[04:06] *** timotimo left
[04:07] *** NeuralAnomaly joined
[04:07] *** ChanServ sets mode: +v NeuralAnomaly

[04:07] *** hoelzro left
[04:08] *** hoelzro joined
[04:09] *** dubi0us left
[04:09] *** itaipu joined
[04:13] *** simcop2387 joined
[04:14] *** itaipu left
[04:18] *** timotimo joined
[04:19] *** samb1 joined
[04:20] <zengargoyle> ugexe: :)

[04:20] *** MilkmanDan left
[04:21] *** itaipu joined
[04:21] *** dubi0us joined
[04:21] *** MilkmanDan joined
[04:22] * zengargoyle isn't sure i get it....

[04:27] *** lspaans joined
[04:31] <lspaans> p6: say pi;

[04:31] <camelia> rakudo-moar 231cb3: OUTPUT: «3.14159265358979␤»

[04:31] *** dubi0us left
[04:32] *** lspaans left
[04:34] *** wigner left
[04:35] *** dubi0us joined
[04:39] *** khw left
[04:40] *** dubi0us_ joined
[04:40] *** khw joined
[04:40] *** dubi0us left
[04:44] *** dubi0us_ left
[04:53] *** dubi0us joined
[04:57] *** dubi0us left
[04:58] *** Cabanossi left
[04:59] *** dubi0us joined
[04:59] *** Cabanossi joined
[05:03] *** dubi0us left
[05:04] *** pierre_ left
[05:09] *** dubi0us joined
[05:13] *** pharv_ joined
[05:13] *** dubi0us left
[05:14] *** andrzejku joined
[05:15] *** andrzejku left
[05:17] *** andrzejku joined
[05:18] *** itaipu left
[05:25] *** dubi0us joined
[05:27] *** Cabanossi left
[05:29] *** Cabanossi joined
[05:29] *** dubi0us left
[05:29] *** dubi0us joined
[05:34] *** dubi0us left
[05:39] *** khw left
[05:48] *** |oLa| joined
[05:54] *** dubi0us joined
[05:58] *** big_num joined
[05:59] *** nadim joined
[06:00] * lookatme is reading https://p6weekly.wordpress.com/2017/08/14/2017-33-in-review/ 

[06:03] *** dubi0us left
[06:08] *** mtj_ left
[06:08] *** mtj_ joined
[06:10] *** dubi0us joined
[06:15] *** dubi0us left
[06:18] *** pierre_ joined
[06:19] *** dubi0us joined
[06:20] <moritz> lizmat++ # p6weekly

[06:23] *** dubi0us left
[06:24] *** big_num left
[06:27] *** Cabanossi left
[06:28] *** dubi0us joined
[06:29] *** Cabanossi joined
[06:33] *** dubi0us left
[06:37] <lookatme> modules.perl6.org not available with 503 error

[06:39] *** dubi0us joined
[06:40] <nadim> I confirm it is down here too

[06:40] <nadim> morning lookatme

[06:40] <lookatme> nadim, morning :)

[06:41] <moritz> it seems /tmp/ is full

[06:43] *** dubi0us left
[06:44] <moritz> Aug 13 07:24:55 www systemd[1]: [/etc/systemd/system/smoke.perl6.org.service:6] Unknown lvalue 'restart' in section 'Service'

[06:44] <moritz> the log is full with these messages

[06:51] <moritz> seems that previous versions of systemd were either case insensitive to configuration, or didn't warn about unknown values

[06:56] *** dubi0us joined
[06:56] *** darutoko joined
[06:59] *** dubi0us_ joined
[07:00] *** dubi0us left
[07:01] *** nadim left
[07:03] *** ijneb left
[07:03] *** dubi0us_ left
[07:03] *** andrzejku left
[07:04] *** andrzejku joined
[07:06] * zengargoyle totally doesn't know how to properly answer a StackOverflow question. (this should be interesting...)

[07:07] <zengargoyle> i have a feeling it's not as forgiving as PerlMonks.

[07:09] *** dubi0us joined
[07:13] *** dubi0us left
[07:19] *** dubi0us joined
[07:20] <moritz> the main difference is that perlmonks encourages discussion

[07:20] <moritz> stackoverflow wants a straight-forward answer if possible

[07:20] * lizmat clickbaits https://p6weekly.wordpress.com/2017/08/14/2017-33-in-review/

[07:23] *** mspo left
[07:24] *** ribasushi left
[07:25] <zengargoyle> i probably did poorly, a mix between "i've asked this and have an answer" and just linking to IRC log and saying read this.

[07:25] <yoleaux> 07:18Z <lizmat> zengargoyle: if you're referring to my "talk" at the TPCiA: no.  This was a completely unscripted Q&A session with most of the answers provided by people in the audience

[07:25] * zengargoyle what?

[07:26] *** andrzejku left
[07:27] <zengargoyle> .tell lizmat nah, i don't think i've gotten far enough into TPCiA to know what you mean. :) i was just curious in general and thought maybe talk was for TPC but maybe not.  

[07:27] <yoleaux> zengargoyle: I'll pass your message to lizmat.

[07:27] *** nadim joined
[07:27] *** andrzejku joined
[07:28] *** ribasushi joined
[07:28] *** wamba joined
[07:28] *** pharv_ left
[07:29] <lizmat> .

[07:29] <yoleaux> 07:27Z <zengargoyle> lizmat: nah, i don't think i've gotten far enough into TPCiA to know what you mean. :) i was just curious in general and thought maybe talk was for TPC but maybe not.

[07:31] <zengargoyle> my internet has been down or flakey for the past week.  i've missed a lot of things and i'm still catching up. :)

[07:34] *** dubi0us left
[07:38] *** dakkar joined
[07:39] *** dubi0us joined
[07:41] *** zorin-os joined
[07:41] <zorin-os> can anyone help me statically compile perl with -Drelocatableinc and with thread support

[07:42] *** Cabanossi left
[07:42] <zengargoyle> zorin-os: wrong IRC channel.  this is #perl6 and any perl5 help will a bit iffy. :)

[07:43] <zorin-os> is perl6 as stable as perl5?

[07:43] <zorin-os> or at least compatible with perl5 scripts?

[07:43] <zengargoyle> but -Drelocatableinc ... i'm not sure that is really involved or tied in with threads at all.

[07:44] *** dubi0us left
[07:44] *** Cabanossi joined
[07:44] <zengargoyle> -Drelocatableinc is just a string manipulation that turns .../ into $^X/../  there's not really much magic there the last time i looked.

[07:45] <zorin-os> (its so i dont need to manually set @INC in every single script to point to the perl ./lib/perl5 and other folders with are required to work correctly)

[07:45] <zorin-os> (wich in tern can lead to problems if a string or path is missing from @INC)

[07:47] <zorin-os> (although i am not sure what paths are needed to enable the use of "use lib" so its better to just make @INC relocatable)

[07:47] <zengargoyle> all relocatable inc does IIRC is let you specify during configure and suce a path like .../ and that gets search and replaced with the $^X path of the executing perl.

[07:48] <zengargoyle> userelocatable and usesitelocal was the one thing i actually fixed in perl5... :)  maybe i don't understand your problem.

[07:49] <zengargoyle> but you are in the wrong channel for p5 stuff... :)

[07:49] <zengargoyle> s/suce/such

[07:50] *** rindolf joined
[07:52] *** pierre_ left
[07:53] <zorin-os> my main problem is getting perl to compile statically

[07:55] <zorin-os> as i have tried "./Configure -d -Uusedl ; make", "./Configure -des -Uusedl ; make", "./Configure -des -Uusedl -Dldflags=-static", "./Configure -d -Uusedl -Dldflags= ; make", "./Configure -d -Uusedl -Dldflags=-static", and "./Configure -des -Dldflags=-static ; make" but all have failed with "collect2: error: ld returned 1 exit status [ new line ] makefile:369: recipe for target 'perl' failed [ new line ] make: *** [perl] Error 1"

[07:55] <zengargoyle> ah, got it... i've never tried static... i think irc.perl.org/#perl5 or the like would be more helpful.  unless you just get lucky here. :P

[07:55] <geekosaur> something failed before that, those are about the least useful part of the error

[07:55] <geekosaur> but in any case I think forcing static link for perl 5 will have very bad effects

[07:56] <zorin-os> i do get "warning: Using '...' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking"

[07:56] * zengargoyle and then there's geekosaur.... :)

[07:56] <geekosaur> (like disabling dlopen(), meaning you can't use XS modules unless you compiled them into perl)

[07:56] *** dubi0us joined
[07:56] *** pierre_ joined
[07:57] <geekosaur> yes, glibc itself is hostile to static linking also

[07:57] <zorin-os> how do i get around that

[07:57] <geekosaur> basically, static linking anything on a modern linux takes special setup and you can expect to have to bundle parts of glibc with the result

[07:58] <geekosaur> the correct answer is: don't

[07:58] <zengargoyle> will p5 build with any of the glibc alternatives?

[07:58] <geekosaur> the answer you want to hear, of course, is magic

[07:59] <zorin-os> are you able to determine how a perl was compiled

[07:59] <geekosaur> -V

[07:59] <zengargoyle> -V

[08:00] <zorin-os> are there any other important options other then config_args

[08:00] <zorin-os> assuming that alone isnt enough

[08:00] *** dubi0us left
[08:01] *** dubi0us joined
[08:01] *** MilkmanDan left
[08:01] <zorin-os> aalso irc.perl.org/#perl5 only has 1 user in it ._.

[08:01] <zorin-os> also*

[08:02] <zorin-os> person*

[08:02] <zengargoyle> i'm almost half sure i've built perl with -Uusedl but it was on Solaris.

[08:02] *** MilkmanDan joined
[08:02] *** jonas1 joined
[08:02] <zorin-os> im trying to re-create/re-compile this but with threaded support http://s.minos.io/archive/bifrost/x86_64/perl-5.10.1-3.tar.bz2

[08:03] <zorin-os> but all attempts have failed

[08:03] <zengargoyle> and probably accidental as when i tried to do VIM with Perl there was no libperl.so to be found....

[08:04] <zorin-os> http://www.cpan.org/src/5.0/perl-5.10.1.tar.bz2

[08:05] <zengargoyle> zorin-os: it might be just #perl and not #perl5

[08:05] *** dubi0us left
[08:06] <zengargoyle> there are 600+ users in #perl on freenode... i'm not totally sure about perl5 IRC location.

[08:07] *** andrzejku left
[08:07] <zorin-os> ok

[08:07] <zengargoyle> sorry, i'm not really sure what the 'official' Perl 5 IRC is....

[08:08] *** andrzejku joined
[08:08] <zorin-os> although staticperl (App:staticperl) contains -Uusedl yet a ldd of its perl shows it as a dynamically compiled executable even though -Uused1 is refered to as " *	This symbol, if defined, indicates that dynamic loading of some sort is available."

[08:08] <zorin-os> App::Staticperl *

[08:09] *** dubi0us joined
[08:09] <zorin-os> and -U meand to undefine what ever symbol is after -U

[08:09] <zorin-os> means*

[08:10] *** ufobat joined
[08:10] <zengargoyle> true static is hard, it seems to mean just libc and libm and like geekosaur said it's really a hard process to get a truly static binary.

[08:10] <zengargoyle> are you trying to embed somewhere?

[08:11] <zorin-os> no, i need it for my script to work should someone not have perl installed

[08:12] <zengargoyle> ah, so not even libc ....

[08:12] <zorin-os> the requirements are: to be able to work in a chroot

[08:13] <zorin-os> with just perl and the script alone

[08:13] *** dubi0us left
[08:13] <zorin-os> (including perl lib and bin dirs also)

[08:14] <zengargoyle> that doesn't necessarily imply static.  unless you're being horribly strict about not even loading anything at all dynamic.

[08:14] <zorin-os> yes

[08:14] <zengargoyle> i will way it's a total PITA.

[08:16] <zorin-os> as even i the libs required for perl to work are missing or even renamed perl will still work cus it can be ued from within a chroot with only perl/bin/perl and a script located in perl/

[08:16] <zorin-os> if*

[08:16] <zorin-os> used*

[08:16] <zengargoyle> i did not have your chroot restriction, but close enough.  i ended up copyiong .so files into .../lib/perl5 and taking pains to point everything there.

[08:17] <zorin-os> but that also is not a solution (making the application require chrooting into to work)

[08:17] <zengargoyle> ah, doubt i'd try a single perl binary and single script.

[08:17] <zengargoyle> i had single directory.... 

[08:17] <zorin-os> chroot is just to varify that everything can still work even i they are the only thing on the system

[08:17] <zengargoyle> but everything needed under that directory.

[08:18] <zengargoyle> except for libc/libm that OMG the whole machine won't work without that...

[08:19] <zorin-os> for example, chroot ./perl /bin/perl /script.pl AND the /lib/perl5 directory exists and succesfull execution of the script means the script is then fully portable (except for its shebang)

[08:19] <zorin-os> ./perl/lib/perl5*

[08:20] *** mr-foobar joined
[08:20] <zengargoyle> you might look for user 'mst' here or on 'perl' channel somewhere.  he does a lot of similar stuff.

[08:20] *** dubi0us joined
[08:22] <zengargoyle> i don't see why chroot is special if you at least have basic system functionality that sorta has to be there...

[08:23] <zorin-os> cus it makes sure there is absolutely no chance of perl failing due to one o its dependancies being incompatible or missing a unction that it uses

[08:23] <zorin-os> of*

[08:23] <zengargoyle> ldd perl --- linux-vdso.so.1 libdl.so.2 libm.so.6 libpthres.so.0 libc.so.6 libcrypt.so.1 /lib64/ld-linux-x86.64.so.2

[08:24] <zorin-os> function*

[08:24] <zorin-os> or if the distro has a compleately different but still functional file heirachy

[08:25] *** dubi0us left
[08:25] <zengargoyle> if those don't work, nothing at all will work.  no need for static if you have a ./perl and everything under it.

[08:25] <zorin-os> still, i want it static

[08:26] <zengargoyle> Doctor, It Hurts When I Do This... good luck. :)

[08:26] *** rindolf left
[08:26] <zorin-os> lol

[08:26] <zengargoyle> :)

[08:27] *** Cabanossi left
[08:27] *** jeek left
[08:27] <zorin-os> u try to recreate this then http://s.minos.io/archive/bifrost/x86_64/perl-5.10.1-3.tar.bz2

[08:28] <zengargoyle> my old $WORK wouldn't upgrade (long story) and i pretty much built an entire system under /var/local/net

[08:28] <zengargoyle> if you toss to 'must be completely static' thing...  you can totally make 'under this directory' do anything you want.

[08:29] <zengargoyle> including XS modules and all that.

[08:29] *** Cabanossi joined
[08:29] *** dubi0us joined
[08:29] <zengargoyle> and libxml and libexpat and libssl and ....

[08:30] <zengargoyle> but trying without a dynamic loader at all.... i wish you well. :)

[08:33] *** wamba left
[08:33] <zengargoyle> really i think the #perl or mailing lists might get you what you want...  perl 5 runs on practically everything in the world, i doubt 'static' is terribly hard with people who know how to make it work on a cellphone.

[08:34] *** domidumont joined
[08:36] <zengargoyle> recreate?  is that not just perl-5.10.1 plus some distro things?

[08:37] *** dubi0us left
[08:38] <zorin-os> as in get perl 5.10.1 to at least compile as static like it has been in http://s.minos.io/archive/bifrost/x86_64/perl-5.10.1-3.tar.bz2

[08:39] <zorin-os> cus the fact that it is compiled statically means it IS possible

[08:39] *** dubi0us joined
[08:40] <zengargoyle> i think you're chasing after the near impossible.  if you want to run under linux kernel, you are not fully static.

[08:40] <zengargoyle> there is no big fat blob of binary that just works always.

[08:41] <zengargoyle> even debian /bin/dash that is used in startup scripts and such uses libc.so and ld.so

[08:43] <zengargoyle> you either dynamic load some very basic things, or you are tied to very specific kernel ABI and not working because of some filesystem change is the least of you worries when you totally can't work at all if the kernel changes.

[08:43] *** dubi0us left
[08:44] *** rindolf joined
[08:44] <zengargoyle> you're not on an embeded system runnin on bare metal where it will always be the same thing no matter what.

[08:44] <zorin-os> i just need http://s.minos.io/archive/bifrost/x86_64/perl-5.10.1-3.tar.bz2 re compiled as is but with thread support

[08:45] *** pmurias joined
[08:47] <zorin-os> (or if possible with a relocatable /usr/local/local.archive and a relocatable /lib/x86_64-gnu.../

[08:47] <zengargoyle> what is that?  is it just perl 5.10.1?

[08:47] <zorin-os> that works the same way @INC relocatable works

[08:48] <zengargoyle> you're chroot doesn't work if there is no /lib/x86_64-gnu....

[08:48] <zengargoyle> it's a moot point.

[08:48] <zengargoyle> i get you want safety.

[08:48] <zorin-os> and http://s.minos.io/archive/bifrost/x86_64/perl-5.10.1-3.tar.bz2 is a statically compiled version of perl-5.10.1 that unfortunately hasnt been compiled with thread support

[08:49] <zengargoyle> but you're desired thing won't actually work at all if the things that make it possible to work at all don't work.

[08:49] <zorin-os> ;-;

[08:50] <zorin-os> is there a way to see exactly what compiler was used

[08:50] *** dubi0us joined
[08:51] <zengargoyle> why?  you have to have a directory for perl modules and scripts.  you have to have ld support for *anything* to work at all.  why do you want a static perl?

[08:52] <zengargoyle> probably, look for the Config module or the Config_heavy??? module in the lib of the perl you want to look at.

[08:52] <zorin-os> "you have to have a directory for perl modules and scripts.  you have to have ld support for *anything* to work at all.  why do you want a static perl?" what do you mean

[08:52] <zengargoyle> all of the -V information about compiler and flags and etc... is in the Config* modules.

[08:53] <zengargoyle> they are built during build time...

[08:53] <zorin-os> whats the direct paths to them

[08:54] *** ShalokShalom joined
[08:54] <ShalokShalom> hi there

[08:54] *** andrzejku left
[08:54] <lookatme> hi ShalokShalom 

[08:55] <ShalokShalom> can i use Perl6 purely with functional concepts?

[08:55] *** dubi0us left
[08:55] <zengargoyle> zorin-os: depends... my system it's /usr/lib/x86_64-linux-gnu/perl/5.26/Config.pm and Config_heavy.pl

[08:56] <andreoss> ShalokShalom: yes

[08:56] <zorin-os> btw is it possible to compile perl interperator and script.sh into a statically compiled binary with all needed dependancies and still have the script fully functional? as when i try with the staticperl (App::Staticperl) script i get -e instead of the path to the binary

[08:56] <andreoss> https://docs.perl6.org/language/haskell-to-p6

[08:57] <andreoss> not as purely as in Haskell though. There's no IO monad in Perl 6 and stuff like that

[08:57] <ShalokShalom> andreoss: thanks a lot

[08:57] *** domidumont left
[08:57] <ShalokShalom> i mean, will i miss something?

[08:57] <ShalokShalom> pattern matching?

[08:57] <zengargoyle> zorin-os: you're still totally in the wrong channel. :)  

[08:57] <ShalokShalom> call functions in functions?

[08:57] <ShalokShalom> what do you use for UIs?

[08:57] <ShalokShalom> i guess there is no Qt5 binding? QML?

[08:58] <andreoss> ShalokShalom: pattern matching, first-order functions, list comprehensions are present

[08:58] <ShalokShalom> thanks a lot

[08:58] <lookatme> ShalokShalom, you can do what you can do in other functional style language

[08:58] *** Cabanossi left
[08:58] <ShalokShalom> static typing in any way also?

[08:58] <ShalokShalom> lookatme: thanks a lot

[08:58] <ShalokShalom> this is exactly, what i wanted to know

[08:58] <lookatme> yeah it has static type check

[08:59] *** Cabanossi joined
[08:59] *** dubi0us joined
[08:59] <ShalokShalom> oh wow

[08:59] <ShalokShalom> how that?

[09:00] <ShalokShalom> ah gradual typing

[09:00] <ShalokShalom> nice

[09:01] <lookatme> yeah, you can read some tutorial first

[09:01] <zengargoyle> ShalokShalom: there are some GTK bindings, but they're pretty basic.

[09:01] <ShalokShalom> i see

[09:02] <ShalokShalom> so you dont do GUIs, do you?

[09:02] *** andrzejku joined
[09:03] <zengargoyle> i sorta think most would just use the Python bindings.... i think you can pretty well use like matplotlib and such Pythong modules from p6.

[09:03] <zorin-os> btw how does Cwd abs_path work

[09:03] <zorin-os> and is it possible to make a C or C++ version of it that does the same thing

[09:03] *** dubi0us left
[09:03] <moritz> zorin-os: please ask Perl 5 questions in Perl 5 channels

[09:04] <moritz> and C/C++ in the appropriate channels as well

[09:04] <zorin-os> ok

[09:04] <zengargoyle> and yeah, i don't do GUI's. :)  but there is good NativeCall C library integration, so you can use fancy GUI, just somebody needs to write the wrappers and make it easy to use in a p6 fashion.

[09:05] <zengargoyle> so i think most people have put it at bottom of list of things to finish or create.

[09:05] <andreoss> ShalokShalom: you probably can use python bindings through Inline::Python

[09:06] <ShalokShalom> aha, ok i see

[09:06] <ShalokShalom> so PyQT

[09:07] * zengargoyle really sad now for not learning more Python just to be able to use Inline::Python easily...

[09:07] *** piojo9 joined
[09:07] <lookatme> Can we use Qt binding of Perl5  through Inline::Perl5

[09:07] <lookatme> ?

[09:07] <andreoss> python's should be better

[09:09] <zorin-os> what path is the correct path to the config http://codepad.org/aESZuRdM/raw.rb

[09:10] *** dubi0us joined
[09:11] <zengargoyle> zorin-os: look for the path that also has a Config_heavy.pl

[09:12] <zorin-os> ok

[09:12] *** domidumont joined
[09:12] <zorin-os> is it possible to use that to re-create the configuration state when it was built?

[09:13] <zengargoyle> and then yes please go to a Perl 5 channel, i enjoy filling empty time, but this is Perl 6 channel and ....

[09:14] <zengargoyle> zorin-os: final answer... :) yes.  that Config.pm and Config_heavy.pl are generated during the build and are what 'perl -V' shows.

[09:16] <zorin-os> how would i do so

[09:16] <lookatme> How about the ruby binding for GUI framework ?

[09:17] <lookatme> I dont' want use python

[09:17] <ShalokShalom> https://github.com/seanchas116/libqmlbind

[09:18] <ShalokShalom> this might work

[09:18] <ShalokShalom> while it is work

[09:18] <ShalokShalom> :)

[09:18] <moritz> https://github.com/awwaiid/p6-Inline-Ruby

[09:18] <moritz> no idea how good it is

[09:18] <ShalokShalom> ruby is without qt

[09:19] <moritz> ShalokShalom: you missed an opportunity for a pun there

[09:19] <moritz> "ruby has no qt"

[09:19] <ShalokShalom> https://www.youtube.com/watch?v=ON0A1dsQOV0

[09:19] <ShalokShalom> pun ^

[09:19] *** dubi0us left
[09:19] <moritz> (some people pronounce qt as "cute")

[09:19] <ShalokShalom> yep

[09:19] <ShalokShalom> its as meant

[09:20] <ShalokShalom> lookatme: perl5 bindings for Qt5 exist?

[09:20] <ShalokShalom> i am maintaining the bindings page on qt wiki, this is why

[09:20] *** wamba joined
[09:20] <zorin-os> is it possible to compile perl into a perl.so

[09:21] <zorin-os> then somehow access all of its funtions threw C/C++

[09:21] <zorin-os> through*

[09:22] *** ShalokShalom left
[09:23] *** zakharyas joined
[09:23] * zengargoyle still just wants Tk.

[09:28] *** Cabanossi left
[09:29] *** Cabanossi joined
[09:30] *** dubi0us joined
[09:32] <BooK_>  hey, unicode math question

[09:33] *** bp_ joined
[09:33] <BooK_> what should this return? 2⁴⁻³

[09:33] *** bp_ is now known as b_p_

[09:33] <zorin-os> also does the .so include everything in $HOME/perl/lib folder (assuming the prefix was $HOME/perl) and if not how do i include stuff from there

[09:33] <BooK_> also, 2⁽⁴⁻³⁾ and  2³⁻⁴

[09:34] <BooK_> p6: say 2⁴⁻³

[09:34] <camelia> rakudo-moar 231cb3: OUTPUT: «0.000244␤»

[09:34] *** dubi0us left
[09:34] <BooK_> p6: say 2³⁻⁴

[09:34] <camelia> rakudo-moar 231cb3: OUTPUT: «0.000244␤»

[09:34] <BooK_> p6: say 2⁽⁴⁻³⁾

[09:34] <camelia> rakudo-moar 231cb3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3say 27⏏5⁽⁴⁻³⁾␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤ …»

[09:34] <Juerd> AlexDaniel: It's a 560 tests, not really short :)

[09:35] <Juerd> AlexDaniel: I had just upgraded with rakudobrew

[09:38] <lookatme> m: say 2⁴⁻³ .WHAT;

[09:38] <camelia> rakudo-moar 231cb3: OUTPUT: «===SORRY!===␤Method call must either supply a name or have a child node that evaluates to the name␤»

[09:38] <lookatme> m: say (2⁴⁻³).WHAT;

[09:38] <camelia> rakudo-moar 231cb3: OUTPUT: «(Rat)␤»

[09:39] <BooK_> is there a deparse thingy for perl6?

[09:39] <lookatme> BooK_, you mean the return type ?

[09:39] <BooK_> I mean the value

[09:39] <moritz> BooK_: there's a --target=ast

[09:39] <lookatme> ast mast

[09:39] <moritz> not quite deparse

[09:39] <BooK_> I'd expect that to be 2**(4-3) not 2**4**(-3)

[09:40] <lookatme> oh

[09:41] <BooK_> I can understand how that won't be fixed, but people will try cute things with superscript stuff, so at least the docs should mention it

[09:41] <BooK_> anyway, no superscript $ or * so there's not much math available in the upper region

[09:42] <BooK_> it's basically 10 digits and a few signs: ⁰¹²³⁴⁵⁶⁷⁸⁹⁺⁻⁼⁽⁾ and two letters: ⁱⁿ

[09:47] <BooK_> (note I didn't find this, a colleague did... I'm just reporting)

[09:48] *** kybr left
[09:48] <lookatme> I think they not consider priority of unicode operator

[09:49] *** eroux joined
[09:50] *** stmuk_ is now known as stmuk

[09:50] *** kybr joined
[09:51] *** dubi0us joined
[09:53] *** mcmillhj joined
[09:53] *** pierre_ left
[09:53] *** piojo9 left
[09:54] *** lookatme left
[09:56] *** pierre_ joined
[09:56] *** eroux left
[09:56] *** dubi0us left
[09:57] *** mcmillhj left
[09:58] *** damnlie joined
[09:59] *** dubi0us joined
[10:00] *** piojo joined
[10:03] *** TEttinger left
[10:03] *** dubi0us left
[10:04] *** grumble left
[10:04] *** ijneb joined
[10:11] *** Aaronepower joined
[10:12] *** lichtkind left
[10:13] *** grumble joined
[10:14] *** dubi0us joined
[10:17] *** markmont left
[10:18] *** dubi0us left
[10:19] <andreoss> is it possible to know type expected by lhs? i.e my Int $a = foo(); my Str $b = foo(); 

[10:19] <jnthn> No

[10:20] <jnthn> foo(my Int $a) where sub foo(::T $a is rw) { } would work out though

[10:25] *** piojo left
[10:26] *** lichtkind joined
[10:26] <andreoss> m: sub infix:«*=*»(::T $a is rw, ::T $b) { $a = $b }; (my Int $x) *=* 10; say $x;

[10:26] <camelia> rakudo-moar 231cb3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol 'T'␤at <tmp>:1␤------> 3sub infix:«*=*»(::T $a is rw, ::T7⏏5 $b) { $a = $b }; (my Int $x) *=* 10; sa␤»

[10:26] <andreoss> m: sub infix:«*=*»(::T $a is rw, T $b) { $a = $b }; (my Int $x) *=* 10; say $x;

[10:26] <camelia> rakudo-moar 231cb3: OUTPUT: «10␤»

[10:30] *** dubi0us joined
[10:31] *** espadrine joined
[10:33] *** pierre_ left
[10:35] *** dubi0us left
[10:37] <iviv> is `rakudobrew build moar-blead` what I want to get the latest rakudo? 

[10:38] <BooK_> this trap https://github.com/perl6/doc/commit/d7feaf878696bc6b827d632c7aa064dd525f428c has no title, and gets merged under =head2 Exponentiation Operator and Prefix Minus

[10:38] *** grumble left
[10:38] <BooK_> if anyone can come up with a proper title, I'll do the patch

[10:39] *** grumble joined
[10:39] <BooK_> and then add a warning about 2³⁻⁴ close by

[10:39] *** dubi0us joined
[10:40] *** sena_kun joined
[10:40] *** ufobat left
[10:41] *** Cabanossi left
[10:41] <andreoss> m: role G {} ; role F does G {} ; say F ~~ G 

[10:41] <camelia> rakudo-moar 231cb3: OUTPUT: «True␤»

[10:41] <andreoss> m: role G[::A] {} ; role F[::A] does G[A] {} ; say F[Int] ~~ G[Int]

[10:41] <camelia> rakudo-moar 231cb3: OUTPUT: «False␤»

[10:42] *** b_p_ left
[10:44] *** dubi0us left
[10:44] *** Cabanossi joined
[10:45] *** notbenh left
[10:45] <andreoss> m: role G[::A] {} ; role F[::A] does G[A] {} ; say F[Int].^roles.any ~~ G[Int]

[10:45] <camelia> rakudo-moar 231cb3: OUTPUT: «False␤»

[10:46] <andreoss> m: role G[::A] {} ; role F[::A] does G[A] {} ; say F[Int].^roles.any ~~ G[*]

[10:46] <camelia> rakudo-moar 231cb3: OUTPUT: «False␤»

[10:46] *** notbenh joined
[10:47] <andreoss> m: role G[::A] {} ; role F[::A] does G[A] {} ; say F[Int].^roles.any ~~ G

[10:47] <camelia> rakudo-moar 231cb3: OUTPUT: «True␤»

[10:47] <andreoss> m: role G[::A] {} ; role F[::A] does G[A] {} ; say F[Int].^roles

[10:47] <camelia> rakudo-moar 231cb3: OUTPUT: «((G[A]))␤»

[10:47] <andreoss> i guess it doen't match because it's G[A] not G[Int]

[10:47] <andreoss> is there a reason for this?

[10:49] *** dubi0us joined
[10:50] *** markmont joined
[10:54] *** dubi0us left
[10:54] <jnthn> m: role G[::A] {} ; role F[::A] does G[A] {}; class C does F[Int] { }; say C ~~ F[Int]; say C ~~ G[Int]

[10:54] <camelia> rakudo-moar 231cb3: OUTPUT: «True␤True␤»

[10:54] <jnthn> I think the type vars aren't resolved until the role is composed

[10:54] *** Rawriful joined
[10:55] *** Rawriful left
[10:55] *** Rawriful joined
[10:56] *** dustinm` left
[10:58] *** dubi0us joined
[11:03] *** dubi0us left
[11:07] *** rindolf left
[11:09] *** dubi0us joined
[11:13] *** dubi0us left
[11:19] *** dubi0us joined
[11:21] *** dustinm` joined
[11:24] *** dubi0us left
[11:26] *** dubi0us joined
[11:42] *** Cabanossi left
[11:44] *** Cabanossi joined
[11:47] *** mr-fooba_ joined
[11:47] *** araraloren joined
[11:48] *** mr-foobar left
[12:02] *** epony left
[12:14] *** buggable joined
[12:14] *** Geth_ left
[12:15] *** Geth_ joined
[12:15] *** huggable left
[12:15] *** huggable joined
[12:15] *** ChanServ sets mode: +v huggable

[12:15] <Geth> Swapped META.info → META6.json in 1 dists in https://github.com/perl6/ecosystem/commit/8b60cbc779

[12:15] *** NeuralAnomaly left
[12:15] *** NeuralAnomaly joined
[12:15] *** ChanServ sets mode: +v NeuralAnomaly

[12:16] *** ZofBot joined
[12:16] *** ChanServ sets mode: +v ZofBot

[12:23] *** araraloren_ joined
[12:25] *** araraloren left
[12:27] *** dubi0us_ joined
[12:28] <Geth> ¦ doc/book-patch-1: 07cd369015 | (Philippe Bruhat (BooK))++ (committed using GitHub Web editor) | doc/Language/traps.pod6

[12:28] <Geth> ¦ doc/book-patch-1: Add missing title for but in list construction

[12:28] <Geth> ¦ doc/book-patch-1: review: https://github.com/perl6/doc/commit/07cd369015

[12:28] <Geth> ¦ doc: book++ created pull request #1450: Add missing title for but in list construction

[12:28] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/1450

[12:30] *** araraloren_ is now known as araraloren

[12:30] *** dubi0us left
[12:35] *** _4d47 joined
[12:46] *** dubi0us joined
[12:47] *** pierre_ joined
[12:47] *** mcmillhj joined
[12:48] *** imcsk8 left
[12:48] *** imcsk8 joined
[12:50] *** dubi0us_ left
[12:50] *** mr-fooba_ left
[12:51] <zorin-os> is this statment correct? "running 1 thread with 1 process and running 10 threads with 10 process should take around the same time as 1 thread with 1 process"

[12:52] *** cdg joined
[12:53] *** mr-foobar joined
[12:53] <nadim> timotimo: Curses interface to Datq::Dump::Tree is done. it allows you to say ddt :curses, $data, ... ; it opens a window, you play around in it, it folds, etc ..., you close and get back where you were. You can do that multiple times of course. Can I wish for some test from you?

[12:54] *** andreoss left
[12:56] *** rindolf joined
[12:57] <_4d47> On my machine `perl6 -I ~ -M P6rc' takes 10s before a prompt, any way to load faster?

[12:58] <lizmat> hmmm... does -I ~ actually do what you think it does?

[12:58] <lizmat> or does your shell expand ~ for you ?

[12:59] <moritz> and what's in your P6rc?

[12:59] <_4d47> I think the shell expand, doing same cmd with /home/user is equally long

[13:00] <_4d47> just some exported sub

[13:01] *** travis-ci joined
[13:01] <travis-ci> Doc build passed. Philippe Bruhat (BooK) 'Add missing title for but in list construction'

[13:01] <travis-ci> https://travis-ci.org/perl6/doc/builds/264722969 https://github.com/perl6/doc/commit/07cd36901511

[13:01] *** travis-ci left
[13:09] <BooK_> going back to 2⁴⁻³, this is doubly surprising: 1. one would expect it to mean 2¹. 2. once we understand that both superscript numbers are taken to mean "to the power of that superscripted number", we'd might read it as 2**4**-3, but in fact it's (2**4)**-3 (so precedence/associativity is different for those superscripted powers)

[13:10] <_4d47> ok much better when module is in empty subdir

[13:10] *** pierre_ left
[13:17] *** dubi0us left
[13:20] <AlexDaniel> BooK_: as I see it, the right solution would be a compile-time error or worry. However, the same kind of fix for ²² was treated as unnecessary special-casing so it didn't move anywhere. I'm not entirely sure if 2⁴⁻³ is any different

[13:22] * moritz would bay any fancy superscripts, possibly with the excption of a single digit or a negated single digit

[13:22] *** ufobat joined
[13:22] *** dubi0us joined
[13:23] *** konsolebox left
[13:23] <BooK_> AlexDaniel: ²² should mean **22

[13:23] <AlexDaniel> m: say ²²

[13:23] <camelia> rakudo-moar 2b8115: OUTPUT: «4␤»

[13:23] <BooK_> ouch

[13:23] <AlexDaniel> BooK_: https://rt.perl.org/Ticket/Display.html?id=126732 and https://github.com/rakudo/rakudo/pull/1095

[13:25] <AlexDaniel> moritz: whoa! 2³² is a perfectly fine use-case, no need to restrict it to one digit

[13:25] <moritz> m: say: 2³²

[13:25] <camelia> rakudo-moar 2b8115: ( no output )

[13:25] <AlexDaniel> m: say 2³²

[13:25] <camelia> rakudo-moar 2b8115: OUTPUT: «4294967296␤»

[13:26] *** mspo joined
[13:26] <moritz> AlexDaniel: as long as we manage not to shoot ourselves by being fancy, I'm all fine with it. But it seems currently we're shoot our foots :/

[13:26] <mspo> stmuk: last night my builds started to randomly work so I added half of star to pkgsrc-wip :)

[13:26] *** konsolebox joined
[13:26] <mspo> stmuk: I'll try to plow through the second half when I get some free time

[13:26] *** dubi0us left
[13:27] <perlpilot> (less foot-shooting)++

[13:31] *** itaipu joined
[13:31] <perlpilot> m: say 2⁴-³;  # works fine  ;-)

[13:31] <camelia> rakudo-moar 2b8115: OUTPUT: «13␤»

[13:32] <BooK_> ONOES

[13:33] <Geth> ¦ mu: 3521e795b6 | (Zoffix Znet)++ (committed using GitHub Web editor) | util/update-design.perl6.org.sh

[13:33] <Geth> ¦ mu: Load up brewed perl

[13:33] <Geth> ¦ mu: review: https://github.com/perl6/mu/commit/3521e795b6

[13:34] <perlpilot> m: say 2⁴¯³;  # contrast  

[13:34] <camelia> rakudo-moar 2b8115: OUTPUT: «0.000244␤»

[13:34] *** itaipu left
[13:35] <mspo> perlpilot: wtf are those symbols? :)

[13:36] <mspo> took me a minute to notice the low vs high "minus"

[13:36] <perlpilot> mspo: see above about shooting ourselves in the foot by being to clever.  :)

[13:37] <perlpilot> s/to/too/

[13:37] *** itaipu joined
[13:37] *** Zoffix joined
[13:37] *** Actualeyes joined
[13:38] <Zoffix> BooK_: the precedence for superscript ops is just broken and the fix is a bit more complicated.

[13:38] <Zoffix> BooK_: it should be the same as ** op

[13:38] <mspo> perlpilot: I'm trying to think of PEMDAS in that case.  I could have sworn you would subtract the exponents first

[13:38] <mspo> but maybe that requires (parens)

[13:38] <BooK_> Zoffix: a colleague pointed the 2⁴⁻³ and I went down the rabbit hole

[13:39] <Zoffix> https://github.com/perl6/roast/issues/200

[13:40] *** dubi0us joined
[13:42] <BooK_> m: say ¹+²

[13:42] <camelia> rakudo-moar 2b8115: OUTPUT: «3␤»

[13:42] <BooK_> m: say ¹⁰+²

[13:42] <camelia> rakudo-moar 2b8115: OUTPUT: «3␤»

[13:43] <Zoffix> BooK_: ^ in that case, they're not power ops. They're just your off-the-mill No chars (which you can't chain)

[13:43] <BooK_> yeah, that was the argument in the PR pointed above. I see

[13:43] <Zoffix> BooK_: with ¹⁰+² being 1**0 (can't chain No, so after ¹ term you get ⁰ which must be an op, so it's a power op), +² (you need a term after the + op, so you get the No char)

[13:44] <BooK_> it's just because they are listed as numbers/digits  in unicode, basically?

[13:44] <Zoffix> Yeah

[13:44] <BooK_> m: say ¹.WHAT

[13:44] <camelia> rakudo-moar 2b8115: OUTPUT: «(Int)␤»

[13:44] <Zoffix> m: say "¹⁰".uniprops

[13:44] <camelia> rakudo-moar 2b8115: OUTPUT: «(No No)␤»

[13:44] *** dubi0us left
[13:45] <stmuk> mspo: :)

[13:45] <Zoffix> m: say (^0x110000).grep(*.uniprop eq 'No')».chr

[13:45] <BooK_> this is definitely confusing, even if it makes sense

[13:45] <camelia> rakudo-moar 2b8115: OUTPUT: «(² ³ ¹ ¼ ½ ¾ ৴ ৵ ৶ ৷ ৸ ৹ ୲ ୳ ୴ ୵ ୶ ୷ ௰ ௱ ௲ ౸ ౹ ౺ ౻ ౼ ౽ ౾ ൘ ൙ ൚ ൛ ൜ ൝ ൞ ൰ ൱ ൲ ൳ ൴ ൵ ൶ ൷ ൸ ༪ ༫ ༬ ༭ ༮ ༯ ༰ ༱ ༲ ༳ ፩ ፪ ፫ ፬ ፭ ፮ ፯ ፰ ፱ ፲ ፳…»

[13:45] <BooK_> m: say ৶+0

[13:45] <camelia> rakudo-moar 2b8115: OUTPUT: «0.1875␤»

[13:45] <BooK_> m: say (৶+0).perl

[13:45] <camelia> rakudo-moar 2b8115: OUTPUT: «0.1875␤»

[13:45] <BooK_> m: say (৶+0).gist

[13:45] <camelia> rakudo-moar 2b8115: OUTPUT: «0.1875␤»

[13:46] <AlexDaniel> u: No

[13:46] <unicodable6> AlexDaniel, U+00B2 SUPERSCRIPT TWO [No] (²)

[13:46] <unicodable6> AlexDaniel, U+00B3 SUPERSCRIPT THREE [No] (³)

[13:46] <unicodable6> AlexDaniel, 676 characters in total: https://gist.github.com/8ae5f326b0da695e8047b754105ba036

[13:46] <Zoffix> m: say ¼⁰+¾

[13:46] <camelia> rakudo-moar 2b8115: OUTPUT: «1.75␤»

[13:47] <moritz> u: ৶

[13:47] <unicodable6> moritz, U+09F6 BENGALI CURRENCY NUMERATOR THREE [No] (৶)

[13:47] <moritz> I... don't....

[13:47] <BooK_> moritz: same here

[13:47] <Zoffix> u: half zero

[13:47] <unicodable6> Zoffix, U+0F33 TIBETAN DIGIT HALF ZERO [No] (༳)

[13:47] <Zoffix> :)

[13:47] <Zoffix> m: say ༳

[13:47] <camelia> rakudo-moar 2b8115: OUTPUT: «-0.5␤»

[13:47] <moritz> that one I knew

[13:47] <BooK_> The codepoint has the Numeric value 3/16.

[13:48] <BooK_> I was trying to show it as a Rat before

[13:48] *** dubi0us joined
[13:49] <Zoffix> m: say ৶.WHAT

[13:49] <camelia> rakudo-moar 2b8115: OUTPUT: «(Rat)␤»

[13:49] <Zoffix> m: say ৶.^name

[13:49] <camelia> rakudo-moar 2b8115: OUTPUT: «Rat␤»

[13:49] <Zoffix> m: say ৶.nude

[13:49] <camelia> rakudo-moar 2b8115: OUTPUT: «(3 16)␤»

[13:49] <BooK_> ah .nude

[13:49] <BooK_> that was the bit I was missing

[13:49] <mspo>  .nude?

[13:49] <Zoffix> stands for .nu(merator)de(nominator)

[13:49] <BooK_> ah so it's not a general-purpose thing

[13:50] <Zoffix> Nah.

[13:50] *** pierre_ joined
[13:50] <BooK_> I'd have hoped (1+i).nude to give something similar

[13:50] *** andrzejku left
[13:51] <Zoffix> m: say (1+i).perl

[13:51] <camelia> rakudo-moar 2b8115: OUTPUT: «<1+1i>␤»

[13:51] <Zoffix> .perl is the general pupose thing, though for Rationals it don't always display them as numerator/denominator

[13:51] *** andrzejku joined
[13:51] <Zoffix> m: say (1/3).perl

[13:51] <camelia> rakudo-moar 2b8115: OUTPUT: «<1/3>␤»

[13:53] <BooK_> m: say ৶.perl

[13:53] <camelia> rakudo-moar 2b8115: OUTPUT: «0.1875␤»

[13:53] *** dubi0us left
[13:53] <BooK_> why doesn't that give the nu/de version then?

[13:54] <Zoffix> BooK_: because it can be represented as a decimal (which is still a Rat), while 1/3 can't, so it spits out a Rat literal with nu/de

[13:54] <Zoffix> .perl basically gives you the version you can .EVAL and get original object back

[13:54] <BooK_> got it

[13:54] <Zoffix> (more or less; it's an ideal behind it, but not always possible to do)

[13:56] *** rgrau joined
[13:58] *** epony joined
[14:01] <Geth> ¦ mu: b454bd93d3 | (Zoffix Znet)++ (committed using GitHub Web editor) | util/update-design.perl6.org.sh

[14:01] <Geth> ¦ mu: Use $HOME instead of hardcoded user

[14:01] <Geth> ¦ mu: review: https://github.com/perl6/mu/commit/b454bd93d3

[14:02] <Geth> ¦ mu: 93aa6aad64 | (Zoffix Znet)++ (committed using GitHub Web editor) | util/update-design.perl6.org.sh

[14:02] <Geth> ¦ mu: List required Perl modules

[14:02] <Geth> ¦ mu: 

[14:02] <Geth> ¦ mu: Not sure where else to stick 'em; these are needed for the script to run properly.

[14:02] <Geth> ¦ mu: review: https://github.com/perl6/mu/commit/93aa6aad64

[14:02] *** wamba left
[14:03] *** itaipu_ joined
[14:06] *** itaipu left
[14:07] <nadim> http://blogs.perl.org/users/nadim_khemir/2017/08/the-emperors-new-clothes.html

[14:08] *** itaipu_ left
[14:08] *** skids joined
[14:09] *** dubi0us joined
[14:10] *** Zoffix left
[14:12] *** zakharyas left
[14:12] *** zakharyas joined
[14:13] *** itaipu joined
[14:13] *** dubi0us left
[14:14] *** Zoffix joined
[14:16] *** itaipu left
[14:16] *** zakharyas left
[14:19] *** dubi0us joined
[14:22] <sena_kun> nadim++

[14:23] *** dubi0us left
[14:23] *** itaipu joined
[14:28] *** itaipu left
[14:29] *** dubi0us joined
[14:31] <Geth> ¦ modules.perl6.org: 36f256e0d7 | (Zoffix Znet)++ | lib/ModulesPerl6.pm

[14:31] <Geth> ¦ modules.perl6.org: Do not name route aliases

[14:31] <Geth> ¦ modules.perl6.org: 

[14:31] <Geth> ¦ modules.perl6.org: Dupes mess with url_to and redirect_to not knowing what to direct to

[14:31] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/36f256e0d7

[14:32] <Geth> ¦ modules.perl6.org: 577437ab1e | (Zoffix Znet)++ | lib/ModulesPerl6/Controller/Root.pm

[14:32] <Geth> ¦ modules.perl6.org: Direct failed "Lucky" searches to search page

[14:32] <Geth> ¦ modules.perl6.org: 

[14:32] <Geth> ¦ modules.perl6.org: For that term, instead of a 404 page.

[14:32] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/577437ab1e

[14:34] *** dubi0us left
[14:34] *** lisbeths` left
[14:34] <Geth> ¦ modules.perl6.org: 95a217fee8 | (Zoffix Znet)++ | lib/ModulesPerl6/Controller/Root.pm

[14:34] <Geth> ¦ modules.perl6.org: Fix Lucky search losing by-description results

[14:34] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/95a217fee8

[14:34] *** pierre_ left
[14:35] *** mls left
[14:36] <Zoffix> sjn: ^ that fixes the lucky search issue you were having. In the future, would you please report issues to the repo, so they don't get missed? https://github.com/perl6/modules.perl6.org/issues/new

[14:36] *** mls joined
[14:37] *** Zoffix left
[14:37] *** andrzejku left
[14:38] *** andrzejku joined
[14:38] *** dubi0us joined
[14:41] *** alimon joined
[14:42] *** dubi0us left
[14:44] *** _4d47 left
[14:45] *** mls left
[14:45] *** mls joined
[14:45] <brimonk> AlexDaniel: Any update on what's going to be done with DBIish?

[14:45] <AlexDaniel> brimonk: https://irclog.perlgeek.de/perl6-dev/2017-08-15#i_15017267

[14:52] <dalek> infrastructure-doc: 1a4a43c | (Zoffix Znet)++ | hosts/www.p6c.org.pod:

[14:52] <dalek> infrastructure-doc: Mention many www.p6c.org sites get built on hack

[14:52] <dalek> infrastructure-doc: review: https://github.com/perl6/infrastructure-doc/commit/1a4a43cc7f

[14:52] *** mcmillhj left
[14:53] *** mcmillhj joined
[14:54] <dalek> infrastructure-doc: 6b5419f | (Zoffix Znet)++ | hosts/hack.p6c.org.pod:

[14:54] <dalek> infrastructure-doc: Fix incorrect scheduling for docs build

[14:54] <dalek> infrastructure-doc: review: https://github.com/perl6/infrastructure-doc/commit/6b5419fbd1

[14:56] *** araraloren_ joined
[14:58] *** araraloren left
[14:59] <dalek> infrastructure-doc: f7bb1c4 | (Zoffix Znet)++ | hosts/hack.p6c.org.pod:

[14:59] <dalek> infrastructure-doc: List design.perl6.org perl setup instructions

[14:59] <dalek> infrastructure-doc: 

[14:59] <dalek> infrastructure-doc: These steps weren't mentioned anywhere and

[14:59] <dalek> infrastructure-doc: were missed during last system upgrade.

[14:59] <dalek> infrastructure-doc: review: https://github.com/perl6/infrastructure-doc/commit/f7bb1c4c96

[14:59] <ugexe> El_Che: if you can hook up your images to travis, then go for it. ideally it would use images if a release is requested (`perl6: - moar-2017.06 - moar-2017.03` etc) but do `rakudobrew build whatever` if its not a release it knows about (this is how perl travishelpers works)

[14:59] *** dubi0us joined
[15:00] <ugexe> that way you get the fast builds for releases, but can still easily target other commits (just slowly)

[15:00] *** releasable6 left
[15:00] *** releasable6 joined
[15:00] *** ChanServ sets mode: +v releasable6

[15:01] <ugexe> https://github.com/travis-ci/travis-build/blob/master/lib/travis/build/script/perl6.rb

[15:01] *** wamba joined
[15:02] <Geth> ¦ infrastructure-doc: 07e4cc95d9 | (Zoffix Znet)++ (committed using GitHub Web editor) | hosts/www.p6c.org.pod

[15:02] <Geth> ¦ infrastructure-doc: Stupid POD…

[15:02] <Geth> ¦ infrastructure-doc: review: https://github.com/perl6/infrastructure-doc/commit/07e4cc95d9

[15:03] *** cdg left
[15:04] *** releasable6 left
[15:05] <ugexe> i'm tempted to changed that PERL6LIB=lib to PERL6LIB=. 

[15:05] *** dubi0us left
[15:06] <Geth> ¦ infrastructure-doc: b495cc452b | (Zoffix Znet)++ (committed using GitHub Web editor) | hosts/www.p6c.org.pod

[15:06] <Geth> ¦ infrastructure-doc: Include instructions for modules.perl6.org web app

[15:06] <Geth> ¦ infrastructure-doc: 

[15:06] <Geth> ¦ infrastructure-doc: restart with dev/prod servers

[15:06] <Geth> ¦ infrastructure-doc: review: https://github.com/perl6/infrastructure-doc/commit/b495cc452b

[15:07] *** cdg joined
[15:09] *** zakharyas joined
[15:10] *** cdg left
[15:10] *** zakharyas left
[15:10] *** deathstar_ joined
[15:11] *** cdg joined
[15:11] *** dubi0us joined
[15:13] *** imcsk8 left
[15:13] <brimonk> AlexDaniel: thanks!

[15:15] *** dubi0us left
[15:20] *** dubi0us joined
[15:21] *** imcsk8 joined
[15:23] *** Kyo91 joined
[15:24] *** nadim left
[15:24] *** dubi0us left
[15:27] *** itaipu joined
[15:28] *** ShalokShalom joined
[15:28] <ShalokShalom> hi there

[15:28] <ShalokShalom> perl6 can use Python code inline, yes?

[15:28] <ShalokShalom> how is this feature called, in general?

[15:29] <ShalokShalom> i think this makes perl6 a wonderful way to integrate functional programming in Python

[15:29] *** zakharyas joined
[15:29] <ShalokShalom> and this is very underrated then?

[15:30] *** cdg left
[15:32] *** releasable6 joined
[15:32] *** ChanServ sets mode: +v releasable6

[15:32] *** releasable6 left
[15:33] <Geth> ¦ whateverable: 0840d63c02 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[15:33] <Geth> ¦ whateverable: Oops. Log range fixed

[15:33] <Geth> ¦ whateverable: 

[15:33] <Geth> ¦ whateverable: Otherwise prints commits for the previous (already released) release.

[15:33] <Geth> ¦ whateverable: 

[15:33] <Geth> ¦ whateverable: The main problem was here:

[15:33] <Geth> ¦ whateverable: 

[15:33] <Geth> ¦ whateverable:     $actual-commit-old = $actual-commit-old

[15:33] <Geth> ¦ whateverable: 

[15:33] <Geth> ¦ whateverable: Maybe I should auto-expand less. Or maybe this case should be caught

[15:33] <Geth> ¦ whateverable: automatically by something.

[15:33] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/0840d63c02

[15:33] <jnthn> Hm, I guess in general it's "language interoperability" or some such.

[15:33] <jnthn> But yeah, there's an Inline::Python module, and a selection of others

[15:34] *** releasable6 joined
[15:34] *** ChanServ sets mode: +v releasable6

[15:36] *** iyra joined
[15:37] *** frv_ joined
[15:37] *** cdg joined
[15:37] *** frv_ left
[15:38] <iyra> is there a way to have multiple conditions for a 'when'? For example, given $a { when 3 or 5 { say "found"; } }?

[15:39] <sena_kun> iyra, did you try your code?

[15:39] <sena_kun> m: given $a { when 3 or 5 { say "found"; } }

[15:39] <camelia> rakudo-moar 2b8115: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared␤at <tmp>:1␤------> 3given 7⏏5$a { when 3 or 5 { say "found"; } }␤»

[15:39] *** cdg left
[15:39] <sena_kun> m: my $a = 3; given $a { when 3|5 { say "found"; } }

[15:39] <camelia> rakudo-moar 2b8115: OUTPUT: «found␤»

[15:40] <sena_kun> m: my $a = 3; given $a { when 3 or 5 { say "found"; } }

[15:40] <camelia> rakudo-moar 2b8115: OUTPUT: «found␤»

[15:40] <sena_kun> iyra, ^

[15:40] <iyra> it did seem to work... but when $a = 5 it doesn't work

[15:40] <jnthn> It'd need to be |

[15:40] <jnthn> Which makes a junction

[15:40] <jnthn> or doesn't

[15:40] <sena_kun> then |.

[15:40] <jnthn> alternatively when any(3,5)

[15:40] <sena_kun> m: my $a = 5; given $a { when 3|5 { say "found"; } }

[15:40] <camelia> rakudo-moar 2b8115: OUTPUT: «found␤»

[15:40] <iyra> ah, nice

[15:40] <iyra> thanks

[15:42] *** pharv_ joined
[15:42] <sjn> Zoffix: I was looking for a bugtracker link, actually, but found the irc channel link first :)

[15:43] *** cdg joined
[15:45] <araraloren_> junction would work with when

[15:45] <ShalokShalom> ah yeah

[15:45] <ShalokShalom> Foreign function interface

[15:45] <ShalokShalom> jnthn: thanks

[15:46] <araraloren_> buggable: eco Inline

[15:46] <buggable> araraloren_, Inline 'use C-code from within Perl': https://github.com/FROGGS/p6-Inline-C 8 other matching results: https://modules.perl6.org/s/Inline

[15:46] <araraloren_> buggable: eco Inline::

[15:46] <buggable> araraloren_, Found 7 results: Inline::Perl5, Inline::Python, Inline::Lua, Inline::Ruby, Inline::Scheme::Guile. See https://modules.perl6.org/s/Inline%3A%3A

[15:47] <araraloren_> ShalokShalom, see we have these Inline module

[15:47] <ShalokShalom> i see

[15:47] *** pharv_ left
[15:47] <ShalokShalom> i am more thinking the other way around

[15:47] <ShalokShalom> adding functional programming into Python

[15:47] *** cdg left
[15:47] <ShalokShalom> while this list is also interesting :)

[15:48] <ShalokShalom> oh

[15:48] <ShalokShalom> Brainfuck <3 . <3 

[15:48] <ShalokShalom> :D

[15:48] <araraloren_> yeah, Brainfuck is also exists

[15:48] <ShalokShalom> i will create an entry here: https://en.wikipedia.org/wiki/Foreign_function_interface

[15:50] *** dubi0us joined
[15:53] *** [particle]1 left
[15:54] *** [particle] joined
[15:57] *** khw joined
[15:59] *** dubi0us left
[15:59] *** dubi0us joined
[16:01] *** konsolebox left
[16:02] *** dubi0us_ joined
[16:04] *** dubi0us left
[16:06] *** raschipi joined
[16:06] *** konsolebox joined
[16:07] <Geth> ¦ modules.perl6.org: 336dcb4f41 | (Zoffix Znet)++ | 2 files

[16:07] <Geth> ¦ modules.perl6.org: Add link to Issue Tracker on error pages; sjn++

[16:07] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/336dcb4f41

[16:08] *** nadim joined
[16:11] *** cdg joined
[16:13] *** cdg left
[16:14] *** cdg joined
[16:15] *** mcsnolte joined
[16:19] *** araraloren_ left
[16:22] *** nadim left
[16:29] *** jonas1 left
[16:30] *** cdg left
[16:34] *** deathstar__ joined
[16:34] *** deathstar_ left
[16:39] <raschipi> ShalokShalom: You didn't mention that Perl6 can call C in the Wikipedia page.

[16:40] <ShalokShalom> how is that mentioned on the inline page?

[16:40] <ShalokShalom> via Scheme?

[16:41] <ilmari> https://docs.perl6.org/language/nativecall.html

[16:42] <raschipi> Besedes NativeCall, which ilmari already mentioned, there is a Inline::C module, but it isn't listed in the ecosystem: https://github.com/FROGGS/p6-Inline-C

[16:43] <ShalokShalom> i also create a PR for the awesome-functional-python page on Github

[16:43] <ShalokShalom> i think this feature can attract a lot of people

[16:44] <ShalokShalom> since functional programming in python is not that awesome

[16:44] <sena_kun> isn't it uses NativeCall under the hood? https://github.com/FROGGS/p6-Inline-C/blob/master/lib/Inline/C.pm#L4

[16:44] <sena_kun> raschipi, ^

[16:44] <ShalokShalom> add this Inline::C module and i add C to this list on Wikipedia

[16:45] <raschipi> ShalokShalom: NativeCall is the FFI. The Inline::Modules also parse the languages.

[16:47] <raschipi> In fact, most of the Inline:: modules will actually call those other languages through the NativeCall FFI

[16:50] *** setty1 joined
[16:50] <raschipi> For example, in Inline::Python https://github.com/niner/Inline-Python/blob/master/lib/Inline/Python.pm6#L8

[16:51] *** dakkar left
[16:51] <ShalokShalom> what speaks against a add to this list?

[16:51] <ShalokShalom> https://modules.perl6.org/s/Inline

[16:52] <ShalokShalom> *an

[16:52] <raschipi> Because if it's there people will actually try to use it, and the module isn't working.

[16:52] <raschipi> Like I said, why do you care about Inline::C if the FFI is called NativeCall

[16:53] <raschipi> I understand the issue of the citation, but you'll just have to use two.

[16:54] <ShalokShalom> how should the user know that?

[16:54] <pmurias> raschipi: re targeting asm.js/wasm I'm not doing that because they currently don't support basic things like GC

[16:56] *** jjatria joined
[16:57] <raschipi> ShalokShalom: Read the description?

[16:57] <ShalokShalom> of what?

[16:57] <raschipi> pmurias: Right, they're going for barebones there.

[16:58] <raschipi> ShalokShalom: How do people discover modules and the FFIs in other languages? Buy a book?

[16:59] *** itaipu_ joined
[16:59] <pmurias> raschipi: running C/C++ stuff is the goal of asm.js (and the current goalof webasm)

[16:59] <pmurias> * goal

[17:00] <raschipi> Right, then you'll just need to compile rakudo to wasm and it's done?

[17:00] <raschipi> rakudo, nqp and moar

[17:00] <ShalokShalom> i use this one: https://docs.perl6.org/language/nativecall

[17:01] <ShalokShalom> pmurias: and Rust too

[17:01] <ShalokShalom> its the next one, probably

[17:01] <APic> 😎

[17:01] <iyra> is there a way to modify the members of an instance of a class from inside a function?

[17:02] *** devmikey joined
[17:02] *** itaipu left
[17:02] <raschipi> iyra: sure

[17:02] <sena_kun> iyra, attributes are read-only by default. You can mark them as mutable as `has $.foo is rw`.

[17:02] *** Praise left
[17:02] *** Praise- joined
[17:02] *** Praise- left
[17:02] *** Praise- joined
[17:03] <sena_kun> m: class A { has $.foo is rw; }; my $a = A.new; $a.foo = 5; say $a.foo;

[17:03] <camelia> rakudo-moar c68762: OUTPUT: «5␤»

[17:03] <raschipi> sena_kun: Isn't it about modiyng the structure of the class?

[17:03] <iyra> thanks; I assumed that naming the function like: sub my_func(MyClass $x is rw) { $x.my_member = 5; } would work

[17:03] <sena_kun> raschipi, well, it's the other option.

[17:04] <iyra> raschipi: no, I was talking about modifying the values of the members, that's all

[17:04] <sena_kun> raschipi, but I thought that MOP is too cool here.

[17:04] *** itaipu joined
[17:04] *** itaipu_ left
[17:04] <raschipi> I see it now.

[17:05] <ShalokShalom> done

[17:05] <APic> k

[17:05] <sena_kun> iyra, official docs have quite a good tutorial on this matter, see https://docs.perl6.org/language/classtut.html#State

[17:05] <raschipi> Thanks ShalokShalom 

[17:05] <ShalokShalom> sure

[17:05] <ShalokShalom> thank you too

[17:06] <raschipi> ShalokShalom: It can also call C++

[17:06] <ShalokShalom> i think this feature is underrated

[17:06] *** jjatria left
[17:06] <ShalokShalom> raschipi: haha, what?

[17:06] <ShalokShalom> you tell me that now? :P

[17:06] *** jjatria joined
[17:06] <raschipi> NativeCall can call C and C++

[17:07] <ilmari> ShalokShalom: did you read the nativecall docs? it has a section on c++

[17:07] *** MilkmanDan left
[17:09] <ShalokShalom> hope thats it now :P

[17:09] <APic> 😎

[17:09] *** MilkmanDan joined
[17:09] <devmikey> DO I have to use Perl6?

[17:10] <devmikey> Why can't I use Perl5?

[17:11] <ugexe> i dunno, why cant you?

[17:11] *** dubi0us joined
[17:11] <devmikey> ShalokShalom told me I had to

[17:11] <ShalokShalom> huh?

[17:12] <b2gills> Both Perl 5 and Perl 6 are actively worked on

[17:12] <ShalokShalom> devmikey: what do you mean?

[17:12] <ShalokShalom> i know

[17:12] <devmikey> I'm kidding, relax

[17:13] <ugexe> https://metacpan.org/pod/NativeCall

[17:15] *** dubi0us_ left
[17:15] <pmurias> raschipi: you could compile moarvm to wasm and run moarvm bytecode in the browser

[17:16] <raschipi> What's the advantage of rakudo.js, then? Is the obvious question to ask...

[17:18] *** zorin-os left
[17:21] <pmurias> raschipi: interop with js/DOM will be annoying for a rakudo-on-moarvm-on-js

[17:22] <raschipi> Well, wasm is said to be able to call Javascript interfaces, but I see now that moar would have to support it.

[17:24] *** itaipu_ joined
[17:24] <devmikey> Why is there perl6?

[17:24] <raschipi> buggable: Hundred year Language

[17:25] <ilmari> devmikey: because TimToady decided to create it

[17:25] <devmikey> But why?

[17:25] <raschipi> huggable: The Hundred-Year Language

[17:25] <huggable> raschipi, http://www.paulgraham.com/hundred.html

[17:25] <ilmari> why is anything?

[17:25] <devmikey> what does it do better than perl5?

[17:26] <raschipi> devmikey: Everything

[17:26] <raschipi> Except being fast

[17:26] <mst> and UNIX

[17:27] <mst> perl6 is much less tied to a unix host environment than perl5, for better and for worse

[17:27] *** dubi0us_ joined
[17:27] *** itaipu left
[17:27] <mst> (I like this fact, I like the idea of having a choice of perls depending on if I want that or not)

[17:27] <raschipi> mst: Perl5 was always UNIX done right, Perl6 is UNIX done righter.

[17:28] <pmurias> raschipi: also I doubt that rakudo-on-moarvm-on-js will be ever fast

[17:28] <pmurias> raschipi: someone can try it and see how it works, I'm not going too as it's a bunch of unfun work to try something I don't believe in

[17:29] <devmikey> Can I use perl instead of python?

[17:29] <mst> raschipi: no fork. no unix domain sockets. file-on-disk layouts don't work nicely with 'find'. perl6 is really not very unix. this is fine though, it's a very good perl6.

[17:29] <raschipi> devmikey: You should. Better yet, you should use Perl6.

[17:30] <devmikey> Ooo, you think Perl6 is better?

[17:30] *** dubi0us left
[17:30] <ugexe> python is not doing. only alah is going

[17:30] <mst> devmikey: #perl's advice is generally "perl5 and python are pretty equivalently powerful, so learn both and use whichever one fits your brain better"

[17:30] <ugexe> doing

[17:31] <ilmari> *doing*

[17:31] <raschipi> devmikey: Perl6 is certainly much more fun.

[17:31] <devmikey> mst: I use perl, so I'm just happy to know that I'm not missing anything

[17:31] * ilmari has started mentally pronouncing all words that end in -oing to rhyme with boing

[17:31] <devmikey> lol

[17:32] *** tojo_ joined
[17:34] <mspo> no fork?

[17:35] *** captain-adequate left
[17:35] <tojo_> hm, it seems that there is no IO::Socket::UNIX class in perl6?

[17:36] <mspo> tojo_: someone was working on it recently I think

[17:36] <tojo_> ok nice, do you know is there any public stuff anywhere?

[17:37] <mspo> I do not, but it was in this chat room

[17:37] <raschipi> I'm curious to see what the interface for sending file descriptors will look like.

[17:37] <tojo_> mspo: thx, i lookup the logs

[17:38] <mst> mspo: not cross-platform so you have to nativecall in

[17:38] <MasterDuke> tojo_, mspo: a recent PR for MoarVM ( https://github.com/MoarVM/MoarVM/pull/630 ) adds support for unix sockets, but it hasn't been merged yet

[17:38] <mst> raschipi: I'm not sure how amenable the libuv abstraction is to doing that

[17:39] <devmikey> Is Perl6's suport of MS Excel better?

[17:39] <mspo> mst: guess it should be a module

[17:39] *** nadim joined
[17:39] <raschipi> devmikey: If it isn't better, you can just use Perl5's modules.

[17:39] <mst> mspo: yeah, I'm ok with this. I'm just pointing at it as a 'different aesthetics' thing

[17:40] <geekosaur> https://github.com/MoarVM/MoarVM/pull/630 is the basic AF_UNIX support; you'd also need the updated module

[17:40] <geekosaur> whiis

[17:40] <geekosaur> I see I'm slow

[17:40] <mspo> mst: I was worried that it was a go-lang style "no forking" argument

[17:40] <geekosaur> *whoops

[17:41] <mspo> mst: being arbitrarily restricted by the runtime and having no trap doors is not very perl-y

[17:41] <mst> mspo: naw. just there's a difference between the languages in what's baked into the runtime and what you get at through trap doors, and it fits with my "perl5 is a UNIX aesthetic, perl6 is a cross-platform perly aesthetic" description

[17:42] <mst> also forking vs. threading informs a lot of things

[17:43] *** zakharyas left
[17:43] <mst> (this is not meant as an argument for/against either, btw, more an observation of which I'd tend to use when)

[17:45] *** MilkmanDan left
[17:46] *** MilkmanDan joined
[17:47] *** deathstar__ left
[17:48] *** deathstar joined
[17:50] <raschipi> There are some things that are much easier with fork(or clone)/exec, for example dropping privileges/capabilities or changing CGroups/namespaces.

[17:52] <mspo> indeed

[17:55] *** deathstar left
[17:58] *** Cabanossi left
[17:58] *** nadim left
[17:59] *** Cabanossi joined
[18:12] *** nadim joined
[18:17] *** dubi0us joined
[18:20] *** dubi0us_ left
[18:21] *** gilbert joined
[18:27] *** Cabanossi left
[18:27] *** ShalokShalom left
[18:28] <gilbert> Using perl6 from 7/17 rakudo I get puzzling error about 'feed operator not yet implemented' see https://pastebin.com/xzGgcEJK

[18:29] *** Cabanossi joined
[18:29] *** ShalokShalom joined
[18:29] <gilbert> Can anyone suggest a simple workaround for this perhaps using concatenation?

[18:30] *** tojo_ left
[18:32] *** tojo_ joined
[18:33] <raschipi> gilbert: It's exactly what it says in the tin: the operators haven't been implemented yet.

[18:34] <moritz> gilbert: @y.append(@x)

[18:34] <ShalokShalom> http://pygments.org/

[18:34] <ShalokShalom> ... and it highlights even Perl 6!

[18:35] <moritz> aye

[18:36] <moritz> we used to use it for https://doc.perl6.org/

[18:37] <raschipi> It's not perfect: http://pygments.org/demo/6635007/

[18:39] <ShalokShalom> report it?

[18:39] <ShalokShalom> is Perl6 suitable for complete newbie?

[18:40] <raschipi> ShalokShalom: Community is split on that one

[18:40] <ShalokShalom> i see

[18:40] <ShalokShalom> pros?

[18:40] <raschipi> This one also doesn't work very well: http://pygments.org/demo/6624011/

[18:41] <ShalokShalom> i like to use a functional language 

[18:41] <ShalokShalom> all that looks too mathematical to me

[18:42] *** itaipu_ left
[18:42] <basket`> What does?

[18:43] <ShalokShalom> functional programming

[18:43] <ShalokShalom> Elixir looks a bit easier

[18:43] <ShalokShalom> while its purly dynamic

[18:43] *** itaipu joined
[18:44] <ShalokShalom> and i think some static checking let the code look more clean 

[18:47] <raschipi> https://rosettacode.org/wiki/A%2BB#Elixir -> try teaching that to someone new to programming.

[18:48] <raschipi> Will take a day to teach them how to sum two numbers and they will have to just memorize a lot of cruft.

[18:50] *** itaipu left
[18:50] <Geth> ¦ doc/molecules-patch-3: cb4c913d54 | (Christopher Bottoms)++ (committed using GitHub Web editor) | doc/Language/faq.pod6

[18:50] <Geth> ¦ doc/molecules-patch-3: How to work around immutable string issues

[18:50] <Geth> ¦ doc/molecules-patch-3: review: https://github.com/perl6/doc/commit/cb4c913d54

[18:50] <raschipi> Perl6 get's rid of the "line noise" and makes it unnecessary to memorize formulations.

[18:51] *** basket joined
[18:52] *** itaipu joined
[18:53] *** jjatria left
[18:53] <raschipi> Elixir default behavior in the REPL is to dump memory to stdout after every statement, it's plain to see they try to be really beginner friendly.

[18:54] *** jjatria joined
[18:57] <raschipi> ShalokShalom: Do you see why Perl6 might be easier to teach?

[18:57] <ShalokShalom> i like to use it in an IDE

[18:57] <pmurias> raschipi: is that elixir snippet the easiest way to do it? it looks like example of something that's written to be cool

[18:57] <ShalokShalom> why REPL instead?

[18:58] <mspo> perl6 is a little big for a first language, imho

[18:58] <mspo> it depends on who the person is, I think

[18:59] <mspo> I know it talks about being friendly for 12 y/o girls but having done some instruction to 12 y/o girls on computers.. I'm not so sure

[18:59] <ugexe> its marketed towards 12  year old girls

[18:59] <mspo> I also think python is too big

[18:59] <pmurias> the logo is 

[18:59] <ShalokShalom> i guess its maybe easy to inline coconut

[18:59] <mspo> lua or even golang are probably good first languages

[18:59] <ShalokShalom> which is a functional python

[18:59] <basket> pmurias: It looks pretty straightforward to me

[19:00] <ShalokShalom> mspo: i prefer functional

[19:00] <mspo> ShalokShalom: are you the pure newbie?

[19:00] <ShalokShalom> nope

[19:00] <pmurias> basket: I meant the camelia logo is marketed towards 12 year old girls

[19:00] <ShalokShalom> i use computers all my live

[19:00] <basket> pmurias: I meant the Elixir snippet, sorry

[19:00] <ShalokShalom> i am just plain stupid

[19:00] <ShalokShalom> :P

[19:00] <ShalokShalom> pmurias: fully agree xD

[19:01] <mspo> most young people don't know how to do basic things on a computer

[19:01] <ShalokShalom> i thought its some kind of temporary logo

[19:01] <ShalokShalom> until i saw, how old it is xD

[19:01] <ShalokShalom> mspo: i am 29

[19:01] <ShalokShalom> just like to use a "native language"

[19:01] <mspo> ShalokShalom: I'm still talking about teaching kids

[19:01] <ShalokShalom> so, one that documents itself

[19:02] <mspo> my canonical 12 y/o girl had never seen a text editor in her life

[19:02] <ShalokShalom> with less mathematical stuff in its API, if possible

[19:02] <ShalokShalom> mspo: ah i see

[19:02] <mspo> despite being told how great she is for being interested in STEM and given a year of instruction using scratch

[19:02] <mspo> no one ever bothered to teach her how to *use* a computer

[19:02] <ShalokShalom> it compiles to Python bytecode: http://coconut-lang.org/

[19:03] <mspo> so she go really frustrated really quickly

[19:03] <ShalokShalom> sure

[19:03] *** nadim left
[19:03] *** wamba left
[19:03] *** dustinm` left
[19:03] *** markmont left
[19:03] *** grumble left
[19:03] *** kybr left
[19:03] *** ribasushi left
[19:03] *** darutoko left
[19:03] *** |oLa| left
[19:03] *** samb1 left
[19:03] *** timotimo left
[19:03] *** simcop2387 left
[19:03] *** bwisti left
[19:03] *** ilbot3 left
[19:03] <mspo> javascript might be a decent first language, or one of its simplications

[19:03] *** samb1 joined
[19:03] <mspo> since you can get cool stuff going in the browser pretty quickly

[19:03] *** grumble joined
[19:03] *** |oLa| joined
[19:03] *** timotimo joined
[19:03] *** bwisti joined
[19:03] *** awwaiid left
[19:04] *** nadim joined
[19:04] <ugexe> perl6 might be a bad first language if you dont restrict yourself

[19:04] *** wamba joined
[19:04] *** ilbot3 joined
[19:04] *** ChanServ sets mode: +v ilbot3

[19:04] *** dustinm` joined
[19:04] <ugexe> if you need an artificial restriction, then use a different language that gives such restrictions

[19:04] <ugexe> but there is nothing stopping you from restraining yourself

[19:05] <mspo> yeah I mean

[19:05] <mspo> perl5 was my "first" language besides shell

[19:05] <mspo> and I still learn new stuff about it every few weeks without even trying

[19:05] *** ribasushi joined
[19:05] <mspo> basically I'm not much of a programmer :)

[19:05] *** Xal left
[19:06] *** S007 left
[19:06] <raschipi> So, ShalokShalom, like I said above, depends on  what you're looking for ina language for teaching.

[19:06] *** simcop2387 joined
[19:06] <mspo> yeah the target audience is important :)

[19:07] <ugexe> the teacher is the most important thing, so you dont have a master throwing fast balls to rookies

[19:07] <ShalokShalom> ugexe: you mean which kind of restrictions?

[19:07] <ShalokShalom> ugexe: this is exactly the nub of matter

[19:07] <pmurias> being able to do cool stuff easily is likely more important for beginners than the language itself

[19:07] <ShalokShalom> German is my first language

[19:07] <ugexe> mspo said the language being large was a drawback

[19:07] <ShalokShalom> and the most tuts and so on are in English

[19:08] <ugexe> solution: dont use the entire language

[19:08] <ShalokShalom> pmurias: i like QML for that

[19:08] <mspo> another guy I know uses perl *4* for teaching because it is small

[19:08] <ShalokShalom> being able to do cool stuff easily

[19:08] *** kybr joined
[19:08] <ugexe> its easy to teach a small language

[19:08] <Geth> ¦ doc/molecules-patch-3: bcc126b4d3 | (Christopher Bottoms)++ (committed using GitHub Web editor) | doc/Language/faq.pod6

[19:08] <Geth> ¦ doc/molecules-patch-3: Improved explanation

[19:08] <Geth> ¦ doc/molecules-patch-3: review: https://github.com/perl6/doc/commit/bcc126b4d3

[19:09] <raschipi> So, Lisp is the easiest language to teach.

[19:09] *** Xal joined
[19:09] <ugexe> i didnt say anything about something being easier than another

[19:09] <mspo> there are a lot of mechanics to get first: using a text editor, using the command line, organizing stuff; then concepts: scalar variables, data structures (various), scopes, function calls, stdin/stdout

[19:10] <mspo> if you get through those everything else falls roughly into place

[19:10] <mspo> for me

[19:10] *** mr-foobar left
[19:11] <raschipi> I think Bash is a good first language.

[19:11] <El_Che> raschipi: if you're a linux user

[19:11] <raschipi> It does work on windows...

[19:12] *** mr-foobar joined
[19:12] <pmurias> can you do anything cool with bash?

[19:12] <El_Che> raschipi: it does

[19:12] <El_Che> raschipi: but it's part of a unix mindset

[19:12] <El_Che> raschipi: completely foreign on WIndows

[19:12] *** dubi0us_ joined
[19:12] <raschipi> Yes, it's good to start them early.

[19:12] <El_Che> raschipi: and inmediately useful on linux

[19:12] <geekosaur> and you have to think like everything is a string

[19:12] <geekosaur> or a stream/file

[19:14] *** S007 joined
[19:14] <raschipi> It's useful to start with either Bash or PoweShell because people will need that for any other language.

[19:14] <raschipi> PowaShell

[19:14] <Geth> ¦ doc: molecules++ created pull request #1452: How to work around immutable string issue when using map

[19:14] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/1452

[19:14] <geekosaur> powershell

[19:15] <El_Che> I think that powershell is more complicated to start (objects); while in (ba)sh you can look at externeal programs as functions

[19:16] *** dubi0us left
[19:16] *** gilbert left
[19:17] *** andreoss joined
[19:19] <andreoss> m: role G[::A] {};role F[::A] does G[A] {}; say F[Int].^roles

[19:19] <camelia> rakudo-moar c68762: OUTPUT: «((G[A]))␤»

[19:20] <andreoss> why it's not G[Int]? this causes problem with smart-matching on parametric roles

[19:21] <ugexe> it doesnt happen in time

[19:21] <mspo> awk :)

[19:22] *** travis-ci joined
[19:22] <travis-ci> Doc build passed. Christopher Bottoms 'How to work around immutable string issues'

[19:22] <travis-ci> https://travis-ci.org/perl6/doc/builds/264861947 https://github.com/perl6/doc/commit/cb4c913d540f

[19:22] *** travis-ci left
[19:26] <Geth> ¦ doc: 33b7767237 | (Christopher Bottoms)++ (committed by Zoffix Znet) | doc/Language/faq.pod6

[19:26] <Geth> ¦ doc: How to work around immutable string issue when using map (#1452)

[19:26] <Geth> ¦ doc: 

[19:26] <Geth> ¦ doc: * How to work around immutable string issues

[19:26] <Geth> ¦ doc: 

[19:26] <Geth> ¦ doc: * Improved explanation

[19:26] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/33b7767237

[19:27] *** Cabanossi left
[19:29] *** domidumont left
[19:29] *** Cabanossi joined
[19:32] <Geth> ¦ doc: 216a733209 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/faq.pod6

[19:32] <Geth> ¦ doc: Minor fixups for last merged PR

[19:32] <Geth> ¦ doc: 

[19:32] <Geth> ¦ doc: - Use more idomatic code

[19:32] <Geth> ¦ doc: - Use more exact parallels between broken and working ops/methods used

[19:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/216a733209

[19:32] <ShalokShalom> raschipi: i already know a bit bash

[19:32] *** programjourney1 joined
[19:32] <ShalokShalom> i like to write something with Qt

[19:33] <programjourney1> hello, i am new to perl, limited python knowledge. but i would love to help

[19:33] <ShalokShalom> OCaml seems nice

[19:33] <raschipi> programjourney1: You came to the right place, ask away.

[19:33] <raschipi> But we will answer in Perl6 instead of Perl.

[19:34] <programjourney1> one thing i am curios about is how \n will be used in 6

[19:35] <raschipi> m: say "\n"

[19:35] <camelia> rakudo-moar c68762: OUTPUT: «␤␤»

[19:35] <ryu0> ... what are they getting at? \n is normally escaped to an ASCII control character.

[19:36] <Geth> ¦ doc: 5f5f5098c8 | (Philippe Bruhat (BooK))++ (committed by Zoffix Znet) | doc/Language/traps.pod6

[19:36] <Geth> ¦ doc: Add missing title for but in list construction (#1450)

[19:36] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5f5f5098c8

[19:37] <ryu0> Zoffix is the trap master. lol

[19:37] <programjourney1> inside a string and outside like "string\n" and "string"\n

[19:37] <ryu0> outside isn't normally legal...

[19:37] <ryu0> m: say ""\n

[19:37] <camelia> rakudo-moar c68762: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3say ""\7⏏5n␤    expecting any of:␤        postfix␤»

[19:38] <zengargoyle> the 'Think Perl 6: How to Think Like a Computer Scientist' book is pretty much a port of 'Think Python' and maybe 'Think Ruby' series of books.  probably suitable for beginners and not too very Perl 6 specific.  probably the most suitable thing i've read for 12 year olds...

[19:38] <programjourney1> yeah but in 6 will it be?

[19:38] <ryu0> obviously not it seems.

[19:39] <programjourney1> it just seems more natural to me. 

[19:40] *** travis-ci joined
[19:40] <travis-ci> Doc build passed. Christopher Bottoms 'Improved explanation'

[19:40] <travis-ci> https://travis-ci.org/perl6/doc/builds/264867681 https://github.com/perl6/doc/compare/cb4c913d540f...bcc126b4d389

[19:40] *** travis-ci left
[19:41] <zengargoyle> programjourney1: i think in p6 thinking it's just "string" and the \n stuff is taken care of because you may be on unixy \n land or OSX \r land or Windows \r\n land and you shouldn't have to usually do that yourself.

[19:41] <programjourney1> as a newbie to perl and programming in general i was wondering a good (cheap) source for step by step perl. i understand how strings, objects, variables, loops, ect work. 

[19:42] <programjourney1> is the oreilly perl ref book good?

[19:43] <MasterDuke> programjourney1: have you seen http://perl6intro.com/ ?

[19:43] <programjourney1> no, seems i will learn some. also 2 more questions

[19:44] *** eroux joined
[19:44] <zengargoyle> programjourney1: take a look at: http://greenteapress.com/wp/think-perl-6/

[19:44] <programjourney1> 1 do PHP and perl mix well, and where is a guide to make a website with perl and php, or just perl

[19:44] <ryu0> programjourney1: the one for Think Perl?

[19:44] <ryu0> programjourney1: grab the free PDF version from the author's website. buy the actual book if you like it.

[19:45] <basket> zengargoyle: OSX uses LF; it's a certified Unix. Pre-OS X MacOS (which was EOL 15 years ago) used CR

[19:45] *** ijneb left
[19:45] <zengargoyle> i think that's the most put-together introduction that is meant for beginners, but explains most of the basic structures and stuff and some of the more esoteric stuff.

[19:45] *** Praise- is now known as Praise

[19:45] <Geth> ¦ doc: 274dfaa8e4 | (Nadim Khemir)++ (committed by Zoffix Znet) | 2 files

[19:45] <Geth> ¦ doc: Changed link in the data dump section of the FAQ (#1435)

[19:45] <Geth> ¦ doc: 

[19:45] <Geth> ¦ doc: * Changed link in the data dump section of the FAQ

[19:45] <Geth> ¦ doc: 

[19:45] <Geth> ¦ doc: * fixed dashes in nativecall doc

[19:45] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/274dfaa8e4

[19:46] *** itaipu left
[19:46] <zengargoyle> basket: lol, yeah.  i just sorta mean like reading different file formats and not really wanting to do \n yourself.

[19:47] <programjourney1> thanks. will read. i guess one more Q, What is the most significant change in perl 6 to 5?

[19:47] <zengargoyle> p6 usually chops off whatever line terminator you have and just puts the appropriate line terminator when you go back out.  unless you really need to do that yourself for some reason...

[19:48] <perlpilot> programjourney1: that's a weird question.

[19:48] *** itaipu joined
[19:48] <zengargoyle> programjourney1: for me, i think it's actually the precompilation of code thing.

[19:49] <El_Che> zengargoyle: that was already there in p5

[19:49] <zengargoyle> who actually used it?

[19:49] <El_Che> I woudn't use the sha1 stuff if I had a choice :P

[19:50] <zengargoyle> i've never seen a precompiled bit of perl5 in my life outside of examples and warnings to not do that. :)

[19:50] <perlpilot> programjourney1: grammars.  built-in objects.  multiple dispatch.    (one of those maybe)

[19:51] <El_Che> concurrency and sane OO for me

[19:51] <perlpilot> zengargoyle: you wouldn't want to see it anyway, it looks like a bunch of garbage ;)

[19:51] <zengargoyle> and you can't just grep your lib directory to try and find the error message you saw and just look at the source very easily now... it's all in that sha'd repo thing now.

[19:52] *** ijneb joined
[19:52] *** programjourney1 left
[19:53] <ugexe> grep ~/.zef/store

[19:54] <zengargoyle> that's cheating. :)  but point taken.

[19:55] <zengargoyle> i consider .zef and .perl6 to be temporary things that can be nuked at whim.  and prefer my things in site so it's not as per-user.

[19:56] <ugexe> or `zef locate lib/Zef.pm6`, `zef locate Zef`, `zef locate E0A5C5E5697087B5AECE48D456692BE1B5C87193 --sha1`

[19:56] <Geth> ¦ doc: aeab992995 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/faq.pod6

[19:56] <Geth> ¦ doc: Minor fixups

[19:56] <Geth> ¦ doc: 

[19:56] <Geth> ¦ doc: - Get rid of unnecessary and confusing colon-pair syntax

[19:56] <Geth> ¦ doc: - Clarify `dd` is non-standard routine

[19:56] <Geth> ¦ doc: - Reword a sentence and improve its link

[19:56] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/aeab992995

[19:56] <El_Che> it took me a while to get used to the user repo by default, but I like that approach a lot

[19:56] <zengargoyle> old habit.  i totally have 4 or more users in /home that are really just me. :)

[19:58] *** Cabanossi left
[19:58] <zengargoyle> comes from .edu solaris giant unix nfs supporting 50k+ just students and you can't just rely on things just being in ~

[19:59] *** Cabanossi joined
[20:00] *** itaipu left
[20:02] <zengargoyle> i would really like a zef wrapper or the like for p6doc like perldoc.  or tab completion.  or cpandoc.  (i'm just not sure if things have settled enough to start on those type of things).

[20:02] <ugexe> m: my $needle = "resolve"; my $dist = $*REPO.need(CompUnit::DependencySpecification.new(:short-name<Zef>)).distribution; my @libs = $dist.meta<provides>.values.map(*.keys[0]); my $found := @libs.map({ $dist.content($_).lines.grep(*.contains($needle)).Slip }).grep(*.defined); say $found.perl

[20:02] <camelia> rakudo-moar c68762: OUTPUT: «("    method resolve(\$spec, :\@at) \{", "        ?self.resolve(|c)", "        abort \"Failed to resolve any candidates. No reason to proceed\" unless +\@candidates;", "        abort \"Failed to resolve any candidates. No reason to proceed\" unless +\@ca…»

[20:02] <andreoss> m: BEGIN {role G[::A] {};role F[::A] does G[A] {}; my $x = F[Int] } say $x.^roles

[20:02] <camelia> rakudo-moar c68762: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3le F[::A] does G[A] {}; my $x = F[Int] }7⏏5 say $x.^roles␤    expecting any of:␤        infix␤        infix stoppe…»

[20:02] <andreoss> m: BEGIN {role G[::A] {};role F[::A] does G[A] {}; my $x = F[Int]; } ;say $x.^roles

[20:02] <camelia> rakudo-moar c68762: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$x' is not declared␤at <tmp>:1␤------> 3A] does G[A] {}; my $x = F[Int]; } ;say 7⏏5$x.^roles␤»

[20:03] <andreoss> m: BEGIN {role G[::A] {};role F[::A] does G[A] {}; constant $x = F[Int]; } ;say $x.^roles

[20:03] <camelia> rakudo-moar c68762: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$x' is not declared␤at <tmp>:1␤------> 3s G[A] {}; constant $x = F[Int]; } ;say 7⏏5$x.^roles␤»

[20:04] <andreoss> ugexe: do you mean i should declare my derived role at compile time?

[20:04] <zengargoyle> ugexe: heh, i have a bunch of cut-n-paste like that.  just nothing worthy of packaging up yet.

[20:05] *** Rawriful left
[20:05] <zengargoyle> or i just haven't gotten around to it yet. :P

[20:06] * zengargoyle misses `perldoc Class<TAB><TAB>` and seeing what i have already...

[20:07] *** itaipu joined
[20:09] <zengargoyle> or `cpandoc Some::Interesting::Module` because now POD6 is code and if the code doesn't compile, you don't get the POD6 out of it.  graaar.

[20:09] *** markmont joined
[20:09] *** zakharyas joined
[20:10] <zengargoyle> that would be my pick for lamest p6 decision... or ²² == 4, not sure which annoys me more. :)

[20:11] <ugexe> I mean that ::A does not get turned into something your `does A` can use in time

[20:13] *** Rawriful joined
[20:16] *** itaipu left
[20:18] *** awwaiid joined
[20:21] *** andrzejku left
[20:21] <ugexe> m: role Bar[::A] { }; role Foo[::A] { submethod BUILD(|) { self does Bar[A] } }; say Foo[Int].new.^roles # i suspect you can do what I think you want to do like this

[20:21] <camelia> rakudo-moar c68762: OUTPUT: «((Bar[A]) (Foo[Int]))␤»

[20:21] <ugexe> maybe not

[20:23] *** jjatria left
[20:24] *** dubi0us joined
[20:24] *** jjatria joined
[20:27] *** dubi0us_ left
[20:38] <ugexe> m: role Bar[::A] { method bar { A } }; role Foo[::A] { my $t = A; .^add_role(Bar[$t]); .^compose; }; class XXX does Foo[Int] { }; say XXX.new.^roles; # andreoss this seems to be getting closer

[20:38] <camelia> rakudo-moar c68762: OUTPUT: «((Foo[Int]) (Bar[Int]))␤»

[20:38] *** cdg_ joined
[20:39] *** cdg_ left
[20:40] *** markmont left
[20:41] *** nicq20 joined
[20:42] <nadim> hi, printing something in hex format is simple with $somethin.base(16) but if I know my $something to be 8 bits, how can i get a leading zero, eg 0x01? something more nifty than sprintf that is.

[20:42] *** cdg_ joined
[20:42] *** Cabanossi left
[20:44] *** Cabanossi joined
[20:44] <raschipi> m: (100..999).pick.polymod(2**8).say

[20:44] <camelia> rakudo-moar c68762: OUTPUT: «(186 3)␤»

[20:45] <raschipi> m: (100..999).pick.polymod(2**8 xx *).say

[20:45] <camelia> rakudo-moar c68762: OUTPUT: «(243)␤»

[20:46] <zengargoyle> i guess .fmt() is sprintf...

[20:46] <AlexDaniel> m: say sprintf(‘%02x’, 4)

[20:46] <camelia> rakudo-moar c68762: OUTPUT: «04␤»

[20:46] <AlexDaniel> m: printf(‘%02x’, 4)

[20:46] <camelia> rakudo-moar c68762: OUTPUT: «04»

[20:47] <ugexe> m: say Buf.new(1).gist.subst(:g, /[^"Buf:"] | \< | \>/, "")

[20:47] <camelia> rakudo-moar c68762: OUTPUT: «0x01␤»

[20:47] <AlexDaniel> m: 4.fmt(‘%02x’)

[20:47] <camelia> rakudo-moar c68762: ( no output )

[20:47] <AlexDaniel> m: say 4.fmt(‘%02x’)

[20:47] <camelia> rakudo-moar c68762: OUTPUT: «04␤»

[20:47] <zengargoyle> m: say 11.fmt('0x%02x')

[20:47] <camelia> rakudo-moar c68762: OUTPUT: «0x0b␤»

[20:49] <nadim> yes sprintf is fmt but it is still interesting to see how other do it, ugexe that's almost vicious ;)

[20:49] <zengargoyle> i could see some weird '0x00' and funny search/replace to put .base(16) into the end bits...

[20:49] <zengargoyle> ugexe: hah

[20:51] <zengargoyle> the bit that gets me is the '0x' leading.  it's not really a part of base-16, just convention of what you want to see.

[20:53] *** leego is now known as leedo

[20:53] <zengargoyle> might as well be '0h' or something, so some really nice pure conversion thing is iffy.

[20:55] *** cdg_ left
[20:55] *** cdg joined
[20:57] <raschipi> It could also be at the end and be .base(16)

[20:57] <raschipi> Time to go. Bye everyone.

[20:57] *** cdg_ joined
[20:58] <nadim> bye

[20:58] *** cdg__ joined
[20:58] <zengargoyle> my thinking is you'll have to specify '0x' as the leader, and '2' as the expected max range, and '0' as the padding... so you'll end up with sprintf anyways...

[20:58] *** cdg left
[21:00] <zengargoyle> or i guess you could just expect multiple of 2 hex digits and leading 0 and then you just have to give '0x' and :padding or such....

[21:02] *** raschipi left
[21:02] *** cdg_ left
[21:02] <zengargoyle> heh, 11.base(16, :style<DWIM>)

[21:04] *** markmont joined
[21:05] <zengargoyle> heh, 11.base(16, :style<DWIM>), :style<cisco-mac> :style<ipv6> :style<ipv4> :style<short-mac> :style<canon> :style<RFC-XXXX> :P

[21:06] <MasterDuke> looks like a module idea to me...

[21:09] <zengargoyle> heh, i had a whole library of ip/mac/oid/dotquad conversion things due to reasons. :)

[21:10] *** mcmillhj left
[21:10] <zengargoyle> curse people who store and log mac addresses as 2 16bit ints...

[21:10] *** TEttinger joined
[21:11] <zengargoyle> and APIs that can't decide between "MAC-STRING" and dotted decimal

[21:12] *** cdg__ left
[21:13] *** cdg_ joined
[21:15] *** zakharyas left
[21:20] * zengargoyle lols, 11.all-your-base(16, :style<C>)

[21:21] <andreoss> m: role Bar[::A] { method bar { A } }; role Foo[::A] { my $t = A; .^add_role(Bar[$t]); .^compose; }; say Foo[Int].new.^roles; say Foo[Int].^roles.new;

[21:21] <camelia> rakudo-moar c68762: OUTPUT: «((Foo[Int]) (Bar[Int]))␤()␤»

[21:21] <andreoss> it's so obscure

[21:22] <ugexe> not really, it works because its so simple

[21:22] <andreoss> .^compose happens on coersion to class?

[21:22] *** skids left
[21:23] *** rindolf left
[21:23] *** cpage_ left
[21:24] <ugexe> m: role Foo { say 42; }; say 1; class Bar does Foo { }; say 2;

[21:24] <camelia> rakudo-moar c68762: OUTPUT: «42␤1␤2␤»

[21:24] <andreoss> but MOP methods could be different 

[21:25] <andreoss> or why else .^roles is empty on Foo[Int]?

[21:26] <nadim> Has anyone serialized object to send them over the network? What serialization module did you use? just .perl?

[21:27] *** marcusramberg joined
[21:31] <andreoss> YAML

[21:32] <ugexe> https://irclog.perlgeek.de/perl6/2016-03-17#i_12202817 andreoss 

[21:33] <nadim> YAML is nice if you want to read it but the parsing is on the heavy side

[21:33] <nadim> even if modules do all the work

[21:35] <zengargoyle> buggable: eco pack

[21:35] <buggable> zengargoyle, Found 16 results: MessagePack, Net::Packet, HTTP::HPACK, if, Numeric::Pack. See https://modules.perl6.org/s/pack

[21:35] <andreoss> ugexe: so it's sort of a bug? 

[21:36] <andreoss> i got this too

[21:36] <andreoss> # No such method 'item' for invocant of type 'A'

[21:36] <andreoss> in some cases

[21:36] <zengargoyle> buggable: eco serial

[21:36] <buggable> zengargoyle, Found 15 results: JSON::Tiny, JSON::Fast, Avro, JSON::Hjson, XML::Class. See https://modules.perl6.org/s/serial

[21:36] <ugexe> andreoss: probably

[21:37] <zengargoyle> buggable: eco rpc

[21:37] <buggable> zengargoyle, Found 2 results: JSON::RPC, Odoo::Client. See https://modules.perl6.org/s/rpc

[21:38] <ugexe> buggable: eco Ser

[21:38] <buggable> ugexe, Found 103 results: Crust, JSON::Tiny, HTTP::UserAgent, HTTP::Server::Async, Farabi6. See https://modules.perl6.org/s/Ser

[21:38] <zengargoyle> nadim: pls .tell me if you pick something...

[21:38] <andreoss> should i golf my case into something reportable?

[21:40] <nadim> zengargoyle: I will, going for .perl right now for the tries. https://github.com/teodozjan/perl-store is a thin wrapper around .perl, will be the next try. then I'll check sizes of the serializations

[21:41] <zengargoyle> eco is getting big enough that i want MetaCPAN like browsing.

[21:42] <ugexe> https://github.com/FROGGS/p6-Ser/blob/master/lib/Ser.pm

[21:42] *** Cabanossi left
[21:43] <nadim> ugex++

[21:43] <nadim> ugexe:++

[21:44] <nadim> zengargoyle: you may want to look at that link, my guess is that it will be the fastest

[21:44] *** Cabanossi joined
[21:45] <zengargoyle> yeah, ugexe++ yowza.

[21:45] *** pmurias left
[21:47] <zengargoyle> well, FROGGS++ 

[21:53] <andreoss> m: sub foo(:::D $x) { $x }; say foo(10);say foo(Any);

[21:53] <camelia> rakudo-moar a3b957: OUTPUT: «10␤(Any)␤»

[21:53] <andreoss> m: sub foo(::X:D $x) { $x }; say foo(10);say foo(Any);

[21:53] <camelia> rakudo-moar a3b957: OUTPUT: «10␤(Any)␤»

[21:53] <andreoss> m: sub foo(Any:D $x) { $x }; say foo(10);say foo(Any);

[21:53] <camelia> rakudo-moar a3b957: OUTPUT: «10␤Parameter '$x' of routine 'foo' must be an object instance of type 'Any', not a type object of type 'Any'.  Did you forget a '.new'?␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:53] <andreoss> :D doesn't work on type tags?

[21:54] *** jjatria left
[21:55] *** jjatria joined
[21:56] <andreoss> m: sub foo(::T:D $x) { T }; say foo(10)

[21:56] <camelia> rakudo-moar a3b957: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    T used at line 1␤␤»

[21:59] <TimToady> m: sub foo(Any:D ::T $x) { T }; say foo(10)

[21:59] <camelia> rakudo-moar a3b957: OUTPUT: «(Int)␤»

[22:00] <ugexe> m: sub foo(::T:D $x) { ::("T:D") }; say foo(10) # what you were doing before

[22:00] <camelia> rakudo-moar a3b957: OUTPUT: «(Int)␤»

[22:01] *** goki joined
[22:01] *** goki left
[22:02] <zengargoyle> that looks like 'T:D' is a name and not the :D defined.

[22:03] <ugexe> well yeah, ::T isnt a type constraint

[22:03] * zengargoyle doesn't quite get Any:D ::T $x

[22:04] <zengargoyle> but it's sorta starting to gel....

[22:04] *** cpage_ joined
[22:05] <zengargoyle> is that like my Array @x is an array of Array?

[22:05] *** wamba left
[22:06] <ugexe> ::T is like destructure but for type, its not a constraint

[22:08] <zengargoyle> ah, i think i follow.

[22:08] *** wamba joined
[22:08] <andreoss> probably ::T could go into [] just as it does for roles

[22:08] <andreoss> sub foo[::T](T:D $x) {...}

[22:09] *** Kyo91 left
[22:12] *** setty1 left
[22:12] <ugexe> yes, role signatures are just like any other

[22:14] <zengargoyle> andreoss: did you speak at TPCiA?

[22:14] <andreoss> defenetly not

[22:15] <andreoss> definitely

[22:15] <zengargoyle> ok, my bad.  the audio on recordings isn't that good yet and your nick sort of sounded like some name i half heard.  nm. :)

[22:16] *** TEttinger left
[22:16] <MasterDuke> zengargoyle: was it you who mentioned the videos are in post-production?

[22:16] <zengargoyle> MasterDuke: i saw it in p6 weekly and went YAY!

[22:17] <zengargoyle> so from lizmat...

[22:17] *** gabiruh left
[22:17] <ugexe> m: role Foo[::T = role :: { method bar { 42 } }] { .^add_role(T); .^compose; }; say Foo.bar; # you can stuff all sorts of stuff in the signature

[22:17] <camelia> rakudo-moar a3b957: OUTPUT: «42␤»

[22:18] *** Grrrr left
[22:18] *** protium left
[22:18] <MasterDuke> zengargoyle++, lizmat++

[22:18] <andreoss> ugexe: is it usefull anyhow?

[22:19] * zengargoyle yeah the livestream recordings are a bit hard to watch... i'm crossing my fingers for post-production recordings.

[22:19] *** protium joined
[22:19] *** awwaiid left
[22:19] *** notostraca joined
[22:19] *** m0ltar_ joined
[22:19] *** ab5tract left
[22:20] *** gabiruh joined
[22:20] <ugexe> well, how is it not useful?

[22:20] *** awwaiid joined
[22:20] <zengargoyle> my brain hurts looking at two screens at an angle.

[22:20] *** ab5tract joined
[22:20] <El_Che> ah the main hall? yeah

[22:21] <El_Che> it was hard talking there, with people on the left and right and empty space in the middle

[22:21] *** Grrrr joined
[22:21] <andreoss> m: role F[$T] {} ; role G[$T] does F[$T] {}; G[Int].new.^roles.say

[22:21] <camelia> rakudo-moar a3b957: OUTPUT: «((G[Int]) (F[Mu]))␤»

[22:22] <zengargoyle> and people's heads in the way.  there's a lot of people peering around each other trying to read the screen.  (but enough complaining.... )

[22:22] <andreoss> well, all of this stuff could just be constructor arguments

[22:22] <El_Che> yeah, I adapted my slides when possible to get stoff on top and have the bottom mostly empty

[22:23] *** notostraca is now known as TEttinger

[22:24] <ugexe> yes you have to decide what works best with your design

[22:24] <andreoss> what is the reason for not parameterising classes?

[22:25] *** espadrine left
[22:25] <zengargoyle> i've only watched the first few in the playlist as of yet.  still on samcv++ second(or first) unicode talk.

[22:26] <zengargoyle> El_Che: will it be obvious when i finally get to your talk?

[22:27] <El_Che> it was on the last day, so don't hold your breath ;)

[22:27] <zengargoyle> El_Che: i mean more like will El_Che be mentioned in some way that i know the person is actually you? :)

[22:28] <El_Che> good question, probably nxadm

[22:28] <El_Che> it's not about perl6, but about docker though

[22:28] * zengargoyle makes mental note. :)

[22:28] *** devmikey left
[22:29] <zengargoyle> IRC names are so weird when you know of someone twice but not once. :)

[22:29] <El_Che> yeah, I tend to have different nicks on different platforms :)

[22:29] <El_Che> I added El_Che to my nametag :)

[22:39] *** Gruber joined
[22:39] *** Grrrr left
[22:40] *** cdg_ left
[22:42] *** Cabanossi left
[22:44] *** Cabanossi joined
[22:47] *** skids joined
[22:55] *** sena_kun left
[23:01] *** cpage_ left
[23:02] *** Kyo91 joined
[23:04] *** wamba left
[23:05] *** cpage_ joined
[23:09] *** ufobat left
[23:14] *** BenGoldberg joined
[23:14] *** jjatria left
[23:18] *** dubi0us_ joined
[23:22] *** dubi0us left
[23:28] *** dubi0us_ left
[23:29] <nadim> zengargoyle: using .perl and EVAL was simple. I had to add another new method to create the object with the argument .perl thinks it should give new, but EVAL  is SLOOOOOOOOOOW and I mean horribly slow. it's at the limit of unusable. A Data::Dump::Tree::Folding object, used to do curses stuff, in color, serializes to around 50 KB for 100 lines, decoding it takes a 1000th of a second but evaluating it takes 4 seconds!, 

[23:33] *** dubi0us joined
[23:37] <timotimo> Ulti: the person on reddit that you promised the WAT module to has asked for you to deliver :D

[23:37] *** dubi0us left
[23:37] *** nicq20 left
[23:40] <nadim> timotimo: did you see the message I wrote, to you, earlier today?

[23:41] *** Cabanossi left
[23:42] <timotimo> let me scroll up

[23:42] <timotimo> ah, neat, the curses thing is done

[23:42] <nadim> yes

[23:43] <timotimo> i shall try it soon, but for today i'm done already

[23:43] <nadim> and you can use it multiple times

[23:43] <nadim> no problem

[23:44] <nadim> I have just tried to do remote - curses -folding, eg: you send you rendered data with folding information to another process and can look at it there,.

[23:44] <nadim> but it's too bloody slow

[23:44] *** Cabanossi joined
[23:44] <nadim> on the other hand sending it to just look at, IE not folding, takes little time and is workable

[23:47] *** dubi0us joined
[23:48] <timotimo> hm, i wonder how workable it is to do the rendering 100% in the process that "owns" the object

[23:48] <timotimo> and having a "dumb terminal" on the other side

[23:49] <nadim> if you do not need folding on the other side, it's fast enough, although not a speed deamon.

[23:49] <nadim> just sending the rendering is just network traffic

[23:50] <nadim> but having folding means recreating the object that holds the fold information, very slow.

[23:51] <nadim> using the scrolling the terminal provides, in the remote.display.process is good enough

[23:52] <nadim> need to sleep, let's talk tomorrow

[23:52] <nadim> good night

[23:56] <zengargoyle> .tell nadim thanks, and good night.

[23:56] <yoleaux> zengargoyle: I'll pass your message to nadim.

[23:57] *** pharv_ joined
[23:59] <andreoss> Segmentation fault causes `No subtests run` with prove

[23:59] <timotimo> gnite nadim 

[23:59] <zengargoyle> seems EVAL would have the same problems as the REPL, whole new scope and tons of work and nesting of levels.

[23:59] <timotimo> andreoss: either that or just something about exit codes

