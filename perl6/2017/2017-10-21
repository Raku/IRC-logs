[00:03] *** pilne joined
[00:05] *** Zoffix joined
[00:13] * Zoffix listens to a few songs, then ques https://www.youtube.com/watch?v=IfU_BLec1-o to clear the ears -_-

[00:18] <Geth> ¬¶ doc: 57f7680f43 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Mu.pod6

[00:18] <Geth> ¬¶ doc: Fix broken links in text

[00:18] <Geth> ¬¶ doc: 

[00:18] <Geth> ¬¶ doc: Fixes #1592

[00:18] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/57f7680f43

[00:18] <synopsebot> Link: https://doc.perl6.org/type/Mu

[00:19] *** cdg joined
[00:22] *** troys is now known as troys_

[00:23] *** cdg left
[00:30] *** espadrine left
[00:30] *** troys_ is now known as troys

[00:30] <Geth> ¬¶ doc: 560d20ef5a | (Zoffix Znet)++ | doc/Type/Proc/Async.pod6

[00:30] <Geth> ¬¶ doc: Document Proc::Async.Supply

[00:30] <Geth> ¬¶ doc: 

[00:30] <Geth> ¬¶ doc: Fixes #1605

[00:30] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/560d20ef5a

[00:30] <synopsebot> Link: https://doc.perl6.org/type/Proc/Async

[00:30] <TEttinger> timotimo: make sure to listen to mouth sounds and mouth moods too

[00:31] <timotimo> TEttinger: already have

[00:31] <TEttinger> rollercloser is excellent

[00:31] <timotimo> rollercloser didn't connect with me at all

[00:32] <TEttinger> wndrwll also is bizarre and I like a lot

[00:32] *** rindolf left
[00:32] <timotimo> yes, i like that one

[00:32] <TEttinger> oh, man. friends

[00:33] <timotimo> friends and best are both fantastic

[00:33] <timotimo> i love any song that samples down with the sickness

[00:37] <timotimo> i wanna lie down to sleep but the cat is in the way

[00:41] *** Cabanossi left
[00:42] *** Cabanossi joined
[00:59] *** itaipu joined
[01:00] *** nadim left
[01:00] <Zoffix> ugh, crap. Merged wrong tickets together

[01:01] <Zoffix> "An incorrectly merged ticket cannot be unmerged via the user interface, but all is not lost! This is RT, all is never lost! It's never recommended to work directly on your RT database, but in this instance that is the only way to recover from this mistake. If you're in any way unsure of what you're doing, don't do it."

[01:02] <Zoffix> Greeeeat

[01:06] *** nadim joined
[01:07] <Zoffix> Stupid RT

[01:09] <Zoffix> And after merging, it orders all the replies by original dates, so it's a right mess

[01:19] <AlexDaniel`> Zoffix: what I realized at some point is that merging is never a good idea. Better link the tickets

[01:20] <Geth> ¬¶ doc: 39d2b97a5c | (Zoffix Znet)++ | doc/Language/operators.pod6

[01:20] <synopsebot> Link: https://doc.perl6.org/language/operators

[01:20] <Geth> ¬¶ doc: Get smartmatch into index

[01:20] <Geth> ¬¶ doc: 

[01:20] <Geth> ¬¶ doc: Fixes #1587

[01:20] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/39d2b97a5c

[01:20] *** troys is now known as troys_

[01:20] <AlexDaniel`> ‚ÄúRefers to‚Äù and ‚ÄúReferred to by‚Äù

[01:20] <Zoffix> But then we have several tickets all about the same thing

[01:20] <geekosaur> merging is sometimes a good idea, specifically when someone replies in such a way as to create a new ticket instead of adding to the old

[01:20] <AlexDaniel`> that's ok, once one is resolved, someone will easily close all of them :)

[01:26] *** cdg joined
[01:30] *** eliasr left
[01:30] *** cdg left
[01:32] *** bitrauser joined
[01:32] *** BenGoldberg joined
[01:32] *** itaipu left
[01:35] *** bitrauser_ left
[01:37] *** cgfbee left
[01:40] *** COMBORICO left
[01:41] *** gdonald left
[01:42] *** nadim left
[01:45] *** astj left
[01:45] *** ilbot3 left
[01:46] *** astj joined
[01:47] *** cgfbee joined
[01:47] *** imcsk8 left
[01:48] *** imcsk8 joined
[01:53] *** itaipu joined
[01:54] *** gdonald joined
[01:56] *** ilbot3 joined
[01:56] *** ChanServ sets mode: +v ilbot3

[01:56] *** ryn1x left
[02:02] *** HoboWithAShotgun left
[02:11] *** astj left
[02:11] *** astj joined
[02:12] *** astj left
[02:12] *** astj joined
[02:13] *** mr-foobar left
[02:15] *** mr-foobar joined
[02:18] *** astj left
[02:19] *** astj joined
[02:25] *** gdonald left
[02:25] *** noganex joined
[02:28] *** noganex_ left
[02:33] *** cdg joined
[02:34] *** geekosaur left
[02:34] *** gdonald joined
[02:35] *** astj left
[02:35] *** astj joined
[02:35] *** itaipu left
[02:39] *** llfourn left
[02:40] *** astj left
[02:40] *** geekosaur joined
[02:47] *** BenGoldberg left
[02:58] *** ryn1x joined
[03:01] *** gdonald left
[03:05] *** gdonald joined
[03:16] *** klapperl joined
[03:31] *** ryn1x left
[03:34] *** geekosaur left
[03:40] *** Cabanossi left
[03:41] *** Cabanossi joined
[03:44] *** astj joined
[03:44] *** gdonald left
[03:46] *** khw left
[03:49] *** geekosaur joined
[03:57] *** ryn1x joined
[04:01] *** ryn1x left
[04:06] *** gdonald joined
[04:07] *** AlexDaniel` left
[04:09] *** cpage_ left
[04:10] *** Cabanossi left
[04:11] *** Cabanossi joined
[04:12] *** geekosaur left
[04:24] *** W4RL0RD left
[04:25] *** AlexDani` joined
[04:25] *** AlexDani` is now known as AlexDaniel`

[04:28] *** geekosaur joined
[04:32] *** statisfiable6 left
[04:32] *** releasable6 left
[04:32] *** coverable6 left
[04:32] *** benchable6 left
[04:32] *** committable6 left
[04:32] *** evalable6 left
[04:32] *** quotable6 left
[04:32] *** unicodable6 left
[04:32] *** bisectable6 left
[04:32] *** nativecallable6 left
[04:32] *** greppable6 left
[04:32] *** bloatable6 left
[04:32] *** squashable6 left
[04:34] *** coverable6 joined
[04:34] *** bloatable6 joined
[04:34] *** nativecallable6 joined
[04:34] *** quotable6 joined
[04:34] *** bisectable6 joined
[04:34] *** committable6 joined
[04:34] *** evalable6 joined
[04:34] *** releasable6 joined
[04:34] *** ChanServ sets mode: +v bisectable6

[04:34] *** ChanServ sets mode: +v committable6

[04:34] *** greppable6 joined
[04:34] *** unicodable6 joined
[04:34] *** statisfiable6 joined
[04:34] *** benchable6 joined
[04:34] *** squashable6 joined
[04:34] *** ChanServ sets mode: +v greppable6

[04:34] *** ChanServ sets mode: +v benchable6

[04:38] *** evalable6 left
[04:38] *** evalable6 joined
[04:38] *** bisectable6 left
[04:38] *** unicodable6 left
[04:38] *** squashable6 left
[04:38] *** benchable6 left
[04:38] *** committable6 left
[04:38] *** bisectable6 joined
[04:38] *** unicodable6 joined
[04:38] *** ChanServ sets mode: +v bisectable6

[04:38] *** ChanServ sets mode: +v unicodable6

[04:38] *** committable6 joined
[04:38] *** benchable6 joined
[04:38] *** ChanServ sets mode: +v benchable6

[04:38] *** squashable6 joined
[04:38] *** ChanServ sets mode: +v squashable6

[04:40] *** releasable6 left
[04:41] *** releasable6 joined
[04:41] *** ChanServ sets mode: +v releasable6

[04:42] <wander> ping

[04:45] *** pilne left
[04:48] *** ryn1x joined
[04:54] *** bloatable6 left
[04:54] *** coverable6 left
[04:54] *** quotable6 left
[04:54] *** nativecallable6 left
[04:54] *** statisfiable6 left
[04:54] *** bloatable6 joined
[04:54] *** greppable6 left
[04:54] *** quotable6 joined
[04:54] *** ChanServ sets mode: +v quotable6

[04:54] *** nativecallable6 joined
[04:54] *** ChanServ sets mode: +v nativecallable6

[04:54] *** coverable6 joined
[04:54] *** statisfiable6 joined
[04:54] *** ChanServ sets mode: +v statisfiable6

[04:54] *** greppable6 joined
[04:54] *** ChanServ sets mode: +v greppable6

[05:14] *** benchable6 left
[05:14] *** releasable6 left
[05:14] *** committable6 left
[05:14] *** squashable6 left
[05:14] *** bloatable6 left
[05:14] *** evalable6 left
[05:14] *** coverable6 left
[05:14] *** statisfiable6 left
[05:14] *** bisectable6 left
[05:14] *** unicodable6 left
[05:14] *** greppable6 left
[05:14] *** nativecallable6 left
[05:14] *** quotable6 left
[05:14] *** bloatable6 joined
[05:14] *** evalable6 joined
[05:14] *** greppable6 joined
[05:14] *** quotable6 joined
[05:14] *** nativecallable6 joined
[05:14] *** benchable6 joined
[05:14] *** committable6 joined
[05:14] *** coverable6 joined
[05:14] *** ChanServ sets mode: +v evalable6

[05:14] *** ChanServ sets mode: +v greppable6

[05:14] *** ChanServ sets mode: +v quotable6

[05:14] *** ChanServ sets mode: +v nativecallable6

[05:14] *** ChanServ sets mode: +v benchable6

[05:14] *** unicodable6 joined
[05:14] *** releasable6 joined
[05:14] *** bisectable6 joined
[05:14] *** ChanServ sets mode: +v unicodable6

[05:14] *** ChanServ sets mode: +v releasable6

[05:14] *** squashable6 joined
[05:14] *** ChanServ sets mode: +v squashable6

[05:14] *** statisfiable6 joined
[05:16] *** cdg left
[05:20] *** cpage_ joined
[05:20] *** cpage_ left
[05:21] *** cpage_ joined
[05:33] *** bwisti joined
[05:52] *** wamba joined
[05:56] *** Cabanossi left
[05:57] *** Cabanossi joined
[06:11] *** xtreak joined
[06:17] *** ryn1x left
[06:32] *** wamba left
[06:41] *** Cabanossi left
[06:42] *** Cabanossi joined
[06:57] *** hchienjo joined
[07:06] *** sena_kun joined
[07:08] *** domidumont joined
[07:08] *** xtreak left
[07:13] *** domidumont left
[07:16] *** cdg joined
[07:17] *** domidumont joined
[07:19] <wander> m: grammar G { rule TOP { '(' [<var-decl>+ % ',']? ')' } rule var-decl { 'int' \w+ } } say G.parse("(int a, int b)");

[07:19] <camelia> rakudo-moar 7cf5ce7ef: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Strange text after block (missing semicolon or comma?)‚ê§at <tmp>:1‚ê§------> 3ule TOP { '(' [<var-decl>+ % ',']? ')' }7‚èè5 rule var-decl { 'int' \w+ } } say G.par‚ê§    expecting any of:‚ê§       ‚Ä¶¬ª

[07:19] <wander> m: grammar G { rule TOP { '(' [<var-decl>+ % ',']? ')' }; rule var-decl { 'int' \w+ } }; say G.parse("(int a, int b)");

[07:19] <camelia> rakudo-moar 7cf5ce7ef: OUTPUT: ¬´Nil‚ê§¬ª

[07:21] *** cdg left
[07:21] *** espadrine joined
[07:22] <wander> how to get this sentence matched, it seems non-backtrack that causes unmatch

[07:22] <wander> maybe add a new rule 'parameter-list'

[07:26] <geekosaur> m: grammar G { rule TOP { '(' [<var-decl>* % ','] ')' }; rule var-decl { 'int' \w+ } }; say G.parse("(int a,int b)"); # need to gobble a space somewhere still

[07:26] <camelia> rakudo-moar 7cf5ce7ef: OUTPUT: ¬´ÔΩ¢(int a,int b)ÔΩ£‚ê§ var-decl => ÔΩ¢int aÔΩ£‚ê§ var-decl => ÔΩ¢int bÔΩ£‚ê§¬ª

[07:28] <wander> k

[07:29] *** andrzejku joined
[07:32] *** Mrofnet left
[07:34] *** nadim joined
[07:34] <wander> grammar G { rule TOP { '(' [<var-decl>* % ','] ')' }; rule var-decl { <.ws> 'int' \w+ } }; say G.parse("(int a, int b)");

[07:35] <wander> m: grammar G { rule TOP { '(' [<var-decl>* % ','] ')' }; rule var-decl { <.ws> 'int' \w+ } }; say G.parse("(int a, int b)");

[07:35] <camelia> rakudo-moar 7cf5ce7ef: OUTPUT: ¬´ÔΩ¢(int a, int b)ÔΩ£‚ê§ var-decl => ÔΩ¢int aÔΩ£‚ê§ var-decl => ÔΩ¢ int bÔΩ£‚ê§¬ª

[07:35] <wander> dirty solution

[07:43] *** flatwhite joined
[07:44] *** kerframil left
[07:44] *** flatwhite is now known as kerframil

[07:46] *** todd joined
[07:47] <todd> question: If I write a program for a customer who pays my labor to write it, who owns the program?  Me or the customer? 

[07:51] <TEttinger> the NSA

[07:52] *** darutoko joined
[07:52] <TEttinger> but yeah if they pay you to write it, and it was in your employment contract that you'd be paid for writing the code, they probably own it unless they have a terrible legal team

[07:52] <TEttinger> or unless they didn't pay you

[07:56] <todd> I am a provate contractor.  What they payed me for fixing the problem.  They don't care how.  I was wondering if they owned any of the code I wrote to fix the problem.  The cusomer did not specifically ask me to write anything.

[07:57] *** |oLa| left
[07:59] <TEttinger> if the contract doesn't say that ownership is transferred from the author (you) to the employer, then you own the scripts and such created to solve their problem

[08:02] <todd> that is what I thought.  Thank you!

[08:03] <todd> If he specificlly ask me to write him such and such, than it belongs to him

[08:03] <TEttinger> mostly it depends on the contract

[08:04] <TEttinger> but it sounds like you wrote it so you could complete the job, without the employer needing to own what you wrote

[08:05] *** setty1 joined
[08:05] *** |oLa| joined
[08:06] <todd> no contract.  he jsut what his stuff to work

[08:06] <TEttinger> ah, should be fine then

[08:07] <TEttinger> if he comes back and wants you to work on the same thing again, he'll know you have made tools to help the job already and can maybe just run the same scripts

[08:09] *** Cabanossi left
[08:10] <TEttinger> it's kinda like if you employed a plumber, and he needed to quickly make some piece of wood with some nails at the end so he could pull a clog out of a pipe. he owns the wood with nails, since he made it, and unless it was your wood and your nails, he could go home with it and use it on some later day

[08:11] *** Cabanossi joined
[08:13] <todd> That is what I thought

[08:17] *** TEttinger left
[08:26] *** robertle joined
[08:38] *** andrzejku left
[08:41] *** |oLa|1 joined
[08:43] *** |oLa| left
[08:49] *** andrzejku joined
[08:49] *** andrzejku left
[08:55] <todd> exit

[08:55] *** todd left
[08:57] *** patrickz joined
[08:59] *** kerframil left
[09:07] *** ggoebel left
[09:14] <patrickz> Hi everyone!

[09:17] <patrickz> I have a C function that never returns and repeatedly calls a P6 function callback to notify of RPi button pushes. Now I want to stuff those events into a Supply. The docs advise against directly using the Thread class. Is there a cleaner way to run my blocking C function and process the callbacks than using Threads directly?

[09:19] *** andrzejku joined
[09:20] *** ggoebel joined
[09:22] *** aborazmeh joined
[09:22] *** aborazmeh left
[09:22] *** aborazmeh joined
[09:22] *** rindolf joined
[09:24] *** andrzejku left
[09:24] *** Cabanossi left
[09:24] *** dogbert17 left
[09:24] *** andrzejku joined
[09:24] *** dogbert17 joined
[09:26] *** Cabanossi joined
[09:29] *** andrzejku left
[09:31] *** cdg joined
[09:35] *** rba_ joined
[09:36] *** cdg left
[09:37] *** rba left
[09:41] *** hchienjo left
[09:42] *** robertle left
[09:43] *** llfourn joined
[09:45] *** margeas joined
[09:46] *** rba joined
[09:49] *** rba_ left
[09:52] <AlexDaniel`> patrickz: what about using a Channel?

[09:52] <AlexDaniel`> patrickz: oh, and you'll need a start block

[09:53] <AlexDaniel`> patrickz: if you can show a little bit of code I can give more precise hints :)

[09:53] <patrickz> In a moment :-)

[09:56] *** HoboWithAShotgun joined
[10:02] *** rba_ joined
[10:04] *** rba left
[10:08] * HoboWithAShotgun yawns into into a new day

[10:10] <patrickz> AlexDaniel`: https://gist.github.com/patzim/ddfd922a341b9dd4c30abc7359d37656

[10:11] <patrickz> afk for a bit

[10:13] *** itaipu joined
[10:14] *** mr-fooba_ joined
[10:15] <AlexDaniel`> patrickz: actually, I don't know if regular start {} block is going to work better (or work at all) in this particular case

[10:16] <HoboWithAShotgun> uh, you're running Perl6 on a Pi or something?

[10:16] <AlexDaniel`> yeah, seems so

[10:17] *** mr-foobar left
[10:17] <AlexDaniel`> I've been doing that in the past also, with a reasonable amount of success

[10:17] *** rba joined
[10:19] *** rba_ left
[10:19] <HoboWithAShotgun> which way did you install it pn the pie?

[10:21] <AlexDaniel`> installed it from debian repos

[10:22] <AlexDaniel`> unstable usually has a fairly recent version

[10:24] *** Cabanossi left
[10:25] <HoboWithAShotgun> boring ;-) was hoping for a "and then, after 20,000 miles, 17 crodoliles, 2 lions and a dragon it finally compiled" story

[10:26] *** Cabanossi joined
[10:31] *** rba_ joined
[10:34] *** rba left
[10:42] *** eliasr joined
[10:45] *** aborazmeh left
[10:55] *** Cabanossi left
[10:56] *** Cabanossi joined
[11:00] <AlexDaniel`> eater: hello

[11:01] <AlexDaniel`> eater: mind joining #moarvm for a sec? https://irclog.perlgeek.de/moarvm/2017-10-21#i_15334051

[11:15] *** mr-foobar joined
[11:15] *** itaipu left
[11:16] *** mr-fooba_ left
[11:31] <HoboWithAShotgun> bummer. no inline-java

[11:36] *** evalable6 left
[11:36] *** evalable6 joined
[11:49] *** Voldenet left
[12:03] *** Voldenet joined
[12:03] *** Voldenet left
[12:03] *** Voldenet joined
[12:05] *** lizmat left
[12:10] *** Voldenet left
[12:15] *** Voldenet joined
[12:15] *** Voldenet left
[12:15] *** Voldenet joined
[12:17] *** Rawriful joined
[12:19] *** Voldenet left
[12:20] *** lizmat joined
[12:25] *** quotable6 left
[12:25] *** espadrine left
[12:25] *** quotable6 joined
[12:31] *** khw joined
[12:32] *** aborazmeh joined
[12:32] *** aborazmeh left
[12:32] *** aborazmeh joined
[12:40] *** Voldenet joined
[12:40] *** Voldenet left
[12:40] *** Voldenet joined
[12:44] *** |oLa|1 left
[12:47] *** llfourn left
[12:49] *** quotable6 left
[12:49] *** quotable6 joined
[12:54] *** llfourn joined
[13:08] *** pmurias left
[13:26] *** astj left
[13:26] *** astj joined
[13:31] *** astj left
[13:32] <Zoffix> HoboWithAShotgun: well volunteered!

[13:32] *** Zoffix left
[13:32] *** rba_ left
[13:32] <patrickz> HoboWithAShotgun: I used rakudobrew. Takes ages to compile but works well.

[13:34] *** rba joined
[13:34] <HoboWithAShotgun> zoffix: huh?

[13:43] *** astj joined
[13:46] *** rba_ joined
[13:47] *** cdg joined
[13:48] *** rba left
[13:51] *** astj left
[13:52] *** cdg left
[13:55] *** astj joined
[13:56] *** aborazmeh left
[13:59] *** astj left
[14:01] *** rba joined
[14:03] *** astj joined
[14:03] *** rba_ left
[14:10] *** pilne joined
[14:10] *** astj left
[14:16] *** HoboWithAShotgun left
[14:16] *** rba_ joined
[14:18] *** HoboWithAShotgun joined
[14:19] *** rba left
[14:31] *** rba joined
[14:33] *** rba_ left
[14:34] *** ryn1x joined
[14:36] *** eater left
[14:39] *** eater joined
[14:44] *** eater left
[14:47] *** rba_ joined
[14:49] *** rba left
[14:49] *** eater joined
[14:51] *** COMBORICO joined
[14:54] *** eater left
[14:55] *** Cabanossi left
[14:57] *** eater joined
[14:57] *** Cabanossi joined
[15:05] *** astj joined
[15:12] *** astj left
[15:17] *** HoboWithAShotgun left
[15:21] *** fatguy joined
[15:23] <fatguy> hello, i used dbiish, .do method but i got : No such method 'finish' for invocant of type 'Int+{DBDish::StatementHandle::IntTrue}'

[15:23] <yoleaux> 21 Jul 2017 17:25Z <Zoffix> fatguy: Not sure if you caught it before you left, but the first FindBin equivalent I gave you was wrong. It should be `use lib $*PROGRAM.sibling: '../lib';`

[15:24] <moritz> fatguy: looks like a bug in DBIish

[15:26] *** Cabanossi left
[15:26] *** Cabanossi joined
[15:27] <fatguy> moritz: hmm.. what should i use then ? please advice

[15:27] *** HoboWithAShotgun joined
[15:33] <moritz> fatguy: try to find and fix the bug in DBIish?

[15:33] <moritz> fatguy: or start by showing the code that produces the error?

[15:45] *** virtualsue left
[15:45] <ryn1x> Does anyone have much experience with perl6, zef, and Inline::Perl5 on windows? I have installed a clean windows vm so that I could test code for windows machines at work and can not get "zef install Inline::Perl5" to succeed. I was able to get everything working at work so I know that it is possible but can't narrow down the issue. I have tried different combinations of mingw and visual studio build tools 

[15:46] <ryn1x> with no success. 

[15:46] *** mr-foobar left
[15:47] <fatguy> moritz: i used prepared statement and now no problem

[15:49] *** mr-foobar joined
[15:49] *** virtualsue_ joined
[15:49] <ryn1x> The not so helpful error message: https://gist.github.com/ryn1x/14e198f0e21c85c2adc0ae5fe60afc26

[15:49] *** virtualsue_ is now known as virtualsue

[15:49] *** thunktone joined
[15:50] *** BenGoldberg joined
[15:54] <stmuk> ryn1x: Inline::Perl5 doesn't install on Windows due to a windows shell quoting bug

[15:54] *** Aaronepower left
[15:54] *** nadim left
[15:54] *** Cabanossi left
[15:56] <ryn1x> stmuk: I was able to get to where the build failed because of the quoting bug and just went into the mentioned file and removed the lines where it was checking the version of perl and the install succeeded. I was also able to use Inling::Perl5 just fine after the install. Now I am trying to duplicate this on a windows vm and can't even get to where the build fails because of the quote error.

[15:57] *** Cabanossi joined
[15:57] *** thunktone left
[16:08] <MasterDuke> ryn1x: what perl5 do you have installed in windows?

[16:09] <MasterDuke> i think someone recently said they had the best success with Strawberry Perl 5

[16:09] <ryn1x> MasterDuke: Strawberry Perl 5 v26 x64

[16:10] *** espadrine joined
[16:10] <ryn1x> I have the same versions of perl5 and perl6 on both the working windows box and the not-working windows vm

[16:12] *** HoboWithAShotgun left
[16:12] <MasterDuke> same version of windows?

[16:14] <ryn1x> Both are windows 10 x64, but the vm is a newer build.

[16:17] <MasterDuke> hm, i don't use Perl 5 or 6 in windows, so i've probably reached the end of my ability to help, sorry

[16:18] *** nadim joined
[16:19] <ryn1x> Thank for trying. Working with windows is very frustrating. I would love to find a reliable way to use Perl6 in place of python at work though.

[16:20] *** HoboWithAShotgun joined
[16:20] <ugexe> ryn1x: did you ever run with --debug like was suggested yesterday? this will even show you the exact command zef uses to run the Build phase

[16:21] <ugexe> then you can cd ~/.zef/Inline-Perl5/some-random-string and run the command shown to bypass zef altogether

[16:21] <ryn1x> ugexe: I did, I did not respond after tying it yesterday though. It did not do anything different though. I tried --verbose also. Let me try again... maybe I put the flag in the wrong order..

[16:23] *** cdg joined
[16:28] *** cdg left
[16:35] <ryn1x> ugexe: Got everything working! I messed up usig --debug yesterday. I now have a reproducable way to get everything I need working on windows. Thanks!

[16:38] *** nadim left
[16:39] *** HoboWithAShotgun left
[16:46] *** domidumont left
[16:47] <japhb> Gah.  Anyone have any idea which YAML module is currently recommended?

[16:48] *** domidumont joined
[16:49] <tinita> japhb: you can try out https://github.com/yaml/yaml-perl6

[16:49] <tinita> it currently depends on libyaml

[16:49] <sena_kun> YAMLish if native perl 6 performance doesn't bother you. otherwise something with native bindigns.

[16:50] <tinita> note that libyaml is much more correct than YAMLish though

[16:51] * sena_kun noted

[16:51] <ryn1x> Posted the steps I was able to use to get inline::perl5 working on multiple windows machines here: https://github.com/niner/Inline-Perl5/issues/105

[16:51] <japhb> Yeah, I think native bindings is the right tool for my current job, thanks tinita

[16:52] <ryn1x> Not sure if I should re-post this somewhere more relevant as it may affect more than just inline::perl5?

[16:52] <tinita> japhb: I'd appreciate feedback on the API

[16:53] <japhb> tinita: Gotcha; if I have any, I'll let you know.  :-)

[16:54] <tinita> thanks =)

[16:54] *** HoboWithAShotgun joined
[17:01] <japhb> tinita: Why yaml.all.load() as opposed to say yaml.load-all()?

[17:02] <tinita> japhb: we also wanna add load-file, and then we'd end up with load, load-all, load-file, load-file-all, dump and dump-file

[17:02] <japhb> And does yaml.load() provide any way to load a particular doc rather than the first one?

[17:02] <tinita> japhb: not yet

[17:02] <japhb> tinita: or perhaps yaml.load(:all)?

[17:03] <tinita> that would mean the same as all => 1, right?

[17:03] <tinita> (sorry, still perl6 newbie)

[17:03] <japhb> Also, if it's text you're parsing, than perhaps .parse rather than .load -- and then .load unambiguously means a file

[17:03] <japhb> all => True

[17:04] <tinita> well, the yaml loader actually combines a parser and a constructor

[17:04] <japhb> tinita: Ah, for circular reference management?

[17:04] <japhb> s/circular//

[17:04] <tinita> for example, yes

[17:05] <b2gills> Usually an `all` method turns into an All Junction

[17:05] <b2gills> m: (1,2).all.^name.say

[17:05] <camelia> rakudo-moar 312cac786: OUTPUT: ¬´Junction‚ê§¬ª

[17:05] <tinita> so, we're not sure on the API yet. we want it to be close to the new perl5 YAML api, which is also in the works

[17:05] <japhb> Hmmm, I see where .parse is a bit misleading then.

[17:06] <tinita> and in perl5, we have list context, so @docs = load() just works there

[17:06] *** fatguy left
[17:07] *** drsasa joined
[17:07] <japhb> FWIW, the lowercase yaml. looks a little odd to my Perl 6 eyes.  I'd expect either YAML.foo() -- class methods -- or exported subs like to-json() and from-json() -- so in this case instead of yaml.load(), perhaps from-yaml().

[17:08] <tinita> yeah, yaml is just a function, so it could be written like yaml().load

[17:08] <japhb> What does that function do?

[17:08] <tinita> this was ingy's idea, and I actually like it

[17:09] *** zakame left
[17:09] <tinita> it returns an YAML::API object

[17:09] *** astj joined
[17:09] <tinita> on that you would then be able to do any configuration

[17:10] <japhb> So it's equivalent to YAML::API.new() ?

[17:10] <tinita> like JSON::PP->new->ascii->pretty->allow_nonref;

[17:10] <tinita> yep

[17:10] <japhb> Ah.  In Perl 6 idiom, that would be more often JSON::PP.new: :ascii, :pretty, :allow-nonref;

[17:11] *** zakame joined
[17:11] <japhb> So named args to the constructor

[17:11] <japhb> Since we have very clean syntax for that.

[17:11] *** wamba joined
[17:12] <tinita> japhb: yeah, that would also be a possibility

[17:13] <japhb> Still, I'd probably do: sub from-yaml(Str:D $yaml, :$all) is export { $all ?? YAML::API.new.all.load($yaml) !! YAML::API.new.load($yaml) }

[17:13] <tinita> that would then use the default configuration?

[17:14] <tinita> I guess in many cases the default just works

[17:14] *** drsasa left
[17:14] *** astj left
[17:15] <tinita> the default will not instantiate any objects, so in that case you would have to use yaml(options...).load

[17:17] *** mr-foobar left
[17:17] *** zakharyas joined
[17:17] <japhb> tinita: Well, you can pass those on as well.  For example:

[17:18] <japhb> Still, I'd probably do: sub from-yaml(Str:D $yaml, :$all, |c) is export { $all ?? YAML::API.new(|c).all.load($yaml) !! YAML::API.new(|c).load($yaml) }

[17:18] <japhb> But of course all of this falls heavily under the umbrella of TIMTOWTDI

[17:19] *** mr-foobar joined
[17:19] <tinita> =)

[17:19] <tinita> I hope ingy will have time soon to look at it also

[17:20] <b2gills> I have to go, but I would say that a really good Perl¬†5 interface, and a really good Perl¬†6 one may be quite a bit different, even if the lower level implementation is similar.

[17:20] <tinita> b2gills: true

[17:21] <tinita> what should be the same, are the actual options for the parser and constructor

[17:21] <tinita> i actually have to go too...

[17:22] <tinita> japhb: thanks

[17:23] <japhb> tinita: No problem, anytime I'm around.  :-)

[17:23] *** ryn1x left
[17:29] *** ryn1x joined
[17:37] *** pecastro left
[17:38] *** ryn1x left
[17:39] *** ryn1x joined
[17:40] *** committable6 left
[17:41] *** committable6 joined
[17:44] *** evalable6 left
[17:45] *** bisectable6 left
[17:45] *** evalable6 joined
[17:45] *** bisectable6 joined
[17:47] *** ryn1x left
[17:48] *** committable6 left
[17:48] *** committable6 joined
[17:48] *** ryn1x joined
[17:50] *** pecastro joined
[17:50] *** HoboWithAShotgun is now known as holli

[17:50] <holli> oh hey tina :) sup?

[17:54] *** nadim joined
[17:57] *** ryn1x left
[18:01] *** holli left
[18:09] <tinita> holli!

[18:13] *** ryn1x joined
[18:13] *** mr-foobar left
[18:17] *** nadim left
[18:18] *** raschipi joined
[18:22] *** ryn1x left
[18:24] *** Cabanossi left
[18:26] *** Cabanossi joined
[18:26] *** nadim joined
[18:27] *** ryn1x joined
[18:29] *** ChoHag left
[18:30] *** zakharyas left
[18:33] *** smls joined
[18:36] <smls> jnthn++ (fixing hyper/race)

[18:38] *** darutoko left
[18:39] <smls> I've often regretted not being able to use them due to their bugginess.

[18:41] *** markldevine joined
[18:41] *** markldevine left
[18:43] *** pecastro left
[18:47] *** ryn1x_ joined
[18:47] *** ryn1x left
[18:53] *** eliasr left
[18:56] *** ChoHag joined
[18:59] *** domidumont left
[18:59] *** pecastro joined
[18:59] *** Herby_ joined
[18:59] <Herby_> o/

[19:02] <Herby_> AlexDaniel: Do you know if there is any plan to include a CSV reader/writer in to Rakudo Star?

[19:03] <AlexDaniel`> Herby_: I don't know. You should ask stmuk

[19:03] <Herby_> k thanks

[19:03] <Herby_> stmuk: Do you know if there is any plan to include a CSV reader/writer in to Rakudo Star?

[19:04] <Herby_> or maybe baked in, similar to Python CSV

[19:04] *** araraloren left
[19:04] *** BenGoldberg left
[19:05] <lizmat> Herby_: the ecosystem already has Text::CSV, only a "zef install Text::CSV" away after you install Rakudo *

[19:06] *** ryn1x_ left
[19:07] <Herby_> lizmat: thanks. I haven't had much luck with zef and getting modules installed.

[19:07] <lizmat> :-(

[19:09] <Herby_> just tried to install Text::CSV again and got a failure: https://pastebin.com/Jn6seHX7

[19:11] <Herby_> I believe it is related to this issue: https://github.com/Tux/CSV/issues/5

[19:11] *** astj joined
[19:16] *** astj left
[19:17] <lizmat> Herby_: I'm pretty sure you can safely "--force-test" on the install for Text::CSV

[19:22] *** pecastro left
[19:22] *** nadim left
[19:23] <Herby_> lizmat: that successfully installed. thanks

[19:23] <lizmat> you're welcome  :-)

[19:28] *** pecastro joined
[19:42] *** |oLa| joined
[19:53] *** TEttinger joined
[19:55] *** Cabanossi left
[19:56] *** Cabanossi joined
[19:59] *** sena_kun left
[20:03] *** pecastro left
[20:09] *** ryn1x joined
[20:11] *** wamba left
[20:16] *** pecastro joined
[20:17] <stmuk> Herby_: I don't have any plans to. It's a simple enough format to use .split with (or install Text::CSV)

[20:17] <stmuk> Herby_: its also not pure perl 6 which may lead to problems with Windows

[20:18] <stmuk> oh your error is on Windows

[20:20] <Herby_> stmuk: ok thank you

[20:22] <stmuk> Text::CSV passes on linux so looks like possible Windows issues

[20:23] <stmuk> you could also try CSV::Parser

[20:23] <Herby_> I was able to get it working using lizmat's tip of "--force-test"

[20:24] <stmuk> probably worth adding a Github issue for Windows/Text::CSV

[20:25] <Herby_> I think one has been opened: https://github.com/Tux/CSV/issues/5   but I

[20:27] <stmuk> that looks like something different now fixed

[20:28] <stmuk> also it points out Text::CSV tends to track the very newest Perl 6 and may break on older

[20:28] <stmuk> your problem is probably Windows specific

[20:29] <raschipi> Well, good to notice Text::CSV is uselees then, will use something else if I need to deal with CSV.

[20:35] *** zakharyas joined
[20:39] *** zakharyas left
[20:39] *** zakharyas joined
[20:43] <stmuk> I'm sure its very good for some use cases (eg. quickly parsing) due to the C code 

[20:43] *** nadim joined
[20:45] *** rindolf left
[20:49] *** nadim left
[20:51] *** setty1 left
[20:55] *** niceperl joined
[21:00] *** ChoHag left
[21:00] <Herby_> Ok, I have Text::CSV and CSV::Parser both installed (Windows 10).  I have an 80 MB CSV file.  Whats a simple way to benchmark the two?

[21:01] <Herby_> now - INIT now?

[21:01] <gfldex> m: { sleep 5; say now - ENTER now }

[21:01] <camelia> rakudo-moar 9a1375981: OUTPUT: ¬´5.00164427‚ê§¬ª

[21:12] *** astj joined
[21:13] *** raschipi left
[21:17] *** astj left
[21:18] *** espadrine left
[21:22] *** ChoHag joined
[21:23] <timotimo> stmuk: did you just say csv is simple enough to use .split with?

[21:23] <TEttinger> hehe

[21:23] <geekosaur> that's the same order of mistake as parsing html with regex >.>

[21:23] *** Cabanossi left
[21:24] <TEttinger> ZALGO HE COMES

[21:24] <gfldex> .split talks Regex. I would not count that as simple.

[21:24] <geekosaur> watch out for the tentacles\

[21:25] <Herby_> <the center cannot hold>

[21:26] <timotimo> gfldex: if you want to have a lookbehind that figures out if the number of " up to the beginning of the file are even or odd (not counting escaped ones), sure i guess?

[21:26] <stmuk> timotimo: up to a point, depends on the exact file

[21:27] *** Cabanossi joined
[21:27] <timotimo> if you're in complete control of the file contents, you might as well use a different format instead

[21:27] <timotimo> if you're not, you have to be resilient in case "evil" input comes your way

[21:27] * timotimo afk again

[21:29] <stmuk> sure the devil is in the edge cases

[21:33] *** smls left
[21:34] <gfldex> m: say "Z“âA“âL“âG“âOÃöÃïÃö ".univals

[21:34] <camelia> rakudo-moar 9a1375981: OUTPUT: ¬´(NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN)‚ê§¬ª

[21:34] <gfldex> ^^^ this made me chuckle

[21:41] <stmuk> hmm there is a p6 grammar based solution but its in the darkecosystem

[21:42] <stmuk> the ABNF in rfc4180 could also be used

[21:51] <Herby_> dumb question but how do I get the latest Rakudo Perl 6?  Isn't it 2017.09?

[21:52] *** Morfent joined
[21:52] <Herby_> http://rakudo.org/how-to-get-rakudo/

[21:52] <Herby_> Is that showing 2017.07 due to it being Rakudo Star?

[21:52] <stmuk> yes 

[21:52] <geekosaur> yes

[21:53] <geekosaur> and star will always lag the development releases to some extent, even if only by a week

[21:53] <geekosaur> the easiest way to get a devel release is rakudobrew, but any time you're doing that you're living on the bleeding edge and can expect to get cut >.>

[21:56] *** zakharyas left
[21:56] <Herby_> i don't like bleeding my own blood

[22:00] *** epony left
[22:00] *** epony joined
[22:14] *** astj joined
[22:18] *** astj left
[22:31] *** Aaronepower joined
[22:39] *** Cabanossi left
[22:39] *** wamba joined
[22:42] *** Cabanossi joined
[22:44] *** Seadevil joined
[22:45] *** Seadevil left
[23:01] *** MasterDuke left
[23:05] *** Herby_ left
[23:14] <Geth> ¬¶ doc: 36fb9774f7 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/typesystem.pod6

[23:14] <Geth> ¬¶ doc: Clarify `is nodal`

[23:14] <Geth> ¬¶ doc: 

[23:14] <Geth> ¬¶ doc: It only applies to `List` methods

[23:14] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/36fb9774f7

[23:14] <synopsebot> Link: https://doc.perl6.org/language/typesystem

[23:15] *** astj joined
[23:20] *** astj left
[23:20] *** virtualsue left
[23:20] *** virtualsue joined
[23:23] *** ryn1x left
[23:24] *** ryn1x joined
[23:29] *** ryn1x left
[23:32] *** patrickz_ joined
[23:36] *** patrickz left
[23:40] *** u-ou left
[23:46] *** |oLa| left
[23:49] *** Herby_ joined
[23:53] *** niceperl left
[23:53] *** ryn1x joined
[23:55] *** khw left
[23:57] <Herby_> is there a coding style guide that anyone can recommend? I'm coming to learn that I'm terrible at naming things, and sticking to naming conventions

[23:58] *** ryn1x left
