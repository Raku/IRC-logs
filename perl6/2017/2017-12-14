[00:00] *** troys_ is now known as troys

[00:01] *** BenGoldberg joined
[00:02] *** rvhausen joined
[00:02] <Morfent> inb4 it's some obscure libidn2 bug

[00:03] *** rvhausen left
[00:06] <Morfent> is there a way to create a list of multi subs through some form of metaprogramming?

[00:07] <Morfent> the only way i can think of is eval but i'd rather that be the last resort

[00:08] <lizmat> m: my &a := sub { say "foo" }; a()  # like this ?

[00:08] <camelia> rakudo-moar 664967d09: OUTPUT: «foo␤»

[00:08] <Morfent> i mean like

[00:09] <Morfent> i have a list of method names

[00:09] <Morfent> the c functions they write are identical in how they work

[00:10] *** llfourn joined
[00:10] <lizmat> m: class A {}; BEGIN A.^add_method( "a", method { say "foo" } ); A.a   # like this ?

[00:10] <camelia> rakudo-moar 664967d09: OUTPUT: «foo␤»

[00:11] <Morfent> that's not quite what i mean

[00:12] <lizmat> Morfent: then I hope someone else will be able to help you, as I'm very tired and it's time for me to get some sleep

[00:12] <lizmat> sleep&

[00:12] <Morfent> tha's alright, dw about it

[00:12] <Morfent> have a good nit

[00:12] <Morfent> s/nit/night

[00:16] *** Cabanossi left
[00:18] *** Cabanossi joined
[00:18] *** pilne joined
[00:21] <MasterDuke> Morfent: can you explain in a little more detail?

[00:23] <Morfent> alright

[00:23] <Morfent> so i'm porting Net:DNS from perl 5

[00:24] <Morfent> but i need to port its dependencies as well

[00:25] <Morfent> once of them, Net::LibIDNS2, has some subroutines to convert string encodings between utf8, local, utf32

[00:27] <Morfent> only probablem is afaik there is no utf32 support yet, which i'll have to work on myself

[00:27] *** Actualeyes joined
[00:28] *** sena_kun left
[00:28] <Morfent> i'd rather not use ``CArray[uint32]`` to deal with utf32

[00:30] *** lookatme joined
[00:31] <lookatme> o/

[00:31] <Morfent> are there any plans on implementing utf32 supporting?

[00:31] <Morfent> p6: ut32.net

[00:31] <camelia> rakudo-moar 664967d09: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    ut32 used at line 1␤␤»

[00:31] <Morfent> p6: ut32.ne2

[00:31] <camelia> rakudo-moar 664967d09: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    ut32 used at line 1␤␤»

[00:32] <Morfent> p6: ut32.ne3

[00:32] <camelia> rakudo-moar 664967d09: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    ut32 used at line 1␤␤»

[00:32] <Morfent> fucking typosed

[00:32] <Morfent> p6: ut32.new

[00:32] <camelia> rakudo-moar 664967d09: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    ut32 used at line 1␤␤»

[00:32] <Morfent> p6: utf32.new

[00:32] <camelia> rakudo-moar 664967d09: ( no output )

[00:32] <Morfent> p6: utf32.new.decode

[00:32] <camelia> rakudo-moar 664967d09: OUTPUT: «Unknown string encoding: 'utf32'␤  in block <unit> at <tmp> line 1␤␤»

[00:32] <lookatme> m: say buf32.new

[00:32] <camelia> rakudo-moar 664967d09: OUTPUT: «Buf[uint32]:0x<>␤»

[00:33] <lookatme> m: say "hmm".encode("utf32")

[00:33] <camelia> rakudo-moar 664967d09: OUTPUT: «Unknown string encoding: 'utf32'␤  in block <unit> at <tmp> line 1␤␤»

[00:33] <lookatme> m: say "hmm".encode("utf16")

[00:33] <camelia> rakudo-moar 664967d09: OUTPUT: «utf16:0x<68 6d 6d>␤»

[00:33] <Morfent> buf32.ne('test'.encode('utf32').list)

[00:34] <Morfent> buf32.new('test'.encode('utf32').list)

[00:34] <Morfent> pm6: buf32.new('test'.encode('utf32').list)

[00:34] <Morfent> p6: buf32.new('test'.encode('utf32').list)

[00:34] <camelia> rakudo-moar 664967d09: OUTPUT: «Unknown string encoding: 'utf32'␤  in block <unit> at <tmp> line 1␤␤»

[00:34] <Morfent> sorry for the spam

[00:35] <lookatme> m: say "hmm".encode("utf-32")

[00:35] <camelia> rakudo-moar 664967d09: OUTPUT: «Unknown string encoding: 'utf32'␤  in block <unit> at <tmp> line 1␤␤»

[00:36] <lookatme> m: say utf32.new.encoding

[00:36] <camelia> rakudo-moar 664967d09: OUTPUT: «utf-32␤»

[00:36] <lookatme> Don't know what happen

[00:40] <Morfent> m: say 'test'.encode('utf8').list.encode('utf32')

[00:40] <camelia> rakudo-moar 664967d09: OUTPUT: «No such method 'encode' for invocant of type 'Seq'␤  in block <unit> at <tmp> line 1␤␤»

[00:40] *** ZzZombo joined
[00:40] <Morfent> m: say 'test'.encode('utf8').list.map({ .encode('utf32') })

[00:40] <camelia> rakudo-moar 664967d09: OUTPUT: «No such method 'encode' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[00:41] <lookatme> m: say 'test'.encode('utf8').encode('utf32')

[00:41] <camelia> rakudo-moar 664967d09: OUTPUT: «No such method 'encode' for invocant of type 'utf8'. Did you mean 'decode'?␤  in block <unit> at <tmp> line 1␤␤»

[00:42] <lookatme> m: say 'test'.encode('utf8').decode('utf32')

[00:42] <camelia> rakudo-moar 664967d09: OUTPUT: «Can not decode a utf-8 buffer as if it were utf32␤  in block <unit> at <tmp> line 1␤␤»

[00:42] <lookatme> :)

[00:42] *** xi- left
[00:43] *** xi joined
[00:44] *** xi left
[00:47] *** japhb joined
[00:50] <Morfent> are any of yall well-versed in lldb?

[00:50] *** xi joined
[00:52] <Morfent> i'm not asking for you to debug my code or anything, but if you could point me to some resources to help teachh me the ropes

[00:53] <Morfent> that's help me immensely

[00:55] *** comborico1611 joined
[00:55] *** DarthGandalf left
[00:55] *** DarthGandalf joined
[01:04] <geekosaur> apple has an lldb/gdb cheatsheet somewhere

[01:06] <geekosaur> and I think a tutorial

[01:13] *** raschipi joined
[01:14] *** cdg_ joined
[01:15] <Morfent> that'll help a lot

[01:15] <Morfent> thanks geekosaur 

[01:18] *** cdg left
[01:18] *** cdg_ left
[01:30] *** troys is now known as troys_

[01:38] *** Rawriful left
[01:42] *** TimToady left
[01:42] <Morfent> for a c library port i'm porting to perl 6, i want to be able to access macro values, but that can't be done with nativecall on its own. would something like makeing a build script to compile a c library that does not export some header macros that i need. is it bad practice to overwrite macros and redefine them as extern constants?

[01:44] <Morfent> s/that does not export/that exports/g

[01:44] *** TimToady joined
[01:50] <Morfent> i'm debating ditching the idea of Net::LibIDN2 being a port of the perl5 port

[01:51] <Morfent> there are a lot of features in the library that are not exposed, like some of the features from libidn

[01:51] <Morfent> but are useful

[01:52] *** jeromelanteri joined
[01:52] <lookatme> The macro not exists in dynamic library :)

[01:54] <lookatme> If you want access macro, I think you can write some help function in your help library, like: https://github.com/araraloren/Net-FTPlib/blob/master/src/ftplibhelp.c

[01:55] <lookatme> I write a test function test if __UINT64_MAX defined 

[01:55] <Morfent> i'll run a test

[01:58] <Morfent> if there a simple way to compose functions in perl 6? 

[01:59] <Morfent> i haven't worked out how to do it like i would in js (yeah, yeah, i know)

[01:59] <comborico1611> Goodnight.

[01:59] <lookatme> compose function ?

[01:59] <lookatme> comborico1611, good night!

[01:59] <comborico1611> Thanks, bud!

[02:00] <comborico1611> Night.

[02:00] <Morfent> like

[02:00] <comborico1611> Maybe we'll talk tomorrow!

[02:00] *** comborico1611 left
[02:00] <lookatme> I can read some js :)

[02:01] <gfldex> Morfent: see https://docs.perl6.org/type/Callable#index-entry-%E2%88%98_function_combinator

[02:02] <lookatme> oh, I know :)

[02:03] <Morfent> that reminds me a bit of fp languages gfldex

[02:03] <Morfent> i'm glad this lang let's you do fp if you want to

[02:03] <Morfent> or oop if that floats your boat

[02:05] *** kyan left
[02:06] <lookatme> m: sub f($p){ say 'f'; $p / 2 }; sub g($p){ say 'g'; $p * 2 }; say() <== f() <== g() <== 2;

[02:06] <camelia> rakudo-moar 2c951798a: OUTPUT: «g␤f␤2␤»

[02:06] <lookatme> That like this feature :)

[02:07] <MasterDuke> gfldex: heh, i went to the docs repo to create an issue about infix:<∘> not being in the operators page, but you beat me to it

[02:10] *** Zoffix joined
[02:10] <Zoffix> m: my %xy{Mu}; say %xy

[02:10] <camelia> rakudo-moar 2c951798a: OUTPUT: «{}␤»

[02:10] <Zoffix> How to find out whether a hash was parametarized with Mu keys?

[02:11] <Morfent> m: sub foo() { ::?NAME.say }

[02:11] <camelia> rakudo-moar eaf609edb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤No such symbol '::?NAME'␤at <tmp>:1␤------> 3sub foo() { ::?NAME7⏏5.say }␤»

[02:12] <Morfent> m: sub foo() { ::NAME.say }

[02:12] <camelia> rakudo-moar eaf609edb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤No such symbol 'NAME'␤at <tmp>:1␤------> 3sub foo() { ::NAME7⏏5.say }␤»

[02:12] <Zoffix> m: sub foo() { &?ROUTINE.name.say }

[02:12] <camelia> rakudo-moar eaf609edb: ( no output )

[02:12] <Zoffix> m: sub foo() { &?ROUTINE.name.say }()

[02:12] <camelia> rakudo-moar eaf609edb: OUTPUT: «foo␤»

[02:12] <Morfent> thanks

[02:13] *** ryn1x joined
[02:15] <TimToady> m: my %xy{Mu}; say %xy.keyof

[02:15] <camelia> rakudo-moar eaf609edb: OUTPUT: «(Mu)␤»

[02:15] <Zoffix> TimToady++ thanks

[02:17] <lookatme> m: my %xy{Mu}; say %xy.keyof; say %xy.of;

[02:17] <camelia> rakudo-moar eaf609edb: OUTPUT: «(Mu)␤(Any)␤»

[02:18] <ryn1x> My copy of Parsing with Perl 6 just shipped! So excited!

[02:19] <Zoffix> \o/

[02:21] <Morfent> unrelated to the convo, but i ran into a bug with dns resolution for simple http requests

[02:22] *** Zoffix left
[02:22] <Morfent> i'm praying it's not because i fucked up resolve.com, but the code i wrote works fine in ubuntu with the same dns settings

[02:23] <Morfent> *resolv.conf

[02:24] <TimToady> not running a proxy, I presume

[02:24] <Morfent> nope

[02:24] * TimToady sometimes has to drop his vpn to get sane address resolution...

[02:25] <Morfent> i don't run a vpn

[02:26] <Morfent> i tested dns resolution in node and had no problems with it

[02:26] <Morfent> though i don't trust node from my experience with it

[02:28] <Morfent> from when i tried to debug it, i narrowed down what could be making dns resolution to fail

[02:32] *** leah2 left
[02:32] *** cpage left
[02:32] *** tyil left
[02:32] *** nine_ left
[02:32] *** silug left
[02:32] *** char_var[buffer] left
[02:32] *** ilbot3 left
[02:32] *** lizmat left
[02:32] *** epony left
[02:32] *** tailgate left
[02:32] *** MilkmanDan left
[02:35] *** leah2 joined
[02:35] *** cpage joined
[02:35] *** tyil joined
[02:35] *** nine_ joined
[02:35] *** silug joined
[02:35] *** char_var[buffer] joined
[02:35] *** ilbot3 joined
[02:35] *** lizmat joined
[02:35] *** epony joined
[02:35] *** tailgate joined
[02:35] *** leguin.freenode.net sets mode: +v ilbot3

[02:36] *** MilkmanDan joined
[02:36] *** squashable6 left
[02:36] *** reportable6 left
[02:36] *** unicodable6 left
[02:36] *** bisectable6 left
[02:36] *** bloatable6 left
[02:36] *** nativecallable6 left
[02:36] *** quotable6 left
[02:36] <lookatme> :P

[02:36] *** leah2 left
[02:37] *** troys_ is now known as troys

[02:39] *** leah2 joined
[02:42] *** piojo joined
[02:46] *** ilbot3 left
[02:50] <piojo> eval: spurt 'sandbox/Zot.pm6', 'use XXX; sub zot() returns Array of Numeric is export { my Numeric @a; return @a; }'

[02:50] <evalable6> piojo, rakudo-moar eaf609edb: OUTPUT: «(exit code 1) Failed to open file /home/bisectable/git/whateverable/sandbox/Zot.pm6: Read-only file system␤  in block <unit> at /tmp/OGNWZH_PdD line 1␤␤»

[02:51] <piojo> Was the sandbox directory removed? AlexDaniel showed me this last week (working, obviously)

[02:58] <piojo> It looks like https://rt.perl.org/Public/Bug/Display.html?id=128287 is the same issue as my bug, but should give a better git bisect, since the testcase itself looks more powerful than my testcase.

[02:58] *** ilbot3 joined
[02:58] *** ChanServ sets mode: +v ilbot3

[03:00] *** aborazmeh joined
[03:00] *** aborazmeh left
[03:00] *** aborazmeh joined
[03:01] *** pilne left
[03:02] *** colomon left
[03:02] *** Cabanossi left
[03:03] *** Cabanossi joined
[03:04] *** colomon joined
[03:08] <lookatme> Any module has ioctl available currently ?

[03:10] *** cdg joined
[03:10] <Morfent> not yet it looks like

[03:10] <lookatme> I want make a script execute command in other terminal :

[03:10] <lookatme> :)

[03:11] <lookatme> Inspired by this blog post: http://www.humbug.in/2010/utility-to-send-commands-or-data-to-other-terminals-ttypts/

[03:12] <Morfent> that's a really good idea

[03:12] <Morfent> but what are the security implications?

[03:13] <lookatme> lunch time &

[03:13] *** TEttinger joined
[03:19] *** cdg_ joined
[03:20] *** cdg left
[03:30] *** Cabanossi left
[03:33] *** Cabanossi joined
[03:35] *** rgrau left
[03:43] *** colomon left
[03:45] *** troys is now known as troys_

[03:46] *** colomon joined
[04:09] <Morfent> is nativecall not intended to try load libfoo.so.0 if you try to make a subroutine like sub idn2_free(Pointer) is native('idn2', v0) { * }

[04:09] *** troys_ is now known as troys

[04:10] *** raschipi left
[04:11] <Morfent> p6: sub idn2_check_version(Str? --> Nil) is native('idn2', v0) { * } 

[04:11] <camelia> rakudo-moar eaf609edb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> 3sub idn2_check_version(Str7⏏5? --> Nil) is native('idn2', v0) { * }␤    expecting any of:␤        constraint␤        formal parameter␤»

[04:11] <Morfent> p6: sub idn2_check_version(Str $version? --> Nil) is native('idn2', v0) { * } 

[04:11] <camelia> rakudo-moar eaf609edb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Can't use unknown trait 'is native' in a sub+{callable[nil]} declaration.␤at <tmp>:1␤    expecting any of:␤        rw raw hidden-from-backtrace hidden-from-USAGE␤        pure default DEPRECATED …»

[04:12] <Morfent> p6: sub idn2_check_version(Str) is native('idn2', v0) { * } 

[04:12] <camelia> rakudo-moar eaf609edb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Can't use unknown trait 'is native' in a sub declaration.␤at <tmp>:1␤    expecting any of:␤        rw raw hidden-from-backtrace hidden-from-USAGE␤        pure default DEPRECATED inlinable nodal…»

[04:12] <Morfent> oh

[04:12] <Morfent> p6: use NativeCall; sub idn2_check_version(Str) is native('idn2', v0) { * } 

[04:12] <camelia> rakudo-moar eaf609edb: ( no output )

[04:12] <Morfent> p6: use NativeCall; sub idn2_check_version(Str) is native('idn2', v0) { * } idn2_check_version('0')

[04:12] <camelia> rakudo-moar eaf609edb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3version(Str) is native('idn2', v0) { * }7⏏5 idn2_check_version('0')␤    expecting any of:␤        infix␤       …»

[04:12] <Morfent> p6: use NativeCall; sub idn2_check_version(Str) is native('idn2', v0) { * }; idn2_check_version('0')

[04:12] <camelia> rakudo-moar eaf609edb: OUTPUT: «Cannot locate native library 'libidn2.so.0': libidn2.so.0: cannot open shared object file: No such file or directory␤  in method setup at /home/camelia/rakudo-m-inst-1/share/perl6/sources/24DD121B5B4774C04A7084827BFAD92199756E03 (NativeCall) line 28…»

[04:13] <Morfent> alright i'll stop stamming

[04:13] *** BenGoldberg left
[04:17] *** Cabanossi left
[04:18] *** Cabanossi joined
[04:26] *** wamba joined
[04:28] *** aborazmeh left
[04:48] *** rvhausen joined
[04:50] *** rvhausen left
[04:50] <lookatme> Morfent, only root can do that operator (write something to terminal) 

[04:51] <Morfent> oh

[04:51] <Morfent> that's fair

[04:53] <lookatme> I success execute a `ls` command in other terminal 

[04:53] <lookatme> sudo perl6 -MNativeCall -e 'sub ioctl(int32, int32, Str --> int32) is native(Str) { * }; say $*PID; my $x = "/proc/16168/fd/0".IO.resolve.open(:rw); say $x.native-descriptor; say ioctl($x.native-descriptor(), 0x5412, $_) for [ "l", "s", "\n" ]; my $var := cglobal("libc.so.6", "errno", int32); say $var; $x.close; '

[04:53] <lookatme> you can try this command, replace 16168 with your terminal pid

[04:54] <lookatme> A lot of fun :P

[04:54] *** cdg_ left
[04:55] *** cdg joined
[04:59] *** cdg left
[05:01] *** Cabanossi left
[05:02] *** Cabanoss- joined
[05:02] *** Cabanoss- is now known as Cabanossi

[05:03] <Morfent> for a library using nativecall to wrap a c library

[05:04] <Morfent> i'll need to make a build script to ensure the library can be found when using the library?

[05:04] <Morfent> *will i

[05:07] <Morfent> using just the libname like the native call docs don't work for badly configured env variables or odd install locations 

[05:08] *** geekosaur left
[05:16] *** geekosaur joined
[05:22] <Morfent> worked it out -- write a build script, offer parametres to customize where the library is and any extra compiler flags needed

[05:23] <Morfent> only problem is how make that friendly with zef

[05:31] *** Cabanossi left
[05:32] *** Cabanossi joined
[05:36] *** wamba left
[05:42] *** piojo left
[05:46] *** konsolebox left
[05:46] *** piojo joined
[05:46] *** konsolebox joined
[05:53] *** domidumont joined
[05:58] *** domidumont left
[05:58] *** troys is now known as troys_

[05:59] *** domidumont joined
[05:59] *** Cabanossi left
[06:01] *** troys_ is now known as troys

[06:02] *** Cabanossi joined
[06:11] *** khw left
[06:11] <AlexDaniel> piojo: looking…

[06:11] <yoleaux> 01:39Z <Zoffix> AlexDaniel: can this ticket be closed? It got fix and tests and was resolved but then I see you marked it as open and taken but no reason was stated: https://rt.perl.org/Ticket/Display.html?id=125371#ticket-history

[06:20] *** darutoko joined
[06:28] *** konsolebox left
[06:29] *** wamba joined
[06:30] *** konsolebox joined
[06:41] *** committable6 left
[06:41] *** wander joined
[06:42] <wander> m: my $x := (42, 43); $x = 100

[06:42] <camelia> rakudo-moar eaf609edb: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[06:42] <wander> m: my \x := (42, 43); x = 100

[06:42] <camelia> rakudo-moar eaf609edb: OUTPUT: «Cannot modify an immutable Int (42)␤  in block <unit> at <tmp> line 1␤␤»

[06:43] <wander> Should the latter report the same message as the former? If not, why?

[06:43] *** coverable6 left
[06:43] *** statisfiable6 left
[06:43] *** releasable6 left
[06:43] *** evalable6 left
[06:43] *** greppable6 left
[06:43] *** benchable6 left
[06:44] *** committable6 joined
[06:44] *** committable6 left
[06:44] *** piojo left
[06:45] *** committable6 joined
[06:45] *** ChanServ sets mode: +v committable6

[06:46] *** committable6 left
[06:47] *** committable6 joined
[06:47] *** committable6 left
[06:47] *** committable6 joined
[06:47] *** ChanServ sets mode: +v committable6

[06:47] *** committable6 left
[06:48] *** committable6 joined
[06:48] *** ChanServ sets mode: +v committable6

[06:48] *** committable6 left
[06:48] *** committable6 joined
[06:48] *** ChanServ sets mode: +v committable6

[06:49] *** committable6 left
[06:49] <wander> Besides, &infix:<o>() looks like .self, doesn't it?

[06:50] <wander> m: say &infix:<o>().("Anything")

[06:50] <camelia> rakudo-moar eaf609edb: OUTPUT: «Anything␤»

[06:50] <wander> m: say &infix:<o>().(Any)

[06:50] <camelia> rakudo-moar eaf609edb: OUTPUT: «(Any)␤»

[06:50] <wander> m: say &infix:<o>(1, 1) # what signatures do you have ?

[06:50] <camelia> rakudo-moar eaf609edb: OUTPUT: «Type check failed in binding to parameter '<anon>'; expected Callable but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[06:50] <wander> m: &infix:<o>(1, 2) # what signatures do you have ?

[06:50] <camelia> rakudo-moar eaf609edb: OUTPUT: «Type check failed in binding to parameter '<anon>'; expected Callable but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[06:51] *** domidumont left
[06:55] <lookatme> m: say (&infix:<o>(1, 1)).signature

[06:55] <camelia> rakudo-moar eaf609edb: OUTPUT: «Type check failed in binding to parameter '<anon>'; expected Callable but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[06:55] <lookatme> m: say (&infix:<o>(sub f() { }, sub g() {})).signature

[06:55] <camelia> rakudo-moar eaf609edb: OUTPUT: «(|args is raw)␤»

[06:55] <Geth> ¦ doc: db05b11515 | (Alex Chen)++ | 2 files

[06:55] <Geth> ¦ doc: Add infix:<∘> to Operators

[06:55] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/db05b11515

[06:56] <wander> Calling infix:<∘>(Int, Int) will never work with any of these multi signatures:

[06:56] <wander> ()

[06:56] <wander> (&f) 

[06:56] <wander> (&f, &g --> Block:D)

[06:57] <wander> well, as infix:<o> defined as "infix", this looks somewhat...tricky?

[06:57] <lookatme> why ?

[06:58] <wander> infix:<o>() likes `.self`, infix:<o>(&f) returns &f

[06:58] <wander> it's an infix, but can do something don't like an infix

[06:58] <lookatme> m: say infix:<o>

[06:58] <camelia> rakudo-moar eaf609edb: OUTPUT: «{ ... }␤»

[06:58] <lookatme> m: say infix:<o>.code

[06:58] <camelia> rakudo-moar eaf609edb: OUTPUT: «No such method 'code' for invocant of type 'WhateverCode'. Did you mean any of these?␤    clone␤    none␤    note␤    one␤␤  in block <unit> at <tmp> line 1␤␤»

[06:58] *** piojo joined
[06:58] <lookatme> m: say infix:<o>.signature

[06:58] <camelia> rakudo-moar eaf609edb: OUTPUT: «(;; $whatevercode_arg_37 is raw)␤»

[06:59] <lookatme> m: say (&infix:<o>).signature

[06:59] <camelia> rakudo-moar eaf609edb: OUTPUT: «(&?, &?)␤»

[06:59] <wander> maybe I will say, hey, infix:<o> is no more than a function, so things go well :)

[07:00] <lookatme> The parameter is optional

[07:00] <lookatme> Every operator is a sub :)

[07:01] <lookatme> and regex and method :)

[07:02] *** lowbro joined
[07:02] *** lowbro left
[07:02] *** lowbro joined
[07:09] <Geth> ¦ doc: e9821adaf7 | (Luca Ferrari)++ | 2 files

[07:09] <Geth> ¦ doc: Remove reference to Perl 5 in not 5-to-6 document.

[07:09] <Geth> ¦ doc: 

[07:09] <Geth> ¦ doc: As of discussion <https://github.com/perl6/doc/issues/1705> related to

[07:09] <Geth> ¦ doc: my previous pull request <https://github.com/perl6/doc/pull/1704> I decided

[07:09] <Geth> ¦ doc: to remove the explicit reference to Perl 5 and to make it

[07:09] <Geth> ¦ doc: a separate section in the 5-to-6 part related to regexps.

[07:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e9821adaf7

[07:09] <Geth> ¦ doc: 700085ca76 | (Luca Ferrari)++ (committed using GitHub Web editor) | 2 files

[07:09] <Geth> ¦ doc: Merge pull request #1706 from fluca1978/fix-comment-regexp

[07:09] <Geth> ¦ doc: 

[07:09] <Geth> ¦ doc: Remove reference to Perl 5 in not 5-to-6 document.

[07:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/700085ca76

[07:11] *** committable6 joined
[07:11] *** ChanServ sets mode: +v committable6

[07:11] *** bisectable6 joined
[07:12] *** committable6 left
[07:12] *** committable6 joined
[07:14] *** committable6 left
[07:14] *** domidumont joined
[07:15] *** bisectable6 left
[07:15] *** Cabanossi left
[07:15] *** MasterDuke left
[07:16] *** committable6 joined
[07:16] *** ChanServ sets mode: +v committable6

[07:17] *** Cabanossi joined
[07:18] *** committable6 left
[07:18] *** nativecallable6 joined
[07:18] *** ChanServ sets mode: +v nativecallable6

[07:18] *** reportable6 joined
[07:18] *** releasable6 joined
[07:18] *** quotable6 joined
[07:18] *** committable6 joined
[07:18] *** coverable6 joined
[07:18] *** ChanServ sets mode: +v quotable6

[07:18] *** ChanServ sets mode: +v committable6

[07:18] *** ChanServ sets mode: +v coverable6

[07:18] *** benchable6 joined
[07:18] *** bloatable6 joined
[07:18] *** evalable6 joined
[07:18] *** ChanServ sets mode: +v evalable6

[07:18] *** unicodable6 joined
[07:18] *** bisectable6 joined
[07:18] *** squashable6 joined
[07:18] *** greppable6 joined
[07:18] *** ChanServ sets mode: +v greppable6

[07:18] *** statisfiable6 joined
[07:18] *** ChanServ sets mode: +v statisfiable6

[07:19] <AlexDaniel> eval: spurt 'sandbox/Zot.pm6', 'use XXX; sub zot() returns Array of Numeric is export { my Numeric @a; return @a; }'

[07:19] <evalable6> AlexDaniel, rakudo-moar eaf609edb: OUTPUT: «»

[07:20] <AlexDaniel> piojo: ↑ fixed I think

[07:22] <piojo> AlexDaniel: Thank you!

[07:23] <piojo> eval: spurt 'sandbox/XXX.pm6', 'my Numeric @x;'

[07:23] <evalable6> piojo, rakudo-moar eaf609edb: OUTPUT: «»

[07:24] <piojo> c: 2015.12,HEAD use Zot; zot();

[07:24] <committable6> piojo, https://gist.github.com/7361551029e07d4fea6eeda313318be6

[07:24] <piojo> c: 2015.12,HEAD use lib 'sandbox'; use Zot; zot();

[07:24] <committable6> piojo, https://gist.github.com/c22c5509c8f76690c6e602064dc3ab9a

[07:25] <lookatme> eval: use lib 'sandbox'; use Zot; say zot; # ?will work

[07:25] <evalable6> lookatme, rakudo-moar eaf609edb: OUTPUT: «(exit code 1) Type check failed for return value; expected Array[Numeric] but got Array[Nu…»

[07:25] <evalable6> lookatme, Full output: https://gist.github.com/f8e14894846315c36dfa79e1648657ef

[07:25] *** wander left
[07:26] <piojo> lookatme: I wanted to see the oldest perl6 output as well. 

[07:26] <piojo> AlexDaniel: it looks like the oldest Perl 6 is failing as well, so this isn't a regression.

[07:27] <lookatme> eval: spurt 'sandbox/Pid.pm6', 'use NativeCall; sub getppid(--> long) is native(Str) {*}'

[07:27] <evalable6> lookatme, rakudo-moar eaf609edb: OUTPUT: «»

[07:27] <lookatme> eval: use lib 'sandbox'; use Pid; say getppid();

[07:27] <evalable6> lookatme, rakudo-moar eaf609edb: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/dCMgL5WOC2␤Undeclared routine:␤    getppid used at line 1␤␤»

[07:27] <lookatme> eval: spurt 'sandbox/Pid.pm6', 'use NativeCall; sub getppid(--> long) is export is native(Str) {*}'

[07:27] <AlexDaniel> piojo: oh…

[07:27] <evalable6> lookatme, rakudo-moar eaf609edb: OUTPUT: «»

[07:28] <lookatme> eval: use lib 'sandbox'; use Pid; say getppid();

[07:28] <evalable6> lookatme, rakudo-moar eaf609edb: OUTPUT: «30215␤»

[07:28] <lookatme> awesome!

[07:28] <piojo> AlexDaniel: You found that a change to USAGE triggered this bug, and now we know why (probably): the bug is triggered when two modules use a parameterized type

[07:29] <AlexDaniel> ah, it's ok as long as you specify the lib path. OK then

[07:30] *** eliasr joined
[07:31] <AlexDaniel> piojo: what was the ticket again?

[07:32] <piojo> AlexDaniel: https://rt.perl.org/Public/Bug/Display.html?id=132525

[07:33] <AlexDaniel> piojo: oh heh, so there are three tickets for this… :)

[07:34] <AlexDaniel> c: all use lib 'sandbox'; use Zot; zot();

[07:34] <committable6> AlexDaniel, https://gist.github.com/4f641222f1419619877e9c714fa09028

[07:34] <piojo> AlexDaniel: Can you close my bug, since the other one has a stronger test case?

[07:34] <AlexDaniel> piojo: so turns out that you're right that there is a bigger underlying issue? :)

[07:35] <piojo> of course there was an underlying issue! pfft ;)

[07:36] *** imcsk8 left
[07:36] *** imcsk8 joined
[07:36] <AlexDaniel> piojo: I can, but I really don't want to. All three tickets are now linked together, and your ticket demonstrates a more specific case

[07:36] *** rurban joined
[07:37] <piojo> AlexDaniel: okay, that's a good point

[07:37] <piojo> my test case is weaker, but more likely

[07:38] <piojo> I also don't know the RT bug workflow.

[07:38] *** rurban1 joined
[07:42] *** rurban left
[07:44] *** sena_kun joined
[07:47] *** rurban1 left
[07:55] *** cdg joined
[07:56] *** troys left
[07:59] *** cdg left
[08:00] *** zakharyas joined
[08:05] *** Grauwolf left
[08:06] *** Grauwolf joined
[08:08] *** wamba left
[08:09] *** abraxxa joined
[08:14] *** wamba joined
[08:23] *** rindolf joined
[08:30] *** gfldex left
[08:32] *** wamba left
[08:36] *** dakkar joined
[08:37] *** gfldex joined
[08:43] *** lookatme left
[08:52] *** woolfy joined
[08:52] *** shady0wl_ joined
[08:53] *** woolfy left
[08:56] *** char_var[buffer] left
[09:05] *** zakharyas1 joined
[09:06] *** zakharyas left
[09:07] *** scimon joined
[09:42] <scimon> Ok.... I'm missing some kind of trick. Apparently it's possible to get this (0,1,*+*…*)[^31]».say 3 characters shorter.... And I'm stumped. 

[10:04] *** zakharyas1 left
[10:05] *** zakharyas joined
[10:15] *** astj left
[10:15] *** astj joined
[10:20] *** astj left
[10:21] *** astj joined
[10:37] *** TEttinger left
[10:42] *** Ven`` joined
[10:42] <Ven``> o/, #perl6

[10:42] <Ven``> can someone explain this one to me?

[10:43] <Ven``> m: ([|"0123".comb>>.Int Xor 2]).perl.say; ([0, |"0123".comb>>.Int Xor 2]).perl.say;

[10:43] <camelia> rakudo-moar eaf609edb: OUTPUT: «[1]␤[2, 2, 1, 2, 3]␤»

[10:43] <mienaikage> scimon: Looks familiar, code-golf.io?

[10:44] <scimon> Yes you wee scunner you. 

[10:45] *** zakharyas left
[10:45] <scimon> There's some trick I'm missing. I mean I saved 3 characters moving to unicode but... Arrgh. 

[10:45] <scimon> (Hope you're doing well BTW)

[10:46] <mienaikage> Am doing good thanks 🙂 Same to you!

[10:46] <geekosaur> Ven``, if I had to take a WAG at that, I'd guess precedence of >> is not what you expect

[10:47] <scimon> I note you didn't tell me how you managed to pull off 18 characters there...

[10:47] <Ven``> m: (0, (|"0123".comb>>.Int) Xor 2).perl.say; # geekosaur 

[10:47] <camelia> rakudo-moar eaf609edb: OUTPUT: «(2, 2, 1, 2, 3).Seq␤»

[10:47] <geekosaur> and the shift in type causes the shift in behavior somehow

[10:48] *** zakharyas joined
[10:48] <geekosaur> hm, then prec of or (or X metaop is screwing with precedence unintentially)

[10:48] <geekosaur> unintentionally

[10:48] <mienaikage> All I can say is, needs more unicode 😉

[10:48] <geekosaur> which seems like it might make more sense (insofar as it makes any sense at all...) anyway

[10:50] <Ven``> I really don't understand, though.

[10:50] <Ven``> scimon: code-golf.io counts in characters, not in bytes?

[10:50] <scimon> It does.

[10:50] <Ven``> :\ That's bad.

[10:50] <scimon> Which is awesome and gives perl6 even more super powers.

[10:51] <mienaikage> You might spot a hint in https://docs.perl6.org/language/operators#infix_...

[10:51] <Ven``> I'm going to keep believing counting bytes is the proper way :).

[10:52] <geekosaur> I am guessing that it's somehow (despite the slip, possibly it's applying it at the wrong level?) getting a list of lists instead of a single list at the Xor and this is changing the behavior. why, I don't know. it smells fishy but might be a DWIM/WAT

[10:53] *** cdg joined
[10:54] <Ven``> m: ("0123".comb>>.Int Xor 2).perl.say

[10:54] <camelia> rakudo-moar eaf609edb: OUTPUT: «(2, 1, 2, 3).Seq␤»

[10:54] <Ven``> m: my @a = 1, 2, 3; say (|@a).perl;

[10:54] <camelia> rakudo-moar eaf609edb: OUTPUT: «slip(1, 2, 3)␤»

[10:54] <Ven``> m: my @a = 1, 2, 3; say ([|@a]).perl;

[10:54] <camelia> rakudo-moar eaf609edb: OUTPUT: «[1, 2, 3]␤»

[10:55] *** astj left
[10:55] *** wamba joined
[10:58] *** cdg left
[11:02] *** cschwenz joined
[11:04] *** astj joined
[11:04] <cschwenz> which bits of the documentation do i need to look at to figure out how to emit a raw bitstream to STDOUT from a perl6 script?

[11:07] *** astj left
[11:08] *** scimon left
[11:08] *** spider-mario left
[11:08] *** wamba left
[11:10] *** scimon joined
[11:20] *** cdg joined
[11:25] *** cdg left
[11:27] *** astj joined
[11:28] *** Zoffix joined
[11:29] <Zoffix> cschwenz: this https://docs.perl6.org/type/IO::Handle#method_encoding this https://docs.perl6.org/type/IO::Handle#method_write and this https://docs.perl6.org/type/Blob

[11:30] <Zoffix> m: $*OUT.encoding: Nil; $*OUT.write: Blob.new: 32, 65, 68

[11:30] <camelia> rakudo-moar eaf609edb: OUTPUT: « AD»

[11:30] <cschwenz> ta zoffix! :-)

[11:32] *** pmurias joined
[11:34] *** astj left
[11:36] *** spider-mario joined
[11:38] <Zoffix> m: $*OUT.write: Blob.new: 32, 65, 68 

[11:38] <camelia> rakudo-moar eaf609edb: OUTPUT: « AD»

[11:38] <Zoffix> Now I remember, we allow binary writes even in character mode.

[11:38] *** astj joined
[11:40] *** itaipu joined
[11:42] *** Zoffix left
[11:49] <Geth> ¦ doc: 2f9fb9bd6f | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/operators.pod6

[11:49] <synopsebot> Link: https://doc.perl6.org/language/operators

[11:49] <Geth> ¦ doc: Fix ∘'s name

[11:49] <Geth> ¦ doc: 

[11:49] <Geth> ¦ doc: it's either `infix:<∘>` or `infix ∘`, not `infix <∘>`

[11:49] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/2f9fb9bd6f

[11:50] *** nine_ is now known as nine

[11:53] *** cdg joined
[11:56] *** astj left
[11:56] *** astj joined
[11:58] *** cdg left
[12:00] *** cdg joined
[12:00] *** astj left
[12:05] *** wamba joined
[12:05] *** cdg left
[12:08] *** cdg joined
[12:12] *** cdg left
[12:18] *** cdg joined
[12:20] <Geth> ¦ doc: ce6e0196b1 | (Alex Chen)++ | 2 files

[12:20] <Geth> ¦ doc: Remove duplicate document on ∘

[12:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ce6e0196b1

[12:22] *** cdg left
[12:26] *** cdg joined
[12:28] *** zakharyas left
[12:31] *** cdg left
[12:31] *** xi left
[12:33] *** xi- joined
[12:47] *** astj joined
[12:53] *** astj left
[12:56] <Geth> ¦ doc: b56885bfe7 | (Alex Chen)++ | 2 files

[12:56] <Geth> ¦ doc: Improve documents on set ops

[12:56] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b56885bfe7

[13:08] <buggable> New CPAN upload: LIVR-2.0.0.tar.gz by KOORCHIK https://cpan.metacpan.org/authors/id/K/KO/KOORCHIK/Perl6/LIVR-2.0.0.tar.gz

[13:13] *** cpage_ joined
[13:22] <scimon> b

[13:22] <scimon> (ww)

[13:25] *** astj joined
[13:26] *** raschipi joined
[13:28] *** astj left
[13:32] *** astj joined
[13:34] *** wander joined
[13:40] <wander> When people talk about "Programming language", they focus more on the *Programming* part.

[13:41] <wander> But when it comes to Perl 6, *Language* might be more important.

[13:41] <wander> In other languages, if you ask counting the "length" of a List/String, what jumps out is, hmm, first set a counter, such as i, to 0, then run a for-loop, blablabla...

[13:41] <wander> In Perl 6, the precedure will be, should I use .words, .bytes, .chars or .elems, that is, to choose a proper *word*.

[13:41] <wander> Quite interesting to me.

[13:44] * lizmat pings Zoffix for a twitter worthy quote :-)

[13:46] *** cdg joined
[13:46] *** zakharyas joined
[13:47] *** wander left
[13:48] <AlexDaniel> buggable: testneeded

[13:48] <AlexDaniel> buggable: tag testneeded

[13:48] <buggable> AlexDaniel, There are 30 tickets tagged with TESTNEEDED; See http://fail.rakudo.party/t/TESTNEEDED for details

[13:49] *** khw joined
[13:50] *** cdg left
[13:53] *** cdg joined
[14:05] *** ggoebel left
[14:18] *** comborico1611 joined
[14:19] *** itaipu_ joined
[14:20] *** itaipu left
[14:20] <comborico1611> Hello

[14:21] <perlpilot> comborico1611: greetings

[14:21] <comborico1611> Who here puts a cover on their computer-phone screen?

[14:22] * moritz 

[14:22] <comborico1611> Has that screen protector ever saved your screen?

[14:23] <comborico1611> My thinking is that the camera on the back, and even on the front, don't have a protector to prevent it from being scratched. And I've never had a camera lens get scratched. Therefore I'm not really sure screen covers are needed.

[14:25] <comborico1611> perlpilot, whadja think of my article, eh?

[14:25] *** natrys joined
[14:27] <perlpilot> comborico1611: aside from it being long, I thought it was okay.  :)

[14:28] *** ggoebel joined
[14:28] *** astj left
[14:29] <lizmat> comborico1611: fwiw, I agree with Laurent R's comments regarding it being too many things at the same time

[14:29] *** pmurias left
[14:30] *** pmurias joined
[14:33] <moritz> comborico1611: the difference is mostly size. Large glass plates break easier than small ones

[14:36] <DrForr> I have a wrapover soft pad on my Samsung, nothing over the camera sensor.

[14:36] <DrForr> It's inset from the padding, which probably takes care of 90% of the potential daage.

[14:36] <DrForr> *damage

[14:39] *** astj joined
[14:42] <comborico1611> It needed to be long because I must include examples to back-up my claims.  In addition, I felt I needed to explain my differences and inadequacy.

[14:43] <comborico1611> I disagree that is an Errata sheet because they weren't errors, but inadequacies.

[14:48] <buggable> New CPAN upload: LIVR-2.0.1.tar.gz by KOORCHIK https://cpan.metacpan.org/authors/id/K/KO/KOORCHIK/Perl6/LIVR-2.0.1.tar.gz

[14:49] <raschipi> comborico1611: gimme a link

[14:53] *** natrys left
[14:58] *** Sgeo left
[14:59] <comborico1611> raschipi, https://perl6advent.wordpress.com/2017/12/06/day-6-two-kinds-of-programmers-and-a-book-review

[15:01] *** Sgeo joined
[15:03] <teatime> comborico1611: jeez, you sound like me

[15:03] <teatime> comborico1611: I'm 32, self-taught programmer

[15:04] <teatime> I had the camel book in jr. high / high school, taught me a lot

[15:04] <AlexDaniel> I loved the book review post

[15:05] <AlexDaniel> wow that post has so many comments on it

[15:05] <teatime> it's a good post.

[15:08] *** astj left
[15:09] <AlexDaniel> it's *very* good IMO. The post makes you see the book through the eyes of a novice programmer. It succeeds in that 100%

[15:10] <AlexDaniel> and the amount of honesty in it. Definitely my favorite post this year

[15:10] *** astj joined
[15:12] <AlexDaniel> “Do yourself a favor: read the book again”

[15:12] <AlexDaniel> :D

[15:12] <AlexDaniel> .oO( don't know about others, but it makes *me* want to read the advent post again :P )

[15:15] *** Grauwolf left
[15:17] *** AlexDaniel left
[15:19] *** lowbro left
[15:19] <comborico1611> Teatime, haha. You know tea can be dangerous? There was an Indian that drank a gallon of tea, and drowned in his own teepee. 

[15:20] <teatime> ...

[15:20] *** Grauwolf joined
[15:20] *** Grauwolf left
[15:20] *** Grauwolf joined
[15:20] <teatime> picardfacepalm.jpg

[15:20] <comborico1611> Dang, thanks Alex. 

[15:22] *** spider-mario left
[15:23] *** Sgeo left
[15:23] *** Sgeo joined
[15:24] *** spider-mario joined
[15:38] *** markong joined
[15:40] *** rmusial left
[15:40] *** geospeck joined
[15:42] *** geospeck left
[15:51] *** domidumont left
[15:51] *** rvhausen joined
[15:56] *** natrys joined
[16:02] *** wamba left
[16:09] <Morfent> i asked a while ago, but does anyone know how to deal with encoding when wrapping c libraries?

[16:10] <Morfent> mainly with strings c functions return encoded in whatever the system's locale is

[16:12] *** Sgeo left
[16:14] <Ven``> Morfent: you mean uselocale()?

[16:14] <Morfent> not quite

[16:15] *** Sgeo joined
[16:15] <geekosaur> Morfent, as I answered yesterday, the documented stuff is not yet implemented by moarvm

[16:16] <Morfent> ahh

[16:16] <Morfent> sorry i missed your answer

[16:16] <geekosaur> you will need to deal with locales manually and you will have to deal with both the internal names moarvm uses and moarvm's shortcomings in mapping the result (those ??? you got)

[16:16] <geekosaur> which probably means this is not going to work very well at all, until someone implements proper locale support in moarvm

[16:16] <Morfent> i have moar and nqp's source downloaded

[16:17] <geekosaur> and then updates nqp and rakudo to use it

[16:17] <geekosaur> ...that said, if someone does do that work, it'll amount to reimplementing the functions you are trying to use anyway :)

[16:17] <geekosaur> kinda catch-22

[16:18] <geekosaur> I *think* you might be able to cheat and use buf8 instead of Str

[16:18] <Morfent> the parts of libidn2 i'm interested in are for porting net::dns later on

[16:18] <timotimo> you know you can set "is encoded" in signature and return value?

[16:18] <Morfent> yeah

[16:18] <geekosaur> that still runs into issues

[16:18] <Morfent> that didn't work

[16:19] <geekosaur> moarvm was 'decoding' upper characters as ? instead of iso8859-1

[16:19] <Morfent> YEAH

[16:19] <Morfent> that's what i was running into

[16:19] <geekosaur> and apparently hung after that

[16:19] <timotimo> oh? that seems weird

[16:19] <timotimo> can you turn that into very short code?

[16:19] <geekosaur> suggesting there's several bugs somewhere

[16:19] *** Sgeo left
[16:20] <Morfent> gimme a sec

[16:20] <timotimo> m: "hellö".encode("latin-1").perl.say

[16:20] <camelia> rakudo-moar 3405001da: OUTPUT: «Blob[uint8].new(104,101,108,108,246)␤»

[16:22] *** Sgeo joined
[16:22] <geekosaur> m: "hellö".encode("latin-1").decode('latin-1').perl.say

[16:22] <camelia> rakudo-moar 3405001da: OUTPUT: «"hellö"␤»

[16:22] <geekosaur> hm

[16:22] <geekosaur> that roundtrips at least

[16:23] <geekosaur> so wither 'is encoded' is wrong, or you used the wrong encoding and it assumed ASCII-60 for some reason

[16:23] <Morfent> shit i forgot i was in the middle of rebuilding perl

[16:26] <Morfent> sorry if this doesn't run https://hastebin.com/azeperiyok.pl

[16:29] <Morfent> "sub _idn2_free(Pointer) is native { * }" should be "sub _idn2_free(Pointer) is native('idn2') { * }"

[16:29] *** ZzZombo left
[16:29] <Morfent> ohhhhh wait i'm forgetting i had to change the names of the natives to not dump the entire project

[16:29] <Morfent> sorry

[16:31] *** japhb left
[16:35] <Morfent> i'll run it properly when i finish building, see if using CArray[uint8] works

[16:35] *** ZzZombo joined
[16:37] <timotimo> sorry, i'm currently doing three other things at the same time as well

[16:38] <Morfent> dw about it

[16:45] *** itaipu_ left
[16:48] *** japhb joined
[16:51] <rvhausen> Just installed rakudo-star-2017.10 on CentOS.  "Use Foo" takes over 1 minute to load, where Foo.pm contains nothing but "unit module Foo;".  This can't be right

[16:52] <timotimo> interesting! let's try to figure that out

[16:52] <timotimo> can you run that with the env var RAKUDO_MODULE_DEBUG=yes set?

[16:53] <rvhausen>  1 RMD: try-load 1946C31AEEF030DB495B0E13AD1403E9CB0AA7A2: /home/barkerj/Moo.pm6

[16:53] <rvhausen>  1 RMD: Trying to load 1946C31AEEF030DB495B0E13AD1403E9CB0AA7A2 from /home/barkerj/.precomp

[16:54] <rvhausen> stalls on that

[16:54] <rvhausen> (I renamed Foo to Moo)

[16:54] <mspo> strace it

[16:55] <mspo> how much stuff is in your .precomp dir?

[16:55] <timotimo> strace is a good idea. maybe first run it with "time" so we can see if it perhaps spends ages in the kernel for some reason

[16:55] <timotimo> or waiting

[16:57] *** abraxxa left
[16:58] <mspo> strace -fr

[16:58] <mspo> and maybe -o trace.txt

[16:59] <ilmari> -Ttt can also be handy

[17:00] *** cschwenz left
[17:00] *** cschwenz joined
[17:00] *** cschwenz left
[17:04] <rvhausen> Only 1 file in .precomp.  I strace'd it, but the output is beyond me

[17:04] <Morfent> geekosaur working locale support in might actually be neat

[17:05] <geekosaur> rvhausen, you'd want to put it up somewhere so someone with internals knowledge can look at it

[17:05] <geekosaur> Morfent, it would, but you might also recall I commended on problems making it work nicely on Windows

[17:06] <geekosaur> Windows handles (the character set part of) locales via code pages, and they don't map nicely to unix-style locale names

[17:06] *** silug left
[17:06] <Morfent> hm

[17:06] <Morfent> that's a challenge

[17:08] <geekosaur> (they also don;t map very well to things like this, because a code page is an attribute of an I/O device, not a string/parameter)

[17:09] <geekosaur> lots of nasty complications

[17:14] <Morfent> despite all the problems i think it'd be really interesting to attempt to work out

[17:18] *** geospeck joined
[17:21] *** raschipi_ joined
[17:23] <timotimo> rvhausen: can you upload the strace output to a pasting service, like maybe gist.github.com or something?

[17:23] *** raschipi left
[17:35] *** scimon left
[17:39] *** domidumont joined
[17:40] *** domidumont left
[17:44] *** domidumont joined
[17:46] <Morfent> ...actually i should try and fix some of the parts of the lang that don't work on freebsd

[17:48] <Morfent> they're not serious bugs, just stuff like gnu flags not existing on bsd's equivalent being used

[17:50] <mienaikage> Ooh unicode.vim is a handy plugin

[17:55] <rvhausen> I dropped that trace file at https://jumpshare.com/v/OxIPhMVx9c39AuTq60RT , if anyone want to take a look :)

[17:56] <teatime> mienaikage: what does it do?

[17:57] <teatime> man, we gotta figure out wcwidth... I fear everyone may give up on character-cell terminals

[17:59] <mienaikage> It's a vim plugin which can autocomplete unicode names to characters

[18:00] <mienaikage> And will also show you the vim digraph if applicable

[18:00] <Morfent> sweet

[18:00] <mienaikage> Also, you can type in a bunch of digraphs, highlight them and get their respective characters all at once

[18:01] *** zakharyas left
[18:01] *** zakharyas joined
[18:02] <Morfent> does this make atomicints easier to type?

[18:03] <teatime> the one thing sounds useful, but I kindof hate editor digraphs

[18:03] <teatime> compose key is better

[18:03] *** zakharyas left
[18:03] <mienaikage> Yes. In insert mode you can: atom ^X^Z

[18:04] *** zakharyas joined
[18:11] <Morfent> i'd rather screw with x to make a keyboard for perl

[18:11] <Morfent> altgr is underrated

[18:11] <El_Che> X?

[18:11] <El_Che> wow, oldschool

[18:11] <Morfent> altgr just about triples how many keys you can use

[18:12] <El_Che> altgr is the reason I often op for an azerty keyboard instead of qwerty

[18:13] <mienaikage> I use English (international AltGr dead keys)

[18:13] *** bdmatatu joined
[18:13] <Morfent> that's my keyboar

[18:13] <Morfent> *keyboard

[18:14] *** dakkar left
[18:15] <Morfent> only thing that bugs me is ç isn't 'c

[18:15] <Morfent> would make french a lot easier to type

[18:16] <perigrin> shouldn't it be ,c ?

[18:16] <Morfent> it is

[18:16] <Morfent> would've thought © too at first

[18:17] * perigrin just has a decently programmable keyboard

[18:17] <geekosaur> problem with using ' is someone using a generic European keyboard that wants to be able to type ć as used in some Eastern European languages

[18:17] <perigrin> and a hopefully incredibly programmable keyboard coming sometime before the heat death of the universe

[18:18] <teatime> altgr isn't underrated

[18:18] <teatime> xcompose is underrated

[18:19] <teatime> I enable both, but rarely use altgr

[18:19] <Morfent> can you enter series of characters with it at once?

[18:19] <teatime> yes.

[18:20] <Morfent> sold

[18:20] <teatime> I have compose s h r u g make ¯_(ツ)_/¯

[18:20] <Morfent> i've always neded this key ¯\_(ツ)_/¯

[18:21] <Morfent> we're not alone

[18:21] *** lostinfog joined
[18:22] *** setty1 joined
[18:28] <timotimo> rvhausen: that url gives me a "file not found" error :)

[18:28] <timotimo> :(

[18:50] *** M_o_C joined
[18:51] <rvhausen> timotimo: I put up a new copy at https://jumpshare.com/v/Rbdv4qKZXNSdsH1s4lzg  Thanks!

[18:52] <japhb> perigrin: https://en.wikipedia.org/wiki/Gateway_AnyKey

[18:53] <japhb> I LOVED THAT THING

[19:00] *** darutoko left
[19:03] *** rgrau joined
[19:10] *** geospeck left
[19:12] *** kkkk joined
[19:12] <kkkk> hello

[19:12] *** kkkk is now known as Guest82001

[19:13] <Guest82001> shalom

[19:13] *** M_o_C left
[19:14] <Guest82001> heeeeeeeeeh

[19:14] <Guest82001> anymone ?

[19:15] *** Guest82001 left
[19:19] *** geospeck joined
[19:21] *** quotable6 left
[19:27] *** MasterDuke joined
[19:27] *** alexghacker joined
[19:39] *** geospeck left
[19:41] *** geospeck joined
[19:43] *** ggoebel left
[19:47] *** geospeck left
[19:54] *** comborico1611 left
[19:54] *** domidumont left
[19:55] *** comborico1611 joined
[19:55] *** ggoebel joined
[19:58] *** zakharyas left
[20:09] *** MasterDuke left
[20:14] *** ggoebel left
[20:20] * geekosaur is almost awake. almost.

[20:25] *** cschwenz joined
[20:25] *** ggoebel joined
[20:31] <timotimo> rvhausen: what command were you running to get that trace? especially the perl6 part of the commandline? and what is your PERL6LIB env var set to?

[20:32] <timotimo> rvhausen: you may want to make that inaccessible soon; it has a rather gigantic chunk of your file system paths exposed in it

[20:33] <rvhausen> Yep, it's gone. :)  strace -o trace.txt -fr ./test.pl

[20:34] <timotimo> OK and what does test.pl look like?

[20:34] <rvhausen> I didn't set a lib path, just did "use lib '.'"

[20:35] <rvhausen> use lib '.'; use Foo;

[20:35] <timotimo> OK, what path did you run perl6 from?

[20:36] <rvhausen> It's within my home dir

[20:36] <timotimo> hm, OK, do you have a Foo.pm or Foo.pm6 there?

[20:37] <rvhausen> yeah, it loads fine, but always after 60+ seconds

[20:37] <timotimo> nothing but "unit module Foo;" you said?

[20:37] <rvhausen> correct

[20:37] <timotimo> right

[20:37] <timotimo> having a big library folder is a Very Bad Idea, it seems

[20:38] <timotimo> and since you're using your entire home, apparently including a symlink into /opt somewhere, as your lib folder, that's extremely big

[20:38] <timotimo> i'm not sure why we're scanning the whole folder that you "use lib" with, but at the moment we do

[20:38] <rvhausen> Ahhh, yeah, it looked like it was scanning the entire server, haha

[20:40] <timotimo> https://github.com/rakudo/rakudo/blob/master/src/core/CompUnit/Repository/FileSystem.pm#L61 - this is what does it; more accurately, the DIR-RECURSE call does

[20:40] *** cdg left
[20:40] *** cdg joined
[20:40] *** AlexDaniel joined
[20:41] <timotimo> we're literally looking for every readable file and we sha1 them all together to figure out the state of the library folder

[20:41] <timotimo> i.e. did anything change since we last precompiled stuff

[20:42] <timotimo> it only considers files that match perl6 identifier rules, though, so there's that i guess?

[20:42] <rvhausen> ok, I moved Foo.pm into a different dir, set PERL6LIB, and voila, all better

[20:43] <timotimo> i wonder where we should document that

[20:43] <timotimo> you might also want to rm -rf the .precomp folder that rakudo will have created in your home

[20:45] <rvhausen> That seems to be alot more work than it needs to be doing.  :)  Thank you very much for the info.

[20:45] *** cdg left
[20:47] *** bisectable6 left
[20:48] *** cschwenz left
[20:49] *** wamba joined
[20:50] *** evalable6 left
[20:50] *** committable6 left
[20:50] *** benchable6 left
[20:50] *** coverable6 left
[20:50] *** releasable6 left
[20:50] *** squashable6 left
[20:50] *** reportable6 left
[20:50] *** bloatable6 left
[20:50] *** unicodable6 left
[20:50] *** greppable6 left
[20:50] *** statisfiable6 left
[20:50] *** nativecallable6 left
[20:56] *** committable6 joined
[20:56] *** committable6 left
[20:57] *** committable6 joined
[20:57] *** ChanServ sets mode: +v committable6

[20:58] *** natrys left
[20:58] *** nativecallable6 joined
[20:58] *** ChanServ sets mode: +v nativecallable6

[20:58] *** quotable6 joined
[20:58] *** releasable6 joined
[20:58] *** bisectable6 joined
[20:58] *** greppable6 joined
[20:58] *** ChanServ sets mode: +v greppable6

[20:58] *** bloatable6 joined
[20:58] *** evalable6 joined
[20:58] *** unicodable6 joined
[20:58] *** coverable6 joined
[20:58] *** squashable6 joined
[20:58] *** reportable6 joined
[20:58] *** ChanServ sets mode: +v squashable6

[20:58] *** ChanServ sets mode: +v reportable6

[20:58] *** benchable6 joined
[20:58] *** statisfiable6 joined
[21:01] <perigrin> japhb: I have  a https://www.reddit.com/r/AnnePro/

[21:02] <perigrin> (the better english language site I could send you to)

[21:02] <perigrin> and I'm waiting on the next round of http://keyboard.io  to ship

[21:02] *** rgrau left
[21:04] *** bdmatatu left
[21:29] <timotimo> i lost my open tabs by rebooting the laptop :\

[21:31] <El_Che> and that's a bad thing?

[21:31] * El_Che grumbles something about people using tabs as bookmarks

[21:31] <El_Che> :)

[21:41] *** itaipu joined
[21:59] <timotimo> El_Che: would you prefer i use spaces as bookmarks?

[22:00] <El_Che> timotimo: as long as you don't mix them with tabs

[22:05] *** Rawriful joined
[22:17] *** khw left
[22:26] *** TEttinger joined
[22:29] *** TEttinger left
[22:31] *** TEttinger joined
[22:38] *** lostinfog left
[22:39] *** eliasr left
[22:41] *** setty1 left
[22:47] *** pmurias left
[23:00] <teatime> I have a bunch of folders named like "come back to this 32" that were tons of open tabs that I "Bookmark All Tabs"'d so I could reboot, and have never since re-visited

[23:03] *** cdg joined
[23:04] *** cdg left
[23:04] *** cdg joined
[23:09] *** wamba left
[23:15] *** sena_kun left
[23:16] * geekosaur has a couple like that too. mostly because sandbagged by life

[23:43] *** rvhausen left
[23:49] *** comborico1611 left
[23:50] *** comborico1611 joined
[23:56] *** Rawriful left
