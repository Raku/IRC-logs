[00:01] <timotimo> whoa

[00:02] <nadim_> Zoffix: not your rendering but the output of the json parsing, actually the code to generate it, the difference between gist, ddt without filter, and ddt with filters makes me wonder how super human you guys are that can read dd output

[00:03] <nadim_> timotimo: you can also, if you prefer, very easilly generate html files, they also support folding

[00:05] <Zoffix> nadim_: this is the code that makes the dump: https://github.com/zoffixznet/perl6-buggable/blob/master/lib/Buggable/Plugin/CPANTesters.pm6#L13-L22

[00:05] *** cpage_ left
[00:05] <Zoffix> `dd` seems to work for me fine now, though I know I was using some sort of dumping module when I was just starting with Rakudo.

[00:06] *** Kyo91 left
[00:07] *** cpage_ joined
[00:08] <nadim_> it is nice if one doesn't have lots of data, is not interested in references, and has the eyes of a 12 years old :)

[00:09] <nadim_> I developped the P5 module because I had dumps of over half a million lines, there was no way I could use a standard dumper

[00:12] <Zoffix> 0.o

[00:12] <Zoffix> I don't dump anything even close to that.

[00:12] <Zoffix> just a few lines

[00:13] *** Cabanossi left
[00:15] *** Cabanossi joined
[00:16] <timotimo> i'll go to bed now, have a good one!

[00:17] *** Actualeyes left
[00:18] <Zoffix> \o

[00:19] <BenGoldberg> m: { say ENTER now - INIT NOW; say now - INIT now };

[00:19] <camelia> rakudo-moar 59ba9c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    NOW used at line 1␤␤»

[00:20] <BenGoldberg> m: { say ENTER now - INIT now; say now - INIT now };

[00:20] <camelia> rakudo-moar 59ba9c: OUTPUT: «0.0015279␤0.0024228␤»

[00:20] <BenGoldberg> m: { say now - INIT now; say ENTER now - INIT now };

[00:20] <camelia> rakudo-moar 59ba9c: OUTPUT: «0.002215␤0.00026739␤»

[00:22] <nadim_> Zoffix:  you could use this https://nopaste.linux-dev.org/?1160252

[00:22] <nadim_> I also notice you use ddt twice let me check that again

[00:23] <nadim_> maybe you want to change ' : ' to ': ' in the filter I dent french style you may want english style

[00:25] <Zoffix> I don't care about that code enough to bother changing it.

[00:26] <nadim_> three options a one line filter, not a biggy

[00:26] <nadim_> I believe it is more redeable without the type and reference information that serve no purpose here

[00:26] <Zoffix> Well. You know where the PR button is at :)

[00:26] * Zoffix & # bed

[00:26] <nadim_> will do!

[00:29] *** andrzejku_ joined
[00:30] *** andrzejku left
[00:32] <Geth> ¦ whateverable: d4286f3c08 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 11 files

[00:32] <Geth> ¦ whateverable: Generate the last test automatically

[00:32] <Geth> ¦ whateverable: 

[00:32] <Geth> ¦ whateverable: The problem that these tests are trying to solve is probably

[00:32] <Geth> ¦ whateverable: non-obvious, so here's the explanation. The test bench works by

[00:32] <Geth> ¦ whateverable: sending messages to the bot and waiting for responses. Let's say you

[00:32] <Geth> ¦ whateverable: have a test that expects two messages (‘foo’ and ‘bar’), but the bot

[00:32] <Geth> ¦ whateverable: replies with three instead (‘foo’, ‘bar’, and 3 seconds later ‘baz’)?

[00:32] <Geth> ¦ whateverable: <…commit message has 15 more lines…>

[00:32] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/d4286f3c08

[00:39] *** lookatme joined
[00:42] *** Cabanossi left
[00:43] <lookatme> morningh

[00:43] <lookatme> morning

[00:45] *** Cabanossi joined
[00:45] *** sftp left
[00:46] <Geth> ¦ whateverable: f537ca14be | (Aleks-Daniel Jakimenko-Aleksejev)++ | 13 files

[00:46] <Geth> ¦ whateverable: Aid for disabled editors

[00:46] <Geth> ¦ whateverable: 

[00:46] <Geth> ¦ whateverable: I guess there's nothing wrong with assisting the editor if it can't

[00:46] <Geth> ¦ whateverable: help itself, so let's do it consistently.

[00:46] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/f537ca14be

[00:47] *** sftp joined
[00:54] *** tardisx left
[01:24] *** Actualeyes joined
[01:24] *** https_GK1wmSU joined
[01:27] *** https_GK1wmSU left
[01:32] *** nadim_ left
[01:34] *** Sgeo_ joined
[01:36] *** Sgeo left
[01:42] *** vendethiel joined
[01:42] *** majensen joined
[01:43] *** Cabanossi left
[01:43] *** majensen left
[01:44] *** Cabanossi joined
[01:44] *** majensen joined
[01:45] *** ChoHag left
[01:45] *** ilbot3 left
[01:49] *** geekosaur left
[01:49] *** vendethiel left
[01:50] *** geekosaur joined
[01:50] *** majensen left
[01:51] *** ilbot3 joined
[01:51] *** ChanServ sets mode: +v ilbot3

[02:04] *** sufrostico left
[02:47] *** bwisti left
[02:49] *** harrisi joined
[02:49] *** bwisti joined
[02:52] *** noganex joined
[02:54] *** noganex_ left
[03:08] *** Ptolemarch joined
[03:24] *** jaldhar joined
[03:26] *** Cabanossi left
[03:28] *** Cabanossi joined
[03:40] *** Actualeyes left
[03:45] *** MilkmanDan joined
[04:07] *** mcmillhj joined
[04:11] *** mcmillhj left
[04:14] *** andrzejku joined
[04:14] *** xinming_ joined
[04:15] *** pduh joined
[04:15] *** pduh left
[04:15] *** andrzejku_ left
[04:17] *** xinming left
[04:23] *** andrzejku_ joined
[04:25] *** andrzejku left
[04:32] *** skids left
[04:42] *** Possum left
[04:50] *** Possum joined
[04:52] *** wamba joined
[04:57] *** Possum left
[04:59] <jdv79> ok, my pgup and pgdn keys are broke

[04:59] *** Possum joined
[04:59] <jdv79> anyway anyone else get segv when using --profile?

[05:00] <jdv79> https://gist.github.com/anonymous/58209c8bb4c17b1e0467f6bbfce0c13a

[05:00] <jdv79> ill try updating

[05:00] *** eliasr left
[05:01] *** Actualeyes joined
[05:12] *** Cabanossi left
[05:13] *** Cabanossi joined
[05:14] *** xtreak joined
[05:18] <jdv79> ok.  after updating it throws tons of errors but it doesn't crash outright

[05:18] <jdv79> progress?

[05:18] <jdv79> something is still borked

[05:23] *** cpage_ left
[05:23] *** avalenn joined
[05:25] *** khw left
[05:30] *** jaldhar left
[05:31] *** BenGoldberg left
[06:00] *** lowbro joined
[06:00] *** lowbro left
[06:00] *** lowbro joined
[06:04] *** espadrine joined
[06:07] *** mcmillhj joined
[06:12] *** mcmillhj left
[06:15] *** andrzejku_ is now known as andrzejku

[06:18] *** nadim_ joined
[06:24] *** benjikun joined
[06:25] <benjikun> is there a module to hash data with sha256 yet?

[06:26] *** cpage_ joined
[06:31] *** espadrine left
[06:32] *** bwisti left
[06:33] *** wamba left
[06:38] *** cpage_ left
[06:41] <nine> .tell raiph: https://www.reddit.com/r/perl6/comments/6htztl/no_candidate_found_for_zef/dj1bc4p/ sounds highly appropriate :) Thanks!

[06:41] <yoleaux> nine: What kind of a name is "raiph:"?!

[06:41] <yoleaux> 1 Aug 2017 16:42Z <raiph> nine: I just searched my comments mentioning "rakudobrew" and this seems to be my most recent: https://www.reddit.com/r/perl6/comments/6htztl/no_candidate_found_for_zef/dj1bc4p/ Do you consider what I said there appropriate?

[06:42] *** Cabanossi left
[06:43] *** Cabanossi joined
[06:44] *** nadim_ left
[06:44] *** tony-o left
[06:47] * zengargoyle chuckles at yoleaux

[07:04] <sacomo> Hi #perl6

[07:05] <lookatme> sacomo, hi

[07:05] *** xtreak left
[07:05] <sacomo> ola

[07:05] <sacomo> I was messing around with subsets and hashes and ran into something that I don't understand

[07:06] *** FiendKing04 joined
[07:07] <sacomo> this is probably all wrong, but just messing around

[07:07] <sacomo> m: subset ID of Hash where { .key  ~~ 'email'|'accountid' }; my ID %h = Hash.new( email => [email@hidden.address] ); say %h.perl; say %h.^name; 

[07:07] <camelia> rakudo-moar 01dbd8: OUTPUT: «(my ID %)␤Hash[ID]␤»

[07:08] <sacomo> I assing ID type to the new hash, the new hash is created, its type is set, but it is empty

[07:08] <sacomo> no error

[07:09] <sacomo> m: subset ID of Hash where { map { $_ ~~ 'email'|'accountid' }, *.keys }; my ID %h = Hash.new( email => [email@hidden.address] ); say %h.perl; say %h.^name;

[07:09] <camelia> rakudo-moar 01dbd8: OUTPUT: «(my ID %)␤Hash[ID]␤»

[07:09] <sacomo> just trying to understand the behavior 

[07:09] <lookatme> sacomo, Hash.new seems like does not take argument

[07:12] <sacomo> hmm

[07:12] <benjikun> I don't get it: 'Default constructor for 'block' only takes named arguments'

[07:13] *** nadim_ joined
[07:13] <lookatme> m: subset ID of Hash where { map { $_ ~~ 'email'|'accountid' }, *.keys }; my ID %h = email => [email@hidden.address] say %h.perl; say %h.^name;

[07:13] <camelia> rakudo-moar 01dbd8: OUTPUT: «Type check failed in assignment to %h; expected ID but got Str ("perl\@perl6.org")␤  in block <unit> at <tmp> line 1␤␤»

[07:14] <lookatme> m: subset ID of Hash where { map { .key ~~ 'email'|'accountid' }, *.keys }; my ID $h = email => [email@hidden.address] say %h.perl; say %h.^name;

[07:14] <camelia> rakudo-moar 01dbd8: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '%h' is not declared. Did you mean '$h'?␤at <tmp>:1␤------> 3 ID $h = email => [email@hidden.address] say 7⏏5%h.perl; say %h.^name;␤»

[07:14] <moritz> sacomo: 'my ID %h' declares a hash that contains ID elements

[07:15] <sacomo> ok, is there a way to do subset ID of Hash[Str]? something like that?

[07:15] <moritz> m: subset ID of Hash where {all(.keys) eq any('email'|'accountid'); my %h is ID := ID.new(); %h<email> = 'foo';

[07:15] <camelia> rakudo-moar 01dbd8: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Can't use unknown trait 'is ID' in a variable declaration.␤at <tmp>:1␤------> 3eq any('email'|'accountid'); my %h is ID7⏏5 := ID.new(); %h<email> = 'foo';␤    expecting any of:␤        TypeOb…»

[07:16] <moritz> m: subset ID of Hash where {all(.keys) eq any('email'|'accountid')}; my %h is ID := ID.new(); %h<email> = 'foo';

[07:16] <camelia> rakudo-moar 01dbd8: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use bind operator with this left-hand side␤at <tmp>:1␤------> 3'|'accountid')}; my %h is ID := ID.new()7⏏5; %h<email> = 'foo';␤»

[07:16] <moritz> m: subset ID of Hash where {all(.keys) eq any('email'|'accountid')}; my %h := ID.new(); %h<email> = 'foo';

[07:16] <camelia> rakudo-moar 01dbd8: OUTPUT: «You cannot create an instance of this type (ID)␤  in block <unit> at <tmp> line 1␤␤»

[07:16] *** https_GK1wmSU joined
[07:16] <moritz> m: subset ID of Hash where {all(.keys) eq any('email'|'accountid')}; my %h is ID; %h<email> = 'foo';

[07:16] <camelia> rakudo-moar 01dbd8: OUTPUT: «You cannot create an instance of this type (ID)␤  in block <unit> at <tmp> line 1␤␤»

[07:16] <moritz> :(

[07:16] <sacomo> ha

[07:16] <sacomo> ok

[07:17] <moritz> (on the plus side, classes are very cheap in Perl 6, so you could write  class ID is rw { has ($.email, $.accountid) })

[07:19] <sacomo> yeah

[07:19] *** https_GK1wmSU left
[07:19] <sacomo> just playing with subsets to see how far we can take them

[07:20] <moritz> m: subset ID of Hash where {all(.keys) eq any('email'|'accountid')}; my ID $h = { email => 'foo' };

[07:20] <camelia> rakudo-moar 01dbd8: ( no output )

[07:20] <moritz> m: subset ID of Hash where {all(.keys) eq any('email'|'accountid')}; my ID $h = { other => 'foo' };

[07:20] <camelia> rakudo-moar 01dbd8: OUTPUT: «Type check failed in assignment to $h; expected ID but got Hash (${:other("foo")})␤  in block <unit> at <tmp> line 1␤␤»

[07:20] <moritz> if you are willing to forego the % sigil, this works

[07:21] <lookatme> m: subset ID of Hash where { all(.keys) (elem) any(<email accountid>) }; my ID $h = {email => 'baz'}; say $h;

[07:21] <camelia> rakudo-moar 01dbd8: OUTPUT: «{email => baz}␤»

[07:21] <sacomo> ah

[07:21] <sacomo> ok

[07:21] <sacomo> that is interesting

[07:22] <lookatme> m: subset ID of Hash where { all(.keys) (elem) <email accountid> }; my ID $h = {email => 'baz'}; say $h;

[07:22] <camelia> rakudo-moar 01dbd8: OUTPUT: «{email => baz}␤»

[07:22] <lookatme> m: subset ID of Hash where { all(.keys) (elem) <email accountid> }; my ID $h = {emailx => 'baz'}; say $h;

[07:22] <camelia> rakudo-moar 01dbd8: OUTPUT: «Type check failed in assignment to $h; expected ID but got Hash (${:emailx("baz")})␤  in block <unit> at <tmp> line 1␤␤»

[07:24] <zengargoyle> m: my subset ID of Hash where {all(.keys) eq any('email'|'accountid')}; my ID $h; $h<email> = 'foo'; my %h := %$h; say %h.perl

[07:24] <camelia> rakudo-moar 01dbd8: OUTPUT: «{:email("foo")}␤»

[07:24] <zengargoyle> m: my subset ID of Hash where {all(.keys) eq any('email'|'accountid')}; my ID $h; $h<email> = 'foo'; my %h := %$h; say %h.perl; say %h.^name;

[07:24] <camelia> rakudo-moar 01dbd8: OUTPUT: «{:email("foo")}␤Hash␤»

[07:24] <zengargoyle> phbbt.

[07:24] <sacomo> m: subset ID of Hash where { .keys ~~ 'email'|'accountid' }; my ID $h = {email => 'baz'}; say $h; say $h ~~ ID; 

[07:24] <camelia> rakudo-moar 01dbd8: OUTPUT: «{email => baz}␤True␤»

[07:25] <sacomo> m: subset ID of Hash where { .keys ~~ 'email'|'accountid' }; my ID $h = {notemail => 'baz'}; say $h; say $h ~~ ID; 

[07:25] <camelia> rakudo-moar 01dbd8: OUTPUT: «Type check failed in assignment to $h; expected ID but got Hash (${:notemail("baz")})␤  in block <unit> at <tmp> line 1␤␤»

[07:29] <lookatme> if you declare with `ID %h`, it is mean the type of key is ID

[07:30] *** wamba joined
[07:30] *** dakkar joined
[07:31] <sacomo> ok

[07:32] <sacomo> m: subset ID of Hash where { .keys ~~ 'email'|'accountid' }; sub foo($email --> ID) { { email => $email } }; say foo('p@p6.org');

[07:32] <camelia> rakudo-moar 01dbd8: OUTPUT: «{email => [email@hidden.address]
[07:32] <benjikun> how do I concatenate two blobs

[07:34] <sacomo> m: say Blob.new([1, 2, 3]) ~ Blob.new([1, 2, 3]);

[07:34] <camelia> rakudo-moar 01dbd8: OUTPUT: «Blob:0x<01 02 03 01 02 03>␤»

[07:35] <benjikun> oh

[07:35] <benjikun> that simple

[07:35] <benjikun> thanks lol

[07:42] *** Cabanossi left
[07:43] *** Cabanossi joined
[07:49] *** dakkar left
[07:49] <sacomo> is there a perl 6 playground / codepen where I can share runnable code?

[07:51] *** dakkar joined
[07:53] *** astj left
[07:53] *** astj joined
[07:53] <moritz> sacomo: https://glot.io/new/perl6

[07:54] <sacomo> thanks

[07:55] <sacomo> does anyone know if this behavior is documented somewhere? https://glot.io/snippets/esalbb12gf

[07:56] <sacomo> the final type checks correctly identify each subset

[07:56] *** xtreak joined
[07:57] <sacomo> does the type association happen at the test? or when the subs return the ID value?

[07:58] *** astj left
[07:58] <moritz> subset types can only be verified at runtime

[07:58] *** darutoko joined
[08:00] <sacomo> ok, so like the "$id1 ~~ Email" happens at that test? or is the subset associated as part of the sub's return step?

[08:00] *** benjikun left
[08:01] <sacomo> doing .^name on the var just prints Str or Int

[08:01] *** zakharyas joined
[08:01] *** tzekid joined
[08:03] *** astj joined
[08:16] *** https_GK1wmSU joined
[08:17] *** ChoHag joined
[08:17] *** vendethiel joined
[08:18] *** araujo_ joined
[08:19] *** https_GK1wmSU left
[08:22] *** araujo left
[08:22] *** mr-foobar joined
[08:25] *** robertle left
[08:26] <moritz> it happens at the test, yes

[08:31] *** aindilis left
[08:32] *** cpage_ joined
[08:37] <sacomo> moritz, thanks. 

[08:43] *** Actualeyes left
[08:44] *** andreoss joined
[08:53] *** mcmillhj joined
[08:58] *** mcmillhj left
[09:12] *** Cabanossi left
[09:13] *** Cabanossi joined
[09:15] *** ChoHag left
[09:24] *** TEttinger left
[09:26] *** LeCamarade left
[09:27] *** LeCamarade joined
[09:28] *** sena_kun joined
[09:29] *** dogbert17 joined
[09:29] *** Ulti_ is now known as Ulti

[09:30] <nadim_> Hi, I have this code: multi method get_elements (Hash:D $h) { $h.sort(*.key)>>.kv.map: -> ($k, $v) {'X' ~ $k, ' => ', $v} }

[09:30] <nadim_> Note the 'X' ~ $k

[09:32] <nadim_> all works just fine, if I change the 'X' to ':', what i believe is a single quoted string containing ':' then hell breaks lose and i get this error a bit later: Too few positionals passed; expected 5 arguments but got 4

[09:32] <nadim_> if I change ':' to 'X:' then all works fine

[09:32] <nadim_> I tried to golf it down without success

[09:33] <lookatme> m: method g (Hash:D $h) { $h.sort(*.key)>>.kv.map: -> ($k, $v) {'X' ~ $k, ' => ', $v} };  g(%{ a => 1, b => 2});

[09:33] <camelia> rakudo-moar 01dbd8: OUTPUT: «5===SORRY!5===␤Undeclared routine:␤    g used at line 1␤␤Other potential difficulties:␤    Useless declaration of a has-scoped method in mainline (did you mean 'my method g'?)␤    at <tmp>:1␤    ------> 3method7⏏5 g (Hash:D $h) { $…»

[09:33] <lookatme> m: sub g (Hash:D $h) { $h.sort(*.key)>>.kv.map: -> ($k, $v) {'X' ~ $k, ' => ', $v} };  g(%{ a => 1, b => 2});

[09:33] <camelia> rakudo-moar 01dbd8: ( no output )

[09:33] <lookatme> m: sub g (Hash:D $h) { $h.sort(*.key)>>.kv.map: -> ($k, $v) {'X' ~ $k, ' => ', $v} };  say g(%{ a => 1, b => 2});

[09:33] <camelia> rakudo-moar 01dbd8: OUTPUT: «((Xa  =>  1) (Xb  =>  2))␤»

[09:33] <lookatme> m: sub g (Hash:D $h) { $h.sort(*.key)>>.kv.map: -> ($k, $v) {':' ~ $k, ' => ', $v} };  say g(%{ a => 1, b => 2});

[09:33] <camelia> rakudo-moar 01dbd8: OUTPUT: «((:a  =>  1) (:b  =>  2))␤»

[09:34] <nadim_> as I said golfing it down did not help

[09:34] <lookatme> you can provide more info about your problem

[09:35] *** AlexDani` joined
[09:35] <nadim_> Yes but it's biggish, I will try isolate it more firs, maybe (probably), I mess up later somewhere. I just wanted to check that I have not missed some magical ':' effect

[09:37] <nadim_> the code is on github, just think I should do a bit more effort first ;)

[09:37] *** AlexDaniel left
[09:47] *** lookatme left
[09:50] *** LeCamarade left
[09:51] *** LeCamarade joined
[10:00] *** buggable left
[10:00] *** buggable joined
[10:00] *** ChanServ sets mode: +v buggable

[10:00] *** vendethiel left
[10:02] <Zoffix> buggable: testers f878354a-6183-11e7-89a5-c5f577a92919

[10:02] <buggable> Zoffix, Cound not find that ID or API is down. Try manually: http://api.cpantesters.org/v3/report/f878354a-6183-11e7-89a5-c5f577a92919

[10:03] <Zoffix> buggable: testers f878354a-6183-11e7-89a5-c5f577a92919

[10:10] *** LeCamarade left
[10:11] *** LeCamarade joined
[10:12] *** lichtkind left
[10:13] *** rurban joined
[10:14] *** rurban left
[10:14] *** AlexDani` is now known as AlexDaniel

[10:15] *** astj left
[10:15] *** jonas3 left
[10:16] *** rurban joined
[10:16] <nadim_> hi, a few questions. 1/ is it possible to export the same module under different name? IE: I'd like Data::Dump::Tree to also be DDT.

[10:17] *** rurban left
[10:17] *** jonas3 joined
[10:18] <nadim_> 2/ do we have a coverage tool? the error I had above (':' messing things up) turned out to be in a completely different module in code that has _never_ been run!

[10:19] <gfldex> nadim_: did you try symlinks to create an alias?

[10:20] <nadim_> I'd like that to happen for anyone that installs the module

[10:23] <gfldex> nadim_: it could be done with a Build.pm but getting that portable would require quite some work

[10:24] <jnthn> I've no idea if this would actually work, but you could just give it two entries in the provides section of the META6.json?

[10:25] <jnthn> That'd let the use statement work for both

[10:25] *** lichtkind joined
[10:25] <jnthn> If it's just about exporting it with another name then just stick something like my constant DDT is export = Data;:Dump::Tree; at the end

[10:28] <nadim_> 3/ in DDT, I use '=>' to separate keys from values in Hashe it is also used for Map and Set.  http://imgur.com/kLLy1cP I am womdering if it is not more per6is to display it this way http://imgur.com/OP3TIb3 or even this way http://imgur.com/Q8o83no, opinions welcome

[10:31] <nadim_> jnthn: thanks. I understand that the "export"  at the end would let me do DDT.new() but it wouldn't allow me to do use DDT, right?

[10:34] <jnthn> nadim_: No, that was what I was talking about with the provides thing in META6.json

[10:34] *** xtreak left
[10:34] <jnthn> afaik that's how (once installed) we map "use Foo" into a file to load

[10:34] <jnthn> In theory poking two entries for the same file into provides would let them both resolve to it

[10:34] <jnthn> In reality I never tried it :)

[10:35] *** xtreak joined
[10:35] <nadim_> Then I'll try it for you :)

[10:42] *** someuser joined
[10:42] *** rindolf joined
[10:46] *** noganex left
[10:57] <nadim_> jnthn: although not related to the change, I believe, I get a weird zef install error https://nopaste.linux-dev.org/?1160257, the tests use the Horizontal module so it is weird it can use them but not install them.

[10:58] <jnthn> Maybe your tests don't touch the file doing the use?

[10:59] <jnthn> The whole lot will be compiled on installation

[10:59] *** zakharyas left
[11:00] <nadim_> I added a use Datat::Dump::Tree::Horizontal directly in one of the tests, didn't cange a thing

[11:02] <jnthn> Did you include that in the provides section?

[11:03] <jnthn> Did you typo it like you just did here? ;)

[11:03] *** Kyo91 joined
[11:04] <nadim_> I think not ;) https://nopaste.linux-dev.org/?1160258

[11:06] <nadim_> honestly I haven't installed the module in ages, if ever, as I work with it in my dev environment directly but I still need to make it install or the whole effort is moot :)

[11:07] *** Kyo91 left
[11:11] <andreoss> are the design docs the only documentation on macros? what is the current state of their support?

[11:11] *** pecastro left
[11:14] *** markmont left
[11:16] <lizmat> andreoss: https://github.com/masak/007

[11:21] *** wamba left
[11:24] *** mr-foobar left
[11:31] *** mr-foobar joined
[11:38] <nadim_> ugexe:  I have this error installing locally with zef https://nopaste.linux-dev.org/?1160257, I just update to the latest zef but it made no change

[11:39] <nadim_> ugexe: the file is there, it is in the repo, it is used by tests, tests pass, install fails

[11:40] *** markmont joined
[11:46] *** noganex joined
[11:47] *** brabo left
[11:47] *** araraloren joined
[11:55] *** AlexDaniel left
[11:56] *** AlexDaniel joined
[11:56] *** vendethiel joined
[11:59] <Geth___> ¦ modules.perl6.org: acd5a415cc | (Gabor Szabo)++ | 7 files

[11:59] <Geth___> ¦ modules.perl6.org: start collecting information about Appveyor - CI on MS Windows  #76

[11:59] <Geth___> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/acd5a415cc

[11:59] <Geth___> ¦ modules.perl6.org: 5a8b542674 | (Gabor Szabo)++ | .gitignore

[11:59] <Geth___> ¦ modules.perl6.org: gitignore /blib/

[11:59] <Geth___> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/5a8b542674

[12:00] *** brabo joined
[12:05] *** xtreak left
[12:06] *** xtreak joined
[12:09] *** xtreak left
[12:09] *** xtreak joined
[12:17] *** AlexDaniel left
[12:17] *** AlexDaniel joined
[12:23] *** xtreak left
[12:25] *** szabgab joined
[12:25] <szabgab> Hi there!

[12:26] <szabgab> I have updated the code generating http://modules.perl6.org/ with the initial step to collect information about the use of Appveyor for testing on Windows

[12:29] *** pecastro joined
[12:33] <Zoffix> szabgab: someone will need to rebuild the db, I think, 'cause of the added table

[12:34] <Zoffix> bin/build-project-list.pl --interval=0

[12:35] <Zoffix> And then swap the sqlite db the site is currently using with the the resultant sqlite db

[12:35] <szabgab> Zoffix: yes, I was about to ask for that, just got interrupted by doorbell

[12:39] *** nattefrost joined
[12:40] <moritz> DBIx::Class::Storage::DBI::_prepare_sth(): DBI Exception: DBD::SQLite::db prepare_cached failed: no such column: me.appveyor_status [for Statement "SELECT me.meta_url, me.name, me.author_id, me.build_id, me.travis_status, me.appveyor_status, me.url, me.description, me.stars, me.issues, me.date_updated, me.date_added FROM dists me WHERE ( meta_url = ? )"] at lib/ModulesPerl6/Model/Dists.pm line 136

[12:40] <moritz> do I have to delete the old DB first? do a manual migration step? or anything else?

[12:40] *** AlexDaniel left
[12:41] <moritz> git grep -i 'create table'

[12:41] <moritz> comes up empty

[12:41] *** AlexDaniel joined
[12:41] <moritz> szabgab: ^^

[12:42] *** AlexDaniel left
[12:42] <Zoffix> moritz: bin/build-project-list.pl --interval=0 --db-file=new.db    then when it's done copy new.db to (I think) modules.sqlite.db or something like that (there's a file with that name already) and restart the app

[12:42] *** zakharyas joined
[12:42] *** AlexDaniel joined
[12:42] <Zoffix> This process can possibly be improved :D

[12:43] <Zoffix> modulesperl6.db

[12:45] <Zoffix> there's no create table because it's done by DBIC

[12:45] <szabgab> moritz: yes, that's what I had to do locallt

[12:46] <szabgab> locally. It took me about an hour to figure that out :(

[12:46] <Zoffix> :o

[12:46] <szabgab> maybe the suggestion of zoffix is better though.

[12:47] *** nowan left
[12:47] <szabgab> In any case I guess it would be a good idea to add it to the readme

[12:47] <moritz> generation of new DB is now running

[12:47] <szabgab> moritz++ Zoffix++

[12:47] <Aaronepower> Hello, how do you access argv? `@*ARGV` is what a lot of documentation says but it isn't available according to perl.

[12:47] <moritz> Aaronepower: @*ARGS if my memory serves correctly

[12:47] <Zoffix> Aaronepower: it's @*ARGS. Which documentation says @*ARGV? That should be fixed

[12:48] <gfldex> m: say @*ARGS;

[12:48] <camelia> rakudo-moar 01dbd8: OUTPUT: «[]␤»

[12:48] <gfldex> Aaronepower: see https://docs.perl6.org/language/variables#Dynamic_variables

[12:49] <Zoffix> Aaronepower: and that's just the args, without the name of the program itself, which is available as $*PROGRAM

[12:49] <AlexDaniel> m: say $*ARGFILES.filename

[12:49] <camelia> rakudo-moar 01dbd8: OUTPUT: «No such method 'filename' for invocant of type 'IO::ArgFiles'␤  in block <unit> at <tmp> line 1␤␤»

[12:49] <Zoffix> Aaronepower: and if you want the args to mean the files to process, you can also use $*ARGFILES, which is an IO::CatHandle type, with args loaded as filenames (or with STDIN handle if no args were given)

[12:49] *** nowan joined
[12:50] <Zoffix> m: say $*ARGFILES.path

[12:50] <camelia> rakudo-moar 01dbd8: OUTPUT: «IO::Special.new("<STDIN>")␤»

[12:50] <Aaronepower> Zoffix: Sorry not documentation, just other people's posts.

[12:50] <Zoffix> Ah

[12:51] <Zoffix> Maybe it's something that used to exist during design stages...

[12:51] <Aaronepower> None of the actual perl6 documentation makes it to the top of Google or DuckDuckGo.

[12:54] <Geth___> ¦ modules.perl6.org: 9f2da12b3c | (Zoffix Znet)++ (committed using GitHub Web editor) | README.md

[12:54] <Geth___> ¦ modules.perl6.org: Fix URL to DEPLOYMENT.md docs

[12:54] <Geth___> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/9f2da12b3c

[12:59] <Geth___> ¦ modules.perl6.org: a48f7213b5 | (Zoffix Znet)++ (committed using GitHub Web editor) | README.md

[12:59] <Geth___> ¦ modules.perl6.org: Document how to update database

[12:59] <Geth___> ¦ modules.perl6.org: 

[12:59] <Geth___> ¦ modules.perl6.org: - Document caching mechanism and how to clear cache

[12:59] <Geth___> ¦ modules.perl6.org:     from commit messages

[12:59] <Geth___> ¦ modules.perl6.org: - Document what to do when changes to the database

[12:59] <Geth___> ¦ modules.perl6.org:    structure are made

[12:59] <Geth___> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/a48f7213b5

[12:59] <Zoffix> Geth___: your extra-long tail annoys me.

[12:59] * perlpilot wonders where (and when) people mentioned @*ARGV

[13:00] <Zoffix> oh, it's my geth!

[13:00] <Zoffix> huggable: geth

[13:00] <huggable> Zoffix, Set geth report URL (select application/json and send me everything): http://geth.niner.name:8888/?chan=#perl6-dev

[13:00] *** Geth___ left
[13:01] *** Geth_ joined
[13:01] *** ChanServ sets mode: +v Geth_

[13:01] *** mcmillhj joined
[13:02] <araraloren> there is @ARGV in Perl, maybe confused @*ARGS and @ARGV

[13:03] <daxim> I asked a SO question 22 min ago and it promptly is at -1 but no comments for the downvoting reason.  this bothers me more than it should.

[13:03] <Zoffix> heh

[13:03] *** cog_ left
[13:03] *** cog_ joined
[13:03] <perlpilot> I would think it must've been a typo or thinko, but if there's enough posts using @*ARGV instead of @*ARGS, then maybe there's some genuine misunderstanding?

[13:04] <araraloren> I search in google, there are no @*ARGV found

[13:05] <Aaronepower> perlpilot: I think my misunderstanding was from this article, which is about perl5. https://perlmaven.com/argv-in-perl

[13:06] *** zakharyas left
[13:06] <Aaronepower> but is the top result for "perl6 argv" in DuckDuckGo.

[13:06] <Zoffix> hehe

[13:06] <perlpilot> ah ... okay

[13:06] <Zoffix> All the more reasons to rename the language :)

[13:07] <perlpilot> Aaronepower: had you searched for "perl 6 argv" you would have gotten the right article as the top result  ;-)

[13:08] <Zoffix> hah

[13:08] <Zoffix> oh yeah

[13:08] <jast> got a name in mind?

[13:08] *** zakharyas joined
[13:08] <Zoffix> Aaronepower: you do know about sub MAIN right? If you just want your script to take some args, that's the thing to use. I think this article mentions it: http://perl6maven.com/parsing-command-line-arguments-perl6

[13:09] <Aaronepower> Zoffix: I did, but I just wanted the first argument provided and it seemed like a bit much for just one argument.

[13:09] <Zoffix> jast: Supercalifragilisticexpialidocious

[13:09] <araraloren> XD

[13:09] <jast> I think that one might already been taken for... something

[13:11] *** ugexex joined
[13:13] <ugexex> nadim_: did you even try using your alias before using it? That's a precomp error as jnthn pointed out

[13:13] <ugexex> Before installing rather 

[13:13] <perlpilot> If the long view is that "Perl 5" will eventually obsolesce and "Perl 6" will be the only Perl, then keeping the "Perl" brand makes sense.   If we're to continue to believe that "Perl 5" and "Perl 6" are separate languages with independent life-times and that both will continue indefinitely, then a rename of some sort would be better.  (but I still loathe that option for some reason)

[13:14] <Zoffix> perlpilot: why does keeping the brand make sense?

[13:14] <Zoffix> Rakudo has little in common with Perl. Hell, even sigils are different.,

[13:15] <AlexDaniel> :S

[13:15] *** dakkar left
[13:15] <perlpilot> They share the same "spirit".  They are largely syntactically similar.

[13:16] <Zoffix> lol

[13:16] <araraloren> Rakudo and Perl 6 are different, right ?

[13:16] <perlpilot> (but, by the same thinking, PHP is in the Perl family too, so ...  ;-)

[13:16] *** dakkar joined
[13:16] <Aaronepower> In pattern matching how do you redeclare a symbol?

[13:16] <Zoffix> perlpilot: and any concrete terms to define that? What's does "Perl" brand mean to you?

[13:17] <araraloren> m: say "bb" ~~ /(\w)$0/;

[13:17] <camelia> rakudo-moar 01dbd8: OUTPUT: «｢bb｣␤ 0 => ｢b｣␤»

[13:17] <araraloren> Aaronepower, ^^

[13:18] *** ugexex left
[13:18] <perlpilot> Zoffix: it means that language that fits my brain and has some elements of procedural programming, oop, functional programming and has strong use of regex.  "Perl" is that thing I go to when I want to get things done quickly, easily, and fun-ly   :)

[13:18] *** jonas3 left
[13:18] <Zoffix> araraloren: not in my usage. Rakudo (capital R) is the stand-in name I'm using to refer to the language as a trial before I'll present argumentation for extending the language name on 6.d language release: https://rakudo.party/post/The-Hot-New-Language-Named-Rakudo

[13:19] <Zoffix> perlpilot: so... Python, Ruby, PHP, JavaScript.

[13:19] <Aaronepower> m: my @baz = [1, 2, 3, 4, 5];  my (@foo, @bar) = @baz.classify({$_ > 3}){True, False}; my (@foobar, @bar) = @bar.classify({$_ > 2});

[13:19] <camelia> rakudo-moar 01dbd8: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol '@bar'␤at <tmp>:1␤------> 3$_ > 3}){True, False}; my (@foobar, @bar7⏏5) = @bar.classify({$_ > 2});␤    expecting any of:␤        shape declaration␤»

[13:19] <Aaronepower> araraloren: ^

[13:20] <Zoffix> perlpilot: Perl11 also, eh?

[13:20] <perlpilot> Zoffix: to me, Perl is an embodiment of TIMTOWTDI, whipituptitude, and manuplexity.  Python doesn't quite fit that, but sure ... Ruby and Javascript.    PHP has a little too much impedance because of the inconsistencies.

[13:20] <Zoffix> Aaronepower: that's the thing I mentioned yesterday. There's no elegant way to do that with `@` sigils, because they take all the things and the signature version with binding needs a `my`

[13:20] *** cantankerousking joined
[13:21] <Zoffix> HAH

[13:21] <araraloren> I think Rakudo is an implementation of Perl 6, and NQP , even Perl 6 dialect fanlang.

[13:22] <Zoffix> perlpilot: what's "manuplexity"?

[13:23] <araraloren> m: my @baz = [1, 2, 3, 4, 5];  my (@foo, @bar) = @baz.classify({$_ > 3}){True, False}; my (@foobar, @foobaz) = @bar.classify({$_ > 2});

[13:23] <camelia> rakudo-moar 01dbd8: ( no output )

[13:23] <perlpilot> a typo of "manipulexity"  :)

[13:24] <Aaronepower> m: say ["Hello", "World"].join('\n');

[13:24] <camelia> rakudo-moar 01dbd8: OUTPUT: «Hello\nWorld␤»

[13:24] <araraloren> Aaronepower, you type the duplicate name

[13:24] <perlpilot> Zoffix: I can't spell it, but I know it when I see it ;-)

[13:24] <Zoffix> perlpilot: well, what is it?

[13:24] <Aaronepower> Why does `.join('\n')` not actually put in a newline?

[13:25] <Zoffix> Aaronepower: single quotes don't interpolate \n escapes

[13:25] <Zoffix> Aaronepower: use double quotes

[13:25] <perlpilot> https://en.wiktionary.org/wiki/Citations:manipulexity

[13:27] <szabgab> moritz:could you take a look at the modules process again? When I reload the page it sometimes shows an empty appveyor column, sometimes not even that

[13:27] <Zoffix> All that's too vague and applies to too many languages (even your own reference lists Python as example). So I'd say that's now what Perl brand represents.

[13:27] <Zoffix> It might be why you like "Perl", but not the brand.

[13:28] <Zoffix> s/now/not/;

[13:29] <perlpilot> Could be.  It's hard to remove my own personal history and look at such things objectively.

[13:30] <moritz> szabgab: the run that generates the new DB file is still in progress

[13:31] <moritz> dist 832 of 865

[13:31] <Geth> ¦ modules.perl6.org: 72b93fcb41 | (Zoffix Znet)++ (committed using GitHub Web editor) | assets/js/main.js

[13:31] <Geth> ¦ modules.perl6.org: Adjust sorter plugin filter

[13:31] <Geth> ¦ modules.perl6.org: 

[13:31] <Geth> ¦ modules.perl6.org: to accomodate newly added appveyor column

[13:31] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/72b93fcb41

[13:32] <perlpilot> I used to tell people that I thought PHP, Python, Ruby, Perl, and Javascript were all converging towards the same language  (and then JS added "use strict"! :-)   But Perl always seemed to be the pioneer in glomming features together in one place in general ways.

[13:32] <Zoffix> perlpilot: are you the author of "PHP training wheels without the bike" website?

[13:32] <perlpilot> uh ... NO

[13:33] <araraloren> PHP is best language in the world. :)

[13:34] <Zoffix> Ah ok. I recall a decade ago, Perl people loved to point to that website and mock PHP, especially for inconsistencies in its routine names. Now, a decade later, Rakudo has the same inconsistencies, if not worse. Maybe there is something to your hypothesis of convergance :D

[13:34] <Zoffix> PHP is awesome because you can program by just googling what you need to and get a copy-pasteable answer.

[13:34] <perlpilot> PHP is "the people's language" in that regard.

[13:35] <perlpilot> Perl kinda was that way in the 1990s too.

[13:38] *** nowan left
[13:40] *** nowan joined
[13:41] <Aaronepower> What's the throwaway pattern bind?

[13:42] * Zoffix shrugs

[13:42] <timotimo> you mean $ ?

[13:42] <timotimo> equivalently @ or % or &

[13:42] <timotimo> well, not equivalent, of course

[13:43] <timotimo> just omitting the name will throw the value away, but you can still require a certain kind to be passed there

[13:43] *** tony-o joined
[13:44] <Zoffix> m: my @baz = [1, 2, 3, 4, 5];  my @foo = .[.grep: * > 3]:delete with @baz; my @foobar= .[.grep: * > 2]:delete with @baz; dd [@baz, @foo, @foobar]

[13:44] <camelia> rakudo-moar 01dbd8: OUTPUT: «[[1, 2, 3], [5, Any], [4, Any]]␤»

[13:44] <Zoffix> m: my @baz = [1, 2, 3, 4, 5];  my @foo = .[.grep: * > 3, :k]:delete with @baz; my @foobar= .[.grep: * > 2, :k]:delete with @baz; dd [@baz, @foo, @foobar]

[13:44] <camelia> rakudo-moar 01dbd8: OUTPUT: «[[1, 2], [4, 5], [3]]␤»

[13:45] *** astj joined
[13:46] <Aaronepower> timotimo: having just `my (@foo, @)` doesn't work.

[13:47] *** Kyo91 joined
[13:48] <Zoffix> Aaronepower: doesn't work to accomplish what?

[13:48] <Aaronepower> Zoffix: Fail to compile.

[13:48] <Zoffix> ?

[13:49] <Zoffix> What are you trying to do?

[13:49] <Aaronepower> Zoffix: It just complains about the next one. https://paste.rs/6L2

[13:49] <moritz> Zoffix: can I restart the modules.perl6.org app without re-fetching all the data?

[13:49] *** Kyo91_ joined
[13:50] *** itaipu joined
[13:50] <Zoffix> moritz: the app doesn't fetch anything. Yeah you can restart it after you copied the new db you made to modulesperl6.db.

[13:50] <Aaronepower> Zoffix: I want `my (@foo, @dontcare)` but not just bind it to a random variable. In Rust in pattern matching assigning something to `_` means "I don't care about this part of the pattern.

[13:50] <moritz> Zoffix: how do I restart it?

[13:51] <Zoffix> I don't remember. Wasn't there a service?

[13:51] <moritz> no :(

[13:51] <moritz> just a cron job

[13:51] <Zoffix> service modules.perl6.org-init.d restart

[13:51] <Zoffix> I think that did it

[13:51] <Zoffix> I mean I ran it

[13:52] <Zoffix> "Servince unavailable" oops :P

[13:52] *** Kyo91 left
[13:52] *** nhywyll joined
[13:52] <moritz> Aug 02 13:51:52 www modules.perl6.org-init.d[23266]: Can't load application from file "/etc/init.d/modules.perl6.org-init.d": Can't locate Toadfarm.pm in @INC (you may need to install the Toadfarm module) (@INC contains: /etc/perl /usr/local/lib/x86_64-linux-gnu/perl/5.20.2 /usr/local/share/perl/5.20.2 /usr/lib/x86_64-linux-gnu/perl5/5.20 /usr/share/perl5 /usr/lib/x86_64-linux-gnu/perl/5.20 

[13:52] <moritz> /usr/share/perl/5.20 /usr/local/lib/site_perl /usr/local/lib/x86_64-linux-gnu/perl/5.20.1 /usr/local/share/perl/5.20.1 .) at /etc/init.d/modules.perl6.org-init.d line 16.

[13:52] <Zoffix> Ah, ok, then I guess that's an outdated service file.

[13:53] <Zoffix> I started it

[13:53] <moritz> thanks

[13:53] <Zoffix> su modules.perl6.org; cd ~/modules.perl6.org; hypnotoad bin/ModulesPerl6.pl

[13:53] <moritz> ah

[13:54] <Zoffix> But I thought we had something automatic to start it when, say, the server reboots and it used to work

[13:54] <Zoffix> .oO( or maybe I was *meant* to make it work but never did )

[13:55] <moritz> the crontab contains a @reboot line

[13:56] <Zoffix> Oh

[13:58] *** rindolf left
[13:58] *** itaipu left
[13:58] <Geth> ¦ modules.perl6.org: f81e3d3673 | (Zoffix Znet)++ (committed using GitHub Web editor) | assets/sass/main.scss

[13:58] <Geth> ¦ modules.perl6.org: Fix broken selector

[13:58] <Geth> ¦ modules.perl6.org: 

[13:58] <Geth> ¦ modules.perl6.org: Fixes centering of text in Travis/AppVeyor columns

[13:58] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/f81e3d3673

[14:00] *** nowan left
[14:00] <szabgab> OK, apparently Zoffix and moritz have figured out the http://modules.perl6.org/ issues. Thanks!

[14:00] <szabgab> It now works and shows the Appveyor column

[14:03] *** nowan joined
[14:05] <Zoffix> szabgab: if you add a PostProcessor to fetch AppVeyor's status, don't forget to add `[REBUILD]` at the start of the commit message title, so that the site rebuilds cached dists too

[14:06] <Zoffix> Here's postprocessor to fetch travis status. IIRC just adding a new file to the directory will work, as it's using Module::Pluggable to find them https://github.com/perl6/modules.perl6.org/blob/master/lib/ModulesPerl6/DbBuilder/Dist/PostProcessor/TravisCI.pm

[14:06] <szabgab> Zoffix: I'll try to remember, but I am not sure when, if at all, I'll be able to do that.

[14:06] <Zoffix> OK :)

[14:07] <szabgab> Anyway, thank you both!

[14:07] *** mcmillhj left
[14:07] *** szabgab left
[14:08] *** mcmillhj joined
[14:10] *** Actualeyes joined
[14:14] <sena_kun> https://rt.perl.org/Public/Bug/Display.html?id=131827 can be closed, btw.

[14:16] <moritz> did anybody add a test?

[14:16] <moritz> if so, I don't see it documented in the ticket

[14:16] <sena_kun> yeah, it was merged today.

[14:16] <Zoffix> Closed (and added link to tests)

[14:16] <sena_kun> give me a second...

[14:16] <sena_kun> Zoffix++

[14:19] <lizmat> Q: of the people here, *if* you're coming to the TPCiA, would you like to attend a 2-day hackathon afterwards?

[14:20] <El_Che> lizmat: I suspect most people have already book they train/plain ticket and hotel

[14:20] <lizmat> yeah

[14:20] <El_Che> what makes the pool smaller

[14:21] <lizmat> and the people that *will* stay behind, most likely would like to see more of Amsterdam anyway

[14:21] <El_Che> certainly

[14:23] <sena_kun> a new regression bug for `[]` is filled if anyone feels a courage within. :)

[14:23] <lizmat> sena_kun: RT ?

[14:24] *** wamba joined
[14:24] <timotimo> Aaronepower: oh, the difference is that "my" won't let you declare things without a name

[14:24] <Zoffix> lizmat: https://rt.perl.org/Ticket/Display.html?id=131830

[14:24] <sena_kun> lizmat, https://rt.perl.org/Public/Bug/Display.html?id=131830

[14:24] <timotimo> Aaronepower: but you can declare the variable separately from the destructuring, or put the "my" inside the parenthesis

[14:24] <sena_kun> lizmat, it doesn't golfed though.

[14:24] <sena_kun> *isn't

[14:25] <Zoffix> bisect: m: use NativeCall; CArray[Str].new[my int $ = 1]

[14:25] <bisectable6> Zoffix, Bisecting by exit code (old=2015.12 new=5f68c77). Old exit code: 0

[14:25] <bisectable6> Zoffix, bisect log: https://gist.github.com/5ab1ea4789d86778ce9b8554c1fdeca0

[14:25] <bisectable6> Zoffix, (2017-07-31) https://github.com/rakudo/rakudo/commit/a256c26d850c0e5ff986a6dfa1b1ef1ffaf55f40

[14:26] <lizmat> sena_kun: could you check whether reverting a256c26d850c0e5f fixes it ?

[14:26] <lizmat> and PR a test for it?  :-)

[14:26] <sena_kun> lizmat, hmm, to be honest, I doubt I can right now. Can try later today though.

[14:26] <Zoffix> c: a256c26d850c0e5f,a256c26d850c0e5f~1 use NativeCall; CArray[Str].new[my int $ = 1]

[14:26] <committable6> Zoffix, ¦a256c26: «Ambiguous call to 'postcircumfix:<[ ]>'; these signatures all match:␤:(\SELF, int $pos)␤:(NativeCall::Types::CArray:D \array, $pos)␤  in block <unit> at /tmp/ZrEjw1fX0F line 1␤ «exit code = 1»» ¦a256c26d850c0e5f~1: «»

[14:26] <Zoffix> Yup, fixes it

[14:27] <sena_kun> \o/

[14:27] <nadim_> ugexe:  Hi, thank you for your quick answer. The problem is not with the alias, it is not even there. I try to install as shown in the link, I get an error message for the Horizontal module, the tests that are run by zef make use of it. I appreciate any help you can give.

[14:27] <Zoffix> c: HEAD use Test; use NativeCall; lives-ok { CArray[Str].new[my int $ = 1] }, 'native int as index to CArray does not crash'

[14:27] <committable6> Zoffix, https://gist.github.com/51b84d58476f362e210355f21d15153d

[14:27] <Zoffix> c: a256c26d850c0e5f~1 use Test; use NativeCall; lives-ok { CArray[Str].new[my int $ = 1] }, 'native int as index to CArray does not crash'

[14:27] <committable6> Zoffix, ¦a256c26d850c0e5f~1: «ok 1 - native int as index to CArray does not crash»

[14:28] <Zoffix> lizmat: sena_kun ^ test :)

[14:28] <sena_kun> Zoffix++

[14:29] <sena_kun> I'll commit it to roast right now then?

[14:29] <Zoffix> PR it. Otherwise it'll be failing for all the devs until the issue is fixed

[14:29] <El_Che> lizmat: I am looking to volunteer, but the timespots looks weird: wednesday afternoon timekeeping: 14:15-15:30

[14:29] <Zoffix> I don't get why that commit causes that issue tho

[14:29] <El_Che> lizmat: while talks start soon and finish later

[14:30] <sena_kun> Ok.

[14:31] *** lowbro left
[14:31] <Zoffix> sena_kun: nevermind. I see in #perl6-dev the suspect commit was reverted

[14:31] <sena_kun> Zoffix, nod. Where should I stick in the test?

[14:31] <lizmat> El_Che: looking

[14:31] <El_Che> thx

[14:31] <nadim_> Zoffix: can you do me a favor and install the latest Data::Dump::Tree with Zef? I have an issue and I'd like to know if it happens just here.

[14:32] <Zoffix> Pass :P I don't want issues

[14:32] <sena_kun> nadim_, I can, I guess.

[14:32] <nadim_> thanks sena_kun

[14:33] <nadim_> Zoffix: chicken ;) the issue would have been that it does not instll that's all

[14:33] <lizmat> http://act.perlconference.org/tpc-2017-amsterdam/wiki?node=Post%20Conference%20Hackathon   # add your name if you're interested 

[14:35] <sena_kun> nadim_, Could not find Data::Dump::Tree::Horizontal at line 2 in:

[14:35] *** jonathon joined
[14:36] *** cantankerousking left
[14:37] <jonathon> Hi. Having an issue packaging `zef` for a system-wide install; i've been pointed to this being a bug (or similar) within rakudo but i don't know how to proceed. any help or pointers appreciated. (https://github.com/ugexe/zef/issues/190)

[14:38] <lizmat> El_Che: I don't see the 14:15:  I do see a plenary presentation missing at 13:50

[14:39] *** zakharyas left
[14:39] <lizmat> El_Che: maybe we should take this to #yapc on irc.perl.org ?

[14:39] *** nattefrost left
[14:40] *** skids joined
[14:40] <El_Che> I am just wonderting if they don't need volunteerd in the other afternoon spots or just a wiki typo

[14:40] *** nattefrost joined
[14:41] *** Khisanth left
[14:41] *** zakharyas joined
[14:42] <Zoffix> jonathon: well, would be helpful to get --ll-exception info to know where that error is happening, but it just happened that the 2017.07 has a commit that breaks that feature :|

[14:43] <nadim_> sena_kun: thank you, I hope I can find what silly thing I have done quickly. I may ask for you to test installing again if it ok with you

[14:43] <Zoffix> oh, but maybe there's a better way.

[14:43] <lizmat> El_Che: looks like a typo to me :-)

[14:43] <sena_kun> nadim_, no problem

[14:43] <Zoffix> jonathon: 1 sec, lemme try to a potential workaround around the --ll-exception breakage

[14:46] *** zakharyas left
[14:46] *** jonathon left
[14:46] <Zoffix> bah

[14:46] <Zoffix> But I found a workaround

[14:48] *** jonathon joined
[14:49] <Zoffix> jonathon: can you run this and pastebin the output? cd $(mktemp -d); mkdir Exceptions; echo 'class Exceptions::Foo { method process ($e) { say "$e.message() $e.backtrace.full()"; False } }' > Exceptions/Foo.pm6; RAKUDO_EXCEPTIONS_HANDLER=Foo perl6 -I. -MExceptions::Foo /usr/share/perl6/vendor/bin/zef

[14:49] *** nattefrost left
[14:49] <Zoffix> Bassically --ll-exception switch prints full backtrace, include core code, but it's broken. So the workaround is to make a custom exception handler that prints the full backtrace

[14:50] *** zakharyas joined
[14:51] <lizmat> --ll-exception broken again ?

[14:51] <Zoffix> lizmat: no, but jonathon is on 2017.07

[14:51] <lizmat> aaaahhh  *phew*  :-)

[14:53] <jonathon> Zoffix: https://hastebin.com/inijoqapib.rb

[14:54] *** Khisanth joined
[14:54] <Zoffix> \o/ my workaround worked \\o/

[14:54] <mspo> would you guys be open to replacing the perl6 shell script with a c program?

[14:54] <mspo> so it works on bsd/osx?

[14:56] <Zoffix> ugexe: you mentioned jonathon's issue is a Rakudo issue. Do you know what it is or was it just a hunch?

[14:56] <Zoffix> I see this check is using `.e`; should it be `.f` instead? https://github.com/rakudo/rakudo/blob/nom/src/core/CompUnit/Repository/Installation.pm#L424

[14:57] <Zoffix> I mean, it being `.f` would avoid jonathon's issue, but does that just move the goalpost to another issue?

[14:58] <Zoffix> mspo: maybe ask in #perl6-dev?

[14:59] <mspo> Zoffix: ETOOMANYCHANNELS

[14:59] <lizmat> .e would work for directories also, is that what you want ?

[15:00] *** nadim_ left
[15:00] <Zoffix> lizmat: no, the code expects a file (and .f does .e too). It's currently crashing because it's trying to treat a directory as a file, but I don't know if it's a bug that it's a directory in the first place or if the crash is preventing it from Doing The Right Thing

[15:01] *** nadim_ joined
[15:01] <Zoffix> I'll file an RT and .tell nine to take a look :)

[15:02] <jonathon> Do you need me to report/file anything anywhere?

[15:03] <tony-o> jonathon: are you jonathonf on github?

[15:03] <jonathon> yup

[15:03] <Zoffix> jonathon: imma do it right now and then I'll give you the ticket number so you could follow it

[15:04] <jonathon> Grand :)

[15:05] <tony-o> not trying to be rude towards you, but the documentation you quoted says how to make the custom location known.

[15:05] <Zoffix> jonathon: here: https://rt.perl.org/Ticket/Display.html?id=131831

[15:06] <Zoffix> .tell nine would you have any ideas on this ticket? https://rt.perl.org/Ticket/Display.html?id=131831

[15:06] <yoleaux> Zoffix: I'll pass your message to nine.

[15:06] <Zoffix> jonathon: and nine is the expert on that part of codebase, so they might know why this is happening and fix it or improve the error

[15:07] <jonathon> tony-o, if you're installing a module, yes. it's not explicit about installing `zef` itself to a custom location, and without knowing exactly how zef works it's not obvious it's the same thing. That may be down to a lack of experience with Perl6 but that's the reason for having a README

[15:08] <jonathon> Zoffix: thank you :) I suspect this is going to help a number of distro packagers too.

[15:09] <ugexe> you are still expecting "vendor" to point to your system vendor directory

[15:09] <tony-o> jonathon: zef relies on zef modules to run.  the CLI bin loads them, so if you're installing zef manually to a custom location, the CLI portion of zef needs the libraries

[15:09] <tony-o> and you'd need to tell perl6 (which is what is running 'zef') where to find them

[15:09] <jonathon> yes, i get that

[15:10] <jonathon> you're looking at it from the perspective of an expert, not from the perspective of someone who's new to the ecosystem

[15:10] <tony-o> well, perl6 can't automagically know the arbitrary location of where you installed its libs to

[15:10] <tony-o> someone who is new to the ecosystem is unlikely to be installing zef from source to a custom location

[15:10] <ugexe> in your package script you have `perl6 -Ilib "$srcdir/install-dist.pl" --to="$pkgdir/usr/share/perl6/vendor" --for=vendor --from=.` is not --for="inst#/usr/share/perl6/vendor"

[15:10] <jonathon> no, perl6 can't - but zef can. i even says "installed to $LOCATION"

[15:10] <tony-o> perl6 is what runs zef.

[15:11] *** vendethiel left
[15:11] <lizmat> three little words: http://act.perlconference.org/tpc-2017-amsterdam/talk/7149

[15:11] *** nicq20 joined
[15:11] <jonathon> tony-o, yes, i get that

[15:11] <tony-o> so, not really, it can't.  it only knows the location when you're installing it, after that it's a problem

[15:12] <Zoffix> "2.8 million lines of code" :o

[15:12] <tony-o> oh dear

[15:12] *** vendethiel joined
[15:13] <jonathon> ugexe: switching it to --for="inst#/usr/share/perl6/vendor", install-dist.pl throws an error (Type check failed in binding to parameter '$next-repo'; expected CompUnit::Repository but got Nil (Nil))

[15:14] *** quotable6 left
[15:14] <jonathon> going by the OpenSUSE approach, --for=vendor is correct (https://build.opensuse.org/package/view_file/devel:languages:perl6/perl6-Inline-Perl5/perl6-Inline-Perl5.spec?expand=1)

[15:14] *** eliasr joined
[15:17] *** wamba left
[15:18] *** vendethiel- joined
[15:18] *** vendethiel left
[15:20] <Zoffix> sena_kun │ Zoffix, nod. Where should I stick in the test?

[15:20] <Zoffix> sena_kun: here: https://github.com/rakudo/rakudo/blob/nom/t/04-nativecall/05-arrays.c

[15:20] <Zoffix> Don't look like NativeCall is part of Perl 6 spec

[15:21] <Zoffix> Oh, oops

[15:21] <Zoffix> sena_kun: I meant here: https://github.com/rakudo/rakudo/blob/nom/t/04-nativecall/05-arrays.t

[15:21] <sena_kun> Zoffix++

[15:21] <ugexe> well, it shouldn't be surprising that when you install to site, a location that perl6 specifically knows about, it works. and that when you install it to a custom location without also setting up the PERL6LIB (something a system packager should be doing, not zef) that its not going to work as expected

[15:21] <sena_kun> give me a minute...

[15:23] <ugexe> the problem is you are copy and pasting someone else's system build script without taking the time to understand how any of the pieces work, and instead of asking how they work you declare things are broken or wrong

[15:24] <jonathon> you mean like the possible bug that occurs when installing to vendor?

[15:24] <jonathon> you're also making a lot of assumptions, but i'm not here to discuss this. i left the issues with zef on the GitHub issue lists.

[15:25] *** jonathon left
[15:26] *** AlexDaniel left
[15:27] <sena_kun> https://github.com/rakudo/rakudo/pull/1127 may be merged and https://rt.perl.org/Public/Bug/Display.html?id=131830 may be closed. \o/

[15:27] <ugexe> right, which is why i'm not making assumptions

[15:27] *** AlexDaniel joined
[15:28] <Zoffix> Merged and closed. Thanks, sena_kun++

[15:36] *** AlexDaniel left
[15:37] <nicq20> Is $*IN still used to get piped input?

[15:38] <lizmat> m: .say for $*IN.lines

[15:38] <camelia> rakudo-moar c43ba0: OUTPUT: «»Wann treffen wir drei wieder zusamm?«␤   »Um die siebente Stund‘, am Brückendamm.«␤     »Am Mittelpfeiler.«␤         »Ich lösche die Flamm.«␤ »Ich mit«␤␤         »Ich komme vom Norden her.«␤        »Und ich vom Süden.«…»

[15:38] <lizmat> nicq20: I'd say, yes  :-)

[15:39] *** khw joined
[15:39] <nicq20> Ok, thanks! I must be doing something else wrong then.

[15:40] *** araraloren left
[15:43] <Zoffix> nicq20: why? What issue are you having?

[15:43] <tony-o> Zoffix++

[15:43] <Zoffix> ?

[15:44] <moritz> (general awesomeness) :-)

[15:44] <tony-o> haha, ^^

[15:44] <nicq20> I'm trying to pipe text from `tail -f` into a Supply, but I can't seem to get passed `.tap`.

[15:44] <nicq20> `tail -f test | perl6 -e '$*IN.Supply.tap: *.perl.say'`

[15:45] <nicq20> Not entirely sure why I had some code that would do this, and it no longer works.

[15:45] <Zoffix> nicq20: because it sits and waits until X number of bytes are read. 

[15:45] <Zoffix> tail -f test | perl6 -e '$*IN.Supply(:size<1>).tap: *.perl.say

[15:46] <nicq20> When was that setup? Or was it always like that?

[15:46] <Zoffix> probably always

[15:47] <Zoffix> Default size is 65536 characters (in char mode)

[15:47] <Zoffix> And the remaining stuff will get sent when the handle gets closed 

[15:47] <Zoffix> nicq20: .lines.Supply maybe?

[15:48] <Zoffix> so it feed line-by-line

[15:49] *** robertle joined
[15:49] <lizmat> I think there's also some interaction with -f there

[15:53] *** rindolf joined
[15:53] <perlpilot> What were Damian's three little words?  class, role, method ?

[15:54] <perlpilot> and .... I need to scroll to now

[15:57] * perlpilot wonders if their is a difference between `$*IN.lines.Supply` and `Supply.from-list($*IN.lines)`

[15:58] <Zoffix> s: ().Seq, 'Supply', \()

[15:58] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/7599e0c/src/core/Any.pm#L458

[15:58] <Geth> ¦ ecosystem: 53cfcfb607 | (brian d foy)++ (committed using GitHub Web editor) | META.list

[15:58] <Geth> ¦ ecosystem: Add PrettyDump

[15:58] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/53cfcfb607

[15:59] <Zoffix> s: ().Seq.list, 'Supply', \()

[15:59] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/7599e0c/src/core/List.pm#L912

[15:59] <Zoffix> perlpilot: nope

[16:00] <perlpilot> Zoffix: I wish I could remember how to use that bot  :)

[16:01] <Zoffix> It's very easy: you're just giving arguments to a Rakudo routine and there are two multies:  &Callable, Capture $args?   and    Mu $object, Str:D $method-name, Capture $args?

[16:01] <Zoffix> If you don't give args, you'll get location of proto for multies

[16:01] <Zoffix> Hm

[16:01] <Zoffix> mi6 generates META.info files instead of META6.json? https://github.com/briandfoy/perl6-PrettyDump/blob/master/META.info

[16:02] <Zoffix> m: say "Trying to submit a PR to that repo to rename that file is {<pointless ok>.pick}"

[16:02] <camelia> rakudo-moar c43ba0: OUTPUT: «Trying to submit a PR to that repo to rename that file is ok␤»

[16:02] <ugexe> I dont think it generates it, but will reuse it if it already exists

[16:03] <ugexe> btw, lets get rid fo META.info in 6.d :)

[16:03] <Zoffix> Lets :)

[16:04] <Geth> Swapped META.info → META6.json in 1 dists in https://github.com/perl6/ecosystem/commit/2318406976

[16:04] *** zakharyas left
[16:07] *** zakharyas joined
[16:10] <Zoffix> $ perl6 -MWWW -e '"https://raw.githubusercontent.com/perl6/ecosystem/master/META.list".&get.lines.grep(*.ends-with: "META.info").elems.say'

[16:10] <Zoffix> 85

[16:10] <Zoffix> Pretty good, consdering the Great META Rename started with like 45% of ecosystem using META.info

[16:12] *** zakharyas left
[16:15] <tony-o> did you do all of those PRs manually Zoffix ?

[16:17] <ugexe> nadim_: well, you have copypasta in the module names from your meta file (https://github.com/nkh/P6-Data-Dump-Tree/blob/release/META6.json#L24).

[16:17] <Zoffix> Semi-manually. I had a bash script opening firefox windows to edit the files and a GreaseMonkey script filling in the details into the form, so I was just clicking "submit PR" buttons basically

[16:19] <[Coke]> .

[16:19] <ugexe> nadim_: seems like Test::META could use something to catch that

[16:23] *** zakharyas joined
[16:27] *** nadim_ left
[16:28] <ugexe> I could tweak something to catch that during test phase though... last time I attempted it (1, 1.5 years ago?) there were issues with Build.pm workarounds preventing it, and those should be gone since 2017.06

[16:29] <ugexe> which all basically boils down to the difference between `perl6 -I. t/my-test.t` and `perl6 -Ilib t/my-test.t` (unless you have a META6.json in your lib folder... then these are the same :)

[16:29] *** dakkar left
[16:30] *** itaipu joined
[16:31] <ugexe> note you would have seen your failure with `perl6 -I. -e 'use Data::Dump::Horizontal;'` because that name is not in the META6.json that -I. points at. with -Ilib it works, because there is no META6.json to get the wrong name from - instead it guesses the file name from the module name (which exists)

[16:32] <Ulti> is there a reason you can't do parametric types of Pairs ?

[16:32] <Zoffix> Pair is a class, not a role..

[16:33] <Ulti> ok... is there a reason you can't do parametric types on Classes that are container like

[16:33] <Ulti> is there a role Pair does thats Pairy?

[16:34] <Zoffix> Oh, it does do Associative

[16:34] <Zoffix> Ulti: then I don't know why

[16:35] <Ulti> m: my Associative[Str, Callable] $thing = 'rofl' => sub { 'copters' };

[16:35] <camelia> rakudo-moar c43ba0: OUTPUT: «Type check failed in assignment to $thing; expected Associative[Str,Callable] but got Pair (:rofl(sub () { #`(Sub...)␤  in block <unit> at <tmp> line 1␤␤»

[16:35] <ugexe> m: role Foo[::T] { has $!bar = T; method bar { T } }; say Foo[Int].new.bar; # seems like technically it could be done though?

[16:35] <camelia> rakudo-moar c43ba0: OUTPUT: «(Int)␤»

[16:35] <Ulti> Im answering that reddit about 3 things that suck about P6 webdev

[16:35] <Ulti> one is definately Bailador using Pairs for its routing API

[16:35] <Ulti> but I cant think of a compile time way to prevent stupid stuff

[16:36] <Ulti> since where $x.value ~~ Callable is going to only be checked on dispatch right?

[16:36] *** nicq20 left
[16:36] <Zoffix> Not guranteed. It can be checked at compile time.

[16:36] <Ulti> get (Pair $x where $x.value ~~ Callable)

[16:36] <Ulti> Zoffix: with a sufficiently advanced compiler with static analysis...

[16:37] <Ulti> but not Rakudo right now?

[16:37] <tony-o> Ulti: check out http::server::router::yaml

[16:37] <Zoffix> Dunno, I just remember jnthn++ mentioning that you can't rely on `where` running at runtime (or having sideeffects)

[16:37] <Ulti> yeah I mean I treat it as if it was some static compile time constraint in my head

[16:38] <Ulti> wonder if subset would be the way to go here CallablePair with that where

[16:38] *** szabgab joined
[16:39] <Zoffix> m: Pair[Int,Int].new: 42, 42

[16:39] <camelia> rakudo-moar c43ba0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Pair cannot be parameterized␤at <tmp>:1␤------> 3Pair[Int,Int]7⏏5.new: 42, 42␤»

[16:39] <Ulti> tony-o: cool, but personally I'd prefer just meta package structure implying most of that a bit like Catalyst and even that is probably not the best either

[16:39] <Zoffix> m: Associative[Int,Int].new: 42, 42

[16:39] <camelia> rakudo-moar c43ba0: OUTPUT: «Default constructor for 'Associative[Int,Int]' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»

[16:40] *** troys joined
[16:40] *** itaipu left
[16:40] <szabgab> Zoffix: is there some magic I can add to the commits of modules.perl6.org that will restart the web application?

[16:40] <Zoffix> m: dd Hash[Int,Int].new: 42, 42

[16:40] <camelia> rakudo-moar c43ba0: OUTPUT: «(my Int %{Int} = 42 => 42)␤»

[16:40] <Zoffix> szabgab: that's done automatically after each db rebuild

[16:40] <Ulti> :3

[16:40] <szabgab> I don't need to rebuild the whole db but it seems I need a restart ...

[16:41] *** Cabanossi left
[16:41] <szabgab> oh so maybe the template has been already updated but the the process is still running?

[16:42] <szabgab> the (currently) should contain a number as well, and it does on my system.

[16:42] <szabgab> and it just a select statement, no changes in the db, not even content, is required

[16:42] <Zoffix> Ulti: yeah, I've no idea what makes things parametarizeable. Hash and Pair both do Associative and you can parameterize a HJash but not a Pair vOv

[16:43] <Zoffix> szabgab: I don't see any recent commits to it that didn't make it

[16:43] *** ChoHag joined
[16:43] <Zoffix> that didn't make it to the site

[16:43] *** Cabanossi joined
[16:43] <Zoffix> Oh

[16:43] <szabgab> the template was updated on the site, but it is using the previous code. AFAIK

[16:44] <Zoffix> yeah, it's just the bot seems ded

[16:44] <szabgab> anyway, Zoffix what was you wrote I need to add to the commit message to get a full rebuild of the db?  Can I add it to the README?

[16:44] <Geth> ¦ modules.perl6.org: 9afb961eb4 | (Gabor Szabo)++ | 3 files

[16:44] <Geth> ¦ modules.perl6.org: show number of modules using Travis and using Appveyor

[16:44] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/9afb961eb4

[16:45] <Zoffix> szabgab: `[REBUILD]` I already added it: https://github.com/perl6/modules.perl6.org/commit/a48f7213b50f83ea4f4599bf51595368bf25217d

[16:45] <szabgab> ok

[16:46] <szabgab> I see it now. Thanks

[16:46] <szabgab> Numbers appeared on the site. Great! thanks

[16:47] <Zoffix> szabgab: As for app restarting. It happens after each DB rebuild which is set to cron run on 20th and 40th minute of the hour and takes like ~1hr to run. You can view latest build log on https://modules.perl6.org/update.log

[16:47] <Zoffix> And yeah, a run just finished.

[16:47] <Zoffix> s/DB rebuild/DB update/;

[16:47] <Zoffix> :)

[16:49] <Zoffix> 20th and 50th minute actually

[16:51] <Zoffix> And takes 1hr.20m

[16:51] * Zoffix &

[16:52] *** szabgab left
[16:53] *** zakharyas left
[16:54] <tony-o> Ulti: it's like that in hiker too

[16:58] *** Aaronepower left
[17:01] *** mcmillhj left
[17:04] *** astj left
[17:10] <[Coke]> going to add something to the doc site so we can tag sample code as runnable with 'no strict;' so we can avoid pedagogically uses cases of predclaring variable names. any one care to bikeshed that that tag on "=code" would look like? We already have :skip-test, :lang<perl5>, and ok-test<WHAT> (last one allows use of .WHAT in code)

[17:11] <[Coke]> *useless cases 

[17:13] * Zoffix .o( :no-strict-ok ? :no-strict ? :it's-ok-to-not-predeclare-variables-in-this-code-snippet )

[17:14] *** mcmillhj joined
[17:15] *** astj joined
[17:19] <[Coke]> I'll go with :no-strict for now. Danke.

[17:20] <moritz> :preamble('no strict;')

[17:20] <moritz> then you can add other preambles if you want

[17:22] <ilmari> then you could do :preamble('my ($foo, $bar, $baz)') too

[17:28] *** setty1 joined
[17:28] *** itaipu joined
[17:30] <andreoss> m: my $f := lazy fail ; say(1);

[17:31] <camelia> rakudo-moar c43ba0: OUTPUT: «Failed␤  in block <unit> at <tmp> line 1␤␤»

[17:32] <andreoss> is there a way to lazily fail only when variable is being referenced? like Haskell's `undefined` 

[17:32] *** mr-fooba_ joined
[17:32] *** astj left
[17:32] <andreoss> without a closure

[17:32] *** astj joined
[17:32] *** mr-foobar left
[17:33] <ugexe> thats what fail is

[17:33] <ugexe> m: sub foo { fail "xxx" }; my $x = foo(); say 1; say $x

[17:33] <camelia> rakudo-moar c43ba0: OUTPUT: «1␤xxx␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:34] <andreoss> m: my $f = ->{ fail }() ; say(1);

[17:34] <camelia> rakudo-moar c43ba0: OUTPUT: «Failed␤  in block <unit> at <tmp> line 1␤␤»

[17:36] <andreoss> m: my $f = sub { fail }() ; say(1);

[17:36] <camelia> rakudo-moar c43ba0: OUTPUT: «1␤»

[17:36] <andreoss> why direct assignment doesn't work?

[17:36] *** astj left
[17:38] <moritz> andreoss: you have to be aware that fail() returns from the routine it's in (and returns a failure)

[17:38] <moritz> and dies if there is no outer routine

[17:39] <moritz> which why all of your examples except the last immediately threw the exception

[17:39] <moritz> after you take that into account, fail() is pretty much a lazy exception; it throws when you do something with it that isn't a careful inspection

[17:40] <Zoffix> It dies when it's sunk,.

[17:40] <Zoffix> Oh, nevermindm misread'

[17:40] <moritz> or if you call any number of methods, basically all exception .defined or .Bool

[17:41] <andreoss> m: constant \undefined = sub {fail} (); my $f = undefined ; say(1);

[17:41] <camelia> rakudo-moar c43ba0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3constant \undefined = sub {fail}7⏏5 (); my $f = undefined ; say(1);␤    expecting any of:␤        infix␤        in…»

[17:41] <andreoss> m: constant \undefined := sub {fail} (); my $f = undefined ; say(1);

[17:41] <camelia> rakudo-moar c43ba0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3constant \undefined := sub {fail}7⏏5 (); my $f = undefined ; say(1);␤    expecting any of:␤        infix␤        i…»

[17:41] <andreoss> m: constant \undefined := sub {fail}(); my $f = undefined ; say(1);

[17:41] <camelia> rakudo-moar c43ba0: OUTPUT: «1␤»

[17:43] <moritz> m: constant undefined = sub { fail }(); my $f = undefined; say 'alive';

[17:43] <camelia> rakudo-moar c43ba0: OUTPUT: «alive␤»

[17:43] <moritz> no need for binding or \ here

[17:44] <Zoffix> andreoss: note that it will become unexplosive the second you .Bool or .defined on it.

[17:45] <Zoffix> Also, constants get precompiled. Be careful using stuff that changes in modules

[17:45] <Zoffix> Lastly, instead of sub {fail}() you can just write Failure.new

[17:45] <Zoffix> huggable: Failure

[17:45] <huggable> Zoffix, Delayed exception: https://docs.perl6.org/type/Failure

[17:45] <Zoffix> ^ some docs on that type

[17:48] *** troys is now known as troys_

[17:49] *** Altreus joined
[17:50] <Altreus> Um hello. I finally decided to try p6 so now I'm here too

[17:50] <perlpilot> Altreus: welcome

[17:50] <Zoffix> Sweet. Welcome

[17:51] <Altreus> I'm mostly here because Text::CSV doesn't pass its tests but no one has noticed and I thought it might be me

[17:51] <El_Che> Altreus: you traitor :)

[17:51] <Altreus> But I'm having wireless issues so it's hard to paste stuff usefully

[17:52] <Altreus> Do we have a paste bot?

[17:52] <Zoffix> Altreus: weird. That module is our benching canary.

[17:52] <perlpilot> Altreus: gist works

[17:52] <Altreus> k

[17:52] <Zoffix> Altreus: yeah, the shadowpaste one

[17:52] <Altreus> I figured it would be me because I'm a total noob

[17:52] <Altreus> but

[17:52] <Altreus> 2 ticks

[17:52] *** st_elmo joined
[17:53] <Zoffix> Altreus: what are the test failures? Something about malformed UTF8?

[17:54] <Altreus> OK the wireless is terrible so I'll use 4g so i can actually communicate

[17:54] <Zoffix> :)

[17:54] <Altreus> I do have a lot of utf8 test failures

[17:54] <Altreus> Expected false, got (Bool)

[17:54] <Zoffix> maybe it's a known bug then, we're trying to hunt it down

[17:54] <Zoffix> huh

[17:55] <Zoffix> Altreus: what rakudo version you got?

[17:55] <Altreus> Also, invocant of method Bridge must be int not bool

[17:55] <Altreus> I'm paraphrasing due to phone

[17:55] <Altreus> I just installed 2017.07 last night

[17:56] <Zoffix> Altreus: report it :)

[17:56] <Altreus> What output is useful besides what zef gives?

[17:59] *** emeric joined
[17:59] <Altreus> perl6 -V ?

[18:01] <Zoffix> Altreus: no, just full output of test failures. I'm unsure how to make zef report them in full

[18:02] <Zoffix> buggable: eco Text::CSV

[18:02] <buggable> Zoffix, Text::CSV 'Handle CSV data. API based on Text::CSV_XS': https://github.com/Tux/CSV

[18:02] <Zoffix> gonna

[18:02] <Zoffix> gonna try the module myself

[18:02] <El_Che> module fails also on my computer

[18:02] *** rindolf left
[18:03] <Zoffix> ...maybe. I'm using a laptop to connec to  a windows box to putty to a linux box to ssh to my server to run weechat in scrteen :)

[18:03] <Altreus> Attempting to submit data...

[18:04] <Altreus> I would tether but I'm low on data 😭

[18:04] <Altreus> Ah, submitted

[18:04] <Altreus> El_Che: same issue as I just posted on gh?

[18:05] <El_Che> ah gist kills the formatting

[18:05] <Altreus> Try ```

[18:05] <El_Che> Altreus: yes, identical

[18:05] <Altreus> Not just me hooray

[18:05] <Altreus> I'm just the canary

[18:06] <El_Che> I am on 2017.06 on this machine

[18:06] <Altreus> Perl6's type system just changes the bugs you make \o/

[18:06] *** rindolf joined
[18:07] <Altreus> Meanwhile I'm going to process CSV with split

[18:08] <Altreus> I'm going to assume it's broken tests and skip them for now

[18:08] <ugexe> https://github.com/Tux/CSV/commit/06a450d811b7bd5e9b9cb714e2888f1816fbdd91 # last commit looks related ?

[18:09] <Zoffix> ooohh

[18:09] <Zoffix> Yeah that is it

[18:09] <Altreus> Hmm installing it again is reinstalling deps

[18:09] <Zoffix> Altreus: basically the issue is the module added a commit that works only on bleed rakudo

[18:10] <El_Che> We need CPAN

[18:10] <Altreus> Does zef keep nothing if the target failed, or is it installing to the wrong place?

[18:10] <Zoffix> lizmat: ^^ maybe that commit should be removed at least for now, since is default is broken on attributes on older rakudos

[18:10] <Zoffix> El_Che: we *have* CPAN

[18:10] <El_Che> Zoffix: there is have and kind-of-have

[18:10] <ugexe> its on cpan, the problem is the version uploaded was before the automatic source-url setter worked

[18:10] <Zoffix> Altreus: keeps nothing, unless --serial was using

[18:11] <Zoffix> *was used

[18:11] <Altreus> Ah, that's both pesky and not

[18:11] <El_Che> ugexe: does zef download cpan or github nowadays?

[18:11] <Zoffix> El_Che: what's kind-of-have?

[18:11] <ugexe> both

[18:11] <Altreus> El_Che: Mine came from gh

[18:11] <ugexe> for the last few years

[18:11] <Altreus> All of them

[18:11] <Zoffix> Altreus: because not every module's author is using cpan

[18:12] <Altreus> Uh

[18:12] <Altreus> I can't back up what I said ... I know some came from gh

[18:12] * Zoffix doesn't; too lazy

[18:12] <Altreus> I guess I don't know

[18:12] <El_Che> I mean with have: zef installs from cpan 

[18:12] *** leah2 left
[18:12] <El_Che> and not from github

[18:12] <ugexe> that doesn't mean it wasnt found on cpan - again the version on cpan has its source-url as a github url

[18:12] <Zoffix> Altreus: it's likely. It'll only use from cpan if cpan has a newer version

[18:12] <El_Che> except as a one off

[18:13] <Zoffix> El_Che: zef installs from cpan

[18:13] <Zoffix> El_Che: if people bother uploading

[18:13] <El_Che> Zoffix: it's not zef's fault

[18:13] <Zoffix> El_Che: so what we need isn't CPAN but people who care about CPAN to upload to it

[18:13] <Zoffix> El_Che: no, it's not. I was responding to your "we need CPAN" :P

[18:13] <Altreus> Wouldn't that install unreleased stuff all the time? :s

[18:14] <El_Che> Zoffix: people upload p5 code to cpan because it's the "only" way to get it installed 

[18:14] <El_Che> if there was a short cut, many won't bother

[18:14] <Zoffix> El_Che: yeah, and that's not what we want with Rakudo.

[18:14] <ugexe> dont depend on unreleased stuff

[18:14] <Altreus> I skipped tests and it seems OK

[18:15] <Zoffix> El_Che: you can disable p6ecosystem in zef and only get your stuff from CPAN

[18:15] <El_Che> I like writing go, but downloading random stuff from github makes me nervious

[18:15] <Zoffix> heh

[18:15] <El_Che> Zoffix: that's the thing, it shoudn't be a user choice

[18:15] <Zoffix> As opposed to downloading random stuff from CPABN?

[18:15] <Zoffix> El_Che: why not?

[18:15] <ugexe> you are not thinking about the problem very deeply

[18:15] <Altreus> Maybe i misunderstood what Zoffix said... Zef installs from gh if gh has a newer version than cpan?

[18:16] <ugexe> it doesnt matter where it comes from

[18:16] <Zoffix> Altreus: yes

[18:16] <Altreus> Isn't that always the case?

[18:16] <El_Che> ugexe: with CPAN I expect releases. With github I expect random commits on master

[18:16] <Altreus> GH would never be behind cpan

[18:16] <El_Che> huge difference

[18:16] <Zoffix> Altreus: "newer version" meaning newer version in META6.json

[18:16] <ugexe> github is not a p6c thing

[18:17] <Altreus> Ah so you update that to "release" it

[18:17] <El_Che> with CPAN I expects tests when released/uploaded

[18:17] <Zoffix> Altreus: oh. I see the confusion. It doesn't install from github, unless the GitHub source is listed in our p6ecosystem

[18:18] <Zoffix> Altreus: so if an author only upploads to CPAN, it'll always use CPAN versions.

[18:18] <Zoffix> We have two ecosystems. CPAN and GitHub-based. 

[18:18] <Zoffix> El_Che: why do you expect that?

[18:19] <Altreus> How does the ecosystem index gh things? Do you submit just the information about where it is?

[18:19] <Altreus> Wait

[18:19] <El_Che> Go gets away with murder because you need a breakage-free dependency chain only at compile time

[18:19] <Altreus> Is there a document that explains it all? :p

[18:19] <ugexe> you should be depending on :ver<...>, and github or cpan it doesnt matter

[18:19] <Altreus> No point retyping it if there is

[18:19] <El_Che> installing p6 modules kan be frustrating (again, not zef, but upstream breakage)

[18:19] <ugexe> if you dont depend on a specific version then its your own fault

[18:19] <El_Che> ugexe: true

[18:20] <Zoffix> Altreus: there's a README in this repo that also has the list (META.list) file and authors need to publish there to add it: 

[18:20] <Zoffix> https://github.com/perl6/ecosystem

[18:22] <Zoffix> Altreus: also two "Modules" guides here https://docs.perl6.org/language.html

[18:22] <Altreus> Cool

[18:22] <Altreus> Now I'm going to mix my languages :/

[18:23] <Zoffix> Join the club :) Yesterday I spent 5 minutes debugging Perl code because I typoed $data[-1]{last} as @data[-1]{last} and error was about undeclared $self :)

[18:23] <Zoffix> (in Rakudo you write $data[42] as @data[42])

[18:26] <ugexe> I put $<xxx>=(.*?) into a production perl5 code base (it passed peer review, and was the only line changed)

[18:27] <hobbs> Perl 6 sighting: https://www.johndcook.com/blog/2017/08/02/wolfram-alpha-finnegans-wake-and-quaternions/

[18:27] <hobbs> (in the comments)

[18:29] *** leah2 joined
[18:30] <Altreus> I'm going to have to use it in anger to recognise various constructs

[18:30] <Zoffix> neat

[18:30] <Altreus> But I'm already taking advantage of being able to use hyphens in identifiers

[18:30] <[Coke]> ... I already did the :no-strict, but haven't committed yet; I like :preamble, because then you can also do things like :preamble<sub foo {};>, because &foo isn't covered by no-strict.

[18:30] <Zoffix> Altreus: single quotes too :)

[18:31] <Altreus> My $john's-account-number

[18:31] <Zoffix> m: sub term:<anything-really:DDDD-/o\> { 42 }; say anything-really:DDDD-/o\

[18:31] <camelia> rakudo-moar c43ba0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in quote words; couldn't find final '>'␤        ␤at <tmp>:1␤------> 3o\> { 42 }; say anything-really:DDDD-/o\7⏏5<EOL>␤    expecting any of:␤        colon pair␤ …»

[18:32] <Zoffix> :(

[18:32] <Zoffix> Oh, I escaped it

[18:32] *** espadrine joined
[18:32] <Zoffix> m: sub term:<anything-really:DDDD-/o\-:)> { 42 }; say anything-really:DDDD-/o\-:)

[18:32] <camelia> rakudo-moar c43ba0: OUTPUT: «42␤»

[18:35] <Altreus> Better whip out my pocket book again

[18:36] *** AlexDaniel joined
[18:42] *** mr-fooba_ left
[18:44] *** mr-foobar joined
[18:47] *** ufobat joined
[18:49] *** kyclark joined
[18:49] *** kyclark left
[18:49] <ufobat> is it me doing something wrong with %*RESOURCES or could it be the case that you can't look for the keys in the hash? like in %*RESOURCES<foo>{$bar}

[18:49] <ufobat> i've got this error from moarvm "Cannot look up attributes in a Distribution::Resource type object"

[18:53] *** Kyo91_ left
[18:54] <ufobat> i mean %?RESOURCES sorry

[18:56] <Zoffix> m: $?RESOURCES<fsdfsdfsdfsd>

[18:56] <camelia> rakudo-moar c43ba0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$?RESOURCES' is not declared␤at <tmp>:1␤------> 3<BOL>7⏏5$?RESOURCES<fsdfsdfsdfsd>␤»

[18:56] <Zoffix> m: %?RESOURCES<fsdfsdfsdfsd>

[18:56] <camelia> rakudo-moar c43ba0: ( no output )

[18:56] <Zoffix> m: %?RESOURCES<fsdfsdfsdfsd><bar>.say

[18:57] <camelia> rakudo-moar c43ba0: OUTPUT: «Nil␤»

[18:57] <Zoffix> ufobat: what's your rakudo version?

[18:57] <ufobat> 2017.07 

[18:57] <lizmat> Zoffix: CSV commit reverted

[18:57] *** nadim_ joined
[18:58] <Zoffix> Altreus: ^^ your test failures should now be gone

[18:58] <ufobat> how does %?RESOURCES work, or does it even work, if you dont have the module installed yet? then the hash is probably always empty?

[18:59] <Zoffix> Do you have META6.json?

[18:59] <nadim_> ugex: Test::META was removed 2 days ago from my test becaus it failed with an error, that I reported to the author :(

[18:59] <ufobat> yes

[18:59] <Zoffix> Then, dunno.

[19:00] <ufobat> META6.json in the cwd or in a include path?

[19:00] <Zoffix> ufobat: no idea :/

[19:01] <nadim_> ugexe: what copypasta at line 24? I think I am tired and just can't see the error!

[19:01] <Zoffix> Does it work if you have it in current dir? 

[19:01] *** TEttinger joined
[19:01] <ufobat> in my resources directory there is a file named error.template, and a directory that is named skeleton

[19:01] <ufobat> the file itself works

[19:02] <ufobat>     say %?RESOURCES<error.template>.IO;

[19:02] <ufobat>     say %?RESOURCES<error.template>.IO.slurp;

[19:02] <ufobat> but this line causes the error:     my %skeleton = %?RESOURCES<skeleton>{$type};

[19:02] <rightfold> Is there P6CRE?

[19:03] <Zoffix> ufobat: oh ok, but what is $type then? something inside that directory?

[19:03] <ufobat> i did install the module, btw

[19:03] <Zoffix> rightfold: no

[19:03] <ufobat> let me check to be sure, but i would say yes.

[19:03] <Zoffix> m: %?RESOURCES.keys.say

[19:03] <camelia> rakudo-moar c43ba0: OUTPUT: «()␤»

[19:04] <Zoffix> ufobat: what does that give you ^

[19:05] <ufobat> therefor i need to reinstall it in my docker container, needs a while ;(

[19:05] <rightfold> Zoffix: 😭

[19:05] <Zoffix> ufobat: also, do you have resources listed in your meta file? That's what I get from the docs

[19:05] <[Coke]> (:preamble now working locally)

[19:05] <ufobat> yeah i have

[19:06] <[Coke]> also testing all pod6 files for examples now, no file-level skips

[19:06] <Zoffix> ufobat: shouldn't it then be <skeleton/whatever> instead of <skeleton>{$type}?

[19:06] <ufobat> http://design.perl6.org/S22.html#%25%3FRESOURCES

[19:06] <ufobat> the exaples there access it like this:   %?RESOURCES<images><fido.png>.absolute

[19:06] <Zoffix> Man, now I get what users are saying about having trouble finding stuff. The scant few docs don't say anything

[19:07] <ufobat>  "resource" : [

[19:07] <ufobat>     "images/fido.png",

[19:07] <Zoffix> ufobat: that's the design docs

[19:07] <ufobat> i didnt find anything usefl in the docuentation

[19:07] <Zoffix> Yeah, I wish core devs ensured the docs are written/up to date when they make changes to stuff.

[19:08] <Zoffix> or make new stuff

[19:08] *** mcmillhj left
[19:09] <Zoffix> ufobat: but dump %?RESOURCES.keys, I'd expect that to give some answers

[19:10] <ufobat> will do :)

[19:10] <ufobat> brb

[19:10] <ufobat> thank you so far for the help zoffix :)

[19:11] *** ufobat left
[19:12] *** wamba joined
[19:17] *** mcmillhj joined
[19:19] <jdv79> i have an app that kills my box. is there anything but the rakudo profiler that i can use to easily pinpoint the issues?

[19:19] <jdv79> or is printing times all over the place needed?

[19:19] <jdv79> because the profiler borks the app

[19:22] *** mcmillhj left
[19:22] *** Kyo91_ joined
[19:22] <Zoffix> is that something strace or whatever can help with?

[19:23] <Zoffix> One of those tools people tell me to use all the time :)

[19:23] <jdv79> i guess.  just wanted to know if there was other rakudo specific things

[19:23] <timotimo> hmm. i'm stumped by this design problem: things like NativeHelpers::Blob use the cc command that moarvm was built with

[19:24] <timotimo> but in the fedora package that's a compiler that's not necessarily available to the normal user

[19:24] <timotimo> i.e. "/usr/lib/rpm/redhat/redhat-hardened-cc1"

[19:29] *** ufobat joined
[19:29] <Geth> ¦ doc: 6646cc9c53 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/testing.pod6

[19:29] <Geth> ¦ doc: Document behaviour of TODOed subtest

[19:29] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6646cc9c53

[19:31] *** Kyo91 joined
[19:33] *** darutoko left
[19:33] *** mcmillhj joined
[19:34] *** Kyo91_ left
[19:43] *** |oLa| joined
[20:05] *** kyclark joined
[20:08] * Zoffix contemplates jumping in on the Rakudo Books bandwagon

[20:09] <El_Che> Zoffix: the reddit comments?

[20:10] <El_Che> Going for the "Rust book" Rakudo equivalent?

[20:10] <Zoffix> Three books: "The White Book", "The Grey Book", and "The Black Book" convering progressively more arcane and complex features of the language, not exhaustive, but well enough to let the reader be comfortable learning the rest on their own from, say type reference. Digital version free; the equivalent of Rust's "the book"

[20:11] <Zoffix> El_Che: yup. I mulled over "The Black Book" for a while but yesterday's reddit conversation opened my eyes for the need of tje other two as well

[20:11] <El_Che> p6 is huge

[20:11] <Zoffix> yup

[20:11] <El_Che> so your progression approach is nice

[20:12] <El_Che> although the White one is the most important

[20:12] <El_Che> (I haven't read moritz one yet, and the oreilly one is still on the works)

[20:13] <moritz> Zoffix: for a while I pondered a "Perl 6 Complete" series, with one volume for each group of features (like regexes, routines and signatures, OO and MOP, ...)

[20:14] <moritz> so basically a "The Black Book" series :-)

[20:14] <Zoffix> :)

[20:14] <moritz> but I don't think I'll write more than the regex one

[20:14] <moritz> I find MOP stuff really fascinating, but I don't see a big audience

[20:15] <El_Che> some should make a joke comparing "The Go Programming Language" or "The Rust Book" with the Wheel of Time Perl 6 series

[20:15] <moritz> and subroutines and multis and stuff are immensely useful when writing actual Perl 6 code, but I wouldn't know how to convince people to actually buy that

[20:17] <moritz> and I'm too greedy to invest 500+ hours in a book for even more marginal financial returns

[20:17] <Zoffix> :)

[20:18] *** nhywyll left
[20:19] <moritz> (writing a book is typically *not* profitable, unless you can really streamline it, and/or have a huge audience, and/or you happen to hit the jackpot once)

[20:20] <Zoffix> Yeah.

[20:21] <moritz> if Perl 6 suddenly gets an exponential grows curve like node.js or docker had, maybe I can afford a family vacation from the books :-)

[20:23] <mspo> yeah I used to work with one of the author of "high performance mysql" who gave me the skinny on his "profits"

[20:23] <mspo> they were quite low

[20:23] <mspo> good book, though :)

[20:23] <Zoffix> I still get profits from a book I wrote 8 years ago.

[20:23] <Zoffix> .

[20:23] <mspo> you can probably get more money via speaking fees and reputation building

[20:24] <mspo> might be better to use the "learn you some erlang" model

[20:24] <Zoffix> ... about $8/year and the tax people often waste a ton of my time trying to process the form for that profit :)

[20:24] <moritz> mspo: well, writing a book can be part of reputation building.

[20:24] <mspo> moritz: yeah that's what I mean

[20:25] <mspo> moritz: the long term "profit" from the book has a lot to do with marketing of the author himself

[20:25] <moritz> recently I charged about 2k€ for a two-day Perl 6 training I gave. I think I might have underchaged

[20:25] <mspo> any travel involved?

[20:25] <El_Che> moritz: I am impressed. I didn't know there was a market for P6 training yet

[20:26] <moritz> mspo: a bit, yes (400km or so)

[20:27] <moritz> El_Che: it was 4 people at a research institute that did Perl 5, and were interested in Perl 6

[20:27] <mspo> moritz: 2k for local seems pretty good.  I'd add travel expenses, obviously

[20:27] <moritz> mspo: right

[20:27] <moritz> (and I did)

[20:28] <mspo> seems like a fair rate to me :)

[20:28] *** https_GK1wmSU joined
[20:28] <mspo> it's what I would expect my company to pay someone, roughly, at least

[20:28] <moritz> on the one hand, it totally is, and it was real fun

[20:28] <mspo> if I found out we were paying $10k for a two day class I'd expect a hell of a lot

[20:29] <moritz> on the other hand I needed to spend two vacation days, was away 2.5 days and had another ~2 working days of preparations

[20:29] <moritz> and then taxes eat half of it

[20:30] <moritz> I don't regret it at all, but I can understand why people charge more if they do it professionally

[20:30] <mspo> yeah but you can re-use the prep

[20:30] <mspo> get one of those going every money and you've got a pretty nice side biz :)

[20:30] *** https_GK1wmSU left
[20:31] <moritz> aye

[20:31] <moritz> but when you can do it regularly, competition will spring up

[20:31] <moritz> no free lunch :-)

[20:31] <mspo> turn it into an online course and make passive $$$

[20:31] <mspo> probably similar $$$ to writing a tech book ;)

[20:32] *** Aaronepower joined
[20:32] *** nhywyll joined
[20:32] <moritz> no, much better

[20:32] <moritz> people are willing to pay between 30 and 300 USD or so for a video course

[20:33] <moritz> getting somebody to pay more tha $50 for a tech book is an uphill battle

[20:33] <moritz> even if much more work went into it

[20:35] <ufobat> Zoffix, yay the output of     %?RESOURCES.keys.say;

[20:35] <ufobat>     say %?RESOURCES<error.template>.IO; is:

[20:35] <ufobat>     # (0)

[20:35] <ufobat>     # "/srv/resources/error.template".IO

[20:35] <ufobat> the # is from use Test

[20:36] <andreoss> macros won't be worked upon until 007 is done?

[20:37] <lizmat> andreoss: I'm afraid so, unless another masak stands up  :-)

[20:40] <jnthn> 007 is to work out how macros will be done, so work on it *is* work on macros :)

[20:40] *** wamba left
[20:40] <ufobat> so my personal conclusion %?RESOURCES does not behave as i expect it from a hash :/

[20:43] *** troys_ is now known as troys

[20:44] *** wamba joined
[20:45] <Geth> ¦ ecosystem: mcsnolte++ created pull request #356: Add Text-UpsideDown to ecosystem

[20:45] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/356

[20:46] <Geth> ¦ ecosystem: b1c6c79745 | (Steve Nolte)++ (committed using GitHub Web editor) | META.list

[20:46] <Geth> ¦ ecosystem: Add Text-UpsideDown to ecosystem

[20:46] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/b1c6c79745

[20:46] <Geth> ¦ ecosystem: e0f136e913 | lizmat++ (committed using GitHub Web editor) | META.list

[20:46] <Geth> ¦ ecosystem: Merge pull request #356 from mcsnolte/patch-1

[20:46] <Geth> ¦ ecosystem: 

[20:46] <Geth> ¦ ecosystem: Add Text-UpsideDown to ecosystem

[20:46] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/e0f136e913

[20:46] *** emeric left
[20:47] <Zoffix>  ufobat so what's the output of %?RESOURCES.keys.say ?

[20:48] <ufobat> (0)

[20:50] <Zoffix> m: %?RESOURCES.^name.say

[20:50] <camelia> rakudo-moar c43ba0: OUTPUT: «Nil␤»

[20:50] <Zoffix> mkay

[20:50] <ufobat> thats pretty frustrating :(

[20:51] *** Kyo91 left
[20:51] <Zoffix> ufobat: can you pastebin your META file?

[20:52] <ufobat> of course

[20:53] <ufobat> https://pastebin.com/q259Huz1

[20:54] *** andreoss left
[20:56] <Zoffix> yeah, %?RESOURCES is not a Hash, it's Distribution::Resources

[20:56] *** mcmillhj left
[20:56] * Zoffix reads the sauce

[20:56] *** mcmillhj joined
[20:57] <zengargoyle> m: my subset ID of Str where * eq any('email'|'accountid'); dd Hash[Any:D,ID].new: 'accountid', 123;

[20:57] <camelia> rakudo-moar c43ba0: OUTPUT: «(my Any:D %{ID} = :accountid(123))␤»

[20:58] <zengargoyle> m: my subset ID of Str where * eq any('email'|'accountid'); dd Hash[Any:D,ID].new: 'email', 'foo';

[20:58] <camelia> rakudo-moar c43ba0: OUTPUT: «(my Any:D %{ID} = :email("foo"))␤»

[20:58] <zengargoyle> m: my subset ID of Str where * eq any('email'|'accountid'); dd Hash[Any:D,ID].new: 'emailx', 'foo';

[20:58] <camelia> rakudo-moar c43ba0: OUTPUT: «Type check failed in binding to parameter 'key'; expected ID but got Str ("emailx")␤  in block <unit> at <tmp> line 1␤␤»

[20:59] <Zoffix> ufobat: %?RESOURCES<skeleton/default/bin/app.pl6>

[20:59] <ufobat> maybe you can enlighten me if it's possible to play around with %?RESOURCES without installing the module first?

[21:00] <Zoffix> ufobat: basically the key to %?RESOURCES is the key you used in your metafile. It includes the entire path, instead of your original way of using a new nested key for each path

[21:00] *** andreoss joined
[21:00] <ufobat> but i need to know the keys i cant read them from %?RESOURCES

[21:00] <Zoffix> ufobat: that's what I did now. I didn't install the module. https://gist.github.com/zoffixznet/3cf736df372c53d66dd52e895ba9051d

[21:01] <ufobat> so it's impossible to read out the resources dynamically, e.g if i have a skeleton/something/<some files> and skeleton/somethingelse/<...>

[21:02] *** mcmillhj left
[21:02] <zengargoyle> m: my subset ID of Str where * eq any('email'|'accountid'); my %h := Hash[Any:D,ID].new: 'accountid', 123; dd %h;

[21:02] <camelia> rakudo-moar c43ba0: OUTPUT: «(my Any:D %{ID} = :accountid(123))␤»

[21:02] <Zoffix> zengargoyle: | already means "any"

[21:02] <zengargoyle> m: my subset ID of Str where * eq 'email'|'accountid'; my %h := Hash[Any:D,ID].new: 'accountid', 123; dd %h;

[21:02] <camelia> rakudo-moar c43ba0: OUTPUT: «(my Any:D %{ID} = :accountid(123))␤»

[21:04] <zengargoyle> cool, it was golfing from previous attempts.

[21:04] <Zoffix> ufobat: nah, not impossible

[21:05] <ufobat> but it would be nice :)

[21:05] <ufobat> anyway. thanks a lot for your help ZofBot 

[21:05] <ufobat> Zoffix, 

[21:07] <zengargoyle> would there be any way to constrain a certain value type to go with a certain key type?  i believe original question was subset ID of Hash where keys were only email/accountid.

[21:07] <zengargoyle> it would be really cool to subset Hash where 'email' => Str:D or 'accountid' => Int only...

[21:07] <zengargoyle> but that's prolly better as a Class anyways....

[21:08] *** skids left
[21:10] <Zoffix> ufobat: OK, don't really see a nice way that doesn't poke too much at the guts.

[21:10] <Zoffix> I invite people who designed this stuff to document it in full.

[21:11] *** Cabanossi left
[21:13] <ufobat> hash like or not, but it would be at least great if you could get the list of available resources. otherwise you need to "know" that name in the META6.json and in the source :(

[21:13] *** Cabanossi joined
[21:14] <Geth> ¦ whateverable/master: 4 commits pushed by (Aleks-Daniel Jakimenko-Aleksejev)++

[21:14] <Geth> ¦ whateverable/master: 1166167de8 | Fix quotable tests

[21:14] <Geth> ¦ whateverable/master: 43d7df24c3 | Reduce the delay for “no response” tests

[21:14] <Geth> ¦ whateverable/master: 787680c5d1 | Minimal tests for ‘m:’ messages

[21:14] <Geth> ¦ whateverable/master: c3e8329b6d | No more commaed commands

[21:14] <Geth> ¦ whateverable/master: review: https://github.com/perl6/whateverable/compare/f537ca14be...c3e8329b6d

[21:15] <Zoffix> There's %!meta in CUR::FS that has that info, but it's a private attribute

[21:15] *** ryu0 left
[21:21] *** kyclark left
[21:22] *** avalenn left
[21:22] *** konsolebox_ joined
[21:24] *** nadim_ left
[21:25] *** konsolebox left
[21:28] *** konsolebox_ is now known as konsolebox

[21:30] *** ufobat left
[21:38] *** kyclark joined
[21:41] <Geth> ¦ whateverable: 24b0b2ebd5 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[21:41] <Geth> ¦ whateverable: Don't get excited about windows paths

[21:41] <Geth> ¦ whateverable: 

[21:41] <Geth> ¦ whateverable: Resolves issue #196

[21:41] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/24b0b2ebd5

[21:41] *** espadrine left
[21:49] *** ryu0 joined
[21:50] *** profan left
[21:52] *** troys is now known as troys_

[21:52] <Geth> ¦ whateverable: 754efdfe89 | (Aleks-Daniel Jakimenko-Aleksejev)++ | t/unicodable.t

[21:52] <Geth> ¦ whateverable: Unicodable no longer hates parens

[21:52] <Geth> ¦ whateverable: 

[21:52] <Geth> ¦ whateverable: Tests for issue #142.

[21:52] <Geth> ¦ whateverable: 

[21:52] <Geth> ¦ whateverable: Arguably the output is less than awesome but so is life.

[21:52] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/754efdfe89

[21:58] *** mcmillhj joined
[21:58] *** kyclark left
[22:03] *** mcmillhj left
[22:03] *** khw left
[22:05] *** profan joined
[22:10] *** profan left
[22:10] *** mcmillhj joined
[22:11] *** profan joined
[22:11] *** https_GK1wmSU joined
[22:14] *** https_GK1wmSU left
[22:16] *** mcmillhj left
[22:19] <ugexe> you could just try

[22:19] <ugexe> perl6 -I. -e 'say %?RESOURCES<blah.txt>'

[22:19] <ugexe> but yes, it works

[22:22] *** nhywyll left
[22:23] *** mcmillhj joined
[22:24] *** jsimonet left
[22:24] *** jsimonet joined
[22:24] *** markmont left
[22:25] *** setty1 left
[22:26] *** itaipu left
[22:28] *** mcmillhj left
[22:30] <ugexe> %?RESOURCES is not intended to be used for a plugin system where you can add things to later dynamically look up and load - for that use a CompUnit::Repository

[22:30] <Zoffix> ugexe: how?

[22:30] <Zoffix> How to see what `resources` are available?

[22:30] <Zoffix> If for no other reason than to not repeat the values in two places in code, risking a typo

[22:31] <ugexe> why would you not repeat the value in the code? the purpose here is so you can refer to your file after it gets renamed to some hash

[22:32] <ugexe> so you use %?RESOURCE{"my-file-original-name.txt"} instead of "my-file-original-name.txt".IO

[22:32] <Zoffix> I want to just load the data, I don't care about names.

[22:32] <Zoffix> Why would I want to repeat the value

[22:33] *** st_elmo left
[22:33] <ugexe> so do %?RESOURCE{"whatever"}.slurp

[22:33] <Zoffix> I can access the values if I type out the names. The system knows the available values. Yet, there's no way to obtain the available values.

[22:33] <Zoffix> ugexe: what exactly is "whatever" in that context?

[22:33] <ugexe> again, %?RESOURCES is not a generic file storage

[22:33] <Zoffix> Says who?

[22:34] <Zoffix> We have a real user trying to solve Problem X. Your response is "don't solve the problem"

[22:35] <ugexe> ok

[22:35] *** mcmillhj joined
[22:36] <Zoffix> Can you access distribution's META file from userland?

[22:36] <Zoffix> or data in it, rather

[22:38] <ugexe> m: say $*REPO.need( CompUnit::DependencySpecification.new( :short-name<Test> ) ).distribution.meta

[22:38] <camelia> rakudo-moar e86bdf: OUTPUT: «{auth => perl, files => {}, name => CORE, provides => {CompUnit::Repository::Staging => {lib/CompUnit/Repository/Staging.pm => {cver => 2017.07-123-ge86bdfca4, file => C57EBB9F7A3922A4DA48EE8FCF34A4DC55942942, time => 1492446520.0385}}, NativeCall => {li…»

[22:38] *** cpage_ left
[22:39] *** rindolf left
[22:40] *** mcmillhj left
[22:40] <Zoffix> Thanks

[22:41] <ugexe> m: say $*REPO.need( CompUnit::DependencySpecification.new( :short-name<Test> ) ).distribution.content("lib/Test.pm6").slurp

[22:41] <camelia> rakudo-moar e86bdf: OUTPUT: «use MONKEY-GUTS;          # Allow NQP ops.␤␤unit module Test;␤# Copyright (C) 2007 - 2017 The Perl Foundation.␤␤# settable from outside␤my int $perl6_test_times = ?%*ENV<PERL6_TEST_TIMES>;␤my int $die_on_fail      = ?%*ENV<PERL6_TEST_DIE_ON…»

[22:51] <Zoffix> "Legacy Distribution object used in code expecting an object consuming the Distribution role"

[22:51] <Zoffix> When I swap `<Test>` to `<WWW>`

[22:52] *** mcmillhj joined
[22:53] <ugexe> well I know Test is installed to a CURI

[22:53] <ugexe> and that it'll be found first by need

[22:53] *** markmont joined
[22:54] <ugexe> you might be loading from CURFS if you are using -I. or -Ilib

[22:56] <Zoffix> .tell ufobat some tips for your resources issue: https://irclog.perlgeek.de/perl6/2017-08-02#i_14960004

[22:56] <yoleaux> Zoffix: I'll pass your message to ufobat.

[22:57] *** mcmillhj left
[22:57] <zengargoyle> is whatever that log thing was all fixed now?

[22:58] <Zoffix> zengargoyle: it was changed to be differently broken, but still broken

[22:58] <Zoffix> «»‘’«‘’»…∞””∞…∞…−””×÷τπ｢｣

[22:58] <Zoffix> Oh, I stand corrected. Yes, fixed now.

[22:59] <zengargoyle> ah, i had that sparkline usage pattern thing but put on hold because someting was not right ATM...  

[23:03] *** cpage_ joined
[23:08] *** mcmillhj joined
[23:12] *** pilne joined
[23:12] *** mcmillhj left
[23:13] <Geth> ¦ doc: dd934a1902 | (Will "Coke" Coleda)++ | 2 files

[23:13] <Geth> ¦ doc: Allow example code to have a preamble.

[23:13] <Geth> ¦ doc: 

[23:13] <Geth> ¦ doc: Allows us to specify code before the user-visible code

[23:13] <Geth> ¦ doc: to allow for correct compilation without cluttering

[23:13] <Geth> ¦ doc: examples.

[23:13] <Geth> ¦ doc: 

[23:13] <Geth> ¦ doc: Fixes #1432

[23:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/dd934a1902

[23:18] *** sena_kun left
[23:19] *** bwisti joined
[23:20] *** profan left
[23:22] <Geth> ¦ doc: 13e2f9f588 | (Will "Coke" Coleda)++ | 7 files

[23:22] <Geth> ¦ doc: Run all example files when testing.

[23:22] <Geth> ¦ doc: 

[23:22] <Geth> ¦ doc: Fixes #1387

[23:22] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/13e2f9f588

[23:23] *** Geth left
[23:23] *** Geth joined
[23:24] *** mcmillhj joined
[23:25] *** http_GK1wmSU joined
[23:26] *** http_GK1wmSU left
[23:28] *** mcmillhj left
[23:30] *** profden joined
[23:34] *** mr-foobar left
[23:38] *** mr-foobar joined
[23:40] *** mcmillhj joined
[23:43] *** Cabanossi left
[23:43] <profden> Is there a shorter way to implement sha-256 than how it is here: https://rosettacode.org/wiki/SHA-256#Perl_6

[23:43] <profden> I'd think there would be a much more concise way

[23:44] *** Cabanossi joined
[23:44] *** mcmillhj left
[23:46] *** lichtkind_ joined
[23:47] <lichtkind_> has perl 6 its perldoc viewer?

[23:48] *** troys_ is now known as troys

[23:52] <zengargoyle> lichtkind_: perl6 --doc ./lib/Module.pm6 -- shows POD....

[23:53] *** mcmillhj joined
[23:53] <lichtkind_> thank you very much but i take it as no

[23:53] <zengargoyle> and there's p6doc a little more like perldoc

[23:53] <lichtkind_> since ther eseems to be no cli version of docs.perl6.org

[23:53] <lichtkind_> ah thanks

[23:53] <lichtkind_> i will look into that

[23:54] <zengargoyle> p6doc is basically the docs.perl6.org thing.... yeah, sometimes it is a bit hard/broken, but mostly helps a bit.

[23:59] *** http_GK1wmSU joined
