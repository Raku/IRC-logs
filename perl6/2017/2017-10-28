[00:01] *** margeas left
[00:01] *** ryn1x left
[00:02] <HoboWithAShotgun> hwg: https://github.com/holli-holzer/perl6-Unit-SI

[00:03] <HoboWithAShotgun> i moved the offending test to the top of the only test file

[00:04] * Zoffix is getting ---INIT___ a bunch of times; then "This type (Submethod) does not support positional operations"

[00:05] <Zoffix> HoboWithAShotgun: what rakudo version are you on?

[00:06] <HoboWithAShotgun> This is Rakudo version 2017.08-91-g9785356 built on MoarVM version 2017.08.1-128-gde6dced

[00:06] <HoboWithAShotgun> homebrewn

[00:07] <Zoffix> Yeah, runs on 2017.08

[00:07] <Zoffix> Looks like some bug was introed afterwards :o

[00:07] *** ryn1x joined
[00:07] <Zoffix> Between 2017.08 and 2017.09

[00:08] <HoboWithAShotgun> i seem to have a talent to find these :-D

[00:09] <Zoffix> .tell AlexDaniel if bisections and regressions are your thing, seems something got broken between 2017.08 and 2017.09. If you run the t/01-* test, in 2017.08 it shows some output, but on 2017.09 it crashes with "

[00:09] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[00:09] <Zoffix> grr

[00:09] <AlexDaniel> .

[00:09] <yoleaux> 00:09Z <Zoffix> AlexDaniel: if bisections and regressions are your thing, seems something got broken between 2017.08 and 2017.09. If you run the t/01-* test, in 2017.08 it shows some output, but on 2017.09 it crashes with "

[00:09] <Zoffix> AlexDaniel "This type (Submethod) does not support positional operations": https://github.com/zoffixznet/perl6-Unit-SI

[00:09] <AlexDaniel> let's see…

[00:09] <Zoffix> Line points to definition of this sub: sub postfix:<V> ($value) returns Unit::SI is export {

[00:10] <Zoffix>   return $value does( Unit::SI[ %UNITS<volt><signature> ] );

[00:10] <Zoffix> };

[00:14] <Zoffix> HoboWithAShotgun: "but even if that is wrong, it doesnt explain why i see the same value for $a and $b"    but you're calling callwith with same args (and could use `callsame`) aren't you?

[00:14] <Zoffix> Why is it expected for them to change?

[00:15] *** rindolf left
[00:15] <HoboWithAShotgun> yes, but at least for the first invocation. i mean $a is supposed to be the LHS and $b to be the RHS of the infix

[00:17] <Zoffix> oh

[00:17] <Zoffix> If I do `my $a = 12V; my $b = 12A; say "== $a, $b";` in test file I get both as 12A 12A

[00:18] *** kyan joined
[00:19] <Zoffix> And there's no volt method in Units::SI

[00:19] <Zoffix> AlexDaniel: looks like the regression likely just changed the error. ^ the "volt" thing is in the same method that errors out on more recent rakudos

[00:20] <Zoffix> oh wait... maybe it don't gotta have methods

[00:20] <AlexDaniel> how long does it take to run that test file…

[00:20] <Zoffix> right, never mind

[00:21] <AlexDaniel> doesn't make it in 10 seconds here :)

[00:21] <Zoffix> AlexDaniel: ages. 11.8s to precomp; 0.6 afterwards

[00:22] <HoboWithAShotgun> compiling all the operators takes a while

[00:23] <HoboWithAShotgun> for whyever

[00:23] <Zoffix> m: multi sub infix:<==> (Int, Int) is default {say "here"; nextsame }; multi sub infix:<==>  (Int, Int) { say "there" };  say 42 == 42

[00:23] <camelia> rakudo-moar 4fca94743: OUTPUT: «here␤here␤there␤True␤»

[00:23] <Zoffix> m: multi sub infix:<==> (Int, Int) is default {say "here"; nextsame }; say 42 == 42

[00:23] <camelia> rakudo-moar 4fca94743: OUTPUT: «here␤here␤True␤»

[00:23] <Zoffix> m: multi sub infix:<zz> (Int, Int) is default {say "here"; nextsame }; multi sub infix:<zz>  (Int, Int) { say "there" };  say 42 zz 42

[00:23] <camelia> rakudo-moar 4fca94743: OUTPUT: «here␤there␤True␤»

[00:24] * HoboWithAShotgun facepalms and replaces ( @$.si-signature Z @$signature ).grep({ $_[0] != $_[1] }).elems == 0; by 

[00:24] <Zoffix> m: multi sub infix:<z> (Int, Int) is default {say "here"; nextsame }; multi sub infix:<zz> (Int, Int) { say "there" }; multi sub infix:<zz> (Int, Int) { say "there" }; say 42 zz 42

[00:24] <camelia> rakudo-moar 4fca94743: OUTPUT: «Ambiguous call to 'infix:<zz>'; these signatures all match:␤:(Int $, Int $)␤:(Int $, Int $)␤  in block <unit> at <tmp> line 1␤␤»

[00:24] <HoboWithAShotgun> can it maybe possibly be

[00:24] <HoboWithAShotgun> that identical ints are in the same container

[00:25] <Zoffix> HoboWithAShotgun: the first 100 are cached yeah

[00:25] <HoboWithAShotgun> that explains why we see the 12A 12A 

[00:25] <HoboWithAShotgun> it's 12V == 12A,

[00:25] <HoboWithAShotgun> see?

[00:26] <Zoffix> c: 2017.08 class Foo is Int {}; my $x := Foo.new: 2; $x does role Meow {}; my $y := Foo.new: 2; $y does role Moo {}; dd [$x.^name, $y.^name]

[00:26] <committable6> Zoffix, ¦2017.08: «["Int+\{Meow}", "Int+\{Moo}"]»

[00:26] <Zoffix> c: HEAD class Foo is Int {}; my $x := Foo.new: 2; $x does role Meow {}; my $y := Foo.new: 2; $y does role Moo {}; dd [$x.^name, $y.^name]

[00:26] <committable6> Zoffix, ¦HEAD(322dcc9): «["Foo+\{Meow}", "Foo+\{Moo}"]»

[00:26] <Zoffix> HoboWithAShotgun: not really

[00:26] <Zoffix> HoboWithAShotgun: oh, now I do. Yeah, you're mixing right into the cached constant

[00:27] <Zoffix> HoboWithAShotgun: you need `Int.new($value)` up in there; thought it only recently got fixed to Do The Right Thing

[00:27] <AlexDaniel> well, the big picture is here: https://gist.github.com/Whateverable/1fa08eeab6536781272cf02fbc5d4f04

[00:27] <Zoffix> recently as in... a few commits before 2017.10 release

[00:29] <HoboWithAShotgun> you mean it should work like this, it just doesn't because my perl is outdated

[00:30] <Zoffix> HoboWithAShotgun: not how you have it, but if you add Int.new($value) to get a new object instead of the cached constant, then yeah, then it'll work and yeah, that works correctly only on 2017.10 release

[00:30] <Zoffix> HoboWithAShotgun: also, it only affects values under 100, so you could test with 120V == 120A

[00:31] *** aborazmeh joined
[00:31] *** aborazmeh left
[00:31] *** aborazmeh joined
[00:32] <Zoffix> HoboWithAShotgun: also, you could do `use nqp; nqp::div_I(nqp::decont($value), 1, $value.WHAT)` instead of Int.new releases, but note that very soon that nqp op hack will stop working (so you'd need to use Int.new instead)

[00:34] * HoboWithAShotgun will not enter where will be dragons until i am confident in slaughtering griffins, tyvm

[00:35] <HoboWithAShotgun> uh, mixed persons, that means bad luck

[00:35] <Zoffix> m: use nqp; constant can-Int-new = ?try 'nqp::boxI_I(1, 1, Int)'.EVAL;  sub rebox-Int {can-Int-new ?? Int.new($^v) !! nqp::div_I(nqp::decont($v), 1, $v.WHAT) };  my $x := rebox-Int 2; $x does role Meow {}; my $y := rebox-Int 2; $y does role Moo {}; dd [$x.^name, $y.^name]

[00:35] <camelia> rakudo-moar 4fca94743: OUTPUT: «["Int+\{Meow}", "Int+\{Moo}"]␤»

[00:35] <Zoffix> c: 2017.08 use nqp; constant can-Int-new = ?try 'nqp::boxI_I(1, 1, Int)'.EVAL;  sub rebox-Int {can-Int-new ?? Int.new($^v) !! nqp::div_I(nqp::decont($v), 1, $v.WHAT) };  my $x := rebox-Int 2; $x does role Meow {}; my $y := rebox-Int 2; $y does role Moo {}; dd [$x.^name, $y.^name]

[00:35] <committable6> Zoffix, ¦2017.08: «["Int+\{Meow}", "Int+\{Moo}"]»

[00:35] <HoboWithAShotgun> also, no point when it's deprecated anyway

[00:35] <Zoffix> HoboWithAShotgun: what is?

[00:36] <HoboWithAShotgun> the nqp hack you mentioned

[00:36] <Zoffix> You could use ^ that. But it's a hack and we don't support users' use of nqp

[00:36] <HoboWithAShotgun> (where will be dragons) == nqp

[00:36] <Zoffix> HoboWithAShotgun: it won't be deprecated. just optimized and optimization will remove the side effect that it reboxes it

[00:37] <Zoffix> I mean, use Int.new, sure, just keep in mind users with older compilers won't get the stuff working right

[00:38] <Zoffix> Anyway, the OP issue...

[00:38] <Zoffix> m: multi sub infix:<==> (Int, Int) is default {say "here"; nextsame }; say 42 == 42

[00:38] <camelia> rakudo-moar 4fca94743: OUTPUT: «here␤here␤True␤»

[00:38] <Zoffix> m: multi sub infix:<ZZ> (Int, Int) is default {say "here"; nextsame }; say 42 ZZ 42

[00:38] <camelia> rakudo-moar 4fca94743: OUTPUT: «here␤Nil␤»

[00:38] <Zoffix> Looks like something to do with `==` op

[00:38] <Zoffix> Gonna take a look at it after fixing callyalater's issue :) But again, the fix (if it's broken and needs fixing) won't be on 2017.08 compiler :)

[00:39] <Zoffix> Yeah, looks like a proper bug; using `UInt` types instead of `Int`s + is default doesn't run it twice

[00:40] <Zoffix> m: multi sub infix:<ZZ> (Int, Int) is default {say "here"; nextsame }; say 42 ZZ 42

[00:40] <camelia> rakudo-moar 4fca94743: OUTPUT: «here␤Nil␤»

[00:40] <Zoffix> m: multi sub infix:<==> (Int, Int) is default {say "here"; nextsame }; say 42 == 42

[00:40] <camelia> rakudo-moar 4fca94743: OUTPUT: «here␤here␤True␤»

[00:40] <Zoffix> m: multi sub infix:<==> (Int, Int) is default {say "here"; nextcallee; nextsame }; say 42 == 42

[00:40] <camelia> rakudo-moar 4fca94743: OUTPUT: «here␤True␤»

[00:40] <Zoffix> HoboWithAShotgun: you could use ^ that hack to workaround it

[00:40] * Zoffix is getting paranoid about all the people who like to quote me

[00:41] <Zoffix> "BREAKING: Rakudo developer telling users to work around bugs with hacks twice in 5 minutes!!!"

[00:41] *** ryn1x left
[00:42] <AlexDaniel> I don't know if it helps, but

[00:42] <AlexDaniel> https://gist.github.com/Whateverable/ae2cff2121df024350d6a7857f8b502b  (2017-09-15) https://github.com/rakudo/rakudo/commit/3de6f33887688be0a39ba41a225b45489bf0cf4b

[00:42] <AlexDaniel> isn't it weird that it's a revert?

[00:43] *** wander left
[00:43] <HoboWithAShotgun> zoffix: the haters would deem themselves proofed correct, the hopeful will have sympathy and the rest won't probably give a flying clusterfibonacci 

[00:44] <HoboWithAShotgun> i was told to avoid the f word and fibonacci was the only other one i could think of :)

[00:46] <HoboWithAShotgun> zoffix: btw, there is a similar issue in the Str method

[00:46] <HoboWithAShotgun> it also gets called twice *sometimes*, i worked around that

[00:46] <HoboWithAShotgun> may be the same cause

[00:49] <AlexDaniel> Zoffix: well I'd say that there's something wrong about that commit, but that's a huge diff of nqp stuff so no idea. A revert is not supposed to introduce completely new behavior, but this one was done manually so ¯\_(ツ)_/¯

[00:50] <Zoffix> AlexDaniel: OK thanks. I'll leave the buggy code open on one of the desktops. Maybe will remember to try to golf it later

[00:51] <Zoffix> m: class Foo { method Str is default { say "here"; nextsame } }; Foo.new.Str

[00:51] <camelia> rakudo-moar 4fca94743: OUTPUT: «here␤»

[00:51] <Zoffix> HoboWithAShotgun: where?

[00:51] <AlexDaniel> we just need a bot that would golf things

[00:51] <AlexDaniel> ZofBot: learn it plz

[00:52] <AlexDaniel> committable6: 3de6f3388^,3de6f3388 https://gist.githubusercontent.com/AlexDaniel/3347585268c2ff73e463553f8e987ee5/raw/cf7ac373814b42a67bec0248115a11447728ccac/gistfile1.txt

[00:52] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[00:52] <committable6> AlexDaniel, https://gist.github.com/30b427ffbec52a37144fcd5c79035785

[00:54] *** riatre joined
[00:55] *** Cabanossi left
[00:56] *** SCHAPiE joined
[00:57] *** troys is now known as troys_

[00:57] *** Cabanossi joined
[00:59] *** wander joined
[01:01] *** Todd_ joined
[01:03] <Todd_> Hi All,  I have a computer that is giving me fits with my pm6's.  Error while compiling /home/linuxutil/Pause.pm (Pause) This appears to be Perl 5 code.  There is both a Pause.pm and a Pause.pm6.  But I still get this error, even when I rename Pause.pm

[01:04] <Todd_> Any word of wisdom?  This does not happen on three other computers.  

[01:04] *** Mrofnet left
[01:04] <Todd_> This is Rakudo version 2017.06 built on MoarVM version 2017.06 implementing Perl 6.c.

[01:04] *** evalable6 left
[01:04] *** Mrofnet joined
[01:04] *** evalable6 joined
[01:08] <Todd_> How do I get Perl6 to check for pm6 first?  Is there a way to tell "use" to use the extension?

[01:09] <HoboWithAShotgun> ok, I can't use Int.new in my postfix or else i must provide a multi for Rats et al, so i figured

[01:09] <HoboWithAShotgun> m: my $x = 2; say $x.WHAT.new( $x + 3 );

[01:09] <camelia> rakudo-moar 4fca94743: OUTPUT: «5␤»

[01:09] <HoboWithAShotgun> but then

[01:09] <HoboWithAShotgun> my $x = 0.3; say $x.WHAT.new( $x + 0.2 );

[01:09] <HoboWithAShotgun> m: my $x = 0.3; say $x.WHAT.new( $x + 0.2 );

[01:09] <camelia> rakudo-moar 4fca94743: OUTPUT: «Type check failed in binding to parameter 'nu'; expected Int but got Rat (0.5)␤  in block <unit> at <tmp> line 1␤␤»

[01:10] <Zoffix> Rat.new takes two args: numerator and denominator

[01:10] <HoboWithAShotgun> ah i see

[01:11] <HoboWithAShotgun> would it have killed them adding another new? ;-)

[01:12] <Zoffix> Todd_: it does check .pm6 first: https://github.com/rakudo/rakudo/blob/master/src/core/CompUnit/Repository/FileSystem.pm#L9-L45

[01:12] *** committable6 left
[01:12] <Todd_> changing Pause.pm to Pause.pm.000 did to work.  

[01:12] *** committable6 joined
[01:12] <Zoffix> weird

[01:13] * Zoffix &

[01:13] *** Zoffix left
[01:13] <Todd_> I have to change the Pause.pm to Pause5.pm

[01:13] <timotimo> Todd_: that was fixed in 2017.07

[01:15] <timotimo> https://github.com/rakudo/rakudo/commit/e1e9091f7484ee124b063a9c12f9bb5742bf077b - Todd_ you can apply this change locally and that'll fix things

[01:15] <Todd_> I just did a `dnf upgrade rakudo` and it is fixed.  Thank you!

[01:16] <timotimo> ok

[01:24] <HoboWithAShotgun> meh. Rat.new is an only method, so i cant monkey patch another one in

[01:24] *** troys_ is now known as troys

[01:25] *** troys is now known as troys_

[01:25] *** troys_ is now known as troys

[01:25] *** troys is now known as troys_

[01:26] *** Cabanossi left
[01:26] <MasterDuke> HoboWithAShotgun: maybe you could do what you want by wrapping it?

[01:28] *** Cabanossi joined
[01:29] <Geth> ¦ doc: 97da18d52c | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/grammar_tutorial.pod6

[01:29] <Geth> ¦ doc: convert improper subtitles to heads

[01:29] <Geth> ¦ doc: 

[01:29] <Geth> ¦ doc: and decrease :skip-test,

[01:29] <Geth> ¦ doc: improve layout and highlight

[01:29] <synopsebot> Link: https://doc.perl6.org/language/grammar_tutorial

[01:29] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/97da18d52c

[01:32] *** bitrauser joined
[01:33] *** mson joined
[01:34] *** eliasr left
[01:35] *** troys_ is now known as troys

[01:35] *** bitrauser_ left
[01:36] *** darkmorph joined
[01:38] <wander> [Coke], can I use =for code :method to substitute :skip-test

[01:38] <wander> when I write bare token?

[01:39] <wander> the example code is `token command { \w+ }'

[01:40] *** SCHAPiE left
[01:42] *** aborazmeh left
[01:44] *** SCHAPiE joined
[01:45] *** ilbot3 left
[01:51] * timotimo did work today: https://github.com/dnmfarrell/Perl6-One-Liners/issues

[01:54] *** gdonald joined
[01:56] *** ilbot3 joined
[01:56] *** ChanServ sets mode: +v ilbot3

[01:57] *** Cabanossi left
[01:58] *** Cabanossi joined
[02:04] *** wamba joined
[02:07] <HoboWithAShotgun> how do i ask a variable for the exponent if expressed scientifically?

[02:07] <HoboWithAShotgun> so for 125 it should return 2

[02:07] <HoboWithAShotgun> cause 1.25 e 2

[02:09] *** cdg joined
[02:10] *** Zoffix joined
[02:10] <Zoffix> m: 125.log(10).Int.say

[02:10] <camelia> rakudo-moar 4fca94743: OUTPUT: «2␤»

[02:10] <HoboWithAShotgun> mathhs :)

[02:11] <HoboWithAShotgun> i was good in geometry and probabilities

[02:11] <HoboWithAShotgun> the rest... meh

[02:12] *** ufobat___ joined
[02:12] <HoboWithAShotgun> m: 0.0031125.log(10).Int.say

[02:12] <camelia> rakudo-moar 4fca94743: OUTPUT: «-2␤»

[02:14] *** cdg left
[02:15] *** ufobat_ left
[02:17] *** noganex_ joined
[02:19] *** noganex left
[02:28] *** araujo left
[02:28] *** araujo joined
[02:34] *** bitrauser_ joined
[02:38] *** bitrauser left
[02:39] <Geth> ¦ doc: e84a5ea377 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/grammar_tutorial.pod6

[02:39] <synopsebot> Link: https://doc.perl6.org/language/grammar_tutorial

[02:39] <Geth> ¦ doc: Update grammar_tutorial.pod6

[02:39] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e84a5ea377

[02:42] *** wander left
[02:45] *** troys is now known as troys_

[02:45] *** cdg joined
[02:47] *** Actualeyes left
[02:50] *** cdg left
[02:57] *** wamba left
[03:05] <Todd_> how do you read a raw key off the keyboard?

[03:08] <Zoffix> .oO( someone should write a blog post about that )

[03:08] <Zoffix> For advent...

[03:09] <Zoffix> huggable: advent

[03:09] <huggable> Zoffix, Sign up to write an Advent blog post: https://github.com/perl6/mu/blob/master/misc/perl6advent-2017/schedule

[03:09] <Geth> ¦ doc/W4anD0eR96-patch-1: f09aa72e42 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/grammar_tutorial.pod6

[03:09] <Geth> ¦ doc/W4anD0eR96-patch-1: Add example "Add actions directly", review needed

[03:09] <Geth> ¦ doc/W4anD0eR96-patch-1: 

[03:09] <Geth> ¦ doc/W4anD0eR96-patch-1: Since this tutorial shows actions in grammar only by associating a action object, I add an example to introduce write actions directly.

[03:09] <Geth> ¦ doc/W4anD0eR96-patch-1: 

[03:09] <Geth> ¦ doc/W4anD0eR96-patch-1: As a nonnative, maybe there is some improper expression in the text.

[03:09] <Geth> ¦ doc/W4anD0eR96-patch-1: 

[03:09] <Geth> ¦ doc/W4anD0eR96-patch-1: Thank for your review!

[03:09] <Geth> ¦ doc/W4anD0eR96-patch-1: review: https://github.com/perl6/doc/commit/f09aa72e42

[03:09] <Zoffix> Todd_: it's something along the lines of using Terminal::Print or termios to set terminal to non-buffering mode and then you can just use getc or something

[03:09] <Zoffix> eco: Terminal::Print

[03:10] <buggable> Zoffix, Terminal::Print 'Asynchronous printing to your terminal -- as a simple grid': https://github.com/ab5tract/Terminal-Print

[03:10] <Zoffix> eco: termios

[03:10] <buggable> Zoffix, Term::termios 'termios routines for Rakudo Perl 6': https://github.com/krunen/term-termios

[03:10] <Zoffix> Todd_: that gets asked often; you can probably find answers if you search the chat log: https://irclog.perlgeek.de/perl6/2017-10-28

[03:11] <Todd_> thank you all!  I have some reading to do.

[03:11] <Geth> ¦ doc: W4anD0eR96++ created pull request #1635: Add example "Add actions directly", review needed

[03:11] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/1635

[03:12] *** wander joined
[03:23] <Todd_> looking at https://github.com/krunen/term-termios, in the loop, I have to press a key before it reads the second key.  ???

[03:25] *** ufobat_ joined
[03:26] *** COMBORICO left
[03:26] *** Cabanossi left
[03:28] *** Cabanossi joined
[03:28] *** ufobat___ left
[03:29] <geekosaur> yes because it's looking for a combining character. there's something or other to change that low level behavior that I don;t recall of the top of my head

[03:29] <geekosaur> but since perl 6 works by default at the grapheme level, it does that by default

[03:29] <Zoffix> You could try switching $*IN to binary mode ($*IN.encoding: Nil) and using .read(1)

[03:29] <Zoffix> instead of .getc

[03:30] *** cpage_ left
[03:34] *** noganex joined
[03:37] <Todd_> I am not following.  how would I write `my $c = $*IN.getc;` in encoding?

[03:37] *** noganex_ left
[03:39] <geekosaur> I ... don;t even understand the question

[03:39] <Zoffix> Todd_: are you trying to read the key or read one character?

[03:39] *** Cabanossi left
[03:39] <geekosaur> perl; 6 is already doing encoding, that is why it is waiting for more. Unicode graphemes can consist of multiple characters

[03:40] <Todd_> I am trying to read one charatcter at a time.  Flush first, so I only get new stuff

[03:40] <Zoffix> Todd_: it'd often need to read more than one character; otherwise it doesn't know when you've finished entering your character.

[03:41] *** wamba joined
[03:41] <Zoffix> m: say [.encode.bytes, .chars] with "a" ~ "\x[308]" x 1000

[03:41] <camelia> rakudo-moar 4fca94743: OUTPUT: «[2000 1]␤»

[03:41] *** Cabanossi joined
[03:41] <Todd_> I am looking for one instance of any key on the entire keyboard being pressed.  Weird keys too.

[03:41] <Zoffix> Todd_: ^ that's a 2000-byte single character

[03:41] <geekosaur> Todd_, good luck with that.

[03:42] <geekosaur> (a) shift doesn;t send a character

[03:42] <geekosaur> (b) F1 sends, depending on the exact terminal, up to 5 or so

[03:42] *** wander left
[03:42] <Todd_> well, how do I read everything else, except shift.  I will compromise on that

[03:43] <Zoffix> Why "good luck"? There are many programs that read presses like Ctrl and Shift

[03:43] <Zoffix> Like most video games

[03:43] <geekosaur> by not using a terminal, yes

[03:43] <geekosaur> if you are using a GUI you can get raw key events

[03:43] <geekosaur> if you are using a video game console you get raw key codes

[03:43] *** mson left
[03:43] <geekosaur> temrinals are neither

[03:44] <zostay> does zef precompile during installation?

[03:44] <Zoffix> zostay: yes

[03:44] <zostay> hmmm

[03:44] <Todd_> this is how I do it in Perl 5.  http://vpaste.net/reOF7

[03:46] <Zoffix> Presumably you can set the same modes with termios module or whatever

[03:46] <Todd_> xterm, terminal, ssh, xrdp

[03:46] <geekosaur> try pressing F1

[03:46] <Todd_> I want it all.

[03:46] <geekosaur> that does not handle it

[03:47] <geekosaur> heh. F1 doesn;t even go to the terminal on my system, it pops up help.

[03:47] *** Zoffix left
[03:47] <Todd_> chuckle.  It asks me if I was to read teh Xfce manual.  I will compromise

[03:51] <geekosaur> http://lpaste.net/359585

[03:51] <geekosaur> to get any rawer than that, you'd have to use X11 operations and process key events; I don't know if anyone has xcb bindings for perl 6 yet

[03:51] <Todd_> in the example for termios, the furst key I press gets ignored.  The second one gets read.

[03:54] *** wander joined
[03:55] <Todd_> maybe I typod something.  I will copy and paste.

[03:55] <Todd_> No such method 'ord' for invocant of type 'Buf[uint8]'   But a lest it read the first key

[03:56] <geekosaur> hm. that error is probably correct, if you go to fully raw mode you are not working with Str any more

[03:57] <geekosaur> ptogrammers always think a string is a string. They're always wrong but most languages let them get away with it and silently do the wrong thing in many cases

[03:57] <geekosaur> (or verbosely, for e.g. early python 3 releases)

[03:58] <wander> m: my @primes = ^100000 .hyper.grep: *.is-prime; say @primes;

[03:58] <camelia> rakudo-moar 4fca94743: OUTPUT: «(signal XCPU)»

[03:58] <wander> m: my @primes = ^100000 .hyper.grep: *.is-prime; say @primes.head(10);

[03:58] <camelia> rakudo-moar 4fca94743: OUTPUT: «(signal XCPU)»

[03:59] <Todd_> and it really messed up my terminal, leaving it in raw mode.

[03:59] <geekosaur> hm, it should have reset it. I didn't change that part

[04:00] <geekosaur> oh, wait. because of the error.

[04:00] <geekosaur> type: stty sane

[04:00] <geekosaur> then control-J

[04:00] <geekosaur> (NOT enter!)

[04:01] <Todd_> that fixed it

[04:01] <Todd_> :-)

[04:05] * geekosaur testing this time before sending update...

[04:07] <geekosaur> http://lpaste.net/359585#a359587

[04:08] <geekosaur> more correct would be to extract the byte from the Buf, but this will do

[04:08] <Todd_> And it works!  Thank you!

[04:09] <Todd_> Will you update https://github.com/krunen/term-termios  ?

[04:14] *** evalable6 left
[04:14] *** evalable6 joined
[04:15] <geekosaur> no but I'm filing an issue. the author can decide how best to deal with it.

[04:15] <geekosaur> https://github.com/krunen/term-termios/issues/10

[04:15] <Todd_> sweet

[04:17] <Todd_> Actually, under line 19, add:

[04:17] <Todd_> $termios.setattr(:FLUSH);    

[04:19] *** Zoffix joined
[04:21] <Todd_> Here is my module and a test program for it.  Bang away on keys whilst you wait the five seconds.  Note that they all get dumped.  http://vpaste.net/y37Pe

[04:24] <Todd_> Man that was a head scratcher!  Thank you Geekosaur.  Don't forget to :FLUSH.  That did not sound too good.  :-) 

[04:25] <geekosaur> it's actually documented for IO::Handle#getc although it doesn't tell you what to do about it

[04:25] <geekosaur> (I seem to recall a within the past month or so moarvm commit that made it possible to avoid the extra wait?)

[04:25] <Zoffix> Todd_: perhaps you'd like to write a blog about how to do what you did? We need more authors for our Advent Blog and that topic is commonly asked

[04:25] <Zoffix> huggable: advent

[04:25] <huggable> Zoffix, Sign up to write an Advent blog post: https://github.com/perl6/mu/blob/master/misc/perl6advent-2017/schedule

[04:28] * HoboWithAShotgun PUTs his head to REST

[04:28] <HoboWithAShotgun> i am sorry. good night guys

[04:28] <Zoffix> \o

[04:28] <Todd_> I was in the process of writing  it up on the mailing list.  I am tenacious but I am really only a dead beginner, so I am not sure other than the mailing list how I can be of help.  I share and blab a lot over on the mailing list/

[04:29] <Zoffix> Todd_: you don't need to be an expert to write a post :) You did accomplish the task after all.

[04:31] <Todd_> I stood on the shoulders of giants!

[04:31] <Zoffix> :)

[04:35] <Zoffix> .tell callyalater the quote braid bug is now fixed: c: HEAD $ = ""; sub postfix:<!> { [*] ^$^f+1}; say "{ 5! }";   Sorry it took longer to fix than original promised :) 

[04:35] <yoleaux> Zoffix: I'll pass your message to callyalater.

[04:35] * Zoffix beds

[04:35] *** Zoffix left
[04:39] *** Cabanossi left
[04:40] <wander> m: say "abc"~~/:r a [b+ || bc] $ /

[04:40] <camelia> rakudo-moar 4fca94743: OUTPUT: «Nil␤»

[04:41] *** Cabanossi joined
[04:44] *** ryn1x joined
[04:44] <ryn1x> .

[04:47] *** Cabanossi left
[04:48] *** Cabanossi joined
[04:49] <wander> m: my token tok { b .* d }; dd "b11d" ~~ &tok;

[04:49] <camelia> rakudo-moar 4fca94743: OUTPUT: «Nil␤»

[04:49] <wander> what's wrong?

[04:54] <geekosaur> I don;t think that means what you intended

[04:55] <geekosaur> &foo means you are talking about the sub/method/rule/token itself as an object. A Str is not a token.

[04:56] <geekosaur> m: sub foo { 'a' }; dd foo; dd &foo;

[04:56] <camelia> rakudo-moar 4fca94743: OUTPUT: «"a"␤Sub foo = sub foo () { #`(Sub|54778752) ... }␤»

[04:57] <wander> m: my regex number { \d+ [ \. \d+ ]? }; say "32.51" ~~ &number;

[04:57] <camelia> rakudo-moar 4fca94743: OUTPUT: «｢32.51｣␤»

[04:58] <geekosaur> hm, but it is a Callable and ~~ will match by calling it. but it calls it incorrectly since a token is only defined in the context of a Grammar iirc?

[04:58] <geekosaur> not the main perl 6 language

[04:59] <wander> my token number { \d+ [ \. \d+ ]? }; say "32.51" ~~ &number;

[04:59] <wander> m: my token number { \d+ [ \. \d+ ]? }; say "32.51" ~~ &number;

[04:59] <camelia> rakudo-moar 4fca94743: OUTPUT: «｢32.51｣␤»

[04:59] <geekosaur> right

[04:59] <geekosaur> m: my token tok { b .* d }; tok("b11d")

[04:59] <camelia> rakudo-moar 4fca94743: OUTPUT: «No such method '!cursor_start' for invocant of type 'Str'␤  in regex tok at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[04:59] <geekosaur> and the Failure is converted to a Nil by the smartmatch

[05:00] <wander> m: my token tok { \d+ [ \. \d+ ]? }; say &tok.ACCEPTS("32.51");

[05:00] <camelia> rakudo-moar 4fca94743: OUTPUT: «｢32.51｣␤»

[05:00] <wander> a ~~ &b not eqauls to &b.(a)

[05:01] *** piojo_ joined
[05:01] *** cdg joined
[05:01] <wander> m: say "b11d" ~~ /:r b .* d /

[05:01] <camelia> rakudo-moar 4fca94743: OUTPUT: «Nil␤»

[05:01] <geekosaur> no, it's not 100% the same, ~~ does more stuff than just rearranging

[05:02] <geekosaur> it thunkifies, it sets $_ locally, it does a number of other metasyntactic things

[05:02] <wander> ok

[05:02] <wander> I rewrite it in "b11d" ~~ /:r b .* d /, it shows the match fails.

[05:03] <wander> have nothing to do with token, grammar,...

[05:04] <geekosaur> no, it has to do with :ratchet

[05:04] <wander> right

[05:04] <wander> thank you, I see that

[05:05] <wander> that's what I concentrate on, whether I write a wrong regex/token

[05:06] *** cdg left
[05:06] <geekosaur> smells like :ratchet is iperating at the wrong level. it's preventing the .* from backtracking instead of preventing backtracking from re-entering the regex (which is kinda irrelevant here, I think). or if :r has that effect when standalone then this might be a gotcha

[05:06] <geekosaur> because .* will, if ratcheted, commit to consuming the rest of the string and not backtrack to allow the d to be literally matched

[05:07] <wander> yes

[05:08] <geekosaur> and it looks like this is expected, so perhaps use of .* in a regex with :r should be in the Traps documment

[05:08] <geekosaur> *document

[05:09] <geekosaur> regex really expects to be used with things like keywords that don't require backtracking to work

[05:20] <Todd_> I forgot how to trim a \n off the end of a sting.  Trim seems to only get the white space.

[05:22] <geekosaur> works here?

[05:23] <geekosaur> pyanfar Z$ 6 'my $x = "foo\n"; dd $x.trim'

[05:23] <geekosaur> "foo"

[05:24] <geekosaur> note that if you got a literal \n into it, it wont be whitespace and won't be removed

[05:24] <geekosaur> pyanfar Z$ 6 'my $x = q{foo\n}; dd $x.trim'

[05:24] <geekosaur> "foo\\n"

[05:24] <Todd_> $HostName ~~ s/\n//;   worked.   I do not understand pyanfar

[05:24] <geekosaur> that is my prompt

[05:24] <geekosaur> and 6 is an alias for running perl 6 one-liners

[05:25] <geekosaur> (that I borrowed from lizmat++ --- note that only zsh seems to allow numeric alias names, not bash)

[05:26] *** evalable6 left
[05:26] *** evalable6 joined
[05:26] *** ChanServ sets mode: +v evalable6

[05:26] <geekosaur> ('pyanfar Z$' --- host name and prompt announcing it as zsh instead of bash or etc. my dotfiles check for zsh, bash, ksh, and various vendor /bin/sh)

[05:28] *** wamba left
[05:31] *** Cabanossi left
[05:33] *** Cabanossi joined
[05:35] *** napo1eon joined
[05:42] *** espadrine joined
[05:45] *** darkmorph left
[05:47] *** khw left
[05:48] *** okl joined
[05:52] <wander> pod issue

[05:52] <wander> =head1 X<Creating Grammars|class,Grammar;declarator,grammar>

[05:52] <wander> =SUBTITLE Group of named regexes that form a formal grammar

[05:53] <wander> then the =SUBTITLE is hidden

[05:53] <wander> how can I do what I want? or it is unsupported?

[05:57] *** okl left
[05:58] *** wamba joined
[05:59] *** okl joined
[06:02] *** wamba left
[06:05] *** okl left
[06:09] *** wamba joined
[06:14] *** poohman joined
[06:19] *** poohman left
[06:31] *** troys_ is now known as troys

[06:31] *** ryn1x left
[06:34] *** dj_goku left
[06:34] *** Actualeyes joined
[06:39] *** nadim_ joined
[06:40] *** darutoko joined
[06:51] *** troys left
[06:51] *** Todd_ left
[07:02] *** ryn1x joined
[07:03] *** sena_kun joined
[07:06] *** ryn1x left
[07:22] *** Piotr__ joined
[07:31] *** ryn1x joined
[07:32] <piojo_> .tell stmuk When I was talking about archlinux support for rakudo star, I was really talking about DESTDIR support. That's all that's needed for us to be able to make packages, both third party and official.

[07:32] <yoleaux> piojo_: I'll pass your message to stmuk.

[07:43] *** Actualeyes left
[07:46] *** Actualeyes joined
[07:49] *** Actualeyes left
[07:53] *** Thrush left
[07:54] *** wander left
[07:56] *** Actualeyes joined
[08:00] *** napo1eon left
[08:01] *** Actualeyes left
[08:03] *** Actualeyes joined
[08:04] *** ryn1x left
[08:06] <stmuk_> piojo_: I think distro packages probably should be starting with packing rakudo itself rather then star. Star would be a meta package of rakudo itself and modules. Rakudo is supposed to have DESTDIR support although last time I looked I was unclear whether it was complete

[08:08] <stmuk_> piojo_: In fact rakudo itself is probably 3 packages -- nqp, MoarVM and rakudo proper

[08:08] <stmuk_> piojo_: its probably worth checking what Debian and OpenSUSE have done already

[08:08] *** dominix joined
[08:09] <dominix> hi all

[08:10] <dominix> I have a tricky things. How do I declare my first elemnet of an array to be empty when using <>

[08:11] <dominix> for ex : my @aa = < empty foo bar>

[08:11] <dominix> if I say : my @aa = < "" foo bar>; it doesn't works

[08:12] <dominix> it may be trivial, but I don't find.

[08:17] *** piojo joined
[08:17] *** piojo_ left
[08:32] <piojo> dominix: What do you mean by an empty value? An empty list? An empty string? the "Any" type value?

[08:33] <piojo> either way, the short answer is that you can't do it with <>, because only literal strings are allowed

[08:34] <piojo> You can add an empty string with <<>> (or "«»"), but even with that, it's not a true empty string, but an IntStr

[08:34] <piojo> m: say «'' 'second element' third fourth».perl

[08:34] <camelia> rakudo-moar 4fca94743: OUTPUT: «(IntStr.new(0, ""), "second element", "third", "fourth")␤»

[08:34] <piojo> The first element can be interpreted as an empty string, or as 0.

[08:37] *** evalable6 left
[08:37] <piojo> stmuk_: I'll add a note to the rakudo-star (3rd party) package suggesting people install rakudo instead.

[08:37] *** evalable6 joined
[08:37] *** ChanServ sets mode: +v evalable6

[08:38] <piojo> stmuk_: this is a psychological problem, more than anything else. When I first installed perl6, I found there was no perl6 software/package, so I searched for what it was called. All the blogs talk about installing "rakudo star", so that's what I searched for. (To find that it didn't work.) I didn't know what "rakudo" was, but I thoughtit would be less appropriate, since it's not the recommended software...

[08:39] <piojo> it's only a minus for user acquisition--it makes very little difference to a current user.

[08:49] <stmuk_> to be frank the packaging of perl 5 in distributions historically has usually led to upstream advice to avoid it

[08:50] <stmuk_> probably because CentOS etc. ship years old versions .. probably less of a problem with arch :)

[08:52] <stmuk_> although anyone installing the current debian stable rakudo (2016.12) will probably find many modules no longer work

[08:53] <stmuk_> eg. DBIish

[08:56] <piojo> Haha

[08:57] <piojo> Yeah, Arch ships perl 5.26. If anything, it upgrades too often!

[08:57] *** evalable6 left
[08:57] *** evalable6 joined
[08:58] <piojo> This isn't a distro where you're supposed to avoid or go beyond the official and 3rd party packages. It's no "slackware"

[08:58] *** yqt joined
[09:01] *** Exodist left
[09:01] *** cdg joined
[09:02] *** Cabanossi left
[09:03] *** Exodist joined
[09:03] *** Cabanossi joined
[09:03] *** ryn1x joined
[09:05] <dominix> well, the only trick I've found is to unshift @aa, "";

[09:06] *** cdg left
[09:06] <dominix> my @aa = <foo bar>; unshift @aa, "";

[09:06] *** cpage_ joined
[09:07] <dominix> this is what I need, is «'' foo bar» equivalent ?

[09:12] <dominix> of course it is not

[09:16] *** knight__ joined
[09:16] <geekosaur> it's likely equivalent enough

[09:17] <dominix> what do you guys think about naming perl6 6lang or something other.

[09:18] <dominix> is rakudo appropriate enought to illustrzte another branch of perl ?

[09:20] <geekosaur> m: my @a = <0 a b>; dd @a[0] -- I suppose you also dislike this

[09:20] <camelia> rakudo-moar 4fca94743: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤No valid trait found after also␤at <tmp>:1␤------> 3 <0 a b>; dd @a[0] -- I suppose you also7⏏5 dislike this␤»

[09:20] <geekosaur> whoops, comment...

[09:20] <geekosaur> m: my @a = <0 a b>; dd @a[0] # I suppose you also dislike this

[09:20] <camelia> rakudo-moar 4fca94743: OUTPUT: «IntStr @a = IntStr.new(0, "0")␤»

[09:21] <geekosaur> <> and << >> make allomorphs. Perl 5 also does this but neither tells you nor gives you a choice in the matter

[09:22] <geekosaur> empty strings can always be used as zeroes, numeric strings can always be used as numbers. The allomorph is how Perl 6 does the same thing

[09:23] <dominix> nice

[09:23] <geekosaur> m: my @a = <<"" a b>>; dd @a[0]

[09:23] <camelia> rakudo-moar 4fca94743: OUTPUT: «IntStr @a = IntStr.new(0, "")␤»

[09:24] <geekosaur> if you use it as a Str, it's an empty Str

[09:24] <geekosaur> m: my @a = <<"" a b>>; say @a[0]

[09:24] <camelia> rakudo-moar 4fca94743: OUTPUT: «␤»

[09:25] <geekosaur> m: my @a = <<"" a b>>; say '|' ~ @a[0] ~ '|'

[09:25] <camelia> rakudo-moar 4fca94743: OUTPUT: «||␤»

[09:25] <tyil> a friend of mine asks if there's a suitable replacement for WWW::Mechanize in perl 6

[09:26] *** parv joined
[09:37] *** ryn1x left
[09:38] *** ryn1x joined
[09:39] *** rindolf joined
[09:42] *** renormalist left
[09:42] *** renormalist joined
[09:42] *** ryn1x left
[09:50] <AlexDaniel> dominix: why not (‘’, |@a) ?

[09:52] <AlexDaniel> squashable6: next

[09:52] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 6 days and ≈0 hours (2017-11-04 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[09:55] <AlexDaniel> Next squashathon will be for perl6/doc

[09:55] *** wamba left
[09:56] <knight__> Ehm, what does it means method perl?

[09:56] <knight__> example something.perl..

[09:57] *** greppable6 left
[09:57] *** greppable6 joined
[09:57] *** ChanServ sets mode: +v greppable6

[09:57] <AlexDaniel> .tell Zoffix squashathon poster plz? :)

[09:57] <yoleaux> AlexDaniel: I'll pass your message to Zoffix.

[09:58] <moritz> knight__: it returns a string that is valid perl code

[09:58] <moritz> knight__: which tries to reproduce the original object as good as possible

[09:58] <moritz> m: say [1, 2, 3].perl

[09:58] <camelia> rakudo-moar 4fca94743: OUTPUT: «[1, 2, 3]␤»

[09:58] <AlexDaniel> relevant docs: https://docs.perl6.org/routine/perl#class_Mu

[10:01] <Geth> ¦ perl6-most-wanted: 617535a590 | (Patrick Spek)++ | most-wanted/modules.md

[10:01] <Geth> ¦ perl6-most-wanted: Add WWW::Mechanize to the most-wanted modules list

[10:01] <Geth> ¦ perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/617535a590

[10:01] <knight__> Thank you.

[10:05] *** wamba joined
[10:05] *** setty1 joined
[10:07] *** chakli joined
[10:08] <chakli> Hi, anything wrong with this program? perl6 -e 'my $x=1;(1,{my $y=$_+$x; $x=$_;$y;}...^4000000).grep({$_%%2}).sum.say'

[10:09] *** wamba left
[10:09] *** wamba joined
[10:10] <chakli> more than 15 min and still running

[10:13] <chakli> nvm got it should be * > 4000000

[10:14] <teatime> without the linebreak it's a syntax error, weird

[10:15] <AlexDaniel> teatime: where?

[10:16] <teatime> lol nm the syntax error was typing 'perl6 -e' into the REPL

[10:16] <AlexDaniel> haha

[10:16] *** wamba left
[10:17] <stmuk_> piojo: I just started https://github.com/stmuk/rakudo-packages

[10:18] <AlexDaniel> chakli: hi. What about something like this? (1, 1, * + * ... * > 400000)

[10:18] <AlexDaniel> chakli: it seems like you need two latest values and you can do that by simply having something that takes two arguments

[10:19] <chakli> oh, didnt know

[10:19] <AlexDaniel> chakli: so WhateverCode like * + * will do, or you can try { $^a + $^b }

[10:19] <AlexDaniel> or even -> $a, $b { $a + $b }

[10:19] <AlexDaniel> m: say (1, 1, -> $a, $b { $a + $b } … * > 10000)

[10:19] <camelia> rakudo-moar 4fca94743: OUTPUT: «(1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946)␤»

[10:20] <AlexDaniel> or if you don't want two leading 1 then maybe even this:

[10:20] <AlexDaniel> m: say (1, -> $a, $b=1 { $a + $b } … * > 10000)

[10:20] <camelia> rakudo-moar 4fca94743: OUTPUT: «(1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946)␤»

[10:21] <chakli> b has a default arg here?

[10:21] <AlexDaniel> yea, it has a default value

[10:21] <chakli> m: (1,1,->$a,$b {$a+$b}...* > 4000000).grep({$_%%2}).sum.say

[10:21] <camelia> rakudo-moar 4fca94743: OUTPUT: «4613732␤»

[10:22] <AlexDaniel> there are so many ways you can write it :)

[10:23] <chakli> doing some project eulers with perl6

[10:24] <teatime> what does { # some block }...300  do?

[10:24] *** dominix left
[10:24] <teatime> wait nm 1 sec

[10:24] <AlexDaniel> https://docs.perl6.org/language/operators#infix_...

[10:25] <AlexDaniel> argh, that link didn't work so well

[10:25] <teatime> > {300}..305

[10:25] <teatime> -> ;; $_? is raw { #`(Block|94671787949184) ... }..305

[10:25] <teatime> I thought .. would make a non-lazy list

[10:26] <AlexDaniel> teatime: err, no, .. is for creating range objects

[10:26] <AlexDaniel> it's not really a list or anything, it's just an object with min and max values

[10:26] <chakli> m: (->$a=1, $b=1 {$a+$b}... * > 4000000).grep({$_%%2}).sum.say

[10:26] <camelia> rakudo-moar 4fca94743: OUTPUT: «4613732␤»

[10:26] <teatime> right, true

[10:27] <AlexDaniel> it's Iterable and Positional, so you can do all sorts of things with it

[10:27] <AlexDaniel> but by itself it's just an object holding min and max values

[10:28] <AlexDaniel> chakli: actually, that's a very interesting way to do it

[10:30] <teatime> heh I had a totally wrong idea of .. and ..., good to have cleared that up

[10:32] *** Cabanossi left
[10:33] *** patrickz joined
[10:33] *** Cabanossi joined
[10:35] *** p6steve joined
[10:35] *** ryn1x joined
[10:35] <AlexDaniel> interesting old gist: https://gist.github.com/AlexDaniel/1e2d1c50963d37c5d43a

[10:36] <AlexDaniel> I was looking for a comprehensive list of ways you can create a callable

[10:36] <patrickz> .seen bduggan

[10:36] <yoleaux> I haven't seen bduggan around.

[10:36] <AlexDaniel> I thought that I had it, but I guess not?

[10:38] *** Actualeyes left
[10:39] *** Actualeyes joined
[10:43] *** Actualeyes left
[10:43] *** Actualeyes joined
[10:45] *** aborazmeh joined
[10:45] *** aborazmeh left
[10:45] *** aborazmeh joined
[10:56] <knight__> is there any example for creating own "chaining methods" a.meth1.meth2? 

[10:58] <sena_kun> m: class A { method a() { say "Kon-Kon"; self; }; method b() { say "Woof"; self } }; A.new().a().b();

[10:58] <camelia> rakudo-moar 4fca94743: OUTPUT: «Kon-Kon␤Woof␤»

[10:58] <sena_kun> something like that?

[11:00] <knight__> Ok, I understand, thank you.

[11:03] *** knight__ left
[11:08] <Geth> ¦ marketing: a815395a92 | (Zoffix Znet)++ | 11 files

[11:08] <Geth> ¦ marketing: Add 2017.11 SQUASHathon poster

[11:08] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/a815395a92

[11:09] *** ryn1x left
[11:13] *** parv left
[11:13] *** chakli left
[11:16] *** Cabanossi left
[11:18] * stmuk_ wonders if going to the Barcelona Perl Workshop next weekend will be safe

[11:18] *** margeas joined
[11:18] *** Cabanossi joined
[11:18] <lizmat> stmuk_: usually all hell breaks loose *after* the Perl event

[11:19] <stmuk_> hahaha yeah like Kiev :)

[11:19] <AlexDaniel> .tell lizmat plz mention the next SQUASHathon in p6weekly: https://twitter.com/zoffix/status/924232852551716864

[11:19] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[11:20] <lizmat> .

[11:20] <yoleaux> 11:19Z <AlexDaniel> lizmat: plz mention the next SQUASHathon in p6weekly: https://twitter.com/zoffix/status/924232852551716864

[11:20] <lizmat> will do  :-)

[11:23] <AlexDaniel> lizmat: more: default branch switched to “master”: http://rakudo.org/2017/10/27/main-development-branch-renamed-from-nom-to-master/ , github issue tracker is now open: https://irclog.perlgeek.de/perl6/2017-10-24#i_15345892

[11:24] <AlexDaniel> lizmat: “samcv++ # first person to do a MoarVM release” https://irclog.perlgeek.de/moarvm/2017-10-26#i_15359680

[11:24] <lizmat> .

[11:25] <lizmat> you mean other than jnthn of course  :-)

[11:25] <lizmat> I would qualify jnthn as a person as well  :-)

[11:25] <AlexDaniel> as he puts it in the next message, he is “zeroth” :)

[11:25] <lizmat> aahhh  ok, clear  :-)

[11:25] <stmuk_> jnthn probably qualifies as several people from a productivity perspective :)

[11:26] <AlexDaniel> stmuk_: not only jnthn, have you seen recent contributions by Zoffix++ ? :)

[11:27] <AlexDaniel> stmuk_: two weeks ago the number of RT tickets went *down*! https://gist.github.com/AlexDaniel/0f20a508bff0f7e9edd4e4d1d94002e2

[11:27] <stmuk_> true!

[11:29] <AlexDaniel> ( even though during the same period I was populating the ticket queue with regression tickets :P )

[11:30] <AlexDaniel> stmuk_: and then there's samcv who overdelivered way too much for the unicode grant

[11:31] <AlexDaniel> tbh most rakudo devs are very productive :) it makes me feel less than a whole human :D

[11:31] *** piojo left
[11:31] <lizmat> :-)

[11:36] <stmuk_> :)

[11:42] <geekosaur> piojo, there's still at least two reasons to avoid the distro package:

[11:43] <geekosaur> (1) you dont control when things get upgraded, upstream does. bad if you are developing and the API changes when you do a system update 

[11:43] <geekosaur> (2) the system may be using that package and its dependents, and replacing versions with newer ones may break the system

[11:44] *** piojo joined
[11:44] <geekosaur> (someone tried that with perl on debian. dpkg utilities depend on perl, or did at the time. dpkg broke *badly* and they ended up reinstalling)

[11:44] <geekosaur> aaaand it looks like most of that got missed, whoops

[11:45] <geekosaur> piojo, there's still at least two reasons to avoid the distro package:

[11:45] <geekosaur> (1) you dont control when things get upgraded, upstream does. bad if you are developing and the API changes when you do a system update 

[11:45] <geekosaur> (2) the system may be using that package and its dependents, and replacing versions with newer ones may break the system

[11:45] <geekosaur> so it's still a good idea to avoid distro packages if you are developing stuff

[11:49] <stmuk_> geekosaur: while agreeing with most of what you say .. I'd say there are practical reasons for using distro packages in large organizations 

[11:49] <stmuk_> so it depends on what sort of development is happening

[11:49] <geekosaur> to a point, yes. I;ve been there. and quite a few largs orgs actually maintain their own packages specifically so they have control over the issues I mentioned

[11:50] <geekosaur> (like the one I used to work for)

[11:50] <geekosaur> most of them also have isolation so devs are in an environment where they see the dev-intended version instead of the system one

[11:51] <stmuk_> there are developers who probably should use vendor supplied languages in some situations (although I doubt anyone on this channel should)

[11:51] <geekosaur> (heck, if the org is big enough, it actually rolls its own *distribution*)

[11:52] <geekosaur> (usually based on some vendor distro but updated on the org's schedule, with org-required variations, and fully regression tested and supported by the org with upstream vendor only brought in when necessary / problem is replicated on unmodified vendor distro)

[11:55] <stmuk_> all that works fine until the one person who set it all up leaves :)

[11:55] <stmuk_> bbl

[11:58] <geekosaur> you haven't worked in a truly large org, I see

[11:59] <geekosaur> I'm talking F50. there ain't no "one person"

[12:01] <geekosaur> (I continue to be amazed at how little open source types know about large corporations. Including folks like Red Hat --- who is losing many of their enterprise customers over RHEL7 and doesn't seem to be able to understand why.)

[12:01] <stmuk_> I've worked in organisations of 100K+

[12:02] *** ryn1x joined
[12:02] *** Cabanossi left
[12:03] *** Cabanossi joined
[12:07] *** ryn1x left
[12:11] * lizmat stopped when it reached 5K+

[12:11] *** nightfrog joined
[12:11] <lizmat> the parties just became too large, too crowded and too loud  :-)

[12:14] <Geth> ¦ doc: 00d9800590 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/tables.pod6

[12:14] <synopsebot> Link: https://doc.perl6.org/language/tables

[12:14] <Geth> ¦ doc: add hint for devs

[12:14] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/00d9800590

[12:27] *** espadrine left
[12:40] *** ryn1x joined
[12:42] *** Rawriful joined
[12:42] <patrickz> On my machine `zef install App::Cpan6` fails with: https://gist.github.com/patzim/ce3a1da13805ae4bd8397be0df184182

[12:43] <patrickz> Can someone verify it's not only me?

[12:45] <sena_kun> indeed.

[12:46] <patrickz> I'll report it

[12:46] *** bdmatatu joined
[12:46] <sena_kun> consider opening an issue at https://github.com/scriptkitties/perl6-App-Cpan6/issues

[12:46] <sena_kun> oh, I am too slow.

[12:46] <sena_kun> patrickz++

[13:01] *** piojo left
[13:10] *** ryn1x left
[13:11] *** ryn1x joined
[13:12] *** piojo joined
[13:15] *** COMBORICO joined
[13:15] *** ryn1x left
[13:17] *** MasterDuke joined
[13:21] <patrickz> Just did my first CPAN module upload. Yay! Will see how that goes...

[13:22] *** Piotr__ left
[13:22] *** poohman joined
[13:26] <buggable> New CPAN upload: RPi-ButtonWatcher-0.0.1.tar.gz by PATRICKZ https://cpan.metacpan.org/authors/id/P/PA/PATRICKZ/Perl6/RPi-ButtonWatcher-0.0.1.tar.gz

[13:30] *** xi- joined
[13:31] <poohman> m: say "Hello all";

[13:31] <camelia> rakudo-moar 4fca94743: OUTPUT: «Hello all␤»

[13:33] <poohman> I am trying to make a grammar for a pdf file - just trying to extract text without using pdftotext

[13:34] <poohman> get a "Malformed UTF-8" when trying to read it or parse it using Grammars

[13:34] <AlexDaniel> poohman: fwiw, have you looked at existing PDF modules? https://modules.perl6.org/search/?q=pdf

[13:34] <moritz> poohman: yes, PDFs tend to contain binary data

[13:34] <moritz> and grammars aren't well suited for those, I fear

[13:35] <poohman> any way to directly read the raw data

[13:35] <poohman> oh ok

[13:35] <moritz> sure, you can .read() it into Blog

[13:35] <moritz> or .slurp(:bin)

[13:36] <AlexDaniel> Blob*

[13:36] <poohman> but cant coax the parsefile method by passing arguments?

[13:37] <poohman> Did look at the existing PDF modules - but this is just to play around

[13:45] *** bdmatatu left
[13:48] *** wamba joined
[13:53] *** as_ joined
[13:54] *** as_ left
[13:55] *** wamba left
[13:56] *** aborazmeh left
[13:56] *** eliasr joined
[14:00] *** miki76 left
[14:01] *** Cabanossi left
[14:03] *** Cabanossi joined
[14:06] *** chakli joined
[14:11] *** wamba joined
[14:19] *** ryn1x joined
[14:22] *** darkmorph joined
[14:31] *** wander joined
[14:31] *** khw joined
[14:32] *** Cabanossi left
[14:33] *** Cabanossi joined
[14:35] *** piojo left
[14:44] *** Aaronepower joined
[14:48] *** mson joined
[14:55] *** ryn1x left
[15:00] *** Actualeyes left
[15:00] *** Actualeyes joined
[15:06] *** ryn1x joined
[15:08] *** Actualeyes left
[15:08] *** Actualeyes joined
[15:10] *** Actualeyes left
[15:10] *** wamba left
[15:10] *** rindolf left
[15:12] *** chakli left
[15:13] *** Actualeyes joined
[15:16] <buggable> New CPAN upload: RPi-Device-ST7036-0.0.3.tar.gz by PATRICKZ https://cpan.metacpan.org/authors/id/P/PA/PATRICKZ/Perl6/RPi-Device-ST7036-0.0.3.tar.gz

[15:19] <gfldex> how the world sees Perl 6 (through the eyes of my blog): https://screenshots.firefox.com/5OgIRlewbXpninxZ/wordpress.com

[15:20] <gfldex> (also firefox screenshots are nice)

[15:20] *** Actualeyes left
[15:20] *** Actualeyes joined
[15:21] *** piojo joined
[15:29] *** knight__ joined
[15:31] <knight__> Hello, I am using a module CSV::Parser and also I have installed libtext-csv-xs library, I am still getting this error.

[15:31] <knight__> perl6 test.p6 

[15:31] <knight__> Could not find symbol '&CSV'

[15:31] <knight__> also I used zef install CSV::Parser

[15:31] *** Cabanossi left
[15:32] <knight__> What is the problem?

[15:32] *** BenGoldberg joined
[15:32] <knight__> I understand, about missing symbol

[15:32] <knight__> but what shall I install?

[15:33] <gfldex> knight__: could you provide the source of test.p6 please?

[15:33] *** Cabanossi joined
[15:33] <knight__> wait

[15:38] <tbrowder>  gfldex: nice chart, looks like it should be linked to the perl6.org site and updated regularly,

[15:39] <gfldex> tbrowder: the weekly might provide better numbers

[15:40] <moritz> and in December the p6advent blog

[15:40] <tbrowder> sure. can you share the code?

[15:40] <gfldex> there is no code but making one shouldn't be to hard

[15:41] <Geth> ¦ ecosystem: patzim++ created pull request #378: RPi::Device:ST7036 moved to CPAN

[15:41] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/378

[15:41] <gfldex> you can ask wordpress to provide those stats

[15:41] <tbrowder> i would love to find p6 people near me—pms seem to be fading away in se us.

[15:42] <Geth> ¦ ecosystem: 2cf9a59a9f | (Patrick Zimmermann)++ (committed using GitHub Web editor) | META.list

[15:42] <Geth> ¦ ecosystem: RPi::Device:ST7036 moved to CPAN

[15:42] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/2cf9a59a9f

[15:42] <Geth> ¦ ecosystem: 0676ef74fa | lizmat++ (committed using GitHub Web editor) | META.list

[15:42] <Geth> ¦ ecosystem: Merge pull request #378 from patzim/patch-2

[15:42] <Geth> ¦ ecosystem: 

[15:42] <Geth> ¦ ecosystem: RPi::Device:ST7036 moved to CPAN

[15:42] <knight__> gfldex: I made mistake, I was using module the Text::CSV and it was failling - missing symbol.

[15:42] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/0676ef74fa

[15:42] <knight__> I changed module to CSV::Parser

[15:42] <knight__> and seems, that everything works... :-)

[15:43] <gfldex> tbrowder: we could steal code from https://medium.com/@dschnr/using-headless-chrome-as-an-automated-screenshot-tool-4b07dffba79a

[15:44] * moritz doesn't see the value

[15:44] <moritz> sure, it's a nice visual, but does it really provide relevant information?

[15:45] <gfldex> „relevant information“ is very subjective

[15:45] <moritz> fwiw the one from perl6advent is very similar visually

[15:46] <moritz> gfldex: let me rephrase. What decisions you or somebody else do might be influenced by seeing this?

[15:46] <gfldex> it's nice to know that the language barrier seams not to be the limiting factor for adoption

[15:46] <tbrowder> well, if we could do more fine-grained stats it could help perl meetup planning, marketing, etc.

[15:48] <moritz> gfldex: I'd draw a different conclusion. Since most users seems to be in the US, I should write Perl 6 stuff in English

[15:48] <moritz> (which I already concluded from running a German Perl 6 page for some time)

[15:50] <gfldex> english is taught pretty much anywhere in the world, yet there are plenty of grey spots on that map

[15:53] *** evalable6 left
[15:53] *** evalable6 joined
[15:53] *** ChanServ sets mode: +v evalable6

[15:53] *** zakharyas joined
[15:56] *** zakharyas left
[15:57] *** zakharyas joined
[16:01] *** zakharyas left
[16:01] *** zakharyas joined
[16:04] *** Aaronepower left
[16:08] *** mempko joined
[16:08] <AlexDaniel> squashable6: next

[16:08] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 5 days and ≈17 hours (2017-11-04 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[16:09] *** zakharyas left
[16:09] *** zakharyas joined
[16:10] *** zakharyas left
[16:15] * HoboWithAShotgun enters the room, grabs a coffee and takes place in the corner, silently sipping

[16:17] <lizmat> knight__: did you look at Text::CSV ?

[16:17] * lizmat was just wondering

[16:19] *** Morfent joined
[16:22] *** Mrofnet left
[16:24] <ugexe> "I was using module the Text::CSV and it was failling - missing symbol."

[16:24] <knight__> lizmat: I a use the CSV::Parser, The module which does not work (in my case) is Text::CSV and I did not check it also I gave up for searching solution...

[16:25] *** wamba joined
[16:25] <lizmat> what symbol was missing?  Was that during install or during running?

[16:25] <knight__> running &CSV

[16:26] <knight__> maybe some "low level" lib...

[16:26] <knight__> but, I have installed libtext-csv-perl (to debian)

[16:26] <lizmat> Text::CSV doesn't use any low level lib, it's Perl 6 code only

[16:27] <lizmat> not even any nqp ops in it

[16:27] <lizmat> so I'm a bit surprised

[16:27] <lizmat> m: say Text::CSV   # looks to me like you forgot to do a "use Text::CSV" ?

[16:27] <camelia> rakudo-moar 4fca94743: OUTPUT: «Could not find symbol '&CSV'␤  in block <unit> at <tmp> line 1␤␤»

[16:28] <knight__> Nope,

[16:28] <Geth> ¦ doc/W4anD0eR96-patch-1: 8fa97ee522 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/grammar_tutorial.pod6

[16:28] <Geth> ¦ doc/W4anD0eR96-patch-1: Update grammar_tutorial.pod6

[16:28] <Geth> ¦ doc/W4anD0eR96-patch-1: review: https://github.com/perl6/doc/commit/8fa97ee522

[16:29] <knight__> lizmat: I am doing something important, I can test it later...

[16:29] <lizmat> sure...  as I said, I was just wondering  :-)

[16:30] *** zakharyas joined
[16:30] *** mempko left
[16:34] *** ryn1x left
[16:37] *** mempko joined
[16:40] <Actualeyes> :smile:

[16:43] *** Aaronepower joined
[16:46] *** hythm joined
[16:51] *** piojo left
[16:52] *** BenGoldberg left
[16:54] *** rindolf joined
[16:55] *** domidumont joined
[16:56] *** zakharyas left
[16:58] *** ufobat_ left
[17:02] *** domidumont left
[17:02] *** domidumont joined
[17:10] *** xi- left
[17:10] *** xi- joined
[17:10] *** ChoHag left
[17:13] <wander> m: say "a(b" ~~ /a <|w> b/

[17:13] <camelia> rakudo-moar 4fca94743: OUTPUT: «Nil␤»

[17:13] <wander> confuse about how <|w> works

[17:14] *** BenGoldberg joined
[17:14] <wander> m: say "a(b" ~~ /a '('<|w> b/

[17:14] <camelia> rakudo-moar 4fca94743: OUTPUT: «｢a(b｣␤»

[17:16] <wander> ok, seems it works, <|w> doesn't really match characters

[17:16] *** Cabanossi left
[17:18] *** Cabanossi joined
[17:19] *** wamba left
[17:19] <geekosaur> right, it matches boundaries

[17:20] <knight__> m: my %hash := {"jozko dezko" => "asdf"}; say %hash<"jozko dezko">; dd %hash

[17:20] <camelia> rakudo-moar 4fca94743: OUTPUT: «((Any) (Any))␤Hash % = {"jozko dezko" => "asdf"}␤»

[17:20] <knight__> How can I get data from hash, when key is multi word?

[17:21] <knight__> m: my %hash := {"jozko dezko" => "asdf"}; say %hash<jozko dezko>; dd %hash

[17:21] <camelia> rakudo-moar 4fca94743: OUTPUT: «((Any) (Any))␤Hash % = {"jozko dezko" => "asdf"}␤»

[17:22] *** cdg joined
[17:25] <lizmat> m: my %hash := {"jozko dezko" => "asdf"}; say %hash{"jozko dezko"}; dd %hash

[17:25] <camelia> rakudo-moar 4fca94743: OUTPUT: «asdf␤Hash % = {"jozko dezko" => "asdf"}␤»

[17:25] <lizmat> use { } instead of < >

[17:26] <knight__> Thx

[17:26] <wander> m: dd <jozko dezko>;

[17:26] <camelia> rakudo-moar 4fca94743: OUTPUT: «("jozko", "dezko")␤»

[17:26] <wander> m: dd <"jozko dezko">;

[17:26] <camelia> rakudo-moar 4fca94743: OUTPUT: «("\"jozko", "dezko\"")␤»

[17:26] <lizmat> whatever is inside the { } is an expression, in that case the expression is "jozko dezko"

[17:27] <knight__> Thanks

[17:31] *** thowe joined
[17:34] *** darkmorph left
[17:36] *** Actualeyes left
[17:37] *** Actualeyes joined
[17:38] *** Actualeyes left
[17:39] *** ryn1x joined
[17:39] *** Actualeyes joined
[17:39] *** Actualeyes left
[17:40] *** Actualeyes joined
[17:41] *** Mrofnet joined
[17:41] *** Actualeyes left
[17:42] *** Actualeyes joined
[17:42] *** Merfont joined
[17:43] *** COMBORICO left
[17:44] *** Morfent left
[17:44] *** COMBORICO joined
[17:46] *** Mrofnet left
[17:48] *** Actualeyes left
[17:48] *** Actualeyes joined
[17:51] *** Actualeyes left
[17:51] <wander> m: my grammar G { token TOP { a { say "42" } b | a { say "12" } c }}.parse("ac");

[17:51] <camelia> rakudo-moar 4fca94743: OUTPUT: «42␤12␤»

[17:52] *** Actualeyes joined
[17:52] <wander> actions within grammar can do more than action objects, can't they?

[17:53] *** Actualeyes left
[17:53] <moritz> they can fire at different places

[17:53] *** Actualeyes joined
[17:53] <moritz> but can't do more, as far as I am aware

[17:56] *** patrickz left
[17:58] <wander> https://gist.github.com/W4anD0eR96/badcee7637b8315ef3f8ea4723f7d460

[18:00] <wander> how to implement ^^ with action objects? as what I know, action objects are called when match has done.

[18:00] *** Actualeyes left
[18:01] <wander> `class Actions { method TOP {AAA}}` equals `token TOP { BBB {AAA} }` I think

[18:01] <wander> *method TOP ($/)

[18:01] *** Actualeyes joined
[18:01] <timotimo> how does it equal that?

[18:03] *** eliasr left
[18:06] <wander> m: my grammar G { token TOP { a { say "42" } b | a { say "12" } c }}.parse("ac");

[18:06] <camelia> rakudo-moar 4fca94743: OUTPUT: «42␤12␤»

[18:07] <wander> how to do this with an action object?

[18:09] <timotimo> split TOP into two separate tokens

[18:09] <wander> right

[18:09] <wander> you show a way by changing grammar

[18:10] <wander> m: my grammar G { token TOP { a { say "42" } b}.parse("ac");

[18:10] <camelia> rakudo-moar 4fca94743: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3ken TOP { a { say "42" } b}.parse("ac");7⏏5<EOL>␤»

[18:10] <wander> m: my grammar G { token TOP { a { say "42" } b }}.parse("ac");

[18:10] <camelia> rakudo-moar 4fca94743: OUTPUT: «42␤»

[18:10] <timotimo> why do you need those two blocks to fire anyway?

[18:11] <wander> say "42" can be any code

[18:11] <evalable6> wander, rakudo-moar 8203073db: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/P_cWQYF0l5␤Two ter…»

[18:11] <evalable6> wander, Full output: https://gist.github.com/f0494e6d9ff50cca7905dbba0fd4e4f4

[18:11] <timotimo> i just find it surprising that both cases start with the same partial match

[18:13] <wander> it is a problem that occurs when I write a SDT of if-statement

[18:13] <wander> https://gist.github.com/W4anD0eR96/badcee7637b8315ef3f8ea4723f7d460

[18:13] <wander> what's important is I need the very code performs at exactly that place

[18:14] *** ryn1x left
[18:17] <wander> of course I can rewrite and put all actions suffix, but it seems action objects' method is always called after regex got matched

[18:17] <wander> curious whether actions within grammar are more flexible

[18:18] *** mson left
[18:24] <moritz> they aren't

[18:26] *** darutoko left
[18:26] <moritz> in a compiler, for example, it would be reasonable to have some things inline in {} blocks that deal with symbol tables for example, and need to happen immediately

[18:26] <moritz> but to still have regular action methods that transform the parse tree into an AST

[18:31] <wander> agree, it happens that i translate text on the fly

[18:33] <wander> back to the origin question, do action objects' methods always perform after the regex got matched?

[18:33] <moritz> yes

[18:33] <wander> thank you

[18:34] <HoboWithAShotgun> can anybody name a fictional programming language? you know, like Klingon just for computers

[18:34] *** poohman left
[18:35] *** poohman joined
[18:35] *** Morfent joined
[18:35] *** wamba joined
[18:35] *** bdmatatu joined
[18:36] <Geth> ¦ doc: c091ada9c5 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/grammars.pod6

[18:36] <synopsebot> Link: https://doc.perl6.org/language/grammars

[18:36] <Geth> ¦ doc: Update grammars.pod6

[18:36] <Geth> ¦ doc: 

[18:36] <Geth> ¦ doc: Add example about non-backtrack,

[18:36] <Geth> ¦ doc: fix typo and unify format

[18:36] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c091ada9c5

[18:38] *** ChoHag joined
[18:38] *** Merfont left
[18:40] <Geth> ¦ doc/W4anD0eR96-patch-1: a7a3bcea42 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/grammar_tutorial.pod6

[18:40] <Geth> ¦ doc/W4anD0eR96-patch-1: Update grammar_tutorial.pod6

[18:40] <Geth> ¦ doc/W4anD0eR96-patch-1: review: https://github.com/perl6/doc/commit/a7a3bcea42

[18:40] *** ryn1x joined
[18:41] <moritz> HoboWithAShotgun: I can't, and I wonder if we can simply implement all languages we can think of (and find believable)

[18:41] <moritz> (and with "me" I mean the programming community at large; I guess I couldn't even properly implement SQL or Prolog or so)

[18:45] <HoboWithAShotgun> how about a language which symbols are entirely chinese characters?

[18:46] <HoboWithAShotgun> no punctuation, no numbers, just logograms

[18:47] *** ChoHag left
[18:48] *** ChoHag joined
[18:48] <HoboWithAShotgun> m: say 一 + 两 == 3;

[18:48] <camelia> rakudo-moar 4fca94743: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix == instead␤at <tmp>:1␤------> 3say 一 + 两 ==7⏏5 3;␤»

[18:49] <HoboWithAShotgun> someone in some talk in some video said you could use all numbers

[18:50] <HoboWithAShotgun> that are numeric in unicode. i guess these arent

[18:50] <lizmat> m: say uniprop("两")

[18:50] <camelia> rakudo-moar 4fca94743: OUTPUT: «Lo␤»

[18:51] <lizmat> m: say uniprop("3")

[18:51] <camelia> rakudo-moar 4fca94743: OUTPUT: «Nd␤»

[18:52] <lizmat> m: say uniprop("π")

[18:52] <camelia> rakudo-moar 4fca94743: OUTPUT: «Ll␤»

[18:53] <moritz> HoboWithAShotgun: writing a programming language in a different script is just a small matter of transliteration, so that's not really in the "fictional" category for me

[18:53] *** ChoHag left
[18:53] <lizmat> "Any codepoint that has the No (Number, other) or Nl (Number, letter) property can be used standalone as a numeric value"

[18:53] <lizmat> from: https://docs.perl6.org/language/unicode_ascii#Numeric_values

[18:54] <lizmat> I guess π is handled separately by Perl 6 grammar  :-)

[18:54] <lizmat> because it is a term

[18:55] <wander> lizmat, https://github.com/rakudo/rakudo/commit/de1626553c6d83a948040d881c60856da3ed63bf

[18:56] * HoboWithAShotgun puts Acme::Numbers::Chinese in the todo list

[18:56] *** Mrofnet joined
[18:56] <lizmat> it's been a while since I've seen a '#?if !parrot'  :-)

[18:58] <wander>  16 Sep 2014 it tags, maybe others work on it later :P

[18:59] *** Morfent left
[19:00] <wander> is `#?if ... ` a macro? I have seen "macro is experimental"

[19:01] *** ryn1x left
[19:03] <lizmat> wander: it's not a macro, it's a directive for the fudger that combines all of the .pm files in src/core/ to a single file that is "the setting"

[19:03] <lizmat> available in gen/moar/CORE.setting

[19:03] <wander> got it

[19:04] *** leah2 joined
[19:04] <poohman> hello - Is this a good place to ask some questions about zef

[19:04] <poohman> ?

[19:04] *** domidumont left
[19:04] <moritz> poohman: I'd even say there's no better place than here :-)

[19:04] <lizmat> if you don't get an answer here, you might try #perl6-toolchain (if it gets very technical)

[19:05] <poohman> thanks, Im trying to install the PDF module using zef and I get thefollowing error,

[19:05] <poohman> Use of uninitialized value of type Any in string context.

[19:05] <poohman> Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.

[19:05] <poohman>   in block  at /home/winnie/.perl6/sources/4B1D5A60B59D9541E13F76E0E2A2D550E0144053 (Zef::Client) line 106

[19:06] <poohman> im able to search without any problems

[19:07] <poohman> but get this when I try to install it

[19:07] <poohman> sorry if I pasted something too long

[19:12] * moritz tries it

[19:13] <ugexe> probably the meta6.json file needs something changed

[19:13] <Geth> ¦ doc/W4anD0eR96-patch-1: 11bff0a953 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/grammar_tutorial.pod6

[19:13] <Geth> ¦ doc/W4anD0eR96-patch-1: Update grammar_tutorial.pod6

[19:13] <Geth> ¦ doc/W4anD0eR96-patch-1: review: https://github.com/perl6/doc/commit/11bff0a953

[19:15] *** yqt left
[19:18] <moritz> I get some warnings (or errors? hard to tell yet) from the PDF test suite

[19:18] <moritz> just warnings, it seems

[19:19] <poohman> this is a module name without the double semi colon - dont know if that has something to do with it

[19:19] <poohman> i was able to install::Grammar

[19:19] <poohman> sorry PDF::Grammar

[19:20] <poohman> the only such module I came across until now

[19:20] *** Merfont joined
[19:20] <moritz> it installed fine here, with rakudo version 2017.10-3-gf40babb

[19:22] <poohman> and how did you run it, please - zef install PDF ??

[19:22] <poohman> I have 2017.10-4-g4fca94743

[19:23] <poohman> but i updated it just to see if something changes - had the same problem with an older build as well

[19:23] *** Mrofnet left
[19:23] *** ggoebel left
[19:24] <El_Che> btw, new packages: https://github.com/nxadm/rakudo-pkg/releases/tag/v2017.10

[19:24] <moritz> poohman: yes, just "zef install PDF"

[19:24] <El_Che> I use the ubuntu 14.04 on travis

[19:24] *** Morfent joined
[19:25] <ugexe> poohman: what if you do `zef install https://github.com/p6-pdf/PDF-p6.git`

[19:25] <poohman> let me try it - moment

[19:26] <poohman> same problem

[19:27] *** Merfont left
[19:28] <ugexe> do you know what version of zef you are using? `zef info zef`

[19:28] <poohman> ver('0.1.9')

[19:29] <ugexe> oh, thats old so probably a bug in zef that has been fixed since

[19:30] <poohman> I installed zef again from the share folder after the git pull

[19:30] <poohman> what is the latest version?

[19:30] <ugexe> zef uninstall zef && git clone https://github.com/ugexe/zef && cd zef && perl6 -Ilib bin/zef install .

[19:30] <ugexe> 0.1.31

[19:32] <poohman> thanks let me give it a go

[19:36] <ugexe> then do `zef install PDF --deps-only`, then record the full output of `zef install PDF --debug` (so if it does not work I can take another guess)

[19:36] <ugexe> (2 commands because you dont need to record all the dependency stuff)

[19:37] *** ggoebel joined
[19:37] <poohman> i think i have zef installed elsewhere - its still showing 0.1.9 - even after the new install - let me check

[19:37] *** COMBORICO left
[19:38] <ugexe> zef uninstall zef should remove it

[19:41] <ugexe> https://github.com/rakudo/rakudo/pull/1125 # this fixes the issue with the old bin scripts getting invoked by rakudo (as noted by the last paragraph of initial message

[19:41] <ugexe> "Additionally this fixes an issue where .script

[19:41] <ugexe> would invoke older version bin/ scripts from ~/.perl6"

[19:42] <ugexe> so its probably not your fault

[19:42] <poohman> zef uninstall zef uninstalled the 0.1.31

[19:42] <poohman> i have another one in .perl6 folder

[19:43] <poohman> delete the folder??

[19:44] *** Piotr__ joined
[19:44] <poohman> wait ill do an uninstall with that particular zef and see if it helps 

[19:44] *** colomon joined
[19:44] <colomon> o/

[19:45] <poohman> says no matching candidates to uninstall

[19:46] <poohman> ill delete .perl6 

[19:46] <poohman> cd

[19:46] <timotimo> zef has "nuke" commands for that purpose

[19:47] <colomon> m: class Fred { method Dim() is DEPRECATED(‘dim’) { 1 } }; Fred.new.Dim

[19:47] <camelia> rakudo-moar 4fca94743: ( no output )

[19:47] <colomon> m: class Fred { method Dim() is DEPRECATED(‘dim’) { 1 } }; say Fred.new.Dim

[19:47] <camelia> rakudo-moar 4fca94743: OUTPUT: «1␤»

[19:48] <colomon> huh.  getting a very different result on 2017.05-303-g5e33934 (and in real code)

[19:49] <colomon> “Cannot invoke this object (REPR: Null; VMNull)”

[19:49] <ugexe> poohman yeah delete it, or `zef nuke RootDir`

[19:49] <ugexe> er

[19:49] <ugexe> sorry thats a different dir, yeah delete ~/.perl6

[19:49] <MasterDuke> fwiw, i think camelia is running with some sor of 'no deprecations' env var set

[19:50] <MasterDuke> mch: class Fred { method Dim() is DEPRECATED(‘dim’) { 1 } }; say Fred.new.Dim

[19:50] <committable6> MasterDuke, https://gist.github.com/475359b37e0596fb88a83e2fd21902e1

[19:50] <colomon> MasterDuke: I actually get the same result on my local rakudo IF I just use the above snippet

[19:50] <poohman> ok

[19:50] <colomon> MasterDuke: oooo, your example there is perfect

[19:53] <colomon> My code works perfectly without “is DEPRECATED”, gives the “Cannot invoke” error if I add “is DEPRECATED(‘dim’)” after my “method Dim()”

[19:54] * colomon is having that sort of day overall — “Can you work through enough bugs to actually get at the bug you are being asked to fix?”

[19:55] <MasterDuke> c: 5e33934 class Fred { method Dim() is DEPRECATED(‘dim’) { 1 } }; say Fred.new.Dim

[19:55] <committable6> MasterDuke, https://gist.github.com/0e56d7171c1126eb9f8b68d4674fd5f7

[19:57] *** ryn1x joined
[19:58] *** Aksamyt joined
[19:59] *** poohman left
[20:00] *** bdmatatu left
[20:01] *** poohman joined
[20:03] *** cdg left
[20:04] *** cdg joined
[20:04] *** bdmatatu joined
[20:09] <lizmat> colomon: which version of rakudo are you using ?

[20:09] *** cdg left
[20:09] <colomon> lizmat: 2017.05-303-g5e33934

[20:10] <lizmat> wow, that's ah pretty old ?

[20:10] <colomon> lizmat: indeed, since rakudo is an important $work tool for me these days, I don’t update it willy-nilly like in the good old days.

[20:10] <lizmat> colomon: could you gist output with --ll-exception?

[20:11] <colomon> lizmat: sure, hold on a sec

[20:12] <poohman> thanks all - got PDF module installed - had to force test openSSL though because native libssl.so was not found

[20:13] <colomon> lizmat: https://gist.github.com/colomon/1c509aa4ba4a245f2fb306b627616cef

[20:15] *** poohman left
[20:15] *** mempko left
[20:16] <colomon> it’s dying in trait_mod:<is> for DEPRECATED

[20:17] <lizmat> g5e33934 does not seem to be a valid commit ID ?

[20:17] <lizmat> ahh

[20:17] <lizmat> nom

[20:17] *** mempko joined
[20:17] <lizmat> no, that shouldn't make a difference ?

[20:17] <timotimo> yeah, need to drop the g

[20:19] <lizmat> colomon: I assume the Math::Vector module is precomped?

[20:20] <colomon> lizmat: I don’t know

[20:20] <lizmat> if you add "no precompilation" to Math/Vector.pm, does it still fail then ?

[20:21] <colomon> good call, works perfectly if I add that

[20:24] <lizmat> lemme check if we still have that problem

[20:24] <colomon> lizmat++

[20:26] <lizmat> we still have that issue on precomped files  :-(

[20:27] <colomon> can you explain the issue?

[20:28] <lizmat> https://github.com/rakudo/rakudo/issues/1219

[20:28] <colomon> lizmat++

[20:29] * colomon is back to working on the fixes, just now with “no precompilation”

[20:29] <lizmat> apparently something is not getting serialized

[20:34] *** ryn1x left
[20:51] <HoboWithAShotgun> my unit postifxes are too tight. $voltage = 12V works, $voltage = -12V; doesnt. methinks i have to make postfix V loser than the prefix -

[20:52] <HoboWithAShotgun> but how?

[20:52] *** espadrine joined
[20:58] *** Mrofnet joined
[21:00] *** Morfent left
[21:02] *** bdmatatu left
[21:04] *** knight__ left
[21:04] *** wamba left
[21:06] *** cdg joined
[21:11] *** cdg left
[21:12] *** Herby_ joined
[21:12] <Herby_> o/

[21:14] *** Brumbazz joined
[21:15] <Brumbazz> Hi :> I've just seen the following perl6 code on stackoverflow: someList.pairs.max(*.value).key <- how does that *.value work ? What's it called ? Thanks in advance :> 

[21:16] <HoboWithAShotgun> it's called Whatever/Whatevercode and it's a pit of snakes bridged by narrow planks

[21:16] *** lowin left
[21:17] <HoboWithAShotgun> basically the * introduces a closure and represents the argument to said closure, but only until accessed then it means the second argument and so on

[21:18] <HoboWithAShotgun> so grep({ * ~~ Int }) and grep( * ~~ Int) is equivalent code

[21:19] <HoboWithAShotgun> so grep({ $_ ~~ Int }) and grep( * ~~ Int) is equivalent code

[21:19] <Brumbazz> Aha, so is value just the value of the pair ? 

[21:20] <HoboWithAShotgun> yup

[21:21] <Brumbazz> Thanks :> I'll try to play around with it, thanks HoboWithAShotgun  :> 

[21:22] *** bdmatatu joined
[21:22] <Brumbazz> awesome HoboWithAShotgun  it works just as I wanted it to, thanks again :> 

[21:27] <lizmat> HoboWithAShotgun: https://docs.perl6.org/language/functions#index-entry-is_tighter

[21:27] *** Herby_ left
[21:28] <lizmat> m: sub postfix:<V>($a) is looser(&prefix:<->) { }

[21:28] <camelia> rakudo-moar 4fca94743: ( no output )

[21:33] *** bdmatatu left
[21:34] *** rindolf left
[21:38] *** ryn1x joined
[21:41] <HoboWithAShotgun> that seems to work. thanks lizmat

[21:42] <lizmat> HoboWithAShotgun: cool!  :-)

[21:43] *** Morfent joined
[21:44] *** Piotr__ left
[21:46] *** Mrofnet left
[21:50] *** mempko left
[21:50] *** nadim_ left
[21:53] *** setty1 left
[22:06] *** sena_kun left
[22:06] *** Mrofnet joined
[22:07] *** cdg joined
[22:07] *** bdmatatu joined
[22:07] *** BenGoldberg left
[22:09] *** Morfent left
[22:11] *** cdg left
[22:12] *** ryn1x left
[22:14] *** Sgeo joined
[22:26] *** cpage_ left
[22:28] *** cpage_ joined
[22:28] *** Morfent joined
[22:28] <timotimo> damn it! i completely forgot about the 0h game jam

[22:30] *** Mrofnet left
[22:38] *** bdmatatu left
[22:45] *** Morfent left
[22:45] *** Morfent joined
[22:46] *** ryn1x joined
[22:46] *** Cabanossi left
[22:48] *** Cabanossi joined
[22:49] *** bdmatatu joined
[22:51] *** ryn1x left
[22:54] * HoboWithAShotgun decides to go have a fat puff, now that this passes:

[22:54] <HoboWithAShotgun> ok 1000m / -100㎧ == -10s;

[22:54] *** bisectable6 left
[22:54] *** Mrofnet joined
[22:54] *** bisectable6 joined
[22:54] *** ChanServ sets mode: +v bisectable6

[22:56] *** darkmorph joined
[22:57] *** Morfent left
[23:00] *** bdmatatu left
[23:08] *** cdg joined
[23:12] *** cdg left
[23:16] *** yqt joined
[23:17] *** Cabanossi left
[23:18] *** Cabanossi joined
[23:23] *** ryn1x joined
[23:23] *** mson joined
[23:35] *** yqt left
[23:38] *** AlexDaniel left
[23:47] *** Cabanossi left
[23:48] *** Cabanossi joined
[23:55] *** ryn1x left
[23:58] *** dj_goku joined
