[00:04] <[Coke]> yes, way too much. :)

[00:05] <[Coke]> in App::Uni, I currently have:

[00:05] *** ZofBot left
[00:05] <[Coke]> $ PERL6LIB=lib bin/uni -c ¬∂

[00:05] <[Coke]> ¬∂ - U+0000B6 - PILCROW SIGN [Po]

[00:06] <[Coke]> Just wondering if there is a precedent for displaying the [Po] like that.

[00:07] <AlexDaniel> just yoleaux and unicodable, that's it I think

[00:08] *** mcmillhj joined
[00:08] *** ZofBot joined
[00:08] *** ChanServ sets mode: +v ZofBot

[00:08] *** kurahaupo_ left
[00:09] *** ZofBot left
[00:10] *** ZofBot joined
[00:10] *** ChanServ sets mode: +v ZofBot

[00:10] *** ZofBot left
[00:14] *** mcmillhj left
[00:15] *** mcmillhj joined
[00:20] *** ZofBot joined
[00:20] *** ChanServ sets mode: +v ZofBot

[00:20] *** mcmillhj left
[00:21] *** wamba left
[00:22] <[Coke]> zef bug? I have an installed version of App::Uni - I added a sub in the package; when I run the test in my git checkout, it's fine. if I do "zef install ." with an updated .json file (new version to force an install), it complains it cannot find the new sub.

[00:22] <ZofBot> [Coke], zef bug? I have an installed version of App::Uni - I added a sub in the package; when I run the test in my git checkout, it's fine. if I do "zef install ." with an updated .json file (new version to force an install), it complains it cannot find the new sub.

[00:22] <[Coke]> zoffix, fix yer bot.

[00:23] <[Coke]> feels like it's running the tests during the install against the installed lib version, not the new one.

[00:23] <ZofBot> [Coke], feels like it's running the tests during the install against the installed lib version, not the new one.

[00:23] *** ZofBot left
[00:23] <[Coke]> Are you just going to keep repeating everything I say?

[00:25] *** ZofBot joined
[00:25] *** ChanServ sets mode: +v ZofBot

[00:25] <[Coke]> ... weird.

[00:25] <timotimo> should we give +v to a bot that does nothing but echo? :)

[00:26] <[Coke]> .seen ugexe

[00:26] <yoleaux> I saw ugexe 1 Apr 2017 05:48Z in #perl6: <ugexe> openssl bumped to 0.1.8 with MasterDuke's leak fix

[00:26] *** kurahaupo joined
[00:27] *** ZofBot_ joined
[00:27] *** ChanServ sets mode: +v ZofBot_

[00:27] *** ZofBot_ left
[00:27] *** ZofBot left
[00:27] *** ZofBot joined
[00:27] *** ChanServ sets mode: +v ZofBot

[00:29] *** ZofBot left
[00:30] *** ZofBot joined
[00:30] *** ChanServ sets mode: +v ZofBot

[00:31] *** ZofBot left
[00:31] *** ZofBot joined
[00:31] *** ChanServ sets mode: +v ZofBot

[00:31] <[Coke]> perl6 -MApp::Uni -e 'say uni-gist(0x1234)'

[00:31] <[Coke]> ·à¥ - U+001234 - ETHIOPIC SYLLABLE SEE [Lo]

[00:31] <[Coke]> there, that's why I did the stupid thing. \o/

[00:32] *** ZofBot left
[00:33] *** kurahaupo_ joined
[00:33] *** skink left
[00:33] <[Coke]> (though having the uni command means I don't really need it)

[00:34] *** kurahaupo left
[00:35] *** mcmillhj joined
[00:35] *** pelev joined
[00:36] *** ZofBot joined
[00:36] *** ChanServ sets mode: +v ZofBot

[00:36] <ugexe> [Coke]: I dont think its possible for the tests to use a installed copy of something that is in a dist that will be tested

[00:36] *** ZofBot left
[00:37] *** ZofBot joined
[00:37] *** ChanServ sets mode: +v ZofBot

[00:37] <ugexe> because they all get ran with `perl6 -Ilib ...` essentially - so lib/ is always in front

[00:37] <ugexe> that sounds like a precomp thing

[00:37] *** ZofBot left
[00:38] *** ZofBot joined
[00:38] *** ChanServ sets mode: +v ZofBot

[00:40] *** ZofBot left
[00:40] <ugexe> the output with RAKUDO_MODULE_DEBUG=1 will show you where each module gets loaded from

[00:40] *** kurahaupo_ left
[00:40] *** pelev left
[00:40] *** mcmillhj left
[00:42] *** cpage left
[00:42] *** cpage__ joined
[00:42] *** ZofBot joined
[00:42] *** ChanServ sets mode: +v ZofBot

[00:43] *** ZofBot left
[00:44] *** kyan left
[00:46] *** zapwai joined
[00:51] *** kyan joined
[00:51] *** ZofBot joined
[00:51] *** ChanServ sets mode: +v ZofBot

[00:54] *** mcmillhj joined
[00:56] *** cyphase left
[00:59] *** mcmillhj left
[01:00] <[Coke]> ugexe: I see "Late loading 'App::Uni'" - then it eventually loads $HOME/.perl6/precomp/UUID

[01:00] <ugexe> can you send me the gist of all of it?

[01:01] <ugexe> but looks like if you delete $HOME/.perl6 it should work?

[01:01] <[Coke]> https://gist.github.com/coke/14ec1086f762455e39ae9cd73dd440cf

[01:01] <[Coke]> Sure, but why should it be picking that up?

[01:02] <ugexe> im not sure, i've had it happen before but never consistently

[01:02] <[Coke]> ok. removing ~/.perl6 cache...

[01:02] <ugexe> so its not a common state to get into, but somehow...

[01:02] *** labster left
[01:03] <[Coke]> same error.

[01:03] *** kyan left
[01:04] <[Coke]> now loading App::Uni from /Users/williamcoleda/.rakudobrew/moar-nom/install/share/perl6/site/precomp/UUID

[01:04] <[Coke]> too many precomp dirs.

[01:05] <[Coke]> and why it's not getting invalidated, Iunno

[01:07] <[Coke]> zef install --force App::Uni - letting it complete, it installs, but all the tests fail (because I installed an intermediate version); running the command again, it works.

[01:07] <[Coke]> (that is, all the tests pass the second time)

[01:08] <[Coke]> unfortunately, the git repo I had locally that allowed me to get into this state no longer exists, I rebased it.

[01:08] <[Coke]> but I can probably come up with a scenario that fails again.

[01:12] <ugexe> all the tests fail for me too

[01:12] <[Coke]> .tell rjbs https://github.com/coke/p6-uni

[01:12] <yoleaux> [Coke]: I'll pass your message to rjbs.

[01:13] <ugexe> ahh i see. this is like before i think... you have to pass in the includes to run/shell

[01:13] *** mcmillhj joined
[01:13] <ugexe> in your tests

[01:15] <[Coke]> the PERL6LIB isn't passed through to the sub-perl6, ah.

[01:16] <[Coke]> oh. you're not using the env var.

[01:16] <[Coke]> ok. I'll see if I can figure out how to do that. Danke.

[01:17] <ugexe> my @include = $*REPO.repo-chain.map(*.path-spec)) should work

[01:18] *** mcmillhj left
[01:22] <[Coke]> ugexe++

[01:22] <ugexe> https://github.com/gfldex/perl6-typesafe-xhtml-writer/blob/master/Build.pm#L9-L10 [Coke] this is a good example

[01:23] <[Coke]> I will have to digest that. Thanks.

[01:23] <[Coke]> nite

[01:24] <ugexe> later - also you know how to unrevert this now :) https://github.com/perl6/doc/commit/445dc78714daa0d2e14d1ec1bc8814eca924eb7b

[01:29] *** mcmillhj joined
[01:33] *** mcmillhj left
[01:42] *** bdmatatu joined
[01:43] *** bdmatatu left
[01:45] *** ilbot3 left
[01:47] *** xfix joined
[01:48] *** ilbot3 joined
[01:48] *** ChanServ sets mode: +v ilbot3

[01:50] *** mcmillhj joined
[01:55] *** mcmillhj left
[02:16] *** pochi left
[02:28] *** noganex_ joined
[02:31] *** noganex left
[02:33] *** gdonald left
[02:33] *** gdonald joined
[02:38] *** mcmillhj joined
[02:42] *** vendethiel- left
[02:42] *** mcmillhj left
[02:43] *** vendethiel joined
[03:06] *** aindilis joined
[03:23] *** cyphase joined
[03:24] *** sammers left
[03:25] *** mcmillhj joined
[03:29] *** nightfrog joined
[03:30] *** mcmillhj left
[03:35] *** drbojingle joined
[03:36] <samcv> [Coke], i think i may want to use freebsd's memmem on macos as well

[03:36] *** perlnecrohacker left
[03:37] *** kyan joined
[03:38] <samcv> [Coke], would you be able to bench something for me on mac?

[03:38] *** perlnecrohacker joined
[03:38] *** perlnecrohacker left
[03:38] <samcv> well just run simple test and compare between two commits

[03:40] *** perlnecrohacker joined
[03:40] *** perlnecrohacker left
[03:41] *** perlnecrohacker joined
[03:41] *** perlnecrohacker left
[03:42] <llfourn> samcv: I can bench again soon if you give me a gist. Can't do it right now though.

[03:42] <samcv> yay!

[03:42] <samcv> ok llfourn https://github.com/samcv/MoarVM/tree/memmemindex_test

[03:42] *** skids left
[03:42] <llfourn> ^ let you know when I've done it :)

[03:42] <samcv> new test branch. need benching between the most recent commit it memmemindex_test and the one before it

[03:42] <samcv> it's ready to clone

[03:42] <llfourn> rgr that

[03:42] *** Cabanossi left
[03:43] <samcv> so most recent commit in that branch is "Commit to test speed between native and FreeBSD memmem" so need that compared to the previous commit (previous commit uses a system's native memmem)

[03:43] <samcv> i'm expecting the most recent commit to be faster

[03:43] *** perlnecrohacker joined
[03:43] *** perlnecrohacker left
[03:43] <samcv> say 'a' x 1000000000 ~ 'b' ~~ /abcde/; say now - INIT now; and then also try say 'a' x 1000000000 ~ 'b' ~~ /a/; say now - INIT no

[03:43] <evalable6> samcv, Full output: https://gist.github.com/3d409ce26b1b5bd5255f0b038840de23

[03:43] <evalable6> samcv, rakudo-moar af50e064f: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/NfX2Ny1ToV‚ê§No vali‚Ä¶¬ª

[03:44] <samcv> not for you evalable6 

[03:44] <geekosaur> heh

[03:45] *** Cabanossi joined
[03:45] *** perlnecrohacker joined
[03:45] *** perlnecrohacker left
[03:46] *** mcmillhj joined
[03:46] *** perlnecrohacker joined
[03:46] *** perlnecrohacker left
[03:47] <u-ou> hello o/

[03:47] *** perlnecrohacker joined
[03:48] *** perlnecrohacker left
[03:49] *** labster joined
[03:50] *** khw left
[03:51] *** mcmillhj left
[03:52] <samcv> glibc uses knuth-pratt-meyer string search. modern freebsd uses Two-way string-matching as described in this paper https://cry.nu/files/Two-way%20string-matching%20Crochemore%2C%20Perrin%20%201991.pdf Crochemore, perrin 1991

[03:52] <u-ou> what's memmem? is there a memememe?

[03:52] <samcv> memmem finds blocks of memory inside memory

[03:52] <ilbelkyr> it's to strstr what memcpy is to strcpy I guess

[03:52] <samcv> so it will make our regex and string indexing faster

[03:53] <samcv> strstr is just a defective memmem that cannot search things that contain null bytes :P

[03:54] *** zapwai left
[03:55] <samcv> Abstract. A new string-matching algorithm is presented, which can be viewed as an intermediate

[03:55] <samcv> between the classical algorithms of Knuth, Morris, and Pratt on the one hand and Boyer and Moore, on

[03:55] <samcv> the other hand. T

[03:55] <samcv> hmm

[03:55] <samcv> interesting :)

[04:00] *** AlexDaniel left
[04:02] <samcv> oh llfourn make sure to do a make clean before testing the other one

[04:04] *** mcmillhj joined
[04:06] *** Limit left
[04:09] *** mcmillhj left
[04:10] <samcv> timings for me: /abcde/ GLIBC 4.29s FBSD 3.78s

[04:11] <samcv> and /a/ GLIBC 3.43s FBSD 3.36

[04:11] <samcv> avg of 3-4 runs

[04:11] <samcv> will be cool to see what the macos results are :)

[04:12] *** Cabanossi left
[04:14] *** Cabanossi joined
[04:14] <samcv> and percentages: glibc 13% faster with /abcde/; fbsd 2% faster with /a/ (probably statistically meaningless

[04:15] <geekosaur> either I am not understanding your timings or one of those numbers is wrong?

[04:21] <samcv> hmm?

[04:22] <TEttinger> yeah, you gave numbers wehere FBSD took less time for /abcde/

[04:22] <samcv> oh

[04:22] <samcv> that's reversed

[04:22] <samcv> my bad

[04:22] <samcv> glibc was slightly faster with abcde

[04:23] <TEttinger> how many runs are you doing?

[04:23] <samcv> 4

[04:23] <samcv> very constant times btw

[04:23] <samcv> all very close

[04:23] <samcv> err tighty grouped that is

[04:24] <TEttinger> I may have missed something, but that's not 4 string finds that take 3-4 seconds I hope :)

[04:24] <geekosaur> generally it's fast enough that you do a run of 10000 or so

[04:24] <samcv> well it's 'a' x 1000000000 ~ 'b' ~~ /abcde/

[04:24] <samcv> so it's a pretty long string

[04:24] <geekosaur> ah

[04:25] <TEttinger> I wonder how much of that is overhead from creating a billion-char string

[04:26] *** gdonald left
[04:26] <samcv> maybe a lot

[04:26] *** gdonald joined
[04:27] <samcv> err not that much i guess

[04:27] <samcv> i get the same time from my $var = 'a' x 1000000000 ~ 'b'; my $t1 = now; $var ~~ /b/; say now - $t1

[04:34] <samcv> gonna compare just the raw nqp::index function now

[04:35] <samcv> though i think the actual regex is probably better representative

[04:38] <samcv> fbsd looks a bit faster with just nqp::index starting at 0. but glibc def has an edge in actual perl6 regex

[04:38] <samcv> llfourn, you done tests yet?

[04:42] *** mcmillhj joined
[04:42] *** drbojingle left
[04:47] *** mcmillhj left
[04:53] *** mcmillhj joined
[04:58] *** mcmillhj left
[04:58] *** mcmillhj joined
[05:00] *** rurban joined
[05:00] *** rurban left
[05:01] <samcv> llfourn, you still alive ;)

[05:03] *** mcmillhj left
[05:09] <u-ou> :)

[05:10] *** mcmillhj joined
[05:11] *** Cabanossi left
[05:11] <BenGoldberg> The fastest libraries for doing regex are going to be dfa-based ones, like re2 and ragel.

[05:12] <u-ou> I think perl 6 grammars are a really really good idea

[05:12] <u-ou> there i said it

[05:13] <samcv> yay!

[05:14] <samcv> and they are nice

[05:14] <u-ou> I also like twigils

[05:15] *** Cabanossi joined
[05:16] *** mcmillhj left
[05:24] *** mcmillhj joined
[05:29] *** mcmillhj left
[05:31] *** kyan left
[05:35] *** mcmillhj joined
[05:44] *** faraco joined
[05:57] *** Cabanossi left
[05:59] *** Cabanossi joined
[06:05] *** xinming left
[06:07] *** xinming joined
[06:13] *** wamba joined
[06:18] *** dwarring left
[06:28] *** ChoHag joined
[06:31] *** rurban joined
[06:33] *** jdmmmmm left
[06:34] *** wamba left
[06:37] <moritz> good morning

[06:37] <moritz> (off-topic) I've cobbled together a cover image for my first book: https://leanpub.com/deploy feedback welcome!

[06:40] <moritz> my wife says it looks like a vacation guide, so I'm looking for something more abstract now... :-)

[06:41] <mst> I actually quite like that cover

[06:41] *** Cabanossi left
[06:41] <mst> this almost certainly means you should replace it ;)

[06:42] <moritz> :-)

[06:42] <moritz> mst: thanks

[06:43] <samcv> good morning

[06:43] <moritz> \o samcv 

[06:43] <samcv> your wife is not wrong

[06:44] <moritz> she usually isn't, when it comes to that sort of thing :)

[06:44] <samcv> maybe something in black and white. like archetecture of buildings or something

[06:45] *** Cabanossi joined
[06:47] <samcv> or even something like this http://www.thepluspaper.com/wp-content/uploads/2017/01/White-Lines-and-Blueprints.png

[06:47] <samcv> the piece was supposed to have symbolic meaning moritz ?

[06:48] *** ufobat joined
[06:49] <moritz> samcv: in a very abstract/stretchy way, yes

[06:49] <samcv> http://active8studios.co.uk/structures

[06:49] <samcv> maybe one of these

[06:49] <samcv> i like these bridges

[06:50] <moritz> nice idea, thanks

[06:50] <moritz> afk, sorry&

[06:50] <TEttinger> something continuous... stretchy... salep dondurma

[06:50] <samcv> something about these bridges. http://active8studios.co.uk/wp-content/uploads/Sydneyharbourbridge1.jpg they are nice

[06:50] <mst> moritz: INVENT A MOEBIUS TRUCK

[06:50] <samcv> and i guess you can buy them

[06:51] <TEttinger> http://www.ediblegeography.com/wp-content/uploads/2010/04/Stretchy-Icecream.jpg

[06:51] <TEttinger> continuous mustache deployment

[06:51] <samcv> i want one of those bridges now...

[06:51] <samcv> damn

[06:53] <samcv> even got wireframe boards and ships http://active8studios.co.uk/boats-ships

[06:57] <samcv> damn it. people stole my bridge idea https://www.amazon.com/s/ref=nb_sb_noss_2?url=search-alias%3Daps&field-keywords=continuous+development&rh=i%3Aaps%2Ck%3Acontinuous+development

[06:58] <samcv> and i had thought about. well maybe a bridge with a boat to be more original. and there's some 99 cent kindle ebook with a bridge and a boat

[06:58] *** faraco left
[06:58] <TEttinger> continuous deployment... a picture of a map of iraq.

[06:59] <samcv> and this one is def awesome https://www.amazon.com/Continuous-Architecture-Sustainable-Agile-Cloud-Centric/dp/0128032847/ref=sr_1_54?ie=UTF8&qid=1491634739&sr=8-54&keywords=continuous+development

[06:59] <samcv> though a bit ambitious with the cover

[07:00] <samcv> what about racks of servers. but photoshopped to go on forever https://ititch.com/wp-content/uploads/2012/10/smtp-server.jpg

[07:01] <samcv> continuous etc

[07:01] <samcv> just to infinity

[07:01] <samcv> that could be neat and original

[07:01] <samcv> (maybe)

[07:01] <samcv> as long as there aren't contiuous deployment books with that then maybe it would be ok... idk. 

[07:02] <samcv> maybe just a still from the movie Hackers http://wallpapersafari.com/w/VKJpHR/

[07:02] <samcv> why not

[07:03] <samcv> oh. what about. windmills

[07:03] <samcv> because sustainable power

[07:03] <samcv> also they look nice

[07:03] <huf> "tilting at windmills" is perhaps not what you want to suggest

[07:03] <samcv> and they spin and aren't cliche like gears or like. something else

[07:04] <samcv> that's from a made up story though

[07:04] <huf> ducks dont often grow 7 feet tall.

[07:04] <TEttinger> ooooh a space filling curve

[07:04] <samcv> not like old windmills. but the new ones

[07:05] <huf> oh

[07:05] <samcv> http://www.crystalinks.com/windmills.jpg look how big the blades are

[07:05] <samcv> idk. windmills turning is soothing

[07:05] <TEttinger> here's a space filling curve I had fun making https://www.dropbox.com/s/w6uvhtsz30d8msr/Puka_Curve.png?dl=0

[07:06] <samcv> how did you make it. program?

[07:06] <TEttinger> magicavoxel, hand-placed voxels, it rendered it

[07:06] <samcv> i don't understand what windmills. http://www.miltwright.com/products/images_p/windmills2016.jpg has to do

[07:06] *** BenGoldberg left
[07:06] <samcv> with this topic.

[07:07] <TEttinger> don quixote is a well-known classic tale

[07:08] <TEttinger> windmills, specifically the mill part, are "legacy hardware"

[07:08] <TEttinger> since most milling is done by more efficient machines

[07:08] <samcv> even this type of windmill. which is pretty awesome http://discovermagazine.com/2008/oct/24-high-flying-windmills-blow-away-their-ground-based-cousins

[07:08] <samcv> yeah i've read it

[07:08] <samcv> though i've never heard that phrase used before. other than in the booj

[07:08] <samcv> *book

[07:08] <TEttinger> hm

[07:09] <samcv> wind turbine

[07:09] <TEttinger> I think you're on the righ track though

[07:09] <samcv> i guess i mean

[07:09] <TEttinger> engine of progress is a term

[07:09] <TEttinger> wheels of progress

[07:09] <samcv> how about

[07:09] <samcv> the international space station

[07:09] <TEttinger> turbines are sorta engines

[07:09] <TEttinger> heh

[07:09] <samcv> *mindblown*

[07:09] <samcv> that could be cool

[07:10] <samcv> though idk maybe could make people feel distant and alone

[07:10] <samcv> but it's very much continuous delivery

[07:11] <TEttinger> that curve image is for a 5x5x5 curve, which is one of zillons possible, but the group has interesting properties if you need a tight mapping of points in a 3D cube to items in a collection that has a max size that's a poor fit for more normal curves like the Hilbert curve

[07:11] *** ChoHag left
[07:12] <TEttinger> since a 2x2x2 uses 8 points or a power of 8, and this uses 125 points or, oddly, 125 times a power of 8 (due to how you can lay them out next to each other. continuously.)

[07:14] <samcv> just have a 7-Eleven store on the cover

[07:14] <samcv> 24 hour pharmacy

[07:14] <TEttinger> ha totally

[07:14] *** TimToady left
[07:14] <TEttinger> there's some fun math stuff in the space-filling curve area. it's pretty crazy to me how there's always a relationship between hilbert curves and gray codes, despite them being discovered in completely separate fields and decades apart

[07:15] <TEttinger> also, that applies in arbitrary dimensions, which is the real mind blowing part

[07:16] *** TimToady joined
[07:30] *** domidumont joined
[07:31] <samcv> nice

[07:31] <samcv> that sounds neat

[07:32] <samcv> there are many things in the natural world that are discovered in mathematics first and then end up getting discovered in physics and in nature later. because there is a natural structure of the universe and the rules that govern it can be seen many places

[07:36] *** domidumont left
[07:36] *** domidumont joined
[07:36] <samcv> i took a class in university called symmetry and aesthetics in contempory physics, which was very interesting, in addition to many times stumbling upon the same algorithm seen in multiple places by *chance*, mathematicians and physisitss have often seeked symmetry, order, and elegance in their studies

[07:37] <samcv> one of my favorite classes I ever took I think

[07:42] <llfourn> samcv: going to test now if you still want it? :)

[07:42] <samcv> yes very much

[07:43] <samcv> i missed you

[07:43] <llfourn> ^_^

[07:45] <samcv> llfourn, sec lemme get you what to dtest

[07:49] <samcv> llfourn, gonna make it easy for you

[07:50] *** avalenn left
[07:55] <samcv> ok llfourn https://gist.github.com/2aac7ec4ad19129365ee95bcb6a4aae4 you can just run this

[07:55] <llfourn> samcv sure

[07:55] <samcv> just run it as a script and it will label each time seperately from each other

[07:56] <samcv> prolly will take 1 min per run

[07:57] <samcv> oh uh

[07:57] <samcv> for i in $(seq 1 4); do perl6 stringregexbench.p6 > /dev/null; done

[07:57] <samcv> and it will only output the times and not the results of the regex

[07:58] <samcv> since times go to stderr

[07:58] <llfourn> kk :)

[07:58] <llfourn> btw I am recompiling moar and then doing perl Configure.pl --gen-nqp --backends=moar

[07:58] <samcv> you don't have to recompile nqp or rakudo

[07:58] <llfourn> i guess I should recompile nqp each time?

[07:58] <samcv> just moar

[07:59] <llfourn> oh ok

[07:59] <samcv> yeah

[07:59] <samcv> recompiling nqp you need to compile rakudo. but moarvm is standalone

[07:59] <samcv> since it just reads bytecode

[08:00] <llfourn> yeah I guessed what you were doing is just needed at runtime but wasn't sure

[08:02] *** ChoHag joined
[08:05] *** rindolf joined
[08:08] *** robertle joined
[08:11] <llfourn> samcv: preliminary results: https://gist.github.com/LLFourn/f39625d7c0d2fee27f58bf4eda7bc3b8

[08:12] <llfourn> looks like FreeBSD wins?

[08:12] *** domidumont left
[08:13] <samcv> yeah i knew that for macos. but geekosaur maybe i did have those backwards

[08:14] <samcv> cause i'm getting faster for freebsd compared to glibc

[08:15] <samcv> which is fine with me actually because the freebsd one is more easily integratable abort from libc. glibc was gonna be annoying if i wanted to use their library across platforms

[08:16] <samcv> and take the code out and use it for mac or windows

[08:16] *** rindolf left
[08:16] *** RabidGravy joined
[08:17] <llfourn> \o/

[08:18] <geekosaur> you'd have a license problem anyway, don't think you could do that and relicense as dual gpl/artistic 2.0

[08:20] <samcv> ok maybe i was wrong. i think that test was off for whatever reason. dunno why all results were slower

[08:23] <samcv> though libc may have a little edge on glibc.

[08:23] <samcv> so maybe it would just be easier to just use it for all versions

[08:24] *** rindolf joined
[08:26] <llfourn> https://gist.github.com/LLFourn/f39625d7c0d2fee27f58bf4eda7bc3b8 # updated with seq 1 4 results

[08:30] <samcv> overall they seem very close between glibc and libc.. i'm inclided to keep my pull request as it stands now.

[08:31] <Woodi_> hallo #perl6 :)

[08:31] <samcv> hello Woodi_ 

[08:33] <samcv> since glibc seems to do better with more complex needles which may be more likely to happen in practice.

[08:36] <geekosaur> so, uh, did you even think about the license situation I mentioned?

[08:36] <samcv> the GPL one?

[08:36] <samcv> or MIT one which freebsd has

[08:37] <samcv> i was not aware GPL was incompatible with Artistic 2.0

[08:37] <samcv> though i knew MIT was definetly ok

[08:37] <geekosaur> gpl coe forces moarvm to be gpl instead of artistic 2.0

[08:38] <geekosaur> https://github.com/MoarVM/MoarVM/blob/master/LICENSE

[08:39] <Woodi_> moritz: #deploy picture is realy nice but looks dreamy/impresionistic. a lot of "sharpness" would be much more "classic" for IT book :)  but "rack of servers" sounds realy nice for a topic. anyway, cover does not matter if book is good, could be plain black or white with some strings :)

[08:41] <samcv> yep reading gpl/artistic texts makes that clear to me geekosaur.

[08:42] <samcv> i think i misthought cause  i think perl is under artistic and GPL

[08:42] <samcv> so thought they were compatible mistakingly

[08:44] <geekosaur> even that's not good enough because any contributed code that is gpl license can't be used under artistic license

[08:44] <geekosaur> the creator of a work can choose to dual-license. but since you took that code from glibc, you're bound by glibc's license

[08:44] <samcv> yes i know

[08:45] <samcv> i mistakenly though tthey were compatible becuase perl was gpl and artistic. thank you for helping point that out to me

[08:48] <moritz> mst: I like the idea of using a m√∂bius strip, maybe something like this: https://www.flickr.com/photos/maxf/7692061042

[08:48] <RabidGravy> Boom!

[08:48] <samcv> i like that moritz 

[08:49] <samcv> can it be a boat sailing on a mobius strip? heh

[08:51] <samcv> or this https://s-media-cache-ak0.pinimg.com/736x/74/7a/ce/747ace162d395798a2948722cc4b792b.jpg

[08:52] <samcv> "A Computer Mystery Adventure"

[08:52] *** camelia left
[08:53] *** camelia joined
[08:53] <samcv> what's the craziest programming/computer book cover you guys know of?

[08:54] <RabidGravy> what was that series of books with the people in traditional costumes?

[08:54] *** ChanServ sets mode: +v camelia

[08:54] <samcv> this one is not bad https://s-media-cache-ak0.pinimg.com/236x/d8/2e/9f/d82e9f3ef8800bbb7d11bad32aac4d97.jpg

[08:54] <Woodi_> samcv: all that animals on O'Raily books ? :)

[08:54] <samcv> i would buy that book

[08:55] <samcv> they're just animals

[08:55] <samcv> there's gotta be some super wierd cover

[08:55] <RabidGravy> visualising hell sounds like my day job ;-)

[08:55] <samcv> https://upload.wikimedia.org/wikipedia/en/thumb/4/41/Screamcover.jpg/250px-Screamcover.jpg

[08:55] *** nine left
[08:55] <samcv> oh no...

[08:57] *** cognominal joined
[08:58] <RabidGravy> https://images-na.ssl-images-amazon.com/images/I/41olwYd66-L._SX404_BO1,204,203,200_.jpg - these ones, what is that all about?

[08:58] <RabidGravy> also the "Beginning $X" series with really appalling pictures of the authors on the front

[08:58] *** nine joined
[08:58] *** camelia left
[08:59] *** camelia joined
[09:00] *** ChanServ sets mode: +v camelia

[09:00] *** cog_ left
[09:02] *** cognominal left
[09:04] *** ChoHag left
[09:10] *** AlexDaniel joined
[09:11] *** ChoHag joined
[09:11] *** ChoHag left
[09:15] *** sammers joined
[09:17] *** ufobat left
[09:17] *** mxco86 left
[09:21] *** kurahaupo joined
[09:21] *** darutoko joined
[09:24] <gfldex> samcv: https://i2.wp.com/gfldex.files.wordpress.com/2010/08/0025e5041762b0f1822f2d230b58c821.jpg?ssl=1

[09:24] <moritz> yes, that *is* weird

[09:26] *** ChoHag joined
[09:26] <RabidGravy> I think we have a winner

[09:27] <RabidGravy> somewhere in the house I have a book like "learning FORTH and COBOL in parallel" which is a weird concept in itself

[09:29] <RabidGravy> and in that genre of totally not right on and inappropriate computer covers http://flashbak.com/yugoslavian-computer-magazine-cover-girls-of-the-1980s-90s-370271/

[09:29] *** ChoHag left
[09:34] *** ChoHag joined
[09:36] *** AlexDaniel left
[09:37] *** kurahaupo left
[09:41] *** kurahaupo joined
[09:42] *** ChoHag left
[09:46] *** kurahaupo left
[09:52] *** domidumont joined
[09:52] *** andrzejk_ joined
[09:53] *** ChoHag joined
[10:02] *** ChoHag left
[10:03] *** ChoHag joined
[10:12] *** Cabanossi left
[10:14] *** Cabanossi joined
[10:17] <andrzejk_> hey

[10:17] <andrzejk_> :)

[10:18] <andrzejk_> who is here?;s I need help much

[10:24] *** TEttinger left
[10:32] <RabidGravy> you just think you do

[10:37] <andrzejk_> help me please

[10:39] <andrzejk_> RabidGravy ?

[10:39] <RabidGravy> ASK THE QUESTION

[10:40] <andrzejk_> RabidGravy man don't be anger I just thought that noone here today

[10:40] <andrzejk_> RabidGravy I am looking for details or history how rakudo was built

[10:41] <RabidGravy> I'm not angry :)

[10:41] <RabidGravy> it's just better to ask the question then anyone who comes along can see it and answer

[10:42] <RabidGravy> anyhow I'm off out shopping :)

[10:42] <lizmat> .oO( it all started at a CamelHerders meeting long ago...)

[10:45] *** kurahaupo joined
[10:45] <andrzejk_> lizmat is it some kind of council of the oldest perlers?

[10:46] <lizmat> it used to be the name of the yearly meeting of p5p in person at OSCON (well, it was at least the one time I attended in 2000)

[10:46] <andrzejk_> ohh

[10:46] <andrzejk_> lizmat and jonathan was there?

[10:47] *** AlexDaniel joined
[10:47] *** labster left
[10:48] <lizmat> Jonathan wasn't in the picture yet on account of being too young, I think  :-)

[10:48] *** ufobat joined
[10:48] <andrzejk_> lizmat ohhh how that happend that Jonathan take a care of perl6 vm?

[10:49] <lizmat> phew... that's a long stpry

[10:49] <lizmat> one can write a book about that, and maybe someone will  :-)

[10:49] <lizmat> well, I hope someone will...  :-)

[10:49] <timotimo> jntn's bgrphy?

[10:50] <andrzejk_> huh

[10:50] <andrzejk_> lizmat are there some documents about perl6 vm how to start or smth?

[10:50] <lizmat> hehe... no, more like https://en.wikipedia.org/wiki/The_Soul_of_a_New_Machine

[10:50] <timotimo> you should read 6guts.wordpress.com, it's where jnthn blogs

[10:52] <andrzejk_> huh he is doing it from 6 years :S

[10:52] <timotimo> he had a blog on use.perl.org, but the link is dead

[10:53] <andrzejk_> humm

[10:53] <andrzejk_> what about language design documents

[10:53] <andrzejk_> https://design.perl6.org/

[10:53] <andrzejk_> these looks very experimental

[10:54] <sammers> hi all

[10:54] <timotimo> at the beginning there were only the synopses

[10:54] <timotimo> no, wait, the apocalypses might have been first?

[10:54] <lizmat> yeah, wass about to say

[10:55] <timotimo> right. first larry wrote the apocalypses, then damian conway wrote the exegesis

[10:55] <timotimo> and from that combination of work the synopses were born

[10:58] <andrzejk_> what happend next?

[11:00] <lizmat> many things were tried

[11:00] *** ChoHag left
[11:00] <lizmat> most failed, but we learned from it, and some left a nice legacy

[11:01] <lizmat> such as the pugs project, that gave us roast

[11:01] <lizmat> http://www.perlfoundation.org/perl6/index.cgi?pugs

[11:02] <lizmat> http://www.perlfoundation.org/perl6/index.cgi?timeline    # a timeline to 2010

[11:03] <andrzejk_> omg

[11:03] <andrzejk_> 17years

[11:05] <timotimo> you didn't know that? :)

[11:05] <andrzejk_> no

[11:06] <andrzejk_> timotimo but it looks like all vms were created by 1 person in most

[11:07] <andrzejk_> mainly(

[11:07] <lizmat> I guess that proves TimToady's point that it doesn't matter how long it took once it is there  :-)

[11:07] <timotimo> parrot was started by two

[11:08] <timotimo> the beginning of moarvm was mostly jnthn, then diakopter came in

[11:09] <timotimo> then a bit of japhb

[11:10] <timotimo> and then jimmyz

[11:10] *** pmurias joined
[11:10] *** setty1 joined
[11:10] <timotimo> more and more names appeared in the git log "4 years ago"

[11:10] <timotimo> gotta go run an errand

[11:11] <andrzejk_> what about ideas

[11:11] <andrzejk_> did they took ideas from old vms

[11:11] <andrzejk_> and pick up them to new?

[11:11] <timotimo> well, 6model was taken from parrot

[11:11] <timotimo> and it has a GC, you can't have any new ideas in a GC

[11:12] <timotimo> every single idea in GC has already been had in the late 1980

[11:12] <timotimo> (well, not 100%, but at least 90%)

[11:13] <lizmat> https://www.amazon.com/Garbage-Collection-Handbook-Management-Algorithms/dp/1420082795   # fresh GC ideas

[11:13] <lizmat> and inspiration to MoarVM

[11:13] <andrzejk_> ye I heard about this book

[11:13] <timotimo> "The Garbage Collection Handbook: The Art of Automatic Memory Management brings together a wealth of knowledge gathered by automatic memory management researchers and developers over the past fifty years."

[11:13] <timotimo> not sure how fresh that makes it :D

[11:14] <andrzejk_> what about llvm?

[11:14] <andrzejk_> why perl vm developers didn't took it?

[11:15] *** AlexDaniel left
[11:16] <timotimo> if you want to use llvm you have to design your program around llvm

[11:17] <timotimo> you have no freedom any more, so to speak

[11:17] <timotimo> and it was deemed much too low level for us

[11:20] <andrzejk_> what do you mean?

[11:20] <timotimo> http://brrt-to-the-future.blogspot.de/2015_11_01_archive.html?m=1

[11:20] <timotimo> this post discussed llvm a bit

[11:23] *** mr-foobar left
[11:24] <timotimo> hope that helps at all?

[11:24] *** mr-foobar joined
[11:26] <El_Che> andrzejk_: are you writing an article?

[11:26] <andrzejk_> no

[11:29] *** mingdao left
[11:38] *** kurahaupo left
[11:41] <timotimo> i might have actually been wrong about "everything was already invented in the 1980", and some interesting new stuff may exist 

[11:42] <El_Che> timotimo: yes, grandad :)

[11:42] *** Cabanossi left
[11:43] <timotimo> grand dad?! grand dad?!?!? what the ***     ;)

[11:44] <andrzejk_> how to get perl6 language specification

[11:44] <andrzejk_> anyone know it?

[11:45] *** mscha joined
[11:45] *** Cabanossi joined
[11:46] <mscha> This may be a dumb question, but it seems like class Foo { has $bar } is valid.  What's that supposed to do?  It seems to be equivalent to class Foo { has $!bar }.

[11:47] <timotimo> andrzejk_: the language is specified by the test suite

[11:47] <timotimo> git clone [email@hidden.address]
[11:48] <jnthn> mscha: It's a sop to people who don't like sigils. ;) It installs a lexical alias, meaning that $x will compile into $!x within the body of the class (unless you hide it)

[11:48] <lucs> And before the beginning, the RFCs.

[11:48] <jnthn> Uh, don't like *twigils*

[11:48] <jnthn> :)

[11:48] <sammers> can someone confirm a zef install error for me?

[11:48] <mscha> OK, thanks.

[11:48] <timotimo> we can try. what's wrong?

[11:48] <jnthn> It hasn't been widely used, though :)

[11:48] <andrzejk_> what some ebnf definitions?

[11:49] <sammers> I am getting a few failures on several modules, Bailador is one...

[11:49] <timotimo> andrzejk_: don't have 'em

[11:49] <lucs> (oops, a bit late -- note to self: make sure view is current when posting)

[11:49] <timotimo> we do have the std grammar, though. which hasn't been updated in multiple years

[11:49] <timotimo> (rakudo has instead been brought much closer to the std grammar)

[11:49] <sammers> I just want to see if anyone else sees the same issue

[11:49] <andrzejk_> OK I NEED TO GO KIDS ;S

[11:49] <jnthn> andrzejk_: If you want a formal specification of the syntax, then Grammar.nqp in Rakudo is as close as you'll get :)

[11:49] *** kurahaupo joined
[11:50] *** andrzejk_ left
[11:50] <timotimo> sammers: can you give us all your versions first?

[11:50] <sammers> also these three, 

[11:50] <jnthn> lunch &

[11:50] <sammers> HTTP::MultiPartParser

[11:50] <sammers> Template6

[11:50] <sammers> yYTY

[11:51] *** andrzejk_ joined
[11:51] <timotimo> aha!

[11:51] <sammers> timotimo: zef 0.1.5

[11:51] <timotimo> Template6 relies on hash ordering in one of its tests

[11:52] <sammers> ah, that changed recently?

[11:52] <timotimo> no

[11:52] <timotimo> it was never reliable

[11:52] <sammers> ah

[11:52] <timotimo> it was always a very bad idea to rely on hash ordering in anything

[11:52] <timotimo> it's just not very likely you'll get caught, because we don't actively randomize order

[11:53] <timotimo> which is something we might want to start doing soon

[11:53] *** mr-foobar left
[11:53] <timotimo> because attacks on hash keys is a Real Thing‚Ñ¢

[11:54] <timotimo> let's see about making that test better

[11:56] *** andrzejk_ left
[11:56] <sammers> will hash ordering be removed eventually? 

[12:00] *** mr-foobar joined
[12:00] <timotimo> hash ordering is not something you can remove

[12:00] <timotimo> it's purely an observational thing

[12:01] <sammers> so they are expecting the pairs to be in order, but there is no guarantee 

[12:01] <timotimo> that's right

[12:02] <sammers> so lists are ordered, is there a way to make an unordered-list? shuffle?

[12:02] <timotimo> you can use .pick(*) when you're iterating

[12:04] <sammers> m: say ['a', 'b', 'c'].pick(*);

[12:04] <camelia> rakudo-moar d673ea: OUTPUT: ¬´(a b c)‚ê§¬ª

[12:04] <sammers> m: say ('a', 'b', 'c').pick(*);

[12:04] <camelia> rakudo-moar d673ea: OUTPUT: ¬´(b a c)‚ê§¬ª

[12:04] <timotimo> made a pullrequest

[12:05] <timotimo> https://github.com/supernovus/template6/pull/18

[12:07] <timotimo> okay, let's look at the MultiPartParser

[12:08] <timotimo> i'd really like it if "zef look" had an option (or maybe a different command) that'd git clone the repository so i could immediately "hub fork", hack on stuff, then "hub pullrequest"

[12:08] <timotimo> ugexe: ^ is that in scope for zef?

[12:09] <sammers> yeah, there is an an open issue for it...

[12:09] <timotimo> uh oh, that uses JSON::Fast ... i hope i didn't b0rk it

[12:09] <gfldex> timotimo: it might be in scope for META6::bin

[12:11] <timotimo> geez, the output for the multipartparser's tests are gigantic

[12:12] *** mr-foobar left
[12:13] *** mr-foobar joined
[12:15] <timotimo> dangit

[12:15] <timotimo> sammers: HTTP::MultiPartParser being broken is my fault, it's some problem inside JSON::Fast, which i just rewrote a part of 

[12:16] <sammers> what!

[12:16] <timotimo> it's not backslashing correctly

[12:17] * gfldex always considered JSON as root of some evil

[12:18] <sammers> ok, np, I am just looking for issues related to bailador some of the other web-related modules and assist where I can. thanks for jumping on these and fixing all the stuff you are breaking.

[12:18] <timotimo> haha

[12:18] <sammers> ha

[12:19] <timotimo> yeah, how do you even properly \\

[12:19] <timotimo> probably not without .trans actually

[12:19] <Geth> ¬¶ ecosystem: gfldex++ created pull request #314: add Slippy::Semilist

[12:19] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/pull/314

[12:19] <timotimo> i.e. not by calling .subst multiple times

[12:20] <sammers> just add another .subst, it should fix it.

[12:20] <timotimo> no, i don't think so

[12:20] <sammers> :)

[12:20] <timotimo> if i turn \\ into \ first, then \n into newline, it'll turn \\n into a newline

[12:21] <timotimo> if i first turn \n into newline, then \\ into \, it'll turn \\n into \ and a newline

[12:21] *** mscha left
[12:21] <timotimo> there goes my hopes and dreams of being fast

[12:22] *** eroux joined
[12:27] *** espadrine joined
[12:27] *** Cabanossi left
[12:29] *** Cabanossi joined
[12:29] <timotimo> the worst thing is my tests not catching any problems

[12:32] *** domidumont left
[12:36] <timotimo> bah, backslashes. it's a real hassle to get them right when you've got either a shell or perl6 strings

[12:37] *** mr-foobar left
[12:38] *** mr-foobar joined
[12:43] *** mscha joined
[12:43] <mscha> m: my %foo = 42=>(1,2); say %foo{42}; my @f = %foo{42}; say @f; # huh?

[12:43] <camelia> rakudo-moar 188b7b: OUTPUT: ¬´(1 2)‚ê§[(1 2)]‚ê§¬ª

[12:44] <mscha> m: my %foo = 42=>[1,2]; say %foo{42}; my @f = %foo{42}; say @f; # huh?

[12:44] <camelia> rakudo-moar 188b7b: OUTPUT: ¬´[1 2]‚ê§[[1 2]]‚ê§¬ª

[12:45] <timotimo> grr. is-deeply is giving me a fail, but visual inspection says it should pass

[12:46] <timotimo> ah, is-deeply is "just" eqv

[12:48] <lizmat> timotimo: I just had that, turned out a Map !eqv Hash  :-)

[12:49] <timotimo> interesting.

[12:49] <timotimo> i wonder if that applies here.

[12:49] <timotimo> but i have something mysterious here it seems like

[12:49] *** Actualeyes left
[12:49] <timotimo> i'm getting "cannot modify an immuatble Pair" from code like for @(@got[$i]) >>,<< @($exp[$i])

[12:50] *** mr-foobar left
[12:52] <timotimo> oh, why not use Data::Dump::Tree

[12:52] <Geth> ¬¶ ecosystem: dcb615b605 | (Wenzel P. P. Peppmeyer)++ | META.list

[12:52] <Geth> ¬¶ ecosystem: add Slippy::Semilist (#314)

[12:52] <Geth> ¬¶ ecosystem: 

[12:52] <Geth> ¬¶ ecosystem: https://github.com/gfldex/perl6-slippy-semilist

[12:52] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/dcb615b605

[12:54] <timotimo> huh

[12:54] <timotimo> i thought Data::Dump::Tree had a diff functionality

[12:55] <timotimo> oh yeah

[12:55] <timotimo> wow, that module is very unhappy right now

[12:56] <timotimo> method !set_lookup_table(%lookup, $ansi_code) { for %lookup.kv -> $k, $v { %!color_lookup{$k} = $ansi_code($v) } }

[12:56] <timotimo> this line gets:

[12:56] <timotimo> Cannot find method 'Any' on object of type Str

[12:56] <timotimo> what the ...? :)

[12:57] <timotimo> well, the module needs changed for the lexical require stuff anyway

[12:57] *** mxco86 joined
[12:59] *** mr-foobar joined
[13:00] *** andrzejk_ joined
[13:08] *** ZofBot left
[13:08] <timotimo> :\

[13:08] <timotimo> Terminal::ANSIColor isn't cooperating with me here

[13:08] *** ZofBot joined
[13:08] *** ChanServ sets mode: +v ZofBot

[13:09] <timotimo> timo@schmand ~> perl6 -e '(try require ::("Terminal::ANSIColor")); say ::("Terminal::ANSIColor")::("EXPORT").keys'

[13:09] <timotimo> ()

[13:09] <timotimo> why is there nothing in the whole package?

[13:09] <timotimo> oh, because "is export" only happens when you "use"?

[13:11] <timotimo> well, wtf is this

[13:11] <timotimo> i can ::("&Terminal::ANSIColor::color"), but ::("Terminal::ANSIColor")::.keys gives me ()  ... ?!?

[13:14] <timotimo> "Cannot resolve caller AUTOGEN(AnsiColor: ); none of these signatures match" ugh, what now?

[13:16] *** Actualeyes joined
[13:16] <timotimo> ;_;

[13:16] <timotimo> the first test checks if the number of lines output is equal to a number

[13:17] *** jdmmmmm joined
[13:18] <timotimo> these tests make me thoroughly unhappy

[13:25] <timotimo> graaaaaargh

[13:25] <timotimo> the .perl outputs for the strings eqv, but not the strings themselves

[13:26] <timotimo> what is this absolute madness

[13:26] *** kurahaupo left
[13:26] <timotimo> when i .encode('utf8') them, it's also eqv. and .WHAT is eqv between both, too

[13:28] *** jdmmmmm left
[13:29] <timotimo> they even eq to False

[13:30] <timotimo> i'll leave this rabbit hole for someone else to figure out, i'd say >:(

[13:31] <llfourn> timotimo: probably a bug in require not replacing the stub package properly

[13:32] <timotimo> but in a one-liner i can use that sub for stuff?

[13:32] <llfourn> hmm actually require Terminal::ANSIColor; say ::("Terminal::ANSIColor").WHO.keys works for me

[13:33] <timotimo> that's the other way to require, yeah

[13:33] <timotimo> is .WHO.keys different from ::.keys?

[13:33] <llfourn> apparently after an indirect lookup it is :D

[13:34] <llfourn> :: is compile time?

[13:34] <timotimo> m: say "foo"::.keys

[13:34] <camelia> rakudo-moar 188b7b: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Confused‚ê§at <tmp>:1‚ê§------> 3say "foo":7‚èè5:.keys‚ê§    expecting any of:‚ê§        colon pair‚ê§¬ª

[13:35] <timotimo> i wouldn't expect it to be, tbh

[13:35] <llfourn> hmm yeah I don't think it is or at least it doesn't have to be

[13:35] <llfourn> m: require Test; say Test::.keys

[13:35] <camelia> rakudo-moar 188b7b: OUTPUT: ¬´(&todo_output EXPORT &failure_output &output)‚ê§¬ª

[13:36] *** eroux left
[13:37] <timotimo> btw

[13:37] <timotimo> m: require ::"Terminal::AnsiColor"

[13:37] <camelia> rakudo-moar 188b7b: OUTPUT: ¬´===SORRY!===‚ê§MVMArray: Can't shift from an empty array‚ê§¬ª

[13:37] <llfourn> m: say ::"Terminal::Ansifoo"

[13:37] <camelia> rakudo-moar 188b7b: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3say ::7‚èè5"Terminal::Ansifoo"‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚ê§        statement m‚Ä¶¬ª

[13:38] <llfourn> That's weird

[13:38] <timotimo> OK, i got it to work now

[13:39] <timotimo> do you think you could help me figure out the string eqv thing?

[13:40] <timotimo> um, what the heck ...

[13:40] <llfourn> what's the string eqv thing exactly?

[13:40] <timotimo> well, i have two strings that are equal in all respects i could find, but they are not eqv

[13:41] <timotimo> their .WHAT are eqv, encoding them to utf8 gives me equal utf8 arrays, their .perl are also eq, and the strings themselves are also eq

[13:41] <llfourn> how do we produce such strings?

[13:42] <timotimo> it happens in the HTTP multipart parser test suite

[13:44] <timotimo> wow, i'm a dummy

[13:44] <timotimo> there was a method "color" and i added an attribute "color"

[13:44] <llfourn> well, eqv for Str looks like it tests .WHERE essentially

[13:46] <timotimo> oh? that's not right

[13:46] <timotimo> Str is a value type?

[13:46] <llfourn> oh no I misread it

[13:46] <llfourn> it tests the address first then then iseq_s

[13:47] <timotimo> OK

[13:47] <timotimo> absolutely incredible!

[13:47] <timotimo> D::D::T now passes its tests!

[13:47] <llfourn> \o/ # tests passing for things

[13:48] <timotimo> okay, got a pull request

[13:49] * llfourn goes to start reading moritz++'s devops book

[13:50] <timotimo> i'm glad nkh just touched DDT in the last 2 weeks

[13:54] *** BenGoldberg joined
[13:58] *** Cabanossi left
[13:59] <masak> timotimo: I read "D::D::T" and for one horrible moment I thought type definedness smiley syntax had evolved without me noticing

[14:00] *** Cabanossi joined
[14:03] <moritz> llfourn: thanks for buying! Feedback is always very welcome

[14:07] *** dmaestro joined
[14:08] *** bjz left
[14:08] <El_Che> moritz: GoCD is confusing. I guess it has nothing to do with Go(lang)?

[14:15] <timotimo> masak: :)

[14:15] <timotimo> fwiw, Data::Dump::Tree is very cool and you should all check it out

[14:16] <timotimo> (may need to use my pullrequest to make it work, though)

[14:16] <timotimo> (and that pullrequest depends on AnsiColor's pullrequest ... maybe?)

[14:16] <timotimo> hm. it actually doesn't

[14:18] *** Rawriful joined
[14:24] *** skids joined
[14:28] *** Khisanth left
[14:32] <timotimo> huh. one seems to have actually \r\n, the other seems to have a synthetic there

[14:32] <timotimo> how the eff did we end up with that?

[14:32] <gfldex> https://github.com/supernovus/exemel is broken too

[14:33] <gfldex> likely IO related

[14:34] <timotimo> https://gist.github.com/timo/94421784d6471142c424379e8d514814 - here's the strings as seen by gdb

[14:36] <gfldex> perl6 -e 'say so IO::Handle.new ~~ IO'

[14:36] <gfldex> that's the culprit

[14:36] <timotimo> ah, yes

[14:36] <timotimo> good catch

[14:38] <timotimo> anyway

[14:38] *** KongWubba joined
[14:38] <timotimo> these two strings have different nqp::chars, but they render out to the same utf8

[14:38] <gfldex> IO is a role, should be not problem to pull that in

[14:38] <timotimo> IO will get/has been thrown out

[14:38] <timotimo> it was useless

[14:39] <gfldex> XML.pm6 does use it in a multi as a type check

[14:39] <gfldex> https://github.com/supernovus/exemel/blob/master/lib/XML.pm6

[14:40] <gfldex> line 36 fails now because from-xml-stream does a check against role IO

[14:40] <timotimo> The changes that may affect existing code are:

[14:40] <timotimo> role IO together with its IO.umask method have been removed without any replacement

[14:40] <timotimo> that's from the latest rakudo.org post

[14:40] <timotimo> not latest

[14:40] <timotimo> second-to-latest

[14:41] *** Khisanth joined
[14:42] <gfldex> is there a role now that says 'a IO::Path or IO::Handle i don't care'?

[14:44] <Geth> ¬¶ doc: 460f1e6ba3 | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[14:44] <Geth> ¬¶ doc: Remove trailing whitespace

[14:44] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/460f1e6ba3

[14:45] <Geth> ¬¶ doc: 65cc372243 | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[14:45] <Geth> ¬¶ doc: [io grant] Document IO::Path.concat-with

[14:45] <Geth> ¬¶ doc: 

[14:45] <Geth> ¬¶ doc: - Does what .child used to do

[14:45] <Geth> ¬¶ doc: - .child will be changed to throw for non-child paths

[14:45] <Geth> ¬¶ doc: 

[14:45] <Geth> ¬¶ doc: Rakudo impl: https://github.com/rakudo/rakudo/commit/966a7e3a10

[14:45] <Geth> ¬¶ doc: Tests: https://github.com/perl6/roast/commit/0e47f25e07

[14:45] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/65cc372243

[14:47] <timotimo> gfldex: https://github.com/rakudo/rakudo/blob/nom/docs/2017-IO-Grant--Action-Plan.md#remove-role-io--along-with-its-only-ioumask-method-issue-for-discussion

[14:47] <moritz> El_Che: GoCD and golang are not related

[14:48] <timotimo> gfldex: https://github.com/supernovus/exemel/pull/43

[14:50] <gfldex> ok

[14:50] <gfldex> 4 days ago :-/

[15:06] *** mcmillhj left
[15:13] *** mcmillhj joined
[15:18] <masak> m: multi sub B() { say "multi" }; &B.wrap(sub {say before"; callsame; say "after"}); B()

[15:18] <camelia> rakudo-moar 38c40b: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3{ say "multi" }; &B.wrap(sub {say before7‚èè5"; callsame; say "after"}); B()‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚Ä¶¬ª

[15:18] <masak> m: multi sub B() { say "multi" }; &B.wrap(sub {say "before"; callsame; say "after"}); B()

[15:18] <camelia> rakudo-moar 38c40b: OUTPUT: ¬´before‚ê§multi‚ê§after‚ê§¬ª

[15:18] *** mcmillhj left
[15:18] <masak> w00t

[15:18] <masak> (RT #77472)

[15:18] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=77472

[15:20] *** zakharyas joined
[15:21] <BenGoldberg> m: multi sub B() { say "multi" }; &B.wrap(sub {say "before"; {*}; say "after"}); B()

[15:21] <camelia> rakudo-moar 38c40b: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§{*} may only appear in proto‚ê§at <tmp>:1‚ê§------> 3multi" }; &B.wrap(sub {say "before"; {*}7‚èè5; say "after"}); B()‚ê§    expecting any of:‚ê§        horizontal whitespace‚ê§        term‚ê§¬ª

[15:23] <BenGoldberg> m: multi sub B() { "multi" }; &B.wrap(sub {"before" ~ callsame ~ "after"}); say B()

[15:23] <camelia> rakudo-moar 38c40b: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Calling callsame(Str) will never work with declared signature ()‚ê§at <tmp>:1‚ê§------> 3() { "multi" }; &B.wrap(sub {"before" ~ 7‚èè5callsame ~ "after"}); say B()‚ê§¬ª

[15:23] <BenGoldberg> m: multi sub B() { "multi" }; &B.wrap(sub {"before" ~ callsame() ~ "after"}); say B()

[15:23] <camelia> rakudo-moar 38c40b: OUTPUT: ¬´beforemultiafter‚ê§¬ª

[15:25] * BenGoldberg *almost* wishes perl6 did the perl5 parsing thing, where if the parser knows that some function has no arguments, code after it is not processed as a list.  But that's one of the things which makes perl5 parsing evil, so ...

[15:27] *** Cabanossi left
[15:29] *** Cabanossi joined
[15:30] <Geth> ¬¶ doc: 24a6ea9a47 | (Zoffix Znet)++ | 5 files

[15:30] <Geth> ¬¶ doc: [io grant] Toss all of the TODO methods in IO::Spec*

[15:30] <Geth> ¬¶ doc: 

[15:30] <Geth> ¬¶ doc: Don't know who or what added these, but many (most?) of them are

[15:30] <Geth> ¬¶ doc: wrong (type doesn't provide them) and those that aren't list

[15:30] <Geth> ¬¶ doc: implementation-specific signatures.

[15:30] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/24a6ea9a47

[15:31] *** mcmillhj joined
[15:32] <pmurias> if there is a test in roast that's fudged for rakudo it means it's part of 6.c but rakudo has a bug?

[15:33] <Geth> ¬¶ doc: 1f75ddcb81 | (Zoffix Znet)++ | 2 files

[15:33] <Geth> ¬¶ doc: [io grant] Document IO::Spec*.abs2rel

[15:33] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/1f75ddcb81

[15:34] *** drbojingle joined
[15:36] *** mcmillhj left
[15:36] *** khw joined
[15:42] *** mcmillhj joined
[15:47] *** mcmillhj left
[15:54] <TimToady> m: multi sub term:<B>() { "multi" }; &term:<B>.wrap(sub {"before" ~ callsame() ~ "after"}); say B

[15:54] <camelia> rakudo-moar 94a690: OUTPUT: ¬´beforemultiafter‚ê§¬ª

[15:55] <TimToady> BenGoldberg: ^^^ you can, it just spelled differently

[15:55] <TimToady> *it's

[15:58] *** kurahaupo joined
[16:01] *** wamba joined
[16:03] *** tomboy64 joined
[16:04] <tomboy64> are there any news regarding rakudo + jvm?

[16:04] <tomboy64> e.g. is it still broken?

[16:04] <tomboy64> (doesn't build for me since about a year)

[16:08] <BenGoldberg>  m: multi sub term:<B>() { "multi" }; &term:<B>.wrap(sub {"before" ~ callsame ~ "after"}); say B

[16:08] <camelia> rakudo-moar 94a690: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Calling callsame(Str) will never work with declared signature ()‚ê§at <tmp>:1‚ê§------> 3ulti" }; &term:<B>.wrap(sub {"before" ~ 7‚èè5callsame ~ "after"}); say B‚ê§¬ª

[16:17] <timotimo> BenGoldberg: callsame isn't a term, so it's nomming ~"after" as one argument

[16:19] <Geth> ¬¶ doc: cc62dd240c | (Zoffix Znet)++ | 2 files

[16:19] <Geth> ¬¶ doc: [io grant] Kill IO::Path.abspath

[16:19] <Geth> ¬¶ doc: 

[16:19] <Geth> ¬¶ doc: Use IO::Path.absolute, which is the same thing

[16:19] <Geth> ¬¶ doc: 

[16:19] <Geth> ¬¶ doc: Rakudo removal: https://github.com/rakudo/rakudo/commit/cb323d5dd3

[16:19] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/cc62dd240c

[16:21] *** drbojingle left
[16:22] <BenGoldberg> .seen ioninja

[16:22] <yoleaux> I saw IOninja 22 Mar 2017 06:33 EDT in #perl6: <IOninja> But if that's not up to par to the standards of this channel, I can leave.

[16:22] <BenGoldberg> .seen zoffix

[16:22] <yoleaux> I saw Zoffix 7 Apr 2017 14:12 EDT in #perl6: <Zoffix> BOTS WERE MEANT TO BE FREE!

[16:23] <simcop2387> yoleaux: help

[16:23] <BenGoldberg> yoleaux's commands start with .

[16:23] <timotimo> BenGoldberg: find zoffix in #perl6-dev

[16:24] <timotimo> #perl6 is too noisy for 'em, which i can totally understand

[16:24] *** noize joined
[16:30] <TimToady> m: my &term:<same> = &callsame; multi sub term:<B>() { "multi" }; &term:<B>.wrap(sub {"before" ~ same ~ "after"}); say B

[16:30] <camelia> rakudo-moar 94a690: OUTPUT: ¬´beforemultiafter‚ê§¬ª

[16:30] <TimToady> though, given it's a term, and can have no args, one wonders why it's a multi...

[16:31] <TimToady> if you were hoping to have different syntax for different multi candidates, that's insane :)

[16:38] *** espadrine left
[16:40] *** leont left
[16:44] *** skids left
[16:51] *** mscha left
[16:55] *** MilkmanDan left
[16:55] *** noize left
[16:55] *** MilkmanDan joined
[16:58] *** Cabanossi left
[16:58] *** Rawriful left
[16:59] <ugexe> timotimo: theoretically yes. i'm just not sure how to generalize that functionality to something that non-git modules could also use. Maybe its a good use for the difference of source-url and `support : { source: "..." }`

[17:00] *** Cabanossi joined
[17:02] <ugexe> curt tilmes says he is close to releasing his perl6 GraphQL module

[17:03] <Geth> ¬¶ doc: 1973010455 | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[17:03] <Geth> ¬¶ doc: [io grant] Document IO::Path.ACCEPTS

[17:03] <Geth> ¬¶ doc: 

[17:03] <Geth> ¬¶ doc: N.B. currently refers to undocumented `:completely` arg to .resolve.

[17:03] <Geth> ¬¶ doc: It's not a mistake; the argument will be implemented and documented

[17:03] <Geth> ¬¶ doc: as part of IO grant work.

[17:03] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/1973010455

[17:03] <ugexe> (which is affected by current MultipartParser failure)

[17:06] *** pochi joined
[17:13] *** rrrr_ joined
[17:15] *** domidumont joined
[17:21] *** rrrr_ left
[17:22] *** zapwai joined
[17:24] *** zakharyas left
[17:26] *** Cabanossi left
[17:29] *** Cabanossi joined
[17:31] *** andrzejk_ left
[17:31] *** v1_ joined
[17:31] *** v1_ left
[17:33] <timotimo> ugexe: aye, it could very well be

[17:39] <Geth> ¬¶ doc: b3a93247bf | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[17:39] <Geth> ¬¶ doc: [io grant] Expand/fix up IO::Path.accessed

[17:39] <Geth> ¬¶ doc: 

[17:39] <Geth> ¬¶ doc: This isn't the doc about working with Instants, so toss all that prose

[17:39] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/b3a93247bf

[17:45] <timotimo> sammers: with my latest JSON::Fast commits, HTTP::MultiPartParser installs fine

[17:48] <timotimo> sammers: and i was able to install Bailador just now

[17:48] <ufobat> \o/

[17:51] <Geth> ¬¶ doc: 1cd7de018f | (Zoffix Znet)++ | type-graph.txt

[17:51] <Geth> ¬¶ doc: [io grant] Fix up type graph

[17:51] <Geth> ¬¶ doc: 

[17:51] <Geth> ¬¶ doc: I'm assuming this file is maintained by hand and not a script.

[17:51] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/1cd7de018f

[17:52] <timotimo> ugexe: what was the problem with zef and testers.p6c.org again?

[17:52] *** espadrine joined
[17:59] *** mcmillhj joined
[18:01] <timotimo> Failed running /home/travis/.rakudobrew/bin/../moar-nom/install/bin/perl6 -Ilib bin/zef test . at /home/travis/.rakudobrew/bin/rakudobrew line 58

[18:01] <timotimo> ?!?!?

[18:05] *** noganex_ left
[18:06] *** mcmillhj left
[18:07] *** noganex joined
[18:08] <ugexe> why not moar-blead ?

[18:11] <timotimo> i'unno, is that the reason?

[18:12] <ugexe> there are not any methods for sending data. almost everything using the Fetcher role has the capability to send data though, so just adding some method to a few of those (curl/wget) and then adding a Zef::Report phase (just the boilerplate from Zef::Fetch/Build/etc) module and entry into config.json

[18:14] <ugexe> the phases Zef::Fetch/Build/etc are just aggregators of Zef::Service::* that fullfill some combination of Fetch Build Test etc roles - so that boilerplate already handles sending reports to multiple reports (if they existed)

[18:15] *** zakharyas joined
[18:21] <ugexe> timotimo: Zef::Client also has a $.logger that you can tap (probably some more stuff should use these events internally) https://github.com/ugexe/zef/blob/master/lib/Zef/Client.pm6#L339 

[18:22] *** Rawriful joined
[18:26] <Geth> ¬¶ doc: 56256d03fd | (Zoffix Znet)++ | doc/Type/IO/Special.pod6

[18:26] <Geth> ¬¶ doc: [io grant] Minor formatting improvements in IO::Special

[18:26] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/56256d03fd

[18:27] <timotimo> oof, so i'm supposed to implement it? :) :)

[18:27] *** jdmmmmm joined
[18:33] <ugexe> really you should only have to implement some generic send method for wget/curl (or any other Fetcher) like here: https://github.com/ugexe/zef/blob/master/lib/Zef/Service/Shell/curl.pm6#L18

[18:33] <mst> moritz: I was also thinking about https://en.wikipedia.org/wiki/Penrose_stairs

[18:33] <ugexe> the other part is easy too but i'd probably get around to doing it if that much was done

[18:44] <Geth> ¬¶ ecosystem: 7d36674a83 | (Nick Logan)++ | META.list

[18:44] <Geth> ¬¶ ecosystem: META.info -> META6.json

[18:44] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/7d36674a83

[18:46] *** mcmillhj joined
[18:48] <Geth> ¬¶ doc: 184342c79e | (Zoffix Znet)++ | doc/Type/IO/Special.pod6

[18:48] <Geth> ¬¶ doc: [io grant] Document IO::Special.what

[18:48] <Geth> ¬¶ doc: 

[18:48] <Geth> ¬¶ doc: Split off part of .new prose and list .what as a separate section,

[18:48] <Geth> ¬¶ doc: since it is a public attribute.

[18:48] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/184342c79e

[18:49] *** Ven joined
[18:50] *** Ven is now known as Guest22771

[18:52] *** mcmillhj left
[18:55] *** domidumont left
[18:55] *** ChoHag joined
[18:58] *** mcmillhj joined
[19:03] *** AlexDaniel joined
[19:03] *** mcmillhj left
[19:08] *** darutoko left
[19:09] *** Guest22771 left
[19:16] *** wamba left
[19:26] *** BenGoldberg left
[19:29] *** ChoHag left
[19:29] *** zapwai left
[19:34] *** yoleaux joined
[19:34] *** ChanServ sets mode: +v yoleaux

[19:34] *** kent\n left
[19:36] *** kent\n joined
[19:51] *** BenGoldberg joined
[19:51] *** Ven joined
[19:52] *** Ven is now known as Guest89504

[19:52] <gfldex> m: class C {}; dd $?PACKAGE, $?PACKAGE::.keys, GLOBAL::.keys;

[19:52] <camelia> rakudo-moar 50a0dc: OUTPUT: ¬´GLOBAL‚ê§()‚ê§("C",).Seq‚ê§¬ª

[19:53] <gfldex> if $?PACKAGE points to GLOBAL, shouldn't $?PACKAGE::.keys say the same then GLOBAL::.keys?

[19:53] *** Guest89504 left
[20:00] *** mcmillhj joined
[20:01] *** labster joined
[20:04] *** jdmmmmm left
[20:09] *** mcmillhj left
[20:12] *** cognominal joined
[20:18] *** zakharyas left
[20:26] *** mcmillhj joined
[20:30] *** mcmillhj left
[20:32] *** Peter_R left
[20:34] *** Peter_R joined
[20:36] *** titsuki left
[20:37] *** titsuki joined
[20:49] *** AlexDaniel left
[20:53] *** perigrin left
[21:12] *** Cabanossi left
[21:15] *** Cabanossi joined
[21:18] *** labster left
[21:21] *** TEttinger joined
[21:28] *** labster joined
[21:35] *** pytuger joined
[21:42] *** rindolf left
[21:44] *** lowbro joined
[21:44] *** lowbro left
[21:44] *** lowbro joined
[21:52] *** rurban left
[22:06] <Voldenet> is there any use case (performance-related use case) to use Array[Int]?

[22:06] <Voldenet> And is there some good way to convert a range or iterable into an Array?

[22:09] <timotimo> you can just @foo = @$the-thing

[22:10] <Voldenet> m: sub b(Array[Int] $x) { $x.say }; b(^10.Array);

[22:10] <camelia> rakudo-moar bf6371: OUTPUT: ¬´Potential difficulties:‚ê§    Precedence of ^ is looser than method call; please parenthesize‚ê§    at <tmp>:1‚ê§    ------> 3sub b(Array[Int] $x) { $x.say }; b(^107‚èè5.Array);‚ê§Type check failed in binding to parameter '$x'; expected Array[Int] bu‚Ä¶¬ª

[22:10] <Voldenet> not as expected

[22:10] <Voldenet> m: sub b(Array[Int] $x) { $x.say }; b(Array[int](^10));

[22:10] <camelia> rakudo-moar bf6371: OUTPUT: ¬´Type check failed in assignment to ; expected int but got Int (0)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:10] <Voldenet> m: sub b(Array[Int] $x) { $x.say }; b(Array[Int](^10));

[22:10] <camelia> rakudo-moar bf6371: OUTPUT: ¬´[0 1 2 3 4 5 6 7 8 9]‚ê§¬ª

[22:11] <Voldenet> but is Array[Int] a /performant way of doing calculations/ (as in: can I use SSE anyhow?)

[22:11] *** Cabanossi left
[22:11] <timotimo> it can not yet do sse or some such

[22:12] <timotimo> for very performant stuff you want "my int @foobar"

[22:12] <timotimo> which will give you 64bit ints

[22:12] <timotimo> as opposed to Int which is arbitrary-size

[22:12] <Voldenet> ah, it's best as I can get now

[22:12] <timotimo> yup, just be careful to not go back and forth between int and Int too much; values would have to be boxed and unboxed in that case

[22:12] *** RabidGravy left
[22:12] <timotimo> i'm not sure if it's still the case, but i think $foo++ is still a lot slower than $foo = $foo + 1 with native ints

[22:13] <Voldenet> huh, that's very odd

[22:14] <Voldenet> but thanks for the info, well for SSE i can use native calls, I guess

[22:14] *** Cabanossi joined
[22:16] <timotimo> yeah

[22:16] <timotimo> we're working on a new JIT that can be a whole lot smarter about things, but i have no clue how hard it'll be to teach it sse instructions

[22:17] <Voldenet> well yeah, most languages would fail in SSE situation

[22:18] *** bjz joined
[22:19] <timotimo> we do already have nice syntax for vectorized operations, like >>+<< for example

[22:25] <Voldenet> uh, >>+<<... never heard of that one

[22:26] <Voldenet> ah, it's a union

[22:26] <Voldenet> or not

[22:27] <geekosaur> https://docs.perl6.org/language/operators#Hyper_Operators

[22:27] <Voldenet> yeah, I'm reading about it now, I see how it works

[22:27] <Voldenet> it's quite fancy :D

[22:28] <Voldenet> m: say ^10 >>->> ^2

[22:28] <camelia> rakudo-moar bf6371: OUTPUT: ¬´(0 0 2 2 4 4 6 6 8 8)‚ê§¬ª

[22:28] * geekosaur winces at "...full reign over..."

[22:30] <Voldenet> ;-)

[22:35] *** mr-foobar left
[22:37] *** mr-foobar joined
[22:38] <gfldex> i just found a usecase for UNIT:: :)

[22:43] *** SCHAPiE left
[22:57] *** Cabanossi left
[22:58] <samcv> hello beautiful people

[22:58] <samcv> hope you all are doing great today

[23:00] *** mr-foobar left
[23:00] *** SCHAPiE joined
[23:00] *** Cabanossi joined
[23:01] *** AlexDaniel joined
[23:01] <u-ou> o/

[23:02] *** mr-foobar joined
[23:06] *** SCHAPiE left
[23:06] *** SCHAPiE joined
[23:06] *** mcmillhj joined
[23:08] *** bjz left
[23:10] *** mcmillhj left
[23:11] *** bjz joined
[23:12] <Geth> ¬¶ doc: dmaestro++ created pull request #1273: Document the infix method call operators

[23:12] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/1273

[23:15] <tbrowder> hey samcv, u-ou, and rest of #perl6 gang!

[23:15] <samcv> hello

[23:16] <u-ou> :)

[23:17] *** shmibs left
[23:20] *** mr-foobar left
[23:24] *** shmibs joined
[23:24] *** Rawriful left
[23:27] *** Cabanossi left
[23:29] *** Cabanossi joined
[23:33] *** titsuki left
[23:34] *** titsuki joined
[23:35] *** titsuki left
[23:35] *** titsuki joined
[23:40] *** jdmmmmm joined
[23:44] *** Sgeo left
[23:46] *** ufobat left
[23:47] *** labster left
[23:53] *** KongWubba left
[23:54] *** redfd joined
[23:55] <redfd> hi

[23:55] <redfd> i use rakudo

[23:55] <redfd> how install zef?

[23:56] <timotimo> you can git clone [email@hidden.address]
[23:57] <timotimo> and then cd in there and then: perl6 -Ilib bin/zef install .

[23:57] *** mcmillhj joined
[23:59] <redfd> perl6 -Ilib bin/zef install . All candidates are currently installed No reason to proceed. Use --force to continue anyway

