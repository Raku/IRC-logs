[00:04] *** kirkins joined
[00:06] <ParsonsNose> Zoffix: Yeah, substr was the way to go, I just sorta forgot about it. I had that same thought about .= though

[00:06] *** Exodist left
[00:06] *** Cabanossi left
[00:06] <Zoffix> Inheritance from core classes isn't yet polished. So above you'd need to make your own .new method to make it work

[00:08] <ParsonsNose> tnx

[00:09] *** Exodist joined
[00:09] *** Cabanossi joined
[00:13] <Zoffix> m: use nqp; class Inty is Int { method new ($v) { method !set-v ($v) { nqp::bindattr_i(self, Int, '$!value', $v); self }; self.bless!set-v: $v; }; method ho { self + 7 } } ; my Inty $hi .= new: 6 ; say $hi.ho

[00:13] <camelia> rakudo-moar dcebce: OUTPUT: «13␤»

[00:13] <Zoffix> No idea if there's a non-nqpish way to do it... 

[00:14] *** labster left
[00:15] *** Exodist left
[00:15] *** Exodist joined
[00:16] <Zoffix> ❗❗❗🌟🌟🌟❇️❇️❇️🌠🌠🌠🎉🎉🎉⚠️⚠️⚠️🚧🚧🚧🌈🌈🌈

[00:16] <Zoffix>   

[00:16] <Zoffix> PART 2: Upgrade Information for Changes Due to IO Grant Work: http://rakudo.org/2017/04/03/part-2-upgrade-information-for-changes-due-to-io-grant-work/

[00:16] <Zoffix>   

[00:16] <Zoffix> ❗❗❗🌟🌟🌟❇️❇️❇️🌠🌠🌠🎉🎉🎉⚠️⚠️⚠️🚧🚧🚧🌈🌈🌈

[00:18] *** Guest20993 joined
[00:20] *** gdonald left
[00:20] *** _28_ria joined
[00:20] *** gdonald joined
[00:21] <ParsonsNose> m: role Inty { method Str { (self + 7).Str } } ; my $i = 4 does Inty ; say $i ; say $i + 1

[00:21] <camelia> rakudo-moar dcebce: OUTPUT: «11␤5␤»

[00:22] <ParsonsNose> That seems like the nicest way to do it. Bonus evil point, I feel.

[00:25] *** ParsonsNose left
[00:26] *** Exodist left
[00:26] *** Guest20993 left
[00:26] *** Exodist joined
[00:27] *** kirkins left
[00:28] *** kirkins joined
[00:30] <BenGoldberg> u: 🌈

[00:30] <unicodable6> BenGoldberg, U+1F308 RAINBOW [So] (🌈)

[00:32] *** matiaslina joined
[00:33] <BenGoldberg> One of these days, I've got to switch to an irc client which supports color emoji, cause that looks like an elbow noodle to me.  And the 🎉 makes me think of 🍕.

[00:34] *** matiasli1a left
[00:35] *** Exodist left
[00:35] *** Zoffix left
[00:36] *** Exodist joined
[00:36] *** sufrostico joined
[00:37] <AlexDaniel> mmm, 🍕

[00:37] *** matiasli1a joined
[00:40] *** matiaslina left
[00:44] *** labster joined
[00:52] *** matiaslina joined
[00:55] *** matiasli1a left
[00:56] *** ok joined
[00:57] *** ok is now known as Guest16705

[01:00] *** Exodist left
[01:00] *** Guest16705 left
[01:01] *** Exodist joined
[01:02] *** matiaslina left
[01:09] *** Exodist left
[01:12] *** Exodist joined
[01:18] *** sufrostico left
[01:22] *** Cabanossi left
[01:24] *** Cabanossi joined
[01:31] *** dnacat joined
[01:36] *** dnacat left
[01:45] *** wamba joined
[01:46] *** sufrostico joined
[01:52] *** geekosaur left
[01:52] *** geekosaur joined
[01:55] *** gdonald left
[01:56] *** gdonald joined
[02:00] *** _28_ria left
[02:06] *** ryan_ joined
[02:21] *** nadim left
[02:22] *** Cabanossi left
[02:24] *** Cabanossi joined
[02:28] *** mooch2 joined
[02:29] *** mooch2 left
[02:33] *** noganex_ joined
[02:36] *** noganex left
[02:50] *** wamba left
[02:59] *** chatter29 joined
[02:59] *** chatter29 left
[03:20] *** mattp_ joined
[03:22] *** Cabanossi left
[03:24] *** Cabanossi joined
[03:27] *** khw left
[03:35] *** semigloss left
[03:47] *** kirkins left
[03:50] *** Cabanossi left
[03:52] *** Cabanossi joined
[04:15] <Geth> ¦ doc: d050d4bb0a | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[04:15] <Geth> ¦ doc: [io grant] Remove IO::Path.chdir prose

[04:15] <Geth> ¦ doc: 

[04:15] <Geth> ¦ doc: Will write new info after fixing up the method in Rakudo.

[04:15] <Geth> ¦ doc: 

[04:15] <Geth> ¦ doc: - &chdir is vastly different and shouldn't be listed together

[04:15] <Geth> ¦ doc: - the prose is wrong, IO::Path.chdir doesn't use $*CWD

[04:15] <Geth> ¦ doc: - the prose mentions now-deprecated :test param

[04:15] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d050d4bb0a

[04:32] <Geth> ¦ doc: 1d0e433c2a | (Zoffix Znet)++ | doc/Type/IO.pod6

[04:32] <Geth> ¦ doc: [io grant] Document &chdir

[04:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1d0e433c2a

[04:35] *** MasterDuke left
[04:37] <Geth> ¦ doc: 3fdc6dc413 | (Zoffix Znet)++ | doc/Type/IO.pod6

[04:37] <Geth> ¦ doc: [io grant] Document &*chdir

[04:37] <Geth> ¦ doc: 

[04:37] <Geth> ¦ doc: Hoping there won't any be 'splosions due to the `&*` in

[04:37] <Geth> ¦ doc: the routine's name.

[04:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/3fdc6dc413

[04:48] *** BenGoldberg left
[04:50] *** labster left
[04:52] *** sufrostico left
[04:54] *** curan joined
[05:10] *** parv joined
[05:22] *** wamba joined
[05:22] *** travis-ci joined
[05:22] <travis-ci> Doc build errored. Zoffix Znet '[io grant] Document &chdir'

[05:22] <travis-ci> https://travis-ci.org/perl6/doc/builds/217941992 https://github.com/perl6/doc/compare/d050d4bb0aa2...1d0e433c2af2

[05:22] *** travis-ci left
[05:22] *** domidumont joined
[05:26] *** labster joined
[05:27] *** domidumont left
[05:27] *** Wanderer68 left
[05:29] <Geth> ¦ doc: e1a299c1fd | (Zoffix Znet)++ | doc/Type/IO.pod6

[05:29] <Geth> ¦ doc: [io grant] Reword "defined as" for &*chdir

[05:29] <Geth> ¦ doc: 

[05:29] <Geth> ¦ doc: To avoid suggestion that `sub &*foo` is valid syntax.

[05:29] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e1a299c1fd

[05:30] <Geth> ¦ doc: e5225bed8a | (Zoffix Znet)++ | doc/Type/IO.pod6

[05:30] <Geth> ¦ doc: [io grant] Fix URL to &*chdir

[05:30] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e5225bed8a

[05:30] *** TEttinger joined
[05:30] <Geth> ¦ doc: 8d4704b4c6 | (Zoffix Znet)++ | doc/Type/IO.pod6

[05:30] <Geth> ¦ doc: Fix typo

[05:30] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8d4704b4c6

[05:31] *** xtreak joined
[05:31] <Geth> ¦ doc: 4fc5d43dbb | (Zoffix Znet)++ | doc/Type/IO.pod6

[05:31] <Geth> ¦ doc: Fix typo

[05:31] <Geth> ¦ doc: 

[05:31] <Geth> ¦ doc: Copy-pasta is the root of all evil

[05:31] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4fc5d43dbb

[05:33] *** spebern joined
[05:35] *** domidumont joined
[05:36] *** xtreak left
[05:37] *** xtreak joined
[05:38] *** tokomer joined
[05:38] *** spebern left
[05:39] *** TimToady left
[05:39] *** llfourn left
[05:40] *** skids left
[05:41] *** TimToady joined
[05:41] *** xtreak left
[05:42] *** llfourn joined
[05:43] *** lowbro joined
[05:43] *** lowbro left
[05:43] *** lowbro joined
[05:44] *** skids joined
[05:45] *** IRCFrEAK joined
[05:47] *** IRCFrEAK left
[05:50] *** araraloren joined
[05:51] *** RabidGravy joined
[05:52] *** AlexDaniel left
[05:58] *** skids left
[06:01] *** xtreak joined
[06:01] *** domidumont left
[06:02] *** araraloren left
[06:03] *** araraloren joined
[06:15] *** kaare_ left
[06:15] *** _28_ria joined
[06:15] *** domidumont joined
[06:18] *** kaare_ joined
[06:19] *** xtreak left
[06:20] *** xtreak joined
[06:22] *** rindolf joined
[06:24] *** xtreak left
[06:27] *** xtreak joined
[06:29] *** spebern joined
[06:39] *** spebern left
[06:40] *** salva joined
[06:41] *** domidumont left
[06:43] *** domidumont joined
[06:43] *** ryan_ left
[06:46] *** ryan_ joined
[06:50] *** Cabanossi left
[06:52] *** Cabanossi joined
[06:53] *** grondilu left
[06:53] *** wamba left
[06:57] *** tokomer_ joined
[06:57] *** tokomer left
[07:07] *** tokomer_ left
[07:10] *** dogbert17 left
[07:23] *** abraxxa joined
[07:40] *** xtreak left
[07:40] *** mr-foobar left
[07:41] *** wamba joined
[07:44] *** xtreak joined
[07:45] *** wamba left
[07:45] *** zakharyas joined
[07:51] *** Cabanossi left
[07:53] *** Cabanossi joined
[07:57] *** g4 joined
[07:57] *** g4 left
[07:57] *** g4 joined
[07:59] *** dakkar joined
[08:03] *** xtreak left
[08:07] *** wamba joined
[08:10] *** xtreak joined
[08:17] *** AndyDee left
[08:17] *** AndyDee joined
[08:39] *** mr-foobar joined
[08:46] *** robertle joined
[08:50] *** Cabanossi left
[08:53] *** perlpilot_ joined
[08:53] *** Cabanossi joined
[08:53] *** perlpilot left
[08:53] *** pictho joined
[08:54] *** pictho left
[08:55] *** wamba left
[08:55] *** labster left
[08:56] *** domidumont left
[08:56] *** wamba joined
[08:56] *** mls joined
[08:57] *** domidumont joined
[09:01] *** xtreak left
[09:03] *** xtreak joined
[09:04] *** geekosaur left
[09:11] *** xtreak left
[09:13] *** xtreak joined
[09:13] *** xtreak left
[09:15] *** kaare__ joined
[09:16] *** kaare_ left
[09:17] *** [ptc] left
[09:20] *** [ptc] joined
[09:28] *** lowbro left
[09:30] *** kaare__ is now known as kaare_

[09:33] *** wamba left
[09:42] *** domidumont1 joined
[09:42] *** domidumont left
[09:55] *** xtreak joined
[09:55] *** wamba joined
[10:04] *** astj left
[10:05] *** Cabanossi left
[10:05] *** astj joined
[10:05] *** astj left
[10:05] *** astj joined
[10:06] *** ryan_ left
[10:07] *** Cabanossi joined
[10:19] <llfourn> is splice the only way to remove an array element?

[10:21] <jnthn> There's pop and shift also, or .= grep(...)

[10:21] <jnthn> But yes, if it's "index in the middle"

[10:22] <llfourn> jnthn: cool thanks.

[10:23] <llfourn> using python recently and have gotten used to list.remove

[10:23] <llfourn> (though, in python if you use it while iterating over it it will totally screw you)

[10:24] <jnthn> Using indexing, or an iteration over the values themselves?

[10:25] *** wamba left
[10:25] * jnthn guesses the latter

[10:26] <llfourn> iterating over the values themselves

[10:26] <jnthn> Yeah, I dunno how well that'll go in Perl 6 either, tbh :)

[10:26] *** MasterDuke joined
[10:26] <lizmat> for @a.keys.eager should be save I guess ?

[10:27] <jnthn> Sure, that will be, but that's not the values :)

[10:27] <lizmat> for @a.values.eager ?

[10:27] <jnthn> I just don't like writing code that mutates stuff it's iterating over, though.

[10:27] <lizmat> for @a.eager for that matter I guess

[10:27] <jnthn> I guess .eager is safe in that it snapshots

[10:27] <llfourn> m: my @a = <one two three four>; for @a { @a.splice(2,1) when "two"; .say } # seems ok

[10:27] <camelia> rakudo-moar 4c3190: OUTPUT: «one␤two␤four␤»

[10:28] <jnthn> Yeah, for me it's not a matter of whether it's OK in the language, so much as I just find such code hard to reason about

[10:28] <jnthn> Not at the point I write it...but a few months later when I have to change it :)

[10:28] <lizmat> true: when written the smartest way possible  :-)

[10:29] <lizmat> it will bite you in maintenance as you need to be smarter still then  :-)

[10:36] *** Cabanossi left
[10:37] *** pmurias joined
[10:37] <pmurias> is it ok if I add fudges for the js backend to roast?

[10:37] *** Cabanossi joined
[10:37] <tbrowder> hi, #perl6!

[10:37] <pmurias> tbrowder: hi

[10:38] <lizmat> pmurias: yes, that's what backend specific fudges are for   :-)

[10:38] <lizmat> #?rakudo.js I presume?

[10:38] <lizmat> or does that need infrastructure work before that does what we hope it does ?

[10:39] <tbrowder> i just saw bdfoy's update and read about appveyer, but i don't see it mentioned on p6 sites

[10:39] <tbrowder> hi, pmurias

[10:39] <jnthn> I think the compiler.backend thing was made general enough to handle new ones "naturally"

[10:40] <lizmat> tbrowder: it will be in tonght's Perl 6 Weekly  :-)

[10:40] <jnthn> pmurias++ # being far enough along to start running spectests :)

[10:40] *** wamba joined
[10:41] <tbrowder> ah1 (appveyor), excellent news for the win people!

[10:42] <tbrowder>  must be some big bucks for all those MS licenses

[10:42] <jnthn> Could do with setting appveyor up for MoarVM...

[10:42] *** AndyDee left
[10:43] <jnthn> Woulda caught the Windows build bustage we had recently

[10:43] <tbrowder> is it ready enough to add info on win testing to modules docs?

[10:46] *** araraloren left
[10:47] <jnthn> 'fraid I haven't got any usage experience with it myself, but I think it's been around for a while

[10:48] *** Actualeyes left
[10:48] *** xtreak left
[10:49] *** xtreak joined
[10:52] *** xtreak left
[10:54] <timotimo> i was asked to do that, and maybe i can do it

[10:56] *** xtreak joined
[10:57] <tbrowder> lizmat: i look forward to your excellent weekly p6 roundup, many kudos from the west side of the atlantic!

[10:58] <pmurias> jnthn: I'll use rakudo.js, fudge can handle it without any changes the same way it does rakudo.jvm (the fugdges will be mostly the same as it's the same unicode issues jvm has I'm fudging around)

[11:02] *** Actualeyes joined
[11:02] <tbrowder> question: can anyone explain diff between range operator (..) and sequence operator (...) other than seq can used for "backwards" iteration in for loops?

[11:03] <moritz> tbrowder: the range operator just returns a Range object

[11:03] <moritz> tbrowder: and you can't just use it for iteration, but also for range checking, for example

[11:03] <moritz> m: say 1.5 ~~ 1..3

[11:03] <camelia> rakudo-moar 5ae454: OUTPUT: «True␤»

[11:04] <tbrowder> and seq doesn't return an object?

[11:05] <moritz> tbrowder: well, it returns a Seq, which is only for iteration

[11:05] <moritz> tbrowder: and it's much more flexible; you can give it a callable, or it can deduce other sequences

[11:05] <tbrowder> ah, so 1..3 really is the set of real numbers between 1 and 3

[11:05] <moritz> m: say (1, 2, 4, 8 ... *).head(10)

[11:05] <camelia> rakudo-moar 5ae454: OUTPUT: «(1 2 4 8 16 32 64 128 256 512)␤»

[11:05] <moritz> m: say (1, 1, &[+] ... *).head(10)

[11:05] <camelia> rakudo-moar 5ae454: OUTPUT: «(1 1 2 3 5 8 13 21 34 55)␤»

[11:06] <tbrowder> so would you say a "best practice is to alwas use a seq oper in for loops?

[11:07] <jnthn> I think better advice is "use .. when it's powerful enough, ... when it isn't"

[11:07] <jnthn> .. is much simpler

[11:07] <tbrowder> thanks, moritz and jnthn

[11:08] *** mattp_ left
[11:08] *** mattp_ joined
[11:10] <lizmat> hmmm... perhaps ... could revert to a simple Range when it can ?

[11:11] <jnthn> Not really, because of the return type being different :)

[11:12] *** Actualeyes left
[11:12] <jnthn> May be that internally we can hand back a Seq that has whatever underlying iterator Range uses, though, if we ain't alrady doing that

[11:12] <lizmat> but it could be a Seq running of a Range

[11:12] <lizmat> exactly  :-)

[11:12] * lizmat puts it on her list

[11:15] *** xtreak left
[11:19] <Voldenet> I didn't know perl can deduce sequences :o

[11:19] <Voldenet> m: say (1, 3, 9, 81 ... *).head(10)

[11:19] <camelia> rakudo-moar 5ae454: OUTPUT: «Unable to deduce arithmetic or geometric sequence from 3,9,81 (or did you really mean '..'?)␤  in block <unit> at <tmp> line 1␤␤»

[11:19] <Voldenet> m: say (1, 3, 9, 27 ... *).head(10)

[11:19] <camelia> rakudo-moar 5ae454: OUTPUT: «(1 3 9 27 81 243 729 2187 6561 19683)␤»

[11:20] *** xtreak joined
[11:21] <lizmat> m: say (1, 3, { $_ * $_ } ... *).head(10)   # Voldenet 

[11:21] <camelia> rakudo-moar 5ae454: OUTPUT: «(1 3 9 81 6561 43046721 1853020188851841 3433683820292512484657849089281 11790184577738583171520872861412518665678211592275841109096961 1390084523771447327649397867896613031142188508085291379916048244300360726297664359410017691541096095218116655405488994…»

[11:25] *** kurahaupo__ joined
[11:25] *** kurahaupo__ left
[11:26] *** kurahaupo__ joined
[11:26] *** kurahaupo__ left
[11:26] *** xtreak left
[11:26] <Voldenet> m: say (0..10).map(3 ** *).head(10)

[11:26] <camelia> rakudo-moar 5ae454: OUTPUT: «(1 3 9 27 81 243 729 2187 6561 19683)␤»

[11:26] *** xtreak joined
[11:26] *** kurahaupo__ joined
[11:28] <Voldenet> m: say (1, 3, * * * ... *).head(10)

[11:28] <camelia> rakudo-moar 5ae454: OUTPUT: «(1 3 3 9 27 243 6561 1594323 10460353203 16677181699666569)␤»

[11:28] <Voldenet> oh, * * * in this context takes two previous elements

[11:28] <Voldenet> m: say (1, 1, * + * ... *).head(10)

[11:28] <camelia> rakudo-moar 5ae454: OUTPUT: «(1 1 2 3 5 8 13 21 34 55)␤»

[11:29] *** xtreak left
[11:30] *** lowbro joined
[11:31] *** lowbro left
[11:31] *** lowbro joined
[11:31] *** pmurias left
[11:32] *** pmurias joined
[11:33] *** Actualeyes joined
[11:36] <lizmat> Voldenet: yeah, that's why 1, 3 * * * ... *   wouldn't produce the result you wanted

[11:37] <lizmat> m: say (1, 3, * * * ... *).head(10)

[11:37] <camelia> rakudo-moar 5ae454: OUTPUT: «(1 3 3 9 27 243 6561 1594323 10460353203 16677181699666569)␤»

[11:38] <Voldenet> btw, while I'm reinstalling zef packages again, should I use tinynoise or readline?

[11:38] <Voldenet> erm

[11:38] <Voldenet> linenoise*

[11:39] *** xtreak joined
[11:40] *** pmurias left
[11:41] *** Exodist left
[11:41] *** pmurias joined
[11:41] *** Exodist joined
[11:43] *** mxco86 joined
[11:43] <lizmat> I've had good experience with linenoise on my MBP

[11:47] <Voldenet> I wish home/end worked on it though

[11:48] <lizmat> perhaps a PR is on order then :-)

[11:48] <Voldenet> it's funny, because even M-f M-b are working, but not home/end

[11:51] <lizmat> perhaps you have some keymapping active that linenoise doesn't see ?

[11:52] <Voldenet> oh, on regular xterm it does work

[11:55] *** bjz joined
[11:55] <Voldenet> the pesky case of ^[[H ^[[F vs ^[[1~ ^[[4~, eh

[12:00] *** raschipi joined
[12:08] *** wamba left
[12:09] *** wamba joined
[12:14] *** xtreak left
[12:14] <robertle> anyone got some experience with file locks under perl6? I want lockf or so, and am wondering whether there is something built-in or a module

[12:14] <timotimo> it's builtin

[12:15] * moritz uses sqlite for file locking :-)

[12:15] <timotimo> huh, hold on

[12:15] <timotimo> it's at least not documented

[12:15] <robertle> couldn't find it eaither :)

[12:16] <timotimo> but class IO::Handle totally has a lock and unlock method

[12:16] <timotimo> not sure if it's part of the IO rework our grantee is currently doing

[12:17] <robertle> ok, will look at that! who is that grantee btw?

[12:17] *** xtreak joined
[12:17] <robertle> or who else can I talk to to find out more?

[12:17] <timotimo> it's zoffix, you can find them over at #perl6-dev

[12:18] <lizmat> IO::Handle.lock *is* part of the IO grant work

[12:19] <timotimo> how's it going to change?

[12:19] <lizmat> http://rakudo.org/2017/04/02/upgrade-information-for-changes-due-to-io-grant-work/   look for IO::Handle.lock

[12:19] <lizmat> "IO::Handle.lock no longer takes an Int:D argument, but a pair of named arguments instead. By default, it makes an exclusive, blocking lock. Use :shared named argument to make a shared lock instead and :non-blocking to make the method fail instead of waiting for lock."

[12:19] <timotimo> ah

[12:19] <timotimo> yeah, that's a lot better

[12:19] <timotimo> than an integer flag

[12:20] <robertle> thanksright, but it still does not say what it actually does. e.g. around crashing without unlocking, NFS etc

[12:20] <robertle> is it just the fcntl? there is bound to be some platform-specific madness going on as well...

[12:20] <timotimo> one sec.

[12:21] <timotimo> on windows we lockFileEx

[12:21] <timotimo> and on linux we fnctl

[12:21] <timotimo> fcntl*

[12:21] *** ufobat joined
[12:21] <timotimo> well, on anything-except-windows, of course

[12:22] <robertle> this is in syncfile, right?

[12:22] <timotimo> yup

[12:22] <robertle> I am a noop and can never track down where stuff actually happens...

[12:23] <timotimo> a tool could potentially be written that tracks down what exactly an nqp::foobar does

[12:23] <timotimo> though it wouldn't necessarily be able to do the final step from "call lock on the REPR" to "these REPRs actually implement lock"

[12:23] <timotimo> though perhaps it could

[12:23] <robertle> I'm happy to do a lot of grepping, but frequently fail...

[12:24] *** pmurias left
[12:24] <robertle> either way, I'll cehck this out. thanks a lot!

[12:24] *** pmurias joined
[12:25] *** zakharyas left
[12:25] *** llfourn left
[12:26] *** parv left
[12:28] *** titsuki left
[12:30] *** Exodist left
[12:32] *** Exodist joined
[12:32] *** zakharyas joined
[12:37] *** yusrideb left
[12:39] <tbrowder>  ref ranges: is it true that a range must be defined on numbers increasing monotonically?

[12:40] <lizmat> m: dd "a" .. "z"

[12:40] <camelia> rakudo-moar b64f21: OUTPUT: «"a".."z"␤»

[12:40] <lizmat> m: dd |("a" .. "z")

[12:40] <camelia> rakudo-moar b64f21: OUTPUT: «"a"␤"b"␤"c"␤"d"␤"e"␤"f"␤"g"␤"h"␤"i"␤"j"␤"k"␤"l"␤"m"␤"n"␤"o"␤"p"␤"q"␤"r"␤"s"␤"t"␤"u"␤"v"␤"w"␤"x"␤"y"␤"z"␤»

[12:40] <lizmat> increasing monotonically if iterated over, but not necessarily numbers

[12:40] <tbrowder> ok, then increasing on whatever, gotcha

[12:41] <lizmat> well, and then there's ranges you can't iterator over:

[12:41] <lizmat> m: dd |(-Inf .. 0)

[12:41] *** Exodist left
[12:41] <camelia> rakudo-moar b64f21: OUTPUT: «(timeout)»

[12:41] <lizmat> m: dd |(-Inf .. 0).head(10)

[12:41] <camelia> rakudo-moar b64f21: OUTPUT: «-Inf␤-Inf␤-Inf␤-Inf␤-Inf␤-Inf␤-Inf␤-Inf␤-Inf␤-Inf␤»

[12:41] *** Exodist joined
[12:42] <tbrowder> okay, i'll stay in the simle p6 world for now, thanks, lizmat

[12:46] *** xtreak left
[12:51] <Voldenet> now I wonder

[12:51] <Voldenet> m: dd |(-Inf .. 0).reverse

[12:52] <camelia> rakudo-moar b64f21: OUTPUT: «(timeout)»

[12:52] <Voldenet> uh... I broke it

[12:53] <Voldenet> m: dd ((-Inf .. 0).reverse).take(10)

[12:53] <camelia> rakudo-moar b64f21: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[12:53] <Voldenet> m: dd (-Inf .. 0).reverse().take(10)

[12:53] <camelia> rakudo-moar b64f21: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[12:53] <Voldenet> m: dd (-Inf .. 0).reverse().head(10)

[12:53] <camelia> rakudo-moar b64f21: OUTPUT: «(0, -1, -2, -3, -4, -5, -6, -7, -8, -9).Seq␤»

[12:56] <lizmat> smart, innit :-)

[12:57] *** jeek left
[12:57] <Voldenet> yeah, it's funny how most languages would fail on this though

[13:05] *** mcmillhj joined
[13:10] *** sufrostico joined
[13:10] <Voldenet> what's the perl6 version of "std::variant<int, string>", should I always use multi instead?

[13:11] <Voldenet> m: subset V of Any where { $_ ~~ Int or $_ ~~ Str }; my V $v = "ok";

[13:11] <camelia> rakudo-moar 224e40: ( no output )

[13:13] <Voldenet> hm, moderately acceptable

[13:13] *** titsuki joined
[13:13] *** pmurias left
[13:13] *** adu left
[13:16] <jnthn> m: subset V where Int|Str; my V $v = 42; say $v; $v = '42'; say $v; $v = 4.2; say $v

[13:16] <camelia> rakudo-moar 224e40: OUTPUT: «42␤42␤Type check failed in assignment to $v; expected V but got Rat (4.2)␤  in block <unit> at <tmp> line 1␤␤»

[13:16] <jnthn> That's a shorter way to write it :)

[13:17] <Voldenet> makes sense

[13:18] <Voldenet> but hm, now I look at it, there's no real use case where multi isn't superior

[13:23] *** bjz_ joined
[13:24] *** bjz left
[13:32] *** skids joined
[13:37] <[Coke]> .seen pmurias

[13:37] <yoleaux> I saw pmurias 10:58Z in #perl6: <pmurias> jnthn: I'll use rakudo.js, fudge can handle it without any changes the same way it does rakudo.jvm (the fugdges will be mostly the same as it's the same unicode issues jvm has I'm fudging around)

[13:38] * [Coke] waves from new $DAYJOB

[13:38] <timotimo> greetings [Coke] 

[13:40] *** perlpilot_ is now known as perlpilot

[13:50] *** Cabanossi left
[13:52] <lizmat> [Coke] o/

[13:52] *** Cabanossi joined
[13:56] *** mcmillhj left
[14:00] *** wamba left
[14:01] *** curan left
[14:02] *** bjz joined
[14:02] *** geekosaur joined
[14:02] *** geekosaur left
[14:03] *** bjz_ left
[14:05] *** jonas1 joined
[14:06] *** geekosaur joined
[14:08] *** mcmillhj joined
[14:13] *** mcmillhj left
[14:13] <moritz> [Coke]: hey, what/where are you working now?

[14:19] *** mcmillhj joined
[14:23] *** llfourn joined
[14:24] *** mcmillhj left
[14:25] *** kurahaupo__ is now known as kurahaupo

[14:26] <Geth> ¦ doc: bf377c7702 | (Zoffix Znet)++ | doc/Type/IO.pod6

[14:26] <Geth> ¦ doc: [io grant] Document &indir

[14:26] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/bf377c7702

[14:29] *** cdg joined
[14:29] *** lowbro left
[14:33] *** sufrostico left
[14:34] *** bjz left
[14:34] *** bjz_ joined
[14:38] *** mcmillhj joined
[14:43] *** alimon joined
[14:43] *** mcmillhj left
[14:50] *** Exodist left
[14:50] *** Exodist joined
[14:51] <Geth> ¦ doc: 5aa614f364 | (Zoffix Znet)++ | doc/Language/5to6-perlfunc.pod6

[14:51] <Geth> ¦ doc: [io grant] Improve suggestion for Perl 5's opendir

[14:51] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5aa614f364

[14:54] *** mcmillhj joined
[14:55] *** lowbro joined
[14:57] *** [ptc] left
[14:58] *** sufrostico joined
[14:59] *** [ptc] joined
[14:59] *** mcmillhj left
[15:04] *** bjz_ left
[15:09] *** Guest14087 joined
[15:12] *** sufrostico left
[15:14] *** bjz joined
[15:14] *** mcmillhj joined
[15:17] *** wamba joined
[15:19] *** mcmillhj left
[15:20] *** bdmatatu joined
[15:22] *** zakharyas left
[15:23] <[Coke]> moritz: I'm basically doing the exact same job for the same client out of the same office, except I am now getting paid by one of the "big 4" accounting firms instead of the client. (Thankfully. could have been a ton of layoffs here)

[15:23] *** zakharyas joined
[15:24] *** Guest14087 left
[15:26] <[Coke]> (actual job is basically tax IT. webapps, devops around various in house (er, that changed as of today) tax apps)

[15:27] <Voldenet> >tax apps

[15:27] * Voldenet runs away scared

[15:27] <Voldenet> Actually, I'm not that scared

[15:27] <[Coke]> Voldenet: right there with ya. :|

[15:27] <[Coke]> "AIGH". "oh, wait, this isn't so bad."

[15:28] <Voldenet> Got a question a propos supplies: Can I somehow make Supplier.emit stuff in a consumer's thread instead?

[15:28] <Voldenet> m: given Supplier.new -> $s { for ^3 -> $consumer { $s.Supply().tap( -> $val { sleep(.1); ($consumer, $val).say }) }; $s.emit($_) for ^3; }

[15:28] <camelia> rakudo-moar 1ebeeb: OUTPUT: «(0 0)␤(1 0)␤(2 0)␤(0 1)␤(1 1)␤(2 1)␤(0 2)␤(1 2)␤(2 2)␤»

[15:30] *** bdmatatu left
[15:31] <Geth> ¦ doc: a53015ae49 | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[15:31] <Geth> ¦ doc: [io grant] Clarify value of IO::Path.path

[15:31] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a53015ae49

[15:33] *** AlexDaniel joined
[15:33] <Geth> ¦ doc: bdd18f14e8 | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[15:33] <Geth> ¦ doc: [io grant] Fix desc of IO::Path.Str

[15:33] <Geth> ¦ doc: 

[15:33] <Geth> ¦ doc: The method is just an alias for $.path attribute, but the prose

[15:33] <Geth> ¦ doc: makes it sound you like get the complete path, which isn't true.

[15:33] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/bdd18f14e8

[15:33] *** mcmillhj joined
[15:34] *** sufrostico joined
[15:35] <Geth> ¦ doc: b78d4fd907 | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[15:35] <Geth> ¦ doc: [io grant] Include type names in links to methods

[15:35] <Geth> ¦ doc: 

[15:35] <Geth> ¦ doc: Since links will list all the methods with such name, make it

[15:35] <Geth> ¦ doc: easier for reader to know which type was meant.

[15:35] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b78d4fd907

[15:38] *** mcmillhj left
[15:40] *** khw joined
[15:46] *** domidumont1 left
[15:47] *** bjz left
[15:48] *** mcmillhj joined
[15:51] <Voldenet> The only solution I can think of would be starting a consuming values from a Supply and then dispatching them with a thread

[15:52] <Voldenet> but I hope there's more magical solution than that :)

[15:52] <jnthn> Voldenet: Channels, not supplies, are the primarly mechanism for producer/consumer

[15:53] *** mcmillhj left
[15:53] <Voldenet> but when you need a mechanizm for multiple readers Supply is the one to use, right?

[15:54] <jnthn> Competing?

[15:54] <jnthn> Or publish/subscribe?

[15:54] <Voldenet> Not competing, broadcasting

[15:54] <Voldenet> multiple reader with all of them receiving the same set

[15:54] <Voldenet> s/reader/readers/

[15:54] <jnthn> OK, then supplies, and see the .schedule-on and .migrate methods

[15:54] <perlpilot> one of these days, someone should write a cookbook for this sort of stuff.

[15:55] <Voldenet> Ah. That tiny little line was the method I was looking for! :)

[15:55] <jnthn> Probably you want schedule-on from the way you described things :)

[15:55] <jnthn> perlpilot: Yeah, been thinking about that ;-)

[15:56] * jnthn wanders off to rest for a bit

[15:57] *** abraxxa left
[16:01] *** mcmillhj joined
[16:02] *** zakharyas left
[16:03] *** eyck left
[16:05] *** robertle left
[16:06] *** mcmillhj left
[16:17] *** mcmillhj joined
[16:22] *** mcmillhj left
[16:24] *** travis-ci joined
[16:24] <travis-ci> Doc build errored. Zoffix Znet '[io grant] Fix desc of IO::Path.Str

[16:24] <travis-ci> https://travis-ci.org/perl6/doc/builds/218119192 https://github.com/perl6/doc/compare/a53015ae49f9...bdd18f14e820

[16:24] *** travis-ci left
[16:29] *** lowbro left
[16:30] *** petercommand joined
[16:30] *** petercommand left
[16:30] *** petercommand joined
[16:32] *** dha joined
[16:35] *** eyck joined
[16:37] *** Cabanossi left
[16:37] *** mcmillhj joined
[16:38] *** Cabanossi joined
[16:41] *** dakkar left
[16:41] *** mcmillhj left
[16:50] *** domidumont joined
[16:51] *** mcmillhj joined
[16:55] *** mcmillhj left
[16:57] *** aindilis left
[16:59] *** robertle joined
[17:00] *** tardisx_ left
[17:02] *** mcmillhj joined
[17:02] *** TeamBlast left
[17:04] *** TeamBlast joined
[17:05] *** Cabanossi left
[17:06] *** mcmillhj left
[17:06] *** raschipi left
[17:07] *** Cabanossi joined
[17:11] *** ChoHag joined
[17:18] *** mcmillhj joined
[17:23] *** mcmillhj left
[17:28] *** TeamBlast left
[17:31] *** mcmillhj joined
[17:32] *** TeamBlast joined
[17:34] *** zakharyas joined
[17:36] *** mcmillhj left
[17:51] *** mcmillhj joined
[17:56] *** mcmillhj left
[18:02] *** zakharyas left
[18:03] *** mtj_ left
[18:09] *** Exodist left
[18:10] *** Exodist joined
[18:10] *** wamba left
[18:11] *** mcmillhj joined
[18:12] *** espadrine joined
[18:12] *** khw left
[18:17] *** mcmillhj left
[18:27] *** mcmillhj joined
[18:31] *** labster joined
[18:32] *** mcmillhj left
[18:32] *** [particle] left
[18:38] *** cdg left
[18:39] <RabidGravy> boo!

[18:41] <timotimo> yo gravy how's you?

[18:41] *** dalek left
[18:41] *** dalek joined
[18:41] *** ChanServ sets mode: +v dalek

[18:41] *** john51_ joined
[18:41] *** john51 left
[18:42] * lizmat starts with this weeks Perl 6 Weekly

[18:44] <AlexDaniel> \o/

[18:45] *** mcmillhj joined
[18:45] <vendethiel> lizmat++

[18:48] *** jeek joined
[18:49] *** AndyDee joined
[18:49] *** mcmillhj left
[18:50] *** dha left
[18:50] *** Cabanossi left
[18:52] *** Cabanossi joined
[18:56] <[Coke]> lizmat++

[18:56] <Geth> ¦ specs: 5a7a5aab85 | (Zoffix Znet)++ | v6d.pod

[18:56] <Geth> ¦ specs: Add reminder to deprecate IO::Path.chdir in 6.d

[18:56] <Geth> ¦ specs: review: https://github.com/perl6/specs/commit/5a7a5aab85

[18:56] <dylanwh> ^ because it can't work under the jvm?

[18:57] <dylanwh> (all sorts of wonderfully fun things can happen if you manage to call chdir() from the JVM)

[18:57] *** sufrostico left
[18:58] <AlexDaniel> dylanwh: https://github.com/zoffixznet/IOwesomeness/issues/26

[18:59] *** sufrostico joined
[19:02] <AlexDaniel> “Rename IO::Handle.slurp-rest to just .slurp” hmmmm

[19:02] <dylanwh> ah

[19:03] <AlexDaniel> it feels there was some reason for that, hm

[19:04] *** domidumont left
[19:05] *** mcmillhj joined
[19:07] *** dha joined
[19:08] <dylanwh> I just know large parts of the JVM will not work right if you do a real chdir()

[19:08] <dylanwh> if that chdir is emulated, that should be safe

[19:08] <dylanwh> but actually changing the OS's idea of the current dir will break the JVM.

[19:09] *** sufrostico left
[19:09] <dylanwh> (subtly break; some java APIs will not realize the cwd is different and return the old one, and in some cases involving dynamically loading bytecode will fail)

[19:09] <timotimo> AlexDaniel: just because it didn't close the handle by default, which is something .slurp itself does ... technically speaking

[19:09] <dylanwh> at least circa java 6ish

[19:10] *** sufrostico joined
[19:11] <AlexDaniel> timotimo: 🤷

[19:11] <AlexDaniel> timotimo: https://github.com/zoffixznet/IOwesomeness/issues/9

[19:14] *** silug left
[19:14] <RabidGravy> timotimo, I'm fabulous

[19:17] *** jonas1 left
[19:22] *** sufrostico left
[19:24] *** rindolf left
[19:26] *** kaare__ joined
[19:26] *** kaare_ left
[19:26] *** kaare__ is now known as kaare_

[19:31] *** sufrostico joined
[19:32] *** brrt joined
[19:36] *** rindolf joined
[19:37] <dha> Crazy question: Has anyone tried building rakudo in Ubuntu running under Crouton on a Chromebook? :-)

[19:38] *** bjz joined
[19:41] <timotimo> i haven't even heard of crouton yet

[19:42] <dha> Allows you to install an actual linux dist on a chromebook.

[19:42] <timotimo> ah, ok

[19:42] <timotimo> like ubuntu-on-windows10 :P :P :P

[19:42] <RabidGravy> I've got a computer called fromage if that counts

[19:42] <dha> effectively allows you a dual boot with chromeos and (in most cases, I suspect) ubuntu.

[19:42] <timotimo> appreciation of such computers comes from age.

[19:42] <dha> RabidGravy - :-)

[19:44] <dha> I was leaving the country and with all the shouting about the government searches of data at the border, I figured I should take something other than my main laptop.

[19:44] <dha> But didn't want to spend a whole bunch of money on it. This was suggested as a solution, and has mostly worked well.

[19:45] <dha> However, I'm now getting weird permission errors when trying to build rakudo

[19:46] <dha> *probably* (I'm guessing) because I'm building it on the SD card I've put in it so I have a usable amount of storage.

[19:47] *** agentzh joined
[19:47] <dha> I'm kind of tempted to just try it with sudo and see if that resolves the issue.

[19:47] <RabidGravy> oh, is the SD formatted as native or fat32?

[19:48] <dha> damn good question. I would think I would have formatted it as native, but I no longer remember.

[19:49] * dha now tries to remember how to determine this.

[19:49] <RabidGravy> it's just on fat32 it might not be able to do somethings to file

[19:50] <RabidGravy> mount should tell you

[19:53] <dha> I'd have to unmount it first for that, though, right?

[19:54] <geekosaur> 'mount' without arguments shows you what is currently mounted including fstype

[19:54] <dha> ah.

[19:55] <geekosaur> see also /proc/mounts on linux

[19:55] <dha> This is the problem with using things like OS X. You rarely need to deal with this stuff on the command line. :-)

[19:56] <dha> Hm. it's saying fuseblk, which I think means NTFS. :-/

[19:57] * dha wonders if this means he is screwed.

[20:00] <RabidGravy> I'm not sure I've got anything I can format to find out

[20:03] <dha> I think, since there's nothing tremendously important on this machine, I may just try sudo and see if that makes the permission problems go away. maybe the sd card thinks I'm not supposed to do stuff with it in some contexts. :-/

[20:07] <dha> Yikes. the space in "SD Card" seems to be confusing something, as I'm getting an error that refers to "/var/host/media/removable/SD"

[20:07] <hobbs> some software is stupid.

[20:07] <dha> yep.

[20:14] *** TheDir left
[20:21] *** cdg joined
[20:23] *** brrt left
[20:23] *** agentzh left
[20:30] *** _28_ria left
[20:36] *** perlawhirl joined
[20:37] <perlawhirl> m: say so Bag(<A P>) ≼ Bag(<A T>)

[20:37] <camelia> rakudo-moar cb27bc: OUTPUT: «True␤»

[20:37] <perlawhirl> bisectable6: say so Bag(<A P>) ≼ Bag(<A T>) 

[20:37] <bisectable6> perlawhirl, Bisecting by output (old=2015.12 new=cb27bce) because on both starting points the exit code is 0

[20:37] <bisectable6> perlawhirl, bisect log: https://gist.github.com/bdb03e47065afd5746c38d675d96d1cf

[20:37] <bisectable6> perlawhirl, (2017-04-03) https://github.com/rakudo/rakudo/commit/928a406a8ece70a68136f378960bc7382e122777

[20:41] <perlawhirl> .tell lizmat Baggy (<+)/(>+) Baggy commit is not working properly: https://irclog.perlgeek.de/perl6/2017-04-03#i_14370322 

[20:41] <yoleaux> perlawhirl: I'll pass your message to lizmat.

[20:42] <lizmat> perlawhirl: will look at it after the P6W

[20:42] <yoleaux> 20:41Z <perlawhirl> lizmat: Baggy (<+)/(>+) Baggy commit is not working properly: https://irclog.perlgeek.de/perl6/2017-04-03#i_14370322

[20:42] <lizmat> meanwhile, adding some todoed tests to roast would be appreciated  :-)

[20:42] <perlawhirl> np

[20:43] <perlawhirl> i'm actually really happy you're working on the set_operators... i actually had a commit in mind just shortly before you started your work

[20:43] <perlawhirl> with regards to (elem) and (cont)

[20:44] <lizmat> could you gist your idea ?

[20:44] <perlawhirl> Bag's end up being coerced to a Set, which slows things down. could that be broadened to QuantHash?

[20:45] <lizmat> that's actually on my list of things to look at

[20:45] <lizmat> if we need Set semantics, we don't actually need to coerce Bags to Sets if we can look on the inside :-)

[20:46] *** rindolf left
[20:46] <perlawhirl> cool... thanks lizat++

[20:49] *** kst` is now known as kst

[20:51] *** [particle] joined
[20:51] *** perlawhirl left
[20:53] *** sufrostico left
[20:54] *** bjz left
[20:56] *** robertle left
[20:59] *** sufrostico joined
[21:11] *** RabidGravy left
[21:12] *** sufrostico left
[21:12] <lizmat> wow, a lot happened the past week

[21:13] <dha> That's good in this context, right?

[21:13] *** skids left
[21:15] <timotimo> yup

[21:15] <dha> whew.

[21:15] <timotimo> liz is writing the weekly, so that means we got a good set of things to report

[21:17] *** setty1 left
[21:18] *** mcmillhj left
[21:22] *** pmurias joined
[21:24] <pmurias> dylanwh: IO::Path.chdir is being deprecated because it doesn't do what you would expect it to do (it doesn't actually change anything)

[21:24] <dha> In recent times, "a lot happened in the last week" has not been universally a good thing. :-/

[21:25] *** sufrostico joined
[21:25] <lizmat> dha: true, and a lot won't be mentioned on the P6W  :-)

[21:30] <dha> lizmat - And thank you for that. :-)

[21:32] *** mcmillhj joined
[21:34] <AlexDaniel> moritz: hey. I'm trying to fetch IRC logs with :Accept<application/json>, but I am getting this as a response: {"ARRAY(0x34eb040)":"/perl6/ARRAY(0x34eb040)"}

[21:34] <AlexDaniel> moritz: something is not right…

[21:35] *** agentzh joined
[21:36] *** Cabanossi left
[21:37] <AlexDaniel> moritz: ah sorry, that's an error on my side

[21:37] <AlexDaniel> moritz: the responsy is still weird though…

[21:37] *** agentzh_ joined
[21:38] *** Cabanossi joined
[21:38] *** mcmillhj left
[21:39] *** agentzh left
[21:43] *** bjz joined
[21:53] *** bjz left
[21:55] *** dha left
[21:58] *** bjz joined
[22:00] *** mcmillhj joined
[22:05] *** mcmillhj left
[22:06] *** bjz left
[22:11] *** mcmillhj joined
[22:13] *** cpage_ left
[22:15] *** agentzh_ left
[22:16] *** mcmillhj left
[22:17] *** agentzh joined
[22:19] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/04/03/2017-14-the-io-front-advances/

[22:22] *** ChoHag left
[22:23] *** dha joined
[22:23] *** espadrine left
[22:25] *** mcmillhj joined
[22:29] *** mcmillhj left
[22:36] *** Cabanossi left
[22:38] *** mtj_ joined
[22:38] *** Cabanossi joined
[22:38] *** cpage_ joined
[22:39] *** mcmillhj joined
[22:44] *** mcmillhj left
[22:45] *** cpage_ left
[22:46] *** sufrostico left
[22:48] *** sufrostico joined
[22:52] *** sufrostico left
[22:53] *** dha left
[22:55] *** mcmillhj joined
[23:00] *** mcmillhj left
[23:04] *** kyan joined
[23:17] *** cpage_ joined
[23:18] *** kurahaupo left
[23:22] *** mcmillhj joined
[23:26] *** mcmillhj left
[23:28] *** dct joined
[23:32] *** Labb29 joined
[23:32] *** Labb29 left
[23:33] *** Labb29 joined
[23:38] *** pmurias left
[23:39] *** nicq joined
[23:39] <nicq> Hello o/

[23:40] <sammers> hello

[23:40] *** Labb29 left
[23:43] <AlexDaniel> moritz: and still, stuff is not parseable. Here is a gist from #perl6-dev 2017-03-17: https://gist.github.com/AlexDaniel/aff83ce7e7d45227e7b179a330d0deb9

[23:43] <AlexDaniel> moritz: both JSON::Tiny and JSON::Fast are confused by this: "..rakudo-jvm fb4f16: OUTPUT: «[[\"I\", \" \", \"❤\", \"️\", \" \", \"P\", \"e\", \"r\", \"l\", \" \", \"6\"], 10, 6]␤»"

[23:44] <AlexDaniel> JSON::Fast says “at 6525: I don't understand the escape sequence \"️”  and JSON::Tiny says “Input (13231 characters) is not a valid JSON string”

[23:45] <AlexDaniel> not sure if both parsers are wrong or if clog should not output stuff like this

[23:46] <AlexDaniel> .tell moritz https://irclog.perlgeek.de/perl6/2017-04-03#i_14371056

[23:46] <yoleaux> AlexDaniel: I'll pass your message to moritz.

[23:50] *** mcmillhj joined
[23:51] *** skids joined
[23:55] *** mcmillhj left
[23:55] *** nicq left
