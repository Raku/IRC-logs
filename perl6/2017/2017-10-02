[00:01] *** cdg joined
[00:04] *** Guest431 left
[00:06] *** virtualsue left
[00:07] *** virtualsue joined
[00:21] <Geth> ¦ modules.perl6.org/cpan-support: dd123505c8 | (Zoffix Znet)++ | 4 files

[00:21] <Geth> ¦ modules.perl6.org/cpan-support: Implement rudimentary CPAN dist processor

[00:21] <Geth> ¦ modules.perl6.org/cpan-support: review: https://github.com/perl6/modules.perl6.org/commit/dd123505c8

[00:22] <Zoffix> Well, that was easy... It's almost as if the original designer of the site thought ahead and imagined one day we'd have more than one dist source :}

[00:22] *** evalable6 left
[00:22] *** evalable6 joined
[00:22] <Zoffix> One thing I don't get is how to handle dists that exist on both CPAN and p6c ecosystem... Currently, it indexes them as if they were entirely differnt dists :/

[00:24] <Zoffix> I think I'm gonna leave it like that though. To encourage people who use CPAN to toss the dist from p6c. We could have some key in `support` for repository so that the site could link to it even for CPAN dists

[00:26] <Zoffix> heh, I see ./id/J/JO/JONATHAN/Perl6/NativeCall-v1.meta in CPAN dists that looks to link to jnthn/zavolaj, which is a 404

[00:28] *** cdg left
[00:34] <Geth> ¦ perl6-most-wanted: 0b94ef197f | (David Warring)++ (committed using GitHub Web editor) | most-wanted/modules.md

[00:34] <Geth> ¦ perl6-most-wanted: Update modules.md

[00:34] <Geth> ¦ perl6-most-wanted: 

[00:34] <Geth> ¦ perl6-most-wanted: Note WIP on Font::Freetype - bindings to the Freetype2 library

[00:34] <Geth> ¦ perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/0b94ef197f

[00:42] *** Aaronepower left
[00:55] <Geth> ¦ modules.perl6.org/cpan-support: 03fa2a7a78 | (Zoffix Znet)++ | 4 files

[00:55] <Geth> ¦ modules.perl6.org/cpan-support: Improve CPAN processor

[00:55] <Geth> ¦ modules.perl6.org/cpan-support: 

[00:55] <Geth> ¦ modules.perl6.org/cpan-support: - Load last modified time

[00:55] <Geth> ¦ modules.perl6.org/cpan-support: - Make dist processor skip the interval pause, since we don't need it

[00:55] <Geth> ¦ modules.perl6.org/cpan-support: - Don't run the meta checker post processor

[00:55] <Geth> ¦ modules.perl6.org/cpan-support: review: https://github.com/perl6/modules.perl6.org/commit/03fa2a7a78

[00:57] *** evalable6 left
[00:57] *** evalable6 joined
[01:08] *** vendethiel- joined
[01:10] *** Ven`` left
[01:11] *** arnsholt left
[01:13] *** Morfent left
[01:21] *** astj joined
[01:22] *** astj left
[01:28] * Zoffix calls it a day

[01:34] *** virtualsue left
[01:36] *** virtualsue joined
[01:36] *** astj joined
[01:36] *** astj left
[01:36] *** astj joined
[01:42] *** giraffe joined
[01:42] *** giraffe is now known as Guest21598

[01:45] *** ilbot3 left
[01:49] *** epony joined
[01:55] *** ilbot3 joined
[01:55] *** ChanServ sets mode: +v ilbot3

[02:03] *** Khisanth left
[02:06] *** cdg joined
[02:09] *** Cabanossi left
[02:10] *** Cabanossi joined
[02:11] *** cdg left
[02:11] *** cdg joined
[02:16] *** Khisanth joined
[02:24] *** Morfent joined
[02:26] *** arnsholt joined
[02:38] *** Cabanossi left
[02:40] *** Cabanossi joined
[02:40] <Zoffix> upgrading perl on the modules.perl6.org. I'm pretty sure I installed a new perl along the old one and so the site won't be affected until I `switch` to newer perl instead of `use`ing it on the current shell (still installing all the deps). But mentioning this in case things explode

[02:40] <Zoffix> ... I'm going to bed

[02:46] *** noganex_ joined
[02:49] *** noganex left
[02:56] *** cdg left
[02:59] *** cdg joined
[03:04] *** cdg left
[03:16] *** AlexDaniel joined
[03:20] *** AlexDaniel left
[03:22] *** kurahaupo left
[03:22] *** kurahaupo joined
[03:22] *** kurahaupo left
[03:22] *** kurahaupo joined
[03:22] *** kurahaupo left
[03:23] *** kurahaupo joined
[03:23] *** kurahaupo left
[03:38] *** bloatable6 left
[03:38] *** committable6 left
[03:38] *** benchable6 left
[03:38] *** evalable6 left
[03:38] *** nativecallable6 left
[03:38] *** statisfiable6 left
[03:38] *** coverable6 left
[03:38] *** releasable6 left
[03:38] *** quotable6 left
[03:38] *** greppable6 left
[03:38] *** squashable6 left
[03:38] *** bisectable6 left
[03:38] *** unicodable6 left
[03:38] *** evalable6 joined
[03:38] *** greppable6 joined
[03:38] *** quotable6 joined
[03:38] *** nativecallable6 joined
[03:38] *** committable6 joined
[03:38] *** ChanServ sets mode: +v committable6

[03:38] *** bloatable6 joined
[03:38] *** coverable6 joined
[03:38] *** benchable6 joined
[03:38] *** ChanServ sets mode: +v benchable6

[03:38] *** releasable6 joined
[03:38] *** ChanServ sets mode: +v releasable6

[03:38] *** unicodable6 joined
[03:38] *** bisectable6 joined
[03:38] *** squashable6 joined
[03:38] *** statisfiable6 joined
[03:39] *** redhands joined
[03:42] * BenGoldberg wonders why all thirteen of the *able6 bots simultaneously quit then reconnected.  Is it because we've got an unlucky number of them?  . o O(Where's a hobbit when you need one)

[03:47] <redhands> How can I force stdout autoflush on every write?

[03:47] *** BenGoldberg left
[03:57] *** Cabanossi left
[04:00] *** cdg joined
[04:00] *** Cabanossi joined
[04:05] *** cdg left
[04:20] *** releasable6 left
[04:20] *** quotable6 left
[04:20] *** squashable6 left
[04:20] *** coverable6 left
[04:20] *** nativecallable6 left
[04:20] *** greppable6 left
[04:20] *** committable6 left
[04:20] *** bisectable6 left
[04:20] *** bloatable6 left
[04:20] *** evalable6 left
[04:20] *** unicodable6 left
[04:20] *** statisfiable6 left
[04:20] *** benchable6 left
[04:20] *** nativecallable6 joined
[04:20] *** bloatable6 joined
[04:20] *** coverable6 joined
[04:20] *** quotable6 joined
[04:20] *** ChanServ sets mode: +v bloatable6

[04:20] *** ChanServ sets mode: +v coverable6

[04:20] *** ChanServ sets mode: +v quotable6

[04:20] *** greppable6 joined
[04:20] *** benchable6 joined
[04:20] *** unicodable6 joined
[04:20] *** bisectable6 joined
[04:20] *** evalable6 joined
[04:20] *** committable6 joined
[04:20] *** ChanServ sets mode: +v benchable6

[04:20] *** ChanServ sets mode: +v unicodable6

[04:20] *** ChanServ sets mode: +v bisectable6

[04:20] *** ChanServ sets mode: +v evalable6

[04:20] *** ChanServ sets mode: +v committable6

[04:20] *** releasable6 joined
[04:20] *** squashable6 joined
[04:20] *** ChanServ sets mode: +v squashable6

[04:20] *** statisfiable6 joined
[04:24] *** skids left
[04:37] *** piojo joined
[04:53] *** committable6 left
[04:53] *** greppable6 left
[04:53] *** squashable6 left
[04:53] *** bisectable6 left
[04:53] *** statisfiable6 left
[04:53] *** benchable6 left
[04:53] *** bloatable6 left
[04:53] *** releasable6 left
[04:53] *** nativecallable6 left
[04:53] *** evalable6 left
[04:53] *** quotable6 left
[04:53] *** coverable6 left
[04:53] *** unicodable6 left
[04:53] *** quotable6 joined
[04:53] *** ChanServ sets mode: +v quotable6

[04:53] *** nativecallable6 joined
[04:53] *** benchable6 joined
[04:53] *** greppable6 joined
[04:53] *** coverable6 joined
[04:53] *** bloatable6 joined
[04:53] *** ChanServ sets mode: +v benchable6

[04:53] *** ChanServ sets mode: +v greppable6

[04:53] *** ChanServ sets mode: +v coverable6

[04:53] *** ChanServ sets mode: +v bloatable6

[04:53] *** evalable6 joined
[04:53] *** committable6 joined
[04:53] *** bisectable6 joined
[04:53] *** unicodable6 joined
[04:53] *** releasable6 joined
[04:53] *** ChanServ sets mode: +v bisectable6

[04:53] *** ChanServ sets mode: +v unicodable6

[04:53] *** ChanServ sets mode: +v releasable6

[04:53] *** squashable6 joined
[04:53] *** ChanServ sets mode: +v squashable6

[04:54] *** statisfiable6 joined
[04:58] *** Cabanossi left
[05:00] *** Cabanossi joined
[05:00] *** Ven`` joined
[05:01] *** cdg joined
[05:01] *** vendethiel- left
[05:03] *** cgfbee joined
[05:06] *** cdg left
[05:14] *** mempko joined
[05:18] *** hoffentlichja joined
[05:25] *** AlexDaniel joined
[05:27] *** araujo left
[05:27] *** araujo joined
[05:28] *** araujo left
[05:29] *** araujo joined
[05:37] <samcv> how do i get chdir to chdir taking into account a Path::IO's CWD?

[05:37] <samcv> i made a Path::IO object, but if i chdir into it, it ignores the CWD associated with the IO object

[05:38] <samcv> .IO.absolute.IO works but is there a trivial way to fix it without doing that?

[05:41] *** mempko left
[05:44] *** khw left
[05:51] *** mempko joined
[05:56] *** mempko left
[05:58] *** mempko joined
[05:58] *** domidumont joined
[06:01] *** wamba joined
[06:02] *** cdg joined
[06:02] *** mempko left
[06:04] *** bisectable6 left
[06:04] *** bisectable6 joined
[06:04] *** ChanServ sets mode: +v bisectable6

[06:04] *** Mrofnet joined
[06:05] *** piojo left
[06:06] *** cdg left
[06:07] *** piojo joined
[06:08] *** Morfent left
[06:08] *** sena_kun joined
[06:09] <u-ou> What value should I use to denote the absence of a value? Is the answer Nil?

[06:09] *** bisectable6 left
[06:09] *** bisectable6 joined
[06:09] *** ChanServ sets mode: +v bisectable6

[06:09] <hoffentlichja> u-ou: Any

[06:09] <u-ou> ahh

[06:09] <u-ou> what's Nil for then?

[06:11] <hoffentlichja> m: sub r() {}; r;

[06:11] <camelia> rakudo-moar 4fae07: ( no output )

[06:11] <hoffentlichja> m: sub r() {}; say r;

[06:11] <camelia> rakudo-moar 4fae07: OUTPUT: «Nil␤»

[06:12] *** bisectable6 left
[06:13] <u-ou> ic

[06:13] *** bisectable6 joined
[06:13] *** ChanServ sets mode: +v bisectable6

[06:13] *** bisectable6 left
[06:13] *** bisectable6 joined
[06:14] <hoffentlichja> u-ou: you can check if a variable is defined with .defined or you can use "with" and "without"

[06:14] <hoffentlichja> m: my $x; say $x.defined;

[06:14] <camelia> rakudo-moar 4fae07: OUTPUT: «False␤»

[06:15] <hoffentlichja> m: my $s; say 'not defined?' without $s;

[06:15] <camelia> rakudo-moar 4fae07: OUTPUT: «not defined?␤»

[06:15] <u-ou> m: say so Any

[06:15] <camelia> rakudo-moar 4fae07: OUTPUT: «False␤»

[06:15] <u-ou> cool

[06:19] *** mempko joined
[06:23] *** cdg joined
[06:27] *** cdg left
[06:34] *** kaare__ left
[06:35] *** domidumont left
[06:37] *** domidumont joined
[06:41] <sena_kun> lizmat, ping?

[06:44] *** Cabanossi left
[06:45] *** Cabanossi joined
[06:46] *** aborazmeh joined
[06:46] *** aborazmeh left
[06:46] *** aborazmeh joined
[06:46] *** mempko left
[06:52] *** broquain1 left
[06:54] *** abraxxa joined
[06:57] *** aborazmeh left
[06:58] *** redhands left
[07:00] *** redhands joined
[07:01] <geekosaur> suggest you .tell; think lizmat's asleep at this time of *

[07:01] *** jonas1 joined
[07:02] <sena_kun> I can wait, so no problem. But thanks, I guess I'll .tell in a hour or two then.

[07:02] *** cschwenz joined
[07:03] *** Merfont joined
[07:04] *** zakharyas joined
[07:05] *** cschwenz left
[07:05] *** ufobat joined
[07:06] *** Mrofnet left
[07:09] *** HoboWithAShotgun joined
[07:10] <HoboWithAShotgun> welcome to another week full of ungrateful customers, dyslexic management and unrealistic deadlines

[07:10] <geekosaur> ...I didn't think this was #lopsa >.>

[07:14] *** Cabanossi left
[07:15] *** Cabanossi joined
[07:22] *** redhands left
[07:24] *** cdg joined
[07:24] *** ShalokShalom joined
[07:27] *** Mrofnet joined
[07:28] *** cdg left
[07:30] *** Merfont left
[07:31] *** darutoko joined
[07:32] *** lowbro joined
[07:32] *** lowbro left
[07:32] *** lowbro joined
[07:32] *** AlexDaniel left
[07:38] *** dakkar joined
[07:44] *** Cabanossi left
[07:45] *** Cabanossi joined
[08:00] *** nativecallable6 left
[08:00] *** coverable6 left
[08:00] *** squashable6 left
[08:00] *** statisfiable6 left
[08:00] *** committable6 left
[08:00] *** bisectable6 left
[08:00] *** quotable6 left
[08:00] *** unicodable6 left
[08:00] *** greppable6 left
[08:00] *** benchable6 left
[08:00] *** bloatable6 left
[08:00] *** releasable6 left
[08:00] *** evalable6 left
[08:01] *** bloatable6 joined
[08:01] *** quotable6 joined
[08:01] *** benchable6 joined
[08:01] *** committable6 joined
[08:01] *** nativecallable6 joined
[08:01] *** ChanServ sets mode: +v benchable6

[08:01] *** ChanServ sets mode: +v committable6

[08:01] *** ChanServ sets mode: +v nativecallable6

[08:01] *** releasable6 joined
[08:01] *** coverable6 joined
[08:01] *** evalable6 joined
[08:01] *** greppable6 joined
[08:01] *** bisectable6 joined
[08:01] *** ChanServ sets mode: +v bisectable6

[08:01] *** unicodable6 joined
[08:01] *** squashable6 joined
[08:01] *** statisfiable6 joined
[08:01] *** ChanServ sets mode: +v statisfiable6

[08:04] *** sproctor joined
[08:06] *** piojo left
[08:06] *** leont joined
[08:17] *** robertle joined
[08:19] *** riatre left
[08:22] *** piojo joined
[08:24] *** cdg joined
[08:25] *** rindolf joined
[08:27] <sena_kun> .tell lizmat hi! there is a rakudo regression for cro, that gives me "Serialization Error: missing static code ref for closure '' (src/Perl6/World.nqp:2217)". I am not sure how bad it is, but I hope it is not. ping me for a way to reproduce(or better .tell) if it's obscure enough. thanks.

[08:27] <yoleaux> sena_kun: I'll pass your message to lizmat.

[08:28] *** leont left
[08:29] *** riatre joined
[08:29] *** sena_kun left
[08:29] *** cdg left
[08:35] *** TEttinger left
[08:42] <grondilu> how can adding a C<note "foo"> prevent a "Cannot look up attributes in a Pair type object" error?

[08:42] <lizmat> .

[08:42] <yoleaux> 08:27Z <sena_kun> lizmat: hi! there is a rakudo regression for cro, that gives me "Serialization Error: missing static code ref for closure '' (src/Perl6/World.nqp:2217)". I am not sure how bad it is, but I hope it is not. ping me for a way to reproduce(or better .tell) if it's obscure enough. thanks.

[08:43] <lizmat> .tell sena_kun will pass it on to jnthn

[08:43] <yoleaux> lizmat: I'll pass your message to sena_kun.

[08:43] *** Cabanossi left
[08:45] *** Cabanossi joined
[08:47] *** Mrofnet left
[08:50] *** Aaronepower joined
[08:51] *** zakharyas left
[08:52] <u-ou> .tell u-ou i will pass that on to u-ou when u-ou is around

[08:52] <yoleaux> u-ou: Talking to yourself is the first sign of madness.

[09:07] *** evalable6 left
[09:07] *** evalable6 joined
[09:11] *** zakharyas joined
[09:12] *** Cabanossi left
[09:15] *** Cabanossi joined
[09:23] *** El_Che left
[09:25] *** El_Che joined
[09:25] *** cdg joined
[09:30] *** cdg left
[09:32] <timotimo> grondilu: perhaps the difference between sinking and non-sinking?

[09:45] *** evalable6 left
[09:45] *** evalable6 joined
[09:45] *** ChanServ sets mode: +v evalable6

[09:49] *** eliasr joined
[10:04] *** evalable6 left
[10:05] *** evalable6 joined
[10:05] *** ChanServ sets mode: +v evalable6

[10:07] *** wamba left
[10:11] *** margeas joined
[10:12] *** zakharyas left
[10:12] *** lichtkind left
[10:13] *** abraxxa left
[10:13] *** abraxxa joined
[10:13] *** abraxxa left
[10:14] *** abraxxa joined
[10:14] *** soonix joined
[10:16] <soonix> hi can someone help around perl5?

[10:18] *** virtualsue left
[10:18] *** piojo left
[10:19] <timotimo> you'll want a perl5 focused channel for that

[10:19] *** virtualsue joined
[10:19] <ilmari> unless you mean Inline::Perl5

[10:20] <soonix> there is nobody to help :S

[10:23] <ilmari> soonix: I don't see you on #perl...

[10:24] <ilmari> also, nobody can help until you actually ask a question

[10:24] *** lichtkind joined
[10:26] *** cdg joined
[10:26] <hoffentlichja> are perl6 programmers still called perl monks?

[10:29] <lizmat> I think only perl monks are called perl monks

[10:31] *** cdg left
[10:32] <soonix> for a school project I have to write OAuth2 where with client_id and client_secret with grant_type = client_credentials I request a token and then I download json with this token

[10:32] <soonix> :(

[10:33] <soonix> Does anyone have some examples of how to do this?

[10:34] <timotimo> https://metacpan.org/pod/distribution/Net-OAuth2/lib/Net/OAuth2.pod ?

[10:35] <timotimo> you can literally just put client_id, client_secret and grant_type into Net::OAuth2::Profile::Password->new

[10:36] <hoffentlichja> lizmat: but how do perl programers call themselves? python programmers call themselves pythonistas

[10:37] <lizmat> I would argue that only pythonistas call themselves pythonistas

[10:38] <lizmat> or are you saying you cannot be a python programmer without being a pythonista ?

[10:38] <hoffentlichja> lizmat: and what is a pythonista if not a python programmer?

[10:38] *** lizmat left
[10:39] <hoffentlichja> I'm only saying that programmers from different language communities like to call themselves some way

[10:39] *** lizmat joined
[10:39] <timotimo> nobody is forcing python programmers to call themselves pythonistas

[10:39] <lizmat> .oO( friggin' flaky wifi )

[10:39] <hoffentlichja> lizmat: I'm only saying that programmers from different language communities like to call themselves some way

[10:39] <timotimo> it doesn't matter that pythonistas are "all" python programmers

[10:40] <hoffentlichja> timotimo: I know, but programmers choose that, and it's nice sometimes

[10:40] <timotimo> sure

[10:40] <hoffentlichja> I was only curious how perl programmers like to call themselves

[10:46] *** ufobat left
[10:51] *** ufobat joined
[10:51] *** HoboWithAShotgun left
[11:06] *** evalable6 left
[11:06] *** evalable6 joined
[11:13] *** yht joined
[11:13] *** Cabanossi left
[11:15] *** Cabanossi joined
[11:19] *** wamba joined
[11:19] *** soonix left
[11:27] <masak> I'm in a situation where I make a small change, and I get the error "Unhandled exception: Cannot find method 'Stringy': no method cache and no .^find_method"

[11:27] <masak> with a stacktrace from NQP

[11:28] <masak> and I'm having a hard time finding out why my small change is causing this error. any clues?

[11:28] <timotimo> any more info from --ll-exception?

[11:29] *** soonix joined
[11:29] <masak> ...no.

[11:30] <jast> hoffentlichja: just one data point, but I prefer to not give myself some weird name based on technology I use (except maybe Git)

[11:30] <timotimo> huh

[11:30] *** Pilu joined
[11:31] <masak> it dies in SETTING::src/core/Exception.pm:452

[11:31] <masak> something called .handle-exception

[11:32] <timotimo> oh, ah

[11:32] <timotimo> m: BEGIN { die "oh no" }

[11:32] <camelia> rakudo-moar 7fa707: OUTPUT: «Unhandled exception: Cannot find method 'Stringy': no method cache and no .^find_method␤   at SETTING::src/core/Exception.pm:395  (/home/camelia/rakudo-m-inst-1/share/perl6/runtime/CORE.setting.moarvm:print_exception)␤ from SETTING::src/core/Exceptio…»

[11:32] <hoffentlichja> jast: fair enough, but some programmers do that, I wanted to know if perl programmers do that in general and how they refer to themselves, Go programmers like to call themselves gophers because of their mascot

[11:32] <timotimo> m: constant foo = die "oh no"

[11:32] <camelia> rakudo-moar 7fa707: OUTPUT: «Unhandled exception: Cannot find method 'Stringy': no method cache and no .^find_method␤   at SETTING::src/core/Exception.pm:395  (/home/camelia/rakudo-m-inst-1/share/perl6/runtime/CORE.setting.moarvm:print_exception)␤ from SETTING::src/core/Exceptio…»

[11:32] <masak> timotimo: o.O

[11:32] <timotimo> it's this

[11:32] <masak> so it is.

[11:32] <masak> but what is this? :)

[11:32] <timotimo> we got it when we made runnign END phasers happen in HLL land

[11:32] <timotimo> i think?

[11:32] <jast> hoffentlichja: my impression has been that perl programmers don't that too much (apart from monkhood perhaps, but I've never seen that anywhere other than perlmonks, either)

[11:33] <timotimo> i had a "fix" but that just caused other things to break in the same way :)

[11:33] *** piojo joined
[11:34] <masak> in other words, I should check the things I have that happen at BEGIN time

[11:34] <timotimo> aye

[11:36] <masak> heh. managed to narrow down the problem by running my modules least-dependent-first until one broke :P

[11:37] <masak> yep. found it.

[11:38] <masak> ok -- so the rule right now is "don't fail at BEGIN time"

[11:38] *** Mrofnet joined
[11:38] <timotimo> i wonder if i still have that commit stashed

[11:38] *** sproctor left
[11:39] <timotimo> doesn't seem like it

[11:41] <hoffentlichja> jast: I'm new to perl and reading around I've seen a few times "perl monks" mentioned, and got the impression that perl programmers may like to call themselves perl monks, though I'm aware there's a site / forum with that name that comes up often in search results

[11:41] <timotimo> yeah, i think only people who frequent that site call themselves perl monks

[11:42] <hoffentlichja> understood :)

[11:44] *** wamba left
[11:46] *** dalek left
[11:46] *** SourceBaby left
[11:47] *** dalek joined
[11:47] *** ChanServ sets mode: +v dalek

[11:47] *** SourceBaby joined
[11:47] *** ChanServ sets mode: +v SourceBaby

[11:48] <lizmat> masak timotimo we should be able to fail at BEGIN time

[11:48] <timotimo> yes, we should :)

[11:49] *** ShalokShalom is now known as ShalokShalom2

[11:49] <timotimo> i think we're expecting a low-level exception in the handling code but we're getting a HLL exception object

[11:49] <hoffentlichja> what IDE or code editor do you guys use?

[11:50] <lizmat> timotimo: not vice versa?  expecting a HLL exception and getting a low level one ?

[11:50] <timotimo> i think it's that way around

[11:50] <MasterDuke> hoffentlichja: vim

[11:50] <jast> hoffentlichja: vim

[11:52] <timotimo> vim, though i haven't set it up well for C coding yet

[11:52] <hoffentlichja> MasterDuke: I'm a vimer as well, although a few months ago I also switched partially to emacs with evil-mode and lately I've been using vscode but the vim extension(s) are lacking, can't seem to fight a right balance anymore, each have their pros and cons but I perl6 support seems to not be so great in either of them

[11:52] <hoffentlichja> find*

[11:52] <MasterDuke> if you're interested in more of an IDE experience, there's https://github.com/perl6/Atom-as-a-Perl6-IDE

[11:53] <hoffentlichja> MasterDuke: I prefer vscode over atom

[11:53] <MasterDuke> never used either myself

[11:53] <MasterDuke> heard good and bad about both equally

[11:54] *** domidumont left
[11:54] <hoffentlichja> I've tried atom in the past but I'd choose vscode anytime though atom has better extension support, still

[11:55] <MasterDuke> maybe you can port the atom perl6 stuff to vscode

[11:56] *** domidumont joined
[11:58] * lizmat has a fix for 'BEGIN die' issue

[11:58] <lizmat> it's basically the same problem as the sprintf issue

[11:59] <hoffentlichja> MasterDuke: it wouldn't be something trivial

[12:00] *** soonix left
[12:00] *** wamba joined
[12:02] <MasterDuke> hoffentlichja: no worries, i've got all day :)

[12:02] <lizmat> masak timotimo: https://github.com/rakudo/rakudo/commit/d76af6aa45

[12:02] <hoffentlichja> MasterDuke: what do you mean?

[12:02] <jast> to me that sounded like an offer to do all the porting for you ;)

[12:03] <wamba> p6:  sub pok (Int(Str) $i) {$i.WHAT}; say pok 1

[12:03] <camelia> rakudo-moar 7fa707: OUTPUT: «Type check failed in binding to parameter '$i'; expected Str but got Int (1)␤  in sub pok at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:03] <hoffentlichja> jast: I doubt it but I also wouldn't ask or expect someone to do that for me

[12:03] <MasterDuke> ha! other way around! just joking that since i don't use vscode, it doesn't bother me how long the porting takes

[12:05] <hoffentlichja> MasterDuke: vscode's algorithm for syntax highlighting is very nice, it doesn't choke on complex syntax and the editor stays smooth, unlike some others

[12:05] <jast> drat. :)

[12:08] *** piojo left
[12:11] *** mr-foobar joined
[12:12] *** mr-fooba_ left
[12:12] *** soonix joined
[12:13] *** Cabanossi left
[12:15] *** wamba left
[12:15] *** Cabanossi joined
[12:18] <Zoffix> hoffentlichja: u-ou Nil is the absense of value. Any is just the default default value parameters/variables have.

[12:19] <hoffentlichja> Zoffix: so if a var has type Any doesn't that mean it has no value?

[12:19] <Zoffix> redhands, it already flushes. IIRC there's currently no buffering on TTY handles. Otherwise, pass :!buffer to .open

[12:20] <Zoffix> samcv: what's the code you're using to chdir?

[12:22] <Zoffix> o-oh

[12:24] <Zoffix> hoffentlichja: depends on its `is default` settings, by default it's the type object of the variable's type, or Any if the type is Mu. So it does have a value: the type object. If you assign another type object, that'll be its value. `Nil` job on the other hand is to signal the absence of value, so if you assign `Nil` to a variable, you'll get its `is default` value

[12:24] <Zoffix> m: my $x is default(42) = Any; say $x

[12:24] <camelia> rakudo-moar d76af6: OUTPUT: «(Any)␤»

[12:24] <Zoffix> m: my $x is default(42) = Any; say $x; $x = Nil; say $x

[12:24] <camelia> rakudo-moar d76af6: OUTPUT: «(Any)␤42␤»

[12:25] <Zoffix> Man, this doesn't chdir() into the right dir :o my $p = IO::Path.new: ".", :CWD</home/zoffix>; chdir $p; dir.say

[12:25] <Zoffix> I hope it's a new bug and not something missed on IO grant.

[12:26] *** soonix left
[12:26] <hoffentlichja> I see

[12:27] *** HoboWithAShotgun joined
[12:31] <HoboWithAShotgun> is there an operator that calls a method on a thing and keeps calling the method on the return values until it encounters undef or fails, in which case it returns the last valid value

[12:31] <Zoffix> nope

[12:31] *** domidumont left
[12:32] <HoboWithAShotgun> basically a parent operator as in (imaginative) $root = $some-nested-node..parent

[12:32] *** domidumont joined
[12:36] <Zoffix> m: my $root = class { has @.stuff = <a b c>; method node { @!stuff.shift } }.new; say do loop { LAST $root<>; .node orelse last with $root;}

[12:36] <camelia> rakudo-moar e513b8: OUTPUT: «No such method '!capture_phasers' for invocant of type 'Code'␤  in block <unit> at <tmp> line 1␤␤»

[12:36] <Zoffix> heh :)

[12:37] <Zoffix> m: my $root = class { has @.stuff = <a b c>; method node { @!stuff.shift } }.new; (loop {$root.node orelse last}).tail.say

[12:37] <camelia> rakudo-moar e513b8: OUTPUT: «c␤»

[12:41] <Zoffix> m: my $root = class { has @.stuff = <a b c>; method node { @!stuff.shift } }.new; ({$root.node} ...^ !*.defined).tail.say

[12:41] <camelia> rakudo-moar e513b8: OUTPUT: «c␤»

[12:41] <Zoffix> :)

[12:42] <Zoffix> .oO( I guess there *is* an operator to do that, after all)

[12:42] *** Cabanossi left
[12:43] <Zoffix> Looks like the chdir bug existed in all the releases. I'm shocked it made it through IO Grant undiscovered.

[12:44] *** ShalokShalom joined
[12:45] <Zoffix> I see why :/ got carried away testing all the modes instead of all the paths: https://github.com/perl6/roast/blob/master/S32-io/chdir.t#L61-L140

[12:45] *** Cabanossi joined
[12:47] *** ShalokShalom2 left
[12:50] *** |oLa| left
[12:54] <Zoffix> ultimately it's a bug due to IO::Path.Str not respecting :CWD ;/

[12:59] <lizmat> Zoffix: FWIW, IO::Path only has a BUILD call in its BUILDALLPLAN

[13:00] <Zoffix> lizmat: I've no idea what those do :) Is it bad that it only got a BUILD call?

[13:00] *** yht left
[13:00] <lizmat> no, it means that this is less likely to be a problem related to the auto-generated BUILDALL  :-)

[13:01] <Zoffix> Ah, yeah, it's not. It existed in all the releases and we have IO::Path.Str ignore :CWD by design and the bug's due to that "feature"

[13:09] *** epony left
[13:19] *** wamba joined
[13:21] <jdv79> samcv: i don't think its that solutions aren't known (to the irc log issue).  its just tuits.

[13:21] *** cdg joined
[13:24] *** darutoko left
[13:27] *** cdg_ joined
[13:29] <Zoffix> samcv: fixed that &chdir ignoring :CWD bug you spotted: https://github.com/rakudo/rakudo/commit/4906a1de8a

[13:30] *** cdg left
[13:37] *** leedo left
[13:37] *** leedo joined
[13:41] *** domidumont left
[13:41] *** domidumont joined
[13:43] *** Cabanossi left
[13:45] *** Cabanossi joined
[13:51] *** mcmillhj joined
[13:55] *** skids joined
[13:59] *** domidumont left
[14:00] *** domidumont joined
[14:10] <Geth> ¦ modules.perl6.org/cpan-support: 1800e0f2b1 | (Zoffix Znet)++ | 3 files

[14:10] <Geth> ¦ modules.perl6.org/cpan-support: Add disambiguation page for /dist route

[14:10] <Geth> ¦ modules.perl6.org/cpan-support: review: https://github.com/perl6/modules.perl6.org/commit/1800e0f2b1

[14:12] <[Coke]> .

[14:13] <Geth> ¦ modules.perl6.org/cpan-support: d46c55353e | (Zoffix Znet)++ | templates/root/search.html.ep

[14:13] <Geth> ¦ modules.perl6.org/cpan-support: Make search page link to fully qualified /dist pages

[14:13] <Geth> ¦ modules.perl6.org/cpan-support: review: https://github.com/perl6/modules.perl6.org/commit/d46c55353e

[14:15] *** nadim joined
[14:19] <[Coke]> https://github.com/perl6/doc/blob/a27ba6507b6547ce67b110797992aee530a136c5/doc/Language/regexes.pod6#L409 - "mimimum"

[14:25] *** Mrofnet left
[14:30] *** cdg joined
[14:31] <Geth> ¦ doc: e32604b562 | (Zoffix Znet)++ | doc/Language/regexes.pod6

[14:31] <Geth> ¦ doc: s/mimimum/minimum/; [Coke]++

[14:31] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e32604b562

[14:31] <synopsebot> Link: https://doc.perl6.org/language/regexes

[14:32] *** sena_kun joined
[14:33] *** cdg left
[14:34] *** cdg joined
[14:34] *** cdg_ left
[14:34] *** cdg_ joined
[14:34] <sena_kun>  

[14:34] <yoleaux> 08:43Z <lizmat> sena_kun: will pass it on to jnthn

[14:35] <jnthn> heh...bug circle :P

[14:35] <sena_kun> yeah, circle. :)

[14:35] <hoffentlichja> Zoffix: when do we use .func and when .&func ?

[14:37] <Zoffix> hoffentlichja: always .&func and never .func; `.foo` is a method call, so it won't work if there's no method named "func"

[14:37] <hoffentlichja> ah I see, it makes sense

[14:37] <Zoffix> m: sub foo { say "subroutine" }; class Foo { method foo { say "method" } }; with Foo.new { .foo; .&foo }

[14:37] <camelia> rakudo-moar 4906a1: OUTPUT: «method␤Too many positionals passed; expected 0 arguments but got 1␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:37] <Zoffix> m: sub foo ($) { say "subroutine" }; class Foo { method foo { say "method" } }; with Foo.new { .foo; .&foo }

[14:37] <camelia> rakudo-moar 4906a1: OUTPUT: «method␤subroutine␤»

[14:38] <Zoffix> with the .&foo form passing the invocant to the sub as the first arg 

[14:38] *** cdg left
[14:38] <hoffentlichja> understood

[14:38] <hoffentlichja> thanks

[14:50] *** Aaronepower left
[14:52] *** bwisti joined
[14:56] *** Aaronepower joined
[14:58] *** Cabanossi left
[15:00] *** Cabanossi joined
[15:01] *** cdg_ left
[15:06] *** xinming_ joined
[15:07] *** cdg joined
[15:09] *** xinming left
[15:18] <HoboWithAShotgun> in method f($s where %h = $x), what does this assignment in the where clause do?

[15:21] <Geth> ¦ modules.perl6.org/cpan-support: 816583d818 | (Zoffix Znet)++ | 2 files

[15:21] <Geth> ¦ modules.perl6.org/cpan-support: Set off donation bar a bit form rest of content

[15:21] <Geth> ¦ modules.perl6.org/cpan-support: review: https://github.com/perl6/modules.perl6.org/commit/816583d818

[15:23] <Zoffix> HoboWithAShotgun: exploits unsupported behaviour by assigning $x to %h

[15:25] *** leont joined
[15:33] *** bwisti left
[15:33] *** bwisti joined
[15:35] *** Aaronepower left
[15:38] *** rba_ joined
[15:38] <Geth> ¦ modules.perl6.org/cpan-support: 76931ce08b | (Zoffix Znet)++ | 4 files

[15:38] <Geth> ¦ modules.perl6.org/cpan-support: Add stub of CPAN dist page

[15:38] <Geth> ¦ modules.perl6.org/cpan-support: review: https://github.com/perl6/modules.perl6.org/commit/76931ce08b

[15:39] <HoboWithAShotgun> and that has which effect?

[15:41] *** sena_kun left
[15:41] <Zoffix> HoboWithAShotgun: assignment :)

[15:42] <Zoffix> m: my %h; my $x := {:42foo, :70bar}; sub ($s where {%h := $x}) {}(%h); say %h

[15:42] <camelia> rakudo-moar f80a84: OUTPUT: «{bar => 70, foo => 42}␤»

[15:42] <Zoffix> But side effects from `where` is not a supported behaviour, so burn the code you saw that in with fire :)

[15:44] *** Cabanossi left
[15:45] *** Cabanossi joined
[15:46] *** robertle left
[15:46] <Geth> ¦ ecosystem: 64be703476 | (Tom Browder)++ (committed using GitHub Web editor) | META.list

[15:46] <Geth> ¦ ecosystem: add a dummy module for testing with Perl 6 CPAN

[15:46] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/64be703476

[15:46] *** rba_ left
[15:47] * Zoffix raises an eyebrow

[15:48] <Zoffix> tbrowder: FWIW, your `perl` key in that META file has the wrong value. It specifies the minimum version of language to be `6` and it won't ever be that high. You can use "6.*" 

[15:49] <Zoffix> m: say v6 before v6.c

[15:49] <camelia> rakudo-moar f80a84: OUTPUT: «False␤»

[15:49] <HoboWithAShotgun> bit it's not :=

[15:49] <HoboWithAShotgun> it's =

[15:49] <Zoffix> HoboWithAShotgun: same difference

[15:50] *** troys joined
[15:52] <tbrowder> Zoffix: thnx, fixed.

[15:52] <HoboWithAShotgun> and it gets called differently, sec

[15:52] *** kerframil joined
[15:52] *** epony joined
[15:55] *** ChoHag left
[15:55] *** leont left
[15:56] <HoboWithAShotgun> m: my %h = :foo<FOO>, :bar<BAR>; my $key = "foo"; sub callme($arg where %h = $key) { say %h; say $arg; }; callme("bar");

[15:56] <camelia> rakudo-moar f80a84: OUTPUT: «{bar => BAR, foo => FOO}␤bar␤»

[15:57] *** leont joined
[15:57] *** lowbro left
[15:57] <HoboWithAShotgun> i mean i know it checks wether $arg is a key in %h but i have no idea how

[15:58] <Zoffix> It doesn't

[15:58] <Zoffix> I'd expect that to die

[15:58] <HoboWithAShotgun> m: my %h = :foo<FOO>, :bar<BAR>; my $key = "foo"; sub callme($arg where %h = $key) { say %h; say $arg; }; callme("xxx");

[15:58] <camelia> rakudo-moar f80a84: OUTPUT: «Constraint type check failed in binding to parameter '$arg'; expected anonymous constraint to be met but got Str ("xxx")␤  in sub callme at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:59] <HoboWithAShotgun> it does apparently

[15:59] <Zoffix> That's the smartmatch with %h, `= $key` is not involved

[15:59] <Zoffix> Ahhhh

[15:59] <Zoffix> Never mind, I was wrong

[16:00] <Zoffix> HoboWithAShotgun: it smartmatches with `%h` (which checks for existance of key), and `= $key` is the default value

[16:00] <tony-o> m: my %h = :foo<FOO>, :bar<BAR>; my $key = "foo"; sub callme($arg where %h = $key) { say %h; say $arg; }; callme;

[16:00] <camelia> rakudo-moar f80a84: OUTPUT: «{bar => BAR, foo => FOO}␤foo␤»

[16:01] <HoboWithAShotgun> i am hesitant to ask where that is documented ;)

[16:02] <Zoffix> HoboWithAShotgun: https://docs.perl6.org/type/Signature#index-entry-where_clause_%28Signature%29

[16:03] <Geth> ¦ DBIish/add_more_use_nativecall: 1a823c3300 | (Timo Paulssen)++ | 3 files

[16:03] <Geth> ¦ DBIish/add_more_use_nativecall: add missing "use NativeCall" to ::Native modules

[16:03] <Geth> ¦ DBIish/add_more_use_nativecall: 

[16:03] <Geth> ¦ DBIish/add_more_use_nativecall: not sure how it used to work without this.

[16:03] <Geth> ¦ DBIish/add_more_use_nativecall: review: https://github.com/perl6/DBIish/commit/1a823c3300

[16:03] <Geth> ¦ DBIish: timo++ created pull request #103: add missing "use NativeCall" to ::Native modules

[16:03] <Geth> ¦ DBIish: review: https://github.com/perl6/DBIish/pull/103

[16:03] <timotimo> will travis build the code for the pull request?

[16:03] <Zoffix> `where` smartmatches. That's basically all the documentation needed. I just got confused :)

[16:03] <Geth> ¦ DBIish/add_more_use_nativecall: aa76d362a8 | (Timo Paulssen)++ | META6.json

[16:03] <Geth> ¦ DBIish/add_more_use_nativecall: minor version bump

[16:03] <Geth> ¦ DBIish/add_more_use_nativecall: review: https://github.com/perl6/DBIish/commit/aa76d362a8

[16:04] *** Aaronepower joined
[16:04] <Zoffix> timotimo: yes, it shows status of builds on PR page: https://github.com/perl6/DBIish/pull/103

[16:04] <timotimo> aha!

[16:04] <timotimo> that wasn't there a minute ago

[16:08] <HoboWithAShotgun> Zoffix, tx but that's just the page about type constraints

[16:08] *** committable6 left
[16:08] *** leont left
[16:09] *** committable6 joined
[16:09] *** ChanServ sets mode: +v committable6

[16:09] *** domidumont left
[16:09] <Zoffix> HoboWithAShotgun: what sort of docs were you looking for?

[16:09] <Geth> ¦ DBIish: 1a823c3300 | (Timo Paulssen)++ | 3 files

[16:09] <Geth> ¦ DBIish: add missing "use NativeCall" to ::Native modules

[16:09] <Geth> ¦ DBIish: 

[16:09] <Geth> ¦ DBIish: not sure how it used to work without this.

[16:09] <Geth> ¦ DBIish: review: https://github.com/perl6/DBIish/commit/1a823c3300

[16:09] <Geth> ¦ DBIish: aa76d362a8 | (Timo Paulssen)++ | META6.json

[16:09] <Geth> ¦ DBIish: minor version bump

[16:09] <Geth> ¦ DBIish: review: https://github.com/perl6/DBIish/commit/aa76d362a8

[16:09] <Geth> ¦ DBIish: d2d6e19b05 | (Jonathan Stowe)++ (committed using GitHub Web editor) | 4 files

[16:09] <Geth> ¦ DBIish: Merge pull request #103 from perl6/add_more_use_nativecall

[16:09] <HoboWithAShotgun> about this %h = $key syntax

[16:09] <Geth> ¦ DBIish: 

[16:09] <Geth> ¦ DBIish: add missing "use NativeCall" to ::Native modules

[16:09] <Geth> ¦ DBIish: review: https://github.com/perl6/DBIish/commit/d2d6e19b05

[16:09] <Zoffix> hm, doc search for "Smartmatch" don't show anything :(

[16:09] <HoboWithAShotgun> in the where clause

[16:11] *** nicq20 joined
[16:11] *** perlpilot joined
[16:14] <Zoffix> HoboWithAShotgun: that's not the syntax in the code we're talking about. it's sub (ARG = DEFAULT_VALUE) => sub callme($arg = $default-value). And you can type-constraint the arg:   subset HKey where { %h{$_}:exists }; sub (HKey $arg = $default-value) {}; and you can shorten this and specify the `where` clause inline: sub ($arg where { %h{$_}:exists } = $default-value) {} and since smartmatch of non-Regex and

[16:14] <Zoffix> non-Map keys with a hash checks for existence of a key, you can shorten it still by writing sub ($arg where %h = $default-value) {}

[16:14] <Zoffix> But as the existence of this discussion demonstrates, writing it this way is a bad idea and causes confusion

[16:14] *** pierrot left
[16:15] <Zoffix> Especially since smartmatch with hash has more behaviours than just existence of key check

[16:15] <Zoffix> m: my %h = :foo<FOO>, :bar<BAR>; my $key = "foo"; sub callme($arg where %h = $key) { say %h; say $arg; }; callme(/f/);

[16:15] <camelia> rakudo-moar f80a84: OUTPUT: «{bar => BAR, foo => FOO}␤/f/␤»

[16:15] *** pierrot joined
[16:15] <Zoffix> m: my %h = :foo<FOO>, :bar<BAR>; my $key = "foo"; sub callme($arg where %h = $key) { say %h; say $arg; }; callme(%h);

[16:15] <camelia> rakudo-moar f80a84: OUTPUT: «{bar => BAR, foo => FOO}␤{bar => BAR, foo => FOO}␤»

[16:16] *** Mrofnet joined
[16:16] <Zoffix> So there's no assignment to %h and no assignment to where clause, it's assignment of default value to $arg when the arg wasn't provided

[16:24] *** Aaronepower left
[16:29] *** mempko joined
[16:31] *** HoboWithAShotgun left
[16:33] *** wamba left
[16:40] *** mr-fooba_ joined
[16:43] *** mr-foobar left
[16:45] *** cdg left
[16:47] *** HoboWithAShotgun joined
[16:47] *** leont joined
[16:48] <Geth> ¦ modules.perl6.org/cpan-support: 96444904ce | (Zoffix Znet)++ | lib/ModulesPerl6/Model/Dists.pm

[16:48] <Geth> ¦ modules.perl6.org/cpan-support: Toss old "dist problems" from DB

[16:48] <Geth> ¦ modules.perl6.org/cpan-support: review: https://github.com/perl6/modules.perl6.org/commit/96444904ce

[16:53] *** leah2 left
[16:53] *** cdg joined
[17:00] *** setty1 joined
[17:02] *** AlexDaniel joined
[17:06] *** jonas1 left
[17:07] *** dakkar left
[17:09] *** leah2 joined
[17:13] <Geth> ¦ modules.perl6.org/cpan-support: 861173c26d | (Zoffix Znet)++ | 5 files

[17:13] <Geth> ¦ modules.perl6.org/cpan-support: Implement extractor for CPAN dists

[17:13] <Geth> ¦ modules.perl6.org/cpan-support: 

[17:13] <Geth> ¦ modules.perl6.org/cpan-support: - Add `files` dist property. Keep it empty for now for non-CPAN dists

[17:13] <Geth> ¦ modules.perl6.org/cpan-support: review: https://github.com/perl6/modules.perl6.org/commit/861173c26d

[17:15] *** leah2 left
[17:16] *** Merfont joined
[17:19] *** Mrofnet left
[17:21] *** ChoHag joined
[17:23] *** domidumont joined
[17:23] *** AlexDaniel left
[17:23] *** epony left
[17:25] *** someuser joined
[17:28] *** wamba joined
[17:31] *** leah2 joined
[17:32] *** Aaronepower joined
[17:32] *** death2halloween is now known as hahainternet

[17:33] *** medfly joined
[17:37] <medfly> Hi folks. I want to run the roast testsuite because I heard an OS I like is failing in OS-specific ways on it. when I run 'make spectest' it hangs at some test (rosettacode/sierpinski_triangle.t) but not running it manually. any idea>?

[17:38] <mspo> what does ktruss say it's doing?

[17:38] <medfly> hi mspo

[17:39] *** robertle joined
[17:39] <Zoffix> medfly: TTY vs non-TTY?

[17:41] *** leah2 left
[17:41] <medfly> One of the 4 processes I get from 'pgrep rakudo' is totally silent in ktrace, the others periodically look at the clock and sleep

[17:41] <Zoffix> wonder if it's the buffering stuff recently implemented

[17:42] *** AlexDaniel joined
[17:44] <Zoffix> medfly: try perl6 -e 'say qx|perl6 rosettacode/sierpinski_triangle.t|'

[17:44] <Zoffix> Does that hang?

[17:45] <medfly> nope

[17:45] <medfly> 1..1

[17:45] <medfly> ok 1 - Sierpinski Triangle

[17:45] <medfly> oh, just perl6 might be the wrong one

[17:45] <medfly> i got it from a package manager first

[17:47] *** kyan joined
[17:55] *** Rawriful joined
[17:57] *** leah2 joined
[17:58] <Geth> ¦ modules.perl6.org/cpan-support: 23f81e729b | (Zoffix Znet)++ | 2 files

[17:58] <Geth> ¦ modules.perl6.org/cpan-support: Add files missed from last commit

[17:58] <Geth> ¦ modules.perl6.org/cpan-support: review: https://github.com/perl6/modules.perl6.org/commit/23f81e729b

[17:59] *** Cabanossi left
[18:00] *** Cabanossi joined
[18:05] *** ufobat left
[18:05] *** Morfent joined
[18:06] *** zelenkanew01 joined
[18:06] <zelenkanew01> i have a problem which is about telnet 

[18:07] *** zelenkanew01 left
[18:07] <Juerd> No, that's irc.

[18:08] <Geth> ¦ modules.perl6.org/cpan-support: e164379823 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/Source/CPAN.pm

[18:08] <Geth> ¦ modules.perl6.org/cpan-support: Handle impolite archives

[18:08] <Geth> ¦ modules.perl6.org/cpan-support: review: https://github.com/perl6/modules.perl6.org/commit/e164379823

[18:09] *** Merfont left
[18:29] <Zoffix> Well, you could use telnet to IRC :)

[18:29] <teatime> don't forget to PONG!

[18:30] *** ZoffixTelnet joined
[18:30] <ZoffixTelnet> Telnet Zoffix says hi :)

[18:30] *** |oLa| joined
[18:30] <teatime> nice

[18:30] *** ZoffixTelnet left
[18:32] *** cdg_ joined
[18:34] *** leah2 left
[18:36] *** cdg left
[18:36] *** cdg_ left
[18:37] <timotimo> hmpf, i need to put my readme into my module's pod so that mi6 will put it back into the readme for me

[18:37] *** |oLa| left
[18:38] <Zoffix> :)

[18:39] <Zoffix> There's an open Issue on that subject: https://github.com/skaji/mi6/issues/23

[18:39] *** |oLa| joined
[18:40] *** TEttinger joined
[18:41] *** troys is now known as troys_

[18:42] *** mcmillhj left
[18:45] *** lancew joined
[18:46] *** mcmillhj joined
[18:49] *** nicq20 left
[18:49] *** epony joined
[18:50] *** |oLa| left
[18:52] * lizmat starts working on the P6W, lemme know if you think I'm going to miss something (important :-)

[18:53] <Zoffix> lizmat: not super important, but might be worth mentioning people should upload stuff to CPAN. The bot already reports uploads and in a few hours modules.perl6.org will show CPAN dists on it

[18:53] *** Morfent left
[18:53] <ugexe> whats the best way to pass data into an anonymous role? e.g. the anonymous version of `my role Foo { has $.foo }; say (1 but Foo(42)).foo;`

[18:54] *** Exodist left
[18:55] *** Exodist joined
[18:58] <lizmat> Zoffix: I think I'll mention it next week, when it's sure to have gotten some live traffic, if that's ok with you

[18:59] <Zoffix> Sure

[18:59] <Zoffix> Actually, it's better that way. 3pm... I probably should relax for a bit instead of coding :)

[19:00] <jnthn> lizmat: fwiw, leave the Cro SPA tutorial I wrote for next week also; I didn't get chance to deploy it to the site for real today when I was at the office, and am too tired/lazy to install the google cloud tool on my home box to do it now :)

[19:01] *** bwisti left
[19:01] <lizmat> jnthn: ok

[19:03] *** medfly left
[19:13] *** ChoHag left
[19:20] *** kurahaupo joined
[19:26] *** lancew left
[19:26] <virtualsue> jnthn / lizmat I am now taking my little Go / P6 talk to the big Go meetup in London

[19:27] <lizmat> virtualsue++  :-)

[19:27] <virtualsue> suitably modified by taking out any bragging and teasing

[19:27] <virtualsue> with some P6

[19:30] <virtualsue> I had hoped it wouldn't be too massive (80 or so) but as it happens one of the more well-known Google dev advocates is suddenly coming so now there will be ca 150

[19:30] <mspo> showdown!

[19:31] <virtualsue> oh hell no :-)

[19:31] <Zoffix> virtualsue++

[19:31] <virtualsue> I think they will be well up for this

[19:31] <El_Che> virtualsue: I like both, but more often than not they have very opposed design choices

[19:31] <El_Che> virtualsue: will the talk be recorded?

[19:32] *** yqt joined
[19:33] <virtualsue> i think that's likely and I am a bit pressed for time to prepare ... we shall see

[19:33] <El_Che> good luck!

[19:33] <mspo> (speaking of golang) did you guys decide about the whole thread phaser thing?

[19:33] <teatime> virtualsue: I like your PTR record.  I never thought of doing that.

[19:34] <jnthn> mspo: What is the "thread phaser thing"? :)

[19:34] *** yqt left
[19:34] <mspo> jnthn: you know how go (and perl6) can't drop privileges on linux reliably?

[19:35] <mspo> jnthn: not just the traditional setuid stuff, but it also translates into namespaces and stuff

[19:35] <mspo> jnthn: it's primarily because there's no way to say "stay single thread until X"

[19:37] *** okl joined
[19:37] <virtualsue> I don't really do Highlander talks. It isn't advocacy. It's just interesting.

[19:39] *** nicq20 joined
[19:41] <Geth> ¦ modules.perl6.org/cpan-support: 2203ec9e9b | (Zoffix Znet)++ | 9 files

[19:41] <Geth> ¦ modules.perl6.org/cpan-support: Implement unplugged tree file viewer for CPAN dists

[19:41] <Geth> ¦ modules.perl6.org/cpan-support: review: https://github.com/perl6/modules.perl6.org/commit/2203ec9e9b

[19:42] *** mempko left
[19:43] <Zoffix> It's taking shape: https://i.imgur.com/XzAcDpe.png  

[19:43] <Zoffix> I think I'm calling it a day tho. Have a ton of Perl Web work to do at $work this week; rather not burn out by doing too much of week on the weekends too

[19:43] <Zoffix> \o

[19:44] *** okl left
[19:44] <jnthn> Zoffix++

[19:45] <preaction> Zoffix: that looks amazing

[19:50] <HoboWithAShotgun> in the where clause

[19:50] *** lancew joined
[19:58] *** mr-fooba_ left
[19:59] *** Cabanossi left
[20:00] *** mr-foobar joined
[20:00] *** Cabanossi joined
[20:03] *** ChoHag joined
[20:05] *** cdg joined
[20:08] *** Morfent joined
[20:23] *** evalable6 left
[20:23] *** evalable6 joined
[20:25] *** nowan left
[20:27] *** nowan joined
[20:30] *** domidumont left
[20:30] *** cdg_ joined
[20:32] *** kurahaupo left
[20:32] *** kurahaupo_ joined
[20:32] *** kurahaupo_ left
[20:34] *** cdg left
[20:35] *** kurahaupo joined
[20:37] *** brrt joined
[20:44] *** Rawriful left
[20:44] *** mempko joined
[20:44] *** brrt left
[20:55] *** zakharyas joined
[20:59] *** cdg_ left
[21:00] *** skids left
[21:00] *** cdg joined
[21:02] *** someuser left
[21:02] *** cdg_ joined
[21:02] *** cdg left
[21:05] *** lancew left
[21:06] *** medfly joined
[21:09] *** mcmillhj left
[21:24] *** unicodable6 left
[21:24] *** bisectable6 left
[21:24] *** releasable6 left
[21:24] *** quotable6 left
[21:24] *** bloatable6 left
[21:24] *** squashable6 left
[21:24] *** coverable6 left
[21:24] *** greppable6 left
[21:24] *** nativecallable6 left
[21:24] *** benchable6 left
[21:24] *** statisfiable6 left
[21:24] *** evalable6 left
[21:24] *** quotable6 joined
[21:24] *** unicodable6 joined
[21:24] *** ChanServ sets mode: +v unicodable6

[21:24] *** bisectable6 joined
[21:24] *** benchable6 joined
[21:24] *** bloatable6 joined
[21:24] *** evalable6 joined
[21:24] *** greppable6 joined
[21:24] *** nativecallable6 joined
[21:24] *** releasable6 joined
[21:24] *** ChanServ sets mode: +v releasable6

[21:24] *** coverable6 joined
[21:24] *** ChanServ sets mode: +v coverable6

[21:24] *** squashable6 joined
[21:24] *** statisfiable6 joined
[21:39] *** evalable6 left
[21:39] *** evalable6 joined
[21:39] *** ChanServ sets mode: +v evalable6

[21:43] *** Cabanossi left
[21:44] *** HoboWithAShotgun left
[21:45] *** Cabanossi joined
[21:50] *** setty1 left
[21:57] *** troys_ is now known as troys

[21:58] *** traxex joined
[22:01] *** kurahaupo_ joined
[22:01] *** APic left
[22:02] *** kurahaupo left
[22:07] *** rindolf left
[22:08] *** zakharyas left
[22:09] *** kurahaupo_ left
[22:09] *** kurahaupo joined
[22:10] *** kurahaupo left
[22:10] *** kurahaupo_ joined
[22:10] *** kurahaupo_ left
[22:11] *** kurahaupo joined
[22:11] *** kurahaupo left
[22:15] *** leont left
[22:17] *** rindolf joined
[22:27] *** nadim left
[22:30] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/10/02/2017-40-unicode-granted/

[22:34] *** bisectable6 left
[22:35] *** bisectable6 joined
[22:37] <gfldex> lizmat++ week++

[22:37] *** wamba left
[22:38] *** mempko left
[22:38] *** medfly left
[22:51] <Zoffix> lizmat++ # good weekly.

[22:52] *** hoffentlichja left
[22:53] <Zoffix> I rushed to IRC to correct the item about chained < ops, because I made changes to ≤ not <, but then remembered that yeah, I did do stuff with the < ops too :) lizmat++ making us remember what we did in a week :)

[22:53] *** bisectable6 left
[22:54] *** bisectable6 joined
[22:55] *** ACTPic joined
[22:59] *** mr-foobar left
[22:59] * timotimo realizes he didn't do anything show-offable

[23:00] <timotimo> but for now i must give my wrists some rest, so they can recover soon :|

[23:00] *** rindolf left
[23:00] *** BenGoldberg joined
[23:01] *** mr-foobar joined
[23:02] *** ACTPic left
[23:03] *** rindolf joined
[23:04] *** bisectable6 left
[23:04] *** bisectable6 joined
[23:04] *** ChanServ sets mode: +v bisectable6

[23:04] *** committable6 left
[23:04] *** bisectable6 left
[23:04] *** unicodable6 left
[23:04] *** squashable6 left
[23:04] *** benchable6 left
[23:04] *** coverable6 left
[23:04] *** bloatable6 left
[23:04] *** releasable6 left
[23:04] *** evalable6 left
[23:04] *** statisfiable6 left
[23:04] *** nativecallable6 left
[23:04] *** quotable6 left
[23:04] *** greppable6 left
[23:04] *** quotable6 joined
[23:04] *** nativecallable6 joined
[23:04] *** evalable6 joined
[23:04] *** bloatable6 joined
[23:04] *** greppable6 joined
[23:04] *** releasable6 joined
[23:04] *** benchable6 joined
[23:04] *** bisectable6 joined
[23:04] *** coverable6 joined
[23:04] *** unicodable6 joined
[23:04] *** committable6 joined
[23:04] *** squashable6 joined
[23:04] *** statisfiable6 joined
[23:04] *** ChanServ sets mode: +v nativecallable6

[23:04] *** ChanServ sets mode: +v evalable6

[23:04] *** ChanServ sets mode: +v releasable6

[23:04] *** ChanServ sets mode: +v benchable6

[23:04] *** ChanServ sets mode: +v bisectable6

[23:04] *** ChanServ sets mode: +v coverable6

[23:04] *** ChanServ sets mode: +v unicodable6

[23:04] *** ChanServ sets mode: +v committable6

[23:04] *** ChanServ sets mode: +v squashable6

[23:04] * AlexDaniel maybe *ables want a bouncer?

[23:10] <perigrin> they seem quite adept at bouncing without it

[23:11] *** mcmillhj joined
[23:13] *** epony left
[23:15] <Geth> ¦ whateverable: 2da9c8abf0 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Whateverable.pm6

[23:15] <Geth> ¦ whateverable: Don't generate paths with double slashes

[23:15] <Geth> ¦ whateverable: 

[23:15] <Geth> ¦ whateverable: Tar will not normalize them. Issue #240.

[23:15] <Geth> ¦ whateverable: 

[23:15] <Geth> ¦ whateverable: This was a regression after 845db2e47fd6468a069bc9f2b54997e8ae412f48.

[23:15] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/2da9c8abf0

[23:15] <Geth> ¦ whateverable: 11af308d8d | (Aleks-Daniel Jakimenko-Aleksejev)++ | Sakefile

[23:15] <Geth> ¦ whateverable: Adapt Sakefile targets

[23:15] <Geth> ¦ whateverable: 

[23:15] <Geth> ¦ whateverable: Things are much easier now that we have all bots as systemd services.

[23:15] <Geth> ¦ whateverable: 

[23:15] <Geth> ¦ whateverable: Note that this is using ｢any(…) ~ ‘str’｣ which is a fairly new Rakudo

[23:15] <Geth> ¦ whateverable: addition.

[23:15] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/11af308d8d

[23:15] *** epony joined
[23:16] *** cdg_ left
[23:18] *** epony left
[23:18] *** epony joined
[23:23] *** mcmillhj left
[23:35] *** rindolf left
[23:50] *** evalable6 left
[23:50] *** virtualsue left
[23:50] *** evalable6 joined
[23:50] *** ChanServ sets mode: +v evalable6

[23:51] *** virtualsue joined
[23:52] *** mcmillhj joined
[23:53] *** skids joined
[23:56] <buggable> New CPAN upload: JSON-Fast-0.9.5.tar.gz by TIMOTIMO https://www.cpan.org/authors/id/T/TI/TIMOTIMO/Perl6/JSON-Fast-0.9.5.tar.gz

