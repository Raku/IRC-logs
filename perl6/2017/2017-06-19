[00:30] *** Cabanossi left
[00:31] *** wamba left
[00:32] *** lookatme joined
[00:32] <lookatme> morning 

[00:33] *** Cabanossi joined
[00:34] *** nadim left
[00:34] <samcv> morning lookatme 

[00:34] <Geth> ¦ doc: fedda5e11b | (Samantha McVey)++ | 2 files

[00:34] <Geth> ¦ doc: [unicode-grant] Link to UTF8-C8 and NFC Unicode page from IO::Handle

[00:34] <Geth> ¦ doc: 

[00:34] <Geth> ¦ doc: Also fix minor typo on Unicode page.

[00:34] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fedda5e11b

[00:35] <lookatme> samcv, o/

[00:36] <samcv> hope this page links properly

[00:37] *** dolmen_ joined
[00:42] *** dolmen_ left
[00:47] <samcv> i think i've written up my talk's description https://gist.github.com/samcv/31d52d246999be98d27211c2b2b3bf33 i think it looks good. anybody got input?

[00:50] <samcv> hmm says i should have 100 and max 300 works. looks like that's 72

[00:50] *** kurahaupo left
[00:50] <lookatme> samcv++ don't know much about Unicode

[00:51] *** kurahaupo joined
[00:51] <samcv> that's my personal goal for unicode in perl 6. that the developer should only need to know the basics. and the rest should be easy to access

[00:53] *** bwisti joined
[00:56] <samcv> i'm thinking 45 minutes? 20 minutes sounds like too little

[01:03] *** AlexDaniel left
[01:09] <lookatme> samcv, They said `Tutorials (up to 180 minutes)`

[01:09] <samcv> idk. how long should it be. you tell me

[01:09] <samcv> :P

[01:09] <samcv> i'm not sure how long to make it

[01:11] <lookatme> Have you read that paper

[01:11] <lookatme> http://act.perlconference.org/tpc-2017-amsterdam/call-for-papers.html

[01:11] *** bwisti left
[01:12] <samcv> yes..

[01:12] <samcv> 180 minutes seems a bit long though

[01:12] <samcv> but it says 'up to'

[01:12] <lookatme> yeah, ~~ up 

[01:12] <samcv> so how long do you think I should make it?

[01:13] <lookatme> maybe 45 minutes, as you said before, haha

[01:14] <lookatme> a lesson about Unicode

[01:14] <lookatme> Perl6 Unicode

[01:16] <lookatme> But I think you should estimate time according your topic, like a lesson prepare

[01:18] <lookatme> Sorry about my English :(

[01:22] *** aborazmeh joined
[01:22] *** aborazmeh left
[01:22] *** aborazmeh joined
[01:25] *** travis-ci joined
[01:25] <travis-ci> Doc build errored. Samantha McVey '[unicode-grant] Link to UTF8-C8 and NFC Unicode page from IO::Handle

[01:25] <travis-ci> https://travis-ci.org/perl6/doc/builds/244348827 https://github.com/perl6/doc/compare/e556ea37438d...fedda5e11be3

[01:25] *** travis-ci left
[01:26] <samcv> leave me alone travis ;( you just timed out

[01:31] *** Cabanossi left
[01:32] *** semigloss joined
[01:33] *** Cabanossi joined
[01:42] *** tardisx joined
[01:46] *** ilbot3 left
[01:48] *** ilbot3 joined
[01:48] *** ChanServ sets mode: +v ilbot3

[02:04] <samcv> cool. got the new flags on the mvm side so you can customize and reverse the sorting of case, diacritics, and letter with the unicode collation algorithm

[02:11] *** xerx left
[02:11] *** bwisti joined
[02:13] *** pilne left
[02:15] *** aborazmeh left
[02:17] *** Voldenet left
[02:28] *** noganex joined
[02:30] *** Cabanossi left
[02:31] *** noganex_ left
[02:33] *** Cabanossi joined
[02:44] <samcv> hm what arguments would seem good for $*COLLATION.set(primary => 1/-1/0) or maybe primary => More/Less/Same

[02:44] <samcv> though idk how useful More/Less/Same seem?

[02:45] <samcv> i mean actually you could supply either. since More/Less/Same really are just 1/-1/0

[02:49] <lookatme> The second one is readable

[02:50] <lookatme> But the first one is easy to write ...

[02:51] <lookatme> How about make that default argument ?

[03:02] <Geth> ¦ gtk-simple: dwarring++ created pull request #79: fix gtk_simple_use_cairo() as per issue #69

[03:02] <Geth> ¦ gtk-simple: review: https://github.com/perl6/gtk-simple/pull/79

[03:02] <Geth> ¦ gtk-simple: 5d0e9df2e4 | (David Warring)++ | lib/GTK/Simple/DrawingArea.pm6

[03:02] <Geth> ¦ gtk-simple: fix gtk_simple_use_cairo() as per issue #69

[03:02] <Geth> ¦ gtk-simple: 

[03:02] <Geth> ¦ gtk-simple: To get the following to work (display aqua square)

[03:02] <Geth> ¦ gtk-simple: 

[03:02] <Geth> ¦ gtk-simple: use v6.c;

[03:02] <Geth> ¦ gtk-simple: use GTK::Simple;

[03:02] <Geth> ¦ gtk-simple: use GTK::Simple::DrawingArea;

[03:02] <Geth> ¦ gtk-simple: <…commit message has 20 more lines…>

[03:03] <Geth> ¦ gtk-simple: review: https://github.com/perl6/gtk-simple/commit/5d0e9df2e4

[03:03] <Geth> ¦ gtk-simple: 3ed1531bc4 | (David Warring)++ (committed using GitHub Web editor) | lib/GTK/Simple/DrawingArea.pm6

[03:03] <Geth> ¦ gtk-simple: Merge pull request #79 from dwarring/cairo-callback

[03:03] <Geth> ¦ gtk-simple: 

[03:03] <Geth> ¦ gtk-simple: fix gtk_simple_use_cairo() as per issue #69

[03:03] <Geth> ¦ gtk-simple: review: https://github.com/perl6/gtk-simple/commit/3ed1531bc4

[03:03] *** cpage_ joined
[03:06] <samcv> lookatme, yeah the defaults are all 1

[03:06] <samcv> unless you set it otherwise

[03:12] <lookatme> Oh. What's the mean of **primary** 

[03:15] <samcv> different letters

[03:15] <samcv> secondary is diacritic, tertiary is case

[03:15] <samcv> so you will be able to change the sorting of case without effecting the sorting by letter and diacritic for example

[03:16] <samcv> or move diacritics before the primary character in the sort instead of them come after

[03:16] <samcv> or you can turn any of the three levels off

[03:16] <samcv> fully customizable sort

[03:17] <samcv> well maybe not *fully* but as long as you want primary. secondary, tertiary or quaternary(breaking ties with codepoint)

[03:17] <samcv> you can choose any direction enable/disable you wish

[03:19] <lookatme> oh, awesome

[03:20] <Geth> ¦ gtk-simple: e42501ef73 | (David Warring)++ | examples/18-cairo-draw-handler.pl6

[03:20] <Geth> ¦ gtk-simple: add cairo callback example finalanalyst++

[03:20] <Geth> ¦ gtk-simple: review: https://github.com/perl6/gtk-simple/commit/e42501ef73

[03:21] *** semigloss left
[03:29] *** lookatme left
[03:29] *** lookatme joined
[03:40] <samcv> yeah pretty awesome

[03:43] *** Cabanossi left
[03:46] *** Cabanossi joined
[03:52] *** khw left
[03:59] *** cognominal left
[04:00] *** TEttinger joined
[04:17] *** lookatme_ joined
[04:19] *** lookatme left
[04:34] *** parv joined
[04:35] *** bwisti left
[04:40] *** raiph joined
[04:44] *** Cabanossi left
[04:46] *** Cabanossi joined
[04:50] *** aindilis joined
[04:51] *** ramortegui_ joined
[04:53] *** lookatme_ left
[04:53] *** lookatme_ joined
[05:20] *** domidumont joined
[05:24] *** domidumont left
[05:25] *** domidumont joined
[05:29] *** uberbaud joined
[05:39] *** xtreak joined
[05:43] *** keylet joined
[05:43] <keylet> how to split a string like 'string' -> [s t r i n g]

[05:43] <keylet> ?

[05:46] *** ramortegui_ left
[05:47] <parv> str.split( '' ) after guessing it.

[05:48] *** wamba joined
[05:49] *** BenGoldberg left
[05:51] <parv> hmm ... but not quite ... as there are empty strings at the end; better check the doc

[05:52] *** keylet left
[05:52] *** domidumont left
[05:53] <samcv> you want comb keylet

[05:53] <samcv> though they seem to have gone

[05:54] <samcv> parv, split('') will give you empty strings at the start and end of the string

[05:54] * parv fish-slaps self for forgetting "comb". again.

[05:56] <parv> samcv, yup; found that out after looking closely at the output.

[05:57] <parv> ... just goes to show how unfamiliar i still am due to lack of regular non-practice

[06:01] <parv> oh, wait! that should have been "... lack of regular practice".

[06:04] <samcv> hah. i knew comb did it. and honestly never thought to use split. but makes sense it would "work"

[06:07] *** abraxxa joined
[06:07] <moritz> m: say 'string'.split('').perl

[06:07] <camelia> rakudo-moar 6d4691: OUTPUT: «("", "s", "t", "r", "i", "n", "g", "").Seq␤»

[06:08] <moritz> note that this is likely not what anybody wants (leading and trailing empty strings)

[06:10] <parv> there is layout/css problem with all-in-one perl 6 doc, https://docs.perl6.org/perl6.xhtml . where should i post a screenshot?

[06:11] *** domidumont joined
[06:11] <moritz> imgur?

[06:12] <parv> hmm ... would i need an account there?

[06:12] <samcv> moritz, how long and how should the bio be like for submitting a paper for the EU perl conf?

[06:12] <samcv> any tips

[06:12] <samcv> about to submit mine now

[06:12] <nebuchadnezzar> parv: https://framapic.org/ does not require an account

[06:13] <parv> nebuchadnezzar, thanks.

[06:14] <moritz> samcv: maybe a sentence or two?

[06:14] <moritz> samcv: I've given talks at two YAPC::EU's, but I'm not a professional speaker by any account, so take my advice with a grain of salt

[06:14] <nebuchadnezzar> Time to go to work :-/ see you

[06:15] <parv> hunh. apparently, i can post on imgur sans an account: https://imgur.com/a/3zDtw

[06:19] <samcv> the more times i type collation (the word), the weirder the spelling of the word seems

[06:19] *** |oLa| joined
[06:20] *** nadim_ joined
[06:24] *** |oLa| left
[06:32] <moritz> samcv: isn't that the case with most words? :-)

[06:35] *** keylet joined
[06:35] <keylet> m: say 'string' ~~ m:g/./

[06:35] <camelia> rakudo-moar 6d4691: OUTPUT: «(｢s｣ ｢t｣ ｢r｣ ｢i｣ ｢n｣ ｢g｣)␤»

[06:36] <keylet> I don't know if this is too slow, but it works anyway

[06:38] <lookatme_> m: say "string".comb

[06:38] <camelia> rakudo-moar 6d4691: OUTPUT: «(s t r i n g)␤»

[06:41] <keylet> m: say "string".comb.WHAT

[06:41] <camelia> rakudo-moar 6d4691: OUTPUT: «(Seq)␤»

[06:43] *** ufobat joined
[06:46] <moritz> m: (say 'string' ~~ m:g/./)[0].^name

[06:46] <camelia> rakudo-moar 6d4691: OUTPUT: «(｢s｣ ｢t｣ ｢r｣ ｢i｣ ｢n｣ ｢g｣)␤»

[06:55] <parv> is not collecting return value of a sub or a method an error? or, perl 6 would not care either?

[06:55] <moritz> parv: there's an easy way to find out :-)

[06:55] *** cognominal joined
[06:57] <parv> moritz, oy, give me a fish please

[07:06] *** lowbro joined
[07:06] *** lowbro left
[07:06] *** lowbro joined
[07:11] <parv> turns out calling a value returning sub in void context is just fine w/ rakudo.

[07:15] *** Cabanossi left
[07:15] *** espadrine joined
[07:16] *** Cabanossi joined
[07:18] *** cognominal left
[07:19] <parv> is there anything for undefined value besides Nil?

[07:20] <geekosaur> type objects

[07:20] <geekosaur> m: my Int $x; dd $x

[07:20] <camelia> rakudo-moar 476780: OUTPUT: «Int $x = Int␤»

[07:21] <parv> i meant some value/function that would be undefined.

[07:21] <parv> ... to be returned from a sub.

[07:23] <moritz> parv: sorry, was away for a bit; the easiest is to just run a very small, isolated test

[07:23] <moritz> m: sub f() { return 'ignored' }; f(); say "I'm still fine."

[07:23] <camelia> rakudo-moar 476780: OUTPUT: «I'm still fine.␤»

[07:24] *** grondilu left
[07:25] <parv> moritz, thanks; no worries. i had done just that. 

[07:29] <geekosaur> perl6 has types, there is no untyped undef like perl 5 has

[07:30] <parv> if a class attribute or a simple variable can be defined as "has Int $.x" or my Int $x = 3", then why cannot use the same syntax to return a value from a sub "sub ... { return Int 3 } "  (instead of "Int(3)")?

[07:31] <geekosaur> because Int is a type object, the undefined Int value

[07:31] <geekosaur> it cannot simultaneously be a function callable without parentheses, if you leave off the parentheses you get the type object

[07:33] <parv> that (bare Int being a type object) should explain "two terms in a row" message. thanks geekosaur.

[07:34] <lookatme_> m: sub f() { return Int: 3; }; say f().WHAT; # Why is a List ?

[07:34] <camelia> rakudo-moar 476780: OUTPUT: «(List)␤»

[07:35] <lookatme_> m: sub f() { return Int: 3; }; say f().perl;

[07:35] <camelia> rakudo-moar 476780: OUTPUT: «(Int, 3)␤»

[07:37] <parv> lookatme_, why does "Int: 3" not produce an error while "Int 3" does?

[07:37] <moritz> "Int 3" is two terms in a row, which is a syntax error

[07:38] *** ufobat left
[07:38] *** domidumont left
[07:39] *** domidumont joined
[07:40] <geekosaur> the colon there is, I think, intended to be an alternative method call (foo.method: parameters). but there is no method to be called so it can't be that. capture perhaps?

[07:41] <geekosaur> (then "flattened" to a list for some reason)

[07:41] <lookatme_> m: sub f() { return: Int, 3; }; say f().WHAT; # same

[07:41] <camelia> rakudo-moar 476780: OUTPUT: «(List)␤»

[07:41] <lookatme_> m: sub f() { return: Int, 3; }; say f().perl; # same

[07:41] <camelia> rakudo-moar 476780: OUTPUT: «(Int, 3)␤»

[07:43] <geekosaur> those two are not doing what you think, and probably not the same thing as the first

[07:43] <geekosaur> 'return:' is a label

[07:43] <geekosaur> m: sub f() { glorp: Int, 3; }; say f().perl; # same

[07:43] <camelia> rakudo-moar 476780: OUTPUT: «(Int, 3)␤»

[07:43] *** zakharyas joined
[07:43] *** rindolf joined
[07:44] <lookatme_> geekosaur, yeah, maybe, I just wonder why first one return a List.

[07:45] *** uberbaud left
[07:45] <parv> could "Int: 3"  be "Adverbial pairs (colon pairs)" (https://docs.perl6.org/language/syntax)?

[07:46] <geekosaur> the colon starts a colon pair, and would be two-terms-in-a-row there

[07:46] <geekosaur> colon pair is :foo(3) or :3foo or :foo (the latter becoming :foo(True))

[07:47] <lookatme_> parv, no 

[07:47] *** mscha left
[07:48] <parv> ok. is there a name for "Int:" syntax so that I could search for that?

[07:50] <lookatme_> Oh, it's a parameter separator like `,`, but marks the argument to its left as the invocant.

[07:50] <lookatme_> m: sub f() { Int.return(3) }; say f().perl; 

[07:50] <camelia> rakudo-moar 476780: OUTPUT: «(Int, 3)␤»

[07:50] <lookatme_> But .. 

[07:51] *** Voldenet joined
[07:51] *** Voldenet left
[07:51] *** Voldenet joined
[07:51] <lookatme_> Why I can call a return on Int ..

[07:51] <geekosaur> that was what I was thinking of when I mentioned captures... because I thought that was the only place that was valid

[07:51] <geekosaur> and, also, that question

[07:51] <lookatme_> m: sub f() { 2.return }; say f().perl; 

[07:51] <camelia> rakudo-moar 476780: OUTPUT: «2␤»

[07:51] <geekosaur> and of course searching the source for 'return' is less than helpful :p

[07:52] <lookatme_> OH, return is not only a "sub"(?right), but also a method

[07:52] <geekosaur> welp. looks like 'return' is indeed a method (in Mu)

[07:53] <lookatme_> yeah, that's make sense now

[07:53] <geekosaur> ahah, and its parameter *is* a capture

[07:53] <geekosaur> which is why the invocant syntax works

[07:54] <geekosaur> method return(|) ...

[07:55] <lookatme_> oh

[07:55] <pmurias> are the encoding we support documented somewhere? I'm looking up what utf8-c is, so that I can implement it for the js backend

[07:55] <geekosaur> utf8-c8 doc just got added today

[07:56] <geekosaur> https://github.com/perl6/doc/commit/e556ea3743

[07:58] *** dogbert17 left
[08:00] <pmurias> the "they will look funny when printed to utf8 file handle" seems suspicious 

[08:00] *** jonas2 joined
[08:09] *** Voldenet left
[08:10] *** Voldenet joined
[08:11] *** Voldenet left
[08:11] *** Voldenet joined
[08:12] * parv rants: perl6 doc should replace "undef" with "Nil" already

[08:13] *** Cabanossi left
[08:16] <pmurias> parv: you mean when you are searching for "undef" but mean Nil?

[08:16] *** Cabanossi joined
[08:17] *** |oLa| joined
[08:17] <parv> pmurias, no. At least in one example, a comment mentioned "undef" but should there is no such value of function. That specific mention should either be changed to "undefined", "unknown", or "Nil".

[08:18] <parv> s/but should there is no/but there is no/

[08:19] *** lookatme_ left
[08:19] *** lookatme_ joined
[08:19] *** dakkar joined
[08:19] *** |oLa| left
[08:19] *** |oLa|1 joined
[08:20] <parv> thank you, people.

[08:20] <parv> see you some some other time.

[08:20] *** parv left
[08:21] *** lookatme_ left
[08:21] *** lookatme_ joined
[08:25] *** wamba left
[08:29] *** domidumont left
[08:31] *** kyan left
[08:40] *** keylet left
[08:41] *** domidumont joined
[08:45] *** domidumont left
[08:45] *** Cabanossi left
[08:46] *** Cabanossi joined
[08:46] *** domidumont joined
[08:51] *** nattefrost joined
[09:03] *** domidumont left
[09:05] <samcv> m: use experimental :collation; <a á A Á ó ø 1 z t ṫ>.collate.say

[09:05] <camelia> rakudo-moar 476780: OUTPUT: «(1 a A á Á ó ø t ṫ z)␤»

[09:06] <samcv> m: use experimental :collation; $*COLLATION.set(tertiary=> -1); <a á A Á ó ø 1 z t ṫ>.collate.say

[09:06] <camelia> rakudo-moar 476780: OUTPUT: «(1 A a Á á ó ø t ṫ z)␤»

[09:06] *** espadrine left
[09:06] <samcv> nice.

[09:06] <samcv> m: use experimental :collation; $*COLLATION.set(secondary => -1, tertiary=> -1); <a á A Á ó ø 1 z t ṫ>.collate.say

[09:06] <camelia> rakudo-moar 476780: OUTPUT: «(Á á 1 A a ø ó ṫ t z)␤»

[09:07] <samcv> hmm. weird how 1 goes after A there...

[09:07] <samcv> unidump: 1

[09:07] <unicodable6> samcv, https://gist.github.com/c01e7203aad75947c12e0003f1bc4330

[09:07] <samcv> unidump a

[09:07] <samcv> unidump: a

[09:07] <unicodable6> samcv, https://gist.github.com/ceee35c0a1871a85161cd80e88e97957

[09:09] <lookatme_> m: use experimental :collation; $*COLLATION.set(tertiary=> Less); <a á A Á ó ø 1 z t ṫ>.collate.say

[09:09] <camelia> rakudo-moar 476780: OUTPUT: «(1 A a Á á ó ø t ṫ z)␤»

[09:10] <samcv> hmm. may have to go back to a more complex method of it

[09:11] <samcv> since from as i can see here. negating both tertiary and secondary can cause primary to be ignored. and make 1 sort after a

[09:11] <samcv> so will have to fix that

[09:11] *** jervo joined
[09:12] <samcv> as secondary is 33 for both a and 1. and primary is 7231 for 1 and a is 7240. so very close

[09:14] *** Cabanossi left
[09:16] *** Cabanossi joined
[09:19] *** chee left
[09:21] *** esh_ is now known as esh

[09:27] *** |oLa|1 left
[09:29] *** |oLa| joined
[09:30] *** wamba joined
[09:45] *** lookatme_ left
[09:46] *** domidumont joined
[09:51] *** keylet joined
[09:55] *** wamba left
[10:02] *** lowbro left
[10:04] *** zakharyas left
[10:05] *** zakharyas joined
[10:07] *** stmuk joined
[10:09] *** stmuk_ left
[10:14] *** Cabanossi left
[10:15] *** cognominal joined
[10:16] *** Cabanossi joined
[10:19] *** ufobat joined
[10:27] *** dp[m] left
[10:27] *** mienaikage left
[10:27] *** jast left
[10:27] *** jast joined
[10:28] *** mienaikage joined
[10:28] *** keylet left
[10:32] *** lizmat left
[10:32] *** lizmat joined
[10:33] *** AlexDaniel joined
[10:33] *** AlexDaniel left
[10:39] *** cognominal left
[10:42] *** dp[m] joined
[10:45] *** Cabanossi left
[10:46] *** Cabanossi joined
[11:01] *** AlexDaniel joined
[11:03] *** nattefrost left
[11:04] *** nattefrost joined
[11:06] *** kurahaupo left
[11:06] *** kurahaupo joined
[11:11] *** wamba joined
[11:14] *** Cabanossi left
[11:16] *** Cabanossi joined
[11:23] *** cognominal joined
[11:23] *** TEttinger left
[11:24] *** xtreak left
[11:30] *** pmurias left
[11:37] *** bioduds joined
[11:37] <bioduds> Hi all

[11:37] <bioduds> whats up?

[11:37] *** bbkr left
[11:37] <bioduds> Anyone heard of Tangles?

[11:40] *** rumble joined
[11:40] *** grumble is now known as Guest38774

[11:40] *** Guest38774 left
[11:40] *** rumble is now known as grumble

[11:41] <Geth> ¦ perl6.org: 355a391757 | (Tom Browder)++ (committed using GitHub Web editor) | source/resources/index.html

[11:41] <Geth> ¦ perl6.org: add three new books

[11:41] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/355a391757

[11:42] <Geth> ¦ perl6.org: 3c3533cc65 | (Tom Browder)++ (committed using GitHub Web editor) | source/resources/index.html

[11:42] <Geth> ¦ perl6.org: add status

[11:42] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/3c3533cc65

[11:44] *** Cabanossi left
[11:45] *** Cabanossi joined
[11:46] *** lowbro joined
[11:46] *** lowbro left
[11:46] *** lowbro joined
[11:47] *** raschipi joined
[11:59] *** [ptc] left
[12:01] *** ufobat left
[12:03] *** [ptc] joined
[12:09] *** kurahaupo left
[12:10] *** kurahaupo joined
[12:15] <Geth> ¦ perl6.org: 20c21ec18c | (Zoffix Znet)++ (committed using GitHub Web editor) | source/resources/index.html

[12:15] <Geth> ¦ perl6.org: Reword

[12:15] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/20c21ec18c

[12:18] *** kyan joined
[12:22] *** araraloren joined
[12:22] <araraloren> evening

[12:24] <moritz> hello araraloren 

[12:25] *** AlexDaniel left
[12:29] *** zakharyas left
[12:30] *** kurahaupo_ joined
[12:31] <araraloren> moritz, hi, Did you see that code ?

[12:31] *** kurahaupo_ left
[12:31] *** kurahaupo_ joined
[12:32] *** zakharyas joined
[12:32] <moritz> araraloren: I see lots of code each day, but I don't know if I saw the one you are talking about :-)

[12:32] *** kurahaupo left
[12:32] *** kurahaupo_ left
[12:33] *** kurahaupo joined
[12:33] <araraloren> OH, That's about write parent class attribute: https://github.com/araraloren/perl6-getopt-advance/blob/master/lib/Getopt/Advance/Option.pm6#L180

[12:33] *** [ptc] left
[12:35] <araraloren> I can write parent attribute such as `$!value`

[12:35] <araraloren> s/can/can not/

[12:45] <moritz> why not?

[12:45] <moritz> it's a public attribute, and you can set it through the constructor

[12:48] *** wamba left
[12:48] <perlpilot> araraloren: The `$!value` form is private to the class in which it is declared, if you want to access that attribute outside of the class (even via inheritance), you need to use the `$.value` (public) form.

[12:52] *** jast left
[12:53] *** mcmillhj joined
[12:58] <araraloren> moritz, perlpilot thanks, I change it to role now

[13:03] *** bwisti joined
[13:04] *** wamba joined
[13:06] *** grondilu joined
[13:13] *** dmaestro joined
[13:19] *** araraloren_ joined
[13:22] *** araraloren left
[13:29] *** araralonre__ joined
[13:31] *** kyan left
[13:31] *** dmaestro left
[13:32] *** araraloren_ left
[13:35] *** dmaestro joined
[13:43] *** araraloren_ joined
[13:46] *** araralonre__ left
[13:48] *** domidumont left
[13:51] *** sufrostico left
[13:53] *** sufrostico joined
[13:54] *** leah2 left
[13:55] *** abraxxa left
[13:56] *** domidumont joined
[13:57] * zengargoyle reckons no live-stream from YAPC::NA this year, goes back to watching cartoons and reading moritz's book. :)

[13:58] *** leah2 joined
[13:59] <perlpilot> I was just asking my coworker who is there about live-streaming .... he didn't know, but figuring for the "security" in the building probably not.

[14:00] <[Coke]> lots of 'make xtest' failures in docs.

[14:00] <[Coke]> xt/trailing-whitespace.t; xt/perl-nbsp.t; xt/space-after-comma.t; xt/examples-compilation.t; xt/aspell.t

[14:01] <zengargoyle> irc chatter is a lot of bad wifi, blocked ports, and people having to tether...  but they did mention some cameras earlier so i'll hold up hope for eventual recordings.

[14:01] <[Coke]> (some of those may be due to the proc piping bug. :|

[14:02] *** domidumont left
[14:02] *** domidumont joined
[14:08] *** konsolebox left
[14:11] *** jast joined
[14:12] *** konsolebox joined
[14:13] <El_Che> is yapc na being live streamed?

[14:14] *** mscha joined
[14:15] <mscha> Quick question: is there a non-destructive version of splice?  (I.e., one that leaves the @list alone and returns the result of the splice?)

[14:15] <perlpilot> mscha: that's just a slice

[14:16] <perlpilot> m:  my @array = ^10;  say @array[5..8];

[14:16] <camelia> rakudo-moar 6b634a: OUTPUT: «(5 6 7 8)␤»

[14:16] <mscha> Yeah, but it gets ugly in more complicated cases.

[14:17] <perlpilot> mscha: such as?

[14:17] <mscha> flat @array[^$start], @replacement, @array[($start+$elems)..*]

[14:20] <jnthn> Can always just .clone.splice(...)

[14:20] *** cdg joined
[14:20] <jnthn> or write a sub of your own that does the "ugly" thing ;)

[14:21] *** mscha left
[14:21] *** mscha joined
[14:23] <mscha> jnthn: .clone.splice doesn't make things less ugly (my @b = @a.clone; @b.splice(...); @b).  Writing my own sub is of course an option, but that's why I was asking - I was hoping that wasn't necessary.

[14:24] <jnthn> my @b := @a.clone.splice(...)

[14:25] <jnthn> Oh wait, splice returns the removed elements

[14:26] *** dmaestro left
[14:28] <raschipi> mscha: What should it be called? ssplice?

[14:33] <mscha> spliced?

[14:35] *** bioduds left
[14:37] <mscha> Or an extra flag to the existing splice routine perhaps.

[14:38] *** eveo joined
[14:39] <eveo> m: say +[].^lookup("splice").candidates

[14:39] <camelia> rakudo-moar 6b634a: OUTPUT: «31␤»

[14:39] <eveo> Please no flags :)

[14:39] *** |oLa|1 joined
[14:40] *** nattefrost left
[14:40] <raschipi> It should probably be implemented as a new routine that calls splice but returns a copy

[14:41] *** mr-fooba_ joined
[14:41] *** |oLa| left
[14:41] <eveo> In a module...

[14:42] <eveo> m: my @a = ^4; my @b = do with [@a] { .splice: 2, 1, <a b c>; $_ }; dd @a, @b

[14:42] <camelia> rakudo-moar 6b634a: OUTPUT: «Array @a = [0, 1, 2, 3]␤Array @b = [0, 1, "a", "b", "c", 3]␤»

[14:43] *** mr-foobar left
[14:43] *** Actualeyes left
[14:45] <eveo> m: my @a = ^4; my @b = (.splice: 2, 1, <a b c>; $_).tail with [@a]; dd @a, @b

[14:45] <camelia> rakudo-moar 6b634a: OUTPUT: «Array @a = [0, 1, 2, 3]␤Array @b = [0, 1, "a", "b", "c", 3]␤»

[14:45] *** geekosaur left
[14:46] <eveo> m: my @a = ^4; (my @b = [@a]).splice: 2, 1, <a b c>; dd @a, @b

[14:46] <camelia> rakudo-moar 6b634a: OUTPUT: «Array @a = [0, 1, 2, 3]␤Array @b = [0, 1, "a", "b", "c", 3]␤»

[14:46] <eveo> mscha: ^ I think that's fairly un-ugly

[14:47] *** geekosaur joined
[14:48] <eveo> \o

[14:48] *** eveo left
[14:49] <mscha> Well, here's what I'm doing: looping through an array with column 0, 1, ... removed.

[14:49] <mscha> m:  my @a = ^5; for ^@a -> $c { say flat @a[^$c,$c^..*] }

[14:50] *** raschipi left
[14:50] <camelia> rakudo-moar 6b634a: OUTPUT: «(1 2 3 4)␤(0 2 3 4)␤(0 1 3 4)␤(0 1 2 4)␤(0 1 2 3)␤»

[14:50] <timotimo> how about a slang that lets us annotate a parameter (at the callsite, not in the sub/method definition) that becomes the return value

[14:50] <mscha> Having to use a temporary variable doesn't make that unuglier.  :-)

[14:51] *** cdg_ joined
[14:51] <mscha> I wouldn't even mind having to use @a[^$c,$c^..*], but that's an array of arrays, so it needs a flat.

[14:51] <timotimo> m:  my @a = ^5; for ^@a -> $c { say flat @a[(^*).grep(none($c))] }

[14:51] <camelia> rakudo-moar 6b634a: OUTPUT: «(1 2 3 4)␤(0 2 3 4)␤(0 1 3 4)␤(0 1 2 4)␤(0 1 2 3)␤»

[14:52] <zengargoyle> El_Che: nobody has explicitly stated that there will be recordings,  but i'm hopefull.  i don't thinke the USPTO location's network is even up to providing decent WiFi, much less live-streaming. :)

[14:52] <mscha> That works too, but is slow for large lists.

[14:53] <mscha> m: my @a = ^5; .say for @a.combinations(@a-1)  # Hmm, this might work...

[14:53] <camelia> rakudo-moar 6b634a: OUTPUT: «(0 1 2 3)␤(0 1 2 4)␤(0 1 3 4)␤(0 2 3 4)␤(1 2 3 4)␤»

[14:53] *** cdg left
[14:54] <timotimo> order not guaranteed

[14:55] <mscha> That's true, although Rakudo plays nice at least.

[14:55] <timotimo> yeah, we do have an algo in there that's predictable

[14:56] *** khw joined
[14:59] *** Actualeyes joined
[15:03] *** alimon joined
[15:09] *** raschipi joined
[15:14] *** zakharyas left
[15:15] *** keylet joined
[15:15] <keylet> can I use type declaration with "has"

[15:15] <keylet> ?

[15:15] <keylet> m: class A { has $.a = 2; };

[15:15] <camelia> rakudo-moar 6b634a: ( no output )

[15:16] <keylet> m: class A { has Int $.a = 2; };

[15:16] <camelia> rakudo-moar 6b634a: ( no output )

[15:16] <araraloren_> yeah, you can 

[15:16] <keylet> m: class A { has Int $.a is rw; }; A.a = 'string';

[15:16] <camelia> rakudo-moar 6b634a: OUTPUT: «Cannot look up attributes in a A type object␤  in block <unit> at <tmp> line 1␤␤»

[15:16] <araraloren_> and Int is a type constraint

[15:16] <araraloren_> A is a type object, you should new a instance

[15:17] <araraloren_> m: class A { has Int $.a is rw; }; A.new.a = 'string';

[15:17] <camelia> rakudo-moar 6b634a: OUTPUT: «Type check failed in assignment to $!a; expected Int but got Str ("string")␤  in block <unit> at <tmp> line 1␤␤»

[15:17] <araraloren_> m: class A { has Int $.a is rw; }; A.new.a = 1;

[15:17] <camelia> rakudo-moar 6b634a: ( no output )

[15:17] <keylet> thanks!

[15:17] <keylet> m: class A { has Int $.a is rw = 2; };

[15:17] <camelia> rakudo-moar 6b634a: ( no output )

[15:17] <keylet> m: class A { has Int is rw $.a = 2; };

[15:17] <camelia> rakudo-moar 6b634a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed has␤at <tmp>:1␤------> 3class A { has Int7⏏5 is rw $.a = 2; };␤»

[15:18] <keylet> m: class A { has Int $.a = 2 is rw; };

[15:18] <camelia> rakudo-moar 6b634a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3class A { has Int $.a = 27⏏5 is rw; };␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        s…»

[15:18] <perlpilot> keylet: Are you a QA person normally?

[15:27] *** domidumont left
[15:28] <keylet> perlpilot: No, I'm a developer :)

[15:29] <perlpilot> keylet: Your syntax permutations indicate you may have an aptitude for QA  ;)

[15:31] *** domidumont joined
[15:39] *** dmaestro joined
[15:42] *** wamba left
[15:44] *** Cabanossi left
[15:46] *** Cabanossi joined
[15:52] *** wamba joined
[15:54] *** araraloren_ left
[15:55] *** zakharyas joined
[15:56] *** |oLa|1 left
[15:56] *** domidumont left
[15:56] *** zakharyas left
[15:57] *** zakharyas joined
[16:00] *** |oLa| joined
[16:02] *** dha joined
[16:09] *** dha left
[16:10] *** dmaestro left
[16:12] *** wamba left
[16:12] *** |oLa| left
[16:13] *** smash joined
[16:14] *** araujo joined
[16:14] *** araujo left
[16:14] *** araujo joined
[16:21] *** lowbro left
[16:22] *** raschipi left
[16:37] *** raiph left
[16:38] *** dogbert17 joined
[16:39] *** keylet left
[16:43] *** ChoHag left
[16:46] *** setty1 joined
[16:46] *** ufobat joined
[16:47] *** pilne joined
[16:53] *** |oLa| joined
[16:57] *** ilmari left
[16:57] *** ilmari joined
[17:00] *** lucasb joined
[17:00] *** dakkar left
[17:07] *** zakharyas left
[17:15] *** Cabanossi left
[17:15] *** astj left
[17:16] *** Cabanossi joined
[17:27] *** andrzejk_ joined
[17:30] *** hankache joined
[17:32] *** wamba joined
[17:34] *** Exodist left
[17:34] *** Exodist joined
[17:39] *** leont joined
[17:43] *** Exodist left
[17:45] *** Exodist joined
[17:48] <leont> Currently assembling the list of presentations for Amsterdam, there will be perl6 talks

[17:49] *** mr-foobar joined
[17:50] *** mr-foob__ joined
[17:51] *** espadrine joined
[17:52] *** mr-fooba_ left
[17:54] *** mr-foobar left
[17:55] *** user3 joined
[17:55] *** kyan joined
[17:56] <user3> I want to predeclare a sub with its signature. why doesn't this work:

[17:56] <user3> m: f(Int $i); f(3); sub f(Int $i) { say $i }

[17:56] <camelia> rakudo-moar 6b634a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' ␤at <tmp>:1␤------> 3f(Int7⏏5 $i); f(3); sub f(Int $i) { say $i }␤    expecting any of:␤        infix␤        infix stop…»

[17:56] *** mr-foobar joined
[18:00] *** mr-foob__ left
[18:00] *** mr-fooba_ joined
[18:01] <timotimo> m: sub f(Int $i) { ... }; f(3); sub f(Int $i) { say $i }

[18:01] <camelia> rakudo-moar 6b634a: OUTPUT: «3␤»

[18:01] <timotimo> user3: ^

[18:01] <timotimo> you forgot a "sub" in front and { ... } after the signature

[18:02] *** uberbaud joined
[18:02] <user3> m: sub f(Int $i) { .... }; f(3); sub f(Int $i) { say $i }

[18:02] <camelia> rakudo-moar 6b634a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of . to concatenate strings; in Perl 6 please use ~␤at <tmp>:1␤------> 3sub f(Int $i) { .... 7⏏5}; f(3); sub f(Int $i) { say $i }␤»

[18:02] <perlpilot> user3: ETOOMANYDOTS

[18:02] <user3> m: sub f(Int $i) { ... }; f(3); sub f(Int $i) { say $i }

[18:02] <camelia> rakudo-moar 6b634a: OUTPUT: «3␤»

[18:02] <user3> wow

[18:03] *** mr-foobar left
[18:05] <user3> the first error message was not particular enlightening

[18:05] <geekosaur> it's another example of errors prioritizing a perl 5 trap

[18:05] <perlpilot> It's hard to guess what you meant though

[18:06] <user3> *particularly

[18:06] *** mr-foobar joined
[18:06] *** KotH left
[18:06] *** KotH joined
[18:06] *** uberbaud left
[18:07] *** mr-fooba_ left
[18:07] *** kurahaupo_ joined
[18:09] *** kurahaupo left
[18:09] *** jast left
[18:10] *** kurahaupo_ left
[18:10] *** jast joined
[18:10] *** kurahaupo joined
[18:10] *** dogbert11 joined
[18:11] *** kurahaupo_ joined
[18:12] *** kurahaupo__ joined
[18:12] *** hankache left
[18:12] *** peteretep_ joined
[18:12] *** labster_ joined
[18:12] *** dustinm`_ joined
[18:12] *** hankache joined
[18:13] *** BuildTheRobots_ joined
[18:14] *** jkva__ joined
[18:14] *** llfourn_ joined
[18:14] *** kurahaupo left
[18:15] *** mcmillhj_ joined
[18:15] *** ilmari_ joined
[18:15] *** eyck_ joined
[18:15] *** Exodist left
[18:15] *** sivoais_ joined
[18:15] *** sQuEE` joined
[18:16] *** kurahaupo_ left
[18:16] *** Exodist joined
[18:18] *** ccakes_ joined
[18:19] *** ilmari left
[18:19] *** bwisti left
[18:19] *** mcmillhj left
[18:19] *** u-ou left
[18:19] *** sQuEE left
[18:19] *** jkva_ left
[18:19] *** BuildTheRobots left
[18:19] *** chansen_ left
[18:19] *** peteretep left
[18:19] *** dogbert17_ left
[18:19] *** ccakes left
[18:19] *** salva left
[18:19] *** giraffe left
[18:19] *** Matthew[m] left
[18:19] *** SCHAPiE left
[18:19] *** llfourn left
[18:19] *** eyck left
[18:19] *** sivoais left
[18:19] *** labster left
[18:19] *** dustinm` left
[18:19] *** JimmyZ left
[18:19] *** timotimo left
[18:19] *** jeek left
[18:19] *** ilmari_ is now known as ilmari

[18:19] *** jkva__ is now known as jkva_

[18:19] *** peteretep_ is now known as peteretep

[18:20] *** BuildTheRobots_ is now known as BuildTheRobots

[18:20] *** mcmillhj_ left
[18:21] *** mcmillhj joined
[18:21] <[Coke]> samcv: in doc commit 0d4110870, you mention "userwide option above.", but userwide only appears once in the doc.

[18:21] *** labster_ is now known as labster

[18:22] <[Coke]> (also "userwide" isn't a word, so it's failing the spelling check)

[18:22] *** jeek joined
[18:22] *** u-ou joined
[18:22] *** giraffe joined
[18:23] *** araujo left
[18:23] *** timotimo joined
[18:23] *** bwisti joined
[18:23] <user3> I have a file p.6 with these 2 lines:

[18:23] *** JimmyZ joined
[18:24] <user3> multi MAIN('--help') { say 'this'; }

[18:24] <user3> multi MAIN() { say 'that'; }

[18:24] <user3> I can get the help message with: perl6 p.6 -- --help

[18:24] <user3> how can i get the same result with only: perl6 p.6 --help

[18:24] *** salva joined
[18:25] *** kurahaupo__ left
[18:25] *** kurahaupo joined
[18:26] <perlpilot> user3: multi MAIN (:$help) { say 'this' }

[18:26] <[Coke]> multi MAIN(:$help) { say 'this'; }

[18:26] <[Coke]> so close. :)

[18:26] <user3> i have to define $help='--help' first, i assume

[18:26] <user3> but that seems a bit complicated

[18:26] <[Coke]> no

[18:26] <[Coke]> literally that line.

[18:27] <user3> oh

[18:27] *** Matthew[m] joined
[18:27] <[Coke]> :$help in a signature means a named argument called help. when used in MAIN, named args translate as --options

[18:27] <geekosaur> user3, you were writing it as "match a literal string normal parameter", you want "match as an option and set a flag if it is present"

[18:27] <geekosaur> :$help is the syntax for the latter, it sets $help to True if --help was passed as an option

[18:28] <[Coke]> if someone passed in --help there, it would be available in that sub as $help , with a value of True

[18:28] <[Coke]> ... again, too slow. :|

[18:28] * [Coke] goes back into lurk mode. :)

[18:28] *** vetmaster joined
[18:29] <geekosaur> and in fact you don't need the second multi with that, you can test $help to see what to do

[18:29] *** SCHAPiE joined
[18:30] <user3> that works

[18:42] *** hankache left
[18:47] *** konsolebox left
[18:48] *** andrzejk_ left
[18:53] *** mcmillhj left
[18:56] *** konsolebox joined
[18:58] *** mcmillhj joined
[19:03] *** itaipu joined
[19:03] *** andrzejk_ joined
[19:04] *** domidumont joined
[19:06] *** user3 left
[19:12] <ufobat> is there a tool for the sql file that will be created via --profile?

[19:16] *** AlexDaniel joined
[19:17] * [Coke] has an idea for doc stuff: Make all doc only contributions to a branch (esp. edits through the web api); then all tests have to pass (including xt/) before merging it to master.

[19:17] <[Coke]> (PRs should have to pass this already)

[19:18] <AlexDaniel> unidump: 1a

[19:19] <unicodable6> AlexDaniel, https://gist.github.com/e60498f323a61e7a98bdc18b3c7cbdc0

[19:23] *** domidumont left
[19:29] *** ChoHag joined
[19:29] *** eveo joined
[19:30] <eveo> ufobat: none that I'm aware of

[19:30] <ufobat> so it still makes sense to use tadziks qt tool and json

[19:32] <b2gills> m: dd 'string'.split('') :skip-empty # no-one mentioned the :skip-empty adverb earlier

[19:32] <camelia> rakudo-moar 6b634a: OUTPUT: «("s", "t", "r", "i", "n", "g").Seq␤»

[19:33] <eveo> [Coke]: that sounds like a good way to stifle contributions, especially quick typo fixes. Who'll be testing the branches, considering travis times out half the time? Considering the stuff xt tests test isn't critical, IMO it'd make more sense to leave them alone and only work on them once in a while. In fact, I don't mind making it it part of the Rakudo release process to ensure the docs xt tests pass, if in

[19:33] <eveo> exchange I can edit with web UI without being flagged for each typo. So this way, the typos, the tabs, spaces, non-nbsp Perl 6 and whatever else will at most surive for a month in the doc repo, and there'll be no barriers to contributions

[19:34] <eveo> ufobat: you could work with MasterDuke++ to create a tool.

[19:34] <eveo> buggable: eco DBIish

[19:34] <buggable> eveo, DBIish 'Database connectivity for Perl 6': https://github.com/perl6/DBIish 3 other matching results: https://modules.perl6.org/#q=DBIish

[19:36] <ufobat> eveo, my profiling foo is no more then using nytprof :/

[19:36] *** dolmen_ joined
[19:37] <eveo> There's an example of SQL query here (might be outdated, as IIRC columns were renamed): https://docs.perl6.org/language/performance.html#Profile_locally

[19:38] <Geth> ¦ doc: a2d9188655 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/performance.pod6

[19:38] <Geth> ¦ doc: Make SQL example easy to copy-paste

[19:38] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a2d9188655

[19:38] <eveo> TIL you can indent =begin =end things in POD6

[19:40] *** jonas2 left
[19:40] <ufobat> huh! i "loose" my time in src/core/Lock.pm

[19:41] <eveo> Hm? A typo somewhere?

[19:42] <eveo> or.. you lose time

[19:42] <ufobat> i mean.. it took far longer then it used to take, and i was wondering why

[19:42] <ufobat> so i tried to profile it

[19:43] <eveo> ufobat: you doing any .kill'ing? or $*KERNEL.signal calls?

[19:43] <ufobat> and Settings::src/core/Lock.pm has a huge time in Exclusive Time

[19:43] <ufobat> no, not really

[19:43] <ufobat> i started to use Log::Any

[19:43] <eveo> buggable: eco Log::Any

[19:43] <buggable> eveo, Log::Any 'Generate and handle logs with pipelines, filters and formatters.': https://github.com/jsimonet/log-any

[19:44] * eveo shrugs

[19:44] *** synopsebot6 joined
[19:44] *** ChanServ sets mode: +v synopsebot6

[19:45] <timotimo> ufobat: time taken waiting for a lock to become free is in that number

[19:45] <eveo> Ahh

[19:46] <ufobat> *nod*

[19:46] <ufobat> i just need to figure out which and why :)

[19:46] <eveo> ufobat: is that with Bailador?

[19:46] <ufobat> jup

[19:47] <ufobat> using Log::Any increased the time for the test cases, round about double the time nwo

[19:48] <eveo> ufobat: "now" do you mean by adding the module or by upgrading rakudo?

[19:48] <timotimo> ufobat: https://github.com/timo/p6profiler-tools - this can generate a pretty svg from your stuff

[19:48] <timotimo> also, you can use telemeh to figure out which threads are holding locks for how long

[19:48] <ufobat> now be using Log::Any, not changeing rakudo

[19:48] <eveo> Ah, *phew* :)

[19:48] <timotimo> though it won't give you a "friendly" name for the threads involved

[19:49] <ufobat> telemeh?

[19:49] <timotimo> yup, if you Configure.pl your moarvm with --telemeh you get that

[19:50] <timotimo> you can set MVM_TELEMETRY_LOG to a file

[19:50] <eveo> Well, I see it's using a Channel for stuff and channel uses a lock to protect stuff, so that's probably where you're ghetting your src/core/Lock times from

[19:50] <timotimo> the svg graph thing will tell you how much time in lock is spent when coming from what other function

[19:50] * eveo relocates

[19:51] *** eveo left
[19:53] <ufobat> okay. i keep that in mind

[19:53] <ufobat> ill try to mediate and test a bit to first understand what i am realyl doing ;)

[19:55] *** mniip joined
[19:57] <ufobat> https://github.com/ufobat/log-any/blob/master/lib/Log/Any.pm6#L116 <- this place is were 50% of my adittional time comes from

[19:58] <timotimo> you could use .starts-with instead of that regex match

[19:59] <timotimo> i wonder if CLIENT:: can help you there

[19:59] *** cpage_ left
[20:00] <ufobat> sorry, timotimo, i ment the whole unless block

[20:00] <ufobat> maybe its the Backtrace.new that takes Locks as well?

[20:01] <timotimo> i don't think it would

[20:01] <timotimo> did you use the graphviz tool from the profiler tools on your sql data?

[20:01] <timotimo> that would show you precisely where the lock time comes from

[20:04] *** TEttinger joined
[20:04] <ufobat> not yet, i am installing dependencies

[20:07] <ufobat> next dependecy ;)

[20:08] <ufobat> however - providing :category("foo") reduced one testcase by 6sec

[20:09] *** chansen_ joined
[20:12] *** kyan left
[20:12] <timotimo> i see

[20:12] <ufobat> which binary am i supposed to use?

[20:12] <ufobat> i am still on dependencies, but i am afarid i am running out of time today. and will continue tomorrow

[20:14] <ufobat> s/binary/one of your scripts/

[20:15] <timotimo> the graphviz one

[20:15] <timotimo> the other one is so vastly unfinished that it hardly does anything

[20:16] <ufobat> did i get this right, i run it directly on the sql thats dumped from profile-filename=03.sql ?

[20:16] <ufobat> no

[20:16] <ufobat> ah!

[20:16] <ufobat> i need to import this into a sqlite db, right?

[20:16] <ufobat> anyway, time over ;)

[20:16] <timotimo> yeah, sqlite3 -init the_thing_it_spat_out foobar,sqlite

[20:16] <ufobat> thank you all for the help 

[20:16] <timotimo> er, foobar.sqlite

[20:17] <timotimo> or sqlite3?

[20:17] <timotimo> yeah, .sqlite3 is the extension it wants

[20:17] <timotimo> it could totally invoke sqlite3 for you if you feed it the text instead

[20:19] <Geth> ¦ doc: c21bf569ef | (Jan-Olof Hendig)++ | doc/Type/Iterator.pod6

[20:19] <Geth> ¦ doc: Adjusted formatting

[20:19] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c21bf569ef

[20:21] *** andrzejk_ left
[20:22] *** andrzejk_ joined
[20:25] *** kyan joined
[20:26] *** gensym joined
[20:28] *** travis-ci joined
[20:28] <travis-ci> Doc build errored. Zoffix Znet 'Make SQL example easy to copy-paste'

[20:28] <travis-ci> https://travis-ci.org/perl6/doc/builds/244662786 https://github.com/perl6/doc/compare/fedda5e11be3...a2d9188655f4

[20:28] *** travis-ci left
[20:34] *** cpage_ joined
[20:38] <hythm> hello, is there a website to execute perl6 code online?

[20:40] <moritz> hythm: http://ideone.com does

[20:40] <lizmat> wasn't there an .io site somewhere as well ?

[20:42] *** itaipu left
[20:43] *** eveo joined
[20:43] <eveo> huggable: glot.io

[20:43] <huggable> eveo, Run Perl 6 in your browser: https://tio.run/nexus/perl6 or https://glot.io

[20:44] <eveo> hythm: ^ these teo as well. Also, find any code example on perl6.party it's editable (uses glot.io under the hood)

[20:44] <hythm> ideonde.com seems broken, ran say "Hello, World!" and still.... ￼	Waiting for compilation 

[20:45] <hythm> glot.io  works great, Thanks guys!

[20:47] <eveo> Any time

[20:48] <eveo> huggable: glot

[20:48] <huggable> eveo, nothing found

[20:48] <eveo> buggable: eco glot

[20:48] <buggable> eveo, GlotIO 'Use glot.io API: pastebin allowing execution of code': https://github.com/zoffixznet/perl6-GlotIO

[20:49] <eveo> ^ there's also a Perl 6 impl of its api

[20:51] *** eveo left
[21:00] *** Cabanossi left
[21:00] *** kyan left
[21:01] *** Cabanossi joined
[21:03] *** mcmillhj left
[21:06] *** andrzejk_ left
[21:09] *** travis-ci joined
[21:09] <travis-ci> Doc build errored. Jan-Olof Hendig 'Adjusted formatting'

[21:09] <travis-ci> https://travis-ci.org/perl6/doc/builds/244677549 https://github.com/perl6/doc/compare/a2d9188655f4...c21bf569ef52

[21:09] *** travis-ci left
[21:12] *** cpage_ left
[21:14] *** kyan joined
[21:15] *** dolmen_ left
[21:21] *** mienaikage left
[21:21] *** committable6 left
[21:21] *** unclechu left
[21:21] *** bisectable6 left
[21:21] *** greppable6 left
[21:21] *** evalable6 left
[21:21] *** benchable6 left
[21:21] *** yoleaux left
[21:21] *** wtw left
[21:21] *** daxim left
[21:21] *** kybr left
[21:21] *** b2gills left
[21:21] *** statisfiable6 left
[21:21] *** unicodable6 left
[21:21] *** quotable6 left
[21:21] *** bloatable6 left
[21:21] *** masak left
[21:21] *** jcallen left
[21:21] *** f3ew left
[21:21] *** arnsholt left
[21:21] *** f3ew_ joined
[21:21] *** masak joined
[21:21] *** Peter_R joined
[21:21] *** arnsholt joined
[21:21] *** jcallen joined
[21:21] *** kybr joined
[21:21] *** daxim joined
[21:22] *** masak is now known as Guest62702

[21:22] *** b2gills joined
[21:24] *** adrusi left
[21:24] *** espadrine left
[21:24] *** mcmillhj joined
[21:26] *** mienaikage joined
[21:26] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/06/19/2017-25-perl-6-books/

[21:26] *** adrusi joined
[21:26] *** yoleaux joined
[21:26] *** ChanServ sets mode: +v yoleaux

[21:26] *** wtw joined
[21:28] *** unclechu joined
[21:29] *** mcmillhj left
[21:32] *** wamba left
[21:33] *** grumble left
[21:36] *** Sgeo_ left
[21:36] *** grumble joined
[21:38] <El_Che> lizmat: there is a "foo" befoe the "for ^1000"

[21:40] *** mcmillhj joined
[21:41] *** cpage_ joined
[21:43] *** wtw left
[21:43] *** yoleaux left
[21:44] *** mcmillhj left
[21:45] *** yoleaux joined
[21:45] *** ChanServ sets mode: +v yoleaux

[21:45] *** itaylor57 left
[21:46] *** itaylor57 joined
[21:47] *** setty1 left
[21:48] *** wtw joined
[21:56] *** mcmillhj joined
[21:59] <[Coke]> eveo: sorry I wandered away; if they got fixed on the regular, I'd have nothing to complain about. I'm not seeing the doc site getting a ton of updates with the current setup, so I'm not sure who we'd be stifling. But we've had that argument before.

[22:00] <[Coke]> I would rather have edits queued and reviewed than immediately pushed into production.

[22:00] *** kyan left
[22:01] <[Coke]> A lot of that effort can be automated, and actually mirros the eventual plan for the rakudo repository that was proposed by jnthn around Christmas tmie.

[22:01] *** mcmillhj left
[22:01] <[Coke]> Not going to set anything up yet. I'll see if I can map something out that wouldn't impede proposed changes made through the UI.

[22:12] *** mcmillhj joined
[22:13] *** kyan joined
[22:14] *** rindolf left
[22:16] *** mcmillhj left
[22:21] *** ccakes_ is now known as ccakes

[22:21] *** ufobat left
[22:29] <samcv> if you do: run('echo', 'hi', :out); and don't set it to a variable. the filehandle will stay open FOREVER yes?

[22:30] *** dolmen_ joined
[22:33] *** dolmen_ left
[22:38] *** eveo joined
[22:39] *** Sgeo joined
[22:41] <eveo> lizmat++ good weekly. A couple of corrections, if you have the time. The for ^N {} opt fix was done by timotimo++, not jnthn++, although jnthn++ did some work in that area as well ( https://github.com/rakudo/rakudo/commit/46b11f54c03511a96d4db08213d55bc9c78623c7 ). Also it's Proc that got a major overhaul (it's now written in terms of Proc::Async), I don't think Proc::Async got a rehaul (other than being fixed

[22:41] <yoleaux> 22:17Z <AlexDaniel> eveo: so is RT #131592 resolved now?

[22:41] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131592

[22:41] <eveo> on JVM), just some std binding methods or so.

[22:41] *** mcmillhj joined
[22:42] <eveo> .tell AlexDaniel no, that ticket is for a segv that should be fixed soon. The stuff I fixed was for lost STDIN data and there wasn't a ticket and tests already existed (they were flopping)

[22:42] <yoleaux> eveo: I'll pass your message to AlexDaniel.

[22:42] <AlexDaniel> .

[22:42] <yoleaux> 22:42Z <eveo> AlexDaniel: no, that ticket is for a segv that should be fixed soon. The stuff I fixed was for lost STDIN data and there wasn't a ticket and tests already existed (they were flopping)

[22:43] <AlexDaniel> ah okay

[22:44] <eveo> samcv: no, all handles get closed when garbage collected and in this case it's just a Channel fed by on Proc::Async.stdout

[22:44] <samcv> ok

[22:44] <samcv> so if it's not stored in a variable it gets gcd

[22:45] <eveo> I'm no expert, but I think so.

[22:45] *** ChoHag left
[22:46] *** mcmillhj left
[22:46] *** mscha left
[22:46] *** ChoHag joined
[22:46] <eveo> This is likely fixed now https://rt.perl.org/Ticket/Display.html?id=131026#ticket-history

[22:48] <eveo> And this is fixed except for one case in bdfoy's code where stuff is given to perl6 -c I'm not sure why the code doesn't get set right; might be something with piping to /dev/null and maybe something to do with piping **perl 6's stderr to dev null** https://rt.perl.org/Ticket/Display.html?id=125757#ticket-history

[22:48] <eveo> m: say Date.new("2017-07-14") - Date.now

[22:48] <camelia> rakudo-moar 6b634a: OUTPUT: «No such method 'now' for invocant of type 'Date'. Did you mean any of these?␤    new␤    not␤␤  in block <unit> at <tmp> line 1␤␤»

[22:48] <eveo> m: say Date.new("2017-07-14") - Date.todayu

[22:48] <camelia> rakudo-moar 6b634a: OUTPUT: «No such method 'todayu' for invocant of type 'Date'. Did you mean 'today'?␤  in block <unit> at <tmp> line 1␤␤»

[22:48] <eveo> m: say Date.new("2017-07-14") - Date.today

[22:48] <camelia> rakudo-moar 6b634a: OUTPUT: «24␤»

[22:48] <eveo> .in 24d Zoffix fix xt on docbuild

[22:48] <yoleaux> eveo: I'll remind you on 13 Jul 2017 22:48Z

[22:50] <lizmat> eveo: corrections made, eveo++

[22:52] *** mcmillhj joined
[22:53] <eveo> [Coke]: I'll fix then all the xt tests as part of rakudo's release process. We might not have a whole load of contributions flying in, but still, it's pretty distracting to be called in to hunt for some typo, and *new contributors* who don't know much about our setup might be put off from contributing at all if the process is difficult (and keep in mind, contributors to docs might feel encouraged to contribute

[22:53] <eveo> to other repos). The problem with the setup is there's no clear protocol for what to do *when stuff breaks*. Who fixes it? A contributor who might not appear for months? The setup jnthn++'s pre-Christmas proposal deliniates suffers from the same problem. As a commit might depend on nqp/MoarVM bumps + it's a bit tough to pin it to roast's state. I think the current system is sufficiently reliable: if a dev

[22:53] <eveo> feels their commit might break something they do it in a branch. 

[22:54] <eveo> lizmat++ thanks

[22:54] *** rouking joined
[22:54] <rouking> Hey

[22:54] <eveo> \o

[22:55] <rouking> Wondering about some new syntax I haven't seen before--particularly the colon before post in this:

[22:55] <rouking> `$request = HTTP::Request.new(:post($!base-url~$url));`

[22:55] <rouking> $request = HTTP::Request.new(:post($!base-url~$url));

[22:55] <eveo> + we have Toaster now that, if automated, can make nom branch even stabler

[22:55] <eveo> rouking: it's new in Perl 6, but now new to Perl 6

[22:55] <eveo> rouking: same as post => $!base-url~$url

[22:56] <eveo> m: my $b = 'f'; my $u = 'oo'; say [post => $b ~ $u]

[22:56] <camelia> rakudo-moar 6b634a: OUTPUT: «[post => foo]␤»

[22:56] <eveo> huggable: colonpairs

[22:56] <huggable> eveo, All the shortcuts of colonpairs: https://twitter.com/zoffix/status/839807414211854337

[22:56] <eveo> rouking: colonpairs are ubiquitous in Perl 6, so there's lots of shortcuts to write them ^

[22:57] *** mcmillhj left
[22:57] *** nadim_ left
[22:58] * eveo calls it a day

[22:58] <eveo> \o

[22:58] *** eveo left
[22:59] <timotimo> wait, Proc::Async.stdout uses channel? i would have expected supply (except if you just coerced that supply to a channel in which case that's splendid)

[23:00] <ugexe> .tap: { $channel.send($_) }

[23:00] <timotimo> no need for that

[23:01] *** mcmillhj joined
[23:01] <timotimo> m: my $s = supply { for ^20 { emit $_ } }; for $s.Channel -> $v { say "received $v" }

[23:01] <camelia> rakudo-moar 6b634a: OUTPUT: «received 0␤received 1␤received 2␤received 3␤received 4␤received 5␤received 6␤received 7␤received 8␤received 9␤received 10␤received 11␤received 12␤received 13␤received 14␤received 15␤received 16␤received 17␤received 18…»

[23:01] <ugexe> channel doesn't have a way to react to close/quit

[23:02] <ugexe> .tap: { $channel.send($_) }, quit => { ... };

[23:03] <ugexe> er, Proc::Async uses a supply afaik. but Proc uses the method above with a channel^

[23:03] <jnthn> The Channel serves as a buffer

[23:04] <jnthn> Since the reads are done synchronous, but Proc::Async is spewing stuff out as it arrives

[23:04] <jnthn> So we shove it in the channel, and then synchronous reads just read off the channel, which nicely handles the blocking too.

[23:05] <ugexe> why isn't .act used instead of .tap?

[23:05] <jnthn> Sleep time; 'night o/

[23:05] <jnthn> ugexe: Because they're the same almost always

[23:05] *** mcmillhj left
[23:06] <jnthn> (You *can* make a Supply that doesn't enforce delivering values one at a time, but you have to work pretty hard to make that happen.)

[23:06] *** |oLa| left
[23:07] <jnthn> The only built-in way to achieve it is making a Supplier and calling something like .unsanitized-Supply

[23:07] <jnthn> Everything else is a serial Supply

[23:07] <ugexe> ah, i was thinking it would help with, say, .act: { $str ~= $_ }

[23:08] <jnthn> No, for Proc::Async it doesn't matter if you use .tap or .act

[23:09] *** cdg_ left
[23:09] <ugexe> cool, thanks

[23:10] * jnthn looks at the thermometer, sighs, and figures he'll give sleep a go anyway...

[23:10] *** BenGoldberg joined
[23:10] <timotimo> good luck!

[23:10] <jnthn> 'night o/

[23:10] <timotimo> i expect many of us in europe are going to have a bad time WRT sleep the next days ;(

[23:11] *** mcmillhj joined
[23:15] <timotimo> thursday it'll be 35 to 38 (feels like 39 to 42) deg celsius ;(

[23:16] *** mcmillhj left
[23:22] *** mcmillhj joined
[23:26] *** mcmillhj left
[23:30] *** pochi_ joined
[23:30] *** pochi left
[23:33] *** mcmillhj joined
[23:38] *** mcmillhj left
[23:38] *** lucasb left
[23:41] *** ChoHag left
[23:42] *** sufrostico left
[23:43] *** sufrostico joined
[23:49] *** mcmillhj joined
[23:54] *** mcmillhj left
[23:56] *** ramortegui joined
