[00:01] *** floutenvy joined
[00:04] *** espadrine left
[00:13] *** raschip left
[00:16] *** floutenvy left
[00:16] *** jraglin left
[00:20] *** pyrimidine left
[00:23] <notviki> That just reminds me of Karl Pilkington... 

[00:24] *** cpage_ joined
[00:24] *** cpage_ left
[00:25] <AlexDaniel> samcv: 1.3GB space remaining :)

[00:26] *** jraglin joined
[00:32] *** Actualeyes joined
[00:33] *** aborazmeh joined
[00:33] *** aborazmeh left
[00:33] *** aborazmeh joined
[00:34] *** troys is now known as troys_

[00:36] *** wamba left
[00:37] *** dalek left
[00:37] *** dalek joined
[00:37] *** ChanServ sets mode: +v dalek

[00:37] <samcv> heh

[00:38] *** aborazmeh left
[00:39] *** jraglin_ joined
[00:39] *** aborazmeh joined
[00:39] *** aborazmeh left
[00:39] *** aborazmeh joined
[00:41] *** pyrimidine joined
[00:42] *** jraglin left
[00:47] *** jraglin_ left
[00:47] *** jraglin_ joined
[00:50] *** cdg left
[00:51] *** BenGoldberg joined
[00:53] *** astj joined
[00:57] *** cpage_ joined
[01:01] *** cpage_ left
[01:03] *** aborazmeh left
[01:05] *** labster left
[01:08] *** cpage_ joined
[01:10] *** jraglin_ left
[01:10] *** jraglin_ joined
[01:10] *** aborazmeh joined
[01:10] *** aborazmeh left
[01:10] *** aborazmeh joined
[01:11] *** Coleoid joined
[01:13] *** troys_ is now known as troys

[01:19] *** shayan_ left
[01:20] *** shayan_ joined
[01:20] *** shayan_ left
[01:22] *** pyrimidine left
[01:24] *** jraglin joined
[01:25] *** shayan_ joined
[01:26] *** Ben_Goldberg joined
[01:26] *** BenGoldberg left
[01:26] *** Ben_Goldberg is now known as BenGoldberg

[01:27] *** jraglin_ left
[01:27] <neewbie> can i insert a char in a string giving the index where i want to put the char? 

[01:28] <timotimo> try for example substr-rw for that

[01:29] <neewbie> thanks

[01:29] <neewbie> but i want to add the char

[01:29] <TimToady> you can assign to the substr-rw

[01:30] <garu> where can I find the discussion for (or just the reasoning behind) the decision to remove the 'returns' form from the syntax (in the future)?

[01:30] <TimToady> m: my $s = 'abc'; substr-rw($s,2,0) = 'd'; $s.say

[01:30] <camelia> rakudo-moar 6703b4: OUTPUT¬´abdc‚ê§¬ª

[01:30] <garu> not trying to push for or against it, I'm just curious

[01:31] <neewbie> wow. thanks!

[01:33] *** Ben_Goldberg joined
[01:33] *** BenGoldberg left
[01:33] *** Ben_Goldberg is now known as BenGoldberg

[01:36] <TimToady> garu: see https://irclog.perlgeek.de/perl6/2016-12-03#i_13674580 for some of it

[01:43] *** geraud left
[01:52] *** jraglin left
[01:52] *** jraglin joined
[01:57] <neewbie> how can i make this code look more like perl 6 https://gist.github.com/anonymous/742781d1e69cf432a753f1b8821f8209

[01:57] <neewbie> ?

[02:00] *** Gasher left
[02:03] *** _Vasyl joined
[02:04] *** lizmat_ joined
[02:04] *** labster joined
[02:04] <TimToady> seems like perfectly fine p6 to me

[02:05] *** pyrimidine joined
[02:05] *** troys is now known as troys_

[02:06] <TimToady> if I was gonna recognize more than just ( or ), I might consider binding to $_ instead of $v and using "when '('" etc. instead

[02:07] <TimToady> but if it works, then it's sufficiently like perl 6 :)

[02:12] <neewbie> but how could i use $_ if i want to use the index too?

[02:13] <TimToady> -> $i, $_ works fine

[02:13] <neewbie> i see, but in this case you're just renaming the variable, right? $_ is nothing more special than $v

[02:13] <TimToady> except that 'when' implicitly matches against $_

[02:14] <neewbie> hmmmmmm

[02:14] <TimToady> so you don't have to say 'eq'

[02:15] <neewbie> I'll try to refactor tomorrow

[02:15] <neewbie> thank you very much for helping me

[02:15] <neewbie> and sorry for annoying with stupid questions

[02:15] <neewbie> bye

[02:17] *** neewbie left
[02:23] *** shayan_ left
[02:30] *** pyrimidine left
[02:30] *** pyrimidine joined
[02:32] *** BenGoldberg left
[02:33] *** kalkin- left
[02:34] *** kalkin- joined
[02:34] <astj> Hi. I found loading modules dynamically using `require` sometimes doesn't work in recent version of MoarVM. Does anyone know about this behavior?

[02:34] *** geraud joined
[02:34] <astj> Here are codes to reproduce : https://github.com/skaji/Crust-issue (Thanks to skaji_ )

[02:34] *** BenGoldberg joined
[02:37] <geekosaur> it's been mentioned but I haven

[02:37] <geekosaur> t seen a ticket go by yet

[02:37] <geekosaur> huggable: rakudobug

[02:37] <huggable> geekosaur, [email@hidden.address] or use perl6 query on http://rt.perl.org ; see https://github.com/rakudo/rakudo/#reporting-bugs

[02:38] <geekosaur> believed to be related to lexical module loading

[02:38] <astj> I think so too < believed to be related to lexical module loading

[02:38] <astj> Oh I forgot to mention, those codes above works fine in 2016.11.

[02:45] *** ilbot3 left
[02:45] <astj> Should I report it to rakudobug?

[02:47] *** ilbot3 joined
[02:51] <geekosaur> yes

[02:53] <astj> Ok, I'll do it. Thank you.

[03:04] *** pyrimidine left
[03:05] *** rpburkholder left
[03:11] *** aborazmeh left
[03:13] *** johnjohn101 joined
[03:13] <Geth> ecosystem: dffeadfaee | faraco++ | META.list

[03:13] <Geth> ecosystem: update META.info to META6.json

[03:13] <Geth> ecosystem: review: https://github.com/perl6/ecosystem/commit/dffeadfaee

[03:20] *** xtreak joined
[03:29] *** pyrimidine joined
[03:31] *** labster left
[03:31] *** labster joined
[03:34] *** skids joined
[03:34] <astj> Reported https://rt.perl.org/Public/Bug/Display.html?id=130535

[03:35] <astj> geekosaur: Thank you for your advice! 

[03:36] *** troys_ is now known as troys

[03:43] <garu> TimToady: thanks! sounds very reasonable

[03:45] <garu> on a completely unrelated subject, anyone knows a simple way to dynamically name a "has"? 

[03:50] <TimToady> you could probably do something with 'method FALLBACK'

[03:50] <garu> for example, if I have class A { submethod BUILD(*%args) { ... }} I'd like to "my $a = A.new( foo => 42 ); say $a.foo" and have it print 42

[03:51] <TimToady> or maybe use 'handles' to delegate to a hash

[03:51] <garu> I think I'm missing some basic perl 6 principles yet, sorry :(

[03:52] <garu> I know about self.^add_attribute() but I don't think it's doing it for me

[03:52] <TimToady> is there some reason you don't just want to derive from a Hash?

[03:53] <TimToady> or compose one with 'has', then delegate unrecognized methods via FALLBACK

[03:54] <garu> ah, that would probably work!

[03:54] <garu> would it be idiomatic?

[03:54] <garu> I mean

[03:56] <garu> the fact that I can add a "has" inside a condition made me wonder if it would be ok to do something like if $attr-name { has $.{$attr-name} is ...; }

[03:56] <TimToady> that's probably not doing what you think it's doing

[03:57] <garu> of course, $.{$attr-name} does not do what I mean, I just wanted to get the idea across :)

[03:57] <TimToady> 'has' is pure declaration, so it's gonna ignore any surrounding conditional

[03:57] <garu> ah

[03:57] <garu> dammit :)

[03:57] <garu> I didn't know that, thanks!

[03:58] <TimToady> that's why it's called a 'declarator', like 'my'

[03:58] <garu> I'll just resort to FALLBACK then

[03:58] <garu> thanks!

[03:58] *** cpage_ left
[04:00] *** geekosaur left
[04:01] *** geekosaur joined
[04:04] <BenGoldberg> m: class Foo { has $.x = 3; has $.y = 4; method bar($attr-name) { self."$attr-name" } }; Foo.new.bar("x").say;

[04:04] <camelia> rakudo-moar 6703b4: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Quoted method name requires parenthesized arguments. If you meant to concatenate two strings, use '~'.‚ê§at <tmp>:1‚ê§------> 3thod bar($attr-name) { self."$attr-name"7‚èè5 } }; Foo.new.bar("x").say;‚ê§¬ª

[04:04] <BenGoldberg> m: class Foo { has $.x = 3; has $.y = 4; method bar($attr-name) { self."$attr-name"() } }; Foo.new.bar("x").say;

[04:04] <camelia> rakudo-moar 6703b4: OUTPUT¬´3‚ê§¬ª

[04:04] <BenGoldberg> m: class Foo { has $.x = 3; has $.y = 4; method bar($attr-name) { self."$attr-name"() } }; Foo.new.bar("y").say;

[04:04] <camelia> rakudo-moar 6703b4: OUTPUT¬´4‚ê§¬ª

[04:11] *** pyrimidine left
[04:25] *** geekosaur left
[04:26] *** llfourn joined
[04:27] *** geekosaur joined
[04:27] *** xtreak left
[04:29] *** xtreak joined
[04:32] *** BenGoldberg left
[04:35] *** cpage_ joined
[04:41] *** pyrimidine joined
[05:04] <dalek> DBIish: 6b4bb97 | (Kaare Rasmussen)++ | / (7 files):

[05:04] <dalek> DBIish: POC Dynamic types

[05:04] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/6b4bb97b37

[05:04] <dalek> DBIish: 416b4db | (Kaare Rasmussen)++ | / (2 files):

[05:04] <dalek> DBIish: Change sub to callable.

[05:04] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/416b4db3b3

[05:04] <dalek> DBIish: 6223169 | (Kaare Rasmussen)++ | / (6 files):

[05:04] <dalek> DBIish: Change the type identifier to be a type object instead of a string.

[05:04] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/622316917b

[05:04] <dalek> DBIish: c070886 | (Kaare Rasmussen)++ | / (7 files):

[05:04] <dalek> DBIish: Change the type conversion to hash association.

[05:04] <dalek> DBIish: Allow pg types to be dynamic. This is inmportant for e.g. enums

[05:04] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/c070886d91

[05:04] <dalek> DBIish: 92abd9b | (Salvador Ortiz)++ | / (6 files):

[05:04] <dalek> DBIish: Merge pull request #83 from kaare/master

[05:04] <dalek> DBIish: 

[05:04] <dalek> DBIish: Dynamic types handling

[05:04] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/92abd9ba31

[05:14] *** pyrimidine left
[05:14] *** pyrimidine joined
[05:19] *** pyrimidine left
[05:22] *** khw left
[05:26] *** jraglin left
[05:30] *** awwaiid left
[05:36] *** pyrimidine joined
[05:45] *** Cabanossi left
[05:47] *** Cabanossi joined
[05:47] *** shellseek joined
[05:48] <shellseek> hi

[05:48] *** jraglin joined
[05:48] <shellseek> h

[05:50] *** shellseek left
[05:53] *** skids left
[06:04] *** johnjohn101 left
[06:17] <AlexDaniel> .tell MasterDuke pull request sent: https://github.com/MasterDuke17/Text-Diff-Sift4/pull/4

[06:17] <yoleaux> AlexDaniel: I'll pass your message to MasterDuke.

[06:21] *** CIAvash joined
[06:27] *** llfourn left
[06:28] *** troys left
[06:30] *** cyphase left
[06:31] *** bwisti left
[06:35] *** cyphase joined
[06:38] *** darutoko joined
[06:39] *** xtreak left
[06:40] *** bjz joined
[06:42] *** xtreak joined
[06:46] *** bjz left
[06:48] <AlexDaniel> what was the module for ‚Äúis cached‚Äù?

[06:48] <AlexDaniel> or‚Ä¶ what was the actual problem with ‚Äúis cached‚Äù‚Ä¶

[06:48] <samcv> say(nqp::getstrbyname('Santa Claus: light skin tone')) #> üéÖüèª

[06:48] <samcv> i got it working :D

[06:48] <samcv> coming soon!

[06:49] <AlexDaniel> found the module https://github.com/azawawi/perl6-memoize

[06:49] <samcv> now just have to clean some things up

[06:49] *** bjz joined
[06:49] <samcv> can't believe I got it all working in a day but yey

[06:52] *** RabidGravy joined
[06:54] *** bjz left
[06:56] *** Resol joined
[07:00] *** jraglin left
[07:03] *** wamba joined
[07:05] *** domidumont joined
[07:05] *** cibs left
[07:07] *** cibs joined
[07:10] *** domidumont left
[07:10] *** domidumont joined
[07:23] *** llfourn joined
[07:28] *** Ven joined
[07:28] *** ufobat joined
[07:28] *** llfourn left
[07:30] *** bjz joined
[07:43] *** Resol left
[08:06] *** llfourn joined
[08:09] *** ufobat left
[08:11] *** xtreak left
[08:14] *** xtreak joined
[08:19] * lizmat_ clickbaits https://p6weekly.wordpress.com/2017/01/09/2017-02-dogfooding-and-powerbotting/

[08:19] <moritz> lizmat_++

[08:19] <moritz> and lizmat++ too :-)

[08:21] *** lizmat_ is now known as lizmat

[08:21] <lizmat> :-)

[08:22] *** wamba left
[08:26] *** zakharyas joined
[08:28] <CIAvash> lizmat++

[08:29] *** ufobat joined
[08:35] *** wamba joined
[08:44] *** pyrimidine left
[08:45] *** g4 joined
[08:45] *** g4 left
[08:45] *** g4 joined
[08:48] *** llfourn left
[08:51] *** domidumont left
[08:52] *** domidumont joined
[08:58] *** hchienjo joined
[08:59] <hchienjo> m: say 'Test';

[09:00] <camelia> rakudo-moar 6703b4: OUTPUT¬´Test‚ê§¬ª

[09:00] <hchienjo> Hello guys. Why I am getting different outputs when I do this...

[09:00] <hchienjo> m: ('a'...'z').combinations(2).join('')

[09:01] <camelia> rakudo-moar 6703b4: ( no output )

[09:01] <hchienjo> m: ('a'...'z').combinations(2).join('').say

[09:01] <camelia> rakudo-moar 6703b4: OUTPUT¬´a ba ca da ea fa ga ha ia ja ka la ma na oa pa qa ra sa ta ua va wa xa ya zb cb db eb fb gb hb ib jb kb lb mb nb ob pb qb rb sb tb ub vb wb xb yb zc dc ec fc gc hc ic jc kc lc mc nc oc pc qc rc sc tc uc vc wc xc yc zd ed fd gd hd id jd kd ld md nd od pd qd‚Ä¶¬ª

[09:01] <hchienjo> and this

[09:01] <hchienjo> m: say ('a'...'z').combinations(2).map({ .join('') });

[09:01] <camelia> rakudo-moar 6703b4: OUTPUT¬´(ab ac ad ae af ag ah ai aj ak al am an ao ap aq ar as at au av aw ax ay az bc bd be bf bg bh bi bj bk bl bm bn bo bp bq br bs bt bu bv bw bx by bz cd ce cf cg ch ci cj ck cl cm cn co cp cq cr cs ct cu cv cw cx cy cz de df dg dh di dj dk dl dm dn do dp dq ‚Ä¶¬ª

[09:02] <hchienjo> The first form has an 'a' and a 'z' at the beginning and at the end respectively. I don't know how they come about.

[09:03] *** jonas1 joined
[09:04] <moritz> m: say ('a' ... 'c').combinations(2).eager.perl

[09:04] <camelia> rakudo-moar 6703b4: OUTPUT¬´(("a", "b"), ("a", "c"), ("b", "c"))‚ê§¬ª

[09:04] <moritz> hchienjo: the .join simply stringifies the inner lists, which adds a space in the middle

[09:05] <moritz> so it's really "a b" ~ "a c" ~ "a d" which becomes "a ba ca da..."

[09:09] *** pyrimidine joined
[09:11] <hchienjo> moritz: You are right. Thanks.

[09:13] *** dakkar joined
[09:16] *** pyrimidine left
[09:17] *** wamba left
[09:23] *** zakharyas left
[09:27] *** ggoebel left
[09:30] *** CIAvash left
[09:35] *** Unavowed left
[09:35] *** freeze left
[09:35] *** Unavowed joined
[09:35] *** freeze joined
[09:37] *** mst left
[09:37] *** nine left
[09:37] *** saki_ left
[09:37] *** profan left
[09:37] *** eater left
[09:37] *** diego_k left
[09:37] *** ilbelkyr left
[09:37] *** musca left
[09:37] *** jonadab left
[09:37] *** Kaffe left
[09:37] *** broquaint left
[09:37] *** mspo left
[09:37] *** jnthn left
[09:37] *** Util left
[09:37] *** kst left
[09:37] *** jnthn joined
[09:37] *** Util joined
[09:37] *** jonadab joined
[09:37] *** saki joined
[09:37] *** diegok joined
[09:37] *** profan_ joined
[09:37] *** mst joined
[09:37] *** nine_ joined
[09:37] *** broquaint joined
[09:37] *** mspo joined
[09:37] *** Kaffe joined
[09:37] *** ilbelkyr joined
[09:38] *** eater joined
[09:38] *** musca joined
[09:38] *** jantore left
[09:38] *** statisfiable6 left
[09:38] *** bisectable6 left
[09:38] *** benchable6 left
[09:38] *** unicodable6 left
[09:38] *** evalable6 left
[09:38] *** committable6 left
[09:38] *** revere left
[09:38] *** tomaw left
[09:38] *** Gothmog_ left
[09:38] *** b2gills left
[09:38] *** bitmap left
[09:38] *** yeltzooo left
[09:38] *** salparadise left
[09:38] *** jervo left
[09:38] *** revere joined
[09:38] *** Gothmog_ joined
[09:38] *** jantore joined
[09:39] *** bitmap joined
[09:39] *** camelia left
[09:39] *** Alikzus left
[09:39] *** forkbomb left
[09:39] *** kmwallio left
[09:39] *** captain-adequate left
[09:39] *** pochi left
[09:39] *** japhb left
[09:39] *** ponbiki left
[09:39] *** zoosha_ left
[09:39] *** El_Che left
[09:39] *** Hotkeys left
[09:39] *** dylanwh left
[09:39] *** cxreg left
[09:39] *** eythian left
[09:39] *** moritz left
[09:39] *** rjbs left
[09:39] *** luis left
[09:39] *** yeltzooo joined
[09:39] *** zoosha joined
[09:39] *** moritz_ joined
[09:39] *** ggoebel joined
[09:39] *** cxreg2 joined
[09:39] *** pochi joined
[09:39] *** rjbs joined
[09:39] *** Hotkeys_ joined
[09:39] *** captain-adequate joined
[09:39] *** dylanwh joined
[09:39] *** salparadise joined
[09:39] *** b2gills joined
[09:39] *** Alikzus joined
[09:40] *** eythian joined
[09:40] *** kst joined
[09:40] *** camelia joined
[09:40] *** forkbomb joined
[09:40] *** kmwallio joined
[09:41] *** luis joined
[09:41] *** hchienjo left
[09:41] *** ggherdov left
[09:41] *** PotatoGim left
[09:41] *** ChanServ sets mode: +v camelia

[09:42] *** BuildTheRobots left
[09:43] *** PotatoGim joined
[09:43] *** ggherdov joined
[09:44] *** El_Che joined
[09:44] *** ponbiki joined
[09:44] *** japhb joined
[09:44] *** ponbiki is now known as Guest34096

[09:45] *** llfourn joined
[09:45] *** BuildTheRobots joined
[09:47] *** ggherdov left
[09:48] *** ggherdov joined
[09:50] *** llfourn left
[09:55] *** xtreak left
[09:58] *** kst left
[09:58] *** xtreak joined
[10:00] *** kst joined
[10:04] *** committable6 joined
[10:04] *** unicodable6 joined
[10:04] *** evalable6 joined
[10:04] *** ChanServ sets mode: +v committable6

[10:04] *** bisectable6 joined
[10:04] *** ChanServ sets mode: +v unicodable6

[10:04] *** ChanServ sets mode: +v bisectable6

[10:04] *** benchable6 joined
[10:04] *** ChanServ sets mode: +v benchable6

[10:04] *** statisfiable6 joined
[10:08] *** g4 left
[10:13] *** pyrimidine joined
[10:20] *** rindolf joined
[10:24] *** moritz_ is now known as moritz

[10:32] *** RabidGravy left
[10:43] *** xtreak left
[10:46] *** llfourn joined
[10:46] *** RabidGravy joined
[10:47] <AlexDaniel> Geth: I have a gift for ya

[10:48] *** g4 joined
[10:49] <AlexDaniel> Geth: well‚Ä¶ ok‚Ä¶

[10:49] <AlexDaniel> anyway, 15 commits: https://github.com/perl6/whateverable/commits/master ;)

[10:54] *** darutoko left
[10:55] <AlexDaniel> oh, I guess it wasn't json

[10:55] *** lucasb joined
[10:56] <AlexDaniel> commit: post-glr say 42

[10:56] <committable6> AlexDaniel, ¬¶¬´post-glr¬ª: Cannot find this revision (did you mean ‚Äúpre-glr‚Äù?)

[10:56] <AlexDaniel> ;)

[10:57] <AlexDaniel> samcv: ah!

[10:57] <samcv> hi AlexDaniel 

[10:57] <AlexDaniel> samcv: it now only includes useful tags

[10:57] <samcv> yay

[10:57] <AlexDaniel> samcv: zzz say 42

[10:57] <AlexDaniel> oops

[10:57] <AlexDaniel> commit: zzz say 42

[10:57] <committable6> AlexDaniel, ¬¶¬´zzz¬ª: Cannot find this revision (did you mean ‚ÄúLinz‚Äù?)

[10:57] <AlexDaniel> commit: Linz say 42

[10:57] <committable6> AlexDaniel, ¬¶¬´Linz¬ª: 42

[10:57] <AlexDaniel> \o/

[10:57] <lucasb> AlexDaniel: is your name spelled correct in the weekly post?

[10:58] <AlexDaniel> lucasb: that's‚Ä¶ that's some wordpress nickname I guess

[10:58] <lucasb> AlexDaniel: ah, ok :)

[11:00] *** zakharyas joined
[11:01] <AlexDaniel> lucasb: I've actually tweaked it a bit on wordpress so that it appears as just ‚ÄúAlexDaniel‚Äù now (e.g. here https://perl6advent.wordpress.com/2016/12/23/day-23-everything-is-either-wrong-or-less-than-awesome/ ), but not sure what's up with that post

[11:01] <AlexDaniel> in any case it is hilarious :)

[11:02] <AlexDaniel> huggable: princess :is: https://irclog.perlgeek.de/perl6/2016-11-30#i_13657698

[11:02] <huggable> AlexDaniel, Added princess as https://irclog.perlgeek.de/perl6/2016-11-30#i_13657698

[11:03] *** pyrimidine left
[11:09] <notviki> 15 commits you say...

[11:09] <Geth> whateverable/master: 15 commits pushed by AlexDaniel++

[11:09] <Geth> whateverable/master: review: https://github.com/perl6/whateverable/compare/f700410be2‚Ä¶79df620961

[11:10] <notviki> <3 Geth 

[11:13] *** AlexDaniel left
[11:13] <jnthn> notviki: Just switched MoarVM to use Geth also :)

[11:13] <jnthn> notviki++

[11:15] *** faraco joined
[11:15] <faraco> howdy 

[11:16] <notviki> jnthn: it seems to be glitching though? For some of the commits in #moarvm, I don't see it report a review link?

[11:17] *** labster left
[11:17] <notviki> hm... and I don't see any flood warnings from freenode in log :/

[11:20] <jnthn> notviki: Only the very latest report was from Geth

[11:20] <jnthn> I changed it like 10 mins ago 

[11:20] <jnthn> So some in recent backlog will be dalek

[11:20] <jnthn> I only see the glitch in the dalek output

[11:21] <notviki> Oh hah

[11:21] <faraco> quit

[11:21] <notviki> *phew*

[11:21] <faraco> oops

[11:22] <faraco> when look at this `->`, it reminds me to elixir anonymous function. 

[11:23] <faraco> looking*

[11:24] *** TEttinger left
[11:25] *** Geth left
[11:30] *** gearchef left
[11:38] *** pyrimidine joined
[11:38] *** captain-adequate left
[11:41] *** Geth joined
[11:41] *** ChanServ sets mode: +v Geth

[11:45] *** pyrimidine left
[11:48] *** lucasb left
[11:51] *** captain-adequate joined
[11:54] *** lukaramu joined
[11:55] *** raschip joined
[11:59] *** bjz left
[12:06] *** bjz joined
[12:09] *** gearchef joined
[12:11] *** aborazmeh joined
[12:11] *** aborazmeh left
[12:11] *** aborazmeh joined
[12:15] *** pmurias joined
[12:21] *** llfourn left
[12:29] *** hchienjo joined
[12:30] *** hchienjo left
[12:34] <faraco> Is Perl 6 generally ready in production use? At least, sysadmin work?

[12:37] <DrForr> Sure.

[12:37] <raschip> faraco: Yes.

[12:38] <faraco> Awesome.

[12:40] *** curt_ joined
[12:42] *** pyrimidine joined
[12:46] *** pyrimidine left
[12:47] *** cibs left
[12:48] <Woodi> hi today :)

[12:48] <raschip> o/

[12:48] *** cibs joined
[12:49] <Woodi> so now we need #perl6 own blockchain to easily share tuits via IRC... 

[12:50] <Woodi> m: my @tuits = 't' X~ 1..* # it needs to keep current state somehow ;)

[12:50] <camelia> rakudo-moar ed5c86: ( no output )

[12:53] <DrForr> hmm. I was reading about blockchains a few weeks ago ina book sample...

[12:54] *** bjz left
[12:54] *** azawawi joined
[12:54] <azawawi> hi

[12:54] <raschip> oi!

[12:55] <azawawi> :)

[12:55] <DrForr> Local afternoon!

[12:55] *** bjz joined
[12:56] <raschip> faraco: perl6 is the best language for system admin today. It's a way better glue language, by far.

[12:56] <azawawi> Been busy last year in Swift land and had not any time for perl6

[12:57] <azawawi> https://github.com/azawawi/SwiftyZeroMQ :)

[12:57] <azawawi> now im back

[12:57] <lizmat> azawawi welcome back!

[12:58] * azawawi takes a look at Net::ZMQ

[12:58] <DrForr> So what have you brought back for us from Swift? :)

[12:58] <azawawi> perl6 is for fun. Swift is for work :)

[12:59] <arnsholt> azawawi: Not much done

[12:59] <azawawi> also the try statement in swift... i hate it :)

[12:59] <arnsholt> There's a PR, but I got some weird errors with it (and then I ran out of time that day)

[13:00] <azawawi> DrForr, lizmat:  we should learn a thing or two from Swift's native bindings

[13:02] <azawawi> arnsholt: libzmq 4.2.1 is up. I wonder how many distributions are using it.

[13:03] <azawawi> arnsholt: https://packages.debian.org/sid/libzmq3-dev

[13:09] <arnsholt> azawawi: The versioning for ZMQ was maddening

[13:09] <azawawi> arnsholt: i know. Going to fix that :)

[13:09] <arnsholt> Also: libzmq3-dev, depends on libzmq5 (which is apparently 4.2.1-2)???

[13:11] *** wamba joined
[13:11] <El_Che> azawawi: hi, good to see you

[13:11] <azawawi> arnsholt: that's Debian for you :)

[13:11] <azawawi> El_Che: thx

[13:14] <notviki> faraco: what's the actual failures with IRC::Client?

[13:16] <notviki> raschip: why is it the best?

[13:17] <notviki> raschip: considering half the distros don't even have a recent enough version available in repos.

[13:18] <raschip> Well, recent distros have recent versions.

[13:18] <notviki> So it's not the best :P

[13:18] *** faraco left
[13:19] <raschip> Better than P5, even.

[13:19] <raschip> Outdated software doesn't bother sysadmins.

[13:21] <notviki> uhuh... my distro has rakudo 2011.07 in it...

[13:21] <raschip> which distro are you using?

[13:21] <notviki> LTS

[13:21] <notviki> Doesn't matter which.

[13:22] <raschip> Mine has 2016.12-1

[13:23] <arnsholt> azawawi: Also, what cool things have you discovered in Swift's FFI?

[13:25] <azawawi> arnsholt: well, for one thing, you include zmq.h and get all function signature translated into swift on the fly

[13:25] <arnsholt> Well, that's cool, but a *massive* amount of work

[13:25] <azawawi> arnsholt: i.e. no need to write nativecall layer

[13:26] <arnsholt> Not to mention: does that also handle #define constructs?

[13:26] <raschip> azawawi: The problem with not having to write a nativecall definition is that the interfaces don't take advantage of P6's features then.

[13:26] <azawawi> arnsholt: it seems to get that for free because of llvm

[13:26] <arnsholt> ('cause getting those right is several kinds of hairy)

[13:27] <arnsholt> Sounds like something somewhere gets compiled to C first then (or Objective-C, I guess)

[13:27] <azawawi> http://clang.llvm.org/docs/Modules.html#link-declaration

[13:28] <raschip> I can see it would be useful to have another interface that does it, but it's a lot of work and does not substitute nativecall.

[13:28] <[Coke]> samcv: please don't add trailing whitespac to trigger a rebuild. it causes 'make xtest' to fail.

[13:28] <[Coke]> (docs)

[13:28] <arnsholt> azawawi: That's a link thing. Not the same at all

[13:30] <notviki> [Coke]: samcv the proper solution is to teach the build script to watch for updates in atom highlighter repo too https://github.com/perl6/doc/blob/master/util/update-and-sync#L16

[13:30] <[Coke]> notviki: aye.

[13:31] <azawawi> arnsholt: http://clang.llvm.org/docs/Modules.html#header-declaration  # my bad

[13:31] * notviki wonders what's this about: https://github.com/perl6/doc/blob/master/util/update-and-sync#L5

[13:32] <notviki> Bug in rakudobrew? 

[13:32] <notviki> Or someone forgot to run rehash...

[13:32] *** raschip left
[13:32] <azawawi> arnsholt: also https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-XID_13

[13:33] <azawawi> arnsholt: UnsafePointer<Type> is cool

[13:33] <notviki> that path ain't even there no more

[13:35] <Geth> doc: 1f3eaf145b | (Zoffix Znet)++ | util/update-and-sync

[13:35] <Geth> doc: Remove some sort of rakudobrew bug workaround

[13:35] <Geth> doc: 

[13:35] <Geth> doc: By what it does, sounds like there was never any bug but someone

[13:35] <Geth> doc: simply forgot to run `rakudobrew rehash`. The added path is no

[13:35] <Geth> doc: longer even there, so out this goes.

[13:35] <Geth> doc: review: https://github.com/perl6/doc/commit/1f3eaf145b

[13:36] <notviki> .oO( why doesn't rakudobrew run rehash automatically after installing any module... )

[13:36] <moritz> because panda installs the modules, not rakudobrew

[13:36] <[Coke]> notviki, samcv : I updated 'make xtest' to ignore that file for trailing whitespace for now.

[13:36] <notviki> Ah right

[13:36] <moritz> or zef, for that matter

[13:36] *** raschi joined
[13:37] <Geth> doc: 535015c16d | (Will "Coke" Coleda)++ | doc/Language/5to6-perlvar.pod6

[13:37] <Geth> doc: use non-breaking space

[13:37] <Geth> doc: review: https://github.com/perl6/doc/commit/535015c16d

[13:37] <Geth> doc: 9e9ad84e63 | (Will "Coke" Coleda)++ | xt/trailing-whitespace.t

[13:37] <Geth> doc: Don't test file that specifically asks for trailing space.

[13:37] <Geth> doc: review: https://github.com/perl6/doc/commit/9e9ad84e63

[13:37] <notviki> .oO( why doesn't rakudobrew install a wrapper around panda/zef that would run rehash :P )

[13:37] <moritz> it would be awesome if panda and zef had some kind of hooks where rakudobrew could subscribe to notifications of changed modules

[13:37] <arnsholt> azawawi: That does look neat, but it's going to be really hard to implement

[13:38] <notviki> sounds like overengineering.. From what I see, rakudobrew already installs zef as a wrapper

[13:38] <arnsholt> And I'm pretty sure it doesn't use the LLVM module stuff, since it says this works for C in general

[13:38] <notviki> with a comment "# I AM RAKUDOBREW. ALSO POSSIBLY SPARTACUS. OUTLOOK CLOUDY, ASK AGAIN LATER." in it ... :o

[13:38] <timotimo> like everything it makes available through bin/, no?

[13:39] <DrForr> I AM RAKUDOBREW, DESTROYER OF BUILDS. LOOK ON MY COREDUMPS O MIGHTY AND DESPAIR.

[13:40] * notviki suspects DrForr just finished making a Rakudobrew bomb...

[13:40] <timotimo> I AM RAKUDOBUG

[13:40] <DrForr> (crossing the streams a bit there, obviously Xanadu had some rocky waters.)

[13:40] <ufobat> YAY, my company pays for my trip to the fosdem :) whee

[13:40] <notviki> heh lucky

[13:41] <timotimo> fantastic

[13:41] <ufobat> i am looking forward for it. i need a perl6 sticker for my new notebook :)

[13:42] <DrForr> So will I, come to think of it - At least I'm planning to acquire a new notebook whilst there.

[13:42] <notviki> college ruled? :)

[13:43] <timotimo> who rules the college?

[13:43] <DrForr> "You *deserve* to be ruled." "Like five-subject college notebooks is what I'm saying."

[13:51] *** bjz left
[14:01] *** cpage_ left
[14:01] *** shayan_ joined
[14:03] *** cpage joined
[14:03] *** cpage_ joined
[14:05] *** faraco joined
[14:05] <azawawi> any ideas how to exit from a blocking GTK::Simple app? # need it for writing tests for GTK::Scintilla

[14:05] <jnthn> exit?

[14:06] <jnthn> (exit does a real OS exit so should tear the process down fine enough...)

[14:07] *** kurahaupo__ joined
[14:07] <notviki> faraco: I don't see any error messages in your update....

[14:08] <notviki> just copy-pasted original text that describe the issue as "fails everywhere"

[14:08] <pmurias> raschi: re having the FFI take a header you can combine both approaches use the tool to spit out something that you can tweak from the  header

[14:09] <raschi> pmurias: Yes, they're not mutually exclusive.

[14:13] *** pyrimidine joined
[14:16] *** aborazmeh left
[14:16] <[Coke]> so, doc building still basically broken here for me; anyone else building with a very recent rakudo seeing a slowdown on "Writing programs document for Perl 6" ? Seems like just me atm.

[14:17] *** pyrimidine left
[14:18] <azawawi> jnthn: i.e. on shown exit the app (for ci testing custom-made gtk widgets and stuff like that)

[14:18] *** skids joined
[14:19] *** cdg joined
[14:20] *** azawawi left
[14:20] *** cdg left
[14:21] *** cdg joined
[14:22] *** pyrimidine joined
[14:23] *** azawawi joined
[14:24] <azawawi> jnthn: got it... GTK::Simple::Scheduler.new.cue: {$app.exit} :)

[14:24] <jnthn> Ah :)

[14:25] *** awwaiid joined
[14:28] <notviki> RabidGravy: are you around?

[14:30] *** jdmmmmm joined
[14:30] <[Coke]> I have a lookup hash. Is there a good way to have a MAIN arg declaratively be one of those keys?

[14:31] *** rindolf left
[14:32] <notviki> or ugexe, are you around?

[14:32] <moritz> [Coke]: uhm, uhm, uhm, probably not

[14:32] <[Coke]> ah. enum STUFF (%stuff.keys); # was missing the parens.

[14:32] <[Coke]> then I can use enum in the MAIN.

[14:33] <moritz> that would have been my next attempt :-)

[14:33] *** telex left
[14:33] <notviki> m: say v0.0.9 before v0.0.11

[14:33] <camelia> rakudo-moar ed5c86: OUTPUT¬´True‚ê§¬ª

[14:34] *** telex joined
[14:34] <notviki> ugexe: RabidGravy for some reason `zef install Test::META` attempts to install META6:ver('0.0.9') instead of the latest META6:ver('0.0.11'): https://gist.github.com/zoffixznet/81fbd818ef21470aa249a1cce7522e8b

[14:35] *** wamba left
[14:35] <notviki> I don't see where Test::META is req'ing any particular version... is zef incorrectly calculating latest version and thinks 0.0.11 is earlier thatn 0.0.9?

[14:36] *** newbie1 joined
[14:37] *** rindolf joined
[14:38] <faraco> guys, I try to install IRC::Client from zoffixznet repo with `zef`. However, I failed to do to. Is anyone installing it triggers the same error?

[14:38] *** aindilis joined
[14:39] *** azawawi left
[14:39] <notviki> faraco: just force install it

[14:40] <faraco> is it supposed to failed with zef?

[14:40] <notviki> faraco: it's not failing. it's Test::META that's failing.

[14:41] <faraco> but..https://travis-ci.org/faraco/perl6-IRC-Client

[14:41] <faraco> panda and prove worked..?

[14:42] <notviki> heh

[14:42] <raschi> "just force install it" Oh, you're gonna have a lot of angy users because of that, if that's how it's supposed to work.

[14:43] * notviki refrains from making a mean response.

[14:43] <raschi> You should, though.

[14:45] <notviki> Yeah, if both of you read what I said 8 minutes ago you may avoid making dumb comments or spamming my GitHub Issues

[14:45] *** shayan_ left
[14:45] <timotimo> m: say v0.0.11 cmp v0.0.9

[14:45] <camelia> rakudo-moar ed5c86: OUTPUT¬´More‚ê§¬ª

[14:45] *** shayan_ joined
[14:45] <timotimo> right, it should consider 0.0.11 more than 0.0.9

[14:47] <timotimo> i don't see the how testing actually fails there at all o_O

[14:48] <timotimo> like ... "ok. failed!"

[14:48] <notviki> right even zef install META6 tries to fetch 0.0.9

[14:50] <timotimo> whoops.

[14:50] <timotimo> time to release META6 0.1.0

[14:50] <notviki> :}

[14:51] <faraco> urm

[14:51] <faraco> is notviki == zoffixznet?

[14:51] <notviki> Yes

[14:52] <faraco> well, xD. I'm busted.

[14:56] *** bwisti joined
[14:58] <[Coke]> aw, I thought we had better enum support for MAIN args.

[14:58] <notviki> [Coke]: which version are you on?

[14:58] <notviki> Made a zef issue: https://github.com/ugexe/zef/issues/124

[14:59] <notviki> faraco: ^ I suspect when that is resolved, your issue with IRC::Client will resolve too

[14:59] *** jdmmmmm left
[15:00] <faraco> notviki: I'm sorry for that dumb issue. and how do you actually view the subtest in each file?

[15:00] <faraco> because, I don't want to repeat what I just did last time, if I can in the future.

[15:01] *** ggj_ joined
[15:03] *** zakharyas left
[15:06] *** cschwenz joined
[15:07] <notviki> faraco: I ran zef install . in IRC::Client and it aborted on Test::META. In your travis build, I see you're installing deps first with `panda` but then trying to install IRC::Client with zef. So that's why it likely didn't report an issue with Test::META, but I don't know why it still fails with IRC Client.

[15:08] <[Coke]> notviki: head.

[15:08] <notviki> faraco: hm, actually, even if I install all the prereqs `zef test .` fails, even though prove -e 'perl6 -Ilib' -vlr t/ succeeds.

[15:08] <notviki> Oh, I have a guess on why

[15:08] <[Coke]> notviki: ish, anyway: 2016.12-266-ged5c866

[15:09] <faraco> notviki: I actually ran 3 builds. first build, only add `placeholder` in the README.md passed, second, I add script: zef install . in .travis.yml, third, I add `panda install .` before zef install . to make sure if both failed.

[15:10] <notviki> faraco: and zef test . actually fails due to a bug in TAP::Harness: https://rt.perl.org/Ticket/Display.html?id=130518

[15:10] <faraco> oh, I see

[15:10] *** bubbleup joined
[15:10] <notviki> So seems you encountered two bugs...:)

[15:11] *** shayan_ left
[15:11] <notviki> I guess I can fix TAP::Harness bug now...

[15:12] <notviki> [Coke]: what enum support is missing then?

[15:13] <notviki> IIRC we didn't do the enum guessing for slurpies

[15:13] <[Coke]> sub MAIN (enumType $input) {} ... perl6 thing.pl not-an-enum-type; doesn't show the valid types.

[15:14] *** shayan_ joined
[15:14] * [Coke] writes up a gist.

[15:15] <raschi> Should show <enum1|enum2|enum3|...>

[15:16] <notviki> [Coke]: right, ATM it only shows that for named args

[15:16] *** jdmmmmm joined
[15:17] <faraco> raschip: thanks, I think I need to learn perl6 regex grammar. :P5 option doesn't run 100% perl 5 regex unfortunately.

[15:17] *** jdmmmmm left
[15:17] *** jdmmmmm joined
[15:17] <raschi> Is there are a way to have muttually exclusive named args?

[15:18] <raschi> I have seen it do <namedarg1> <namedarg2> <namedarg3> ...

[15:18] <notviki> m: sub (*% where :so) {}

[15:18] <camelia> rakudo-moar ed5c86: ( no output )

[15:18] <timotimo> more like :!so, no?

[15:18] <timotimo> well, :not

[15:18] <notviki> raschi: yeah, I guess you could d ^ that and do checks in where

[15:19] <raschi> But then it wouldn't show in usage, right?

[15:19] <notviki> hm, right

[15:19] <notviki> raschi: then you could do two multies, I guess

[15:20] <raschi> Multies will show up as multiple lines, which can be confusing, because users expect different enough modes of operation when that happens.

[15:21] <moritz> then it's your job as an author to either implement similar behavior in the same multi, or supply your own sub USAGE

[15:21] <raschi> Well, it would be very nice if enums showed up as mutually exclusive option in the usage.

[15:22] <raschi> options*

[15:23] *** jdmmmmm left
[15:23] <raschi> E

[15:23] <notviki> m: my class D {}; sub (:$foo where { $bar === D && $foo !=== D or $foo === D && $bar !=== D }= D, :$bar where { $foo === D && $bar !=== D or $bar === D and $foo !=== D } = D) {}(:42foo)

[15:23] <camelia> rakudo-moar ed5c86: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$bar' is not declared‚ê§at <tmp>:1‚ê§------> 3my class D {}; sub (:$foo where { 7‚èè5$bar === D && $foo !=== D or $foo === D ‚ê§¬ª

[15:23] <notviki> all that typing... 

[15:25] <notviki> m: my class D {}; sub (:$foo = D, :$bar = D, :@ where { $bar === D && $foo !=== D or $foo === D && $bar !=== D }) {}(:42foo)

[15:25] <camelia> rakudo-moar ed5c86: ( no output )

[15:25] <notviki> m: my class D {}; sub (:$foo = D, :$bar = D, :@ where { $bar === D && $foo !=== D or $foo === D && $bar !=== D }) {}(:42foo, :44bar)

[15:25] <camelia> rakudo-moar ed5c86: OUTPUT¬´Constraint type check failed for parameter '<anon>'‚ê§  in sub  at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:25] <notviki> m: my class D {}; sub (:$foo = D, :$bar = D, :@ where { $bar === D && $foo !=== D or $foo === D && $bar !=== D }) {}(:44bar)

[15:25] <camelia> rakudo-moar ed5c86: ( no output )

[15:25] <notviki> huzzah?

[15:25] <ugexe> notviki: can you real quick try with `--/cached`

[15:25] <ugexe> i think its about time to make the cache disabled by default

[15:26] <notviki> and IIRC the :@ won't show up in USAGE... and if it will, there's some named anon thing that doesn't (maybe :%)

[15:26] <ugexe> otherwise it sees you're essentially asking for META6:ver<*> (e.g. META6), and the first thing it hits it will keep (which is the cache)

[15:26] *** shayan_ left
[15:26] <ugexe> cache isn't working well with this model

[15:27] <[Coke]> notviki: https://gist.github.com/coke/f9584108f0f505a9e0f53c1b24df4fee

[15:27] <notviki> I'd say the "first thing it hits" isn't working with this module :P

[15:27] <notviki> *model

[15:27] <notviki> ugexe: yeah with --/cached it's installing 0.0.11

[15:28] <[Coke]> notviki: (named args) ... ARG. that is actually what I wanted it for, but assumed that if it didn't work one way, it wouldn't work the other.

[15:28] <ugexe> i switched to that because otherwise it has to make a network request for every 'zef install whatever'. which it *used* to do, but someone opened an issue that their network was slow and that it should use the cache first

[15:28] <raschi> It would be very nice if it said: "Usage:   foo.p6 <cat|dog|sheep>"

[15:28] <notviki> ugexe: hehe :)

[15:28] <notviki> raschi: well volunteered!

[15:29] <raschi> I will, but only at night. I'm at work behind a stupid firewll right now.

[15:29] *** shayan_ joined
[15:29] <notviki> raschi: this is the part that does it for named args, I suspect it's something similar for positionals: https://github.com/rakudo/rakudo/blob/nom/src/core/Main.pm#L122-L126

[15:29] <perlpilot_> raschi: while you're at it, make the generated usage available in $?USAGE too  :)

[15:30] <raschi> right.

[15:30] *** ggoebel left
[15:33] *** shayan_ left
[15:38] *** shayan_ joined
[15:46] *** jonas1 left
[15:48] *** domidumont left
[15:52] *** shayan_ left
[15:52] *** lukaramu left
[15:52] *** Celelibi joined
[15:58] *** AlexDaniel joined
[15:59] *** shayan_ joined
[15:59] *** shayan_ left
[16:02] *** domidumont joined
[16:04] *** zakharyas joined
[16:08] *** wamba joined
[16:10] *** g4 left
[16:14] *** confundus joined
[16:17] *** revdiablo joined
[16:20] <notviki> faraco: zef test . is now fixed on HEAD rakudo for those IRC::Client files that were full-file skipped...

[16:22] <faraco> notviki: nice, gonna sync the repo and install again.

[16:23] <notviki> faraco: and if you run zef with --/cached the other issue won't happen either

[16:25] <raschi> ugexe: is there a command to invalidate the cache? Users are used to it: "apt update && apt upgrade".

[16:28] <ugexe> raschi: --/cached will disable it, or `zef nuke StoreDir` will delete it

[16:29] <ugexe> the cache isn't invalid in the proper brought up today, its just that it fulfills the request before it considers the ecosystem

[16:29] <ugexe> s/proper/problem/

[16:29] <ugexe> i.e. `zef install "META6:ver<0.0.11>"` would have worked

[16:29] <raschi> You should change the documentation and tell users to nuke the cache before installing anything.

[16:29] <notviki> :|

[16:29] <ugexe> im just going to fix the cache

[16:30] <raschi> OK.

[16:31] *** hchienjo joined
[16:31] <ugexe> the root of the problem is `use META6;` is the same as `use META6:ver<*>`, so when zef looks to see if `META6` is installed or available in an ecosystem/cache its asking 'is any version of META6 available?'

[16:31] <raschi> It shouldn't try and rebuild it every time, that would be very painful.

[16:32] <raschi> I though you were goin g to just reverse the changes you made when you made using the cache the default.

[16:33] *** khw joined
[16:34] <ugexe> nah, just that it should consider all "ecosystems" when searching (instead of stopping when it finds something that fulfills the request). Although at the moment this means repeatedly parsing an ever-growing json file from the ecosystem

[16:35] <ugexe> so i'll problem end up mirroring the ecosystem using a format that can be parsed faster

[16:35] <ugexe> (or a module that converts the ecosystem json to this faster format)

[16:35] <raschi> and when are you going to fetch this?

[16:36] <notviki> Where is it getting 0.0.9 META6 from tho? It's a fresh install

[16:36] <ugexe> notviki: did you nuke ~/.zef ?

[16:36] <ugexe> i know you usually do but thats what i would expect to cause this

[16:36] <notviki> update-perl6 is aliased to `rm -fr ~/.perl6; rm -fr ~/.rakudobrew/; git clone https://github.com/tadzik/rakudobrew ~/.rakudobrew; rakudobrew build moar; rakudobrew build zef;'

[16:37] <notviki> And I just ran update-perl6; and then zef install . in IRC::Client's checkout

[16:37] <notviki> oh crap

[16:37] <notviki> Yeah, the update alias is missing rm -fr ~/.zef on this box

[16:37] <notviki> Too many boxes! :)

[16:38] <ugexe> i renamed your issue to reflect the problem as I understand it btw

[16:38] <raschi> what's the issue number?

[16:38] <ugexe> https://github.com/ugexe/zef/issues/124

[16:41] <raschi> Oh, I see, I thought it looked directly on what you called "ecosystem", which is the package list.

[16:43] <raschi> "the problem as I understand it btw". You aren't sure of it?

[16:45] <raschi> Or aren't sure of the solution?

[16:53] *** obfusk joined
[16:54] *** hchienjo left
[16:56] *** loveperl joined
[16:57] <loveperl> ¬øC√≥mo hacer una solicitud de ajax?

[16:57] <loveperl> How to make an ajax request?

[16:57] *** zakharyas left
[16:57] <notviki> hah

[16:58] <AlexDaniel> hmmm‚Ä¶

[16:58] <notviki> loveperl: http://api.jquery.com/jQuery.ajax/

[16:59] <notviki> loveperl: or you mean you want to simulate one from a Perl 6 script?

[16:59] *** obfusk left
[16:59] *** zakharyas joined
[16:59] <notviki> loveperl: just use dev tools in the browser to see what HTTP request is being sent out and send the same one via HTTP::UserAgent or something similar

[16:59] *** obfusk joined
[17:00] *** loveperl_ joined
[17:00] <notviki> (press F12)

[17:00] <loveperl_> ??

[17:01] <notviki> loveperl: just use dev tools in the browser to see what HTTP request is being sent out and send the same one via HTTP::UserAgent or something similar

[17:02] *** loveperl left
[17:05] *** obfusk left
[17:06] *** obfusk joined
[17:18] *** rindolf left
[17:20] <ugexe> raschi: as I understand it meaning the current behavior could be considered correct by some (although probably not many)

[17:20] <raschi> Define "correct"

[17:21] <raschi> It's not correct because it breaks expectations.

[17:21] *** rindolf joined
[17:23] *** zakharyas left
[17:24] <TimToady> I've learned over the years that not everyone expects the same thing.  :)

[17:24] <loveperl_> I do not understand ajax requests

[17:24] <raschi> What software behaves like zef is doing right now?

[17:24] <notviki> loveperl_: they're just regular HTTP requests

[17:25] <notviki> loveperl_: what are you trying to do exactly?

[17:25] <ugexe> My::Module is the same as My::Module:ver<*>, which translates to "whatever version of My::Module" - and in this regard it currently accomplishes that

[17:25] <notviki> Are you trying to make a request or respond to one?

[17:25] *** zakharyas joined
[17:28] <raschi> @a[*] sould behave like @a.pick, then?

[17:28] <ugexe> use My::Module:ver<*>; should load all versions of My::Module then?

[17:29] <TimToady> ugexe: well, the "whatever" concept isn't meant to imply "take a random guess", but "you figure out something smart", but I can see how some people would read it the other way

[17:29] <ugexe> and while I agree it should instead treat it as 'get whatever is the newest' its current behavior is not without benefit - it allows you to order your module sources such that you can earlier sources can be considered as the 'main source' and later ones as fall backs

[17:29] <notviki> the "whatever version" feels very wrong to me and I'd never intend it as such. To me, it's "latest available"

[17:30] <notviki> why the hell would I want whatever version? That's like asking for rakudo:ver<*> and getting teh 2011.07 release.

[17:30] <raschi> "you figure out something smart" -> Exactly.

[17:30] <AlexDaniel> .–æ–û( use My::Module:ver<‚àû> :D )

[17:30] <raschi> When installing, it should be the newest version, otherwise it's a security bug.

[17:30] *** sunnavy joined
[17:31] <TimToady> well, could be, if it's a security fix

[17:31] <loveperl_> I want to send variables from javascript to perl

[17:32] <TimToady> I do agree that most recent is a reasonable default assumption

[17:32] <notviki> loveperl_: ok. Try HTTP::Server::Tiny

[17:32] <notviki> buggable: eco HTTP::Server::Tiny

[17:32] <buggable> notviki, HTTP::Server::Tiny 'a simple HTTP server for Perl6': https://github.com/tokuhirom/p6-HTTP-Server-Tiny

[17:33] <notviki> loveperl_: the variables will be in $env<QUERY_STRING> and you can get them (roughly) with use URI::Encode; my %query = $_ ?? () !! .split(/<[=&]>/).map(*.&uri_decode) given $env<QUERY_STRING>; 

[17:34] <notviki> loveperl_: or if it's a POST, then somewhere else in $env; just dump it; dd $env

[17:34] *** jordman joined
[17:34] *** cschwenz left
[17:35] <loveperl_> $.ajax funciona?

[17:35] <raschi> well, could be, if it's a security fix: If it isn't this one time, it will be in the future.

[17:35] <notviki> loveperl_: si

[17:37] <raschi> Installing outdated software without the user asking for it specifically is certainly a security bug, see the way Linux Mint does kernel updates.

[17:38] <ugexe> i don't think anyone disagrees with you. i was merely explaining the rational behind its current behavior

[17:40] <TimToady> If someone would figure out a way to monetize violent agreement, we'd all be rich. :)

[17:41] <raschi> Well, it's called a cult.

[17:43] <TimToady> If so, that's the point at which I kick our cult over on its ear, and hope it evolves into culture. :)

[17:44] <CIAvash[m]> TimToady: Did you see my question? http://irclog.perlgeek.de/perl6/2017-01-07#i_13876301

[17:44] <raschi> I didn't mean we're a cult, just that it's a way to monetize violent agreement.

[17:44] <raschi> I don't think we should monetize our violent agreement.

[17:44] <TimToady> we're a bit of a cult, but mostly only in nice ways, so far

[17:45] <TimToady> it's something I simultaneously encourage and discourage...

[17:45] <raschi> I think we're using different definitions for cult.

[17:46] *** xinming left
[17:46] <TimToady> sure, I have multiple definitions my own self

[17:46] <TimToady> CIAvash[m]: yes, and was thinking about it

[17:46] <raschi> Have you taken people away from their familes, punished them for questioning the truths of perl 6, taken their assets so that they have a hard time running away, etc? That's the definion I was using.

[17:47] <TimToady> ranges can be destructured with named args representing methods, I suspect

[17:47] *** Tonik joined
[17:47] <CIAvash[m]> TimToady: ok, just thought you might have missed the messages

[17:47] <notviki> star: use LWP::Simple; dd LWP::Simple.post: "http://geth.perl6.party/?chan=%23perl6", {"X-GitHub-Event" => "push"}, '{"repository":{"name":"fakety-fake", "full_name":"fakety-fake"},"ref": "refs/heads/meows","commits":[{"message":"Zoffix was here", "id":"meowmeow", "added":["fakety.fake"],"author":{"name":"fake Zoffix"}}]}'

[17:47] <Geth> fakety-fake/meows: meowmeow | (fake Zoffix)++ | 2 files

[17:47] <camelia> star-m 2016.10: OUTPUT¬´"OK"‚ê§¬ª

[17:47] <Geth> fakety-fake/meows: Zoffix was here

[17:47] <Geth> fakety-fake/meows: review: https://github.com/fakety-fake/commit/meowmeow

[17:48] * notviki giggles

[17:48] <TimToady> seems like sequences oughta be destructuralable in a head/tail fashion

[17:48] *** hankache joined
[17:48] <hankache> hello #perl6

[17:48] <notviki> \o

[17:48] <TimToady> CIAvash[m]: when you ask hard questions, sometimes the silence means I'm thinking "hmm..."

[17:49] <TimToady> and sometimes it means I'm asleep :)

[17:49] <notviki> loveperl_: did you figure it out?

[17:49] *** zakharyas left
[17:49] <CIAvash[m]> :)

[17:50] <loveperl_> Not yet is not that I have it very clear, but thanks for the answer

[17:53] <TimToady> raschi: sure, but defining something by its most extreme forms can also be a way of not recognizing the tendencies, sort of the opposite of a slippery slope argument, as it were

[17:53] <raschi> Does use My::Module:ver<0.1 < * < 1.0> works?

[17:54] <raschi> m: use URI::Encode:ver<0.1 < * < 1.0>

[17:54] <camelia> rakudo-moar aee7af: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in quote words; couldn't find final '>'‚ê§        ‚ê§at <tmp>:1‚ê§------> 3use URI::Encode:ver<0.1 < * < 1.0>7‚èè5<EOL>‚ê§    expecting any of:‚ê§        pair value‚ê§        q‚Ä¶¬ª

[17:54] <TimToady> m: use URI::Encode:ver(0.1 < * < 1.0)

[17:54] <camelia> rakudo-moar aee7af: OUTPUT¬´WhateverCode object coerced to string (please use .gist or .perl to do that)‚ê§  in any load_module at src/Perl6/World.nqp line 1194‚ê§WhateverCode object coerced to string (please use .gist or .perl to do that)‚ê§  in any load_module at src/Perl6/World.nq‚Ä¶¬ª

[17:54] <TimToady> that would be a better syntax, if supported

[17:54] <raschi> TimToady: If i didn't use the most extreme definion, the joke wouldn't work.

[17:54] <TimToady> m: use URI::Encode:ver(v0.1 < * < v1.0)

[17:54] <camelia> rakudo-moar aee7af: OUTPUT¬´WhateverCode object coerced to string (please use .gist or .perl to do that)‚ê§  in any load_module at src/Perl6/World.nqp line 1194‚ê§WhateverCode object coerced to string (please use .gist or .perl to do that)‚ê§  in any load_module at src/Perl6/World.nq‚Ä¶¬ª

[17:54] <TimToady> only with versions, not Rats :)

[17:55] <TimToady> raschi: are you questioning my authority?  ;)

[17:55] <raschi> Why would I?

[17:56] <raschi> This is your playground, after all.

[17:56] <TimToady> .oO(You job is to question authority. My job is to authorize questions.)

[17:57] <TimToady> *Your

[17:58] *** pyrimidine left
[17:59] *** pyrimidine joined
[17:59] <raschi> right

[17:59] <TimToady> but yes, I agree that the nice thing about words is that they scale up and down in their destructive power; that's also the nasty thing about words. :)

[18:00] <raschi> No, I mean.

[18:00] <CIAvash[m]> TimToady: How would named args work for ranges?

[18:01] <TimToady> m: sub foo($range (:$min, :$max)) { say "$min $max" }; foo ^10

[18:01] <camelia> rakudo-moar aee7af: OUTPUT¬´0 10‚ê§¬ª

[18:01] <TimToady> or are you looking for something more head/tail-y

[18:01] <TimToady> ?

[18:02] *** dakkar left
[18:02] <[Coke]> expected: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' got: '08x08x0x10fffd88x88x0x10fffd2Ex2Ex0x10fffd29x29x0x10fffd09x09x0x10fffd09x09x0x10fffd0Fx0Fx0x10fffdCDEFGHIJKLMNO08x08x0x10fffd4Dx4Dx0x10fffdRQSTUVWXYZ'

[18:02] <[Coke]> ...huh

[18:02] <CIAvash[m]> Yes

[18:02] <raschi> m: sub foo($range (:$a, :$b)) { say "$a $b" }; foo ^10

[18:02] <camelia> rakudo-moar aee7af: OUTPUT¬´2 unexpected named arguments passed (min,max) in sub-signature of parameter $range‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:03] <ugexe> m: use Test:ver(v0.*..v7.*)

[18:03] <camelia> rakudo-moar aee7af: ( no output )

[18:03] <ugexe> figured v6.* would catch 6.c too but I guess not

[18:04] <ugexe> (at least as part of a range)

[18:04] *** pyrimidine left
[18:04] <TimToady> m: say v6.c ~~ v6.*

[18:04] <camelia> rakudo-moar aee7af: OUTPUT¬´True‚ê§¬ª

[18:04] <TimToady> seems like it oughta

[18:04] <ugexe> right, use Test:ver(v6.*) works

[18:05] <notviki> loveperl_: are you still around?

[18:05] <TimToady> but smartmatch is a bit different from cmp semantics

[18:05] <TimToady> v6.* isn't actually orderable

[18:05] <notviki> loveperl_: here's a working version: https://gist.github.com/zoffixznet/1b34ed99dbea341c19514feda5e47f75

[18:06] <ugexe> m: use Test:ver(v0.* < v6.*)

[18:06] <camelia> rakudo-moar aee7af: ( no output )

[18:06] <notviki> loveperl_: note that you'd need to decode <p6sgi.input> differently if you're using file uploads or GET form request

[18:06] <notviki> use Test:ver<whatever>

[18:06] <notviki> m:" use Test:ver<whatever>

[18:06] <notviki> m: use Test:ver<whatever>

[18:06] <camelia> rakudo-moar aee7af: OUTPUT¬´===SORRY!===‚ê§Could not find Test:ver<whatever> at line 1 in:‚ê§    /home/camelia/.perl6‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6/site‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6/vendor‚ê§    /home/camelia/rakudo-m-inst-1/share/perl6‚ê§    Comp‚Ä¶¬ª

[18:07] <ugexe> m: require Test:ver<whatever>; # :(

[18:07] <camelia> rakudo-moar aee7af: ( no output )

[18:07] <loveperl_> ok tankyou novitike

[18:08] <loveperl_> novitiki

[18:08] <TimToady> m: sub foo($range, @range ($a, *@b) = $range.list) { say "$a then @b[]" }; foo ^10

[18:08] <camelia> rakudo-moar aee7af: OUTPUT¬´0 then 1 2 3 4 5 6 7 8 9‚ê§¬ª

[18:08] <TimToady> CIAvash[m]: ^^^ there's a way to fake it

[18:09] <notviki> m: sub foo($range, @range ($a, *@b) = $range.list) { say "$a then @b[]}; foo ^10, []

[18:09] <camelia> rakudo-moar aee7af: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unable to parse expression in double quotes; couldn't find final '"' ‚ê§at <tmp>:1‚ê§------> 3.list) { say "$a then @b[]}; foo ^10, []7‚èè5<EOL>‚ê§¬ª

[18:09] <notviki> m: sub foo($range, @range ($a, *@b) = $range.list) { say "$a then @b[]"}; foo ^10, []

[18:09] <camelia> rakudo-moar aee7af: OUTPUT¬´Too few positionals passed; expected at least 1 argument but got only 0 in sub-signature of parameter @range‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:10] <notviki> neat

[18:10] <TimToady> sure, it's fragile

[18:11] *** loveperl_ left
[18:11] <notviki> m: sub foo(*@ ($a, *@b)) { say "$a then @b[]" }; foo ^10

[18:11] <camelia> rakudo-moar aee7af: OUTPUT¬´0 then 1 2 3 4 5 6 7 8 9‚ê§¬ª

[18:11] <CIAvash[m]> interesting :)

[18:12] *** Ven left
[18:12] <[Coke]> http://www.web2generators.com/text-related-tools/write-upside-down - look at the flipped char for "P" - (my cut and paste is borked in tmux, so I can't paste it in here, but if I do that char, .NFKD.list.say, I get: (1114109 120 68 52 1114109 120 56 48)

[18:13] <raschi> u: ‘Ä

[18:13] <unicodable6> raschi, U+0500 CYRILLIC CAPITAL LETTER KOMI DE [Lu] (‘Ä)

[18:13] <notviki> m: "‘Ä".NFKD.say

[18:13] <camelia> rakudo-moar aee7af: OUTPUT¬´NFKD:0x<0500>‚ê§¬ª

[18:13] <notviki> m: "‘Ä".NFKD.list.say

[18:13] <camelia> rakudo-moar aee7af: OUTPUT¬´(1280)‚ê§¬ª

[18:13] <notviki> Is that the one?

[18:14] <[Coke]> yes, if I cut and paste from here instead of the URL, i get the same listing.

[18:14] *** xinming joined
[18:14] <[Coke]> weird.

[18:14] <SmokeMachine> if it resolves with the last version, how could some one do something like -Idir-with-old-version of the module on newer version is installed?

[18:14] <notviki> m: "‘Ä".NFKD.list.say

[18:14] <camelia> rakudo-moar aee7af: OUTPUT¬´(1280)‚ê§¬ª

[18:14] <notviki> ^ c-p from site

[18:15] <[Coke]> wonder if it's something about my terminal on macos

[18:15] <raschi> m: " 	‘Ä".NFKD.list.say

[18:15] <camelia> rakudo-moar aee7af: OUTPUT¬´(32 9 1280)‚ê§¬ª

[18:16] <CIAvash[m]> TimToady: but it can't work with infinite ranges, can it?

[18:17] <TimToady> m: sub foo($range is copy ($a, *@b) where <-> $_ { .=list }) { say "$a then @b[]" }; foo ^10

[18:17] <camelia> rakudo-moar aee7af: OUTPUT¬´Parameter '$_' expected a writable container, but got Range value‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:18] <TimToady> m: sub foo(@range ($a, *@b)) { say "$a then ", @b }; foo 1..*

[18:18] <camelia> rakudo-moar aee7af: OUTPUT¬´Too few positionals passed; expected at least 1 argument but got only 0 in sub-signature of parameter @range‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:18] *** _Vasyl left
[18:18] <ugexe> SmokeMachine: yeah thats pretty much the rational behind zef's current behavior (acting like CUR where it takes the highest version *of the first CUR/ecosystem* that fulfills the request)

[18:18] <ugexe> thanks for mentioning that

[18:18] <TimToady> m: sub foo($range, @range ($a, *@b) = $range.list) { say "$a then ", @b }; foo 1..*

[18:18] <camelia> rakudo-moar aee7af: OUTPUT¬´Too few positionals passed; expected at least 1 argument but got only 0 in sub-signature of parameter @range‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:20] <TimToady> m: sub foo($range, @range ($a, *@b) = $range.list) { say "$a then ", @b }; foo 1..10

[18:20] <camelia> rakudo-moar aee7af: OUTPUT¬´1 then [2 3 4 5 6 7 8 9 10]‚ê§¬ª

[18:20] <TimToady> weird

[18:20] <raschi> m: (1..*).list

[18:20] <camelia> rakudo-moar aee7af: ( no output )

[18:21] <raschi> m: dd (1..*).list

[18:21] <camelia> rakudo-moar aee7af: OUTPUT¬´(1, 2, 3, 4, 5, 6, 7, 8, 9, 10... lazy list)‚ê§¬ª

[18:21] <TimToady> m: (1..*).list[^10]

[18:21] <camelia> rakudo-moar aee7af: ( no output )

[18:21] <TimToady> m: (1..*).list[^10].say

[18:21] <camelia> rakudo-moar aee7af: OUTPUT¬´(1 2 3 4 5 6 7 8 9 10)‚ê§¬ª

[18:21] <TimToady> would appear that subsig binding can't reify at that level

[18:22] <raschi> It should warn about it, then.

[18:27] <SmokeMachine> ugexe: Would be possible to -I and use lib means: search the modules on this dir if do not find it, do the normal, else use this one, do not try the others?

[18:28] <SmokeMachine> If so, :ver<*> would have no problem meaning the highest version... I think

[18:28] <ugexe> SmokeMachine: thats how it currently works. -Ilib puts ./lib at the front of the repo chain - if a `use Module::Name` is found in that repo it will be chosen and no other repos will be looked at

[18:28] <notviki> m: my ($range, @ ($a, *@b) = $range.list) = 1..*;  say "$a then ", @b;

[18:28] <camelia> rakudo-moar aee7af: OUTPUT¬´Cannot call method 'Stringy' on a null object‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:29] *** Gasher joined
[18:29] <SmokeMachine> ugexe: yes, but it uses the first version it founds...

[18:29] *** pyrimidine joined
[18:30] <SmokeMachine> I mean: :ver<*> search all versions and use the newest unless it founds it on a dir settled by -I...

[18:31] <raschi> SmokeMachine: We're talking about installing modules, not about what to 'use'. We only test the "use" because zef should do the same thing as P6.

[18:32] <raschi> When using them, <*> should use the first one it founds, allowing the admin to manipulate the search path.

[18:32] <ugexe> SmokeMachine: yes, thats what it does now for the most part. the "doesn't load the highest version" problem requires multilpe :auth<> to be used as well

[18:33] <SmokeMachine> raschi: I know! I'm "trying" to change the use behavior to continue to do the same thinking when installing modules and don't loose the -I when use()ing...

[18:35] <SmokeMachine> I don't really want to try anything... I'm just wondering...

[18:35] <SmokeMachine> *to change

[18:38] <notviki> :( organazier of Toronto Perl Mongers just stepped down... one of the reasons: "I'd been

[18:38] <notviki> hoping to do a maker themed thing this month but got no responses

[18:39] *** pyrimidine left
[18:39] <notviki> oh first draft of LP6 is available.

[18:40] <notviki> I guess we're not allowed to share it, right?

[18:44] <faraco> hi

[18:44] <raschi> o/

[18:44] <Geth> evalbot: a0734fa4c1 | (Zoffix Znet)++ | evalbot.pl

[18:44] <Geth> evalbot: Teach camelia to ignore Geth

[18:44] <Geth> evalbot: review: https://github.com/perl6/evalbot/commit/a0734fa4c1

[18:45] <faraco> raschi: :D

[18:45] *** camelia left
[18:45] *** camelia joined
[18:46] <raschi> notviki: do you have a link to the log where what motivated that commit happened?

[18:46] <DrForr> notviki: I wouldn't think so. <looks/>

[18:47] *** ChanServ sets mode: +v camelia

[18:47] *** camelia left
[18:48] *** camelia joined
[18:48] <notviki> DrForr: :)

[18:48] <notviki> I guess I shouldve went for "friends and femily" reward :)

[18:49] *** ChanServ sets mode: +v camelia

[18:49] *** andrzejku joined
[18:51] <[Coke]> notviki, samcv (others): https://gist.github.com/coke/6b627a81301d0b741af297a7740e631b - here's my weird CYRICLLIC CAPITAL LETTER KOMI DE issues.

[18:54] *** pyrimidine joined
[18:54] <DrForr> 'CYRICLLIC' has an extra 'C' assuming that's a direct copy :)

[18:55] <notviki> [Coke]: I get 0000000 80d4 in od too

[18:56] <[Coke]> DrForr: hand typed, sorry

[18:56] <[Coke]> notviki: does the cut and paste-o happen to you?

[18:56] <notviki> m: dd "\x[80d4]"

[18:56] <camelia> rakudo-moar aee7af: OUTPUT¬´"ËÉî"‚ê§¬ª

[18:56] <notviki> m: dd "\x[d4]"

[18:56] <camelia> rakudo-moar aee7af: OUTPUT¬´"√î"‚ê§¬ª

[18:56] <DrForr> No need to be sorry, I was just thinking it might be one of those "caught by someone else" things.

[18:58] <[Coke]> m: var $my-variable; say $my-variable; # wonder if this could give some love for our JS friends.

[18:58] <camelia> rakudo-moar aee7af: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$my-variable' is not declared‚ê§at <tmp>:1‚ê§------> 3var 7‚èè5$my-variable; say $my-variable; # wonder‚ê§¬ª

[18:59] <faraco> m: my $sub = &foo;

[18:59] <camelia> rakudo-moar aee7af: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    foo used at line 1‚ê§‚ê§¬ª

[19:00] *** Geth left
[19:01] *** Geth joined
[19:01] *** ChanServ sets mode: +v Geth

[19:07] <RabidGravy> notviki, I wasn't around but I am now :)

[19:07] *** tomaw joined
[19:07] <notviki> RabidGravy: it's OK, turns out the issue is in zef not in Test::META :)

[19:08] *** labster joined
[19:08] *** Gasher left
[19:08] *** Guest34096 is now known as ponbiki

[19:09] *** Gasher joined
[19:12] *** confundus left
[19:13] <CIAvash[m]> TimToady: My curiosity started with this question[https://stackoverflow.com/questions/39265900/how-to-write-an-intersperse-function-in-perl-6]. I wanted to try and see if it's possible to implement it the way it's done in Haskell. So I wrote it like this[https://gist.github.com/CIAvash/a02ea4c1c52ae8d483add1984d42f352], but it didn't work for (infinite) ranges and sequences.

[19:17] <RabidGravy> Harr!

[19:17] *** pyrimidine left
[19:18] *** pyrimidine joined
[19:21] *** lukaramu joined
[19:22] <perigrin> w 23

[19:22] *** pyrimidine left
[19:30] *** zakharyas joined
[19:33] *** faraco left
[19:34] *** cdg left
[19:34] *** hankache left
[19:46] <lucs> wingo!

[19:46] *** MilkmanDan left
[19:46] *** dontbe^2 left
[19:46] *** adhoc left
[19:46] *** mtj_ left
[19:46] *** raydiak left
[19:46] *** alnewkirk left
[19:46] *** charsbar______ left
[19:46] *** adhoc joined
[19:46] *** alnewkirk joined
[19:46] *** raydiak joined
[19:46] *** MilkmanDan joined
[19:46] *** charsbar______ joined
[19:47] *** mtj_ joined
[19:50] <notviki> $ perl6 -e '"‘Ä".uninames.say'

[19:50] <notviki> (<Plane 16 Private Use> LATIN SMALL LETTER X LATIN CAPITAL LETTER D DIGIT FOUR <Plane 16 Private Use> LATIN SMALL LETTER X DIGIT EIGHT DIGIT ZERO)

[19:50] <notviki> [Coke]: ^ that's what I get on copy-paste

[19:56] *** ufobat left
[19:56] <notviki> bisectable6: "‘Ä".uninames.say

[19:56] <bisectable6> notviki, On both starting points (old=2015.12 new=e182deb) the exit code is 0 and the output is identical as well

[19:56] <bisectable6> notviki, Output on both points: (CYRILLIC CAPITAL LETTER KOMI DE)

[19:56] <notviki> what the...

[19:57] <notviki> weird

[19:57] <notviki> m: "‘Ä".uninames.say

[19:57] <camelia> rakudo-moar e182de: OUTPUT¬´(CYRILLIC CAPITAL LETTER KOMI DE)‚ê§¬ª

[19:57] <AlexDaniel> the one you pasted into IRC is different?

[19:57] <notviki> is it?

[19:58] <notviki> They look identical to me

[19:58] <notviki> And I made it by 0x500.chr.print

[19:58] <AlexDaniel> m: 0x500.chr.print

[19:58] <camelia> rakudo-moar e182de: OUTPUT¬´‘Ä¬ª

[19:58] <notviki> m: 0x500.chr.uninames.say

[19:58] <camelia> rakudo-moar e182de: OUTPUT¬´(CYRILLIC CAPITAL LETTER KOMI DE)‚ê§¬ª

[19:59] <notviki> m: "‘Ä".uninames.say

[19:59] <camelia> rakudo-moar e182de: OUTPUT¬´(CYRILLIC CAPITAL LETTER KOMI DE)‚ê§¬ª

[19:59] <notviki> same copy-paste buffer..., but it gives me the weird private use stuff in another terminal

[20:00] <AlexDaniel> maybe your terminal is adding it for its own purposes?

[20:00] <notviki> though it's worth pointing out my locale is busted on this terminal. It keeps thinking it's chineese or something "LC_NAME=zh_CN.UTF-8"

[20:00] <AlexDaniel> hmmm

[20:01] <notviki> huggable: windows utf8 :is: chcp 65001 

[20:01] <huggable> notviki, Added windows utf8 as chcp 65001 

[20:01] <AlexDaniel> should bisectable run ÔΩ¢commit: 6c ‚Ä¶ÔΩ£ with the same code if the output on 2015.12 and HEAD is identical?

[20:02] *** bjz joined
[20:04] <notviki> lmao... I copy-pasted that ‘Ä into windows terminal and ran uninames on it and it tells me "(QUESTION MARK)" :P

[20:04] <notviki> char looks like a box tho

[20:05] <notviki> Well, and the other data point: $ perl6 -e '0x500.chr.say' | od -h

[20:05] <notviki> 0000000 80d4 000a

[20:05] <notviki> 0000003

[20:05] <notviki> is that normal? that it's 80d4?

[20:05] <notviki> m: "\x[80d4]".uninames.say

[20:05] <camelia> rakudo-moar e182de: OUTPUT¬´(<CJK Ideograph>)‚ê§¬ª

[20:06] *** raschi left
[20:06] <[Coke]> notviki: so you can duplicate my issues. it's weird, neh?

[20:06] <notviki> [Coke]: yeah

[20:07] <notviki> [Coke]: what does echo $LC_NAME give you?

[20:07] <notviki> I got it as zh_CN.UTF-8 

[20:07] <[Coke]> notviki: not set.

[20:07] * notviki shrugs

[20:07] <notviki> gonna try it at home too

[20:08] <[Coke]> got LANG=en_US.UTF-8

[20:08] <AlexDaniel> m: 0x500.chr.say

[20:08] <camelia> rakudo-moar e182de: OUTPUT¬´‘Ä‚ê§¬ª

[20:08] <AlexDaniel> m: 0x500.chr.encode.say

[20:08] <camelia> rakudo-moar e182de: OUTPUT¬´utf8:0x<d4 80>‚ê§¬ª

[20:08] <notviki> my lang is the same

[20:08] <notviki> AlexDaniel++

[20:09] <AlexDaniel> m: ‚Äú\x[500]\n‚Äù.encode.say

[20:09] <camelia> rakudo-moar e182de: OUTPUT¬´utf8:0x<d4 80 0a>‚ê§¬ª

[20:11] * notviki reads LP6 draft...

[20:11] * AlexDaniel wants to take a look too, but was not given the opportunity

[20:12] * notviki did a $50 kickstarter thing

[20:12] <notviki> Says "Do not share" on the copy

[20:12] <AlexDaniel> sure-sure, I'm not asking for anything

[20:13] * DrForr has other ways :)

[20:13] <notviki> I'll give you my rating of it when I'm done :P

[20:13] <AlexDaniel> I'd just search for more rakudo bugs then rather than trying to review the book

[20:13] <AlexDaniel> which is a much better idea

[20:13] <notviki> :)

[20:14] <notviki> Well, I'm not reviewing it. I'm merely trying to decide whether I should stfu about dissing that book :P

[20:21] *** setty1 left
[20:21] <notviki> :( well, it's already making me sad

[20:21] <[Coke]> notviki: hey, um. 0x500 is working here now.

[20:21] <[Coke]> I'm so confused. :|

[20:22] <notviki> Well, the 0x500 is also working for me here. But if I copy-paste that output into a string, the uninames gives me weird stuff

[20:23] <notviki> [Coke]: oh and as AlexDaniel showed above, the `od` output makes sense

[20:23] *** setty1 joined
[20:23] *** pyrimidine joined
[20:24] *** gruwall joined
[20:27] *** ufobat joined
[20:28] *** pyrimidine left
[20:29] *** setty1 left
[20:30] *** domidumont left
[20:30] *** setty1 joined
[20:32] *** gruwall left
[20:34] <notviki> lol... LP6 says MoarVM has "fatest compile time, the fatest runtime

[20:34] <notviki> :P

[20:34] <tailgate> it's tremoudously fast

[20:35] <tailgate> tremendously.

[20:35] <notviki> but is it fat?

[20:35] <notviki> :)

[20:35] *** Tonik left
[20:35] <masak> tremudiously

[20:37] <notviki> Do we want rakudobrew mentioned in the book?

[20:37] <samcv> i have the best VM, the greatest VM. A lot of really smart people are telling me, and believe me people, MoarVM is just tremendous, just tremendous

[20:37] <notviki> samcv: are you in US?

[20:37] <samcv> yes

[20:37] <samcv> :(

[20:37] <notviki> haha :)

[20:42] <[Coke]> notviki: #perl6 has steered people away from it; too complicated for the average user.

[20:42] <notviki> maybe LP6 should too...

[20:42] *** shayan_ joined
[20:43] <[Coke]> I would, esp. since we'll end up having to support it. :)

[20:43] <samcv> brb ~2 hour

[20:43] *** shayan_ left
[20:44] <notviki> /o\

[20:45] *** shayan_ joined
[20:50] *** pyrimidine joined
[20:54] *** bjz left
[20:54] *** espadrine joined
[20:54] *** pyrimidine left
[20:57] *** pyrimidine joined
[20:59] *** cdg joined
[21:03] *** obfusk left
[21:03] *** obfusk_ joined
[21:04] *** bjz joined
[21:05] *** Gasher left
[21:05] *** gcole left
[21:06] *** john51 joined
[21:07] *** bstamour` joined
[21:08] *** john51_ left
[21:10] *** bjz left
[21:10] <AlexDaniel> RT #130494 \o/

[21:11] <AlexDaniel> u: onehusneoahu

[21:11] <unicodable6> AlexDaniel, Found nothing!

[21:11] *** shayan_ left
[21:14] <AlexDaniel> actually, I no longer see any leaks on these bots

[21:14] <AlexDaniel> maybe a bit on statisfiable‚Ä¶

[21:14] *** TEttinger joined
[21:16] *** committable6 left
[21:17] *** esh joined
[21:17] *** benchable6 left
[21:17] *** bisectable6 left
[21:17] *** unicodable6 left
[21:17] *** evalable6 left
[21:17] *** statisfiable6 left
[21:18] *** bisectable6 joined
[21:18] *** unicodable6 joined
[21:18] *** evalable6 joined
[21:18] *** ChanServ sets mode: +v bisectable6

[21:18] *** ChanServ sets mode: +v unicodable6

[21:18] *** benchable6 joined
[21:18] *** ChanServ sets mode: +v benchable6

[21:18] *** statisfiable6 joined
[21:22] *** setty1 left
[21:24] * masak .oO( ironic that a bot called "satisfiable" keeps wanting more and more memory )

[21:25] <Geth>  ecosystem: 07099c41cd | (Jonathan Stowe)++ | META.list

[21:25] <Geth>  ecosystem: rename meta on Sys::LastLog

[21:25] <Geth>  ecosystem: review: https://github.com/perl6/ecosystem/commit/07099c41cd

[21:25] *** hattakhomma joined
[21:25] *** bjz joined
[21:26] * lizmat cues "I can't get no satisfaction"

[21:27] *** pyrimidine left
[21:28] *** pyrimidine joined
[21:28] <AlexDaniel> hm, looks like there are some issues still‚Ä¶

[21:29] <AlexDaniel> but could be my fault too

[21:32] *** pyrimidine left
[21:33] *** pyrimidine joined
[21:34] *** andrzejku left
[21:35] *** bjz left
[21:35] <RabidGravy> there all but one of my modules green on travis again

[21:42] *** committable6 joined
[21:42] *** ChanServ sets mode: +v committable6

[21:44] <RabidGravy> and the last one may just be a big TODO as I don't fancy building the right dependency from scratch

[21:50] *** pmurias left
[21:51] <[Coke]> samcv: my problem with docs was because there is a new async parameter that isn't tied to the original parameter, and it's enabled by default.

[21:51] <samcv> wait what?

[21:52] <samcv> problem with what? not sure why you're messaging me but it is something that i want to know about

[21:52] <samcv> but seems you're responding to something i said?

[21:54] *** setty1 joined
[21:54] <[Coke]> I'm telling you because you added it.

[21:54] <[Coke]> just opened docs#1127

[21:55] <samcv> oh ok

[21:55] <samcv> i edited the async page?

[21:55] <[Coke]> *facepalm*

[21:56] <[Coke]> no, you added --no-proc-async as an option to htmlify

[21:56] <samcv> oh. oooooooooooooooooooooooh

[21:56] <samcv> now it all makes sense

[21:56] *** alimon joined
[21:56] <[Coke]> when I run with --no-proc-async, I now get:

[21:56] <[Coke]> Highlights is reading /Users/williamcoleda/sandbox/perl6-doc

[21:56] <[Coke]> Error: EISDIR: illegal operation on a directory, read

[21:57] <samcv> ah ok

[21:57] *** alimon left
[21:57] <samcv> so i need to fix the --no-proc-async option. got it

[21:57] <samcv> will fix that today

[21:57] *** alimon joined
[21:59] <[Coke]> samcv: https://github.com/perl6/doc/issues/1128

[22:01] *** pyrimidine left
[22:01] <notviki> AlexDaniel: well, I give the book 8/10. Impossible for me to judge as I abhor absolute-beginner programming writing, but at least I never felt the need to shout "OH GOD! WHAT IS THIS GUY DOING!" :)

[22:02] <notviki> m: $_ = 'foo'; dd /'bar'/

[22:02] <camelia> rakudo-moar 9a11ea: OUTPUT¬´/'bar'/‚ê§¬ª

[22:02] *** pyrimidine joined
[22:02] <notviki> m: $_ = 'foo'; dd m/'bar'/

[22:02] <camelia> rakudo-moar 9a11ea: OUTPUT¬´Nil $/ = Nil‚ê§¬ª

[22:02] <AlexDaniel> 8/10! Wow!

[22:02] <notviki> hm

[22:02] <notviki> In the book it says failed match returns Any :/

[22:02] <notviki> oh wait, in the REPL it does print an ANY

[22:03] <notviki> along with Nil

[22:03] <notviki> Well, I guess one challenge that I forsee it small changes like these showing up.

[22:04] <[Coke]> notviki++

[22:05] <RabidGravy> that's always the problem with paper books

[22:07] <[Coke]> samcv: I made you some tickets: https://github.com/perl6/doc/issues/assigned/samcv :)

[22:08] *** shayan_ joined
[22:12] *** skids left
[22:16] *** zakharyas left
[22:17] <SmokeMachine> is there a way to create a multi sub that if I do, for example: my $i = 42; my-multi-sub($i); calls one function and if I do: my-multi-sub(42); calls the other one; like: multi my-multi-sub($a #`{its a var}) {...}; multi my-multi-sub($a #`{its a literal}) {...}; ?

[22:20] *** faraco joined
[22:20] *** gearchef left
[22:20] <lizmat> m: 42++

[22:20] <camelia> rakudo-moar 9a11ea: OUTPUT¬´Cannot resolve caller postfix:<++>(Int); the following candidates‚ê§match the type but require mutable arguments:‚ê§    (Mu:D $a is rw)‚ê§    (Int:D $a is rw)‚ê§‚ê§The following do not match for other reasons:‚ê§    (Bool:D $a is rw)‚ê§    (Bool:U $a is rw‚Ä¶¬ª

[22:20] <faraco> m: say "Perl 6".ords;

[22:20] <camelia> rakudo-moar 9a11ea: OUTPUT¬´(80 101 114 108 32 54)‚ê§¬ª

[22:21] *** RabidGravy left
[22:22] <lizmat> m: multi a($a is rw) { say "writable" ); multi a($a) { say "constant" ); a my $; a 42

[22:22] <camelia> rakudo-moar 9a11ea: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3multi a($a is rw) { say "writable" 7‚èè5); multi a($a) { say "constant" ); a my ‚ê§    expecting any of:‚ê§        postfix‚ê§        statement end‚ê§        statemen‚Ä¶¬ª

[22:22] <lizmat> m: multi a($a is rw) { say "writable" }; multi a($a) { say "constant" }; a my $; a 42

[22:22] <camelia> rakudo-moar 9a11ea: OUTPUT¬´writable‚ê§constant‚ê§¬ª

[22:22] <SmokeMachine> lizmat: thanks!

[22:22] <lizmat> SmokeMachine: ^^^

[22:22] <Geth>  doc: d5cd240ad5 | faraco++ | doc/Type/Cool.pod6

[22:22] <Geth>  doc: changed int code

[22:22] <Geth>  doc: 

[22:22] <Geth>  doc: say "Perl 6".ords; # => (80 101 114 108 32 54)

[22:22] <Geth>  doc: review: https://github.com/perl6/doc/commit/d5cd240ad5

[22:22] * notviki vaguelly recalls a bug with the above

[22:23] <lizmat> wasn't that fixed about 2 months ago ?

[22:23] <notviki> Was it?

[22:23] <notviki> It was an optimzier bug, I recall.

[22:23] <lizmat> it's used in the core for postfix:<++> afaik

[22:23] <notviki> Well, I guess this is a good excuse for me to bother to rebuild perl6.fail to find ticket :P

[22:24] <faraco> argh, I want to pull request. accidentally direct edit.

[22:25] <notviki> m: 160 .chr.uniname.say

[22:25] <camelia> rakudo-moar 9a11ea: OUTPUT¬´NO-BREAK SPACE‚ê§¬ª

[22:25] *** setty1 left
[22:25] <notviki> faraco: it's probably best to change that string to something else.

[22:25] <faraco> but what I did is wrong, or no?

[22:25] *** kyan left
[22:26] <faraco> because, I don't really mess something up.

[22:26] <faraco> want*

[22:26] <notviki> faraco: basically, currently our policy is to write "Perl 6" with non-breaking space (and I think there's even a test that checks for that) but having that in the string is confusing, as you've just encountered.

[22:26] <notviki> m: say "Camelia".ords

[22:26] <camelia> rakudo-moar 9a11ea: OUTPUT¬´(67 97 109 101 108 105 97)‚ê§¬ª

[22:26] <notviki> ¬Ø\_(„ÉÑ)_/¬Ø

[22:26] <faraco> oh, so should I change it to that? I gonna pull request.

[22:26] <notviki> faraco: just commit directly.

[22:26] <faraco> ah okay. :)

[22:27] <faraco> let me check the return number first

[22:27] *** wamba left
[22:27] <faraco> m: say "Camelia".ords;

[22:27] <camelia> rakudo-moar 9a11ea: OUTPUT¬´(67 97 109 101 108 105 97)‚ê§¬ª

[22:30] <notviki> FWIW some of those issues assigned to samcv looks like they can be fixed by anyone.

[22:30] <perlpilot_> And deprive samcv of her glory?!?

[22:30] <notviki> I rather she hacks on all the fancy unicode stuff in rakudo :P

[22:31] *** sean` joined
[22:31] <AlexDaniel> bisect: multi a($a is rw) { say "writable" }; multi a($a) { $a = 99 }; a my $; a 42

[22:31] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=9a11eac) because on both starting points the exit code is 1

[22:31] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/a8b9fde5fa8def88f8ce91959f85b177

[22:31] <bisectable6> AlexDaniel, (2016-11-29) https://github.com/rakudo/rakudo/commit/3982b20efa50b6a166c7da816faa837bf1c48b4d

[22:31] * notviki takes #1130 to put money where the mouth is or whatever that saying is

[22:32] <AlexDaniel> nah that's not it

[22:32] *** lukaramu left
[22:32] <Geth>  doc: c3f1dadd54 | faraco++ | doc/Type/Cool.pod6

[22:32] <Geth>  doc: changed string and int code

[22:32] <Geth>  doc: 

[22:32] <Geth>  doc: Replaced "Perl 6" with "Camelia" and the returned int code.

[22:32] <Geth>  doc: review: https://github.com/perl6/doc/commit/c3f1dadd54

[22:32] <notviki> hm, something's up with RT... my db rebuild says "Found 0 total tickets" :(

[22:33] *** kurahaupo__ left
[22:34] <notviki> [Coke]: I get the same weirdness on my home box with 0x500 when copy-pasting the char into terminal and running .uninames on it :S

[22:34] <notviki> And it's a different OS/terminal

[22:35] *** setty1 joined
[22:35] <faraco> a question. If almost 266 users given push access to the repositories, ain't that dangerous, if someone troll or abuse the power?

[22:36] *** setty1 left
[22:36] <gfldex> that's what git is for

[22:37] <faraco> oh yeah, revert.

[22:37] *** labster left
[22:37] <perlpilot_> faraco: mistakes are far more likely that abuse and that hasn't swamped us yet.

[22:38] <Geth>  doc: 2493a48e3b | (Zoffix Znet)++ | htmlify.p6

[22:38] <Geth>  doc: Remove unused var and conditional

[22:38] <Geth>  doc: 

[22:38] <Geth>  doc: Fixes #1130

[22:38] <Geth>  doc: review: https://github.com/perl6/doc/commit/2493a48e3b

[22:39] <faraco> still standing strong

[22:40] <notviki> faraco: the benefits outweight the risks. People are far more likely to contribute if they don't have to bother someone with PRs for every change.

[22:41] <notviki> Though that does bring up a point: the new policy gives users push to all repos in perl6/ but our bots watch only a few of them.

[22:41] <notviki> by new policy I mean the new default setting for new members (I don't even know if it's really new....)

[22:43] <faraco> I agree with that too. I would want to contribute if I got direct access to the source too.

[22:44] <gfldex> it's much easier to clean up behind one troll then to clean up loads of PRs every day

[22:44] <faraco> you have a point.

[22:45] <faraco> that will take a lot of people to review them one by one. Slowing the development.

[22:46] <gfldex> there are so many nice big target for vandals on the internet, it's unlikely they will ever spot us :)

[22:47] *** pyrimidine left
[22:47] *** pyrimidine joined
[22:48] *** AlexDaniel left
[22:54] *** raschip joined
[22:54] <sean`> Is there a convenient way to collapse runs of the same element in a list?  For example, to turn <a a a b c c> into (<a a a>, <b>, <c c>), or (a => 3, b => 1, c => 2), or some such?

[22:54] <raschip> sean`: yes, a Bag

[22:54] *** pyrimidine left
[22:55] <notviki> sean`: does it need to remain ordered?

[22:55] <sean`> Yes.

[22:56] <notviki> sean`: and <c c c a a a b c c> would turn into <c c c> ... <c c> ? instead of them all being together

[22:56] <sean`> Exactly.

[22:56] <sean`> Like Haskell's Data.List.group function.

[22:57] <raschip> Yeah, a Bag loses the order.

[22:58] <SmokeMachine> m: role Bla {}; multi infix:<||>(Bla $, Bla $) {"OK"}; say (42 but Bla) || (1 but Bla)

[22:58] <camelia> rakudo-moar 9a11ea: OUTPUT¬´42‚ê§¬ª

[22:58] <SmokeMachine> why isn't it using my sub?

[22:59] <notviki> m: role Bla {}; multi infix:<zzz>(Bla $, Bla $) {"OK"}; say (42 but Bla) zzz (1 but Bla)

[22:59] <camelia> rakudo-moar 9a11ea: OUTPUT¬´OK‚ê§¬ª

[22:59] <notviki> prolly some magicks tucked on || to make it shortcurcuit

[22:59] <notviki> m: role Bla {}; multi infix:<||>(Bla $, Bla $) is default {"OK"}; say (42 but Bla) || (1 but Bla)

[22:59] <camelia> rakudo-moar 9a11ea: OUTPUT¬´42‚ê§¬ª

[22:59] * notviki shrugs

[23:00] <SmokeMachine> notviki: its happening with ||, &&, and and or

[23:00] <notviki> ...and all of them shortcurcuit

[23:01] <SmokeMachine> notviki: but should that happens?

[23:01] <raschip> sean`: I don't think there's any builtin special way of doing it.

[23:02] *** shayan_ left
[23:03] *** shayan_ joined
[23:03] <notviki> sean`: the closest thing I can think of is .squish() maybe there's some trick that can be done with its :as{} param

[23:05] <sean`> Bummer.  Oh well, thanks.

[23:06] <raschip> sean`: make a module so that other people can use it.

[23:06] <raschip> That takes a list and returns the list of pairs.

[23:06] <faraco> say <80 101 114 108 160 54>.chrs;   # Perl 6 

[23:06] <faraco> chrs routine

[23:07] <faraco> should I edit this too?

[23:07] <notviki> yes

[23:07] <faraco> ah okay

[23:07] <samcv> [Coke], ah this problem is caused by os x not using the #! in that file. will fix

[23:08] <raschip> samcv: It's not os x anymore, apple now calls it MacOS

[23:08] <samcv> it's still version 10 tho :\

[23:08] <samcv> oh well.

[23:08] <samcv> unless they came out with 11 and i wasn't paying attention

[23:10] <raschip> The X didn't mean 10 for a long time already.

[23:11] <faraco> m: say "Camelia".chrs

[23:11] <camelia> rakudo-moar 9a11ea: OUTPUT¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5Camelia' (indicated by ‚èè)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:11] <faraco> m: say "Camelia".odr;

[23:11] <camelia> rakudo-moar 9a11ea: OUTPUT¬´No such method 'odr' for invocant of type 'Str'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:12] <faraco> m: say "Camelia".odrs;

[23:12] <camelia> rakudo-moar 9a11ea: OUTPUT¬´No such method 'odrs' for invocant of type 'Str'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:12] <geekosaur> did you mean .ords?

[23:12] <faraco> oh

[23:12] <faraco> m: say "Camelia".ords;

[23:12] <camelia> rakudo-moar 9a11ea: OUTPUT¬´(67 97 109 101 108 105 97)‚ê§¬ª

[23:12] <geekosaur> (I think there's an open bug for having it suggest those the way it does for subs?)

[23:13] <faraco> m: say say <67 97 109 101 108 105 97>.chrs

[23:13] <camelia> rakudo-moar 9a11ea: OUTPUT¬´Camelia‚ê§True‚ê§¬ª

[23:13] <faraco> thanks geekosaur

[23:14] <raschip> The True in the end is because you doubled "say".

[23:14] <SmokeMachine> notviki: it the actual behavior of that code right or wrong?

[23:15] <Geth>  doc: 5bc6285938 | faraco++ | doc/Type/Cool.pod6

[23:15] <Geth>  doc: changed chrs routine input and returned string

[23:15] <Geth>  doc: review: https://github.com/perl6/doc/commit/5bc6285938

[23:15] <notviki> m: dd [<c c c a a a b c c>] Z&push [<c c c a a a b c c>]

[23:15] <camelia> rakudo-moar 9a11ea: OUTPUT¬´(all("c", "c"), all("c", "c"), all("c", "c"), all("a", "a"), all("a", "a"), all("a", "a"), all("b", "b"), all("c", "c"), all("c", "c")).Seq‚ê§¬ª

[23:16] <notviki> What's it doing? junctioning the return value of push?

[23:16] <notviki> SmokeMachine: the || thing? No idea

[23:16] <notviki> m: role Bla {};sub infix:<||>(Bla $, Bla $) is default {"OK"}; say (42 but Bla) || (1 but Bla)

[23:16] <camelia> rakudo-moar 9a11ea: OUTPUT¬´42‚ê§¬ª

[23:16] <SmokeMachine> I was going to ask about that push returning a junction...

[23:17] <SmokeMachine> notviki: for me, it looks like a bug... what do you think?

[23:19] <notviki> m: role Bla {}; sub infix:<||>(Bla $ where :so, Bla $ where :so) is default {"OK"}; say (42 but Bla) || (1 but Bla)

[23:19] <camelia> rakudo-moar 9a11ea: OUTPUT¬´42‚ê§¬ª

[23:20] <notviki> s: &infix:<||>

[23:20] <SourceBaby> notviki, Sauce is at https://github.com/rakudo/rakudo/blob/9a11eac/src/core/Bool.pm#L106

[23:20] <SmokeMachine> whats :so?

[23:20] <notviki> checks for turth

[23:20] <notviki> *truth

[23:21] <notviki> m: sub infix:<||>(42, 42) {"OK"}; say (42 || 42)

[23:21] <camelia> rakudo-moar 9a11ea: OUTPUT¬´42‚ê§¬ª

[23:21] <notviki> m: multi infix:<||>(42, 42) {"OK"}; say (42 || 42)

[23:21] <camelia> rakudo-moar 9a11ea: OUTPUT¬´42‚ê§¬ª

[23:21] <notviki> haha

[23:21] <notviki> SmokeMachine: yeah, I'd say it's a bug

[23:21] <SmokeMachine> :)

[23:21] *** PotatoGim left
[23:21] <notviki> but no idea which "it's" it is :P

[23:21] <raschip> SmokeMachine: It casts it to Bool, I'd say.

[23:22] <SmokeMachine> ok so casts to Bool... but :so?

[23:22] *** jkva left
[23:22] <SmokeMachine> is it like {.so} ?

[23:22] <notviki> .oO( casts to Bool? )

[23:22] <notviki> SmokeMachine: yeah

[23:22] *** mithaldu_ left
[23:22] <notviki> m: say 42 ~~ :so

[23:22] <camelia> rakudo-moar 9a11ea: OUTPUT¬´True‚ê§¬ª

[23:22] <notviki> m: say (42 but False) ~~ :so

[23:22] <camelia> rakudo-moar 9a11ea: OUTPUT¬´False‚ê§¬ª

[23:22] <SmokeMachine> is it a special syntax or is a adverb?

[23:23] <notviki> no idea

[23:23] *** ufobat left
[23:23] *** labster joined
[23:23] *** tbrowder left
[23:23] <notviki> s: &infix:<~~>, \(42, :so)

[23:23] <SourceBaby> notviki, Something's wrong: ‚ê§ERR: Could not find candidate that can do \(42, :so)‚ê§  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 37‚ê§  in block <unit> at -e line 6‚ê§‚ê§

[23:23] <notviki> s: &infix:<~~>, \(42, "so" => True)

[23:23] <SourceBaby> notviki, Sauce is at https://github.com/rakudo/rakudo/blob/9a11eac/src/core/Mu.pm#L829

[23:23] <notviki> s: &infix:<~~>, \("so" => True, 42)

[23:23] <SourceBaby> notviki, Sauce is at https://github.com/rakudo/rakudo/blob/9a11eac/src/core/Mu.pm#L829

[23:23] <notviki> eh

[23:23] <notviki> m: dd :so

[23:23] <camelia> rakudo-moar 9a11ea: OUTPUT¬´block <unit>‚ê§¬ª

[23:24] <notviki> m: dd [:so]

[23:24] <camelia> rakudo-moar 9a11ea: OUTPUT¬´[:so]‚ê§¬ª

[23:24] *** jkva joined
[23:24] <notviki> no idea

[23:25] <notviki> it parses just like any colonpair...

[23:25] *** PotatoGim joined
[23:25] <SmokeMachine> :)

[23:25] <notviki> So... anyone figured out how to squish <c c c a a a b c c> ? :)

[23:25] <raschip> m: say 42 ~~ :not

[23:25] <camelia> rakudo-moar 9a11ea: OUTPUT¬´False‚ê§¬ª

[23:26] <raschip> (:not).perl

[23:26] <raschip> m: (:not).perl

[23:26] <camelia> rakudo-moar 9a11ea: ( no output )

[23:26] *** tbrowder joined
[23:26] <raschip> m: say (:not).perl

[23:26] <camelia> rakudo-moar 9a11ea: OUTPUT¬´:not‚ê§¬ª

[23:26] <raschip> m: say (:so).perl

[23:26] <camelia> rakudo-moar 9a11ea: OUTPUT¬´:so‚ê§¬ª

[23:26] *** mithaldu_ joined
[23:27] <SmokeMachine> m: sub by2 {.grep: * %% 2}; <1 3 5> ~~ :by2

[23:27] <camelia> rakudo-moar 9a11ea: OUTPUT¬´No such method 'by2' for invocant of type 'List'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:27] <SmokeMachine> it calls a method!

[23:28] <notviki> oh right

[23:28] <notviki> SmokeMachine++

[23:28] <notviki> s: &infix:<~~>, \("so" => True, 42)

[23:28] <SourceBaby> notviki, Sauce is at https://github.com/rakudo/rakudo/blob/9a11eac/src/core/Mu.pm#L829

[23:28] <notviki> Oh right, I should've followed that along the method thing is on Pair.ACCEPTS

[23:29] <SmokeMachine> m: use MONKEY-TYPING; augment class Int{ method by2 {.grep: * %% 2}}; <1 3 5> ~~ :by2

[23:29] <camelia> rakudo-moar 9a11ea: OUTPUT¬´No such method 'by2' for invocant of type 'List'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[23:29] <SmokeMachine> m: use MONKEY-TYPING; augment class List{ method by2 {.grep: * %% 2}}; <1 3 5> ~~ :by2

[23:29] <camelia> rakudo-moar 9a11ea: OUTPUT¬´Use of uninitialized value of type Any in numeric context‚ê§  in whatevercode  at <tmp> line 1‚ê§¬ª

[23:30] *** faraco left
[23:31] <notviki> s: "by2" => True, 'ACCEPTS', \(<1 3 5>)

[23:31] <SourceBaby> notviki, Sauce is at https://github.com/rakudo/rakudo/blob/9a11eac/src/core/Pair.pm#L36

[23:31] <SmokeMachine> m: use MONKEY-TYPING; augment class List{ method by2 {self.grep: * %% 2}}; <1 3 5> ~~ :by2

[23:31] <camelia> rakudo-moar 9a11ea: ( no output )

[23:31] <SmokeMachine> m: use MONKEY-TYPING; augment class List{ method by2 {self.grep: * %% 2}}; say <1 3 5> ~~ :by2

[23:31] <camelia> rakudo-moar 9a11ea: OUTPUT¬´False‚ê§¬ª

[23:31] <SmokeMachine> m: use MONKEY-TYPING; augment class List{ method by2 {self.grep: * %% 2}}; say <1 3 5 2> ~~ :by2

[23:31] <camelia> rakudo-moar 9a11ea: OUTPUT¬´True‚ê§¬ª

[23:31] <notviki> \o/

[23:31] <SmokeMachine> that works!

[23:31] *** faraco joined
[23:31] <notviki> yeah, neat

[23:33] <raschip> but why?

[23:33] <notviki> raschip: 42

[23:33] <SmokeMachine> raschip: because...

[23:33] <notviki> m: say WHY 'Life, the Universe and Everything':

[23:33] <camelia> rakudo-moar 9a11ea: OUTPUT¬´42‚ê§¬ª

[23:33] <SmokeMachine> :)

[23:34] <raschip> Is the question of Life, The Universe and Anything, "why?"?

[23:35] <SmokeMachine> raschip: https://en.wikipedia.org/wiki/42_(number)

[23:35] <notviki> Oh god... raschip questions even the ultimate question! :D

[23:36] <raschip> Well, one of the premises of the books is that they want the answer to "The Question", and the answer is 42. But they don't actually know what the question is.

[23:37] <samcv> m: say WHY 42

[23:37] <camelia> rakudo-moar 9a11ea: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    WHY used at line 1‚ê§‚ê§¬ª

[23:37] <samcv> m: say WHY '42'

[23:37] <camelia> rakudo-moar 9a11ea: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    WHY used at line 1‚ê§‚ê§¬ª

[23:37] * notviki points to : at the end

[23:37] <samcv> m: say WHY 'Life, the Universe and Everything':

[23:37] <camelia> rakudo-moar 9a11ea: OUTPUT¬´42‚ê§¬ª

[23:37] <samcv> m: say WHY 42:

[23:37] <camelia> rakudo-moar 9a11ea: OUTPUT¬´(Any)‚ê§¬ª

[23:38] <samcv> m: sub w ( $thing ) {

[23:38] <camelia> rakudo-moar 9a11ea: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Missing block‚ê§at <tmp>:1‚ê§------> 3sub w ( $thing ) {7‚èè5<EOL>‚ê§¬ª

[23:38] <samcv> oop

[23:38] <SmokeMachine> notviki: how about the || problem?

[23:38] <notviki> What about it?

[23:38] <notviki> I was still trying to figure out the squish thing

[23:39] <SmokeMachine> do you think I should open a bug report?

[23:39] <notviki> there gotta be some clever thing for it

[23:39] <sean`> Hmm.  If I have my list in a named array @a, I can do: @a.squish.map({ grep * eq $_, @a }).  Might be the most concise way to do it.

[23:40] <notviki> m: role Bla {}; sub infix:<||>(Bla $ where {True}, Bla $ where {True}) is default {"OK"}; say (42 but Bla) || (1 but Bla)

[23:40] <camelia> rakudo-moar 9a11ea: OUTPUT¬´42‚ê§¬ª

[23:40] <notviki> m: role Bla {}; sub infix:<||>(Bla $ where {True}, Bla $ where {True}) {"OK"}; say (42 but Bla) || (1 but Bla)

[23:40] <camelia> rakudo-moar 9a11ea: OUTPUT¬´42‚ê§¬ª

[23:40] <notviki> m: role Bla {}; sub infix:<||>(Bla $ where {True}, Bla $ where {True}) {"OK"}; say (0 but Bla) || (1 but Bla)

[23:40] <camelia> rakudo-moar 9a11ea: OUTPUT¬´1‚ê§¬ª

[23:40] <notviki> m: role Bla {}; sub infix:<||>($ where {True}, $ where {True}) {"OK"}; say (0 but Bla) || (1 but Bla)

[23:40] <camelia> rakudo-moar 9a11ea: OUTPUT¬´1‚ê§¬ª

[23:40] <notviki> m: role Bla {}; sub infix:<||>($ where {True}, $ where {True}) {"OK"}; say (0) || (1)

[23:40] <camelia> rakudo-moar 9a11ea: OUTPUT¬´1‚ê§¬ª

[23:41] <notviki> m: sub infix:<||>($ where {True}, $ where {True}) {"OK"}; say (0) || (1)

[23:41] <camelia> rakudo-moar 9a11ea: OUTPUT¬´1‚ê§¬ª

[23:41] <notviki> Ok, I misread one of my previous results.

[23:42] <notviki> m: sub infix:<||>($ where {True}, $ where {True}) {"OK"}; say (0) [||] (1)

[23:42] <camelia> rakudo-moar 9a11ea: OUTPUT¬´1‚ê§¬ª

[23:42] <notviki> m: sub infix:<||>($ where {True}, $ where {True}) {"OK"}; say (0) &[||] (1)

[23:42] <camelia> rakudo-moar 9a11ea: OUTPUT¬´all(0, 1)‚ê§¬ª

[23:42] <notviki> neat

[23:42] <notviki> SmokeMachine: yeah, open it. Thought I can see the answer "these are special and you can't define customs for them" as one possible answer.

[23:43] <notviki> m: sub infix:<||>($ where {True}, $ where {True}) {"OK"}; dd &infix:<||>(0, 1)

[23:43] <camelia> rakudo-moar 9a11ea: OUTPUT¬´"OK"‚ê§¬ª

[23:43] <SmokeMachine> !

[23:43] <SmokeMachine> worked!

[23:43] <notviki> But I called it as a sub not like an op....

[23:43] <notviki> I suspect it'll also work in [] thing

[23:43] <SmokeMachine> right...

[23:44] <notviki> m: sub infix:<||>($ where {True}, $ where {True}) {"OK"}; dd [||] 0, 1

[23:44] <camelia> rakudo-moar 9a11ea: OUTPUT¬´"OK"‚ê§¬ª

[23:44] <raschip> Any         Pair      test object attribute   ?."{X.key}" === ?X.value (e.g. filetests)

[23:45] <notviki> screw it...

[23:45] <notviki> If anyone figures out a nice consice way to turn <c c c a a a b c c> into (c => 3, a => 3, b => 1, c => 2) ping me

[23:46] *** sean` left
[23:46] <TimToady> m: say gather for <c c c a a a b c c>.rotor(2 => -1, :partial) -> ($a, $b = '') { state @s; push @s, $a; if $a !eqv $b { take @s; @s = () } } 

[23:46] <camelia> rakudo-moar 9a11ea: OUTPUT¬´([c c c] [a a a] [b] [c c])‚ê§¬ª

[23:46] <notviki> oho

[23:46] <TimToady> it's not very concise, so I didn't ping you :)

[23:46] <notviki> :D

[23:46] <notviki> TimToady++

[23:47] <raschip> "$ ~~ :so" is "if $.so === True"

[23:47] <TimToady> Pair.ACCEPTS treats the key as a method name to be evaluated for Bool

[23:49] <notviki> raschip: $.so.Bool === True

[23:49] <notviki> raschip: it's this one: https://github.com/rakudo/rakudo/blob/9a11eac/src/core/Pair.pm#L37

[23:50] <TimToady> note $.so is not the same as ($).so

[23:50] <notviki> ah, right :D

[23:53] *** buggable left
[23:53] <ugexe> m: say <c c c a a a b c c>.categorize({$_}).map({.key => .value.elems})

[23:53] <camelia> rakudo-moar 9a11ea: OUTPUT¬´(a => 3 c => 5 b => 1)‚ê§¬ª

[23:53] *** buggable joined
[23:53] *** ChanServ sets mode: +v buggable

[23:53] <ugexe> doh

[23:56] *** pecastro left
