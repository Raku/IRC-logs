[00:00] *** mcmillhj joined
[00:01] *** zapwai joined
[00:03] *** awwaiid left
[00:04] *** mr-foobar left
[00:05] *** mcmillhj left
[00:07] *** devmikey joined
[00:08] *** mr-foobar joined
[00:09] *** BenGoldberg joined
[00:10] <seatek> I forgot this: in Perl5 Moose you can use variable attribute names like $self->$attr_name -- anyone know the equiv. in Perl6 for variable attribute names?

[00:11] <timotimo> self."$attr_name"()

[00:11] <seatek> oh yeah!!!! i was trying those crazy ::($attr) ones ;)

[00:11] <timotimo> heh, :: is for packages and lexical scopes

[00:12] <seatek> well self is for methods ;)

[00:12] <timotimo> right, and attributes are accessed with accessor methods

[00:12] <timotimo> private attributes are different, though

[00:12] <seatek> yay

[00:12] <seatek> yeah

[00:12] *** bjz joined
[00:17] *** mcmillhj joined
[00:19] *** devmikey left
[00:21] *** mcmillhj left
[00:22] *** troys is now known as troys_

[00:22] *** mcmillhj joined
[00:26] *** Cabanossi left
[00:27] *** Cabanossi joined
[00:27] *** mcmillhj left
[00:32] *** mr-foobar left
[00:35] *** mr-foobar joined
[00:35] *** awwaiid joined
[00:38] *** lookatme joined
[00:38] <lookatme> morning

[00:39] *** mcmillhj joined
[00:44] *** mcmillhj left
[00:45] *** baest left
[00:46] *** mcmillhj joined
[00:47] *** awwaiid left
[00:49] *** awwaiid joined
[00:54] *** awwaiid left
[00:55] *** mcmillhj left
[00:55] *** cog_ joined
[00:55] *** Cabanossi left
[00:56] *** Cabanossi joined
[00:58] *** cognominal left
[00:59] *** awwaiid joined
[01:03] *** mr-foobar left
[01:04] *** awwaiid left
[01:07] *** mr-foobar joined
[01:10] *** awwaiid joined
[01:13] *** AlexDaniel left
[01:17] *** awwaiid left
[01:19] *** awwaiid joined
[01:26] *** awwaiid left
[01:32] *** mr-foobar left
[01:33] *** awwaiid joined
[01:37] *** mr-foobar joined
[01:38] *** awwaiid left
[01:39] *** awwaiid joined
[01:39] *** skids left
[01:46] *** skids joined
[01:46] *** ilbot3 left
[01:48] *** awwaiid left
[01:49] *** awwaiid joined
[01:51] *** ilbot3 joined
[01:51] *** ChanServ sets mode: +v ilbot3

[01:53] *** awwaiid left
[01:55] *** awwaiid joined
[02:02] *** awwaiid left
[02:04] *** awwaiid joined
[02:18] *** noganex joined
[02:21] *** noganex_ left
[02:25] *** awwaiid left
[02:27] *** awwaiid joined
[02:28] *** cdg joined
[02:33] *** bjz_ joined
[02:34] *** awwaiid left
[02:35] *** bjz left
[02:36] *** zapwai left
[02:41] *** awwaiid joined
[02:45] *** awwaiid left
[02:46] *** awwaiid joined
[02:53] *** awwaiid left
[02:58] *** cpage_ left
[02:59] *** awwaiid joined
[03:05] *** awwaiid left
[03:06] *** awwaiid joined
[03:09] *** Cabanossi left
[03:10] *** Cabanossi joined
[03:16] *** awwaiid left
[03:16] *** awwaiid joined
[03:16] *** cyphase left
[03:21] *** awwaiid left
[03:23] *** pilne left
[03:23] *** BenGoldberg left
[03:32] *** awwaiid joined
[03:34] *** mr-foobar left
[03:35] *** mr-foobar joined
[03:37] *** awwaiid left
[03:38] *** awwaiid joined
[03:40] *** cpage_ joined
[03:41] *** cog_ left
[03:42] *** awwaiid left
[03:44] *** awwaiid joined
[03:49] *** awwaiid left
[03:54] *** roguelazer left
[03:55] *** awwaiid joined
[03:57] *** roguelazer joined
[04:00] *** awwaiid left
[04:07] *** awwaiid joined
[04:10] *** troys_ is now known as troys

[04:15] *** cdg left
[04:17] *** awwaiid left
[04:18] *** rouking joined
[04:23] <moritz> lizmat++ # https://p6weekly.wordpress.com/2017/06/26/2017-26-half-way-there/

[04:31] *** khw left
[04:33] *** mr-foobar left
[04:36] *** dwarring left
[04:36] *** mr-foobar joined
[04:37] <lookatme> moritz++

[04:40] *** awwaiid joined
[04:44] *** cyphase joined
[04:45] *** awwaiid left
[04:46] *** awwaiid joined
[04:49] *** kyan left
[04:51] *** awwaiid left
[04:51] *** awwaiid joined
[04:52] *** curan joined
[04:54] *** cyphase left
[04:56] *** awwaiid left
[04:57] *** awwaiid joined
[04:59] *** skids left
[05:01] *** awwaiid left
[05:03] *** awwaiid joined
[05:03] *** skids joined
[05:04] *** bjz_ left
[05:06] *** mcmillhj joined
[05:06] *** troys is now known as troys_

[05:25] *** ilogger2 joined
[05:25] *** ChanServ sets mode: +v ilogger2

[05:36] *** dylanwh_ joined
[05:37] *** raydiak_ joined
[05:38] *** MilkmanD1n joined
[05:38] *** salva0 joined
[05:40] *** protium joined
[05:41] *** musca joined
[05:42] *** rouking joined
[05:44] *** lowbro joined
[05:44] *** wamba joined
[05:44] *** lowbro left
[05:44] *** lowbro joined
[05:50] *** aindilis joined
[05:50] *** mr-foobar joined
[05:51] *** domidumont joined
[05:51] *** xtreak joined
[05:51] *** awwaiid joined
[05:56] *** awwaiid left
[05:57] *** domidumont left
[05:57] *** awwaiid joined
[05:57] *** domidumont joined
[05:58] *** mr-foobar left
[06:02] *** awwaiid left
[06:02] *** mr-foobar joined
[06:03] *** awwaiid joined
[06:04] *** ufobat joined
[06:05] *** rouking left
[06:11] *** wamba left
[06:11] *** awwaiid left
[06:13] *** mr-fooba_ joined
[06:14] *** mr-foobar left
[06:29] *** wamba joined
[06:30] *** awwaiid joined
[06:33] *** parv joined
[06:35] *** awwaiid left
[06:36] *** awwaiid joined
[06:37] *** cog_ joined
[06:41] *** awwaiid left
[06:41] *** awwaiid joined
[06:45] *** domidumont left
[06:45] *** awwaiid left
[06:46] *** xzhao joined
[06:46] *** awwaiid joined
[06:51] *** awwaiid left
[06:52] *** awwaiid joined
[06:57] *** awwaiid left
[06:58] *** awwaiid joined
[06:58] *** vendethiel joined
[07:00] *** cog_ left
[07:01] *** domidumont joined
[07:07] *** abraxxa joined
[07:08] *** awwaiid left
[07:09] *** bjz_ joined
[07:09] <ufobat> ola

[07:10] *** awwaiid joined
[07:13] *** |oLa| joined
[07:15] *** awwaiid left
[07:16] *** awwaiid joined
[07:23] *** awwaiid left
[07:25] *** awwaiid joined
[07:26] *** |oLa| left
[07:30] *** imcsk8 joined
[07:31] * lizmat_ clickbaits https://p6weekly.wordpress.com/2017/06/26/2017-26-half-way-there/

[07:36] *** awwaiid left
[07:37] *** awwaiid joined
[07:38] <El_Che> hello

[07:39] *** astj joined
[07:40] <parv> yo

[07:41] <parv> howizit?

[07:44] *** astj left
[07:44] *** wamba left
[07:45] *** dakkar joined
[07:45] *** awwaiid left
[07:46] *** awwaiid joined
[07:48] *** astj joined
[07:48] *** imcsk8 left
[07:49] *** kaare__ joined
[07:50] <lookatme> hello

[07:50] *** imcsk8 joined
[07:51] *** awwaiid left
[07:51] *** awwaiid joined
[07:52] <melezhik> Hi!

[07:52] <melezhik> I am reading docs of https://github.com/zoffixznet/perl6-Proc-Q  and not quite clear how can I pass parameters to proc-q ?

[07:52] <melezhik> I am talking about commands parameter - https://github.com/zoffixznet/perl6-Proc-Q#commands

[07:53] <melezhik> say I want to run external program by using Proc::Q

[07:54] <melezhik> the example I see works fine, but when I try to adopt it I get this

[07:55] <melezhik> perl6 -e 'use Proc::Q; proc-q {"echo OK"};'

[07:55] <melezhik> Constraint type check failed in binding to parameter '@commands'; expected anonymous constraint to be met but got Array ($[-> ;; $_? is raw { ...)

[07:56] <melezhik> I the doc for command parameter I read - "A list of lists, where each of inner lists is a list of arguments to Proc::Async.new. "

[07:57] <melezhik> but I can't come up with a proper way to use it ...

[07:59] <llfourn> m: say ({ "echo OK" }).WHAT

[07:59] <camelia> rakudo-moar 823011: OUTPUT: «(Block)␤»

[07:59] <llfourn> but what it wants is a list of lists

[07:59] <llfourn> so if you just want one echo

[08:00] <llfourn> do proc-q [<echo OK>,]

[08:00] <llfourn> actually no need for the comma

[08:00] <llfourn> m: say [<echo OK>]

[08:00] <camelia> rakudo-moar 823011: OUTPUT: «[echo OK]␤»

[08:00] <llfourn> m: say [<echo OK>,] # actually there is

[08:00] <camelia> rakudo-moar 823011: OUTPUT: «[(echo OK)]␤»

[08:01] *** awwaiid left
[08:01] <llfourn> melezhik: ^

[08:02] *** awwaiid joined
[08:03] <melezhik> hi llfourn:

[08:03] <melezhik> perl6 -e 'use Proc::Q; proc-q [<echo OK>];'

[08:03] <melezhik> Constraint type check failed in binding to parameter '@commands'; expected anonymous constraint to be met but got Array ($["echo", "OK"])

[08:03] <llfourn> o.o

[08:03] *** jonas1 joined
[08:03] <llfourn> oh

[08:03] <llfourn> they have to be a list for some reason

[08:03] *** nadim joined
[08:04] <llfourn> m: dd (<echo OK>,)

[08:04] <camelia> rakudo-moar 823011: OUTPUT: «(("echo", "OK"),)␤»

[08:04] <llfourn> melezhik: like that ^

[08:05] <melezhik> perl6 -e 'use Proc::Q; proc-q (("echo", "OK"),);' - succeed

[08:05] <llfourn> \o/

[08:05] <melezhik> btw it requires the last comma

[08:05] <llfourn> yep

[08:05] <melezhik> after "OK"

[08:05] <melezhik> thanks !

[08:05] <llfourn> nw gl

[08:06] <melezhik> will go further with my investigation of Proc::Q and stuff ;)))

[08:06] <llfourn> I'm interested to see where you are going with sparrowdo etc

[08:06] <llfourn> I read your blog post on using it to do docker

[08:06] <llfourn> I'm currently trying the same sort of things with spitsh

[08:07] <parv> that comma makes the first arg as a list; turning that data into list-of-list

[08:07] *** awwaiid left
[08:07] <melezhik> I am not sure about certain target auditory, meanwhile I use sparrowdo at my current work, not that extensively 

[08:07] <llfourn> target audience? 

[08:08] <melezhik> spitsh? probably I have already seen that ... 

[08:08] <llfourn> melezhik: https://github.com/spitsh/spitsh

[08:08] <melezhik> yeah, target audience ... sorry 

[08:08] <melezhik> yeah will look at ...

[08:08] <parv> m: my @x = (<a b>); my @y = (<a b>,) ; say @x[0].WHAT ; say @y[0].WHAT

[08:08] <camelia> rakudo-moar 823011: OUTPUT: «(Str)␤(List)␤»

[08:08] <llfourn> heh that makes too of us

[08:09] <llfourn> melezhik: are you going to be at TPC eu?

[08:09] <llfourn> two*

[08:10] <melezhik> unfortunatelly I don't have much time at the moment, pretty buzy with many things, so can't attend 

[08:10] *** wamba joined
[08:10] *** Cabanossi joined
[08:10] <llfourn> ah k

[08:10] * llfourn &

[08:11] <melezhik> looks spitsh is more intelegent than sparrowdo, as under the hood sparrowdo just pushes jobs over ssh and runs sparrow client written on Perl5 ... 

[08:11] <melezhik> ))

[08:12] *** rindolf joined
[08:13] *** awwaiid joined
[08:15] <jsimonet> m: use NativeCall; subset char_t of Str; my Pointer[char_t] $c;

[08:15] <camelia> rakudo-moar 823011: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while parameterizing Pointer␤at <tmp>:1␤Exception details:␤  A typed pointer can only hold:␤    (u)int8, (u)int16, (u)int32, (u)int64, (u)long, (u)longlong, num16, num32, (s)s…»

[08:17] <jsimonet> Hello, I'm trying to use a C lib in Perl6 and I used GPTrixie to generate Perl6 mapping, but some special types are used in Pointer. Sould I modify all sub definitions or is there another way ?

[08:18] *** awwaiid left
[08:19] *** awwaiid joined
[08:19] *** robertle joined
[08:20] <parv> i am using rakudo rg276d4. why is there no difference between "@x = (<a b>)" & "@x = [ <a b> ]" (both ~~ & == return True)?

[08:20] *** |oLa| joined
[08:24] *** awwaiid left
[08:24] <melezhik> parv: thanks for explanation of the last comma 

[08:27] <parv> happy to help, with what little I know. I am also learning

[08:29] <melezhik> ))

[08:30] <melezhik> how to read a directory structure ? I need the first level directories inside some dir ...

[08:31] <melezhik> probably this one ? - https://docs.perl6.org/routine/dir

[08:31] <Ven``> o/

[08:31] <melezhik> might be handy with in-dir?

[08:31] <moritz> melezhik: yes, dir

[08:31] <moritz> melezhik: and you can pass a dir to dir :-)

[08:32] <moritz> m: say dir('/tmp')

[08:32] <camelia> rakudo-moar 823011: OUTPUT: «("/tmp/y2yamldata-M2wvA1".IO "/tmp/.X11-unix".IO "/tmp/.ICE-unix".IO "/tmp/.XIM-unix".IO "/tmp/.font-unix".IO "/tmp/.Test-unix".IO "/tmp/3rat9uqe4F".IO "/tmp/IXajBf20V7".IO "/tmp/b_kUNwvxo8".IO "/tmp/gzUJ6dIrZV".IO "/tmp/EMgpnqBzo8".IO "/tmp/hsperfdata_c…»

[08:32] <melezhik> thanks, moritz:

[08:32] *** awwaiid joined
[08:36] *** awwaiid left
[08:39] *** Cabanossi left
[08:40] *** Cabanossi joined
[08:45] *** xtreak left
[08:46] *** xtreak joined
[08:46] *** xtreak left
[08:46] *** xtreak joined
[08:50] *** awwaiid joined
[08:55] *** awwaiid left
[08:56] <parv> does zef know about modules installed with installation of rakudo (if any installed at all) besides the ones installed by zef itself?

[08:58] <parv> nevermind, seems so.

[09:00] *** awwaiid joined
[09:05] *** awwaiid left
[09:06] *** awwaiid joined
[09:06] *** FROGGS joined
[09:07] *** astj left
[09:08] *** astj joined
[09:13] *** awwaiid left
[09:14] *** awwaiid joined
[09:14] <parv> later people ...

[09:15] *** parv left
[09:15] *** astj left
[09:16] *** xtreak left
[09:16] *** astj joined
[09:16] *** xtreak joined
[09:18] *** MilkmanD1n left
[09:20] *** xtreak left
[09:21] *** MilkmanDan joined
[09:22] *** cyphase joined
[09:23] *** awwaiid left
[09:25] *** cyphase left
[09:25] *** andrzejku_ joined
[09:26] *** nebuchad` joined
[09:26] *** colomon_ joined
[09:27] *** cyphase joined
[09:27] *** Some-body_ joined
[09:27] *** BuildTheRobots_ joined
[09:28] *** nadim_ joined
[09:29] *** cxreg joined
[09:29] *** yubimusubi joined
[09:29] *** broquaint joined
[09:29] *** xtreak joined
[09:30] *** ranguard joined
[09:30] *** cono_ joined
[09:30] *** Juerd_ joined
[09:30] *** gfldex_ joined
[09:30] *** smash_ joined
[09:30] *** [Coke]_ joined
[09:30] *** cyphase left
[09:30] *** ponbiki_ joined
[09:30] *** sivoais_ joined
[09:30] *** cyphase joined
[09:30] *** cyphase left
[09:31] *** cog_ joined
[09:31] *** curan joined
[09:31] *** cyphase joined
[09:33] *** Alikzus_ joined
[09:34] *** FROGGS left
[09:34] *** nadim left
[09:35] *** Some-body_ is now known as DarthGandalf

[09:35] *** colomon_ is now known as colomon

[09:35] *** Juerd_ is now known as Juerd

[09:35] *** cyphase left
[09:35] *** BuildTheRobots_ is now known as BuildTheRobots

[09:36] *** awwaiid joined
[09:37] *** nowan joined
[09:37] *** cyphase joined
[09:39] *** astj left
[09:40] *** zacts joined
[09:41] *** camelia joined
[09:41] *** cyphase left
[09:41] *** awwaiid left
[09:41] *** FROGGS joined
[09:42] *** araujo joined
[09:42] *** awwaiid joined
[09:42] *** araujo left
[09:42] *** araujo joined
[09:42] *** cyphase joined
[09:42] *** rba_ joined
[09:42] *** ChanServ sets mode: +v camelia

[09:42] *** cyphase left
[09:44] *** bjz_ left
[09:44] *** cyphase joined
[09:46] *** awwaiid left
[09:47] *** bjz joined
[09:47] *** awwaiid joined
[09:47] *** cyphase left
[09:48] *** cyphase joined
[09:48] *** cyphase left
[09:51] *** astj joined
[09:52] *** awwaiid left
[09:53] *** ribasushi joined
[09:53] *** awwaiid joined
[09:53] *** Cabanossi left
[09:55] *** Cabanossi joined
[09:55] *** astj left
[09:56] <llfourn> m: say *<foo>:v # why can't I adverb?

[09:56] <camelia> rakudo-moar c72746: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤You can't adverb ␤at <tmp>:1␤------> 3say *<foo>:v7⏏5 # why can't I adverb?␤    expecting any of:␤        pair value␤»

[09:56] *** cog_ left
[09:58] *** awwaiid left
[09:58] *** awwaiid joined
[10:03] *** awwaiid left
[10:04] *** awwaiid joined
[10:11] *** awwaiid left
[10:12] *** sena_kun joined
[10:12] *** awwaiid joined
[10:12] <sena_kun> o/

[10:13] <sena_kun> m: "foo/bar".IO.add("../../").resolve.relative.say;

[10:13] <camelia> rakudo-moar c72746: OUTPUT: «foo/bar/../..␤»

[10:13] *** zakharyas joined
[10:13] <sena_kun> But https://docs.perl6.org/type/IO::Path#method_add

[10:13] <sena_kun> Is it docs or implementation?

[10:16] *** |oLa| left
[10:16] <FROGGS> maybe it only resolves stuff that actually exists?

[10:16] <FROGGS> have you tested that?

[10:17] <sena_kun> Nope. Let's try...

[10:17] *** awwaiid left
[10:18] <sena_kun> Indeed. Fool me! FROGGS, thanks.

[10:18] <FROGGS> :o)

[10:18] <FROGGS> probably means we should put that in the docs...

[10:18] *** awwaiid joined
[10:18] <sena_kun> Yeah.

[10:18] *** bjz left
[10:19] *** wtw joined
[10:21] <FROGGS> sena_kun: are you going to do it?

[10:21] <sena_kun> FROGGS, yeah. Though it is assume method, not `add`. And I'll fix indentation too.

[10:23] <sena_kun> Hmmm. Well, it doesn't seem like a problem, much more as a fault of mine. I mean, resolve method says explicity that "This means that the filesystem is examined for each directory in the path". So fixing only indentation then...

[10:24] <Geth> ¦ doc: 5cca681092 | Altai-man++ (committed using GitHub Web editor) | doc/Type/IO/Path.pod6

[10:24] <Geth> ¦ doc: Fix up code sample indentation

[10:24] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5cca681092

[10:24] *** awwaiid left
[10:28] <Geth> ¦ doc: e1c508f314 | Altai-man++ (committed using GitHub Web editor) | doc/Type/IO/Path.pod6

[10:28] <Geth> ¦ doc: More indentation fixing

[10:28] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e1c508f314

[10:33] *** |oLa| joined
[10:35] *** awwaiid joined
[10:36] <FROGGS> nine: okay, got Inline::Perl5 installed now... had to change the "perl"-binary name to "perl5.24.0" for me... (I'm using perlbrew, and not switching perls actually)

[10:38] <FROGGS> nine: I get a single test failure though when installing Inline::Perl*6*... Can't call method "get_one" on an undefined value at t/use.t line 12.

[10:38] <FROGGS> is that known

[10:38] <nine> No, it isn't.

[10:39] *** neuron joined
[10:39] <neuron> Hi

[10:39] <FROGGS> k

[10:39] <neuron> I don't seem to be able to file a bug using the rt.cpan.org web interface

[10:39] <FROGGS> hi neuron

[10:39] <neuron> I would like to report issue with NativeCall, where should I send the email to?

[10:39] <FROGGS> you can send an email to [email@hidden.address]
[10:40] <neuron> So simple :) Thank you

[10:40] <FROGGS> this will go straight into RT

[10:40] *** awwaiid left
[10:42] *** curan left
[10:43] *** curan joined
[10:44] <FROGGS> damn, maybe I'm just missing -Duseshrplib

[10:44] *** neuron left
[10:46] *** awwaiid joined
[10:51] *** awwaiid left
[10:52] *** awwaiid joined
[10:52] *** wamba left
[10:54] *** cono_ is now known as cono

[10:56] *** awwaiid left
[10:57] *** wamba joined
[10:57] *** awwaiid joined
[11:02] *** nadim_ left
[11:02] *** awwaiid left
[11:05] *** xtreak left
[11:06] *** xtreak joined
[11:07] <FROGGS> nine: I still get that error after rebuiling that libperl.so :o(

[11:07] <melezhik> How can I delete an element from array?

[11:08] <sena_kun> melezhik, some particular element? .grep maybe.

[11:08] *** xtreak left
[11:08] <FROGGS> delete? with grep?

[11:08] *** awwaiid joined
[11:09] *** xtreak joined
[11:09] <sena_kun> On some condition, I mean.

[11:09] <sena_kun> It wasn't note what element should be deleted. :/

[11:09] <nine> m: my @a = 1,2,3; @a[1]:delete; dd @a; @a.splice(1, 1); dd @a

[11:09] <camelia> rakudo-moar c72746: OUTPUT: «Array @a = [1, Any, 3]␤Array @a = [1, 3]␤»

[11:10] <Geth> ¦ doc: 6986130f4e | Altai-man++ (committed using GitHub Web editor) | doc/Type/IO.pod6

[11:10] <Geth> ¦ doc: Fix a strange old thinko

[11:10] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6986130f4e

[11:11] <melezhik> thanks nine:

[11:14] *** awwaiid left
[11:15] *** awwaiid joined
[11:17] *** nebuchad` is now known as nebuchadnezzar

[11:18] *** travis-ci joined
[11:18] <travis-ci> Doc build errored. Altai-man 'More indentation fixing'

[11:18] <travis-ci> https://travis-ci.org/perl6/doc/builds/247460697 https://github.com/perl6/doc/compare/5cca681092db...e1c508f31454

[11:18] *** travis-ci left
[11:20] <lizmat> melezhik: does that what you want?  Or maybe you should look at splice

[11:20] <lizmat> ?

[11:21] <melezhik> I guess :delete is fine 

[11:22] *** curan left
[11:23] *** awwaiid left
[11:23] <lizmat> melezhik: oki  :-)

[11:23] *** yoleaux joined
[11:23] *** ChanServ sets mode: +v yoleaux

[11:25] *** darutoko joined
[11:25] *** |oLa|1 joined
[11:27] *** |oLa| left
[11:28] *** rindolf left
[11:29] *** awwaiid joined
[11:33] <FROGGS> nine: do you have a blog post or something else that describes how I should subclass a Perl 5 class?

[11:33] <melezhik> I wonder how poll described at https://docs.perl6.org/type/Channel#method_poll work?

[11:33] *** awwaiid left
[11:34] <ilmari> FROGGS: https://github.com/niner/Inline-Perl5#inherit-from-a-perl-5-class

[11:34] <melezhik> I mean at what conditions item is removed from the channel?

[11:34] <FROGGS> uhh, silly me

[11:34] <FROGGS> I even got that page open -.-

[11:34] <FROGGS> thanks ilmari

[11:34] <nine> And I hope it's kinda intuitive anyway :)

[11:34] *** awwaiid joined
[11:35] <FROGGS> that use.t is still failing (and I was unable to understand whats going on), so I try to continue to do what I wanted initially

[11:38] <nine> FROGGS: could be that the test is victim to the lexical module loading changes in rakudo

[11:38] <FROGGS> nine: can I test that with an older version of rakudo perhaps?

[11:39] *** cog_ joined
[11:39] *** awwaiid left
[11:40] *** rba_ left
[11:40] <nine> FROGGS: you could try something like my $whatever = $p6->run('use Whatever; Whatever'); my $obj = $whatever->new();

[11:42] <FROGGS> no dice, `$p6->run('use Perl6Test; Perl6Test')` still returns undef

[11:42] <melezhik> given a channel I want want to see all it's items. basicly poll is ok, but I am not clear _which_ item it recieves?

[11:44] *** wamba left
[11:46] *** awwaiid joined
[11:46] *** travis-ci joined
[11:46] <travis-ci> Doc build passed. Altai-man 'Fix a strange old thinko'

[11:46] <travis-ci> https://travis-ci.org/perl6/doc/builds/247472851 https://github.com/perl6/doc/compare/e1c508f31454...6986130f4ef2

[11:46] *** travis-ci left
[11:48] <sena_kun> m: 'one two three' ~~ /(\w+)+ % ' '/

[11:48] <camelia> rakudo-moar c72746: ( no output )

[11:48] <sena_kun> m: say 'one two three' ~~ /(\w+)+ % ' '/

[11:48] <camelia> rakudo-moar c72746: OUTPUT: «｢one two three｣␤ 0 => ｢one｣␤ 0 => ｢two｣␤ 0 => ｢three｣␤»

[11:49] <sena_kun> Why indexes are zeroed, instead of proper count?

[11:50] *** domidumont left
[11:50] <sena_kun> if  'one two three' ~~ /(\w+)+ % ' '/ { say $0[1] }

[11:50] *** awwaiid left
[11:50] <sena_kun> m: if 'one two three' ~~ /(\w+)+ % ' '/ { say $0[1] }

[11:51] <camelia> rakudo-moar c72746: OUTPUT: «｢two｣␤»

[11:51] <sena_kun> It still works. Hmm.

[11:52] *** domidumont joined
[11:54] *** gdonald joined
[11:54] *** AlexDaniel joined
[11:57] *** sena_kun left
[11:58] *** |oLa|1 left
[11:59] *** sena_kun joined
[12:04] *** bpmedley joined
[12:04] *** sivoais_ left
[12:07] *** cog_ left
[12:09] *** Cabanossi left
[12:09] <timotimo> melezhik: polling out an item from the channel grabs the earliest one that was sent and not yet received. the channel acts like a queue, you cannot get any other item than the "next to be received" one

[12:10] <melezhik> ok

[12:10] *** kyan joined
[12:10] <melezhik> I guess I end up with simple Per6 / Promice  implimentation to get what I need

[12:11] *** Cabanossi joined
[12:11] <melezhik> probably Proc::Q/Channel does not fit for my task or I still understand well how this works ...

[12:12] <timotimo> what is proc-q not doing for you?

[12:12] *** itaipu joined
[12:13] *** awwaiid joined
[12:16] <melezhik> my inital task is to run many externall  program (processes) asynchronoulsy , but I also need to ensure not run the   same program twice. 

[12:17] <melezhik> Proc::Q starts a banch of proccess but then I need to walk though all of then to get know that some of them finish

[12:17] <melezhik> I have tried to use Channel/poll for this 

[12:18] *** ilbot3 joined
[12:18] *** ChanServ sets mode: +v ilbot3

[12:18] <melezhik> the reason is why I need to know that some process finishes that this is creteria that I can re-run the same programm again safely

[12:18] *** awwaiid left
[12:19] *** awwaiid joined
[12:21] *** sena_kun left
[12:22] <melezhik> timotimo: probably it might be better to understand what I wanted to achieve looking at the implimentation with Promise - https://github.com/melezhik/sparky/blob/master/sparky.pl6

[12:22] <melezhik> which I failed to do with Proc::Q/Channel

[12:23] *** ilbot3 left
[12:23] <melezhik> but again probably I miss something )))

[12:23] *** awwaiid left
[12:26] <jnthn> That code has a read/write data race on %project-state

[12:26] *** ilbot3 joined
[12:26] *** ChanServ sets mode: +v ilbot3

[12:26] *** mcmillhj joined
[12:28] *** [Coke]_ is now known as [Coke]

[12:30] *** awwaiid joined
[12:30] *** rindolf joined
[12:30] <timotimo> aha, proc-q doesn't seem to give you a "this program has been started" message at all, eh?

[12:30] <FROGGS> haha lol

[12:30] <FROGGS> nine: it just works!

[12:30] <FROGGS> wth

[12:31] <melezhik> I am aware about possible races

[12:31] *** mcmillhj left
[12:31] <timotimo> so you won't get the "started"

[12:31] <timotimo> er, i mean "running"

[12:32] <melezhik> if I use Proc::Q I have a Channel object which I can't iterrate through to get know which processes finish

[12:32] <FROGGS> I'm doing this now in a Mojolicious controller: standard Perl 5 preamble, then "use Inline::Perl6; use v6-inline;", and after that I write the implementation of my routes in shiny nice Perl 6!

[12:32] <melezhik> at least with Promise I can

[12:33] <timotimo> why do you think you can't iterate through a channel?

[12:33] <jnthn> melezhik: Untested but I'd probably write it something like https://gist.github.com/jnthn/32c3359202ec5c1a869b00e372fc2a75

[12:34] <jnthn> Though does it need to watch for new scripts also?

[12:35] <melezhik> yeah,  I need an endless loop and I need to ensure that https://gist.github.com/jnthn/32c3359202ec5c1a869b00e372fc2a75#file-x-p6-L11 does not if already running 

[12:35] <melezhik> for the same project

[12:36] <jnthn> Ah, what I did doesn't handle the new script case

[12:36] <nine> FROGGS: yeah, I've done something like that for a talk or two :)

[12:36] <FROGGS> nine: I love it *g*

[12:36] <jnthn> But anyway, doing it in the react block and with Proc::Async will be far more manageable :)

[12:36] <jnthn> (react essentially gives you an event loop that stays alive so long as there's work)

[12:36] <melezhik> yeah, without this one I would use Proc::Async 

[12:37] <nine> FROGGS: http://niner.name/talks/Web%20development%20and%20Perl%206/Web%20development%20and%20Perl%206.pdf

[12:37] *** xtreak left
[12:38] <melezhik> I need state where I can read/write information about some external programm with some paramteres are running at the moment to ensure that it does not run two copies of it

[12:38] *** awwaiid left
[12:38] <melezhik> at the same time

[12:38] <jnthn> Yeah, the "spawn another copy when the last one exits" is what the run-project call is doing

[12:38] <jnthn> In the whenever

[12:39] <jnthn> Basically, whenever the last one exits, spawn another one

[12:39] <jnthn> (Since whenever is an async construct, it isn't actually recursive)

[12:39] *** ilbot3 left
[12:40] <melezhik> jnthn: can I look at the implimetation where it does not run two copies at the time ?

[12:41] *** nadim_ joined
[12:41] *** |oLa| joined
[12:41] <jnthn> melezhik: What, where it detects new projects also?

[12:42] <jnthn> (The current version will never run two copies at a time.)

[12:42] <melezhik> for simplicity let's say that projects list  does not change 

[12:42] *** konsolebox joined
[12:42] <jnthn> Oh

[12:42] <jnthn> Then the current one I pasted should handle it

[12:43] <jnthn> We do one loop over the directories at startup and call run-project

[12:43] <jnthn> That runs the command using Proc::Async

[12:43] <jnthn> The contents of the whenever block runs when the process exits

[12:43] <melezhik> ahh, I see )))

[12:43] <jnthn> And so at this point there's no copies of it running so we just call run-project again

[12:43] <jnthn> :)

[12:44] *** awwaiid joined
[12:47] *** |oLa| left
[12:47] *** ilbot3 joined
[12:47] *** ChanServ sets mode: +v ilbot3

[12:47] <melezhik> ok, but I am not clear how this ensure not run '/bin/sh', '-c', $cmd if $cmd is already runnning? 

[12:49] *** awwaiid left
[12:49] *** wamba joined
[12:51] <melezhik> I mean I checked that this work how I expected but can't understand how )))

[12:51] *** mcmillhj joined
[12:51] *** |oLa| joined
[12:52] <jnthn> melezhik: Do you understand how `whenever` works? Or is that the piece you're missing? :)

[12:52] <jnthn> Proc::Async.new('/bin/sh', '-c', $cmd).start returns a Promise that is kept when the command exits

[12:53] <jnthn> whenever $some-promise { code } runs code when $some-promise completes

[12:53] <jnthn> So at that point we know that the process has already exeited, so we can start it again

[12:53] <jnthn> Which we do by calling run-project

[12:53] *** wamba left
[12:54] <jnthn> You might think of react as being like an event loop

[12:54] <jnthn> And whenever sets up an event handler

[12:54] *** Cabanossi left
[12:55] *** nadim_ left
[12:55] *** Cabanossi joined
[12:55] *** awwaiid joined
[12:58] *** smash_ is now known as smash

[12:59] <FROGGS> nine: I can't use a P5 module before the line "use v6-inline;", and call methods on that class after said line, right?

[13:00] <FROGGS> I also am not able to use a P5 module after said line, without causing P6M-duplicate-symbol errors...

[13:00] *** awwaiid left
[13:00] <melezhik> neat! ))) 

[13:00] <nine> FROGGS: duplicate symbol errors sound troublesome?

[13:01] <FROGGS> yes

[13:01] *** awwaiid joined
[13:01] <FROGGS> it reports the package name of the controller I am in to be duplicate

[13:02] *** itaipu left
[13:03] <nine> That's odd. It should only try to import modules that were loaded by the use statement.

[13:03] *** ilbot3 left
[13:04] *** lookatme joined
[13:05] *** xtreak joined
[13:07] *** |oLa| left
[13:09] *** FROGGS left
[13:09] *** ilbot3 joined
[13:09] *** ChanServ sets mode: +v ilbot3

[13:10] *** vendethiel- joined
[13:10] *** awwaiid left
[13:11] *** xtreak left
[13:12] *** awwaiid joined
[13:12] *** vendethiel left
[13:16] *** nadim_ joined
[13:18] *** awwaiid left
[13:25] *** perlpilot joined
[13:32] *** awwaiid joined
[13:34] *** ilbot3 left
[13:36] *** FROGGS joined
[13:36] <melezhik> jnthn: how to adjust your example to make it possible to re-read root directory structure in case new projects appear? any ideas?

[13:37] *** awwaiid left
[13:37] <jnthn> melezhik: See IO::Notification

[13:38] *** awwaiid joined
[13:39] *** dudz joined
[13:39] *** wamba joined
[13:40] <FROGGS> nine: am I meant to access, say JSON::XS, that was loaded by P5 in a v6-inline block?

[13:41] <melezhik> ok, I will look at this. And one more thing. Seems with new code my scripts ignore ctrl^c when running from console , so I have to `ps uax|grep` and then kill $pid  to terminate it

[13:42] *** ilbot3 joined
[13:42] *** ChanServ sets mode: +v ilbot3

[13:43] *** awwaiid left
[13:43] *** awwaiid joined
[13:44] *** wamba left
[13:46] *** skids joined
[13:46] *** pmurias joined
[13:49] *** awwaiid left
[13:49] *** nadim_ left
[13:51] *** awwaiid joined
[13:51] *** wamba joined
[13:53] *** Cabanossi left
[13:55] *** AlexDaniel left
[13:55] *** Cabanossi joined
[13:56] *** ab6tract joined
[13:56] *** bjz joined
[13:56] *** wamba left
[13:57] *** awwaiid left
[13:59] *** lowbro left
[14:00] * ab6tract has just tried to sneak a talk submission into the YAPC::EU queue past the deadline

[14:01] <ab6tract> the computer didn't say "no", so ... :)

[14:01] *** zakharyas left
[14:01] *** zakharyas joined
[14:03] *** cog_ joined
[14:03] *** sivoais joined
[14:04] *** awwaiid joined
[14:05] *** zakharyas left
[14:06] <nine> FROGGS: if you use JSON::XS:from<Perl5>; you should be able to access it

[14:08] *** awwaiid left
[14:09] *** ilbot3 left
[14:09] <melezhik> jnthn: IO::Notification works fine on itslef, but I hardly can see how to combine it with my script using react/react/Proc::Async

[14:10] *** awwaiid joined
[14:10] <melezhik> and I still have to care about directories untrouched to process them again and again where IO::Notification does not help 

[14:10] <jnthn> Yeah, you'd still need some kind of hash for directories you already added

[14:11] <jnthn> You'd use the IO::Notification with another whenever block

[14:11] <jnthn> INside of the react

[14:11] <jnthn> And pull the code that scans directories out into a sub

[14:11] <jnthn> And call it from the whenever

[14:12] *** ufobat left
[14:12] *** ufobat joined
[14:12] <melezhik> yeah I have just thought about this ...

[14:12] <melezhik> )))

[14:12] *** |oLa| joined
[14:13] *** wamba joined
[14:14] <jnthn> melezhik: Untested, but https://gist.github.com/jnthn/32c3359202ec5c1a869b00e372fc2a75 is a sketch of it

[14:14] *** awwaiid left
[14:14] <jnthn> Inside of a react block, it makes sure that you are only inside of one of the whenevers at a time

[14:14] <jnthn> (And code called as part of executing a whenever)

[14:14] <jnthn> So this solution doesn't contain race conditions :)

[14:15] <jnthn> oh, I forgot one thing

[14:15] <jnthn> updated

[14:15] *** awwaiid joined
[14:15] <jnthn> Should call add-dirs() once a the start too, to set things up for what's already there :)

[14:17] *** ilbot3 joined
[14:17] *** ChanServ sets mode: +v ilbot3

[14:19] *** nadim_ joined
[14:20] *** cyphase joined
[14:22] *** |oLa| left
[14:22] *** cyphase left
[14:22] *** pmurias left
[14:25] *** cyphase joined
[14:25] *** awwaiid left
[14:27] *** awwaiid joined
[14:28] <FROGGS> nine: that's would be the point where I get that P6M duplicate symbol issue

[14:29] *** |oLa| joined
[14:31] <melezhik> jnthn: looks good for me. last thing I need to run add-dirs at the very of the begining when there are not events to trigger 

[14:31] <melezhik> how can I do this?

[14:31] <melezhik> I mean the very beginning of  the script ...

[14:31] <jnthn> melezhik: I did that in the last update of the gist. Just call it at the end of the react block, once everything is set up :)

[14:32] <melezhik> https://gist.github.com/jnthn/32c3359202ec5c1a869b00e372fc2a75#file-x-p6-L29 ? )))

[14:32] <jnthn> yes, that

[14:33] *** cog_ left
[14:33] <jnthn> Note that whenever is just setting up the handler for when there are notifications

[14:33] <jnthn> It doesn't block execution

[14:36] *** awwaiid left
[14:36] <dogbert2> moritz: is irclog.perlgeek down atm?

[14:37] *** kyan left
[14:37] *** wamba left
[14:38] *** wamba joined
[14:38] *** Cabanossi left
[14:38] *** mr_ron joined
[14:40] *** Cabanossi joined
[14:41] *** seatek joined
[14:42] *** awwaiid joined
[14:42] <lizmat> moritz: seems down for me as well

[14:44] *** wamba left
[14:49] *** awwaiid left
[14:49] *** ilbot3 left
[14:50] *** awwaiid joined
[14:50] *** kyan joined
[14:50] *** |oLa| left
[14:50] *** zakharyas joined
[14:51] <melezhik> jnthn: looks good. btw if I terminate script does it wait it's childs, lanched by Proc::Async.new ?

[14:51] *** domidumont left
[14:51] <melezhik> looks like if I terminate the script some sparrowdo commands are still here  (at least I see the one )

[14:51] <melezhik> in `Sl` state

[14:51] <jnthn> How are you terminating it?

[14:52] <melezhik> kill $pid

[14:52] <jnthn> But no, there's nothing set up for it to wait

[14:52] <jnthn> You could install a signal handler to make that happen

[14:52] *** ilbot3 joined
[14:52] *** ChanServ sets mode: +v ilbot3

[14:53] <melezhik> good. could you please point me docs on how to set up signals in Perl6 ?

[14:54] <jnthn> https://docs.perl6.org/routine/signal#class_Supply

[14:54] <jnthn> It also returns a Supply

[14:54] <lizmat> signal(SIGINT).tap( { say "Thank you for your attention"; exit 0 } );   # melezhik 

[14:54] <jnthn> so whenever signal(SIGINT) { ... }

[14:55] <jnthn> You can probably set some boolean flag $killed = True or so and then in the whenever earlier do `run-project($dir, $project) unless $killed`

[14:55] <jnthn> Then it just won't spawn another one of them

[15:03] <moritz> dogbert2, lizmat: the server swapped; i've restarted the webserver, should be back up now

[15:03] <lizmat> not just yet for me

[15:04] <moritz> :(

[15:08] *** FROGGS left
[15:08] <moritz> it all seems kinda slow, and consumes a lot of memory

[15:08] <moritz> have to investigate after $dayjob

[15:09] <melezhik> Thanks a lot for help jnthn: and lizmat: will try to add signal handler later, so far all is good )))

[15:10] <melezhik> have commited changes to sparky repo

[15:11] *** cyphase left
[15:12] *** cyphase joined
[15:12] *** cyphase left
[15:12] *** cyphase joined
[15:13] *** ab6tract left
[15:13] *** ilbot3 left
[15:14] *** zakharyas left
[15:16] *** cyphase left
[15:16] *** cyphase joined
[15:16] *** cyphase left
[15:18] *** zakharyas joined
[15:18] *** cyphase joined
[15:18] *** cyphase left
[15:19] *** cyphase joined
[15:19] *** cyphase left
[15:22] *** ilbot3 joined
[15:22] *** ChanServ sets mode: +v ilbot3

[15:23] *** jonas1 left
[15:24] <ufobat> there is often a our $VERSION in perl5 modules. is this still idiomatic/a good way to go in perl6

[15:25] <timotimo> i think the version is meant to be part of the meta info and such?

[15:27] <ufobat> but that means the module itself does not know about its version, just e.g. zef does?

[15:29] *** bjz left
[15:29] <timotimo> i'm convinced there ought to be a way to get the full meta info from whatever installation your script was grabbed from

[15:29] <timotimo> but i don't know what or how

[15:34] *** ilbot3 left
[15:35] *** kurahaupo joined
[15:37] <ufobat> okay 

[15:37] <dogbert2> moritz: are you running perlgeek on an RPi :-)

[15:40] *** devmikey joined
[15:40] <moritz> dogbert2: I kinda wish I did

[15:42] <moritz> I ^H^H^H^H^H^H^H^H^H^H^H^H^H^H^H^H^HInstead it's a Vm with 2gb RAM, and I recently did an OS upgrade

[15:42] *** awwaiid left
[15:43] *** awwaiid joined
[15:46] *** ilbot3 joined
[15:46] *** ChanServ sets mode: +v ilbot3

[15:46] *** zakharyas left
[15:47] *** domidumont joined
[15:48] *** awwaiid left
[15:49] *** awwaiid joined
[15:50] *** cdg joined
[15:51] *** ilbot3 left
[15:51] *** cdg_ joined
[15:53] *** Cabanossi left
[15:55] *** ilbot3 joined
[15:55] *** ChanServ sets mode: +v ilbot3

[15:55] *** cdg left
[15:55] *** Cabanossi joined
[15:58] *** wamba joined
[16:02] *** |oLa| joined
[16:03] *** awwaiid left
[16:04] *** |oLa| left
[16:04] *** awwaiid joined
[16:06] <[Coke]> is there a way to tell if a test file is being run via prove with other files vs. standalone? (might be nice to adding some threading to a slow test file if it's not being run with other files)

[16:06] *** ilbot3 left
[16:08] *** awwaiid left
[16:09] *** awwaiid joined
[16:12] <[Coke]> with jnthn's latest updates to Proc, getting a new (I think) failure in doc's xtest:

[16:12] <[Coke]> perl6 xt/space-after-comma.t doc/Type/IO/CatHandle.pod6 -> Malformed UTF-8

[16:14] *** abraxxa left
[16:14] *** ilbot3 joined
[16:14] *** ChanServ sets mode: +v ilbot3

[16:15] *** moritz joined
[16:19] *** mxco86 joined
[16:19] *** awwaiid left
[16:20] *** awwaiid joined
[16:21] *** zapwai joined
[16:29] <[Coke]> golfed: say "LINE: " ~ $++ for run($*EXECUTABLE-NAME, '--doc', "doc/Type/IO/CatHandle.pod6", :out).out.lines; # prints up through 243 and then dies with Malformed UTF-8 - Zoffix, is there actually malformed UTF-8 in there, or is this a result of the .lines? (or passing through perl6 -doc?) (or the run?)

[16:29] *** devmikey left
[16:31] <[Coke]> looking at line 243 of the output of perl6 --doc on that file, there's nothing obviously malformed. Looks like straight ASCII

[16:32] <Geth> ¦ doc: c6e8d0809c | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Iterator.pod6

[16:32] <Geth> ¦ doc: Add IterationEnd to search index

[16:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c6e8d0809c

[16:33] <mr_ron> r: https://gist.github.com/ronaldxs/97c0118cffe486f604c74fd686c113f8

[16:33] <camelia> rakudo-jvm 36823a: OUTPUT: «===SORRY!===␤Could not find Bench at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-j-inst-1/share/perl6/site␤    /home/camelia/rakudo-j-inst-1/share/perl6/vendor␤    /home/camelia/rakudo-j-inst-1/share/perl6␤    CompUnit::Reposi…»

[16:33] <camelia> ..rakudo-moar 36823a: OUTPUT: «===SORRY!===␤Could not find Bench at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-2/share/perl6␤    CompUnit::Repos…»

[16:33] <mr_ron> star: https://gist.github.com/ronaldxs/97c0118cffe486f604c74fd686c113f8

[16:33] <camelia> star-m 2016.10: OUTPUT: «===SORRY!===␤Could not find Bench at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/star-2016.10/share/perl6/site␤    /home/camelia/star-2016.10/share/perl6/vendor␤    /home/camelia/star-2016.10/share/perl6␤    CompUnit::Repository::Absolu…»

[16:35] <mr_ron> Any way to run my gist with Bench?  Perhaps Bench would be a good idea for R* anyway?

[16:35] *** awwaiid left
[16:36] *** awwaiid joined
[16:36] <[Coke]> for now, I'd recommend installing it locally.

[16:37] <[Coke]> (doc bad utf8) - .slurp.perl.say - works. .lines.perl.say - dies with utf8 error

[16:37] <mr_ron> I can run the script on my system, but I was hoping to demo here.

[16:39] <[Coke]> zoffiz: Pod formatting code X missing endtag '>' (on the Iterator edit you just made)

[16:39] <[Coke]> *zoffix

[16:44] *** itaipu joined
[16:45] *** awwaiid left
[16:45] *** xzhao_ joined
[16:46] *** xzhao__ joined
[16:46] *** awwaiid joined
[16:49] *** itaipu left
[16:53] *** Cabanossi left
[16:55] *** Cabanossi joined
[16:57] *** DeadDelta joined
[16:57] <DeadDelta> [Coke]: the end tag is present when I look at github commit: https://github.com/perl6/doc/commit/c6e8d0809c

[16:58] <Geth> ¦ doc: 4c00a55a7d | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Iterator.pod6

[16:58] <Geth> ¦ doc: Fix index tag

[16:58] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4c00a55a7d

[16:58] <DeadDelta> Looking at /glossary code, looks like the pipe should be before the term instead of after

[16:59] <[Coke]> DeadDelta++

[16:59] <DeadDelta> [Coke]: for CatHandle, this doesn't die, so I assume it's the --doc stuff or something:  perl6 -e '"doc/doc/Type/IO/CatHandle.pod6".IO.slurp.say'

[16:59] *** pilne joined
[16:59] *** xzhao__ left
[17:00] <[Coke]> slurp works on the --doc output also

[17:00] <[Coke]> just not lines

[17:00] *** xzhao_ left
[17:00] *** itaipu joined
[17:00] *** xzhao_ joined
[17:00] <DeadDelta> hm. perl6 -e '"doc/doc/Type/IO/CatHandle.pod6".IO.lines.put' works

[17:01] <[Coke]> doc/doc

[17:01] <[Coke]> I haven't been able to golf it smaller than "run, perl6 --doc, .lines"

[17:02] <DeadDelta> doc/doc is because the clone is in doc/

[17:03] <DeadDelta> I have no problems with perl6 -e 'run(<perl6 --doc doc/doc/Type/IO/CatHandle.pod6>, :out).out.lines.put'

[17:03] <DeadDelta> That's on 2017.05-389-g326faed. So it might be the proc rework at fault

[17:04] * DeadDelta &

[17:04] *** DeadDelta left
[17:07] *** TEttinger joined
[17:07] <mr_ron> m: https://gist.github.com/ronaldxs/97c0118cffe486f604c74fd686c113f8

[17:07] <camelia> rakudo-moar 36823a: OUTPUT: «5===SORRY!5=== Error while compiling /home/camelia/site#sources/FC133D3E7EC3B0CBE238C296893894C9AB745A05 (Inline::Perl5)␤An exception occurred while evaluating a constant␤at /home/camelia/site#sources/FC133D3E7EC3B0CBE238C296893894C9AB745A05 (Inl…»

[17:11] *** itaipu left
[17:12] *** kurahaupo left
[17:13] *** awwaiid left
[17:14] *** awwaiid joined
[17:17] *** dakkar left
[17:21] *** kaare__ left
[17:21] *** kaare__ joined
[17:23] <timotimo> mr_ron: may also want to test the shortcut += vs the full $r = $r + ...

[17:25] <mr_ron> timotimo: Did you run it?

[17:25] <timotimo> i don't have inline::perl5

[17:25] <timotimo> i did run the code in one of the examples

[17:25] <nadim_> Hello P6!, I saw the word "QuqntHash" twice this week, once in the weekly changes and once when I merged the latest rakudo (512 commit since last, good work), I checked what it is at docs.perl6, it says it's a role, mhhh OK, but then little examples. are there some example of usage?

[17:25] <timotimo> on my machine the "int" version is noticably slower, probably doing a bunch of boxing somewhere

[17:25] *** sjoshi joined
[17:26] <lizmat> nadim_: QuantHash is the generic term for Set,SetHash,Bag,BagHash,Mix,MixHash

[17:26] <nadim_> lizmat++

[17:26] <timotimo> interesting, += is faster than the full form

[17:26] <timotimo> i did not expect that

[17:27] <lizmat> timotimo: since when ???

[17:27] <timotimo> no clue

[17:28] <timotimo> the whateverable bots have netsplit out and haven't come back

[17:28] *** zakharyas joined
[17:28] <mr_ron> timotimo: The point of the exercise was that perl6 int arithmatic is about 10* slower than perl5 which would be understandable since p6 provides unlimited precision but limiting p6 precision with native int only seems to make it worse.

[17:28] <timotimo> half a day ago

[17:28] <timotimo> mr_ron: yeah, i expect we're losing a bunch of time from boxing and unboxing at some position

[17:28] <timotimo> have you tried with the last few releases?

[17:28] <timotimo> i seem to recall there was some kind of regression or something?

[17:29] <timotimo> memory's hazy

[17:29] <lizmat> m: my $a = 42; for ^10000000 { $a += 1 }; say now - INIT now

[17:29] <camelia> rakudo-moar 36823a: OUTPUT: «4.807176␤»

[17:29] *** cog_ joined
[17:29] <lizmat> m: my $a = 42; for ^10000000 { $a = $a + 1 }; say now - INIT now

[17:29] <camelia> rakudo-moar 36823a: OUTPUT: «3.8667810␤»

[17:29] <timotimo> now compare with int instead of Int

[17:29] <lizmat> m: my int $a = 42; for ^10000000 { $a = $a + 1 }; say now - INIT now

[17:29] <camelia> rakudo-moar 36823a: OUTPUT: «7.3726763␤»

[17:30] <lizmat> m: my int $a = 42; for ^10000000 { $a += 1 }; say now - INIT now

[17:30] <camelia> rakudo-moar 36823a: OUTPUT: «4.35697416␤»

[17:30] <timotimo> fascinating

[17:30] <lizmat> wow, even faster than the Int version

[17:30] *** kurahaupo joined
[17:30] <mr_ron> m: my Int $a = 42; for ^10000000 { $a += 1 }; say now - INIT now

[17:31] <lizmat> m: use nqp; my int $a = 42; for ^10000000 { $a = nqp::add_i($a,1) }; say now - INIT now

[17:31] <camelia> rakudo-moar 36823a: OUTPUT: «4.7593613␤»

[17:31] <camelia> rakudo-moar 36823a: OUTPUT: «1.9248574␤»

[17:31] <timotimo> except camelia's host may be busy or something

[17:31] <lizmat> m: use nqp; my int $a = 42; for ^10000000 { $a = nqp::add_i($a,1) }; say now - INIT now

[17:31] <camelia> rakudo-moar 36823a: OUTPUT: «2.003535␤»

[17:31] <lizmat> using nqp::ops on native ints still more than 2x as fast

[17:32] <mr_ron> Is it a reasonable goal for p6 with native int to approach p5 performance?

[17:32] <mr_ron> Should it be significantly faster than Any/Int anyway?

[17:33] <timotimo> we ought to be able to get faster than p5

[17:33] <mr_ron> Should I look into filing a PERF ticket?

[17:34] <timotimo> the int and += one spends 3.7% of its time in box_int, whereas it should be more like 0%

[17:35] <ilmari> m: my int $a = 42; for ^10000000 { $a++ }; say now - INIT now

[17:35] *** |oLa| joined
[17:35] <camelia> rakudo-moar 36823a: OUTPUT: «1.91576415␤»

[17:35] <timotimo> m: my int $a = 42; $a = $a + 1 for ^10_000_000; say now - INIT now

[17:35] <camelia> rakudo-moar 36823a: OUTPUT: «7.59916169␤»

[17:36] <timotimo> interesting, that's equivalently slow to the prefix-for

[17:36] <timotimo> anyway, that code also spends a whole lot of time in invoking and returning from frames

[17:36] <mr_ron> m: my $a = 42; for ^10000000 { $a++ }; say now - INIT now

[17:36] <camelia> rakudo-moar 36823a: OUTPUT: «2.3997292␤»

[17:38] <timotimo> the spesh redesign document says we could probably inline closures that were taken immediately before they get called; that'd benefit that benchmark

[17:38] *** Cabanossi left
[17:40] <timotimo> we're getting $_ passed in and are boxing every single value for that for loop, even though we don't use $_ even once

[17:40] *** Cabanossi joined
[17:41] <timotimo> about 30% more time is spent if the $_ is unspecified vs when i specify it as being "int"

[17:42] *** sjoshi left
[17:43] <timotimo> also, the + inside the loop isn't getting inlined, which is certainly odd

[17:43] <mr_ron> m: {my $a = 42; for ^10000000 { $a++ }; say now - ENTER now}; { my int $a = 42; for ^10000000 { $a++ }; say now - ENTER now}

[17:43] <camelia> rakudo-moar 36823a: OUTPUT: «2.34404888␤1.8906015␤»

[17:44] <mr_ron> m: {my $a = 42; for ^10000000 { $a += 2 }; say now - ENTER now}; { my int $a = 42; for ^10000000 { $a += 2 }; say now - ENTER now}

[17:45] <camelia> rakudo-moar 36823a: OUTPUT: «4.812863␤3.084417␤»

[17:46] <timotimo> if you $a++; $a++; you get almost no time increase over just $a++

[17:46] *** xzhao left
[17:46] <mr_ron> m: {my $a = 42; for ^10000000 { $a += 1 + $a %3 }; say now - ENTER now}; { my int $a = 42; for ^10000000 { $a += 1 + $a %3 }; say now - ENTER now}

[17:47] <camelia> rakudo-moar 36823a: OUTPUT: «8.119853␤10.5393037␤»

[17:47] <timotimo> indeed, apart from having a bindlex immediately followed by a getlex in there, the $a++; $a++ is rather good performance-wise

[17:49] <timotimo> but the loop itself is still calling the loop body over and over and it's still passing the $_ argument and not using it

[17:52] *** cog_ left
[17:55] <timotimo> m: say "{13130020819 / 10000000} cycles per loop entry"

[17:55] <camelia> rakudo-moar 36823a: OUTPUT: «1313.0020819 cycles per loop entry␤»

[17:56] <timotimo> we could do a lot better

[17:58] *** setty1 joined
[17:59] <mr_ron> I would currently be looking to document with a PERF ticket on 

[17:59] <mr_ron> "native int" vs INT/Any

[17:59] <mr_ron> but am open to other suggestions

[18:00] <mr_ron> s/INT/Int/

[18:01] <lizmat> m: for ^1000000 -> { }   # huh?  couldn't we optimize for that in the mean time ?

[18:01] <camelia> rakudo-moar 36823a: OUTPUT: «Too many positionals passed; expected 0 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[18:02] <lizmat> timotimo: ^^^

[18:05] <timotimo> i guess we could

[18:05] *** xzhao_ left
[18:08] *** xzhao joined
[18:12] *** DeadDelta joined
[18:12] <DeadDelta> timotimo: the += version has been slower than $x = $x + foo for as long as I remember; even in my upcoming article I mention it. It gets wrapped as a meta operator.

[18:12] <timotimo> but the optimizer has a thing for metaop assign

[18:12] <DeadDelta> Does it?

[18:12] <DeadDelta> OK

[18:13] <DeadDelta> As for "regression". It's the outcome of the fix for the native candidate dispatch

[18:13] <DeadDelta> m: my int $a = 42; for ^10000000 { $a = $a + 1 }; say now - INIT now

[18:13] <timotimo> yeah, the METAOP_ASSIGN is flattened out manually by the optimizer

[18:13] <camelia> rakudo-moar 36823a: OUTPUT: «7.6750003␤»

[18:13] <DeadDelta> ^ that code doesn't go through native candidate. It boxes the native int each time and goes through Int candidate

[18:13] <DeadDelta> m: my int $a = 42; for ^10000000 { $a = $a + my int $ = 1 }; say now - INIT now

[18:13] <camelia> rakudo-moar 36823a: OUTPUT: «2.1363054␤»

[18:13] <DeadDelta> You have to have both natives to go through native candidate

[18:13] <timotimo> but 1 can be either native or non-native?

[18:13] <DeadDelta> Yup

[18:14] <timotimo> i mean we have a Want for that specific reason?

[18:14] <timotimo> i'm clearly confused

[18:14] <DeadDelta> I dunno. jnthn++ can clarify, but that's my (and I believe pmurias++'s too) understanding that the current behaviour is how it's supposed to work

[18:15] <timotimo> that's fair

[18:15] <DeadDelta> In that we don't nativize non-natives in multi dispatch.

[18:15] <DeadDelta> huggable: native

[18:15] <huggable> DeadDelta, here's a ticket: https://rt.perl.org/Ticket/Display.html?id=129844#txn-1433016 and here's explanation why it isn't: https://irclog.perlgeek.de/perl6-dev/2016-10-25#i_13462673

[18:16] <DeadDelta> Yeah, the rules I wrote out had the "convert to native if size fits", but the rules are wrong.

[18:16] <timotimo> hm, okay

[18:18] <timotimo> when using the "my int $ = 1" trick the + operator does get inlined

[18:19] <mr_ron> m: {my $a = 42; for ^10000000 { $a += 1 + $a%3 }; say now - ENTER now}; { my int ($a, $one, $three) = (42, 1, 3); for ^10000000 { $a += $one + $a%$three }; say now - ENTER now}

[18:19] <camelia> rakudo-moar 36823a: OUTPUT: «8.18530108␤2.74818107␤»

[18:20] *** |oLa| left
[18:21] <DeadDelta> This kinda gives more merit to the idea that was proposed of having to-native syntax or coersers; something shorter and easier to use than (my int $ = foo)

[18:23] *** kaare__ left
[18:23] *** kaare__ joined
[18:24] *** greppable6 joined
[18:24] *** committable6 joined
[18:24] *** evalable6 joined
[18:24] *** ChanServ sets mode: +v greppable6

[18:24] *** ChanServ sets mode: +v committable6

[18:24] *** ChanServ sets mode: +v evalable6

[18:24] *** unicodable6 joined
[18:24] *** bisectable6 joined
[18:24] *** benchable6 joined
[18:24] *** quotable6 joined
[18:24] *** bloatable6 joined
[18:24] *** ChanServ sets mode: +v unicodable6

[18:24] *** ChanServ sets mode: +v bisectable6

[18:24] *** ChanServ sets mode: +v benchable6

[18:24] *** ChanServ sets mode: +v quotable6

[18:24] *** ChanServ sets mode: +v bloatable6

[18:24] *** statisfiable6 joined
[18:24] *** ChanServ sets mode: +v statisfiable6

[18:24] <hythm> Zamelk is 2 , the other team is 0 ;)

[18:24] <DeadDelta> ?

[18:24] <hythm> Sorry, Wrong channel.

[18:25] <DeadDelta> heh

[18:28] *** kaare__ left
[18:28] *** kaare__ joined
[18:28] *** |oLa| joined
[18:28] *** zakharyas left
[18:31] *** kaare__ left
[18:31] <DeadDelta> Yeah, from user perspective this kinda sucks. If all the arguments have a native Want, it isn't really wrong to expect native candidates to be called. Reading the explanation here https://irclog.perlgeek.de/perl6-dev/2016-10-25#i_13462673 I wouldn't want the big int to match, only when we have a Want that's native

[18:33] <DeadDelta> And at least the optimizer could see we're calling native + want that has a native + there's a candidate that can accept two natives and then just rewrite it to be all-native

[18:33] * DeadDelta puts it onto "when my skill level get there, try to do so" shelf and moves on

[18:38] *** ponbiki_ is now known as ponbiki

[18:39] *** Cabanossi left
[18:39] *** itaipu joined
[18:40] <DeadDelta> qast: ▸Op: :op<say>, ▸Op(:op<add_i>, ▸Want(▸IVal(:value(72)), 'iI', ▸IVal(:value(42))), ▸IVal(:value(10)) )

[18:40] <DeadDelta> Ah, no bot :) 

[18:40] *** Cabanossi joined
[18:40] <DeadDelta> Gives 52

[18:44] *** andrzejku joined
[18:44] <El_Che> so, many perl6 talk in amsterdam soon?

[18:44] <El_Che> someone here presenting

[18:45] <El_Che> ?

[18:45] <DeadDelta> timotimo: what do you mean flattened? The only thing I see between perl6 --target=optimize -e '42 += 55' and perl6 --target=ast -e '42 += 55' is the optimizer making the QAST::Op(call &METAOP_ASSIGN) to QAST::Op(callstatic &METAOP_ASSIGN)

[18:45] <DeadDelta> I forget what callstatic is about. Is that the flattening bit?

[18:46] <DeadDelta> m: use nqp; my int $i = 0; nqp::while($i > 1000_000, $i += 2); say now - INIT now

[18:46] <camelia> rakudo-moar 36823a: OUTPUT: «0.0011683␤»

[18:47] <DeadDelta> benchable6: m: use nqp; my int $i = 0; nqp::while($i < 1_000_000, $i += 2); say now - INIT now

[18:47] <benchable6> DeadDelta, ¦m:: «Cannot find this revision (did you mean “all”?)»

[18:47] <DeadDelta> yes, I did. Now, get on with it

[18:47] <DeadDelta> benchable6: all use nqp; my int $i = 0; nqp::while($i < 1_000_000, $i += 2); say now - INIT now

[18:47] <benchable6> DeadDelta, starting to benchmark the 42 given commits

[18:48] <DeadDelta> oh damn, the native thing

[18:49] <benchable6> DeadDelta, benchmarked the given commits, now zooming in on performance differences

[18:49] <DeadDelta> Abort the mission. I have a new code for you to bench.

[18:50] <DeadDelta> Stupid robot

[18:51] *** st_elmo joined
[18:51] <benchable6> DeadDelta, https://gist.github.com/90f33f9ae4cf36633599da0659cb51b2

[18:52] *** Ven joined
[18:52] *** Ven is now known as Guest73188

[18:53] <DeadDelta> benchable6: releases use nqp; my int $i = 0; my int $two = 2; my int $lim = 1_000_000; nqp::while($i < $lim, $i += $two); say now - INIT now ||| use nqp; my int $i = 0; my int $two = 2; my int $lim = 1_000_000; nqp::while($i < $lim, $i = $i + $two); say now - INIT now

[18:53] <benchable6> DeadDelta, starting to benchmark the 20 given commits

[18:53] <benchable6> DeadDelta, benchmarked the given commits, now zooming in on performance differences

[18:56] *** Guest73188 left
[18:57] <DeadDelta> zoom faster, dammit

[18:59] *** darutoko left
[19:02] *** vendethiel- left
[19:05] *** itaipu left
[19:08] <mr_ron> m: {my $a = 42; for ^10000000 { $a += 1 + $a%3 }; say now - ENTER now}; { my int ($a, $one, $three) = (42, 1, 3); for ^10000000 { $a += $one + $a%$three }; say now - ENTER now}; { my int ($a, $one, $three, $limit) = (42, 1, 3, 10000000); loop (my int $i = 0; $i < $limit; $i += $one) { $a += $one + $a%$three }; say now - ENTER now}

[19:09] <camelia> rakudo-moar 36823a: OUTPUT: «9.6187681␤2.8602481␤3.7480661␤»

[19:11] <mr_ron> m: {my $a = 42; for ^10000000 { $a += 1 + $a%3 }; say now - ENTER now}; { my int ($a, $one, $three) = (42, 1, 3); for ^10000000 { $a += $one + $a%$three }; say now - ENTER now}; { my int ($a, $one, $three, $limit) = (42, 1, 3, 10000000); loop (my int $i = 0; $i < $limit; $i++) { $a += $one + $a%$three }; say now - ENTER now}

[19:12] <camelia> rakudo-moar 36823a: OUTPUT: «8.39889307␤2.7175026␤0.8140489␤»

[19:12] *** AlexDaniel joined
[19:14] <DeadDelta> mr_ron: dunno if you were around for the discussion, but what you're observing is expected with the native dispatch bug fix that happened sometime in 2017.05-2017.06 commits

[19:14] <DeadDelta> benchable6: so wtf? Where's the zooming?

[19:14] <benchable6> DeadDelta, ¦so: «Cannot find this revision (did you mean “all”?)»

[19:15] <DeadDelta> ... 

[19:15] <DeadDelta> benchable6: releases use nqp; my int $i = 0; my int $two = 2; my int $lim = 1_000_000; nqp::while($i < $lim, $i += $two); say now - INIT now ||| use nqp; my int $i = 0; my int $two = 2; my int $lim = 1_000_000; nqp::while($i < $lim, $i = $i + $two); say now - INIT now

[19:15] <benchable6> DeadDelta, starting to benchmark the 20 given commits

[19:15] <benchable6> DeadDelta, benchmarked the given commits, now zooming in on performance differences

[19:18] * AlexDaniel slaps benchable6

[19:18] <AlexDaniel> “Cannot coerce NaN to an Int”

[19:19] <DeadDelta> Well, running that code for all releases with committable, looks like the $i = $i + $two version was always like two orders of magnitude faster than $i += $two: https://gist.github.com/Whateverable/c62f205a69d3a98ccd7147f783452de9 https://gist.github.com/Whateverable/b8bd4dd4620c63410567aa6ee9dfb90a

[19:19] <DeadDelta> So the unrolling timotimo mentioned needs to have a look at it

[19:20] *** pmurias joined
[19:21] <pmurias> DeadDelta: what positive thing does fueling Perl 5/Perl 6 hostility get us?

[19:21] <AlexDaniel> DeadDelta: fwiw https://github.com/perl6/whateverable/issues/176

[19:21] <AlexDaniel> MasterDuke: benchable6 clearly needs some love :)

[19:21] <DeadDelta> pmurias: we crush them and move on with One True Perl.

[19:22] *** cyphase joined
[19:23] <lizmat> DeadDelta: for crushing, you need mass

[19:23] <mr_ron> Being more careful with natives I got p6 to run faster than p5: https://gist.github.com/ronaldxs/74b7450aeccb48985fdede871f53d364

[19:23] <lizmat> or a very high velocity  :-)

[19:23] <DeadDelta> mr_ron++ awesome

[19:23] <AlexDaniel> .oO( eat more and run faster )

[19:24] <DeadDelta> lizmat: yeah, well, I don't feel like sitting silent while Perl 5 folks are having a day mocking Perl 6 does us any good either.

[19:24] <El_Che> mr_ron: run the perl5 version with a foreach instead of the C loop

[19:25] <lizmat> and where is that mocking taking place ?

[19:25] *** khw joined
[19:25] *** cyphase left
[19:26] <DeadDelta> lizmat: I'm guessing pmurias was referring to my comments on this reddit post that has an image of a warrior named "Perl6six Isnotperl" with adjacent commentery about how it was very hard to get that character name, but it was well worth it: https://www.reddit.com/r/perl/comments/6jpkhj/i_play_everquest_on_the_project_1999_server_that/

[19:26] <mr_ron> El_Che: I tried with "for (1..10000000) {" and got similar results.  Why did you ask?

[19:26] *** cyphase joined
[19:27] *** cyphase left
[19:27] <lizmat> ah, the colourful one

[19:27] <El_Che> mr_ron: I have seen foreach outperform the C loop 

[19:27] <lizmat> what can I say, ignore him

[19:27] *** cyphase joined
[19:27] <DeadDelta> :)

[19:27] *** cyphase left
[19:28] *** cyphase joined
[19:28] *** cyphase left
[19:30] <El_Che> mr_ron: on my machine, the foreach loop is faster

[19:30] *** cyphase joined
[19:31] <DeadDelta> m: dd max ()

[19:31] <camelia> rakudo-moar 7ec136: OUTPUT: «-Inf␤»

[19:31] <lizmat> DeadDelta: I *will* mention it in the next P6W though

[19:31] <lizmat> m: dd min()

[19:32] <camelia> rakudo-moar 7ec136: OUTPUT: «Inf␤»

[19:32] <DeadDelta> m: dd max (Int)

[19:32] <camelia> rakudo-moar 7ec136: OUTPUT: «-Inf␤»

[19:32] <El_Che> mr_ron: and both are way faster than the perl6 example

[19:32] *** zakharyas joined
[19:32] *** ggoebel joined
[19:32] <DeadDelta> AlexDaniel: a hunch would be some math with max/min is what gives a NaN

[19:33] <DeadDelta> lizmat: and ask for more mass... for crushing :P

[19:33] *** setty1 left
[19:36] <mr_ron> El_Che: I have p6 faster than p5.10 and about the same as 5.18 but 40% slower than 5.26

[19:36] *** cyphase left
[19:38] <El_Che> this is on a mac with 5.18 and rakudo start 2017.01

[19:38] <El_Che> I'll try later on my linux laptop

[19:38] <DeadDelta> Time to upgrade :)

[19:38] <El_Che> (I don't completely get the star versions, but it's the latest I could find)

[19:38] <El_Che> (I'll compile it locally)

[19:39] <El_Che> (but I have wasted more than enough time to make osx workable for me : ) )

[19:39] <DeadDelta> Though that code doesn't look like something happened much

[19:39] <DeadDelta> Star version follow the Rakudo versions they're based on, except they get released like thrice as fewer than monthly rakudo releases

[19:39] <DeadDelta> huggable: star

[19:40] <huggable> DeadDelta, Estimated Rakudo Star releases for 2017: .01, .04, .07 & .10

[19:40] <DeadDelta> So latest is 2017.04 and next will be next month

[19:40] * DeadDelta &

[19:40] *** DeadDelta left
[19:41] *** bjz joined
[19:41] <El_Che> I follow the rakudo release closedly for my linux packages. But got a mac at work (in addition to my main laptop) so I was curious what was needed to write perl6, 5 and go

[19:44] <El_Che> mr_ron: with the extremely anti-scientific method of running the loop once, I get perl-foreach < perl6 < perl5 when I went to 100000000 (x10)

[19:44] <El_Che> so it looks good indeed

[19:45] <El_Che> on the second run the perl6 is the fastest (0.059s faster than the foreach) so I'll stop running it

[19:45] *** setty1 joined
[19:45] <El_Che> success

[19:45] <El_Che> :)

[19:46] *** MilkmanDan left
[19:47] *** MilkmanDan joined
[19:50] <moritz> PSA: I had to disable irclog.perlgeek.de

[19:51] <moritz> the web application process used too much memory, and brought down the whole server

[19:51] <moritz> it's still logging in the background

[19:51] *** cyphase joined
[19:53] <lizmat> moritz: so what caused it to explode like that?  Or did it just go across some threshold ?

[19:53] <perlpilot> clearly it needs a rewrite in P6 ;-)

[19:53] <moritz> lizmat: I updated the OS from Debian Jessie to Stretch

[19:54] <moritz> perlpilot: patches welcome :-)

[19:54] <perlpilot> first someone needs to provide me a patch for some extra time and/or more brain power.  :)

[19:54] <perlpilot> and maybe update my brain so that it doesn't require as much sleep

[19:59] <andrzejku> hi

[19:59] <andrzejku> do someone want to make money with perl?

[19:59] <andrzejku> my friend aksed me as he have an offer

[20:00] <rindolf> andrzejku: hi, I do

[20:00] <andrzejku> rindolf  okay

[20:00] <rindolf> andrewalker: perl 6?

[20:00] <andrzejku> can we speak here?

[20:00] <rindolf> andrzejku: in private will probably be better

[20:01] <andrzejku> okay

[20:01] <perlpilot> though if it really is a Perl 6 job, it would be interesting to here the outcome  :)

[20:01] <perlpilot> s/here/hear/

[20:02] *** khw left
[20:06] *** espadrine joined
[20:09] *** prodotiscus joined
[20:14] *** prodotiscus left
[20:14] *** khw joined
[20:19] <samcv> u: left corner bracket

[20:19] <unicodable6> samcv, U+23A3 LEFT SQUARE BRACKET LOWER CORNER [Sm] (⎣)

[20:19] <unicodable6> samcv, U+23A1 LEFT SQUARE BRACKET UPPER CORNER [Sm] (⎡)

[20:19] <unicodable6> samcv, 9 characters in total: https://gist.github.com/883a1d8bf709933658670c24251e89c1

[20:20] *** andrzejku left
[20:27] *** zakharyas left
[20:29] *** sftp joined
[20:34] *** domidumont left
[20:39] *** mr_ron left
[20:40] *** amkhlv joined
[20:40] <amkhlv> m: "Hi Andrei".say

[20:40] <camelia> rakudo-moar 2ce5b6: OUTPUT: «Hi Andrei␤»

[20:41] <amkhlv> perl6 -e 'for "/tmp/utf-error.txt".IO.lines { say "hi"  } '

[20:42] <amkhlv> gives :   Malformed UTF-8

[20:42] <amkhlv>   in block <unit> at -e line 1

[20:42] <amkhlv> where /tmp/utf-error.txt   contains the word   Birkhäuser

[20:42] <amkhlv> in ISO-8859 

[20:45] *** kyan left
[20:45] <jnthn> Use "/tmp/utf-error.txt".IO.lines(:enc<ISO-8859-1>)

[20:45] *** kyan joined
[20:46] <amkhlv> Yes, this works. But extremely inconvenient. I have thousands of files all in different encodings.

[20:46] <lizmat> .oO( encoding is a bitch)

[20:47] <amkhlv> is it possible to process file in binary format? Will regex match on binary file?

[20:48] <jnthn> No, but ISO-8859-1 will never give a decoding error, so if you care little enough about matching stuff outside of the ASCII range then that'll work :)

[20:49] <jnthn> Don't think there's a module for doing encoding guessing yet

[20:49] *** cog_ joined
[20:49] * jnthn afk

[20:51] <amkhlv> Why  ISO-8859-1 will never give a decoding error  ?

[20:55] <geekosaur> because all bytes are valid. they may not be *meaningful* in a given context, but unlike utf8 there are no invalid byte sequences

[20:56] *** DeadDelta joined
[20:56] <amkhlv> Very interesting, geekosaur, I did not know that ! Thank you

[20:57] *** colomon left
[20:57] <geekosaur> (the utf8 invalid sequences represent multibyte sequences that can't happen, for example the reserved utf16 surrogate codepoints or codepoints outside 00000-10ffff)

[20:59] *** awwaiid left
[21:00] *** awwaiid joined
[21:00] *** st_elmo left
[21:02] <zengargoyle> m: say DateTime.new(1498597328)

[21:02] <camelia> rakudo-moar 2ce5b6: OUTPUT: «2017-06-27T21:02:08Z␤»

[21:05] <zengargoyle> hrm... sub MAIN ( Int $now ) { ... } still keeps a numeric arg as IntStr...

[21:05] *** awwaiid left
[21:05] *** awwaiid joined
[21:06] <timotimo> of course

[21:07] <timotimo> IntStr is Int, so it matches and thus that is what you get

[21:07] <timotimo> m: say (<100> + 0).perl

[21:07] <camelia> rakudo-moar 2ce5b6: OUTPUT: «100␤»

[21:07] <timotimo> m: say (+<100>).perl

[21:07] <camelia> rakudo-moar 2ce5b6: OUTPUT: «100␤»

[21:07] <timotimo> m: say (+<100>).^name

[21:07] <camelia> rakudo-moar 2ce5b6: OUTPUT: «Int␤»

[21:07] <timotimo> m: say (<100>).^name

[21:07] <camelia> rakudo-moar 2ce5b6: OUTPUT: «IntStr␤»

[21:10] <zengargoyle> that $now doesn't pass into DateTime that also asks for an Int. :(

[21:11] <zengargoyle> have to to $now.Int

[21:12] *** mcmillhj left
[21:12] *** cog_ left
[21:17] <DeadDelta> m: say DateTime.new(<1498597328>)

[21:17] <camelia> rakudo-moar 2ce5b6: OUTPUT: «Invalid DateTime string '1498597328'; use an ISO 8601 timestamp (yyyy-mm-ddThh:mm:ssZ or yyyy-mm-ddThh:mm:ss+01:00) instead␤  in block <unit> at <tmp> line 1␤␤»

[21:17] * zengargoyle not sure i like multi method new(Int:D $posix,  :$timezone=0, :&formatter) from DateTime and sub MAIN(Int $now) behaving differently....

[21:17] <DeadDelta> Ah haha

[21:17] <DeadDelta> Right, 'cause the Str candidate wins over

[21:17] <zengargoyle> ah

[21:17] <DeadDelta> zengargoyle: well, just coerce it to int. sub MAIN (Int() $now) {} will probably work

[21:18] <DeadDelta> Oh, it won't coerce, 'cause it already an Int

[21:18] <timotimo> yeah

[21:19] <DeadDelta> +$now when using it then

[21:20] <zengargoyle> is there any major difference between + and .Int?

[21:20] <DeadDelta> Not in this case

[21:21] <DeadDelta> &prefix:<+> -> .Numeric -> .Int

[21:21] <DeadDelta> Just shorter to type

[21:21] <zengargoyle> yeah... :)

[21:22] <DeadDelta> And .Int is just nqp::add_I(self, 0, Int)

[21:22] <DeadDelta> that forces it to numeric only

[21:22] <timotimo> right, it also gets rid of any roles you may have mixed in

[21:30] *** rindolf left
[21:32] <[Coke]> ff

[21:32] <[Coke]> ww

[21:33] <DeadDelta> buggable: drwa

[21:33] <DeadDelta> buggable: draw

[21:33] <buggable> DeadDelta, The next Accidental /win Lottery draw will happen in 3 days, 2 hours, 26 minutes, and 56 seconds. Currently have 1 ballots submitted by 1 users!

[21:33] <timotimo> not as popular as it used to be

[21:33] * DeadDelta is very happy with a new upgrade to perl6.party's markdown pre-processor

[21:34] <DeadDelta> ``Iterator|'s`` gets converted to [`Iterator`'s](https://docs.perl6.org/type/Iterator). ``.pull-one`` -> [`.pull-one`](https://docs.perl6.org/routine/pull-one)

[21:35] <DeadDelta> Gonna link the hell out of articles now :)

[21:36] <DeadDelta> Would be cool to have an end point that displayed search results on docs site. Like https://docs.perl6.org/search/meow would show all results for "meow"

[21:36] <[Coke]> DeadDelta: on my todo list, fwiw.

[21:37] <DeadDelta> [Coke]++

[21:37] <[Coke]> ... I mean, it's been a year, but I'll get to it eventually. :)

[21:37] <DeadDelta> :D

[21:37] <[Coke]> the whole thing is just so (&#$ slow. :|

[21:38] <[Coke]> gets frustrating to try to hack on stuff when the build takes a half hour.

[21:38] *** setty1 left
[21:40] <DeadDelta> Making it faster sounds like a fun project.

[21:40] <DeadDelta> Polish all that nasty code in htmlify.p6. Make it pretty and maintainable.

[21:40] <DeadDelta> And fastah

[21:41] *** DeadDelta left
[21:44] *** robertle left
[21:44] <MasterDuke> DeadDelta: fwiw, benchable's 'compare' option was originally intended to only be used with one commit (i.e., not 'releases', 'all', etc). not sure the output would make sense otherwise (might be the reason why it died)

[21:45] <MasterDuke> but it does need to be made a little smarter/more robust

[21:47] *** |oLa| left
[21:51] *** DeadDelta joined
[21:52] *** DeadDelta left
[21:52] *** DeadDelta joined
[21:59] <DeadDelta> MasterDuke: it told me to if meant to use "all" so I did.

[22:00] <DeadDelta> benchable6: m: 42

[22:00] <benchable6> DeadDelta, ¦m:: «Cannot find this revision (did you mean “all”?)»

[22:00] <MasterDuke> hm, i think that's a generic whateverable feature, will try to fix for benchable

[22:01] <timotimo> good idea %)

[22:02] *** bjz left
[22:03] *** ttkp6 joined
[22:03] *** FROGGS joined
[22:03] *** cyphase left
[22:05] <MasterDuke> can probably add support for multiple commits with compare, it just won't do the bisecting 

[22:05] *** cpage_ joined
[22:05] *** cyphase joined
[22:05] *** cyphase left
[22:06] *** cyphase joined
[22:09] *** cyphase left
[22:10] *** cyphase joined
[22:10] *** cyphase left
[22:13] *** cyphase joined
[22:14] *** awwaiid left
[22:15] *** awwaiid joined
[22:16] *** cyphase left
[22:18] *** nadim_ left
[22:20] *** cyphase joined
[22:23] *** cyphase left
[22:24] *** Voldenet joined
[22:24] *** Voldenet left
[22:24] *** Voldenet joined
[22:24] *** cyphase joined
[22:30] *** zacts left
[22:30] *** wamba left
[22:31] *** cpage_ left
[22:34] *** cpage_ joined
[22:36] *** mcmillhj joined
[22:37] *** MilkmanDan left
[22:37] *** MilkmanDan joined
[22:40] *** ufobat left
[22:48] *** cog_ joined
[22:53] *** Cabanossi left
[22:55] *** Cabanossi joined
[23:03] *** FROGGS left
[23:07] *** cpage_ left
[23:10] *** pmurias left
[23:11] *** cpage_ joined
[23:16] <Geth> ¦ perl6-examples: 99856ad51e | (David Warring)++ | 2 files

[23:16] <Geth> ¦ perl6-examples: populate META6 provides. add t/test-meta.t

[23:16] <Geth> ¦ perl6-examples: review: https://github.com/perl6/perl6-examples/commit/99856ad51e

[23:19] *** kyan left
[23:22] *** itaipu joined
[23:24] *** obfusk joined
[23:28] *** bwisti joined
[23:29] *** cpage_ left
[23:31] <grondilu> weird:  I can't access the logs on http://irclog.perlgeek.de/perl6/today

[23:32] *** BenGoldberg joined
[23:33] *** kyan joined
[23:34] <[Coke]> they're down for maint.

[23:36] <DeadDelta> they're down 'cause of apparent memory leak on newer Perl 5s. Patches welcome: https://github.com/moritz/ilbot

[23:36] <DeadDelta> moritz: they're running in their own user don't they? Maybe perlbrewing older perl for just that user can be a temporary fix?

[23:40] <MasterDuke> moritz: i've used heaptrack a couple of times recently to help out with memory issues

[23:41] *** zacts joined
[23:43] <timotimo> just kill the process daily :P

[23:47] *** cpage_ joined
[23:47] <leont> Many moons ago I ran into an hourly root-cronjob perl script that also had a daily kill cronjob, because of terrible choices in the script.

[23:50] <leont> Rewrote the hell out of it as soon as they let me.

[23:53] *** Cabanossi left
[23:53] *** mcmillhj left
[23:54] *** itaipu left
[23:55] *** Cabanossi joined
[23:57] <timotimo> oh my

[23:57] <BenGoldberg> If the author of a program *knows* his program leaks memory... he could use exec() to start with a clean slate

