[00:05] *** pierre_ left
[00:06] <Geth> ¦ perl6-most-wanted: 81c4d9bf63 | cbk++ (committed using GitHub Web editor) | most-wanted/modules.md

[00:06] <Geth> ¦ perl6-most-wanted: Updated modules.md to list API::USNavalObservatory as a work in progress (WIP)

[00:06] <Geth> ¦ perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/81c4d9bf63

[00:15] *** fatguy left
[00:17] *** Cabanossi left
[00:20] *** Cabanossi joined
[00:26] *** Guest93089 left
[00:39] *** AlexDaniel left
[00:48] *** khw left
[00:53] *** bjz joined
[00:59] *** khw joined
[00:59] *** bjz left
[01:04] *** Cabanossi left
[01:05] *** Cabanossi joined
[01:26] *** kyan left
[01:32] *** Cabanossi left
[01:35] *** Cabanossi joined
[01:45] *** ilbot3 left
[01:48] *** ilbot3 joined
[01:48] *** ChanServ sets mode: +v ilbot3

[02:05] *** pierre_ joined
[02:10] *** pierre_ left
[02:13] *** noganex_ joined
[02:16] *** noganex left
[02:22] *** fatguy joined
[03:09] *** skids joined
[03:26] *** labster joined
[03:31] *** Cabanossi left
[03:33] *** Cabanossi joined
[03:57] *** araujo left
[04:02] *** Cabanossi left
[04:04] *** Cabanossi joined
[04:24] *** zapwai left
[04:27] *** pierre_ joined
[04:49] <Geth> ¦ doc: c1175753eb | (Zoffix Znet)++ | doc/Type/IO/Handle.pod6

[04:49] <Geth> ¦ doc: Fix typo

[04:49] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c1175753eb

[04:50] <fatguy> i can't seem to use p6doc on any function or anything on help section. i'm using rakudo 2017.04.3 binary for mac os x. i already run index build, can someone tell me how to make it work ?

[04:52] *** pierre_ left
[04:53] *** CIAvash joined
[04:55] *** skids left
[04:56] <[Coke]> can you post the command you're running and the error you're getting?

[04:57] <[Coke]> (gist.github.com works for multi-line snippets)

[04:58] <Geth> ¦ ecosystem: 326210508b | loren++ (committed by Zoffix Znet) | META.list

[04:58] <Geth> ¦ ecosystem: Add Terminal::Table version 0.0.1 to the ecosystem (#340)

[04:58] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/326210508b

[04:58] <Geth> ¦ doc/master: 4 commits pushed by (Will "Coke" Coleda)++

[04:58] <Geth> ¦ doc/master: dab687d7f0 | sort file; use lowercase

[04:58] <Geth> ¦ doc/master: 8c5a8dfdf4 | fix typos

[04:58] <Geth> ¦ doc/master: 0ae661973b | learn new word

[04:58] <Geth> ¦ doc/master: 5e58d952f2 | remove extraneous ;s

[04:58] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/c1175753eb...5e58d952f2

[05:04] *** aborazmeh joined
[05:04] *** aborazmeh left
[05:04] *** aborazmeh joined
[05:09] *** aborazmeh left
[05:18] <fatguy> why i need to put ';' at then of the block with this one liner: -e 'my $count; for "banana".comb -> $letter { ++$count if $letter eq "a" }; say $count

[05:18] <fatguy> missed ' at the end

[05:19] <geekosaur> because a semicolon is only inferred after a close brace if it is at the end of a line

[05:19] *** khw left
[05:19] <geekosaur> keep in mind that a Block is an object; it can be passed as a parameter, and can have other parameters after it

[05:20] <geekosaur> but in this case for is a builtin and doesn't expect anything after the Block so the compiler grumps

[05:20] *** aborazmeh joined
[05:20] *** aborazmeh left
[05:20] *** aborazmeh joined
[05:22] <fatguy> geekosaur: thanks

[05:23] <geekosaur> also perl 6 is trying to avoid the "mass of oddly interacting special cases everywhere" behavior of prl 5, so only simple rules like the line-final } rule instead of complex ones based on specific keywords

[05:24] <geekosaur> especially since you can add keywords by means of slangs

[05:29] <araraloren> I'm more used to add smicolon after every `}` :)

[05:32] <Geth> ¦ doc: 25bce38c1b | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[05:32] <Geth> ¦ doc: [io grant] Document IO::Path.succ

[05:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/25bce38c1b

[05:38] *** labster left
[05:47] *** aborazmeh left
[05:49] <Geth> ¦ doc: 82339608d2 | (Zoffix Znet)++ | doc/Type/IO/Handle.pod6

[05:49] <Geth> ¦ doc: [io grant] Improve IO::Handle.t docs

[05:49] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/82339608d2

[05:50] <Geth> ¦ doc: 3274322f0f | (Zoffix Znet)++ | doc/Type/IO/Handle.pod6

[05:50] <Geth> ¦ doc: Add :D to return type

[05:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/3274322f0f

[05:53] <Geth> ¦ doc: b4006a2f5a | (Zoffix Znet)++ | doc/Type/IO/Handle.pod6

[05:53] <Geth> ¦ doc: [io grant] Be explicit what IO::Handle.opened returns

[05:53] <Geth> ¦ doc: 

[05:53] <Geth> ¦ doc: for unopened handles.

[05:53] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b4006a2f5a

[05:55] *** wamba joined
[05:55] <Geth> ¦ doc: c4f27a7424 | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[05:55] <Geth> ¦ doc: [io grant] Document IO::Path.pred

[05:55] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c4f27a7424

[05:57] *** lizmat_ joined
[05:59] *** labster joined
[06:00] *** lizmat left
[06:02] <Geth> ¦ doc: 860333f578 | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[06:02] <Geth> ¦ doc: [io grant] Remove entirely-invented "File test operators"

[06:02] <Geth> ¦ doc: 

[06:02] <Geth> ¦ doc: Remind people of Pair.ACCEPTS from file test method docs, which

[06:02] <Geth> ¦ doc: is what these "operators" really are.

[06:03] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/860333f578

[06:11] *** lizmat_ is now known as lizmat

[06:13] *** pierre_ joined
[06:13] *** domidumont joined
[06:14] *** mcafee joined
[06:16] *** parv joined
[06:17] *** Cabanossi left
[06:18] *** domidumont left
[06:19] *** domidumont joined
[06:19] *** Cabanossi joined
[06:23] *** wamba left
[06:27] *** wamba joined
[06:30] <Geth> ¦ doc: ab0bd7abad | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[06:30] <Geth> ¦ doc: [io grant] Document IO::Path.Numeric/.Int

[06:30] <Geth> ¦ doc: 

[06:30] <Geth> ¦ doc: IMO these really shouldn't exist, but they made it into 6.c language.

[06:30] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ab0bd7abad

[06:35] *** mcafee left
[06:36] <araraloren> Anybody know how to include multi version in **META6** file ?

[06:41] <Geth> ¦ doc: 396d5032e1 | (Zoffix Znet)++ | doc/Type/Str.pod6

[06:41] <Geth> ¦ doc: Document Str.Numeric/.Int

[06:41] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/396d5032e1

[06:42] *** Zoffix joined
[06:42] <Zoffix> araraloren: multi version of what? Dist? Isn't the META6 file specifically for a single version?

[06:43] <Zoffix> What are you trying to do?

[06:46] *** kurahaupo_ left
[06:54] <araraloren> such like versions : [ "v0.0.1", "v0.0.2" ], Zoffix 

[06:54] *** lizmat left
[06:55] <Zoffix> araraloren: I don't think something like that is currently supported

[06:56] <Zoffix> nine: lizmat: ^ if you're short of PTS topics to discuss

[06:57] <araraloren> Zoffix, oh

[06:58] <Zoffix> araraloren: though my question would be, why package two versions in the same dist? Release them separately. If someone wants earlier version, they'll just install that?

[06:58] <araraloren> Zoffix, yeah

[06:58] <araraloren> That's what i mean

[06:59] <Zoffix> Reminds me of the mess with Perl 5's Date::Manip. Giant, dense docs describing all the different "interface versions". It's like... pick one

[07:01] <Zoffix> And I'm unsure how well releasing different versions of the same dists works with our ecosystem. I know some did it like this; adding more than one entry to meta file: https://github.com/perl6/ecosystem/blob/master/META.list#L726-L727

[07:01] <araraloren> I remember Perl6 has a `class Fo:ver(0.0.1)`, but when I can declare one class with different version

[07:01] <araraloren> m: class F:ver<1.10.1> { }; class F:ver<1.0.1> { };

[07:01] <camelia> rakudo-moar c3b472: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol 'F'␤at <tmp>:1␤------> 3ss F:ver<1.10.1> { }; class F:ver<1.0.1>7⏏5 { };␤    expecting any of:␤        generic role␤»

[07:01] <Zoffix> with our current ecosystem I mean; I know CPAN supports it just fine and IIRC you can tell zef to install from CPAN

[07:01] <araraloren> class F:ver<1.10.1> { };

[07:01] <araraloren> m: class F:ver<1.10.1> { };

[07:01] <camelia> rakudo-moar c3b472: ( no output )

[07:02] <araraloren> Zoffix, yeah, that a way to do multi version, but it's not convenient

[07:03] <araraloren> When I release one version, I need to create a PR to **ecosystem**

[07:03] <Geth> ¦ doc: 4f81f08210 | (Zoffix Znet)++ | doc/Type/IO/Handle.pod6

[07:03] <Geth> ¦ doc: [io grant] Improve IO::Handle.get docs

[07:03] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4f81f08210

[07:03] <Zoffix> araraloren: but why are old version still relevant?

[07:04] <Zoffix> Feels it'd be a rareish case, for popular software, to keep old code working when you make non-back-compat change in a new version.

[07:05] <araraloren> Em, If I changed API in new version, the module use old version would not work..

[07:05] <Zoffix> Sure, but ARE you changing the API in new version?

[07:06] <Zoffix> Even with our github ecosystem you can tag previous releases and let people install those via a link to a zip

[07:07] <araraloren> Is zef or panda support this ?

[07:08] <araraloren> Check tag, and install from that source

[07:08] <Zoffix> araraloren: panda isn't relevant; it's dead. And yes, zef supports it. E.g.:   zef install https://github.com/zoffixznet/perl6-IRC-Client/archive/2.001002.zip

[07:08] <Zoffix> And I got that URL from https://github.com/zoffixznet/perl6-IRC-Client/releases?after=3.003003

[07:08] <Zoffix> And it supports installing from CPAN too, as I recall

[07:09] <araraloren> Zoffix, but when I use zef, how I know what version the module released ?

[07:09] <Zoffix> araraloren: also, I sent you an invite to perl6 org. You should have access to most of the org's repos, so you don't need to PR to ecosystem, you can just commit directly by editing from https://github.com/perl6/ecosystem/edit/master/META.list

[07:10] <araraloren> Oh, thanks

[07:10] <Zoffix> araraloren: I don't understand the question. How you know what version you installed?

[07:11] <Zoffix> is that the question?

[07:11] <Zoffix> There's `zef info Some::Module` command

[07:11] <araraloren> No..

[07:11] <araraloren> It's zef list

[07:11] <araraloren> It only list one version info

[07:11] <Zoffix> .... which appears to be busted up. I installed two versions of IRC::Client, but it only reports 1

[07:12] *** lizmat joined
[07:13] <Zoffix> And `list` don't tell me anything. Even zef list --installed IRC::Client shows nothing, despite my having 2 IRC::Client versions.

[07:13] <Zoffix> But anyway. My advice: don't over think this. It's a waste of time to fret over how to release multiple versions with our temporary ecosystem when you don't have any real need to release multiple versions.

[07:13] <Zoffix> \o

[07:13] *** Zoffix left
[07:13] <araraloren> Oh, The problem turn back to ecosystem again, forget it ..

[07:14] <araraloren> Ok

[07:16] *** Cabanossi left
[07:18] <Geth> ¦ ecosystem: bcabd9ab2e | loren++ (committed using GitHub Web editor) | META.list

[07:18] <Geth> ¦ ecosystem: Replace with **version** uri

[07:18] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/bcabd9ab2e

[07:19] *** Cabanossi joined
[07:22] *** xinming_ left
[07:22] <Geth> ¦ doc: c45d389d98 | (Zoffix Znet)++ | doc/Type/IO/Handle.pod6

[07:22] <Geth> ¦ doc: [io grant] Finish off IO::Handle.getc/&getc docs

[07:22] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c45d389d98

[07:25] <Geth> ¦ doc: ca7f7c921c | (Zoffix Znet)++ | doc/Type/IO/Handle.pod6

[07:25] <Geth> ¦ doc: Document &getc defaults to $*ARGFILES

[07:25] <Geth> ¦ doc: 

[07:25] <Geth> ¦ doc: ATM it's NIY in Rakudo and will error out with poor error, but it'll

[07:25] <Geth> ¦ doc: be implemented in less than a week.

[07:25] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ca7f7c921c

[07:29] *** pierre_ left
[07:34] *** pierre__ joined
[07:34] *** pierre__ left
[07:35] *** pierre__ joined
[07:35] *** pierre__ left
[07:35] *** pierre__ joined
[07:36] *** pierre__ left
[07:37] *** pierre__ joined
[07:37] *** bjz joined
[07:39] <Geth> ¦ doc: e0645be5db | (Zoffix Znet)++ | doc/Type/Mu.pod6

[07:39] <Geth> ¦ doc: Fix up &gist

[07:39] <Geth> ¦ doc: 

[07:39] <Geth> ¦ doc: - Use correct signature

[07:39] <Geth> ¦ doc: - Mention say on Str types doesn't use gist

[07:39] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e0645be5db

[07:40] *** pierre__ left
[07:40] *** domidumont left
[07:40] *** pierre__ joined
[07:40] *** pierre__ left
[07:47] *** xinming joined
[07:56] *** ChoHag joined
[08:00] *** domidumont joined
[08:09] *** anton_p joined
[08:10] <Geth> ¦ doc: a4012e0237 | (Zoffix Znet)++ | doc/Type/IO/Handle.pod6

[08:10] <Geth> ¦ doc: [io grant] Document IO::Handle.gist

[08:10] <Geth> ¦ doc: 

[08:10] <Geth> ¦ doc: Rakudo impl: https://github.com/rakudo/rakudo/commit/276d4a7e7e

[08:10] <Geth> ¦ doc: Tests: https://github.com/perl6/roast/blob/a3410d1143/integration/advent2010-day03.t#L29-L36

[08:10] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/a4012e0237

[08:18] *** Cabanossi left
[08:20] *** Cabanossi joined
[08:23] *** CIAvash left
[08:25] *** domidumont left
[08:30] *** dolmen_ joined
[08:35] <Geth> ¦ doc: d15b0c7003 | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[08:35] <Geth> ¦ doc: [io grant] Document IO::Path.gist

[08:35] <Geth> ¦ doc: 

[08:35] <Geth> ¦ doc: Tests:

[08:35] <Geth> ¦ doc: https://github.com/perl6/roast/commit/31e39932d8

[08:35] <Geth> ¦ doc: https://github.com/perl6/roast/commit/e2a3a25751

[08:35] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d15b0c7003

[08:35] <Geth> ¦ modules.perl6.org/problems: eae812be19 | (Tadeusz “tadzik” Sośnierz)++ | site-tips.txt

[08:35] <Geth> ¦ modules.perl6.org/problems: Add todo routes to site tips

[08:35] <Geth> ¦ modules.perl6.org/problems: review: https://github.com/perl6/modules.perl6.org/commit/eae812be19

[08:37] *** ChoHag left
[08:38] *** bjz left
[08:40] *** bjz joined
[08:55] *** TEttinger left
[09:00] *** ChoHag joined
[09:02] *** parv left
[09:18] *** AlexDaniel joined
[09:23] *** fatguy left
[09:33] *** Cabanossi left
[09:35] *** Cabanossi joined
[09:35] *** sjn left
[09:35] *** sjn joined
[09:45] *** pierre_ joined
[09:48] *** dolmen_ left
[09:54] *** BenGoldberg left
[10:03] *** imcsk8 left
[10:17] *** Cabanossi left
[10:20] *** Cabanossi joined
[10:23] *** TeamBlast left
[10:25] *** TeamBlast joined
[10:28] *** pierre_ left
[10:32] *** labster left
[10:32] <Geth> ¦ modules.perl6.org/problems: 9d69c873e3 | (Tadeusz “tadzik” Sośnierz)++ | 2 files

[10:32] <Geth> ¦ modules.perl6.org/problems: Remove leftover debug info

[10:32] <Geth> ¦ modules.perl6.org/problems: review: https://github.com/perl6/modules.perl6.org/commit/9d69c873e3

[10:32] <Geth> ¦ modules.perl6.org/problems: b4c484e0a7 | (Tadeusz “tadzik” Sośnierz)++ | 5 files

[10:32] <Geth> ¦ modules.perl6.org/problems: Have problems have varying severity. Indicate it in the UI

[10:32] <Geth> ¦ modules.perl6.org/problems: review: https://github.com/perl6/modules.perl6.org/commit/b4c484e0a7

[10:39] *** anton_p left
[10:45] *** darutoko joined
[10:52] *** AlexDaniel left
[10:53] *** AlexDaniel joined
[10:58] <AlexDaniel> does this trap https://docs.perl6.org/language/traps#Constants_are_Compile_Time also apply to sigilless variables?

[10:59] *** pierre_ joined
[10:59] *** nadim_ left
[11:00] <jnthn> No

[11:00] *** nadim_ joined
[11:01] *** pierre_ left
[11:02] <Geth> ¦ modules.perl6.org/problems: f1af625ae4 | (Tadeusz “tadzik” Sośnierz)++ | 2 files

[11:02] <Geth> ¦ modules.perl6.org/problems: Mark the lack of MANIFEST file as a problem

[11:02] <Geth> ¦ modules.perl6.org/problems: 

[11:02] <Geth> ¦ modules.perl6.org/problems: As per discussions on PTS, this'd be pretty much a requirement

[11:02] <Geth> ¦ modules.perl6.org/problems: for CPAN usage. It's not a hard requirement now, so the severity

[11:02] <Geth> ¦ modules.perl6.org/problems: is not cranked up to 11 just yet.

[11:02] <Geth> ¦ modules.perl6.org/problems: review: https://github.com/perl6/modules.perl6.org/commit/f1af625ae4

[11:02] <Geth> ¦ modules.perl6.org/problems: 1e55111306 | (Tadeusz “tadzik” Sośnierz)++ | 2 files

[11:02] <Geth> ¦ modules.perl6.org/problems: Improve severity visuals

[11:02] <Geth> ¦ modules.perl6.org/problems: review: https://github.com/perl6/modules.perl6.org/commit/1e55111306

[11:07] *** nadim_ left
[11:12] *** bjz left
[11:14] *** margeas joined
[11:31] *** bjz joined
[11:37] *** pierre_ joined
[11:55] *** domidumont joined
[12:03] *** domidumont left
[12:17] *** grumble left
[12:20] *** nadim_ joined
[12:21] *** grumble joined
[12:26] <masak> interesting: https://insearchofsecrets.com/2014/08/04/lisp-smalltalk-and-the-power-of-symmetry/ -- captures something I've felt sometimes while implementing Perl 6 macros: that the MOP is drinking at least *some* of macros' milkshake

[12:36] *** robertle joined
[12:45] *** imcsk8 joined
[12:53] *** kaare__ left
[13:11] *** chee left
[13:13] *** chee joined
[13:16] *** mephinet left
[13:17] *** mephinet joined
[13:18] *** Cabanossi left
[13:20] *** Cabanossi joined
[13:23] <Geth> ¦ modules.perl6.org/problems: 02ab412d2c | (Tadeusz “tadzik” Sośnierz)++ | 3 files

[13:23] <Geth> ¦ modules.perl6.org/problems: Make Todo controller lookup authors, not full URLs

[13:23] <Geth> ¦ modules.perl6.org/problems: 

[13:23] <Geth> ¦ modules.perl6.org/problems: Required guessing author when it's not specified, and gave us an

[13:23] <Geth> ¦ modules.perl6.org/problems: excuse to store a Problem when an author's not set.

[13:23] <Geth> ¦ modules.perl6.org/problems: 

[13:23] <Geth> ¦ modules.perl6.org/problems: This also fixes a bug with _builder being cleared if something's

[13:23] <Geth> ¦ modules.perl6.org/problems: stored there too early: we don't need to declare it anywhere in

[13:23] <Geth> ¦ modules.perl6.org/problems: particular, autoviv does the work for us.

[13:23] <Geth> ¦ modules.perl6.org/problems: review: https://github.com/perl6/modules.perl6.org/commit/02ab412d2c

[13:23] <Geth> ¦ modules.perl6.org/problems: 68df45f230 | (Tadeusz “tadzik” Sośnierz)++ | lib/ModulesPerl6/Controller/Todo.pm

[13:23] <Geth> ¦ modules.perl6.org/problems: Don't show dists that do everything right on the /todo

[13:23] <Geth> ¦ modules.perl6.org/problems: 

[13:23] <Geth> ¦ modules.perl6.org/problems: (How do I ask DBIC to do that?)

[13:23] <Geth> ¦ modules.perl6.org/problems: review: https://github.com/perl6/modules.perl6.org/commit/68df45f230

[13:28] <tadzik> I'd welcome feedback on https://github.com/perl6/modules.perl6.org/compare/master...perl6:problems It's meant as a place to track sort of a CPAN-readiness of our modules, both as a statistic, as a tool for module authors (“let's see which of my modules do something completely horrible”) and potential contributors, too look for LHF in the ecosystem

[13:28] <tadzik> it looks somewhat like this in practice: https://tadzik.net/pub/SZ25liL5bD.png

[13:36] *** pierre_ left
[13:37] *** pierre_ joined
[13:38] <Geth> ¦ specs: dfbaac8a53 | (Stefan Seifert)++ | S22-package-format.pod

[13:38] <Geth> ¦ specs: Deconfuse auth in the META data.

[13:38] <Geth> ¦ specs: review: https://github.com/perl6/specs/commit/dfbaac8a53

[13:38] <Geth> ¦ specs: b48be2c62d | (Stefan Seifert)++ | S22-package-format.pod

[13:38] <Geth> ¦ specs: Unoutdate S22 a bit

[13:38] <Geth> ¦ specs: 

[13:38] <Geth> ¦ specs: CompUnitRepo has long been renamed to CompUnit::Repository.

[13:38] <Geth> ¦ specs: %?RESOURCE was implemented as %?RESOURCES and is just a plain array.

[13:38] <Geth> ¦ specs: review: https://github.com/perl6/specs/commit/b48be2c62d

[13:43] <moritz> if it's an array, why the % ?

[13:49] <ugexe> because the items get referenced

[13:49] <ugexe> $original => $some_sha1_string

[13:49] <ugexe> e.g. %?RESOURCES<$original>.Str eq $some_sha1_string

[13:52] *** khw joined
[13:52] <ugexe> but its declared as "resources" : [ "original" ]

[13:52] *** bjz left
[13:53] *** kyan joined
[13:53] <Geth> ¦ specs: 7000e04e42 | (Stefan Seifert)++ | S22-package-format.pod

[13:53] <Geth> ¦ specs: Introduce versioning of the META6.json spec for real

[13:53] <Geth> ¦ specs: 

[13:53] <Geth> ¦ specs: Use a more descriptive name of the version field and mark it as

[13:53] <Geth> ¦ specs: required. Tools will provide some backwards compatibility, but this

[13:53] <Geth> ¦ specs: document describes the state as it _should_ be at some point in the

[13:53] <Geth> ¦ specs: future. And there we'll want to have a mandatory meta-version field.

[13:53] <Geth> ¦ specs: review: https://github.com/perl6/specs/commit/7000e04e42

[13:56] <eater> how does `try sink await $async-proc.start` work?

[13:56] <eater> is sink a magic keyword?

[13:57] <AlexDaniel> eater: you mean this? https://docs.perl6.org/language/traps#Sunk_Proc

[13:58] <eater> ye

[13:59] <eater> is it like run("blah").sink ?

[13:59] *** espadrine left
[13:59] *** pierre_ left
[14:00] <AlexDaniel> m: class Foo { method sink { say ‘woosh’ } }; my $x = Foo.new; say $x

[14:00] <camelia> rakudo-moar f4309d: OUTPUT: «Foo.new␤»

[14:00] <AlexDaniel> m: class Foo { method sink { say ‘woosh’ } }; my $x = Foo.new; $x

[14:00] <camelia> rakudo-moar f4309d: OUTPUT: «WARNINGS for <tmp>:␤Useless use of $x in sink context (line 1)␤»

[14:00] <AlexDaniel> hm, interesting

[14:00] <eater> m: say lc "HELP"

[14:00] <camelia> rakudo-moar f4309d: OUTPUT: «help␤»

[14:00] <AlexDaniel> m: class Foo { method sink { say ‘woosh’ } }; Foo.new

[14:00] <camelia> rakudo-moar f4309d: OUTPUT: «woosh␤»

[14:01] <eater> I guess it's doing that w/ sink

[14:01] <eater> also your results are also intresting :')

[14:02] <AlexDaniel> eater: well, yes

[14:02] <AlexDaniel> or not…

[14:03] * AlexDaniel is confused

[14:03] <eater> :')

[14:08] *** zakharyas joined
[14:09] *** pierre_ joined
[14:10] *** fatguy joined
[14:11] *** kaare__ joined
[14:14] <Geth> ¦ whateverable: dce3462b15 | (Aleks-Daniel Jakimenko-Aleksejev)++ | build.p6

[14:14] <Geth> ¦ whateverable: Make build.p6 more universal

[14:14] <Geth> ¦ whateverable: 

[14:14] <Geth> ¦ whateverable: We've been using an almost identical script for MoarVM, it's time to

[14:14] <Geth> ¦ whateverable: bring them back together.

[14:14] <Geth> ¦ whateverable: 

[14:14] <Geth> ¦ whateverable: In theory, now it should be easy to throw in some other backends.

[14:14] <Geth> ¦ whateverable: 

[14:14] <Geth> ¦ whateverable: Somehow I don't like the code here. Refactoring is welcome!

[14:14] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/dce3462b15

[14:15] <AlexDaniel> hm, it probably does not work

[14:16] <AlexDaniel> we will see :)

[14:19] *** Geth left
[14:25] *** domidumont joined
[14:32] *** lizmat left
[14:33] *** lizmat joined
[14:33] *** Cabanossi left
[14:35] *** Cabanossi joined
[14:35] <eater> is there an apt repo w/ up to date perl6 packages?

[14:39] *** Zoffix joined
[14:40] <Zoffix> eater: yes, it's like run(...).sink; it sinks the proc inside the try, instead of having it get sunk outside of it.

[14:40] *** pierre_ left
[14:40] <Zoffix> In `m: class Foo { method sink { say ‘woosh’ } }; my $x = Foo.new; $x` you're not sinking Foo; you're sinking the variable, so you get the warning and no `woosh`

[14:41] <Zoffix> In `class Foo { method sink { say ‘woosh’ } }; Foo.new` you're actually sinking Foo, so you get the `woosh`

[14:41] <Zoffix> eater: I know there are built packages; don't know if there's a repo

[14:41] <Zoffix> huggable: deb

[14:41] <huggable> Zoffix, CentOS, Debian, Fedora and Ubuntu Rakudo packages: https://github.com/nxadm/rakudo-pkg/releases

[14:42] <eater> thanks Zoffix!

[14:42] *** pierre_ joined
[14:43] *** Zoffix left
[14:45] *** espadrine joined
[14:50] *** Geth joined
[14:50] *** ChanServ sets mode: +v Geth

[14:53] *** nowan left
[14:54] *** pierre_ left
[14:55] *** nowan joined
[15:01] *** Zoffix joined
[15:02] <Zoffix> m: say "foo/\x[308]bar" ~~ /<[\/ \\]>/

[15:02] <camelia> rakudo-moar f4309d: OUTPUT: «Nil␤»

[15:02] <Zoffix> Any trick of making a *regex* that would match such a slash and just the slash, without the combiner?

[15:02] <Zoffix> m: dd split /<[\/ \\]>/, "foo/\x[308]bar"

[15:03] <camelia> rakudo-moar f4309d: OUTPUT: «("foo/̈bar",).Seq␤»

[15:03] <Zoffix> So that would be ("foo", "\x[308]bar").Seq

[15:03] *** Cabanossi left
[15:05] *** Cabanossi joined
[15:07] <Zoffix> m: use nqp; dd split /.<?{my str $slash = ~$/; (nqp::iseq_i(nqp::ord($slash), 92) || nqp::iseq_i(nqp::ord($slash), 47)) }>/, "foo/bar/\x[308]ber"

[15:07] <camelia> rakudo-moar f4309d: OUTPUT: «("foo", "bar", "ber").Seq␤»

[15:07] <Zoffix> I also need the \x[308] to not be removed

[15:10] *** nowan left
[15:13] *** chee left
[15:13] <eater> so the result must be foo, bar, \x[308]ber

[15:13] <eater> ?

[15:13] <Zoffix> Yeah, like «("foo", "bar", "\x[308]ber").Seq␤»

[15:14] <Zoffix> m: ("foo", "bar", "\x[308]ber").Seq.perl.say

[15:14] <camelia> rakudo-moar f4309d: OUTPUT: «("foo", "bar", "\x[308]ber").Seq␤»

[15:14] <eater> but also on

[15:14] <Zoffix> weird

[15:14] <eater> foo\bar\\x[308]ber

[15:14] *** dolmen_ joined
[15:14] <Zoffix> m: ("foo", "bar", "x\x[308]ber").Seq.perl.say

[15:14] <camelia> rakudo-moar f4309d: OUTPUT: «("foo", "bar", "ẍber").Seq␤»

[15:14] <Zoffix> Ah, Str.perl needs a thing to combine on...

[15:15] <Zoffix> eater: yeah, if that's split with the regex, it'd also be ("foo", "bar", "\x[308]ber").Seq

[15:15] <Zoffix> And it has to be a regex. I can easily do it without one

[15:16] * Zoffix tries messing with $/

[15:19] *** dolmen_ left
[15:20] <eater> m: dd split /[ \/ || \\ <!before x>]/, 'foo/bar/\x[308]ber'

[15:20] <camelia> rakudo-moar f4309d: OUTPUT: «("foo", "bar", "\\x[308]ber").Seq␤»

[15:20] <eater> there is that

[15:20] <Zoffix> lol

[15:22] *** chee joined
[15:24] <eater> I think the problem is that we have a unicode regex parser

[15:24] <eater> it's applying \x[308] to /

[15:24] <eater> so it's not a / anymore

[15:24] <Zoffix> Yup

[15:25] <eater> and I don't see any flags that will tell it to not combine any characters

[15:25] <Zoffix> There aren't any yet.

[15:26] *** chee left
[15:29] <Zoffix> m: use nqp; my $str = "foo/bar/\x[308]ber"; nqp::stmts((my $p := nqp::encode(nqp::unbox_s($str), 'utf8-c8', buf8.new)), (my int $els = nqp::elems($p)), (my int $i = -1), nqp::while( nqp::isne_i($els, $i = nqp::add_i($i, 1)), nqp::if(nqp::iseq_i(nqp::atpos_i($p, $i), 47) || nqp::iseq_i(nqp::atpos_i($p, $i), 92), nqp::atposref_i($p, $i) = 0)), $str := nqp::decode($p, 'utf8-c8')); dd split /\0/, $str

[15:29] <camelia> rakudo-moar f4309d: OUTPUT: «("foo", "bar", "\x[308]ber").Seq␤»

[15:31] <Zoffix> Well, that's one (slow) way of doing it, I guess, if being careful to change nuls back to slashes in all the relevant bits.

[15:31] <eater> :')

[15:31] <Zoffix> This is for IO::Win32::Spec; I guess I'll try to rewrite stuff without regex where possible

[15:31] <Zoffix> Thanks \o

[15:31] *** Zoffix left
[15:31] *** ChoHag left
[15:33] *** mls left
[15:33] *** ChoHag joined
[15:33] *** mls joined
[15:37] *** rindolf left
[15:37] <tadzik> m: "mojo".succ.say

[15:37] <camelia> rakudo-moar f4309d: OUTPUT: «mojp␤»

[15:38] <tadzik> there

[15:40] <tadzik> m: "Mojolicious".succ.say

[15:40] <camelia> rakudo-moar f4309d: OUTPUT: «Mojoliciout␤»

[15:40] *** tokomer joined
[15:41] <eater> m: "one".succ.say

[15:41] <camelia> rakudo-moar f4309d: OUTPUT: «onf␤»

[15:43] *** anton_p joined
[15:46] *** TeamBlast left
[15:48] *** TeamBlast joined
[15:54] *** zakharyas left
[15:59] <Geth> ¦ doc: 04355a4f80 | (Zoffix Znet)++ | doc/Language/traps.pod6

[15:59] <Geth> ¦ doc: Include example without `try sink`

[15:59] <Geth> ¦ doc: 

[15:59] <Geth> ¦ doc: Since normally you don't need any trys

[15:59] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/04355a4f80

[16:08] *** espadrine left
[16:08] *** jsoo joined
[16:08] *** espadrine joined
[16:11] *** jsoo left
[16:12] *** nowan joined
[16:13] *** jsoo joined
[16:15] *** jsoo left
[16:16] *** Skarsnik joined
[16:17] *** TreyHarris left
[16:19] *** TreyHarris joined
[16:22] <eater> m: role A { method b { ... } }; class B is A {}

[16:22] <camelia> rakudo-moar f4309d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Class B can't pun role A because it has required methods: b. Did you mean to use "does" instead?␤at <tmp>:1␤»

[16:23] <eater> well that's a better error then "Method 'b' must be implemented by A because it is required by roles: A."

[16:24] *** mephinet left
[16:24] *** TreyHarris left
[16:30] *** TreyHarris joined
[16:31] <lucs> m: "exampleXX".say

[16:31] <camelia> rakudo-moar c96727: OUTPUT: «exampleXX␤»

[16:31] <lucs> m: "example".say

[16:31] <camelia> rakudo-moar c96727: OUTPUT: «example␤»

[16:31] <lucs> m: "example".print

[16:31] <camelia> rakudo-moar c96727: OUTPUT: «example»

[16:34] *** Cabanossi left
[16:35] *** Cabanossi joined
[16:37] *** mephinet joined
[16:40] *** lizmat left
[16:41] <araraloren> eater, no, **is** do inheritance, it need a class

[16:41] <araraloren> m: role A { method b { ... } }; class B is A { method b() { } }

[16:41] <camelia> rakudo-moar c96727: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Class B can't pun role A because it has required methods: b. Did you mean to use "does" instead?␤at <tmp>:1␤»

[16:42] <timotimo> araraloren: heyo

[16:42] <araraloren> Em ?

[16:42] <timotimo> araraloren: will you give your table module a section in the readme for "how is it different from the other table modules"?

[16:43] <araraloren> timotimo, other module ?

[16:43] <timotimo> yeah, there's like 6 different modules with "table" in their name

[16:43] <timotimo> huggable: eco table

[16:43] <huggable> timotimo, nothing found

[16:43] <timotimo> buggable: eco table

[16:43] <buggable> timotimo, Found 11 results: Text::Table::List, MIME::QuotedPrint, Text::Abbrev, File::Which, Image::PNG::Portable. See https://modules.perl6.org/#q=table

[16:44] <timotimo> well, only one of these is interesting

[16:44] <timotimo> Terminal::Table, Term::TablePrint, Text::Table::List, Text::Table::Simple

[16:45] <araraloren> I see, but what you mean different ?

[16:45] *** domidumont left
[16:46] <timotimo> how does a user know what module to use

[16:46] <timotimo> yours shows what the table looks like, that's good

[16:46] <araraloren> OH

[16:46] *** domidumont joined
[16:46] <timotimo> Term::TablePrint has no output example :(

[16:46] <timotimo> i'll open an issue for that

[16:46] <araraloren> I will update some example output

[16:47] <araraloren> timotimo, sorry for that

[16:48] <timotimo> no problem :)

[16:48] <timotimo> you already have one example output, that's good

[16:48] <araraloren> yeah, I have some example 

[16:49] *** rindolf joined
[16:51] <eater> how do I pipe to a proc with Proc::Async?

[16:51] *** mxco86 left
[16:52] <timotimo>  you need to open it with :in

[16:52] <timotimo> then you'll have wrie, print, say, and close-stdin

[16:53] <timotimo> alternatively, you can pass stuff to the :in(...)

[16:53] <timotimo> wait, it looks like the arguments are called :r and :w?

[16:53] <eater> yes

[16:53] <eater> that's why I ask :p

[16:53] <eater> I now just use a tap

[16:53] *** khw left
[16:54] <eater> but that means I need to build a buffer somewhere

[16:55] <timotimo> i was confusing the async and non-async version of proc

[16:55] <timotimo> you can call .Channel on a supply

[16:55] <timotimo> if you want to use it like polling or something

[16:56] <timotimo> gotta go, food calls!

[16:58] *** raiph joined
[17:00] *** lizmat joined
[17:04] *** dogbert17_ joined
[17:07] *** dogbert11 left
[17:14] <araraloren> timotimo, I add some output in readme, is that ok? https://github.com/araraloren/perl6-terminal-table

[17:15] <Geth> ¦ doc: 1cf69327aa | (Zoffix Znet)++ | 3 files

[17:15] <Geth> ¦ doc: [io grant] Document IO::Spec::*.is-absolute

[17:15] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1cf69327aa

[17:16] <araraloren> ~~ night

[17:16] *** araraloren left
[17:20] *** anton_p left
[17:21] *** mr-foobar joined
[17:21] <Geth> ¦ doc: 4e88b84b32 | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[17:21] <Geth> ¦ doc: [io grant] Finish up IO::Path.is-absolute

[17:21] <Geth> ¦ doc: 

[17:21] <Geth> ¦ doc: - Include generic example

[17:21] <Geth> ¦ doc: - Point out "/foo" is absolute even on Windows

[17:21] <Geth> ¦ doc: - Include Windows-specific examples

[17:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4e88b84b32

[17:24] *** mcafee joined
[17:27] *** lizmat left
[17:33] <mcafee> Hey, so, if I have an infinite list, is there any way to drop its first element and get an infinite list of the rest of the original list?

[17:36] *** Zoffix joined
[17:36] <Zoffix> mcafee: yeah, .skip

[17:37] <Zoffix> m: my @foo = (1...*).skip: 5;  say @foo[^10

[17:37] <camelia> rakudo-moar 5feb39: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in subscript; couldn't find final ']' ␤at <tmp>:1␤------> 3my @foo = (1...*).skip: 5;  say @foo[^107⏏5<EOL>␤    expecting any of:␤        statement end␤        st…»

[17:37] <Zoffix> m: my @foo = (1...*).skip: 5;  say @foo[^10]

[17:37] <camelia> rakudo-moar 5feb39: OUTPUT: «(6 7 8 9 10 11 12 13 14 15)␤»

[17:37] <Zoffix> m: my @foo = (1...*)[4..*];  say @foo[^10] # also this

[17:37] *** benchable6 left
[17:37] *** bloatable6 left
[17:37] *** statisfiable6 left
[17:37] *** unicodable6 left
[17:37] *** evalable6 left
[17:37] *** quotable6 left
[17:37] *** committable6 left
[17:37] *** bisectable6 left
[17:37] <Zoffix> hah

[17:37] <Zoffix> robocide? :)

[17:37] <camelia> rakudo-moar 5feb39: OUTPUT: «(timeout)»

[17:38] <Zoffix> really

[17:38] <Zoffix> I guess that doesn't propage .is-lazy

[17:38] <Zoffix> m: say (1...*)[4..*].is-lazy

[17:38] <camelia> rakudo-moar 5feb39: OUTPUT: «(timeout)»

[17:38] <Zoffix> why does it reify?

[17:39] <mcafee> I get "No such method 'skip' for invocant of type 'Seq'".  Is it pretty new?

[17:40] <Zoffix> .oO( ♪ oh tell me whyyy... do we build stuff that reify ♪ )

[17:40] *** bloatable6 joined
[17:40] *** quotable6 joined
[17:40] *** committable6 joined
[17:40] *** bisectable6 joined
[17:40] *** ChanServ sets mode: +v bloatable6

[17:40] *** evalable6 joined
[17:40] *** ChanServ sets mode: +v quotable6

[17:40] *** ChanServ sets mode: +v committable6

[17:40] *** ChanServ sets mode: +v bisectable6

[17:40] *** ChanServ sets mode: +v evalable6

[17:40] *** unicodable6 joined
[17:40] *** ChanServ sets mode: +v unicodable6

[17:40] *** benchable6 joined
[17:40] *** ChanServ sets mode: +v benchable6

[17:40] *** statisfiable6 joined
[17:40] *** ChanServ sets mode: +v statisfiable6

[17:40] <Zoffix> mcafee: newish, yeah

[17:40] <mcafee> Okey dokey, time to upgrade then I suppose.

[17:41] <Zoffix> m: my @a = 1..*; say @a.tail(*-5)[^10]

[17:41] <camelia> rakudo-moar 5feb39: OUTPUT: «(6 7 8 9 10 11 12 13 14 15)␤»

[17:41] <Zoffix> star: my @a = 1..*; say @a.tail(*-5)[^10]

[17:41] <camelia> star-m 2016.10: OUTPUT: «Cannot resolve caller tail(Array: WhateverCode); none of these signatures match:␤    (Any:D $: *%_)␤    (Any:D $: Cool $n, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[17:41] <Zoffix> also works, but also new

[17:42] <AlexDaniel> .oO( did YOU upgrade your rakudo? Whateverables just did )

[17:42] <Geth> ¦ whateverable: edcb6687b1 | (Aleks-Daniel Jakimenko-Aleksejev)++ | Whateverable.pm6

[17:42] <Geth> ¦ whateverable: Fix rakudo repo path after dce3462b153

[17:42] <Geth> ¦ whateverable: 

[17:42] <Geth> ¦ whateverable: We keep several rakudo repos (which is excessive but safe), so

[17:42] <Geth> ¦ whateverable: everything will need to be a bit more specific. For now, let's default

[17:42] <Geth> ¦ whateverable: to rakudo-moar directory.

[17:42] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/edcb6687b1

[17:42] <Zoffix> Ah, I see my mistake.

[17:43] <Zoffix> lazy index list is about stopping when the array ends, not about keeping it all lazy

[17:43] <Zoffix> m: my @a = 1…*; @a.shift xx 5; say @a[^10]

[17:43] <camelia> rakudo-moar 5feb39: OUTPUT: «(6 7 8 9 10 11 12 13 14 15)␤»

[17:43] <Zoffix> star: my @a = 1…*; @a.shift xx 5; say @a[^10]

[17:43] <camelia> star-m 2016.10: OUTPUT: «(6 7 8 9 10 11 12 13 14 15)␤»

[17:43] <Zoffix> :) cheatsy-doodle

[17:44] <Zoffix> m: my @a = 1…*; @a.splice: 0, 5; say @a[^10]

[17:44] <camelia> rakudo-moar 5feb39: OUTPUT: «(6 7 8 9 10 11 12 13 14 15)␤»

[17:49] <Geth> ¦ doc: 497e7f7027 | (Zoffix Znet)++ | doc/Type/IO/Path.pod6

[17:49] <Geth> ¦ doc: [io grant] Finish off IO::Path.is-relative

[17:49] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/497e7f7027

[17:57] *** TEttinger joined
[18:02] *** mcafee left
[18:02] *** TeamBlast left
[18:02] *** mrsolo_ joined
[18:02] *** jcallen_ joined
[18:03] *** TeamBlast joined
[18:03] *** Zoffix left
[18:04] *** rblackwe_ joined
[18:04] *** masak_ joined
[18:05] *** integral_ joined
[18:05] *** moritz_ joined
[18:05] *** cosimo_ joined
[18:05] *** Cabanoss- joined
[18:06] *** avalenn left
[18:08] *** Alikzus_ joined
[18:09] *** Cabanossi left
[18:09] *** mrsolo left
[18:09] *** rblackwe left
[18:09] *** jcallen left
[18:09] *** integral left
[18:09] *** Grrrr left
[18:09] *** cosimo left
[18:09] *** masak left
[18:09] *** Cabanoss- is now known as Cabanossi

[18:09] *** mrsolo_ is now known as mrsolo

[18:10] *** Ven joined
[18:10] *** robinsmidsrod joined
[18:10] *** Ven is now known as Guest3385

[18:13] *** Grrrr joined
[18:15] *** nadim_ left
[18:15] *** JimmyZ joined
[18:18] *** chee joined
[18:31] *** vetmaster joined
[18:32] <vetmaster> m: say "test";

[18:32] <camelia> rakudo-moar 5feb39: OUTPUT: «test␤»

[18:33] *** colomon left
[18:34] <vetmaster> p6: while True { say "AAA" }

[18:34] *** Cabanossi left
[18:34] <camelia> rakudo-moar 5feb39: OUTPUT: «(timeout)AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA␤AAA…»

[18:35] <vetmaster> p6: foreach (^70) { say "vonni??" }

[18:35] <camelia> rakudo-moar 5feb39: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of 'foreach'; in Perl 6 please use 'for'␤at <tmp>:1␤------> 3foreach7⏏5 (^70) { say "vonni??" }␤»

[18:35] *** Cabanossi joined
[18:36] <vetmaster> for ^70 { say "vonni??" }

[18:36] *** nadim_ joined
[18:36] <AlexDaniel> m: for ^70 { say "vonni??" }

[18:36] <camelia> rakudo-moar 5feb39: OUTPUT: «vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonni??␤vonn…»

[18:36] <vetmaster> thnx bro

[18:36] <vetmaster> :)

[18:37] <AlexDaniel> vetmaster: if you have any other questions, feel free to ask :)

[18:37] <vetmaster> okay, I've just installed rakudo. and I'm impressed..

[18:38] <eater> :D

[18:38] <AlexDaniel> vetmaster: may I ask what exactly impressed you? :)

[18:39] <Geth> ¦ doc: e05dc4665e | (Zoffix Znet)++ | doc/Type/IO/Handle.pod6

[18:39] <Geth> ¦ doc: s/new line/value of .nl-in/

[18:39] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e05dc4665e

[18:39] <vetmaster> i.e. grammars

[18:40] <vetmaster> I often work with regex on Python

[18:41] <AlexDaniel> oh yeah :)

[18:41] <vetmaster> I also use Perl5, but the 6th version looks more modern

[18:42] *** Guest3385 left
[18:42] <AlexDaniel> well, in perl6 there are ways to write things cleaner, that's for sure

[18:43] *** Ven_ joined
[18:44] <vetmaster> hmm.. it's intuitive!

[18:46] <vetmaster> are there any libraries for natural language processing? (for Perl6)

[18:46] <vetmaster> thanks

[18:47] *** yqt joined
[18:47] <vetmaster> like ntlk in Python3, for example?

[18:49] <Geth> ¦ doc: 3eaf7f2df8 | (Jan-Olof Hendig)++ | doc/Type/Str.pod6

[18:49] <Geth> ¦ doc: Added doc for Str.indices. eater++

[18:49] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/3eaf7f2df8

[18:49] *** lucasb joined
[18:52] <AlexDaniel> vetmaster: I don't know anything about this. But you can probably just use ntlk using Inline::Python https://github.com/niner/Inline-Python

[18:55] <vetmaster> thank you, it would be a good solution

[18:56] <vetmaster> vim Perl 5 & 6 support https://github.com/vim-perl/vim-perl

[18:59] *** lichtkind left
[18:59] *** colomon joined
[19:00] *** skids joined
[19:03] *** pierre joined
[19:05] *** colomon left
[19:07] *** pierre left
[19:08] <vetmaster> could you please suggest some good AI library?

[19:11] *** lichtkind joined
[19:12] *** Sgeo_ joined
[19:13] *** rindolf left
[19:13] *** domidumont left
[19:14] *** Sgeo left
[19:19] *** darutoko left
[19:22] <timotimo> .tell araraloren fantastic! i didn't realize you could have tables in triangle shape or similar! that's really cool and probably sets your module apart from all others

[19:22] <yoleaux> timotimo: I'll pass your message to araraloren.

[19:27] <eater> timotimo: w/o context that looks like such an sarcastic and denouncing statement :')

[19:34] *** Cabanossi left
[19:36] *** Cabanossi joined
[19:38] <timotimo> :(

[19:48] *** nadim_ left
[19:49] *** rindolf joined
[19:56] *** Ven_ left
[19:58] <ugexe> you should be able to upload dists to cpan normally now and have them discovered with zef wi(using the --cpan option)

[19:58] <timotimo> wow

[19:58] <timotimo> we've come so far!

[19:59] <timotimo> that ought to make ti easier to do multiple versions, too, right?

[19:59] <ugexe> zef also has a branch with cpan testers matrix integration

[20:00] <ugexe> its easier in that my cpan indexer will auto populate the source-url

[20:00] <ugexe> but either way you are submitting a new dist to cpan or submitting a new dist to the ecosystem list

[20:01] <timotimo> what is "a dist" in cpanverse?

[20:01] <ugexe> i mean a tarball containing a unique name + version

[20:01] <timotimo> OK

[20:04] *** Cabanossi left
[20:05] *** Cabanossi joined
[20:06] *** Ven joined
[20:07] *** Ven is now known as Guest28311

[20:08] <b2gills> vetmaster: One of the things I really like about grammars are that they are just classes, and regexes/tokens/rules are just methods; so you can compose them using roles.

[20:09] *** kyan left
[20:15] *** Guest28311 left
[20:31] <eater> IO::Path.add is added recently?

[20:32] *** AndyDee joined
[20:34] <timotimo> bisectable6: IO::Path.new("/").add("foo")

[20:34] <bisectable6> timotimo, On both starting points (old=2015.12 new=95e49dc) the exit code is 1 and the output is identical as well

[20:34] <bisectable6> timotimo, Output on both points: «IO::Path is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at /tmp/t6dPk9TO1F line 1␤»

[20:34] <timotimo> m( of course

[20:36] <eater> :")

[20:41] <eater> timotimo: it was added a month ago

[20:41] <timotimo> yeah, zoffix was able to bisect it

[20:52] *** bjz joined
[20:57] <Geth> ¦ whateverable: 39cde1e3e9 | (Aleks-Daniel Jakimenko-Aleksejev)++ | build.p6

[20:57] <Geth> ¦ whateverable: Told you, I'll never remember to avoid this trap

[20:57] <Geth> ¦ whateverable: 

[20:57] <Geth> ¦ whateverable: Similarly to 96ccddccd804b33e0b9c5ed6580c1c23a91a5737

[20:57] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/39cde1e3e9

[21:01] <eater> is there a reason you can't retrieve the Proc object from the Proc::Async object later on?

[21:02] *** haxmeister joined
[21:03] <Geth> ¦ doc: f7e75c1bec | (Zoffix Znet)++ | doc/Type/IO/Handle.pod6

[21:03] <Geth> ¦ doc: [io grant] Document IO::Handle.nl-in

[21:03] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f7e75c1bec

[21:06] <eater> oh, it magically builds a fake Proc object

[21:24] *** lucasb left
[21:30] <Geth> ¦ whateverable: c63ed89d4e | (Daniel Green)++ | Benchable.p6

[21:30] <Geth> ¦ whateverable: Close the pipe between pzstd and tar

[21:30] <Geth> ¦ whateverable: 

[21:30] <Geth> ¦ whateverable: Otherwise sockets get left open and it will die once it hits the 1024

[21:30] <Geth> ¦ whateverable: limit.

[21:30] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/c63ed89d4e

[21:31] <timotimo> a-ha!

[21:37] *** rindolf left
[21:38] *** Skarsnik_ joined
[21:38] *** pochi joined
[21:40] *** Sgeo__ joined
[21:41] *** esh_ joined
[21:41] <tyil> Im working on a module, but its not yet completely done. the things I so far implemented work, and they dont depend on things not yet implemented, and they have tests available. Is it wise to keep it out of the ecosystem until its "complete", or should I add it in advance to let people know someone's working on it?

[21:41] *** rjbs- joined
[21:41] *** ponbiki_ joined
[21:42] *** haxmeist1r joined
[21:42] *** Celelibi_ joined
[21:42] *** Celelibi left
[21:42] *** El_Che_ joined
[21:42] *** imcsk8_ joined
[21:42] *** eaterof joined
[21:42] <moritz_> tyil: add it to the ecosystem now

[21:42] *** incredible left
[21:42] *** esh left
[21:42] *** pochi_ left
[21:42] *** imcsk8 left
[21:42] *** eater left
[21:42] *** El_Che left
[21:42] *** ponbiki left
[21:42] *** haxmeister left
[21:42] *** Sgeo_ left
[21:42] *** Skarsnik left
[21:42] <tyil> right this moment? :p

[21:43] *** xxpor joined
[21:43] *** eaterof is now known as eater

[21:43] <Geth> ¦ whateverable: 09c46d5915 | (Aleks-Daniel Jakimenko-Aleksejev)++ | build.p6

[21:43] <Geth> ¦ whateverable: Build some of the dangling branches

[21:43] <Geth> ¦ whateverable: 

[21:43] <Geth> ¦ whateverable: The title of this commit does not express how cool this is.

[21:43] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/09c46d5915

[21:43] <moritz_> tyil: sure!

[21:43] <timotimo> faster!

[21:44] <timotimo> the moment is almost over!

[21:44] <tyil> D:

[21:45] *** john51 left
[21:45] <AlexDaniel> timotimo: if your “ah-ha” was refering to $proc.out.close, then keep in mind that this is a third commit fixing this…

[21:45] *** john51 joined
[21:46] <Geth> ¦ ecosystem: Tyil++ created pull request #342: Add MPD::Client

[21:46] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/342

[21:46] <AlexDaniel> timotimo: and I don't know what amound of documentation is going to resolve this… https://github.com/perl6/doc/issues/1304

[21:46] <AlexDaniel> amount*

[21:46] <timotimo> yeah, damn

[21:46] <tyil> timotimo: was I still in time

[21:46] <timotimo> tyil: really close! ;)

[21:46] <tyil> I delayed rolling my joint for this!

[21:46] <tyil> but its worth it

[21:46] *** incredible joined
[21:47] <timotimo> AlexDaniel: was somethign keeping the objects around? or can we perhaps put a warning into DESTROY like we have for Failure?

[21:47] *** bjz left
[21:47] <AlexDaniel> timotimo: I don't think so. $proc should be thrown away relatively quickly

[21:47] *** colomon joined
[21:47] <tyil> eater: wanna do a p6 coding weekend again sometime?

[21:48] <timotimo> wanna try if we can check the pipes for being closed before the DESTROY gets called?

[21:48] <timotimo> might be interesting if that triggers

[21:48] <eater> tyil: when I have time and money again :p

[21:48] <Geth> ¦ ecosystem: 0ea4a4ccbd | (Patrick Spek)++ (committed by Moritz Lenz) | META.list

[21:48] <Geth> ¦ ecosystem: Add MPD::Client

[21:48] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/0ea4a4ccbd

[21:48] <tyil> thanks moritz_ :>

[21:48] <tyil> eater: cool

[21:49] <eater> https://github.com/PostCocoon/P6-SystemPackageManager/blob/master/lib/SystemPackageManager/CommandChain.pm6#L69

[21:49] <tyil> I have some plans for perl programs once this module is done

[21:49] <eater> is there a better way to do this?

[21:49] <eater> wrapping start and then sleeping till it's started feel really dirty

[21:49] <tyil> also, I'd like to see how far I can get with an init system in perl 6

[21:49] <eater> s/feel/feels

[21:49] *** colomon left
[21:50] <AlexDaniel> timotimo: well, I don't think I have any time for this now

[21:50] <AlexDaniel> timotimo: but the code to reproduce this issue is just these two lines right there

[21:50] <timotimo> eater: isn't started a promise?

[21:51] <eater> timotimo: that resolves when it's exited

[21:51] <AlexDaniel> timotimo: or even this example from our docs :P https://docs.perl6.org/type/Proc

[21:51] <eater> not really the time to insert stuff into the STDIN :p

[21:51] <timotimo> when it *exits*?

[21:51] <eater> yeah that

[21:52] <timotimo> ah, not a promise

[21:52] <eater> "Returns a promise that will be kept with a Proc object once the external program exits"

[21:52] <eater> https://docs.perl6.org/type/Proc::Async#method_start

[21:52] <timotimo> ah, i see

[21:53] <timotimo> why do you even have to wait?

[21:53] <eater> because if I put data in before it's started

[21:53] <eater> it will tell me that it's not started

[21:53] <AlexDaniel> timotimo: to see how many sockets were left behind you can do something like ｢lsof | grep socket｣

[21:54] <timotimo> huh.

[21:54] <eater> and it's not immeditially started after it ran .start

[21:54] <timotimo> of course not, it's async after all :)

[21:54] <AlexDaniel> maybe narrow it down by pid, but this should be pretty much enough :)

[21:55] *** setty1 left
[21:55] <timotimo> eater: i think wrapping the "start" method of a single instance of Proc::Async isn't possible. you're probably poisoning every single Proc::Async in existence

[21:56] <eater> timotimo: whooo

[21:56] <eater> it's not needed if I do the until sleep loop anyway

[21:58] <timotimo> it's strange that we don't have a method that'd let us wait for a program to start

[21:58] <eater> Im currently looking up the MoarVM callback for it

[21:58] *** colomon joined
[21:59] <timotimo> like, the docs have an example where it just "await $proc.write(Buf.new(12, 42))"

[21:59] <timotimo> without doing any waiting for the proc to start or anything

[21:59] <eater> MoarVM has the "ready" callback

[21:59] *** labster joined
[22:00] <eater> tbh I expected .started to be a Promise

[22:00] <timotimo> me, too

[22:00] <timotimo> that's an api change we can't easily make, though

[22:01] <timotimo> how do i find a process that takes long enough to start so i can get the error you were talking about?

[22:01] *** bjz joined
[22:01] <timotimo> i can just start and immediately write to cat :P

[22:01] <timotimo> but cat is small

[22:01] <eater> bash -c 'sleep 5; cat;'

[22:02] <eater> oh wait

[22:02] <eater> I get what you mean

[22:02] *** Cabanossi left
[22:03] <timotimo> even with perl6 -e ... i can't get it to start up slow enough

[22:03] <timotimo> are you sure you aren't somehow accidentally calling write before you called .start?

[22:04] <eater> well... if you saw the code, I wrapped start, ran callsame and then did the thing

[22:04] <eater> oH!

[22:04] <eater> I see the problem :')

[22:04] <eater> because it applies that wrap to all procs

[22:04] <eater> it ran when I started the first process

[22:05] <timotimo> ah, yeah

[22:05] <timotimo> that would totally do it

[22:05] <timotimo> i'd suggest you force the consumer of your piper class to have a method to call after you do .new, and one to call after you .start

[22:05] <timotimo> or something

[22:06] <eater> why no ready promise? :')

[22:06] *** colomon left
[22:07] *** Cabanossi joined
[22:07] <eater> well time for sleep now, see ya and thanks for the help timotimo  :)

[22:07] *** colomon joined
[22:07] <timotimo> i don't think there's any point in time where it wouldn't immediately be kept

[22:08] <timotimo> so $proc.ready.then would be a no-op

[22:08] *** Cabanossi left
[22:09] *** Cabanossi joined
[22:12] *** MasterDuke__ joined
[22:12] *** bjz left
[22:13] *** MasterDuke_ left
[22:14] *** MasterDuke__ left
[22:15] *** Skarsnik_ left
[22:15] *** MasterDuke_ joined
[22:19] *** colomon left
[22:21] *** colomon joined
[22:27] *** colomon left
[22:30] *** BenGoldberg joined
[22:33] *** araujo joined
[22:33] *** araujo left
[22:33] *** araujo joined
[22:39] *** Sgeo__ left
[22:40] *** robertle left
[22:41] *** Sgeo joined
[22:42] *** pierre joined
[22:45] *** labster left
[22:47] *** pierre left
[22:49] *** yqt left
[22:56] *** dogbert11 joined
[22:58] *** dogbert17_ left
[23:01] *** lichtkind left
[23:18] *** colomon joined
[23:20] *** espadrine left
[23:21] *** colomon left
[23:25] *** pierre joined
[23:26] *** pierre left
[23:42] *** margeas left
[23:47] *** kybr joined
[23:54] *** kyan joined
[23:54] *** kybr left
