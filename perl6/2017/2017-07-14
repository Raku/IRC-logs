[00:01] *** kurahaupo_ joined
[00:03] *** kurahaupo left
[00:04] *** skids joined
[00:08] *** pierre__ joined
[00:10] *** kurahaupo_ left
[00:11] *** kurahaupo joined
[00:12] *** kurahaupo_ joined
[00:13] *** pierre__ left
[00:13] *** kurahaupo_ left
[00:13] *** pierre__ joined
[00:13] *** kurahaupo_ joined
[00:14] *** kurahaupo_ left
[00:14] *** wamba left
[00:14] *** kurahaupo left
[00:14] *** kurahaupo joined
[00:16] *** kurahaupo_ joined
[00:17] *** kurahaupo_ left
[00:17] *** kurahaupo_ joined
[00:19] *** kurahaupo left
[00:19] *** cdg joined
[00:23] *** cdg_ left
[00:26] *** cdg left
[00:28] *** lookatme joined
[00:29] <lookatme> morning 

[00:48] *** Cabanossi left
[00:50] *** Cabanossi joined
[00:54] *** lookatme_ joined
[00:56] *** lookatme left
[00:59] *** cdg joined
[01:03] *** cdg left
[01:06] <sacomo> morning

[01:10] *** lookatme_ is now known as lookatme

[01:19] *** Sgeo left
[01:21] *** Sgeo joined
[01:28] *** pierre__ left
[01:32] *** evanm joined
[01:36] *** evanm left
[01:37] *** pierre__ joined
[01:48] *** Cabanossi left
[01:50] *** Cabanossi joined
[02:05] *** pilne left
[02:06] *** noganex_ joined
[02:08] *** gdonald left
[02:09] *** noganex left
[02:10] *** mcmillhj joined
[02:12] *** skids left
[02:14] *** mcmillhj left
[02:16] <zengargoyle> hrm, i wonder if rakudo is actually relocatable without recompilation...  could one build p6 to /opt/perl6 and then `mv /opt/perl6 /usr/local` and have it still work?

[02:17] <Morfent> didn't work when i fucked up and built it in /usr/local/bin/bin

[02:19] *** Cabanossi left
[02:19] <zengargoyle> i know p5 took a few flags to be able to be relocatable.  my only p5 contribution was making sitelocal work with relocatableinc. :)

[02:20] *** gdonald joined
[02:20] *** Cabanossi joined
[02:21] <MasterDuke> zengargoyle: it's not currently relocatable

[02:21] <zengargoyle> i fear perl6hobo's idea of zipping up a folder isn't goint to work in the "just unzip the folder somewhere and it will work" way.  

[02:22] <zengargoyle> MasterDuke: thanks, sorta didn't think it was.

[02:23] <MasterDuke> i think mst has done some work to make it more so, but that hasn't made its way into the repo yet

[02:24] <zengargoyle> ah, cool.

[02:26] *** mcmillhj joined
[02:31] *** mcmillhj left
[02:38] *** skids joined
[02:39] *** rindolf joined
[02:43] *** reino4477 joined
[02:43] <reino4477> how can I read an enviromental variable, for example, $SHELL?

[02:43] <AlexDaniel> %ENV<SHELL>

[02:43] <AlexDaniel> m: say %*ENV<SHELL>

[02:43] <camelia> rakudo-moar 8d5f33: OUTPUT: «/bin/bash␤»

[02:43] <AlexDaniel> sorry, %*ENV<SHELL>

[02:44] <AlexDaniel> with *

[02:44] <reino4477> ok

[02:45] <reino4477> why is the * required?  %ENV<SHELL> --> doesn't work

[02:47] <geekosaur> the latter is a lexical variable. the * twigil indicates a dynamic variable

[02:47] <AlexDaniel> See this also: https://docs.perl6.org/language/variables#Dynamic_variables

[02:47] <reino4477> thx

[02:47] *** reino4477 left
[02:54] *** kurahaupo joined
[02:54] *** reino4477 joined
[02:54] *** kurahaupo left
[02:54] *** kurahaupo joined
[02:55] *** kurahaupo_ left
[02:56] <reino4477> I have a method which accepts a dictionary. How can I a) specify the names of keys it expects b) specify what keys can be passed together and which can't?  

[02:57] <reino4477> for example "connect(:url => "someurl")" or "connect(:user_name => "fdsfd", password => "passw")"   but url and user_name/pass can't be passed at the same time

[02:58] <reino4477> multi methods? 

[03:01] <AlexDaniel> m: sub foo(%h (:$hello, :$world)) { dd %h }; foo({hello => 45, world => 50})

[03:01] <camelia> rakudo-moar 8d5f33: OUTPUT: «Hash % = {:hello(45), :world(50)}␤»

[03:01] <AlexDaniel> m: sub foo(%h (:$hello, :$world)) { dd $hello }; foo({hello => 45, world => 50})

[03:01] <camelia> rakudo-moar 8d5f33: OUTPUT: «Int $hello = 45␤»

[03:01] <AlexDaniel> m: sub foo(%h (:$hello, :$world)) { dd $hello }; foo({hello => 45, wor => 50})

[03:01] <camelia> rakudo-moar 8d5f33: OUTPUT: «Unexpected named argument 'wor' passed in sub-signature of parameter %h␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:01] <AlexDaniel> this seems to be working just fine

[03:01] <AlexDaniel> reino4477: yes, you can also use multi methods with this

[03:02] <AlexDaniel> reino4477: see this for some info: https://docs.perl6.org/type/Signature#index-entry-destructuring_arguments_%28Signature%29

[03:07] *** lizmat left
[03:09] <reino4477> thx

[03:14] *** reino4477 left
[03:31] *** reino4477 joined
[03:31] <reino4477> I have: "enum Result<Success Error>;" 

[03:31] <reino4477> Is there any way to do something like this "enum Result<Success Error(Str message)>;"?

[03:33] <geekosaur> not with an enum

[03:34] <geekosaur> although it could be argued that you want a custom Failure instead

[03:36] *** reino4477 left
[03:44] <AlexDaniel> actually…

[03:46] <AlexDaniel> m: enum Result<Success Error>; sub foo(Result $x) { say ~$x }; foo(Error but ‘oh my gawd what is this’)

[03:46] <camelia> rakudo-moar 8d5f33: OUTPUT: «oh my gawd what is this␤»

[03:46] <AlexDaniel> I can't justify having something like this in a real code base, but… you can do it if you really want to

[03:47] <AlexDaniel> m: enum Result<Success Error>; multi sub foo(Success) { say ‘\o/’ }; multi sub foo(Result $x) { say ~$x }; foo(Success); foo(Error but ‘oh my gawd what is this’)

[03:47] <camelia> rakudo-moar 8d5f33: OUTPUT: «\o/␤oh my gawd what is this␤»

[03:47] <AlexDaniel> m: enum Result<Success Error>; multi sub foo(Success) { say ‘\o/’ }; multi sub foo(Error $x) { say ~$x }; foo(Success); foo(Error but ‘oh my gawd what is this’)

[03:47] <camelia> rakudo-moar 8d5f33: OUTPUT: «\o/␤Cannot resolve caller foo(Result+{<anon|43370320>}::Error); none of these signatures match:␤    (Result $ where { ... })␤    (Result $x where { ... })␤  in block <unit> at <tmp> line 1␤␤»

[03:47] <AlexDaniel> m: enum Result<Success Error>; multi sub foo(Success) { say ‘\o/’ }; multi sub foo(Error() $x) { say ~$x }; foo(Success); foo(Error but ‘oh my gawd what is this’)

[03:47] <camelia> rakudo-moar 8d5f33: OUTPUT: «\o/␤No such method 'Result' for invocant of type 'Result+{<anon|43222896>}'␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:47] *** Cabanossi left
[03:47] <AlexDaniel> well, doesn't really work… :)

[03:49] *** Cabanossi joined
[03:58] *** cdg joined
[03:59] *** skids left
[04:03] *** cdg left
[04:09] *** rindolf left
[04:14] *** evanm joined
[04:18] *** evanm left
[04:32] *** pierre__ left
[04:41] *** khw left
[04:50] *** cdg joined
[04:50] *** vendethiel joined
[04:53] *** Todd__ joined
[04:53] <Todd__> anyone home?

[04:55] <timotimo> Todd__: yo

[04:55] *** cdg left
[04:55] *** xtreak joined
[04:56] <Todd__> Ho Timo.  I jsut upgraded one from my machines from Fedora 25 to 26.  A previously running program gives me the following error.  I am stumped!

[04:56] <Todd__> This type cannot unbox to a native string: P6opaque, Failure]

[04:56] <Todd__> Hi not ho

[04:56] <timotimo> ah, that's not such a good error message

[04:57] <timotimo> does passing --ll-exception directly after perl6 in the commandline give more info?

[04:57] <Todd__> will try

[04:58] <timotimo> that'll tell us where a Failure is being fed to code that expects to be working with a string

[04:59] <Todd__> http://vpaste.net/RpJnJ

[05:00] <timotimo> looks like it's failing to load some precompiled file

[05:01] <timotimo> it shouldn't fail like that, but you can probably help things by removing precompilation folders

[05:01] *** evanm joined
[05:01] <timotimo> if you set RAKUDO_MODULE_DEBUG=1 in the environment it'll give you more detail on what exactly is breaking

[05:03] <Todd__> http://vpaste.net/a1HxE

[05:04] <Todd__> how do I remove "precompilation folders"?

[05:08] <ugexe> whats your perl6 -v?

[05:08] <Todd__> Found whre it is happening.  It is in a pm module I wrote:

[05:08] <Todd__> use X11Clipboard;  #`{ WritePrimaryClipboard, WriteSecondaryClipboard, ReadPrimaryClipboard, ReadSecondaryClipboard }

[05:10] <Todd__> do you guys mind if I paste the module into vpaste for you guys to look at?

[05:10] <timotimo> it's probably not a problem with the module itself

[05:10] <ugexe> https://github.com/rakudo/rakudo/blob/nom/src/core/CompUnit/PrecompilationUnit.pm#L51 this is where its failing

[05:11] <Todd__> it happen right at the use X11Clipboard` with all calls to it commented out

[05:11] <timotimo> okay so the slurp is failing

[05:12] <Todd__> I don't understand the link you send

[05:12] <timotimo> it makes sense that it'd blow up with that error about unboxing to string, as nqp::sha1 is a low-level op that only wants to have strings

[05:13] <ugexe> right, so something about updating the os is also likely to run that path (re-precompiling outdated stuff)

[05:13] <Todd__> here is another debug on a shorter program that call that module

[05:13] <Todd__> http://vpaste.net/hCijR

[05:13] <timotimo> Todd__: please give us the output you get when you set RAKUDO_MODULE_DEBUG

[05:13] <ugexe> maybe permissions

[05:13] <timotimo> ah there it is

[05:14] <timotimo> hmpf, not as helpful as i had hoped

[05:15] <Todd__> would you like to see the module in question?

[05:15] *** AlexDaniel left
[05:16] <timotimo> could you make a change to your local rakudo and recompile + reinstall it?

[05:16] <timotimo> also, tell us your perl6 -v please?

[05:17] <Todd__> r&r ing

[05:17] <ugexe> /usr/lib64/perl6 makes me think its permissions

[05:17] <timotimo> could be, yeah, but doesn't it just slurp there?

[05:18] <Todd__> # rpm -qa \*rakudo\* rakudo-0.2017.06-1.fc26.x86_64

[05:18] <Todd__> perl6 -v This is Rakudo version 2017.06 built on MoarVM version 2017.06 implementing Perl 6.c.

[05:18] <timotimo> ugexe: should we just put a .self after the slurp call there?

[05:19] <Todd__> no symptom change after r&r

[05:19] <timotimo> r&r?

[05:19] <ugexe> probably. if you try to slurp a file you dont have permissions for it would probably give you a Failure that its failign to unbox

[05:20] <Todd__> I have two slurps in my module

[05:20] <Todd__> my $proc = run('xclip', '-selection', 'primary', '-o', :out);

[05:20] <Todd__> my $Str = $proc.out.slurp-rest.lines;

[05:20] <timotimo> it's not about your module

[05:20] <Todd__> the other is similar

[05:20] <timotimo> the problem happens deep inside rakudo

[05:20] <Todd__> sounds like I came to the right place

[05:21] <Todd__> Are you the same Timo that helped me attach a zip file to an eMail?

[05:21] <ugexe> m: use nqp; say nqp::sha1("/root".IO.slurp)

[05:21] <camelia> rakudo-moar 8d5f33: OUTPUT: «This type cannot unbox to a native string: P6opaque, Failure␤  in block <unit> at <tmp> line 1␤␤»

[05:21] <timotimo> c: 2017.06 Failure.new.self

[05:21] <committable6> timotimo, ¦2017.06: «Failed␤␤Actually thrown at:␤  in block <unit> at /tmp/NKWlsBH3i4 line 1␤ «exit code = 1»»

[05:21] <timotimo> c: 2017.06 "hi".self

[05:21] <committable6> timotimo, ¦2017.06: «»

[05:21] <timotimo> that's good

[05:22] *** evanm left
[05:23] <timotimo> the problem now is that you can't change the rakudo source you're using because you're using a binary package :(

[05:23] <ugexe> maybe rm -rf /home/linuxutil/.precomp

[05:25] <Todd__> I renamed .precomp.  That got rid of the error.  Now I have an error in xclip to trobleshoot.  I will stay connected for a bit in case you guys need me to test anything

[05:27] *** cdg joined
[05:27] <Todd__> Fedora 26 is using Wayland.  I bet that is the issue with xclip.  Chuckle.

[05:31] *** cdg left
[05:35] *** pierre__ joined
[05:37] *** shinobi_cl joined
[05:38] *** pierre__ left
[05:41] *** ufobat joined
[05:41] *** pierre__ joined
[05:46] *** kyan joined
[05:51] *** vendethiel- joined
[05:52] *** vendethiel left
[05:52] <shinobi_cl> r: say "abc".split.perl;

[05:52] <camelia> rakudo-jvm 8d5f33: OUTPUT: «Died␤  in block <unit> at <tmp> line 1␤␤»

[05:52] <camelia> ..rakudo-moar 8d5f33: OUTPUT: «Cannot resolve caller split(Str: ); none of these signatures match:␤    (Str:D $: Regex:D $pat, $limit is copy = Inf;; :$v is copy, :$k, :$kv, :$p, :$skip-empty, *%_)␤    (Str:D $: Cool $match;; :$v is copy, :$k, :$kv, :$p, :$skip-empty, *%_)␤    (…»

[05:52] <shinobi_cl> r: say "abc".split('').perl;

[05:52] <camelia> rakudo-{moar,jvm} 8d5f33: OUTPUT: «("", "a", "b", "c", "").Seq␤»

[05:53] <shinobi_cl> Hi all, how can i make it so split returns only "a","b","c", without the empty elements?

[05:54] <moritz> m: say "abc".comb()

[05:54] <camelia> rakudo-moar 8d5f33: OUTPUT: «(a b c)␤»

[05:54] <moritz> shinobi_cl: ^^

[05:54] <shinobi_cl> i mean, i think skip-empty does that, but, i'm more curious about the presence of these empty elements

[05:54] <moritz> don't use split

[05:54] <shinobi_cl> oh, i see. Thanks :)

[05:54] <moritz> well, the default argument to split is the empty string

[05:55] <moritz> it's like when you have a regex that can match an empty string, you also get empty strings from split

[05:55] <geekosaur> r: say "abc".comb.perl

[05:55] <camelia> rakudo-{moar,jvm} 8d5f33: OUTPUT: «("a", "b", "c").Seq␤»

[05:56] *** parv joined
[06:00] *** vendethiel- left
[06:00] <Todd__> calling it a night!

[06:00] <Todd__> exit

[06:00] *** Todd__ left
[06:03] *** cdg joined
[06:08] *** cdg left
[06:09] *** BenGoldberg left
[06:15] *** mr-foobar joined
[06:18] *** Cabanossi left
[06:19] *** Cabanossi joined
[06:20] *** andrzejk_ joined
[06:31] *** |oLa| joined
[06:36] *** cschwenz joined
[06:37] *** cschwenz left
[06:37] *** cschwenz joined
[06:38] *** perl6hobo left
[07:07] *** wamba joined
[07:17] *** kurahaupo_ joined
[07:17] *** kurahaupo_ left
[07:18] *** kurahaupo_ joined
[07:19] *** kurahaupo left
[07:22] *** kurahaupo joined
[07:22] *** kurahaupo left
[07:23] *** kurahaupo joined
[07:24] *** kurahaupo_ left
[07:25] *** kurahaupo_ joined
[07:26] *** kurahaupo_ left
[07:27] *** kurahaupo left
[07:28] *** kurahaupo_ joined
[07:30] *** cdg joined
[07:30] *** cschwenz left
[07:33] *** darutoko joined
[07:33] *** kurahaupo joined
[07:34] *** cdg left
[07:35] *** kurahaupo_ left
[07:44] *** abraxxa joined
[07:47] *** andrzejk_ left
[07:51] *** shinobi_cl left
[07:51] *** kurahaupo left
[07:51] *** kurahaupo_ joined
[07:55] *** domidumont joined
[07:56] *** robertle joined
[07:56] *** parv left
[08:01] *** zakharyas joined
[08:02] *** domidumont left
[08:02] *** domidumont joined
[08:07] *** lowbro joined
[08:07] *** lowbro left
[08:07] *** lowbro joined
[08:09] *** kurahaupo_ left
[08:09] *** domidumont left
[08:09] *** kurahaupo joined
[08:09] *** kurahaupo_ joined
[08:11] *** kurahaupo_ left
[08:12] *** kurahaupo_ joined
[08:12] *** kurahaupo left
[08:13] *** kurahaupo_ left
[08:13] *** kurahaupo joined
[08:14] *** kurahaupo_ joined
[08:17] *** dakkar joined
[08:18] *** kurahaupo left
[08:23] *** cosimo joined
[08:26] *** cdg joined
[08:31] *** cdg left
[08:32] *** Cabanossi left
[08:34] *** cosimo left
[08:34] *** cosimo joined
[08:35] *** Cabanossi joined
[08:36] *** Caelum joined
[08:46] *** robertle left
[08:46] *** rindolf joined
[08:54] *** mr-foobar left
[08:55] *** lizmat joined
[08:57] *** mr-foobar joined
[08:59] *** cpage__ joined
[08:59] *** cpage_ left
[08:59] *** cpage__ is now known as cpage_

[09:02] *** astj_ joined
[09:02] *** astj left
[09:13] *** xtreak left
[09:18] *** cdg joined
[09:22] *** pierre__ left
[09:23] *** cdg left
[09:27] *** pierre__ joined
[09:29] *** cpage_ left
[09:30] *** lookatme left
[09:31] *** xtreak joined
[09:41] *** TEttinger left
[09:56] *** zakharyas left
[09:57] *** zakharyas joined
[10:05] *** astj joined
[10:05] *** astj_ left
[10:09] *** vendethiel joined
[10:18] *** Cabanossi left
[10:20] *** Cabanossi joined
[10:22] *** gregf_ left
[10:54] *** lizmat left
[10:55] *** lizmat joined
[10:57] *** gregf_ joined
[11:18] *** cosimo left
[11:28] *** cdg joined
[11:32] *** cdg left
[11:36] *** nebuchadnezzar left
[11:40] *** lizmat left
[11:46] *** ribasushi left
[11:48] *** xtreak left
[11:51] *** xtreak joined
[11:53] *** ribasushi joined
[11:55] *** lizmat joined
[12:03] *** Khisanth left
[12:04] *** pierre__ left
[12:08] *** pierre__ joined
[12:15] *** Khisanth joined
[12:20] *** cdg joined
[12:21] *** pierre__ left
[12:23] *** Peter_R joined
[12:25] *** cdg left
[12:25] *** xtreak left
[12:32] *** nightfrog joined
[12:33] *** Cabanossi left
[12:35] *** Cabanossi joined
[12:39] *** pierre__ joined
[12:41] *** nadim joined
[12:43] <nadim> lizmat: you asked yesterday "nadim: do you need to be able to return from the sub ?" that was about declaring an anonymous sub without the sub keyword. I don't think I saw an answer after I answered "no" to your question.

[12:51] <nadim> I may have found a bug, compiling the lates to see if it is gone. I get a "Cannot invoke null object" when I am pretty sure the object is/should not be null. It is reproducible but no easy golfing. how does one go  with those?

[12:51] *** nicq20 joined
[12:52] *** mcmillhj joined
[12:52] <nadim> ah! bug is gone in the latest

[12:53] <lizmat> *phew*  :-)

[12:54] *** nebuchadnezzar joined
[12:54] <nadim> Good work :)

[12:55] <nadim> it's weird, like most bugs, "$_.comb($width).map:" generated the error when I know $_ is not null, I print it the line above the .comb

[12:57] *** cosimo joined
[12:57] <nadim> lizmat: what about those anonymous subs?

[12:57] <jnthn> If you don't need to return, you don't need sub at all, just use a pointy block

[12:58] <lizmat> aka  -> { } vs sub { }

[12:59] <jnthn> Other difference between them is that -> uses Mu as the default parameter type, and sub uses Any

[12:59] <nadim> I need the -> in front of the block?

[13:00] <jnthn> Only if you want to have a (possibly empty) signature

[13:01] <nadim> what the code looks like  https://nopaste.linux-dev.org/?1159759

[13:01] *** itaipu joined
[13:01] <nadim> I am using interactive input now but I still would like to know

[13:01] <jnthn> { } will be interpreted as a hash rather than an empty block

[13:02] <jnthn> But other than that you could just delete the word "sub" in front of all of them and get the same

[13:02] <jnthn> Also $_() can be written .()

[13:03] <nadim> OK so it's only the firs {} that is a hash, the rest isn't

[13:04] <nadim> I had them all without sub in front, got the hash error, thought it was about all the blocks.

[13:15] *** itaipu left
[13:22] *** itaipu joined
[13:26] *** abraxxa left
[13:26] *** lizmat left
[13:27] *** bdmatatu joined
[13:29] *** mcmillhj left
[13:29] *** mcmillhj joined
[13:32] *** Cabanossi left
[13:35] *** Cabanossi joined
[13:39] *** kurahaupo_ left
[13:41] <timotimo> yeah { } is a hash, if you want it to be a code block you can put a ; in the midle

[13:41] <timotimo> m: my $foo = { ; }; say $foo.^name

[13:41] <camelia> rakudo-moar 80bbfc: OUTPUT: «Block␤»

[13:42] <nadim> that was the first thing I tried when I understood that it was not all the block but just the first :)

[13:44] *** lizmat joined
[13:44] *** Peter_R left
[13:50] *** skids joined
[13:52] <timotimo> tends to be a good idea to assign these tnings to a &-sigiled variable

[13:53] <nadim> ok, why?

[13:53] <nadim> clarity?

[13:54] <jnthn> Also that you get a type check that it's something callable

[14:05] *** araraloren joined
[14:07] <nicq20> When using slangs, should $*LANG.^name change from Perl6::Grammar?

[14:07] *** cschwenz joined
[14:07] *** lucasb joined
[14:07] <nicq20> After it's `use`-ed that is.

[14:10] <cschwenz> Is there an *efficient* Perl6 way to convert an integer into an array of bits which represent said integer (don't care about endianness)?  Or would I be better off simply coding it myself using bitwise operators?

[14:10] *** lizmat left
[14:11] *** nicq20-mobile joined
[14:14] *** lizmat joined
[14:18] *** Cabanossi left
[14:19] *** Cabanossi joined
[14:24] <timotimo> m: 123456.polymod(2 xx *)

[14:24] *** nicq20-mobile left
[14:24] <camelia> rakudo-moar 0c02f9: ( no output )

[14:24] <timotimo> m: 123456.polymod(2 xx *).perl.say

[14:25] <camelia> rakudo-moar 0c02f9: OUTPUT: «(0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1).Seq␤»

[14:25] <timotimo> m: say 123456.base(2)

[14:25] <camelia> rakudo-moar 0c02f9: OUTPUT: «11110001001000000␤»

[14:25] <cschwenz> timotimo++ thanks! :-)

[14:26] <cschwenz> i knew about the .base(2) version, but Int —> Str —> Int just seemed inefficient.  :-P

[14:26] <timotimo> i'm not sure how fast polymod is

[14:27] <cschwenz> fair enough, i will simply have to benchmark them :-)

[14:30] <bdmatatu> m: say sprintf("%b",123456)

[14:30] <camelia> rakudo-moar 0c02f9: OUTPUT: «11110001001000000␤»

[14:35] *** khw joined
[14:38] *** ChoHag left
[14:40] <cschwenz> local tests for me are showing .polymod() to be twice as fast as any string based conversion method.  :-)

[14:57] *** pierre__ left
[15:02] <llfourn> nicq20: I think so, after you mixin something it should change

[15:02] *** araraloren left
[15:03] *** araraloren joined
[15:03] <nicq20> llfourn: Ah, that would be my problem then.

[15:03] *** domidumont joined
[15:04] <llfourn> nicq20: but hang on what's $*LANG atm

[15:04] <nicq20> Well when using it normally it should be Perl6::Grammar.

[15:04] *** kyan left
[15:05] <llfourn> oh. Yeah I dunno how things work with the new $*LANG stuff.

[15:05] <llfourn> didn't you have your slang at least running before?

[15:05] <timotimo> did you make sure to BEGIN say $*LANG?

[15:06] <nicq20> From what I understand, applying a slang should modify the type to be Perl6::Grammar+{Slang::Class}

[15:06] <nicq20> Err, Perl6::Grammar+{Slang::Role}

[15:07] <llfourn> it does but I thought you had your slang working before? Did it stop?

[15:07] <llfourn> at least the mixin part of it

[15:07] <nicq20> The slang works, but only when inside of a block.

[15:07] <llfourn> inside of a block?

[15:08] *** zakharyas left
[15:08] <timotimo> do we actually make sure to keep $*LANG around at run time?

[15:08] <nicq20> Seems that $*LANG does not change until inside of {}.

[15:08] <llfourn> like when you 'use' inside a block or when i

[15:08] <timotimo> i wouldn't expect so

[15:08] <llfourn> ^ignore that

[15:08] <timotimo> so if you don't BEGIN say it, you'll end up with whatever you get at run time

[15:08] <llfourn> yeah I don't know what $*LANG will be at runtime ^^

[15:08] <timotimo> m: say $*LANG.perl

[15:08] <camelia> rakudo-moar 88acdb: OUTPUT: «Failure.new(exception => X::Dynamic::NotFound.new(name => "\$*LANG"), backtrace => Backtrace.new)␤»

[15:09] <timotimo> ah

[15:09] <nicq20> It does not seem to exist at runtime.

[15:09] <timotimo> right

[15:09] <llfourn> hmmm so your slang only gets applied when the parser starts parsing the next block? ... that's weird

[15:09] <nicq20> Not sure if this is something I'm doing wrong though...

[15:11] *** lowbro left
[15:11] <llfourn> hmm so $*LANG is now the top level cursor with the language braid

[15:11] <tbrowder> ref Perl 6 marketing: seems like lots of p5 people are nay sayers about p6 for various reasons. i believe young people (beginning programmers, including kids in the ones to tard

[15:12] *** ufobat left
[15:13] <llfourn> nicq20: it might be just a bug/implementation quirk

[15:13] <jnthn> It'd be $?LANG by runtime, I'd think?

[15:13] <nicq20> llfourn: Possibly. I'll download a much more recent version to see if this still happens.

[15:14] <tbrowder> (finger fumble)...kids in elementary-to-high school, are the ones to target.

[15:14] <llfourn> m: say $?LANG

[15:14] <camelia> rakudo-moar c0eeeb: OUTPUT: «No such method 'gist' for invocant of type 'Perl6::Grammar'. Did you mean any of these?␤    ast␤    isa␤    list␤␤  in block <unit> at <tmp> line 1␤␤»

[15:14] <llfourn> m: say $?LANG.^name

[15:14] <camelia> rakudo-moar c0eeeb: OUTPUT: «Perl6::Grammar␤»

[15:14] *** wamba left
[15:15] <llfourn> nicq20: if you look at Actions.nqp it looks like the .rebless happens in statementlist. Might explain why it takes until the next statementlist (ie block) before it gets applied.

[15:15] <llfourn> but that's just conjecture

[15:16] <tbrowder> thus i propose a new mailing list and irc channel for them where the language is not so crude and the complete focus is mentoring.

[15:18] <lizmat> tbrowder: isn't a mailing list too old fashioned for that target group ?

[15:18] <nicq20> llfourn: Where do you see that?

[15:18] <llfourn> (nvm there's another rebless in statement which is the one that should do the job afaict)

[15:18] <llfourn> <!!{ nqp::rebless($/, self.slang_grammar('MAIN')); 1 }>

[15:19] <llfourn> I think that's the one that mutates the parser when you mixin to 'MAIN'

[15:22] <llfourn> nicq20, gl I'm off :)

[15:22] <nicq20> llfourn: Thanks for your help!

[15:22] *** pierre__ joined
[15:22] *** pierre__ left
[15:24] <tbrowder> lizmat: maybe, but it might be comforting to parents. maybe people here with young kids in school can comment.

[15:28] <timotimo> if we want to capture the minds of the young, we need to start a tumblr and a phpbb

[15:35] *** cschwenz left
[15:43] *** kybr left
[15:44] *** kybr joined
[15:45] *** ChoHag joined
[15:46] *** araraloren left
[15:48] *** Cabanossi left
[15:50] *** Cabanossi joined
[15:50] *** nadim left
[15:55] *** setty1 joined
[16:04] *** mcmillhj left
[16:04] *** cdg joined
[16:04] *** cdg left
[16:05] *** cdg joined
[16:05] *** robertle joined
[16:05] *** nadim joined
[16:07] *** kyan joined
[16:11] *** mcmillhj joined
[16:11] *** nicq20 left
[16:11] *** cdg_ joined
[16:12] *** lizmat left
[16:13] *** sena_kun joined
[16:13] <sena_kun> o/

[16:13] *** lizmat joined
[16:14] <sena_kun> >Private multi-methods are not supported

[16:14] *** cdg left
[16:14] *** kybr left
[16:14] <sena_kun> Why so? Or, rather, what should I do right if I want private method with multi-dispatch? Lexical subroutine?

[16:15] <sena_kun> s/private/a private/

[16:15] *** kyan left
[16:16] *** mcmillhj left
[16:16] *** kyan joined
[16:17] *** kyan left
[16:18] *** kyan joined
[16:18] *** petercommand joined
[16:20] *** itaipu left
[16:21] <timotimo> lexical subroutine works, yeah

[16:21] <sena_kun> _nods_

[16:21] <sena_kun> ah.

[16:21] <sena_kun> Anyway, thanks, timotimo.

[16:22] *** ctilmes left
[16:22] *** mcmillhj joined
[16:27] *** mcmillhj left
[16:27] *** vendethiel left
[16:29] *** BenGoldberg joined
[16:32] *** Peter_R joined
[16:32] *** Cabanossi left
[16:33] *** mcmillhj joined
[16:35] *** Cabanossi joined
[16:38] *** mcmillhj left
[16:47] *** mcmillhj joined
[16:47] *** itaipu joined
[16:48] <andrzejku> do you know who maintains plugin for atom?

[16:50] <tyil[m]> The syntax plugin, andrzejku ?

[16:50] <andrzejku> samcv, hey

[16:51] <andrzejku> it is probably samcv

[16:51] <tyil[m]> She went to bed a couple minutes ago

[16:51] <tyil[m]> Yes it is

[16:51] <andrzejku> ohh

[16:51] <tyil[m]> Whats the problem tho

[16:51] *** eater joined
[16:52] *** dakkar left
[16:52] <andrzejku> I need a code for highlighting lexer and how grammar looks

[16:52] *** mcmillhj left
[16:52] <tyil[m]> afaik those are selected using regexes it atom syntax plugins

[16:52] <tyil[m]> Js regexes

[16:53] <andrzejku> where can I find code for that shit?:D

[16:54] <tyil[m]> i'm not at my laptop this moment, otherwise i would've checked for you, sorry

[16:55] <sena_kun> andrzejku, https://github.com/perl6/atom-language-perl6 - googled it for 5 seconds.

[16:55] <andrzejku> greate :)

[16:56] *** mcmillhj joined
[16:57] *** nadim left
[16:59] *** ufobat joined
[17:03] *** itaipu left
[17:09] *** andrzejku left
[17:17] *** bwisti joined
[17:19] *** sivoais left
[17:19] *** sivoais joined
[17:25] *** itaipu joined
[17:30] *** kybr joined
[17:31] *** dct joined
[17:31] *** kybr left
[17:38] *** kybr joined
[17:47] *** Cabanossi left
[17:49] *** itaipu left
[17:50] *** Cabanossi joined
[17:55] <Morfent> is there a way to pipe output from perl to something like less?

[17:56] <timotimo> sure

[17:56] <sena_kun> Morfent, `perl6 -e 'say 1,2,3' | less`?

[17:56] <timotimo> i think they mean from inside perl6 code

[17:56] <Morfent> ^

[17:56] <sena_kun> Awww.

[17:56] <timotimo> you'd run less via Proc::Async and feed it your data through its input handle

[17:58] *** itaylor57 left
[17:59] *** AlexDaniel joined
[18:00] <Morfent> perfect

[18:00] <Morfent> thanks

[18:02] *** stmuk joined
[18:03] *** stmuk_ left
[18:13] *** ctilmes joined
[18:19] *** Cabanossi left
[18:19] *** Cabanossi joined
[18:22] *** idkwtc joined
[18:26] *** idkwtc left
[18:31] *** nadim joined
[18:32] *** kerframil joined
[18:34] *** tamva joined
[18:34] *** rindolf left
[18:35] *** |oLa| left
[18:37] *** tamva left
[18:37] *** nicq20 joined
[18:42] *** itaylor57 joined
[18:44] *** dct left
[18:51] *** itaipu joined
[18:58] *** domidumont left
[18:59] *** rindolf joined
[19:03] *** gugod joined
[19:05] *** andrzejku joined
[19:07] <nadim> timotimo: https://github.com/nkh/P6-Data-Dump-Tree has an ncurses example with folding. When azawawi pops up again he said he will make a widget

[19:07] <nadim> there is a simple example in tne example directory

[19:08] <nadim> unfortunately no ansi gluphs nor colors, as ncurses doesn't accept ansi codes directly. I may do something about it not sure which way yet

[19:16] *** pilne joined
[19:20] *** darutoko left
[19:21] *** Ven joined
[19:22] *** Ven is now known as Guest69722

[19:22] *** pmurias joined
[19:23] *** Guest69722 is now known as Ven``

[19:33] *** stmuk_ joined
[19:34] *** stmuk left
[19:41] *** kyan left
[19:42] *** lizmat left
[19:43] *** lizmat joined
[19:53] *** kyan joined
[19:59] *** wamba joined
[20:02] *** kyan left
[20:13] *** itaipu left
[20:21] *** Ven`` left
[20:22] *** Ven joined
[20:22] *** Ven is now known as Guest79280

[20:25] *** domidumont joined
[20:27] *** Guest79280 left
[20:28] *** domidumont left
[20:33] *** bdmatatu left
[20:34] *** nadim left
[20:40] *** Ven_ joined
[20:45] *** lucasb left
[20:47] *** mcmillhj left
[20:48] *** itaylor57 left
[20:52] *** Guest2731 left
[20:53] *** itaylor57 joined
[20:53] *** Actualeyes left
[21:01] *** itaipu joined
[21:03] *** ufobat left
[21:06] *** pilne left
[21:06] *** TEttinger joined
[21:12] *** Ven_ left
[21:14] *** skids left
[21:17] *** Cabanossi left
[21:18] *** mcmillhj joined
[21:19] *** linfir joined
[21:20] *** Cabanossi joined
[21:22] *** mcmillhj left
[21:29] *** mr-fooba_ joined
[21:31] *** mr-foobar left
[21:33] *** alimon left
[21:37] *** setty1 left
[21:40] *** robertle left
[21:45] *** tamva joined
[21:50] *** mcmillhj joined
[21:53] *** MasterDuke left
[21:55] *** mcmillhj left
[21:59] *** kyan joined
[22:02] *** matt_ joined
[22:02] *** Ven joined
[22:02] *** mcmillhj joined
[22:02] *** matt_ is now known as Guest21359

[22:02] *** Ven is now known as Guest24175

[22:06] *** |oLa| joined
[22:07] *** mcmillhj left
[22:09] *** Voldenet left
[22:11] *** itaipu left
[22:12] *** nadim joined
[22:14] *** Voldenet joined
[22:14] *** Voldenet left
[22:14] *** Voldenet joined
[22:17] *** ptolemarch joined
[22:22] *** mcmillhj joined
[22:27] *** mcmillhj left
[22:32] *** Cabanossi left
[22:34] *** kerframil left
[22:35] *** Cabanossi joined
[22:37] *** mcmillhj joined
[22:41] *** mcmillhj left
[22:45] *** kerframil joined
[22:49] *** mcmillhj joined
[22:52] *** rindolf left
[22:54] *** mcmillhj left
[22:55] *** cpage_ joined
[22:58] *** tamva left
[22:59] *** tamva joined
[22:59] *** mcmillhj joined
[23:00] *** linfir left
[23:01] *** tamva left
[23:01] *** andrzejku left
[23:03] *** mcmillhj left
[23:06] *** tamva joined
[23:08] *** leont_ joined
[23:15] *** mcmillhj joined
[23:20] *** mcmillhj left
[23:20] *** nicq20_ joined
[23:23] *** nicq20_ left
[23:23] *** tamva left
[23:28] *** bleep-bloop joined
[23:28] *** bleep-bloop left
[23:28] *** bleep-bloop joined
[23:29] *** bleep-bloop left
[23:31] *** mcmillhj joined
[23:35] *** cdg joined
[23:35] *** mcmillhj left
[23:35] *** cdg left
[23:36] *** cdg joined
[23:36] *** mcmillhj joined
[23:36] *** nadim left
[23:39] *** cdg_ left
[23:40] *** cdg left
[23:44] *** mcmillhj left
[23:49] *** sena_kun left
[23:50] *** greppable6 left
[23:50] *** unicodable6 left
[23:50] *** evalable6 left
[23:50] *** quotable6 left
[23:50] *** coverable6 left
[23:50] *** statisfiable6 left
[23:50] *** bloatable6 left
[23:50] *** benchable6 left
[23:50] *** bisectable6 left
[23:50] *** committable6 left
[23:57] *** espadrine left
