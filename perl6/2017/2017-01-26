[00:02] <agentzh> thanks

[00:03] *** cale2 left
[00:05] <sena_kun> last summer I introduced a typo in Exception.pod6 and noticed it only tonight. What a shame.

[00:05] <timotimo> :D

[00:05] <timotimo> i know what you did last summer

[00:06] <sena_kun> lol

[00:08] <brokenchicken> hsh

[00:08] <brokenchicken> *hah

[00:09] <sena_kun> ah, there goes another. I need to check my commits twice.

[00:10] <timotimo> we do have spell checking now at least :)

[00:12] <sena_kun> timotimo, the first case is a missing word, the second case is a missing bracket. God bless spell checker that can point out such cases! inb4: it's just you.

[00:12] *** cdg left
[00:13] *** Cabanossi left
[00:15] *** Cabanossi joined
[00:15] *** pierrot joined
[00:16] <agentzh> where can i find my reported issues to  [email@hidden.address]
[00:16] <sena_kun> ah, no, the second case *always* was there. \0/

[00:16] <agentzh> never mind, found https://rt.perl.org/Public/Search/Results.html?Query=Queue=%27perl6%27%20AND%20Status=%27new%27

[00:17] <sena_kun> agentzh, I was not quick enough, sorry.

[00:18] <agentzh> sena_kun: no need to apologize at all :) i should have diged harder :)

[00:18] <agentzh> just filed a ticket for the infinite looping with RAKUDO_MODULE_DEBUG=1: https://rt.perl.org/Public/Bug/Display.html?id=130645

[00:19] <agentzh> btw, is there a way to get perl 6 backtrace from inside gdb?

[00:19] <agentzh> while being attached to the moar process?

[00:21] <brokenchicken> agentzh: we also have perl6.fail that's a bit easier to get all-tickets-at-a-glance from

[00:22] *** bjz joined
[00:23] *** bjz_ left
[00:23] <gfldex> agentzh: jnthn could help you with your moarvm woes if he didn't need sleep

[00:29] <MasterDuke> agentzh: there is a way, timotimo probably knows

[00:30] <agentzh> brokenchicken: oh, nice!

[00:30] <agentzh> MasterDuke: for parallel compilation?

[00:31] <MasterDuke> agentzh: perl6 level backtrace in gdb

[00:31] <agentzh> MasterDuke: oh great

[00:32] *** BenGoldberg joined
[00:33] <MasterDuke> something like there should be a tc variable, enter its frame and then type `bt`

[00:33] <MasterDuke> but i haven't done it, so i'm just remembering bits and pieces of what i've seen other people say

[00:35] <MasterDuke> agentzh: try `(gdb) print MVM_dump_backtrace(tc)`

[00:39] <agentzh> MasterDuke: segfault

[00:39] <agentzh> MasterDuke: seems like calling into the userland function is unsafe per se?

[00:39] <agentzh> since gdb can interrupts into the process in any state.

[00:40] <agentzh> *interrupt

[00:42] <agentzh> MasterDuke: tried another p6 script, segfault as well.

[00:42] <agentzh> see https://gist.github.com/agentzh/0708ffe8de7a13fd66379a474676845f

[00:53] *** lep-delete left
[00:54] *** Ben_Goldberg joined
[00:54] *** BenGoldberg left
[00:54] *** Ben_Goldberg is now known as BenGoldberg

[00:54] *** pyrimidine left
[00:56] *** lep-delete joined
[01:00] <agentzh> seems like rakudo has issues handling timestamps of the dependency modules.

[01:00] <agentzh> it always compiles some of the dep modules even though they have never been edited since the last compilation.

[01:02] *** pyrimidine joined
[01:05] <agentzh> everytime i edit a single .pm6 file of only 146 lines of code (including empty lines and comment lines), it always takes ~7 sec to compile.

[01:05] <agentzh> this is very annoying.

[01:06] <agentzh> though i must say it's much faster than re-compiling rakudo when changing the Core.setting module.

[01:06] <agentzh> the latter takes more than a 1min :)

[01:08] <timotimo> are you using Inline::Perl5 perhaps?

[01:08] <agentzh> timotimo: nope.

[01:08] <agentzh> pure Perl 6

[01:08] <timotimo> there are modules that export "no precompilation" into their users

[01:08] <agentzh> not even P5 regexes.

[01:08] <timotimo> those don't matter

[01:08] <timotimo> have you tried the module debug output thingie?

[01:09] <timotimo> RAKUDO_MODULE_DEBUG

[01:09] <timotimo> environment variable

[01:11] *** wamba left
[01:13] *** pyrimidine left
[01:13] *** Cabanossi left
[01:13] *** pyrimidine joined
[01:14] *** kurahaupo__ left
[01:15] <agentzh> timotimo: yes. and it triggers a bug which makes moar hot looping: https://rt.perl.org/Public/Bug/Display.html?id=130645#ticket-history

[01:15] *** Cabanossi joined
[01:15] <agentzh> *enter hot looping

[01:16] <agentzh> from the partial module debug output before it enters the infinite loop, it seems that rakudo is indeed trying to recompile other p6 modules which at least indirectly depend on the changed .pm6 file.

[01:18] *** pyrimidine left
[01:19] *** kurahaupo__ joined
[01:20] *** perlawhirl left
[01:20] *** perlawhi1l left
[01:29] <sena_kun> m: my %pairs = also-named => 4; sub f(|c) {}; f |%pairs;

[01:29] <camelia> rakudo-moar 0ad05c: ( no output )

[01:33] *** sena_kun left
[01:34] *** bjz left
[01:47] <Geth>  doc: 423308f731 | (Samantha McVey)++ | doc/Language/classtut.pod6

[01:47] <Geth>  doc: Add X<> for ^methods method

[01:47] <Geth>  doc: review: https://github.com/perl6/doc/commit/423308f731

[01:52] *** agentzh left
[01:53] *** bjz joined
[01:54] <Geth>  doc: 8a3b45ef86 | (Samantha McVey)++ | doc/Language/unicode.pod6

[01:54] <Geth>  doc: Add some missing quotation marks to the Unicode page

[01:54] <Geth>  doc: review: https://github.com/perl6/doc/commit/8a3b45ef86

[01:55] <samcv> Geth, source

[01:55] <Geth> samcv, Source at https://github.com/perl6/geth To add repo, add an 'application/json' webhook on GitHub pointing it to http://geth.perl6.party/?chan=#perl6 and choose 'Send me everything' for events to send | use `ver URL to commit` to fetch version bump changes

[01:55] *** kurahaupo__ left
[01:58] *** Gothmog_ joined
[02:02] *** astj joined
[02:12] *** Cabanossi left
[02:14] *** astj left
[02:15] *** kalkin- left
[02:15] *** astj joined
[02:15] *** Cabanossi joined
[02:16] *** kalkin- joined
[02:18] *** azertus left
[02:23] <Geth>  doc: 8167550f35 | (Samantha McVey)++ | htmlify.p6

[02:23] <Geth>  doc: Make --no-proc-async default for MacOS

[02:23] <Geth>  doc: 

[02:23] <Geth>  doc: Also warn the user the build will be very slow.

[02:23] <Geth>  doc: review: https://github.com/perl6/doc/commit/8167550f35

[02:23] <samcv> .tell [Coke] I have set --no-proc-async as default for MacOS

[02:23] <yoleaux> samcv: I'll pass your message to [Coke].

[02:32] <samcv> i forget guys, what's the way to find the name of the variable?

[02:32] <timotimo> .VAR.name?

[02:32] <samcv> k

[02:32] <samcv> yes!

[02:32] * timotimo disappears to bed immediately

[02:34] <MasterDuke> .tell agentzh according to timotimo, 'will probably have to "up" a few times until you find a frame that has "tc" in it', before the `print MVM_dump_backtrace(tc)`

[02:34] <yoleaux> MasterDuke: I'll pass your message to agentzh.

[02:43] *** agentzh joined
[02:46] *** ilbot3 left
[02:47] *** agentzh left
[02:47] *** ilbot3 joined
[02:47] *** ChanServ sets mode: +v ilbot3

[02:48] *** hartenfels joined
[02:53] *** pyrimidine joined
[02:55] *** yqt left
[02:58] *** pyrimidine left
[03:04] *** cale2 joined
[03:04] <cale2> Does p6 have type aliases? Or would you just use subset for that?

[03:05] <cale2> Also, how can I make a subset that is a List of Strings

[03:05] <cale2> m: subset WordList of List where *all items are strings*

[03:05] <camelia> rakudo-moar 0ad05c: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3subset WordList of List where *7‚èè5all items are strings*‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement‚Ä¶¬ª

[03:08] <cale2> I guess I'm basically wondering if the syntax is [Str] or List(Str)

[03:17] <hartenfels> cale2 I think you can do subset WordList of List where { .all ~~ Str }

[03:18] <cale2> hartenfels: thanks! I got this so far

[03:18] <cale2> m: subset WordList of List where { $_.map: { $_ ~~ Str } }

[03:18] <camelia> rakudo-moar 0ad05c: ( no output )

[03:18] <hartenfels> Well, that's similar.

[03:19] <cale2> I figured there should be an all method though :)

[03:19] <hartenfels> all will create an &-Junction, so that'll deal with the iteration for you.

[03:19] *** azertus joined
[03:21] <hartenfels> subset WordList of List where { .all ~~ Str }; say ("asdf", "jkl√∂") ~~ WordList; say () ~~ WordList; say ("asdf", 123) ~~ WordList;

[03:21] <hartenfels> m: subset WordList of List where { .all ~~ Str }; say ("asdf", "jkl√∂") ~~ WordList; say () ~~ WordList; say ("asdf", 123) ~~ WordList;

[03:21] <camelia> rakudo-moar 0ad05c: OUTPUT¬´True‚ê§True‚ê§False‚ê§¬ª

[03:23] *** agentzh joined
[03:26] <cale2> hartenfels: in the type system, is there an easier way to express a list of a type?

[03:26] <cale2> like [Str] or List(Str)

[03:26] <hartenfels> Maybe you can do List[Str]

[03:26] <hartenfels> I'm not sure.

[03:27] <MasterDuke> m: my Str @a

[03:27] <camelia> rakudo-moar 0ad05c: ( no output )

[03:27] <MasterDuke> m: my Str @a; @a[0] = 4

[03:27] <camelia> rakudo-moar 0ad05c: OUTPUT¬´Type check failed in assignment to @a; expected Str but got Int (4)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[03:28] *** agentzh left
[03:28] <cale2> m: my [Str] @a; @a[0] = 4

[03:28] <camelia> rakudo-moar 0ad05c: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Malformed my‚ê§at <tmp>:1‚ê§------> 3my7‚èè5 [Str] @a; @a[0] = 4‚ê§¬ª

[03:28] <cale2> m: my List(Str) @a; @a[0] = 4

[03:28] <camelia> rakudo-moar 0ad05c: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Coercion List(Str) is insufficiently type-like to qualify a variable‚ê§at <tmp>:1‚ê§------> 3my List(Str) @a7‚èè5; @a[0] = 4‚ê§    expecting any of:‚ê§        constraint‚ê§¬ª

[03:28] <hartenfels> That works when declaring a variable at least.

[03:28] <hartenfels> But it's not the same to have an Array[Str] as it is to have an array that happens to have a bunch of strings in it.

[03:33] <cale2> Pretty annoying when you want to add a guard that this is a list of certain items

[03:33] <hartenfels> m: my List[Str] $doesnt-work-either;

[03:33] <camelia> rakudo-moar 0ad05c: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§An exception occurred while parameterizing List‚ê§at <tmp>:1‚ê§Exception details:‚ê§  5===SORRY!5=== Error while compiling <tmp>‚ê§  List cannot be parameterized‚ê§  at <tmp>:1‚ê§  ------> 3my List[Str]‚Ä¶¬ª

[03:33] <cale2> I guess it's not terrible to write `where { .all ~~Str }` all over

[03:33] <hartenfels> You'd probably make a subset type.

[03:33] <cale2> but you'd have to do that for every list

[03:33] <cale2> I'm translating a haskell program from a while ago. That's why I'm asking

[03:33] <hartenfels> You'd also have to specify [Str] for every list :P

[03:33] <cale2> hartenfels: maybe you could write a macro for type objects

[03:33] <cale2> if it's wrapped in square brackets, check to make sure it's a list of this type

[03:34] <cale2> I was gonna write Str anyway though lol

[03:34] <hartenfels> I dunno, for me just specifying `subset Strs where { .all ~~ Str}` and then using `sub (Strs $bla)` seems fine.

[03:34] <hartenfels> And Strs is one less character than [Str]!

[03:36] <hartenfels> And it doesn't require you to write any macros of course.

[03:36] <cale2> That's true. Good call

[03:37] <cale2> Isn't there a github repo for comparing perl6 to other languages?

[03:37] <hartenfels> There's RosettaCode.

[03:37] <cale2> No, I'll find it

[03:45] *** noganex joined
[03:48] *** noganex_ left
[03:48] <cale2> nevermind, i can't find it lol

[03:49] *** travis-ci joined
[03:49] <travis-ci> Doc build errored. Samantha McVey 'Make --no-proc-async default for MacOS

[03:49] <travis-ci> https://travis-ci.org/perl6/doc/builds/195409042 https://github.com/perl6/doc/compare/8a3b45ef86a0...8167550f359b

[03:49] *** travis-ci left
[03:55] *** pyrimidine joined
[03:57] <cale2> Is there a functional difference between Strs and Chars in p6?

[03:58] <cale2> Would you typically just use the Str type even for individual graphemes?

[03:58] *** agentzh joined
[03:58] <hartenfels> cale2 There's a Char type?

[03:59] <cale2> hartenfels: I don't see it in the docs

[03:59] <hartenfels> Then the functional difference between a Str and a Char is that the latter doesn't exist :P

[04:00] <cale2> I'll make a subtype 

[04:01] <cale2> m: subset Char of Str where { $_.chars ~~ 1 }; say Char "cale";

[04:01] <camelia> rakudo-moar 0ad05c: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3of Str where { $_.chars ~~ 1 }; say Char7‚èè5 "cale";‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚Ä¶¬ª

[04:01] <cale2> m: subset Char of Str where { $_.chars ~~ 1 }; my Char $c = "cale";

[04:01] <camelia> rakudo-moar 0ad05c: OUTPUT¬´Type check failed in assignment to $c; expected Char but got Str ("cale")‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[04:02] <hartenfels> You should probably be using == if you're doing numeric comparison.

[04:12] *** kyan left
[04:12] <cale2> hartenfels: feel free to contribute, or just look at what i'm doing https://github.com/WildYorkies/perl6-mess

[04:15] <hartenfels> cale2: I could probably whip up something in Perl 5, but I can't check what the Haskell one does since ghc takes about 3 years to compile in Gentoo. Is it supposed to let the user guess the letters or just play hangman with itself?

[04:16] <cale2> hartenfels, it's been a while since I touched the haskell code. maybe I'm leaving off the user input part by accident haha

[04:18] <hartenfels> It doesn't look like it play at all actually.

[04:18] <cale2> hartenfels: I was mainly looking for single file programs from functional languages 

[04:19] <cale2> I'll see if I can find the rest of that code lol

[04:24] *** ilbelkyr joined
[04:27] *** Cabanossi left
[04:29] *** Cabanossi joined
[04:44] *** astj left
[04:44] *** cale2 left
[05:01] *** astj joined
[05:05] *** geekosaur left
[05:05] *** kalkin- left
[05:05] *** kalkin- joined
[05:06] *** geekosaur joined
[05:08] *** pyrimidine left
[05:08] *** pyrimidine joined
[05:09] *** Tonik joined
[05:10] *** solarbunny joined
[05:13] *** pyrimidine left
[05:22] *** BenGoldberg left
[05:24] *** matiaslina left
[05:46] *** pyrimidine joined
[05:50] *** pyrimidine left
[06:02] *** khw left
[06:04] *** skids left
[06:05] *** Tonik left
[06:12] *** CIAvash joined
[06:15] *** TimToady left
[06:17] *** TimToady joined
[06:25] *** parv joined
[06:30] *** AlexDaniel joined
[06:44] *** bwisti left
[06:46] *** brillenfux joined
[06:47] *** pyrimidine joined
[06:48] *** RabidGravy joined
[06:49] *** ChoHag left
[06:51] *** hartenfels1 joined
[06:52] *** hartenfels left
[06:52] *** hartenfels1 is now known as hartenfels

[06:55] *** girafe left
[06:58] *** Cabanossi left
[06:59] *** Cabanossi joined
[07:02] *** imcsk8 left
[07:04] *** imcsk8 joined
[07:08] *** domidumont joined
[07:11] *** labster joined
[07:14] *** domidumont left
[07:15] *** domidumont joined
[07:20] *** aindilis left
[07:25] *** z8 joined
[07:29] *** z8 left
[07:29] *** jjido joined
[07:34] *** abraxxa joined
[07:37] *** ufobat joined
[07:39] *** darutoko joined
[07:39] *** abraxxa left
[07:40] *** abraxxa joined
[07:42] *** jjido left
[07:59] *** grondilu joined
[08:00] <grondilu> m: my %h = hash <a b c> Z=> ^3; for %h X %h -> $a, $b { say "$a:$b" }

[08:00] <camelia> rakudo-moar 0ad05c: OUTPUT¬´a    0 a     0:a     0 c     2‚ê§a     0 b     1:c     2 a     0‚ê§c     2 c     2:c     2 b     1‚ê§b     1 a     0:b     1 c     2‚ê§Too few positionals passed; expected 2 arguments but got 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[08:00] <grondilu> ^not sure what I'm doing wrong

[08:00] <grondilu> m: my %h = hash <a b c> Z=> ^3; for %h X %h -> ($a, $b) { say "$a:$b" }

[08:00] <camelia> rakudo-moar 0ad05c: OUTPUT¬´Too few positionals passed; expected 2 arguments but got 0 in sub-signature‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[08:00] *** melezhik_ joined
[08:00] <melezhik_> HI Perl6 gurus!

[08:00] <grondilu> hello

[08:01] <grondilu> m: my %h = <a b c> Z=> ^3; for %h X %h -> ($a, $b) { say "$a:$b" }

[08:01] <camelia> rakudo-moar 0ad05c: OUTPUT¬´Too few positionals passed; expected 2 arguments but got 0 in sub-signature‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[08:01] <grondilu> m: my %h = <a b c> Z=> ^3; for %h X %h -> $a, $b { say "$a:$b" }

[08:01] <camelia> rakudo-moar 0ad05c: OUTPUT¬´a    0 a     0:a     0 c     2‚ê§a     0 b     1:c     2 a     0‚ê§c     2 c     2:c     2 b     1‚ê§b     1 a     0:b     1 c     2‚ê§Too few positionals passed; expected 2 arguments but got 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[08:01] <grondilu> m: my %h = <a b c> Z=> ^3; for flat %h X %h -> $a, $b { say "$a:$b" }

[08:01] <camelia> rakudo-moar 0ad05c: OUTPUT¬´a    0:a     0‚ê§a     0:c     2‚ê§a     0:b     1‚ê§c     2:a     0‚ê§c     2:c     2‚ê§c     2:b     1‚ê§b     1:a     0‚ê§b     1:c     2‚ê§b     1:b     1‚ê§¬ª

[08:01] <melezhik_> how to tuncate string to contain no more N characters ?

[08:01] <melezhik_> s/tuncate/truncate/

[08:02] <grondilu> substr

[08:02] <grondilu> m: say "fooooo".substr(0, 3)

[08:02] <camelia> rakudo-moar 0ad05c: OUTPUT¬´foo‚ê§¬ª

[08:03] <melezhik_> grondilu: thanks

[08:04] <melezhik_> m: say "fooooo".substr(0, 20)

[08:04] <camelia> rakudo-moar 0ad05c: OUTPUT¬´fooooo‚ê§¬ª

[08:04] <melezhik_> ok, works for me! thanks

[08:06] <parv> is it possible to specify an exact version of a module/package (not just the minimum as is the case in Perl 5)?

[08:07] <moritz> yes. I just don't know how well it works at the moment

[08:08] <parv> the working part, was that comment meant in context of rakudo?

[08:09] <moritz> yes

[08:09] <parv> ok. thanks, moritz.

[08:11] *** Cabanossi left
[08:11] *** hartenfels left
[08:11] *** krakan_ joined
[08:14] *** xinming_ joined
[08:14] *** Cabanossi joined
[08:17] *** xinming left
[08:23] *** curt_ joined
[08:27] *** wamba joined
[08:27] *** curt__ left
[08:28] *** zakharyas joined
[08:28] *** rindolf joined
[08:29] *** ChoHag joined
[08:32] *** faraco joined
[08:32] *** espadrine_ joined
[08:35] *** jmb2041 is now known as SITM

[08:36] *** mr-foobar left
[08:37] *** mr-foobar joined
[08:39] *** ufobat left
[08:39] <parv> is there any other comprehensive & current doc about version specification other than "https://design.perl6.org/S11.html#Versioning"? That URL says to consult docs.perl6.org for current state; didn't find anything suitable.

[08:40] *** astj left
[08:40] *** dakkar joined
[08:41] *** astj joined
[08:43] *** wololoooo joined
[08:44] *** geekosaur left
[08:44] <wololoooo> Hello guys, I have a problem with file IO

[08:44] *** jonas1 joined
[08:45] *** astj left
[08:45] <wololoooo> perl6 -e 'if "ratings.list".IO.f {say "HI!!";}

[08:45] <wololoooo> my $fg = open ("./ratings.list" ,:r , enc => "latin1");

[08:45] <wololoooo> say $fg.get;'

[08:46] <wololoooo> == OUTPUT ==

[08:46] <wololoooo> HI!!

[08:46] <wololoooo> Failed to open file /home/pi/project/perl6/lear/ratings.list r  True enc        latin1: no such file or directory

[08:46] <wololoooo>   in any  at /home/pi/project/perl6/rakudobrew/moar-nom/install/share/perl6/runtime/CORE.setting.moarvm line 1

[08:46] <wololoooo>   in block <unit> at -e line 2

[08:46] <wololoooo> Actually thrown at:

[08:46] <wololoooo>   in any  at gen/moar/Metamodel.nqp line 3072

[08:46] <wololoooo>   in block <unit> at -e line 3

[08:46] <moritz> wololoooo: please use a pastebin

[08:46] <moritz> wololoooo: the problem is the space between open and (

[08:46] <wololoooo> ok, sorry

[08:46] <moritz> wololoooo: leave out the parens, or the space

[08:46] *** geekosaur joined
[08:46] *** SITM left
[08:47] <wololoooo> ok

[08:48] <moritz> wololoooo: as is, you're calling open() with a single argument, which is a list of a string and two Pair objects

[08:49] <wololoooo> isn't that practically 3 arguments?

[08:49] <moritz> nope

[08:50] <moritz> in Perl 6, lists are first-class objects

[08:50] <wololoooo> then what would multiple arguments look like in perl6?

[08:50] *** faraco left
[08:52] *** g4 joined
[08:52] *** g4 left
[08:52] *** g4 joined
[08:55] <parv> S11 missed the chance to use "globalyness" when "globalness" was used instead. 8-[

[09:02] *** cibs left
[09:04] *** cibs joined
[09:04] *** xiaomiao joined
[09:05] <moritz> wololoooo: open(a, b, c) or open a, b c

[09:09] *** CIAvash left
[09:11] *** melezhik_ left
[09:12] *** curt__ joined
[09:15] *** curt_ left
[09:17] *** trnh joined
[09:17] *** trnh left
[09:17] *** trnh joined
[09:18] *** pyrimidine left
[09:30] *** ufobat joined
[09:42] *** rindolf left
[09:52] *** espadrine_ left
[10:16] *** wizard_ joined
[10:19] *** wamba left
[10:20] *** Vynce joined
[10:21] *** dalek left
[10:21] *** dalek joined
[10:21] *** ChanServ sets mode: +v dalek

[10:23] *** AlexDaniel left
[10:23] *** AlexDaniel joined
[10:24] *** wizard_ left
[10:25] *** Vynce left
[10:28] *** AlexDaniel left
[10:31] *** darutoko- joined
[10:32] *** user9 left
[10:32] *** user9 joined
[10:32] *** xfix joined
[10:33] *** darutoko left
[11:00] *** pyrimidine joined
[11:05] *** pyrimidine left
[11:06] *** pyrimidine joined
[11:11] *** pyrimidine left
[11:12] *** bjz_ joined
[11:13] *** bjz left
[11:16] <brokenchicken> call for a new TPF grants committee member: http://news.perlfoundation.org/2017/01/grants-committee-needs-a-new-m.html

[11:16] *** brillenfux left
[11:16] *** AlexDaniel joined
[11:17] *** raschipi joined
[11:17] *** labster left
[11:19] *** lukaramu joined
[11:20] *** wamba joined
[11:24] *** pyrimidine joined
[11:27] *** TEttinger left
[11:28] *** Cabanossi left
[11:29] *** Cabanossi joined
[11:38] * brokenchicken reads backlog

[11:39] *** ugjka joined
[11:39] <brokenchicken> You guys are overdoing it with type checks.

[11:39] <brokenchicken> Which is why you feel it's "annoying".

[11:42] <moritz> that's what I tell people regularly

[11:42] <moritz> "Perl 6 is not Haskell"

[11:43] <El_Che> moritz: of "Perl 6 is a slower Haskell" :)

[11:43] <El_Che> or

[11:45] <DrForr> Type checking has caught a few things for me, almost enough to justify keeping the return types around.

[11:45] <jnthn> To be fair, it takes time to develop a feel for when to do it and when not to.

[11:45] <jnthn> Just part of growing up as a Perl 6 programmer.

[11:45] <timotimo> sure, but it'd be nice if you listened to the people trying to help you out ;)

[11:45] <timotimo> Just Programmer Things

[11:45] <jnthn> Listening to people who know stuff isn't the in thing these days. :P

[11:45] <El_Che> :)

[11:47] <arnsholt> Neat! http://gravitational.com/blog/instant-ssh-github/

[11:49] <timotimo> that's cute

[11:49] *** FROGGS joined
[11:49] <brokenchicken> Neat indeed. Now all I need is a remote team to let ssh into my laptop...

[11:55] <parv> brokenchicken: are you looking for people to log on do your 'puter and do stuff? ;->

[11:55] <arnsholt> brokenchicken: Like #perl6? =)

[11:55] <brokenchicken> hehehe :)

[11:55] <timotimo> outsource all your work for cheap?

[12:03] *** parv left
[12:11] *** parv joined
[12:11] *** parv left
[12:12] *** parv joined
[12:12] *** parv left
[12:12] *** Cabanossi left
[12:14] *** Cabanossi joined
[12:20] *** wololoooo_ joined
[12:22] *** wololoooo left
[12:22] *** wololoooo_ is now known as wololoooo

[12:33] *** grondilu left
[12:35] *** abraxxa left
[12:35] *** abraxxa1 joined
[12:36] *** abraxxa1 left
[12:36] <gfldex> where could that come from? https://gist.github.com/gfldex/59e957330691744e2c5d90493a567264

[12:37] *** abraxxa joined
[12:38] *** gregf__ left
[12:39] <timotimo> does --ll-exception give you anything?

[12:39] <gfldex> an empty file with `use Git::Config` is causing it

[12:39] *** yqt joined
[12:40] <gfldex> updated with stack trace https://gist.github.com/gfldex/59e957330691744e2c5d90493a567264

[12:40] <gfldex> i will check on a clean vm

[12:41] *** abraxxa left
[12:41] *** abraxxa joined
[12:44] *** rindolf joined
[12:50] *** abraxxa left
[12:51] *** abraxxa joined
[12:51] <gfldex> same in a clean VM

[12:56] *** pmurias joined
[13:00] *** andrzejku left
[13:02] *** andrzejku joined
[13:11] <brokenchicken> Hah. Funny: https://stackoverflow.com/admin.php

[13:12] *** rba_ joined
[13:16] <arnsholt> Hee hee

[13:16] <arnsholt> I should add that rule to my Varnish =D

[13:17] <brokenchicken> m: say v6 before v6.c

[13:17] <camelia> rakudo-moar d06d7c: OUTPUT¬´False‚ê§¬ª

[13:17] <brokenchicken> gfldex: ^ fwiw, the "perl" meta field is supposed to specify the minimum required perl version and yours won't even be met

[13:17] <brokenchicken> in Git::Cojnfig

[13:18] <brokenchicken> wonder if that Nil is due to something missing in the META file

[13:18] <gfldex> checking right now

[13:20] <brokenchicken> Hm, I don't get any nils with empty file with use Git::Copnfiug  in it on This is Rakudo version 2016.12-376-g69a66b7 built on MoarVM version 2016.12-113-gd1da1ba

[13:21] <gfldex> This is Rakudo version 2017.01-56-g0ad05ce built on MoarVM version 2017.01-13-g4aab506

[13:27] <gfldex> `-I ../perl6-git-config/lib/` hides the problem

[13:30] *** Actualeyes left
[13:31] <brokenchicken> Hm, I see you can't do QAST::Var.new(:name(~$<ident>), :scope<lexical>, |(:decl<var> if $*DECL),) in NQP? Like slipping in some named args based on condition

[13:31] <jnthn> No

[13:31] <brokenchicken> Oh well :)

[13:31] <jnthn> You'd have to put it into a hash and the flatten that in

[13:31] <brokenchicken> Ah

[13:32] <jnthn> NQP does sigil analysis to decide if we're flattening in positionals or nameds

[13:32] <jnthn> So it's a static decisions

[13:32] <jnthn> *decision

[13:33] <jnthn> Unlike in Perl 6 where it's a dynamic decsion (which is why it's an order of magnitude slower :P)

[13:33] <brokenchicken> :D

[13:34] * gfldex .oO( Perl¬†6 is slow to allow humans to keep up. )

[13:44] <brokenchicken> Ain't getting Nils on This is Rakudo version 2017.01-58-gd06d7c1 built on MoarVM version 2017.01-13-g4aab506 either

[13:44] <brokenchicken> in a git clone, with perl6 -Ilib foo.p6, where foo.p6 has just use Git::Config

[13:46] *** Actualeyes joined
[13:53] *** abraxxa left
[13:53] *** kurahaupo__ joined
[13:54] *** trnh left
[13:54] *** trnh joined
[13:54] *** trnh left
[13:54] *** trnh joined
[13:57] <brokenchicken> w00t! Just added varibles support to Perl 7. No sigils. No declarators. Varibles are auto-declared on first use. Pretty revolutionary idea; I hope it won't have problems üòò

[13:57] *** Cabanossi left
[13:58] <moritz> \o/ revolutionary languge design!

[13:58] <brokenchicken> :)

[13:59] *** Cabanossi joined
[14:03] *** khw joined
[14:04] *** salv0 joined
[14:09] *** bjz_ left
[14:13] <raschipi> brokenchicken: There's a strong parallel between variables and hash lines. You should make use of that, just give the programmer a single hash and have him use the lines as variables.

[14:17] <brokenchicken> hm, some langs use "func" to declare functions, but usually have braces or "end" to signal end of its body. I'm surprised no one used "tion" to end such declarations. The "tion" matches the length of "func" AND the one and true ident width of 4 spaces. Makes things look pretty.

[14:17] <brokenchicken> or shorten it to 3 chars: "fun" and "ion" :P

[14:18] <raschipi> Identation is made with tabs.

[14:18] <raschipi> And a tab is 8 spaces.

[14:19] <brokenchicken> uhuh. I wanna see you write Perl 6 code using that.

[14:20] <raschipi> It's the only aceptable way to do it, to be quite honest.

[14:21] <timotimo> ===SORRY NOT SORRY!=== It seems like you're indenting your code with spaces. what the fuck is wrong with you!

[14:22] <brokenchicken> raschipi: Perl 6 is not C. If you're using 8-spaced tabs, I hope you also plan on setting your line lengths to 200 chars

[14:22] <raschipi> Yep, the compiler should enbforce it, this would be very helpful for programmers.

[14:26] *** ocbtec joined
[14:29] <pmurias> brokenchicken: you want to release your toy language as Perl 7? :/

[14:29] <raschipi> brokenchicken: currently my terminal has 264 columns.

[14:29] <brokenchicken> Toy?!

[14:30] <pmurias> * pet language

[14:31] <raschipi> Perl5 and Perl 6 are TimToady's pet languages.

[14:32] <brokenchicken> pmurias: Nah, bruh. It's a legit lang. I listened to complains about Perl 6 and solved them.... Like the logo stuff: https://github.com/perl7/perl7

[14:33] <brokenchicken> Actually, the logo was the majorest issue. From what I understand this is what managers pay attention too. And with that solved, Perl 7 will flourish. The rest of the features are just details, though I think the single-character print function is sure to turn some of the heads, in today's fast-paced, no-time-for-nonsense world.

[14:33] <profan> man, is it a sad indicator when it's actually hard to tell if obvious satire is supposed to be satire or not :D

[14:33] <mst> brokenchicken++ # finally, somebody who understands

[14:34] <mst> pmurias: I would love him to; given the general stupidity levels of conversations involving 'perl7' ending the conversation by linking this would actually be an improvement

[14:35] <brokenchicken> :)

[14:35] <SmokeMachine> brokenchicken: why not use something like ü§ê for comments?

[14:36] <pmurias> mst: I'm just worried someone will try to install that by mistake

[14:36] *** raschipi left
[14:38] <mst> pmurias: if you're worried about confusing naming, start a campaign to rename perl6. if you're not going to start such a campaign, it's clearly not that important to you and you're worrying about nothing :P

[14:39] <SmokeMachine> brokenchicken: I mean for perl7

[14:41] <brokenchicken> Nah, the comments will stay as '#' because I don't know how to configure my editor to use something else when I press CTRL+D :)

[14:41] <huf> the logo is particularly spiffy

[14:41] <huf> possibly the best proglang logo i've ever seen

[14:42] <brokenchicken> See? People notice!

[14:42] *** sammers joined
[14:42] <huf> the only way to improve it would be if the image format were .txt

[14:42] <pmurias> mst: I view the Perl 6 naming as already done damage

[14:45] <raiph> .oO ( fun ... `nuf )

[14:46] *** lee_ joined
[14:46] <huf> that's good but sub/bus is even better because "bus"

[14:46] *** lee_ is now known as Guest13718

[14:46] <brokenchicken> I went with 'fuc' and 'ton'

[14:47] <raiph> :)

[14:47] <mst> huf: having a compiler that can say 'bus error at line 13' would be AWESOME

[14:47] *** Guest13718 left
[14:47] <huf> mst: i was hoping to fit "fuck you i'm a bus" in there somewhere

[14:47] *** sena_kun joined
[14:48] <sena_kun> m: my UInt $u = 1; say $u.WHAT;

[14:48] <camelia> rakudo-moar d06d7c: OUTPUT¬´(Int)‚ê§¬ª

[14:48] *** cdg joined
[14:48] <sena_kun> it should be int, not uint?

[14:48] <brokenchicken> sena_kun: UInt is just a core subset of Int

[14:48] <raiph> you what?

[14:48] <sena_kun> brokenchicken, hmmm, okay. I'll fix docs then, thanks.

[14:49] <brokenchicken> mc: my UInt $u = 1; say $u.WHAT;

[14:49] <committable6> brokenchicken, ¬¶¬´2015.12¬ª: (Int)

[14:49] *** cdg left
[14:50] <brokenchicken> sena_kun: they also list wrong definition. It's https://github.com/rakudo/rakudo/blob/nom/src/core/Int.pm#L6

[14:50] *** cdg joined
[14:51] <brokenchicken> We also have UInt64, but IIRC it needs a bit of loving first

[14:51] * sena_kun noted.

[14:51] <brokenchicken> liek that .defined check

[14:52] *** Gasher joined
[14:55] <brokenchicken> m: say Int ~~ UInt64

[14:55] <camelia> rakudo-moar d06d7c: OUTPUT¬´Invocant requires an instance of type Int, but a type object was passed.  Did you forget a .new?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:55] <brokenchicken> mhm

[14:55] <brokenchicken> m: say Int ~~ UInt

[14:55] <camelia> rakudo-moar d06d7c: OUTPUT¬´True‚ê§¬ª

[14:56] <brokenchicken> And the other one is to check if it got a off-by-one issue on its max value. I think the constant it uses is 1-too-many, but then the check in it is `<` so it's fine. Or something or other

[14:57] <brokenchicken> Don't even know if it's meant to be public tho :)

[14:57] <brokenchicken> Or whether it's even roast

[14:57] <brokenchicken> edc

[14:57] *** Cabanossi left
[14:57] <sena_kun> afaik uint is in roast.

[14:59] *** Cabanossi joined
[14:59] <sena_kun> https://github.com/perl6/roast/blob/b4da789b94c74f6fa3d9e7612ab99c2b36150056/S32-num/int.t#L147

[15:01] *** skids joined
[15:02] <brokenchicken> yeah

[15:08] <AlexDaniel> brokenchicken: :P https://gist.github.com/AlexDaniel/3e7ad0adac5d646bd786aeab5332b570

[15:09] *** FROGGS left
[15:09] <brokenchicken> heh

[15:09] *** FROGGS joined
[15:09] <mst> AlexDaniel++ # yaaaaaaaaaaaasss

[15:12] *** pmurias left
[15:12] * brokenchicken steals it

[15:12] <AlexDaniel> feel free :P

[15:13] <raiph> .oO ( Perl ◊ú aka Perl Lamed -- https://en.wikipedia.org/wiki/Lamedh)

[15:13] <AlexDaniel> brokenchicken: though maybe you want to slap this : on your own version, there are some tiny issues inside the P hole due to tracing

[15:14] <brokenchicken> Yes, I will have the logo designer add it. I paid $3000 for this logo design, so he should have high quality files to edit.

[15:15] <AlexDaniel> should've paid $6000 for svg

[15:15] *** bwisti joined
[15:16] <brokenchicken> Pfft... The real high quality logos don't use SVGs. They use .ai

[15:16] <brokenchicken> Everybody knows it ;)

[15:16] <AlexDaniel> forgive my incompetence

[15:17] <brokenchicken> It's OK. That's why I have the guy making $3000 logos for me.

[15:19] <AlexDaniel> samcv: so where's your grant proposal? :o

[15:19] *** cdg_ joined
[15:21] *** cdg left
[15:24] <[Coke]> AlexDaniel: AIUI, waiting for the board to decide if she can apply against the core perl 6 fund instead of the hague fund. (or the general grant committee fund, which brokenchicken submitted against)

[15:24] <yoleaux> 02:23Z <samcv> [Coke]: I have set --no-proc-async as default for MacOS

[15:24] <AlexDaniel> oh

[15:26] <[Coke]> but the original submission against hague won't work, as apparently that fund is depleted. (which I am surprised to hear, and would love to see if there's a list of outstanding in-progress-but-unpaid grants.)

[15:27] <AlexDaniel> oh‚Ä¶ ouch‚Ä¶

[15:29] <sena_kun> is our Language docs section compileable?

[15:29] <mst> [Coke]: ah, yes, "trying to get financial information out of TPF" ... good luck

[15:30] <mspo> our logo guy produced .eps

[15:31] <brokenchicken> AlexDaniel: my logo guy said your version sucked, but for another $1,000 he'd make me an improved logo that better captures the spirit of the language and emboldens the brand identity or something or other. I said good deal, and behold! https://github.com/perl7/perl7#perl-7-the-up-to-date-perl

[15:31] *** domidumont left
[15:32] <[Coke]> mst: It's super challenging, and I'm on the GC.

[15:33] <brokenchicken> mspo: clearly you're not getting the bestest logos!

[15:33] *** salv0 left
[15:37] <brokenchicken> sena_kun: compilable to what?

[15:40] <sena_kun> brokenchicken, I meant ability to automatically compile examples and check their validness(this point is still LTA). it is possible for Type/ section, but I didn't work on Language/, hence the question.

[15:41] <brokenchicken> Ah, no idea.

[15:41] <sena_kun> it's time to try it to check!

[15:41] *** alnewkirk joined
[15:53] *** tokomer joined
[15:56] *** tinita left
[15:56] *** tinita joined
[15:56] <sena_kun> m: my %pairs = also-named => 4; sub f(|c) {}; say f |%pairs;

[15:56] <camelia> rakudo-moar d06d7c: OUTPUT¬´Nil‚ê§¬ª

[15:57] <sena_kun> should it be Nil here?

[15:57] <brokenchicken> Yup

[15:57] <sena_kun> doc page is lying!

[15:57] <brokenchicken> What's it saying/

[15:57] <sena_kun> (:$also-named)

[15:58] <brokenchicken> :S

[15:58] <brokenchicken> m: my %pairs = also-named => 4; sub f(|c) {c}; say f |%pairs;

[15:58] <camelia> rakudo-moar d06d7c: OUTPUT¬´\(:also-named(4))‚ê§¬ª

[15:58] <sena_kun> Signature page.

[15:58] *** domidumont joined
[15:58] <brokenchicken> That if anything.

[15:58] <brokenchicken> c: 2015.07 my %pairs = also-named => 4; sub f(|c) {c}; say f |%pairs;

[15:58] <committable6> brokenchicken, ¬¶¬´2015.07¬ª: \(:also-named(4))

[15:58] <brokenchicken> been that way for ages

[16:00] <brokenchicken> Looks like it's just indicating the meaning instead of showing output

[16:01] <sena_kun> hmm... Let it be like that for a bit until my future pr merge/rejection.

[16:07] *** g4 left
[16:10] *** lichtkind joined
[16:13] *** user9 left
[16:15] *** user9 joined
[16:19] *** araujo joined
[16:22] *** AlexDaniel left
[16:24] *** tokomer left
[16:26] *** cale2 joined
[16:27] *** grw joined
[16:27] <cale2> I'm having an issue with Str.comb

[16:28] <cale2> It seems to spit out a Seq. I thought it would be a List. 

[16:28] <brokenchicken> cale2: what sort of issue

[16:28] <cale2> https://docs.perl6.org/routine/comb#(Str)_routine_comb

[16:29] *** SCHAAP137 joined
[16:29] <cale2> The problem for me is building up subsets. I assumed that everything would be lists, but it turns out that comb (the only way to get a list of graphemes from a Str) returns a Seq

[16:29] *** bwisti left
[16:30] <cale2> subset Char     of Str  where { $_.chars == 1    }; 

[16:30] <cale2> subset Word     of Seq  where { $_.all   ~~ Char }; 

[16:30] <cale2> subset WordList of List where { $_.all   ~~ Word };

[16:30] *** st_elmo joined
[16:30] <brokenchicken> Wow, you're sure stepping up the insanity on the type checks :)

[16:31] *** Gasher left
[16:31] <cale2> Having to deal with Lists, Seqs, and (possibly) Arrays sort of muddies the waters. This is where type signatures come in handy

[16:31] <moritz> cale2: so use .comb.List

[16:31] <brokenchicken> cale2: but what's the actual problem you're facing? So far you said you assumed one thing but (on HEAD) it's neither documented nor does return the thing you assumed it does

[16:31] <moritz> cale2: or rely on Iterable or Positional

[16:31] <cale2> Because I could do a search for "Seq -> List" or "Array -> List"

[16:31] <moritz> cale2: but really, don't treat strings as lists

[16:32] <moritz> cale2: subset Word of Str where /^ \w* $/;

[16:32] <cale2> Treating strings as a list of chars is quite a natural way to think about textual problems, though

[16:34] <moritz> but it's not natural way in Perl 6

[16:35] <moritz> play to the language's strengths, not its weaknesses

[16:35] <brokenchicken> Seq don't do Positional, only Iterable is shared between Seq and Lists. But note that Maps do it as well and I recall a convo on how about making QuantHash do it too

[16:35] <moritz> m: say "Perl 6 is not $_" for <Haskell Python C C++ Java Perl5>;

[16:35] <camelia> rakudo-moar d06d7c: OUTPUT¬´Perl 6 is not Haskell‚ê§Perl 6 is not Python‚ê§Perl 6 is not C‚ê§Perl 6 is not C++‚ê§Perl 6 is not Java‚ê§Perl 6 is not Perl5‚ê§¬ª

[16:35] * brokenchicken nods

[16:35] <cale2> moritz: I guess I don't know how to think that way then. For example, I'm very accustomed to mapping a function over a string and having it apply to each character

[16:36] <moritz> cale2: and is that how you think about text in real life, or in your English classes?

[16:36] *** AlexDaniel joined
[16:36] <brokenchicken> cale2: I saw your repo where you try to recreate programs in other languages to be close to other languages, but I think that's a good recipe for frustration and for missing out on learning all the good idioms of Perl 6

[16:37] <cale2> I thought one main selling point of perl6 is that everything and nothing is idiomatic and you can basically write it however you want

[16:37] <brokenchicken> Like this typecheck stuff you're doing right now. Along with being frustrating, you'll find the way you're doing right now is also terrible slow.

[16:37] <cale2> I'm finding that the haskell translations are working well though lol

[16:37] <brokenchicken> Never heard of such a selling point.

[16:38] <moritz> cale2: that's not the Perl 6 way

[16:38] *** Gasher joined
[16:38] <brokenchicken> The TIMTOADY thing in my view is you can write things many different ways and use the more suitable way depending on situation, same as you use a natural language.

[16:38] <moritz> there's more than one way to do it, but if an experienced programmer tells you that one way works clearly better in the language, you should still listen

[16:40] <cale2> brokenchicken: https://youtu.be/Nq2HkAYbG5o?t=26m40s

[16:41] *** AlexDaniel left
[16:41] <cale2> I guess I took that presentation too literally lol

[16:42] *** bwisti joined
[16:42] <moritz> Damian's talk aim to dazzle the audience, more than they try to be accurate, or teach idiomatic programming

[16:42] <moritz> which is fine; if you wanted to learn Perl 6, you could always buy the book :-)

[16:43] *** Gasher left
[16:44] <brokenchicken> :) yeah. Same talk shows the quantum computing done in Perl 6... despite there yet not being hardware to do the stuff :)

[16:49] <cale2> moritz: what book?

[16:50] *** dataf3l joined
[16:50] <brokenchicken> cale2: https://leanpub.com/perl6

[16:50] <moritz> cale2: https://leanpub.com/perl6 (disclaimer: my own, ebook), https://deeptext.media/perl6-at-a-glance/ (print)

[16:50] *** pmurias joined
[16:50] <brokenchicken> cale2: though when Damian gave the talk you linked in Toronto, he promised a book too "in a year".... That was almost a year ago :P

[16:51] <brokenchicken> cale2: also https://www.learningperl6.com/ though by reading the preview copies of that one, I'd say it's more geared towards beginner programmers.

[16:53] <brokenchicken> huggable: books :is: "Perl 6 At A Glance" https://deeptext.media/perl6-at-a-glance/ (print only for now); "Perl 6 By Example": https://leanpub.com/perl6 (get preview digital copies now!) ; "Learning Perl 6": https://www.learningperl6.com/ (good for programming beginners)

[16:53] <huggable> brokenchicken, Added books as "Perl 6 At A Glance" https://deeptext.media/perl6-at-a-glance/ (print only for now); "Perl 6 By Example": https://leanpub.com/perl6 (get preview digital copies now!) ; "Learning Perl 6": https://www.learningperl6.com/ (good for programming beginners)

[16:53] <brokenchicken> There's no longer a way to get preview copies of LP6 is there?

[16:54] <moritz> convince bdfoy to give somebody access to the repo :-)

[16:56] *** dataf3l left
[16:57] *** dataf3l joined
[16:57] *** astj joined
[16:59] *** dataf3l left
[17:00] *** dataf3l joined
[17:01] <TimToady> .tell grondilu the subsig ($a,$b) is always treating pairs as named args, not positionals; perhaps we could distinguish a [$a,$b] subsig to force positional and let the () form turn pairs to nameds

[17:01] *** grw left
[17:01] <yoleaux> TimToady: I'll pass your message to grondilu.

[17:02] <TimToady> .oO(if I had access to bdfoy's repo I'd fix the outdents on closing brackets...)

[17:03] <brokenchicken> I can give you the next best thing: open an Issue on bdfoy's repo quoting the above :)

[17:04] *** dataf3l left
[17:04] <[Coke]> huh. work project using rakudo-star:latest docker image had to go back to rakudo-star:2016.07 (maybe didn't have to go back that far, but that one worked) due to panda not being able to download the ecosystem module.

[17:06] <brokenchicken> Well, damn... http://lifepluslinux.blogspot.de/2017/01/look-before-you-paste-from-website-to.html

[17:06] <brokenchicken> The saddest part is I'll probably still continue copy-pasting commands to terminal >_<

[17:07] <brokenchicken> [Coke]: FWIW there's a ticket of another person having issues with latest star: https://rt.perl.org/Public/Bug/Display.html?id=130339#ticket-history

[17:07] <brokenchicken> Oh. It was lack of prove. Maybe it should be closed now that zef is the Gold Standard

[17:08] <brokenchicken> As is " Rakudo* 2014:08 panda doesn't see bundled modules ": https://rt.perl.org/Public/Bug/Display.html?id=122839#ticket-history

[17:11] *** dakkar left
[17:19] *** rba_ left
[17:19] <brokenchicken> Done!

[17:20] <brokenchicken> "His Majesty Larry of Wall demands you abandon this weird brace style OR ELSE!"

[17:20] <brokenchicken> :) http://i.imgur.com/XVeLAav.png

[17:20] *** jonas1 left
[17:21] <pmurias> did learning Perl (5) use that sort of weird brace style?

[17:22] <brokenchicken> Well, he didn't write that one. At least not the first editions.

[17:23] *** astj left
[17:24] *** astj joined
[17:24] * brokenchicken is failing to find any screencaps of the book on google

[17:25] <pmurias> I found the examples on the internet and it used normal formating

[17:26] <pmurias> I'm not sure where I have my old Learning Perl printed copy

[17:26] *** Cabanossi left
[17:28] <brokenchicken> Well, in the presumably pirated PDF of 5th edition I found online all examples seem to use normal braces EXCEPT for one example with `foreach` that does use that weird bracing

[17:29] *** Cabanossi joined
[17:29] <Geth>  doc: Altai-man++ created pull request #1165: Make comment style the same in Type/ directory

[17:29] <Geth>  doc: review: https://github.com/perl6/doc/pull/1165

[17:29] <brokenchicken> Actually just one example of foreach.. The rest all use normal formatting... My guess would be bdfoy used that style for ages and for that book but editor missed this one example

[17:29] <sena_kun> Discussion around this pr is like, super-welcome.

[17:30] <sena_kun> .tell AlexDaniel https://github.com/perl6/doc/pull/1165

[17:30] <yoleaux> sena_kun: I'll pass your message to AlexDaniel.

[17:31] <brokenchicken> Hahaha

[17:31] <brokenchicken> bdfoy replied to my issue

[17:32] <brokenchicken> http://i.imgur.com/56taHJt.png

[17:32] <cale2> somone make a thug life meme out of that interaction

[17:32] <brokenchicken> I'll assume he's still butthurt about my grant comments and not general dick to people opening issues :P

[17:35] <brokenchicken> m: say (a => 1, 'b', 'c').pairup.perl;

[17:35] <camelia> rakudo-moar d06d7c: OUTPUT¬´(:a(1), :b("c")).Seq‚ê§¬ª

[17:36] <brokenchicken> TIL we have pairup. Neat

[17:39] *** wamba left
[17:39] <brokenchicken> sena_kun: well, I reviewed up to "doc/Type/Attribute.pod6" and didn't spot anything. Don't have time to review more as I gotta work :)

[17:41] *** agentzh left
[17:42] *** trnh left
[17:44] *** astj left
[17:45] *** astj joined
[17:47] <SmokeMachine> why is the "master" branch named nom?

[17:48] <brokenchicken> it's more fun that way :)

[17:48] <brokenchicken> SmokeMachine: AFAIK it was first the "new object model" branch but it then became what master should be and well, got left that way

[17:49] <brokenchicken> And if we switch now force of habit + some tools that know it to be master would be confused

[17:49] *** astj left
[17:49] *** nemsys joined
[17:54] *** agentzh joined
[17:54] <sena_kun> brokenchicken, reviews are good, "agree/disagree" comments are better. ;) Thanks for attention anyway.

[17:56] *** samcv left
[17:58] *** cale2 left
[18:01] *** samcv joined
[18:02] *** bstamour joined
[18:11] <brokenchicken> m: sub foo { fail "foo" }; my $x = foo or dd $x\

[18:11] <camelia> rakudo-moar d06d7c: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot use variable $x in declaration to initialize itself‚ê§at <tmp>:1‚ê§------> 3 foo { fail "foo" }; my $x = foo or dd $7‚èè5x\‚ê§    expecting any of:‚ê§        argument list‚ê§        term‚ê§¬ª

[18:11] <brokenchicken> m: sub foo { fail "foo" }; my $x = foo or dd $x

[18:11] <camelia> rakudo-moar d06d7c: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot use variable $x in declaration to initialize itself‚ê§at <tmp>:1‚ê§------> 3 foo { fail "foo" }; my $x = foo or dd $7‚èè5x‚ê§    expecting any of:‚ê§        argument list‚ê§        term‚ê§¬ª

[18:12] <brokenchicken> Is this an accurate error? The sub eats up the `or` and it's not lower precedence to be equal to my $x = foo() or dd $x?

[18:13] <brokenchicken> Ah

[18:13] <brokenchicken> m: sub foo { fail "foo" }; my $y = 42; my $x = foo or dd $y

[18:13] <camelia> rakudo-moar d06d7c: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    or used at line 1‚ê§‚ê§¬ª

[18:13] <brokenchicken> It's seen as a routine and so yeah, gobbled up by foo

[18:14] *** lukiramu joined
[18:14] <brokenchicken> Hah

[18:15] <brokenchicken> bdfoy now also deleted my pointing out the example is broken.

[18:15] *** yqt left
[18:16] <brokenchicken> Well, I have no compunctions about not recommending his book to people.

[18:17] *** lukaramu left
[18:20] <nine> brokenchicken: FWIW I have seen this bracing style in the wild. And I find it confusing as hell. But it's all just a matter of getting used to it.

[18:23] <mst> I've only ever seen it on bdf's blog

[18:23] *** espadrine_ joined
[18:23] <TimToady> all it says to me is "I wish I were python"

[18:23] <brokenchicken> Eh, fuck him. I see him and his pet nanis trash P6 on twitter. I tried to be nice about him and be open minded about his book but if he wants to play penis games on GitHub, I couldn't give two shits.

[18:24] <brokenchicken> Which reminds, I need to load Perl 6 by Example on my ereader to peruse on the bus \o/

[18:24] <mst> brokenchicken: oh, yeah, if you publically disagree with him once he'll be a dick to you forevermore

[18:25] <mst> I've lost count of the number of people he refuses patches from etc. because of some minor disagreement being turned into a vendetta

[18:25] <El_Che> are we talking about the same guy I gave a small amount of money to write a book?

[18:27] <brokenchicken> El_Che: I dunno, there are at least three guys writing a book you may have given a small amount of money to write a book :)

[18:27] <El_Che> hehe

[18:28] <mst> El_Che: we're talking about bdfoy

[18:28] <El_Che> yeah, I know, I was being silly. More of a rhethorical thing

[18:29] <brokenchicken> huggable: books

[18:29] <huggable> brokenchicken, "Perl 6 At A Glance"  https://deeptext.media/perl6-at-a-glance/ (print only for now); "Perl 6 By Example": https://leanpub.com/perl6 (can order preview digital copies)

[18:29] <brokenchicken> ^ the other two guys. The first one is already finished, but no ebook yet and the second one is still in production being produced by our very own morit++

[18:29] <brokenchicken> *moritz++

[18:30] *** robertle joined
[18:30] <brokenchicken> And the other one is by Anton Shitov

[18:33] <brokenchicken> Ooops. *Andrew Shitov

[18:33] *** astj joined
[18:34] <brokenchicken> http://act.yapc.eu/ye2015/user/1773

[18:35] *** AlexDaniel joined
[18:37] *** astj left
[18:51] *** sufrostico left
[18:52] *** st_elmo left
[18:52] *** st_elmo joined
[18:53] *** jjido joined
[18:58] *** revere left
[18:58] *** revere joined
[19:01] *** pyrimidine left
[19:01] *** pyrimidine joined
[19:06] *** jjido left
[19:06] *** pyrimidine left
[19:12] *** Cabanossi left
[19:13] *** labster joined
[19:14] *** Cabanossi joined
[19:19] *** pyrimidine joined
[19:22] *** ufobat left
[19:26] *** sufrostico joined
[19:27] *** astj joined
[19:29] *** jjido joined
[19:31] *** astj left
[19:32] *** dj_goku left
[19:33] *** darutoko- left
[19:35] *** pyrimidine left
[19:36] *** pyrimidine joined
[19:39] <samcv> that brace style O.o

[19:40] *** lichtkind_ joined
[19:42] *** zakharyas left
[19:43] *** samcv left
[19:43] *** raiph left
[19:43] *** samcv joined
[19:43] *** cdg_ left
[19:43] <samcv> well I found it in this list here https://en.wikipedia.org/wiki/Indent_style#Placement_of_braces

[19:43] <Geth>  ecosystem: 274143b6e4 | (Wenzel P. P. Peppmeyer)++ | META.list

[19:43] <Geth>  ecosystem: add META6-bin

[19:43] <Geth>  ecosystem: review: https://github.com/perl6/ecosystem/commit/274143b6e4

[19:43] <samcv> seems to be Ratliff style: https://en.wikipedia.org/wiki/Indent_style#Ratliff_style

[19:44] *** bstamour left
[19:44] *** lichtkind left
[19:45] *** kyan joined
[19:47] <brokenchicken> https://github.com/gfldex/perl6-meta6-bin/

[19:49] <brokenchicken> gfldex: `perl` is the "minimum perl 6 version this module works on" and you're setting it to v6 by default, which will never be released.

[19:49] <brokenchicken> You meant v6.c (or v6.*)

[19:49] *** girafe joined
[19:50] *** ocbtec left
[19:51] * brokenchicken sees META6 making the same mistake in SYNOPSIS :/

[19:52] <brokenchicken> m: say Version.new('6') before v6.c

[19:52] <camelia> rakudo-moar d06d7c: OUTPUT¬´False‚ê§¬ª

[19:52] <brokenchicken> m: say Version.new('6.*') before v6.c

[19:52] <camelia> rakudo-moar d06d7c: OUTPUT¬´True‚ê§¬ª

[19:52] <brokenchicken> m: say Version.new('6.c') before v6.c

[19:52] <camelia> rakudo-moar d06d7c: OUTPUT¬´False‚ê§¬ª

[19:52] <brokenchicken> m: say Version.new('6.c') eqv v6.c

[19:52] <camelia> rakudo-moar d06d7c: OUTPUT¬´True‚ê§¬ª

[19:54] <gfldex> unsurprisingly given that roast doesn't test for v6.c to be younger then v6

[19:55] <brokenchicken> hm?

[19:55] <gfldex> m: say so v6 ~~ v6.0

[19:55] <camelia> rakudo-moar d06d7c: OUTPUT¬´True‚ê§¬ª

[19:55] <gfldex> m: say so v6.0 cmp v6.c

[19:55] <camelia> rakudo-moar d06d7c: OUTPUT¬´True‚ê§¬ª

[19:55] <gfldex> m: say v6.0 cmp v6.c

[19:55] <camelia> rakudo-moar d06d7c: OUTPUT¬´More‚ê§¬ª

[19:56] <TimToady> for normal versions, letters are considered variants of "alpha", basically, hence before .0; however, v6c steals that notation for a different purpose

[19:56] *** pyrimidine left
[19:56] <brokenchicken> Yeah

[19:56] <brokenchicken> m: use v6

[19:56] <camelia> rakudo-moar d06d7c: ( no output )

[19:56] *** pyrimidine joined
[19:56] <TimToady> .oO(Someday we'll come out with Perl 6.0!)

[19:56] <brokenchicken> ^ that one's a bit confusing tho

[19:57] <brokenchicken> I mean as far as figuring out what to stick in `perl` META field

[19:57] *** Gasher joined
[19:57] <brokenchicken> Maybe special case it to mean any version? It's a pretty common mistake.

[19:57] *** Cabanossi left
[19:57] <brokenchicken> (not that anything cares about `perl` meta field ATM AFAIK)

[19:59] *** Cabanossi joined
[20:00] <gfldex> no need to special case it. In a few month we will have v6.d . :->

[20:01] *** pyrimidine left
[20:02] <Geth>  doc: 3706a3d8fc | (Wenzel P. P. Peppmeyer)++ | doc/Language/pragmas.pod6

[20:02] <Geth>  doc: v6 -> v6.c

[20:02] <Geth>  doc: review: https://github.com/perl6/doc/commit/3706a3d8fc

[20:02] <AlexDaniel> .

[20:02] <brokenchicken> Hm, Diwali is October 19th this year... Plenty of time :P

[20:02] <yoleaux> 17:30Z <sena_kun> AlexDaniel: https://github.com/perl6/doc/pull/1165

[20:03] <brokenchicken> And it even aligns with regular release date (will be on Oct 21)

[20:04] <mspo> how do I type a utf8 combining character, like skin tone modifier?

[20:04] <AlexDaniel> mspo: https://docs.perl6.org/language/unicode_entry ?

[20:04] <AlexDaniel> or you can use ‚Äú\c[‚Ä¶]‚Äù

[20:04] <brokenchicken> m: "\c[woman health worker: medium-dark skin tone]"

[20:04] <camelia> rakudo-moar d06d7c: OUTPUT¬´WARNINGS for <tmp>:‚ê§Useless use of constant string "üë©üèæ‚Äç‚öïÔ∏è" in sink context (line 1)‚ê§¬ª

[20:04] <AlexDaniel> depending on where you actually want to type it

[20:04] <brokenchicken> m: "\c[woman health worker: medium-dark skin tone]".say

[20:04] <camelia> rakudo-moar d06d7c: OUTPUT¬´üë©üèæ‚Äç‚öïÔ∏è‚ê§¬ª

[20:05] <brokenchicken> m: "\c[woman health worker: medium-dark skin tone]".ords.say

[20:05] <camelia> rakudo-moar d06d7c: OUTPUT¬´(128105 127998 8205 9877 65039)‚ê§¬ª

[20:05] <mspo> m: "\c[pile of poop: medium-dark skin tone]"

[20:05] <camelia> rakudo-moar d06d7c: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unrecognized character name [pile of poop: medium-dark skin tone]‚ê§at <tmp>:1‚ê§------> 3"\c[pile of poop: medium-dark skin tone7‚èè5]"‚ê§¬ª

[20:06] *** bjz joined
[20:06] <brokenchicken> it's "pile of poo"  

[20:06] *** astj joined
[20:06] <brokenchicken> And I don't think skinton modifiers work just on anything

[20:07] <brokenchicken> m: "\c[snowman: medium-dark skin tone]".say

[20:07] <camelia> rakudo-moar d06d7c: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unrecognized character name [snowman: medium-dark skin tone]‚ê§at <tmp>:1‚ê§------> 3"\c[snowman: medium-dark skin tone7‚èè5]".say‚ê§¬ª

[20:07] <brokenchicken> hehe

[20:07] <AlexDaniel> no that's not how it works

[20:07] *** domidumont left
[20:08] <AlexDaniel> here's the list: http://unicode.org/Public/emoji/4.0/emoji-zwj-sequences.txt

[20:08] *** Gasher left
[20:08] <mspo> oh well

[20:08] <brokenchicken> And purty chart: http://unicode.org/emoji/charts/emoji-zwj-sequences.html

[20:08] <Geth>  doc: a7a81c3d2a | (Wenzel P. P. Peppmeyer)++ | 13 files

[20:08] <Geth>  doc: v6 -> v6.c

[20:08] <Geth>  doc: review: https://github.com/perl6/doc/commit/a7a81c3d2a

[20:08] <brokenchicken> m: (128169 127998 8205 9877 65039)¬ª.chr.say

[20:08] <camelia> rakudo-moar d06d7c: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3(1281697‚èè5 127998 8205 9877 65039)¬ª.chr.say‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        statement end‚ê§        statement modif‚Ä¶¬ª

[20:08] <AlexDaniel> you can slap a tone modifier on a poo character, sure, but not with \c[]

[20:09] <brokenchicken> m: <128169 127998 8205 9877 65039>¬ª.chr.say

[20:09] <camelia> rakudo-moar d06d7c: OUTPUT¬´(üí© üèæ ‚Äç ‚öï Ô∏è)‚ê§¬ª

[20:09] <AlexDaniel> .oO( and a gender sign, if that matters‚Ä¶ )

[20:09] <brokenchicken> How?

[20:09] <mspo> I more more font

[20:09] <mspo> need more fon

[20:09] <mspo> t

[20:10] <AlexDaniel> brokenchicken: poo + zwj + gender sign, that's it

[20:10] <AlexDaniel> brokenchicken: no font will render it, but‚Ä¶

[20:10] <AlexDaniel> you can make one that does

[20:11] *** astj left
[20:11] <brokenchicken> m: "\c[snowman]\c[ZERO WIDTH JOINER]\c[WOMAN]".say

[20:11] <camelia> rakudo-moar d06d7c: OUTPUT¬´‚òÉ‚Äçüë©‚ê§¬ª

[20:11] *** st_elmo left
[20:12] *** st_elmo joined
[20:12] <brokenchicken> Don't I just print two separate chars with a ZWJ in the middle and... that's it?

[20:12] <brokenchicken> There's no slapping involved?

[20:12] *** jjido left
[20:13] <AlexDaniel> you don't have to slap yourself, yes

[20:15] <brokenchicken> :)

[20:15] <AlexDaniel> font developers may tell you otherwise though

[20:17] <AlexDaniel> but that's actually an interesting question‚Ä¶ how often people use that stuff at all?

[20:18] <AlexDaniel> and if their font does not support it, are they going to do it anyway?

[20:19] <brokenchicken> I'd think this is more used by apps that use their own pictures for all of these

[20:20] <AlexDaniel> sena_kun: there are conflicts

[20:20] *** kyan left
[20:20] <brokenchicken> And the user just picks the emoji from emoji selector and is completely unaware of wtf Unicode even is

[20:20] <sena_kun> AlexDaniel, I know, I noted it in the description.

[20:21] *** astj joined
[20:22] <sena_kun> AlexDaniel, they can be resolved when I finish my struggling with cabal hell. :/

[20:23] <AlexDaniel> sena_kun: I want to just merge the damn thing to be honest

[20:23] <AlexDaniel> sena_kun: the issue was up for 6 months or so, nobody is interested in discussing it. Let's merge and *then* discuss :P

[20:23] <sena_kun> AlexDaniel, I think it is because nobody want such changes. :o

[20:24] <AlexDaniel> nope

[20:24] <brokenchicken> Hm, getting "Cannot find method 'keyword' on object of type Perl7::Grammar" any idea how come? https://github.com/perl7/perl7/blob/master/src/perl7.nqp#L46

[20:25] *** astj left
[20:25] <brokenchicken> This example has it and it compiles fine: https://github.com/edumentab/rakudo-and-nqp-internals-course/blob/master/examples/rubyish-3.nqp#L37

[20:25] <brokenchicken> Oh... and it defines token keyword. Nevermind, I thought it came from HLL::Grammar

[20:27] *** dj_goku joined
[20:27] *** dj_goku left
[20:27] *** dj_goku joined
[20:28] *** Cabanossi left
[20:29] *** Cabanossi joined
[20:31] *** zakharyas joined
[20:32] *** dj_goku left
[20:34] <[Coke]> (diwali) we are NOT release 6.d on the day of diwali

[20:34] <[Coke]> *releasing

[20:34] <brokenchicken> Why not?

[20:36] <brokenchicken> Hm. For some reason function support in Perl 7 don't work right. Fails to parse: https://github.com/perl7/perl7/blob/master/src/perl7.nqp

[20:36] * brokenchicken tables it for another day

[20:39] <[Coke]> 1) brokenchicken - well, while diwali is far enough for us to start planning, I don't want us to get locked into releasing on the day of. And we had a lot of pressure on the last day of release that we ended up cutting a few corners - like I said, probably have enough time to do it right this time, but would rather schedule to the work, not the holiday.

[20:40] <[Coke]> ... I started that off as a 1) list and then lost track of that as I kept typing. sorry. )

[20:40] <[Coke]> :)

[20:40] <geekosaur> "a few corners"

[20:40] <geekosaur> it really needed to bake for several more months

[20:41] <brokenchicken> [Coke]: oh right that yeah :)

[20:41] <brokenchicken> Diwali 2018 looks attractive ;)

[20:41] <[Coke]> I don't mean compiler functionality, btw, but language-level things like to deal with cutting a copy of roast, that sort of thing.

[20:41] *** wololoooo left
[20:42] <brokenchicken> .oO( don't name releases after holidays )

[20:42] <brokenchicken> Name it just The D. The younger generation will love it.

[20:42] <geekosaur> do that but ship it 9 months later. fashionably late...

[20:42] <brokenchicken> heh

[20:44] *** YEM2040 left
[20:45] *** pukku joined
[20:45] <pukku> Hi! There are two Base64 modules on modules.perl6.org -- MIME::Base64 and Base64. Does anyone know why I would prefer one over the other?

[20:47] <[Coke]> we don't have a quality rating yet, but I would check test coverage, recent-ness of commits...

[20:47] *** dontbe^2 joined
[20:47] <Geth>  doc/master: 4 commits pushed by coke++

[20:47] <Geth>  doc/master: c611ffdfe2 | remove trailing whitespace‚Ä¶

[20:47] <Geth>  doc/master: 206f9d9496 | use nbsp‚Ä¶

[20:47] <Geth>  doc/master: 13f2f59010 | learn new words‚Ä¶

[20:47] <Geth>  doc/master: 223e38759c | Remove 'blead' and try to tag a release instead‚Ä¶

[20:47] <Geth>  doc/master: review: https://github.com/perl6/doc/compare/a7a81c3d2a...223e38759c

[20:47] <mspo> did perl6 grow its own cpan yet?

[20:47] <[Coke]> (docs) trying something out with 223e38759c - maybe we can use something like when dealing with compiler/language versions.

[20:47] <mspo> zefAN?

[20:47] <[Coke]> mspo: no, we're going to use cpan's cpan

[20:48] <mspo> [Coke]: why?

[20:48] <[Coke]> ... why would we build our own if we didn't have to?

[20:48] <[Coke]> building wheels is HARD

[20:48] <mspo> yeah

[20:48] <pukku> They both pass tests, they both have similar commit recentness. One has 3 stars, and one has 1 star, but I don't know how important stars are...

[20:49] <mspo> does CPAN need to grow a supported-perls or something?

[20:49] <[Coke]> mspo: the perl6 stuff will be invisible to the p5 toolchain

[20:49] <[Coke]> and vice versa.

[20:49] <mspo> interesting

[20:50] <pukku> So I decided to ask and see if anyone has preferences...

[20:51] <perlpilot> pukku: MIME::Base64

[20:51] <pukku> Cool! Any reason, or just flip of the coin?

[20:51] <perlpilot> for no real reason other than it's in perl6  :-)

[20:51] <pukku> Ok

[20:52] <perlpilot> I don't think I've even used ugexe's version

[20:52] <mspo> Base64 looks more "modern"?

[20:52] *** kurahaupo__ left
[20:52] *** kurahaupo__ joined
[20:53] <mspo> but MIME:: looks nice too

[20:56] <pukku> Looking deeper, I just noticed the "oneline" option to the MIME::Base64 functions, which makes the choice simpler, as I want back one line.

[20:56] <pukku> Thanks!

[20:57] <pukku> On a different topic, I real somewhere that I should start using zef instead of panda, because that is going to be the new installer?

[20:58] *** pmurias left
[20:58] <gfldex> pukku: yes

[20:58] <[Coke]> yes, zef is preferred instead of panda these days

[20:59] <sena_kun> pukku, yes, it seems so.

[20:59] <pukku> Is there something I should do with Homebrew on a Mac to get zef installed? I installed rakudo-star via homebrew,

[20:59] <pukku> (s/,/./)

[21:00] *** rmusial left
[21:01] *** FROGGS left
[21:02] <RabidGravy> panda install zef

[21:02] <RabidGravy> wfm

[21:03] <pukku> Thanks!

[21:05] *** astj joined
[21:07] *** pmurias joined
[21:08] *** sufrostico left
[21:10] *** astj left
[21:11] *** kurahaupo__ is now known as kurahaupo

[21:11] *** Cabanossi left
[21:14] *** Cabanossi joined
[21:14] *** bjz left
[21:15] <pukku> And on another topic, if I want to find out the Content-Type from something fetched with LWP::Simple, is there a way to do that?

[21:15] <pukku> Or is there something more like LWP::UserAgent for Perl 6?

[21:16] <brokenchicken> buggable, eco http::useragent

[21:16] <buggable> brokenchicken, HTTP::UserAgent 'Web user agent': https://github.com/sergot/http-useragent

[21:17] <pukku> Thanks! I also just found Net::HTTP, so I will look at the two.

[21:17] *** cdg joined
[21:18] *** agentzh left
[21:18] <brokenchicken> dont see a way to get content type from httpua (at least by reading the code)

[21:20] <brokenchicken> oh wait .content-type on response

[21:20] *** labster left
[21:22] *** cdg left
[21:23] *** cdg joined
[21:24] *** labster joined
[21:25] <brokenchicken> RabidGravy: are you open to a decent docs PR for HTTP::UserAgent....?

[21:25] <RabidGravy> of course :)  

[21:25] <brokenchicken> seeing as current "for documentation links" seem to just point to random locations in source :/

[21:26] <brokenchicken> Oh, maybe there ARE pod docs and the links are just messed up

[21:26] <brokenchicken> yup, there's pod

[21:26] <RabidGravy> The docs did fail to keep up with the code

[21:28] <RabidGravy> so shall I install IBM MQ and have a crack at making a client binding

[21:32] <brokenchicken> vOv why not :)

[21:35] <pukku> Are there any weirdnesses with `qq:to/FOO/`?

[21:36] <pukku> In particular, I'm trying to interpolate some variables into some HTML text, but perl6 is complaining about trying to compile stuff that should be inside the heredoc...

[21:36] <moritz> pukku: if you try to interpolate $foo</p>, the <...> is parsed as a postcircumfix

[21:36] <moritz> (same in double-quoted strings, fwiw)

[21:36] <geekosaur> {} interpolation?

[21:37] <geekosaur> although the other is probably more likely for html, yeh

[21:37] <gfldex> pukku: https://docs.perl6.org/language/faq#%22Type_Str_does_not_support_associative_indexing.%22

[21:37] <moritz> as always, examples and error messages help

[21:37] *** pyrimidine joined
[21:37] <pukku> Right! OK, there is CSS, and I just copied this out, and forgot to escape the CSS brackets. My bad...

[21:38] <moritz> you can always use Q:s:to/FOO/

[21:38] <moritz> to only interpolate scalars

[21:39] <brokenchicken> m: my $x; say Q:s/$x<y>/

[21:39] <camelia> rakudo-moar d06d7c: OUTPUT¬´Use of uninitialized value $scalar of type Any in string context.‚ê§Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:39] *** astj joined
[21:41] <pukku> Many thanks for all the help!

[21:41] <brokenchicken> seems it don't work 

[21:41] *** pukku left
[21:42] *** pyrimidine left
[21:42] <AlexDaniel> ?

[21:42] <brokenchicken> I mean :s doesn't prevent <...> from being interpreted as key on scalars

[21:42] <AlexDaniel> m: my $x = 42; say Q:s/$x<y>/

[21:42] <camelia> rakudo-moar d06d7c: OUTPUT¬´Type Int does not support associative indexing.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:42] <AlexDaniel> oh

[21:43] <AlexDaniel> m: my $x = 42; say Q:c/{$x}<y>/

[21:43] <camelia> rakudo-moar d06d7c: OUTPUT¬´42<y>‚ê§¬ª

[21:43] <AlexDaniel> :S

[21:44] *** astj left
[21:48] <brokenchicken> Hah, this one's funny:

[21:48] <brokenchicken> m: my $x = 42; say Q:s/$x\<y>/

[21:48] <camelia> rakudo-moar d06d7c: OUTPUT¬´42\<y>‚ê§¬ª

[21:49] <brokenchicken> You can't escape the `<` properly either 'cause of Q :P

[21:49] <gfldex> there is a PR for that

[21:50] <brokenchicken> PR to what?

[21:50] <brokenchicken> Also, am I blind or the adverbs aren't listed in docs :/

[21:52] <AlexDaniel> there is an issue for that

[21:54] *** avuserow left
[21:54] *** pyrimidine joined
[21:55] <brokenchicken> my last eval above isn't a bug since there's no q/qq in adverbs.

[21:55] *** trnh joined
[21:55] <brokenchicken> or :b

[21:55] <brokenchicken> m: my $x = 42; say Q:bs/$x\<y>/

[21:55] <camelia> rakudo-moar d06d7c: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unrecognized adverb: :bs‚ê§at <tmp>:1‚ê§------> 3my $x = 42; say Q:bs7‚èè5/$x\<y>/‚ê§¬ª

[21:55] *** trnh left
[21:55] *** trnh joined
[21:55] <brokenchicken> aww

[21:55] <brokenchicken> m: my $x = 42; say Q:b:s/$x\<y>/

[21:55] <camelia> rakudo-moar d06d7c: OUTPUT¬´42\<y>‚ê§¬ª

[21:56] <brokenchicken> Oh, now I recall a ticket for something like that

[21:57] <brokenchicken> 15 matches on perl6.fail for "interpolation"

[21:58] <brokenchicken> So any idea for a good way to interpolate $ variables in a heredoc with HTML and CSS in it?

[21:58] *** perlawhirl joined
[21:58] <SmokeMachine> brokenchicken: thanks

[21:59] *** pyrimidine left
[21:59] <AlexDaniel> oh! Oh

[21:59] *** avuserow joined
[21:59] <lucs> brokenchicken: If you find a good solution, it'll be real useful for me to adapt it to heredocs containing PostScript and LaTeX :-)

[22:00] <lucs> What I'd like in particular is to have a character other than '{' to introduce interpolated evaluation.

[22:00] <brokenchicken> for HTML alone, Q:c works fine with {$whatver} interpolation, but if you add CSS to the mix you're back in backslashing-escape hell

[22:00] <gfldex> brokenchicken: this may help https://github.com/gfldex/perl6-xhtml-writer/blob/master/bin/generate-function-definition.p6#L42

[22:01] <brokenchicken> gfldex: I don't follow. There's a bunch of escapes in that heredoc

[22:01] *** rindolf left
[22:02] <brokenchicken> and a confusing use of constants :P

[22:02] <brokenchicken> hmm

[22:02] <brokenchicken> m: my $x = 42; say Q:f/&item($x)<42>/

[22:02] <camelia> rakudo-moar d06d7c: OUTPUT¬´Type Int does not support associative indexing.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:03] <brokenchicken> Damn all the ways come with this chaining feature :/

[22:03] <gfldex> m: my $x = 42; constant $foo = '<42>'; say Q:f/&item($x)$foo/

[22:03] <camelia> rakudo-moar d06d7c: OUTPUT¬´42$foo‚ê§¬ª

[22:03] *** labster left
[22:04] <lucs> q:v‚¶É‚¶Ñ:to/EoT/ ‚ãØ \begin{Foo}{‚¶É$bar‚¶Ñ} ‚ãØ   # If  :v‚¶É‚¶Ñ  for example meant to evaluate what is inside those brackets.

[22:04] <brokenchicken> I see. That's far from ideal tho

[22:04] <gfldex> agreed, the nature of all workarounds

[22:04] *** st_elmo left
[22:06] * brokenchicken gives up... for now

[22:07] * brokenchicken laughs at this email subject line

[22:07] <brokenchicken> "***SPAM***  Trump attacked by reporters and reveals he took this pill-to become President"

[22:07] <brokenchicken> They make pills for everything these days!

[22:09] *** travis-ci joined
[22:09] <travis-ci> Doc build errored. Wenzel P. P. Peppmeyer 'v6 -> v6.c'

[22:09] <travis-ci> https://travis-ci.org/perl6/doc/builds/195653620 https://github.com/perl6/doc/compare/8167550f359b...3706a3d8fc71

[22:09] *** travis-ci left
[22:10] *** agentzh joined
[22:10] *** RabidGravy left
[22:10] <brokenchicken> "The job exceeded the maximum time limit for jobs, and has been terminated."

[22:10] <brokenchicken> Prolly can be ameliorated by not building rakudo from scratch

[22:10] <lucs> Allowing heredocs to specify their interpolation-introducing characters would be really nice.

[22:11] <lucs> q:k¬´¬ª:to/EoT ‚ãØ <div class='foo'>The hash value is $bar¬´key¬ª, right.</div> ‚ãØ (or something)

[22:11] *** pyrimidine joined
[22:12] *** Cabanossi left
[22:14] *** Cabanossi joined
[22:15] *** dj_goku joined
[22:15] *** dj_goku left
[22:15] *** dj_goku joined
[22:15] <gfldex> m: my $c = 42; say Q:c‚∏®$a<p>{$c}</p>‚∏©

[22:15] <camelia> rakudo-moar d06d7c: OUTPUT¬´$a<p>42</p>‚ê§¬ª

[22:15] <gfldex> m: my $c = 42; say Q:c{$a<p>{$c}</p>}

[22:15] <camelia> rakudo-moar d06d7c: OUTPUT¬´$a<p>{$c}</p>‚ê§¬ª

[22:15] <brokenchicken> w00t

[22:15] <gfldex> strangle the 2nd version doesnt work

[22:15] *** pyrimidine left
[22:15] <gfldex> grammars are hard

[22:16] <brokenchicken> The second version is buggy... I keep meening to look at that ticket

[22:16] <brokenchicken> m: my $c = 42; say Q:c‚∏®$a<p>{$c}<p>‚∏©

[22:16] <camelia> rakudo-moar d06d7c: OUTPUT¬´$a<p>42<p>‚ê§¬ª

[22:16] <brokenchicken> Oh

[22:16] <brokenchicken> Right.

[22:16] <brokenchicken> I thought this was The Solution. But I see it won't work with CSS code :)

[22:17] <brokenchicken> BUT, you can stick a heredoc inside the heredoc, for just the CSS code ('cause it'd be just a separate block) and use different rules on it 

[22:17] *** travis-ci joined
[22:17] <travis-ci> Doc build errored. Wenzel P. P. Peppmeyer 'v6 -> v6.c'

[22:17] <travis-ci> https://travis-ci.org/perl6/doc/builds/195655510 https://github.com/perl6/doc/compare/3706a3d8fc71...a7a81c3d2af4

[22:17] *** travis-ci left
[22:17] <AlexDaniel> hmmmm

[22:18] *** astj joined
[22:18] <AlexDaniel> samcv: I figured that greping over the whole range is faster if you ÔΩ¢use nqpÔΩ£‚Ä¶ for @words -> str $word { $sieve .= grep({nqp::isge_i(nqp::index(nqp::getuniname($_), $word, 0), 0)}) };

[22:19] <AlexDaniel> aaabout 1.7s

[22:19] <AlexDaniel> versus 2.2s with no nqp

[22:20] *** labster joined
[22:20] *** dj_goku left
[22:23] *** astj left
[22:23] *** kaare__ joined
[22:24] *** kaare_ left
[22:24] *** kurahaupo left
[22:25] <pmurias> brokenchicken: be careful with the pill, it might turn you orange

[22:26] *** zakharyas left
[22:27] *** kaare__ left
[22:29] *** rmusial joined
[22:30] <brokenchicken> hehehe

[22:32] *** cpage_ left
[22:34] *** kaare__ joined
[22:35] *** perlawhirl left
[22:35] *** pecastro left
[22:36] *** rmusial left
[22:42] *** rmusial joined
[22:42] *** pecastro joined
[22:44] *** kurahaupo__ joined
[22:45] *** agentzh left
[22:46] *** TEttinger joined
[22:47] <samcv> AlexDaniel, which whole range?

[22:47] <samcv> oh

[22:47] <samcv> I see

[22:47] *** skids left
[22:48] *** pecastro left
[22:54] *** perlawhirl joined
[22:55] *** pecastro joined
[22:59] *** cibs left
[23:01] *** pecastro left
[23:04] *** bwisti left
[23:06] *** pyrimidine joined
[23:07] *** lukiramu left
[23:08] *** cibs joined
[23:08] *** wamba joined
[23:11] *** wamba left
[23:11] *** pyrimidine left
[23:12] *** astj joined
[23:13] *** AlexDaniel left
[23:13] *** lichtkind_ left
[23:15] *** pmurias left
[23:16] *** bwisti joined
[23:16] *** astj left
[23:19] *** cdg left
[23:20] *** cdg joined
[23:22] *** lep-delete left
[23:22] *** z448 joined
[23:24] *** pecastro joined
[23:24] *** hartenfels joined
[23:26] *** cpage_ joined
[23:28] *** lep-delete joined
[23:29] *** z448 left
[23:30] *** cpage_ left
[23:31] *** ggoebel left
[23:32] *** pecastro left
[23:32] *** cpage_ joined
[23:33] *** trnh left
[23:34] *** travis-ci joined
[23:34] <travis-ci> Doc build errored. Will "Coke" Coleda 'Remove 'blead' and try to tag a release instead'

[23:34] <travis-ci> https://travis-ci.org/perl6/doc/builds/195667233 https://github.com/perl6/doc/compare/a7a81c3d2af4...223e38759c5a

[23:34] *** travis-ci left
[23:35] *** espadrine_ left
[23:39] *** pecastro joined
[23:45] *** ggoebel joined
[23:46] *** girafe left
[23:49] *** pyrimidine joined
[23:50] *** pyrimidine left
[23:50] *** pyrimidi_ joined
[23:51] *** astj joined
[23:56] *** astj left
