[00:05] *** Cabanossi left
[00:08] *** Cabanossi joined
[00:22] *** lookatme joined
[00:22] <lookatme> morning .o/

[00:35] *** raschipi joined
[00:37] *** Cabanossi left
[00:38] *** Cabanossi joined
[00:40] <lookatme> I wonder why it exit from Perl 6 REPL mode when I press CTRL + C ?

[00:44] *** BenGoldberg joined
[00:45] <raschipi> lookatme: I think they didn't write a signal handler for SIGINT. By default, getting a SIGINT kills the program.

[00:46] <lookatme> raschipi, It would be better add a handler for SIGINT. :)

[00:47] <raschipi> I think it should do the same as the shell, print a new prompt

[00:48] <lookatme> yeah

[00:49] <lookatme> It will be helpful when type mistake happened

[00:52] *** chee left
[00:52] *** ctilmes left
[00:52] *** lookatme left
[00:52] *** ctilmes joined
[00:52] *** lookatme joined
[00:52] *** chee joined
[01:04] *** andrzejku_ joined
[01:07] *** andrzejku left
[01:20] *** colomon left
[01:25] *** troys_ is now known as troys

[01:26] *** aborazmeh joined
[01:26] *** aborazmeh left
[01:26] *** aborazmeh joined
[01:27] *** Actualeyes joined
[01:37] *** raschipi left
[01:40] <samcv> i'm making a perl 6 module that will query font information

[01:40] <samcv> will only work under linux but may be nice to add to our ecosystem :)

[01:41] <samcv> though i guess you can prolly install freetype on windows so potentially could work on windows

[01:47] <hobbs> yeah, probably not a ton of people have it, but devs are more likely than most to have some GTK app on windows, which then brings freetype with it :)

[01:49] <samcv> well. all people have fc-scan

[01:49] <samcv> anybody who has linux has freetype

[01:49] <samcv> unless you have no gui

[01:49] <samcv> and even if you don't... you probably still have it

[01:49] <samcv> ah. re windows you mean

[01:49] <hobbs> yeah

[01:50] <samcv> now i need to make a hash. i have one array of the value keys and one with the values

[01:50] <samcv> is there a builtin that will combine them

[01:50] <samcv> to a nice hash?

[01:50] <samcv> obviously the indexes match

[01:55] <hobbs> my %hash = @keys Z=> @values;

[01:56] *** troys is now known as troys_

[01:56] <samcv> thank you kindly

[02:00] <hobbs> or anonymously, Hash.new(@keys Z=> @values). The zip produces a list of pairs, it's the assignment to a hash that coerces it in the first one :)

[02:06] <MasterDuke> m: my @a = <a b c>; my @b = ^3; my %h; %h{@a} = @b; dd %h   # if you already have the hash and want to add to it

[02:06] <camelia> rakudo-moar aa9516: OUTPUT: «Hash %h = {:a(0), :b(1), :c(2)}␤»

[02:07] <hobbs> cool, that one's the same as perl 5 really :)

[02:07] <hobbs> except for the %

[02:08] *** pilne left
[02:10] *** yoleaux left
[02:11] <samcv> hmm maybe shouldn't bother converting the integer values to int objects and just return them as strings? idk

[02:12] <samcv> then i have to do more processing. hm should prolly do it for the bools. i know beforehand what each thing is gonna be

[02:12] <samcv> now it's becoming more work :P

[02:23] *** aborazmeh left
[02:27] <samcv> well i did it. :) this is actually gonna be a really nice module

[02:28] <BenGoldberg> m: my IntStr $x = 3; say $x.perl

[02:28] <camelia> rakudo-moar aa9516: OUTPUT: «Type check failed in assignment to $x; expected IntStr but got Int (3)␤  in block <unit> at <tmp> line 1␤␤»

[02:28] <BenGoldberg> m: my IntStr(Cool) $x = 3; say $x.perl

[02:28] <camelia> rakudo-moar aa9516: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Coercion IntStr(Cool) is insufficiently type-like to qualify a variable␤at <tmp>:1␤------> 3my IntStr(Cool) $x7⏏5 = 3; say $x.perl␤    expecting any of:␤        constraint␤»

[02:28] <BenGoldberg> m: my IntStr() $x = 3; say $x.perl

[02:28] <camelia> rakudo-moar aa9516: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Coercion IntStr(Any) is insufficiently type-like to qualify a variable␤at <tmp>:1␤------> 3my IntStr() $x7⏏5 = 3; say $x.perl␤    expecting any of:␤        constraint␤»

[02:29] <hobbs> maybe *you're* insufficiently type-like

[02:29] <BenGoldberg> I am a type that is shaped precisely like myself.

[02:29] <samcv> since i already know which are int's which are double's and which are strings. and then the other "things" like FT_Face is obviously just going to be a string

[02:30] <samcv> since it wouldn't make any sense to convet it to something else

[02:30] <samcv> or CharSet is a 'type'

[02:30] <samcv> though it's really a string i guess

[02:30] <BenGoldberg> An FT_Face is a pointer to a struct FT_FaceRec_.

[02:31] <samcv> charset: '20-7e a0-ae b0-b6 b8-de e0-119 152-153 160-161 178 192 2c6-2c7 2c9 2d8-2dd 3c0 2013-2014 2018-201a 201c-201e 2020-2022 2026 2030 2039-203a 20ac 2122 2126 2202 2206 220f 2211 2215 2219-221a 221e 222b 2248 2260 2264-2265 25ca'

[02:31] <samcv> unless i should do something to that...

[02:31] <samcv> just gonna leave as a string like i got it

[02:31] *** mtj_ left
[02:31] <hobbs> you could make it a list of ranges for starters

[02:33] *** noganex_ joined
[02:34] *** mtj_ joined
[02:34] <samcv> uhm

[02:34] <samcv> hm

[02:35] <samcv> most people might not want that info tho? idk have to balance processing time? what if you want to query tons of fonts

[02:35] <samcv> though. i do let you choose what to query

[02:35] <samcv> so you can just leave it out

[02:36] <samcv> going to be a good module. i just know

[02:36] <samcv> heh

[02:36] *** noganex left
[02:36] <samcv> hobbs, so ranges and integers? cause some are not ranges

[02:36] <hobbs> was debating that

[02:37] <hobbs> I think ranges and ranges would be less work

[02:37] <hobbs> er, be friendlier to the user I mean

[02:37] <samcv> ranges of one?

[02:37] <hobbs> yeah

[02:37] <samcv> hm

[02:38] *** hythm left
[02:38] <hobbs> I dunno, I guess you have to think about how it would be used, if it's used at all. One way would be answering the question "does the font have a glyph for this character?" I assume

[02:38] <hobbs> another way would be mapping the indices, or is there another structure for that?

[02:39] <samcv> not that i know of. i mean

[02:39] <samcv> it's as easy to make a range of one than make an integer

[02:39] <hobbs> yeah

[02:39] <hobbs> I just think a list of uniform types is less confusing to deal with

[02:39] *** ghs39ghsggf joined
[02:39] *** ghs39ghsggf left
[02:40] <samcv> m: for ((1..2), 3)».list.flat { .say }

[02:40] <camelia> rakudo-moar aa9516: OUTPUT: «1␤2␤3␤»

[02:40] <samcv> m: for ((1..2), (3..3))».list.flat { .say }

[02:40] <camelia> rakudo-moar aa9516: OUTPUT: «1␤2␤3␤»

[02:40] <samcv> m: for ((1..2), (3..3)) { .say }

[02:40] <camelia> rakudo-moar aa9516: OUTPUT: «1..2␤3..3␤»

[02:40] <samcv> m: for ((1..2), (3..3)).list { .say }

[02:40] <camelia> rakudo-moar aa9516: OUTPUT: «1..2␤3..3␤»

[03:07] *** Cabanossi left
[03:08] *** Cabanossi joined
[03:11] <samcv> hobbs, what should i name the module? Font::Info ? Font::Query?

[03:11] <samcv> almost done with it

[03:12] <lookatme> Font::QueryInfo ?

[03:13] <hobbs> no opinion there sorry

[03:14] <samcv> lookatme, i'll go with QueryInfo

[03:14] <lookatme> It's simple and readable

[03:18] *** kurahaupo joined
[03:18] *** kurahaupo__ left
[03:22] *** Sense8 joined
[03:26] *** kurahaupo left
[03:26] *** kurahaupo joined
[03:33] <samcv> ugh i can't install File::Find ?

[03:33] <samcv> so i can't install Mi6

[03:34] <samcv> maybe it doesn't list in the META file?

[03:34] <samcv> hmm nope it's there. but somehow zef didn't install it

[03:36] *** Cabanossi left
[03:37] <samcv> eek https://gist.github.com/samcv/649fd921a38755c75d6d62ae2b03b380

[03:38] *** Cabanossi joined
[03:38] <samcv> so File::Find is installed for one perl 6 install but not the other. and zef thinks it's installed

[03:41] *** AlexDaniel left
[03:42] *** Actualeyes left
[03:44] *** khw joined
[03:51] *** Cabanossi left
[03:52] *** Cabanossi joined
[03:56] *** plythnas joined
[03:56] *** plythnas left
[04:00] <perlawhirl> bench: 2017.01,2017.05 https://gist.githubusercontent.com/0racle/626025c0a14f4669388c1ebb1c669d14/raw/23edd28a13e84567347a6ecf692e2029ed1eaf32/boggle.p6 

[04:00] <benchable6> perlawhirl, Successfully fetched the code from the provided URL.

[04:00] <benchable6> perlawhirl, starting to benchmark the 2 given commits

[04:00] <benchable6> perlawhirl, benchmarked the given commits, now zooming in on performance differences

[04:00] <benchable6> perlawhirl, ¦2017.01: ««run failed, exit code = 1, exit signal = 0»» ¦2017.05: ««run failed, exit code = 1, exit signal = 0»»

[04:02] <perlawhirl> bench: 2017.01,HEAD https://gist.githubusercontent.com/0racle/626025c0a14f4669388c1ebb1c669d14/raw/23edd28a13e84567347a6ecf692e2029ed1eaf32/boggle.p6 

[04:02] <benchable6> perlawhirl, Successfully fetched the code from the provided URL.

[04:02] <benchable6> perlawhirl, starting to benchmark the 2 given commits

[04:02] <benchable6> perlawhirl, benchmarked the given commits, now zooming in on performance differences

[04:02] <benchable6> perlawhirl, ¦2017.01: ««run failed, exit code = 1, exit signal = 0»» ¦HEAD: ««run failed, exit code = 1, exit signal = 0»»

[04:02] <perlawhirl> bench: 2017.01,HEAD https://gist.githubusercontent.com/0racle/626025c0a14f4669388c1ebb1c669d14/raw/23edd28a13e84567347a6ecf692e2029ed1eaf32/boggle.p6 

[04:02] <benchable6> perlawhirl, Successfully fetched the code from the provided URL.

[04:02] <benchable6> perlawhirl, starting to benchmark the 2 given commits

[04:02] <benchable6> perlawhirl, benchmarked the given commits, now zooming in on performance differences

[04:02] <benchable6> perlawhirl, ¦2017.01: ««run failed, exit code = 1, exit signal = 0»» ¦HEAD: ««run failed, exit code = 1, exit signal = 0»»

[04:03] <perlawhirl> obench: 2017.02 https://gist.githubusercontent.com/0racle/626025c0a14f4669388c1ebb1c669d14/raw/23edd28a13e84567347a6ecf692e2029ed1eaf32/boggle.p6 

[04:03] <perlawhirl> bench: 2017.02 https://gist.githubusercontent.com/0racle/626025c0a14f4669388c1ebb1c669d14/raw/23edd28a13e84567347a6ecf692e2029ed1eaf32/boggle.p6 

[04:03] <benchable6> perlawhirl, Successfully fetched the code from the provided URL.

[04:03] <benchable6> perlawhirl, starting to benchmark the 1 given commit

[04:03] <benchable6> perlawhirl, ¦2017.02: ««run failed, exit code = 1, exit signal = 0»»

[04:03] <perlawhirl> bench: HEAD https://gist.githubusercontent.com/0racle/626025c0a14f4669388c1ebb1c669d14/raw/23edd28a13e84567347a6ecf692e2029ed1eaf32/boggle.p6

[04:03] <benchable6> perlawhirl, Successfully fetched the code from the provided URL.

[04:03] <benchable6> perlawhirl, starting to benchmark the 1 given commit

[04:03] <benchable6> perlawhirl, ¦HEAD: ««run failed, exit code = 1, exit signal = 0»»

[04:04] <samcv> lookatme, hobbs https://github.com/samcv/perl6-Font-QueryInfo actually turned out exceptional

[04:05] <hobbs> cool :)

[04:06] <hobbs> let's see if I can get it to work

[04:06] *** quester joined
[04:07] *** yoleaux joined
[04:07] *** ChanServ sets mode: +v yoleaux

[04:10] <samcv> ok just made a fix

[04:10] <samcv> i would pull again if you checkout it out already. and i just updated the example

[04:11] <samcv> run the example and just give it a folder as an argument and it will dump all the data for all fonts in that folder

[04:12] <samcv> https://gist.github.com/8137eb7e3643d19f541d68e5f41d25f8

[04:12] <samcv> here's the output i get running on a bunch of MS fonts

[04:12] <perlawhirl> bench: HEAD https://gist.githubusercontent.com/0racle/626025c0a14f4669388c1ebb1c669d14/raw/d9461408f0f84ea4a3cef68fdb2b1e4430f269e9/boggle.p6

[04:12] <benchable6> perlawhirl, Successfully fetched the code from the provided URL.

[04:12] <benchable6> perlawhirl, starting to benchmark the 1 given commit

[04:12] <samcv> prolly better in raw https://gist.githubusercontent.com/samcv/8137eb7e3643d19f541d68e5f41d25f8/raw/15470ab1b223bfa4757c4ddba96bde415176342b/all%2520ms%2520fonts.txt

[04:12] <benchable6> perlawhirl, ¦HEAD: «1.7936»

[04:13] <samcv> let me know if you have any issues. should publish to ecosystem tonight :)

[04:13] <perlawhirl> bench: 2016.12,2017.01,2017.02,2017.03,2017.04,2017.05 https://gist.githubusercontent.com/0racle/626025c0a14f4669388c1ebb1c669d14/raw/d9461408f0f84ea4a3cef68fdb2b1e4430f269e9/boggle.p6

[04:13] <benchable6> perlawhirl, Successfully fetched the code from the provided URL.

[04:13] <benchable6> perlawhirl, starting to benchmark the 6 given commits

[04:13] <hobbs> samcv: yeah, it works :)

[04:13] <samcv> :)

[04:14] <samcv> very proud with how it turned out

[04:14] <samcv> now i can rename all these fonts!

[04:14] <benchable6> perlawhirl, benchmarked the given commits, now zooming in on performance differences

[04:14] <benchable6> perlawhirl, https://gist.github.com/1262a5bd0f60120aa57c0d276394dda6

[04:15] <hobbs> samcv: here's a random one: https://gist.githubusercontent.com/arodland/ad2d6c3c79ad7af7fcdac5d2be4dc746/raw/f4dc1f7a993e3b119f785cf6a7b06246bdd33769/gistfile1.txt#

[04:16] <samcv> not sure if i should make lang an array

[04:16] <samcv> but i'm not 100% sure if the info it dumps isn't just info in the font file

[04:16] <perlawhirl> bench: 2017.01 https://gist.githubusercontent.com/0racle/626025c0a14f4669388c1ebb1c669d14/raw/d9461408f0f84ea4a3cef68fdb2b1e4430f269e9/boggle.p6

[04:16] <benchable6> perlawhirl, Successfully fetched the code from the provided URL.

[04:16] <samcv> and it may not match that format

[04:16] <benchable6> perlawhirl, starting to benchmark the 1 given commit

[04:16] <benchable6> perlawhirl, ¦2017.01: «1.6920»

[04:17] *** wamba joined
[04:22] <hobbs> samcv: I think it is a defined format. it looks like freetype is parsing the language tags that TrueType and OpenType use and converting them to IETF-style ones

[04:24] <perlawhirl> bench: 2017.01,HEAD https://gist.githubusercontent.com/0racle/626025c0a14f4669388c1ebb1c669d14/raw/2bc186bc431a1a7ddbb2ac387435f7ff983b67ac/boggle.p6

[04:24] <benchable6> perlawhirl, Successfully fetched the code from the provided URL.

[04:24] <benchable6> perlawhirl, starting to benchmark the 2 given commits

[04:25] <benchable6> perlawhirl, benchmarked the given commits, now zooming in on performance differences

[04:25] <benchable6> perlawhirl, ¦2017.01: «4.5081» ¦HEAD: «4.8042»

[04:26] <perlawhirl> bench: 2016.10 https://gist.githubusercontent.com/0racle/626025c0a14f4669388c1ebb1c669d14/raw/2bc186bc431a1a7ddbb2ac387435f7ff983b67ac/boggle.p6

[04:26] <benchable6> perlawhirl, Successfully fetched the code from the provided URL.

[04:26] <benchable6> perlawhirl, starting to benchmark the 1 given commit

[04:26] <benchable6> perlawhirl, ¦2016.10: «4.8635»

[04:28] <perlawhirl> bench: releases https://gist.githubusercontent.com/0racle/626025c0a14f4669388c1ebb1c669d14/raw/2bc186bc431a1a7ddbb2ac387435f7ff983b67ac/boggle.p6

[04:28] <benchable6> perlawhirl, Successfully fetched the code from the provided URL.

[04:28] <benchable6> perlawhirl, starting to benchmark the 19 given commits

[04:28] *** dustinm` left
[04:29] *** dustinm` joined
[04:30] <hobbs> samcv: which means you should be able to do something useful with them if you wanted, like splitting and putting in a set (unless there's already an appropriate type for language tags :)

[04:30] <samcv> there aren't THAT many types

[04:30] *** tinita left
[04:31] *** tinita joined
[04:32] *** benchable6 left
[04:32] *** benchable6 joined
[04:32] *** ChanServ sets mode: +v benchable6

[04:33] *** curan joined
[04:33] *** kyan joined
[04:34] <hobbs> I mean, someone may have written a module for it, it's a generally useful thing

[04:34] <hobbs> for purposes like doing HTTP content negotiation correctly :)

[04:35] *** Actualeyes joined
[04:37] <samcv> i mean they're already like

[04:37] <samcv> two letter languages

[04:37] *** bwisti left
[04:37] <samcv> aren't those standard

[04:38] <hobbs> there's a bit more to it than that

[04:38] <hobbs> and yes, there's a standard, but then there's another standard and another :)

[04:42] *** khw left
[04:42] *** mcmillhj joined
[04:43] <hobbs> anyway, that's a problem easily deferred

[04:45] <hobbs> if you wanted to do .split("|").Set it would probably be appropriate, but doing nothing and leaving that up to the user is hardly a crime

[04:46] <samcv> yea

[04:46] <samcv> i mean it's listed as a String property

[04:46] <lookatme> samcv, works fine on my fedora. 

[04:47] *** mcmillhj left
[04:53] *** mcmillhj joined
[04:58] *** mcmillhj left
[05:00] *** kyan left
[05:02] *** astj_ joined
[05:02] *** astj left
[05:04] <perlawhirl> bench: 2016.11,2016.12,2017.01,2017.02,2017.03,2017.04,2017.05 https://gist.githubusercontent.com/0racle/626025c0a14f4669388c1ebb1c669d14/raw/2bc186bc431a1a7ddbb2ac387435f7ff983b67ac/boggle.p6

[05:05] <benchable6> perlawhirl, Successfully fetched the code from the provided URL.

[05:05] <benchable6> perlawhirl, starting to benchmark the 7 given commits

[05:06] *** imcsk8 left
[05:06] *** Cabanossi left
[05:07] *** Cabanossi joined
[05:08] <benchable6> perlawhirl, benchmarked the given commits, now zooming in on performance differences

[05:08] <benchable6> perlawhirl, https://gist.github.com/487f5cae8c166ecb6a64f4eaf79d7a9a

[05:11] *** mr-foobar left
[05:13] *** mr-foobar joined
[05:14] *** imcsk8 joined
[05:19] *** |oLa| joined
[05:22] *** troys_ is now known as troys

[05:22] *** mcmillhj joined
[05:23] *** nadim joined
[05:25] *** kurahaupo left
[05:27] *** mcmillhj left
[05:28] *** kurahaupo joined
[05:31] *** nadim left
[05:33] *** Sense8 left
[05:37] *** lookatme left
[05:46] *** xtreak joined
[05:49] *** mcmillhj joined
[05:51] <samcv> hobbs, actually figured out something i need to fix. family, style and fullname are localized

[05:51] <samcv> so i need to break up them and Z= them into a hash

[05:51] <samcv> :fullname("Arial Narrow Negreta,Arial Narrow tučné,Arial Narrow fed,Arial Narrow Fett,Arial Narrow Έντονα,Arial Narrow Bold,Arial Narrow Negrita,Arial Narrow Lihavoitu,Arial Narrow Gras,Arial Narrow Félkövér,Arial Narrow Grassetto,Arial Narrow Vet,Arial Narrow Halvfet,Arial Narrow Pogrubiony,Arial Narrow Negrito,Arial Narrow Полужирный,Arial Narrow Fet,Arial Narrow Kalın,Arial Narrow Krepko,Arial Narrow Lodia")

[05:51] <samcv> :fullnamelang("ca,cs,da,de,el,en,es,fi,fr,hu,it,nl,no,pl,pt,ru,sv,tr,sl,eu"),

[05:51] <samcv> and that's not super useful

[05:53] <TEttinger> that is a long message

[05:54] *** mcmillhj left
[05:57] *** andrzejku_ is now known as andrzejku

[05:58] *** lowbro joined
[05:58] <andrzejku> hi people :)

[05:59] *** xtreak left
[05:59] *** xtreak joined
[06:02] *** mcmillhj joined
[06:04] *** domidumont joined
[06:06] *** mcmillhj left
[06:07] *** domidumont left
[06:08] *** domidumont joined
[06:09] *** BenGoldberg left
[06:12] *** pmurias joined
[06:13] <pmurias> draft of TPF::Amsterdam talk proposal: https://paste.debian.net/971387/

[06:14] *** mcmillhj joined
[06:17] *** dwarring left
[06:19] *** mcmillhj left
[06:21] *** xtreak left
[06:21] <moritz> pmurias: +1

[06:21] *** xtreak joined
[06:24] *** RK joined
[06:25] *** ugglan left
[06:25] <RK> Hello

[06:25] *** RK left
[06:26] *** nadim joined
[06:26] *** xtreak left
[06:26] <moritz> hi

[06:26] *** mcmillhj joined
[06:29] *** mr-foobar left
[06:29] *** cyphase left
[06:29] *** mr-foobar joined
[06:31] *** troys left
[06:31] *** mcmillhj left
[06:34] *** cyphase joined
[06:34] *** Cabanossi left
[06:34] *** wamba left
[06:37] *** Cabanossi joined
[06:38] *** mcmillhj joined
[06:39] *** hythm joined
[06:43] *** mcmillhj left
[06:45] <perlawhirl> bisect: https://gist.githubusercontent.com/0racle/e66920ec920c6b9174c450499a34a2cc/raw/16c71754c9d87ab06d6b1429f3a1f40eb5e6a92c/token_array.p6

[06:45] <bisectable6> perlawhirl, Successfully fetched the code from the provided URL.

[06:45] <bisectable6> perlawhirl, Bisecting by output (old=2015.12 new=aa9516b) because on both starting points the exit code is 0

[06:45] <bisectable6> perlawhirl, bisect log: https://gist.github.com/2accb25adf5727e7278cd2eb15cf6a41

[06:45] <bisectable6> perlawhirl, (2016-04-05) https://github.com/rakudo/rakudo/commit/6a2ff75a61fdd49b55eec8dcb647a6822dac090b

[06:47] <perlawhirl> bisect: old=2016.05 https://gist.githubusercontent.com/0racle/e66920ec920c6b9174c450499a34a2cc/raw/16c71754c9d87ab06d6b1429f3a1f40eb5e6a92c/token_array.p6

[06:47] <bisectable6> perlawhirl, Successfully fetched the code from the provided URL.

[06:47] <bisectable6> perlawhirl, Bisecting by output (old=2016.05 new=aa9516b) because on both starting points the exit code is 0

[06:47] <bisectable6> perlawhirl, bisect log: https://gist.github.com/05b155cf40b3389d749b8999b236198b

[06:47] <bisectable6> perlawhirl, (2016-10-19) https://github.com/rakudo/rakudo/commit/7a456ff80183a6e26dc91d811d992112c68ddb6d

[06:52] *** mcmillhj joined
[06:52] <perlawhirl> re ↑ dunno if tt's a regression or a correction, but that commit broke the use of the anonymous state var ($++) inside regex code blocks

[06:57] *** mcmillhj left
[07:00] *** keylet joined
[07:02] *** xtreak joined
[07:02] *** espadrine joined
[07:08] *** mcmillhj joined
[07:12] *** mcmillhj left
[07:14] *** jjjack joined
[07:15] *** abraxxa joined
[07:16] *** jjjack left
[07:18] *** keylet left
[07:18] *** wamba joined
[07:22] *** lizmat left
[07:24] *** kurahaupo_ joined
[07:25] *** lizmat joined
[07:25] *** kurahaupo__ joined
[07:26] *** kurahaupo__ left
[07:26] *** kurahaupo left
[07:26] *** kurahaupo joined
[07:26] *** kurahaupo left
[07:27] *** kurahaupo joined
[07:27] *** kurahaupo left
[07:28] *** kurahaupo_ left
[07:33] *** liqg joined
[07:34] *** liqg left
[07:34] *** liqg joined
[07:36] *** Cabanossi left
[07:37] *** Cabanossi joined
[07:38] *** mcmillhj joined
[07:40] <liqg> p6: say 3.perl

[07:40] <camelia> rakudo-moar aa9516: OUTPUT: «3␤»

[07:43] *** mcmillhj left
[07:44] <masak> p6: say "Perl".perl

[07:44] <camelia> rakudo-moar aa9516: OUTPUT: «"Perl"␤»

[07:45] <masak> p6: say ".perl".perl

[07:45] <camelia> rakudo-moar aa9516: OUTPUT: «".perl"␤»

[07:46] * pmurias submitted his TPF::Amsterdam talk

[07:51] *** mcmillhj joined
[07:56] *** mcmillhj left
[08:03] *** jonas2 joined
[08:05] *** MasterDuke left
[08:11] <moritz> pmurias++

[08:16] *** llvm joined
[08:18] *** mcmillhj joined
[08:20] *** dakkar joined
[08:22] *** mcmillhj left
[08:27] *** keylet joined
[08:31] <keylet> https://pastebin.com/G2g9cP0U

[08:31] *** srandon111 joined
[08:31] <keylet> perl6 prints this when i use .parse()

[08:31] <srandon111> hello all, is it worth learning perl6 instead of python/ruby ? 

[08:31] <srandon111>  and which could be the advantages ? 

[08:32] <keylet> how can I work with these results as class

[08:32] <keylet> i. e. title_wrap.title_pair.title

[08:32] <keylet> check if some sub-class has an attribute

[08:32] <keylet> ?

[08:32] <llfourn> keylet: $res<title_wrap><title_pair>

[08:33] <keylet> thank you!

[08:33] *** mcmillhj joined
[08:33] <llfourn> srandon111: it might be. Depends on what your project is I'd say.

[08:34] <llfourn> it's advantages is that it's well designed and fun to use

[08:35] <llfourn> m: say ('⚀' .. '⚅').roll(5) # that's how we roll

[08:35] <camelia> rakudo-moar aa9516: OUTPUT: «(⚄ ⚁ ⚃ ⚀ ⚅)␤»

[08:36] *** ufobat joined
[08:38] *** mcmillhj left
[08:41] *** _cronus joined
[08:44] <_cronus> hello

[08:44] <llfourn> o/

[08:45] <_cronus> I think I found a bug in JSON::RPC::Server

[08:45] *** quester left
[08:45] *** espadrine left
[08:46] <llfourn> _cronus: perhaps report it on github?

[08:46] <_cronus> it makes use of psgi.input, but it isn't set by PSGI unless $psgi-classic is set.

[08:47] <timotimo> ah, so perhaps an api change in psgi happened and it didn't get changed to match?

[08:47] <_cronus> llfourn: this is my intention, but since I'm very new to perl6 I'd like your help to verify that it is a bug and not my missinterpretation of how this is supposed to work.

[08:48] <llfourn> _cronus: understood :)

[08:49] *** mcmillhj joined
[08:50] *** rindolf joined
[08:53] *** xtreak left
[08:54] *** mcmillhj left
[08:57] <_cronus> I copied the simple example from https://github.com/bbkr/jsonrpc and client gave me Parse error (-32700): "Input (0 characters) is not a valid JSON string"

[08:58] *** mr-foobar left
[08:59] <llfourn> _cronus: I'd say that's at least a bug with the example

[09:01] *** ggoebel left
[09:02] <_cronus> changing  psgi.input to p6sgi.input, or adding :psgi-classic in /opt/rakudo-star-2017.04/share/perl6/site/sources/81DB393EB1150D351C43BD914B340EA590E02CE7 makes it work.

[09:04] *** abraxxa left
[09:04] *** nattefrost joined
[09:04] *** abraxxa joined
[09:05] <_cronus> llfourn: true, I'll report it as a bug to the test case then

[09:05] *** Cabanossi left
[09:06] <llfourn> _cronus++

[09:07] *** Cabanossi joined
[09:08] *** mr-foobar joined
[09:09] *** abraxxa left
[09:09] *** abraxxa joined
[09:11] *** xtreak joined
[09:13] <_cronus> llfourn: thanks

[09:14] *** ggoebel joined
[09:18] *** mcmillhj joined
[09:19] *** xtreak left
[09:24] *** ctilmes left
[09:25] *** mcmillhj left
[09:26] *** kaare__ left
[09:28] *** _cronus left
[09:28] *** liqg left
[09:32] *** llvm left
[09:42] *** zakharyas joined
[09:50] *** Cabanossi left
[09:50] <pmurias> srandon111: Perl 6 is more fun, python/ruby are more mature/have more jobs

[09:51] <srandon111> thanks pmurias 

[09:52] *** Cabanossi joined
[09:55] <tadzik> srandon111: the way I see it, learning a new, different language expands your horizons, and you end up improving all your other programming work

[09:55] <tadzik> Perl 6 has a lot cool things to learn, which may make you a better python programmer even if you never end up using Perl 6 for your job

[09:58] *** ufobat left
[10:05] *** zakharyas left
[10:06] *** rumble joined
[10:07] *** grumble left
[10:08] *** rumble is now known as grumble

[10:14] *** keylet_ joined
[10:14] <keylet_> perl6 grammars vs ANTLR4

[10:14] <keylet_> what is better?

[10:16] *** domidumont left
[10:24] *** itaylor57 left
[10:24] <timotimo> there's a converter that turns antlr4 grammars into perl6 grammars

[10:24] <timotimo> so you don't have to care :P

[10:25] <timotimo> on top of that, perl6 grammars give you a crapton of escape hatches to get around any limitations you might find

[10:25] *** TEttinger left
[10:26] *** Actualeyes left
[10:30] *** itaylor57 joined
[10:31] <zengargoyle> you can't go wrong by eventually throwing Perl 5 into the mix.  it can be so quick and dirty and flexible and fast and throwaway that it's just damn handy regardless of your daily work language choice. :)

[10:42] *** grondilu joined
[10:43] <grondilu> Why doesn't this work? :-(  

[10:43] <grondilu> https://gist.github.com/grondilu/8353432388ad8e0da44ff8bc78daca50

[10:44] *** zakharyas joined
[10:44] <grondilu> I don't get why 'a+b' doesn't.

[10:45] <[ptc]> hi perl6

[10:46] <[ptc]> dumb question of the day: is RT down atm?

[10:46] <[ptc]> just wondering if I'm suffering from PEBKAC

[10:49] <zengargoyle> [ptc]: website works for me...

[10:50] <[ptc]> zengargoyle: cheers.  Must be something at my end.  I keep getting 502s

[10:55] <grondilu> nevermind I'll used the grammar in https://en.wikipedia.org/wiki/Parsing_expression_grammar.  Seems to work better.

[10:57] <zengargoyle> grondilu: yeah, seems to work, fail, fail, then infinite recursion.

[11:05] *** Cabanossi left
[11:06] *** zakharyas left
[11:07] *** Cabanossi joined
[11:14] <grondilu> m: say i**-1

[11:14] <camelia> rakudo-moar 14d757: OUTPUT: «6.12323399573677e-17-1i␤»

[11:14] <grondilu> ^that's LTA imho

[11:15] <grondilu> m: say i**2

[11:15] <camelia> rakudo-moar 14d757: OUTPUT: «-1+1.22464679914735e-16i␤»

[11:15] <grondilu> so is this

[11:15] <grondilu> m: say i**2 == -1

[11:15] <camelia> rakudo-moar 14d757: OUTPUT: «False␤»

[11:15] <grondilu> m: say i**2 =~= -1

[11:15] <camelia> rakudo-moar 14d757: OUTPUT: «True␤»

[11:17] * zengargoyle wonders how often modules.perl6.org/todo updates.  i'm on a quest to make it happy. :P

[11:21] <zengargoyle> m: say i*i, so i**2 == -1+0i, so i*i == -1+0i

[11:21] <camelia> rakudo-moar 14d757: OUTPUT: «-1+0iFalseTrue␤»

[11:22] <moritz> exponentiation goes to polar form

[11:22] <moritz> so there are always imprecisions

[11:22] *** eveo joined
[11:22] <zengargoyle> ah, i halfway understand that.

[11:23] <moritz> I know people don't like that, but Perl 6 is not a CAS :-)

[11:23] <eveo> grondilu: that's floating point noise

[11:23] <keylet> I try to get token $parsed<title_wrap><title_pair><title>

[11:23] <zengargoyle> from 3blue1brown videos on youtube. :P

[11:23] <keylet> but I get not only the string, but also all its substrings

[11:24] <keylet> what can I do if I don't want to get these substrings

[11:25] <keylet> ?

[11:25] <moritz> keylet: what are you doing now?

[11:26] *** araraloren joined
[11:26] <keylet> https://pastebin.com/gj11VKC8

[11:27] <grondilu> moritz: I'm not asking Perl 6 to be a CAS, but Complex is not specced to use natives, is it?   Shouldn't we have C<complex> for that?

[11:27] <keylet> I want to only get ｢аутэ́куку｣

[11:27] <grondilu> m: my complex $z;

[11:27] <camelia> rakudo-moar 14d757: OUTPUT: «5===SORRY!5===␤Type 'complex' is not declared. Did you mean any of these?␤    Complex␤    Compiler␤␤at <tmp>:1␤------> 3my complex7⏏5 $z;␤Malformed my␤at <tmp>:1␤------> 3my7⏏5 complex $z;␤␤»

[11:27] <moritz> grondilu: it's specced to use Num by default

[11:28] <grondilu> that's LTA

[11:28] <moritz> and that comes without rounding errors, independently of whether they are num or Num

[11:28] <moritz> (Complex is supposed to be a role that supports other storage types, but so far nobody has bothered to implement that)

[11:29] <eveo> keylet: say ~.<title>

[11:29] <eveo> stringify the match object

[11:29] <moritz> or $_<title>.Str

[11:29] <moritz> (same thing, really)

[11:29] <eveo> grondilu: what should it use instead of Num?

[11:29] <grondilu> eveo: nothing, or just Real

[11:29] * zengargoyle thinks keylet needs to use a make in the title rule to squish things into a single string.

[11:30] <grondilu> basically whatever you feed it during instanciation

[11:30] <eveo> grondilu: huh? What do you mean nothing? Also Real is a role and Num is Real

[11:30] <grondilu> (as long as it's Real)

[11:30] <eveo> Num is Real

[11:30] <grondilu> I mean role Complex { has Real ($.re, $.im); ... }

[11:31] <eveo> Ah

[11:31] <eveo> So <1.5+5i> would make a Complex with Rat real and Int im

[11:31] <grondilu> yeah why not?

[11:31] <keylet> moritz: $_<title>.Str worked for me! thanks!

[11:32] <moritz> grondilu: sure, do it

[11:32] <moritz> just measure performance before and after

[11:32] <moritz> and ** Complex will likely still be subject to floating point errors

[11:32] <grondilu> no

[11:32] *** wamba left
[11:33] <grondilu> at least if exponent is integer

[11:34] <eveo> You then hit an issue similar to what we have with allomorphs

[11:34] <moritz> thatif it's Complex, it's not integer :-)

[11:34] <grondilu> I've complained about Numeric several times already.  This is just an expample.  I guess I'll write a long issue one of these days.

[11:35] <moritz> don't write issues. Fix them.

[11:35] <eveo> As in, is <1.0+0i> eqv <1+0i> or not

[11:35] <moritz> srsly, Complex with non-Num storage types would be nice to have, but actual use cases for that are pretty rare

[11:35] * grondilu is not sure about the semantics of &[eqv]

[11:36] <eveo> grondilu: the issue about i**2 was already filed before and after a discussion rejected

[11:36] <keylet> can I get the next element of the array if it exists, if I use for @array { $_ }  ?

[11:36] <eveo> keylet: you could iterate two at a time

[11:37] <zengargoyle> seems all the bizarre stuff has been discussed and rejected. :)

[11:37] <eveo> keylet: for @a -> $a, $b? {}

[11:37] <eveo> zengargoyle: well, it's been going on for a decade and a half

[11:37] <moritz> m: for (1..8).rotor(2 => -1) -> $a, $b { say "$a: $b" }

[11:37] <camelia> rakudo-moar 14d757: OUTPUT: «1 2: 2 3␤3 4: 4 5␤5 6: 6 7␤Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[11:37] <moritz> m: for (1..8).rotor(2 => -1) -> $a, $b? { say "$a: $b" }

[11:37] <camelia> rakudo-moar 14d757: OUTPUT: «1 2: 2 3␤3 4: 4 5␤5 6: 6 7␤Use of uninitialized value $b of type Mu in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block  at <tmp> line 1␤7 8: ␤»

[11:37] <eveo> need unpack

[11:38] <moritz> m: for (1..8).rotor(2 => -1) -> ($a, $b) { say "$a: $b" }

[11:38] <camelia> rakudo-moar 14d757: OUTPUT: «1: 2␤2: 3␤3: 4␤4: 5␤5: 6␤6: 7␤7: 8␤»

[11:38] <moritz> thanks eveo 

[11:38] <zengargoyle> eveo: yeah, i know, it just makes me twinge on occasion.  1/3 + 1/3 + 1/3 == 1 is a selling point, but other things that seem to be cromulent are discussed and rejected.

[11:39] <keylet> m: my @a = <a b c d e f g>; for @a -> $even, $odd { say "a) $even; b) $odd;" }

[11:39] <camelia> rakudo-moar 14d757: OUTPUT: «a) a; b) b;␤a) c; b) d;␤a) e; b) f;␤Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[11:39] <zengargoyle> too hard, too slow, special case, etc.  it's a mixed message.

[11:39] <keylet> how to catch this exception?

[11:39] *** araraloren left
[11:40] <eveo> keylet: put a question mark after $b

[11:40] <keylet> m: my @a = <a b c d e f g>; for @a -> $even, ?$odd { say "a) $even; b) $odd;" }

[11:40] <camelia> rakudo-moar 14d757: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> 3 @a = <a b c d e f g>; for @a -> $even, 7⏏5?$odd { say "a) $even; b) $odd;" }␤»

[11:40] <keylet> m: my @a = <a b c d e f g>; for @a -> $even, $odd? { say "a) $even; b) $odd;" }

[11:40] <camelia> rakudo-moar 14d757: OUTPUT: «a) a; b) b;␤a) c; b) d;␤a) e; b) f;␤Use of uninitialized value $odd of type Mu in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block  at <tmp> line 1␤a) g; b) ;␤»

[11:41] <keylet> m: my @a = <a b c d e f g>; for @a -> $even, $odd? { say "a) $even; b) " .. $odd? .. ";" }

[11:41] <camelia> rakudo-moar 14d757: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3ven, $odd? { say "a) $even; b) " .. $odd7⏏5? .. ";" }␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end…»

[11:42] <zengargoyle> m: my @a = <a b c d e f g>; for @a -> $even, $odd? { say "a) $even; b) {$odd orelse ''};" }

[11:42] <camelia> rakudo-moar 14d757: OUTPUT: «a) a; b) b;␤a) c; b) d;␤a) e; b) f;␤a) g; b) ;␤»

[11:44] *** araraloren joined
[11:44] <araraloren> evening 

[11:44] <eveo> zengargoyle: .1 + .2 == .3 is that way because someone went ahead and made it and other people liked it. Things don't get done by whining in a chat channel about how shitty something is. Even with filed issues the discussion is essentially: <reporter> "I think you should spend a 100 hours of your time changing Complex to follow my idea" <responder> "I'm not convinced"

[11:46] <zengargoyle> m: my @a = <a b c d e f g>; for @a -> $even, $odd? { say "a) $even; {$odd??"b) $odd;"!!''}" }

[11:46] <camelia> rakudo-moar 14d757: OUTPUT: «a) a; b) b;␤a) c; b) d;␤a) e; b) f;␤a) g; ␤»

[11:47] <zengargoyle> eveo: you take me too seriously.

[11:47] <eveo> zengargoyle: the Rat example is a red herring anyway. There are at least two big issues with rats. Fixing one naively would make rats much slower. The other would need a lot of careful thought

[11:47] * eveo &

[11:47] *** eveo left
[11:51] <zengargoyle> the converse being how a lot of function in p6 started as 'just the simplest thing that worked' and over time everything gets faster and better as people go back and replace the simple with the better.

[11:52] <zengargoyle> almost every p6-weekly has some bit getting x% faster when y.

[12:00] <keylet> m: my @a = <a b c d e f g>; for @a { say $_; }

[12:00] <camelia> rakudo-moar 14d757: OUTPUT: «a␤b␤c␤d␤e␤f␤g␤»

[12:01] <keylet> m: my @a = <a b c d e f g>; loop @a { say $_; }

[12:01] <camelia> rakudo-moar 14d757: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3my @a = <a b c d e f g>; loop7⏏5 @a { say $_; }␤    expecting any of:␤        scoped block␤»

[12:01] <keylet> m: my @a = <a b c d e f g>; for @a -> $foo, $bar { say $foo; say $bar; }

[12:01] <camelia> rakudo-moar 14d757: OUTPUT: «a␤b␤c␤d␤e␤f␤Too few positionals passed; expected 2 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[12:01] <llfourn> keylet: you want a for to iterate there

[12:02] <llfourn> keylet: you have an odd number elements in that array so you can't iterate two-by-two

[12:02] <llfourn> m: my @a = <a b c d e f g>; for @a -> $foo, $bar? { say $foo; say $bar; }

[12:02] <camelia> rakudo-moar 14d757: OUTPUT: «a␤b␤c␤d␤e␤f␤g␤(Mu)␤»

[12:02] <keylet> what is (Mu)?

[12:02] <llfourn> keylet: like undefined

[12:02] <llfourn> super undefined

[12:03] <keylet> how to check if $var is (Mu)?

[12:03] <llfourn> and tbh I was expecting it to me Any

[12:03] <zengargoyle> eveo: luckily telling me to *-off is probably easier than trying to deal with me learning how to fix core things. :)

[12:03] <araraloren> Mu is most undefined

[12:03] <keylet> how to check if $var is (Mu)?

[12:03] <llfourn> m: say Mu.defined;

[12:03] <camelia> rakudo-moar 14d757: OUTPUT: «False␤»

[12:04] <araraloren> Mu is a class

[12:04] <araraloren> m: say 1 ~~ Mu;

[12:04] <camelia> rakudo-moar 14d757: OUTPUT: «True␤»

[12:04] <keylet> m: my @a = <a b c d e f g>; for @a -> $foo, $bar? { say $foo; say $bar; say $bar.defined; }

[12:04] <camelia> rakudo-moar 14d757: OUTPUT: «a␤b␤True␤c␤d␤True␤e␤f␤True␤g␤(Mu)␤False␤»

[12:06] <llfourn> checking if something is precisely Mu is actually rather hard iirc

[12:06] <llfourn> but you usually don't see Mu -- And I'm suprised that an optional parameter to a loop block is Mu by default

[12:07] <llfourn> m: say (-> $a, $b { }).say

[12:07] <camelia> rakudo-moar 14d757: OUTPUT: «-> $a, $b { #`(Block|43595616) ... }␤True␤»

[12:07] <llfourn> m: say (-> $a, $b { }).signature

[12:07] <camelia> rakudo-moar 14d757: OUTPUT: «($a, $b)␤»

[12:07] <zengargoyle> m: my @a = <a b c d e f g>; for @a -> $foo, $bar? { say $foo; ($bar orelse 'bar not defined').say; }

[12:07] <camelia> rakudo-moar 14d757: OUTPUT: «a␤b␤c␤d␤e␤f␤g␤bar not defined␤»

[12:07] <llfourn> m: say (-> $a, Mu $b { }).signature

[12:07] <camelia> rakudo-moar 14d757: OUTPUT: «($a, $b)␤»

[12:08] <llfourn> m: say (-> $a, $b { }).signature.params

[12:08] <camelia> rakudo-moar 14d757: OUTPUT: «(Mu $a Mu $b)␤»

[12:08] <llfourn> apparently pointy block default type is Mu

[12:10] *** AlexDaniel joined
[12:10] <araraloren> m: say Mu.new.mro

[12:10] <camelia> rakudo-moar 14d757: OUTPUT: «No such method 'mro' for invocant of type 'Mu'␤  in block <unit> at <tmp> line 1␤␤»

[12:10] <araraloren> m: say Mu.new.^mro

[12:10] <camelia> rakudo-moar 14d757: OUTPUT: «((Mu))␤»

[12:11] <llfourn> m: my $var = Mu; say ($var orelse .WHAT =:= $var) # is there any easier way?

[12:11] <camelia> rakudo-moar 14d757: OUTPUT: «False␤»

[12:11] <llfourn> m: my $var = Mu; say ($var orelse .WHAT =:= Mu) # I mean, is there any easier way?

[12:11] <camelia> rakudo-moar 14d757: OUTPUT: «True␤»

[12:11] <araraloren> m: say Mu.WHAT

[12:11] <camelia> rakudo-moar 14d757: OUTPUT: «(Mu)␤»

[12:12] <zengargoyle> m: say (-> Mu:D $a, Mu:U $b { say $a; say $b; True}(1,Mu))

[12:12] <camelia> rakudo-moar 14d757: OUTPUT: «1␤(Mu)␤True␤»

[12:12] <moritz> llfourn: what do you want to do?

[12:12] <llfourn> moritz: just check if something in a variable with a container is Mu

[12:13] <llfourn> you can't use ===, so you have to use =:=, but first you have to decont the variable

[12:13] <llfourn> I'm not sure the easiest way to do that

[12:13] <moritz> !~~ Any, maybe

[12:13] <moritz> ~~ Mu:U 

[12:13] <zengargoyle> m: say Mu ~~ Mu:D; say Mu ~~ Mu:U

[12:13] <camelia> rakudo-moar 14d757: OUTPUT: «False␤True␤»

[12:14] <llfourn> m: say Any ~~ Mu:U

[12:14] <camelia> rakudo-moar 14d757: OUTPUT: «True␤»

[12:14] <moritz> m: say $_ ~~ Mu:U for Mu, Any, Junction, Mu.new, 

[12:14] <camelia> rakudo-moar 14d757: OUTPUT: «True␤True␤True␤X::Multi::NoMatch exception produced no message␤  in block <unit> at <tmp> line 1␤␤»

[12:14] <moritz> eeks

[12:14] <llfourn> :P

[12:15] <llfourn> !~~ Any is a fairly good solution

[12:15] <keylet> now I want to get all tokens with name "foo" as strings

[12:15] <keylet> $parsed_by_grammar.~<foo> does not work

[12:15] <llfourn> m: say ("a"|"b") !~~ Any

[12:15] <camelia> rakudo-moar 14d757: OUTPUT: «False␤»

[12:15] <llfourn> keylet: put the ~ infront of the term

[12:16] <llfourn> ~$parsed_by_grammar<foo>

[12:21] *** tipdbmp joined
[12:22] <keylet> but I get an array that contains one element string "foo foo ...". I'd like to see "foo", "foo", "foo", ...

[12:22] <llfourn> keylet: ah sorry I didn't see your early query, if foo is an array of matches you should do <foo>.map(*.Str)

[12:22] <llfourn> ealier*

[12:23] <araraloren> an array with one element ?

[12:23] *** xtreak joined
[12:23] <tipdbmp> Where can the "#|" pod thingy returned by the WHY metamethod be found in the Perl 6 language documentation?

[12:24] <llfourn> tipdbmp: "#|" is pretty under developed so I don't think we've documented it

[12:24] <llfourn> could be wrong

[12:25] <zengargoyle> tipdbmp: look in the synopses and cross your fingers.

[12:25] <tipdbmp> Right, okay then.

[12:25] <zengargoyle> there's at least one module that uses #| in a real world use case.

[12:26] <keylet> llfourn: $parsed_by_grammar<foo>.map(*.Str) works! thank you!

[12:27] *** pmurias left
[12:27] <zengargoyle> it was the GraphML module that somebody was recently presenting about.  used #| for the automatic descriptions....

[12:28] <llfourn> keylet: no worries :)

[12:28] *** xtreak left
[12:28] <zengargoyle> tipdbmp: make that Graph

[12:28] <zengargoyle> tipdbmp: make that GraphQL

[12:29] <zengargoyle> https://github.com/CurtTilmes/Perl6-GraphQL

[12:33] <tipdbmp> Why does a boolean argument get matched for an Int parameter with multi subs: http://sprunge.us/YhAS, is it because True/False are an enum values?

[12:33] <moritz> m: say True ~~ Int

[12:33] <camelia> rakudo-moar 14d757: OUTPUT: «True␤»

[12:33] <moritz> yes

[12:35] *** jjjack joined
[12:35] <tipdbmp> Perl 6 has native integers uint64, int32, etc, is Num a native float64? Can its bits be reinterpreted to and stored in a uint64?

[12:36] <moritz> num is native, Num is boxed

[12:36] <moritz> and I don't know if we support any kind of reinterpretation; if so, it's somewhere in the nativecall code

[12:37] <tipdbmp> m: my num $x = 1.0; my uint64 $y = uint64($x); say $y;

[12:37] <camelia> rakudo-moar 14d757: OUTPUT: «This type cannot unbox to a native number: P6opaque, Rat␤  in block <unit> at <tmp> line 1␤␤»

[12:37] <moritz> needs 1.0e0

[12:37] <moritz> 1.0 is a Rat

[12:38] <tipdbmp> m: my num $x = 1.0e0; my uint64 $y = uint64($x); say $y;

[12:38] <camelia> rakudo-moar 14d757: OUTPUT: «Cannot invoke this object (REPR: P6int; uint64)␤  in block <unit> at <tmp> line 1␤␤»

[12:38] <moritz> m: my num $x = 1.0e0; my uint64 $y = $x; say $y

[12:38] <camelia> rakudo-moar 14d757: OUTPUT: «1␤»

[12:38] <moritz> that's just coercion

[12:39] <tipdbmp> What does the "REPR: P6int; uint64" message mean?

[12:40] <moritz> it can't invoke an object, and the object it complains about has the representation P6int, and is of type uint64

[12:42] *** mcmillhj joined
[12:43] <tipdbmp> m: use NativeCall; my num $x = 1.0e0; my uint64 $y = nativecast(uint64, $x);

[12:43] <camelia> rakudo-moar 14d757: OUTPUT: «Native call expected return type with CPointer, CStruct, CArray, or VMArray representation, but got a P6opaque (Num)␤  in sub nativecast at /home/camelia/rakudo-m-inst-1/share/perl6/sources/24DD121B5B4774C04A7084827BFAD92199756E03 (NativeCall) line 417…»

[12:45] <tipdbmp> Can NativeCall::nativecast be used to reinterpret num to uint64?

[12:51] <tipdbmp> Is SETTING the same as CORE?

[12:55] <tipdbmp> What is the variable $¢?

[12:59] <araraloren> `The current match state is kept in the regex's $¢ variable which will eventually get bound to the user's $/ variable when the match completes. `

[12:59] <araraloren> http://design.perl6.org/S05.html#Match_objects

[13:01] * zengargoyle woot! got one module to pass todo's pedantism

[13:02] <zengargoyle> is logotype still going to be a *thing*?

[13:05] <tipdbmp> araraloren, thank you.

[13:07] *** drrho left
[13:09] *** jjjack left
[13:13] *** mspo left
[13:17] <tipdbmp> Can the "#? condition", "#?endif" blocks be used with constants: constant foo = False; #? foo\n say 'A'; #?endif

[13:19] <moritz> tipdbmp: what are you doing?

[13:20] <moritz> that's only enabled in rakudo's source

[13:20] <moritz> not in regular Perl 6 code

[13:20] <moritz> see tools/build/gen-cat.nqp for that it understands

[13:21] <tipdbmp> Looking at some of the core modules and those blocks show up.

[13:24] *** drrho joined
[13:24] *** cyphase left
[13:25] <keylet> is it possible to insert content of any variable to $parsed<name> like $parsed<$foo>?

[13:25] <tadzik> {} is what you're looking for

[13:25] <araraloren> maybe you need $parsed{$foo} ?

[13:25] <tadzik> <> is just an autoquoting {}

[13:26] <araraloren> <> not support interplation

[13:26] <keylet> yes, it is just what I want! :)

[13:27] <timotimo> btw, cursor and match object have been unified and $/ and $𝕔 should now be the same thing

[13:27] <timotimo> huh what did i type there

[13:28] <timotimo> haha, that's not the combination of | and c i meant

[13:28] <timotimo> $¢ is the one

[13:29] <grondilu> m: subset NakedPair of Pair where !*.value.defined; multi infix:<+>(Real $, NakedPair $) { 0 }; say 1 + :a;

[13:29] <camelia> rakudo-moar 14d757: OUTPUT: «===SORRY!===␤Circularity detected in multi sub types for &infix:<+>␤»

[13:29] <grondilu> ^false positive imho

[13:29] *** cyphase joined
[13:29] *** kaare_ joined
[13:31] <grondilu> m: subset NakedPair of Pair where { .value === True }; sub foo(NakedPair $) { "ok" }; foo (:a)

[13:31] <camelia> rakudo-moar 14d757: ( no output )

[13:31] <grondilu> m: subset NakedPair of Pair where { .value === True }; sub foo(NakedPair $) { "ok" }; say foo (:a)

[13:31] <camelia> rakudo-moar 14d757: OUTPUT: «ok␤»

[13:32] <grondilu> m: subset NakedPair of Pair where { .value === True }; sub foo(NakedPair $) { "ok" }; say foo(:a)

[13:32] <camelia> rakudo-moar 14d757: OUTPUT: «Too few positionals passed; expected 1 argument but got 0␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[13:32] *** zakharyas joined
[13:32] *** tipdbmp left
[13:32] <grondilu> m: subset NakedPair of Pair where {.value === True}; multi infix:<+>(Real $, NakedPair $) { 0 }; say 1 + :a;

[13:32] <camelia> rakudo-moar 14d757: OUTPUT: «===SORRY!===␤Circularity detected in multi sub types for &infix:<+>␤»

[13:33] <grondilu> m: subset NakedPair of Pair where {.value === True}; multi infix:<+>(Real $, Pair $) { 0 }; say 1 + :a;

[13:33] <camelia> rakudo-moar 14d757: OUTPUT: «0␤»

[13:33] <grondilu> m: subset NakedPair of Pair where {.value === True}; multi infix:<+>(Real $, Pair $ where {.value ===True}) { 0 }; say 1 + :a;

[13:33] <camelia> rakudo-moar 14d757: OUTPUT: «===SORRY!===␤Circularity detected in multi sub types for &infix:<+>␤»

[13:33] <grondilu> m: multi infix:<+>(Real $, Pair $ where {.value ===True}) { 0 }; say 1 + :a;

[13:33] <camelia> rakudo-moar 14d757: OUTPUT: «===SORRY!===␤Circularity detected in multi sub types for &infix:<+>␤»

[13:34] <grondilu> m: multi prefix:<+>(Pair $ where {.value ===True}) { 0 }; say +:a;

[13:34] <camelia> rakudo-moar 14d757: OUTPUT: «0␤»

[13:35] *** lizmat left
[13:35] <grondilu> m: multi infix:<+>($, Pair $ where {.value ===True}) { 0 }; say 1 + :a;

[13:35] <camelia> rakudo-moar 14d757: OUTPUT: «0␤»

[13:39] <grondilu> FYI I'm working on something like:

[13:40] <grondilu> use Symbolic; say :a + :b;  # Plus[a,b]

[13:40] <grondilu> https://github.com/grondilu/Symbolic

[13:42] *** lizmat joined
[13:43] *** AlexDaniel left
[13:47] *** raschipi joined
[13:50] *** bwisti joined
[14:04] *** kaare_ left
[14:04] *** MilkmanDan left
[14:04] *** MilkmanDan joined
[14:06] *** kaare_ joined
[14:07] *** lizmat left
[14:11] *** kaare_ left
[14:11] *** kaare_ joined
[14:11] *** wamba joined
[14:13] *** cdg joined
[14:14] *** lizmat joined
[14:22] *** cdg left
[14:27] *** kaare_ left
[14:31] *** kaare_ joined
[14:42] *** kaare_ left
[14:42] *** domidumont joined
[14:43] *** kaare_ joined
[14:53] *** jonas2 left
[14:53] *** kaare_ left
[14:54] *** lowbro left
[14:56] *** AlexDaniel joined
[14:59] *** domidumont left
[14:59] *** kaare_ joined
[15:04] *** kaare__ joined
[15:04] *** kaare_ left
[15:10] *** zakharyas left
[15:18] *** g4 left
[15:18] *** wamba left
[15:19] *** espadrine joined
[15:20] *** Cabanossi left
[15:20] *** lizmat left
[15:21] *** vike joined
[15:22] *** Cabanossi joined
[15:22] *** AlexDaniel left
[15:24] *** AlexDaniel joined
[15:24] *** domidumont joined
[15:24] *** kurahaupo_ joined
[15:24] *** lizmat joined
[15:25] *** lizmat left
[15:28] *** lizmat joined
[15:31] *** AlexDani` joined
[15:32] *** cognominal left
[15:33] *** raiph joined
[15:33] *** AlexDaniel left
[15:33] <lucs> 'p6doc -l' shows many topics, but which one covers perl6 command line options?

[15:35] *** zakharyas joined
[15:36] *** khw joined
[15:40] <timotimo> i'm not sure we have one for that

[15:41] *** AlexDani` is now known as AlexDaniel

[15:41] <araraloren> What's the name of this command line option style `--/x`? # this disable command line option x 

[15:42] <araraloren> Such as `-abcd` has a name gnu style, as I know.

[15:44] *** curan left
[15:44] <raschipi> --x-but-long is GNU style, -x-but-long is X style, -x is traditional Unix styel

[15:45] <perlawhirl> bisect: say DateTime.now.second.WHAT

[15:45] <bisectable6> perlawhirl, Bisecting by output (old=2015.12 new=14d7571) because on both starting points the exit code is 0

[15:45] <raschipi> --\x to deactivate option x I never saw

[15:46] <raschipi> sorry, --/x

[15:46] <araraloren> raschipi thanks, how about `-abcd`, It mean enable `a b c d` option

[15:46] <raschipi> Joining flags like that is traditional UNIX style.

[15:46] <raschipi> Long options was a GNU invention

[15:47] *** pmurias joined
[15:47] <pmurias> hi

[15:47] <araraloren> Oh, very thanks raschipi 

[15:49] *** bisectable6 left
[15:50] <raschipi> BSD programs most times still don't have long options: http://www.unix.com/man-page/FreeBSD/1/ls/

[15:51] <araraloren> Yean, I know a style called bsd style **ps** supported

[15:51] *** bisectable6 joined
[15:51] *** ChanServ sets mode: +v bisectable6

[15:52] <lucs> timotimo: Looks that way, eh.

[15:54] <raschipi> Yeah, ps BSD style doesn't have any - (ps aux)

[15:56] *** dolmen joined
[15:56] <raschipi> ps aux is roughly equivalent to ps -ely using Unix syntax

[15:56] *** abraxxa left
[15:58] <araraloren> raschipi, em, yeah 

[15:58] <araraloren> I found a article about linux option style :http://www.catb.org/esr/writings/taoup/html/ch10s05.html

[15:58] <araraloren> s/a/an/

[15:59] <araraloren> Thanks again for you kind help . Good night 

[15:59] *** araraloren left
[16:00] <keylet_> can I do "next" for more than one step in a loop ?

[16:00] <raschipi> keylet_: just do next multiple times

[16:00] <timotimo> but you'll have to keep a bit of state around

[16:01] <timotimo> since next will immediately jump to the beginnig of the loop body

[16:01] <timotimo> so you can't "next; next;"

[16:03] *** dolmen left
[16:03] *** dolmen_ joined
[16:04] *** firstdayonthejob joined
[16:04] *** dolmen_ left
[16:04] *** dolmen joined
[16:05] *** Cabanossi left
[16:06] *** firstdayonthejob left
[16:06] *** benchable6 left
[16:07] *** Cabanossi joined
[16:07] *** benchable6 joined
[16:07] *** ChanServ sets mode: +v benchable6

[16:09] *** domidumont left
[16:10] *** sjn left
[16:11] *** dogbert17 left
[16:13] *** srandon111 left
[16:14] *** eveo joined
[16:14] <eveo> perlawhirl: this is the commit for the Date thing: https://github.com/rakudo/rakudo/commit/74ab0526f2718e44c8d6331c33d29a46bb6891bf

[16:14] *** cdg joined
[16:14] <eveo> .ask lizmat this commit change the time of DateTime.second from a Rat to Num. Does it matter? https://github.com/rakudo/rakudo/commit/74ab0526f2718e44c8d6331c33d29a46bb6891bf

[16:14] <yoleaux> eveo: I'll pass your message to lizmat.

[16:15] * zengargoyle having Solaris flashbacks and remembering use '/usr/ucb/ps' because 'ps augxww' is so ingrained.

[16:16] *** cdg_ joined
[16:16] *** cdg left
[16:18] *** sjn joined
[16:18] <eveo> zengargoyle: FWIW, the speedups you see weekly often are paid for by a significant loss in readability (and subsequently maintability and accessbility): https://github.com/rakudo/rakudo/commit/c6fd7361d24c38176576a81cd01e438474fcbb8b

[16:18] *** cdg joined
[16:19] * zengargoyle is also not sure that MAIN auto option stuff will ever catch on.  it's so different than any other option convention.

[16:19] *** BenGoldberg joined
[16:19] <zengargoyle> eveo: yeah, i know.  there's trade-offs to be made.

[16:19] <mst> zengargoyle: how so different?

[16:21] *** cdg_ left
[16:22] <zengargoyle> mst:  --\opt -abc bundling mixing --arg non-arg non-arg --arg

[16:23] <mst> zengargoyle: bundling would be nice, mixing options and arguments generally isn't

[16:23] <mst> there's plenty of things I use that require options first

[16:23] <zengargoyle> i love adding a -l or -d to the end of a `ls` command

[16:24] <zengargoyle> or a -n and then up-arrow backspace to really run the command.

[16:24] <mst> the key thing is that prohibiting mixing makes subcommand interfaces possible

[16:24] *** zakharyas left
[16:24] <mst> there's more than one way to do it ... but sometimes consistency is a good thing too

[16:26] <zengargoyle> yeah, there are a few subcommand type things that only take args before the command and some that don't, or behave differently depending on whether the arg is global to the app or specific to the sub-command.  it's all trade-off somewhere.

[16:26] <raschipi> Arbitrary mixing of flags and arguments is also a GNU invention. Anyone that supports it is probably using their GetOpt lib.

[16:27] <raschipi> is there bindings to getopt already?

[16:27] <zengargoyle> true, but can be said of anyone using some other getopt lib.  

[16:28] <zengargoyle> i saw a Getopt::Tiny or something, haven't really looked at it yet.

[16:28] <eveo> m: multi infix:<+>(Real, Pair $ where {.value === True}) { 42 }; say 1 + :a;

[16:28] <camelia> rakudo-moar 14d757: OUTPUT: «===SORRY!===␤Circularity detected in multi sub types for &infix:<+>␤»

[16:28] <eveo> m: multi infix:<+>(Real where {True}, Pair $ where {.value === True}) { 42 }; say 1 + :a;

[16:28] <camelia> rakudo-moar 14d757: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot do non-typename cases of type_constraint yet␤at <tmp>:1␤------> 3multi infix:<+>(Real where {True}7⏏5, Pair $ where {.value === True}) { 42 }␤    expecting any of:␤        infix␤    …»

[16:28] <eveo> m: multi infix:<+>(Real $ where {True}, Pair $ where {.value === True}) { 42 }; say 1 + :a;

[16:28] <camelia> rakudo-moar 14d757: OUTPUT: «===SORRY!===␤Circularity detected in multi sub types for &infix:<+>␤»

[16:28] <eveo> m: multi infix:<+>(Int, Pair $ where {.value === True}) { 42 }; say 1 + :a;

[16:28] <camelia> rakudo-moar 14d757: OUTPUT: «42␤»

[16:30] *** xzhao left
[16:30] *** zakharyas joined
[16:30] <eveo> grondilu: filed as https://rt.perl.org/Ticket/Display.html?id=131574

[16:30] *** xzhao joined
[16:30] <zengargoyle> i tend to think of speedups like the '.trans' method which was once the most basic CS101 implementation possible, then later replaced with the CS301 implementation.  a bit more work, slower for extremly simple cases, much faster for any non-simple case.

[16:33] *** pilne joined
[16:37] * zengargoyle also just likes Getopt::Long and Getopt::Long::Descriptive because they seem to do 99% of everything i want to do.  i guess there will be a p6 one eventually.

[16:38] <eveo> Go and make it

[16:38] <raschipi> zengargoyle: The best way to go about it would be to write nativecall bindings to GNU GetOpt to garantee compatible behavior, I think

[16:38] <eveo> buggable: eco getopt

[16:38] <buggable> eveo, Found 6 results: Getopt::Tiny, Getopt::Long, Getopt::Type, Getopt::Kinoko, Getopt::Std. See https://modules.perl6.org/#q=getopt

[16:38] *** eveo left
[16:39] <zengargoyle> cool, there are many more now.

[16:40] <zengargoyle> buggabl: eco pod2usage

[16:41] <raschipi> buggable: eco pod2usage

[16:41] <buggable> raschipi, Nothing found

[16:42] <zengargoyle> doh, :)  GLD and pod2usage were about the only things that made my scripts useable. :)

[16:42] *** robertle joined
[16:44] <zengargoyle> --help and --man gave the satisfaction of saying "did you try --help? or read --man?" and the impetus to write the docs in the first place.

[16:45] *** alimon left
[16:46] <zengargoyle> sorta looks like there aren't many users of the 'logotype' feature.

[16:46] <perlawhirl> .tell lizmat re: eveo's msg... i think the real question is, should *.seconds type be consistent, eg: ( DateTime.new('2012-02-29T12:34:56Z'), DateTime.now ).map( *.second.^name )

[16:46] <yoleaux> perlawhirl: I'll pass your message to lizmat.

[16:47] <Geth> ¦ doc: eec88a1fc9 | (Jan-Olof Hendig)++ | doc/Type/Supply.pod6

[16:47] <Geth> ¦ doc: Added some docs to Supply.produce

[16:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/eec88a1fc9

[16:47] <Geth> ¦ doc: 67c87296ae | (Jan-Olof Hendig)++ | doc/Type/Supply.pod6

[16:47] <Geth> ¦ doc: Added examples to produce and reduce

[16:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/67c87296ae

[16:47] *** domidumont joined
[16:48] *** ChoHag joined
[16:49] *** curan joined
[16:50] <keylet_> I just noticed this book campaign 

[16:50] <keylet_> https://www.indiegogo.com/projects/book-web-application-development-in-perl-6-website--2#/updates

[16:51] <keylet_> if somebody wants to help this man to make the book

[16:53] <raschipi> Everyone is pretty excited for that book already, thanks for the help. lizmat and assossiates donated $1000 for example

[16:54] *** dakkar left
[16:54] <keylet_> I've supported it too. It's a great idea! :)

[17:02] *** pmurias left
[17:04] *** ChoHag left
[17:12] *** alimon joined
[17:13] *** espadrine left
[17:16] *** |oLa| left
[17:18] * AlexDaniel slaps bisectable6

[17:20] <AlexDaniel> bisect: say DateTime.now.second.WHAT

[17:20] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=14d7571) because on both starting points the exit code is 0

[17:20] <raschipi> huggable: hug bisectable6

[17:20] * huggable hugs bisectable6

[17:20] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/1a7d3f4f0510c3f543f2ffeaec8c5d03

[17:20] <bisectable6> AlexDaniel, (2015-12-29) https://github.com/rakudo/rakudo/commit/74ab0526f2718e44c8d6331c33d29a46bb6891bf

[17:20] *** Cabanossi left
[17:21] <AlexDaniel> (the reason why it died the first time seems to be https://github.com/perl6/whateverable/issues/148)

[17:22] *** Cabanossi joined
[17:25] *** zakharyas left
[17:30] <AlexDaniel> committable6: 74ab0526f27^,74ab0526f27 say DateTime.now.second.WHAT

[17:30] <committable6> AlexDaniel, ¦74ab0526f27^: «(Rat)» ¦74ab052: «(Num)»

[17:30] <AlexDaniel> that's interesting :)

[17:34] *** raschipi left
[17:45] *** setty1 joined
[17:51] *** AlexDaniel left
[17:52] *** AlexDaniel joined
[17:55] *** travis-ci joined
[17:55] <travis-ci> Doc build errored. Jan-Olof Hendig 'Added examples to produce and reduce'

[17:55] <travis-ci> https://travis-ci.org/perl6/doc/builds/242913554 https://github.com/perl6/doc/compare/7397c9fa74f6...67c87296aed6

[17:55] *** travis-ci left
[17:55] <keylet_> if I have a variable $foo, how can I replace the content of $foo (should be matched literally) in $bar with "xyz" ?

[17:55] <keylet_> will $bar ~~ s/$foo/xyz/ work ?

[18:00] <jnthn> keylet_: The $foo will be treated as a literal there, yes

[18:00] <jnthn> It will only replace the first occurence; use s:g to replace all

[18:07] *** wamba joined
[18:10] <Geth> ¦ doc: e19bcc8137 | (Jan-Olof Hendig)++ | doc/Type/Supply.pod6

[18:10] <Geth> ¦ doc: More link and formatting fixes

[18:10] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e19bcc8137

[18:14] <keylet_> is there any equivalent to python's "pass" ?

[18:15] *** mr-fooba_ joined
[18:15] <perlpilot> pass is a no-op isn't it.  So ... don't do anything.

[18:16] <ttkp6> keylet_ - depending on context, you might want to use something like {}

[18:17] *** mr-foobar left
[18:18] <perlpilot> keylet_: why are you asking, exactly?  Do you think you need pass or are you just curious?

[18:19] <keylet_> just curious :)

[18:20] *** dogbert17 joined
[18:20] <jnthn> afaik, pass is needed for syntactic reasons, but Perl 6 syntax works quite a lot differently so doesn't need such a thing :)

[18:20] <perlpilot> pass is just a hack to get around the lack of block delimiters.

[18:21] <perlpilot> `while 1: pass`   doesn't work too well if you don't have `pass`  :)

[18:27] *** cyphase left
[18:31] *** xenu joined
[18:35] *** abraxxa joined
[18:40] *** andrzejk_ joined
[18:40] *** cyphase joined
[18:43] *** TeamBlast left
[18:45] *** grondilu left
[18:46] *** TeamBlast joined
[18:47] *** abraxxa left
[18:50] *** Cabanossi left
[18:50] <zengargoyle> hrm, module builds locally, fails on travis.

[18:51] *** cdg_ joined
[18:52] *** Cabanossi joined
[18:52] *** TEttinger joined
[18:54] <ugexe> are you using the same perl6 -v on both?

[18:55] *** cdg left
[18:55] <zengargoyle> well, 2017.05-84-hash here and 'latest' in travis ...

[18:56] <ugexe> cant draw any conclusion from that

[18:57] *** pecastro joined
[18:57] <zengargoyle> i do a --force and it then passes the auto prove phase......

[18:58] <zengargoyle> it recommended a --force-fetch, but that didn't help.

[18:58] <ugexe> right, and im asking your perl6 versions because Proc has changed in the last few days and would result in failures where they shouldnt

[18:58] <zengargoyle> https://travis-ci.org/zengargoyle/p6-Algorithm-Trie-libdatrie/builds/242955849

[18:59] <zengargoyle> not using proc.

[19:00] <ugexe> you were using zef in your last build

[19:00] <ugexe> zef uses proc

[19:00] <zengargoyle> on one previous --verbose build, it did the compile of the .so phase and failed.

[19:00] <ugexe> it fails in your current build too, it just doesn't exit because of the problem i mentioned

[19:01] <zengargoyle> yeah, switched to zef a few days ago and have been just fixing up META and other trivial things.  worked, then didn't today.

[19:01] *** travis-ci joined
[19:01] <travis-ci> Doc build errored. Jan-Olof Hendig 'More link and formatting fixes'

[19:01] <travis-ci> https://travis-ci.org/perl6/doc/builds/242943817 https://github.com/perl6/doc/compare/67c87296aed6...e19bcc8137b9

[19:01] *** travis-ci left
[19:01] <ugexe> yes, its rakudo bug

[19:01] <zengargoyle> cool.

[19:01] *** abraxxa joined
[19:01] * zengargoyle always runs into somwthing weird and freaks out for a bit.

[19:02] *** |oLa| joined
[19:03] *** cdg joined
[19:03] <zengargoyle> i'll leave it in your or other's hands and assume it will work sometime later. :)

[19:05] <ugexe> yeah hopefully by the end of today

[19:05] *** cdg_ left
[19:05] <zengargoyle> ugexe++ thanks for piece of mind. :)

[19:13] *** TeamBlast left
[19:17] *** TeamBlast joined
[19:17] *** abraxxa left
[19:19] <nebuchadnezzar> Hello,

[19:20] <timotimo> hello>

[19:20] <perlpilot> .oO( is it me you're looking for? )

[19:22] <nebuchadnezzar> I'm looking into precompilation with Debian, there is some discussion about “should we provide the precompiled files in packages” or “should we precompile at installation time”, to take an enlightened decision I need some information about CompUnit systems, I think I remember some blog post explaining the system but can not find them anymore, do you have links?

[19:23] <nebuchadnezzar> one of the question is: “must we precompile in correct dependency order or does the precompilation system walk the reverse dependency to precompile them before the current module?”

[19:29] <timotimo> did you look at the CUR thing that nine has been working on for this very purpose?

[19:29] <timotimo> Staging i think it's called?

[19:31] <nebuchadnezzar> timotimo: you mean https://github.com/rakudo/rakudo/blob/nom/tools/install-dist.pl?

[19:31] <timotimo> perhaps

[19:34] <nebuchadnezzar> If Debian choose to compile at installation time (which seems to be the way it's going) I need a little more than installing. My plan is to extend the install-dist.pl to handle: removing one distribution, removing all precompiled files for a $*PERL.compiler.id (the PrecompilationStore::File has the code for this), bulding all distribution for a $*PERL.compiler.id

[19:34] *** alimon left
[19:35] <nebuchadnezzar> but I need to better understand how things are working to think clearly about it

[19:35] *** alimon joined
[19:36] <nebuchadnezzar> I can find the CompUnit blog post on pl6anet.org nor perl6.party (nor duckduckgo) :-/

[19:36] *** domidumont left
[19:41] *** andrzejk_ left
[19:45] *** andrzejk_ joined
[19:50] *** Cabanossi left
[19:52] *** Cabanossi joined
[19:52] *** stmuk_ joined
[19:53] *** hythm left
[19:54] *** stmuk left
[19:57] <zengargoyle> "precompile at installation time" seems to contradict "bulding all distribution for a $*PERL.compiler.id"

[20:00] <nebuchadnezzar> zengargoyle: I mean, to update rakudo/NQP/MoarVM: 1) remove all precompiled files, 2) remove old rakudo/NQP/MoarVM packages, 3) install new rakudo/NQP/MoarVM packages, 4) precompile all installed distribution

[20:01] *** hythm joined
[20:02] <zengargoyle> wouldn't 4) just be re-install previously installed packages?  assuming packages get precompiled on installation.

[20:03] <nebuchadnezzar> zengargoyle: no, packages of distributions only contain sources, no need to reinstall them, by the way, it's how emacs,python and some other packages are handled

[20:03] <zengargoyle> i think i get it, just remove old-precomp, and force a recomp after installing new rakudo/moar.

[20:04] <nebuchadnezzar> that's right

[20:08] <zengargoyle> that depends on the source that's in the REPO not being tied to the rakudo version that it was originally installed under.  and just the precomp files are tied to the rakudo version.

[20:10] * zengargoyle not sure if source bits of repo are independent of rakudo that installed them.  /rakudo/package/source/precomp or /package/source , /rakudo/source/precomp

[20:12] *** alimon left
[20:13] <zengargoyle> hopefully it's possible, i dislike having to re-install modules on rakudo upgrade myself :)

[20:13] <keylet_> I use two tokens and the first token captures some substrings the second should capture

[20:13] <keylet_> can I make them lazy, so the first would match only substrings the second doesn't match anyway?

[20:15] <moritz> yes

[20:16] <keylet_> how can I do this?

[20:16] <keylet_> <foo>+? <bar>

[20:17] <keylet_> ?

[20:18] <zengargoyle> m: my token A { fo? }; my token B { o* }; say 'fooooo' ~~ /<A><B>/

[20:18] <camelia> rakudo-moar 14d757: OUTPUT: «｢fooooo｣␤ A => ｢fo｣␤ B => ｢oooo｣␤»

[20:18] <keylet_> and if I use general quantifiers?

[20:21] <zengargoyle> it's probably a ?  which tends to mean match as few as possible.

[20:21] *** Cabanossi left
[20:22] *** AndroUser2 joined
[20:22] <zengargoyle> do you have a particular example?

[20:22] *** Cabanossi joined
[20:23] *** troys joined
[20:24] *** andrzejk_ left
[20:25] <AndroUser2> m: my token A { f o ** 1^..* }; my token B { o+  g }; say 'fooooooooog' ~~ /<A><B>/;

[20:25] <camelia> rakudo-moar 14d757: OUTPUT: «Potential difficulties:␤    Space is not significant here; please use quotes or :s (:sigspace) modifier (or, to suppress this warning, omit the space, or otherwise change the spacing)␤    at <tmp>:1␤    ------> 3my token A { f7⏏5 o ** 1^..* };…»

[20:25] <AndroUser2> like this

[20:26] <AndroUser2> AndroUser2 == keylet_

[20:26] <moritz> for the genral quantifier, the ? goes after the **

[20:27] <moritz> m: say 'fooo' ~~ /f o**?2..10/

[20:27] <camelia> rakudo-moar 14d757: OUTPUT: «Potential difficulties:␤    Space is not significant here; please use quotes or :s (:sigspace) modifier (or, to suppress this warning, omit the space, or otherwise change the spacing)␤    at <tmp>:1␤    ------> 3say 'fooo' ~~ /f7⏏5 o**?2..10/…»

[20:27] <moritz> m: say 'fooo' ~~ /fo**?2..10/

[20:27] <camelia> rakudo-moar 14d757: OUTPUT: «｢foo｣␤»

[20:27] <moritz> I find that warning annoying

[20:27] <AndroUser2> me too :)

[20:27] <moritz> I want to put the space in tehre to make clear it's only the o that's quantified

[20:28] *** alimon joined
[20:28] <zengargoyle> and that would grow from 2 if it was needed to fulfil the full match right.

[20:28] <geekosaur> but spaces don't do grouping in regexes

[20:28] *** MasterDuke joined
[20:29] <moritz> they don't, but they can be used to emphasize

[20:29] <zengargoyle> say 'fooo' ~~ /fo**?2..10 $/

[20:29] <AndroUser2> I don't get warnings when using grammars, noy single tokens

[20:29] <evalable6> zengargoyle, rakudo-moar 14d757131: OUTPUT: «｢fooo｣»

[20:29] <moritz> just like I can write 1 + 2**31

[20:29] <AndroUser2> * not

[20:30] <AndroUser2> m: my token A { fo **? 1^..* }; my token B { o+g }; say 'fooooooooog' ~~ /<A><B>/;

[20:30] <camelia> rakudo-moar 14d757: OUTPUT: «｢fooooooooog｣␤ A => ｢foo｣␤ B => ｢ooooooog｣␤»

[20:32] <AndroUser2> moritz, zengargoyle : thank you. unfortunately, there are no instructions for making general quantifiers frugal

[20:32] <AndroUser2> in perl6 official website

[20:33] <moritz> AndroUser2: then submit a patch that adds it

[20:33] <zengargoyle> moritz++ i'd have to have guessed until it worked. :)

[20:33] <moritz> FWIW, I'm considering writing a book on p6 regexes / grammars

[20:34] <moritz> and one option I'm considering is self-publishing, with the promise that if I make $X amount off it in the first two years, I'll open-source it

[20:34] <moritz> or something like that

[20:35] <moritz> (other options I'm considering are traditional publishing, or a p6 edition of Mastering Regular Expressions)

[20:39] <zengargoyle> i'll proofread :P

[20:40] <moritz> zengargoyle: /msg me an ssh pubkey

[20:40] <zengargoyle> i'm really good at getting confused ar being a pedantic PITA. :)

[20:41] <moritz> wc says 4k words, so not too much there yet

[20:41] *** AndroUser2 left
[20:42] *** AndroUser2 joined
[20:45] <Geth> ¦ doc: prodotiscus++ created pull request #1379: + frugal matching for general quantifiers

[20:45] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/1379

[20:47] <Geth> ¦ doc: 9dbb4259af | (Fyodor Sizov)++ (committed by Moritz Lenz) | doc/Language/regexes.pod6

[20:47] <Geth> ¦ doc: + frugal matching for general quantifiers

[20:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9dbb4259af

[20:48] <moritz> wow, that actually worked! :-)

[20:48] <moritz> (asking for a PR, I mean)

[20:49] <zengargoyle> heh

[20:50] <zengargoyle> well volunteereded

[20:51] * moritz -> SIGSLEEP

[20:55] <japhb> I like the idea of people being hit with SIGSLEEP.  :-)

[20:55] *** zengargoyle left
[20:56] *** zengargoyle joined
[20:56] * zengargoyle doesn't seem to know how to close a msg window :P

[20:57] *** ChoHag joined
[21:06] *** kanhu joined
[21:06] *** kanhu left
[21:07] *** mcmillhj left
[21:15] *** alimon left
[21:16] *** perlpilot left
[21:17] *** |oLa| left
[21:25] *** labster joined
[21:27] *** ChoHag left
[21:28] *** xenu left
[21:29] *** nebuchadnezzar left
[21:30] *** |oLa| joined
[21:32] *** mcmillhj joined
[21:32] *** nebuchadnezzar joined
[21:34] *** AndroUser2 left
[21:34] *** Cabanossi left
[21:34] *** AndroUser2 joined
[21:36] *** |oLa| left
[21:37] *** Cabanossi joined
[21:37] *** zakharyas joined
[21:40] *** cpage_ left
[21:43] *** ChoHag joined
[21:45] *** AndroUser2 left
[21:47] *** khw left
[21:48] *** zakharyas left
[21:58] *** wamba left
[21:58] *** curan left
[22:01] *** rindolf left
[22:01] *** setty1 left
[22:03] *** mcmillhj left
[22:05] *** Cabanossi left
[22:07] *** Cabanossi joined
[22:10] *** mcmillhj joined
[22:14] *** mcmillhj left
[22:14] *** cpage_ joined
[22:16] *** colomon joined
[22:29] *** BenGoldberg left
[22:30] *** BenGoldberg joined
[22:40] *** BenGoldberg left
[22:41] *** mcmillhj joined
[22:46] *** mcmillhj left
[22:47] *** BenGoldberg joined
[22:48] *** troys is now known as troys_

[22:56] *** mcmillhj joined
[23:00] *** mcmillhj left
[23:03] *** cpage_ left
[23:04] *** dolmen_ joined
[23:05] *** dolmen left
[23:05] *** travis-ci joined
[23:05] <travis-ci> Doc build errored. Fyodor Sizov '+ frugal matching for general quantifiers'

[23:05] <travis-ci> https://travis-ci.org/perl6/doc/builds/243001894 https://github.com/perl6/doc/compare/e19bcc8137b9...9dbb4259affd

[23:05] *** travis-ci left
[23:09] *** cognominal joined
[23:10] *** ctilmes joined
[23:12] *** nadim left
[23:20] *** BenGoldberg left
[23:20] *** Cabanossi left
[23:20] *** ctilmes left
[23:22] *** Cabanossi joined
[23:24] *** eveo joined
[23:24] <eveo> zengargoyle: type /part

[23:31] *** cdg_ joined
[23:31] *** BenGoldberg joined
[23:34] *** colomon left
[23:35] *** cdg left
[23:35] *** cdg_ left
[23:36] *** AlexDaniel left
[23:37] *** nattefrost left
[23:37] *** AlexDaniel joined
[23:38] *** bioduds left
[23:47] *** araujo left
[23:54] *** araujo joined
[23:54] *** araujo left
[23:54] *** araujo joined
[23:56] *** dolmen_ left
