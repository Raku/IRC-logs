[00:11] *** andrzejku left
[00:11] *** andrzejku joined
[00:26] *** wamba left
[00:41] *** mcmillhj joined
[00:42] *** |oLa| left
[00:46] *** mcmillhj left
[00:54] *** |oLa| joined
[00:54] *** mcmillhj joined
[00:56] *** Cabanossi left
[00:57] *** cpage_ left
[00:57] <Zoffix> nadim: that file ain't opening. js fiddle is best for sharing web stuff... The blue border.. I'm guessing that's outline. use `outline: 0` in your CSS

[00:58] *** Cabanossi joined
[00:59] *** mcmillhj left
[01:01] *** cpage_ joined
[01:02] *** nadim left
[01:11] *** lookatme joined
[01:11] <lookatme> morning

[01:13] *** mcmillhj joined
[01:18] *** mcmillhj left
[01:25] *** mcmillhj joined
[01:29] *** mcmillhj left
[01:30] *** astj_ joined
[01:30] *** astj left
[01:36] *** AlexDaniel left
[01:37] *** AlexDaniel joined
[01:37] <timotimo> uh oh

[01:38] <timotimo> m: sub test { say "yo"; return 1; LEAVE say "this took " ~ (now - ENTER now) ~ " seconds" }; test()

[01:38] <camelia> rakudo-moar 1d9416: OUTPUT: «===SORRY!===␤Cannot reference undeclared local 'enter_result__1'␤»

[01:38] <timotimo> bisect: sub test { say "yo"; return 1; LEAVE say "this took " ~ (now - ENTER now) ~ " seconds" }; test()

[01:38] <bisectable6> timotimo, On both starting points (old=2015.12 new=1d94164) the exit code is 1 and the output is identical as well

[01:38] <bisectable6> timotimo, Output on both points: «===SORRY!===␤Cannot reference undeclared local 'enter_result__1'»

[01:38] <timotimo> fascinating! it has been broken for a real long time?

[01:38] <geekosaur> how often have people tried to use an ENTER phaser from a LEAVE phaser?

[01:40] *** Cabanossi left
[01:41] <timotimo> found it when doing this: https://www.reddit.com/r/perl/comments/6ojrau/perl_vs_clojure/

[01:42] <timotimo> i edited my answer to grab the starttime explicitly with a lexical variable

[01:42] <timotimo> apparently they never have, but i think it's a useful thing to be able to do

[01:42] <timotimo> and it's definitely a too-internalsy error that appears there :)

[01:43] *** Cabanossi joined
[01:46] *** ilbot3 left
[01:47] *** Geth_ left
[01:47] *** dudz left
[01:48] *** ilbot3 joined
[01:48] *** ChanServ sets mode: +v ilbot3

[01:50] *** cdg joined
[01:54] *** mcmillhj joined
[01:54] <timotimo> anyway, too tired to hunt it down now

[01:54] <timotimo> i'll go to bed

[01:54] <timotimo> have a good one!

[01:58] *** mcmillhj left
[01:58] *** BenGoldberg left
[02:02] <MasterDuke> .tell mr_ron i've found heaptrack (https://github.com/KDE/heaptrack) very useful for collecting and visualizing memory metrics

[02:02] <yoleaux> MasterDuke: I'll pass your message to mr_ron.

[02:07] *** noganex_ joined
[02:09] *** mcmillhj joined
[02:11] *** noganex left
[02:12] <AlexDaniel> m: role A { submethod TWEAK { say ‘a tweak’ } }; class B does A { submethod TWEAK { say ‘b tweak’; nextsame } }; say B.new

[02:12] <camelia> rakudo-moar 1d9416: OUTPUT: «b tweak␤B.new␤»

[02:12] <AlexDaniel> I don't have any real code where I would need this, but I'm still wondering, shouldn't it call TWEAK in A also?

[02:14] *** mcmillhj left
[02:14] <lookatme> submethod can not inherits, IDK

[02:15] <lookatme> m: role A { submethod TWEAK { say ‘a tweak’ } }; class B does A { submethod TWEAK { say ‘b tweak’; self.A::TWEAK(); } }; say B.new

[02:15] <camelia> rakudo-moar 1d9416: OUTPUT: «b tweak␤Cannot invoke this object (REPR: P6opaque; NQPMu)␤  in submethod TWEAK at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[02:22] <ugexe> seems like it, since

[02:22] <ugexe> m: role A { submethod BUILD { say ‘a build’ } }; class B does A { submethod BUILD { say ‘b build’; nextsame } }; say B.new

[02:22] <camelia> rakudo-moar 1d9416: OUTPUT: «b build␤B.new␤»

[02:23] <ugexe> maybe not

[02:25] *** mcmillhj joined
[02:30] *** mcmillhj left
[02:33] *** BenGoldberg joined
[02:41] *** Cabanossi left
[02:41] *** mcmillhj joined
[02:42] <Geth> ¦ ecosystem: 29178ded8a | (Fernando Correa de Oliveira)++ (committed using GitHub Web editor) | META.list

[02:42] <Geth> ¦ ecosystem: Adding 6pm to the ecosystem

[02:42] <Geth> ¦ ecosystem: 

[02:42] <Geth> ¦ ecosystem: https://github.com/FCO/6pm

[02:42] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/29178ded8a

[02:43] *** Cabanossi joined
[02:46] *** mcmillhj left
[02:51] *** mcmillhj joined
[02:51] *** cdg left
[02:56] *** mcmillhj left
[02:58] <Geth> ¦ ecosystem/add_object_container: ff6e8d4c95 | moznion++ | META.list

[02:58] <Geth> ¦ ecosystem/add_object_container: Add Object::Container

[02:58] <Geth> ¦ ecosystem/add_object_container: review: https://github.com/perl6/ecosystem/commit/ff6e8d4c95

[02:59] <Geth> ¦ ecosystem: moznion++ created pull request #353: Add Object::Container

[02:59] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/353

[03:04] *** gdonald left
[03:07] *** mcmillhj joined
[03:11] *** mcmillhj left
[03:13] <AlexDaniel> m: role A { method BUILD { say ‘a build’ } }; class B does A { method BUILD { say ‘b build’; nextsame } }; say B.new

[03:13] <camelia> rakudo-moar 1d9416: OUTPUT: «b build␤B.new␤»

[03:13] <AlexDaniel> anyway, I guess no way to make sure that TWEAK is called in A?

[03:14] <AlexDaniel> well, not make sure, but call at least

[03:16] <zengargoyle> hrm, what is the best 'polymult' to to with 'polymod'?

[03:16] *** gdonald joined
[03:17] *** g41j1n left
[03:19] <ugexe> m: role A { submethod TWEAK { say ‘a tweak’ } }; class B { submethod TWEAK { self does A; say ‘b tweak’; nextsame } }; say B.new

[03:19] <camelia> rakudo-moar 1d9416: OUTPUT: «a tweak␤b tweak␤B+{A}.new␤»

[03:23] *** mcmillhj joined
[03:24] <lookatme> m: role A { submethod TWEAK { say ‘a tweak’ } }; class B { submethod TWEAK { self does A; say ‘b tweak’; } }; say B.new

[03:24] <camelia> rakudo-moar 1d9416: OUTPUT: «a tweak␤b tweak␤B+{A}.new␤»

[03:25] <lookatme> As I thought, the **nextsame** is not working

[03:26] <lookatme> m: role A { submethod TWEAK { say ‘a tweak’ } }; class B does A { submethod TWEAK { nextwith(); say ‘b tweak’; } }; say B.new

[03:26] <camelia> rakudo-moar 1d9416: OUTPUT: «B.new␤»

[03:27] <lookatme> m: role A { submethod TWEAK { say ‘a tweak’ } }; class B does A { submethod TWEAK { callwith(); say ‘b tweak’; } }; say B.new

[03:27] <camelia> rakudo-moar 1d9416: OUTPUT: «b tweak␤B.new␤»

[03:27] <lookatme> m: role A { submethod TWEAK { say ‘a tweak’ } }; class B does A { }; say B.new

[03:27] <camelia> rakudo-moar 1d9416: OUTPUT: «a tweak␤B.new␤»

[03:27] <ugexe> looks like its working to me

[03:28] <zengargoyle> m: say (1*24*60*60 + 13*60*60 + 11*60 + 1).polymod(60,60,24).reverse.reduce({state @r = 24, 60, 60, 1; $^a * @r.shift() + $^b})

[03:28] <camelia> rakudo-moar 1d9416: OUTPUT: «133861␤»

[03:28] *** mcmillhj left
[03:29] <zengargoyle> m: say (1*24*60*60 + 13*60*60 + 11*60 + 1)

[03:29] <camelia> rakudo-moar 1d9416: OUTPUT: «133861␤»

[03:30] *** pilne left
[03:32] *** mcmillhj joined
[03:37] *** mcmillhj left
[03:41] *** Cabanossi left
[03:42] *** Cabanossi joined
[03:48] *** mcmillhj joined
[03:49] *** MasterDuke left
[03:56] *** mcmillhj left
[03:58] *** BenGoldberg left
[04:02] *** astj_ left
[04:02] *** astj joined
[04:07] *** astj left
[04:21] *** xtreak joined
[04:35] *** cpage_ left
[04:49] *** skids left
[04:54] *** Cabanossi left
[04:56] *** itaipu left
[04:57] *** Cabanossi joined
[04:57] *** mr-foobar left
[05:02] *** astj joined
[05:03] *** andrzejk_ joined
[05:09] *** Todd__ joined
[05:09] *** khw left
[05:09] <Todd__> anyone home?

[05:12] <Todd__> I am wonder if someone would help me with my `run` command.  My return string only return the first line or the command.  Would if help if I vpasted the test code?

[05:14] <zengargoyle> a paste would probably help.  but i haven't played with run at all....   somebody will eventually show up. :)

[05:14] <Todd__> http://vpaste.net/61qdd

[05:14] <tony-o> most likely to help with a paste

[05:15] *** b2gills left
[05:15] <zengargoyle> $proc.out.slurp-rest

[05:16] <zengargoyle> .get is a single 'readline' like thing.  it seems you are wanting the entire output.

[05:17] <Todd__> slurp (which always cracks me up) did the trick.  Thank you!

[05:17] <zengargoyle> yeah, i think they've sorta switched between .slurp-rest and .slurp while i wasn't looking :)

[05:18] <Todd__> Just out of curiousity, if I kept issuing .get's, whould I have read the rest of the lines one at a time?

[05:18] <zengargoyle> i would think so.

[05:18] <Todd__> Thank you!  Now to turn it into a module.  That at least I know how to do!

[05:19] <zengargoyle> .out should be an opened IO thing of some sort.

[05:19] *** ChoHag joined
[05:20] <zengargoyle> but i think the .slurp might auto .close the file when it's done....  with .get you have to notice somehow that you've run out of input and maybe .close the .out yourself...  i'm not really sure.

[05:20] *** Kaffe joined
[05:22] <zengargoyle> (run might auto .close it's files...)

[05:33] *** cpage_ joined
[05:40] <Todd__> What is this error code: my $x; my $y; $x, $y = RunNoShell( 'grep "Fedora release" /etc/redhat-release' ); 

[05:40] <Todd__> WARNINGS for /home/linuxutil/./RunNoShell.pl6: Useless use of $x in sink context (line 35)

[05:41] *** Cabanossi left
[05:41] <Todd__> if I do the "my" on the call line, I don't get the error

[05:41] *** Cabanossi joined
[05:43] <geekosaur> you need parentheses or you need something that recognizes them as part of the same expression (like my)

[05:43] <geekosaur> otherwise that reads as ($x), ($y = RunNoShell...)

[05:44] <Todd__> my $x, my $y = RunNoShell

[05:44] <Todd__> works, which is the confusion

[05:44] <Todd__> will try ()

[05:44] <geekosaur> I suspect that should be a warning tbh

[05:44] <geekosaur> because the second my is 'nested' inside the first

[05:44] <Todd__> ( $x, $y ) = RunNoShell

[05:45] <Todd__> worked  Thank you!

[05:47] <Todd__> Now what am I doing wrong.  Quoted command gives bad result and a return code of 256.  http://vpaste.net/ybQLb

[05:47] *** lookatme left
[05:48] *** lookatme joined
[05:51] <Geth> ¦ ecosystem: ff6e8d4c95 | moznion++ | META.list

[05:51] <Geth> ¦ ecosystem: Add Object::Container

[05:51] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/ff6e8d4c95

[05:51] <Geth> ¦ ecosystem: 5b1af706da | (Martin Barth)++ (committed using GitHub Web editor) | META.list

[05:51] <Geth> ¦ ecosystem: Merge pull request #353 from perl6/add_object_container

[05:51] <Geth> ¦ ecosystem: 

[05:51] <Geth> ¦ ecosystem: Add Object::Container

[05:51] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/5b1af706da

[05:51] *** andrzejk_ left
[05:56] <geekosaur> for one, you split on the quotes but you don't remove them

[05:56] <geekosaur> so grep is being asked to look for "Fedora release" *including* the quotes

[05:57] <Todd__> I tried removing the quotes from $RunArray[1] manually and it made no difference.

[05:57] <geekosaur> btw the "use strict" is not needed, it's strict by default

[05:58] <Todd__> The command does work with quotes from the command line

[05:58] <geekosaur> yes shells remove them

[05:58] <Todd__> should I leave it there to remind me?

[05:58] <geekosaur> you are explicitly avoiding the shell, so you have to emulate yourself any shell features like quoting or redirection

[05:58] <geekosaur> or ~ expansion

[06:00] *** ufobat joined
[06:01] *** nidum joined
[06:03] *** nidum left
[06:04] <Todd__> Whatever test I did removing the quotes must have been flawed because

[06:04] <Todd__> @RunArray.kv -> $index, $value { say "\$RunArray[$index] = <$value>"; };

[06:04] <Todd__> fixed it

[06:04] <Todd__> wrong line, sorry

[06:04] <Todd__> for @RunArray.kv -> $index, $value { @RunArray[$index] ~~ s:g/\"//; };    

[06:05] <Todd__> Thank you!

[06:07] <geekosaur> sorry, I just got done finding an appropriate alternative for a debian-based system and verifying removing the quotes worked

[06:07] <tony-o> Zoffix: use soft; didn't yield much but i have been able to reproduce the .wrap issue if the subs are in separate files

[06:09] *** Morfent joined
[06:09] *** nadim joined
[06:11] *** Cabanossi left
[06:11] <tony-o> https://gist.github.com/tony-o/99ea3ddec23deb556160d042e666576e

[06:11] *** Cabanossi joined
[06:12] <tony-o> ^ shows the Cannot invoke this object (REPR: Null; VMNull) issue 

[06:14] *** lizmat left
[06:16] <llfourn> tony-o: RT #125634

[06:16] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125634

[06:16] *** domidumont joined
[06:21] *** lizmat joined
[06:22] *** domidumont left
[06:23] *** lowbro joined
[06:23] *** lowbro left
[06:23] *** lowbro joined
[06:23] *** domidumont joined
[06:25] *** lowbro left
[06:25] *** lowbro joined
[06:25] *** lowbro left
[06:25] *** lowbro joined
[06:30] *** lizmat left
[06:30] *** |oLa| left
[06:31] <Todd__> where would the best place be to go for perl 5 help?  Perl Monks?

[06:34] *** parv joined
[06:35] <lookatme> #perl ?

[06:35] <Todd__> I don't under stand

[06:35] <AlexDaniel> Todd__: there is #perl channel

[06:36] <AlexDaniel> Geth: hello?

[06:36] <Todd__> that I did not know.  Do you know its url?

[06:37] <Todd__> oh.  It is jsut https://webchat.freenode.net/?channels=#perl

[06:37] <AlexDaniel> Todd__: you're currently on #perl6 channel on freenode. You need #perl on freenode

[06:37] <AlexDaniel> yes

[06:37] <Todd__> Thank you!

[06:38] <lookatme> I wonder is `/join #perl` working on the web client

[06:38] *** TimToady left
[06:39] <AlexDaniel> .tell Zoffix hm, github just said “We couldn’t deliver this payload: Service Timeout” for Geth hooks

[06:39] <yoleaux> AlexDaniel: I'll pass your message to Zoffix.

[06:40] *** TimToady joined
[06:42] *** mr-foobar joined
[06:52] *** lizmat joined
[06:59] *** lizmat left
[06:59] *** mr-foobar left
[07:00] <parv> lookatme, yup that works. also, one can specify comma-separated multiple channels on the initial screen (with captcha) 

[07:01] <lookatme> parv, oh thanks

[07:01] <parv> hth

[07:02] * parv .oO( wait, both "happy to help" and "hope that helps" reduce to "hth" )

[07:03] *** mr-foobar joined
[07:03] *** lizmat joined
[07:07] <AlexDaniel> .tell moritz it seems that perl6-all-modules (https://github.com/moritz/perl6-all-modules/commits/master) is no longer being update. Can you fix that? I'm using it for greppable6

[07:07] <yoleaux> AlexDaniel: I'll pass your message to moritz.

[07:07] <AlexDaniel> updateD dammit

[07:07] *** wamba joined
[07:10] <AlexDaniel> oh wait

[07:10] <AlexDaniel> is it yet another brain fart of mine?

[07:11] <AlexDaniel> no, it's not, ok

[07:13] *** Todd__ left
[07:13] *** mr-foobar left
[07:14] *** abraxxa joined
[07:15] *** lizmat left
[07:15] <moritz> ===SORRY!===

[07:15] <moritz> Could not find JSON::Tiny at line 2 in:

[07:15] <yoleaux> 07:07Z <AlexDaniel> moritz: it seems that perl6-all-modules (https://github.com/moritz/perl6-all-modules/commits/master) is no longer being update. Can you fix that? I'm using it for greppable6

[07:15] <moritz> that's why it doesn't update

[07:16] <moritz> sounds fixable :-)

[07:22] *** Manifest0 left
[07:23] *** mr-foobar joined
[07:26] *** darutoko joined
[07:28] *** Manifest0 joined
[07:29] *** pecastro left
[07:31] *** pecastro joined
[07:33] *** lizmat joined
[07:44] *** lizmat left
[07:45] *** xtreak left
[07:45] *** mr-foobar left
[07:46] *** Morfent left
[07:48] *** xtreak joined
[07:49] *** mr-foobar joined
[07:55] *** Cabanossi left
[07:56] *** Cabanossi joined
[07:58] <AlexDaniel> .seen tadzik

[07:58] <yoleaux> I saw tadzik 10 Jul 2017 12:05Z in #perl6-dev: <tadzik> ah, I guess systemd does that too :)

[07:58] <AlexDaniel> .tell tadzic plz https://github.com/tadzik/perl6-Config-INI/pull/14

[07:58] <yoleaux> AlexDaniel: I'll pass your message to tadzic.

[07:58] *** domidumont left
[07:58] <AlexDaniel> .tell tadzik plz https://github.com/tadzik/perl6-Config-INI/pull/14

[07:58] <yoleaux> AlexDaniel: I'll pass your message to tadzik.

[07:59] *** domidumont joined
[08:00] *** rindolf joined
[08:12] *** zakharyas joined
[08:15] *** mr-foobar left
[08:18] *** zakharyas left
[08:20] *** lizmat joined
[08:20] *** mr-foobar joined
[08:21] *** parvx joined
[08:23] *** zakharyas joined
[08:23] *** parv left
[08:23] <nadim> .tell Zoffix outline did the trick, thanks

[08:23] <yoleaux> nadim: I'll pass your message to Zoffix.

[08:26] <Zoffix> .

[08:26] <yoleaux> 06:39Z <AlexDaniel> Zoffix: hm, github just said “We couldn’t deliver this payload: Service Timeout” for Geth hooks

[08:26] <nadim> timotimo:  I tink you were the one who wanted to be able to show a data structure on the terminal/curses while running other code, right?

[08:26] <yoleaux> 08:23Z <nadim> Zoffix: outline did the trick, thanks

[08:27] <Zoffix> AlexDaniel: which geth?

[08:27] <AlexDaniel> Zoffix: oh…

[08:28] <Geth> ¦ whateverable: 56480841fb | (Aleks-Daniel Jakimenko-Aleksejev)++ | Greppable.p6

[08:28] <Geth> ¦ whateverable: Give versioned results instead assuming of master

[08:28] <Geth> ¦ whateverable: 

[08:28] <Geth> ¦ whateverable: Resolves issue #173

[08:28] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/56480841fb

[08:28] <Geth> ¦ whateverable: 5c87b7ae5d | (Aleks-Daniel Jakimenko-Aleksejev)++ | Whateverable.pm6

[08:28] <Geth> ¦ whateverable: Do not upload untracked files

[08:28] <Geth> ¦ whateverable: 

[08:28] <Geth> ¦ whateverable: I don't think it matters much, but better safe than sorry.

[08:28] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/5c87b7ae5d

[08:28] *** Geth_ joined
[08:28] *** ChanServ sets mode: +v Geth_

[08:30] <AlexDaniel> Zoffix: honestly, I have no idea

[08:30] <AlexDaniel> …

[08:30] * AlexDaniel just fixed the message incorrectly…

[08:31] <Geth> ¦ whateverable: 8070b7f922 | (Aleks-Daniel Jakimenko-Aleksejev)++ | Greppable.p6

[08:31] <Geth> ¦ whateverable: Give versioned results instead of assuming master

[08:31] <Geth> ¦ whateverable: 

[08:31] <Geth> ¦ whateverable: Resolves issue #173

[08:31] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/8070b7f922

[08:31] <Geth> ¦ whateverable: f371c765b9 | (Aleks-Daniel Jakimenko-Aleksejev)++ | Whateverable.pm6

[08:31] <Geth> ¦ whateverable: Do not upload untracked files

[08:31] <Geth> ¦ whateverable: 

[08:31] <Geth> ¦ whateverable: I don't think it matters much, but better safe than sorry.

[08:31] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/f371c765b9

[08:32] <Zoffix> huggable: geth

[08:32] <huggable> Zoffix, Set geth report URL (select application/json and send me everything): http://geth.niner.name:8888/?chan=#perl6-dev

[08:33] <Zoffix> AlexDaniel: ^ that's what it should be. The other geth is just here for anything that didn't change the URL yet

[08:35] <AlexDaniel> oh, ok

[08:44] *** mr-foobar left
[08:46] *** mr-foobar joined
[08:55] *** Cabanossi left
[08:57] *** Cabanossi joined
[09:12] *** eyck left
[09:12] *** parvx left
[09:12] *** mcmillhj joined
[09:15] *** mr-foobar left
[09:16] *** mr-foobar joined
[09:17] *** mcmillhj left
[09:18] <Juerd> I'd like to do a colored prompt with tab completion. Linenoise borks with ansi escapes in the prompt, Readline can do those but I can't find any documentation or examples for tab completion. Any suggestions?

[09:19] <lookatme> lib Readline has official document.

[09:20] <Juerd> Tab completion is undocumented at https://github.com/drforr/perl6-readline/blob/master/lib/Readline.pm

[09:22] <geekosaur> I expect you need to refer to the C readline docs

[09:22] *** melezhik left
[09:23] <lookatme> yeah, that what I mean

[09:23] <lookatme> s/that/that's/

[09:23] <Juerd> Sure, but I have no idea how to translate what I read in the C readline docs to Perl 6

[09:25] *** cuonglm joined
[09:26] <geekosaur> https://github.com/drforr/perl6-readline/blob/master/lib/Readline.pm#L616

[09:26] <Juerd> .readline is a blocking method

[09:27] <Juerd> I have to install a callback, somehow. I don't know how.

[09:27] <Juerd> I've used readline in C and Perl 5

[09:29] *** mcmillhj joined
[09:30] <Juerd> I've tried to subclass, I've tried to look for compentry or completion_entry, I've looked for alternative modules (there are none)

[09:30] <Juerd> It seems I'm stuck with a choice between colored prompts and tab completion

[09:33] *** xtreak left
[09:33] *** xtreak joined
[09:33] *** mcmillhj left
[09:35] <lookatme> Maybe you can ask his author for some help

[09:35] <lookatme> s/his/its/

[09:35] <Juerd> lookatme: Good idea

[09:35] <Juerd> DrForr_: Are you around? I can't figure out how to use Readline with completions

[09:38] *** xtreak left
[09:45] *** mr-foobar left
[09:46] *** lookatme left
[09:46] *** mr-foobar joined
[09:50] *** jameslenz left
[09:57] *** mr-foobar left
[09:57] *** xtreak joined
[10:01] *** parv joined
[10:01] *** mcmillhj joined
[10:09] *** Cabanossi left
[10:10] *** mcmillhj left
[10:10] *** [ptc] joined
[10:12] *** Cabanossi joined
[10:13] *** cuonglm left
[10:20] *** bpmedley left
[10:29] *** mr-foobar joined
[10:33] *** pecastro left
[10:42] *** eliasr joined
[10:54] *** Cabanossi left
[10:57] *** Cabanossi joined
[11:12] *** parvx joined
[11:14] *** parv left
[11:20] *** kurahaupo left
[11:20] *** kurahaupo joined
[11:29] <Juerd> So I thought to implement tab completion myself

[11:29] <Juerd> Have a working key binding in Readline, can get the current text buffer

[11:29] <timotimo> rakudo also doesn't support tab completion in readline

[11:29] <Juerd> But I can't get the cursor. It's in a readline variable called rl_point

[11:29] <timotimo> but if you add tab completion to readline, rakudo could probably also use it

[11:30] <Juerd> I tried cglobal('readline', 'rl_point', int32), but it couldn't find libreadline.so

[11:30] <Juerd> So I changed that to libreadline.so.5, and then it stopped complaining, but rl_point is 0

[11:30] <Juerd> If I use cglobal('libreadline.so.5', 'rl_line_buffer', Str), that's undefined

[11:31] <Juerd> While I'm quite sure that these variables should be filled

[11:31] <Juerd> Any hints?

[11:31] <Juerd> I'm stuck and desperate. Might even try the Perl 5 library :(

[11:31] <timotimo> hm, cglobal doesn't support having a version literal to identify which so file to use?

[11:32] <timotimo> that's unfortunate

[11:33] <Juerd> Well, it didn't die saying it couldn't find the symbol

[11:33] *** mr-fooba_ joined
[11:33] <Juerd> So apparently specifying the version in the libname works

[11:33] <timotimo> a dumb question maybe but is that the same so file the rest of readline uses?

[11:34] <Juerd> I don't know how to find out. Readline uses 'readline' as the library name for "is native"

[11:34] *** itaipu joined
[11:34] <Juerd> I don't understand why that works, while the same string doesn't work with cglobal

[11:34] *** parvx left
[11:35] <Juerd> Found out using strace

[11:35] <timotimo> it should have version literals somewhere

[11:35] <Juerd> timotimo: You were right, the rest was using 6

[11:36] <Juerd> And now it works

[11:36] *** mr-foobar left
[11:36] <Juerd> It's so unfortunate that libreadline's interface for setting a callback for tab completion is a global variable you have to write to, and writing to cglobals is NYI

[11:36] <timotimo> weird.

[11:37] <timotimo> i don't know why it works in Readline but not in your code

[11:37] <timotimo> differences between cglobal and "is native"?

[11:37] <timotimo> readline itself also has a cglobal in it which also doesn't give a version

[11:43] *** kurahaupo_ joined
[11:44] *** xtreak left
[11:46] *** lizmat left
[11:46] *** kurahaupo left
[11:48] *** lizmat joined
[11:49] *** xinming joined
[11:50] *** wamba left
[11:50] *** itaipu left
[11:52] *** AlexDaniel left
[11:52] *** lizmat_ joined
[11:53] *** lizmat left
[11:53] *** cschwenz joined
[11:53] *** wamba joined
[11:55] *** TEttinger left
[11:57] *** pecastro joined
[11:57] *** itaipu joined
[12:02] <Juerd> Woohoo, it seems to work.

[12:02] <Juerd> Poor man's tab completion

[12:03] <Juerd> https://gist.github.com/anonymous/c90d80f548425c369fa2503a111846f5  # Definitely my ugliest Perl 6 code to date :)

[12:12] *** abraxxa left
[12:12] *** gdonald left
[12:14] *** nadim left
[12:16] *** itaipu left
[12:20] *** vimal2012 joined
[12:22] *** nadim joined
[12:22] *** astj left
[12:23] *** astj joined
[12:24] *** gdonald joined
[12:25] *** vimal2012 left
[12:27] *** astj left
[12:28] *** jameslenz joined
[12:38] *** mcmillhj joined
[12:41] *** cgfbee left
[12:42] *** nadim left
[12:44] *** nadim joined
[12:45] *** lizmat joined
[12:47] *** lizmat_ left
[12:50] *** Franciman joined
[12:50] <Franciman> Hi

[12:50] <Franciman> what's the largest class of grammars I can parse with the build in parser generator?

[12:54] <jnthn> You can embed Perl 6 code inside of the grammar (either as zero-width assertions or to decide dynamically what to match at a certain location).

[12:55] <jnthn> Which means if you need it, you can have a turing complete parser, and so parse all the classes :)

[12:55] <Franciman> wow!

[12:55] <Franciman> thanks

[12:55] *** Cabanossi left
[12:56] *** Cabanossi joined
[12:57] *** lizmat left
[12:57] <moritz> Franciman: you might be interested in https://leanpub.com/perl6regex

[12:59] <Franciman> thank you

[13:01] <moritz> (disclaimer: I'm writing that book right now; mostly covers regexes right now, slowly getting into grammars)

[13:01] *** lizmat joined
[13:03] *** lizmat_ joined
[13:05] *** lucasb joined
[13:07] *** lizmat left
[13:17] *** nadim left
[13:17] *** nadim joined
[13:20] *** yqt joined
[13:21] *** eliasr left
[13:25] *** dolmen joined
[13:36] <SmokeMachine> Hi there! Does anyone have a idea why is this happening? is it because the distilled name starts with a number? https://www.irccloud.com/pastebin/Qa7M7NEP/

[13:42] <Zoffix> 6pm isn't a valid module name (unsure about being a valid distro name)

[13:43] <Zoffix> SmokeMachine: did you do `zef update`?

[13:44] <SmokeMachine> the module is called App::six-pm::SixPM... 

[13:44] <SmokeMachine> Zoffix: I did...

[13:45] <Zoffix> SmokeMachine: you ain't got a source url in your META file

[13:45] <SmokeMachine> hum!

[13:46] <Zoffix> SmokeMachine: https://github.com/FCO/6pm/pull/1

[13:46] <Zoffix> SmokeMachine: bump the version number after that too and in X hours it'll probably work

[13:48] <Zoffix> See also:

[13:48] <Zoffix> buggable: eco test::meta

[13:48] <buggable> Zoffix, Test::META 'Test a distributions META file': https://github.com/jonathanstowe/Test-META

[13:48] * Zoffix &

[13:49] <SmokeMachine> Zoffix: thank you very much!

[13:50] <SmokeMachine> I have to make the "6pm init" add this test...

[13:52] *** araujo joined
[14:07] *** bwisti left
[14:11] *** Khisanth left
[14:13] *** araraloren joined
[14:13] *** astj joined
[14:17] *** nadim left
[14:18] *** nadim joined
[14:19] *** setty1 joined
[14:20] *** AlexDaniel joined
[14:20] *** sufrostico joined
[14:24] *** Khisanth joined
[14:38] *** lucasb left
[14:41] *** sufrosti1o joined
[14:43] *** sufrostico left
[14:49] *** rubio_terra left
[14:50] <hythm> hello perl6, thanks for help yesterday to write my log parsing script. The script works fine now, but it take long time when parsing large files, because reading the file line by line and grammar parse each line in a loop.

[14:51] <hythm> basically I'm looking  for a better idea to avoid reading all lines. and read only the needed ones. luckily the logs file is sorted by time stamps

[14:54] *** Cabanossi left
[14:57] *** Cabanossi joined
[14:59] <Zoffix> Would be helpful to see the code, for those who haven't seen it yesterday.

[15:01] <Zoffix> As well as the input file that needs to be parsed.

[15:02] <hythm> here is the code along with the sample input file https://gist.github.com/hythm7/f80b2d291dfdc5cf491ca6437b72fcef

[15:10] <Zoffix> hythm: "script purpose is to collect http status between start and end time"

[15:10] <Zoffix> hythm: is that the only purpose for the script?

[15:10] <Zoffix> 'cause there's no need to parse anything, if yes

[15:11] *** emeric joined
[15:11] *** skids joined
[15:12] <hythm> zoffix, the goal is to return the number of HTTP 5xx errors, broken down by domain, for a given timeframe.

[15:12] <tony-o> llfourn++

[15:14] *** dolmen left
[15:14] <Zoffix> huggable: 6.d

[15:14] <huggable> Zoffix, Proposals for 6.d language: https://github.com/perl6/6.d-prep/blob/master/TODO/FEATURES.md

[15:15] <stmuk_> roughly how far away is 6.d?

[15:15] <Zoffix> hythm: FWIW, 6.d will have $*ARGFILES use $*IN inside MAIN

[15:15] <Zoffix> m: say "{Date.new("October-10-19") - Date.today} days, stmuk_"

[15:15] <camelia> rakudo-moar e2ca1f: OUTPUT: «Invalid Date string 'October-10-19'; use yyyy-mm-dd instead␤  in block <unit> at <tmp> line 1␤␤»

[15:16] <Zoffix> m: say "{Date.new("2017-10-19") - Date.today} days, stmuk_"

[15:16] <camelia> rakudo-moar e2ca1f: OUTPUT: «90 days, stmuk_␤»

[15:16] <hythm> Zoffix, noted.

[15:16] <stmuk_> time based then? :)

[15:16] *** alexi5 joined
[15:16] <alexi5> hello

[15:17] <Zoffix> \o

[15:18] *** lowbro left
[15:18] <alexi5> I am on vacation looking for something to do and decide to look up on perl6 and was pleasnatbly suprise to see how fr it has come since its release

[15:19] <Zoffix> Thanks :)

[15:20] <alexi5> does it have its own  repository, CPAN ?

[15:20] *** andrzejku left
[15:20] <Zoffix> alexi5: you can upload to CPAN with App::Mi6 and zef looks on CPAN by default. Soon modules.perl6.org will be updated to display modules from CPAN too.

[15:21] <alexi5> where is a good place to start learning perl 6 ?

[15:21] <Zoffix> alexi5: do you know how to program already, in some other language?

[15:22] <alexi5> yes

[15:22] <alexi5> familiar with perl 5, c++ and c#

[15:23] <Zoffix> hythm: is ability to work on multiple files a mandatory requirement? It's just you can't seek CatHandles between files... 

[15:23] <perlpilot> alexi5: hopefully that won't be an impediment to you learning Perl 6   ;-)

[15:23] *** wamba left
[15:24] <Zoffix> alexi5: https://learnxinyminutes.com/docs/perl6/ 

[15:24] <alexi5> mostly interested in the gotchas, those little quirks that  when developing

[15:24] <Zoffix> alexi5: in that case see https://docs.perl6.org/language/traps

[15:24] <perlpilot> alexi5: the gotchas might mostly be "things don't work like in Perl 5"

[15:24] <alexi5> ok

[15:25] <hythm> Zoffix, it is, but if using one file at a time will significantly improve performance then it's better to parse one file at a time

[15:26] <perlpilot> alexi5: a small one that I sometimes trip over is that `map {...}, @stuff` will require that comma in P6.  Though not so much anymore as I tend to do @stuff.map 

[15:26] <eater> is there an overcoupling Type for async streams?

[15:27] <eater> file streams, network streams etc.

[15:27] <alexi5> ok

[15:30] <Zoffix> hythm: looks like your parser got a bug in it. When I run it, it says xyz.com got 0% errors, but I see some 500 errors up in the data file

[15:30] <jnthn> eater: overcoupling?

[15:31] <eater> jnthn: like an interface

[15:31] <jnthn> Oh

[15:31] <jnthn> Supply

[15:31] <eater> hmmm

[15:31] <jnthn> As used in basically all async networking in Perl 6 :)

[15:31] <jnthn> And output streams of async procs, and so forth

[15:32] <eater> iirc they dont implement an Supply, but I should accept an Supply as argument?

[15:32] <eater> or should I cast them to a Supply?

[15:32] <Zoffix> m: say 1.425/0.749

[15:32] <camelia> rakudo-moar e2ca1f: OUTPUT: «1.902537␤»

[15:32] <jnthn> What are "they"?

[15:33] <Zoffix> hythm: well, this version is 2x faster: https://gist.github.com/zoffixznet/380351b71f87cf158dc7d68cc8c63d3f

[15:33] <jnthn> IO::Socket::Async.listen('localhost', 8080) returns a Supply of incoming connections, each one has a Supply of incoming packets, for example

[15:33] <jnthn> For Proc::Async then .stdout and .stderr return Supply

[15:33] <eater> aah

[15:33] <hythm> Zoffix, will check the parser again tto identify the bug

[15:33] <eater> so I need to accept Supply as argument :)

[15:33] <eater> thanks jnthn 

[15:33] <jnthn> Sounds like

[15:34] <jnthn> I did a presentation recently on supply stuff (and other Perl 6 async) fwiw

[15:34] <timotimo> hythm: tbh, i'd use a simple string split instead of an actual grammar for this

[15:34] <jnthn> Might be a useful look through the slides (or video, if you prefer those)

[15:34] <hythm> Zoffix, thanks for help, Will check the new version and test it

[15:34] <eater> jnthn: link?

[15:35] <hythm> timotimo, will use split and compare the speed

[15:35] <timotimo> actually, the new version zoffix made doe suse split

[15:35] <jnthn> eater: http://jnthn.net/papers/2017-perl6-concurrency-pcp.pdf https://www.youtube.com/watch?v=VqhLWgvIbz0

[15:35] <hythm> I just like Grammar, so I try to do any parsing with it :D

[15:35] <eater> jnthn: thanks :)

[15:35] <timotimo> you could put a code assertion into the grammar to reject lines with the wrong time early

[15:38] <hythm> timotimo, I thinkk I did that here https://gist.github.com/hythm7/f80b2d291dfdc5cf491ca6437b72fcef#file-parse-p6-L29     or you mean something different?

[15:38] <timotimo> no, the actions method runs when the parse is complete

[15:38] <hythm> hmm

[15:39] <timotimo> and returning from an action method won't prevent any further parsing from being done (though of course the TOP action method gets run at the very end anyway, so there's nothing after that to prevent)

[15:39] <hythm> but again I need to parse the line first to get the timestamp,, so I can assert against it, no?

[15:39] <Zoffix> hythm: as for the "read only X" approach, you could just .read() a chunk large enough to contain a few lines and check for timestamps, and then .seek() around for for start and end and then just .read() the chunk between those points. With CatHandle, it's more elaborate, but not impossible. .seek() seeks the current file and doesn't switch to next handle, though .read() does switch, but you can use .on-switch

[15:39] <Zoffix> callback to keep around last files or something

[15:40] *** domidumont left
[15:40] *** lizmat_ left
[15:40] <Zoffix> hythm: if my version gives right results, I wouldn't even bother with a grammar. It'd definitely be slower and has way more code than a simple split()

[15:40] * Zoffix &

[15:40] *** AlexDaniel left
[15:41] *** lizmat joined
[15:42] *** AlexDaniel joined
[15:46] <hythm> Zoffix, I'm getting error "Could not find symbol '&CatHandle'",, I assume I need to install a missing module?

[15:46] <timotimo> no, it's built-in, but somewhat new

[15:46] <timotimo> what's a fair perl5 startup line to compare timings between rakudo and perl5? -MMoose is a given, but there'd also have to be a signature-providing module, right? maybe one for grammars?

[15:46] <Zoffix> hythm: or, if input is always gonna be comming from files, just make a CatHandle (my version does that) then .seek() in chunks through the entire cathandle, taking sample .read()s and looking whether the time stamp of the sample is in range. Save the offsets from before the chunk became in range and after it went outta range. Then make another CatHandle and just .seek it to first offset, and .read() in chunks

[15:46] <Zoffix> until you read enough bytes to reach the other chunkj. And that way you can cheeply skip huge files

[15:46] <Zoffix> hythm: your rakudo is ancient. Time for an upgrade.

[15:47] <Zoffix> c: 2017.04 IO::CatHandle.say

[15:47] <committable6> Zoffix, ¦2017.04: «Could not find symbol '&CatHandle'␤  in block <unit> at /tmp/fmEtYtpYg3 line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/fmEtYtpYg3 line 1␤ «exit code = 1»»

[15:47] <Zoffix> Ah.

[15:47] <ugexe> Function::Parameters, or the built-in signatures of later perls

[15:47] <timotimo> that'd be rakudo star, then?

[15:47] <Zoffix> hythm: well, it's not in a Rakudo Star yet. There's a release coming up soon. It'll be in there.

[15:47] <timotimo> so it'd be unfair to put a signature-providing library in there?

[15:48] <Zoffix> hythm: you can probably copy this file into a file named IO/CatHandle.pm6 and try it as a module: https://github.com/rakudo/rakudo/blob/nom/src/core/IO/CatHandle.pm

[15:48] <Zoffix> I think that'll work

[15:48] <ugexe> the built-in signatures don't have many features, so it depends

[15:48] <hythm> will try that

[15:49] <Zoffix> hythm: and put `use nqp;` at the start of the file to load nqp

[15:49] <timotimo> anyway, -MFunction::Parameters adds basically nothing to the start-up time, so it doesn't even matter :)

[15:49] <ugexe> you could just do -MMoops, that should include alot of the bells and whistles

[15:50] <ugexe> then again maybe you have to explicitly use its signatures thing (Kavorka), etc

[15:50] <timotimo> does that stand for "Moo + Perl Six"?

[15:50] <Zoffix> Load all of Damian's modules? :)

[15:50] *** khw joined
[15:54] <ugexe> https://github.com/ugexe/Perl5-App--p6brew/blob/master/lib/App/p6brew.pm#L62 actually I guess it does load a method signature module

[15:55] *** cschwenz left
[15:56] <Zoffix> hythm: oh and remove `my` from `my class IO::CatHandle..` or it won't get exported. And in your script you need to load this module. So if you put it in IO/CatHandle.pm6, then add `use lib <.>; use IO::CatHandle`

[15:57] *** epony left
[15:57] *** cdg joined
[15:57] <Franciman> has haskell influenced perl6?

[15:57] *** zakharyas left
[15:57] <Zoffix> Franciman: yes

[15:57] <ugexe> one (the?) first compiler was written in haskell 

[15:58] <Franciman> how much?

[15:58] <Franciman> I mean

[15:58] <Franciman> what things?

[15:58] * Zoffix shrugs

[15:58] <Zoffix> Having been around at that time :) TimToady probably knows

[15:59] *** cdg_ joined
[15:59] *** mcmillhj left
[16:00] *** astj left
[16:01] *** astj joined
[16:02] *** astj left
[16:02] *** astj joined
[16:02] *** cdg left
[16:03] *** astj left
[16:03] *** astj joined
[16:07] *** astj left
[16:09] *** Cabanossi left
[16:11] *** mcmillhj joined
[16:12] *** Cabanossi joined
[16:15] <robertle> is it this? https://github.com/perl6/Pugs.hs

[16:15] <perlpilot> Franciman: pervasive laziness.  But I'm not sure that Haskell specifically influenced that as much as function languages in general.

[16:15] *** mcmillhj left
[16:16] <Zoffix> robertle: yeah

[16:16] <perlpilot> robertle: yeah, that's the haskell Perl 6 compiler

[16:16] *** pmurias joined
[16:16] <pmurias> hi

[16:16] <perlpilot> pmurias: greetings

[16:17] <Zoffix> \o

[16:18] <Franciman> perlpilot, gotcha

[16:20] <timotimo> i wouldn't call perl6 to have "pervasive lazyness"

[16:21] <timotimo> we only have lazy lists, we don't have lazy evaluation

[16:21] <perlpilot> well, it's more prominent in P6 than it ever was in P5.

[16:21] <timotimo> well, yeah

[16:21] <timotimo> but it's nowhere near as prominent as in haskell

[16:21] <perlpilot> true

[16:21] <timotimo> if you say "perl6 took pervasive lazyness from haskell" people will be comparing vs haskell, not vs perl5

[16:23] <Zoffix> m: my $imploded-universe = 0/0; say ";)"

[16:23] <camelia> rakudo-moar e2ca1f: OUTPUT: «;)␤»

[16:23] <perlpilot> Franciman: yeah, it's best to ask TimToady if/how/where Haskell influenced Perl 6   :-)

[16:24] *** astj joined
[16:25] <perlpilot> I don't think I ever heard the idea of multi methods/subs until after Pugs/Audrey came into the picture.   But I dunno.

[16:25] <perlpilot> (heard of it as applied to P6)

[16:25] <timotimo> okay, lazy exceptions is definitely a thing

[16:26] <timotimo> except lazyness of exceptions in haskell is a curse :)

[16:27] *** mcmillhj joined
[16:27] *** astj left
[16:27] <perlpilot> I wish Perl 6 had somehow garnered type inferencing from Haskell

[16:28] *** astj joined
[16:28] <perlpilot> (optionally, obviously)

[16:32] *** mcmillhj left
[16:32] <Zoffix> Oh, right exceptions.

[16:33] *** astj left
[16:33] <timotimo> the problem in haskell is that you don't know when your piece of code is actually going to be run

[16:33] *** astj joined
[16:33] <timotimo> so an exception caused in a piece of code can be long past any dynamic context you'd expect it to be

[16:34] *** rubio_terra joined
[16:36] <hythm> Zoffix, noted that, Appreciate your help guys.

[16:40] <Franciman> thank you all, for all the hints

[16:45] *** fatguy joined
[16:45] <fatguy> is there FindBin eqv in perl6 ?

[16:46] <moritz> m: say $*EXECUTABLE

[16:46] <camelia> rakudo-moar e2ca1f: OUTPUT: «"./rakudo-m-inst/bin/perl6-m".IO␤»

[16:46] <moritz> hm, no

[16:46] <moritz> m: say $?FILE

[16:46] <camelia> rakudo-moar e2ca1f: OUTPUT: «<tmp>␤»

[16:46] <moritz> that's it

[16:46] <moritz> m: say $?FILE.^name

[16:46] <camelia> rakudo-moar e2ca1f: OUTPUT: «Str␤»

[16:47] *** gdonald left
[16:49] <pmurias> timotimo: exceptions in haskell aren't exactly encourages

[16:50] <ugexe> m: say $*PROGRAM

[16:50] <camelia> rakudo-moar e2ca1f: OUTPUT: «"<tmp>".IO␤»

[16:52] *** yqt left
[16:53] <timotimo> yeah

[16:57] <nadim> anyone seen or talke to azawawi lately?

[17:00] *** gdonald joined
[17:03] *** rindolf left
[17:05] *** mcmillhj joined
[17:10] *** Cabanossi left
[17:12] *** Cabanossi joined
[17:12] <fatguy> m: say $?FILE.IO.dirname ~ '../lib'

[17:12] <camelia> rakudo-moar e2ca1f: OUTPUT: «/tmp../lib␤»

[17:16] <Zoffix> huggable: FindBin 

[17:16] <huggable> Zoffix, nothing found

[17:16] <Zoffix> huggable: FindBin

[17:16] <huggable> Zoffix, use lib $*PROGRAM.add: "../lib"; # finds lib/ for scripts in bin/ or t/

[17:16] <Zoffix> fatguy: if you have paths, deal with paths, not strings :)

[17:17] <fatguy> zoffix: thanks for the tips

[17:19] <Zoffix> Hm, actually that don't work :)

[17:19] *** suman joined
[17:19] <suman> Hi everyone 

[17:19] <suman> I have prepared this https://github.com/sumandoc/Getting-Started-with-Perl-6/blob/master/Perl_6_Regex.md

[17:19] <Zoffix> Hi

[17:21] <zengargoyle> hythm: a long shot, my Search::Dict module is a binary search over dictionary files.  it could maybe be hacked to do a quick binary search on a log file if the dates are at the start of the line and in order.  then you could maybe quickly find the line (seek offset) in the file where you want to start reading from.

[17:21] <Zoffix> fatguy: the old factoid was `use lib $*PROGRAM.parent.parent.child("lib").Str;`  `use lib` now supports IO::Path... Hm, lemme play with it for a sec to figure out what the modern equivalent would be

[17:23] *** yqt joined
[17:23] <Zoffix> $*PROGRAM.add("../../lib").resolve works. eww at that .resolve tho

[17:24] *** fatguy left
[17:24] <Zoffix> haw

[17:24] <Zoffix> huggable: FindBin :is: use lib $*PROGRAM.sibling: '../lib'; # finds lib/ for scripts in bin/ or t/

[17:24] <huggable> Zoffix, Added FindBin as use lib $*PROGRAM.sibling: '../lib'; # finds lib/ for scripts in bin/ or t/

[17:25] <Zoffix> .tell fatguy Not sure if you caught it before you left, but the first FindBin equivalent I gave you was wrong. It should be `use lib $*PROGRAM.sibling: '../lib';`

[17:25] <yoleaux> Zoffix: I'll pass your message to fatguy.

[17:28] <tony-o> lol

[17:28] <Zoffix> ?

[17:29] <tony-o> i like that username

[17:29] <Zoffix> Damn. .add() has a somewhat of a design failure. "dir/filename".IO.add("../bar") produces a path that needs to be .resolve()d before it can be used by, say, .dir() call :/

[17:29] <tony-o> ingy: finally got around to packaging the p6 libyaml wrapper/parser yesterday

[17:30] <Zoffix> And .sibling() works better for such a use, but its name sucks then

[17:31] <Geth> ¦ doc: 22792e1a1a | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/IO/Path.pod6

[17:31] <Geth> ¦ doc: Fix up .sibling docs

[17:31] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/22792e1a1a

[17:32] <Zoffix> I guess better quesion is why "dir/file/../other-dir".IO.dir doesn't dir :}

[17:32] <Zoffix> s: ".".IO, "dir", \()

[17:32] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/e2ca1ff/src/core/IO/Path.pm#L541

[17:34] <hythm> zengargoyle thanks for the hint, that sounds perfect for what I need, checking that out

[17:35] <Zoffix> Doesn't .open either. 

[17:36] *** suman left
[17:38] <Geth> ¦ doc: cdae1edc51 | (Vynce Montgomery)++ (committed by Zoffix Znet) | doc/Type/Cool.pod6

[17:38] *** AlexDaniel left
[17:38] <Geth> ¦ doc: Explicitly note coercion to string for .contains (#1413)

[17:38] <Geth> ¦ doc: 

[17:38] <Geth> ¦ doc: * Explicitly note coercion to string for .contains

[17:38] <Geth> ¦ doc: 

[17:38] <Geth> ¦ doc: as per #992

[17:38] <Geth> ¦ doc: 

[17:38] <Geth> ¦ doc: * make link to traps more specific.

[17:38] <Geth> ¦ doc: <…commit message has 9 more lines…>

[17:38] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/cdae1edc51

[17:38] *** AlexDaniel joined
[17:40] *** rindolf joined
[17:40] *** Cabanossi left
[17:42] <Geth> ¦ doc: 4c73ea7e7e | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/IO/Path.pod6

[17:42] <Geth> ¦ doc: Mention .add('../') to file-pointing paths doesn't quite work

[17:42] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4c73ea7e7e

[17:42] *** Cabanossi joined
[17:42] <Zoffix> I guess when we end up with performance we can waste, .open, .dir and the rest of the ilk can be made to .resolve 

[17:43] *** atta joined
[17:44] *** araujo left
[17:50] *** alexi5_ joined
[17:51] *** atta left
[17:53] *** alexi5 left
[17:53] <Zoffix> Or .add should resolve

[17:55] *** atta joined
[18:02] *** espadrine joined
[18:03] <ugexe> seems reasonable, since low level stuff related to those things are easy enough to do in nqp ops

[18:06] <Zoffix> m: say "foo/bar/../meow"

[18:06] <camelia> rakudo-moar e2ca1f: OUTPUT: «foo/bar/../meow␤»

[18:06] <Zoffix> m: say "foo/bar/../meow".IO.resolve

[18:06] <camelia> rakudo-moar e2ca1f: OUTPUT: «"/home/camelia/foo/bar/../meow".IO␤»

[18:06] <Zoffix> m: say "foo/bar/../../../camelia".IO.resolve.dir

[18:06] <camelia> rakudo-moar e2ca1f: OUTPUT: «Failed to get the directory contents of '/home/camelia/foo/bar/../../../camelia': Failed to open dir: 2␤  in block <unit> at <tmp> line 1␤␤»

[18:07] <Zoffix> m: say "foo/bar/../../../../../../../home/camelia".IO.resolve.dir

[18:07] <camelia> rakudo-moar e2ca1f: OUTPUT: «Failed to get the directory contents of '/home/camelia/foo/bar/../../../../../../../home/camelia': Failed to open dir: 2␤  in block <unit> at <tmp> line 1␤␤»

[18:07] <Zoffix> Right. I guess even with .resolve in the mix, it won't do The Right Thing 100% of the time. Oh well.

[18:07] * Zoffix &

[18:17] *** dolmen joined
[18:17] *** dolmen is now known as Guest90987

[18:36] *** alexi5_ left
[18:45] <rubio_terra> m: say $*CWD;

[18:45] <camelia> rakudo-moar e2ca1f: OUTPUT: «"/home/camelia".IO␤»

[18:46] <rubio_terra> m: say "../../etc/../home/camelia".IO.resolve;

[18:46] <camelia> rakudo-moar e2ca1f: OUTPUT: «"/home/camelia".IO␤»

[18:47] <rubio_terra> With real paths "resolve" works.

[18:48] <Voldenet> well foo and bar could be symlinks

[18:48] <Voldenet> so there's no real way to know

[18:48] <Voldenet> m: say "foo/../".IO.resolve

[18:48] <camelia> rakudo-moar e2ca1f: OUTPUT: «"/home/camelia/foo/..".IO␤»

[18:49] <Voldenet> m: say "foo/../".IO.resolve

[18:49] <camelia> rakudo-moar e2ca1f: OUTPUT: «"/home/camelia/foo/..".IO␤»

[18:51] *** itaipu joined
[18:55] <Zoffix> Yeah, it goes out to look if it can resolve the '../' and it does it if it can and if not, it switches to "not-accessing-the-filesystem" mode for the rest of it and just cleans up what it can

[18:55] <Zoffix> (or dies if :completely arg is passed)

[18:56] <Zoffix> m: say "foo/bar/../meow".IO.resolve: :completely

[18:56] <camelia> rakudo-moar e2ca1f: OUTPUT: «Failed to completely resolve IO::Path.new("foo/bar/../meow", :SPEC(IO::Spec::Unix), :CWD("/home/camelia"))␤  in block <unit> at <tmp> line 1␤␤»

[18:56] <Zoffix> well, fail()s, not die()s

[18:57] <Voldenet> die is so perl5 anyway

[18:57] <Zoffix> :)

[18:58] *** wamba joined
[19:02] <Voldenet> I wonder how secure is .resolve method, probably not really secure ;>

[19:02] <Zoffix> Voldenet: what's not secure about it?

[19:02] <Zoffix> buggable: eco secure

[19:02] <buggable> Zoffix, IO::Path::ChildSecure 'Secure version of IO::Path.child': https://github.com/zoffixznet/perl6-IO-Path-ChildSecure

[19:03] <Zoffix> Voldenet: wondering if that ^ has any flaws in it; and it does use .resolve: :completely

[19:04] <Voldenet> Well, when you replace a folder etc with a symlink to /etc during the "resolve" method... you might break things ;)

[19:05] *** itaipu left
[19:05] <Voldenet> "let me upload to /tmp/etc/shadow" 100 times per second ;)

[19:06] * Zoffix doesn't see how that would break

[19:07] <Voldenet> well, when you can modify stuff in /tmp, you can actually make /tmp/etc a symlink after /tmp/etc is validated

[19:07] <Zoffix> Ah, right.

[19:09] *** Cabanossi left
[19:11] *** darutoko left
[19:11] <Zoffix> Is there a way to prevent that at all? 

[19:11] <Voldenet> open the file first and then use readlink syscall on it ;)

[19:11] <Zoffix> Ah

[19:11] <Zoffix> Noted.

[19:12] *** Cabanossi joined
[19:17] *** itaipu joined
[19:26] *** lizmat left
[19:32] *** itaipu left
[19:35] *** Skarsnik joined
[19:35] <Franciman> see you, thanks again for your help

[19:35] *** Franciman left
[19:36] *** devmikey joined
[19:39] *** itaipu joined
[19:39] *** Cabanossi left
[19:41] *** lizmat joined
[19:42] *** Cabanossi joined
[19:44] *** cpage_ left
[19:53] *** mr-fooba_ left
[19:54] *** mr-foobar joined
[20:09] *** Cabanossi left
[20:09] *** mr-foobar left
[20:10] *** cpage_ joined
[20:11] *** lizmat left
[20:11] *** mr-foobar joined
[20:12] *** Cabanossi joined
[20:18] <hythm> hello, what is the name of the variable that start with "$^"  like $^var ? need to check that on docs

[20:19] *** lizmat joined
[20:22] <geekosaur> positional placeholder variables https://docs.perl6.org/language/variables#The_^_Twigil

[20:22] <hythm> Thanks!

[20:22] *** rubio_terra left
[20:23] *** raiph left
[20:24] *** raiph joined
[20:24] *** dwarring joined
[20:25] <Geth> ¦ doc: ab3e5329cd | (David Warring)++ | doc/Language/performance.pod6

[20:25] <Geth> ¦ doc: adjust profile SQL example for latest Rakudo

[20:25] <Geth> ¦ doc: 

[20:25] <Geth> ¦ doc: 'callee' table has been renamed to 'call'. Also added a 'limit' clause.

[20:25] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ab3e5329cd

[20:30] *** devmikey left
[20:31] *** emeric left
[20:31] *** devmikey joined
[20:32] *** devmikey left
[20:40] *** itaipu left
[20:44] *** TEttinger joined
[21:05] *** skids left
[21:11] *** alexi5_ joined
[21:18] *** yqt left
[21:20] *** gdonald left
[21:21] <hythm> zengargoyle I used your module Search::Dict for lookup and seek in log-file https://gist.github.com/hythm7/f80b2d291dfdc5cf491ca6437b72fcef

[21:22] <hythm> I still will test it on large files, buit it worked great on sample file

[21:23] <hythm> Thanks #perl6

[21:23] *** mcmillhj left
[21:26] *** pmurias left
[21:29] <zengargoyle> hythm: woot!

[21:32] *** gdonald joined
[21:32] *** kurahaupo_ left
[21:37] *** cpage_ left
[21:39] *** cognominal left
[21:39] <hythm> zengargoyle I went through the module and I see it's reading 128 kb as block size from the file, if you care to elaborate, does that mean it's using 128 kb in memory to parse the file or I understood that wrong?

[21:40] *** cpage_ joined
[21:41] *** alimon left
[21:41] <Zoffix> It takes about 4 times as much data in memory after you read stuff in

[21:42] <hythm> and that doesn't depend on the actual file size?

[21:42] <Zoffix> And you can see peak memory use with /usr/bin/time

[21:43] *** MasterDuke joined
[21:43] <Zoffix> hythm: no, just on how much you read at a time. Same as with your previous line-by-line version, it only reads in chunks of 0x100000 bytes IIRC

[21:44] *** setty1 left
[21:44] <MasterDuke> positive Perl 6 mention on HN https://news.ycombinator.com/item?id=14819307

[21:44] *** spider-mario left
[21:46] <hythm> makes sense Zoffix. is it the case for CPU as well, I read that binary search use (log N)  as I assume N number of lines. Does that apply for the module as well?

[21:47] <Zoffix> no idea about the module

[21:47] <Zoffix> MasterDuke: it it from one of the devs or regulars?

[21:47] <Zoffix> :)

[21:47] *** spider-mario joined
[21:48] *** dwarring left
[21:48] <hythm> I dont know, but here is the code https://github.com/zengargoyle/p6-Search-Dict

[21:48] <MasterDuke> Zoffix: no idea, none of the usernames in the conversation look familiar

[21:49] <hythm> oops, sorry, I thought message was directed to me.

[22:10] *** Cabanossi left
[22:12] *** Cabanossi joined
[22:21] *** ufobat left
[22:34] *** nadim left
[22:36] <Zoffix> FWIW that positive Rakudo mention also has mention of "EDIT: Ok, so I installed perl6 (rakudo) just to test this out, and it apparently doesn't work out of the box. Pity."

[22:36] <Zoffix> probably some 2011 release :P like on my LTS buntu box :P

[22:43] *** raschipi joined
[22:43] <AlexDaniel> similarly we will see people using rakudo 2016.12 (debian stable) after v6.d is released

[22:43] <AlexDaniel> unless we *really* take our time to do v6.d :)

[22:46] *** Skarsnik left
[22:47] <MasterDuke> oO(create a severe enough CVE for their 2016.12 package they're forced to upgrade...)

[22:48] <AlexDaniel> no, it will be patched in 2016.12 directly

[22:56] *** rubio_terra joined
[23:05] <raschipi> Debian would either patch it or remove it. They won't upgrade.

[23:05] *** dj_goku left
[23:08] <raschipi> One way to alleviate that problem is to make sure Moar, Nqp and Rakudo build with the toolchain from the stable distros, because then the maintainer will upload new versions to the backports repository.

[23:09] <raschipi> And you can tell people to use the version from backports.

[23:17] *** rindolf left
[23:19] *** cdg joined
[23:22] *** cdg_ left
[23:23] *** cdg left
[23:24] *** cdg joined
[23:28] *** cdg left
[23:38] *** mcmillhj joined
[23:42] *** mcmillhj left
[23:44] <Geth> ¦ doc: 5f6619cfdc | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/IO/Handle.pod6

[23:44] <Geth> ¦ doc: Fix broken wording

[23:44] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5f6619cfdc

[23:52] *** Guest90987 left
[23:54] *** mcmillhj joined
[23:58] *** mcmillhj left
