[00:06] *** vendethiel joined
[00:07] *** vendethiel- left
[00:08] <liAealneDx> TimToady: I type them directly

[00:09] <liAealneDx> but your point is that we should only add unicode versions if they're mangled by software?

[00:11] <SmokeMachine> every time I try to make the doc, it stops on processed "./doc/Type/X/IO/Dir.pod6 (cached)" on my mac... I tried that on docker, and its passing...

[00:11] <liAealneDx> if texas ops are mangled*

[00:14] <TimToady> my point is that all the other things we've added have additional rationale besides "it'd be cool", but ⁇‼ is not math, it's not autocorrection, it's not helping disambiguate different kinds of angles, so what is it doing for us?

[00:16] * TimToady doesn't even know whyt Unicode has ⁇ and ‼...

[00:16] <liAealneDx> just like it has …

[00:17] <TimToady> that is much more heavily used in normal text

[00:17] <TimToady> and has the autocorrection argument

[00:17] <BenGoldberg> What category of operator is the ternary ??!!, anyway?  I don't think it's prefix, postfix, circumfix, postcircumfix...

[00:17] *** shdb left
[00:18] <TimToady> it's actually classified as a strange infix

[00:18] *** Actualeyes left
[00:19] <SmokeMachine> TimToady: is that what you think about the arrows too?

[00:19] <liAealneDx> that for sure, I was simply saying that it's not new for them to add a normal halfwidth character for stuff that can be written with several characters

[00:19] <liAealneDx> TimToady: but yes, I was a bit surprised with your previous answer about ⁇‼ :)

[00:20] <BenGoldberg> If it could be overloaded, e.g., our macro duo-infix:<< ⁇ ‼ >>( $cond, $true_part, $false_part ) { .... }, then it could be put into an (optional) module, and we wouldn't be having this argument about it, since it wouldn't be part of core perl6.

[00:20] <liAealneDx> BenGoldberg: I don't think you can easily add it yourself

[00:20] <BenGoldberg> Why not?

[00:22] <BenGoldberg> And, maybe changing perl so that users can add their own multi-infix subs (and macros) is something to look into.

[00:23] <liAealneDx> BenGoldberg: well… I guess adding something into token lambda may be possible, but I'm not sure how to achieve this pblock change: https://github.com/FCO/rakudo/commit/8d54440865c7570e9cff1c84991e3bcde1fa46ff

[00:23] *** Cabanossi left
[00:23] <liAealneDx> SmokeMachine: -> can actually be autocorrected to →

[00:23] <liAealneDx> and <-> also

[00:24] <liAealneDx> libreoffice writer does this, but I'm not quite sure why would anybody have code in it…

[00:24] <liAealneDx> ok, same thing with impress

[00:24] <liAealneDx> so yeah, if somebody does a presentation and throws in his code there… that may happen, maybe

[00:25] *** Cabanossi joined
[00:26] <BenGoldberg> Some editors autocorrect :) into a unicode smiley.  Which makes me feel sorry for anyone using a language which makes use of (: ... :) (not that I know of any, but still)

[00:26] <samcv> ⁇ and ‼ could have been made for transcription purposes

[00:26] *** bwisti left
[00:27] <samcv> transcribing written text and not losing content. a lot of random things like ligatures were added for those reasons

[00:27] <samcv> so written text can be transcribed in unicode and not lose data

[00:27] <BenGoldberg> Like "Out out‼  You demons of stupidity‼" ?

[00:27] *** shdb joined
[00:27] <TimToady> I don't think it's written text, but maybe somebody's legacy character encoding had it for some reason

[00:28] <samcv> could be that too

[00:28] <liAealneDx> m: say ‘‼’.uniprop(‘Emoji’)

[00:28] <camelia> rakudo-moar b19df9: OUTPUT: «True␤»

[00:28] <liAealneDx> o-ops…

[00:28] <samcv> those are two reasons why something might be included

[00:28] <liAealneDx> well now we know…

[00:28] <samcv> liAealneDx, that doesn't mean anything

[00:28] <samcv> # is Emoji too

[00:28] <liAealneDx> m: say ‘#’.uniprop(‘Emoji’)

[00:28] <camelia> rakudo-moar b19df9: OUTPUT: «True␤»

[00:28] <liAealneDx> okay, nm

[00:28] <liAealneDx> nvm*

[00:28] <IOninja> TimToady: there hasn't been a release with ⁇/‼ yet. It's not too late to pull the plug on it :)

[00:28] <samcv> heh

[00:29] * liAealneDx looks at his code

[00:29] <IOninja> :D

[00:29] <BenGoldberg> Someone could always shoot an emil to the unicode consortium.

[00:29] <BenGoldberg> s/emil/email/

[00:29] <samcv> about what BenGoldberg 

[00:29] <BenGoldberg> Asking why ‼ was added‼ :)

[00:29] <samcv> m: say '‼'.uniprop('Age')

[00:29] <camelia> rakudo-moar b19df9: OUTPUT: «1.1␤»

[00:29] <samcv> well. it's quite old

[00:30] <samcv> damn

[00:30] <liAealneDx> ⁇ is newer I think

[00:30] <liAealneDx> m: say '⁇'.uniprop('Age')

[00:30] <camelia> rakudo-moar b19df9: OUTPUT: «3.2␤»

[00:30] <TimToady> IOninja: I'm kinda suggesting that we might want to back it out for this release until we know more about those characters and whether anyone else in the whole world is ever going to use them

[00:30] <IOninja> TimToady: sounds good.

[00:31] <TimToady> and what they use them for, if so

[00:31] <BenGoldberg> . o O ($cond ❓❓ $true ❗❗ $false)

[00:31] <samcv> m: '⁇'.ord.base(16)

[00:31] <camelia> rakudo-moar b19df9: ( no output )

[00:31] <samcv> m: '⁇'.ord.base(16).say

[00:31] <camelia> rakudo-moar b19df9: OUTPUT: «2047␤»

[00:32] * TimToady already feels a little bad about stealing the half-width corner quotes for "off-brand" use :)

[00:32] <samcv> well there's no annotation in NamesList.txt

[00:32] <TimToady> 'course, given how much violence we did to angle-bracket semantics, I suppose that's small potatoes...

[00:33] <SmokeMachine> :(

[00:33] <liAealneDx> somebody, somewhere, says “The "double exclamation mark" character ‼ was originally added to help with vertical East Asian and Mongolian text”

[00:33] <samcv> TimToady, you mean ｢ ｣ ? what's so bad about that

[00:33] <samcv> offbrand? you mean using with the wrong script?

[00:35] <TimToady> I just mean overlaying them with Q semantics

[00:37] <TimToady> if ⁇ and ‼ were added for vertical East Asian text, then they probably should have been considered square, that is double-wide, characters, and thus indistinguishable from ?? and !! in left-to-right monospace fonts, but obviously they got proportionalized at some point (and differently, in my font, which is part of why they're ugly, and I don't really like 'em aesthetically)

[00:38] <TimToady> so really, they're looking more and more like a Unicode botch

[00:38] <TimToady> which means we should probably steer clear of them for now

[00:39] <TimToady> in the absence of any argument to the contrary, I think they fall mostly into the "you think that's cute today" category

[00:39] *** kaare__ joined
[00:40] <TimToady> anyway, if you want someone to blame, you can blame my vacation self for letting my brain fall out temporarily :)

[00:40] <IOninja> :)

[00:41] *** kaare_ left
[00:41] *** mr-fooba_ left
[00:47] *** espadrine left
[00:50] *** girafe left
[00:52] <liAealneDx> TimToady: while you're here, what's your opinion on “returns”? Anything changed?

[00:53] <liAealneDx> TimToady: and what about “of”?

[00:53] *** Cabanossi left
[00:55] *** Cabanossi joined
[00:55] <TimToady> if we ever want to move the language in the direction of functors, we want to keep the view that functors are mappings of input types to output types, and I'd like our signatures to reflect that, not divorce return values as an implementation detail because they don't happen to participate in dispatch

[00:56] <BenGoldberg> m: sub foo(-->Str) { 42 };

[00:56] <camelia> rakudo-moar b19df9: ( no output )

[00:58] <BenGoldberg> On a vaguely related note, what do you think of compile-time testing whether the return value of a sub is compatible with what that sub has been declared as returning?

[00:59] <BenGoldberg> m: sub foo(-->Str) { 42 }; say foo;

[00:59] <camelia> rakudo-moar b19df9: OUTPUT: «Type check failed for return value; expected Str but got Int (42)␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:59] * BenGoldberg would like that ^ error message at compile time, if possible.

[00:59] <geekosaur> "patches gladly accepted", I think :p

[01:10] * BenGoldberg doesn't have the faintest idea how to implement that sort of functionality.

[01:21] *** Actualeyes joined
[01:36] *** eroux joined
[01:37] *** grondilu_ left
[01:46] *** aborazmeh joined
[01:46] *** aborazmeh left
[01:46] *** aborazmeh joined
[01:48] *** Todd joined
[01:48] <Todd> Hi All!

[01:48] <yoleaux> 14 Mar 2017 05:12Z <samcv> Todd: .basename is there there https://docs.perl6.org/routine/basename#(IO::Path)_method_basename

[01:48] <samcv> hi Todd added that other thing to the docs that you said wasn't there too

[01:48] *** lukaramu_ left
[01:49] <Todd> very sweet.  Thank you!

[01:49] <Todd> question on date:  I have this example:

[01:49] <Todd> perl6 -e 'my $Date=DateTime.now(formatter => { sprintf "%02d-%02d-%02d %02d:%02d:%02d", .month, .day, .year, .hour, .minute, .second }); print "$Date\n"'

[01:50] <Todd> Is there one of those fancy .month words to turn the month into the name of the month (January, etc.)?

[01:51] <samcv> i have no knowledge of such a thing

[01:51] <samcv> also those are different in different languages etc.

[01:52] <samcv> ok no there is not. i searched the whole source of rakudo and it does not exist

[01:53] <Todd> Then a pre-salted array it will be!

[01:53] <Todd> Thank you for looking.  Bye Bye

[01:54] *** Todd left
[02:03] *** agentzh left
[02:03] *** agentzh joined
[02:05] *** vcv left
[02:07] *** Cabanossi left
[02:10] *** Cabanossi joined
[02:13] *** vcv joined
[02:16] <SmokeMachine> what means <.[ - + ? ~ ^ ]>?

[02:16] <SmokeMachine> specifically the "."

[02:20] <geekosaur> doesn't < > capture by default?

[02:21] <geekosaur> cf. <ws> (captures) vs. <.ws> (doesn't)

[02:23] <SmokeMachine> geekosaur: but <[a..z]> captures?

[02:24] <geekosaur> I would suspect, since that's what he . usually means

[02:24] <geekosaur> or it could be someone who made that assumption but it doesn't in that case

[02:24] <SmokeMachine> make sense...

[02:24] <SmokeMachine> another question:

[02:25] <geekosaur> m: if ('a . c' ~~ /<[ . ,]>/) { say $/.perl }

[02:25] <camelia> rakudo-moar b19df9: OUTPUT: «Match.new(ast => Any, list => (), hash => Map.new(()), to => 3, orig => "a . c", from => 2)␤»

[02:25] <SmokeMachine> m: say [+] ( 1;10, 2;20, 3,30 ) # <- is that right?

[02:25] <camelia> rakudo-moar b19df9: OUTPUT: «6␤»

[02:25] *** Possum joined
[02:25] <geekosaur> not actual capture, looks like

[02:25] <geekosaur> m: if ('a . c' ~~ /<.[ . ,]>/) { say $/.perl }

[02:25] <camelia> rakudo-moar b19df9: OUTPUT: «Match.new(ast => Any, list => (), hash => Map.new(()), to => 3, orig => "a . c", from => 2)␤»

[02:26] <SmokeMachine> geekosaur: looks the same to me...

[02:27] <geekosaur> that was my point, here it makes no difference but elsewhere it means don;'t capture

[02:27] <geekosaur> so "superstitious"

[02:27] <geekosaur> m: say [+] ( 1;10, 2;20, 3,30, 9 ) 

[02:27] <camelia> rakudo-moar b19df9: OUTPUT: «7␤»

[02:28] <geekosaur> that's what I thought :) it's adding the lengths of the sublists

[02:28] <SmokeMachine> m: say [+] ( 1;10, 2;20, 3,30; 5; 5; 5; 5 ) # <- is that right?

[02:28] <camelia> rakudo-moar b19df9: OUTPUT: «26␤»

[02:29] <SmokeMachine> m: say [+] ( 1;10, 2;20, 3,30; 1,2,3,4,5,6,7 ) # <- is that right?

[02:29] <camelia> rakudo-moar b19df9: OUTPUT: «13␤»

[02:29] <SmokeMachine> should it do that?

[02:30] <geekosaur> looks consistent to me, no idea if it is correct

[02:31] <geekosaur> not sure [+] is even meaningful in that context, but I will guess this is using a behavior we want in other contexts (treating a list as its length in numeric context was recently mentioned on one of the mailing lists)

[02:31] <geekosaur> "every DWIM has a WAT"

[02:31] *** spebern left
[02:32] <SmokeMachine> its using <arglist>+ % ';'

[02:34] *** cdg left
[03:01] <SmokeMachine> m: say [~] ( 1;10, 2;20, 3,30; 1,2,3,4,5,6,7 ) # <- is that right?

[03:01] <camelia> rakudo-moar b19df9: OUTPUT: «110 220 3 301 2 3 4 5 6 7␤»

[03:02] <liAealneDx> SmokeMachine: your whitespace is a bit confusing…

[03:02] <liAealneDx> m: say [~] ( 1; 10,2; 20,3,30; 1,2,3,4,5,6,7 ) # <- is that right?

[03:02] <camelia> rakudo-moar b19df9: OUTPUT: «110 220 3 301 2 3 4 5 6 7␤»

[03:04] <liAealneDx> SmokeMachine: and yea, it is

[03:04] <SmokeMachine> is there ant way to print something from inside of src/Perl6/Grammar.nqp to debug?

[03:04] <liAealneDx> SmokeMachine: list stringify with spaces, and you just concat them all together

[03:05] <SmokeMachine> im trying to understand this bug: 

[03:05] <liAealneDx> SmokeMachine: as for printing from Grammar.nqp, maybe you want --target=parse or --target=ast instead?

[03:05] <MasterDuke> SmokeMachine: try note()

[03:05] <SmokeMachine> m: say [+] ( ^10 .grep: *.is-prime )

[03:05] <camelia> rakudo-moar b19df9: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3say [+] ( ^10 .7⏏5grep: *.is-prime )␤»

[03:06] <liAealneDx> ah

[03:06] <SmokeMachine> liAealneDx, MasterDuke thanks!

[03:07] <liAealneDx> SmokeMachine: ah, you have an error! Then --target won't help

[03:07] <geekosaur> that strikes me as parser weird based on . handling, unrelated to reduction as such. iirc "^10 .grep" working there is taking advantage of an edge case that doesn't exist in that situation?

[03:08] <liAealneDx> SmokeMachine: but --ll-exception probably will

[03:08] <geekosaur> that is, working when typed by itself

[03:08] *** Cabanossi left
[03:09] <SmokeMachine> m: say sum ^10 .grep: *.is-prime

[03:09] <camelia> rakudo-moar b19df9: OUTPUT: «17␤»

[03:10] <SmokeMachine> geekosaur: ^ if it was not related to reduce, would it work?

[03:10] *** Cabanossi joined
[03:11] <geekosaur> I think the point is more that it's an edge case, and one not really reliable

[03:11] <geekosaur> '^10 .grep' is a hack to avoid parentheses, not intended behavior but taking advantage of an edge case

[03:12] <SmokeMachine> geekosaur: with parentheses it does work...

[03:12] <geekosaur> (because otherwise it parses as ^(10.grep: ...)

[03:12] <geekosaur> someone discovered that adding the space just happened to do the right thing in at least some cases

[03:12] <geekosaur> that does not make it an advertised feature

[03:12] <liAealneDx> ehhh… ok…

[03:12] <geekosaur> s/right/"expected"/

[03:12] <liAealneDx> bisect: old=2015.07 say sum ^10 .grep: *.is-prime

[03:12] <bisectable6> liAealneDx, Bisecting by exit code (old=2015.07 new=b19df9f). Old exit code: 1

[03:13] <bisectable6> liAealneDx, bisect log: https://gist.github.com/f7cf2c2b81089545d6a93cedf397f971

[03:13] <bisectable6> liAealneDx, (2015-11-14) https://github.com/rakudo/rakudo/commit/6d970110df1c9fc160833137c66d8394b8b9b328

[03:13] <liAealneDx> :o

[03:13] <geekosaur> as a side effect of making . behave more like an infix operator instead of special syntax

[03:13] <geekosaur> iirc

[03:14] <SmokeMachine> geekosaur: isn't the ^10 .grep the dotty:sym<.>?

[03:14] <liAealneDx> bisect: old=2015.07 say ^10 .sum

[03:14] <bisectable6> liAealneDx, Bisecting by exit code (old=2015.07 new=b19df9f). Old exit code: 1

[03:14] *** eroux left
[03:14] <bisectable6> liAealneDx, bisect log: https://gist.github.com/4abb0c55d3e1a69662d7ebae797c4859

[03:14] <bisectable6> liAealneDx, (2015-11-14) https://github.com/rakudo/rakudo/commit/6d970110df1c9fc160833137c66d8394b8b9b328

[03:14] <liAealneDx> oh come on

[03:14] <geekosaur> it took a parser hack to get that to be recognized, is what I recall

[03:14] <liAealneDx> bisect: old=2015.07 say 5 .Int

[03:14] <bisectable6> liAealneDx, Bisecting by exit code (old=2015.07 new=b19df9f). Old exit code: 1

[03:14] <bisectable6> liAealneDx, bisect log: https://gist.github.com/9276cc9c7912d65af40c6eea840f0391

[03:14] <bisectable6> liAealneDx, (2015-09-26) https://github.com/rakudo/rakudo/commit/cb25b2f475f31335d77d018474482aceec2c74de

[03:15] <liAealneDx> there we have it

[03:15] <geekosaur> and I recall it being made under duress, in part because it would be susceptible to weird behavior at times

[03:16] *** khw left
[03:16] <liAealneDx> so it wasn't so much for omitting parens, but for making .= consistent-ish and to allow you to write method calls across many lines

[03:17] <geekosaur> right, that. the omitting parens thing was found afterward as a convenient side effect

[03:17] <geekosaur> but it's going to screw up in cases like the reported "bug"

[03:17] <samcv> what broke now liAealneDx 

[03:17] <geekosaur> m: say [+] ( ^10 .grep: *.is-prime )

[03:17] <camelia> rakudo-moar b19df9: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3say [+] ( ^10 .7⏏5grep: *.is-prime )␤»

[03:17] <liAealneDx> samcv: nothing? All bots seem to be working? :)

[03:17] <samcv> oh ok

[03:18] <samcv> no regressions or anything, sorry haven't read the scrollback

[03:18] <liAealneDx> statisfiable6: libmoar

[03:18] <statisfiable6> liAealneDx, OK! Working on it…

[03:18] <liAealneDx> samcv: we were just discussing the reasons why infix . was added, this is the commit that does it

[03:19] <statisfiable6> liAealneDx, https://gist.github.com/df58eb2b441d4c23e71baf7b98c0d254

[03:19] <liAealneDx> .oO( even statisfiable is working! Wow! )

[03:20] *** xtreak joined
[03:20] <samcv> hmm

[03:20] <samcv> m: 'string' .say

[03:20] <camelia> rakudo-moar b19df9: OUTPUT: «string␤»

[03:20] <samcv> m: 'string' . say

[03:20] <camelia> rakudo-moar b19df9: OUTPUT: «string␤»

[03:20] <samcv> interesting… never tried that before

[03:21] <liAealneDx> samcv: it is kinda not that surprising given that you can do $x .= foo;

[03:21] <samcv> yeah i guess so

[03:22] <liAealneDx> if only it worked :)

[03:22] <liAealneDx> m: say 42 . WHAT

[03:22] <camelia> rakudo-moar b19df9: OUTPUT: «===SORRY!===␤Method call must either supply a name or have a child node that evaluates to the name␤»

[03:22] <samcv> well it seems to work sometimes

[03:22] <samcv> but it's broken for other things?

[03:22] <liAealneDx> m: [+] (^10 .Int)

[03:22] <camelia> rakudo-moar b19df9: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3[+] (^10 .7⏏5Int)␤»

[03:23] <liAealneDx> m: say [+] ((^10).Int)

[03:23] <camelia> rakudo-moar b19df9: OUTPUT: «10␤»

[03:23] *** cibs left
[03:23] <samcv> m: 'blah'                  .                         say

[03:23] <camelia> rakudo-moar b19df9: OUTPUT: «blah␤»

[03:24] <samcv> m: ("(1,2,3,3)" ~ '.list' x 100).EVAL.say

[03:24] <camelia> rakudo-moar b19df9: OUTPUT: «(1 2 3 3)␤»

[03:24] <samcv> m: ("(1,2,3,3)" ~ '.list' x 1000).EVAL.say

[03:24] <camelia> rakudo-moar b19df9: OUTPUT: «(1 2 3 3)␤»

[03:24] <samcv> m: ("(1,2,3,3)" ~ '.list' x 1000000).EVAL.say

[03:24] *** cibs joined
[03:24] <camelia> rakudo-moar b19df9: OUTPUT: «(timeout)»

[03:25] <samcv> heh

[03:38] <BenGoldberg> .WHAT isn't actually a method.

[03:39] *** noganex_ joined
[03:39] <BenGoldberg> It's a perl6 builtin which *looks* like a method call.

[03:39] <BenGoldberg> m: 42.^find_method('WHAT').say;

[03:39] <camelia> rakudo-moar b19df9: OUTPUT: «(Mu)␤»

[03:40] <BenGoldberg> m: 42.^find_method('Str').say;

[03:40] <camelia> rakudo-moar b19df9: OUTPUT: «Str␤»

[03:40] <BenGoldberg> m: dd $_ for 42.^find_method('WHAT');

[03:40] <camelia> rakudo-moar b19df9: OUTPUT: «No such method 'map' for invocant of type 'Mu'␤  in block <unit> at <tmp> line 1␤␤»

[03:41] <BenGoldberg> m: dd 42.^find_method('WHO');

[03:41] <camelia> rakudo-moar b19df9: OUTPUT: «Mu␤»

[03:41] <BenGoldberg> m: dd 42.^find_method('WHERE');

[03:41] <camelia> rakudo-moar b19df9: OUTPUT: «Method WHERE = method WHERE (Mu $: *%_) { #`(Method|56877648) ... }␤»

[03:41] <BenGoldberg> s: 42, 'WHERE'

[03:41] *** noganex left
[03:43] <samcv> yeah i know that BenGoldberg 

[03:43] <samcv> fake methods

[03:43] <samcv> WHAT is one of my favorite methods though

[03:43] *** liAealneDx left
[03:44] <BenGoldberg> Certainly my favorite fake method, too :)

[03:44] <BenGoldberg> m: say 42 . Str;

[03:44] <camelia> rakudo-moar b19df9: OUTPUT: «42␤»

[03:44] <BenGoldberg> m: say 42 . WHAT;

[03:44] <camelia> rakudo-moar b19df9: OUTPUT: «===SORRY!===␤Method call must either supply a name or have a child node that evaluates to the name␤»

[03:45] <BenGoldberg> It's not really that strange that the fake methods don't perfectly resemble real methods.

[03:45] <BenGoldberg> bisectable6, help

[03:45] <bisectable6> BenGoldberg, Like this: bisectable6: old=2015.12 new=HEAD exit 1 if (^∞).grep({ last })[5] // 0 == 4 # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Bisectable

[03:45] <BenGoldberg> bisectable6: say 42 . WHAT

[03:45] <bisectable6> BenGoldberg, On both starting points (old=2015.12 new=b19df9f) the exit code is 1 and the output is identical as well

[03:45] <bisectable6> BenGoldberg, Output on both points: «===SORRY!===␤Method call must either supply a name or have a child node that evaluates to the name»

[03:46] <BenGoldberg> bisectable6: say 42 . Str

[03:46] <bisectable6> BenGoldberg, On both starting points (old=2015.12 new=b19df9f) the exit code is 0 and the output is identical as well

[03:46] <bisectable6> BenGoldberg, Output on both points: «42»

[03:46] <BenGoldberg> Hmm, longstanding behavior, but still a LTA error message.

[03:46] *** Actualeyes left
[03:53] *** Cabanossi left
[03:55] *** Cabanossi joined
[03:55] <geekosaur> I think there's a bug for it already

[03:55] <geekosaur> .WHAT is special

[03:56] <geekosaur> so alternative syntax doesn't work for it (it's in effect a macro wired into the grammar)

[03:56] *** itaipu joined
[03:57] <geekosaur> same with .HOW and the other uppercase ones (except for one that isn't for some reason), they are "macros" that turn into MOP lookups

[03:57] *** wamba1 joined
[03:57] *** BenGoldberg left
[03:57] <geekosaur> you'd have to teach infix:sym<.> to support these specials, or find a way to hack the grammar to recognize them with infix:sym<.>

[04:05] *** Cabanossi left
[04:06] *** Cabanossi joined
[04:08] <SmokeMachine> I think that's why that doesn't work: https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Grammar.nqp#L4314

[04:09] <SmokeMachine> But why that's "not allowed" inside a reduce?

[04:11] *** mcmillhj joined
[04:12] <geekosaur> https://github.com/rakudo/rakudo/commit/ef814c33bb87edce70f9071e14ab5bb5150b52c5

[04:13] <geekosaur> ...you tell me; I'm not sure what the commit message means

[04:14] *** orevdiabl left
[04:14] *** revdiablo joined
[04:17] <geekosaur> actually, looking at this more closely, I suspect it was a thinko

[04:17] <geekosaur> infix:sym<.> was justified by the existence of metaops, so it got treated as a metaop

[04:18] <geekosaur> I suspect that line could just be removed

[04:18] <geekosaur> (the other change in that commit is still needed to disallow metaops)

[04:19] <geekosaur> but, that should probably be carefully tested

[04:19] <geekosaur> unless the metaops all somehow chain off the infix:<.> rule somehow

[04:22] <geekosaur> actually I think they *do* chain off that, and there's no way to distinguish . from a metaop involving .

[04:22] *** faraco joined
[04:23] <geekosaur> (such as .=)

[04:35] <SmokeMachine> geekosaur: I'll try that tomorrow...

[04:36] *** Actualeyes joined
[04:38] *** mcmillhj left
[04:43] <SmokeMachine> geekosaur: thanks

[04:43] <geekosaur> I still suspect it won't work right because the metaops all use that same entry

[04:44] *** skids left
[04:51] *** aborazmeh left
[04:55] *** itaipu_ joined
[04:58] *** itaipu left
[04:59] *** mcmillhj joined
[05:02] *** Cabanossi left
[05:03] *** Cabanossi joined
[05:04] *** mcmillhj left
[05:05] *** cibs left
[05:07] *** cibs joined
[05:08] *** wamba1 left
[05:12] *** mr-foobar joined
[05:16] *** labster left
[05:28] *** xtreak left
[05:29] *** xtreak joined
[05:31] *** mcmillhj joined
[05:31] *** xtreak left
[05:34] *** xtreak joined
[05:36] *** mcmillhj left
[05:47] *** kaare__ left
[05:48] *** kaare__ joined
[05:49] *** labster joined
[05:59] *** xtreak left
[06:03] *** curan joined
[06:03] *** mcmillhj joined
[06:07] *** xtreak joined
[06:08] *** mcmillhj left
[06:09] *** mcmillhj joined
[06:14] *** mcmillhj left
[06:15] *** domidumont joined
[06:18] *** rba_ left
[06:18] *** gdonald left
[06:19] *** gdonald joined
[06:20] *** shmibs left
[06:21] *** shmibs joined
[06:22] *** CIAvash joined
[06:23] *** rurban joined
[06:26] *** shmibs left
[06:27] *** mcmillhj joined
[06:32] *** mcmillhj left
[06:32] *** Cabanossi left
[06:33] *** Cabanossi joined
[06:35] *** domidumont left
[06:35] *** faraco left
[06:40] *** obfusk left
[06:40] *** obfusk joined
[06:50] *** RabidGravy joined
[06:57] *** domidumont joined
[07:00] *** shmibs joined
[07:04] *** rindolf joined
[07:11] *** astj left
[07:11] *** astj joined
[07:13] *** shmibs left
[07:14] *** shmibs joined
[07:15] <RabidGravy> Boom!

[07:21] *** vendethiel- joined
[07:22] *** vendethiel left
[07:23] *** mcmillhj joined
[07:24] *** shmibs left
[07:26] *** shmibs joined
[07:26] *** koki1 joined
[07:28] *** vendethiel joined
[07:28] *** mcmillhj left
[07:29] *** vendethiel- left
[07:30] *** mcmillhj joined
[07:32] *** eroux joined
[07:33] *** darutoko joined
[07:34] *** bjz joined
[07:37] *** mcmillhj left
[07:37] *** wamba joined
[07:39] *** mcmillhj joined
[07:41] *** parv joined
[07:42] *** shmibs left
[07:42] *** parv left
[07:42] *** parv joined
[07:43] *** shmibs joined
[07:44] *** mcmillhj left
[07:46] *** mcmillhj joined
[07:50] *** rba_ joined
[07:51] *** mcmillhj left
[07:56] *** xtreak left
[07:58] *** xtreak joined
[08:03] *** mcmillhj joined
[08:06] *** ufobat joined
[08:07] *** mcmillhj left
[08:08] *** redhands joined
[08:08] *** redhands left
[08:13] *** gdonald left
[08:13] *** gdonald joined
[08:18] *** Cabanossi left
[08:19] *** Cabanossi joined
[08:30] *** mcmillhj joined
[08:30] *** titsuki left
[08:35] *** mcmillhj left
[08:39] *** rba_ left
[08:39] *** cyphase left
[08:40] *** mcmillhj joined
[08:43] *** wamba left
[08:44] *** cyphase joined
[08:45] *** mcmillhj left
[08:47] *** mcmillhj joined
[08:52] *** mcmillhj left
[08:54] *** wamba joined
[08:55] *** bjz_ joined
[08:56] *** bjz left
[09:02] *** abraxxa joined
[09:04] *** mcmillhj joined
[09:09] *** Actualeyes left
[09:09] *** setty1 joined
[09:09] *** mcmillhj left
[09:11] *** domidumont left
[09:12] *** domidumont joined
[09:12] *** Ven joined
[09:14] *** dakkar joined
[09:22] *** mienaikage left
[09:25] *** xtreak left
[09:28] *** mcmillhj joined
[09:29] *** Xliff__ joined
[09:31] *** Cabanossi left
[09:33] *** Xliff_ left
[09:33] *** zakharyas joined
[09:33] *** mcmillhj left
[09:34] *** Cabanossi joined
[09:36] *** aborazmeh joined
[09:36] *** aborazmeh left
[09:36] *** aborazmeh joined
[09:45] *** xtreak joined
[09:46] *** jonas1 joined
[09:51] <llfourn> m: .say for qw<a < b > c > # looks like a bug

[09:51] <camelia> rakudo-moar b19df9: OUTPUT: «a␤<b>␤c␤»

[09:51] *** mcmillhj joined
[09:52] <Ven> m: .say for qw<<a < b > c >>

[09:52] <camelia> rakudo-moar b19df9: OUTPUT: «a␤<␤b␤>␤c␤»

[09:52] <Ven> m: say <a < b > c>.perl

[09:52] <camelia> rakudo-moar b19df9: OUTPUT: «Value of type List uselessly passed to val()␤  in block <unit> at <tmp> line 1␤("a", "<b>", "c")␤»

[09:52] <Ven> ...interesting.

[09:52] <llfourn> huh o.O

[09:53] *** bjz_ left
[09:56] *** mcmillhj left
[09:57] <moritz> that looks bogus

[09:58] <samcv> bisectable6,  say <a < b > c>.perl

[09:58] <bisectable6> samcv, Bisecting by output (old=2015.12 new=b19df9f) because on both starting points the exit code is 0

[09:59] <bisectable6> samcv, bisect log: https://gist.github.com/04d401ab7ebd19ce8894eccfaa1b0a87

[09:59] <bisectable6> samcv, (2016-09-01) https://github.com/rakudo/rakudo/commit/631e2f770e83da5420b0b3ecfe611e6892a7df4f

[09:59] <moritz> this is not the commit you are looking for.

[09:59] <samcv> it would make little sense

[09:59] <Ven> the formatting of the error changed? hah

[10:00] <samcv> bisectable6, help

[10:00] <bisectable6> samcv, Like this: bisectable6: old=2015.12 new=HEAD exit 1 if (^∞).grep({ last })[5] // 0 == 4 # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Bisectable

[10:00] <samcv> bisectable6, old=2016.05 say <a < b > c>.perl

[10:00] <bisectable6> samcv, Bisecting by output (old=2016.05 new=b19df9f) because on both starting points the exit code is 0

[10:00] <bisectable6> samcv, bisect log: https://gist.github.com/a56a939d3454ecec209fee2b8e029d3c

[10:00] <bisectable6> samcv, (2016-09-01) https://github.com/rakudo/rakudo/commit/631e2f770e83da5420b0b3ecfe611e6892a7df4f

[10:00] *** bjz joined
[10:01] <samcv> bisectable6, old=2016.10 say <a < b > c>.perl

[10:01] <bisectable6> samcv, On both starting points (old=2016.10 new=b19df9f) the exit code is 0 and the output is identical as well

[10:01] <bisectable6> samcv, Output on both points: «Value of type List uselessly passed to val()␤  in block <unit> at /tmp/2w5E8yaLhu line 1␤("a", "<b>", "c")»

[10:01] <samcv> ok maybe something around that time?

[10:01] <samcv> did that just add a newline difference to the messages?

[10:01] <IOninja> Why does it look bogus?

[10:01] <Ven> samcv: seems like it yes

[10:02] <samcv> bisectable6, old=2016.05 say <a < b > c>.perl.chomp

[10:02] <bisectable6> samcv, Bisecting by output (old=2016.05 new=b19df9f) because on both starting points the exit code is 0

[10:02] <bisectable6> samcv, bisect log: https://gist.github.com/d7e19aac6d2a585dc7e61c7a8d7b1913

[10:02] <bisectable6> samcv, (2016-09-01) https://github.com/rakudo/rakudo/commit/631e2f770e83da5420b0b3ecfe611e6892a7df4f

[10:02] *** lizmat left
[10:03] *** lizmat joined
[10:03] <samcv> ok so i think it's been there at least since end of 2015

[10:06] <IOninja> llfourn: your ticket is a dupe of 130205

[10:06] <samcv> also should those < > be their own items in the resulting list?

[10:06] <samcv> m: say qw/a < b > c/.perl

[10:06] <camelia> rakudo-moar b19df9: OUTPUT: «("a", "<", "b", ">", "c")␤»

[10:06] <samcv> m: say qw<a < b > c>.perl

[10:06] <camelia> rakudo-moar b19df9: OUTPUT: «("a", "<b>", "c")␤»

[10:08] *** mcmillhj joined
[10:08] <Ven> m: say <a 1 b>[1].perl; say qw<a 1 b>[1].perl;

[10:08] <camelia> rakudo-moar b19df9: OUTPUT: «IntStr.new(1, "1")␤"1"␤»

[10:08] <Ven> okay, so qw doesn't use `val`, hence there's no error message

[10:09] *** parv left
[10:10] <IOninja> https://rt.perl.org/Ticket/Display.html?id=130205

[10:10] *** donaldh joined
[10:11] <llfourn> IOninja: rgr that. I tried searching for "qw" and "word quote" but no dice :P

[10:11] <IOninja> Yeah, took me a bit to find that ticket too.

[10:11] <IOninja> And I *knew* it was there :)

[10:11] <llfourn> heh :)

[10:11] *** parv joined
[10:11] *** parvx joined
[10:12] *** mcmillhj left
[10:13] *** n1ce joined
[10:14] *** pullphinger joined
[10:21] *** liAealneDx joined
[10:30] *** salva left
[10:31] *** salva joined
[10:31] *** Cabanossi left
[10:31] *** mcmillhj joined
[10:34] *** Cabanossi joined
[10:36] *** mcmillhj left
[10:45] <IOninja> samcv: use .^name instead

[10:45] *** notbenh left
[10:45] <IOninja> ooops

[10:45] <IOninja> Was scrolled up :}

[10:45] <samcv> oh ok

[10:45] <samcv> haha

[10:45] <samcv> and which one is that refering to?

[10:45] <samcv> for routine names?

[10:45] <IOninja> samcv │ WHAT is one of my favorite methods though

[10:45] <IOninja> and it not working with spaces around .

[10:45] <IOninja> m: say 42   .   ^name

[10:45] <camelia> rakudo-moar cc9192: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of . to concatenate strings; in Perl 6 please use ~␤at <tmp>:1␤------> 3say 42   .7⏏5   ^name␤»

[10:45] <IOninja> BAh

[10:45] <IOninja> Nevermind then, I guess :)

[10:46] <IOninja> Stupid Perl 5.

[10:46] <samcv> :)

[10:46] *** mcmillhj joined
[10:46] <Ven> :P

[10:46] <Ven> .oO( there's a slang for that! )

[10:47] *** notbenh joined
[10:48] <IOninja> SmokeMachine: ASTs have .DUMP method too, so you can note($some-ast.DUMP); them. It'll produce same output as --target=parse but just for that AST

[10:51] *** geekosaur left
[10:51] *** geekosaur joined
[10:51] *** mcmillhj left
[10:52] <samcv> you can call DUMP on Mu even

[10:52] <samcv> that's cool about AST's though :) perl 6 is great

[10:59] <Ven> m: quasi { 1 }.DUMP.say

[10:59] <camelia> rakudo-moar cc9192: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Use of macros is experimental; please 'use experimental :macros'␤at <tmp>:1␤------> 3quasi7⏏5 { 1 }.DUMP.say␤»

[10:59] <Ven> m: use experimental :macros; quasi { 1 }.DUMP.say

[10:59] <Ven> m: say 1

[11:00] <Ven> ..did I kill camelia?

[11:00] <camelia> rakudo-moar cc9192: OUTPUT: «(timeout)Use of uninitialized value <element> of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤Use of uninitialized value <element> of type A…»

[11:00] <camelia> rakudo-moar cc9192: OUTPUT: «1␤»

[11:00] <Ven> ah I triggered an infinite loop.

[11:02] *** Cabanossi left
[11:03] *** mcmillhj joined
[11:03] *** Cabanossi joined
[11:04] *** sena_kun joined
[11:08] *** mcmillhj left
[11:11] <DrForr> Is there by chance a variant on the for @x -> $a,$b that restocks $a with @x[1] and $b with @x[2] after the first iteration, rather than @x[2] and @x[3]?

[11:11] *** domidumont left
[11:12] <Ven> DrForr: I'm not sure what you mean? restocks?

[11:12] <Ven> shifts index by one?

[11:12] <DrForr> Heh, I knew I was going to have a problem explaining that. Yes, shifts by one woudl be a better way to put it.

[11:12] <DrForr> I know it's trivial to do with a variable and a bit of logic, but I thought that there might be an adverb modifier.

[11:13] <DrForr> Basically have $a be the current iteration, $b be the next.

[11:13] <jnthn> DrForr: Could .rotor help?

[11:13] <Ven> that also *could* sound like a reduce()?

[11:14] <DrForr> I'll look.

[11:15] <DrForr> I'm thinking about how to "cleanly" look one token ahead while walking the array, because I want to modify $a if $b ~~ Perl6::Balanced::Enter.

[11:15] <Ven> ah, so no, not reduce

[11:16] *** rurban left
[11:17] <DrForr> Hrm, not quite, but it does give me a better way to show what I'm after.

[11:17] <DrForr> say ('a'..'h').magic(...).join('|'); =>  <a b|b c|c d|d e>...

[11:19] <Ven> m: say ('a'..'h').comb(2)

[11:19] <camelia> rakudo-moar 47a2a4: OUTPUT: «(a  b  c  d  e  f  g  h)␤»

[11:19] <Ven> m: say ('a'..'h').comb(2).join('|')

[11:19] <camelia> rakudo-moar 47a2a4: OUTPUT: «a |b |c |d |e |f |g |h␤»

[11:19] <Ven> m: say ('a'..'h').combinations(2).join('|')

[11:19] <camelia> rakudo-moar 47a2a4: OUTPUT: «a b|a c|a d|a e|a f|a g|a h|b c|b d|b e|b f|b g|b h|c d|c e|c f|c g|c h|d e|d f|d g|d h|e f|e g|e h|f g|f h|g h␤»

[11:19] <Ven> ah, of course not.

[11:21] <DrForr> I'll look through the rest fo the List documentation, I suppose.

[11:21] <Ven> m: my @a = 'a'..'h'; @a[1..*].map({my $idx++;@a[$idx-1], @a[$idx]}).join('|');

[11:21] <camelia> rakudo-moar 47a2a4: ( no output )

[11:21] <Ven> m: my @a = 'a'..'h'; @a[1..*].map({my $idx++;@a[$idx-1], @a[$idx]}).join('|').say;

[11:21] <camelia> rakudo-moar 47a2a4: OUTPUT: «a b|a b|a b|a b|a b|a b|a b␤»

[11:21] <Ven> m: my @a = 'a'..'h'; @a[1..*].map({state $idx++;@a[$idx-1], @a[$idx]}).join('|').say;

[11:21] <camelia> rakudo-moar 47a2a4: OUTPUT: «a b|b c|c d|d e|e f|f g|g h␤»

[11:21] <Ven> DrForr: something like this?

[11:22] <DrForr> Yes.

[11:22] <lizmat> DrForr: so why doesn't rotor do what you want ?

[11:22] *** mcmillhj joined
[11:23] <DrForr> Oh, wait, I didn't read clearly. rotor(2 => -1) # I think does what I need.

[11:23] <Ven> m: say ('a'..'h').rotor(2 => -1).join: '|'

[11:23] <camelia> rakudo-moar 47a2a4: OUTPUT: «a b|b c|c d|d e|e f|f g|g h␤»

[11:23] <Ven> I really need to take a look at rotor to understand what it does.

[11:24] <lizmat> m: my @a = <a b c d e f g h>; dd @a.rotor(2 => -1).map: -> $a, $b = "foo" { "$a|$b" }

[11:24] <camelia> rakudo-moar 47a2a4: OUTPUT: «("a b|b c", "c d|d e", "e f|f g", "g h|foo").Seq␤»

[11:24] <Ven> ah, okay. hey, that's pretty cool. 2 => -1 takes 2, then takes a step back to continue

[11:25] <DrForr> Well, probably needs the :partial modifier as well.

[11:25] <Ven> I don't think you can have a partial one?

[11:25] <Ven> with 2 => -1, at least.

[11:25] <DrForr> Oh, yeah, with 2, not possible.

[11:26] <lizmat> m: my @a = <a b c d e f g h>; dd @a.rotor(2 => -1).map: -> ($a, $b) { "$a|$b" }

[11:26] <camelia> rakudo-moar 47a2a4: OUTPUT: «("a|b", "b|c", "c|d", "d|e", "e|f", "f|g", "g|h").Seq␤»

[11:26] <DrForr> Also getting nostalgic again - background moise this week has been glass blowing videos.

[11:26] <DrForr> lizmat: Yeah, that's what I just did.

[11:26] <Ven> lizmat++ for perl6 goodness :).

[11:27] *** mcmillhj left
[11:28] <DrForr> lizmat++ Ven++ jnthn++ # multumeşc

[11:31] <DrForr> *noise

[11:34] *** rindolf left
[11:35] *** pullphinger left
[11:36] *** mcmillhj joined
[11:38] *** rindolf joined
[11:40] *** mcmillhj left
[11:41] <Ven> IOninja: your twitter is really amazing, so many gems. I always throw your screenshots around and they sure pique people's interest

[11:41] *** aborazmeh left
[11:41] <DrForr> I just use them to troll :)

[11:43] *** liAealneDx left
[11:44] <Ven> yes, that works as well. :D

[11:51] *** xtreak left
[11:51] <DrForr> Especially with the ZOMG I CANT SEARCH FOR THAT ON MY KEYBOARD crowd.

[11:52] *** mcmillhj joined
[11:53] *** TEttinger left
[11:54] *** Peter_R left
[11:54] *** Peter_R joined
[11:54] *** rurban joined
[11:56] *** CQ joined
[11:57] *** mcmillhj left
[11:59] <tbrowder>  o/ hallo #perl6

[11:59] <DrForr> \o

[12:00] *** salv0 joined
[12:00] <Ven> \o

[12:00] <tbrowder> i'm having a 'pick' problem i need help with

[12:01] <SHODAN> clarify

[12:01] *** labster left
[12:01] <tbrowder> give me some time to show it here and i hope you can see what i'm doing wrong

[12:04] <tbrowder> m: sub foo(UInt $a){say $a}; my @b = 2..20; my @c = @b; for @b -> $b { my $d = pick @c; foo $d}

[12:04] <camelia> rakudo-moar 47a2a4: OUTPUT: «Type check failed in binding to '$a'; expected Int but got List ($( ))␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:05] <tbrowder> that's my problem. i have tried various ways to fix it but no luck.

[12:06] <tbrowder> i need an int or cool from a range

[12:06] <tbrowder> imean i need a random int from a range

[12:08] <tbrowder> i think i could use rand but i thought pick woul be more p6ish

[12:08] <CIAvash> m: sub foo(UInt $a){say $a}; my @b = 2..20; my @c = @b; for @b -> $b { my $d = @c.pick; foo $d}

[12:08] <camelia> rakudo-moar 47a2a4: OUTPUT: «15␤10␤18␤18␤19␤13␤2␤6␤7␤14␤17␤3␤4␤14␤19␤16␤18␤10␤9␤»

[12:10] <tbrowder> aha! so the routine 'pick' is not very friendly, eh? thanks, CIAvash!

[12:11] <IOninja> s: &pick

[12:11] <SourceBaby> IOninja, Sauce is at https://github.com/rakudo/rakudo/blob/47a2a42/src/core/Any.pm#L494

[12:11] *** mcmillhj joined
[12:11] <IOninja> It is pretty friendly if you consult the documentation :)

[12:12] * IOninja tacks on `Numeric` constraint on pick count

[12:12] <tbrowder>  not really, the docs are quite confusing for the sub to me.

[12:13] <IOninja> tbrowder: `multi sub    pick($count, *@list --> Seq:D)` <--- where's your $count?

[12:13] <tbrowder> i get the same problem with pick 1

[12:14] <tbrowder> but returning the seq is part of the problem

[12:15] <IOninja> Ah

[12:15] *** mcmillhj left
[12:16] <tbrowder> got to go now but later i'll show more variants i tried. i think part of my problem is really understanding diffs between lists, ranges, arrays...

[12:17] <CIAvash> m: sub foo(UInt $a){say $a}; my @b = 2..20; my @c = @b; for @b -> $b { my $d = pick(1, @c).head; foo $d}

[12:17] *** Cabanossi left
[12:17] <camelia> rakudo-moar 47a2a4: OUTPUT: «19␤6␤4␤13␤18␤4␤14␤12␤10␤12␤12␤16␤11␤3␤17␤20␤4␤4␤7␤»

[12:17] <tbrowder> subtle diffs

[12:17] <IOninja> tbrowder: I think in this case the problem is the special-casing of `.pick` without a count to return the item instead of the Seq.

[12:17] <IOninja> Which isn't available in sub form.

[12:17] <IOninja> |pick 1, @c; is shorter :)

[12:18] <tbrowder> ok, that makes sense but i think the docs may be wrong then

[12:18] <tbrowder> thanks, will be back later, bye

[12:19] *** Cabanossi joined
[12:20] <Geth> ¦ doc: 050f4b7e71 | (Zoffix Znet)++ | doc/Type/List.pod6

[12:20] <Geth> ¦ doc: Clarify pick

[12:20] <Geth> ¦ doc: 

[12:20] <Geth> ¦ doc: Note that only in method form can count be omitted to

[12:20] <Geth> ¦ doc: produce a single item instead of a Seq

[12:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/050f4b7e71

[12:24] *** eroux left
[12:29] *** bjz left
[12:29] <IOninja> `IOninja tacks on `Numeric` constraint on pick count`

[12:30] *** lukaramu joined
[12:30] <IOninja> Never mind. There are too many tests blocking it. Would also need a Whatever and Str candidates; not sure if anything else is testing for it too

[12:30] <sena_kun> is there a way to mark a module as deprecated or something like that? Or bold text in the README is my way?

[12:30] *** mcmillhj joined
[12:33] <IOninja> sub EXPORT is DEPRECTATED("don't use this") {} # maybe?

[12:33] *** kaare__ left
[12:33] <IOninja> Oh wait

[12:33] <sena_kun> hmm, let's try...

[12:33] <IOninja> sub EXPORT is DEPRECTATED("The thing people should be using instead") {} # maybe?

[12:34] *** gdonald left
[12:34] *** gdonald joined
[12:34] <sena_kun> Yes, surely. But I thought more about modules.perl6 site. Well, nevermind, I don't know what I want anyway.

[12:35] <IOninja> sena_kun: stick "DEPRECATED" as the first word in "description" in META file; that'll show up on the site

[12:35] *** mcmillhj left
[12:35] <IOninja> or...

[12:35] <sena_kun> ah, cool. thanks, IOninja

[12:35] <IOninja> 𝐃𝐄𝐏𝐑𝐄𝐂𝐀𝐓𝐄𝐃

[12:35] <IOninja> :D

[12:35] *** wamba left
[12:35] *** domidumont joined
[12:35] <IOninja> sub 𝐃𝐄𝐏𝐑𝐄𝐂𝐀𝐓𝐄𝐃 { say "don't use me, bruh" }; 𝐃𝐄𝐏𝐑𝐄𝐂𝐀𝐓𝐄𝐃

[12:36] <IOninja> m: sub 𝐃𝐄𝐏𝐑𝐄𝐂𝐀𝐓𝐄𝐃 { say "don't use me, bruh" }; 𝐃𝐄𝐏𝐑𝐄𝐂𝐀𝐓𝐄𝐃

[12:36] <camelia> rakudo-moar 857432: OUTPUT: «don't use me, bruh␤»

[12:36] <IOninja> hah

[12:36] <DrForr> . o ( Susan? Is that you? )

[12:40] *** bjz joined
[12:40] *** wamba joined
[12:41] *** domidumont left
[12:42] *** domidumont joined
[12:42] *** eroux joined
[12:50] *** mcmillhj joined
[12:51] *** Sound joined
[12:53] *** eroux left
[12:54] <IOninja> m: sub 𝕲𝖆𝖓𝖌𝖘𝖙𝖆-𝖈𝖔𝖉𝖊-𝖞𝖔 { say "𝖍𝖆𝖙𝖊𝖗𝖘 𝖇𝖊 𝖍𝖆𝖙𝖎𝖓𝖌, 𝖋𝖔𝖔𝖑" }; 𝕲𝖆𝖓𝖌𝖘𝖙𝖆-𝖈𝖔𝖉𝖊-𝖞𝖔

[12:54] <camelia> rakudo-moar 857432: OUTPUT: «𝖍𝖆𝖙𝖊𝖗𝖘 𝖇𝖊 𝖍𝖆𝖙𝖎𝖓𝖌, 𝖋𝖔𝖔𝖑␤»

[12:54] <sjn> haha

[12:55] <sjn> that's horrible! :D

[12:56] *** aborazmeh joined
[12:56] *** aborazmeh left
[12:56] *** aborazmeh joined
[12:58] <IOninja> m: sub TOᴎ-ꙄI-TI-Oᴎ { say "TOᴎ-ꙄI-TI-Oᴎ".flip }; TOᴎ-ꙄI-TI-Oᴎ

[12:58] <camelia> rakudo-moar 857432: OUTPUT: «ᴎO-IT-IꙄ-ᴎOT␤»

[12:59] <IOninja> m: sub ₙₒ-ᵢₜ-ᵢₛ-ₙₒₜ { quietly say "no it is not"}; ₙₒ-ᵢₜ-ᵢₛ-ₙₒₜ

[12:59] <camelia> rakudo-moar 857432: OUTPUT: «no it is not␤»

[12:59] *** eroux joined
[13:03] *** pullphinger joined
[13:05] *** cdg joined
[13:07] *** kurahaupo joined
[13:09] <IOninja> m: use MONKEY; augment class Any { BEGIN { for Any.^methods: :all { try Any.^add_method: .name.ords».&[+](119711)».chr.join, $_ } } }; class 𝐅𝐎𝐎 { has $.𝐁𝐀𝐑; method 𝐁𝐀𝐑𝐌𝐄 { say "$!𝐁𝐀𝐑!" } }; 𝐅𝐎𝐎.𝐍𝐄𝐖(:42𝐁𝐀𝐑).𝐁𝐀𝐑𝐌𝐄

[13:09] <camelia> rakudo-moar 857432: OUTPUT: «42!␤»

[13:09] <IOninja> ehehe

[13:09] *** Khisanth left
[13:11] *** aborazmeh left
[13:11] <IOninja> 𝐅𝐎𝐎 is a valid module name innit?

[13:11] * IOninja contemplates an ecosystem test....

[13:12] <IOninja> Oh, I already did it with the  ווו  module. Never mind :)

[13:14] <El_Che> IOninja: Intervention time. You need to get off the urf8 stuff for some time ;)

[13:15] <IOninja> El_Che: way ahead of you.

[13:15] <DrForr> :encode(wtf-8)

[13:15] <IOninja> It's now time to donne the surgical gloves and blow ⁇‼ out of existence :)

[13:15] <El_Che> IOninja: it's because we care

[13:17] *** geekosaur left
[13:18] *** geekosaur joined
[13:22] *** Khisanth joined
[13:24] <Geth> ¦ doc: 3bdf5329ed | (Zoffix Znet)++ | doc/Language/unicode_texas.pod6

[13:24] <Geth> ¦ doc: Remove ⁇‼

[13:24] <Geth> ¦ doc: 

[13:24] <Geth> ¦ doc: See https://rt.perl.org/Ticket/Display.html?id=131002

[13:24] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/3bdf5329ed

[13:27] <IOninja> One thing I can say in favour of ⁇ is they're very easy to grep for :)

[13:27] *** pullphinger left
[13:29] <jnthn> Ah, it wasn't just me how saw ?? looking weird

[13:29] <jnthn> Uh, ⁇

[13:29] <jnthn> Or was in ‼

[13:29] <jnthn> *it

[13:29] *** sammers left
[13:30] <IOninja> They look decent enough on my current font. One thing I noticed is Twitter turns ‼ into a big red emoji

[13:33] *** kaare__ joined
[13:34] *** lukaramu_ joined
[13:35] <jnthn> Ah, rihgt, it was Twitter

[13:38] *** bjz left
[13:38] *** lukaramu left
[13:38] <sena_kun> DrForr, ping?

[13:38] * DrForr is ponged.

[13:40] <SmokeMachine> :(

[13:40] <IOninja> SmokeMachine: chin up :)

[13:41] <IOninja> Writing code that gets thrown away is a part of life.

[13:42] <sena_kun> DrForr, hi. I'm having some issues with Perl6::Parser. I've installed the module and copied implementation of Tidy+the example of usage(the gist is https://gist.github.com/Altai-man/44f1a4085a237c6645bfe64820622a48). But it gives me "Cannot resolve caller iterator(Perl6::Parser: Str);" error. Is there something I don't understand?

[13:42] <IOninja> SmokeMachine: you still learned something about core grammar and that will stay with you, even if the code got removed.

[13:42] <DrForr> Looking now.

[13:42] *** sammers joined
[13:42] <SmokeMachine> I tried to remove the <!{ $*IN_REDUCE }> from the infix:sym<.>... it seems to make the [+] (^10 .grep: *.is-prime) work... but it "broke" 3 tests...

[13:42] <SmokeMachine> IOninja: thats true!

[13:43] <SmokeMachine> the 3 tests was: t/spec/S03-metaops/reduce.rakudo.moar t/spec/S17-supply/supplier-preserving.t t/spec/integration/weird-errors.rakudo.moar

[13:43] <SmokeMachine> but the t/spec/S17-supply/supplier-preserving.t I ran alone and just passed...

[13:44] <SmokeMachine> I don't know how to run the other 2...

[13:44] <IOninja> t/fudgeandrun t/spec/S03-metaops/reduce.t

[13:44] <IOninja> t/fudgeandrun t/spec/integration/weird-errors.t

[13:44] <SmokeMachine> IOninja: thanks

[13:44] <MasterDuke> t/spec/S17-supply/supplier-preserving.t does flap for me too

[13:46] <SmokeMachine> the reduce is really broken: is [.⏏[0]].gist, '[42]', ". infix is not attem

[13:46] <DrForr> sena_kun: I get redeclaration of Perl6::Tidy when I test...

[13:47] *** sammers left
[13:48] <DrForr> (I'm running it from ~ because I have a few versions locally.)

[13:49] *** wamba left
[13:50] <sena_kun> Well, the exact name can be changed since I'm writing a small linter, I just ran into this error and wanted to make sure that at least your example code is working for me.

[13:53] <DrForr> Prodding at the code to see why you're gettign that error.

[13:53] *** wamba joined
[13:53] <DrForr> Ah, Perl6::Tidy is in my @INC already. Try renaming Perl6::Tidy to::Tidier?

[13:54] <DrForr> Though it shouldn't be there in the first place, grep'ing to see where it's being used.

[13:55] <sena_kun> Renamed, still the same error: "Cannot resolve caller iterator(Perl6::Parser: Str); none of these signatures match: (Mu $: *%_), ($: *%_) in method tidy".

[13:56] *** ggoebel left
[13:56] <DrForr> I may not have the modules fully in sync. Let me push what I have just in case.

[13:58] <DrForr> Pushed.

[13:59] <sena_kun> I'm doing reinstall now...

[14:01] *** sammers joined
[14:01] <DrForr> Your git script triggers a bug in the parser, so be careful with what it outputs.

[14:02] <sena_kun> Did you mean gist?

[14:02] <DrForr> A touch embarrassing but I'm guessing it's because of the 'unit module' token, which I do have a test for, but not text after it...

[14:02] <DrForr> Yes, your gist, sorry.

[14:05] <IOninja> hmm... 

[14:05] <IOninja> Looks like huggable is losing its factoids

[14:06] <IOninja> huggable: shrug

[14:06] <huggable> IOninja, nothing found

[14:06] <IOninja> huggable: camelia

[14:06] <huggable> IOninja, Camelia updates every 20m at 8, 28, and 48 minutes of the hour

[14:06] <IOninja> what the...

[14:06] <IOninja> IOninja │ huggable: camelia

[14:06] <IOninja> huggable │ IOninja, nothing found

[14:06] *** liAealneDx joined
[14:06] <IOninja> OK, scratch that... Looks like huggable doesn't always succeed in fetching factoids :/

[14:06] <liAealneDx> .seen Skarsnik

[14:06] <yoleaux> I saw Skarsnik 7 Dec 2016 13:27Z in #perl6: <Skarsnik> and I will probably use a libxml2 binding for gptrixie because 20 sec is annoying when debugging stuff x)

[14:07] *** liAealneDx is now known as AlexDaniel

[14:07] <DrForr> sena_kun: I'd probably grab something fron t/corpus/rosetta-*.t to have non-trivial amounts of code to tidy.

[14:07] <IOninja> huggable: dunno

[14:07] <huggable> IOninja, ¯\_(ツ)_/¯

[14:07] <IOninja> Oh, it was a dunno not shrug... never mind :}

[14:08] <IOninja> Oh and my first camelia didn't work because of trailing space. false alarm then  I guess :)

[14:08] <AlexDaniel> huggable: shrug :is: ¯\_(ツ)_/¯

[14:08] <huggable> AlexDaniel, Added shrug as ¯\_(ツ)_/¯

[14:10] *** skids joined
[14:11] <IOninja> m: say 1 ⁇ 2 ‼ 3

[14:11] <camelia> rakudo-moar 9644fc: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3say 17⏏5 ⁇ 2 ‼ 3␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤        …»

[14:11] <sena_kun> DrForr, my test file is https://rosettacode.org/wiki/Bacon_cipher#Perl_6 snippet, if you meant that. But still the same error...

[14:11] <IOninja> The deed's done. Anyone's interested in alternate ternary can comment on ticket https://rt.perl.org/Ticket/Display.html?id=131002

[14:12] <sena_kun> DrForr, is it probably better to open an issue, perhaps?

[14:12] <DrForr> sena_kun: I'd suggest removing the lib/.precomp directory.

[14:14] <DrForr> Also yes, the Bacon Cipher does work.

[14:14] * perlpilot is a little sad to see the unicode ?? !! go away

[14:15] * IOninja is a little happy

[14:15] <IOninja> They felt a bit off. Ever since I first tweeted them and saw ‼ rendered as a weird emoji :)

[14:15] <DrForr> IOninja: There's an opportunity to play with fonts in what sena_kun just mentioned for RosettaCode :)

[14:16] <El_Che> In all honesty, I think that utf8 support may no longer seen bu some as a "wow" but as a sign of a toy language.

[14:16] <IOninja> El_Che: that too.

[14:16] <perlpilot> El_Che: that is the most bizarre thing I've read in a long time.

[14:17] <IOninja> Don't sound bizzare to me.

[14:17] <El_Che> akin the perl golfing that hunted perl 5

[14:18] <IOninja> Some of the tweet replies I got are kinda of that: people see all these additions as people fucking around instead of producing something that can be used to Do Business™

[14:18] <perlpilot> It's a good thing we're optimizing for a 100-year language  :-)

[14:18] <DrForr> sena_kun: Go for it. I'm not sure that I can repeat it because I haven't actually installed the module from zef/panda, I need to build another VM or something in order to test installations.

[14:18] <IOninja> but...

[14:19] <perlpilot> IOninja: we're just ahead of the curve.  They'll get there in 20 years or so.

[14:19] <sena_kun> DrForr, I've removed lib/.precomp in the directory of my module, but it's still the same. :/ Thanks for your time, I'll fill an issue right now.

[14:19] <IOninja> m: say "Two steps forward, one step back [to sanity] isn't that bad" if 2 ≤ 5 

[14:19] <camelia> rakudo-moar 9644fc: OUTPUT: «Two steps forward, one step back [to sanity] isn't that bad␤»

[14:19] <IOninja> hehe

[14:20] <IOninja> perlpilot: what are you basing that on?

[14:20] <DrForr> Re: the Unicode stuff I'd agree that quite a bit of the reactions are deriding Unicode because it's not SRS BZNS. I usually figure "If I wanted a boring business logic language I'd use Java."

[14:20] <lucs> Aww, poor COBOL.

[14:20] * IOninja prefers to stay clear of delusional pep-talk "We're ahead of everyone!" "We're the best" "Perl 6 is the best glue language in the world!"

[14:21] <perlpilot> IOninja: right now it's just a feeling I have.  So ... unicorns and rainbows   :-)

[14:21] <DrForr> sena_kun: I'll create a VM tonight and install stuff to see if I'm doing something wrong during setup.

[14:22] <sena_kun> DrForr, thanks!

[14:22] <El_Che> perlpilot: perl6 is certainly one of the nicest languages I've coded in, but getting smug about it is out of place. We don't even have an scalable webserver for REST services. 

[14:23] <DrForr> It's entirely possible, I have a *lot* of what should be internal classes specified in the Perl6::Parser;;Factory file, and that could be playing silly buggers.

[14:24] <El_Che> DrForr: I hope to test your code soon. Exited about it

[14:24] <DrForr> I'm probably going to add brace styles to the tidier after the weekend - I'm headed to Copenhagen.

[14:27] <DrForr> El_Che: Nod - There are still some things that are limiting the parser, but I've added some fallback stuff that tries to capture any terms the code doesn't catch in a single "token" that will get separated once someone sends in a bug report :)

[14:27] *** ggoebel joined
[14:28] <El_Che> DrForr: as a speaker?

[14:28] <DrForr> Copenhagen? Mais oui.

[14:31] <El_Che> I am doing some coding to help me with my dissertation, let's see how atom supports perl6 nowadays. I tend to stick with vim + my syntastic hack

[14:33] <DrForr> sena_kun: Just saw the email for the GH issue.

[14:34] <sena_kun> DrForr, is something should be edited or added?

[14:35] <IOninja> huggable: atom ide

[14:35] <huggable> IOninja, https://github.com/perl6/Atom-as-a-Perl6-IDE

[14:35] <IOninja> DrForr: it supports it well ^

[14:35] <DrForr> Looks okay to me; like I said I think it's an install issue.

[14:36] *** cdg left
[14:36] <DrForr> IOninja: Yeah, but then I either have to use that mouse thingie or learn another set of bindings.

[14:36] *** cdg joined
[14:37] <DrForr> (yeah, I know it's got quite a bit of Perl 6 support, I need to try it out, or more to the point add a plugin to guage response.

[14:37] <IOninja> From what I heard, vim ain't so peachy. Billion of shortcuts instead of swirl of a mouse.

[14:38] <DrForr> Been using it on and off for ~20 years.

[14:38] <IOninja> yikes

[14:39] <IOninja> I've used it for about the same number of seconds before deciding it wasn't for me :P

[14:39] <El_Che> I may be getting a mac from work (to do some tests). I am curious how perl 6 is supported there. 

[14:39] <DrForr> Couldn't figure out how to quit, I'm guessing.

[14:39] *** mxco86 left
[14:40] <El_Che> I use LInux at home, at work we get WIndows machines (on which I installed Linux and use remote desktop for windows apps)

[14:41] <[Coke]> I've been using vi since... 1989? was the only option that worked on the mainframe and UNIX

[14:41] <DrForr> One of the important bits is that vi/vim runs on every OS out there, with the possible exception of Mac. (yes, I know about OS X, I was referring to pre-OS X.)

[14:41] <DrForr> And Windows.

[14:41] <IOninja> DrForr: the very first time I used it, yes, I couldn't figure out how to quit. But the one conscious effort to see whether it lives up to its hype lasted 20 seconds with a resounding answer: no

[14:42] *** eroux left
[14:42] <DrForr> De gustibus non es dispudantum.

[14:42] <DrEeevil> IOninja: mouse? point and grunt is so slow and clumsy

[14:42] <AlexDaniel> perlpilot: I think if you want to convince somebody that ⁇‼ chars should be supported, I'm the easiest target

[14:42] <AlexDaniel> perlpilot: but so far I'm not convinced

[14:42] <DrEeevil> especially when you can communicate in meaningful ways instead

[14:43] * [Coke] finds this gem in wikipedia:

[14:43] <[Coke]> Rensselaer Polytechnic Institute (RPI) is believed to be the last site to use MTS in a production environment. RPI retired MTS in June 1999.[6]

[14:43] <AlexDaniel> I was fine with them being added, was a bit sad to see them go, I can't find good reasons for them to be added in the first place

[14:44] <IOninja> DrEeevil: uhuh, much easier to press 1000 key combinations to get what you want :)

[14:45] <DrEeevil> IOninja: like you did now to communicate with me

[14:45] <DrEeevil> why treat your computer like a deaf-mute? ;)

[14:46] <IOninja> DrEeevil: I don't see what typing text in a straight line has to do with text EDITING, but for the record, I am using the mouse to switch between IRC window and  other tasks 😘

[14:46] <AlexDaniel> the argument that twitter renders ‼ as emoji is not a reason though, if at some point it decides to render * as emoji it's not a reason to drop * everywhere

[14:46] *** curan left
[14:47] <AlexDaniel> but again, as I said, it's not about why we shouldn't add ⁇‼, it's other way round

[14:47] <IOninja> AlexDaniel: it's a reason enough as it indicates the ?? and !! don't make a good pair.

[14:47] <DrForr> It renders Perl 5 code as emoji too, so that's not a valid excuse.

[14:47] <AlexDaniel> IOninja: nope

[14:47] <IOninja> AlexDaniel: and what incantation you ran yesterday... it showed thgat !! is an emoji, innit?

[14:47] <AlexDaniel> IOninja: ↓

[14:47] <AlexDaniel> m: say ‘*’.uniprop(‘Emoji’)

[14:47] <camelia> rakudo-moar e1357a: OUTPUT: «True␤»

[14:47] <AlexDaniel> m: say ‘#’.uniprop(‘Emoji’)

[14:47] <camelia> rakudo-moar e1357a: OUTPUT: «True␤»

[14:47] <IOninja> jrj

[14:47] <AlexDaniel> m: say ‘8’.uniprop(‘Emoji’)

[14:47] <IOninja> heh

[14:47] <camelia> rakudo-moar e1357a: OUTPUT: «True␤»

[14:48] <IOninja> fair enough

[14:48] <IOninja> m: say ‘ ’.uniprop(‘Emoji’)

[14:48] <camelia> rakudo-moar e1357a: OUTPUT: «False␤»

[14:48] <AlexDaniel> u: { .uniprop-bool(‘Emoji’) }

[14:48] <unicodable6> AlexDaniel, U+0023 NUMBER SIGN [Po] (#)

[14:48] <unicodable6> AlexDaniel, U+002A ASTERISK [Po] (*)

[14:48] <unicodable6> AlexDaniel, 1126 characters in total: https://gist.github.com/5d23121cce1eae73f46cab2145ccda80

[14:48] <DrEeevil> IOninja: I'm not using mouse for switching. that'd be exhausting :)

[14:49] *** cdg_ joined
[14:50] * IOninja goes to find something more productive than arguing over characters...

[14:50] <IOninja> Uuuu! A wall with paint on it :)

[14:50] * IOninja &

[14:51] <AlexDaniel> IOninja: nobody is arguing :)

[14:51] *** cdg left
[14:51] <AlexDaniel> … but keep shitty reasons against some chars for the next time when we have reasons to add them, so far we don't :P

[14:53] <AlexDaniel> “MoarVM panic: Internal error: zeroed target thread ID in work pass” :(

[14:54] *** rurban left
[14:54] <IOninja> AlexDaniel: dismissing someone's reasons for voting against the addition is arguing

[14:55] <IOninja> It only means you don't have any reasons for your point ;)

[14:56] <AlexDaniel> .oO( what point )

[14:57] <IOninja> exactly

[14:58] *** mr-foobar left
[14:58] *** mr-fooba_ joined
[15:02] *** CQ left
[15:07] <IOninja> "…for the next time when we have reasons to add them.."

[15:07] <IOninja> What next time?

[15:08] *** mr-foobar joined
[15:08] *** mr-fooba_ left
[15:08] <IOninja> *This* is the time. If all the parties with interest in adding Unicode ternary rescind their desire to do so, I'll gladly close the ticket.

[15:09] <AlexDaniel> IOninja: meaning that somebody comes and says, for example “all text editors turn ?? into ⁇”, or something like this.

[15:09] <AlexDaniel> IOninja: yes, no reason to keep it open

[15:11] * IOninja closes it

[15:16] <El_Che> An other disavantage of the non-gnu argument parsing of MAIN: it looses shell expansion: program --dir=~/tmp/foo arg1 arg2   <-- ~/tmp/foo is a literal ~

[15:16] <lucs> Do we have a bot to evaluate P5 code here?

[15:16] <El_Che> "program --dir ~/tmp/foo" would make a lot more sense

[15:17] <lucs> ('here' could be freenode I suppose)

[15:17] <El_Che> IOninja, AlexDaniel: do you expect people to program in MS Word?

[15:17] <AlexDaniel> El_Che: no, why?

[15:17] <El_Che> lucs. There is one in #perl

[15:18] <El_Che> "for example “all text editors turn ?? into ⁇”"

[15:18] <IOninja> lucs: /msg perlbot eval say "hi"

[15:18] <AlexDaniel> El_Che: ah. Yeah, well it seems that this was one of the considerations for unicode ops in the past

[15:18] <IOninja> El_Che: why Word?

[15:18] <lucs> Ah, 'eval' is what I was missing

[15:18] <AlexDaniel> El_Che: e.g. you have wordpress or facebook or whatever that changes '' to ‘’ and ... to … and so on

[15:18] <IOninja> El_Che: type up a slide in Power Point -> User copies from your slides -> code still works.

[15:19] <AlexDaniel> El_Che: or if you're making a presentation… well ↑

[15:21] <El_Che> mm

[15:22] *** gdonald left
[15:23] *** gdonald joined
[15:23] <SmokeMachine> m: say 0 ?? " 1 !! 2 "

[15:23] <camelia> rakudo-moar e1357a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Your !! was gobbled by the expression in the middle; please parenthesize␤at <tmp>:1␤------> 3say 0 ?? " 1 !! 2 "7⏏5<EOL>␤»

[15:23] <DrForr> One editor mangling Unicode isn't a reason for other editor users to suffer...

[15:23] <El_Che> I do have a "Copy Pasting from stackoverflow" on this laptop (https://twitter.com/nxadm/status/841777323221389313), but then again, mm

[15:24] <AlexDaniel> DrForr: suffer what?

[15:24] <El_Che> AlexDaniel: unprintable chars?

[15:24] <SmokeMachine> The Unicode version didn't include this LTA error...

[15:24] <El_Che> (enlighten me on what LTA stands for?)

[15:24] <AlexDaniel> unprintable chars? what⁇

[15:24] <AlexDaniel> El_Che: Less Than Awesome

[15:25] <El_Che> AlexDaniel: :)

[15:25] <DrForr> Well, let me rephrase.

[15:26] <El_Che> AlexDaniel: I agree with nine that Perl 6 has a lot of potential for sysadmin tasks (in matter of fact, my first perl 6 program in production does certificate validation and reminds people to renew).

[15:26] <El_Che> AlexDaniel: that means people opening the code remotely

[15:26] <AlexDaniel> \o/

[15:26] <AlexDaniel> El_Che: and their tools are configured poorly and cannot render some utf8?

[15:27] <El_Che> AlexDaniel: exactly

[15:27] <El_Che> AlexDaniel: local vim: top of the art with a zillion of plugins and config

[15:27] <El_Che> AlexDaniel: remote? Who knows

[15:27] <El_Che> LANG=C

[15:27] <AlexDaniel> you don't have to use unicode ops for that code, it's your choice

[15:28] <AlexDaniel> nobody is forcing you :)

[15:28] <AlexDaniel> but… I'd suggest to configure your tools a little bit… it's kind of 2015 already…

[15:28] <El_Che> AlexDaniel: that's why I mean. But lazy coders with copy paste stuff in that code :)

[15:28] <AlexDaniel> oh wait, 2017 :P

[15:28] <El_Che> anyway, maybe it's not a problem

[15:28] *** pmurias joined
[15:29] <El_Che> AlexDaniel: I have managed Solaris for a long time (last time was 3 years ago though). Don't talk me about 201\d :)

[15:31] *** donaldh left
[15:31] *** itaipu_ left
[15:33] *** mr-foobar left
[15:34] *** AlexDaniel left
[15:42] *** itaipu joined
[15:42] *** Dunearhp left
[15:42] <El_Che> so far, atom seems to do the job. Good work (sam and cptmindjack I think?°

[15:42] *** protium left
[15:42] <IOninja> samcv and MadcapJake

[15:42] <IOninja> And awwaiid 

[15:45] *** protium joined
[15:45] * IOninja tries to do a pre-release all-ecosystem module testing for the first time...

[15:45] *** Dunearhp joined
[15:45] <IOninja> .oO( maybe I should make a clean VM to run this stuff on... )

[15:45] *** Actualeyes joined
[15:45] *** Chinese_soup left
[16:05] *** ilogger2 joined
[16:05] *** ChanServ sets mode: +v ilogger2

[16:10] *** st_elmo joined
[16:11] *** Chinese_soup joined
[16:19] *** Cabanossi joined
[16:19] <ugexe> http://smoke.perl6.org/report # this was an old attempt at that

[16:19] *** andrzejku joined
[16:21] <IOninja> That one's powered by panda submissions innit?

[16:21] <timotimo> nah

[16:21] <timotimo> that's testers.perl6.org

[16:21] <IOninja> Ah

[16:22] <ugexe> zef used to submit reports to testers too

[16:22] *** cdg joined
[16:22] <timotimo> i didn't know that

[16:22] <ugexe> when i switched to having a bunch of different fetchers I didn't feel like figuring out how to make http posts with all the adapters too so I removed it ""temporarily""

[16:23] *** cibs joined
[16:25] <timotimo> oh, is a different test reporter required for each fetcher?

[16:28] *** zoosha joined
[16:29] *** j75 joined
[16:29] <b2gills> .ask TimToady I wonder if we can take a measured approach to removing ‘returns’. We just remove it from all tests in ROAST (from the main branch only) and have it be a non-standard addition to the language that Rakudo has.

[16:29] <yoleaux> b2gills: I'll pass your message to TimToady.

[16:31] <IOninja> So for all intents and purposes we'd NOT remove it, except we'd have to document it weirdly and warn users not to use it because it's not standard Perl 6?

[16:31] <ugexe> its more that some fetchers could do an http post and thus implement that functionality trivially (although some can't). I suppose if I implement it for wget and curl that covers most cases though

[16:31] <IOninja> Feels like a lot of work for no good benefit.

[16:33] <b2gills> We'd punt the final decision to actually deprecate and remove it until there was a second Perl 6 implementation

[16:34] <timotimo> ugexe: oh, OK, that's what "fetcher" means here

[16:35] <IOninja> b2gills: but for what benefit? We may as well punt it until we start implementing whatever TimToady wants implemented that requires us to use `-->` instead of `returns`. And what I see happening with this approach: (a) more people use `returns` so more people need to upgrade when it gets nixed; and (b) we waste human-hours bringing `returns` to support all the return values `-->` supports that `returns`

[16:35] <IOninja> currently doesn't.

[16:36] <El_Che> lol, normalizing texts and I just met the utf8 '...' thingy in a text

[16:36] <IOninja> b2gills: right now the removal won't happen until 6.e that's years away. I think that's plenty of time.

[16:36] <El_Che> (not related, but it made me laugh though)

[16:36] <timotimo> you meant …?

[16:36] <El_Che> timotimo: please tell me you copy pasted that :)

[16:36] <timotimo> no, i have it on my keyboard layout

[16:37] <IOninja> If we know we gonna remove it, may as well follow that ripping-the-band-aid approach.

[16:40] <SmokeMachine> that's why [+] (^20 .grep: *is-prime) isn't working: https://rt.perl.org/Public/Bug/Display.html?id=128985

[16:40] *** kaare__ joined
[16:40] *** khw joined
[16:41] *** eroux joined
[16:42] *** cale2 joined
[16:42] <cale2> m: sub thing($stuff → Str) { "here is $stuff" }; say thing("stuff");

[16:42] <camelia> rakudo-moar e1357a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> 3sub thing($stuff7⏏5 → Str) { "here is $stuff" }; say thing(␤    expecting any of:␤        constraint␤»

[16:43] <cale2> m: sub thing($stuff ⟶ Str) { "here is $stuff" }; say thing("stuff");

[16:43] <camelia> rakudo-moar e1357a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> 3sub thing($stuff7⏏5 ⟶ Str) { "here is $stuff" }; say thing(␤    expecting any of:␤        constraint␤»

[16:43] <IOninja> cale2: do you ever have commits that have "Cale" as author? I have that popping up in rakudo's contributors list... was wondering if it's you.

[16:43] <cale2> IOninja: Yeah, I think my name would prob show up as that

[16:44] <cale2> m: sub thing($stuff --> Str) { "here is $stuff" }; say thing("stuff");

[16:44] <camelia> rakudo-moar e1357a: OUTPUT: «here is stuff␤»

[16:44] <IOninja> cale2: you can add yourself to CREDITS file if you want a different name: https://github.com/perl6/doc/blob/master/CREDITS

[16:44] <cale2> "-->" feels a bit antiquated when there are unicode alternatives 

[16:44] <IOninja> heh

[16:45] <IOninja> March is clearly the month of Unicode :)

[16:45] <cale2> u: LONG RIGHTWARDS ARROW

[16:45] <unicodable6> cale2, U+27F6 LONG RIGHTWARDS ARROW [Sm] (⟶)

[16:45] <unicodable6> cale2, U+27F9 LONG RIGHTWARDS DOUBLE ARROW [Sm] (⟹)

[16:45] <unicodable6> cale2, 9 characters in total: https://gist.github.com/2b800c1b95346348e6acd89fa6f403e5

[16:45] *** kaare__ left
[16:45] <IOninja> The → was proposed for -> just a day ago. And  ⟶ S renders OVER the "S" on my box.

[16:46] <IOninja> buggable: tags

[16:46] <buggable> IOninja, Total: 1551; BUG: 1051; UNTAGGED: 343; LTA: 155; NYI: 93; RFC: 60; CONC: 58; JVM: 57; REGEX: 50; UNI: 31; PERF: 27; SEGV: 27; NATIVECALL: 22; TESTNEEDED: 22; @LARRY: 20; POD: 20; IO: 18; TODO: 18; REGRESSION: 14; PRECOMP: 12; BUILD: 11; OO: 11; TESTCOMMITTED: 11; OPTIMIZER: 9; STAR: 7; BOOTSTRAP: 5; WEIRD: 5; GLR: 4; MATH: 4; OSX: 4; REPL: 4; SPESH: 3; WINDOWS: 3; RT: 2; BELL: 1;

[16:46] * IOninja 's counter-proposal to unicode stuff :P

[16:47] <sena_kun> +1

[16:47] <SmokeMachine> m: say ^1000 .grep: -> $n {([+] ^$n .grep: -> $m {$m and $n %% $m}) == $n } # <- is this the real answer?

[16:47] <camelia> rakudo-moar e1357a: OUTPUT: «(0)␤»

[16:47] <SmokeMachine> or it should answer (0 6 28 496) ?

[16:47] <cale2> It's fairly simple to just add these unicode aliases, no? Those people added the unicode comparitors by just editing one file

[16:48] <IOninja> cale2: Yes. Exactly. And it's hard to fix bugs. So we have lots of hand wanting to add all sorts of unicode stuff, but no one wants to fix bugs.

[16:48] <SmokeMachine> cale2: I have something like that too (https://github.com/FCO/rakudo/commit/8d54440865c7570e9cff1c84991e3bcde1fa46ff) not -->, but -> and <->

[16:48] <cale2> next thing you know, we're going to be making pairs like `this ⇒ 4`

[16:49] <IOninja> m: say ^1000 .grep: -> $n {(sum ^$n .grep: -> $m {$m and $n %% $m}) == $n }

[16:49] <camelia> rakudo-moar e1357a: OUTPUT: «(0 6 28 496)␤»

[16:49] <IOninja> SmokeMachine: the 0 6… looks to be the right one

[16:49] <cale2> The long versions of all these arrows are clearer to me ⟷

[16:50] <cale2> u: LONG ARROW

[16:50] <unicodable6> cale2, U+21B8 NORTH WEST ARROW TO LONG BAR [So] (↸)

[16:50] <unicodable6> cale2, U+27F5 LONG LEFTWARDS ARROW [Sm] (⟵)

[16:50] <unicodable6> cale2, 21 characters in total: https://gist.github.com/4b9e179c80c92bb7d3a9e27756d5504f

[16:50] <SmokeMachine> IOninja: we have a test (the only one that is breaking with my change) that expects (0)... should I change it?

[16:50] <IOninja> cale2: I don't know if you follow the channel but your proposal comes mere hours after another Unicode op was thrown out from Perl 6 and people weren't even that keep to argue for its re-adding.

[16:50] <IOninja> SmokeMachine: which test is it?

[16:50] <cale2> Was it thrown out because of bugs?

[16:50] <SmokeMachine> IOninja: grep -B1 "No SEGV/crash on reduction in grep using %%" t/spec/integration/weird-errors.rakudo.moar

[16:51] <IOninja> cale2: that was one of the reasons yes, but the main reason as I interpreted it was "stop adding crap no one ever gonna use"

[16:51] <cale2> Would the solution be adding tests at the same time that you add the operator alias?

[16:51] <SmokeMachine> (I was using ⁇‼...) :( (ok... ill stop!)

[16:51] <cale2> The tricky thing is that the unicode _can_ be "aliased" by using a font that automatically converts it to unicode

[16:52] *** cdg_ joined
[16:52] <cale2> but it's still ascii under the surface

[16:53] <cale2> Personally, the only situation I could see myself using unicode is if I'm done with a project and I want to prettify it.

[16:53] <IOninja> m: say ((^1000).grep: -> $n {([+] ^$n .grep: -> $m {$m and $n %% $m}) == $n })

[16:53] <camelia> rakudo-moar e1357a: OUTPUT: «(0)␤»

[16:53] <perlpilot> cale2: Those that want the fancy unicode ops should first start by creating a module that does it.

[16:53] <IOninja> m: say ((^1000).grep: -> $n {([+] (^$n).grep: -> $m {$m and $n %% $m}) == $n })

[16:53] <camelia> rakudo-moar e1357a: OUTPUT: «(0 6 28 496)␤»

[16:53] <perlpilot> (if we can't put it in a module, then mayhap that problem needs to be solved first ;)

[16:53] <IOninja> SmokeMachine: yeah, it's a buggy test. Please update it.

[16:54] <SmokeMachine> IOninja: ok! thanks!

[16:54] *** cdg left
[16:56] <cale2> perlpilot: yeah, good idea 

[16:58] <SmokeMachine> now I think all the tests are passing!

[16:58] <SmokeMachine> :)

[17:01] *** wamba joined
[17:01] <SmokeMachine> IOninja: do you think this is ok? https://github.com/FCO/rakudo/commit/e1ebb503c616b7037588c5baace8ab2fc54bca61

[17:02] <IOninja> SmokeMachine: no idea

[17:02] *** cibs left
[17:03] <IOninja> TIL HTTP::UserAgent has :simple; mode... 

[17:04] *** cibs joined
[17:05] *** Sound joined
[17:12] *** mr-foobar joined
[17:17] <pmurias> b2gills: just removing 'return' in v6.d seems much cleaner, than having a "non-standard" edition that the second implementation would be forced to add if people use it

[17:17] <pmurias> * returns

[17:17] <IOninja> We're not removing it in 6.d but deprecating it.

[17:18] *** jonadab joined
[17:19] <IOninja> m: say  'foobarber' ~~ /[foo & bar ]/

[17:19] <camelia> rakudo-moar e1357a: OUTPUT: «Nil␤»

[17:20] <IOninja> I thought I saw a working `&` in regexes recently. Am I doing wrong?

[17:20] <IOninja> I want to check the string matches both `foo` and `bar`

[17:21] <geekosaur> I think that tests if the same chunk matches both

[17:21] <IOninja> Ah

[17:21] <IOninja> m: say 'foobarber' ~~ /. & \w/

[17:21] <camelia> rakudo-moar e1357a: OUTPUT: «｢f｣␤»

[17:21] <IOninja> oh well :)

[17:21] <b2gills> m: say [+]( ^20 .grep: *is-prime )

[17:21] <camelia> rakudo-moar e1357a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' ␤at <tmp>:1␤------> 3say [+]( ^20 .7⏏5grep: *is-prime )␤»

[17:22] <b2gills> m: say [+]( (^20).grep: *.is-prime )

[17:22] <camelia> rakudo-moar e1357a: OUTPUT: «77␤»

[17:24] <IOninja> b2gills: there's a PR fixing that. If you are able to review it: https://github.com/rakudo/rakudo/pull/1039

[17:27] *** cdg_ left
[17:28] *** cdg joined
[17:28] *** domidumont joined
[17:29] <b2gills> That change is outside the area I've delved so far. So it may have far ranging impacts that I'm not aware of.

[17:30] <IOninja> same here.

[17:30] <SmokeMachine> b2gills: I had run the spec tests and thats passing...

[17:30] <SmokeMachine> Im going to run the stress tests too...

[17:32] <b2gills> I don't have a commit for rakudo anyway

[17:34] *** st_elmo left
[17:35] *** cale2 left
[17:38] <Voldenet> how do I implement a feed operator consumer?

[17:40] <IOninja> how do I make sub EXPORT find the routines in my module?

[17:40] <b2gills> m: 1,2,3,4 ==> say()

[17:40] <camelia> rakudo-moar f94a2c: OUTPUT: «(1 2 3 4)␤»

[17:40] <IOninja> If I stick it inside the module, it whines at me that it must be outside, but if I stick it outside, it can't find the symbols

[17:41] <IOninja> Or actually, in the second case it dies with "Cannot find method 'package_at_key': no method cache and no .^find_method"

[17:41] *** itaipu joined
[17:41] <IOninja> Code: https://gist.github.com/zoffixznet/e565ee330e249112ef93c9047461b1e2

[17:42] <Voldenet> m: sub x { @_ }; 1..5 ==> map { .Int * 2 } ==> say()

[17:42] <camelia> rakudo-moar f94a2c: OUTPUT: «(2 4 6 8 10)␤»

[17:42] <Voldenet> m: sub x { @_ }; 1..5 ==> map { .Int * 2 } ==> x() ==> say()

[17:42] <camelia> rakudo-moar f94a2c: OUTPUT: «[2 4 6 8 10]␤»

[17:42] <Voldenet> Hm, that's not exactly the same output

[17:43] <IOninja> because @_ is an array

[17:43] <IOninja> m: sub x { @_.List }; 1..5 ==> map { .Int * 2 } ==> x() ==> say()

[17:43] <camelia> rakudo-moar f94a2c: OUTPUT: «(2 4 6 8 10)␤»

[17:44] <Voldenet> m: sub x { take $_ }; 1..5 ==> map { .Int * 2 } ==> x() ==> say()

[17:44] <camelia> rakudo-moar f94a2c: OUTPUT: «Too many positionals passed; expected 0 arguments but got 1␤  in sub x at <tmp> line 1␤  in any  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:44] <Voldenet> close enough

[17:44] <Voldenet> m: sub x { take }; 1..5 ==> map { .Int * 2 } ==> x() ==> say()

[17:44] <camelia> rakudo-moar f94a2c: OUTPUT: «Too many positionals passed; expected 0 arguments but got 1␤  in sub x at <tmp> line 1␤  in any  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:45] <IOninja> m: sub x { $^v.take }; 1..5 ==> map { .Int * 2 } ==> x() ==> say()

[17:45] <camelia> rakudo-moar f94a2c: OUTPUT: «take without gather␤  in sub x at <tmp> line 1␤  in any  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:45] <IOninja> m: sub x { $^v.take }; say gather { 1..5 ==> map { .Int * 2 } ==> x() ==> say() }

[17:45] <camelia> rakudo-moar f94a2c: OUTPUT: «(2 4 6 8 10)␤((2 4 6 8 10))␤»

[17:46] <Voldenet> what's $^v in the context, is there some 'perlvar' for perl6?

[17:47] <IOninja> Voldenet: make an implied signature: https://docs.perl6.org/language/variables#index-entry-%24^

[17:47] <IOninja> *makes

[17:47] <timotimo> there is a 5-to-6 for perlvar, i believe

[17:47] <IOninja> That's not relevant since this isn't a magic var.

[17:47] <Voldenet> ah, the magic is in twigils

[17:48] <IOninja> m: sub { dd [$^b, $^a, $:e, $:d] }( 'a', 'b', :d, :e)

[17:48] <camelia> rakudo-moar f94a2c: OUTPUT: «["b", "a", Bool::True, Bool::True]␤»

[17:48] <IOninja> m: sub { dd [$^b, $^a, $:e, $:d] }( 'a', 'b', :d<d>, :e<e>)

[17:48] <camelia> rakudo-moar f94a2c: OUTPUT: «["b", "a", "e", "d"]␤»

[17:54] <El_Che> timotimo: like this? https://lanoc.org/images/reviews/2014/customizing_keyboards/title.jpg

[17:55] <b2gills> note that { $^z, $^a, $a } is largely equivalent to -> $a, $z { $z, $a, $a }

[17:57] *** imcsk8 joined
[18:01] *** wamba left
[18:06] *** bstahlman joined
[18:06] <bstahlman> Getting a weird bug when I try to run given/when example from wiki books.

[18:07] <bstahlman> Specifically, when I try to convert a Bool to a String within a given/when, I get the following error:

[18:07] <bstahlman> Cannot call Str(Bool: ); none of these signatures match:

[18:07] <IOninja> m: Bool.Str

[18:07] <camelia> rakudo-moar f94a2c: OUTPUT: «Cannot resolve caller Str(Bool: ); none of these signatures match:␤    (Bool:D $: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[18:07] <IOninja> heh

[18:08] <IOninja> tis a bug

[18:08] <IOninja> well, bugglet

[18:08] <bstahlman> Ah. Ok. I noticed it works fine outside the block.

[18:08] <IOninja> s: False, 'Str'

[18:08] <SourceBaby> IOninja, Sauce is at https://github.com/rakudo/rakudo/blob/e1357ac/src/core/Bool.pm#L5

[18:08] <IOninja> bstahlman: well, it works fine on an instance of Bool, but not on the type objectt

[18:09] <IOninja> bstahlman: link to that example?

[18:09] <bstahlman> https://en.wikibooks.org/wiki/Perl_6_Programming/Control_Structures

[18:09] <lucs> Am I doing something wrong, or is the $count argument ignored in  todo('NYI', $count)  in Test?

[18:09] <bstahlman> The Given / When example.

[18:09] <SmokeMachine> https://www.irccloud.com/pastebin/NAY7BI5z/

[18:09] <IOninja> m: use Test; &todo.signature.say

[18:09] <camelia> rakudo-moar f94a2c: OUTPUT: «(;; Mu | is raw)␤»

[18:10] <IOninja> m: use Test; &todo.candidates».signature.say

[18:10] <camelia> rakudo-moar f94a2c: OUTPUT: «(($reason, $count = 1))␤»

[18:10] <IOninja> lucs: it's not ignored

[18:10] <lucs> I'm doing something wrong then :)

[18:10] <lucs> (or it's buggy?)

[18:11] <IOninja> lucs: I've not seen the code, so I can't tell! :)

[18:11] <lucs> I'll show you my code...

[18:11] <IOninja> And I highly doubt it's buggy, since we use Test for spectest runs

[18:11] <lucs> Yeah, I agree.

[18:12] <IOninja> bstahlman: a yeah, I see it in the last line. It's a bug in Rakudo that... I hope I can fix shortly :)

[18:13] <bstahlman> IOninja: Thanks.

[18:13] <lucs> Oh, maybe I'm just misunderstanding 'todo'.

[18:15] <lucs> Yeah, that's it. Sorry.

[18:15] <IOninja> cool

[18:15] <lucs> (I think I wanted 'skip'.)

[18:15] <IOninja> todo('NYI', 2); ok 0, 'this is a todo'; ok 0, 'this is also a todo'; ok 1, 'this isnt'

[18:15] <IOninja> lucs: note that you'll still have to manually avoid executing skipped tests.

[18:15] <bstahlman> IOninja: So how would I match a variable that's set to True within a given/when? I'm getting errors or unexpected results with the approaches I've tried.

[18:16] <IOninja> if 42 { ok 1; ok 2; ok 3; } else { skip 'cannot test stuff ATM', 3 }

[18:16] <lucs> Aha.

[18:16] <lucs> Okay.

[18:16] <bstahlman> E.g., True { ... } warns me that I probably want something like ":so" or "*.so".

[18:17] <IOninja> bstahlman: first, they are separate constructs: given just aliases the stuff to $_ and when smartmatches against $_; you don't have to use them together.

[18:17] <IOninja> bstahlman: and the way to do it is:   when :so { say "tis true" }; when :not { say "tis not true" }

[18:17] <IOninja> That syntax calls .so and .not methods respectively

[18:17] <IOninja> m: $_ = 42; when :so { say "tis true" }; when :not { say "tis not true" }

[18:17] <camelia> rakudo-moar f94a2c: OUTPUT: «tis true␤»

[18:18] <IOninja> m: $_ = 0; when :so { say "tis true" }; when :not { say "tis not true" }

[18:18] <camelia> rakudo-moar f94a2c: OUTPUT: «tis not true␤»

[18:18] <bstahlman> IOninja: I tried the :so approach and it didn't work until I removed an earlier when that matched on Int.

[18:18] <IOninja> bstahlman: Umm.. well, this would evaluate whether the thing is true; it won't check if it's a Bool

[18:18] *** cdg left
[18:18] <bstahlman> Is the literal True I was setting the topic to perhaps being coerced to an Int by the "when Int"?

[18:18] <IOninja> bstahlman: block form of `when` shortcurcuits. 

[18:19] <IOninja> bstahlman: and Bool is an Int, so that's why

[18:19] * IOninja takes another look at that wiki example

[18:19] <IOninja> yeah, the last case won't ever match

[18:19] <IOninja> Well, Unless you make your own Bool that isn't an enum :P

[18:20] <bstahlman> IOninja: Ah. I guess I wasn't thinking of the Bool as being close to int under the hood the way it is in C for instance.

[18:20] <IOninja> m: given class Bool {} { when Int { say "Int" }; when Bool { say "Bool!" } }

[18:20] <camelia> rakudo-moar f94a2c: OUTPUT: «Bool!␤»

[18:20] <IOninja> ehehe

[18:20] <IOninja> m: given True { when Int { say "Int" }; when Bool { say "Bool!" } }

[18:20] <camelia> rakudo-moar f94a2c: OUTPUT: «Int␤»

[18:21] <bstahlman> IOninja: Thanks for the help. Just starting to play around with p6. I can see I have a lot to learn... ;-)

[18:21] * IOninja edits the wiki example to test for Bool first

[18:25] <IOninja> ehehe, my first fix has compilation failures \o/

[18:25] <IOninja> But it wasn't just Str I tried to fix but many other methods

[18:26] * [Coke] wonders how to search for "<w:tc>" using XML::Query

[18:28] <IOninja> [Coke]: can grant report be posted on perl6.party, if I'm still having trouble logging in to blogs.perl.org when the time comes?

[18:28] <[Coke]> of course.

[18:28] <IOninja> cool

[18:29] <[Coke]> I still haven't published a TPF link to your last one, my bad. Transition is not going smoothly at TPF due to my work sitch.

[18:30] *** cibs left
[18:31] *** bstahlman left
[18:31] <[Coke]> is timothy totten here?

[18:32] *** cibs joined
[18:33] <timotimo> is that supernovus?

[18:33] *** Cabanossi left
[18:34] *** Cabanossi joined
[18:34] *** girafe joined
[18:36] *** domidumont left
[18:40] *** AlexDaniel joined
[18:41] * [Coke] gives up and drops back to the p5 lib

[18:44] *** domidumont joined
[18:45] <[Coke]> nine: iwbni :from<perl5> gave a hint that I should be using :from<Perl5>

[18:47] <IOninja> I think there's a ticket for that.

[18:47] <IOninja> Or least I remember someone offering me as an LHF fix

[18:48] <lucs> "iwbni"?

[18:48] <perlpilot> lucs: it would be nice if

[18:48] <lucs> Ah. I was thinking "I won't be needing it" :)

[18:49] <lucs> There's a list of those acronyms somewhere, right?

[18:50] <geekosaur> s99 supposedly

[18:50] *** wamba joined
[18:50] *** robertle joined
[18:50] <lucs> I seem to remember having seen them somewhere under docs.perl6.org, but I can't find them anymore.

[18:51] <IOninja> https://docs.perl6.org/language/glossary

[18:51] <lucs> Aha, thanks.

[18:53] <lucs> Aw, I should just have searched for it in the search field :/

[18:53] <AlexDaniel> huggable: glossary

[18:53] <huggable> AlexDaniel, nothing found

[18:54] <AlexDaniel> huggable: glossary :is: https://docs.perl6.org/language/glossary

[18:54] <huggable> AlexDaniel, Added glossary as https://docs.perl6.org/language/glossary

[18:55] *** Peter_R joined
[19:02] *** n1ce_ joined
[19:05] *** labster joined
[19:06] <IOninja> m: quietly dd Bool.Str

[19:06] <camelia> rakudo-moar 3de5fb: OUTPUT: «""␤»

[19:06] <IOninja> bug's fixed

[19:20] *** raschipi joined
[19:30] *** n1ce joined
[19:32] *** bwisti joined
[19:32] *** n1ce_ left
[19:35] <Voldenet> hm

[19:35] <Voldenet> m: say is-prime(2**32 + 1)

[19:35] <camelia> rakudo-moar 3de5fb: OUTPUT: «False␤»

[19:35] <Voldenet> m: say is-prime(2**16 + 1)

[19:35] <camelia> rakudo-moar 3de5fb: OUTPUT: «True␤»

[19:35] <raschipi> Should it say "true"?

[19:35] <Voldenet> nope :D

[19:36] <raschipi> It's possible for it to be wrong, it uses an stochastic method.

[19:38] <IOninja> m: say is-prime 31337

[19:38] <camelia> rakudo-moar 3de5fb: OUTPUT: «True␤»

[19:38] <IOninja> :}

[19:38] *** hankache joined
[19:38] *** eroux left
[19:40] *** bwisti left
[19:40] <Voldenet> m: say is-prime((2**64 + 1)/274177)

[19:40] <camelia> rakudo-moar 3de5fb: OUTPUT: «True␤»

[19:40] <Voldenet> magic

[19:44] <Voldenet> okay, it can't handle big primes well :>

[19:45] <Voldenet> or rather: takes too long to tell

[19:47] *** domidumont left
[19:50] <Geth> ¦ ecosystem: f02989c1f2 | (Zoffix Znet)++ | META.list

[19:50] <Geth> ¦ ecosystem: Add WWW

[19:50] <Geth> ¦ ecosystem: 

[19:50] <Geth> ¦ ecosystem: No-nonsense, simple HTTPS client with JSON decoder

[19:50] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/f02989c1f2

[19:50] <IOninja> https://github.com/zoffixznet/perl6-WWW/

[19:51] *** ggoebel joined
[19:52] *** lizmat joined
[19:59] <raschipi> Of course it takestoo long to tell, cryptography is based on this property, even.

[19:59] <raschipi> Well, you're not tryint to factor it.

[20:08] *** LeCamarade joined
[20:14] *** TEttinger joined
[20:16] <SmokeMachine> how can I close (or ask someone to close) the #130998?

[20:16] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130998

[20:17] *** cdg joined
[20:18] *** raschipi left
[20:20] <IOninja> SmokeMachine: it still needs a test for it. I know the test you fixed tests it indirectly but better to have a proper test (or just add this ticket number in the comment together with the other ticket number in that test)

[20:21] <IOninja> Basically if it breaks again people could spot that the issue should be fixed instead of assuming the test is buggy

[20:21] <IOninja> Ohhh wait no

[20:22] <IOninja> The test wasn't crashing before so we *do* need a new test :)

[20:24] *** itaipu left
[20:28] *** itaipu joined
[20:28] *** hankache_ joined
[20:29] *** labster left
[20:32] *** hankache_ left
[20:32] *** hankache left
[20:36] *** cibs left
[20:38] *** cibs joined
[20:45] *** domidumont joined
[20:52] *** jjido joined
[20:56] *** spebern joined
[20:57] *** cibs left
[21:00] *** cibs joined
[21:04] *** jjido left
[21:05] <Geth> ¦ modules.perl6.org: d41ce20b19 | (Zoffix Znet)++ | lib/ModulesPerl6.pm

[21:05] <Geth> ¦ modules.perl6.org: Fix up route placeholders so JSON API works

[21:05] <Geth> ¦ modules.perl6.org: 

[21:05] <Geth> ¦ modules.perl6.org: ... and more stuff can be searched for

[21:05] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/d41ce20b19

[21:07] *** robertle left
[21:07] <Geth> ¦ modules.perl6.org: 9569281898 | (Zoffix Znet)++ | lib/ModulesPerl6.pm

[21:07] <Geth> ¦ modules.perl6.org: Stop Perl 5's whining about comments in qw//

[21:07] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/9569281898

[21:08] <Geth> ¦ modules.perl6.org: 1f69912d63 | (Zoffix Znet)++ | lib/ModulesPerl6/Controller/Root.pm

[21:08] <Geth> ¦ modules.perl6.org: uppercase the tag before searching for it

[21:08] <Geth> ¦ modules.perl6.org: 

[21:08] <Geth> ¦ modules.perl6.org: so the JSON API works for any casing

[21:08] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/1f69912d63

[21:10] *** Rawriful joined
[21:14] <SmokeMachine> IOninja: ok, so Ill create the new test...

[21:14] <SmokeMachine> IOninja: any suggestion of where?

[21:14] *** domidumont left
[21:16] <IOninja> SmokeMachine: S13-overloading/metaoperators.t looks a good place

[21:16] <SmokeMachine> IOninja: thanks!

[21:18] *** jjido joined
[21:20] *** bjz joined
[21:21] *** colomon_ joined
[21:22] *** colomon_ is now known as colomon

[21:22] <Geth> ¦ modules.perl6.org: 05f6136e7f | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/Source.pm

[21:22] <Geth> ¦ modules.perl6.org: Swap '/' in tags to spaces

[21:22] <Geth> ¦ modules.perl6.org: 

[21:22] <Geth> ¦ modules.perl6.org: our web app routes need the '/' kept for routing, so remove these

[21:22] <Geth> ¦ modules.perl6.org: when building up the db

[21:22] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/05f6136e7f

[21:29] *** labster joined
[21:29] *** espadrine joined
[21:31] *** labster left
[21:32] *** jjido left
[21:32] *** Cabanossi left
[21:34] *** Cabanossi joined
[21:34] *** itaipu left
[21:41] *** wamba left
[21:43] <AlexDaniel> IOninja++ # everything

[21:44] <lizmat> AlexDaniel: yeah, good point  :-)   IOninja++

[21:45] <AlexDaniel> e: say [+] ( ^20 .grep: *.is-prime )

[21:45] <evalable6> AlexDaniel, rakudo-moar ee0b6d173: OUTPUT: «77»

[21:45] <AlexDaniel> e: say [+] ( (^20).grep: *.is-prime )

[21:45] <evalable6> AlexDaniel, rakudo-moar ee0b6d173: OUTPUT: «77»

[21:45] <SmokeMachine> \o/

[21:45] <AlexDaniel> :O

[21:45] <AlexDaniel> so not only it doesn't print “Confused”, but it also works now? :O

[21:46] * AlexDaniel looks at the fix

[21:46] <SmokeMachine> AlexDaniel: Yes! it works... with only 1 line fix... :)

[21:46] <AlexDaniel> I'm just thinking… what did we break? :)

[21:47] *** mcmillhj joined
[21:47] <SmokeMachine> AlexDaniel: good question... but the tests say nothing...

[21:47] <AlexDaniel> good sign, sure, but I wouldn't trust that fully…

[21:48] <AlexDaniel> “$*IN_REDUCE := 0; # attempting to parse an [op] construct” OK, the fix looks right

[21:49] <AlexDaniel> at least, if it was meant for [op] only, not what's after it

[21:49] <SmokeMachine> AlexDaniel: yes... that was what I thought...

[21:50] *** girafe left
[21:51] <SmokeMachine> (Im liking to play with that! :))

[21:53] *** mcmillhj left
[21:53] *** mcmillhj joined
[21:53] <AlexDaniel> SmokeMachine: the word “play” is not entirely appropriate, given that there's some responsibility involved… but yes, resolved tickets are great!

[21:54] *** spebern left
[21:55] <AlexDaniel> in any case, I'll probably see any fallout once I start searching for regressions again

[21:56] *** cdg left
[21:58] *** mcmillhj left
[21:59] *** wamba joined
[22:03] <SmokeMachine> AlexDaniel: I call play everything I like to do... even my day job I call it "play"... but Im sorry if it doesn't make sense in english... the meaning was: I am liking to do it

[22:03] <AlexDaniel> SmokeMachine: sure, that's great :)

[22:03] <geekosaur> it's a (good) attitude

[22:03] <geekosaur> whne you can swing it, at least...

[22:04] <geekosaur> ...assuming you don't mean as in game theory of course...

[22:05] <SmokeMachine> and, of course, it's my MMORPG! :P

[22:05] *** cdg joined
[22:06] <SmokeMachine> geekosaur: :)

[22:08] <AlexDaniel> huggable: MMORPG :is: http://strangelyconsistent.org/blog/perl-6-is-my-mmorpg

[22:08] <huggable> AlexDaniel, Added MMORPG as http://strangelyconsistent.org/blog/perl-6-is-my-mmorpg

[22:09] *** ufobat joined
[22:10] *** mcmillhj joined
[22:16] <SmokeMachine> m: use Test; is([+] (^20 .grep: *.is-prime), 77, "can we use &infix:<.> as argument for []");

[22:16] <camelia> rakudo-moar ee0b6d: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5can we use \&infix:<.> as argument for []' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1…»

[22:16] *** Cabanossi left
[22:17] *** mcmillhj left
[22:17] *** bjz left
[22:18] <geekosaur> heh

[22:19] *** Cabanossi joined
[22:19] <SmokeMachine> m: [+] (^20 .grep: *.is-prime)

[22:19] <camelia> rakudo-moar ee0b6d: OUTPUT: «Potential difficulties:␤    Useless use of [+] in sink context␤    at <tmp>:1␤    ------> 3<BOL>7⏏5[+] (^20 .grep: *.is-prime)␤»

[22:19] <SmokeMachine> m: [+] (^20 .grep: *.is-prime) == 77

[22:19] <camelia> rakudo-moar ee0b6d: OUTPUT: «Potential difficulties:␤    Useless use of [+] in sink context␤    at <tmp>:1␤    ------> 3<BOL>7⏏5[+] (^20 .grep: *.is-prime) == 77␤»

[22:19] <SmokeMachine> m: say [+] (^20 .grep: *.is-prime) == 77

[22:19] <camelia> rakudo-moar ee0b6d: OUTPUT: «0␤»

[22:19] <SmokeMachine> m: say ([+] (^20 .grep: *.is-prime)) === 77

[22:19] <camelia> rakudo-moar ee0b6d: OUTPUT: «True␤»

[22:21] <SmokeMachine> m: say ([+] (^20 .grep: *.is-prime)), 77, "bla"

[22:21] <camelia> rakudo-moar ee0b6d: OUTPUT: «7777bla␤»

[22:21] <SmokeMachine> m: use Test; say([+] (^20 .grep: *.is-prime), 77, "can we use &infix:<.> as argument for []");

[22:21] <camelia> rakudo-moar ee0b6d: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5can we use \&infix:<.> as argument for []' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1…»

[22:21] <SmokeMachine> m: use Test; say([+] (^20 .grep: *.is-prime), 77,  "can we use &infix:<.> as argument for []");

[22:21] <camelia> rakudo-moar ee0b6d: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5can we use \&infix:<.> as argument for []' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1…»

[22:22] <SmokeMachine> m: use Test; say([+] (^20 .grep: *.is-prime), 77,  "an we use &infix:<.> as argument for []");

[22:22] <camelia> rakudo-moar ee0b6d: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5an we use \&infix:<.> as argument for []' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1…»

[22:22] <SmokeMachine> whats wrong with that?

[22:22] <SmokeMachine> m: say([+] (^20 .grep: *.is-prime), 77,  "an we use &infix:<.> as argument for []");

[22:22] <camelia> rakudo-moar ee0b6d: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5an we use \&infix:<.> as argument for []' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1…»

[22:22] <SmokeMachine> m: say([+] (^20 .grep: *.is-prime), 77,  "test");

[22:22] <camelia> rakudo-moar ee0b6d: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5test' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[22:23] <geekosaur> the , 77, "test" is gobbled as more parameters to the reduction

[22:23] <SmokeMachine> m: use Test; is(([+] (^20 .grep: *.is-prime)), 77, "can we use &infix:<.> as argument for []");

[22:23] <camelia> rakudo-moar ee0b6d: OUTPUT: «ok 1 - can we use &infix:<.> as argument for []␤»

[22:23] <geekosaur> or the listop in general

[22:24] *** dct joined
[22:26] <SmokeMachine> thats a LTA...

[22:26] *** bjz joined
[22:27] <AlexDaniel> why?

[22:28] <geekosaur> is this one of those situations where a space changes the meaning?

[22:28] <geekosaur> m: say([+](^20 .grep: *.is-prime), 77,  "test");

[22:28] <camelia> rakudo-moar ee0b6d: OUTPUT: «7777test␤»

[22:28] <jnthn> Yes

[22:28] <geekosaur> thought so

[22:28] <SmokeMachine> there is no '.' where its pointing...

[22:28] <SmokeMachine> no!

[22:29] <geekosaur> "valuid digits or '.'"

[22:29] <geekosaur> "t" is not a valid digit, nor is it '.'

[22:29] <SmokeMachine> m: Int("an we use &infix:<.> as argument for []")

[22:29] <camelia> rakudo-moar ee0b6d: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5an we use \&infix:<.> as argument for []' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1…»

[22:29] *** mcmillhj joined
[22:30] <jnthn> Reductions parse just like sub calls, so [+] ... is listop syntax and [+]() is function call syntax

[22:30] <SmokeMachine> without the () the [] is trying to use the string...

[22:30] <geekosaur> and this is a bit of an ugly corner case, but a less commonly hit one than the perl 5 version while trying to avoid forcing you to parenthesize every list

[22:30] <SmokeMachine> m: use Test; is(([+](^20 .grep: *.is-prime)), 77, "can we use &infix:<.> as argument for []");

[22:30] <camelia> rakudo-moar ee0b6d: OUTPUT: «ok 1 - can we use &infix:<.> as argument for []␤»

[22:30] <geekosaur> (perl 5 took the opposite interpretation, leading to people being surprised by the behavior of e.g. `print (3), 5`)

[22:30] <SmokeMachine> m: use Test; is(([+] (^20 .grep: *.is-prime)), 77, "can we use &infix:<.> as argument for []");

[22:30] <camelia> rakudo-moar ee0b6d: OUTPUT: «ok 1 - can we use &infix:<.> as argument for []␤»

[22:31] <SmokeMachine> m: use Test; is([+] (^20 .grep: *.is-prime), 77, "can we use &infix:<.> as argument for []");

[22:31] <camelia> rakudo-moar ee0b6d: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5can we use \&infix:<.> as argument for []' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1…»

[22:31] <SmokeMachine> m: use Test; is([+](^20 .grep: *.is-prime), 77, "can we use &infix:<.> as argument for []");

[22:31] <camelia> rakudo-moar ee0b6d: OUTPUT: «ok 1 - can we use &infix:<.> as argument for []␤»

[22:31] <SmokeMachine> without the space between the ] and the ( it works...

[22:31] <geekosaur> yes, that is what I was pointing to, and I just explained why

[22:32] <SmokeMachine> geekosaur: yes! thanks!

[22:32] <awwaiid> My entry for the company NCAA bracket, https://gist.github.com/awwaiid/32ef1d2110ccceee3d0cb839546ae055

[22:32] <geekosaur> it is annoying, but I find being forced to parenthesize more annoying --- and the perl 5 behavior, when I trip over it, often seems psychotic

[22:33] <geekosaur> I can live with the perl 6 behavior, especially since I always thought the gnu c coding convention of function (params) instead of function(params) to be stupid and misleading

[22:33] <timotimo> but if you want function (params) you can just "use Slang::Tuxic"

[22:33] <geekosaur> but this might be TimToady and me showing our ages :p

[22:34] *** mcmillhj left
[22:37] *** Sgeo joined
[22:37] <SmokeMachine> do you guys think thats enough? https://github.com/FCO/roast/commit/156f15d686488972e55d81e28c832ad44e01d5b2

[22:37] <SmokeMachine> IOninja: ^^

[22:38] <timotimo> is that supposed to be [+] or [,]?

[22:38] *** bjz left
[22:39] <SmokeMachine> [+]

[22:39] <timotimo> OK

[22:39] <timotimo> oh, it's infix:<.> in there, not infix:<,>

[22:39] <timotimo> i'm confused.

[22:41] <SmokeMachine> yes, infix:<.>

[22:41] <SmokeMachine> m: say [+](^20 .grep: *.is-prime)

[22:41] <camelia> rakudo-moar ee0b6d: OUTPUT: «77␤»

[22:41] <SmokeMachine> m: say [,](^20 .grep: *.is-prime)

[22:41] <camelia> rakudo-moar ee0b6d: OUTPUT: «(2 3 5 7 11 13 17 19)␤»

[22:45] *** mcmillhj joined
[22:46] *** Voldenet joined
[22:46] *** Voldenet left
[22:46] *** Voldenet joined
[22:48] <timotimo> oh, we call that infix:<.>

[22:48] <timotimo> the thing that lets us put method calls after spaces without unspace

[22:50] <SmokeMachine> timotimo: Im not sure if its how its called, but I mean that!

[22:54] *** mcmillhj left
[22:57] *** mcmillhj joined
[23:02] *** mcmillhj left
[23:03] *** Cabanossi left
[23:04] *** Cabanossi joined
[23:08] <SmokeMachine> another question: is the → {} and ↔ {} still relevant?

[23:09] <AlexDaniel> SmokeMachine: unlike ⁇‼, these are at least auto-corrected by some software

[23:10] <AlexDaniel> also, -> is clearly an ascii art for →

[23:10] <AlexDaniel> SmokeMachine: I think we should take a little break from this

[23:10] <SmokeMachine> AlexDaniel: I think it passes on rule 2 and 4...

[23:11] <AlexDaniel> SmokeMachine: but generally, → and ↔ is a much better candidate for addition than ⁇‼

[23:11] <AlexDaniel> are

[23:11] <SmokeMachine> AlexDaniel: do you mean by break trying to insert unicode into the language?

[23:12] *** agentzh joined
[23:12] <AlexDaniel> SmokeMachine: yes

[23:12] <SmokeMachine> AlexDaniel: ok...

[23:12] <AlexDaniel> a week or two, or something like that… because this is getting onto my nerves to be honest :)

[23:12] <AlexDaniel> and not just me I'm pretty sure

[23:13] <SmokeMachine> AlexDaniel: did your nick get back randomly or did you "hardcoded" it? :)

[23:14] <AlexDaniel> m: say 1 ÷ ‘AlexDaniel’.comb.permutations

[23:14] <camelia> rakudo-moar ee0b6d: OUTPUT: «0.00000028␤»

[23:14] <SmokeMachine> AlexDaniel: but could happen... :P

[23:14] <AlexDaniel> SmokeMachine: ↑ highly unlikely :)

[23:14] *** mcmillhj joined
[23:15] <AlexDaniel> this is not entirely correct because there are two ‘e’ and ‘l’

[23:16] <AlexDaniel> m: say 1 ÷ (‘AlexDaniel’.comb.permutations ÷ 2 ÷ 2)

[23:16] <AlexDaniel> this I guess? Dunno…

[23:16] <camelia> rakudo-moar ee0b6d: OUTPUT: «0.0000011␤»

[23:19] *** mcmillhj left
[23:20] <samcv> AlexDaniel, you got unscrambled! yay

[23:20] <AlexDaniel> \o/

[23:23] *** mr-foobar left
[23:24] *** mr-foobar joined
[23:25] <AlexDaniel> anybody using Gumbo here?

[23:28] *** mr-foobar left
[23:29] *** vendethiel- joined
[23:29] <timotimo> i remember that name but i forgot what it actually is …

[23:29] *** mr-foobar joined
[23:29] *** mr-foobar left
[23:30] *** mr-foobar joined
[23:30] *** mcmillhj joined
[23:30] *** mr-foobar left
[23:34] *** mr-foobar joined
[23:35] *** mr-foobar left
[23:35] *** mcmillhj left
[23:37] *** mcmillhj joined
[23:38] *** wamba left
[23:39] *** mr-foobar joined
[23:40] *** mr-foobar left
[23:42] *** mr-foobar joined
[23:42] *** mcmillhj left
[23:42] *** BenGoldberg joined
[23:42] *** mr-foobar left
[23:43] <AlexDaniel> timotimo: it's a library (and also a perl 6 module) for parsing html

[23:43] <AlexDaniel> timotimo: and the issue I have is… MoarVM panic: Internal error: zeroed target thread ID in work pass

[23:43] <AlexDaniel> :@

[23:45] <timotimo> ah, that!

[23:45] <timotimo> your memory is getting corrupted somehow

[23:46] <timotimo> so ... valgrind maybe?

[23:47] *** mr-foobar joined
[23:47] *** mr-foobar left
[23:48] *** mr-foobar joined
[23:48] *** mr-foobar left
[23:49] *** dct left
[23:49] *** mr-foobar joined
[23:49] *** spebern joined
[23:50] *** mr-foobar left
[23:51] *** espadrine left
[23:51] <AlexDaniel> timotimo: maybe. golfy golf: https://gist.github.com/AlexDaniel/ac7a4d4c49ec8d23e546529976dda67f

[23:52] *** ChoHag joined
[23:52] <timotimo> does it also work if you only curl once?

[23:53] <AlexDaniel> timotimo: yes, crashes either way

[23:53] *** mcmillhj joined
[23:54] *** Actualeyes joined
[23:54] <timotimo> good, that'd be a smaller golf

[23:56] *** mr-foobar joined
[23:56] *** mr-foobar left
[23:57] *** mcmillhj left
