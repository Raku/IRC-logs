[00:06] *** ryn1x joined
[00:11] *** ryn1x left
[00:11] *** MasterDuke left
[00:15] *** cdg left
[00:15] *** cdg joined
[00:18] *** nadim left
[00:21] *** ryn1x joined
[00:26] *** ryn1x left
[00:31] *** MasterDuke joined
[00:51] *** ryn1x joined
[00:53] *** Cabanossi left
[00:54] *** mcmillhj joined
[00:55] *** Cabanossi joined
[00:57] *** ryn1x left
[00:58] *** mcmillhj left
[00:59] *** [particle] joined
[01:00] <llfourn> timotimo: thanks! I didn't watch it yet :o. Hopefully I get some time soon to fixup Spit.

[01:00] * llfourn disappears

[01:01] *** MasterDuke left
[01:02] *** aborazmeh joined
[01:02] *** aborazmeh left
[01:02] *** aborazmeh joined
[01:05] *** raschipi left
[01:06] *** BenGoldberg joined
[01:08] *** blakers joined
[01:09] *** ryn1x joined
[01:14] *** lookatme joined
[01:17] *** mcmillhj joined
[01:21] *** ryn1x left
[01:24] *** MasterDuke joined
[01:27] *** cdg_ joined
[01:27] *** cdg_ left
[01:30] *** cdg left
[01:31] *** ryn1x joined
[01:33] *** MasterDuke_ joined
[01:35] *** ryn1x left
[01:36] *** dugword joined
[01:38] *** MasterDuke left
[01:40] *** kalkin--- joined
[01:46] *** konsolebox joined
[01:56] *** ryn1x joined
[01:56] *** cdg joined
[02:00] <lookatme> .o/

[02:01] *** cdg left
[02:07] *** ryn1x left
[02:09] *** Cabanossi left
[02:10] *** st_elmo joined
[02:10] *** Cabanossi joined
[02:20] *** mcmillhj left
[02:23] <comborico1611> Goodnight, Perl people.

[02:23] *** comborico1611 left
[02:24] *** lookatme left
[02:28] *** BenGoldberg left
[02:32] *** ch3ck3r joined
[02:39] *** cdg joined
[02:42] *** BenGoldberg joined
[02:44] *** cdg left
[02:54] *** cdg joined
[02:56] *** ilbot3 joined
[02:56] *** ChanServ sets mode: +v ilbot3

[03:04] *** ryn1x joined
[03:09] *** ryn1x left
[03:09] *** Cabanossi left
[03:10] *** Cabanossi joined
[03:10] *** aborazmeh left
[03:12] *** Thrush joined
[03:12] <Thrush> I have two regular expression questions:

[03:12] <Thrush> First, how do I emulate the s///e option from Perl 5?

[03:13] <Thrush> And second, if I have a regular expression where I have case-sensitivity turned off (with the :i adverb), how do I turn it back on in the middle of the expression?

[03:13] <timotimo> for the second, you can use :!i

[03:14] <timotimo> what does the e option for substitutions do?

[03:14] <timotimo> (i've never used perl5)

[03:14] <timotimo> it seems to be about having $foo in the latter part be replaced with the contents of the variable $foo?

[03:14] *** noganex joined
[03:15] <timotimo> m: my $foo = "this stuff"; $_ = "hello there"; s:g/e/$foo/; say $_

[03:15] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «hthis stuffllo ththis stuffrthis stuff␤»

[03:15] <timotimo> if i understand your question correctly, perl6 already does /e by default

[03:16] <timotimo> oh, or maybe you want to have the name of a variable inside the to-be-matched string and put the contents of that in?

[03:17] <timotimo> m: my $hey = "HEY"; my $ho = "HO"; $_ = "!!hey!! and !!ho!!"; s:g/'!!' (.*?) '!!'/{::('$' ~ $0)}/; say $_

[03:17] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «HEY and HO␤»

[03:17] <timotimo> like that?

[03:17] <Thrush> timotimo:  The s///e modifier lets you put code in the substitution portion.

[03:18] <timotimo> you can either just put code inside curly braces inside the substitution portion, or you can use the "assignment syntax" version of the s operator:

[03:19] <timotimo> m: $_ = "beep boop foo bar"; s:g/ ... ' '/ = ("a".."z").pick; say $_

[03:19] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed replacement part; couldn't find final /␤at <tmp>:1␤------> 3 s:g/ ... ' '/ = ("a".."z").pick; say $_7⏏5<EOL>␤    expecting any of:␤        postfix␤»

[03:19] <timotimo> oops

[03:19] <timotimo> has to be brackets

[03:19] <timotimo> m: $_ = "beep boop foo bar"; s:g[ ... ' '] = ("a".."z").pick; say $_

[03:19] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «bxboibar␤»

[03:19] <timotimo> m: $_ = "beep boop foo bar"; s:g[ ... ' '] = ("a".."z").pick; say $_

[03:19] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «bmbfpbar␤»

[03:19] <timotimo> m: $_ = "beep boop foo bar"; s:g« ... ' '» = ("a".."z").pick; say $_

[03:19] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «bpbvdbar␤»

[03:19] *** kitsunenokenja joined
[03:19] <timotimo> any kind that perl6 understands is fine

[03:20] <timotimo> hope that helps! i'm off to bed

[03:20] <timotimo> o/

[03:20] <timotimo> (oh, the only ones that aren't allowed there are ( ) parenthesis)

[03:21] <Thrush> timotimo:  Well, that's pretty cool.  Thanks.  I'll have to study that.

[03:21] <Thrush> timotimo:  I was just reading about the brackets of substitution today.  I didn't know you could assign it code, though.

[03:23] *** ufobat_ joined
[03:29] *** char_var[buffer] joined
[03:31] *** st_elmo left
[03:34] *** lookatme joined
[03:40] *** colomon joined
[03:43] *** ryn1x joined
[03:47] *** pilne left
[03:49] *** ryn1x left
[03:55] *** ryn1x joined
[03:59] *** ryn1x left
[04:00] *** ryn1x joined
[04:01] *** ch3ck3r left
[04:02] *** kitsunenokenja left
[04:03] *** testaccount joined
[04:06] *** gabiruh_ left
[04:06] *** cdg left
[04:08] *** gabiruh joined
[04:08] *** Thrush left
[04:08] *** Cabanossi left
[04:10] <piojo> m: <a b c>».say

[04:10] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «a␤b␤c␤»

[04:10] *** Cabanossi joined
[04:10] <piojo> I just found out the above doesn't work in the windows REPL

[04:10] <piojo> Malformed UTF-8 at line 1 col 10 in sub nativecast at D:\rakudo\share\perl6\sources\51E302443A2C8FF185ABC10CA1E5520EFEE885A1 (NativeCall::Types) line 5

[04:11] *** ryn1x left
[04:12] <piojo> oh, it's coming from Linenoise. Let me uninstall that and see if it persists

[04:12] *** ryn1x joined
[04:13] *** wamba joined
[04:13] <piojo> Without Linenoise, it just prints "> Decoder may not be used concurrently" endlessly

[04:13] <MasterDuke_> piojo: did you run `chcp 65001`? i believe that's needed for unicode support in the windows command line

[04:14] * testaccount 

[04:14] *** testaccount left
[04:15] <BenGoldberg> If you're using powershell, then [Console]::OutputEncoding = [Text.UTF8Encoding]::UTF8

[04:15] <piojo> MasterDuke_: after running that command, the test simply makes rakudo quit

[04:15] <piojo> But I can run it with perl6 -e "<a b>».say"

[04:15] <piojo> so console unicode support is not the problem.

[04:15] <piojo> but term I/O unicode support may be the problem.

[04:17] *** ryn1x left
[04:18] <ZzZombo> Shouldn't https://github.com/rakudo/rakudo/blob/nom/docs/ChangeLog use the `.md` extension in order to use Markdown syntax highlighting?

[04:18] <piojo> MasterDuke_: by the way, in windows 10, unicode support is present in CMD, but that command breaks it

[04:19] <piojo> I mean, chcp 65001 breaks it

[04:19] *** BenGoldberg left
[04:19] <MasterDuke_> huh, i don't really use windows, but i thought that was needed. maybe only for pre-windows10...

[04:21] <piojo> I can't speak for the older versions

[04:21] * piojo files rakudobug

[04:21] *** wamba left
[04:21] *** bloatable6 joined
[04:24] *** blakers left
[04:24] *** wamba joined
[04:27] *** kerframil joined
[04:31] <TEttinger> chcp can generally be expected to break console functionality. I've sometimes had it work

[04:31] *** wamba left
[04:44] *** wamba joined
[04:45] <piojo> Something else unicode related is that matches aren't printed correctly on Windows, either in the REPL or from "perl6 -e ..."

[04:45] <piojo> m: say "a" ~~ / . /

[04:45] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «｢a｣␤»

[04:46] <piojo> Those boundary characters become something nasty, like "∩╜ó"

[04:47] <piojo> But the terminal CAN handle those characters, since I can input them (by copy/paste)

[04:47] <piojo> but rakudo won't print them, even when I write something as plain as: say '｢'

[04:51] *** wander joined
[04:52] *** Cabanossi left
[04:54] *** Cabanossi joined
[04:59] *** ryn1x joined
[05:04] *** ryn1x left
[05:07] *** wamba left
[05:10] *** awwaiid joined
[05:12] *** AlexDaniel left
[05:18] *** konsolebox left
[05:19] *** konsolebox joined
[05:20] *** ryn1x joined
[05:21] *** newcomertoperl6i joined
[05:25] *** ryn1x left
[05:32] *** ryn1x joined
[05:34] <ZzZombo> m: say List ~~ Seq

[05:34] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «False␤»

[05:34] <ZzZombo> m: say Seq.^parents

[05:34] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «()␤»

[05:34] <ZzZombo> m: say List.^parents

[05:34] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «()␤»

[05:34] <ZzZombo> m: say List.^roles

[05:34] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «((Positional) (Iterable))␤»

[05:35] <ZzZombo> m: say Seq.^roles

[05:35] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «((Sequence) (PositionalBindFailover) (Iterable))␤»

[05:36] *** ryn1x left
[05:42] <wander> m: List.^mro.say

[05:42] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «((List) (Cool) (Any) (Mu))␤»

[05:42] <wander> m: Seq.^mro.say

[05:42] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «((Seq) (Cool) (Any) (Mu))␤»

[05:45] *** lizmat joined
[05:55] *** philomath joined
[05:58] *** AlexDaniel joined
[06:04] *** Khisanth joined
[06:06] *** Cabanossi left
[06:07] *** cdg joined
[06:09] *** Cabanossi joined
[06:11] *** cdg left
[06:15] *** eugene_barsky joined
[06:18] *** eugene_barsky left
[06:19] *** Khisanth left
[06:24] *** domidumont joined
[06:25] *** Khisanth joined
[06:26] *** domidumont left
[06:26] *** domidumont joined
[06:30] *** domidumont left
[06:31] *** dugword left
[06:31] *** domidumont joined
[06:31] *** dugword joined
[06:31] *** rindolf joined
[06:35] *** dugword left
[06:37] *** wamba joined
[06:38] *** newcomertoperl6i left
[06:45] *** ryn1x joined
[06:46] *** wamba left
[06:47] *** darutoko joined
[06:48] *** cdg joined
[06:49] *** cpage joined
[06:50] *** ryn1x left
[06:52] *** holyghost joined
[06:52] *** cdg left
[06:53] *** Cabanossi left
[06:54] *** Cabanossi joined
[06:58] *** holyghost left
[07:07] *** parv joined
[07:21] *** geospeck joined
[07:23] *** Cabanossi left
[07:24] *** Cabanossi joined
[07:24] *** lowbro joined
[07:25] *** lowbro left
[07:25] *** lowbro joined
[07:25] *** philomath left
[07:28] *** cdg joined
[07:31] *** dugword joined
[07:32] *** wamba joined
[07:32] *** cdg left
[07:33] *** nadim joined
[07:36] *** koorchik joined
[07:36] *** abraxxa joined
[07:39] *** domidumont left
[07:42] *** jeek joined
[07:54] *** BinGOs_ is now known as BinGOs

[07:54] *** koorchik left
[07:55] *** BinGOs left
[07:55] *** BinGOs joined
[07:57] *** wamba left
[07:58] *** ryn1x joined
[08:01] *** kerframil left
[08:03] *** ryn1x left
[08:04] *** cdg joined
[08:04] *** jonas1 joined
[08:05] *** lookatme left
[08:06] *** Cabanossi left
[08:08] *** cdg left
[08:09] *** Cabanossi joined
[08:14] *** wamba joined
[08:15] *** Aaronepower joined
[08:20] *** Aaronepower left
[08:25] *** Aaronepower joined
[08:26] *** test joined
[08:27] *** test is now known as Guest70040

[08:27] * lizmat clickbaits https://p6weekly.wordpress.com/2017/11/13/2017-46-spesh-explained/

[08:34] *** philomath joined
[08:47] *** zakharyas joined
[08:49] *** dakkar joined
[08:51] *** Aaronepower left
[08:53] *** Cabanossi left
[08:54] *** domidumont joined
[08:54] *** Cabanossi joined
[08:56] *** cdg joined
[08:56] *** dugword left
[08:57] *** dugword joined
[08:59] *** philomath left
[08:59] *** zakharyas1 joined
[08:59] *** zakharyas left
[09:00] *** cdg left
[09:01] *** dugword left
[09:04] *** Guest70040 left
[09:09] *** Waldurf joined
[09:09] *** wander left
[09:10] *** Waldurf left
[09:10] *** sproctor joined
[09:11] *** ryn1x joined
[09:13] <sproctor> So I had a rather strange thought yesterday and I was trying to work out if it's good practice. Basically I'd like a breakable timed promise. The trick I came up with : sub breakable-timer ( $time where * > 0, &block --> Promise ) { my $flag = Promise.new; Promise.in($time).then( { if $flag.status ~~ Planned { $flag.keep( &block() ); } } ); return $flag }

[09:14] <sproctor> Now I'm trying to work out if that's Evil or not.

[09:15] <sproctor> It returns a Promise that will eventually call the given block and return the result. But you can break that promise (or keep it) to NOT call the block.

[09:15] <sproctor> This is mainly a thing I'm thinking about with Supplies and multiple events in quick succession. 

[09:15] *** ryn1x left
[09:16] *** zakharyas1 left
[09:18] *** sena_kun joined
[09:18] *** robertle joined
[09:19] *** Aaronepower joined
[09:21] <moritz> sproctor: sounds sensible, though your code might contain a race condition

[09:21] <lizmat> sproctor: what you basically need is an Promise.in() that isn't vowed

[09:22] *** Aaronepower left
[09:24] <sproctor> lizmat: That's be cool. 

[09:25] <moritz> or a promise combinator that can also fail a promise

[09:26] <sproctor> moritz: yeah.... If I made it into $flag.status ~~ Planned && $flag.keep( &block() ) would that fix it? Or I just wrap it in a try block. 

[09:26] *** nadim left
[09:26] <moritz> m: my ( $p1, $p2 ) = Promise.new xx 2; my $p3 = Promise.anyof($p1, $p2); $p2.break("foo"); say $p3.status

[09:26] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «Planned␤»

[09:27] *** nadim joined
[09:27] <sproctor> (I mean I guess it's why the Promise factory stuff isn't generally breakable)

[09:30] *** Ven joined
[09:31] *** Ven is now known as Guest32277

[09:31] *** Guest32277 is now known as Ven``

[09:32] <Ven``> o/, #perl6.

[09:32] *** cdg joined
[09:33] *** TEttinger left
[09:36] *** cdg left
[09:36] <Ven``> I think I already asked this a few months ago, but I totally forgot... Is there a way to write `role C[::F[_]] {}`?

[09:36] <Ven``> Basically, taking a type parameter that can be parameterized (higher-order).

[09:38] <moritz> I don't think you can

[09:39] *** Aaronepower joined
[09:39] <Ven``> aw :(.

[09:39] <Ven``> actually I think I remember being told the same thing, because with specialization, such a thing would make the type-system turing complete, i'm fairly sure.

[09:40] <Garland_g[m]> I think I found some sort of bug with the RAKUDO_EXCEPTIONS_HANDLER=JSON flag.

[09:40] *** ryn1x joined
[09:41] <Garland_g[m]> The code that produces it is 'my Var $var;'

[09:41] <Garland_g[m]> but only when that flag is set

[09:42] <lizmat> could you gist that ?

[09:43] * Ven`` wonders if there's a way to coerce the type parameter into a ParameterizedRole or something, that could be used in signatures later.

[09:44] *** wamba left
[09:44] <Ven``> .ask jnthn Is there a way to take a parameterized role as a role parameter?

[09:44] <yoleaux> Ven``: I'll pass your message to jnthn.

[09:44] *** Aaronepower left
[09:45] *** ryn1x left
[09:45] *** AlexDaniel left
[09:46] <Garland_g[m]> https://gist.github.com/Garland-g/64fa200af9878841902647b6d80e9935

[09:46] <lizmat> m: BEGIN my $R = Rational[Int,Int]; role B[::T] { dd T }; dd B[$R]   # Ven`` 

[09:46] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «Rational[Int,Int]␤B[Rational[Int,Int]]␤»

[09:47] <Ven``> lizmat: I mean, T is an instantiated parameterized role

[09:47] <lizmat> Garland_g[m]: I have to be afk soon, but will look at that in a few hours

[09:47] <Ven``> I probably poorly explained myself.

[09:48] <Ven``> I meant taking a role you can parameterize. Like role B[::T[_, _]] { dd T[Int, Int]; }; B[Rational];

[09:49] <Ven``> of note: role B[::T[::A, ::B]]{} doesn't work either, and "should" mean a different thing

[09:50] *** wamba joined
[09:50] <lizmat> afk&

[09:51] <Ven``> .ask jnthn I'm afraid I'm unclear, as usual. I mean taking a role you can parameterize. Like role B[::T[_, _]] { dd T[Int, Int]; }; B[Rational];

[09:51] <yoleaux> Ven``: I'll pass your message to jnthn.

[09:51] <moritz> Ven``: you might be able to workaround by using role B[::A, ::B, ::T] { } and inside the body then use T[A, B]

[09:52] <piojo> whoa, I just discovered IO.slurp isn't threadsafe!

[09:52] <Ven``> moritz: nope, because then T cannot be parameterized

[09:53] <piojo> when I slurp the contents of a ton of files in an "await do for { start { } }" loop, it occasionally throws exceptions saying "Cannot assign to an immutable value"

[09:53] <Ven``> it doesn't know T takes parameters

[09:53] <piojo> when I'm only calling $file-path.IO.slurp; on that line, with no assignment

[09:54] <moritz> Ven``: well, using T[A, B] inside the role body will result in an array if T isn't parameterized

[09:55] <Ven``> moritz: https://gist.github.com/vendethiel/b7cf91ed5a0caf42f78e3977d680aede

[09:56] <Ven``> my rakudo is maybe a month old

[09:56] *** statisfiable6 left
[09:56] <moritz> m: role F[::T, ::A, ::B] { dd T[A, B] }; F[Rational, Int, Int]

[09:56] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤T cannot be parameterized␤at <tmp>:1␤------> 3role F[::T, ::A, ::B] { dd T[A, B]7⏏5 }; F[Rational, Int, Int]␤»

[09:56] *** statisfiable6 joined
[09:56] <moritz> doens't change on a newer rakudo

[09:57] <moritz> so, no dice

[09:58] *** nadim_ joined
[09:59] *** nadim left
[10:03] *** nadim_ left
[10:04] *** nadim joined
[10:05] <jnthn> m: role F[::T, ::A, ::B] { dd T.^parameterize(A, B) }; F[Rational, Int, Int]

[10:05] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant value F[Rational, Int, Int] in sink context (line 1)␤»

[10:06] <jnthn> m: role F[::T, ::A, ::B] { dd T.^parameterize(A, B) }; say F[Rational, Int, Int]

[10:06] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «(F[Rational,Int,Int])␤»

[10:06] <jnthn> m: role F[::T, ::A, ::B] { dd T.^parameterize(A, B) }; say F[Rational, Int, Int].new

[10:06] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «Rational[Int,Int]␤F[Rational,Int,Int].new␤»

[10:06] <jnthn> Ven``: ^^

[10:08] *** cdg joined
[10:12] *** cdg left
[10:13] *** parv left
[10:17] *** araraloren joined
[10:19] *** wander joined
[10:23] *** ShalokShalom_ joined
[10:26] *** domidumont left
[10:32] *** domidumont joined
[10:38] <piojo> IO.slurp is not threadsafe, but open/lines().cache/close is

[10:38] <piojo> seems strange to me.

[10:40] <Ven``> jnthn: awesome! thanks.

[10:40] <Ven``> That's really cool :D.

[10:41] <Ven``> jnthn: Now I need to figure out how to get that in type signatures :)

[10:42] <Ven``> m: role F[::F] { sub map(:(::A --> ::B), F.^parameterize(A) --> F.^parameterize(B)

[10:42] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot put required parameter  after variadic parameters␤at <tmp>:1␤------> 3role F[::F] { sub map(:(::A --> ::B), F7⏏5.^parameterize(A) --> F.^parameterize(B)␤    expecting any of:␤      …»

[10:44] <Ven``> m: role F[::F, ::A, ::B] { constant FA = F.^parameterize(A); constant FB = F.^parameterize(B); sub map(:(A --> B), FA --> FB) { } }

[10:44] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while evaluating a constant␤at <tmp>:1␤Exception details:␤  No such method 'parameterize' for invocant of type 'Perl6::Metamodel::GenericHOW'␤    in block  at <tmp> line 1…»

[10:44] *** cdg joined
[10:44] <Ven``> I guess "constant" is the wrong phase.

[10:45] *** AlexDaniel joined
[10:46] <Ven``> jnthn: is there an "INSTANTIATED" phaser or somesuch?

[10:46] <jnthn> No, because the role's body block runs each time it's instantiated, so there's no need for a phaser

[10:47] <Ven``> mh

[10:47] <Ven``> m: role F[::F, ::A, ::B] { my \FA = F.^parameterize(A); my \FB = F.^parameterize(B); sub map(:(A --> B), FA --> FB) { } }

[10:47] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «===SORRY!===␤No compile-time value for FA␤»

[10:48] *** xinming_ joined
[10:48] <Ven``> seems like there's a need for a phaser, or something that's compile-time-for-that-role

[10:48] <jnthn> m: m: role F[::F, ::A, ::B] { -> ::FA, ::FB { sub map(:(A --> B), FA --> FB) { } }(F.^parameterize(A), F.^parameterize(B)) }

[10:48] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot put required parameter  after variadic parameters␤at <tmp>:1␤------> 3-> ::FA, ::FB { sub map(:(A --> B), FA -7⏏5-> FB) { } }(F.^parameterize(A), F.^para␤»

[10:48] *** cdg left
[10:49] *** ryn1x joined
[10:49] <jnthn> Ah, hmm

[10:51] *** AlexDaniel left
[10:52] <Ven``> m: role F[::T, ::A] { say "hello"; }; role F[List, ::A] { say "A"; }; F[List, Int];

[10:52] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant value F[List, Int] in sink context (line 1)␤»

[10:52] <Ven``> m: role F[::T, ::A] { say "hello"; }; role F[List, ::A] { say "A"; }; F[List, Int].new;

[10:52] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «A␤»

[10:52] *** Cabanossi left
[10:53] *** ryn1x left
[10:54] *** Cabanossi joined
[10:57] <Ven``> m: sub f(:(::A --> ::B) $f, A $a --> B) { $f($a) }

[10:57] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> 3sub f(:(::A --> ::B)7⏏5 $f, A $a --> B) { $f($a) }␤    expecting any of:␤        constraint␤»

[11:02] *** zakharyas joined
[11:04] *** philomath joined
[11:06] <piojo> Would anyone else like to try to see if IO.slurp is not threadsafe on their computer, or if it's just me? I posted a testcase here: https://gist.github.com/lefth/6d71ca714ca2dc184220a91ceb41334d

[11:07] <Ven``>  m: role F[::F, ::A, ::B] { -> ::FA, ::FB { sub map(&a:(A --> B), FA --> FB) { } }(F.^parameterize(A), F.^parameterize(B)) }

[11:07] <camelia> rakudo-moar d6a3a7a1a: ( no output )

[11:07] <piojo> It needs to be run several times to throw an exception, so I'm running it in a loop: while perl6 concurrency-test.p6 .; do :; done

[11:07] <Ven``> jnthn: I just had a brainfart ^ seems like it might work!

[11:08] <piojo> And I'm running it in a rather big directory, on an SSD so the test goes faster.

[11:08] <piojo> I also put in some (commented out) lines that just open a file and call .lines.cache, .close to show that that seems to work. It's something specific in slurp() that causes the problem.

[11:11] *** geospeck left
[11:11] <Ven``> m: role F[Array, ::A, ::B] { sub map(&a:(A --> B), Array[A] $a --> Array[B]) { Failure.new } }; F[Array, Int, Str](*.Str, 5);

[11:11] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «Cannot invoke this object (REPR: Uninstantiable; )␤  in block <unit> at <tmp> line 1␤␤»

[11:11] <Ven``> jnthn: ^

[11:12] <Ven``> the error is LTA

[11:12] *** jeromelanteri joined
[11:13] <Ven``> should maybe say something about CALL-ME?

[11:14] <Ven``> m: role F[Array, ::A, ::B] { method m(&a:(A --> B), Array[A] $a --> Array[B]) { Failure.new } }; F[Array, Int, Str].new.m(*.Str, 5);

[11:14] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «No such method 'ACCEPTS' for invocant of type 'A'␤  in method m at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:14] <Ven``> m: role F[Array, ::A, ::B] { method m(&a:(A --> B), Array[A] $a --> Array[B]) { Failure.new } }; F[Array, Int, Str].new.m(*.Str, Array[Int].new(5))

[11:14] <camelia> rakudo-moar d6a3a7a1a: OUTPUT: «No such method 'ACCEPTS' for invocant of type 'A'␤  in method m at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:15] <ZzZombo> <ZzZombo> Shouldn't https://github.com/rakudo/rakudo/blob/nom/docs/ChangeLog use the `.md` extension in order to use Markdown syntax highlighting?

[11:20] <araraloren> I don't think ChangeLog can use markdown syntax, it has its own format

[11:21] *** Cabanossi left
[11:23] *** ryn1x joined
[11:24] *** Cabanossi joined
[11:25] *** Cabanossi left
[11:26] *** Cabanossi joined
[11:28] *** ryn1x left
[11:31] *** releasable6 left
[11:31] *** releasable6 joined
[11:31] *** ChanServ sets mode: +v releasable6

[11:49] *** Ven`` left
[11:51] *** cdg joined
[11:56] *** cdg left
[11:57] *** gregf_ joined
[12:01] *** ryn1x joined
[12:02] *** dogbert11 joined
[12:05] *** ryn1x left
[12:08] *** geospeck joined
[12:11] *** cgfbee joined
[12:18] <sproctor> moritz: I got a version of my Breakable timer working without race conditions. Sort of. It's got a class and atomicint flags... but it does what I wanted. So that's nice. 

[12:19] *** piojo_ joined
[12:20] <moritz> sproctor: great! Will you release it as a module?

[12:20] <wander> quite curious about what LTA stands for

[12:21] <moritz> LTA = Less Than Awesome

[12:21] <wander> .

[12:22] <sproctor> moritz: Well I'm working on a module at the moment to wrap IO::Notifcations and add some info and I was needing it for that. But... I could make it stand alone. I might want to tidy it up a bit more... 

[12:22] <sproctor> But yeah. Why not it's useful. I think.

[12:24] <sproctor> Plus I need to fix the construtor. Currently you do Timer.new().start() which is a bit pants. But I'll get the first version in github on my lunch break. 

[12:25] *** margeas joined
[12:25] *** mcmillhj joined
[12:27] *** cdg joined
[12:30] *** ryn1x joined
[12:30] *** mcmillhj left
[12:31] *** cdg left
[12:35] *** ryn1x left
[12:35] *** HoboWithAShotgun joined
[12:41] *** philomath left
[12:53] *** Cabanossi left
[12:53] *** mr-foobar joined
[12:54] *** Cabanossi joined
[13:10] *** ryn1x joined
[13:14] *** ryn1x left
[13:23] *** rodrigok joined
[13:23] *** wander left
[13:29] *** mcmillhj joined
[13:34] *** mcmillhj left
[13:40] *** mr-foobar left
[13:41] <sproctor> https://github.com/Scimon/Timer-Breakable So I'm letting the Travis job(s) run and then I may upload this. CPAN is the preferred option now right?

[13:41] <sproctor> More tests required. Comments and critiques welcome.

[13:43] <sproctor> (Helps if I turn on Travis of course)

[13:44] *** ryn1x joined
[13:45] <lizmat> .tell Garland_g[m] testing a fix for your problem

[13:45] <yoleaux> lizmat: I'll pass your message to Garland_g[m].

[13:47] *** mcmillhj joined
[13:48] <[Coke]> lizmat++ weeklies again. I can barely review irc at this point. :)

[13:49] *** perlpilot joined
[13:51] *** wander joined
[13:53] *** ryn1x left
[13:56] <lizmat> .tell Garland_g[m] https://github.com/rakudo/rakudo/commit/3cba620404

[13:56] <yoleaux> lizmat: I'll pass your message to Garland_g[m].

[13:58] *** mson joined
[13:59] *** cdg joined
[14:02] *** cdg_ joined
[14:02] *** cdg left
[14:04] <sproctor> So, Travis passed and I figured it's a 0.0.1 build. Might as well release it and let people kick the tyres. (Plus... I'm kind of terrified of releasing a module and I figured if I didn't do it now I'd keep putting it off). 

[14:04] <sproctor> So, My First CPAN Module. That's cool.

[14:13] *** bdmatatu joined
[14:13] <buggable> New CPAN upload: Timer-Breakable-0.0.1.tar.gz by SCIMON https://cpan.metacpan.org/authors/id/S/SC/SCIMON/Perl6/Timer-Breakable-0.0.1.tar.gz

[14:14] <sproctor> :D

[14:18] <sena_kun> sproctor++

[14:20] <sproctor> It needs some testing especially race condition testing. (Which I've done locally but writing them for unit tests is going to be fun).

[14:20] *** dakkar left
[14:20] *** TeamBlast joined
[14:20] *** dakkar joined
[14:23] *** ryn1x joined
[14:28] *** jeromelanteri left
[14:28] *** ryn1x left
[14:30] *** mempko joined
[14:36] <geospeck> which tool do you recommend for creating the skeleton of a module? App::Mi6 ...

[14:37] <sproctor> That's what I used :)

[14:41] <geospeck> :+1:

[14:45] <sproctor> Need to get my head around the .pause file (I just manually updloaded the tar ball from mi6 dist) 

[14:45] <timotimo> the format is just

[14:45] <timotimo> user SPROCTOR

[14:45] <timotimo> password foobarbaz

[14:46] <sproctor> Just those?

[14:46] <timotimo> no piece of documentation exists to tell you this m(

[14:46] <sproctor> I wasn't sure on the format. Cool.

[14:48] <ilmari> sproctor: https://metacpan.org/pod/distribution/CPAN-Uploader/bin/cpan-upload#CONFIGURATION

[14:48] <sproctor> ilmari++

[14:50] *** llfourn joined
[14:50] <ZzZombo> ??

[14:50] <ZzZombo> m: dd :a<b>

[14:50] <camelia> rakudo-moar b36685981: OUTPUT: «block <unit>()␤»

[14:52] *** emers2n joined
[14:52] *** Ven joined
[14:52] <timotimo> dd doesn't take named arguments

[14:52] <timotimo> m: dd

[14:52] <camelia> rakudo-moar b36685981: OUTPUT: «block <unit>()␤»

[14:53] <timotimo> m: dd (:a<b>)

[14:53] <camelia> rakudo-moar b36685981: OUTPUT: «:a("b")␤»

[14:53] *** Ven is now known as Guest40774

[14:53] *** Guest40774 is now known as Ven``

[14:53] <ZzZombo> dd dd

[14:53] <ZzZombo> m: dd dd

[14:53] <camelia> rakudo-moar b36685981: OUTPUT: «block <unit>()␤Nil␤»

[14:54] <ZzZombo> m: dd &dd

[14:54] <camelia> rakudo-moar b36685981: OUTPUT: «Sub dd = sub dd (| is raw) { #`(Sub|46714608) ... }␤»

[14:54] <ZzZombo> shouldn't it throw/warn for no argument?

[14:55] <timotimo> it could

[14:56] <timotimo> wait, you mean no argument

[14:56] <timotimo> no, it's for printing out where in the code you are

[14:56] <timotimo> m: sub blah { bloop }; sub bloop { dd }; blah;

[14:56] <camelia> rakudo-moar b36685981: OUTPUT: «sub bloop()␤»

[14:56] <araraloren> m: dd

[14:56] <camelia> rakudo-moar b36685981: OUTPUT: «block <unit>()␤»

[14:57] <timotimo> m: sub blah { dd; bloop; dd }; sub bloop { dd }; blah;

[14:57] <camelia> rakudo-moar b36685981: OUTPUT: «sub blah()␤sub bloop()␤sub blah()␤»

[15:00] <araraloren> I have not seen this use before.

[15:00] <timotimo> a not very known feature

[15:00] <timotimo> of course dd is a rakudo-only thing, not a perl6 feature

[15:01] *** jonas1 left
[15:01] <araraloren> So in Perl6 how can we dump a object ?

[15:01] <araraloren> .perl ?

[15:01] <araraloren> m: say &dd.perl

[15:01] <camelia> rakudo-moar b36685981: OUTPUT: «sub dd (| is raw) { #`(Sub|51740496) ... }␤»

[15:02] *** zakharyas left
[15:02] <timotimo> sure

[15:02] *** zakharyas joined
[15:02] <timotimo> dd has the benefit of also printing out what var was passed

[15:02] <timotimo> m: my Str $foo = "hello"; dd $foo

[15:02] <camelia> rakudo-moar b36685981: OUTPUT: «Str $foo = "hello"␤»

[15:03] <araraloren> m: my Str $foo = "123"; say $foo.perl

[15:03] <camelia> rakudo-moar b36685981: OUTPUT: «"123"␤»

[15:03] *** emers2n left
[15:03] <araraloren> and the type :) gotta sleep, Good Night

[15:03] *** araraloren left
[15:07] *** zakharyas left
[15:07] *** Cabanossi left
[15:09] *** Cabanossi joined
[15:13] *** dugword joined
[15:13] <Geth> ¦ marketing: d979039e6c | (Zoffix Znet)++ | 4 files

[15:13] <Geth> ¦ marketing: Update "Introducing Perl 6" brochure

[15:13] <Geth> ¦ marketing: 

[15:13] <Geth> ¦ marketing: - Incorporate feedback from woolfy

[15:13] <Geth> ¦ marketing: - Fix errors reported on GitHub

[15:13] <Geth> ¦ marketing: - Generate print-quality PDF with bleeds

[15:13] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/d979039e6c

[15:17] *** dugword left
[15:18] *** mcmillhj left
[15:24] *** leont joined
[15:27] *** khw joined
[15:28] *** ryn1x joined
[15:28] <Geth> ¦ marketing: 71c3ed5ea5 | (Zoffix Znet)++ (committed using GitHub Web editor) | README.md

[15:28] <Geth> ¦ marketing: Link to Camelia's terms of use

[15:28] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/71c3ed5ea5

[15:32] *** ryn1x left
[15:37] *** rodrigok left
[15:38] *** nadim left
[15:39] *** wamba left
[15:45] <sproctor> (So it turned out I'd commented out some tests while I was trying to get vows to work and 0.0.1 still had them commented out. I figured this was a great chance to test out the .pause file and mi6 upload.)

[15:46] *** gregf_ left
[15:53] *** domidumont left
[15:53] <buggable> New CPAN upload: Timer-Breakable-0.0.2.tar.gz by SCIMON https://cpan.metacpan.org/authors/id/S/SC/SCIMON/Perl6/Timer-Breakable-0.0.2.tar.gz

[15:54] *** zakharyas joined
[15:58] *** mcmillhj joined
[15:59] *** zakharyas left
[16:01] <jdv79> m: class A { has %!h; method foo { if ! %!h{"b"}:exists {} } }; say A.new.foo

[16:01] <camelia> rakudo-moar b36685981: OUTPUT: «Unexpected named argument 'exists' passed␤  in method foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:01] <jdv79> what is going on there?

[16:02] <timotimo> you need parens around that part

[16:02] <timotimo> adverbs like that attach to the "outermost operator" before them

[16:02] <timotimo> for some reason

[16:02] <jdv79> wut

[16:02] <jdv79> haha.  o. k.

[16:02] <timotimo> you're passing :exists to prefix:<!>

[16:02] <jdv79> lovely

[16:03] <jdv79> thanks

[16:03] <jdv79> that's not confusing or anything for a newbie

[16:03] <timotimo> totally

[16:03] <jdv79> maybe the error messaage could say what callable the "named arg" is being attached to

[16:05] *** AlexDaniel joined
[16:05] *** troys joined
[16:06] <timotimo> that would be good, yeah

[16:06] <timotimo> BBL

[16:06] <lizmat> but hard, looking at BOOTSTRAP, line 642

[16:07] <lizmat> at that point, apparently it only knows about the capture and the signature

[16:07] <lizmat> nothing about the object it is being attached to

[16:07] <jdv79> hmm:(

[16:09] <Ulti> m: say [Nil].pick; say [].pick

[16:09] <camelia> rakudo-moar b36685981: OUTPUT: «(Any)␤Nil␤»

[16:10] <jnthn> We should fix Backtrace.pm

[16:10] <lizmat> Ulti: nice catch

[16:10] <lizmat> jnthn: what's wrong with it ?

[16:10] <[Coke]> m: say [Nil].perl;

[16:10] <camelia> rakudo-moar b36685981: OUTPUT: «[Any]␤»

[16:10] <Ulti> the thing is this though:

[16:11] <Ulti> m: say [1,2,Nil,3]

[16:11] <camelia> rakudo-moar b36685981: OUTPUT: «[1 2 (Any) 3]␤»

[16:11] <jnthn> lizmat: It strips out the name of call where the error was thrown, because it's in CORE.setting

[16:11] *** none_ joined
[16:11] <Ulti> you sort of do want it...

[16:11] <jnthn> lizmat: If it didn't do that, then it would be clear it was prefix:<!> that couldn't receive the arg

[16:11] <[Coke]> Ulti: yah, it looks funny, but it seems to follow the rules.

[16:12] <lizmat> Ulti: I think [] is to be a shortcut for Array.new()

[16:12] <lizmat> which implies Any as the default value

[16:12] <Ulti> [Coke]: yeah its just I am wondering what those rules are with a list with a single value thats Nil it feels like the Nil ness might want to spread a bit more

[16:12] <lizmat> m: my @a is default(Nil) = 1,2,Nil,4; dd @a

[16:12] <camelia> rakudo-moar b36685981: OUTPUT: «Array @a = [1, 2, Nil, 4]␤»

[16:13] <Ulti> o___O now that does surprise me

[16:13] <lizmat> m: dd :[Nil]

[16:13] <camelia> rakudo-moar b36685981: OUTPUT: «[Any]␤»

[16:13] <Ulti> m: my @a is default(Nil) = []; dd @a

[16:13] <camelia> rakudo-moar b36685981: OUTPUT: «Array @a = []␤»

[16:13] *** sproctor left
[16:13] <Ulti> ok thats at least sane

[16:14] *** scimon joined
[16:15] <Ulti> but yeah this comes to me playing in Python where their random.choice([]) explodes with an exception because None could be a value of the list and I wondered about Perl 6 and thought well [].pick returning Nil was ok because Nil can't be in the list and thats why [Nil].pick made sesne

[16:15] *** Ven`` left
[16:15] <Ulti> but that default Nil scares me

[16:15] *** margeas is now known as mvorg

[16:16] <Ulti> it breaks that logic

[16:16] <Ulti> so I think that might be the broken thing here

[16:16] <Ulti> though you did sort of ask to shoot yourself in the foot 

[16:17] *** raiph joined
[16:18] *** comborico1611 joined
[16:20] *** lowbro left
[16:20] <comborico1611> Hello, all.

[16:22] <Ulti> hi

[16:22] *** Cabanossi left
[16:24] *** dugword joined
[16:24] *** Cabanossi joined
[16:25] *** none_ left
[16:26] *** st_elmo joined
[16:27] <lizmat> Ulti: yeah, but we do need "is default(Nil)" for those cases we actually want to pass on a Nil value

[16:28] <timotimo> jdv79: don't forget there's also :!exists as well as unless

[16:31] *** yqt joined
[16:40] *** ryn1x joined
[16:41] *** hythm joined
[16:43] *** domidumont joined
[16:43] *** dugword left
[16:45] *** ryn1x left
[16:51] *** TimToady joined
[16:54] *** mvorg is now known as margeas

[16:54] *** mcmillhj left
[16:55] *** geospeck left
[16:57] *** mson left
[17:00] *** Ven joined
[17:01] *** Ven is now known as Ven``

[17:05] *** troys is now known as troys_

[17:08] *** philomath joined
[17:11] *** mcmillhj joined
[17:16] *** mcmillhj left
[17:18] *** eliasr joined
[17:19] <scimon> Have you ever had a filling fall out? Currently finding Timer::Breakable a bit like that. Third version uploaded... I'll go clean up my PAUSE account in a sec. But this one has a proper constructor.

[17:19] *** philomath left
[17:19] *** ryn1x joined
[17:20] <scimon> Definitely last change today.

[17:21] *** mcmillhj joined
[17:22] <[Coke]> I don't understand the reference, but yes, I have had a filling fall out. Most disconcerting.

[17:23] <scimon> When I had it happen I couldn't help poking the hole with my tongue. Over and over. 

[17:23] <scimon> So Whilst I'm supposed to be workign through a pile of BAU tickets my brain kept wandering back to this. 

[17:23] <buggable> New CPAN upload: Timer-Breakable-0.1.0.tar.gz by SCIMON https://cpan.metacpan.org/authors/id/S/SC/SCIMON/Perl6/Timer-Breakable-0.1.0.tar.gz

[17:24] <scimon> Anyhoo. Signing off for today.

[17:24] *** scimon left
[17:24] *** ryn1x left
[17:24] *** robertle left
[17:24] *** domidumont left
[17:24] *** Ven`` left
[17:25] *** troys_ is now known as troys

[17:26] *** mcmillhj left
[17:27] *** mingdao joined
[17:30] *** El_Che joined
[17:33] *** zakharyas joined
[17:35] *** captain-adequate joined
[17:35] *** mcmillhj joined
[17:36] *** dakkar left
[17:37] *** Cabanossi left
[17:39] *** Cabanossi joined
[17:40] *** mcmillhj left
[17:41] *** wamba joined
[17:42] <lizmat> scimon++

[17:42] *** ryn1x_ joined
[17:44] *** ShalokShalom_ left
[17:47] *** zakharyas left
[17:48] *** xiaomiao joined
[17:49] *** mcmillhj joined
[17:50] <ryn1x_> Trying to learn OO in Perl6. I get an error: "Cannot look up attributes in a MC::Aero type object" with this short code example: https://pastebin.com/98pK6bh9 . What am I doing wrong?

[17:51] <geekosaur> 'type object' means you have an undefined value instead of an object

[17:51] *** mr-foobar joined
[17:51] *** ryn1x joined
[17:52] <wander> rynlx_: what is the whole project?

[17:52] <[Coke]> ryn1x_: that code compiles fine here.

[17:52] <lizmat> ryn1x_: Is there an Aero.new in your code?

[17:52] <wander> this pm6 file itself don't raise exception

[17:53] <geekosaur> right, it'll happen when making the object because no guarantees as ti what's initted in what order?

[17:53] <wander> so maybe the code using this module is wrong

[17:54] <lizmat> ryn1x_: if there's no "Aero.new" in your code, then that's the problem

[17:54] <raiph> ryn1x_: Do the :D / :U type "smileys" make sense to you?

[17:54] *** andrzejku joined
[17:54] <ryn1x_> I have a Aero.new... let me pastebin the code calling this module..

[17:55] <ryn1x_> https://pastebin.com/hmVc4J5g

[17:56] *** mcmillhj left
[17:56] *** ryn1x left
[17:56] <ryn1x_> I get OK 1; OK 2; then the error "Cannot look up attributes in a MC::Aero type object" 

[17:57] <[Coke]> ;last line should be $pi.close, probably

[17:57] <perlpilot> yep

[17:57] <[Coke]> you're calling .close on the type object.

[17:58] *** dugword joined
[18:00] <ryn1x_> Shoot... that was dumb.. I was renaming things and called close on the class not the new object... 

[18:03] *** dugword left
[18:04] *** mcmillhj joined
[18:04] <raiph> ryn1x_: imo it's important that you ask more questions until the error message makes 100% sense to you

[18:11] *** mr-foobar left
[18:12] *** AlexDaniel left
[18:13] *** AlexDaniel joined
[18:14] <lizmat> dinner&

[18:16] <lizmat> ryn1x_: method close(Aero:D:) {   # <-- would ensure it can only be called on an instance

[18:16] <lizmat> in which case the error would have been:

[18:17] <lizmat> Invocant of method 'a' must be an object instance of type 'Aero', not a type object of type 'Aero'.  Did you forget a '.new'?

[18:17] <lizmat> s/a/close

[18:17] <lizmat> really dinner&

[18:25] <[Coke]> I wonder if we should add syntax support for class vs. instance methods.

[18:25] <[Coke]> so that "class method barf" would only work on :U, e..g

[18:25] <[Coke]> er, e.g.

[18:26] *** andrzejku left
[18:27] *** ryn1x joined
[18:27] *** zakharyas joined
[18:28] *** zakharyas left
[18:29] *** darutoko left
[18:29] *** ChoHag left
[18:32] *** ryn1x left
[18:35] <Garland_g[m]> .tell lizmat[m] Thanks.

[18:35] <yoleaux> Garland_g[m]: I'll pass your message to lizmat[m].

[18:35] <yoleaux> 13:45Z <lizmat> Garland_g[m]: testing a fix for your problem

[18:35] <yoleaux> 13:56Z <lizmat> Garland_g[m]: https://github.com/rakudo/rakudo/commit/3cba620404

[18:36] *** Cabanossi left
[18:36] <[Coke]> ... oh, right, I can probably put that in a module. :|

[18:36] * [Coke] adds that to the pile!

[18:39] *** Cabanossi joined
[18:39] *** kaare__ left
[18:39] *** zakharyas joined
[18:39] *** kaare__ joined
[18:44] *** andrzejku joined
[18:48] *** TEttinger joined
[19:00] *** espadrine joined
[19:04] *** ryn1x joined
[19:08] *** Cabanossi left
[19:08] *** ryn1x left
[19:08] * El_Che is reading this: https://www.reddit.com/r/perl/comments/7bmbw5/what_should_i_learn_perl_5_or_perl_6/

[19:09] *** Cabanossi joined
[19:09] <El_Che> as a user of both langs :)

[19:10] <teatime> that's a more interesting iteration of that question than usual

[19:11] <teatime> he probably really would be better served by python for his uses, but I feel him 100% on preferring the perl style, regexes, and one-liners

[19:12] <teatime> it says he already knows C and Haskell.  I've set out to learn Haskell like thrice and haven't succeeded yet.

[19:12] *** steeznson joined
[19:13] <El_Che> he'll end up with quite a few extra languages :)

[19:13] <geekosaur> this is not necessarily a bad thing

[19:14] <El_Che> it's a good thing

[19:15] <ryn1x_> Thanks for the tip lizmat

[19:15] <El_Che> chromatic joined the discussion :)

[19:15] <ryn1x_> Is there a conventional way to implement a timeout for IO::Socket::INET since it is not built in?

[19:15] <steeznson> hello all, I am currently trying to write a regex matching letters, unicode, whitespace and punctuation. So far I have: my $regex = regex { <:N + :L + [\s\t\n] + [!..?]>+} . Which smart matches with "Hello, world!" but does not work as a regex in my grammar. anyone have any ideas?

[19:17] <geekosaur> steeznson, why wouldn;t you just declare it as a regex method outright, so you can use it with <foo> ?

[19:18] <geekosaur> regex whatever { <:N + :L + [\s\t\n] + [!..?]>+ }

[19:19] <steeznson> I am declaring it as a regex method outright, in my grammar it has `regex foo { <:N + :L + [\s\t\n] + [!..?]>+}`, I was just making it easy to copy into the interactive shell

[19:19] <geekosaur> you probably want rx instead of regex

[19:19] <geekosaur> you have set $regex to a code object

[19:19] <steeznson> ah i'll try that

[19:20] <geekosaur> you;d have to invoke it as $regex.() and I'm not sure how youd best do that inside of a grammar, aside from <{ }>

[19:20] <steeznson> so is rx a method of regex?

[19:21] <ryn1x_> Maybe I should use this: https://docs.perl6.org/routine/anyof with my socket methods? Best way to implement a timeout?

[19:22] <steeznson> i'll have a look at the docs again, thanks for the hint geekosaur

[19:22] <geekosaur> basically regex {} is a subclass of sub {}

[19:22] <geekosaur> ryn1x_, I think you want something related to Promises

[19:22] *** steeznson left
[19:25] <moritz> geekosaur: actually, regex {} is a subclass of method {}

[19:25] <moritz> m: say Regex.^mro

[19:25] <camelia> rakudo-moar be9e19efd: OUTPUT: «((Regex) (Method) (Routine) (Block) (Code) (Any) (Mu))␤»

[19:25] <geekosaur> mm, right

[19:26] <geekosaur> in any case it's still nto simply a quoted regex, it's a chunk of code that must be run somehow. smartmatching a Code evaluates it; simply naming it inside a grammar doesn't

[19:26] *** mempko left
[19:32] <ufobat_> is this document still up to date? https://github.com/rakudo/rakudo/blob/master/docs/windows.md because i can't get rakudo compiled on my windows vm 

[19:33] *** mempko joined
[19:36] *** cdg_ left
[19:37] *** cdg joined
[19:41] *** cdg left
[19:41] <Geth> ¦ mu: koorchik++ created pull request #28: Update schedule: "Language Independent Validation Rules (LIVR) for Perl6"

[19:41] <Geth> ¦ mu: review: https://github.com/perl6/mu/pull/28

[19:42] *** cpage left
[19:43] *** ryn1x joined
[19:45] <Geth> ¦ mu: a29a0cacbc | (Viktor Turskyi)++ (committed using GitHub Web editor) | misc/perl6advent-2017/schedule

[19:45] <Geth> ¦ mu: Update schedule

[19:45] <Geth> ¦ mu: review: https://github.com/perl6/mu/commit/a29a0cacbc

[19:45] <Geth> ¦ mu: 0788eaba42 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | misc/perl6advent-2017/schedule

[19:45] <Geth> ¦ mu: Merge pull request #28 from koorchik/patch-1

[19:45] <Geth> ¦ mu: 

[19:45] <Geth> ¦ mu: Update schedule: "Language Independent Validation Rules (LIVR) for Perl6"

[19:45] <Geth> ¦ mu: review: https://github.com/perl6/mu/commit/0788eaba42

[19:47] *** ryn1x left
[19:51] *** TimToady left
[19:53] *** TimToady joined
[19:54] *** robertle joined
[19:57] *** pilne joined
[20:03] <piojo_> ‎ufobat_: I built many times on Windows 10 (not a VM, just Windows), and those commands look strange to me

[20:03] <piojo_> I compiled with the same commands the linux build is compiled with

[20:03] <piojo_> But I did have to create a copy or link so "gmake" could be invoked as "make"

[20:05] <piojo_> I don't believe the compilation used Visual Studio in any way--just Strawberry Perl and possibly some bit or piece from MSYS, which also supplied a compiler (which I also had installed)

[20:05] *** setty1 joined
[20:06] *** comborico1611 left
[20:06] <geekosaur> rakudo can be built either way

[20:08] *** comborico1611 joined
[20:09] *** bhm joined
[20:12] *** Aceeri_ joined
[20:12] *** Aceeri_ is now known as Aceeri

[20:13] *** bdmatatu left
[20:16] *** Aceeri_ joined
[20:18] *** ryn1x joined
[20:19] <El_Che> ufobat_: may I be so bold to ask you to document your finding? I also want to look once I have some time

[20:23] *** Cabanossi left
[20:23] *** ryn1x left
[20:24] *** Cabanossi joined
[20:24] <raiph> .tell zoffix "We know 6d will have an alias. What if that alias was the brand alias that we chose to promote?" https://www.reddit.com/r/perl6/comments/78txh8/xpost_perl6_should_be_renamed_perl/dptlagj/

[20:24] <yoleaux> raiph: I'll pass your message to zoffix.

[20:26] <El_Che> dunno why, but Rakudo grew on me (I know about the lang/impl difference, but that's a problem for later when there are 39 competing implementations :) )

[20:33] <teatime> hrm, how many discrete steps are there between 0.0 and 1.0 in a double

[20:33] *** zakharyas left
[20:34] <moritz> on the order of 2**63

[20:34] <moritz> no, that can't be right

[20:34] <moritz> but, well, quite a few :-)

[20:36] <teatime> yar, looks like the answer is "plenty", for my needs

[20:36] <piojo_> floating point is the gift that keeps on giving

[20:37] <piojo_> You really only need to understand it so infrequently that after you look up the docs and learn what you need, you can forget it again.

[20:37] <piojo_> So you'll have the pleasure of learning it over and over again :)

[20:37] *** st_elmo left
[20:37] <lizmat> .oO( like pack/unpack parameters in P5 :-)

[20:38] <teatime> piojo_: I do that with so many things

[20:39] <teatime> luckily they are much faster to learn subsequent times

[20:41] <moritz> teatime: ok, at least 2**52

[20:42] <moritz> the 64 bit of a double are sign + 11 bits exponent + 52 bits significand

[20:43] <moritz> and the for one exponent that signfies the range from 0 to 1, there are 2**52 possible cases for the significand

[20:43] <teatime> yup

[20:43] <teatime> which is def. plenty

[20:43] <moritz> and then there can be degenerate cases, where the exponent is smaller, but still lands you in that range

[20:46] <piojo_> @raiph I'd rather Perl 6 have an alias than just 6.d. People don't understand that treating perl 5 and 6 as though they were the same is like mixing up c and c++/STL/boost

[20:46] <ufobat_> El_Che, it worked for me on the 2nd time :-( uninstalled basically every VS software, perl, git, and reinstalled it

[20:46] <ufobat_> El_Che, i just had *more* stuff on in before, where it didnt work

[20:46] <ufobat_> El_Che, so.. guide works

[20:47] <ufobat_> piojo_, does strawberry ship a gcc and stuff, yeah probably for xs modules..

[20:48] <piojo_> ‎ufobat_‎ I'm about 99% sure it does, but I'm on a linux computer at the moment

[20:49] <ufobat_> windows is full of mysteries to me

[20:51] <ugexe> what windows problem?

[20:52] <piojo_> my SSD is so full of windows :'(

[20:53] <piojo_> good night, folks

[20:54] <ugexe> i had entire process automated including installing visual studio 2017 community but switched to a windows image that already includes it

[20:55] <ugexe> but you have to be sure to use the right VS tools command prompt (not cmd.exe), or run C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 (or wherever this is for your system) if you want to use cmd.exe

[20:55] <ufobat_> spectests are running now, i am happy :)

[20:56] <ugexe> otherwise you can run into mixed up compiler stuff

[20:56] <ufobat_> i haven't had this file on my disk, i mean the SetEnv.cmd

[20:56] <ugexe> if you have VS you should I think

[20:56] <ufobat_> let me see if it is there now

[20:57] <ugexe> it might be in a different path though, naturally they make it impossible to programtically guess it

[20:57] *** st_elmo joined
[20:57] <ugexe> its based on windows ver -and- vs version

[20:58] *** piojo_ left
[20:58] *** cdg joined
[20:58] <ufobat_> nope i still coudn't find it

[21:04] *** cdg_ joined
[21:05] *** cpage_ joined
[21:07] *** Cabanossi left
[21:07] *** cdg left
[21:07] *** Zoffix joined
[21:08] <Zoffix> raiph: I don't understand the question

[21:08] <yoleaux> 20:24Z <raiph> Zoffix: "We know 6d will have an alias. What if that alias was the brand alias that we chose to promote?" https://www.reddit.com/r/perl6/comments/78txh8/xpost_perl6_should_be_renamed_perl/dptlagj/

[21:09] *** Cabanossi joined
[21:09] <El_Che> Zoffix: I understand as chaning name every release. Something like debian codenames?

[21:09] <Zoffix> raiph: oh, you mean using the language version's name as a name for the language?

[21:10] <lizmat> .oO( Divali Perl 6 )

[21:10] <Zoffix> So every year all blog authors and book authors and resume writers would edit their work for the new name? Don't really see it as a viable or desirable path

[21:10] <El_Che> there goes our google raring

[21:11] *** yqt left
[21:11] <lizmat> .oO( many small rankings make one big one )

[21:11] <lizmat> oh, eh, not

[21:12] <Zoffix> "Yes, I know 12 programming languages...."

[21:12] <El_Che> using the release name in combination with, let's say "Rakudo", could work (again, like Debian)

[21:13] *** leont left
[21:20] *** ryn1x joined
[21:21] <ryn1x_> if I have   method a() {}    how can I    method b() {do things; return a();}     I get a file not found error... is there a special syntax for calling a method from a new method in the same class?

[21:22] *** andrzejku left
[21:22] <timotimo> you want to return self.a()

[21:24] <ryn1x_> thanks timotimo, that worked

[21:24] *** ryn1x left
[21:26] *** troys is now known as troys_

[21:30] *** nadim joined
[21:36] *** zakharyas joined
[21:36] *** releasable6 left
[21:36] *** releasable6 joined
[21:36] *** ChanServ sets mode: +v releasable6

[21:40] <Garland_g[m]> I've been looking at the naming thread that was posted. I actually really like the idea of naming it after a butterfly, so I went looking for butterflies that had a similar pattern to Camelia. I found this: https://en.wikipedia.org/wiki/Aglais_io

[21:53] *** mingdao left
[21:53] *** mingdao joined
[21:56] *** dj_goku_ joined
[21:56] *** dj_goku_ left
[21:56] *** dj_goku_ joined
[21:57] *** mson joined
[21:57] *** ChoHag joined
[21:59] *** japanois- joined
[21:59] *** mcmillhj left
[21:59] *** st_elmo left
[22:02] *** unicodable6 left
[22:02] *** unicodable6 joined
[22:03] *** statisfiable6 left
[22:03] *** bloatable6 left
[22:03] *** bisectable6 left
[22:03] *** committable6 left
[22:03] *** committable6 joined
[22:03] *** bisectable6 joined
[22:03] *** bloatable6 joined
[22:03] *** statisfiable6 joined
[22:04] *** cpage_ left
[22:05] *** ivans joined
[22:05] *** zakharyas left
[22:08] *** ryn1x joined
[22:13] *** ryn1x left
[22:24] *** cpage_ joined
[22:26] *** comborico1611 left
[22:27] *** setty1 left
[22:28] *** dct joined
[22:29] *** wamba left
[22:33] *** comborico1611 joined
[22:39] *** kitsunenokenja joined
[22:46] *** robertle left
[22:49] *** Zoffix left
[22:52] *** dct left
[22:54] *** dct joined
[23:00] <comborico1611> It's almost supper time!

[23:03] <ivans> it usually is, somewhere

[23:04] <ivans> here it's 6am :D

[23:05] <comborico1611> Ah, no. You think to globally.

[23:05] *** kitsunenokenja left
[23:05] <comborico1611> Too*

[23:05] *** Juerd left
[23:06] *** Juerd joined
[23:06] <comborico1611> Ivans, let me guess. Russia?

[23:07] <ivans> it's where I'm from

[23:07] <ivans> but right now I'm in vietnam

[23:07] <comborico1611> You must be in China then.

[23:07] <comborico1611> Wait. No you need to be more there other direction.

[23:07] <comborico1611> Hawaii? 

[23:08] <comborico1611> Hmm.  I thought you'd be two hours behind if you were there.

[23:09] <comborico1611> The Vietnamese make great shoes! Ever heard of Vibram toe shoes?

[23:09] <ivans> I don't think I have!

[23:09] <ivans> it's all slippers here

[23:09] <comborico1611> Best shoes I've ever worn.

[23:09] *** dct left
[23:09] <comborico1611> Vibram makes the inner sole for many shoes, as well.

[23:10] <comborico1611> South Vietnam?

[23:11] <ivans> yea

[23:11] *** ryn1x joined
[23:11] <comborico1611> And you speak Vietnamese?

[23:12] <ivans> not at all, I'm here just temporarily

[23:12] <ivans> I do speak Khmer though :p

[23:12] <comborico1611> Never heard of it!

[23:13] <comborico1611> I use to take pride in my knowledge of the 10 most spoken languages.

[23:13] <ivans> the language of Cambodia

[23:13] <ivans> 10, that's quite a number

[23:13] <comborico1611> It's an eye-opening list.

[23:13] <comborico1611> Also i use to know all the nations of the world.

[23:14] <comborico1611> I probably can still nail most of them.

[23:14] <ivans> I know 300 digits of pi, for what it's worth

[23:14] <ivans> south-east asia is like a second home by now

[23:15] <comborico1611> Heh. Reminds me of math geek movies.  That's always in there -- how far they can go to pi.

[23:15] <comborico1611> But 300 digits is crazy.

[23:16] <comborico1611> I'm amazed what the mind can do.

[23:16] *** ryn1x left
[23:17] *** cpage__ joined
[23:17] <comborico1611> Ivans, it sounds like your the adventurer type.

[23:17] <comborico1611> You're

[23:17] <ivans> yeah, most certainly

[23:17] <ivans> it's why I'm in #perl6 :D

[23:18] <El_Che> fedora 27 is out, pkgs being built as we speak

[23:19] <comborico1611> I remember i tried to install red hat 6? I failed.

[23:19] <comborico1611> I hate traveling. I hate adventures.

[23:19] *** cpage_ left
[23:19] *** cpage__ is now known as cpage_

[23:20] <comborico1611> How long have you been with Perl6?

[23:20] <ivans> I used pugs for some simple things 10 years ago

[23:20] <ivans> I've read the mailing list on and off

[23:21] <ivans> getting more into it again

[23:21] <comborico1611> I see. But i mean Perl6, not Perl.

[23:21] *** Cabanossi left
[23:22] <El_Che> comborico1611: pugs was perl6

[23:22] <comborico1611> Do you ride a nice bicycle or motorcycle there in SE Asia?

[23:22] <comborico1611> Hmm! Haven't read that before. So he was following for a long time.

[23:23] <El_Che> (https://en.wikipedia.org/wiki/Pugs_(programming))

[23:23] <El_Che> I drove a bellorussian bike on the mountains in Vietnam

[23:23] <El_Che> it was fun :)

[23:23] <ivans> it was "the" perl6 for a short while

[23:23] <ivans> motorcycle for me mostly

[23:23] <comborico1611> I love motorcycles. But too dangerous here in America.

[23:24] <El_Che> comborico1611: we got a ministre out of it

[23:24] <El_Che> the first perl6 ministre in history

[23:24] <comborico1611> Do you ride in the rain?

[23:24] <ivans> with perl5 I've been since 1990's

[23:24] <El_Che> comborico1611: https://en.wikipedia.org/wiki/Audrey_Tang

[23:24] *** Cabanossi joined
[23:24] <ivans> most rains are fairly short so I avoid them when I can

[23:24] <ivans> the rainy season basically means lots of short bursts of rain

[23:25] <ivans> now the dry season is coming so there won't be much rain at all for a while

[23:25] <ivans> but when I have to, I can hold an umbrella while riding :D

[23:25] <comborico1611> Haha.

[23:25] <ivans> or wear a raincoat

[23:25] <comborico1611> I must go. Thank you, Che, for the links!

[23:25] <ivans> have a good morning/day/night

[23:27] <El_Che> see you

[23:29] <El_Che> For whoever is concerned, Fedora27 packages online: https://nxadm.github.io/rakudo-pkg/

[23:31] *** mcmillhj joined
[23:42] *** ryn1x joined
[23:46] *** ryn1x left
[23:47] *** rindolf left
[23:56] *** wander left
