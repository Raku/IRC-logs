[00:08] *** astj joined
[00:19] *** Cabanossi left
[00:20] *** Cabanossi joined
[00:20] *** ovechkin left
[00:24] *** astj left
[00:33] <timotimo> i'll go to bed now; hopefully going to bed a bit earlier will result in better sleep and better getting-out-of-bed

[00:49] *** Cabanossi left
[00:50] *** Actualeyes left
[00:50] *** Cabanossi joined
[00:56] *** protium joined
[00:57] *** geekosaur left
[00:58] *** geekosaur joined
[01:04] *** noganex left
[01:04] *** astj joined
[01:07] *** astj left
[01:17] *** Redrield left
[01:18] *** Cabanossi left
[01:20] *** Cabanossi joined
[01:23] *** mcmillhj joined
[01:25] *** astj joined
[01:28] *** mcmillhj left
[01:34] *** gdonald left
[01:34] *** gdonald joined
[01:38] *** mxco86 left
[01:52] *** Actualeyes joined
[02:02] *** Cabanossi left
[02:05] *** Cabanossi joined
[02:10] *** noganex joined
[02:11] *** Cabanossi left
[02:16] *** awwaiid left
[02:17] *** labster left
[02:18] *** Cabanossi joined
[02:23] *** mcmillhj joined
[02:28] *** mcmillhj left
[02:32] *** labster joined
[02:39] <skids> m: my %h is default(slip()); [%h{2,}].perl.say

[02:39] <camelia> rakudo-moar e1c086: OUTPUT: «[]␤»

[02:39] <skids> m: my %h is default(slip()); [%h{2}].perl.say

[02:39] <camelia> rakudo-moar e1c086: OUTPUT: «[Empty,]␤»

[02:39] *** kurahaupo left
[02:39] *** mcmillhj joined
[02:40] <skids> m: [slip()].perl.say

[02:40] <camelia> rakudo-moar e1c086: OUTPUT: «[]␤»

[02:43] <skids> hmm... was there a reason for nonslice indexing to be protective?

[02:44] *** mcmillhj left
[02:45] <gfldex> m: my %h is default(|()); [%h{2}].perl.say

[02:45] <camelia> rakudo-moar e1c086: OUTPUT: «[slip(),]␤»

[02:45] <skids> m: my %h is default(slip()); (%h{2},).perl.say

[02:45] <camelia> rakudo-moar e1c086: OUTPUT: «()␤»

[02:46] <skids> maybe some interaction with array element itemization...

[02:46] *** Cabanossi left
[02:53] *** gdonald left
[02:53] *** gdonald joined
[02:54] *** Cabanossi joined
[02:59] *** perigrin_ joined
[02:59] *** perigrin_ left
[03:00] *** perigrin_ joined
[03:01] <SmokeMachine> m: my @a = a => 1, a => 2, c => 3; say @a.reduce: -> $p {state %a; %a{$p.key} += $p.value};

[03:01] <camelia> rakudo-moar e1c086: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[03:01] *** wamba joined
[03:02] *** perigrin_ left
[03:02] *** perigrin_ joined
[03:04] <skids> reduce func needs parms for the new value and the accumulator.

[03:04] *** perigrin_ left
[03:04] <skids> m: my @a = a => 1, a => 2, c => 3; say @a.reduce: -> $p, $ {state %a; %a{$p.key} += $p.value};

[03:04] <camelia> rakudo-moar e1c086: OUTPUT: «No such method 'key' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[03:04] <SmokeMachine> m: my @a = a => 1, a => 2, c => 3; say @a.reduce: -> %reduced, Pair $p {%reduced{$p.key} += $p.value; %reduced}

[03:04] <camelia> rakudo-moar e1c086: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[03:05] <skids> m: my @a = a => 1, a => 2, c => 3; say @a.reduce: <-> %reduced, Pair $p {%reduced{$p.key} += $p.value; %reduced}

[03:05] <camelia> rakudo-moar e1c086: OUTPUT: «Cannot assign to an immutable value␤  in block <unit> at <tmp> line 1␤␤»

[03:05] <SmokeMachine> skids: is the accumulator the first or the last one?

[03:05] <skids> m: my @a = a => 1, a => 2, c => 3; say @a.reduce: -> %reduced is rw, Pair $p {%reduced{$p.key} += $p.value; %reduced}

[03:05] <camelia> rakudo-moar e1c086: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤For parameter '%reduced', '%' sigil containers don't need 'is rw' to be writable␤Can only use 'is rw' on a scalar ('$' sigil) parameter, not '%reduced'␤at <tmp>:1␤»

[03:06] <skids> m: my @a = a => 1, a => 2, c => 3; say @a.reduce: -> $b, $a { say "$a $b"; $a + $b };

[03:06] <camelia> rakudo-moar e1c086: OUTPUT: «a  2 a     1␤Cannot resolve caller Numeric(Pair: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[03:06] <skids> m: my @a = a => 1, a => 2, c => 3; say @a.reduce: -> $b, $a { say "$a $b"; $a.key + $b };

[03:06] <camelia> rakudo-moar e1c086: OUTPUT: «a  2 a     1␤Cannot resolve caller Numeric(Pair: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[03:07] <skids> m: my @a = a => 1, a => 2, c => 3; say @a.reduce: -> $b, $a { say "$a $b"; $a + $b.value };

[03:07] <camelia> rakudo-moar e1c086: OUTPUT: «a  2 a     1␤Cannot resolve caller Numeric(Pair: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[03:07] <skids> hrm.

[03:08] <skids> m: my @a = 1,2,3; say @a.reduce: -> $a, $b { say "$a $b"; $a + $b };

[03:08] <camelia> rakudo-moar e1c086: OUTPUT: «1 2␤3 3␤6␤»

[03:08] *** perigrin_ joined
[03:09] <skids> m: my @a = 1,2,3,4; say @a.reduce: -> $a, $b { say "$a $b"; $a + $b };

[03:09] <camelia> rakudo-moar e1c086: OUTPUT: «1 2␤3 3␤6 4␤10␤»

[03:09] <skids> The first then.

[03:09] *** perigrin left
[03:10] <SmokeMachine> m: my @a = a => 1, a => 2, c => 3; say @a.reduce: -> $d, Pair $p {my BagHash $data; if $d ~~ Pair {$data{$d.key} = $d.value} else {$data = $d}; $data{$p.key} += $p.value; $data}

[03:10] <camelia> rakudo-moar e1c086: OUTPUT: «BagHash.new(a(3), c(3))␤»

[03:11] <SmokeMachine> there is no way to set the initial value of the accumulator on a reduce?

[03:13] <SmokeMachine> like: @a.reduce: :initial(BagHash), -> BagHash $acc, Pair $p {$acc{$p.key} += $p.value}

[03:14] <skids> Add it at the front of the list?

[03:14] <SmokeMachine> m: (BagHash, |@a).reduce: -> BagHash $acc, Pair $p {$acc{$p.key} += $p.value}

[03:15] <camelia> rakudo-moar e1c086: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@a' is not declared␤at <tmp>:1␤------> 3(BagHash, |7⏏5@a).reduce: -> BagHash $acc, Pair $p {$a␤»

[03:15] <SmokeMachine> m: my @a = a => 1, a => 2, c => 3; say (BagHash, |@a).reduce: -> BagHash $acc, Pair $p {$acc{$p.key} += $p.value}

[03:15] <camelia> rakudo-moar e1c086: OUTPUT: «Cannot modify an immutable BagHash␤  in block <unit> at <tmp> line 1␤␤»

[03:15] <skids> .new.

[03:15] <SmokeMachine> m: my @a = a => 1, a => 2, c => 3; say (BagHash, |@a).reduce: -> BagHash $acc is rw, Pair $p {$acc{$p.key} += $p.value}

[03:15] <camelia> rakudo-moar e1c086: OUTPUT: «Parameter '$acc' expected a writable container, but got BagHash value␤  in block <unit> at <tmp> line 1␤␤»

[03:16] <SmokeMachine> m: my @a = a => 1, a => 2, c => 3; say (BagHash.new, |@a).reduce: -> BagHash $acc is rw, Pair $p {$acc{$p.key} += $p.value}

[03:16] <camelia> rakudo-moar e1c086: OUTPUT: «Parameter '$acc' expected a writable container, but got BagHash value␤  in block <unit> at <tmp> line 1␤␤»

[03:16] <skids> m: my @a = a => 1, a => 2, c => 3; say ($ = BagHash.new, |@a).reduce: -> BagHash $acc is rw, Pair $p {$acc{$p.key} += $p.value}

[03:16] <camelia> rakudo-moar e1c086: OUTPUT: «Type check failed in binding to parameter '$acc'; expected BagHash but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[03:17] <skids> m: my @a = a => 1, a => 2, c => 3; say ($ = BagHash.new, |@a).reduce: -> BagHash $acc is rw, Pair $p {$acc{$p.key} += $p.value; $acc;}

[03:17] <camelia> rakudo-moar e1c086: OUTPUT: «BagHash.new(a(3), c(3))␤»

[03:17] *** mcmillhj joined
[03:18] *** Cabanossi left
[03:20] *** Cabanossi joined
[03:21] <SmokeMachine> m: my @a = a => 1, a => 2, c => 3; say (Bag.new, |@a).reduce: -> Bag $acc, Pair $p {$acc ⊎ $p.key xx $p.value}

[03:21] <camelia> rakudo-moar e1c086: OUTPUT: «bag(a(3), c(3))␤»

[03:22] *** mcmillhj left
[03:22] <skids> xx probably not the most efficient way to go about that.

[03:23] <SmokeMachine> skids: worse than $acc ⊎ $p.key for ^$p.value ?

[03:28] <skids> m: my @a = a => 1, a => 2, c => 3; say (Bag.new, |@a).reduce: -> Bag $acc, Pair $p {$acc ⊎ $p}

[03:28] <camelia> rakudo-moar e1c086: OUTPUT: «bag(a(3), c(3))␤»

[03:29] <SmokeMachine> :)

[03:32] *** Actualeyes left
[03:38] *** mcmillhj joined
[03:42] *** mcmillhj left
[03:46] *** Cabanossi left
[03:49] *** Cabanossi joined
[04:01] *** AlexDaniel joined
[04:06] *** mcmillhj joined
[04:06] *** AlexDaniel left
[04:10] *** mcmillhj left
[04:12] *** wamba left
[04:21] *** skids left
[04:23] *** mcmillhj joined
[04:27] <ugexe> timotimo: zef reporter branch + `zef install Net::HTTP` + ZEF_REPORTER_P6C=1 enables test reporting and the reports show up on testers.p6c.org now

[04:27] *** mcmillhj left
[04:28] <ugexe> I havent merged it into master yet because I have to multiplex output from TAP.pm6 somehow. For reporting to work it doesn't show any test output until the tests are all finished.

[04:28] <ugexe> http://testers.p6c.org/reports/145800.html

[04:30] <ugexe> fwiw I think reporting quit working for panda (which uses a raw socket) around 2-28, so maybe some newline change?

[04:30] *** BenGoldberg left
[04:30] *** vike left
[04:31] <ugexe> if you can figure it out let me know... i'd like to remove the Net::HTTP dependency

[04:35] *** vike joined
[04:45] *** Actualeyes joined
[04:47] *** Cabanossi left
[04:49] *** Cabanossi joined
[04:57] *** itaipu left
[04:58] *** perigrin_ left
[05:00] *** AlexDaniel joined
[05:24] *** wamba joined
[05:31] *** perigrin joined
[05:46] *** Cabanossi left
[05:48] *** wamba left
[05:49] *** Cabanossi joined
[05:52] *** RabidGravy joined
[05:52] *** lowbro joined
[05:52] *** mr-foobar joined
[05:52] *** lowbro left
[05:52] *** lowbro joined
[05:55] *** lizmat_ is now known as lizmat

[06:01] <samcv> well my install of every module. it hung somewhere. not sure why

[06:01] *** xtreak joined
[06:01] <samcv> at testing NCurses module

[06:03] <moritz> samcv: putting stuff on hack in ~/public_html/ should work

[06:03] <samcv> and then it's accecible where?

[06:04] <moritz> http://hack.p6c.org/~samcv/

[06:04] <samcv> yay

[06:04] <moritz> I can get an SSL cert for that domain if desired

[06:05] <samcv> http://hack.p6c.org/~samcv/install_log.txt gonna have to figure out how to fix hanges

[06:06] <samcv> i'm using `run` atm to run zef commands

[06:06] <moritz> I believe you have to use Proc::Async to work with timeouts

[06:06] <samcv> best way is to use proc::async? yeah

[06:06] <moritz> my book has an example :-)

[06:06] <samcv> i've done it before. i wish it were less work though

[06:07] * moritz too

[06:08] <moritz> time for a high-level module that abstracts this out, I think

[06:13] <samcv> hmm how long to make the timeout

[06:13] <samcv> 5 minutes maybe?

[06:13] <samcv> idk. what's the max time a module and every single dependency could take?

[06:13] <samcv> it should be a leave it alone thing. so i don't want it timing out too early

[06:28] *** lizmat_ joined
[06:31] *** lizmat left
[06:34] *** lizmat_ left
[06:35] *** movl left
[06:40] *** rindolf joined
[06:47] *** wamba joined
[06:53] *** ChoHag joined
[06:58] <moritz> 15min maybe

[06:58] <samcv> moritz, ok going for try 2 now. set a timeout at 10 minutes

[06:58] <samcv> we'll see how it goes

[07:00] <samcv> moritz, why does my utf-8 file show up not in the right encoding?

[07:00] <moritz>   Content-Type: text/plain

[07:00] <samcv> not sure what the server settings are http://hack.p6c.org/~samcv/install_log_live.txt this. in firefox and chrome show wrong. though i can manually select Unicode and shows fine

[07:01] <moritz> let me try something...

[07:01] <samcv> thanks :)

[07:02] <moritz>   Content-Type: text/plain; charset=utf-8

[07:02] <moritz> better.

[07:02] <moritz> should work now.

[07:02] <samcv> \o/

[07:02] <samcv> very yes. much good

[07:03] <moritz> AddDefaultCharset utf-8

[07:03] <moritz> was the secret apache sauce

[07:05] <samcv> :) thought so

[07:06] <samcv> up to at least 19 failing so far

[07:09] <samcv> also think i found a zef problem with dependencies. though could be the packages to blame

[07:10] <samcv> HTTP::Tiny fails because it can't find HTTP::Tinyish during testing. though it tests HTTP::Tinyish before it

[07:10] *** wamba left
[07:11] <samcv> hmm https://gist.github.com/samcv/1030286eb95f8788b16f5e0c45e6d431#file-gistfile1-txt-L38-L56

[07:11] <moritz> are those two in separate distributions?

[07:12] <samcv> not sure

[07:13] <moritz> looking at modules.perl6.org: yes

[07:13] <samcv> that's what i had guessed

[07:14] <samcv> i can install HTTP::Tiny with zef myself. but it could be the long dependency chain messed it up somewhere

[07:14] *** wamba joined
[07:15] *** abraxxa joined
[07:16] *** Cabanossi left
[07:19] *** Cabanossi joined
[07:27] *** darutoko joined
[07:28] <Geth> ¦ ecosystem: IanTayler++ created pull request #319: Added MinG.

[07:28] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/319

[07:30] *** xtreak left
[07:31] *** xtreak joined
[07:35] *** xtreak left
[07:40] <moritz> what's our policy for ecosystem pull requests with a broken source URL in META6.json?

[07:40] <moritz> wait for a fix? or merge straight away?

[07:43] <eater> moritz: doesn't matter

[07:43] <Geth> ¦ ecosystem: b8e1972ab9 | (Ian Tayler)++ (committed by Moritz Lenz) | META.list

[07:43] <Geth> ¦ ecosystem: Added MinG.

[07:43] <Geth> ¦ ecosystem: 

[07:43] <Geth> ¦ ecosystem: MinG is a module for working with Minimalist Grammars: a mildly-context-sensitive formalism first described by Edward Stabler in 1996. MinG::S13 is an implementation of Stabler's 2012/2013 parser for Minimalist Grammars.

[07:43] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/b8e1972ab9

[07:43] <eater> its fixed now :d

[07:45] <moritz> aye

[07:45] *** TEttinger left
[07:45] * moritz just invited a few of the last ecosystem contributors to the perl6 org

[07:46] *** azawawi joined
[07:46] <azawawi> Good morning #perl6

[07:46] <azawawi> Bug of the day https://github.com/azawawi/perl6-ncurses/issues/11 :)

[07:47] <azawawi> cglobal does not work as expected when use-d from another library that uses that cglobal (e.g. NCurses)

[07:48] <azawawi> Commenting out the cglobal section fixes the problem https://github.com/azawawi/perl6-ncurses/blob/master/lib/NCurses.pm6#L30

[07:49] <azawawi> should cglobal's generally be called later?

[07:49] <azawawi> like https://github.com/azawawi/perl6-ncurses/blob/master/lib/NCurses.pm6#L40 that is

[07:54] *** zakharyas joined
[08:01] *** jonas1 joined
[08:03] *** Cabanossi left
[08:04] *** Cabanossi joined
[08:06] *** xtreak joined
[08:06] *** AlexDaniel left
[08:20] *** CIAvash joined
[08:20] *** bjz joined
[08:21] *** dakkar joined
[08:21] *** g5 joined
[08:31] *** Actualeyes left
[08:38] *** xtreak left
[08:42] *** nadim joined
[08:47] *** kent\n left
[08:48] *** salva joined
[08:48] *** kent\n joined
[08:52] *** azawawi left
[08:52] <nadim> morning P6!  \o/

[08:53] <nadim> who is the king of pod?

[08:54] <nadim> I am thinking about porting my module http://search.cpan.org/~nkh/POD-Tested-0.06.4/lib/POD/Tested.pm and wonder  if that is not already done in some way. I read Synopsis but found nothig, want to check.

[08:56] *** xtreak joined
[08:56] <gfldex> nadim: not as a module, we got a test in the docs tho

[08:58] <nadim> do you mean inlining the test in the pod?

[08:58] *** CIAvash left
[08:58] *** xtreak left
[08:59] <gfldex> we can extract examples from the docs and compile them, what helps a bit to detect bitrot

[08:59] *** astj_ joined
[08:59] *** astj left
[08:59] *** xtreak joined
[09:00] <nadim> What tool does that? can Pod be injected as result of code defined in the pod?

[09:01] <nadim> My module is very much about avoiding documentation rot but also as a tool to write cookbooks and design a module with test first

[09:01] *** Cabanossi left
[09:03] *** Cabanossi joined
[09:04] *** xtreak left
[09:06] <gfldex> nadim: in that case you might have to patch rakudo itself because ambient nodes are not implemented yet

[09:12] *** dogbert17_ joined
[09:12] <dogbert17_> o/

[09:15] <dogbert17_> is the document 'Learn Perl 6 in Y minutes' available in our repos? It seems to be hosted on a different server.

[09:15] <dogbert17_> it contains some errors which should be fixed

[09:20] <nadim> gfldex: do you feel the functionality should be in rakudo or in a module. I am not sure a tool to write cookbooks that are tested are best in rakudo but you know better I guess.

[09:26] <gfldex> nadim: right now the pod parser (that is part of Rakudo) will skip any non-pod parts. If you need them to do facy stuff with the code and pod nodes, you will either have to implement your own parser (very welcome, we don't got that yet) or fix the planned but never implemented Pod::Block::Ambient in Rakudo.

[09:28] *** gdonald left
[09:29] *** gdonald joined
[09:33] *** xtreak joined
[09:34] *** kurahaupo joined
[09:34] <timotimo> https://github.com/adambard/learnxinyminutes-docs - dogbert17_ 

[09:34] <moritz> dogbert17_: https://github.com/adambard/learnxinyminutes-docs/

[09:35] <moritz> https://github.com/adambard/learnxinyminutes-docs/blob/master/perl6.html.markdown

[09:41] *** mxco86 joined
[09:42] <timotimo> m: use nqp; <1 2 3>.map: { when * > 5 { "test {nqp::unbox_i($_ // 0)}" } }

[09:42] <camelia> rakudo-moar e1c086: ( no output )

[09:42] <timotimo> m: sub test { use nqp; <1 2 3>.map: { when * > 5 { "test {nqp::unbox_i($_ // 0)}" } } }

[09:42] <camelia> rakudo-moar e1c086: ( no output )

[09:42] <timotimo> ... ?!

[09:44] *** robertle joined
[09:45] *** bjz left
[09:46] *** bjz_ joined
[09:52] <gfldex> lolibloggedtoday: https://gfldex.wordpress.com/2017/04/19/dealing-with-fallout/

[09:57] <timotimo> i'm mildly surprised that try has looser precedence than // does

[09:58] *** jonas1 left
[10:00] *** labster left
[10:01] *** xtreak left
[10:06] <u-ou> m: role A { has $.x }; role B does A { }; role C does A { }; role D does B does C { };

[10:06] <camelia> rakudo-moar e1c086: ( no output )

[10:07] <gfldex> .seen retupmoca

[10:07] <yoleaux> I saw retupmoca 8 Jun 2016 21:09Z in #perl6: <retupmoca> m: say ('a'..'d').rotor(2 => -1).perl;

[10:08] <u-ou> m: role A { has $.x }; role B does A { }; role C does A { }; class D does B does C { };

[10:08] <camelia> rakudo-moar e1c086: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Attribute '$!x' conflicts in role composition␤at <tmp>:1␤»

[10:10] <u-ou> m: role A { has $!x }; role B does A { }; role C does A { }; class D does B does C { };

[10:10] <camelia> rakudo-moar e1c086: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Attribute '$!x' conflicts in role composition␤at <tmp>:1␤»

[10:15] *** lowbro left
[10:15] *** mr-foobar left
[10:16] *** mr-foobar joined
[10:17] *** Cabanossi left
[10:18] <timotimo> gfldex: i think the code in your blog post is actually slightly wrong

[10:18] <timotimo> m: my $result = try "oh lord".&die // "default"; say $result

[10:18] <camelia> rakudo-moar e1c086: OUTPUT: «(Any)␤»

[10:18] *** Cabanossi joined
[10:19] <timotimo> well, that's not failure

[10:19] <timotimo> m: my $result = try "oh lord".&fail // "default"; say $result

[10:19] <camelia> rakudo-moar e1c086: OUTPUT: «default␤»

[10:19] <timotimo> oh, interesting

[10:20] <timotimo> m: my $result = try "oh lord".&fail.butthismethdoesntexist // "default"; say $result

[10:20] <camelia> rakudo-moar e1c086: OUTPUT: «(Any)␤»

[10:20] <gfldex> timotimo: already fixed

[10:21] <timotimo> OK!

[10:22] <gfldex> I noticed because I'm writing a 2nd blog post right nao!

[10:22] <timotimo> that's good bloggage

[10:28] *** kurahaupo left
[10:28] *** mr-foobar left
[10:29] *** mr-foobar joined
[10:30] <gfldex> m: sub picky(\c:($,$)) {say &c.arity}; picky(* - *);

[10:30] <camelia> rakudo-moar 6f3de6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    c used at line 1␤␤»

[10:31] <gfldex> m: sub picky(\c:($,$)) {say c.arity}; picky(* - *);

[10:31] <camelia> rakudo-moar 6f3de6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    c used at line 1␤␤»

[10:31] <timotimo> wouldn't you want |c there?

[10:31] <timotimo> oh

[10:31] <gfldex> m: sub picky(&c:($,$)) {say &c.arity}; picky

[10:31] <camelia> rakudo-moar 6f3de6: OUTPUT: «Too few positionals passed; expected 1 argument but got 0␤  in sub picky at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[10:32] <timotimo> sorry, that's different

[10:32] <gfldex> m: sub picky(&c:($,$)) {say &c.arity}; picky({$^a, $^b})

[10:32] <camelia> rakudo-moar 6f3de6: OUTPUT: «2␤»

[10:32] <gfldex> m: sub picky(&c:($,$)) {say &c.arity}; picky(* - *)

[10:32] <camelia> rakudo-moar 6f3de6: OUTPUT: «Constraint type check failed in binding to parameter '&c'; expected anonymous constraint to be met but got WhateverCode ({ ... })␤  in sub picky at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[10:32] <gfldex> is there a way to say "I want a WhateverCode but it must have 2 params!"?

[10:33] <timotimo> well, you can have a where clause for that, but it should have worked with what you had there, i think

[10:33] <gfldex> m: my &c = * - *; &c.arity.say

[10:33] <camelia> rakudo-moar 6f3de6: OUTPUT: «2␤»

[10:33] <timotimo> yeah

[10:33] <gfldex> so the compiler knows

[10:33] <timotimo> maybe it's expecting Any, but gets Mu?

[10:33] <moritz> m: sub picky(WhateverCode \c where .arity == 2) { c(1, 2) }; say *-*

[10:33] <camelia> rakudo-moar 6f3de6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '&c' is not declared␤at <tmp>:1␤------> 3ky(WhateverCode \c where .arity == 2) { 7⏏5c(1, 2) }; say *-*␤»

[10:34] <moritz> m: sub picky(WhateverCode \c where .arity == 2) { c.(1, 2) }; say *-*

[10:34] <camelia> rakudo-moar 6f3de6: OUTPUT: «{ ... }␤»

[10:34] <timotimo> m: my &c = * - *; &c.signature.perl.say

[10:34] <camelia> rakudo-moar 6f3de6: OUTPUT: «:(;; $whatevercode_arg_1 is raw, $whatevercode_arg_2 is raw)␤»

[10:34] <gfldex> moritz: thx

[10:34] <moritz> though in most cases I'd restrict to Callable, not to WhateverCode

[10:35] <moritz> so picky(&c where .arity == 2) { }

[10:37] *** wamba left
[10:38] *** Luna521 joined
[10:39] *** mr-foobar left
[10:41] *** mr-foobar joined
[10:42] *** wamba joined
[10:46] <nadim> Playing with the profiler, It seems that quite some time is spend as sink at SETTING::src/core/Seq.pm:183, is that usual?	

[10:46] *** lowbro joined
[10:46] *** lowbro left
[10:46] *** lowbro joined
[10:46] *** wamba left
[10:47] <jnthn> nadim: Inclusive time, or exclusive time?

[10:47] <jnthn> But yes, it's very normal if your program has, say, a for loop

[10:47] <gfldex> m: sub picky(WhateverCode $c) { $c.(1) }; say (try picky( return * )) // $!.^name

[10:47] <camelia> rakudo-moar 6f3de6: OUTPUT: «X::ControlFlow::Return␤»

[10:48] <nadim> it Data::Dump::Tree, lots of loops, but and that is a gut feeling, it seems that most of the time is spend there

[10:48] <jnthn> Since for @a { body } compiles into @a.map({ body }).sink

[10:48] <nadim> ah!

[10:48] <jnthn> The .sink being what actually makes the work happen since map is lazy

[10:48] *** Luna521 left
[10:48] <nadim> ok, good to know

[10:53] *** itaipu joined
[10:54] *** domidumont joined
[10:59] *** domidumont left
[11:00] *** domidumont joined
[11:01] <gfldex> lolibloggedagain! https://gfldex.wordpress.com/2017/04/19/you-can-call-me-whatever-you-like/

[11:04] *** wamba joined
[11:17] *** g5 left
[11:17] *** Cabanossi left
[11:17] *** mr-foobar left
[11:19] *** Cabanossi joined
[11:19] *** mr-foobar joined
[11:25] <grondilu> m: say grammar { rule TOP { <ident> | <TOP>+ % \+ } }.parse: 'foo+bar'

[11:25] <camelia> rakudo-moar 6f3de6: OUTPUT: «Nil␤»

[11:25] * grondilu was hoping that would work

[11:26] <jnthn> No, the LTM is terminated by recursion

[11:26] <jnthn> So the <ident> ends up winning

[11:26] <grondilu> oh yeah

[11:29] *** AlexDaniel joined
[11:29] *** wamba left
[11:30] *** iH2O joined
[11:30] <grondilu> wait but then why doesn't it return "foo"?

[11:32] *** iH2O left
[11:35] <jnthn> Because parse anchors at the end of the string

[11:35] <jnthn> Presumably .subparse would give back foo

[11:38] *** xtreak joined
[11:41] *** mr-foobar left
[11:43] *** mr-foobar joined
[11:46] *** ChoHag left
[11:46] *** Cabanossi left
[11:49] *** Cabanossi joined
[12:00] *** wamba joined
[12:06] *** mr-foobar left
[12:06] *** itaipu left
[12:07] *** mr-foobar joined
[12:08] *** ChoHag joined
[12:12] <Geth> ¦ doc: 555bb55d87 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/Any.pod6

[12:12] <Geth> ¦ doc: Document Any.unique

[12:12] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/555bb55d87

[12:13] *** itaipu joined
[12:15] <dogbert17_> moritz: thx for the link, sorry for the late reply

[12:16] <moritz> dogbert17_: no problem

[12:17] *** Cabanossi left
[12:19] *** Cabanossi joined
[12:19] *** mr-foobar left
[12:20] *** mr-foobar joined
[12:20] <Geth> ¦ doc: af1c4ddc4b | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/List.pod6

[12:20] <Geth> ¦ doc: Add advice to reword .unique :with using :as when possible

[12:20] <Geth> ¦ doc: 

[12:20] <Geth> ¦ doc: The :with has O(n²/2) complexity and basically slows to a crawl with

[12:20] <Geth> ¦ doc: 2000+ element lists. 

[12:20] <Geth> ¦ doc: 

[12:20] <Geth> ¦ doc: my @p = 1..3000; @ = @p.unique: :with(&[eqv]); say now - INIT now; # 25.42728348

[12:20] <Geth> ¦ doc: my @p = 1..3000; @ = @p.unique: :as(*.Str); say now - INIT now;    # 0.0185597

[12:20] <Geth> ¦ doc: say 25.427/.0186; #  1367.043011

[12:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/af1c4ddc4b

[12:23] *** jeek left
[12:31] *** bjz_ left
[12:31] *** AlexDaniel left
[12:33] *** bjz joined
[12:41] *** mcmillhj joined
[12:44] *** kyan left
[12:44] *** mcmillhj left
[12:45] *** mr-foobar left
[12:46] *** mr-foobar joined
[12:46] *** Cabanossi left
[12:47] *** mcmillhj joined
[12:49] *** Cabanossi joined
[12:52] *** itaipu left
[12:52] *** domidumont left
[12:55] *** mr-foobar left
[12:57] *** mr-foobar joined
[13:00] *** xtreak left
[13:03] *** jonas1 joined
[13:03] *** jonas1 left
[13:04] *** jonas1 joined
[13:09] *** mr-foobar left
[13:10] *** mr-foobar joined
[13:12] *** ChoHag left
[13:22] *** jonas1 left
[13:23] *** jonas1 joined
[13:24] *** Stamm joined
[13:29] *** ChoHag joined
[13:42] *** jeek joined
[13:43] <Stamm> hello

[13:43] <Stamm> i have a small question about hashes

[13:43] <Stamm> what is the syntax to add an element with a non-string key?

[13:43] *** skids joined
[13:46] <timotimo> you just put it in with %thehash{$object} = "hi"

[13:46] <timotimo> but the hash must be an object hash, or else it'll stringify $object for you

[13:46] <timotimo> https://docs.perl6.org/type/Hash#index-entry-object_hash

[13:46] <moritz> m: my %h{Any}; my $key = []; %h{$key} = 'foo'; say %h{$key}; say %h{[]}

[13:46] <camelia> rakudo-moar 6f3de6: OUTPUT: «foo␤()␤»

[13:47] <moritz> Stamm: ^^ that's a way to work with an object hash

[13:48] <MasterDuke_> m: my %h{Int}; my $a = "a"; %h{$a}++

[13:48] <camelia> rakudo-moar 6f3de6: OUTPUT: «Type check failed in binding to parameter 'key'; expected Int but got Str ("a")␤  in block <unit> at <tmp> line 1␤␤»

[13:48] *** Stamm_ joined
[13:48] <Stamm_> ok, thank you

[13:50] *** Stamm left
[13:56] *** Stamm_ left
[13:59] *** sufrostico left
[14:01] *** Cabanossi left
[14:02] <ugexe> samcv: the reason HTTP::Server::Tinyish fails is because it does some-test-that-does-run($my-code-with-dependency) with the assumption that all their dependencies are fullfilled by CURI and not one of the other possible CURs

[14:04] *** Cabanossi joined
[14:05] *** isBEKaml joined
[14:05] <isBEKaml> OHHAI

[14:06] <timotimo> greetings

[14:10] *** sufrostico joined
[14:10] *** sufrostico left
[14:10] *** sufrostico joined
[14:11] <isBEKaml> Were there some changes to moarvm's configure script recently?

[14:12] <isBEKaml> My daily builds don't work anymore -- I'll try to fetch a detailed trace output in a bit

[14:12] *** dmaestro left
[14:13] *** gregf_ left
[14:13] *** cdg joined
[14:14] <timotimo> it could very well be that it's choking on libtommath

[14:14] <timotimo> i turned it from a folder full of files into a submodule

[14:14] <timotimo> git really, really, really, really, really, really didn't like that

[14:14] <timotimo> so just nuke your moar and all should be good

[14:14] <isBEKaml> yeah, that's what it looks like.... it failed on a submodule update and silently screamed at me for those existing folders!

[14:15] <timotimo> maximum ugh.

[14:15] <isBEKaml> I wiped 3rdparty, let's see if that works

[14:15] <timotimo> might be bad. now there's stuff missing in there

[14:15] <isBEKaml> *shrug* -- I'll know soon

[14:16] <isBEKaml>  \o/

[14:16] <isBEKaml> it works!

[14:16] <timotimo> nice

[14:17] <isBEKaml> urr, 3rdparty/uthash.c? Not cool, man

[14:17] <timotimo> it'd be cool if we had a piece of code in the configure script that could figure out what's happening with the submodules

[14:17] <timotimo> and mv the 3rdparty/libtommath folder out of the way

[14:17] <timotimo> (so that no local changes, if any, get destroyed)

[14:20] <isBEKaml> this 3rdparty folder is trucked

[14:21] <isBEKaml> I'm downloading a fresh zip from Github and copying over missing folders

[14:25] <isBEKaml> Okay, it's all good now

[14:28] *** wamba left
[14:29] *** nicq20 joined
[14:29] <nicq20> Hello \o

[14:29] <yoleaux> 9 Feb 2017 17:34Z <tony-o> nicq20: you may have to do zef update -

[14:30] <timotimo> why not just git reset --hard? taht'll give you all files back, too

[14:31] *** lowbro left
[14:32] <isBEKaml> timotimo: I don't have any local changes. I usually do: 'git clean -xdf' and 'git pull' for taking off on git HEAD

[14:33] <timotimo> you had local changes, you rm -rf'd 3rdparty/

[14:33] <timotimo> 3rdparty contains files under gits control

[14:33] <timotimo> so reset --hard would get them back

[14:34] <isBEKaml> Oh, right -- totally forgot about that. Anyway, I've now fully built perl6

[14:34] <nicq20> Is there a way to get `my $var = 'PLAYING CARD TEN OF DIAMONDS'; say "\c[$var]";` to work? Is interpolation disabled for unicode names?

[14:35] <timotimo> we have something for that now

[14:35] *** sufrostico left
[14:36] <ilmari> m: my $var = 'PLAYING CARD TEN OF DIAMONDS'; say $var.parse-names

[14:36] <camelia> rakudo-moar 6f3de6: OUTPUT: «🃊␤»

[14:36] <timotimo> m: say parse-names('PLAYING CARD TEN OF DIAMONDS')

[14:36] <camelia> rakudo-moar 6f3de6: OUTPUT: «🃊␤»

[14:36] <timotimo> i don't remember when that name was decided upon?

[14:37] <nicq20> Yeah, I was going to say it seems like an odd choice...

[14:37] <nicq20> Oh, well. :)

[14:37] <ilmari> Author: Zoffix Znet [email@hidden.address]
[14:37] <ilmari> Date:   2017-03-02 19:22:23 +0000

[14:37] <ilmari>     Implement Str.parse-names

[14:38] <ilmari> Naming: the name follows Str.parse-base that parses a string containing numerals in some base; whereas this routine parses a string of character names

[14:38] <nicq20> Huh, ok.

[14:39] *** sufrostico joined
[14:41] <timotimo> ah

[14:45] <skids> maybe parse-uninames to match Str.uninames?

[14:45] *** moray` joined
[14:48] *** cdg left
[14:50] <nicq20> skids: That would make more sense to me at least.

[14:51] * skids wonders what zoffix handle-of-the-day is.

[14:51] <isBEKaml> parse-uninames definitely makes more sense

[14:55] *** nicq20 left
[14:58] <TreyHarris> Is a Junction::Utils with constructs to construct complex junctions so you can say "two", "three", "n or more", "n or less" a silly idea? I just needed a "2 or more" junction and wondered if it was worth generalizing

[15:03] *** Cabanossi left
[15:03] *** bjz left
[15:03] *** sufrostico left
[15:04] *** Cabanossi joined
[15:05] <perlpilot> TreyHarris: what's a "2 or more" junction?

[15:05] *** sufrostico joined
[15:05] <perlpilot> TreyHarris: you mean like "any(@foo) but at least 2" ?

[15:06] <timotimo> yeah

[15:06] *** Zoffix joined
[15:06] <Zoffix> skids: the handle is Zoffix

[15:06] <Zoffix> skids: what'd you want?

[15:06] *** gregf_ joined
[15:07] <skids> Oh somehow I missed seeing you in the user list.

[15:07] <skids> The suggestion was that Str.parse-names might be better Str.parse-uninames

[15:07] <Zoffix> I wasn't

[15:07] <[Coke]> I wouldn't use it, but if it's something you needed, abstracting it out into a module might help someone else, sure.

[15:08] <Zoffix> skids: I don't follow this channel, but my bot pinged me because of name mention

[15:08] <skids> ZofBot?

[15:08] <Zoffix> Yup

[15:08] <skids> ZofBot: .botsnack

[15:08] <ZofBot> skids, om nom nom nom

[15:08] <synopsebot6> om nom nom

[15:09] <Zoffix> .parse-names has been in two releases already. The name bikeshedding kinda concluded when the PR with it got merged.

[15:09] <Zoffix> You can join #perl6-dev if you wish to keep current to development discussions.

[15:10] <Zoffix> ... such as what to name .parse-names :)

[15:12] * Zoffix reads back

[15:12] <TreyHarris> timotimo: exactly. like "one(...)", only "two(...)" or "two-or-more(...)" (obviously, parameterized, so actually probably "exactly(2, ...)" or "at-least(2, ...)" or "at-most(2, ...)" ... is that the best signature or is there a cleaner one?

[15:13] <perlpilot> TreyHarris: are you *sure* junctions are the right answer?   Feels more like sets and counting to me.

[15:14] <Zoffix> "don't remember when that name was decided upon?". I proposed the name on March 2nd EST morning, then in afternoon made a PR. Lizmat merged it later in the day, after a +1 from [Coke]: https://github.com/rakudo/rakudo/pull/1031

[15:14] <moritz> TreyHarris: IMHO junctions are neat, but if they don't do what you want, they aren't worth tweaking

[15:14] <moritz> I tend to use junctions only as boolean matchers

[15:14] * perlpilot too

[15:14] <moritz> in that context you can typically fall back to a callback instead

[15:15] <Zoffix> skids: so yeah, .parse-uninames sounds better if a bit too much typing. But I don't want to change something that's been in a release already.

[15:15] <TreyHarris> moritz: ah, I haven't looked into how to run authothreading manually, but that's why I was using them, because "so at-least-one(...)" was quite useful to me and embarrassingly parallell

[15:15] <Zoffix> in 2 releases

[15:15] *** Zoffix left
[15:16] <TreyHarris> sorry, "at-least-two"

[15:16] <TreyHarris> "at-least-one" we have, "any"

[15:18] <TreyHarris> (er, how to do *threading* manually, I meant, obviously)

[15:19] <moritz> junction don't actually evaluate in parallel yet

[15:19] <skids> ah, well, bummer.  Unfortunately I barely have the attention-time to keep current on everything.

[15:20] *** mr-fooba_ joined
[15:20] *** domidumont joined
[15:20] <skids> s/barely/rarely/

[15:20] *** mr-foobar left
[15:20] <TreyHarris> moritz: I know, but I like maintaining the fiction for future-proofing. In this case I'm using junctions of attributes of machines in a datacenter, so it's an obvious case

[15:21] <moritz> TreyHarris: I can't follow that line of reasoning

[15:22] <moritz> but you don't actually have to convince me

[15:23] <moritz> putting stuff into a junction makes it harder to actually use the stuff, unless you only ever use them as boolean matchers

[15:23] <TreyHarris> moritz: if autothreading would likely come to Sets at the same time (or soon after) it came to Junctions, then you've convinced me.

[15:25] <TreyHarris> moritz: (you don't understand why I'd want to future-proof so that the code would autothread later on? I know you don't want me to convince you, so I won't continue arguing, I just want to be sure I know what you don't understand so will know what to reconsider my thinking on)

[15:27] <moritz> TreyHarris: you're basically saying you rely on behavior that might change in future, in order to future-proof your code

[15:29] <TreyHarris> moritz: oh, i thought the one point of junctions was this thing--if I can't rely on it, then I should be doing map-so-length checks instead, no?

[15:29] <TreyHarris> because maps can be parallelized easily in most languages.

[15:30] <TreyHarris> (sorry, I said I wasn't going to argue. So nm, but I apparently don't get it....)

[15:30] *** Zoffix joined
[15:30] <moritz> TreyHarris: the point of junctions is to express ideas more idiomatic

[15:30] <moritz> or more direct

[15:31] <TreyHarris> right, and map-so-length >= 2 is idiomatically, "at-most 2"

[15:32] <TreyHarris> but yeah, I'll just use sets and lenghts.

[15:33] <Zoffix> Wanted to clarify "bikeshedding kinda concluded when the PR with it got merged". I meant the name was proposed in a PR first; I didn't just commit. It's very easy to change a name for a feature added, but *before it's in a release*. Telling people to go use something and then pulling the carpet from under them is LTA. And on more official level: .parse-name isn't even part of Perl 6 language yet, since it's

[15:33] <Zoffix> only in the `master` spec that's yet to be reviewed and approved for 6.d. In the future, we'll likely want to improve this process, so there's some grace period or somethign for features that need time to solidify. OTOH, Slangs are not official either, but people are using them :/

[15:34] *** robertle left
[15:35] <Zoffix> Telling people to go use something as in a release changelog/docs I mean

[15:35] *** sufrostico left
[15:35] <TreyHarris> Zoffix: are you saying that bikeshedding names _before_ that _is_ a good use of time? Because I seems to remember a certain TimToady giving a certain State of the Onion on the importance of naming.... ;-)

[15:36] *** moray` left
[15:37] <Zoffix> TreyHarris: that question is ambiguous since "bikeshedding" can mean "trying to decide on a name in a group" or "pointlessly wasting time on irrelevant minutae"

[15:37] <moritz> investing time in names that appear in a public API sounds like a good investment, if used productively

[15:37] * skids slinks to a discrete corner of the room and tries to pretend he didn't start this.

[15:38] <TreyHarris> skids: lol

[15:38] <Zoffix> :)

[15:38] <perlpilot> not to bikeshed, but I probably would have called it unichars().   uninames() is given some chars it gives you names, unichars() is given some names it gives you chars.

[15:39] <moritz> skids: I prefer continuous corners over discrete corners :-)

[15:40] <TreyHarris> Zoffix: maybe "speak up if a name seems objectively BAD (i.e., reads as ungrammatical English in the way it's typically used, so will lead to frustrating and repeatedspelling mistakes) or if you have a name you think is so much obviously better, but don't waste time iterating on names?"

[15:40] <Zoffix> skids: you did bring up an issue in the process, I think

[15:40] *** nadim left
[15:41] <Zoffix> That public API changes should probably given some X amount of time for dev/community feedback.

[15:41] *** sufrostico joined
[15:42] <Zoffix> m: "foo.txt"

[15:42] <camelia> rakudo-moar 6f3de6: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant string "foo.txt" in sink context (line 1)␤»

[15:42] <skids> I am reminded to bother TimToady or anyone else for bikeshedding "insist role" or "insist method" for my noisy roles branch.

[15:42] <Zoffix> m: "bar/foo.txt".IO.sibling("meow.txt").say

[15:42] <camelia> rakudo-moar 6f3de6: OUTPUT: «"bar/meow.txt".IO␤»

[15:42] <Zoffix> Like that was added after a brief mention on IRC channel.

[15:42] <skids> (https://gist.github.com/skids/18fa6fb1de776400abd43b6e82e9fcc2)

[15:43] <Zoffix> skids: I liked the old thing that was proposed. Some sort of prefix to method

[15:43] <Zoffix> forget what it was

[15:43] <skids> claim.

[15:43] <Zoffix> Ah, yeah :)

[15:43] <skids> But that was applied in a different place.

[15:43] <Zoffix> Ah

[15:44] <skids> I updated the gist since to explain the difference.

[15:44] *** cdg joined
[15:45] *** Actualeyes joined
[15:46] <TreyHarris> Zoffix: was there a good objection to "sibling"/obviously better proposal too late?

[15:47] <Zoffix> TreyHarris: there were no objection from the group that saw the proposal on the IRC at the time

[15:48] <Zoffix> TreyHarris: .sibling was a safe bet tho. It was stolen from Mojolicious's Mojo::File and that core team bikesheds everything to death and isn't shy on changing stuff later on

[15:48] <TreyHarris> Zoffix: you're just saying you feel like there might have been, given more public response time.

[15:48] <Zoffix> TreyHarris: right.

[15:49] <TreyHarris> better to give room for bikeshedding when it doesn't, in some sense "matter" but in another sense *really* matters than to not and leave people to bikeshed later; since bikeshedding they will do regardless, give them an outlet at the time it's actually easy to accept such as constructive input rather than complaint

[15:50] <Zoffix> Or not even the naming, but the change to make IO::Path read methods eager to avoid accidental handle leak. Seems a sane change, but if you follow up on what's using it, you realize that makes all Perl 6 one liners slow and memory hungry when working with largish files

[15:51] <Zoffix> (we didn't do that change at the end)

[15:54] * skids just waiting until someone names something ".family-style"

[15:55] <TreyHarris> Zoffix: indeed. I had a rather hilarious mistake the other day where I temporarily double-bound the same key to XMonad and to Meta, and this resulted, after I tried to visit each of my workspaces, then hit a key, got no response, so tapped enter, my machine froze and then everything went on "normally". the next day I discovered my shells would lock up if I reverse-searched beyond commands a day old. This was

[15:55] <TreyHarris> because I had a single line in histfile whose command consisted only of 234,567,891 copies of the letter 'f'. "fffffffffffff...." (so appropriate that it was 'f', no?) In any case, filtering out the line using Perl 5 took 0.03 sec timed. Perl 6 took about 16 seconds. Every other major high-level language crashed or took so long (minutes) I aborted it. Even _Haskell's_ core-library IO took 35 seconds then

[15:55] <TreyHarris> crashed, though switching to the correct Data.IO.Lazy libraries got it down to a single-digit number of seconds w/o crashing.

[15:56] <Zoffix> .tell samcv looks likere there's possible bustitude with the docs site and the $COLON stuff. Try looking up '.?' safecall operator; when you visit the page, it's /routine/?

[15:56] <yoleaux> Zoffix: I'll pass your message to samcv.

[15:56] *** okcomputer joined
[15:58] *** st_elmo joined
[15:59] *** abraxxa left
[15:59] <TreyHarris> (actually, looking back, it was 678,912,345 copies, because my histfile was over half a gig)

[16:01] *** wamba joined
[16:02] <Zoffix> "Perl 6 IO TPF Grant: Monthly Report (April, 2017)": http://blogs.perl.org/users/zoffix_znet/2017/04/perl-6-io-tpf-grant-monthly-report-april-2017.html

[16:06] <TreyHarris> (the filtering function I used, for reference, was perl -ne 'print unless /^.{1000}/'; interestingly, that ran faster than the equivalent using length())

[16:08] *** pmurias joined
[16:09] <Zoffix> .tell [Coke] my April grant report has been published on blogs.perl.org. You can get it in Markdown format at https://github.com/zoffixznet/IOwesomeness/blob/master/reports/Apr-2017.md

[16:09] <yoleaux> Zoffix: I'll pass your message to [Coke].

[16:09] <Zoffix> \o

[16:09] *** Zoffix left
[16:12] *** robertle joined
[16:17] *** Cabanossi left
[16:18] *** st_elmo left
[16:19] *** Cabanossi joined
[16:21] *** isBEKaml left
[16:26] <Geth> ¦ doc: 0fc39a6082 | (Zoffix Znet)++ (committed using GitHub Web editor) | type-graph.txt

[16:26] <Geth> ¦ doc: [io grant] Fix typegraph

[16:26] <Geth> ¦ doc: 

[16:26] <Geth> ¦ doc: IO::Special does IO

[16:26] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/0fc39a6082

[16:30] *** BrassLantern joined
[16:31] *** BrassLantern left
[16:35] *** captain-adequate joined
[16:37] *** itaipu joined
[16:37] *** BrassLantern joined
[16:39] *** nadim joined
[16:46] *** Cabanossi left
[16:48] *** Cabanossi joined
[16:49] *** nadim left
[16:51] <okcomputer> I just configured perl6 from rakudobrew and from source, each time I receive a warning regarding Linenoise.  Should I be concerned about this?

[16:52] <gfldex> okcomputer: it will work fine without linenoise

[16:53] *** dakkar left
[16:55] <okcomputer> gfldex: is there any particular reason, or is it something I'll have to deal with?

[16:56] <gfldex> okcomputer: you need linenoise for a happy REPL. You can enjoy Perl 6 without ever touching it's REPL.

[16:56] * gfldex hugs camelia 

[16:58] <okcomputer> gfldex: The REPL was one of the things I was looking forward to, is there a setup guide?

[16:59] *** zakharyas left
[16:59] *** khw joined
[17:00] <gfldex> okcomputer: not that I know of

[17:00] <timotimo> i think you really just need to "zef install Linenoise" or "zef install Readline"

[17:01] *** Actualeyes left
[17:01] <timotimo> please be aware that the repl still tends to give some really strange behaviours sometimes

[17:01] <timotimo> so if something fails in some mysterious way, make sure to try it in a regular file, too

[17:02] <okcomputer> timotimo: it is installed, I get an error: "I ran into a problem while trying to set up Linenoise: Failed to create directory '/' with mode '0o777': Failed to mkdir: 21

[17:02] <okcomputer> Continuing without tab completions or line editor

[17:03] <timotimo> wait what :)

[17:03] <gfldex> sounds like fallout

[17:03] <okcomputer> Yeah

[17:03] <timotimo> yeah, let's see

[17:04] <timotimo> i need to rebuild lots of rakudo first

[17:05] <timotimo> so it'll take me a while to look into it

[17:06] <okcomputer> timotimo: No problem.  If I can help let me know 

[17:06] <timotimo> does it give a better error when you pass --ll-exception to perl6?

[17:07] <okcomputer> same one

[17:07] <timotimo> hm, how do you get it to spit out a backtrace or something ...

[17:09] <okcomputer> you mean OSX or perl6?

[17:10] <timotimo> perl6

[17:12] <okcomputer> ok, I've already run some basic tests, and it's not my terminal or shell or the combinantion of the 2, perl6 actually is trying to change the / dir to 777 according to the console

[17:13] <timotimo> well, that's very wrong :)

[17:13] <timotimo> oh great

[17:14] <timotimo> it start up no-prob on my end

[17:14] <okcomputer> I assumed you guys would have picked up on this already if it was common

[17:15] *** Zoffix joined
[17:15] <gfldex> the IO stuff was rewritten the last few weeks. There is likely more fallout lurking.

[17:15] <Zoffix> okcomputer: what's your perl6 -v ?

[17:16] <okcomputer> This is Rakudo version 2017.04-1-g241831e built on MoarVM version 2017.04

[17:16] <okcomputer> implementing Perl 6.c.

[17:16] *** Actualeyes joined
[17:16] <timotimo> okcomputer: are you cool with running gdb?

[17:16] <Zoffix> okcomputer: upgrade. You have a buggy release.

[17:16] <timotimo> because it'll let us get a perl6-level backtrace

[17:16] * TimToady blames hackers

[17:16] <Zoffix> m: $*PERL.compiler.version.say

[17:16] <camelia> rakudo-moar 6f3de6: OUTPUT: «v2017.04.2.3.g.6.f.3.de.6641␤»

[17:17] <Zoffix> okcomputer: there was a bug with %?RESOURCES and I see Linenoise is using some of 'em. I can't repro the problem on HEAD

[17:18] *** xiaomiao left
[17:19] <okcomputer> Zoffix: ok, any specific version to try?  I've been getting this error for about a week with the same errors on a couple of different versions

[17:19] *** xiaomiao joined
[17:19] <Zoffix> okcomputer: 2017.04.2 should be good

[17:20] <timotimo> gfldex: i have a .gitconfig that upsets meta6-bin

[17:20] <okcomputer> Zoffix and timotimo: Thanks, i'll be back after the compile

[17:21] <gfldex> timotimo: please share

[17:21] <Zoffix> okcomputer: hm... A week...  I think the %?RESOURCESS breakage was introduced just on April 17th. So it might be something else.

[17:22] <timotimo> https://gist.github.com/timo/0335a8e7620a40fee44cef76ff3f091c - gfldex 

[17:22] *** azawawi joined
[17:23] <azawawi> hi

[17:23] <timotimo> gfldex: maybe it'd be wise to use the "git config" commands to get what you want

[17:23] <okcomputer> Zoffix:  Yeah, I first built perl6 last thursday

[17:23] <gfldex> timotimo: should be easy to fix

[17:23] <Zoffix> okcomputer: what OS are you using?

[17:24] <timotimo> like "git config -l" will give yuo everything in a probably-simpler-to-parse format

[17:24] <timotimo> and with -z you'll get values delimited by nullbytes

[17:24] <timotimo> Zoffix: that's OSX

[17:24] <okcomputer> Zoffix:  10.12.4 to be exact

[17:24] <azawawi> what's OSX? :)

[17:24] * Zoffix doesn't have access to OSX :(

[17:25] <Zoffix> I'm not hip enough....

[17:25] <azawawi> http://www.macincloud.com ? :)

[17:26] <azawawi> maybe they have an open source license or something

[17:27] <azawawi> Zoffix: also use travis osx :)

[17:27] <Zoffix> azawawi: is that a proper service that lets you run code on OSX or some scam? So far, the "macinclooud" answer I've been getting is Apple forbidding it because they like their laptop sales too much

[17:28] <azawawi> Zoffix: you have like 2-3 mac cloud services. And no i havent tried it personally

[17:28] <gfldex> timotimo: the culprit is [url "schema://some.url"]. Fixed locally travis is travising.

[17:28] <azawawi> but i researched it earlier while trying to run some osx stuff

[17:29] <Zoffix> azawawi: cool. thanks. The $29/month don't sound too bad

[17:29] <azawawi> also https://www.hostmyapple.com/

[17:30] <Zoffix> okcomputer: still having an issue on the updated complier?

[17:30] <Zoffix> uuuu

[17:31] * Zoffix sees the potential bug spot

[17:31] <Zoffix> uuuhhh wtf

[17:31] <okcomputer> Zoffix it builds slow on my laptop, should finish soon...

[17:32] <Zoffix> What's up with this @parts business: https://github.com/rakudo/rakudo/blob/nom/src/core/REPL.pm#L46

[17:32] <Zoffix> That might be okcomputer's bug

[17:33] <Zoffix> Ah, and mkdir used to return empty list but now fails so that's why it remained hidden so long

[17:33] * Zoffix boots up the VM to add a fix

[17:33] <azawawi> do we have known bugs about nativecall's cglobal usage?

[17:34] <azawawi> i had to do this workaround for cglobal to work when used from another package that uses NCurses

[17:34] <azawawi> it is as of NCurses is cursed :)

[17:34] <azawawi> as of=as if

[17:34] <azawawi> https://github.com/azawawi/perl6-ncurses/blob/master/lib/NCurses.pm6#L30

[17:36] <geekosaur> if it's to be global, maybe it should be our

[17:38] <azawawi> tried it

[17:38] <Zoffix> Tho I wonder why I can't repro the issue :/

[17:38] <azawawi> but got this weird bug https://github.com/azawawi/perl6-ncurses/issues/11

[17:39] <timotimo> gfldex: i almost thought so. it's a really weird thin to have in a .ini style file

[17:39] <azawawi> geekosaur: https://github.com/azawawi/perl6-ncurses/commit/235a880c3a459c329c872d7e2f85e557ccc61e46#diff-d695cd10621ba46d8c04189ccd8d3e5eL30

[17:40] *** MasterDuke_ left
[17:41] <gfldex> timotimo: please `zef upgrade Git::Config`

[17:42] <timotimo> sure

[17:42] <Zoffix> timotimo: If that doesn't work, use zef --force install https://github.com/gfldex/perl6-git-config/archive/master.zip

[17:43] <Zoffix> I noticed zef uses versions that I think it pulls from modules.zef.pm or something and doesn't get new stuff right away

[17:43] <geekosaur> that was more "I can see other similar problems coming in the future"

[17:43] <Zoffix> okcomputer: can you try running this: perl6 -e 'mkdir "/"'

[17:44] <Zoffix> 'cause for me that doesn't fail. I guess it fails on OSX :/

[17:44] <azawawi> geekosaur: native api was the first step for now. Next step is OO python-blessings like easy API

[17:45] <okcomputer> Zoffix: it crashed my shell/terminal

[17:46] <geekosaur> uh

[17:46] <Zoffix> okcomputer: good. I found the bug that's hitting you. Working on a fix. Gimme 2 mins

[17:47] *** Cabanossi left
[17:48] *** Cabanossi joined
[17:49] <geekosaur> azawawi, in any case I think the problem is cglobal returns a Proxy, and if you run the lookup multiple times you may kill the existing Proxy. I don;t *think* there can be cache effects..,

[17:50] <geekosaur> there might be an argument for cglobal caching the Proxy it produces for a given symbol

[17:53] <azawawi> geekosaur: anyway it crashed when used from another package and hence changed :)

[17:53] <azawawi> geekosaur: also for ncurses, some variables are not actually useful until initscr is called (e.g. LINES)

[17:53] <geekosaur> "crashed" doesn't tell me much.

[17:53] <azawawi> geekosaur: https://github.com/azawawi/perl6-ncurses/issues/11

[17:54] <azawawi> geekosaur: Cannot invoke this object (REPR: Null; VMNull)

[17:54] <geekosaur> and yes, you have that limitation. also you will run into trouble you try to use it with threads

[17:54] <azawawi> geekosaur: i agree

[17:55] *** domidumont left
[17:55] <geekosaur> I worked out what was initialized when at one point, but I think the safest action is to assume nothing is defined until initscr has been called

[17:56] <azawawi> geekosaur: if you change one of them to our xyz is export = cglobal(...) you will get that error for sure

[17:56] <geekosaur> ...except that for anything involved with colors, you must wait for init_color

[17:57] <Zoffix> 2 more mins

[17:57] <geekosaur> azawawi, yes, both stdscr and curscr will be NULL until initscr

[17:57] <azawawi> start_color you mean?

[17:58] <geekosaur> sorry, yes

[17:58] <geekosaur> also stuff like the slk_ * functions and related variables only work after you init the subsystem

[17:58] <azawawi> no worries

[17:58] <geekosaur> so yes, expect to have to delay everything

[17:58] <Zoffix> uhh.. failures in /repl.t

[17:58] * Zoffix needs more minutes :)

[18:00] <geekosaur> this should probably be documented as a NativeCall gotcha, that many libraries' globals will be NULL until the library is properly initialized, this is C-side behavior and NativeCall cannot insulate you from it

[18:00] *** MasterDuke_ joined
[18:02] <Zoffix> okcomputer: sorry, I fixed the mkdir bug but introduced a new one and having trouble getting the line from where the error is comign from :/

[18:02] <azawawi> "Time is an illusion", Albert Einstein :)

[18:02] *** TEttinger joined
[18:02] *** Actualeyes left
[18:02] <okcomputer> Zoffix: I rebuilt the VM and perl6 but I'm just now reading your later posts.

[18:02] <Zoffix> .oO( 99 bugs in the code, 99 bugs.... patch one down, blah blah blah, 109 bugs in the code )

[18:04] <Zoffix> Ah. I need to learn to read ALL of the output :P

[18:04] <okcomputer> Zoffix:  Would it be useful if I set up ssh on an unused macbook?

[18:05] <Zoffix> Nah, don't worry about it.

[18:06] <Zoffix> I fixed the stuff. Just compiling + stresstesting (takes ~4 minutes) and then should be good

[18:11] <Zoffix> okcomputer: this should be the fix: https://github.com/rakudo/rakudo/commit/b4fa6d6792

[18:11] <Zoffix> okcomputer: rakudobrew build nom; rakudobrew switch moar-nom; rakudobrew rehash

[18:12] <Zoffix> Let me know if that fixes the issue, once the build finishes

[18:13] *** azawawi left
[18:15] <okcomputer> Zoffix: 'nom' is not an available backend, how do i build it?

[18:15] <RabidGravy> BOOM!

[18:15] <Zoffix> okcomputer: rakudobrew build moar nom; rakudobrew switch moar-nom; rakudobrew rehash

[18:15] <Zoffix> That should be the right command :)

[18:16] <RabidGravy> something like that

[18:16] * Zoffix just has update-perl6 alias that nukes everythign and builds from scratch

[18:17] <RabidGravy> :+1+

[18:22] * samcv wakes uup and checks the module build log

[18:22] <yoleaux> 15:56Z <Zoffix> samcv: looks likere there's possible bustitude with the docs site and the $COLON stuff. Try looking up '.?' safecall operator; when you visit the page, it's /routine/?

[18:22] <samcv> 2.8MB great

[18:22] <okcomputer> Zoffix: no startup error. just need to see if it works

[18:22] <samcv> wow... it's still installing modules....

[18:23] <samcv> after like 11 hours?

[18:23] <samcv> O.o

[18:23] <samcv> or however long it was. in any case it's a very long time

[18:23] <Zoffix> buggable: eco

[18:23] <buggable> Zoffix, Out of 816 Ecosystem dists, 77 have warnings, 3 have errors, and 672 have no tags in META file. See https://modules.perl6.org/update.log for details

[18:23] <Zoffix> m: say 816/11

[18:23] <camelia> rakudo-moar 6f3de6: OUTPUT: «74.181818␤»

[18:24] <samcv> oh. it. i think it's asking for my github user name idk why

[18:24] <Zoffix> More than 1 module per minute. Not bad IMO

[18:24] <samcv> i will wake up more first

[18:24] <okcomputer> Zoffix: installs and functions as expected (at the moment), thanks for your help

[18:24] <Zoffix> I know there's some Date module by supernovus that takes ages to test

[18:24] <samcv> yes. i know it well

[18:24] <Zoffix> okcomputer: \o/ thanks for reporting the bug :)

[18:25] <okcomputer> it gave me a reason to come on irc after a long time :)

[18:25] <Zoffix> :)

[18:25] <Zoffix> \o

[18:25] *** Zoffix left
[18:25] <samcv> also wtf @the `.?` page

[18:25] <samcv> O.o

[18:25] * samcv goes to make some tea

[18:25] <samcv> oh

[18:27] <samcv> for some reason zef is asking for my github username. and password really oddly. idk

[18:27] <samcv> o.O https://gist.github.com/samcv/9e04008e33c6332b00abd36332c91586 it's too early for this i think

[18:28] <samcv> dunno how this happened....

[18:28] <samcv> i entered it right. maybe there's some threading going on sinc ei'm using proc::async to have a timeout of 10 minutes on modules?

[18:29] <samcv> eeks there's a lot o ffaling modules

[18:29] *** Actualeyes joined
[18:30] <samcv> go here and search for “»» (FAIL”

[18:30] <samcv> :(

[18:32] *** setty1 joined
[18:34] *** kyclark joined
[18:36] <kyclark> "$t.lines.grep(/^ '>'/)" will find all lines that start with '>'. How do I invert this to find lines that DO NOT start with ">"?  I see I can use "!*.starts-with('>')" but how can it be done with the regex?

[18:37] <timotimo> $t.lines.grep(none(/^ '>'/)) :P

[18:37] <gfldex> samcv: there are modules that got a source-url that starts with git:// and you don't got a github sshkey locally

[18:37] <timotimo> or /^ <-[>]> /

[18:37] <samcv> gfldex, how do i fix that

[18:38] <gfldex> samcv: you send a PR to the module author :->

[18:38] * samcv dies

[18:38] <gfldex> samcv: give me a few minutes

[18:39] *** alphah left
[18:39] * samcv compiles a full list of modules that are failing. well partial. but mostly complete

[18:40] <gfldex> samcv: `git config credential.helper 'cache --timeout=86400'`

[18:40] <samcv> i have no credentials on this server

[18:41] <gfldex> samcv: that will cache any loging to github for hours

[18:42] <kyclark> Thanks, timotimo

[18:42] <gfldex> samcv: you can tell git to use https:// instead for git:// by default, but I don't know an easy way to google that

[18:42] <timotimo> yw

[18:43] <RabidGravy> gfldex, I haven't forgotten your PR for META6

[18:43] *** alphah joined
[18:44] <gfldex> RabidGravy: don't worry, I did :)

[18:45] <[Coke]> .

[18:45] <yoleaux> 16:09Z <Zoffix> [Coke]: my April grant report has been published on blogs.perl.org. You can get it in Markdown format at https://github.com/zoffixznet/IOwesomeness/blob/master/reports/Apr-2017.md

[18:45] *** kyclark left
[18:46] <perlpilot> samcv: What gfldex was talking about is: git config --global url.'https://'.insteadOf 'git://'

[18:46] <perlpilot> samcv: I think

[18:46] *** RabidGravy left
[18:46] *** itaipu left
[18:46] <samcv> yeah. fine. but. that doesn't solve th module not installing

[18:46] <samcv> i know it's possible to do that. but our users shouldn't have to

[18:47] <samcv> they might not have a github account

[18:47] <perlpilot> indeed

[18:47] <samcv> but at least that means it should be an easier fix to those modules?

[18:47] *** labster joined
[18:48] *** itaipu joined
[18:50] *** RabidGravy joined
[18:54] <gfldex> samcv: it is

[18:55] <samcv> is there a way to make line linkable log files. how to easily do this/

[18:55] <samcv> with this long log file i have

[18:56] *** okcomputer left
[18:56] <samcv> the `XXX` module uses `eval_lives_ok` it says did you mean eval-lives-ok

[19:01] *** Cabanossi left
[19:02] <samcv> ok so the XXX module. has PR fixing this going back to 2015...

[19:02] <timotimo> fantastic

[19:02] <samcv> i mean at what point do we remove them from the ecosystem?

[19:02] <timotimo> we sometimes pull things into perl6-community-modules

[19:02] <timotimo> which is a separate github user iirc?

[19:02] <samcv> yeah. there's 4 PR that fix these things

[19:02] <samcv> it's not a project?

[19:03] <timotimo> not sure

[19:03] <samcv> also it has no license either

[19:03] <gfldex> samcv: perl6 -e 'sub MAIN($lf){ put "<html><body><pre>"; slurp($lf).lines.map({„<a name="line-{$++}"/>$_\n“}).put; put "</pre></body></html>" }' ~/irclogs/freenode/gfldex.log > ~/public_html/foo.html

[19:03] <timotimo> oh yeah it's an org

[19:03] <timotimo> of course it is

[19:04] <samcv> can we do that with modules with no license?

[19:04] *** Cabanossi joined
[19:04] <RabidGravy> gfldex, I cherry-picked your actual commit from the PR and ignored the revert 

[19:04] <timotimo> oh, that's problematic i expect

[19:04] <samcv> yeah...

[19:04] <timotimo> there's also a module somewhere that says "license: free for all"

[19:04] <gfldex> RabidGravy: good

[19:04] <timotimo> which ... yeah, no, sadly it doesn't work that way

[19:04] <samcv> timotimo, that's not a license :(

[19:04] <samcv> T_T

[19:04] * samcv grabs the tea that should be ready

[19:06] <gfldex> it's questionalbe to have a module in the ecosystem that don't got a license to start with. We don't got permission to redistribute it's META.info, what we must do to make the ecosystem work.

[19:06] * samcv checks and i don't have licenses on some of my modules...

[19:07] <gfldex> there is that line in the ecosystem repo that kind of asks for that permission but since we don't validate the uploader that's not worth anything

[19:07] <samcv> i mean some projects have the metadata under a very permissive license. and the project can be under whatever it wants

[19:07] <samcv> should we have a similar policy for submitting to the ecosystem?

[19:08] <samcv> hm

[19:08] <samcv> gfldex, we need a metadata field in the META.info for the license of the META file itself

[19:08] <samcv> and another one for the project

[19:08] *** darutoko left
[19:09] <gfldex> also the module needs to state an author

[19:09] <gfldex> how does CPAN handle these cases?

[19:10] * gfldex goes to add --set-license to META6::bin

[19:10] <samcv> gfldex, where is the spec for the META file?

[19:10] <gfldex> samcv: http://design.perl6.org/S22.html

[19:11] <samcv> can we add a metadata-license field?

[19:11] <samcv> and require it for new additions to the module?

[19:11] <gfldex> we should not need that as the author will upload the file to ecosystem/6PAN

[19:12] <gfldex> and by doing to implicitly grants the right to redistribute the module and display any file

[19:12] <gfldex> s/to/so/

[19:12] <samcv> well. if we transition to another cpan system

[19:12] <samcv> we will want that

[19:13] <gfldex> samcv: see bottom of https://github.com/perl6/ecosystem/

[19:13] <samcv> i saw it

[19:14] <samcv> i think would be a good idea to do.

[19:14] <gfldex> the ecosystem doesn't check for an author and can't reject submissions (the PR handler should do that actually)

[19:14] <samcv> i know it doesn't

[19:14] <timotimo> oh nice, how long has this been there?

[19:14] <samcv> that's why we should start implementing that for new additions

[19:14] <samcv> because some other projects have rules about metadata

[19:15] <samcv> and it must be a permissive license

[19:15] <gfldex> samcv: it does check for errors http://ecosystem-api.p6c.org/errors.json

[19:15] *** espadrine joined
[19:15] <samcv> like so https://github.com/samcv/rakudo-appimage/blob/master/org.perl6.rakudo.appdata.xml#L15-L16

[19:15] <timotimo> we can put a piece of text in github that'll be displayed to people who want to make issues, right?

[19:15] <timotimo> would that also work for pullrequests?

[19:15] <samcv> to get appimage xml file data syndicated you need to have a permissive license...

[19:15] <timotimo> can we give them a "[ ] i accept the piece of legal text at the end of the readme" thing?

[19:15] <samcv> so i think we should have the same thing

[19:16] <samcv> we can have that too timotimo but i think the meta itself needs to have it

[19:16] <samcv> because other places may want to distribute the META files. and the license should be inside of it

[19:17] <samcv> yes we can do that for pr timotimo i've done that before

[19:17] <Geth> ¦ ecosystem: gfldex++ created pull request #320: META.info -> META6.json

[19:17] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/320

[19:17] <timotimo> OK, yeah, we should probably do that

[19:17] *** eady left
[19:18] *** eady joined
[19:19] <timotimo> gfldex: the --set-license thing in META6::bin, will that a) add a LICENSE file, b) set a license field in the meta file, c) set a metadata license field, or - more likely - all three? or only the first two until a metadata license field has been decided upon?

[19:20] <Geth> ¦ ecosystem: 6c4cbe1033 | (Wenzel P. P. Peppmeyer)++ (committed by Zoffix Znet) | META.list

[19:20] <Geth> ¦ ecosystem: META.info -> META6.json (#320)

[19:20] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/6c4cbe1033

[19:21] *** jonas1 left
[19:22] <samcv> but even if we think that "somebody has agreed" it's still not very future looking approach. so we need a metadata-license. and we need to enforce it to be one of a certain set of licenses

[19:22] <samcv> that will allow it to be syndicated by other projects and such

[19:22] <samcv> MIT for example. there's a few more, i'll check

[19:24] <samcv> see here https://www.freedesktop.org/software/appstream/docs/chap-Quickstart.html#sect-Quickstart-DesktopApps and scrolldown to Recommended metadata file contents

[19:31] <gfldex> timotimo: it's setting "license": "Some Text" in the META6.info right now. If you start a project with META6::bin it defaults to Artistic License 2.0 right now and copies LICENSE from ~/.meta6/skeleton/LICENSE.

[19:31] <timotimo> mhm

[19:32] <gfldex> the default license name will go into the config

[19:33] <gfldex> what reminds me that I need an elegant way to get they keys out of a multidim Hash (inverse ||@a).

[19:33] <samcv> also artistic 2.0 says you can't make a new module of the same name with the same code right?

[19:34] <samcv> fork it that is

[19:34] <samcv> and call it the same thing even with a different auth?

[19:34] <gfldex> samcv: if you put in on github they demand that you allow folk to hit the fork button

[19:34] <samcv> that's not the same thing

[19:35] * gfldex goes to read the bloody license he is using for quite some time …

[19:39] <gfldex> samcv: one could argue that 4b) is fulfilled by any Perl 6 module because it's fully qualified name in a concat of the module name and the author name

[19:39] <samcv> i opened a issue on eco https://github.com/perl6/ecosystem/issues/321

[19:39] <samcv> yes

[19:39] <samcv> that may be true too

[19:40] <samcv> and i think as long as the person uses the auth explicitly inside the package then it would be ok

[19:41] *** lizmat joined
[19:41] <samcv> gonna read the artistic 2.0 myself right now. see if it's a *good* idea to have the metadata be set to that

[19:41] <gfldex> actually you really have to change the name of the module as seen by `use` or you confuse the hell out of yourself.

[19:41] <samcv> what do you think?

[19:42] <samcv> i haven't read it in the context of metadata yet

[19:43] <gfldex> AL 2.0 does allow a change in license as long as it's in the same spirit

[19:43] <gfldex> so it's not bad as a metadata license

[19:43] <samcv> yeah

[19:43] <samcv> question is should it be the prefered metadata license for us or not? debian says it's all good. so that is very promising

[19:43] <gfldex> section 7 and 8 apply too

[19:45] <gfldex> it may be problematic if someone on the ISS would like to use our software

[19:45] <gfldex> "(13) This license includes the non-exclusive, worldwide,"

[19:45] <samcv> X|

[19:45] * samcv dies

[19:46] <samcv> it says non-exclusive though

[19:46] <samcv> includes. so that doesn't negate non-worldwide

[19:46] *** itaipu left
[19:46] <samcv> artistic license 2.0.1?

[19:46] *** Cabanossi left
[19:46] <gfldex> the "non-exclusive" referes to "patent license"

[19:47] <gfldex> but then, we can't enforce in outerspace anyways

[19:47] <gfldex> :)

[19:47] <samcv> well. it is

[19:47] <samcv> not controlled by any country

[19:47] <samcv> due to treaties

[19:47] <samcv> so that is true

[19:48] *** samcv left
[19:48] *** samcv joined
[19:48] <samcv> paging TimToady if you have any input

[19:49] *** Cabanossi joined
[19:49] *** smls joined
[19:50] <smls> m: say "ç".encode("utf8").decode("iso-8859-1")

[19:50] <camelia> rakudo-moar b4fa6d: OUTPUT: «Can not decode a utf-8 buffer as if it were iso-8859-1␤  in block <unit> at <tmp> line 1␤␤»

[19:50] <smls> ^^ Why not?

[19:50] <samcv> why would you want to

[19:51] <samcv> that's not going to convert between two formats

[19:51] <smls> I know

[19:51] <samcv> but why?

[19:51] <samcv> probably because it's not valid utf-8?

[19:51] <samcv> or valid codepoint values?

[19:51] <samcv> idk.

[19:51] <smls> I want to find out what string in Windows  Codepage encoding produces the same bytes as mu utf8 string

[19:51] <smls> *my

[19:52] *** AlexDaniel joined
[19:52] <samcv> well code is in src/core/Buf.pm that doesn't let it do that

[19:52] <samcv> in rakudo

[19:53] <gfldex> samcv: you could now `zef upgrade META6::bin; find ~/projects/perl6/lib -name META6.json | xargs -n 1 dirname | xargs -n 1 -I '{}' echo meta6 --set-license="Artistic License 2.0" --base-dir="{}"`

[19:53] <gfldex> samcv: you could now `zef upgrade META6::bin; find ~/projects/perl6/lib -name META6.json | xargs -n 1 dirname | xargs -n 1 -I '{}' meta6 --set-license="Artistic License 2.0" --base-dir="{}"`

[19:53] <gfldex> actually

[19:53] <smls> m: say "ç".encode("utf8").WHAT;

[19:53] <camelia> rakudo-moar b4fa6d: OUTPUT: «(utf8)␤»

[19:53] <smls> m: say "ç".encode("utf8") ~~ Blob;

[19:53] <camelia> rakudo-moar b4fa6d: OUTPUT: «True␤»

[19:54] <samcv> i wonder what happens if we let you override that error

[19:55] <smls> m: say Blob.new( "ç".encode("utf8") ).decode("iso-8859-1");

[19:55] <camelia> rakudo-moar b4fa6d: OUTPUT: «Ã§␤»

[19:55] <smls> Heh, that ^^ seems to work

[19:55] <samcv> heh

[19:55] <samcv> yea

[19:56] <samcv> we could have a :force option idk

[19:56] *** labster left
[19:56] <samcv> or take out the check and let people do ridiculous things without realizing it

[19:57] <smls> If the restriction is to save people from doing something different than they indend, then the error message should probably be more clear on that (and suggest a work-around)

[19:57] <smls> rather than just sayuing "can not" ... :)

[19:57] <samcv> hmm say "ç".encode("utf8").decode("iso-8859-1", :force)

[19:57] <samcv> i end up with the same character

[19:57] <samcv> maybe it's my terminal? hm

[19:58] <samcv> oh i see

[19:59] <samcv> it doesn't pass through the option

[20:02] <samcv> but also uhm. ok now it works fine

[20:05] <samcv> smls, i added a PR for RFC https://github.com/rakudo/rakudo/pull/1063 if you want to put some explaination on why this is useful

[20:06] <samcv> though idk maybe we don't want a :force option, but regardless. post something saying how people should be able to change decodings and such

[20:08] *** pytuger left
[20:16] *** rindolf left
[20:19] *** smls left
[20:20] *** BrassLantern left
[20:25] *** labster joined
[20:26] <gfldex> RabidGravy: maybe add to the README.md '$m<support><source> = 'http://github.com/you/somerepo.git'

[20:27] <skids> m: class A { class B { }; method f { ::?CLASS::B.say } }; A.new.f  # I go get my rubber chicken now

[20:27] <camelia> rakudo-moar b4fa6d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3ss A { class B { }; method f { ::?CLASS:7⏏5:B.say } }; A.new.f  # I go get my rubbe␤    expecting any of:␤        colon pair␤»

[20:30] <skids> m: class A { class B { }; method f { ::(::?CLASS.^name ~ "::B").say } }; A.new.f # eh... bet that ain't fast.

[20:30] <camelia> rakudo-moar b4fa6d: OUTPUT: «(B)␤»

[20:35] *** spebern joined
[20:44] <jnthn> ::?CLASS.WHO<B> probably works as will be faster

[20:44] <jnthn> *and 

[20:45] <skids> \o/

[20:46] *** kurahaupo joined
[20:48] *** bjz joined
[20:57] *** spebern left
[20:57] <Geth> ¦ ecosystem: 6d1ca05594 | (Samantha McVey)++ | PULL_REQUEST_TEMPLATE.md

[20:57] <Geth> ¦ ecosystem: Add a Pull Request Template

[20:57] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/6d1ca05594

[20:57] <samcv> ok addad a pull request template

[20:57] <samcv> \o/

[20:58] <AlexDaniel> mhm does it have to be so explicit

[20:59] <samcv> idk.

[20:59] <samcv> maybe not

[20:59] <samcv> but we don't have a license field in META yet. which is the better solution

[21:00] <samcv> err a metadata license field

[21:00] <samcv> which would solve the actual problem and not require anything but travis checking to make sure it was there

[21:03] *** cdg_ joined
[21:04] *** cdg left
[21:04] <samcv> and hopefully will remind people to add a license to their project

[21:05] <samcv> which i need to do actually

[21:08] <samcv> also atm the META spec says to use license url's as the license field. but i think that is not right

[21:09] <samcv> we should use the most widely used tags which are spdx license tags so like "Artistic-2.0" i think is artistics tag. and then under resources we can put a license field

[21:10] *** Actualeyes left
[21:10] *** mcmillhj left
[21:11] *** RabidGravy left
[21:12] *** skids left
[21:16] *** Cabanossi left
[21:16] <samcv> this is what i just changed my META.info file to: https://github.com/samcv/URL-Find/blob/master/META.info

[21:16] <samcv> seems pretty sane

[21:17] <[Coke]> do we need both license and resource/license?

[21:18] <samcv> no

[21:18] *** Cabanossi joined
[21:19] <samcv> but if it's not one of the https://spdx.org/licenses/ ones here, then should probably have a resource. but it's def not required imo

[21:24] *** Actualeyes joined
[21:27] <gfldex> perl6 -e 'use META6::bin :HELPER; for fetch-ecosystem() { say .<name> if !.<license>.defined }' | wc -l

[21:27] <gfldex> 709

[21:27] <gfldex> oh well

[21:28] <Geth> ¦ ecosystem: 382d94d121 | (Samantha McVey)++ | PULL_REQUEST_TEMPLATE.md

[21:28] <Geth> ¦ ecosystem: Make the pull request template more inviting and friendly

[21:28] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/382d94d121

[21:28] <gfldex> out of 816

[21:28] <timotimo> samcv: is there a typo in "and bigger and better a place"?

[21:29] <samcv> yes.

[21:29] *** Celelibi left
[21:29] <timotimo> and some - have spaces in front and others not

[21:29] <samcv> yep

[21:29] <samcv> ack. my github markdown preview on atom renders a little differently than github

[21:31] *** mcmillhj joined
[21:32] *** bjz left
[21:32] *** Celelibi joined
[21:32] <Geth> ¦ ecosystem: 9c57cd7940 | (Samantha McVey)++ | PULL_REQUEST_TEMPLATE.md

[21:32] <Geth> ¦ ecosystem: Grammar and formatting fixes to pull request template

[21:32] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/9c57cd7940

[21:33] <AlexDaniel> don't worry… markdown gists, comments and wiki pages on github render differently as well…

[21:33] <samcv> X|

[21:34] <timotimo> oh, just today i saw a problem in github's perl6 syntax highlighting

[21:34] <timotimo> it was like / 'foo//' / and the rest of the file was shown as regex or something

[21:34] <timotimo> any reason to dig it up?

[21:37] <Geth> ¦ ecosystem: 181ec478c1 | (Samantha McVey)++ | PULL_REQUEST_TEMPLATE.md

[21:37] <Geth> ¦ ecosystem: Not everbody knows how to use github checkboxes. Be more friendly

[21:37] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/181ec478c1

[21:37] <samcv> and just in case. encountered this issue  afew times on learnxinyminutes.com's github. we had checkboxes

[21:37] <AlexDaniel> timotimo: *shrug*. Too many highlighting bugs, only one samcv :(

[21:37] <samcv> and several times peolpe had no clue how the hell to use them

[21:37] <samcv> heh

[21:37] <samcv> you guys can fix them yourself too :P

[21:38] <samcv> i have a contributing.md page that is a tutorial on how the grammars work

[21:38] <timotimo> oh, no, regexes scare me :P

[21:38] <samcv> also i don't know why github ruined all my links https://github.com/perl6/atom-language-perl6

[21:38] <samcv> look at how ugly this is

[21:39] <timotimo> yikes

[21:39] <samcv> and idk how to fix it

[21:39] <samcv> because i didn't change anything

[21:40] *** bjz joined
[21:40] <samcv> it works perfectly on my atom github markdown preview

[21:40] <AlexDaniel> by the way I see that variables like $ok or $gist are highlighted incorrectly

[21:40] <samcv> well i know it is perfect

[21:40] <samcv> link

[21:40] <samcv> also github sucks

[21:41] <samcv> sometimes it doesn't fully highlight pages and it's not my fault. but link me to where you see this

[21:41] <AlexDaniel> https://github.com/perl6/whateverable/blob/master/Whateverable.pm6#L61 and https://github.com/perl6/whateverable/blob/master/Whateverable.pm6#L341

[21:41] <samcv> yeah that's github sucking. highlights perfectly for me

[21:41] <samcv> sometimes it like misses things

[21:42] <samcv> or maybe that's just how they highlight variables?

[21:42] <samcv> hm actually.

[21:43] <samcv> yeah all those variables highlight identically for me. i checked the tokens

[21:44] <samcv> but i could try changing something maybe. will take a while for github to take effect until it repulls in changes but

[21:44] <samcv> i need to see their stylesheet

[21:46] <samcv> they don't have any tokens for variables in most places and i have no clue why

[21:46] <samcv> they do some postprocessing to reduce the size of the html though and abbreviate things. like our docs have the full token names

[21:48] <samcv> this is maybe what they do AlexDaniel https://gist.github.com/demisx/025698a7b5e314a7a4b5

[21:49] <samcv> i don't even know how i could play around with this other than changing something and waitig hella long time.

[21:49] <samcv> they seem to be discarding certain tokens

[21:49] <samcv> though

[21:52] *** cpage_ left
[21:54] <ingy> the perl6 repl suggests I use zef ...; which I don't have... and the things I find on the web about zef tell me to use other things I don't have...

[21:54] <gfldex> ingy: you need git and rakudo

[21:54] *** mcmillhj left
[21:54] <timotimo> ingy: point us toward "the things"?

[21:55] <timotimo> zef is totally, whole-heartedly recommended

[21:55] <mst> ingy: rakudo star ships with zef

[21:55] <ingy> okiedoke

[21:55] <ingy> and rakudobrew?

[21:55] <mst> ingy: if you don't have zef, you either have an old star, or you decided to be clever and install things by hand

[21:55] <Geth> ¦ ecosystem: 25f071654a | (Samantha McVey)++ | META.list

[21:55] <Geth> ¦ ecosystem: URL::Find change to META6.json

[21:55] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/25f071654a

[21:55] <timotimo> rakudobrew has "build-zef"

[21:55] <timotimo> or "build zef"

[21:55] <mst> ingy: rakudobrew is for people developing rakudo

[21:55] <timotimo> or something

[21:55] <gfldex> ingy: try: `git clone https://github.com/ugexe/zef; cd zef; perl6 -I lib bin/zef --force install .

[21:56] <ingy> I just installed from nom

[21:56] <Geth> ¦ ecosystem: eb27661f94 | (Samantha McVey)++ | PULL_REQUEST_TEMPLATE.md

[21:56] <Geth> ¦ ecosystem: Fix link for PR template example to META6.json

[21:56] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/eb27661f94

[21:57] <ingy> I can get zef installed. Was just pointing out rude seeming behaviour.

[21:57] <mst> I still don't know what you actually did

[21:57] <ingy> But since I built from nom instead of star, I no longer feel that way

[21:57] <mst> right, yeah, that's the rakudo from scratch approach

[21:58] <mst> as with LFS, you don't get a full distro that way ;)

[21:58] <ingy> I installed perl6, ran perl6, got told about zef, got annoyed...

[21:58] <ingy> noted

[21:58] <timotimo> should we reword the message, then?

[21:58] <ingy> prolly not

[21:58] <mst> also, not having a full installer in core

[21:58] <mst> at least means we'll have different problems to the cpan/cpanplus/etc. fun that perl5's experienced

[21:59] <ingy> ignore the whole ingytrusion

[22:01] *** mcmillhj joined
[22:10] <Geth> ¦ ecosystem: a3bf0b72c4 | (Samantha McVey)++ | PULL_REQUEST_TEMPLATE.md

[22:10] <Geth> ¦ ecosystem: Fix error, license URL's should be listed under support key

[22:10] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/a3bf0b72c4

[22:14] *** bjz left
[22:16] *** cdg joined
[22:16] <Geth> ¦ specs: samcv++ created pull request #120: Update META info for the license section

[22:16] <Geth> ¦ specs: review: https://github.com/perl6/specs/pull/120

[22:20] *** cdg_ left
[22:20] *** cdg left
[22:24] *** pytuger joined
[22:24] *** pytuger left
[22:25] <timotimo> socket.io claims to be a "realtime" framework, yet there isn't a single issue on their github that asks them to remove this ridiculous claim

[22:26] <samcv> you should make one

[22:27] <timotimo> nah, this is only good for a minute of ranting

[22:27] <timotimo> i don't actually want anybody to feel bad for not knowing what realtime means

[22:27] <samcv> but.

[22:27] <samcv> don't make me submit an issue for you

[22:27] <timotimo> these people are out there making real money without knowing a single solitary thing that any ivy tower elitist would claim is required knowledge

[22:27] <samcv> real money? is that like real time?

[22:28] <timotimo> well, it's real money the same way socket.io is real time

[22:28] <gfldex> it's fiat money, so yes, it's like real time

[22:28] <timotimo> there are no guarantees that they will receive money at all

[22:28] <samcv> obviously they make real money so they must be real time

[22:28] <samcv> have you used socket.io timotimo 

[22:29] <timotimo> i have not

[22:31] <timotimo> i wonder how a pullrequest suggesting to put scarequotes around every mention of "real time" would be received

[22:31] <timotimo> probably poorly

[22:31] <samcv> https://loopback.io/doc/en/lb2/Realtime-socket-io.html

[22:31] <samcv> Building a real-time app using socket.io and AngularJS

[22:31] * samcv walks off a short plank

[22:31] <samcv> nice timotimo 

[22:32] <timotimo> come on, be nice. javascript devs already have to deal with loads of crap thrown their way

[22:32] <mst> samcv: I have

[22:33] <timotimo> i should also be nice

[22:33] <mst> socket.io is a perfectly sensible idea, with an implementation that's 95% crack because of the various olde browsers it supports

[22:33] <timotimo> they are basically taking a bullet for other js devs, eh?

[22:35] *** pmurias left
[22:35] *** mcmillhj left
[22:35] <u-ou> why can classes that do roles access the done role's private attributes but not roles that do roles?

[22:37] <timotimo> hm, good question. does deriving from the other role instead help?

[22:37] *** wamba left
[22:37] <u-ou> yeah

[22:37] <samcv> timotimo, is this to omean https://i.imgur.com/C3TCR3a.png

[22:37] <u-ou> if you go role A, role B does A, class C does B

[22:37] <u-ou> is that what you mean?

[22:38] <samcv> did i go too far

[22:38] <samcv> see image i attached at bottom

[22:39] *** espadrine left
[22:40] <timotimo> did you also try on node.js if that makes it real-time?

[22:40] <samcv> lol did you see the uploaded picture at bottom of my screenshot

[22:40] <timotimo> u-ou: no, i mean "role B is A"

[22:41] <u-ou> can roles is?

[22:41] *** gfldex left
[22:41] <timotimo> samcv: well, i hope they can take a joke and just laugh it off

[22:41] <samcv> lol

[22:41] <timotimo> i think so

[22:41] *** gfldex joined
[22:41] <u-ou> I don't even get what that would mean, for a role to is instead of do

[22:41] <timotimo> m: role B { has $!foo }; role A is B { method test { say $!foo } }; class C does A { }; C.test

[22:41] <camelia> rakudo-moar b4fa6d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Attribute $!foo not declared in role A␤at <tmp>:1␤------> 3ole A is B { method test { say $!foo } }7⏏5; class C does A { }; C.test␤    expecting any of:␤        horizontal whitespace␤      …»

[22:41] <samcv> idk. i'm starting to feel a little bad. but the screenshot is also hilarious to me

[22:41] <timotimo> okay, it doesn't work

[22:42] <timotimo> yes, the screenshot is pretty fantastic

[22:42] <timotimo> please provide a "solution how to fix", too

[22:43] *** ChoHag left
[22:43] <timotimo> also, is your brain really the OS? i find it hard to properly assign labels like that

[22:43] <u-ou> you're running js on your brain?

[22:43] <samcv> i'm gonna change the screenshot tho

[22:43] <samcv> err i mean

[22:43] <timotimo> oh, you're missing a " before Source in the first part

[22:43] <samcv> the steps to reproduce

[22:44] <samcv> * read definition of realtime computing * use socket.io * see screenshot attached

[22:44] *** Zoffix joined
[22:44] <Zoffix> FWIW, since I suspect more people will come around asking about it: There's an OSX REPL history bug that made it into release (and thus will be part of Rakudo Star). When starting REPL, it displays a message about failed mkdir '/' and doesn't save history. Most users can probably just ignore the message and move on with their lives, but if they really need saved history they can make a shell alias for REPL

[22:44] <Zoffix> That Saves: https://gist.github.com/zoffixznet/6a0d212ada41fce7aeca15fa9efcc263

[22:45] <Zoffix> I don't have OSX to test this on, but my educated guess is it works.

[22:45] *** Zoffix left
[22:47] <AlexDaniel> samcv: this is hilarious XD

[22:47] <samcv> yeah it's pretty great

[22:47] <timotimo> even if it is funny, please don't go "dog-piling" onto their project

[22:47] <samcv> made a few changes AlexDaniel https://i.imgur.com/5gbG8Qp.png i think about ready to submit

[22:48] <AlexDaniel> evidence attached XDD

[22:48] <samcv> lol.

[22:49] <AlexDaniel> the previous title was fine by the way

[22:50] <AlexDaniel> it was exactly how they wrote it

[22:50] <samcv> lol.

[22:51] <AlexDaniel> https://horizon.io/

[22:51] <samcv> ok well iupdated it

[22:51] <ugexe> pr sent to fix http::server::tiny test

[22:51] <samcv> to add a step to the reproduction steps

[22:51] <samcv> issue is here https://github.com/socketio/socket.io/issues/2915

[22:54] *** mcmillhj joined
[22:56] *** kurahaupo left
[22:56] <timotimo> samcv: don't react to your own bug report with a thumbs up :P

[22:57] <samcv> fine!

[22:57] <samcv> somebody else thumbs up then!

[22:57] <timotimo> someone else already did

[22:59] *** mcmillhj left
[23:00] <timotimo> thanks to atlus turning off screenshots and video clips in persona 5 i can't make a video showing socket.io ripping off its "realtime" mask …

[23:01] <timotimo> it's kinda strange that the issue list shows that bug as "1/2 done" because the "i want to report a bug" box is ticked and the "feature request" box isn't

[23:02] *** kurahaupo joined
[23:02] *** kurahaupo_ joined
[23:02] *** kurahaupo left
[23:03] <samcv> lol timotimo 

[23:03] <timotimo> what do they even expect from calling their stuff "realtime"?

[23:04] <timotimo> it's not like when you open a websocket you have to wait three days for the post office to deliver a connection invitation?

[23:04] <samcv> idk.....

[23:04] <samcv> it makes no sense

[23:04] <samcv> you don't need realtime for sockets usually either

[23:04] <timotimo> is it just their word for "fast"?

[23:04] <samcv> i think they mean asynchronous?

[23:04] <samcv> that's what it should say

[23:04] <timotimo> i don't think you can actually get realtime guarantees for sockets unless you have full control over the whole network?

[23:04] <timotimo> perhaps "live"?

[23:05] <timotimo> BBIAB

[23:05] *** mcmillhj joined
[23:06] <MasterDuke_> you could have a realtime guarantee about how quicklyl you respond to incoming data on a socket, right?

[23:07] <samcv> i search for realtime sockets and get 12.9 million results on google

[23:07] <samcv> realtime sockets -socket.io returns wayyyy les

[23:07] <samcv> only 600k

[23:08] <samcv> https://www.google.com/search?num=100&q=realtime+sockets+-socket.io&oq=realtime+sockets+-socket.io

[23:08] <samcv> timotimo, https://github.com/videlalvaro/gifsockets

[23:09] <samcv> at least they did Real Time (TM)

[23:09] *** kurahaupo_ left
[23:10] <AlexDaniel> I thought it was for “streaming”

[23:10] *** mcmillhj left
[23:10] <AlexDaniel> but streaming sockets… wtf…

[23:13] <timotimo> yes! gif sockets!

[23:13] <timotimo> i remember that <3

[23:15] <timotimo> you can tell they're a cool project because they wrote it in clojure rather than js

[23:17] *** BenGoldberg joined
[23:20] *** mcmillhj joined
[23:23] *** kurahaupo joined
[23:25] *** mcmillhj left
[23:26] <timotimo> masak: i went ahead and made druid pass its tests again :)

[23:31] <timotimo> bisectable6: $_ = <1>; when (3..*) | (* < 1) { say "doh" }

[23:31] <bisectable6> timotimo, On both starting points (old=2015.12 new=b4fa6d6) the exit code is 0 and the output is identical as well

[23:31] <bisectable6> timotimo, Output on both points: «doh»

[23:31] <timotimo> i wonder when that happened

[23:31] <timotimo> c: 2015.10 $_ = <1>; when (3..*) | (* < 1) { say "doh" }

[23:31] <committable6> timotimo, ¦2015.10: «doh»

[23:31] <timotimo> c: 2015.08 $_ = <1>; when (3..*) | (* < 1) { say "doh" }

[23:31] <committable6> timotimo, ¦2015.08: «Cannot find this revision (did you mean “2016.08”?)»

[23:31] <timotimo> c: 2015.09 $_ = <1>; when (3..*) | (* < 1) { say "doh" }

[23:31] <committable6> timotimo, ¦2015.09: «»

[23:32] <timotimo> bisectable6: GOOD=2015.09 BAD=2015.10 $_ = <1>; when (3..*) | (* < 1) { say "doh" }

[23:32] <bisectable6> timotimo, Bisecting by output (old=2015.09 new=2015.10) because on both starting points the exit code is 0

[23:32] <bisectable6> timotimo, bisect log: https://gist.github.com/fc27be678e79ed25834468172dcdba46

[23:32] <bisectable6> timotimo, (2015-10-22) https://github.com/rakudo/rakudo/commit/582661f3c083afd78ca3de884116374fd01424bc

[23:34] *** cpage_ joined
[23:46] *** Cabanossi left
[23:48] <timotimo> masak: now you can even run the cli, but it doesn't show the 3d view yet

[23:48] *** Cabanossi joined
[23:49] *** labster left
[23:50] *** labster joined
[23:54] *** mcmillhj joined
[23:56] <timotimo> masak: the 3d view works again \o/

[23:59] *** mcmillhj left
