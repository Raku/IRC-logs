[00:07] *** aindilis joined
[00:18] <[Coke]> .

[00:18] <IOninja> :

[00:21] *** _28_ria joined
[00:24] *** TeamBlast joined
[00:26] *** Sound left
[00:31] <IOninja> What's :exclusive mode in open?

[00:34] <IOninja> I'm guessing some sort of locking to prevent another open, but it don't seem to be doing anything....

[00:35] <IOninja> `perl6 -e 'my $x = "foo".IO.open: :rx; my $y = "foo".IO.open: :rx'` don't throw no exceptions.

[00:35] <geekosaur> my guess would be O_EXCL: used when creating a file, to ensure it won't overwrite an existing one

[00:36] <geekosaur> but, that should not have succeeded

[00:37] <geekosaur> (wonder if it's implemented yet. there's some stuff open has documented but not implemented yet, in part because libuv doesn't expose them (or expose them in a usable form)

[00:37] <IOninja> Ah, it does work.

[00:37] <BenGoldberg> Does open return a failure or throw an exception?

[00:37] <IOninja> Returns a Failure

[00:38] <BenGoldberg> So after opening twice and assigning to $x and $y, are they both not-failures?

[00:38] *** thundergnat left
[00:39] <IOninja> They're failures. I was just not doing anything else with them so there's no throwage

[00:40] <BenGoldberg> s: "foo".IO, 'open'

[00:41] <BenGoldberg> m: dd &open

[00:41] <camelia> rakudo-moar 6060bd: OUTPUT: ¬´Sub open = sub open (| is raw) { #`(Sub|38078360) ... }‚ê§¬ª

[00:41] <IOninja> s: "foo".IO.open, 'open', \()

[00:41] <SourceBaby> IOninja, Something's wrong: ‚ê§ERR: Could not find candidate that can do \()‚ê§  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 29‚ê§  in block <unit> at -e line 6‚ê§‚ê§

[00:42] <BenGoldberg> s: "foo".IO, 'open', \()

[00:42] <IOninja> s: "foo".IO.open, 'open', \(:r)

[00:42] <SourceBaby> IOninja, Something's wrong: ‚ê§ERR: Could not find candidate that can do \(:r)‚ê§  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 29‚ê§  in block <unit> at -e line 6‚ê§‚ê§

[00:42] <IOninja> you lie!

[00:42] * BenGoldberg bops IOninja for making SourceBaby ignore him. :P

[00:42] <IOninja> s: "/home/zoffix/.bashrc".IO.open, 'open', \(:r)

[00:42] <SourceBaby> IOninja, Sauce is at https://github.com/rakudo/rakudo/blob/6060bd3/src/core/IO/Handle.pm#L13

[00:42] <IOninja> Success.

[00:43] <IOninja> Your own fault :P

[00:44] <IOninja> buggable: eco Sourcery

[00:44] <buggable> IOninja, CoreHackers::Sourcery 'Helper for showing actual source code locations of core subs and methods': https://github.com/zoffixznet/perl6-CoreHackers-Sourcery

[00:44] * AlexDaniel considers this as a bug in the bot

[00:44] <AlexDaniel> ah no

[00:44] <IOninja> ^ the bot just uses that. So you can use it yourself.

[00:44] <AlexDaniel> nevermind, I'm blind again today

[00:44] <IOninja> AlexDaniel: which part?

[00:44] <AlexDaniel> IOninja: ignore me, I'm stupid

[00:44] <IOninja> OK :)

[00:47] *** espadrine left
[00:49] <BenGoldberg> https://docs.perl6.org/type/IO#sub_open doesn't show :x ... is this a doc bug?

[00:50] <IOninja> Yes, but covered under IO grant, so will be fixed soon.

[00:52] *** lukaramu_ left
[00:57] <AlexDaniel> buggable: tag REGRESSION

[00:57] <buggable> AlexDaniel, There are 15 tickets tagged with REGRESSION; See http://perl6.fail/t/REGRESSION for details

[01:01] *** aborazmeh joined
[01:01] *** aborazmeh left
[01:01] *** aborazmeh joined
[01:03] <timotimo> .tell spebern i didn't see anyone suggest it, but here's how to have an array of structs: https://github.com/jonathanstowe/NativeHelpers-Array

[01:03] <yoleaux> timotimo: I'll pass your message to spebern.

[01:03] <IOninja> huggable: array of structs :is: https://github.com/jonathanstowe/NativeHelpers-Array

[01:03] <huggable> IOninja, Added array of structs as https://github.com/jonathanstowe/NativeHelpers-Array

[01:21] <IOninja> Wonder if this is a bug. Seems Seq's .sink-all method isn't called unless it's explicitly sunk? https://gist.github.com/zoffixznet/353048bee9629d82b003bb73de92523d

[01:33] <IOninja> I meant the Seq's iterator's .sink-all method

[01:36] <IOninja> m: my $s = Seq.new: class :: does Iterator { method pull-one {}; method sink-all { say "sunk " } }.new; $s

[01:36] <camelia> rakudo-moar 6060bd: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of $s in sink context (line 1)‚ê§¬ª

[01:36] <IOninja> m: my $s = Seq.new: class :: does Iterator { method pull-one {}; method sink-all { say "sunk " } }.new; sink $s

[01:36] <camelia> rakudo-moar 6060bd: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of $s in sink context (line 1)‚ê§sunk ‚ê§¬ª

[01:36] <IOninja> m: my $s = Seq.new: class :: does Iterator { method pull-one {}; method sink-all { say "sunk " } }.new; $s.sink

[01:36] <camelia> rakudo-moar 6060bd: OUTPUT: ¬´sunk ‚ê§¬ª

[01:36] <IOninja> u: UNAMUSED FACE

[01:36] <unicodable6> IOninja, U+1F612 UNAMUSED FACE [So] (üòí)

[01:36] <IOninja> Now I vaguely remember a convo about this not being abug; but don't remember why

[01:45] *** titsuki left
[01:52] *** Cabanossi left
[01:53] *** gdonald left
[01:53] *** gdonald joined
[01:54] *** Cabanossi joined
[02:00] *** _28_ria left
[02:06] *** aborazmeh left
[02:23] *** cosimo left
[02:30] *** cosimo joined
[02:35] *** cpage_ joined
[02:45] *** ilbot3 left
[02:48] *** ilbot3 joined
[02:48] *** ChanServ sets mode: +v ilbot3

[02:53] *** wamba joined
[02:54] *** pytuger joined
[03:02] *** xtreak joined
[03:05] *** BenGoldberg left
[03:13] *** gdonald left
[03:13] *** gdonald joined
[03:30] *** khw_ left
[03:33] *** noganex joined
[03:35] *** noganex_ left
[03:48] *** wamba left
[04:11] *** mcmillhj joined
[04:21] *** Cabanossi left
[04:24] *** Cabanossi joined
[04:33] *** llfourn joined
[04:45] *** Cabanossi left
[04:48] *** Cabanossi joined
[05:03] *** sukrishn left
[05:05] *** AlexDaniel left
[05:09] *** Actualeyes left
[05:09] *** skids left
[05:12] *** sukrishn joined
[05:29] *** llfourn left
[05:31] *** gdonald left
[05:32] *** gdonald joined
[05:32] *** Cabanossi left
[05:33] *** mcmillhj left
[05:33] *** Cabanossi joined
[05:41] *** faraco joined
[05:41] *** curan joined
[05:44] *** kurahaupo left
[05:45] *** mcmillhj joined
[05:50] *** mcmillhj left
[05:55] *** xtreak left
[06:01] *** mcmillhj joined
[06:01] *** Cabanossi left
[06:01] *** xtreak joined
[06:03] *** Cabanossi joined
[06:06] *** mcmillhj left
[06:17] *** mcmillhj joined
[06:18] *** _28_ria joined
[06:22] *** mcmillhj left
[06:23] *** mcmillhj joined
[06:27] *** domidumont joined
[06:28] *** melezhik left
[06:31] *** mcmillhj left
[06:33] *** domidumont left
[06:34] *** domidumont joined
[06:36] *** darutoko joined
[06:42] *** wamba joined
[06:45] *** mcmillhj joined
[06:46] *** domidumont left
[06:46] *** Actualeyes joined
[06:50] *** RabidGravy joined
[06:50] *** mcmillhj left
[06:58] *** rindolf joined
[07:04] *** domidumont joined
[07:07] *** mcmillhj joined
[07:12] *** platon joined
[07:12] *** mcmillhj left
[07:12] *** platon is now known as Guest21570

[07:17] *** xtreak left
[07:19] *** xtreak joined
[07:21] <pytuger> has this been completely removed from perl6 

[07:21] <pytuger> for($x = 0; $x > 10; $x++) {say($x);}

[07:22] <pytuger> I got the message "Null PMC access in get_string()", but I was not sure if there was a newer implementation (considering I just found out about "for (@l1, @l2, @l3) -> $_ { say($_); }" )

[07:26] *** mcmillhj joined
[07:27] <El_Che> pytuger:   https://docs.perl6.org/language/control#loop

[07:28] <El_Che> Although there is a warning in the last rakudo it seems

[07:28] <El_Che> p6: loop (my $i = 0; $i < 10; $i++) { say $i }

[07:28] <camelia> rakudo-moar 6060bd: OUTPUT: ¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§¬ª

[07:29] *** titsuki joined
[07:30] *** ufobat joined
[07:30] <El_Che> In rakudo 2017.02 I get this warning after the result (in perl6 repl): Type check failed in binding to $value; expected Any but got Mu (Mu) in any interactive at src/Perl6/Compiler.nqp line 62"

[07:30] *** mcmillhj left
[07:31] *** Actualeyes left
[07:31] *** Cabanossi left
[07:32] <pytuger> El_Che, thank you

[07:33] *** Cabanossi joined
[07:33] *** xtreak left
[07:34] *** xtreak joined
[07:44] *** mcmillhj joined
[07:47] *** cpage_ left
[07:48] *** mcmillhj left
[07:54] *** mcmillhj joined
[07:58] *** mcmillhj left
[08:02] <arnsholt> pytuger: If you get that literal error message, I think your Rakudo is running on *Parrot* which is positively ancient

[08:02] <arnsholt> Paleolithic even, at this point

[08:05] <samcv> pytuger, I would implore you to install Rakudo Star from http://rakudo.org/how-to-get-rakudo/

[08:05] <faraco> m: say $*PERL.version

[08:05] <camelia> rakudo-moar 6060bd: OUTPUT: ¬´v6.c‚ê§¬ª

[08:06] <faraco> hmm, how can I get the alpha, patch, minor version of the interpreter?

[08:06] *** xtreak left
[08:06] *** bjz joined
[08:06] <faraco> like, when invoking perl6 -v

[08:06] *** Guest57537 is now known as matt_

[08:08] *** xtreak joined
[08:08] *** abraxxa joined
[08:08] *** cpage_ joined
[08:09] <pytuger> samcv, arnsholt,  perl6 -v gives  "This is perl6 version 2014.07 built on parrot 6.6.0 revision 0"   I did get from source however

[08:09] <pytuger> I shall check the url

[08:09] <samcv> yep. that is quite old

[08:09] <pytuger> thank you good sir

[08:09] *** eyck joined
[08:09] <samcv> are you on linux?

[08:09] *** bjz_ joined
[08:10] <faraco> he probably 'sudo apt-get install perl6'

[08:10] <faraco> whoops, parrot

[08:10] <samcv> i don't think there's a perl6 package on debian?

[08:11] <samcv> there is a rakudo in debian unstable but i cannot recommend it

[08:11] <faraco> 'sudo apt-get install parrot' is what I meant.

[08:11] <samcv> oh

[08:11] <El_Che> what do you run?

[08:11] <samcv> me?

[08:11] <El_Che> I have ubuntu and centos packages, no debian yet

[08:11] <pytuger> There is no perl6 package for debain, i used  git to get source into /usr/src/ and followed the instructions from there

[08:11] <El_Che> samcv: no :)

[08:12] *** bjz left
[08:12] <samcv> pytuger, you might want to try rakudobrew

[08:12] <pytuger> yes, such was my mistake

[08:12] <samcv> https://github.com/tadzik/rakudobrew

[08:12] <samcv> it will do all the compiling for you and is automated and stuff

[08:12] <pytuger> there is an apt-get for rakudo however

[08:12] <hobbs> samcv: "perl6" is a virtual package provided by rakudo

[08:12] <El_Che> pytuger: I'll create debian packages soonish at https://github.com/nxadm/rakudo-pkg

[08:12] <samcv> and help you install the package manager zef (i recommend that. but there's also panda package manager)

[08:12] <samcv> oh ok hobbs 

[08:12] <hobbs> and on stable it's 2014.07

[08:12] <pytuger> butEl_Che thanks for heads up

[08:13] <samcv> but rakudobrew is great and will compile moarvm, nqp and perl6 by itself. very nice

[08:13] <faraco> not a user of Debian, but what is this - https://packages.debian.org/jessie/perl6

[08:13] <El_Che> pytuger: although I'm pretty sure the Ubuntu packages will install on debian (they only use /opt/rakudo and don't touch the system)

[08:13] <pytuger> faraco, apt-cache search perl6 yeilds nothing on my debian 8 system

[08:14] <faraco> oh..rakudo

[08:14] <faraco> 'sudo apt-get install rakudo'

[08:14] <faraco> not so sure if updated

[08:14] <El_Che> pytuger: I will try to squeeze some time to create the debian packages, they are probably just the same as the ubuntu one.

[08:14] <jast> the version in debian 8 is almost three years old, though

[08:14] <pytuger> "(04:12:42 AM) pytuger: there is an apt-get for rakudo however"

[08:14] <samcv> rakudobrew is like super easy though. and much easier to get the latest perl 6

[08:15] <El_Che> pytuger: go for the rakudo star release at the moment: rakudo + base modules

[08:15] <samcv> much easier than cloning three different repos and installing them all in the right order

[08:15] <samcv> is rakudostar easy to install?

[08:15] <samcv> i've never done it

[08:15] <faraco> that binary?

[08:15] *** mcmillhj joined
[08:15] *** SCHAAP137 left
[08:15] <hobbs> samcv: you don't have to though, actually :)

[08:15] <El_Che> samcv: it seems to be the consensus that we don't recommend rakudobrew to users, but to perl6 devs (hence my packages).

[08:15] <pytuger> El_Che it will take me time to transition from cpanm on perl5 but I shall work to transition to perl6 quickly

[08:15] <samcv> oh ok El_Che 

[08:16] <samcv> i found rakudobrew horrible for deving

[08:16] <El_Che> faraco: rakudo star compiles locally on linux, but it's easy. Pkgs for mac and windows

[08:16] <samcv> because it is all automated. i need to work on moarvm or on nqp or on rakudo. not have it all install it all at the same time

[08:16] <samcv> but i guess for minor contributions it can be fine. but i guess when you start working on moar and nqp and rakudo it's better to have seperate repos

[08:17] <pytuger> my $laugh = 'lol'; $laugh.uc.say; #this reminds me of ruby for w/e reason

[08:17] <samcv> at least personally

[08:17] <El_Che> pytuger: my workflow is (mostly with docker intended): I take the packages here (https://github.com/nxadm/rakudo-pkg/releases) and use "zef" as a cpanm/cpan client

[08:17] <faraco> man, if rakudo on debian is very old, I probably gonna use and package rakudo star for Debian or at least Ubuntu launchpad repo (where apt-add-repository && apt-get install rakudo)

[08:17] <samcv> nice faraco++ please do

[08:17] <pytuger> El_Che I've heard more good things than bad with zef as opposed to panda.

[08:17] <samcv> i mean we have binaries for mac and windows. but only source for linu

[08:17] <El_Che> pytuger: there are only centos7 (what works standardizes on) and ubuntu (what I use) packages.

[08:18] <El_Che> pytuger: what I can say is that the zef dev is very accessible.

[08:18] <pytuger> I will try to suck up all information like a sponge

[08:18] <El_Che> pytuger: he helped me to figure out how to get zef in my packages in a sane way

[08:19] <El_Che> pytuger: e.g., if you want to use zef with the rakudo the packages install I use this: https://github.com/nxadm/rakudo-pkg/blob/master/docker/install_zef_as_user.sh

[08:19] <El_Che> (there is also a as_root one)

[08:19] <pytuger> Is the perl5 community (developers for modules like Paranoid::Network) planning to port over to perl6? (or is that a don't hold your breath question)

[08:20] <El_Che> that's the nice thing about zef, out of the box in the home of the user

[08:20] *** mcmillhj left
[08:20] <pytuger> I know python3.6 has already ported things like paramiko for SSH

[08:20] <pytuger> and asyncio (but thats for coroutines so of course they would port that)

[08:21] <El_Che> pytuger: python 3 is the next version of 2. That's not the case with Perl 5 -> 6. 2 languages, 1 family. 

[08:22] <El_Che> I use perl 5 and 6 happily next to each other

[08:22] <pytuger> interesting

[08:22] *** zakharyas joined
[08:23] <pytuger> thank you for the zef_as_user.sh url El_Che

[08:24] <El_Che> pytuger: for now, just use Rakudo Star. It's great. It has all the batteries included

[08:24] <El_Che> pytuger: my pkgs are for people that want the minimal stuff (e.g. docker) or prefer os packages

[08:25] <hobbs> even the funny little lithium ones

[08:28] <faraco> m: shell 'echo m'

[08:28] <camelia> rakudo-moar 6060bd: OUTPUT: ¬´shell is disallowed in restricted setting‚ê§  in sub restricted at src/RESTRICTED.setting line 1‚ê§  in sub shell at src/RESTRICTED.setting line 15‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[08:28] <faraco> oh, forgot

[08:29] <faraco> so, where do I get the full rakudo version, from inside a program, without calling perl6 using shell, run, etc?

[08:29] <faraco> m: say $*PERL.version

[08:29] <camelia> rakudo-moar 6060bd: OUTPUT: ¬´v6.c‚ê§¬ª

[08:32] <hobbs> m: say $*PERL.compiler.version

[08:32] <camelia> rakudo-moar 6060bd: OUTPUT: ¬´v2017.03.10.g.6060.bd.3‚ê§¬ª

[08:32] <faraco> oh, I see

[08:32] <faraco> I just found, I can use this also

[08:33] <faraco> m: say $*VM

[08:33] <camelia> rakudo-moar 6060bd: OUTPUT: ¬´moar (2017.03)‚ê§¬ª

[08:33] *** mcmillhj joined
[08:33] <faraco> but yours, more complete. hobbs++

[08:34] <hobbs> one's the rakudo version, one's the moar version :)

[08:34] <hobbs> and $*PERL.version is the perl version :)

[08:36] *** wamba left
[08:38] *** mcmillhj left
[08:46] *** SCHAAP137 joined
[08:46] *** Cabanossi left
[08:48] *** xtreak left
[08:48] *** xtreak joined
[08:48] *** Cabanossi joined
[08:51] *** mcmillhj joined
[08:51] *** g4 joined
[08:52] *** xtreak left
[08:53] *** kurahaupo__ joined
[08:55] *** mcmillhj left
[08:57] *** kurahaupo__ is now known as kurahaupo

[09:00] *** tojo joined
[09:07] *** dakkar joined
[09:13] *** mcmillhj joined
[09:18] *** mcmillhj left
[09:20] *** wamba joined
[09:26] *** kurahaupo__ joined
[09:26] *** kurahaupo left
[09:30] <faraco> samcv: I noticed something. Installing rakudo on Debian 8, I got the version of 2014.07-4, which use parrot as the vm. but on Ubuntu 16.04, I got the 2015.11, which use rakudo, on on sid, I believe the latest one is the 2016-12-1 implementation.

[09:30] <samcv> faraco, ah i see. i've only tried to install it on sid

[09:32] *** robertle joined
[09:32] *** mcmillhj joined
[09:34] <faraco> samcv: I'm not sure why the package is not listed in as an option - http://rakudo.org/how-to-get-rakudo/#Installing-Rakudo-Star-Source-Prerequisites-Debian

[09:34] <samcv> well i don't think they have rakudo star?

[09:36] <faraco> samcv: hmm, I don't think so, rakudo sid package use rakudo star - http://http.debian.net/debian/pool/main/r/rakudo/rakudo_2016.12.orig.tar.gz

[09:36] <samcv> oh do they?

[09:36] <samcv> kk

[09:37] <faraco> I open it and received the same structure as in rakudo star linux on the rakudo page 2017.01 - http://rakudo.org/downloads/star/rakudo-star-latest.tar.gz

[09:37] <faraco> maybe not the latest, but still

[09:37] *** mcmillhj left
[09:38] <faraco> debian people need to be informed about rakudo package existence on the page. (not everyone want to compile them)

[09:41] *** mcmillhj joined
[09:41] <faraco> rakudo .deb package*

[09:45] *** mcmillhj left
[09:46] *** kurahaupo__ is now known as kurahaupo

[09:51] *** xtreak joined
[09:51] *** xtreak left
[09:58] *** gregf_ joined
[09:58] *** movl joined
[10:00] <abraxxa> zostay: DOM::Tiny fails some tests on 2017.03, can travis be set up to test each rakudo release?

[10:01] *** mcmillhj joined
[10:01] *** yqt joined
[10:02] *** xtreak joined
[10:02] *** ilinux joined
[10:02] *** Cabanossi left
[10:02] *** ilinux left
[10:03] *** xtreak left
[10:03] *** Cabanossi joined
[10:06] *** mcmillhj left
[10:06] *** xtreak joined
[10:06] *** bjz_ left
[10:12] <faraco> samcv: meh, nevermind about making the debian package. IONinja has tweeted - https://twitter.com/zoffix/status/843478198516142081. We can download the latest (or almost) debian package from here - https://twitter.com/zoffix/status/843478198516142081

[10:12] <faraco> oops, from here - https://github.com/nxadm/rakudo-pkg/releases

[10:13] *** mcmillhj joined
[10:16] *** bjz joined
[10:16] *** TEttinger left
[10:17] *** mcmillhj left
[10:31] *** mcmillhj joined
[10:32] *** Cabanossi left
[10:33] *** bjz left
[10:33] *** Cabanossi joined
[10:33] *** xtreak left
[10:36] *** mcmillhj left
[10:39] *** bjz joined
[10:40] *** mcmillhj joined
[10:41] *** xtreak joined
[10:42] <faraco> Hi, is there any Tk binding for Perl 6 that you know? I cannot find any in modules.perl6.org

[10:44] <DrForr> Not yet, you're welcome to give it a try though :)

[10:45] *** mcmillhj left
[10:47] *** xtreak left
[10:47] *** Ven joined
[10:47] *** Ven is now known as Guest90000

[10:48] *** wamba left
[10:50] *** mcmillhj joined
[10:50] *** xtreak joined
[10:53] *** pecastro joined
[10:55] *** mcmillhj left
[10:55] *** araujo joined
[10:55] *** sammers joined
[10:58] *** labster left
[11:00] *** mcmillhj joined
[11:00] *** KDr2_c joined
[11:02] <moritz> or you could use p5's Tk module through Inline::Perl5

[11:02] *** Cabanossi left
[11:02] <moritz> seems we don't have Inline::Tcl yet

[11:03] *** Cabanossi joined
[11:05] *** mcmillhj left
[11:08] *** donaldh joined
[11:19] *** faraco left
[11:21] *** xtreak left
[11:21] *** pecastro left
[11:22] *** mcmillhj joined
[11:27] *** mcmillhj left
[11:28] *** Guest90000 left
[11:32] *** jonas1 joined
[11:33] *** mcmillhj joined
[11:36] *** bjz_ joined
[11:38] *** mcmillhj left
[11:38] *** bjz left
[11:40] *** awwaiid joined
[11:45] *** Cabanossi left
[11:46] *** lukaramu joined
[11:48] *** Cabanossi joined
[11:49] *** pecastro joined
[11:55] *** mcmillhj joined
[12:00] *** mcmillhj left
[12:08] *** mcmillhj joined
[12:09] *** bjz joined
[12:09] *** bjz_ left
[12:13] *** mcmillhj left
[12:13] *** k-man joined
[12:16] *** cibs left
[12:17] *** noganex_ joined
[12:17] *** cibs joined
[12:20] *** noganex left
[12:21] <[Coke]> moritz: I feel slightly guilty about that.

[12:22] * masak .oO( "you're the one who didn't do it!" )

[12:22] <yoleaux> 18 Mar 2017 14:16Z <tbrowder> masak: i don't have any old masm on flppies or CD, but i did find this link: <http://www.phatcode.net/downloads.php?id=175>

[12:22] <yoleaux> 18 Mar 2017 14:19Z <tbrowder> masak: but i did find two old CDs (Dr. Dobbs 1988-2001 and C/C++ Journal 1990-2002) which i need to look at low-level because the old search box doesn't work on WIndows...i'll try on my Linux box

[12:22] <masak> tbrowder: thanks

[12:23] *** tojo left
[12:26] *** domidumont left
[12:26] *** domidumont joined
[12:26] <DrForr> .tell tbrowder Thanks for the feature request; I think it's a bit more appropriate for the Perl6::Lint that I haven't built yet - At least I don't really intend that ::Tidy should do anything other than play with whitespace.

[12:26] <yoleaux> DrForr: I'll pass your message to tbrowder.

[12:27] <tbrowder> masak: you're very welcome. i think that link may have been mentioned by you or someone else in the OP. does that link have what you need?

[12:27] <yoleaux> 12:26Z <DrForr> tbrowder: Thanks for the feature request; I think it's a bit more appropriate for the Perl6::Lint that I haven't built yet - At least I don't really intend that ::Tidy should do anything other than play with whitespace.

[12:28] <DrForr> Sorry, didn't know you were around :)

[12:28] <timotimo> m: multi sub test(False) { say "oh" }

[12:28] <camelia> rakudo-moar 5917b8: OUTPUT: ¬´Potential difficulties:‚ê§    Literal values in signatures are smartmatched against and smartmatch with `False` will always fail. Use the `where` clause instead.‚ê§    at <tmp>:1‚ê§    ------> 3multi sub test(False7‚èè5) { say "oh" }‚ê§¬ª

[12:28] <timotimo> hmm. not so sure i like that

[12:29] <IOninja> heh

[12:29] <IOninja> Why not?

[12:30] <timotimo> can't put my finger on it, but perhaps i'd just like literals in signatures to be eqv'd or something ... but that's quite iffy in its own right

[12:30] <tbrowder> I just came on monitoring. Thanks for considering that and putting it with ::Lint makes perfect sense (i still think rakudo should warn about it).

[12:31] *** perlpilot joined
[12:32] *** raschipi joined
[12:32] <masak> tbrowder: it does not (but still an interesting resource). someone eventually pointed me to the program I was looking for: http://www.cs.nyu.edu/~yap/classes/machineOrg/helppc/

[12:32] <IOninja> timotimo: ATM literals in signatures are just sugar for `where $literal`

[12:32] <DrForr> I've got a few of my own I should add - You can add semicolons inside lists unintentionally (because they're multidimensional) and throw off list walking. $foo.append( call(); ) # Doesn't warn because it's a valid 2-D slice (I'm guessing) but it still looks like a tyop to me.

[12:33] *** Actualeyes joined
[12:33] <timotimo> mhm

[12:33] <masak> IOninja: "at the moment"? isn't that what they are supposed to be sugar for, long-term?

[12:34] <timotimo> i think he's assuming i want to change things

[12:34] <masak> I think I might agree with timotimo's sentiment that smartmatching doesn't give us a lot in this particular case

[12:34] <masak> like, if a small exception were made for `False` in a signature, everyone would be happier :)

[12:34] * IOninja wonders when did "at the moment" start to mean "this will get changed soon"

[12:35] <timotimo> hah

[12:35] <IOninja> Exceptions suck.

[12:35] <masak> frankly, I didn't even think of the consistency involved here

[12:35] <masak> IOninja: yes, I would agree in general

[12:35] <masak> IOninja: would an exception suck *in this case*, though?

[12:35] <masak> or would it just allow one more thing in Perl 6?

[12:35] <Unavowed> Isn't the more fundalental question whether False ~~ False should be False though?

[12:35] <masak> m: say False ~~ False

[12:35] <camelia> rakudo-moar 5917b8: OUTPUT: ¬´Potential difficulties:‚ê§    Smartmatch against False always fails; if you mean to test the topic for truthiness, use :!so or *.not or !* instead‚ê§    at <tmp>:1‚ê§    ------> 3say False ~~ 7‚èè5False‚ê§False‚ê§¬ª

[12:36] <masak> m: my $f = False; say False ~~ $f

[12:36] <camelia> rakudo-moar 5917b8: OUTPUT: ¬´False‚ê§¬ª

[12:36] <masak> Unavowed: I think it was settled long ago that it isn't and shouldn't be

[12:37] <masak> Unavowed: because you want to do smarmatches like `$value ~~ &some-check`, where `$value` gets passed to `&some-check` and the resulting boolean is used as the match result

[12:37] <IOninja> masak: the thing isn't disallowed at the moment. `Bool:D $ where .not` isn't much longer than `False`, but the Exception will add one more things for all programmers to remeber "literals are just sugar for where... EXCEPT FOR Bools"...

[12:37] <masak> so the exception here for signatures would mean *not* smartmatching, but checking True or False for equality

[12:37] <masak> I dunno, maybe it's a bad idea

[12:37] <Unavowed> masak: I see

[12:38] <masak> the ghost of jnthn just visited me and yelled at me for thinking of slowing down the sigbinder path :P

[12:41] *** Guest21570 left
[12:44] *** cibs left
[12:46] *** cibs joined
[12:46] *** Cabanossi left
[12:47] *** eroux joined
[12:47] <raschipi> If people come here asking for a newer version in Debian, the easiest way to explain to them is that they should be running Debian 9 with the version from 'experimental'. There's 2017.02 there.

[12:48] *** Cabanossi joined
[12:48] <IOninja> hah

[12:48] <El_Che> raschipi: Can most users fix the unstable/experimental breakage?

[12:49] <raschipi> I haven't found any breakage fron installing rakudo from experimental.

[12:49] <raschipi> About unstable breakage, most debian developers do recommend it.

[12:50] <raschipi> It breaks much less than other rolling release distros.

[12:51] <timotimo> i used to use debian sid for a long time :P

[12:51] *** eroux left
[12:51] <El_Che> timotimo: we all did before ubuntu :)

[12:52] *** mcmillhj joined
[12:52] <timotimo> i did long after ubuntu

[12:52] <raschipi> I can't stand Ubuntu.

[12:52] <El_Che> although I remember some brave struggles to get X unbroken after sid upgrades

[12:53] <raschipi> I try Ubuntu every year and I give up after a week.

[12:53] <raschipi> Well, it will break, it's only a matter of time. Such is the life on the edge.

[12:54] <El_Che> raschipi: yeah I've seen plenty of breakage in Ubuntu non-LTS. I remember the pulseaudio days

[12:55] <raschipi> Just keep backups and all will be well.

[12:55] <El_Che> I think that on the Desktop I have ran Red Hat, Mandrake, Debian stable/testing/unstable, Libranet, Progeny, Xubuntu and Ubuntu

[12:56] <El_Che> lots of good memories of Libranet.

[12:57] *** eroux joined
[13:00] <raschipi> Every time I try Ubuntu I break it because I try something they don't want me to do.

[13:01] <El_Che> besides unity and newer packages compared to stable, I don't see that much difference

[13:03] <raschipi> It's different under the hood. For example, Ubuntu has a package called 'ubuntu' which will tie the system togheter, but make it inflexible. It will also force you to upgrade components.

[13:04] <raschipi> As long as one doesn't try to change things under the hood, Ubuntu is better, I agree.

[13:05] <El_Che> raschipi: most of the time I remove what I want, including those meta packages

[13:06] <El_Che> it's not more than that: a meta package that can be remove without consequences

[13:06] <El_Che> ubuntu-desktop and the like

[13:07] *** mcmillhj left
[13:08] <El_Che> raschipi: If I wanted to provide debian packages, stable is easy. I would I provide packages for testing or sid as they are always moving?

[13:08] <raschipi> Are you in the Debian Perl6 team?

[13:09] <El_Che> raschipi: I build packages by creating a Docker base image of the OS in question and than running this: https://github.com/nxadm/rakudo-pkg/blob/master/bin/run_pkgrakudo.pl

[13:09] <raschipi> Or trying to provide another package?

[13:09] *** wamba joined
[13:09] <El_Che> raschipi: no, I create stand-alone pkgs in /opt/rakudo without touching the base system

[13:10] <El_Che> raschipi: the idea if to have up to date pkgs for my containers without waiting (nor breaking) on Ubuntu or CentOS updates (they have years-old versions)

[13:10] <timotimo> i used to be a rpm-hater, but nowadays i'm on fedora and i'm happy

[13:10] <El_Che> raschipi: it's fpm under the hood: https://github.com/nxadm/rakudo-pkg/blob/master/docker/pkg_rakudo.sh

[13:11] <El_Che> timotimo: we use CentOS 7 at work

[13:11] *** mcmillhj joined
[13:11] <El_Che> timotimo: I use Ubuntu at home

[13:11] <raschipi> El_Che: you sure you need the container? Static linking not enough?

[13:11] <El_Che> timotimo: hence those packages 

[13:11] <timotimo> right

[13:11] <raschipi> Can perl6 be built statically linked?

[13:12] <El_Che> raschipi: I don't need a container. It just makes it dead easy and clean

[13:12] <timotimo> depends on how you interpret "statically linked"

[13:12] <El_Che> I thought not

[13:12] <timotimo> you can create a moarvm that has libmoar inside it

[13:12] <timotimo> but rakudo still needs the extops and those are dynamically loaded

[13:12] <raschipi> I want even libc in there.

[13:12] <El_Che> raschipi: all the deps are in /opt/rakudo (put their by nqp, moarvm and rakudo's build process)

[13:13] <raschipi> If it's all bundled, what is breaking?

[13:13] <El_Che> so, far, nothing. But I only have centos and ubuntu packages.

[13:13] <El_Che> in theory, debian sid could change libc and break stuff

[13:14] <El_Che> that doesn not happen with releases soft like ubuntu, centos or debian stable

[13:14] <raschipi> So, to answer your question about how to make it work despite the system changing: bundle everything.

[13:14] <timotimo> i found out by a long process of unfruitful investigation and research that you can't dynamically load something that's not on the filesystem

[13:14] <timotimo> ... >:(

[13:14] <El_Che> I think the debian people are doing a fine job for sid, so those that run sid are OK

[13:15] <El_Che> stable and testing is different

[13:15] <raschipi> I think they didn't upload the version on sid to the frozen Stretch on purpose. To not release rakudo as stable.

[13:17] *** KDr2_c left
[13:22] *** spebern joined
[13:24] *** bjz left
[13:28] *** bjz joined
[13:29] <robertle> raschipi: of course that means the next stable will have 2016.12-1, so I don't think that shields users from unstable software ;)

[13:29] *** domidumont left
[13:29] *** skids joined
[13:30] *** domidumont joined
[13:34] *** cygx joined
[13:34] <cygx> o/

[13:34] <cygx> IOninja: re documentation for the open modes, cf https://github.com/rakudo/rakudo/commit/36f773eb010df7c6b8bf0d431d209537a6061d15 and https://perl6advent.wordpress.com/2015/12/06/day-6-on-opening-files-and-contributing-to-open-source-projects/

[13:35] *** lukaramu_ joined
[13:35] <cygx> on an unrelated note, string operations appear to have gotten slower, cf https://gist.github.com/cygx/9c94eefdf6300f726bc698655555d73b#file-graph-md

[13:36] <raschipi> robertle: At least they're not pretending to support it.

[13:38] *** lukaramu left
[13:39] <raschipi> They'll upload the packages to sid in April or March, after Stretch is released.

[13:40] <raschipi> Then it will be a seamless experience in Debian.

[13:41] <SmokeMachine> m: use Test; my @a = <1 2 3>, <a b c>, <x y z>; is infix:<X>(<1 2 3>, <a b c>, <x y z>), infix:<X>(|@a) # should it have the same result?

[13:41] <camelia> rakudo-moar 5917b8: OUTPUT: ¬´not ok 1 - ‚ê§‚ê§# Failed test at <tmp> line 1‚ê§# expected: '1 2 3 a b c x y z'‚ê§#      got: '1 a x 1 a y 1 a z 1 b x 1 b y 1 b z 1 c x 1 c y 1 c z 2 a x 2 a y 2 a z 2 b x 2 b y 2 b z 2 c x 2 c y 2 c z 3 a x 3 a y 3 a z 3 b x 3 b y 3 b z 3 c x 3 c y 3 ‚Ä¶¬ª

[13:42] <SmokeMachine> this is one of the whys it isn't true:

[13:42] <IOninja> cygx: thanks.

[13:42] <SmokeMachine> m: use Test; is [\X](<1 2 3>, <a b c>).tail, [X](<1 2 3>, <a b c>)

[13:42] <camelia> rakudo-moar 5917b8: OUTPUT: ¬´This Seq has already been iterated, and its values consumed‚ê§(you might solve this by adding .cache on usages of the Seq, or‚ê§by assigning the Seq into an array)‚ê§  in sub is at /home/camelia/rakudo-m-inst-1/share/perl6/sources/C712FE6969F786C9380D643‚Ä¶¬ª

[13:43] <SmokeMachine> sorry

[13:43] *** sena_kun joined
[13:45] <SmokeMachine> strange...

[13:46] <IOninja> m: use Test; is-deeply [\X](<1 2 3>, <a b c>).tail, [X](<1 2 3>, <a b c>)

[13:46] <camelia> rakudo-moar 5917b8: OUTPUT: ¬´This Seq has already been iterated, and its values consumed‚ê§(you might solve this by adding .cache on usages of the Seq, or‚ê§by assigning the Seq into an array)‚ê§  in sub is-deeply at /home/camelia/rakudo-m-inst-1/share/perl6/sources/C712FE6969F786C9‚Ä¶¬ª

[13:46] <SmokeMachine> m: say (@ = [\X](<1 2 3>, <a b c>))

[13:46] <camelia> rakudo-moar 5917b8: OUTPUT: ¬´This Seq has already been iterated, and its values consumed‚ê§(you might solve this by adding .cache on usages of the Seq, or‚ê§by assigning the Seq into an array)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:46] <IOninja> m: [\X](<1 2 3>, <a b c>).tail

[13:46] <camelia> rakudo-moar 5917b8: ( no output )

[13:46] <SmokeMachine> m: say [\X](<1 2 3>, <a b c>).tail

[13:46] <camelia> rakudo-moar 5917b8: OUTPUT: ¬´This Seq has already been iterated, and its values consumed‚ê§(you might solve this by adding .cache on usages of the Seq, or‚ê§by assigning the Seq into an array)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:46] <SmokeMachine> m: say [\X](<1 2 3>, <a b c>).tail ~~ Fail

[13:46] <camelia> rakudo-moar 5917b8: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    Fail used at line 1‚ê§‚ê§¬ª

[13:46] <IOninja> m: dd <1 2 3> X <a b c>

[13:46] <camelia> rakudo-moar 5917b8: OUTPUT: ¬´((IntStr.new(1, "1"), "a"), (IntStr.new(1, "1"), "b"), (IntStr.new(1, "1"), "c"), (IntStr.new(2, "2"), "a"), (IntStr.new(2, "2"), "b"), (IntStr.new(2, "2"), "c"), (IntStr.new(3, "3"), "a"), (IntStr.new(3, "3"), "b"), (IntStr.new(3, "3"), "c")).Seq‚ê§¬ª

[13:46] <SmokeMachine> m: say [\X](<1 2 3>, <a b c>).tail ~~ Failure

[13:46] <camelia> rakudo-moar 5917b8: OUTPUT: ¬´False‚ê§¬ª

[13:47] <IOninja> X returns a Seq

[13:47] *** Cabanossi left
[13:47] <jnthn> m: say [\X](<1 2 3>, <a b c>).tail.perl

[13:47] <camelia> rakudo-moar 5917b8: OUTPUT: ¬´Seq.new-consumed()‚ê§¬ª

[13:47] <jnthn> m: say [\X](<1 2 3>, <a b c>).perl

[13:47] <camelia> rakudo-moar 5917b8: OUTPUT: ¬´(Seq.new-consumed(), Seq.new-consumed()).Seq‚ê§¬ª

[13:48] <jnthn> Wonder what's consuming it

[13:48] *** Cabanossi joined
[13:50] <IOninja> m: say ([\X] <1 2 3>, <a b c>)[0].perl

[13:50] <camelia> rakudo-moar 5917b8: OUTPUT: ¬´((IntStr.new(1, "1"), IntStr.new(2, "2"), IntStr.new(3, "3")),).Seq‚ê§¬ª

[13:50] <raschipi> jnthn: "getting these fixed up and implemented more fully has made it to the top of my todo list", very nice!

[13:50] <IOninja> The second iteration? 

[13:50] <IOninja> When it goes to build the triangle result or whatever.

[13:50] <SmokeMachine> should it be always true? [\&any-op](|@arr).tail eqv [&any-op](|@arr) ?

[13:51] <IOninja> Don't think so

[13:51] <timotimo> well, if there's side-effects it depends on which you run first :P

[13:53] <SmokeMachine> IOninja: why?

[13:53] <IOninja> Don't even need side effects

[13:53] <IOninja> m: sub infix:<zz> ($, $) { rand }; dd ([\zz] 1, 2, 3, 4).tail eqv [zz] 1, 2, 3, 4

[13:53] <camelia> rakudo-moar 5917b8: OUTPUT: ¬´Bool::False‚ê§¬ª

[13:54] <SmokeMachine> I mean without side effects

[13:54] <IOninja> No side effects above.

[13:54] <SmokeMachine> IOninja: ok...

[13:55] <jnthn> raschipi: Yeah, took a while to get there :)

[13:59] *** bjz left
[14:00] <SmokeMachine> and what about ?

[14:00] <SmokeMachine> m: use Test; my @a = <1 2 3>, <a b c>, <x y z>; is infix:<X>(<1 2 3>, <a b c>, <x y z>), infix:<X>(|@a)

[14:00] <camelia> rakudo-moar 5917b8: OUTPUT: ¬´not ok 1 - ‚ê§‚ê§# Failed test at <tmp> line 1‚ê§# expected: '1 2 3 a b c x y z'‚ê§#      got: '1 a x 1 a y 1 a z 1 b x 1 b y 1 b z 1 c x 1 c y 1 c z 2 a x 2 a y 2 a z 2 b x 2 b y 2 b z 2 c x 2 c y 2 c z 3 a x 3 a y 3 a z 3 b x 3 b y 3 b z 3 c x 3 c y 3 ‚Ä¶¬ª

[14:02] <raschipi> jnthn: Any thoughts on making the pipe operators do steps in parallel?

[14:02] <jnthn> Pipe operators?

[14:02] <jnthn> Ah, ==> and friends?

[14:03] <raschipi> yep

[14:03] <jnthn> Ah, thought we call those feed operators... :)

[14:03] <jnthn> Not as part of the hyper/race work; those were intended to set up a producer/consumer workflow

[14:04] <jnthn> Also desirable to get in place, though needs something a bit different to hyper/race

[14:05] *** mcsnolte joined
[14:06] *** sammers left
[14:07] <raschipi> jnthn: Is there a idiomatic way to start a race and then get the results as a promise? Just create it and start the race inside?

[14:08] <jnthn> raschipi: yes, like that

[14:08] <jnthn> Just stick start before it

[14:09] <jnthn> Or .Supply if you want to reactively process the results as they become available

[14:10] *** koki1 left
[14:11] <raschipi> I was thinking .race.iterator could return a supply.

[14:11] <jnthn> huh?

[14:11] <jnthn> No :)

[14:11] *** Sound joined
[14:11] <timotimo> you can always .Supply on a HyperSeq, though?

[14:11] <jnthn> Sure

[14:12] <raschipi> I see, it's all building blocks

[14:12] <raschipi> Can't read minds yet.

[14:12] *** eroux left
[14:12] <timotimo> many things can be coerced to Supply, also to Promise the same way

[14:12] <jnthn> Well, it's just that .iterator is part of the Iterable interface, which means it should consistently return soemthing that does Iterator

[14:12] <timotimo> and backwards, too

[14:12] <jnthn> *something

[14:19] *** sammers joined
[14:23] *** cygx left
[14:24] *** eroux joined
[14:28] *** kjk joined
[14:29] *** Ven joined
[14:29] *** Ven is now known as Guest60921

[14:35] *** itaipu joined
[14:42] *** IOninja is now known as wat|gives

[14:42] *** wat|gives is now known as IOninja

[14:44] *** grondilu joined
[14:44] <grondilu> no '-q' (quiet) option?

[14:44] <IOninja> What?

[14:44] * grondilu wanted to :.!perl6 in vim and was annoyed by the output

[14:45] *** Cabanossi left
[14:46] <grondilu> (annoyed being a bit excessive of a word, though)

[14:46] *** xtreak joined
[14:46] <IOninja> What does that do?

[14:46] <grondilu> well, if my line is 'say 2*2;' then I'd like 4, not > say 2*2\n4

[14:47] *** curan left
[14:47] <IOninja> use -e ?

[14:47] <grondilu> not to mention the "To exit type 'exit' or '^D'"

[14:47] <jast> grondilu: 'perl6 -'

[14:48] <grondilu> jast++

[14:48] <jast> to read program source from STDIN, which suppresses launching the interactive thingy

[14:48] *** Cabanossi joined
[14:51] <kjk> how can you create an instance of IO::Handler from a file descriptor? 

[14:52] <IOninja> Don't think you can.

[14:53] <geekosaur> afaik you can't yet because youy'd need to wrap it in a libuv handle abstraction and that's not exposed

[14:53] <timotimo> the other way around is possible

[14:53] <jast> and if anyone knows, it would be an IO ninja

[14:53] <timotimo> and using NativeCall to use stdlib I/O functions is also possible

[14:53] * IOninja is now known as IOn00b

[14:55] *** wamba left
[15:00] * IOninja just got stood up

[15:00] <IOninja> By a cable fixing technician!

[15:00] <IOninja> Got all doled up for nothing -_-

[15:00] <timotimo> doled or dolled?

[15:00] <timotimo> i don't think you were wearing bananas?

[15:01] <IOninja> Ah dolled

[15:01] <timotimo> :D

[15:01] * IOninja just now realized "dolled up" is about dolls...

[15:01] <IOninja> Oh well, plenty of techs in the sea!

[15:01] <jast> got all up on the dole?

[15:01] <jnthn> Well, if you got fired from your job 'cus you waited home for the technician, you could say you got doled up... :P

[15:02] <IOninja> heh

[15:04] *** cpage_ left
[15:04] *** cibs left
[15:05] *** xtreak left
[15:06] *** cibs joined
[15:06] <[Coke]> samcv: https://xkcd.com/1813/

[15:07] <[Coke]> m: say "\x270b\x1f93f"

[15:07] <camelia> rakudo-moar 86dc99: OUTPUT: ¬´‚úãü§ø‚ê§¬ª

[15:07] * IOninja bets $5 someone somewhere wrote a proposal for that, thanks to XKCD

[15:08] <[Coke]> that's why I mentioned it here, to increase the odds. :)

[15:09] <IOninja> head: error writing ‚Äòstandard output‚Äô: Connection reset by peer

[15:09] <IOninja> wow, the peer is ruthles

[15:09] *** domidumont left
[15:10] <geekosaur> .oO { peerless }

[15:10] *** domidumont joined
[15:11] *** drrho left
[15:13] <timotimo> aaargh my output is useless :D

[15:13] <timotimo> ("1" => Duration.new(<9187/70831>), "10" => Duration.new(<39421/298962>), "100" => Duration.new(<27121/202455>), "1000" => Duration.new(<70613/528935>), "10000" => Duration.new(<1972819/14197524>), "1001" => Duration.new(<656791/4954136>), "1002" => Duration.new(<11094/85543>), "1003" => Duration.new(<97897/796250>), "1004" => Duration.new(<68377/513774>), "1005" => Duration.new(<321829/2674060>), "1006" =>

[15:13] <timotimo> Duration.new(<54289/445239>), "1007" => Duration.new(<9255/73372>), "1008" => Duration.new(<2669/20677>), "1009" => Duration.new(<4802/35453>), "101" => Duration.new(<113811/903376>), "1010" => Duration.new(<46093/355286>), "1011" => Duration.new(<9707/69673>), "1012" => Duration.new(<177431/1364446>), "1013" => Duration.new(<32837/276840>), "1014" => Duration.new(<43463/328570>), "1015" =>

[15:13] <timotimo> Duration.new(<190463/1454469>), "1016" => Duration.new(<358427/2833790>), [...]

[15:13] <timotimo> whoops, that was a big paste

[15:14] <[Coke]> m: with $*OUT {[==]} # peerless?

[15:14] <camelia> rakudo-moar 86dc99: OUTPUT: ¬´Potential difficulties:‚ê§    Useless use of [==] in sink context‚ê§    at <tmp>:1‚ê§    ------> 3with $*OUT {7‚èè5[==]} # peerless?‚ê§¬ª

[15:18] *** cdg joined
[15:19] *** profan joined
[15:25] <IOninja> moritz: thinking of it now, this looks wrong to me: https://irclog.perlgeek.de/perl6/2017-03-14#i_14260302

[15:25] <IOninja> It's not the percentage faster, but percentage of time it takes.

[15:26] <IOninja> 3x faster is different than takes 70% less time.

[15:27] <IOninja> Or, 300% faster is different than takes 70% less time.

[15:27] <IOninja> Looks more impressive too :)

[15:28] *** Guest60921 left
[15:30] <raschipi> It's important to also note economists do it differently, they do it in a way so that a 2% increase will be undone by a 2% decrease, which normally isn't true for the simple definition.

[15:30] <[Coke]> m: 'z').ord # LTA error message?

[15:30] <camelia> rakudo-moar 86dc99: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unexpected closing bracket‚ê§at <tmp>:1‚ê§------> 3'z'7‚èè5).ord # LTA error message?‚ê§¬ª

[15:30] * IOninja doesn't see the LTA part...

[15:30] *** Cabanossi left
[15:30] <IOninja> Seems quite MTA

[15:31] <IOninja> huggable: LTA

[15:31] <huggable> IOninja, "Less Than Awesome"; antonym: PDG "Pretty Damn Good"

[15:31] <IOninja> Ah, I mean seems quite PDG

[15:31] *** Ven joined
[15:32] *** Ven is now known as Guest72549

[15:33] <[Coke]> ) isn't a bracket. :P

[15:33] *** Cabanossi joined
[15:34] <IOninja> [Coke]: sure it is: https://en.wikipedia.org/wiki/Bracket

[15:34] <jnthn> Clearly we need support for localizing errors :P

[15:34] *** khw_ joined
[15:34] <IOninja> :D

[15:37] <moritz> masak: have you seen http://www.jtolds.com/writing/2017/03/whiteboard-problems-in-pure-lambda-calculus/ ?

[15:37] *** alimon joined
[15:37] <IOninja> m: "/tmp/file".IO.open.IO::Handle.line

[15:37] <camelia> rakudo-moar 86dc99: OUTPUT: ¬´Cannot invoke this object (REPR: P6opaque; NQPMu)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:38] <IOninja> hm, locally I get "no concretization found for IO"

[15:38] <IOninja> 'cause I typoed ::line as .line

[15:38] <IOninja> Oh, nm, I get that on pipe

[15:38] <IOninja> What does that code do? Call method named `IO::Handle`?

[15:39] <moritz> I think it tries to invoke a "Handle" method in class/role IO

[15:40] <timotimo> not quite

[15:40] <timotimo> yeah

[15:40] <timotimo> what moritz said

[15:40] <zostay> abraxxa: thx, i'm looking into the failing tests... Seq caching, meh

[15:40] <timotimo> you use $target.Class::Methodname syntax to reach methods from other parts in the inheritance tree

[15:40] <IOninja> Ah, right. Thanks

[15:41] <zostay> i do notice that Seq.perl may call .cache, which means something just trying to do some debugging could significantly change the behavior of a program

[15:42] <zostay> that seems like a caveat

[15:45] <IOninja> zostay: that's hardly the only thing that creates .cache. $seq[0] does too, for example

[15:45] <moritz> well, the alternative is that debugging it breaks the subsequent iteratio

[15:45] <moritz> n

[15:47] <zostay> moritz: i didn't say it was a bad trade off... but when i have time, i will go check the docs and make sure there's a warning in there about not depending on the cache/not-cached state in code

[15:48] <zostay> i wouldn't want someone thinking they could use seq iteration to make sure something only happened once

[15:48] *** g4 left
[15:49] <IOninja> zostay: the iteration still happens just once, its result is simply cached.

[15:49] <zostay> right

[15:49] *** wamba joined
[15:50] *** nowan left
[15:50] <zostay> but if some code iterates over the structure more than once expecting the second iteration to fail, that'd be an error in judgement on the part of the dev writing that code

[15:51] <zostay> i'm referring to multiple iterations of the data structure, not the internal iterator

[15:52] *** nowan joined
[15:54] <IOninja> Dying on attempt to iterate again is due to limitation, not a feature. Any code that relies on second iteration dying is buggy IMO

[15:55] *** Guest72549 left
[15:56] <jnthn> But limitation makes it sound like something that might change in the future, which this won't.

[15:56] <jnthn> The "limitation" is the feature, essentially

[15:57] <jnthn> It's how we know we can throw data away

[15:58] <zostay> understood, i'm adding a caveat to Seq that refers to that as a volatile state exposed for optimization, not something to be relied upon for logic

[15:59] <IOninja> Right, I mean limitation of the the thing it's meant to do. You can't iterate again if you're meant to throw away previous data

[16:00] <jnthn> m: my \s = gather { take 1; take 2 }; for s { }; for s { };

[16:00] <camelia> rakudo-moar 86dc99: OUTPUT: ¬´This Seq has already been iterated, and its values consumed‚ê§(you might solve this by adding .cache on usages of the Seq, or‚ê§by assigning the Seq into an array)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:00] <jnthn> m: my \s = gather { take 1; take 2 }; say s.perl; for s { }; for s { };

[16:00] <camelia> rakudo-moar 86dc99: OUTPUT: ¬´(1, 2).Seq‚ê§This Seq has already been iterated, and its values consumed‚ê§(you might solve this by adding .cache on usages of the Seq, or‚ê§by assigning the Seq into an array)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:00] <jnthn> Note that in cases like that it doesn't actually change the behavior

[16:01] <jnthn> Oh, that said...

[16:01] <zostay> i'd say about half of module breakages in the past year due to rakudo changes have been things that previously were handled by lists, but have been optimized to use seqs resulting in code breakage

[16:01] <jnthn> m: my \s = gather { take 1; take 2 }; for s { }; say "here"; for s { };

[16:01] <camelia> rakudo-moar 86dc99: OUTPUT: ¬´here‚ê§This Seq has already been iterated, and its values consumed‚ê§(you might solve this by adding .cache on usages of the Seq, or‚ê§by assigning the Seq into an array)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:01] <jnthn> m: my \s = gather { take 1; take 2 }; say s.perl; for s { }; say "here"; for s { };

[16:01] <camelia> rakudo-moar 86dc99: OUTPUT: ¬´(1, 2).Seq‚ê§This Seq has already been iterated, and its values consumed‚ê§(you might solve this by adding .cache on usages of the Seq, or‚ê§by assigning the Seq into an array)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:01] <jnthn> Yeah, it can in that way :)

[16:01] <jnthn> And yeah, that's worth noting in the docs

[16:05] *** domidumont left
[16:06] <Geth> ¬¶ doc: zostay++ created pull request #1253: Caveat about volatile cache state in Seq

[16:06] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/pull/1253

[16:07] <IOninja> zostay: why'd you remove ¬´X::Seq::Consumed: part? It's part of that output.

[16:07] *** itaipu left
[16:07] <zostay> not in my rakudo

[16:08] <zostay> which i built yesterday

[16:08] *** itaipu joined
[16:08] <IOninja> zostay: you're not running the actual example in the code then

[16:08] <IOninja> zostay: also typo here? "call one operations during "

[16:08] <zostay> hmmm

[16:12] <SmokeMachine> IOninja: rephrasing: should it be always true? [\&any-pure-op](|@arr).tail eqv [&any-pure-op](|@arr) ?

[16:13] <zostay> thx IOninja, fixed

[16:13] <IOninja> SmokeMachine: Why are you asking?

[16:13] <SmokeMachine> IOninja: to create more tests to [&op] and [\&op]

[16:14] <IOninja> I don't like answering "always true" questions, because it relies on ability to think of all possible cases. It's like asking "can you prove unicorns don't exist"

[16:14] <IOninja> SmokeMachine: well, you're not gonna test an infinite amount of ops. So your question is inaccurate.

[16:14] <perlpilot> .oO( first define "unicorn" and "exists" )

[16:15] <IOninja> SmokeMachine: I'd answer "probably" :)

[16:15] <SmokeMachine> IOninja: Im asking to know if any tests I would write assuming that would be true...

[16:15] <SmokeMachine> IOninja: ok, that's enough... :)

[16:16] <SmokeMachine> another question: and, should infix:<X>(<1 2 3>, <a b c>) be equal to my @a = <1 2 3>, <a b c>; infix:<X>(|@a) ?

[16:17] <IOninja> No idea.

[16:17] <IOninja> Ah, likely not

[16:17] <IOninja> 'cause Array would containerize those inner lists

[16:17] *** sufrostico joined
[16:18] *** sufrosti1o joined
[16:18] <IOninja> m: dd infix:<X>(<1 2 3>, <a b c>)

[16:18] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´((IntStr.new(1, "1"), "a"), (IntStr.new(1, "1"), "b"), (IntStr.new(1, "1"), "c"), (IntStr.new(2, "2"), "a"), (IntStr.new(2, "2"), "b"), (IntStr.new(2, "2"), "c"), (IntStr.new(3, "3"), "a"), (IntStr.new(3, "3"), "b"), (IntStr.new(3, "3"), "c")).Seq‚ê§¬ª

[16:18] <IOninja> m: dd infix:<X>($<1 2 3>, $<a b c>)

[16:18] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´((Nil, Nil), (Nil, Nil), (Nil, Nil), (Nil, Nil), (Nil, Nil), (Nil, Nil), (Nil, Nil), (Nil, Nil), (Nil, Nil)).Seq‚ê§¬ª

[16:18] <IOninja> m: dd infix:<X>($(<1 2 3>), $(<a b c>))

[16:18] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´(($(IntStr.new(1, "1"), IntStr.new(2, "2"), IntStr.new(3, "3")), $("a", "b", "c")),).Seq‚ê§¬ª

[16:18] <IOninja> mhm

[16:18] *** wamba left
[16:18] <Geth> ¬¶ doc: 27ea16c5c6 | (Sterling Hanenkamp)++ | doc/Type/Seq.pod6

[16:18] <Geth> ¬¶ doc: Caveat about volatile cache state in Seq

[16:18] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/27ea16c5c6

[16:18] <Geth> ¬¶ doc: 912ea75cfb | (Zoffix Znet)++ | doc/Type/Seq.pod6

[16:18] <Geth> ¬¶ doc: Merge pull request #1253 from zostay/seq-cache-caveat

[16:18] <Geth> ¬¶ doc: 

[16:18] <Geth> ¬¶ doc: Caveat about volatile cache state in Seq

[16:18] <Geth> ¬¶ doc: review: https://github.com/perl6/doc/commit/912ea75cfb

[16:19] <SmokeMachine> IOninja: thats why im asking!

[16:19] *** kyclark joined
[16:19] <SmokeMachine> and thats being used on [\X]...

[16:20] <IOninja> Right, it's the containerization thing I mentioned in the ticket

[16:20] <IOninja> So here's the case where it's actually causing a real big difference and the original suggestion that stuff should deconted is more valid.

[16:20] *** mcmillhj left
[16:21] <IOninja> I think :)

[16:21] <IOninja> The .map({nqp::decont($_)}) thing I mentioned yesterday. Pop it somewhere in there.

[16:21] *** AlexDaniel joined
[16:21] <SmokeMachine> yes, but if I do that...

[16:22] *** mcmillhj joined
[16:22] <IOninja> But that also means you should have tests that test [\X] |@a is different from [\X] <1 2 3>, <a b c>

[16:22] <SmokeMachine> m: my @a = <a b c> X <1 2 3>; say @a X <x y z>

[16:22] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´(((a 1) x) ((a 1) y) ((a 1) z) ((a 2) x) ((a 2) y) ((a 2) z) ((a 3) x) ((a 3) y) ((a 3) z) ((b 1) x) ((b 1) y) ((b 1) z) ((b 2) x) ((b 2) y) ((b 2) z) ((b 3) x) ((b 3) y) ((b 3) z) ((c 1) x) ((c 1) y) ((c 1) z) ((c 2) x) ((c 2) y) ((c 2) z) ((c 3) x) ((c‚Ä¶¬ª

[16:23] <IOninja> m: use nqp; my @a = <a b c> X <1 2 3>; say @a.map({nqp::decont($_)}) X <x y z>

[16:23] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´(((a 1) x) ((a 1) y) ((a 1) z) ((a 2) x) ((a 2) y) ((a 2) z) ((a 3) x) ((a 3) y) ((a 3) z) ((b 1) x) ((b 1) y) ((b 1) z) ((b 2) x) ((b 2) y) ((b 2) z) ((b 3) x) ((b 3) y) ((b 3) z) ((c 1) x) ((c 1) y) ((c 1) z) ((c 2) x) ((c 2) y) ((c 2) z) ((c 3) x) ((c‚Ä¶¬ª

[16:23] <SmokeMachine> brb

[16:23] * IOninja shrugs

[16:23] <IOninja> m: use nqp; my @a = <a b c> X <1 2 3>; say |@a.map({nqp::decont($_)}) X <x y z>

[16:23] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´((a a a b b b c c c x) (a a a b b b c c c y) (a a a b b b c c c z) (a a a b b b c c 3 x) (a a a b b b c c 3 y) (a a a b b b c c 3 z) (a a a b b b c 2 c x) (a a a b b b c 2 c y) (a a a b b b c 2 c z) (a a a b b b c 2 3 x) (a a a b b b c 2 3 y) (a a a b b ‚Ä¶¬ª

[16:24] <IOninja> dunno if that's the right way to do it or not :)

[16:25] * IOninja &

[16:26] <SmokeMachine> IOninja: I think the biggest problem is that [\minmax] is working, but [\X] isn't... minmax and X has different comportaments...

[16:26] *** agentzh left
[16:27] *** mcmillhj left
[16:35] *** donaldh left
[16:35] *** mcmillhj joined
[16:39] *** zakharyas left
[16:40] *** mcmillhj left
[16:41] *** mcmillhj joined
[16:44] *** rindolf left
[16:46] *** mcmillhj left
[16:49] <timotimo> .u combining

[16:49] <yoleaux> U+0300 COMBINING GRAVE ACCENT [Mn] (‚óåÃÄ)

[16:49] <yoleaux> U+0301 COMBINING ACUTE ACCENT [Mn] (‚óåÃÅ)

[16:49] <yoleaux> U+0302 COMBINING CIRCUMFLEX ACCENT [Mn] (‚óåÃÇ)

[16:53] *** mcmillhj joined
[16:53] *** nightfrog is now known as culb

[16:55] *** rindolf joined
[16:57] *** gdonald left
[16:57] *** agentzh joined
[16:57] *** gdonald joined
[16:58] *** mcmillhj left
[16:59] *** mcmillhj joined
[17:00] *** Cabanossi left
[17:02] *** agentzh left
[17:03] *** Cabanossi joined
[17:04] *** robertle left
[17:08] *** gregf_ left
[17:09] <[Coke]> what is rakudobrew for "get me the latest commit on rakudo" ?

[17:09] <[Coke]> (do I actually have to know that commit id?)

[17:10] <timotimo> rakudobrew will just build latest rakudo

[17:10] <timotimo> just not latest nqp and moarvm

[17:10] <[Coke]> ah, ok. danke.

[17:11] *** agentzh joined
[17:11] <IOninja> rakudobrew build nom

[17:11] <IOninja> and rakudobrew switch nom if you've previously switched to another commit

[17:13] <[Coke]> and how to get past the recent moar change that changed one of the 3rdparty libs? Nuke seems to be for installed versions, this is an issue in the git checkout

[17:14] <timotimo> i wish i had gone about that differently :\

[17:14] <timotimo> if you're in there, just rm -rf 3rdparty/libtommath and git pull

[17:15] <[Coke]> turns out rakudobrew nuke moar-nom DID work.

[17:15] <timotimo> oh good

[17:21] <IOninja> zoffix@VirtualBox:~$ perl6 -e '$ = shell(:out, "yes | head -n 100000").out.lines'

[17:21] <IOninja> head: write error: Connection reset by peer

[17:21] <IOninja> head: write error

[17:21] <IOninja> Wonder what's that about. Doesn't happen all the time and doesn't happen with `perl6` outputting 100000 lines

[17:21] *** mcmillhj left
[17:22] *** mcmillhj joined
[17:22] *** gregf_ joined
[17:22] <IOninja> .oO( unless `perl6`'s error gets silenced one way or another )

[17:23] <IOninja> buffer somewhere someplace gets filled and rejects more input? Is that normal?

[17:30] <IOninja> RAKUDO_DEFAULT_READ_ELEMS=2000000 doesn't fix it. 

[17:30] * IOninja shrugs

[17:31] *** Cabanossi left
[17:31] <[Coke]> m: WrapHandle

[17:31] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared name:‚ê§    WrapHandle used at line 1‚ê§‚ê§¬ª

[17:33] *** Cabanossi joined
[17:34] *** eroux left
[17:36] * [Coke] opens https://github.com/perl6/doc/issues/1254

[17:37] <IOninja> Filed it as https://rt.perl.org/Ticket/Display.html?id=131026

[17:43] *** sufrosti2o joined
[17:43] *** wamba joined
[17:49] *** tokomer joined
[17:50] *** cdg left
[17:53] *** cibs left
[17:55] *** cibs joined
[17:57] *** dakkar left
[17:59] *** LeCamarade left
[18:00] *** ccakes joined
[18:01] <IOninja> We can throw typed exceptions from MoarVM somehow, can we? Like `nqp::open` throws and I'd like to differentiate what it throws (e.g. being able to know when the throwage happened due to exclusive mode turned on and file already existing)

[18:02] *** eliasr joined
[18:02] * IOninja is relieved no one is asking about the IO Action Report that was promised to be delivered 2 days ago :)

[18:04] *** spebern left
[18:04] *** LeCamarade joined
[18:04] *** cdg joined
[18:07] *** sukrishn left
[18:09] *** TeamBlast left
[18:09] *** ufobat left
[18:09] *** cdg left
[18:12] *** TeamBlast joined
[18:12] *** xinming_ joined
[18:14] *** domidumont joined
[18:15] *** xinming left
[18:17] *** eroux joined
[18:18] *** alimon left
[18:25] *** ufobat joined
[18:25] *** alimon joined
[18:29] <perlpilot> IOninja: Where's the blog post with the reasonable-ish excuses?   ;-)  

[18:31] *** Cabanossi left
[18:31] *** TEttinger joined
[18:32] *** alimon left
[18:33] *** Cabanossi joined
[18:35] *** kyclark left
[18:41] *** Wanderer68 joined
[18:42] <IOninja> perlpilot: instead of it, I'm working to finish the report instead :P

[18:43] <IOninja> No, excuses. Just found more to write in than I expected.

[18:43] *** espadrine joined
[18:43] <IOninja> It's 9 pages long and I'm yet to rake through newio and CatPath stuff 

[18:44] <IOninja> 9 pages long so far, I mean.

[18:44] <IOninja> And I'm gonna deliver like ~ Tue, Wed.

[18:50] *** bjz joined
[18:54] <DrForr> Wonder if I shouldn't stump for a grant for the Perl6::{Parser,Tidy} stuff.

[18:59] <perlpilot> IOninja++  keep up the good work

[18:59] *** xzhao joined
[18:59] <perlpilot> DrForr++ you too! ;)

[19:02] <DrForr> Thanks. Same to IOninja :)

[19:03] *** agentzh left
[19:09] *** raschipi left
[19:14] *** setty1 joined
[19:14] <unclechu> guys, is there any way to choose between `int32` or `int64` depending by system?

[19:16] *** raschipi joined
[19:18] *** darutoko left
[19:19] *** cpage_ joined
[19:22] *** gdonald left
[19:22] *** gdonald joined
[19:24] <IOninja> Weird that only the first one's broken: https://gist.github.com/zoffixznet/e810c961eb0964a311e2e985e1b24d6b

[19:24] <IOninja> .readchars() on a :bin handle

[19:24] *** ugjka joined
[19:28] <timotimo> unclechu: NativeCall has a "long" type

[19:28] *** kyan joined
[19:33] *** sufrostico left
[19:33] *** sufrosti2o left
[19:33] *** sufrosti1o left
[19:37] *** girafe joined
[19:39] *** sufrostico joined
[19:39] *** labster joined
[19:39] *** sufrosti1o joined
[19:40] *** sufrosti2o joined
[19:40] <IOninja> Anyone with a recentish JVM build? Can you try if this still gives False? my $f = "foo"; spurt($f,"a"); my $h = open($f); my $s = $h.Supply(:size(1),:bin); my $x; $s.tap( { $x = $_ } ); $h.close; my $y = Buf[uint8].new(ord "a"); say $x; say $y; say $x eqv $y

[19:40] <IOninja> And if it does, whether this gives False as well: my $f = "foo"; spurt($f,"a"); my $h = open($f, :bin); my $s = $h.Supply(:size(1),:bin); my $x; $s.tap( { $x = $_ } ); $h.close; my $y = Buf[uint8].new(ord "a"); say $x; say $y; say $x eqv $y

[19:43] <IOninja> Eh.

[19:44] * IOninja builds one :)

[19:44] <IOninja> Oh, turns out I already have one built. In "judo" dir :)

[19:45] *** jsimonet joined
[19:45] <IOninja> And the answer is: both give False (on 2016.10)

[19:47] <IOninja> Which is really damn weird: https://gist.github.com/zoffixznet/f714072a07c4c98b42adacb5125719be

[19:47] *** bjz left
[19:48] * lizmat starts working on the Perl 6 Weekly

[19:49] <lizmat> lemme know if I'm about to miss something

[19:50] <IOninja> lizmat: if this commit makes it into the news; AlexDaniel++ spotted the issue and how to fix it; I merely typed it up: https://github.com/rakudo/rakudo/commit/935231c13b95dc303ac92a9e583e2c995aa14bc4

[19:50] <lizmat> IOninja++ AlexDaniel++  :-)

[19:53] <RabidGravy> does anyone know of any software that does server sent events as part of the way it works, like CouchDB with db changes?

[19:54] <IOninja> r: dd buf8 eqv Buf[uint8] # reason for JVM's weirdness above

[19:54] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´Bool::True‚ê§¬ª

[19:54] <camelia> ..rakudo-jvm fb4f16: OUTPUT: ¬´Bool::False‚ê§¬ª

[19:55] *** itaipu left
[19:56] *** cdg joined
[19:56] <IOninja> and that's https://rt.perl.org/Ticket/Display.html?id=128041 if anyone wanna tackle it

[19:56] *** cdg left
[19:57] <lizmat> IOninja++   # good catch on 86dc997cc292d2646a74a05

[19:57] *** itaipu joined
[19:57] <raschipi> RabidGravy: you want a client to subscribe to be notified of db changes?

[19:57] *** cdg joined
[19:58] <RabidGravy> no, I want to see how some other server application behaves, the spec says to *avoid* chunked data, but couchdb seems to sent chunked data

[19:59] <RabidGravy> well when I say "seems", it does send chunked data

[20:00] *** TEttinger left
[20:00] <raschipi> You want to be notified when anything changes in the DB?

[20:01] <raschipi> "tail -f" in a logfile trough SSH?

[20:01] <lizmat> if it were MySQL, I would put a notify on the binlog?

[20:02] *** itaipu left
[20:03] *** domidumont left
[20:05] <RabidGravy> raschip, no I want to see how some other software than *couchdb* handles the event stream sending

[20:05] <RabidGravy> I know how CouchDB does it

[20:06] <RabidGravy> lizmat, and if it was PostgresSQL I would use the Pg::Notify I made for the purpose ;-)

[20:07] *** eroux left
[20:07] <RabidGravy> but it's the nature of the event stream I am interested in right now, rather than the actual software ;-)

[20:10] <RabidGravy> I've made a noddy longpoll version for CouchDB in Sofa  https://github.com/jonathanstowe/Sofa/blob/master/lib/Sofa/Database.pm#L102 but I really don't like it at all and want to "fix" H::UA so I can do it properly ;-)

[20:14] *** domidumont joined
[20:14] *** sQuEE` joined
[20:15] *** nebuchad` joined
[20:16] *** profan_ joined
[20:16] *** pecastro_ joined
[20:16] *** huf_ joined
[20:17] *** domidumont left
[20:17] *** alimon joined
[20:17] *** aindilis` joined
[20:17] *** emdashcomma_ joined
[20:17] *** Praise- joined
[20:17] *** Praise- left
[20:17] *** Praise- joined
[20:17] *** Praise- left
[20:17] *** Praise- joined
[20:18] *** sjn___ joined
[20:18] *** orevdiabl joined
[20:19] *** eady joined
[20:19] *** integral_ joined
[20:19] *** integral_ left
[20:19] *** integral_ joined
[20:19] *** obfusk_ joined
[20:19] *** _chee joined
[20:19] *** rjbs- joined
[20:19] *** kyclark joined
[20:19] *** Voldenet_ joined
[20:20] *** smash_ joined
[20:21] *** _chee is now known as chee

[20:21] *** garu_ joined
[20:21] *** sufrosti3o joined
[20:21] *** riatre_ joined
[20:21] *** jantore_ joined
[20:22] *** cyphase_eviltwin joined
[20:22] *** kyclark left
[20:22] *** wcumming- joined
[20:23] *** tardisx_ joined
[20:23] *** japhb_ joined
[20:25] *** leah2_ joined
[20:25] *** Peter_R left
[20:26] *** luis` joined
[20:26] *** leah2_ is now known as leah2

[20:27] *** simcop2387_ joined
[20:27] *** Peter_R joined
[20:28] *** daotoad joined
[20:29] *** mcmillhj left
[20:29] *** sufrosti2o left
[20:29] *** profan left
[20:29] *** k-man left
[20:29] *** pecastro left
[20:29] *** araujo left
[20:29] *** _28_ria left
[20:29] *** aindilis left
[20:29] *** sQuEE left
[20:29] *** ggoebel left
[20:29] *** Voldenet left
[20:29] *** cyphase left
[20:29] *** obfusk left
[20:29] *** simcop2387 left
[20:29] *** luis left
[20:29] *** jervo left
[20:29] *** simcop2387_ is now known as simcop2387

[20:29] *** simcop2387 left
[20:29] *** simcop2387 joined
[20:30] *** cpage_ left
[20:30] *** araujo joined
[20:30] *** araujo left
[20:30] *** araujo joined
[20:30] *** emdashcomma_ is now known as emdashcomma

[20:30] *** Voldenet_ is now known as Voldenet

[20:30] *** Voldenet left
[20:30] *** Voldenet joined
[20:30] *** Voldenet left
[20:30] *** Voldenet joined
[20:31] <daotoad> hello all.  I have a question that I hope hasn't been belabored here already 

[20:31] *** mcmillhj joined
[20:31] <IOninja> Ask away.

[20:31] *** Cabanossi left
[20:31] *** ribasushi left
[20:31] <daotoad> What are the obstacles to building a tool like PAR for Perl6?

[20:32] *** sjn___ is now known as sjn

[20:32] <daotoad> Being able to build executable bundles would be very nice.

[20:32] *** bjz joined
[20:33] <IOninja> buggable: eco App::InstallerMaker::WiX

[20:33] <buggable> IOninja, App::InstallerMaker::WiX 'Tool to make basic WiX installers for Perl 6 apps, bundling MoarVM/Rakudo.': https://github.com/jnthn/p6-app-installermaker-wix

[20:33] *** k-man joined
[20:33] <IOninja> daotoad: well, there's that already for Windows. I think the current obstacle is immovability of combiled rakudo.

[20:33] *** Cabanossi joined
[20:33] * IOninja presses the timotimo-signal

[20:34] <IOninja> This gets asked frequently. So far, I haven't heard anyone say it's very hard or impossible. Just may be not the most urgent thing to prioriotize

[20:34] <daotoad> Where can I find out about the current windows tool?  Or is it built in?

[20:35] <samcv> https://github.com/jnthn/p6-app-installermaker-wix

[20:35] <IOninja> daotoad: see the link from the bot above 

[20:35] <IOninja> Yeah, that.

[20:35] *** jhill__ joined
[20:35] <daotoad> Wix installermaker?  Sweet.  

[20:36] *** dwarring joined
[20:37] *** ribasushi joined
[20:39] <daotoad> It's a priority for me.  Where would I look to learn more about relocatability issues in Rakudo? 

[20:39] <IOninja> daotoad: dunno, try hunting down timotimo. He's the last one I recall working in that area.

[20:40] *** jervo joined
[20:40] <daotoad> Excellent.  Thanks.

[20:41] <daotoad> From wix installer README: please consider this tool free as in "puppy".

[20:42] <[Coke]> mst might have some patches lurking from his time getting rakudo installable via cpan.

[20:42] <timotimo> uh oh

[20:42] *** tinita joined
[20:43] <timotimo> oh, right

[20:43] *** SCHAAP137 left
[20:43] <IOninja> daotoad: it was made like 6 days ago :)

[20:43] <timotimo> i was the last unfortunate soul to attempt to bundle some resources into one executable along with moarvm

[20:44] <AlexDaniel> but moarvm is movable, right?

[20:44] <timotimo> aye

[20:44] <timotimo> WiX will not give you the application as a single .exe file, it makes an installer that installs a full rakudo + your application and dependencies into a folder in a path of your choice

[20:45] <timotimo> "your" being "you who creates the installer"

[20:45] <timotimo> because, again, non-movable rakudo

[20:46] <timotimo> i believe nine made considerable progress with movable CompUnitRepos

[20:46] <daotoad> So if I wanted to start helping to make rakudo movable, where do I start?

[20:47] <timotimo> hm, let's see

[20:47] <timotimo> one part of the problem is that we have paths in our .bat files

[20:48] *** thundergnat joined
[20:48] <timotimo> after that we could have a look what else needs changed

[20:48] <timotimo> by looking at the error messages we get :)

[20:49] *** SCHAAP137 joined
[20:49] *** Celelibi joined
[20:49] <IOninja> daotoad: The source is at https://github.com/rakudo/rakudo https://github.com/perl6/nqp and https://github.com/MoarVM/MoarVM

[20:50] <thundergnat> o/ #perl6.

[20:50] <IOninja> Not sure how much use they'd be, but there are also some articles on perl6.party (search for "Core" in titles)

[20:50] <timotimo> why not first try it with the .msi?

[20:51] <daotoad> Ideally, I would like to be able to target Macs

[20:51] <daotoad> So a general solution is best

[20:51] <thundergnat> Is there anyone handy that has Inline::Perl5 installed that could test run a snippet for me? I want to make sure I haven't shot myself in the foot first before filing a bug report.

[20:52] <thundergnat> https://gist.github.com/thundergnat/1ab3e9c3db4fe4c67ecbd7864b4e62cc 

[20:53] <thundergnat> For some reason, using a module from Perl5 disables 'next' on my system. 

[20:53] <daotoad> I don't mind if the road is long, as long as I can get there eventually.  Nice concrete steps like, review bat files (and presumably shell scripts) for embedded paths are exactly what I need to start

[20:54] <IOninja> thundergnat: what perl6 version you got?

[20:54] <thundergnat> This is Rakudo version 2017.03-6-g88aa78c built on MoarVM version 2017.03

[20:54] <thundergnat> implementing Perl 6.c.

[20:54] <IOninja> .oO( everyone's on dev commits... )

[20:55] <lizmat> $ perl6 thundergnat 

[20:55] <lizmat> 135

[20:55] <thundergnat> Nope. :-) mine is a tagged release.

[20:55] <daotoad> signing off for now.  Thanks for the pointers!

[20:55] <IOninja> thundergnat: except it isn't :)

[20:55] *** daotoad left
[20:55] <IOninja> thundergnat: I can repro on 2017.02-186-g9da6de4

[20:56] <lizmat> thundergnat: next in Perl 6 is just a sub

[20:56] <thundergnat> lizmat Sigh. I get "Useless use of constant value next in sink context (line 3) 12345" here.

[20:56] <lizmat> so if you export a sub called "next", it will take that

[20:56] <raschipi> I'm not on a dev commit...

[20:56] <dwarring> is there any direct way of getting a 

[20:56] <thundergnat> When running that above gist.

[20:56] <IOninja> hm

[20:56] <IOninja> thundergnat: and on 2017.03-8-gbfbe429

[20:56] <dwarring> ... native shaped array from Buf/Blob?

[20:57] <lizmat> hmmm... perhaps this depends on the Perl 5 version being used ?

[20:57] * IOninja builds HEAD

[20:57] <lizmat> 5.20.0 for me

[20:57] <IOninja> maybe. Mine's perlbrewed v5.24.0) built for x86_64-linux-multi

[20:57] <thundergnat> lizmat. Possibly, my p5 version is 5.18

[20:57] <IOninja> thundergnat: what OS are you on?

[20:58] <thundergnat> linux Mint

[20:58] <IOninja> Anyone else on OSX who can try it?

[20:59] <lizmat> I just did  :-)

[20:59] <IOninja> Hence the "else". thundergnat and I are on Linux and have the bug; you're on OSX and don't got it

[21:00] <IOninja> :)

[21:00] <lizmat> ah, ok  :-)

[21:00] * lizmat should focus more on P6W  :-)

[21:00] *** luis` left
[21:01] <thundergnat> Well, it seems like it isn't just me. I'll file an issue report. Thanks.

[21:01] *** skids left
[21:02] *** luis joined
[21:03] *** sufrostico left
[21:03] *** sufrosti3o left
[21:03] *** sufrosti1o left
[21:04] *** kyclark joined
[21:04] <dwarring> question on Blobs vs native shaped arrays

[21:04] <IOninja> dwarring: don't see any

[21:04] <dwarring> m: my uint8 @a[2;4] = 1..4, 5..8; my buf8 $b .= new(@a); say $b

[21:04] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´Buf[uint8]:0x<01 02 03 04 05 06 07 08>‚ê§¬ª

[21:04] <IOninja> dwarring: though Buf got AT-POS implemented

[21:04] <IOninja> m: dd buf8.new(1, 2, 3, 56, 67, 7, 3)[^4]

[21:04] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´(1, 2, 3, 56)‚ê§¬ª

[21:04] <IOninja> So you use that?

[21:05] <dwarring> but  no inverse?

[21:05] <IOninja> Definite no reverse for that; since you flattened it :)

[21:05] <dwarring> m: my uint8 @b[2;4] = buf8.new(1..8);

[21:05] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´Assignment to array with shape 2 4 must provide structured data‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:06] <IOninja> m: my uint8 @b[2;4] = |buf8.new(1..8)[2;4]

[21:06] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´X::Assignment::ToShaped exception produced no message‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:06] <IOninja> heh

[21:06] *** nebuchad` is now known as nebuchadnezzar

[21:06] <dwarring> ^ can't see any quick way of doing the inverse

[21:08] <timotimo> you can probably assign to .values

[21:08] <raschipi> m: say my uint8 @b[2;4] = buf8.new(1..8).rotor: 3; 

[21:08] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´[[1 2 3 0] [4 5 6 0]]‚ê§¬ª

[21:08] <dwarring> m: my uint8 @b[2;4]; @b.values = buf8.new(1..8); say @b

[21:08] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´Cannot modify an immutable Seq‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:08] * dwarring would be nice

[21:09] <jnthn> Z=

[21:09] <IOninja> m: say my uint8 @b[2;4] Z= buf8.new(1..8)

[21:09] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´(1 2 3 4 5 6 7 8)‚ê§¬ª

[21:09] *** cdg left
[21:09] <IOninja> m: dd my uint8 @b[2;4] Z= buf8.new(1..8)

[21:09] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´(1, 2, 3, 4, 5, 6, 7, 8).Seq‚ê§¬ª

[21:09] <IOninja> m: dd my uint8 @b[2;4] Z= buf8.new(1..8); dd @b

[21:09] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´(1, 2, 3, 4, 5, 6, 7, 8).Seq‚ê§array[uint8].new(:shape(2, 4), [1, 2, 3, 4], [5, 6, 7, 8])‚ê§¬ª

[21:09] <timotimo> makes sense, yeah

[21:09] <IOninja> jnthn++ cool

[21:09] *** cdg joined
[21:09] *** cdg left
[21:09] <dwarring> jnthn: handy to know thanks

[21:10] <jnthn> I tend to read Z= as "pour into" :)

[21:10] *** cdg joined
[21:13] <raschipi> I can see it: http://thumb1.shutterstock.com/display_pic_with_logo/83533/83533,1269773208,8/stock-photo--honey-pouring-into-spoon-isolated-on-white-background-49707457.jpg

[21:16] *** cdg left
[21:16] *** mcmillhj left
[21:18] *** kill_me joined
[21:18] *** kjk left
[21:18] <kill_me> what is the p6 way to do something like Foo::Bar::qux()?  i keep getting 'qux' not defined.

[21:20] <IOninja> kill_me: what's qux?

[21:21] <kill_me> It's just a sub-routine.

[21:21] *** raschipi left
[21:21] <IOninja> kill_me: does it have üòø`our` before it?

[21:21] <IOninja> our sub meows {‚Ä¶}

[21:22] * IOninja kills kill_me

[21:22] <kill_me> ah, that did it.  thank-you.

[21:22] <IOninja> No problem. By default subs are lexically scoped and so aren't accessible from outside using the syntax you've used. 

[21:24] <kill_me> This is just way different than perl5 and I have too many years of perl5 brain damage to overcome.

[21:25] <IOninja> Heh. Yeah, Perl 6 is basically another language.

[21:25] *** yqt left
[21:26] <AlexDaniel> huggable: perl5

[21:26] <huggable> AlexDaniel, nothing found

[21:26] <AlexDaniel> huggable: perl5 :is: Heh. Yeah, Perl 6 is basically another language.

[21:26] <huggable> AlexDaniel, Added perl5 as Heh. Yeah, Perl 6 is basically another language.

[21:26] <AlexDaniel> huggable: perl5 :is: Heh. Yeah, Perl¬†6 is basically another language.

[21:26] <huggable> AlexDaniel, Added perl5 as Heh. Yeah, Perl¬†6 is basically another language.

[21:27] *** mcmillhj joined
[21:29] <IOninja> .oO( everyone just loves quoting me... )

[21:29] <kill_me> i might be back.  thanks for the help.

[21:29] *** kill_me left
[21:30] *** Cabanossi left
[21:33] *** rindolf left
[21:33] *** Cabanossi joined
[21:34] *** ufobat left
[21:36] *** alphah joined
[21:43] *** kyan left
[21:46] *** sena_kun left
[21:54] *** domidumont joined
[21:54] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/03/20/2017-12-how-to-race-a-hyper/

[21:55] *** domidumont left
[22:01] *** Cabanossi left
[22:02] *** kyclark left
[22:03] *** bjz left
[22:03] *** Cabanossi joined
[22:05] *** kyan joined
[22:07] <IOninja> lizmat++ good weekly

[22:09] *** setty1 left
[22:10] <AlexDaniel> :O

[22:10] <AlexDaniel> I cannot believe that we may possibly get working hyper/race in the near future :O

[22:11] <AlexDaniel> awesome news

[22:11] <AlexDaniel> that being said‚Ä¶ it talks about 6.d?

[22:11] <lizmat> AlexDaniel: we already have 6.d.PREVIEW

[22:11] <lizmat> m: use 6.d.PREVIEW; say $*PERL

[22:11] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    use used at line 1‚ê§‚ê§¬ª

[22:12] <lizmat> que?

[22:12] <AlexDaniel> m: use v6.d.PREVIEW; say $*PERL

[22:12] <camelia> rakudo-moar 0c6281: OUTPUT: ¬´Perl 6 (6.d)‚ê§¬ª

[22:12] <lizmat> yeah, v  :-)

[22:12] *** TEttinger joined
[22:12] <lizmat> still an LTA message

[22:12] <AlexDaniel> that I know, but does it mean we will still have broken hyper/race unless you use v6.d.PREVIEW ?

[22:13] <lizmat> we could possibly have some API breakage

[22:13] <lizmat> so 6.d appears to be needed

[22:13] * AlexDaniel adds use v6.d.PREVIEW; to all of his source files‚Ä¶

[22:14] <AlexDaniel> lizmat: that kinda makes sense. Anyway, we'll see how it goes

[22:14] *** eater joined
[22:14] <lizmat> hmmm... wonder if we should put 'use v6.d.pREVIEW' in roast so that we're sure we're still ok ?

[22:15] <lizmat> or that we should have a generic "use blead" ?

[22:22] *** kyclark joined
[22:22] *** sufrostico joined
[22:22] *** sufrosti1o joined
[22:22] *** sufrosti2o joined
[22:23] *** LeCamarade left
[22:24] *** RabidGravy left
[22:31] *** kurahaupo left
[22:32] *** kurahaupo__ joined
[22:33] *** kyclark left
[22:34] <jnthn> AlexDaniel: With regard to 6.d, all that's really meant in this case is that the 6.d test suite will have hyper/race nailed down pretty well

[22:35] <jnthn> AlexDaniel: Since it's all in method-land, I don't expect a use v6.d.PREIVEW will be needed to get at it

[22:35] *** tokomer left
[22:35] <AlexDaniel> okay

[22:35] <jnthn> Just like you don't have to wait to take advantage of all the other stuff done since Christmas 2015, but that hasn't been in an official language release yet :)

[22:37] *** Sound left
[22:38] *** Voldenet left
[22:39] *** mienaikage joined
[22:40] *** bjz joined
[22:40] <timotimo> trie, method-based enhancement to a new core setting is ... "fraught" is the word i think :)

[22:40] *** LeCamarade joined
[22:41] *** gdonald left
[22:42] *** gdonald joined
[22:44] *** pytuger left
[22:44] *** wamba left
[22:45] *** dct joined
[22:45] *** bjz left
[22:47] *** Voldenet joined
[22:47] *** Voldenet left
[22:47] *** Voldenet joined
[23:00] *** jhill__ left
[23:00] *** jhill__ joined
[23:00] *** dwarring left
[23:00] *** dwarring joined
[23:00] *** mienaikage left
[23:00] *** mienaikage joined
[23:02] *** Cabanossi left
[23:03] *** Cabanossi joined
[23:09] *** perlawhirl joined
[23:10] *** perlawhirl left
[23:10] *** perlawhirl joined
[23:19] *** espadrine left
[23:20] *** eliasr left
[23:23] *** Praise- is now known as Praise

[23:29] <mienaikage> Should 'dd class {} for 0..2' give me a new class each time or no? I can get around it with EVAL, but I'm not sure if it's behaving correctly or not because I don't know any better :P

[23:30] <timotimo> no, should give you the same

[23:31] <timotimo> classes are a compile-time thing, and they are also not closures

[23:31] *** kurahaupo__ left
[23:32] <mienaikage> Ah okay

[23:34] <mienaikage> Thanks for the info :)

[23:34] <timotimo> sure :)

[23:44] *** pytuger joined
[23:45] *** pytuger left
[23:45] *** pytuger joined
[23:57] *** alimon left
