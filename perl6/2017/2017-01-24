[00:04] *** cale2 left
[00:05] <Geth>  doc: 4a8f8f5af5 | (Samantha McVey)++ | 2 files

[00:05] <Geth>  doc: Fix --no-proc-async and allow sassc as one of our sass compilers

[00:05] <Geth>  doc: review: https://github.com/perl6/doc/commit/4a8f8f5af5

[00:05] <samcv> [Coke], --no-proc-async should be fixed now

[00:06] <samcv> oh nice, and highlighting on the site is back up \o/

[00:16] *** mr_ron joined
[00:17] *** BenGoldberg joined
[00:18] <mr_ron> .tell lizmat for the p6weekly the ecosystem addition is US-ASCII not US::ASCII - thanks

[00:18] <yoleaux> mr_ron: I'll pass your message to lizmat.

[00:22] *** jdmmmmm left
[00:28] *** dataf3l joined
[00:32] *** raschipi joined
[00:33] *** ocbtec left
[00:33] <[Coke]> samcv: testing now

[00:41] <raschipi> .tell lizmat The weekly has a link to "reddit comments" that doesn't point to reddit.

[00:41] <yoleaux> raschipi: I'll pass your message to lizmat.

[00:41] <Geth>  doc: cfcfe5dce4 | raiph++ | doc/Programs/00-running.pod6

[00:41] <Geth>  doc: Link to page w/ examples + Windows quoting rules

[00:41] <Geth>  doc: 

[00:41] <Geth>  doc: cale2++ for reporting problem and mentioning linked doc

[00:41] <Geth>  doc: review: https://github.com/perl6/doc/commit/cfcfe5dce4

[00:51] *** pmurias_ left
[00:53] *** lep-delete left
[00:53] *** pmurias joined
[00:56] *** lep-delete joined
[00:58] *** raschipi left
[00:58] <sammers> hi #perl6

[01:00] *** pmurias left
[01:05] <[Coke]> Ho.

[01:16] *** pyrimidine joined
[01:26] *** geraud joined
[01:39] *** skids joined
[01:46] <Geth>  doc: antquinonez++ created pull request #1161: Style updates to faq and about pod.

[01:46] <Geth>  doc: review: https://github.com/perl6/doc/pull/1161

[01:47] *** agentzh left
[01:49] *** labster left
[01:52] *** travis-ci joined
[01:52] <travis-ci> Doc build passed. Samantha McVey 'Fix --no-proc-async and allow sassc as one of our sass compilers'

[01:52] <travis-ci> https://travis-ci.org/perl6/doc/builds/194661035 https://github.com/perl6/doc/compare/e3ca965b8fcb...4a8f8f5af5f2

[01:52] *** travis-ci left
[01:55] <AlexDaniel> oh wow, these doc pull requests :o

[02:03] *** AlexDaniel left
[02:05] *** agentzh joined
[02:09] *** labster joined
[02:11] <samcv> so it looks like the changes to highlights were pretty small https://github.com/atom/highlights/commit/77e03c42ccc34cfda402b4b3a61e266b7d638515#diff-79e70f7be06fce1120c13431b70ddfd4R302

[02:11] <samcv> like a few lines

[02:12] *** diakopter joined
[02:14] *** dataf3l left
[02:17] *** kalkin- left
[02:17] *** kalkin- joined
[02:23] *** pyrimidine left
[02:24] *** pyrimidine joined
[02:28] *** pyrimidine left
[02:39] *** agentzh left
[02:40] *** MasterDuke joined
[02:44] *** agentzh joined
[02:45] *** ilbot3 left
[02:47] *** ilbot3 joined
[02:48] *** mr-foobar left
[03:00] *** matiaslina joined
[03:04] *** xtreak joined
[03:05] * [Coke] tries to figure out why we're getting html/.html files, and man is this a twisty maze. :(

[03:05] *** b7j0c joined
[03:06] <b7j0c> howdy! is there a way to have one logical package span many files?

[03:08] <b2gills> m: https://gist.github.com/b2gills/b877658f38dae51e3c88fbdc0990f581

[03:08] <camelia> rakudo-moar 700a07: OUTPUT¬´ok 1 - ‚ê§ok 2 - ‚ê§ok 3 - ‚ê§ok 4 - ‚ê§ok 5 - ‚ê§ok 6 - ‚ê§ok 7 - ‚ê§ok 8 - ‚ê§ok 9 - ‚ê§ok 10 - ‚ê§¬ª

[03:09] <b2gills> b7j0c: The best way would be to have a role per file and compose them into the resulting class

[03:09] <b7j0c> thanks b2gills, I'll look into that

[03:11] <b7j0c> yeah a quick glance at an old Advent post on Roles seems to indicate that is what I need

[03:22] *** agentzh left
[03:26] *** pyrimidine joined
[03:27] *** agentzh joined
[03:33] *** geekosaur left
[03:36] *** geekosaur joined
[03:48] *** noganex joined
[03:49] <BenGoldberg> .u ·õä·öæ·õÅ·ö≤·õñ·ö±·õä·öæ·õá·ö≤

[03:49] <yoleaux> U+16B1 RUNIC LETTER RAIDO RAD REID R [Lo] (·ö±)

[03:49] <yoleaux> U+16B2 RUNIC LETTER KAUNA [Lo] (·ö≤)

[03:49] <yoleaux> U+16BE RUNIC LETTER NAUDIZ NYD NAUD N [Lo] (·öæ)

[03:50] <BenGoldberg> u: ·õä·öæ·õÅ·ö≤·õñ·ö±·õä·öæ·õá·ö≤

[03:50] <unicodable6> BenGoldberg, U+16CA RUNIC LETTER SOWILO S [Lo] (·õä)

[03:50] <unicodable6> BenGoldberg, U+16BE RUNIC LETTER NAUDIZ NYD NAUD N [Lo] (·öæ)

[03:50] <unicodable6> BenGoldberg, https://gist.github.com/4117b1032a9a03f0660399cad252256c

[03:51] *** noganex_ left
[04:11] *** b7j0c left
[04:12] *** kyan left
[04:13] *** ChoHag left
[04:13] *** beatdown joined
[04:31] *** xtreak left
[04:32] *** xtreak joined
[04:49] *** Cabanoss- joined
[04:53] *** Cabanossi left
[04:53] *** Cabanoss- is now known as Cabanossi

[04:55] *** MasterDuke left
[04:57] *** MasterDuke joined
[05:01] *** matiaslina left
[05:10] *** mr_ron left
[05:15] *** BenGoldberg left
[05:23] *** bkd joined
[05:24] *** bkd left
[05:28] *** pierrot left
[05:48] *** cpage_ left
[05:50] *** troys joined
[06:07] *** xtreak left
[06:07] *** xtreak joined
[06:11] *** Unavowed_ joined
[06:14] *** Unavowed left
[06:16] *** troys left
[06:18] *** wamba joined
[06:25] *** dataf3l joined
[06:26] *** matt_ joined
[06:26] *** matt_ is now known as Guest41742

[06:31] *** pyrimidi_ joined
[06:31] *** pyrimidine left
[06:31] *** CIAvash joined
[06:33] *** agentzh left
[06:48] *** cschwenz joined
[06:48] *** bjz joined
[06:50] *** RabidGravy joined
[06:51] *** mr_ron joined
[06:55] *** bjz left
[07:05] *** xtreak left
[07:05] *** dataf3l left
[07:08] *** xtreak joined
[07:13] *** domidumont joined
[07:18] *** domidumont left
[07:20] *** domidumont joined
[07:20] *** bjz joined
[07:49] *** cpage_ joined
[07:54] *** mr_ron left
[08:05] *** trnh joined
[08:05] *** trnh left
[08:23] *** zakharyas joined
[08:31] *** AlexDaniel joined
[08:35] <lizmat> .

[08:35] <yoleaux> 00:18Z <mr_ron> lizmat: for the p6weekly the ecosystem addition is US-ASCII not US::ASCII - thanks

[08:35] <yoleaux> 00:41Z <raschipi> lizmat: The weekly has a link to "reddit comments" that doesn't point to reddit.

[08:35] <lizmat> fixed!

[08:35] * lizmat clickbaits https://p6weekly.wordpress.com/2017/01/23/2017-04-welcome/

[08:35] <moritz> lizmat++

[08:37] *** dakkar joined
[08:41] *** labster left
[08:41] <CIAvash> lizmat++

[08:50] *** wamba left
[08:53] *** salva left
[08:54] *** zacts left
[09:03] *** jonas1 joined
[09:04] *** Guest41742 is now known as matt_

[09:06] *** ChoHag joined
[09:14] *** is_ joined
[09:15] *** perlpilot left
[09:16] *** salva joined
[09:18] *** mr-foobar joined
[09:20] *** zacts joined
[09:24] *** is_ left
[09:26] *** ChoHag left
[09:27] *** andrzejku joined
[09:33] *** espadrine_ joined
[09:38] *** ChoHag joined
[09:44] *** jonas1 left
[09:45] *** jonas1 joined
[09:48] *** wamba joined
[09:50] *** TEttinger left
[09:54] *** jonas1 left
[09:57] *** mr_ron joined
[09:58] *** wamba left
[09:59] *** obfusk left
[09:59] *** obfusk_ joined
[10:02] *** jonas1 joined
[10:02] *** domidumont left
[10:04] *** domidumont joined
[10:13] <Geth>  ecosystem: bd2c869a8a | (Ahmad M. Zawawi)++ | META.list

[10:13] <Geth>  ecosystem: Remove totem ( Fun search bar written in Perl 6 )

[10:13] <Geth>  ecosystem: 

[10:13] <Geth>  ecosystem: The project is 2-years old and I am focusing my efforts where it matters.

[10:13] <Geth>  ecosystem: review: https://github.com/perl6/ecosystem/commit/bd2c869a8a

[10:15] *** espadrine_ left
[10:18] *** wamba joined
[10:28] *** felher_ is now known as felher

[10:30] *** trnh joined
[10:30] *** agentzh joined
[10:33] *** Vynce joined
[10:34] *** agentzh left
[10:49] *** xtreak left
[10:50] *** xtreak joined
[10:53] *** xtreak left
[10:53] *** xtreak joined
[10:55] *** xtreak left
[10:55] *** Vynce left
[10:56] *** xtreak joined
[11:00] *** raschipi joined
[11:00] *** pierrot joined
[11:10] *** raschipi left
[11:12] *** mr_ron left
[11:48] *** sufrostico joined
[11:52] *** rindolf joined
[11:53] *** mr_ron joined
[11:54] *** lukaramu joined
[11:56] *** xtreak left
[11:59] *** jaguar007 joined
[12:00] *** jaguar007 left
[12:04] *** andrzejku left
[12:04] *** andrzejku joined
[12:17] *** raschipi joined
[12:18] *** gregf_ left
[12:26] *** raschipi left
[12:29] *** gregf_ joined
[12:30] *** wamba left
[12:32] *** parv joined
[12:32] *** rindolf left
[12:51] *** ChoHag left
[12:52] *** ChoHag joined
[13:00] *** jaguar007 joined
[13:01] *** pyrimidi_ left
[13:02] *** pyrimidine joined
[13:02] *** wamba joined
[13:06] *** pyrimidine left
[13:08] *** pyrimidine joined
[13:09] *** sena_kun joined
[13:13] *** pyrimidine left
[13:35] *** cschwenz left
[13:38] *** bjz left
[13:39] *** pyrimidine joined
[13:42] *** skids left
[13:43] *** pyrimidine left
[13:48] *** kurahaupo__ joined
[13:50] *** dataf3l joined
[14:00] *** parv left
[14:06] *** pyrimidine joined
[14:09] *** wamba left
[14:09] *** ggoebel left
[14:10] *** pyrimidine left
[14:22] *** ggoebel joined
[14:23] *** matiaslina joined
[14:25] <brokenchicken> We changed the .O stuff semi-recently right? This is no longer the valid way to set up precedence: Eji::Grammar.O(':prec<u=>, :assoc<left>', '%multiplicative'); ?

[14:25] <brokenchicken> What's the new way?

[14:25] <brokenchicken> Right now that dies with 'Too many positionals passed; expected 1 argument but got 3'

[14:26] * brokenchicken activates the arnsholt -signal

[14:28] <timotimo> did we actually get that merged?

[14:29] <brokenchicken> yeah

[14:29] <arnsholt> Starting to be a while now, I think

[14:29] <brokenchicken> Looks like this is the new way to do it: https://github.com/edumentab/rakudo-and-nqp-internals-course/blob/master/examples/rubyish-3.nqp#L71-L80

[14:30] <arnsholt> Yup

[14:30] <brokenchicken> cool

[14:31] * brokenchicken is writing an emoji-based language :)

[14:31] <brokenchicken> üí¨ 'Hello, World!'

[14:31] <arnsholt> Was merged in early September last year, FWIW =)

[14:31] <brokenchicken> That prints hello world.

[14:32] *** agentzh joined
[14:34] *** Actualeyes left
[14:36] *** agentzh left
[14:39] *** cibs left
[14:41] *** mr_ron left
[14:41] *** cibs joined
[14:45] *** Actualeyes joined
[14:53] <brokenchicken> $ cat test.eji 

[14:53] <brokenchicken> üí¨ 2.4 ‚úñ 2.5

[14:53] <brokenchicken> $ ./eji test.eji 

[14:53] <brokenchicken> 6

[14:53] <brokenchicken> :)

[14:54] *** rindolf joined
[14:57] *** pyrimidine joined
[14:57] <brokenchicken> m: "üÜí".uninames.say

[14:57] <camelia> rakudo-moar e99510: OUTPUT¬´(SQUARED COOL)‚ê§¬ª

[14:57] <brokenchicken> That's pretty... cool

[14:58] *** mr_ron joined
[15:00] <brokenchicken> Gawd dammit! Someone stole my idea: http://www.emojicode.org/

[15:01] *** pyrimidine left
[15:03] <brokenchicken> Hm, looks a lot less cool actually.

[15:03] <perigrin> you just don't understand it ... nobody understands it ... it'll just be in it's room GAH!

[15:04] *** bisectable6 left
[15:04] * perigrin has a teenager who puts the emo into emoji

[15:04] * brokenchicken is lucky to still be offspring-free

[15:04] *** itcharlie joined
[15:04] *** committable6 joined
[15:04] *** evalable6 joined
[15:04] *** benchable6 joined
[15:04] *** bisectable6 joined
[15:04] *** unicodable6 joined
[15:04] *** statisfiable6 joined
[15:08] *** matiaslina left
[15:09] *** ChanServ sets mode: +vvvv committable6 evalable6 benchable6 bisectable6

[15:09] *** ChanServ sets mode: +vv unicodable6 statisfiable6

[15:12] <brokenchicken> Well... lacking any original ideas, I'm gonna write Perl 7 :)

[15:14] *** pyrimidine joined
[15:17] <b2gills> brokenchicken: Just pick a random word from the dictionary and try to implement that as a language

[15:18] <mst> just make the random number generator run again if it picks 'felch'

[15:19] <huf> yeah, dont call it that

[15:19] <huf> however, moist would be a great name

[15:20] *** skids joined
[15:20] <brokenchicken> ... moist?

[15:21] *** cdg joined
[15:21] <huf> yeah, lots of people seem to hate the word

[15:21] <huf> for no real reason

[15:21] <huf> well, i believe their main reason is "just listen to it: moist *ewwwww*"

[15:23] *** ChanServ sets mode: +v ilbot3

[15:24] <mr_ron> m: https://gist.github.com/ronaldxs/901b9b802dcd85c8b588b202c36bb5ac

[15:24] <camelia> rakudo-moar e99510: OUTPUT¬´True‚ê§True‚ê§err: No such method 'g::t' for invocant of type 'Cursor'‚ê§err: No such method 'g::t' for invocant of type 'Cursor'‚ê§¬ª

[15:25] <mr_ron> anyone know how to do such indirect grammar reference?

[15:25] *** girafe joined
[15:26] <b2gills> just imagine all of the keywords in a language called moist

[15:27] <mr_ron> m: grammar g { token t { <[2]> } }; $rname = "g::t"; say so "2" ~~ /<::($rname)>/ # simplified version of question

[15:27] <camelia> rakudo-moar e99510: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$rname' is not declared. Did you mean '&rename'?‚ê§at <tmp>:1‚ê§------> 3grammar g { token t { <[2]> } }; 7‚èè5$rname = "g::t"; say so "2" ~~ /<::($rna‚ê§¬ª

[15:27] <mr_ron> m: grammar g { token t { <[2]> } }; my $rname = "g::t"; say so "2" ~~ /<::($rname)>/ # simplified version of question

[15:27] <camelia> rakudo-moar e99510: OUTPUT¬´No such method 'g::t' for invocant of type 'Cursor'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:28] <mr_ron> Is that example supposed to work?

[15:29] <[Coke]> if it's not tested in roast, no guarantees? I see you quoted the syn in the gist.

[15:29] <[Coke]> code from there is often just speculative.

[15:31] <mr_ron> m: my $rname = "digit"; say so "2" ~~ /<::($rname)>/; # that works

[15:31] <camelia> rakudo-moar 4ef37c: OUTPUT¬´True‚ê§¬ª

[15:32] *** dalek joined
[15:32] *** ChanServ sets mode: +v dalek

[15:33] *** girafe left
[15:33] *** cdg left
[15:33] *** cdg joined
[15:34] <mr_ron> https://github.com/perl6/roast/blob/master/S05-metasyntax/angle-brackets.t#L171

[15:34] *** synopsebot6 joined
[15:34] *** ChanServ sets mode: +v synopsebot6

[15:37] <brokenchicken> That works because digit is a method on Cursor, while "g::t" ain't

[15:38] <brokenchicken> m: grammar g { token t { <[2]> } }; dd ::("g::t")

[15:38] <camelia> rakudo-moar 4ef37c: OUTPUT¬´Failure.new(exception => X::NoSuchSymbol.new(symbol => "g::t"), backtrace => Backtrace.new)‚ê§¬ª

[15:38] <brokenchicken> m: grammar g { our token t { <[2]> } }; dd ::("g::t")

[15:38] <camelia> rakudo-moar 4ef37c: OUTPUT¬´Failure.new(exception => X::NoSuchSymbol.new(symbol => "g::t"), backtrace => Backtrace.new)‚ê§¬ª

[15:38] <brokenchicken> doesn't seem to be even visible outside of it

[15:38] <AlexDaniel> .tell dalek Please switch this bot to Geth

[15:38] <yoleaux> AlexDaniel: I'll pass your message to dalek.

[15:38] <brokenchicken> m: grammar g { our sub t { } }; dd ::("g::t")

[15:38] <camelia> rakudo-moar 4ef37c: OUTPUT¬´Failure.new(exception => X::NoSuchSymbol.new(symbol => "g::t"), backtrace => Backtrace.new)‚ê§¬ª

[15:38] <brokenchicken> m: grammar g { our sub t { } }; dd ::("&g::t")

[15:38] <camelia> rakudo-moar 4ef37c: OUTPUT¬´Sub t = sub t () { #`(Sub|54816568) ... }‚ê§¬ª

[15:39] <brokenchicken> m: grammar g { our token t { ^} }; dd ::("&g::t")

[15:39] <camelia> rakudo-moar 4ef37c: OUTPUT¬´Regex t = token t { ^}‚ê§¬ª

[15:39] <mr_ron> m: grammar g { token t { <[2]> } }; say so "2" ~~ /<g::t>/ # simplified version of question

[15:39] <camelia> rakudo-moar 4ef37c: OUTPUT¬´True‚ê§¬ª

[15:39] <brokenchicken> m: grammar g { our token t { <[2]> } }; my $rname = "g::t"; say so "2" ~~ /<::("&$rname")>/

[15:39] <camelia> rakudo-moar 4ef37c: OUTPUT¬´No such method '&g::t' for invocant of type 'Cursor'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:40] <b2gills> m: grammar g { our token t { <[2]> } }; my $rname = "&g::t"; say so "2" ~~ /<{::($rname)}>/

[15:40] <camelia> rakudo-moar 4ef37c: OUTPUT¬´True‚ê§¬ª

[15:40] * mr_ron noticed people found time for Perl 7 ...

[15:41] <mr_ron> b2gills: thanks much

[15:41] * [Coke] doesn't think that's really a thing.

[15:41] <brokenchicken> It is! I'm working on it.

[15:43] <mr_ron> I think the technique is useful.  If no objection will look to document and add test(s?).

[15:44] <brokenchicken> I'm surprised that stuff even works

[15:44] <brokenchicken> m: grammar g { token t { <[2]> } }; dd g::t

[15:44] <camelia> rakudo-moar 4ef37c: OUTPUT¬´Could not find symbol '&t'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:44] <brokenchicken> ... yet you can access it from inside a grammar

[15:44] <mr_ron> m: grammar g { token t { <[2]> } }; say so "2" ~~ /<g::t>/

[15:44] <camelia> rakudo-moar 4ef37c: OUTPUT¬´True‚ê§¬ª

[15:44] <moritz> tokens are has-scoped

[15:44] <brokenchicken> moritz: what does that mean?

[15:44] <moritz> so <a::b> inside a regex is special[tm]

[15:45] <moritz> brokenchicken: it means they have the same lookup semantics as methods

[15:45] <moritz> they live in the method table, not the namespace

[15:45] <brokenchicken> moritz: OK, but why can some random regex look up a symbol in some other random grammar?

[15:46] <moritz> brokenchicken: because it's public

[15:46] <brokenchicken> OK

[15:52] *** ggoebel left
[15:56] <mr_ron> m:grammar g { our token t { <[2]> } }; say so "2" ~~/<&g::t>/; say so "2" ~~ /<g::t>/ #second one not work - problem

[15:56] <mr_ron> m: grammar g { our token t { <[2]> } }; say so "2" ~~/<&g::t>/; say so "2" ~~ /<g::t>/ #second one not work - problem

[15:56] <camelia> rakudo-moar 4ef37c: OUTPUT¬´True‚ê§No such method 't' for invocant of type 'g'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:57] <brokenchicken> https://github.com/perl7/perl7 :)

[15:57] *** kyan joined
[15:58] <brokenchicken> With the naming problem finally solved, all I need is a kickass logo, and I'm done!

[16:01] <b2gills> m: grammar g { token t { <[2]> } }; my $r-name = 'g::t'; my ($r-class,$r-method) = ($r-name ~~ /(.*)'::'(.*)/)[]¬ª.Str; say grammar :: is ::($r-class) {token TOP {<::($r-name)>}}.parse('2') # this >< close

[16:01] <camelia> rakudo-moar 4ef37c: OUTPUT¬´===SORRY!===‚ê§This type cannot unbox to a native string: P6opaque, QAST::Var‚ê§¬ª

[16:02] <b2gills> brokenchicken: seems a bit ... anemic

[16:02] *** jaguar007 left
[16:02] <jast> minimalism!

[16:03] *** kyan left
[16:04] <brokenchicken> b2gills: Perl 6 is too damn complex. So the obvious solution for Perl 7 is to make it as simple as possible.

[16:04] <brokenchicken> it can add, subtract, multiple, divide, and print strings. What else could you possibly want?

[16:05] <perigrin> brokenchicken: http://t06.deviantart.net/dwjaHECiFqRTw0e3vI6PNu-DT-8=/fit-in/700x350/filters:fixed_height(100,100):origin()/pre07/1d86/th/pre/f/2012/232/e/1/teffla_motivational_poster_by_tacogirl456-d5bur4p.jpg

[16:05] <perigrin> logo for you.

[16:05] <brokenchicken> eeewwww... TIP: do not leave your sandwiches over the weekend in company's fridge... There's a chance they'll smell like strawberries when you come back for them :(

[16:06] <jeek> but I like strawberries

[16:06] <perigrin> you know subtraction is just addition with negative numbers, and division is just multiplication with fractions ... so you could simplify the language by 40% there.

[16:08] <brokenchicken> perigrin: pffft.. That picture fails to learn from the suckage of Perl 6's logo. The most awesomest logo is "P7" in a bold solid font, inside a rectangle. That's the type of logos that managers like and clearly the language will be in top 5 langs of 2017 based on just logo alone.

[16:08] *** ggoebel joined
[16:08] <brokenchicken> Hm. Or maybe it's not strawberries and my sandwich just got bad? 

[16:09] <brokenchicken> Is 4 days too long a time to leave a sandwich in the fridge for :/

[16:09] <ugexe> throw some new bread on it

[16:09] <brokenchicken> Aint got any

[16:12] *** luiz_lha joined
[16:12] *** luiz_lha is now known as Guest47245

[16:13] <mr_ron> m: grammar g { token t { <[2]> } }; my $r-name = "t"; grammar g2 is g { token TOP { <t> } }; say g2.parse("2")

[16:13] <camelia> rakudo-moar 4ef37c: OUTPUT¬´ÔΩ¢2ÔΩ£‚ê§ t => ÔΩ¢2ÔΩ£‚ê§¬ª

[16:13] <mr_ron> m: grammar g { our token t { <[2]> } }; my $r-name = "t"; grammar g2 is g { token TOP { <t> } }; say g2.parse("2") # add our

[16:13] <camelia> rakudo-moar 4ef37c: OUTPUT¬´No such method 't' for invocant of type 'g2'‚ê§  in regex TOP at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:13] *** Guest47245 is now known as luiz_lha

[16:17] <brokenchicken> mr_ron: what does `our` do for methods/tokens?

[16:17] <brokenchicken> m: class Foo { our method bar { say "hi" } }; class Bar is Foo { method stuff { self.bar } }.stuff

[16:17] <camelia> rakudo-moar 4ef37c: OUTPUT¬´No such method 'bar' for invocant of type 'Bar'‚ê§  in method stuff at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:18] <brokenchicken> Doesn't work with normal methods either

[16:18] <mr_ron> I was looking at the suggestions from b2gills ...

[16:19] *** jaguar007 joined
[16:30] *** wamba joined
[16:31] <mr_ron> m: grammar g { token t { <[2]> } }; $rname = "g::t"; say so "2" ~~ /<::($rname)>/ # our scoping not answer, other ideas? rfc? rt?

[16:31] <camelia> rakudo-moar 4ef37c: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$rname' is not declared. Did you mean '&rename'?‚ê§at <tmp>:1‚ê§------> 3grammar g { token t { <[2]> } }; 7‚èè5$rname = "g::t"; say so "2" ~~ /<::($rna‚ê§¬ª

[16:31] <mr_ron> m: grammar g { token t { <[2]> } }; my $rname = "g::t"; say so "2" ~~ /<::($rname)>/ # our scoping not answer, other ideas? rfc? rt?

[16:31] <camelia> rakudo-moar 4ef37c: OUTPUT¬´No such method 'g::t' for invocant of type 'Cursor'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:32] <moritz> it doesn't like fully-qualified names with the <::()> syntax

[16:35] <mr_ron> I guess that's a "no".  As a last mention the use case I had was here: https://github.com/ronaldxs/Perl6-US-ASCII/blob/master/t/01-basic.t

[16:36] <moritz> m: grammar g { token t { <[2]> } }; my $rx = g.^find_method('t'); say so "2" ~~ /$rx/

[16:36] <mr_ron> It would be nice to repeat for each rule - is $latin-chars.comb(/<US-ASCII::alpha>/).join, %charset-str< alpha > # again for upper, lower, ...

[16:36] <camelia> rakudo-moar 4ef37c: OUTPUT¬´Type check failed in binding to <anon>; expected g but got Cursor (Cursor.new)‚ê§  in regex t at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:37] <mr_ron> s/to repeat/not to repeat/

[16:37] <moritz> m: grammar g { token t { <[2]> } }; my $rx = g.^find_method('t'); say so "2" ~~ /<$rx>/

[16:37] <camelia> rakudo-moar 4ef37c: OUTPUT¬´Type check failed in binding to <anon>; expected g but got Cursor (Cursor.new)‚ê§  in regex t at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:44] <brokenchicken> m: grammar g { token t(Any:) { <[2]> } }; my $rx = g.^find_method('t'); say so "2" ~~ /<$rx>/

[16:44] <camelia> rakudo-moar 4ef37c: OUTPUT¬´True‚ê§¬ª

[16:46] *** domidumont left
[16:47] <mr_ron> m: grammar g { token t(Any:) { <[2]> } }; my $rx = g.^find_method("t"); say so "2" ~~ /<g::t>/ # looks better

[16:47] <camelia> rakudo-moar 4ef37c: OUTPUT¬´True‚ê§¬ª

[16:51] *** lichtkind joined
[16:52] *** abraxxa left
[16:54] <mr_ron> m: grammar g { token t(Cursor:) { <[2]> } }; my $rx = g.^find_method("t"); say so "2" ~~ /<g::t>/; say so "2" ~~ /<$rx>/

[16:54] <camelia> rakudo-moar 4ef37c: OUTPUT¬´True‚ê§True‚ê§¬ª

[17:02] <mr_ron> So at this point it comes down to which is uglier ... adding (Cursor:) signatures to all the US-ASCII rules or leaving in the repetition for tests.

[17:03] *** agentzh joined
[17:08] <moritz> or using EVAL in the tests

[17:08] <moritz> m: grammar g { token t(Any:) { <[2]> } }; my $rx = g.^find_method("t"); say so "2" ~~ $rx

[17:08] <camelia> rakudo-moar 4ef37c: OUTPUT¬´True‚ê§¬ª

[17:08] <moritz> ... or using that :-)

[17:08] <moritz> mr_ron: ^^

[17:13] <brokenchicken> And now I have a kickass Perl 7 logo: https://github.com/perl7

[17:13] *** wamba left
[17:14] <brokenchicken> I guess I better write a book too. I heard that was a requirement for success.

[17:15] <moritz> it just doesn't pay well

[17:15] <moritz> instead you should publish courses on Pluralsight or whatever it's called

[17:16] <timotimo> i just set up syncthings to synchronize my ecosystem (i.e. checkouts of a bunch of modules), moarvm, nqp, and rakudo folders across my laptop and desktop

[17:19] <brokenchicken> moritz: so what was with people ++ you the other day with comment "book"? You finished your book?

[17:20] <timotimo> not finished

[17:20] <moritz> brokenchicken: I wish :-)

[17:20] <brokenchicken> So what were ++ about?

[17:20] <moritz> brokenchicken: propbably just because of an update, or general appreciation of the effort

[17:20] *** st_elmo joined
[17:20] <brokenchicken> Ah

[17:21] <brokenchicken> Well, when you're done, you can write one for Perl 7 :)

[17:21] <brokenchicken> It's the language of the Future!

[17:21] <moritz> speaking of which, selling copies before the book is finished is really motivating

[17:22] <moritz> 28 copies sold so far

[17:22] <brokenchicken> :o

[17:23] <moritz> and now a publisher has asked whether I'm interested in them adopting the book

[17:23] *** domidumont joined
[17:23] *** perlpilot joined
[17:23] * brokenchicken doesn't see a pre-order link on https://perl6book.com/

[17:23] <moritz> I guess I should update the website, eh? :-)

[17:23] <brokenchicken> :)

[17:23] *** agentzh left
[17:24] <moritz> https://leanpub.com/perl6

[17:25] <moritz> m: grammar g { token t { <[2]> } }; my $rx = g.^find_method("t"); say so "2" ~~ $rx

[17:25] <camelia> rakudo-moar 4ef37c: OUTPUT¬´Type check failed in binding to <anon>; expected g but got Cursor (Cursor.new)‚ê§  in regex t at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:25] *** espadrine_ joined
[17:28] *** sftp left
[17:28] * brokenchicken buys 1 copy of moritz's motivation

[17:28] *** sftp joined
[17:30] *** agentzh joined
[17:33] <moritz> brokenchicken++ thanks!

[17:34] <timotimo> cool

[17:36] *** kyan joined
[17:41] *** agentzh left
[17:47] *** dakkar left
[17:49] *** itcharlie left
[17:51] *** Actualeyes left
[17:53] *** jdoege joined
[17:54] <moritz> https://perl6book.com/ updated

[17:56] *** Actualeyes joined
[17:56] *** domidumont left
[18:01] *** luiz_lha left
[18:07] <mspo> can you add left: 0 to the content-wrapper if you're going to use it in splash-container?

[18:07] <mspo> FF has horiz scroll

[18:10] <brokenchicken> heh

[18:11] *** agentzh joined
[18:14] *** lukiramu joined
[18:15] *** agentzh left
[18:17] *** lukaramu left
[18:18] *** mr-foobar left
[18:20] <mspo> this is actually a common problem on firefox

[18:20] *** domidumont joined
[18:22] <brokenchicken> That's just margins on body. Any self-respecting web dev sets those to zero :)

[18:23] *** agentzh joined
[18:27] *** mr-foobar joined
[18:30] *** domidumont left
[18:30] <brokenchicken> TIL perl6 takes `--profile-compile` option :o

[18:31] <timotimo> yup

[18:31] <timotimo> that's a thing we've been hoping to be able to use with the core setting

[18:32] <timotimo> but it consistently generates profiles that are out of reach for the html profiler

[18:32] <timotimo> we can use the sql target, though

[18:32] <brokenchicken> neat

[18:33] <timotimo> i haven't played around with the sql target enough

[18:33] <timotimo> but it's a great addition to the whole thing

[18:38] *** domidumont joined
[18:39] *** agentzh left
[18:41] *** wamba joined
[18:44] <brokenchicken> How come my `method sign` actions don't get triggered? Here are the tokens: https://github.com/perl7/perl7/blob/master/src/perl7.nqp#L17-L23 and here are the actions: https://github.com/perl7/perl7/blob/master/src/perl7.nqp#L57-L67

[18:44] <brokenchicken> And here's the output when compiling üí¨ 2.4 √ó ‚àí2.5  https://gist.github.com/zoffixznet/9af07d053b25208d019005254d2034d9

[18:44] <brokenchicken> The sign matches, but its actions don't get executed? dafuq?

[18:46] *** trnh left
[18:46] *** jaguar007 left
[18:47] <jnthn> brokenchicken: 'cus you forgot the :sym in your grammaar

[18:48] <timotimo> might only be calling the proto tokens action method

[18:48] <jnthn> *grammar

[18:48] <jnthn> .oO( grammARGH! )

[18:48] <brokenchicken> oh damn :) I knew it had to be something dumb :)

[18:48] <El_Che> perl7? oh oh

[18:48] <brokenchicken> jnthn++

[18:48] <timotimo> ah, nideed

[18:50] <brokenchicken> El_Che: yup. I solved all the version and logo debates with a swift stroke of brilliance! :)

[18:50] *** FROGGS joined
[18:53] <mr_ron> How do I run a single roast test file with Rakudo perl6.  I know there is fudging involved. Using a rakudo repo and make m-sometests is a hacky way.  Anything better?

[18:53] <El_Che> brokenchicken: you must have been the 1st that thought of that :)

[18:54] <brokenchicken> mr_ron: well, the fudger lives in rakudo's repo

[18:54] <brokenchicken> mr_ron: I don't see what's hacky about it. Check out the roast to t/spec and you're good to roll

[18:54] <brokenchicken> mr_ron: make t/spec/some-test-file or t/fudgeandrun t/spec/some-test-file

[18:55] <brokenchicken> t/fudgeandrun /some/arbitrary/dir might work too

[18:55] <brokenchicken> t/fudgeandrun /some/arbitrary/dir/test-file.t might work too

[18:55] *** cdg_ joined
[18:58] *** cdg left
[18:58] <mr_ron> It seems odd to me that running roast tests depends on rakudo.  There is a $*VM variable and it seems hacky that you can't actually run any tests without the cooperation of the implimentation.

[18:59] <brokenchicken> You can.

[18:59] *** Actualeyes left
[18:59] <brokenchicken> The fudges just apply to rakudo. And just rakudo has a list of spectest files it runs. 

[19:00] <brokenchicken> Not sure what $*VM's got to do with anything.

[19:01] <brokenchicken> You can run the tests using implementation XYZ to your hearts content, without needing an ounce of rakudo.

[19:01] *** domidumont left
[19:01] <brokenchicken> And there's even a fudger in roast repo

[19:02] <brokenchicken> hah.. and a SUPER fudger too :)

[19:02] <mr_ron> working on answering you - 2 minutes please - yes saw fudge program in roast repo

[19:03] *** Actualeyes joined
[19:05] *** hartenfels joined
[19:07] <brokenchicken> and t/fudgeandrun is a tiny wrapper for roast's fudger. See what it calls and you don't need rakudo repo

[19:08] <brokenchicken> but 99.9999999999999% of time roast's tests are run for purposes of verifying rakudo they're run from a checkout in t/spec/ of rakludo's repo :)

[19:08] <brokenchicken> 2 minutes passed. You lied

[19:08] <TimToady> he didn't say he'd answer after 2 minutes

[19:08] <mr_ron> sorry - still working

[19:09] <brokenchicken> Oh, right. Fair enough.

[19:09] <brokenchicken> What happens after 2 minutes then?

[19:09] <TimToady> everything, now

[19:09] <TimToady> modulo simultanaeity considerations under relativity

[19:11] <TimToady> but, basically, everything in your downstream lightcone

[19:14] *** zakharyas left
[19:14] *** cdg joined
[19:17] *** cdg_ left
[19:19] <moritz> \o/ relativity

[19:21] <mr_ron> I was trying to run ./fudge and then "prove -eperl6" on the .rakudo and that still doesn't seem to work.  But fudge and perl6 on the .rakudo file seems to work.  Maybe need more familiarity with testing.

[19:21] *** cdg left
[19:25] <brokenchicken> .oO( what .rakudo file? )

[19:26] <brokenchicken> It's usually .rakudo.moar or .rakudo.jvm

[19:26] <brokenchicken> mr_ron: and what does doesn't work mean?

[19:28] <b2gills> whelp 103 days of uptime seems like enough, restarting to let updates finish. be back in a few

[19:30] <brokenchicken> If you're asking for help, saying doesn't work is like coming to the doctor and saying feel ill.

[19:30] <mr_ron> example S05-metasyntax/angle-brackets.t 

[19:30] <mr_ron> ./fudge rakudo S05-metasyntax/angle-brackets.t; prove -e perl6 S05-metasyntax/angle-brackets.rakudo

[19:31] <[Coke]> we used to run roast on niecza and pugs and rakudo.parrot and rakudo.moar and rakudo.jvm, so it does work across the board; each of those happened to follow the "checkout roast into t/spec to run it" model, but no reason why you couldn't have a pre-installed compiler you were testing against.

[19:32] <[Coke]> in rakudo, you can "make t/spec/sec/file.t", also, or "prove -v -e t/fudgeandrun t/spec/sec/file.t" or "prove -v -e t/fudgeandrun sec/file.t"

[19:32] *** b2gills joined
[19:32] <[Coke]> no reason why t/fudgeandrun couldn't be moved into roast and generalized.

[19:33] * [Coke] hopes that the perl7 repo doesn't causes any negative publicity. :)

[19:33] <mr_ron> brokenchicken is mostly right - it runs more often than I thought for rakudo.  Not so many files break on rakudo.  I may have just happened to hit them.

[19:34] <brokenchicken> [Coke]: all publicity is good publicity ;)

[19:34] <[Coke]> not every file in roast works on rakudo. that's what t/spectest.data is for

[19:35] <[Coke]> brokenchicken: in that case, best wishes to you. :)

[19:36] <brokenchicken> mr_ron: huh. Weird. Seems ./fudge is adding exit(1) at the end :S

[19:36] <brokenchicken> Which of course makes harness think there've been failures

[19:37] * brokenchicken looks closer at code

[19:37] <[Coke]> brokenchicken: you can change the -exit code with fudge.

[19:37] <[Coke]> --keep-exit-code

[19:38] *** domidumont joined
[19:38] <brokenchicken> aha

[19:38] *** kent\n joined
[19:39] <brokenchicken> mr_ron: so it's ./fudge --keep-exit-code rakudo S05-metasyntax/angle-brackets.t && prove6 -eperl6 S05-metasyntax/angle-brackets.rakudo

[19:40] *** lichtkind_ joined
[19:42] <brokenchicken> err s/prove6/prove/

[19:44] *** lichtkind left
[19:45] <brokenchicken> .oO( Who's Avi Ranawat? )

[19:46] <[Coke]> brokenchicken: t/fudgeandrun makes that simpler.

[19:46] * brokenchicken is being paranoid again, I guess.

[19:46] <brokenchicken> [Coke]: yeah, but mr_ron didn't want to have Rakudo repo checked out, from what I understood

[19:47] <[Coke]> note that there's no guarantee that the file you get is a .rakudo - no fudges == .t

[19:47] *** toolforger joined
[19:47] <[Coke]> (right, maybe it makes sense to put this helper (which someone probably stole from pugs) into roast.

[19:47] <mr_ron> I cloned roast and started adding some test files.  I was trying to figure out how to run the new tests.  I saw the fudge program in the roast readme.

[19:48] *** AlexDaniel left
[19:48] <toolforger> Heh. I had the exactly same problem this morning

[19:48] <toolforger> I have roast, I have moarvm, nqp, and rakudo installen - but how am I supposed to run the tests?

[19:48] <toolforger> I feel so dumb...

[19:50] <brokenchicken> Well, I someone wanted to make contributing.perl6.org

[19:50] <brokenchicken> Or Contribute.Perl6.Org

[19:50] <brokenchicken> https://github.com/perl6/contribute/blob/master/DESIGN.md

[19:52] *** girafe joined
[19:53] <brokenchicken> But I kinda lost steam on that one with the "when in doubt; merge it" comment 

[19:54] <brokenchicken> https://irclog.perlgeek.de/perl6-dev/2016-12-12#i_13725404

[19:54] <brokenchicken> 'cause I strongly disagree with that and I don't want to open flodgates of crappy PRs that get merged just because they're there :/

[19:58] *** CIAvash left
[19:59] <mr_ron> Coke: fudgeandrun depends on the rakudo directory structure but with just a few changes it works for roast.  Ok to make roast issue and try to add changed fudgeandrun?

[20:00] * brokenchicken would rather not touch what ain't broken.

[20:00] <brokenchicken> This is build stuff that's prolly used downstream.

[20:02] <moritz> brokenchicken: I see no evidence for that in perl6-all-modules

[20:03] <moritz> moritz@hack:~/p6/perl6-all-modules$ git grep fudgeandrun|wc -l

[20:03] <moritz> 0

[20:03] <[Coke]> "when in doubt merge it" is the wrong approach in most of our repos, yes.

[20:03] <[Coke]> mr_ron: that seems reasonable to me,

[20:04] <brokenchicken> moritz: that's just modules. I mean people who distribute rakudo. Including our own stuff: Rakudo Star and NeuralAnomaly release bot. 

[20:04] <brokenchicken> I mean that if we're *moving* fudgeandrun to roast repo

[20:04] <moritz> brokenchicken: doesn't seem to be used in star either

[20:05] <toolforger> brokenchicken, did you read the follow-up messages? seems like the "when in doubt, merge it" philosophy isn't a thing

[20:05] <mr_ron> thanks ...

[20:05] <brokenchicken> toolforger: I don't see that.

[20:06] <toolforger> well, the idea gets some flak, then the discussion moves on

[20:06] <toolforger> most responses are sarcasm and/or irony I think

[20:06] <brokenchicken> I see two people joking around about the idea then *me* saying it's a bad idea and the discussion moves on.

[20:06] <brokenchicken> And the discussion started when a broken PR got merged.

[20:07] <toolforger> erm... which of the participants was you?

[20:07] <brokenchicken> And it happened more than once that a rakudo/perl6 repo had comments on it, proposing improvements, but it silently got merged by another contributor.

[20:08] <brokenchicken> by silently I mean ignoring or missing those comments.

[20:08] <toolforger> somehow Perl6 isn't utterly broken though

[20:09] *** Actualeyes left
[20:09] <toolforger> not that I'm particularly fond of such a philosophy myself, but then that's just me

[20:10] <brokenchicken> Utterly broken isn't the outcome of trigger-happy merging. Warts and bugs and half-assed solutions are.

[20:12] <toolforger> Until somebody comes along and fixes that. Linux works that way, too, and it's not really worse than most other OSes when it comes to having half-assed solutions. I guess it's a way to speed up development, in the knowledge that if it's really bad than that will scratch somebody's itch and eventually get solved.

[20:12] <toolforger> Of course, over time, such an approach can kill a code base

[20:13] <toolforger> OTOH both Linux and Perl6 are famous for scrapping entire codebases, but salvaging the experience gained and building somthing better on top of that experience

[20:13] <brokenchicken> ouch

[20:13] <[Coke]> toolforger: ... we may have done that historically, it's not something we're planning on repeating. :)

[20:14] <toolforger> you *never* plan on scrapping a codebase :-)

[20:15] *** jayk joined
[20:15] <jayk> are there any perl coders 4 hire?

[20:16] <moritz> jayk: my experience in Germany shows that there are good ones for hire, but not cheap

[20:16] <jeek> jayk: Try jobs.perl.org

[20:16] *** kurahaupo__ is now known as kurahaupo

[20:16] <jayk> i have a small problem probably take 15 minutes

[20:17] <brokenchicken> toolforger: I'm not convinced at all by "speed up development" argument in this case. You get first half-assed solution faster, but you lose all the saved time on debugging and rewriting good solution. It took me over an hour to debug this hack before I realized it lets execute arbitrary code within pod and works only half the time for the purpose it was meant to do:

[20:17] <brokenchicken> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Pod.nqp#L131-L145

[20:17] <brokenchicken> toolforger: and on top of that lost debugging time, the feature is back on the drawing board, where we try to remember if it ever meant to let run arbitrary code in the first place: https://rt.perl.org/Ticket/Display.html?id=130477#ticket-history

[20:18] <brokenchicken> And once that design debate is over, the feature will have to be reimplemented.

[20:18] <toolforger> Sure.

[20:18] * toolforger has reimplemented more things in his life than he cares to remember

[20:18] <brokenchicken> toolforger: and since it half-works now, there's no motivation to actually fix it. And so, the half-assed wart lives on :)

[20:18] * toolforger also remembers a lot of cases where he couldn't have done the good design before trying the straighforward (but bad one) first

[20:18] *** domidumont left
[20:19] *** Cabanoss- joined
[20:19] <toolforger> "Experience is the sum of mistakes made." Not entirely true, but more true than many people would like.

[20:19] <brokenchicken> jayk: so why not learn to do it yourself?

[20:19] *** flexibea` joined
[20:20] <jayk> i've tried for a month

[20:20] <jayk> i give up

[20:20] <brokenchicken> hah

[20:20] <jayk> the modules im using are broken

[20:20] *** jonas1 left
[20:20] <brokenchicken> jayk: so how do you know it'd take 15 minutes? :)

[20:20] *** bjz joined
[20:20] <jayk> or they don't work right

[20:20] <brokenchicken> jayk: what is it anyway?

[20:21] <jayk> async web/proxy checker

[20:21] <jayk> with mojo it is too slow

[20:21] <brokenchicken> jayk: which mojo? mojolicious.org?

[20:21] *** flexibeast left
[20:21] <jayk> anyevent::http or net::async::http might work, but im having issues

[20:21] <jayk> yes mojolicous

[20:22] <brokenchicken> jayk: ah, you're in the wrong channel :) You want #perl  This is a related but different language Perl 6.

[20:22] <moritz> IME, nothing with async in p5 ever takes only 15 minutes to develop :-)

[20:22] <brokenchicken> jayk: and I highly doubt we have any easy solutions that would be faster than mojo

[20:22] *** FROGGS left
[20:22] *** Cabanossi left
[20:22] *** Cabanoss- is now known as Cabanossi

[20:22] <jayk> mojo didnt work well with async requests

[20:23] <brokenchicken> weird, I had the impression it rocked with them

[20:23] <jayk> i want to process 500 URLs asyncronously, wait 3 seconds, and process another 500

[20:23] <jayk> it doesn work well with the URLs are broken or don't exist

[20:23] <brokenchicken> What you need this stuff for anyway?

[20:24] <jayk> its a proxy checker

[20:24] <jayk> for a lot of hings

[20:24] *** Tonik joined
[20:24] <brokenchicken> Well, all good, but as I've said, Perl 6 is a different language.

[20:24] <brokenchicken> Did you want to install it or.. ?

[20:25] *** mr_ron left
[20:25] <jayk> its written to use a module and it'll work if its not done asyncronously

[20:25] *** zakharyas joined
[20:25] *** Actualeyes joined
[20:25] <jayk> the biggest problem im running into now its a broken module

[20:25] <jayk> the module itself needs to be fixed 

[20:25] *** pyrimidine left
[20:26] <jayk> it'll run through just fine until it hits a bad URL, and the whole program quits

[20:26] *** pyrimidine joined
[20:26] <brokenchicken> heh

[20:27] <brokenchicken> How much you're paying anyway?

[20:27] <mspo> jayk: ask in #mojo

[20:27] <mspo> or #perl

[20:27] <jayk> id pay up to $100 to fix it

[20:28] <brokenchicken> cool

[20:28] <jayk> #perl sent me to jobs.perl..org

[20:28] <brokenchicken> haha

[20:28] <jayk> i think those guys are looking for bigger programs

[20:28] <mspo> can you ask a direct question instead?

[20:29] <brokenchicken> Wasn't there some freelance site just for this sort of stuff?

[20:29] <jayk> my question was to just find someone to fix my stupid proxy checker, or rewrite it to use a module that works

[20:29] <jayk> yeah freelancer

[20:29] <brokenchicken> Amazon Turks or something or other

[20:29] <jayk> i can do that it just seemed like id be easier to bitcoin someone $100 bucks

[20:29] <brokenchicken> Which module is broken?

[20:29] <jayk> net::async::http

[20:30] <jayk> i already submitted a bug request

[20:30] <jayk> there are several  problems with that module

[20:30] *** mr_ron joined
[20:30] <jayk> i had to use 2 patches to get as far as i did, and then ran into a 3rd problem that doesn't have a fix

[20:30] *** pyrimidine left
[20:31] *** mr-foobar left
[20:32] <toolforger> monster.com used to be a freelancing portal

[20:32] <toolforger> I think there are others nowadays

[20:32] <brokenchicken> .oO( for @urls.rotor(500) { await .map: {say HTTP::UserAgent.new.get($_).status-line}; sleep 3 } ...)

[20:32] <jayk> is that perl6?

[20:33] <brokenchicken> jayk: well, as I've mentioned. Perl 6 is a different language. We don't fix Perl 5 modules. The majority here probably doesn't even know Perl 5, so... you may be more productive looking at other places.

[20:33] <jayk> how long has perl6 been in development?

[20:33] <brokenchicken> jayk: yeah, that's Perl 6 version of doing 500 urls each time, waiting for them to finish and sleeping 3 seconds.

[20:34] <mspo> jayk: 10 years?

[20:34] <brokenchicken> jayk: the first production release was December 2015. That was preceeded by 15 years of designs and redesigns

[20:34] <jayk> wow

[20:34] <mspo> 15 years

[20:34] <brokenchicken> Yeah. If it's worth doing, better do it right ;)

[20:35] <jayk> its a lot like ipv6 then, solving a need that needs to happen but difficult to fully implement?

[20:35] *** mr-foobar joined
[20:35] <brokenchicken> No idea. I was here only since production release :)

[20:35] <moritz> yes

[20:35] <jayk> heh

[20:35] <moritz> also with a well-working status quo

[20:35] <moritz> the analogy is apt

[20:38] <diakopter> well, with a pretty flexible definition of "implement"

[20:38] <moritz> right; good that we're all mentally flexible :-)

[20:41] <toolforger> Asking again

[20:41] <toolforger> I have rakudo installed; how do I run roast to test it?

[20:41] <brokenchicken> Good thing Perl 7 was easy to implement :D

[20:41] <brokenchicken> toolforger: installed how?

[20:42] <toolforger> locally

[20:42] <toolforger> in a subdirectory

[20:42] <brokenchicken> toolforger: like built from a checkout?

[20:42] <toolforger> I have a shell script that puts it in $PATH :-)

[20:42] <toolforger> yes, fresh from git

[20:42] <toolforger> s/git/github/

[20:42] <brokenchicken> toolforger: run make stresstest in that dir

[20:42] <brokenchicken> toolforger: run TEST_JOBS=8 make stresstest in that dir

[20:42] *** mr_ron left
[20:43] <toolforger> :-)

[20:43] <toolforger> I see

[20:43] <brokenchicken> where TEST_JOBS = ($num-of-cores * 1.3).Int

[20:43] <brokenchicken> toolforger: also, there's make spectest

[20:43] <toolforger> Do I need a git clone of roast?

[20:43] <brokenchicken> spectest is about 56K of top-level tests and stresstest is about 130K top-level tests

[20:43] <brokenchicken> It'll do it for you

[20:43] <toolforger> Um

[20:44] <brokenchicken> But you can clone it to t/spec if you want (say if you want to work on your fork)

[20:44] <toolforger> I am offline pretty often, so automatic background downloads aren't ideal for me

[20:44] <brokenchicken> OK. Just check it out to there

[20:44] <brokenchicken> It'll try to fetch updates to it tho

[20:45] <toolforger> For now, an extra download is fine though... let me try

[20:45] <brokenchicken> You can probably see what it runs and run your own command that excludes git pull

[20:46] <toolforger> so I run the make command inside the rakudo source dir?

[20:46] <brokenchicken> yeah

[20:46] <toolforger> I want to hack on the jvm port, so that means I'll need to run spectest, and possibly stresstest

[20:47] <brokenchicken> .tell mr_ron now that I remember more specific test files, a lot of them depend on the test file located in t/spec. This is used for auxiliary files locations for some test files, like module loading ones, and the ones that include t/spec/packages

[20:47] <yoleaux> brokenchicken: I'll pass your message to mr_ron.

[20:48] <brokenchicken> toolforger: hehe, well, be sure to pack a lunch :)

[20:48] <toolforger> Oh. It's complaining that Inline::Perl6 is not installed.

[20:48] <brokenchicken> huh

[20:48] <toolforger> s/6/5/

[20:48] <brokenchicken> toolforger: are you sure it's not just a warning about Inline::Perl*5*?

[20:48] <toolforger> sorry

[20:48] <brokenchicken> Yeah, it'll skip Perl 5 compatibility tests if Inline::Perl5 ain't installed

[20:49] <brokenchicken> I just copy-paste step 12 of the release guide to install it: https://github.com/rakudo/rakudo/blob/nom/docs/release_guide.pod

[20:49] <brokenchicken> But there are probably several saner ways to do it

[20:49] <toolforger> When would I need to worry about Inline::Perl5?

[20:50] * brokenchicken doesn't follow the question

[20:50] <toolforger> it's skipping Perl5 integration tests

[20:50] <brokenchicken> Right

[20:50] <toolforger> I'm not sure whether I should worry about that

[20:50] <brokenchicken> You can pop open t/spectest.data in rakudo's repo and find the ones marked as perl 5

[20:50] <brokenchicken> And see what they are. 

[20:50] <brokenchicken> But they're about Perl 5 compatibility....

[20:51] <toolforger> Aaah... right, there's that compatibility mode

[20:51] <toolforger> I guess I want that

[20:52] <toolforger> I want to tinker with JVM classfile generation, and Perl5 stuff wants an extra jar so I'll want to catch if anything goes missing

[20:55] <toolforger> off into sunset - seeya!

[20:55] *** toolforger left
[20:57] *** sena_kun left
[21:01] *** jdoege left
[21:02] *** Actualeyes left
[21:06] *** integral joined
[21:06] *** integral left
[21:06] *** integral joined
[21:11] *** Tonik left
[21:18] *** TEttinger joined
[21:18] *** bjz left
[21:19] *** Actualeyes joined
[21:21] <raiph> m: role A { method m {} }; role B does A {}; class C does A does B {} # golf of bdfoy's recent SO Q

[21:21] <camelia> rakudo-moar 5db0b2: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Method 'm' must be resolved by class C because it exists in multiple roles (B, A)‚ê§at <tmp>:1‚ê§¬ª

[21:22] <raiph> At least LTA; I don't understood this problem yet; I didn't find an RT for it; any comments before I investigate/RT it appreciated

[21:28] *** pyrimidine joined
[21:31] <RabidGravy> it's actually described in the docs somewhere

[21:32] <moritz> still looks like a bug to me

[21:33] *** st_elmo left
[21:35] <lizmat> raiph: also RT #130634

[21:35] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130634

[21:36] <raiph> RabidGravy: is the LTA "exists in multiple roles (B,A)" due to role punning?

[21:37] <raiph> lizmat: thanks

[21:37] *** Sgeo_ joined
[21:38] *** Sgeo left
[21:39] <RabidGravy> not sure if it's punning, it's just that as it stands it's too late to know that m came from the same place when the roles are composed into C

[21:43] *** Actualeyes left
[21:43] <moritz> a method that's copied to another role or class could carry a reference to the original to make this detection work

[21:43] <RabidGravy> yes I was wondering whether it could

[21:44] <lizmat> I think a =:= comparison should do the trick, really

[21:45] <RabidGravy> anyway I've fixed and tested all my modules that have a Build.pm so that they work with zef

[21:45] <RabidGravy> which is all good

[21:47] *** bjz joined
[21:50] *** bjz left
[21:54] <raiph> thanks all

[21:59] <raiph> I want to add a followup comment to rt #130634

[21:59] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130634

[22:00] <raiph> I know I send an email to [email@hidden.address]
[22:00] <raiph> Do I just have to put #130634 in the subject to send my email to that bug?

[22:00] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130634

[22:01] <raiph> Heh, just instinctively typed rt.com to get help for rt...

[22:01] <samcv> what is $*DISTRO on macos?

[22:03] <lizmat> samcv: you want dd or say output  (aka, .perl or .gist) ?

[22:03] <samcv> i want to programmatically determine if running on macos

[22:04] <samcv> that's all i need

[22:04] <[Coke]> samcv: $ perl6 -e 'say $*DISTRO'

[22:04] <[Coke]> macosx (10.12.2)

[22:04] <lizmat> $ 6 'say $*DISTRO eq "macosx"'

[22:04] <lizmat> True

[22:04] *** cdg joined
[22:05] *** cdg left
[22:05] <brokenchicken> Would be handy to have the fullish list of possible values, unless we got it in docs alrteady.

[22:05] *** cdg joined
[22:05] <samcv> it's determined by the running os though?

[22:05] <samcv> idk for mine  say $*DISTRO eq 'arch' #> True

[22:06] <brokenchicken> for mine say $*DISTRO eq "ubuntu" #> True

[22:06] <brokenchicken> There's bunch of system calls in https://github.com/rakudo/rakudo/blob/nom/src/core/Distro.pm

[22:08] <RabidGravy> yeah, it rather annoyingly uses "uname" on Unix-like system

[22:10] <lizmat> raiph: my attempt so far: https://gist.github.com/lizmat/1badd87639f599e73fdddfecf6ed1ca5

[22:11] <samcv> well it's called $*DISTRO :P

[22:11] <samcv> it tells you the distro ;)

[22:15] *** ChoHag left
[22:16] *** Cabanoss- joined
[22:16] <jnthn> The role collision problem some of you are looking at/discussing has an important subtlety

[22:16] <jnthn> That any solution must take into account

[22:16] *** skids left
[22:16] *** wamba left
[22:16] *** cdg_ joined
[22:17] <jnthn> Roles are generic and may take extra parameters

[22:17] <brokenchicken> hmmm... a PayPal phishing email arrived right about the time I paid by PayPal on leanpub...

[22:17] <jnthn> Consider `role Foo[::T] { method bar(T $x) { } }`

[22:17] *** cdg left
[22:17] <jnthn> We concretize methods at composition time.

[22:17] *** Cabanossi left
[22:17] *** Cabanoss- is now known as Cabanossi

[22:17] <jnthn> This explains why =:= isn't going to work

[22:18] <jnthn> The method that ends up in the class is a concrete rather than a generic

[22:18] <jnthn> Since all methods are generic on ::?CLASS, and we have to instantiate that type variable when we compose. 6 years back when we didn't do that, we got various multi-dispatches really wrong.

[22:19] <Geth>  doc/master: 15 commits pushed by coke++

[22:19] <Geth>  doc/master: review: https://github.com/perl6/doc/compare/cfcfe5dce4...4516551d37

[22:19] *** Actualeyes joined
[22:19] <jnthn> Clearly, it's fine if a method that's *only* generic on the invocant is considered non-colliding

[22:19] <jnthn> A method that's got a signature that's otherwise generic, less so.

[22:20] *** zakharyas left
[22:20] <jnthn> So we'll need to consider the signature of the generic method and see if it contains any genericity besides on the usual ::?CLASS

[22:23] <jnthn> It's tempting to do it somehow use .static_id on a code object, but I fear that will spoil somebody's meta-programming day in the future...

[22:23] <jnthn> And it can only be done in combination with the generics checks anyway.

[22:25] <Geth>  doc: 0dfdcc2556 | (Will "Coke" Coleda)++ | doc/Programs/00-running.pod6

[22:25] <Geth>  doc: use nbsp

[22:25] <Geth>  doc: review: https://github.com/perl6/doc/commit/0dfdcc2556

[22:25] *** cdg joined
[22:29] *** ChoHag joined
[22:29] *** cdg_ left
[22:37] *** jameslenz left
[22:39] *** lukiramu left
[22:42] *** kurahaupo left
[22:43] *** kurahaupo__ joined
[22:43] *** kurahaupo__ left
[22:43] *** ChoHag left
[22:45] *** ChoHag joined
[22:48] *** dataf3l left
[22:57] *** perlpilot left
[23:03] *** pyrimidine left
[23:05] *** cdg_ joined
[23:08] *** cdg left
[23:11] *** Cabanossi left
[23:12] *** Cabanossi joined
[23:19] *** cdg joined
[23:22] *** cdg_ left
[23:28] *** felher left
[23:30] *** felher joined
[23:31] <Geth>  doc: a73747f62e | (Will "Coke" Coleda)++ | doc/Language/modules.pod6

[23:31] <Geth>  doc: clarify toolchain reference

[23:31] <Geth>  doc: 

[23:31] <Geth>  doc: Closes #1136

[23:31] <Geth>  doc: review: https://github.com/perl6/doc/commit/a73747f62e

[23:34] *** dataf3l joined
[23:39] *** cdg left
[23:42] *** cdg joined
[23:43] *** zdenek joined
[23:47] *** Actualeyes left
[23:50] *** espadrine_ left
[23:56] <jdv79> Cannot call method 'package_at_key' on a null object

[23:56] <jdv79> any ideas on what that means?

[23:58] <brokenchicken> something with EXPORT sub?

