[00:01] *** Ben_Goldberg joined
[00:01] *** BenGoldberg left
[00:01] *** Ben_Goldberg is now known as BenGoldberg

[00:26] *** girafe left
[00:26] * notviki is amused by the two Perl 4 posts on r/perl

[00:26] <notviki> Yes, 4

[00:32] <b2gills> To be fair, I have seen a lot of people write code that looks like Perl 4 on Stackoverflow

[00:37] <sammers> hello #perl6

[00:37] <notviki> \o

[00:46] *** newbie1 left
[00:56] *** Actualeyes joined
[00:57] *** kurahaupo__ joined
[00:58] <sammers> anyone have a good .vimrc for p6 that I can take a look at?

[01:02] *** sufrostico joined
[01:07] <gfldex> samcv: bigpage ends up at https://docs.perl6.org/perl6.xhtml and it's intended use is full text search and other QA stuff on the resulting html, printing is just a side effect

[01:09] *** espadrine left
[01:10] *** kent\n left
[01:10] <gfldex> samcv: if you want to print it with a reasonable font size, bring 500 sheets of paper :)

[01:12] *** olinkl left
[01:12] *** romrador left
[01:12] *** erdic left
[01:12] *** webstrand left
[01:12] *** ShoaibJahejo left
[01:12] *** kshannon_ left
[01:12] *** ambs left
[01:12] *** spider-mario left
[01:12] *** SHODAN left
[01:12] *** Possum left
[01:12] *** rightfold left
[01:12] *** cosimo_ left
[01:12] *** adrusi left
[01:12] *** mithaldu_ left
[01:12] *** TeamBlast left
[01:12] *** BinGOs left
[01:12] *** mindos left
[01:12] *** amalia__ left
[01:12] *** notbenh_ left
[01:12] *** BinGOs_ joined
[01:12] <notviki> weeeeeeeeeeee

[01:12] *** kshannon joined
[01:12] *** yubimusubi joined
[01:12] *** SHODAN joined
[01:12] *** rodarmor joined
[01:12] *** adrusi joined
[01:12] *** webstrand joined
[01:12] *** cosimo joined
[01:12] *** erdic_ joined
[01:13] *** ShoaibJahejo joined
[01:13] *** kent\n joined
[01:13] *** ambs joined
[01:13] *** erdic_ is now known as erdic

[01:13] *** spider-mario joined
[01:13] *** TeamBlast joined
[01:15] *** amalia__ joined
[01:15] *** aborazmeh joined
[01:15] *** aborazmeh left
[01:15] *** aborazmeh joined
[01:16] *** bpmedley joined
[01:17] *** mindos joined
[01:18] *** geraud left
[01:18] *** rightfold joined
[01:18] *** mithaldu_ joined
[01:21] *** olinkl joined
[01:23] *** sufrostico left
[01:23] *** tbrowder left
[01:23] *** ilmari left
[01:23] *** xiaomiao left
[01:23] *** avalenn left
[01:23] *** obra left
[01:23] *** jantore left
[01:23] *** Woodi left
[01:23] *** UgJkA left
[01:23] *** Charlie left
[01:23] *** jkva left
[01:23] *** [particle] left
[01:23] *** sunnavy left
[01:23] *** roguelazer left
[01:23] *** JimmyZ left
[01:23] *** Woodi joined
[01:23] *** jantore joined
[01:23] *** sunnavy joined
[01:23] *** xiaomiao joined
[01:23] *** ilmari joined
[01:23] *** JimmyZ joined
[01:23] *** [particle] joined
[01:24] *** obra joined
[01:24] *** avalenn joined
[01:25] *** roguelazer joined
[01:25] *** Charlie joined
[01:25] *** BinGOs_ is now known as BinGOs

[01:26] *** BinGOs left
[01:26] *** BinGOs joined
[01:26] *** sufrostico joined
[01:26] *** aborazmeh left
[01:27] *** ugjka joined
[01:28] *** Peter_R joined
[01:28] *** jkva joined
[01:28] *** tbrowder joined
[01:33] *** notbenh_ joined
[01:33] *** Ben_Goldberg joined
[01:33] *** BenGoldberg left
[01:33] *** Ben_Goldberg is now known as BenGoldberg

[01:54] *** mulk[m] joined
[02:00] *** sufrostico left
[02:13] *** azertus joined
[02:18] *** geraud joined
[02:22] *** stux|RC joined
[02:30] *** kalkin- joined
[02:34] *** kalkin-_ left
[02:35] <timotimo> re-ran the travis hook for json_fast and it succeeded this time, yay

[02:40] *** dalek left
[02:42] *** kipd left
[02:42] *** jnap_ left
[02:43] *** mephinet left
[02:44] *** jnap_ joined
[02:45] *** mulk[m] left
[02:45] *** JimmyZ left
[02:45] *** solarbunny left
[02:45] *** solarbunny joined
[02:45] *** dalek joined
[02:45] *** ChanServ sets mode: +v dalek

[02:45] *** JimmyZ joined
[02:46] *** ilbot3 left
[02:46] *** mulk[m] joined
[02:47] *** wictory[m] joined
[02:48] *** stux|RC-only left
[02:48] *** tadzik joined
[02:48] *** mephinet joined
[02:50] *** ilbot3 joined
[02:50] *** kipd joined
[02:51] *** jraglin left
[02:54] *** sftp left
[02:54] *** tbrowder left
[02:54] *** tbrowder joined
[02:55] *** kaare_ left
[02:57] <AlexDaniel> m: use nqp; my @a = 25, 50, 60; say nqp::atpos_i(@a, 2)

[02:57] <camelia> rakudo-moar fbbe44: OUTPUT«This type (Array) does not support positional operations␤  in block <unit> at <tmp> line 1␤␤»

[02:57] <AlexDaniel> can't do that, right?

[02:58] <timotimo> yeah, you need to get at its $!storage

[02:58] <timotimo> or $!reified

[03:04] *** sftp joined
[03:07] <SmokeMachine> m: sub bla(--> Seq[Capture]) {gather {take \(42)}}; bla # how can I set the return?

[03:07] <camelia> rakudo-moar fbbe44: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while parameterizing Seq␤at <tmp>:1␤Exception details:␤  5===SORRY!5=== Error while compiling <tmp>␤  Seq cannot be parameterized␤  at <tmp>:1␤  ------> 3sub bla(--> Se…»

[03:08] *** M-Illandan joined
[03:08] <SmokeMachine> m: sub bla(--> Positional[Capture]) {gather {take \(42)}}; bla # how can I set the return?

[03:08] <camelia> rakudo-moar fbbe44: OUTPUT«Type check failed for return value; expected Positional[Capture] but got Seq ((\(42),).Seq)␤  in sub bla at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:08] <AlexDaniel> SmokeMachine: what is the problem you are trying to solve?

[03:09] <SmokeMachine> AlexDaniel: I want to say that my function returns a Seq with Captures...

[03:10] <SmokeMachine> AlexDaniel: I just want to make my pod looks good...

[03:10] <timotimo> i don't think we have anything that'd let you express that properly (i.e .in a way that'll also be checked)

[03:11] <SmokeMachine> AlexDaniel https://www.irccloud.com/pastebin/KFHSavJL/

[03:12] <SmokeMachine> once on docs you guys changed the "returns" to "-->" wouldn't be a good idea change that to on pods?

[03:12] <AlexDaniel> well, if it says that Seq cannot be parameterized, then I guess it is so :(

[03:12] <SmokeMachine> and Seq isn't a Positional too, write?

[03:12] <SmokeMachine> right? (sorry)

[03:13] <AlexDaniel> m: sub bla(--> Iterable[Capture]) {gather {take \(42)}}; say bla

[03:13] <camelia> rakudo-moar fbbe44: OUTPUT«Type check failed for return value; expected Iterable[Capture] but got Seq ((\(42),).Seq)␤  in sub bla at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:15] <SmokeMachine> m: sub bla(--> Iterable[Capture]) {gather {take \(42)}}; bla # how can I set the return?

[03:15] <camelia> rakudo-moar fbbe44: OUTPUT«Type check failed for return value; expected Iterable[Capture] but got Seq ((\(42),).Seq)␤  in sub bla at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:15] <AlexDaniel> this stupid error message again

[03:15] <AlexDaniel> m: sub bla(--> Int + 1) { 42 }; say bla

[03:15] <camelia> rakudo-moar fbbe44: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Type 'Int' is not declared. Did you mean 'int'?␤at <tmp>:1␤------> 3sub bla(--> Int7⏏5 + 1) { 42 }; say bla␤»

[03:16] *** rpburkholder left
[03:16] <SmokeMachine> Type check failed for return value; expected Iterable[Capture] but got Seq ((\(42), \(42), \(42),...) :( :(

[03:17] <SmokeMachine> m: say gather {take \(42)} ~~ Iterable

[03:17] <camelia> rakudo-moar fbbe44: OUTPUT«True␤»

[03:17] <SmokeMachine> m: say gather {take \(42)} ~~ Iterable[Capture]

[03:18] <camelia> rakudo-moar fbbe44: OUTPUT«False␤»

[03:18] <SmokeMachine> why?!

[03:18] *** TEttinger joined
[03:18] <SmokeMachine> m: \(42) ~~ Capture

[03:18] <camelia> rakudo-moar fbbe44: ( no output )

[03:18] <SmokeMachine> m: say \(42) ~~ Capture

[03:18] <camelia> rakudo-moar fbbe44: OUTPUT«True␤»

[03:18] <SmokeMachine> m: sub bla(--> Iterable) {gather {take \(42)}}; bla # better than Mu...

[03:19] <camelia> rakudo-moar fbbe44: ( no output )

[03:19] <notviki> SmokeMachine: because it's not parametarized but just a normal seq with a capture in it

[03:19] <SmokeMachine> notviki: any way to make that work?

[03:19] <notviki> Don't parametarize it?

[03:20] <SmokeMachine> notviki: yes...I think thats the way...

[03:21] <notviki> m: say Array[Capture](gather {take \(42)}) ~~ Positional[Capture]

[03:21] <camelia> rakudo-moar fbbe44: OUTPUT«True␤»

[03:21] <SmokeMachine> m: sub bla(--> Int where * %% 2) {2}; bla

[03:21] <camelia> rakudo-moar fbbe44: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Type 'Int' is not declared. Did you mean 'int'?␤at <tmp>:1␤------> 3sub bla(--> Int7⏏5 where * %% 2) {2}; bla␤»

[03:22] <notviki> m: subset Even of Int where * %% 2; m: sub bla(--> Even) {2}; bla

[03:22] <camelia> rakudo-moar fbbe44: ( no output )

[03:23] <SmokeMachine> m: sub bla(--> Iterable where {.all ~~ Capture}) {gather {take \(42)}}; bla

[03:23] <camelia> rakudo-moar fbbe44: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Type 'Iterable' is not declared␤at <tmp>:1␤------> 3sub bla(--> Iterable7⏏5 where {.all ~~ Capture}) {gather {take ␤»

[03:24] <SmokeMachine> m: subtype Iterable-of-Captures of Iterable where {.all ~~ Capture}; sub bla(--> Iterable-of-Captures) {gather {take \(42)}}; bla

[03:24] <camelia> rakudo-moar fbbe44: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3subtype Iterable-of-Captures of Iterable7⏏5 where {.all ~~ Capture}; sub bla(--> It␤    expecting any of:␤        infix␤        infix stopper␤        …»

[03:24] <SmokeMachine> m: subset Iterable-of-Captures of Iterable where {.all ~~ Capture}; sub bla(--> Iterable-of-Captures) {gather {take \(42)}}; bla

[03:24] <camelia> rakudo-moar fbbe44: ( no output )

[03:24] <SmokeMachine> i think that works!

[03:25] <SmokeMachine> m: subset Iterable-of-Captures of Iterable where {.all ~~ Capture}; sub bla(--> Iterable-of-Captures) {gather {take \(42)}}; say bla

[03:25] <camelia> rakudo-moar fbbe44: OUTPUT«This Seq has already been iterated, and its values consumed␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[03:25] <SmokeMachine> or not... :(

[03:25] <SmokeMachine> m: subset Iterable-of-Captures of Iterable where {.cache.all ~~ Capture}; sub bla(--> Iterable-of-Captures) {gather {take \(42)}}; say bla

[03:25] <camelia> rakudo-moar fbbe44: OUTPUT«(\(42))␤»

[03:25] <notviki> .oO( over-engineering... )

[03:25] <[Coke]> m: use Test; EVAL "{5+5}.say"

[03:25] <camelia> rakudo-moar fbbe44: OUTPUT«10␤»

[03:26] <SmokeMachine> it won't work on my case... my seq is infinite... :(

[03:26] <notviki> Test.pm6 turns on monkey eval seeing

[03:26] <Geth> doc: 31a8cc0462 | (Daniel Mita)++ | doc/Type/Cool.pod6

[03:26] <Geth> doc: More info on allowing EVAL

[03:26] <Geth> doc: review: https://github.com/perl6/doc/commit/31a8cc0462

[03:26] <Geth> doc: 524b4588b6 | (Will Coleda)++ | doc/Type/Cool.pod6

[03:26] <Geth> doc: Merge pull request #1051 from mienaikage/EVAL-error-override

[03:26] <Geth> doc: 

[03:26] <Geth> doc: More info on allowing EVAL

[03:26] <Geth> doc: review: https://github.com/perl6/doc/commit/524b4588b6

[03:27] <TEttinger> what, we have another bot as a mass effect reference now?

[03:27] <committable6> TEttinger, ¦«we»: Cannot find this revision (did you mean “ZA”?)

[03:27] <evalable6> TEttinger, Full output: https://gist.github.com/f10523650b86b38b3e8a05543b164c83

[03:27] <evalable6> TEttinger, rakudo-moar fbbe446: OUTPUT«(exit code 1) 04===SORRY!04=== Error while compiling /tmp/XBVrfosw65␤Bogus postf…»

[03:27] <bisectable6> TEttinger, On both starting points (old=2015.12 new=fbbe446) the exit code is 1 and the output is identical as well

[03:27] <bisectable6> TEttinger, https://gist.github.com/b9117acfcbaef2d65b06b1d73fd78150

[03:27] <TEttinger> ha

[03:27] <notviki> heh

[03:27] <Geth> doc: dacc5927b2 | (Will "Coke" Coleda)++ | README.md

[03:27] <Geth> doc: remove trailing whitespace

[03:27] <Geth> doc: review: https://github.com/perl6/doc/commit/dacc5927b2

[03:27] <Geth> doc: da44af48cd | (Will "Coke" Coleda)++ | 2 files

[03:27] <Geth> doc: fix spelling errors

[03:27] <Geth> doc: review: https://github.com/perl6/doc/commit/da44af48cd

[03:28] <TEttinger> what, u, hey

[03:28] <committable6> TEttinger, ¦«u,»: Cannot find this revision (did you mean “ZA”?)

[03:28] <evalable6> TEttinger, rakudo-moar fbbe446: OUTPUT«(exit code 1) 04===SORRY!04=== Error while compiling /tmp/qPWaRWX2o_␤Undeclared routines:␤    hey used at line 1␤    u used at line 1␤»

[03:28] <bisectable6> TEttinger, On both starting points (old=2015.12 new=fbbe446) the exit code is 1 and the output is identical as well

[03:28] <bisectable6> TEttinger, Output on both points: 04===SORRY!04=== Error while compiling /tmp/IBuHdxg0x9␤Undeclared routines:␤    hey used at line 1␤    u used at line 1␤

[03:28] <TEttinger> aw, wanted to get the unicode bot in there

[03:28] <notviki> ?

[03:28] <TEttinger> u: hey

[03:28] <unicodable6> TEttinger, U+25C9 FISHEYE [So] (◉)

[03:28] <notviki> We have two unicode bots in here...

[03:28] <unicodable6> TEttinger, U+1045E SHAVIAN LETTER THEY [Lo] (𐑞)

[03:28] <unicodable6> TEttinger, https://gist.github.com/389de4f703d75c0fb4a5f9a46ae5b254

[03:29] <notviki> u, hah

[03:29] <unicodable6> notviki, U+062D ARABIC LETTER HAH [Lo] (ح)

[03:29] <unicodable6> notviki, U+062E ARABIC LETTER KHAH [Lo] (خ)

[03:29] <unicodable6> notviki, https://gist.github.com/e84815821a51ccfbef09cc7acbf7350d

[03:29] <TEttinger> hehe

[03:29] <AlexDaniel> haha, perhaps it was a bad idea to add “what:” shortcut :D

[03:29] <[Coke]> yoleaux: owner?

[03:29] <TEttinger> what, me worry?

[03:29] <committable6> TEttinger, ¦«me»: Cannot find this revision (did you mean “ZA”?)

[03:29] <evalable6> TEttinger, Full output: https://gist.github.com/0a3a9d4d69dc7c1f0bed6491f9cd88d6

[03:29] <evalable6> TEttinger, rakudo-moar fbbe446: OUTPUT«(exit code 1) 04===SORRY!04=== Error while compiling /tmp/2QSlAQ3DaZ␤Bogus postf…»

[03:29] <bisectable6> TEttinger, On both starting points (old=2015.12 new=fbbe446) the exit code is 1 and the output is identical as well

[03:29] <bisectable6> TEttinger, https://gist.github.com/04755e2dcc5bce029a35c568dc1f1e99

[03:29] <notviki> :)

[03:29] <[Coke]> TEttinger: hey, you're kind of spamming everyone.

[03:29] <TEttinger> I'll stop

[03:30] <AlexDaniel> let's see if somebody stumbles upot it again. If yes, I'll make it answer me only :|

[03:30] <TEttinger> that seems like a good idea

[03:30] <AlexDaniel> well another way to do it is to require : instead of a comma

[03:31] <TEttinger> yeah

[03:31] <AlexDaniel> m: my @a = [2, 5, 8],; my ($x, $y, $z) = @a[0]; say $y++; say @a

[03:31] <camelia> rakudo-moar fbbe44: OUTPUT«5␤[[2 5 8]]␤»

[03:31] <TEttinger> it's also strange that 3 bots respond to what

[03:31] <AlexDaniel> any way to do it? := doesn't work this way

[03:32] *** stmuk_ joined
[03:32] <AlexDaniel> TEttinger: this command was introduced for my work on regressions

[03:32] <TEttinger> passive regressive

[03:32] <TEttinger> seems useful for you, definitely

[03:33] <TEttinger> the name is a little odd for general sue

[03:33] <TEttinger> use

[03:33] <AlexDaniel> TEttinger: evalable gets back with a quick answer for HEAD, then bisectable says what it thinks is the answer, and committable gives a slightly better picture

[03:33] <TEttinger> can you demonstrate what proper use would be?

[03:34] <TEttinger> I'm guessing the part after what, is code, but is there a specific commit that it needs as well?

[03:34] *** stmuk left
[03:35] <Geth> doc: 4466f170a6 | (Will "Coke" Coleda)++ | doc/Type/IO/Path.pod6

[03:35] <Geth> doc: Remove 5-6 text that is inappropriate here.

[03:35] <Geth> doc: 

[03:35] <Geth> doc: Additionally, this was already covered in better detail in

[03:35] <Geth> doc: doc/Language/5to6-perlfunc.pod6

[03:35] <Geth> doc: 

[03:35] <Geth> doc: Closes #1097

[03:35] <Geth> doc: review: https://github.com/perl6/doc/commit/4466f170a6

[03:35] <AlexDaniel> “what” simply takes code

[03:35] <AlexDaniel> what: my %h = <a 1 b 2>; enum Bits (%h); dd Bits.enums

[03:35] <evalable6> AlexDaniel, rakudo-moar fbbe446: OUTPUT«Map.new(())»

[03:35] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=fbbe446) because on both starting points the exit code is 0

[03:35] <committable6> AlexDaniel, https://gist.github.com/e71497ede1635ea23cb2157510dbf794

[03:35] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/bcf283b69c05e361d004e10db54123fc

[03:35] <bisectable6> AlexDaniel, (2016-05-13) https://github.com/rakudo/rakudo/commit/d31495ff87ef94fdcb84328bd8ef808f10839d54

[03:36] <TEttinger> ah, that looks like a result

[03:37] <AlexDaniel> you won't need that ever unless you do the work I do :)

[03:37] <TEttinger> ah, makes sense to restrict it to your work then

[03:37] <AlexDaniel> (which is going through thousands of snippets and throwing most of them into the bots, trying to figure out if there is any regression of some sort)

[03:38] <TEttinger> or do some weird name like "whaaaa, say 42"

[03:38] <AlexDaniel> I'll just require : I think…

[03:38] <AlexDaniel> anyway

[03:38] <AlexDaniel> m: my @a = [2, 5, 8],; my ($x, $y, $z) = @a[0]; say $y++; say @a

[03:38] <camelia> rakudo-moar fbbe44: OUTPUT«5␤[[2 5 8]]␤»

[03:38] <AlexDaniel> ↑ can I actually bind $x $y $z there?

[03:40] <notviki> m: my @a = [2, 5, 8],; my ($x, $y is raw, $z) := \(|@a[0]); say $y++; say @a

[03:40] <camelia> rakudo-moar fbbe44: OUTPUT«5␤[[2 6 8]]␤»

[03:40] <[Coke]> is zef recommended today over panda?

[03:40] <notviki> [Coke]: yes

[03:40] <notviki> [Coke]: also is being switched to in Rakudo Star

[03:40] <[Coke]> ok.

[03:40] <notviki> http://blogs.perl.org/users/steve_mynott/2017/01/rakudo-star-past-present-and-future.html

[03:40] <notviki> huggable: zef star :is: http://blogs.perl.org/users/steve_mynott/2017/01/rakudo-star-past-present-and-future.html

[03:40] <huggable> notviki, Added zef star as http://blogs.perl.org/users/steve_mynott/2017/01/rakudo-star-past-present-and-future.html

[03:42] <SmokeMachine> notviki: how did that work? Didn't you bind the position 0? How was the position 1 changed? I didn't get it...

[03:42] <notviki> :/

[03:42] <Geth> doc: 4a2ebfbfe0 | (Will "Coke" Coleda)++ | 3 files

[03:42] <Geth> doc: prefer zef to panda

[03:42] <Geth> doc: 

[03:42] <Geth> doc: Closes #894

[03:42] <Geth> doc: review: https://github.com/perl6/doc/commit/4a2ebfbfe0

[03:42] <notviki> Ah

[03:43] <SmokeMachine> Hum! The whole array was on position 0!

[03:43] <notviki> SmokeMachine: look at the array. It has just one element in it: an array of three elemenstts

[03:43] <SmokeMachine> notviki: yes! Thanks! I got it!

[03:44] <timotimo> TEttinger: what is the other bot that's a mass effect reference?

[03:44] <timotimo> i must have missed that one

[03:45] <timotimo> oh, maybe you meant "another bot, this one as a mass effect reference"

[03:45] <timotimo> rather than "another mass-effect-referencing bot"

[03:45] <SmokeMachine> notviki: is the \() creating a capture?

[03:45] <BenGoldberg> m: dd \()

[03:45] <camelia> rakudo-moar fbbe44: OUTPUT«\()␤»

[03:46] <BenGoldberg> m: \().WHAT.say

[03:46] <camelia> rakudo-moar fbbe44: OUTPUT«(Capture)␤»

[03:46] <SmokeMachine> Or a sigl less?

[03:46] <AlexDaniel> .tell MasterDuke I have optimized Sift4 a bit. It is 60% faster now! :O

[03:46] <yoleaux> AlexDaniel: I'll pass your message to MasterDuke.

[03:48] <timotimo> aye, \() is for capture literals

[03:48] <timotimo> SmokeMachine: you seem to be under the impression that parameterizing something with something means that the one something must be a container with only the other somethings in it

[03:48] <SmokeMachine> I guess that if you didn't use the \() you would Bind the scalar container...

[03:51] <SmokeMachine> timotimo: I was with that idea... but when notviki did show that the seq hasn't parameter I remembered that could be only a role...

[03:51] <Geth> doc: 2cbb3b6ced | (Will "Coke" Coleda)++ | doc/Language/5to6-perlvar.pod6

[03:51] <Geth> doc: tag p5's special variables in search.

[03:51] <Geth> doc: 

[03:51] <Geth> doc: Closes #1009

[03:51] <Geth> doc: review: https://github.com/perl6/doc/commit/2cbb3b6ced

[03:51] <AlexDaniel> s: max, \()

[03:51] <SourceBaby> AlexDaniel, Something's wrong: ␤ERR: Cannot resolve caller sourcery(Num, Capture); none of these signatures match:␤    ($thing, Str:D $method, Capture $c)␤    ($thing, Str:D $method)␤    (&code)␤    (&code, Capture $c)␤  in block <unit> at -e line 6␤␤

[03:52] <AlexDaniel> s: max

[03:52] <SourceBaby> AlexDaniel, Something's wrong: ␤ERR: Cannot resolve caller sourcery(Num); none of these signatures match:␤    ($thing, Str:D $method, Capture $c)␤    ($thing, Str:D $method)␤    (&code)␤    (&code, Capture $c)␤  in block <unit> at -e line 6␤␤

[03:52] <AlexDaniel> s: &max

[03:52] <SourceBaby> AlexDaniel, Sauce is at https://github.com/rakudo/rakudo/blob/fbbe446/src/core/Any-iterable-methods.pm#L1935

[03:52] <timotimo> i have a hard time understanding that sentence

[03:52] <AlexDaniel> s: &infix:<max>

[03:52] <SourceBaby> AlexDaniel, Sauce is at https://github.com/rakudo/rakudo/blob/fbbe446/src/core/Any-iterable-methods.pm#L1930

[03:53] <SmokeMachine> timotimo: I remembered that I could do some like it, that has nothing to do with types: https://github.com/FCO/Test-Fuzz/blob/master/lib/Test/Fuzz/Fuzzed.pm6

[03:53] <SmokeMachine> timotimo: sort, my English isn't very good...

[03:54] <SmokeMachine> Sorry*

[03:54] <AlexDaniel> ok I'm getting a hang of it…

[04:05] <timotimo> don't worry, i'm sure everything's fine and in order

[04:15] *** aborazmeh joined
[04:15] *** aborazmeh left
[04:15] *** aborazmeh joined
[04:17] <[Coke]> (docs) did a git clean -xdf; then ran 'make' - the bigpage stuff says (cached) after most things. this seems bad.

[04:19] *** hartenfels left
[04:23] *** xtreak joined
[04:27] *** aborazmeh left
[04:35] <[Coke]> (docs) Writing programs document for Perl 6 ... did this step get super slow recently?

[04:35] <[Coke]> appears to be when running highlights on it.

[04:37] <timotimo> i thought the change to using the other highlightign stuff made it much faster?

[04:37] <timotimo> maybe it's falling back to something else? perhaps in a non-optimal way that makes it much slower?

[04:41] <[Coke]> it's running the coffee script node highlighter.

[04:41] <[Coke]> taking up virtually no cpu or memory.

[04:43] <timotimo> ah

[04:43] <timotimo> well, that's ... good?

[04:44] <timotimo> i need to go to bed, even though AGDQ is still running

[04:44] *** MasterDukeLaptop joined
[04:44] <timotimo> i just can't stay up long enough to watch it through to the end

[04:44] <timotimo> i expect you'll understand

[04:49] *** gabiruh joined
[04:56] *** faraco joined
[04:56] <faraco> hi, is it usually take couple of days to let your PR-ed module available to be installed using panda or zef?

[04:56] <notviki> nope

[04:56] <notviki> faraco: you need to run panda/zef update

[04:57] <[Coke]> what's the PR?

[04:57] <notviki> (providing you see it on modules.perl6.org)

[04:57] <faraco> oh, gonna try that notiviki

[04:58] <notviki> faraco: it takes at most 2 hours for it to show up on modules.perl6.org and it'd be available even faster for panda update... No idea how frequent zef updates its site with data

[04:58] <faraco> Mofixes (first module, just to test the fully working environment)

[04:58] <faraco> oh I see

[04:58] <notviki> buggable: eco Mofixes

[04:58] <buggable> notviki, Mofixes 'A collection of ready to use (whatever)fix for Perl 6': https://github.com/faraco/Mofixes

[04:58] <faraco> please don't laugh at that :(

[05:00] <faraco> okay, thanks notviki, it's working.

[05:01] *** kyan left
[05:01] <notviki> sweet

[05:02] <timotimo> we don't yet offer something like an easily installable ecosystem that people can deploy in their own home/company/university/...

[05:02] <notviki> faraco: your mofact gives bogus answers for negative factorials. You could use UInt instead of Int in the signature

[05:02] <faraco> oh yeah, unsigned. Didn't know that type even exist. Thanks for the recommendation.

[05:03] * notviki drops to bed

[05:17] *** faraco left
[05:24] *** aborazmeh joined
[05:24] *** aborazmeh left
[05:24] *** aborazmeh joined
[05:27] *** teatime joined
[05:27] <teatime> Hello once again, friendly Perl people.

[05:27] <timotimo> oh, it's mister teatime!

[05:28] * teatime bows menacingly.

[05:28] <timotimo> i regret i've already got to go

[05:28] <timotimo> but please have yourself a lovely time in our comfy channel

[05:28] <teatime> Always!

[05:29] *** Resol joined
[05:29] <teatime> I actually had a specific question a bit ago, but naturally it now escapes me.

[05:30] *** aborazmeh left
[05:32] *** faraco joined
[05:32] *** faraco left
[05:32] *** faraco joined
[05:32] <faraco> hi

[05:32] <faraco> I tried ufo, but is says CUSTOM_LIB dynamic var not found.

[05:32] <faraco> just running `ufo` in my project dir.

[05:33] *** aborazmeh joined
[05:33] *** aborazmeh left
[05:33] *** aborazmeh joined
[05:33] <timotimo> ufo hasn't been necessary for a very long time and has bit-rotted as a consequence

[05:33] *** CIAvash joined
[05:40] <teatime> Oh, I remembered!  I need a data structure that would be similar to a hashmap, except I want fast lookups by both key (to value) and value (to key).  Anything built-in?  If it matters, both keys and values will be strings, and as it happens, it will generally be the case that for a given value, many keys will map to it, like this:  { a→B, b→B, c→B, d→B, e→C, f→C, g→C, h→D, …}

[05:42] <teatime> it's totally acceptable for my use to maintain two hashes (one key-to-value, and one-value-to-list-of-keys), but being rather uneducated wrt comp. sci., I figured I might be overlooking something "clever" (read: fun and new to me)

[05:42] *** aborazmeh left
[05:45] <faraco> timotimo: oh thanks for the information.

[05:45] <timotimo> if you just want to use it to run tests, you can use prove to invoke perl6 -Ilib for you

[05:46] *** Cabanossi left
[05:46] <timotimo> installing is usually best done with "panda install ." or "zef install .", and you'll very likely have to put --force before install because of the "already installed" check

[05:46] <timotimo> i'm going to bed now. gnite!

[05:48] *** Cabanossi joined
[06:00] *** shayan_ joined
[06:01] *** shayan_ left
[06:01] *** shayan_ joined
[06:02] *** khw left
[06:03] <faraco> oh thanks!

[06:03] *** faraco left
[06:05] *** dugword left
[06:11] *** skids left
[06:11] <ugexe> teatime: i use `my %value-lookup = %key-lookup.antipairs`

[06:12] *** bjz joined
[06:12] *** rpburkholder joined
[06:13] <teatime> yeah I suppose I was probably over-thinking it

[06:15] <ugexe> hmm but that wont work for multiple values

[06:15] <teatime> I noticed :)  it is a handy idiom I will [probably not remember by the next time I could use it], though :)

[06:16] <teatime> the two-hash solution is straightforward, though.

[06:22] *** brillenfux joined
[06:22] <ugexe> m: my %x = foo => "xxx", bar => "xxx", baz => "..."; say %x.categorize({ $_.value }); # this is getting closer

[06:22] <camelia> rakudo-moar fbbe44: OUTPUT«{... => [baz => ...], xxx => [bar => xxx foo => xxx]}␤»

[06:28] *** Resol left
[06:29] *** bjz left
[06:33] *** bjz joined
[06:37] *** BenGoldberg left
[06:39] *** MasterDukeLaptop left
[06:48] *** xtreak left
[06:51] *** RabidGravy joined
[06:55] *** Tonik joined
[06:57] *** xtreak joined
[07:01] *** Tonik left
[07:04] <moritz> \o

[07:05] *** shayan_ left
[07:10] *** kurahaupo_ joined
[07:11] *** kurahaupo` joined
[07:13] *** bjz left
[07:14] *** kurahaupo` left
[07:14] *** kurahaupo__ left
[07:14] *** kurahaupo__ joined
[07:15] *** kurahaupo_ left
[07:16] <RabidGravy> right today I find out how well I can get to work without a tube service

[07:17] *** bjz joined
[07:19] *** kurahaupo__ left
[07:23] *** domidumont joined
[07:26] *** avuserow joined
[07:27] *** domidumont left
[07:28] *** domidumont joined
[07:33] <moritz> y u no tube?

[07:37] *** thayne joined
[07:42] *** bjz left
[07:49] *** bjz joined
[07:51] *** CIAvash left
[07:54] *** bwisti left
[07:57] *** gearchef joined
[08:03] <AlexDaniel> /o\ .min is really slow

[08:03] <AlexDaniel> or so it seems

[08:08] <AlexDaniel> when calling it with a function on a reasonably sized array 

[08:12] *** ufobat joined
[08:13] <teatime> sigh... just spent like 20 minutes composing a long and hopefully helpful response to a semi-coherent question on Reddit, only to get instant-downvoted almost certainly by the asker.  I really gotta stop redditing, it's not at all good for me.

[08:14] <teatime> If I limited myself to NPR and Perl-related forums, I would probably perceive humanity 100% more positively.

[08:17] *** zakharyas joined
[08:17] *** rpburkholder left
[08:18] *** bjz left
[08:19] <AlexDaniel> teatime: use reddit for funny pics only

[08:20] <samcv> interesting there's a ㎜ unicode symbol for millimeters

[08:20] <samcv> u: mm

[08:20] <unicodable6> samcv, U+002C COMMA [Po] (,)

[08:20] <unicodable6> samcv, U+0040 COMMERCIAL AT [Po] (@)

[08:20] <unicodable6> samcv, https://gist.github.com/010067e7d1b36c7b955d03aaa1ff22e7

[08:20] <AlexDaniel> u: hertz

[08:20] <unicodable6> AlexDaniel, Found nothing!

[08:20] <samcv> ㎟

[08:21] <samcv> oh nice ﹫ small commercial at :) yey

[08:21] <AlexDaniel> u: hz

[08:21] <unicodable6> AlexDaniel, U+31C5 CJK STROKE HZZ [So] (㇅)

[08:21] <unicodable6> AlexDaniel, U+31C6 CJK STROKE HZG [So] (㇆)

[08:21] <unicodable6> AlexDaniel, https://gist.github.com/4d4c23ebafac8cb9d41fedafe54438bb

[08:21] <samcv> for times you need an at symbol, but lowercaseish

[08:21] <AlexDaniel> u: ghz

[08:21] <unicodable6> AlexDaniel, U+3393 SQUARE GHZ [So] (㎓)

[08:21] <samcv> there is a lowercase @ symbol though or there used to be. though technically the small ﹫ is not a lowercase @

[08:22] <AlexDaniel> samcv: do you know if there is any way to turn ㎓ into GHz?

[08:23] <samcv> oh like get the letters out of it

[08:23] <AlexDaniel> yea

[08:23] <samcv> i would try case folding

[08:23] <samcv> m: "㎓".cf.say

[08:23] <camelia> rakudo-moar fbbe44: OUTPUT«No such method 'cf' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[08:23] <samcv> uhm

[08:23] <AlexDaniel> fc ?

[08:23] <samcv> yes

[08:23] <AlexDaniel> but no

[08:23] <samcv> m: "㎓".fc.say

[08:23] <camelia> rakudo-moar fbbe44: OUTPUT«㎓␤»

[08:23] <samcv> nope

[08:24] <samcv> i know of no way

[08:24] <samcv> also why is it ‘square ghz’ why square

[08:24] <samcv> as opposed to rectangle?

[08:25] <AlexDaniel> u: SQUARE

[08:25] <unicodable6> AlexDaniel, U+005B LEFT SQUARE BRACKET [Ps] ([)

[08:25] <unicodable6> AlexDaniel, U+005D RIGHT SQUARE BRACKET [Pe] (])

[08:25] <unicodable6> AlexDaniel, https://gist.github.com/f71acabfb9bbc02d14989aa7cc202900

[08:26] <AlexDaniel> u: ㎜

[08:26] <unicodable6> AlexDaniel, U+339C SQUARE MM [So] (㎜)

[08:26] <samcv> m: "㎓".uniprop('Decomposition_Type').say

[08:26] <camelia> rakudo-moar fbbe44: OUTPUT«Square␤»

[08:27] <samcv> m: "㎓".NFD.say

[08:27] <camelia> rakudo-moar fbbe44: OUTPUT«NFD:0x<3393>␤»

[08:27] <AlexDaniel> ㎯ :-/

[08:28] <samcv> u: ㎯

[08:28] <unicodable6> samcv, U+33AF SQUARE RAD OVER S SQUARED [So] (㎯)

[08:28] <AlexDaniel> :D

[08:29] <samcv> lemme try this perl 5 module i use for transliteration tho

[08:29] <samcv> yup that work

[08:30] <AlexDaniel> samcv: by the way, not sure if you know about this:

[08:30] <AlexDaniel> u: ↉

[08:30] <unicodable6> AlexDaniel, U+2189 VULGAR FRACTION ZERO THIRDS [No] (↉)

[08:31] <samcv> this is the cpan module i use http://search.cpan.org/~sburke/Text-Unidecode-1.30/lib/Text/Unidecode.pm

[08:31] <samcv> a 0/3 fraction? yeah it exists

[08:31] <samcv> m: say ↉

[08:31] <camelia> rakudo-moar fbbe44: OUTPUT«0␤»

[08:32] <samcv> m: say "↉".uniprop('Denominator_Value')

[08:32] <camelia> rakudo-moar fbbe44: OUTPUT«0␤»

[08:32] <samcv> i probably spelled that wrong

[08:32] <AlexDaniel> can we nominate this as a stupidest way to write 0 in perl 6? :)

[08:32] <samcv> m: say "1".uniprop('Denominator_Value')

[08:32] <camelia> rakudo-moar fbbe44: OUTPUT«0␤»

[08:33] <samcv> m: "↉".uniprop('NUMERIC_VALUE_DENOMINATOR').say

[08:33] <camelia> rakudo-moar fbbe44: OUTPUT«0␤»

[08:33] <samcv> m: "½".uniprop('NUMERIC_VALUE_DENOMINATOR').say

[08:33] <camelia> rakudo-moar fbbe44: OUTPUT«0␤»

[08:33] <teatime> the fraction slash is supposed to allow arbitrary vulgar fractions, but I don't know of anything that actually implements it that way... I really wish my terminal did, though.

[08:33] <samcv> m: "½".uniprop('Numeric_Value_Denominator').say

[08:33] <camelia> rakudo-moar fbbe44: OUTPUT«2␤»

[08:33] <samcv> m: "↉".uniprop('Numeric_Value_Denominator').say

[08:33] <camelia> rakudo-moar fbbe44: OUTPUT«1␤»

[08:33] <samcv> wat

[08:34] <samcv> :\

[08:34] <teatime> also I assume the 'SQAURE' bit in the name refers to the fact that it's a double-width CJK-compatibility character

[08:34] <samcv> yeah teatime

[08:34] <AlexDaniel> that's right, but it does not make it less crazy

[08:34] <teatime> which part?

[08:35] <samcv> i'm not sure exactly how the code works to set the numerator and denominator… ugh but it says denominator of 1 but it's 3

[08:35] <teatime> (is crazy)

[08:37] <AlexDaniel> for example that only some units (e.g. ㎓) were added

[08:38] <AlexDaniel> or that there are only some fractions

[08:38] <teatime> My unverified assumption, is that Unicode only included whatever characters existed in pre-existing character sets and couldn't be unambiguously represented by existing symbols

[08:38] <AlexDaniel> why add them at all huh?

[08:39] <AlexDaniel> right

[08:39] <teatime> the primary reason things get added is that they're used by some encoding; getting something added just because it's useful or logical is IMO a little bit unreasonably difficult

[08:40] <teatime> as for why they were added to the original encoding, probably because double-width latin letters are ugly

[08:40] <teatime> I feel like I'm being obvious and missing your point, though.

[08:42] <samcv> what teatime said is true though. they were put in for compatibility mainly

[08:42] <samcv> for converting from existing character sets

[08:43] <samcv> some things are not added, like the lowercase @ symbol though. though they did add a small 

[08:43] <samcv> @ symbol. but adding a lowercase property one would have been confusing

[08:43] *** dakkar joined
[08:44] <teatime> if no single legacy encoding contains both lowercase @ and small @, they probably just included one and defined the appropriate mapping

[08:45] <samcv> well yeah no legacy encoding did i believe it was for historical documents and such

[08:45] <samcv> well maybe not that old but there used to be a lowercase and uppercase version. now it's really just a symbol without case

[08:45] *** wamba joined
[08:45] <samcv> also ampersand used to be a letter in its own right

[08:46] <teatime> I did not know that, and I am a minor typography nerd.

[08:46] <DrForr> 'et'.

[08:46] <samcv> and per se and ( means, and 'and' by itself) and how ampersand got its name

[08:46] <teatime> about @ that is.

[08:46] <samcv> a b c d e f g… x y z and per se and

[08:46] <samcv> became ampersand

[08:47] <samcv> and then they ditched the ampersand as the 27th letter and it just became “X, Y and Z”

[08:47] <DrForr> Huh, I thought it was backformation from 'etc'.

[08:47] <teatime> wrt unicode, there are two things that make me irrationally angry.  one, is that almost but not quite all superscript latin letters exist (this may have been fixed, can't remember)

[08:47] <samcv> well ampersand is just Et

[08:47] <samcv> from latin which means and

[08:47] <samcv> but it used to be its own letter

[08:48] <samcv> that was said with the rest of the alphabet

[08:49] <teatime> the other is this:  "Hey, let's have a bacon emoji... everyone loves bacon!"  "Ok, sure."  "Also, can we have the copyleft symbol?"  "{protracted discussion about whether the copyleft symbol is a real character, with multiple pronouncements about the dangers of adding characters just because you want to}"

[08:49] <samcv> heh

[08:49] <samcv> pretty much

[08:50] <samcv> emoji is much easier to add though

[08:50] *** g4 joined
[08:50] *** g4 left
[08:50] *** g4 joined
[08:50] <samcv> because it's not text it has no real rules for inclusion mostly

[08:50] <teatime> I mean... it could go into the emoji block or otherwise above the BMP just fine

[08:51] <samcv> yeah

[08:51] <samcv> (ɔ)

[08:52] <teatime> heh... there's a combining circle-around you could have used :)

[08:52] <samcv> http://www.unicode.org/L2/L2016/16059-copyleft.pdf

[08:52] <samcv> well that's not circle it's just a reversed c with parens ;)

[08:53] <samcv> u: U+1F16C

[08:53] <unicodable6> samcv, U+1F16C <reserved> [Cn] (🅬)

[08:53] <teatime> exactly :)  If I were on my own actual computer, I could just type it :/

[08:54] <samcv> is there an ao digraph

[08:54] <samcv> like there's æ

[08:55] <teatime> I'm talking about U+20DD

[08:56] <samcv> what is 20DD the reversed c?

[08:57] <hobbs> no, the circle

[08:58] *** xtreak left
[08:59] <teatime> m: say "\ua73e\u20dd"

[08:59] <camelia> rakudo-moar fbbe44: OUTPUT«5===SORRY!5===␤Unrecognized backslash sequence: '\u'␤at <tmp>:1␤------> 3say "\7⏏5ua73e\u20dd"␤Unrecognized backslash sequence: '\u'␤at <tmp>:1␤------> 3say "\ua73e\7⏏5u20dd"␤    expecting any of:␤        argument list␤   …»

[08:59] <teatime> m: say "\u{a73e}\u{20dd}"

[08:59] <camelia> rakudo-moar fbbe44: OUTPUT«5===SORRY!5===␤Unrecognized backslash sequence: '\u'␤at <tmp>:1␤------> 3say "\7⏏5u{a73e}\u{20dd}"␤Unrecognized backslash sequence: '\u'␤at <tmp>:1␤------> 3say "\u{a73e}\7⏏5u{20dd}"␤Missing block␤at <tmp>:1␤------> 3say …»

[09:00] <hobbs> of course, it refuses to render as combining for me. But ᴐ⃝ or ɔ⃝ *ought* to work

[09:00] <teatime> ok I give up.  it probably wouldn't render correctly for you anyway.

[09:00] <teatime> and also, I don't think there's a plain reversed capital C :)

[09:01] <samcv> why would it be a capital c

[09:01] <hobbs> teatime: it's \x, we're not JavaScript :)

[09:01] <samcv> copyright sign is lowercase but large c?

[09:01] <teatime> I promise I tried really hard to find the list of perl6 escape sequences :)

[09:01] <teatime> samcv: it's difficult for me to say it's meaninfully either of those

[09:01] <samcv> m: say "\x[a73e]\x[20dd]"

[09:01] <camelia> rakudo-moar fbbe44: OUTPUT«Ꜿ⃝␤»

[09:02] <samcv> just looks like a backwarrds C and then a circle :P

[09:02] <samcv> m: say "\x[a73e]\x[20dd]".uninames

[09:02] <camelia> rakudo-moar fbbe44: OUTPUT«(LATIN CAPITAL LETTER REVERSED C WITH DOT COMBINING ENCLOSING CIRCLE)␤»

[09:02] <samcv> m: say "\x[a73e]\x[20dd]".uniprops('GCB').perl

[09:02] <camelia> rakudo-moar fbbe44: OUTPUT«("Other", "Extend").Seq␤»

[09:02] <samcv> GCB= grapheme cluster break

[09:03] <teatime> there are a bunch of combining enclosing shapes, including a keycap!

[09:03] <samcv> m: say "\x[a73e]\x[20dd]".chars

[09:03] <camelia> rakudo-moar fbbe44: OUTPUT«1␤»

[09:03] <samcv> ye that's what i thought it'd say

[09:03] <samcv> well should at least ;)

[09:04] <teatime> since you guys presumably do a bunch of boundary-pushing unicode in the *nix terminal:  what terminal are you using?

[09:04] *** jonas1 joined
[09:04] *** abraxxa joined
[09:05] <teatime> I'm still finding urxvt to work best for me, but I have several complaints, at least some of which will probably never be fixed.

[09:05] <masak> in which Guido recounts how he grudgingly added closures to Python: http://python-history.blogspot.se/2009/04/origins-of-pythons-functional-features.html :P

[09:05] <masak> (morning, #perl6)

[09:05] <samcv> morning

[09:06] *** nick_1902 joined
[09:06] *** cibs left
[09:08] *** cibs joined
[09:08] <samcv> which complaints teatime 

[09:10] <teatime> I'd probably rather skip getting into it just now for a bunch of reasons; if you really care though, I can make a note to send you a comprehensive list in the indefinite future :)

[09:12] <samcv> i care about too many things :P

[09:12] *** abraxxa left
[09:13] <samcv> i hate all my terminals as well

[09:13] *** abraxxa joined
[09:14] <arnsholt> I'm currently on the Windows bash terminal (at work) and gnome-terminal (at home)

[09:15] <arnsholt> And I suspect the reason we hate our terminals is that terminals are a bit shit, fundamentally

[09:15] * DrForr grumbles somethning about Tickit from the perl5 side.

[09:15] <arnsholt> For some reason technologies from the 50s and 60s don't always do all we want in the 21st century =)

[09:21] *** AlexDaniel left
[09:21] *** melezhik joined
[09:23] *** Stown joined
[09:25] <melezhik> Hi! I have already asked, but still can't get a working code. How to create an alias to module function and make this alias exportable?

[09:26] <melezhik> I was suggested by :notviki 

[09:26] <melezhik> this way: constant  &foo is export = &bar

[09:27] <melezhik> but this looks like does not compile 

[09:27] <masak> m: sub bar {}; constant &foo is export = &bar

[09:27] <camelia> rakudo-moar fbbe44: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Can't use unknown trait 'is export' in a sub declaration.␤at <tmp>:1␤    expecting any of:␤        rw raw hidden-from-backtrace hidden-from-USAGE␤        pure default DEPRECATED inlinable nodal␤   …»

[09:28] <melezhik> masak: that is it; I got the same compilation error;

[09:28] <masak> m: constant switlity is export = 42

[09:28] <camelia> rakudo-moar fbbe44: ( no output )

[09:28] <masak> m: sub bar {}; constant foo is export = &bar

[09:28] <camelia> rakudo-moar fbbe44: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Can't use unknown trait 'is export' in a sub declaration.␤at <tmp>:1␤    expecting any of:␤        rw raw hidden-from-backtrace hidden-from-USAGE␤        pure default DEPRECATED inlinable nodal␤   …»

[09:28] * masak does not know why this happens, if it's a bug, or if there's some excellent reason for it not to work

[09:28] <masak> your use case seems fairly reasonable to me on the face of it

[09:28] <masak> so does the syntax you use to achieve it

[09:29] *** xtreak joined
[09:29] <melezhik> masak: and? what should we do? your idea?

[09:30] <masak> hmm

[09:30] <masak> m: sub bar { say "OH HAI" }; sub foo is export { bar }; foo

[09:30] <camelia> rakudo-moar fbbe44: OUTPUT«OH HAI␤»

[09:30] <masak> will that work for now?

[09:30] <masak> as a workaround

[09:31] <masak> and we'll get right on fixing the `constant` way for you in the meantime... :)

[09:31] <melezhik> yeah, sure this "strait" method I know :)))

[09:31] <melezhik> I wanted to rely on more terse syntax with it 

[09:31] * masak .oO( the royal strait method )

[09:31] <melezhik> but for now it's ok

[09:31] <masak> well, workarounds are often slightly less elegant

[09:31] <melezhik> yeah, sure

[09:31] <masak> depends if you want to have something working while you wait or not, I guess :P

[09:32] <masak> whenever I do a workaround, I usually put in a `# RAKUDO` comment that links to the RT ticket

[09:32] <melezhik> ok, so should we post a RT ticket on this?

[09:32] <masak> I know tux has gone one step further, and he automatically tests whether the bugs he's interested in have been fixed on a regular basis

[09:32] <masak> melezhik: yes, would you do the honors?

[09:33] * masak has done some character development over the years; nowadays he likes to delegate rakudobugging :P

[09:33] <masak> melezhik: [email@hidden.address]
[09:34] <melezhik> masak: sure , will taka a look later

[09:35] <masak> do include the code I sent to camelia in the bug report; that immediately provides steps-to-reproduce and what you observed in the report

[09:35] <masak> then you only need to explain what you expected (for sub constants to be exportable)

[09:46] *** Actualeyes left
[09:46] <Woodi> hi #perl6 :)

[09:46] <Woodi> http://www.lunski.pl/files/slip.txt  :)

[09:47] *** rindolf joined
[09:48] <masak> Woodi: your server sends that as Windows-1252 when it should send it as UTF-8

[09:48] <Woodi> masak: no idea why :)

[09:49] <masak> it's to do with what headers it sends. I believe it's configurable

[09:49] *** bjz joined
[09:49] <masak> Woodi: by "magic" is simply meant the fact that `my Int $x = 42; $x = Nil` sets $x to Int, not Nil

[09:49] <masak> i.e. you assign one thing, but get another

[09:50] <Woodi> btw. there was talk about R* future, eg. for noobs, for Task::  Other idea is to degrade it into script that downloads and installs what someone requested

[09:50] <Woodi> masak: I know, maybe I just put my thinking in that place :)

[09:51] *** bjz left
[09:52] <Woodi> but slip() is a bit strange and messy ATM, IMO

[09:53] <masak> how do you mean?

[09:53] <masak> slip() is essentially what came out of the GLR

[09:55] <Woodi> probably this is how browsing sources some time ago looked to me - slip handling was scattered all aroud. maybe now it's better

[09:57] *** user9 joined
[09:59] *** xtreak left
[10:02] *** xtreak joined
[10:15] *** darutoko joined
[10:23] *** CIAvash joined
[10:24] *** bjz joined
[10:31] *** TEttinger left
[10:37] <DrForr> I seem to be able to print out at most 14 digits after the decimal on a floating-point value. Is this a limitation, or am I simply using the wrong type?

[10:37] <DrForr> (probably the latter)

[10:37] *** brillenfux_ joined
[10:39] <masak> DrForr: how many digits did you expect?

[10:39] *** brillenfux left
[10:39] *** brillenfux__ joined
[10:39] <DrForr> Well, true, it's a float therefore IEEE limitations apply. I was just thinking that I was missing a type for bignum-type calculations.

[10:41] <moritz> FatRat?

[10:41] <DrForr> Ah, I'm betting ... yeah, just found it myself.

[10:41] <masak> m: say FatRat.new(1, 1e20)

[10:41] <camelia> rakudo-moar fbbe44: OUTPUT«Type check failed in binding to de; expected Int but got Num (1e+20)␤  in block <unit> at <tmp> line 1␤␤»

[10:41] <masak> m: say FatRat.new(1, 1e20.Int)

[10:41] <camelia> rakudo-moar fbbe44: OUTPUT«0.00000000000000000001␤»

[10:42] <masak> ...probably reasonable to require those constructor arguments to be Int, yes

[10:42] *** brillenfux_ left
[10:43] *** brillenfux joined
[10:44] *** brillenfux__ left
[10:45] *** gregf_ joined
[10:46] *** brillenfux_ joined
[10:48] *** brillenfux__ joined
[10:48] *** cibs left
[10:49] *** brillenfux left
[10:49] *** cibs joined
[10:50] *** brillenfux_ left
[10:52] *** brillenfux joined
[10:53] *** brillenfux__ left
[10:53] *** brillenfux left
[11:00] *** rafaschip joined
[11:04] *** kalkin- left
[11:05] *** kalkin- joined
[11:05] *** wamba left
[11:08] *** kalkin- left
[11:08] *** kalkin- joined
[11:09] <moritz> m: say 1e-20.FatRat

[11:09] <camelia> rakudo-moar fbbe44: OUTPUT«0␤»

[11:09] <moritz> m: say 1e-20.FatRat(1e-30)

[11:09] <camelia> rakudo-moar fbbe44: OUTPUT«0.00000000000000000001␤»

[11:10] <kalkin-> m: say 1e-200.FATRAT(1e-300)

[11:10] <camelia> rakudo-moar fbbe44: OUTPUT«No such method 'FATRAT' for invocant of type 'Num'␤  in block <unit> at <tmp> line 1␤␤»

[11:10] <kalkin-> m: say 1e-200.FatRat(1e-300)

[11:10] <camelia> rakudo-moar fbbe44: OUTPUT«0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010␤»

[11:10] <DrForr> m: my $x=FatRat.new(2,1);say $x.sqrt

[11:10] <camelia> rakudo-moar fbbe44: OUTPUT«1.4142135623731␤»

[11:11] <kalkin-> camelia:++

[11:15] *** labster left
[11:25] *** nick_1902 left
[11:36] *** bjz left
[11:37] *** Stown left
[11:45] *** Stown joined
[11:52] <tbrowder>  hi #perl6

[11:54] *** bjz joined
[11:55] <rafaschip> hi o/

[11:55] <tbrowder> one of my goals is to create a postscript module and i wonder if anyone has an idea about how to write tests for ps objects

[11:55] *** pmurias joined
[11:56] <moritz> PS files are just text or blob

[11:56] <tbrowder> i guess one thing is to somehow wrap ghostscript (libgs) to test the object

[11:56] <moritz> you know how to write tests for text or blobs, right?

[11:56] *** xtreak left
[11:56] <rafaschip> well, postscript is a programming language, so you should look into roast.

[11:56] <moritz> and if you want run it, then yes, something like gs

[11:57] <tbrowder> hi rafaschip  and moritz

[11:58] <tbrowder> not sure what you mean about testing a blob?

[11:58] *** kalkin- left
[11:59] *** xtreak joined
[11:59] <tbrowder> rafaschip: is that p6's roast or something else?

[11:59] <moritz> tbrowder: your module will produce a postscript file, no?

[12:00] <moritz> tbrowder: you can just test that this is what you expect

[12:00] <moritz> (compare to a hard-coded blob)

[12:00] <rafaschip> p6's roast. But only if you actually want to interpret it.

[12:00] *** xtreak left
[12:02] <tbrowder> yes, and i know i can test the string output, but i'm trying to think more generally if i can. ps is so easy to get wrong and debugging is difficult

[12:05] <tbrowder> i think i should first concentrate on complete chunks and test against gs for syntactic correctness, then look for semantic correctness...

[12:06] <moritz> can ps script produce simple text output?

[12:08] <tbrowder>  there is a way i think to write to file but i don't know how do that now--easiest is to filter it through gs to a file i think

[12:09] <tbrowder> yep, i think gs is the trick

[12:11] <rafaschip> In the map doc page: https://docs.perl6.org/type/Map the type graph has a node called "PseudoStash", but I get a 404 when I click on it.

[12:12] <rafaschip> m: my PseudoStash $p; say $p

[12:12] <camelia> rakudo-moar caba0d: OUTPUT«(PseudoStash)␤»

[12:14] <moritz> rafaschip: there are simply no docs for PseudStash yet

[12:15] <rafaschip> Uhum, but it shouldn't give a 404, I think. It should send people to a NIY page.

[12:15] <rafaschip> or NDY page.

[12:15] <rafaschip> Not documented Yet.

[12:16] *** andrzejku joined
[12:16] *** Stown left
[12:16] <lizmat> there's no mention of PseudoStash in the speculations, so it may be a Rakudo internals specific implementation detail

[12:17] <lizmat> so, not sure that would want documention in docs

[12:18] <pmurias> tbrowder: are you interested in testing what exact postscript is emitted or in testing the result it produces?

[12:22] *** kalkin- joined
[12:23] <rafaschip> lizmat: so mentions to it should be remove from the docs, right?

[12:23] <tbrowder> pmurias: both. the module will have objects that are to produce valid ps code that should execute throughthe ps interpteter. the validity of the code is easy to check, but the actual painted page results are not so easy to check. as in perl, TMTOWTDI

[12:24] <lizmat> well, perhaps: otoh, there does seem to be at least one spectest related to it

[12:24] <lizmat> so, I'm not sure  :-)

[12:25] <rafaschip> We should ask The Architect.

[12:26] <DrForr> "Maaa! That black cat's back again!"

[12:29] <tbrowder> ref ps: i think the valid code check is the most important, at least initially. testing the actual page results can wait a bit. 

[12:30] <tbrowder> thanks for helpful comments rafaschip, moritz, and pmurias

[12:34] <moritz> you're welcome

[12:34] <rafaschip> anytime

[12:35] <pmurias> tbrowder: what will your module do?

[12:36] <kalkin-> m: $*REPO.repo-chain.grep( { <installed> (elem) $_.^methods.map: *.name  } ) ==> map( *.installed) ==> flat ==> sort

[12:36] <camelia> rakudo-moar caba0d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix ==> instead␤at <tmp>:1␤------> 3  } ) ==> map( *.installed) ==> flat ==>7⏏5 sort␤»

[12:36] <kalkin-> As far as I understand the above doesn't work because sort can't be applied to each one of the results emitted by flat, right?

[12:37] <kalkin-> @foo ==> executes some function in parallel on each element of @foo

[12:37] <moritz> kalkin-: needs to be ==> sort() iirc

[12:37] <kalkin-> m: $*REPO.repo-chain.grep( { <installed> (elem) $_.^methods.map: *.name  } ) ==> map( *.installed) ==> flat ==> sort()

[12:37] <camelia> rakudo-moar caba0d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix ==> instead␤at <tmp>:1␤------> 3  } ) ==> map( *.installed) ==> flat ==>7⏏5 sort()␤»

[12:37] <moritz> m: $*REPO.repo-chain.grep( { <installed> (elem) $_.^methods.map: *.name  } ) ==> map( *.installed) ==> flat() ==> sort() )

[12:37] <camelia> rakudo-moar caba0d: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unexpected closing bracket␤at <tmp>:1␤------> 3map( *.installed) ==> flat() ==> sort() 7⏏5)␤»

[12:37] <moritz> m: $*REPO.repo-chain.grep( { <installed> (elem) $_.^methods.map: *.name  } ) ==> map( *.installed) ==> flat() ==> sort()

[12:37] <camelia> rakudo-moar caba0d: OUTPUT«Use of Nil in string context␤  in block <unit> at <tmp> line 1␤»

[12:38] <moritz> kalkin-: I don't think your understanding of ==> is correct

[12:38] <kalkin-> moritz: may be. back to reading docs

[12:42] *** CIAvash left
[12:43] *** rba_ left
[12:56] *** aborazmeh joined
[12:56] *** aborazmeh left
[12:56] *** aborazmeh joined
[12:57] <melezhik> hi masak: - perl #130533

[12:57] <melezhik> an issue on function exported alias

[12:58] <masak> great

[12:58] <masak> oh, we're into the 130-thousands now

[12:59] <masak> I still (not-so) fondly remember the 80-thousands

[13:01] *** aborazmeh left
[13:03] *** aborazmeh joined
[13:03] *** aborazmeh left
[13:03] *** aborazmeh joined
[13:07] *** aborazmeh left
[13:10] *** gearchef left
[13:16] *** aborazmeh joined
[13:16] *** aborazmeh left
[13:16] *** aborazmeh joined
[13:20] *** aborazmeh left
[13:20] *** aborazmeh_ joined
[13:20] *** aborazmeh_ left
[13:20] *** aborazmeh_ joined
[13:21] *** aborazmeh_ is now known as aborazmeh

[13:22] <jnthn> Oh my. It turns out Digest::SHA1::Native "works" for a hilarious reason.

[13:22] <jnthn> At first I noticed it gave warnings building on Linux. Didn't worry about them. Then moved on to fixing its build on Windows.

[13:22] <jnthn> After patching the Makefile it failed to link; missing symbols.

[13:23] <jnthn> Turns out it declared SHA1_Init but called SHA1Init.

[13:23] <jnthn> How could this ever work?

[13:23] <eythian> ‽

[13:23] <jnthn> So, I rename the calls. Now it builds on Windows and totally test fails.

[13:24] <jnthn> Turns out the reason it worked on Linux is because MoarVM declares a SHA1Init etc. internally.

[13:24] <jnthn> And so at library load time it gets mapped to that.

[13:24] <jnthn> And that does something different in the result it produces than the SHA1_Final in the code in the library.

[13:24] <jnthn> Which is why it fails the tests after the rename.

[13:25] <jnthn> :P :P

[13:25] * jnthn will send a PR :)

[13:25] <jnthn> And file a MoarVM bug that we should try not to leak those symbols :)

[13:26] <jnthn> (To be clear, the magical library load mapping thing that makes it work on Linux doesn't happen on Windows; the thing won't even link :))

[13:27] *** gearchef joined
[13:27] *** aborazmeh left
[13:30] *** dudz joined
[13:30] *** bjz left
[13:33] *** aborazmeh joined
[13:33] *** aborazmeh left
[13:33] *** aborazmeh joined
[13:36] *** buggable left
[13:36] *** buggable joined
[13:36] *** ChanServ sets mode: +v buggable

[13:36] <SmokeMachine> is there any way to declare more than 1 var as my?

[13:37] <SmokeMachine> m: my ($a, $b)

[13:37] <camelia> rakudo-moar 62f702: ( no output )

[13:37] <SmokeMachine> m: my ($a, $b); say $b

[13:37] <camelia> rakudo-moar 62f702: OUTPUT«(Any)␤»

[13:37] <SmokeMachine> why is it working?

[13:37] <SmokeMachine> thanks!

[13:38] <SmokeMachine> m: my ($a, $b) = (1, 2); say $b

[13:38] <camelia> rakudo-moar 62f702: OUTPUT«2␤»

[13:39] <SmokeMachine> thanks!

[13:39] <notviki> m: my ($a, $b) = 1, 2; say $b

[13:39] <camelia> rakudo-moar 62f702: OUTPUT«2␤»

[13:39] <notviki> SmokeMachine: ^ no need for second parens

[13:40] <SmokeMachine> notviki: yes, thanks!

[13:40] *** aborazmeh left
[13:47] <[Coke]> (docs) yup, 'make htmlify' hangs for me after emitting 'Writing programs document for Perl 6 ...', and top shows it sitting in a coffeescript process doing nothing. (just retried on master to make sure it wasn't something with my branch)

[13:47] *** curt_ joined
[13:47] <jnthn> Whee. I found a way to make Digest::SHA1::Native a bunch faster while I was at it. :)

[13:51] <[Coke]> jnthn++

[13:51] <rafaschip> jnthn: can you make the same change in Moar, while you're at it?

[13:54] <jnthn> rafaschip: Which "same change"?

[13:55] <jnthn> Oh, the faster, you mean?

[13:55] <timotimo> always give everyone the faster :)

[13:55] <rafaschip> Make the change in the function you were calling acidentally before.

[13:55] <jnthn> Oh

[13:55] <jnthn> No, the speedup wasn't in the C code

[13:55] <jnthn> It was in the Perl 6 binding to it

[13:56] <jnthn> https://github.com/bduggan/p6-digest-sha1-native/commit/785e088992ee89f0c43b5bfb33d2f73fdf70f6de

[13:57] <jnthn> So, nothing relevant to nab for Moar.

[13:57] <rafaschip> jnthn++

[13:58] <timotimo> i think we're still taking a string for sha1 on moar, aren't we?

[13:58] <jnthn> timotimo: Yes, though we use it to hash source code, which we slurp in as a string to parse, or at least that was the original purpose :)

[13:58] <timotimo> do we encode that back to utf8 before hashing or something?

[13:59] <jnthn> Not sure. :)

[13:59] <jnthn> If so, only for expedience when implementing the thing :)

[13:59] <rafaschip> m: say Blob.new(1..10).unpack("A*")

[13:59] <camelia> rakudo-moar 3fb04c: OUTPUT«Use of the 'unpack' method is experimental; please 'use experimental :pack'␤  in block <unit> at <tmp> line 1␤␤»

[14:00] <rafaschip> m: use experimental :pack; say Blob.new(1..10).unpack("A*")

[14:00] <camelia> rakudo-moar 3fb04c: OUTPUT«      ␤␤»

[14:00] <rafaschip> m: use experimental :pack; say Blob.new(65..75).unpack("A*")

[14:00] <camelia> rakudo-moar 3fb04c: OUTPUT«ABCDEFGHIJK␤»

[14:01] *** cdg joined
[14:02] <pmurias> jnthn: throwpayloadlex is supposed to throw with lexotic semantics?

[14:03] <jnthn> Yes

[14:04] <jnthn> Well, purely lexical

[14:04] <jnthn> In terms of the location

[14:04] *** aborazmeh joined
[14:04] *** aborazmeh left
[14:04] *** aborazmeh joined
[14:04] <jnthn> But the thing has to be in dynamic scope to be throwable to.

[14:05] <pmurias> if it's not in dynamic scope an error should happen?

[14:05] <andrzejku> :)

[14:06] <pmurias> andrzejku: ?

[14:06] <andrzejku> hi

[14:06] <kalkin-> m: $*REPO.repo-chain.map: *.*installed

[14:06] <camelia> rakudo-moar 3fb04c: ( no output )

[14:06] <jnthn> pmurias: Yes

[14:07] <kalkin-> m: say $*REPO.repo-chain.map: *.*installed # How do i fix this seq error? I don't understand it

[14:07] <camelia> rakudo-moar 3fb04c: OUTPUT«This Seq has already been iterated, and its values consumed␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[14:07] <kalkin-> I mean i understand what it says, but where is the seq which has already been iterated?

[14:07] <jnthn> pmurias: In fact, there's a particular error handler for it registers with hll config iirc

[14:07] *** wamba joined
[14:07] <jnthn> m: say $*REPO.repo-chain.map: *.installed

[14:07] <camelia> rakudo-moar 3fb04c: OUTPUT«No such method 'installed' for invocant of type 'CompUnit::Repository::AbsolutePath'␤  in block <unit> at <tmp> line 1␤␤»

[14:07] <jnthn> m: say $*REPO.repo-chain.map: *.?installed

[14:07] <camelia> rakudo-moar 3fb04c: OUTPUT«(Nil () () (CompUnit::Repository::Installation::InstalledDistribution.new(prefix => "/home/camelia/rakudo-m-inst-2/share/perl6".IO(:SPEC(IO::Spec::Unix),:CWD("/home/camelia")))) Nil Nil Nil)␤»

[14:08] <jnthn> m: say $*REPO.repo-chain.map: *.*installed

[14:08] <camelia> rakudo-moar 3fb04c: OUTPUT«This Seq has already been iterated, and its values consumed␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[14:08] <jnthn> Hm, odd

[14:08] <jnthn> m: say $*REPO.repo-chain.map: { .*installed }

[14:08] <camelia> rakudo-moar 3fb04c: OUTPUT«This Seq has already been iterated, and its values consumed␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[14:08] *** aborazmeh left
[14:08] <pmurias> jnthn: thank you for clarification, some bugs just make me suspect everything ;)

[14:08] <lizmat> .*installed ??

[14:09] <jnthn> pmurias: fwiw the MoarVM impl of it is, iirc, quite clear :)

[14:09] <kalkin-> jnthn: ohh nice, didn't know i can use the question mark to check if method exists

[14:09] <arnsholt> Calls all multi candidates, no_

[14:09] <arnsholt> ?

[14:09] <lizmat> m: say $*REPO.repo-chain.map: *.installed

[14:09] <camelia> rakudo-moar 3fb04c: OUTPUT«No such method 'installed' for invocant of type 'CompUnit::Repository::AbsolutePath'␤  in block <unit> at <tmp> line 1␤␤»

[14:09] <jnthn> No, nothing to do with multi

[14:09] <jnthn> .*foo calls all foo methods in the *inheritance* chain

[14:09] <arnsholt> Ah, right

[14:09] <jnthn> And .+foo does the same but dies if there's not at least one :)

[14:09] <arnsholt> Vertically, not horizontally as it were

[14:10] <jnthn> Aye

[14:11] *** kurahaupo__ joined
[14:21] *** Geth left
[14:21] *** Geth joined
[14:21] *** ChanServ sets mode: +v Geth

[14:26] <dalek> ecosystem: d9955af | (Fernando Correa de Oliveira)++ | META.list:

[14:26] <dalek> ecosystem: Adding Test::Fuzz to the ecosystem

[14:26] <dalek> ecosystem: https://github.com/FCO/Test-Fuzz

[14:26] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/d9955af3f8

[14:26] <dalek> ecosystem: 2056766 | faraco++ | META.list:

[14:26] <dalek> ecosystem: Merge pull request #283 from FCO/master

[14:26] <dalek> ecosystem: 

[14:26] <yoleaux> 8 Jan 2017 21:04Z <AlexDaniel> dalek: We like dogfood. Change the webhook to http://geth.perl6.party/?chan=#perl6-dev (or #moarvm for moarvm), Content-type: application/json and "Send me everything."

[14:26] <dalek> ecosystem: Adding Test::Fuzz to the ecosystem

[14:26] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/20567664e4

[14:26] <yoleaux> 8 Jan 2017 21:04Z <AlexDaniel> dalek: #perl6 I mean

[14:28] * notviki is starting to get sick of the phrase "dogfood"

[14:28] <timotimo> updated the webhook

[14:29] <Geth> ecosystem: d9955af3f8 | (Fernando Correa de Oliveira)++ | META.list

[14:29] <Geth> ecosystem: Adding Test::Fuzz to the ecosystem

[14:29] <Geth> ecosystem: review: https://github.com/perl6/ecosystem/commit/d9955af3f8

[14:29] <Geth> ecosystem: 20567664e4 | faraco++ | META.list

[14:29] <Geth> ecosystem: Merge pull request #283 from FCO/master

[14:29] <Geth> ecosystem: 

[14:29] <Geth> ecosystem: Adding Test::Fuzz to the ecosystem

[14:29] <Geth> ecosystem: review: https://github.com/perl6/ecosystem/commit/20567664e4

[14:29] <timotimo> cool, works apparently

[14:29] <tbrowder> .tell pmurias my planned module (see most wanted modules) will provide PS and EPS functions and classes to produce PS and PDF docs

[14:29] <yoleaux> tbrowder: I'll pass your message to pmurias.

[14:30] *** Geth left
[14:30] <tbrowder> the skeleton is here <https://github.com/tbrowder/PostScript-Lib-Perl6/tree/master>

[14:30] *** Geth joined
[14:30] *** ChanServ sets mode: +v Geth

[14:33] *** Geth left
[14:34] *** Geth joined
[14:34] *** ChanServ sets mode: +v Geth

[14:36] *** Geth left
[14:37] *** Geth joined
[14:37] *** ChanServ sets mode: +v Geth

[14:38] *** Geth left
[14:38] *** Geth joined
[14:38] *** ChanServ sets mode: +v Geth

[14:39] <SmokeMachine> \o/

[14:40] <rafaschip> Paranbéns!

[14:40] <SmokeMachine> Obrigado! :)

[14:40] *** Geth left
[14:40] *** Geth joined
[14:40] *** ChanServ sets mode: +v Geth

[14:43] * notviki is done tweaking Geth's throttle...

[14:43] *** awwaiid joined
[14:43] *** go|dfish left
[14:45] <pmurias> tbrowder: wouldn't it be best to test the exact ps using string comparision in this case?

[14:45] <yoleaux> 14:29Z <tbrowder> pmurias: my planned module (see most wanted modules) will provide PS and EPS functions and classes to produce PS and PDF docs

[14:46] <pmurias> tbrowder: as it seems you would care if the exact ps is generated rather then if it produces the same output

[14:48] <notviki> timotimo: how did you trigger the same merge?

[14:49] <notviki> Or is it GitHub just sending recent data to the new hook :/

[14:50] *** faraco joined
[14:51] <faraco> hi, why #`(multiline comment doesn't work after newline?)

[14:51] <notviki> m: say "x"

[14:51] <camelia> rakudo-moar 731d58: OUTPUT«x␤»

[14:52] <notviki> m: #`(does␤itx␤workx␤)

[14:52] <camelia> rakudo-moar 731d58: ( no output )

[14:52] <notviki> faraco: seems to work fine?

[14:52] <faraco> hmm, maybe I did something wrong

[14:52] <faraco> let me try again

[14:54] <faraco> oh somehow worked now. nevermind

[14:56] *** Undercover joined
[14:56] *** ChanServ sets mode: +v Undercover

[14:58] <andrzejku> is in perl6 something like c++ template system?

[14:59] <DrForr> Parametrized types, maybe?

[14:59] <tadzik> what problem do you need to solve?

[14:59] <andrzejku> I just want to look on syntax

[15:00] <timotimo> notviki: i re-delivered the last payload

[15:00] <timotimo> in the list of recently delivered, there's a three-dots-button that'll let you do that

[15:00] <andrzejku> timotimo, priv?

[15:01] <timotimo> what?

[15:01] <andrzejku> timotimo, priv message

[15:01] <timotimo> what's the context for that?

[15:02] <andrzejku> friendship

[15:03] <timotimo> don't have time now

[15:03] <andrzejku> ok

[15:03] * teatime forces himself to stop thinking about the fact that you could totally use the C preprocessor with Perl 6 code.

[15:05] <arnsholt> teatime: Well, why do you think Perl 5 supports "#line 42", eh?

[15:05] <arnsholt> }:)

[15:05] *** ocbtec joined
[15:05] * pmurias considers snitching on teatime to the thought police

[15:05] <teatime> 09:55 <ttt> you can have the whole pistol in your checked baggage

[15:06] <teatime> 09:55 <ttt> you can have the whole pistol in your checked baggage

[15:06] <teatime> oh god

[15:06] <teatime> wtf

[15:06] <teatime> I am sorry, my trackpad is malfunctioning :(  please forgive.

[15:06] <rafaschip> andrzejku: Read this whole page: https://docs.perl6.org/type/Signature. It's required reading.

[15:06] <eythian> teatime: I hear that you can have the whole pistol in your checked baggage

[15:06] <DrForr> Oof. middle-button stuck?

[15:06] <teatime> I beleive I've seen that said somewhere.

[15:06] *** FROGGS joined
[15:07] <ugexe> you cannot have the whole pistol in your checked baggage, only allah can have the whole pistol in your checked baggage

[15:07] <dalek> perl6-most-wanted: eeb406f | (Curt Tilmes)++ | most-wanted/modules.md:

[15:07] <dalek> perl6-most-wanted: Add WIP for GraphQL

[15:07] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/eeb406fe05

[15:07] <dalek> perl6-most-wanted: 8693999 | RabidGravy++ | most-wanted/modules.md:

[15:07] <dalek> perl6-most-wanted: Merge pull request #37 from CurtTilmes/master

[15:07] <dalek> perl6-most-wanted: 

[15:07] <dalek> perl6-most-wanted: Add WIP for GraphQL

[15:07] <dalek> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/8693999d82

[15:08] *** g4 left
[15:11] <jnthn> So, GTK::Simple uses http://gtk-dlls.p6c.org/ in order to obtain DLLs for GTK on Windows

[15:11] <jnthn> Does anyone know if any other modules have a similar arrangement?

[15:11] <notviki> heh, teatime good job! You've set off all of NSA spyware with baggaged pistols!

[15:12] <jnthn> I'm sorta pondering it for Archive::Libarchive::Raw

[15:13] <rafaschip> jnthn: Just so you know, distros don't allow packaging that.

[15:13] <jnthn> Though it's licensing situation is...confusing: https://github.com/libarchive/libarchive/blob/master/COPYING

[15:13] <Geth> perl6-most-wanted: eeb406fe05 | (Curt Tilmes)++ | most-wanted/modules.md

[15:13] <Geth> perl6-most-wanted: Add WIP for GraphQL

[15:13] <Geth> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/eeb406fe05

[15:13] <Geth> perl6-most-wanted: 8693999d82 | (Jonathan Stowe)++ | most-wanted/modules.md

[15:13] <Geth> perl6-most-wanted: Merge pull request #37 from CurtTilmes/master

[15:13] <Geth> perl6-most-wanted: 

[15:13] <Geth> perl6-most-wanted: Add WIP for GraphQL

[15:13] <Geth> perl6-most-wanted: review: https://github.com/perl6/perl6-most-wanted/commit/8693999d82

[15:13] <rafaschip> And if anything depends on it, it will block them.

[15:13] <jnthn> rafaschip: Can you clarify that a bit?

[15:13] <notviki> timotimo: ah, neat :D

[15:13] *** faraco left
[15:14] <jnthn> (locate libarchive.so on my Ubuntu VM shows it up, for example)

[15:14] <jnthn> (So it seems it is distributed...)

[15:14] <rafaschip> jnthn: Packages cannot make downloads. In fact they test the packages without internet access.

[15:14] <rafaschip> For windows it's acceptable, I think.

[15:14] <jnthn> I did say "on Windows" ;)

[15:15] <rafaschip> jnthn: Yes. I should have agreed with you from the start it's acceptable on windows.

[15:16] <jnthn> Yes, I'm certainly not proposing this for anything besides Windows :)

[15:16] <rafaschip> I was just warning you distros are different.

[15:18] <rafaschip> With that caveat, it's a good solution, I think, but you need to somehow maintain the server. I think the best solution is getting in contact with them and getting the DLLs in the same server. This way there's no need to do the maintenence work in two servers.

[15:18] <rafaschip> And the costs are divided between more people.

[15:19] <jnthn> Ah, seems that p6c.org is the Perl 6 community server

[15:20] <rafaschip> "Perl 6 Community Servers" I just saw it. Do the sponsors allow this kind of use?

[15:21] *** teatime left
[15:22] <jnthn> moritz: I just saw http://gtk-dlls.p6c.org/ and was wondering, if I wanted a similar arrangement for libarchive, if it'd be reasonable to host that binary on p6c.org too. I see gtk-dlls got its own subdomain, is that the way to go? (And if you're the wrong person to ask, who's the right person?)

[15:22] *** Stown joined
[15:23] *** jonas1 left
[15:23] *** FROGGS left
[15:26] <awwaiid> jnthn: have you looked at the Alien:: set of modules on cpan?

[15:27] <jnthn> awwaiid: Have heard of, not really familiar with

[15:27] <awwaiid> They are specifically setting out to improve the external-binary-dependencies library world in a few ways, worth a look and maybe worth stealing some ideas

[15:28] <awwaiid> jnthn: https://metacpan.org/pod/Alien has a good introduction

[15:28] <jnthn> Yeah, found that :)

[15:28] <awwaiid> cool. possibly not what you're immediately needing, but overlaps I think

[15:29] <jnthn> Yes. I think that's the more long term solution :)

[15:29] <jnthn> Or something in that direction.

[15:29] *** awwaiid left
[15:29] *** cdg left
[15:29] *** curt_ left
[15:29] *** awwaiid joined
[15:29] *** curt_ joined
[15:30] *** cdg joined
[15:30] *** andrzejku left
[15:32] <awwaiid> Graham, the current Alien maintainer, attends the DC perl mongers and has lots of good ideas with this and FFI in general

[15:32] <jnthn> *nod*

[15:32] <jnthn> I'm the wrong person to work on a Good Solution to this kind of thing.

[15:32] <jnthn> I know enough about the area to know I don't know anything close to enough about the area. :)

[15:33] <jnthn> I do probably have enough yak shaving time to scratch the "make the libarchive bindings expereince better for Windows users" itch.

[15:33] <jnthn> (Provided a GTK::Simple-esque intermediate-term solution is OK)

[15:40] <tbrowder> pmurias: i think the "proper output" problem may be solved (at least approximately) with a combination of a p6 regex and use of the ghostscript program "ps2ps": a PS distiller which is supposed to normalize and simplify ps input

[15:46] *** jdmmmmm joined
[15:49] <[Coke]> hoelzro: hio.

[15:49] <hoelzro> [Coke]: howdy

[15:58] <rafaschip> When should "andthen" be used instead of "&&", "and" or "//"?

[16:01] <moritz> andthen checks defined, not truth, much like //

[16:02] <jnthn> ugexe: Any idea how I might resolve "No extracting backend available" from zef?

[16:02] <rafaschip> So, it's a lower precedence form of //?

[16:02] <jnthn> It also sets $_ for the RHS, I think?

[16:03] <jnthn> ugexe: Reproduction: "zef install Archive::Libarchive" (on Ubuntu fwiw)

[16:03] <rafaschip> I see. Thanks.

[16:03] <rafaschip> And orelse sets "$!".

[16:04] <jnthn> Oh, panda fails too

[16:04] <jnthn> "fetch stage failed for Archive::Libarchive::Raw: Unable to handle source 'https://github.com/frithnanth/perl6-Archive-Libarchive-Raw'"

[16:05] <notviki> huh

[16:05] <notviki> rafaschip: where did you get the $!?

[16:05] <jnthn> Yeah, I'm confused

[16:05] <jnthn> Oh, you weren't talking to me :)

[16:06] <rafaschip> Oh no, it sets "$_" too.

[16:06] <rafaschip> https://docs.perl6.org/routine/orelse

[16:07] <rafaschip> Sorry for the confusion.

[16:09] <pmurias> in docs.perl.org if I type in "//" in the search box I get sent to "/"

[16:10] <notviki> rafaschip: orselse is the lowerprecedence of //; andthen/notendthen check for definedness, but return Empty when shortcurcuiting, so you can use them in list comprehensions

[16:10] <rafaschip> pmurias: It shows a list for me, starting with / and having // in the second position.

[16:11] <rafaschip> What's a "list comprehension"?

[16:11] <notviki> m: dd [ Int && Num ]

[16:11] <camelia> rakudo-moar 731d58: OUTPUT«[Int]␤»

[16:11] <notviki> m: dd [ Int andthen Num ]

[16:11] <camelia> rakudo-moar 731d58: OUTPUT«[]␤»

[16:11] <pmurias> rafaschip: I get the list too

[16:12] *** khw joined
[16:12] <notviki> pmurias: move the cursor down to "//"

[16:14] <rafaschip> It's LTA, though.

[16:16] <diakopter> I typed dd in docs.perl6.org and it's not in the result list

[16:16] <diakopter> oh, I guess it is, far down

[16:17] *** zakharyas left
[16:18] <rafaschip> notviki: I still don't understand where it would be used. Can you show me an example?

[16:18] <[Coke]> diakopter: there's an issue for 'prefer exact matches in search results', but it ain't done yet.

[16:18] *** geekosaur left
[16:18] *** troys joined
[16:18] *** wictory[m] left
[16:18] *** M-Illandan left
[16:18] *** mulk[m] left
[16:19] *** tadzik left
[16:19] *** geekosaur joined
[16:24] <notviki> rafaschip: I did show the example above

[16:24] <notviki> ranguard: andthen/notandthen are also used internally for with/without handling

[16:24] *** ocbtec left
[16:24] <rafaschip> Why is the second one useful?

[16:24] <notviki> Which second one?

[16:29] <rafaschip> [ Int andthen Num ]

[16:29] <notviki> rafaschip: you don't get any items in the list when the condition fails

[16:30] <rafaschip> So, if they are all undefined, you get an empty list instead of the last value. Cool.

[16:30] <notviki> You get Empty (which is a slip)

[16:30] <notviki> If it gave an empty list it'd still be an item

[16:30] <notviki> m: dd [ () or 42 ]

[16:30] <camelia> rakudo-moar 731d58: OUTPUT«[42]␤»

[16:30] <notviki> m: dd [ () or () ]

[16:30] <camelia> rakudo-moar 731d58: OUTPUT«[]␤»

[16:31] <notviki> really...

[16:31] <notviki> m: dd [ (() or ()), ]

[16:31] <camelia> rakudo-moar 731d58: OUTPUT«[(),]␤»

[16:31] <notviki> m: dd [ (() andthen ()), ]

[16:31] <camelia> rakudo-moar 731d58: OUTPUT«[(),]␤»

[16:31] <rafaschip> Ok, I see.

[16:32] <rafaschip> thanks notviki 

[16:35] <notviki> "So, if they are all undefined" <-- no, if any are undefined; for andthen; if any are defined for notandthen

[16:35] <notviki> Maybe easier to understand what they do by looking at their source: https://github.com/rakudo/rakudo/blob/731d587/src/core/operators.pm#L623-L684

[16:37] *** Stown left
[16:38] <[Coke]> https://github.com/rakudo/rakudo/blob/731d587/src/core/operators.pm#L623-L684

[16:39] <[Coke]> oops. Sorry, working on windows at work today. misclicks aplenty.

[16:40] *** shayan_ joined
[16:40] *** shayan_ left
[16:40] *** thayne left
[16:40] *** skids joined
[16:43] *** shayan_ joined
[16:48] *** sunnavy left
[16:49] *** azertus left
[16:50] <rafaschip> Yep, the code made it clear.

[16:51] <notviki> \o/

[16:51] <rafaschip> u: �

[16:51] <unicodable6> rafaschip, U+FFFD REPLACEMENT CHARACTER [So] (�)

[16:53] <rafaschip> Someone sent me a literal replacement character. Broken Unicode everywhere.

[16:53] *** gcole left
[16:56] *** nicq20 joined
[16:56] <nicq20> hello \o

[16:56] <[Coke]> o/

[16:56] *** tadzik joined
[16:58] *** Praise left
[16:59] *** perlpilot_ joined
[16:59] *** Bucciarati left
[17:03] *** Bucciarati joined
[17:03] *** Bucciarati left
[17:06] *** azertus joined
[17:08] <rafaschip> "I mean, it's sort of loosely analogous to working with Roman numerals instead of Arabic numerals. I mean, it's not that you can't do arithmetic; it's just a bitch. Much more difficult, perhaps, and therefore mentally not -- more constraining. But all of that stuff is now squashed into such a narrow interval that I don't even know when it happened. I remember that the preposterous syntax, the "> >", or whatever syntax that somebod

[17:08] <rafaschip> ...dden there was the vertical bar and just everything clicked at that point. And that was the time then I could start to make up these really neat examples

[17:08] <rafaschip> --Kernighan

[17:08] <[Coke]> EMISSINGTEXT

[17:09] <nicq20> So why are there ~3 different versions of making a Slip?

[17:09] <rafaschip> Thgere's at least 3 different ways to do anything in Perl 6.

[17:10] <[Coke]> It's kind of our motto. *sheepish grin*

[17:10] <nicq20> fair

[17:10] <perlpilot_> Because after 3 different versions of something, we really understand it.

[17:10] <[Coke]> rafaschip's send is here: https://www.princeton.edu/~hos/mike/transcripts/kernighan.htm

[17:12] *** shayan_ left
[17:13] *** Matthew[m] joined
[17:13] *** wictory[m] joined
[17:13] *** M-Illandan joined
[17:13] *** ilmari[m] joined
[17:13] *** dp[m] joined
[17:13] *** xui_nya[m] joined
[17:13] *** Matias[m] joined
[17:13] *** mulk[m] joined
[17:13] *** CIAvash[m] joined
[17:13] *** AlexDaniel joined
[17:14] <AlexDaniel> o/

[17:17] <[Coke]> AlexDaniel: regarding doc ticket to recommend .p6, I think you need to get some community consensus on that.

[17:19] <AlexDaniel> [Coke]: well, these seems to be more popular according to the stats from the ecosystem

[17:19] <AlexDaniel> who puts .p6 scripts into their modules that I don't know 

[17:19] <AlexDaniel> but still

[17:20] <[Coke]> the way module authors are doing it doesn't mean it's the recommmended way, though.

[17:20] *** bwisti joined
[17:20] * [Coke] stares at powershell, and wonders if it's worth trying to get rakudo to build here.

[17:24] <AlexDaniel> but who is talking about the recommended way?

[17:24] <AlexDaniel> “Source files generally use the standard ｢.pm｣ extension, and scripts or executables use ｢.pl｣.”

[17:25] <AlexDaniel> I'm not a native speaker, but google says that the meaning of “generally” is “in most cases; usually”

[17:25] <AlexDaniel> so what's the source for that?

[17:25] *** shayan_ joined
[17:26] * notviki uses .p6 and .pm6

[17:26] * jnthn also

[17:27] * nicq20 as well

[17:27] * AlexDaniel yea

[17:31] *** khw left
[17:34] *** khw joined
[17:35] *** stmuk joined
[17:36] *** FROGGS joined
[17:36] <pmurias> having a recommended file ending ending would be great

[17:37] *** stmuk_ left
[17:38] *** dugword joined
[17:38] <huf> just one?

[17:38] <huf> come *on*, is perl6 perl anymore? :D

[17:39] *** pyrimidine joined
[17:39] *** shayan_ left
[17:40] <jnthn> Hey, we'll still have two: one for modules and one for scripts. :)

[17:41] *** zakharyas joined
[17:41] <notviki> ...and one for meta file that people can't seem to agree on (or at least to remember to use the One True Filename)

[17:43] *** dugword left
[17:43] *** gcole joined
[17:46] *** dugword joined
[17:51] *** cibs left
[17:51] *** dugword left
[17:51] <AlexDaniel> script.timtowtdi6

[17:51] <huf> oh good :D

[17:52] *** cibs joined
[17:53] *** andrzejku joined
[17:55] *** Bucciarati joined
[17:55] <ugexe> if perl6 stopped allowing .pm it would make having a dual language module where you have both perl5 and perl6 modules in the same dist

[17:55] <[Coke]> ugexe: would make it what?

[17:56] <ugexe> make it possible^

[17:56] <[Coke]> yah, but that ship has sailed. and you can call them .whateveryouwant, really.

[17:57] *** xinming left
[17:57] <ugexe> so you have a perl6 distribution that uses Inline::Perl5 to load a perl5 module you are including. CUR::FileSystem will open all .pm and .pm6 files as perl6 modules. The perl5 part has no problem because it does not look at .pm6 files as libraries

[17:59] <[Coke]> Right, but that's possible to do if you want to do it, and isn't worth stopping someone from calling their code that never touches P5 .pm

[18:01] <[Coke]> (IMO)

[18:02] *** xinming joined
[18:04] *** mr-foobar left
[18:07] <ugexe> better github metrics too

[18:10] <pmurias> ugexe: you can add 'use v5' and 'use v6' into your mixed perls modules

[18:11] *** dugword joined
[18:12] *** domidumont left
[18:14] <[Coke]> LHF: is Instant.DateTime in roast? (docs #1120)

[18:15] *** grumble left
[18:18] *** Actualeyes joined
[18:18] *** dugword left
[18:18] *** dakkar left
[18:19] *** shayan_ joined
[18:20] *** mr-foobar joined
[18:25] *** domidumont joined
[18:26] *** cibs left
[18:27] *** cibs joined
[18:33] *** grumble joined
[18:34] <ugexe> m: use v5;

[18:34] <camelia> rakudo-moar af4bb6: OUTPUT«===SORRY!===␤Could not find Perl5 at line 1 in:␤    /home/camelia/.perl6␤    /home/camelia/rakudo-m-inst-2/share/perl6/site␤    /home/camelia/rakudo-m-inst-2/share/perl6/vendor␤    /home/camelia/rakudo-m-inst-2/share/perl6␤    CompUnit::Reposit…»

[18:36] *** wamba left
[18:40] *** zakharyas left
[18:41] *** ufobat left
[18:45] *** Tonik joined
[18:49] <awwaiid> I use .pl for Perl5, Perl6, and Prolog :)

[18:49] <TimToady> .oO(and Poland!)

[18:49] <awwaiid> hehe

[18:50] * perlpilot_ tries not to use .pl for anything

[18:50] <awwaiid> oh true. I use #!/usr/bin/env with no extension once I'm productionizing

[18:51] <perlpilot_> The last time I remember using files that end in .pl was for prolog and when .pl stood for "perl library"  

[18:51] * awwaiid does not remember that

[18:51] <geekosaur> perl4 and earlier when there were no modules

[18:52] <perlpilot_> yep, good old perl 4.036

[18:52] <TimToady> m: my $ext = "pl"; $ext++; say $ext

[18:52] <camelia> rakudo-moar af4bb6: OUTPUT«pm␤»

[18:52] <awwaiid> ah. I started with perl5 and so was indoctrinated later :)

[18:52] <TimToady> obviously "pm" is one better :)

[18:52] <awwaiid> TimToady++ # word math

[18:53] * geekosaur still uses .pl (in perl5) for things that are not intended to become executables, or which are still works in progress. don't have enough p6 around to have settled on an extension for it in those situations

[18:53] * jonadab remembers getting upset with Microsoft for hijacking .inf, when it was already in use for Inform source code.

[18:54] * TimToady remembers getting upset with Microsoft for making extensions so important in the first place...

[18:54] <geekosaur> (also of late I have things which are .pl in the source repo and installed without the extension)

[18:54] <perlpilot_> TimToady: indeed!  And calling them "extensions" instead of suffixes.

[18:54] <perlpilot_> (or did CP/M do that?)

[18:54] *** shayan_ left
[18:54] <geekosaur> enh, that predates microsoft. every DEC OS, for example (and DOS did borrow from CP/M which borrowed from RSX11 or some such)

[18:54] *** kyan joined
[18:55] <perlpilot_> yeah, that part of my memory is very murky

[18:55] *** acrussell joined
[18:55] * jonadab is glad modern OSes didn't borrow more file path stuff from VMS.  That was _confusing_.

[18:55] <jonadab> I would like ; versioning, though.

[18:55] <geekosaur> also VM/SP although they didn't call them either extensions or suffixes (but VM filenames were a bit weird: FOO EXEC A1 where EXEC would be the extension and A1 the device identifier)

[18:56] <jonadab> That is a weird order.

[18:56] <jonadab> If FOO is the filename and A1 the device, I'd expect EXEC to be the directory.

[18:56] <geekosaur> (and under various circumstances the device id could be abbreviated to A or dropped altogether for the default device, which you can imagine made filename parsing "interesting")

[18:57] <TimToady> the bias towards 3 letters was originally based on the use of RAD50 (also called RAD40, depending on what base you were thinking in)

[18:57] <jonadab> Some filesystems actually stored the extension separately from the base filename, so it had its own length limit.

[18:57] <TimToady> ayup

[18:58] <geekosaur> well, the whole DEC thing where they mostly preferred multiples of 3 bits for register sizes (so, 6, 12, 18, 36 bits that I am aware of; the 8 bit PDP11/VAX11 was IIRC mostly for IBM compatibility reasons)

[18:58] <perlpilot_> Wasn't it DEC who also had 9 bit bytes for a while too?

[18:58] <jonadab> 36-bit computing was because that was large enough to store numbers with a certain number of decimal places.

[18:58] <TimToady> well, really, the PDP11 was very much it's own thing

[18:58] <jonadab> Which was important in some of the sciences, I guess.

[18:58] <TimToady> *its

[18:59] <geekosaur> perlpilot_, yes, that was a hack to get IBM compatibility on PDP10's 36 bit word size, so they went one bit over and either ignored the 9th bit or used it for parity or etc.

[19:00] <geekosaur> again because DEC architecture worked much better in 3-bit groups

[19:00] <geekosaur> so splitting a 36 bit register into 8-bit chunks was hard, but into 9 bits was easy (and there was an addressing mode that let you address within a register with a chunk size in multiples of 3 bits and a chunk number)

[19:03] *** Actualeyes left
[19:03] *** FROGGS left
[19:06] *** Actualeyes joined
[19:13] <Geth> ecosystem: 938ced52a6 | (Marc Chantreux)++ | META.list

[19:13] <Geth> ecosystem: porting Rototo to perl6 was a terrible idea

[19:13] <Geth> ecosystem: 

[19:13] <Geth> ecosystem: * the function signatures doesn't work the way perl5 works (much better)

[19:13] <Geth> ecosystem: * there are cleaner solutions outthere (see XML::Writer)

[19:13] <Geth> ecosystem: review: https://github.com/perl6/ecosystem/commit/938ced52a6

[19:16] * lizmat starts working on the P6W

[19:17] *** confundus joined
[19:19] *** pyrimidi_ joined
[19:19] <moritz> ++lizmat

[19:20] *** darutoko left
[19:21] *** pyrimidine left
[19:22] *** bpmedley left
[19:22] *** confundus left
[19:27] *** girafe joined
[19:27] *** cdg left
[19:31] *** pyrimidi_ left
[19:32] *** pyrimidine joined
[19:36] *** confundus joined
[19:37] *** pyrimidine left
[19:38] *** melezhik_ joined
[19:38] *** shayan_ joined
[19:46] *** labster joined
[19:47] *** lukaramu joined
[19:50] *** TEttinger joined
[19:52] *** pyrimidine joined
[19:54] *** troys is now known as troys_

[19:55] <diakopter> karma lizmat

[19:55] <diakopter> .karma lizmat

[19:55] <diakopter> :karma lizmat

[19:56] <lizmat> diakopter: it's spelled "lizmat++"   :-)

[19:56] <diakopter> I guess the karma is ethereal and emergent from the clogs, as opposed to tracked by a bot

[19:58] <moritz> correct

[19:59] <moritz> I'm kinda surprised that nobody has made the effort yet to trawl the logs for karma stats

[20:00] <TimToady> that would demonstrate a lack of enlightenment :)

[20:00] <diakopter> karmable

[20:01] *** pyrimidine left
[20:01] <moritz> we can't be all enlightened

[20:02] *** pyrimidine joined
[20:03] *** curt_ left
[20:06] *** pyrimidine left
[20:07] *** rafaschip left
[20:09] <Geth> ecosystem: melezhik++ created pull request #284: use canonical name for meta file

[20:09] <Geth> ecosystem: review: https://github.com/perl6/ecosystem/pull/284

[20:09] <Geth> ecosystem: 3051606c1c | (Alexey Melezhik)++ | META.list

[20:09] <Geth> ecosystem: use canonical name for meta file

[20:09] <Geth> ecosystem: review: https://github.com/perl6/ecosystem/commit/3051606c1c

[20:09] <Geth> ecosystem: 6071e0aebe | (Alexey Melezhik)++ | META.list

[20:09] <Geth> ecosystem: Merge pull request #284 from melezhik/master

[20:09] <Geth> ecosystem: 

[20:09] <Geth> ecosystem: use canonical name for meta file

[20:09] <Geth> ecosystem: review: https://github.com/perl6/ecosystem/commit/6071e0aebe

[20:09] *** dugword joined
[20:14] *** dugword left
[20:15] *** cibs left
[20:17] *** cibs joined
[20:18] *** bjz joined
[20:21] *** pyrimidine joined
[20:23] *** pmurias left
[20:27] *** wamba joined
[20:30] *** Tonik left
[20:34] *** domidumont left
[20:41] *** kurahaupo__ is now known as kurahaupo

[20:41] <RabidGravy> I'm not sure whether I should pleased or worried that all the tests pass in this thing having refactored a list that gets unpacked all over the place to a proper class and removed a bunch of methods

[20:50] *** espadrine joined
[20:55] *** bjz left
[20:57] *** neewbie joined
[20:58] <neewbie> hello

[20:58] <neewbie> there is any place where can i ask for help in perl 6? i'm a beginner

[20:58] <perlpilot_> neewbie: this is the place :)

[21:00] <neewbie> thanks, i have this question: how can i iterate over chars in a string? i tried my $string "help"; for $string -> $t { say $t} 

[21:00] <moritz> for $string.comb -> $t { say $t }

[21:00] <neewbie> but it iterates over the string, returning the string itself

[21:00] *** cdg joined
[21:00] <neewbie> thanks moritz! :D

[21:00] *** nicq20 left
[21:00] <moritz> m: for 'abcde'.comb -> $t { say $t }

[21:00] <camelia> rakudo-moar 6703b4: OUTPUT«a␤b␤c␤d␤e␤»

[21:03] <neewbie> If no matcher is supplied, a list of characters in the string (e.g. $matcher = rx/./) is returned.

[21:03] <neewbie> thanks :D

[21:10] *** troys_ is now known as troys

[21:12] *** melezhik_ left
[21:12] <perlpilot_> neewbie: ooc, what are you doing that needs iterating the characters of a string?

[21:13] <neewbie> https://www.reddit.com/r/dailyprogrammer/comments/5m034l/20170104_challenge_298_intermediate_too_many_or/

[21:14] <perlpilot_> neewbie: cool

[21:17] <confundus> neewbie: I wanted to do the hard #297 using grammars, but couldn't pull it off :(

[21:18] <neewbie> i don't even know what grammars is in perl =(

[21:18] <neewbie> actually, even in english my grammar is bad x-x

[21:19] <AlexDaniel> lol, this output format

[21:20] <AlexDaniel> ah wait

[21:20] <AlexDaniel> “output: (as internal arrays to your language)”

[21:22] <confundus> neewbie: they are really cool, imagine describing just the structure of something and let perl 6 do all the parsing

[21:26] <neewbie> i'll try to find a youtube video about it

[21:26] <perlpilot_> neewbie: you could start at https://docs.perl6.org/language/grammar_tutorial

[21:27] *** shayan_ left
[21:27] <neewbie> thanks

[21:28] *** neewbie left
[21:29] *** neewbie joined
[21:31] *** Actualeyes left
[21:34] <neewbie> can i have the index with the string.comb? because the .WHAT says it is a Seq, no an array. i was trying to do .kv to return the index and value of the char

[21:35] <geekosaur> should be able to apply .list to it?

[21:35] <neewbie> thanks!!!

[21:35] <geekosaur> indices are not very useful with Seq since it goes away after iteration

[21:36] <perlpilot_> m: my $s = "foobar"; for $s.comb.kv -> $i, $v { say "$i: $v" }   # but ... you can do what you asked.

[21:36] <camelia> rakudo-moar 6703b4: OUTPUT«0: f␤1: o␤2: o␤3: b␤4: a␤5: r␤»

[21:36] *** kurahaupo left
[21:37] *** kurahaupo__ joined
[21:37] <neewbie> hm

[21:38] <neewbie> so whats the difference between .comb.kv to .comb.list.kv? i checked, it was a typo in the variable name, i'm sorry

[21:41] <timotimo> shouldn't be a noticable difference

[21:44] *** Tonik joined
[21:46] *** confundus left
[21:46] <AlexDaniel> m: grammar G { token TOP { (<-[()]>+)? [[‘(’ ~ ‘)’ <x=.TOP> ] (<-[()]>+)?]* } }; say G.parse(‘sum ((1 2 3) (3 4 5) join)’)

[21:46] <camelia> rakudo-moar 6703b4: OUTPUT«｢sum ((1 2 3) (3 4 5) join)｣␤ 0 => ｢sum ｣␤ x => ｢(1 2 3) (3 4 5) join｣␤  x => ｢1 2 3｣␤   0 => ｢1 2 3｣␤  1 => ｢ ｣␤  x => ｢3 4 5｣␤   0 => ｢3 4 5｣␤  1 => ｢ join｣␤»

[21:46] <AlexDaniel> eval: grammar G { token TOP { (<-[()]>+)? [[‘(’ ~ ‘)’ <x=.TOP> ] (<-[()]>+)?]* } }; say G.parse(‘sum ((1 2 3) (3 4 5) join)’); .say for ^9999

[21:46] <evalable6> AlexDaniel, rakudo-moar 6703b4c: OUTPUT«｢sum ((1 2 3) (3 4 5) join)｣␤ 0 => ｢sum ｣␤ x => ｢(1 2 3) (3 4 5) join｣␤  x => ｢1…»

[21:46] <evalable6> AlexDaniel, Full output: https://gist.github.com/6f2bdd1aeced96d194a859997e9c81cf

[21:47] <AlexDaniel> this seems to pass the 298 challenge

[21:47] <AlexDaniel> slap on some Actions and you're ready to go

[21:47] <AlexDaniel> oops, I mean 297

[21:48] <AlexDaniel> ah wait, there's already one Perl 6 solution there!

[21:49] <neewbie> impressive

[21:51] *** floutenvy joined
[21:52] <diakopter> where is the 297 challenge

[21:52] <diakopter> nm I see the ilnk

[21:54] *** cibs left
[21:56] *** cibs joined
[21:57] *** Technaton joined
[21:59] <andrzejku> hey

[21:59] <andrzejku> Perl6 is more functional

[21:59] <andrzejku> or imperative?

[21:59] <andrzejku> I cann't feel it

[22:00] <perlpilot_> andrzejku: it's whatever you need it to be.

[22:01] <skids> funcoolperative

[22:03] <gfldex> skids: you Sir are wrong!

[22:03] <gfldex> m: say so v6 ~~ Cool;

[22:03] <camelia> rakudo-moar 6703b4: OUTPUT«False␤»

[22:03] *** floutenvy left
[22:03] <skids> Ah but:

[22:03] <skids> m: say so "Perl6" ~~ Cool

[22:03] <camelia> rakudo-moar 6703b4: OUTPUT«True␤»

[22:04] *** skids left
[22:04] <jnthn> As I see it, Perl 6 doesn't try and force you to program in a functional style, but it certainly invites it. :)

[22:04] <gfldex> I stand corrected.

[22:04] <gfldex> m: say so * ~~ Cool;

[22:04] <camelia> rakudo-moar 6703b4: OUTPUT«{ ... }␤»

[22:05] <gfldex> Whatever is cool later.

[22:05] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/01/09/2017-02-dogfooding-and-powerbotting/

[22:06] *** floutenvy joined
[22:07] <notviki> What are tuits?

[22:08] *** setty1 joined
[22:09] *** RabidGravy left
[22:10] *** kurahaupo__ left
[22:10] <lizmat> notviki: seriously ?

[22:10] <notviki> wow big weekly

[22:11] <notviki> lizmat: well, I know it as "get to it" as find time to do something, but the weekly says "come get your tuits at the booth"... so ... what do people get?

[22:11] <lizmat> http://blog.liruoko.ru/images/tuit/tuit_002_small.jpg

[22:12] * notviki still doesn't get it.

[22:12] <notviki> What's it for?

[22:12] <gfldex> looks like a pet rock to me :->

[22:12] *** acrussell left
[22:12] <lizmat> it's round

[22:13] <perigrin> they're round tuits ... 

[22:13] <lizmat> if I give it to you, you get around to it

[22:13] <perigrin> lizmat: you guys need to make stick versions now ... 

[22:13] <lizmat> stick versions?  elaborate  :-)

[22:14] <perigrin> lizmat: so that people can stick to it ... 

[22:14] <perigrin> and keep doing whatever awesome thing they were doing before.

[22:14] <perigrin> when they got around to it.

[22:14] <notviki> get round toits at the booth?

[22:14] <notviki> I don't get it.

[22:14] <notviki> lizmat++ good and long weekly.

[22:15] <lizmat> notviki: you get around to it === you get a round tuit

[22:15] *** andrzejku left
[22:15] <perigrin> it's a terrible english language pun.

[22:15] <notviki> But why? Just for the pun?

[22:15] <notviki> What you do with them?

[22:15] <lizmat> it's a project management tool for coworkers who tell you "they didn't get around to it"

[22:15] <notviki> Ah haha

[22:16] <lizmat> you give it to them, and they got around to it  :-)

[22:16] * notviki now wants one :P

[22:16] * perigrin has a number of them on his bedside shelf.

[22:17] * notviki thought for years perigrin was female....

[22:17] * jnthn has a pile of them on top of his computer :)

[22:17] <perlpilot_> I think I gave all of my round tuits away

[22:17] <perlpilot_> I do have a lucky wooden nickel under the monitor in front of me though

[22:17] <notviki> Only got square ones left? :P

[22:17] <perigrin> notviki: the beard usually gives it away, but IRC makes that hard to see.

[22:18] <notviki> ehe

[22:19] <perlpilot_> notviki: I gave all mine to friends/coworkers as encouragement and in the interest of "spreading the love"  :-)

[22:21] *** dugword joined
[22:21] <gfldex> lizmat: how did you get rakudo onto the github showoff list?

[22:21] *** Gasher joined
[22:22] <AlexDaniel> hm… these tuits seem to be flat

[22:23] <AlexDaniel> depends on how you look at them, I guess :)

[22:23] *** shayan_ joined
[22:24] <perigrin> AlexDaniel: there's not a lot ... to ... it.

[22:24] <lizmat> gfldex: I contacted Github using the comment form

[22:25] <gfldex> told you so! :->

[22:25] <lizmat> yup  :-)

[22:25] *** dugword left
[22:27] *** cpage_ left
[22:32] <perlpilot_> AlexDaniel: now you've got me wondering how hard it would be to print stuff on wooden spheres for "really round" tuits.  :)

[22:33] <lizmat> wouldn't that be a spherical tuit instead of a round one ?

[22:33] <perlpilot_> they'd be round in 3 dimensions instead of just 2

[22:34] * lizmat would prefer to have them round in the 4th dimension

[22:34] <AlexDaniel> bwhahaha

[22:35] <AlexDaniel> u: ROUND

[22:35] <unicodable6> AlexDaniel, U+047A CYRILLIC CAPITAL LETTER ROUND OMEGA [Lu] (Ѻ)

[22:35] <unicodable6> AlexDaniel, U+047B CYRILLIC SMALL LETTER ROUND OMEGA [Ll] (ѻ)

[22:35] *** pyrimidine left
[22:35] <unicodable6> AlexDaniel, https://gist.github.com/67c3850c7b94515e6e2bb061f99b9f40

[22:36] *** pyrimidine joined
[22:37] *** shayan_ left
[22:41] *** pyrimidine left
[22:45] *** Tonik left
[22:46] <neewbie> why do i get his error if my 'ifs' are corrected nested ? Missing block (whitespace needed before curlies taken as a hash subscript?)

[22:46] <lizmat> neewbie: because Perl 6 doesn't need parens for conditions in if and the like

[22:46] <lizmat> if *does* need to know where the block starts

[22:46] <lizmat> and it does that by whitespace

[22:47] <gfldex> neewbie: please fill this form: https://gist.github.com/

[22:48] <neewbie> so         if (@stack[*-1][1] eq '(') { is wrong?

[22:50] <lizmat> m: my @stack; if @stack[*-1][1] eq '(' { }

[22:50] <camelia> rakudo-moar 6703b4: OUTPUT«Effective index out of range. Is: -1, should be in 0..^Inf␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[22:52] <gfldex> neewbie: you may have some runaway quotes

[22:52] <gfldex> we could tell you if you would show us the code

[22:52] <lizmat> afk&

[22:55] *** cpage_ joined
[22:56] <neewbie> gfldex: https://gist.github.com/anonymous/940e1d578e30609ca091550e948ab435 

[22:56] <neewbie> i don't know how to think like perl

[22:56] <b2gills> In case anybody was wondering I believe yoleaux is run by David P. Kendal dpk.io

[22:56] <b2gills> ( yoleaux is hosted by xn--ht-1ia18f.nonceword.org and I came across ~dpk@xn--ht-1ia18f.nonceword.org with a google search )

[22:57] <gfldex> add a ' ' before { in line 8

[22:57] <neewbie> sigh

[22:57] <neewbie> thanks

[22:57] <neewbie> Y_Y

[22:59] <gfldex> https://gist.github.com/gfldex/f63f6e36f402f687dab263b57306bcbb/revisions

[22:59] <gfldex> i like gist :)

[23:05] *** pyrimidine joined
[23:09] *** lukaramu left
[23:09] *** jdmmmmm left
[23:12] *** jraglin joined
[23:13] *** jraglin left
[23:14] *** jraglin joined
[23:16] *** cpage_ left
[23:17] *** shayan_ joined
[23:17] *** TEttinger left
[23:19] *** cpage_ joined
[23:19] *** rpburkholder joined
[23:25] <Geth> doc: 429b9d92ae | (Samantha McVey)++ | util/trigger-rebuild.txt

[23:25] <Geth> doc: Trigger doc rebuild to pull in highlighter fixes

[23:25] <Geth> doc: 

[23:25] <Geth> doc: https://github.com/perl6/atom-language-perl6/commit/4b3f6701af4a605f39dfaf1a03493edc3aea476d

[23:25] <Geth> doc: review: https://github.com/perl6/doc/commit/429b9d92ae

[23:25] *** floutenvy left
[23:26] *** wamba left
[23:27] *** wamba joined
[23:27] *** rindolf left
[23:28] <samcv> anybody good with regex want to assist with this highlighter issue

[23:28] <samcv> see https://regex101.com/r/lkY7j5/1

[23:29] <samcv> trying to stop word quoting if there is a `+` anywhere before it, but i cannot do greedy backreferences

[23:32] *** cpage_ left
[23:32] *** raschip joined
[23:34] *** TEttinger joined
[23:39] *** jraglin left
[23:40] *** jraglin joined
[23:40] *** shayan_ left
[23:42] *** floutenvy joined
[23:44] *** bpmedley joined
[23:47] *** shayan_ joined
[23:48] <raschip> Brazillians are starting to get happier because Carnival is getting closer. Here is little bit for you guys: https://www.youtube.com/watch?v=dyNJ8m0lUiU

[23:49] *** floutenvy left
[23:49] *** dugword joined
[23:49] *** dugword left
[23:49] *** dugword joined
[23:50] *** jraglin left
[23:52] *** dugword left
[23:54] *** floutenvy joined
[23:55] *** jraglin joined
[23:57] *** floutenvy left
