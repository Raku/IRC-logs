[00:00] *** perigrin_ left
[00:01] *** ruschlem_ is now known as ruschlem

[00:10] *** cdg joined
[00:15] *** cdg left
[00:18] *** Rawriful joined
[00:22] *** ruschlem left
[00:23] *** psychoslave left
[00:39] *** wamba left
[00:54] *** woolfy joined
[00:54] *** woolfy left
[01:03] *** rindolf left
[01:15] *** comborico1611 left
[01:15] *** cdg joined
[01:20] *** cdg_ joined
[01:20] *** cdg left
[01:23] *** cdg joined
[01:23] *** aindilis joined
[01:24] *** cdg_ left
[01:26] *** cdg_ joined
[01:27] *** cdg left
[01:30] *** manchicken joined
[01:30] *** cdg_ left
[01:38] <manchicken> Hopefully I will _finally_ be able to run CI on osx with this...

[01:39] <manchicken> Looks like travis doesn't handle CWD the same way with OSX as it does in GNU/Linux.

[01:39] <manchicken> Anybody know if there's a way to get Travis-CI to cache your rakudo build?

[01:40] <manchicken> I keep having to wait for this thing to build Perl 6 before it'll even run my tests.

[01:46] <timotimo> i know only for linux; there's packages for that

[01:47] <manchicken> Well crap...

[01:47] <manchicken> This thing won't test because the DYLIB loader can't find the .so that the test needs. It's built, you can see the successful linker call to make it, and it's making it in the right path, but for some reason it just won't freakin' work.

[01:49] <manchicken> The funny thing is that it works fine on my Mac.

[01:53] <timotimo> i didn't know you can use .so on osx

[02:06] *** cdg joined
[02:10] <geekosaur> it's nto the default but dyld does look for .so as a fallback, as of I think Lion

[02:10] <geekosaur> badically to make porting easier

[02:11] <manchicken> I meant `dylib`.

[02:11] <geekosaur> you do still run into fundamental incompatibilities in the way dynamic loading works, though; if some .so is not being found, first place to look is the RPATH entries in the thing loading it

[02:11] <geekosaur> (or ,dylib)

[02:12] <manchicken> Yeah, I pulled the DYLIB path stuff in, but I don't think it's putting it where I expected.

[02:12] <geekosaur> because unlike linux/ELF, it does not assume default locations

[02:12] <manchicken> I'm trying a different approach.

[02:12] <geekosaur> paths can be relative to RPATH entries (with @rpath tokens) but the default behavior is absolute paths

[02:12] *** function joined
[02:13] <manchicken> https://travis-ci.org/manchicken/perl6-Fcntl/jobs/320869746

[02:14] <titsuki_> manchicken: you can automatically decide that your library should use .so or .dylib by calling $*VM.platform-library-name. (e.g. https://github.com/titsuki/p6-Geo-Hash/blob/master/Build.pm#L7 )

[02:14] <manchicken> This would be a lot easier if it didn't build rakudobrew every bloody time.

[02:14] <manchicken> titsuki_, I don't think that's my problem. I'm using `LibraryMake` which seems to do that fun for me.

[02:14] <manchicken> I think it is something just as simple as the path is jacked.

[02:15] <manchicken> I have a library I'm building that is only for the tests.

[02:15] <manchicken> It's not in my META6, because it shouldn't be installed.

[02:15] *** function left
[02:16] <geekosaur> you don;t have a path on that at all. that was what I meant by the thing about absolute paths

[02:16] <manchicken> For this Fcntl implementation, I wrote a tiny C program which just appends the machine-specific values for all of the relevant constants to a Perl 6 template file, and then that's your module. To test that, I made a simple library which has a function that compares those values coming from Perl 6 over nativecall to make sure that they make it back OK.

[02:16] <titsuki_> manchicken: ok, I see... ( and you can use it in Makefile: https://github.com/titsuki/p6-Geo-Hash/blob/master/src/Makefile.in#L7 )

[02:17] <geekosaur> and... is $TRAVIS_BUILD_DIR == '.' ?

[02:17] <manchicken> Dunno, about to investigate that.

[02:17] <manchicken> Again, it takes like 10 minutes between runs. Super slow going.

[02:18] <manchicken> Does anybody know how to cache the rakudobrew build?

[02:18] <geekosaur> (more precisely/usefully is it `pwd`)

[02:18] *** Rawriful left
[02:18] <geekosaur> ...or possibly $*CWD but that introduces other complexities

[02:20] *** manchicken left
[02:21] *** manchicken joined
[02:25] <manchicken> Sorry, machine went to sleep on me.

[02:25] <manchicken> Does anybody know how to make travis hold on to its perl6 build?

[02:31] *** silug left
[02:36] <manchicken> It's been a long time since I had a neat little project to dig into that had any greenfield stuff to do.

[02:46] <manchicken> I think I found the problem...

[02:46] <manchicken> $ ls -ltr $TRAVIS_BUILD_DIR/resources/lib

[02:46] <manchicken> ls: /Users/travis/build/manchicken/perl6-Fcntl/resources/lib: No such file or directory

[02:46] <manchicken> The $TRAVIS_BUILD_DIR is `/Users/travis/build/manchicken/perl6-Fcntl`

[02:46] <manchicken> So, that path should be there.

[02:48] *** ilbot3 left
[02:54] *** manchicken left
[02:54] *** cdg left
[02:55] *** cdg joined
[02:56] *** ilbot3 joined
[02:56] *** ChanServ sets mode: +v ilbot3

[02:57] *** manchicken joined
[02:59] *** cdg_ joined
[02:59] *** cdg left
[03:01] *** cdg joined
[03:04] *** cdg_ left
[03:06] *** cdg left
[03:06] *** cdg joined
[03:11] *** cdg left
[03:13] *** neoncontrails joined
[03:13] *** cdg joined
[03:16] *** cdg left
[03:16] *** cdg_ joined
[03:17] *** unicodable6 left
[03:17] *** squashable6 left
[03:17] *** benchable6 left
[03:17] *** reportable6 left
[03:17] *** unicodable6 joined
[03:17] *** ChanServ sets mode: +v unicodable6

[03:17] *** benchable6 joined
[03:17] *** squashable6 joined
[03:17] *** ChanServ sets mode: +v benchable6

[03:17] *** ChanServ sets mode: +v squashable6

[03:17] *** reportable6 joined
[03:20] *** cdg_ left
[03:28] <manchicken> I don't think Travis likes me.

[03:33] *** araraloren_ joined
[03:50] *** anopperl6 joined
[03:51] <anopperl6> How to use seq into loop perl6

[04:03] *** anopperl6 left
[04:04] *** variable joined
[04:05] *** cdg joined
[04:07] *** cdg_ joined
[04:07] <manchicken> Progress!

[04:07] <manchicken> I now have the library built for OSX.

[04:09] <manchicken> p6: for <red yellow green>.Seq -> $x { $x.say }

[04:09] <camelia> rakudo-moar 9606aea22: OUTPUT: «red␤yellow␤green␤»

[04:09] <manchicken> Oh... he left.

[04:09] *** cdg left
[04:12] *** cdg_ left
[04:16] *** neoncontrails left
[04:25] *** pilne joined
[04:34] <manchicken> I _really_ need to find a way to speed up the travis builds.

[04:35] <variable> one thing I really like about perl6: literal rationals 

[04:35] <variable> finally, a language gets it right

[04:42] *** cdg joined
[04:46] <manchicken> Getting annoyed with Travis and OSX...

[04:47] *** cdg left
[05:00] *** Cabanossi left
[05:02] *** Cabanossi joined
[05:13] <manchicken> Yeah, I'm at a loss here. I wonder if there's something funky about the virtualization going on with the `dlopen()` system call on Travis.

[05:23] *** variable left
[05:47] <manchicken> Well, Travis is definitely using an old version.

[05:49] <manchicken> Kernel version 16.7.0... that's OSX Panther...

[05:50] *** konsolebox left
[05:53] *** konsolebox joined
[05:54] *** cpage_ joined
[05:56] <manchicken> Oh, no, that was iOS 10.3.3, not OSX.

[05:57] *** cpage left
[05:57] *** cpage_ is now known as cpage

[06:00] *** manchicken left
[06:02] *** jeromelanteri joined
[06:14] *** manchicken joined
[06:17] *** eroux joined
[06:17] *** eroux left
[06:26] *** aindilis left
[06:27] *** aindilis joined
[06:39] *** khw left
[07:05] *** Kaiepi left
[07:08] *** Kaiepi joined
[07:13] *** wamba joined
[07:14] *** xcm left
[07:15] *** darutoko joined
[07:15] *** xcm joined
[07:15] *** psychoslave joined
[07:20] *** Actualeyes joined
[07:22] *** jeromelanteri left
[07:28] *** manchicken left
[08:31] *** parv joined
[08:38] *** mson_ joined
[08:47] *** mson_ is now known as mson

[08:55] *** psychoslave left
[09:17] *** wamba left
[09:18] *** psychoslave joined
[09:25] *** rindolf joined
[09:27] *** setty1 joined
[09:30] *** hrrs01 joined
[09:38] *** hrrs01 left
[09:47] *** psychoslave left
[09:53] *** philomath_ joined
[09:56] *** xcm left
[09:57] *** xcm joined
[10:08] *** rindolf left
[10:25] *** Rawriful joined
[10:26] *** psychoslave joined
[10:32] *** xcm left
[10:35] *** philomath_ left
[10:35] *** rindolf joined
[10:35] *** xcm joined
[10:41] *** cognominal joined
[10:45] *** TEttinger left
[10:53] *** mson left
[11:02] *** eliasr joined
[11:02] *** Guest49524 joined
[11:03] <Guest49524> how to do `echo test | ./script.p6 a b c`?

[11:04] <timotimo> hey Guest49524 

[11:05] <timotimo> if you want the script to run with perl6, you'll have to put #!/usr/bin/env perl6 as the very first line

[11:05] <timotimo> and of course chmod +x the file

[11:05] <timotimo> then it should work

[11:05] <Guest49524> timotimo: I have done those, but @*ARGS doesn't contain "test" from echo.

[11:06] <timotimo> that is correct, you will have to read it from the stdin. for example slurp() will give you the entire data that was piped in

[11:06] <timotimo> there's also lines() which you can loop over to get the data line-by-line

[11:06] <timotimo> you can play with that with our evalbot, like so:

[11:07] <timotimo> m: say lines()[3]

[11:07] <camelia> rakudo-moar e5bb9bd20: OUTPUT: «         »Ich lösche die Flamm.«␤»

[11:07] <timotimo> (we have some example data that always gets piped in; this is from macbeth i think?)

[11:07] <timotimo> yes, it's the opening act of macbeth

[11:07] <timotimo> m: .say for slurp.words

[11:07] <camelia> rakudo-moar e5bb9bd20: OUTPUT: «»Wann␤treffen␤wir␤drei␤wieder␤zusamm?«␤»Um␤die␤siebente␤Stund‘,␤am␤Brückendamm.«␤»Am␤Mittelpfeiler.«␤»Ich␤lösche␤die␤Flamm.«␤»Ich␤mit«␤»Ich␤komme␤vom␤Norden␤her.«␤»Und␤ich␤vom␤S…»

[11:08] <timotimo> the tiny ␤ symbols replace what used to be a proper newline that the program outputted

[11:12] <Guest49524> `say @*ARGS.perl;` ...that will work for `echo test | ./script.p6 a b c` to get ["a","b","c"]

[11:12] <Guest49524> `say slurp.perl;` ...that will work for `echo test | script.p6` to get "test\n"

[11:13] <Guest49524> but can you get both "test\n" and ["a","b","c"] ?

[11:13] <Guest49524> from `echo test | ./script.p6 a b c`

[11:14] <timotimo> sure, how do you want it to look, exactly?

[11:14] <Guest49524> IDK? I guess just store them into separate variables?

[11:15] <timotimo> well, the arguments are already in a separate variable, so you can just "my $all-data = slurp()"

[11:16] <Guest49524> slurp() tries to access "a", "b", and "c", as files?

[11:19] <timotimo> oh!

[11:19] <timotimo> sorry, i should have tried it locally

[11:19] <timotimo> of course, that's the argfiles trick

[11:19] <timotimo> you'll actually need to refer to stdin in this case: $*IN.slurp

[11:22] *** psychoslave left
[11:26] <Guest49524> how do you check if $*IN is empty? without `echo test` being piped in it wants user input

[11:30] *** Zoffix joined
[11:31] <Guest49524> IO::Handle<IO::Special.new(what => "<STDIN>")>(opened, at octet 0)

[11:31] <Guest49524> I think it's the "octet 0" part?

[11:31] <timotimo> no, that just means the file pointer is at the very beginning

[11:31] <Zoffix> Guest49524: no direct way, but you could check if it's a TTY:  .t and .slurp.say with $*IN

[11:31] <Zoffix> Guest49524: no direct way, but you could check if it's a TTY:  .t or .slurp.say with $*IN

[11:32] <timotimo> "tty" should be searchable in the docs, IMO

[11:34] <Geth> ¦ doc: 4c01cd8253 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Type/IO/Handle.pod6

[11:34] <Geth> ¦ doc: Add `tty` as index marker for .t method

[11:34] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/4c01cd8253

[11:34] <synopsebot> Link: https://doc.perl6.org/type/IO::Handle

[11:35] <timotimo> thank you!

[11:42] *** konsolebox left
[11:43] <Guest49524> my $args = @*ARGS.perl;my $pipe;.t or $pipe=.slurp with $*IN;$pipe.say;$args.say;

[11:43] <Guest49524> what about prompting after that?

[11:44] <Guest49524> and for some reason $args has to be before $pipe but that is fine I just do not know why

[11:44] <timotimo> you mean asking the user to input something on the terminal?

[11:44] <Guest49524> yes

[11:45] <timotimo> then you can ".t and $userinput = .slurp with $*IN"

[11:45] <timotimo> the ".t or ..." means "execute the thing on the right if it ($*IN) is not an interactive terminal"

[11:46] <timotimo> and ".t and ..." means the opposite, i.e. "only do the thing on the right if it is an interactive terminal"

[11:46] *** setty1 left
[11:46] <timotimo> you can use "prompt" instead of .slurp there, that will also let you pass a little piece of text to display to the user

[11:48] *** konsolebox joined
[11:50] <Guest49524> that only works for `./script.p6 a b c` ...not for `echo test | ./script.p6`

[11:50] *** itaipu joined
[11:50] <timotimo> yeah, you can't ask the user for input after you piped something in

[11:51] <Guest49524> not ever?

[11:51] <timotimo> well, you *can*, but you'll have to do something like "open('/dev/tty', :rw)" and interact with that directly

[11:51] <Guest49524> what about subshelling?

[11:52] <timotimo> probably :w, :r actually

[11:52] <timotimo> not :rw

[11:52] <timotimo> echo "input" | perl6 -e 'say slurp; my $tty = open("/dev/tty", :r, :w); $tty.get.say'

[11:52] <timotimo> this outputs "input" and then you can type something in manually and it'll echo it

[11:52] <timotimo> i'll be AFK for a bit now

[11:59] <Guest49524> thanks!

[12:01] *** pmurias joined
[12:07] *** Zoffix left
[12:12] <geekosaur> what do you mean by subshelling?

[12:12] <geekosaur> also you seem a bit confused about how things work

[12:13] <geekosaur> you piped in, therefore you replaced the terminal as standard input with something else

[12:24] <Guest49524> shell "perl6 -e 'prompt \"query? \"'";

[12:24] <Guest49524> but how to get the prompt?

[12:29] *** xcm is now known as Guest47718

[12:29] *** Guest47718 left
[12:29] <araraloren_> shell return a Proc::Async

[12:30] *** xcm joined
[12:31] <Guest49524> https://docs.perl6.org/routine/run.html

[12:32] <timotimo> Guest49524: the prompt sub returns the text the user inputted

[12:33] <Guest49524> not from shell() though?

[12:33] <timotimo> no, but you can get that with qx and qqx quoting constructs if you want

[12:34] <Guest49524> true

[12:34] <Guest49524> im just a noob giving perl6 another attempt

[12:37] <Geth> ¦ doc: dd9e1ca5f8 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/pod.pod6

[12:37] <Geth> ¦ doc: update per current capability

[12:37] <Geth> ¦ doc: 

[12:37] <Geth> ¦ doc: improve and extend information on the POD config formats

[12:37] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/dd9e1ca5f8

[12:37] <synopsebot> Link: https://doc.perl6.org/language/pod

[12:38] <timotimo> https://docs.perl6.org/language/ipc - did you read this?

[12:43] <Guest49524> maybe a while ago?

[12:44] *** greppable6 left
[12:44] *** greppable6 joined
[12:49] *** pmurias left
[12:50] <Guest49524> how long will it be until perl6 is finished?

[12:52] <araraloren_> :) not get it

[12:53] <Guest49524> lots of unimplemented features?

[12:53] <araraloren_> IDK

[12:53] <timotimo> perl6 has had its release two years ago now

[12:53] *** parv left
[12:53] <Guest49524> https://docs.perl6.org/language/pragmas

[12:53] <Guest49524> NYI & TBD

[12:54] <jnthn> Those shouldn't really be in user-facing docs; they're just proposed things for future Perl 6 versions at this point.

[12:54] <jnthn> That may happen or may never happen.

[12:55] <timotimo> when perl6 is "finished" it is dead

[12:55] <araraloren_> such as `goto` ?

[12:56] <Guest49524> Real programmers can write assembly code in any language.

[12:57] <jnthn> It's like asking "when will JavaScript/C#/Java be finished", and the answer is pretty much "when nobody cares to improve them any more"

[12:58] <jnthn> Like Perl 6, they all exist in a current useful state, and all have ideas/plans for the future.

[12:58] <araraloren_> yeah, when C# 1.0 released, it not have too much feature

[12:58] <jnthn> heh, really...I remembering writing that :-)

[12:59] <jnthn> lunch, bbiab :)

[12:59] <araraloren_> 88

[13:00] <timotimo> huh, 88?

[13:00] <araraloren_> bye bye

[13:00] <timotimo> interesting

[13:01] <araraloren_> In china, `8`'s pronunciation is same as `bye`

[13:01] <timotimo> oh, ok

[13:01] <araraloren_> so we use 88 short for bye bye

[13:01] <timotimo> in germany, it's a rather hateful symbol of a rather evil group of people ...

[13:02] <Geth> ¦ doc: 29f9b25dde | (Elizabeth Mattijsen)++ | doc/Language/pragmas.pod6

[13:02] <Geth> ¦ doc: Move unlikely to be implemented MONKEY pragmas into seperate section

[13:02] <synopsebot> Link: https://doc.perl6.org/language/pragmas

[13:02] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/29f9b25dde

[13:02] <araraloren_> oh

[13:02] <timotimo> no problem, it's obvious you didn't mean that

[13:03] <AlexDaniel> lizmat++

[13:03] <araraloren_> yeah, :)

[13:03] <lizmat> m: use trace; say "foo"; no trace; say "bar"   # use trace *is* implemented

[13:03] <camelia> rakudo-moar 1ea0c9084: OUTPUT: «2 (<tmp> line 1)␤say "foo"␤foo␤bar␤»

[13:06] <araraloren_> something about this: 88 means byebye, 666 means `cool awesome dope` 

[13:06] <timotimo> yeah, just not exactly defined in terms of semantics

[13:08] *** Rawriful left
[13:09] <Geth> ¦ doc: 63fa2134f4 | (Elizabeth Mattijsen)++ | doc/Language/pragmas.pod6

[13:09] <Geth> ¦ doc: Minimal description of "use/no trace"

[13:09] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/63fa2134f4

[13:09] *** itaipu left
[13:10] *** pmurias joined
[13:19] <Geth> ¦ doc: b33d6ef42a | (Elizabeth Mattijsen)++ | doc/Language/pragmas.pod6

[13:19] <Geth> ¦ doc: Minimal documentation of "no precompilation"

[13:19] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b33d6ef42a

[13:19] <synopsebot> Link: https://doc.perl6.org/language/pragmas

[13:21] *** cognominal left
[13:49] <lizmat> afk&

[13:53] *** faraco joined
[13:53] *** faraco left
[13:53] *** faraco joined
[13:56] *** faraco left
[13:57] *** darutoko- joined
[14:00] *** darutoko left
[14:01] <Geth> ¦ doc: de8e7544de | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/pod.pod6

[14:01] <Geth> ¦ doc: add another boolean format

[14:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/de8e7544de

[14:01] <synopsebot> Link: https://doc.perl6.org/language/pod

[14:09] <pmurias> jnthn: it seems we are using the statement migration stuff so that when we use things like foo("{1+2}") or a once in conjunction with a statement modifiers the stuff they put in the current block gets all nicely packed into the thunk

[14:10] <pmurias> jnthn: I'll try to stop the putting of extra stuff into surrounding block part for those things

[15:03] *** geospeck joined
[15:27] *** cdg joined
[15:27] *** raiph joined
[15:31] *** khw joined
[15:32] *** cdg left
[15:33] *** natrys joined
[15:40] *** vichib joined
[15:48] *** R0b0t1` left
[15:50] *** R0b0t1` joined
[15:50] *** araraloren_ left
[15:53] *** cdg joined
[15:57] *** geospeck left
[16:03] *** psychoslave joined
[16:03] *** R0b0t1` left
[16:10] *** bioexpress joined
[16:10] <bioexpress> p6: say 3;

[16:10] <camelia> rakudo-moar 1ea0c9084: OUTPUT: «3␤»

[16:11] *** bioexpress left
[16:13] *** psychoslave left
[16:14] *** psychoslave joined
[16:24] *** coverable6 left
[16:24] *** coverable6 joined
[16:29] *** psychoslave left
[16:30] *** psychoslave joined
[16:34] *** psychoslave left
[16:35] *** psychoslave joined
[16:50] *** jdoege joined
[16:55] *** xcm left
[17:04] *** markong joined
[17:19] *** R0b0t1` joined
[17:24] *** R0b0t1` left
[17:25] <Geth> ¦ doc: 7922af5788 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/pod.pod6

[17:25] <Geth> ¦ doc: add information

[17:25] <Geth> ¦ doc: 

[17:25] <Geth> ¦ doc: + separate ints and floats

[17:25] <synopsebot> Link: https://doc.perl6.org/language/pod

[17:25] <Geth> ¦ doc: + add a =head3 and title for reference

[17:25] <Geth> ¦ doc: + spell completely String and Boolean

[17:25] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/7922af5788

[17:36] *** psychoslave left
[17:44] *** R0b0t1` joined
[17:53] *** xcm joined
[17:57] *** psychoslave joined
[17:59] *** dogbert17 joined
[18:04] <yoleaux> Zoffix: what's happening with the :SYM<> import, bruh? https://irclog.perlgeek.de/perl6/2017-09-24#i_15210457

[18:09] *** nativecallable6 left
[18:09] *** nativecallable6 joined
[18:17] *** darutoko- left
[18:21] *** alexghacker1 joined
[18:21] *** alexghacker left
[18:31] *** rindolf left
[18:32] <Geth> ¦ doc: f7d9a34816 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/pod.pod6

[18:32] <Geth> ¦ doc: add comma, align text

[18:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f7d9a34816

[18:32] <synopsebot> Link: https://doc.perl6.org/language/pod

[18:35] *** psychoslave left
[18:35] *** psychoslave joined
[18:36] *** alexghacker joined
[18:36] *** alexghacker1 left
[18:39] *** david_xd left
[18:40] *** psychoslave left
[18:40] *** psychoslave joined
[18:51] *** itaipu joined
[18:59] *** wamba joined
[19:02] *** itaipu left
[19:10] *** natrys left
[19:10] *** natrys joined
[19:14] *** vichib left
[19:20] *** psychoslave left
[19:21] *** xcm left
[19:22] *** xcm joined
[19:22] *** vichib joined
[19:23] *** jdoege left
[19:27] *** rindolf joined
[19:27] *** kevani joined
[19:28] *** RudolfLovesLarry joined
[19:28] <RudolfLovesLarry> Hey all! Where's camelia?

[19:29] <kevani> christmas break ;)

[19:31] *** gdonald left
[19:31] <RudolfLovesLarry> kevani how are you my friend

[19:34] *** raiph left
[19:42] *** cdg left
[19:43] *** RudolfLovesLarry left
[19:45] *** kevani left
[19:46] *** gdonald joined
[19:49] *** wamba left
[19:51] *** ZofBot left
[19:51] *** ZofBot joined
[19:51] *** ChanServ sets mode: +v ZofBot

[19:57] *** cdg joined
[20:02] *** cdg left
[20:19] *** xcm left
[20:20] *** statisfiable6 left
[20:20] *** statisfiable6 joined
[20:20] *** ChanServ sets mode: +v statisfiable6

[20:23] *** bisectable6 left
[20:23] *** committable6 left
[20:23] *** bloatable6 left
[20:23] *** bisectable6 joined
[20:23] *** quotable6 left
[20:23] *** committable6 joined
[20:23] *** bloatable6 joined
[20:23] *** ChanServ sets mode: +v bloatable6

[20:23] *** quotable6 joined
[20:23] *** ChanServ sets mode: +v quotable6

[20:24] *** TEttinger joined
[20:25] *** xcm joined
[20:25] *** psychoslave joined
[20:25] *** eliasr left
[20:29] *** rurban joined
[20:30] *** rurban left
[20:39] *** mson joined
[20:48] *** konsolebox left
[20:51] *** wamba joined
[20:52] *** konsolebox joined
[20:58] *** releasable6 left
[20:58] *** evalable6 left
[20:58] *** releasable6 joined
[20:58] *** evalable6 joined
[20:58] *** ChanServ sets mode: +v evalable6

[21:29] <AlexDaniel> m: say 42

[21:29] <camelia> rakudo-moar 1ea0c9084: OUTPUT: «42␤»

[21:34] *** Geth left
[21:34] *** Geth joined
[21:34] *** ChanServ sets mode: +v Geth

[21:34] <moritz> \o Merry Christmas to everybody o~

[21:41] <Geth> ¦ doc: 241dc10c98 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Programs/00-running.pod6

[21:41] <Geth> ¦ doc: chg POD6 to POD per discussion with AlexDaniel

[21:41] <Geth> ¦ doc: 

[21:41] <Geth> ¦ doc: to reflect rakudo changes with PR #1339

[21:41] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/241dc10c98

[21:41] *** khisanth_ left
[21:52] *** pmurias left
[21:53] *** rindolf left
[21:55] *** khisanth_ joined
[21:56] *** cpage_ joined
[21:57] <tbrowder> Merry Christmas, Moritz and all p6 people!

[21:58] *** eliasr joined
[21:58] *** cpage left
[21:58] *** cpage_ is now known as cpage

[22:00] *** russt1 joined
[22:03] <russt1> playing with rakudo and I notice that -x -S command line args are gone from perl5.  any work around for that?

[22:08] * moritz never used either in Perl 5

[22:09] <moritz> russt1: if they are useful, you could contribute a patch that implements them in rakudo

[22:10] <russt1> possibly, where would I do that?

[22:11] *** Zoffix joined
[22:11] <russt1> I'm just learning about rakudo (in fact reading your book about perl 6 regexes I think :)

[22:11] <Zoffix> FWIW they look pretty mental. Perhaps we should discuss whether we want them in the first place before making any patches?

[22:11] <russt1> I think if you are Lenz

[22:11] <moritz> russt1: I am :-) How do you like it so far?

[22:12] <Zoffix> And with `-x` perldoc perlrun says you'd indicate end with __END__ but we don't have an equivalent of it

[22:12] <russt1> I like it so far except I was trying to port my portable startup system for perl5 to perl6 and am missing those two args...

[22:14] <moritz> what do you use it for? On Linux, I just use a shebang, and on Windows you can register a file extension

[22:14] <russt1> if [ $# -eq 0 ]; then exec perl -x -S $0; exit $? ; else exec perl -x -S $0 "$@"; exit $? ; fi

[22:14] <russt1> #!/bin/perl -w

[22:14] <russt1> the -x discards lines until it finds the #!perl pattern

[22:15] <moritz> but why?

[22:16] <moritz> do you often run "bash myprog.p6"?

[22:19] <russt1> trying to remember why, wrote this code a long time ago when I had to run on numerous unix systems plus mks shell in DOS

[22:20] <geekosaur> iirc we do have __END__ by abusing pod6

[22:20] <geekosaur> and the reason for -x and -S is basically to work around systems without shebang support

[22:20] <geekosaur> I *think* we can safely put that one to bed

[22:20] <russt1> the main feature is for the perl interpreter to skip the shell preamble

[22:21] <Zoffix> Yeah, the =finish block, but the speculations say "Anything in a source file after a =finish is always treated as Pod.", and you can embed proper Perl 6 code in Pod, which makes it unsafe as a "discard everything after it" feature

[22:21] <Zoffix> (this isn't implemented properly yet ( RT#127213 ), but still)

[22:21] <AlexDaniel> is there an equivalent of that in ruby or python or in anything else?

[22:21] <synopsebot> RT#127213 [new]: https://rt.perl.org/Ticket/Display.html?id=127213 [POD] after =finish isn't picked up in $=pod

[22:23] <Zoffix> Relevant speculation, which confusingly does list =finish as equivalent of __END__ https://design.perl6.org/S02.html#Double-underscore_forms

[22:23] <Zoffix> Oh wait, not confusingly. In Perl 5 you can stick pod after __END__ too

[22:23] <Zoffix> But you can't run stuff with it

[22:24] <Geth> ¦ doc/master: 4 commits pushed by (Will "Coke" Coleda)++

[22:24] <Geth> ¦ doc/master: 2af5ec52ce | prefer spaces after commas

[22:24] <Geth> ¦ doc/master: 71482c27eb | fix typos/learn words

[22:24] <Geth> ¦ doc/master: 259473f65e | make signature match source

[22:24] <Geth> ¦ doc/master: b0ec7cbe9a | make examples work

[22:24] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/241dc10c98...b0ec7cbe9a

[22:24] <Zoffix> m: =begin foo :bar(BEGIN say "just a Pod config variable")␤=end foo␤

[22:24] <camelia> rakudo-moar 1ea0c9084: OUTPUT: «just a Pod config variable␤»

[22:26] <Zoffix> Related ticket RT#130477 and TimToady's comments on whether Pod should be executable: https://irclog.perlgeek.de/moarvm/2017-01-09#i_13886808

[22:26] <synopsebot> RT#130477 [open]: https://rt.perl.org/Ticket/Display.html?id=130477 [BUG][POD] Pod config parses colopairs but simply stringifies whatever it matched

[22:27] * Zoffix &

[22:27] *** Zoffix left
[22:31] <russt1> re: why use shell logic to establish perl env, it was so I could have multiple path environments on the same machine.  one can now use #!/bin/env for that.  The -S was to get perl to look for the actual script in $PATH.

[22:32] <teatime> russt1: if you want maximum portability, use /usr/bin/env

[22:34] <russt1> the prlskel prog I wrote then uses $0 to load a perl library in a path that I could control and that has  a main, and would execute that.  features in prlskel establish a debugging env. among other things.

[22:35] <russt1> what would be the modern way to do all that?

[22:36] <russt1> I guess I could write a wrapper for the perl6 wrapper that would create a tmp file with the pre-amble removed or something.

[22:37] <russt1> I looked at the perl6 wrapper and I gather that it loads a byte-code file which contains the actual interpreter.

[22:39] <moritz> that's correct

[22:41] <russt1> mosdef not interested in using a poddoc hack for such a simple feature.. :)

[22:48] *** vichib left
[22:48] *** vichib joined
[22:49] *** mson left
[22:57] *** setty1 joined
[23:05] *** wamba left
[23:47] *** psychoslave left
[23:48] *** natrys left
[23:59] *** kerframil joined
