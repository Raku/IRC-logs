[00:02] *** kurahaupo_ joined
[00:03] *** ufobat left
[00:04] *** cpage__ joined
[00:05] *** kurahaupo left
[00:06] *** cpage left
[00:06] *** cpage__ is now known as cpage

[00:08] <zengargoyle> hrm.  Supply.tap acts on each line as it arrives.  Channel waits until the file is read in full.  not sure i grok yet. :|

[00:16] *** Cabanossi left
[00:19] *** Cabanossi joined
[00:20] *** atta left
[00:26] *** mr-foobar left
[00:28] *** mr-foobar joined
[00:30] *** zacts joined
[00:38] *** TreyHarris joined
[00:54] *** Morfent joined
[00:54] *** mr-foobar left
[00:56] *** kybr left
[00:56] *** kybr joined
[00:59] *** mr-foobar joined
[00:59] *** Morfent left
[01:04] *** Morfent joined
[01:06] *** itaylor57 left
[01:07] *** ctilmes left
[01:08] *** Morfent left
[01:08] *** Mrofnet joined
[01:11] *** itaylor57 joined
[01:16] *** Cabanossi left
[01:18] *** Cabanossi joined
[01:21] *** entonian joined
[01:25] *** entonian left
[01:26] *** mr-foobar left
[01:28] *** entonian joined
[01:28] *** mr-foobar joined
[01:29] *** entonian left
[01:29] *** entonian joined
[01:35] *** entonian left
[01:45] *** ohmyfish joined
[01:46] *** ilbot3 left
[01:48] *** ilbot3 joined
[01:48] *** ChanServ sets mode: +v ilbot3

[01:54] *** avalokite joined
[01:54] *** avalokite left
[02:03] *** noganex_ joined
[02:06] *** noganex left
[02:13] *** ohmyfish left
[02:16] *** Morfent joined
[02:17] *** Mrofnet left
[02:19] *** aborazmeh joined
[02:19] *** aborazmeh left
[02:19] *** aborazmeh joined
[02:25] *** mr-foobar left
[02:28] *** mr-foobar joined
[02:33] *** aborazmeh left
[02:36] *** pmurias left
[02:39] *** aborazmeh joined
[02:39] *** aborazmeh left
[02:39] *** aborazmeh joined
[02:51] *** cyphase left
[02:54] *** Mrofnet joined
[02:55] *** kerframil left
[02:56] *** Morfent left
[02:56] *** skids joined
[02:57] *** Mrofnet left
[02:58] *** cyphase joined
[03:06] *** cyphase left
[03:07] *** cyphase joined
[03:13] <SmokeMachine> Is there anything equivalente to Java’s hashCode for perl6?

[03:16] *** skids left
[03:24] <araraloren> m: say 1.WHICH

[03:24] <camelia> rakudo-moar d37be2: OUTPUT: «Int|1␤»

[03:25] <araraloren> m: say 1.WHICH; my $a; say $a.WHICH;

[03:25] <camelia> rakudo-moar d37be2: OUTPUT: «Int|1␤Any|U16722968␤»

[03:25] <araraloren> SmokeMachine, do you mean this ?

[03:26] *** mr-foobar left
[03:26] <SmokeMachine> araraloren: a method that returns a Int depending of the content of the object

[03:27] <SmokeMachine> I mean a hash function...

[03:28] <araraloren> I think hash has many kinds of implementation

[03:28] *** mr-foobar joined
[03:28] <SmokeMachine> Yes, but default classes haven’t default hash functions?

[03:29] <araraloren> What does that hash function for ?

[03:30] <araraloren> I don't know well Java

[03:31] <araraloren> Or SmokeMachine , what are you trying to do

[03:33] <SmokeMachine> I wrote a a A/B test classifier in kotlin that I’m translating to perl6... part that uses the hashCode is something like this: val testGroup = groups[userIdentifier.hashCode % groups.size] // simplified version

[03:34] *** pilne joined
[03:35] <araraloren> It's like a group factory ?

[03:35] <SmokeMachine> Sorry, I dodnt get what means “group factory”...

[03:36] <araraloren> Oh

[03:37] <araraloren> You want get a group of a particular user?

[03:37] <SmokeMachine> The hashCode, for the same object will always return the same Int...

[03:38] <araraloren> Identify by that `userIdentifier.hashCode`

[03:38] <SmokeMachine> Yes

[03:38] <araraloren> you wan store them in Hash

[03:38] <SmokeMachine> The true conde used a test Id as a salt:

[03:39] <araraloren> my %hash = userIdentifier => $group;  and somewhere my $testGroup = %hash{userIdentifier};

[03:39] <araraloren> s/wan/can/

[03:40] <SmokeMachine> val testGroup = groups[“$userIdentifier $testIdentifier”.hashCode % groups.size]

[03:40] <araraloren> m: my %hash = 'A' => "Group A", B => "Group B"; say %hash{'A'}; say %hash<A>;

[03:40] <camelia> rakudo-moar d37be2: OUTPUT: «Group A␤Group A␤»

[03:41] <araraloren> m: class AG {}; class BG {}; my %hash = 'A' => AG.new, B => B.new; dd %hash{'A'}; dd %hash<B>;

[03:41] <camelia> rakudo-moar d37be2: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    B used at line 1␤␤»

[03:41] <araraloren> m: class AG {}; class BG {}; my %hash = 'A' => AG.new, B => BG.new; dd %hash{'A'}; dd %hash<B>;

[03:41] <camelia> rakudo-moar d37be2: OUTPUT: «AG %hash = AG.new␤BG %hash = BG.new␤»

[03:41] *** aborazmeh left
[03:43] <araraloren> SmokeMachine, Is ^ help?

[03:43] <SmokeMachine> No, that’s not what I want... I need to answer to the user what group it is participating on a specified a/b test and always give the same answer...

[03:44] <araraloren> yeah, that Hash always given you same value when you given them same key

[03:44] <SmokeMachine> I don’t what to record any data...

[03:45] <SmokeMachine> I just want a hash function...

[03:45] <araraloren> Oh, But I recommend you do that in Perl 6 way

[03:46] *** Cabanossi left
[03:46] <araraloren> A hash function is no need

[03:46] <SmokeMachine> This is what I want: https://en.m.wikipedia.org/wiki/Java_hashCode()

[03:46] <SmokeMachine> Yes, I need...

[03:47] *** cyphase left
[03:47] *** entonian joined
[03:47] *** Cabanossi joined
[03:48] <araraloren> If you want a hash function, I think you have to write it yourself SmokeMachine 

[03:49] <SmokeMachine> We probably have a hash function for Str... it must be used on the Hash class...

[03:49] <timotimo> m: set(1, 2, "foo", "bar").WHICH.say

[03:49] <camelia> rakudo-moar d37be2: OUTPUT: «Set|F5FB15BD0FAD0FEA9366E0DF58948C292A378E77␤»

[03:49] <timotimo> :P

[03:49] <timotimo> well, it's not an integer

[03:50] <araraloren> As I say, Hash has a lot of implementation

[03:52] *** cyphase joined
[03:52] <SmokeMachine> m: say 42.WHERE

[03:52] <camelia> rakudo-moar d37be2: OUTPUT: «140366095598312␤»

[03:53] <araraloren> This is a memory address, I think

[03:53] <SmokeMachine> But it changes... :(

[03:53] <SmokeMachine> I know...

[03:53] <ugexe> m: use nqp; say nqp::sha1("xxx")

[03:53] <camelia> rakudo-moar d37be2: OUTPUT: «B60D121B438A380C343D5EC3C2037564B82FFEF3␤»

[03:54] <SmokeMachine> Getting better!

[03:55] <SmokeMachine> m: use nqp; say :16(nqp::sha1("xxx"))

[03:55] <camelia> rakudo-moar d37be2: OUTPUT: «1039327807276066319526960639699341474749786095347␤»

[03:55] <SmokeMachine> :)

[03:55] *** AlexDaniel joined
[03:55] <SmokeMachine> Any way to not use nqp?

[03:56] *** mr-foobar left
[03:56] <timotimo> there's modules that give you hash functions

[03:57] <SmokeMachine> m: use nqp; say :16(nqp::sha1(class :: {}.new.WHICH))

[03:57] <camelia> rakudo-moar d37be2: OUTPUT: «1148741742642494095844578821678109723607158773451␤»

[03:58] <SmokeMachine> m: use nqp; say :16(nqp::sha1(class :: {}.new.perl))

[03:58] <camelia> rakudo-moar d37be2: OUTPUT: «36243988929059578703623939259804296396100285399␤»

[03:59] *** mr-foobar joined
[03:59] <SmokeMachine> WHICH in some classes uses the memory position, right?!

[03:59] <timotimo> for mutable things it'll do something like that

[04:00] <timotimo> i'm not sure if which uses objectid under the hood, i.e. whether the which changes when the gc moves the object

[04:00] <ugexe> m: use nqp; sub ser($obj is copy) { my Mu $sh := nqp::list_s(); my $n = nqp::time_n(); my Mu $sc := nqp::createsc(nqp::unbox_s("$n")); nqp::setobjsc($obj,$sc); nqp::scsetobj($sc, 0, $obj); my $s = nqp::serialize($sc, $sh); my Mu $i := nqp::iterator($sh); while ($i) {my $s := nqp::shift($i)}; nqp::scdisclaim($sc); nqp::shift_s($sh); $n ~"\n"~nqp::p6box_s(nqp::join("\n", $sh))~"\n"~$s }; ser("foo".IO);

[04:00] <camelia> rakudo-moar d37be2: ( no output )

[04:00] <ugexe> m: use nqp; sub ser($obj is copy) { my Mu $sh := nqp::list_s(); my $n = nqp::time_n(); my Mu $sc := nqp::createsc(nqp::unbox_s("$n")); nqp::setobjsc($obj,$sc); nqp::scsetobj($sc, 0, $obj); my $s = nqp::serialize($sc, $sh); my Mu $i := nqp::iterator($sh); while ($i) {my $s := nqp::shift($i)}; nqp::scdisclaim($sc); nqp::shift_s($sh); $n ~"\n"~nqp::p6box_s(nqp::join("\n", $sh))~"\n"~$s }; ser("foo".IO).say;

[04:00] <camelia> rakudo-moar d37be2: OUTPUT: «1500177622.01373␤531476C94944C40F030060AEB60539343668769B␤gen/moar/CORE.setting␤5E1B038AD8D0FE925C90549EA867F661F6FAAB44␤<tmp>␤/home/camelia␤FAAAAEgAAAACAAAAWAAAAAAAAABYAAAAWAAAAAYAAACIAAAAwAAAAAAAAADAAAAAAAAAAMAAAADAAAAAAAAAAMAAAAAAAAAAAQAAA…»

[04:01] <timotimo> ugh, that's terrible :D :D

[04:02] <ugexe> you used to be able to do a type of base64 encoding of objects like that

[04:02] <ugexe> i wasnt expecting that output

[04:05] <araraloren> SmokeMachine, can you show us some code kotlin

[04:05] <araraloren> your code

[04:05] *** entonian_ joined
[04:05] *** faraco joined
[04:06] *** entonian left
[04:06] <SmokeMachine> The important part was that I wrote... the real code is on my work’s computer...

[04:07] <araraloren> And the Perl 6 code ?

[04:07] <araraloren> Or

[04:08] <ugexe> m: use nqp; sub ser($obj is copy) { my Mu $sh := nqp::list_s(); my $n = nqp::time_n(); my Mu $sc := nqp::createsc(nqp::unbox_s("$n")); nqp::setobjsc($obj,$sc); nqp::scsetobj($sc, 0, $obj); my $s = nqp::serialize($sc, $sh); my Mu $i := nqp::iterator($sh); while ($i) {my $s := nqp::shift($i)}; nqp::scdisclaim($sc); nqp::shift_s($sh); $s }; ser("foo").say;

[04:08] <camelia> rakudo-moar d37be2: OUTPUT: «FAAAAEgAAAACAAAAWAAAAAAAAABYAAAAWAAAAAEAAABgAAAAcAAAAAAAAABwAAAAAAAAAHAAAABwAAAAAAAAAHAAAAAAAAAAAQAAAAIAAAADAAAABAAAAH4BEIAAAAAAAjAMACACMCAAIAEAAAAAAA==␤»

[04:09] <faraco> hello

[04:09] <SmokeMachine> But I get the user identifier, concat with the test salt and get the hashCode for that... with this Int, I see if that user should be participating of that test, and if it should, what should be it’s group...

[04:10] *** entonian_ left
[04:16] *** entonian_ joined
[04:20] *** skids joined
[04:21] *** gdonald left
[04:22] <araraloren> faraco, hi

[04:23] <Geth> ¦ doc: 351f9007ce | (Zoffix Znet)++ | doc/Language/unicode_entry.pod6

[04:23] <Geth> ¦ doc: Make xtest pass

[04:23] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/351f9007ce

[04:26] <araraloren> :(

[04:27] *** mr-foobar left
[04:30] *** mr-foobar joined
[04:33] *** gdonald joined
[04:47] *** entonian_ left
[04:47] *** entonian_ joined
[04:48] *** Ben_Goldberg joined
[04:48] *** BenGoldberg left
[04:48] *** Ben_Goldberg is now known as BenGoldberg

[04:57] *** mr-foobar left
[05:01] *** pilne left
[05:03] *** khw left
[05:04] *** xerx joined
[05:04] *** mr-foobar joined
[05:15] *** Ben_Goldberg joined
[05:15] *** BenGoldberg left
[05:15] *** Ben_Goldberg is now known as BenGoldberg

[05:27] *** mr-foobar left
[05:30] *** mr-foobar joined
[05:38] *** AlexDaniel left
[05:38] *** AlexDaniel joined
[05:57] *** mr-foobar left
[05:58] *** mr-foobar joined
[06:00] *** Cabanossi left
[06:02] *** Cabanossi joined
[06:08] *** entonian_ left
[06:12] *** faraco left
[06:19] *** setty1 joined
[06:22] *** BenGoldberg left
[06:23] *** wamba joined
[06:26] *** skids left
[06:27] *** mr-foobar left
[06:30] *** skids joined
[06:31] *** AlexDaniel left
[06:31] *** mr-foobar joined
[06:32] *** Cabanossi left
[06:33] *** Cabanossi joined
[06:38] *** domidumont joined
[06:42] *** parv joined
[06:43] *** skids left
[06:45] *** domidumont left
[06:46] *** domidumont joined
[06:52] *** lizmat left
[06:56] *** ufobat joined
[06:57] *** mr-foobar left
[07:00] *** bioexpress joined
[07:01] <bioexpress> hello, is `qx` a short notation of `q:x`?

[07:01] *** mr-foobar joined
[07:01] <timotimo> yup

[07:02] <bioexpress> Thx!

[07:02] <timotimo> qqx also exists

[07:02] <bioexpress> to interpolate variables

[07:02] <timotimo> yup

[07:05] *** bioexpress left
[07:19] *** andrzejku joined
[07:26] *** mr-foobar left
[07:27] *** mr-foobar joined
[07:31] *** Cabanossi left
[07:32] *** Cabanossi joined
[07:45] *** lizmat joined
[07:51] *** Manifest0 left
[07:53] *** darutoko joined
[07:56] *** Manifest0 joined
[08:04] *** rindolf joined
[08:13] *** araraloren_ joined
[08:14] *** _28_ria left
[08:16] *** _28_ria joined
[08:16] *** araraloren left
[08:18] *** ufobat left
[08:28] *** parv left
[08:32] *** Ven joined
[08:32] *** Ven is now known as Guest47238

[08:34] *** domidumont left
[08:49] *** _28_ria left
[08:50] *** Guest47238 left
[08:54] *** eliasr joined
[08:58] *** Ven_ joined
[09:09] *** setty1 left
[09:22] *** konsolebox left
[09:23] *** lizmat left
[09:23] *** faraco joined
[09:28] *** konsolebox joined
[09:28] *** Sgeo_ joined
[09:30] *** Morfent joined
[09:30] *** Sgeo left
[09:35] *** kurahaupo_ left
[09:42] *** Ven_ left
[09:44] *** itaylor57 left
[09:45] *** lizmat joined
[09:56] *** Ven joined
[09:56] *** Ven is now known as Guest11421

[10:01] *** Guest11421 left
[10:11] *** |oLa| left
[10:16] *** kaare_ left
[10:16] *** Cabanossi left
[10:16] *** Ven_ joined
[10:16] *** kaare_ joined
[10:17] *** Cabanossi joined
[10:26] *** Ven_ left
[10:36] *** |oLa| joined
[10:38] *** lizmat left
[10:39] *** Ven_ joined
[10:40] *** Ven_ left
[10:43] *** kurahaupo joined
[10:46] *** lizmat joined
[10:51] <Voldenet> I've got a mild problem with postfix operators

[10:51] <Voldenet> m: sub postfix:<pa> { "pa_$^a" }; sub postfix:<a> { "a_$^a" }; sub postfix:<p> { "p_$^a" }; say "a"pa

[10:51] <camelia> rakudo-moar d37be2: OUTPUT: «pa_a␤»

[10:51] <Voldenet> however

[10:51] <Voldenet> m: sub postfix:<pa> { "pa_$^a" }; sub postfix:<a> { "a_$^a" }; sub postfix:<p> { "p_$^a" }; say "a"p a

[10:51] <camelia> rakudo-moar d37be2: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3}; sub postfix:<p> { "p_$^a" }; say "a"p7⏏5 a␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤  …»

[10:51] <Voldenet> m: sub postfix:<pa> { "pa_$^a" }; sub postfix:<a> { "a_$^a" }; sub postfix:<p> { "p_$^a" }; say ("a"p)a

[10:52] <camelia> rakudo-moar d37be2: OUTPUT: «a_p_a␤»

[10:52] <Voldenet> can I somehow force usage of specific operator in this context without parentheses?

[10:55] <hahainternet> Voldenet: i seem to remember you can specify tightness/looseness, although i'm not certain

[10:56] <hahainternet> Voldenet: have you tried https://docs.perl6.org/language/functions.html#Precedence ?

[10:56] <timotimo> you'll need a backslash there

[10:56] <Voldenet> timotimo++, that what I was looking for

[10:56] <timotimo> m: sub postfix:<pa> { "pa_$^a" }; sub postfix:<a> { "a_$^a" }; sub postfix:<p> { "p_$^a" }; "a"p\a

[10:56] <camelia> rakudo-moar d37be2: ( no output )

[10:56] <timotimo> m: sub postfix:<pa> { "pa_$^a" }; sub postfix:<a> { "a_$^a" }; sub postfix:<p> { "p_$^a" }; say "a"p\a

[10:56] <camelia> rakudo-moar d37be2: OUTPUT: «a_p_a␤»

[10:57] <Voldenet> hahainternet: it wouldn't be bad, but I wouldn't want to destroy ++ in the process, because it's quite crucial operator to have working :P

[10:57] *** TEttinger left
[10:57] *** pmurias joined
[10:58] <hahainternet> Voldenet: i guess i don't quite see what you're going for :)

[10:58] <Voldenet> Oh right, I should be more specific in my examples

[10:58] <Voldenet> (I'm using postfix:<+>)

[10:59] <timotimo> you could use postfix:<×> instead!

[10:59] <hahainternet> ah, and you want to keep ++ with normal preference, but occasionally explicitly support the +

[10:59] <timotimo> because there's no postfix:<××>

[10:59] <hahainternet> yeah and × is not X

[10:59] <timotimo> right, operators can be pulled into scopes lexically

[10:59] <timotimo> in fact, you can only import operators lexically

[11:00] *** andrzejku left
[11:00] <timotimo> well, except if you bind CALLER::('&infix:<+>') to my &infix:<+> in your sub or whatever

[11:03] *** nadim joined
[11:27] *** faraco left
[11:42] *** Morfent left
[11:58] *** itaylor57 joined
[12:08] *** Morfent joined
[12:11] *** pilne joined
[12:11] *** cognominal left
[12:32] *** Actualeyes joined
[12:33] *** domidumont joined
[12:56] *** lucasb joined
[13:00] *** cyphase left
[13:04] *** andrzejku joined
[13:05] *** cyphase joined
[13:28] *** gdonald left
[13:32] *** BenGoldberg joined
[13:40] *** gdonald joined
[13:41] *** kaare_ left
[13:50] *** zakharyas joined
[14:00] *** kurahaupo left
[14:01] *** Cabanossi left
[14:02] *** Cabanossi joined
[14:10] *** kurahaupo joined
[14:11] *** kurahaupo left
[14:15] *** Morfent left
[14:18] *** wamba left
[14:18] <sjn> o/

[14:29] <pmurias> \o

[14:36] <lucasb> o/

[14:37] <Voldenet> \o

[14:39] * sjn found something weird again

[14:40] <sjn> it seems one can't access a .IO object on IntStr's

[14:40] <sjn> an*

[14:41] <sjn> (could be I'm not interpreting things correctly though)

[14:42] <lucasb> m: say <100>.IO.perl

[14:42] <camelia> rakudo-moar b22d18: OUTPUT: «IO::Path.new(IntStr.new(100, "100"), :SPEC(IO::Spec::Unix), :CWD("/home/camelia"))␤»

[14:43] <sjn> let's see if I can reproduce what I'm doing

[14:45] <pmurias> sjn: are you still interested in sharing that TPC::EU room?

[14:46] <sjn> pmurias: ah, sorry, I ended up in a sofa at one of the organizer's home

[14:46] <timotimo> don't forget that IO-related things go through the restricted setting on camelia

[14:47] <sjn> m: subset Existing of Str where { .IO ~~ :f }; my Existing $f = <0>; # gives the same error if there's a file named "0" in the current dir

[14:47] <camelia> rakudo-moar b22d18: OUTPUT: «Must specify something as a path: did you mean '.' for the current directory?␤  in block <unit> at <tmp> line 1␤␤»

[14:50] <sjn> I got that error when using the same subset type as a parameter to MAIN(Existing $i) ,  and passing along "0" to $i from the command line

[14:50] <sjn> (with a filename "0" in the current dir)

[14:50] * sjn is unsure of how to reduce this to a minimal test for the bot here

[14:53] <sjn> here's my code (please touch a file named "0" in current dir before running):

[14:53] <sjn> perl6 -e 'subset Existing of Str where { .IO ~~ :f }; sub MAIN (Existing :$i) { ... }; ' -i=0

[14:53] <Voldenet> m: say <0>.IO.perl

[14:53] <camelia> rakudo-moar c040f1: OUTPUT: «Must specify something as a path: did you mean '.' for the current directory?␤  in block <unit> at <tmp> line 1␤␤»

[14:54] *** kaare_ joined
[14:55] <sjn> yeah, that's a bug, isn't it?

[14:55] <sjn> m: say <1>.IO.perl

[14:55] <camelia> rakudo-moar c040f1: OUTPUT: «IO::Path.new(IntStr.new(1, "1"), :SPEC(IO::Spec::Unix), :CWD("/home/camelia"))␤»

[14:58] <Voldenet> m: say <0 1>.map: { .IO.e }

[14:58] <camelia> rakudo-moar c040f1: OUTPUT: «Must specify something as a path: did you mean '.' for the current directory?␤  in block <unit> at <tmp> line 1␤␤»

[14:58] <Voldenet> m: say <0 1>.map: { CATCH { .resume }; .IO.e }

[14:58] <camelia> rakudo-moar c040f1: OUTPUT: «(False False)␤»

[14:59] <Voldenet> m: say <0 1>.map({ CATCH { .resume }; .IO }).map({ .e })

[14:59] <camelia> rakudo-moar c040f1: OUTPUT: «(False False)␤»

[15:00] <sjn> that one gives the correct (True False) output here. (I have a file name "0")

[15:01] <pmurias> sjn: np

[15:02] <sjn> pmurias: add yourself to the wiki, and mention that you have a room to share?

[15:02] * sjn has seen that work before

[15:03] <sjn> ...assuming pmurias is still looking for a room mate

[15:04] <timotimo> m: say so <0>

[15:04] <camelia> rakudo-moar c040f1: OUTPUT: «False␤»

[15:04] <timotimo> m: say so "0"

[15:04] <camelia> rakudo-moar c040f1: OUTPUT: «True␤»

[15:05] <timotimo> clearly a part of the IO constructor thinks "it's a Str and so Str is only False if the Str is empty"

[15:05] <timotimo> i suggest we do a full audit of places that do that that could get tripped up by IntStr and similar

[15:08] <timotimo> in fact, that's kind of a mean gotcha

[15:08] <timotimo> or trap or what you want to call it

[15:22] <pmurias> sjn: I'll try that

[15:26] <sjn> timotimo: yeah, I was a bit surprised too

[15:27] *** skids joined
[15:34] *** Sgeo_ left
[15:36] *** setty1 joined
[15:46] *** nadim left
[15:58] *** nightfrog left
[15:58] *** khw joined
[16:00] *** nightfrog joined
[16:07] *** zakharyas left
[16:07] *** nadim joined
[16:09] *** wamba joined
[16:18] *** stmuk joined
[16:20] *** stmuk_ left
[16:22] <Geth> ¦ doc: 188d98e6aa | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/traps.pod6

[16:22] <Geth> ¦ doc: Add numericaly-zero allomorph's Bool to traps

[16:22] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/188d98e6aa

[16:24] <timotimo> that commit looks good

[16:26] <ugexe> weird, i could have swore i fixed that bug like 2 years ago

[16:27] <timotimo> oh? maybe lost during the IO rewrite?

[16:28] *** domidumont left
[16:28] <ugexe> i remember because CURI used to save distribution's meta data as filenames 0, 1, 2, etc

[16:29] *** araraloren_ left
[16:30] *** Cabanossi left
[16:32] *** Cabanossi joined
[16:43] *** zakharyas joined
[16:51] *** AlexDaniel joined
[16:51] *** lucasb left
[17:00] *** Ibalon joined
[17:00] *** Ibalon left
[17:00] <ugexe> m: say IO::Path.new(".", :CWD(".")).dir eqv IO::Path.new(".", :CWD("")).dir; # wonder if CWD should be handling blank string, since `run "ls", :cwd("")` does not work the same as `run "ls", :cwd(".")`

[17:00] <camelia> rakudo-moar 45cd1a: OUTPUT: «IO::Path is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at <tmp> line 1␤␤»

[17:02] <ugexe> reason being that sometimes you want to do like `run "command", $path.relative, :cwd($path.CWD)`

[17:02] <ugexe> especially since on windows you cant always pass the volume in as part of the absolute path as an argument, but you *can* set the CWD to whatever and use a relative path

[17:06] *** mingdao left
[17:08] *** mingdao joined
[17:10] *** zakharyas left
[17:10] *** deep-book-gk_ joined
[17:12] *** deep-book-gk_ left
[17:51] *** Sgeo joined
[18:06] *** domidumont joined
[18:30] *** Cabanossi left
[18:32] *** Cabanossi joined
[18:37] *** jameslenz joined
[19:08] *** zacts is now known as reasoningircbot

[19:08] *** reasoningircbot is now known as zacts

[19:13] *** zacts left
[19:16] *** ufobat joined
[19:25] *** setty1 left
[19:27] *** setty1 joined
[19:33] *** domidumont left
[19:35] *** Morfent joined
[19:36] *** setty1 left
[19:37] *** darutoko left
[19:39] *** setty1 joined
[19:56] *** TEttinger joined
[19:56] *** lizmat left
[19:59] *** mr-fooba_ joined
[19:59] *** mr-foobar left
[20:01] *** Cabanossi left
[20:02] *** Mrofnet joined
[20:02] *** Cabanossi joined
[20:04] *** pecastro joined
[20:05] *** Celelibi joined
[20:07] *** Morfent left
[20:07] *** Mrofnet is now known as Morfent

[20:15] *** lizmat joined
[20:41] *** seatek joined
[21:04] *** |oLa| left
[21:09] *** andrzejku left
[21:15] *** Cabanossi left
[21:17] *** Cabanossi joined
[21:18] <nadim> it there another way to push a list in a list than:  @l.push: ( (1, 2,3), ) ;

[21:30] <samcv> hi i cannot update zef

[21:30] <samcv> using latest rakudo

[21:30] <samcv> Cannot import symbol &zrun from Zef::Shell, because it already exists in this lexical scope

[21:30] <samcv> at /home/perl/new/site#sources/EEE22B32677EE6A3F8728D1902A4B45D3A74A68A (Zef::Service::Shell::unzip):2

[21:30] <samcv> ------> use Zef::Shell⏏;

[21:31] <timotimo> i thought push always pushes exactly one thing, so if you pass a list, you'll get a list pushed?

[21:31] <timotimo> ah yes, you do have to make it actually a list though, so parens inside the parens

[21:31] <timotimo> but only one set should be necessary

[21:37] *** shlomif joined
[21:38] *** rindolf left
[21:45] *** shlomif is now known as rindolf

[21:55] *** Morfent left
[21:59] *** ptolemarch left
[22:00] *** ptolemarch joined
[22:07] *** cognominal joined
[22:18] *** robertle left
[22:20] *** peteretep joined
[22:23] *** zostay joined
[22:33] *** ufobat left
[22:33] *** rindolf left
[22:33] *** pmurias left
[22:34] *** rindolf joined
[22:35] *** BenGoldberg left
[22:51] *** rindolf left
[22:52] *** rindolf joined
[22:53] *** Morfent joined
[23:02] *** espadrine left
[23:14] *** wamba left
[23:15] *** Cabanossi left
[23:18] *** Cabanossi joined
[23:41] *** nightfrog is now known as culb

[23:50] *** p6nomad joined
