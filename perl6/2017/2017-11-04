[00:00] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Discuss performance benefits of native types”: https://github.com/perl6/doc/issues/1534#issuecomment-341855126

[00:01] *** mcmillhj joined
[00:06] *** mcmillhj left
[00:07] *** COMBORICO joined
[00:09] *** ryn1x joined
[00:10] <squashable6> 🍕 AlexDaniel++ opened issue “False-positives on “Perl 6 Types” page”: https://github.com/perl6/doc/issues/1649

[00:10] <squashable6> 🍕 AlexDaniel++ labeled issue “False-positives on “Perl 6 Types” page”: https://github.com/perl6/doc/issues/1649

[00:11] *** cdg joined
[00:11] <AlexDaniel> .tell samcv you were assigned here :) https://github.com/perl6/doc/issues/1517 Actually, I think anyone can write about it, so feel free to unassign yourself

[00:11] <yoleaux> AlexDaniel: I'll pass your message to samcv.

[00:14] <ryn1x> I've been reading all the renaming Perl6 posts and blogs and while I do like Perl 6... a name just came to me that I think might be appropriate. What about Monarch? Then we could keep Camelia with P6 still hidden in the wings as a tribute to it’s history. It would also symbolize the next phase for the language; after it has emerged from it’s chrysalis and is no longer a new version of Perl, but a new 

[00:14] <ryn1x> language entirely. Feel free to tell me it is a terrible idea!

[00:15] *** committable6 left
[00:15] *** committable6 joined
[00:15] *** ChanServ sets mode: +v committable6

[00:15] *** cdg left
[00:16] <AlexDaniel> ryn1x: https://irclog.perlgeek.de/perl6/2017-11-01#i_15387453

[00:17] *** wamba left
[00:17] <AlexDaniel> huggable: I came up with a new name :is: https://irclog.perlgeek.de/perl6/2017-11-01#i_15387453

[00:17] <huggable> AlexDaniel, Added I came up with a new name as https://irclog.perlgeek.de/perl6/2017-11-01#i_15387453

[00:19] *** mempko left
[00:20] *** mcmillhj joined
[00:20] <AlexDaniel> ryn1x: also https://goo.gl/NcdTxV

[00:21] <AlexDaniel> NEXT :)

[00:22] <ryn1x> Alias, my bad.

[00:25] *** mcmillhj left
[00:25] <squashable6> 🍕 jnthn++ wrote a comment on “Discuss performance benefits of native types”: https://github.com/perl6/doc/issues/1534#issuecomment-341857521

[00:25] <squashable6> 🍕🍕🍕  First contribution by jnthn++! ♥

[00:26] *** mson left
[00:35] *** mcmillhj joined
[00:35] *** margeas left
[00:37] <squashable6> 🍕 jnthn++ wrote a comment on “Add Metamodel::EnumHOW page”: https://github.com/perl6/doc/pull/1648#issuecomment-341858608

[00:39] *** BenGoldberg joined
[00:40] *** mcmillhj left
[00:40] *** leont left
[00:50] *** mcmillhj joined
[00:52] <Geth> ¦ marketing: 47a1da3277 | (Zoffix Znet)++ (committed using GitHub Web editor) | README.md

[00:52] <Geth> ¦ marketing: Add info on requests

[00:52] <Geth> ¦ marketing: 

[00:52] <Geth> ¦ marketing: indicating people can ask us to design marketing materials

[00:52] <Geth> ¦ marketing: review: https://github.com/perl6/marketing/commit/47a1da3277

[00:54] <squashable6> 🍕 raiph++ opened issue “`eof` doc; reword to avo…”: https://github.com/perl6/doc/issues/1650

[00:54] <squashable6> 🍕🍕🍕  First contribution by raiph++! ♥

[00:54] *** diakopter joined
[00:57] *** mson joined
[00:58] *** mcmillhj left
[01:06] *** troys is now known as troys_

[01:08] *** mcmillhj joined
[01:09] *** ryn1x left
[01:09] *** ryn1x joined
[01:12] *** mcmillhj left
[01:13] <squashable6> 🍕 zoffixznet++ wrote a comment on “`eof` doc; reword to avo…”: https://github.com/perl6/doc/issues/1650#issuecomment-341861211

[01:15] *** dj_goku_ left
[01:19] *** ryn1x left
[01:23] *** mcmillhj joined
[01:24] *** diakopter left
[01:28] *** mcmillhj left
[01:30] *** AlexDaniel left
[01:35] *** mcmillhj joined
[01:35] *** ZzZombo left
[01:35] *** ZzZombo joined
[01:36] <samcv> AlexDaniel`, thanks for the heads up

[01:36] <yoleaux> 00:11Z <AlexDaniel> samcv: you were assigned here :) https://github.com/perl6/doc/issues/1517 Actually, I think anyone can write about it, so feel free to unassign yourself

[01:39] *** wander left
[01:40] *** mcmillhj left
[01:41] *** grondilu left
[01:43] <COMBORICO> Ryn1x, you still there?

[01:50] *** mcmillhj joined
[01:52] *** espadrine left
[01:52] *** darkmorph left
[01:53] *** aborazmeh joined
[01:53] *** aborazmeh left
[01:53] *** aborazmeh joined
[01:54] *** Rawriful left
[01:55] *** imcsk8 left
[01:57] *** mcmillhj left
[02:00] *** kalkin- joined
[02:01] *** cdg joined
[02:04] *** kalkin-- left
[02:05] *** mcmillhj joined
[02:06] *** cdg left
[02:10] *** mcmillhj left
[02:11] *** pecastro left
[02:12] *** comborico1611 joined
[02:14] *** troys_ is now known as troys

[02:14] *** pecastro joined
[02:14] *** Herby_ left
[02:17] *** mcmillhj joined
[02:18] *** pecastro left
[02:21] *** mcmillhj left
[02:25] *** pecastro joined
[02:27] *** comborico1611 left
[02:27] *** bitrauser_ joined
[02:28] *** mcmillhj joined
[02:28] *** COMBORICO left
[02:29] <ZzZombo> "The IO::Path type offers two other handy methods: .words and .lines that lazily read the file in smaller chunks and return Seq objects that (by default) don't keep already-consumed values around."

[02:29] <ZzZombo> didn't that get changed?

[02:31] *** bitrauser left
[02:33] *** mcmillhj left
[02:37] *** eliasr left
[02:43] *** mcmillhj joined
[02:45] *** ilbot3 left
[02:46] *** Zoffix joined
[02:47] <Zoffix> ZzZombo: no. You might be thinking of .comb and .split that were made non-lazy (at least until we implement Cat type)

[02:50] *** mcmillhj left
[02:51] <ZzZombo> ??? "Made IO::Path.lines non-lazy so it can always close the file handle [0083c4f]"

[02:51] <ZzZombo> Found it.

[02:51] <ZzZombo> https://github.com/rakudo/rakudo/blob/nom/docs/announce/2017.03.md

[02:52] <Zoffix> ZzZombo: it was reverted during IO grant.

[02:53] <ZzZombo> Good.

[02:54] <Zoffix> ZzZombo: IO::Path just delegates to IO::Handle here: https://github.com/rakudo/rakudo/blob/master/src/core/IO/Path.pm#L638 and IO::Handle uses !LINES-ITERATOR: https://github.com/rakudo/rakudo/blob/master/src/core/IO/Handle.pm#L491-L508 and lines iterator reads lazily: https://github.com/rakudo/rakudo/blob/master/src/core/IO/Handle.pm#L450-L487

[02:55] <Zoffix> :/ ToolChain summit pics are restricted: https://www.flickr.com/photos/101485128@N06/sets/72157683688805565/  and Yahoo wants my phone number to create an account... No way I'm giving anything to Yahoo :/

[02:55] <Zoffix> Was trying to find this pic in better quality https://pbs.twimg.com/media/C_9ZW8cVYAAOqr4.jpg

[02:55] *** ilbot3 joined
[02:55] *** ChanServ sets mode: +v ilbot3

[02:56] *** Cabanossi left
[02:57] *** Cabanossi joined
[02:57] <Zoffix> Oh found non-restricted link: https://www.flickr.com/photos/101485128@N06/sets/72157683688805565/ the restricted one was listed on the Weekly BTW: https://p6weekly.wordpress.com/2017/05/22/2017-21-yap6b/ (first one in "Other posts" section)

[02:59] <Zoffix> Huh. The two URLs are the same :|

[02:59] <Zoffix> ZofBot: Flikr's screwing with me!

[02:59] <ZofBot> Zoffix, i assume its useful for -something-

[02:59] <Zoffix> I hope so...

[03:01] *** mcmillhj joined
[03:07] *** mson left
[03:09] *** mcmillhj left
[03:10] *** dj_goku joined
[03:10] *** dj_goku left
[03:10] *** dj_goku joined
[03:13] <geekosaur> soem things have referrer restrictions

[03:13] <geekosaur> even in this day and age

[03:19] *** mcmillhj joined
[03:21] *** ugexe left
[03:24] *** mcmillhj left
[03:25] *** noganex joined
[03:28] *** noganex_ left
[03:34] *** mcmillhj joined
[03:35] *** wander joined
[03:38] <squashable6> 🍕 W4anD0eR96++ wrote a comment on “Mention ｢my %h{Int}｣ syn…”: https://github.com/perl6/doc/issues/1588#issuecomment-341868960

[03:38] *** mcmillhj left
[03:39] *** Cabanossi left
[03:42] *** Cabanossi joined
[03:44] *** khw left
[03:44] <squashable6> 🍕 W4anD0eR96++ wrote a comment on “Grammar.parse talks abou…”: https://github.com/perl6/doc/issues/1583#issuecomment-341869207

[03:44] <squashable6> 🍕 W4anD0eR96++ closed issue “Grammar.parse talks abou…”: https://github.com/perl6/doc/issues/1583

[03:47] *** mcmillhj joined
[03:49] <squashable6> 🍕 W4anD0eR96++ opened issue “Grammar .parse, details about *%opt needed”: https://github.com/perl6/doc/issues/1651

[03:52] *** mcmillhj left
[03:57] <ZzZombo> seems like perl6 doesn't wanna deal with BOM in files.

[03:58] <ZzZombo> Or something, IDK.

[03:58] <ZzZombo> "Malformed UTF-8 at line 1 col 1"

[03:58] <ZzZombo> the file has the BOM at the start.

[03:59] <ZzZombo> My text viewer reports it's in UTF-16, but the `:enc` option to `Grammar.parsefile` doesn't make it fly.

[04:00] <squashable6> 🍕 W4anD0eR96++ edited issue “False-positives on “Perl 6 Types” page”: https://github.com/perl6/doc/issues/1649

[04:00] <ZzZombo> Instead it seems to give me strange characters in unexpected positions.

[04:03] *** mcmillhj joined
[04:07] <Zoffix> IIRC we should do handle it 

[04:07] <Zoffix> s/should //;

[04:10] *** mcmillhj left
[04:17] *** cdg joined
[04:22] *** mcmillhj joined
[04:22] *** cdg left
[04:27] *** napo1eon joined
[04:28] *** mcmillhj left
[04:29] *** troys is now known as troys_

[04:33] *** BenGoldberg left
[04:35] *** mcmillhj joined
[04:40] *** mcmillhj left
[04:40] *** Cabanossi left
[04:41] *** Cabanossi joined
[04:45] *** ugexe joined
[04:45] *** mcmillhj joined
[04:50] *** mcmillhj left
[04:55] *** ivans left
[04:58] *** ivans joined
[05:01] <ZzZombo> Ah, welp, forgot to `chcp 65001`, that's why the strange characters.

[05:01] <ZzZombo> False alarm.

[05:01] <ZzZombo> But still, why does it not use the BOM to open in the right encoding?

[05:03] <geekosaur> because that's an old Windows-ism explicitly disavowed by the Unicode standard: the BOM is only defined in >8bit encodings, so not in UTF-7 or UTF-8

[05:04] <geekosaur> Microsoft eventually stopped doing it, but Windows programmers being Windows programmers (cf. skipping Windows 9) you still fidn programs icorrectly adding BOMs to UTF-8 files

[05:04] <ZzZombo> But the file IS in UTF-16.

[05:04] *** nadim_ joined
[05:05] <ZzZombo> Every program and tester I've used confirms that.

[05:05] *** mcmillhj joined
[05:05] <geekosaur> hm. in that case the decoder should be dealing

[05:06] <geekosaur> .ask samcv should the UTF16 (not UTF8!) reader be handling BOMs?

[05:06] <yoleaux> geekosaur: I'll pass your message to samcv.

[05:10] *** mcmillhj left
[05:16] *** mcmillhj joined
[05:21] *** mcmillhj left
[05:23] <samcv> geekosaur, hm

[05:23] <yoleaux> 05:06Z <geekosaur> samcv: should the UTF16 (not UTF8!) reader be handling BOMs?

[05:23] <samcv> does it handle it at all geekosaur?

[05:24] <Geth> ¦ doc/doc-regex-interpolation: 9893517423 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[05:24] <Geth> ¦ doc/doc-regex-interpolation: Document Regex Interpolation

[05:24] <Geth> ¦ doc/doc-regex-interpolation: 

[05:24] <Geth> ¦ doc/doc-regex-interpolation: I think it's worthy to be documented, because people will looking for a way to using patten given at the runtime.

[05:24] <Geth> ¦ doc/doc-regex-interpolation: 

[05:24] <Geth> ¦ doc/doc-regex-interpolation: But I'm not sure if this's the only way to interpolate patten(string) into regex.

[05:24] <Geth> ¦ doc/doc-regex-interpolation: review: https://github.com/perl6/doc/commit/9893517423

[05:24] <Geth> ¦ doc: W4anD0eR96++ created pull request #1652: Document Regex Interpolation, jnthn++

[05:24] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/1652

[05:24] <squashable6> 🍕 W4anD0eR96++ opened pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652

[05:26] <samcv> geekosaur, there seems to be code to check for BOM in there at least

[05:31] *** mcmillhj joined
[05:35] *** mcmillhj left
[05:39] <geekosaur> samcv, ZzZombo was having the issue

[05:39] <geekosaur> check backscroll

[05:40] *** aborazmeh left
[05:42] <samcv> ah. i see

[05:42] <samcv> well utf-8 ignores BOM

[05:42] <samcv> and it defaults to utf-8

[05:43] <samcv> so is the question if we should default to some form of detection rather than defaulting to utf-8 or not i suppose

[05:44] <samcv> your thoughts on that would be appriciated btw

[05:45] <ZzZombo> Yeah, I expected it to attempt to detect the encoding IF there is BOM.

[05:45] <ZzZombo> Then fall back to UTF-8, otherwise.

[05:47] <samcv> i believe with utf8 you are supposed to ignore the BOM so if we did that we'd have to default to autodetect or something

[05:47] <samcv> and wait for 6.d to do it

[05:47] *** mcmillhj joined
[05:48] *** ivans left
[05:48] *** ivans joined
[05:48] *** travis-ci joined
[05:48] <travis-ci> Doc build passed. Alex Chen 'Document Regex Interpolation

[05:48] <travis-ci> https://travis-ci.org/perl6/doc/builds/297103628 https://github.com/perl6/doc/commit/98935174232d

[05:48] *** travis-ci left
[05:54] *** mcmillhj left
[05:57] <samcv> geekosaur, thoughts on that?

[06:04] *** mcmillhj joined
[06:04] *** wamba joined
[06:08] *** mcmillhj left
[06:19] *** mcmillhj joined
[06:23] *** mcmillhj left
[06:30] *** epony left
[06:30] *** mcmillhj joined
[06:31] *** epony joined
[06:35] *** mcmillhj left
[06:46] *** mcmillhj joined
[06:51] *** konsolebox joined
[06:53] *** mcmillhj left
[07:02] *** ivans left
[07:04] *** mcmillhj joined
[07:07] *** ivans joined
[07:10] *** mcmillhj left
[07:13] *** setty1 joined
[07:16] *** troys_ is now known as troys

[07:20] *** mcmillhj joined
[07:21] *** troys left
[07:25] *** mcmillhj left
[07:26] <Geth> ¦ doc: 1139c6d6ec | (Alex Chen)++ (committed using GitHub Web editor) | doc/Type/Signature.pod6

[07:26] <Geth> ¦ doc: Document what `is rw` stands for

[07:26] <Geth> ¦ doc: 

[07:26] <Geth> ¦ doc: fix #1639

[07:26] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1139c6d6ec

[07:26] <synopsebot> Link: https://doc.perl6.org/type/Signature

[07:26] <squashable6> 🍕 W4anD0eR96++ closed issue “rw (what it stands for)”: https://github.com/perl6/doc/issues/1639

[07:32] *** domidumont joined
[07:33] *** mcmillhj joined
[07:33] <squashable6> 🍕 W4anD0eR96++ wrote a comment on “doc >>. on lists of Callables”: https://github.com/perl6/doc/issues/1643#issuecomment-341878217

[07:38] *** mcmillhj left
[07:39] *** mempko joined
[07:39] *** fatguy joined
[07:39] <Geth> ¦ doc/W4anD0eR96-patch-1: 739b25786c | (Alex Chen)++ (committed using GitHub Web editor) | htmlify.p6

[07:39] <Geth> ¦ doc/W4anD0eR96-patch-1: disable generate title with "Documentation for"

[07:39] <Geth> ¦ doc/W4anD0eR96-patch-1: 

[07:39] <Geth> ¦ doc/W4anD0eR96-patch-1: fix #1623

[07:39] <Geth> ¦ doc/W4anD0eR96-patch-1: review: https://github.com/perl6/doc/commit/739b25786c

[07:41] *** andrewalker joined
[07:43] <Geth> ¦ doc: 5e65409088 | (Alex Chen)++ (committed using GitHub Web editor) | htmlify.p6

[07:43] <Geth> ¦ doc: Title generated without useless start

[07:44] <Geth> ¦ doc: 

[07:44] <Geth> ¦ doc: fix #1623

[07:44] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5e65409088

[07:44] <squashable6> 🍕 W4anD0eR96++ closed issue “Useless  "Documentation for " in some page titles.”: https://github.com/perl6/doc/issues/1623

[07:47] *** darutoko joined
[07:47] <buggable> New CPAN upload: Acme-Test-Module-1.0.1.tar.gz by SKAJI https://cpan.metacpan.org/authors/id/S/SK/SKAJI/Perl6/Acme-Test-Module-1.0.1.tar.gz

[07:57] <buggable> New CPAN upload: Acme-Test-Module-1.0.2.tar.gz by SKAJI https://cpan.metacpan.org/authors/id/S/SK/SKAJI/Perl6/Acme-Test-Module-1.0.2.tar.gz

[08:01] *** pentashift joined
[08:01] *** domidumont left
[08:02] *** domidumont joined
[08:08] *** Piotr joined
[08:11] *** rindolf joined
[08:17] *** cdg joined
[08:20] <Geth> ¦ doc: fafd286256 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/operators.pod6

[08:20] <Geth> ¦ doc: doc operators' ASCII/Unicode variants

[08:20] <Geth> ¦ doc: 

[08:20] <Geth> ¦ doc: fix #1560

[08:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fafd286256

[08:20] <synopsebot> Link: https://doc.perl6.org/language/operators

[08:20] <squashable6> 🍕 W4anD0eR96++ closed issue “doc ≅ (unicode for =~=)”: https://github.com/perl6/doc/issues/1560

[08:22] *** cdg left
[08:23] *** rindolf left
[08:23] *** rindolf joined
[08:27] *** espadrine joined
[08:27] <buggable> New CPAN upload: Acme-Test-Module-1.0.3.tar.gz by SKAJI https://cpan.metacpan.org/authors/id/S/SK/SKAJI/Perl6/Acme-Test-Module-1.0.3.tar.gz

[08:32] *** Piotr left
[08:36] *** sena_kun joined
[08:40] *** araraloren joined
[08:52] *** setty1 left
[08:53] *** mempko left
[08:54] *** leont joined
[09:01] *** domidumont left
[09:08] *** Cabanossi left
[09:11] *** Cabanossi joined
[09:13] *** AlexDaniel joined
[09:17] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Useless  "Documentation for " in some page titles.”: https://github.com/perl6/doc/issues/1623#issuecomment-341882993

[09:17] <squashable6> 🍕 AlexDaniel++ reopened issue “Useless  "Documentation for " in some page titles.”: https://github.com/perl6/doc/issues/1623

[09:18] *** zakame joined
[09:18] *** pmurias joined
[09:18] *** TEttinger left
[09:18] <zakame> hi all

[09:19] <pmurias> zakame: hi

[09:19] <araraloren> hi zakame 

[09:19] <Geth> ¦ doc: 494b842151 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Language/traps.pod6

[09:19] <Geth> ¦ doc: Fix the heading in traps

[09:19] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/494b842151

[09:19] <synopsebot> Link: https://doc.perl6.org/language/traps

[09:22] <AlexDaniel> wander: o/ :)

[09:24] <AlexDaniel> m: say ‘42’ ~~ /\d+/

[09:24] <camelia> rakudo-moar 33d476d1b: OUTPUT: «｢42｣␤»

[09:24] *** espadrine left
[09:26] <wander> \o

[09:27] <squashable6> 🍕 AlexDaniel++ wrote a comment on a review for “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#discussion_r148926351

[09:27] <squashable6> 🍕 AlexDaniel++ wrote a comment on a review for “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#discussion_r148926399

[09:27] <squashable6> 🍕 AlexDaniel++ submitted a review on pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#pullrequestreview-74250651

[09:27] <squashable6> 🍕 AlexDaniel++ edited a review on pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#pullrequestreview-74250651

[09:27] <squashable6> 🍕 AlexDaniel++ wrote a comment on a review for “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#discussion_r148926356

[09:27] <AlexDaniel> geez

[09:29] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Add Metamodel::EnumHOW page”: https://github.com/perl6/doc/pull/1648#issuecomment-341883622

[09:29] *** eugene_barsky joined
[09:30] <squashable6> 🍕 AlexDaniel++ self-assigned issue “Handle enum types specially in type graphs”: https://github.com/perl6/doc/issues/72

[09:30] <AlexDaniel> that one is the oldest doc issue that is still open :)

[09:33] * geekosaur would say underscores are fine, insofar as they are a warning that you're poking at internals

[09:34] <AlexDaniel> so MOP is “internals”?

[09:34] <geekosaur> (come to think of it, if *that* isn't documented somewhere, perhaps it should be)

[09:35] <geekosaur> well, implementation details, as jnthn noted in the prior comment

[09:35] <AlexDaniel> jnthn also said that eventually we want to have it spec-ed

[09:36] <AlexDaniel> which makes it part of the perl 6 language, and that I guess means that it won't longer be some internal thing

[09:36] <geekosaur> not exactly. I'd actually prefer putting warnings in it that it's not part of the public perl 6 interface and may be non-portable or subject to change, and using it is at one's own risk

[09:36] <AlexDaniel> but I don't really know

[09:37] <geekosaur> as I read jnthn's comment, he'd prefer not to spec it but thinks it might become necessary

[09:37] <AlexDaniel> in other words, eventually we'll get rid of underscores there?

[09:37] <geekosaur> if it ends up becoming spec then likely yes

[09:37] <AlexDaniel> hm

[09:38] <geekosaur> unless we still want to maintain some kind of 'this is implementation detail' distinction, but that starts becoming dicey if it ends up part of the spec

[09:39] <geekosaur> I'm not real keen on making it spec, since it makes it harder to change if we come up with a better way to do things

[09:39] <Geth> ¦ doc/doc-regex-interpolation: 6ea6243802 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[09:39] <Geth> ¦ doc/doc-regex-interpolation: Update regexes.pod6

[09:39] <Geth> ¦ doc/doc-regex-interpolation: review: https://github.com/perl6/doc/commit/6ea6243802

[09:39] <squashable6> 🍕 W4anD0eR96++ synchronize pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652

[09:39] <geekosaur> I mean, by the same arguments about exposing it, one could argue nqp which is already being used in places should be a spec candidate

[09:39] <geekosaur> which, no.

[09:40] <squashable6> 🍕 W4anD0eR96++ submitted a review on pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#pullrequestreview-74250906

[09:40] <squashable6> 🍕 W4anD0eR96++ wrote a comment on a review for “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#discussion_r148926615

[09:40] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Add Metamodel::EnumHOW page”: https://github.com/perl6/doc/pull/1648#issuecomment-341884149

[09:40] <Geth> ¦ doc: 5d08cfcc98 | (Brian Duggan)++ | doc/Type/Metamodel/EnumHOW.pod6

[09:40] <Geth> ¦ doc: Add Metamodel::EnumHOW page

[09:40] <Geth> ¦ doc: 

[09:40] <Geth> ¦ doc: Resolves #1642

[09:40] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/5d08cfcc98

[09:40] <synopsebot> Link: https://doc.perl6.org/type/Metamodel/EnumHOW

[09:40] <squashable6> 🍕 AlexDaniel++ closed issue “Deadlink for Metamodel::…”: https://github.com/perl6/doc/issues/1642

[09:40] <Geth> ¦ doc: 310efd33b6 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | doc/Type/Metamodel/EnumHOW.pod6

[09:40] <Geth> ¦ doc: Merge pull request #1648 from perl6/enum_how

[09:40] <squashable6> 🍕 AlexDaniel++ merged pull request “Add Metamodel::EnumHOW page”: https://github.com/perl6/doc/pull/1648

[09:40] <Geth> ¦ doc: 

[09:40] <Geth> ¦ doc: Add Metamodel::EnumHOW page

[09:40] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/310efd33b6

[09:41] <geekosaur> documenting it is fine but I'd include big warnings about it being non-spec and use at your own risk. Likewise for any nqp docs

[09:42] <geekosaur> and would be very cautious about spec-ing things that could end up tying you to a particular implementation

[09:42] <geekosaur> hm, I should proabbly be saying this in the ticket...

[09:43] *** espadrine joined
[09:43] <AlexDaniel> yes please :)

[09:44] <AlexDaniel> or in a git commit, it's squashathon after all :)

[09:45] <squashable6> 🍕 AlexDaniel++ submitted a review on pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#pullrequestreview-74250987

[09:45] <squashable6> 🍕 AlexDaniel++ wrote a comment on a review for “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#discussion_r148926692

[09:45] *** Actualeyes left
[09:45] <tbrowder>  fwiw, just saw o’reilly’s programming newsletter article showing perl is most disliked language.

[09:45] *** eugene_barsky left
[09:46] <squashable6> 🍕 W4anD0eR96++ wrote a comment on a review for “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#discussion_r148926707

[09:46] <squashable6> 🍕 W4anD0eR96++ submitted a review on pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#pullrequestreview-74251003

[09:46] <squashable6> 🍕 geekosaur++ wrote a comment on “Add Metamodel::EnumHOW page”: https://github.com/perl6/doc/pull/1648#issuecomment-341884415

[09:46] <squashable6> 🍕🍕🍕  First contribution by geekosaur++! ♥

[09:47] <Geth> ¦ doc/doc-regex-interpolation: b58e2dc9b4 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[09:47] <Geth> ¦ doc/doc-regex-interpolation: Update regexes.pod6

[09:47] <Geth> ¦ doc/doc-regex-interpolation: review: https://github.com/perl6/doc/commit/b58e2dc9b4

[09:47] <squashable6> 🍕 W4anD0eR96++ synchronize pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652

[09:50] <squashable6> 🍕 AlexDaniel++ opened issue “ClassHOW and EnumHOW pag…”: https://github.com/perl6/doc/issues/1653

[09:50] <squashable6> 🍕 AlexDaniel++ labeled issue “ClassHOW and EnumHOW pag…”: https://github.com/perl6/doc/issues/1653

[09:54] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#issuecomment-341884849

[10:04] <kalkin-> I have created a NativeCall wrapper around the Open-Simplex algorithm. The algo is seeded with an int, and then you call the function noise2(1, 1) and you get a double back. It's a stable aglorithm, this means each time i call nois2 with the same arguments, it will return the same result for the same seed

[10:04] <kalkin-> This works in my simple C programm

[10:04] <kalkin-> but if I call it from the wrapper the result of noise2 function is always different

[10:05] <kalkin-> There must be something wrong with NativeCall interface, shouldn't it?

[10:05] *** evalable6 left
[10:05] *** evalable6 joined
[10:06] <kalkin-> I can't explain this behavior

[10:19] <geekosaur> can't say anything without seeing code. a quick web search got me a C implenentation that expects open_simplex_noise2 to be called with three parameters, not two...

[10:23] *** araraloren_ joined
[10:23] *** cdg joined
[10:26] *** araraloren left
[10:27] <kalkin-> geekosaur: that's the implementation i use. the first parameter is a struct

[10:28] <kalkin-> which is a private attribute of my object

[10:28] *** cdg left
[10:29] <kalkin-> geekosaur: let me clean up code and i will upload it

[10:29] <kalkin-> It's currently part of a package which I'm not allowed to make available publicly

[10:38] *** Cabanossi left
[10:41] *** Cabanossi joined
[10:54] <kalkin-> geekosaur: https://github.com/kalkin/Algorithm-Open-Simplex

[10:54] <kalkin-> I added a simple test t/02-simplex.t which reproduces my issue

[11:01] <geekosaur> uh

[11:01] *** evalable6 left
[11:01] *** evalable6 joined
[11:02] <geekosaur> struct osn_context contains two pointers to int16_t. you are giving it two flat values

[11:02] <geekosaur> I'm a little surprised it's not coring tbh

[11:03] <kalkin-> I thought declaring it is rw would make it pointers?

[11:04] <kalkin-> geekosaur: also removing = 0 doesn't fix the issue, assigning default value was my attempt of fixing it

[11:04] <kalkin-> I also first tried to declare the Struct just as a CPointer, without any attributes, but it still has the same issue

[11:05] <kalkin-> ups there is a type in t/02 I just pushed a fix for it

[11:06] <geekosaur> grrr. nativecall docs don;'t mention is rw doing anything

[11:06] <geekosaur> I would expect for a CStruct repr that is rw would be a no-op; having it magically pointer things inside a struct 'is a bit too magical

[11:07] <geekosaur> as a direct parameter, 'is rw' would necessarily do that

[11:07] <geekosaur> but here you'd want to apply that to the struct, not the fields therein

[11:07] <geekosaur> (and in any case a struct is already by reference so not sure it'd do anything)

[11:11] <geekosaur> the default value thing... if I am reading right, shouldn't have done anything and possibly should have thrown an error, since there is no Scalar container and therefore you have to bind, not assign

[11:12] <kalkin-> Just noticed I'm using Rakudo 2017.09, may be I should upgrade?

[11:13] <geekosaur> and I'm not sure 'Struct is rw' gives you double indirection, hm

[11:14] <kalkin-> geekosaur: is rw was the issue

[11:14] <kalkin-> nop

[11:14] <kalkin-> wait

[11:14] <kalkin-> wtf

[11:15] *** sftp left
[11:15] <kalkin-> now the tests pass

[11:15] *** sftp joined
[11:15] <kalkin-> I fixed some build issues, which were only a problem in the repo i just pushed and the test passes

[11:15] <kalkin-> This is weird

[11:16] <kalkin-> Because in my other code it doesn't

[11:16] *** llfourn left
[11:17] <kalkin-> K, test seems to pass, but if i execute the code via perl6 command line it doesn't

[11:19] <kalkin-> This is weird

[11:19] <geekosaur> hm. I downloaded your repo and added some debug prints, and it's failing to build complaining about missing LibraryMake. missing dep?

[11:19] *** mr-foobar left
[11:19] <kalkin-> Yes

[11:19] * geekosaur installing that separately

[11:20] <kalkin-> I hope you fetched the latest version. I had to fix some build errors

[11:21] <geekosaur> oh, heh, test will probably fail because of the debug output...

[11:22] *** mr-foobar joined
[11:22] <geekosaur> actually it fails because it's looking for the .so in the wrong directory

[11:22] <Geth> ¦ doc: patzim++ created pull request #1654: Some markup fixes for Language/Modules.

[11:22] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/1654

[11:22] <squashable6> 🍕 patzim++ opened pull request “Some markup fixes for Language/Modules.”: https://github.com/perl6/doc/pull/1654

[11:23] <geekosaur> hm, or that is what you fixed; I apparently granbbed just before your last commit

[11:24] <kalkin-> geekosaur: I have fixed it in acf9ac2 commit

[11:25] *** ChoHag left
[11:26] *** patrickz joined
[11:27] *** dakkar joined
[11:28] <geekosaur> still defaulting one dir too high

[11:28] <geekosaur> Cannot locate native library '/home/allbery/Downloads/resources/libraries/libopensimplex.so': /home/allbery/Downloads/resources/libraries/libopensimplex.so: cannot open shared object file: No such file or directory

[11:28] <geekosaur> might not be something you have control over though, but %*RESOURCES being weird

[11:29] *** eliasr joined
[11:29] <kalkin-> HEAD definitely build fine here. I also checked the generated Makefile, everything looks like it should be

[11:29] *** mattr joined
[11:30] <kalkin-> weird

[11:36] *** ChoHag joined
[11:37] <geekosaur> so:

[11:37] <geekosaur> init: ctxp = 0x681a2b0 (0x4b2ec70)

[11:37] <geekosaur> n2d: ctx = 0x681a2b0

[11:37] <geekosaur> the second line should match the *second* value in the first line

[11:38] <geekosaur> so it's not being passed as pointer-to-pointer

[11:40] <kalkin-> geekosaur: I though because I have a Struct is rw paramter in line 24 it would make it a pointer-to-pointer

[11:40] <kalkin-> I assume that Stuct class is already a pointer, so adding is rw to the subroutine makes a pointer-to-pointer. if not how would it be done in perl6?

[11:41] <geekosaur> [04 11:07:44] <geekosaur> (and in any case a struct is already by reference so not sure it'd do anything)

[11:41] <kalkin-> geekosaur: i thought you meant is rw in line 10

[11:43] <geekosaur> also, uh, you didn't want to Struct.new because C is allocating it

[11:43] <Geth> ¦ doc/doc-regex-interpolation: c117e00e70 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[11:43] <Geth> ¦ doc/doc-regex-interpolation: Update regexes.pod6

[11:43] <Geth> ¦ doc/doc-regex-interpolation: review: https://github.com/perl6/doc/commit/c117e00e70

[11:43] <squashable6> 🍕 W4anD0eR96++ synchronize pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652

[11:44] *** araralonre__ joined
[11:45] <kalkin-> It segfaults if I don't assign Struct.new to $!Struct

[11:46] <geekosaur> yes, you're not calling the C part right so you are losing that allocation and then you hide that by using Struct.new

[11:46] <geekosaur> I showed you the output from C side

[11:47] *** araraloren_ left
[11:47] <squashable6> 🍕 W4anD0eR96++ wrote a comment on “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#issuecomment-341890662

[11:48] <squashable6> 🍕 W4anD0eR96++ deleted a comment on “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#issuecomment-341890662

[11:49] <geekosaur> basiclaly what you are doing is not going to work because you are trying to simultaneously have perl 6/nativecall and C manage the allocation

[11:50] <kalkin-> geekosaur: yes, but I don't know how to call it right. I'm rereading the NativeCall documentation part on Structs, but I still can't figure it out

[11:51] *** araraloren_ joined
[11:54] *** araralonre__ left
[11:55] *** azawawi joined
[11:55] <azawawi> hi

[11:55] <yoleaux> 3 Nov 2017 23:23Z <MasterDuke> azawawi: btw, `$packed = (^$size).map({$buffer[$_]})` should be faster than repeatedly .appending

[11:56] <azawawi> .tell MasterDuke to my surprise after trying it out, the old non-map solution was a bit faster.

[11:56] <yoleaux> azawawi: I'll pass your message to MasterDuke.

[11:57] *** azawawi left
[11:57] <geekosaur> well. I have it passing the right pointers now but I think something else has gone wrong.

[11:58] <geekosaur> this is complex enough you need more of a nativecall expert. not sure who that'd be though

[11:58] <geekosaur> maybe nine

[11:59] <Geth> ¦ doc: 689cc94111 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/traps.pod6

[11:59] <Geth> ¦ doc: Make the expression clearer and fix link(dirty)

[11:59] <Geth> ¦ doc: 

[11:59] <Geth> ¦ doc: fix #1576

[11:59] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/689cc94111

[11:59] <synopsebot> Link: https://doc.perl6.org/language/traps

[11:59] <squashable6> 🍕 W4anD0eR96++ closed issue “Broken link at https://d…”: https://github.com/perl6/doc/issues/1576

[11:59] <geekosaur> oh. forgot to fix the other pointers

[12:02] <Geth> ¦ doc/doc-regex-interpolation: 082d518c64 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[12:02] <Geth> ¦ doc/doc-regex-interpolation: Update regexes.pod6

[12:02] <Geth> ¦ doc/doc-regex-interpolation: review: https://github.com/perl6/doc/commit/082d518c64

[12:02] <squashable6> 🍕 W4anD0eR96++ synchronize pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652

[12:06] *** margeas joined
[12:06] *** knight__ joined
[12:07] *** mattr left
[12:07] *** patrickz left
[12:07] <geekosaur> ok, I have it behaving locally. test still fails because you forgot comparing floating point requires fuzz

[12:07] <geekosaur> values print out identical but are not == because IEEE floating point

[12:08] <knight__> me, again.. :-) Hello, is there any possibility to do something like this: I have unstable version of Perl6 - last, can I define in source code, that I want use version from 2017.07 -> Because in last version I am getting an error: IO::String is a builtin type, not an external module 

[12:08] <knight__> And in version 2017.07, everything works correctly

[12:08] <knight__> And, my prof... :-X

[12:08] <knight__> ?

[12:08] <kalkin-> k, but still what is the right way of passing uninitialized structs to a subroutine? :)

[12:09] <geekosaur> http://lpaste.net/2111067440635969536

[12:10] <geekosaur> because you need that double pointer and allocation in C instead of in Perl

[12:10] <geekosaur> oh, foo, forgot to remove the dd

[12:12] <geekosaur> possibly extending NativeCall to handle that better is something you could request

[12:12] <kalkin-> geekosaur: ohhh, this makes sense

[12:12] <geekosaur> but once you get into stuff like this, it all gets rather hairy and operhaps it's better not to tryto second0guess. especially given that C is actually ambiguous when it comes to pointers

[12:13] <kalkin-> I understand your code, but I wouldn't have figured it out to do it like this just by reading the docs

[12:13] <geekosaur> (did you mean a pointer or an array? NativeCall would have to guess which you meant, probably, since the C types are of no help whatsoever)

[12:14] <squashable6> 🍕 W4anD0eR96++ wrote a comment on “Mixed | and || in regexes (trap?)”: https://github.com/perl6/doc/issues/1141#issuecomment-341892262

[12:15] <geekosaur> I cheated and popped the NativeCall source open

[12:15] <geekosaur> even so, that bind to $!struct is kinda scary --- was not sure it'd retain its repr

[12:16] <geekosaur> but copying is definitely not what I want. then again maybe = ends up being := anyway; docs are ambiguous as to whether that refered to individual fields or the whole CStruct

[12:18] <squashable6> 🍕 W4anD0eR96++ wrote a comment on “Nil vs Any confusion (trap)”: https://github.com/perl6/doc/issues/1134#issuecomment-341892517

[12:18] <geekosaur> I kinda don't like how NativeCall works; it's trying to be too smart but trying to speak to too dumb a language over too dumb an interface (C and its types, that is)

[12:19] <kalkin-> geekosaur: thank you for your help and time

[12:19] <geekosaur> but FFI is in general courting core dumps, because C and its types are all you get and C's type system is too dumb to prevent errors

[12:21] <kalkin-> btw: would it make sense to add a DESTROY method which calls open_simplex_noise_free? 

[12:21] *** darkmorph joined
[12:21] <geekosaur> I would think so

[12:21] <kalkin-> Does every calss implement Metamodel::Finalization?

[12:22] <kalkin-> geekosaur: great, thanks!

[12:22] <geekosaur> otherwise you're leaking three pointers to memory perl didn't allocate and therefore can't free

[12:22] *** patrickz joined
[12:23] *** aborazmeh joined
[12:23] *** aborazmeh left
[12:23] *** aborazmeh joined
[12:23] <kalkin-> geekosaur: yes of course, I just wasn't sure if DESTROY is the right way to do it and if Metamodel::Finalization is part of _every_ object

[12:24] <geekosaur> hahaha

[12:24] <geekosaur> popped the documentation for it. had to load the svg separately because it's just a fuzzy line

[12:24] <kalkin-> geekosaur: lol i though it just some kind of ornament :)

[12:25] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Mixed | and || in regexes (trap?)”: https://github.com/perl6/doc/issues/1141#issuecomment-341892919

[12:27] <geekosaur> I don't know if repr(CStruct) will have the finalizer stuff

[12:27] <geekosaur> I would hope it does, because DESTROY is most useful in exactly cases like this

[12:27] *** patrickz left
[12:30] *** darkmorph left
[12:31] <squashable6> 🍕 W4anD0eR96++ wrote a comment on “Grammar doc discusses ac…”: https://github.com/perl6/doc/issues/897#issuecomment-341893308

[12:32] <Geth> ¦ doc: 82966bcc21 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Perl6/TypeGraph/Viz.pm

[12:32] <Geth> ¦ doc: Render Enums differently in type graphs

[12:32] <Geth> ¦ doc: 

[12:32] <Geth> ¦ doc: This should resolve #72. The ticket says to “render enum types

[12:32] <Geth> ¦ doc: differently from classes”, but does not specify how exactly. This

[12:32] <Geth> ¦ doc: commit makes enums green.

[12:32] <Geth> ¦ doc: 

[12:32] <squashable6> 🍕 AlexDaniel++ closed issue “Handle enum types specially in type graphs”: https://github.com/perl6/doc/issues/72

[12:32] <Geth> ¦ doc: I am sure that there are better (and prettier) ways to do it, but the

[12:32] <Geth> ¦ doc: graph generation code is already unnecessarily convoluted, so perhaps

[12:32] <Geth> ¦ doc: we need a rewrite that will take care of all these tiny issues?

[12:32] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/82966bcc21

[12:33] <Geth> ¦ doc: 83c7646bb3 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Perl6/TypeGraph/Viz.pm

[12:33] <Geth> ¦ doc: Untoothpick strings

[12:33] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/83c7646bb3

[12:35] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Handle enum types specially in type graphs”: https://github.com/perl6/doc/issues/72#issuecomment-341893567

[12:35] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Unreadable type graphs”: https://github.com/perl6/doc/issues/246#issuecomment-341893609

[12:35] <kalkin-> geekosaur: I wanted to add it on on the Algorithm::Open-Simplex class

[12:39] <wander> m: say "if else" ~~ / i | if || "if else" /

[12:39] <camelia> rakudo-moar 33d476d1b: OUTPUT: «｢if｣␤»

[12:39] <wander> m: say "if else" ~~ / i || if | "if else" /

[12:39] <camelia> rakudo-moar 33d476d1b: OUTPUT: «｢i｣␤»

[12:40] <wander> m: say "if else" ~~ / (i || if) | "if else" /

[12:40] <camelia> rakudo-moar 33d476d1b: OUTPUT: «｢if else｣␤»

[12:42] *** ZzZombo left
[12:42] *** ZzZombo joined
[12:44] <geekosaur> meanwhile I have it working with =~= for the test, but testing fails because 00-meta.t fails

[12:45] <geekosaur> oh, because Test::Meta is failing     # Failed test 'version is present and doesn't have an asterisk'

[12:45] <geekosaur> good enough I guess

[12:46] <wander> m: say "if else" ~~ /  if | i || "if else" /

[12:46] <camelia> rakudo-moar 33d476d1b: OUTPUT: «｢if｣␤»

[12:46] <wander> m: say "if else" ~~ /  if || "if else" | if /

[12:46] <camelia> rakudo-moar 33d476d1b: OUTPUT: «｢if｣␤»

[12:47] <wander> m: say "if else" ~~ /  if || "if el" | "if else" /

[12:47] <camelia> rakudo-moar 33d476d1b: OUTPUT: «｢if｣␤»

[12:47] <wander> m: say "if else" ~~ /  (if || "if el") | "if else" /

[12:47] <camelia> rakudo-moar 33d476d1b: OUTPUT: «｢if else｣␤»

[12:47] <MasterDuke> .

[12:47] <yoleaux> 11:56Z <azawawi> MasterDuke: to my surprise after trying it out, the old non-map solution was a bit faster.

[12:48] <geekosaur> hm, maanged to completely forget I was testing if the finalizer was being called

[12:48] <geekosaur> which it probably wasn't because global destruction needs some option I can't recall or fine

[12:48] <geekosaur> *find

[12:49] <geekosaur> (perl 6 knows OSes free memory automatically, so it doesn't waste time on global destruction for the most part. there's some knob overriding this for use with valgrind)

[12:49] <MasterDuke> .tell azawawi hm, map was a little faster for my made up test case. however, i realized you're really just taking a slice. it doesn't appear to be faster, but `$packed = $buffer[^$size]` is at least simpler

[12:49] <yoleaux> MasterDuke: I'll pass your message to azawawi.

[12:50] <MasterDuke> geekosaur: --full-cleanup passed to moar, but it doesn't work perfectly

[12:50] <geekosaur> it's too late now, I blew the working area away

[12:54] *** knight__ left
[12:55] *** ilmari left
[12:58] <Geth> ¦ doc: bc61a6d1e2 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/traps.pod6

[12:58] <Geth> ¦ doc: Document using C<|> or C<||> as a trap

[12:58] <Geth> ¦ doc: 

[12:58] <Geth> ¦ doc: #1141

[12:58] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/bc61a6d1e2

[12:58] <synopsebot> Link: https://doc.perl6.org/language/traps

[13:00] *** ilmari joined
[13:01] <geekosaur> hm, I've thought of a way NC could handle this, and think it works for all cases because it's C side that has to deal with the ugliness

[13:01] *** rindolf left
[13:01] <geekosaur> has Struct $!struct is unmanaged;

[13:02] <geekosaur> then in the init call, $!struct is rw

[13:05] <geekosaur> which would tell it to double-indirect in the init call. and ideally warn you to set up a destructor. or would 'will leave' work?

[13:06] <geekosaur> you'd also hopefully get an error instead of a core dump if you tried to access it before the init call

[13:08] *** APic left
[13:09] *** rindolf joined
[13:09] *** APic joined
[13:11] <kalkin-> geekosaur: here the tests passes with ==

[13:12] *** yqt joined
[13:13] <geekosaur> yeh, I was misled by the other test which I thought was separate but is in fact a prerequisite

[13:13] <geekosaur> so it was 00-meta that was failing for me the whole time

[13:14] <geekosaur> I would still use =~= just because I don't trust floating point to be reliably ==

[13:14] <Geth> ¦ doc: 9659f324eb | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/5to6-nutshell.pod6

[13:14] <Geth> ¦ doc: Modify advice of C<|> and C<||>, ronaldxs++

[13:14] <Geth> ¦ doc: 

[13:14] <Geth> ¦ doc: fix #1141

[13:14] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9659f324eb

[13:14] <synopsebot> Link: https://doc.perl6.org/language/5to6-nutshell

[13:15] <squashable6> 🍕 W4anD0eR96++ closed issue “Mixed | and || in regexes (trap?)”: https://github.com/perl6/doc/issues/1141

[13:16] <squashable6> 🍕 W4anD0eR96++ requested a review on pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652

[13:17] *** dakkar left
[13:21] <squashable6> 🍕 MasterDuke17++ submitted a review on pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#pullrequestreview-74255007

[13:21] <squashable6> 🍕 MasterDuke17++ wrote a comment on a review for “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#discussion_r148930468

[13:24] <squashable6> 🍕 MasterDuke17++ wrote a comment on a review for “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#discussion_r148930564

[13:24] <squashable6> 🍕 MasterDuke17++ submitted a review on pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#pullrequestreview-74255064

[13:27] <squashable6> 🍕 W4anD0eR96++ wrote a comment on “Useless  "Documentation for " in some page titles.”: https://github.com/perl6/doc/issues/1623#issuecomment-341896837

[13:27] <squashable6> 🍕 MasterDuke17++ submitted a review on pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#pullrequestreview-74255138

[13:27] <squashable6> 🍕 MasterDuke17++ wrote a comment on a review for “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#discussion_r148930635

[13:31] *** Thrush joined
[13:33] <Thrush> I discovered that there's a really nice idiom for checking to see if a numerical list/array is already sorted:  [<=] (1,2,2,3,5)

[13:33] <Thrush> m: say [<=] (1,2,2,3,5)

[13:33] <camelia> rakudo-moar 33d476d1b: OUTPUT: «True␤»

[13:33] <Thrush> m: say [<=] (4,1,2,2,3,5)

[13:33] <camelia> rakudo-moar 33d476d1b: OUTPUT: «False␤»

[13:34] <AlexDaniel> Thrush: yes :)

[13:34] <AlexDaniel> Thrush: although… there's a little problem with the implementation right now

[13:35] <Thrush> And my question is:  What if I sorted my array by some other criterion?  Like by word-length, like this:  my @words = <Happy birthday to you>.sort( *.chars );  How would I check then if @words is sorted by my a certain criterion?

[13:35] <Thrush> m: my @words = <Happy birthday to you>.sort( *.chars ); @words.say

[13:35] <camelia> rakudo-moar 33d476d1b: OUTPUT: «[to you Happy birthday]␤»

[13:35] <Thrush> AlexDaniel:  Oh, what's the problem?

[13:36] <AlexDaniel> Thrush: actually, nevermind, I can't reproduce it

[13:36] <AlexDaniel> m: my @a = eager 42 xx 80000; say [<=] @a

[13:36] <camelia> rakudo-moar 33d476d1b: OUTPUT: «True␤»

[13:37] <Thrush> I suppose I could map() the array, then check.

[13:37] <Thrush> m: my @words = <Happy birthday to you>.sort( *.chars ); say [<=] @words.map( *.chars );

[13:37] <camelia> rakudo-moar 33d476d1b: OUTPUT: «True␤»

[13:37] <AlexDaniel> yeah

[13:38] *** aborazmeh left
[13:38] <Thrush> This works, but what if my sort wasn't numerical at all?  Like, I sorted by the reversed word?  Like this:

[13:38] <Thrush> m: my @words = <happy birthday to you>.sort( *.flip );  @words.say

[13:38] <camelia> rakudo-moar 33d476d1b: OUTPUT: «[to you birthday happy]␤»

[13:39] <Thrush> How would I use [<=] (or something similar) to check sorted order, without re-sorting the array?

[13:40] <Geth> ¦ doc: 836213dab0 | (Aleks-Daniel Jakimenko-Aleksejev)++ | doc/Language/traps.pod6

[13:40] <Geth> ¦ doc: Attempt to deconfuse | || trap

[13:40] <Geth> ¦ doc: 

[13:40] <Geth> ¦ doc: I guess a code example should make it more clear.

[13:40] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/836213dab0

[13:40] <synopsebot> Link: https://doc.perl6.org/language/traps

[13:41] <AlexDaniel> Thrush: then you'd use a corresponding operator, in this case &leg

[13:41] <AlexDaniel> m: my @words = <happy birthday to you>.sort( *.flip ); say [leg] @words

[13:41] <camelia> rakudo-moar 33d476d1b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot reduce with leg because structural infix operators are diffy and not chaining␤at <tmp>:1␤------> 3y birthday to you>.sort( *.flip ); say [7⏏5leg] @words␤    expecting any of:␤      …»

[13:41] <AlexDaniel> ah! Well, maybe not

[13:42] <AlexDaniel> m: my @words = <happy birthday to you>.sort( *.flip ); say [cmp] @words

[13:42] <camelia> rakudo-moar 33d476d1b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot reduce with cmp because structural infix operators are diffy and not chaining␤at <tmp>:1␤------> 3y birthday to you>.sort( *.flip ); say [7⏏5cmp] @words␤    expecting any of:␤      …»

[13:42] <AlexDaniel> right, then maybe there's no easy way

[13:42] <AlexDaniel> not every operator can be chained like ≤

[13:42] <AlexDaniel> squashable6: status

[13:42] <squashable6> AlexDaniel, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈22 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[13:42] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/a2768a5c073a3de1d963910fb629e3f5

[13:43] <Thrush> I was thinking of a more complicated sort, like first by word-length, but if they are the same, then by alphabetical order.  Like this:

[13:43] <Geth> ¦ doc/doc-regex-interpolation: 94bdf62273 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[13:43] <Geth> ¦ doc/doc-regex-interpolation: Update regexes.pod6

[13:43] <Geth> ¦ doc/doc-regex-interpolation: review: https://github.com/perl6/doc/commit/94bdf62273

[13:43] <squashable6> 🍕 W4anD0eR96++ synchronize pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652

[13:44] <Thrush> m: my @words = <to say hi and hello>.sort( { [$_.chars, lc($_)] }; @words.say

[13:44] <camelia> rakudo-moar 33d476d1b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3sort( { [$_.chars, lc($_)] }; @words.say7⏏5<EOL>␤»

[13:44] <Thrush> m: my @words = <to say hi and hello>.sort( { [$_.chars, lc($_)] } ); @words.say

[13:44] <camelia> rakudo-moar 33d476d1b: OUTPUT: «[hi to and say hello]␤»

[13:45] <Thrush> If I encapsulated into a function for re-use, could I use it both to sort, and with an operator similar to [<=] (for checking if an array is already sorted) ?

[13:46] *** setty1 joined
[13:47] <squashable6> 🍕 W4anD0eR96++ wrote a comment on a review for “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#discussion_r148931058

[13:47] <squashable6> 🍕 W4anD0eR96++ submitted a review on pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#pullrequestreview-74255561

[13:47] <Thrush> Here's another question:  Let's say I have an array with several undefined elements, like this:  my @a; @a[0,3] = <a b>;

[13:47] <Thrush> m: my @a; @a[0,3] = <a b>; @a.say

[13:47] <camelia> rakudo-moar 33d476d1b: OUTPUT: «[a (Any) (Any) b]␤»

[13:48] <Thrush> Is there an Array method that will remove undefined elements?  Something like this:  @a = @a.compress();

[13:50] <Thrush> I guess this works:

[13:50] <Thrush> m: my @a; @a[0,3] = <a b>; @a.=grep( *.defined ); @a.say

[13:50] <camelia> rakudo-moar 33d476d1b: OUTPUT: «[a b]␤»

[13:51] <Thrush> But is there a more straight-forward way?  If there is a function/method for it, I'd like to know about it.

[13:52] *** patrickz joined
[13:53] <squashable6> 🍕 W4anD0eR96++ labeled issue “Grammar doc discusses ac…”: https://github.com/perl6/doc/issues/897

[13:54] <Thrush> Now that I think about it, why does this work?  say [<=] (1, 2, 3, 4, 5);

[13:54] <Thrush> Shouldn't (1 <= 2) return True, which then causes (True <= 3) to get compared next?

[13:55] <Geth> ¦ doc: 799e25c33a | (Patrick Sebastian Zimmermann)++ | doc/Language/modules.pod6

[13:55] <Geth> ¦ doc: Some markup corrections to Language/Modules.

[13:55] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/799e25c33a

[13:55] <Geth> ¦ doc: d3bc401882 | (Patrick Zimmermann)++ (committed using GitHub Web editor) | doc/Language/modules.pod6

[13:55] <Geth> ¦ doc: Merge pull request #1654 from patzim/master

[13:55] <synopsebot> Link: https://doc.perl6.org/language/modules

[13:55] <Geth> ¦ doc: 

[13:55] <Geth> ¦ doc: Some markup fixes for Language/Modules.

[13:55] <squashable6> 🍕 patzim++ merged pull request “Some markup fixes for Language/Modules.”: https://github.com/perl6/doc/pull/1654

[13:55] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d3bc401882

[14:03] <AlexDaniel> Thrush: no, because you can actually write 1 <= 2 <= 3 <= 4 <= 5

[14:03] <AlexDaniel> ah

[14:03] <squashable6> 🍕 W4anD0eR96++ wrote a comment on “False-positives on “Perl 6 Types” page”: https://github.com/perl6/doc/issues/1649#issuecomment-341899274

[14:03] <AlexDaniel> m: my @words = <happy birthday to you>.sort( *.flip ); say [le] @words

[14:03] <camelia> rakudo-moar 33d476d1b: OUTPUT: «False␤»

[14:03] <AlexDaniel> m: my @words = <happy birthday to you>.sort( *.flip ); say [le] @words.sort

[14:03] <camelia> rakudo-moar 33d476d1b: OUTPUT: «True␤»

[14:04] <AlexDaniel> Thrush: here's a relevant list: https://docs.perl6.org/language/operators#Chaining_Binary_Precedence

[14:07] *** dpk joined
[14:10] <Geth> ¦ doc: d3336436dc | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/typesystem.pod6

[14:10] <Geth> ¦ doc: Avoid auto-generate '/type/*'

[14:10] <Geth> ¦ doc: 

[14:10] <Geth> ¦ doc: #1649

[14:10] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d3336436dc

[14:10] <synopsebot> Link: https://doc.perl6.org/language/typesystem

[14:12] <Thrush> Thanks for that link, AlexDaniel.  I never knew that "min" and "max" could be used as infix operators.

[14:13] <Geth> ¦ doc: cee601a1f4 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/objects.pod6

[14:13] <Geth> ¦ doc: Fix False-positives on “Perl 6 Types” page(dirty)

[14:13] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/cee601a1f4

[14:13] <synopsebot> Link: https://doc.perl6.org/language/objects

[14:13] *** leah2 left
[14:13] *** patrickz left
[14:16] <squashable6> 🍕 AlexDaniel++ edited issue “Lots of broken links, in…”: https://github.com/perl6/doc/issues/561

[14:16] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Lots of broken links, in…”: https://github.com/perl6/doc/issues/561#issuecomment-341900257

[14:17] <wander> AlexDaniel: issue #1623 

[14:18] <AlexDaniel> wander: hmm

[14:18] *** leah2 joined
[14:18] <AlexDaniel> wander: ok

[14:18] <AlexDaniel> I'm fine with that :)

[14:19] <wander> :)

[14:19] *** TomLeg joined
[14:21] <wander> https://docs.perl6.org/routine-method.html

[14:21] <wander> what a mess

[14:23] <wander> When does it start? I don't think my last commit causes it

[14:27] *** Zoffix left
[14:32] <TomLeg> Are there tutorials on how to contribute, as promised in the poster?

[14:35] <Thrush> sub infix:<.oO>($name, $thought) { say "$name thinks $thought" }; 'Foo' .oO 'awesome'

[14:35] <Thrush> m: sub infix:<.oO>($name, $thought) { say "$name thinks $thought" }; 'Foo' .oO 'awesome'

[14:35] <camelia> rakudo-moar 33d476d1b: OUTPUT: «Foo thinks awesome␤»

[14:36] <Thrush> That's strange... on my own perl6 REPL, when I type that line, I get exactly that output.  But then when I type "'Foo' .oO 'awesome'" by itself, I get a compiler error.

[14:36] <Thrush> Why is that?

[14:39] *** llfourn joined
[14:41] *** fatguy left
[14:41] <geekosaur> because the repl is a bit buggy

[14:44] <squashable6> 🍕 W4anD0eR96++ wrote a comment on “Useless  "Documentation for " in some page titles.”: https://github.com/perl6/doc/issues/1623#issuecomment-341902090

[14:45] <squashable6> 🍕 MasterDuke17++ wrote a comment on a review for “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#discussion_r148932532

[14:45] <squashable6> 🍕 MasterDuke17++ submitted a review on pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#pullrequestreview-74256980

[14:46] <geekosaur> https://rt.perl.org/Public/Bug/Display.html?id=131530 https://rt.perl.org/Public/Bug/Display.html?id=131900

[14:46] <squashable6> 🍕 W4anD0eR96++ submitted a review on pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#pullrequestreview-74257017

[14:46] <squashable6> 🍕 W4anD0eR96++ wrote a comment on a review for “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#discussion_r148932576

[14:47] *** yqt left
[14:48] <Thrush> Thanks for letting me know about the buggyness of the REPL, geekosaur.

[14:48] <squashable6> 🍕 MasterDuke17++ submitted a review on pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#pullrequestreview-74257048

[14:48] <squashable6> 🍕 MasterDuke17++ wrote a comment on a review for “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652#discussion_r148932608

[14:50] <Geth> ¦ doc/doc-regex-interpolation: 69cdc07531 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[14:50] <Geth> ¦ doc/doc-regex-interpolation: Add type constrains to speed up examples

[14:50] <Geth> ¦ doc/doc-regex-interpolation: 

[14:50] <Geth> ¦ doc/doc-regex-interpolation: MasterDuke17++

[14:50] <Geth> ¦ doc/doc-regex-interpolation: 

[14:50] <Geth> ¦ doc/doc-regex-interpolation: It should be nice if keep using effective code in examples.

[14:50] <Geth> ¦ doc/doc-regex-interpolation: review: https://github.com/perl6/doc/commit/69cdc07531

[14:50] <squashable6> 🍕 W4anD0eR96++ synchronize pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652

[14:51] <AlexDaniel> TomLeg: hello :)

[14:51] <squashable6> 🍕 W4anD0eR96++ edited issue “False-positives on “Perl 6 Types” page”: https://github.com/perl6/doc/issues/1649

[14:52] <AlexDaniel> TomLeg: not sure if we have something specifically for the squashathon this time (there was a rakudo squashathon guide previous month). Maybe take a look at https://github.com/perl6/doc/blob/master/CONTRIBUTING.md ?

[14:52] <TomLeg> hiya AlexDaniel

[14:52] <TomLeg> thanks

[14:52] <AlexDaniel> TomLeg: but basically you can just choose any issue you like and work on it: https://github.com/perl6/doc/issues

[14:52] *** Thrush left
[14:53] <AlexDaniel> TomLeg: do you have a commit bit?

[14:53] <TomLeg> no

[14:53] <AlexDaniel> TomLeg: what's your github account?

[14:53] <TomLeg> legrady

[14:54] <AlexDaniel> TomLeg: https://github.com/perl6/doc/invitations

[14:55] <TomLeg> thanks got it

[14:55] <AlexDaniel> TomLeg: this way you should be able to change things and close issues :)

[14:56] <TomLeg> And off to work .... 

[14:56] <AlexDaniel> wander: mess? You mean the fact that it says method method method method method? :)

[14:56] <wander> yes, is it normal?

[14:57] *** darkmorph joined
[14:57] *** Exodist left
[14:58] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Useless  "Documentation for " in some page titles.”: https://github.com/perl6/doc/issues/1623#issuecomment-341903138

[14:58] <squashable6> 🍕 AlexDaniel++ closed issue “Useless  "Documentation for " in some page titles.”: https://github.com/perl6/doc/issues/1623

[14:58] <AlexDaniel> wander: well, “normal”, I'm pretty sure there was an issue for it

[14:58] *** Exodist joined
[15:01] <Geth> ¦ doc: 8f105bbd42 | (Alex Chen)++ (committed using GitHub Web editor) | doc/Language/enumeration.pod6

[15:01] <Geth> ¦ doc: Try to fix #1649

[15:01] <Geth> ¦ doc: 

[15:01] <Geth> ¦ doc: not sure if this cause the issue, but I think it is.

[15:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/8f105bbd42

[15:01] <synopsebot> Link: https://doc.perl6.org/language/enumeration

[15:01] <squashable6> 🍕 W4anD0eR96++ closed issue “False-positives on “Perl 6 Types” page”: https://github.com/perl6/doc/issues/1649

[15:03] *** domidumont joined
[15:08] <AlexDaniel> wander: can't find the ticket for method, method, method, method problem

[15:10] <AlexDaniel> wander: oh, it feels like it was parti

[15:10] <AlexDaniel> partially fixed

[15:13] <wander> :o

[15:14] <geekosaur> so it's only 3 of them now? >.>

[15:15] *** mson joined
[15:15] <AlexDaniel> 3? :)

[15:16] <AlexDaniel> ACCEPTS lists 20 :)

[15:16] <wander> How to trigger `Debug { note colored("Para node2html called for ", "bold") ~ $node.gist };`

[15:17] <wander> something like --DDebug 

[15:17] <wander> ?

[15:17] *** pecastro left
[15:18] <AlexDaniel> wander: sorry, where's that?

[15:20] <ZzZombo> is there a way to make a positional argument of a sub to be an alias to a named one? Like `$a` is the same as `:$param`.

[15:20] <wander> I've found some code written as above, seems `Debug` is a Phasers, but I don't know how to trigger it

[15:21] <geekosaur> not so far as I know. but a sub taking a block/closure (which is what that looks like) would be possible, and how you trigger it would be up to the sub

[15:21] <geekosaur> phasers are all-uppercase

[15:22] *** eugene_barsky joined
[15:23] *** eugene_barsky left
[15:24] *** domidumont left
[15:31] <geekosaur> m: my $*Debug = True; sub Debug(Block $b) { if $*Debug { $b(); } }; Debug { note 'hi' }

[15:31] <camelia> rakudo-moar 33d476d1b: OUTPUT: «hi␤»

[15:37] <wander> yes, I see `sub Debug(Callable $)  { }`

[15:37] <wander> XD

[15:37] <geekosaur> looks like they disabled it then

[15:39] <wander> yes, below it there is an enable version

[15:44] *** evalable6 left
[15:44] *** evalable6 joined
[15:44] *** ChanServ sets mode: +v evalable6

[15:46] <squashable6> 🍕 zoffixznet++ wrote a comment on “`eof` doc; reword to avo…”: https://github.com/perl6/doc/issues/1650#issuecomment-341907077

[15:46] <squashable6> 🍕 zoffixznet++ closed issue “`eof` doc; reword to avo…”: https://github.com/perl6/doc/issues/1650

[15:47] *** nadim_ left
[15:55] *** khw joined
[16:00] <Geth> ¦ Pod-To-HTML/W4anD0eR96-patch-1: 8757bec166 | (Alex Chen)++ (committed using GitHub Web editor) | lib/Pod/To/HTML.pm

[16:00] <Geth> ¦ Pod-To-HTML/W4anD0eR96-patch-1: make `=begin Html` emit raw HTML

[16:00] <Geth> ¦ Pod-To-HTML/W4anD0eR96-patch-1: 

[16:00] <Geth> ¦ Pod-To-HTML/W4anD0eR96-patch-1: Fix #23

[16:00] <Geth> ¦ Pod-To-HTML/W4anD0eR96-patch-1: 

[16:00] <Geth> ¦ Pod-To-HTML/W4anD0eR96-patch-1: @coke

[16:00] <Geth> ¦ Pod-To-HTML/W4anD0eR96-patch-1: review: https://github.com/perl6/Pod-To-HTML/commit/8757bec166

[16:00] *** zakame left
[16:01] <Geth> ¦ Pod-To-HTML: W4anD0eR96++ created pull request #26: make `=begin Html` emit raw HTML

[16:01] <Geth> ¦ Pod-To-HTML: review: https://github.com/perl6/Pod-To-HTML/pull/26

[16:02] *** pecastro joined
[16:08] *** zakame joined
[16:12] <Geth> ¦ Pod-To-HTML/W4anD0eR96-patch-1: 4347092242 | (Alex Chen)++ (committed using GitHub Web editor) | lib/Pod/To/HTML.pm

[16:12] <Geth> ¦ Pod-To-HTML/W4anD0eR96-patch-1: Update HTML.pm

[16:12] <Geth> ¦ Pod-To-HTML/W4anD0eR96-patch-1: review: https://github.com/perl6/Pod-To-HTML/commit/4347092242

[16:14] <Geth> ¦ doc/master: 8 commits pushed by (Alex Chen)++

[16:14] <Geth> ¦ doc/master: 9893517423 | Document Regex Interpolation

[16:14] <Geth> ¦ doc/master: 6ea6243802 | Update regexes.pod6

[16:14] <Geth> ¦ doc/master: b58e2dc9b4 | Update regexes.pod6

[16:14] <Geth> ¦ doc/master: c117e00e70 | Update regexes.pod6

[16:14] <Geth> ¦ doc/master: 082d518c64 | Update regexes.pod6

[16:14] <Geth> ¦ doc/master: 94bdf62273 | Update regexes.pod6

[16:14] <squashable6> 🍕 W4anD0eR96++ merged pull request “Document Regex Interpolation, jnthn++”: https://github.com/perl6/doc/pull/1652

[16:14] <Geth> ¦ doc/master: 69cdc07531 | Add type constrains to speed up examples

[16:14] <Geth> ¦ doc/master: 390459d09f | Merge pull request #1652 from perl6/doc-regex-interpolation

[16:14] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/8f105bbd42...390459d09f

[16:15] <AlexDaniel> wander++ :)

[16:15] <AlexDaniel> great work

[16:15] <wander> \o

[16:15] *** wamba left
[16:21] *** zakharyas joined
[16:21] *** mcmillhj joined
[16:22] *** domidumont joined
[16:23] *** yqt joined
[16:24] *** Piotr joined
[16:24] <SmokeMachine> is there a way to cancel a Promise.start ?

[16:25] *** ZzZombo left
[16:25] *** ZzZombo_ joined
[16:27] <lizmat> SmokeMachine: no

[16:28] <SmokeMachine> lizmat: shouldn't?

[16:28] <lizmat> well, personally I think we should have a way

[16:28] <lizmat> but at the moment, there isn't such a way just yet

[16:29] <lizmat> your only option is to check some variable regularly inside the started code, and die if that changes to a state that indicates you want it stopped

[16:30] *** mcmillhj left
[16:30] <SmokeMachine> lizmat: I was thinking... the way that is sad to make a timeout, is to use Promise.anyof($promise-that-should-timeout, Promise.in($timeout))... but it doesn't really times out... the promise continue running...

[16:31] <AlexDaniel> right

[16:31] <SmokeMachine> kotlin's coroutines have a isActive function to do that... (check some variable regularly)

[16:32] <AlexDaniel> m: react { whenever Promise.in(3) { say ‘hello’ }; whenever Promise.in(1) { say ‘timeout’; done } }

[16:32] <camelia> rakudo-moar a8c789eca: OUTPUT: «timeout␤»

[16:32] <AlexDaniel> I don't know if it keeps running in this case

[16:33] <lizmat> m: react { whenever Promise.in(3) { say ‘hello’ }; whenever Promise.in(1) { say ‘timeout’; done } }; sleep 3

[16:33] <SmokeMachine> m: react { whenever Promise.in(3) { say ‘hello’ }; whenever Promise.in(1) { say ‘timeout’; done } }; sleep 3

[16:33] <camelia> rakudo-moar a8c789eca: OUTPUT: «timeout␤»

[16:33] <lizmat> that I didn't expect

[16:33] <SmokeMachine> me neither...

[16:38] <squashable6> 🍕 zoffixznet++ wrote a comment on “`eof` doc; reword to avo…”: https://github.com/perl6/doc/issues/1650#issuecomment-341910939

[16:38] <squashable6> 🍕 zoffixznet++ reopened issue “`eof` doc; reword to avo…”: https://github.com/perl6/doc/issues/1650

[16:39] *** Cabanossi left
[16:40] *** darkmorph left
[16:41] *** Cabanossi joined
[16:41] <lizmat> m: react { whenever Promise.in(3) { say ‘hello’ }; whenever Promise.in(1) { say ‘timeout’ } }  # without the "done", they do show up both

[16:41] <camelia> rakudo-moar a8c789eca: OUTPUT: «timeout␤hello␤»

[16:41] <lizmat> weird

[16:44] <AlexDaniel> that's exactly how react block works

[16:46] <lizmat> well, I meant: weird that the in(3) doesn't fire anyways

[16:46] <lizmat> or not ?

[16:51] <Geth> ¦ doc: c3a93a55df | (Aleks-Daniel Jakimenko-Aleksejev)++ | htmlify.p6

[16:51] <Geth> ¦ doc: method, method, method, method, method

[16:51] <Geth> ¦ doc: 

[16:51] <Geth> ¦ doc: This commit resolves the problem when “method” is repeated 20 times

[16:51] <Geth> ¦ doc: needlessly. It was assumed that .unique is going to do the trick, but

[16:51] <Geth> ¦ doc: in reality it's an array of 1-element arrays, so we have to slip it.

[16:51] <Geth> ¦ doc: 

[16:51] <Geth> ¦ doc: There was a ticket for that issue but I can't find it.

[16:51] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/c3a93a55df

[16:51] <AlexDaniel> wander: there ↑

[16:51] <AlexDaniel> lizmat: ｢done｣ is like ｢last｣ but for react blocks :)

[16:52] <lizmat> but then why isn't the code following the react executed ?

[16:52] <AlexDaniel> m: react { whenever Promise.in(3) { say ‘hello’ }; whenever Promise.in(1) { say ‘timeout’; done } }; say ‘you sure?’

[16:52] <camelia> rakudo-moar 629e8684e: OUTPUT: «timeout␤you sure?␤»

[16:52] <lizmat> scuse me, sorry

[16:52] <lizmat> it is

[16:54] <lizmat> ok, I see where my misconception is now

[16:54] *** ChoHag left
[16:54] <lizmat> the Promise.in(3) internally most likely *does* fire, but the code block is not executed because it's no longer inside the react block

[16:55] <lizmat> somehow I read the block as being part of the Promise,  but it isn't

[16:59] *** comborico1611 joined
[17:00] <comborico1611> What is the special variable $x called?

[17:00] <moritz> comborico1611: $x isn't a special variable

[17:00] <squashable6> 🍕 zoffixznet++ edited issue “`eof` docs need to expla…”: https://github.com/perl6/doc/issues/1650

[17:01] <Geth> ¦ doc: be80f8d80a | MasterDuke17++ (committed using GitHub Web editor) | doc/Language/regexes.pod6

[17:01] <Geth> ¦ doc: Note performance benefit of using a statically...

[17:01] <Geth> ¦ doc: 

[17:01] <Geth> ¦ doc: typed Str|str for regex literal interpolation.

[17:01] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/be80f8d80a

[17:01] <synopsebot> Link: https://doc.perl6.org/language/regexes

[17:01] <Geth> ¦ Pod-To-HTML: 8757bec166 | (Alex Chen)++ (committed using GitHub Web editor) | lib/Pod/To/HTML.pm

[17:01] <Geth> ¦ Pod-To-HTML: make `=begin Html` emit raw HTML

[17:01] <Geth> ¦ Pod-To-HTML: 

[17:01] <Geth> ¦ Pod-To-HTML: Fix #23

[17:01] <Geth> ¦ Pod-To-HTML: 

[17:01] <Geth> ¦ Pod-To-HTML: @coke

[17:01] <Geth> ¦ Pod-To-HTML: review: https://github.com/perl6/Pod-To-HTML/commit/8757bec166

[17:01] <Geth> ¦ Pod-To-HTML: 4347092242 | (Alex Chen)++ (committed using GitHub Web editor) | lib/Pod/To/HTML.pm

[17:01] <Geth> ¦ Pod-To-HTML: Update HTML.pm

[17:01] <Geth> ¦ Pod-To-HTML: review: https://github.com/perl6/Pod-To-HTML/commit/4347092242

[17:01] <Geth> ¦ Pod-To-HTML: b15389b3a9 | (Zoffix Znet)++ (committed using GitHub Web editor) | lib/Pod/To/HTML.pm

[17:01] <Geth> ¦ Pod-To-HTML: Merge pull request #26 from perl6/W4anD0eR96-patch-1

[17:01] <Geth> ¦ Pod-To-HTML: 

[17:01] <Geth> ¦ Pod-To-HTML: make `=begin Html` emit raw HTML

[17:01] <Geth> ¦ Pod-To-HTML: review: https://github.com/perl6/Pod-To-HTML/commit/b15389b3a9

[17:02] <Geth> ¦ Pod-To-HTML: db0b4144ed | (Zoffix Znet)++ (committed using GitHub Web editor) | META6.json

[17:02] <Geth> ¦ Pod-To-HTML: Bump version

[17:02] <Geth> ¦ Pod-To-HTML: review: https://github.com/perl6/Pod-To-HTML/commit/db0b4144ed

[17:02] <comborico1611> Hey.  Alright then.  Thank you!

[17:02] <wander> AlexDaniel: got it

[17:03] <comborico1611> Heh*

[17:03] <MasterDuke> wander: i wasn't very clear in my comments. i didn't really care about performance of the example, but that there was some explanation that using typed variables was faster

[17:03] <hobbs> comborico1611: you can call it Betty, and it will call you Al.

[17:05] <comborico1611> I always liked that song.

[17:05] <hobbs> and you can call it special if you want :)

[17:06] <moritz> it's special to you if you care about it a lot :-)

[17:07] <comborico1611> I remember talking on here about $0 (captured variable shorthands), and someone said that $x was special or something.

[17:07] <comborico1611> Ja.

[17:07] <wander> MasterDuke: my opinion is, if we use effective examples, then user will feel Perl 6 effective. and yes, using typed variables was faster, but it's a wide topic

[17:08] <geekosaur> at one point I think I said something about $N while indicating thwt N is a number

[17:08] <geekosaur> $0, $1, $2, ...

[17:09] <wander> maybe we can mention it at this section, but for details, efficiency should be a separated section

[17:09] <comborico1611> Anyways, never mind. Now back to the book -- passed the halfway mark!

[17:09] <timotimo> lizmat, AlexDaniel, there is a concept of "cancellation" for async work that we know how to terminate, waiting for a timer to fire is one, a server socket listening for incoming connections is another. react blocks handle cancellation for you

[17:10] <comborico1611> Is $n special?!

[17:10] <AlexDaniel> SmokeMachine: ↑

[17:10] <AlexDaniel> comborico1611: there are no special variables that I know of

[17:10] <AlexDaniel> maybe except $_

[17:10] <AlexDaniel> or even @_ maybe

[17:11] <comborico1611> $/

[17:11] <timotimo> and $! is also special

[17:11] <lizmat> timotimo: but we can't "cancel" a thread in general, can we ?

[17:11] <hobbs> $^things are pretty special

[17:11] <timotimo> we cannot, no

[17:11] <comborico1611> Is there a list of special variables in the docs?

[17:11] <timotimo> in the future there can be a mechanism that threads will regularly check if they are supposed to explode via an exception another thread sent it, but that's to be designed and implemented

[17:11] <timotimo> BBL

[17:12] <geekosaur> sigh

[17:12] <geekosaur> ok, never ever use a schematic around you

[17:12] <geekosaur> $0, $1, $2, $3, $4, $5, how many more do I count out?

[17:12] <ugexe> https://docs.perl6.org/language/variables

[17:12] <AlexDaniel> https://docs.perl6.org/language/variables#Special_Variables

[17:12] <AlexDaniel> :)

[17:13] <comborico1611> Yep, just found it. It doesn't look to be very organized. I don't know.

[17:14] <comborico1611> I see why. it is titled Pearl 5 to Pearl 6 variables.

[17:14] <lizmat> https://docs.perl6.org/language/variables#Positional_Attributes  # more specifically, geekosaur 

[17:14] <AlexDaniel> timotimo: well, $_ you can declare yourself, everything else you kinda can't

[17:16] <timotimo> you can't declare $/ or $! ?

[17:17] *** Piotr left
[17:18] <lizmat> m: my $/ = 42; say $/

[17:18] <camelia> rakudo-moar 629e8684e: OUTPUT: «Potential difficulties:␤    Redeclaration of symbol '$/'␤    at <tmp>:1␤    ------> 3my $/7⏏5 = 42; say $/␤42␤»

[17:18] <lizmat> m: { my $/ = 42; say $/ }

[17:18] <camelia> rakudo-moar 629e8684e: OUTPUT: «42␤»

[17:18] <lizmat> if it's in a scope, it should be warningless

[17:21] <Geth> ¦ doc: 9f8aa4e1b0 | (Zoffix Znet)++ | 2 files

[17:21] <Geth> ¦ doc: Improve .eof docs for non-seekable handles

[17:21] <Geth> ¦ doc: 

[17:21] <Geth> ¦ doc: Resolves #1650

[17:21] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/9f8aa4e1b0

[17:21] <squashable6> 🍕 zoffixznet++ closed issue “`eof` docs need to expla…”: https://github.com/perl6/doc/issues/1650

[17:22] <SmokeMachine> great!

[17:23] *** pmurias left
[17:25] <comborico1611> m: sub factorial (Int $num) { my $product = 1; for 1..$num -> $x { $product *= $x } return $product } say factorial 5;

[17:25] <camelia> rakudo-moar 629e8684e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3 1; for 1..$num -> $x { $product *= $x }7⏏5 return $product } say factorial 5;␤»

[17:26] *** ChoHag joined
[17:26] <AlexDaniel> m: sub factorial (Int $num) { my $product = 1; for 1..$num -> $x { $product *= $x }; return $product }; say factorial 5;

[17:26] <camelia> rakudo-moar 629e8684e: OUTPUT: «120␤»

[17:27] <comborico1611> m: sub factorial (Int $num) { my $product = 1; for 1..$num -> $x { $product *= $x; } return $product; } say factorial 5;

[17:27] <camelia> rakudo-moar 629e8684e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 031; for 1..$num -> $x { $product *= $x; }7⏏5 return $product; } say factorial 5;␤»

[17:27] <comborico1611> Thanks!

[17:30] <comborico1611> I was confused because of the following rule: when a statement is the last code line of a block immediately before the curly brace the final semicolon is optional.

[17:30] *** espadrine left
[17:30] <geekosaur> wrong rule in this case :)

[17:30] <comborico1611> In addition to putting the semicolon in the wrong spot. Haha.

[17:31] *** Piotr joined
[17:31] <comborico1611> It's just a C plus plus difference.

[17:31] <squashable6> 🍕 W4anD0eR96++ wrote a comment on “docs.perl6.org design”: https://github.com/perl6/doc/issues/1090#issuecomment-341915177

[17:31] <comborico1611> In C plus plus, I think the only time you add a semicolon at the end of a brace is for classes.

[17:33] <squashable6> 🍕 zoffixznet++ wrote a comment on “docs.perl6.org design”: https://github.com/perl6/doc/issues/1090#issuecomment-341915302

[17:33] <AlexDaniel> comborico1611: I think it's discussed in more detail on this page: https://docs.perl6.org/language/syntax#Separating_Statements_with_Semicolons

[17:33] <comborico1611> m: sub factorial (Int $num) { my $product = 1; for 1..$num -> $y { $product *= $y }; return $product } say factorial 5;

[17:33] <camelia> rakudo-moar 629e8684e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3$y { $product *= $y }; return $product }7⏏5 say factorial 5;␤    expecting any of:␤        infix␤        infix …»

[17:34] <comborico1611> Thanks!

[17:34] <AlexDaniel> wander: that looks a bit better I guess? https://docs.perl6.org/routine-method.html

[17:34] <wander> yes, i saw it

[17:35] <wander> nice work \o

[17:36] <squashable6> 🍕 W4anD0eR96++ edited issue “False-positives on “Perl 6 Types” page”: https://github.com/perl6/doc/issues/1649

[17:36] <wander> BTW, ^^ is caused because how we generate '/type/*'

[17:37] <comborico1611> m: sub factorial (Int $num) { my $product = 1; for 1..$num -> $y { $product *= $y }; return $product }; say factorial 5;

[17:37] <camelia> rakudo-moar 629e8684e: OUTPUT: «120␤»

[17:37] <wander> it's should be documented that =head ... start with 'Role' or 'enum' is special

[17:37] <wander> s/documented/mentioned in CONTRIBUTING.md or so/

[17:38] <AlexDaniel> squashable6: status

[17:38] <squashable6> AlexDaniel, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈18 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[17:38] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/767f1e81a1b180d42ff9ad445f4f0620

[17:38] <comborico1611> So pointy block eliminates need to declare a variable?

[17:40] <AlexDaniel> comborico1611: you mean like in -> $y { } ? Well, it's not exactly a variable, but a parameter of the pointy block

[17:40] <AlexDaniel> just like in sub foo($y) { }

[17:42] <comborico1611> Ahh, i see. Thank you.  Still trying to wrap my head around what pointy block is.

[17:42] <comborico1611> It's a function, not an operator.

[17:43] <AlexDaniel> you can also write “sub ($y) {}” and it is quite similar

[17:45] <comborico1611> Yes, I'm just going through the example in the book.

[17:46] *** zakharyas left
[17:46] <comborico1611> Does the pointy block have any other parameters in my example?

[17:47] <squashable6> 🍕 AlexDaniel++ opened issue “｢anon｣ is only documente…”: https://github.com/perl6/doc/issues/1655

[17:47] <squashable6> 🍕 AlexDaniel++ labeled issue “｢anon｣ is only documente…”: https://github.com/perl6/doc/issues/1655

[17:48] <AlexDaniel> comborico1611: no?

[17:49] <comborico1611> Heh.

[17:49] <comborico1611> Thanks.

[17:50] *** ChoHag left
[17:53] <squashable6> 🍕 W4anD0eR96++ opened issue “Accidentally generate '/type/*'”: https://github.com/perl6/doc/issues/1656

[17:54] <squashable6> 🍕 W4anD0eR96++ edited issue “Accidentally generate '/type/*'”: https://github.com/perl6/doc/issues/1656

[17:54] *** Cabanossi left
[17:56] *** Cabanossi joined
[18:03] <wander> m: say anon class foo {}

[18:03] <camelia> rakudo-moar 629e8684e: OUTPUT: «(foo)␤»

[18:04] <wander> say anon role foo {}

[18:04] <evalable6> wander, rakudo-moar 629e8684e: OUTPUT: «(foo)»

[18:06] <squashable6> 🍕 W4anD0eR96++ wrote a comment on “｢anon｣ is only documente…”: https://github.com/perl6/doc/issues/1655#issuecomment-341917772

[18:06] *** ChoHag joined
[18:11] <squashable6> 🍕 W4anD0eR96++ wrote a comment on “｢anon｣ is only documente…”: https://github.com/perl6/doc/issues/1655#issuecomment-341918135

[18:15] *** chakli joined
[18:17] <chakli> hey is this the right behavior of m:g ??

[18:17] <chakli> m: "720\n500\n740\n200\n730\n"~~m:g/(7.0)/; say $0 

[18:17] <camelia> rakudo-moar 629e8684e: OUTPUT: «｢720｣␤ 0 => ｢720｣␤»

[18:18] <chakli> m: "720\n500\n720\n200\n720\n"~~m:g/(720)/; say $0 

[18:18] <camelia> rakudo-moar 629e8684e: OUTPUT: «｢720｣␤ 0 => ｢720｣␤»

[18:25] <wander> m: say "720\n500\n740\n200\n730\n"~~m:g/(7.0)/;

[18:25] <camelia> rakudo-moar 629e8684e: OUTPUT: «(｢720｣␤ 0 => ｢720｣ ｢740｣␤ 0 => ｢740｣ ｢730｣␤ 0 => ｢730｣)␤»

[18:25] <wander> be aware of what $/ exactlly be

[18:28] <wander> m: .say for "720\n500\n740\n200\n730\n"~~m:g/(7.0)/

[18:28] <camelia> rakudo-moar 629e8684e: OUTPUT: «｢720｣␤ 0 => ｢720｣␤｢740｣␤ 0 => ｢740｣␤｢730｣␤ 0 => ｢730｣␤»

[18:34] *** darutoko left
[18:34] <chakli> how do i remove the ｢ wen printing?

[18:35] <gfldex> m: .put for "720\n500\n740\n200\n730\n"~~m:g/(7.0)/

[18:35] <camelia> rakudo-moar 629e8684e: OUTPUT: «720␤740␤730␤»

[18:35] <geekosaur> use something other than .say/.gist

[18:35] *** konsolebox left
[18:36] <wander> .Str.say for "720\n500\n740\n200\n730\n"~~m:g/(7.0)/

[18:36] <wander> m: .Str.say for "720\n500\n740\n200\n730\n"~~m:g/(7.0)/

[18:37] <camelia> rakudo-moar 629e8684e: OUTPUT: «720␤740␤730␤»

[18:37] <chakli> thanks :)

[18:38] *** napo1eon left
[18:39] <Geth> ¦ doc: gfldex++ created pull request #1657: link to /routine/gist

[18:39] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/1657

[18:40] <squashable6> 🍕 gfldex++ opened pull request “link to /routine/gist”: https://github.com/perl6/doc/pull/1657

[18:40] <squashable6> 🍕🍕🍕  First contribution by gfldex++! ♥

[18:40] *** konsolebox joined
[18:46] <comborico1611> Maybe I'm a complete newb here, but I think calling the pointy block operator/function thing instead, the dynamic assignment operator is better.

[18:47] <moritz> it's binding, not assignment

[18:48] <comborico1611> What is the difference?

[18:48] <kalkin-> If i have some C function i.e: foo(int width, int height, double array[width][height]), I assume a wrapper in perl6 for that would be „ sub foo(int32, int32, CArray[CArray[double]])”, right? But how do i a CArray[CArray[double]] in perl6 before passing it to the wrapper function?

[18:49] <kalkin-> From the documentation I see that just an array can be allocated with CArray[double].new, but how to do it for a 2D array?

[18:49] <moritz> comborico1611: see https://docs.perl6.org/language/containers

[18:49] <comborico1611> Thank you.

[18:50] <Geth> ¦ doc: 67ea14b849 | (Wenzel P. P. Peppmeyer)++ (committed using GitHub Web editor) | doc/Type/Mu.pod6

[18:50] <Geth> ¦ doc: Update Mu.pod6

[18:50] <Geth> ¦ doc: 

[18:50] <Geth> ¦ doc: link to /routine/gist

[18:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/67ea14b849

[18:50] <synopsebot> Link: https://doc.perl6.org/type/Mu

[18:50] <Geth> ¦ doc: cb967cf412 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | doc/Type/Mu.pod6

[18:50] <Geth> ¦ doc: Merge pull request #1657 from gfldex/patch-2

[18:50] <squashable6> 🍕 AlexDaniel++ merged pull request “link to /routine/gist”: https://github.com/perl6/doc/pull/1657

[18:50] <Geth> ¦ doc: 

[18:50] <Geth> ¦ doc: link to /routine/gist

[18:50] <moritz> kalkin-: if nobody has a better idea, create a CArray, and then have a loop where you allocate the inner arrays and assign them to elements of the outer

[18:50] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/cb967cf412

[18:50] <kalkin-> moritz: thanks that was my backup plan which I'm trying to implement currently

[18:55] <comborico1611> According to the index of my book, binding and lexpad are not covered in this book.  Are these advanced topics?

[18:55] *** azawawi joined
[18:56] <comborico1611> Rather than saying Advanced topics, I should say are these non beginner topics?

[18:56] <azawawi> .

[18:56] <yoleaux> 12:49Z <MasterDuke> azawawi: hm, map was a little faster for my made up test case. however, i realized you're really just taking a slice. it doesn't appear to be faster, but `$packed = $buffer[^$size]` is at least simpler

[18:56] <azawawi> MasterDuke: ping

[18:57] <azawawi> MasterDuke: it is simpler and way faster https://gist.github.com/azawawi/51780f76b81c402a42ddfc585fd17c35  MasterDuke++

[19:02] <comborico1611> (Testing to see if irc supports smileys) 😁

[19:03] <MasterDuke> oh, nice

[19:03] *** knight__ joined
[19:04] <knight__> Hello, can I do something like this if perl6_ver == 2017.10 { use IO::String } ?

[19:05] <azawawi> MasterDuke: i forgot about slices btw... must be the C / NativeCall stuff :)

[19:07] <MasterDuke> heh, took me a while to think of them too

[19:08] *** Cabanossi left
[19:09] <comborico1611> (testing for error message)

[19:10] <comborico1611> for <red orange yellow> <-> $color {$color = tc};

[19:11] <AlexDaniel> did you forget m: ? :)

[19:11] <geekosaur> knight__, "use" is lexically scoped so no, that won't work as such. 

[19:11] *** Cabanossi joined
[19:11] <comborico1611> m: for <red orange yellow> <-> $color { $color = tc $color };

[19:11] <camelia> rakudo-moar 2f12bea11: OUTPUT: «Parameter '$color' expected a writable container, but got Str value␤  in block <unit> at <tmp> line 1␤␤»

[19:12] <comborico1611> Heh, yeah.

[19:12] <AlexDaniel> m: for <red orange yellow>.Array <-> $color { $color = tc $color };

[19:12] <camelia> rakudo-moar 2f12bea11: ( no output )

[19:12] <geekosaur> and I think you wanted $color .= tc ? (first version)

[19:13] <comborico1611> Yeah. That is a tricky for message: "got a Str value".

[19:13] <comborico1611> I'm unfamiliar with .=

[19:14] <comborico1611> I was just seeing if the error message was the same in the book.

[19:14] <geekosaur> just as $a += b is $a = $a + $b, $a .= foo is $a = $a.foo

[19:14] <lizmat> m: my $a = "foo"; $a .= tc; say $a

[19:14] <camelia> rakudo-moar 2f12bea11: OUTPUT: «Foo␤»

[19:15] <geekosaur> but you wrote '$color = tc' the first time around (when you forgot the m:)

[19:17] <comborico1611> Interesting. ( .=)

[19:22] *** espadrine joined
[19:24] <comborico1611> (I'm trying to read this in English: for @colors <-> $color { }; ) "for every element in the array colors, for each traversal, dynamically bind each element to the variable $color, and perform the action in the brace." Is this correct?

[19:26] <comborico1611> Correction: and perform the action in the brace to said variable per traversal

[19:30] <kalkin-> k, I couldn't figure out how to create a CArray[CArray[num64]], but I remembered that in c an array[width][height] is the same as array[width×height], so I just created a CArray[num64] with the length width×height and passed it to the function

[19:30] <kalkin-> it seems to work

[19:33] <geekosaur> yes, actually, thats's a good point, the other would be double *array[width] and then malloc each element, much like you would have been doing in perl 6

[19:36] <knight__> geekosaur: Thank you.

[19:36] <geekosaur> I was trying to remember how you hack around that but I am short on sleep due to coughing fits again so someone else is going to have to do the thinking :/

[19:42] *** evalable6 left
[19:42] *** evalable6 joined
[19:46] * lizmat throws a bone to the Squashathon crowd

[19:46] <azawawi> :)

[19:46] <Geth> ¦ doc: be13fe0cfd | (Elizabeth Mattijsen)++ | 3 files

[19:46] <Geth> ¦ doc: Preliminary pod on Telemetry/Telemetry::Period and snapper

[19:46] <Geth> ¦ doc: 

[19:46] <Geth> ¦ doc: It's been a while since I wrote pod, and I'm pretty sure I got the L<>

[19:46] <Geth> ¦ doc: and C<>'s mixed up, as well as forgetting a lot of stuff.  Pull requests

[19:46] <Geth> ¦ doc: welcome!  Also when my ramblings have been unclear!

[19:46] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/be13fe0cfd

[19:46] <squashable6> 🍕🍕🍕  First contribution by lizmat++! ♥

[19:48] *** comborico1611 left
[19:48] *** domidumont left
[19:48] <azawawi> lizmat: does this mean tickets like https://github.com/perlpilot/benchmark/issues/6 could be fixed?  :)

[19:49] *** comborico1611 joined
[19:50] <lizmat> m: use Telemetry :COLUMNS; say "used {cpu} microseconds CPU so far"

[19:50] <camelia> rakudo-moar 4ed91ed64: OUTPUT: «used 317774 microseconds CPU so far␤»

[19:50] <lizmat> m: use Telemetry; snap; Nil for ^1000

[19:50] <camelia> rakudo-moar 4ed91ed64: OUTPUT: «Telemetry Report of Process #14627 (2017-11-04T19:50:48Z)␤No supervisor thread has been running␤Number of Snapshots: 2␤Initial Size:        87264 Kbytes␤Total Time:           0.00 seconds␤Total CPU Usage:      0.00 seconds␤␤wallclock  ut…»

[19:51] <lizmat> m: use Telemetry; snap; Nil for ^1000000

[19:51] <camelia> rakudo-moar 4ed91ed64: OUTPUT: «Telemetry Report of Process #14745 (2017-11-04T19:51:24Z)␤No supervisor thread has been running␤Number of Snapshots: 2␤Initial Size:        92240 Kbytes␤Total Time:           0.06 seconds␤Total CPU Usage:      0.06 seconds␤␤wallclock  ut…»

[19:52] <azawawi> lizmat++

[19:52] <El_Che> lizmat: telemetry? You finally moved to windows 10?

[19:53] <lizmat> I was more going for the dictionary definition: "the process of recording and transmitting the readings of an instrument"

[19:53] <El_Che> :)

[19:54] <Geth> ¦ doc: ac9f27c9ff | (Steve Mynott)++ | doc/Type/Telemetry.pod6

[19:54] <Geth> ¦ doc: minor typo fix

[19:54] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/ac9f27c9ff

[19:54] <synopsebot> Link: https://doc.perl6.org/type/Telemetry

[19:54] <squashable6> 🍕🍕🍕  First contribution by stmuk++! ♥

[19:55] <comborico1611> Are for " @array " and " for 0..@array.end " equivalent under-the-hood?

[19:55] <comborico1611> Sorry " for @array "

[19:56] <lizmat> comborico1611: no, because @array gives you the elements

[19:56] <geekosaur> one is the actual elements, the other is the indices

[19:56] <lizmat> and 0..@array.end gives you the indiexes

[19:56] <comborico1611> Thank you. Is"end" short for something else?

[19:57] <lizmat> m: my @a = <a b c>; for @a.kv -> $index, $string { say "$index: $string" }  # you can also have both

[19:57] <camelia> rakudo-moar 4ed91ed64: OUTPUT: «0: a␤1: b␤2: c␤»

[19:57] * lizmat steps away from the keyboard for a bit

[19:58] <Geth> ¦ doc: d733b1e40e | (Steve Mynott)++ | doc/Language/regexes.pod6

[19:58] <Geth> ¦ doc: minor typo fix

[19:58] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/d733b1e40e

[19:58] <synopsebot> Link: https://doc.perl6.org/language/regexes

[19:58] *** cdg joined
[20:01] <moritz> comborico1611: .end is just the index of the last element

[20:02] <geekosaur> https://docs.perl6.org/type/Array#(List)_routine_end

[20:02] <comborico1611> Roger that.

[20:03] <comborico1611> Is there a programming language that is more operator rich and Perl 6?

[20:03] <comborico1611> THAN Perl6

[20:04] <moritz> APL

[20:06] * geekosaur considered responding "APL/J/K", but does that actually mean operators or methods?

[20:07] *** TEttinger joined
[20:08] <moritz> well, I'm sure the Java standard library has more methods than Perl 6 :-)

[20:10] *** HoboWithAShotgun joined
[20:10] <HoboWithAShotgun> in #math

[20:14] *** travis-ci joined
[20:14] <travis-ci> Doc build failed. Elizabeth Mattijsen 'Preliminary pod on Telemetry/Telemetry::Period and snapper

[20:14] <travis-ci> https://travis-ci.org/perl6/doc/builds/297317953 https://github.com/perl6/doc/compare/cb967cf412f9...be13fe0cfdb6

[20:14] *** travis-ci left
[20:14] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[20:21] *** travis-ci joined
[20:21] <travis-ci> Doc build failed. Steve Mynott 'minor typo fix'

[20:21] <travis-ci> https://travis-ci.org/perl6/doc/builds/297320304 https://github.com/perl6/doc/compare/be13fe0cfdb6...ac9f27c9ff3d

[20:21] *** travis-ci left
[20:21] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[20:23] *** telex left
[20:23] <comborico1611> m: my @colors = <red orange yellow green blue indigo violet>; for @colors.kv -> $index, $color { say "$index $colors; };

[20:23] <camelia> rakudo-moar 4ed91ed64: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$colors' is not declared. Did you mean any of these?␤    @colors␤    $color␤␤at <tmp>:1␤------> 3lors.kv -> $index, $color { say "$index 7⏏5$colors; };␤»

[20:24] *** telex joined
[20:24] <comborico1611> m: my $colors; my @colors = <red orange yellow green blue indigo violet>; for @colors.kv -> $index, $color { say "$index $colors };

[20:24] <camelia> rakudo-moar 4ed91ed64: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in double quotes; couldn't find final '"' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3 $index, $color { say "$index $colors };7⏏5<EOL>␤    expecting …»

[20:25] <comborico1611> m: my $colors; my @colors = <red orange yellow green blue indigo violet>; for @colors.kv -> $index, $color { say "$index $colors" };

[20:25] <camelia> rakudo-moar 4ed91ed64: OUTPUT: «Use of uninitialized value $colors of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤0 ␤1 ␤2 ␤3 ␤4 ␤5 ␤6 ␤  in block  at <tmp> line 1␤Use of uninitialized valu…»

[20:26] <geekosaur> you have a typo

[20:26] <geekosaur> you wanted $color instead of $colors in the say

[20:26] <geekosaur> which is what the error was telling you

[20:26] <comborico1611> Thanks

[20:26] <comborico1611> lol

[20:27] <comborico1611> Why are people doing lol with slashes now?

[20:27] <comborico1611> m: my $colors; my @colors = <red orange yellow green blue indigo violet>; for @colors.kv -> $index, $colors { say "$index $colors" };

[20:27] <camelia> rakudo-moar 4ed91ed64: OUTPUT: «0 red␤1 orange␤2 yellow␤3 green␤4 blue␤5 indigo␤6 violet␤»

[20:27] <comborico1611> m: my $colors; my @colors = <red orange yellow green blue indigo violet>; for @colors.kv -> $0, $color { say "$index $colors" };

[20:27] <camelia> rakudo-moar 4ed91ed64: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot declare a numeric parameter␤at <tmp>:1␤------> 3lue indigo violet>; for @colors.kv -> $07⏏5, $color { say "$index $colors" };␤»

[20:28] <comborico1611> m: my $colors; my @colors = <red orange yellow green blue indigo violet>; for @colors.kv -> 0, $color { say "$index $colors" };

[20:28] <camelia> rakudo-moar 4ed91ed64: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$index' is not declared. Did you mean any of these?␤    &index␤    &rindex␤␤at <tmp>:1␤------> 3et>; for @colors.kv -> 0, $color { say "7⏏5$index $colors" };␤»

[20:28] *** f0x joined
[20:32] <azawawi> how does one fix the issue of forward struct declarations in Perl 6... for example the following

[20:32] <azawawi> m: use NativeCall; class Bees is repr('CStruct') { has CArray[Bee] $.ptr; } class Bee is repr('CStruct')  { has Bees $.obj; }

[20:32] <camelia> rakudo-moar 4ed91ed64: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Bee used at line 1␤␤»

[20:33] <azawawi> m: use NativeCall; class Bees is repr('CStruct') { has CArray $.ptr; } class Bee is repr('CStruct')  { has Bees $.obj; }

[20:33] <camelia> rakudo-moar 4ed91ed64: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3is repr('CStruct') { has CArray $.ptr; }7⏏5 class Bee is repr('CStruct')  { has Bee␤    expecting any of:␤       …»

[20:33] <azawawi> m: use NativeCall; class Bees is repr('CStruct') { has CArray $.ptr; };  class Bee is repr('CStruct')  { has Bees $.obj; }

[20:33] <camelia> rakudo-moar 4ed91ed64: ( no output )

[20:33] *** comborico1611 left
[20:34] <azawawi> m: use NativeCall; class Bees is repr('CStruct') { has CArray[Bee] $.ptr; }; class Bee is repr('CStruct')  { has Bees $.obj; }

[20:34] <camelia> rakudo-moar 4ed91ed64: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    Bee used at line 1␤␤»

[20:38] <azawawi> any forward declarations for classes in Perl 6?

[20:38] *** Cabanossi left
[20:40] <geekosaur> class Bee {...};

[20:40] <geekosaur> the ... is literal

[20:41] *** Cabanossi joined
[20:41] <geekosaur> https://docs.perl6.org/language/typesystem#index-entry-Forward_declarations

[20:42] *** travis-ci joined
[20:42] <travis-ci> Doc build failed. Steve Mynott 'minor typo fix'

[20:42] <travis-ci> https://travis-ci.org/perl6/doc/builds/297321404 https://github.com/perl6/doc/compare/ac9f27c9ff3d...d733b1e40e5e

[20:42] *** travis-ci left
[20:42] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[20:44] <azawawi> m: use v6; use NativeCall; class Bee { ... }; class Bees is repr('CStruct') { has CArray[Bee] $.ptr; }; class Bee is repr('CStruct')  { has Bees $.obj; }

[20:44] <camelia> rakudo-moar 4ed91ed64: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤An exception occurred while parameterizing CArray␤at <tmp>:1␤Exception details:␤  Cannot resolve caller infix:<===>(Bee, Str); none of these signatures match:␤      ($?)␤      (\a, \b)␤     …»

[20:47] <geekosaur> hm. I wonder if the forward decl needs a repr for that to work. or if that's even legal

[20:47] <geekosaur> legal but doesn't help. hm

[20:50] *** comborico1611 joined
[20:53] <azawawi> geekosaur: going to use a fake object (same size) for now :)

[20:54] * azawawi is working on MsgPack::unpack(Blob) -> Perl 6 code

[20:55] <geekosaur> yeh, I think that's what you'll need to do, looking at the --ll-exception

[20:55] <lizmat> hmmm... looks like class Kernel is still without *any* documentation ?

[20:55] <geekosaur> CArray needs to know too much about the type

[20:58] <AlexDaniel> lizmat: https://github.com/perl6/doc/issues/1569 and https://github.com/perl6/doc/issues/503

[20:59] *** chakli left
[21:00] <squashable6> 🍕 AlexDaniel++ wrote a comment on “doc /type/Kernel”: https://github.com/perl6/doc/issues/1569#issuecomment-341929439

[21:10] *** eliasr left
[21:18] *** rindolf left
[21:19] *** pentashift left
[21:21] <AlexDaniel> squashable6: status

[21:21] <squashable6> AlexDaniel, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈14 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[21:21] <squashable6> AlexDaniel, Log and stats: https://gist.github.com/0d00eb65ff723113a9c4ffde66eb8040

[21:23] *** knight__ left
[21:24] *** Morfent left
[21:32] *** nadim_ joined
[21:33] <Geth> ¦ doc: 83bfdd4e79 | (Elizabeth Mattijsen)++ | doc/Type/Telemetry.pod6

[21:33] <Geth> ¦ doc: Add some text about subroutines exported

[21:33] <Geth> ¦ doc: 

[21:33] <Geth> ¦ doc: And how to import them selectively.

[21:33] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/83bfdd4e79

[21:33] <synopsebot> Link: https://doc.perl6.org/type/Telemetry

[21:39] *** Cabanossi left
[21:41] *** Cabanossi joined
[21:42] *** ivans left
[21:42] *** ivans joined
[21:47] *** ivans left
[21:47] *** ivans joined
[21:48] *** dominix joined
[21:51] *** TomLeg left
[21:52] *** nadim_ left
[21:57] *** dominix left
[22:01] *** okl joined
[22:02] *** travis-ci joined
[22:02] <travis-ci> Doc build failed. Elizabeth Mattijsen 'Add some text about subroutines exported

[22:02] <travis-ci> https://travis-ci.org/perl6/doc/builds/297347728 https://github.com/perl6/doc/compare/d733b1e40e5e...83bfdd4e794d

[22:02] *** travis-ci left
[22:02] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[22:03] *** HelpWithPerl joined
[22:03] <HelpWithPerl> Hey guys

[22:04] <HelpWithPerl> How do I check if a variable is within an array?

[22:05] <Geth> ¦ perl6.org: 6103378a39 | (Zoffix Znet)++ (committed using GitHub Web editor) | source/.htaccess

[22:05] <Geth> ¦ perl6.org: Add short URL for IRC web chat

[22:05] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/6103378a39

[22:05] <Geth> ¦ doc: e8ee9762dd | (Zoffix Znet)++ (committed using GitHub Web editor) | html/.htaccess

[22:05] <Geth> ¦ doc: Use correct redirect code for IRC web chat

[22:05] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/e8ee9762dd

[22:05] <comborico1611> Newb here also.  

[22:05] *** colomon left
[22:06] *** Zoffix joined
[22:06] <Zoffix> HelpWithPerl: that's a bit of a vague question. Do you mean a value is present in an array?

[22:06] *** Sgeo left
[22:07] <geekosaur> you could be looking just for presence, for its index, or to search by a pattern or other criterion

[22:07] <lizmat> or you could be using set operators:

[22:07] <lizmat> m: my @a = ^10; say 42 (elem) @a

[22:07] <camelia> rakudo-moar 360eb2289: OUTPUT: «False␤»

[22:07] <Zoffix> m: say 'foo' ∈ <foo bar ber>; # that's what I usually use 'cause it's pretty, but that cares about allomorphs

[22:07] <camelia> rakudo-moar 360eb2289: OUTPUT: «True␤»

[22:07] <lizmat> m: my @a = ^10; say 7 (elem) @a

[22:07] <camelia> rakudo-moar 360eb2289: OUTPUT: «True␤»

[22:07] <Zoffix> So 42 ∈ <42 100 50> won't work

[22:07] <geekosaur> that was what I meant by presence

[22:07] *** colomon joined
[22:08] <Zoffix> m: say so <foo bar ber>.grep: 'foo'; # you could .grep for it, but that doesn't stop after it was found

[22:08] <camelia> rakudo-moar 360eb2289: OUTPUT: «True␤»

[22:08] <geekosaur> m: <foo bar baz quux>.grep(/z/, :k).say # report position(s)

[22:08] <camelia> rakudo-moar 360eb2289: OUTPUT: «(2)␤»

[22:08] *** ivans left
[22:09] *** Cabanossi left
[22:09] <Zoffix> m: say Nil === <foo bar ber>.first: 'foo'; # you could .first it, but that won't work if your value and array contents could be Nils (rarelly would matter)

[22:09] <camelia> rakudo-moar 360eb2289: OUTPUT: «False␤»

[22:09] <comborico1611> What about regex? [    $variable-name ~~ / $variable-name /

[22:10] <comborico1611> Sorry for bracket.

[22:10] <Zoffix> Actually

[22:10] <geekosaur> just drop the 

[22:10] <geekosaur> er

[22:10] <geekosaur> m: <foo bar baz quux>.grep(/z/).say

[22:10] <camelia> rakudo-moar 360eb2289: OUTPUT: «(baz)␤»

[22:10] <Zoffix> m: say Nil === <foo bar ber>.first: 'foo', :k; # this is probably the bestest way

[22:10] <camelia> rakudo-moar 360eb2289: OUTPUT: «False␤»

[22:10] <comborico1611> (i feel like the little child that wants to help.)

[22:10] <Zoffix> m: say Nil === (Nil,).first: Nil, :k; # this is probably the bestest way

[22:10] <camelia> rakudo-moar 360eb2289: OUTPUT: «False␤»

[22:11] <Zoffix> m: say Nil === (42,).first: Nil, :k; # this is probably the bestest way

[22:11] <camelia> rakudo-moar 360eb2289: OUTPUT: «True␤»

[22:11] <Zoffix> \o/

[22:11] <comborico1611> Interesting.

[22:11] *** Cabanossi joined
[22:11] * Zoffix fels like a spammer :D

[22:11] <Zoffix> \o

[22:11] *** Zoffix left
[22:11] <geekosaur> only until sigyn notices, then you really are >.>

[22:12] *** setty1 left
[22:12] <geekosaur> although it looks like the spambot's not in here any more

[22:12] *** okl left
[22:13] <comborico1611> Is moritz's Fundamental book the next logical book to purchase after the beginner book?

[22:14] *** ivans joined
[22:14] <comborico1611> I don't have the hacker drive/talent to learn by experimentation.  I learn best with a book.

[22:15] *** raiph joined
[22:15] *** colomon left
[22:20] <Geth> ¦ doc: df06cbc070 | (Elizabeth Mattijsen)++ | doc/Type/Kernel.pod6

[22:20] <Geth> ¦ doc: Initial version of Kernel documentation.

[22:20] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/df06cbc070

[22:20] <synopsebot> Link: https://doc.perl6.org/type/Kernel

[22:21] <lizmat> ?? no squashable feedback anymore ?  :-(  

[22:21] <squashable6> 🍕 lizmat++ wrote a comment on “doc /type/Kernel”: https://github.com/perl6/doc/issues/1569#issuecomment-341933977

[22:22] <lizmat> ah, only the first commit I guess :-)

[22:24] *** sena_kun left
[22:24] *** Khisanth left
[22:27] <comborico1611> m: my @numbers = 1 2 3;

[22:27] <camelia> rakudo-moar 360eb2289: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my @numbers = 17⏏5 2 3;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement mod…»

[22:27] <azawawi> CStruct (HAS CUnion) + CArray inside the CUnion = recipe for various rakudo segfaults...

[22:27] <comborico1611> m: my @numbers = [1 2 3];

[22:28] <camelia> rakudo-moar 360eb2289: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my @numbers = [17⏏5 2 3];␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        …»

[22:28] *** tomaw_ joined
[22:28] <geekosaur> comborico1611, plain or in brackets you need commas

[22:28] <comborico1611> m: my @numbers = {1 2 3};

[22:28] <camelia> rakudo-moar 360eb2289: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my @numbers = {17⏏5 2 3};␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        …»

[22:28] <geekosaur> <> you don't, but you get allomorphs

[22:28] <Geth> ¦ doc: f2df22e8f1 | (Elizabeth Mattijsen)++ | doc/Type/Kernel.pod6

[22:28] <Geth> ¦ doc: Oops, forgot Kernel.bits

[22:28] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/f2df22e8f1

[22:28] <HelpWithPerl> Okay guys

[22:28] <azawawi> at some point, i just want to write it in C instead of Perl 6 :)

[22:28] <comborico1611> Thanks

[22:28] <comborico1611> Just what i was wondering.

[22:28] <geekosaur> m: my @a = <1 2 3>; dd @a[0]

[22:28] <camelia> rakudo-moar 360eb2289: OUTPUT: «IntStr @a = IntStr.new(1, "1")␤»

[22:29] *** tomaw_ is now known as tomaw

[22:29] <comborico1611> m: my @numbers = <1 2 3>;

[22:29] <camelia> rakudo-moar 360eb2289: ( no output )

[22:29] <geekosaur> that's an allomorph; it's not sure whether it's an Int or a Str :)

[22:29] <comborico1611> You talking to me?

[22:30] <geekosaur> about the IntStr thing I made the bot do, yes

[22:30] <geekosaur> which is what you get from the <1 2 3> for

[22:30] <geekosaur> m

[22:30] <geekosaur> whereas if you do

[22:30] <comborico1611> m: my @numbers = 1, 2, 3;

[22:30] <camelia> rakudo-moar 360eb2289: ( no output )

[22:30] <geekosaur> m: my @a = 1, 2, 3; dd @a[0]

[22:30] <camelia> rakudo-moar 360eb2289: OUTPUT: «Int @a = 1␤»

[22:30] <geekosaur> it's just an Int

[22:30] <comborico1611> What is dd?

[22:31] <geekosaur> 'debug dumper'

[22:31] <geekosaur> it's a way to see exactly what something is, instead of various prettified (or uglified) views of it

[22:32] <HelpWithPerl> What would I need to add to say (@tableau).grep: Int; for it to check integers that are multiples of 3 and 5?

[22:32] <comborico1611> I don't understand.  But it's okay. I need to enter some code. The semicolon look to be in the wrong spot

[22:32] <comborico1611> I see.

[22:32] *** cdg left
[22:33] *** cdg joined
[22:33] *** travis-ci joined
[22:33] <travis-ci> Doc build failed. Zoffix Znet 'Use correct redirect code for IRC web chat'

[22:33] <travis-ci> https://travis-ci.org/perl6/doc/builds/297356389 https://github.com/perl6/doc/compare/83bfdd4e794d...e8ee9762dde5

[22:33] *** travis-ci left
[22:33] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[22:33] <geekosaur> m: my @n = 1, 3, 5, 7, 9, 15; say @n.grep: {$^a % 3 == 0 && $^a % 5 == 0}

[22:33] <camelia> rakudo-moar 360eb2289: OUTPUT: «(15)␤»

[22:33] <Geth> ¦ doc: 6fef43cb4a | (Elizabeth Mattijsen)++ | doc/Type/Distro.pod6

[22:33] <Geth> ¦ doc: Initial version of the Distro documentation

[22:33] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/6fef43cb4a

[22:33] <synopsebot> Link: https://doc.perl6.org/type/Distro

[22:34] <geekosaur> if you also need to check the Int part,

[22:34] <geekosaur> m: my @n = 1, 3, 5, 7, 9, 15; say @n.grep: {$^a ~~ Int && $^a % 3 == 0 && $^a % 5 == 0}

[22:34] <camelia> rakudo-moar 360eb2289: OUTPUT: «(15)␤»

[22:34] <HelpWithPerl> Thanks :D

[22:34] <geekosaur> or you can be more explicit instead of using a placeholder:

[22:34] <ilmari> m: say (^30).grep: { $_ %% 3 && $_ %% 5 }

[22:34] <camelia> rakudo-moar 360eb2289: OUTPUT: «(0 15)␤»

[22:34] <ilmari> m: say (^35).grep: { $_ %% 3 && $_ %% 5 }

[22:34] <camelia> rakudo-moar 360eb2289: OUTPUT: «(0 15 30)␤»

[22:34] <geekosaur> m: my @n = 1, 3, 5, 7, 9, 15; say @n.grep: -> $n {$n % 3 == 0 && $n % 5 == 0}

[22:34] <camelia> rakudo-moar 360eb2289: OUTPUT: «(15)␤»

[22:34] <squashable6> 🍕 lizmat++ wrote a comment on “Kernel, Distro, VM and P…”: https://github.com/perl6/doc/issues/503#issuecomment-341934592

[22:34] *** nadim_ joined
[22:35] <ilmari> %% is "is divisble by"

[22:35] <geekosaur> hm, probably shouldn't have used n for both

[22:35] <geekosaur> ah, right

[22:35] <kalkin-> Hmm NativeCall is SLOW! I have a c function which takes  <1 second to run and populates an array with 10⁸ elements, takes wrapped ≥34 seconds!

[22:35] <geekosaur> m: my @n = 1, 3, 5, 7, 9, 15; say @n.grep: -> $v {$v %% 3 && $v %% 5}

[22:35] <camelia> rakudo-moar 360eb2289: OUTPUT: «(15)␤»

[22:36] <geekosaur> kalkin-, yes, it's got to remap all of those elements into something Perlish

[22:36] <kalkin-> There is no way to optimize that, isn't there?

[22:36] <comborico1611> m: my @numbers = <1 2 3>; sub add-numbers ( @numbers ) { my total = 0; for @numbers -> $x { $total += $x; } return $total; }

[22:36] <camelia> rakudo-moar 360eb2289: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed my (did you mean to declare a sigilless \total or $total?)␤at <tmp>:1␤------> 3 sub add-numbers ( @numbers ) { my total7⏏5 = 0; for @numbers -> $x { $total += $x;␤»

[22:37] <comborico1611> m: my @numbers = <1 2 3>; sub add-numbers ( @numbers ) { my $total = 0; for @numbers -> $x { $total += $x; } return $total; }

[22:37] <camelia> rakudo-moar 360eb2289: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3 0; for @numbers -> $x { $total += $x; }7⏏5 return $total; }␤»

[22:37] <geekosaur> repr('CStruct'), CArray, etc. don;t mean it's literally using C values, it just provides a way for NativeCall to request packing and unpacking between C form and Perl form

[22:38] <comborico1611> m: my @numbers = <1 2 3>; sub add-numbers ( @numbers ) { my total = 0; for @numbers -> $x { $total += $x; }; return $total; }

[22:38] <camelia> rakudo-moar 360eb2289: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed my (did you mean to declare a sigilless \total or $total?)␤at <tmp>:1␤------> 3 sub add-numbers ( @numbers ) { my total7⏏5 = 0; for @numbers -> $x { $total += $x;␤»

[22:38] <comborico1611> m: my @numbers = <1 2 3>; sub add-numbers ( @numbers ) { my $total = 0; for @numbers -> $x { $total += $x; }; return $total; }

[22:38] <camelia> rakudo-moar 360eb2289: ( no output )

[22:38] *** cdg left
[22:39] <comborico1611> I believe this author did not understand where to put ; outside of brace.

[22:39] *** wamba joined
[22:39] <geekosaur> or just being pedantic

[22:39] <comborico1611> I think I'll take a break.

[22:40] *** Khisanth joined
[22:40] <comborico1611> I don't think so.

[22:40] <kalkin-> It's a pity, but I can't use Perl 6 for my current project. I love the expressiveness of Perl 6, but it just doesn't scale for my purposes

[22:42] *** ivans left
[22:47] *** ivans joined
[22:48] *** azawawi left
[22:48] *** travis-ci joined
[22:48] <travis-ci> Doc build failed. Elizabeth Mattijsen 'Initial version of Kernel documentation.'

[22:48] <travis-ci> https://travis-ci.org/perl6/doc/builds/297360376 https://github.com/perl6/doc/compare/e8ee9762dde5...df06cbc0709e

[22:48] *** travis-ci left
[22:48] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[22:52] <Geth> ¦ doc: db79ec9c3d | (Elizabeth Mattijsen)++ | doc/Type/VM.pod6

[22:52] <Geth> ¦ doc: Initial version of documentation of VM

[22:52] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/db79ec9c3d

[22:52] <synopsebot> Link: https://doc.perl6.org/type/VM

[22:52] <squashable6> 🍕 lizmat++ wrote a comment on “Kernel, Distro, VM and P…”: https://github.com/perl6/doc/issues/503#issuecomment-341935628

[22:54] *** Cabanossi left
[22:55] *** Cabanossi joined
[22:57] *** travis-ci joined
[22:57] <travis-ci> Doc build failed. Elizabeth Mattijsen 'Oops, forgot Kernel.bits'

[22:57] <travis-ci> https://travis-ci.org/perl6/doc/builds/297362376 https://github.com/perl6/doc/compare/df06cbc0709e...f2df22e8f187

[22:57] *** travis-ci left
[22:57] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[22:58] <lizmat> hmmm... did *I* break all of the builds ?

[23:01] *** travis-ci joined
[23:01] <travis-ci> Doc build failed. Elizabeth Mattijsen 'Initial version of the Distro documentation'

[23:01] <travis-ci> https://travis-ci.org/perl6/doc/builds/297363569 https://github.com/perl6/doc/compare/f2df22e8f187...6fef43cb4a7c

[23:01] *** travis-ci left
[23:01] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[23:02] <Geth> ¦ doc: b558e0936b | (Elizabeth Mattijsen)++ | doc/Type/Perl.pod6

[23:02] <Geth> ¦ doc: Initial version of Perl class information

[23:02] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/b558e0936b

[23:02] <synopsebot> Link: https://doc.perl6.org/type/Perl

[23:02] *** colomon joined
[23:02] <squashable6> 🍕 lizmat++ wrote a comment on “Kernel, Distro, VM and P…”: https://github.com/perl6/doc/issues/503#issuecomment-341936247

[23:03] <squashable6> 🍕 lizmat++ wrote a comment on “Kernel, Distro, VM and P…”: https://github.com/perl6/doc/issues/503#issuecomment-341936303

[23:04] <lizmat> good night, good Squashathon folks!

[23:05] *** Piotr left
[23:08] <HelpWithPerl> Is there anything wrong with this line of code? $total + @somme[$i];

[23:09] <Juerd> No, but realise it doesn't really do anything by itself.

[23:09] <HelpWithPerl> Oh, yeah, but after some testing I think that the issue is inside of that line :P

[23:10] <HelpWithPerl> Do you mind have a quick look? I could add the code into a pastebin

[23:10] <raiph> m: my $total = 42; my @somme = [1,2,3]; my $i = 1; say $total + @somme[$i]; $total + @somme[$i]; 

[23:10] <camelia> rakudo-moar 360eb2289: OUTPUT: «WARNINGS for <tmp>:␤44␤Useless use of "+" in expression "$total + @somme[$i]" in sink context (line 1)␤»

[23:11] <Juerd> HelpWithPerl: What's the issue?

[23:11] *** nadim_ left
[23:12] <HelpWithPerl> I'm tring to solve the 1st Project Euler problem, but the numbers aren't adding :P

[23:12] <Juerd> That's a bit too high level :)

[23:13] <raiph> HelpWithPerl: a pastebin would be fine

[23:13] <HelpWithPerl> lol

[23:14] <geekosaur> were you tryuing to return that, or actually add the value to $total?

[23:15] <HelpWithPerl> https://pastebin.com/ak5Xftqm

[23:15] <geekosaur> you wanted +=

[23:15] <Juerd> HelpWithPerl: Normally, you would do something with the result of the addition

[23:15] <geekosaur> + will add them but discard the result because it's in sink context

[23:15] <Juerd> HelpWithPerl: 1 + 1 returns 2, but if you just have 1 + 1, the numbers are added, and the resulting 2 is thrown away.

[23:15] <geekosaur> hm, actually it's not sink context

[23:15] <geekosaur> loops are weird :(

[23:16] <HelpWithPerl> Oh, okay

[23:16] <geekosaur> so the loop returns a list, which gets silently sunk ignoring the contents

[23:16] <Juerd> HelpWithPerl: To assign the result to the same variable, use   $somme = $somme + @total[$i];  or the shorthand form  $somme += @total[$i];

[23:17] <HelpWithPerl> I've just tried that, but it just gives the most recent number in the array

[23:18] <Juerd> What does "give" mean? :)

[23:19] <HelpWithPerl> Well, returns :P

[23:19] *** travis-ci joined
[23:19] *** cdg joined
[23:19] <travis-ci> Doc build failed. Elizabeth Mattijsen 'Initial version of documentation of VM'

[23:19] <travis-ci> https://travis-ci.org/perl6/doc/builds/297368223 https://github.com/perl6/doc/compare/6fef43cb4a7c...db79ec9c3da2

[23:19] *** travis-ci left
[23:19] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[23:24] *** cdg left
[23:24] *** darkmorph joined
[23:25] <HelpWithPerl> Yes! I realised what the problem was!

[23:25] <HelpWithPerl> !!!1!

[23:26] <HelpWithPerl> I had the total declaration inside the loop, so every time it ran the loop it would get reset to 0

[23:26] <HelpWithPerl> Thanks for the help guys :D

[23:27] *** ivans left
[23:34] *** mson left
[23:35] <Geth> ¦ perl6.org: a2565accc5 | (Zoffix Znet)++ (committed using GitHub Web editor) | source/.htaccess

[23:35] <Geth> ¦ perl6.org: Add short URL for sponsoring jnthn

[23:35] <Geth> ¦ perl6.org: 

[23:35] <Geth> ¦ perl6.org: To have something of sane length to use in print

[23:35] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/a2565accc5

[23:35] *** census joined
[23:38] *** colomon left
[23:39] *** ivans joined
[23:45] *** HelpWithPerl left
[23:48] <Geth> ¦ doc: 1dcf12a96d | (Zoffix Znet)++ | 2 files

[23:48] <Geth> ¦ doc: Unbust doc build

[23:48] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1dcf12a96d

[23:48] *** travis-ci joined
[23:48] <travis-ci> Doc build failed. Elizabeth Mattijsen 'Initial version of Perl class information'

[23:48] <travis-ci> https://travis-ci.org/perl6/doc/builds/297370656 https://github.com/perl6/doc/compare/db79ec9c3da2...b558e0936b06

[23:48] *** travis-ci left
[23:48] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[23:56] *** colomon joined
