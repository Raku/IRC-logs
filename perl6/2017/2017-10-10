[00:01] *** mcmillhj joined
[00:06] *** mcmillhj left
[00:08] <AlexDaniel_> timotimo: well, it says “syntax error”

[00:08] <AlexDaniel_> so it's very on point

[00:08] <geekosaur> p5's not known for awesome error messages

[00:09] *** ryn1x left
[00:10] *** ryn1x joined
[00:13] * AlexDaniel_ attempts unclosed quote in perl5 and laughs

[00:13] <AlexDaniel_> hmmmmm but it does point to the right line!

[00:13] * AlexDaniel_ takes back his laugh

[00:15] <HoboWithAShotgun> doh!

[00:16] <HoboWithAShotgun> i thougt in a construct like: if $obj does SomeRole would test wether $ob is doing a role or not

[00:16] <HoboWithAShotgun> that introduced an interesting bug

[00:17] *** troys is now known as troys_

[00:17] *** rgrau left
[00:17] <HoboWithAShotgun> m: role a { method x {}; }; my a $x; $a does a; say a.^methods.elems;

[00:17] <camelia> rakudo-moar e11f4e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared␤at <tmp>:1␤------> 3role a { method x {}; }; my a $x; 7⏏5$a does a; say a.^methods.elems;␤»

[00:18] <HoboWithAShotgun> m: role a { method x {}; }; my a $x; $x does a; say x.^methods.elems;

[00:18] <camelia> rakudo-moar e11f4e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    x used at line 1␤␤»

[00:18] <HoboWithAShotgun> m: role a { method x {}; }; my a $x; $x does a; say $x.^methods.elems;

[00:18] <camelia> rakudo-moar e11f4e: OUTPUT: «Cannot use 'does' operator with a type object.␤  in block <unit> at <tmp> line 1␤␤»

[00:18] <HoboWithAShotgun> m: role a { method x {}; }; class A does a {}; my A $x = A.new; $x does a; say $x.^methods.elems;

[00:18] <camelia> rakudo-moar e11f4e: OUTPUT: «2␤»

[00:19] <HoboWithAShotgun> which method wins here? the last added? and can i "undo" a role from an obj

[00:23] <timotimo> you can't, unless you store the original object and use "but" instead of "does"

[00:23] <mson> How do I define a custom printing for my object?

[00:23] <timotimo> mson: override the gist method, or the Str method

[00:24] *** ryn1x left
[00:24] <mson> Thanks

[00:24] <timotimo> gist is meant to "give you the gist" as human-friendly abbreviated output

[00:24] <timotimo> for example, lists gist to have spaces instead of comma and quotes between the elements, and they stop at the 100th element

[00:24] *** ryn1x joined
[00:24] <timotimo> m: my @a = <hi there 1 2 3 foo bar>; say @a.gist; say @a.Str

[00:24] <camelia> rakudo-moar e11f4e: OUTPUT: «[hi there 1 2 3 foo bar]␤hi there 1 2 3 foo bar␤»

[00:25] <timotimo> and Str is joined by spaces, too, but doesn't have opening and closing brackets

[00:25] <mson> Ah, nice distinction. So if I don't override gist but do override Str, which does say call?

[00:25] <timotimo> m: my %foo = a => 1, b => 2, c => 3; say %foo.gist; say %foo.Str

[00:25] <camelia> rakudo-moar e11f4e: OUTPUT: «{a => 1, b => 2, c => 3}␤a 1␤b     2␤c     3␤»

[00:25] <timotimo> say calls gist, put is like say but calls Str instead

[00:25] <geekosaur> say always does .gist

[00:26] <timotimo> but if you do 'say "something involving $foo"' it'll use .Str because that does regular string concatenation before say even enters the picture

[00:26] <timotimo> in that case you can 'say "something involving ", $foo' and i think that uses gist for $foo then

[00:27] <geekosaur> ...it suddenly occurs to me that if we ever get that p5 optimization then it could change program behavior

[00:27] <geekosaur> (where interpolations in that context get rewritten to not be interpolations)

[00:29] <timotimo> please elaborate?

[00:30] <geekosaur> hm, actually I think p5 always turns that into concat, so maybe not.

[00:30] *** mr-foobar left
[00:30] <geekosaur> was thinking p5 rewrites to not be an interpolation, thereby saving some string (re)allocations, but if it did so in something like say then it could change a .Str into a .gist

[00:30] <timotimo> in p6 that also gets turned into straight up &infix:<~> invocations i believe

[00:30] <geekosaur> but I think concat in p5 also always does .Str?

[00:31] <geekosaur> er, in p6

[00:31] <timotimo> yes, concat always uses Str, or rather .Stringy i guess?

[00:31] <geekosaur> it'd be a potential problem if it did .gist

[00:31] *** mr-foobar joined
[00:32] <geekosaur> (but a firther optimization mght be to save mroe allocations by recognizing it could avoid the contact when it;s being done for .say --- but then you have to make sure it .Str-s instead of letting say .gist it)

[00:32] <geekosaur> ... what is with my typing

[00:32] <geekosaur> avoid the concat

[00:32] *** ryn1x left
[00:34] *** ryn1x joined
[00:34] <timotimo> it could very well be our strands implementation conveys that potential benefit already

[00:36] <mson> Gotcha, thanks both.

[00:37] <mson> I'm on the docs/routine/gist page, but it lists so many methods. Should I override the Mu method, or something else?

[00:38] <timotimo> going to bed, gnite!

[00:38] <mson> night

[00:38] *** ryn1x left
[00:38] <timotimo> there'll only be the method gist you put into your class that'll be relevant

[00:39] <geekosaur> youy change the type/class you want to affect it in; anything else will use the .gist of the thing it's trying to stringify

[00:39] <timotimo> it's important to know that what's before the : in the signature (like Blob:D) is what the method is called on

[00:39] <timotimo> o/

[00:40] <Herby_> \o

[00:42] *** kerframil left
[00:42] <geekosaur> btw https://rt.perl.org/Public/Bug/Display.html?id=123016 is the sort of thing that 'leaks' how .gist is implemented and inherited or not inherited

[00:43] *** llfourn joined
[00:45] <geekosaur> (caused by the thing using it being handed something it only knows as Mu, so it uses Mu.gist instead of the specific class's .gist. which is arguably incorrect OO but the runtime cost of doing it right in at least some cases is rather high)

[00:47] *** Aaronepower left
[00:54] *** ryn1x joined
[00:55] *** mson` joined
[00:56] <mson`> Can someone help me understand "No such method <method> for invocant of type 'Any'"? Code is here if it helps: https://pastebin.com/3cQz8vmg

[00:58] <geekosaur> would help to know which method and where the error occurs

[01:00] <mson> Oh yeah. In gist, line 19, after the say on line 25.

[01:01] *** astj joined
[01:07] <geekosaur> oh, I think you are doing this incorrectly

[01:07] <geekosaur> the bare .concat_list_str does not operate on 'self' but on $_

[01:08] <geekosaur> $_ is Any

[01:08] <geekosaur> (it is not set to the current instance)

[01:08] *** matiaslina left
[01:09] <geekosaur> you either want concat_list_str to be a method on Node and use $.head.concat_list_str, or to be a sub and call it without the .

[01:09] <geekosaur> or explciitly use self.concat_list_str(...)

[01:09] <geekosaur> likewise with the recursive call

[01:10] *** bitrauser_ left
[01:11] <mson`> Aha. sub was what I wanted. Thanks.

[01:12] <Herby_> what does everyone use for parsing html in p6?

[01:12] <Herby_> BeautifulSoup makes it easy when I'm poking around Python

[01:19] *** Herby_ left
[01:25] <AlexDaniel_> .seen Herby

[01:25] <yoleaux> I saw Herby 5 Nov 2016 22:43Z in #perl6: <Herby> \o

[01:25] <AlexDaniel_> .seen Herby_

[01:25] <yoleaux> I saw Herby_ 01:12Z in #perl6: <Herby_> BeautifulSoup makes it easy when I'm poking around Python

[01:26] <AlexDaniel_> .tell Herby normally Gumbo ( https://github.com/Skarsnik/perl6-gumbo ), but see RT #131003

[01:26] <yoleaux> AlexDaniel_: I'll pass your message to Herby.

[01:26] <AlexDaniel_> oops

[01:26] <AlexDaniel_> .tell Herby_ normally Gumbo ( https://github.com/Skarsnik/perl6-gumbo ), but see RT #131003

[01:26] <yoleaux> AlexDaniel_: I'll pass your message to Herby_.

[01:26] <synopsebot> RT#131003 [open]: https://rt.perl.org/Ticket/Display.html?id=131003 [ANNOYING][SEGV] Heap corruption when using Gumbo

[01:32] *** ryn1x left
[01:33] *** ryn1x joined
[01:35] *** stux|RC left
[01:39] *** matiaslina joined
[01:41] *** mson` left
[01:44] *** MilkmanDan joined
[01:46] *** ilbot3 left
[01:47] *** mcmillhj joined
[01:52] *** matiaslina left
[01:52] *** Cabanossi left
[01:52] *** mcmillhj left
[01:53] *** Cabanossi joined
[01:54] *** ilbot3 joined
[01:54] *** ChanServ sets mode: +v ilbot3

[02:01] *** ryn1x left
[02:01] *** mr-foobar left
[02:03] *** mr-foobar joined
[02:04] *** yht joined
[02:04] *** mcmillhj joined
[02:04] *** bdmatatu joined
[02:07] *** bdmatatu left
[02:08] *** eliasr left
[02:10] *** mcmillhj left
[02:15] *** matiaslina joined
[02:20] *** yht left
[02:22] *** ryn1x joined
[02:30] *** mcmillhj joined
[02:30] *** matiaslina left
[02:34] *** yht joined
[02:34] *** mcmillhj left
[02:37] *** noganex joined
[02:40] *** noganex_ left
[02:42] *** ufobat_ joined
[02:43] *** stux|RC joined
[02:45] *** ufobat left
[02:48] *** Herby_ joined
[02:48] *** thou joined
[02:49] <Herby_> AlexDaniel: thanks for the gumbo

[02:49] <yoleaux> 01:26Z <AlexDaniel_> Herby_: normally Gumbo ( https://github.com/Skarsnik/perl6-gumbo ), but see RT #131003

[02:49] <synopsebot> RT#131003 [open]: https://rt.perl.org/Ticket/Display.html?id=131003 [ANNOYING][SEGV] Heap corruption when using Gumbo

[02:50] <Herby_> how do I find the index of an element in an array?  <john mary joseph sam> and I want to return the index of Mary

[02:51] *** Cabanossi left
[02:53] *** mson` joined
[02:53] *** Cabanossi joined
[02:56] <geekosaur> m: <john mary joseph sam>.grep('mary', :k).say

[02:56] <camelia> rakudo-moar e11f4e: OUTPUT: «(1)␤»

[02:56] *** cdg joined
[02:57] <geekosaur> :k means return the key, which for a Positional is the index

[02:57] <Herby_> geekosaur: thanks

[02:57] <Herby_> my google-fu wasnt returning anything, other than an perl6maven article on a grep-index method

[02:57] <thou> m: my @a = <john mary joseph sam mary>; sub find($needle, @haystack) { for @haystack.kv -> $k, $v { return $k if $v eq $needle }; return Nil; }; say find('mary', @a);

[02:57] <camelia> rakudo-moar e11f4e: OUTPUT: «1␤»

[02:58] <thou> ^ What happens when you don't realize grep has :k option

[02:58] <Herby_> haha that's about how I was trying to put it together :)

[03:01] *** mr-foobar left
[03:02] <Herby_> another basic question: is it possible to do multiple assignments in one line?

[03:02] <Herby_> my $a; my $b;  $a, $b = 1, 2

[03:02] <weabot> yes

[03:03] <weabot> actually we'll see

[03:03] <weabot> m: my $a; my $b; $a, $b = 1, 2

[03:03] <camelia> rakudo-moar e11f4e: OUTPUT: «WARNINGS for <tmp>:␤Useless use of $a in sink context (line 1)␤Useless use of constant integer 2 in sink context (lines 1, 1)␤»

[03:03] <weabot> not like this

[03:04] <ugexe> m: my $a; my $b; ($a, $b) = 1, 2; say $a; say $b

[03:04] <camelia> rakudo-moar e11f4e: OUTPUT: «1␤2␤»

[03:04] <weabot> well here we go

[03:04] <Herby_> ahh ok

[03:04] <weabot> and like this you can make a function return many values and assign them like this

[03:04] <Herby_> my @a; my $b; my @cats = <sam diane>; ($a, $b) = @cats; say $a; say $b;

[03:04] <Herby_> m: my @a; my $b; my @cats = <sam diane>; ($a, $b) = @cats; say $a; say $b;

[03:04] <camelia> rakudo-moar e11f4e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$a' is not declared. Did you mean '@a'?␤at <tmp>:1␤------> 3my @a; my $b; my @cats = <sam diane>; (7⏏5$a, $b) = @cats; say $a; say $b;␤»

[03:04] *** mr-foobar joined
[03:05] <Herby_> m: my $a; my $b; my @cats = <sam diane>; ($a, $b) = @cats; say $a; say $b;

[03:05] <camelia> rakudo-moar e11f4e: OUTPUT: «sam␤diane␤»

[03:05] <Herby_> great. thanks weabot 

[03:06] <Herby_> I'm working my way through Automate The Boring Stuff, but using Perl 6 instead of Python of course

[03:06] <Herby_> and using Think Perl 6 as reference where I can

[03:06] <weabot> m: sub f(0) { return ($x + 1), ($x + 2),($x + 3); } my $a; my $b; my $c; ($a, $b, $c) = f(0);

[03:06] <camelia> rakudo-moar e11f4e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$x' is not declared␤at <tmp>:1␤------> 3sub f(0) { return (7⏏5$x + 1), ($x + 2),($x + 3); } my $a; my ␤»

[03:07] <weabot> m: sub f($x) { return ($x + 1), ($x + 2),($x + 3); } my $a; my $b; my $c; ($a, $b, $c) = f(0);

[03:07] <camelia> rakudo-moar e11f4e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3 { return ($x + 1), ($x + 2),($x + 3); }7⏏5 my $a; my $b; my $c; ($a, $b, $c) = f(0␤    expecting any of:␤        in…»

[03:07] <weabot> yup

[03:07] * weabot goes on to an interpreter

[03:08] <weabot> well it works in the interpreter

[03:08] <Herby_> hmm

[03:09] <weabot> sub f($x) { return $x+1, $x+2, $x+3; } my $a; my $b; my $c; ($a, $b, $c) = f(0);

[03:09] <weabot> right

[03:09] <weabot> sub f($x) { return $x+1, $x+2, $x+3; } my $a; my $b; my $c; ($a, $b, $c) = f(0); put($a, $b, $c)

[03:09] <ugexe> m: sub f($x) { return ($x + 1), ($x + 2),($x + 3); }; my $a; my $b; my $c; ($a, $b, $c) = f(0);

[03:09] <camelia> rakudo-moar e11f4e: ( no output )

[03:11] <geekosaur> combined on one line like that, it needs the ; after the sub definition

[03:13] <weabot> oooh ok

[03:17] *** mson` left
[03:17] *** TEttinger joined
[03:17] *** mcmillhj joined
[03:22] *** mcmillhj left
[03:22] *** Cabanossi left
[03:23] *** Cabanossi joined
[03:31] *** mr-foobar left
[03:32] *** matiaslina joined
[03:34] *** bitrauser_ joined
[03:35] *** matiaslina left
[03:35] *** mr-foobar joined
[03:36] *** mcmillhj joined
[03:41] *** bitrauser_ left
[03:41] *** mcmillhj left
[03:48] *** bitrauser_ joined
[03:49] *** Cabanossi left
[03:52] *** Cabanossi joined
[03:54] *** Herby_ left
[03:56] *** thou left
[03:57] *** cdg left
[04:01] *** mr-foobar left
[04:02] *** bitrauser_ left
[04:05] *** mr-foobar joined
[04:07] *** mcmillhj joined
[04:12] *** mcmillhj left
[04:14] *** mattp__ left
[04:20] *** mcmillhj joined
[04:20] *** BenGoldberg left
[04:22] *** Ptolemarch left
[04:22] *** ptlmrch joined
[04:25] *** mcmillhj left
[04:26] *** troys_ is now known as troys

[04:26] *** AlexDaniel_ left
[04:32] *** mson left
[04:32] *** mr-foobar left
[04:33] *** mr-foobar joined
[04:35] *** Beth joined
[04:45] *** Beth left
[04:46] *** skids left
[04:48] *** kerframil joined
[04:50] *** Cabanossi left
[04:52] *** Cabanossi joined
[04:59] *** ryn1x left
[05:00] *** ryn1x joined
[05:02] *** mr-foobar left
[05:03] *** mr-foobar joined
[05:04] *** troys left
[05:08] *** ryn1x left
[05:09] *** ryn1x joined
[05:13] *** yht left
[05:14] *** bitrauser_ joined
[05:17] *** ryn1x left
[05:18] *** ryn1x joined
[05:19] *** wamba joined
[05:26] *** ryn1x left
[05:27] *** ryn1x joined
[05:28] *** xtreak joined
[05:35] *** ryn1x left
[05:36] *** ryn1x joined
[05:41] *** aborazmeh joined
[05:41] *** aborazmeh left
[05:41] *** aborazmeh joined
[05:46] *** lowbro joined
[05:46] *** lowbro left
[05:46] *** lowbro joined
[05:47] *** Wiertek joined
[05:54] *** ryn1x left
[05:55] *** ryn1x joined
[06:04] *** domidumont joined
[06:05] *** Cabanossi left
[06:06] *** cdg joined
[06:07] *** Cabanossi joined
[06:08] *** domidumont left
[06:09] *** domidumont joined
[06:11] *** cdg left
[06:14] *** kyan left
[06:18] *** kid51 joined
[06:22] *** b2gills left
[06:27] *** b2gills joined
[06:28] *** ryn1x left
[06:29] *** ryn1x joined
[06:33] *** wamba left
[06:38] *** ryn1x left
[06:39] *** ryn1x joined
[06:40] *** darutoko joined
[06:41] *** someuser joined
[06:43] *** domidumont left
[06:44] *** domidumont joined
[06:45] *** thunktone joined
[06:46] *** abraxxa joined
[06:47] *** patrickz joined
[06:49] *** TimToady left
[06:51] *** TimToady joined
[06:52] *** thunktone left
[06:52] *** ryn1x left
[06:53] *** ryn1x joined
[06:53] *** thunktone joined
[06:54] *** yht joined
[06:56] *** andrzejku joined
[07:01] *** ryn1x left
[07:01] *** yht left
[07:02] *** ryn1x joined
[07:02] *** jonas1 joined
[07:02] *** mr-foobar left
[07:04] *** mr-foobar joined
[07:05] *** Cabanossi left
[07:07] *** wamba joined
[07:07] *** Cabanossi joined
[07:10] *** ryn1x left
[07:11] *** kerframil left
[07:11] *** ryn1x joined
[07:18] *** HoboWithAShotgun left
[07:24] *** ryn1x left
[07:25] *** ryn1x joined
[07:29] *** Wiertek left
[07:33] *** mr-foobar left
[07:34] *** Guest91556 joined
[07:35] *** mr-foobar joined
[07:40] *** araujo left
[07:41] *** araujo joined
[07:41] *** araujo left
[07:41] *** araujo joined
[07:41] *** thunktone left
[07:42] *** dakkar joined
[07:42] *** Guest91556 left
[07:43] *** rindolf joined
[07:43] *** thunktone joined
[07:51] *** kerframil joined
[07:51] *** Cabanossi left
[07:51] *** eliv left
[07:52] *** Cabanossi joined
[07:58] *** ryn1x left
[07:59] *** ryn1x joined
[08:03] *** ryn1x left
[08:04] *** ryn1x joined
[08:06] *** sproctor joined
[08:11] * lizmat clickbaits https://p6weekly.wordpress.com/2017/10/09/2017-41-the-case-for-empathy/

[08:12] *** ryn1x left
[08:13] *** ryn1x joined
[08:14] <tyil> hoelzro: I added a PR to the vim-perl6 repo

[08:16] *** HoboWithAShotgun joined
[08:19] *** xtreak left
[08:22] *** xtreak joined
[08:25] *** xtreak left
[08:26] *** xtreak joined
[08:27] *** Wiertek joined
[08:27] *** ryn1x left
[08:27] *** ryn1x joined
[08:29] *** aborazmeh left
[08:29] *** holyghost left
[08:30] *** xtreak left
[08:30] *** holyghost joined
[08:30] *** TEttinger left
[08:30] *** rgrau joined
[08:33] *** mr-foobar left
[08:36] *** ryn1x left
[08:36] *** mr-foobar joined
[08:37] *** ryn1x joined
[08:39] *** kid51 left
[08:44] *** robertle joined
[08:45] *** ryn1x left
[08:46] *** ryn1x joined
[08:46] *** xtreak joined
[08:47] *** xtreak left
[08:49] *** xtreak_ joined
[08:50] *** Wiertek left
[08:51] *** wamba left
[08:54] *** ryn1x left
[08:55] *** wamba joined
[08:55] *** ryn1x joined
[08:57] *** eliasr joined
[09:03] *** mr-foobar left
[09:06] *** mr-foobar joined
[09:07] *** thunktone left
[09:08] *** thunktone joined
[09:28] *** ryn1x left
[09:29] *** ryn1x joined
[09:33] <thunktone> Is it possible to use a Signature variable when defining a new sub?

[09:33] <thunktone> m: my $sig=:(Str $word, Int $count); sub rep $sig {print "$word " for $count}; rep 'hello', 3;

[09:33] <camelia> rakudo-moar e11f4e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3y $sig=:(Str $word, Int $count); sub rep7⏏5 $sig {print "$word " for $count}; rep '␤    expecting any of:␤        new name to be defined␤»

[09:33] *** mr-foobar left
[09:34] *** ryn1x left
[09:34] <jnthn> thunktone: No

[09:34] *** ryn1x joined
[09:34] *** mr-foobar joined
[09:35] <thunktone> ok, thanks

[09:35] *** aborazmeh joined
[09:35] *** aborazmeh left
[09:35] *** aborazmeh joined
[09:37] <sproctor> @jnthn any plans for a cro 0.7.1 release including the recent bug fixes and the like? 

[09:37] *** Wiertek joined
[09:41] <jnthn> sproctor: Yes, later this week, or next week, depending on how much time I find and how hard figuring out getting it onto CPAN will be :)

[09:41] <sproctor> Cool. I keep meaning to take another look at it and I was hoping to have a slide or two about it in my talk for the LPW at the end of next month. 

[09:43] *** ryn1x left
[09:43] *** ryn1x joined
[09:50] *** Cabanossi left
[09:52] *** Cabanossi joined
[09:57] *** ryn1x left
[09:57] *** ryn1x joined
[10:03] *** mr-foobar left
[10:05] *** araraloren joined
[10:06] *** ryn1x left
[10:07] *** mr-foobar joined
[10:07] *** ryn1x joined
[10:20] *** Xal left
[10:23] *** Xal joined
[10:25] *** ryn1x left
[10:25] *** ryn1x joined
[10:26] *** W4RL0RD joined
[10:27] <araraloren> evening

[10:31] *** mattp_ joined
[10:32] <DrForr> %greeting<local>

[10:37] *** rba_ joined
[10:39] *** rba left
[10:41] *** skids joined
[10:46] *** piojo joined
[10:47] *** rba joined
[10:48] *** xinming_ joined
[10:49] *** rba_ left
[10:49] <piojo> m: sub foo(% (:name(:$n))) { say $n; }; foo {name => 'Bill'}

[10:49] <camelia> rakudo-moar b8eda6: OUTPUT: «Bill␤»

[10:50] *** Piotr_ joined
[10:50] <piojo> What's the meaning of the ':' in ':$n'? It's optional, and causes problems if you try to unpack to a variable with the same name

[10:50] *** Cabanossi left
[10:51] <piojo> m: sub foo(% (:name(:$name))) { say $name; }

[10:51] <camelia> rakudo-moar b8eda6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Name name used for more than one named parameter␤at <tmp>:1␤------> 3sub foo(% (:name(:$name)))7⏏5 { say $name; }␤»

[10:51] *** xinming left
[10:51] <piojo> but this is okay:

[10:51] <piojo> sub foo(% (:name($name))) { say $name; }; foo {name => 'Bill'}

[10:51] <piojo> m: sub foo(% (:name($name))) { say $name; }; foo {name => 'Bill'}

[10:51] <camelia> rakudo-moar b8eda6: OUTPUT: «Bill␤»

[10:53] *** Cabanossi joined
[10:56] *** traxex left
[10:58] *** ggoebel left
[10:58] *** ryn1x left
[10:59] <CIAvash[m]> :$name is the same as :name($name)

[10:59] <CIAvash[m]> m: sub foo(% (:$name)) { say $name; }; foo {name => 'Bill'}

[10:59] <camelia> rakudo-moar b8eda6: OUTPUT: «Bill␤»

[10:59] *** pmurias joined
[11:00] *** ryn1x joined
[11:01] *** traxex joined
[11:02] *** xtreak_ left
[11:02] <piojo> CIAvash: thanks. I must have mistyped that when I tried it

[11:03] <piojo> CIAvash: but the docs say to use % (:key-name(:$var-name)) (in the case where the two names don't match). Any idea what the second ':' is for?

[11:04] *** xtreak joined
[11:05] <piojo> .tell Zoffix thanks for your work on repl-mode. Extremely helpful for use in cygwin.

[11:05] <yoleaux> piojo: I'll pass your message to Zoffix.

[11:06] *** thunktone left
[11:08] *** thunktone joined
[11:09] *** aborazmeh left
[11:10] <CIAvash[m]> m: sub foo(% (:name(:$n))) { say $n; }; foo {name => 'Bill'}; foo {n => 'Jill'};

[11:10] <camelia> rakudo-moar b8eda6: OUTPUT: «Bill␤Jill␤»

[11:13] *** ryn1x left
[11:14] *** ryn1x joined
[11:15] <CIAvash[m]> I think you would do that if you wanted to use multiple key names. Can you give the link to the docs where it says you have to do this?

[11:20] *** thunktone left
[11:21] *** thunktone joined
[11:23] *** okl joined
[11:24] *** llfourn left
[11:25] *** someuser left
[11:27] *** ryn1x left
[11:28] *** ryn1x joined
[11:30] *** okl left
[11:32] <piojo>  CIAvash[m]: it doesn't say you have to, but it's the example: https://docs.perl6.org/type/Signature#Destructuring_Parameters

[11:33] <piojo> I'd like to understand what that colon means, and hopefully add it to the docs. (I could also add | and ! to the docs for capturing hash elements, since they're useful)

[11:34] *** mr-foobar left
[11:34] <piojo> ! and | work just like in regular signatures--making a hash element required, and allowing additional hash elements that aren't named

[11:36] *** mr-foobar joined
[11:36] *** ryn1x left
[11:37] *** thunktone left
[11:37] *** ryn1x joined
[11:38] *** thunktone joined
[11:39] *** wander4096 joined
[11:40] <CIAvash[m]> The docs probably need to show how to actually call and use the functions in the examples

[11:45] *** ryn1x left
[11:46] <CIAvash[m]> the colon before variable is useful when the pair's key and the variable's name are the same, so you don't have to repeat it.

[11:46] <CIAvash[m]> https://docs.perl6.org/type/Signature#Positional_vs._Named

[11:46] *** ryn1x joined
[11:47] <Geth> ¦ doc: fluca1978++ created pull request #1594: Add a short introduction to subroutines and precedence dropping.

[11:47] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/1594

[11:47] *** ggoebel joined
[11:49] <piojo> CIAvash[m]: Thanks, but I'm not sure that applies here, because it's the second colon--> :name(:$username)

[11:50] <piojo> CIAvash[m]: I've gotta run now, but I'll add some more examples and make a PR, then will file an issue that asks why :name(:$username) is shown instead of :name($username)

[11:53] <CIAvash[m]> piojo:  Yeah, I don't think it's necessary there, unless I'm missing something.

[11:54] <wander4096> https://gist.github.com/W4anD0eR96/106de3968f9dbc8a718e76975e4b6b01

[11:54] <wander4096> piojo: https://gist.github.com/W4anD0eR96/106de3968f9dbc8a718e76975e4b6b01

[11:54] <wander4096> it creates alias

[11:55] <wander4096> and this mentions about it https://docs.perl6.org/language/functions#index-entry-MAIN

[11:57] *** margeas joined
[11:59] <piojo> wander4096: thanks, that's very helpful! (I must have screwed up my test code again, because I actually tried to test this possibility)

[12:00] <wander4096> m: sub f(:name(:$username)) { say $username }; f(:name("x")); f(:username("y"))

[12:00] <camelia> rakudo-moar b8eda6: OUTPUT: «x␤y␤»

[12:01] <piojo> wander4096: I wasn't saying I did it right!

[12:01] <ilmari> m: sub f(:name(:user($username))) { say $username }; f(:name("x")); f(:username("y")); f(:user("z"))

[12:01] <camelia> rakudo-moar b8eda6: OUTPUT: «x␤Unexpected named argument 'username' passed␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:01] <ilmari> m: sub f(:name(:user($:username))) { say $username }; f(:name("x")); f(:username("y")); f(:user("z"))

[12:01] <camelia> rakudo-moar b8eda6: OUTPUT: «5===SORRY!5===␤In signature parameter, placeholder variables like $:username are illegal␤you probably meant a named parameter: ':$username'␤at <tmp>:1␤------> 3sub f(:name(:user($:username7⏏5))) { say $username }; f(:name("x")); f(␤Va…»

[12:01] <ilmari> m: sub f(:name(:user(:$username))) { say $username }; f(:name("x")); f(:username("y")); f(:user("z"))

[12:01] <piojo> ilmari: :$username, not $:username

[12:01] <camelia> rakudo-moar b8eda6: OUTPUT: «x␤y␤z␤»

[12:01] <ilmari> piojo: yeah, I realised

[12:02] <CIAvash[m]> piojo:  I showed the example with the alias :) https://irclog.perlgeek.de/perl6/2017-10-10#i_15282601

[12:03] *** mr-foobar left
[12:04] <piojo> CIAvash[m]: Indeed you did. A belated thank you! My eyes must have passed over that, because I thought I had already attempted that

[12:05] *** mr-foobar joined
[12:05] *** Cabanossi left
[12:07] *** Cabanossi joined
[12:17] *** piojo left
[12:29] *** ryn1x left
[12:30] *** ryn1x joined
[12:34] *** mr-foobar left
[12:34] *** xtreak left
[12:38] *** ryn1x left
[12:39] *** ryn1x joined
[12:43] *** mr-foobar joined
[12:47] *** nicq20 left
[12:47] *** ryn1x left
[12:48] *** jonas1 left
[12:49] *** ryn1x joined
[12:51] *** rindolf left
[12:52] *** bdmatatu joined
[12:53] *** flatwhite joined
[12:54] *** wamba left
[12:56] *** mcmillhj joined
[12:56] *** kerframil left
[12:57] <Geth> ¦ doc: W4anD0eR96++ created pull request #1596: Rewrite intro of alias named signature

[12:57] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/1596

[12:59] *** flatwhite left
[13:00] *** kid51 joined
[13:05] *** mr-foobar left
[13:06] *** wander4096 left
[13:07] *** zakharyas joined
[13:08] *** mr-foobar joined
[13:08] *** mson joined
[13:09] *** mcsnolte left
[13:12] *** ryn1x left
[13:12] *** ryn1x joined
[13:16] *** ryn1x left
[13:22] *** cdg joined
[13:38] *** ryn1x joined
[13:41] *** rba_ joined
[13:43] *** rba left
[13:46] *** ryn1x left
[13:47] *** rba joined
[13:47] *** ryn1x joined
[13:49] *** rba_ left
[13:49] *** leont joined
[13:55] *** ryn1x left
[13:56] *** wamba joined
[13:57] *** Piotr_ left
[13:57] *** Wiertek left
[13:58] *** cdg left
[14:04] *** mr-foobar left
[14:05] *** mr-foobar joined
[14:12] *** ryn1x joined
[14:12] *** leont left
[14:15] *** rindolf joined
[14:17] *** ryn1x left
[14:17] *** ryn1x joined
[14:20] *** Cabanossi left
[14:22] *** rba_ joined
[14:22] *** Cabanossi joined
[14:24] *** rba left
[14:24] *** lowbro left
[14:31] *** rba joined
[14:33] *** rba_ left
[14:34] *** cdg joined
[14:36] *** mr-foobar left
[14:38] *** zakharyas left
[14:38] *** mr-foobar joined
[14:39] *** cdg left
[14:39] *** atroxaper joined
[14:44] *** mcmillhj left
[14:45] *** zakharyas joined
[14:49] *** mcmillhj joined
[14:53] *** leont joined
[14:53] *** okl joined
[14:54] *** mcmillhj left
[14:56] *** ryn1x left
[14:56] *** ryn1x joined
[14:56] *** thunktone left
[14:57] *** mcmillhj joined
[14:58] *** thunktone joined
[14:59] *** traxex left
[14:59] *** traxex joined
[15:03] *** ptlmrch left
[15:03] *** llfourn joined
[15:04] *** mr-foobar left
[15:05] *** ryn1x left
[15:05] *** ryn1x joined
[15:07] *** okl left
[15:08] *** mr-foobar joined
[15:08] *** patrickz left
[15:14] *** ryn1x left
[15:15] *** ryn1x joined
[15:16] *** zakharyas1 joined
[15:19] *** ryn1x left
[15:21] *** llfourn left
[15:22] *** cdg joined
[15:22] *** cdg left
[15:23] *** cdg joined
[15:25] *** cdg_ joined
[15:29] *** cdg left
[15:29] *** domidumont left
[15:31] *** W4RL0RD left
[15:31] *** dogbert2 left
[15:33] *** zakharyas left
[15:34] *** Piotr_ joined
[15:34] *** Wiertek joined
[15:35] *** Xal left
[15:35] *** mr-foobar left
[15:38] *** Xal joined
[15:38] *** mr-foobar joined
[15:45] *** pmurias left
[15:47] *** pmurias joined
[15:49] *** kid51 left
[15:51] *** HoboWithAShotgun left
[15:53] *** dogbert2 joined
[15:55] *** johnjohn101 joined
[15:56] *** abraxxa left
[16:03] *** mcmillhj left
[16:04] *** troys joined
[16:06] *** Cabanossi left
[16:06] *** robertle left
[16:07] *** Cabanossi joined
[16:10] *** araraloren left
[16:13] *** itaipu joined
[16:16] *** ShalokShalom_ joined
[16:17] *** mcmillhj joined
[16:19] *** ShalokShalom left
[16:22] *** mcmillhj left
[16:23] *** ShalokShalom_ is now known as ShalokShalom

[16:24] *** mcmillhj joined
[16:24] *** zakharyas1 left
[16:24] *** Wiertek left
[16:25] *** Piotr_ left
[16:27] *** melezhik_ joined
[16:27] *** HoboWithAShotgun joined
[16:27] *** ryn1x joined
[16:28] <melezhik_> Hi Perl6 folks, http://dev.to - seems very cool dev blog site, I encourage everyone involved in Perl6 add some Perl6 related posts here! (As I did ;-) 

[16:29] *** sproctor left
[16:31] *** dakkar left
[16:34] *** skids left
[16:35] *** mr-foobar left
[16:39] *** mr-foobar joined
[16:39] *** melezhik_ left
[16:44] <Geth> ¦ doc: 06e8f698b1 | (Zoffix Znet)++ (committed using GitHub Web editor) | doc/Language/testing.pod6

[16:44] <Geth> ¦ doc: Specify signature of cmp-ok more accurately

[16:44] <Geth> ¦ doc: 

[16:44] <Geth> ¦ doc: - To indicate it can be used to test with `=:=` operator

[16:44] <Geth> ¦ doc: - And that it doesn't interfere with ops that partly rely on

[16:44] <Geth> ¦ doc:     address equivalency, such as `eqv`

[16:44] <synopsebot> Link: https://doc.perl6.org/language/testing

[16:44] <Geth> ¦ doc: 

[16:44] <Geth> ¦ doc: Rakudo impl: https://github.com/rakudo/rakudo/commit/3684384db1

[16:44] <Geth> ¦ doc: Spec: https://github.com/perl6/roast/commit/4bc442622d

[16:45] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/06e8f698b1

[16:45] *** robertle joined
[16:48] *** Wiertek joined
[16:48] *** Piotr_ joined
[16:50] <tyil> HoboWithAShotgun: you were the one who made that pr to the atom plugin to convert ascii ops into unicode ops right? was there a particular reason you also did the greek chars?

[16:54] *** smls joined
[16:55] *** Xal left
[16:57] <smls> m: say "1" ~~ / \d <!before \d> /;

[16:57] <camelia> rakudo-moar 368438: OUTPUT: «Nil␤»

[16:57] <smls> ^^  <!before >  should be able to match at the end of the input string, right?

[16:57] *** ryn1x left
[16:57] *** ryn1x joined
[16:58] *** Xal joined
[17:01] *** wander joined
[17:03] <wander> README.md in doc says, to Building the HTML documentation, we run `make html` and `make run`

[17:04] <wander> i wonder if every time after updating the source code, i should make again, which takes a long time

[17:05] <wander> or the second time `make html` will be fast

[17:05] *** mr-foobar left
[17:06] *** thunktone left
[17:06] *** ryn1x left
[17:07] *** thunktone joined
[17:07] *** ryn1x joined
[17:08] <gfldex> wander: there is some caching going on but it wont make much of a difference

[17:10] <gfldex> wander: look in the Makefile for --parallel=1 and --threads=1 to speed things up

[17:10] *** perllearner89 joined
[17:12] <perllearner89> perl6: multi postfix:<!>(Int $n) { [*] 2..$n }; say "5! is { 5! }";

[17:12] <camelia> rakudo-moar 54507a: OUTPUT: «5! is 120␤»

[17:12] <camelia> ..rakudo-jvm b8eda6: OUTPUT: «Error while reading '/home/camelia/p6eval-token': No such file or directory at /home/camelia/rakudo-j-inst/bin/eval-client.pl line 10.␤»

[17:14] <perllearner89> perl6: multi postfix:<!>(Int $n) { [*] 2..$n; }; say "5! is { 5! }";

[17:14] <camelia> rakudo-jvm b8eda6: OUTPUT: «Error while reading '/home/camelia/p6eval-token': No such file or directory at /home/camelia/rakudo-j-inst/bin/eval-client.pl line 10.␤»

[17:14] <camelia> ..rakudo-moar 54507a: OUTPUT: «5! is 120␤»

[17:15] *** mr-foobar joined
[17:16] <timotimo> we might want to throw rakudo-jvm out of the perl6 command

[17:17] <wander> gfldex: got it

[17:18] *** llfourn joined
[17:20] <timotimo> perllearner89: you'll get less noisy results if you use "m:" instead of "perl6:"

[17:20] *** setty1 joined
[17:20] *** ryn1x left
[17:21] *** ryn1x joined
[17:23] *** llfourn left
[17:23] *** atroxaper left
[17:26] *** mcmillhj left
[17:27] <perllearner89> m: multi postfix:<!>(Int $n) { [*] 2..$n; }; say "5! is { 5! }"; say "6! is {6!}.";

[17:27] <camelia> rakudo-moar 54507a: OUTPUT: «5! is 120␤6! is 720.␤»

[17:28] <perllearner89> It's weird. On my perl6 version, trying to run `multi postfix:<!>(Int $n) { [*] 2..$n; }; say "5! is { 5! }"; say "6! is {6!}.";` results in a "Negation metaoperator not followed by valid prefix" error.

[17:29] *** gregf_ left
[17:30] *** ryn1x left
[17:30] *** ryn1x joined
[17:30] *** mtj_ left
[17:31] <timotimo> you're running it in the REPL?

[17:31] <timotimo> that poor thing forgets newly defined operators between every line :(

[17:31] *** mcmillhj joined
[17:31] <awwaiid> :(

[17:31] <timotimo> it'll work if you put both statements in the same line with a ; in between

[17:32] <perllearner89> I've tried it on the REPL and as a standalone script and both fail.

[17:32] <timotimo> oh, now that's interesting

[17:33] <perllearner89> Do you know any reason why that might be?

[17:34] <timotimo> hm, can you upload your exact standalone script?

[17:34] <timotimo> oh, also, is your perl6 --version near?

[17:34] <perllearner89> $*PERL is Perl 6 (6.c) and $*VM is moar (2017.09.1.580.g.631.b.3.bf.0.f)

[17:34] <timotimo> ah, yes, that's good

[17:35] *** mr-foobar left
[17:36] *** thunktone left
[17:38] *** thunktone joined
[17:38] <perllearner89> Now that I am trying it again, it is working. It seems that I can't run the REPL and run the script separately or else they confuse each other.

[17:39] *** mr-foobar joined
[17:42] *** mcmillhj left
[17:42] *** mcmillhj joined
[17:43] *** ryn1x left
[17:44] <perllearner89> Okay. Not it is just being weird.

[17:44] <perllearner89> *Now

[17:44] *** ryn1x joined
[17:44] <perllearner89> How do I upload my test script?

[17:45] <tyil> nc cry.nu 9999 < path/to/test.pl

[17:47] <perllearner89> nc cry.nu 9999 < /data/testing/perl6/learning.pl6

[17:47] <timotimo> whoops, cry.nu has had its letsencrypt run out yesterday

[17:47] *** wander left
[17:48] <timotimo> perllearner89: you'd execute that in your shell, and you'll need to have netcat installed, though a simple perl6 one-liner could also do it

[17:48] <tyil> samcv: your cert expired

[17:48] <tyil> timotimo: I reported it, should be fixed soon-ish

[17:48] *** mcmillhj left
[17:49] <tyil> you could use termbin for the time being, I dont know any other trustworthy hosts which such a service running

[17:49] <timotimo> i like sprunge.us

[17:50] <timotimo> cat /data/testing/perl6/learning.pl6 | curl -F 'sprunge=<-' http://sprunge.us

[17:50] <perllearner89> http://sprunge.us/JfDd

[17:51] <shadowpaste> "ilmari" at 217.168.150.38 pasted "You can also use http://fpaste.scsys.co.uk/perl6" (1 line) at http://fpaste.scsys.co.uk/565310

[17:51] *** mcmillhj joined
[17:51] <tyil> trying to curl them gives a 405 error

[17:52] <timotimo> now that's interesting

[17:52] <tyil> wanted to see if they used CF, thats a strong reason for me not to use them :p

[17:52] <tyil> but it seems its hosted by google, which I still dislike

[17:52] <tyil> so not adding it to my article against pastebin

[17:53] *** ryn1x left
[17:53] <perllearner89> http://sprunge.us/BhHX

[17:53] <perllearner89> But that one (http://sprunge.us/BhHX) works fine...

[17:53] <perllearner89> Why the disconnect?

[17:53] *** ryn1x joined
[17:56] <moritz> sorry, what was the minimal example of something that didn't work?

[17:57] <timotimo> somehow the say "\$subref(4,6) is $subref(4,6)"; is breaking it

[17:57] *** emeric left
[17:57] <timotimo> probably the string somehow runs away

[17:57] *** emeric joined
[17:58] <tyil> .tell melezhik nice article on sparrowdo, I might check it out when I have time to spare

[17:58] <yoleaux> tyil: I'll pass your message to melezhik.

[17:58] <timotimo> m: my $subref = -> $a, $b { say $a; }; say "\$foobar(4,6) is $subref(4,6)"; say "test"

[17:58] <camelia> rakudo-moar 54507a: OUTPUT: «4␤$foobar(4,6) is True␤test␤»

[18:00] <Geth> ¦ doc/molecules-patch-2: 1b50a0f943 | (Christopher Bottoms)++ (committed using GitHub Web editor) | doc/Type/IO/Path.pod6

[18:00] <Geth> ¦ doc/molecules-patch-2: File test adverb forms with links to method forms

[18:00] <Geth> ¦ doc/molecules-patch-2: 

[18:00] <Geth> ¦ doc/molecules-patch-2: Also intended to fix broken link to https://docs.perl6.org/type/IO::Path#File_test_operators from https://docs.perl6.org/language/5to6-perlfunc#Filetests. Much was copied from https://docs.perl6.org/type/IO::Path#File_test_operators.

[18:00] <Geth> ¦ doc/molecules-patch-2: review: https://github.com/perl6/doc/commit/1b50a0f943

[18:00] <Geth> ¦ doc: molecules++ created pull request #1598: File test adverb forms with links to method forms

[18:00] <Geth> ¦ doc: review: https://github.com/perl6/doc/pull/1598

[18:01] *** troys is now known as troys_

[18:02] *** mcmillhj left
[18:04] <perllearner89> m: my $sref = { $^x**2 + $^y**2; }; say "\$sref.(4,6) is $sref.(4,6)";

[18:04] <camelia> rakudo-moar 54507a: OUTPUT: «$sref.(4,6) is 52␤»

[18:05] *** mr-foobar left
[18:07] *** mcmillhj joined
[18:09] *** mr-foobar joined
[18:09] *** wander joined
[18:11] <wander> perllearner89: what's your first version of code?

[18:12] <wander> i run the code in http://sprunge.us/BhHX and every thing runs right

[18:12] <perllearner89> http://sprunge.us/JfDd fails to execute and was my first version.

[18:12] <perllearner89> http://sprunge.us/BhHX was my attempt at a minimal version, but doesn't fail.

[18:15] <Geth> ¦ doc/master: 4 commits pushed by (Alex Wander)++, (Patrick Spek)++

[18:15] <Geth> ¦ doc/master: 3b12be9f15 | Rewrite example of alias named signature

[18:15] <Geth> ¦ doc/master: c56ff63dcb | Update Signature.pod6

[18:15] <Geth> ¦ doc/master: f208e65ac0 | Update Signature.pod6

[18:15] <Geth> ¦ doc/master: f09992efcb | Merge pull request #1596 from W4anD0eR96/patch-2

[18:15] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/06e8f698b1...f09992efcb

[18:15] <perllearner89> This is a minimal failing example: http://sprunge.us/HdRI

[18:16] <perllearner89> m: sub my_sub(Int() $x, Int() $y) {     return $x**2 + $y**2; }  my $result = my_sub(4,6); say "\$result is $result";  multi postfix:<!>(Int $n) {     [*] 2..$n; }  say "5! is { 5! }";

[18:16] <camelia> rakudo-moar e13512: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3 Int() $y) {     return $x**2 + $y**2; }7⏏5  my $result = my_sub(4,6); say "\$resul␤    expecting any of:␤        in…»

[18:16] <perllearner89> m: sub my_sub(Int() $x, Int() $y) { return $x**2 + $y**2; }; my $result = my_sub(4,6); say "\$result is $result";  multi postfix:<!>(Int $n) { [*] 2..$n; }; say "5! is { 5! }";

[18:16] <camelia> rakudo-moar e13512: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Negation metaoperator not followed by valid infix␤at <tmp>:1␤------> 3(Int $n) { [*] 2..$n; }; say "5! is { 5!7⏏5 }";␤    expecting any of:␤        infix␤        infix stopper␤»

[18:19] <wander> seems like something wrong with `say`

[18:19] <perllearner89> m: sub my_sub(Int() $x, Int() $y) { return $x**2 + $y**2; }; my $result = my_sub(4,6); say "\$result is $result";  multi postfix:<!>(Int $n) { [*] 2..$n; }; say "5! is ", 5!;

[18:19] <camelia> rakudo-moar e13512: OUTPUT: «$result is 52␤5! is 120␤»

[18:20] <perllearner89> When the code is in an execution block in the string in say, it fails, but when listed as an argument to say, it works.

[18:20] <perllearner89> Why?

[18:20] <wander> if you remove the say before `say "5! is { 5! }";'

[18:20] *** Cabanossi left
[18:20] <wander> then there is no error msg

[18:21] <perllearner89> m: sub my_sub(Int() $x, Int() $y) { return $x**2 + $y**2; }; my $result = my_sub(4,6); say "\$result is $result";  multi postfix:<!>(Int $n) { [*] 2..$n; }; "5! is { 5! }";

[18:21] <camelia> rakudo-moar e13512: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Negation metaoperator not followed by valid infix␤at <tmp>:1␤------> 3:<!>(Int $n) { [*] 2..$n; }; "5! is { 5!7⏏5 }";␤    expecting any of:␤        infix␤        infix stopper␤»

[18:21] <wander> To be exact, the say statement in form `say "\$result is $result"`

[18:21] *** Ven joined
[18:22] <perllearner89> m: sub my_sub(Int() $x, Int() $y) { return $x**2 + $y**2; }; my $result = my_sub(4,6); "\$result is $result";  multi postfix:<!>(Int $n) { [*] 2..$n; }; say "5! is { 5! }";

[18:22] <camelia> rakudo-moar e13512: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Negation metaoperator not followed by valid infix␤at <tmp>:1␤------> 3(Int $n) { [*] 2..$n; }; say "5! is { 5!7⏏5 }";␤    expecting any of:␤        infix␤        infix stopper␤»

[18:22] *** Cabanossi joined
[18:22] *** Ven is now known as Guest70887

[18:22] <wander> maybe relevant to the implementation of say

[18:23] <perllearner89> m: sub my_sub(Int() $x, Int() $y) { return $x**2 + $y**2; }; my $result = my_sub(4,6); "\$result is $result";  multi postfix:<!>(Int $n) { [*] 2..$n; }; "5! is { 5! }";

[18:23] <camelia> rakudo-moar e13512: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Negation metaoperator not followed by valid infix␤at <tmp>:1␤------> 3:<!>(Int $n) { [*] 2..$n; }; "5! is { 5!7⏏5 }";␤    expecting any of:␤        infix␤        infix stopper␤»

[18:23] <perllearner89> Without any reference to `say` it still dies.

[18:23] <wander> yes, you do find it

[18:23] <wander> m:  m: sub my_sub(Int() $x, Int() $y) { return $x**2 + $y**2; }; my $result = my_sub(4,6);  multi postfix:<!>(Int $n) { [*] 2..$n; }; say "5! is { 5! }";

[18:23] <camelia> rakudo-moar e13512: OUTPUT: «5! is 120␤»

[18:24] <wander> m: my $result = 42; say "\$result is $result";  multi postfix:<!>(Int $n) { [*] 2..$n; }; "5! is { 5! }";

[18:24] <camelia> rakudo-moar e13512: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Negation metaoperator not followed by valid infix␤at <tmp>:1␤------> 3:<!>(Int $n) { [*] 2..$n; }; "5! is { 5!7⏏5 }";␤    expecting any of:␤        infix␤        infix stopper␤»

[18:24] <wander> m: my $result = 42; "\$result is $result";  multi postfix:<!>(Int $n) { [*] 2..$n; }; "5! is { 5! }";

[18:24] <camelia> rakudo-moar e13512: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Negation metaoperator not followed by valid infix␤at <tmp>:1␤------> 3:<!>(Int $n) { [*] 2..$n; }; "5! is { 5!7⏏5 }";␤    expecting any of:␤        infix␤        infix stopper␤»

[18:24] *** geekosaur left
[18:25] <Geth> ¦ doc/molecules-patch-2: fc97c3981b | (Christopher Bottoms)++ (committed using GitHub Web editor) | doc/Type/IO/Path.pod6

[18:25] <perllearner89> m: sub my_sub(Int() $x, Int() $y) { return $x**2 + $y**2; }; my $result = my_sub(4,6); say "\$result is $result";  multi postfix:<!>(Int $n) { [*] 2..$n; }; say "5! is { 5!; }";

[18:25] <Geth> ¦ doc/molecules-patch-2: Wrapped lines in proposed changes to 80 characters

[18:25] <Geth> ¦ doc/molecules-patch-2: review: https://github.com/perl6/doc/commit/fc97c3981b

[18:25] <camelia> rakudo-moar e13512: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Negation metaoperator not followed by valid infix␤at <tmp>:1␤------> 3(Int $n) { [*] 2..$n; }; say "5! is { 5!7⏏5; }";␤    expecting any of:␤        infix␤        infix stopper␤»

[18:28] *** Zoffix joined
[18:28] *** wamba left
[18:28] *** wamba joined
[18:28] <Zoffix> This seems to be that Quote lang braid caches Main braid and so it misses on it being modified by the introduction of the new op

[18:29] <Zoffix> m: ""; sub postfix:<!>($) {}; "{ 5! }";

[18:29] <camelia> rakudo-moar e13512: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Negation metaoperator not followed by valid infix␤at <tmp>:1␤------> 3""; sub postfix:<!>($) {}; "{ 5!7⏏5 }";␤    expecting any of:␤        infix␤        infix stopper␤»

[18:29] <Zoffix> m: sub postfix:<!>($) {}; ""; "{ 5! }";

[18:29] <camelia> rakudo-moar e13512: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant string "" in sink context (line 1)␤Use of Nil in string context␤  in block <unit> at <tmp> line 1␤»

[18:30] <perllearner89> m: sub postfix:<!>(Int $n) { [*] 2..$n; }; say "";

[18:30] <camelia> rakudo-moar e13512: OUTPUT: «␤»

[18:30] <perllearner89> m: sub postfix:<!>(Int $n) { [*] 2..$n; }; say ""; say "{ 5! }";

[18:30] <camelia> rakudo-moar e13512: OUTPUT: «␤120␤»

[18:30] <perllearner89> m: say ""; sub postfix:<!>(Int $n) { [*] 2..$n; }; say "{ 5! }";

[18:30] <camelia> rakudo-moar e13512: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Negation metaoperator not followed by valid infix␤at <tmp>:1␤------> 3ix:<!>(Int $n) { [*] 2..$n; }; say "{ 5!7⏏5 }";␤    expecting any of:␤        infix␤        infix stopper␤»

[18:31] <Zoffix> Filed as https://rt.perl.org/Ticket/Display.html?id=132262

[18:31] <perllearner89> Thanks for that.

[18:31] *** Rawriful joined
[18:32] *** ryn1x left
[18:33] *** itaipu left
[18:33] *** ryn1x joined
[18:34] *** mcmillhj left
[18:34] * Zoffix takes a crack at it

[18:34] *** rba left
[18:36] *** rba joined
[18:36] *** darutoko left
[18:38] *** cdg joined
[18:38] * [Coke] waves from $DAYJOB

[18:38] *** Guest70887 left
[18:39] *** itaipu joined
[18:39] <Zoffix> \o

[18:41] <Zoffix> Looks like some bolts were left out during Cursor Match refactor that caused this.

[18:41] *** cdg_ left
[18:41] <Zoffix> Gonna try to fix it later (maybe TimToady would know a hint :))

[18:41] *** mcmillhj joined
[18:41] *** ryn1x left
[18:42] *** geekosaur joined
[18:42] *** cdg left
[18:43] *** eroux joined
[18:45] <Zoffix> my %quote_lang_cache hehe. Looks like a perfect place for bugs to hide at

[18:46] *** mcmillhj left
[18:47] <HoboWithAShotgun> i am doing this: my $handler-name = self.event-to-handler-name( $event ); my $handler = self.^methods.first({ .name ~~ $handler-name }); &($handler)($event);

[18:47] <HoboWithAShotgun> however, besides from being super clumy probably that gives me an error:  P6opaque: no such attribute '$!on-key-press' in type Terminal::Vision::Widgets::TextInput when trying to get a value

[18:48] <Zoffix> Are you using nqp ops?

[18:48] <HoboWithAShotgun> but that can't be, since that attribute is defined in the same role as the method that trows the error

[18:48] <Geth> ¦ doc: 1b50a0f943 | (Christopher Bottoms)++ (committed using GitHub Web editor) | doc/Type/IO/Path.pod6

[18:48] <Geth> ¦ doc: File test adverb forms with links to method forms

[18:48] <Geth> ¦ doc: 

[18:48] <Geth> ¦ doc: Also intended to fix broken link to https://docs.perl6.org/type/IO::Path#File_test_operators from https://docs.perl6.org/language/5to6-perlfunc#Filetests. Much was copied from https://docs.perl6.org/type/IO::Path#File_test_operators.

[18:48] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/1b50a0f943

[18:48] <synopsebot> Link: https://doc.perl6.org/type/IO/Path

[18:48] <Geth> ¦ doc: fc97c3981b | (Christopher Bottoms)++ (committed using GitHub Web editor) | doc/Type/IO/Path.pod6

[18:48] <Geth> ¦ doc: Wrapped lines in proposed changes to 80 characters

[18:48] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/fc97c3981b

[18:48] <Geth> ¦ doc: da19f6742a | (Patrick Spek)++ (committed using GitHub Web editor) | doc/Type/IO/Path.pod6

[18:48] <Geth> ¦ doc: Merge pull request #1598 from perl6/molecules-patch-2

[18:49] <Geth> ¦ doc: 

[18:49] <Geth> ¦ doc: File test adverb forms with links to method forms

[18:49] <Geth> ¦ doc: review: https://github.com/perl6/doc/commit/da19f6742a

[18:51] *** AlexDaniel- joined
[18:52] <Zoffix> m: $ = ""; sub postfix:<♥>($) {42}; try q/"{ 5♥ }"/.EVAL; say $!.^name

[18:52] <HoboWithAShotgun> ah. i  must do &(self.$handler)($event)

[18:52] <camelia> rakudo-moar e13512: OUTPUT: «X::Syntax::Confused␤»

[18:53] <Zoffix> Weird. With my fix I get the same result in $!, but the actual code doesn't die.

[18:53] <Zoffix> I guess it's left over from something

[18:55] *** mcmillhj joined
[18:55] <Zoffix> And `say try q/say "{ 5♥ }"/.EVAL` gives Nil, wheareas `say q/say "{ 5♥ }"/.EVAL` prints result and then True.

[18:57] *** zakharyas joined
[18:58] *** rba_ joined
[19:00] *** rba left
[19:00] *** mcmillhj left
[19:01] *** thou joined
[19:03] *** rba_ left
[19:03] *** ryn1x joined
[19:06] *** kid51 joined
[19:08] *** smls left
[19:09] *** rba joined
[19:09] *** thou left
[19:10] *** kerframil joined
[19:11] *** mcmillhj joined
[19:11] *** wander left
[19:12] <perllearner89> m: say ""; sub postfix:<!>(Int $n) { [*] 2..$n; }; say "{ 5! }";

[19:12] <camelia> rakudo-moar e13512: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Negation metaoperator not followed by valid infix␤at <tmp>:1␤------> 3ix:<!>(Int $n) { [*] 2..$n; }; say "{ 5!7⏏5 }";␤    expecting any of:␤        infix␤        infix stopper␤»

[19:12] *** ryn1x left
[19:13] *** timotimo left
[19:14] *** bdmatatu left
[19:15] *** rba left
[19:16] *** rba joined
[19:16] <Zoffix> TimToady: are you around? Since Big Slang Refactor, Quote braid overly-eagerly caches langs here: https://github.com/rakudo/rakudo/blob/e13512/src/Perl6/Grammar.nqp#L64-L114 Any idea what's a good fix? I could nuke the entire quote cache when installing categoricals ( https://github.com/rakudo/rakudo/blob/e13512/src/Perl6/Grammar.nqp#L4907-L4911 ) but that feels too big a hammer... The cache gets base lang

[19:16] <Zoffix> name from `$l.HOW.name($l)` does that now change differently when mixins happen?

[19:17] <Zoffix> buggable: eco

[19:17] <buggable> Zoffix, Out of 920 Ecosystem dists, 0 have warnings, 9 have errors, and 0 have no tags in META file. See https://modules.perl6.org/update.log for details

[19:17] <Zoffix> ^ lots of dists with JSON errors it seems. Sent a PR to BioInfo already don't got time ATM to send the rest

[19:18] *** thou joined
[19:18] <Zoffix> (search build log for "[error]" to find them)

[19:18] <jnthn> 0 have no tags? :)

[19:18] *** llfourn joined
[19:18] *** mtj_ joined
[19:18] * jnthn looks at a META6.json file of his own that has none :)

[19:20] *** itaipu left
[19:23] <mst> Zoffix: ranguard had a lot of 'fun' with that with the psixdists test runs

[19:23] <Zoffix> :) The bot was never updated to handle the new TODO page ( http://modules.perl6.org/todo/ ) where the warnings about tags were migrated to

[19:23] *** llfourn left
[19:24] <johnjohn101> did perl six slow down development?  seems like rakudo perl was last updated in july

[19:27] <Zoffix> johnjohn101: updated where?

[19:27] <Zoffix> The repo was last updated like an hour ago :)

[19:27] <Zoffix> Latest release was September's third Saturday.

[19:27] <johnjohn101> i'm looking on the webpage

[19:28] <Zoffix> johnjohn101: no, Rakudo Star still gets released quarterly.

[19:28] <Zoffix> No slowdown there.

[19:29] <Zoffix> huggable: star

[19:29] <huggable> Zoffix, Estimated Rakudo Star releases for 2017: .01, .04, .07 & .10

[19:29] <johnjohn101> ok, i thought it was monthly.  july is ok to test with?

[19:29] <Zoffix> johnjohn101: compiler-only is released monthly yeah

[19:29] <Zoffix> huggable: debs

[19:29] <huggable> Zoffix, CentOS, Debian, Fedora and Ubuntu Rakudo packages: https://github.com/nxadm/rakudo-pkg/releases

[19:29] <Zoffix> johnjohn101: July is ok yeah

[19:30] <johnjohn101> thanks for github

[19:30] * Zoffix doesn't see any slowdown in code frequency: https://github.com/rakudo/rakudo/graphs/code-frequency

[19:31] <Zoffix> or I guess this is a better view: https://github.com/rakudo/rakudo/graphs/commit-activity

[19:32] <Zoffix> And the lul in July/August 'cause some devs were vacationing

[19:32] * Zoffix &

[19:33] *** ryn1x joined
[19:36] *** mr-foobar left
[19:38] *** mr-foobar joined
[19:39] *** Aaronepower joined
[19:47] *** perllearner89 left
[19:49] *** ryn1x left
[19:50] *** ryn1x joined
[19:57] *** skids joined
[19:59] *** cdg joined
[20:00] *** eroux left
[20:02] *** cdg_ joined
[20:03] *** ryn1x left
[20:03] *** ryn1x joined
[20:05] *** cdg left
[20:07] *** mr-fooba_ joined
[20:08] *** mr-foobar left
[20:09] *** eroux joined
[20:11] *** Aaronepower left
[20:13] *** kid51 left
[20:14] *** Aaronepower joined
[20:17] *** ryn1x left
[20:17] *** ryn1x joined
[20:26] *** ryn1x left
[20:27] *** ryn1x joined
[20:37] *** perllearner89 joined
[20:40] <HoboWithAShotgun> m: say (1 ... ∞)[* - 1]

[20:40] <camelia> rakudo-moar e13512: OUTPUT: «Cannot .elems a lazy list␤  in block <unit> at <tmp> line 1␤␤»

[20:44] <lizmat> HoboWithAShotgun: what did you expect?  Inf ?

[20:46] <gfldex> Int - 1 sounds about right. Writing that do disk might be tricky tho.

[20:46] <gfldex> *Inf - 1

[20:46] <lizmat> m: say Inf - 1

[20:46] <camelia> rakudo-moar e13512: OUTPUT: «Inf␤»

[20:47] *** andrzejku left
[20:47] <gfldex> m: say so Inf - 1 == Inf;

[20:47] <camelia> rakudo-moar e13512: OUTPUT: «True␤»

[20:48] <HoboWithAShotgun> well perl is wrong there 

[20:48] <HoboWithAShotgun> i think

[20:49] <HoboWithAShotgun> m: sub foo { say 'foo' }; sub bar { say 'bar' }; my &both = &foo ∘ &bar; both()

[20:49] <camelia> rakudo-moar e13512: OUTPUT: «bar␤Too many positionals passed; expected 0 arguments but got 1␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:49] <gfldex> depends a bit if you define Inf as countable or uncountable

[20:49] <HoboWithAShotgun> m: sub foo { say 'foo' }; sub bar { say 'bar' }; my &both = &foo ∘ &bar; both

[20:49] <camelia> rakudo-moar e13512: OUTPUT: «bar␤Too many positionals passed; expected 0 arguments but got 1␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:50] <HoboWithAShotgun> mmh. that should work, shouldn't it?

[20:50] *** Cabanossi left
[20:50] <gfldex> HoboWithAShotgun: no

[20:51] <gfldex> the function combinator got strict requirements on arity

[20:52] *** Cabanossi joined
[20:55] <HoboWithAShotgun> m: sub foo -> $x { say $x }; sub bar { 'bar' }; my &both = &foo ∘ &bar; both

[20:55] <camelia> rakudo-moar e13512: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3sub foo7⏏5 -> $x { say $x }; sub bar { 'bar' }; my␤    expecting any of:␤        new name to be defined␤»

[20:55] <HoboWithAShotgun> m: sub foo($x) { say $x }; sub bar { 'bar' }; my &both = &foo ∘ &bar; both

[20:55] <camelia> rakudo-moar e13512: OUTPUT: «bar␤»

[20:56] <HoboWithAShotgun> ah allright. i read that example wrong. i figured they get just called in sequence and not nested

[20:56] <gfldex> m: my &foo = -> $x { say $x }; sub bar { 'bar' }; my &both = &foo ∘ &bar; both

[20:56] <camelia> rakudo-moar e13512: OUTPUT: «bar␤»

[20:57] <gfldex> that's another docs issue

[20:58] *** nadim_ joined
[20:58] <HoboWithAShotgun> this time they are clear enough- The function composition operator infix:<∘> or infix:<o> combines two functions, so that the left function is called with the return value of the right function

[20:59] <gfldex> it's Callable not a function

[20:59] *** nadim left
[21:00] <gfldex> most of the time the docs say „function“ it should say Callable

[21:00] *** mcmillhj left
[21:00] <gfldex> or Routine, where a Block wont work

[21:00] *** perllearner89 left
[21:01] *** troys_ is now known as troys

[21:03] *** timo joined
[21:03] *** timo is now known as timotimo

[21:03] *** Piotr_ left
[21:03] *** Wiertek left
[21:12] *** TEttinger joined
[21:14] *** ryn1x left
[21:15] *** ryn1x joined
[21:16] <HoboWithAShotgun> m: say (1, 2, 2, 3).Bag (<+) (3, 2, 1).Bag;

[21:16] <camelia> rakudo-moar e13512: OUTPUT: «False␤»

[21:16] <HoboWithAShotgun> m: say (1, 2, 2, 3).Bag (>+) (3, 2, 1).Bag;

[21:16] <camelia> rakudo-moar e13512: OUTPUT: «True␤»

[21:20] *** llfourn joined
[21:20] <HoboWithAShotgun> m: ( ( 0, 3 ... Inf ) (&) ( 0, 5 ... Inf) )[^100]

[21:20] <camelia> rakudo-moar e13512: OUTPUT: «Cannot coerce a lazy list onto a Set␤  in block <unit> at <tmp> line 1␤␤»

[21:20] <Zoffix> "well perl is wrong there"  we follow IEEE :)

[21:21] <Zoffix> (in most places)

[21:22] *** wamba left
[21:22] <HoboWithAShotgun> i'm not a mathematician, but Inf(R) > Inf(N), that I know. Not sure if that means Inf - 1 < Inf

[21:22] <HoboWithAShotgun> probably not

[21:22] <Zoffix> In math, maybe. In computers nope

[21:23] <Zoffix> Just like dividing by zero is valid

[21:23] <Zoffix> m: say (1/0).Num

[21:23] <camelia> rakudo-moar e13512: OUTPUT: «Inf␤»

[21:23] <Zoffix> m: say (-1/0).Num

[21:23] <camelia> rakudo-moar e13512: OUTPUT: «-Inf␤»

[21:23] <HoboWithAShotgun> i had a discussion over at #math the other day about exactly that

[21:23] <Zoffix> s/computers/IEEE/;

[21:24] *** ryn1x left
[21:24] <HoboWithAShotgun> and it's wrong. dividing by zero should die fatally

[21:24] *** ryn1x joined
[21:25] * AlexDaniel- shrugs

[21:25] <Zoffix> :) and should a rocket explode if one of its sensors failed to read a value? :)

[21:25] *** llfourn left
[21:26] *** zakharyas left
[21:26] * Zoffix &

[21:26] *** Zoffix left
[21:26] *** releasable6 left
[21:26] *** releasable6 joined
[21:27] <HoboWithAShotgun> that's probably going to happen anywhay when said rocket opens the fuel injectors infinitly wide

[21:27] *** TEttinger left
[21:29] <HoboWithAShotgun> I mean I wouldn't mind if 1/0 returned a Failure, but Inf , no, that's a wrong decision

[21:30] <AlexDaniel-> HoboWithAShotgun: well, at what point do you want your rocket to explode?

[21:30] <AlexDaniel-> for example

[21:30] <AlexDaniel-> m: say (1/0).nude

[21:30] <camelia> rakudo-moar e13512: OUTPUT: «(1 0)␤»

[21:30] <AlexDaniel-> that's alright

[21:30] <AlexDaniel-> m: say 1/0

[21:30] <camelia> rakudo-moar e13512: OUTPUT: «Attempt to divide 1 by zero using div␤  in block <unit> at <tmp> line 1␤␤»

[21:30] <AlexDaniel-> but this is not

[21:32] <HoboWithAShotgun> ah, allright

[21:33] *** ryn1x left
[21:33] *** setty1 left
[21:34] *** ryn1x joined
[21:34] *** thou left
[21:38] *** dogbert17 left
[21:40] *** TEttinger joined
[21:42] *** ryn1x left
[21:43] *** thou joined
[21:43] *** ryn1x joined
[21:43] <samcv> tyil, thanks. restarted nginx

[21:44] <samcv> had a new cert but it hadn't loaded

[21:45] <tyil> ^_^

[21:47] *** rba left
[21:48] *** mcmillhj joined
[21:49] *** rba joined
[21:50] *** pecastro left
[21:52] *** ryn1x left
[21:52] *** ryn1x joined
[21:52] *** mcmillhj left
[21:53] *** timotimo left
[21:53] <samcv> tyil, added `--post-hook "nginx -t && systemctl restart nginx"` to the cronjob

[21:53] <tyil> hot

[21:53] *** thunktone left
[21:54] <samcv> oh actually. changing that to --deploy-hook since i only want it to run when cert has changed

[21:58] *** mson left
[22:00] *** johnjohn101 left
[22:00] *** epony joined
[22:01] *** rba_ joined
[22:03] *** rba left
[22:04] *** mcmillhj joined
[22:05] *** ryn1x left
[22:05] *** timo1 joined
[22:05] *** timo1 is now known as timotimo

[22:06] *** ryn1x joined
[22:07] *** timotimo left
[22:09] *** mcmillhj left
[22:09] *** timo1 joined
[22:09] *** timo1 is now known as timotimo

[22:13] *** rindolf left
[22:16] *** pmurias left
[22:16] *** rba joined
[22:18] *** rba_ left
[22:19] *** mcmillhj joined
[22:19] *** markldevine joined
[22:20] *** markldevine left
[22:22] *** konsolebox left
[22:22] *** ryn1x left
[22:25] *** mcmillhj left
[22:26] *** greppable6 left
[22:26] *** greppable6 joined
[22:29] *** konsolebox joined
[22:31] *** rba_ joined
[22:33] *** rba left
[22:34] *** buggable left
[22:35] *** Herby_ joined
[22:35] <Herby_> \o

[22:37] *** buggable joined
[22:37] *** ChanServ sets mode: +v buggable

[22:38] *** mcmillhj joined
[22:38] <tyil> o/

[22:38] *** greppable6 left
[22:39] *** greppable6 joined
[22:41] <timotimo>  o

[22:43] *** mcmillhj left
[22:45] *** buggable left
[22:45] *** buggable joined
[22:45] *** ChanServ sets mode: +v buggable

[22:46] *** rba joined
[22:48] *** rba_ left
[22:48] *** Rawriful left
[22:50] *** greppable6 left
[22:50] *** greppable6 joined
[22:51] *** Cabanossi left
[22:52] *** troys is now known as troys_

[22:52] *** Cabanossi joined
[22:53] *** mcmillhj joined
[22:56] *** dogbert2 left
[22:58] *** mcmillhj left
[23:01] *** rba_ joined
[23:02] <Geth> ¦ whateverable: 2f4f1de1b7 | (Aleks-Daniel Jakimenko-Aleksejev)++ | bin/Greppable.p6

[23:02] <Geth> ¦ whateverable: Add support for modules on CPAN and GitLab

[23:02] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/2f4f1de1b7

[23:02] <timotimo> cool

[23:03] <AlexDaniel-> moritz++

[23:03] *** rba left
[23:04] *** mson joined
[23:09] *** epony left
[23:10] <Geth> ¦ whateverable: cce221c01f | (Aleks-Daniel Jakimenko-Aleksejev)++ | bin/Greppable.p6

[23:10] <Geth> ¦ whateverable: Oops

[23:10] <Geth> ¦ whateverable: 

[23:10] <Geth> ¦ whateverable: What is this line doing there? I have no idea.

[23:10] <Geth> ¦ whateverable: It looked legit so I didn't notice…

[23:10] <Geth> ¦ whateverable: review: https://github.com/perl6/whateverable/commit/cce221c01f

[23:11] *** mcmillhj joined
[23:15] *** troys_ is now known as troys

[23:15] *** traxex left
[23:15] *** mcmillhj_ joined
[23:16] *** mcmillhj left
[23:17] *** mcmillhj joined
[23:18] *** nadim_ left
[23:20] *** mcmillhj_ left
[23:20] *** traxex joined
[23:21] *** lucs left
[23:21] *** thou left
[23:22] *** llfourn joined
[23:25] *** mcmillhj_ joined
[23:27] *** llfourn left
[23:29] *** skids left
[23:30] *** mcmillhj_ left
[23:33] *** TEttinger left
[23:38] *** mcmillhj_ joined
[23:38] *** Khisanth left
[23:41] *** TEttinger joined
[23:43] *** mcmillhj_ left
[23:49] *** mcmillhj_ joined
[23:50] *** mcmillhj left
[23:51] *** Cabanossi left
[23:51] *** tushar joined
[23:52] *** Cabanossi joined
[23:54] *** mcmillhj_ left
[23:56] *** mcmillhj joined
[23:57] *** Khisanth joined
[23:59] *** tardisx left
