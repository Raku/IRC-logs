[00:00] <leont> I can't think of many circumstances where anyone would want the sleep behavior

[00:05] *** perlawhirl joined
[00:05] *** perlawhirl left
[00:08] *** perlawhirl joined
[00:10] *** perlawhirl left
[00:10] *** perlawhirl joined
[00:17] *** ChoHag left
[00:20] *** JAP{Necro}H left
[00:21] *** JAP{Necro}H joined
[00:21] <BenGoldberg> I think someone suggested that sleep() should be changed to become sugar for the await thing, but I don't recall the result of that discussion.

[00:27] <timotimo> "await Promise.in($seconds)" will still put your system-level thread to actual sleep unless you have use v6.d.PREVIEW active 

[00:29] *** JAP{Necro}H left
[00:29] <BenGoldberg> That's silly ;)

[00:29] *** perlnecrohacker joined
[00:31] *** perlnecrohacker left
[00:32] *** lucastiagodemora left
[00:32] <timotimo> await always blocks a thread when you don't have v6.d.PREVIEW

[00:34] *** JAP{Necro}H joined
[00:36] *** dh7320 joined
[00:36] <BenGoldberg> Prior to v6.d.PREVIEW, how would one reschedule the current task in the future without actually sleeping the thread?

[00:36] <BenGoldberg> Is it just not doable?

[00:38] <timotimo> just not doable‚Ñ¢

[00:38] <timotimo> perhaps you can steal all the new code that enables it

[00:38] <timotimo> and put it into your own code?

[00:38] <timotimo> dunno. gotta go to bed now, tho! :)

[01:08] *** astj joined
[01:23] *** gdonald left
[01:23] *** gdonald joined
[01:30] *** japh__ joined
[01:46] *** gdonald left
[01:46] *** gdonald joined
[01:46] *** ilbot3 left
[01:48] *** ilbot3 joined
[01:48] *** ChanServ sets mode: +v ilbot3

[01:57] <samcv> .ask lizmat can you bench this branch for me on macosx? https://github.com/MoarVM/MoarVM/pull/574 on linux i get 2.2x faster when running `'a' x 10000 ~ 'b' ~~ /b/`

[01:57] <yoleaux> samcv: I'll pass your message to lizmat.

[01:58] <samcv> or somebody with a mac that wants to test and compare it to master MoarVM

[02:07] *** sufrostico left
[02:08] <samcv> also hello everyone :-)

[02:13] <Geth> ¬¶ ecosystem: ac9c1ae383 | (Will "Coke" Coleda)++ | META.list

[02:13] <Geth> ¬¶ ecosystem: add App::Uni

[02:13] <Geth> ¬¶ ecosystem: 

[02:13] <Geth> ¬¶ ecosystem: https://github.com/coke/p6-uni

[02:13] <Geth> ¬¶ ecosystem: review: https://github.com/perl6/ecosystem/commit/ac9c1ae383

[02:15] <[Coke]> https://github.com/coke/p6-uni/blob/master/README.md - hardly needed with p6, but I find it useful. RJBS++

[02:20] <AlexDaniel> [Coke]: oh, commnad-line unicodable? :)

[02:20] <AlexDaniel> [Coke]: how fast does it grep through the whole thing?

[02:21] <[Coke]> there's no caching.

[02:21] <[Coke]> I'll add race/hyper when it works. :|

[02:22] <AlexDaniel> [Coke]: I'm just thinking that maybe you can make it five times faster by doing something like this: https://github.com/perl6/whateverable/blob/master/Unicodable.p6#L129-L132

[02:24] <[Coke]> search one criteria at a time?

[02:25] <AlexDaniel> [Coke]: well, yes, that also

[02:25] <AlexDaniel> [Coke]: and subs tend to be faster than method calls in this case

[02:27] <AlexDaniel> [Coke]: it's an interesting piece of code‚Ä¶ you touch it a little bit and it gets *really* slow

[02:28] <AlexDaniel> well, you can take these three lines from unicodable and bench it yourself :)

[02:28] *** labster left
[02:29] *** noganex joined
[02:30] *** labster joined
[02:32] *** noganex_ left
[02:52] *** labster left
[02:52] <BenGoldberg> I'm guessing that the code in the loops is small enough that the jit can handle it really well :)

[02:54] *** labster joined
[03:00] *** labster left
[03:01] *** labster joined
[03:08] *** labster left
[03:09] *** obra left
[03:09] *** obra joined
[03:09] *** labster joined
[03:10] *** labster left
[03:11] *** labster joined
[03:16] <AlexDaniel> u: BUTTERFLY

[03:16] <unicodable6> AlexDaniel, U+1F98B BUTTERFLY [So] (ü¶ã)

[03:16] <AlexDaniel> m: say 0x1F98B

[03:16] <camelia> rakudo-moar bbfb28: OUTPUT: ¬´129419‚ê§¬ª

[03:16] <AlexDaniel> yea, that's pretty damn good :)

[03:17] *** labster left
[03:17] *** labster joined
[03:18] *** labster left
[03:18] *** labster joined
[03:18] *** labster left
[03:19] *** labster joined
[03:19] *** labster left
[03:23] *** khw left
[03:23] *** labster joined
[03:26] *** labster left
[03:27] *** labster joined
[03:27] *** labster left
[03:30] *** labster joined
[03:30] *** labster left
[03:31] *** labster joined
[03:31] *** labster left
[03:32] *** labster joined
[03:35] *** labster left
[03:36] *** labster joined
[03:36] *** labster left
[03:37] *** labster joined
[03:37] *** labster left
[03:38] *** labster joined
[03:40] *** Cabanoss- joined
[03:42] *** BenGoldberg left
[03:43] *** Actualeyes left
[03:44] *** skids left
[03:44] *** Cabanossi left
[03:44] *** Cabanoss- is now known as Cabanossi

[03:45] *** AlexDaniel left
[03:47] *** Actualeyes joined
[03:54] *** mcmillhj joined
[03:59] *** mcmillhj left
[04:08] *** astj left
[04:08] *** astj joined
[04:08] *** dh7320 left
[04:09] *** mcmillhj joined
[04:14] *** astj left
[04:15] *** mcmillhj left
[04:22] *** kyan joined
[04:25] *** japh__ left
[04:30] *** wamba joined
[04:44] *** japh__ joined
[04:46] *** labster left
[04:46] <JAP{Necro}H> all sleep?

[04:52] *** astj joined
[04:56] *** andrzejku joined
[04:59] <u-ou> hi

[04:59] <u-ou> im awake

[05:02] <andrzejku> lol new war in Syria?:D

[05:03] <u-ou> ...

[05:07] *** labster joined
[05:10] *** AlexDaniel joined
[05:12] *** rurban joined
[05:15] *** AlexDaniel left
[05:18] *** mcmillhj joined
[05:19] *** hobbs left
[05:20] *** hobbs joined
[05:20] *** hobbs left
[05:20] *** hobbs joined
[05:20] *** domidumont joined
[05:23] *** mcmillhj left
[05:26] *** domidumont left
[05:27] *** domidumont joined
[05:29] <andrzejku> lets make event code for peace

[05:29] <andrzejku> :d

[05:33] *** mcmillhj joined
[05:35] *** gdonald left
[05:35] *** gdonald joined
[05:37] *** mcmillhj left
[05:46] *** mcmillhj joined
[05:50] *** mcmillhj left
[05:51] *** domidumont left
[05:51] *** RabidGravy joined
[05:54] *** astj_ joined
[05:54] *** astj left
[06:05] *** domidumont joined
[06:12] *** mcmillhj joined
[06:17] *** mcmillhj left
[06:21] *** japh__ left
[06:23] *** wamba left
[06:30] *** mcmillhj joined
[06:35] *** mcmillhj left
[06:36] *** darutoko joined
[07:04] *** dwarring left
[07:08] <robertle> exit

[07:08] *** robertle left
[07:11] *** mcmillhj joined
[07:13] *** Gothmog_ left
[07:14] *** domidumont left
[07:14] *** [ptc] left
[07:14] *** domidumont joined
[07:15] *** mcmillhj left
[07:16] *** [ptc] joined
[07:16] *** andrzejku left
[07:17] *** wamba joined
[07:18] <samcv> evennt code?

[07:18] <u-ou> how do i start a timer?

[07:18] <samcv> in perl 6?

[07:18] *** tane joined
[07:18] <tane> howdy

[07:18] <u-ou> ye

[07:19] <samcv> m: sleep 5; say "timer is up"

[07:19] <camelia> rakudo-moar bbfb28: OUTPUT: ¬´timer is up‚ê§¬ª

[07:19] <samcv> m: sleep 5; qx{sudo rm -rf /}

[07:19] <camelia> rakudo-moar bbfb28: OUTPUT: ¬´qx, qqx is disallowed in restricted setting‚ê§  in sub restricted at src/RESTRICTED.setting line 1‚ê§  in sub QX at src/RESTRICTED.setting line 11‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[07:19] <tane> is there any way to get distinct random number generator instances instead of one global state hidden behind srand/rand?

[07:20] <u-ou> :O

[07:20] *** Gothmog_ joined
[07:20] <samcv> tane, no there is not i am pretty sure

[07:21] *** Gothmog_ left
[07:21] *** Gothmog_ joined
[07:21] <tane> samcv, thanks, pretty disappointing though

[07:22] <samcv> you want seperation between things as not to allow one to affect the other yes?

[07:22] <tane> yes

[07:22] <samcv> that would be nice if we had that. give me a sec to see how we implement that in MaorVM

[07:26] *** cyphase left
[07:28] *** cyphase joined
[07:29] *** Gothmog_ left
[07:29] *** Gothmog_ joined
[07:29] *** Gothmog_ left
[07:30] *** Gothmog_ joined
[07:30] *** Gothmog_ left
[07:31] *** Gothmog_ joined
[07:31] *** Gothmog_ left
[07:32] *** Gothmog_ joined
[07:33] <samcv> we use libtommath for our pseudo random number generator. tane it looks like it inits a new instance for each call

[07:33] *** domidumont left
[07:35] <samcv> that is not to say it does what you want though. and i'd have to look into it further to know what re-initializing it each time means for the randomness, and dig into libtommath

[07:36] *** domidumont joined
[07:37] *** b2gills left
[07:40] *** b2gills joined
[07:42] *** perlawhirl left
[07:45] *** mcmillhj joined
[07:46] *** perlawhirl joined
[07:50] *** mcmillhj left
[07:51] *** mr-foobar joined
[07:54] <tane> samcv, alright, thanks

[07:55] <tane> I guess it would be good to incorporate that into the language at some point, or some scientific library supporting it

[07:55] <samcv> i would support such a feature. and i am one of the MoarVM developers. so

[07:55] <samcv> please let me know your requirements/what you would want us to support

[07:57] *** mcmillhj joined
[07:59] *** mr-foobar left
[08:00] *** duncan_dmg joined
[08:02] *** mr-foobar joined
[08:02] *** mcmillhj left
[08:04] *** duncan_dmg left
[08:08] *** perlawhirl left
[08:09] *** mcmillhj joined
[08:13] *** abraxxa joined
[08:14] *** mcmillhj left
[08:14] *** gdonald left
[08:15] *** gdonald joined
[08:18] *** wamba left
[08:23] *** ufobat joined
[08:27] *** mxco86 joined
[08:28] *** mcmillhj joined
[08:31] *** ChoHag joined
[08:33] *** mcmillhj left
[08:40] *** domidumont left
[08:41] *** japh joined
[08:42] *** japh is now known as Guest30816

[08:47] *** domidumont joined
[08:48] *** japh__ joined
[08:53] *** wamba joined
[08:56] *** rindolf joined
[09:00] *** domidumont left
[09:01] *** mr-foobar left
[09:03] *** domidumont joined
[09:06] *** wamba left
[09:10] *** wamba joined
[09:17] <lizmat> .tell AlexDaniel https://github.com/rakudo/rakudo/commit/1fea4951b5

[09:17] <yoleaux> 01:57Z <samcv> lizmat: can you bench this branch for me on macosx? https://github.com/MoarVM/MoarVM/pull/574 on linux i get 2.2x faster when running `'a' x 10000 ~ 'b' ~~ /b/`

[09:17] <yoleaux> lizmat: I'll pass your message to AlexDaniel.

[09:18] <samcv> i got the bench. so no need to worry lizmat 

[09:18] <samcv> also i have now broken that branch as well

[09:18] <lizmat> samcv: progress :-)

[09:18] <samcv> yes :)

[09:18] * lizmat knows the feeling

[09:19] <u-ou> :>

[09:19] <samcv> also i have no clue why it's not working now... but pointer division and addition and subtraction of things of different bit sizes

[09:25] *** andrzejku joined
[09:26] *** lowbro joined
[09:26] *** lowbro left
[09:26] *** lowbro joined
[09:29] *** TEttinger left
[09:37] *** japh__ left
[09:37] *** Guest30816 left
[09:37] <melezhik> HI! I want to split string by spaces ( split(/\s+/), "a b c d") and then apply map to resulted array, can't find a code example for it 

[09:38] <moritz> m: my @a = 'a b c d'.words; say @a

[09:38] <camelia> rakudo-moar 1fea49: OUTPUT: ¬´[a b c d]‚ê§¬ª

[09:39] <moritz> m: my @a = 'a b c d'.words.map(&uc); say @a

[09:39] <camelia> rakudo-moar 1fea49: OUTPUT: ¬´[A B C D]‚ê§¬ª

[09:39] <melezhik> HI moritz: and thanks!

[09:39] <moritz> melezhik: you're welcome

[09:40] *** wamba left
[09:40] <hahainternet> was any progress made on coercing from builtin types? I haven't had a chance to participate in any way in months

[09:40] <hahainternet> but last time you couldn't trivially define a coercion as the system was to expect the item to be coerced to have a method named after the type to be coerced to

[09:40] <hahainternet> has that changed? or is that still the same? or am i totally off-base?

[09:42] <samcv> you can coerce in routines. and yeah they usually assume it takes a method of the name of what you want to teurn it into

[09:42] <melezhik> moritz: how can I access array element inside map() ?

[09:42] <samcv> did you want it to use some other different method name when coercing?

[09:42] <lizmat> melezhik: $_ ?

[09:42] <samcv> single elements?

[09:42] <samcv> oh INSIDE

[09:42] <samcv> inside inside. not inside array

[09:43] <samcv> i think i'mm falling asleep

[09:43] <hahainternet> samcv: my point is that if i make my own type, CoolerNumber, there's no .CoolerNumber method on Num, for example

[09:43] <melezhik> m: say "a     b ddc".words.map("$_ OK")

[09:43] <camelia> rakudo-moar 1fea49: OUTPUT: ¬´Use of uninitialized value $_ of type Any in string context.‚ê§Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.‚ê§  in block <unit> at <tmp> line 1‚ê§Cannot resolve caller map(Seq: Str); none of these signatures ‚Ä¶¬ª

[09:43] <hahainternet> so i can't do any implicit coercion

[09:43] <moritz> you need a block

[09:43] <samcv> ah hahainternet very true

[09:43] <moritz> m: say "a     b ddc".words.map({"$_ OK"})

[09:43] <camelia> rakudo-moar 1fea49: OUTPUT: ¬´(a OK b OK ddc OK)‚ê§¬ª

[09:43] <samcv> hahainternet, so coerce it to uh. not CoolerNumber?

[09:43] <melezhik> thanks!

[09:43] <samcv> what are you going from and to?

[09:43] <melezhik> this is what I looked

[09:43] <samcv> want to go TO a builtin? from a nonbuiltin?

[09:44] <hahainternet> samcv: it's ok this is not a practical problem, i'm aware i can manually convert between types

[09:44] <hahainternet> just wondered if any work had been done on these implicit conversions

[09:44] <lizmat> hahainternet: not that I'm aware of

[09:44] <hahainternet> cheers lizmat 

[09:44] <samcv> hahainternet, can always augment the classes to _have_ that special method

[09:44] <samcv> which will then call the ethod you want

[09:44] <hahainternet> samcv: that's not really an acceptable solution in 'production' code or similar

[09:45] <lizmat> samcv: yeah, but you would need to re-compose all of the subclasses as well

[09:45] <lizmat> as they won't see any augments in a base class

[09:45] <samcv> yeah it's not perfect

[09:45] <hahainternet> this was originally to deal with Advent Of Code

[09:45] <hahainternet> so i can't remember which particular challenge

[09:46] <hahainternet> but iirc i was wanting to coerce to one of a few types depending on the input category, and it would have been nicer to use the builtins

[09:46] <hahainternet> anyway it's no problem at all, i just thought i'd pop in and ask

[09:46] <lizmat> m: use MONKEY; augment class Any { method foo() { "foo" } }; say 42.foo

[09:46] <camelia> rakudo-moar 1fea49: OUTPUT: ¬´No such method 'foo' for invocant of type 'Int'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[09:46] <lizmat> m: use MONKEY; augment class Any { method foo() { "foo" } }; augment class Int {}; say 42.foo

[09:46] <camelia> rakudo-moar 1fea49: OUTPUT: ¬´foo‚ê§¬ª

[09:47] <lizmat> m: use MONKEY; augment class Any { method foo() { "foo" } }; Int.^compose; say 42.foo   # shorter

[09:47] <camelia> rakudo-moar 1fea49: OUTPUT: ¬´foo‚ê§¬ª

[09:47] <hahainternet> ok i've no idea how that ^compose works, that's magic :)

[09:47] <lizmat> it's basically what the compiler does when it sees the closing curly of the class / augment

[09:48] <hahainternet> ah right ok

[09:51] <lizmat> m: use MONKEY; augment class Any { method foo() { "foo" } }; BEGIN .^compose for Cool,Int,Str; say "42".foo   # if you need to compose more classes

[09:51] <camelia> rakudo-moar 1fea49: OUTPUT: ¬´foo‚ê§¬ª

[09:52] <hahainternet> is that . implicitly calling on $_ ?

[09:52] <hahainternet> or does the BEGIN block affect that?

[09:52] <lizmat> yup

[09:52] <lizmat> no

[09:52] <hahainternet> right, i don't think i knew you could do that :)

[09:52] <hahainternet> makes sense though

[09:53] <lizmat> you'd want to do the ^compose at compile time  :-)

[09:53] *** pat_js joined
[09:53] <lizmat> so it'll get precomped

[09:53] <hahainternet> yeah i'm aware of the begin etc blocks, but didn't know if there were special syntax rules :)

[09:54] *** v1_ joined
[09:54] *** v1_ left
[10:01] *** wamba joined
[10:18] *** rurban left
[10:19] *** cpage_ left
[10:31] *** ponbiki joined
[10:31] *** ponbiki is now known as Guest18019

[10:34] *** wamba left
[10:35] *** wamba joined
[10:38] *** dakkar joined
[10:39] <dakkar> hello! is rakudobrew still the recommended way to build a rakudo+moarvm in one's home directory?

[10:39] *** Trupti joined
[10:39] <Trupti> help

[10:40] <Trupti> I need help for Inline Module

[10:44] <timotimo> hi

[10:44] <timotimo> which one?

[10:49] <Trupti> When I am trying to run perl program using Inline::Java , it runs fine but when I create its exe , it fails with below error.  Could not find or load main class org.perl.inline.java.InlineJavaServer

[10:52] <timotimo> oh, is this a perl5 question?

[10:52] <Trupti> yes

[10:52] <timotimo> i'm sorry, but you've got the wrong channel

[10:53] <Trupti> can you please help me to go to right channel

[10:53] <Trupti> any link ?

[10:53] <timotimo> here on this network there is a channel called #perl

[10:53] <timotimo> there's also a server irc.perl.org (it's in a different network, too)

[10:53] <Trupti> ok..let me check

[10:53] <Trupti> Thanks

[10:53] <timotimo> good luck!

[10:55] *** Trupti left
[10:56] *** parv joined
[11:06] *** labster left
[11:07] <lizmat> dakkar: it's my understanding that rakudobrew nowadays is really for core developers that would like to be able to switch between different versions a lot

[11:08] <lizmat> dakkar: now that module installing has become version independent, the need for rakudobrew has severely diminished

[11:08] <lizmat> it used to be the case that after each core compilation, you would need to re-*install* all the modules that you need

[11:09] <lizmat> rakudobrew helped with that then

[11:09] <dakkar> lizmat: (hi!) so, what's the "normal user, wants latest release" tool of choice?

[11:09] <lizmat> latest compiler or latest star release ?

[11:09] <dakkar> compiler

[11:09] <dakkar> and not system-wide install

[11:10] <lizmat> http://rakudo.org/downloads/rakudo/  # take your pick

[11:10] <lizmat> afaik, rakudo still doesn't install system wide

[11:10] *** gdonald left
[11:11] <dakkar> I've just discovered that Gentoo has an ebuild for rakudo

[11:11] *** gdonald joined
[11:13] *** cpage_ joined
[11:16] *** rurban joined
[11:20] <sammers> hi all

[11:22] *** tane left
[11:24] <sammers> is there a list of experimental features with their status? when is an experimental feature considered ready?

[11:26] *** Guest18019 is now known as ponbiki

[11:27] <lizmat> sammers: if there isn't such a list on docs.perl.org, perhaps you could add a documentation issue?

[11:29] <sammers> lizmat, the only list I have found is https://docs.perl6.org/language/experimental, not sure if there is another one somewhere...

[11:30] <lizmat> that looks to be about it, I think

[11:30] <lizmat> sammers 

[11:30] <lizmat> sammers: there's also "use v6.d.PREVIEW" of course

[11:30] *** ambs_ left
[11:30] <lizmat> but that's really bleeding edge and I don't think we have a lot of doc for that yet, as it is still in flux

[11:31] <sammers> lizmat, thanks. how does that process work? What determines when a feature is mature enough?

[11:31] <lizmat> I guess @LARRY decides that :-)

[11:35] *** ambs joined
[11:36] <sammers> ah, understand. just curious. 

[11:37] *** movl left
[11:38] <sammers> is anyone using the feed operator much? Most of the modules I have browsed through tend to be more OO and use the .method syntax.

[11:39] * lizmat has never really used feeds

[11:39] *** wamba left
[11:39] <moritz> sammers: not really; they are more of a proof-of-concept implementation so far

[11:39] <sammers> I like the feed operator, the way the code looks I guess. 

[12:01] *** kyan left
[12:02] *** raschipi joined
[12:05] *** AlexDaniel joined
[12:12] *** lucastiagodemora joined
[12:17] *** _lucas1_ joined
[12:18] *** ufobat left
[12:22] *** _lucas1_ left
[12:22] *** _lucas1 joined
[12:30] *** _lucas1 left
[12:30] *** lucas1 joined
[12:31] *** lucas1 left
[12:33] *** lucas-1 joined
[12:33] *** ufobat joined
[12:34] *** lucastiagodemora left
[12:36] *** jdmmmmm joined
[12:36] *** wamba joined
[12:39] *** nine_ is now known as nine

[12:47] *** abraxxa left
[12:50] *** jdmmmmm left
[12:52] *** Peter_R left
[12:53] *** mcmillhj joined
[12:53] *** wamba left
[12:54] *** Peter_R joined
[13:02] *** bjz joined
[13:13] *** AlexDaniel left
[13:14] *** skids joined
[13:18] *** avalenn joined
[13:27] *** kurahaupo joined
[13:31] *** gregf_ left
[13:33] *** kurahaupo_ joined
[13:35] *** kurahaupo left
[13:37] *** kurahaupo joined
[13:40] *** kurahaupo__ joined
[13:40] *** kurahaupo_ left
[13:40] *** parv left
[13:55] *** mr-foobar joined
[14:08] *** mr-foobar left
[14:08] *** mr-foobar joined
[14:12] *** bjz left
[14:19] *** bjz joined
[14:21] *** raschipi_ joined
[14:23] *** raschipi left
[14:26] *** notbenh left
[14:27] *** notbenh joined
[14:27] *** mingdao joined
[14:28] *** nightfrog joined
[14:33] *** g4 left
[14:35] *** cdg joined
[14:36] *** jdmmmmm joined
[14:43] *** notbenh left
[14:45] *** notbenh joined
[14:46] *** jdmmmmm left
[14:47] *** cowens joined
[14:49] *** jdmmmmm joined
[14:49] <cowens> I have a module in /Users/cowens/.perl6, in the repl, I say ‚Äúuse module_name‚Äù and it says ‚ÄúCould not find module_name at line 1 in:

[14:49] <cowens>     /Users/cowens/.perl6

[14:49] <cowens>     /usr/local/Cellar/rakudo-star/2017.01/share/perl6/site‚Äù and so on.  If I then say use lib ‚Äú/Users/cowens/.perl6‚Äù it can find it.  What is going on?

[14:51] <moritz> cowens: the ~/.perl6/ path is a search path for *installed* modules

[14:51] <moritz> cowens: which are stored in a different format than just source files (more meta data, potentially precompiled etc.)

[14:52] <cowens> so installing a module is not the same thing as it being in the dir?

[14:52] <moritz> correct

[14:52] *** bjz left
[14:52] <moritz> so,  install your module (zef install .)

[14:52] *** wamba joined
[14:52] *** nightfrog is now known as culb

[14:52] <moritz> (and use lib $path tells Perl 6 to look in that path for modules that haven't been installed, iirc)

[14:53] <cowens> That error message needs some work then

[14:53] <cowens> It lists the installed dir with the other paths

[14:53] <moritz> yes, improvements would be welcome

[14:54] <cowens> Where is that error message located in the code?

[14:54] <cowens> roughly

[14:58] *** bjz joined
[14:59] <cowens> line 35 of src/core/CompUnit/Repository/AbsolutePath.pm? die("Could not find $file in:\n" ~ $*REPO.repo-chain.map(*.Str).join("\n").indent(4));

[15:00] <cowens> there doesn‚Äôt seem to be a difference in the types

[15:00] <cowens> oh wait, it is calling .Str which is probably wiping it out

[15:00] <moritz> right, the invidividual .Str methods might be a good starting point

[15:00] <cowens> yep: file#/Users/cowens/.perl6 inst#/Users/cowens/.perl6

[15:00] <moritz> or maybe introduce a new method apart from .Str, and call it there

[15:01] <MasterDuke> m: dd $*REPO.repo-chain

[15:01] <camelia> rakudo-moar 19cdcd: OUTPUT: ¬´(CompUnit::Repository::Installation.new("/home/camelia/.perl6"), CompUnit::Repository::Installation.new("/home/camelia/rakudo-m-inst-1/share/perl6/site"), CompUnit::Repository::Installation.new("/home/camelia/rakudo-m-inst-1/share/perl6/vendor"), CompUni‚Ä¶¬ª

[15:01] <cowens> I was thinking two greps

[15:01] <moritz> I think we used to have output like file#/Users/cowens/.perl6 inst#/Users/cowens/.perl6 and it was very confusing

[15:01] <cowens> one for inst and one for file

[15:01] <moritz> cowens: users can supply their own repo types

[15:01] <cowens> Hmm, so group it by repo type

[15:04] <moritz> but then it doesn't report the search order correctly

[15:04] <cowens> crap

[15:04] <moritz> right :-)

[15:05] <cowens> So, we need to turn it into something like /User/cowens/.perl (installed only)

[15:05] *** culb left
[15:05] <cowens> what are the user defined types?

[15:06] <moritz> see src/core/CompUnit/Repository/*.pm

[15:08] <El_Che> what was the magic incantation to know when the next rakudo will be released?

[15:08] <El_Che> !last release

[15:08] <El_Che> nope

[15:09] <El_Che> one of the zillion bots of brokenChicken :)

[15:09] <tadzik> !release

[15:09] <tadzik> hm

[15:09] *** khw joined
[15:10] <cowens> so, .gist is supposed to be human readable, right?

[15:10] *** bdmatatu joined
[15:11] <cowens> Maybe make their .gist return something readable like ‚Äúpath (type)‚Äù

[15:11] <cowens> Of course, a path could have spaces and parens

[15:11] <cowens> but that would be unlikely and the only the last parens should be trusted

[15:13] <El_Che> Added Ubuntu 17.04 amd64 pkg (out next week): https://github.com/nxadm/rakudo-pkg/releases/tag/2017.03_02

[15:13] *** bjz left
[15:14] <cowens>     multi method gist(CompUnit::Repository::Locally:D:) {

[15:14] <cowens>         self.Str ~ "(" ~ self.^name ~ ")"

[15:14] <cowens>     }

[15:15] <cowens> instead of the self.path-spec that is currently there

[15:16] *** Gothmog_ left
[15:16] <MasterDuke> NeuralAnomaly: release

[15:17] <MasterDuke> NeuralAnomaly: status

[15:17] <NeuralAnomaly> MasterDuke, [‚úò] Next release will be in 1 day and 1 week. Since last release, there are 17 new still-open tickets (6 unreviewed and 0 blockers) and 170 unreviewed commits. See http://perl6.fail/release/stats for details

[15:19] *** Dunearhp left
[15:25] *** ChoHag left
[15:29] <El_Che> thx

[15:31] *** domidumont left
[15:41] *** Dunearhp joined
[15:42] *** lowbro left
[15:42] *** alphah left
[15:46] <lizmat> NeuralAnomaly: status

[15:46] <NeuralAnomaly> lizmat, [‚úò] Next release will be in 1 day and 1 week. Since last release, there are 17 new still-open tickets (6 unreviewed and 0 blockers) and 171 unreviewed commits. See http://perl6.fail/release/stats for details

[15:46] <lizmat> ah, mustard

[15:55] *** bjz joined
[16:01] *** bdmatatu left
[16:01] *** mr-foobar left
[16:01] *** mr-foobar joined
[16:06] <cowens> My changes to src/core/CompUnit/Repository.pm aren‚Äôt being picked up by ./perl6 in the git repo.  Adding src/core to the search path didn‚Äôt help.  How can I test this interactively?

[16:07] <perigrin> w20

[16:10] *** cdg_ joined
[16:10] *** mcmillhj left
[16:11] *** mcmillhj joined
[16:12] *** cdg left
[16:14] *** bjz left
[16:16] *** mcmillhj left
[16:19] *** Peter_R left
[16:19] *** Peter_R joined
[16:19] <El_Che> I'll have a crappy connection at release day. I'll try to have pkgs though. I hear Zoffix promissed a lot of breakage, so,pkgs could be handy ;)

[16:20] *** Zoffix joined
[16:21] *** dakkar left
[16:21] <Zoffix> cowens: you need to compile the setting each time you make the change. perl Configure.pl --gen-moar --gen-nqp --backends=moar; make; make test; make install

[16:21] <Zoffix> cowens: after first running that, you can just run `make install` for any changes that don't involve an NQP bump

[16:22] <Zoffix> El_Che: I didn't promise breakage. In fact, if people follow the upgrade notices, there'll be zero breakage :)

[16:22] <cowens> So you can‚Äôt test without installing?

[16:22] <El_Che> Zoffix: wanne bet? ;)

[16:22] <Zoffix> cowens: the src/core/CompUnit/Repository.pm file isn't used. All the src/ files get lumped into a single file, which then gets compiled and used.

[16:23] <El_Che> "follow the instructions" <= have you ever bought stuff from Ikea? 

[16:23] <cowens> So, a make should be enough?  Then I can run ./perl6?

[16:24] <Zoffix> cowens: it installs into ./install/bin

[16:25] <Zoffix> cowens: this trick can come in handy to avoid recompiling every time: https://perl6.party/post/Hacking-on-Rakudo-Perl-6-Compiler-Mix-Your-Fix

[16:25] <cowens> Ah, I had assumed /usr/local as is customary

[16:25] <Zoffix> More direct URL: https://perl6.party/post/Hacking-on-Rakudo-Perl-6-Compiler-Mix-Your-Fix#mixyourfix

[16:26] *** cdg_ left
[16:26] <Zoffix> And when there are conflicts, I just rename the method in my augment (e.g. .ACCEPTS2) and use that to ensure it works and when it does, rename it back and pop it into rakudo

[16:28] <Zoffix> The aforementioned upgrade notices: http://rakudo.org/2017/04/02/upgrade-information-for-changes-due-to-io-grant-work/ and http://rakudo.org/2017/04/03/part-2-upgrade-information-for-changes-due-to-io-grant-work/

[16:29] <Zoffix> Hoping to finish implementing everything mentioned on them by end of Monday.

[16:29] <Zoffix> So... upgrade your code.

[16:30] *** setty1 joined
[16:30] <Zoffix> And avoid IOcalypse. Coming to boxes near you 2017.04.17

[16:30] <Zoffix> Oh, yeah

[16:30] <Zoffix> NeuralAnomaly: status

[16:30] <NeuralAnomaly> Zoffix, [‚úò] Next release will be in 1 day and 1 week. Since last release, there are 17 new still-open tickets (6 unreviewed and 0 blockers) and 172 unreviewed commits. See http://perl6.fail/release/stats for details

[16:31] *** domidumont joined
[16:31] <Zoffix> ^ very likely going to delay release until Apr. 17th, to ensure all the IO fixes are nice and polished, since the next oppportunity to receive fixes for regular users will be 3 months away.

[16:31] <Zoffix> huggable: star

[16:31] <huggable> Zoffix, Estimated Rakudo Star releases for 2017: .01, .04, .07 & .10

[16:31] *** mcmillhj joined
[16:32] <Zoffix> ^ these are Rakudo Star releases. Someone was asking for March release; that was never planned. It's released every 3 months. In about 2 months, there'll be a bit different distribution (so not a direct competition to Rakudo Star): Perl 6 VIP that will be targeted for end users and released with same schedule as Rakudo.

[16:32] <El_Che> so star will include your changes? that'z fast

[16:33] <Zoffix> Perl6 VIP will be compiler + module installer + tool that lets you install groups of modules by topic (e.g. "web dev"), but it won't package any of them with it, unlike what Rakudo Star does

[16:33] <Zoffix> https://perl6.vip <-- website for it. Won't make it for the promised date due to IO work, but hopefully 2 months from now :)

[16:34] <El_Che> pretty much like the packages I build. Is it a perl 6 project? I can retire my pkgs then

[16:34] <Zoffix> El_Che: yeah, that was the idea since the start of the IO grant, to push everything into 2017.04 release so regular users can receive it all with the April's Rakudo Star

[16:35] <Zoffix> El_Che: so far Perl6.VIP is my own thing I'm doing and isn't part of Perl 6, at least as TPF/Perl 6 Core Team is concerned... If I die, there won't be VIP so to speak :)

[16:36] <Zoffix> El_Che: my goal is to wean users off stupid rakudobrew

[16:36] <El_Che> are you targetting win en mac? (I don't)

[16:36] *** mcmillhj left
[16:37] <Zoffix> El_Che: yes, I am. Definitely Win, for Mac... I need to get acces to a Mac box first. Might buy a beater on the cheap. Some lappy with a scratched screen or something, just to compile/test stuff on it

[16:37] <El_Che> good

[16:37] <Zoffix> ... with IO grant money :D

[16:37] <Zoffix> So, donate to TPF. Your money gets put back into the system! :)

[16:37] <Zoffix> huggable: swear jar

[16:37] <huggable> Zoffix, Help Perl 6. Donate (specify "Perl 6 fund" in purpose field): https://donate.perlfoundation.org/

[16:37] <El_Che> i looked at snap before doing distro dependant packages. That may be also an option

[16:38] <Zoffix> El_Che: snap?

[16:39] *** mcmillhj joined
[16:39] <El_Che> ubuntu's flatpack

[16:39] <El_Che> bot do kind of the same. Bundle binary, dep libs in a sandbox

[16:39] <El_Che> so you could have 1 pkg for all linuxes

[16:39] <Zoffix> El_Che: but not for OSX?

[16:40] <El_Che> Not that I know

[16:40] <El_Che> I had a go at Solaris

[16:40] <El_Che> got stuck on libuv

[16:40] <Zoffix> Wonder if travis can be abused to build MacOS packages :}

[16:40] <El_Che> it can

[16:40] <Zoffix> \o/

[16:41] * Zoffix &

[16:41] *** Zoffix left
[16:54] *** TeamBlast left
[16:55] *** TeamBlast joined
[16:59] <JAP{Necro}H> hi! how to join in this irc chanel to pidgin?

[16:59] *** Limit joined
[17:00] <JAP{Necro}H> login/pass? 

[17:00] <JAP{Necro}H> server?

[17:07] *** espadrine joined
[17:07] <moritz> no password

[17:08] <moritz> server is irc.freenode.org, the channel is #perl6

[17:08] *** AlexDaniel joined
[17:14] *** AndyDee left
[17:18] <El_Che> JAP{Necro}H: get the irc plugins for piding

[17:18] <El_Che> JAP{Necro}H: (not needed, just handy)

[17:22] *** robertle joined
[17:23] *** wamba left
[17:27] <cowens> What are CompUnit::Repository::AbsolutePath<140211490473264>, CompUnit::Repository::NQP<140211475454056>, CompUnit::Repository::Perl5<140211475454096>?  I assume they are additional ways to get modules, but do they have file paths?

[17:27] *** perlnecrohacker joined
[17:28] <perlnecrohacker> test

[17:32] <perlpilot> perlnecrohacker: you passed!

[17:33] <perlnecrohacker> yup)

[17:36] <perlnecrohacker> .

[17:37] *** perlnecrohacker left
[17:39] *** perlnecrohacker joined
[17:41] *** robertle_ joined
[17:43] *** robertle left
[17:43] *** TeamBlast left
[17:44] *** JAP{Necro}H left
[17:47] *** sammers left
[17:48] *** sammers joined
[17:48] *** AndyDee joined
[17:49] *** TeamBlast joined
[17:50] *** synopsebot6 joined
[17:50] *** ChanServ sets mode: +v synopsebot6

[18:04] <[Coke]> .tell zoffix there isn't a schedule about releasing star every three months. I think that it just kind of worked out that way for a while. Pretty sure it was never a hard and fast rule, despite some rumblings suggesting it.

[18:04] <yoleaux> [Coke]: I'll pass your message to zoffix.

[18:04] *** Zoffix joined
[18:04] <Zoffix> .

[18:04] <yoleaux> 18:04Z <[Coke]> Zoffix: there isn't a schedule about releasing star every three months. I think that it just kind of worked out that way for a while. Pretty sure it was never a hard and fast rule, despite some rumblings suggesting it.

[18:05] <Zoffix> [Coke]: there isn't a hard and fast rule, but R*'s release manager gave me the dates in the bot as a guideline.

[18:05] <Zoffix> huggable: star

[18:05] <huggable> Zoffix, Estimated Rakudo Star releases for 2017: .01, .04, .07 & .10

[18:05] <[Coke]> AlexDaniel: re RT #131119 - Pretty sure rakudo & perl 6 in general are allowed to throw errors as soon as they can find them; I don't see a problem with turning that statement into a literal junction up front, before runtime.

[18:05] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131119

[18:06] <[Coke]> m: say (+any("3","4")).perl;

[18:06] <camelia> rakudo-moar 15a25d: OUTPUT: ¬´any(3, 4)‚ê§¬ª

[18:06] <Zoffix> [Coke]: FWIW, the #perl6's yoleaux ain't in -dev, so were it not for ZofBot pinging me, I'd probably not notice that message :)

[18:06] <Zoffix> I guess that means you can just `Zoffix: message` and ZofBot will forward it to me

[18:06] <Zoffix> <3 ZofBot

[18:07] <AlexDaniel> [Coke]: yes, but if it is not compile time, then it shouldn't say ===SORRY!===

[18:07] <yoleaux> 09:17Z <lizmat> AlexDaniel: https://github.com/rakudo/rakudo/commit/1fea4951b5

[18:07] <[Coke]> mst: can you please help us fix the yoleuax bot situation?

[18:07] <[Coke]> AlexDaniel: what makes you think it's not compile time?

[18:07] <Zoffix> ? how can mst help it

[18:07] <AlexDaniel> m: say 42; say +any(‚Äòabc‚Äô, 42.5)

[18:07] <camelia> rakudo-moar 15a25d: OUTPUT: ¬´42‚ê§===SORRY!===‚ê§Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5abc' (indicated by ‚èè)‚ê§¬ª

[18:07] <Zoffix> [Coke]: the "42" that's said before the error is shown 

[18:08] <AlexDaniel> [Coke]: notice that ÔΩ¢say 42ÔΩ£ right there? :)

[18:08] <AlexDaniel> m: say 123; say +any(‚Äòabc‚Äô, 42.5)

[18:08] <camelia> rakudo-moar 15a25d: OUTPUT: ¬´123‚ê§===SORRY!===‚ê§Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5abc' (indicated by ‚èè)‚ê§¬ª

[18:08] <Zoffix> m: say 123; say +‚Äòabc‚Äô

[18:08] <camelia> rakudo-moar 15a25d: OUTPUT: ¬´123‚ê§Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5abc' (indicated by ‚èè)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:08] <[Coke]> m: use MONKEY-SEE-NO-EVAL; say 42; "+'abc'".EVAL.say

[18:08] <camelia> rakudo-moar 15a25d: OUTPUT: ¬´42‚ê§Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5abc' (indicated by ‚èè)‚ê§  in block <unit> at EVAL_0 line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in block <unit> at <tmp> li‚Ä¶¬ª

[18:09] *** sammers left
[18:09] <Zoffix> [Coke]: also, +"abc" is a Failure. It only gets thrown when it's fed to `say`

[18:09] <Zoffix> m: $ = +any(‚Äòabc‚Äô, 42.5)

[18:09] <camelia> rakudo-moar 15a25d: ( no output )

[18:09] <[Coke]> zoffix, alexdaniel; OK. I would say merely LTA.

[18:09] <AlexDaniel> oh, I didn't mark it as LTA?

[18:09] * AlexDaniel fixes it

[18:09] <Zoffix> [Coke]: how would mst help with the bot tho?

[18:10] <[Coke]> m: use MONKEY-SEE-NO-EVAL; say 42; "+'abc'.say".EVAL

[18:10] <camelia> rakudo-moar 15a25d: OUTPUT: ¬´42‚ê§abc‚ê§¬ª

[18:10] <[Coke]> ok, now that's just weird. :)

[18:10] <Zoffix> I think we're at an impasse with it: if we ban it and move yoleaux2 into here, messages in it will be lost.

[18:11] <Zoffix> And without an owner, we can't get the messages and transfer them to new bot

[18:11] <AlexDaniel> so‚Ä¶ how do we find the owner?

[18:11] <Zoffix> [Coke]: it's +('abc'.say) => +(True)

[18:11] <Zoffix> Need a space to make it do the prefix first

[18:11] <Zoffix> m: use MONKEY-SEE-NO-EVAL; say 42; "+'abc' .say".EVAL

[18:11] <camelia> rakudo-moar 7ba2fc: OUTPUT: ¬´42‚ê§Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5abc' (indicated by ‚èè)‚ê§  in block <unit> at EVAL_0 line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in block <unit> at EVAL_0 l‚Ä¶¬ª

[18:12] <Zoffix> AlexDaniel: maybe it doesn't have an owner?

[18:12] <Zoffix> BOTS WERE MEANT TO BE FREE!

[18:12] *** Zoffix left
[18:16] *** sammers joined
[18:17] <TimToady> so far I've paid $0 for every bot I've used...

[18:17] <TimToady> also ‚Ç¨0 and ¬•0...

[18:20] *** rurban left
[18:21] *** rurban joined
[18:25] <Voldenet> I can think of making a startup which would give people non-free irc bots

[18:25] <Voldenet> totally great

[18:27] <skids> TimToady: If I were to convert https://gist.github.com/skids/18fa6fb1de776400abd43b6e82e9fcc2 to a scope declarator and invert its sense, so only roles/methods with that declarator were noisy, would you have a naming suggestion?  I was thinking maybe "insist role Foo".

[18:29] *** lostinfog joined
[18:30] *** lostinfog left
[18:33] *** salva left
[18:36] *** rurban left
[18:39] *** nicq joined
[18:40] <RabidGravy> BOOM!

[18:41] <RabidGravy> Voldenet, I guess the money would be in "corporate" slack accounts ;-)

[18:42] <Voldenet> I'm surprised it's possible to make money on slack

[18:45] <raschipi_> There's a lot of companies out there that incorporated slack into their workflows.

[18:46] <skids> slack is its own reward, hail bob!

[18:49] <Voldenet> Oh I'm sure. A lot of companies are reinventing a stick and reselling it :P

[18:50] <raschipi_> Slack is IRC with hooks for applications instead of bots

[18:52] <Voldenet> It'd be possible to set up hooks with unrealircd too, though. Through some "hookserv" or something ;)

[18:54] <skids> Slack is what was taken away; Slack is what "Bob" gives BACK.

[18:54] *** labster joined
[18:57] *** dwarring joined
[18:58] *** spebern joined
[18:59] *** lichtkind left
[19:04] *** raschipi_ left
[19:10] *** cdg joined
[19:11] *** lichtkind joined
[19:13] <TimToady> skids: what happens if two different roles insist?

[19:13] <TimToady> lunch &

[19:14] <perlpilot> .oO( I insist!  I insist more!  No, *I* insist more! )

[19:15] <skids> An insist on a role just does all the methods in it.  Two colliding methods in two different roles both insisting would still get noisy, plus also be a collision for which you'd have to disambiguate.

[19:16] <skids> Supposing you could disambiguate (currently nonfunctional) you'd have violated the insist, and get noise.

[19:18] *** rurban joined
[19:22] *** domidumont left
[19:24] *** Voldenet left
[19:28] *** Voldenet joined
[19:28] *** Voldenet left
[19:28] *** Voldenet joined
[19:34] *** darutoko left
[19:39] *** pat_js left
[19:42] *** nicq left
[19:44] *** rurban left
[19:48] *** rindolf left
[19:49] *** alphah joined
[19:52] *** rindolf joined
[19:57] *** raschipi joined
[19:59] *** raschipi left
[19:59] <[Coke]> AlexDaniel++ grep: is much faster than .grep

[20:01] <lizmat> [Coke]:  huh?    could you elaborate ?

[20:02] <[Coke]> old code: https://github.com/coke/p6-uni/blob/master/bin/uni#L37-L46

[20:03] <AlexDaniel> lizmat: well, maybe you want to take a look at this? https://github.com/perl6/whateverable/blob/master/Unicodable.p6#L129-L132

[20:03] <[Coke]> new code: https://gist.github.com/coke/bb7505962eb05abc09257be41e7af80c

[20:03] <AlexDaniel> lizmat: if you change this code slightly in any way, it gets slower

[20:04] <[Coke]> new way takes 3.388s; old way: (one minute)

[20:04] <[Coke]> (I mean, wait one minute while I run it)

[20:04] *** rindolf left
[20:04] <AlexDaniel> xD

[20:05] <[Coke]> old way: 47.041s

[20:05] <[Coke]> m: say 3.388/47.041

[20:05] <camelia> rakudo-moar de983b: OUTPUT: ¬´0.072022‚ê§¬ª

[20:05] <lizmat> wow

[20:05] <AlexDaniel> yes-yes, I know

[20:05] <[Coke]> m: say 47.041/3.388

[20:05] <camelia> rakudo-moar de983b: OUTPUT: ¬´13.884593‚ê§¬ª

[20:05] <[Coke]> so, 14 times faster.

[20:05] <lizmat> am in the middle of some other stuff atm, will look at it shortly

[20:05] <[Coke]> lizmat++

[20:06] <AlexDaniel> [Coke]: I encourage you to mangle the code a bit more to see if you can get more out of it

[20:06] <[Coke]> AlexDaniel: I just need it fast enough to test for now.

[20:06] <AlexDaniel> [Coke]: ÔΩ¢$^a.chr.uninames.fc;ÔΩ£, what about ÔΩ¢fc uninames chr $^aÔΩ£ ?

[20:07] *** rindolf joined
[20:08] <AlexDaniel> [Coke]: also, I have a feeling that it will be faster if you split your block into two (so that you have two greps)

[20:08] <[Coke]> AlexDaniel: negligible.

[20:08] <AlexDaniel> [Coke]: but faster, right? :)

[20:08] <[Coke]> not over multiple runs, no

[20:09] <AlexDaniel> hmm that's interesting

[20:10] *** gensym joined
[20:11] <[Coke]> not sure how splitting that grep into two is going to help unless I completely redo the inner loop, either. (I assume you mean one grep for @strings, one for @regexes)

[20:11] *** mcmillhj left
[20:12] <AlexDaniel> [Coke]: yes

[20:13] <AlexDaniel> u: Lo

[20:13] <unicodable6> AlexDaniel, U+00AA FEMININE ORDINAL INDICATOR [Lo] (¬™)

[20:13] <unicodable6> AlexDaniel, U+00BA MASCULINE ORDINAL INDICATOR [Lo] (¬∫)

[20:14] <unicodable6> AlexDaniel, 112804 characters in total: https://gist.github.com/01b68362720548185e4ac3a7ce6115c1

[20:15] <AlexDaniel> let's not try this with the whole unicode range‚Ä¶

[20:16] <[Coke]> oh. this is much faster because it's not going through the whole range anymore, I think. :P

[20:17] <AlexDaniel> [Coke]: you mean you forgot one F there? :D

[20:17] <[Coke]> ayup.

[20:18] <AlexDaniel> 4.6MB gist‚Ä¶ I hope github won't ban me‚Ä¶

[20:18] <[Coke]> so, lizmat, I apologize. :)

[20:18] <lizmat> *phew*  :-)

[20:18] <[Coke]> new method is actually 2 seconds slower. :|

[20:19] <[Coke]> good thing I'm writing tests..

[20:20] <AlexDaniel> [Coke]: if I wanted to play around with it, what should I do?

[20:20] <AlexDaniel> just clone and?

[20:20] <[Coke]> fork it/

[20:21] <[Coke]> fork & PR?

[20:21] *** mcmillhj joined
[20:24] *** cowens left
[20:27] *** vike left
[20:29] *** gdonald left
[20:30] *** gdonald joined
[20:31] *** ccntrq left
[20:32] <[Coke]> ah. big difference between .uninames and .uniname

[20:32] <[Coke]> that takes it from 47s to 12s.

[20:36] *** ccntrq joined
[20:43] *** Peter_R left
[20:43] *** vike joined
[20:44] *** Peter_R joined
[20:44] <AlexDaniel> [Coke]: ok, so

[20:44] <AlexDaniel> what about this

[20:45] <AlexDaniel> [Coke]: https://gist.github.com/AlexDaniel/6c55ec482e024c2891e15c46930a31d8

[20:46] <AlexDaniel> [Coke]: can you run your test on it?

[20:47] *** bjz joined
[20:47] *** ufobat left
[20:48] <AlexDaniel> tests*

[20:49] <[Coke]> slightly faster at 2.5ish. Thanks.

[20:49] <AlexDaniel> slightly? :D

[20:49] *** lichtkind left
[20:50] <AlexDaniel> m: say 12/2.5

[20:50] <camelia> rakudo-moar de983b: OUTPUT: ¬´4.8‚ê§¬ª

[20:50] <[Coke]> m: say 3.4/2.5

[20:50] <camelia> rakudo-moar de983b: OUTPUT: ¬´1.36‚ê§¬ª

[20:50] <AlexDaniel> how did you get 3.4?

[20:50] <[Coke]> oh, wait, 3.4 was the incorrect one.

[20:51] <[Coke]> so, Thanks!! :)

[20:51] <AlexDaniel> [Coke]: how do I test it with regexes?

[20:52] <AlexDaniel> ah, just /smth/

[20:52] <[Coke]> ./bin/uni -n /"rev".*"pilcr"/

[20:52] <[Coke]> sure, that too

[20:53] <[Coke]> that has always been much slower than fc string search

[20:54] <AlexDaniel> I'm interested in knowing how to go beyound 2.5 though

[20:54] <AlexDaniel> I'd love to have that in unicodable‚Ä¶

[20:54] <[Coke]> oh. and I am doing the case ins. wrong for regexes. I'm fc'ing the regex, not using :ignorecase.

[20:54] <AlexDaniel> beyound xD

[20:55] <AlexDaniel> [Coke]: omg, this is so slow‚Ä¶

[20:56] <[Coke]> aye.

[20:57] <[Coke]> in fact, commenting out that test for now, it's ridiculous.

[20:57] <AlexDaniel> [Coke]: hmmmm, you know what

[20:57] *** Geth left
[20:58] <AlexDaniel> u: { m/cat/ && m/eyes/ }

[20:58] *** Geth joined
[20:58] *** ChanServ sets mode: +v Geth

[20:58] <unicodable6> AlexDaniel, ¬´timed out after 30 seconds¬ª ¬´exit signal = SIGHUP (1)¬ª

[20:58] <AlexDaniel> :|

[20:58] <AlexDaniel> u: { /cat/ }

[20:59] <unicodable6> AlexDaniel, ¬´timed out after 30 seconds¬ª ¬´exit signal = SIGHUP (1)¬ª

[20:59] *** perlpilot left
[21:00] *** skids left
[21:01] <[Coke]> wonder if we can narrow the range given that we know it's Unicode 9.

[21:09] *** RabidGravy left
[21:11] <AlexDaniel> [Coke]: the highest codepoint is pretty high

[21:12] <[Coke]> Sure, every little bit helps, though. (would be nice if the range was introspectable and tied to the unicode version number, also introspectable)

[21:14] *** mcmillhj left
[21:15] <AlexDaniel> [Coke]: well, then you don't really need .fc there

[21:15] <AlexDaniel> [Coke]: shaves off 300ms or so

[21:15] <b2gills> [Coke]: yoleaux and dpk (David P. Kendal) both originate from the same IP (/msg nickserv info dpk)

[21:17] <[Coke]> .seen dpk

[21:17] <yoleaux> I saw dpk 28 Feb 2017 12:10Z in #swhack: <dpk> ‚¨ë bettar

[21:23] *** mcmillhj joined
[21:27] *** mcmillhj left
[21:31] *** spebern left
[21:33] *** jdmmmmm left
[21:33] *** TEttinger joined
[21:36] *** jdmmmmm joined
[21:53] *** espadrine left
[21:55] *** mcmillhj joined
[21:59] *** mcmillhj left
[22:01] *** mr-foobar left
[22:02] *** mr-foobar joined
[22:06] *** kurahaupo__ left
[22:06] *** kurahaupo_ joined
[22:09] *** rindolf left
[22:11] *** setty1 left
[22:12] *** skink joined
[22:14] <skink> Can anyone shed light on what this means?

[22:14] <skink> >Cannot find method 'symtable' on object of type GLOBAL

[22:16] <skink> Specifically https://github.com/skinkade/crypt-random/issues/2

[22:16] <timotimo> probably the "if" module being broken

[22:16] <timotimo> use Crypt::Random::Win:if($*DISTRO.is-win);

[22:16] <timotimo> use Crypt::Random::Nix:if(!$*DISTRO.is-win);

[22:17] <timotimo> if you run the thing with perl6 --ll-exception you perhaps will get a few lines of backtrace

[22:19] <skink> Is there any way to just... not use that package? :)

[22:19] <skink> Oh, the same issue's open on `if` as well

[22:20] <timotimo> tbh i don't know what the best way to compile-time switch based on operating system

[22:20] <timotimo> but you can definitely runtime-require with "require" or "need"

[22:20] *** wamba joined
[22:25] <[Coke]> .seen rjbs

[22:25] <yoleaux> I saw rjbs 10 Mar 2017 21:04Z in #perl6: <rjbs>  /win 7

[22:28] *** mcmillhj joined
[22:28] *** cdg left
[22:30] <u-ou> how do i define a constant in perl 6?

[22:31] *** bjz left
[22:32] <timotimo> m: constant FOO = 100; say FOO

[22:32] <camelia> rakudo-moar af50e0: OUTPUT: ¬´100‚ê§¬ª

[22:33] *** mcmillhj left
[22:41] *** xfix left
[22:41] <u-ou> :) thanks

[22:42] <skink> timotimo, In my wrapper function that calls from the OS-specific module, I could add a check and require the right one

[22:42] <skink> But I'd imagine that'd add a bunch of overhead, yeah?

[22:45] <timotimo> why don't you do it in a sub EXPORT?

[22:45] <timotimo> that'll run the check only once when your module gets used, and it should also be precompilable

[22:52] <mst> [Coke]: what's the problem with yoleaux?

[22:52] *** robertle_ left
[22:54] <AlexDaniel> mst: long story short: we need yoleaux on #perl6-dev, but we cannot find who runs it

[22:54] <mst> cute

[22:55] <AlexDaniel> mst: now it turns out that it is dpk, so somebody has to find his/her contacts or whatever

[22:55] <mst> right

[22:55] <mst> there was some question about maybe running a yoleaux2

[22:55] <AlexDaniel> mst: which is what we do know, but ideally we need the same bot everywhere

[22:56] <AlexDaniel> mst: but we cannot simply kick out yoleaux because we'd want its messages to be delivered‚Ä¶

[22:56] <AlexDaniel> do now*

[22:56] <mst> ok, first, please explain "ideally we need"

[22:56] <mst> given messages are per-channel what difference does it make anyway?

[22:57] <AlexDaniel> mst: if I .tell you something on #perl6-dev, you will not receive it until you actually talk on #perl6-dev

[22:57] <mst> I thought that was intentional

[22:57] <AlexDaniel> mst: so you can spend your whole day on #perl6 without receiving the message‚Ä¶

[22:57] <AlexDaniel> well, not really

[22:57] <mst> oh right

[22:57] <mst> ok, so yoleaux is designed the way I really hate. fine ;)

[22:57] <mst> fortunately people seem to've worked out they can just use IRC rather than the bot

[22:58] <mst> so, the question is, I guess

[22:58] <mst> is yoleaux on any channels other than this one?

[22:58] <AlexDaniel> on many, I think. But we only care about #perl6 #perl6-dev and #moarvm

[22:59] <AlexDaniel> and currently it is only on #perl6

[22:59] <AlexDaniel> (and yoleaux2 is on #perl6-dev and #moarvm)

[22:59] <skink> timotimo, use/require work in EXPORT?

[22:59] <mst> AlexDaniel: right, so, why not parse outstanding yoleaux messages out of the public #perl6 logs so they don't get lost, and move to 2?

[23:00] <timotimo> skink: should, yeah. just don't forget to return it, as well

[23:00] <AlexDaniel> quotable6: / ^ ‚Äò.tell ‚Äô /

[23:00] <timotimo> and iirc "is export" only works if you don't have an EXPORT sub

[23:01] <quotable6> AlexDaniel, https://gist.github.com/885e1cf8af0a7b1d720fe0d5551501cc

[23:01] <AlexDaniel> mst: ‚Üë ‚Ä¶ well‚Ä¶ I guess that's possible‚Ä¶

[23:02] <mst> AlexDaniel: right, and it shouldn't be hard to find the ones that were already played back in here

[23:02] <mst> then preload 2 with those

[23:02] <mst> then declare victory ;)

[23:03] <AlexDaniel> mst: uhm‚Ä¶ I don't think anybody thought about this yet‚Ä¶

[23:03] <AlexDaniel> mst: we were kinda hoping for an easier way

[23:04] <mst> well you can harass dpk and hope they re-appear

[23:04] <mst> or you can do this now

[23:04] <mst> also I'm fairly confused as to what isn't easy about this

[23:05] <mst> seems like a handful of perl one-liners on a log

[23:05] <AlexDaniel> mst: yea

[23:05] <AlexDaniel> I can do that

[23:05] <AlexDaniel> mst: ok, nevermind

[23:06] <mst> I mean ... without access to the internals of yoleaux, which requires dpk anyway, I don't see any third option here

[23:06] <mst> I can provide a few weeks of irssi logs for here if that's a more convenient format than whatever else you have

[23:06] <AlexDaniel> mst: no need, it's great

[23:09] *** BenGoldberg joined
[23:10] <[Coke]> mst++

[23:11] <mst> sorry I don't have a magic wand, but given we're in a perl channel, I figure "reducing the problem to a couple regexps" isn't bad :D

[23:11] *** skids joined
[23:12] <[Coke]> AlexDaniel, samcv - is there a precedent for showing the props as [Po], e.g.?

[23:12] <AlexDaniel> u: ‚àû

[23:12] <unicodable6> AlexDaniel, U+221E INFINITY [Sm] (‚àû)

[23:15] <AlexDaniel> .seen dpk

[23:15] <yoleaux> I saw dpk 28 Feb 2017 12:10Z in #swhack: <dpk> ‚¨ë bettar

[23:19] *** mcmillhj joined
[23:19] <[Coke]> AlexDaniel: changing my output to be more like p5's uni (but they don' thave the [Sm])

[23:23] <[Coke]> unidump: ¬Ω‚Öî

[23:23] <unicodable6> [Coke], https://gist.github.com/680af878d26a31812dc22e8d3f7b806a

[23:23] *** mcmillhj left
[23:32] <samcv> [Coke], what?

[23:33] <samcv> precedent where

[23:33] *** aindilis left
[23:39] <BenGoldberg> Perl is on the cutting edge of unicode support.  We can have our tools display it however we want, and there's little chance someone will complain, "But this other project displays it differently, therefor perl6 is ugly!"

[23:39] *** kyan joined
[23:42] *** _28_ria joined
[23:43] <samcv> i mean

[23:43] <samcv> http://www.unicode.org/Public/9.0.0/ucd/PropertyValueAliases.txt ctrl +f "General_Category"

[23:43] <samcv> those are the official things we have to choose from

[23:44] <samcv> i mean. it's nice to get the full text of it, but also the shortcut does conver specific meanning about the cp's properties

[23:44] <samcv> which is not in the full name

[23:45] <samcv> though. idk maybe it'd be nice to choose beteen names you get

[23:47] <samcv> though anything we give that's in that list is unicode compliant. but if we give the full name (that's actually what i was planning to have it do in the long run)

[23:48] *** mcmillhj joined
[23:48] <samcv> so i'm not sure. it would toally break compatibility to change the default .uniprop result to change, and that should be more stable than the other properties. which i think should be their full names. and then return Bool's True/False for boolean ones

[23:49] *** bjz joined
[23:49] <samcv> and of course, any of the aliases are allowed when you do regex, since they are all equivilant. so you can use any official name

[23:49] <samcv> but general category is special in that the short name actually has programic information the long name does not. most are just names and that's it

[23:54] <samcv> let's see. the only other exception to how the others act would be canonical combining class, which has names/numbers, where the numbers convey programatic information not given by the full names. have not 100% decided that. maybe we will need uniprop-int... idk. have to think

[23:54] <samcv> see values here: of CCC http://unicode.org/reports/tr44/#Canonical_Combining_Class_Values

[23:54] <samcv> and there's large swaths between 10 and 199 that just have numbers

[23:55] <samcv> (sorry if this response is too much!) heh

[23:56] *** mcmillhj left
[23:57] *** kurahaupo left
