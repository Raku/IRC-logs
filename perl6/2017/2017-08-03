[00:00] *** mcmillhj left
[00:02] *** http_GK1wmSU left
[00:02] *** wamba left
[00:07] <zengargoyle> hehe, `p6doc -l` shows zef, `p6doc zef` throws 'Could not find zef at line 0 in:' and lists all the places in the $*REPO 'in sub locate-curli-module ...'

[00:08] <zengargoyle> maybe that's the error for 'zef doesn't have any POD'...

[00:10] *** mcmillhj joined
[00:15] *** mcmillhj left
[00:15] <zengargoyle> but i think maybe the wrappers get in the way also...  most Module show 'No Pod found in ...'

[00:16] * zengargoyle much LTA

[00:22] <zengargoyle> ack '^=' /opt/rakudobrew/moar-nom/install/share/perl6/site/bin/

[00:26] *** skids joined
[00:31] <zengargoyle> barfy error does not change if temporarily remove rakudobrew/bin wrapper or site/bin/wrapper, would expect if it is getting all the way into REPO it would say 'No Pod Found in ..../$HASH' like other modules...

[00:32] *** profden left
[00:35] *** cpage__ joined
[00:35] *** eliasr left
[00:36] *** cpage_ left
[00:36] *** cpage__ is now known as cpage_

[00:41] *** kaare__ left
[00:44] *** troys is now known as troys_

[00:50] *** lookatme joined
[00:55] *** mack[m] left
[00:55] *** mack[m] joined
[00:56] *** lichtkind_ left
[00:56] *** tyil[m] left
[00:56] *** yoleaux left
[00:56] *** lichtkind_ joined
[00:56] *** tyil[m] joined
[00:56] *** lichtkind left
[00:57] *** lichtkind joined
[00:57] *** ijneb joined
[00:58] *** yoleaux joined
[00:58] *** ChanServ sets mode: +v yoleaux

[01:02] <lookatme> morning

[01:03] <Zoffix> \o

[01:04] <ijneb> it's 9pm here, but good morning lookatme!

[01:04] <lookatme> It's 9am here

[01:04] <ijneb> wow, complete opposites

[01:05] <lookatme> :)

[01:05] <ijneb> do you live in China?

[01:06] *** astj joined
[01:06] <lookatme> yeah, and I guess maybe you are American .

[01:06] <ijneb> you're indeed correct

[01:10] *** astj left
[01:14] *** astj joined
[01:20] <SmokeMachine> Why nor camelia perl 6?

[01:21] <Zoffix> hm?

[01:21] <SmokeMachine> Sorry didn’t read the back log and didn’t push the “send” on purpose...

[01:21] <Zoffix> heh

[01:22] <ijneb> Zoffix: are you 6cuts.wordpress.com?

[01:23] <ijneb> 6guts*

[01:24] <Zoffix> ijneb: nope, jnthn++ is

[01:25] <ijneb> ah

[01:31] *** BenGoldberg joined
[01:34] *** mcmillhj joined
[01:35] <ryu0> m: [+] 1,2,3

[01:35] <camelia> rakudo-moar d9f51d: OUTPUT: «Potential difficulties:␤    Useless use of [+] in sink context␤    at <tmp>:1␤    ------> 3<BOL>7⏏5[+] 1,2,3␤»

[01:35] <Zoffix> m: say [+] 1,2,3

[01:35] <camelia> rakudo-moar d9f51d: OUTPUT: «6␤»

[01:35] <ryu0> m: say [+] 1,2,3

[01:35] <camelia> rakudo-moar d9f51d: OUTPUT: «6␤»

[01:35] <ryu0> m: say [-] 1,2,3

[01:35] <camelia> rakudo-moar d9f51d: OUTPUT: «-4␤»

[01:36] <ijneb> didn't know you could do that

[01:36] <ryu0> do what?

[01:36] <ryu0> m: say [/] 1,2,3

[01:36] <camelia> rakudo-moar d9f51d: OUTPUT: «0.166667␤»

[01:36] <ijneb> [operator] <list>

[01:36] *** pharv joined
[01:37] <ryu0> ijneb: http://perl6intro.com/#_reduction_operators

[01:37] <lookatme> m: say [*] 1, 2, 3

[01:37] <camelia> rakudo-moar d9f51d: OUTPUT: «6␤»

[01:37] <Zoffix> m: sub infix:<♥> { " ♥♥$^a♥$^b♥♥ " }; say [♥] 1, 2, 3

[01:37] <camelia> rakudo-moar d9f51d: OUTPUT: « ♥♥ ♥♥1♥2♥♥ ♥3♥♥ ␤»

[01:37] <ryu0> Ah, so it works with any operatorfitting a given pattern.

[01:38] <ryu0> Sounds like a compact version of map reduce.

[01:38] <ijneb> m: [x] 1,2,3

[01:38] <camelia> rakudo-moar d9f51d: OUTPUT: «Potential difficulties:␤    Useless use of [x] in sink context␤    at <tmp>:1␤    ------> 3<BOL>7⏏5[x] 1,2,3␤»

[01:38] <Zoffix> m: sub a-callable-works-too { " ♥♥$^a♥$^b♥♥ " }; say [[&a-callable-works-too]] 1, 2, 3

[01:38] <camelia> rakudo-moar d9f51d: OUTPUT: « ♥♥ ♥♥1♥2♥♥ ♥3♥♥ ␤»

[01:38] <Zoffix> can't have any whitespace inside the `[]` tho

[01:38] <Zoffix> so no [[&{ $^a + $^b }]]

[01:38] *** mcmillhj left
[01:39] <Zoffix> The bot doesn't automatically print values. You need to put `say` or `put` or `print` or `dd` to print stuff

[01:39] <ijneb> m: say [x] 1, 2, 3

[01:39] <camelia> rakudo-moar d9f51d: OUTPUT: «111111␤»

[01:39] <lookatme> m: say [[&say]] 1, 2, 3

[01:39] <camelia> rakudo-moar d9f51d: OUTPUT: «12␤True3␤True␤»

[01:41] <ryu0> m: [lcm] 30, 40, 20

[01:41] <camelia> rakudo-moar d9f51d: OUTPUT: «Potential difficulties:␤    Useless use of [lcm] in sink context␤    at <tmp>:1␤    ------> 3<BOL>7⏏5[lcm] 30, 40, 20␤»

[01:41] <ryu0> m: say [lcm] 30, 40, 20

[01:41] <camelia> rakudo-moar d9f51d: OUTPUT: «120␤»

[01:41] <ryu0> m: say [gcd] 30, 40, 20

[01:41] <camelia> rakudo-moar d9f51d: OUTPUT: «10␤»

[01:42] <BenGoldberg> m: say [[$_]] 1, 2, 3 for { " ♥♥$^a♥$^b♥♥ " };

[01:42] <camelia> rakudo-moar d9f51d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say [[$_]]7⏏5 1, 2, 3 for { " ♥♥$^a♥$^b♥♥ " };␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        stateme…»

[01:42] <BenGoldberg> m: say [[&$_]] 1, 2, 3 for { " ♥♥$^a♥$^b♥♥ " };

[01:42] <camelia> rakudo-moar d9f51d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in bracketed infix; couldn't find final ']' ␤at <tmp>:1␤------> 3say [[&7⏏5$_]] 1, 2, 3 for { " ♥♥$^a♥$^b♥♥ " };␤»

[01:43] <Zoffix> m: say [[&foo]] 1, 2, 3 for my &foo = { " ♥♥$^a♥$^b♥♥ " };

[01:43] <camelia> rakudo-moar d9f51d: OUTPUT: « ♥♥ ♥♥1♥2♥♥ ♥3♥♥ ␤»

[01:44] <Zoffix> It doesn't try to take any old thing there as it's formally ambiguous with the array contructor

[01:44] <ijneb> Why can't I do `[|] True, False, False`

[01:44] <Zoffix> m: say [|] True, False, False

[01:44] <camelia> rakudo-moar d9f51d: OUTPUT: «any(True, False, False)␤»

[01:44] <Zoffix> You can...

[01:45] <BenGoldberg> I think it's very strange that you can use &foo before 'my &foo'.

[01:45] <BenGoldberg> m: say [?|] True, False, False

[01:45] <camelia> rakudo-moar d9f51d: OUTPUT: «True␤»

[01:45] <ijneb> Thanks, that's what I wanted

[01:45] <Zoffix> m: say so [|] True, False, False

[01:45] <camelia> rakudo-moar d9f51d: OUTPUT: «True␤»

[01:45] <ijneb> there are so many ways to do things in perl6

[01:46] <Zoffix> BenGoldberg: it's not really "before" :) It's already known at compile time and gets its value at run time in time.

[01:46] *** ilbot3 left
[01:46] <Zoffix> ijneb: TimToady is the motto!

[01:46] <Zoffix> TimToady => TIMTOWTDI => There's More Than One Way To Do It

[01:47] <Zoffix> Same as there's more than one way say the same thing in English.

[01:47] <ijneb> I like it

[01:47] <Zoffix> :)

[01:47] *** kaare__ joined
[01:47] <Zoffix> m: my $x = 42 if 0; say $x

[01:47] <camelia> rakudo-moar d9f51d: OUTPUT: «(Any)␤»

[01:47] <Zoffix> BenGoldberg: ^ what do you think of that one? :)

[01:48] <BenGoldberg> In perl6, |, &, and ^ create superpositions.  They're really great when they're the right tool for the job, but slightly annoying when you'd expected or intended semantics from, say, C or perl5

[01:48] <Zoffix> Yeah, Rakudo carved its own path, instead of following some other languages just because.

[01:49] <Zoffix> You use Junctions much more often than bitwise ops, so it makes sense to use these symbols for them

[01:49] <BenGoldberg> That construct, imho, should produce a warning, since it looks like an old perl5ism for creating a 'state' variable before the state keyword existed.

[01:49] <ijneb> I'd like for the perl6 userbase to grow more

[01:49] <ijneb> It'd be nice to have a lot more modules

[01:49] <Zoffix> BenGoldberg: I'd love to shove all the perl5ism warnings up some hole...

[01:49] *** mcmillhj joined
[01:50] <BenGoldberg> That's right, why did I write superposition instead of junction :/

[01:50] <Zoffix> All they do is annoy people who are writing proper Rakudo code

[01:50] <Zoffix> m: { say $^LULZ }(42)

[01:50] <camelia> rakudo-moar d9f51d: OUTPUT: «42␤»

[01:50] <Zoffix> m: { say $^L }(42)

[01:50] <camelia> rakudo-moar d9f51d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of $^L variable; in Perl 6 please use Form module␤at <tmp>:1␤------> 3{ say $^L7⏏5 }(42)␤»

[01:50] <Zoffix> No, I don't care what some other language uses $^L for. I'm writing Rakudo, shush :)

[01:51] *** ilbot3 joined
[01:51] *** ChanServ sets mode: +v ilbot3

[01:52] <lookatme> m: { say $^l }(42);

[01:52] <camelia> rakudo-moar 86cb13: OUTPUT: «42␤»

[01:52] <BenGoldberg> m: no warnings 'perl5'; m: { say $^L }(42)

[01:52] <camelia> rakudo-moar 86cb13: OUTPUT: «===SORRY!===␤Don't know how to 'no warnings' just yet␤»

[01:52] <Zoffix> ijneb: that's great! Write modules. Write blog posts. Tell people about how awesome the language is. And the userbase will grow :)

[01:52] <ijneb> how would I do something like 'a'..'c'

[01:52] <lookatme> m: { say $^L }(42);

[01:52] <camelia> rakudo-moar 86cb13: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of $^L variable; in Perl 6 please use Form module␤at <tmp>:1␤------> 3{ say $^L7⏏5 }(42);␤»

[01:52] <Zoffix> ijneb: just like that

[01:52] <ijneb> where it puts a, b, and c into a list

[01:53] <lookatme> m: say 'a' ... 'c'

[01:53] <camelia> rakudo-moar 86cb13: OUTPUT: «(a b c)␤»

[01:53] <lookatme> just like that

[01:54] <ijneb> coooool

[01:55] <perlawhirl> alternatively...

[01:55] <perlawhirl> m: say ('a'...*)[^3]

[01:55] <camelia> rakudo-moar 86cb13: OUTPUT: «(a b c)␤»

[01:55] <perlawhirl> m: say ('a'...*)[^10]

[01:55] <camelia> rakudo-moar 86cb13: OUTPUT: «(a b c d e f g h i j)␤»

[01:56] <Zoffix> Those aren't equivalent tho. Range (the 'a'..'c') increments the ord of the chars, while the Sequence op ('a'…'c') increments $previous-char.ord.succ.chr. It don't matter for 'a' and 'c' but with higher chars the sequence actually has infinite loops in it, because the .succ of a char gets normalized into an *earlier* codepoint

[01:57] *** mcmillhj left
[01:58] <Zoffix> And ('a'...*)[^10] can be written as ('a'...*).head: 10. The indexing caches the Seq, so it keeps all the previous values, while .head makes a new Seq with just the first N items.

[01:58] * Zoffix drops to bed

[02:00] <lookatme> :)

[02:01] *** tokik joined
[02:02] *** noganex_ joined
[02:04] *** noganex left
[02:06] * zengargoyle would also think that if any renaming happened it should just be 'Camelia' or 'Camelia Perl' and if some org own trademark or whatnot to avoid someone putting out 'camelia' compiler....

[02:09] *** mcmillhj joined
[02:10] <zengargoyle> »ö« Perl (prounounced "Camelia Perl").  let the non-unicode world burn.

[02:12] <Zoffix> surely the BUTTERFLY char is the one to make non-unicode world burn

[02:12] <Zoffix> It's even sponsored :)

[02:12] <Zoffix> m: say "\c[BUTTERFLY]"

[02:12] <camelia> rakudo-moar 86cb13: OUTPUT: «🦋␤»

[02:12] <Zoffix> and that looks broken in the logs; I guess they're not 100% fixes :S

[02:12] *** Cabanossi left
[02:12] <Zoffix> *fixed

[02:12] <perlawhirl> Recently in some code, I realised Int:D² is much slower than Int:D × Int:D

[02:13] <perlawhirl> Apart from optimising &infix:<**>, which I'm not smart enough to do...

[02:13] <perlawhirl> would it be worthwhile adding a special case: postfix:<²>(Int:D \a) { a * a }

[02:13] <Zoffix> No

[02:13] <ijneb> does say truncate the length of the printed rats

[02:14] *** Cabanossi joined
[02:15] <Zoffix> incredible: nope, same as `print`

[02:15] <Zoffix> I mean ijneb 

[02:15] *** mcmillhj left
[02:15] <perlawhirl> Zoffix: I trust your judgment, but for my on education can you expand on the why

[02:16] <perlawhirl> briefly :D

[02:17] <Zoffix> ijneb: it won't keep repeating infinitely though, the number of digits you get is 6 if denominator is less than 100_000 or denominator's length + 1 if it ain't

[02:17] <ijneb> m: say pi;

[02:17] <camelia> rakudo-moar 86cb13: OUTPUT: «3.14159265358979␤»

[02:18] <ijneb> does it only have that many digits of pi?

[02:18] *** bwisti left
[02:19] <Zoffix> perlawhirl: "premature optimization is the root of all evil". So what that it's faster? What are the chances that'd be the part of the code that's the bottleneck? Just not a common feature to grow the size of CORE.setting and add more maintenance and more bugs and more possible interactions. If a power instead of multiplication is your bottleneck, you'd write multiplication. 

[02:19] <Zoffix> ijneb: yeah

[02:19] *** bwisti joined
[02:20] <Zoffix> my constant tau = 6.28318_53071_79586_476e0;

[02:20] <Zoffix> my constant pi  = 3.14159_26535_89793_238e0;

[02:20] <Zoffix> my constant e   = 2.71828_18284_59045_235e0;

[02:20] <Zoffix> It's not even a Rat, but a Num

[02:20] <Zoffix> Why? Faster.

[02:20] <ijneb> I see

[02:20] <ijneb> What's the difference between a Rat & a Num?

[02:21] <Zoffix> A Rat is two Ints (numerator and denominator). Num is a native num

[02:21] <Zoffix> m: say .1 + .2 == .3

[02:21] <camelia> rakudo-moar 86cb13: OUTPUT: «True␤»

[02:21] <Zoffix> ^ in many (if not most) languages that'd give False, because they use a num and get floating point noise

[02:22] <ijneb> interesting

[02:23] <Zoffix> You still get it with Rat's when you produce the final single number (the final division of numerator and denominator), but you're not affected by all the floating point noise while doing the operations, because they're all done on those Ints

[02:24] <lookatme> m: say .1.WHAT

[02:24] <camelia> rakudo-moar 86cb13: OUTPUT: «(Rat)␤»

[02:25] <ijneb> so we only use nums for speed?

[02:25] <Zoffix> And memory

[02:26] <BenGoldberg> m: dd pi

[02:26] <camelia> rakudo-moar 86cb13: OUTPUT: «3.14159265358979e0␤»

[02:26] *** mcmillhj joined
[02:26] <BenGoldberg> m: say pi - 3.1415926535897e0;

[02:26] <camelia> rakudo-moar 86cb13: OUTPUT: «9.32587340685131e-14␤»

[02:26] <lookatme> m: say Num.new(0.1) + Num.new(0.2) == Num.new(0.3);

[02:26] <camelia> rakudo-moar 86cb13: OUTPUT: «False␤»

[02:27] <perlawhirl> Zoffix: I understand that logic. I hope the '**' op can be optimised later, but i thought it might be an acceptable interim solution given that - as far as exponentiation goes - the power of 2 is the most common

[02:27] <lookatme> m: my $r = Num.new(0.1) + Num.new(0.2); say Num.new(3.00000001) > $x > Num.new(0.2999999);

[02:27] <camelia> rakudo-moar 86cb13: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$x' is not declared␤at <tmp>:1␤------> 3Num.new(0.2); say Num.new(3.00000001) > 7⏏5$x > Num.new(0.2999999);␤»

[02:27] <lookatme> m: my $r = Num.new(0.1) + Num.new(0.2); say Num.new(3.00000001) > $r > Num.new(0.2999999);

[02:27] <camelia> rakudo-moar 86cb13: OUTPUT: «True␤»

[02:28] <Zoffix> .1e0 is a better way to write a Num

[02:30] <Zoffix> m: say .1e0 + .2e0 === .3e0

[02:30] <camelia> rakudo-moar 86cb13: OUTPUT: «False␤»

[02:30] <ijneb> Why?

[02:30] <Zoffix> Less typing than Num.new(0.1) and also it gets created at compile type

[02:30] <lookatme> They float number defined in IEE754

[02:31] <lookatme> They float number defined in IEEE754

[02:31] <Zoffix> They float number defined in IEEE754-2008

[02:31] <Zoffix> :)

[02:31] <zengargoyle> m: say .1e0 + .2e0 == .3e0

[02:31] <camelia> rakudo-moar 86cb13: OUTPUT: «False␤»

[02:32] <perlawhirl> Zoffix: FWIW, in my own code, changing `n²` to `n * n` reduced runtime from > 2.5s to < 0.5s... so while the optimisation may be premature, it's not insignificant.

[02:32] <zengargoyle> m: say 1e0/3e0 + 2e0/3e0 == 3e0

[02:32] <camelia> rakudo-moar 86cb13: OUTPUT: «False␤»

[02:32] <zengargoyle> m: say 1e0/3e0 + 2e0/3e0 == 1e0

[02:32] <camelia> rakudo-moar 86cb13: OUTPUT: «True␤»

[02:33] *** Ptolemarch left
[02:33] <Zoffix> m: my $x = 42.rand.Int; for ^1000_000 { $ = $x² }; say now - INIT now

[02:33] <MasterDuke> m: say .1e0 + .2e0 == .3e0 # the num version

[02:33] <camelia> rakudo-moar 86cb13: OUTPUT: «3.04596777␤»

[02:33] <camelia> rakudo-moar 86cb13: OUTPUT: «False␤»

[02:33] *** Ptolemarch joined
[02:33] <Zoffix> m: my $x = 42.rand.Int; for ^1000_000 { $ = $x * $x }; say now - INIT now

[02:33] <camelia> rakudo-moar 86cb13: OUTPUT: «0.67628618␤»

[02:33] <zengargoyle> m: say 1e0/3e0 + 2e0/3e0 == .999999999999999999999999999e0

[02:33] <camelia> rakudo-moar 86cb13: OUTPUT: «True␤»

[02:33] <Zoffix> m: my $x = 42.rand.Int; for ^1000_000 { $ = $x ** 2 }; say now - INIT now

[02:33] <camelia> rakudo-moar 86cb13: OUTPUT: «2.8471633␤»

[02:34] <lookatme> Is there a convenience way check Num's precision error ?

[02:34] <MasterDuke> huh, lag on my client and i just now saw Zoffix's num version fly by

[02:34] *** mcmillhj left
[02:34] <lookatme> like |x - y| < 0.00001;

[02:34] <Zoffix> lookatme: use =~= operator

[02:35] <MasterDuke> m: say .1e0 + .2e0 =~= .3e0

[02:35] <camelia> rakudo-moar 86cb13: OUTPUT: «True␤»

[02:35] <Zoffix> m: say .1e0 + .2e0 ≅ .3e0

[02:35] <camelia> rakudo-moar 86cb13: OUTPUT: «True␤»

[02:35] <Zoffix> m: my $*TOLERANCE = 1000000; say .1e0 + .2e0 ≅ 42

[02:35] <camelia> rakudo-moar 86cb13: OUTPUT: «True␤»

[02:35] <Zoffix> :)

[02:36] <ijneb>  Are rats implemented in most modern languages?

[02:36] <ijneb> and used like how they are in perl6

[02:38] <Zoffix> used same as in perl6, yeah in a few modern ones (I forget the names; R I think?). All the other langs probably have a library and either use methods or overload the core ops, if the language allows.

[02:38] * Zoffix &

[02:42] *** Cabanossi left
[02:42] *** mcmillhj joined
[02:44] *** Cabanossi joined
[02:47] *** mcmillhj left
[02:51] *** pharv left
[02:51] <protium> 3.WHAT

[02:53] <protium> m: 3.WHAT

[02:53] <camelia> rakudo-moar 86cb13: ( no output )

[02:54] <protium> m: say 3.WHAT

[02:54] <camelia> rakudo-moar 86cb13: OUTPUT: «(Int)␤»

[02:54] *** jameslenz left
[02:57] *** jameslenz joined
[02:57] *** mcmillhj joined
[02:59] *** noganex joined
[03:02] *** itaipu joined
[03:02] *** mcmillhj left
[03:03] *** noganex_ left
[03:05] *** pharv joined
[03:08] *** pilne left
[03:13] *** mcmillhj joined
[03:17] *** mr-foobar left
[03:18] *** pharv left
[03:19] *** ChoHag left
[03:21] *** mcmillhj left
[03:25] <ryu0> Question. Is it possible we could get camelia to join some other channels as well? We could use a perl6 bot in #learnprogramming and #lpmc too.

[03:25] *** Cabanossi left
[03:27] *** Cabanossi joined
[03:27] *** camelia left
[03:28] *** camelia joined
[03:29] <ryu0> m: say "Hi"

[03:29] *** ChanServ sets mode: +v camelia

[03:29] <camelia> rakudo-moar 86cb13: OUTPUT: «Hi␤»

[03:31] <MasterDuke> ryu0: i don't remember exactly who runs camelia, but you could ask moritz or timotimo (though they're in some european timezones)

[03:31] *** mcmillhj joined
[03:32] <ryu0> MasterDuke: i learned they're already in one of the channels.

[03:32] <MasterDuke> another option would be to ask AlexDaniel if evalable6 (essentially a camelia clone) could join those channels

[03:33] <MasterDuke> ah, cool

[03:35] *** pharv joined
[03:37] *** mcmillhj left
[03:41] <lookatme> A cool idea

[03:43] <zengargoyle> hrm, i don't know... camelia i think is usually HEAD or close.  a bot that was some YYYY.MM release might be better outside of #perl6

[03:44] *** mcmillhj joined
[03:46] *** kent\n left
[03:47] <BenGoldberg> *

[03:48] *** kent\n joined
[03:48] *** aindilis joined
[03:49] *** mcmillhj left
[03:50] <zengargoyle> m: say $*PERL.compiler

[03:50] <camelia> rakudo-moar 86cb13: OUTPUT: «rakudo (2017.07.126.g.86.cb.1363.d)␤»

[03:51] * zengargoyle 's is rakudo (2017.07.54.g.640641876)

[03:52] <zengargoyle> bot in the wild should probably track a released version.....

[03:52] * zengargoyle 's 2¢

[03:59] *** mcmillhj joined
[04:03] *** mcmillhj left
[04:11] *** mcmillhj joined
[04:15] *** itaipu left
[04:16] *** mcmillhj left
[04:26] *** mcmillhj joined
[04:34] *** mcmillhj left
[04:41] *** mcmillhj joined
[04:43] *** mr-foobar joined
[04:44] *** zengargoyle left
[04:46] *** itaipu joined
[04:46] *** mcmillhj left
[04:47] *** entonian joined
[04:48] *** entonian left
[04:48] *** cpage_ left
[04:55] *** Cabanossi left
[04:57] *** Cabanossi joined
[05:08] *** zengargoyle joined
[05:08] *** BenGoldberg left
[05:13] *** mcmillhj joined
[05:14] *** skids left
[05:15] *** Phraeyll joined
[05:18] *** mcmillhj left
[05:21] <moritz> ryu0: both on freenode as well?

[05:23] *** mcmillhj joined
[05:26] *** PotatoGim left
[05:26] *** xtreak joined
[05:27] *** Phraeyll left
[05:28] *** Phraeyll joined
[05:28] *** PotatoGim joined
[05:28] *** mcmillhj left
[05:32] *** Phraeyll left
[05:35] *** mcmillhj joined
[05:40] *** mcmillhj left
[05:41] *** troys_ is now known as troys

[05:47] <ryu0> moritz: yes.

[05:49] *** avalenn joined
[05:51] *** itaipu left
[05:53] *** mcmillhj joined
[05:53] *** lowbro joined
[05:53] *** lowbro left
[05:53] *** lowbro joined
[05:57] *** mcmillhj left
[05:59] *** timeless left
[06:00] *** timeless joined
[06:07] *** espadrine joined
[06:07] *** mcmillhj joined
[06:09] *** camelia left
[06:09] *** camelia joined
[06:10] <moritz> ryu0: the bot should soon join

[06:11] *** ChanServ sets mode: +v camelia

[06:12] *** mcmillhj left
[06:13] *** cpage_ joined
[06:16] <ryu0> ok.

[06:16] <ryu0> moritz: thanks

[06:24] *** Cabanossi left
[06:26] *** espadrine left
[06:27] *** Cabanossi joined
[06:37] *** mcmillhj joined
[06:42] *** mcmillhj left
[06:44] *** troys is now known as troys_

[06:50] <moritz> ryu0: did it work?

[06:50] *** troys_ is now known as troys

[06:51] <lookatme> How to use it ?

[06:52] <moritz> m: say 21 * 2

[06:52] <camelia> rakudo-moar 86cb13: OUTPUT: «42␤»

[06:53] <lookatme> Hmm, that's work

[06:55] <ryu0> moritz: yes.

[06:58] *** |oLa| left
[07:02] *** troys left
[07:04] *** wamba joined
[07:06] *** |oLa| joined
[07:07] *** test1212 joined
[07:10] *** darutoko joined
[07:20] *** mcmillhj joined
[07:20] *** xtreak left
[07:21] *** nattefrost joined
[07:27] *** Cabanossi left
[07:28] *** Cabanossi joined
[07:28] *** mcmillhj left
[07:37] *** dragonX joined
[07:38] <dragonX> p6: say "abracadabra".match(/ A .* A /, :i, :ex );

[07:38] <camelia> rakudo-moar 86cb13: OUTPUT: «()␤»

[07:39] <dragonX> where is :ignore adverb ?

[07:39] *** mcmillhj joined
[07:40] *** pharv left
[07:40] <lookatme> .match not support :i

[07:40] <lookatme> https://docs.perl6.org/routine/match#class_Str

[07:41] <lookatme> I'm not see :i in the document

[07:42] *** dakkar joined
[07:42] <lookatme> dragonX, ^^^

[07:42] <lookatme> p6: say "abracadabra".match(/ :i A .* A /, :ex );

[07:42] <camelia> rakudo-moar 86cb13: OUTPUT: «(｢abracadabra｣ ｢abracada｣ ｢abraca｣ ｢abra｣ ｢acadabra｣ ｢acada｣ ｢aca｣ ｢adabra｣ ｢ada｣ ｢abra｣)␤»

[07:42] <lookatme> p6: say "abracadabra".match(m:/ A .* A /, :ex );

[07:42] <moritz> lookatme: :ignorecase/:i must be attached directly to the regex

[07:42] <camelia> rakudo-moar 86cb13: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Colons may not be used to delimit quoting constructs␤at <tmp>:1␤------> 3say "abracadabra".match(m:7⏏5/ A .* A /, :ex );␤    expecting any of:␤        colon pair (restricted)␤»

[07:42] <lookatme> p6: say "abracadabra".match(m:i/ A .* A /, :ex );

[07:42] <camelia> rakudo-moar 86cb13: OUTPUT: «Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤Cannot resolve caller match(Str: Nil, :ex); none of these signatu…»

[07:43] <moritz> lookatme: rx:i/... / or :i on the inside

[07:43] <lookatme> p6: say "abracadabra".match(rx:i/ A .* A /, :ex );

[07:43] <camelia> rakudo-moar 86cb13: OUTPUT: «(｢abracadabra｣ ｢abracada｣ ｢abraca｣ ｢abra｣ ｢acadabra｣ ｢acada｣ ｢aca｣ ｢adabra｣ ｢ada｣ ｢abra｣)␤»

[07:43] <moritz> lookatme: by the time match() receives the regex, it's already combiled, and too late to change it to match case-insensitive

[07:43] <lookatme> yeah, not `m`, it's `rx`

[07:43] *** mcmillhj left
[07:43] <moritz> see also https://leanpub.com/perl6regex/ :-)

[07:44] <lookatme> m// will automate match with $_

[07:45] <lookatme> https://stackoverflow.com/questions/45327007/why-arent-and-m-exactly-synonymous

[07:46] *** w4and0er96 left
[07:47] *** nadim_ joined
[07:48] *** cptAngry joined
[07:52] *** zakharyas joined
[07:54] *** mcmillhj joined
[07:57] *** Cabanossi left
[07:58] *** robertle left
[07:58] *** Cabanossi joined
[07:59] *** xtreak joined
[08:01] *** rindolf joined
[08:02] *** mcmillhj left
[08:03] *** ijneb left
[08:09] *** andreoss left
[08:12] *** mcmillhj joined
[08:13] *** rindolf left
[08:17] *** mcmillhj left
[08:23] *** xtreak_ joined
[08:26] *** xtreak left
[08:27] *** mcmillhj joined
[08:31] *** mcmillhj left
[08:39] *** dragonX left
[08:42] *** mcmillhj joined
[08:44] *** test1212 left
[08:47] *** mcmillhj left
[08:48] *** thayne joined
[08:49] *** thayne left
[08:52] *** _ramix_ joined
[08:53] *** mcmillhj joined
[08:55] <_ramix_> Hey guys, I've updated this Perl6 module: https://github.com/ramiroencinas/perl6-FileSystem-Capacity but when I try to update this module with zef in my desktop environment, zef still using the older version. I tried to uninstall, nuke and install again, but the result is the same. Any ideas? Thanks!

[08:56] *** RockyBalboa joined
[08:57] <timotimo> _ramix_: might be necessary to change the version in your meta file

[08:57] *** mcmillhj left
[08:58] <timotimo> or perhaps your zef binary and your perl6 binary are from different installations

[08:58] <timotimo> m: .say for $*REPO.repo-chain

[08:58] <camelia> rakudo-moar 86cb13: OUTPUT: «inst#/home/camelia/.perl6␤inst#/home/camelia/rakudo-m-inst-1/share/perl6/site␤inst#/home/camelia/rakudo-m-inst-1/share/perl6/vendor␤inst#/home/camelia/rakudo-m-inst-1/share/perl6␤CompUnit::Repository::AbsolutePath.new(next-repo => CompUnit::Repos…»

[08:58] <timotimo> you can check where your packages come from with this piece of code

[08:58] <timotimo> and then perhaps check the modification dates or something

[08:59] <timotimo> BBL

[08:59] <RockyBalboa> Hello guys! I'm just starting to learn Perl 6 today! :) I have a trivial question. Let's say I have my script file "main.pl". How can I include the module Hello located in "./lib/Hello.pm" ? If I try "use Hello;", it seems "./lib/" in not in my PERL6PATH ? What is the most common idiom to include "./lib" in my lookup path ? Thanks a lot for your help. :)

[09:02] <lookatme> seems like I have the same problem _ramix_ , you can clone the repo and manual install it 

[09:02] *** zostay left
[09:04] *** zostay joined
[09:06] <jnthn> RockyBalboa: One way would be to pass -Ilib to perl6 (before main.pl)

[09:08] <lookatme> RockyBalboa, you can run you main.pl like that: `Perl6 -Ilib ./main.pl`

[09:09] <_ramix_> <lookatme> I have cloned the repo in a test dir and the files are ok (updated). I'll try to do a manual installation.

[09:10] <RockyBalboa> Thanks you very much! Your solution is working. Is there a way to code that directly in my "main.pl" file ? :) 

[09:12] <RockyBalboa> By the way, I'am coming from Ruby, I am very impressed with Perl6! :)

[09:13] <lookatme> RockyBalboa, you can add 'use lib "lib";' before use Hello;

[09:14] <RockyBalboa> Perfect! Thanks a lot lookatme. :)

[09:16] <lookatme> you welcome!

[09:19] *** andreoss joined
[09:24] *** RockyBalboa left
[09:25] *** Cabanossi left
[09:26] <_ramix_> <timotimo> the module version in the meta file is "*" and the output of the code points to c:\rakudo\share\perl6 .\site and .\vendor. The zef location is C:\rakudo\share\perl6\site\bin and this path is included in %PATH%. My environment is Windows 10 with the current rakudostar (2017.07). I detected it the same issue with Windows 7.

[09:28] <_ramix_> With new installations of rakudostar this doesn´t happen.

[09:28] *** Cabanossi joined
[09:31] *** cschwenz joined
[09:32] <cschwenz> i'm having trouble finding this in the docs; in regexes, what is the Perl 6 equivalent for Perl 5's m{ \Q$foo\E }x construct?

[09:33] <moritz> cschwenz: m{ $foo }

[09:33] <cschwenz> really? it doesn't interpolate in regex context?

[09:33] <cschwenz> huh, cool! :-)

[09:33] <moritz> if $foo is a string, it's a literal match

[09:34] <moritz> if you want it to be interpreted as a regex, you need to do m{ <$foo> }

[09:35] <lookatme> and I think more common way is $($foo)

[09:35] *** cschwenz left
[09:36] <lookatme> m: my $r = '#hello'; say "#hello" ~~ /<$r>/;

[09:36] <camelia> rakudo-moar 86cb13: OUTPUT: «5===SORRY!5===␤Regex not terminated.␤at /home/camelia/EVAL_0:1␤------> 3anon regex { #hello}7⏏5<EOL>␤Regex not terminated.␤at /home/camelia/EVAL_0:1␤------> 3anon regex { #hello}7⏏5<EOL>␤Malformed regex␤at /home/camelia/EV…»

[09:36] <lookatme> m: my $r = '#hello'; say "#hello" ~~ /$($r)/;

[09:36] <camelia> rakudo-moar 86cb13: OUTPUT: «｢#hello｣␤»

[09:36] <moritz> https://leanpub.com/perl6regex talks about these things in chapter 4

[09:37] <moritz> m: my $x = '.a'; say 'ba' ~~ / $($x)/

[09:37] <camelia> rakudo-moar 86cb13: OUTPUT: «Nil␤»

[09:37] <moritz> looks like a literal match to me

[09:37] *** TEttinger left
[09:38] <lookatme> Oh, it's literal match

[09:38] <lookatme> sorry

[09:39] *** olinkl joined
[09:46] *** lookatme left
[09:46] *** w4and0er96 joined
[09:52] *** robertle joined
[10:00] *** cschwenz joined
[10:01] *** ijneb joined
[10:05] *** cschwenz left
[10:06] *** astj left
[10:06] *** astj joined
[10:10] *** grondilu left
[10:10] *** wamba left
[10:29] *** xtreak_ left
[10:34] *** xtreak joined
[10:41] *** rindolf joined
[10:41] *** Cabanossi left
[10:43] *** sena_kun joined
[10:43] *** Cabanossi joined
[10:49] *** astj left
[10:49] *** astj joined
[10:50] *** RockyBalboa joined
[10:51] *** astj left
[10:51] *** astj joined
[10:53] *** dakkar left
[10:53] *** dakkar joined
[10:54] <_ramix_> timotimo lookatme: The problem came with the use of "*" in version field at the META6.json. Fixed!! thanks!

[10:54] <timotimo> aha!

[10:54] <timotimo> maybe we should warn about that

[10:56] <_ramix_> with debian was easy, but in windows I needed to uninstall rakudostar, delete all files related to zef and install rakudostar again.

[10:58] *** astj left
[11:02] *** astj joined
[11:08] *** wamba joined
[11:08] *** astj left
[11:09] *** astj joined
[11:10] *** Cabanossi left
[11:13] *** Cabanossi joined
[11:16] *** markmont left
[11:20] *** astj left
[11:21] *** astj joined
[11:24] *** astj left
[11:25] <robertle> is it possible that "zef install . --force-install" does not actually overwrite the installed version, or perhaps fails to flush the precompiled? I make changes to a module, do this but fail to see my changes when using them from another perl6 program...

[11:25] *** mr-fooba_ joined
[11:25] *** melezhik joined
[11:26] *** mr-foobar left
[11:27] <melezhik> Hi! Has anybody experienced  inormous disk write when installing modules with zef? 

[11:27] *** astj joined
[11:28] *** ubastonak joined
[11:28] <melezhik> I am troubleshoting increasing HDD disk write operations, and I  "suspect" zef. But I am not sure, probably someone has already seen such a issues ...

[11:29] <ubastonak> I was browsing around old mailing lists and I found this: http://hpux.connect.org.uk/hppd/hpux/Misc/undump-1.1/ to convert a coredump in an exec. Do you think perl6 could use something akin undump to increase its startup speeds?

[11:29] *** astj left
[11:31] <ubastonak> apparently emacs reduces it's startup time from 5 secs to .5 secs using a similar mechanism (unexec)

[11:38] *** xtreak_ joined
[11:40] *** ubastonak left
[11:40] *** xtreak_ left
[11:41] *** xtreak_ joined
[11:41] *** Cabanossi left
[11:42] *** xtreak left
[11:43] *** Cabanossi joined
[11:44] <ilmari> glibc wants to remove some of the stuff needed for that: https://lwn.net/Articles/673724/

[11:44] *** astj joined
[11:45] *** markmont joined
[11:46] <moritz> I don't have any experience with such stuff, but it sounds I'd be better to wait until stuff is much more stable

[11:47] <_ramix_> timotimo: It would be a good idea

[11:48] *** xtreak_ left
[11:48] *** xtreak joined
[11:53] *** xtreak left
[11:56] *** astj left
[11:58] *** xtreak joined
[12:01] *** raschipi joined
[12:01] *** xtreak left
[12:02] *** xtreak joined
[12:03] *** xtreak left
[12:04] *** xtreak joined
[12:05] *** cschwenz joined
[12:07] *** araraloren joined
[12:08] *** lichtkind_ left
[12:10] *** astj joined
[12:12] <raschipi> m: say 21 * 2

[12:12] <camelia> rakudo-moar 86cb13: OUTPUT: «42␤»

[12:15] *** yoleaux left
[12:20] <araraloren> evening

[12:28] *** Grrrr left
[12:28] *** profan joined
[12:31] *** mcmillhj joined
[12:36] *** AlexDaniel left
[12:42] <andrzejku> hey guys

[12:43] *** xtreak left
[12:43] <raschipi> hello andrzejku and araraloren 

[12:43] <andrzejku> do you know what happend with perlix project?

[12:43] *** sufrostico joined
[12:44] <mcmillhj> Can someone give an example of a use case for 'reversed operators'? 

[12:46] <raschipi> If you want to combine them, for example. If you use a reduce operator to divide, it will do it left to right. But if you want to reduce a list right to left, you'll need the reverse of the operator.

[12:46] *** Grrrr joined
[12:47] <raschipi> m: [/] 45,5,9,3; [R/] 45,5,9,3

[12:47] <camelia> rakudo-moar 86cb13: OUTPUT: «Potential difficulties:␤    Useless use of [/] in sink context␤    at <tmp>:1␤    ------> 3<BOL>7⏏5[/] 45,5,9,3; [R/] 45,5,9,3␤    Useless use of [R/] in sink context␤    at <tmp>:1␤    ------> 3[/] 45,5,9,3; 7⏏5[R/] 45,5,9,3␤»

[12:47] <mcmillhj> hmm ok so like foldl versus foldr

[12:47] <raschipi> m: say [/] 45,5,9,3; say [R/] 45,5,9,3

[12:47] <camelia> rakudo-moar 86cb13: OUTPUT: «0.333333␤0.001481␤»

[12:48] *** lichtkind left
[12:48] <araraloren> m: say 12 / 4; say 4 R/ 12;

[12:48] <camelia> rakudo-moar 86cb13: OUTPUT: «3␤3␤»

[12:54] * [Coke] wonders how bad it would be to actually test doc examples OUTPUT. (security, slowdown of testing...)

[13:00] *** RockyBalboa left
[13:01] *** lichtkind joined
[13:04] *** bwisti left
[13:05] *** tzekid left
[13:05] *** bwisti joined
[13:07] *** baest left
[13:17] *** rindolf left
[13:28] *** itaipu joined
[13:32] *** antiunfreeze joined
[13:33] *** meemoo joined
[13:36] *** antiunfreeze left
[13:37] *** _ramix_ left
[13:37] *** wamba left
[13:39] *** meemoo left
[13:41] *** AlexDaniel joined
[13:43] *** meemoo joined
[13:43] <meemoo> why oriented programming is at the heart of perl6?

[13:43] *** Anthony_ joined
[13:44] <Anthony_> p6: say 2+2;

[13:44] <camelia> rakudo-moar 86cb13: OUTPUT: «4␤»

[13:44] <Anthony_> p6: say (1,2,3) <<+>> (4,5,6);

[13:44] <camelia> rakudo-moar 86cb13: OUTPUT: «(5 7 9)␤»

[13:44] <moritz> disoriented programming is so frustrating

[13:44] <Anthony_> :D

[13:45] <Anthony_> kinda

[13:45] <Anthony_> p6: say 1..5;

[13:45] <camelia> rakudo-moar 86cb13: OUTPUT: «1..5␤»

[13:45] <Anthony_> p6: say [*]1..5;

[13:45] <camelia> rakudo-moar 86cb13: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say [*]7⏏051..5;␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤  …»

[13:45] <Anthony_> p6: say [*] 1..5;

[13:45] <camelia> rakudo-moar 86cb13: OUTPUT: «120␤»

[13:45] <meemoo> wops i meant to write OOP :D

[13:46] <raschipi> meemoo: Did you mean object-oriented?

[13:46] <Anthony_> Does anyone know how I can "compose" operators?

[13:46] <raschipi> Anthony_: Tell us what you really want.

[13:46] <Anthony_> matrix multiplication

[13:47] <raschipi> meemoo: Larry likes it.

[13:47] *** itaipu left
[13:47] <Anthony_> I heard that larry wants people to ask what they want instead of how they want to do it

[13:47] <Anthony_> but doesn't this go just a little bit against the perl mantra?

[13:48] <raschipi> Anthony_: There's more than one way to do it, but that doesn't mean you should.

[13:48] <Anthony_> Yeah

[13:48] <jnthn> Just because everything either is or can act like an object in Perl 6 doesn't mean you have to write everything in an OO way.

[13:48] *** Aaronepower left
[13:48] <Anthony_> I am trying to directly do my APL thinking in Perl 6

[13:49] <Anthony_> but I should rather think in Perl 6

[13:50] *** dogbert17 left
[13:50] <raschipi> Anthony_: You're looking for the X operator.

[13:51] <Anthony_> really?

[13:51] <Anthony_> Well then, I'll consult the documentation ;)

[13:51] *** cptAngry left
[13:51] *** skids joined
[13:51] <raschipi> https://docs.perl6.org/language/operators#infix_X

[13:51] <Anthony_> thank you 

[13:51] <raschipi> np

[13:52] <Anthony_> wow

[13:52] <Anthony_> it also works as a hyper operator!

[13:52] <Anthony_> that's nice :D

[13:52] <Anthony_> "meta" operator

[13:52] <Anthony_> sorry :)

[13:52] <raschipi> Test it for the usecase where one of the sides is an scalar, though.

[13:53] *** sufrostico left
[13:53] <Anthony_> yes, of course

[13:56] <Anthony_> Just out of curiousity: Can I nest multiple meta operators?

[13:57] <jnthn> Yes, they're just sugar for higher order functions really

[13:58] <Anthony_> Alright, thank you

[13:58] <jnthn> m: say (1,2,3) ZR- (4, 5, 6)

[13:58] <camelia> rakudo-moar 86cb13: OUTPUT: «(3 3 3)␤»

[13:58] <Anthony_> I must admit, that I love the whole operator thing in Perl 6

[13:58] <Anthony_> It allows for highly expressive code

[13:59] <jnthn> m: say (1,2,3) Z[R-] (4, 5, 6) # can use square brackets if you want to make interpretation of them really clear (or aren't sure how they'll group :))

[13:59] <camelia> rakudo-moar 86cb13: OUTPUT: «(3 3 3)␤»

[13:59] <Anthony_> Ah, OK

[13:59] <Anthony_> That's nice

[14:00] <raschipi> A Prolog programmer in love with Perl6's operators

[14:00] <Anthony_> Why Prolog programmer?

[14:01] <Anthony_> You mean you are a Prolog programmer?

[14:01] <raschipi> Sorry, I misunderstood you, then.

[14:01] <Anthony_> You didn't

[14:01] <Anthony_> I like Prolog

[14:01] <Anthony_> but I didn't mention it in here

[14:01] <Anthony_> How do you know? :D

[14:02] *** meemoo left
[14:03] <raschipi> Sorry, you mentioned APL, not prolog

[14:03] <Anthony_> But it is right anyway :)

[14:03] <Anthony_> What was your former (or current) language?

[14:04] <Anthony_> Perl 5?

[14:05] <raschipi> bash

[14:05] <Anthony_> really?

[14:06] <Anthony_> that's cool

[14:06] *** meemoo joined
[14:09] *** Anthony_ left
[14:12] *** ChoHag joined
[14:13] *** meemoo left
[14:16] *** AlexDaniel left
[14:16] *** meemoo joined
[14:17] *** meemoo left
[14:22] *** lowbro left
[14:22] *** wamba joined
[14:37] *** raiph joined
[14:46] *** jeromelanteri left
[14:50] *** rindolf joined
[14:55] <nine> robertle: installed distributions are meant to be immutable. The --force option violates this, so it's quite possibleb that it will stop or has stopped working at some point.

[15:01] *** mcsnolte joined
[15:05] *** Aaronepower joined
[15:09] *** zakharyas left
[15:12] *** alimon joined
[15:31] *** perlpilot_ joined
[15:33] *** Kyo91 joined
[15:34] <jdv79> did mem usage or leakage change recently?

[15:35] <jdv79> i have an app that's eating 3G, or 75%, of my ram.  i think thhat's new.

[15:36] *** mcmillhj left
[15:37] *** AlexDaniel joined
[15:39] <lizmat> jdv79: well, jnthn has been changing a lot of the MoarVM internals, so not unlikely a new leak got introduced

[15:39] <lizmat> data points welcome on #moarvm I guess  :-)

[15:41] <jdv79> yeah.  investigaing.  thanks..

[15:42] *** mr-fooba_ left
[15:42] <tony-o> jdv79: what app?

[15:45] *** mr-foobar joined
[15:47] *** AlexDaniel left
[15:49] *** cschwenz left
[15:54] <mantovani> what is the name of the utility to install perl6 modules ?

[15:54] *** sufrostico joined
[15:54] *** raschipi left
[15:54] <Aaronepower> mantovani: zef

[15:55] <mantovani> cool

[15:55] <mantovani> thank you very much sir

[15:56] *** Cabanossi left
[15:56] *** raschipi joined
[15:58] * [Coke] ponders how to figure out what a hanging p6 program is doing.

[15:58] *** Kyo91 left
[15:58] *** Cabanossi joined
[15:58] <mantovani> just to be sure, I'm trying to use Net::Curl but I didn't see any documentation, even the t/ directory doesn't have any examaple

[15:58] <mantovani> Should I look in a specific place to get documentation ?

[15:59] <lizmat> https://github.com/ugexe/zef

[15:59] <mantovani> not about zef, about Net::Curl

[15:59] <[Coke]> mantovani: https://github.com/azawawi/perl6-net-curl/tree/master/examples ?

[16:00] <mantovani> perfect

[16:00] <mantovani> I look into test folder but I didn't see this

[16:00] <mantovani> [Coke]++

[16:03] <mantovani> What module do you suggest to write a HTTP client ?

[16:03] <mantovani> I see many on https://modules.perl6.org/#q=HTTP

[16:03] <jdv79> tony-o: essentially its a multithreaded fetcher and parse web tpe thing

[16:05] <jdv79> uses HTML::Parser::XML, HTTP::Tinyish, JSON::Pretty, OO::Monitors

[16:06] *** mephinet joined
[16:07] *** Aaronepower left
[16:09] <mantovani> thanks

[16:12] *** Aaronepower joined
[16:14] *** vendethiel- left
[16:14] *** Kyo91 joined
[16:17] *** pharv joined
[16:19] <tony-o> super cool

[16:19] <tony-o> is it a scraper?

[16:19] <jdv79> are you talking to me?

[16:19] <tony-o> jdv79: yea

[16:19] <jdv79> its more of a aggregator and rules engine type thing

[16:20] *** dakkar left
[16:20] <tony-o> mantovani: https://modules.zef.pm/modules/Timothy%20Totten/HTTP::Client

[16:21] <jdv79> its something of a port of some ideas from https://github.com/huginn/huginn

[16:22] *** pharv left
[16:22] <tony-o> rad

[16:29] *** robertle_ joined
[16:31] *** mcmillhj joined
[16:32] *** zengargoyle left
[16:36] *** mcmillhj left
[16:39] *** Aaronepower left
[16:41] *** araraloren_ joined
[16:43] *** imcsk8 left
[16:43] *** araraloren left
[16:43] *** zengargoyle joined
[16:43] *** imcsk8 joined
[16:44] *** araraloren_ left
[16:45] *** setty1 joined
[16:45] *** baest joined
[16:56] *** Cabanossi left
[16:58] *** Cabanossi joined
[17:00] *** mcmillhj joined
[17:16] *** nadim_ left
[17:19] *** hannah_montana joined
[17:19] <hannah_montana> hello

[17:20] *** hannah_montana left
[17:25] <skids> o/

[17:26] <skids> Oh he left.  The attention span on these millenials...

[17:26] *** itaipu joined
[17:27] <perigrin> she came in like a wrecking ball 

[17:31] *** zakharyas joined
[17:40] *** itaipu left
[17:41] *** Cabanossi left
[17:42] *** itaipu joined
[17:43] *** Cabanossi joined
[17:46] *** nadim_ joined
[17:47] *** andrzejk_ joined
[17:51] *** bstamour joined
[17:58] <[Coke]> what is the point of "links.txt" in the perl6 doc repo?

[17:58] <[Coke]> It's a generated file, pushed to the site (https://docs.perl6.org/links.txt) and is only referenced in util/test-links.sh

[18:02] <[Coke]> (ah. that file has no documentation, but it's verifying that links exist.

[18:02] <[Coke]> we don't want to do that against the live site.

[18:05] * [Coke] opens https://github.com/perl6/doc/issues/1433

[18:13] <rindolf> perigrin: heh

[18:29] <[Coke]> docs needs both JSON::Fast and JSON::Tiny (due to direct and nested deps)

[18:30] * [Coke] gets a malformed Utf8 error trying to test ===> Testing: IO::Socket::SSL:auth('github:sergot')

[18:32] <sena_kun> [Coke], installs fine for me.

[18:34] <sena_kun> AH, no.

[18:34] <sena_kun> It was the wrong one, IO::Socket::Async::SSL.

[18:35] * [Coke] opens https://github.com/sergot/io-socket-ssl/issues/19

[18:35] <sena_kun> `zef --force install IO::Socket::SSL` is fine for me too.

[18:35] <sena_kun> on gentoo, though.

[18:36] <[Coke]> ... sure, force doesn't care if the test fails. :)

[18:38] <sena_kun> [Coke], it should grumble, but install anyway, right? in my case, it wrote "OK" for test phase. Doesn't --force at least comply about failed tests?

[18:40] <[Coke]> ... yes, I can force the install. The test should not be failing

[18:40] <sena_kun> hmmm.

[18:41] *** MilkmanDan left
[18:41] *** emeric joined
[18:43] *** MilkmanDan joined
[18:44] *** andrzejk_ left
[18:52] <Geth> ¦ modules.perl6.org: briandfoy++ created pull request #77: Look for .appveyor.yml and appveyor.yml

[18:52] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/pull/77

[18:53] <Zoffix> * [Coke] wonders how bad it would be to actually test doc examples OUTPUT.

[18:53] <Geth> ¦ modules.perl6.org: 7eb6719651 | (brian d foy)++ (committed by Moritz Lenz) | lib/ModulesPerl6/DbBuilder/Dist/Source/GitHub.pm

[18:53] <Geth> ¦ modules.perl6.org: Look for .appveyor.yml and appveyor.yml

[18:53] <Geth> ¦ modules.perl6.org: 

[18:53] <Geth> ¦ modules.perl6.org: Either will work. https://www.appveyor.com/docs/build-configuration/#yaml-file-alternative-naming

[18:53] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/7eb6719651

[18:53] <Zoffix> [Coke]: FWIW, I wrote at least a few code examples that will have different output each time

[18:53] <Zoffix> Or if they're run on different OSes (like IO::Path stuff)

[18:54] <moritz> I think it's a good idea, but only if you whitelist the code examples to run

[18:55] <moritz> (which I guess can be semi-automated by running all of them twice, and comparing the output, and whitelisting those that are reproducible; then you can look at all the others)

[19:09] <Zoffix> lots of new users here lately :)

[19:15] *** devmikey joined
[19:17] *** darutoko left
[19:24] *** andrzejk_ joined
[19:35] *** andrzejk_ left
[19:41] *** Cabanossi left
[19:43] *** mr-foobar left
[19:43] *** Cabanossi joined
[19:44] *** mr-foobar joined
[19:47] *** mcmillhj left
[19:53] *** espadrine joined
[19:57] *** mcmillhj joined
[20:00] <[Coke]> (code examples) - it would only be for things with OUTPUT:

[20:00] *** xinming_ left
[20:00] <[Coke]> and we can do something else for things that can change. SAMPLE: ?

[20:02] *** mcmillhj left
[20:06] <Geth> ¦ modules.perl6.org: briandfoy++ created pull request #78: The start of an AppVeyor post processor

[20:06] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/pull/78

[20:10] *** vendethiel joined
[20:17] *** mcmillhj joined
[20:17] *** AlexDaniel joined
[20:22] *** mcmillhj left
[20:27] <nadim_> hi, it there a way to detect if a variable is set to an enum? i now that the enumeration value itself belongs to the enum class with two attributes but I want to be able to say that the class was created by an enum.

[20:29] *** mcmillhj joined
[20:30] *** aindilis left
[20:30] <raschipi> Testing it's in the enum isn't enough?

[20:32] <raschipi> The docs say there's a " lack of introspectiveness" for enums. Their create a Map when they are declared.

[20:33] <raschipi> nadim_: Are you testing a variable set to one of the values of the enum or the variable that was returned when declaring?

[20:33] <nadim_> my problem is when dumping variables set to enum value, I see the $.key and $.value of it

[20:33] *** zakharyas left
[20:34] <raschipi> And what would you prefer?

[20:34] *** mcmillhj left
[20:35] <nadim_> here is a Stash dump, in it there are the enumerations, I'd rather not see the inside of them. http://imgur.com/7u1DLz1

[20:36] <nadim_> if enums where derived form a base class I could filter them

[20:37] <raschipi> Yep, I would say that's a bug in the data dumper

[20:37] <nadim_> ugexe: no it's not

[20:37] <nadim_> raschipi: no it's not

[20:37] <nadim_> those attributes are there, we're simply not used to see them

[20:38] <nadim_> it's an over zealous dump,  I need to dampen it ;)

[20:38] <raschipi> Well, it should have an option to hide it, I meant it as an wishlist bug

[20:39] <raschipi> m: say Bool.HOW ~~ Metamodel::EnumHOW;

[20:39] <camelia> rakudo-moar 86cb13: OUTPUT: «True␤»

[20:40] <raschipi> m: say False.HOW ~~ Metamodel::EnumHOW;

[20:40] <camelia> rakudo-moar 86cb13: OUTPUT: «True␤»

[20:40] <nadim_> raschipi: I agree, I actually would like that not be an option but I need to be able to detect it's an enum

[20:40] <raschipi> m: say 42.HOW ~~ Metamodel::EnumHOW;

[20:41] <lizmat> nadim_: enums do the role Enumeration, does that help ?

[20:41] <camelia> rakudo-moar 86cb13: OUTPUT: «False␤»

[20:42] <nadim_> lizmat: could be

[20:42] <lizmat> m: say False ~~ Enumeration

[20:42] <camelia> rakudo-moar 86cb13: OUTPUT: «False␤»

[20:42] <lizmat> hmmm

[20:42] <lizmat> ah, False never smartmatches

[20:43] <lizmat> m: use nqp; say nqp::istype(False,Enumeration)

[20:43] <camelia> rakudo-moar 86cb13: OUTPUT: «0␤»

[20:43] <lizmat> m: use nqp; say nqp::istype(Bool,Enumeration)

[20:43] <camelia> rakudo-moar 86cb13: OUTPUT: «0␤»

[20:43] <jdv79> so i have a small program that attempts to scrape a little of HN and i think something with the asyncness of it is causing it to produce unstable results

[20:43] <raschipi> m: enum Names ( name1 => 1, name2 => 2 ); say name1.HOW ~~ Metamodel::EnumHOW;

[20:43] <camelia> rakudo-moar 86cb13: OUTPUT: «True␤»

[20:44] <lizmat> m: enum <foo bar>; dd bar ~~ Enumeration

[20:44] <camelia> rakudo-moar 86cb13: OUTPUT: «Bool::True␤»

[20:44] <lizmat> nadim_: I guess Bool is the odd one out as it needs to be made during the bootstrap, before role Enumeration even exists

[20:45] <jdv79> yeha, its stable under RAKUDO_MAX_THREADS=1.  hmm...

[20:45] <nadim_> Bool has a type handler in ddt so I think I can handle it

[20:45] <lizmat> ok, cool

[20:49] <nadim_> lizmat: you mmay remember that you recommended using a construct like: my $a = something but role. I used that constructbut when I dumped $a I could not see the extra role attributes

[20:49] <nadim_> lizmat: so I have been adding support to it. http://imgur.com/gsFNJKM

[20:49] <lizmat> nadim_: cool

[20:50] <MasterDuke> jdv79: can you post it somewhere?

[20:51] <jdv79> how could .grep(.defined).elems be one greater than .elems

[20:51] <jdv79> wt....

[20:51] <jdv79> yeah

[20:52] <nadim_> lizmat: I may have gone over board with my test example though http://imgur.com/R3DTykY

[20:53] <nadim_> Let's seen If I can harness the Enums. thank you for the example above

[20:54] <jdv79> https://gist.github.com/anonymous/71d97c3b5845df31c6b425393b46a473

[20:54] <lizmat> nadim_: hehe  :-)

[20:55] <lizmat> the world can fit in a singleton, as long as you mix in enough roles  :-)

[20:55] * jdv79 is confused about single and multithread results on that one

[20:55] <raschipi> nadim_: sorry for saying it's a bug, I used it as a synonim for 'ticket', didn't mean it's broken.

[20:55] *** mcmillhj joined
[20:56] <nadim_> raschipi: absolutely no problems, 1/ someone sees a bug I am not seing is a good thing 2/someone finding something working to be bugggy means that it can be a bit better ;)

[20:57] *** perlpilot left
[20:57] *** perlpilot_ is now known as perlpilot

[20:57] *** Cabanossi left
[20:57] *** perlpilot_ joined
[20:58] <nadim_> a failing test brought my attention to it, so at some point I also considered this to be a bug

[20:58] *** Cabanossi joined
[20:59] *** aindilis joined
[20:59] *** itaipu left
[21:00] <raschipi> nadim_: Another thing that could be useful is showing the long name for them, i.e. instead of just 'True', show 'Bool::True'

[21:01] *** mcmillhj left
[21:01] <jdv79> MasterDuke: any ideas?

[21:01] <nadim_> the type is shown for all entries so True.Bool 1.Int 'blah'.Str

[21:02] *** skids left
[21:02] <raschipi> I see, thanks

[21:02] <MasterDuke> jdv79: nothing blindingly obvious

[21:02] *** bstamour left
[21:03] *** pecastro left
[21:03] <jdv79> ok, thanks

[21:03] <nadim_> raschipi: I now that there is a little problem with the install, Dam it!, but you should try the module ;)

[21:03] *** cpage left
[21:05] *** rindolf left
[21:05] *** brrt joined
[21:05] *** AlexDaniel left
[21:07] *** AlexDaniel joined
[21:07] <raschipi> nadim_: Will do.

[21:07] *** mcmillhj joined
[21:08] *** AlexDaniel left
[21:08] *** AlexDaniel joined
[21:10] <jdv79> huh.  if i sleep a couple seconds after the reace block in single threaded the #s match

[21:10] <nadim_> lizmat: based on what you said a: multi method get_header (Enumeration $e) { '', '.' ~ $e.^name, DDT_FINAL } did the trick perfectly. what I am surprised to see is that when asking for the bas classes the Enumeratioon  class is not returned

[21:10] <jdv79> i thought await would block until all promises were complete

[21:10] <jdv79> *react

[21:10] <lizmat> nadim_: yeah, it's a low level mess  :-)

[21:11] <nadim_> but it's all good I guess, now stash dumping passed its test again, thanks. http://imgur.com/fthEDkK

[21:11] <raschipi> nadim_: send me a link

[21:11] <nadim_> best have it hidden :) the good thing is that the class matches even if it not returned

[21:12] <jdv79> huh.  i have to await outside the react block

[21:12] <nadim_> raschipi: I have an install problem, that I hope to fix to night, but here you go http://blogs.perl.org/users/nadim_khemir/2017/08/perl-6-datadumptree-version-15.html

[21:12] *** mcmillhj left
[21:12] *** espadrine left
[21:13] *** mr-foobar left
[21:13] *** someuser left
[21:14] <nadim_> lizmat: what's  $¢?

[21:14] <raschipi> g'night people

[21:14] <nadim_> night

[21:14] <Zoffix> night

[21:14] *** raschipi left
[21:14] <lizmat> nadim_: something deep internal related to matching afaik

[21:15] *** mr-foobar joined
[21:15] <Zoffix> current cursor or something like that

[21:15] *** Kyo91 left
[21:15] *** Kyo91 joined
[21:16] <Zoffix> m: grammar Meows { token TOP { .+ { say $¢.^mro } } }.parse: "foo"

[21:16] <camelia> rakudo-moar 86cb13: OUTPUT: «((Meows) (Grammar) (Match) (Capture) (Cool) (Any) (Mu))␤»

[21:16] <jdv79> MasterDuke: yeah, that was it

[21:16] *** TEttinger joined
[21:19] *** AlexDani` joined
[21:20] *** Kyo91 left
[21:20] *** AlexDaniel left
[21:21] *** itaipu joined
[21:22] *** nowan left
[21:24] *** rindolf joined
[21:25] *** emeric left
[21:26] <nadim_> lizmat: there's a lot going on in there

[21:26] *** brrt left
[21:27] *** AlexDani` is now known as AlexDaniel

[21:27] *** nowan joined
[21:28] *** mcmillhj joined
[21:28] *** cpage_ left
[21:29] <nadim_> ugexe: I still don't see what the error is at https://github.com/nkh/P6-Data-Dump-Tree/blob/release/META6.json#L24, There are two modules, one is LayHorizontal and the other one is Horizontal

[21:29] *** mr-foobar left
[21:30] *** mr-foobar joined
[21:32] *** pwr22 joined
[21:32] *** mcmillhj left
[21:34] <Geth> ¦ modules.perl6.org/master: 4 commits pushed by (brian d foy)++, (Zoffix Znet)++

[21:34] <Geth> ¦ modules.perl6.org/master: 9f86d939d4 | Look for .appveyor.yml and appveyor.yml

[21:34] <Geth> ¦ modules.perl6.org/master: 546b4cbe27 | The shell of an AppVeyor Postprocessor, incomplete

[21:34] <Geth> ¦ modules.perl6.org/master: 2ed902a9ee | Get the AppVeyor history endpoint

[21:34] <Geth> ¦ modules.perl6.org/master: 66001dfa9e | Merge pull request #78 from briandfoy/master

[21:34] <Geth> ¦ modules.perl6.org/master: review: https://github.com/perl6/modules.perl6.org/compare/7eb6719651...66001dfa9e

[21:35] <Geth> ¦ modules.perl6.org: 24ba560706 | (Zoffix Znet)++ (committed using GitHub Web editor) | README.md

[21:35] <Geth> ¦ modules.perl6.org: [REBUILD] trigger full rebuild

[21:35] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/24ba560706

[21:40] <nadim_> ugexe: I removed both lines and it installs. that's the only difference it takes to make it work. the only place where Horizontal is loaded at line 2 is in LayHorizontal. all tests pass, don't know why zef croaks on that.

[21:41] <nadim_> jnthn: aliasing the name of a module via META&.json worked perfectly

[21:44] *** mcmillhj joined
[21:48] *** mcmillhj left
[21:50] *** rindolf left
[21:51] *** itaipu left
[21:53] *** pwr22 left
[21:55] *** Cabanossi left
[21:58] *** Cabanossi joined
[21:59] *** mr-foobar left
[22:00] *** mcmillhj joined
[22:01] <zengargoyle> nadim_: do you also have something like constant DDT = .... somewhere in longnamefile?

[22:02] *** setty1 left
[22:02] *** mr-foobar joined
[22:05] *** mcmillhj left
[22:05] *** cpage_ joined
[22:10] <nadim_> zengargoyle: no

[22:12] <zengargoyle> ah, maybe i mis-followed things. :)  thought the thing was being able to 'use DDT;' and 'DDT.new' when it's really Data::Dumper;:Tree.

[22:14] <zengargoyle> i think i know somebody who *really* wants that sort of thing.

[22:14] *** TEttinger left
[22:15] *** mcmillhj joined
[22:20] <nadim_> I can do use DDT; I think use Data::Dump::Tree.new looks nicer and if one gets to the point of creating an object rather than just using the subs, then it is serious enough to use the whole name.

[22:20] *** mcmillhj left
[22:20] *** markmont left
[22:21] *** mcmillhj joined
[22:25] *** mcmillhj left
[22:26] *** Peter_R left
[22:27] <zengargoyle> i agree, i'm asking for somebody else who *really* wants the short name....  i think the META trickery will help a bit.

[22:27] *** Peter_R joined
[22:29] <zengargoyle> i'll have to play with the META and constant thing to say "use longname and you can make short work".

[22:30] <zengargoyle> vs just use short and you are in for a world of hurt.

[22:33] <jnthn> m: await quietly Promise.in(0.00001)

[22:33] <camelia> rakudo-moar 86cb13: ( no output )

[22:33] <jnthn> jdv79: Can just quiet the warning like that if you aren't bothered

[22:35] <jdv79> oh, cool.  my p6-fu doesn't include quietly yet.  thanks!

[22:36] <jnthn> Oh, I answered on the wrong channel...d'oh :)

[22:38] *** mcmillhj joined
[22:46] *** mcmillhj left
[22:49] *** skids joined
[22:54] <Geth> ¦ modules.perl6.org: 221988d0f6 | (Zoffix Znet)++ | lib/ModulesPerl6/DbBuilder/Dist/PostProcessor/AppVeyor.pm

[22:54] <Geth> ¦ modules.perl6.org: [REBUILD] Fix up AppVeyor API URL

[22:54] <Geth> ¦ modules.perl6.org: 

[22:54] <Geth> ¦ modules.perl6.org: Current version gives a 404.

[22:54] <Geth> ¦ modules.perl6.org: 

[22:54] <Geth> ¦ modules.perl6.org: Fix by adding the ?recodsNumber param, per API docs[^1]. This makes the

[22:54] <Geth> ¦ modules.perl6.org: postprocessor successfully fetch AppVeyor requests in local tests.

[22:54] <Geth> ¦ modules.perl6.org: 

[22:54] <Geth> ¦ modules.perl6.org: [1] https://www.appveyor.com/docs/api/projects-builds/#get-project-history

[22:54] <Geth> ¦ modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/221988d0f6

[22:55] *** nattefrost left
[23:01] *** markmont joined
[23:12] *** nadim_ left
[23:20] *** pelev joined
[23:26] *** vendethiel left
[23:28] *** Kyo91 joined
[23:36] <ugexe> .tell nadim_ Data::Dump::Tree::DHTML.pm is not a module name

[23:36] <ugexe> or rather, it is your module name

[23:42] *** lichtkind left
[23:42] *** Cabanossi left
[23:43] *** Cabanossi joined
[23:43] *** sena_kun left
[23:48] <ijneb> Does anyone have some cool perl6 one-liners?

[23:48] <Zoffix> messanging bot ain't around

[23:49] <Zoffix> ijneb: yup

[23:49] <Zoffix> m: sub infix:<⁣> { [+] @_ }; say 2⁣2

[23:49] <camelia> rakudo-moar 213595: OUTPUT: «4␤»

[23:50] <ijneb> any others lol

[23:51] <ijneb> any cool obfuscated perl6 inventions

[23:51] <Zoffix> m: sub infix:<¯\(°_o)/¯> { @_.pick }; say 'Coke' ¯\(°_o)/¯ 'Pepsi';

[23:51] <camelia> rakudo-moar 59f412: OUTPUT: «Coke␤»

[23:52] <Zoffix> Man, wtf modules.perl6.org refuses to do a full rebuild :|

[23:52] <ijneb> lmao

[23:52] <Zoffix> What's annoying is I think interrupting the build script will cause it delete all the unprocessed modules in the next run. HM

