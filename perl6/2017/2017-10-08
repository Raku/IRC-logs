[00:00] <Zoffix> And what should the behaviour be? :Baz is True or 1?

[00:01] <Zoffix> m: use nqp; nqp::bool_I(True).^mro.say

[00:01] <camelia> rakudo-moar de0533: OUTPUT: «((Int) (Cool) (Any) (Mu))␤»

[00:01] <AlexDaniel_> do you know how to make any of these two work? :)

[00:02] <Zoffix> just .Int it?

[00:02] <Zoffix> m: say True.Int.^mro

[00:02] <camelia> rakudo-moar de0533: OUTPUT: «((Int) (Cool) (Any) (Mu))␤»

[00:03] <Zoffix> m: enum Foo (:Bar(1), :Baz(<42>))

[00:03] <camelia> rakudo-moar de0533: OUTPUT: «===SORRY!===␤Incompatible MROs in P6opaque rebless for types IntStr and Foo␤»

[00:03] <Zoffix> m: enum Foo (:Bar(1), :Baz(<42>.Int))

[00:03] <camelia> rakudo-moar de0533: ( no output )

[00:03] <AlexDaniel_> no we can't .Int it

[00:03] <AlexDaniel_> m: enum Foo (:Bar("foo")); say Bar

[00:03] <camelia> rakudo-moar de0533: OUTPUT: «foo␤»

[00:05] <Zoffix> nqp::istype($blah, Int) ?? $blah.Int !! ...

[00:05] <AlexDaniel_> m: enum Foo (:Bar("foo"), :Baz(42)); say Bar

[00:05] <camelia> rakudo-moar de0533: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Type error in enum. Got 'Int' Expected: 'Str'␤at <tmp>:1␤------> 3enum Foo (:Bar("foo"), :Baz(42))7⏏5; say Bar␤»

[00:05] <AlexDaniel_> m: enum Foo (:Bar("foo"), :Baz(<42>)); say Bar

[00:05] <camelia> rakudo-moar de0533: OUTPUT: «===SORRY!===␤Incompatible MROs in P6opaque rebless for types IntStr and Foo␤»

[00:05] *** BenGoldberg joined
[00:05] <AlexDaniel_> Zoffix: then this won't work?

[00:05] <Zoffix> Well, not really, I guess. What's the correct behaviour? Is :Baz to be True?

[00:06] *** zakharyas left
[00:07] <Zoffix> ?

[00:07] <AlexDaniel_> m: use nqp; say so nqp::istype(True, Int); say nqp::rebless(True."Int"(), Int)

[00:07] <camelia> rakudo-moar de0533: OUTPUT: «True␤1␤»

[00:07] <AlexDaniel_> I guess True would be more correct…

[00:08] <Geth> ¦ rakudo/full-make-test: 6256ec8272 | (Zoffix Znet)++ | 2 files

[00:08] <Geth> ¦ rakudo/full-make-test: Make repl tests force interactive repl mode

[00:08] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/6256ec8272

[00:12] *** leont left
[00:13] *** cog__ left
[00:13] <Geth> ¦ rakudo/full-make-test: e72dedf5cb | (Zoffix Znet)++ | t/02-rakudo/repl.t

[00:13] <Geth> ¦ rakudo/full-make-test: Simplify routine call

[00:13] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/e72dedf5cb

[00:13] *** cognominal joined
[00:14] *** TreyHarris left
[00:18] <AlexDaniel_> OK that's it for me on that ticket I think. I've left a comment and retitled it: RT #127775

[00:18] <synopsebot> RT#127775 [new]: https://rt.perl.org/Ticket/Display.html?id=127775 Declaring enums with bools ( enum Foo (:Bar(1), :Baz(True) ))

[00:19] <Zoffix> AlexDaniel_: but it's not just Bools, IntStr also has issues

[00:19] <Zoffix> I'll take a crack at it once I'm done with `full-make-test`

[00:20] *** profan joined
[00:22] <Geth> ¦ rakudo/full-make-test: 4358871873 | (Zoffix Znet)++ | 2 files

[00:22] <Geth> ¦ rakudo/full-make-test: Add scrubber routine to is-run-repl

[00:22] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/4358871873

[00:22] *** Cabanossi left
[00:24] <Geth> ¦ rakudo/full-make-test: 92bc011ab0 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[00:24] <Geth> ¦ rakudo/full-make-test: Follow convention of core multi sub declarations

[00:24] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/92bc011ab0

[00:25] *** Cabanossi joined
[00:27] *** TreyHarris joined
[00:29] *** markjszy joined
[00:33] <Geth> ¦ rakudo/full-make-test: 63643ad042 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[00:33] <Geth> ¦ rakudo/full-make-test: Friendlify is-run-repl()

[00:33] <Geth> ¦ rakudo/full-make-test: 

[00:33] <Geth> ¦ rakudo/full-make-test: - If code is a Positional, assume its separate lines to feed REPL with

[00:33] <Geth> ¦ rakudo/full-make-test: - If out/err tests are Positionals, assume they're a bunch of lines

[00:33] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/63643ad042

[00:34] <Geth> ¦ rakudo/full-make-test: 9c4025f33f | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[00:34] <Geth> ¦ rakudo/full-make-test: Improve is-run()

[00:34] <Geth> ¦ rakudo/full-make-test: 

[00:34] <Geth> ¦ rakudo/full-make-test: Default to empty Str test for err/out and 0 exit code

[00:34] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/9c4025f33f

[00:39] *** nadim_ left
[00:49] <Geth> ¦ roast: bitrauser++ created pull request #344: Add tests for RT#125466

[00:49] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/344

[00:49] <squashable6> 🍕 bitrauser++ opened pull request “Add tests for RT#125466”: https://github.com/perl6/roast/pull/344

[00:49] <squashable6> 🍕🍕🍕  First contribution by bitrauser++! ♥

[00:49] <synopsebot> RT#125466 [open]: https://rt.perl.org/Ticket/Display.html?id=125466 [MATH] bitwise shift is inconsistent on int

[00:51] <squashable6> 🍕 zoffixznet++ wrote a comment on “Add tests for RT#125466”: https://github.com/perl6/roast/pull/344#issuecomment-334975377

[00:52] *** margeas left
[00:53] *** kaare__ left
[00:56] *** labster joined
[00:57] *** llfourn joined
[01:02] *** ChoHag left
[01:03] *** markjszy left
[01:05] <Geth> ¦ rakudo/full-make-test: 71a0ad5528 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[01:05] <Geth> ¦ rakudo/full-make-test: Rewrite Positional $code handling

[01:05] <Geth> ¦ rakudo/full-make-test: 

[01:05] <Geth> ¦ rakudo/full-make-test: The multi setup isn't working because non-Positional one takes

[01:05] <Geth> ¦ rakudo/full-make-test: precedence when desc is given

[01:05] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/71a0ad5528

[01:07] <Geth> ¦ rakudo/full-make-test: 2f0bb20e82 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[01:07] *** thou joined
[01:07] <Geth> ¦ rakudo/full-make-test: diag() received output when Callable test fails

[01:07] <Geth> ¦ rakudo/full-make-test: 

[01:07] <Geth> ¦ rakudo/full-make-test: Otherwise we can't see why exactly it failed

[01:07] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/2f0bb20e82

[01:09] *** bitrauser joined
[01:09] <Zoffix> Some of these REPL tests look bogus to me. `say "works"` with  `if True` on another line is meant to be interpreted as one statement, but that's lame, since it means we have to beg for semicolons for each line?

[01:10] * Zoffix tosses these

[01:10] <squashable6> 🍕 bitrauser++ synchronize pull request “Add tests for RT#125466”: https://github.com/perl6/roast/pull/344

[01:10] <synopsebot> RT#125466 [open]: https://rt.perl.org/Ticket/Display.html?id=125466 [MATH] bitwise shift is inconsistent on int

[01:12] *** bitrauser_ left
[01:14] *** ChoHag joined
[01:15] <Zoffix> Anyone know how are our bitshifts are meant to behave and can review the above roast PR?

[01:16] <bitrauser> Happy for any feedback :)

[01:16] <Zoffix> m: my int $i = int.Range.max; say $i; say $i +< -2

[01:16] <camelia> rakudo-moar de0533: OUTPUT: «9223372036854775807␤2305843009213693951␤»

[01:17] <Zoffix> bitrauser: one thing I notice is the types are missing. It needs `int` if the tests are testing for native ints instead of our Int types

[01:17] <Zoffix> And then, if it is native, then I get different results for some of these when I run them with C (maybe I'm doing wrong, I dunno this stuff)

[01:17] <Zoffix> ccc 'long long x = 9223372036854775807; printf("%lld\n", x >> -32)'

[01:17] <Zoffix> -4294967296

[01:19] <Zoffix> And the last "WHAT" in the ticket looks right if I run it with C

[01:20] <Zoffix> I mean, I get "-4" for it with C

[01:22] <Zoffix> m: my int $i = int.Range.max; say ($i +> -2).log: 2

[01:22] <camelia> rakudo-moar de0533: OUTPUT: «65␤»

[01:22] <Zoffix> That one should prolly be overflowing instead of returning an Int

[01:24] <Zoffix> bitrauser: for the ones that are wrong, you can just TODO "fudge" them. Fudging is explained in some readme I think. Here's an example of its use: https://github.com/perl6/roast/blob/master/S06-signature/caller-param.t#L19   The comment tells the fudger to rewrite the following test as a TODO

[01:26] * Zoffix added these comments to the ticket

[01:26] <bitrauser> Hmm they do? Trying out the test with `my int $int_min = int.Range.min;` and `my int $int_max = int.Range.max;` still makes it pass on my machine.

[01:27] <Zoffix> Because the tests test for wrong values, don't they?

[01:28] <Zoffix> is($int_min +> -64, -170141183460469231731687303715884105728) and is($int_max +> -32, 39614081257132168792477007872); and probably others... Those values look too big for `int`

[01:28] <Zoffix> Do we guarantee `int` is an `int64`? I know on moarvm that's so, but what about other backends?

[01:30] <Zoffix> bitrauser: though I don't know this area, so I'm just guessing here :) For example, `my $shift = -32; say $native_int +> $shift` will likely go through `Int` candidate of the operator and in that case it's probably meant to return large values so... I dunno, are we meant to return Ints when the value is to big.

[01:30] <Zoffix> Maybe timotimo or jnthn know

[01:31] <bitrauser> I see, that's why I used absolute values instead of `Range.max`/`Range.min`, but I did not consider that the needs to assume native ints, as you explained.

[01:34] *** evalable6 left
[01:34] *** evalable6 joined
[01:35] *** Rawriful left
[01:38] *** Cabanossi left
[01:40] *** Cabanossi joined
[01:43] <Zoffix> You know what'd be cool? For List.kv to take an arg that indicates starting index

[01:44] <Zoffix> for lines.kv: 1 { say "Line #$^a is $^b" }

[01:45] <Zoffix> Don't make any sense on a Hash tho, so... nm

[01:45] *** ilbot3 left
[01:46] <AlexDaniel_> WOOOP WOOOP WOOOP

[01:46] * AlexDaniel_ acts like an idiot, this won't be logged anyway

[01:47] <AlexDaniel_> well, only in matrix network and maybe other loggers…

[01:48] <Zoffix> :o All this time I thought "2001 A Space Oddysey" was made... in 2001

[01:52] <buggable> New CPAN upload: Geo-Hash-0.0.1.tar.gz by TITSUKI https://cpan.metacpan.org/authors/id/T/TI/TITSUKI/Perl6/Geo-Hash-0.0.1.tar.gz

[01:54] <teatime> Zoffix: You are kidding, right?

[01:54] <Zoffix> teatime: nope :(

[01:54] *** ilbot3 joined
[01:54] *** ChanServ sets mode: +v ilbot3

[01:55] <teatime> haha, that's great :)

[01:56] <Zoffix> :)

[01:57] *** ryn1x joined
[01:58] <ryn1x> Is there a way to speed up vim while editing perl6 files? I am not sure why but it slows to a crawl only when I am in a .p6 file...

[02:00] <Geth> ¦ rakudo/full-make-test: 153f133bc2 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[02:00] <Geth> ¦ rakudo/full-make-test: Implement Map test to test specific lines

[02:00] <Geth> ¦ rakudo/full-make-test: 

[02:00] <Geth> ¦ rakudo/full-make-test: - Keys are line numbers and values are expected lines

[02:00] <Geth> ¦ rakudo/full-make-test: - Key "t" is total expected line numbers

[02:00] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/153f133bc2

[02:00] * geekosaur suddenly feels old

[02:00] <Zoffix> That feature looks a bit nutty... Might remove it if I don't use it often enough when I'm done with REPL testss

[02:01] <Zoffix> ryn1x: I saw that question asked several times. Don't remember what the answers were, but perhaps you can find something by searching logs: https://irclog.perlgeek.de/perl6/2017-10-08

[02:03] <ryn1x> Zoffix: Thanks. I'll do that. Can I ask what text editor you are using for perl6?

[02:03] <Zoffix> ryn1x: Atom

[02:03] <Zoffix> huggable: atom ide

[02:03] <huggable> Zoffix, https://github.com/perl6/Atom-as-a-Perl6-IDE

[02:07] <AlexDaniel_> ryn1x: alternatively, if you're using vim, then maybe you can try emacs with perl6-mode! No joking, if you go with spacemacs then you can use it straight away

[02:08] <AlexDaniel_> spacemacs has no perl6 layer yet, unfortunately

[02:08] <AlexDaniel_> but this does not prevent you from using perl6-mode

[02:09] <Zoffix> But can you do Power Mode? https://atom.io/packages/activate-power-mode

[02:09] <Zoffix> ^_^

[02:10] <AlexDaniel_> “Screen Shake” “Play Audio” “Particles”

[02:10] <AlexDaniel_> hmm

[02:10] <AlexDaniel_> maybe not

[02:10] <AlexDaniel_> actually, I think I lied about perl6 layer

[02:10] <AlexDaniel_> https://github.com/syl20bnr/spacemacs/issues/5019

[02:10] *** releasable6 left
[02:11] *** releasable6 joined
[02:11] *** ChanServ sets mode: +v releasable6

[02:11] <AlexDaniel_> the issue is there but it seems to be resolved: https://github.com/syl20bnr/spacemacs/pull/8493

[02:11] <ryn1x> AlexDaniel_: I was thinking about trying that again... maybe I'll give it a shot if I cant fix this slow vim with perl6 issue... I tried spacemacs a while back and switched to vim because I had a lot of problems loading it at work... and I like mirroring my work and home set-ups.

[02:12] <AlexDaniel_> Zoffix: do we have a list of editors somewhere?

[02:12] <pierrot> /5/5

[02:13] <Zoffix> No idea

[02:14] <AlexDaniel_> ok, found it: https://perl6.org/whatever/

[02:15] <Geth> ¦ rakudo/full-make-test: be4d57deb5 | (Zoffix Znet)++ | t/02-rakudo/repl.t

[02:15] <Geth> ¦ rakudo/full-make-test: Start rewriting REPL tests using new test routine

[02:15] <Geth> ¦ rakudo/full-make-test: 

[02:15] <Geth> ¦ rakudo/full-make-test: Tossed sanity tests (what's the point?) and two TODOed tests for

[02:15] <Geth> ¦ rakudo/full-make-test: postfix if/for on next lines. Such behaviour is undesirable, since

[02:16] <Geth> ¦ rakudo/full-make-test: we'll have to force users to use a semicolon at the end, having

[02:16] <Geth> ¦ rakudo/full-make-test: unhelpful behaviour of expecting further lines of input when

[02:16] <Geth> ¦ rakudo/full-make-test: it's missing.

[02:16] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/be4d57deb5

[02:17] <teatime> ryn1x: The answer is yes, there is.  It has been like 6mo. at least since I last touched that stuff though, so I do not remember the specific details.

[02:17] <AlexDaniel_> ryn1x: I created this issue https://github.com/perl6/perl6.org/issues/83

[02:18] * AlexDaniel_ wonders why he stopped using spacemacs

[02:18] <AlexDaniel_> it was years ago so I don't really remember

[02:18] <teatime> ryn1x: Perl 6 is pretty complex/difficult to properly syntax-highlight.  vim comes w/ perl6 support, but it is not very good/complete/whatever.

[02:19] *** cdg joined
[02:19] <teatime> so pretty sure the answer is to install a/the better Perl6 highlighting stuff

[02:19] <ryn1x> AlexDaniel_: What editor are you using now? Atom also?

[02:19] <AlexDaniel_> I think one of the issues was that I went with vim keybindings and after several months of use realized what a horrible idea it was

[02:19] <AlexDaniel_> ryn1x: emacs with perl6-mode

[02:19] <teatime> and as a super-short-term workaround, turning syntax off should eliminate the slowdown; if it doesn't, do let me know.

[02:20] <ryn1x> teatime: Thank.. I am reading through the logs now... it looks like it has been brought up a few times... no solution yet... 

[02:21] <AlexDaniel_> wait, there's perl6 mode for neovim?

[02:21] <teatime> I didn't have slowdown problems, but I did encounter limitations of the built-in Perl6 definitions that were all completely resolved by installing some other one.

[02:21] <AlexDaniel_> err doesn't look like it does anything: https://github.com/neovim/neovim/blob/master/runtime/ftplugin/perl6.vim

[02:22] <teatime> AlexDaniel_: ftplugin is a hook that runs when vim recognizes it's loaded a file of that type

[02:23] *** cdg left
[02:23] <teatime> AlexDaniel_: and multiple ones can be registered and run

[02:24] <teatime> AlexDaniel_: so it's not too weird to have one that just does something like "set indenting to two spaces" for Ruby or "actually use tabs" for Makefiles, etc.

[02:24] <AlexDaniel_> ah ok

[02:24] <AlexDaniel_> https://github.com/neovim/neovim/blob/master/runtime/syntax/perl6.vim

[02:24] <teatime> AlexDaniel_: also neovim includes everything (afaik?) in vim, jsyk

[02:24] <AlexDaniel_> this is the right file

[02:24] *** yht joined
[02:25] <AlexDaniel_> teatime: so they just took all syntax files from vim, right?

[02:25] <teatime> AlexDaniel_: there's definitely more to a syntax definition than that, it'll be elsewhere, but it kinda looks like this ftplugin is fixing-up some stuff that would be set there?  I dunno.  agreed, it doesn't look like it does much.

[02:25] <AlexDaniel_> doesn't it make neovim a possible editor alternative also?

[02:25] <teatime> AlexDaniel_: yeah, presumably.  they may have then improved etc. them tho.

[02:25] <teatime> well sure! :)

[02:25] <ryn1x> Says last change 2013...

[02:26] <teatime> I beleive neovim is pretty much 100% backwards-compatible to vim... it just 1) has saner more modern defaults for config settings and 2) has additional features.

[02:27] <teatime> vim syntax highlighting is pretty much just defining a bunch of regular expressions that identify each kind of syntax element

[02:27] <teatime> you can see how 1) this would be even more difficult to do well for perl6 than maybe it is in general :)  and 2) prone to slowness on big files

[02:27] <AlexDaniel_> https://github.com/perl6/perl6.org/issues/84

[02:27] <teatime> of course, if I ask you guys "Is it sane to parse Perl6 code with just regexes??" you would probably say "Well, Perl6 does ;)"

[02:29] *** yht left
[02:29] <teatime> AlexDaniel_: was this what you were looking for / expecting?  https://github.com/neovim/neovim/blob/9f6d693e263b617cd1a1772e42911cd5a0b1675b/runtime/syntax/perl6.vim

[02:30] <AlexDaniel_> teatime: yeah, given that I've sent this link a few messages ago… :)

[02:30] <ryn1x> I wish there was support for sublime text... seems like atom has taken the spotlight, but it is horribly slow compared to sublime.. and vim/emacs has always scared off the majority because of the learning curve.

[02:30] <teatime> heh, sorry, multi-tasking poorly

[02:32] <AlexDaniel_> never really understood the learning curve problem with emacs

[02:32] <teatime> I've never given emacs a fair trial, but when I have started to, it's just kinda overwhelming.

[02:32] *** hoffentlichja joined
[02:32] <ryn1x> AlexDaniel_ Me either, but for the GUI generation of people it is not very approachable I guess

[02:32] <AlexDaniel_> sure, ctrl+s and some other shortcuts don't work, but you have all the buttons in the GUI, and all these show how you can do this stuff using the keyboard

[02:32] <teatime> I don't try to convert people to vim but I use it because I am used to it.

[02:34] <teatime> ryn1x: how big is the file(s) that are causing bad slowdowns for you / are they public / etc.

[02:34] <teatime> would like to duplicate it

[02:36] <ryn1x> teatime: File size does not seem to matter... I can open a 20 liner and get scroll lag with j/k

[02:37] <teatime> oh wow, ok

[02:37] <teatime> how close to stock is your vim configuration?  'cause *that* has not been my experience

[02:40] *** cdg joined
[02:40] <ryn1x> teatime: it ir very small... I just backed it up and removed it and the lag is almost gone though... I think it may be my relative line numbering... going to turn that off and try again..

[02:40] *** noganex joined
[02:42] <teatime> ahhh yes, I don't use rel numbering but it is a known source of ui lag

[02:42] <ryn1x> teatime: yep that fixed it... strange... it is only within a perl6 file that the relative line numbering can't keep up...

[02:43] *** noganex_ left
[02:43] <Zoffix> huggable: slow vim :is: Perl 6 Vim is slow? Turn off relative line numbering: https://irclog.perlgeek.de/perl6/2017-10-08#i_15272870

[02:43] <huggable> Zoffix, Added slow vim as Perl 6 Vim is slow? Turn off relative line numbering: https://irclog.perlgeek.de/perl6/2017-10-08#i_15272870

[02:43] <ryn1x> now I can stop all these crazy thoughts of trying a different text editor

[02:44] * teatime relaxes.

[02:44] *** cdg left
[02:45] <teatime> ryn1x: #vim is pretty useful, fyi.  curmudgeonly sometimes, but what else can one expect.

[02:48] <ryn1x> teatime: I bet. There is no friendlier channel than this one! Honestly the interactions I have had here made me decide to stick with learning perl6.

[02:49] <teatime> yeah, it's a big influence on my sticking with it, and also tbh a motivator for me to behave better in general

[02:50] <teatime> sometimes I start to snark at someone in #randomchannel and then think, "Wait, that would def. be a Less Than Awesome response, now wouldn't it?"

[02:50] <Zoffix> \o/

[02:52] <AlexDaniel_> \o/ indeed

[02:54] <AlexDaniel_> .oO( hey, it's a positive feedback loop right there! )

[02:56] *** yht joined
[03:02] *** yht left
[03:04] <Geth> ¦ rakudo/full-make-test: c45d0cd1b5 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[03:04] <Geth> ¦ rakudo/full-make-test: Disable error colouring

[03:04] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/c45d0cd1b5

[03:05] <Zoffix> squashable6: status

[03:05] <squashable6> Zoffix, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈8 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[03:05] <squashable6> Zoffix, Log and stats: https://gist.github.com/1e0dfeae35507a7e6cfe5c1f55e29243

[03:19] *** Aaronepower left
[03:26] *** pilne joined
[03:26] *** jeromelanteri joined
[03:31] <Geth> ¦ rakudo/full-make-test: 338a097246 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[03:31] <Geth> ¦ rakudo/full-make-test: Allow :out test given as third positional

[03:31] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/338a097246

[03:32] <Geth> ¦ rakudo/full-make-test: 7c8a2739a5 | (Zoffix Znet)++ | t/02-rakudo/repl.t

[03:32] <Geth> ¦ rakudo/full-make-test: Rewrite remaining REPL tests using new routine

[03:32] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/7c8a2739a5

[03:33] <Geth> ¦ rakudo/full-make-test: d82c09b351 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[03:33] <Geth> ¦ rakudo/full-make-test: Toss `Map` test option

[03:33] <Geth> ¦ rakudo/full-make-test: 

[03:33] *** mudguts joined
[03:33] <Geth> ¦ rakudo/full-make-test: Too convoluted and turned out to be rather useless afterall.

[03:33] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/d82c09b351

[03:33] <mudguts> squashable: next

[03:33] <squashable6> mudguts, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈8 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[03:34] <squashable6> mudguts, Log and stats: https://gist.github.com/585d37427b741828664f3c032e81c123

[03:34] <teatime> ryn1x: some things that may or may not mitigate some of the symptoms:  set lazyredraw, set regexpengine=1 ... expected to exacerbate issue: set cursorline, set relativenumber, folding especially foldmethod=syntax.  you likely found all that already.

[03:35] <teatime> ryn1x: I found this quite interesting:  https://github.com/chrishunt/dot-files/issues/5#issuecomment-39977334

[03:38] *** Cabanossi left
[03:39] <teatime> ryn1x: cursorcolumn is out for same reason.

[03:40] *** Cabanossi joined
[03:43] <ryn1x> teatime: thx. i didn't think about it until reading the link you just sent, but if rel line nums causes the screen to be redrawn... that is probably killing me because I am using a 5k monitor.. that and the demanding syntax highlighting for p6 was just too much for my laptop.

[03:44] <teatime> tbh the real core issue is that vim re-calculates/re-matches the syntax stuff way over-often

[03:45] <teatime> i.e., (I think) reducing the amount of redrawing is making such a dramatic improvement because vim is unnecessarily re-doing all the regex matching work for the syntax highlighting, on every redraw

[03:46] <Zoffix> 5k monitors are out?

[03:46] <teatime> https://github.com/vim/vim/issues/1735  <--  issue is here, if you want to track it; also mentioned in `:help todo` ... many other langs with non-trivial syntax configs are affected (I've seen ruby, php, html mentioned so far), so at least you don't have to wait on someone to be motivated by Perl6 to fix it :)

[03:47] <teatime> (I, however, wouldn't be shocked if neovim fixes the problem before vim...)

[03:47] <Geth> ¦ rakudo/full-make-test: c9913277c9 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[03:47] <Geth> ¦ rakudo/full-make-test: Consistify interface

[03:47] <Geth> ¦ rakudo/full-make-test: 

[03:47] <Geth> ¦ rakudo/full-make-test: By allowing Seq :out/:err tests, since we allow Seqs for $code

[03:47] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/c9913277c9

[03:47] <ryn1x> Zoffix: LG UltraFine 5k. It is really nice, but quite pricey.

[03:47] <Geth> ¦ rakudo/full-make-test: f8edb82957 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[03:47] <Geth> ¦ rakudo/full-make-test: Document test helpers

[03:47] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/f8edb82957

[03:48] <Geth> ¦ rakudo: zoffixznet++ created pull request #1187: Full make test

[03:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1187

[03:48] <squashable6> 🍕 zoffixznet++ opened pull request “Full make test”: https://github.com/rakudo/rakudo/pull/1187

[03:48] <squashable6> 🍕 zoffixznet++ merged pull request “Full make test”: https://github.com/rakudo/rakudo/pull/1187

[03:48] <Zoffix> yeah boiii

[03:49] <Zoffix> ryn1x: fancy :o  I'm on 1440p and 1050p monitors feel rather interior by comparison. 5k sounds heavenly, though I guess I'd need several monster video cards to be able to game on it properly

[03:49] *** wamba joined
[03:50] <Zoffix> For some reason Geth fails to notify about merge of PRs with many commits

[03:51] <AlexDaniel_> Zoffix: this last merge… doesn't look quite right

[03:51] <AlexDaniel_> maybe there's a reason for it but it's weird

[03:51] <AlexDaniel_> so it's a bunch of commits rebased on something? Hmmm…

[03:51] <ryn1x> Zoffix: Oh yeah... you are not gaming on this thing ha. I think 1440 is still the sweetspot for gamers.

[03:51] *** Cabanossi left
[03:52] <Zoffix> AlexDaniel_: what's weird?

[03:53] <AlexDaniel_> Zoffix: basically, all of the latest commits show up twice

[03:53] <AlexDaniel_> Zoffix: once normally and once rebased by you, or something

[03:53] <AlexDaniel_> or do they

[03:53] <Zoffix> AlexDaniel_: ah, yeah, they were rebased when I was pulling in master. The same thing happened when I was working on IO::CatHandle in a branch, so I know it doesn't break anything, but no idea how to avoid this duplication stuff

[03:54] <AlexDaniel_> Zoffix: something does --rebase in your workflow, I think

[03:54] <Zoffix> Yeah, I did it myself

[03:54] *** Cabanossi joined
[03:54] <Zoffix> Is it wrong? I always did it this way

[03:54] <teatime> I could have sworn I installed a *different* Perl6 syntax file and it being much better... perhaps it was just a *newer* one than what shiped with my vim ...

[03:54] <AlexDaniel_> so that's how you avoid it… :)

[03:54] <AlexDaniel_> just merge instead

[03:54] <Zoffix> AlexDaniel_: how?

[03:55] <Zoffix> Currently, I did `git pull --rebase https://github.com/rakudo/rakudo/` to bring in new stuff from master to my branch

[03:56] <AlexDaniel_> Zoffix: git checkout nom; git pull; git checkout YOURBRANCH; git merge nom

[03:56] <AlexDaniel_> I think

[03:56] <Zoffix> k, I'll try that next time

[03:57] <AlexDaniel_> that will create a merge commit and that's ok, one merge commit is better than tens of duplicated commits

[03:57] *** mudguts left
[03:57] <Zoffix> Yeah

[03:58] <Zoffix> AlexDaniel_: how do TimToady and jnthn pull in stuff? I seen no merge commits when they pull in master

[03:58] <AlexDaniel_> maybe they rebase their branch instead?

[03:58] <Zoffix> How to do that?

[03:58] <AlexDaniel_> on top of nom HEAD

[03:59] <Zoffix> Ahh, right. Probably

[03:59] <Zoffix> Maybe one day I'll actually learn git :)

[03:59] <Zoffix> https://xkcd.com/1597/

[03:59] <AlexDaniel_> that I don't know by heart :)

[04:00] <AlexDaniel_> should be something easy like ｢git rebase nom｣ instead of ｢git merge nom｣ but I have no idea actually

[04:01] <AlexDaniel_> yea

[04:01] <Zoffix> I think that's what I did basically, but TimToady and jnthn don't use GitHub to merge to master and I guess they just rebase to master or whatever

[04:02] <Zoffix> squashable6: log

[04:02] <squashable6> Zoffix, Log and stats: https://gist.github.com/dbbec790ed026a6a8fba4f1020dcfe78

[04:02] <Zoffix> squashable6: status

[04:02] <squashable6> Zoffix, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈7 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[04:02] <squashable6> Zoffix, Log and stats: https://gist.github.com/b28c4e8c62f4b3b38d0179f2e0cde70f

[04:02] <AlexDaniel_> Zoffix: that's not exactly the same

[04:03] *** stux|RC joined
[04:03] <AlexDaniel_> but now that I think about it I really don't know… git pull --rebase should've done exactly the same /o\

[04:04] *** mudguts joined
[04:05] *** ryn1x left
[04:08] <Zoffix> AlexDaniel_: so RT#127775 ... why is it reblessing to an Int? Are enums forced to be all of the same type?

[04:08] <synopsebot> RT#127775 [new]: https://rt.perl.org/Ticket/Display.html?id=127775 Declaring enums with Bools, IntStrs and maybe other things ( enum Foo (:Bar(1), :Baz(True) ))

[04:09] <AlexDaniel_> Zoffix: as I understand it, there's some low-level reason for it

[04:09] <AlexDaniel_> all this stuff is compile-time and scary

[04:10] <AlexDaniel_> you can try removing rebless, it didn't compile for me

[04:11] <AlexDaniel_> oh also, it doesn't really rebless to Int I think

[04:11] <AlexDaniel_> it reblesses to Foo (enum type object)

[04:13] <Zoffix> m: enum Foo (:1a, :b<b>, :c<c>);

[04:13] <camelia> rakudo-moar 39d50a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Type error in enum. Got 'Str' Expected: 'Int'␤at <tmp>:1␤------> 3enum Foo (:1a, :b<b>, :c<c>)7⏏5;␤»

[04:13] *** raschipi joined
[04:14] <Zoffix> Yeah, looks like same type is expected

[04:16] <Zoffix> m: enum Foo (:a<42>, :b(42));

[04:16] <camelia> rakudo-moar 39d50a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Multi method 'Str' with signature :(Foo:D $: *%_) must be resolved by class Foo because it exists in multiple roles (StringyEnumeration, NumericEnumeration)␤at <tmp>:1␤»

[04:16] * Zoffix puts the ticket back into the pile

[04:16] <Zoffix> enums are really gross

[04:17] <AlexDaniel_> actually, this probably means that your enums should be either stringy or numeric…

[04:17] <AlexDaniel_> and the error message above simply says that there's a bug, you can't have both at the same time

[04:18] *** thou left
[04:38] *** evalable6 left
[04:38] *** evalable6 joined
[04:38] *** ChanServ sets mode: +v evalable6

[04:44] * Zoffix rejects RT#125344

[04:44] <synopsebot> RT#125344 [rejected]: https://rt.perl.org/Ticket/Display.html?id=125344 [PERF] Int..Whatever ranges are slow (~20 times slower than Int..Int)

[04:44] <Zoffix> Rejections still count towards SQUASHathon right? :)

[04:45] *** pilne left
[04:49] <AlexDaniel_> yes

[04:50] *** BenGoldberg left
[04:51] <AlexDaniel_> Zoffix: but… why does it have to be lazy?

[04:52] <AlexDaniel_> ah, the whole returned thing is lazy

[04:52] <AlexDaniel_> hm, nope?

[04:52] * AlexDaniel_ doesn't get it

[04:54] <Zoffix> m: say (1, 2, 3)[^10]

[04:54] <camelia> rakudo-moar 39d50a: OUTPUT: «(1 2 3 Nil Nil Nil Nil Nil Nil Nil)␤»

[04:54] <AlexDaniel_> “0..* is a lazy Iterable” – no? It's just a range object? Can't [] just look at the range object and decide to do 0..$end ?

[04:54] <Zoffix> m: say (1, 2, 3)[lazy ^10]

[04:54] <camelia> rakudo-moar 39d50a: OUTPUT: «(1 2 3)␤»

[04:54] <Zoffix> Range does Iterable

[04:54] <AlexDaniel_> lazy returns a Seq

[04:55] <Zoffix> Seq is also iterable

[04:55] * Zoffix doesn't get what AlexDaniel_ is getting at

[04:55] <AlexDaniel_> with 0..* you're working with a Range object directly, there's all information there to make it fast

[04:55] <squashable6> 🍕 bitrauser++ synchronize pull request “Add tests for RT#125466”: https://github.com/perl6/roast/pull/344

[04:55] <Zoffix> AlexDaniel_: look at my evals above. The extra work is not in reifying the indices.

[04:55] <synopsebot> RT#125466 [open]: https://rt.perl.org/Ticket/Display.html?id=125466 [MATH] bitwise shift is inconsistent on int

[04:56] *** thou joined
[04:56] <squashable6> 🍕 zoffixznet++ merged pull request “Add tests for RT#125466”: https://github.com/perl6/roast/pull/344

[04:56] <Geth> ¦ roast: 447ceef0d2 | Joel++ (committed by Zoffix Znet) | S03-operators/bit.t

[04:56] <squashable6> 🍕 zoffixznet++ wrote a comment on “Add tests for RT#125466”: https://github.com/perl6/roast/pull/344#issuecomment-334983274

[04:56] <Geth> ¦ roast: Add tests for RT#125466 (#344)

[04:56] <Geth> ¦ roast: 

[04:56] <Geth> ¦ roast: * Add tests for RT#125466

[04:56] <Geth> ¦ roast: 

[04:56] <Geth> ¦ roast: * Bump `plan`

[04:56] <Geth> ¦ roast: 

[04:57] <Geth> ¦ roast: * Add missing types and "todo fudge" unclear cases

[04:57] *** Aaronepower joined
[04:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/447ceef0d2

[04:58] *** Aaronepower left
[04:58] <AlexDaniel_> Zoffix: sorry, but in what? I don't understand the point

[04:58] <Geth> ¦ roast: 6aa3422b63 | (Zoffix Znet)++ | S03-operators/bit.t

[04:58] <Geth> ¦ roast: Change todo fudges to skip

[04:58] <Geth> ¦ roast: 

[04:58] <Geth> ¦ roast: So they don't get reported on stresstests as passing todos

[04:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6aa3422b63

[04:59] <AlexDaniel_> to me it seems that both [0..*] and [0..$end] give exactly the same result. If not, what's the difference between these results?

[04:59] <Zoffix> AlexDaniel_: see my evals above. They clearly have different behaviours -_-

[05:00] <AlexDaniel_> Zoffix: your evals above don't show @arr[0..*] and @arr[0..$end]

[05:00] <AlexDaniel_> oh

[05:00] <Zoffix> AlexDaniel_: lazy iterables as indeces stop when the iterable they're indexing ends, while non-lazy ones continue returning Nils. The [0..*] has to do extra work to figure out where the iterable ends while [0..$end] don't got to do anything

[05:00] <AlexDaniel_> Zoffix: OK I'm stupid, I see now!

[05:01] <squashable6> 🍕 samcv++ edited pull request “Add tests for RT#125466”: https://github.com/perl6/roast/pull/344

[05:01] <AlexDaniel_> or do I…

[05:01] <AlexDaniel_> no. I don't

[05:01] <squashable6> 🍕 samcv++ edited pull request “Add tests for RT#125466 …”: https://github.com/perl6/roast/pull/344

[05:01] <AlexDaniel_> the claim is that 0..$end is faster, why can't 0..* do the same?

[05:01] <AlexDaniel_> it doesn't have to figure it out, it can just use $end

[05:02] <Zoffix> No it can't

[05:03] * AlexDaniel_ shrugs… the information is right there, finding out the value of $end can't take that much time

[05:03] <AlexDaniel_> Zoffix: anyway, let's give somebody else to take a look at it with fresh eyes, or something

[05:04] <AlexDaniel_> a chance*

[05:06] *** Aaronepower joined
[05:06] *** Cabanossi left
[05:07] <Zoffix> m: my @a = 1..10; @a[2]:delete; say @a[0..*]

[05:07] <camelia> rakudo-moar 39d50a: OUTPUT: «(1 2)␤»

[05:07] <Zoffix> m: my @a = 1..10; @a[2]:delete; say @a[0..@a.end]

[05:07] <camelia> rakudo-moar 39d50a: OUTPUT: «(1 2 (Any) 4 5 6 7 8 9 10)␤»

[05:07] <Zoffix> currently, it stops at the first hole too

[05:07] *** aborazmeh joined
[05:07] *** aborazmeh left
[05:07] *** aborazmeh joined
[05:08] *** Aaronepower left
[05:08] <AlexDaniel_> isn't it a bug?

[05:09] <Zoffix> There's a ticktet for it, yeah, but the source comment reads "We truncate at the first one that fails to exists."; dunno if the author thought about holes

[05:09] *** Cabanossi joined
[05:09] <Zoffix> in src/core/

[05:10] <Zoffix> in src/core/array_slice.pm

[05:11] *** mudguts left
[05:12] *** kaare__ joined
[05:12] <AlexDaniel_> I found RT #131783 but that's not the right one, do you remember the ticket id?

[05:12] <synopsebot> RT#131783 [open]: https://rt.perl.org/Ticket/Display.html?id=131783 [LTA] :delete holes in Arrays get turned to Mus when coercing to List or Slip

[05:13] <Zoffix> #127573

[05:13] <Zoffix> RT#127573

[05:13] <synopsebot> RT#127573 [new]: https://rt.perl.org/Ticket/Display.html?id=127573 Lazy range as Array index stops at first deleted index unexpectedly

[05:14] <Zoffix> Looks like it can be safely deemed a bug, since it affects .splice apparently

[05:15] *** Aaronepower joined
[05:16] *** hoffentlichja left
[05:17] *** Aaronepower left
[05:17] *** HoboWithAShotgun joined
[05:18] *** Aaronepower joined
[05:19] *** Aaronepower left
[05:19] <Zoffix> m: my @a = 1..10;  @a[(1..10) but role { method iterator { ^3 .iterator } }].say

[05:19] <camelia> rakudo-moar 39d50a: OUTPUT: «(1 2 3)␤»

[05:19] <Zoffix> Though there's userlange Ranges to consider too... .oO( nqp::iscoretype(...) )

[05:22] <AlexDaniel_> Zoffix: okay I think I did my best trying to explain myself: https://rt.perl.org/Ticket/Display.html?id=125344#txn-1497369

[05:22] <AlexDaniel_> but my brains are squashathoned away so please don't be angry at me if I'm saying something really stupid

[05:23] *** mr-foobar left
[05:24] * teatime idly wonders why ssh doesn't default to -t when local side is connected to a terminal

[05:25] *** atroxaper joined
[05:25] <atroxaper> o/ #perl6

[05:25] <bitrauser> atroxaper: o/

[05:25] <Zoffix> \o

[05:26] <atroxaper> Can not find information about 'how to write it' :)

[05:26] <Zoffix> Write what?

[05:27] <atroxaper> Foo $obj.field-name will call method .field-name. $obj!field-name will get field itself. Right?

[05:28] *** araujo_ joined
[05:28] <Zoffix> Oh wait. $todo.WHAT === Range should do it

[05:28] * Zoffix hackety hacks

[05:28] <Zoffix> atroxaper: right

[05:29] <atroxaper> If Foo has Foo field inside. How can I write something like method foo-obj-method() { self!foo-field!private-field } ?

[05:30] <atroxaper> I found only self!foo-field.private-field. But is it method call instead of field access.

[05:30] <Zoffix> does foo-field's object trust the owner of the method?

[05:30] *** Aaronepower joined
[05:30] <Zoffix> Ah. No idea

[05:31] <Zoffix> I mean, without nqp... since it's a private access and it's not private up in there.

[05:31] <Zoffix> Why you need that anyway?

[05:31] <atroxaper> But they have the same Object Type.

[05:31] <atroxaper> In Java I can write that.

[05:32] *** araujo left
[05:32] <atroxaper> For example I what to write LinkedList. And Node can operate its next and prev link. Recursevly :)

[05:33] *** mr-foobar joined
[05:34] <Zoffix> Well, you can define a private method and call it.

[05:34] <atroxaper> Probably. Ok then :)

[05:34] <Zoffix> m: class Foo { has $!bar = 42; has $!o; method BUILD(:$x) { $!o = ::?CLASS.new if $x }; method !bar is rw { $!bar }; method z { $!o!bar } }; Foo.new(:x).z.say

[05:34] <camelia> rakudo-moar 39d50a: OUTPUT: «42␤»

[05:35] *** raschipi left
[05:36] <atroxaper> Yeah. It works with private method< but not with private fields...

[05:37] *** Wiertek joined
[05:37] <Zoffix> m: use nqp; class Foo { has $!bar = 42; has $!o; method BUILD(:$x) { $!o = ::?CLASS.new if $x }; method z { nqp::getattr($!o, ::?CLASS, q|$!bar|) } }; Foo.new(:x).z.say

[05:37] <camelia> rakudo-moar 39d50a: OUTPUT: «P6opaque: no such attribute '$!bar' in type Foo when trying to get a value␤  in method z at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[05:37] <Zoffix> m: use nqp; class Foo { has $!bar = 42; has $!o; method BUILD(:$x) { $!o = ::?CLASS.new if $x }; method z { nqp::getattr(nqp::decont($!o), ::?CLASS, q|$!bar|) } }; Foo.new(:x).z.say

[05:37] <camelia> rakudo-moar 39d50a: OUTPUT: «42␤»

[05:38] <Zoffix> (P.S.: nqp is not user-land material and there's no support for it)

[05:38] <Zoffix> can be changed at any time without notice

[05:39] <atroxaper> I understand that, sure. Will write private methods then.

[05:41] <AlexDaniel_> atroxaper: maybe another option is not to hide these attributes?

[05:42] <AlexDaniel_> like, make them public

[05:43] <atroxaper> They a public. But inside the class I what to call field instead of method.

[05:44] <atroxaper> Maybe without a purpose :)

[05:53] <atroxaper> Does we have 'static' methods?

[05:55] <Zoffix> What are those?

[05:57] <atroxaper> Methods that we can call without object. Just with Type Object.

[05:57] *** evalable6 left
[05:57] *** evalable6 joined
[05:57] *** ChanServ sets mode: +v evalable6

[05:57] <atroxaper> Oh. I remembered. Any methods are static until they access fields :)

[05:57] <Zoffix> Yeah

[06:00] *** rindolf joined
[06:06] <Geth> ¦ rakudo/nom: 456358e3c3 | (Zoffix Znet)++ | src/core/array_slice.pm

[06:06] <Geth> ¦ rakudo/nom: Make @a[42..*] 4.2x faster; AlexDaniel++ for persistence

[06:06] <Geth> ¦ rakudo/nom: 

[06:06] <Geth> ¦ rakudo/nom: - Faster with any Inf .max Range

[06:06] <Geth> ¦ rakudo/nom: - Faster only with non-lazy @a (we can't .elems lazies)

[06:06] <Geth> ¦ rakudo/nom: - Fixes RT#125344: https://rt.perl.org/Ticket/Display.html?id=125344

[06:06] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/456358e3c3

[06:06] <synopsebot> RT#125344 [open]: https://rt.perl.org/Ticket/Display.html?id=125344 [PERF] Int..Whatever ranges are slow (~20 times slower than Int..Int)

[06:07] *** Aaronepower left
[06:07] <teatime> AlexDaniel_: would it be acceptable/appropriate for me to throw some notes from the earlier vim discussion (and my related googling etc.) to https://github.com/perl6/perl6.org/issues/84 ?  it's links & info that I would find useful, if I were to extend the Whatever blurb about vim [and neovim] as a Perl6 editor.  (but it's probably pretty off-topic/orthogonal to that *particular* issue title...  can I 

[06:07] <teatime> retitle it? :)

[06:08] <AlexDaniel_> teatime: go for it

[06:08] <AlexDaniel_> teatime: and I'm very used to wiki-like development so feel free to edit any of my issues and comments

[06:08] <Zoffix> teatime: you can also just edit the page and close the Issue: https://github.com/perl6/perl6.org/blob/master/source/whatever/index.html

[06:10] <AlexDaniel_> 42..* 4.2x faster? :)

[06:11] <AlexDaniel_> .oO( what about 100..* )

[06:11] <Zoffix> also 4.2

[06:11] *** Aaronepower joined
[06:12] <AlexDaniel_> wrong, because my array has less than 100 elements!

[06:12] *** ryn1x joined
[06:12] *** Aaronepower left
[06:13] <Zoffix> In that case, 58% faster

[06:13] <AlexDaniel_> anyway, Zoffix++ :)

[06:14] <Zoffix> AlexDaniel_++

[06:14] <AlexDaniel_> with enough nerves for all this tension people can do great things!

[06:16] <teatime> Zoffix: I most likely will, but for the moment I need to context-switch to non-perl (and this way, I have a reminder & my notes preserved :)

[06:19] <AlexDaniel_> squashable6: status

[06:19] <squashable6> AlexDaniel_, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈5 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[06:19] <squashable6> AlexDaniel_, Log and stats: https://gist.github.com/db74f19170d3f042b72deeac0a86b705

[06:22] *** Aaronepower joined
[06:23] *** Aaronepower left
[06:28] * HoboWithAShotgun wishes atom would support code folding

[06:29] *** Aaronepower joined
[06:29] * Zoffix sees dozens of packages show up when searching for "folding"

[06:30] <squashable6> 🍕 bitrauser++ opened pull request “Add tests for RT#132083 …”: https://github.com/perl6/roast/pull/345

[06:30] <Geth> ¦ roast: bitrauser++ created pull request #345: Add tests for RT#132083 | [REGRESSION] Broken math (-2147483648 != -2147483648)

[06:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/345

[06:30] <synopsebot> RT#132083 [new]: https://rt.perl.org/Ticket/Display.html?id=132083 [REGRESSION] Broken math (-2147483648 != -2147483648)

[06:33] *** kaare__ left
[06:33] <Zoffix> bitrauser: I sent you an invite to perl6 github org (can accept it on https://github.com/perl6/ ). That gives you a commit bit to most of our repos, so you should be able to merge that PR and commit anything else directly

[06:36] <AlexDaniel_> well, eh… I've got a very ugly fix for something :S

[06:37] <bitrauser> Zoffix: Wow that's nice, actually feeling honored. Not sure I'm ready yet.

[06:38] <AlexDaniel_> bitrauser: I believe in you!

[06:39] <AlexDaniel_> loop (42;42) {} # Malformed loop spec (expected 3 semicolon-separated expressions but got 2)

[06:39] <AlexDaniel_> loop (my $x = 0, $x < 5, $x++) {} # Malformed loop spec (expected 3 semicolon-separated expressions but got 1)

[06:40] <AlexDaniel_> awesome? Awesome. As long as you don't look at the code that does this /o\

[06:42] *** aborazmeh left
[06:43] <HoboWithAShotgun> yes, i stumbled over https://github.com/perl6/Atom-as-a-Perl6-IDE

[06:43] <HoboWithAShotgun> great stuff, but i can't get nav-panel-plus to work

[06:44] <HoboWithAShotgun> it installed but the panel won't show up

[06:44] *** thou left
[06:47] *** kaare__ joined
[06:52] *** jeromelanteri left
[06:53] *** jeromelanteri joined
[06:54] <squashable6> 🍕 bitrauser++ merged pull request “Add tests for RT#132083 …”: https://github.com/perl6/roast/pull/345

[06:54] <HoboWithAShotgun> "But for now you can use .nav-marker-rules as the instructions show."

[06:54] <Geth> ¦ roast: b2a148d684 | bitrauser++ | S03-operators/arith.t

[06:54] <Geth> ¦ roast: Add tests for RT#132083

[06:54] <synopsebot> RT#132083 [resolved]: https://rt.perl.org/Ticket/Display.html?id=132083 [REGRESSION] Broken math (-2147483648 != -2147483648)

[06:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b2a148d684

[06:54] <Geth> ¦ roast: 64227ec7a2 | Joel++ (committed using GitHub Web editor) | S03-operators/arith.t

[06:54] <HoboWithAShotgun> which effing instructions?

[06:54] <Geth> ¦ roast: Add tests for RT#132083 (#345) 

[06:54] <Geth> ¦ roast: 

[06:54] <Geth> ¦ roast: Add tests for RT#132083 | [REGRESSION] Broken math (-2147483648 != -2147483648)

[06:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/64227ec7a2

[06:55] *** nadim_ joined
[06:59] <Zoffix> HoboWithAShotgun: I think samcv++ wrote that stuff; perhaps she can explain the missing bits

[06:59] <samcv> oh hello

[07:00] <samcv> ah hey HoboWithAShotgun 

[07:00] *** kaare__ left
[07:01] <HoboWithAShotgun> good morning good sir

[07:01] <samcv> lemme just start up my atom then i'll help you. i know sometimes when you first install it you have to do something to get it to show up. since by defualt it's disabled

[07:02] <HoboWithAShotgun> and lady

[07:02] <HoboWithAShotgun> oh it works for other languages

[07:03] <HoboWithAShotgun> just not for Perl6, the doc talks about nav-marker-rules

[07:03] <HoboWithAShotgun> that i should use and instructions therefore

[07:03] <HoboWithAShotgun> i just can't find any, or am i supposed to apply that pull request?

[07:04] <samcv> ok you can right click and choose show

[07:05] <samcv> "toggle nav panel plus"

[07:05] <samcv> HoboWithAShotgun, oh. no the PR has been applied

[07:05] <samcv> i can update the readme though

[07:06] <samcv> lemme check

[07:08] <samcv> hmm. it is applied and they released. but not working atm for me. i'm investigating

[07:09] <HoboWithAShotgun> well it doesn't work. the panel is there for other files like .coffe, but disappers for perl6 types

[07:09] <HoboWithAShotgun> my apt says atom is up to date

[07:10] <samcv> yeah i'm seeing that too

[07:10] <HoboWithAShotgun> Atom    : 1.20.0, Electron: 1.6.9, Chrome  : 56.0.2924.87, Node    : 7.4.0

[07:10] *** domidumont joined
[07:10] <HoboWithAShotgun> also i read that change being reverted cause it operate on the wrong file

[07:11] *** atroxaper left
[07:15] <samcv> well yeah it doesn't seem to be working

[07:15] *** domidumont left
[07:15] *** domidumont joined
[07:16] <samcv> ah i see

[07:16] <samcv> well you can put https://github.com/perl6/Atom-as-a-Perl6-IDE/blob/master/config/.nav-marker-rules in the folder of the project

[07:16] <samcv> launch atom from within that folder and it should then work

[07:17] <HoboWithAShotgun> yes, that's the droid i was looking for

[07:18] <HoboWithAShotgun> you may pass now :)

[07:18] <HoboWithAShotgun> can you update the doc and link this file therein?

[07:20] *** darutoko joined
[07:20] *** kaare__ joined
[07:20] <HoboWithAShotgun> yay, works

[07:21] * HoboWithAShotgun shares chocolate peach cake with samcv

[07:21] <HoboWithAShotgun> just one slice!

[07:24] <samcv> thanks :)

[07:32] <teatime> is audrey tang one of y'all?

[07:34] <Zoffix> `She's busy being Minister of Digital of Taiwan

[07:34] <samcv> HoboWithAShotgun, i updated the doc

[07:34] <samcv> Zoffix, fancy :)

[07:35] <Zoffix> teatime: audreyt is the IRC nick, if you wanted to read logs :)

[07:36] <teatime> huh.  that's pretty cool.  (just read her wikipedia page.)

[07:38] *** Cabanossi left
[07:38] <AlexDaniel_> ===SORRY!===

[07:38] <AlexDaniel_> Frame 1 local access out of range

[07:38] <AlexDaniel_> hmm

[07:39] *** Cabanossi joined
[07:39] <HoboWithAShotgun> m: say $*KERNEL, '#', $*DISTRO

[07:39] <camelia> rakudo-moar 456358: OUTPUT: «linux (4.4.70.18.9.default)#opensuse (42.2)␤»

[07:40] <HoboWithAShotgun> m: say qx{ stty size }

[07:40] <camelia> rakudo-moar 456358: OUTPUT: «qx, qqx is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub QX at src/RESTRICTED.setting line 11␤  in block <unit> at <tmp> line 1␤␤»

[07:40] <HoboWithAShotgun> good :)

[07:41] <HoboWithAShotgun> maybe sucha restricted seeting shouldn't talk about OS details as well

[07:41] <teatime> (sorry guys if I've been a bit hyper/off-topic this eve... did 16-hour day today as pollworker for election, and the end of it was stress++)

[07:45] *** Mrofnet joined
[07:47] *** smls joined
[07:48] *** Morfent left
[07:48] *** araraloren joined
[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: a757328bdd | (Aleks-Daniel Jakimenko-Aleksejev)++ | src/Perl6/Grammar.nqp

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: Awesomify “malformed loop spec” errors

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: 

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: This is a questionable fix for RT #127857.

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: 

[07:48] <synopsebot> RT#127857 [new]: https://rt.perl.org/Ticket/Display.html?id=127857 [RFC] [LTA] error message when using commas in c-style “loop” (loop (my $x = 0, $x < 10, $x++) {})

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: Makes each parse of a loop construct 0.04 ms slower. So if you have

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: one hundred ｢loop｣-s in your code, that's already about four

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: milliseconds slower.

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: 

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: Also breaks one 6.c-errata test that checks for “loop spec” text.

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: review: https://github.com/rakudo/rakudo/commit/a757328bdd

[07:49] <Geth> ¦ rakudo: AlexDaniel++ created pull request #1188: Awesomify “malformed loop spec” errors

[07:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1188

[07:49] <squashable6> 🍕 AlexDaniel++ opened pull request “Awesomify “malformed loop spec” errors”: https://github.com/rakudo/rakudo/pull/1188

[07:49] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Awesomify “malformed loop spec” errors”: https://github.com/rakudo/rakudo/pull/1188#issuecomment-334989585

[07:49] *** thunktone joined
[07:50] <smls> Oh, 🍕 is still going on?

[07:50] <Zoffix> squashable6: status

[07:50] <squashable6> Zoffix, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈4 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[07:50] <squashable6> Zoffix, Log and stats: https://gist.github.com/bacbebf576af814b10dc58f105cbdbf6

[07:50] <Zoffix> Yup

[07:51] <smls> Unrelated question: When dealing with an IO::Proc that responds with one line of output for every line of input, is it safe to do this in a loop:

[07:51] <smls>     $proc.in.print: "$input\n";  my $output = $proc.out.lines.head;

[07:52] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Awesomify “malformed loop spec” errors”: https://github.com/rakudo/rakudo/pull/1188#issuecomment-334989717

[07:52] <smls> Or is creating a new .lines Seq on each iteration cause some problems down the road?

[07:53] <Zoffix> eco: IO::Proc

[07:53] <buggable> Zoffix, Nothing found

[07:54] * Zoffix has no idea what that is

[07:54] <Zoffix> smls: seems easier to just call .get

[07:54] *** ryn1x left
[07:54] <smls> Zoffix: I meant the built-in `Proc`, sorry.

[07:55] <smls> Ah, I forgot about get! Thank.

[07:55] <smls> *Thanks

[07:55] *** ryn1x joined
[07:55] <Zoffix> But don't think there'd be any problems with .lines, other than wasted effort of creating and GCing the Seq

[07:56] <squashable6> 🍕 AlexDaniel++ wrote a comment on “Awesomify “malformed loop spec” errors”: https://github.com/rakudo/rakudo/pull/1188#issuecomment-334989899

[07:56] <AlexDaniel_> you wouldn't believe how much time I've spent on this…

[07:56] <Geth> ¦ roast: bitrauser++ created pull request #346: Add tests for RT#125215 | [BUG] 10 ** -1 is a Num, but should probably be a Rat since it can in Rakudo

[07:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/346

[07:56] <squashable6> 🍕 bitrauser++ opened pull request “Add tests for RT#125215 …”: https://github.com/perl6/roast/pull/346

[07:56] <synopsebot> RT#125215 [open]: https://rt.perl.org/Ticket/Display.html?id=125215 [BUG] 10 ** -1 is a Num, but should probably be a Rat since it can in Rakudo

[07:59] *** Voldenet left
[08:01] <squashable6> 🍕 zoffixznet++ wrote a comment on “Add tests for RT#125215 …”: https://github.com/perl6/roast/pull/346#issuecomment-334990184

[08:01] <bitrauser> forgot the bump again on the commit just noticed

[08:02] *** thunktone left
[08:02] * Zoffix didn't notice >_<

[08:02] <Zoffix> :)

[08:03] <Zoffix> m: -> (*%_) {dd %_}(Failure.new)

[08:03] <camelia> rakudo-moar 456358: OUTPUT: «{:backtrace(Backtrace.new), :exception(X::AdHoc.new(payload => "Failed"))}␤»

[08:03] <Zoffix> Gonna make it blow up

[08:04] *** ryn1x left
[08:04] *** Voldenet joined
[08:04] *** Voldenet left
[08:04] *** Voldenet joined
[08:05] *** ryn1x joined
[08:05] <squashable6> 🍕 bitrauser++ synchronize pull request “Add tests for RT#125215 …”: https://github.com/perl6/roast/pull/346

[08:06] *** thunktone joined
[08:07] <bitrauser> Starting to get tired ^^

[08:07] <AlexDaniel_> buggable: pizza bitrauser

[08:08] <buggable> bitrauser, enjoy this slice of Vegan pizza, my friend! Yummy 🍕

[08:08] <AlexDaniel_> bitrauser: at least you didn't spend more than 4 hours on one LTA ticket like I did…

[08:08] <AlexDaniel_> (and in the end didn't even come up with a good solution)

[08:09] <AlexDaniel_> bitrauser: so good job :)

[08:09] <bitrauser> Pizza sounds good :)

[08:10] <AlexDaniel_> squashable6: status

[08:10] <squashable6> AlexDaniel_, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈3 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[08:10] <squashable6> AlexDaniel_, Log and stats: https://gist.github.com/0b50f9198c5b85aca44f3636a4ae85a5

[08:12] <squashable6> 🍕 bitrauser++ merged pull request “Add tests for RT#125215 …”: https://github.com/perl6/roast/pull/346

[08:12] <Geth> ¦ roast: a55c0f4ae5 | Joel++ (committed using GitHub Web editor) | S32-num/rat.t

[08:12] <Geth> ¦ roast: Add tests for RT#125215 | [BUG] 10 ** -1 is a Num, but should probably be a Rat since it can in Rakudo (#346)

[08:12] <Geth> ¦ roast: 

[08:12] <synopsebot> RT#125215 [resolved]: https://rt.perl.org/Ticket/Display.html?id=125215 [BUG] 10 ** -1 is a Num, but should probably be a Rat since it can in Rakudo

[08:12] <Geth> ¦ roast: * Add tests for RT#125215

[08:12] <Geth> ¦ roast: 

[08:12] <Geth> ¦ roast: * Bump `plan`

[08:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a55c0f4ae5

[08:13] *** ryn1x left
[08:14] * AlexDaniel_ laughs at RT #127980

[08:14] <synopsebot> RT#127980 [rejected]: https://rt.perl.org/Ticket/Display.html?id=127980 Smartmatching $item ~~ list does not DWIM (4 ~~ (4,5,6,7))

[08:14] *** ryn1x joined
[08:14] <AlexDaniel_> “The concept of the Perl 6 smart-matching operator, is not "Do whatever operation the developer thinks would be most useful in the given situation so he doesn't have to write it out explicitly".”

[08:14] <AlexDaniel_> why is it called *smart*match then :D

[08:17] <AlexDaniel_> that's dumbmatch right there!

[08:17] <AlexDaniel_> anyway, the ticket is rejected correctly :)

[08:18] <stmuk> it means the language is smart 

[08:20] <Geth> ¦ rakudo/nom: 8300844303 | (Zoffix Znet)++ | 2 files

[08:20] *** araraloren_ joined
[08:20] <Geth> ¦ rakudo/nom: Do not explode in IO::CatHandle.nl-out

[08:20] <Geth> ¦ rakudo/nom: 

[08:20] <Geth> ¦ rakudo/nom: Doing so breaks .Capture, which is more important than throwing

[08:20] <Geth> ¦ rakudo/nom: in a feature clearly documented as NYI

[08:20] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8300844303

[08:22] *** araraloren left
[08:23] <AlexDaniel_> c: all say 'Hello'; *...'WAT'

[08:23] <tyil> how long does it take for perl 6 modules on cpan to show up on modules.perl6.org?

[08:23] <committable6> AlexDaniel_, https://gist.github.com/d515acf8181f9d390081a2eb60580d4f

[08:23] *** smls left
[08:24] <HoboWithAShotgun> m: my %a; %a<a, b>  = <1 2>; say %a

[08:24] <camelia> rakudo-moar 456358: OUTPUT: «{a, => 1, b => 2}␤»

[08:24] <HoboWithAShotgun> how do i do that anonymously?

[08:24] <Zoffix> tyil: 0..100 minutes

[08:24] <Zoffix> tyil: "In about 2 hours, the dist will also appear on modules.perl6.org. Its updater is started in a cron job on 20th and 40th minute of the hour (unless a job is already running) and it takes about 2 hours to finish each run."

[08:24] <tyil> hmm

[08:25] <HoboWithAShotgun> m: (<a b> Z <1 2>).flat.Hash.say

[08:25] <camelia> rakudo-moar 456358: OUTPUT: «{a => 1, b => 2}␤»

[08:25] <tyil> one of my modules is available on modules.perl6, but others arent

[08:25] <AlexDaniel_> bisectable6: old=2016.09 new=2016.10 say 'Hello'; *...'WAT'

[08:25] <bisectable6> AlexDaniel_, Bisecting by output (old=2016.09 new=2016.10) because on both starting points the exit code is 1

[08:25] <HoboWithAShotgun> that seems clumsy

[08:25] <bisectable6> AlexDaniel_, bisect log: https://gist.github.com/f5220f4b280d3947d80ae966d0716cc0

[08:25] <bisectable6> AlexDaniel_, (2016-09-27) https://github.com/rakudo/rakudo/commit/222d16b0b94911fdedb06ee6ad817d0f14b9c05c

[08:25] <Zoffix> m: %(<a b> Z=> <1 2>).say

[08:25] <camelia> rakudo-moar 456358: OUTPUT: «{a => 1, b => 2}␤»

[08:25] <tyil> in addition, my Hash::Merge module seems to be tested against p5 tests, even though its uploaded to $CPAN/authors/id/T/TY/TYIL/Perl6/Hash-Merge/Perl6/Hash-Merge-0.1.0.tar.gz

[08:26] <tyil> (there is a p5 Hash::Merge)

[08:26] <tyil> the same seems to happen for Config

[08:26] <Zoffix> It's possible the system has some bugs to iron out still

[08:26] <tyil> the ones with no p5 equivalent seem to be tested against p6 correctly

[08:26] <HoboWithAShotgun> what does z=> do? or is that a combination of Z and =>?

[08:26] <Zoffix> HoboWithAShotgun: yes

[08:27] <tyil> but only IRC::Client::Plugin::Github appears on modules.perl6 so far

[08:27] <Zoffix> HoboWithAShotgun: Z is equivalent to Z with "," op; Z=> uses "=>" instead

[08:27] <AlexDaniel_> bisectable6: old=2016.07.1 new=2016.08.1 say 'Hello'; *...'WAT'

[08:27] <bisectable6> AlexDaniel_, Bisecting by output (old=2016.07.1 new=2016.08.1) because on both starting points the exit code is 1

[08:27] <bisectable6> AlexDaniel_, bisect log: https://gist.github.com/74a1d1bea32406938a29be4faf594fcf

[08:27] <bisectable6> AlexDaniel_, (2016-08-19) https://github.com/rakudo/rakudo/commit/25e9fd76e85fabda20e263b6f87e27b0673f26e2

[08:27] <Zoffix> eco: author:TYIL

[08:27] <buggable> Zoffix, Found 2 results: MPD::AutoQueue, IRC::Client::Plugin::Github. See https://modules.perl6.org/s/author%3ATYIL

[08:27] <tyil> do the PAUSE/CPAN folk have their own irc channel?

[08:27] <Zoffix> tyil: yeah, but I forget what it is. mst would know

[08:28] *** ryn1x left
[08:29] *** ryn1x joined
[08:29] <Zoffix> tyil: why is "Perl6/" appear twice in that URL?

[08:30] <HoboWithAShotgun> i feel really bad for poor sods who will learm Perl6 as first language

[08:31] <HoboWithAShotgun> in the sense that they'll always feel somewhat amputated when having to use something else

[08:31] <tyil> Zoffix: idk

[08:32] <tyil> I told it to upload into Hash-Merge/Perl6

[08:32] <AlexDaniel_> what a title for a ticket… :D RT #128879

[08:32] <synopsebot> RT#128879 [new]: https://rt.perl.org/Ticket/Display.html?id=128879 [LTA] “is default” trait is compile-time, but no warning is printed when I do stupid things (is default($x))

[08:32] <tyil> it has appended an additional Perl6 for all my uploads

[08:32] <tyil> prepended*

[08:33] <HoboWithAShotgun> i mean look at this: return %( <rows columns> Z=> qx[ stty size ].comb(/\d+/) );

[08:33] <HoboWithAShotgun> you need 20 lines of c# for that

[08:33] <Zoffix> tyil: "well, there's yer problem"

[08:34] *** |oLa| left
[08:34] <tyil> :(

[08:34] <Zoffix> tyil: just select "Perl6" from the <select>; don't specify any other extra paths.

[08:35] <Zoffix> I'm guessing that's why it's going through perl5 channels. Modules.perl6.org has an exlude rule in rsync to toss stuff deeper in the tree, so I guess that's why those aren't showing up on it either

[08:35] <Zoffix> This one https://github.com/perl6/modules.perl6.org/blob/master/lib/ModulesPerl6/DbBuilder.pm#L139

[08:35] *** pecastro left
[08:36] <tyil> oh, I didnt know about stuff deeper in the tree being ignored

[08:36] <tyil> can I move the files on PAUSE or should i delete and re-up?

[08:36] * Zoffix isn't aware of any interface to move stuff

[08:37] *** Cabanossi left
[08:37] <Zoffix> c: HEAD dd %(<rows columns> Z=> qx/stty size/.words)

[08:37] <committable6> Zoffix, ¦HEAD(8300844): «stty: 'standard input': Inappropriate ioctl for device␤Hash % = {}»

[08:37] *** ryn1x left
[08:37] <AlexDaniel_> well, it's not a tty

[08:38] *** ryn1x joined
[08:39] *** Cabanossi joined
[08:39] *** dogbert17 left
[08:41] *** dogbert17 joined
[08:42] <buggable> New CPAN upload: App-MPD-AutoQueue-0.1.0.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/App-MPD-AutoQueue-0.1.0.tar.gz

[08:43] *** araraloren_ left
[08:43] <AlexDaniel_> alright, I'm done for today

[08:43] <AlexDaniel_> happy squashathoning everyone o/

[08:43] <Zoffix> \oi

[08:43] <AlexDaniel_> squashable6: status

[08:43] <squashable6> AlexDaniel_, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈3 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[08:43] <squashable6> AlexDaniel_, Log and stats: https://gist.github.com/9f178ca985456533ef3842e4a80ce7a8

[08:44] *** TEttinger left
[08:47] *** ryn1x left
[08:50] <HoboWithAShotgun> is there an operator so i can call something-that-might-return-any.method safely?

[08:50] <HoboWithAShotgun> c# as a ?. operator for that

[08:51] <AlexDaniel_> well, you can try .?

[08:52] <AlexDaniel_> IIRC it checks if a method exists… right? But chances are Any does not have your method

[08:53] <HoboWithAShotgun> oh. <- feels silly

[08:53] <HoboWithAShotgun> i tried $ob//.method

[08:53] <AlexDaniel_> m: class Foo { method bar { 42 } }; my $x = Foo.new; say $x.?bar

[08:53] <camelia> rakudo-moar 830084: OUTPUT: «42␤»

[08:53] <AlexDaniel_> m: class Foo { method bar { 42 } }; my $x = Any; say $x.?bar

[08:53] <camelia> rakudo-moar 830084: OUTPUT: «Nil␤»

[08:55] <HoboWithAShotgun> m: class Foo { method bar { %(:a(1) } }; my $x = Foo.new; say $x.?bar<a>

[08:55] <camelia> rakudo-moar 830084: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in contextualizer; couldn't find final ')' (corresponding starter was at line 1)␤at <tmp>:1␤------> 3class Foo { method bar { %(:a(1) 7⏏5} }; my $x = Foo.new; say $x.?ba…»

[08:55] <HoboWithAShotgun> m: class Foo { method bar { %(:a(1)) } }; my $x = Foo.new; say $x.?bar<a>

[08:55] <camelia> rakudo-moar 830084: OUTPUT: «1␤»

[08:56] <HoboWithAShotgun> m: class Foo { method bar { Any } }; my $x = Foo.new; say $x.?bar<a>

[08:56] <camelia> rakudo-moar 830084: OUTPUT: «(Any)␤»

[08:58] <Zoffix> 5am. Time for bed

[08:58] <Zoffix> squashable6: status

[08:58] <squashable6> Zoffix, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈3 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[08:58] <squashable6> Zoffix, Log and stats: https://gist.github.com/49830f1b965e4d3cb3b8b350f18a5c11

[08:59] <AlexDaniel_> 11:59:49 *AM*

[09:00] <AlexDaniel_> time for bed, too

[09:03] *** araraloren joined
[09:04] *** domidumont left
[09:08] *** ryn1x joined
[09:12] <buggable> New CPAN upload: App-MPD-AutoQueue-0.1.1.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/App-MPD-AutoQueue-0.1.1.tar.gz

[09:18] *** Merfont joined
[09:21] *** Mrofnet left
[09:21] *** itaipu joined
[09:22] <buggable> New CPAN upload: perl6-App-MPD-Notify.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/perl6-App-MPD-Notify.tar.gz

[09:23] <HoboWithAShotgun> how do i redirect STDERR to nul when doing a qx? 

[09:24] <HoboWithAShotgun> maybe i should use run instead?

[09:24] *** pecastro joined
[09:31] *** rba_ joined
[09:31] <HoboWithAShotgun> mmh. i tried qx[ sttyx size &>/dev/null ]

[09:32] <HoboWithAShotgun> but i still have "/bin/sh: 1: sttyx: not found" in my output

[09:33] *** rba left
[09:33] <go|dfish> HoboWithAShotgun: 2>/dev/null

[09:35] <HoboWithAShotgun> yay :)

[09:37] <lizmat>  not sure this was posted here already: https://www.infoq.com/presentations/language-design-perl

[09:37] *** Cabanossi left
[09:39] *** Cabanossi joined
[09:40] <HoboWithAShotgun> another site that doesn't work wiith JS off

[09:40] *** nadim_ left
[09:41] *** nadim joined
[09:41] <tyil> welcome to the internet in 2017

[09:42] <HoboWithAShotgun> it's readable at least

[09:45] *** ryn1x left
[09:46] *** ryn1x joined
[09:46] *** rba joined
[09:48] *** rba_ left
[09:50] *** wander4096 joined
[09:51] * HoboWithAShotgun just learned about my n = 1; say n;

[09:51] <HoboWithAShotgun> not sure wether i should like this

[09:52] <wander4096> why we have `?^` which is the same as `!`, it seems waste

[09:52] *** nadim left
[09:52] <HoboWithAShotgun> m: class c { has \.foo = 1 }; say c.new.foo

[09:52] <camelia> rakudo-moar 830084: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed has␤at <tmp>:1␤------> 3class c { has7⏏5 \.foo = 1 }; say c.new.foo␤»

[09:53] <HoboWithAShotgun> m: class c { has \foo = 1 }; say c.new.foo

[09:53] <camelia> rakudo-moar 830084: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤has scoped term definitions (only 'my' is supported at the moment) not yet implemented. Sorry.␤at <tmp>:1␤------> 3class c { has \foo7⏏5 = 1 }; say c.new.foo␤    expecting any of:␤        new…»

[09:54] *** ryn1x left
[09:55] *** ryn1x joined
[09:59] *** eythian left
[10:00] *** ryn1x left
[10:02] *** rba_ joined
[10:03] *** rba left
[10:13] *** ryn1x joined
[10:16] *** rba joined
[10:16] *** eythian_ joined
[10:16] *** eythian_ left
[10:16] *** eythian_ joined
[10:18] *** eythian_ is now known as eythian

[10:18] *** rba_ left
[10:20] *** andreoss joined
[10:22] *** ryn1x left
[10:22] *** ryn1x joined
[10:25] <andreoss> what is the name for Metamodel constants in EXPORTHOW::DECLARE package? where I can find docs on them?

[10:27] *** ryn1x left
[10:27] *** |oLa| joined
[10:28] *** |oLa| left
[10:28] *** |oLa| joined
[10:29] <llfourn> andreoss: https://design.perl6.org/S12.html#Custom_Meta-objects # don't think there's docs for it yet

[10:31] *** rba_ joined
[10:32] *** ShalokShalom joined
[10:33] *** atroxaper joined
[10:33] *** rba left
[10:33] *** itaipu left
[10:33] *** ShalokShalom_ left
[10:37] *** Cabanossi left
[10:39] *** Cabanossi joined
[10:40] *** pecastro left
[10:46] *** rba joined
[10:48] *** ryn1x joined
[10:48] *** rba_ left
[10:55] *** Aaronepower left
[11:00] <gfldex> m: class C { method m:sym<s>{} }; C.new.m:sym<s>();

[11:00] <camelia> rakudo-moar 830084: OUTPUT: «No such method 'm' for invocant of type 'C'␤  in block <unit> at <tmp> line 1␤␤»

[11:00] <gfldex> how do I call that method?

[11:00] <moritz> the whole MOP documentation is very patchy

[11:00] <moritz> m: class C { method m:sym<s>{} }; C.new."m:sym<s>"()

[11:01] <camelia> rakudo-moar 830084: ( no output )

[11:01] *** rba_ joined
[11:02] *** thunktone left
[11:03] *** rba left
[11:03] *** rba joined
[11:04] *** thunktone joined
[11:04] <andreoss> llfourn: thanks

[11:05] <andreoss> are class and role keywords defined in the same manner (as constants in some package)?

[11:05] *** rba_ left
[11:06] <lizmat> m: class C { method m:sym<s> { "foo" } }; dd C.new.^find_method(q/m:sym<s>/)(C)   # gfldex

[11:06] <camelia> rakudo-moar 830084: OUTPUT: «"foo"␤»

[11:06] *** margeas joined
[11:08] <lizmat> m: class A {}; role A {}

[11:08] <camelia> rakudo-moar 830084: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol 'A'␤at <tmp>:1␤------> 3class A {}; role A7⏏5 {}␤    expecting any of:␤        generic role␤»

[11:08] <lizmat> andreoss: I'd say yes  :-)

[11:09] *** pecastro joined
[11:10] *** andreoss left
[11:15] <HoboWithAShotgun> when i run this the on-close gets never called: https://hastebin.com/oyagusonaf.pl

[11:16] <HoboWithAShotgun> but Terminal::Print::RawInput does the same, and there the event gets fired

[11:16] <HoboWithAShotgun> wgat am i missing?

[11:18] <geekosaur> buggable: eco Terminal::Print

[11:18] <buggable> geekosaur, Terminal::Print 'Asynchronous printing to your terminal -- as a simple grid': https://github.com/ab5tract/Terminal-Print

[11:19] <HoboWithAShotgun> https://github.com/ab5tract/Terminal-Print/blob/master/lib/Terminal/Print/RawInput.pm6

[11:20] <geekosaur> yes, but my expectation is that on-close is triggered by something elsewhere

[11:21] *** ryn1x left
[11:22] *** ryn1x joined
[11:22] <geekosaur> hm, doesn't look like it.

[11:23] <geekosaur> oh. this may be the buffering stuff

[11:24] *** Aaronepower joined
[11:25] <geekosaur> but I don't know where that is now :/

[11:26] <HoboWithAShotgun> o i meant its called by calling done on a supply

[11:27] <geekosaur> hm. are you using v6.d.PREVIEW? this affects how buffering works iirc

[11:30] <timotimo> i don't think so, geekosaur 

[11:30] *** ryn1x left
[11:30] <timotimo> the preview stuff changes how await works (including some things that await behind the scenes)

[11:31] <timotimo> the recent chnanges to turn on buffering automatically for files should be in .c as well as .d

[11:31] *** ryn1x joined
[11:34] <HoboWithAShotgun> nah preview is n't it.

[11:35] <HoboWithAShotgun> fricking strange, i do have T::P installed and injected a say into that handler

[11:35] <HoboWithAShotgun> and i see it getting called

[11:36] <HoboWithAShotgun> by calling done on what gets returned by that method

[11:40] *** ryn1x left
[11:44] *** wander4096 left
[11:51] *** Cabanossi left
[11:54] *** Cabanossi joined
[11:57] *** ShalokShalom_ joined
[11:57] *** ShalokShalom left
[12:01] *** ryn1x joined
[12:01] *** Rawriful joined
[12:10] *** ryn1x left
[12:10] *** ryn1x joined
[12:14] *** BenGoldberg joined
[12:15] *** ryn1x left
[12:15] *** ryn1x joined
[12:21] *** Cabanossi left
[12:24] *** Cabanossi joined
[12:26] *** thunktone left
[12:27] *** lichtkind joined
[12:28] *** thunktone joined
[12:29] *** ryn1x left
[12:34] *** ShalokShalom_ is now known as ShalokShalom

[12:37] *** itaipu joined
[12:42] <buggable> New CPAN upload: IO-Prompt-0.0.2.tar.gz by WBIKER https://cpan.metacpan.org/authors/id/W/WB/WBIKER/Perl6/IO-Prompt-0.0.2.tar.gz

[12:43] *** wbiker joined
[12:43] <wbiker> hi all

[12:44] *** thunktone left
[12:45] *** ryn1x joined
[12:46] <wbiker> I uploaded my perl6 module IO::Prompt to cpan. How can I remove the github module from modules.perl6.org?

[12:46] <wbiker> I mean it will be listed twice then, or?

[12:50] *** thunktone joined
[12:51] *** nadim joined
[12:54] *** Cabanossi left
[12:54] *** ryn1x left
[12:54] *** Cabanossi joined
[12:55] *** ryn1x joined
[12:56] *** go|dfish left
[13:00] *** itaipu left
[13:01] <MasterDuke> wbiker: i think just remove it from here https://github.com/perl6/ecosystem/blob/master/META.list

[13:03] <wbiker> MasterDuke: Thanks, I think that is what I was looking for

[13:03] <MasterDuke> np

[13:03] *** ryn1x left
[13:04] *** ryn1x joined
[13:11] *** thunktone left
[13:13] *** thunktone joined
[13:18] *** ryn1x left
[13:18] *** nadim left
[13:22] *** Cabanossi left
[13:24] *** Cabanossi joined
[13:27] <Geth> ¦ ecosystem: wbiker++ created pull request #373: Remove IO::Prompt because it is uploaded to cpan

[13:27] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/pull/373

[13:29] <Geth> ¦ ecosystem: 37463e1c0c | Wolf++ (committed by timo) | META.list

[13:29] <Geth> ¦ ecosystem: Remove IO::Prompt because it is uploaded to cpan (#373)

[13:29] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/37463e1c0c

[13:32] <timotimo> i like where this is going :)

[13:33] <timotimo> just a couple more modules have to move from ecosystem to cpan and we'll get two modules.perl6.org updates per hour working (if there's enough change)

[13:33] <timotimo> hm. well, a bit more than "a couple"

[13:33] <timotimo> m: say 7.5 * 60 / 2

[13:33] <camelia> rakudo-moar 830084: OUTPUT: «225␤»

[13:33] <timotimo> okay, maybe a few hundred

[13:34] <moritz> is there an idiot's guide to moving stuff to CPAN?

[13:36] *** mattr joined
[13:36] <mattr> p6: say List.^methods

[13:36] <camelia> rakudo-moar 830084: OUTPUT: «(from-iterator from-slurpy from-slurpy-onearg from-slurpy-flat new to from sum fmt BIND-POS reification-target iterator sink STORE eager Capture FLATTENABLE_LIST FLATTENABLE_HASH CALL-ME pick roll reverse rotate combinations permutations join push append…»

[13:38] <timotimo> moritz: mi6 makes it pretty idiot-proof (except you have to be careful not to lose the contents of your README.md, because mi6 re-generates it from what pod is in your "main module")

[13:38] <timotimo> you just gotta sign up for a pause account

[13:38] <timotimo> i think the post zoffix just made on his perl6.party (or rakudo.party?) should help a lot with that

[13:39] *** ryn1x joined
[13:44] *** audiatorix joined
[13:45] *** audiatorix left
[13:45] <atroxaper> Can somebody help me, please? I can not find any information about how standard hash's implementation (or language design) converts keys to indexes and compare keys between themselves. My knowledge enough for looking to Rakudo repo and find 'key.Str'. But further I see solid nqp code :(

[13:47] <atroxaper> In Java I know that everything has equals and hashCode. I naively suppose that there should be something similar.

[13:47] <moritz> timotimo: hm, mi6 doesn't install here :(

[13:47] *** mattr left
[13:47] <moritz> atroxaper: are you looking for ways to make your objects hashable, or do you want to know the low-level gory details?

[13:48] *** ryn1x left
[13:49] <atroxaper> In Java I know how it works and know what I can do. I know how to override equals method if I need. But in Perl 6 I do not mechanics of equals and key mapping.

[13:49] <atroxaper> do not know *

[13:50] <atroxaper> For example, I want to use 'not string key'. And I doubt can I use 'similar' objects as keys, or have to use 'same' objects.

[13:51] *** poitqehj joined
[13:51] *** Cabanossi left
[13:52] <atroxaper> I know that ~~ uses .ACCEPTS under the hood. But what the hash uses? :)

[13:54] *** Cabanossi joined
[13:54] <moritz> so, the normal hash coerces to Str by default

[13:54] *** nadim joined
[13:54] <moritz> which means if you're fine with that, you can write your own Str method

[13:54] <moritz> but, then the hash contains Str keys, not your object keys

[13:55] <moritz> if you want the objects to remain as keys, you have to declare the hash appropriately, and write a WHICH method

[13:55] <atroxaper> With my 'object keys' example above - I tries to write class key { has Str $.s; has Num $.n }; And it is works with 'similar' keys. But what if I what to add mutable field in key. Of course I do not what to use that field while comparing of keys. Do not know how to do that.

[13:57] <moritz> then don't include the mutable part in your WHICH method

[13:58] <atroxaper> Does WHICH contains Java's equals+hashCode methods together?

[13:58] <moritz> hashCode, i think

[13:58] <moritz> I don't know java well enough

[14:00] <atroxaper> Ok. Thank you. Gonna find some WHICH implementation example :)

[14:01] <moritz> rakudo has some

[14:01] <bitrauser> Good evening, again :)

[14:02] <atroxaper> Yeah. Enough.

[14:03] <moritz> good morning, bitrauser :-)

[14:09] *** ryn1x joined
[14:10] <timotimo> moritz: what's the failure mode?

[14:11] <moritz> timotimo: http://perlpunks.de/paste/show/59da3221.3c0b.3c8

[14:12] <moritz> This is Rakudo version 2017.09-246-g5747bc7 built on MoarVM version 2017.09.1-575-gd4e230a

[14:12] <timotimo> oh

[14:12] <moritz> built yesterday, iirc

[14:12] <timotimo> you gotta update zef

[14:12] <timotimo> potentially by git cloning it; it might not be able to update itself in this state

[14:27] <yoleaux> Zoffix: add `where-is` to subset helper, bruh

[14:29] *** evalable6 left
[14:29] *** evalable6 joined
[14:29] *** thunktone left
[14:29] * moritz uploaded two Perl 6 dists to CPAN and now waits for the indexer mails

[14:31] *** thunktone joined
[14:31] <moritz> according to https://pause.perl.org/pause/authenquery?ACTION=tail_logfile&pause99_tail_logfile_1=5000 it has sent at least some mails

[14:31] <moritz> haven't gotten them yet :(

[14:32] <buggable> New CPAN upload: Math-Model-0.1.tar.gz by MORITZ https://cpan.metacpan.org/authors/id/M/MO/MORITZ/Perl6/Math-Model-0.1.tar.gz

[14:32] <buggable> New CPAN upload: Math-RungeKutta-0.1.tar.gz by MORITZ https://cpan.metacpan.org/authors/id/M/MO/MORITZ/Perl6/Math-RungeKutta-0.1.tar.gz

[14:33] <moritz> ah, there they go!

[14:33] <timotimo> fantastic :)

[14:33] <moritz> I guess I should teach perl6-all-modules about CPAN then :/

[14:34] <timotimo> that'd be good

[14:35] *** poitqehj left
[14:36] <moritz> https://github.com/moritz/perl6-all-modules/issues/1

[14:37] <moritz> is there a nice URL that gives me all Perl 6 modules on CPAN?

[14:38] *** ryn1x left
[14:38] *** ryn1x joined
[14:38] *** bwisti joined
[14:39] <timotimo> i'm just looking for it

[14:39] <timotimo> there is one.

[14:39] <timotimo> https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan.json

[14:39] <moritz> I had hoped for one that is generated by PAUSE

[14:40] <moritz> the modules.perl6.org code seems to use rsync

[14:40] <timotimo> https://github.com/ugexe/Perl6-App--ecogen/blob/master/lib/App/ecogen/cpan.pm6 - the ecogen program grabs all the interesting data via rsync

[14:41] *** bjorkintosh joined
[14:41] *** bjorkintosh left
[14:46] <atroxaper> I always think that if we what to implement HashTable then we have to convert key object to some integer, then use it integer as index in some array. In simple story. But, if I am not wrong, in Perl 6 Map's keys converted in Map's fields itself. Without explicit array. Am I right?!

[14:47] <timotimo> in rakudo we use uthash to do the hashing

[14:47] *** ryn1x left
[14:47] <timotimo> we have an explicit string-key-based associative access API

[14:47] <timotimo> i.e. nqp::atkey, nqp::bindkey, nqp::existskey

[14:48] *** ryn1x joined
[14:48] <atroxaper> It seemed to me that nqp::bindkey just add one more field to object :)

[14:49] <timotimo> nope, that would have terrible performance

[14:50] <atroxaper> timotimo: Ok. Then WHICH is like Java's equals+hashCode. As documents says.

[14:50] <timotimo> yeah

[14:51] <timotimo> if you want you can implement a hash based on adding attributes whenever a new key gets added

[14:51] <atroxaper> timotimo: can you describe how nqp::objectid works. If this can be done shortly of course.

[14:51] <timotimo> and see how well that goes ;)

[14:52] *** Cabanossi left
[14:52] <atroxaper> nonono. I do not what. I was really surprised when I came to this conclusion ^^

[14:52] <timotimo> i find it hard to find a good starting point for the explanation

[14:53] *** ryn1x left
[14:53] <timotimo> let's just say it gives you the object's location in memory and simultaneously prevents it from being moved around by the garbage collector

[14:54] *** Cabanossi joined
[14:55] <atroxaper> timotimo: as I thought... In simple words it is some address im memory.

[14:56] <atroxaper> timotimo: And the is a mechanics which map string '123' and '123' to the same 'memory'. Right?

[14:57] <timotimo> the is?

[14:58] <atroxaper> Donno. But '123'.WHICH is the same as another '123'.WHICH

[14:58] <moritz> this is because Str is a value type

[14:58] <timotimo> yeah, it implements its own method WHICH

[14:58] <atroxaper> 1 ~ 2 ~ 3 . WHICH even

[14:59] <moritz> it doesn't mean that string interning (reusing the same memory for identical strings) is happening

[14:59] <BenGoldberg> m: "ABC".WHERE for ^3

[14:59] <camelia> rakudo-moar 830084: ( no output )

[14:59] <BenGoldberg> m: "ABC".WHERE.say for ^3

[14:59] <camelia> rakudo-moar 830084: OUTPUT: «140459212386120␤140459212386120␤140459212386120␤»

[14:59] <timotimo> yes. when you get lines from a file and every line happens to haev the same contents, they'll still be separate string objects behind the scenes

[14:59] *** nowan left
[15:00] <BenGoldberg> m: "ABC".WHICH.say for ^3

[15:00] <camelia> rakudo-moar 830084: OUTPUT: «Str|ABC␤Str|ABC␤Str|ABC␤»

[15:00] <timotimo> m: ("ABC" ~ "a".pick).WHERE.say for ^4

[15:00] <camelia> rakudo-moar 830084: OUTPUT: «140280001647936␤140280001658488␤140280001659968␤140280001661448␤»

[15:00] <timotimo> ^- same string, but different WHERE results

[15:00] <timotimo> same string in value, not in identity

[15:00] *** Aaronepower left
[15:01] <BenGoldberg> m: "ABC".pick.WHERE.say for ^5

[15:01] <camelia> rakudo-moar 830084: OUTPUT: «140149397008200␤140149397008200␤140149397008200␤140149397008200␤140149397008200␤»

[15:01] <BenGoldberg> m: ("A"~"B").pick.WHERE.say for ^5

[15:01] <camelia> rakudo-moar 830084: OUTPUT: «139986690128432␤139986690128432␤139986690128432␤139986690128432␤139986690128432␤»

[15:01] *** nowan joined
[15:02] <BenGoldberg> m: ("A".pick~"B").WHERE.say for ^5

[15:02] <atroxaper> timotimo: % uses === which uses WHICH. Right?

[15:02] <camelia> rakudo-moar 830084: OUTPUT: «140537259521960␤140537259532512␤140537259533992␤140537259535472␤140537259536952␤»

[15:02] *** Mrofnet joined
[15:03] *** dogbert17 left
[15:04] <BenGoldberg> It looks like the parser does constant folding of strings, and re-uses the string value objects where it can.

[15:05] <timotimo> the optimizer will constant-fold the ~ operation, the result will be serialized into the string heap and every reference to it will use that same string object in the future

[15:05] *** Merfont left
[15:05] <timotimo> though there's still a difference between the strings in the string heap - which are low-level VMString objects - and the actual Str objects - which have a VMString object boxed up inside of them

[15:06] *** yht joined
[15:07] <atroxaper> timotimo: % uses === which uses WHICH. Right?

[15:08] <timotimo> you mean hashes, right?

[15:08] <timotimo> because we also have a % operator

[15:08] <timotimo> object hashes and "regular hashes" are implemented differently

[15:09] <timotimo> since regular hashes stringify everything anyway, it completely ignores WHICH

[15:09] <timotimo> WHICH is used by object hashes to create a string that can be used for keys in the underlying hash

[15:10] <timotimo> in fact, object hashes store pairs as their values; each pair has the "actual object" as its key and the "final" hash value as its value

[15:10] <timotimo> and the key used for the hash storage itself is what WHICH gives you from the object

[15:10] *** Morfent joined
[15:12] <atroxaper> timotimo: Then hashes use string (from WHICH or itself) as uthash key. Right?

[15:12] <timotimo> yes

[15:12] <timotimo> there's currently an open bug that .pick and .roll on object hashes accidentally give you the "actual" pairs that the hash stores

[15:12] <timotimo> so you can see its guts spill out:

[15:12] *** Mrofnet left
[15:12] <atroxaper> Yeah! I feel level up! :))

[15:13] <timotimo> m: my %foo{Any} = 123 => 9, what => 8, 1.5 => 7, set(1, 2, 3) => 6; .perl.say for %foo.pick(*)

[15:13] <camelia> rakudo-moar 830084: OUTPUT: «123 => 9␤1.5 => 7␤(set(1,3,2)) => 6␤:what(8)␤»

[15:13] <timotimo> oh, huh?

[15:13] *** eliasr joined
[15:13] *** ryn1x joined
[15:13] <timotimo> oh, maybe the bug happens onyl when the object hash has just a single entry 

[15:14] <timotimo> m: my %foo{Any} = 123 => 9; .perl.say for %foo.pick(*)

[15:14] <camelia> rakudo-moar 830084: OUTPUT: «123 => 9␤»

[15:14] <timotimo> ... did somebody fix the bug in the mean time?

[15:14] <timotimo> m: my %foo{Any} = question => 9; .perl.say for %foo.pairs.pick(*); .perl.say for %foo.pick(*)

[15:14] <camelia> rakudo-moar 830084: OUTPUT: «:question(9)␤:question(9)␤»

[15:14] <atroxaper> Cool. Gonna write some text about basics s/Java/Perl 6/

[15:15] <timotimo> i'm confused now.

[15:15] *** skids joined
[15:16] <timotimo> i swear i was able to reproduce this bug yesterday

[15:17] <timotimo> it's #132246 FTR

[15:17] <synopsebot> RT#132246 [new]: https://rt.perl.org/Ticket/Display.html?id=132246 .pick and .roll return incorrect results for object hashes

[15:21] *** ufobat joined
[15:27] <Geth> ¦ rakudo/nom: 775c367f34 | (Zoffix Znet)++ | t/02-rakudo/repl.t

[15:28] <Geth> ¦ rakudo/nom: Fudge OSX-failing tests

[15:28] <Geth> ¦ rakudo/nom: 

[15:28] <Geth> ¦ rakudo/nom: REPL output differred slightly on OSX for ages and we already

[15:28] <Geth> ¦ rakudo/nom: had fudged tests for that reason. Fudging a couple more of these

[15:28] <Geth> ¦ rakudo/nom: new ones.

[15:28] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/775c367f34

[15:28] <Zoffix> squashable6: 

[15:28] <squashable6> Zoffix, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Squashable

[15:28] <Zoffix> squashable6: status

[15:28] <squashable6> Zoffix, Next SQUASHathon in 25 days and ≈18 hours (2017-11-04 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:28] <lizmat> timotimo: I'll take RT#132246

[15:28] <synopsebot> RT#132246 [new]: https://rt.perl.org/Ticket/Display.html?id=132246 .pick and .roll return incorrect results for object hashes

[15:28] <lizmat> m: dd :{ a => 42 }.pick  # confirmed

[15:28] <camelia> rakudo-moar 830084: OUTPUT: «"Str|a" => :a(42)␤»

[15:29] <timotimo> oh

[15:29] <timotimo> i'm still not quite sure how i messed up my code examples. assigning to that %foo{Any} should have properly kept the key objects?

[15:31] *** ryn1x left
[15:31] *** dogbert17 joined
[15:33] <Zoffix> jnthn: perlpilot: SQUASHathon is over. Would you remove `,#perl6` from the end of the URL in geth's webhook on rakudo/rakudo repo? (moarvm/moarvm might've been set up with it too, I'm unsure)

[15:34] *** leont joined
[15:35] <timotimo> there's a big amount of modules still mentioning "build panda" or "build-panda" in their travis files :(

[15:35] *** ChoHag left
[15:35] <timotimo> some have that line commented, though

[15:43] *** holyghost joined
[15:47] *** ryn1x joined
[15:59] *** araraloren left
[16:02] *** cdg joined
[16:02] *** yht left
[16:03] * Zoffix tries to remember the good reason why object hashes .Captures converts keys to Str

[16:03] <Zoffix> m: dd :{42=>70}.Capture

[16:03] <camelia> rakudo-moar 775c36: OUTPUT: «\("42" => 70)␤»

[16:03] <timotimo> well, capture doesn't support non-string keys

[16:03] <Zoffix> Yeah, but why?

[16:04] <timotimo> because capture is about calling stuff with arguments

[16:04] <timotimo> that's where the limitation lives

[16:04] <Zoffix> I can't have an argument named "42", can I?

[16:04] <timotimo> though with slurpy hashes ... hmm

[16:04] <timotimo> m: sub test(*%foo) { say %foo.perl }; test(|:{42 => "hi"});

[16:04] <camelia> rakudo-moar 775c36: OUTPUT: «{"42" => "hi"}␤»

[16:04] <timotimo> ah, that goes via .Capture i assume

[16:05] <Zoffix> bisect: [42 => 42].Capture.perl.say

[16:05] <bisectable6> Zoffix, Bisecting by exit code (old=2015.12 new=775c367). Old exit code: 1

[16:05] <bisectable6> Zoffix, bisect log: https://gist.github.com/338e79a02083a9dcd68de62c41d0d170

[16:05] <bisectable6> Zoffix, (2017-05-26) https://github.com/rakudo/rakudo/commit/756cb20ac2b837014f6a0caa80ef55c62347b9df

[16:05] <timotimo> i need to take a break for my wrists

[16:05] <Zoffix> Expl: https://irclog.perlgeek.de/perl6-dev/2017-05-24#i_14629113

[16:06] <Zoffix> timotimo: take like 1-2 days off the computer.

[16:08] *** |oLa| left
[16:13] <ugexe> moritz: there is no pause generated index of perl6 dists, and it could be possible there won't be for awhile due to the fact its not equiped to deal with the same short-name/ver being used by more than one author

[16:14] <jdv79> tony-o: HTML::Parser::XML looks borked

[16:14] *** markldevine joined
[16:14] <jdv79> parse's main loop isn't ending

[16:14] <jdv79> .seen tony-o 

[16:14] <yoleaux> I saw tony-o 2 Oct 2017 16:00Z in #perl6: <tony-o> m: my %h = :foo<FOO>, :bar<BAR>; my $key = "foo"; sub callme($arg where %h = $key) { say %h; say $arg; }; callme;

[16:15] <jdv79> .tell tony-o HTML::Parser::XML - parse - the main loop never ends on latest rakudo

[16:15] <yoleaux> jdv79: I'll pass your message to tony-o.

[16:17] <[Coke]> timotimo: fixed up the vote formatting

[16:20] <Zoffix> moritz: "is there a nice URL that gives me all Perl 6 modules on CPAN?" Yup, use use `from:cpan` search qualifier on mp6.o without any search term: http://modules.perl6.org/search/?q=from%3Acpan  available as JSON too: http://modules.perl6.org/s/from:cpan/.json

[16:20] <Zoffix> .tell moritz "is there a nice URL that gives me all Perl 6 modules on CPAN?" Yup, use use `from:cpan` search qualifier on mp6.o without any search term: http://modules.perl6.org/search/?q=from%3Acpan  available as JSON too: http://modules.perl6.org/s/from:cpan/.json

[16:20] <yoleaux> Zoffix: I'll pass your message to moritz.

[16:22] *** ryn1x left
[16:22] *** ryn1x joined
[16:22] <Geth> ¦ rakudo/nom: 12fcece494 | (Elizabeth Mattijsen)++ | src/core/Hash.pm

[16:22] <Geth> ¦ rakudo/nom: Fix for RT #132246

[16:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/12fcece494

[16:23] <synopsebot> RT#132246 [new]: https://rt.perl.org/Ticket/Display.html?id=132246 .pick and .roll return incorrect results for object hashes

[16:24] *** kyan joined
[16:28] *** kyan left
[16:31] *** ryn1x left
[16:31] *** ryn1x joined
[16:36] *** ryn1x left
[16:36] *** Cabanossi left
[16:37] *** Wiertek left
[16:37] *** HoboWithAShotgun left
[16:41] *** Cabanossi joined
[16:50] *** chakli joined
[16:51] <thundergnat> .

[16:51] <yoleaux> 7 Oct 2017 14:10Z <Xliff_> thundergnat: Thanks for the suggestion. I will upgrade, but I thought I had done that, recently.

[16:51] <yoleaux> 7 Oct 2017 14:12Z <Xliff_> thundergnat: I am on Inline::Perl5 0.26 and am still getting the error.

[16:51] *** markldevine left
[16:51] <thundergnat> .tell Xliff_ Ah. Oh well, it was worth checking since I was getting that exact same behavior with an older version.

[16:51] <yoleaux> thundergnat: I'll pass your message to Xliff_.

[16:53] *** cdg left
[16:53] *** ryn1x joined
[16:54] <Geth> ¦ doc/master: 6 commits pushed by (Will "Coke" Coleda)++

[16:54] <Geth> ¦ doc/master: 1b51e744c5 | nbsp

[16:54] <Geth> ¦ doc/master: 659b78c0e5 | trailing whitespace;

[16:54] <Geth> ¦ doc/master: 4444d3402d | Fix example compilation

[16:54] <Geth> ¦ doc/master: d183bc94ab | fix spelling

[16:54] <Geth> ¦ doc/master: d015992722 | Learn new word

[16:54] <Geth> ¦ doc/master: e3457715a2 | don't test missing files

[16:54] <Geth> ¦ doc/master: review: https://github.com/perl6/doc/compare/16a20c0087...e3457715a2

[16:56] <thundergnat> .tell timotimo Is there any reason JSON::Fast doesn't have a JSON tag in its META file? I was mildly surprised when I searched for modules tagged JSON and it didn't show up. (Had to do a keyword search like an animal... ;-) )

[16:56] <yoleaux> thundergnat: I'll pass your message to timotimo.

[16:56] <timotimo> oops

[16:56] <yoleaux> 16:56Z <thundergnat> timotimo: Is there any reason JSON::Fast doesn't have a JSON tag in its META file? I was mildly surprised when I searched for modules tagged JSON and it didn't show up. (Had to do a keyword search like an animal... ;-) )

[16:59] <thundergnat> timotimo BTW, cool module. Is literally at least 3 orders of magnitude faster than using .perl and EVAL to save large hashes to a file. 

[16:59] <timotimo> yeah, it's not bad :)

[17:00] <timotimo> EVAL is especially slow since it's the full rakudo grammar

[17:00] <timotimo> however, with .perl you can use precompilation for your benefit

[17:00] <moritz> thanks Zoffix 

[17:00] <yoleaux> 16:20Z <Zoffix> moritz: "is there a nice URL that gives me all Perl 6 modules on CPAN?" Yup, use use `from:cpan` search qualifier on mp6.o without any search term: http://modules.perl6.org/search/?q=from%3Acpan  available as JSON too: http://modules.perl6.org/s/from:cpan/.json

[17:00] <timotimo> in which case it'll be massively faster than JSON::Fast could ever hope to be

[17:01] <Zoffix> moritz: would you remove ",#perl6" from the end of Geth's webhook for rakudo repo https://github.com/rakudo/rakudo/ ? SQUASHathon is over, so it don't need to report up in here no more

[17:01] <thundergnat> yeah. It works fine for small hashes but I had a 100KB file I was EVALing and it was.... not so much.

[17:01] <moritz> Zoffix: will do

[17:01] <Zoffix> Thanks!

[17:01] *** Khisanth left
[17:01] <moritz> done

[17:01] *** ryn1x left
[17:02] *** ryn1x joined
[17:02] <Zoffix> \o/

[17:05] <moritz> so, there's a small thing that's less than awesome

[17:05] <moritz> from http://modules.perl6.org/s/from:cpan/.json I get the CPAN user name, but not the github username

[17:06] <moritz> so I'll have both zoffixznet/somemodule and ZOFFIX/othermodule

[17:06] <moritz> what should I do? just accept it?

[17:06] <moritz> or create separate directories, cpan/ZOFFIX/othermodule and github/zoffixznet/somemodule?

[17:08] <moritz> I'm currently leaning towards the latter

[17:08] <moritz> not all cpan modules must come from github, so there's not always a reliable way to link it back

[17:09] *** chakli left
[17:10] <Zoffix> moritz: yeah, there's no reason why cpan/ZOFFIX and github/zoffix are the same person even, so it makes sense to keep these all separate

[17:10] <Zoffix> (P.S.: we have a few dists off gitlab (`from:gitlab`) too)

[17:13] <moritz> I must say that renaming 19.6k files in a git repo is unpleasantly slow

[17:14] *** ryn1x left
[17:14] *** Khisanth joined
[17:19] <Geth> ¦ perl6.org: tibi77++ created pull request #85: Adding spacemacs reference

[17:19] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/pull/85

[17:20] *** profan left
[17:21] *** domidumont joined
[17:22] *** wbiker left
[17:22] *** thunktone left
[17:23] *** thunktone joined
[17:23] <gfldex> lolibloggedalittle: https://gfldex.wordpress.com/2017/10/08/its-classes-all-the-way-down/

[17:24] *** kyan joined
[17:25] <moritz> gfldex++

[17:26] <moritz> "But if tokens are methods then grammars must be classes." Not quite sound reasoning, but close enough :-)

[17:26] <moritz> m: Metamodel::GrammarHOW.^mro

[17:26] <camelia> rakudo-moar 12fcec: ( no output )

[17:26] <Geth> ¦ perl6.org: 4036b7ef0d | tiberiu_lepadatu++ | source/whatever/index.html

[17:26] <Geth> ¦ perl6.org: Adding spacemacs referance

[17:26] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/4036b7ef0d

[17:26] <Geth> ¦ perl6.org: fe5662e5e8 | (Zoffix Znet)++ (committed using GitHub Web editor) | source/whatever/index.html

[17:26] <Geth> ¦ perl6.org: Merge pull request #85 from tibi77/master

[17:26] <Geth> ¦ perl6.org: 

[17:26] <Geth> ¦ perl6.org: Adding spacemacs reference

[17:26] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/fe5662e5e8

[17:26] <moritz> m: say Metamodel::GrammarHOW.^mro

[17:26] <camelia> rakudo-moar 12fcec: OUTPUT: «((GrammarHOW) (ClassHOW) (Any) (Mu))␤»

[17:27] <Geth> ¦ perl6.org: c356a5f59c | (Zoffix Znet)++ (committed using GitHub Web editor) | source/whatever/index.html

[17:27] <Geth> ¦ perl6.org: Add closing </li> for consistency

[17:27] <Geth> ¦ perl6.org: review: https://github.com/perl6/perl6.org/commit/c356a5f59c

[17:27] <gfldex> Perl 6 defies logic :->

[17:28] <ugexe> why not have grammar be a role (that still puns to a class)? then we could apply a grammar as a role or a class...

[17:28] *** ChoHag joined
[17:33] *** timo2 joined
[17:33] <moritz> you can just put your regexes and tokens into roles

[17:33] <moritz> and then compose them as you like

[17:35] *** HoboWithAShotgun joined
[17:35] <moritz> (my upcoming book shows examples of this)

[17:36] <timo2> dragon is incompatible with qwebirc m(

[17:39] *** timo3 joined
[17:40] <timo3> bleh! even with firefox it opens the print window instead of putting my text into the text box >:(

[17:42] *** go|dfish joined
[17:42] <timo3> Maybe it works now

[17:43] <timo2> and maybe it even works with Google Chrome

[17:43] <timo2> that's cool

[17:44] <HoboWithAShotgun> m: my \a = @(1,2,3).WHAT; say a;

[17:44] <camelia> rakudo-moar 12fcec: OUTPUT: «(List)␤»

[17:44] <HoboWithAShotgun> is there a way to get a sigil-less array/hash?

[17:45] <timo2> m: my \a = (1,2,3).Array; say a.WHAT

[17:45] <camelia> rakudo-moar 12fcec: OUTPUT: «(Array)␤»

[17:46] <HoboWithAShotgun> that's ugly

[17:47] <timo2> m: my \a = my @ = 1, 2, 3; say a.WHAT

[17:47] <camelia> rakudo-moar 12fcec: OUTPUT: «(Array)␤»

[17:48] <HoboWithAShotgun> better. we went from woody allen to prince charles

[17:48] <HoboWithAShotgun> now the ben affleck solution?

[17:48] *** leont left
[17:50] <HoboWithAShotgun> i like this slang though. i can use siggiless for lexicals and sigils for arguments and attributes

[17:50] <HoboWithAShotgun> i'd like the other way around more but alas 

[17:51] <HoboWithAShotgun> m: class { has \foo; }

[17:51] <camelia> rakudo-moar 12fcec: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤has scoped term definitions (only 'my' is supported at the moment) not yet implemented. Sorry.␤at <tmp>:1␤------> 3class { has \foo7⏏5; }␤    expecting any of:␤        new term to be defined␤»

[17:51] *** committable6 left
[17:51] *** committable6 joined
[17:51] *** ChanServ sets mode: +v committable6

[17:51] <ugexe> moritz: yeah thats what i have done as well. but then you can't easily do things like have multiple stand alone RFC grammars that compose into a single larger grammar

[17:52] <moritz> ugexe: you can in each role have an "is Grammar", that makes them stand-alone

[17:52] <ugexe> well you can, but you have to add boilerplate

[17:52] <ugexe> ah

[17:52] *** unicodable6 left
[17:53] *** unicodable6 joined
[17:53] <moritz> m: role ABC is Grammar { token TOP { abc } }; say ABC.parse('abc')

[17:53] <camelia> rakudo-moar 12fcec: OUTPUT: «｢abc｣␤»

[17:53] *** vike joined
[18:00] <moritz> Zoffix: it looks like Math-Model made it to CPAN correctly: https://irclog.perlgeek.de/perl6/2017-10-08#i_15274350 but it doesn't show up on http://modules.perl6.org/s/from:cpan/.json

[18:00] *** ryn1x joined
[18:00] <moritz> Zoffix: bad timing, or bug?

[18:00] *** atroxaper left
[18:01] <Geth> ¦ ecosystem: 25a2f3bf05 | (Moritz Lenz)++ | META.list

[18:01] <Geth> ¦ ecosystem: Remove module that now lives on CPAN

[18:01] <Geth> ¦ ecosystem: review: https://github.com/perl6/ecosystem/commit/25a2f3bf05

[18:01] *** Wiertek joined
[18:03] <moritz> Zoffix: also in http://modules.perl6.org/s/from:cpan/.json the "files" attribute in each dist seems to be a JSON-encoded string rather than the JSON data structure. Bug or feature?

[18:05] *** Aaronepower joined
[18:08] *** Cabanossi left
[18:08] *** wander4096 joined
[18:09] <wander4096> m: my $a = (1, 2, 3).Seq; $a.skip

[18:09] <camelia> rakudo-moar 12fcec: ( no output )

[18:09] *** Cabanossi joined
[18:09] <wander4096> m: my $a = (1, 2, 3).Seq; $a.skip.say

[18:09] <camelia> rakudo-moar 12fcec: OUTPUT: «(2 3)␤»

[18:09] <wander4096> but it doesn't work if call in different line

[18:09] <wander4096> Method 'pull-one' must be implemented by Iterator because it is required by roles: Iterator.   in block <unit> at <unknown file> line 1

[18:11] <wander4096> seems like REPL's bug

[18:12] <MasterDuke> wander4096: the REPL has a bunch of known bugs

[18:13] <MasterDuke> using -e or just a file is better at this point

[18:13] <wander4096> where can find a list of it

[18:13] <wander4096> sure

[18:13] <MasterDuke> wander4096: https://fail.rakudo.party/t/REPL should have some

[18:14] <wander4096> get it

[18:16] *** profan joined
[18:17] *** wander4096 left
[18:20] <moritz> perl6-all-modules now has cpan support

[18:21] *** timo3 left
[18:21] *** timo2 left
[18:21] *** Aaronepower left
[18:26] <AlexDaniel_> moritz: yay!

[18:26] *** thunktone left
[18:26] <HoboWithAShotgun> what am i missing here?

[18:26] <HoboWithAShotgun> class c { has &.sub; method m { &.sub.(1); }; }; my $c = c.new( s => sub ($x,$y) { say $x } ).m;

[18:26] <HoboWithAShotgun> m: class c { has &.sub; method m { &.sub.(1); }; }; my $c = c.new( s => sub ($x,$y) { say $x } ).m;

[18:26] <camelia> rakudo-moar 12fcec: OUTPUT: «Cannot invoke this object (REPR: Uninstantiable; Callable)␤  in method m at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:26] <HoboWithAShotgun> that's 

[18:27] <HoboWithAShotgun> sorry

[18:27] <HoboWithAShotgun> m: class c { has &.sub; method m { &.sub(1); }; }; my $c = c.new( s => sub ($x,$y) { say $x } ).m;

[18:27] <camelia> rakudo-moar 12fcec: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in method sub at <tmp> line 1␤  in method m at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:27] <HoboWithAShotgun> that's the one

[18:27] <ugexe> why would s => not be sub => ?

[18:28] <moritz> right; so far you're just calling the accessor for $.sub, which doesn't want any arguments

[18:29] *** thunktone joined
[18:29] <HoboWithAShotgun> yes that's a typo

[18:29] <moritz> m: m: class c { has &.sub; method m { &.sub()(1, 2); }; }; my $c = c.new(sub => sub($x, $y) { say $x }).m

[18:29] <camelia> rakudo-moar 12fcec: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$x' is not declared␤at <tmp>:1␤------> 3)(1, 2); }; }; my $c = c.new(sub => sub(7⏏5$x, $y) { say $x }).m␤»

[18:29] <moritz> m: m: class c { has &.sub; method m { &.sub()(1, 2); }; }; my $c = c.new(sub => sub ($x, $y) { say $x }).m

[18:29] <camelia> rakudo-moar 12fcec: OUTPUT: «1␤»

[18:29] <HoboWithAShotgun> but even then its the same error

[18:29] <moritz> HoboWithAShotgun: ^^

[18:31] <ugexe> your sub requires 2 positional arguments, and you are passing just 1

[18:33] *** audiatorix joined
[18:34] <HoboWithAShotgun> that was a typo. what moritz++ did there was my problem

[18:34] <HoboWithAShotgun> why do i have to do ()() on a callable to actually call it?

[18:34] *** darutoko left
[18:35] *** audiatorix left
[18:38] <ugexe> &($.sub)(1,2)

[18:38] <moritz> HoboWithAShotgun: because $.foo is a shorthand for $.foo()

[18:38] <moritz> HoboWithAShotgun: and if you add the parens, they contain the arguments for the accessor method, not for the thing that the accessor method returns (if it's a callable)

[18:39] <moritz> ($.foo() is a shorthand for $(self.foo()))

[18:41] <HoboWithAShotgun> ah, yes ugexe. that's a clearer syntax

[18:47] * HoboWithAShotgun needs a trinary boolean

[18:51] <Zoffix> m: class c { has &.sub; method m { &.sub,(1, 2); }; }; my $c = c.new(sub => sub ($x, $y) { say $x }).m

[18:51] <camelia> rakudo-moar 12fcec: ( no output )

[18:51] <Zoffix> m: class c { has &.sub; method m { &.sub.(1, 2); }; }; my $c = c.new(sub => sub ($x, $y) { say $x }).m

[18:51] <camelia> rakudo-moar 12fcec: OUTPUT: «1␤»

[18:53] <Zoffix> moritz: "feature". It's decoded only on individual dist pages. It's not an ideal design, but I got annoyed with trying to make it work The Right Way 'cause I'm not good with databases, so I just shoved it into a cells as a JSON string

[18:55] *** evalable6 left
[18:55] *** evalable6 joined
[18:56] <Zoffix> moritz: hm, Math::Model ain't got a meta file generated for it. That's why it's not showing up on mp6.o. Dunno why it's missing: https://cpan.metacpan.org/authors/id/M/MO/MORITZ/Perl6/

[18:57] *** ecocode left
[18:58] <Zoffix> moritz: looks like there's 2 math models; one in Perl6 dir and another not in it; perhaps that's what's screwing up PAUSE that it doesn't generate meta file? https://www.nntp.perl.org/group/perl.cpan.uploads/2017/10/msg216988.html   https://www.nntp.perl.org/group/perl.cpan.uploads/2017/10/msg216989.html

[18:59] <moritz> Zoffix: I've deleted the on outside of Perl6/

[19:00] <moritz> *one

[19:00] *** ecocode joined
[19:03] *** TEttinger joined
[19:03] *** domidumont left
[19:03] <Zoffix> I don't know anything about PAUSE system, so don't even have any guesses why the meta wasn't generated. I'd trying uploading the module again. If that fails, check if keys are missing in the meta file inside the tar (check other dists that made it through to see what they got up in them)

[19:15] * moritz tries again

[19:17] <ugexe> might need to bump the version as well (otherwise backpan wouldnt work right)

[19:17] *** audiatorix joined
[19:17] <audiatorix> Do arguments to BUILD have to be named?

[19:18] *** andreoss joined
[19:18] <moritz> ugexe: I've done that, yes

[19:18] <moritz> audiatorix: that would be advisable, yes

[19:20] <audiatorix> Maybe if I just describe the problem you could help me here. I want a constructor which takes two hashmaps which do not directly correspond to class fields

[19:20] <Zoffix> Just define your own method new

[19:20] <andreoss> are objects somehow carring the information about a package/module from which they were imported?

[19:20] <andreoss> something like .^package

[19:21] <Zoffix> They're from that package yeah

[19:21] <Zoffix> m: class { has $.foo; method new ($what) { self.bless: :foo($what) } }.new(42).foo.say

[19:21] <camelia> rakudo-moar 12fcec: OUTPUT: «42␤»

[19:21] <andreoss> by objects i mean routines/constants and so on 

[19:22] <audiatorix> So that would probably mean making a hashmap that does correspond to the fields, and calling bless with that

[19:22] <Zoffix> audiatorix: ^ you can do whatever processing you need in `new` and just shove the results into appropriate attributes by passing them as named args to bless

[19:22] <audiatorix> right

[19:22] *** Cabanossi left
[19:22] <buggable> New CPAN upload: Math-Model-0.2.tar.gz by MORITZ https://cpan.metacpan.org/authors/id/M/MO/MORITZ/Perl6/Math-Model-0.2.tar.gz

[19:23] <audiatorix> Construction seems a bit strange after doing OO in other langs

[19:24] *** audiatorix left
[19:24] *** Cabanossi joined
[19:25] <ugexe> `method new($pos1, $pos2, |c) { self.bless(:$pos1, :foo($pos2), |c) }`

[19:25] <ugexe> but by using named arguments you encourage composition instead of hamper it

[19:26] <Zoffix> andreoss: for subs, it's the .package method

[19:27] <Zoffix> No sure what it is for constants

[19:28] <andreoss> m: &say.package.say

[19:28] <camelia> rakudo-moar 12fcec: OUTPUT: «No such method 'say' for invocant of type 'GLOBAL'␤  in block <unit> at <tmp> line 1␤␤»

[19:29] <Zoffix> m: use Test; &is.package.say

[19:29] <camelia> rakudo-moar 12fcec: OUTPUT: «(Test)␤»

[19:29] <Zoffix> m: use Test; &is.package.name.say

[19:29] <camelia> rakudo-moar 12fcec: OUTPUT: «No such method 'name' for invocant of type 'Test'␤  in block <unit> at <tmp> line 1␤␤»

[19:29] <Zoffix> m: use Test; &is.package.^name.say

[19:29] <camelia> rakudo-moar 12fcec: OUTPUT: «Test␤»

[19:29] <Zoffix> m: &say.package.^name.say

[19:29] <camelia> rakudo-moar 12fcec: OUTPUT: «GLOBAL␤»

[19:33] <andreoss> is "jump to definition" possible for perl6?

[19:33] *** profan left
[19:34] <moritz> I don't see why it would be harder to do than in other dynamic languages

[19:35] <sjn> o/

[19:35] <sjn> Anyone here heard of http://langserver.org/ ?

[19:36] <thundergnat> m: my \a = [1,2,3,4]; say a.WHAT; my \b = {:a(1), :b(2)}; say b.WHAT; # <-- HoboWithAShotgun

[19:36] <camelia> rakudo-moar 12fcec: OUTPUT: «(Array)␤(Hash)␤»

[19:37] <andreoss> Ruby has source_location for example

[19:39] <andreoss> moritz: it seems to me that it should be implemented in HOW classes

[19:40] <geekosaur> I think there's a .WHERE described in the old design docs but not implemented or in the current spec?

[19:40] <moritz> andreoss: I'm a bit confused; I thought you were talking about static analysis

[19:40] <andreoss> so they would save somekind of metadata about origin of method/routine 

[19:40] <moritz> andreoss: an IDE shouldn't require running the code to be able to jump to a definition

[19:42] <ugexe> moritz: cpan isn't indexing your dist because the dist needs to be in a root directory inside the tar

[19:42] <andreoss> i guess an IDE asks a compiler for source location

[19:44] <ugexe> moritz: you can use the archive downloaded from githib (.tar.gz or .zip) as an example of what i mean

[19:47] *** ryn1x left
[19:47] *** ryn1x joined
[19:52] <moritz> ugexe: thanks

[19:53] <moritz>  tar --transform 's,^,Math-Model-0.3/,'  -czf Math-Model-0.3.tar.gz $(git ls-files)

[19:53] <moritz> hope this works

[19:53] <weabot> if I modify a zef module in its .zef directory, how do I make sure that every file will be recompiled and my modifications used as they are?

[19:54] <moritz> weabot: in general zef --force-install install .

[19:54] <moritz> though I have no idea if that works inside of .zef

[19:56] <weabot> it'll just refetch it won't it?

[19:56] <moritz> weabot: . installs from the current directory

[20:00] *** timo2timo joined
[20:02] <ugexe> if you give it a directory it will install whatever is in that directory. if you change something in .zef/ it will get used if it matches whatever query you use

[20:02] <buggable> New CPAN upload: Math-Model-0.3.tar.gz by MORITZ https://cpan.metacpan.org/authors/id/M/MO/MORITZ/Perl6/Math-Model-0.3.tar.gz

[20:04] <ugexe> moritz: i think you also need to include the directories

[20:04] <ugexe> you can test with `zef install my-dist.tar.gz`

[20:04] <weabot> yep, it worked. thanks a lot!

[20:07] <moritz> now it generated a .meta file

[20:08] <ugexe> zef doesn't seem to understand without directories though (not that i cant fix this)

[20:09] <ugexe> zef counts on the first thing listed with tar --list to be the directory it will be extrated into

[20:09] *** releasable6 left
[20:10] *** releasable6 joined
[20:10] *** ChanServ sets mode: +v releasable6

[20:14] <ugexe> the fix would be a routine that when given a list of relative paths would determine the longest common path prefix

[20:15] *** Xliff joined
[20:20] *** thunktone left
[20:21] <Xliff> \o

[20:21] *** Cabanossi left
[20:21] <Xliff> Why is it that when I am dealing with string objects from Inline::Perl5, when I want to save it to another structure, I get an $[Inline::Perl5::Perl5Object.new(ptr => NativeCall::Types::Pointer.new(121489008), perl5 => Inline::Perl5.new)] 

[20:22] <Xliff> How can I convert those to Str? I can do a $o.Str and it does nothing?

[20:24] <jdv79> did you assign it back?

[20:24] <gfldex> m: my (@a1, @a2); sub s1 { 1,2,3 }; sub s2 { <a b c> }; (@a1, @a2) = [&s1, &s2].hyper.map({@($_.())}); dd @a1, @a2;

[20:24] <camelia> rakudo-moar 12fcec: OUTPUT: «Array @a1 = [(1, 2, 3), ("a", "b", "c")]␤Array @a2 = []␤»

[20:24] *** Cabanossi joined
[20:25] <gfldex> m: my ($a1, $a2); sub s1 { 1,2,3 }; sub s2 { <a b c> }; ($a1, $a2) = [&s1, &s2].hyper.map({@($_.())}); dd $a1, $a2;

[20:25] <camelia> rakudo-moar 12fcec: OUTPUT: «List $a1 = $(1, 2, 3)␤List $a2 = $("a", "b", "c")␤»

[20:27] <jdv79> m: my $v = <a b c >; say $v.perl; $v ~= ""; say $v.perl

[20:27] <camelia> rakudo-moar 12fcec: OUTPUT: «$("a", "b", "c")␤"a b c"␤»

[20:28] <jdv79> Xliff: ^^ - is that not sufficient?

[20:28] *** cschwenz joined
[20:30] <Xliff> Yes. I am assigning it back. I am working through another bug to see if I fixed it.

[20:32] *** Wiertek left
[20:35] *** |oLa| joined
[20:48] *** andreoss left
[20:51] <AlexDaniel_> squashable6: status

[20:51] <squashable6> AlexDaniel_, Next SQUASHathon in 25 days and ≈13 hours (2017-11-04 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[20:51] <AlexDaniel_> errr how do I get the log of the previous one

[20:52] <AlexDaniel_> squashable6: log

[20:52] <squashable6> AlexDaniel_, Nothing there yet

[20:53] <AlexDaniel_> squashable6: status 2017-10-07

[20:53] <squashable6> AlexDaniel_, Log and stats: https://gist.github.com/f60a0b881294d527565d9ecd2b5a1cbf

[20:53] *** cschwenz left
[20:54] <AlexDaniel_> squashable6: status 2017-10-42

[20:54] <squashable6> AlexDaniel_, Invalid date format

[20:54] <AlexDaniel_> squashable6: status 2017-10-01

[20:54] <squashable6> AlexDaniel_, Invalid date format

[20:58] *** ryn1x left
[21:08] *** Cabanossi left
[21:09] *** Cabanossi joined
[21:12] *** [particle] left
[21:12] *** BenGoldberg left
[21:13] *** ryn1x joined
[21:14] *** margeas left
[21:18] * HoboWithAShotgun got the event loop, screen driver going and a working clock widget

[21:19] <HoboWithAShotgun> https://imgur.com/a/mADp5

[21:20] <AlexDaniel_> buggable: bugs

[21:20] <buggable> AlexDaniel_, Total: 1640; 6.D: 2; 9999: 10; @LARRY: 26; ANNOYING: 9; BOOTSTRAP: 4; BUG: 596; BUILD: 12; CONC: 47; DOCS: 1; EXOTICTEST: 2; FLAP: 1; GLR: 3; IO: 22; JVM: 48; LHF: 7; LTA: 177; MATH: 4; META: 2; MOAR: 2; MOLD: 233; NATIVECALL: 22; NYI: 57; OO: 13; OPTIMIZER: 8; OSX: 2; PARSER: 5; PERF: 26; POD: 19; PRECOMP: 15; REGEX: 46; REGRESSION:

[21:20] <buggable> AlexDaniel_, 36; REPL: 6; RFC: 62; RT: 2; SECURITY: 1; SEGV: 26; SINK: 1; SITE: 1; SPESH: 1; STAR: 7; TESTCOMMITTED: 10; TESTNEEDED: 56; TODO: 13; UNI: 28; UNTAGGED: 278; WEIRD: 2; WINDOWS: 3; See http://fail.rakudo.party/ for details

[21:21] *** itaipu joined
[21:21] <AlexDaniel_> dammit, I'm counting 29 tickets more again /o\

[21:25] <HoboWithAShotgun> so, can you have them done by friday?

[21:25] <AlexDaniel_> HoboWithAShotgun: yes

[21:25] *** profan joined
[21:25] <AlexDaniel_> HoboWithAShotgun: not sure which Friday though

[21:26] <HoboWithAShotgun> lol. that was a joke

[21:26] <HoboWithAShotgun> oh, right. lol free zone

[21:26] <HoboWithAShotgun> no more lols

[21:26] <HoboWithAShotgun> :)

[21:26] <AlexDaniel_> Zoffix: any chance you know why buggable says 1640 tickets in total instead of 1669?

[21:27] <AlexDaniel_> it's 1638 without “stalled”, fwiw

[21:29] <AlexDaniel_> ok, so fail.rakudo.party does not include stalled tickets

[21:29] <AlexDaniel_> and these extra 2 are there because… I don't know

[21:37] <yoleaux> Zoffix: link tyil to CPAN guide

[21:37] <tyil> yoleaux: ?

[21:37] <tyil> I read it, yoleaux 

[21:39] <weabot> how do I ensure precision in Ints? is there a way to force them to be floating point?

[21:40] <tyil> https://docs.perl6.org/type/Num

[21:40] *** rindolf left
[21:40] <weabot> thanks

[21:41] <AlexDaniel_> weabot: hold on, what's your problem exactly?

[21:41] <AlexDaniel_> weabot: Num will not give you the precision you want

[21:41] <AlexDaniel_> most likely you need either Rat or FatRat, but I can't know without more info

[21:41] <weabot> I was just adding up a value to DateTime.now and it became a whole int

[21:41] <weabot> Num will probably be fine

[21:45] *** itaipu left
[21:47] <AlexDaniel_> RT #121327

[21:47] <synopsebot> RT#121327 [resolved]: https://rt.perl.org/Ticket/Display.html?id=121327 [TESTNEEDED] Scoping bug with `xx`

[21:47] <AlexDaniel_> synopsebot: how many tickets can you handle?

[21:49] *** Aaronepower joined
[21:51] <AlexDaniel_> synopsebot: nevermind

[21:55] <AlexDaniel_> buggable: tag TESTNEEDED

[21:55] <buggable> AlexDaniel_, There are 56 tickets tagged with TESTNEEDED; See http://fail.rakudo.party/t/TESTNEEDED for details

[21:56] <Juerd> Observation: slang (the suggested pronunciation for 6lang) is Dutch for snake. Interesting clash with Python :)

[21:56] *** itaipu joined
[21:59] *** kyan left
[21:59] <AlexDaniel_> Juerd: ha-ha :D

[22:00] *** vike left
[22:01] *** vike joined
[22:02] *** Rawriful left
[22:18] <HoboWithAShotgun> is anybody working on an intellisense plugin for atom?

[22:18] * HoboWithAShotgun prays to the code pixies

[22:21] *** ufobat left
[22:22] *** ryn1x left
[22:23] *** Xal left
[22:25] *** kyan joined
[22:25] *** itaipu left
[22:26] *** ryn1x joined
[22:28] *** Xal joined
[22:38] *** Herby_ joined
[22:38] <Herby_> o/

[22:38] <Zoffix> \o

[22:39] <AlexDaniel_> \o … o/

[22:41] *** ryn1x left
[22:42] *** ryn1x joined
[22:43] *** Alikzus_ joined
[22:44] *** lichtkind left
[22:46] *** ryn1x left
[23:01] *** itaipu joined
[23:05] *** ryn1x joined
[23:06] *** Cabanossi left
[23:08] <AlexDaniel_> Zoffix: MasterDuke: hey, what do you think? https://gist.github.com/AlexDaniel/0cdb8ea5bd55a7a3feabc4b0701a20e1

[23:09] *** ryn1x left
[23:09] *** Cabanossi joined
[23:10] *** ryn1x joined
[23:10] *** [particle] joined
[23:12] <AlexDaniel_> lizmat: hey. I have a script that generates this stuff ↑. What if we start doing it every week for p6weekly?

[23:12] <AlexDaniel_> timotimo: hey, I know you love pretty graphs. Maybe you'll have some ideas on how to make a pretty gist? ↑

[23:13] *** cdg joined
[23:14] <timo2timo> are you asking for something graphical?

[23:14] <timo2timo> like generate an svg with pretty things?

[23:15] <timo2timo> not sure how to display anything more than the numbers or something

[23:15] <timo2timo> do you know if svg displayed in a gist will let you have links?

[23:15] <AlexDaniel_> timo2timo: it doesn't have to be a gist. I can upload it anywhere

[23:16] <AlexDaniel_> it can be graphical if we want to

[23:16] <timo2timo> make it a square filled with pizza emoticons and butterflies

[23:17] <timo2timo> and put some of the RT numbers in there, clickable?

[23:17] <timo2timo> i haven't a clue :)

[23:17] *** cdg left
[23:17] <AlexDaniel_> that's an interesting idea

[23:18] <timo2timo> somewhat inspired by the perlin noise twitter bot

[23:18] *** ryn1x left
[23:19] *** ryn1x joined
[23:22] <TEttinger> there's a perlin noise twitter bot?

[23:22] <AlexDaniel_> https://twitter.com/perlin_noise this one I think

[23:23] *** mcmillhj joined
[23:24] <TEttinger> yeah, that's classic perlin noise, not simplex it looks like

[23:26] <TEttinger> meanwhile, I'm off cavorting with really weird kinds of noise https://i.imgur.com/hZWjfN6.gifv

[23:29] <TEttinger> that's a neat gist summary, btw AlexDaniel

[23:29] <TEttinger> I think a lot of projects would appreciate something like that being done automatically

[23:32] <AlexDaniel_> u: hyphen

[23:32] <unicodable6> AlexDaniel_, U+002D HYPHEN-MINUS [Pd] (-)

[23:32] <unicodable6> AlexDaniel_, U+00AD SOFT HYPHEN [Cf] (control character)

[23:32] <unicodable6> AlexDaniel_, 16 characters in total: https://gist.github.com/e825b7ae12503ed0f26727d53e9aceff

[23:43] *** evalable6 left
[23:43] *** evalable6 joined
[23:48] <AlexDaniel_> OK this page is now updated https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[23:58] *** ryn1x left
[23:59] *** ryn1x joined
