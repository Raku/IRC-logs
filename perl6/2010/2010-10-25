[00:18] *** Viestinik left
[00:25] <sorear> aloha, seen pmichaud 

[00:25] <aloha> sorear: pmichaud was last seen in #perl6 2 days 7 hours ago saying "yes, nom here also".

[00:25] <sorear> aloha, seen TimToady

[00:25] <aloha> sorear: TimToady was last seen in #parrot 22 hours 36 mins ago joining the channel.

[00:48] *** bluescreen left
[00:51] *** kiithroen joined
[00:54] <sorear> OK.

[00:54] *** risou_ left
[00:54] <sorear> \o/

[00:55] *** QinGW joined
[01:02] *** Viestinik joined
[01:02] *** zostay left
[01:03] *** zostay joined
[01:17] *** flatwhatson left
[01:24] *** colomon left
[01:30] *** colomon joined
[01:35] *** flatwhatson joined
[01:35] *** [particle] left
[01:36] *** [particle] joined
[01:48] *** steffen123__ joined
[02:02] *** whiteknight left
[02:04] <sorear> huh.  /usr/bin/time says that compiling STD took 28.88s user 369.84s system

[02:06] *** rvrgs left
[02:19] *** barika left
[02:24] *** meppl joined
[02:31] *** jjore left
[02:32] *** jjore joined
[02:33] <sorear> 2 + 2\n is working

[02:33] <dalek> niecza/master: a4be785 | sorear++ | lib/Cursor.cs:

[02:33] <dalek> niecza/master: Make LTM robust to missing subrules

[02:33] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/a4be7850c485e8c689a06d8061dbb2878871865e

[02:33] <dalek> niecza/master: 351fbdd | sorear++ | / (5 files):

[02:33] <dalek> niecza/master: More STD fiddles

[02:33] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/351fbdd22644ab4d3eb4c72292cd51eded28cbf8

[02:33] <dalek> niecza/master: b46f714 | sorear++ | lib/Kernel.cs:

[02:33] <dalek> niecza/master: Implement our %@ vars

[02:33] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/b46f71462c61970ee5203a1b01ed58b5d8c5da6c

[02:33] <dalek> niecza/master: d4cfcab | sorear++ | / (4 files):

[02:33] <dalek> niecza/master: Run mergeback

[02:33] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/d4cfcabb1ac319b57276495055a5031db2c7184a

[02:33] <dalek> niecza/master: f288668 | sorear++ | v6/tryfile:

[02:33] <dalek> niecza/master: Allow .shift from an empty list like P5

[02:33] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/f288668af593a462322f4dbeb26e050109aabcc4

[02:50] *** pythonian4000 is now known as pythonian4000afk

[02:50] *** pythonian4000afk is now known as pythonian4000

[02:50] *** pythonian4000 is now known as pythonian4000afk

[03:04] <sorear> /usr/bin/time says 30s user 360s system 800s elapsed.  dstat says system never went over 10%.  what gives?

[03:12] *** pythonian4000afk is now known as pythonian4000

[03:13] *** pythonian4000 is now known as pythonian4000afk

[03:13] *** pythonian4000afk is now known as pythonian4000

[03:23] *** meppl left
[03:29] *** meppl joined
[03:33] *** pythonian4000 is now known as pythonian4000afk

[03:33] *** pythonian4000afk is now known as pythonian4000

[03:41] *** pythonian4000 is now known as pythonian4000afk

[03:46] *** dengel10 joined
[03:48] *** flussence_ joined
[03:50] *** flussence left
[03:57] *** shelling_lab joined
[03:59] *** pythonian4000afk is now known as pythonian4000

[04:01] *** kiithroen left
[04:07] <dengel10> Hello :)

[04:07] <dengel10> I'm planning on modernizing an IRC infobot I built years ago.

[04:07] <dengel10> and figure Perl 6 should be fun :)

[04:07] <dengel10> would anyone know of a skelleton irc bot in Perl 6?

[04:08] <dengel10> so I can build on top the fetures of my infobot

[04:12] <meppl> someone could write a irc-module   http://modules.perl6.org/

[04:32] <dengel10> looking

[04:33] <dengel10> well... I tried. Found a pretty compact and easy one in C. Will build on top of that. 

[04:33] <dengel10> THanx anyways.

[04:33] *** dengel10 left
[04:46] <dalek> niecza/master: 5b07e77 | sorear++ | / (3 files):

[04:46] <dalek> niecza/master: More STD fiddles - 'foo' and "foo" work

[04:46] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/5b07e7737e96af6c912332b5a12ccb441ddb6461

[04:46] <dalek> niecza/master: 412a5eb | sorear++ | src/CompilerDriver.pm:

[04:46] <dalek> niecza/master: Generate Mono debug symbols

[04:46] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/412a5eb49967c1b611c52d80c85869ae70a1fcfb

[04:46] <dalek> niecza/master: 4c508d4 | sorear++ | lib/SAFE.setting:

[04:46] <dalek> niecza/master: Improve Numeric context handling

[04:46] <dalek> niecza/master: 

[04:46] <dalek> niecza/master: Also regexes use Str context

[04:46] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/4c508d429af14b709adf96c82172b339e934789b

[04:47] *** steffen123__ left
[04:52] *** kiithroen joined
[04:52] *** kaare joined
[04:53] *** kaare is now known as Guest50678

[04:53] *** dju_ joined
[04:57] *** dju left
[05:00] <sorear> hmm, niecza is running into memory issues with STD

[05:01] *** grew left
[05:02] *** cls_bsd joined
[05:10] *** grew joined
[05:19] *** pythonian4000 is now known as pythonian4000afk

[05:22] *** HarryS joined
[05:52] *** kiithroen left
[05:52] *** kiithroen joined
[06:01] *** kanishka joined
[06:05] *** wtw joined
[06:06] *** cjk101010 joined
[06:11] *** barika joined
[06:22] <dalek> niecza/master: aee9ca3 | sorear++ | lib/Cursor.cs:

[06:22] <dalek> niecza/master: Fix <.nonexistant> LTM crash, broken default <.ws>

[06:22] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/aee9ca3a2ba178d3f16701c2299313b03b7dcd8d

[06:22] <dalek> niecza/master: 421c88f | sorear++ | v6/ (3 files):

[06:22] <dalek> niecza/master: More STD tweaks

[06:22] <dalek> niecza/master: 

[06:22] <dalek> niecza/master: Now working: %*MYSTERY, q (foo), class { }

[06:22] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/421c88ff8605f2bb9d2dff641e7cc5a51d7c4e58

[06:22] <dalek> niecza/master: ff5e4b8 | sorear++ | src/RxOp.pm:

[06:22] <dalek> niecza/master: <x> || <x> should not cause List

[06:22] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/ff5e4b8588715613142547e14ee0e5b8ca3a8ceb

[06:22] *** baest_ is now known as baest

[06:53] *** [particle]1 joined
[06:55] *** pnu left
[06:57] *** [particle] left
[07:01] *** mavrc joined
[07:02] *** araujo left
[07:11] *** pythonian4000afk is now known as pythonian4000

[07:15] *** baux joined
[07:20] *** barika left
[07:24] *** Trashlord joined
[07:26] <dalek> niecza/master: cb10d14 | sorear++ | v6/ (5 files):

[07:26] <dalek> niecza/master: More STD tweaks; my $foo = 2 works now

[07:26] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/cb10d1431299cc14b4216da124fd2560fb0f4005

[07:26] *** kjeldahl left
[07:30] *** kanishka left
[07:34] <sorear> soooo many bugs.

[07:34] <Trashlord> bugs on pugs

[07:35] <au|irc> snoopy on snails

[07:36] <sorear> au o/

[07:36] <au|irc> hey sorear \o :)

[07:38] <sorear> niecza-compiled STD can parse 1000 repetitions of $*foo = $*bar / $*quux orelse $*moo(1,2,3); in 1 minute exactly

[07:38] <au|irc> woot!

[07:38] <au|irc> "niecza-compiled STD" is music to my ears

[07:41] <sorear> viv-compiled STD requires 2m 5s

[07:41] <sorear> it only barely works

[07:41] <sorear> it's riddled with inscrutable miscompilations

[07:42] <sorear> I have reached one peak, and only now do I see how long the road is

[07:43] <au|irc> *nod* the journey of a thousand miles continues with another single step :)

[07:43] <sorear> I am not sure how I will ever compete with Perl 5 on parsing speed

[07:44] <sorear> (perhaps by focusing on precompiler support?)

[07:44] <sorear> anyways it's far from the "30 times faster" I expected from the JSON::Tiny work

[07:45] <sorear> the current handling of lists, I suspect, is much of the problem

[07:45] <sorear> especially as I don't really understand them all that well - they're stolen from Rakudo and pmichaud's notes

[07:48] <au|irc> this is the "my class List is Cool" linked list from lib/SAFE.setting?

[07:52] <sorear> yes

[07:53] <sorear> and its two subclasses Array and Seq

[07:53] <sorear> looking at the runtime call traces, most uses of arrays are creating iterators built on iterators built on iterators

[07:53] *** hanekomu_ joined
[07:54] <sorear> lots of time spent around List!fill, ListIterator.reify, List.shift, List.clone

[07:55] <au|irc> *nod* 

[07:57] <dalek> niecza/master: 28714cc | sorear++ | lib/Cursor.cs:

[07:57] <dalek> niecza/master: Avoid creating List objects for tokens/rules

[07:57] <dalek> niecza/master: 

[07:57] <dalek> niecza/master: This gets us a 4-5% speedup in STD.

[07:57] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/28714cc546578db6931e94f7b39cd0ff1a64ada8

[08:01] *** kjeldahl joined
[08:11] *** barika joined
[08:12] <sorear> au|irc: I want to blame lazy semantics

[08:12] *** Trashlord left
[08:12] <au|irc> lazy semantics would happily take infinite blame

[08:15] * au|irc just freshly got "ok 608" from "./niecza_eval test.pl" - a long way from <100 in July!

[08:16] *** dakkar joined
[08:21] *** drbean left
[08:21] *** drbean_ joined
[08:24] *** flatwhatson_ left
[08:29] *** PZt left
[08:35] *** pnu joined
[08:44] *** flussence_ is now known as flussence

[08:48] *** hanekomu_ left
[08:51] *** lge joined
[09:00] *** rgrau joined
[09:06] *** MayDaniel joined
[09:16] *** dukeleto left
[09:16] *** [particle]1 left
[09:16] *** dukeleto joined
[09:17] *** [particle] joined
[09:22] *** kiithroen left
[09:34] *** bbkr joined
[09:35] *** daxim joined
[09:44] *** risou joined
[09:44] *** _twitch joined
[09:51] <colomon>  argh.  what error was "the too few positional arguments: 2 passed, 3 (or more) expected" message hiding?

[09:58] <colomon> oh, right, use of an undeclared varible.

[09:59] <dalek> niecza/master: e671cca | sorear++ | lib/SAFE.setting:

[09:59] <dalek> niecza/master: Fix test failures

[09:59] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/e671ccada2163ba619d3a036439224b109ec3fdd

[09:59] <dalek> niecza/master: cfa7a9d | sorear++ | src/ (2 files):

[09:59] <dalek> niecza/master: Delete optrees after code generation

[09:59] <dalek> niecza/master: 

[09:59] <dalek> niecza/master: This saves 15-20% on the size of store files and reduces compiler memory

[09:59] <dalek> niecza/master: usage correspondingly.

[09:59] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/cfa7a9dc54a907f7a0c72ffc8b72f0029e3647f7

[09:59] <dalek> niecza/master: dd75106 | sorear++ | / (2 files):

[09:59] <dalek> niecza/master: Be more aggressive about deleting elided subs

[09:59] *** wallberg joined
[09:59] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/dd7510607aa6fb16f372f336b001d968567e684d

[10:01] *** PZt joined
[10:04] *** wallberg left
[10:04] *** wallberg joined
[10:06] *** QinGW left
[10:15] <mathw> sorear: you've been busy :)

[10:18] *** icwiener joined
[10:32] *** wallberg left
[10:32] *** wallberg joined
[10:34] *** wallberg left
[10:35] *** wallberg joined
[10:39] *** baux left
[10:44] *** baux joined
[10:48] *** PZt left
[10:51] *** PZt joined
[10:56] *** nadim left
[10:56] *** PZt left
[10:56] *** nadim joined
[11:01] *** tzhs joined
[11:07] *** daxim left
[11:09] *** daxim joined
[11:12] *** orafu left
[11:12] *** zulon joined
[11:12] *** orafu joined
[11:25] *** uniejo joined
[11:31] *** zulon left
[11:33] *** wamba joined
[11:33] *** wamba left
[11:34] *** wamba joined
[11:34] *** wamba left
[11:37] *** wamba joined
[11:44] *** PZt joined
[11:45] *** masak joined
[11:45] <masak> oh hai, #perl6!

[11:48] <sjn> o/

[11:55] <colomon> \o

[11:57] *** pythonian4000 is now known as pythonian4000afk

[12:03] *** am0c joined
[12:05] *** takadonet joined
[12:05] <takadonet> morning all

[12:05] <masak> takadonet: 'o

[12:06] <takadonet> masak: how are u?

[12:06] <masak> I'm fine, considering that it's Monday.

[12:06] <masak> and u?

[12:08] <takadonet> doing ok. Going to be a long week

[12:08] <masak> aye.

[12:12] *** Trashlord joined
[12:19] *** zostay left
[12:25] *** bluescreen joined
[12:27] <jnthn> o/ from England

[12:27] * jnthn made it here alive

[12:29] <masak> jnthn! \o/

[12:29] <masak> hm, interesting ohloh comparison: http://twitter.com/dukeleto/status/28675662260

[12:29] <jnthn> masak!

[12:32] <jnthn> lunch time here :)

[12:35] <masak> I must say I like that graph. one can discern a rise in Rakudo contributors from it.

[12:36] <bbkr> moritz++ # article about core modules. 

[12:39] <masak> sorear++ # first hill! yay!

[12:40] <masak> sorear: I just want to say that I think your work on making parsing fast is very important.

[12:40] <colomon> what caught my attention about the graph is the drop-off in Rakudo contributors around R* release...

[12:45] <takadonet> wonder if jnthn commits on his branch count toward that counter

[12:49] <colomon> makes me feel again that we need something to push for...

[12:53] <takadonet> improve speed? 

[12:53] <masak> easier said than done, but yes.

[12:53] <masak> I think "speed" is at the top of most people's list.

[12:54] *** MayDaniel left
[12:54] <takadonet> so the people who can 'easily' change that worry about it while the rest of us write frameworks :)

[13:00] *** MayDaniel joined
[13:01] <masak> something like that.

[13:02] <daxim> what's the best data structure in p6 to represent a multiset and operate on it?

[13:03] <masak> daxim: Bag?

[13:03] *** Guest50678 left
[13:03] <daxim> cool, a built-in

[13:04] <colomon> takadonet: "speed" is great, but it's also very nebulous.  

[13:04] <daxim> rakudo: my Bag $b = (1,2,2,3,4,5,5,6,,7,8,); say $b

[13:04] <p6eval> rakudo d49eea: OUTPUT«===SORRY!===␤In "my" declaration, typename Bag must be predeclared (or marked as declarative with :: prefix) at line 22, near " $b = (1,2"␤»

[13:04] <masak> here's a best-case scenario: during the past two-three years, Rakudo has grown in number of features, and people say "that's very nice, well done, but why is it so slow?". during the next two-three years, Rakudo will get faster through some means (improvements in Parrot, internal optimizations in the nqp-rx/Rakudo stack, trying out a .NET version of Rakudo, etc), and then, in 2014 or so, we will have a fast Rakudo with all the features

[13:04] <masak> of today *and* more.

[13:04] <colomon> it's also unclear how much of it is achievable by mere mortals.

[13:04] <masak> colomon: please explain to me what you mean by "nebulous" here.

[13:04] <masak> I agree it's not a one-dimensional thing.

[13:05] <masak> but it's clearly something that can be measured in various ways, albeit with difficulty.

[13:05] <colomon> masak: I mean that "R* in April" was an easy to understand goal.

[13:05] <colomon> for people to work towards.

[13:06] <masak> right, but the "R*" part consisted of a number of subgoals and sub-subgoals.

[13:06] <colomon> The equivalent would be something like "10x faster by Christmas".

[13:07] <colomon> Just saying "speed" doesn't provide much direction or urgency

[13:07] <masak> true.

[13:07] <masak> this all reminds me of a certain pie-throwing incident in 2002.

[13:07] <colomon> pie-throwing?

[13:07] <masak> I wasn't yet active then, but I've backlogged over the event.

[13:07] <colomon> I can only recall hearing of mug throwing.  

[13:07] <masak> yes, the Parrot pumpking was Dan at the time.

[13:08] <masak> he made a bet, concerning Parrot, Python and speed.

[13:08] *** _twitch left
[13:08] <masak> he lost, for various non-trivial technical reasons.

[13:08] <masak> I've heard it muttered that in some ways, Parrot still suffers from the hasty hacks put into the VM for the sake of winning that bet.

[13:10] <masak> http://www.sidhe.org/~dan/blog/archives/000370.html

[13:10] <masak> actually, there's a whole category about it: http://www.sidhe.org/~dan/blog/archives/cat_piethon.html

[13:11] <masak> (sorted reverse-chronologically, it seems)

[13:13] <takadonet> masak: I find it amazing that you know about this

[13:13] <masak> why? I'm a Perl 6 historian on my spare time.

[13:14] <takadonet> I know but you about 10 years to go thry

[13:14] <takadonet> thru*

[13:15] <masak> I can't claim to have a complete overview of it all. it sure is a lot of text.

[13:16] <PerlJam> I was around and paying attention back then and I don't have a complete overview of it all  :)

[13:16] <colomon> anyway, I don't know that "10x faster in N months" is the right thing to go for.

[13:17] <colomon> but I do feel like we need something to provide motivation and direction

[13:17] <colomon> perhaps porting N major Perl 5 modules might be a good alternative

[13:18] <PerlJam> colomon: What does "porting" mean exactly?

[13:18] <colomon> PerlJam: somehow making them work with Perl 6

[13:18] <PerlJam> by hook or crook?

[13:18] <colomon> I was thinking rewriting, but if there are better alternatives...

[13:19] <PerlJam> Perhaps it's just the mood I'm in this morning, but I see nothing but problems with the ideas of some percentage increase in speed *and* porting some number of modules.

[13:20] <colomon> rewriting would be a great way to stress Rakudo in nice bug-findy ways, while providing useful modules in the end.

[13:20] <PerlJam> (problems with them as rallying points for the Perl 6 community I mean)

[13:20] <colomon> PerlJam++

[13:20] *** Patterner left
[13:21] *** Psyche^ joined
[13:21] *** Psyche^ is now known as Patterner

[13:22] <PerlJam> though as I think it through a little more, most of the problems I see are due to the "parrot implementation barrier" that we're likely to run across.

[13:22] <colomon> Hmmm... maybe we should make N = 6 throughout.  six modules & 6x faster, all in 6 months.  :)

[13:23] <PerlJam> <insert biblical references to 666 at will>

[13:26] *** estrabd joined
[13:30] *** plainhao joined
[13:32] *** pnu left
[13:35] <colomon> The 666 plan!  Ooooo....

[13:38] *** pnu joined
[13:38] <takadonet> colomon: which ones? :)

[13:38] <colomon> which modules?

[13:38] <takadonet> yes

[13:39] <colomon> I wouldn't know.

[13:39] <takadonet> should find which module are the most used and port them. 

[13:40] <takadonet>  minus frameworks

[13:45] *** Raynes left
[13:46] <colomon> http://stats.cpantesters.org/leadercpan.html#top20distros

[13:46] <takadonet> colomon: I was just looking at that...

[13:47] <takadonet> colomon: http://ali.as/top100/

[13:48] <colomon> volatile 100, maybe

[13:48] <colomon> ?

[13:48] *** Raynes joined
[13:48] <takadonet> probably a good place to choice 

[13:49] <takadonet> some are already build in 

[13:49] <colomon> Text-Tabs+Wrap

[13:49] <colomon> File-Path

[13:50] <colomon> Scalar-List-Utils

[13:50] <colomon> ?

[13:50] <colomon> (I mean, as possible candidates...)

[13:52] <takadonet> I believe some of the fcn of Scalar::List::Utils are built-in

[13:52] *** kjeldahl left
[13:52] <colomon> takadonet: I'm sure you're right there.

[13:52] <takadonet> never heard of Text::Tabs+Wrap

[13:52] <takadonet> should be easy to do..

[13:53] <colomon> actually, List::Utils appears to be entirely in p6's core already.  :)

[13:53] <colomon> Scalar::Utils, on the other hand...

[13:55] *** uniejo left
[13:56] *** cjk101010 left
[13:57] <takadonet> well I might actually make a commitment here.... I port Text::Tabs and Text::Wrap modules 

[13:57] *** PacoLinux joined
[13:58] *** uniejo joined
[13:58] *** phenny left
[13:59] *** uniejo left
[14:00] <colomon> takadonet++

[14:02] *** timbunce joined
[14:05] *** phenny joined
[14:06] <masak> takadonet: make sure you check out the Str.indent built-in (mentioned in S32-setting-library/Str.pod)

[14:06] <colomon> but NYI

[14:07] <takadonet> masak: sounds good

[14:07] <masak> colomon: would be a nice weekly challenge, methinks.

[14:07] <takadonet> masak: what would?

[14:07] <masak> implementing .indent

[14:08] <takadonet> ah

[14:08] *** jhuni joined
[14:09] *** wamba left
[14:29] *** patspam joined
[14:31] *** flatwhatson_ joined
[14:33] <dalek> 6model: 1364eb1 | mberends++ | dotnet/compiler/ (2 files):

[14:33] <dalek> 6model: [dotnet/compiler] streamline build and test scripts for Mono on Linux

[14:33] <dalek> 6model: review: http://github.com/jnthn/6model/commit/1364eb1f188ef960708df851b7ea71977b72dfda

[14:35] *** rgrau_ joined
[14:39] *** dukeleto left
[14:39] *** dukeleto joined
[14:43] *** wtw left
[14:44] *** vapace joined
[14:45] *** Viestinik left
[14:49] *** am0c left
[14:51] *** Khisanth left
[14:53] *** cognominal left
[14:54] <dalek> 6model: 07f57e1 | mberends++ | java/runtime/ (8 files):

[14:54] <dalek> 6model: [java/runtime] catch up to dotnet in throw and catch handlers

[14:54] <dalek> 6model: review: http://github.com/jnthn/6model/commit/07f57e1ffe9432d3b19d25ae31ed9b473bc80f6f

[14:59] *** Exodist left
[14:59] *** dukeleto left
[14:59] *** exodist joined
[15:00] *** hatseflats left
[15:00] *** hatsefla1s joined
[15:01] *** molaf joined
[15:01] *** dukeleto joined
[15:02] *** bluescreen left
[15:02] *** bluescreen joined
[15:03] *** cognominal joined
[15:04] *** icwiener left
[15:04] *** dukeleto left
[15:07] *** Khisanth joined
[15:12] *** lge left
[15:14] *** tzhs left
[15:18] *** icwiener joined
[15:29] *** spq1 joined
[15:29] *** spq1 left
[15:44] *** Ross joined
[15:46] <masak> I said that the pie was in 2002. however, looking at http://www.sidhe.org/~dan/blog/archives/cat_piethon.html it is evident that it was in 2004.

[15:50] <takadonet> masak: still looking at that?

[15:50] <masak> off and on, yes.

[15:51] *** Ross left
[15:51] <masak> I have an unhealthy relationship to browser tabs...

[15:53] <takadonet> heh

[15:53] *** Ross joined
[15:53] *** Ross left
[15:53] *** Ross joined
[15:55] *** wamba joined
[15:58] <masak> swim &

[15:58] *** masak left
[16:24] *** cdarroch joined
[16:24] *** cdarroch left
[16:24] *** cdarroch joined
[16:25] *** wallberg left
[16:29] *** orafu left
[16:30] *** orafu joined
[16:31] *** daxim left
[16:31] *** Ross left
[16:35] *** daxim joined
[16:36] *** Ross joined
[16:39] *** baux left
[16:39] *** alester joined
[16:49] *** icwiener_ joined
[16:51] *** icwiener left
[16:55] *** dukeleto joined
[17:07] *** _kaare joined
[17:14] *** isBEKaml joined
[17:14] <isBEKaml> OHHAI, #perl6! :)

[17:14] <phenny> isBEKaml: 24 Oct 18:49Z <masak> tell isBEKaml that I'd like to conspire over Yapsi with him. :)

[17:14] <colomon> \o

[17:15] <isBEKaml> colomon: how's things on a monday? :)

[17:15] <colomon> I'm insanely tired

[17:15] <isBEKaml> phenny: tell masak I'd be glad to be a co-conspirator! 

[17:15] <phenny> isBEKaml: I'll pass that on when masak is around.

[17:16] <colomon> but accomplishing things for $work, and it's hourly pay $work, too.

[17:16] *** skangas` joined
[17:16] <colomon> I've also been scheming on how to inspire the Rakudo development process.  (Check the backlog.)

[17:16] <isBEKaml> I think I can understand that - I've been terribly tired over the past month as well. One of the reasons I'm off on a vacation this weekend. 

[17:16] *** sukria left
[17:17] <colomon> In this case, it has something to do with waking up at 4:30 am and having a cat wake me up every time I came close to getting back to sleep.

[17:18] *** sukria joined
[17:18] <isBEKaml> well, I was actually suffering from a bout of insomnia after some lull. So, sleep was becoming insanely difficult and I sorely wanted to sleep! 

[17:19] <isBEKaml> [backlog] I think you're referring to the need for adding more libraries to core perl6? 

[17:19] <isBEKaml> rakudo: (1/0).say

[17:20] <p6eval> rakudo d49eea: OUTPUT«Inf␤»

[17:20] <PerlJam> isBEKaml: more action and excitement to Perl 6   :-)

[17:20] <isBEKaml> rakudo: (1/0.0).say

[17:20] <p6eval> rakudo d49eea: OUTPUT«Inf␤»

[17:20] <colomon> Well, I was mostly looking for things to inspire -- what PerlJam++ says.

[17:20] <colomon> modules seemed a good potential choice.

[17:21] <isBEKaml> 12:40 colomon what caught my attention about the graph is the drop-off in Rakudo contributors around R* release...

[17:21] <colomon> pretty sure there's been a similar drop-off in actual changes to rakudo's source.

[17:22] <isBEKaml> I remember moritz_++ adding a few potential modules as part of weekly (or newbie) challenges... must be somewhere around. 

[17:22] <isBEKaml> (mu repo, I think)

[17:23] <isBEKaml> phenny: tell masak, about the 1/0 result in java - you'd better understand the difference if you try 1/0 and 1/0.0. Java treats real and integers on different scales. :)

[17:23] <phenny> isBEKaml: I'll pass that on when masak is around.

[17:24] *** dakkar left
[17:26] <isBEKaml> one thing I find LTA is the amount of memory rakudo consumes and the high startup times involved. This is especially aggravated on older machines with less than 1G of RAM. 

[17:26] * colomon admits he hasn't had less than 4G of RAM in a machine in years.  unless you count his phone.

[17:27] * isBEKaml admits he hasn't seen machines with over 2G of RAM unless you count his phone. 

[17:27] <PerlJam> you know how people are always saying how Perl 6 isn't "real"?  I don't think they really believe that Perl 6 doesn't exist so much as they believe it isn't on par with other languages.  Perl 6 is kind of a toy or a hobby project.

[17:28] <PerlJam> It's got neat features and syntax and such, but it's slow and not all put together.

[17:28] *** Entonian joined
[17:28] <isBEKaml> I think one way to correct the "hobby" perception is more activity on the mailing lists. That'd give out a more serious message to the world than just sticking around on IRC conversations. 

[17:29] <PerlJam> isBEKaml: I think the mailing lists are just as invisible.

[17:29] <isBEKaml> PerlJam: that's exactly my point. Why not make it more active and visible?

[17:29] <PerlJam> I mean, even if there were more activity on the mailing list, I don't think it would help.

[17:30] <isBEKaml> It'd sure help - provided you point people towards mailing lists than IRC channels. Maybe, perl6.org could help in there. 

[17:31] <isBEKaml> IMO, IRC channels tend to look like a bunch of people goofing off all day. NOM. 

[17:33] <mkramer> isBEKaml: which open source communities have you been involved in building?

[17:33] <isBEKaml> mkramer: this is the first one I'm involved in. :)

[17:34] <PerlJam> You what would make developing in Perl 6 nicer for me?   If I never saw a parrot error.  Granted, I could limit my ability to diagnose and fix some errors that way, but I like having the conceptual wall where I never see parrot.

[17:35] <PerlJam> (I don't know why that is.  I don't have anything in particular against parrot, I just want to see "Perl 6 errors")

[17:35] <isBEKaml> parrot leakages still happen? I thought jnthn++ fixed that a while ago?

[17:38] <PerlJam> Maybe that would make a good jihad for Perl 6.  Sharpen the boundary between Rakudo and the underlying VM  :)

[17:39] *** Khisanth left
[17:39] <isBEKaml> I think that'd be the case for parrot, not for perl6. =)

[17:39] *** Khisanth joined
[17:45] <isBEKaml> (I think the job of demarcating the works between the outside world and the VM is best left to the VM)

[17:52] *** timbunce left
[17:53] *** javs joined
[17:53] *** vapace left
[17:53] *** vapace joined
[17:57] <isBEKaml> Found the list of project-ideas that moritz_++ put up sometime ago: misc/helpnow/README (mu repo)

[17:59] *** pyrimidine joined
[17:59] *** timbunce joined
[18:01] *** daxim left
[18:08] *** envi left
[18:09] *** meppl left
[18:10] <takadonet> can you do a substitution and capture at the same time??

[18:15] <flussence> "$str ~~ s/(.)//;" doesn't populate $/, but "$str ~~ /(.)/" does... I don't think it's possible

[18:15] *** rejs joined
[18:21] *** Chillance joined
[18:23] <takadonet> I have this perl 5 line : '          $in =~ s/^TEST\s*(\d+)?\s*(\S+)?\n//; '

[18:23] <takadonet> My hack for now is to simply going to call it twice

[18:23] <takadonet> flussence: thanks anyway :)

[18:25] *** kanishka joined
[18:30] *** sftp joined
[18:33] *** itz left
[18:37] *** Chat2643 joined
[18:39] <Chat2643> horny female 23 years have pics;)

[18:39] *** ashleydev left
[18:40] *** Chat2643 left
[18:40] *** Entonian left
[18:40] *** ashleydev joined
[18:49] *** rejs left
[18:51] *** MayDaniel left
[18:55] *** Entonian joined
[18:57] <sorear> good * #perl6

[18:57] <takadonet> sorear: yo

[18:57] <isBEKaml> hi sorear 

[18:59] *** masak joined
[19:00] *** masak left
[19:04] *** isBEKaml left
[19:04] <diakopter> Chat2643: that's a tad OT

[19:08] <Raynes> Just a tad.

[19:09] *** araujo joined
[19:09] *** araujo left
[19:09] *** araujo joined
[19:13] <dalek> 6model: fd17228 | mberends++ | dotnet/runtime/ (24 files):

[19:13] <dalek> 6model: [dotnet/runtime] if the Java version cannot use the var type declaration, I don't see why the C# version should ;)

[19:13] <dalek> 6model: review: http://github.com/jnthn/6model/commit/fd172283279114dead7fb60ec09634e1643375d8

[19:20] *** vapace left
[19:21] *** vapace joined
[19:21] *** Eliranon joined
[19:24] <Eliranon> hi all.. I have simple question, is perl6 going to replacing perl5 or they will always both exist? Perl5 was preferred for all sys admins and web developers.. what about perl 6?

[19:25] <PerlJam> Eliranon: They will coexist.

[19:25] <PerlJam> Eliranon: we can't say if that will *always* be the case, but that's what we think will happen for the foreseeable future.

[19:25] <takadonet> Eliranon: An example would be C and C++

[19:27] <Eliranon> so can we say that for a sys admin for example, there will be no need to take a look at perl6? who will be the people who use it mostly?

[19:28] <takadonet> Eliranon: It will be used as broad as Perl 5 and probably beyond

[19:29] <PerlJam> Eliranon: we can't predict the future.  People will use what they find useful.

[19:33] *** plainhao left
[19:33] <Eliranon> one last question, I used perl5 regular expressions extensively in my work to create reports effectively and fast.. do you recommend me to check perl6? and why (if yes) :)

[19:36] <sorear> Not yet.

[19:41] <PerlJam> Eliranon: if you have an interest in languages/grammars/regex, you should look at the features Perl 6 has to offer.  But if you want fast execution speed, we're not there yet at all.

[19:44] *** jackyboy joined
[19:44] *** jackyboy left
[19:44] *** jackyboy joined
[19:45] <Eliranon> @PerlJam: When I started using perl for report generation around ten years ago I fell in love with the language.. so I will check the regex/grammar of Perl6.. I am sure perl6 will get fast someday and I may use it for a couple of years (before retirement) :D

[19:45] <jackyboy> Standalone rules are not supported yet are they?

[19:47] <pmichaud> good afternoon, #perl6

[19:47] <pmichaud> standalone rules are only available through variables at the moment -- e.g.:    my $rule = rule { ... };   / $rule /

[19:47] <jackyboy> ahhh ok

[19:47] <jackyboy> thats what i thought

[19:47] <jackyboy> thanks mate

[19:47] <pmichaud> we're still working out how the semantics should work for named rules and regexes outside of a grammar

[19:49] <jackyboy> interesting

[19:49] <PerlJam> that read an awful lot like "we're still waiting for miracle to occur" in my head  :)

[19:49] <jackyboy> shouldn't it be quite simple?

[19:49] <jackyboy> (not that I know much about it)

[19:49] <PerlJam> jackyboy: We thought so at first too.  Turns out it's not that simple.

[19:50] <PerlJam> But, "waiting for a miracle to occur" is also roughly equivalent to "waiting for Larry's brain to intuit an elegant solution" too, so there's still hope.

[19:50] <PerlJam> (at least in my head)

[19:50] <pmichaud> I think we have the outlines of a solution, although it's not entirely elegant yet

[19:50] <sorear> the interesting case is #`( in setting ) sub uc($fo) { ... }  #`( in user code )  grammar G { rule uc { .. }; ... <uc> }

[19:51] *** _kaare left
[19:51] <sorear> should <uc> bind to the lexical &uc (which would be utterly wrong), or should it "fall back" to looking in the grammar?

[19:51] <pmichaud> that one isn't too bad, it's clear the nested <uc> should use the one from the grammar (due to lexical scoping)

[19:51] <pmichaud> more interesting is

[19:52] *** Eliranon left
[19:52] <pmichaud>     grammar G { rule uc { ... };  rule xyz { <uc> }; };    rule uc { ... };   / <G::xyz> /

[19:52] <pmichaud> or a variety of other inheritance-related items

[19:53] <jackyboy> ooo

[19:53] <slavik1> what is the top rule? used to be rule TOP

[19:53] <pmichaud> it's still TOP by default

[19:54] <jackyboy> so for the moment we should just put everything into a grammar?

[19:55] <pmichaud> or use variables for rules :-)

[19:55] <jackyboy> but if you use variables for rules how do you nest them?

[19:55] <jackyboy> i.e. my $rule = rule {<date> \s+ <name>}

[19:55] <pmichaud> my $abc = rule { abc };   my $def = rule { $abc };   # works fine

[19:55] <jackyboy> and then defining <date> and <name> rules

[19:56] <jackyboy> ooo

[19:56] <jackyboy> ok

[19:56] <sorear> that ought to be <$abc>

[19:56] <pmichaud> can also use  <$abc>

[19:56] <pmichaud> and if you want to capture it, it's   <abc=$abc>

[19:56] <jackyboy> cheers

[19:56] <pmichaud> (that's the part we're not very happy about at the moment)

[19:56] <jackyboy> yeah it seems a little clunky

[19:57] *** rgrau_ left
[19:57] *** rgrau_ joined
[19:57] <jackyboy> but I love how perl6 is turning out

[19:57] <jackyboy> :)

[19:58] <sorear> ... yuck.

[19:58] <sorear> S05 really does say that $foo in a regex treats Regex and Str differently

[19:59] <pmichaud> basically,   $foo means "if it's not a regex, make it a literal string match"

[19:59] <pmichaud> <$foo>  means  "if it's not a regex, stringify and compile to regex"

[19:59] <pmichaud> (with special rules for arrays and the like)

[20:00] <sorear> well, as a static compiler hacker, I'm not too thrilled with the second one ;)

[20:01] <pmichaud> it's dynamic pretty much no matter what you do :-|

[20:01] <pmichaud> (since they're variables)

[20:01] <sorear> how much of the List guts I stole from you are part of the Perl 6 spec?

[20:01] <sorear> will the spectests be directly working with ListIter objects?

[20:02] *** Trashlord left
[20:02] *** vapace left
[20:10] *** M_o_C joined
[20:33] <dalek> niecza/master: 71c2d1e | sorear++ | / (3 files):

[20:33] <dalek> niecza/master: Avoid repeated invalidation while constructing classes

[20:33] <dalek> niecza/master: 

[20:33] <dalek> niecza/master: This saves about 1 second on STD load time.

[20:33] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/71c2d1e1751396b033037d9c27f5610d1a12efd1

[20:33] *** javs left
[20:44] *** timbunce left
[20:50] *** timbunce joined
[20:50] *** jjore left
[20:52] *** jjore joined
[20:54] <jackyboy> so how do you access a named capture?

[20:54] <jackyboy> I am trying

[20:54] <jackyboy> $/<namedCapture>

[20:54] <jackyboy> after a successful match

[20:55] *** grew left
[20:57] <jackyboy> or even $/{'rule_name'}<namedCapture> but that gives Any()

[20:59] *** Ross left
[21:01] *** MayDaniel joined
[21:01] *** Ross joined
[21:04] <jackyboy> Not even $/{'rule_name'}[0] works when using a rule. Nor $/[0]

[21:05] <jackyboy> $/[0] works for the exact same regex but copied and pasted into $string ~~ / query /

[21:10] <PerlJam> jackyboy: show your code

[21:11] <PerlJam> jackyboy: and show the whole code :)

[21:14] <jackyboy> my $string = "the lazy boy couldn't code";

[21:14] *** seb_est_la joined
[21:15] <jackyboy> my $reg = regex { the (.*) }

[21:15] <PerlJam> copy-n-paste into gitst.github.com or something rather than on channel

[21:15] <jackyboy> ah ok ok

[21:15] <PerlJam> (then just paste the link)

[21:16] <sorear> gist

[21:17] <jackyboy> http://gist.github.com/645778

[21:18] <sorear> use <reg=$reg>

[21:18] <sorear> then say $<reg>

[21:18] <PerlJam> well, $<reg>[0]

[21:19] <jackyboy> hmm where should I put <reg=$reg> in the example code?

[21:21] <jackyboy> i thought in the match

[21:21] <jackyboy> but that doesn't work

[21:22] <PerlJam> jackyboy: if $string ~~ $reg { say $/[0] }  # should work.  you introduced an extra level of indirection when you said  m/ $reg /  I think.

[21:22] <jackyboy> yep

[21:22] <jackyboy> ok

[21:22] <jackyboy> yeah

[21:22] <jackyboy> it does work

[21:22] <jackyboy> cheers mate

[21:22] <jackyboy> and named captures work the same way but with $<reg><namedCapture>

[21:22] <jackyboy> ?

[21:23] <PerlJam> but  m/ <reg=$reg> / should have also worked  (and $/<reg>[0] would have given you your string)

[21:24] <jackyboy> it does, I was missing the angle brackets

[21:24] <jackyboy> I was trying $/reg[0] etc

[21:24] <jackyboy> for a long while

[21:25] <jackyboy> thank you

[21:25] <PerlJam> sure

[21:26] <sorear> $/ can be accessed as hash or as an array

[21:26] <sorear> it's not special syntax

[21:28] *** pothos joined
[21:29] *** bluescreen left
[21:30] *** M_o_C left
[21:30] *** pothos_ left
[21:32] <PerlJam> Hmm.  Is there a way to get at the capture when you do  my $r = regex { (.) };  "foo" ~~ m/ f $r o /;    # ???

[21:32] <Tene> PerlJam: my $match = "foo" ~~ m/.../;

[21:33] <Tene> Or did I misunderstand?

[21:33] <PerlJam> the capture in $r is hidden.

[21:34] <Tene> ah

[21:34] <Tene> $<foo>=$r ?

[21:34] <PerlJam> rakudo: my $r = regex { (.) };  "foo" ~~ m/ f <r=$r> o /; say $/<r>[0];

[21:34] <p6eval> rakudo d49eea: OUTPUT«o␤»

[21:34] <PerlJam> I want that but without naming $r

[21:34] <Tene> yeah

[21:35] <PerlJam> Well, I don't /want/ it as much as I wonder if it's possible now

[21:35] <Tene> rakudo: my $r = regex { (.) };  "foo" ~~ m/ f ($r) o /; say $/[0][0];

[21:35] <p6eval> rakudo d49eea: OUTPUT«␤»

[21:35] <PerlJam> that's interesting

[21:36] <PerlJam> rakudo: my $r = regex { (.) };  "foo" ~~ m/ f ($r) o /; say $/[0]

[21:36] <p6eval> rakudo d49eea: OUTPUT«o␤»

[21:37] *** Ross left
[21:38] <PerlJam> (and by "interesting", I mean "a bug"  :)

[21:39] *** takadonet left
[21:39] *** Entonian left
[21:40] *** takadonet joined
[21:40] <takadonet> yo

[21:42] <dalek> niecza/master: 08e051c | sorear++ | src/ (5 files):

[21:42] <dalek> niecza/master: Allow regex embedded blocks to be inlined

[21:42] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/08e051cfa36d0365169be8b8ff6c7cf0f70741be

[21:50] <takadonet> so close....

[21:52] <takadonet> What I'm doing wrong here? Error: 'Adverb 'g' not allowed on m ' on line : $x ~~ ms:g/(\N+)/;

[21:54] <takadonet> nevermind

[21:55] *** MayDaniel left
[21:59] <takadonet> !!!

[22:04] <takadonet> anyone know how to do capturing for repeat matches?

[22:06] *** mavrc left
[22:11] *** orafu left
[22:12] *** timbunce left
[22:15] *** takadonet left
[22:16] *** takadonet joined
[22:19] *** slavik1 left
[22:20] *** slavik1 joined
[22:32] <sorear> takadonet: avoid :g

[22:32] <sorear> do you know about .comb?

[22:33] <takadonet> ... probably I forgot

[22:35] *** Chillance left
[22:40] *** wamba left
[22:53] <jackyboy> ooo what is .comb?

[22:53] *** slavik1 left
[22:57] <arnsholt> jackyboy: Inverse of split, essentially

[22:58] <arnsholt> It returns the bits of the string that match the pattern, instead of the bits that don't match

[23:00] *** masak joined
[23:00] <masak> arnsholt: I wouldn't call .comb the "inverse" of .split so much as the "dual".

[23:00] <phenny> masak: 17:15Z <isBEKaml> tell masak I'd be glad to be a co-conspirator! 

[23:00] <phenny> masak: 17:23Z <isBEKaml> tell masak about the 1/0 result in java - you'd better understand the difference if you try 1/0 and 1/0.0. Java treats real and integers on different scales. :)

[23:01] *** icwiener_ left
[23:01] <masak> isBEKaml: I'm aware of Java's treatment of integer division. :) it seems quite sane to me.

[23:05] *** orafu joined
[23:05] <jackyboy> ahh cool

[23:06] <masak> rakudo: say "1 17 314".comb(/\d+/).perl

[23:06] <p6eval> rakudo d49eea: OUTPUT«("1", "17", "314")␤»

[23:07] <jackyboy> rakudo: say "1 17 314".split(/\s/).perl

[23:07] <p6eval> rakudo d49eea: OUTPUT«("1", "17", "314")␤»

[23:07] <jackyboy> ahh very cool

[23:07] <masak> yep. "dual" :)

[23:08] *** cdarroch left
[23:09] <masak> rakudo: say "OH HAI\nthis is a test".comb( / \N+ \n? / ).perl

[23:09] <p6eval> rakudo d49eea: OUTPUT«("OH HAI\n", "this is a test")␤»

[23:09] <avuserow> so it's similar to P5's my(@stuff) = $var =~ /(\d+)/g;

[23:09] <avuserow> but nicer

[23:09] <masak> now that you mention it, I guess it is, yeah.

[23:10] *** alester left
[23:10] <avuserow> rakudo: say ("1 17 314" =~ m:g/(\d+)/).perl

[23:10] <p6eval> rakudo d49eea: OUTPUT«===SORRY!===␤Unsupported use of =~ to do pattern matching; in Perl 6 please use ~~ at line 22, near " m:g/(\\d+)"␤»

[23:10] <avuserow> rakudo: say ("1 17 314" ~~ m:g/(\d+)/).perl

[23:10] <p6eval> rakudo d49eea: OUTPUT«===SORRY!===␤Adverb 'g' not allowed on m at line 22, near ").perl"␤»

[23:10] <avuserow> rakudo: say ("1 17 314" ~~ m/(\d+)/).perl

[23:10] <p6eval> rakudo d49eea: OUTPUT«Match.new(␤ from => 0,␤ orig => "1 17 314",␤ to   => 1,␤ positional => [␤   Match.new(␤    from => 0,␤    orig => "1 17 314",␤    to   => 1,␤   ),␤  ],␤)␤»

[23:10] <avuserow> it's been a while since I've written Perl 6 :(

[23:11] <masak> adverb :g not allowed on m?

[23:11] <masak> I didn't know that.

[23:11] <avuserow> me neither. useful error messages though

[23:12] <avuserow> rakudo: say ("1 17 314" ~~ m/(\d+)/)

[23:12] <p6eval> rakudo d49eea: OUTPUT«1␤»

[23:12] <avuserow> okay so, I guess the list form of that is gone?

[23:12] <avuserow> if that's the case, then .comb makes tons of sense and is a nicer way to write it anyway

[23:16] <masak> I'm not sure why m:g// wouldn't work, though.

[23:16] <masak> seems like it would be a nice service to Perl 5 people.

[23:18] <avuserow> rakudo: say "Röyksopp".normalize

[23:18] <p6eval> rakudo d49eea: OUTPUT«Method 'normalize' not found for invocant of class 'Str'␤  in main program body at line 22:/tmp/l62lkl3mUD␤»

[23:18] <masak> rakudo: say "OH HAI\n\nthis is a test".comb( / \N* \n? / ).perl

[23:18] <p6eval> rakudo d49eea: OUTPUT«("OH HAI\n", "\n", "this is a test", "")␤»

[23:19] <takadonet> masak++

[23:20] * masak is assisting takadonet a bit over privmsg :)

[23:20] <masak> oh! note that we got a false one at the end, though.

[23:20] <masak> rakudo: say "OH HAI\n\nthis is a test".comb( / \N* [$ | \n?] / ).perl

[23:20] <p6eval> rakudo d49eea: OUTPUT«("OH HAI\n", "\n", "this is a test", "")␤»

[23:21] <masak> I don't really know why we do.

[23:21] <takadonet> works for my test cases....

[23:21] <masak> could be a bug. or could just be me being tired.

[23:21] <takadonet> just one more section and I will have it working!

[23:22] <takadonet> well one sub anyway

[23:28] <masak> and then nothing stands between you and world domination?

[23:28] <masak> :)

[23:32] *** rvrgs joined
[23:37] *** patspam left
[23:37] <masak> 'night, #perl6.

[23:37] <takadonet> masak: no!

[23:38] <takadonet> night

[23:38] <masak> no? :)

[23:38] <rvrgs> print "ei";

[23:38] <masak> rvrgs: you Finnish?

[23:38] <takadonet> masak: i should have something to show tomorrow for y ou

[23:38] <takadonet> well.... 12 hourish

[23:38] <masak> takadonet: looking forward to it.

[23:38] * masak sleeps-ish

[23:38] *** masak left
[23:45] *** rvrgs left
[23:50] *** whiteknight joined
[23:51] <takadonet> whiteknight: hey

[23:51] <whiteknight> hello takadonet

[23:52] <takadonet> whiteknight: This is really a long shot but did you every play in a starwars gaming league?

[23:52] <whiteknight> no sir

[23:52] <takadonet> whiteknight: ok thanks

[23:58] *** rvrgs joined
