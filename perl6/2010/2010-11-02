[00:00] <lue> ohai o/

[00:00] <masak> lue: hi! I have good news.

[00:01] *** jfried left
[00:01] <lue> news of good? What be it!?

[00:01] *** jhuni joined
[00:02] <masak> Tardis is up and running.

[00:02] <lue> :D

[00:03] <masak> and I'm making a Yapsi release today where I mention as much.

[00:03] <masak> provided github unbreaks, that is.

[00:03] <masak> otherwise I'll probably just go to bed and do the release tomorrow.

[00:04] * lue offers git some unbreak medicine

[00:04] <lue> s/git/github/

[00:06] <masak> would that be medicine against unbreaking? because I don't need that.

[00:09] <lue> the title for github's page on Tardis is amusing: "masak's tardis at master - GitHub"  :)

[00:09] <masak> yep. that's my tardis. if you clone it, you can have one, too.

[00:10] <masak> ...and we have unbreak! \o/

[00:10] * masak proceeds with the release

[00:10] * diakopter wonders what was wrong with the Hugbit

[00:10] <lue> .oO(and github's Royal Fanfare™ erupts on Royal Unbroken Trumpets™.)

[00:11] <masak> and it's uploaded: http://github.com/masak/yapsi/downloads

[00:11] <masak> be the first in your household to get one!

[00:12] <lue> What does tardis work on currently?

[00:12] <masak> lue: everything that Yapsi works on.

[00:12] <masak> (I'm assuming you mean "on what inputs")

[00:12] * masak composes announce mail to p6c

[00:14] <lue> now's as good a time as any to get yapsi :)

[00:15] *** stkowski left
[00:15] <masak> p6c mail's away.

[00:15] * masak concocts blog post

[00:15] *** stkowski joined
[00:16] *** timbunce left
[00:17] <lue> "the code has the same volume (in cubic centimeters) as its packaging." One question: what kind of volume? Physical, virtual, etc.?

[00:17] <masak> physical.

[00:17] <masak> (and etc.)

[00:17] <masak> and virtual.

[00:18] *** kanishka left
[00:20] <diakopter> decommute&

[00:22] *** greatflamingfoo left
[00:23] <lue> how's the documentation grant going?

[00:24] <masak> the Pod one?

[00:24] *** simon_ joined
[00:26] <lue> yes.

[00:26] <masak> it's eagerly awaiting my finishing up the Web.pm grant, which should be any month now.

[00:26] *** simon_ left
[00:26] <lue> rakudo: say "ABC" ~~ /<alpha>+/

[00:26] <Tene> >.>

[00:26] <p6eval> rakudo 5f5bae: OUTPUT«ABC␤»

[00:26] <lue> rakudo: say "ABC" ~~ /<A::B>/

[00:26] <p6eval> rakudo 5f5bae: OUTPUT«===SORRY!===␤regex assertion not terminated by angle bracket at line 22, near "::B>/"␤»

[00:27] * lue lets out big noooo...

[00:28] <masak> lue: part of the problem is that the A::B syntax assumes the the rule is 'our'-scoped, something which feels odd nowadays.

[00:30] <lue> The only other WTDI I can think of is Grammar.parse()

[00:31] <masak> 'WTDI'?

[00:31] <colomon> .parse is what you have to use if /<A::B>/ isn't available, right?

[00:32] <masak> well, we definitely want to have a way to express the /<A::B>/ thing, but making rules 'our'-scoped feels a bit unjustified.

[00:33] <lue> The tale end of TIMTOWTDI

[00:33] <masak> blog post! http://strangelyconsistent.org/blog/yapsi-201011-released

[00:33] <lue> s/tale/tail/ # homophone idiot

[00:33] <masak> lue: ah, I see :)

[00:34] *** stkowski left
[00:35] *** kanishka joined
[00:38] * masak goes to bed

[00:39] <masak> 'night, #perl6!

[00:39] <colomon> \o

[00:39] *** masak left
[00:51] *** rgrau_ left
[00:55] *** ash_ joined
[01:00] *** QinGW joined
[01:00] *** ggoebel left
[01:05] *** dnl left
[01:07] *** greatflamingfoo joined
[01:09] *** greatflamingfoo left
[01:22] *** ggoebel joined
[01:33] *** dju_ left
[01:42] *** Chillance left
[02:02] *** molaf_ joined
[02:06] *** molaf left
[02:09] *** whiteknight left
[02:15] *** nymacro joined
[02:17] *** lidden left
[02:22] *** meppl left
[02:42] *** xinming left
[02:44] *** xinming joined
[02:49] *** ggoebel left
[02:52] *** nymacro left
[03:02] <diakopter>  

[03:08] *** kavakava left
[03:10] *** agentzh joined
[03:14] *** eternaleye_ left
[03:14] *** eternaleye_ joined
[03:14] *** eternaleye left
[03:14] *** eternaleye joined
[03:21] *** eternaleye_ left
[03:31] *** satyavvd joined
[03:48] *** jaldhar joined
[03:52] *** patspam left
[03:55] *** nymacro joined
[04:34] *** hudnix left
[05:22] *** justatheory joined
[05:26] *** pythonian4000 is now known as pythonian4000afk

[05:40] *** jnthn left
[05:40] *** jnthn joined
[05:41] *** _ilbot2 left
[05:43] *** _ilbot2 joined
[05:43] *** ChanServ sets mode: +v _ilbot2

[05:49] *** kaare joined
[05:49] *** nymacro left
[05:49] *** kaare is now known as Guest64750

[06:21] *** colomon left
[06:37] *** justatheory left
[06:46] *** pythonian4000afk left
[06:46] *** pythonian4000afk joined
[06:47] *** wtw joined
[07:01] *** uniejo joined
[07:07] *** meppl joined
[07:15] *** sftp left
[07:19] *** kanishka left
[07:21] *** colomon joined
[07:34] *** kanishka joined
[07:48] *** cjk101010 joined
[07:49] *** broquaint left
[07:51] *** nimiezko joined
[08:00] *** xabbu42 left
[08:05] *** Bzek_ left
[08:07] *** daxim joined
[08:09] *** Bzek joined
[08:27] *** flatwhatson_ left
[08:34] *** Guest64750 is now known as kaare_

[08:46] <jnthn> monring, #perl6

[08:46] *** pythonian4000afk is now known as pythonian4000

[08:46] *** pythonian4000 left
[08:50] *** mavrc joined
[09:04] <moritz_> morning, *

[09:05] *** ggoebel joined
[09:06] <frettled> \o/

[09:07] * moritz_ reads the yapsi release announcement. masak++

[09:08] *** REPLeffect left
[09:08] *** timbunce joined
[09:14] *** hugme joined
[09:14] *** ChanServ sets mode: +v hugme

[09:21] *** Raynes left
[09:21] *** starcoder left
[09:21] *** exodist left
[09:22] *** exodist joined
[09:24] *** REPLeffect joined
[09:24] *** starcoder joined
[09:40] *** xabbu42 joined
[09:40] *** xabbu42 left
[09:40] *** xabbu42 joined
[10:07] *** Axius joined
[10:07] *** QinGW left
[10:09] *** masonkramer left
[10:09] *** masonkramer joined
[10:12] *** broquaint joined
[10:32] *** ggoebel left
[10:34] *** frettled left
[10:34] *** masak joined
[10:34] <masak> oh hai, #perl6!

[10:34] <masak> another glorious day in November!

[10:35] <moritz_> indeed

[10:36] *** sjn left
[10:38] *** frettled joined
[10:38] *** sjn joined
[10:38] <jnthn> masak: huh, it's foggy and rainy here :P

[10:39] <masak> there's something of an inner light to it all, though :)

[10:39] *** icwiener joined
[10:39] <masak> actually, the weather up here is behaving. relatively speaking.

[10:40] <masak> sky is gray, but not wet. temperature stays just above freezing.

[10:40] <jnthn> I looked at the forecast for Malmo this week and every day said "crappy".

[10:45] <flussence> :( horizontal rain here.

[10:49] <jnthn> Wow, at least mine is verticalish. :-)

[10:50] <flussence> I'm going to be travelling without net access some time this week, what'd be the best way to get an offline p6 reference?

[10:50] <moritz_> flussence: git clone the spec, the book and my perlgeek.de repo

[10:53] *** nymacro joined
[10:54] <flussence> thanks moritz_++ :)

[10:56] *** agentzh left
[10:57] *** Axius left
[11:02] *** Axius joined
[11:07] *** baux joined
[11:09] *** xabbu42 left
[11:09] *** xabbu42 joined
[11:10] *** xabbu42 left
[11:25] <mathw> Hello wonderful people!

[11:28] *** Alias__ joined
[11:30] *** Alias_ left
[11:33] *** dnl joined
[11:50] *** satyavvd left
[11:57] <takadonet> morning all

[12:03] *** nimiezko left
[12:08] <takadonet> rakudo: multi fib($n where { $n < 3 }) { 1 } ;multi fib($n) { fib($n-1) + fib($n -2) }; say fib(2);

[12:08] <p6eval> rakudo 5f5bae: OUTPUT«1␤»

[12:08] <takadonet> rakudo: multi fib($n where { $n < 3 }) { 1 } ;multi fib($n) { fib($n-1) + fib($n -2) }; say fib(10);

[12:08] <p6eval> rakudo 5f5bae: OUTPUT«55␤»

[12:09] <bbkr> when I test MiniDBI I get error message that libpq / libmysqlclient libraries could not be located. do I need *-dev packages for this to work?

[12:10] *** masonkramer left
[12:10] <arnsholt> I don't think so. You on Linux or OS X?

[12:11] *** Axius left
[12:11] <bbkr> Debian

[12:12] <arnsholt> Hmm. Should work as long as you have the mysql/postgres packages installed

[12:12] <arnsholt> Does locate libpq return anything

[12:12] <arnsholt> Or locate libmysqlclient

[12:13] <bobkare> istr I needed libpq-dev

[12:14] <arnsholt> I wouldn't know. Worth trying though

[12:14] <bbkr> I have libpq  and libmysqlclient installed. I'll try on my home machine, where I can experiment - to install dev packages.

[12:28] <bbkr> I confirm that libpg-dev and libmysqlclient-dev packages are required for MiniDBI to work on Ubuntu/Debian

[12:29] <mberends> bbkr: correct, the dev packages are necessary because of the way Zavolaj links to libraries.

[12:30] <bbkr> thanks! time for testing :)

[12:34] *** ggoebel joined
[12:41] *** Bzek left
[12:43] *** Bzek joined
[12:45] *** bluescreen joined
[12:46] *** bluescreen is now known as Guest86803

[12:48] *** hudnix joined
[12:48] <masak> I believe the upcoming change in Yapsi will require a bit of design. isBEKaml, tadzik, and patrickas might be interested in participating. I certainly would like to have someone to juggle ideas with.

[12:49] <masak> it's about adding first-class closures, something that we need for a lot of other things.

[12:50] *** timbunce left
[12:51] <colomon> takadonet: that's a valid way of calculating fib, but it's also insanely slow.

[12:51] <masak> let me guess, it's O(fib(N))? :)

[12:52] <colomon> loliblogged: http://justrakudoit.wordpress.com/2010/11/02/moving-right-along/

[12:52] <masak> \o/ colomon++

[12:53] <colomon> masak: something like O(fib(N)), yeah.  :)

[12:53] <masak> it's easy to show: the algo bottoms out in a bunch of 1s.

[12:54] <masak> (I don't know what you're talking about, by the way, I'm just guessing)

[12:54] <masak> (but that's what usually happens)

[12:54] *** hatseflats joined
[12:56] <takadonet> colomon: I was having trouble with a bug with fib but it works now

[12:57] *** timbunce joined
[12:59] <colomon> takadonet: it's just that if you actually want to use it for anything, you want to do something like 1, 1, *+* ... * to calculate them, it's vastly more efficient.

[13:01] *** plainhao joined
[13:01] <takadonet> colomon: I just was showing a co-worker the power of the multi and condition statement in the header

[13:01] <takadonet> my presentation last friday was really well received 

[13:02] <masak> \o/

[13:03] <takadonet> Our lab policy is that you can use any language you want to do your work as long as you can justify it 

[13:05] <takadonet> so small script I can use perl6 but .... any really data parsing, not a chance

[13:05] <masak> makes sense.

[13:05] *** xabbu42 joined
[13:08] <takadonet> hopefully in time I can use perl6 on a daily basis

[13:16] *** hanekomu joined
[13:18] <masak> rakudo: use MONKEY_TYPING; augment class IO { method readline { $!PIO.readline_interactive("> ") } }; say $*IN.readline

[13:18] <p6eval> rakudo 5f5bae: OUTPUT«> Land der Berge, Land am Strome,␤»

[13:18] <masak> oh right. I forgot. Austria :)

[13:18] *** tzhs joined
[13:19] <mathw> hah

[13:19] <masak> rakudo: use MONKEY_TYPING; augment class IO { method readline { $!PIO.readline_interactive("> ") } }; my $f = $*IN.slurp; say $*IN.readline

[13:19] <p6eval> rakudo 5f5bae: OUTPUT«> Null PMC access in type()␤  in main program body at line 22:/tmp/dU72vefrsV␤»

[13:19] <mathw> aaaw

[13:19] *** envi left
[13:19] <masak> I get a Null PMC access when using $!PIO.readline_interactive and someone does ^D

[13:20] <masak> I'm hesitant to report it as a bug, because it's not very exposed and I need to use MONKEY_TYPING to expose it.

[13:20] <masak> so I'll frame it like this: is there something I can do to not get a Null PMC access here when someone does ^D?

[13:21] *** Patterner left
[13:21] <masak> rakudo: use MONKEY_TYPING; augment class IO { method readline { $!PIO.readline_interactive("> ") // Nil } }; my $f = $*IN.slurp; say $*IN.readline

[13:21] <p6eval> rakudo 5f5bae: OUTPUT«> ␤»

[13:21] <masak> that seems to do the trick. huh.

[13:22] <masak> I suppose it's not a reasonable thing to add this automatically on "foreign" method calls.

[13:22] *** MayDaniel joined
[13:22] <masak> largely due to there not being a clear delineation of what's "foreign" here.

[13:23] *** envi joined
[13:23] <masak> also, if someone were to package the above functionality in a module, I'd gladly use that module.

[13:25] <jnthn> masak: (closures) You may want to read the one or two patches I wrote that added those to 6model 

[13:25] <masak> url?

[13:27] *** sftp joined
[13:27] <jnthn> http://github.com/jnthn/6model/commit/1bb02e7757988f6b556e4c40a9f57ec7808493d8 and http://github.com/jnthn/6model/commit/13a72ce82c5f1cb787ee85146031d82c339d0b3f and http://github.com/jnthn/6model/commit/c04f22cbb6bb8c5017a8ee99baa8ddb20349633d

[13:29] <colomon> takadonet: understood.  certainly is a fine example of "where".  :)

[13:30] <masak> jnthn: thank ye. will peruse.

[13:30] <masak> s/ye/thee/

[13:30] <jnthn> Puzhalusta.

[13:30] <masak> :)

[13:30] <takadonet> colomon: Really nice since you get both end cases fib(0) and fib(1) in one shot 

[13:30] <jnthn> ...that looks so wrong not in cyrillic... :-)

[13:30] <takadonet> plus the first 'iteration'

[13:32] <masak> jnthn: aye. I don't see auto-palatalization in non-cyrillic.

[13:32] <masak> my brain automatically adds it when I read cyrillic.

[13:33] *** Psyche^ joined
[13:33] *** Psyche^ is now known as Patterner

[13:33] <jnthn> Same :-)

[13:34] <masak> jnthn: before the refactor in August, Yapsi only had outer context. right now it only has caller context... :) as soon as we introduce 1st-class closures, we'll need both.

[13:34] <masak> (because it's when you start moving closures around, and start to refer to them from faw away, that OUTER:: and CALLER:: start to differ.)

[13:36] <jnthn> I had outer and caller from day 1 in 6model otherwise I couldn't get lexicals to work. :-)

[13:36] <jnthn> Adding closures is mostly about cloning.

[13:37] <jnthn> Happily, I don't have to worry about when to clone in 6model 'cus the PAST tree that I have already contains that information though :-)

[13:37] <masak> is "DNST" your version of "PAST"? :)

[13:37] <jnthn> No

[13:37] <jnthn> I use PAST

[13:37] <jnthn> DNST is lower level.

[13:37] <jnthn> It's more like POST

[13:37] <PerlJam> DNST == Duke Nukem Syntax Tree?  ;)

[13:37] <jnthn> PerlJam: oh no...that connection never occurred to me! :P

[13:37] <masak> do you think of Kirsten Dunst ever time you write DNST? will you from now on? :P

[13:37] <jnthn> who...

[13:38] <masak> Mary Jane in Spider Man.

[13:38] <jnthn> masak: oh wow.

[13:38] <masak> http://en.wikipedia.org/wiki/Kirsten_Dunst

[13:38] <jnthn> ...thanks. :P

[13:38] <jnthn> yes yes, I just google image searched.

[13:38] <masak> Puzhalusta. :)

[13:39] <masak> jnthn: why couldn't you get lexicals to work without both outer and caller? they work fine in Yapsi...

[13:40] <jnthn> masak: In Yapsi do you ahve so far an opportunity for the caller *not* to be the outer?

[13:40] <masak> no.

[13:40] <jnthn> OK, that's why you've not run into the issue. :-)

[13:41] *** nymacro left
[13:41] <jnthn> I did have that possibility before I made closures work properly.

[13:41] <masak> where? how?

[13:41] *** kaare_ left
[13:42] <jnthn> When I compiled loadinit methods, or signature construction, for example.

[13:42] <jnthn> s/methods/blocks/

[13:42] *** MayDaniel left
[13:42] <masak> ok; we don't have either in Yapsi yet.

[13:42] <jnthn> OK. I can see how you got away with it.

[13:42] <jnthn> I had to support loadinit from very early on.

[13:45] <jnthn> You can probaly do both of those in Yapsi without needing loadinit, perhaps.

[13:45] <jnthn> (That's the goal for nqp/6model/rakudo too...)

[13:47] <jnthn> (But iiuc you're interested in exploring the compile time / runtime relationship in Yapsi.)

[13:47] <masak> TimToady: based on what you said yesterday, should the following only say "B"?

[13:47] <masak> rakudo: class A { method foo { say "A" } }; class B is A { method foo { say "B"; lastcall } }; B.new.*foo

[13:47] <p6eval> rakudo 5f5bae: OUTPUT«B␤A␤»

[13:48] <masak> jnthn: yes, though that branch of experimentation has for the moment faded into the background.

[13:48] * jnthn would be curious to know that too.

[13:49] <masak> I spent some time thinking about it yesterday.

[13:49] <jnthn> masak: My guess is perhaps no because in that case you're using a dispatcher that tries to invoke everything, rather than playing the deferal game.

[13:49] <jnthn> masak: I'm curious how nextsame and .* interact.

[13:49] <jnthn> masak: I guess I'd rather they didn't. :-)

[13:49] <jnthn> WEll

[13:49] <jnthn> Maybe :-)

[13:50] <jnthn> Or maybe they should. Hm. Can argue that both ways. :-)

[13:50] <masak> it seems to me that sometimes a 'nextsame' or similar in a method doesn't actually *know* whether it's talking to an MRO dispatcher or a dot-star dispatcher.

[13:50] <masak> and I think that's a problem in some ways.

[13:50] <jnthn> Or a multi-dispatcher. :-)

[13:50] <masak> right.

[13:50] <jnthn> Though you probably know 'cus it's marked "multi"

[13:51] <masak> aye.

[13:51] <masak> in the case of wrappers, it's also clear-cut, since we know we're writing a wrapper.

[13:51] <masak> but it seems to me there's some possibility of confusion in the case of dot-star.

[13:51] <masak> and dot-plus.

[13:52] <masak> and confusion isn't really what we need in that area :)

[13:52] <jnthn> That's why I ponder that .* should cause an invocation with its own candidate list from the POV of if we'd actually called that candidate.

[13:53] <jnthn> For all of the candidates.

[13:53] <masak> whatever model we land on, I'm happy if that model is consistent and easy to cram into a normal-sized head.

[13:53] <jnthn> So it's like you'd really done B.new.B::foo; B.new.A::foo

[13:54] <masak> in which case B\nA\n above is correct, right?

[13:54] <jnthn> If we go that way, yes.

[13:54] <masak> and 'lastcall' is ineffecutal.

[13:54] <jnthn> Right.

[13:54] <masak> and TimToady was wrong yesterday.

[13:54] <jnthn> lastcall; lastcall; otoh... :-)

[13:54] <masak> ewww!

[13:54] <jnthn> Well, I'm positing more than saying anyone is right/wrong. :-)

[13:55] <masak> I hope that doesn't become a recommended pattern.

[13:55] <masak> it's enough to talk to one dispatcher in a method. :(

[13:55] *** amkrankruleuen joined
[13:55] <amkrankruleuen> Hi

[13:55] <jnthn> it's been suggested in spec that lastcall takes an argumennt saying what kinda dispatcher you're interesting ihn terminating.

[13:55] <masak> amkrankruleuen! \o/

[13:56] *** uniejo left
[13:56] <masak> jnthn: maybe lastcall is sugar for $*MULTI_DISPATCHER.lastcall or sump'n.

[13:57] <masak> or rather $*DISPATCHER.lastcall, and $*DISPATCHER is bound to the inntermost dispatcher.

[13:57] <jnthn> It'd maybe be semantically like a contextual, yes

[13:57] <jnthn> But with a way to say "I want to look for the nearest dispatcher that is a multi dispatcher" or "I want to look for the nearest one that is a method dispatcher"

[13:58] <masak> right. so you'd need both $*DISPATCHER, and individual contextuals for the specific dispatchers.

[13:58] <jnthn> That could work.

[13:58] * masak haz a happy

[13:58] <masak> something I said wasn't completely insane! \o/

[13:58] <jnthn> I maybe don't object to really having those as contextuals either...

[13:59] *** drbean left
[13:59] *** drbean joined
[13:59] <jnthn> well

[13:59] <jnthn> a $*DISPATCHER anyway.

[13:59] <jnthn> a bunch of different ones could get icky

[14:00] <masak> it would provide a way to talk to individual dispatchers.

[14:00] <masak> a bit like labels provide a way to leave individual blocks.

[14:00] <jnthn> It means having lots of slots in every block though.

[14:01] <jnthn> And isn't very extensible for when $user decides to go dispatcher writing.

[14:01] *** Plastic_Chicken joined
[14:02] <masak> troo.

[14:04] *** clkao left
[14:07] <masak> rakudo: class A { method foo { say "A" } }; class B is A { method foo { say "B"; lastcall } }; my $b = B.new; my @candidates := .WALK(:name<foo>); $b.*@candidates

[14:07] <p6eval> rakudo 5f5bae: OUTPUT«===SORRY!===␤Can not use .* on a non-identifier method call at line 22, near ""␤»

[14:08] <masak> if this worked would 'lastcall' have any effect? would 'nextsame' in B.foo produce the output B\nA\nA\n or just B\nA\n?

[14:09] *** clkao joined
[14:10] <masak> clkao! \o/

[14:13] *** ash_ left
[14:17] *** tzhs left
[14:17] <jnthn> masak: Yeah, that's a problematic case because we have a list of methods rather than being able to produce a list of dispatchers, I guess.

[14:17] <masak> exactly.

[14:18] <masak> so there's a line to be draws between the two.

[14:18] <jnthn> While the recent spec changes massively cleared up multi-dispatch, I think we may have a little distance left to run on dispatchers generally.

[14:18] <masak> and some of what you said above about .*foo sounded like drawing the line so that .*foo ends up on the same side as .*@candidates

[14:18] *** Plastic_Chicken left
[14:19] <jnthn> Particularly this nested stuff.

[14:19] <masak> aye.

[14:19] <jnthn> And what .* and friends really mean.

[14:19] <masak> sludgy, to be sure.

[14:19] <masak> er. slushy.

[14:22] <jnthn> Same stuff. :-)

[14:24] *** amkrankruleuen left
[14:25] <masak> sometimes I feel, even apart from this whole bug-submitting gig, that my job in the Perl 6 world is going over and standing next to some feature and saying "guys, this isn't very good yet".

[14:28] *** amkrankruleuen joined
[14:28] <colomon> I'd say +1 except I totally don't want you to feel that you are limited to that.

[14:28] <colomon> but it's a hugely important job, and you've done well at it.

[14:30] *** xinming left
[14:32] <masak> thanks. :)

[14:33] <masak> I didn't expect to end up in that role, since I'm not a very plaintive person to begin with.

[14:33] *** plobsing left
[14:33] <colomon> In fact, you've done well enough at it I probably should work hard at convincing you of my own complaints -- I'm sure you'd do a better job airing them than I have.

[14:34] <masak> but I guess I could frame myself as the grain of sand that polishes the rock.

[14:34] <colomon> grain of diamond, dude.  ;)

[14:34] <masak> hardly :P

[14:35] *** xinming joined
[14:35] <mkramer> I've also learned a lot of perl 6 from following your postings masak

[14:36] <masak> the blog postings? cool.

[14:36] <masak> I've learned a lot of Perl 6 from submitting bug reports.

[14:37] <mkramer> by the way, "a lot" is relative here

[14:37] <mkramer> "a lot of what I know about perl 6" would have been more accurate

[14:38] <masak> that's still more than most Perl programmers, relatively speaking. :)

[14:39] <mkramer> tragically, yes

[14:40] <masak> don't view it as tragic; view it as an opportunity for you -- to capitalize (monetarily or otherwise) on your relatively vaster knowledge of something useful.

[14:41] *** justatheory joined
[14:51] <masak> rakudo: say "P earwle s6o mies".comb[(0, 2 ... 16), (1, 3 ... 15)].join

[14:51] <p6eval> rakudo 5f5bae: OUTPUT«Perl 6 is awesome␤»

[14:51] *** risou joined
[14:52] <mkramer> cute

[14:56] <mkramer> I'm personally very excited to use perl 6 as a production language.  In particular if we can get async right

[14:59] <masak> rakudo: sub indices(@list) { my @sorted = @list.sort; my %s; gather for @list -> $e { my $i = %s{$e} // 0; ++$i while @sorted[$i] ne $e; %s{$e} = $i + 1; take $i } }; say indices("Perl 6 is awesome".comb).fmt

[14:59] <p6eval> rakudo 5f5bae: OUTPUT«4 6 13 10 0 3 1 9 14 2 5 16 7 15 12 11 8␤»

[14:59] <masak> rakudo: say "   6Paeeeilmorssw".comb[<4 6 13 10 0 3 1 9 14 2 5 16 7 15 12 11 8>].join

[14:59] <p6eval> rakudo 5f5bae: OUTPUT«Perl 6 is awesome␤»

[15:00] *** y3llow left
[15:00] *** y3llow joined
[15:12] *** nymacro joined
[15:15] *** justatheory left
[15:19] *** MayDaniel joined
[15:20] *** wtw left
[15:36] *** MayDaniel left
[15:42] *** gbacon joined
[15:43] *** nymacro left
[15:43] *** timbunce left
[15:48] *** _kaare joined
[15:50] *** timbunce joined
[15:50] *** masak left
[15:57] *** cjk101010 left
[16:09] *** iWork joined
[16:09] *** iWork left
[16:09] *** cdarroch joined
[16:09] *** cdarroch left
[16:09] *** cdarroch joined
[16:10] *** stkowski joined
[16:10] *** risou left
[16:11] *** MayDaniel joined
[16:11] *** risou joined
[16:15] *** \xF0 left
[16:16] *** \xF0 joined
[16:17] *** wooden joined
[16:17] *** wooden left
[16:17] *** wooden joined
[16:20] *** starcoder left
[16:20] *** starcoder joined
[16:20] *** patspam joined
[16:23] *** Alias joined
[16:26] *** Alias__ left
[16:28] *** Plastic_Chicken joined
[16:36] *** lamstyle left
[16:36] *** florz left
[16:36] *** [Sec] left
[16:36] *** simcop2387 left
[16:36] *** Grimnir_ left
[16:36] *** wolverian left
[16:36] *** c1sung left
[16:36] *** sorear left
[16:36] *** wolverian joined
[16:36] *** sorear joined
[16:36] *** [Sec] joined
[16:36] *** simcop2387 joined
[16:36] *** c1sung joined
[16:39] *** lamstyle joined
[16:41] *** tadzik joined
[16:41] <tadzik> ~~

[16:42] *** florz joined
[16:43] <takadonet> tadzik: yo

[16:48] <TimToady> takadonet: also, you're assuming you want your fib sequence to start 1,1 rather than 0,1, which some folks like

[16:49] <moritz_> colomon++ # impressive progress with ABC

[16:49] <slavik1> 1 1 2 3 5 is a zip code in brooklyn :)

[16:49] <colomon> moritz_: you're too kind.

[16:49] <colomon> but I am having a lot of fun with it.

[16:49] <moritz_> colomon: no. I looked at the PDF, and was impressed.

[16:51] <colomon> moritz_: I've been dreaming about having Perl ABC tools for at least five years now.  But it wasn't easily practical without grammars. 

[16:52] <moritz_> colomon: reminds me of Math::Model, which I've also envisioned long ago

[16:52] <moritz_> but which needed signature introspection (or heavy workarounds) to work properly

[16:53] *** mavrc left
[16:54] * tadzik feels like playing "The Star of Rakudo"

[16:54] <colomon> I still need to get around to recording it.  :)

[16:55] <tadzik> I don't recognize the ~ symbol over some notes, what is it?

[16:55] <colomon> It's a turn symbol.

[16:55] <colomon> Though in this context, it's supposed to indicate an Irish-style roll.

[16:55] <tadzik> I've never seen it

[16:56] <tadzik> interesting

[16:56] <colomon> It's basically a way of breaking a note into three distinct notes, but by using your fingers rather than your breathing / tongue.

[16:56] <colomon> (On a fiddle, it may be "using one bow-stroke"?  strings are weird.)

[16:57] *** baux left
[16:57] <colomon> it's a very standard technique in Irish traditional music

[16:57] <tadzik> I have to say that this PDF really impressed with Lilypond’s output.

[16:57] <tadzik> Have you accidentally a word?

[16:57] <colomon> doh!

[16:58] <colomon> tadzik++ # fixed now, I hope

[16:58] <arnsholt> tadzik: Yeah, Lilypond is very pretty

[16:59] <tadzik> colomon++ # every time I stumble upon a sentence like this, the first thought is "damn, my english isn't that good"

[16:59] *** jql left
[17:00] <colomon> arnsholt: he was just quoting me.  but yes, after initial doubts, I'm now thinking Lilypond generates good looking sheet music.

[17:01] *** Grimnir_ joined
[17:04] *** mkramer left
[17:05] *** amkrankruleuen left
[17:06] *** mkramer joined
[17:06] *** Plastic_Chicken left
[17:06] *** timbunce left
[17:07] *** amkrankruleuen joined
[17:12] *** timbunce joined
[17:16] *** mkramer left
[17:19] *** timbunce left
[17:19] *** guidj0s joined
[17:25] *** kanishka left
[17:25] *** timbunce joined
[17:35] *** kanishka joined
[17:38] *** dnl left
[17:43] *** mberends left
[17:44] *** Raynes joined
[17:48] *** frettled left
[17:48] *** frettled joined
[17:50] *** daxim left
[17:51] *** envi left
[17:52] *** kcwu left
[17:53] *** kcwu joined
[17:54] *** mkramer joined
[17:55] *** jaldhar left
[17:57] *** jaldhar joined
[17:58] *** Guest86803 left
[18:03] *** donaldh joined
[18:11] *** molaf_ left
[18:14] *** Guest86803 joined
[18:18] *** donaldh left
[18:27] *** tadzik left
[18:28] *** tadzik joined
[18:32] *** kanishka left
[18:34] *** jaldhar left
[18:39] *** araujo left
[18:40] <colomon> #phasers in 20? 

[18:41] <jnthn> erm

[18:41] <jnthn> oh...dammit

[18:41] <jnthn> yes

[18:41] <jnthn> Timezone change.

[18:45] *** araujo joined
[18:48] *** wamba joined
[18:48] *** Helios left
[18:48] *** wamba left
[18:49] *** wamba joined
[19:01] *** araujo left
[19:04] *** araujo joined
[19:07] *** timbunce left
[19:07] *** jql joined
[19:08] *** xabbu42 left
[19:09] *** xabbu42 joined
[19:11] *** mberends joined
[19:11] *** Ross joined
[19:13] *** xabbu42 left
[19:14] *** timbunce joined
[19:14] *** molaf joined
[19:15] *** Ross^ joined
[19:15] *** Ross left
[19:19] *** tzhs joined
[19:19] *** M_o_C joined
[19:20] *** M_o_C left
[19:21] *** masak joined
[19:21] <masak> ahoy!

[19:21] <takadonet> masak: hey

[19:22] <mberends> ahoy masak, from Amsterdam.pm!

[19:22] <masak> \o/

[19:22] <masak> mberends: tell Amsterdam.pm I said hi :)

[19:23] <tadzik> hi masak!

[19:26] *** meppl left
[19:28] <pmichaud> did Amsterdam.pm drink the yapc::eu auction beer yet?

[19:29] <szabgab> hi pmichaud 

[19:30] <pmichaud> szabgab: hello -- got your messages but still trying to find good time to respond

[19:30] <pmichaud> (and I have to leave in 4 mins but will be back in 60)

[19:30] <szabgab> perl6-ers, has anyone submitted a talk proposal to the Main tracks of FOSDEM?

[19:30] <szabgab> I was told that there might still be a chance to submit a talk quickly

[19:31] <mberends> pmichaud: yes, last month, where masak++ also gave us a little talk :)

[19:31] <szabgab> so, pmichaud if there is no talk submitted yet and you submit one and get accepted

[19:31] <pmichaud> I've thought about submitting a talk, and would love to go, but I'm concerned that we might have a repeat of last year where I have to cancel at the last moment

[19:32] <szabgab> I'll make sure PEG will finance it - we already have the money

[19:32] <pmichaud> if that's the case, I'll definitely submit a talk

[19:32] <pmichaud> and I'll insure the travel costs again

[19:32] <szabgab> please do it ASAP as the dead-line is oevr 2 weeks ago

[19:32] <pmichaud> I really enjoyed my last trip to fosdem/brussels

[19:32] <pmichaud> I'll do it this evening

[19:33] <pmichaud> any particular topic you'd like to see emphasized/covered?

[19:33] <szabgab> and pls also send it to me by mail so I can forward them as well

[19:33] <szabgab> pmichaud: it is up to you

[19:33] <szabgab> you are the master

[19:33] <szabgab> you know way better how to get people enthusiastic

[19:33] <pmichaud> okay.

[19:33] <jnthn> szabgab: I may be able to attend to.

[19:34] <szabgab> jnthn: that would be awesome

[19:34] <pmichaud> jnthn: I recommend submitting a talk also, if you can

[19:34] <jnthn> If pmichaud++ is going, may do it for meeting up.

[19:34] <pmichaud> if something comes up with me and travel, you could then cover my talk

[19:34] <jnthn> pmichaud: OK. Let's try and not overlap too much then. :-)

[19:34] <szabgab> actually I already started to ask companies to sponsor a Perl 6 hackathon at FOSDEM

[19:34] <pmichaud> p6 hackathon at fosdem would be awesome

[19:34] <pmichaud> I need to check with my wife and make sure that's a good time for travel (should be)

[19:35] <pmichaud> have to run pick up kids from school.... bbiaw

[19:35] <jnthn> k

[19:35] <szabgab> k

[19:36] *** envi joined
[19:39] *** plainhao left
[19:45] *** dnl joined
[19:51] *** tzhs left
[19:52] <tadzik> szabgab: are you planning more Perl 6 screencasts?

[19:58] <masak> is the default .new method a multi?

[19:59] <jnthn> Not today.

[19:59] <jnthn> Not sure if we want it to be?

[20:00] *** hanekomu left
[20:00] <masak> well, sometimes I have the urge to declare a 'multi method new' in my own classes -- getting both the regular one and my variant.

[20:01] <masak> I was hoping the new multi-dispatch changes might allow for that.

[20:03] <szabgab> tadzik: planning yes, time - I don't have

[20:04] <szabgab> for some reason lots of paid work started to flow in my direction which is of course good, but does not leave a lot of time for other things

[20:05] <szabgab> and I want to focus on getting PEG up and running

[20:05] <sorear> yay! I'm backlogged!  good * #perl6

[20:05] *** guidj0s left
[20:05] <masak> szabgab: that's good news. sounds like you're being busy in a good way. Perl 6 will still be here when things settle down :)

[20:06] <szabgab> yeah, it is not running away 

[20:06] <szabgab> so to speak :)

[20:06] <masak> ouch :)

[20:07] *** wallberg joined
[20:07] <tadzik> sorear: o/

[20:07] <szabgab> which reminds me I should update rakudo on my netbook before I leave to Amsterdam in 1.5 days

[20:07] <masak> wallberg! \o/

[20:17] *** timbunce left
[20:18] <wallberg> masak: hi!

[20:26] <masak> wallberg: how's $work? and $life in general?

[20:26] <sorear> Who'se wallberg?

[20:27] <masak> he's a Perl person here in Uppsala, where I live. we talk about booting up an Uppsala.pm mongers group, but we never seem to get around to it.

[20:27] <wallberg> haha, yes exactly.

[20:28] <jnthn> .oO( Uppsala means treehouse, the upp meaning "up" and sal(a) meaning "room" )

[20:30] <masak> jnthn: now you're just making stuff up. :)

[20:30] <tadzik> and Warsaw.pm seems to be dying a bit :/

[20:30] <jnthn> Dang, caught.

[20:30] <wallberg> well, life and work keep me busy atm. I commute to Stockholm on a daily basis, have two crazy kids at home and a spouse who is on her final year of graduate studies. I struggle to find time for the monthly or so LUG as well :-)

[20:30] <jnthn> tadzik: Oh no! It can't die until I first visit to drink wodka with you all! :/

[20:31] <jnthn> ...though preferably it'll keep going after that too... :-)

[20:31] <tadzik> jnthn: we usually go for beer. And the problem is, when the main Monger moved to London, there's no one to organize meetings

[20:31] <wallberg> masak: are you in Uppsala on thursday?

[20:31] <masak> wallberg: no, I have an appointment with Austria.

[20:31] <jnthn> tadzik: Beer is good too :-)

[20:32] <tadzik> jnthn: we could make one new workshop if you come :) The last one was nice

[20:32] <wallberg> masak:?

[20:32] <masak> wallberg: apparently, they need me again.

[20:32] * masak rolls eyes

[20:32] <wallberg> masak: haha

[20:32] <masak> rakudo: .say for $*IN.lines

[20:32] <p6eval> rakudo 5f5bae: OUTPUT«Land der Berge, Land am Strome,␤Land der Äcker, Land der Dome,␤Land der Hämmer, zukunftsreich!␤Heimat bist du großer Söhne,␤Volk, begnadet für das Schöne,␤vielgerühmtes Österreich,␤vielgerühmtes Österreich!␤␤Heiß umfehdet, wild umstritten␤liegst dem Erdteil du inmitten,␤einem

[20:32] <p6eval> ..stark…

[20:32] <jnthn> tadzik: Sounds fun :-)

[20:32] <wallberg> masak: so you are leaving for a while=

[20:32] <wallberg> masak: ?

[20:32] <masak> wallberg: Wed/Thu

[20:33] <wallberg> masak: do you like sushi?

[20:33] <masak> wallberg: yes. very much.

[20:34] <wallberg> masak: how we discuss Uppsala.pm over some sushi on thursday the 11th of Nov?

[20:34] <wallberg> masak: how about...

[20:34] <masak> sounds nice.

[20:35] <masak> I'd like that.

[20:35] <wallberg> masak: goodie, http://www.yukikossushi.se/ it is then :-)

[20:36] <tadzik> oh, the land of Korpiklaani

[20:36] <masak> \o/ my favourite sushi place :)

[20:37] <wallberg> masak: excellent. 12:00 is ok?

[20:37] <masak> yes.

[20:37] * masak writes that down

[20:37] <wallberg> masak: its a date :-)

[20:37] <masak> \o/

[20:38] <masak> if you write it 2010-11-11T12:00+01:00, it's even an ISO 8601 date :P

[20:39] <jnthn> I so couldn't be bothered to write all that out though...

[20:43] *** ggoebel left
[20:44] <masak> there are various abbreviations.

[20:44] <masak> all of them very sensible, actually.

[20:44] <masak> the above is just the full form.

[20:46] *** meppl joined
[20:50] *** MayDaniel left
[20:58] <masak> seems I didn't pay attention when moritz_++ submitted http://rt.perl.org/rt3/Ticket/Display.html?id=78510

[20:58] <masak> anything that affects JSON affects pls, too. that's what I get for not wanting any dependencies.

[20:59] <masak> oh well; it gives me something to November-blog about today. :)

[21:03] <masak> heh -- I managed to apply moritz_++' json commit to the pls branch of the proto repository :) git rocks.

[21:03] *** patrickas joined
[21:03] *** risou left
[21:04] <patrickas> o/

[21:04] <tadzik> \o

[21:05] <wallberg> masak: lol Google Calendar claims that our lunch on the 11th is in 37 hours from now

[21:05] <masak> wallberg: I should never have brought Tardis back online... :/

[21:05] <patrickas> masak: I time traveled for the first time through a perl6 program today \o/

[21:05] <masak> patrickas: you did? great!

[21:05] <masak> patrickas: any first impressions?

[21:06] <masak> wallberg: this is what it's like on this channel, every day. it's awesome :)

[21:06] <patrickas> masak: I gotta do this more often!

[21:06] <masak> :)

[21:06] <patrickas> that was my first impression :-)

[21:07] <wallberg> :-)

[21:07] <masak> patrickas: cool. maybe you'll help me to conspire over how to give Yapsi first-class closures?

[21:07] <masak> I bet Yapsi and Tardis will have to evolve in lock-step on that feature. it's a fundamental one.

[21:08] <patrickas> masak: I'd love to but that seem way out of my league! 

[21:08] *** aesop_ left
[21:08] <patrickas> masak: which is exactly why I want to take a stab at it :-)

[21:08] <masak> patrickas: secret fact: writing a compiler looks scary, but it's actually quite nice.

[21:09] <sorear> Why are people so afraid of writing compilers?

[21:09] <sorear> It's fun!

[21:09] <masak> I agree.

[21:09] <masak> one does need to think clearly about things, yes. but it's not particularly difficult or mentally taxing.

[21:09] <masak> well, sometimes it is. right before a refactor, for example :)

[21:09] *** alester joined
[21:09] <tadzik> I have a Perl 6 toylisp compiler lying around, shame I have no idea about how a compiler should be written :)

[21:10] <masak> tadzik: wanna help?

[21:10] <masak> :)

[21:10] <tadzik> masak: with what?

[21:10] <masak> Yapsi.

[21:10] <tadzik> well, I may if I'll be able to

[21:10] <patrickas> masak, sorear: I have no doubt... I was hoping to get at least a whole day to familiarize myself with yapsi... 

[21:10] <tadzik> I remember reading the code some time ago

[21:10] <tadzik> masak: wanna see my attempt?

[21:11] <masak> sure!

[21:11] *** aesop joined
[21:11] <masak> always nice to read Perl 6 code.

[21:11] <tadzik> http://wklej.org/id/411688/

[21:11] * masak reads

[21:11] <masak> ok, since there's three of us here (patrickas, tadzik, masak), let me take some time away from my November blogging to explain what I want to work in Yapsi.

[21:11] * masak prepares gist

[21:12] *** aempirei joined
[21:12] *** aempirei left
[21:12] *** jhuni left
[21:12] <masak> tadzik: cute. that looks like a compiler to me.

[21:13] <masak> it's not an interpreter, since it produces some code rather than execute the AST.

[21:13] <tadzik> ywis

[21:13] <tadzik> it produces a working PIR

[21:13] <sorear> Attempting to classify tools into compilers and interpreters is folly

[21:14] <masak> tadzik: I just reached that conclusion too :)

[21:14] <masak> cool. very cool.

[21:14] <tadzik> well, I don't think the algorithm to run... hmm, example needed

[21:14] <masak> tadzik: maybe you'd like to create a PIR backend for Yapsi. that'd be nice to have.

[21:14] <sorear> There is, to my knowledge, only one interpreted mainstream programming language from the last 45 years

[21:14] <masak> BASIC?

[21:15] <sorear> Tcl

[21:15] <masak> ah.

[21:15] <sorear> every BASIC I've seen had a compile-time tokenizer

[21:15] <tadzik> like if we have this (say (sum 5 2)). So (sum 5 2) has to be executed first, so code for it is have to be produced and printed first. And the result has to be available for say, which is later

[21:15] <sorear> there's a tradeoff between doing stuff now and doing stuff later

[21:15] <sorear> but it's a continuous one

[21:16] <tadzik> and I didn't really new how to achieve this

[21:16] <sorear> trying to find the dividing line between compilers and interpreters is like trying to find the point on the Antartctic coast where the Atlantic and Pacific meet

[21:17] *** justatheory joined
[21:17] <masak> tadzik: doesn't recursive-descent parsing (which Perl 6 gives you) do that for you?

[21:18] <masak> tadzik: anyway, there's ample code for doing that (and other necessary tricks) in the Yapsi codebase.

[21:18] <tadzik> masak: well, the thing is, I have to know the available regi... or maybe not

[21:18] *** kensanata joined
[21:18] *** Guest86803 left
[21:18] <sorear> "Let's Build a Compiler" by Jack Crenshaw, ca. 1985, is required reading

[21:18] <masak> what you need to do is annotate the AST nodes on the way up, yes. but that's just a SMOP.

[21:19] <tadzik> so you say this should be able to be implemented in just grammars and actions?

[21:19] <sorear> copies are readily available on the internet

[21:19] <masak> sorear: FWIW, I'm reading it now after you mentioned it the other day.

[21:19] <Tene> masak: let me know what you think of it.

[21:19] <tadzik> I don't really understand this last sentence of yours, masak

[21:19] <masak> tadzik: I'm saying that's all you need, yes.

[21:19] <masak> Tene: ok.

[21:20] <tadzik> masak | what you need to do is annotate the AST nodes on the way up, yes. -- I don't get it

[21:20] <masak> tadzik: (say (sum 5 2)). a recursive-descent parser starts with the small pieces, so it does (sum 5 2) before it does (say ...)

[21:21] <tadzik> yes

[21:21] <masak> tadzik: that's your execution order right there.

[21:21] <tadzik> hmm, right

[21:21] <masak> tadzik: now you just need a way for the little expression to communicate (a register) to the bigger expression.

[21:21] <masak> that's what `make` is for.

[21:22] <tadzik> so make is gonna return a register with the result?

[21:22] <masak> if it does, that information will be available from the action method which handles (say ...)

[21:22] <masak> and that seems to be what you need.

[21:23] <tadzik> make sense. Bah, why do good ideas always come in late hours

[21:23] <masak> :)

[21:23] <masak> I can tell you again tomorrow morning if you prefer.

[21:23] <tadzik> so in my case, stuff like builtin_say, builtin_sum will be just those action methods?

[21:24] <tadzik> and my compile sub is actually a recursive-descent implementation of some sort?

[21:24] * masak looks again

[21:25] <masak> well, the recursive-descent parsing is done by the Toylisp grammar.

[21:25] *** wamba left
[21:26] <arnsholt> tadzik: Subrule calls like <leest> do recursive descent parsing

[21:26] <masak> but yes, if I'm correct, then you could expand your action methods so thet &compile, &builtin_say and &builtin_sum are all baked into the Toyactions class.

[21:26] <tadzik> mhm. Experimenting time

[21:27] <arnsholt> masak: You're entirely right, AFAIK

[21:28] * sorear out

[21:28] *** kanishka joined
[21:28] <masak> it's quite odd how top-down recursive descent translates into bottom-up action methods.

[21:28] *** snake_ joined
[21:29] <moritz_> well, *all* action methods are bottom-up really

[21:29] *** mberends left
[21:30] <arnsholt> Yeah, you could do the same with a YACC parser

[21:30] <masak> not necessarily. if you can promise that you won't backtrack out of anything (or if it doesn't matter), then you could theoretically trigger action methods at rule entry. then it would be top-down.

[21:31] *** MayDaniel joined
[21:31] <arnsholt> The difference is which derivation the parse gets

[21:31] <arnsholt> Well, true. But those actions wouldn't have access to the results from actions in subrules (for obvious reasons)

[21:32] <moritz_> which is why Perl 6 has the action methods at the end

[21:33] <masak> well, but, does that mean that a bottom-up parse would have top-down action methods?

[21:33] <moritz_> no

[21:34] <moritz_> all action methods are bottom up

[21:34] <moritz_> in a top-down approach, the buttom rules still finish before top rule

[21:35] <masak> ah.

[21:37] <tadzik> heh, I can compile hello world :)

[21:37] *** donaldh joined
[21:38] <colomon> sorear: I'm under the impression that classic Microsoft Basic (as found, say, on a Commodore 64) is strictly interpreted.

[21:38] <colomon> but I've not seen their source, and admit I could be wrong.

[21:39] *** stepnem left
[21:44] *** stepnem joined
[21:45] <colomon> I guess they might have parsed the code as it was entered, but the internal representation was the source code, for all intents and purposes.

[21:46] *** icwiener left
[21:47] <moritz_> at least the early Basic interpreters didn't support any means to store a byte code

[21:47] <moritz_> that only came in QuickBasic

[21:48] *** Ross^ left
[21:48] * moritz_ -> sleep

[21:49] *** Ross joined
[21:49] *** Ross left
[21:49] *** Ross joined
[21:49] *** meppl left
[21:50] <masak> sleep well, moritz_. dream of signed CLAs.

[21:50] *** Alias left
[21:52] <sjohnson> masak!

[21:52] <masak> sjohnson! \o/

[21:52] <sjohnson> oh knowledable perl6 blogger

[21:53] <masak> you're too kind.

[21:54] <slavik1> yeah, masak doesn't know anything

[21:54] <slavik1> :P

[21:54] <masak> that's more like it.

[21:55] <slavik1> masak: how do I do that weird complicated thing I dreamed about 10 years ago, in Perl6?

[21:55] <patrickas> slavik1: there is an operator for that!

[21:56] <patrickas> actually there is an op for that!

[21:56] <sjohnson> i think i had the same dream

[21:56] <masak> slavik1: your question becomes less and less decent every time I re-read it... :)

[21:57] <masak> and sjohnson just made it worse! :P

[21:57] <frettled> It's almost straight out of a Biosphere song…

[21:57] <slavik1> haha!!!!!!!!!!!!!!!

[21:57] <slavik1> wasn't the intent, but still good

[21:57] <frettled> (http://www.youtube.com/watch?v=8IHZKm-gZAA)

[21:58] <sjohnson> this is going to sound pretty lame, but i actually have more dreams about p6 than i do about girls

[21:58] <masak> anyway, I don't think you can do that in Perl 6 without first doing 'use MONKEY_GROPING;'

[21:58] <frettled> (I think, maybe I misremembered the song)

[21:58] <dukeleto> sjohnson: there are commit bits for that ;)

[21:58] <rjbs> masak++ # less and less decent

[21:58] <masak> sjohnson: girls come and go, Perl 6 is forever.

[21:58] <jnthn> Oh my, I come back from a walk and the first thing I see is "monkey groping"...

[21:59] <masak> 哈哈

[21:59] <frettled> :D

[21:59] <jnthn> Do I want to know how we got to this... :-)

[21:59] <dukeleto> masak: i heard that GORILLA_GROPING was going to be in the next Rakudo dev release, is that still planned?

[21:59] <masak> jnthn: no, you don't. do yourself a favour and don't backlog :)

[21:59] <rjbs> Only in Ubuntu "Groping Gorilla"

[21:59] <frettled> hehehe

[21:59] <masak> 哈哈

[22:00] <frettled> masak: you may be too late, he's not responding

[22:00] <jnthn> Is that the release that comes after "Touching Tapir"?

[22:00] <sjohnson> :)

[22:00] <masak> the more I listen to you, the less I want to know about your dreams.

[22:00] <jnthn> .oO( Maybe *this* is what Ubuntu needs to "go mainstream" ;-) )

[22:01] <jnthn> I've only had two dreams recently. They both sucked.

[22:01] *** justatheory left
[22:01] <jnthn> In one I couldn't find the laundry room in my appartment block.

[22:02] <masak> you told me about that one.

[22:02] <jnthn> I think it's still preferable to groping monkeys though.

[22:02] <masak> that was the same morning I had dreamed about some pleasant monkey groping.

[22:03] <jnthn> I...didn't remember it being with a monkey?

[22:03] <masak> no, it was with a cute girl.

[22:03] <jnthn> .oO( Are we at #perl level yet? :P )

[22:03] <masak> and it was actually very innocent. but still nice.

[22:05] <jnthn> Very cinematic, but saldy not 18-rated.

[22:05] *** l00rl4nd joined
[22:06] <masak> right. it was more like a romantic novel.

[22:06] <jnthn> <disturbed>can we go back to talking about Perl 6 now?</disturbed>

[22:07] <flussence> rakudo: say <yes no>.pick(1)

[22:07] *** MayDaniel left
[22:07] <p6eval> rakudo 5f5bae: OUTPUT«no␤»

[22:07] <jnthn> :P

[22:07] <frettled> ROFL

[22:07] <jnthn> Fine, monkey choking it is then.

[22:07] <jnthn> er

[22:07] <flussence> I'm gonna see if I can do anything about that binary parsing idea I had a few days ago...

[22:07] <jnthn> GROPING

[22:07] <jnthn> argh!

[22:08] *** justatheory joined
[22:08] <flussence> is there any way to introspect an object and get a list of its properties, in the order they're defined in the source?

[22:08] <jnthn> flussence: .^attributes should give you them in the right order.

[22:08] <jnthn> flussence: We depend on that because we use it for the order to initialize them too.

[22:09] <jnthn> e.g. so has $.a; has $.b; has $.c = $.a + $.b;

[22:09] *** l00rl4nd left
[22:09] <masak> flussence: you just started a meme. now we can do 'rakudo: say <yes no>.pick(1)' on every rethorical question. :)

[22:09] <jnthn> flussence++ # The topic. He's on it.

[22:10] *** Bzek_ joined
[22:10] <flussence> (I seem to have terrible luck, last time I tried a random output line like that it made rakudo declare it didn't exist...)

[22:11] <tadzik> how about just .roll?

[22:11] <tadzik> that's how we roll

[22:11] <jnthn> rakudo: my @rick = <you never gonna give up>; say @rick.roll

[22:11] <p6eval> rakudo 5f5bae: OUTPUT«never␤»

[22:12] <flussence> rakudo: <pick roll>.pick(*).roll(1).say

[22:12] <p6eval> rakudo 5f5bae: OUTPUT«roll␤»

[22:12] <jnthn> rakudo: my @rick = <you never gonna give up>; say @rick.roll(*)

[22:12] <flussence> ok, roll it is.

[22:12] <p6eval> rakudo 5f5bae:

[22:12] <p6eval> ..OUTPUT«(timeout)ayounevernevernevergonnaupgonnagonnagonnayougonnanevergivegonnaneveryougivegiveyougivenevergonnagonnanevernevergonnaupupupupgiveyouneveryouupyouyouyougonnagonnaupupgiveupgiveyougiveneveryouyounevergonnayougivenevergonnaupyouneveryougivegonnagonnagivegonnayouupgivegiveupnev…

[22:12] *** Bzek left
[22:13] *** jaldhar joined
[22:15] <masak> patrickas, tadzik: here's what I'm currently thinking for Yapsi: http://gist.github.com/660396

[22:16] <masak> oh, and blog post! http://strangelyconsistent.org/blog/november-2-2010-some-quick-decisive-looting-action

[22:17] <masak> looking good, two days down, 28 to go. :)

[22:17] <jnthn> Quick, somebody extend November!

[22:17] <jnthn> ;-)

[22:18] <patrickas> well if julius and augustus ceasar can do it, we can't we?

[22:20] *** Ross left
[22:37] <patrickas> 'night all o/

[22:37] *** patrickas left
[22:39] * dukeleto gives jnthn a standing ovation for rick-rolling #perl6

[22:39] * masak gives jnthn a golf clap

[22:41] <frettled> better than claps, I suppose

[22:43] <jnthn> That'd be an unfortunate consequence of a hole in one.

[22:44] <sjohnson> the clap

[22:45] *** amkrankruleuen left
[22:45] <jnthn> Aye, getting the clap multiple times would be...well, wrothy of a golf clap I guess.

[22:45] <sbp> phenny: "哈哈"?

[22:45] <phenny> sbp: "Haha" (zh-CN to en, translate.google.com)

[22:46] <jnthn> phenny: "啤酒"?

[22:46] <phenny> jnthn: "Beer" (zh-CN to en, translate.google.com)

[22:46] *** snake_ left
[22:47] <jnthn> phenny: "трубкозуб"

[22:47] <jnthn> Aw. :(

[22:48] <sbp> you need to append a "?"

[22:48] <jnthn> phenny: "трубкозуб"?

[22:48] <phenny> jnthn: "aardvark" (ru to en, translate.google.com)

[22:48] <jnthn> \o/

[22:48] <jnthn> sbp++

[22:49] <diakopter> .g трубкозуб

[22:49] <phenny> diakopter: http://ru.wikipedia.org/wiki/%D0%A2%D1%80%D1%83%D0%B1%D0%BA%D0%BE%D0%B7%D1%83%D0%B1

[22:49] <sbp> good engraving thereon

[22:50] <masak> phenny: "Jag kan äta glas och det gör inte ont."?

[22:50] <phenny> masak: "I can eat glass and it does not hurt." (sv to en, translate.google.com)

[22:50] <masak> seems to work fine.

[22:51] <bobkare> heh, rather ugly fail from google though

[22:52] <jnthn> ?

[22:52] <jnthn> Looked correct to me.

[22:52] <masak> phenny: "Efter dagens diskussion, hur ska jag rensa de tafsande aporna ur min hjärna?"?

[22:52] <phenny> masak: "After today's discussion, how should I clean the groping monkeys out of my brain?" (sv to en, translate.google.com)

[22:52] <masak> jnthn: maybe a phrase to learn by heart.

[22:52] <jnthn> Can't wait to use that expression at work... :P

[22:52] <masak> hah

[22:53] <jnthn> "aporna" - porn?!

[22:53] <masak> "the monkeys"

[22:53] <jnthn> I know but...

[22:53] <jnthn> Etymology... :-)

[22:53] <bobkare> jnthn: last time I ate glas in sweden it tasted lots better than glass (icecream)

[22:53] <sbp> cognate to ape by any chance?

[22:53] <masak> yes.

[22:53] <jnthn> oh!

[22:54] <jnthn> I wish I could see these things.

[22:54] <masak> German has "Affe", I think.

[22:54] <tadzik> masak: reading

[22:54] <sbp> no you're lucky, otherwise you start thinking that an apiary is a hive for apes

[22:56] *** wallberg left
[22:58] <jnthn> phenny: "Hur läge ska du kyla en person som har blivit brännskadad!"?

[22:58] <phenny> jnthn: "How mode, cooling a person who has been burned!" (sv to en, translate.google.com)

[22:59] <masak> jnthn: "läNge"

[22:59] * tadzik has got his Uni C++ project by email. First though: oh, easy, one class 3 roles. Oh wait...

[23:00] <jnthn> masak: Oh.

[23:00] <jnthn> masak: That makes much more sense. :-)

[23:00] <jnthn> (Test data in a $dayjob project...apparently contains spelling mistakes....)

[23:00] <masak> :)

[23:01] <jnthn> It actually does have a picture of a person on fire too :-)

[23:01] <jnthn> As well as the epicest bbq on fire I've ever seen.

[23:01] <jnthn> Please tell me this test question isn't as stupid as I think it is...

[23:02] <jnthn> phenny: "Klicka på brandsläckaren i bilden!"?

[23:02] <phenny> jnthn: "Click on the extinguisher in the picture!" (sv to en, translate.google.com)

[23:02] <jnthn> ...how could anyone get *that* wrong?!

[23:02] <masak> you'd be surprised.

[23:02] <masak> some people click on the bathtub in the next room. or the cat under the table.

[23:03] <jnthn> True. Given the state of this codebase, people's "achievements" should probably surprise me less...

[23:11] *** mberends joined
[23:11] <masak> mberends! \o/

[23:12] *** donaldh left
[23:16] *** ggoebel joined
[23:18] <mberends> ahoy masak!  the Amsterdam.pm group now knows all about 6model, I gave an unplanned half hour talk :)

[23:20] *** stkowski left
[23:20] <jnthn> mberends: ooh, nice

[23:20] <jnthn> mberends: How was it received?

[23:22] <mberends> quite nicely, although some took the long term view: Haskell, Parrot, CLR, JVM, what next?

[23:22] <masak> not sure I understand what "what next?" refers to here.

[23:22] <masak> are they asking why we target many things?

[23:23] *** cdarroch left
[23:23] <masak> or are they sincerely wondering if we have more things we want to target?

[23:24] <mberends> the implication seemed to be that P6 is still in such a state of flux, that it has not settled down on a specific platform.

[23:25] <masak> that is, to some extent, true.

[23:25] <jnthn> I'm not sure I understand the notion of "settle down on a specific platform"

[23:25] <masak> it's also, I think, a very p5-centric view :)

[23:25] <jnthn> If there's multiple implementations, it's unlikely they'll all target one platform.

[23:25] <masak> right.

[23:25] <jnthn> Heck, 6model is already trying to work on 3. :-)

[23:25] <jnthn> Which, I grant, is quite enough to be taking on at the moment.

[23:26] *** rgrau_ joined
[23:26] <mberends> markov was worried that by giving most attention to the high level language issues, some low level primitives such as inter thread communication were being overlooked.

[23:27] <masak> that's a reasonable worry.

[23:27] <jnthn> Concurrency is probably the next big thing I want to work on after the meta-model work.

[23:27] <jnthn> And async.

[23:27] <masak> in many ways, the top-down approaches have been more successful than the bottom-up approaches in the Perl 6 world. and it shows.

[23:27] <jnthn> And parallelism.

[23:28] <mberends> and that such things need to be addressed early on, because it's much more difficult to add nicely afterwards.

[23:28] <masak> unless you count Rakudo as a bottom-up effort.

[23:28] <masak> mberends: indeed.

[23:28] *** wamba joined
[23:28] <jnthn> But without some earlyish implementation to play with, we'll end up with abstraction astronautism rather than soemthing that works.

[23:29] <masak> I bet that's happened several times with Parrot already, to various degrees.

[23:29] <masak> at least Rakudo seems to be informing Parrot design and refactors nowadays.

[23:29] <jnthn> masak: It's unlikely Parrot will be my first resort for prototyping anything from hereonin.

[23:31] <jnthn> I expect the concurrency stuff to be explored on another backend first and then, as you suggest, inform Parrot design.

[23:31] *** _kaare left
[23:33] <masak> I'm not so sure that's a bad thing. it sounds sane to me.

[23:33] <jnthn> I don't consider it a bad thing.

[23:33] <masak> in fact, most of my refactors nowadays start with a small "build from scratch" side project, which I then try to merge in.

[23:33] <masak> keeps things simpler.

[23:34] <jnthn> Yes, the isolation helps.

[23:34] <tadzik> rakudo: Date.new('2010/09/08') # LTA error message

[23:34] <p6eval> rakudo 5f5bae: OUTPUT«Method 'year' not found for invocant of class 'Str'␤  in 'Date::new' at line 6914:CORE.setting␤  in main program body at line 22:/tmp/wJ1V8_ZKfA␤»

[23:34] * masak submits rakudobug

[23:35] * masak resists fixing it right away

[23:35] *** whiteknight joined
[23:35] <frettled> resistance is futile

[23:36] *** __david__ left
[23:36] * tadzik is tempted to fix it just to see how it should be fixed and why

[23:36] <masak> there are a couple of .new multi methods in the Date class. offhand, I don't see any of them matching the above invocation.

[23:37] <tadzik> I wonder if it's the one in #452

[23:38] <tadzik> as it's the only one which takes a string

[23:38] <masak> right, but that regex should fail.

[23:38] <tadzik> ywis

[23:38] <masak> tadzik: anyway, I'd start there too. make it emit debug output in the where clause or something.

[23:39] <tadzik> a constructor using strptime could be nice, no?

[23:39] <masak> don't overcomplicate core, please :)

[23:39] <masak> many things "could be nice"...

[23:39] <tadzik> alright, alright :)

[23:39] <tadzik> that's Datetime::Parse job

[23:40] <masak> nod

[23:40] <masak> and now, I really should sleep a little. early plane to catch.

[23:41] <tadzik> hmm

[23:41] <masak> 'night, #perl6. you've been wonderful.

[23:41] <tadzik> 'night masak

[23:41] *** masak left
[23:42] <tadzik> rakudo: multi foo(Str $date where { $date ~~ /^ <[0..9]>**4 '-' <[0..9]>**2 '-' <[0..9]>**2 $/) { say 'complex foo' }; multi foo(Str $asd) { say 'simple foo' }; foo('2010-08-08'); foo('2010/08/08');

[23:42] <p6eval> rakudo 5f5bae: OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 22␤»

[23:42] <tadzik> rakudo: multi foo(Str $date where { $date ~~ /^ <[0..9]>**4 '-' <[0..9]>**2 '-' <[0..9]>**2 $/}) { say 'complex foo' }; multi foo(Str $asd) { say 'simple foo' }; foo('2010-08-08'); foo('2010/08/08');

[23:42] <p6eval> rakudo 5f5bae: OUTPUT«complex foo␤simple foo␤»

[23:45] *** justatheory left
