[00:05] *** zostay left
[00:06] *** zostay joined
[00:07] *** simon joined
[00:13] *** xinming left
[00:14] *** Eevee left
[00:44] *** hudnix joined
[00:48] *** F00LI5H is now known as f00li5h

[00:56] *** Eevee joined
[01:02] *** hercynium joined
[01:11] *** Schwern joined
[01:11] <colomon> rakudo: my %a; (1..15).map({%a{$_*2} = 1});  (1..10).map({%a{$_*3} = 1});  (1..6).map({%a{$_*6} = 1}); say %a.keys>>.Int.sort.perl 

[01:11] <p6eval> rakudo : OUTPUT«()␤»

[01:12] <colomon> rakudo: my %a; (1..15).map({%a{$_*2} = 1});  (1..10).map({%a{$_*3} = 1});  (1..6).map({%a{$_*6} = 1}); say %a.keys

[01:12] <p6eval> rakudo : OUTPUT«␤»

[01:12] <colomon> rakudo: my %a; (1..15).map({%a{$_*2} = 1}).eager;  (1..10).map({%a{$_*3} = 1}).eager;  (1..6).map({%a{$_*6} = 1}).eager; say %a.keys>>.Int.sort.perl 

[01:12] <p6eval> rakudo : OUTPUT«(2, 3, 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 26, 27, 28, 30, 36)␤»

[01:13] <colomon> rakudo: my %a; (1..15).map({%a{$_*2} = 1}).eager;  (1..10).map({%a{$_*3} = 1}).eager;  (1..6).map({%a{$_*5} = 1}).eager; say %a.keys>>.Int.sort.perl; say %a.keys.elems

[01:13] <p6eval> rakudo : OUTPUT«(2, 3, 4, 5, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30)␤22␤»

[01:17] <colomon> rakudo: say 2*3*5*7

[01:17] <p6eval> rakudo : OUTPUT«210␤»

[01:22] *** ggoebel left
[01:31] *** Schwern left
[01:31] *** meppl joined
[01:31] *** starcoder joined
[01:54] <sorear> drat, I didn't come back soon enough to continue with jnthn.

[01:54] <sorear> tomorrow!

[02:06] *** alester joined
[02:17] *** estrabd left
[02:54] *** nymacro joined
[03:17] *** risou joined
[03:18] *** perlpilot joined
[03:18] *** Limbic_Region joined
[03:19] <Limbic_Region> I am sure you have probably seen it - http://varlogrant.blogspot.com/2010/10/few-words-from-larry-wall.html

[03:21] <sorear> ENEEDSBETTERTITLE

[03:23] <Limbic_Region> Larry Wall On Programming

[03:24] <sorear> That's not a title, that's an entire genre

[03:25] <Limbic_Region> *shrug*

[03:25] <Limbic_Region> The questions were all over the map

[03:25] <perlpilot> "The Softer Side of Computer Science"  ;-)

[03:25] *** meppl left
[03:26] *** meppl joined
[03:35] *** mdxi left
[03:37] *** whiteknight left
[03:59] *** cdarroch left
[04:14] *** tylercurtis joined
[04:18] <sorear> hello tylercurtis 

[04:18] <tylercurtis> Hi, sorear.

[04:18] *** risou left
[04:23] *** snarkyboojum joined
[04:23] <sorear> tylercurtis: I want to use the LLVM unwind mechanism to implement CALLER::<$foo>

[04:24] <sorear> Or more precisely, I want to get rid of the CALLER:: shadow stack, because maintaining it is the most expensive part of sub calls

[04:25] <snarkyboojum> \o/ perl6 hacker types

[04:25] <sorear> ...

[04:25] <sorear> today's really embarrasing bug:

[04:26] <sorear> niecza: my @foo = [1, 2, 3]; say +@foo

[04:26] <p6eval> niecza 4f60774: OUTPUT«[31m===[0mSORRY![31m===[0m␤Action method circumfix__S_Bra_Ket not yet implemented at /home/p6eval/niecza/src/Niecza/Actions.pm line 54.␤Attribute (positionals) does not pass the type constraint because: Validation failed for 'ArrayRef[Op]' with value ARRAY(0x7b57878) at

[04:26] <p6eval> ../home/p…

[04:26] <sorear> huh, I implemented that nearly a week ago

[04:26] <sorear> will need to talk to moritz++

[04:27] <sorear> anyways, I made [] and {} flatten in list context

[04:27] <sorear> -oops-

[04:29] *** twik joined
[04:33] *** mdxi joined
[04:35] <tylercurtis> sorear: how would you do that?

[04:35] <sorear> tylercurtis: I'm asking you

[04:39] *** twik left
[04:45] <tylercurtis> sorear: I don't know. It doesn't seem obvious to me that one can do so with unwind. On the other hand, I am not that familiar with LLVM in general or unwind specifically.

[04:49] *** perlpilot left
[04:51] *** sftp joined
[04:53] *** Limbic_Region left
[04:55] *** araujo left
[05:02] *** risou joined
[05:11] *** pythonian4000 is now known as pythonian4000afk

[05:12] *** pythonian4000afk is now known as pythonian4000

[05:14] *** pythonian4000 is now known as pythonian4000afk

[05:14] *** pythonian4000afk is now known as pythonian4000

[05:31] *** alester left
[05:33] <SpiceMan> hmm... class Foo { has $.foo }   my $f = Foo.new;  $f.foo(1)   # too many positional arguments: 2 passed, 1 expected

[05:34] <SpiceMan> what am I missing? :p

[05:34] *** justatheory left
[06:08] *** Schwern joined
[06:12] <sorear> SpiceMan: $f.foo() = 1

[06:13] <sorear> accessors don't take arguments; they return lvalues instead

[06:15] <SpiceMan> oh, I see

[06:17] <SpiceMan> so I need to explicitly create setter methods?

[06:18] <SpiceMan> no, I need to explicitly say is rw :p

[06:25] <sorear> niecza: my $stop = 0; until $stop { $stop = 0; }; say "got here" # wow

[06:25] <p6eval> niecza 4f60774: OUTPUT«(timeout)»

[06:26] <sorear> niecza: my $stop = 0; until $stop { $stop = 0; }; say "got here" # wow

[06:26] <p6eval> niecza 4f60774: OUTPUT«(timeout)»

[06:27] <sorear> interesting

[06:27] <sorear> this is a regression

[06:27] <sorear> that is oct 01 niecza

[06:36] <dalek> niecza/master: 1372bcd | sorear++ | / (6 files):

[06:36] <dalek> niecza/master: Match.synthetic and a first crack at testing EXPR

[06:36] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/1372bcd8e4e65cace97fc2da68c8acc40ba54d6f

[06:36] <dalek> niecza/master: 28fb38b | sorear++ | / (2 files):

[06:36] <dalek> niecza/master: Fix [] and {} returning lists

[06:36] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/28fb38b1e5c52d2f1d6a7880a598021f732caaed

[06:36] <dalek> niecza/master: 93ff317 | sorear++ | / (2 files):

[06:36] <dalek> niecza/master: Fix until loop miscompilation

[06:36] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/93ff31767ead856eba2b2cc3fbefbb5a670e0a09

[06:42] *** tylercurtis left
[06:45] *** baux joined
[06:52] *** araujo joined
[07:02] *** Schwern left
[07:03] <sorear> ok, I've gotten EXPR to stop crashing... this is a good sign

[07:04] *** mila__ joined
[07:05] *** mila__ is now known as mila

[07:08] *** mila left
[07:13] *** BinGOs left
[07:18] *** szabgab left
[07:25] *** szabgab joined
[07:29] *** BinGOs joined
[07:33] *** alaun left
[07:49] *** Tene left
[07:50] *** _kaare joined
[07:50] *** icwiener joined
[07:51] *** molaf joined
[07:52] *** Tene joined
[07:52] *** Tene left
[07:52] *** Tene joined
[07:53] *** tadzik joined
[08:11] *** nadim joined
[08:13] *** jhuni joined
[08:14] *** tadzik left
[08:15] <moritz_> good morning

[08:16] <sorear> hey moritz_

[08:18] * moritz_ forgot to start cron in the chroot where the rebuilds run

[08:39] <SpiceMan> hmm, trying to do Class Foo {  for %hash.kv -> $k, $v {  has "$k" is ro = $v } }  # sadly not working, any pointers? 

[08:39] * SpiceMan has some Moose background

[08:40] <moritz_> 'has' is compile time in Perl 6

[08:40] <moritz_> SpiceMan: just use a hash as attribute

[08:42] <SpiceMan> was giving HTTP::Status a try. in p5 it exports a bunch of constants, and felt like avoiding that, but thought it would be nice to have $s = HTTP::Status.new; say $s.HTTP_OK; # 200 instead

[08:43] <moritz_> just write methods

[08:43] <moritz_> method HTTP_OK() { 200 }

[08:44] <moritz_> constants don't work properly in rakudo yet

[08:44] <moritz_> you can also do somethiing like

[08:45] <moritz_> BEGIN { for (a => 1, b => 2).kv -> $k, $v { MyClass.^add_method($k, method () { $v }) }

[08:45] <moritz_> ]

[08:45] <moritz_> erm, }

[08:45] <SpiceMan> great, I like that :p

[08:45] * SpiceMan gives it a try

[08:48] *** am0c^ joined
[08:50] <moritz_> for now BEGIN doesn't see lexicals, so you might need to declare the hash as 'our'

[08:53] <SpiceMan> I noticed, hehe

[09:06] *** Ross joined
[09:07] *** Ross left
[09:07] *** Ross joined
[09:07] *** Ross left
[09:07] *** Ross joined
[09:09] *** MayDaniel joined
[09:13] <SpiceMan> omg, no wonder p6 is said to be slow 

[09:17] <sorear> those people should say rakudo

[09:20] <SpiceMan> I guess me too

[09:28] *** kjeldahl joined
[09:29] *** pythonian4000 is now known as pythonian4000afk

[09:34] *** timbunce joined
[09:38] *** Chillance joined
[09:41] *** am0c^ left
[09:42] *** wamba joined
[09:42] *** Ross left
[09:44] *** dual left
[09:51] <moritz_> SpiceMan: did the .^add_method thing work out?

[10:05] *** Ross joined
[10:05] *** Ross left
[10:05] *** Ross joined
[10:09] *** kjeldahl left
[10:12] *** mavrc joined
[10:18] *** kjeldahl joined
[10:23] *** ggoebel joined
[10:32] *** baux left
[10:33] *** MayDaniel left
[10:37] *** pythonian4000afk is now known as pythonian4000

[10:40] <SpiceMan> moritz_: not really :/ http://erxz.com/pb/440?hl=on&submit=Format+it!

[10:42] *** xinming joined
[10:48] <jnthn> o/

[10:49] *** MayDaniel joined
[10:49] *** icwiener left
[10:50] *** _twitch joined
[10:50] *** icwiener joined
[10:57] * jnthn packs for $trip

[11:02] *** risou_ joined
[11:03] *** pythonian4000 is now known as pythonian4000afk

[11:04] *** risou left
[11:06] *** jhuni left
[11:09] *** pythonian4000afk is now known as pythonian4000

[11:14] *** risou_ left
[11:24] *** kjeldahl left
[11:36] <colomon> jnthn: where are you off to?

[11:36] <jnthn> colomon: Going for a few days in England to see some close friends.

[11:37] <colomon> sounds fun!

[11:37] <jnthn> Yeah!

[11:37] <jnthn> First thing after my arrival we go for a roast lunch at a pub. \o/

[11:37] <jnthn> Certainly fun. :-)

[11:38] * jnthn is looking forward to some lovely food and beers

[11:38] * jnthn -> shop, bbs

[11:46] <moritz_> SpiceMan: that's weird... running the code add_method code at run time makes it work. Ugh.

[11:46] <moritz_> rakudo: class A { }; A.^add_method('foo', method () { 42 }); A.new.foo

[11:46] <p6eval> rakudo acce29:  ( no output )

[11:46] <moritz_> rakudo: class A { }; A.^add_method('foo', method () { 42 }); say A.new.foo

[11:47] <p6eval> rakudo acce29: OUTPUT«42␤»

[11:47] <moritz_> rakudo: class A { }; BEGIN { A.^add_method('foo', method () { 42 }) }; say A.new.foo

[11:47] <p6eval> rakudo acce29: OUTPUT«42␤»

[11:47] <moritz_> huh.

[11:47] <moritz_> why does it work here, but not in that script?

[11:50] <colomon> difference in when BEGIN runs?

[11:51] <moritz_> notreally

[11:54] * moritz_ just discovered the -P $max_procs  argument to xargs

[12:18] *** MayDaniel left
[12:19] *** ggoebel left
[12:20] *** zby_home joined
[12:22] *** Ross is now known as Ross|Away

[12:26] *** rhr left
[12:33] *** rhr joined
[12:38] *** zulon joined
[12:42] *** whiteknight joined
[12:42] *** baest_ joined
[12:43] *** baest left
[12:50] *** ggoebel joined
[12:57] *** Helios left
[12:58] *** am0c joined
[13:04] *** Helios joined
[13:12] *** dual joined
[13:21] *** Patterner left
[13:26] *** am0c left
[13:32] *** Psyche^ joined
[13:32] *** Psyche^ is now known as Patterner

[13:32] *** risou joined
[13:39] *** MayDaniel joined
[13:54] *** Axius joined
[14:00] *** Ross|Away is now known as Ross

[14:07] <SpiceMan> rakudo: Class A { }; $m = "foo"; A.^add_method( $m, method() { 1 } ); say A.new.foo

[14:07] <p6eval> rakudo acce29: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 22␤»

[14:07] <jnthn> class

[14:07] <jnthn> Not Class

[14:08] <SpiceMan> rakudo: class A { }; $m = "foo"; A.^add_method( $m, method() { 1 } ); say A.new.foo

[14:08] <p6eval> rakudo acce29: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 22␤»

[14:08] <SpiceMan> rakudo: class A { }; my $m = "foo"; A.^add_method( $m, method() { 1 } ); say A.new.foo  # my?

[14:08] <p6eval> rakudo acce29: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 22␤»

[14:08] *** mikehh joined
[14:09] <jnthn> rakudo: class A { }; my $m = "foo"; A.^add_method( $m, method () { 1 } ); say A.new.foo

[14:09] <p6eval> rakudo acce29: OUTPUT«1␤»

[14:09] <jnthn> foo() is always a function call

[14:10] <SpiceMan> the problem is the lack of space after method?

[14:10] <jnthn> yes

[14:13] * jnthn -> England, will be muchly offline for a few days. o/

[14:26] <SpiceMan> have a nice trip

[14:48] *** zulon left
[14:48] *** _twitch left
[14:49] *** _twitch joined
[14:55] *** am0c joined
[14:56] <simon> what's a good perl6 book?

[14:57] <moritz_> http://github.com/perl6/book/downloads is the best we have - full refund if you don't like it :-)

[14:59] <simon> does that mean that 'git clone' has an inverse? ;P

[15:00] <moritz_> sure, it's called 'git push'

[15:00] <simon> thanks.

[15:00] <simon> (I meant thanks for the link.)

[15:04] *** Ross is now known as Ross|Away

[15:05] *** am0c left
[15:15] *** hercynium left
[15:31] *** hercynium joined
[15:32] <SpiceMan> does this mean that refund == a patch commit; in here ? :p

[15:35] <moritz_> SpiceMan: refund means he gets his money back

[15:36] *** hercynium left
[15:42] <SpiceMan> I know what refund means, but if 'git push' must push *something*

[15:42] <SpiceMan> s\if//

[15:42] <SpiceMan> stupid keyboard

[15:45] *** silug left
[15:50] *** Axius left
[15:51] *** nymacro left
[15:54] *** patspam joined
[16:13] *** tadzik joined
[16:13] <tadzik> ~~

[16:14] *** wamba left
[16:15] *** wamba joined
[16:34] <s_mosher> perl6: sub infix:<T>(|$T) { for ^$T.elems { $T[$_].WHAT.say } }; (1,2) T (1,2) T (1,2) T (1,2);

[16:34] <p6eval> rakudo acce29: OUTPUT«Parcel()␤Parcel()␤List()␤Parcel()␤List()␤Parcel()␤»

[16:34] <p6eval> ..pugs: OUTPUT«*** No compatible multi variant found: "&infix:T"␤    at /tmp/Y5hdaLxcIH line 1, column 59-88␤»

[16:35] <s_mosher> hm. are those List()s legit?

[16:35] <s_mosher> rakudo: sub infix:<T>(|$T) { $T.WHAT.say; for ^$T.elems { $T[$_].perl.say } }; (1,2) T (1,2) T (1,2) T (1,2)

[16:35] <p6eval> rakudo acce29: OUTPUT«Capture()␤(1, 2)␤(1, 2)␤Capture()␤(Bool::True, Bool::True)␤(1, 2)␤Capture()␤(Bool::True, Bool::True)␤(1, 2)␤»

[16:37] <moritz_> the Bool::True come from successful say()

[16:37] <s_mosher> oh!

[16:37] <moritz_> rakudo: sub infix:<T>(|$T) { $T.WHAT.say; for ^$T.elems { $T[$_].perl.say }; [+] @($T) };  (1,2) T (1,2) T (1,2) T (1,2)

[16:37] <p6eval> rakudo acce29: OUTPUT«Capture()␤(1, 2)␤(1, 2)␤Capture()␤4␤(1, 2)␤Capture()␤3␤(1, 2)␤»

[16:43] <s_mosher> rakudo: sub infix:<T>(|$T) { $T.elems.say; [+] @($T) }; (1,2) T (1,2) T (1,2) T (1,2)

[16:43] <p6eval> rakudo acce29: OUTPUT«2␤2␤2␤»

[16:43] <s_mosher> rakudo: sub infix:<T>(|$T) { $T.elems.say; [+] @($T) }; ((1,2) T (1,2) T (1,2) T (1,2)).say

[16:43] <p6eval> rakudo acce29: OUTPUT«2␤2␤2␤3␤»

[16:47] *** icwiener_ joined
[16:50] *** icwiener left
[16:52] *** meppl left
[17:06] <dalek> niecza/master: 638cc46 | sorear++ | test3.pl:

[17:06] <dalek> niecza/master: Working version of EXPR test harness

[17:06] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/638cc4655c4b0b3bcbc8ec8f67a5216f73c5df2b

[17:06] <dalek> niecza/master: afb1d26 | sorear++ | / (6 files):

[17:06] <dalek> niecza/master: EXPR dependencies go live; add .suppose

[17:06] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/afb1d26bfd79071660a30d985be6b0758e4c452b

[17:08] *** timbunce left
[17:12] <sorear> good * #perl6

[17:15] *** timbunce joined
[17:31] *** Limbic_Region joined
[17:52] *** silug joined
[17:56] *** justatheory joined
[17:57] *** patspam1 joined
[17:58] *** patspam left
[18:00] *** SpiceMan left
[18:09] *** masak joined
[18:10] <masak> lol hai, #perl6

[18:11] <sorear> hello masak!

[18:11] <tadzik> masak: o/

[18:12] <masak> greetings gentlemen.

[18:13] *** timbunce left
[18:14] *** rindolf joined
[18:17] *** patspam1 left
[18:21] *** timbunce joined
[18:30] *** rindolf left
[18:32] *** nadim left
[18:33] <dukeleto> http://google-opensource.blogspot.com/2010/10/perl-and-parrot-spread-open-source-love.html

[18:34] *** s_mosher left
[18:36] *** nadim joined
[18:36] *** MayDaniel left
[18:36] <dalek> niecza/master: 8d62cee | sorear++ | / (5 files):

[18:36] <dalek> niecza/master: Rework self and $¢ a bit

[18:36] <dalek> niecza/master: 

[18:36] <dalek> niecza/master: The parameter to regexes is now named self like in any other method.

[18:36] <dalek> niecza/master: $¢ is a lexical alias created within $~MAIN snippets.

[18:36] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/8d62cee62f8bf6c5fc1f5d67a3fd12b91b903919

[18:36] <dalek> niecza/master: e7c2875 | sorear++ | / (4 files):

[18:36] <dalek> niecza/master: Allow $/ in strings in regexes

[18:36] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/e7c2875e8ba69e8d1edda36ca93828162818b9f2

[18:36] <masak> dukeleto++

[18:36] <dalek> niecza/master: 5f8e944 | sorear++ | / (3 files):

[18:36] <dalek> niecza/master: Allow $/ in subrule arg lists

[18:36] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/5f8e944c142d62e9653375a1fa1311ab20c4195d

[18:37] <dukeleto> masak: lots of interest in perl 6 here, I am fielding lots of questions

[18:37] <sorear> dukeleto: What is your relationship to GSoC?

[18:37] <masak> dukeleto: that's great news!

[18:38] <dukeleto> sorear: i was the org admin for Perl and Parrot the last 2 years, as well as a mentor for the last 3 years

[18:39] <sorear> Under what authority can you post on google-opensource.blogspot.com?

[18:40] <dukeleto> sorear: the spice must flow

[18:47] *** zby_home left
[18:59] *** timbunce left
[19:06] *** timbunce joined
[19:07] *** _twitch left
[19:22] *** molaf left
[19:32] <masak> rakudo: role A { method foo {} }; role B { method foo {} }; role C does A does B {}; say "alive"; C.new

[19:32] <p6eval> rakudo acce29: OUTPUT«alive␤Method 'foo' collides and a resolution must be provided by the class␤  in main program body at line 63␤»

[19:32] <masak> the resolution can't be provided by the class, because the class is anonymous and created implicitly by role-to-class punnery.

[19:33] *** MayDaniel joined
[19:34] <masak> masak's law of error messages: "Each additional helpful detail in the error message has an equal and opposite exception in which the detail is confusing rather than helpful."

[19:35] *** risou left
[19:39] <masak> obra++ wants 5.14 to improve AST roundtripping! \o/

[20:10] <tadzik> woosh, #neutro mentioned on twitter

[20:11] <dalek> niecza/master: 0aa0b91 | sorear++ | v6/ (2 files):

[20:11] <dalek> niecza/master: Port .nibble to new API

[20:11] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/0aa0b9108fd8bd9c9a4ad57d82c4d820ba41e41c

[20:11] <dalek> niecza/master: 6b69b85 | sorear++ | / (4 files):

[20:11] <dalek> niecza/master: Improve handling of listiness in regexes

[20:11] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/6b69b859f7bf78bd91192124a2aee1406a7b8721

[20:11] <dalek> niecza/master: 52b4159 | sorear++ | / (7 files):

[20:11] <dalek> niecza/master: Implement fixed-format <after> cases

[20:11] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/52b4159f74beb1325047e420b8b68ed35cd30895

[20:14] *** am0c joined
[20:15] *** hudnix left
[20:16] *** hudnix joined
[20:18] <Tene> dukeleto: where are you?

[20:20] *** timbunce left
[20:20] *** mavrc left
[20:27] <masak> wow, I'm glad Yapsi hasn't bitrotted, but I don't remember it being *that* slow...

[20:27] *** mavrc joined
[20:33] *** zby_home joined
[20:38] *** MayDaniel left
[20:44] *** Ross|Away left
[20:49] *** rgrau_ left
[20:49] *** Ross joined
[20:53] <dukeleto> Tene: at Google

[20:54] <masak> you're *in* the actual Google? :)

[20:55] *** bluescreen joined
[20:58] <dalek> yapsi: 0b3160c | masak++ | lib/Yapsi.pm:

[20:58] <dalek> yapsi: [Yapsi] bumped SIC version

[20:58] <dalek> yapsi: 

[20:58] <dalek> yapsi: Between releases, the SIC version is always the version number of the

[20:58] <dalek> yapsi: upcoming release.

[20:58] <dalek> yapsi: review: http://github.com/masak/yapsi/commit/0b3160cd3be85def41bb610d2275761db1e787de

[21:04] *** pythonian4000 is now known as pythonian4000afk

[21:04] <masak> what's the relation between TheDamian's "every" and (the conjectural) "each"?

[21:07] <masak> also, reading http://www.nntp.perl.org/group/perl.perl6.language/2010/10/msg34271.html , I'm thinking I might try doing Yapsi wihtout first-class junctions. most of those uses look like sugar to me.

[21:10] <masak> C<my $coefficient where Num & 0..1> -- what does that gain over C<my Num $coefficient where 0..1>?

[21:11] <lue> ohai o/

[21:12] <masak> lue! \o/

[21:12] <masak> S05:501: "With the new C<:ex> (C<:exhaustive>) modifier, the current regex will match every possible way (including overlapping) and return all matches in a list context, or a disjunction of matches in item context."

[21:13] <masak> seems that part of the spec hasn't been reached by the good news of the demise of wantarray and context dependence.

[21:13] <masak> either that, or I'm overinterpreting that demise.

[21:13] <flussence> wouldn't that behave the same as :g ?

[21:13] <masak> anyway, I question the usefulness of a disjunction of matches.

[21:13] <masak> flussence: no, because :g never overlaps.

[21:14] <masak> rakudo: $_ = "abababa"; s:g/aba/!!!/; .say

[21:14] <p6eval> rakudo acce29: OUTPUT«!!!b!!!␤»

[21:14] <flussence> no, I mean, the list contextishness of it

[21:14] <flussence> (did we ever figure out what to do there?)

[21:15] * masak checks

[21:16] <masak> the semantics of :g doesn't seem to be defined by S05.

[21:16] <masak> which means... it's like in Perl 5. which means, no junctions.

[21:16] <flussence> I recall there being a conversation here exactly because there's no wantarray for :g either...

[21:17] <masak> I'll be honest. I don't think junctions belong in the regex machinery.

[21:17] <colomon> flussence: that sounds familiar to me too.

[21:17] <colomon> I think it's been causing trouble for moritz_++

[21:17] <masak> if you want a disjunction, just prefix the match with 'any'.

[21:17] <colomon> +1

[21:18] <masak> I'm not foolish enough to make the change, though -- risking the wrath of TheDamian. :)

[21:21] * masak  ⇝  bed

[21:21] <masak> 'night, #perl6

[21:21] *** masak left
[21:23] <tadzik> .u ⇝

[21:23] <phenny> U+21DD RIGHTWARDS SQUIGGLE ARROW (⇝)

[21:31] *** jhuni joined
[21:31] *** MayDaniel joined
[21:43] *** wamba left
[21:45] *** jaldhar left
[21:46] *** _jaldhar joined
[22:02] <cognominal>  

[22:02] *** mikehh left
[22:09] *** icwiener_ left
[22:18] *** zby_home left
[22:19] *** _kaare left
[22:37] *** rgrau_ joined
[22:40] *** MayDaniel left
[22:55] *** mavrc left
[22:56] *** MayDaniel joined
[23:16] *** Ross left
[23:18] *** MayDaniel left
[23:19] *** felipe left
[23:20] *** hudnix left
[23:20] *** hudnix joined
[23:22] *** sftp_ joined
[23:22] *** sftp left
[23:41] *** am0c left
[23:55] *** pythonian4000afk is now known as pythonian4000

[23:56] *** ggoebel left
[23:58] *** ggoebel joined
